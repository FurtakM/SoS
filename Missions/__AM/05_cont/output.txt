// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RandomizeAll ;
  11: CALL_OW 11
// Init ;
  15: CALL 87 0 0
// InitRestrictions ;
  19: CALL 223 0 0
// if debug then
  23: LD_EXP 1
  27: IFFALSE 33
// DebugMode ;
  29: CALL 304 0 0
// SpawnApeman ( apemanStartArea , 2 ) ;
  33: LD_INT 12
  35: PPUSH
  36: LD_INT 2
  38: PPUSH
  39: CALL 798 0 2
// SpawnApeman ( apemanArea , [ 10 , 8 , 7 , 6 ] [ Difficulty ] ) ;
  43: LD_INT 11
  45: PPUSH
  46: LD_INT 10
  48: PUSH
  49: LD_INT 8
  51: PUSH
  52: LD_INT 7
  54: PUSH
  55: LD_INT 6
  57: PUSH
  58: EMPTY
  59: LIST
  60: LIST
  61: LIST
  62: LIST
  63: PUSH
  64: LD_OWVAR 67
  68: ARRAY
  69: PPUSH
  70: CALL 798 0 2
// CreateNature ;
  74: CALL 531 0 0
// PrepareAmericans ;
  78: CALL 1397 0 0
// Action ;
  82: CALL 2333 0 0
// end ;
  86: END
// export debug ; export mission_prefix , mission_prefix_prev ; export deltaBuilded , denisArrives , Delta , radar_allowed , first_apeman_tamed , apeman_army , radar_researched , radar_builded ; export apeman_counter , arab_spotted , end_mission , apeKillCounter , traitor ; function Init ; begin
  87: LD_INT 0
  89: PPUSH
// debug := false ;
  90: LD_ADDR_EXP 1
  94: PUSH
  95: LD_INT 0
  97: ST_TO_ADDR
// mission_prefix := 05_ ;
  98: LD_ADDR_EXP 2
 102: PUSH
 103: LD_STRING 05_
 105: ST_TO_ADDR
// mission_prefix_prev := 05a_ ;
 106: LD_ADDR_EXP 3
 110: PUSH
 111: LD_STRING 05a_
 113: ST_TO_ADDR
// deltaBuilded := false ;
 114: LD_ADDR_EXP 4
 118: PUSH
 119: LD_INT 0
 121: ST_TO_ADDR
// denisArrives := false ;
 122: LD_ADDR_EXP 5
 126: PUSH
 127: LD_INT 0
 129: ST_TO_ADDR
// radar_allowed := false ;
 130: LD_ADDR_EXP 7
 134: PUSH
 135: LD_INT 0
 137: ST_TO_ADDR
// first_apeman_tamed := false ;
 138: LD_ADDR_EXP 8
 142: PUSH
 143: LD_INT 0
 145: ST_TO_ADDR
// arab_spotted := false ;
 146: LD_ADDR_EXP 13
 150: PUSH
 151: LD_INT 0
 153: ST_TO_ADDR
// end_mission := false ;
 154: LD_ADDR_EXP 14
 158: PUSH
 159: LD_INT 0
 161: ST_TO_ADDR
// apeman_army := false ;
 162: LD_ADDR_EXP 9
 166: PUSH
 167: LD_INT 0
 169: ST_TO_ADDR
// radar_researched := false ;
 170: LD_ADDR_EXP 10
 174: PUSH
 175: LD_INT 0
 177: ST_TO_ADDR
// radar_builded := false ;
 178: LD_ADDR_EXP 11
 182: PUSH
 183: LD_INT 0
 185: ST_TO_ADDR
// apeman_counter := 0 ;
 186: LD_ADDR_EXP 12
 190: PUSH
 191: LD_INT 0
 193: ST_TO_ADDR
// Delta := 0 ;
 194: LD_ADDR_EXP 6
 198: PUSH
 199: LD_INT 0
 201: ST_TO_ADDR
// apeKillCounter := 0 ;
 202: LD_ADDR_EXP 15
 206: PUSH
 207: LD_INT 0
 209: ST_TO_ADDR
// traitor := false ;
 210: LD_ADDR_EXP 16
 214: PUSH
 215: LD_INT 0
 217: ST_TO_ADDR
// end ;
 218: LD_VAR 0 1
 222: RET
// function InitRestrictions ; begin
 223: LD_INT 0
 225: PPUSH
// SetRestrict ( b_lab_half , 1 , state_enabled ) ;
 226: LD_INT 7
 228: PPUSH
 229: LD_INT 1
 231: PPUSH
 232: LD_INT 1
 234: PPUSH
 235: CALL_OW 324
// SetRestrict ( b_lab_full , 1 , state_enabled ) ;
 239: LD_INT 8
 241: PPUSH
 242: LD_INT 1
 244: PPUSH
 245: LD_INT 1
 247: PPUSH
 248: CALL_OW 324
// SetRestrict ( b_lab_weapon , 1 , state_enabled ) ;
 252: LD_INT 10
 254: PPUSH
 255: LD_INT 1
 257: PPUSH
 258: LD_INT 1
 260: PPUSH
 261: CALL_OW 324
// SetTech ( tech_gatling , 1 , LoadVariable ( GatlingInGamma , 1 ) ) ;
 265: LD_INT 69
 267: PPUSH
 268: LD_INT 1
 270: PPUSH
 271: LD_STRING GatlingInGamma
 273: PPUSH
 274: LD_INT 1
 276: PPUSH
 277: CALL_OW 30
 281: PPUSH
 282: CALL_OW 322
// SetTech ( tech_weap1 , 1 , state_enabled ) ;
 286: LD_INT 51
 288: PPUSH
 289: LD_INT 1
 291: PPUSH
 292: LD_INT 1
 294: PPUSH
 295: CALL_OW 322
// end ;
 299: LD_VAR 0 1
 303: RET
// function DebugMode ; begin
 304: LD_INT 0
 306: PPUSH
// FogOff ( 1 ) ;
 307: LD_INT 1
 309: PPUSH
 310: CALL_OW 344
// Difficulty := 2 ;
 314: LD_ADDR_OWVAR 67
 318: PUSH
 319: LD_INT 2
 321: ST_TO_ADDR
// end ;
 322: LD_VAR 0 1
 326: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 0 ] ] ) >= 7 do
 327: LD_INT 22
 329: PUSH
 330: LD_INT 1
 332: PUSH
 333: EMPTY
 334: LIST
 335: LIST
 336: PUSH
 337: LD_INT 23
 339: PUSH
 340: LD_INT 0
 342: PUSH
 343: EMPTY
 344: LIST
 345: LIST
 346: PUSH
 347: EMPTY
 348: LIST
 349: LIST
 350: PPUSH
 351: CALL_OW 69
 355: PUSH
 356: LD_INT 7
 358: GREATEREQUAL
 359: IFFALSE 371
 361: GO 363
 363: DISABLE
// SetAchievement ( ACH_TAME ) ;
 364: LD_STRING ACH_TAME
 366: PPUSH
 367: CALL_OW 543
 371: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_bweapon , us_radar ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_radar ] ] ) do
 372: LD_INT 22
 374: PUSH
 375: LD_INT 1
 377: PUSH
 378: EMPTY
 379: LIST
 380: LIST
 381: PUSH
 382: LD_INT 35
 384: PUSH
 385: LD_INT 11
 387: PUSH
 388: EMPTY
 389: LIST
 390: LIST
 391: PUSH
 392: EMPTY
 393: LIST
 394: LIST
 395: PPUSH
 396: CALL_OW 69
 400: PUSH
 401: LD_INT 22
 403: PUSH
 404: LD_INT 1
 406: PUSH
 407: EMPTY
 408: LIST
 409: LIST
 410: PUSH
 411: LD_INT 34
 413: PUSH
 414: LD_INT 11
 416: PUSH
 417: EMPTY
 418: LIST
 419: LIST
 420: PUSH
 421: EMPTY
 422: LIST
 423: LIST
 424: PPUSH
 425: CALL_OW 69
 429: AND
 430: IFFALSE 442
 432: GO 434
 434: DISABLE
// SetAchievement ( ACH_RADAR ) ; end_of_file
 435: LD_STRING ACH_RADAR
 437: PPUSH
 438: CALL_OW 543
 442: END
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 443: LD_INT 0
 445: PPUSH
// uc_side := side ;
 446: LD_ADDR_OWVAR 20
 450: PUSH
 451: LD_VAR 0 1
 455: ST_TO_ADDR
// uc_nation := nation ;
 456: LD_ADDR_OWVAR 21
 460: PUSH
 461: LD_VAR 0 2
 465: ST_TO_ADDR
// vc_chassis := chassis ;
 466: LD_ADDR_OWVAR 37
 470: PUSH
 471: LD_VAR 0 3
 475: ST_TO_ADDR
// vc_engine := engine ;
 476: LD_ADDR_OWVAR 39
 480: PUSH
 481: LD_VAR 0 4
 485: ST_TO_ADDR
// vc_control := control ;
 486: LD_ADDR_OWVAR 38
 490: PUSH
 491: LD_VAR 0 5
 495: ST_TO_ADDR
// vc_weapon := weapon ;
 496: LD_ADDR_OWVAR 40
 500: PUSH
 501: LD_VAR 0 6
 505: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 506: LD_ADDR_OWVAR 41
 510: PUSH
 511: LD_VAR 0 7
 515: ST_TO_ADDR
// result := CreateVehicle ;
 516: LD_ADDR_VAR 0 8
 520: PUSH
 521: CALL_OW 45
 525: ST_TO_ADDR
// end ;
 526: LD_VAR 0 8
 530: RET
// export function CreateNature ; var i ; begin
 531: LD_INT 0
 533: PPUSH
 534: PPUSH
// for i := 1 to 4 do
 535: LD_ADDR_VAR 0 2
 539: PUSH
 540: DOUBLE
 541: LD_INT 1
 543: DEC
 544: ST_TO_ADDR
 545: LD_INT 4
 547: PUSH
 548: FOR_TO
 549: IFFALSE 572
// begin PrepareFrog ( ) ;
 551: CALL 63751 0 0
// PlaceUnitArea ( CreateHuman , swampArea , false ) ;
 555: CALL_OW 44
 559: PPUSH
 560: LD_INT 17
 562: PPUSH
 563: LD_INT 0
 565: PPUSH
 566: CALL_OW 49
// end ;
 570: GO 548
 572: POP
 573: POP
// for i := 1 to 6 do
 574: LD_ADDR_VAR 0 2
 578: PUSH
 579: DOUBLE
 580: LD_INT 1
 582: DEC
 583: ST_TO_ADDR
 584: LD_INT 6
 586: PUSH
 587: FOR_TO
 588: IFFALSE 611
// begin PrepareBird ( ) ;
 590: CALL 63831 0 0
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 594: CALL_OW 44
 598: PPUSH
 599: LD_INT 1
 601: PPUSH
 602: LD_INT 0
 604: PPUSH
 605: CALL_OW 49
// end ;
 609: GO 587
 611: POP
 612: POP
// for i := 1 to 11 do
 613: LD_ADDR_VAR 0 2
 617: PUSH
 618: DOUBLE
 619: LD_INT 1
 621: DEC
 622: ST_TO_ADDR
 623: LD_INT 11
 625: PUSH
 626: FOR_TO
 627: IFFALSE 650
// begin PrepareEnchidna ( ) ;
 629: CALL 63711 0 0
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 633: CALL_OW 44
 637: PPUSH
 638: LD_INT 1
 640: PPUSH
 641: LD_INT 0
 643: PPUSH
 644: CALL_OW 49
// end ;
 648: GO 626
 650: POP
 651: POP
// for i := 1 to 3 do
 652: LD_ADDR_VAR 0 2
 656: PUSH
 657: DOUBLE
 658: LD_INT 1
 660: DEC
 661: ST_TO_ADDR
 662: LD_INT 3
 664: PUSH
 665: FOR_TO
 666: IFFALSE 692
// begin PrepareTiger ( 10 ) ;
 668: LD_INT 10
 670: PPUSH
 671: CALL 63650 0 1
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 675: CALL_OW 44
 679: PPUSH
 680: LD_INT 1
 682: PPUSH
 683: LD_INT 0
 685: PPUSH
 686: CALL_OW 49
// end ;
 690: GO 665
 692: POP
 693: POP
// PrepareMastodont ( ) ;
 694: CALL 63911 0 0
// PlaceUnitArea ( CreateVehicle , mastodontArea , false ) ;
 698: CALL_OW 45
 702: PPUSH
 703: LD_INT 18
 705: PPUSH
 706: LD_INT 0
 708: PPUSH
 709: CALL_OW 49
// end ;
 713: LD_VAR 0 1
 717: RET
// export function SayX ( units , ident ) ; var i ; begin
 718: LD_INT 0
 720: PPUSH
 721: PPUSH
// result := false ;
 722: LD_ADDR_VAR 0 3
 726: PUSH
 727: LD_INT 0
 729: ST_TO_ADDR
// if not units then
 730: LD_VAR 0 1
 734: NOT
 735: IFFALSE 739
// exit ;
 737: GO 793
// for i in units do
 739: LD_ADDR_VAR 0 4
 743: PUSH
 744: LD_VAR 0 1
 748: PUSH
 749: FOR_IN
 750: IFFALSE 791
// if IsOk ( i ) then
 752: LD_VAR 0 4
 756: PPUSH
 757: CALL_OW 302
 761: IFFALSE 789
// begin Say ( i , ident ) ;
 763: LD_VAR 0 4
 767: PPUSH
 768: LD_VAR 0 2
 772: PPUSH
 773: CALL_OW 88
// result := i ;
 777: LD_ADDR_VAR 0 3
 781: PUSH
 782: LD_VAR 0 4
 786: ST_TO_ADDR
// break ;
 787: GO 791
// end ;
 789: GO 749
 791: POP
 792: POP
// end ;
 793: LD_VAR 0 3
 797: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 798: LD_INT 0
 800: PPUSH
 801: PPUSH
// InitUc ;
 802: CALL_OW 18
// InitHc ;
 806: CALL_OW 19
// uc_side := 0 ;
 810: LD_ADDR_OWVAR 20
 814: PUSH
 815: LD_INT 0
 817: ST_TO_ADDR
// uc_nation := 0 ;
 818: LD_ADDR_OWVAR 21
 822: PUSH
 823: LD_INT 0
 825: ST_TO_ADDR
// for i = 1 to amount do
 826: LD_ADDR_VAR 0 4
 830: PUSH
 831: DOUBLE
 832: LD_INT 1
 834: DEC
 835: ST_TO_ADDR
 836: LD_VAR 0 2
 840: PUSH
 841: FOR_TO
 842: IFFALSE 924
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 844: LD_ADDR_OWVAR 29
 848: PUSH
 849: LD_INT 9
 851: PPUSH
 852: LD_INT 12
 854: PPUSH
 855: CALL_OW 12
 859: PUSH
 860: LD_INT 9
 862: PPUSH
 863: LD_INT 12
 865: PPUSH
 866: CALL_OW 12
 870: PUSH
 871: EMPTY
 872: LIST
 873: LIST
 874: ST_TO_ADDR
// hc_agressivity := rand ( - 5 , 5 ) ;
 875: LD_ADDR_OWVAR 35
 879: PUSH
 880: LD_INT 5
 882: NEG
 883: PPUSH
 884: LD_INT 5
 886: PPUSH
 887: CALL_OW 12
 891: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 892: LD_INT 0
 894: PPUSH
 895: LD_INT 12
 897: PPUSH
 898: LD_INT 1
 900: PPUSH
 901: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 905: CALL_OW 44
 909: PPUSH
 910: LD_VAR 0 1
 914: PPUSH
 915: LD_INT 0
 917: PPUSH
 918: CALL_OW 49
// end ;
 922: GO 841
 924: POP
 925: POP
// InitHc ;
 926: CALL_OW 19
// end ;
 930: LD_VAR 0 3
 934: RET
// export function Attack ( unit , enemy_list ) ; var target , targets_list ; begin
 935: LD_INT 0
 937: PPUSH
 938: PPUSH
 939: PPUSH
// if not unit then
 940: LD_VAR 0 1
 944: NOT
 945: IFFALSE 949
// exit ;
 947: GO 1392
// if IsInUnit ( unit ) then
 949: LD_VAR 0 1
 953: PPUSH
 954: CALL_OW 310
 958: IFFALSE 975
// unit := IsDrivenBy ( unit ) ;
 960: LD_ADDR_VAR 0 1
 964: PUSH
 965: LD_VAR 0 1
 969: PPUSH
 970: CALL_OW 311
 974: ST_TO_ADDR
// targets_list := [ ] ;
 975: LD_ADDR_VAR 0 5
 979: PUSH
 980: EMPTY
 981: ST_TO_ADDR
// target := UnitFilter ( enemy_list , [ [ f_lives , 250 ] , [ f_not , [ f_weapon , us_cargo_bay ] ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 982: LD_ADDR_VAR 0 4
 986: PUSH
 987: LD_VAR 0 2
 991: PPUSH
 992: LD_INT 24
 994: PUSH
 995: LD_INT 250
 997: PUSH
 998: EMPTY
 999: LIST
1000: LIST
1001: PUSH
1002: LD_INT 3
1004: PUSH
1005: LD_INT 34
1007: PUSH
1008: LD_INT 12
1010: PUSH
1011: EMPTY
1012: LIST
1013: LIST
1014: PUSH
1015: EMPTY
1016: LIST
1017: LIST
1018: PUSH
1019: LD_INT 21
1021: PUSH
1022: LD_INT 2
1024: PUSH
1025: EMPTY
1026: LIST
1027: LIST
1028: PUSH
1029: LD_INT 58
1031: PUSH
1032: EMPTY
1033: LIST
1034: PUSH
1035: EMPTY
1036: LIST
1037: LIST
1038: LIST
1039: LIST
1040: PPUSH
1041: CALL_OW 72
1045: ST_TO_ADDR
// if GetDistUnits ( NearestUnitToUnit ( target , unit ) , unit ) < 11 and not IsInUnit ( unit ) then
1046: LD_VAR 0 4
1050: PPUSH
1051: LD_VAR 0 1
1055: PPUSH
1056: CALL_OW 74
1060: PPUSH
1061: LD_VAR 0 1
1065: PPUSH
1066: CALL_OW 296
1070: PUSH
1071: LD_INT 11
1073: LESS
1074: PUSH
1075: LD_VAR 0 1
1079: PPUSH
1080: CALL_OW 310
1084: NOT
1085: AND
1086: IFFALSE 1114
// begin ComEnterUnit ( unit , NearestUnitToUnit ( target , unit ) ) ;
1088: LD_VAR 0 1
1092: PPUSH
1093: LD_VAR 0 4
1097: PPUSH
1098: LD_VAR 0 1
1102: PPUSH
1103: CALL_OW 74
1107: PPUSH
1108: CALL_OW 120
// exit ;
1112: GO 1392
// end ; targets_list := [ UnitFilter ( enemy_list , [ [ f_type , unit_human ] , [ f_not , [ f_inside ] ] ] ) , UnitFilter ( enemy_list , [ f_type , unit_vehicle ] ) , UnitFilter ( enemy_list , [ [ f_type , unit_building ] , [ f_not , [ f_empty ] ] ] ) , enemy_list ] ;
1114: LD_ADDR_VAR 0 5
1118: PUSH
1119: LD_VAR 0 2
1123: PPUSH
1124: LD_INT 21
1126: PUSH
1127: LD_INT 1
1129: PUSH
1130: EMPTY
1131: LIST
1132: LIST
1133: PUSH
1134: LD_INT 3
1136: PUSH
1137: LD_INT 54
1139: PUSH
1140: EMPTY
1141: LIST
1142: PUSH
1143: EMPTY
1144: LIST
1145: LIST
1146: PUSH
1147: EMPTY
1148: LIST
1149: LIST
1150: PPUSH
1151: CALL_OW 72
1155: PUSH
1156: LD_VAR 0 2
1160: PPUSH
1161: LD_INT 21
1163: PUSH
1164: LD_INT 2
1166: PUSH
1167: EMPTY
1168: LIST
1169: LIST
1170: PPUSH
1171: CALL_OW 72
1175: PUSH
1176: LD_VAR 0 2
1180: PPUSH
1181: LD_INT 21
1183: PUSH
1184: LD_INT 3
1186: PUSH
1187: EMPTY
1188: LIST
1189: LIST
1190: PUSH
1191: LD_INT 3
1193: PUSH
1194: LD_INT 58
1196: PUSH
1197: EMPTY
1198: LIST
1199: PUSH
1200: EMPTY
1201: LIST
1202: LIST
1203: PUSH
1204: EMPTY
1205: LIST
1206: LIST
1207: PPUSH
1208: CALL_OW 72
1212: PUSH
1213: LD_VAR 0 2
1217: PUSH
1218: EMPTY
1219: LIST
1220: LIST
1221: LIST
1222: LIST
1223: ST_TO_ADDR
// for target in targets_list do
1224: LD_ADDR_VAR 0 4
1228: PUSH
1229: LD_VAR 0 5
1233: PUSH
1234: FOR_IN
1235: IFFALSE 1390
// begin if target then
1237: LD_VAR 0 4
1241: IFFALSE 1388
// if GetTag ( unit ) = 11 and ( GetType ( NearestUnitToUnit ( target , unit ) ) = unit_building or GetWeapon ( NearestUnitToUnit ( target , unit ) ) = us_cargo_bay ) then
1243: LD_VAR 0 1
1247: PPUSH
1248: CALL_OW 110
1252: PUSH
1253: LD_INT 11
1255: EQUAL
1256: PUSH
1257: LD_VAR 0 4
1261: PPUSH
1262: LD_VAR 0 1
1266: PPUSH
1267: CALL_OW 74
1271: PPUSH
1272: CALL_OW 247
1276: PUSH
1277: LD_INT 3
1279: EQUAL
1280: PUSH
1281: LD_VAR 0 4
1285: PPUSH
1286: LD_VAR 0 1
1290: PPUSH
1291: CALL_OW 74
1295: PPUSH
1296: CALL_OW 264
1300: PUSH
1301: LD_INT 12
1303: EQUAL
1304: OR
1305: AND
1306: IFFALSE 1352
// begin ComPlaceDelayedCharge ( unit , 0 , 0 , NearestUnitToUnit ( target , unit ) ) ;
1308: LD_VAR 0 1
1312: PPUSH
1313: LD_INT 0
1315: PPUSH
1316: LD_INT 0
1318: PPUSH
1319: LD_VAR 0 4
1323: PPUSH
1324: LD_VAR 0 1
1328: PPUSH
1329: CALL_OW 74
1333: PPUSH
1334: CALL_OW 132
// SetTag ( unit , 0 ) ;
1338: LD_VAR 0 1
1342: PPUSH
1343: LD_INT 0
1345: PPUSH
1346: CALL_OW 109
// end else
1350: GO 1388
// if not HasTask ( unit ) then
1352: LD_VAR 0 1
1356: PPUSH
1357: CALL_OW 314
1361: NOT
1362: IFFALSE 1388
// ComAttackUnit ( unit , NearestUnitToUnit ( target , unit ) ) ;
1364: LD_VAR 0 1
1368: PPUSH
1369: LD_VAR 0 4
1373: PPUSH
1374: LD_VAR 0 1
1378: PPUSH
1379: CALL_OW 74
1383: PPUSH
1384: CALL_OW 115
// end ;
1388: GO 1234
1390: POP
1391: POP
// end ; end_of_file
1392: LD_VAR 0 3
1396: RET
// export JMM , Gladstone , Harrison , Denis , Brown , Donaldson , Lisa , Frank , Bobby , Cyrus , Mike ; export others ; export function PrepareAmericans ; var i , points , veh , tmp ; begin
1397: LD_INT 0
1399: PPUSH
1400: PPUSH
1401: PPUSH
1402: PPUSH
1403: PPUSH
// uc_nation := 1 ;
1404: LD_ADDR_OWVAR 21
1408: PUSH
1409: LD_INT 1
1411: ST_TO_ADDR
// uc_side := 4 ;
1412: LD_ADDR_OWVAR 20
1416: PUSH
1417: LD_INT 4
1419: ST_TO_ADDR
// Denis := PrepareUnit ( Denis , false ,  ) ;
1420: LD_ADDR_EXP 20
1424: PUSH
1425: LD_STRING Denis
1427: PPUSH
1428: LD_INT 0
1430: PPUSH
1431: LD_STRING 
1433: PPUSH
1434: CALL 29583 0 3
1438: ST_TO_ADDR
// Harrison := PrepareUnit ( Harisson , false ,  ) ;
1439: LD_ADDR_EXP 19
1443: PUSH
1444: LD_STRING Harisson
1446: PPUSH
1447: LD_INT 0
1449: PPUSH
1450: LD_STRING 
1452: PPUSH
1453: CALL 29583 0 3
1457: ST_TO_ADDR
// uc_side := 1 ;
1458: LD_ADDR_OWVAR 20
1462: PUSH
1463: LD_INT 1
1465: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debug ) , mission_prefix_prev ) ;
1466: LD_ADDR_EXP 17
1470: PUSH
1471: LD_STRING JMM
1473: PPUSH
1474: LD_EXP 1
1478: NOT
1479: PPUSH
1480: LD_EXP 3
1484: PPUSH
1485: CALL 29583 0 3
1489: ST_TO_ADDR
// Gladstone := PrepareUnit ( Gladstone , false , mission_prefix_prev ) ;
1490: LD_ADDR_EXP 18
1494: PUSH
1495: LD_STRING Gladstone
1497: PPUSH
1498: LD_INT 0
1500: PPUSH
1501: LD_EXP 3
1505: PPUSH
1506: CALL 29583 0 3
1510: ST_TO_ADDR
// if LoadVariable ( BrownInDelta , debug ) then
1511: LD_STRING BrownInDelta
1513: PPUSH
1514: LD_EXP 1
1518: PPUSH
1519: CALL_OW 30
1523: IFFALSE 1565
// begin Brown := PrepareUnit ( Brown , ( not debug ) , mission_prefix_prev ) ;
1525: LD_ADDR_EXP 21
1529: PUSH
1530: LD_STRING Brown
1532: PPUSH
1533: LD_EXP 1
1537: NOT
1538: PPUSH
1539: LD_EXP 3
1543: PPUSH
1544: CALL 29583 0 3
1548: ST_TO_ADDR
// tmp := tmp ^ Brown ;
1549: LD_ADDR_VAR 0 5
1553: PUSH
1554: LD_VAR 0 5
1558: PUSH
1559: LD_EXP 21
1563: ADD
1564: ST_TO_ADDR
// end ; if LoadVariable ( DonaldsonInDelta , debug ) then
1565: LD_STRING DonaldsonInDelta
1567: PPUSH
1568: LD_EXP 1
1572: PPUSH
1573: CALL_OW 30
1577: IFFALSE 1619
// begin Donaldson := PrepareUnit ( Donaldson , ( not debug ) , mission_prefix_prev ) ;
1579: LD_ADDR_EXP 22
1583: PUSH
1584: LD_STRING Donaldson
1586: PPUSH
1587: LD_EXP 1
1591: NOT
1592: PPUSH
1593: LD_EXP 3
1597: PPUSH
1598: CALL 29583 0 3
1602: ST_TO_ADDR
// tmp := tmp ^ Donaldson ;
1603: LD_ADDR_VAR 0 5
1607: PUSH
1608: LD_VAR 0 5
1612: PUSH
1613: LD_EXP 22
1617: ADD
1618: ST_TO_ADDR
// end ; if LoadVariable ( LisaInDelta , debug ) then
1619: LD_STRING LisaInDelta
1621: PPUSH
1622: LD_EXP 1
1626: PPUSH
1627: CALL_OW 30
1631: IFFALSE 1673
// begin Lisa := PrepareUnit ( Lisa , ( not debug ) , mission_prefix_prev ) ;
1633: LD_ADDR_EXP 23
1637: PUSH
1638: LD_STRING Lisa
1640: PPUSH
1641: LD_EXP 1
1645: NOT
1646: PPUSH
1647: LD_EXP 3
1651: PPUSH
1652: CALL 29583 0 3
1656: ST_TO_ADDR
// tmp := tmp ^ Lisa ;
1657: LD_ADDR_VAR 0 5
1661: PUSH
1662: LD_VAR 0 5
1666: PUSH
1667: LD_EXP 23
1671: ADD
1672: ST_TO_ADDR
// end ; if LoadVariable ( FrankInDelta , debug ) then
1673: LD_STRING FrankInDelta
1675: PPUSH
1676: LD_EXP 1
1680: PPUSH
1681: CALL_OW 30
1685: IFFALSE 1727
// begin Frank := PrepareUnit ( Frank , ( not debug ) , mission_prefix_prev ) ;
1687: LD_ADDR_EXP 24
1691: PUSH
1692: LD_STRING Frank
1694: PPUSH
1695: LD_EXP 1
1699: NOT
1700: PPUSH
1701: LD_EXP 3
1705: PPUSH
1706: CALL 29583 0 3
1710: ST_TO_ADDR
// tmp := tmp ^ Frank ;
1711: LD_ADDR_VAR 0 5
1715: PUSH
1716: LD_VAR 0 5
1720: PUSH
1721: LD_EXP 24
1725: ADD
1726: ST_TO_ADDR
// end ; if LoadVariable ( BobbyInDelta , 0 ) then
1727: LD_STRING BobbyInDelta
1729: PPUSH
1730: LD_INT 0
1732: PPUSH
1733: CALL_OW 30
1737: IFFALSE 1779
// begin Bobby := PrepareUnit ( Bobby , ( not debug ) , mission_prefix_prev ) ;
1739: LD_ADDR_EXP 25
1743: PUSH
1744: LD_STRING Bobby
1746: PPUSH
1747: LD_EXP 1
1751: NOT
1752: PPUSH
1753: LD_EXP 3
1757: PPUSH
1758: CALL 29583 0 3
1762: ST_TO_ADDR
// tmp := tmp ^ Bobby ;
1763: LD_ADDR_VAR 0 5
1767: PUSH
1768: LD_VAR 0 5
1772: PUSH
1773: LD_EXP 25
1777: ADD
1778: ST_TO_ADDR
// end ; if LoadVariable ( CyrusInDelta , 0 ) then
1779: LD_STRING CyrusInDelta
1781: PPUSH
1782: LD_INT 0
1784: PPUSH
1785: CALL_OW 30
1789: IFFALSE 1831
// begin Cyrus := PrepareUnit ( Cyrus , ( not debug ) , mission_prefix_prev ) ;
1791: LD_ADDR_EXP 26
1795: PUSH
1796: LD_STRING Cyrus
1798: PPUSH
1799: LD_EXP 1
1803: NOT
1804: PPUSH
1805: LD_EXP 3
1809: PPUSH
1810: CALL 29583 0 3
1814: ST_TO_ADDR
// tmp := tmp ^ Cyrus ;
1815: LD_ADDR_VAR 0 5
1819: PUSH
1820: LD_VAR 0 5
1824: PUSH
1825: LD_EXP 26
1829: ADD
1830: ST_TO_ADDR
// end ; others := CreateCharacterSet ( othersDelta ) ;
1831: LD_ADDR_EXP 28
1835: PUSH
1836: LD_STRING othersDelta
1838: PPUSH
1839: CALL_OW 31
1843: ST_TO_ADDR
// if not others and debug then
1844: LD_EXP 28
1848: NOT
1849: PUSH
1850: LD_EXP 1
1854: AND
1855: IFFALSE 1920
// begin InitHc ;
1857: CALL_OW 19
// for i = 1 to 2 do
1861: LD_ADDR_VAR 0 2
1865: PUSH
1866: DOUBLE
1867: LD_INT 1
1869: DEC
1870: ST_TO_ADDR
1871: LD_INT 2
1873: PUSH
1874: FOR_TO
1875: IFFALSE 1918
// begin PrepareHuman ( false , i mod 4 + 1 , 3 ) ;
1877: LD_INT 0
1879: PPUSH
1880: LD_VAR 0 2
1884: PUSH
1885: LD_INT 4
1887: MOD
1888: PUSH
1889: LD_INT 1
1891: PLUS
1892: PPUSH
1893: LD_INT 3
1895: PPUSH
1896: CALL_OW 380
// others := others ^ CreateHuman ;
1900: LD_ADDR_EXP 28
1904: PUSH
1905: LD_EXP 28
1909: PUSH
1910: CALL_OW 44
1914: ADD
1915: ST_TO_ADDR
// end ;
1916: GO 1874
1918: POP
1919: POP
// end ; if others then
1920: LD_EXP 28
1924: IFFALSE 1942
// tmp := tmp ^ others ;
1926: LD_ADDR_VAR 0 5
1930: PUSH
1931: LD_VAR 0 5
1935: PUSH
1936: LD_EXP 28
1940: ADD
1941: ST_TO_ADDR
// points := [ [ 28 , 49 ] , [ 33 , 54 ] , [ 38 , 56 ] ] ;
1942: LD_ADDR_VAR 0 3
1946: PUSH
1947: LD_INT 28
1949: PUSH
1950: LD_INT 49
1952: PUSH
1953: EMPTY
1954: LIST
1955: LIST
1956: PUSH
1957: LD_INT 33
1959: PUSH
1960: LD_INT 54
1962: PUSH
1963: EMPTY
1964: LIST
1965: LIST
1966: PUSH
1967: LD_INT 38
1969: PUSH
1970: LD_INT 56
1972: PUSH
1973: EMPTY
1974: LIST
1975: LIST
1976: PUSH
1977: EMPTY
1978: LIST
1979: LIST
1980: LIST
1981: ST_TO_ADDR
// veh := PrepareTank ( 1 , 1 , us_medium_wheeled , engine_solar , control_manual , us_cargo_bay , 80 ) ;
1982: LD_ADDR_VAR 0 4
1986: PUSH
1987: LD_INT 1
1989: PPUSH
1990: LD_INT 1
1992: PPUSH
1993: LD_INT 2
1995: PPUSH
1996: LD_INT 2
1998: PPUSH
1999: LD_INT 1
2001: PPUSH
2002: LD_INT 12
2004: PPUSH
2005: LD_INT 80
2007: PPUSH
2008: CALL 443 0 7
2012: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
2013: LD_VAR 0 4
2017: PPUSH
2018: LD_INT 1
2020: PPUSH
2021: CALL_OW 233
// PlaceUnitXY ( veh , points [ 1 ] [ 1 ] , points [ 1 ] [ 2 ] , false ) ;
2025: LD_VAR 0 4
2029: PPUSH
2030: LD_VAR 0 3
2034: PUSH
2035: LD_INT 1
2037: ARRAY
2038: PUSH
2039: LD_INT 1
2041: ARRAY
2042: PPUSH
2043: LD_VAR 0 3
2047: PUSH
2048: LD_INT 1
2050: ARRAY
2051: PUSH
2052: LD_INT 2
2054: ARRAY
2055: PPUSH
2056: LD_INT 0
2058: PPUSH
2059: CALL_OW 48
// SetCargo ( veh , mat_cans , 100 ) ;
2063: LD_VAR 0 4
2067: PPUSH
2068: LD_INT 1
2070: PPUSH
2071: LD_INT 100
2073: PPUSH
2074: CALL_OW 290
// PlaceHumanInUnit ( others [ 1 ] , veh ) ;
2078: LD_EXP 28
2082: PUSH
2083: LD_INT 1
2085: ARRAY
2086: PPUSH
2087: LD_VAR 0 4
2091: PPUSH
2092: CALL_OW 52
// veh := PrepareTank ( 1 , 1 , us_light_wheeled , engine_solar , control_manual , us_machine_gun , 80 ) ;
2096: LD_ADDR_VAR 0 4
2100: PUSH
2101: LD_INT 1
2103: PPUSH
2104: LD_INT 1
2106: PPUSH
2107: LD_INT 1
2109: PPUSH
2110: LD_INT 2
2112: PPUSH
2113: LD_INT 1
2115: PPUSH
2116: LD_INT 2
2118: PPUSH
2119: LD_INT 80
2121: PPUSH
2122: CALL 443 0 7
2126: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
2127: LD_VAR 0 4
2131: PPUSH
2132: LD_INT 1
2134: PPUSH
2135: CALL_OW 233
// PlaceUnitXY ( veh , points [ 2 ] [ 1 ] , points [ 2 ] [ 2 ] , false ) ;
2139: LD_VAR 0 4
2143: PPUSH
2144: LD_VAR 0 3
2148: PUSH
2149: LD_INT 2
2151: ARRAY
2152: PUSH
2153: LD_INT 1
2155: ARRAY
2156: PPUSH
2157: LD_VAR 0 3
2161: PUSH
2162: LD_INT 2
2164: ARRAY
2165: PUSH
2166: LD_INT 2
2168: ARRAY
2169: PPUSH
2170: LD_INT 0
2172: PPUSH
2173: CALL_OW 48
// PlaceHumanInUnit ( Gladstone , veh ) ;
2177: LD_EXP 18
2181: PPUSH
2182: LD_VAR 0 4
2186: PPUSH
2187: CALL_OW 52
// veh := PrepareTank ( 1 , 1 , us_light_wheeled , engine_solar , control_manual , us_light_gun , 80 ) ;
2191: LD_ADDR_VAR 0 4
2195: PUSH
2196: LD_INT 1
2198: PPUSH
2199: LD_INT 1
2201: PPUSH
2202: LD_INT 1
2204: PPUSH
2205: LD_INT 2
2207: PPUSH
2208: LD_INT 1
2210: PPUSH
2211: LD_INT 3
2213: PPUSH
2214: LD_INT 80
2216: PPUSH
2217: CALL 443 0 7
2221: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
2222: LD_VAR 0 4
2226: PPUSH
2227: LD_INT 1
2229: PPUSH
2230: CALL_OW 233
// PlaceUnitXY ( veh , points [ 3 ] [ 1 ] , points [ 3 ] [ 2 ] , false ) ;
2234: LD_VAR 0 4
2238: PPUSH
2239: LD_VAR 0 3
2243: PUSH
2244: LD_INT 3
2246: ARRAY
2247: PUSH
2248: LD_INT 1
2250: ARRAY
2251: PPUSH
2252: LD_VAR 0 3
2256: PUSH
2257: LD_INT 3
2259: ARRAY
2260: PUSH
2261: LD_INT 2
2263: ARRAY
2264: PPUSH
2265: LD_INT 0
2267: PPUSH
2268: CALL_OW 48
// PlaceHumanInUnit ( JMM , veh ) ;
2272: LD_EXP 17
2276: PPUSH
2277: LD_VAR 0 4
2281: PPUSH
2282: CALL_OW 52
// for i in tmp diff others [ 1 ] do
2286: LD_ADDR_VAR 0 2
2290: PUSH
2291: LD_VAR 0 5
2295: PUSH
2296: LD_EXP 28
2300: PUSH
2301: LD_INT 1
2303: ARRAY
2304: DIFF
2305: PUSH
2306: FOR_IN
2307: IFFALSE 2326
// PlaceUnitArea ( i , startArea , false ) ;
2309: LD_VAR 0 2
2313: PPUSH
2314: LD_INT 5
2316: PPUSH
2317: LD_INT 0
2319: PPUSH
2320: CALL_OW 49
2324: GO 2306
2326: POP
2327: POP
// end ; end_of_file
2328: LD_VAR 0 1
2332: RET
// export function Action ; var m ; begin
2333: LD_INT 0
2335: PPUSH
2336: PPUSH
// InGameOn ;
2337: CALL_OW 8
// CenterNowOnXY ( 28 , 51 ) ;
2341: LD_INT 28
2343: PPUSH
2344: LD_INT 51
2346: PPUSH
2347: CALL_OW 86
// Wait ( 3 ) ;
2351: LD_INT 3
2353: PPUSH
2354: CALL_OW 67
// Say ( JMM , D1d-JMM-1a ) ;
2358: LD_EXP 17
2362: PPUSH
2363: LD_STRING D1d-JMM-1a
2365: PPUSH
2366: CALL_OW 88
// SayRadio ( Harrison , D1d-Har-1 ) ;
2370: LD_EXP 19
2374: PPUSH
2375: LD_STRING D1d-Har-1
2377: PPUSH
2378: CALL_OW 94
// InGameOff ;
2382: CALL_OW 9
// SaveForQuickRestart ;
2386: CALL_OW 22
// ChangeMissionObjectives ( M1 ) ;
2390: LD_STRING M1
2392: PPUSH
2393: CALL_OW 337
// Wait ( 0 0$2 ) ;
2397: LD_INT 70
2399: PPUSH
2400: CALL_OW 67
// Say ( JMM , D2-JMM-1 ) ;
2404: LD_EXP 17
2408: PPUSH
2409: LD_STRING D2-JMM-1
2411: PPUSH
2412: CALL_OW 88
// Say ( Gladstone , D2-Glad-1 ) ;
2416: LD_EXP 18
2420: PPUSH
2421: LD_STRING D2-Glad-1
2423: PPUSH
2424: CALL_OW 88
// Say ( JMM , D2-JMM-2 ) ;
2428: LD_EXP 17
2432: PPUSH
2433: LD_STRING D2-JMM-2
2435: PPUSH
2436: CALL_OW 88
// Say ( Gladstone , D2-Glad-2 ) ;
2440: LD_EXP 18
2444: PPUSH
2445: LD_STRING D2-Glad-2
2447: PPUSH
2448: CALL_OW 88
// Say ( JMM , D2-JMM-3 ) ;
2452: LD_EXP 17
2456: PPUSH
2457: LD_STRING D2-JMM-3
2459: PPUSH
2460: CALL_OW 88
// Wait ( rand ( 0 0$30 , 1 1$00 ) ) ;
2464: LD_INT 1050
2466: PPUSH
2467: LD_INT 2100
2469: PPUSH
2470: CALL_OW 12
2474: PPUSH
2475: CALL_OW 67
// SetWeather ( 1 , 570 , 350 ) ;
2479: LD_INT 1
2481: PPUSH
2482: LD_INT 570
2484: PPUSH
2485: LD_INT 350
2487: PPUSH
2488: CALL_OW 550
// Wait ( rand ( 3 3$00 , 5 5$00 ) ) ;
2492: LD_INT 6300
2494: PPUSH
2495: LD_INT 10500
2497: PPUSH
2498: CALL_OW 12
2502: PPUSH
2503: CALL_OW 67
// SetWeather ( 0 , 570 , 350 ) ;
2507: LD_INT 0
2509: PPUSH
2510: LD_INT 570
2512: PPUSH
2513: LD_INT 350
2515: PPUSH
2516: CALL_OW 550
// end ;
2520: LD_VAR 0 1
2524: RET
// every 0 0$01 trigger FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_not , [ f_constructed ] ] , [ f_btype , b_depot ] ] ] ) and not deltaBuilded do
2525: LD_INT 22
2527: PUSH
2528: LD_INT 1
2530: PUSH
2531: EMPTY
2532: LIST
2533: LIST
2534: PUSH
2535: LD_INT 3
2537: PUSH
2538: LD_INT 57
2540: PUSH
2541: EMPTY
2542: LIST
2543: PUSH
2544: EMPTY
2545: LIST
2546: LIST
2547: PUSH
2548: LD_INT 30
2550: PUSH
2551: LD_INT 0
2553: PUSH
2554: EMPTY
2555: LIST
2556: LIST
2557: PUSH
2558: EMPTY
2559: LIST
2560: LIST
2561: LIST
2562: PUSH
2563: EMPTY
2564: LIST
2565: PPUSH
2566: CALL_OW 69
2570: PUSH
2571: LD_EXP 4
2575: NOT
2576: AND
2577: IFFALSE 2590
2579: GO 2581
2581: DISABLE
// begin deltaBuilded := true ;
2582: LD_ADDR_EXP 4
2586: PUSH
2587: LD_INT 1
2589: ST_TO_ADDR
// end ;
2590: END
// every 0 0$01 trigger not Delta and deltaBuilded and FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_not , [ f_constructed ] ] , [ f_btype , b_depot ] ] ] ) do
2591: LD_EXP 6
2595: NOT
2596: PUSH
2597: LD_EXP 4
2601: AND
2602: PUSH
2603: LD_INT 22
2605: PUSH
2606: LD_INT 1
2608: PUSH
2609: EMPTY
2610: LIST
2611: LIST
2612: PUSH
2613: LD_INT 3
2615: PUSH
2616: LD_INT 57
2618: PUSH
2619: EMPTY
2620: LIST
2621: PUSH
2622: EMPTY
2623: LIST
2624: LIST
2625: PUSH
2626: LD_INT 30
2628: PUSH
2629: LD_INT 0
2631: PUSH
2632: EMPTY
2633: LIST
2634: LIST
2635: PUSH
2636: EMPTY
2637: LIST
2638: LIST
2639: LIST
2640: PUSH
2641: EMPTY
2642: LIST
2643: PPUSH
2644: CALL_OW 69
2648: AND
2649: IFFALSE 2735
2651: GO 2653
2653: DISABLE
// begin enable ;
2654: ENABLE
// SetRestrict ( b_depot , 1 , state_disabled ) ;
2655: LD_INT 0
2657: PPUSH
2658: LD_INT 1
2660: PPUSH
2661: LD_INT 0
2663: PPUSH
2664: CALL_OW 324
// Delta := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_not , [ f_constructed ] ] , [ f_btype , b_depot ] ] ] ) [ 1 ] ;
2668: LD_ADDR_EXP 6
2672: PUSH
2673: LD_INT 22
2675: PUSH
2676: LD_INT 1
2678: PUSH
2679: EMPTY
2680: LIST
2681: LIST
2682: PUSH
2683: LD_INT 3
2685: PUSH
2686: LD_INT 57
2688: PUSH
2689: EMPTY
2690: LIST
2691: PUSH
2692: EMPTY
2693: LIST
2694: LIST
2695: PUSH
2696: LD_INT 30
2698: PUSH
2699: LD_INT 0
2701: PUSH
2702: EMPTY
2703: LIST
2704: LIST
2705: PUSH
2706: EMPTY
2707: LIST
2708: LIST
2709: LIST
2710: PUSH
2711: EMPTY
2712: LIST
2713: PPUSH
2714: CALL_OW 69
2718: PUSH
2719: LD_INT 1
2721: ARRAY
2722: ST_TO_ADDR
// SetBName ( Delta , Delta ) ;
2723: LD_EXP 6
2727: PPUSH
2728: LD_STRING Delta
2730: PPUSH
2731: CALL_OW 500
// end ;
2735: END
// every 0 0$2 trigger GetTech ( tech_ApeLang , 1 ) = state_researched and IsOk ( Gladstone ) do
2736: LD_INT 1
2738: PPUSH
2739: LD_INT 1
2741: PPUSH
2742: CALL_OW 321
2746: PUSH
2747: LD_INT 2
2749: EQUAL
2750: PUSH
2751: LD_EXP 18
2755: PPUSH
2756: CALL_OW 302
2760: AND
2761: IFFALSE 2822
2763: GO 2765
2765: DISABLE
// begin DialogueOn ;
2766: CALL_OW 6
// Say ( Gladstone , D3-Glad-1 ) ;
2770: LD_EXP 18
2774: PPUSH
2775: LD_STRING D3-Glad-1
2777: PPUSH
2778: CALL_OW 88
// Say ( JMM , D3-JMM-1 ) ;
2782: LD_EXP 17
2786: PPUSH
2787: LD_STRING D3-JMM-1
2789: PPUSH
2790: CALL_OW 88
// Say ( Gladstone , D3-Glad-2 ) ;
2794: LD_EXP 18
2798: PPUSH
2799: LD_STRING D3-Glad-2
2801: PPUSH
2802: CALL_OW 88
// Say ( JMM , D3-JMM-2 ) ;
2806: LD_EXP 17
2810: PPUSH
2811: LD_STRING D3-JMM-2
2813: PPUSH
2814: CALL_OW 88
// DialogueOff ;
2818: CALL_OW 7
// end ;
2822: END
// every 0 0$1 trigger GetTech ( tech_ApePsych , 1 ) = state_researched and ( IsOk ( Frank ) or ( IsOk ( Denis ) and GetSide ( Denis ) = 1 ) or UnitFilter ( others , [ f_sex , sex_male ] ) ) do var i , sol , ape , b ;
2823: LD_INT 2
2825: PPUSH
2826: LD_INT 1
2828: PPUSH
2829: CALL_OW 321
2833: PUSH
2834: LD_INT 2
2836: EQUAL
2837: PUSH
2838: LD_EXP 24
2842: PPUSH
2843: CALL_OW 302
2847: PUSH
2848: LD_EXP 20
2852: PPUSH
2853: CALL_OW 302
2857: PUSH
2858: LD_EXP 20
2862: PPUSH
2863: CALL_OW 255
2867: PUSH
2868: LD_INT 1
2870: EQUAL
2871: AND
2872: OR
2873: PUSH
2874: LD_EXP 28
2878: PPUSH
2879: LD_INT 26
2881: PUSH
2882: LD_INT 1
2884: PUSH
2885: EMPTY
2886: LIST
2887: LIST
2888: PPUSH
2889: CALL_OW 72
2893: OR
2894: AND
2895: IFFALSE 3436
2897: GO 2899
2899: DISABLE
2900: LD_INT 0
2902: PPUSH
2903: PPUSH
2904: PPUSH
2905: PPUSH
// begin InGameOn ;
2906: CALL_OW 8
// DialogueOn ;
2910: CALL_OW 6
// if Frank then
2914: LD_EXP 24
2918: IFFALSE 2932
// Say ( Frank , D8a-Frank-1 ) ;
2920: LD_EXP 24
2924: PPUSH
2925: LD_STRING D8a-Frank-1
2927: PPUSH
2928: CALL_OW 88
// sol := SayX ( UnitFilter ( others , [ f_sex , sex_male ] ) , D8a-Sol1-1 ) ;
2932: LD_ADDR_VAR 0 2
2936: PUSH
2937: LD_EXP 28
2941: PPUSH
2942: LD_INT 26
2944: PUSH
2945: LD_INT 1
2947: PUSH
2948: EMPTY
2949: LIST
2950: LIST
2951: PPUSH
2952: CALL_OW 72
2956: PPUSH
2957: LD_STRING D8a-Sol1-1
2959: PPUSH
2960: CALL 718 0 2
2964: ST_TO_ADDR
// if Denis and GetSide ( Denis ) = 1 then
2965: LD_EXP 20
2969: PUSH
2970: LD_EXP 20
2974: PPUSH
2975: CALL_OW 255
2979: PUSH
2980: LD_INT 1
2982: EQUAL
2983: AND
2984: IFFALSE 2998
// Say ( Denis , D8a-Den-1 ) ;
2986: LD_EXP 20
2990: PPUSH
2991: LD_STRING D8a-Den-1
2993: PPUSH
2994: CALL_OW 88
// if sol or Denis or Frank then
2998: LD_VAR 0 2
3002: PUSH
3003: LD_EXP 20
3007: OR
3008: PUSH
3009: LD_EXP 24
3013: OR
3014: IFFALSE 3075
// begin SayX ( UnitFilter ( others , [ [ f_class , 4 ] , [ f_sex , sex_male ] ] ) diff sol , D8a-Sci1-1 ) ;
3016: LD_EXP 28
3020: PPUSH
3021: LD_INT 25
3023: PUSH
3024: LD_INT 4
3026: PUSH
3027: EMPTY
3028: LIST
3029: LIST
3030: PUSH
3031: LD_INT 26
3033: PUSH
3034: LD_INT 1
3036: PUSH
3037: EMPTY
3038: LIST
3039: LIST
3040: PUSH
3041: EMPTY
3042: LIST
3043: LIST
3044: PPUSH
3045: CALL_OW 72
3049: PUSH
3050: LD_VAR 0 2
3054: DIFF
3055: PPUSH
3056: LD_STRING D8a-Sci1-1
3058: PPUSH
3059: CALL 718 0 2
// Say ( JMM , D8a-JMM-1 ) ;
3063: LD_EXP 17
3067: PPUSH
3068: LD_STRING D8a-JMM-1
3070: PPUSH
3071: CALL_OW 88
// end ; ape := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_apeman ] , [ f_inside ] ] ) ;
3075: LD_ADDR_VAR 0 3
3079: PUSH
3080: LD_INT 22
3082: PUSH
3083: LD_INT 1
3085: PUSH
3086: EMPTY
3087: LIST
3088: LIST
3089: PUSH
3090: LD_INT 25
3092: PUSH
3093: LD_INT 12
3095: PUSH
3096: EMPTY
3097: LIST
3098: LIST
3099: PUSH
3100: LD_INT 54
3102: PUSH
3103: EMPTY
3104: LIST
3105: PUSH
3106: EMPTY
3107: LIST
3108: LIST
3109: LIST
3110: PPUSH
3111: CALL_OW 69
3115: ST_TO_ADDR
// b := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) [ 1 ] ;
3116: LD_ADDR_VAR 0 4
3120: PUSH
3121: LD_INT 22
3123: PUSH
3124: LD_INT 1
3126: PUSH
3127: EMPTY
3128: LIST
3129: LIST
3130: PUSH
3131: LD_INT 2
3133: PUSH
3134: LD_INT 30
3136: PUSH
3137: LD_INT 6
3139: PUSH
3140: EMPTY
3141: LIST
3142: LIST
3143: PUSH
3144: LD_INT 30
3146: PUSH
3147: LD_INT 7
3149: PUSH
3150: EMPTY
3151: LIST
3152: LIST
3153: PUSH
3154: LD_INT 30
3156: PUSH
3157: LD_INT 8
3159: PUSH
3160: EMPTY
3161: LIST
3162: LIST
3163: PUSH
3164: EMPTY
3165: LIST
3166: LIST
3167: LIST
3168: LIST
3169: PUSH
3170: EMPTY
3171: LIST
3172: LIST
3173: PPUSH
3174: CALL_OW 69
3178: PUSH
3179: LD_INT 1
3181: ARRAY
3182: ST_TO_ADDR
// for i in ape do
3183: LD_ADDR_VAR 0 1
3187: PUSH
3188: LD_VAR 0 3
3192: PUSH
3193: FOR_IN
3194: IFFALSE 3227
// if i in UnitsInside ( b ) then
3196: LD_VAR 0 1
3200: PUSH
3201: LD_VAR 0 4
3205: PPUSH
3206: CALL_OW 313
3210: IN
3211: IFFALSE 3225
// begin ape := i ;
3213: LD_ADDR_VAR 0 3
3217: PUSH
3218: LD_VAR 0 1
3222: ST_TO_ADDR
// break ;
3223: GO 3227
// end ;
3225: GO 3193
3227: POP
3228: POP
// if not ape then
3229: LD_VAR 0 3
3233: NOT
3234: IFFALSE 3246
// begin DialogueOff ;
3236: CALL_OW 7
// InGameOff ;
3240: CALL_OW 9
// exit ;
3244: GO 3436
// end ; RemoveUnit ( ape ) ;
3246: LD_VAR 0 3
3250: PPUSH
3251: CALL_OW 64
// PrepareApeman ( 0 ) ;
3255: LD_INT 0
3257: PPUSH
3258: CALL 63542 0 1
// uc_side := 1 ;
3262: LD_ADDR_OWVAR 20
3266: PUSH
3267: LD_INT 1
3269: ST_TO_ADDR
// hc_name := Mike  ;
3270: LD_ADDR_OWVAR 26
3274: PUSH
3275: LD_STRING Mike 
3277: ST_TO_ADDR
// hc_gallery := us ;
3278: LD_ADDR_OWVAR 33
3282: PUSH
3283: LD_STRING us
3285: ST_TO_ADDR
// hc_face_number := 30 ;
3286: LD_ADDR_OWVAR 34
3290: PUSH
3291: LD_INT 30
3293: ST_TO_ADDR
// hc_attr := [ GetAttr ( ape , attr_stamina ) , GetAttr ( ape , attr_speed ) ] ;
3294: LD_ADDR_OWVAR 29
3298: PUSH
3299: LD_VAR 0 3
3303: PPUSH
3304: LD_INT 1
3306: PPUSH
3307: CALL_OW 260
3311: PUSH
3312: LD_VAR 0 3
3316: PPUSH
3317: LD_INT 2
3319: PPUSH
3320: CALL_OW 260
3324: PUSH
3325: EMPTY
3326: LIST
3327: LIST
3328: ST_TO_ADDR
// hc_skills := [ GetSkill ( ape , 1 ) , GetSkill ( ape , 2 ) , GetSkill ( ape , 3 ) , GetSkill ( ape , 4 ) ] ;
3329: LD_ADDR_OWVAR 31
3333: PUSH
3334: LD_VAR 0 3
3338: PPUSH
3339: LD_INT 1
3341: PPUSH
3342: CALL_OW 259
3346: PUSH
3347: LD_VAR 0 3
3351: PPUSH
3352: LD_INT 2
3354: PPUSH
3355: CALL_OW 259
3359: PUSH
3360: LD_VAR 0 3
3364: PPUSH
3365: LD_INT 3
3367: PPUSH
3368: CALL_OW 259
3372: PUSH
3373: LD_VAR 0 3
3377: PPUSH
3378: LD_INT 4
3380: PPUSH
3381: CALL_OW 259
3385: PUSH
3386: EMPTY
3387: LIST
3388: LIST
3389: LIST
3390: LIST
3391: ST_TO_ADDR
// hc_sex := sex_male ;
3392: LD_ADDR_OWVAR 27
3396: PUSH
3397: LD_INT 1
3399: ST_TO_ADDR
// Mike := CreateHuman ;
3400: LD_ADDR_EXP 27
3404: PUSH
3405: CALL_OW 44
3409: ST_TO_ADDR
// PlaceHumanInUnit ( Mike , b ) ;
3410: LD_EXP 27
3414: PPUSH
3415: LD_VAR 0 4
3419: PPUSH
3420: CALL_OW 52
// InitHc_All ( ) ;
3424: CALL_OW 584
// DialogueOff ;
3428: CALL_OW 7
// InGameOff ;
3432: CALL_OW 9
// end ;
3436: PPOPN 4
3438: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_apeman_engineer ] ] ) do
3439: LD_INT 22
3441: PUSH
3442: LD_INT 1
3444: PUSH
3445: EMPTY
3446: LIST
3447: LIST
3448: PUSH
3449: LD_INT 25
3451: PUSH
3452: LD_INT 16
3454: PUSH
3455: EMPTY
3456: LIST
3457: LIST
3458: PUSH
3459: EMPTY
3460: LIST
3461: LIST
3462: PPUSH
3463: CALL_OW 69
3467: IFFALSE 3526
3469: GO 3471
3471: DISABLE
// begin ChangeMissionObjectives ( M1a ) ;
3472: LD_STRING M1a
3474: PPUSH
3475: CALL_OW 337
// case Query ( Q2 ) of 1 :
3479: LD_STRING Q2
3481: PPUSH
3482: CALL_OW 97
3486: PUSH
3487: LD_INT 1
3489: DOUBLE
3490: EQUAL
3491: IFTRUE 3495
3493: GO 3506
3495: POP
// end_mission := true ; 2 :
3496: LD_ADDR_EXP 14
3500: PUSH
3501: LD_INT 1
3503: ST_TO_ADDR
3504: GO 3526
3506: LD_INT 2
3508: DOUBLE
3509: EQUAL
3510: IFTRUE 3514
3512: GO 3525
3514: POP
// end_the_mission_allowed := true ; end ;
3515: LD_ADDR_OWVAR 57
3519: PUSH
3520: LD_INT 1
3522: ST_TO_ADDR
3523: GO 3526
3525: POP
// end ;
3526: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) and Delta do
3527: LD_INT 22
3529: PUSH
3530: LD_INT 1
3532: PUSH
3533: EMPTY
3534: LIST
3535: LIST
3536: PUSH
3537: LD_INT 2
3539: PUSH
3540: LD_INT 30
3542: PUSH
3543: LD_INT 6
3545: PUSH
3546: EMPTY
3547: LIST
3548: LIST
3549: PUSH
3550: LD_INT 30
3552: PUSH
3553: LD_INT 7
3555: PUSH
3556: EMPTY
3557: LIST
3558: LIST
3559: PUSH
3560: EMPTY
3561: LIST
3562: LIST
3563: LIST
3564: PUSH
3565: EMPTY
3566: LIST
3567: LIST
3568: PPUSH
3569: CALL_OW 69
3573: PUSH
3574: LD_INT 22
3576: PUSH
3577: LD_INT 1
3579: PUSH
3580: EMPTY
3581: LIST
3582: LIST
3583: PUSH
3584: LD_INT 2
3586: PUSH
3587: LD_INT 30
3589: PUSH
3590: LD_INT 2
3592: PUSH
3593: EMPTY
3594: LIST
3595: LIST
3596: PUSH
3597: LD_INT 30
3599: PUSH
3600: LD_INT 3
3602: PUSH
3603: EMPTY
3604: LIST
3605: LIST
3606: PUSH
3607: EMPTY
3608: LIST
3609: LIST
3610: LIST
3611: PUSH
3612: EMPTY
3613: LIST
3614: LIST
3615: PPUSH
3616: CALL_OW 69
3620: AND
3621: PUSH
3622: LD_EXP 6
3626: AND
3627: IFFALSE 4142
3629: GO 3631
3631: DISABLE
// begin Wait ( rand ( 0 0$30 , 0 0$50 ) ) ;
3632: LD_INT 1050
3634: PPUSH
3635: LD_INT 1750
3637: PPUSH
3638: CALL_OW 12
3642: PPUSH
3643: CALL_OW 67
// PlaceUnitArea ( Denis , [ denisArea1 , denisArea2 , denisArea3 , denisArea4 ] [ Difficulty ] , false ) ;
3647: LD_EXP 20
3651: PPUSH
3652: LD_INT 6
3654: PUSH
3655: LD_INT 9
3657: PUSH
3658: LD_INT 10
3660: PUSH
3661: LD_INT 16
3663: PUSH
3664: EMPTY
3665: LIST
3666: LIST
3667: LIST
3668: LIST
3669: PUSH
3670: LD_OWVAR 67
3674: ARRAY
3675: PPUSH
3676: LD_INT 0
3678: PPUSH
3679: CALL_OW 49
// ComHold ( Denis ) ;
3683: LD_EXP 20
3687: PPUSH
3688: CALL_OW 140
// InGameOn ;
3692: CALL_OW 8
// DialogueOn ;
3696: CALL_OW 6
// if Delta then
3700: LD_EXP 6
3704: IFFALSE 3717
// CenterNowOnUnits ( Delta ) else
3706: LD_EXP 6
3710: PPUSH
3711: CALL_OW 87
3715: GO 3726
// CenterNowOnUnits ( JMM ) ;
3717: LD_EXP 17
3721: PPUSH
3722: CALL_OW 87
// SayRadioNoFaceNoName ( Denis , DD-Den-1 ) ;
3726: LD_EXP 20
3730: PPUSH
3731: LD_STRING DD-Den-1
3733: PPUSH
3734: CALL 71193 0 2
// Say ( JMM , DD-JMM-1 ) ;
3738: LD_EXP 17
3742: PPUSH
3743: LD_STRING DD-JMM-1
3745: PPUSH
3746: CALL_OW 88
// SayRadioNoFaceNoName ( Denis , DD-Den-2 ) ;
3750: LD_EXP 20
3754: PPUSH
3755: LD_STRING DD-Den-2
3757: PPUSH
3758: CALL 71193 0 2
// Wait ( 3 ) ;
3762: LD_INT 3
3764: PPUSH
3765: CALL_OW 67
// DialogueOff ;
3769: CALL_OW 7
// InGameOff ;
3773: CALL_OW 9
// if Difficulty = 1 then
3777: LD_OWVAR 67
3781: PUSH
3782: LD_INT 1
3784: EQUAL
3785: IFFALSE 3861
// begin PlaceSeeing ( GetX ( Denis ) , GetY ( Denis ) , 1 , - 12 ) ;
3787: LD_EXP 20
3791: PPUSH
3792: CALL_OW 250
3796: PPUSH
3797: LD_EXP 20
3801: PPUSH
3802: CALL_OW 251
3806: PPUSH
3807: LD_INT 1
3809: PPUSH
3810: LD_INT 12
3812: NEG
3813: PPUSH
3814: CALL_OW 330
// CenterNowOnUnits ( Denis ) ;
3818: LD_EXP 20
3822: PPUSH
3823: CALL_OW 87
// wait ( 0 0$5 ) ;
3827: LD_INT 175
3829: PPUSH
3830: CALL_OW 67
// RemoveSeeing ( GetX ( Denis ) , GetY ( Denis ) , 1 ) ;
3834: LD_EXP 20
3838: PPUSH
3839: CALL_OW 250
3843: PPUSH
3844: LD_EXP 20
3848: PPUSH
3849: CALL_OW 251
3853: PPUSH
3854: LD_INT 1
3856: PPUSH
3857: CALL_OW 331
// end ; repeat wait ( 0 0$01 ) ;
3861: LD_INT 35
3863: PPUSH
3864: CALL_OW 67
// until See ( 1 , Denis ) or IsDead ( Denis ) ;
3868: LD_INT 1
3870: PPUSH
3871: LD_EXP 20
3875: PPUSH
3876: CALL_OW 292
3880: PUSH
3881: LD_EXP 20
3885: PPUSH
3886: CALL_OW 301
3890: OR
3891: IFFALSE 3861
// if IsDead ( Denis ) then
3893: LD_EXP 20
3897: PPUSH
3898: CALL_OW 301
3902: IFFALSE 3906
// exit ;
3904: GO 4142
// SetSide ( Denis , 1 ) ;
3906: LD_EXP 20
3910: PPUSH
3911: LD_INT 1
3913: PPUSH
3914: CALL_OW 235
// Say ( Denis , DD-Den-2a ) ;
3918: LD_EXP 20
3922: PPUSH
3923: LD_STRING DD-Den-2a
3925: PPUSH
3926: CALL_OW 88
// repeat wait ( 0 0$01 ) ;
3930: LD_INT 35
3932: PPUSH
3933: CALL_OW 67
// until GetBType ( IsInUnit ( Denis ) ) in [ b_lab , b_lab_half , b_lab_full ] or IsDead ( Denis ) ;
3937: LD_EXP 20
3941: PPUSH
3942: CALL_OW 310
3946: PPUSH
3947: CALL_OW 266
3951: PUSH
3952: LD_INT 6
3954: PUSH
3955: LD_INT 7
3957: PUSH
3958: LD_INT 8
3960: PUSH
3961: EMPTY
3962: LIST
3963: LIST
3964: LIST
3965: IN
3966: PUSH
3967: LD_EXP 20
3971: PPUSH
3972: CALL_OW 301
3976: OR
3977: IFFALSE 3930
// if IsDead ( Denis ) then
3979: LD_EXP 20
3983: PPUSH
3984: CALL_OW 301
3988: IFFALSE 3992
// exit ;
3990: GO 4142
// Say ( Denis , DD-Den-2b ) ;
3992: LD_EXP 20
3996: PPUSH
3997: LD_STRING DD-Den-2b
3999: PPUSH
4000: CALL_OW 88
// ComChangeProfession ( Denis , 4 ) ;
4004: LD_EXP 20
4008: PPUSH
4009: LD_INT 4
4011: PPUSH
4012: CALL_OW 123
// Wait ( 0 0$02 ) ;
4016: LD_INT 70
4018: PPUSH
4019: CALL_OW 67
// DialogueOn ;
4023: CALL_OW 6
// CenterNowOnUnits ( Denis ) ;
4027: LD_EXP 20
4031: PPUSH
4032: CALL_OW 87
// Say ( JMM , D4-JMM-1 ) ;
4036: LD_EXP 17
4040: PPUSH
4041: LD_STRING D4-JMM-1
4043: PPUSH
4044: CALL_OW 88
// Say ( Denis , D4-Den-1 ) ;
4048: LD_EXP 20
4052: PPUSH
4053: LD_STRING D4-Den-1
4055: PPUSH
4056: CALL_OW 88
// Say ( JMM , D4-JMM-2 ) ;
4060: LD_EXP 17
4064: PPUSH
4065: LD_STRING D4-JMM-2
4067: PPUSH
4068: CALL_OW 88
// Say ( Denis , D4-Den-2 ) ;
4072: LD_EXP 20
4076: PPUSH
4077: LD_STRING D4-Den-2
4079: PPUSH
4080: CALL_OW 88
// DialogueOff ;
4084: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
4088: LD_STRING M2
4090: PPUSH
4091: CALL_OW 337
// radar_allowed := true ;
4095: LD_ADDR_EXP 7
4099: PUSH
4100: LD_INT 1
4102: ST_TO_ADDR
// SetTech ( tech_radar , 1 , state_enabled ) ;
4103: LD_INT 6
4105: PPUSH
4106: LD_INT 1
4108: PPUSH
4109: LD_INT 1
4111: PPUSH
4112: CALL_OW 322
// SetRestrict ( b_lab_opto , 1 , state_enabled ) ;
4116: LD_INT 15
4118: PPUSH
4119: LD_INT 1
4121: PPUSH
4122: LD_INT 1
4124: PPUSH
4125: CALL_OW 324
// SetRestrict ( b_ext_radar , 1 , state_enabled ) ;
4129: LD_INT 20
4131: PPUSH
4132: LD_INT 1
4134: PPUSH
4135: LD_INT 1
4137: PPUSH
4138: CALL_OW 324
// end ;
4142: END
// every 0 0$1 trigger arab_spotted do var sol , sol2 ;
4143: LD_EXP 13
4147: IFFALSE 4770
4149: GO 4151
4151: DISABLE
4152: LD_INT 0
4154: PPUSH
4155: PPUSH
// begin sol := SayX ( UnitFilter ( others , [ f_sex , sex_male ] ) , D5-Sol1-1 ) ;
4156: LD_ADDR_VAR 0 1
4160: PUSH
4161: LD_EXP 28
4165: PPUSH
4166: LD_INT 26
4168: PUSH
4169: LD_INT 1
4171: PUSH
4172: EMPTY
4173: LIST
4174: LIST
4175: PPUSH
4176: CALL_OW 72
4180: PPUSH
4181: LD_STRING D5-Sol1-1
4183: PPUSH
4184: CALL 718 0 2
4188: ST_TO_ADDR
// if not sol then
4189: LD_VAR 0 1
4193: NOT
4194: IFFALSE 4198
// exit ;
4196: GO 4770
// repeat wait ( 0 0$01 ) ;
4198: LD_INT 35
4200: PPUSH
4201: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) = 0 ;
4205: LD_INT 22
4207: PUSH
4208: LD_INT 2
4210: PUSH
4211: EMPTY
4212: LIST
4213: LIST
4214: PUSH
4215: LD_INT 21
4217: PUSH
4218: LD_INT 1
4220: PUSH
4221: EMPTY
4222: LIST
4223: LIST
4224: PUSH
4225: EMPTY
4226: LIST
4227: LIST
4228: PPUSH
4229: CALL_OW 69
4233: PUSH
4234: LD_INT 0
4236: EQUAL
4237: IFFALSE 4198
// if IsOk ( sol ) then
4239: LD_VAR 0 1
4243: PPUSH
4244: CALL_OW 302
4248: IFFALSE 4268
// begin sol2 := others diff sol ;
4250: LD_ADDR_VAR 0 2
4254: PUSH
4255: LD_EXP 28
4259: PUSH
4260: LD_VAR 0 1
4264: DIFF
4265: ST_TO_ADDR
// end else
4266: GO 4270
// exit ;
4268: GO 4770
// if not Lisa and not sol2 then
4270: LD_EXP 23
4274: NOT
4275: PUSH
4276: LD_VAR 0 2
4280: NOT
4281: AND
4282: IFFALSE 4286
// exit ;
4284: GO 4770
// DialogueOn ;
4286: CALL_OW 6
// if Lisa then
4290: LD_EXP 23
4294: IFFALSE 4310
// Say ( Lisa , D5a-Lisa-1 ) else
4296: LD_EXP 23
4300: PPUSH
4301: LD_STRING D5a-Lisa-1
4303: PPUSH
4304: CALL_OW 88
4308: GO 4385
// if sol2 then
4310: LD_VAR 0 2
4314: IFFALSE 4385
// case GetSex ( sol2 [ 1 ] ) of sex_male :
4316: LD_VAR 0 2
4320: PUSH
4321: LD_INT 1
4323: ARRAY
4324: PPUSH
4325: CALL_OW 258
4329: PUSH
4330: LD_INT 1
4332: DOUBLE
4333: EQUAL
4334: IFTRUE 4338
4336: GO 4357
4338: POP
// Say ( sol2 [ 1 ] , D5-Sol2-1 ) ; sex_female :
4339: LD_VAR 0 2
4343: PUSH
4344: LD_INT 1
4346: ARRAY
4347: PPUSH
4348: LD_STRING D5-Sol2-1
4350: PPUSH
4351: CALL_OW 88
4355: GO 4385
4357: LD_INT 2
4359: DOUBLE
4360: EQUAL
4361: IFTRUE 4365
4363: GO 4384
4365: POP
// Say ( sol2 [ 1 ] , D5-FSol2-1 ) ; end ;
4366: LD_VAR 0 2
4370: PUSH
4371: LD_INT 1
4373: ARRAY
4374: PPUSH
4375: LD_STRING D5-FSol2-1
4377: PPUSH
4378: CALL_OW 88
4382: GO 4385
4384: POP
// Say ( sol , D5-Sol1-2 ) ;
4385: LD_VAR 0 1
4389: PPUSH
4390: LD_STRING D5-Sol1-2
4392: PPUSH
4393: CALL_OW 88
// if Lisa then
4397: LD_EXP 23
4401: IFFALSE 4417
// Say ( Lisa , D5a-Lisa-2 ) else
4403: LD_EXP 23
4407: PPUSH
4408: LD_STRING D5a-Lisa-2
4410: PPUSH
4411: CALL_OW 88
4415: GO 4492
// if sol2 then
4417: LD_VAR 0 2
4421: IFFALSE 4492
// case GetSex ( sol2 [ 1 ] ) of sex_male :
4423: LD_VAR 0 2
4427: PUSH
4428: LD_INT 1
4430: ARRAY
4431: PPUSH
4432: CALL_OW 258
4436: PUSH
4437: LD_INT 1
4439: DOUBLE
4440: EQUAL
4441: IFTRUE 4445
4443: GO 4464
4445: POP
// Say ( sol2 [ 1 ] , D5-Sol2-2 ) ; sex_female :
4446: LD_VAR 0 2
4450: PUSH
4451: LD_INT 1
4453: ARRAY
4454: PPUSH
4455: LD_STRING D5-Sol2-2
4457: PPUSH
4458: CALL_OW 88
4462: GO 4492
4464: LD_INT 2
4466: DOUBLE
4467: EQUAL
4468: IFTRUE 4472
4470: GO 4491
4472: POP
// Say ( sol2 [ 1 ] , D5-FSol2-2 ) ; end ;
4473: LD_VAR 0 2
4477: PUSH
4478: LD_INT 1
4480: ARRAY
4481: PPUSH
4482: LD_STRING D5-FSol2-2
4484: PPUSH
4485: CALL_OW 88
4489: GO 4492
4491: POP
// Say ( sol , D5a-Sol1-3 ) ;
4492: LD_VAR 0 1
4496: PPUSH
4497: LD_STRING D5a-Sol1-3
4499: PPUSH
4500: CALL_OW 88
// if Lisa then
4504: LD_EXP 23
4508: IFFALSE 4522
// Say ( Lisa , D5a-Lisa-3 ) ;
4510: LD_EXP 23
4514: PPUSH
4515: LD_STRING D5a-Lisa-3
4517: PPUSH
4518: CALL_OW 88
// if not sol2 then
4522: LD_VAR 0 2
4526: NOT
4527: IFFALSE 4535
// begin DialogueOff ;
4529: CALL_OW 7
// exit ;
4533: GO 4770
// end ; case GetSex ( sol2 [ 1 ] ) of sex_male :
4535: LD_VAR 0 2
4539: PUSH
4540: LD_INT 1
4542: ARRAY
4543: PPUSH
4544: CALL_OW 258
4548: PUSH
4549: LD_INT 1
4551: DOUBLE
4552: EQUAL
4553: IFTRUE 4557
4555: GO 4576
4557: POP
// Say ( sol2 [ 1 ] , D5-Sol2-3 ) ; sex_female :
4558: LD_VAR 0 2
4562: PUSH
4563: LD_INT 1
4565: ARRAY
4566: PPUSH
4567: LD_STRING D5-Sol2-3
4569: PPUSH
4570: CALL_OW 88
4574: GO 4604
4576: LD_INT 2
4578: DOUBLE
4579: EQUAL
4580: IFTRUE 4584
4582: GO 4603
4584: POP
// Say ( sol2 [ 1 ] , D5-FSol2-3 ) ; end ;
4585: LD_VAR 0 2
4589: PUSH
4590: LD_INT 1
4592: ARRAY
4593: PPUSH
4594: LD_STRING D5-FSol2-3
4596: PPUSH
4597: CALL_OW 88
4601: GO 4604
4603: POP
// Say ( sol , D5-Sol1-4 ) ;
4604: LD_VAR 0 1
4608: PPUSH
4609: LD_STRING D5-Sol1-4
4611: PPUSH
4612: CALL_OW 88
// case GetSex ( sol2 [ 1 ] ) of sex_male :
4616: LD_VAR 0 2
4620: PUSH
4621: LD_INT 1
4623: ARRAY
4624: PPUSH
4625: CALL_OW 258
4629: PUSH
4630: LD_INT 1
4632: DOUBLE
4633: EQUAL
4634: IFTRUE 4638
4636: GO 4657
4638: POP
// Say ( sol2 [ 1 ] , D5-Sol2-4 ) ; sex_female :
4639: LD_VAR 0 2
4643: PUSH
4644: LD_INT 1
4646: ARRAY
4647: PPUSH
4648: LD_STRING D5-Sol2-4
4650: PPUSH
4651: CALL_OW 88
4655: GO 4685
4657: LD_INT 2
4659: DOUBLE
4660: EQUAL
4661: IFTRUE 4665
4663: GO 4684
4665: POP
// Say ( sol2 [ 1 ] , D5-FSol2-4 ) ; end ;
4666: LD_VAR 0 2
4670: PUSH
4671: LD_INT 1
4673: ARRAY
4674: PPUSH
4675: LD_STRING D5-FSol2-4
4677: PPUSH
4678: CALL_OW 88
4682: GO 4685
4684: POP
// Say ( sol , D5-Sol1-5 ) ;
4685: LD_VAR 0 1
4689: PPUSH
4690: LD_STRING D5-Sol1-5
4692: PPUSH
4693: CALL_OW 88
// case GetSex ( sol2 [ 1 ] ) of sex_male :
4697: LD_VAR 0 2
4701: PUSH
4702: LD_INT 1
4704: ARRAY
4705: PPUSH
4706: CALL_OW 258
4710: PUSH
4711: LD_INT 1
4713: DOUBLE
4714: EQUAL
4715: IFTRUE 4719
4717: GO 4738
4719: POP
// Say ( sol2 [ 1 ] , D5-Sol2-5 ) ; sex_female :
4720: LD_VAR 0 2
4724: PUSH
4725: LD_INT 1
4727: ARRAY
4728: PPUSH
4729: LD_STRING D5-Sol2-5
4731: PPUSH
4732: CALL_OW 88
4736: GO 4766
4738: LD_INT 2
4740: DOUBLE
4741: EQUAL
4742: IFTRUE 4746
4744: GO 4765
4746: POP
// Say ( sol2 [ 1 ] , D5-FSol2-5 ) ; end ;
4747: LD_VAR 0 2
4751: PUSH
4752: LD_INT 1
4754: ARRAY
4755: PPUSH
4756: LD_STRING D5-FSol2-5
4758: PPUSH
4759: CALL_OW 88
4763: GO 4766
4765: POP
// DialogueOff ;
4766: CALL_OW 7
// end ;
4770: PPOPN 2
4772: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_apeman_engineer ] ] ) >= 5 do
4773: LD_INT 22
4775: PUSH
4776: LD_INT 1
4778: PUSH
4779: EMPTY
4780: LIST
4781: LIST
4782: PUSH
4783: LD_INT 25
4785: PUSH
4786: LD_INT 16
4788: PUSH
4789: EMPTY
4790: LIST
4791: LIST
4792: PUSH
4793: EMPTY
4794: LIST
4795: LIST
4796: PPUSH
4797: CALL_OW 69
4801: PUSH
4802: LD_INT 5
4804: GREATEREQUAL
4805: IFFALSE 4825
4807: GO 4809
4809: DISABLE
// begin ChangeMissionObjectives ( M1b ) ;
4810: LD_STRING M1b
4812: PPUSH
4813: CALL_OW 337
// apeman_army := true ;
4817: LD_ADDR_EXP 9
4821: PUSH
4822: LD_INT 1
4824: ST_TO_ADDR
// end ;
4825: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] , [ f_constructed ] ] ) do
4826: LD_INT 22
4828: PUSH
4829: LD_INT 1
4831: PUSH
4832: EMPTY
4833: LIST
4834: LIST
4835: PUSH
4836: LD_INT 30
4838: PUSH
4839: LD_INT 3
4841: PUSH
4842: EMPTY
4843: LIST
4844: LIST
4845: PUSH
4846: LD_INT 57
4848: PUSH
4849: EMPTY
4850: LIST
4851: PUSH
4852: EMPTY
4853: LIST
4854: LIST
4855: LIST
4856: PPUSH
4857: CALL_OW 69
4861: IFFALSE 4873
4863: GO 4865
4865: DISABLE
// ChangeMissionObjectives ( M1c ) ;
4866: LD_STRING M1c
4868: PPUSH
4869: CALL_OW 337
4873: END
// every 0 0$1 trigger GetTech ( tech_radar , 1 ) = state_researched do
4874: LD_INT 6
4876: PPUSH
4877: LD_INT 1
4879: PPUSH
4880: CALL_OW 321
4884: PUSH
4885: LD_INT 2
4887: EQUAL
4888: IFFALSE 4908
4890: GO 4892
4892: DISABLE
// begin ChangeMissionObjectives ( M2a ) ;
4893: LD_STRING M2a
4895: PPUSH
4896: CALL_OW 337
// radar_researched := true ;
4900: LD_ADDR_EXP 10
4904: PUSH
4905: LD_INT 1
4907: ST_TO_ADDR
// end ;
4908: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_weapon , us_radar ] , [ f_bweapon , us_radar ] ] ] ) do
4909: LD_INT 22
4911: PUSH
4912: LD_INT 1
4914: PUSH
4915: EMPTY
4916: LIST
4917: LIST
4918: PUSH
4919: LD_INT 2
4921: PUSH
4922: LD_INT 34
4924: PUSH
4925: LD_INT 11
4927: PUSH
4928: EMPTY
4929: LIST
4930: LIST
4931: PUSH
4932: LD_INT 35
4934: PUSH
4935: LD_INT 11
4937: PUSH
4938: EMPTY
4939: LIST
4940: LIST
4941: PUSH
4942: EMPTY
4943: LIST
4944: LIST
4945: LIST
4946: PUSH
4947: EMPTY
4948: LIST
4949: LIST
4950: PPUSH
4951: CALL_OW 69
4955: IFFALSE 4975
4957: GO 4959
4959: DISABLE
// begin ChangeMissionObjectives ( M2b ) ;
4960: LD_STRING M2b
4962: PPUSH
4963: CALL_OW 337
// radar_builded := true ;
4967: LD_ADDR_EXP 11
4971: PUSH
4972: LD_INT 1
4974: ST_TO_ADDR
// end ;
4975: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) = 0 and not first_apeman_tamed do
4976: LD_INT 22
4978: PUSH
4979: LD_INT 0
4981: PUSH
4982: EMPTY
4983: LIST
4984: LIST
4985: PUSH
4986: LD_INT 25
4988: PUSH
4989: LD_INT 12
4991: PUSH
4992: EMPTY
4993: LIST
4994: LIST
4995: PUSH
4996: EMPTY
4997: LIST
4998: LIST
4999: PPUSH
5000: CALL_OW 69
5004: PUSH
5005: LD_INT 0
5007: EQUAL
5008: PUSH
5009: LD_EXP 8
5013: NOT
5014: AND
5015: IFFALSE 5027
5017: GO 5019
5019: DISABLE
// YouLost ( Apeman ) ;
5020: LD_STRING Apeman
5022: PPUSH
5023: CALL_OW 104
5027: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_apeman_engineer ] ] ) >= 7 do var i , filter ;
5028: LD_INT 22
5030: PUSH
5031: LD_INT 1
5033: PUSH
5034: EMPTY
5035: LIST
5036: LIST
5037: PUSH
5038: LD_INT 25
5040: PUSH
5041: LD_INT 16
5043: PUSH
5044: EMPTY
5045: LIST
5046: LIST
5047: PUSH
5048: EMPTY
5049: LIST
5050: LIST
5051: PPUSH
5052: CALL_OW 69
5056: PUSH
5057: LD_INT 7
5059: GREATEREQUAL
5060: IFFALSE 5158
5062: GO 5064
5064: DISABLE
5065: LD_INT 0
5067: PPUSH
5068: PPUSH
// begin filter := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 4 ] ] ) ^ JMM ;
5069: LD_ADDR_VAR 0 2
5073: PUSH
5074: LD_INT 22
5076: PUSH
5077: LD_INT 1
5079: PUSH
5080: EMPTY
5081: LIST
5082: LIST
5083: PUSH
5084: LD_INT 21
5086: PUSH
5087: LD_INT 1
5089: PUSH
5090: EMPTY
5091: LIST
5092: LIST
5093: PUSH
5094: LD_INT 25
5096: PUSH
5097: LD_INT 4
5099: PUSH
5100: EMPTY
5101: LIST
5102: LIST
5103: PUSH
5104: EMPTY
5105: LIST
5106: LIST
5107: LIST
5108: PPUSH
5109: CALL_OW 69
5113: PUSH
5114: LD_EXP 17
5118: ADD
5119: ST_TO_ADDR
// if filter then
5120: LD_VAR 0 2
5124: IFFALSE 5158
// for i in filter do
5126: LD_ADDR_VAR 0 1
5130: PUSH
5131: LD_VAR 0 2
5135: PUSH
5136: FOR_IN
5137: IFFALSE 5156
// AddExperience ( i , 4 , 3500 ) ;
5139: LD_VAR 0 1
5143: PPUSH
5144: LD_INT 4
5146: PPUSH
5147: LD_INT 3500
5149: PPUSH
5150: CALL_OW 492
5154: GO 5136
5156: POP
5157: POP
// end ;
5158: PPOPN 2
5160: END
// every 0 0$1 trigger end_mission do var i , tmp , m1 , m2 , m3 ;
5161: LD_EXP 14
5165: IFFALSE 6348
5167: GO 5169
5169: DISABLE
5170: LD_INT 0
5172: PPUSH
5173: PPUSH
5174: PPUSH
5175: PPUSH
5176: PPUSH
// begin if apeKillCounter = 0 then
5177: LD_EXP 15
5181: PUSH
5182: LD_INT 0
5184: EQUAL
5185: IFFALSE 5194
// SetAchievement ( ACH_APEKILLER ) ;
5187: LD_STRING ACH_APEKILLER
5189: PPUSH
5190: CALL_OW 543
// if FilterAllUnits ( [ f_side , 2 ] ) then
5194: LD_INT 22
5196: PUSH
5197: LD_INT 2
5199: PUSH
5200: EMPTY
5201: LIST
5202: LIST
5203: PPUSH
5204: CALL_OW 69
5208: IFFALSE 5246
// for i in FilterAllUnits ( [ f_side , 2 ] ) do
5210: LD_ADDR_VAR 0 1
5214: PUSH
5215: LD_INT 22
5217: PUSH
5218: LD_INT 2
5220: PUSH
5221: EMPTY
5222: LIST
5223: LIST
5224: PPUSH
5225: CALL_OW 69
5229: PUSH
5230: FOR_IN
5231: IFFALSE 5244
// RemoveUnit ( i ) ;
5233: LD_VAR 0 1
5237: PPUSH
5238: CALL_OW 64
5242: GO 5230
5244: POP
5245: POP
// m1 := false ;
5246: LD_ADDR_VAR 0 3
5250: PUSH
5251: LD_INT 0
5253: ST_TO_ADDR
// m2 := false ;
5254: LD_ADDR_VAR 0 4
5258: PUSH
5259: LD_INT 0
5261: ST_TO_ADDR
// m3 := false ;
5262: LD_ADDR_VAR 0 5
5266: PUSH
5267: LD_INT 0
5269: ST_TO_ADDR
// if apeman_army then
5270: LD_EXP 9
5274: IFFALSE 5296
// begin AddMedal ( Tame , 1 ) ;
5276: LD_STRING Tame
5278: PPUSH
5279: LD_INT 1
5281: PPUSH
5282: CALL_OW 101
// m1 := true ;
5286: LD_ADDR_VAR 0 3
5290: PUSH
5291: LD_INT 1
5293: ST_TO_ADDR
// end else
5294: GO 5307
// AddMedal ( Tame , - 1 ) ;
5296: LD_STRING Tame
5298: PPUSH
5299: LD_INT 1
5301: NEG
5302: PPUSH
5303: CALL_OW 101
// if radar_researched then
5307: LD_EXP 10
5311: IFFALSE 5343
// begin SaveVariable ( true , radarResInDelta ) ;
5313: LD_INT 1
5315: PPUSH
5316: LD_STRING radarResInDelta
5318: PPUSH
5319: CALL_OW 39
// AddMedal ( Radar , 1 ) ;
5323: LD_STRING Radar
5325: PPUSH
5326: LD_INT 1
5328: PPUSH
5329: CALL_OW 101
// m2 := true ;
5333: LD_ADDR_VAR 0 4
5337: PUSH
5338: LD_INT 1
5340: ST_TO_ADDR
// end else
5341: GO 5373
// if radar_allowed then
5343: LD_EXP 7
5347: IFFALSE 5362
// AddMedal ( Radar , - 2 ) else
5349: LD_STRING Radar
5351: PPUSH
5352: LD_INT 2
5354: NEG
5355: PPUSH
5356: CALL_OW 101
5360: GO 5373
// AddMedal ( Radar , - 1 ) ;
5362: LD_STRING Radar
5364: PPUSH
5365: LD_INT 1
5367: NEG
5368: PPUSH
5369: CALL_OW 101
// if radar_builded then
5373: LD_EXP 11
5377: IFFALSE 5399
// begin AddMedal ( BuildRadar , 1 ) ;
5379: LD_STRING BuildRadar
5381: PPUSH
5382: LD_INT 1
5384: PPUSH
5385: CALL_OW 101
// m3 := true ;
5389: LD_ADDR_VAR 0 5
5393: PUSH
5394: LD_INT 1
5396: ST_TO_ADDR
// end else
5397: GO 5410
// AddMedal ( BuildRadar , - 1 ) ;
5399: LD_STRING BuildRadar
5401: PPUSH
5402: LD_INT 1
5404: NEG
5405: PPUSH
5406: CALL_OW 101
// if tick <= 7 7$00 then
5410: LD_OWVAR 1
5414: PUSH
5415: LD_INT 14700
5417: LESSEQUAL
5418: IFFALSE 5427
// SetAchievement ( ACH_ASPEED_5 ) ;
5420: LD_STRING ACH_ASPEED_5
5422: PPUSH
5423: CALL_OW 543
// if m1 and m2 and m3 and Difficulty >= 3 then
5427: LD_VAR 0 3
5431: PUSH
5432: LD_VAR 0 4
5436: AND
5437: PUSH
5438: LD_VAR 0 5
5442: AND
5443: PUSH
5444: LD_OWVAR 67
5448: PUSH
5449: LD_INT 3
5451: GREATEREQUAL
5452: AND
5453: IFFALSE 5465
// SetAchievementEX ( ACH_AMER , 5 ) ;
5455: LD_STRING ACH_AMER
5457: PPUSH
5458: LD_INT 5
5460: PPUSH
5461: CALL_OW 564
// GiveMedals ( MAIN ) ;
5465: LD_STRING MAIN
5467: PPUSH
5468: CALL_OW 102
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ;
5472: LD_ADDR_VAR 0 2
5476: PUSH
5477: LD_INT 22
5479: PUSH
5480: LD_INT 1
5482: PUSH
5483: EMPTY
5484: LIST
5485: LIST
5486: PUSH
5487: LD_INT 21
5489: PUSH
5490: LD_INT 1
5492: PUSH
5493: EMPTY
5494: LIST
5495: LIST
5496: PUSH
5497: LD_INT 2
5499: PUSH
5500: LD_INT 25
5502: PUSH
5503: LD_INT 1
5505: PUSH
5506: EMPTY
5507: LIST
5508: LIST
5509: PUSH
5510: LD_INT 25
5512: PUSH
5513: LD_INT 2
5515: PUSH
5516: EMPTY
5517: LIST
5518: LIST
5519: PUSH
5520: LD_INT 25
5522: PUSH
5523: LD_INT 3
5525: PUSH
5526: EMPTY
5527: LIST
5528: LIST
5529: PUSH
5530: LD_INT 25
5532: PUSH
5533: LD_INT 4
5535: PUSH
5536: EMPTY
5537: LIST
5538: LIST
5539: PUSH
5540: EMPTY
5541: LIST
5542: LIST
5543: LIST
5544: LIST
5545: LIST
5546: PUSH
5547: EMPTY
5548: LIST
5549: LIST
5550: LIST
5551: PPUSH
5552: CALL_OW 69
5556: ST_TO_ADDR
// RewardPeople ( tmp ) ;
5557: LD_VAR 0 2
5561: PPUSH
5562: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
5566: LD_EXP 17
5570: PPUSH
5571: LD_EXP 2
5575: PUSH
5576: LD_STRING JMM
5578: STR
5579: PPUSH
5580: CALL_OW 38
// if IsOk ( Gladstone ) then
5584: LD_EXP 18
5588: PPUSH
5589: CALL_OW 302
5593: IFFALSE 5620
// begin ToLua ( enableBioCharacter(BIO_TIM) ) ;
5595: LD_STRING enableBioCharacter(BIO_TIM)
5597: PPUSH
5598: CALL_OW 559
// SaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
5602: LD_EXP 18
5606: PPUSH
5607: LD_EXP 2
5611: PUSH
5612: LD_STRING Gladstone
5614: STR
5615: PPUSH
5616: CALL_OW 38
// end ; if IsOk ( Denis ) and GetSide ( Denis ) = 1 then
5620: LD_EXP 20
5624: PPUSH
5625: CALL_OW 302
5629: PUSH
5630: LD_EXP 20
5634: PPUSH
5635: CALL_OW 255
5639: PUSH
5640: LD_INT 1
5642: EQUAL
5643: AND
5644: IFFALSE 5681
// begin ToLua ( enableBioCharacter(BIO_DENIS) ) ;
5646: LD_STRING enableBioCharacter(BIO_DENIS)
5648: PPUSH
5649: CALL_OW 559
// SaveCharacters ( Denis , mission_prefix & Denis ) ;
5653: LD_EXP 20
5657: PPUSH
5658: LD_EXP 2
5662: PUSH
5663: LD_STRING Denis
5665: STR
5666: PPUSH
5667: CALL_OW 38
// SaveVariable ( true , DenisInDelta ) ;
5671: LD_INT 1
5673: PPUSH
5674: LD_STRING DenisInDelta
5676: PPUSH
5677: CALL_OW 39
// end ; if IsOk ( Lisa ) then
5681: LD_EXP 23
5685: PPUSH
5686: CALL_OW 302
5690: IFFALSE 5710
// begin SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
5692: LD_EXP 23
5696: PPUSH
5697: LD_EXP 2
5701: PUSH
5702: LD_STRING Lisa
5704: STR
5705: PPUSH
5706: CALL_OW 38
// end ; if IsOk ( Frank ) then
5710: LD_EXP 24
5714: PPUSH
5715: CALL_OW 302
5719: IFFALSE 5739
// begin SaveCharacters ( Frank , mission_prefix & Frank ) ;
5721: LD_EXP 24
5725: PPUSH
5726: LD_EXP 2
5730: PUSH
5731: LD_STRING Frank
5733: STR
5734: PPUSH
5735: CALL_OW 38
// end ; if IsOk ( Bobby ) then
5739: LD_EXP 25
5743: PPUSH
5744: CALL_OW 302
5748: IFFALSE 5768
// begin SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
5750: LD_EXP 25
5754: PPUSH
5755: LD_EXP 2
5759: PUSH
5760: LD_STRING Bobby
5762: STR
5763: PPUSH
5764: CALL_OW 38
// end ; if IsOk ( Cyrus ) then
5768: LD_EXP 26
5772: PPUSH
5773: CALL_OW 302
5777: IFFALSE 5797
// begin SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
5779: LD_EXP 26
5783: PPUSH
5784: LD_EXP 2
5788: PUSH
5789: LD_STRING Cyrus
5791: STR
5792: PPUSH
5793: CALL_OW 38
// end ; if IsOk ( Brown ) then
5797: LD_EXP 21
5801: PPUSH
5802: CALL_OW 302
5806: IFFALSE 5826
// begin SaveCharacters ( Brown , mission_prefix & Brown ) ;
5808: LD_EXP 21
5812: PPUSH
5813: LD_EXP 2
5817: PUSH
5818: LD_STRING Brown
5820: STR
5821: PPUSH
5822: CALL_OW 38
// end ; if IsOk ( Donaldson ) then
5826: LD_EXP 22
5830: PPUSH
5831: CALL_OW 302
5835: IFFALSE 5855
// begin SaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
5837: LD_EXP 22
5841: PPUSH
5842: LD_EXP 2
5846: PUSH
5847: LD_STRING Donaldson
5849: STR
5850: PPUSH
5851: CALL_OW 38
// end ; if IsOk ( Mike ) then
5855: LD_EXP 27
5859: PPUSH
5860: CALL_OW 302
5864: IFFALSE 5884
// SaveCharacters ( Mike , mission_prefix & Mike ) ;
5866: LD_EXP 27
5870: PPUSH
5871: LD_EXP 2
5875: PUSH
5876: LD_STRING Mike
5878: STR
5879: PPUSH
5880: CALL_OW 38
// if others then
5884: LD_EXP 28
5888: IFFALSE 5902
// SaveCharacters ( others , othersInDelta ) ;
5890: LD_EXP 28
5894: PPUSH
5895: LD_STRING othersInDelta
5897: PPUSH
5898: CALL_OW 38
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_apeman_engineer ] ] ) then
5902: LD_INT 22
5904: PUSH
5905: LD_INT 1
5907: PUSH
5908: EMPTY
5909: LIST
5910: LIST
5911: PUSH
5912: LD_INT 25
5914: PUSH
5915: LD_INT 16
5917: PUSH
5918: EMPTY
5919: LIST
5920: LIST
5921: PUSH
5922: EMPTY
5923: LIST
5924: LIST
5925: PPUSH
5926: CALL_OW 69
5930: IFFALSE 5974
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_apeman_engineer ] ] ) diff Mike , apeInDelta ) ;
5932: LD_INT 22
5934: PUSH
5935: LD_INT 1
5937: PUSH
5938: EMPTY
5939: LIST
5940: LIST
5941: PUSH
5942: LD_INT 25
5944: PUSH
5945: LD_INT 16
5947: PUSH
5948: EMPTY
5949: LIST
5950: LIST
5951: PUSH
5952: EMPTY
5953: LIST
5954: LIST
5955: PPUSH
5956: CALL_OW 69
5960: PUSH
5961: LD_EXP 27
5965: DIFF
5966: PPUSH
5967: LD_STRING apeInDelta
5969: PPUSH
5970: CALL_OW 38
// tmp := [ ] ;
5974: LD_ADDR_VAR 0 2
5978: PUSH
5979: EMPTY
5980: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) then
5981: LD_INT 22
5983: PUSH
5984: LD_INT 1
5986: PUSH
5987: EMPTY
5988: LIST
5989: LIST
5990: PUSH
5991: LD_INT 21
5993: PUSH
5994: LD_INT 2
5996: PUSH
5997: EMPTY
5998: LIST
5999: LIST
6000: PUSH
6001: EMPTY
6002: LIST
6003: LIST
6004: PPUSH
6005: CALL_OW 69
6009: IFFALSE 6120
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) do
6011: LD_ADDR_VAR 0 1
6015: PUSH
6016: LD_INT 22
6018: PUSH
6019: LD_INT 1
6021: PUSH
6022: EMPTY
6023: LIST
6024: LIST
6025: PUSH
6026: LD_INT 21
6028: PUSH
6029: LD_INT 2
6031: PUSH
6032: EMPTY
6033: LIST
6034: LIST
6035: PUSH
6036: EMPTY
6037: LIST
6038: LIST
6039: PPUSH
6040: CALL_OW 69
6044: PUSH
6045: FOR_IN
6046: IFFALSE 6118
// tmp := tmp ^ [ GetNation ( i ) , GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) ] ;
6048: LD_ADDR_VAR 0 2
6052: PUSH
6053: LD_VAR 0 2
6057: PUSH
6058: LD_VAR 0 1
6062: PPUSH
6063: CALL_OW 248
6067: PUSH
6068: LD_VAR 0 1
6072: PPUSH
6073: CALL_OW 265
6077: PUSH
6078: LD_VAR 0 1
6082: PPUSH
6083: CALL_OW 262
6087: PUSH
6088: LD_VAR 0 1
6092: PPUSH
6093: CALL_OW 263
6097: PUSH
6098: LD_VAR 0 1
6102: PPUSH
6103: CALL_OW 264
6107: PUSH
6108: EMPTY
6109: LIST
6110: LIST
6111: LIST
6112: LIST
6113: LIST
6114: ADD
6115: ST_TO_ADDR
6116: GO 6045
6118: POP
6119: POP
// if tmp then
6120: LD_VAR 0 2
6124: IFFALSE 6138
// SaveVariable ( tmp , vehiclesInDelta ) ;
6126: LD_VAR 0 2
6130: PPUSH
6131: LD_STRING vehiclesInDelta
6133: PPUSH
6134: CALL_OW 39
// tmp := [ ] ;
6138: LD_ADDR_VAR 0 2
6142: PUSH
6143: EMPTY
6144: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) then
6145: LD_INT 22
6147: PUSH
6148: LD_INT 1
6150: PUSH
6151: EMPTY
6152: LIST
6153: LIST
6154: PUSH
6155: LD_INT 21
6157: PUSH
6158: LD_INT 3
6160: PUSH
6161: EMPTY
6162: LIST
6163: LIST
6164: PUSH
6165: EMPTY
6166: LIST
6167: LIST
6168: PPUSH
6169: CALL_OW 69
6173: IFFALSE 6326
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) do
6175: LD_ADDR_VAR 0 1
6179: PUSH
6180: LD_INT 22
6182: PUSH
6183: LD_INT 1
6185: PUSH
6186: EMPTY
6187: LIST
6188: LIST
6189: PUSH
6190: LD_INT 21
6192: PUSH
6193: LD_INT 3
6195: PUSH
6196: EMPTY
6197: LIST
6198: LIST
6199: PUSH
6200: EMPTY
6201: LIST
6202: LIST
6203: PPUSH
6204: CALL_OW 69
6208: PUSH
6209: FOR_IN
6210: IFFALSE 6324
// tmp := tmp ^ [ [ GetBType ( i ) , GetBLevel ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) , GetBWeapon ( i ) ] ] ;
6212: LD_ADDR_VAR 0 2
6216: PUSH
6217: LD_VAR 0 2
6221: PUSH
6222: LD_VAR 0 1
6226: PPUSH
6227: CALL_OW 266
6231: PUSH
6232: LD_VAR 0 1
6236: PPUSH
6237: CALL_OW 267
6241: PUSH
6242: LD_VAR 0 1
6246: PPUSH
6247: CALL_OW 250
6251: PUSH
6252: LD_VAR 0 1
6256: PPUSH
6257: CALL_OW 251
6261: PUSH
6262: LD_VAR 0 1
6266: PPUSH
6267: CALL_OW 254
6271: PUSH
6272: LD_VAR 0 1
6276: PPUSH
6277: LD_INT 1
6279: PPUSH
6280: CALL_OW 268
6284: PUSH
6285: LD_VAR 0 1
6289: PPUSH
6290: LD_INT 2
6292: PPUSH
6293: CALL_OW 268
6297: PUSH
6298: LD_VAR 0 1
6302: PPUSH
6303: CALL_OW 269
6307: PUSH
6308: EMPTY
6309: LIST
6310: LIST
6311: LIST
6312: LIST
6313: LIST
6314: LIST
6315: LIST
6316: LIST
6317: PUSH
6318: EMPTY
6319: LIST
6320: ADD
6321: ST_TO_ADDR
6322: GO 6209
6324: POP
6325: POP
// if tmp then
6326: LD_VAR 0 2
6330: IFFALSE 6344
// SaveVariable ( tmp , buildingsInDelta ) ;
6332: LD_VAR 0 2
6336: PPUSH
6337: LD_STRING buildingsInDelta
6339: PPUSH
6340: CALL_OW 39
// YouWin ;
6344: CALL_OW 103
// end ; end_of_file
6348: PPOPN 5
6350: END
// export function PrepareArabianTroops ( amount , skill , area ) ; var i , un , tmp ; begin
6351: LD_INT 0
6353: PPUSH
6354: PPUSH
6355: PPUSH
6356: PPUSH
// InitHc ;
6357: CALL_OW 19
// InitUc ;
6361: CALL_OW 18
// uc_side := 2 ;
6365: LD_ADDR_OWVAR 20
6369: PUSH
6370: LD_INT 2
6372: ST_TO_ADDR
// uc_nation := 2 ;
6373: LD_ADDR_OWVAR 21
6377: PUSH
6378: LD_INT 2
6380: ST_TO_ADDR
// if not amount then
6381: LD_VAR 0 1
6385: NOT
6386: IFFALSE 6390
// exit ;
6388: GO 6513
// for i = 1 to amount do
6390: LD_ADDR_VAR 0 5
6394: PUSH
6395: DOUBLE
6396: LD_INT 1
6398: DEC
6399: ST_TO_ADDR
6400: LD_VAR 0 1
6404: PUSH
6405: FOR_TO
6406: IFFALSE 6501
// begin PrepareHuman ( false , 1 , skill ) ;
6408: LD_INT 0
6410: PPUSH
6411: LD_INT 1
6413: PPUSH
6414: LD_VAR 0 2
6418: PPUSH
6419: CALL_OW 380
// un := CreateHuman ;
6423: LD_ADDR_VAR 0 6
6427: PUSH
6428: CALL_OW 44
6432: ST_TO_ADDR
// tmp := Insert ( tmp , 1 , un ) ;
6433: LD_ADDR_VAR 0 7
6437: PUSH
6438: LD_VAR 0 7
6442: PPUSH
6443: LD_INT 1
6445: PPUSH
6446: LD_VAR 0 6
6450: PPUSH
6451: CALL_OW 2
6455: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
6456: LD_VAR 0 6
6460: PPUSH
6461: LD_VAR 0 3
6465: PPUSH
6466: LD_INT 0
6468: PPUSH
6469: CALL_OW 49
// if i mod 2 = 0 then
6473: LD_VAR 0 5
6477: PUSH
6478: LD_INT 2
6480: MOD
6481: PUSH
6482: LD_INT 0
6484: EQUAL
6485: IFFALSE 6499
// SetTag ( un , 11 ) ;
6487: LD_VAR 0 6
6491: PPUSH
6492: LD_INT 11
6494: PPUSH
6495: CALL_OW 109
// end ;
6499: GO 6405
6501: POP
6502: POP
// result := tmp ;
6503: LD_ADDR_VAR 0 4
6507: PUSH
6508: LD_VAR 0 7
6512: ST_TO_ADDR
// end ;
6513: LD_VAR 0 4
6517: RET
// export ar_forces , ap_killers ; every 0 0$1 trigger Delta do var i , timer , more_troops , skill , eng , un , veh , force ;
6518: LD_EXP 6
6522: IFFALSE 7607
6524: GO 6526
6526: DISABLE
6527: LD_INT 0
6529: PPUSH
6530: PPUSH
6531: PPUSH
6532: PPUSH
6533: PPUSH
6534: PPUSH
6535: PPUSH
6536: PPUSH
// begin more_troops := false ;
6537: LD_ADDR_VAR 0 3
6541: PUSH
6542: LD_INT 0
6544: ST_TO_ADDR
// skill := [ 3 , 4 , 5 , 5 ] [ Difficulty ] ;
6545: LD_ADDR_VAR 0 4
6549: PUSH
6550: LD_INT 3
6552: PUSH
6553: LD_INT 4
6555: PUSH
6556: LD_INT 5
6558: PUSH
6559: LD_INT 5
6561: PUSH
6562: EMPTY
6563: LIST
6564: LIST
6565: LIST
6566: LIST
6567: PUSH
6568: LD_OWVAR 67
6572: ARRAY
6573: ST_TO_ADDR
// timer := [ 5 5$00 , 4 4$00 , 3 3$00 , 2 2$30 ] [ Difficulty ] ;
6574: LD_ADDR_VAR 0 2
6578: PUSH
6579: LD_INT 10500
6581: PUSH
6582: LD_INT 8400
6584: PUSH
6585: LD_INT 6300
6587: PUSH
6588: LD_INT 5250
6590: PUSH
6591: EMPTY
6592: LIST
6593: LIST
6594: LIST
6595: LIST
6596: PUSH
6597: LD_OWVAR 67
6601: ARRAY
6602: ST_TO_ADDR
// force := [ ] ;
6603: LD_ADDR_VAR 0 8
6607: PUSH
6608: EMPTY
6609: ST_TO_ADDR
// ar_forces := [ ] ;
6610: LD_ADDR_EXP 29
6614: PUSH
6615: EMPTY
6616: ST_TO_ADDR
// ap_killers := [ ] ;
6617: LD_ADDR_EXP 30
6621: PUSH
6622: EMPTY
6623: ST_TO_ADDR
// Wait ( timer ) ;
6624: LD_VAR 0 2
6628: PPUSH
6629: CALL_OW 67
// if Denis and GetSide ( Denis ) = 4 then
6633: LD_EXP 20
6637: PUSH
6638: LD_EXP 20
6642: PPUSH
6643: CALL_OW 255
6647: PUSH
6648: LD_INT 4
6650: EQUAL
6651: AND
6652: IFFALSE 6661
// Wait ( 0 0$45 ) ;
6654: LD_INT 1575
6656: PPUSH
6657: CALL_OW 67
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_armoury ] ] ) then
6661: LD_INT 22
6663: PUSH
6664: LD_INT 1
6666: PUSH
6667: EMPTY
6668: LIST
6669: LIST
6670: PUSH
6671: LD_INT 30
6673: PUSH
6674: LD_INT 4
6676: PUSH
6677: EMPTY
6678: LIST
6679: LIST
6680: PUSH
6681: EMPTY
6682: LIST
6683: LIST
6684: PPUSH
6685: CALL_OW 69
6689: IFFALSE 6706
// begin wait ( 1 1$25 ) ;
6691: LD_INT 2975
6693: PPUSH
6694: CALL_OW 67
// more_troops := true ;
6698: LD_ADDR_VAR 0 3
6702: PUSH
6703: LD_INT 1
6705: ST_TO_ADDR
// end ; if more_troops then
6706: LD_VAR 0 3
6710: IFFALSE 6906
// begin force := PrepareArabianTroops ( [ 4 , 5 , 6 , 7 ] [ Difficulty ] , skill , arArea2 ) ;
6712: LD_ADDR_VAR 0 8
6716: PUSH
6717: LD_INT 4
6719: PUSH
6720: LD_INT 5
6722: PUSH
6723: LD_INT 6
6725: PUSH
6726: LD_INT 7
6728: PUSH
6729: EMPTY
6730: LIST
6731: LIST
6732: LIST
6733: LIST
6734: PUSH
6735: LD_OWVAR 67
6739: ARRAY
6740: PPUSH
6741: LD_VAR 0 4
6745: PPUSH
6746: LD_INT 14
6748: PPUSH
6749: CALL 6351 0 3
6753: ST_TO_ADDR
// veh := PrepareTank ( 2 , 3 , ru_medium_tracked , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_heavy_machine_gun , ru_gatling_gun , ru_gun ] [ Difficulty ] , 90 ) ;
6754: LD_ADDR_VAR 0 7
6758: PUSH
6759: LD_INT 2
6761: PPUSH
6762: LD_INT 3
6764: PPUSH
6765: LD_INT 22
6767: PPUSH
6768: LD_INT 1
6770: PPUSH
6771: LD_INT 1
6773: PPUSH
6774: LD_INT 42
6776: PUSH
6777: LD_INT 42
6779: PUSH
6780: LD_INT 43
6782: PUSH
6783: LD_INT 44
6785: PUSH
6786: EMPTY
6787: LIST
6788: LIST
6789: LIST
6790: LIST
6791: PUSH
6792: LD_OWVAR 67
6796: ARRAY
6797: PPUSH
6798: LD_INT 90
6800: PPUSH
6801: CALL 443 0 7
6805: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
6806: LD_VAR 0 7
6810: PPUSH
6811: LD_INT 4
6813: PPUSH
6814: CALL_OW 233
// PlaceUnitArea ( veh , arArea1 , false ) ;
6818: LD_VAR 0 7
6822: PPUSH
6823: LD_INT 13
6825: PPUSH
6826: LD_INT 0
6828: PPUSH
6829: CALL_OW 49
// uc_side := 2 ;
6833: LD_ADDR_OWVAR 20
6837: PUSH
6838: LD_INT 2
6840: ST_TO_ADDR
// uc_nation := 2 ;
6841: LD_ADDR_OWVAR 21
6845: PUSH
6846: LD_INT 2
6848: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
6849: LD_INT 0
6851: PPUSH
6852: LD_INT 1
6854: PPUSH
6855: LD_VAR 0 4
6859: PPUSH
6860: CALL_OW 380
// un := CreateHuman ;
6864: LD_ADDR_VAR 0 6
6868: PUSH
6869: CALL_OW 44
6873: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6874: LD_VAR 0 6
6878: PPUSH
6879: LD_VAR 0 7
6883: PPUSH
6884: CALL_OW 52
// force := force ^ un ;
6888: LD_ADDR_VAR 0 8
6892: PUSH
6893: LD_VAR 0 8
6897: PUSH
6898: LD_VAR 0 6
6902: ADD
6903: ST_TO_ADDR
// end else
6904: GO 6948
// begin force := PrepareArabianTroops ( [ 3 , 4 , 5 , 6 ] [ Difficulty ] , skill , arArea2 ) ;
6906: LD_ADDR_VAR 0 8
6910: PUSH
6911: LD_INT 3
6913: PUSH
6914: LD_INT 4
6916: PUSH
6917: LD_INT 5
6919: PUSH
6920: LD_INT 6
6922: PUSH
6923: EMPTY
6924: LIST
6925: LIST
6926: LIST
6927: LIST
6928: PUSH
6929: LD_OWVAR 67
6933: ARRAY
6934: PPUSH
6935: LD_VAR 0 4
6939: PPUSH
6940: LD_INT 14
6942: PPUSH
6943: CALL 6351 0 3
6947: ST_TO_ADDR
// end ; if force then
6948: LD_VAR 0 8
6952: IFFALSE 6964
// ar_forces := force ;
6954: LD_ADDR_EXP 29
6958: PUSH
6959: LD_VAR 0 8
6963: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
6964: LD_INT 35
6966: PPUSH
6967: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) = 0 ;
6971: LD_INT 22
6973: PUSH
6974: LD_INT 2
6976: PUSH
6977: EMPTY
6978: LIST
6979: LIST
6980: PUSH
6981: LD_INT 21
6983: PUSH
6984: LD_INT 1
6986: PUSH
6987: EMPTY
6988: LIST
6989: LIST
6990: PUSH
6991: EMPTY
6992: LIST
6993: LIST
6994: PPUSH
6995: CALL_OW 69
6999: PUSH
7000: LD_INT 0
7002: EQUAL
7003: IFFALSE 6964
// wait ( timer ) ;
7005: LD_VAR 0 2
7009: PPUSH
7010: CALL_OW 67
// force := PrepareArabianTroops ( [ 4 , 5 , 6 , 7 ] [ Difficulty ] , skill , [ arArea1 , arArea2 ] [ rand ( 1 , 2 ) ] ) ;
7014: LD_ADDR_VAR 0 8
7018: PUSH
7019: LD_INT 4
7021: PUSH
7022: LD_INT 5
7024: PUSH
7025: LD_INT 6
7027: PUSH
7028: LD_INT 7
7030: PUSH
7031: EMPTY
7032: LIST
7033: LIST
7034: LIST
7035: LIST
7036: PUSH
7037: LD_OWVAR 67
7041: ARRAY
7042: PPUSH
7043: LD_VAR 0 4
7047: PPUSH
7048: LD_INT 13
7050: PUSH
7051: LD_INT 14
7053: PUSH
7054: EMPTY
7055: LIST
7056: LIST
7057: PUSH
7058: LD_INT 1
7060: PPUSH
7061: LD_INT 2
7063: PPUSH
7064: CALL_OW 12
7068: ARRAY
7069: PPUSH
7070: CALL 6351 0 3
7074: ST_TO_ADDR
// if Difficulty > 1 and Delta then
7075: LD_OWVAR 67
7079: PUSH
7080: LD_INT 1
7082: GREATER
7083: PUSH
7084: LD_EXP 6
7088: AND
7089: IFFALSE 7168
// begin uc_side := 2 ;
7091: LD_ADDR_OWVAR 20
7095: PUSH
7096: LD_INT 2
7098: ST_TO_ADDR
// uc_nation := 2 ;
7099: LD_ADDR_OWVAR 21
7103: PUSH
7104: LD_INT 2
7106: ST_TO_ADDR
// PrepareHuman ( false , 2 , skill ) ;
7107: LD_INT 0
7109: PPUSH
7110: LD_INT 2
7112: PPUSH
7113: LD_VAR 0 4
7117: PPUSH
7118: CALL_OW 380
// eng := CreateHuman ;
7122: LD_ADDR_VAR 0 5
7126: PUSH
7127: CALL_OW 44
7131: ST_TO_ADDR
// PlaceUnitArea ( eng , arArea1 , false ) ;
7132: LD_VAR 0 5
7136: PPUSH
7137: LD_INT 13
7139: PPUSH
7140: LD_INT 0
7142: PPUSH
7143: CALL_OW 49
// Wait ( 3 ) ;
7147: LD_INT 3
7149: PPUSH
7150: CALL_OW 67
// AddComEnterUnit ( eng , Delta ) ;
7154: LD_VAR 0 5
7158: PPUSH
7159: LD_EXP 6
7163: PPUSH
7164: CALL_OW 180
// end ; if force then
7168: LD_VAR 0 8
7172: IFFALSE 7184
// ar_forces := force ;
7174: LD_ADDR_EXP 29
7178: PUSH
7179: LD_VAR 0 8
7183: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
7184: LD_INT 35
7186: PPUSH
7187: CALL_OW 67
// if eng then
7191: LD_VAR 0 5
7195: IFFALSE 7249
// if GetSide ( Delta ) = 2 and IsOk ( eng ) and not IsInUnit ( eng ) then
7197: LD_EXP 6
7201: PPUSH
7202: CALL_OW 255
7206: PUSH
7207: LD_INT 2
7209: EQUAL
7210: PUSH
7211: LD_VAR 0 5
7215: PPUSH
7216: CALL_OW 302
7220: AND
7221: PUSH
7222: LD_VAR 0 5
7226: PPUSH
7227: CALL_OW 310
7231: NOT
7232: AND
7233: IFFALSE 7249
// ComEnterUnit ( eng , Delta ) ;
7235: LD_VAR 0 5
7239: PPUSH
7240: LD_EXP 6
7244: PPUSH
7245: CALL_OW 120
// until FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) = 0 ;
7249: LD_INT 22
7251: PUSH
7252: LD_INT 2
7254: PUSH
7255: EMPTY
7256: LIST
7257: LIST
7258: PUSH
7259: LD_INT 21
7261: PUSH
7262: LD_INT 1
7264: PUSH
7265: EMPTY
7266: LIST
7267: LIST
7268: PUSH
7269: EMPTY
7270: LIST
7271: LIST
7272: PPUSH
7273: CALL_OW 69
7277: PUSH
7278: LD_INT 0
7280: EQUAL
7281: IFFALSE 7184
// Wait ( 2 2$00 ) ;
7283: LD_INT 4200
7285: PPUSH
7286: CALL_OW 67
// ap_killers := PrepareArabianTroops ( [ 1 , 2 , 2 , 2 ] [ Difficulty ] , skill , arArea1 ) ;
7290: LD_ADDR_EXP 30
7294: PUSH
7295: LD_INT 1
7297: PUSH
7298: LD_INT 2
7300: PUSH
7301: LD_INT 2
7303: PUSH
7304: LD_INT 2
7306: PUSH
7307: EMPTY
7308: LIST
7309: LIST
7310: LIST
7311: LIST
7312: PUSH
7313: LD_OWVAR 67
7317: ARRAY
7318: PPUSH
7319: LD_VAR 0 4
7323: PPUSH
7324: LD_INT 13
7326: PPUSH
7327: CALL 6351 0 3
7331: ST_TO_ADDR
// Wait ( timer * 2 ) ;
7332: LD_VAR 0 2
7336: PUSH
7337: LD_INT 2
7339: MUL
7340: PPUSH
7341: CALL_OW 67
// ar_forces := PrepareArabianTroops ( [ 5 , 6 , 7 , 8 ] [ Difficulty ] , skill , arArea1 ) ^ PrepareArabianTroops ( [ 3 , 4 , 4 , 4 ] [ Difficulty ] , skill , arArea2 ) ;
7345: LD_ADDR_EXP 29
7349: PUSH
7350: LD_INT 5
7352: PUSH
7353: LD_INT 6
7355: PUSH
7356: LD_INT 7
7358: PUSH
7359: LD_INT 8
7361: PUSH
7362: EMPTY
7363: LIST
7364: LIST
7365: LIST
7366: LIST
7367: PUSH
7368: LD_OWVAR 67
7372: ARRAY
7373: PPUSH
7374: LD_VAR 0 4
7378: PPUSH
7379: LD_INT 13
7381: PPUSH
7382: CALL 6351 0 3
7386: PUSH
7387: LD_INT 3
7389: PUSH
7390: LD_INT 4
7392: PUSH
7393: LD_INT 4
7395: PUSH
7396: LD_INT 4
7398: PUSH
7399: EMPTY
7400: LIST
7401: LIST
7402: LIST
7403: LIST
7404: PUSH
7405: LD_OWVAR 67
7409: ARRAY
7410: PPUSH
7411: LD_VAR 0 4
7415: PPUSH
7416: LD_INT 14
7418: PPUSH
7419: CALL 6351 0 3
7423: ADD
7424: ST_TO_ADDR
// if Difficulty < 4 and not traitor then
7425: LD_OWVAR 67
7429: PUSH
7430: LD_INT 4
7432: LESS
7433: PUSH
7434: LD_EXP 16
7438: NOT
7439: AND
7440: IFFALSE 7444
// exit ;
7442: GO 7607
// veh := PrepareTank ( 2 , 3 , ru_medium_tracked , engine_combustion , control_manual , ru_gun , 90 ) ;
7444: LD_ADDR_VAR 0 7
7448: PUSH
7449: LD_INT 2
7451: PPUSH
7452: LD_INT 3
7454: PPUSH
7455: LD_INT 22
7457: PPUSH
7458: LD_INT 1
7460: PPUSH
7461: LD_INT 1
7463: PPUSH
7464: LD_INT 44
7466: PPUSH
7467: LD_INT 90
7469: PPUSH
7470: CALL 443 0 7
7474: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
7475: LD_VAR 0 7
7479: PPUSH
7480: LD_INT 1
7482: PPUSH
7483: CALL_OW 233
// PlaceUnitXY ( veh , 28 , 51 , false ) ;
7487: LD_VAR 0 7
7491: PPUSH
7492: LD_INT 28
7494: PPUSH
7495: LD_INT 51
7497: PPUSH
7498: LD_INT 0
7500: PPUSH
7501: CALL_OW 48
// uc_side := 2 ;
7505: LD_ADDR_OWVAR 20
7509: PUSH
7510: LD_INT 2
7512: ST_TO_ADDR
// uc_nation := 2 ;
7513: LD_ADDR_OWVAR 21
7517: PUSH
7518: LD_INT 2
7520: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
7521: LD_INT 0
7523: PPUSH
7524: LD_INT 1
7526: PPUSH
7527: LD_VAR 0 4
7531: PPUSH
7532: CALL_OW 380
// un := CreateHuman ;
7536: LD_ADDR_VAR 0 6
7540: PUSH
7541: CALL_OW 44
7545: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
7546: LD_VAR 0 6
7550: PPUSH
7551: LD_VAR 0 7
7555: PPUSH
7556: CALL_OW 52
// ar_forces := Join ( ar_forces , un ) ;
7560: LD_ADDR_EXP 29
7564: PUSH
7565: LD_EXP 29
7569: PPUSH
7570: LD_VAR 0 6
7574: PPUSH
7575: CALL 67274 0 2
7579: ST_TO_ADDR
// ar_forces := ar_forces union PrepareArabianTroops ( 4 , skill , arArea3 ) ;
7580: LD_ADDR_EXP 29
7584: PUSH
7585: LD_EXP 29
7589: PUSH
7590: LD_INT 4
7592: PPUSH
7593: LD_VAR 0 4
7597: PPUSH
7598: LD_INT 19
7600: PPUSH
7601: CALL 6351 0 3
7605: UNION
7606: ST_TO_ADDR
// end ;
7607: PPOPN 8
7609: END
// every 0 0$03 trigger ar_forces do var i , target ;
7610: LD_EXP 29
7614: IFFALSE 7812
7616: GO 7618
7618: DISABLE
7619: LD_INT 0
7621: PPUSH
7622: PPUSH
// begin enable ;
7623: ENABLE
// if not ar_forces then
7624: LD_EXP 29
7628: NOT
7629: IFFALSE 7633
// exit ;
7631: GO 7812
// if Delta then
7633: LD_EXP 6
7637: IFFALSE 7651
// target := Delta else
7639: LD_ADDR_VAR 0 2
7643: PUSH
7644: LD_EXP 6
7648: ST_TO_ADDR
7649: GO 7661
// target := JMM ;
7651: LD_ADDR_VAR 0 2
7655: PUSH
7656: LD_EXP 17
7660: ST_TO_ADDR
// for i in ar_forces do
7661: LD_ADDR_VAR 0 1
7665: PUSH
7666: LD_EXP 29
7670: PUSH
7671: FOR_IN
7672: IFFALSE 7810
// begin if i in FilterAllUnits ( [ f_driving ] ) then
7674: LD_VAR 0 1
7678: PUSH
7679: LD_INT 55
7681: PUSH
7682: EMPTY
7683: LIST
7684: PPUSH
7685: CALL_OW 69
7689: IN
7690: IFFALSE 7733
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , IsInUnit ( i ) ) ) else
7692: LD_VAR 0 1
7696: PPUSH
7697: LD_INT 22
7699: PUSH
7700: LD_INT 1
7702: PUSH
7703: EMPTY
7704: LIST
7705: LIST
7706: PPUSH
7707: CALL_OW 69
7711: PPUSH
7712: LD_VAR 0 1
7716: PPUSH
7717: CALL_OW 310
7721: PPUSH
7722: CALL_OW 74
7726: PPUSH
7727: CALL_OW 115
7731: GO 7808
// if GetDistUnits ( i , target ) > 30 then
7733: LD_VAR 0 1
7737: PPUSH
7738: LD_VAR 0 2
7742: PPUSH
7743: CALL_OW 296
7747: PUSH
7748: LD_INT 30
7750: GREATER
7751: IFFALSE 7784
// ComAgressiveMove ( i , GetX ( target ) , GetY ( target ) ) else
7753: LD_VAR 0 1
7757: PPUSH
7758: LD_VAR 0 2
7762: PPUSH
7763: CALL_OW 250
7767: PPUSH
7768: LD_VAR 0 2
7772: PPUSH
7773: CALL_OW 251
7777: PPUSH
7778: CALL_OW 114
7782: GO 7808
// Attack ( i , FilterAllUnits ( [ f_enemy , 2 ] ) ) ;
7784: LD_VAR 0 1
7788: PPUSH
7789: LD_INT 81
7791: PUSH
7792: LD_INT 2
7794: PUSH
7795: EMPTY
7796: LIST
7797: LIST
7798: PPUSH
7799: CALL_OW 69
7803: PPUSH
7804: CALL 935 0 2
// end ;
7808: GO 7671
7810: POP
7811: POP
// end ;
7812: PPOPN 2
7814: END
// every 0 0$01 trigger ap_killers do var filter , i , target ;
7815: LD_EXP 30
7819: IFFALSE 7979
7821: GO 7823
7823: DISABLE
7824: LD_INT 0
7826: PPUSH
7827: PPUSH
7828: PPUSH
// begin enable ;
7829: ENABLE
// filter := FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) ;
7830: LD_ADDR_VAR 0 1
7834: PUSH
7835: LD_INT 22
7837: PUSH
7838: LD_INT 0
7840: PUSH
7841: EMPTY
7842: LIST
7843: LIST
7844: PUSH
7845: LD_INT 25
7847: PUSH
7848: LD_INT 12
7850: PUSH
7851: EMPTY
7852: LIST
7853: LIST
7854: PUSH
7855: EMPTY
7856: LIST
7857: LIST
7858: PPUSH
7859: CALL_OW 69
7863: ST_TO_ADDR
// if not filter then
7864: LD_VAR 0 1
7868: NOT
7869: IFFALSE 7896
// begin ar_forces := ar_forces ^ ap_killers ;
7871: LD_ADDR_EXP 29
7875: PUSH
7876: LD_EXP 29
7880: PUSH
7881: LD_EXP 30
7885: ADD
7886: ST_TO_ADDR
// ap_killers := [ ] ;
7887: LD_ADDR_EXP 30
7891: PUSH
7892: EMPTY
7893: ST_TO_ADDR
// exit ;
7894: GO 7979
// end ; for i in ap_killers do
7896: LD_ADDR_VAR 0 2
7900: PUSH
7901: LD_EXP 30
7905: PUSH
7906: FOR_IN
7907: IFFALSE 7977
// begin if not IsOk ( i ) then
7909: LD_VAR 0 2
7913: PPUSH
7914: CALL_OW 302
7918: NOT
7919: IFFALSE 7923
// continue ;
7921: GO 7906
// if not HasTask ( i ) then
7923: LD_VAR 0 2
7927: PPUSH
7928: CALL_OW 314
7932: NOT
7933: IFFALSE 7955
// target := NearestUnitToUnit ( filter , i ) ;
7935: LD_ADDR_VAR 0 3
7939: PUSH
7940: LD_VAR 0 1
7944: PPUSH
7945: LD_VAR 0 2
7949: PPUSH
7950: CALL_OW 74
7954: ST_TO_ADDR
// if target then
7955: LD_VAR 0 3
7959: IFFALSE 7975
// ComAttackUnit ( i , target ) ;
7961: LD_VAR 0 2
7965: PPUSH
7966: LD_VAR 0 3
7970: PPUSH
7971: CALL_OW 115
// end ;
7975: GO 7906
7977: POP
7978: POP
// end ; end_of_file
7979: PPOPN 3
7981: END
// every 0 0$40 + 0 0$2 trigger Delta do var i , counter , cr ;
7982: LD_EXP 6
7986: IFFALSE 8122
7988: GO 7990
7990: DISABLE
7991: LD_INT 0
7993: PPUSH
7994: PPUSH
7995: PPUSH
// begin counter := [ 300 , 250 , 220 , 210 ] [ Difficulty ] ;
7996: LD_ADDR_VAR 0 2
8000: PUSH
8001: LD_INT 300
8003: PUSH
8004: LD_INT 250
8006: PUSH
8007: LD_INT 220
8009: PUSH
8010: LD_INT 210
8012: PUSH
8013: EMPTY
8014: LIST
8015: LIST
8016: LIST
8017: LIST
8018: PUSH
8019: LD_OWVAR 67
8023: ARRAY
8024: ST_TO_ADDR
// CreateCratesArea ( Rand ( 1 , 3 ) , cratesArea , true ) ;
8025: LD_INT 1
8027: PPUSH
8028: LD_INT 3
8030: PPUSH
8031: CALL_OW 12
8035: PPUSH
8036: LD_INT 7
8038: PPUSH
8039: LD_INT 1
8041: PPUSH
8042: CALL_OW 55
// repeat wait ( rand ( 1 1$30 , 2 2$20 ) ) ;
8046: LD_INT 3150
8048: PPUSH
8049: LD_INT 4900
8051: PPUSH
8052: CALL_OW 12
8056: PPUSH
8057: CALL_OW 67
// cr := rand ( 1 , 5 ) ;
8061: LD_ADDR_VAR 0 3
8065: PUSH
8066: LD_INT 1
8068: PPUSH
8069: LD_INT 5
8071: PPUSH
8072: CALL_OW 12
8076: ST_TO_ADDR
// CreateCratesArea ( cr , cratesArea , true ) ;
8077: LD_VAR 0 3
8081: PPUSH
8082: LD_INT 7
8084: PPUSH
8085: LD_INT 1
8087: PPUSH
8088: CALL_OW 55
// counter := counter - cr * 10 ;
8092: LD_ADDR_VAR 0 2
8096: PUSH
8097: LD_VAR 0 2
8101: PUSH
8102: LD_VAR 0 3
8106: PUSH
8107: LD_INT 10
8109: MUL
8110: MINUS
8111: ST_TO_ADDR
// until counter <= 0 ;
8112: LD_VAR 0 2
8116: PUSH
8117: LD_INT 0
8119: LESSEQUAL
8120: IFFALSE 8046
// end ;
8122: PPOPN 3
8124: END
// every 0 0$03 trigger not Delta do var i ;
8125: LD_EXP 6
8129: NOT
8130: IFFALSE 8200
8132: GO 8134
8134: DISABLE
8135: LD_INT 0
8137: PPUSH
// begin for i = 1 to 5 - Difficulty do
8138: LD_ADDR_VAR 0 1
8142: PUSH
8143: DOUBLE
8144: LD_INT 1
8146: DEC
8147: ST_TO_ADDR
8148: LD_INT 5
8150: PUSH
8151: LD_OWVAR 67
8155: MINUS
8156: PUSH
8157: FOR_TO
8158: IFFALSE 8198
// begin CreateCratesArea ( rand ( 2 , 5 ) , deltaMainArea , true ) ;
8160: LD_INT 2
8162: PPUSH
8163: LD_INT 5
8165: PPUSH
8166: CALL_OW 12
8170: PPUSH
8171: LD_INT 8
8173: PPUSH
8174: LD_INT 1
8176: PPUSH
8177: CALL_OW 55
// Wait ( rand ( 0 0$16 , 0 0$39 ) ) ;
8181: LD_INT 560
8183: PPUSH
8184: LD_INT 1365
8186: PPUSH
8187: CALL_OW 12
8191: PPUSH
8192: CALL_OW 67
// end ;
8196: GO 8157
8198: POP
8199: POP
// end ;
8200: PPOPN 1
8202: END
// every 3 3$00 trigger tick < 15 15$00 do
8203: LD_OWVAR 1
8207: PUSH
8208: LD_INT 31500
8210: LESS
8211: IFFALSE 8271
8213: GO 8215
8215: DISABLE
// begin enable ;
8216: ENABLE
// CreateCratesAnyWhere ( rand ( 1 , 3 ) , true ) ;
8217: LD_INT 1
8219: PPUSH
8220: LD_INT 3
8222: PPUSH
8223: CALL_OW 12
8227: PPUSH
8228: LD_INT 1
8230: PPUSH
8231: CALL_OW 57
// Wait ( rand ( 0 0$38 , 0 0$59 ) ) ;
8235: LD_INT 1330
8237: PPUSH
8238: LD_INT 2065
8240: PPUSH
8241: CALL_OW 12
8245: PPUSH
8246: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 4 ) , riverArea , true ) ;
8250: LD_INT 1
8252: PPUSH
8253: LD_INT 4
8255: PPUSH
8256: CALL_OW 12
8260: PPUSH
8261: LD_INT 15
8263: PPUSH
8264: LD_INT 1
8266: PPUSH
8267: CALL_OW 55
// end ; end_of_file
8271: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
8272: LD_VAR 0 1
8276: PPUSH
8277: CALL 24689 0 1
// if un = JMM then
8281: LD_VAR 0 1
8285: PUSH
8286: LD_EXP 17
8290: EQUAL
8291: IFFALSE 8300
// YouLost ( JMM ) ;
8293: LD_STRING JMM
8295: PPUSH
8296: CALL_OW 104
// if un = Delta then
8300: LD_VAR 0 1
8304: PUSH
8305: LD_EXP 6
8309: EQUAL
8310: IFFALSE 8333
// begin Delta := 0 ;
8312: LD_ADDR_EXP 6
8316: PUSH
8317: LD_INT 0
8319: ST_TO_ADDR
// SetRestrict ( b_depot , 1 , true ) ;
8320: LD_INT 0
8322: PPUSH
8323: LD_INT 1
8325: PPUSH
8326: LD_INT 1
8328: PPUSH
8329: CALL_OW 324
// end ; if un in ar_forces then
8333: LD_VAR 0 1
8337: PUSH
8338: LD_EXP 29
8342: IN
8343: IFFALSE 8361
// ar_forces := ar_forces diff un ;
8345: LD_ADDR_EXP 29
8349: PUSH
8350: LD_EXP 29
8354: PUSH
8355: LD_VAR 0 1
8359: DIFF
8360: ST_TO_ADDR
// if un in ap_killers then
8361: LD_VAR 0 1
8365: PUSH
8366: LD_EXP 30
8370: IN
8371: IFFALSE 8389
// ap_killers := ap_killers diff un ;
8373: LD_ADDR_EXP 30
8377: PUSH
8378: LD_EXP 30
8382: PUSH
8383: LD_VAR 0 1
8387: DIFF
8388: ST_TO_ADDR
// if un in FilterAllUnits ( [ f_or , [ f_class , class_apeman ] , [ f_class , class_apeman_engineer ] ] ) then
8389: LD_VAR 0 1
8393: PUSH
8394: LD_INT 2
8396: PUSH
8397: LD_INT 25
8399: PUSH
8400: LD_INT 12
8402: PUSH
8403: EMPTY
8404: LIST
8405: LIST
8406: PUSH
8407: LD_INT 25
8409: PUSH
8410: LD_INT 16
8412: PUSH
8413: EMPTY
8414: LIST
8415: LIST
8416: PUSH
8417: EMPTY
8418: LIST
8419: LIST
8420: LIST
8421: PPUSH
8422: CALL_OW 69
8426: IN
8427: IFFALSE 8443
// apeKillCounter := apeKillCounter + 1 ;
8429: LD_ADDR_EXP 15
8433: PUSH
8434: LD_EXP 15
8438: PUSH
8439: LD_INT 1
8441: PLUS
8442: ST_TO_ADDR
// end ;
8443: PPOPN 1
8445: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if un in FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) and killerSide = 1 then
8446: LD_VAR 0 1
8450: PUSH
8451: LD_INT 22
8453: PUSH
8454: LD_INT 1
8456: PUSH
8457: EMPTY
8458: LIST
8459: LIST
8460: PUSH
8461: LD_INT 23
8463: PUSH
8464: LD_INT 1
8466: PUSH
8467: EMPTY
8468: LIST
8469: LIST
8470: PUSH
8471: LD_INT 21
8473: PUSH
8474: LD_INT 1
8476: PUSH
8477: EMPTY
8478: LIST
8479: LIST
8480: PUSH
8481: EMPTY
8482: LIST
8483: LIST
8484: LIST
8485: PPUSH
8486: CALL_OW 69
8490: IN
8491: PUSH
8492: LD_VAR 0 2
8496: PUSH
8497: LD_INT 1
8499: EQUAL
8500: AND
8501: IFFALSE 8511
// traitor := true ;
8503: LD_ADDR_EXP 16
8507: PUSH
8508: LD_INT 1
8510: ST_TO_ADDR
// end ;
8511: PPOPN 3
8513: END
// on VehicleConstructed ( veh , fac ) do begin SOS_VehicleConstructed ( veh , fac ) ;
8514: LD_VAR 0 1
8518: PPUSH
8519: LD_VAR 0 2
8523: PPUSH
8524: CALL 24809 0 2
// end ;
8528: PPOPN 2
8530: END
// on Contact ( s1 , s2 ) do begin if s1 = 1 and s2 = 2 and not arab_spotted then
8531: LD_VAR 0 1
8535: PUSH
8536: LD_INT 1
8538: EQUAL
8539: PUSH
8540: LD_VAR 0 2
8544: PUSH
8545: LD_INT 2
8547: EQUAL
8548: AND
8549: PUSH
8550: LD_EXP 13
8554: NOT
8555: AND
8556: IFFALSE 8566
// arab_spotted := true ;
8558: LD_ADDR_EXP 13
8562: PUSH
8563: LD_INT 1
8565: ST_TO_ADDR
// end ;
8566: PPOPN 2
8568: END
// on EndTheMissionRaised ( p ) do begin if FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] , [ f_type , unit_human ] ] ) then
8569: LD_INT 22
8571: PUSH
8572: LD_INT 2
8574: PUSH
8575: EMPTY
8576: LIST
8577: LIST
8578: PUSH
8579: LD_INT 50
8581: PUSH
8582: EMPTY
8583: LIST
8584: PUSH
8585: LD_INT 21
8587: PUSH
8588: LD_INT 1
8590: PUSH
8591: EMPTY
8592: LIST
8593: LIST
8594: PUSH
8595: EMPTY
8596: LIST
8597: LIST
8598: LIST
8599: PPUSH
8600: CALL_OW 69
8604: IFFALSE 8615
// begin Query ( QArabOnMap ) ;
8606: LD_STRING QArabOnMap
8608: PPUSH
8609: CALL_OW 97
// exit ;
8613: GO 8631
// end ; end_the_mission_allowed := false ;
8615: LD_ADDR_OWVAR 57
8619: PUSH
8620: LD_INT 0
8622: ST_TO_ADDR
// end_mission := true ;
8623: LD_ADDR_EXP 14
8627: PUSH
8628: LD_INT 1
8630: ST_TO_ADDR
// end ;
8631: PPOPN 1
8633: END
// on ApemanTamed ( apeman , sci ) do begin if GetSide ( sci ) = 1 then
8634: LD_VAR 0 2
8638: PPUSH
8639: CALL_OW 255
8643: PUSH
8644: LD_INT 1
8646: EQUAL
8647: IFFALSE 8663
// apeman_counter := apeman_counter + 1 ;
8649: LD_ADDR_EXP 12
8653: PUSH
8654: LD_EXP 12
8658: PUSH
8659: LD_INT 1
8661: PLUS
8662: ST_TO_ADDR
// if not first_apeman_tamed then
8663: LD_EXP 8
8667: NOT
8668: IFFALSE 8867
// begin first_apeman_tamed := true ;
8670: LD_ADDR_EXP 8
8674: PUSH
8675: LD_INT 1
8677: ST_TO_ADDR
// if sci = Gladstone then
8678: LD_VAR 0 2
8682: PUSH
8683: LD_EXP 18
8687: EQUAL
8688: IFFALSE 8702
// Say ( Gladstone , D7b-Glad-1 ) ;
8690: LD_EXP 18
8694: PPUSH
8695: LD_STRING D7b-Glad-1
8697: PPUSH
8698: CALL_OW 88
// if sci = Denis then
8702: LD_VAR 0 2
8706: PUSH
8707: LD_EXP 20
8711: EQUAL
8712: IFFALSE 8726
// Say ( Denis , D7a-Den-1 ) ;
8714: LD_EXP 20
8718: PPUSH
8719: LD_STRING D7a-Den-1
8721: PPUSH
8722: CALL_OW 88
// if not sci in [ JMM , Gladstone , Denis , Lisa , Frank , Bobby , Cyrus , Donaldson ] then
8726: LD_VAR 0 2
8730: PUSH
8731: LD_EXP 17
8735: PUSH
8736: LD_EXP 18
8740: PUSH
8741: LD_EXP 20
8745: PUSH
8746: LD_EXP 23
8750: PUSH
8751: LD_EXP 24
8755: PUSH
8756: LD_EXP 25
8760: PUSH
8761: LD_EXP 26
8765: PUSH
8766: LD_EXP 22
8770: PUSH
8771: EMPTY
8772: LIST
8773: LIST
8774: LIST
8775: LIST
8776: LIST
8777: LIST
8778: LIST
8779: LIST
8780: IN
8781: NOT
8782: IFFALSE 8825
// begin if GetSex ( sci ) = sex_male then
8784: LD_VAR 0 2
8788: PPUSH
8789: CALL_OW 258
8793: PUSH
8794: LD_INT 1
8796: EQUAL
8797: IFFALSE 8813
// Say ( sci , D7c-Sci1-1 ) else
8799: LD_VAR 0 2
8803: PPUSH
8804: LD_STRING D7c-Sci1-1
8806: PPUSH
8807: CALL_OW 88
8811: GO 8825
// Say ( sci , D7c-FSci1-1 ) ;
8813: LD_VAR 0 2
8817: PPUSH
8818: LD_STRING D7c-FSci1-1
8820: PPUSH
8821: CALL_OW 88
// end ; if sci <> Gladstone then
8825: LD_VAR 0 2
8829: PUSH
8830: LD_EXP 18
8834: NONEQUAL
8835: IFFALSE 8849
// Say ( Gladstone , D7c-Glad-1 ) ;
8837: LD_EXP 18
8841: PPUSH
8842: LD_STRING D7c-Glad-1
8844: PPUSH
8845: CALL_OW 88
// if Lisa then
8849: LD_EXP 23
8853: IFFALSE 8867
// Say ( Lisa , D8-Lisa-1 ) ;
8855: LD_EXP 23
8859: PPUSH
8860: LD_STRING D8-Lisa-1
8862: PPUSH
8863: CALL_OW 88
// end ; end ; end_of_file end_of_file
8867: PPOPN 2
8869: END
// export globalGameSaveCounter ; every 0 0$1 do
8870: GO 8872
8872: DISABLE
// begin enable ;
8873: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
8874: LD_STRING updateTimer(
8876: PUSH
8877: LD_OWVAR 1
8881: STR
8882: PUSH
8883: LD_STRING );
8885: STR
8886: PPUSH
8887: CALL_OW 559
// end ;
8891: END
// every 0 0$1 do
8892: GO 8894
8894: DISABLE
// begin globalGameSaveCounter := 0 ;
8895: LD_ADDR_EXP 31
8899: PUSH
8900: LD_INT 0
8902: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
8903: LD_STRING setGameSaveCounter(0)
8905: PPUSH
8906: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
8910: LD_STRING initStreamRollete();
8912: PPUSH
8913: CALL_OW 559
// InitStreamMode ;
8917: CALL 10260 0 0
// DefineStreamItems ( false ) ;
8921: LD_INT 0
8923: PPUSH
8924: CALL 10724 0 1
// end ;
8928: END
// export function SOS_MapStart ( ) ; begin
8929: LD_INT 0
8931: PPUSH
// if streamModeActive then
8932: LD_EXP 32
8936: IFFALSE 8945
// DefineStreamItems ( true ) ;
8938: LD_INT 1
8940: PPUSH
8941: CALL 10724 0 1
// UpdateLuaVariables ( ) ;
8945: CALL 8962 0 0
// UpdateFactoryWaypoints ( ) ;
8949: CALL 23593 0 0
// UpdateWarehouseGatheringPoints ( ) ;
8953: CALL 23850 0 0
// end ;
8957: LD_VAR 0 1
8961: RET
// function UpdateLuaVariables ( ) ; begin
8962: LD_INT 0
8964: PPUSH
// if globalGameSaveCounter then
8965: LD_EXP 31
8969: IFFALSE 9003
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
8971: LD_ADDR_EXP 31
8975: PUSH
8976: LD_EXP 31
8980: PPUSH
8981: CALL 68635 0 1
8985: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
8986: LD_STRING setGameSaveCounter(
8988: PUSH
8989: LD_EXP 31
8993: STR
8994: PUSH
8995: LD_STRING )
8997: STR
8998: PPUSH
8999: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
9003: LD_STRING setGameDifficulty(
9005: PUSH
9006: LD_OWVAR 67
9010: STR
9011: PUSH
9012: LD_STRING )
9014: STR
9015: PPUSH
9016: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
9020: LD_STRING displayDifficulty(
9022: PUSH
9023: LD_OWVAR 67
9027: STR
9028: PUSH
9029: LD_STRING )
9031: STR
9032: PPUSH
9033: CALL_OW 559
// end ;
9037: LD_VAR 0 1
9041: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
9042: LD_INT 0
9044: PPUSH
// if p2 = stream_mode then
9045: LD_VAR 0 2
9049: PUSH
9050: LD_INT 100
9052: EQUAL
9053: IFFALSE 10056
// begin if not StreamModeActive then
9055: LD_EXP 32
9059: NOT
9060: IFFALSE 9070
// StreamModeActive := true ;
9062: LD_ADDR_EXP 32
9066: PUSH
9067: LD_INT 1
9069: ST_TO_ADDR
// if p3 = 0 then
9070: LD_VAR 0 3
9074: PUSH
9075: LD_INT 0
9077: EQUAL
9078: IFFALSE 9084
// InitStreamMode ;
9080: CALL 10260 0 0
// if p3 = 1 then
9084: LD_VAR 0 3
9088: PUSH
9089: LD_INT 1
9091: EQUAL
9092: IFFALSE 9102
// sRocket := true ;
9094: LD_ADDR_EXP 37
9098: PUSH
9099: LD_INT 1
9101: ST_TO_ADDR
// if p3 = 2 then
9102: LD_VAR 0 3
9106: PUSH
9107: LD_INT 2
9109: EQUAL
9110: IFFALSE 9120
// sSpeed := true ;
9112: LD_ADDR_EXP 36
9116: PUSH
9117: LD_INT 1
9119: ST_TO_ADDR
// if p3 = 3 then
9120: LD_VAR 0 3
9124: PUSH
9125: LD_INT 3
9127: EQUAL
9128: IFFALSE 9138
// sEngine := true ;
9130: LD_ADDR_EXP 38
9134: PUSH
9135: LD_INT 1
9137: ST_TO_ADDR
// if p3 = 4 then
9138: LD_VAR 0 3
9142: PUSH
9143: LD_INT 4
9145: EQUAL
9146: IFFALSE 9156
// sSpec := true ;
9148: LD_ADDR_EXP 35
9152: PUSH
9153: LD_INT 1
9155: ST_TO_ADDR
// if p3 = 5 then
9156: LD_VAR 0 3
9160: PUSH
9161: LD_INT 5
9163: EQUAL
9164: IFFALSE 9174
// sLevel := true ;
9166: LD_ADDR_EXP 39
9170: PUSH
9171: LD_INT 1
9173: ST_TO_ADDR
// if p3 = 6 then
9174: LD_VAR 0 3
9178: PUSH
9179: LD_INT 6
9181: EQUAL
9182: IFFALSE 9192
// sArmoury := true ;
9184: LD_ADDR_EXP 40
9188: PUSH
9189: LD_INT 1
9191: ST_TO_ADDR
// if p3 = 7 then
9192: LD_VAR 0 3
9196: PUSH
9197: LD_INT 7
9199: EQUAL
9200: IFFALSE 9210
// sRadar := true ;
9202: LD_ADDR_EXP 41
9206: PUSH
9207: LD_INT 1
9209: ST_TO_ADDR
// if p3 = 8 then
9210: LD_VAR 0 3
9214: PUSH
9215: LD_INT 8
9217: EQUAL
9218: IFFALSE 9228
// sBunker := true ;
9220: LD_ADDR_EXP 42
9224: PUSH
9225: LD_INT 1
9227: ST_TO_ADDR
// if p3 = 9 then
9228: LD_VAR 0 3
9232: PUSH
9233: LD_INT 9
9235: EQUAL
9236: IFFALSE 9246
// sHack := true ;
9238: LD_ADDR_EXP 43
9242: PUSH
9243: LD_INT 1
9245: ST_TO_ADDR
// if p3 = 10 then
9246: LD_VAR 0 3
9250: PUSH
9251: LD_INT 10
9253: EQUAL
9254: IFFALSE 9264
// sFire := true ;
9256: LD_ADDR_EXP 44
9260: PUSH
9261: LD_INT 1
9263: ST_TO_ADDR
// if p3 = 11 then
9264: LD_VAR 0 3
9268: PUSH
9269: LD_INT 11
9271: EQUAL
9272: IFFALSE 9282
// sRefresh := true ;
9274: LD_ADDR_EXP 45
9278: PUSH
9279: LD_INT 1
9281: ST_TO_ADDR
// if p3 = 12 then
9282: LD_VAR 0 3
9286: PUSH
9287: LD_INT 12
9289: EQUAL
9290: IFFALSE 9300
// sExp := true ;
9292: LD_ADDR_EXP 46
9296: PUSH
9297: LD_INT 1
9299: ST_TO_ADDR
// if p3 = 13 then
9300: LD_VAR 0 3
9304: PUSH
9305: LD_INT 13
9307: EQUAL
9308: IFFALSE 9318
// sDepot := true ;
9310: LD_ADDR_EXP 47
9314: PUSH
9315: LD_INT 1
9317: ST_TO_ADDR
// if p3 = 14 then
9318: LD_VAR 0 3
9322: PUSH
9323: LD_INT 14
9325: EQUAL
9326: IFFALSE 9336
// sFlag := true ;
9328: LD_ADDR_EXP 48
9332: PUSH
9333: LD_INT 1
9335: ST_TO_ADDR
// if p3 = 15 then
9336: LD_VAR 0 3
9340: PUSH
9341: LD_INT 15
9343: EQUAL
9344: IFFALSE 9354
// sKamikadze := true ;
9346: LD_ADDR_EXP 56
9350: PUSH
9351: LD_INT 1
9353: ST_TO_ADDR
// if p3 = 16 then
9354: LD_VAR 0 3
9358: PUSH
9359: LD_INT 16
9361: EQUAL
9362: IFFALSE 9372
// sTroll := true ;
9364: LD_ADDR_EXP 57
9368: PUSH
9369: LD_INT 1
9371: ST_TO_ADDR
// if p3 = 17 then
9372: LD_VAR 0 3
9376: PUSH
9377: LD_INT 17
9379: EQUAL
9380: IFFALSE 9390
// sSlow := true ;
9382: LD_ADDR_EXP 58
9386: PUSH
9387: LD_INT 1
9389: ST_TO_ADDR
// if p3 = 18 then
9390: LD_VAR 0 3
9394: PUSH
9395: LD_INT 18
9397: EQUAL
9398: IFFALSE 9408
// sLack := true ;
9400: LD_ADDR_EXP 59
9404: PUSH
9405: LD_INT 1
9407: ST_TO_ADDR
// if p3 = 19 then
9408: LD_VAR 0 3
9412: PUSH
9413: LD_INT 19
9415: EQUAL
9416: IFFALSE 9426
// sTank := true ;
9418: LD_ADDR_EXP 61
9422: PUSH
9423: LD_INT 1
9425: ST_TO_ADDR
// if p3 = 20 then
9426: LD_VAR 0 3
9430: PUSH
9431: LD_INT 20
9433: EQUAL
9434: IFFALSE 9444
// sRemote := true ;
9436: LD_ADDR_EXP 62
9440: PUSH
9441: LD_INT 1
9443: ST_TO_ADDR
// if p3 = 21 then
9444: LD_VAR 0 3
9448: PUSH
9449: LD_INT 21
9451: EQUAL
9452: IFFALSE 9462
// sPowell := true ;
9454: LD_ADDR_EXP 63
9458: PUSH
9459: LD_INT 1
9461: ST_TO_ADDR
// if p3 = 22 then
9462: LD_VAR 0 3
9466: PUSH
9467: LD_INT 22
9469: EQUAL
9470: IFFALSE 9480
// sTeleport := true ;
9472: LD_ADDR_EXP 66
9476: PUSH
9477: LD_INT 1
9479: ST_TO_ADDR
// if p3 = 23 then
9480: LD_VAR 0 3
9484: PUSH
9485: LD_INT 23
9487: EQUAL
9488: IFFALSE 9498
// sOilTower := true ;
9490: LD_ADDR_EXP 68
9494: PUSH
9495: LD_INT 1
9497: ST_TO_ADDR
// if p3 = 24 then
9498: LD_VAR 0 3
9502: PUSH
9503: LD_INT 24
9505: EQUAL
9506: IFFALSE 9516
// sShovel := true ;
9508: LD_ADDR_EXP 69
9512: PUSH
9513: LD_INT 1
9515: ST_TO_ADDR
// if p3 = 25 then
9516: LD_VAR 0 3
9520: PUSH
9521: LD_INT 25
9523: EQUAL
9524: IFFALSE 9534
// sSheik := true ;
9526: LD_ADDR_EXP 70
9530: PUSH
9531: LD_INT 1
9533: ST_TO_ADDR
// if p3 = 26 then
9534: LD_VAR 0 3
9538: PUSH
9539: LD_INT 26
9541: EQUAL
9542: IFFALSE 9552
// sEarthquake := true ;
9544: LD_ADDR_EXP 72
9548: PUSH
9549: LD_INT 1
9551: ST_TO_ADDR
// if p3 = 27 then
9552: LD_VAR 0 3
9556: PUSH
9557: LD_INT 27
9559: EQUAL
9560: IFFALSE 9570
// sAI := true ;
9562: LD_ADDR_EXP 73
9566: PUSH
9567: LD_INT 1
9569: ST_TO_ADDR
// if p3 = 28 then
9570: LD_VAR 0 3
9574: PUSH
9575: LD_INT 28
9577: EQUAL
9578: IFFALSE 9588
// sCargo := true ;
9580: LD_ADDR_EXP 76
9584: PUSH
9585: LD_INT 1
9587: ST_TO_ADDR
// if p3 = 29 then
9588: LD_VAR 0 3
9592: PUSH
9593: LD_INT 29
9595: EQUAL
9596: IFFALSE 9606
// sDLaser := true ;
9598: LD_ADDR_EXP 77
9602: PUSH
9603: LD_INT 1
9605: ST_TO_ADDR
// if p3 = 30 then
9606: LD_VAR 0 3
9610: PUSH
9611: LD_INT 30
9613: EQUAL
9614: IFFALSE 9624
// sExchange := true ;
9616: LD_ADDR_EXP 78
9620: PUSH
9621: LD_INT 1
9623: ST_TO_ADDR
// if p3 = 31 then
9624: LD_VAR 0 3
9628: PUSH
9629: LD_INT 31
9631: EQUAL
9632: IFFALSE 9642
// sFac := true ;
9634: LD_ADDR_EXP 79
9638: PUSH
9639: LD_INT 1
9641: ST_TO_ADDR
// if p3 = 32 then
9642: LD_VAR 0 3
9646: PUSH
9647: LD_INT 32
9649: EQUAL
9650: IFFALSE 9660
// sPower := true ;
9652: LD_ADDR_EXP 80
9656: PUSH
9657: LD_INT 1
9659: ST_TO_ADDR
// if p3 = 33 then
9660: LD_VAR 0 3
9664: PUSH
9665: LD_INT 33
9667: EQUAL
9668: IFFALSE 9678
// sRandom := true ;
9670: LD_ADDR_EXP 81
9674: PUSH
9675: LD_INT 1
9677: ST_TO_ADDR
// if p3 = 34 then
9678: LD_VAR 0 3
9682: PUSH
9683: LD_INT 34
9685: EQUAL
9686: IFFALSE 9696
// sShield := true ;
9688: LD_ADDR_EXP 82
9692: PUSH
9693: LD_INT 1
9695: ST_TO_ADDR
// if p3 = 35 then
9696: LD_VAR 0 3
9700: PUSH
9701: LD_INT 35
9703: EQUAL
9704: IFFALSE 9714
// sTime := true ;
9706: LD_ADDR_EXP 83
9710: PUSH
9711: LD_INT 1
9713: ST_TO_ADDR
// if p3 = 36 then
9714: LD_VAR 0 3
9718: PUSH
9719: LD_INT 36
9721: EQUAL
9722: IFFALSE 9732
// sTools := true ;
9724: LD_ADDR_EXP 84
9728: PUSH
9729: LD_INT 1
9731: ST_TO_ADDR
// if p3 = 101 then
9732: LD_VAR 0 3
9736: PUSH
9737: LD_INT 101
9739: EQUAL
9740: IFFALSE 9750
// sSold := true ;
9742: LD_ADDR_EXP 49
9746: PUSH
9747: LD_INT 1
9749: ST_TO_ADDR
// if p3 = 102 then
9750: LD_VAR 0 3
9754: PUSH
9755: LD_INT 102
9757: EQUAL
9758: IFFALSE 9768
// sDiff := true ;
9760: LD_ADDR_EXP 50
9764: PUSH
9765: LD_INT 1
9767: ST_TO_ADDR
// if p3 = 103 then
9768: LD_VAR 0 3
9772: PUSH
9773: LD_INT 103
9775: EQUAL
9776: IFFALSE 9786
// sFog := true ;
9778: LD_ADDR_EXP 53
9782: PUSH
9783: LD_INT 1
9785: ST_TO_ADDR
// if p3 = 104 then
9786: LD_VAR 0 3
9790: PUSH
9791: LD_INT 104
9793: EQUAL
9794: IFFALSE 9804
// sReset := true ;
9796: LD_ADDR_EXP 54
9800: PUSH
9801: LD_INT 1
9803: ST_TO_ADDR
// if p3 = 105 then
9804: LD_VAR 0 3
9808: PUSH
9809: LD_INT 105
9811: EQUAL
9812: IFFALSE 9822
// sSun := true ;
9814: LD_ADDR_EXP 55
9818: PUSH
9819: LD_INT 1
9821: ST_TO_ADDR
// if p3 = 106 then
9822: LD_VAR 0 3
9826: PUSH
9827: LD_INT 106
9829: EQUAL
9830: IFFALSE 9840
// sTiger := true ;
9832: LD_ADDR_EXP 51
9836: PUSH
9837: LD_INT 1
9839: ST_TO_ADDR
// if p3 = 107 then
9840: LD_VAR 0 3
9844: PUSH
9845: LD_INT 107
9847: EQUAL
9848: IFFALSE 9858
// sBomb := true ;
9850: LD_ADDR_EXP 52
9854: PUSH
9855: LD_INT 1
9857: ST_TO_ADDR
// if p3 = 108 then
9858: LD_VAR 0 3
9862: PUSH
9863: LD_INT 108
9865: EQUAL
9866: IFFALSE 9876
// sWound := true ;
9868: LD_ADDR_EXP 60
9872: PUSH
9873: LD_INT 1
9875: ST_TO_ADDR
// if p3 = 109 then
9876: LD_VAR 0 3
9880: PUSH
9881: LD_INT 109
9883: EQUAL
9884: IFFALSE 9894
// sBetray := true ;
9886: LD_ADDR_EXP 64
9890: PUSH
9891: LD_INT 1
9893: ST_TO_ADDR
// if p3 = 110 then
9894: LD_VAR 0 3
9898: PUSH
9899: LD_INT 110
9901: EQUAL
9902: IFFALSE 9912
// sContamin := true ;
9904: LD_ADDR_EXP 65
9908: PUSH
9909: LD_INT 1
9911: ST_TO_ADDR
// if p3 = 111 then
9912: LD_VAR 0 3
9916: PUSH
9917: LD_INT 111
9919: EQUAL
9920: IFFALSE 9930
// sOil := true ;
9922: LD_ADDR_EXP 67
9926: PUSH
9927: LD_INT 1
9929: ST_TO_ADDR
// if p3 = 112 then
9930: LD_VAR 0 3
9934: PUSH
9935: LD_INT 112
9937: EQUAL
9938: IFFALSE 9948
// sStu := true ;
9940: LD_ADDR_EXP 71
9944: PUSH
9945: LD_INT 1
9947: ST_TO_ADDR
// if p3 = 113 then
9948: LD_VAR 0 3
9952: PUSH
9953: LD_INT 113
9955: EQUAL
9956: IFFALSE 9966
// sBazooka := true ;
9958: LD_ADDR_EXP 74
9962: PUSH
9963: LD_INT 1
9965: ST_TO_ADDR
// if p3 = 114 then
9966: LD_VAR 0 3
9970: PUSH
9971: LD_INT 114
9973: EQUAL
9974: IFFALSE 9984
// sMortar := true ;
9976: LD_ADDR_EXP 75
9980: PUSH
9981: LD_INT 1
9983: ST_TO_ADDR
// if p3 = 115 then
9984: LD_VAR 0 3
9988: PUSH
9989: LD_INT 115
9991: EQUAL
9992: IFFALSE 10002
// sRanger := true ;
9994: LD_ADDR_EXP 85
9998: PUSH
9999: LD_INT 1
10001: ST_TO_ADDR
// if p3 = 116 then
10002: LD_VAR 0 3
10006: PUSH
10007: LD_INT 116
10009: EQUAL
10010: IFFALSE 10020
// sComputer := true ;
10012: LD_ADDR_EXP 86
10016: PUSH
10017: LD_INT 1
10019: ST_TO_ADDR
// if p3 = 117 then
10020: LD_VAR 0 3
10024: PUSH
10025: LD_INT 117
10027: EQUAL
10028: IFFALSE 10038
// s30 := true ;
10030: LD_ADDR_EXP 87
10034: PUSH
10035: LD_INT 1
10037: ST_TO_ADDR
// if p3 = 118 then
10038: LD_VAR 0 3
10042: PUSH
10043: LD_INT 118
10045: EQUAL
10046: IFFALSE 10056
// s60 := true ;
10048: LD_ADDR_EXP 88
10052: PUSH
10053: LD_INT 1
10055: ST_TO_ADDR
// end ; if p2 = hack_mode then
10056: LD_VAR 0 2
10060: PUSH
10061: LD_INT 101
10063: EQUAL
10064: IFFALSE 10192
// begin case p3 of 1 :
10066: LD_VAR 0 3
10070: PUSH
10071: LD_INT 1
10073: DOUBLE
10074: EQUAL
10075: IFTRUE 10079
10077: GO 10086
10079: POP
// hHackUnlimitedResources ; 2 :
10080: CALL 22339 0 0
10084: GO 10192
10086: LD_INT 2
10088: DOUBLE
10089: EQUAL
10090: IFTRUE 10094
10092: GO 10101
10094: POP
// hHackSetLevel10 ; 3 :
10095: CALL 22472 0 0
10099: GO 10192
10101: LD_INT 3
10103: DOUBLE
10104: EQUAL
10105: IFTRUE 10109
10107: GO 10116
10109: POP
// hHackSetLevel10YourUnits ; 4 :
10110: CALL 22557 0 0
10114: GO 10192
10116: LD_INT 4
10118: DOUBLE
10119: EQUAL
10120: IFTRUE 10124
10122: GO 10131
10124: POP
// hHackInvincible ; 5 :
10125: CALL 23005 0 0
10129: GO 10192
10131: LD_INT 5
10133: DOUBLE
10134: EQUAL
10135: IFTRUE 10139
10137: GO 10146
10139: POP
// hHackInvisible ; 6 :
10140: CALL 23116 0 0
10144: GO 10192
10146: LD_INT 6
10148: DOUBLE
10149: EQUAL
10150: IFTRUE 10154
10152: GO 10161
10154: POP
// hHackChangeYourSide ; 7 :
10155: CALL 23173 0 0
10159: GO 10192
10161: LD_INT 7
10163: DOUBLE
10164: EQUAL
10165: IFTRUE 10169
10167: GO 10176
10169: POP
// hHackChangeUnitSide ; 8 :
10170: CALL 23215 0 0
10174: GO 10192
10176: LD_INT 8
10178: DOUBLE
10179: EQUAL
10180: IFTRUE 10184
10182: GO 10191
10184: POP
// hHackFog ; end ;
10185: CALL 23316 0 0
10189: GO 10192
10191: POP
// end ; if p2 = game_save_mode then
10192: LD_VAR 0 2
10196: PUSH
10197: LD_INT 102
10199: EQUAL
10200: IFFALSE 10255
// begin if p3 = 1 then
10202: LD_VAR 0 3
10206: PUSH
10207: LD_INT 1
10209: EQUAL
10210: IFFALSE 10222
// globalGameSaveCounter := p4 ;
10212: LD_ADDR_EXP 31
10216: PUSH
10217: LD_VAR 0 4
10221: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
10222: LD_VAR 0 3
10226: PUSH
10227: LD_INT 2
10229: EQUAL
10230: PUSH
10231: LD_EXP 31
10235: AND
10236: IFFALSE 10255
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
10238: LD_STRING setGameSaveCounter(
10240: PUSH
10241: LD_EXP 31
10245: STR
10246: PUSH
10247: LD_STRING )
10249: STR
10250: PPUSH
10251: CALL_OW 559
// end ; end ;
10255: LD_VAR 0 7
10259: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
10260: LD_INT 0
10262: PPUSH
// streamModeActive := false ;
10263: LD_ADDR_EXP 32
10267: PUSH
10268: LD_INT 0
10270: ST_TO_ADDR
// normalCounter := 36 ;
10271: LD_ADDR_EXP 33
10275: PUSH
10276: LD_INT 36
10278: ST_TO_ADDR
// hardcoreCounter := 18 ;
10279: LD_ADDR_EXP 34
10283: PUSH
10284: LD_INT 18
10286: ST_TO_ADDR
// sRocket := false ;
10287: LD_ADDR_EXP 37
10291: PUSH
10292: LD_INT 0
10294: ST_TO_ADDR
// sSpeed := false ;
10295: LD_ADDR_EXP 36
10299: PUSH
10300: LD_INT 0
10302: ST_TO_ADDR
// sEngine := false ;
10303: LD_ADDR_EXP 38
10307: PUSH
10308: LD_INT 0
10310: ST_TO_ADDR
// sSpec := false ;
10311: LD_ADDR_EXP 35
10315: PUSH
10316: LD_INT 0
10318: ST_TO_ADDR
// sLevel := false ;
10319: LD_ADDR_EXP 39
10323: PUSH
10324: LD_INT 0
10326: ST_TO_ADDR
// sArmoury := false ;
10327: LD_ADDR_EXP 40
10331: PUSH
10332: LD_INT 0
10334: ST_TO_ADDR
// sRadar := false ;
10335: LD_ADDR_EXP 41
10339: PUSH
10340: LD_INT 0
10342: ST_TO_ADDR
// sBunker := false ;
10343: LD_ADDR_EXP 42
10347: PUSH
10348: LD_INT 0
10350: ST_TO_ADDR
// sHack := false ;
10351: LD_ADDR_EXP 43
10355: PUSH
10356: LD_INT 0
10358: ST_TO_ADDR
// sFire := false ;
10359: LD_ADDR_EXP 44
10363: PUSH
10364: LD_INT 0
10366: ST_TO_ADDR
// sRefresh := false ;
10367: LD_ADDR_EXP 45
10371: PUSH
10372: LD_INT 0
10374: ST_TO_ADDR
// sExp := false ;
10375: LD_ADDR_EXP 46
10379: PUSH
10380: LD_INT 0
10382: ST_TO_ADDR
// sDepot := false ;
10383: LD_ADDR_EXP 47
10387: PUSH
10388: LD_INT 0
10390: ST_TO_ADDR
// sFlag := false ;
10391: LD_ADDR_EXP 48
10395: PUSH
10396: LD_INT 0
10398: ST_TO_ADDR
// sKamikadze := false ;
10399: LD_ADDR_EXP 56
10403: PUSH
10404: LD_INT 0
10406: ST_TO_ADDR
// sTroll := false ;
10407: LD_ADDR_EXP 57
10411: PUSH
10412: LD_INT 0
10414: ST_TO_ADDR
// sSlow := false ;
10415: LD_ADDR_EXP 58
10419: PUSH
10420: LD_INT 0
10422: ST_TO_ADDR
// sLack := false ;
10423: LD_ADDR_EXP 59
10427: PUSH
10428: LD_INT 0
10430: ST_TO_ADDR
// sTank := false ;
10431: LD_ADDR_EXP 61
10435: PUSH
10436: LD_INT 0
10438: ST_TO_ADDR
// sRemote := false ;
10439: LD_ADDR_EXP 62
10443: PUSH
10444: LD_INT 0
10446: ST_TO_ADDR
// sPowell := false ;
10447: LD_ADDR_EXP 63
10451: PUSH
10452: LD_INT 0
10454: ST_TO_ADDR
// sTeleport := false ;
10455: LD_ADDR_EXP 66
10459: PUSH
10460: LD_INT 0
10462: ST_TO_ADDR
// sOilTower := false ;
10463: LD_ADDR_EXP 68
10467: PUSH
10468: LD_INT 0
10470: ST_TO_ADDR
// sShovel := false ;
10471: LD_ADDR_EXP 69
10475: PUSH
10476: LD_INT 0
10478: ST_TO_ADDR
// sSheik := false ;
10479: LD_ADDR_EXP 70
10483: PUSH
10484: LD_INT 0
10486: ST_TO_ADDR
// sEarthquake := false ;
10487: LD_ADDR_EXP 72
10491: PUSH
10492: LD_INT 0
10494: ST_TO_ADDR
// sAI := false ;
10495: LD_ADDR_EXP 73
10499: PUSH
10500: LD_INT 0
10502: ST_TO_ADDR
// sCargo := false ;
10503: LD_ADDR_EXP 76
10507: PUSH
10508: LD_INT 0
10510: ST_TO_ADDR
// sDLaser := false ;
10511: LD_ADDR_EXP 77
10515: PUSH
10516: LD_INT 0
10518: ST_TO_ADDR
// sExchange := false ;
10519: LD_ADDR_EXP 78
10523: PUSH
10524: LD_INT 0
10526: ST_TO_ADDR
// sFac := false ;
10527: LD_ADDR_EXP 79
10531: PUSH
10532: LD_INT 0
10534: ST_TO_ADDR
// sPower := false ;
10535: LD_ADDR_EXP 80
10539: PUSH
10540: LD_INT 0
10542: ST_TO_ADDR
// sRandom := false ;
10543: LD_ADDR_EXP 81
10547: PUSH
10548: LD_INT 0
10550: ST_TO_ADDR
// sShield := false ;
10551: LD_ADDR_EXP 82
10555: PUSH
10556: LD_INT 0
10558: ST_TO_ADDR
// sTime := false ;
10559: LD_ADDR_EXP 83
10563: PUSH
10564: LD_INT 0
10566: ST_TO_ADDR
// sTools := false ;
10567: LD_ADDR_EXP 84
10571: PUSH
10572: LD_INT 0
10574: ST_TO_ADDR
// sSold := false ;
10575: LD_ADDR_EXP 49
10579: PUSH
10580: LD_INT 0
10582: ST_TO_ADDR
// sDiff := false ;
10583: LD_ADDR_EXP 50
10587: PUSH
10588: LD_INT 0
10590: ST_TO_ADDR
// sFog := false ;
10591: LD_ADDR_EXP 53
10595: PUSH
10596: LD_INT 0
10598: ST_TO_ADDR
// sReset := false ;
10599: LD_ADDR_EXP 54
10603: PUSH
10604: LD_INT 0
10606: ST_TO_ADDR
// sSun := false ;
10607: LD_ADDR_EXP 55
10611: PUSH
10612: LD_INT 0
10614: ST_TO_ADDR
// sTiger := false ;
10615: LD_ADDR_EXP 51
10619: PUSH
10620: LD_INT 0
10622: ST_TO_ADDR
// sBomb := false ;
10623: LD_ADDR_EXP 52
10627: PUSH
10628: LD_INT 0
10630: ST_TO_ADDR
// sWound := false ;
10631: LD_ADDR_EXP 60
10635: PUSH
10636: LD_INT 0
10638: ST_TO_ADDR
// sBetray := false ;
10639: LD_ADDR_EXP 64
10643: PUSH
10644: LD_INT 0
10646: ST_TO_ADDR
// sContamin := false ;
10647: LD_ADDR_EXP 65
10651: PUSH
10652: LD_INT 0
10654: ST_TO_ADDR
// sOil := false ;
10655: LD_ADDR_EXP 67
10659: PUSH
10660: LD_INT 0
10662: ST_TO_ADDR
// sStu := false ;
10663: LD_ADDR_EXP 71
10667: PUSH
10668: LD_INT 0
10670: ST_TO_ADDR
// sBazooka := false ;
10671: LD_ADDR_EXP 74
10675: PUSH
10676: LD_INT 0
10678: ST_TO_ADDR
// sMortar := false ;
10679: LD_ADDR_EXP 75
10683: PUSH
10684: LD_INT 0
10686: ST_TO_ADDR
// sRanger := false ;
10687: LD_ADDR_EXP 85
10691: PUSH
10692: LD_INT 0
10694: ST_TO_ADDR
// sComputer := false ;
10695: LD_ADDR_EXP 86
10699: PUSH
10700: LD_INT 0
10702: ST_TO_ADDR
// s30 := false ;
10703: LD_ADDR_EXP 87
10707: PUSH
10708: LD_INT 0
10710: ST_TO_ADDR
// s60 := false ;
10711: LD_ADDR_EXP 88
10715: PUSH
10716: LD_INT 0
10718: ST_TO_ADDR
// end ;
10719: LD_VAR 0 1
10723: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
10724: LD_INT 0
10726: PPUSH
10727: PPUSH
10728: PPUSH
10729: PPUSH
10730: PPUSH
10731: PPUSH
10732: PPUSH
// result := [ ] ;
10733: LD_ADDR_VAR 0 2
10737: PUSH
10738: EMPTY
10739: ST_TO_ADDR
// if campaign_id = 1 then
10740: LD_OWVAR 69
10744: PUSH
10745: LD_INT 1
10747: EQUAL
10748: IFFALSE 13914
// begin case mission_number of 1 :
10750: LD_OWVAR 70
10754: PUSH
10755: LD_INT 1
10757: DOUBLE
10758: EQUAL
10759: IFTRUE 10763
10761: GO 10839
10763: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
10764: LD_ADDR_VAR 0 2
10768: PUSH
10769: LD_INT 2
10771: PUSH
10772: LD_INT 4
10774: PUSH
10775: LD_INT 11
10777: PUSH
10778: LD_INT 12
10780: PUSH
10781: LD_INT 15
10783: PUSH
10784: LD_INT 16
10786: PUSH
10787: LD_INT 22
10789: PUSH
10790: LD_INT 23
10792: PUSH
10793: LD_INT 26
10795: PUSH
10796: EMPTY
10797: LIST
10798: LIST
10799: LIST
10800: LIST
10801: LIST
10802: LIST
10803: LIST
10804: LIST
10805: LIST
10806: PUSH
10807: LD_INT 101
10809: PUSH
10810: LD_INT 102
10812: PUSH
10813: LD_INT 106
10815: PUSH
10816: LD_INT 116
10818: PUSH
10819: LD_INT 117
10821: PUSH
10822: LD_INT 118
10824: PUSH
10825: EMPTY
10826: LIST
10827: LIST
10828: LIST
10829: LIST
10830: LIST
10831: LIST
10832: PUSH
10833: EMPTY
10834: LIST
10835: LIST
10836: ST_TO_ADDR
10837: GO 13912
10839: LD_INT 2
10841: DOUBLE
10842: EQUAL
10843: IFTRUE 10847
10845: GO 10931
10847: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
10848: LD_ADDR_VAR 0 2
10852: PUSH
10853: LD_INT 2
10855: PUSH
10856: LD_INT 4
10858: PUSH
10859: LD_INT 11
10861: PUSH
10862: LD_INT 12
10864: PUSH
10865: LD_INT 15
10867: PUSH
10868: LD_INT 16
10870: PUSH
10871: LD_INT 22
10873: PUSH
10874: LD_INT 23
10876: PUSH
10877: LD_INT 26
10879: PUSH
10880: EMPTY
10881: LIST
10882: LIST
10883: LIST
10884: LIST
10885: LIST
10886: LIST
10887: LIST
10888: LIST
10889: LIST
10890: PUSH
10891: LD_INT 101
10893: PUSH
10894: LD_INT 102
10896: PUSH
10897: LD_INT 105
10899: PUSH
10900: LD_INT 106
10902: PUSH
10903: LD_INT 108
10905: PUSH
10906: LD_INT 116
10908: PUSH
10909: LD_INT 117
10911: PUSH
10912: LD_INT 118
10914: PUSH
10915: EMPTY
10916: LIST
10917: LIST
10918: LIST
10919: LIST
10920: LIST
10921: LIST
10922: LIST
10923: LIST
10924: PUSH
10925: EMPTY
10926: LIST
10927: LIST
10928: ST_TO_ADDR
10929: GO 13912
10931: LD_INT 3
10933: DOUBLE
10934: EQUAL
10935: IFTRUE 10939
10937: GO 11027
10939: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
10940: LD_ADDR_VAR 0 2
10944: PUSH
10945: LD_INT 2
10947: PUSH
10948: LD_INT 4
10950: PUSH
10951: LD_INT 5
10953: PUSH
10954: LD_INT 11
10956: PUSH
10957: LD_INT 12
10959: PUSH
10960: LD_INT 15
10962: PUSH
10963: LD_INT 16
10965: PUSH
10966: LD_INT 22
10968: PUSH
10969: LD_INT 26
10971: PUSH
10972: LD_INT 36
10974: PUSH
10975: EMPTY
10976: LIST
10977: LIST
10978: LIST
10979: LIST
10980: LIST
10981: LIST
10982: LIST
10983: LIST
10984: LIST
10985: LIST
10986: PUSH
10987: LD_INT 101
10989: PUSH
10990: LD_INT 102
10992: PUSH
10993: LD_INT 105
10995: PUSH
10996: LD_INT 106
10998: PUSH
10999: LD_INT 108
11001: PUSH
11002: LD_INT 116
11004: PUSH
11005: LD_INT 117
11007: PUSH
11008: LD_INT 118
11010: PUSH
11011: EMPTY
11012: LIST
11013: LIST
11014: LIST
11015: LIST
11016: LIST
11017: LIST
11018: LIST
11019: LIST
11020: PUSH
11021: EMPTY
11022: LIST
11023: LIST
11024: ST_TO_ADDR
11025: GO 13912
11027: LD_INT 4
11029: DOUBLE
11030: EQUAL
11031: IFTRUE 11035
11033: GO 11131
11035: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
11036: LD_ADDR_VAR 0 2
11040: PUSH
11041: LD_INT 2
11043: PUSH
11044: LD_INT 4
11046: PUSH
11047: LD_INT 5
11049: PUSH
11050: LD_INT 8
11052: PUSH
11053: LD_INT 11
11055: PUSH
11056: LD_INT 12
11058: PUSH
11059: LD_INT 15
11061: PUSH
11062: LD_INT 16
11064: PUSH
11065: LD_INT 22
11067: PUSH
11068: LD_INT 23
11070: PUSH
11071: LD_INT 26
11073: PUSH
11074: LD_INT 36
11076: PUSH
11077: EMPTY
11078: LIST
11079: LIST
11080: LIST
11081: LIST
11082: LIST
11083: LIST
11084: LIST
11085: LIST
11086: LIST
11087: LIST
11088: LIST
11089: LIST
11090: PUSH
11091: LD_INT 101
11093: PUSH
11094: LD_INT 102
11096: PUSH
11097: LD_INT 105
11099: PUSH
11100: LD_INT 106
11102: PUSH
11103: LD_INT 108
11105: PUSH
11106: LD_INT 116
11108: PUSH
11109: LD_INT 117
11111: PUSH
11112: LD_INT 118
11114: PUSH
11115: EMPTY
11116: LIST
11117: LIST
11118: LIST
11119: LIST
11120: LIST
11121: LIST
11122: LIST
11123: LIST
11124: PUSH
11125: EMPTY
11126: LIST
11127: LIST
11128: ST_TO_ADDR
11129: GO 13912
11131: LD_INT 5
11133: DOUBLE
11134: EQUAL
11135: IFTRUE 11139
11137: GO 11251
11139: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
11140: LD_ADDR_VAR 0 2
11144: PUSH
11145: LD_INT 2
11147: PUSH
11148: LD_INT 4
11150: PUSH
11151: LD_INT 5
11153: PUSH
11154: LD_INT 6
11156: PUSH
11157: LD_INT 8
11159: PUSH
11160: LD_INT 11
11162: PUSH
11163: LD_INT 12
11165: PUSH
11166: LD_INT 15
11168: PUSH
11169: LD_INT 16
11171: PUSH
11172: LD_INT 22
11174: PUSH
11175: LD_INT 23
11177: PUSH
11178: LD_INT 25
11180: PUSH
11181: LD_INT 26
11183: PUSH
11184: LD_INT 36
11186: PUSH
11187: EMPTY
11188: LIST
11189: LIST
11190: LIST
11191: LIST
11192: LIST
11193: LIST
11194: LIST
11195: LIST
11196: LIST
11197: LIST
11198: LIST
11199: LIST
11200: LIST
11201: LIST
11202: PUSH
11203: LD_INT 101
11205: PUSH
11206: LD_INT 102
11208: PUSH
11209: LD_INT 105
11211: PUSH
11212: LD_INT 106
11214: PUSH
11215: LD_INT 108
11217: PUSH
11218: LD_INT 109
11220: PUSH
11221: LD_INT 112
11223: PUSH
11224: LD_INT 116
11226: PUSH
11227: LD_INT 117
11229: PUSH
11230: LD_INT 118
11232: PUSH
11233: EMPTY
11234: LIST
11235: LIST
11236: LIST
11237: LIST
11238: LIST
11239: LIST
11240: LIST
11241: LIST
11242: LIST
11243: LIST
11244: PUSH
11245: EMPTY
11246: LIST
11247: LIST
11248: ST_TO_ADDR
11249: GO 13912
11251: LD_INT 6
11253: DOUBLE
11254: EQUAL
11255: IFTRUE 11259
11257: GO 11391
11259: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
11260: LD_ADDR_VAR 0 2
11264: PUSH
11265: LD_INT 2
11267: PUSH
11268: LD_INT 4
11270: PUSH
11271: LD_INT 5
11273: PUSH
11274: LD_INT 6
11276: PUSH
11277: LD_INT 8
11279: PUSH
11280: LD_INT 11
11282: PUSH
11283: LD_INT 12
11285: PUSH
11286: LD_INT 15
11288: PUSH
11289: LD_INT 16
11291: PUSH
11292: LD_INT 20
11294: PUSH
11295: LD_INT 21
11297: PUSH
11298: LD_INT 22
11300: PUSH
11301: LD_INT 23
11303: PUSH
11304: LD_INT 25
11306: PUSH
11307: LD_INT 26
11309: PUSH
11310: LD_INT 30
11312: PUSH
11313: LD_INT 31
11315: PUSH
11316: LD_INT 32
11318: PUSH
11319: LD_INT 36
11321: PUSH
11322: EMPTY
11323: LIST
11324: LIST
11325: LIST
11326: LIST
11327: LIST
11328: LIST
11329: LIST
11330: LIST
11331: LIST
11332: LIST
11333: LIST
11334: LIST
11335: LIST
11336: LIST
11337: LIST
11338: LIST
11339: LIST
11340: LIST
11341: LIST
11342: PUSH
11343: LD_INT 101
11345: PUSH
11346: LD_INT 102
11348: PUSH
11349: LD_INT 105
11351: PUSH
11352: LD_INT 106
11354: PUSH
11355: LD_INT 108
11357: PUSH
11358: LD_INT 109
11360: PUSH
11361: LD_INT 112
11363: PUSH
11364: LD_INT 116
11366: PUSH
11367: LD_INT 117
11369: PUSH
11370: LD_INT 118
11372: PUSH
11373: EMPTY
11374: LIST
11375: LIST
11376: LIST
11377: LIST
11378: LIST
11379: LIST
11380: LIST
11381: LIST
11382: LIST
11383: LIST
11384: PUSH
11385: EMPTY
11386: LIST
11387: LIST
11388: ST_TO_ADDR
11389: GO 13912
11391: LD_INT 7
11393: DOUBLE
11394: EQUAL
11395: IFTRUE 11399
11397: GO 11511
11399: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
11400: LD_ADDR_VAR 0 2
11404: PUSH
11405: LD_INT 2
11407: PUSH
11408: LD_INT 4
11410: PUSH
11411: LD_INT 5
11413: PUSH
11414: LD_INT 7
11416: PUSH
11417: LD_INT 11
11419: PUSH
11420: LD_INT 12
11422: PUSH
11423: LD_INT 15
11425: PUSH
11426: LD_INT 16
11428: PUSH
11429: LD_INT 20
11431: PUSH
11432: LD_INT 21
11434: PUSH
11435: LD_INT 22
11437: PUSH
11438: LD_INT 23
11440: PUSH
11441: LD_INT 25
11443: PUSH
11444: LD_INT 26
11446: PUSH
11447: EMPTY
11448: LIST
11449: LIST
11450: LIST
11451: LIST
11452: LIST
11453: LIST
11454: LIST
11455: LIST
11456: LIST
11457: LIST
11458: LIST
11459: LIST
11460: LIST
11461: LIST
11462: PUSH
11463: LD_INT 101
11465: PUSH
11466: LD_INT 102
11468: PUSH
11469: LD_INT 103
11471: PUSH
11472: LD_INT 105
11474: PUSH
11475: LD_INT 106
11477: PUSH
11478: LD_INT 108
11480: PUSH
11481: LD_INT 112
11483: PUSH
11484: LD_INT 116
11486: PUSH
11487: LD_INT 117
11489: PUSH
11490: LD_INT 118
11492: PUSH
11493: EMPTY
11494: LIST
11495: LIST
11496: LIST
11497: LIST
11498: LIST
11499: LIST
11500: LIST
11501: LIST
11502: LIST
11503: LIST
11504: PUSH
11505: EMPTY
11506: LIST
11507: LIST
11508: ST_TO_ADDR
11509: GO 13912
11511: LD_INT 8
11513: DOUBLE
11514: EQUAL
11515: IFTRUE 11519
11517: GO 11659
11519: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
11520: LD_ADDR_VAR 0 2
11524: PUSH
11525: LD_INT 2
11527: PUSH
11528: LD_INT 4
11530: PUSH
11531: LD_INT 5
11533: PUSH
11534: LD_INT 6
11536: PUSH
11537: LD_INT 7
11539: PUSH
11540: LD_INT 8
11542: PUSH
11543: LD_INT 11
11545: PUSH
11546: LD_INT 12
11548: PUSH
11549: LD_INT 15
11551: PUSH
11552: LD_INT 16
11554: PUSH
11555: LD_INT 20
11557: PUSH
11558: LD_INT 21
11560: PUSH
11561: LD_INT 22
11563: PUSH
11564: LD_INT 23
11566: PUSH
11567: LD_INT 25
11569: PUSH
11570: LD_INT 26
11572: PUSH
11573: LD_INT 30
11575: PUSH
11576: LD_INT 31
11578: PUSH
11579: LD_INT 32
11581: PUSH
11582: LD_INT 36
11584: PUSH
11585: EMPTY
11586: LIST
11587: LIST
11588: LIST
11589: LIST
11590: LIST
11591: LIST
11592: LIST
11593: LIST
11594: LIST
11595: LIST
11596: LIST
11597: LIST
11598: LIST
11599: LIST
11600: LIST
11601: LIST
11602: LIST
11603: LIST
11604: LIST
11605: LIST
11606: PUSH
11607: LD_INT 101
11609: PUSH
11610: LD_INT 102
11612: PUSH
11613: LD_INT 103
11615: PUSH
11616: LD_INT 105
11618: PUSH
11619: LD_INT 106
11621: PUSH
11622: LD_INT 108
11624: PUSH
11625: LD_INT 109
11627: PUSH
11628: LD_INT 112
11630: PUSH
11631: LD_INT 116
11633: PUSH
11634: LD_INT 117
11636: PUSH
11637: LD_INT 118
11639: PUSH
11640: EMPTY
11641: LIST
11642: LIST
11643: LIST
11644: LIST
11645: LIST
11646: LIST
11647: LIST
11648: LIST
11649: LIST
11650: LIST
11651: LIST
11652: PUSH
11653: EMPTY
11654: LIST
11655: LIST
11656: ST_TO_ADDR
11657: GO 13912
11659: LD_INT 9
11661: DOUBLE
11662: EQUAL
11663: IFTRUE 11667
11665: GO 11815
11667: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
11668: LD_ADDR_VAR 0 2
11672: PUSH
11673: LD_INT 2
11675: PUSH
11676: LD_INT 4
11678: PUSH
11679: LD_INT 5
11681: PUSH
11682: LD_INT 6
11684: PUSH
11685: LD_INT 7
11687: PUSH
11688: LD_INT 8
11690: PUSH
11691: LD_INT 11
11693: PUSH
11694: LD_INT 12
11696: PUSH
11697: LD_INT 15
11699: PUSH
11700: LD_INT 16
11702: PUSH
11703: LD_INT 20
11705: PUSH
11706: LD_INT 21
11708: PUSH
11709: LD_INT 22
11711: PUSH
11712: LD_INT 23
11714: PUSH
11715: LD_INT 25
11717: PUSH
11718: LD_INT 26
11720: PUSH
11721: LD_INT 28
11723: PUSH
11724: LD_INT 30
11726: PUSH
11727: LD_INT 31
11729: PUSH
11730: LD_INT 32
11732: PUSH
11733: LD_INT 36
11735: PUSH
11736: EMPTY
11737: LIST
11738: LIST
11739: LIST
11740: LIST
11741: LIST
11742: LIST
11743: LIST
11744: LIST
11745: LIST
11746: LIST
11747: LIST
11748: LIST
11749: LIST
11750: LIST
11751: LIST
11752: LIST
11753: LIST
11754: LIST
11755: LIST
11756: LIST
11757: LIST
11758: PUSH
11759: LD_INT 101
11761: PUSH
11762: LD_INT 102
11764: PUSH
11765: LD_INT 103
11767: PUSH
11768: LD_INT 105
11770: PUSH
11771: LD_INT 106
11773: PUSH
11774: LD_INT 108
11776: PUSH
11777: LD_INT 109
11779: PUSH
11780: LD_INT 112
11782: PUSH
11783: LD_INT 114
11785: PUSH
11786: LD_INT 116
11788: PUSH
11789: LD_INT 117
11791: PUSH
11792: LD_INT 118
11794: PUSH
11795: EMPTY
11796: LIST
11797: LIST
11798: LIST
11799: LIST
11800: LIST
11801: LIST
11802: LIST
11803: LIST
11804: LIST
11805: LIST
11806: LIST
11807: LIST
11808: PUSH
11809: EMPTY
11810: LIST
11811: LIST
11812: ST_TO_ADDR
11813: GO 13912
11815: LD_INT 10
11817: DOUBLE
11818: EQUAL
11819: IFTRUE 11823
11821: GO 12019
11823: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
11824: LD_ADDR_VAR 0 2
11828: PUSH
11829: LD_INT 2
11831: PUSH
11832: LD_INT 4
11834: PUSH
11835: LD_INT 5
11837: PUSH
11838: LD_INT 6
11840: PUSH
11841: LD_INT 7
11843: PUSH
11844: LD_INT 8
11846: PUSH
11847: LD_INT 9
11849: PUSH
11850: LD_INT 10
11852: PUSH
11853: LD_INT 11
11855: PUSH
11856: LD_INT 12
11858: PUSH
11859: LD_INT 13
11861: PUSH
11862: LD_INT 14
11864: PUSH
11865: LD_INT 15
11867: PUSH
11868: LD_INT 16
11870: PUSH
11871: LD_INT 17
11873: PUSH
11874: LD_INT 18
11876: PUSH
11877: LD_INT 19
11879: PUSH
11880: LD_INT 20
11882: PUSH
11883: LD_INT 21
11885: PUSH
11886: LD_INT 22
11888: PUSH
11889: LD_INT 23
11891: PUSH
11892: LD_INT 24
11894: PUSH
11895: LD_INT 25
11897: PUSH
11898: LD_INT 26
11900: PUSH
11901: LD_INT 28
11903: PUSH
11904: LD_INT 30
11906: PUSH
11907: LD_INT 31
11909: PUSH
11910: LD_INT 32
11912: PUSH
11913: LD_INT 36
11915: PUSH
11916: EMPTY
11917: LIST
11918: LIST
11919: LIST
11920: LIST
11921: LIST
11922: LIST
11923: LIST
11924: LIST
11925: LIST
11926: LIST
11927: LIST
11928: LIST
11929: LIST
11930: LIST
11931: LIST
11932: LIST
11933: LIST
11934: LIST
11935: LIST
11936: LIST
11937: LIST
11938: LIST
11939: LIST
11940: LIST
11941: LIST
11942: LIST
11943: LIST
11944: LIST
11945: LIST
11946: PUSH
11947: LD_INT 101
11949: PUSH
11950: LD_INT 102
11952: PUSH
11953: LD_INT 103
11955: PUSH
11956: LD_INT 104
11958: PUSH
11959: LD_INT 105
11961: PUSH
11962: LD_INT 106
11964: PUSH
11965: LD_INT 107
11967: PUSH
11968: LD_INT 108
11970: PUSH
11971: LD_INT 109
11973: PUSH
11974: LD_INT 110
11976: PUSH
11977: LD_INT 111
11979: PUSH
11980: LD_INT 112
11982: PUSH
11983: LD_INT 114
11985: PUSH
11986: LD_INT 116
11988: PUSH
11989: LD_INT 117
11991: PUSH
11992: LD_INT 118
11994: PUSH
11995: EMPTY
11996: LIST
11997: LIST
11998: LIST
11999: LIST
12000: LIST
12001: LIST
12002: LIST
12003: LIST
12004: LIST
12005: LIST
12006: LIST
12007: LIST
12008: LIST
12009: LIST
12010: LIST
12011: LIST
12012: PUSH
12013: EMPTY
12014: LIST
12015: LIST
12016: ST_TO_ADDR
12017: GO 13912
12019: LD_INT 11
12021: DOUBLE
12022: EQUAL
12023: IFTRUE 12027
12025: GO 12231
12027: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
12028: LD_ADDR_VAR 0 2
12032: PUSH
12033: LD_INT 2
12035: PUSH
12036: LD_INT 3
12038: PUSH
12039: LD_INT 4
12041: PUSH
12042: LD_INT 5
12044: PUSH
12045: LD_INT 6
12047: PUSH
12048: LD_INT 7
12050: PUSH
12051: LD_INT 8
12053: PUSH
12054: LD_INT 9
12056: PUSH
12057: LD_INT 10
12059: PUSH
12060: LD_INT 11
12062: PUSH
12063: LD_INT 12
12065: PUSH
12066: LD_INT 13
12068: PUSH
12069: LD_INT 14
12071: PUSH
12072: LD_INT 15
12074: PUSH
12075: LD_INT 16
12077: PUSH
12078: LD_INT 17
12080: PUSH
12081: LD_INT 18
12083: PUSH
12084: LD_INT 19
12086: PUSH
12087: LD_INT 20
12089: PUSH
12090: LD_INT 21
12092: PUSH
12093: LD_INT 22
12095: PUSH
12096: LD_INT 23
12098: PUSH
12099: LD_INT 24
12101: PUSH
12102: LD_INT 25
12104: PUSH
12105: LD_INT 26
12107: PUSH
12108: LD_INT 28
12110: PUSH
12111: LD_INT 30
12113: PUSH
12114: LD_INT 31
12116: PUSH
12117: LD_INT 32
12119: PUSH
12120: LD_INT 34
12122: PUSH
12123: LD_INT 36
12125: PUSH
12126: EMPTY
12127: LIST
12128: LIST
12129: LIST
12130: LIST
12131: LIST
12132: LIST
12133: LIST
12134: LIST
12135: LIST
12136: LIST
12137: LIST
12138: LIST
12139: LIST
12140: LIST
12141: LIST
12142: LIST
12143: LIST
12144: LIST
12145: LIST
12146: LIST
12147: LIST
12148: LIST
12149: LIST
12150: LIST
12151: LIST
12152: LIST
12153: LIST
12154: LIST
12155: LIST
12156: LIST
12157: LIST
12158: PUSH
12159: LD_INT 101
12161: PUSH
12162: LD_INT 102
12164: PUSH
12165: LD_INT 103
12167: PUSH
12168: LD_INT 104
12170: PUSH
12171: LD_INT 105
12173: PUSH
12174: LD_INT 106
12176: PUSH
12177: LD_INT 107
12179: PUSH
12180: LD_INT 108
12182: PUSH
12183: LD_INT 109
12185: PUSH
12186: LD_INT 110
12188: PUSH
12189: LD_INT 111
12191: PUSH
12192: LD_INT 112
12194: PUSH
12195: LD_INT 114
12197: PUSH
12198: LD_INT 116
12200: PUSH
12201: LD_INT 117
12203: PUSH
12204: LD_INT 118
12206: PUSH
12207: EMPTY
12208: LIST
12209: LIST
12210: LIST
12211: LIST
12212: LIST
12213: LIST
12214: LIST
12215: LIST
12216: LIST
12217: LIST
12218: LIST
12219: LIST
12220: LIST
12221: LIST
12222: LIST
12223: LIST
12224: PUSH
12225: EMPTY
12226: LIST
12227: LIST
12228: ST_TO_ADDR
12229: GO 13912
12231: LD_INT 12
12233: DOUBLE
12234: EQUAL
12235: IFTRUE 12239
12237: GO 12459
12239: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
12240: LD_ADDR_VAR 0 2
12244: PUSH
12245: LD_INT 1
12247: PUSH
12248: LD_INT 2
12250: PUSH
12251: LD_INT 3
12253: PUSH
12254: LD_INT 4
12256: PUSH
12257: LD_INT 5
12259: PUSH
12260: LD_INT 6
12262: PUSH
12263: LD_INT 7
12265: PUSH
12266: LD_INT 8
12268: PUSH
12269: LD_INT 9
12271: PUSH
12272: LD_INT 10
12274: PUSH
12275: LD_INT 11
12277: PUSH
12278: LD_INT 12
12280: PUSH
12281: LD_INT 13
12283: PUSH
12284: LD_INT 14
12286: PUSH
12287: LD_INT 15
12289: PUSH
12290: LD_INT 16
12292: PUSH
12293: LD_INT 17
12295: PUSH
12296: LD_INT 18
12298: PUSH
12299: LD_INT 19
12301: PUSH
12302: LD_INT 20
12304: PUSH
12305: LD_INT 21
12307: PUSH
12308: LD_INT 22
12310: PUSH
12311: LD_INT 23
12313: PUSH
12314: LD_INT 24
12316: PUSH
12317: LD_INT 25
12319: PUSH
12320: LD_INT 26
12322: PUSH
12323: LD_INT 27
12325: PUSH
12326: LD_INT 28
12328: PUSH
12329: LD_INT 30
12331: PUSH
12332: LD_INT 31
12334: PUSH
12335: LD_INT 32
12337: PUSH
12338: LD_INT 33
12340: PUSH
12341: LD_INT 34
12343: PUSH
12344: LD_INT 36
12346: PUSH
12347: EMPTY
12348: LIST
12349: LIST
12350: LIST
12351: LIST
12352: LIST
12353: LIST
12354: LIST
12355: LIST
12356: LIST
12357: LIST
12358: LIST
12359: LIST
12360: LIST
12361: LIST
12362: LIST
12363: LIST
12364: LIST
12365: LIST
12366: LIST
12367: LIST
12368: LIST
12369: LIST
12370: LIST
12371: LIST
12372: LIST
12373: LIST
12374: LIST
12375: LIST
12376: LIST
12377: LIST
12378: LIST
12379: LIST
12380: LIST
12381: LIST
12382: PUSH
12383: LD_INT 101
12385: PUSH
12386: LD_INT 102
12388: PUSH
12389: LD_INT 103
12391: PUSH
12392: LD_INT 104
12394: PUSH
12395: LD_INT 105
12397: PUSH
12398: LD_INT 106
12400: PUSH
12401: LD_INT 107
12403: PUSH
12404: LD_INT 108
12406: PUSH
12407: LD_INT 109
12409: PUSH
12410: LD_INT 110
12412: PUSH
12413: LD_INT 111
12415: PUSH
12416: LD_INT 112
12418: PUSH
12419: LD_INT 113
12421: PUSH
12422: LD_INT 114
12424: PUSH
12425: LD_INT 116
12427: PUSH
12428: LD_INT 117
12430: PUSH
12431: LD_INT 118
12433: PUSH
12434: EMPTY
12435: LIST
12436: LIST
12437: LIST
12438: LIST
12439: LIST
12440: LIST
12441: LIST
12442: LIST
12443: LIST
12444: LIST
12445: LIST
12446: LIST
12447: LIST
12448: LIST
12449: LIST
12450: LIST
12451: LIST
12452: PUSH
12453: EMPTY
12454: LIST
12455: LIST
12456: ST_TO_ADDR
12457: GO 13912
12459: LD_INT 13
12461: DOUBLE
12462: EQUAL
12463: IFTRUE 12467
12465: GO 12675
12467: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
12468: LD_ADDR_VAR 0 2
12472: PUSH
12473: LD_INT 1
12475: PUSH
12476: LD_INT 2
12478: PUSH
12479: LD_INT 3
12481: PUSH
12482: LD_INT 4
12484: PUSH
12485: LD_INT 5
12487: PUSH
12488: LD_INT 8
12490: PUSH
12491: LD_INT 9
12493: PUSH
12494: LD_INT 10
12496: PUSH
12497: LD_INT 11
12499: PUSH
12500: LD_INT 12
12502: PUSH
12503: LD_INT 14
12505: PUSH
12506: LD_INT 15
12508: PUSH
12509: LD_INT 16
12511: PUSH
12512: LD_INT 17
12514: PUSH
12515: LD_INT 18
12517: PUSH
12518: LD_INT 19
12520: PUSH
12521: LD_INT 20
12523: PUSH
12524: LD_INT 21
12526: PUSH
12527: LD_INT 22
12529: PUSH
12530: LD_INT 23
12532: PUSH
12533: LD_INT 24
12535: PUSH
12536: LD_INT 25
12538: PUSH
12539: LD_INT 26
12541: PUSH
12542: LD_INT 27
12544: PUSH
12545: LD_INT 28
12547: PUSH
12548: LD_INT 30
12550: PUSH
12551: LD_INT 31
12553: PUSH
12554: LD_INT 32
12556: PUSH
12557: LD_INT 33
12559: PUSH
12560: LD_INT 34
12562: PUSH
12563: LD_INT 36
12565: PUSH
12566: EMPTY
12567: LIST
12568: LIST
12569: LIST
12570: LIST
12571: LIST
12572: LIST
12573: LIST
12574: LIST
12575: LIST
12576: LIST
12577: LIST
12578: LIST
12579: LIST
12580: LIST
12581: LIST
12582: LIST
12583: LIST
12584: LIST
12585: LIST
12586: LIST
12587: LIST
12588: LIST
12589: LIST
12590: LIST
12591: LIST
12592: LIST
12593: LIST
12594: LIST
12595: LIST
12596: LIST
12597: LIST
12598: PUSH
12599: LD_INT 101
12601: PUSH
12602: LD_INT 102
12604: PUSH
12605: LD_INT 103
12607: PUSH
12608: LD_INT 104
12610: PUSH
12611: LD_INT 105
12613: PUSH
12614: LD_INT 106
12616: PUSH
12617: LD_INT 107
12619: PUSH
12620: LD_INT 108
12622: PUSH
12623: LD_INT 109
12625: PUSH
12626: LD_INT 110
12628: PUSH
12629: LD_INT 111
12631: PUSH
12632: LD_INT 112
12634: PUSH
12635: LD_INT 113
12637: PUSH
12638: LD_INT 114
12640: PUSH
12641: LD_INT 116
12643: PUSH
12644: LD_INT 117
12646: PUSH
12647: LD_INT 118
12649: PUSH
12650: EMPTY
12651: LIST
12652: LIST
12653: LIST
12654: LIST
12655: LIST
12656: LIST
12657: LIST
12658: LIST
12659: LIST
12660: LIST
12661: LIST
12662: LIST
12663: LIST
12664: LIST
12665: LIST
12666: LIST
12667: LIST
12668: PUSH
12669: EMPTY
12670: LIST
12671: LIST
12672: ST_TO_ADDR
12673: GO 13912
12675: LD_INT 14
12677: DOUBLE
12678: EQUAL
12679: IFTRUE 12683
12681: GO 12907
12683: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
12684: LD_ADDR_VAR 0 2
12688: PUSH
12689: LD_INT 1
12691: PUSH
12692: LD_INT 2
12694: PUSH
12695: LD_INT 3
12697: PUSH
12698: LD_INT 4
12700: PUSH
12701: LD_INT 5
12703: PUSH
12704: LD_INT 6
12706: PUSH
12707: LD_INT 7
12709: PUSH
12710: LD_INT 8
12712: PUSH
12713: LD_INT 9
12715: PUSH
12716: LD_INT 10
12718: PUSH
12719: LD_INT 11
12721: PUSH
12722: LD_INT 12
12724: PUSH
12725: LD_INT 13
12727: PUSH
12728: LD_INT 14
12730: PUSH
12731: LD_INT 15
12733: PUSH
12734: LD_INT 16
12736: PUSH
12737: LD_INT 17
12739: PUSH
12740: LD_INT 18
12742: PUSH
12743: LD_INT 19
12745: PUSH
12746: LD_INT 20
12748: PUSH
12749: LD_INT 21
12751: PUSH
12752: LD_INT 22
12754: PUSH
12755: LD_INT 23
12757: PUSH
12758: LD_INT 24
12760: PUSH
12761: LD_INT 25
12763: PUSH
12764: LD_INT 26
12766: PUSH
12767: LD_INT 27
12769: PUSH
12770: LD_INT 28
12772: PUSH
12773: LD_INT 29
12775: PUSH
12776: LD_INT 30
12778: PUSH
12779: LD_INT 31
12781: PUSH
12782: LD_INT 32
12784: PUSH
12785: LD_INT 33
12787: PUSH
12788: LD_INT 34
12790: PUSH
12791: LD_INT 36
12793: PUSH
12794: EMPTY
12795: LIST
12796: LIST
12797: LIST
12798: LIST
12799: LIST
12800: LIST
12801: LIST
12802: LIST
12803: LIST
12804: LIST
12805: LIST
12806: LIST
12807: LIST
12808: LIST
12809: LIST
12810: LIST
12811: LIST
12812: LIST
12813: LIST
12814: LIST
12815: LIST
12816: LIST
12817: LIST
12818: LIST
12819: LIST
12820: LIST
12821: LIST
12822: LIST
12823: LIST
12824: LIST
12825: LIST
12826: LIST
12827: LIST
12828: LIST
12829: LIST
12830: PUSH
12831: LD_INT 101
12833: PUSH
12834: LD_INT 102
12836: PUSH
12837: LD_INT 103
12839: PUSH
12840: LD_INT 104
12842: PUSH
12843: LD_INT 105
12845: PUSH
12846: LD_INT 106
12848: PUSH
12849: LD_INT 107
12851: PUSH
12852: LD_INT 108
12854: PUSH
12855: LD_INT 109
12857: PUSH
12858: LD_INT 110
12860: PUSH
12861: LD_INT 111
12863: PUSH
12864: LD_INT 112
12866: PUSH
12867: LD_INT 113
12869: PUSH
12870: LD_INT 114
12872: PUSH
12873: LD_INT 116
12875: PUSH
12876: LD_INT 117
12878: PUSH
12879: LD_INT 118
12881: PUSH
12882: EMPTY
12883: LIST
12884: LIST
12885: LIST
12886: LIST
12887: LIST
12888: LIST
12889: LIST
12890: LIST
12891: LIST
12892: LIST
12893: LIST
12894: LIST
12895: LIST
12896: LIST
12897: LIST
12898: LIST
12899: LIST
12900: PUSH
12901: EMPTY
12902: LIST
12903: LIST
12904: ST_TO_ADDR
12905: GO 13912
12907: LD_INT 15
12909: DOUBLE
12910: EQUAL
12911: IFTRUE 12915
12913: GO 13139
12915: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
12916: LD_ADDR_VAR 0 2
12920: PUSH
12921: LD_INT 1
12923: PUSH
12924: LD_INT 2
12926: PUSH
12927: LD_INT 3
12929: PUSH
12930: LD_INT 4
12932: PUSH
12933: LD_INT 5
12935: PUSH
12936: LD_INT 6
12938: PUSH
12939: LD_INT 7
12941: PUSH
12942: LD_INT 8
12944: PUSH
12945: LD_INT 9
12947: PUSH
12948: LD_INT 10
12950: PUSH
12951: LD_INT 11
12953: PUSH
12954: LD_INT 12
12956: PUSH
12957: LD_INT 13
12959: PUSH
12960: LD_INT 14
12962: PUSH
12963: LD_INT 15
12965: PUSH
12966: LD_INT 16
12968: PUSH
12969: LD_INT 17
12971: PUSH
12972: LD_INT 18
12974: PUSH
12975: LD_INT 19
12977: PUSH
12978: LD_INT 20
12980: PUSH
12981: LD_INT 21
12983: PUSH
12984: LD_INT 22
12986: PUSH
12987: LD_INT 23
12989: PUSH
12990: LD_INT 24
12992: PUSH
12993: LD_INT 25
12995: PUSH
12996: LD_INT 26
12998: PUSH
12999: LD_INT 27
13001: PUSH
13002: LD_INT 28
13004: PUSH
13005: LD_INT 29
13007: PUSH
13008: LD_INT 30
13010: PUSH
13011: LD_INT 31
13013: PUSH
13014: LD_INT 32
13016: PUSH
13017: LD_INT 33
13019: PUSH
13020: LD_INT 34
13022: PUSH
13023: LD_INT 36
13025: PUSH
13026: EMPTY
13027: LIST
13028: LIST
13029: LIST
13030: LIST
13031: LIST
13032: LIST
13033: LIST
13034: LIST
13035: LIST
13036: LIST
13037: LIST
13038: LIST
13039: LIST
13040: LIST
13041: LIST
13042: LIST
13043: LIST
13044: LIST
13045: LIST
13046: LIST
13047: LIST
13048: LIST
13049: LIST
13050: LIST
13051: LIST
13052: LIST
13053: LIST
13054: LIST
13055: LIST
13056: LIST
13057: LIST
13058: LIST
13059: LIST
13060: LIST
13061: LIST
13062: PUSH
13063: LD_INT 101
13065: PUSH
13066: LD_INT 102
13068: PUSH
13069: LD_INT 103
13071: PUSH
13072: LD_INT 104
13074: PUSH
13075: LD_INT 105
13077: PUSH
13078: LD_INT 106
13080: PUSH
13081: LD_INT 107
13083: PUSH
13084: LD_INT 108
13086: PUSH
13087: LD_INT 109
13089: PUSH
13090: LD_INT 110
13092: PUSH
13093: LD_INT 111
13095: PUSH
13096: LD_INT 112
13098: PUSH
13099: LD_INT 113
13101: PUSH
13102: LD_INT 114
13104: PUSH
13105: LD_INT 116
13107: PUSH
13108: LD_INT 117
13110: PUSH
13111: LD_INT 118
13113: PUSH
13114: EMPTY
13115: LIST
13116: LIST
13117: LIST
13118: LIST
13119: LIST
13120: LIST
13121: LIST
13122: LIST
13123: LIST
13124: LIST
13125: LIST
13126: LIST
13127: LIST
13128: LIST
13129: LIST
13130: LIST
13131: LIST
13132: PUSH
13133: EMPTY
13134: LIST
13135: LIST
13136: ST_TO_ADDR
13137: GO 13912
13139: LD_INT 16
13141: DOUBLE
13142: EQUAL
13143: IFTRUE 13147
13145: GO 13283
13147: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
13148: LD_ADDR_VAR 0 2
13152: PUSH
13153: LD_INT 2
13155: PUSH
13156: LD_INT 4
13158: PUSH
13159: LD_INT 5
13161: PUSH
13162: LD_INT 7
13164: PUSH
13165: LD_INT 11
13167: PUSH
13168: LD_INT 12
13170: PUSH
13171: LD_INT 15
13173: PUSH
13174: LD_INT 16
13176: PUSH
13177: LD_INT 20
13179: PUSH
13180: LD_INT 21
13182: PUSH
13183: LD_INT 22
13185: PUSH
13186: LD_INT 23
13188: PUSH
13189: LD_INT 25
13191: PUSH
13192: LD_INT 26
13194: PUSH
13195: LD_INT 30
13197: PUSH
13198: LD_INT 31
13200: PUSH
13201: LD_INT 32
13203: PUSH
13204: LD_INT 33
13206: PUSH
13207: LD_INT 34
13209: PUSH
13210: EMPTY
13211: LIST
13212: LIST
13213: LIST
13214: LIST
13215: LIST
13216: LIST
13217: LIST
13218: LIST
13219: LIST
13220: LIST
13221: LIST
13222: LIST
13223: LIST
13224: LIST
13225: LIST
13226: LIST
13227: LIST
13228: LIST
13229: LIST
13230: PUSH
13231: LD_INT 101
13233: PUSH
13234: LD_INT 102
13236: PUSH
13237: LD_INT 103
13239: PUSH
13240: LD_INT 106
13242: PUSH
13243: LD_INT 108
13245: PUSH
13246: LD_INT 112
13248: PUSH
13249: LD_INT 113
13251: PUSH
13252: LD_INT 114
13254: PUSH
13255: LD_INT 116
13257: PUSH
13258: LD_INT 117
13260: PUSH
13261: LD_INT 118
13263: PUSH
13264: EMPTY
13265: LIST
13266: LIST
13267: LIST
13268: LIST
13269: LIST
13270: LIST
13271: LIST
13272: LIST
13273: LIST
13274: LIST
13275: LIST
13276: PUSH
13277: EMPTY
13278: LIST
13279: LIST
13280: ST_TO_ADDR
13281: GO 13912
13283: LD_INT 17
13285: DOUBLE
13286: EQUAL
13287: IFTRUE 13291
13289: GO 13515
13291: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
13292: LD_ADDR_VAR 0 2
13296: PUSH
13297: LD_INT 1
13299: PUSH
13300: LD_INT 2
13302: PUSH
13303: LD_INT 3
13305: PUSH
13306: LD_INT 4
13308: PUSH
13309: LD_INT 5
13311: PUSH
13312: LD_INT 6
13314: PUSH
13315: LD_INT 7
13317: PUSH
13318: LD_INT 8
13320: PUSH
13321: LD_INT 9
13323: PUSH
13324: LD_INT 10
13326: PUSH
13327: LD_INT 11
13329: PUSH
13330: LD_INT 12
13332: PUSH
13333: LD_INT 13
13335: PUSH
13336: LD_INT 14
13338: PUSH
13339: LD_INT 15
13341: PUSH
13342: LD_INT 16
13344: PUSH
13345: LD_INT 17
13347: PUSH
13348: LD_INT 18
13350: PUSH
13351: LD_INT 19
13353: PUSH
13354: LD_INT 20
13356: PUSH
13357: LD_INT 21
13359: PUSH
13360: LD_INT 22
13362: PUSH
13363: LD_INT 23
13365: PUSH
13366: LD_INT 24
13368: PUSH
13369: LD_INT 25
13371: PUSH
13372: LD_INT 26
13374: PUSH
13375: LD_INT 27
13377: PUSH
13378: LD_INT 28
13380: PUSH
13381: LD_INT 29
13383: PUSH
13384: LD_INT 30
13386: PUSH
13387: LD_INT 31
13389: PUSH
13390: LD_INT 32
13392: PUSH
13393: LD_INT 33
13395: PUSH
13396: LD_INT 34
13398: PUSH
13399: LD_INT 36
13401: PUSH
13402: EMPTY
13403: LIST
13404: LIST
13405: LIST
13406: LIST
13407: LIST
13408: LIST
13409: LIST
13410: LIST
13411: LIST
13412: LIST
13413: LIST
13414: LIST
13415: LIST
13416: LIST
13417: LIST
13418: LIST
13419: LIST
13420: LIST
13421: LIST
13422: LIST
13423: LIST
13424: LIST
13425: LIST
13426: LIST
13427: LIST
13428: LIST
13429: LIST
13430: LIST
13431: LIST
13432: LIST
13433: LIST
13434: LIST
13435: LIST
13436: LIST
13437: LIST
13438: PUSH
13439: LD_INT 101
13441: PUSH
13442: LD_INT 102
13444: PUSH
13445: LD_INT 103
13447: PUSH
13448: LD_INT 104
13450: PUSH
13451: LD_INT 105
13453: PUSH
13454: LD_INT 106
13456: PUSH
13457: LD_INT 107
13459: PUSH
13460: LD_INT 108
13462: PUSH
13463: LD_INT 109
13465: PUSH
13466: LD_INT 110
13468: PUSH
13469: LD_INT 111
13471: PUSH
13472: LD_INT 112
13474: PUSH
13475: LD_INT 113
13477: PUSH
13478: LD_INT 114
13480: PUSH
13481: LD_INT 116
13483: PUSH
13484: LD_INT 117
13486: PUSH
13487: LD_INT 118
13489: PUSH
13490: EMPTY
13491: LIST
13492: LIST
13493: LIST
13494: LIST
13495: LIST
13496: LIST
13497: LIST
13498: LIST
13499: LIST
13500: LIST
13501: LIST
13502: LIST
13503: LIST
13504: LIST
13505: LIST
13506: LIST
13507: LIST
13508: PUSH
13509: EMPTY
13510: LIST
13511: LIST
13512: ST_TO_ADDR
13513: GO 13912
13515: LD_INT 18
13517: DOUBLE
13518: EQUAL
13519: IFTRUE 13523
13521: GO 13671
13523: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
13524: LD_ADDR_VAR 0 2
13528: PUSH
13529: LD_INT 2
13531: PUSH
13532: LD_INT 4
13534: PUSH
13535: LD_INT 5
13537: PUSH
13538: LD_INT 7
13540: PUSH
13541: LD_INT 11
13543: PUSH
13544: LD_INT 12
13546: PUSH
13547: LD_INT 15
13549: PUSH
13550: LD_INT 16
13552: PUSH
13553: LD_INT 20
13555: PUSH
13556: LD_INT 21
13558: PUSH
13559: LD_INT 22
13561: PUSH
13562: LD_INT 23
13564: PUSH
13565: LD_INT 25
13567: PUSH
13568: LD_INT 26
13570: PUSH
13571: LD_INT 30
13573: PUSH
13574: LD_INT 31
13576: PUSH
13577: LD_INT 32
13579: PUSH
13580: LD_INT 33
13582: PUSH
13583: LD_INT 34
13585: PUSH
13586: LD_INT 35
13588: PUSH
13589: LD_INT 36
13591: PUSH
13592: EMPTY
13593: LIST
13594: LIST
13595: LIST
13596: LIST
13597: LIST
13598: LIST
13599: LIST
13600: LIST
13601: LIST
13602: LIST
13603: LIST
13604: LIST
13605: LIST
13606: LIST
13607: LIST
13608: LIST
13609: LIST
13610: LIST
13611: LIST
13612: LIST
13613: LIST
13614: PUSH
13615: LD_INT 101
13617: PUSH
13618: LD_INT 102
13620: PUSH
13621: LD_INT 103
13623: PUSH
13624: LD_INT 106
13626: PUSH
13627: LD_INT 108
13629: PUSH
13630: LD_INT 112
13632: PUSH
13633: LD_INT 113
13635: PUSH
13636: LD_INT 114
13638: PUSH
13639: LD_INT 115
13641: PUSH
13642: LD_INT 116
13644: PUSH
13645: LD_INT 117
13647: PUSH
13648: LD_INT 118
13650: PUSH
13651: EMPTY
13652: LIST
13653: LIST
13654: LIST
13655: LIST
13656: LIST
13657: LIST
13658: LIST
13659: LIST
13660: LIST
13661: LIST
13662: LIST
13663: LIST
13664: PUSH
13665: EMPTY
13666: LIST
13667: LIST
13668: ST_TO_ADDR
13669: GO 13912
13671: LD_INT 19
13673: DOUBLE
13674: EQUAL
13675: IFTRUE 13679
13677: GO 13911
13679: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
13680: LD_ADDR_VAR 0 2
13684: PUSH
13685: LD_INT 1
13687: PUSH
13688: LD_INT 2
13690: PUSH
13691: LD_INT 3
13693: PUSH
13694: LD_INT 4
13696: PUSH
13697: LD_INT 5
13699: PUSH
13700: LD_INT 6
13702: PUSH
13703: LD_INT 7
13705: PUSH
13706: LD_INT 8
13708: PUSH
13709: LD_INT 9
13711: PUSH
13712: LD_INT 10
13714: PUSH
13715: LD_INT 11
13717: PUSH
13718: LD_INT 12
13720: PUSH
13721: LD_INT 13
13723: PUSH
13724: LD_INT 14
13726: PUSH
13727: LD_INT 15
13729: PUSH
13730: LD_INT 16
13732: PUSH
13733: LD_INT 17
13735: PUSH
13736: LD_INT 18
13738: PUSH
13739: LD_INT 19
13741: PUSH
13742: LD_INT 20
13744: PUSH
13745: LD_INT 21
13747: PUSH
13748: LD_INT 22
13750: PUSH
13751: LD_INT 23
13753: PUSH
13754: LD_INT 24
13756: PUSH
13757: LD_INT 25
13759: PUSH
13760: LD_INT 26
13762: PUSH
13763: LD_INT 27
13765: PUSH
13766: LD_INT 28
13768: PUSH
13769: LD_INT 29
13771: PUSH
13772: LD_INT 30
13774: PUSH
13775: LD_INT 31
13777: PUSH
13778: LD_INT 32
13780: PUSH
13781: LD_INT 33
13783: PUSH
13784: LD_INT 34
13786: PUSH
13787: LD_INT 35
13789: PUSH
13790: LD_INT 36
13792: PUSH
13793: EMPTY
13794: LIST
13795: LIST
13796: LIST
13797: LIST
13798: LIST
13799: LIST
13800: LIST
13801: LIST
13802: LIST
13803: LIST
13804: LIST
13805: LIST
13806: LIST
13807: LIST
13808: LIST
13809: LIST
13810: LIST
13811: LIST
13812: LIST
13813: LIST
13814: LIST
13815: LIST
13816: LIST
13817: LIST
13818: LIST
13819: LIST
13820: LIST
13821: LIST
13822: LIST
13823: LIST
13824: LIST
13825: LIST
13826: LIST
13827: LIST
13828: LIST
13829: LIST
13830: PUSH
13831: LD_INT 101
13833: PUSH
13834: LD_INT 102
13836: PUSH
13837: LD_INT 103
13839: PUSH
13840: LD_INT 104
13842: PUSH
13843: LD_INT 105
13845: PUSH
13846: LD_INT 106
13848: PUSH
13849: LD_INT 107
13851: PUSH
13852: LD_INT 108
13854: PUSH
13855: LD_INT 109
13857: PUSH
13858: LD_INT 110
13860: PUSH
13861: LD_INT 111
13863: PUSH
13864: LD_INT 112
13866: PUSH
13867: LD_INT 113
13869: PUSH
13870: LD_INT 114
13872: PUSH
13873: LD_INT 115
13875: PUSH
13876: LD_INT 116
13878: PUSH
13879: LD_INT 117
13881: PUSH
13882: LD_INT 118
13884: PUSH
13885: EMPTY
13886: LIST
13887: LIST
13888: LIST
13889: LIST
13890: LIST
13891: LIST
13892: LIST
13893: LIST
13894: LIST
13895: LIST
13896: LIST
13897: LIST
13898: LIST
13899: LIST
13900: LIST
13901: LIST
13902: LIST
13903: LIST
13904: PUSH
13905: EMPTY
13906: LIST
13907: LIST
13908: ST_TO_ADDR
13909: GO 13912
13911: POP
// end else
13912: GO 14143
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
13914: LD_ADDR_VAR 0 2
13918: PUSH
13919: LD_INT 1
13921: PUSH
13922: LD_INT 2
13924: PUSH
13925: LD_INT 3
13927: PUSH
13928: LD_INT 4
13930: PUSH
13931: LD_INT 5
13933: PUSH
13934: LD_INT 6
13936: PUSH
13937: LD_INT 7
13939: PUSH
13940: LD_INT 8
13942: PUSH
13943: LD_INT 9
13945: PUSH
13946: LD_INT 10
13948: PUSH
13949: LD_INT 11
13951: PUSH
13952: LD_INT 12
13954: PUSH
13955: LD_INT 13
13957: PUSH
13958: LD_INT 14
13960: PUSH
13961: LD_INT 15
13963: PUSH
13964: LD_INT 16
13966: PUSH
13967: LD_INT 17
13969: PUSH
13970: LD_INT 18
13972: PUSH
13973: LD_INT 19
13975: PUSH
13976: LD_INT 20
13978: PUSH
13979: LD_INT 21
13981: PUSH
13982: LD_INT 22
13984: PUSH
13985: LD_INT 23
13987: PUSH
13988: LD_INT 24
13990: PUSH
13991: LD_INT 25
13993: PUSH
13994: LD_INT 26
13996: PUSH
13997: LD_INT 27
13999: PUSH
14000: LD_INT 28
14002: PUSH
14003: LD_INT 29
14005: PUSH
14006: LD_INT 30
14008: PUSH
14009: LD_INT 31
14011: PUSH
14012: LD_INT 32
14014: PUSH
14015: LD_INT 33
14017: PUSH
14018: LD_INT 34
14020: PUSH
14021: LD_INT 35
14023: PUSH
14024: LD_INT 36
14026: PUSH
14027: EMPTY
14028: LIST
14029: LIST
14030: LIST
14031: LIST
14032: LIST
14033: LIST
14034: LIST
14035: LIST
14036: LIST
14037: LIST
14038: LIST
14039: LIST
14040: LIST
14041: LIST
14042: LIST
14043: LIST
14044: LIST
14045: LIST
14046: LIST
14047: LIST
14048: LIST
14049: LIST
14050: LIST
14051: LIST
14052: LIST
14053: LIST
14054: LIST
14055: LIST
14056: LIST
14057: LIST
14058: LIST
14059: LIST
14060: LIST
14061: LIST
14062: LIST
14063: LIST
14064: PUSH
14065: LD_INT 101
14067: PUSH
14068: LD_INT 102
14070: PUSH
14071: LD_INT 103
14073: PUSH
14074: LD_INT 104
14076: PUSH
14077: LD_INT 105
14079: PUSH
14080: LD_INT 106
14082: PUSH
14083: LD_INT 107
14085: PUSH
14086: LD_INT 108
14088: PUSH
14089: LD_INT 109
14091: PUSH
14092: LD_INT 110
14094: PUSH
14095: LD_INT 111
14097: PUSH
14098: LD_INT 112
14100: PUSH
14101: LD_INT 113
14103: PUSH
14104: LD_INT 114
14106: PUSH
14107: LD_INT 115
14109: PUSH
14110: LD_INT 116
14112: PUSH
14113: LD_INT 117
14115: PUSH
14116: LD_INT 118
14118: PUSH
14119: EMPTY
14120: LIST
14121: LIST
14122: LIST
14123: LIST
14124: LIST
14125: LIST
14126: LIST
14127: LIST
14128: LIST
14129: LIST
14130: LIST
14131: LIST
14132: LIST
14133: LIST
14134: LIST
14135: LIST
14136: LIST
14137: LIST
14138: PUSH
14139: EMPTY
14140: LIST
14141: LIST
14142: ST_TO_ADDR
// if result then
14143: LD_VAR 0 2
14147: IFFALSE 14933
// begin normal :=  ;
14149: LD_ADDR_VAR 0 5
14153: PUSH
14154: LD_STRING 
14156: ST_TO_ADDR
// hardcore :=  ;
14157: LD_ADDR_VAR 0 6
14161: PUSH
14162: LD_STRING 
14164: ST_TO_ADDR
// active :=  ;
14165: LD_ADDR_VAR 0 7
14169: PUSH
14170: LD_STRING 
14172: ST_TO_ADDR
// for i = 1 to normalCounter do
14173: LD_ADDR_VAR 0 8
14177: PUSH
14178: DOUBLE
14179: LD_INT 1
14181: DEC
14182: ST_TO_ADDR
14183: LD_EXP 33
14187: PUSH
14188: FOR_TO
14189: IFFALSE 14290
// begin tmp := 0 ;
14191: LD_ADDR_VAR 0 3
14195: PUSH
14196: LD_STRING 0
14198: ST_TO_ADDR
// if result [ 1 ] then
14199: LD_VAR 0 2
14203: PUSH
14204: LD_INT 1
14206: ARRAY
14207: IFFALSE 14272
// if result [ 1 ] [ 1 ] = i then
14209: LD_VAR 0 2
14213: PUSH
14214: LD_INT 1
14216: ARRAY
14217: PUSH
14218: LD_INT 1
14220: ARRAY
14221: PUSH
14222: LD_VAR 0 8
14226: EQUAL
14227: IFFALSE 14272
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
14229: LD_ADDR_VAR 0 2
14233: PUSH
14234: LD_VAR 0 2
14238: PPUSH
14239: LD_INT 1
14241: PPUSH
14242: LD_VAR 0 2
14246: PUSH
14247: LD_INT 1
14249: ARRAY
14250: PPUSH
14251: LD_INT 1
14253: PPUSH
14254: CALL_OW 3
14258: PPUSH
14259: CALL_OW 1
14263: ST_TO_ADDR
// tmp := 1 ;
14264: LD_ADDR_VAR 0 3
14268: PUSH
14269: LD_STRING 1
14271: ST_TO_ADDR
// end ; normal := normal & tmp ;
14272: LD_ADDR_VAR 0 5
14276: PUSH
14277: LD_VAR 0 5
14281: PUSH
14282: LD_VAR 0 3
14286: STR
14287: ST_TO_ADDR
// end ;
14288: GO 14188
14290: POP
14291: POP
// for i = 1 to hardcoreCounter do
14292: LD_ADDR_VAR 0 8
14296: PUSH
14297: DOUBLE
14298: LD_INT 1
14300: DEC
14301: ST_TO_ADDR
14302: LD_EXP 34
14306: PUSH
14307: FOR_TO
14308: IFFALSE 14413
// begin tmp := 0 ;
14310: LD_ADDR_VAR 0 3
14314: PUSH
14315: LD_STRING 0
14317: ST_TO_ADDR
// if result [ 2 ] then
14318: LD_VAR 0 2
14322: PUSH
14323: LD_INT 2
14325: ARRAY
14326: IFFALSE 14395
// if result [ 2 ] [ 1 ] = 100 + i then
14328: LD_VAR 0 2
14332: PUSH
14333: LD_INT 2
14335: ARRAY
14336: PUSH
14337: LD_INT 1
14339: ARRAY
14340: PUSH
14341: LD_INT 100
14343: PUSH
14344: LD_VAR 0 8
14348: PLUS
14349: EQUAL
14350: IFFALSE 14395
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
14352: LD_ADDR_VAR 0 2
14356: PUSH
14357: LD_VAR 0 2
14361: PPUSH
14362: LD_INT 2
14364: PPUSH
14365: LD_VAR 0 2
14369: PUSH
14370: LD_INT 2
14372: ARRAY
14373: PPUSH
14374: LD_INT 1
14376: PPUSH
14377: CALL_OW 3
14381: PPUSH
14382: CALL_OW 1
14386: ST_TO_ADDR
// tmp := 1 ;
14387: LD_ADDR_VAR 0 3
14391: PUSH
14392: LD_STRING 1
14394: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
14395: LD_ADDR_VAR 0 6
14399: PUSH
14400: LD_VAR 0 6
14404: PUSH
14405: LD_VAR 0 3
14409: STR
14410: ST_TO_ADDR
// end ;
14411: GO 14307
14413: POP
14414: POP
// if isGameLoad then
14415: LD_VAR 0 1
14419: IFFALSE 14894
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
14421: LD_ADDR_VAR 0 4
14425: PUSH
14426: LD_EXP 37
14430: PUSH
14431: LD_EXP 36
14435: PUSH
14436: LD_EXP 38
14440: PUSH
14441: LD_EXP 35
14445: PUSH
14446: LD_EXP 39
14450: PUSH
14451: LD_EXP 40
14455: PUSH
14456: LD_EXP 41
14460: PUSH
14461: LD_EXP 42
14465: PUSH
14466: LD_EXP 43
14470: PUSH
14471: LD_EXP 44
14475: PUSH
14476: LD_EXP 45
14480: PUSH
14481: LD_EXP 46
14485: PUSH
14486: LD_EXP 47
14490: PUSH
14491: LD_EXP 48
14495: PUSH
14496: LD_EXP 56
14500: PUSH
14501: LD_EXP 57
14505: PUSH
14506: LD_EXP 58
14510: PUSH
14511: LD_EXP 59
14515: PUSH
14516: LD_EXP 61
14520: PUSH
14521: LD_EXP 62
14525: PUSH
14526: LD_EXP 63
14530: PUSH
14531: LD_EXP 66
14535: PUSH
14536: LD_EXP 68
14540: PUSH
14541: LD_EXP 69
14545: PUSH
14546: LD_EXP 70
14550: PUSH
14551: LD_EXP 72
14555: PUSH
14556: LD_EXP 73
14560: PUSH
14561: LD_EXP 76
14565: PUSH
14566: LD_EXP 77
14570: PUSH
14571: LD_EXP 78
14575: PUSH
14576: LD_EXP 79
14580: PUSH
14581: LD_EXP 80
14585: PUSH
14586: LD_EXP 81
14590: PUSH
14591: LD_EXP 82
14595: PUSH
14596: LD_EXP 83
14600: PUSH
14601: LD_EXP 84
14605: PUSH
14606: LD_EXP 49
14610: PUSH
14611: LD_EXP 50
14615: PUSH
14616: LD_EXP 53
14620: PUSH
14621: LD_EXP 54
14625: PUSH
14626: LD_EXP 55
14630: PUSH
14631: LD_EXP 51
14635: PUSH
14636: LD_EXP 52
14640: PUSH
14641: LD_EXP 60
14645: PUSH
14646: LD_EXP 64
14650: PUSH
14651: LD_EXP 65
14655: PUSH
14656: LD_EXP 67
14660: PUSH
14661: LD_EXP 71
14665: PUSH
14666: LD_EXP 74
14670: PUSH
14671: LD_EXP 75
14675: PUSH
14676: LD_EXP 85
14680: PUSH
14681: LD_EXP 86
14685: PUSH
14686: LD_EXP 87
14690: PUSH
14691: LD_EXP 88
14695: PUSH
14696: EMPTY
14697: LIST
14698: LIST
14699: LIST
14700: LIST
14701: LIST
14702: LIST
14703: LIST
14704: LIST
14705: LIST
14706: LIST
14707: LIST
14708: LIST
14709: LIST
14710: LIST
14711: LIST
14712: LIST
14713: LIST
14714: LIST
14715: LIST
14716: LIST
14717: LIST
14718: LIST
14719: LIST
14720: LIST
14721: LIST
14722: LIST
14723: LIST
14724: LIST
14725: LIST
14726: LIST
14727: LIST
14728: LIST
14729: LIST
14730: LIST
14731: LIST
14732: LIST
14733: LIST
14734: LIST
14735: LIST
14736: LIST
14737: LIST
14738: LIST
14739: LIST
14740: LIST
14741: LIST
14742: LIST
14743: LIST
14744: LIST
14745: LIST
14746: LIST
14747: LIST
14748: LIST
14749: LIST
14750: LIST
14751: ST_TO_ADDR
// tmp :=  ;
14752: LD_ADDR_VAR 0 3
14756: PUSH
14757: LD_STRING 
14759: ST_TO_ADDR
// for i = 1 to normalCounter do
14760: LD_ADDR_VAR 0 8
14764: PUSH
14765: DOUBLE
14766: LD_INT 1
14768: DEC
14769: ST_TO_ADDR
14770: LD_EXP 33
14774: PUSH
14775: FOR_TO
14776: IFFALSE 14812
// begin if flags [ i ] then
14778: LD_VAR 0 4
14782: PUSH
14783: LD_VAR 0 8
14787: ARRAY
14788: IFFALSE 14810
// tmp := tmp & i & ; ;
14790: LD_ADDR_VAR 0 3
14794: PUSH
14795: LD_VAR 0 3
14799: PUSH
14800: LD_VAR 0 8
14804: STR
14805: PUSH
14806: LD_STRING ;
14808: STR
14809: ST_TO_ADDR
// end ;
14810: GO 14775
14812: POP
14813: POP
// for i = 1 to hardcoreCounter do
14814: LD_ADDR_VAR 0 8
14818: PUSH
14819: DOUBLE
14820: LD_INT 1
14822: DEC
14823: ST_TO_ADDR
14824: LD_EXP 34
14828: PUSH
14829: FOR_TO
14830: IFFALSE 14876
// begin if flags [ normalCounter + i ] then
14832: LD_VAR 0 4
14836: PUSH
14837: LD_EXP 33
14841: PUSH
14842: LD_VAR 0 8
14846: PLUS
14847: ARRAY
14848: IFFALSE 14874
// tmp := tmp & ( 100 + i ) & ; ;
14850: LD_ADDR_VAR 0 3
14854: PUSH
14855: LD_VAR 0 3
14859: PUSH
14860: LD_INT 100
14862: PUSH
14863: LD_VAR 0 8
14867: PLUS
14868: STR
14869: PUSH
14870: LD_STRING ;
14872: STR
14873: ST_TO_ADDR
// end ;
14874: GO 14829
14876: POP
14877: POP
// if tmp then
14878: LD_VAR 0 3
14882: IFFALSE 14894
// active := tmp ;
14884: LD_ADDR_VAR 0 7
14888: PUSH
14889: LD_VAR 0 3
14893: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
14894: LD_STRING getStreamItemsFromMission("
14896: PUSH
14897: LD_VAR 0 5
14901: STR
14902: PUSH
14903: LD_STRING ","
14905: STR
14906: PUSH
14907: LD_VAR 0 6
14911: STR
14912: PUSH
14913: LD_STRING ","
14915: STR
14916: PUSH
14917: LD_VAR 0 7
14921: STR
14922: PUSH
14923: LD_STRING ")
14925: STR
14926: PPUSH
14927: CALL_OW 559
// end else
14931: GO 14940
// ToLua ( getStreamItemsFromMission("","","") ) ;
14933: LD_STRING getStreamItemsFromMission("","","")
14935: PPUSH
14936: CALL_OW 559
// end ;
14940: LD_VAR 0 2
14944: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
14945: LD_EXP 32
14949: PUSH
14950: LD_EXP 37
14954: AND
14955: IFFALSE 15079
14957: GO 14959
14959: DISABLE
14960: LD_INT 0
14962: PPUSH
14963: PPUSH
// begin enable ;
14964: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
14965: LD_ADDR_VAR 0 2
14969: PUSH
14970: LD_INT 22
14972: PUSH
14973: LD_OWVAR 2
14977: PUSH
14978: EMPTY
14979: LIST
14980: LIST
14981: PUSH
14982: LD_INT 2
14984: PUSH
14985: LD_INT 34
14987: PUSH
14988: LD_INT 7
14990: PUSH
14991: EMPTY
14992: LIST
14993: LIST
14994: PUSH
14995: LD_INT 34
14997: PUSH
14998: LD_INT 45
15000: PUSH
15001: EMPTY
15002: LIST
15003: LIST
15004: PUSH
15005: LD_INT 34
15007: PUSH
15008: LD_INT 28
15010: PUSH
15011: EMPTY
15012: LIST
15013: LIST
15014: PUSH
15015: LD_INT 34
15017: PUSH
15018: LD_INT 47
15020: PUSH
15021: EMPTY
15022: LIST
15023: LIST
15024: PUSH
15025: EMPTY
15026: LIST
15027: LIST
15028: LIST
15029: LIST
15030: LIST
15031: PUSH
15032: EMPTY
15033: LIST
15034: LIST
15035: PPUSH
15036: CALL_OW 69
15040: ST_TO_ADDR
// if not tmp then
15041: LD_VAR 0 2
15045: NOT
15046: IFFALSE 15050
// exit ;
15048: GO 15079
// for i in tmp do
15050: LD_ADDR_VAR 0 1
15054: PUSH
15055: LD_VAR 0 2
15059: PUSH
15060: FOR_IN
15061: IFFALSE 15077
// begin SetLives ( i , 0 ) ;
15063: LD_VAR 0 1
15067: PPUSH
15068: LD_INT 0
15070: PPUSH
15071: CALL_OW 234
// end ;
15075: GO 15060
15077: POP
15078: POP
// end ;
15079: PPOPN 2
15081: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
15082: LD_EXP 32
15086: PUSH
15087: LD_EXP 38
15091: AND
15092: IFFALSE 15176
15094: GO 15096
15096: DISABLE
15097: LD_INT 0
15099: PPUSH
15100: PPUSH
// begin enable ;
15101: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
15102: LD_ADDR_VAR 0 2
15106: PUSH
15107: LD_INT 22
15109: PUSH
15110: LD_OWVAR 2
15114: PUSH
15115: EMPTY
15116: LIST
15117: LIST
15118: PUSH
15119: LD_INT 32
15121: PUSH
15122: LD_INT 3
15124: PUSH
15125: EMPTY
15126: LIST
15127: LIST
15128: PUSH
15129: EMPTY
15130: LIST
15131: LIST
15132: PPUSH
15133: CALL_OW 69
15137: ST_TO_ADDR
// if not tmp then
15138: LD_VAR 0 2
15142: NOT
15143: IFFALSE 15147
// exit ;
15145: GO 15176
// for i in tmp do
15147: LD_ADDR_VAR 0 1
15151: PUSH
15152: LD_VAR 0 2
15156: PUSH
15157: FOR_IN
15158: IFFALSE 15174
// begin SetLives ( i , 0 ) ;
15160: LD_VAR 0 1
15164: PPUSH
15165: LD_INT 0
15167: PPUSH
15168: CALL_OW 234
// end ;
15172: GO 15157
15174: POP
15175: POP
// end ;
15176: PPOPN 2
15178: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
15179: LD_EXP 32
15183: PUSH
15184: LD_EXP 35
15188: AND
15189: IFFALSE 15282
15191: GO 15193
15193: DISABLE
15194: LD_INT 0
15196: PPUSH
// begin enable ;
15197: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
15198: LD_ADDR_VAR 0 1
15202: PUSH
15203: LD_INT 22
15205: PUSH
15206: LD_OWVAR 2
15210: PUSH
15211: EMPTY
15212: LIST
15213: LIST
15214: PUSH
15215: LD_INT 2
15217: PUSH
15218: LD_INT 25
15220: PUSH
15221: LD_INT 5
15223: PUSH
15224: EMPTY
15225: LIST
15226: LIST
15227: PUSH
15228: LD_INT 25
15230: PUSH
15231: LD_INT 9
15233: PUSH
15234: EMPTY
15235: LIST
15236: LIST
15237: PUSH
15238: LD_INT 25
15240: PUSH
15241: LD_INT 8
15243: PUSH
15244: EMPTY
15245: LIST
15246: LIST
15247: PUSH
15248: EMPTY
15249: LIST
15250: LIST
15251: LIST
15252: LIST
15253: PUSH
15254: EMPTY
15255: LIST
15256: LIST
15257: PPUSH
15258: CALL_OW 69
15262: PUSH
15263: FOR_IN
15264: IFFALSE 15280
// begin SetClass ( i , 1 ) ;
15266: LD_VAR 0 1
15270: PPUSH
15271: LD_INT 1
15273: PPUSH
15274: CALL_OW 336
// end ;
15278: GO 15263
15280: POP
15281: POP
// end ;
15282: PPOPN 1
15284: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
15285: LD_EXP 32
15289: PUSH
15290: LD_EXP 36
15294: AND
15295: PUSH
15296: LD_OWVAR 65
15300: PUSH
15301: LD_INT 7
15303: LESS
15304: AND
15305: IFFALSE 15319
15307: GO 15309
15309: DISABLE
// begin enable ;
15310: ENABLE
// game_speed := 7 ;
15311: LD_ADDR_OWVAR 65
15315: PUSH
15316: LD_INT 7
15318: ST_TO_ADDR
// end ;
15319: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
15320: LD_EXP 32
15324: PUSH
15325: LD_EXP 39
15329: AND
15330: IFFALSE 15532
15332: GO 15334
15334: DISABLE
15335: LD_INT 0
15337: PPUSH
15338: PPUSH
15339: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
15340: LD_ADDR_VAR 0 3
15344: PUSH
15345: LD_INT 81
15347: PUSH
15348: LD_OWVAR 2
15352: PUSH
15353: EMPTY
15354: LIST
15355: LIST
15356: PUSH
15357: LD_INT 21
15359: PUSH
15360: LD_INT 1
15362: PUSH
15363: EMPTY
15364: LIST
15365: LIST
15366: PUSH
15367: EMPTY
15368: LIST
15369: LIST
15370: PPUSH
15371: CALL_OW 69
15375: ST_TO_ADDR
// if not tmp then
15376: LD_VAR 0 3
15380: NOT
15381: IFFALSE 15385
// exit ;
15383: GO 15532
// if tmp > 5 then
15385: LD_VAR 0 3
15389: PUSH
15390: LD_INT 5
15392: GREATER
15393: IFFALSE 15405
// k := 5 else
15395: LD_ADDR_VAR 0 2
15399: PUSH
15400: LD_INT 5
15402: ST_TO_ADDR
15403: GO 15415
// k := tmp ;
15405: LD_ADDR_VAR 0 2
15409: PUSH
15410: LD_VAR 0 3
15414: ST_TO_ADDR
// for i := 1 to k do
15415: LD_ADDR_VAR 0 1
15419: PUSH
15420: DOUBLE
15421: LD_INT 1
15423: DEC
15424: ST_TO_ADDR
15425: LD_VAR 0 2
15429: PUSH
15430: FOR_TO
15431: IFFALSE 15530
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
15433: LD_VAR 0 3
15437: PUSH
15438: LD_VAR 0 1
15442: ARRAY
15443: PPUSH
15444: LD_VAR 0 1
15448: PUSH
15449: LD_INT 4
15451: MOD
15452: PUSH
15453: LD_INT 1
15455: PLUS
15456: PPUSH
15457: CALL_OW 259
15461: PUSH
15462: LD_INT 10
15464: LESS
15465: IFFALSE 15528
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
15467: LD_VAR 0 3
15471: PUSH
15472: LD_VAR 0 1
15476: ARRAY
15477: PPUSH
15478: LD_VAR 0 1
15482: PUSH
15483: LD_INT 4
15485: MOD
15486: PUSH
15487: LD_INT 1
15489: PLUS
15490: PPUSH
15491: LD_VAR 0 3
15495: PUSH
15496: LD_VAR 0 1
15500: ARRAY
15501: PPUSH
15502: LD_VAR 0 1
15506: PUSH
15507: LD_INT 4
15509: MOD
15510: PUSH
15511: LD_INT 1
15513: PLUS
15514: PPUSH
15515: CALL_OW 259
15519: PUSH
15520: LD_INT 1
15522: PLUS
15523: PPUSH
15524: CALL_OW 237
15528: GO 15430
15530: POP
15531: POP
// end ;
15532: PPOPN 3
15534: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
15535: LD_EXP 32
15539: PUSH
15540: LD_EXP 40
15544: AND
15545: IFFALSE 15565
15547: GO 15549
15549: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
15550: LD_INT 4
15552: PPUSH
15553: LD_OWVAR 2
15557: PPUSH
15558: LD_INT 0
15560: PPUSH
15561: CALL_OW 324
15565: END
// every 0 0$1 trigger StreamModeActive and sShovel do
15566: LD_EXP 32
15570: PUSH
15571: LD_EXP 69
15575: AND
15576: IFFALSE 15596
15578: GO 15580
15580: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
15581: LD_INT 19
15583: PPUSH
15584: LD_OWVAR 2
15588: PPUSH
15589: LD_INT 0
15591: PPUSH
15592: CALL_OW 324
15596: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
15597: LD_EXP 32
15601: PUSH
15602: LD_EXP 41
15606: AND
15607: IFFALSE 15709
15609: GO 15611
15611: DISABLE
15612: LD_INT 0
15614: PPUSH
15615: PPUSH
// begin enable ;
15616: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
15617: LD_ADDR_VAR 0 2
15621: PUSH
15622: LD_INT 22
15624: PUSH
15625: LD_OWVAR 2
15629: PUSH
15630: EMPTY
15631: LIST
15632: LIST
15633: PUSH
15634: LD_INT 2
15636: PUSH
15637: LD_INT 34
15639: PUSH
15640: LD_INT 11
15642: PUSH
15643: EMPTY
15644: LIST
15645: LIST
15646: PUSH
15647: LD_INT 34
15649: PUSH
15650: LD_INT 30
15652: PUSH
15653: EMPTY
15654: LIST
15655: LIST
15656: PUSH
15657: EMPTY
15658: LIST
15659: LIST
15660: LIST
15661: PUSH
15662: EMPTY
15663: LIST
15664: LIST
15665: PPUSH
15666: CALL_OW 69
15670: ST_TO_ADDR
// if not tmp then
15671: LD_VAR 0 2
15675: NOT
15676: IFFALSE 15680
// exit ;
15678: GO 15709
// for i in tmp do
15680: LD_ADDR_VAR 0 1
15684: PUSH
15685: LD_VAR 0 2
15689: PUSH
15690: FOR_IN
15691: IFFALSE 15707
// begin SetLives ( i , 0 ) ;
15693: LD_VAR 0 1
15697: PPUSH
15698: LD_INT 0
15700: PPUSH
15701: CALL_OW 234
// end ;
15705: GO 15690
15707: POP
15708: POP
// end ;
15709: PPOPN 2
15711: END
// every 0 0$1 trigger StreamModeActive and sBunker do
15712: LD_EXP 32
15716: PUSH
15717: LD_EXP 42
15721: AND
15722: IFFALSE 15742
15724: GO 15726
15726: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
15727: LD_INT 32
15729: PPUSH
15730: LD_OWVAR 2
15734: PPUSH
15735: LD_INT 0
15737: PPUSH
15738: CALL_OW 324
15742: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
15743: LD_EXP 32
15747: PUSH
15748: LD_EXP 43
15752: AND
15753: IFFALSE 15934
15755: GO 15757
15757: DISABLE
15758: LD_INT 0
15760: PPUSH
15761: PPUSH
15762: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
15763: LD_ADDR_VAR 0 2
15767: PUSH
15768: LD_INT 22
15770: PUSH
15771: LD_OWVAR 2
15775: PUSH
15776: EMPTY
15777: LIST
15778: LIST
15779: PUSH
15780: LD_INT 33
15782: PUSH
15783: LD_INT 3
15785: PUSH
15786: EMPTY
15787: LIST
15788: LIST
15789: PUSH
15790: EMPTY
15791: LIST
15792: LIST
15793: PPUSH
15794: CALL_OW 69
15798: ST_TO_ADDR
// if not tmp then
15799: LD_VAR 0 2
15803: NOT
15804: IFFALSE 15808
// exit ;
15806: GO 15934
// side := 0 ;
15808: LD_ADDR_VAR 0 3
15812: PUSH
15813: LD_INT 0
15815: ST_TO_ADDR
// for i := 1 to 8 do
15816: LD_ADDR_VAR 0 1
15820: PUSH
15821: DOUBLE
15822: LD_INT 1
15824: DEC
15825: ST_TO_ADDR
15826: LD_INT 8
15828: PUSH
15829: FOR_TO
15830: IFFALSE 15878
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
15832: LD_OWVAR 2
15836: PUSH
15837: LD_VAR 0 1
15841: NONEQUAL
15842: PUSH
15843: LD_OWVAR 2
15847: PPUSH
15848: LD_VAR 0 1
15852: PPUSH
15853: CALL_OW 81
15857: PUSH
15858: LD_INT 2
15860: EQUAL
15861: AND
15862: IFFALSE 15876
// begin side := i ;
15864: LD_ADDR_VAR 0 3
15868: PUSH
15869: LD_VAR 0 1
15873: ST_TO_ADDR
// break ;
15874: GO 15878
// end ;
15876: GO 15829
15878: POP
15879: POP
// if not side then
15880: LD_VAR 0 3
15884: NOT
15885: IFFALSE 15889
// exit ;
15887: GO 15934
// for i := 1 to tmp do
15889: LD_ADDR_VAR 0 1
15893: PUSH
15894: DOUBLE
15895: LD_INT 1
15897: DEC
15898: ST_TO_ADDR
15899: LD_VAR 0 2
15903: PUSH
15904: FOR_TO
15905: IFFALSE 15932
// if Prob ( 60 ) then
15907: LD_INT 60
15909: PPUSH
15910: CALL_OW 13
15914: IFFALSE 15930
// SetSide ( i , side ) ;
15916: LD_VAR 0 1
15920: PPUSH
15921: LD_VAR 0 3
15925: PPUSH
15926: CALL_OW 235
15930: GO 15904
15932: POP
15933: POP
// end ;
15934: PPOPN 3
15936: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
15937: LD_EXP 32
15941: PUSH
15942: LD_EXP 45
15946: AND
15947: IFFALSE 16066
15949: GO 15951
15951: DISABLE
15952: LD_INT 0
15954: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
15955: LD_ADDR_VAR 0 1
15959: PUSH
15960: LD_INT 22
15962: PUSH
15963: LD_OWVAR 2
15967: PUSH
15968: EMPTY
15969: LIST
15970: LIST
15971: PUSH
15972: LD_INT 21
15974: PUSH
15975: LD_INT 1
15977: PUSH
15978: EMPTY
15979: LIST
15980: LIST
15981: PUSH
15982: LD_INT 3
15984: PUSH
15985: LD_INT 23
15987: PUSH
15988: LD_INT 0
15990: PUSH
15991: EMPTY
15992: LIST
15993: LIST
15994: PUSH
15995: EMPTY
15996: LIST
15997: LIST
15998: PUSH
15999: EMPTY
16000: LIST
16001: LIST
16002: LIST
16003: PPUSH
16004: CALL_OW 69
16008: PUSH
16009: FOR_IN
16010: IFFALSE 16064
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
16012: LD_VAR 0 1
16016: PPUSH
16017: CALL_OW 257
16021: PUSH
16022: LD_INT 1
16024: PUSH
16025: LD_INT 2
16027: PUSH
16028: LD_INT 3
16030: PUSH
16031: LD_INT 4
16033: PUSH
16034: EMPTY
16035: LIST
16036: LIST
16037: LIST
16038: LIST
16039: IN
16040: IFFALSE 16062
// SetClass ( un , rand ( 1 , 4 ) ) ;
16042: LD_VAR 0 1
16046: PPUSH
16047: LD_INT 1
16049: PPUSH
16050: LD_INT 4
16052: PPUSH
16053: CALL_OW 12
16057: PPUSH
16058: CALL_OW 336
16062: GO 16009
16064: POP
16065: POP
// end ;
16066: PPOPN 1
16068: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
16069: LD_EXP 32
16073: PUSH
16074: LD_EXP 44
16078: AND
16079: IFFALSE 16158
16081: GO 16083
16083: DISABLE
16084: LD_INT 0
16086: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
16087: LD_ADDR_VAR 0 1
16091: PUSH
16092: LD_INT 22
16094: PUSH
16095: LD_OWVAR 2
16099: PUSH
16100: EMPTY
16101: LIST
16102: LIST
16103: PUSH
16104: LD_INT 21
16106: PUSH
16107: LD_INT 3
16109: PUSH
16110: EMPTY
16111: LIST
16112: LIST
16113: PUSH
16114: EMPTY
16115: LIST
16116: LIST
16117: PPUSH
16118: CALL_OW 69
16122: ST_TO_ADDR
// if not tmp then
16123: LD_VAR 0 1
16127: NOT
16128: IFFALSE 16132
// exit ;
16130: GO 16158
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
16132: LD_VAR 0 1
16136: PUSH
16137: LD_INT 1
16139: PPUSH
16140: LD_VAR 0 1
16144: PPUSH
16145: CALL_OW 12
16149: ARRAY
16150: PPUSH
16151: LD_INT 100
16153: PPUSH
16154: CALL_OW 234
// end ;
16158: PPOPN 1
16160: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
16161: LD_EXP 32
16165: PUSH
16166: LD_EXP 46
16170: AND
16171: IFFALSE 16269
16173: GO 16175
16175: DISABLE
16176: LD_INT 0
16178: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
16179: LD_ADDR_VAR 0 1
16183: PUSH
16184: LD_INT 22
16186: PUSH
16187: LD_OWVAR 2
16191: PUSH
16192: EMPTY
16193: LIST
16194: LIST
16195: PUSH
16196: LD_INT 21
16198: PUSH
16199: LD_INT 1
16201: PUSH
16202: EMPTY
16203: LIST
16204: LIST
16205: PUSH
16206: EMPTY
16207: LIST
16208: LIST
16209: PPUSH
16210: CALL_OW 69
16214: ST_TO_ADDR
// if not tmp then
16215: LD_VAR 0 1
16219: NOT
16220: IFFALSE 16224
// exit ;
16222: GO 16269
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
16224: LD_VAR 0 1
16228: PUSH
16229: LD_INT 1
16231: PPUSH
16232: LD_VAR 0 1
16236: PPUSH
16237: CALL_OW 12
16241: ARRAY
16242: PPUSH
16243: LD_INT 1
16245: PPUSH
16246: LD_INT 4
16248: PPUSH
16249: CALL_OW 12
16253: PPUSH
16254: LD_INT 3000
16256: PPUSH
16257: LD_INT 9000
16259: PPUSH
16260: CALL_OW 12
16264: PPUSH
16265: CALL_OW 492
// end ;
16269: PPOPN 1
16271: END
// every 0 0$1 trigger StreamModeActive and sDepot do
16272: LD_EXP 32
16276: PUSH
16277: LD_EXP 47
16281: AND
16282: IFFALSE 16302
16284: GO 16286
16286: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
16287: LD_INT 1
16289: PPUSH
16290: LD_OWVAR 2
16294: PPUSH
16295: LD_INT 0
16297: PPUSH
16298: CALL_OW 324
16302: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
16303: LD_EXP 32
16307: PUSH
16308: LD_EXP 48
16312: AND
16313: IFFALSE 16396
16315: GO 16317
16317: DISABLE
16318: LD_INT 0
16320: PPUSH
16321: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
16322: LD_ADDR_VAR 0 2
16326: PUSH
16327: LD_INT 22
16329: PUSH
16330: LD_OWVAR 2
16334: PUSH
16335: EMPTY
16336: LIST
16337: LIST
16338: PUSH
16339: LD_INT 21
16341: PUSH
16342: LD_INT 3
16344: PUSH
16345: EMPTY
16346: LIST
16347: LIST
16348: PUSH
16349: EMPTY
16350: LIST
16351: LIST
16352: PPUSH
16353: CALL_OW 69
16357: ST_TO_ADDR
// if not tmp then
16358: LD_VAR 0 2
16362: NOT
16363: IFFALSE 16367
// exit ;
16365: GO 16396
// for i in tmp do
16367: LD_ADDR_VAR 0 1
16371: PUSH
16372: LD_VAR 0 2
16376: PUSH
16377: FOR_IN
16378: IFFALSE 16394
// SetBLevel ( i , 10 ) ;
16380: LD_VAR 0 1
16384: PPUSH
16385: LD_INT 10
16387: PPUSH
16388: CALL_OW 241
16392: GO 16377
16394: POP
16395: POP
// end ;
16396: PPOPN 2
16398: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
16399: LD_EXP 32
16403: PUSH
16404: LD_EXP 49
16408: AND
16409: IFFALSE 16520
16411: GO 16413
16413: DISABLE
16414: LD_INT 0
16416: PPUSH
16417: PPUSH
16418: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
16419: LD_ADDR_VAR 0 3
16423: PUSH
16424: LD_INT 22
16426: PUSH
16427: LD_OWVAR 2
16431: PUSH
16432: EMPTY
16433: LIST
16434: LIST
16435: PUSH
16436: LD_INT 25
16438: PUSH
16439: LD_INT 1
16441: PUSH
16442: EMPTY
16443: LIST
16444: LIST
16445: PUSH
16446: EMPTY
16447: LIST
16448: LIST
16449: PPUSH
16450: CALL_OW 69
16454: ST_TO_ADDR
// if not tmp then
16455: LD_VAR 0 3
16459: NOT
16460: IFFALSE 16464
// exit ;
16462: GO 16520
// un := tmp [ rand ( 1 , tmp ) ] ;
16464: LD_ADDR_VAR 0 2
16468: PUSH
16469: LD_VAR 0 3
16473: PUSH
16474: LD_INT 1
16476: PPUSH
16477: LD_VAR 0 3
16481: PPUSH
16482: CALL_OW 12
16486: ARRAY
16487: ST_TO_ADDR
// if Crawls ( un ) then
16488: LD_VAR 0 2
16492: PPUSH
16493: CALL_OW 318
16497: IFFALSE 16508
// ComWalk ( un ) ;
16499: LD_VAR 0 2
16503: PPUSH
16504: CALL_OW 138
// SetClass ( un , class_sniper ) ;
16508: LD_VAR 0 2
16512: PPUSH
16513: LD_INT 5
16515: PPUSH
16516: CALL_OW 336
// end ;
16520: PPOPN 3
16522: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
16523: LD_EXP 32
16527: PUSH
16528: LD_EXP 50
16532: AND
16533: PUSH
16534: LD_OWVAR 67
16538: PUSH
16539: LD_INT 4
16541: LESS
16542: AND
16543: IFFALSE 16562
16545: GO 16547
16547: DISABLE
// begin Difficulty := Difficulty + 1 ;
16548: LD_ADDR_OWVAR 67
16552: PUSH
16553: LD_OWVAR 67
16557: PUSH
16558: LD_INT 1
16560: PLUS
16561: ST_TO_ADDR
// end ;
16562: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
16563: LD_EXP 32
16567: PUSH
16568: LD_EXP 51
16572: AND
16573: IFFALSE 16676
16575: GO 16577
16577: DISABLE
16578: LD_INT 0
16580: PPUSH
// begin for i := 1 to 5 do
16581: LD_ADDR_VAR 0 1
16585: PUSH
16586: DOUBLE
16587: LD_INT 1
16589: DEC
16590: ST_TO_ADDR
16591: LD_INT 5
16593: PUSH
16594: FOR_TO
16595: IFFALSE 16674
// begin uc_nation := nation_nature ;
16597: LD_ADDR_OWVAR 21
16601: PUSH
16602: LD_INT 0
16604: ST_TO_ADDR
// uc_side := 0 ;
16605: LD_ADDR_OWVAR 20
16609: PUSH
16610: LD_INT 0
16612: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
16613: LD_ADDR_OWVAR 29
16617: PUSH
16618: LD_INT 12
16620: PUSH
16621: LD_INT 12
16623: PUSH
16624: EMPTY
16625: LIST
16626: LIST
16627: ST_TO_ADDR
// hc_agressivity := 20 ;
16628: LD_ADDR_OWVAR 35
16632: PUSH
16633: LD_INT 20
16635: ST_TO_ADDR
// hc_class := class_tiger ;
16636: LD_ADDR_OWVAR 28
16640: PUSH
16641: LD_INT 14
16643: ST_TO_ADDR
// hc_gallery :=  ;
16644: LD_ADDR_OWVAR 33
16648: PUSH
16649: LD_STRING 
16651: ST_TO_ADDR
// hc_name :=  ;
16652: LD_ADDR_OWVAR 26
16656: PUSH
16657: LD_STRING 
16659: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
16660: CALL_OW 44
16664: PPUSH
16665: LD_INT 0
16667: PPUSH
16668: CALL_OW 51
// end ;
16672: GO 16594
16674: POP
16675: POP
// end ;
16676: PPOPN 1
16678: END
// every 0 0$1 trigger StreamModeActive and sBomb do
16679: LD_EXP 32
16683: PUSH
16684: LD_EXP 52
16688: AND
16689: IFFALSE 16698
16691: GO 16693
16693: DISABLE
// StreamSibBomb ;
16694: CALL 16699 0 0
16698: END
// export function StreamSibBomb ; var i , x , y ; begin
16699: LD_INT 0
16701: PPUSH
16702: PPUSH
16703: PPUSH
16704: PPUSH
// result := false ;
16705: LD_ADDR_VAR 0 1
16709: PUSH
16710: LD_INT 0
16712: ST_TO_ADDR
// for i := 1 to 16 do
16713: LD_ADDR_VAR 0 2
16717: PUSH
16718: DOUBLE
16719: LD_INT 1
16721: DEC
16722: ST_TO_ADDR
16723: LD_INT 16
16725: PUSH
16726: FOR_TO
16727: IFFALSE 16926
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
16729: LD_ADDR_VAR 0 3
16733: PUSH
16734: LD_INT 10
16736: PUSH
16737: LD_INT 20
16739: PUSH
16740: LD_INT 30
16742: PUSH
16743: LD_INT 40
16745: PUSH
16746: LD_INT 50
16748: PUSH
16749: LD_INT 60
16751: PUSH
16752: LD_INT 70
16754: PUSH
16755: LD_INT 80
16757: PUSH
16758: LD_INT 90
16760: PUSH
16761: LD_INT 100
16763: PUSH
16764: LD_INT 110
16766: PUSH
16767: LD_INT 120
16769: PUSH
16770: LD_INT 130
16772: PUSH
16773: LD_INT 140
16775: PUSH
16776: LD_INT 150
16778: PUSH
16779: EMPTY
16780: LIST
16781: LIST
16782: LIST
16783: LIST
16784: LIST
16785: LIST
16786: LIST
16787: LIST
16788: LIST
16789: LIST
16790: LIST
16791: LIST
16792: LIST
16793: LIST
16794: LIST
16795: PUSH
16796: LD_INT 1
16798: PPUSH
16799: LD_INT 15
16801: PPUSH
16802: CALL_OW 12
16806: ARRAY
16807: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
16808: LD_ADDR_VAR 0 4
16812: PUSH
16813: LD_INT 10
16815: PUSH
16816: LD_INT 20
16818: PUSH
16819: LD_INT 30
16821: PUSH
16822: LD_INT 40
16824: PUSH
16825: LD_INT 50
16827: PUSH
16828: LD_INT 60
16830: PUSH
16831: LD_INT 70
16833: PUSH
16834: LD_INT 80
16836: PUSH
16837: LD_INT 90
16839: PUSH
16840: LD_INT 100
16842: PUSH
16843: LD_INT 110
16845: PUSH
16846: LD_INT 120
16848: PUSH
16849: LD_INT 130
16851: PUSH
16852: LD_INT 140
16854: PUSH
16855: LD_INT 150
16857: PUSH
16858: EMPTY
16859: LIST
16860: LIST
16861: LIST
16862: LIST
16863: LIST
16864: LIST
16865: LIST
16866: LIST
16867: LIST
16868: LIST
16869: LIST
16870: LIST
16871: LIST
16872: LIST
16873: LIST
16874: PUSH
16875: LD_INT 1
16877: PPUSH
16878: LD_INT 15
16880: PPUSH
16881: CALL_OW 12
16885: ARRAY
16886: ST_TO_ADDR
// if ValidHex ( x , y ) then
16887: LD_VAR 0 3
16891: PPUSH
16892: LD_VAR 0 4
16896: PPUSH
16897: CALL_OW 488
16901: IFFALSE 16924
// begin result := [ x , y ] ;
16903: LD_ADDR_VAR 0 1
16907: PUSH
16908: LD_VAR 0 3
16912: PUSH
16913: LD_VAR 0 4
16917: PUSH
16918: EMPTY
16919: LIST
16920: LIST
16921: ST_TO_ADDR
// break ;
16922: GO 16926
// end ; end ;
16924: GO 16726
16926: POP
16927: POP
// if result then
16928: LD_VAR 0 1
16932: IFFALSE 16992
// begin ToLua ( playSibBomb() ) ;
16934: LD_STRING playSibBomb()
16936: PPUSH
16937: CALL_OW 559
// wait ( 0 0$14 ) ;
16941: LD_INT 490
16943: PPUSH
16944: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
16948: LD_VAR 0 1
16952: PUSH
16953: LD_INT 1
16955: ARRAY
16956: PPUSH
16957: LD_VAR 0 1
16961: PUSH
16962: LD_INT 2
16964: ARRAY
16965: PPUSH
16966: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
16970: LD_VAR 0 1
16974: PUSH
16975: LD_INT 1
16977: ARRAY
16978: PPUSH
16979: LD_VAR 0 1
16983: PUSH
16984: LD_INT 2
16986: ARRAY
16987: PPUSH
16988: CALL_OW 429
// end ; end ;
16992: LD_VAR 0 1
16996: RET
// every 0 0$1 trigger StreamModeActive and sReset do
16997: LD_EXP 32
17001: PUSH
17002: LD_EXP 54
17006: AND
17007: IFFALSE 17019
17009: GO 17011
17011: DISABLE
// YouLost (  ) ;
17012: LD_STRING 
17014: PPUSH
17015: CALL_OW 104
17019: END
// every 0 0$1 trigger StreamModeActive and sFog do
17020: LD_EXP 32
17024: PUSH
17025: LD_EXP 53
17029: AND
17030: IFFALSE 17044
17032: GO 17034
17034: DISABLE
// FogOff ( your_side ) ;
17035: LD_OWVAR 2
17039: PPUSH
17040: CALL_OW 344
17044: END
// every 0 0$1 trigger StreamModeActive and sSun do
17045: LD_EXP 32
17049: PUSH
17050: LD_EXP 55
17054: AND
17055: IFFALSE 17083
17057: GO 17059
17059: DISABLE
// begin solar_recharge_percent := 0 ;
17060: LD_ADDR_OWVAR 79
17064: PUSH
17065: LD_INT 0
17067: ST_TO_ADDR
// wait ( 5 5$00 ) ;
17068: LD_INT 10500
17070: PPUSH
17071: CALL_OW 67
// solar_recharge_percent := 100 ;
17075: LD_ADDR_OWVAR 79
17079: PUSH
17080: LD_INT 100
17082: ST_TO_ADDR
// end ;
17083: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
17084: LD_EXP 32
17088: PUSH
17089: LD_EXP 56
17093: AND
17094: IFFALSE 17333
17096: GO 17098
17098: DISABLE
17099: LD_INT 0
17101: PPUSH
17102: PPUSH
17103: PPUSH
// begin tmp := [ ] ;
17104: LD_ADDR_VAR 0 3
17108: PUSH
17109: EMPTY
17110: ST_TO_ADDR
// for i := 1 to 6 do
17111: LD_ADDR_VAR 0 1
17115: PUSH
17116: DOUBLE
17117: LD_INT 1
17119: DEC
17120: ST_TO_ADDR
17121: LD_INT 6
17123: PUSH
17124: FOR_TO
17125: IFFALSE 17230
// begin uc_nation := nation_nature ;
17127: LD_ADDR_OWVAR 21
17131: PUSH
17132: LD_INT 0
17134: ST_TO_ADDR
// uc_side := 0 ;
17135: LD_ADDR_OWVAR 20
17139: PUSH
17140: LD_INT 0
17142: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
17143: LD_ADDR_OWVAR 29
17147: PUSH
17148: LD_INT 12
17150: PUSH
17151: LD_INT 12
17153: PUSH
17154: EMPTY
17155: LIST
17156: LIST
17157: ST_TO_ADDR
// hc_agressivity := 20 ;
17158: LD_ADDR_OWVAR 35
17162: PUSH
17163: LD_INT 20
17165: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
17166: LD_ADDR_OWVAR 28
17170: PUSH
17171: LD_INT 17
17173: ST_TO_ADDR
// hc_gallery :=  ;
17174: LD_ADDR_OWVAR 33
17178: PUSH
17179: LD_STRING 
17181: ST_TO_ADDR
// hc_name :=  ;
17182: LD_ADDR_OWVAR 26
17186: PUSH
17187: LD_STRING 
17189: ST_TO_ADDR
// un := CreateHuman ;
17190: LD_ADDR_VAR 0 2
17194: PUSH
17195: CALL_OW 44
17199: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
17200: LD_VAR 0 2
17204: PPUSH
17205: LD_INT 1
17207: PPUSH
17208: CALL_OW 51
// tmp := tmp ^ un ;
17212: LD_ADDR_VAR 0 3
17216: PUSH
17217: LD_VAR 0 3
17221: PUSH
17222: LD_VAR 0 2
17226: ADD
17227: ST_TO_ADDR
// end ;
17228: GO 17124
17230: POP
17231: POP
// repeat wait ( 0 0$1 ) ;
17232: LD_INT 35
17234: PPUSH
17235: CALL_OW 67
// for un in tmp do
17239: LD_ADDR_VAR 0 2
17243: PUSH
17244: LD_VAR 0 3
17248: PUSH
17249: FOR_IN
17250: IFFALSE 17324
// begin if IsDead ( un ) then
17252: LD_VAR 0 2
17256: PPUSH
17257: CALL_OW 301
17261: IFFALSE 17281
// begin tmp := tmp diff un ;
17263: LD_ADDR_VAR 0 3
17267: PUSH
17268: LD_VAR 0 3
17272: PUSH
17273: LD_VAR 0 2
17277: DIFF
17278: ST_TO_ADDR
// continue ;
17279: GO 17249
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
17281: LD_VAR 0 2
17285: PPUSH
17286: LD_INT 3
17288: PUSH
17289: LD_INT 22
17291: PUSH
17292: LD_INT 0
17294: PUSH
17295: EMPTY
17296: LIST
17297: LIST
17298: PUSH
17299: EMPTY
17300: LIST
17301: LIST
17302: PPUSH
17303: CALL_OW 69
17307: PPUSH
17308: LD_VAR 0 2
17312: PPUSH
17313: CALL_OW 74
17317: PPUSH
17318: CALL_OW 115
// end ;
17322: GO 17249
17324: POP
17325: POP
// until not tmp ;
17326: LD_VAR 0 3
17330: NOT
17331: IFFALSE 17232
// end ;
17333: PPOPN 3
17335: END
// every 0 0$1 trigger StreamModeActive and sTroll do
17336: LD_EXP 32
17340: PUSH
17341: LD_EXP 57
17345: AND
17346: IFFALSE 17400
17348: GO 17350
17350: DISABLE
// begin ToLua ( displayTroll(); ) ;
17351: LD_STRING displayTroll();
17353: PPUSH
17354: CALL_OW 559
// wait ( 3 3$00 ) ;
17358: LD_INT 6300
17360: PPUSH
17361: CALL_OW 67
// ToLua ( hideTroll(); ) ;
17365: LD_STRING hideTroll();
17367: PPUSH
17368: CALL_OW 559
// wait ( 1 1$00 ) ;
17372: LD_INT 2100
17374: PPUSH
17375: CALL_OW 67
// ToLua ( displayTroll(); ) ;
17379: LD_STRING displayTroll();
17381: PPUSH
17382: CALL_OW 559
// wait ( 1 1$00 ) ;
17386: LD_INT 2100
17388: PPUSH
17389: CALL_OW 67
// ToLua ( hideTroll(); ) ;
17393: LD_STRING hideTroll();
17395: PPUSH
17396: CALL_OW 559
// end ;
17400: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
17401: LD_EXP 32
17405: PUSH
17406: LD_EXP 58
17410: AND
17411: IFFALSE 17474
17413: GO 17415
17415: DISABLE
17416: LD_INT 0
17418: PPUSH
// begin p := 0 ;
17419: LD_ADDR_VAR 0 1
17423: PUSH
17424: LD_INT 0
17426: ST_TO_ADDR
// repeat game_speed := 1 ;
17427: LD_ADDR_OWVAR 65
17431: PUSH
17432: LD_INT 1
17434: ST_TO_ADDR
// wait ( 0 0$1 ) ;
17435: LD_INT 35
17437: PPUSH
17438: CALL_OW 67
// p := p + 1 ;
17442: LD_ADDR_VAR 0 1
17446: PUSH
17447: LD_VAR 0 1
17451: PUSH
17452: LD_INT 1
17454: PLUS
17455: ST_TO_ADDR
// until p >= 60 ;
17456: LD_VAR 0 1
17460: PUSH
17461: LD_INT 60
17463: GREATEREQUAL
17464: IFFALSE 17427
// game_speed := 4 ;
17466: LD_ADDR_OWVAR 65
17470: PUSH
17471: LD_INT 4
17473: ST_TO_ADDR
// end ;
17474: PPOPN 1
17476: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
17477: LD_EXP 32
17481: PUSH
17482: LD_EXP 59
17486: AND
17487: IFFALSE 17633
17489: GO 17491
17491: DISABLE
17492: LD_INT 0
17494: PPUSH
17495: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
17496: LD_ADDR_VAR 0 1
17500: PUSH
17501: LD_INT 22
17503: PUSH
17504: LD_OWVAR 2
17508: PUSH
17509: EMPTY
17510: LIST
17511: LIST
17512: PUSH
17513: LD_INT 2
17515: PUSH
17516: LD_INT 30
17518: PUSH
17519: LD_INT 0
17521: PUSH
17522: EMPTY
17523: LIST
17524: LIST
17525: PUSH
17526: LD_INT 30
17528: PUSH
17529: LD_INT 1
17531: PUSH
17532: EMPTY
17533: LIST
17534: LIST
17535: PUSH
17536: EMPTY
17537: LIST
17538: LIST
17539: LIST
17540: PUSH
17541: EMPTY
17542: LIST
17543: LIST
17544: PPUSH
17545: CALL_OW 69
17549: ST_TO_ADDR
// if not depot then
17550: LD_VAR 0 1
17554: NOT
17555: IFFALSE 17559
// exit ;
17557: GO 17633
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
17559: LD_ADDR_VAR 0 2
17563: PUSH
17564: LD_VAR 0 1
17568: PUSH
17569: LD_INT 1
17571: PPUSH
17572: LD_VAR 0 1
17576: PPUSH
17577: CALL_OW 12
17581: ARRAY
17582: PPUSH
17583: CALL_OW 274
17587: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
17588: LD_VAR 0 2
17592: PPUSH
17593: LD_INT 1
17595: PPUSH
17596: LD_INT 0
17598: PPUSH
17599: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
17603: LD_VAR 0 2
17607: PPUSH
17608: LD_INT 2
17610: PPUSH
17611: LD_INT 0
17613: PPUSH
17614: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
17618: LD_VAR 0 2
17622: PPUSH
17623: LD_INT 3
17625: PPUSH
17626: LD_INT 0
17628: PPUSH
17629: CALL_OW 277
// end ;
17633: PPOPN 2
17635: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
17636: LD_EXP 32
17640: PUSH
17641: LD_EXP 60
17645: AND
17646: IFFALSE 17743
17648: GO 17650
17650: DISABLE
17651: LD_INT 0
17653: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
17654: LD_ADDR_VAR 0 1
17658: PUSH
17659: LD_INT 22
17661: PUSH
17662: LD_OWVAR 2
17666: PUSH
17667: EMPTY
17668: LIST
17669: LIST
17670: PUSH
17671: LD_INT 21
17673: PUSH
17674: LD_INT 1
17676: PUSH
17677: EMPTY
17678: LIST
17679: LIST
17680: PUSH
17681: LD_INT 3
17683: PUSH
17684: LD_INT 23
17686: PUSH
17687: LD_INT 0
17689: PUSH
17690: EMPTY
17691: LIST
17692: LIST
17693: PUSH
17694: EMPTY
17695: LIST
17696: LIST
17697: PUSH
17698: EMPTY
17699: LIST
17700: LIST
17701: LIST
17702: PPUSH
17703: CALL_OW 69
17707: ST_TO_ADDR
// if not tmp then
17708: LD_VAR 0 1
17712: NOT
17713: IFFALSE 17717
// exit ;
17715: GO 17743
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
17717: LD_VAR 0 1
17721: PUSH
17722: LD_INT 1
17724: PPUSH
17725: LD_VAR 0 1
17729: PPUSH
17730: CALL_OW 12
17734: ARRAY
17735: PPUSH
17736: LD_INT 200
17738: PPUSH
17739: CALL_OW 234
// end ;
17743: PPOPN 1
17745: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
17746: LD_EXP 32
17750: PUSH
17751: LD_EXP 61
17755: AND
17756: IFFALSE 17835
17758: GO 17760
17760: DISABLE
17761: LD_INT 0
17763: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
17764: LD_ADDR_VAR 0 1
17768: PUSH
17769: LD_INT 22
17771: PUSH
17772: LD_OWVAR 2
17776: PUSH
17777: EMPTY
17778: LIST
17779: LIST
17780: PUSH
17781: LD_INT 21
17783: PUSH
17784: LD_INT 2
17786: PUSH
17787: EMPTY
17788: LIST
17789: LIST
17790: PUSH
17791: EMPTY
17792: LIST
17793: LIST
17794: PPUSH
17795: CALL_OW 69
17799: ST_TO_ADDR
// if not tmp then
17800: LD_VAR 0 1
17804: NOT
17805: IFFALSE 17809
// exit ;
17807: GO 17835
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
17809: LD_VAR 0 1
17813: PUSH
17814: LD_INT 1
17816: PPUSH
17817: LD_VAR 0 1
17821: PPUSH
17822: CALL_OW 12
17826: ARRAY
17827: PPUSH
17828: LD_INT 60
17830: PPUSH
17831: CALL_OW 234
// end ;
17835: PPOPN 1
17837: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
17838: LD_EXP 32
17842: PUSH
17843: LD_EXP 62
17847: AND
17848: IFFALSE 17947
17850: GO 17852
17852: DISABLE
17853: LD_INT 0
17855: PPUSH
17856: PPUSH
// begin enable ;
17857: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
17858: LD_ADDR_VAR 0 1
17862: PUSH
17863: LD_INT 22
17865: PUSH
17866: LD_OWVAR 2
17870: PUSH
17871: EMPTY
17872: LIST
17873: LIST
17874: PUSH
17875: LD_INT 61
17877: PUSH
17878: EMPTY
17879: LIST
17880: PUSH
17881: LD_INT 33
17883: PUSH
17884: LD_INT 2
17886: PUSH
17887: EMPTY
17888: LIST
17889: LIST
17890: PUSH
17891: EMPTY
17892: LIST
17893: LIST
17894: LIST
17895: PPUSH
17896: CALL_OW 69
17900: ST_TO_ADDR
// if not tmp then
17901: LD_VAR 0 1
17905: NOT
17906: IFFALSE 17910
// exit ;
17908: GO 17947
// for i in tmp do
17910: LD_ADDR_VAR 0 2
17914: PUSH
17915: LD_VAR 0 1
17919: PUSH
17920: FOR_IN
17921: IFFALSE 17945
// if IsControledBy ( i ) then
17923: LD_VAR 0 2
17927: PPUSH
17928: CALL_OW 312
17932: IFFALSE 17943
// ComUnlink ( i ) ;
17934: LD_VAR 0 2
17938: PPUSH
17939: CALL_OW 136
17943: GO 17920
17945: POP
17946: POP
// end ;
17947: PPOPN 2
17949: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
17950: LD_EXP 32
17954: PUSH
17955: LD_EXP 63
17959: AND
17960: IFFALSE 18100
17962: GO 17964
17964: DISABLE
17965: LD_INT 0
17967: PPUSH
17968: PPUSH
// begin ToLua ( displayPowell(); ) ;
17969: LD_STRING displayPowell();
17971: PPUSH
17972: CALL_OW 559
// uc_side := 0 ;
17976: LD_ADDR_OWVAR 20
17980: PUSH
17981: LD_INT 0
17983: ST_TO_ADDR
// uc_nation := 2 ;
17984: LD_ADDR_OWVAR 21
17988: PUSH
17989: LD_INT 2
17991: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
17992: LD_ADDR_OWVAR 37
17996: PUSH
17997: LD_INT 14
17999: ST_TO_ADDR
// vc_engine := engine_siberite ;
18000: LD_ADDR_OWVAR 39
18004: PUSH
18005: LD_INT 3
18007: ST_TO_ADDR
// vc_control := control_apeman ;
18008: LD_ADDR_OWVAR 38
18012: PUSH
18013: LD_INT 5
18015: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
18016: LD_ADDR_OWVAR 40
18020: PUSH
18021: LD_INT 29
18023: ST_TO_ADDR
// un := CreateVehicle ;
18024: LD_ADDR_VAR 0 2
18028: PUSH
18029: CALL_OW 45
18033: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
18034: LD_VAR 0 2
18038: PPUSH
18039: LD_INT 1
18041: PPUSH
18042: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
18046: LD_INT 35
18048: PPUSH
18049: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
18053: LD_VAR 0 2
18057: PPUSH
18058: LD_INT 22
18060: PUSH
18061: LD_OWVAR 2
18065: PUSH
18066: EMPTY
18067: LIST
18068: LIST
18069: PPUSH
18070: CALL_OW 69
18074: PPUSH
18075: LD_VAR 0 2
18079: PPUSH
18080: CALL_OW 74
18084: PPUSH
18085: CALL_OW 115
// until IsDead ( un ) ;
18089: LD_VAR 0 2
18093: PPUSH
18094: CALL_OW 301
18098: IFFALSE 18046
// end ;
18100: PPOPN 2
18102: END
// every 0 0$1 trigger StreamModeActive and sStu do
18103: LD_EXP 32
18107: PUSH
18108: LD_EXP 71
18112: AND
18113: IFFALSE 18129
18115: GO 18117
18117: DISABLE
// begin ToLua ( displayStucuk(); ) ;
18118: LD_STRING displayStucuk();
18120: PPUSH
18121: CALL_OW 559
// ResetFog ;
18125: CALL_OW 335
// end ;
18129: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
18130: LD_EXP 32
18134: PUSH
18135: LD_EXP 64
18139: AND
18140: IFFALSE 18281
18142: GO 18144
18144: DISABLE
18145: LD_INT 0
18147: PPUSH
18148: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
18149: LD_ADDR_VAR 0 2
18153: PUSH
18154: LD_INT 22
18156: PUSH
18157: LD_OWVAR 2
18161: PUSH
18162: EMPTY
18163: LIST
18164: LIST
18165: PUSH
18166: LD_INT 21
18168: PUSH
18169: LD_INT 1
18171: PUSH
18172: EMPTY
18173: LIST
18174: LIST
18175: PUSH
18176: EMPTY
18177: LIST
18178: LIST
18179: PPUSH
18180: CALL_OW 69
18184: ST_TO_ADDR
// if not tmp then
18185: LD_VAR 0 2
18189: NOT
18190: IFFALSE 18194
// exit ;
18192: GO 18281
// un := tmp [ rand ( 1 , tmp ) ] ;
18194: LD_ADDR_VAR 0 1
18198: PUSH
18199: LD_VAR 0 2
18203: PUSH
18204: LD_INT 1
18206: PPUSH
18207: LD_VAR 0 2
18211: PPUSH
18212: CALL_OW 12
18216: ARRAY
18217: ST_TO_ADDR
// SetSide ( un , 0 ) ;
18218: LD_VAR 0 1
18222: PPUSH
18223: LD_INT 0
18225: PPUSH
18226: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
18230: LD_VAR 0 1
18234: PPUSH
18235: LD_OWVAR 3
18239: PUSH
18240: LD_VAR 0 1
18244: DIFF
18245: PPUSH
18246: LD_VAR 0 1
18250: PPUSH
18251: CALL_OW 74
18255: PPUSH
18256: CALL_OW 115
// wait ( 0 0$20 ) ;
18260: LD_INT 700
18262: PPUSH
18263: CALL_OW 67
// SetSide ( un , your_side ) ;
18267: LD_VAR 0 1
18271: PPUSH
18272: LD_OWVAR 2
18276: PPUSH
18277: CALL_OW 235
// end ;
18281: PPOPN 2
18283: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
18284: LD_EXP 32
18288: PUSH
18289: LD_EXP 65
18293: AND
18294: IFFALSE 18400
18296: GO 18298
18298: DISABLE
18299: LD_INT 0
18301: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18302: LD_ADDR_VAR 0 1
18306: PUSH
18307: LD_INT 22
18309: PUSH
18310: LD_OWVAR 2
18314: PUSH
18315: EMPTY
18316: LIST
18317: LIST
18318: PUSH
18319: LD_INT 2
18321: PUSH
18322: LD_INT 30
18324: PUSH
18325: LD_INT 0
18327: PUSH
18328: EMPTY
18329: LIST
18330: LIST
18331: PUSH
18332: LD_INT 30
18334: PUSH
18335: LD_INT 1
18337: PUSH
18338: EMPTY
18339: LIST
18340: LIST
18341: PUSH
18342: EMPTY
18343: LIST
18344: LIST
18345: LIST
18346: PUSH
18347: EMPTY
18348: LIST
18349: LIST
18350: PPUSH
18351: CALL_OW 69
18355: ST_TO_ADDR
// if not depot then
18356: LD_VAR 0 1
18360: NOT
18361: IFFALSE 18365
// exit ;
18363: GO 18400
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
18365: LD_VAR 0 1
18369: PUSH
18370: LD_INT 1
18372: ARRAY
18373: PPUSH
18374: CALL_OW 250
18378: PPUSH
18379: LD_VAR 0 1
18383: PUSH
18384: LD_INT 1
18386: ARRAY
18387: PPUSH
18388: CALL_OW 251
18392: PPUSH
18393: LD_INT 70
18395: PPUSH
18396: CALL_OW 495
// end ;
18400: PPOPN 1
18402: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
18403: LD_EXP 32
18407: PUSH
18408: LD_EXP 66
18412: AND
18413: IFFALSE 18624
18415: GO 18417
18417: DISABLE
18418: LD_INT 0
18420: PPUSH
18421: PPUSH
18422: PPUSH
18423: PPUSH
18424: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
18425: LD_ADDR_VAR 0 5
18429: PUSH
18430: LD_INT 22
18432: PUSH
18433: LD_OWVAR 2
18437: PUSH
18438: EMPTY
18439: LIST
18440: LIST
18441: PUSH
18442: LD_INT 21
18444: PUSH
18445: LD_INT 1
18447: PUSH
18448: EMPTY
18449: LIST
18450: LIST
18451: PUSH
18452: EMPTY
18453: LIST
18454: LIST
18455: PPUSH
18456: CALL_OW 69
18460: ST_TO_ADDR
// if not tmp then
18461: LD_VAR 0 5
18465: NOT
18466: IFFALSE 18470
// exit ;
18468: GO 18624
// for i in tmp do
18470: LD_ADDR_VAR 0 1
18474: PUSH
18475: LD_VAR 0 5
18479: PUSH
18480: FOR_IN
18481: IFFALSE 18622
// begin d := rand ( 0 , 5 ) ;
18483: LD_ADDR_VAR 0 4
18487: PUSH
18488: LD_INT 0
18490: PPUSH
18491: LD_INT 5
18493: PPUSH
18494: CALL_OW 12
18498: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
18499: LD_ADDR_VAR 0 2
18503: PUSH
18504: LD_VAR 0 1
18508: PPUSH
18509: CALL_OW 250
18513: PPUSH
18514: LD_VAR 0 4
18518: PPUSH
18519: LD_INT 3
18521: PPUSH
18522: LD_INT 12
18524: PPUSH
18525: CALL_OW 12
18529: PPUSH
18530: CALL_OW 272
18534: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
18535: LD_ADDR_VAR 0 3
18539: PUSH
18540: LD_VAR 0 1
18544: PPUSH
18545: CALL_OW 251
18549: PPUSH
18550: LD_VAR 0 4
18554: PPUSH
18555: LD_INT 3
18557: PPUSH
18558: LD_INT 12
18560: PPUSH
18561: CALL_OW 12
18565: PPUSH
18566: CALL_OW 273
18570: ST_TO_ADDR
// if ValidHex ( x , y ) then
18571: LD_VAR 0 2
18575: PPUSH
18576: LD_VAR 0 3
18580: PPUSH
18581: CALL_OW 488
18585: IFFALSE 18620
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
18587: LD_VAR 0 1
18591: PPUSH
18592: LD_VAR 0 2
18596: PPUSH
18597: LD_VAR 0 3
18601: PPUSH
18602: LD_INT 3
18604: PPUSH
18605: LD_INT 6
18607: PPUSH
18608: CALL_OW 12
18612: PPUSH
18613: LD_INT 1
18615: PPUSH
18616: CALL_OW 483
// end ;
18620: GO 18480
18622: POP
18623: POP
// end ;
18624: PPOPN 5
18626: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
18627: LD_EXP 32
18631: PUSH
18632: LD_EXP 67
18636: AND
18637: IFFALSE 18731
18639: GO 18641
18641: DISABLE
18642: LD_INT 0
18644: PPUSH
18645: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
18646: LD_ADDR_VAR 0 2
18650: PUSH
18651: LD_INT 22
18653: PUSH
18654: LD_OWVAR 2
18658: PUSH
18659: EMPTY
18660: LIST
18661: LIST
18662: PUSH
18663: LD_INT 32
18665: PUSH
18666: LD_INT 1
18668: PUSH
18669: EMPTY
18670: LIST
18671: LIST
18672: PUSH
18673: LD_INT 21
18675: PUSH
18676: LD_INT 2
18678: PUSH
18679: EMPTY
18680: LIST
18681: LIST
18682: PUSH
18683: EMPTY
18684: LIST
18685: LIST
18686: LIST
18687: PPUSH
18688: CALL_OW 69
18692: ST_TO_ADDR
// if not tmp then
18693: LD_VAR 0 2
18697: NOT
18698: IFFALSE 18702
// exit ;
18700: GO 18731
// for i in tmp do
18702: LD_ADDR_VAR 0 1
18706: PUSH
18707: LD_VAR 0 2
18711: PUSH
18712: FOR_IN
18713: IFFALSE 18729
// SetFuel ( i , 0 ) ;
18715: LD_VAR 0 1
18719: PPUSH
18720: LD_INT 0
18722: PPUSH
18723: CALL_OW 240
18727: GO 18712
18729: POP
18730: POP
// end ;
18731: PPOPN 2
18733: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
18734: LD_EXP 32
18738: PUSH
18739: LD_EXP 68
18743: AND
18744: IFFALSE 18810
18746: GO 18748
18748: DISABLE
18749: LD_INT 0
18751: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
18752: LD_ADDR_VAR 0 1
18756: PUSH
18757: LD_INT 22
18759: PUSH
18760: LD_OWVAR 2
18764: PUSH
18765: EMPTY
18766: LIST
18767: LIST
18768: PUSH
18769: LD_INT 30
18771: PUSH
18772: LD_INT 29
18774: PUSH
18775: EMPTY
18776: LIST
18777: LIST
18778: PUSH
18779: EMPTY
18780: LIST
18781: LIST
18782: PPUSH
18783: CALL_OW 69
18787: ST_TO_ADDR
// if not tmp then
18788: LD_VAR 0 1
18792: NOT
18793: IFFALSE 18797
// exit ;
18795: GO 18810
// DestroyUnit ( tmp [ 1 ] ) ;
18797: LD_VAR 0 1
18801: PUSH
18802: LD_INT 1
18804: ARRAY
18805: PPUSH
18806: CALL_OW 65
// end ;
18810: PPOPN 1
18812: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
18813: LD_EXP 32
18817: PUSH
18818: LD_EXP 70
18822: AND
18823: IFFALSE 18952
18825: GO 18827
18827: DISABLE
18828: LD_INT 0
18830: PPUSH
// begin uc_side := 0 ;
18831: LD_ADDR_OWVAR 20
18835: PUSH
18836: LD_INT 0
18838: ST_TO_ADDR
// uc_nation := nation_arabian ;
18839: LD_ADDR_OWVAR 21
18843: PUSH
18844: LD_INT 2
18846: ST_TO_ADDR
// hc_gallery :=  ;
18847: LD_ADDR_OWVAR 33
18851: PUSH
18852: LD_STRING 
18854: ST_TO_ADDR
// hc_name :=  ;
18855: LD_ADDR_OWVAR 26
18859: PUSH
18860: LD_STRING 
18862: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
18863: LD_INT 1
18865: PPUSH
18866: LD_INT 11
18868: PPUSH
18869: LD_INT 10
18871: PPUSH
18872: CALL_OW 380
// un := CreateHuman ;
18876: LD_ADDR_VAR 0 1
18880: PUSH
18881: CALL_OW 44
18885: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
18886: LD_VAR 0 1
18890: PPUSH
18891: LD_INT 1
18893: PPUSH
18894: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
18898: LD_INT 35
18900: PPUSH
18901: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
18905: LD_VAR 0 1
18909: PPUSH
18910: LD_INT 22
18912: PUSH
18913: LD_OWVAR 2
18917: PUSH
18918: EMPTY
18919: LIST
18920: LIST
18921: PPUSH
18922: CALL_OW 69
18926: PPUSH
18927: LD_VAR 0 1
18931: PPUSH
18932: CALL_OW 74
18936: PPUSH
18937: CALL_OW 115
// until IsDead ( un ) ;
18941: LD_VAR 0 1
18945: PPUSH
18946: CALL_OW 301
18950: IFFALSE 18898
// end ;
18952: PPOPN 1
18954: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
18955: LD_EXP 32
18959: PUSH
18960: LD_EXP 72
18964: AND
18965: IFFALSE 18977
18967: GO 18969
18969: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
18970: LD_STRING earthquake(getX(game), 0, 32)
18972: PPUSH
18973: CALL_OW 559
18977: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
18978: LD_EXP 32
18982: PUSH
18983: LD_EXP 73
18987: AND
18988: IFFALSE 19079
18990: GO 18992
18992: DISABLE
18993: LD_INT 0
18995: PPUSH
// begin enable ;
18996: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
18997: LD_ADDR_VAR 0 1
19001: PUSH
19002: LD_INT 22
19004: PUSH
19005: LD_OWVAR 2
19009: PUSH
19010: EMPTY
19011: LIST
19012: LIST
19013: PUSH
19014: LD_INT 21
19016: PUSH
19017: LD_INT 2
19019: PUSH
19020: EMPTY
19021: LIST
19022: LIST
19023: PUSH
19024: LD_INT 33
19026: PUSH
19027: LD_INT 3
19029: PUSH
19030: EMPTY
19031: LIST
19032: LIST
19033: PUSH
19034: EMPTY
19035: LIST
19036: LIST
19037: LIST
19038: PPUSH
19039: CALL_OW 69
19043: ST_TO_ADDR
// if not tmp then
19044: LD_VAR 0 1
19048: NOT
19049: IFFALSE 19053
// exit ;
19051: GO 19079
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
19053: LD_VAR 0 1
19057: PUSH
19058: LD_INT 1
19060: PPUSH
19061: LD_VAR 0 1
19065: PPUSH
19066: CALL_OW 12
19070: ARRAY
19071: PPUSH
19072: LD_INT 1
19074: PPUSH
19075: CALL_OW 234
// end ;
19079: PPOPN 1
19081: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
19082: LD_EXP 32
19086: PUSH
19087: LD_EXP 74
19091: AND
19092: IFFALSE 19233
19094: GO 19096
19096: DISABLE
19097: LD_INT 0
19099: PPUSH
19100: PPUSH
19101: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
19102: LD_ADDR_VAR 0 3
19106: PUSH
19107: LD_INT 22
19109: PUSH
19110: LD_OWVAR 2
19114: PUSH
19115: EMPTY
19116: LIST
19117: LIST
19118: PUSH
19119: LD_INT 25
19121: PUSH
19122: LD_INT 1
19124: PUSH
19125: EMPTY
19126: LIST
19127: LIST
19128: PUSH
19129: EMPTY
19130: LIST
19131: LIST
19132: PPUSH
19133: CALL_OW 69
19137: ST_TO_ADDR
// if not tmp then
19138: LD_VAR 0 3
19142: NOT
19143: IFFALSE 19147
// exit ;
19145: GO 19233
// un := tmp [ rand ( 1 , tmp ) ] ;
19147: LD_ADDR_VAR 0 2
19151: PUSH
19152: LD_VAR 0 3
19156: PUSH
19157: LD_INT 1
19159: PPUSH
19160: LD_VAR 0 3
19164: PPUSH
19165: CALL_OW 12
19169: ARRAY
19170: ST_TO_ADDR
// if Crawls ( un ) then
19171: LD_VAR 0 2
19175: PPUSH
19176: CALL_OW 318
19180: IFFALSE 19191
// ComWalk ( un ) ;
19182: LD_VAR 0 2
19186: PPUSH
19187: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
19191: LD_VAR 0 2
19195: PPUSH
19196: LD_INT 9
19198: PPUSH
19199: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
19203: LD_INT 28
19205: PPUSH
19206: LD_OWVAR 2
19210: PPUSH
19211: LD_INT 2
19213: PPUSH
19214: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
19218: LD_INT 29
19220: PPUSH
19221: LD_OWVAR 2
19225: PPUSH
19226: LD_INT 2
19228: PPUSH
19229: CALL_OW 322
// end ;
19233: PPOPN 3
19235: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
19236: LD_EXP 32
19240: PUSH
19241: LD_EXP 75
19245: AND
19246: IFFALSE 19357
19248: GO 19250
19250: DISABLE
19251: LD_INT 0
19253: PPUSH
19254: PPUSH
19255: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
19256: LD_ADDR_VAR 0 3
19260: PUSH
19261: LD_INT 22
19263: PUSH
19264: LD_OWVAR 2
19268: PUSH
19269: EMPTY
19270: LIST
19271: LIST
19272: PUSH
19273: LD_INT 25
19275: PUSH
19276: LD_INT 1
19278: PUSH
19279: EMPTY
19280: LIST
19281: LIST
19282: PUSH
19283: EMPTY
19284: LIST
19285: LIST
19286: PPUSH
19287: CALL_OW 69
19291: ST_TO_ADDR
// if not tmp then
19292: LD_VAR 0 3
19296: NOT
19297: IFFALSE 19301
// exit ;
19299: GO 19357
// un := tmp [ rand ( 1 , tmp ) ] ;
19301: LD_ADDR_VAR 0 2
19305: PUSH
19306: LD_VAR 0 3
19310: PUSH
19311: LD_INT 1
19313: PPUSH
19314: LD_VAR 0 3
19318: PPUSH
19319: CALL_OW 12
19323: ARRAY
19324: ST_TO_ADDR
// if Crawls ( un ) then
19325: LD_VAR 0 2
19329: PPUSH
19330: CALL_OW 318
19334: IFFALSE 19345
// ComWalk ( un ) ;
19336: LD_VAR 0 2
19340: PPUSH
19341: CALL_OW 138
// SetClass ( un , class_mortar ) ;
19345: LD_VAR 0 2
19349: PPUSH
19350: LD_INT 8
19352: PPUSH
19353: CALL_OW 336
// end ;
19357: PPOPN 3
19359: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
19360: LD_EXP 32
19364: PUSH
19365: LD_EXP 76
19369: AND
19370: IFFALSE 19514
19372: GO 19374
19374: DISABLE
19375: LD_INT 0
19377: PPUSH
19378: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
19379: LD_ADDR_VAR 0 2
19383: PUSH
19384: LD_INT 22
19386: PUSH
19387: LD_OWVAR 2
19391: PUSH
19392: EMPTY
19393: LIST
19394: LIST
19395: PUSH
19396: LD_INT 21
19398: PUSH
19399: LD_INT 2
19401: PUSH
19402: EMPTY
19403: LIST
19404: LIST
19405: PUSH
19406: LD_INT 2
19408: PUSH
19409: LD_INT 34
19411: PUSH
19412: LD_INT 12
19414: PUSH
19415: EMPTY
19416: LIST
19417: LIST
19418: PUSH
19419: LD_INT 34
19421: PUSH
19422: LD_INT 51
19424: PUSH
19425: EMPTY
19426: LIST
19427: LIST
19428: PUSH
19429: LD_INT 34
19431: PUSH
19432: LD_INT 32
19434: PUSH
19435: EMPTY
19436: LIST
19437: LIST
19438: PUSH
19439: EMPTY
19440: LIST
19441: LIST
19442: LIST
19443: LIST
19444: PUSH
19445: EMPTY
19446: LIST
19447: LIST
19448: LIST
19449: PPUSH
19450: CALL_OW 69
19454: ST_TO_ADDR
// if not tmp then
19455: LD_VAR 0 2
19459: NOT
19460: IFFALSE 19464
// exit ;
19462: GO 19514
// for i in tmp do
19464: LD_ADDR_VAR 0 1
19468: PUSH
19469: LD_VAR 0 2
19473: PUSH
19474: FOR_IN
19475: IFFALSE 19512
// if GetCargo ( i , mat_artifact ) = 0 then
19477: LD_VAR 0 1
19481: PPUSH
19482: LD_INT 4
19484: PPUSH
19485: CALL_OW 289
19489: PUSH
19490: LD_INT 0
19492: EQUAL
19493: IFFALSE 19510
// SetCargo ( i , mat_siberit , 100 ) ;
19495: LD_VAR 0 1
19499: PPUSH
19500: LD_INT 3
19502: PPUSH
19503: LD_INT 100
19505: PPUSH
19506: CALL_OW 290
19510: GO 19474
19512: POP
19513: POP
// end ;
19514: PPOPN 2
19516: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
19517: LD_EXP 32
19521: PUSH
19522: LD_EXP 77
19526: AND
19527: IFFALSE 19710
19529: GO 19531
19531: DISABLE
19532: LD_INT 0
19534: PPUSH
19535: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
19536: LD_ADDR_VAR 0 2
19540: PUSH
19541: LD_INT 22
19543: PUSH
19544: LD_OWVAR 2
19548: PUSH
19549: EMPTY
19550: LIST
19551: LIST
19552: PPUSH
19553: CALL_OW 69
19557: ST_TO_ADDR
// if not tmp then
19558: LD_VAR 0 2
19562: NOT
19563: IFFALSE 19567
// exit ;
19565: GO 19710
// for i := 1 to 2 do
19567: LD_ADDR_VAR 0 1
19571: PUSH
19572: DOUBLE
19573: LD_INT 1
19575: DEC
19576: ST_TO_ADDR
19577: LD_INT 2
19579: PUSH
19580: FOR_TO
19581: IFFALSE 19708
// begin uc_side := your_side ;
19583: LD_ADDR_OWVAR 20
19587: PUSH
19588: LD_OWVAR 2
19592: ST_TO_ADDR
// uc_nation := nation_american ;
19593: LD_ADDR_OWVAR 21
19597: PUSH
19598: LD_INT 1
19600: ST_TO_ADDR
// vc_chassis := us_morphling ;
19601: LD_ADDR_OWVAR 37
19605: PUSH
19606: LD_INT 5
19608: ST_TO_ADDR
// vc_engine := engine_siberite ;
19609: LD_ADDR_OWVAR 39
19613: PUSH
19614: LD_INT 3
19616: ST_TO_ADDR
// vc_control := control_computer ;
19617: LD_ADDR_OWVAR 38
19621: PUSH
19622: LD_INT 3
19624: ST_TO_ADDR
// vc_weapon := us_double_laser ;
19625: LD_ADDR_OWVAR 40
19629: PUSH
19630: LD_INT 10
19632: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
19633: LD_VAR 0 2
19637: PUSH
19638: LD_INT 1
19640: ARRAY
19641: PPUSH
19642: CALL_OW 310
19646: NOT
19647: IFFALSE 19694
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
19649: CALL_OW 45
19653: PPUSH
19654: LD_VAR 0 2
19658: PUSH
19659: LD_INT 1
19661: ARRAY
19662: PPUSH
19663: CALL_OW 250
19667: PPUSH
19668: LD_VAR 0 2
19672: PUSH
19673: LD_INT 1
19675: ARRAY
19676: PPUSH
19677: CALL_OW 251
19681: PPUSH
19682: LD_INT 12
19684: PPUSH
19685: LD_INT 1
19687: PPUSH
19688: CALL_OW 50
19692: GO 19706
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
19694: CALL_OW 45
19698: PPUSH
19699: LD_INT 1
19701: PPUSH
19702: CALL_OW 51
// end ;
19706: GO 19580
19708: POP
19709: POP
// end ;
19710: PPOPN 2
19712: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
19713: LD_EXP 32
19717: PUSH
19718: LD_EXP 78
19722: AND
19723: IFFALSE 19945
19725: GO 19727
19727: DISABLE
19728: LD_INT 0
19730: PPUSH
19731: PPUSH
19732: PPUSH
19733: PPUSH
19734: PPUSH
19735: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
19736: LD_ADDR_VAR 0 6
19740: PUSH
19741: LD_INT 22
19743: PUSH
19744: LD_OWVAR 2
19748: PUSH
19749: EMPTY
19750: LIST
19751: LIST
19752: PUSH
19753: LD_INT 21
19755: PUSH
19756: LD_INT 1
19758: PUSH
19759: EMPTY
19760: LIST
19761: LIST
19762: PUSH
19763: LD_INT 3
19765: PUSH
19766: LD_INT 23
19768: PUSH
19769: LD_INT 0
19771: PUSH
19772: EMPTY
19773: LIST
19774: LIST
19775: PUSH
19776: EMPTY
19777: LIST
19778: LIST
19779: PUSH
19780: EMPTY
19781: LIST
19782: LIST
19783: LIST
19784: PPUSH
19785: CALL_OW 69
19789: ST_TO_ADDR
// if not tmp then
19790: LD_VAR 0 6
19794: NOT
19795: IFFALSE 19799
// exit ;
19797: GO 19945
// s1 := rand ( 1 , 4 ) ;
19799: LD_ADDR_VAR 0 2
19803: PUSH
19804: LD_INT 1
19806: PPUSH
19807: LD_INT 4
19809: PPUSH
19810: CALL_OW 12
19814: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
19815: LD_ADDR_VAR 0 4
19819: PUSH
19820: LD_VAR 0 6
19824: PUSH
19825: LD_INT 1
19827: ARRAY
19828: PPUSH
19829: LD_VAR 0 2
19833: PPUSH
19834: CALL_OW 259
19838: ST_TO_ADDR
// if s1 = 1 then
19839: LD_VAR 0 2
19843: PUSH
19844: LD_INT 1
19846: EQUAL
19847: IFFALSE 19867
// s2 := rand ( 2 , 4 ) else
19849: LD_ADDR_VAR 0 3
19853: PUSH
19854: LD_INT 2
19856: PPUSH
19857: LD_INT 4
19859: PPUSH
19860: CALL_OW 12
19864: ST_TO_ADDR
19865: GO 19875
// s2 := 1 ;
19867: LD_ADDR_VAR 0 3
19871: PUSH
19872: LD_INT 1
19874: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
19875: LD_ADDR_VAR 0 5
19879: PUSH
19880: LD_VAR 0 6
19884: PUSH
19885: LD_INT 1
19887: ARRAY
19888: PPUSH
19889: LD_VAR 0 3
19893: PPUSH
19894: CALL_OW 259
19898: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
19899: LD_VAR 0 6
19903: PUSH
19904: LD_INT 1
19906: ARRAY
19907: PPUSH
19908: LD_VAR 0 2
19912: PPUSH
19913: LD_VAR 0 5
19917: PPUSH
19918: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
19922: LD_VAR 0 6
19926: PUSH
19927: LD_INT 1
19929: ARRAY
19930: PPUSH
19931: LD_VAR 0 3
19935: PPUSH
19936: LD_VAR 0 4
19940: PPUSH
19941: CALL_OW 237
// end ;
19945: PPOPN 6
19947: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
19948: LD_EXP 32
19952: PUSH
19953: LD_EXP 79
19957: AND
19958: IFFALSE 20037
19960: GO 19962
19962: DISABLE
19963: LD_INT 0
19965: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
19966: LD_ADDR_VAR 0 1
19970: PUSH
19971: LD_INT 22
19973: PUSH
19974: LD_OWVAR 2
19978: PUSH
19979: EMPTY
19980: LIST
19981: LIST
19982: PUSH
19983: LD_INT 30
19985: PUSH
19986: LD_INT 3
19988: PUSH
19989: EMPTY
19990: LIST
19991: LIST
19992: PUSH
19993: EMPTY
19994: LIST
19995: LIST
19996: PPUSH
19997: CALL_OW 69
20001: ST_TO_ADDR
// if not tmp then
20002: LD_VAR 0 1
20006: NOT
20007: IFFALSE 20011
// exit ;
20009: GO 20037
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
20011: LD_VAR 0 1
20015: PUSH
20016: LD_INT 1
20018: PPUSH
20019: LD_VAR 0 1
20023: PPUSH
20024: CALL_OW 12
20028: ARRAY
20029: PPUSH
20030: LD_INT 1
20032: PPUSH
20033: CALL_OW 234
// end ;
20037: PPOPN 1
20039: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
20040: LD_EXP 32
20044: PUSH
20045: LD_EXP 80
20049: AND
20050: IFFALSE 20162
20052: GO 20054
20054: DISABLE
20055: LD_INT 0
20057: PPUSH
20058: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
20059: LD_ADDR_VAR 0 2
20063: PUSH
20064: LD_INT 22
20066: PUSH
20067: LD_OWVAR 2
20071: PUSH
20072: EMPTY
20073: LIST
20074: LIST
20075: PUSH
20076: LD_INT 2
20078: PUSH
20079: LD_INT 30
20081: PUSH
20082: LD_INT 27
20084: PUSH
20085: EMPTY
20086: LIST
20087: LIST
20088: PUSH
20089: LD_INT 30
20091: PUSH
20092: LD_INT 26
20094: PUSH
20095: EMPTY
20096: LIST
20097: LIST
20098: PUSH
20099: LD_INT 30
20101: PUSH
20102: LD_INT 28
20104: PUSH
20105: EMPTY
20106: LIST
20107: LIST
20108: PUSH
20109: EMPTY
20110: LIST
20111: LIST
20112: LIST
20113: LIST
20114: PUSH
20115: EMPTY
20116: LIST
20117: LIST
20118: PPUSH
20119: CALL_OW 69
20123: ST_TO_ADDR
// if not tmp then
20124: LD_VAR 0 2
20128: NOT
20129: IFFALSE 20133
// exit ;
20131: GO 20162
// for i in tmp do
20133: LD_ADDR_VAR 0 1
20137: PUSH
20138: LD_VAR 0 2
20142: PUSH
20143: FOR_IN
20144: IFFALSE 20160
// SetLives ( i , 1 ) ;
20146: LD_VAR 0 1
20150: PPUSH
20151: LD_INT 1
20153: PPUSH
20154: CALL_OW 234
20158: GO 20143
20160: POP
20161: POP
// end ;
20162: PPOPN 2
20164: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
20165: LD_EXP 32
20169: PUSH
20170: LD_EXP 81
20174: AND
20175: IFFALSE 20462
20177: GO 20179
20179: DISABLE
20180: LD_INT 0
20182: PPUSH
20183: PPUSH
20184: PPUSH
// begin i := rand ( 1 , 7 ) ;
20185: LD_ADDR_VAR 0 1
20189: PUSH
20190: LD_INT 1
20192: PPUSH
20193: LD_INT 7
20195: PPUSH
20196: CALL_OW 12
20200: ST_TO_ADDR
// case i of 1 :
20201: LD_VAR 0 1
20205: PUSH
20206: LD_INT 1
20208: DOUBLE
20209: EQUAL
20210: IFTRUE 20214
20212: GO 20224
20214: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
20215: LD_STRING earthquake(getX(game), 0, 32)
20217: PPUSH
20218: CALL_OW 559
20222: GO 20462
20224: LD_INT 2
20226: DOUBLE
20227: EQUAL
20228: IFTRUE 20232
20230: GO 20246
20232: POP
// begin ToLua ( displayStucuk(); ) ;
20233: LD_STRING displayStucuk();
20235: PPUSH
20236: CALL_OW 559
// ResetFog ;
20240: CALL_OW 335
// end ; 3 :
20244: GO 20462
20246: LD_INT 3
20248: DOUBLE
20249: EQUAL
20250: IFTRUE 20254
20252: GO 20358
20254: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
20255: LD_ADDR_VAR 0 2
20259: PUSH
20260: LD_INT 22
20262: PUSH
20263: LD_OWVAR 2
20267: PUSH
20268: EMPTY
20269: LIST
20270: LIST
20271: PUSH
20272: LD_INT 25
20274: PUSH
20275: LD_INT 1
20277: PUSH
20278: EMPTY
20279: LIST
20280: LIST
20281: PUSH
20282: EMPTY
20283: LIST
20284: LIST
20285: PPUSH
20286: CALL_OW 69
20290: ST_TO_ADDR
// if not tmp then
20291: LD_VAR 0 2
20295: NOT
20296: IFFALSE 20300
// exit ;
20298: GO 20462
// un := tmp [ rand ( 1 , tmp ) ] ;
20300: LD_ADDR_VAR 0 3
20304: PUSH
20305: LD_VAR 0 2
20309: PUSH
20310: LD_INT 1
20312: PPUSH
20313: LD_VAR 0 2
20317: PPUSH
20318: CALL_OW 12
20322: ARRAY
20323: ST_TO_ADDR
// if Crawls ( un ) then
20324: LD_VAR 0 3
20328: PPUSH
20329: CALL_OW 318
20333: IFFALSE 20344
// ComWalk ( un ) ;
20335: LD_VAR 0 3
20339: PPUSH
20340: CALL_OW 138
// SetClass ( un , class_mortar ) ;
20344: LD_VAR 0 3
20348: PPUSH
20349: LD_INT 8
20351: PPUSH
20352: CALL_OW 336
// end ; 4 :
20356: GO 20462
20358: LD_INT 4
20360: DOUBLE
20361: EQUAL
20362: IFTRUE 20366
20364: GO 20440
20366: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
20367: LD_ADDR_VAR 0 2
20371: PUSH
20372: LD_INT 22
20374: PUSH
20375: LD_OWVAR 2
20379: PUSH
20380: EMPTY
20381: LIST
20382: LIST
20383: PUSH
20384: LD_INT 30
20386: PUSH
20387: LD_INT 29
20389: PUSH
20390: EMPTY
20391: LIST
20392: LIST
20393: PUSH
20394: EMPTY
20395: LIST
20396: LIST
20397: PPUSH
20398: CALL_OW 69
20402: ST_TO_ADDR
// if not tmp then
20403: LD_VAR 0 2
20407: NOT
20408: IFFALSE 20412
// exit ;
20410: GO 20462
// CenterNowOnUnits ( tmp [ 1 ] ) ;
20412: LD_VAR 0 2
20416: PUSH
20417: LD_INT 1
20419: ARRAY
20420: PPUSH
20421: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
20425: LD_VAR 0 2
20429: PUSH
20430: LD_INT 1
20432: ARRAY
20433: PPUSH
20434: CALL_OW 65
// end ; 5 .. 7 :
20438: GO 20462
20440: LD_INT 5
20442: DOUBLE
20443: GREATEREQUAL
20444: IFFALSE 20452
20446: LD_INT 7
20448: DOUBLE
20449: LESSEQUAL
20450: IFTRUE 20454
20452: GO 20461
20454: POP
// StreamSibBomb ; end ;
20455: CALL 16699 0 0
20459: GO 20462
20461: POP
// end ;
20462: PPOPN 3
20464: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
20465: LD_EXP 32
20469: PUSH
20470: LD_EXP 82
20474: AND
20475: IFFALSE 20631
20477: GO 20479
20479: DISABLE
20480: LD_INT 0
20482: PPUSH
20483: PPUSH
20484: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
20485: LD_ADDR_VAR 0 2
20489: PUSH
20490: LD_INT 81
20492: PUSH
20493: LD_OWVAR 2
20497: PUSH
20498: EMPTY
20499: LIST
20500: LIST
20501: PUSH
20502: LD_INT 2
20504: PUSH
20505: LD_INT 21
20507: PUSH
20508: LD_INT 1
20510: PUSH
20511: EMPTY
20512: LIST
20513: LIST
20514: PUSH
20515: LD_INT 21
20517: PUSH
20518: LD_INT 2
20520: PUSH
20521: EMPTY
20522: LIST
20523: LIST
20524: PUSH
20525: EMPTY
20526: LIST
20527: LIST
20528: LIST
20529: PUSH
20530: EMPTY
20531: LIST
20532: LIST
20533: PPUSH
20534: CALL_OW 69
20538: ST_TO_ADDR
// if not tmp then
20539: LD_VAR 0 2
20543: NOT
20544: IFFALSE 20548
// exit ;
20546: GO 20631
// p := 0 ;
20548: LD_ADDR_VAR 0 3
20552: PUSH
20553: LD_INT 0
20555: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
20556: LD_INT 35
20558: PPUSH
20559: CALL_OW 67
// p := p + 1 ;
20563: LD_ADDR_VAR 0 3
20567: PUSH
20568: LD_VAR 0 3
20572: PUSH
20573: LD_INT 1
20575: PLUS
20576: ST_TO_ADDR
// for i in tmp do
20577: LD_ADDR_VAR 0 1
20581: PUSH
20582: LD_VAR 0 2
20586: PUSH
20587: FOR_IN
20588: IFFALSE 20619
// if GetLives ( i ) < 1000 then
20590: LD_VAR 0 1
20594: PPUSH
20595: CALL_OW 256
20599: PUSH
20600: LD_INT 1000
20602: LESS
20603: IFFALSE 20617
// SetLives ( i , 1000 ) ;
20605: LD_VAR 0 1
20609: PPUSH
20610: LD_INT 1000
20612: PPUSH
20613: CALL_OW 234
20617: GO 20587
20619: POP
20620: POP
// until p > 20 ;
20621: LD_VAR 0 3
20625: PUSH
20626: LD_INT 20
20628: GREATER
20629: IFFALSE 20556
// end ;
20631: PPOPN 3
20633: END
// every 0 0$1 trigger StreamModeActive and sTime do
20634: LD_EXP 32
20638: PUSH
20639: LD_EXP 83
20643: AND
20644: IFFALSE 20679
20646: GO 20648
20648: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
20649: LD_INT 28
20651: PPUSH
20652: LD_OWVAR 2
20656: PPUSH
20657: LD_INT 2
20659: PPUSH
20660: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
20664: LD_INT 30
20666: PPUSH
20667: LD_OWVAR 2
20671: PPUSH
20672: LD_INT 2
20674: PPUSH
20675: CALL_OW 322
// end ;
20679: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
20680: LD_EXP 32
20684: PUSH
20685: LD_EXP 84
20689: AND
20690: IFFALSE 20811
20692: GO 20694
20694: DISABLE
20695: LD_INT 0
20697: PPUSH
20698: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
20699: LD_ADDR_VAR 0 2
20703: PUSH
20704: LD_INT 22
20706: PUSH
20707: LD_OWVAR 2
20711: PUSH
20712: EMPTY
20713: LIST
20714: LIST
20715: PUSH
20716: LD_INT 21
20718: PUSH
20719: LD_INT 1
20721: PUSH
20722: EMPTY
20723: LIST
20724: LIST
20725: PUSH
20726: LD_INT 3
20728: PUSH
20729: LD_INT 23
20731: PUSH
20732: LD_INT 0
20734: PUSH
20735: EMPTY
20736: LIST
20737: LIST
20738: PUSH
20739: EMPTY
20740: LIST
20741: LIST
20742: PUSH
20743: EMPTY
20744: LIST
20745: LIST
20746: LIST
20747: PPUSH
20748: CALL_OW 69
20752: ST_TO_ADDR
// if not tmp then
20753: LD_VAR 0 2
20757: NOT
20758: IFFALSE 20762
// exit ;
20760: GO 20811
// for i in tmp do
20762: LD_ADDR_VAR 0 1
20766: PUSH
20767: LD_VAR 0 2
20771: PUSH
20772: FOR_IN
20773: IFFALSE 20809
// begin if Crawls ( i ) then
20775: LD_VAR 0 1
20779: PPUSH
20780: CALL_OW 318
20784: IFFALSE 20795
// ComWalk ( i ) ;
20786: LD_VAR 0 1
20790: PPUSH
20791: CALL_OW 138
// SetClass ( i , 2 ) ;
20795: LD_VAR 0 1
20799: PPUSH
20800: LD_INT 2
20802: PPUSH
20803: CALL_OW 336
// end ;
20807: GO 20772
20809: POP
20810: POP
// end ;
20811: PPOPN 2
20813: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
20814: LD_EXP 32
20818: PUSH
20819: LD_EXP 85
20823: AND
20824: IFFALSE 21112
20826: GO 20828
20828: DISABLE
20829: LD_INT 0
20831: PPUSH
20832: PPUSH
20833: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
20834: LD_OWVAR 2
20838: PPUSH
20839: LD_INT 9
20841: PPUSH
20842: LD_INT 1
20844: PPUSH
20845: LD_INT 1
20847: PPUSH
20848: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
20852: LD_INT 9
20854: PPUSH
20855: LD_OWVAR 2
20859: PPUSH
20860: CALL_OW 343
// uc_side := 9 ;
20864: LD_ADDR_OWVAR 20
20868: PUSH
20869: LD_INT 9
20871: ST_TO_ADDR
// uc_nation := 2 ;
20872: LD_ADDR_OWVAR 21
20876: PUSH
20877: LD_INT 2
20879: ST_TO_ADDR
// hc_name := Dark Warrior ;
20880: LD_ADDR_OWVAR 26
20884: PUSH
20885: LD_STRING Dark Warrior
20887: ST_TO_ADDR
// hc_gallery :=  ;
20888: LD_ADDR_OWVAR 33
20892: PUSH
20893: LD_STRING 
20895: ST_TO_ADDR
// hc_noskilllimit := true ;
20896: LD_ADDR_OWVAR 76
20900: PUSH
20901: LD_INT 1
20903: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
20904: LD_ADDR_OWVAR 31
20908: PUSH
20909: LD_INT 30
20911: PUSH
20912: LD_INT 30
20914: PUSH
20915: LD_INT 30
20917: PUSH
20918: LD_INT 30
20920: PUSH
20921: EMPTY
20922: LIST
20923: LIST
20924: LIST
20925: LIST
20926: ST_TO_ADDR
// un := CreateHuman ;
20927: LD_ADDR_VAR 0 3
20931: PUSH
20932: CALL_OW 44
20936: ST_TO_ADDR
// hc_noskilllimit := false ;
20937: LD_ADDR_OWVAR 76
20941: PUSH
20942: LD_INT 0
20944: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
20945: LD_VAR 0 3
20949: PPUSH
20950: LD_INT 1
20952: PPUSH
20953: CALL_OW 51
// ToLua ( playRanger() ) ;
20957: LD_STRING playRanger()
20959: PPUSH
20960: CALL_OW 559
// p := 0 ;
20964: LD_ADDR_VAR 0 2
20968: PUSH
20969: LD_INT 0
20971: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
20972: LD_INT 35
20974: PPUSH
20975: CALL_OW 67
// p := p + 1 ;
20979: LD_ADDR_VAR 0 2
20983: PUSH
20984: LD_VAR 0 2
20988: PUSH
20989: LD_INT 1
20991: PLUS
20992: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
20993: LD_VAR 0 3
20997: PPUSH
20998: CALL_OW 256
21002: PUSH
21003: LD_INT 1000
21005: LESS
21006: IFFALSE 21020
// SetLives ( un , 1000 ) ;
21008: LD_VAR 0 3
21012: PPUSH
21013: LD_INT 1000
21015: PPUSH
21016: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
21020: LD_VAR 0 3
21024: PPUSH
21025: LD_INT 81
21027: PUSH
21028: LD_OWVAR 2
21032: PUSH
21033: EMPTY
21034: LIST
21035: LIST
21036: PUSH
21037: LD_INT 91
21039: PUSH
21040: LD_VAR 0 3
21044: PUSH
21045: LD_INT 30
21047: PUSH
21048: EMPTY
21049: LIST
21050: LIST
21051: LIST
21052: PUSH
21053: EMPTY
21054: LIST
21055: LIST
21056: PPUSH
21057: CALL_OW 69
21061: PPUSH
21062: LD_VAR 0 3
21066: PPUSH
21067: CALL_OW 74
21071: PPUSH
21072: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
21076: LD_VAR 0 2
21080: PUSH
21081: LD_INT 80
21083: GREATER
21084: PUSH
21085: LD_VAR 0 3
21089: PPUSH
21090: CALL_OW 301
21094: OR
21095: IFFALSE 20972
// if un then
21097: LD_VAR 0 3
21101: IFFALSE 21112
// RemoveUnit ( un ) ;
21103: LD_VAR 0 3
21107: PPUSH
21108: CALL_OW 64
// end ;
21112: PPOPN 3
21114: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
21115: LD_EXP 86
21119: IFFALSE 21235
21121: GO 21123
21123: DISABLE
21124: LD_INT 0
21126: PPUSH
21127: PPUSH
21128: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
21129: LD_ADDR_VAR 0 2
21133: PUSH
21134: LD_INT 81
21136: PUSH
21137: LD_OWVAR 2
21141: PUSH
21142: EMPTY
21143: LIST
21144: LIST
21145: PUSH
21146: LD_INT 21
21148: PUSH
21149: LD_INT 1
21151: PUSH
21152: EMPTY
21153: LIST
21154: LIST
21155: PUSH
21156: EMPTY
21157: LIST
21158: LIST
21159: PPUSH
21160: CALL_OW 69
21164: ST_TO_ADDR
// ToLua ( playComputer() ) ;
21165: LD_STRING playComputer()
21167: PPUSH
21168: CALL_OW 559
// if not tmp then
21172: LD_VAR 0 2
21176: NOT
21177: IFFALSE 21181
// exit ;
21179: GO 21235
// for i in tmp do
21181: LD_ADDR_VAR 0 1
21185: PUSH
21186: LD_VAR 0 2
21190: PUSH
21191: FOR_IN
21192: IFFALSE 21233
// for j := 1 to 4 do
21194: LD_ADDR_VAR 0 3
21198: PUSH
21199: DOUBLE
21200: LD_INT 1
21202: DEC
21203: ST_TO_ADDR
21204: LD_INT 4
21206: PUSH
21207: FOR_TO
21208: IFFALSE 21229
// SetSkill ( i , j , 10 ) ;
21210: LD_VAR 0 1
21214: PPUSH
21215: LD_VAR 0 3
21219: PPUSH
21220: LD_INT 10
21222: PPUSH
21223: CALL_OW 237
21227: GO 21207
21229: POP
21230: POP
21231: GO 21191
21233: POP
21234: POP
// end ;
21235: PPOPN 3
21237: END
// every 0 0$1 trigger s30 do var i , tmp ;
21238: LD_EXP 87
21242: IFFALSE 21311
21244: GO 21246
21246: DISABLE
21247: LD_INT 0
21249: PPUSH
21250: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
21251: LD_ADDR_VAR 0 2
21255: PUSH
21256: LD_INT 22
21258: PUSH
21259: LD_OWVAR 2
21263: PUSH
21264: EMPTY
21265: LIST
21266: LIST
21267: PPUSH
21268: CALL_OW 69
21272: ST_TO_ADDR
// if not tmp then
21273: LD_VAR 0 2
21277: NOT
21278: IFFALSE 21282
// exit ;
21280: GO 21311
// for i in tmp do
21282: LD_ADDR_VAR 0 1
21286: PUSH
21287: LD_VAR 0 2
21291: PUSH
21292: FOR_IN
21293: IFFALSE 21309
// SetLives ( i , 300 ) ;
21295: LD_VAR 0 1
21299: PPUSH
21300: LD_INT 300
21302: PPUSH
21303: CALL_OW 234
21307: GO 21292
21309: POP
21310: POP
// end ;
21311: PPOPN 2
21313: END
// every 0 0$1 trigger s60 do var i , tmp ;
21314: LD_EXP 88
21318: IFFALSE 21387
21320: GO 21322
21322: DISABLE
21323: LD_INT 0
21325: PPUSH
21326: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
21327: LD_ADDR_VAR 0 2
21331: PUSH
21332: LD_INT 22
21334: PUSH
21335: LD_OWVAR 2
21339: PUSH
21340: EMPTY
21341: LIST
21342: LIST
21343: PPUSH
21344: CALL_OW 69
21348: ST_TO_ADDR
// if not tmp then
21349: LD_VAR 0 2
21353: NOT
21354: IFFALSE 21358
// exit ;
21356: GO 21387
// for i in tmp do
21358: LD_ADDR_VAR 0 1
21362: PUSH
21363: LD_VAR 0 2
21367: PUSH
21368: FOR_IN
21369: IFFALSE 21385
// SetLives ( i , 600 ) ;
21371: LD_VAR 0 1
21375: PPUSH
21376: LD_INT 600
21378: PPUSH
21379: CALL_OW 234
21383: GO 21368
21385: POP
21386: POP
// end ;
21387: PPOPN 2
21389: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
21390: LD_INT 0
21392: PPUSH
// case cmd of 301 :
21393: LD_VAR 0 1
21397: PUSH
21398: LD_INT 301
21400: DOUBLE
21401: EQUAL
21402: IFTRUE 21406
21404: GO 21438
21406: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
21407: LD_VAR 0 6
21411: PPUSH
21412: LD_VAR 0 7
21416: PPUSH
21417: LD_VAR 0 8
21421: PPUSH
21422: LD_VAR 0 4
21426: PPUSH
21427: LD_VAR 0 5
21431: PPUSH
21432: CALL 22647 0 5
21436: GO 21559
21438: LD_INT 302
21440: DOUBLE
21441: EQUAL
21442: IFTRUE 21446
21444: GO 21483
21446: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
21447: LD_VAR 0 6
21451: PPUSH
21452: LD_VAR 0 7
21456: PPUSH
21457: LD_VAR 0 8
21461: PPUSH
21462: LD_VAR 0 9
21466: PPUSH
21467: LD_VAR 0 4
21471: PPUSH
21472: LD_VAR 0 5
21476: PPUSH
21477: CALL 22738 0 6
21481: GO 21559
21483: LD_INT 303
21485: DOUBLE
21486: EQUAL
21487: IFTRUE 21491
21489: GO 21528
21491: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
21492: LD_VAR 0 6
21496: PPUSH
21497: LD_VAR 0 7
21501: PPUSH
21502: LD_VAR 0 8
21506: PPUSH
21507: LD_VAR 0 9
21511: PPUSH
21512: LD_VAR 0 4
21516: PPUSH
21517: LD_VAR 0 5
21521: PPUSH
21522: CALL 21564 0 6
21526: GO 21559
21528: LD_INT 304
21530: DOUBLE
21531: EQUAL
21532: IFTRUE 21536
21534: GO 21558
21536: POP
// hHackTeleport ( unit , x , y ) ; end ;
21537: LD_VAR 0 2
21541: PPUSH
21542: LD_VAR 0 4
21546: PPUSH
21547: LD_VAR 0 5
21551: PPUSH
21552: CALL 23331 0 3
21556: GO 21559
21558: POP
// end ;
21559: LD_VAR 0 12
21563: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
21564: LD_INT 0
21566: PPUSH
21567: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
21568: LD_VAR 0 1
21572: PUSH
21573: LD_INT 1
21575: LESS
21576: PUSH
21577: LD_VAR 0 1
21581: PUSH
21582: LD_INT 3
21584: GREATER
21585: OR
21586: PUSH
21587: LD_VAR 0 5
21591: PPUSH
21592: LD_VAR 0 6
21596: PPUSH
21597: CALL_OW 428
21601: OR
21602: IFFALSE 21606
// exit ;
21604: GO 22334
// uc_side := your_side ;
21606: LD_ADDR_OWVAR 20
21610: PUSH
21611: LD_OWVAR 2
21615: ST_TO_ADDR
// uc_nation := nation ;
21616: LD_ADDR_OWVAR 21
21620: PUSH
21621: LD_VAR 0 1
21625: ST_TO_ADDR
// bc_level = 1 ;
21626: LD_ADDR_OWVAR 43
21630: PUSH
21631: LD_INT 1
21633: ST_TO_ADDR
// case btype of 1 :
21634: LD_VAR 0 2
21638: PUSH
21639: LD_INT 1
21641: DOUBLE
21642: EQUAL
21643: IFTRUE 21647
21645: GO 21658
21647: POP
// bc_type := b_depot ; 2 :
21648: LD_ADDR_OWVAR 42
21652: PUSH
21653: LD_INT 0
21655: ST_TO_ADDR
21656: GO 22278
21658: LD_INT 2
21660: DOUBLE
21661: EQUAL
21662: IFTRUE 21666
21664: GO 21677
21666: POP
// bc_type := b_warehouse ; 3 :
21667: LD_ADDR_OWVAR 42
21671: PUSH
21672: LD_INT 1
21674: ST_TO_ADDR
21675: GO 22278
21677: LD_INT 3
21679: DOUBLE
21680: EQUAL
21681: IFTRUE 21685
21683: GO 21696
21685: POP
// bc_type := b_lab ; 4 .. 9 :
21686: LD_ADDR_OWVAR 42
21690: PUSH
21691: LD_INT 6
21693: ST_TO_ADDR
21694: GO 22278
21696: LD_INT 4
21698: DOUBLE
21699: GREATEREQUAL
21700: IFFALSE 21708
21702: LD_INT 9
21704: DOUBLE
21705: LESSEQUAL
21706: IFTRUE 21710
21708: GO 21770
21710: POP
// begin bc_type := b_lab_half ;
21711: LD_ADDR_OWVAR 42
21715: PUSH
21716: LD_INT 7
21718: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
21719: LD_ADDR_OWVAR 44
21723: PUSH
21724: LD_INT 10
21726: PUSH
21727: LD_INT 11
21729: PUSH
21730: LD_INT 12
21732: PUSH
21733: LD_INT 15
21735: PUSH
21736: LD_INT 14
21738: PUSH
21739: LD_INT 13
21741: PUSH
21742: EMPTY
21743: LIST
21744: LIST
21745: LIST
21746: LIST
21747: LIST
21748: LIST
21749: PUSH
21750: LD_VAR 0 2
21754: PUSH
21755: LD_INT 3
21757: MINUS
21758: ARRAY
21759: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
21760: LD_ADDR_OWVAR 45
21764: PUSH
21765: LD_INT 9
21767: ST_TO_ADDR
// end ; 10 .. 13 :
21768: GO 22278
21770: LD_INT 10
21772: DOUBLE
21773: GREATEREQUAL
21774: IFFALSE 21782
21776: LD_INT 13
21778: DOUBLE
21779: LESSEQUAL
21780: IFTRUE 21784
21782: GO 21861
21784: POP
// begin bc_type := b_lab_full ;
21785: LD_ADDR_OWVAR 42
21789: PUSH
21790: LD_INT 8
21792: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
21793: LD_ADDR_OWVAR 44
21797: PUSH
21798: LD_INT 10
21800: PUSH
21801: LD_INT 12
21803: PUSH
21804: LD_INT 14
21806: PUSH
21807: LD_INT 13
21809: PUSH
21810: EMPTY
21811: LIST
21812: LIST
21813: LIST
21814: LIST
21815: PUSH
21816: LD_VAR 0 2
21820: PUSH
21821: LD_INT 9
21823: MINUS
21824: ARRAY
21825: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
21826: LD_ADDR_OWVAR 45
21830: PUSH
21831: LD_INT 11
21833: PUSH
21834: LD_INT 15
21836: PUSH
21837: LD_INT 12
21839: PUSH
21840: LD_INT 15
21842: PUSH
21843: EMPTY
21844: LIST
21845: LIST
21846: LIST
21847: LIST
21848: PUSH
21849: LD_VAR 0 2
21853: PUSH
21854: LD_INT 9
21856: MINUS
21857: ARRAY
21858: ST_TO_ADDR
// end ; 14 :
21859: GO 22278
21861: LD_INT 14
21863: DOUBLE
21864: EQUAL
21865: IFTRUE 21869
21867: GO 21880
21869: POP
// bc_type := b_workshop ; 15 :
21870: LD_ADDR_OWVAR 42
21874: PUSH
21875: LD_INT 2
21877: ST_TO_ADDR
21878: GO 22278
21880: LD_INT 15
21882: DOUBLE
21883: EQUAL
21884: IFTRUE 21888
21886: GO 21899
21888: POP
// bc_type := b_factory ; 16 :
21889: LD_ADDR_OWVAR 42
21893: PUSH
21894: LD_INT 3
21896: ST_TO_ADDR
21897: GO 22278
21899: LD_INT 16
21901: DOUBLE
21902: EQUAL
21903: IFTRUE 21907
21905: GO 21918
21907: POP
// bc_type := b_ext_gun ; 17 :
21908: LD_ADDR_OWVAR 42
21912: PUSH
21913: LD_INT 17
21915: ST_TO_ADDR
21916: GO 22278
21918: LD_INT 17
21920: DOUBLE
21921: EQUAL
21922: IFTRUE 21926
21924: GO 21954
21926: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
21927: LD_ADDR_OWVAR 42
21931: PUSH
21932: LD_INT 19
21934: PUSH
21935: LD_INT 23
21937: PUSH
21938: LD_INT 19
21940: PUSH
21941: EMPTY
21942: LIST
21943: LIST
21944: LIST
21945: PUSH
21946: LD_VAR 0 1
21950: ARRAY
21951: ST_TO_ADDR
21952: GO 22278
21954: LD_INT 18
21956: DOUBLE
21957: EQUAL
21958: IFTRUE 21962
21960: GO 21973
21962: POP
// bc_type := b_ext_radar ; 19 :
21963: LD_ADDR_OWVAR 42
21967: PUSH
21968: LD_INT 20
21970: ST_TO_ADDR
21971: GO 22278
21973: LD_INT 19
21975: DOUBLE
21976: EQUAL
21977: IFTRUE 21981
21979: GO 21992
21981: POP
// bc_type := b_ext_radio ; 20 :
21982: LD_ADDR_OWVAR 42
21986: PUSH
21987: LD_INT 22
21989: ST_TO_ADDR
21990: GO 22278
21992: LD_INT 20
21994: DOUBLE
21995: EQUAL
21996: IFTRUE 22000
21998: GO 22011
22000: POP
// bc_type := b_ext_siberium ; 21 :
22001: LD_ADDR_OWVAR 42
22005: PUSH
22006: LD_INT 21
22008: ST_TO_ADDR
22009: GO 22278
22011: LD_INT 21
22013: DOUBLE
22014: EQUAL
22015: IFTRUE 22019
22017: GO 22030
22019: POP
// bc_type := b_ext_computer ; 22 :
22020: LD_ADDR_OWVAR 42
22024: PUSH
22025: LD_INT 24
22027: ST_TO_ADDR
22028: GO 22278
22030: LD_INT 22
22032: DOUBLE
22033: EQUAL
22034: IFTRUE 22038
22036: GO 22049
22038: POP
// bc_type := b_ext_track ; 23 :
22039: LD_ADDR_OWVAR 42
22043: PUSH
22044: LD_INT 16
22046: ST_TO_ADDR
22047: GO 22278
22049: LD_INT 23
22051: DOUBLE
22052: EQUAL
22053: IFTRUE 22057
22055: GO 22068
22057: POP
// bc_type := b_ext_laser ; 24 :
22058: LD_ADDR_OWVAR 42
22062: PUSH
22063: LD_INT 25
22065: ST_TO_ADDR
22066: GO 22278
22068: LD_INT 24
22070: DOUBLE
22071: EQUAL
22072: IFTRUE 22076
22074: GO 22087
22076: POP
// bc_type := b_control_tower ; 25 :
22077: LD_ADDR_OWVAR 42
22081: PUSH
22082: LD_INT 36
22084: ST_TO_ADDR
22085: GO 22278
22087: LD_INT 25
22089: DOUBLE
22090: EQUAL
22091: IFTRUE 22095
22093: GO 22106
22095: POP
// bc_type := b_breastwork ; 26 :
22096: LD_ADDR_OWVAR 42
22100: PUSH
22101: LD_INT 31
22103: ST_TO_ADDR
22104: GO 22278
22106: LD_INT 26
22108: DOUBLE
22109: EQUAL
22110: IFTRUE 22114
22112: GO 22125
22114: POP
// bc_type := b_bunker ; 27 :
22115: LD_ADDR_OWVAR 42
22119: PUSH
22120: LD_INT 32
22122: ST_TO_ADDR
22123: GO 22278
22125: LD_INT 27
22127: DOUBLE
22128: EQUAL
22129: IFTRUE 22133
22131: GO 22144
22133: POP
// bc_type := b_turret ; 28 :
22134: LD_ADDR_OWVAR 42
22138: PUSH
22139: LD_INT 33
22141: ST_TO_ADDR
22142: GO 22278
22144: LD_INT 28
22146: DOUBLE
22147: EQUAL
22148: IFTRUE 22152
22150: GO 22163
22152: POP
// bc_type := b_armoury ; 29 :
22153: LD_ADDR_OWVAR 42
22157: PUSH
22158: LD_INT 4
22160: ST_TO_ADDR
22161: GO 22278
22163: LD_INT 29
22165: DOUBLE
22166: EQUAL
22167: IFTRUE 22171
22169: GO 22182
22171: POP
// bc_type := b_barracks ; 30 :
22172: LD_ADDR_OWVAR 42
22176: PUSH
22177: LD_INT 5
22179: ST_TO_ADDR
22180: GO 22278
22182: LD_INT 30
22184: DOUBLE
22185: EQUAL
22186: IFTRUE 22190
22188: GO 22201
22190: POP
// bc_type := b_solar_power ; 31 :
22191: LD_ADDR_OWVAR 42
22195: PUSH
22196: LD_INT 27
22198: ST_TO_ADDR
22199: GO 22278
22201: LD_INT 31
22203: DOUBLE
22204: EQUAL
22205: IFTRUE 22209
22207: GO 22220
22209: POP
// bc_type := b_oil_power ; 32 :
22210: LD_ADDR_OWVAR 42
22214: PUSH
22215: LD_INT 26
22217: ST_TO_ADDR
22218: GO 22278
22220: LD_INT 32
22222: DOUBLE
22223: EQUAL
22224: IFTRUE 22228
22226: GO 22239
22228: POP
// bc_type := b_siberite_power ; 33 :
22229: LD_ADDR_OWVAR 42
22233: PUSH
22234: LD_INT 28
22236: ST_TO_ADDR
22237: GO 22278
22239: LD_INT 33
22241: DOUBLE
22242: EQUAL
22243: IFTRUE 22247
22245: GO 22258
22247: POP
// bc_type := b_oil_mine ; 34 :
22248: LD_ADDR_OWVAR 42
22252: PUSH
22253: LD_INT 29
22255: ST_TO_ADDR
22256: GO 22278
22258: LD_INT 34
22260: DOUBLE
22261: EQUAL
22262: IFTRUE 22266
22264: GO 22277
22266: POP
// bc_type := b_siberite_mine ; end ;
22267: LD_ADDR_OWVAR 42
22271: PUSH
22272: LD_INT 30
22274: ST_TO_ADDR
22275: GO 22278
22277: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
22278: LD_ADDR_VAR 0 8
22282: PUSH
22283: LD_VAR 0 5
22287: PPUSH
22288: LD_VAR 0 6
22292: PPUSH
22293: LD_VAR 0 3
22297: PPUSH
22298: CALL_OW 47
22302: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
22303: LD_OWVAR 42
22307: PUSH
22308: LD_INT 32
22310: PUSH
22311: LD_INT 33
22313: PUSH
22314: EMPTY
22315: LIST
22316: LIST
22317: IN
22318: IFFALSE 22334
// PlaceWeaponTurret ( b , weapon ) ;
22320: LD_VAR 0 8
22324: PPUSH
22325: LD_VAR 0 4
22329: PPUSH
22330: CALL_OW 431
// end ;
22334: LD_VAR 0 7
22338: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
22339: LD_INT 0
22341: PPUSH
22342: PPUSH
22343: PPUSH
22344: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
22345: LD_ADDR_VAR 0 4
22349: PUSH
22350: LD_INT 22
22352: PUSH
22353: LD_OWVAR 2
22357: PUSH
22358: EMPTY
22359: LIST
22360: LIST
22361: PUSH
22362: LD_INT 2
22364: PUSH
22365: LD_INT 30
22367: PUSH
22368: LD_INT 0
22370: PUSH
22371: EMPTY
22372: LIST
22373: LIST
22374: PUSH
22375: LD_INT 30
22377: PUSH
22378: LD_INT 1
22380: PUSH
22381: EMPTY
22382: LIST
22383: LIST
22384: PUSH
22385: EMPTY
22386: LIST
22387: LIST
22388: LIST
22389: PUSH
22390: EMPTY
22391: LIST
22392: LIST
22393: PPUSH
22394: CALL_OW 69
22398: ST_TO_ADDR
// if not tmp then
22399: LD_VAR 0 4
22403: NOT
22404: IFFALSE 22408
// exit ;
22406: GO 22467
// for i in tmp do
22408: LD_ADDR_VAR 0 2
22412: PUSH
22413: LD_VAR 0 4
22417: PUSH
22418: FOR_IN
22419: IFFALSE 22465
// for j = 1 to 3 do
22421: LD_ADDR_VAR 0 3
22425: PUSH
22426: DOUBLE
22427: LD_INT 1
22429: DEC
22430: ST_TO_ADDR
22431: LD_INT 3
22433: PUSH
22434: FOR_TO
22435: IFFALSE 22461
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
22437: LD_VAR 0 2
22441: PPUSH
22442: CALL_OW 274
22446: PPUSH
22447: LD_VAR 0 3
22451: PPUSH
22452: LD_INT 99999
22454: PPUSH
22455: CALL_OW 277
22459: GO 22434
22461: POP
22462: POP
22463: GO 22418
22465: POP
22466: POP
// end ;
22467: LD_VAR 0 1
22471: RET
// export function hHackSetLevel10 ; var i , j ; begin
22472: LD_INT 0
22474: PPUSH
22475: PPUSH
22476: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
22477: LD_ADDR_VAR 0 2
22481: PUSH
22482: LD_INT 21
22484: PUSH
22485: LD_INT 1
22487: PUSH
22488: EMPTY
22489: LIST
22490: LIST
22491: PPUSH
22492: CALL_OW 69
22496: PUSH
22497: FOR_IN
22498: IFFALSE 22550
// if IsSelected ( i ) then
22500: LD_VAR 0 2
22504: PPUSH
22505: CALL_OW 306
22509: IFFALSE 22548
// begin for j := 1 to 4 do
22511: LD_ADDR_VAR 0 3
22515: PUSH
22516: DOUBLE
22517: LD_INT 1
22519: DEC
22520: ST_TO_ADDR
22521: LD_INT 4
22523: PUSH
22524: FOR_TO
22525: IFFALSE 22546
// SetSkill ( i , j , 10 ) ;
22527: LD_VAR 0 2
22531: PPUSH
22532: LD_VAR 0 3
22536: PPUSH
22537: LD_INT 10
22539: PPUSH
22540: CALL_OW 237
22544: GO 22524
22546: POP
22547: POP
// end ;
22548: GO 22497
22550: POP
22551: POP
// end ;
22552: LD_VAR 0 1
22556: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
22557: LD_INT 0
22559: PPUSH
22560: PPUSH
22561: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
22562: LD_ADDR_VAR 0 2
22566: PUSH
22567: LD_INT 22
22569: PUSH
22570: LD_OWVAR 2
22574: PUSH
22575: EMPTY
22576: LIST
22577: LIST
22578: PUSH
22579: LD_INT 21
22581: PUSH
22582: LD_INT 1
22584: PUSH
22585: EMPTY
22586: LIST
22587: LIST
22588: PUSH
22589: EMPTY
22590: LIST
22591: LIST
22592: PPUSH
22593: CALL_OW 69
22597: PUSH
22598: FOR_IN
22599: IFFALSE 22640
// begin for j := 1 to 4 do
22601: LD_ADDR_VAR 0 3
22605: PUSH
22606: DOUBLE
22607: LD_INT 1
22609: DEC
22610: ST_TO_ADDR
22611: LD_INT 4
22613: PUSH
22614: FOR_TO
22615: IFFALSE 22636
// SetSkill ( i , j , 10 ) ;
22617: LD_VAR 0 2
22621: PPUSH
22622: LD_VAR 0 3
22626: PPUSH
22627: LD_INT 10
22629: PPUSH
22630: CALL_OW 237
22634: GO 22614
22636: POP
22637: POP
// end ;
22638: GO 22598
22640: POP
22641: POP
// end ;
22642: LD_VAR 0 1
22646: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
22647: LD_INT 0
22649: PPUSH
// uc_side := your_side ;
22650: LD_ADDR_OWVAR 20
22654: PUSH
22655: LD_OWVAR 2
22659: ST_TO_ADDR
// uc_nation := nation ;
22660: LD_ADDR_OWVAR 21
22664: PUSH
22665: LD_VAR 0 1
22669: ST_TO_ADDR
// InitHc ;
22670: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
22674: LD_INT 0
22676: PPUSH
22677: LD_VAR 0 2
22681: PPUSH
22682: LD_VAR 0 3
22686: PPUSH
22687: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
22691: LD_VAR 0 4
22695: PPUSH
22696: LD_VAR 0 5
22700: PPUSH
22701: CALL_OW 428
22705: PUSH
22706: LD_INT 0
22708: EQUAL
22709: IFFALSE 22733
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
22711: CALL_OW 44
22715: PPUSH
22716: LD_VAR 0 4
22720: PPUSH
22721: LD_VAR 0 5
22725: PPUSH
22726: LD_INT 1
22728: PPUSH
22729: CALL_OW 48
// end ;
22733: LD_VAR 0 6
22737: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
22738: LD_INT 0
22740: PPUSH
22741: PPUSH
// uc_side := your_side ;
22742: LD_ADDR_OWVAR 20
22746: PUSH
22747: LD_OWVAR 2
22751: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
22752: LD_VAR 0 1
22756: PUSH
22757: LD_INT 1
22759: PUSH
22760: LD_INT 2
22762: PUSH
22763: LD_INT 3
22765: PUSH
22766: LD_INT 4
22768: PUSH
22769: LD_INT 5
22771: PUSH
22772: EMPTY
22773: LIST
22774: LIST
22775: LIST
22776: LIST
22777: LIST
22778: IN
22779: IFFALSE 22791
// uc_nation := nation_american else
22781: LD_ADDR_OWVAR 21
22785: PUSH
22786: LD_INT 1
22788: ST_TO_ADDR
22789: GO 22834
// if chassis in [ 11 , 12 , 13 , 14 ] then
22791: LD_VAR 0 1
22795: PUSH
22796: LD_INT 11
22798: PUSH
22799: LD_INT 12
22801: PUSH
22802: LD_INT 13
22804: PUSH
22805: LD_INT 14
22807: PUSH
22808: EMPTY
22809: LIST
22810: LIST
22811: LIST
22812: LIST
22813: IN
22814: IFFALSE 22826
// uc_nation := nation_arabian else
22816: LD_ADDR_OWVAR 21
22820: PUSH
22821: LD_INT 2
22823: ST_TO_ADDR
22824: GO 22834
// uc_nation := nation_russian ;
22826: LD_ADDR_OWVAR 21
22830: PUSH
22831: LD_INT 3
22833: ST_TO_ADDR
// vc_chassis := chassis ;
22834: LD_ADDR_OWVAR 37
22838: PUSH
22839: LD_VAR 0 1
22843: ST_TO_ADDR
// vc_engine := engine ;
22844: LD_ADDR_OWVAR 39
22848: PUSH
22849: LD_VAR 0 2
22853: ST_TO_ADDR
// vc_control := control ;
22854: LD_ADDR_OWVAR 38
22858: PUSH
22859: LD_VAR 0 3
22863: ST_TO_ADDR
// vc_weapon := weapon ;
22864: LD_ADDR_OWVAR 40
22868: PUSH
22869: LD_VAR 0 4
22873: ST_TO_ADDR
// un := CreateVehicle ;
22874: LD_ADDR_VAR 0 8
22878: PUSH
22879: CALL_OW 45
22883: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
22884: LD_VAR 0 8
22888: PPUSH
22889: LD_INT 0
22891: PPUSH
22892: LD_INT 5
22894: PPUSH
22895: CALL_OW 12
22899: PPUSH
22900: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
22904: LD_VAR 0 8
22908: PPUSH
22909: LD_VAR 0 5
22913: PPUSH
22914: LD_VAR 0 6
22918: PPUSH
22919: LD_INT 1
22921: PPUSH
22922: CALL_OW 48
// end ;
22926: LD_VAR 0 7
22930: RET
// export hInvincible ; every 1 do
22931: GO 22933
22933: DISABLE
// hInvincible := [ ] ;
22934: LD_ADDR_EXP 89
22938: PUSH
22939: EMPTY
22940: ST_TO_ADDR
22941: END
// every 10 do var i ;
22942: GO 22944
22944: DISABLE
22945: LD_INT 0
22947: PPUSH
// begin enable ;
22948: ENABLE
// if not hInvincible then
22949: LD_EXP 89
22953: NOT
22954: IFFALSE 22958
// exit ;
22956: GO 23002
// for i in hInvincible do
22958: LD_ADDR_VAR 0 1
22962: PUSH
22963: LD_EXP 89
22967: PUSH
22968: FOR_IN
22969: IFFALSE 23000
// if GetLives ( i ) < 1000 then
22971: LD_VAR 0 1
22975: PPUSH
22976: CALL_OW 256
22980: PUSH
22981: LD_INT 1000
22983: LESS
22984: IFFALSE 22998
// SetLives ( i , 1000 ) ;
22986: LD_VAR 0 1
22990: PPUSH
22991: LD_INT 1000
22993: PPUSH
22994: CALL_OW 234
22998: GO 22968
23000: POP
23001: POP
// end ;
23002: PPOPN 1
23004: END
// export function hHackInvincible ; var i ; begin
23005: LD_INT 0
23007: PPUSH
23008: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
23009: LD_ADDR_VAR 0 2
23013: PUSH
23014: LD_INT 2
23016: PUSH
23017: LD_INT 21
23019: PUSH
23020: LD_INT 1
23022: PUSH
23023: EMPTY
23024: LIST
23025: LIST
23026: PUSH
23027: LD_INT 21
23029: PUSH
23030: LD_INT 2
23032: PUSH
23033: EMPTY
23034: LIST
23035: LIST
23036: PUSH
23037: EMPTY
23038: LIST
23039: LIST
23040: LIST
23041: PPUSH
23042: CALL_OW 69
23046: PUSH
23047: FOR_IN
23048: IFFALSE 23109
// if IsSelected ( i ) then
23050: LD_VAR 0 2
23054: PPUSH
23055: CALL_OW 306
23059: IFFALSE 23107
// begin if i in hInvincible then
23061: LD_VAR 0 2
23065: PUSH
23066: LD_EXP 89
23070: IN
23071: IFFALSE 23091
// hInvincible := hInvincible diff i else
23073: LD_ADDR_EXP 89
23077: PUSH
23078: LD_EXP 89
23082: PUSH
23083: LD_VAR 0 2
23087: DIFF
23088: ST_TO_ADDR
23089: GO 23107
// hInvincible := hInvincible union i ;
23091: LD_ADDR_EXP 89
23095: PUSH
23096: LD_EXP 89
23100: PUSH
23101: LD_VAR 0 2
23105: UNION
23106: ST_TO_ADDR
// end ;
23107: GO 23047
23109: POP
23110: POP
// end ;
23111: LD_VAR 0 1
23115: RET
// export function hHackInvisible ; var i , j ; begin
23116: LD_INT 0
23118: PPUSH
23119: PPUSH
23120: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
23121: LD_ADDR_VAR 0 2
23125: PUSH
23126: LD_INT 21
23128: PUSH
23129: LD_INT 1
23131: PUSH
23132: EMPTY
23133: LIST
23134: LIST
23135: PPUSH
23136: CALL_OW 69
23140: PUSH
23141: FOR_IN
23142: IFFALSE 23166
// if IsSelected ( i ) then
23144: LD_VAR 0 2
23148: PPUSH
23149: CALL_OW 306
23153: IFFALSE 23164
// ComForceInvisible ( i ) ;
23155: LD_VAR 0 2
23159: PPUSH
23160: CALL_OW 496
23164: GO 23141
23166: POP
23167: POP
// end ;
23168: LD_VAR 0 1
23172: RET
// export function hHackChangeYourSide ; begin
23173: LD_INT 0
23175: PPUSH
// if your_side = 8 then
23176: LD_OWVAR 2
23180: PUSH
23181: LD_INT 8
23183: EQUAL
23184: IFFALSE 23196
// your_side := 0 else
23186: LD_ADDR_OWVAR 2
23190: PUSH
23191: LD_INT 0
23193: ST_TO_ADDR
23194: GO 23210
// your_side := your_side + 1 ;
23196: LD_ADDR_OWVAR 2
23200: PUSH
23201: LD_OWVAR 2
23205: PUSH
23206: LD_INT 1
23208: PLUS
23209: ST_TO_ADDR
// end ;
23210: LD_VAR 0 1
23214: RET
// export function hHackChangeUnitSide ; var i , j ; begin
23215: LD_INT 0
23217: PPUSH
23218: PPUSH
23219: PPUSH
// for i in all_units do
23220: LD_ADDR_VAR 0 2
23224: PUSH
23225: LD_OWVAR 3
23229: PUSH
23230: FOR_IN
23231: IFFALSE 23309
// if IsSelected ( i ) then
23233: LD_VAR 0 2
23237: PPUSH
23238: CALL_OW 306
23242: IFFALSE 23307
// begin j := GetSide ( i ) ;
23244: LD_ADDR_VAR 0 3
23248: PUSH
23249: LD_VAR 0 2
23253: PPUSH
23254: CALL_OW 255
23258: ST_TO_ADDR
// if j = 8 then
23259: LD_VAR 0 3
23263: PUSH
23264: LD_INT 8
23266: EQUAL
23267: IFFALSE 23279
// j := 0 else
23269: LD_ADDR_VAR 0 3
23273: PUSH
23274: LD_INT 0
23276: ST_TO_ADDR
23277: GO 23293
// j := j + 1 ;
23279: LD_ADDR_VAR 0 3
23283: PUSH
23284: LD_VAR 0 3
23288: PUSH
23289: LD_INT 1
23291: PLUS
23292: ST_TO_ADDR
// SetSide ( i , j ) ;
23293: LD_VAR 0 2
23297: PPUSH
23298: LD_VAR 0 3
23302: PPUSH
23303: CALL_OW 235
// end ;
23307: GO 23230
23309: POP
23310: POP
// end ;
23311: LD_VAR 0 1
23315: RET
// export function hHackFog ; begin
23316: LD_INT 0
23318: PPUSH
// FogOff ( true ) ;
23319: LD_INT 1
23321: PPUSH
23322: CALL_OW 344
// end ;
23326: LD_VAR 0 1
23330: RET
// export function hHackTeleport ( unit , x , y ) ; begin
23331: LD_INT 0
23333: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
23334: LD_VAR 0 1
23338: PPUSH
23339: LD_VAR 0 2
23343: PPUSH
23344: LD_VAR 0 3
23348: PPUSH
23349: LD_INT 1
23351: PPUSH
23352: LD_INT 1
23354: PPUSH
23355: CALL_OW 483
// CenterOnXY ( x , y ) ;
23359: LD_VAR 0 2
23363: PPUSH
23364: LD_VAR 0 3
23368: PPUSH
23369: CALL_OW 84
// end ;
23373: LD_VAR 0 4
23377: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
23378: LD_INT 0
23380: PPUSH
23381: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
23382: LD_VAR 0 1
23386: NOT
23387: PUSH
23388: LD_VAR 0 2
23392: PPUSH
23393: LD_VAR 0 3
23397: PPUSH
23398: CALL_OW 488
23402: NOT
23403: OR
23404: PUSH
23405: LD_VAR 0 1
23409: PPUSH
23410: CALL_OW 266
23414: PUSH
23415: LD_INT 3
23417: NONEQUAL
23418: PUSH
23419: LD_VAR 0 1
23423: PPUSH
23424: CALL_OW 247
23428: PUSH
23429: LD_INT 1
23431: EQUAL
23432: NOT
23433: AND
23434: OR
23435: IFFALSE 23439
// exit ;
23437: GO 23588
// if GetType ( factory ) = unit_human then
23439: LD_VAR 0 1
23443: PPUSH
23444: CALL_OW 247
23448: PUSH
23449: LD_INT 1
23451: EQUAL
23452: IFFALSE 23469
// factory := IsInUnit ( factory ) ;
23454: LD_ADDR_VAR 0 1
23458: PUSH
23459: LD_VAR 0 1
23463: PPUSH
23464: CALL_OW 310
23468: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
23469: LD_VAR 0 1
23473: PPUSH
23474: CALL_OW 266
23478: PUSH
23479: LD_INT 3
23481: NONEQUAL
23482: IFFALSE 23486
// exit ;
23484: GO 23588
// if HexInfo ( x , y ) = factory then
23486: LD_VAR 0 2
23490: PPUSH
23491: LD_VAR 0 3
23495: PPUSH
23496: CALL_OW 428
23500: PUSH
23501: LD_VAR 0 1
23505: EQUAL
23506: IFFALSE 23533
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
23508: LD_ADDR_EXP 90
23512: PUSH
23513: LD_EXP 90
23517: PPUSH
23518: LD_VAR 0 1
23522: PPUSH
23523: LD_INT 0
23525: PPUSH
23526: CALL_OW 1
23530: ST_TO_ADDR
23531: GO 23584
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
23533: LD_ADDR_EXP 90
23537: PUSH
23538: LD_EXP 90
23542: PPUSH
23543: LD_VAR 0 1
23547: PPUSH
23548: LD_VAR 0 1
23552: PPUSH
23553: CALL_OW 255
23557: PUSH
23558: LD_VAR 0 1
23562: PUSH
23563: LD_VAR 0 2
23567: PUSH
23568: LD_VAR 0 3
23572: PUSH
23573: EMPTY
23574: LIST
23575: LIST
23576: LIST
23577: LIST
23578: PPUSH
23579: CALL_OW 1
23583: ST_TO_ADDR
// UpdateFactoryWaypoints ;
23584: CALL 23593 0 0
// end ;
23588: LD_VAR 0 4
23592: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
23593: LD_INT 0
23595: PPUSH
23596: PPUSH
23597: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
23598: LD_STRING resetFactoryWaypoint();
23600: PPUSH
23601: CALL_OW 559
// if factoryWaypoints then
23605: LD_EXP 90
23609: IFFALSE 23735
// begin list := PrepareArray ( factoryWaypoints ) ;
23611: LD_ADDR_VAR 0 3
23615: PUSH
23616: LD_EXP 90
23620: PPUSH
23621: CALL 71032 0 1
23625: ST_TO_ADDR
// for i := 1 to list do
23626: LD_ADDR_VAR 0 2
23630: PUSH
23631: DOUBLE
23632: LD_INT 1
23634: DEC
23635: ST_TO_ADDR
23636: LD_VAR 0 3
23640: PUSH
23641: FOR_TO
23642: IFFALSE 23733
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
23644: LD_STRING setFactoryWaypointXY(
23646: PUSH
23647: LD_VAR 0 3
23651: PUSH
23652: LD_VAR 0 2
23656: ARRAY
23657: PUSH
23658: LD_INT 1
23660: ARRAY
23661: STR
23662: PUSH
23663: LD_STRING ,
23665: STR
23666: PUSH
23667: LD_VAR 0 3
23671: PUSH
23672: LD_VAR 0 2
23676: ARRAY
23677: PUSH
23678: LD_INT 2
23680: ARRAY
23681: STR
23682: PUSH
23683: LD_STRING ,
23685: STR
23686: PUSH
23687: LD_VAR 0 3
23691: PUSH
23692: LD_VAR 0 2
23696: ARRAY
23697: PUSH
23698: LD_INT 3
23700: ARRAY
23701: STR
23702: PUSH
23703: LD_STRING ,
23705: STR
23706: PUSH
23707: LD_VAR 0 3
23711: PUSH
23712: LD_VAR 0 2
23716: ARRAY
23717: PUSH
23718: LD_INT 4
23720: ARRAY
23721: STR
23722: PUSH
23723: LD_STRING )
23725: STR
23726: PPUSH
23727: CALL_OW 559
23731: GO 23641
23733: POP
23734: POP
// end ; end ;
23735: LD_VAR 0 1
23739: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
23740: LD_INT 0
23742: PPUSH
// if HexInfo ( x , y ) = warehouse then
23743: LD_VAR 0 2
23747: PPUSH
23748: LD_VAR 0 3
23752: PPUSH
23753: CALL_OW 428
23757: PUSH
23758: LD_VAR 0 1
23762: EQUAL
23763: IFFALSE 23790
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
23765: LD_ADDR_EXP 91
23769: PUSH
23770: LD_EXP 91
23774: PPUSH
23775: LD_VAR 0 1
23779: PPUSH
23780: LD_INT 0
23782: PPUSH
23783: CALL_OW 1
23787: ST_TO_ADDR
23788: GO 23841
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
23790: LD_ADDR_EXP 91
23794: PUSH
23795: LD_EXP 91
23799: PPUSH
23800: LD_VAR 0 1
23804: PPUSH
23805: LD_VAR 0 1
23809: PPUSH
23810: CALL_OW 255
23814: PUSH
23815: LD_VAR 0 1
23819: PUSH
23820: LD_VAR 0 2
23824: PUSH
23825: LD_VAR 0 3
23829: PUSH
23830: EMPTY
23831: LIST
23832: LIST
23833: LIST
23834: LIST
23835: PPUSH
23836: CALL_OW 1
23840: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
23841: CALL 23850 0 0
// end ;
23845: LD_VAR 0 4
23849: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
23850: LD_INT 0
23852: PPUSH
23853: PPUSH
23854: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
23855: LD_STRING resetWarehouseGatheringPoints();
23857: PPUSH
23858: CALL_OW 559
// if warehouseGatheringPoints then
23862: LD_EXP 91
23866: IFFALSE 23992
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
23868: LD_ADDR_VAR 0 3
23872: PUSH
23873: LD_EXP 91
23877: PPUSH
23878: CALL 71032 0 1
23882: ST_TO_ADDR
// for i := 1 to list do
23883: LD_ADDR_VAR 0 2
23887: PUSH
23888: DOUBLE
23889: LD_INT 1
23891: DEC
23892: ST_TO_ADDR
23893: LD_VAR 0 3
23897: PUSH
23898: FOR_TO
23899: IFFALSE 23990
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
23901: LD_STRING setWarehouseGatheringPointXY(
23903: PUSH
23904: LD_VAR 0 3
23908: PUSH
23909: LD_VAR 0 2
23913: ARRAY
23914: PUSH
23915: LD_INT 1
23917: ARRAY
23918: STR
23919: PUSH
23920: LD_STRING ,
23922: STR
23923: PUSH
23924: LD_VAR 0 3
23928: PUSH
23929: LD_VAR 0 2
23933: ARRAY
23934: PUSH
23935: LD_INT 2
23937: ARRAY
23938: STR
23939: PUSH
23940: LD_STRING ,
23942: STR
23943: PUSH
23944: LD_VAR 0 3
23948: PUSH
23949: LD_VAR 0 2
23953: ARRAY
23954: PUSH
23955: LD_INT 3
23957: ARRAY
23958: STR
23959: PUSH
23960: LD_STRING ,
23962: STR
23963: PUSH
23964: LD_VAR 0 3
23968: PUSH
23969: LD_VAR 0 2
23973: ARRAY
23974: PUSH
23975: LD_INT 4
23977: ARRAY
23978: STR
23979: PUSH
23980: LD_STRING )
23982: STR
23983: PPUSH
23984: CALL_OW 559
23988: GO 23898
23990: POP
23991: POP
// end ; end ;
23992: LD_VAR 0 1
23996: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
23997: LD_EXP 91
24001: IFFALSE 24686
24003: GO 24005
24005: DISABLE
24006: LD_INT 0
24008: PPUSH
24009: PPUSH
24010: PPUSH
24011: PPUSH
24012: PPUSH
24013: PPUSH
24014: PPUSH
24015: PPUSH
24016: PPUSH
// begin enable ;
24017: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
24018: LD_ADDR_VAR 0 3
24022: PUSH
24023: LD_EXP 91
24027: PPUSH
24028: CALL 71032 0 1
24032: ST_TO_ADDR
// if not list then
24033: LD_VAR 0 3
24037: NOT
24038: IFFALSE 24042
// exit ;
24040: GO 24686
// for i := 1 to list do
24042: LD_ADDR_VAR 0 1
24046: PUSH
24047: DOUBLE
24048: LD_INT 1
24050: DEC
24051: ST_TO_ADDR
24052: LD_VAR 0 3
24056: PUSH
24057: FOR_TO
24058: IFFALSE 24684
// begin depot := list [ i ] [ 2 ] ;
24060: LD_ADDR_VAR 0 8
24064: PUSH
24065: LD_VAR 0 3
24069: PUSH
24070: LD_VAR 0 1
24074: ARRAY
24075: PUSH
24076: LD_INT 2
24078: ARRAY
24079: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
24080: LD_ADDR_VAR 0 5
24084: PUSH
24085: LD_VAR 0 3
24089: PUSH
24090: LD_VAR 0 1
24094: ARRAY
24095: PUSH
24096: LD_INT 1
24098: ARRAY
24099: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
24100: LD_VAR 0 8
24104: PPUSH
24105: CALL_OW 301
24109: PUSH
24110: LD_VAR 0 5
24114: PUSH
24115: LD_VAR 0 8
24119: PPUSH
24120: CALL_OW 255
24124: NONEQUAL
24125: OR
24126: IFFALSE 24155
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
24128: LD_ADDR_EXP 91
24132: PUSH
24133: LD_EXP 91
24137: PPUSH
24138: LD_VAR 0 8
24142: PPUSH
24143: LD_INT 0
24145: PPUSH
24146: CALL_OW 1
24150: ST_TO_ADDR
// exit ;
24151: POP
24152: POP
24153: GO 24686
// end ; x := list [ i ] [ 3 ] ;
24155: LD_ADDR_VAR 0 6
24159: PUSH
24160: LD_VAR 0 3
24164: PUSH
24165: LD_VAR 0 1
24169: ARRAY
24170: PUSH
24171: LD_INT 3
24173: ARRAY
24174: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
24175: LD_ADDR_VAR 0 7
24179: PUSH
24180: LD_VAR 0 3
24184: PUSH
24185: LD_VAR 0 1
24189: ARRAY
24190: PUSH
24191: LD_INT 4
24193: ARRAY
24194: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
24195: LD_ADDR_VAR 0 9
24199: PUSH
24200: LD_VAR 0 6
24204: PPUSH
24205: LD_VAR 0 7
24209: PPUSH
24210: LD_INT 16
24212: PPUSH
24213: CALL 69620 0 3
24217: ST_TO_ADDR
// if not cratesNearbyPoint then
24218: LD_VAR 0 9
24222: NOT
24223: IFFALSE 24229
// exit ;
24225: POP
24226: POP
24227: GO 24686
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
24229: LD_ADDR_VAR 0 4
24233: PUSH
24234: LD_INT 22
24236: PUSH
24237: LD_VAR 0 5
24241: PUSH
24242: EMPTY
24243: LIST
24244: LIST
24245: PUSH
24246: LD_INT 3
24248: PUSH
24249: LD_INT 60
24251: PUSH
24252: EMPTY
24253: LIST
24254: PUSH
24255: EMPTY
24256: LIST
24257: LIST
24258: PUSH
24259: LD_INT 91
24261: PUSH
24262: LD_VAR 0 8
24266: PUSH
24267: LD_INT 6
24269: PUSH
24270: EMPTY
24271: LIST
24272: LIST
24273: LIST
24274: PUSH
24275: LD_INT 2
24277: PUSH
24278: LD_INT 25
24280: PUSH
24281: LD_INT 2
24283: PUSH
24284: EMPTY
24285: LIST
24286: LIST
24287: PUSH
24288: LD_INT 25
24290: PUSH
24291: LD_INT 16
24293: PUSH
24294: EMPTY
24295: LIST
24296: LIST
24297: PUSH
24298: EMPTY
24299: LIST
24300: LIST
24301: LIST
24302: PUSH
24303: EMPTY
24304: LIST
24305: LIST
24306: LIST
24307: LIST
24308: PPUSH
24309: CALL_OW 69
24313: PUSH
24314: LD_VAR 0 8
24318: PPUSH
24319: CALL_OW 313
24323: PPUSH
24324: LD_INT 3
24326: PUSH
24327: LD_INT 60
24329: PUSH
24330: EMPTY
24331: LIST
24332: PUSH
24333: EMPTY
24334: LIST
24335: LIST
24336: PUSH
24337: LD_INT 2
24339: PUSH
24340: LD_INT 25
24342: PUSH
24343: LD_INT 2
24345: PUSH
24346: EMPTY
24347: LIST
24348: LIST
24349: PUSH
24350: LD_INT 25
24352: PUSH
24353: LD_INT 16
24355: PUSH
24356: EMPTY
24357: LIST
24358: LIST
24359: PUSH
24360: EMPTY
24361: LIST
24362: LIST
24363: LIST
24364: PUSH
24365: EMPTY
24366: LIST
24367: LIST
24368: PPUSH
24369: CALL_OW 72
24373: UNION
24374: ST_TO_ADDR
// if tmp then
24375: LD_VAR 0 4
24379: IFFALSE 24459
// begin tmp := ShrinkArray ( tmp , 3 ) ;
24381: LD_ADDR_VAR 0 4
24385: PUSH
24386: LD_VAR 0 4
24390: PPUSH
24391: LD_INT 3
24393: PPUSH
24394: CALL 67589 0 2
24398: ST_TO_ADDR
// for j in tmp do
24399: LD_ADDR_VAR 0 2
24403: PUSH
24404: LD_VAR 0 4
24408: PUSH
24409: FOR_IN
24410: IFFALSE 24453
// begin if IsInUnit ( j ) then
24412: LD_VAR 0 2
24416: PPUSH
24417: CALL_OW 310
24421: IFFALSE 24432
// ComExit ( j ) ;
24423: LD_VAR 0 2
24427: PPUSH
24428: CALL 67672 0 1
// AddComCollect ( j , x , y ) ;
24432: LD_VAR 0 2
24436: PPUSH
24437: LD_VAR 0 6
24441: PPUSH
24442: LD_VAR 0 7
24446: PPUSH
24447: CALL_OW 177
// end ;
24451: GO 24409
24453: POP
24454: POP
// exit ;
24455: POP
24456: POP
24457: GO 24686
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
24459: LD_ADDR_VAR 0 4
24463: PUSH
24464: LD_INT 22
24466: PUSH
24467: LD_VAR 0 5
24471: PUSH
24472: EMPTY
24473: LIST
24474: LIST
24475: PUSH
24476: LD_INT 91
24478: PUSH
24479: LD_VAR 0 8
24483: PUSH
24484: LD_INT 8
24486: PUSH
24487: EMPTY
24488: LIST
24489: LIST
24490: LIST
24491: PUSH
24492: LD_INT 2
24494: PUSH
24495: LD_INT 34
24497: PUSH
24498: LD_INT 12
24500: PUSH
24501: EMPTY
24502: LIST
24503: LIST
24504: PUSH
24505: LD_INT 34
24507: PUSH
24508: LD_INT 51
24510: PUSH
24511: EMPTY
24512: LIST
24513: LIST
24514: PUSH
24515: LD_INT 34
24517: PUSH
24518: LD_INT 32
24520: PUSH
24521: EMPTY
24522: LIST
24523: LIST
24524: PUSH
24525: LD_INT 34
24527: PUSH
24528: LD_INT 89
24530: PUSH
24531: EMPTY
24532: LIST
24533: LIST
24534: PUSH
24535: EMPTY
24536: LIST
24537: LIST
24538: LIST
24539: LIST
24540: LIST
24541: PUSH
24542: EMPTY
24543: LIST
24544: LIST
24545: LIST
24546: PPUSH
24547: CALL_OW 69
24551: ST_TO_ADDR
// if tmp then
24552: LD_VAR 0 4
24556: IFFALSE 24682
// begin for j in tmp do
24558: LD_ADDR_VAR 0 2
24562: PUSH
24563: LD_VAR 0 4
24567: PUSH
24568: FOR_IN
24569: IFFALSE 24680
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
24571: LD_VAR 0 2
24575: PPUSH
24576: CALL_OW 262
24580: PUSH
24581: LD_INT 3
24583: EQUAL
24584: PUSH
24585: LD_VAR 0 2
24589: PPUSH
24590: CALL_OW 261
24594: PUSH
24595: LD_INT 20
24597: GREATER
24598: OR
24599: PUSH
24600: LD_VAR 0 2
24604: PPUSH
24605: CALL_OW 314
24609: NOT
24610: AND
24611: PUSH
24612: LD_VAR 0 2
24616: PPUSH
24617: CALL_OW 263
24621: PUSH
24622: LD_INT 1
24624: NONEQUAL
24625: PUSH
24626: LD_VAR 0 2
24630: PPUSH
24631: CALL_OW 311
24635: OR
24636: AND
24637: IFFALSE 24678
// begin ComCollect ( j , x , y ) ;
24639: LD_VAR 0 2
24643: PPUSH
24644: LD_VAR 0 6
24648: PPUSH
24649: LD_VAR 0 7
24653: PPUSH
24654: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
24658: LD_VAR 0 2
24662: PPUSH
24663: LD_VAR 0 8
24667: PPUSH
24668: CALL_OW 172
// exit ;
24672: POP
24673: POP
24674: POP
24675: POP
24676: GO 24686
// end ;
24678: GO 24568
24680: POP
24681: POP
// end ; end ;
24682: GO 24057
24684: POP
24685: POP
// end ; end_of_file
24686: PPOPN 9
24688: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
24689: LD_INT 0
24691: PPUSH
24692: PPUSH
24693: PPUSH
24694: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
24695: LD_VAR 0 1
24699: PPUSH
24700: CALL_OW 264
24704: PUSH
24705: LD_INT 91
24707: EQUAL
24708: IFFALSE 24780
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
24710: LD_INT 68
24712: PPUSH
24713: LD_VAR 0 1
24717: PPUSH
24718: CALL_OW 255
24722: PPUSH
24723: CALL_OW 321
24727: PUSH
24728: LD_INT 2
24730: EQUAL
24731: IFFALSE 24743
// eff := 70 else
24733: LD_ADDR_VAR 0 4
24737: PUSH
24738: LD_INT 70
24740: ST_TO_ADDR
24741: GO 24751
// eff := 30 ;
24743: LD_ADDR_VAR 0 4
24747: PUSH
24748: LD_INT 30
24750: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
24751: LD_VAR 0 1
24755: PPUSH
24756: CALL_OW 250
24760: PPUSH
24761: LD_VAR 0 1
24765: PPUSH
24766: CALL_OW 251
24770: PPUSH
24771: LD_VAR 0 4
24775: PPUSH
24776: CALL_OW 495
// end ; end ;
24780: LD_VAR 0 2
24784: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
24785: LD_INT 0
24787: PPUSH
// end ;
24788: LD_VAR 0 4
24792: RET
// export function SOS_Command ( cmd ) ; begin
24793: LD_INT 0
24795: PPUSH
// end ;
24796: LD_VAR 0 2
24800: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
24801: LD_INT 0
24803: PPUSH
// end ;
24804: LD_VAR 0 6
24808: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
24809: LD_INT 0
24811: PPUSH
24812: PPUSH
// if not vehicle or not factory then
24813: LD_VAR 0 1
24817: NOT
24818: PUSH
24819: LD_VAR 0 2
24823: NOT
24824: OR
24825: IFFALSE 24829
// exit ;
24827: GO 25060
// if factoryWaypoints >= factory then
24829: LD_EXP 90
24833: PUSH
24834: LD_VAR 0 2
24838: GREATEREQUAL
24839: IFFALSE 25060
// if factoryWaypoints [ factory ] then
24841: LD_EXP 90
24845: PUSH
24846: LD_VAR 0 2
24850: ARRAY
24851: IFFALSE 25060
// begin if GetControl ( vehicle ) = control_manual then
24853: LD_VAR 0 1
24857: PPUSH
24858: CALL_OW 263
24862: PUSH
24863: LD_INT 1
24865: EQUAL
24866: IFFALSE 24947
// begin driver := IsDrivenBy ( vehicle ) ;
24868: LD_ADDR_VAR 0 4
24872: PUSH
24873: LD_VAR 0 1
24877: PPUSH
24878: CALL_OW 311
24882: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
24883: LD_VAR 0 4
24887: PPUSH
24888: LD_EXP 90
24892: PUSH
24893: LD_VAR 0 2
24897: ARRAY
24898: PUSH
24899: LD_INT 3
24901: ARRAY
24902: PPUSH
24903: LD_EXP 90
24907: PUSH
24908: LD_VAR 0 2
24912: ARRAY
24913: PUSH
24914: LD_INT 4
24916: ARRAY
24917: PPUSH
24918: CALL_OW 171
// AddComExitVehicle ( driver ) ;
24922: LD_VAR 0 4
24926: PPUSH
24927: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
24931: LD_VAR 0 4
24935: PPUSH
24936: LD_VAR 0 2
24940: PPUSH
24941: CALL_OW 180
// end else
24945: GO 25060
// if GetControl ( vehicle ) = control_remote then
24947: LD_VAR 0 1
24951: PPUSH
24952: CALL_OW 263
24956: PUSH
24957: LD_INT 2
24959: EQUAL
24960: IFFALSE 25021
// begin wait ( 0 0$2 ) ;
24962: LD_INT 70
24964: PPUSH
24965: CALL_OW 67
// if Connect ( vehicle ) then
24969: LD_VAR 0 1
24973: PPUSH
24974: CALL 37891 0 1
24978: IFFALSE 25019
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
24980: LD_VAR 0 1
24984: PPUSH
24985: LD_EXP 90
24989: PUSH
24990: LD_VAR 0 2
24994: ARRAY
24995: PUSH
24996: LD_INT 3
24998: ARRAY
24999: PPUSH
25000: LD_EXP 90
25004: PUSH
25005: LD_VAR 0 2
25009: ARRAY
25010: PUSH
25011: LD_INT 4
25013: ARRAY
25014: PPUSH
25015: CALL_OW 171
// end else
25019: GO 25060
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
25021: LD_VAR 0 1
25025: PPUSH
25026: LD_EXP 90
25030: PUSH
25031: LD_VAR 0 2
25035: ARRAY
25036: PUSH
25037: LD_INT 3
25039: ARRAY
25040: PPUSH
25041: LD_EXP 90
25045: PUSH
25046: LD_VAR 0 2
25050: ARRAY
25051: PUSH
25052: LD_INT 4
25054: ARRAY
25055: PPUSH
25056: CALL_OW 171
// end ; end ;
25060: LD_VAR 0 3
25064: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
25065: LD_INT 0
25067: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
25068: LD_VAR 0 1
25072: PUSH
25073: LD_INT 250
25075: EQUAL
25076: PUSH
25077: LD_VAR 0 2
25081: PPUSH
25082: CALL_OW 264
25086: PUSH
25087: LD_INT 81
25089: EQUAL
25090: AND
25091: IFFALSE 25112
// MinerPlaceMine ( unit , x , y ) ;
25093: LD_VAR 0 2
25097: PPUSH
25098: LD_VAR 0 4
25102: PPUSH
25103: LD_VAR 0 5
25107: PPUSH
25108: CALL 28102 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
25112: LD_VAR 0 1
25116: PUSH
25117: LD_INT 251
25119: EQUAL
25120: PUSH
25121: LD_VAR 0 2
25125: PPUSH
25126: CALL_OW 264
25130: PUSH
25131: LD_INT 81
25133: EQUAL
25134: AND
25135: IFFALSE 25156
// MinerDetonateMine ( unit , x , y ) ;
25137: LD_VAR 0 2
25141: PPUSH
25142: LD_VAR 0 4
25146: PPUSH
25147: LD_VAR 0 5
25151: PPUSH
25152: CALL 28377 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
25156: LD_VAR 0 1
25160: PUSH
25161: LD_INT 252
25163: EQUAL
25164: PUSH
25165: LD_VAR 0 2
25169: PPUSH
25170: CALL_OW 264
25174: PUSH
25175: LD_INT 81
25177: EQUAL
25178: AND
25179: IFFALSE 25200
// MinerCreateMinefield ( unit , x , y ) ;
25181: LD_VAR 0 2
25185: PPUSH
25186: LD_VAR 0 4
25190: PPUSH
25191: LD_VAR 0 5
25195: PPUSH
25196: CALL 28794 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
25200: LD_VAR 0 1
25204: PUSH
25205: LD_INT 253
25207: EQUAL
25208: PUSH
25209: LD_VAR 0 2
25213: PPUSH
25214: CALL_OW 257
25218: PUSH
25219: LD_INT 5
25221: EQUAL
25222: AND
25223: IFFALSE 25244
// ComBinocular ( unit , x , y ) ;
25225: LD_VAR 0 2
25229: PPUSH
25230: LD_VAR 0 4
25234: PPUSH
25235: LD_VAR 0 5
25239: PPUSH
25240: CALL 29163 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
25244: LD_VAR 0 1
25248: PUSH
25249: LD_INT 254
25251: EQUAL
25252: PUSH
25253: LD_VAR 0 2
25257: PPUSH
25258: CALL_OW 264
25262: PUSH
25263: LD_INT 99
25265: EQUAL
25266: AND
25267: PUSH
25268: LD_VAR 0 3
25272: PPUSH
25273: CALL_OW 263
25277: PUSH
25278: LD_INT 3
25280: EQUAL
25281: AND
25282: IFFALSE 25298
// HackDestroyVehicle ( unit , selectedUnit ) ;
25284: LD_VAR 0 2
25288: PPUSH
25289: LD_VAR 0 3
25293: PPUSH
25294: CALL 27466 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
25298: LD_VAR 0 1
25302: PUSH
25303: LD_INT 255
25305: EQUAL
25306: PUSH
25307: LD_VAR 0 2
25311: PPUSH
25312: CALL_OW 264
25316: PUSH
25317: LD_INT 14
25319: PUSH
25320: LD_INT 53
25322: PUSH
25323: EMPTY
25324: LIST
25325: LIST
25326: IN
25327: AND
25328: PUSH
25329: LD_VAR 0 4
25333: PPUSH
25334: LD_VAR 0 5
25338: PPUSH
25339: CALL_OW 488
25343: AND
25344: IFFALSE 25368
// CutTreeXYR ( unit , x , y , 12 ) ;
25346: LD_VAR 0 2
25350: PPUSH
25351: LD_VAR 0 4
25355: PPUSH
25356: LD_VAR 0 5
25360: PPUSH
25361: LD_INT 12
25363: PPUSH
25364: CALL 25463 0 4
// if cmd = 256 then
25368: LD_VAR 0 1
25372: PUSH
25373: LD_INT 256
25375: EQUAL
25376: IFFALSE 25397
// SetFactoryWaypoint ( unit , x , y ) ;
25378: LD_VAR 0 2
25382: PPUSH
25383: LD_VAR 0 4
25387: PPUSH
25388: LD_VAR 0 5
25392: PPUSH
25393: CALL 23378 0 3
// if cmd = 257 then
25397: LD_VAR 0 1
25401: PUSH
25402: LD_INT 257
25404: EQUAL
25405: IFFALSE 25426
// SetWarehouseGatheringPoint ( unit , x , y ) ;
25407: LD_VAR 0 2
25411: PPUSH
25412: LD_VAR 0 4
25416: PPUSH
25417: LD_VAR 0 5
25421: PPUSH
25422: CALL 23740 0 3
// if cmd = 258 then
25426: LD_VAR 0 1
25430: PUSH
25431: LD_INT 258
25433: EQUAL
25434: IFFALSE 25458
// BurnTreeXYR ( unit , x , y , 8 ) ;
25436: LD_VAR 0 2
25440: PPUSH
25441: LD_VAR 0 4
25445: PPUSH
25446: LD_VAR 0 5
25450: PPUSH
25451: LD_INT 8
25453: PPUSH
25454: CALL 25857 0 4
// end ;
25458: LD_VAR 0 6
25462: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
25463: LD_INT 0
25465: PPUSH
25466: PPUSH
25467: PPUSH
25468: PPUSH
25469: PPUSH
25470: PPUSH
25471: PPUSH
25472: PPUSH
25473: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
25474: LD_VAR 0 1
25478: PPUSH
25479: CALL_OW 302
25483: NOT
25484: PUSH
25485: LD_VAR 0 2
25489: PPUSH
25490: LD_VAR 0 3
25494: PPUSH
25495: CALL_OW 488
25499: NOT
25500: OR
25501: PUSH
25502: LD_VAR 0 4
25506: NOT
25507: OR
25508: IFFALSE 25512
// exit ;
25510: GO 25852
// list := [ ] ;
25512: LD_ADDR_VAR 0 13
25516: PUSH
25517: EMPTY
25518: ST_TO_ADDR
// if x - r < 0 then
25519: LD_VAR 0 2
25523: PUSH
25524: LD_VAR 0 4
25528: MINUS
25529: PUSH
25530: LD_INT 0
25532: LESS
25533: IFFALSE 25545
// min_x := 0 else
25535: LD_ADDR_VAR 0 7
25539: PUSH
25540: LD_INT 0
25542: ST_TO_ADDR
25543: GO 25561
// min_x := x - r ;
25545: LD_ADDR_VAR 0 7
25549: PUSH
25550: LD_VAR 0 2
25554: PUSH
25555: LD_VAR 0 4
25559: MINUS
25560: ST_TO_ADDR
// if y - r < 0 then
25561: LD_VAR 0 3
25565: PUSH
25566: LD_VAR 0 4
25570: MINUS
25571: PUSH
25572: LD_INT 0
25574: LESS
25575: IFFALSE 25587
// min_y := 0 else
25577: LD_ADDR_VAR 0 8
25581: PUSH
25582: LD_INT 0
25584: ST_TO_ADDR
25585: GO 25603
// min_y := y - r ;
25587: LD_ADDR_VAR 0 8
25591: PUSH
25592: LD_VAR 0 3
25596: PUSH
25597: LD_VAR 0 4
25601: MINUS
25602: ST_TO_ADDR
// max_x := x + r ;
25603: LD_ADDR_VAR 0 9
25607: PUSH
25608: LD_VAR 0 2
25612: PUSH
25613: LD_VAR 0 4
25617: PLUS
25618: ST_TO_ADDR
// max_y := y + r ;
25619: LD_ADDR_VAR 0 10
25623: PUSH
25624: LD_VAR 0 3
25628: PUSH
25629: LD_VAR 0 4
25633: PLUS
25634: ST_TO_ADDR
// for _x = min_x to max_x do
25635: LD_ADDR_VAR 0 11
25639: PUSH
25640: DOUBLE
25641: LD_VAR 0 7
25645: DEC
25646: ST_TO_ADDR
25647: LD_VAR 0 9
25651: PUSH
25652: FOR_TO
25653: IFFALSE 25770
// for _y = min_y to max_y do
25655: LD_ADDR_VAR 0 12
25659: PUSH
25660: DOUBLE
25661: LD_VAR 0 8
25665: DEC
25666: ST_TO_ADDR
25667: LD_VAR 0 10
25671: PUSH
25672: FOR_TO
25673: IFFALSE 25766
// begin if not ValidHex ( _x , _y ) then
25675: LD_VAR 0 11
25679: PPUSH
25680: LD_VAR 0 12
25684: PPUSH
25685: CALL_OW 488
25689: NOT
25690: IFFALSE 25694
// continue ;
25692: GO 25672
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
25694: LD_VAR 0 11
25698: PPUSH
25699: LD_VAR 0 12
25703: PPUSH
25704: CALL_OW 351
25708: PUSH
25709: LD_VAR 0 11
25713: PPUSH
25714: LD_VAR 0 12
25718: PPUSH
25719: CALL_OW 554
25723: AND
25724: IFFALSE 25764
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
25726: LD_ADDR_VAR 0 13
25730: PUSH
25731: LD_VAR 0 13
25735: PPUSH
25736: LD_VAR 0 13
25740: PUSH
25741: LD_INT 1
25743: PLUS
25744: PPUSH
25745: LD_VAR 0 11
25749: PUSH
25750: LD_VAR 0 12
25754: PUSH
25755: EMPTY
25756: LIST
25757: LIST
25758: PPUSH
25759: CALL_OW 2
25763: ST_TO_ADDR
// end ;
25764: GO 25672
25766: POP
25767: POP
25768: GO 25652
25770: POP
25771: POP
// if not list then
25772: LD_VAR 0 13
25776: NOT
25777: IFFALSE 25781
// exit ;
25779: GO 25852
// for i in list do
25781: LD_ADDR_VAR 0 6
25785: PUSH
25786: LD_VAR 0 13
25790: PUSH
25791: FOR_IN
25792: IFFALSE 25850
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
25794: LD_VAR 0 1
25798: PPUSH
25799: LD_STRING M
25801: PUSH
25802: LD_VAR 0 6
25806: PUSH
25807: LD_INT 1
25809: ARRAY
25810: PUSH
25811: LD_VAR 0 6
25815: PUSH
25816: LD_INT 2
25818: ARRAY
25819: PUSH
25820: LD_INT 0
25822: PUSH
25823: LD_INT 0
25825: PUSH
25826: LD_INT 0
25828: PUSH
25829: LD_INT 0
25831: PUSH
25832: EMPTY
25833: LIST
25834: LIST
25835: LIST
25836: LIST
25837: LIST
25838: LIST
25839: LIST
25840: PUSH
25841: EMPTY
25842: LIST
25843: PPUSH
25844: CALL_OW 447
25848: GO 25791
25850: POP
25851: POP
// end ;
25852: LD_VAR 0 5
25856: RET
// function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
25857: LD_INT 0
25859: PPUSH
25860: PPUSH
25861: PPUSH
25862: PPUSH
25863: PPUSH
25864: PPUSH
25865: PPUSH
25866: PPUSH
25867: PPUSH
25868: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
25869: LD_VAR 0 1
25873: PPUSH
25874: CALL_OW 302
25878: NOT
25879: PUSH
25880: LD_VAR 0 2
25884: PPUSH
25885: LD_VAR 0 3
25889: PPUSH
25890: CALL_OW 488
25894: NOT
25895: OR
25896: PUSH
25897: LD_VAR 0 4
25901: NOT
25902: OR
25903: IFFALSE 25907
// exit ;
25905: GO 26420
// list := [ ] ;
25907: LD_ADDR_VAR 0 13
25911: PUSH
25912: EMPTY
25913: ST_TO_ADDR
// if x - r < 0 then
25914: LD_VAR 0 2
25918: PUSH
25919: LD_VAR 0 4
25923: MINUS
25924: PUSH
25925: LD_INT 0
25927: LESS
25928: IFFALSE 25940
// min_x := 0 else
25930: LD_ADDR_VAR 0 7
25934: PUSH
25935: LD_INT 0
25937: ST_TO_ADDR
25938: GO 25956
// min_x := x - r ;
25940: LD_ADDR_VAR 0 7
25944: PUSH
25945: LD_VAR 0 2
25949: PUSH
25950: LD_VAR 0 4
25954: MINUS
25955: ST_TO_ADDR
// if y - r < 0 then
25956: LD_VAR 0 3
25960: PUSH
25961: LD_VAR 0 4
25965: MINUS
25966: PUSH
25967: LD_INT 0
25969: LESS
25970: IFFALSE 25982
// min_y := 0 else
25972: LD_ADDR_VAR 0 8
25976: PUSH
25977: LD_INT 0
25979: ST_TO_ADDR
25980: GO 25998
// min_y := y - r ;
25982: LD_ADDR_VAR 0 8
25986: PUSH
25987: LD_VAR 0 3
25991: PUSH
25992: LD_VAR 0 4
25996: MINUS
25997: ST_TO_ADDR
// max_x := x + r ;
25998: LD_ADDR_VAR 0 9
26002: PUSH
26003: LD_VAR 0 2
26007: PUSH
26008: LD_VAR 0 4
26012: PLUS
26013: ST_TO_ADDR
// max_y := y + r ;
26014: LD_ADDR_VAR 0 10
26018: PUSH
26019: LD_VAR 0 3
26023: PUSH
26024: LD_VAR 0 4
26028: PLUS
26029: ST_TO_ADDR
// for _x = min_x to max_x do
26030: LD_ADDR_VAR 0 11
26034: PUSH
26035: DOUBLE
26036: LD_VAR 0 7
26040: DEC
26041: ST_TO_ADDR
26042: LD_VAR 0 9
26046: PUSH
26047: FOR_TO
26048: IFFALSE 26165
// for _y = min_y to max_y do
26050: LD_ADDR_VAR 0 12
26054: PUSH
26055: DOUBLE
26056: LD_VAR 0 8
26060: DEC
26061: ST_TO_ADDR
26062: LD_VAR 0 10
26066: PUSH
26067: FOR_TO
26068: IFFALSE 26161
// begin if not ValidHex ( _x , _y ) then
26070: LD_VAR 0 11
26074: PPUSH
26075: LD_VAR 0 12
26079: PPUSH
26080: CALL_OW 488
26084: NOT
26085: IFFALSE 26089
// continue ;
26087: GO 26067
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
26089: LD_VAR 0 11
26093: PPUSH
26094: LD_VAR 0 12
26098: PPUSH
26099: CALL_OW 351
26103: PUSH
26104: LD_VAR 0 11
26108: PPUSH
26109: LD_VAR 0 12
26113: PPUSH
26114: CALL_OW 554
26118: AND
26119: IFFALSE 26159
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
26121: LD_ADDR_VAR 0 13
26125: PUSH
26126: LD_VAR 0 13
26130: PPUSH
26131: LD_VAR 0 13
26135: PUSH
26136: LD_INT 1
26138: PLUS
26139: PPUSH
26140: LD_VAR 0 11
26144: PUSH
26145: LD_VAR 0 12
26149: PUSH
26150: EMPTY
26151: LIST
26152: LIST
26153: PPUSH
26154: CALL_OW 2
26158: ST_TO_ADDR
// end ;
26159: GO 26067
26161: POP
26162: POP
26163: GO 26047
26165: POP
26166: POP
// if not list then
26167: LD_VAR 0 13
26171: NOT
26172: IFFALSE 26176
// exit ;
26174: GO 26420
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
26176: LD_ADDR_VAR 0 13
26180: PUSH
26181: LD_VAR 0 1
26185: PPUSH
26186: LD_VAR 0 13
26190: PPUSH
26191: LD_INT 1
26193: PPUSH
26194: LD_INT 1
26196: PPUSH
26197: CALL 35033 0 4
26201: ST_TO_ADDR
// ComStop ( flame ) ;
26202: LD_VAR 0 1
26206: PPUSH
26207: CALL_OW 141
// for i in list do
26211: LD_ADDR_VAR 0 6
26215: PUSH
26216: LD_VAR 0 13
26220: PUSH
26221: FOR_IN
26222: IFFALSE 26253
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
26224: LD_VAR 0 1
26228: PPUSH
26229: LD_VAR 0 6
26233: PUSH
26234: LD_INT 1
26236: ARRAY
26237: PPUSH
26238: LD_VAR 0 6
26242: PUSH
26243: LD_INT 2
26245: ARRAY
26246: PPUSH
26247: CALL_OW 176
26251: GO 26221
26253: POP
26254: POP
// repeat wait ( 0 0$1 ) ;
26255: LD_INT 35
26257: PPUSH
26258: CALL_OW 67
// task := GetTaskList ( flame ) ;
26262: LD_ADDR_VAR 0 14
26266: PUSH
26267: LD_VAR 0 1
26271: PPUSH
26272: CALL_OW 437
26276: ST_TO_ADDR
// if not task then
26277: LD_VAR 0 14
26281: NOT
26282: IFFALSE 26286
// exit ;
26284: GO 26420
// if task [ 1 ] [ 1 ] <> | then
26286: LD_VAR 0 14
26290: PUSH
26291: LD_INT 1
26293: ARRAY
26294: PUSH
26295: LD_INT 1
26297: ARRAY
26298: PUSH
26299: LD_STRING |
26301: NONEQUAL
26302: IFFALSE 26306
// exit ;
26304: GO 26420
// _x := task [ 1 ] [ 2 ] ;
26306: LD_ADDR_VAR 0 11
26310: PUSH
26311: LD_VAR 0 14
26315: PUSH
26316: LD_INT 1
26318: ARRAY
26319: PUSH
26320: LD_INT 2
26322: ARRAY
26323: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
26324: LD_ADDR_VAR 0 12
26328: PUSH
26329: LD_VAR 0 14
26333: PUSH
26334: LD_INT 1
26336: ARRAY
26337: PUSH
26338: LD_INT 3
26340: ARRAY
26341: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
26342: LD_VAR 0 11
26346: PPUSH
26347: LD_VAR 0 12
26351: PPUSH
26352: CALL_OW 351
26356: NOT
26357: PUSH
26358: LD_VAR 0 11
26362: PPUSH
26363: LD_VAR 0 12
26367: PPUSH
26368: CALL_OW 554
26372: NOT
26373: OR
26374: IFFALSE 26408
// begin task := Delete ( task , 1 ) ;
26376: LD_ADDR_VAR 0 14
26380: PUSH
26381: LD_VAR 0 14
26385: PPUSH
26386: LD_INT 1
26388: PPUSH
26389: CALL_OW 3
26393: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
26394: LD_VAR 0 1
26398: PPUSH
26399: LD_VAR 0 14
26403: PPUSH
26404: CALL_OW 446
// end ; until not HasTask ( flame ) ;
26408: LD_VAR 0 1
26412: PPUSH
26413: CALL_OW 314
26417: NOT
26418: IFFALSE 26255
// end ;
26420: LD_VAR 0 5
26424: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
26425: LD_EXP 93
26429: NOT
26430: IFFALSE 26480
26432: GO 26434
26434: DISABLE
// begin initHack := true ;
26435: LD_ADDR_EXP 93
26439: PUSH
26440: LD_INT 1
26442: ST_TO_ADDR
// hackTanks := [ ] ;
26443: LD_ADDR_EXP 94
26447: PUSH
26448: EMPTY
26449: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
26450: LD_ADDR_EXP 95
26454: PUSH
26455: EMPTY
26456: ST_TO_ADDR
// hackLimit := 3 ;
26457: LD_ADDR_EXP 96
26461: PUSH
26462: LD_INT 3
26464: ST_TO_ADDR
// hackDist := 12 ;
26465: LD_ADDR_EXP 97
26469: PUSH
26470: LD_INT 12
26472: ST_TO_ADDR
// hackCounter := [ ] ;
26473: LD_ADDR_EXP 98
26477: PUSH
26478: EMPTY
26479: ST_TO_ADDR
// end ;
26480: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
26481: LD_EXP 93
26485: PUSH
26486: LD_INT 34
26488: PUSH
26489: LD_INT 99
26491: PUSH
26492: EMPTY
26493: LIST
26494: LIST
26495: PPUSH
26496: CALL_OW 69
26500: AND
26501: IFFALSE 26754
26503: GO 26505
26505: DISABLE
26506: LD_INT 0
26508: PPUSH
26509: PPUSH
// begin enable ;
26510: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
26511: LD_ADDR_VAR 0 1
26515: PUSH
26516: LD_INT 34
26518: PUSH
26519: LD_INT 99
26521: PUSH
26522: EMPTY
26523: LIST
26524: LIST
26525: PPUSH
26526: CALL_OW 69
26530: PUSH
26531: FOR_IN
26532: IFFALSE 26752
// begin if not i in hackTanks then
26534: LD_VAR 0 1
26538: PUSH
26539: LD_EXP 94
26543: IN
26544: NOT
26545: IFFALSE 26628
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
26547: LD_ADDR_EXP 94
26551: PUSH
26552: LD_EXP 94
26556: PPUSH
26557: LD_EXP 94
26561: PUSH
26562: LD_INT 1
26564: PLUS
26565: PPUSH
26566: LD_VAR 0 1
26570: PPUSH
26571: CALL_OW 1
26575: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
26576: LD_ADDR_EXP 95
26580: PUSH
26581: LD_EXP 95
26585: PPUSH
26586: LD_EXP 95
26590: PUSH
26591: LD_INT 1
26593: PLUS
26594: PPUSH
26595: EMPTY
26596: PPUSH
26597: CALL_OW 1
26601: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
26602: LD_ADDR_EXP 98
26606: PUSH
26607: LD_EXP 98
26611: PPUSH
26612: LD_EXP 98
26616: PUSH
26617: LD_INT 1
26619: PLUS
26620: PPUSH
26621: EMPTY
26622: PPUSH
26623: CALL_OW 1
26627: ST_TO_ADDR
// end ; if not IsOk ( i ) then
26628: LD_VAR 0 1
26632: PPUSH
26633: CALL_OW 302
26637: NOT
26638: IFFALSE 26651
// begin HackUnlinkAll ( i ) ;
26640: LD_VAR 0 1
26644: PPUSH
26645: CALL 26757 0 1
// continue ;
26649: GO 26531
// end ; HackCheckCapturedStatus ( i ) ;
26651: LD_VAR 0 1
26655: PPUSH
26656: CALL 27200 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
26660: LD_ADDR_VAR 0 2
26664: PUSH
26665: LD_INT 81
26667: PUSH
26668: LD_VAR 0 1
26672: PPUSH
26673: CALL_OW 255
26677: PUSH
26678: EMPTY
26679: LIST
26680: LIST
26681: PUSH
26682: LD_INT 33
26684: PUSH
26685: LD_INT 3
26687: PUSH
26688: EMPTY
26689: LIST
26690: LIST
26691: PUSH
26692: LD_INT 91
26694: PUSH
26695: LD_VAR 0 1
26699: PUSH
26700: LD_EXP 97
26704: PUSH
26705: EMPTY
26706: LIST
26707: LIST
26708: LIST
26709: PUSH
26710: LD_INT 50
26712: PUSH
26713: EMPTY
26714: LIST
26715: PUSH
26716: EMPTY
26717: LIST
26718: LIST
26719: LIST
26720: LIST
26721: PPUSH
26722: CALL_OW 69
26726: ST_TO_ADDR
// if not tmp then
26727: LD_VAR 0 2
26731: NOT
26732: IFFALSE 26736
// continue ;
26734: GO 26531
// HackLink ( i , tmp ) ;
26736: LD_VAR 0 1
26740: PPUSH
26741: LD_VAR 0 2
26745: PPUSH
26746: CALL 26893 0 2
// end ;
26750: GO 26531
26752: POP
26753: POP
// end ;
26754: PPOPN 2
26756: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
26757: LD_INT 0
26759: PPUSH
26760: PPUSH
26761: PPUSH
// if not hack in hackTanks then
26762: LD_VAR 0 1
26766: PUSH
26767: LD_EXP 94
26771: IN
26772: NOT
26773: IFFALSE 26777
// exit ;
26775: GO 26888
// index := GetElementIndex ( hackTanks , hack ) ;
26777: LD_ADDR_VAR 0 4
26781: PUSH
26782: LD_EXP 94
26786: PPUSH
26787: LD_VAR 0 1
26791: PPUSH
26792: CALL 34330 0 2
26796: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
26797: LD_EXP 95
26801: PUSH
26802: LD_VAR 0 4
26806: ARRAY
26807: IFFALSE 26888
// begin for i in hackTanksCaptured [ index ] do
26809: LD_ADDR_VAR 0 3
26813: PUSH
26814: LD_EXP 95
26818: PUSH
26819: LD_VAR 0 4
26823: ARRAY
26824: PUSH
26825: FOR_IN
26826: IFFALSE 26852
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
26828: LD_VAR 0 3
26832: PUSH
26833: LD_INT 1
26835: ARRAY
26836: PPUSH
26837: LD_VAR 0 3
26841: PUSH
26842: LD_INT 2
26844: ARRAY
26845: PPUSH
26846: CALL_OW 235
26850: GO 26825
26852: POP
26853: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
26854: LD_ADDR_EXP 95
26858: PUSH
26859: LD_EXP 95
26863: PPUSH
26864: LD_VAR 0 4
26868: PPUSH
26869: EMPTY
26870: PPUSH
26871: CALL_OW 1
26875: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
26876: LD_VAR 0 1
26880: PPUSH
26881: LD_INT 0
26883: PPUSH
26884: CALL_OW 505
// end ; end ;
26888: LD_VAR 0 2
26892: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
26893: LD_INT 0
26895: PPUSH
26896: PPUSH
26897: PPUSH
// if not hack in hackTanks or not vehicles then
26898: LD_VAR 0 1
26902: PUSH
26903: LD_EXP 94
26907: IN
26908: NOT
26909: PUSH
26910: LD_VAR 0 2
26914: NOT
26915: OR
26916: IFFALSE 26920
// exit ;
26918: GO 27195
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
26920: LD_ADDR_VAR 0 2
26924: PUSH
26925: LD_VAR 0 1
26929: PPUSH
26930: LD_VAR 0 2
26934: PPUSH
26935: LD_INT 1
26937: PPUSH
26938: LD_INT 1
26940: PPUSH
26941: CALL 34980 0 4
26945: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
26946: LD_ADDR_VAR 0 5
26950: PUSH
26951: LD_EXP 94
26955: PPUSH
26956: LD_VAR 0 1
26960: PPUSH
26961: CALL 34330 0 2
26965: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
26966: LD_EXP 95
26970: PUSH
26971: LD_VAR 0 5
26975: ARRAY
26976: PUSH
26977: LD_EXP 96
26981: LESS
26982: IFFALSE 27171
// begin for i := 1 to vehicles do
26984: LD_ADDR_VAR 0 4
26988: PUSH
26989: DOUBLE
26990: LD_INT 1
26992: DEC
26993: ST_TO_ADDR
26994: LD_VAR 0 2
26998: PUSH
26999: FOR_TO
27000: IFFALSE 27169
// begin if hackTanksCaptured [ index ] = hackLimit then
27002: LD_EXP 95
27006: PUSH
27007: LD_VAR 0 5
27011: ARRAY
27012: PUSH
27013: LD_EXP 96
27017: EQUAL
27018: IFFALSE 27022
// break ;
27020: GO 27169
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
27022: LD_ADDR_EXP 98
27026: PUSH
27027: LD_EXP 98
27031: PPUSH
27032: LD_VAR 0 5
27036: PPUSH
27037: LD_EXP 98
27041: PUSH
27042: LD_VAR 0 5
27046: ARRAY
27047: PUSH
27048: LD_INT 1
27050: PLUS
27051: PPUSH
27052: CALL_OW 1
27056: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
27057: LD_ADDR_EXP 95
27061: PUSH
27062: LD_EXP 95
27066: PPUSH
27067: LD_VAR 0 5
27071: PUSH
27072: LD_EXP 95
27076: PUSH
27077: LD_VAR 0 5
27081: ARRAY
27082: PUSH
27083: LD_INT 1
27085: PLUS
27086: PUSH
27087: EMPTY
27088: LIST
27089: LIST
27090: PPUSH
27091: LD_VAR 0 2
27095: PUSH
27096: LD_VAR 0 4
27100: ARRAY
27101: PUSH
27102: LD_VAR 0 2
27106: PUSH
27107: LD_VAR 0 4
27111: ARRAY
27112: PPUSH
27113: CALL_OW 255
27117: PUSH
27118: EMPTY
27119: LIST
27120: LIST
27121: PPUSH
27122: CALL 34545 0 3
27126: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
27127: LD_VAR 0 2
27131: PUSH
27132: LD_VAR 0 4
27136: ARRAY
27137: PPUSH
27138: LD_VAR 0 1
27142: PPUSH
27143: CALL_OW 255
27147: PPUSH
27148: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
27152: LD_VAR 0 2
27156: PUSH
27157: LD_VAR 0 4
27161: ARRAY
27162: PPUSH
27163: CALL_OW 141
// end ;
27167: GO 26999
27169: POP
27170: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
27171: LD_VAR 0 1
27175: PPUSH
27176: LD_EXP 95
27180: PUSH
27181: LD_VAR 0 5
27185: ARRAY
27186: PUSH
27187: LD_INT 0
27189: PLUS
27190: PPUSH
27191: CALL_OW 505
// end ;
27195: LD_VAR 0 3
27199: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
27200: LD_INT 0
27202: PPUSH
27203: PPUSH
27204: PPUSH
27205: PPUSH
// if not hack in hackTanks then
27206: LD_VAR 0 1
27210: PUSH
27211: LD_EXP 94
27215: IN
27216: NOT
27217: IFFALSE 27221
// exit ;
27219: GO 27461
// index := GetElementIndex ( hackTanks , hack ) ;
27221: LD_ADDR_VAR 0 4
27225: PUSH
27226: LD_EXP 94
27230: PPUSH
27231: LD_VAR 0 1
27235: PPUSH
27236: CALL 34330 0 2
27240: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
27241: LD_ADDR_VAR 0 3
27245: PUSH
27246: DOUBLE
27247: LD_EXP 95
27251: PUSH
27252: LD_VAR 0 4
27256: ARRAY
27257: INC
27258: ST_TO_ADDR
27259: LD_INT 1
27261: PUSH
27262: FOR_DOWNTO
27263: IFFALSE 27435
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
27265: LD_ADDR_VAR 0 5
27269: PUSH
27270: LD_EXP 95
27274: PUSH
27275: LD_VAR 0 4
27279: ARRAY
27280: PUSH
27281: LD_VAR 0 3
27285: ARRAY
27286: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
27287: LD_VAR 0 5
27291: PUSH
27292: LD_INT 1
27294: ARRAY
27295: PPUSH
27296: CALL_OW 302
27300: NOT
27301: PUSH
27302: LD_VAR 0 5
27306: PUSH
27307: LD_INT 1
27309: ARRAY
27310: PPUSH
27311: CALL_OW 255
27315: PUSH
27316: LD_VAR 0 1
27320: PPUSH
27321: CALL_OW 255
27325: NONEQUAL
27326: OR
27327: IFFALSE 27433
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
27329: LD_VAR 0 5
27333: PUSH
27334: LD_INT 1
27336: ARRAY
27337: PPUSH
27338: CALL_OW 305
27342: PUSH
27343: LD_VAR 0 5
27347: PUSH
27348: LD_INT 1
27350: ARRAY
27351: PPUSH
27352: CALL_OW 255
27356: PUSH
27357: LD_VAR 0 1
27361: PPUSH
27362: CALL_OW 255
27366: EQUAL
27367: AND
27368: IFFALSE 27392
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
27370: LD_VAR 0 5
27374: PUSH
27375: LD_INT 1
27377: ARRAY
27378: PPUSH
27379: LD_VAR 0 5
27383: PUSH
27384: LD_INT 2
27386: ARRAY
27387: PPUSH
27388: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
27392: LD_ADDR_EXP 95
27396: PUSH
27397: LD_EXP 95
27401: PPUSH
27402: LD_VAR 0 4
27406: PPUSH
27407: LD_EXP 95
27411: PUSH
27412: LD_VAR 0 4
27416: ARRAY
27417: PPUSH
27418: LD_VAR 0 3
27422: PPUSH
27423: CALL_OW 3
27427: PPUSH
27428: CALL_OW 1
27432: ST_TO_ADDR
// end ; end ;
27433: GO 27262
27435: POP
27436: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
27437: LD_VAR 0 1
27441: PPUSH
27442: LD_EXP 95
27446: PUSH
27447: LD_VAR 0 4
27451: ARRAY
27452: PUSH
27453: LD_INT 0
27455: PLUS
27456: PPUSH
27457: CALL_OW 505
// end ;
27461: LD_VAR 0 2
27465: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
27466: LD_INT 0
27468: PPUSH
27469: PPUSH
27470: PPUSH
27471: PPUSH
// if not hack in hackTanks then
27472: LD_VAR 0 1
27476: PUSH
27477: LD_EXP 94
27481: IN
27482: NOT
27483: IFFALSE 27487
// exit ;
27485: GO 27572
// index := GetElementIndex ( hackTanks , hack ) ;
27487: LD_ADDR_VAR 0 5
27491: PUSH
27492: LD_EXP 94
27496: PPUSH
27497: LD_VAR 0 1
27501: PPUSH
27502: CALL 34330 0 2
27506: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
27507: LD_ADDR_VAR 0 4
27511: PUSH
27512: DOUBLE
27513: LD_INT 1
27515: DEC
27516: ST_TO_ADDR
27517: LD_EXP 95
27521: PUSH
27522: LD_VAR 0 5
27526: ARRAY
27527: PUSH
27528: FOR_TO
27529: IFFALSE 27570
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
27531: LD_EXP 95
27535: PUSH
27536: LD_VAR 0 5
27540: ARRAY
27541: PUSH
27542: LD_VAR 0 4
27546: ARRAY
27547: PUSH
27548: LD_INT 1
27550: ARRAY
27551: PUSH
27552: LD_VAR 0 2
27556: EQUAL
27557: IFFALSE 27568
// KillUnit ( vehicle ) ;
27559: LD_VAR 0 2
27563: PPUSH
27564: CALL_OW 66
27568: GO 27528
27570: POP
27571: POP
// end ;
27572: LD_VAR 0 3
27576: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
27577: LD_EXP 99
27581: NOT
27582: IFFALSE 27617
27584: GO 27586
27586: DISABLE
// begin initMiner := true ;
27587: LD_ADDR_EXP 99
27591: PUSH
27592: LD_INT 1
27594: ST_TO_ADDR
// minersList := [ ] ;
27595: LD_ADDR_EXP 100
27599: PUSH
27600: EMPTY
27601: ST_TO_ADDR
// minerMinesList := [ ] ;
27602: LD_ADDR_EXP 101
27606: PUSH
27607: EMPTY
27608: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
27609: LD_ADDR_EXP 102
27613: PUSH
27614: LD_INT 5
27616: ST_TO_ADDR
// end ;
27617: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
27618: LD_EXP 99
27622: PUSH
27623: LD_INT 34
27625: PUSH
27626: LD_INT 81
27628: PUSH
27629: EMPTY
27630: LIST
27631: LIST
27632: PPUSH
27633: CALL_OW 69
27637: AND
27638: IFFALSE 28099
27640: GO 27642
27642: DISABLE
27643: LD_INT 0
27645: PPUSH
27646: PPUSH
27647: PPUSH
27648: PPUSH
// begin enable ;
27649: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
27650: LD_ADDR_VAR 0 1
27654: PUSH
27655: LD_INT 34
27657: PUSH
27658: LD_INT 81
27660: PUSH
27661: EMPTY
27662: LIST
27663: LIST
27664: PPUSH
27665: CALL_OW 69
27669: PUSH
27670: FOR_IN
27671: IFFALSE 27743
// begin if not i in minersList then
27673: LD_VAR 0 1
27677: PUSH
27678: LD_EXP 100
27682: IN
27683: NOT
27684: IFFALSE 27741
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
27686: LD_ADDR_EXP 100
27690: PUSH
27691: LD_EXP 100
27695: PPUSH
27696: LD_EXP 100
27700: PUSH
27701: LD_INT 1
27703: PLUS
27704: PPUSH
27705: LD_VAR 0 1
27709: PPUSH
27710: CALL_OW 1
27714: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
27715: LD_ADDR_EXP 101
27719: PUSH
27720: LD_EXP 101
27724: PPUSH
27725: LD_EXP 101
27729: PUSH
27730: LD_INT 1
27732: PLUS
27733: PPUSH
27734: EMPTY
27735: PPUSH
27736: CALL_OW 1
27740: ST_TO_ADDR
// end end ;
27741: GO 27670
27743: POP
27744: POP
// for i := minerMinesList downto 1 do
27745: LD_ADDR_VAR 0 1
27749: PUSH
27750: DOUBLE
27751: LD_EXP 101
27755: INC
27756: ST_TO_ADDR
27757: LD_INT 1
27759: PUSH
27760: FOR_DOWNTO
27761: IFFALSE 28097
// begin if IsLive ( minersList [ i ] ) then
27763: LD_EXP 100
27767: PUSH
27768: LD_VAR 0 1
27772: ARRAY
27773: PPUSH
27774: CALL_OW 300
27778: IFFALSE 27806
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
27780: LD_EXP 100
27784: PUSH
27785: LD_VAR 0 1
27789: ARRAY
27790: PPUSH
27791: LD_EXP 101
27795: PUSH
27796: LD_VAR 0 1
27800: ARRAY
27801: PPUSH
27802: CALL_OW 505
// if not minerMinesList [ i ] then
27806: LD_EXP 101
27810: PUSH
27811: LD_VAR 0 1
27815: ARRAY
27816: NOT
27817: IFFALSE 27821
// continue ;
27819: GO 27760
// for j := minerMinesList [ i ] downto 1 do
27821: LD_ADDR_VAR 0 2
27825: PUSH
27826: DOUBLE
27827: LD_EXP 101
27831: PUSH
27832: LD_VAR 0 1
27836: ARRAY
27837: INC
27838: ST_TO_ADDR
27839: LD_INT 1
27841: PUSH
27842: FOR_DOWNTO
27843: IFFALSE 28093
// begin side := GetSide ( minersList [ i ] ) ;
27845: LD_ADDR_VAR 0 3
27849: PUSH
27850: LD_EXP 100
27854: PUSH
27855: LD_VAR 0 1
27859: ARRAY
27860: PPUSH
27861: CALL_OW 255
27865: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
27866: LD_ADDR_VAR 0 4
27870: PUSH
27871: LD_EXP 101
27875: PUSH
27876: LD_VAR 0 1
27880: ARRAY
27881: PUSH
27882: LD_VAR 0 2
27886: ARRAY
27887: PUSH
27888: LD_INT 1
27890: ARRAY
27891: PPUSH
27892: LD_EXP 101
27896: PUSH
27897: LD_VAR 0 1
27901: ARRAY
27902: PUSH
27903: LD_VAR 0 2
27907: ARRAY
27908: PUSH
27909: LD_INT 2
27911: ARRAY
27912: PPUSH
27913: CALL_OW 428
27917: ST_TO_ADDR
// if not tmp then
27918: LD_VAR 0 4
27922: NOT
27923: IFFALSE 27927
// continue ;
27925: GO 27842
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
27927: LD_VAR 0 4
27931: PUSH
27932: LD_INT 81
27934: PUSH
27935: LD_VAR 0 3
27939: PUSH
27940: EMPTY
27941: LIST
27942: LIST
27943: PPUSH
27944: CALL_OW 69
27948: IN
27949: PUSH
27950: LD_EXP 101
27954: PUSH
27955: LD_VAR 0 1
27959: ARRAY
27960: PUSH
27961: LD_VAR 0 2
27965: ARRAY
27966: PUSH
27967: LD_INT 1
27969: ARRAY
27970: PPUSH
27971: LD_EXP 101
27975: PUSH
27976: LD_VAR 0 1
27980: ARRAY
27981: PUSH
27982: LD_VAR 0 2
27986: ARRAY
27987: PUSH
27988: LD_INT 2
27990: ARRAY
27991: PPUSH
27992: CALL_OW 458
27996: AND
27997: IFFALSE 28091
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
27999: LD_EXP 101
28003: PUSH
28004: LD_VAR 0 1
28008: ARRAY
28009: PUSH
28010: LD_VAR 0 2
28014: ARRAY
28015: PUSH
28016: LD_INT 1
28018: ARRAY
28019: PPUSH
28020: LD_EXP 101
28024: PUSH
28025: LD_VAR 0 1
28029: ARRAY
28030: PUSH
28031: LD_VAR 0 2
28035: ARRAY
28036: PUSH
28037: LD_INT 2
28039: ARRAY
28040: PPUSH
28041: LD_VAR 0 3
28045: PPUSH
28046: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
28050: LD_ADDR_EXP 101
28054: PUSH
28055: LD_EXP 101
28059: PPUSH
28060: LD_VAR 0 1
28064: PPUSH
28065: LD_EXP 101
28069: PUSH
28070: LD_VAR 0 1
28074: ARRAY
28075: PPUSH
28076: LD_VAR 0 2
28080: PPUSH
28081: CALL_OW 3
28085: PPUSH
28086: CALL_OW 1
28090: ST_TO_ADDR
// end ; end ;
28091: GO 27842
28093: POP
28094: POP
// end ;
28095: GO 27760
28097: POP
28098: POP
// end ;
28099: PPOPN 4
28101: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
28102: LD_INT 0
28104: PPUSH
28105: PPUSH
// result := false ;
28106: LD_ADDR_VAR 0 4
28110: PUSH
28111: LD_INT 0
28113: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
28114: LD_VAR 0 1
28118: PPUSH
28119: CALL_OW 264
28123: PUSH
28124: LD_INT 81
28126: EQUAL
28127: NOT
28128: IFFALSE 28132
// exit ;
28130: GO 28372
// index := GetElementIndex ( minersList , unit ) ;
28132: LD_ADDR_VAR 0 5
28136: PUSH
28137: LD_EXP 100
28141: PPUSH
28142: LD_VAR 0 1
28146: PPUSH
28147: CALL 34330 0 2
28151: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
28152: LD_EXP 101
28156: PUSH
28157: LD_VAR 0 5
28161: ARRAY
28162: PUSH
28163: LD_EXP 102
28167: GREATEREQUAL
28168: IFFALSE 28172
// exit ;
28170: GO 28372
// ComMoveXY ( unit , x , y ) ;
28172: LD_VAR 0 1
28176: PPUSH
28177: LD_VAR 0 2
28181: PPUSH
28182: LD_VAR 0 3
28186: PPUSH
28187: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
28191: LD_INT 35
28193: PPUSH
28194: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
28198: LD_VAR 0 1
28202: PPUSH
28203: LD_VAR 0 2
28207: PPUSH
28208: LD_VAR 0 3
28212: PPUSH
28213: CALL 66071 0 3
28217: NOT
28218: PUSH
28219: LD_VAR 0 1
28223: PPUSH
28224: CALL_OW 314
28228: AND
28229: IFFALSE 28233
// exit ;
28231: GO 28372
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
28233: LD_VAR 0 2
28237: PPUSH
28238: LD_VAR 0 3
28242: PPUSH
28243: CALL_OW 428
28247: PUSH
28248: LD_VAR 0 1
28252: EQUAL
28253: PUSH
28254: LD_VAR 0 1
28258: PPUSH
28259: CALL_OW 314
28263: NOT
28264: AND
28265: IFFALSE 28191
// PlaySoundXY ( x , y , PlantMine ) ;
28267: LD_VAR 0 2
28271: PPUSH
28272: LD_VAR 0 3
28276: PPUSH
28277: LD_STRING PlantMine
28279: PPUSH
28280: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
28284: LD_VAR 0 2
28288: PPUSH
28289: LD_VAR 0 3
28293: PPUSH
28294: LD_VAR 0 1
28298: PPUSH
28299: CALL_OW 255
28303: PPUSH
28304: LD_INT 0
28306: PPUSH
28307: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
28311: LD_ADDR_EXP 101
28315: PUSH
28316: LD_EXP 101
28320: PPUSH
28321: LD_VAR 0 5
28325: PUSH
28326: LD_EXP 101
28330: PUSH
28331: LD_VAR 0 5
28335: ARRAY
28336: PUSH
28337: LD_INT 1
28339: PLUS
28340: PUSH
28341: EMPTY
28342: LIST
28343: LIST
28344: PPUSH
28345: LD_VAR 0 2
28349: PUSH
28350: LD_VAR 0 3
28354: PUSH
28355: EMPTY
28356: LIST
28357: LIST
28358: PPUSH
28359: CALL 34545 0 3
28363: ST_TO_ADDR
// result := true ;
28364: LD_ADDR_VAR 0 4
28368: PUSH
28369: LD_INT 1
28371: ST_TO_ADDR
// end ;
28372: LD_VAR 0 4
28376: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
28377: LD_INT 0
28379: PPUSH
28380: PPUSH
28381: PPUSH
// if not unit in minersList then
28382: LD_VAR 0 1
28386: PUSH
28387: LD_EXP 100
28391: IN
28392: NOT
28393: IFFALSE 28397
// exit ;
28395: GO 28789
// index := GetElementIndex ( minersList , unit ) ;
28397: LD_ADDR_VAR 0 6
28401: PUSH
28402: LD_EXP 100
28406: PPUSH
28407: LD_VAR 0 1
28411: PPUSH
28412: CALL 34330 0 2
28416: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
28417: LD_ADDR_VAR 0 5
28421: PUSH
28422: DOUBLE
28423: LD_EXP 101
28427: PUSH
28428: LD_VAR 0 6
28432: ARRAY
28433: INC
28434: ST_TO_ADDR
28435: LD_INT 1
28437: PUSH
28438: FOR_DOWNTO
28439: IFFALSE 28600
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
28441: LD_EXP 101
28445: PUSH
28446: LD_VAR 0 6
28450: ARRAY
28451: PUSH
28452: LD_VAR 0 5
28456: ARRAY
28457: PUSH
28458: LD_INT 1
28460: ARRAY
28461: PUSH
28462: LD_VAR 0 2
28466: EQUAL
28467: PUSH
28468: LD_EXP 101
28472: PUSH
28473: LD_VAR 0 6
28477: ARRAY
28478: PUSH
28479: LD_VAR 0 5
28483: ARRAY
28484: PUSH
28485: LD_INT 2
28487: ARRAY
28488: PUSH
28489: LD_VAR 0 3
28493: EQUAL
28494: AND
28495: IFFALSE 28598
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
28497: LD_EXP 101
28501: PUSH
28502: LD_VAR 0 6
28506: ARRAY
28507: PUSH
28508: LD_VAR 0 5
28512: ARRAY
28513: PUSH
28514: LD_INT 1
28516: ARRAY
28517: PPUSH
28518: LD_EXP 101
28522: PUSH
28523: LD_VAR 0 6
28527: ARRAY
28528: PUSH
28529: LD_VAR 0 5
28533: ARRAY
28534: PUSH
28535: LD_INT 2
28537: ARRAY
28538: PPUSH
28539: LD_VAR 0 1
28543: PPUSH
28544: CALL_OW 255
28548: PPUSH
28549: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
28553: LD_ADDR_EXP 101
28557: PUSH
28558: LD_EXP 101
28562: PPUSH
28563: LD_VAR 0 6
28567: PPUSH
28568: LD_EXP 101
28572: PUSH
28573: LD_VAR 0 6
28577: ARRAY
28578: PPUSH
28579: LD_VAR 0 5
28583: PPUSH
28584: CALL_OW 3
28588: PPUSH
28589: CALL_OW 1
28593: ST_TO_ADDR
// exit ;
28594: POP
28595: POP
28596: GO 28789
// end ; end ;
28598: GO 28438
28600: POP
28601: POP
// for i := minerMinesList [ index ] downto 1 do
28602: LD_ADDR_VAR 0 5
28606: PUSH
28607: DOUBLE
28608: LD_EXP 101
28612: PUSH
28613: LD_VAR 0 6
28617: ARRAY
28618: INC
28619: ST_TO_ADDR
28620: LD_INT 1
28622: PUSH
28623: FOR_DOWNTO
28624: IFFALSE 28787
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
28626: LD_EXP 101
28630: PUSH
28631: LD_VAR 0 6
28635: ARRAY
28636: PUSH
28637: LD_VAR 0 5
28641: ARRAY
28642: PUSH
28643: LD_INT 1
28645: ARRAY
28646: PPUSH
28647: LD_EXP 101
28651: PUSH
28652: LD_VAR 0 6
28656: ARRAY
28657: PUSH
28658: LD_VAR 0 5
28662: ARRAY
28663: PUSH
28664: LD_INT 2
28666: ARRAY
28667: PPUSH
28668: LD_VAR 0 2
28672: PPUSH
28673: LD_VAR 0 3
28677: PPUSH
28678: CALL_OW 298
28682: PUSH
28683: LD_INT 6
28685: LESS
28686: IFFALSE 28785
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
28688: LD_EXP 101
28692: PUSH
28693: LD_VAR 0 6
28697: ARRAY
28698: PUSH
28699: LD_VAR 0 5
28703: ARRAY
28704: PUSH
28705: LD_INT 1
28707: ARRAY
28708: PPUSH
28709: LD_EXP 101
28713: PUSH
28714: LD_VAR 0 6
28718: ARRAY
28719: PUSH
28720: LD_VAR 0 5
28724: ARRAY
28725: PUSH
28726: LD_INT 2
28728: ARRAY
28729: PPUSH
28730: LD_VAR 0 1
28734: PPUSH
28735: CALL_OW 255
28739: PPUSH
28740: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
28744: LD_ADDR_EXP 101
28748: PUSH
28749: LD_EXP 101
28753: PPUSH
28754: LD_VAR 0 6
28758: PPUSH
28759: LD_EXP 101
28763: PUSH
28764: LD_VAR 0 6
28768: ARRAY
28769: PPUSH
28770: LD_VAR 0 5
28774: PPUSH
28775: CALL_OW 3
28779: PPUSH
28780: CALL_OW 1
28784: ST_TO_ADDR
// end ; end ;
28785: GO 28623
28787: POP
28788: POP
// end ;
28789: LD_VAR 0 4
28793: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
28794: LD_INT 0
28796: PPUSH
28797: PPUSH
28798: PPUSH
28799: PPUSH
28800: PPUSH
28801: PPUSH
28802: PPUSH
28803: PPUSH
28804: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
28805: LD_VAR 0 1
28809: PPUSH
28810: CALL_OW 264
28814: PUSH
28815: LD_INT 81
28817: EQUAL
28818: NOT
28819: PUSH
28820: LD_VAR 0 1
28824: PUSH
28825: LD_EXP 100
28829: IN
28830: NOT
28831: OR
28832: IFFALSE 28836
// exit ;
28834: GO 29158
// index := GetElementIndex ( minersList , unit ) ;
28836: LD_ADDR_VAR 0 6
28840: PUSH
28841: LD_EXP 100
28845: PPUSH
28846: LD_VAR 0 1
28850: PPUSH
28851: CALL 34330 0 2
28855: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
28856: LD_ADDR_VAR 0 8
28860: PUSH
28861: LD_EXP 102
28865: PUSH
28866: LD_EXP 101
28870: PUSH
28871: LD_VAR 0 6
28875: ARRAY
28876: MINUS
28877: ST_TO_ADDR
// if not minesFreeAmount then
28878: LD_VAR 0 8
28882: NOT
28883: IFFALSE 28887
// exit ;
28885: GO 29158
// tmp := [ ] ;
28887: LD_ADDR_VAR 0 7
28891: PUSH
28892: EMPTY
28893: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
28894: LD_ADDR_VAR 0 5
28898: PUSH
28899: DOUBLE
28900: LD_INT 1
28902: DEC
28903: ST_TO_ADDR
28904: LD_VAR 0 8
28908: PUSH
28909: FOR_TO
28910: IFFALSE 29105
// begin _d := rand ( 0 , 5 ) ;
28912: LD_ADDR_VAR 0 11
28916: PUSH
28917: LD_INT 0
28919: PPUSH
28920: LD_INT 5
28922: PPUSH
28923: CALL_OW 12
28927: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
28928: LD_ADDR_VAR 0 12
28932: PUSH
28933: LD_INT 2
28935: PPUSH
28936: LD_INT 6
28938: PPUSH
28939: CALL_OW 12
28943: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
28944: LD_ADDR_VAR 0 9
28948: PUSH
28949: LD_VAR 0 2
28953: PPUSH
28954: LD_VAR 0 11
28958: PPUSH
28959: LD_VAR 0 12
28963: PPUSH
28964: CALL_OW 272
28968: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
28969: LD_ADDR_VAR 0 10
28973: PUSH
28974: LD_VAR 0 3
28978: PPUSH
28979: LD_VAR 0 11
28983: PPUSH
28984: LD_VAR 0 12
28988: PPUSH
28989: CALL_OW 273
28993: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
28994: LD_VAR 0 9
28998: PPUSH
28999: LD_VAR 0 10
29003: PPUSH
29004: CALL_OW 488
29008: PUSH
29009: LD_VAR 0 9
29013: PUSH
29014: LD_VAR 0 10
29018: PUSH
29019: EMPTY
29020: LIST
29021: LIST
29022: PUSH
29023: LD_VAR 0 7
29027: IN
29028: NOT
29029: AND
29030: PUSH
29031: LD_VAR 0 9
29035: PPUSH
29036: LD_VAR 0 10
29040: PPUSH
29041: CALL_OW 458
29045: NOT
29046: AND
29047: IFFALSE 29089
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
29049: LD_ADDR_VAR 0 7
29053: PUSH
29054: LD_VAR 0 7
29058: PPUSH
29059: LD_VAR 0 7
29063: PUSH
29064: LD_INT 1
29066: PLUS
29067: PPUSH
29068: LD_VAR 0 9
29072: PUSH
29073: LD_VAR 0 10
29077: PUSH
29078: EMPTY
29079: LIST
29080: LIST
29081: PPUSH
29082: CALL_OW 1
29086: ST_TO_ADDR
29087: GO 29103
// i := i - 1 ;
29089: LD_ADDR_VAR 0 5
29093: PUSH
29094: LD_VAR 0 5
29098: PUSH
29099: LD_INT 1
29101: MINUS
29102: ST_TO_ADDR
// end ;
29103: GO 28909
29105: POP
29106: POP
// for i in tmp do
29107: LD_ADDR_VAR 0 5
29111: PUSH
29112: LD_VAR 0 7
29116: PUSH
29117: FOR_IN
29118: IFFALSE 29156
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
29120: LD_VAR 0 1
29124: PPUSH
29125: LD_VAR 0 5
29129: PUSH
29130: LD_INT 1
29132: ARRAY
29133: PPUSH
29134: LD_VAR 0 5
29138: PUSH
29139: LD_INT 2
29141: ARRAY
29142: PPUSH
29143: CALL 28102 0 3
29147: NOT
29148: IFFALSE 29154
// exit ;
29150: POP
29151: POP
29152: GO 29158
29154: GO 29117
29156: POP
29157: POP
// end ;
29158: LD_VAR 0 4
29162: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
29163: LD_INT 0
29165: PPUSH
29166: PPUSH
29167: PPUSH
29168: PPUSH
29169: PPUSH
29170: PPUSH
29171: PPUSH
// if not GetClass ( unit ) = class_sniper then
29172: LD_VAR 0 1
29176: PPUSH
29177: CALL_OW 257
29181: PUSH
29182: LD_INT 5
29184: EQUAL
29185: NOT
29186: IFFALSE 29190
// exit ;
29188: GO 29578
// dist := 8 ;
29190: LD_ADDR_VAR 0 5
29194: PUSH
29195: LD_INT 8
29197: ST_TO_ADDR
// viewRange := 12 ;
29198: LD_ADDR_VAR 0 7
29202: PUSH
29203: LD_INT 12
29205: ST_TO_ADDR
// side := GetSide ( unit ) ;
29206: LD_ADDR_VAR 0 6
29210: PUSH
29211: LD_VAR 0 1
29215: PPUSH
29216: CALL_OW 255
29220: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
29221: LD_INT 61
29223: PPUSH
29224: LD_VAR 0 6
29228: PPUSH
29229: CALL_OW 321
29233: PUSH
29234: LD_INT 2
29236: EQUAL
29237: IFFALSE 29247
// viewRange := 16 ;
29239: LD_ADDR_VAR 0 7
29243: PUSH
29244: LD_INT 16
29246: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
29247: LD_VAR 0 1
29251: PPUSH
29252: LD_VAR 0 2
29256: PPUSH
29257: LD_VAR 0 3
29261: PPUSH
29262: CALL_OW 297
29266: PUSH
29267: LD_VAR 0 5
29271: GREATER
29272: IFFALSE 29351
// begin ComMoveXY ( unit , x , y ) ;
29274: LD_VAR 0 1
29278: PPUSH
29279: LD_VAR 0 2
29283: PPUSH
29284: LD_VAR 0 3
29288: PPUSH
29289: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
29293: LD_INT 35
29295: PPUSH
29296: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
29300: LD_VAR 0 1
29304: PPUSH
29305: LD_VAR 0 2
29309: PPUSH
29310: LD_VAR 0 3
29314: PPUSH
29315: CALL 66071 0 3
29319: NOT
29320: IFFALSE 29324
// exit ;
29322: GO 29578
// until GetDistUnitXY ( unit , x , y ) < dist ;
29324: LD_VAR 0 1
29328: PPUSH
29329: LD_VAR 0 2
29333: PPUSH
29334: LD_VAR 0 3
29338: PPUSH
29339: CALL_OW 297
29343: PUSH
29344: LD_VAR 0 5
29348: LESS
29349: IFFALSE 29293
// end ; ComTurnXY ( unit , x , y ) ;
29351: LD_VAR 0 1
29355: PPUSH
29356: LD_VAR 0 2
29360: PPUSH
29361: LD_VAR 0 3
29365: PPUSH
29366: CALL_OW 118
// wait ( 5 ) ;
29370: LD_INT 5
29372: PPUSH
29373: CALL_OW 67
// _d := GetDir ( unit ) ;
29377: LD_ADDR_VAR 0 10
29381: PUSH
29382: LD_VAR 0 1
29386: PPUSH
29387: CALL_OW 254
29391: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
29392: LD_ADDR_VAR 0 8
29396: PUSH
29397: LD_VAR 0 1
29401: PPUSH
29402: CALL_OW 250
29406: PPUSH
29407: LD_VAR 0 10
29411: PPUSH
29412: LD_VAR 0 5
29416: PPUSH
29417: CALL_OW 272
29421: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
29422: LD_ADDR_VAR 0 9
29426: PUSH
29427: LD_VAR 0 1
29431: PPUSH
29432: CALL_OW 251
29436: PPUSH
29437: LD_VAR 0 10
29441: PPUSH
29442: LD_VAR 0 5
29446: PPUSH
29447: CALL_OW 273
29451: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
29452: LD_VAR 0 8
29456: PPUSH
29457: LD_VAR 0 9
29461: PPUSH
29462: CALL_OW 488
29466: NOT
29467: IFFALSE 29471
// exit ;
29469: GO 29578
// ComAnimCustom ( unit , 1 ) ;
29471: LD_VAR 0 1
29475: PPUSH
29476: LD_INT 1
29478: PPUSH
29479: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
29483: LD_VAR 0 8
29487: PPUSH
29488: LD_VAR 0 9
29492: PPUSH
29493: LD_VAR 0 6
29497: PPUSH
29498: LD_VAR 0 7
29502: PPUSH
29503: CALL_OW 330
// repeat wait ( 1 ) ;
29507: LD_INT 1
29509: PPUSH
29510: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
29514: LD_VAR 0 1
29518: PPUSH
29519: CALL_OW 316
29523: PUSH
29524: LD_VAR 0 1
29528: PPUSH
29529: CALL_OW 314
29533: OR
29534: PUSH
29535: LD_VAR 0 1
29539: PPUSH
29540: CALL_OW 302
29544: NOT
29545: OR
29546: PUSH
29547: LD_VAR 0 1
29551: PPUSH
29552: CALL_OW 301
29556: OR
29557: IFFALSE 29507
// RemoveSeeing ( _x , _y , side ) ;
29559: LD_VAR 0 8
29563: PPUSH
29564: LD_VAR 0 9
29568: PPUSH
29569: LD_VAR 0 6
29573: PPUSH
29574: CALL_OW 331
// end ; end_of_file
29578: LD_VAR 0 4
29582: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
29583: LD_INT 0
29585: PPUSH
29586: PPUSH
// if exist_mode then
29587: LD_VAR 0 2
29591: IFFALSE 29616
// unit := CreateCharacter ( prefix & ident ) else
29593: LD_ADDR_VAR 0 5
29597: PUSH
29598: LD_VAR 0 3
29602: PUSH
29603: LD_VAR 0 1
29607: STR
29608: PPUSH
29609: CALL_OW 34
29613: ST_TO_ADDR
29614: GO 29631
// unit := NewCharacter ( ident ) ;
29616: LD_ADDR_VAR 0 5
29620: PUSH
29621: LD_VAR 0 1
29625: PPUSH
29626: CALL_OW 25
29630: ST_TO_ADDR
// result := unit ;
29631: LD_ADDR_VAR 0 4
29635: PUSH
29636: LD_VAR 0 5
29640: ST_TO_ADDR
// end ;
29641: LD_VAR 0 4
29645: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
29646: LD_INT 0
29648: PPUSH
29649: PPUSH
// if not side or not nation then
29650: LD_VAR 0 1
29654: NOT
29655: PUSH
29656: LD_VAR 0 2
29660: NOT
29661: OR
29662: IFFALSE 29666
// exit ;
29664: GO 30434
// case nation of nation_american :
29666: LD_VAR 0 2
29670: PUSH
29671: LD_INT 1
29673: DOUBLE
29674: EQUAL
29675: IFTRUE 29679
29677: GO 29893
29679: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
29680: LD_ADDR_VAR 0 4
29684: PUSH
29685: LD_INT 35
29687: PUSH
29688: LD_INT 45
29690: PUSH
29691: LD_INT 46
29693: PUSH
29694: LD_INT 47
29696: PUSH
29697: LD_INT 82
29699: PUSH
29700: LD_INT 83
29702: PUSH
29703: LD_INT 84
29705: PUSH
29706: LD_INT 85
29708: PUSH
29709: LD_INT 86
29711: PUSH
29712: LD_INT 1
29714: PUSH
29715: LD_INT 2
29717: PUSH
29718: LD_INT 6
29720: PUSH
29721: LD_INT 15
29723: PUSH
29724: LD_INT 16
29726: PUSH
29727: LD_INT 7
29729: PUSH
29730: LD_INT 12
29732: PUSH
29733: LD_INT 13
29735: PUSH
29736: LD_INT 10
29738: PUSH
29739: LD_INT 14
29741: PUSH
29742: LD_INT 20
29744: PUSH
29745: LD_INT 21
29747: PUSH
29748: LD_INT 22
29750: PUSH
29751: LD_INT 25
29753: PUSH
29754: LD_INT 32
29756: PUSH
29757: LD_INT 27
29759: PUSH
29760: LD_INT 36
29762: PUSH
29763: LD_INT 69
29765: PUSH
29766: LD_INT 39
29768: PUSH
29769: LD_INT 34
29771: PUSH
29772: LD_INT 40
29774: PUSH
29775: LD_INT 48
29777: PUSH
29778: LD_INT 49
29780: PUSH
29781: LD_INT 50
29783: PUSH
29784: LD_INT 51
29786: PUSH
29787: LD_INT 52
29789: PUSH
29790: LD_INT 53
29792: PUSH
29793: LD_INT 54
29795: PUSH
29796: LD_INT 55
29798: PUSH
29799: LD_INT 56
29801: PUSH
29802: LD_INT 57
29804: PUSH
29805: LD_INT 58
29807: PUSH
29808: LD_INT 59
29810: PUSH
29811: LD_INT 60
29813: PUSH
29814: LD_INT 61
29816: PUSH
29817: LD_INT 62
29819: PUSH
29820: LD_INT 80
29822: PUSH
29823: LD_INT 82
29825: PUSH
29826: LD_INT 83
29828: PUSH
29829: LD_INT 84
29831: PUSH
29832: LD_INT 85
29834: PUSH
29835: LD_INT 86
29837: PUSH
29838: EMPTY
29839: LIST
29840: LIST
29841: LIST
29842: LIST
29843: LIST
29844: LIST
29845: LIST
29846: LIST
29847: LIST
29848: LIST
29849: LIST
29850: LIST
29851: LIST
29852: LIST
29853: LIST
29854: LIST
29855: LIST
29856: LIST
29857: LIST
29858: LIST
29859: LIST
29860: LIST
29861: LIST
29862: LIST
29863: LIST
29864: LIST
29865: LIST
29866: LIST
29867: LIST
29868: LIST
29869: LIST
29870: LIST
29871: LIST
29872: LIST
29873: LIST
29874: LIST
29875: LIST
29876: LIST
29877: LIST
29878: LIST
29879: LIST
29880: LIST
29881: LIST
29882: LIST
29883: LIST
29884: LIST
29885: LIST
29886: LIST
29887: LIST
29888: LIST
29889: LIST
29890: ST_TO_ADDR
29891: GO 30358
29893: LD_INT 2
29895: DOUBLE
29896: EQUAL
29897: IFTRUE 29901
29899: GO 30127
29901: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
29902: LD_ADDR_VAR 0 4
29906: PUSH
29907: LD_INT 35
29909: PUSH
29910: LD_INT 45
29912: PUSH
29913: LD_INT 46
29915: PUSH
29916: LD_INT 47
29918: PUSH
29919: LD_INT 82
29921: PUSH
29922: LD_INT 83
29924: PUSH
29925: LD_INT 84
29927: PUSH
29928: LD_INT 85
29930: PUSH
29931: LD_INT 87
29933: PUSH
29934: LD_INT 70
29936: PUSH
29937: LD_INT 1
29939: PUSH
29940: LD_INT 11
29942: PUSH
29943: LD_INT 3
29945: PUSH
29946: LD_INT 4
29948: PUSH
29949: LD_INT 5
29951: PUSH
29952: LD_INT 6
29954: PUSH
29955: LD_INT 15
29957: PUSH
29958: LD_INT 18
29960: PUSH
29961: LD_INT 7
29963: PUSH
29964: LD_INT 17
29966: PUSH
29967: LD_INT 8
29969: PUSH
29970: LD_INT 20
29972: PUSH
29973: LD_INT 21
29975: PUSH
29976: LD_INT 22
29978: PUSH
29979: LD_INT 72
29981: PUSH
29982: LD_INT 26
29984: PUSH
29985: LD_INT 69
29987: PUSH
29988: LD_INT 39
29990: PUSH
29991: LD_INT 40
29993: PUSH
29994: LD_INT 41
29996: PUSH
29997: LD_INT 42
29999: PUSH
30000: LD_INT 43
30002: PUSH
30003: LD_INT 48
30005: PUSH
30006: LD_INT 49
30008: PUSH
30009: LD_INT 50
30011: PUSH
30012: LD_INT 51
30014: PUSH
30015: LD_INT 52
30017: PUSH
30018: LD_INT 53
30020: PUSH
30021: LD_INT 54
30023: PUSH
30024: LD_INT 55
30026: PUSH
30027: LD_INT 56
30029: PUSH
30030: LD_INT 60
30032: PUSH
30033: LD_INT 61
30035: PUSH
30036: LD_INT 62
30038: PUSH
30039: LD_INT 66
30041: PUSH
30042: LD_INT 67
30044: PUSH
30045: LD_INT 68
30047: PUSH
30048: LD_INT 81
30050: PUSH
30051: LD_INT 82
30053: PUSH
30054: LD_INT 83
30056: PUSH
30057: LD_INT 84
30059: PUSH
30060: LD_INT 85
30062: PUSH
30063: LD_INT 87
30065: PUSH
30066: LD_INT 88
30068: PUSH
30069: EMPTY
30070: LIST
30071: LIST
30072: LIST
30073: LIST
30074: LIST
30075: LIST
30076: LIST
30077: LIST
30078: LIST
30079: LIST
30080: LIST
30081: LIST
30082: LIST
30083: LIST
30084: LIST
30085: LIST
30086: LIST
30087: LIST
30088: LIST
30089: LIST
30090: LIST
30091: LIST
30092: LIST
30093: LIST
30094: LIST
30095: LIST
30096: LIST
30097: LIST
30098: LIST
30099: LIST
30100: LIST
30101: LIST
30102: LIST
30103: LIST
30104: LIST
30105: LIST
30106: LIST
30107: LIST
30108: LIST
30109: LIST
30110: LIST
30111: LIST
30112: LIST
30113: LIST
30114: LIST
30115: LIST
30116: LIST
30117: LIST
30118: LIST
30119: LIST
30120: LIST
30121: LIST
30122: LIST
30123: LIST
30124: ST_TO_ADDR
30125: GO 30358
30127: LD_INT 3
30129: DOUBLE
30130: EQUAL
30131: IFTRUE 30135
30133: GO 30357
30135: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
30136: LD_ADDR_VAR 0 4
30140: PUSH
30141: LD_INT 46
30143: PUSH
30144: LD_INT 47
30146: PUSH
30147: LD_INT 1
30149: PUSH
30150: LD_INT 2
30152: PUSH
30153: LD_INT 82
30155: PUSH
30156: LD_INT 83
30158: PUSH
30159: LD_INT 84
30161: PUSH
30162: LD_INT 85
30164: PUSH
30165: LD_INT 86
30167: PUSH
30168: LD_INT 11
30170: PUSH
30171: LD_INT 9
30173: PUSH
30174: LD_INT 20
30176: PUSH
30177: LD_INT 19
30179: PUSH
30180: LD_INT 21
30182: PUSH
30183: LD_INT 24
30185: PUSH
30186: LD_INT 22
30188: PUSH
30189: LD_INT 25
30191: PUSH
30192: LD_INT 28
30194: PUSH
30195: LD_INT 29
30197: PUSH
30198: LD_INT 30
30200: PUSH
30201: LD_INT 31
30203: PUSH
30204: LD_INT 37
30206: PUSH
30207: LD_INT 38
30209: PUSH
30210: LD_INT 32
30212: PUSH
30213: LD_INT 27
30215: PUSH
30216: LD_INT 33
30218: PUSH
30219: LD_INT 69
30221: PUSH
30222: LD_INT 39
30224: PUSH
30225: LD_INT 34
30227: PUSH
30228: LD_INT 40
30230: PUSH
30231: LD_INT 71
30233: PUSH
30234: LD_INT 23
30236: PUSH
30237: LD_INT 44
30239: PUSH
30240: LD_INT 48
30242: PUSH
30243: LD_INT 49
30245: PUSH
30246: LD_INT 50
30248: PUSH
30249: LD_INT 51
30251: PUSH
30252: LD_INT 52
30254: PUSH
30255: LD_INT 53
30257: PUSH
30258: LD_INT 54
30260: PUSH
30261: LD_INT 55
30263: PUSH
30264: LD_INT 56
30266: PUSH
30267: LD_INT 57
30269: PUSH
30270: LD_INT 58
30272: PUSH
30273: LD_INT 59
30275: PUSH
30276: LD_INT 63
30278: PUSH
30279: LD_INT 64
30281: PUSH
30282: LD_INT 65
30284: PUSH
30285: LD_INT 82
30287: PUSH
30288: LD_INT 83
30290: PUSH
30291: LD_INT 84
30293: PUSH
30294: LD_INT 85
30296: PUSH
30297: LD_INT 86
30299: PUSH
30300: EMPTY
30301: LIST
30302: LIST
30303: LIST
30304: LIST
30305: LIST
30306: LIST
30307: LIST
30308: LIST
30309: LIST
30310: LIST
30311: LIST
30312: LIST
30313: LIST
30314: LIST
30315: LIST
30316: LIST
30317: LIST
30318: LIST
30319: LIST
30320: LIST
30321: LIST
30322: LIST
30323: LIST
30324: LIST
30325: LIST
30326: LIST
30327: LIST
30328: LIST
30329: LIST
30330: LIST
30331: LIST
30332: LIST
30333: LIST
30334: LIST
30335: LIST
30336: LIST
30337: LIST
30338: LIST
30339: LIST
30340: LIST
30341: LIST
30342: LIST
30343: LIST
30344: LIST
30345: LIST
30346: LIST
30347: LIST
30348: LIST
30349: LIST
30350: LIST
30351: LIST
30352: LIST
30353: LIST
30354: ST_TO_ADDR
30355: GO 30358
30357: POP
// if state > - 1 and state < 3 then
30358: LD_VAR 0 3
30362: PUSH
30363: LD_INT 1
30365: NEG
30366: GREATER
30367: PUSH
30368: LD_VAR 0 3
30372: PUSH
30373: LD_INT 3
30375: LESS
30376: AND
30377: IFFALSE 30434
// for i in result do
30379: LD_ADDR_VAR 0 5
30383: PUSH
30384: LD_VAR 0 4
30388: PUSH
30389: FOR_IN
30390: IFFALSE 30432
// if GetTech ( i , side ) <> state then
30392: LD_VAR 0 5
30396: PPUSH
30397: LD_VAR 0 1
30401: PPUSH
30402: CALL_OW 321
30406: PUSH
30407: LD_VAR 0 3
30411: NONEQUAL
30412: IFFALSE 30430
// result := result diff i ;
30414: LD_ADDR_VAR 0 4
30418: PUSH
30419: LD_VAR 0 4
30423: PUSH
30424: LD_VAR 0 5
30428: DIFF
30429: ST_TO_ADDR
30430: GO 30389
30432: POP
30433: POP
// end ;
30434: LD_VAR 0 4
30438: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
30439: LD_INT 0
30441: PPUSH
30442: PPUSH
30443: PPUSH
// result := true ;
30444: LD_ADDR_VAR 0 3
30448: PUSH
30449: LD_INT 1
30451: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
30452: LD_ADDR_VAR 0 5
30456: PUSH
30457: LD_VAR 0 2
30461: PPUSH
30462: CALL_OW 480
30466: ST_TO_ADDR
// if not tmp then
30467: LD_VAR 0 5
30471: NOT
30472: IFFALSE 30476
// exit ;
30474: GO 30525
// for i in tmp do
30476: LD_ADDR_VAR 0 4
30480: PUSH
30481: LD_VAR 0 5
30485: PUSH
30486: FOR_IN
30487: IFFALSE 30523
// if GetTech ( i , side ) <> state_researched then
30489: LD_VAR 0 4
30493: PPUSH
30494: LD_VAR 0 1
30498: PPUSH
30499: CALL_OW 321
30503: PUSH
30504: LD_INT 2
30506: NONEQUAL
30507: IFFALSE 30521
// begin result := false ;
30509: LD_ADDR_VAR 0 3
30513: PUSH
30514: LD_INT 0
30516: ST_TO_ADDR
// exit ;
30517: POP
30518: POP
30519: GO 30525
// end ;
30521: GO 30486
30523: POP
30524: POP
// end ;
30525: LD_VAR 0 3
30529: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
30530: LD_INT 0
30532: PPUSH
30533: PPUSH
30534: PPUSH
30535: PPUSH
30536: PPUSH
30537: PPUSH
30538: PPUSH
30539: PPUSH
30540: PPUSH
30541: PPUSH
30542: PPUSH
30543: PPUSH
30544: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
30545: LD_VAR 0 1
30549: NOT
30550: PUSH
30551: LD_VAR 0 1
30555: PPUSH
30556: CALL_OW 257
30560: PUSH
30561: LD_INT 9
30563: NONEQUAL
30564: OR
30565: IFFALSE 30569
// exit ;
30567: GO 31142
// side := GetSide ( unit ) ;
30569: LD_ADDR_VAR 0 9
30573: PUSH
30574: LD_VAR 0 1
30578: PPUSH
30579: CALL_OW 255
30583: ST_TO_ADDR
// tech_space := tech_spacanom ;
30584: LD_ADDR_VAR 0 12
30588: PUSH
30589: LD_INT 29
30591: ST_TO_ADDR
// tech_time := tech_taurad ;
30592: LD_ADDR_VAR 0 13
30596: PUSH
30597: LD_INT 28
30599: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
30600: LD_ADDR_VAR 0 11
30604: PUSH
30605: LD_VAR 0 1
30609: PPUSH
30610: CALL_OW 310
30614: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
30615: LD_VAR 0 11
30619: PPUSH
30620: CALL_OW 247
30624: PUSH
30625: LD_INT 2
30627: EQUAL
30628: IFFALSE 30632
// exit ;
30630: GO 31142
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
30632: LD_ADDR_VAR 0 8
30636: PUSH
30637: LD_INT 81
30639: PUSH
30640: LD_VAR 0 9
30644: PUSH
30645: EMPTY
30646: LIST
30647: LIST
30648: PUSH
30649: LD_INT 3
30651: PUSH
30652: LD_INT 21
30654: PUSH
30655: LD_INT 3
30657: PUSH
30658: EMPTY
30659: LIST
30660: LIST
30661: PUSH
30662: EMPTY
30663: LIST
30664: LIST
30665: PUSH
30666: EMPTY
30667: LIST
30668: LIST
30669: PPUSH
30670: CALL_OW 69
30674: ST_TO_ADDR
// if not tmp then
30675: LD_VAR 0 8
30679: NOT
30680: IFFALSE 30684
// exit ;
30682: GO 31142
// if in_unit then
30684: LD_VAR 0 11
30688: IFFALSE 30712
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
30690: LD_ADDR_VAR 0 10
30694: PUSH
30695: LD_VAR 0 8
30699: PPUSH
30700: LD_VAR 0 11
30704: PPUSH
30705: CALL_OW 74
30709: ST_TO_ADDR
30710: GO 30732
// enemy := NearestUnitToUnit ( tmp , unit ) ;
30712: LD_ADDR_VAR 0 10
30716: PUSH
30717: LD_VAR 0 8
30721: PPUSH
30722: LD_VAR 0 1
30726: PPUSH
30727: CALL_OW 74
30731: ST_TO_ADDR
// if not enemy then
30732: LD_VAR 0 10
30736: NOT
30737: IFFALSE 30741
// exit ;
30739: GO 31142
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
30741: LD_VAR 0 11
30745: PUSH
30746: LD_VAR 0 11
30750: PPUSH
30751: LD_VAR 0 10
30755: PPUSH
30756: CALL_OW 296
30760: PUSH
30761: LD_INT 13
30763: GREATER
30764: AND
30765: PUSH
30766: LD_VAR 0 1
30770: PPUSH
30771: LD_VAR 0 10
30775: PPUSH
30776: CALL_OW 296
30780: PUSH
30781: LD_INT 12
30783: GREATER
30784: OR
30785: IFFALSE 30789
// exit ;
30787: GO 31142
// missile := [ 1 ] ;
30789: LD_ADDR_VAR 0 14
30793: PUSH
30794: LD_INT 1
30796: PUSH
30797: EMPTY
30798: LIST
30799: ST_TO_ADDR
// if Researched ( side , tech_space ) then
30800: LD_VAR 0 9
30804: PPUSH
30805: LD_VAR 0 12
30809: PPUSH
30810: CALL_OW 325
30814: IFFALSE 30843
// missile := Replace ( missile , missile + 1 , 2 ) ;
30816: LD_ADDR_VAR 0 14
30820: PUSH
30821: LD_VAR 0 14
30825: PPUSH
30826: LD_VAR 0 14
30830: PUSH
30831: LD_INT 1
30833: PLUS
30834: PPUSH
30835: LD_INT 2
30837: PPUSH
30838: CALL_OW 1
30842: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
30843: LD_VAR 0 9
30847: PPUSH
30848: LD_VAR 0 13
30852: PPUSH
30853: CALL_OW 325
30857: PUSH
30858: LD_VAR 0 10
30862: PPUSH
30863: CALL_OW 255
30867: PPUSH
30868: LD_VAR 0 13
30872: PPUSH
30873: CALL_OW 325
30877: NOT
30878: AND
30879: IFFALSE 30908
// missile := Replace ( missile , missile + 1 , 3 ) ;
30881: LD_ADDR_VAR 0 14
30885: PUSH
30886: LD_VAR 0 14
30890: PPUSH
30891: LD_VAR 0 14
30895: PUSH
30896: LD_INT 1
30898: PLUS
30899: PPUSH
30900: LD_INT 3
30902: PPUSH
30903: CALL_OW 1
30907: ST_TO_ADDR
// if missile < 2 then
30908: LD_VAR 0 14
30912: PUSH
30913: LD_INT 2
30915: LESS
30916: IFFALSE 30920
// exit ;
30918: GO 31142
// x := GetX ( enemy ) ;
30920: LD_ADDR_VAR 0 4
30924: PUSH
30925: LD_VAR 0 10
30929: PPUSH
30930: CALL_OW 250
30934: ST_TO_ADDR
// y := GetY ( enemy ) ;
30935: LD_ADDR_VAR 0 5
30939: PUSH
30940: LD_VAR 0 10
30944: PPUSH
30945: CALL_OW 251
30949: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
30950: LD_ADDR_VAR 0 6
30954: PUSH
30955: LD_VAR 0 4
30959: PUSH
30960: LD_INT 1
30962: NEG
30963: PPUSH
30964: LD_INT 1
30966: PPUSH
30967: CALL_OW 12
30971: PLUS
30972: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
30973: LD_ADDR_VAR 0 7
30977: PUSH
30978: LD_VAR 0 5
30982: PUSH
30983: LD_INT 1
30985: NEG
30986: PPUSH
30987: LD_INT 1
30989: PPUSH
30990: CALL_OW 12
30994: PLUS
30995: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
30996: LD_VAR 0 6
31000: PPUSH
31001: LD_VAR 0 7
31005: PPUSH
31006: CALL_OW 488
31010: NOT
31011: IFFALSE 31033
// begin _x := x ;
31013: LD_ADDR_VAR 0 6
31017: PUSH
31018: LD_VAR 0 4
31022: ST_TO_ADDR
// _y := y ;
31023: LD_ADDR_VAR 0 7
31027: PUSH
31028: LD_VAR 0 5
31032: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
31033: LD_ADDR_VAR 0 3
31037: PUSH
31038: LD_INT 1
31040: PPUSH
31041: LD_VAR 0 14
31045: PPUSH
31046: CALL_OW 12
31050: ST_TO_ADDR
// case i of 1 :
31051: LD_VAR 0 3
31055: PUSH
31056: LD_INT 1
31058: DOUBLE
31059: EQUAL
31060: IFTRUE 31064
31062: GO 31081
31064: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
31065: LD_VAR 0 1
31069: PPUSH
31070: LD_VAR 0 10
31074: PPUSH
31075: CALL_OW 115
31079: GO 31142
31081: LD_INT 2
31083: DOUBLE
31084: EQUAL
31085: IFTRUE 31089
31087: GO 31111
31089: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
31090: LD_VAR 0 1
31094: PPUSH
31095: LD_VAR 0 6
31099: PPUSH
31100: LD_VAR 0 7
31104: PPUSH
31105: CALL_OW 153
31109: GO 31142
31111: LD_INT 3
31113: DOUBLE
31114: EQUAL
31115: IFTRUE 31119
31117: GO 31141
31119: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
31120: LD_VAR 0 1
31124: PPUSH
31125: LD_VAR 0 6
31129: PPUSH
31130: LD_VAR 0 7
31134: PPUSH
31135: CALL_OW 154
31139: GO 31142
31141: POP
// end ;
31142: LD_VAR 0 2
31146: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
31147: LD_INT 0
31149: PPUSH
31150: PPUSH
31151: PPUSH
31152: PPUSH
31153: PPUSH
31154: PPUSH
// if not unit or not building then
31155: LD_VAR 0 1
31159: NOT
31160: PUSH
31161: LD_VAR 0 2
31165: NOT
31166: OR
31167: IFFALSE 31171
// exit ;
31169: GO 31329
// x := GetX ( building ) ;
31171: LD_ADDR_VAR 0 5
31175: PUSH
31176: LD_VAR 0 2
31180: PPUSH
31181: CALL_OW 250
31185: ST_TO_ADDR
// y := GetY ( building ) ;
31186: LD_ADDR_VAR 0 6
31190: PUSH
31191: LD_VAR 0 2
31195: PPUSH
31196: CALL_OW 251
31200: ST_TO_ADDR
// for i = 0 to 5 do
31201: LD_ADDR_VAR 0 4
31205: PUSH
31206: DOUBLE
31207: LD_INT 0
31209: DEC
31210: ST_TO_ADDR
31211: LD_INT 5
31213: PUSH
31214: FOR_TO
31215: IFFALSE 31327
// begin _x := ShiftX ( x , i , 3 ) ;
31217: LD_ADDR_VAR 0 7
31221: PUSH
31222: LD_VAR 0 5
31226: PPUSH
31227: LD_VAR 0 4
31231: PPUSH
31232: LD_INT 3
31234: PPUSH
31235: CALL_OW 272
31239: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
31240: LD_ADDR_VAR 0 8
31244: PUSH
31245: LD_VAR 0 6
31249: PPUSH
31250: LD_VAR 0 4
31254: PPUSH
31255: LD_INT 3
31257: PPUSH
31258: CALL_OW 273
31262: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
31263: LD_VAR 0 7
31267: PPUSH
31268: LD_VAR 0 8
31272: PPUSH
31273: CALL_OW 488
31277: NOT
31278: IFFALSE 31282
// continue ;
31280: GO 31214
// if HexInfo ( _x , _y ) = 0 then
31282: LD_VAR 0 7
31286: PPUSH
31287: LD_VAR 0 8
31291: PPUSH
31292: CALL_OW 428
31296: PUSH
31297: LD_INT 0
31299: EQUAL
31300: IFFALSE 31325
// begin ComMoveXY ( unit , _x , _y ) ;
31302: LD_VAR 0 1
31306: PPUSH
31307: LD_VAR 0 7
31311: PPUSH
31312: LD_VAR 0 8
31316: PPUSH
31317: CALL_OW 111
// exit ;
31321: POP
31322: POP
31323: GO 31329
// end ; end ;
31325: GO 31214
31327: POP
31328: POP
// end ;
31329: LD_VAR 0 3
31333: RET
// export function ScanBase ( side , base_area ) ; begin
31334: LD_INT 0
31336: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
31337: LD_ADDR_VAR 0 3
31341: PUSH
31342: LD_VAR 0 2
31346: PPUSH
31347: LD_INT 81
31349: PUSH
31350: LD_VAR 0 1
31354: PUSH
31355: EMPTY
31356: LIST
31357: LIST
31358: PPUSH
31359: CALL_OW 70
31363: ST_TO_ADDR
// end ;
31364: LD_VAR 0 3
31368: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
31369: LD_INT 0
31371: PPUSH
31372: PPUSH
31373: PPUSH
31374: PPUSH
// result := false ;
31375: LD_ADDR_VAR 0 2
31379: PUSH
31380: LD_INT 0
31382: ST_TO_ADDR
// side := GetSide ( unit ) ;
31383: LD_ADDR_VAR 0 3
31387: PUSH
31388: LD_VAR 0 1
31392: PPUSH
31393: CALL_OW 255
31397: ST_TO_ADDR
// nat := GetNation ( unit ) ;
31398: LD_ADDR_VAR 0 4
31402: PUSH
31403: LD_VAR 0 1
31407: PPUSH
31408: CALL_OW 248
31412: ST_TO_ADDR
// case nat of 1 :
31413: LD_VAR 0 4
31417: PUSH
31418: LD_INT 1
31420: DOUBLE
31421: EQUAL
31422: IFTRUE 31426
31424: GO 31437
31426: POP
// tech := tech_lassight ; 2 :
31427: LD_ADDR_VAR 0 5
31431: PUSH
31432: LD_INT 12
31434: ST_TO_ADDR
31435: GO 31476
31437: LD_INT 2
31439: DOUBLE
31440: EQUAL
31441: IFTRUE 31445
31443: GO 31456
31445: POP
// tech := tech_mortar ; 3 :
31446: LD_ADDR_VAR 0 5
31450: PUSH
31451: LD_INT 41
31453: ST_TO_ADDR
31454: GO 31476
31456: LD_INT 3
31458: DOUBLE
31459: EQUAL
31460: IFTRUE 31464
31462: GO 31475
31464: POP
// tech := tech_bazooka ; end ;
31465: LD_ADDR_VAR 0 5
31469: PUSH
31470: LD_INT 44
31472: ST_TO_ADDR
31473: GO 31476
31475: POP
// if Researched ( side , tech ) then
31476: LD_VAR 0 3
31480: PPUSH
31481: LD_VAR 0 5
31485: PPUSH
31486: CALL_OW 325
31490: IFFALSE 31517
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
31492: LD_ADDR_VAR 0 2
31496: PUSH
31497: LD_INT 5
31499: PUSH
31500: LD_INT 8
31502: PUSH
31503: LD_INT 9
31505: PUSH
31506: EMPTY
31507: LIST
31508: LIST
31509: LIST
31510: PUSH
31511: LD_VAR 0 4
31515: ARRAY
31516: ST_TO_ADDR
// end ;
31517: LD_VAR 0 2
31521: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
31522: LD_INT 0
31524: PPUSH
31525: PPUSH
31526: PPUSH
// if not mines then
31527: LD_VAR 0 2
31531: NOT
31532: IFFALSE 31536
// exit ;
31534: GO 31680
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
31536: LD_ADDR_VAR 0 5
31540: PUSH
31541: LD_INT 81
31543: PUSH
31544: LD_VAR 0 1
31548: PUSH
31549: EMPTY
31550: LIST
31551: LIST
31552: PUSH
31553: LD_INT 3
31555: PUSH
31556: LD_INT 21
31558: PUSH
31559: LD_INT 3
31561: PUSH
31562: EMPTY
31563: LIST
31564: LIST
31565: PUSH
31566: EMPTY
31567: LIST
31568: LIST
31569: PUSH
31570: EMPTY
31571: LIST
31572: LIST
31573: PPUSH
31574: CALL_OW 69
31578: ST_TO_ADDR
// for i in mines do
31579: LD_ADDR_VAR 0 4
31583: PUSH
31584: LD_VAR 0 2
31588: PUSH
31589: FOR_IN
31590: IFFALSE 31678
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
31592: LD_VAR 0 4
31596: PUSH
31597: LD_INT 1
31599: ARRAY
31600: PPUSH
31601: LD_VAR 0 4
31605: PUSH
31606: LD_INT 2
31608: ARRAY
31609: PPUSH
31610: CALL_OW 458
31614: NOT
31615: IFFALSE 31619
// continue ;
31617: GO 31589
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
31619: LD_VAR 0 4
31623: PUSH
31624: LD_INT 1
31626: ARRAY
31627: PPUSH
31628: LD_VAR 0 4
31632: PUSH
31633: LD_INT 2
31635: ARRAY
31636: PPUSH
31637: CALL_OW 428
31641: PUSH
31642: LD_VAR 0 5
31646: IN
31647: IFFALSE 31676
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
31649: LD_VAR 0 4
31653: PUSH
31654: LD_INT 1
31656: ARRAY
31657: PPUSH
31658: LD_VAR 0 4
31662: PUSH
31663: LD_INT 2
31665: ARRAY
31666: PPUSH
31667: LD_VAR 0 1
31671: PPUSH
31672: CALL_OW 456
// end ;
31676: GO 31589
31678: POP
31679: POP
// end ;
31680: LD_VAR 0 3
31684: RET
// export function Count ( array ) ; begin
31685: LD_INT 0
31687: PPUSH
// result := array + 0 ;
31688: LD_ADDR_VAR 0 2
31692: PUSH
31693: LD_VAR 0 1
31697: PUSH
31698: LD_INT 0
31700: PLUS
31701: ST_TO_ADDR
// end ;
31702: LD_VAR 0 2
31706: RET
// export function IsEmpty ( building ) ; begin
31707: LD_INT 0
31709: PPUSH
// if not building then
31710: LD_VAR 0 1
31714: NOT
31715: IFFALSE 31719
// exit ;
31717: GO 31762
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
31719: LD_ADDR_VAR 0 2
31723: PUSH
31724: LD_VAR 0 1
31728: PUSH
31729: LD_INT 22
31731: PUSH
31732: LD_VAR 0 1
31736: PPUSH
31737: CALL_OW 255
31741: PUSH
31742: EMPTY
31743: LIST
31744: LIST
31745: PUSH
31746: LD_INT 58
31748: PUSH
31749: EMPTY
31750: LIST
31751: PUSH
31752: EMPTY
31753: LIST
31754: LIST
31755: PPUSH
31756: CALL_OW 69
31760: IN
31761: ST_TO_ADDR
// end ;
31762: LD_VAR 0 2
31766: RET
// export function IsNotFull ( building ) ; var places ; begin
31767: LD_INT 0
31769: PPUSH
31770: PPUSH
// if not building then
31771: LD_VAR 0 1
31775: NOT
31776: IFFALSE 31780
// exit ;
31778: GO 31808
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
31780: LD_ADDR_VAR 0 2
31784: PUSH
31785: LD_VAR 0 1
31789: PPUSH
31790: LD_INT 3
31792: PUSH
31793: LD_INT 62
31795: PUSH
31796: EMPTY
31797: LIST
31798: PUSH
31799: EMPTY
31800: LIST
31801: LIST
31802: PPUSH
31803: CALL_OW 72
31807: ST_TO_ADDR
// end ;
31808: LD_VAR 0 2
31812: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
31813: LD_INT 0
31815: PPUSH
31816: PPUSH
31817: PPUSH
31818: PPUSH
// tmp := [ ] ;
31819: LD_ADDR_VAR 0 3
31823: PUSH
31824: EMPTY
31825: ST_TO_ADDR
// list := [ ] ;
31826: LD_ADDR_VAR 0 5
31830: PUSH
31831: EMPTY
31832: ST_TO_ADDR
// for i = 16 to 25 do
31833: LD_ADDR_VAR 0 4
31837: PUSH
31838: DOUBLE
31839: LD_INT 16
31841: DEC
31842: ST_TO_ADDR
31843: LD_INT 25
31845: PUSH
31846: FOR_TO
31847: IFFALSE 31920
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
31849: LD_ADDR_VAR 0 3
31853: PUSH
31854: LD_VAR 0 3
31858: PUSH
31859: LD_INT 22
31861: PUSH
31862: LD_VAR 0 1
31866: PPUSH
31867: CALL_OW 255
31871: PUSH
31872: EMPTY
31873: LIST
31874: LIST
31875: PUSH
31876: LD_INT 91
31878: PUSH
31879: LD_VAR 0 1
31883: PUSH
31884: LD_INT 6
31886: PUSH
31887: EMPTY
31888: LIST
31889: LIST
31890: LIST
31891: PUSH
31892: LD_INT 30
31894: PUSH
31895: LD_VAR 0 4
31899: PUSH
31900: EMPTY
31901: LIST
31902: LIST
31903: PUSH
31904: EMPTY
31905: LIST
31906: LIST
31907: LIST
31908: PUSH
31909: EMPTY
31910: LIST
31911: PPUSH
31912: CALL_OW 69
31916: ADD
31917: ST_TO_ADDR
31918: GO 31846
31920: POP
31921: POP
// for i = 1 to tmp do
31922: LD_ADDR_VAR 0 4
31926: PUSH
31927: DOUBLE
31928: LD_INT 1
31930: DEC
31931: ST_TO_ADDR
31932: LD_VAR 0 3
31936: PUSH
31937: FOR_TO
31938: IFFALSE 32026
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
31940: LD_ADDR_VAR 0 5
31944: PUSH
31945: LD_VAR 0 5
31949: PUSH
31950: LD_VAR 0 3
31954: PUSH
31955: LD_VAR 0 4
31959: ARRAY
31960: PPUSH
31961: CALL_OW 266
31965: PUSH
31966: LD_VAR 0 3
31970: PUSH
31971: LD_VAR 0 4
31975: ARRAY
31976: PPUSH
31977: CALL_OW 250
31981: PUSH
31982: LD_VAR 0 3
31986: PUSH
31987: LD_VAR 0 4
31991: ARRAY
31992: PPUSH
31993: CALL_OW 251
31997: PUSH
31998: LD_VAR 0 3
32002: PUSH
32003: LD_VAR 0 4
32007: ARRAY
32008: PPUSH
32009: CALL_OW 254
32013: PUSH
32014: EMPTY
32015: LIST
32016: LIST
32017: LIST
32018: LIST
32019: PUSH
32020: EMPTY
32021: LIST
32022: ADD
32023: ST_TO_ADDR
32024: GO 31937
32026: POP
32027: POP
// result := list ;
32028: LD_ADDR_VAR 0 2
32032: PUSH
32033: LD_VAR 0 5
32037: ST_TO_ADDR
// end ;
32038: LD_VAR 0 2
32042: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
32043: LD_INT 0
32045: PPUSH
32046: PPUSH
32047: PPUSH
32048: PPUSH
32049: PPUSH
32050: PPUSH
32051: PPUSH
// if not factory then
32052: LD_VAR 0 1
32056: NOT
32057: IFFALSE 32061
// exit ;
32059: GO 32654
// if control = control_apeman then
32061: LD_VAR 0 4
32065: PUSH
32066: LD_INT 5
32068: EQUAL
32069: IFFALSE 32178
// begin tmp := UnitsInside ( factory ) ;
32071: LD_ADDR_VAR 0 8
32075: PUSH
32076: LD_VAR 0 1
32080: PPUSH
32081: CALL_OW 313
32085: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
32086: LD_VAR 0 8
32090: PPUSH
32091: LD_INT 25
32093: PUSH
32094: LD_INT 12
32096: PUSH
32097: EMPTY
32098: LIST
32099: LIST
32100: PPUSH
32101: CALL_OW 72
32105: NOT
32106: IFFALSE 32116
// control := control_manual ;
32108: LD_ADDR_VAR 0 4
32112: PUSH
32113: LD_INT 1
32115: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
32116: LD_ADDR_VAR 0 8
32120: PUSH
32121: LD_VAR 0 1
32125: PPUSH
32126: CALL 31813 0 1
32130: ST_TO_ADDR
// if tmp then
32131: LD_VAR 0 8
32135: IFFALSE 32178
// begin for i in tmp do
32137: LD_ADDR_VAR 0 7
32141: PUSH
32142: LD_VAR 0 8
32146: PUSH
32147: FOR_IN
32148: IFFALSE 32176
// if i [ 1 ] = b_ext_radio then
32150: LD_VAR 0 7
32154: PUSH
32155: LD_INT 1
32157: ARRAY
32158: PUSH
32159: LD_INT 22
32161: EQUAL
32162: IFFALSE 32174
// begin control := control_remote ;
32164: LD_ADDR_VAR 0 4
32168: PUSH
32169: LD_INT 2
32171: ST_TO_ADDR
// break ;
32172: GO 32176
// end ;
32174: GO 32147
32176: POP
32177: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
32178: LD_VAR 0 1
32182: PPUSH
32183: LD_VAR 0 2
32187: PPUSH
32188: LD_VAR 0 3
32192: PPUSH
32193: LD_VAR 0 4
32197: PPUSH
32198: LD_VAR 0 5
32202: PPUSH
32203: CALL_OW 448
32207: IFFALSE 32242
// begin result := [ chassis , engine , control , weapon ] ;
32209: LD_ADDR_VAR 0 6
32213: PUSH
32214: LD_VAR 0 2
32218: PUSH
32219: LD_VAR 0 3
32223: PUSH
32224: LD_VAR 0 4
32228: PUSH
32229: LD_VAR 0 5
32233: PUSH
32234: EMPTY
32235: LIST
32236: LIST
32237: LIST
32238: LIST
32239: ST_TO_ADDR
// exit ;
32240: GO 32654
// end ; _chassis := AvailableChassisList ( factory ) ;
32242: LD_ADDR_VAR 0 9
32246: PUSH
32247: LD_VAR 0 1
32251: PPUSH
32252: CALL_OW 475
32256: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
32257: LD_ADDR_VAR 0 11
32261: PUSH
32262: LD_VAR 0 1
32266: PPUSH
32267: CALL_OW 476
32271: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
32272: LD_ADDR_VAR 0 12
32276: PUSH
32277: LD_VAR 0 1
32281: PPUSH
32282: CALL_OW 477
32286: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
32287: LD_ADDR_VAR 0 10
32291: PUSH
32292: LD_VAR 0 1
32296: PPUSH
32297: CALL_OW 478
32301: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
32302: LD_VAR 0 9
32306: NOT
32307: PUSH
32308: LD_VAR 0 11
32312: NOT
32313: OR
32314: PUSH
32315: LD_VAR 0 12
32319: NOT
32320: OR
32321: PUSH
32322: LD_VAR 0 10
32326: NOT
32327: OR
32328: IFFALSE 32363
// begin result := [ chassis , engine , control , weapon ] ;
32330: LD_ADDR_VAR 0 6
32334: PUSH
32335: LD_VAR 0 2
32339: PUSH
32340: LD_VAR 0 3
32344: PUSH
32345: LD_VAR 0 4
32349: PUSH
32350: LD_VAR 0 5
32354: PUSH
32355: EMPTY
32356: LIST
32357: LIST
32358: LIST
32359: LIST
32360: ST_TO_ADDR
// exit ;
32361: GO 32654
// end ; if not chassis in _chassis then
32363: LD_VAR 0 2
32367: PUSH
32368: LD_VAR 0 9
32372: IN
32373: NOT
32374: IFFALSE 32400
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
32376: LD_ADDR_VAR 0 2
32380: PUSH
32381: LD_VAR 0 9
32385: PUSH
32386: LD_INT 1
32388: PPUSH
32389: LD_VAR 0 9
32393: PPUSH
32394: CALL_OW 12
32398: ARRAY
32399: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
32400: LD_VAR 0 2
32404: PPUSH
32405: LD_VAR 0 3
32409: PPUSH
32410: CALL 32659 0 2
32414: NOT
32415: IFFALSE 32474
// repeat engine := _engine [ 1 ] ;
32417: LD_ADDR_VAR 0 3
32421: PUSH
32422: LD_VAR 0 11
32426: PUSH
32427: LD_INT 1
32429: ARRAY
32430: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
32431: LD_ADDR_VAR 0 11
32435: PUSH
32436: LD_VAR 0 11
32440: PPUSH
32441: LD_INT 1
32443: PPUSH
32444: CALL_OW 3
32448: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
32449: LD_VAR 0 2
32453: PPUSH
32454: LD_VAR 0 3
32458: PPUSH
32459: CALL 32659 0 2
32463: PUSH
32464: LD_VAR 0 11
32468: PUSH
32469: EMPTY
32470: EQUAL
32471: OR
32472: IFFALSE 32417
// if not control in _control then
32474: LD_VAR 0 4
32478: PUSH
32479: LD_VAR 0 12
32483: IN
32484: NOT
32485: IFFALSE 32511
// control := _control [ rand ( 1 , _control ) ] ;
32487: LD_ADDR_VAR 0 4
32491: PUSH
32492: LD_VAR 0 12
32496: PUSH
32497: LD_INT 1
32499: PPUSH
32500: LD_VAR 0 12
32504: PPUSH
32505: CALL_OW 12
32509: ARRAY
32510: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
32511: LD_VAR 0 2
32515: PPUSH
32516: LD_VAR 0 5
32520: PPUSH
32521: CALL 32879 0 2
32525: NOT
32526: IFFALSE 32585
// repeat weapon := _weapon [ 1 ] ;
32528: LD_ADDR_VAR 0 5
32532: PUSH
32533: LD_VAR 0 10
32537: PUSH
32538: LD_INT 1
32540: ARRAY
32541: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
32542: LD_ADDR_VAR 0 10
32546: PUSH
32547: LD_VAR 0 10
32551: PPUSH
32552: LD_INT 1
32554: PPUSH
32555: CALL_OW 3
32559: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
32560: LD_VAR 0 2
32564: PPUSH
32565: LD_VAR 0 5
32569: PPUSH
32570: CALL 32879 0 2
32574: PUSH
32575: LD_VAR 0 10
32579: PUSH
32580: EMPTY
32581: EQUAL
32582: OR
32583: IFFALSE 32528
// result := [ ] ;
32585: LD_ADDR_VAR 0 6
32589: PUSH
32590: EMPTY
32591: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
32592: LD_VAR 0 1
32596: PPUSH
32597: LD_VAR 0 2
32601: PPUSH
32602: LD_VAR 0 3
32606: PPUSH
32607: LD_VAR 0 4
32611: PPUSH
32612: LD_VAR 0 5
32616: PPUSH
32617: CALL_OW 448
32621: IFFALSE 32654
// result := [ chassis , engine , control , weapon ] ;
32623: LD_ADDR_VAR 0 6
32627: PUSH
32628: LD_VAR 0 2
32632: PUSH
32633: LD_VAR 0 3
32637: PUSH
32638: LD_VAR 0 4
32642: PUSH
32643: LD_VAR 0 5
32647: PUSH
32648: EMPTY
32649: LIST
32650: LIST
32651: LIST
32652: LIST
32653: ST_TO_ADDR
// end ;
32654: LD_VAR 0 6
32658: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
32659: LD_INT 0
32661: PPUSH
// if not chassis or not engine then
32662: LD_VAR 0 1
32666: NOT
32667: PUSH
32668: LD_VAR 0 2
32672: NOT
32673: OR
32674: IFFALSE 32678
// exit ;
32676: GO 32874
// case engine of engine_solar :
32678: LD_VAR 0 2
32682: PUSH
32683: LD_INT 2
32685: DOUBLE
32686: EQUAL
32687: IFTRUE 32691
32689: GO 32729
32691: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
32692: LD_ADDR_VAR 0 3
32696: PUSH
32697: LD_INT 11
32699: PUSH
32700: LD_INT 12
32702: PUSH
32703: LD_INT 13
32705: PUSH
32706: LD_INT 14
32708: PUSH
32709: LD_INT 1
32711: PUSH
32712: LD_INT 2
32714: PUSH
32715: LD_INT 3
32717: PUSH
32718: EMPTY
32719: LIST
32720: LIST
32721: LIST
32722: LIST
32723: LIST
32724: LIST
32725: LIST
32726: ST_TO_ADDR
32727: GO 32858
32729: LD_INT 1
32731: DOUBLE
32732: EQUAL
32733: IFTRUE 32737
32735: GO 32799
32737: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
32738: LD_ADDR_VAR 0 3
32742: PUSH
32743: LD_INT 11
32745: PUSH
32746: LD_INT 12
32748: PUSH
32749: LD_INT 13
32751: PUSH
32752: LD_INT 14
32754: PUSH
32755: LD_INT 1
32757: PUSH
32758: LD_INT 2
32760: PUSH
32761: LD_INT 3
32763: PUSH
32764: LD_INT 4
32766: PUSH
32767: LD_INT 5
32769: PUSH
32770: LD_INT 21
32772: PUSH
32773: LD_INT 23
32775: PUSH
32776: LD_INT 22
32778: PUSH
32779: LD_INT 24
32781: PUSH
32782: EMPTY
32783: LIST
32784: LIST
32785: LIST
32786: LIST
32787: LIST
32788: LIST
32789: LIST
32790: LIST
32791: LIST
32792: LIST
32793: LIST
32794: LIST
32795: LIST
32796: ST_TO_ADDR
32797: GO 32858
32799: LD_INT 3
32801: DOUBLE
32802: EQUAL
32803: IFTRUE 32807
32805: GO 32857
32807: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
32808: LD_ADDR_VAR 0 3
32812: PUSH
32813: LD_INT 13
32815: PUSH
32816: LD_INT 14
32818: PUSH
32819: LD_INT 2
32821: PUSH
32822: LD_INT 3
32824: PUSH
32825: LD_INT 4
32827: PUSH
32828: LD_INT 5
32830: PUSH
32831: LD_INT 21
32833: PUSH
32834: LD_INT 22
32836: PUSH
32837: LD_INT 23
32839: PUSH
32840: LD_INT 24
32842: PUSH
32843: EMPTY
32844: LIST
32845: LIST
32846: LIST
32847: LIST
32848: LIST
32849: LIST
32850: LIST
32851: LIST
32852: LIST
32853: LIST
32854: ST_TO_ADDR
32855: GO 32858
32857: POP
// result := ( chassis in result ) ;
32858: LD_ADDR_VAR 0 3
32862: PUSH
32863: LD_VAR 0 1
32867: PUSH
32868: LD_VAR 0 3
32872: IN
32873: ST_TO_ADDR
// end ;
32874: LD_VAR 0 3
32878: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
32879: LD_INT 0
32881: PPUSH
// if not chassis or not weapon then
32882: LD_VAR 0 1
32886: NOT
32887: PUSH
32888: LD_VAR 0 2
32892: NOT
32893: OR
32894: IFFALSE 32898
// exit ;
32896: GO 33958
// case weapon of us_machine_gun :
32898: LD_VAR 0 2
32902: PUSH
32903: LD_INT 2
32905: DOUBLE
32906: EQUAL
32907: IFTRUE 32911
32909: GO 32941
32911: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
32912: LD_ADDR_VAR 0 3
32916: PUSH
32917: LD_INT 1
32919: PUSH
32920: LD_INT 2
32922: PUSH
32923: LD_INT 3
32925: PUSH
32926: LD_INT 4
32928: PUSH
32929: LD_INT 5
32931: PUSH
32932: EMPTY
32933: LIST
32934: LIST
32935: LIST
32936: LIST
32937: LIST
32938: ST_TO_ADDR
32939: GO 33942
32941: LD_INT 3
32943: DOUBLE
32944: EQUAL
32945: IFTRUE 32949
32947: GO 32979
32949: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
32950: LD_ADDR_VAR 0 3
32954: PUSH
32955: LD_INT 1
32957: PUSH
32958: LD_INT 2
32960: PUSH
32961: LD_INT 3
32963: PUSH
32964: LD_INT 4
32966: PUSH
32967: LD_INT 5
32969: PUSH
32970: EMPTY
32971: LIST
32972: LIST
32973: LIST
32974: LIST
32975: LIST
32976: ST_TO_ADDR
32977: GO 33942
32979: LD_INT 11
32981: DOUBLE
32982: EQUAL
32983: IFTRUE 32987
32985: GO 33017
32987: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
32988: LD_ADDR_VAR 0 3
32992: PUSH
32993: LD_INT 1
32995: PUSH
32996: LD_INT 2
32998: PUSH
32999: LD_INT 3
33001: PUSH
33002: LD_INT 4
33004: PUSH
33005: LD_INT 5
33007: PUSH
33008: EMPTY
33009: LIST
33010: LIST
33011: LIST
33012: LIST
33013: LIST
33014: ST_TO_ADDR
33015: GO 33942
33017: LD_INT 4
33019: DOUBLE
33020: EQUAL
33021: IFTRUE 33025
33023: GO 33051
33025: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
33026: LD_ADDR_VAR 0 3
33030: PUSH
33031: LD_INT 2
33033: PUSH
33034: LD_INT 3
33036: PUSH
33037: LD_INT 4
33039: PUSH
33040: LD_INT 5
33042: PUSH
33043: EMPTY
33044: LIST
33045: LIST
33046: LIST
33047: LIST
33048: ST_TO_ADDR
33049: GO 33942
33051: LD_INT 5
33053: DOUBLE
33054: EQUAL
33055: IFTRUE 33059
33057: GO 33085
33059: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
33060: LD_ADDR_VAR 0 3
33064: PUSH
33065: LD_INT 2
33067: PUSH
33068: LD_INT 3
33070: PUSH
33071: LD_INT 4
33073: PUSH
33074: LD_INT 5
33076: PUSH
33077: EMPTY
33078: LIST
33079: LIST
33080: LIST
33081: LIST
33082: ST_TO_ADDR
33083: GO 33942
33085: LD_INT 9
33087: DOUBLE
33088: EQUAL
33089: IFTRUE 33093
33091: GO 33119
33093: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
33094: LD_ADDR_VAR 0 3
33098: PUSH
33099: LD_INT 2
33101: PUSH
33102: LD_INT 3
33104: PUSH
33105: LD_INT 4
33107: PUSH
33108: LD_INT 5
33110: PUSH
33111: EMPTY
33112: LIST
33113: LIST
33114: LIST
33115: LIST
33116: ST_TO_ADDR
33117: GO 33942
33119: LD_INT 7
33121: DOUBLE
33122: EQUAL
33123: IFTRUE 33127
33125: GO 33153
33127: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
33128: LD_ADDR_VAR 0 3
33132: PUSH
33133: LD_INT 2
33135: PUSH
33136: LD_INT 3
33138: PUSH
33139: LD_INT 4
33141: PUSH
33142: LD_INT 5
33144: PUSH
33145: EMPTY
33146: LIST
33147: LIST
33148: LIST
33149: LIST
33150: ST_TO_ADDR
33151: GO 33942
33153: LD_INT 12
33155: DOUBLE
33156: EQUAL
33157: IFTRUE 33161
33159: GO 33187
33161: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
33162: LD_ADDR_VAR 0 3
33166: PUSH
33167: LD_INT 2
33169: PUSH
33170: LD_INT 3
33172: PUSH
33173: LD_INT 4
33175: PUSH
33176: LD_INT 5
33178: PUSH
33179: EMPTY
33180: LIST
33181: LIST
33182: LIST
33183: LIST
33184: ST_TO_ADDR
33185: GO 33942
33187: LD_INT 13
33189: DOUBLE
33190: EQUAL
33191: IFTRUE 33195
33193: GO 33221
33195: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
33196: LD_ADDR_VAR 0 3
33200: PUSH
33201: LD_INT 2
33203: PUSH
33204: LD_INT 3
33206: PUSH
33207: LD_INT 4
33209: PUSH
33210: LD_INT 5
33212: PUSH
33213: EMPTY
33214: LIST
33215: LIST
33216: LIST
33217: LIST
33218: ST_TO_ADDR
33219: GO 33942
33221: LD_INT 14
33223: DOUBLE
33224: EQUAL
33225: IFTRUE 33229
33227: GO 33247
33229: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
33230: LD_ADDR_VAR 0 3
33234: PUSH
33235: LD_INT 4
33237: PUSH
33238: LD_INT 5
33240: PUSH
33241: EMPTY
33242: LIST
33243: LIST
33244: ST_TO_ADDR
33245: GO 33942
33247: LD_INT 6
33249: DOUBLE
33250: EQUAL
33251: IFTRUE 33255
33253: GO 33273
33255: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
33256: LD_ADDR_VAR 0 3
33260: PUSH
33261: LD_INT 4
33263: PUSH
33264: LD_INT 5
33266: PUSH
33267: EMPTY
33268: LIST
33269: LIST
33270: ST_TO_ADDR
33271: GO 33942
33273: LD_INT 10
33275: DOUBLE
33276: EQUAL
33277: IFTRUE 33281
33279: GO 33299
33281: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
33282: LD_ADDR_VAR 0 3
33286: PUSH
33287: LD_INT 4
33289: PUSH
33290: LD_INT 5
33292: PUSH
33293: EMPTY
33294: LIST
33295: LIST
33296: ST_TO_ADDR
33297: GO 33942
33299: LD_INT 22
33301: DOUBLE
33302: EQUAL
33303: IFTRUE 33307
33305: GO 33333
33307: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
33308: LD_ADDR_VAR 0 3
33312: PUSH
33313: LD_INT 11
33315: PUSH
33316: LD_INT 12
33318: PUSH
33319: LD_INT 13
33321: PUSH
33322: LD_INT 14
33324: PUSH
33325: EMPTY
33326: LIST
33327: LIST
33328: LIST
33329: LIST
33330: ST_TO_ADDR
33331: GO 33942
33333: LD_INT 23
33335: DOUBLE
33336: EQUAL
33337: IFTRUE 33341
33339: GO 33367
33341: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
33342: LD_ADDR_VAR 0 3
33346: PUSH
33347: LD_INT 11
33349: PUSH
33350: LD_INT 12
33352: PUSH
33353: LD_INT 13
33355: PUSH
33356: LD_INT 14
33358: PUSH
33359: EMPTY
33360: LIST
33361: LIST
33362: LIST
33363: LIST
33364: ST_TO_ADDR
33365: GO 33942
33367: LD_INT 24
33369: DOUBLE
33370: EQUAL
33371: IFTRUE 33375
33373: GO 33401
33375: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
33376: LD_ADDR_VAR 0 3
33380: PUSH
33381: LD_INT 11
33383: PUSH
33384: LD_INT 12
33386: PUSH
33387: LD_INT 13
33389: PUSH
33390: LD_INT 14
33392: PUSH
33393: EMPTY
33394: LIST
33395: LIST
33396: LIST
33397: LIST
33398: ST_TO_ADDR
33399: GO 33942
33401: LD_INT 30
33403: DOUBLE
33404: EQUAL
33405: IFTRUE 33409
33407: GO 33435
33409: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
33410: LD_ADDR_VAR 0 3
33414: PUSH
33415: LD_INT 11
33417: PUSH
33418: LD_INT 12
33420: PUSH
33421: LD_INT 13
33423: PUSH
33424: LD_INT 14
33426: PUSH
33427: EMPTY
33428: LIST
33429: LIST
33430: LIST
33431: LIST
33432: ST_TO_ADDR
33433: GO 33942
33435: LD_INT 25
33437: DOUBLE
33438: EQUAL
33439: IFTRUE 33443
33441: GO 33461
33443: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
33444: LD_ADDR_VAR 0 3
33448: PUSH
33449: LD_INT 13
33451: PUSH
33452: LD_INT 14
33454: PUSH
33455: EMPTY
33456: LIST
33457: LIST
33458: ST_TO_ADDR
33459: GO 33942
33461: LD_INT 27
33463: DOUBLE
33464: EQUAL
33465: IFTRUE 33469
33467: GO 33487
33469: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
33470: LD_ADDR_VAR 0 3
33474: PUSH
33475: LD_INT 13
33477: PUSH
33478: LD_INT 14
33480: PUSH
33481: EMPTY
33482: LIST
33483: LIST
33484: ST_TO_ADDR
33485: GO 33942
33487: LD_INT 92
33489: DOUBLE
33490: EQUAL
33491: IFTRUE 33495
33493: GO 33521
33495: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
33496: LD_ADDR_VAR 0 3
33500: PUSH
33501: LD_INT 11
33503: PUSH
33504: LD_INT 12
33506: PUSH
33507: LD_INT 13
33509: PUSH
33510: LD_INT 14
33512: PUSH
33513: EMPTY
33514: LIST
33515: LIST
33516: LIST
33517: LIST
33518: ST_TO_ADDR
33519: GO 33942
33521: LD_INT 28
33523: DOUBLE
33524: EQUAL
33525: IFTRUE 33529
33527: GO 33547
33529: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
33530: LD_ADDR_VAR 0 3
33534: PUSH
33535: LD_INT 13
33537: PUSH
33538: LD_INT 14
33540: PUSH
33541: EMPTY
33542: LIST
33543: LIST
33544: ST_TO_ADDR
33545: GO 33942
33547: LD_INT 29
33549: DOUBLE
33550: EQUAL
33551: IFTRUE 33555
33553: GO 33573
33555: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
33556: LD_ADDR_VAR 0 3
33560: PUSH
33561: LD_INT 13
33563: PUSH
33564: LD_INT 14
33566: PUSH
33567: EMPTY
33568: LIST
33569: LIST
33570: ST_TO_ADDR
33571: GO 33942
33573: LD_INT 31
33575: DOUBLE
33576: EQUAL
33577: IFTRUE 33581
33579: GO 33599
33581: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
33582: LD_ADDR_VAR 0 3
33586: PUSH
33587: LD_INT 13
33589: PUSH
33590: LD_INT 14
33592: PUSH
33593: EMPTY
33594: LIST
33595: LIST
33596: ST_TO_ADDR
33597: GO 33942
33599: LD_INT 26
33601: DOUBLE
33602: EQUAL
33603: IFTRUE 33607
33605: GO 33625
33607: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
33608: LD_ADDR_VAR 0 3
33612: PUSH
33613: LD_INT 13
33615: PUSH
33616: LD_INT 14
33618: PUSH
33619: EMPTY
33620: LIST
33621: LIST
33622: ST_TO_ADDR
33623: GO 33942
33625: LD_INT 42
33627: DOUBLE
33628: EQUAL
33629: IFTRUE 33633
33631: GO 33659
33633: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
33634: LD_ADDR_VAR 0 3
33638: PUSH
33639: LD_INT 21
33641: PUSH
33642: LD_INT 22
33644: PUSH
33645: LD_INT 23
33647: PUSH
33648: LD_INT 24
33650: PUSH
33651: EMPTY
33652: LIST
33653: LIST
33654: LIST
33655: LIST
33656: ST_TO_ADDR
33657: GO 33942
33659: LD_INT 43
33661: DOUBLE
33662: EQUAL
33663: IFTRUE 33667
33665: GO 33693
33667: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
33668: LD_ADDR_VAR 0 3
33672: PUSH
33673: LD_INT 21
33675: PUSH
33676: LD_INT 22
33678: PUSH
33679: LD_INT 23
33681: PUSH
33682: LD_INT 24
33684: PUSH
33685: EMPTY
33686: LIST
33687: LIST
33688: LIST
33689: LIST
33690: ST_TO_ADDR
33691: GO 33942
33693: LD_INT 44
33695: DOUBLE
33696: EQUAL
33697: IFTRUE 33701
33699: GO 33727
33701: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
33702: LD_ADDR_VAR 0 3
33706: PUSH
33707: LD_INT 21
33709: PUSH
33710: LD_INT 22
33712: PUSH
33713: LD_INT 23
33715: PUSH
33716: LD_INT 24
33718: PUSH
33719: EMPTY
33720: LIST
33721: LIST
33722: LIST
33723: LIST
33724: ST_TO_ADDR
33725: GO 33942
33727: LD_INT 45
33729: DOUBLE
33730: EQUAL
33731: IFTRUE 33735
33733: GO 33761
33735: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
33736: LD_ADDR_VAR 0 3
33740: PUSH
33741: LD_INT 21
33743: PUSH
33744: LD_INT 22
33746: PUSH
33747: LD_INT 23
33749: PUSH
33750: LD_INT 24
33752: PUSH
33753: EMPTY
33754: LIST
33755: LIST
33756: LIST
33757: LIST
33758: ST_TO_ADDR
33759: GO 33942
33761: LD_INT 49
33763: DOUBLE
33764: EQUAL
33765: IFTRUE 33769
33767: GO 33795
33769: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
33770: LD_ADDR_VAR 0 3
33774: PUSH
33775: LD_INT 21
33777: PUSH
33778: LD_INT 22
33780: PUSH
33781: LD_INT 23
33783: PUSH
33784: LD_INT 24
33786: PUSH
33787: EMPTY
33788: LIST
33789: LIST
33790: LIST
33791: LIST
33792: ST_TO_ADDR
33793: GO 33942
33795: LD_INT 51
33797: DOUBLE
33798: EQUAL
33799: IFTRUE 33803
33801: GO 33829
33803: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
33804: LD_ADDR_VAR 0 3
33808: PUSH
33809: LD_INT 21
33811: PUSH
33812: LD_INT 22
33814: PUSH
33815: LD_INT 23
33817: PUSH
33818: LD_INT 24
33820: PUSH
33821: EMPTY
33822: LIST
33823: LIST
33824: LIST
33825: LIST
33826: ST_TO_ADDR
33827: GO 33942
33829: LD_INT 52
33831: DOUBLE
33832: EQUAL
33833: IFTRUE 33837
33835: GO 33863
33837: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
33838: LD_ADDR_VAR 0 3
33842: PUSH
33843: LD_INT 21
33845: PUSH
33846: LD_INT 22
33848: PUSH
33849: LD_INT 23
33851: PUSH
33852: LD_INT 24
33854: PUSH
33855: EMPTY
33856: LIST
33857: LIST
33858: LIST
33859: LIST
33860: ST_TO_ADDR
33861: GO 33942
33863: LD_INT 53
33865: DOUBLE
33866: EQUAL
33867: IFTRUE 33871
33869: GO 33889
33871: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
33872: LD_ADDR_VAR 0 3
33876: PUSH
33877: LD_INT 23
33879: PUSH
33880: LD_INT 24
33882: PUSH
33883: EMPTY
33884: LIST
33885: LIST
33886: ST_TO_ADDR
33887: GO 33942
33889: LD_INT 46
33891: DOUBLE
33892: EQUAL
33893: IFTRUE 33897
33895: GO 33915
33897: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
33898: LD_ADDR_VAR 0 3
33902: PUSH
33903: LD_INT 23
33905: PUSH
33906: LD_INT 24
33908: PUSH
33909: EMPTY
33910: LIST
33911: LIST
33912: ST_TO_ADDR
33913: GO 33942
33915: LD_INT 47
33917: DOUBLE
33918: EQUAL
33919: IFTRUE 33923
33921: GO 33941
33923: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
33924: LD_ADDR_VAR 0 3
33928: PUSH
33929: LD_INT 23
33931: PUSH
33932: LD_INT 24
33934: PUSH
33935: EMPTY
33936: LIST
33937: LIST
33938: ST_TO_ADDR
33939: GO 33942
33941: POP
// result := ( chassis in result ) ;
33942: LD_ADDR_VAR 0 3
33946: PUSH
33947: LD_VAR 0 1
33951: PUSH
33952: LD_VAR 0 3
33956: IN
33957: ST_TO_ADDR
// end ;
33958: LD_VAR 0 3
33962: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
33963: LD_INT 0
33965: PPUSH
33966: PPUSH
33967: PPUSH
33968: PPUSH
33969: PPUSH
33970: PPUSH
33971: PPUSH
// result := array ;
33972: LD_ADDR_VAR 0 5
33976: PUSH
33977: LD_VAR 0 1
33981: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
33982: LD_VAR 0 1
33986: NOT
33987: PUSH
33988: LD_VAR 0 2
33992: NOT
33993: OR
33994: PUSH
33995: LD_VAR 0 3
33999: NOT
34000: OR
34001: PUSH
34002: LD_VAR 0 2
34006: PUSH
34007: LD_VAR 0 1
34011: GREATER
34012: OR
34013: PUSH
34014: LD_VAR 0 3
34018: PUSH
34019: LD_VAR 0 1
34023: GREATER
34024: OR
34025: IFFALSE 34029
// exit ;
34027: GO 34325
// if direction then
34029: LD_VAR 0 4
34033: IFFALSE 34097
// begin d := 1 ;
34035: LD_ADDR_VAR 0 9
34039: PUSH
34040: LD_INT 1
34042: ST_TO_ADDR
// if i_from > i_to then
34043: LD_VAR 0 2
34047: PUSH
34048: LD_VAR 0 3
34052: GREATER
34053: IFFALSE 34079
// length := ( array - i_from ) + i_to else
34055: LD_ADDR_VAR 0 11
34059: PUSH
34060: LD_VAR 0 1
34064: PUSH
34065: LD_VAR 0 2
34069: MINUS
34070: PUSH
34071: LD_VAR 0 3
34075: PLUS
34076: ST_TO_ADDR
34077: GO 34095
// length := i_to - i_from ;
34079: LD_ADDR_VAR 0 11
34083: PUSH
34084: LD_VAR 0 3
34088: PUSH
34089: LD_VAR 0 2
34093: MINUS
34094: ST_TO_ADDR
// end else
34095: GO 34158
// begin d := - 1 ;
34097: LD_ADDR_VAR 0 9
34101: PUSH
34102: LD_INT 1
34104: NEG
34105: ST_TO_ADDR
// if i_from > i_to then
34106: LD_VAR 0 2
34110: PUSH
34111: LD_VAR 0 3
34115: GREATER
34116: IFFALSE 34136
// length := i_from - i_to else
34118: LD_ADDR_VAR 0 11
34122: PUSH
34123: LD_VAR 0 2
34127: PUSH
34128: LD_VAR 0 3
34132: MINUS
34133: ST_TO_ADDR
34134: GO 34158
// length := ( array - i_to ) + i_from ;
34136: LD_ADDR_VAR 0 11
34140: PUSH
34141: LD_VAR 0 1
34145: PUSH
34146: LD_VAR 0 3
34150: MINUS
34151: PUSH
34152: LD_VAR 0 2
34156: PLUS
34157: ST_TO_ADDR
// end ; if not length then
34158: LD_VAR 0 11
34162: NOT
34163: IFFALSE 34167
// exit ;
34165: GO 34325
// tmp := array ;
34167: LD_ADDR_VAR 0 10
34171: PUSH
34172: LD_VAR 0 1
34176: ST_TO_ADDR
// for i = 1 to length do
34177: LD_ADDR_VAR 0 6
34181: PUSH
34182: DOUBLE
34183: LD_INT 1
34185: DEC
34186: ST_TO_ADDR
34187: LD_VAR 0 11
34191: PUSH
34192: FOR_TO
34193: IFFALSE 34313
// begin for j = 1 to array do
34195: LD_ADDR_VAR 0 7
34199: PUSH
34200: DOUBLE
34201: LD_INT 1
34203: DEC
34204: ST_TO_ADDR
34205: LD_VAR 0 1
34209: PUSH
34210: FOR_TO
34211: IFFALSE 34299
// begin k := j + d ;
34213: LD_ADDR_VAR 0 8
34217: PUSH
34218: LD_VAR 0 7
34222: PUSH
34223: LD_VAR 0 9
34227: PLUS
34228: ST_TO_ADDR
// if k > array then
34229: LD_VAR 0 8
34233: PUSH
34234: LD_VAR 0 1
34238: GREATER
34239: IFFALSE 34249
// k := 1 ;
34241: LD_ADDR_VAR 0 8
34245: PUSH
34246: LD_INT 1
34248: ST_TO_ADDR
// if not k then
34249: LD_VAR 0 8
34253: NOT
34254: IFFALSE 34266
// k := array ;
34256: LD_ADDR_VAR 0 8
34260: PUSH
34261: LD_VAR 0 1
34265: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
34266: LD_ADDR_VAR 0 10
34270: PUSH
34271: LD_VAR 0 10
34275: PPUSH
34276: LD_VAR 0 8
34280: PPUSH
34281: LD_VAR 0 1
34285: PUSH
34286: LD_VAR 0 7
34290: ARRAY
34291: PPUSH
34292: CALL_OW 1
34296: ST_TO_ADDR
// end ;
34297: GO 34210
34299: POP
34300: POP
// array := tmp ;
34301: LD_ADDR_VAR 0 1
34305: PUSH
34306: LD_VAR 0 10
34310: ST_TO_ADDR
// end ;
34311: GO 34192
34313: POP
34314: POP
// result := array ;
34315: LD_ADDR_VAR 0 5
34319: PUSH
34320: LD_VAR 0 1
34324: ST_TO_ADDR
// end ;
34325: LD_VAR 0 5
34329: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
34330: LD_INT 0
34332: PPUSH
34333: PPUSH
// result := 0 ;
34334: LD_ADDR_VAR 0 3
34338: PUSH
34339: LD_INT 0
34341: ST_TO_ADDR
// if not array or not value in array then
34342: LD_VAR 0 1
34346: NOT
34347: PUSH
34348: LD_VAR 0 2
34352: PUSH
34353: LD_VAR 0 1
34357: IN
34358: NOT
34359: OR
34360: IFFALSE 34364
// exit ;
34362: GO 34418
// for i = 1 to array do
34364: LD_ADDR_VAR 0 4
34368: PUSH
34369: DOUBLE
34370: LD_INT 1
34372: DEC
34373: ST_TO_ADDR
34374: LD_VAR 0 1
34378: PUSH
34379: FOR_TO
34380: IFFALSE 34416
// if value = array [ i ] then
34382: LD_VAR 0 2
34386: PUSH
34387: LD_VAR 0 1
34391: PUSH
34392: LD_VAR 0 4
34396: ARRAY
34397: EQUAL
34398: IFFALSE 34414
// begin result := i ;
34400: LD_ADDR_VAR 0 3
34404: PUSH
34405: LD_VAR 0 4
34409: ST_TO_ADDR
// exit ;
34410: POP
34411: POP
34412: GO 34418
// end ;
34414: GO 34379
34416: POP
34417: POP
// end ;
34418: LD_VAR 0 3
34422: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
34423: LD_INT 0
34425: PPUSH
// vc_chassis := chassis ;
34426: LD_ADDR_OWVAR 37
34430: PUSH
34431: LD_VAR 0 1
34435: ST_TO_ADDR
// vc_engine := engine ;
34436: LD_ADDR_OWVAR 39
34440: PUSH
34441: LD_VAR 0 2
34445: ST_TO_ADDR
// vc_control := control ;
34446: LD_ADDR_OWVAR 38
34450: PUSH
34451: LD_VAR 0 3
34455: ST_TO_ADDR
// vc_weapon := weapon ;
34456: LD_ADDR_OWVAR 40
34460: PUSH
34461: LD_VAR 0 4
34465: ST_TO_ADDR
// vc_fuel_battery := fuel ;
34466: LD_ADDR_OWVAR 41
34470: PUSH
34471: LD_VAR 0 5
34475: ST_TO_ADDR
// end ;
34476: LD_VAR 0 6
34480: RET
// export function WantPlant ( unit ) ; var task ; begin
34481: LD_INT 0
34483: PPUSH
34484: PPUSH
// result := false ;
34485: LD_ADDR_VAR 0 2
34489: PUSH
34490: LD_INT 0
34492: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
34493: LD_ADDR_VAR 0 3
34497: PUSH
34498: LD_VAR 0 1
34502: PPUSH
34503: CALL_OW 437
34507: ST_TO_ADDR
// if task then
34508: LD_VAR 0 3
34512: IFFALSE 34540
// if task [ 1 ] [ 1 ] = p then
34514: LD_VAR 0 3
34518: PUSH
34519: LD_INT 1
34521: ARRAY
34522: PUSH
34523: LD_INT 1
34525: ARRAY
34526: PUSH
34527: LD_STRING p
34529: EQUAL
34530: IFFALSE 34540
// result := true ;
34532: LD_ADDR_VAR 0 2
34536: PUSH
34537: LD_INT 1
34539: ST_TO_ADDR
// end ;
34540: LD_VAR 0 2
34544: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
34545: LD_INT 0
34547: PPUSH
34548: PPUSH
34549: PPUSH
34550: PPUSH
// if pos < 1 then
34551: LD_VAR 0 2
34555: PUSH
34556: LD_INT 1
34558: LESS
34559: IFFALSE 34563
// exit ;
34561: GO 34866
// if pos = 1 then
34563: LD_VAR 0 2
34567: PUSH
34568: LD_INT 1
34570: EQUAL
34571: IFFALSE 34604
// result := Replace ( arr , pos [ 1 ] , value ) else
34573: LD_ADDR_VAR 0 4
34577: PUSH
34578: LD_VAR 0 1
34582: PPUSH
34583: LD_VAR 0 2
34587: PUSH
34588: LD_INT 1
34590: ARRAY
34591: PPUSH
34592: LD_VAR 0 3
34596: PPUSH
34597: CALL_OW 1
34601: ST_TO_ADDR
34602: GO 34866
// begin tmp := arr ;
34604: LD_ADDR_VAR 0 6
34608: PUSH
34609: LD_VAR 0 1
34613: ST_TO_ADDR
// s_arr := [ tmp ] ;
34614: LD_ADDR_VAR 0 7
34618: PUSH
34619: LD_VAR 0 6
34623: PUSH
34624: EMPTY
34625: LIST
34626: ST_TO_ADDR
// for i = 1 to pos - 1 do
34627: LD_ADDR_VAR 0 5
34631: PUSH
34632: DOUBLE
34633: LD_INT 1
34635: DEC
34636: ST_TO_ADDR
34637: LD_VAR 0 2
34641: PUSH
34642: LD_INT 1
34644: MINUS
34645: PUSH
34646: FOR_TO
34647: IFFALSE 34692
// begin tmp := tmp [ pos [ i ] ] ;
34649: LD_ADDR_VAR 0 6
34653: PUSH
34654: LD_VAR 0 6
34658: PUSH
34659: LD_VAR 0 2
34663: PUSH
34664: LD_VAR 0 5
34668: ARRAY
34669: ARRAY
34670: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
34671: LD_ADDR_VAR 0 7
34675: PUSH
34676: LD_VAR 0 7
34680: PUSH
34681: LD_VAR 0 6
34685: PUSH
34686: EMPTY
34687: LIST
34688: ADD
34689: ST_TO_ADDR
// end ;
34690: GO 34646
34692: POP
34693: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
34694: LD_ADDR_VAR 0 6
34698: PUSH
34699: LD_VAR 0 6
34703: PPUSH
34704: LD_VAR 0 2
34708: PUSH
34709: LD_VAR 0 2
34713: ARRAY
34714: PPUSH
34715: LD_VAR 0 3
34719: PPUSH
34720: CALL_OW 1
34724: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
34725: LD_ADDR_VAR 0 7
34729: PUSH
34730: LD_VAR 0 7
34734: PPUSH
34735: LD_VAR 0 7
34739: PPUSH
34740: LD_VAR 0 6
34744: PPUSH
34745: CALL_OW 1
34749: ST_TO_ADDR
// for i = s_arr downto 2 do
34750: LD_ADDR_VAR 0 5
34754: PUSH
34755: DOUBLE
34756: LD_VAR 0 7
34760: INC
34761: ST_TO_ADDR
34762: LD_INT 2
34764: PUSH
34765: FOR_DOWNTO
34766: IFFALSE 34850
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
34768: LD_ADDR_VAR 0 6
34772: PUSH
34773: LD_VAR 0 7
34777: PUSH
34778: LD_VAR 0 5
34782: PUSH
34783: LD_INT 1
34785: MINUS
34786: ARRAY
34787: PPUSH
34788: LD_VAR 0 2
34792: PUSH
34793: LD_VAR 0 5
34797: PUSH
34798: LD_INT 1
34800: MINUS
34801: ARRAY
34802: PPUSH
34803: LD_VAR 0 7
34807: PUSH
34808: LD_VAR 0 5
34812: ARRAY
34813: PPUSH
34814: CALL_OW 1
34818: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
34819: LD_ADDR_VAR 0 7
34823: PUSH
34824: LD_VAR 0 7
34828: PPUSH
34829: LD_VAR 0 5
34833: PUSH
34834: LD_INT 1
34836: MINUS
34837: PPUSH
34838: LD_VAR 0 6
34842: PPUSH
34843: CALL_OW 1
34847: ST_TO_ADDR
// end ;
34848: GO 34765
34850: POP
34851: POP
// result := s_arr [ 1 ] ;
34852: LD_ADDR_VAR 0 4
34856: PUSH
34857: LD_VAR 0 7
34861: PUSH
34862: LD_INT 1
34864: ARRAY
34865: ST_TO_ADDR
// end ; end ;
34866: LD_VAR 0 4
34870: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
34871: LD_INT 0
34873: PPUSH
34874: PPUSH
// if not list then
34875: LD_VAR 0 1
34879: NOT
34880: IFFALSE 34884
// exit ;
34882: GO 34975
// i := list [ pos1 ] ;
34884: LD_ADDR_VAR 0 5
34888: PUSH
34889: LD_VAR 0 1
34893: PUSH
34894: LD_VAR 0 2
34898: ARRAY
34899: ST_TO_ADDR
// if not i then
34900: LD_VAR 0 5
34904: NOT
34905: IFFALSE 34909
// exit ;
34907: GO 34975
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
34909: LD_ADDR_VAR 0 1
34913: PUSH
34914: LD_VAR 0 1
34918: PPUSH
34919: LD_VAR 0 2
34923: PPUSH
34924: LD_VAR 0 1
34928: PUSH
34929: LD_VAR 0 3
34933: ARRAY
34934: PPUSH
34935: CALL_OW 1
34939: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
34940: LD_ADDR_VAR 0 1
34944: PUSH
34945: LD_VAR 0 1
34949: PPUSH
34950: LD_VAR 0 3
34954: PPUSH
34955: LD_VAR 0 5
34959: PPUSH
34960: CALL_OW 1
34964: ST_TO_ADDR
// result := list ;
34965: LD_ADDR_VAR 0 4
34969: PUSH
34970: LD_VAR 0 1
34974: ST_TO_ADDR
// end ;
34975: LD_VAR 0 4
34979: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
34980: LD_INT 0
34982: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
34983: LD_ADDR_VAR 0 5
34987: PUSH
34988: LD_VAR 0 1
34992: PPUSH
34993: CALL_OW 250
34997: PPUSH
34998: LD_VAR 0 1
35002: PPUSH
35003: CALL_OW 251
35007: PPUSH
35008: LD_VAR 0 2
35012: PPUSH
35013: LD_VAR 0 3
35017: PPUSH
35018: LD_VAR 0 4
35022: PPUSH
35023: CALL 35401 0 5
35027: ST_TO_ADDR
// end ;
35028: LD_VAR 0 5
35032: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
35033: LD_INT 0
35035: PPUSH
35036: PPUSH
35037: PPUSH
35038: PPUSH
// if not list or not unit then
35039: LD_VAR 0 2
35043: NOT
35044: PUSH
35045: LD_VAR 0 1
35049: NOT
35050: OR
35051: IFFALSE 35055
// exit ;
35053: GO 35396
// result := [ ] ;
35055: LD_ADDR_VAR 0 5
35059: PUSH
35060: EMPTY
35061: ST_TO_ADDR
// for i in list do
35062: LD_ADDR_VAR 0 6
35066: PUSH
35067: LD_VAR 0 2
35071: PUSH
35072: FOR_IN
35073: IFFALSE 35291
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
35075: LD_ADDR_VAR 0 8
35079: PUSH
35080: LD_VAR 0 1
35084: PPUSH
35085: LD_VAR 0 6
35089: PUSH
35090: LD_INT 1
35092: ARRAY
35093: PPUSH
35094: LD_VAR 0 6
35098: PUSH
35099: LD_INT 2
35101: ARRAY
35102: PPUSH
35103: CALL_OW 297
35107: ST_TO_ADDR
// if not Count ( result ) then
35108: LD_VAR 0 5
35112: PPUSH
35113: CALL 31685 0 1
35117: NOT
35118: IFFALSE 35151
// begin result := Join ( result , [ i , tmp ] ) ;
35120: LD_ADDR_VAR 0 5
35124: PUSH
35125: LD_VAR 0 5
35129: PPUSH
35130: LD_VAR 0 6
35134: PUSH
35135: LD_VAR 0 8
35139: PUSH
35140: EMPTY
35141: LIST
35142: LIST
35143: PPUSH
35144: CALL 67274 0 2
35148: ST_TO_ADDR
// continue ;
35149: GO 35072
// end ; if result [ result ] [ 2 ] <= tmp then
35151: LD_VAR 0 5
35155: PUSH
35156: LD_VAR 0 5
35160: ARRAY
35161: PUSH
35162: LD_INT 2
35164: ARRAY
35165: PUSH
35166: LD_VAR 0 8
35170: LESSEQUAL
35171: IFFALSE 35204
// result := Join ( result , [ i , tmp ] ) else
35173: LD_ADDR_VAR 0 5
35177: PUSH
35178: LD_VAR 0 5
35182: PPUSH
35183: LD_VAR 0 6
35187: PUSH
35188: LD_VAR 0 8
35192: PUSH
35193: EMPTY
35194: LIST
35195: LIST
35196: PPUSH
35197: CALL 67274 0 2
35201: ST_TO_ADDR
35202: GO 35289
// begin for j := 1 to Count ( result ) do
35204: LD_ADDR_VAR 0 7
35208: PUSH
35209: DOUBLE
35210: LD_INT 1
35212: DEC
35213: ST_TO_ADDR
35214: LD_VAR 0 5
35218: PPUSH
35219: CALL 31685 0 1
35223: PUSH
35224: FOR_TO
35225: IFFALSE 35287
// begin if tmp < result [ j ] [ 2 ] then
35227: LD_VAR 0 8
35231: PUSH
35232: LD_VAR 0 5
35236: PUSH
35237: LD_VAR 0 7
35241: ARRAY
35242: PUSH
35243: LD_INT 2
35245: ARRAY
35246: LESS
35247: IFFALSE 35285
// begin result := Insert ( result , j , [ i , tmp ] ) ;
35249: LD_ADDR_VAR 0 5
35253: PUSH
35254: LD_VAR 0 5
35258: PPUSH
35259: LD_VAR 0 7
35263: PPUSH
35264: LD_VAR 0 6
35268: PUSH
35269: LD_VAR 0 8
35273: PUSH
35274: EMPTY
35275: LIST
35276: LIST
35277: PPUSH
35278: CALL_OW 2
35282: ST_TO_ADDR
// break ;
35283: GO 35287
// end ; end ;
35285: GO 35224
35287: POP
35288: POP
// end ; end ;
35289: GO 35072
35291: POP
35292: POP
// if result and not asc then
35293: LD_VAR 0 5
35297: PUSH
35298: LD_VAR 0 3
35302: NOT
35303: AND
35304: IFFALSE 35321
// result := ReverseArray ( result ) ;
35306: LD_ADDR_VAR 0 5
35310: PUSH
35311: LD_VAR 0 5
35315: PPUSH
35316: CALL 62561 0 1
35320: ST_TO_ADDR
// tmp := [ ] ;
35321: LD_ADDR_VAR 0 8
35325: PUSH
35326: EMPTY
35327: ST_TO_ADDR
// if mode then
35328: LD_VAR 0 4
35332: IFFALSE 35396
// begin for i := 1 to result do
35334: LD_ADDR_VAR 0 6
35338: PUSH
35339: DOUBLE
35340: LD_INT 1
35342: DEC
35343: ST_TO_ADDR
35344: LD_VAR 0 5
35348: PUSH
35349: FOR_TO
35350: IFFALSE 35384
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
35352: LD_ADDR_VAR 0 8
35356: PUSH
35357: LD_VAR 0 8
35361: PPUSH
35362: LD_VAR 0 5
35366: PUSH
35367: LD_VAR 0 6
35371: ARRAY
35372: PUSH
35373: LD_INT 1
35375: ARRAY
35376: PPUSH
35377: CALL 67274 0 2
35381: ST_TO_ADDR
35382: GO 35349
35384: POP
35385: POP
// result := tmp ;
35386: LD_ADDR_VAR 0 5
35390: PUSH
35391: LD_VAR 0 8
35395: ST_TO_ADDR
// end ; end ;
35396: LD_VAR 0 5
35400: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
35401: LD_INT 0
35403: PPUSH
35404: PPUSH
35405: PPUSH
35406: PPUSH
// if not list then
35407: LD_VAR 0 3
35411: NOT
35412: IFFALSE 35416
// exit ;
35414: GO 35804
// result := [ ] ;
35416: LD_ADDR_VAR 0 6
35420: PUSH
35421: EMPTY
35422: ST_TO_ADDR
// for i in list do
35423: LD_ADDR_VAR 0 7
35427: PUSH
35428: LD_VAR 0 3
35432: PUSH
35433: FOR_IN
35434: IFFALSE 35636
// begin tmp := GetDistUnitXY ( i , x , y ) ;
35436: LD_ADDR_VAR 0 9
35440: PUSH
35441: LD_VAR 0 7
35445: PPUSH
35446: LD_VAR 0 1
35450: PPUSH
35451: LD_VAR 0 2
35455: PPUSH
35456: CALL_OW 297
35460: ST_TO_ADDR
// if not result then
35461: LD_VAR 0 6
35465: NOT
35466: IFFALSE 35492
// result := [ [ i , tmp ] ] else
35468: LD_ADDR_VAR 0 6
35472: PUSH
35473: LD_VAR 0 7
35477: PUSH
35478: LD_VAR 0 9
35482: PUSH
35483: EMPTY
35484: LIST
35485: LIST
35486: PUSH
35487: EMPTY
35488: LIST
35489: ST_TO_ADDR
35490: GO 35634
// begin if result [ result ] [ 2 ] < tmp then
35492: LD_VAR 0 6
35496: PUSH
35497: LD_VAR 0 6
35501: ARRAY
35502: PUSH
35503: LD_INT 2
35505: ARRAY
35506: PUSH
35507: LD_VAR 0 9
35511: LESS
35512: IFFALSE 35554
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
35514: LD_ADDR_VAR 0 6
35518: PUSH
35519: LD_VAR 0 6
35523: PPUSH
35524: LD_VAR 0 6
35528: PUSH
35529: LD_INT 1
35531: PLUS
35532: PPUSH
35533: LD_VAR 0 7
35537: PUSH
35538: LD_VAR 0 9
35542: PUSH
35543: EMPTY
35544: LIST
35545: LIST
35546: PPUSH
35547: CALL_OW 2
35551: ST_TO_ADDR
35552: GO 35634
// for j = 1 to result do
35554: LD_ADDR_VAR 0 8
35558: PUSH
35559: DOUBLE
35560: LD_INT 1
35562: DEC
35563: ST_TO_ADDR
35564: LD_VAR 0 6
35568: PUSH
35569: FOR_TO
35570: IFFALSE 35632
// begin if tmp < result [ j ] [ 2 ] then
35572: LD_VAR 0 9
35576: PUSH
35577: LD_VAR 0 6
35581: PUSH
35582: LD_VAR 0 8
35586: ARRAY
35587: PUSH
35588: LD_INT 2
35590: ARRAY
35591: LESS
35592: IFFALSE 35630
// begin result := Insert ( result , j , [ i , tmp ] ) ;
35594: LD_ADDR_VAR 0 6
35598: PUSH
35599: LD_VAR 0 6
35603: PPUSH
35604: LD_VAR 0 8
35608: PPUSH
35609: LD_VAR 0 7
35613: PUSH
35614: LD_VAR 0 9
35618: PUSH
35619: EMPTY
35620: LIST
35621: LIST
35622: PPUSH
35623: CALL_OW 2
35627: ST_TO_ADDR
// break ;
35628: GO 35632
// end ; end ;
35630: GO 35569
35632: POP
35633: POP
// end ; end ;
35634: GO 35433
35636: POP
35637: POP
// if result and not asc then
35638: LD_VAR 0 6
35642: PUSH
35643: LD_VAR 0 4
35647: NOT
35648: AND
35649: IFFALSE 35724
// begin tmp := result ;
35651: LD_ADDR_VAR 0 9
35655: PUSH
35656: LD_VAR 0 6
35660: ST_TO_ADDR
// for i = tmp downto 1 do
35661: LD_ADDR_VAR 0 7
35665: PUSH
35666: DOUBLE
35667: LD_VAR 0 9
35671: INC
35672: ST_TO_ADDR
35673: LD_INT 1
35675: PUSH
35676: FOR_DOWNTO
35677: IFFALSE 35722
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
35679: LD_ADDR_VAR 0 6
35683: PUSH
35684: LD_VAR 0 6
35688: PPUSH
35689: LD_VAR 0 9
35693: PUSH
35694: LD_VAR 0 7
35698: MINUS
35699: PUSH
35700: LD_INT 1
35702: PLUS
35703: PPUSH
35704: LD_VAR 0 9
35708: PUSH
35709: LD_VAR 0 7
35713: ARRAY
35714: PPUSH
35715: CALL_OW 1
35719: ST_TO_ADDR
35720: GO 35676
35722: POP
35723: POP
// end ; tmp := [ ] ;
35724: LD_ADDR_VAR 0 9
35728: PUSH
35729: EMPTY
35730: ST_TO_ADDR
// if mode then
35731: LD_VAR 0 5
35735: IFFALSE 35804
// begin for i = 1 to result do
35737: LD_ADDR_VAR 0 7
35741: PUSH
35742: DOUBLE
35743: LD_INT 1
35745: DEC
35746: ST_TO_ADDR
35747: LD_VAR 0 6
35751: PUSH
35752: FOR_TO
35753: IFFALSE 35792
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
35755: LD_ADDR_VAR 0 9
35759: PUSH
35760: LD_VAR 0 9
35764: PPUSH
35765: LD_VAR 0 7
35769: PPUSH
35770: LD_VAR 0 6
35774: PUSH
35775: LD_VAR 0 7
35779: ARRAY
35780: PUSH
35781: LD_INT 1
35783: ARRAY
35784: PPUSH
35785: CALL_OW 1
35789: ST_TO_ADDR
35790: GO 35752
35792: POP
35793: POP
// result := tmp ;
35794: LD_ADDR_VAR 0 6
35798: PUSH
35799: LD_VAR 0 9
35803: ST_TO_ADDR
// end ; end ;
35804: LD_VAR 0 6
35808: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
35809: LD_INT 0
35811: PPUSH
35812: PPUSH
35813: PPUSH
35814: PPUSH
35815: PPUSH
35816: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
35817: LD_ADDR_VAR 0 5
35821: PUSH
35822: LD_INT 0
35824: PUSH
35825: LD_INT 0
35827: PUSH
35828: LD_INT 0
35830: PUSH
35831: EMPTY
35832: PUSH
35833: EMPTY
35834: LIST
35835: LIST
35836: LIST
35837: LIST
35838: ST_TO_ADDR
// if not x or not y then
35839: LD_VAR 0 2
35843: NOT
35844: PUSH
35845: LD_VAR 0 3
35849: NOT
35850: OR
35851: IFFALSE 35855
// exit ;
35853: GO 37505
// if not range then
35855: LD_VAR 0 4
35859: NOT
35860: IFFALSE 35870
// range := 10 ;
35862: LD_ADDR_VAR 0 4
35866: PUSH
35867: LD_INT 10
35869: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
35870: LD_ADDR_VAR 0 8
35874: PUSH
35875: LD_INT 81
35877: PUSH
35878: LD_VAR 0 1
35882: PUSH
35883: EMPTY
35884: LIST
35885: LIST
35886: PUSH
35887: LD_INT 92
35889: PUSH
35890: LD_VAR 0 2
35894: PUSH
35895: LD_VAR 0 3
35899: PUSH
35900: LD_VAR 0 4
35904: PUSH
35905: EMPTY
35906: LIST
35907: LIST
35908: LIST
35909: LIST
35910: PUSH
35911: LD_INT 3
35913: PUSH
35914: LD_INT 21
35916: PUSH
35917: LD_INT 3
35919: PUSH
35920: EMPTY
35921: LIST
35922: LIST
35923: PUSH
35924: EMPTY
35925: LIST
35926: LIST
35927: PUSH
35928: EMPTY
35929: LIST
35930: LIST
35931: LIST
35932: PPUSH
35933: CALL_OW 69
35937: ST_TO_ADDR
// if not tmp then
35938: LD_VAR 0 8
35942: NOT
35943: IFFALSE 35947
// exit ;
35945: GO 37505
// for i in tmp do
35947: LD_ADDR_VAR 0 6
35951: PUSH
35952: LD_VAR 0 8
35956: PUSH
35957: FOR_IN
35958: IFFALSE 37480
// begin points := [ 0 , 0 , 0 ] ;
35960: LD_ADDR_VAR 0 9
35964: PUSH
35965: LD_INT 0
35967: PUSH
35968: LD_INT 0
35970: PUSH
35971: LD_INT 0
35973: PUSH
35974: EMPTY
35975: LIST
35976: LIST
35977: LIST
35978: ST_TO_ADDR
// bpoints := 1 ;
35979: LD_ADDR_VAR 0 10
35983: PUSH
35984: LD_INT 1
35986: ST_TO_ADDR
// case GetType ( i ) of unit_human :
35987: LD_VAR 0 6
35991: PPUSH
35992: CALL_OW 247
35996: PUSH
35997: LD_INT 1
35999: DOUBLE
36000: EQUAL
36001: IFTRUE 36005
36003: GO 36583
36005: POP
// begin if GetClass ( i ) = 1 then
36006: LD_VAR 0 6
36010: PPUSH
36011: CALL_OW 257
36015: PUSH
36016: LD_INT 1
36018: EQUAL
36019: IFFALSE 36040
// points := [ 10 , 5 , 3 ] ;
36021: LD_ADDR_VAR 0 9
36025: PUSH
36026: LD_INT 10
36028: PUSH
36029: LD_INT 5
36031: PUSH
36032: LD_INT 3
36034: PUSH
36035: EMPTY
36036: LIST
36037: LIST
36038: LIST
36039: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
36040: LD_VAR 0 6
36044: PPUSH
36045: CALL_OW 257
36049: PUSH
36050: LD_INT 2
36052: PUSH
36053: LD_INT 3
36055: PUSH
36056: LD_INT 4
36058: PUSH
36059: EMPTY
36060: LIST
36061: LIST
36062: LIST
36063: IN
36064: IFFALSE 36085
// points := [ 3 , 2 , 1 ] ;
36066: LD_ADDR_VAR 0 9
36070: PUSH
36071: LD_INT 3
36073: PUSH
36074: LD_INT 2
36076: PUSH
36077: LD_INT 1
36079: PUSH
36080: EMPTY
36081: LIST
36082: LIST
36083: LIST
36084: ST_TO_ADDR
// if GetClass ( i ) = 5 then
36085: LD_VAR 0 6
36089: PPUSH
36090: CALL_OW 257
36094: PUSH
36095: LD_INT 5
36097: EQUAL
36098: IFFALSE 36119
// points := [ 130 , 5 , 2 ] ;
36100: LD_ADDR_VAR 0 9
36104: PUSH
36105: LD_INT 130
36107: PUSH
36108: LD_INT 5
36110: PUSH
36111: LD_INT 2
36113: PUSH
36114: EMPTY
36115: LIST
36116: LIST
36117: LIST
36118: ST_TO_ADDR
// if GetClass ( i ) = 8 then
36119: LD_VAR 0 6
36123: PPUSH
36124: CALL_OW 257
36128: PUSH
36129: LD_INT 8
36131: EQUAL
36132: IFFALSE 36153
// points := [ 35 , 35 , 30 ] ;
36134: LD_ADDR_VAR 0 9
36138: PUSH
36139: LD_INT 35
36141: PUSH
36142: LD_INT 35
36144: PUSH
36145: LD_INT 30
36147: PUSH
36148: EMPTY
36149: LIST
36150: LIST
36151: LIST
36152: ST_TO_ADDR
// if GetClass ( i ) = 9 then
36153: LD_VAR 0 6
36157: PPUSH
36158: CALL_OW 257
36162: PUSH
36163: LD_INT 9
36165: EQUAL
36166: IFFALSE 36187
// points := [ 20 , 55 , 40 ] ;
36168: LD_ADDR_VAR 0 9
36172: PUSH
36173: LD_INT 20
36175: PUSH
36176: LD_INT 55
36178: PUSH
36179: LD_INT 40
36181: PUSH
36182: EMPTY
36183: LIST
36184: LIST
36185: LIST
36186: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
36187: LD_VAR 0 6
36191: PPUSH
36192: CALL_OW 257
36196: PUSH
36197: LD_INT 12
36199: PUSH
36200: LD_INT 16
36202: PUSH
36203: EMPTY
36204: LIST
36205: LIST
36206: IN
36207: IFFALSE 36228
// points := [ 5 , 3 , 2 ] ;
36209: LD_ADDR_VAR 0 9
36213: PUSH
36214: LD_INT 5
36216: PUSH
36217: LD_INT 3
36219: PUSH
36220: LD_INT 2
36222: PUSH
36223: EMPTY
36224: LIST
36225: LIST
36226: LIST
36227: ST_TO_ADDR
// if GetClass ( i ) = 17 then
36228: LD_VAR 0 6
36232: PPUSH
36233: CALL_OW 257
36237: PUSH
36238: LD_INT 17
36240: EQUAL
36241: IFFALSE 36262
// points := [ 100 , 50 , 75 ] ;
36243: LD_ADDR_VAR 0 9
36247: PUSH
36248: LD_INT 100
36250: PUSH
36251: LD_INT 50
36253: PUSH
36254: LD_INT 75
36256: PUSH
36257: EMPTY
36258: LIST
36259: LIST
36260: LIST
36261: ST_TO_ADDR
// if GetClass ( i ) = 15 then
36262: LD_VAR 0 6
36266: PPUSH
36267: CALL_OW 257
36271: PUSH
36272: LD_INT 15
36274: EQUAL
36275: IFFALSE 36296
// points := [ 10 , 5 , 3 ] ;
36277: LD_ADDR_VAR 0 9
36281: PUSH
36282: LD_INT 10
36284: PUSH
36285: LD_INT 5
36287: PUSH
36288: LD_INT 3
36290: PUSH
36291: EMPTY
36292: LIST
36293: LIST
36294: LIST
36295: ST_TO_ADDR
// if GetClass ( i ) = 14 then
36296: LD_VAR 0 6
36300: PPUSH
36301: CALL_OW 257
36305: PUSH
36306: LD_INT 14
36308: EQUAL
36309: IFFALSE 36330
// points := [ 10 , 0 , 0 ] ;
36311: LD_ADDR_VAR 0 9
36315: PUSH
36316: LD_INT 10
36318: PUSH
36319: LD_INT 0
36321: PUSH
36322: LD_INT 0
36324: PUSH
36325: EMPTY
36326: LIST
36327: LIST
36328: LIST
36329: ST_TO_ADDR
// if GetClass ( i ) = 11 then
36330: LD_VAR 0 6
36334: PPUSH
36335: CALL_OW 257
36339: PUSH
36340: LD_INT 11
36342: EQUAL
36343: IFFALSE 36364
// points := [ 30 , 10 , 5 ] ;
36345: LD_ADDR_VAR 0 9
36349: PUSH
36350: LD_INT 30
36352: PUSH
36353: LD_INT 10
36355: PUSH
36356: LD_INT 5
36358: PUSH
36359: EMPTY
36360: LIST
36361: LIST
36362: LIST
36363: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
36364: LD_VAR 0 1
36368: PPUSH
36369: LD_INT 5
36371: PPUSH
36372: CALL_OW 321
36376: PUSH
36377: LD_INT 2
36379: EQUAL
36380: IFFALSE 36397
// bpoints := bpoints * 1.8 ;
36382: LD_ADDR_VAR 0 10
36386: PUSH
36387: LD_VAR 0 10
36391: PUSH
36392: LD_REAL  1.80000000000000E+0000
36395: MUL
36396: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
36397: LD_VAR 0 6
36401: PPUSH
36402: CALL_OW 257
36406: PUSH
36407: LD_INT 1
36409: PUSH
36410: LD_INT 2
36412: PUSH
36413: LD_INT 3
36415: PUSH
36416: LD_INT 4
36418: PUSH
36419: EMPTY
36420: LIST
36421: LIST
36422: LIST
36423: LIST
36424: IN
36425: PUSH
36426: LD_VAR 0 1
36430: PPUSH
36431: LD_INT 51
36433: PPUSH
36434: CALL_OW 321
36438: PUSH
36439: LD_INT 2
36441: EQUAL
36442: AND
36443: IFFALSE 36460
// bpoints := bpoints * 1.2 ;
36445: LD_ADDR_VAR 0 10
36449: PUSH
36450: LD_VAR 0 10
36454: PUSH
36455: LD_REAL  1.20000000000000E+0000
36458: MUL
36459: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
36460: LD_VAR 0 6
36464: PPUSH
36465: CALL_OW 257
36469: PUSH
36470: LD_INT 5
36472: PUSH
36473: LD_INT 7
36475: PUSH
36476: LD_INT 9
36478: PUSH
36479: EMPTY
36480: LIST
36481: LIST
36482: LIST
36483: IN
36484: PUSH
36485: LD_VAR 0 1
36489: PPUSH
36490: LD_INT 52
36492: PPUSH
36493: CALL_OW 321
36497: PUSH
36498: LD_INT 2
36500: EQUAL
36501: AND
36502: IFFALSE 36519
// bpoints := bpoints * 1.5 ;
36504: LD_ADDR_VAR 0 10
36508: PUSH
36509: LD_VAR 0 10
36513: PUSH
36514: LD_REAL  1.50000000000000E+0000
36517: MUL
36518: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
36519: LD_VAR 0 1
36523: PPUSH
36524: LD_INT 66
36526: PPUSH
36527: CALL_OW 321
36531: PUSH
36532: LD_INT 2
36534: EQUAL
36535: IFFALSE 36552
// bpoints := bpoints * 1.1 ;
36537: LD_ADDR_VAR 0 10
36541: PUSH
36542: LD_VAR 0 10
36546: PUSH
36547: LD_REAL  1.10000000000000E+0000
36550: MUL
36551: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
36552: LD_ADDR_VAR 0 10
36556: PUSH
36557: LD_VAR 0 10
36561: PUSH
36562: LD_VAR 0 6
36566: PPUSH
36567: LD_INT 1
36569: PPUSH
36570: CALL_OW 259
36574: PUSH
36575: LD_REAL  1.15000000000000E+0000
36578: MUL
36579: MUL
36580: ST_TO_ADDR
// end ; unit_vehicle :
36581: GO 37409
36583: LD_INT 2
36585: DOUBLE
36586: EQUAL
36587: IFTRUE 36591
36589: GO 37397
36591: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
36592: LD_VAR 0 6
36596: PPUSH
36597: CALL_OW 264
36601: PUSH
36602: LD_INT 2
36604: PUSH
36605: LD_INT 42
36607: PUSH
36608: LD_INT 24
36610: PUSH
36611: EMPTY
36612: LIST
36613: LIST
36614: LIST
36615: IN
36616: IFFALSE 36637
// points := [ 25 , 5 , 3 ] ;
36618: LD_ADDR_VAR 0 9
36622: PUSH
36623: LD_INT 25
36625: PUSH
36626: LD_INT 5
36628: PUSH
36629: LD_INT 3
36631: PUSH
36632: EMPTY
36633: LIST
36634: LIST
36635: LIST
36636: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
36637: LD_VAR 0 6
36641: PPUSH
36642: CALL_OW 264
36646: PUSH
36647: LD_INT 4
36649: PUSH
36650: LD_INT 43
36652: PUSH
36653: LD_INT 25
36655: PUSH
36656: EMPTY
36657: LIST
36658: LIST
36659: LIST
36660: IN
36661: IFFALSE 36682
// points := [ 40 , 15 , 5 ] ;
36663: LD_ADDR_VAR 0 9
36667: PUSH
36668: LD_INT 40
36670: PUSH
36671: LD_INT 15
36673: PUSH
36674: LD_INT 5
36676: PUSH
36677: EMPTY
36678: LIST
36679: LIST
36680: LIST
36681: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
36682: LD_VAR 0 6
36686: PPUSH
36687: CALL_OW 264
36691: PUSH
36692: LD_INT 3
36694: PUSH
36695: LD_INT 23
36697: PUSH
36698: EMPTY
36699: LIST
36700: LIST
36701: IN
36702: IFFALSE 36723
// points := [ 7 , 25 , 8 ] ;
36704: LD_ADDR_VAR 0 9
36708: PUSH
36709: LD_INT 7
36711: PUSH
36712: LD_INT 25
36714: PUSH
36715: LD_INT 8
36717: PUSH
36718: EMPTY
36719: LIST
36720: LIST
36721: LIST
36722: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
36723: LD_VAR 0 6
36727: PPUSH
36728: CALL_OW 264
36732: PUSH
36733: LD_INT 5
36735: PUSH
36736: LD_INT 27
36738: PUSH
36739: LD_INT 44
36741: PUSH
36742: EMPTY
36743: LIST
36744: LIST
36745: LIST
36746: IN
36747: IFFALSE 36768
// points := [ 14 , 50 , 16 ] ;
36749: LD_ADDR_VAR 0 9
36753: PUSH
36754: LD_INT 14
36756: PUSH
36757: LD_INT 50
36759: PUSH
36760: LD_INT 16
36762: PUSH
36763: EMPTY
36764: LIST
36765: LIST
36766: LIST
36767: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
36768: LD_VAR 0 6
36772: PPUSH
36773: CALL_OW 264
36777: PUSH
36778: LD_INT 6
36780: PUSH
36781: LD_INT 46
36783: PUSH
36784: EMPTY
36785: LIST
36786: LIST
36787: IN
36788: IFFALSE 36809
// points := [ 32 , 120 , 70 ] ;
36790: LD_ADDR_VAR 0 9
36794: PUSH
36795: LD_INT 32
36797: PUSH
36798: LD_INT 120
36800: PUSH
36801: LD_INT 70
36803: PUSH
36804: EMPTY
36805: LIST
36806: LIST
36807: LIST
36808: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
36809: LD_VAR 0 6
36813: PPUSH
36814: CALL_OW 264
36818: PUSH
36819: LD_INT 7
36821: PUSH
36822: LD_INT 28
36824: PUSH
36825: LD_INT 45
36827: PUSH
36828: LD_INT 92
36830: PUSH
36831: EMPTY
36832: LIST
36833: LIST
36834: LIST
36835: LIST
36836: IN
36837: IFFALSE 36858
// points := [ 35 , 20 , 45 ] ;
36839: LD_ADDR_VAR 0 9
36843: PUSH
36844: LD_INT 35
36846: PUSH
36847: LD_INT 20
36849: PUSH
36850: LD_INT 45
36852: PUSH
36853: EMPTY
36854: LIST
36855: LIST
36856: LIST
36857: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
36858: LD_VAR 0 6
36862: PPUSH
36863: CALL_OW 264
36867: PUSH
36868: LD_INT 47
36870: PUSH
36871: EMPTY
36872: LIST
36873: IN
36874: IFFALSE 36895
// points := [ 67 , 45 , 75 ] ;
36876: LD_ADDR_VAR 0 9
36880: PUSH
36881: LD_INT 67
36883: PUSH
36884: LD_INT 45
36886: PUSH
36887: LD_INT 75
36889: PUSH
36890: EMPTY
36891: LIST
36892: LIST
36893: LIST
36894: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
36895: LD_VAR 0 6
36899: PPUSH
36900: CALL_OW 264
36904: PUSH
36905: LD_INT 26
36907: PUSH
36908: EMPTY
36909: LIST
36910: IN
36911: IFFALSE 36932
// points := [ 120 , 30 , 80 ] ;
36913: LD_ADDR_VAR 0 9
36917: PUSH
36918: LD_INT 120
36920: PUSH
36921: LD_INT 30
36923: PUSH
36924: LD_INT 80
36926: PUSH
36927: EMPTY
36928: LIST
36929: LIST
36930: LIST
36931: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
36932: LD_VAR 0 6
36936: PPUSH
36937: CALL_OW 264
36941: PUSH
36942: LD_INT 22
36944: PUSH
36945: EMPTY
36946: LIST
36947: IN
36948: IFFALSE 36969
// points := [ 40 , 1 , 1 ] ;
36950: LD_ADDR_VAR 0 9
36954: PUSH
36955: LD_INT 40
36957: PUSH
36958: LD_INT 1
36960: PUSH
36961: LD_INT 1
36963: PUSH
36964: EMPTY
36965: LIST
36966: LIST
36967: LIST
36968: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
36969: LD_VAR 0 6
36973: PPUSH
36974: CALL_OW 264
36978: PUSH
36979: LD_INT 29
36981: PUSH
36982: EMPTY
36983: LIST
36984: IN
36985: IFFALSE 37006
// points := [ 70 , 200 , 400 ] ;
36987: LD_ADDR_VAR 0 9
36991: PUSH
36992: LD_INT 70
36994: PUSH
36995: LD_INT 200
36997: PUSH
36998: LD_INT 400
37000: PUSH
37001: EMPTY
37002: LIST
37003: LIST
37004: LIST
37005: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
37006: LD_VAR 0 6
37010: PPUSH
37011: CALL_OW 264
37015: PUSH
37016: LD_INT 14
37018: PUSH
37019: LD_INT 53
37021: PUSH
37022: EMPTY
37023: LIST
37024: LIST
37025: IN
37026: IFFALSE 37047
// points := [ 40 , 10 , 20 ] ;
37028: LD_ADDR_VAR 0 9
37032: PUSH
37033: LD_INT 40
37035: PUSH
37036: LD_INT 10
37038: PUSH
37039: LD_INT 20
37041: PUSH
37042: EMPTY
37043: LIST
37044: LIST
37045: LIST
37046: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
37047: LD_VAR 0 6
37051: PPUSH
37052: CALL_OW 264
37056: PUSH
37057: LD_INT 9
37059: PUSH
37060: EMPTY
37061: LIST
37062: IN
37063: IFFALSE 37084
// points := [ 5 , 70 , 20 ] ;
37065: LD_ADDR_VAR 0 9
37069: PUSH
37070: LD_INT 5
37072: PUSH
37073: LD_INT 70
37075: PUSH
37076: LD_INT 20
37078: PUSH
37079: EMPTY
37080: LIST
37081: LIST
37082: LIST
37083: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
37084: LD_VAR 0 6
37088: PPUSH
37089: CALL_OW 264
37093: PUSH
37094: LD_INT 10
37096: PUSH
37097: EMPTY
37098: LIST
37099: IN
37100: IFFALSE 37121
// points := [ 35 , 110 , 70 ] ;
37102: LD_ADDR_VAR 0 9
37106: PUSH
37107: LD_INT 35
37109: PUSH
37110: LD_INT 110
37112: PUSH
37113: LD_INT 70
37115: PUSH
37116: EMPTY
37117: LIST
37118: LIST
37119: LIST
37120: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
37121: LD_VAR 0 6
37125: PPUSH
37126: CALL_OW 265
37130: PUSH
37131: LD_INT 25
37133: EQUAL
37134: IFFALSE 37155
// points := [ 80 , 65 , 100 ] ;
37136: LD_ADDR_VAR 0 9
37140: PUSH
37141: LD_INT 80
37143: PUSH
37144: LD_INT 65
37146: PUSH
37147: LD_INT 100
37149: PUSH
37150: EMPTY
37151: LIST
37152: LIST
37153: LIST
37154: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
37155: LD_VAR 0 6
37159: PPUSH
37160: CALL_OW 263
37164: PUSH
37165: LD_INT 1
37167: EQUAL
37168: IFFALSE 37203
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
37170: LD_ADDR_VAR 0 10
37174: PUSH
37175: LD_VAR 0 10
37179: PUSH
37180: LD_VAR 0 6
37184: PPUSH
37185: CALL_OW 311
37189: PPUSH
37190: LD_INT 3
37192: PPUSH
37193: CALL_OW 259
37197: PUSH
37198: LD_INT 4
37200: MUL
37201: MUL
37202: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
37203: LD_VAR 0 6
37207: PPUSH
37208: CALL_OW 263
37212: PUSH
37213: LD_INT 2
37215: EQUAL
37216: IFFALSE 37267
// begin j := IsControledBy ( i ) ;
37218: LD_ADDR_VAR 0 7
37222: PUSH
37223: LD_VAR 0 6
37227: PPUSH
37228: CALL_OW 312
37232: ST_TO_ADDR
// if j then
37233: LD_VAR 0 7
37237: IFFALSE 37267
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
37239: LD_ADDR_VAR 0 10
37243: PUSH
37244: LD_VAR 0 10
37248: PUSH
37249: LD_VAR 0 7
37253: PPUSH
37254: LD_INT 3
37256: PPUSH
37257: CALL_OW 259
37261: PUSH
37262: LD_INT 3
37264: MUL
37265: MUL
37266: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
37267: LD_VAR 0 6
37271: PPUSH
37272: CALL_OW 264
37276: PUSH
37277: LD_INT 5
37279: PUSH
37280: LD_INT 6
37282: PUSH
37283: LD_INT 46
37285: PUSH
37286: LD_INT 44
37288: PUSH
37289: LD_INT 47
37291: PUSH
37292: LD_INT 45
37294: PUSH
37295: LD_INT 28
37297: PUSH
37298: LD_INT 7
37300: PUSH
37301: LD_INT 27
37303: PUSH
37304: LD_INT 29
37306: PUSH
37307: EMPTY
37308: LIST
37309: LIST
37310: LIST
37311: LIST
37312: LIST
37313: LIST
37314: LIST
37315: LIST
37316: LIST
37317: LIST
37318: IN
37319: PUSH
37320: LD_VAR 0 1
37324: PPUSH
37325: LD_INT 52
37327: PPUSH
37328: CALL_OW 321
37332: PUSH
37333: LD_INT 2
37335: EQUAL
37336: AND
37337: IFFALSE 37354
// bpoints := bpoints * 1.2 ;
37339: LD_ADDR_VAR 0 10
37343: PUSH
37344: LD_VAR 0 10
37348: PUSH
37349: LD_REAL  1.20000000000000E+0000
37352: MUL
37353: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
37354: LD_VAR 0 6
37358: PPUSH
37359: CALL_OW 264
37363: PUSH
37364: LD_INT 6
37366: PUSH
37367: LD_INT 46
37369: PUSH
37370: LD_INT 47
37372: PUSH
37373: EMPTY
37374: LIST
37375: LIST
37376: LIST
37377: IN
37378: IFFALSE 37395
// bpoints := bpoints * 1.2 ;
37380: LD_ADDR_VAR 0 10
37384: PUSH
37385: LD_VAR 0 10
37389: PUSH
37390: LD_REAL  1.20000000000000E+0000
37393: MUL
37394: ST_TO_ADDR
// end ; unit_building :
37395: GO 37409
37397: LD_INT 3
37399: DOUBLE
37400: EQUAL
37401: IFTRUE 37405
37403: GO 37408
37405: POP
// ; end ;
37406: GO 37409
37408: POP
// for j = 1 to 3 do
37409: LD_ADDR_VAR 0 7
37413: PUSH
37414: DOUBLE
37415: LD_INT 1
37417: DEC
37418: ST_TO_ADDR
37419: LD_INT 3
37421: PUSH
37422: FOR_TO
37423: IFFALSE 37476
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
37425: LD_ADDR_VAR 0 5
37429: PUSH
37430: LD_VAR 0 5
37434: PPUSH
37435: LD_VAR 0 7
37439: PPUSH
37440: LD_VAR 0 5
37444: PUSH
37445: LD_VAR 0 7
37449: ARRAY
37450: PUSH
37451: LD_VAR 0 9
37455: PUSH
37456: LD_VAR 0 7
37460: ARRAY
37461: PUSH
37462: LD_VAR 0 10
37466: MUL
37467: PLUS
37468: PPUSH
37469: CALL_OW 1
37473: ST_TO_ADDR
37474: GO 37422
37476: POP
37477: POP
// end ;
37478: GO 35957
37480: POP
37481: POP
// result := Replace ( result , 4 , tmp ) ;
37482: LD_ADDR_VAR 0 5
37486: PUSH
37487: LD_VAR 0 5
37491: PPUSH
37492: LD_INT 4
37494: PPUSH
37495: LD_VAR 0 8
37499: PPUSH
37500: CALL_OW 1
37504: ST_TO_ADDR
// end ;
37505: LD_VAR 0 5
37509: RET
// export function DangerAtRange ( unit , range ) ; begin
37510: LD_INT 0
37512: PPUSH
// if not unit then
37513: LD_VAR 0 1
37517: NOT
37518: IFFALSE 37522
// exit ;
37520: GO 37567
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
37522: LD_ADDR_VAR 0 3
37526: PUSH
37527: LD_VAR 0 1
37531: PPUSH
37532: CALL_OW 255
37536: PPUSH
37537: LD_VAR 0 1
37541: PPUSH
37542: CALL_OW 250
37546: PPUSH
37547: LD_VAR 0 1
37551: PPUSH
37552: CALL_OW 251
37556: PPUSH
37557: LD_VAR 0 2
37561: PPUSH
37562: CALL 35809 0 4
37566: ST_TO_ADDR
// end ;
37567: LD_VAR 0 3
37571: RET
// export function DangerInArea ( side , area ) ; begin
37572: LD_INT 0
37574: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
37575: LD_ADDR_VAR 0 3
37579: PUSH
37580: LD_VAR 0 2
37584: PPUSH
37585: LD_INT 81
37587: PUSH
37588: LD_VAR 0 1
37592: PUSH
37593: EMPTY
37594: LIST
37595: LIST
37596: PPUSH
37597: CALL_OW 70
37601: ST_TO_ADDR
// end ;
37602: LD_VAR 0 3
37606: RET
// export function IsExtension ( b ) ; begin
37607: LD_INT 0
37609: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
37610: LD_ADDR_VAR 0 2
37614: PUSH
37615: LD_VAR 0 1
37619: PUSH
37620: LD_INT 23
37622: PUSH
37623: LD_INT 20
37625: PUSH
37626: LD_INT 22
37628: PUSH
37629: LD_INT 17
37631: PUSH
37632: LD_INT 24
37634: PUSH
37635: LD_INT 21
37637: PUSH
37638: LD_INT 19
37640: PUSH
37641: LD_INT 16
37643: PUSH
37644: LD_INT 25
37646: PUSH
37647: LD_INT 18
37649: PUSH
37650: EMPTY
37651: LIST
37652: LIST
37653: LIST
37654: LIST
37655: LIST
37656: LIST
37657: LIST
37658: LIST
37659: LIST
37660: LIST
37661: IN
37662: ST_TO_ADDR
// end ;
37663: LD_VAR 0 2
37667: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
37668: LD_INT 0
37670: PPUSH
37671: PPUSH
37672: PPUSH
// result := [ ] ;
37673: LD_ADDR_VAR 0 4
37677: PUSH
37678: EMPTY
37679: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
37680: LD_ADDR_VAR 0 5
37684: PUSH
37685: LD_VAR 0 2
37689: PPUSH
37690: LD_INT 21
37692: PUSH
37693: LD_INT 3
37695: PUSH
37696: EMPTY
37697: LIST
37698: LIST
37699: PPUSH
37700: CALL_OW 70
37704: ST_TO_ADDR
// if not tmp then
37705: LD_VAR 0 5
37709: NOT
37710: IFFALSE 37714
// exit ;
37712: GO 37778
// if checkLink then
37714: LD_VAR 0 3
37718: IFFALSE 37768
// begin for i in tmp do
37720: LD_ADDR_VAR 0 6
37724: PUSH
37725: LD_VAR 0 5
37729: PUSH
37730: FOR_IN
37731: IFFALSE 37766
// if GetBase ( i ) <> base then
37733: LD_VAR 0 6
37737: PPUSH
37738: CALL_OW 274
37742: PUSH
37743: LD_VAR 0 1
37747: NONEQUAL
37748: IFFALSE 37764
// ComLinkToBase ( base , i ) ;
37750: LD_VAR 0 1
37754: PPUSH
37755: LD_VAR 0 6
37759: PPUSH
37760: CALL_OW 169
37764: GO 37730
37766: POP
37767: POP
// end ; result := tmp ;
37768: LD_ADDR_VAR 0 4
37772: PUSH
37773: LD_VAR 0 5
37777: ST_TO_ADDR
// end ;
37778: LD_VAR 0 4
37782: RET
// export function ComComplete ( units , b ) ; var i ; begin
37783: LD_INT 0
37785: PPUSH
37786: PPUSH
// if not units then
37787: LD_VAR 0 1
37791: NOT
37792: IFFALSE 37796
// exit ;
37794: GO 37886
// for i in units do
37796: LD_ADDR_VAR 0 4
37800: PUSH
37801: LD_VAR 0 1
37805: PUSH
37806: FOR_IN
37807: IFFALSE 37884
// if BuildingStatus ( b ) = bs_build then
37809: LD_VAR 0 2
37813: PPUSH
37814: CALL_OW 461
37818: PUSH
37819: LD_INT 1
37821: EQUAL
37822: IFFALSE 37882
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
37824: LD_VAR 0 4
37828: PPUSH
37829: LD_STRING h
37831: PUSH
37832: LD_VAR 0 2
37836: PPUSH
37837: CALL_OW 250
37841: PUSH
37842: LD_VAR 0 2
37846: PPUSH
37847: CALL_OW 251
37851: PUSH
37852: LD_VAR 0 2
37856: PUSH
37857: LD_INT 0
37859: PUSH
37860: LD_INT 0
37862: PUSH
37863: LD_INT 0
37865: PUSH
37866: EMPTY
37867: LIST
37868: LIST
37869: LIST
37870: LIST
37871: LIST
37872: LIST
37873: LIST
37874: PUSH
37875: EMPTY
37876: LIST
37877: PPUSH
37878: CALL_OW 446
37882: GO 37806
37884: POP
37885: POP
// end ;
37886: LD_VAR 0 3
37890: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
37891: LD_INT 0
37893: PPUSH
37894: PPUSH
37895: PPUSH
37896: PPUSH
37897: PPUSH
37898: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
37899: LD_VAR 0 1
37903: NOT
37904: PUSH
37905: LD_VAR 0 1
37909: PPUSH
37910: CALL_OW 263
37914: PUSH
37915: LD_INT 2
37917: NONEQUAL
37918: OR
37919: IFFALSE 37923
// exit ;
37921: GO 38239
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
37923: LD_ADDR_VAR 0 6
37927: PUSH
37928: LD_INT 22
37930: PUSH
37931: LD_VAR 0 1
37935: PPUSH
37936: CALL_OW 255
37940: PUSH
37941: EMPTY
37942: LIST
37943: LIST
37944: PUSH
37945: LD_INT 2
37947: PUSH
37948: LD_INT 30
37950: PUSH
37951: LD_INT 36
37953: PUSH
37954: EMPTY
37955: LIST
37956: LIST
37957: PUSH
37958: LD_INT 34
37960: PUSH
37961: LD_INT 31
37963: PUSH
37964: EMPTY
37965: LIST
37966: LIST
37967: PUSH
37968: EMPTY
37969: LIST
37970: LIST
37971: LIST
37972: PUSH
37973: EMPTY
37974: LIST
37975: LIST
37976: PPUSH
37977: CALL_OW 69
37981: ST_TO_ADDR
// if not tmp then
37982: LD_VAR 0 6
37986: NOT
37987: IFFALSE 37991
// exit ;
37989: GO 38239
// result := [ ] ;
37991: LD_ADDR_VAR 0 2
37995: PUSH
37996: EMPTY
37997: ST_TO_ADDR
// for i in tmp do
37998: LD_ADDR_VAR 0 3
38002: PUSH
38003: LD_VAR 0 6
38007: PUSH
38008: FOR_IN
38009: IFFALSE 38080
// begin t := UnitsInside ( i ) ;
38011: LD_ADDR_VAR 0 4
38015: PUSH
38016: LD_VAR 0 3
38020: PPUSH
38021: CALL_OW 313
38025: ST_TO_ADDR
// if t then
38026: LD_VAR 0 4
38030: IFFALSE 38078
// for j in t do
38032: LD_ADDR_VAR 0 7
38036: PUSH
38037: LD_VAR 0 4
38041: PUSH
38042: FOR_IN
38043: IFFALSE 38076
// result := Replace ( result , result + 1 , j ) ;
38045: LD_ADDR_VAR 0 2
38049: PUSH
38050: LD_VAR 0 2
38054: PPUSH
38055: LD_VAR 0 2
38059: PUSH
38060: LD_INT 1
38062: PLUS
38063: PPUSH
38064: LD_VAR 0 7
38068: PPUSH
38069: CALL_OW 1
38073: ST_TO_ADDR
38074: GO 38042
38076: POP
38077: POP
// end ;
38078: GO 38008
38080: POP
38081: POP
// if not result then
38082: LD_VAR 0 2
38086: NOT
38087: IFFALSE 38091
// exit ;
38089: GO 38239
// mech := result [ 1 ] ;
38091: LD_ADDR_VAR 0 5
38095: PUSH
38096: LD_VAR 0 2
38100: PUSH
38101: LD_INT 1
38103: ARRAY
38104: ST_TO_ADDR
// if result > 1 then
38105: LD_VAR 0 2
38109: PUSH
38110: LD_INT 1
38112: GREATER
38113: IFFALSE 38225
// begin for i = 2 to result do
38115: LD_ADDR_VAR 0 3
38119: PUSH
38120: DOUBLE
38121: LD_INT 2
38123: DEC
38124: ST_TO_ADDR
38125: LD_VAR 0 2
38129: PUSH
38130: FOR_TO
38131: IFFALSE 38223
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
38133: LD_ADDR_VAR 0 4
38137: PUSH
38138: LD_VAR 0 2
38142: PUSH
38143: LD_VAR 0 3
38147: ARRAY
38148: PPUSH
38149: LD_INT 3
38151: PPUSH
38152: CALL_OW 259
38156: PUSH
38157: LD_VAR 0 2
38161: PUSH
38162: LD_VAR 0 3
38166: ARRAY
38167: PPUSH
38168: CALL_OW 432
38172: MINUS
38173: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
38174: LD_VAR 0 4
38178: PUSH
38179: LD_VAR 0 5
38183: PPUSH
38184: LD_INT 3
38186: PPUSH
38187: CALL_OW 259
38191: PUSH
38192: LD_VAR 0 5
38196: PPUSH
38197: CALL_OW 432
38201: MINUS
38202: GREATEREQUAL
38203: IFFALSE 38221
// mech := result [ i ] ;
38205: LD_ADDR_VAR 0 5
38209: PUSH
38210: LD_VAR 0 2
38214: PUSH
38215: LD_VAR 0 3
38219: ARRAY
38220: ST_TO_ADDR
// end ;
38221: GO 38130
38223: POP
38224: POP
// end ; ComLinkTo ( vehicle , mech ) ;
38225: LD_VAR 0 1
38229: PPUSH
38230: LD_VAR 0 5
38234: PPUSH
38235: CALL_OW 135
// end ;
38239: LD_VAR 0 2
38243: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
38244: LD_INT 0
38246: PPUSH
38247: PPUSH
38248: PPUSH
38249: PPUSH
38250: PPUSH
38251: PPUSH
38252: PPUSH
38253: PPUSH
38254: PPUSH
38255: PPUSH
38256: PPUSH
38257: PPUSH
38258: PPUSH
// result := [ ] ;
38259: LD_ADDR_VAR 0 7
38263: PUSH
38264: EMPTY
38265: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
38266: LD_VAR 0 1
38270: PPUSH
38271: CALL_OW 266
38275: PUSH
38276: LD_INT 0
38278: PUSH
38279: LD_INT 1
38281: PUSH
38282: EMPTY
38283: LIST
38284: LIST
38285: IN
38286: NOT
38287: IFFALSE 38291
// exit ;
38289: GO 39925
// if name then
38291: LD_VAR 0 3
38295: IFFALSE 38311
// SetBName ( base_dep , name ) ;
38297: LD_VAR 0 1
38301: PPUSH
38302: LD_VAR 0 3
38306: PPUSH
38307: CALL_OW 500
// base := GetBase ( base_dep ) ;
38311: LD_ADDR_VAR 0 15
38315: PUSH
38316: LD_VAR 0 1
38320: PPUSH
38321: CALL_OW 274
38325: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
38326: LD_ADDR_VAR 0 16
38330: PUSH
38331: LD_VAR 0 1
38335: PPUSH
38336: CALL_OW 255
38340: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
38341: LD_ADDR_VAR 0 17
38345: PUSH
38346: LD_VAR 0 1
38350: PPUSH
38351: CALL_OW 248
38355: ST_TO_ADDR
// if sources then
38356: LD_VAR 0 5
38360: IFFALSE 38407
// for i = 1 to 3 do
38362: LD_ADDR_VAR 0 8
38366: PUSH
38367: DOUBLE
38368: LD_INT 1
38370: DEC
38371: ST_TO_ADDR
38372: LD_INT 3
38374: PUSH
38375: FOR_TO
38376: IFFALSE 38405
// AddResourceType ( base , i , sources [ i ] ) ;
38378: LD_VAR 0 15
38382: PPUSH
38383: LD_VAR 0 8
38387: PPUSH
38388: LD_VAR 0 5
38392: PUSH
38393: LD_VAR 0 8
38397: ARRAY
38398: PPUSH
38399: CALL_OW 276
38403: GO 38375
38405: POP
38406: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
38407: LD_ADDR_VAR 0 18
38411: PUSH
38412: LD_VAR 0 15
38416: PPUSH
38417: LD_VAR 0 2
38421: PPUSH
38422: LD_INT 1
38424: PPUSH
38425: CALL 37668 0 3
38429: ST_TO_ADDR
// InitHc ;
38430: CALL_OW 19
// InitUc ;
38434: CALL_OW 18
// uc_side := side ;
38438: LD_ADDR_OWVAR 20
38442: PUSH
38443: LD_VAR 0 16
38447: ST_TO_ADDR
// uc_nation := nation ;
38448: LD_ADDR_OWVAR 21
38452: PUSH
38453: LD_VAR 0 17
38457: ST_TO_ADDR
// if buildings then
38458: LD_VAR 0 18
38462: IFFALSE 39784
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
38464: LD_ADDR_VAR 0 19
38468: PUSH
38469: LD_VAR 0 18
38473: PPUSH
38474: LD_INT 2
38476: PUSH
38477: LD_INT 30
38479: PUSH
38480: LD_INT 29
38482: PUSH
38483: EMPTY
38484: LIST
38485: LIST
38486: PUSH
38487: LD_INT 30
38489: PUSH
38490: LD_INT 30
38492: PUSH
38493: EMPTY
38494: LIST
38495: LIST
38496: PUSH
38497: EMPTY
38498: LIST
38499: LIST
38500: LIST
38501: PPUSH
38502: CALL_OW 72
38506: ST_TO_ADDR
// if tmp then
38507: LD_VAR 0 19
38511: IFFALSE 38559
// for i in tmp do
38513: LD_ADDR_VAR 0 8
38517: PUSH
38518: LD_VAR 0 19
38522: PUSH
38523: FOR_IN
38524: IFFALSE 38557
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
38526: LD_VAR 0 8
38530: PPUSH
38531: CALL_OW 250
38535: PPUSH
38536: LD_VAR 0 8
38540: PPUSH
38541: CALL_OW 251
38545: PPUSH
38546: LD_VAR 0 16
38550: PPUSH
38551: CALL_OW 441
38555: GO 38523
38557: POP
38558: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
38559: LD_VAR 0 18
38563: PPUSH
38564: LD_INT 2
38566: PUSH
38567: LD_INT 30
38569: PUSH
38570: LD_INT 32
38572: PUSH
38573: EMPTY
38574: LIST
38575: LIST
38576: PUSH
38577: LD_INT 30
38579: PUSH
38580: LD_INT 33
38582: PUSH
38583: EMPTY
38584: LIST
38585: LIST
38586: PUSH
38587: EMPTY
38588: LIST
38589: LIST
38590: LIST
38591: PPUSH
38592: CALL_OW 72
38596: IFFALSE 38684
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
38598: LD_ADDR_VAR 0 8
38602: PUSH
38603: LD_VAR 0 18
38607: PPUSH
38608: LD_INT 2
38610: PUSH
38611: LD_INT 30
38613: PUSH
38614: LD_INT 32
38616: PUSH
38617: EMPTY
38618: LIST
38619: LIST
38620: PUSH
38621: LD_INT 30
38623: PUSH
38624: LD_INT 33
38626: PUSH
38627: EMPTY
38628: LIST
38629: LIST
38630: PUSH
38631: EMPTY
38632: LIST
38633: LIST
38634: LIST
38635: PPUSH
38636: CALL_OW 72
38640: PUSH
38641: FOR_IN
38642: IFFALSE 38682
// begin if not GetBWeapon ( i ) then
38644: LD_VAR 0 8
38648: PPUSH
38649: CALL_OW 269
38653: NOT
38654: IFFALSE 38680
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
38656: LD_VAR 0 8
38660: PPUSH
38661: LD_VAR 0 8
38665: PPUSH
38666: LD_VAR 0 2
38670: PPUSH
38671: CALL 39930 0 2
38675: PPUSH
38676: CALL_OW 431
// end ;
38680: GO 38641
38682: POP
38683: POP
// end ; for i = 1 to personel do
38684: LD_ADDR_VAR 0 8
38688: PUSH
38689: DOUBLE
38690: LD_INT 1
38692: DEC
38693: ST_TO_ADDR
38694: LD_VAR 0 6
38698: PUSH
38699: FOR_TO
38700: IFFALSE 39764
// begin if i > 4 then
38702: LD_VAR 0 8
38706: PUSH
38707: LD_INT 4
38709: GREATER
38710: IFFALSE 38714
// break ;
38712: GO 39764
// case i of 1 :
38714: LD_VAR 0 8
38718: PUSH
38719: LD_INT 1
38721: DOUBLE
38722: EQUAL
38723: IFTRUE 38727
38725: GO 38807
38727: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
38728: LD_ADDR_VAR 0 12
38732: PUSH
38733: LD_VAR 0 18
38737: PPUSH
38738: LD_INT 22
38740: PUSH
38741: LD_VAR 0 16
38745: PUSH
38746: EMPTY
38747: LIST
38748: LIST
38749: PUSH
38750: LD_INT 58
38752: PUSH
38753: EMPTY
38754: LIST
38755: PUSH
38756: LD_INT 2
38758: PUSH
38759: LD_INT 30
38761: PUSH
38762: LD_INT 32
38764: PUSH
38765: EMPTY
38766: LIST
38767: LIST
38768: PUSH
38769: LD_INT 30
38771: PUSH
38772: LD_INT 4
38774: PUSH
38775: EMPTY
38776: LIST
38777: LIST
38778: PUSH
38779: LD_INT 30
38781: PUSH
38782: LD_INT 5
38784: PUSH
38785: EMPTY
38786: LIST
38787: LIST
38788: PUSH
38789: EMPTY
38790: LIST
38791: LIST
38792: LIST
38793: LIST
38794: PUSH
38795: EMPTY
38796: LIST
38797: LIST
38798: LIST
38799: PPUSH
38800: CALL_OW 72
38804: ST_TO_ADDR
38805: GO 39029
38807: LD_INT 2
38809: DOUBLE
38810: EQUAL
38811: IFTRUE 38815
38813: GO 38877
38815: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
38816: LD_ADDR_VAR 0 12
38820: PUSH
38821: LD_VAR 0 18
38825: PPUSH
38826: LD_INT 22
38828: PUSH
38829: LD_VAR 0 16
38833: PUSH
38834: EMPTY
38835: LIST
38836: LIST
38837: PUSH
38838: LD_INT 2
38840: PUSH
38841: LD_INT 30
38843: PUSH
38844: LD_INT 0
38846: PUSH
38847: EMPTY
38848: LIST
38849: LIST
38850: PUSH
38851: LD_INT 30
38853: PUSH
38854: LD_INT 1
38856: PUSH
38857: EMPTY
38858: LIST
38859: LIST
38860: PUSH
38861: EMPTY
38862: LIST
38863: LIST
38864: LIST
38865: PUSH
38866: EMPTY
38867: LIST
38868: LIST
38869: PPUSH
38870: CALL_OW 72
38874: ST_TO_ADDR
38875: GO 39029
38877: LD_INT 3
38879: DOUBLE
38880: EQUAL
38881: IFTRUE 38885
38883: GO 38947
38885: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
38886: LD_ADDR_VAR 0 12
38890: PUSH
38891: LD_VAR 0 18
38895: PPUSH
38896: LD_INT 22
38898: PUSH
38899: LD_VAR 0 16
38903: PUSH
38904: EMPTY
38905: LIST
38906: LIST
38907: PUSH
38908: LD_INT 2
38910: PUSH
38911: LD_INT 30
38913: PUSH
38914: LD_INT 2
38916: PUSH
38917: EMPTY
38918: LIST
38919: LIST
38920: PUSH
38921: LD_INT 30
38923: PUSH
38924: LD_INT 3
38926: PUSH
38927: EMPTY
38928: LIST
38929: LIST
38930: PUSH
38931: EMPTY
38932: LIST
38933: LIST
38934: LIST
38935: PUSH
38936: EMPTY
38937: LIST
38938: LIST
38939: PPUSH
38940: CALL_OW 72
38944: ST_TO_ADDR
38945: GO 39029
38947: LD_INT 4
38949: DOUBLE
38950: EQUAL
38951: IFTRUE 38955
38953: GO 39028
38955: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
38956: LD_ADDR_VAR 0 12
38960: PUSH
38961: LD_VAR 0 18
38965: PPUSH
38966: LD_INT 22
38968: PUSH
38969: LD_VAR 0 16
38973: PUSH
38974: EMPTY
38975: LIST
38976: LIST
38977: PUSH
38978: LD_INT 2
38980: PUSH
38981: LD_INT 30
38983: PUSH
38984: LD_INT 6
38986: PUSH
38987: EMPTY
38988: LIST
38989: LIST
38990: PUSH
38991: LD_INT 30
38993: PUSH
38994: LD_INT 7
38996: PUSH
38997: EMPTY
38998: LIST
38999: LIST
39000: PUSH
39001: LD_INT 30
39003: PUSH
39004: LD_INT 8
39006: PUSH
39007: EMPTY
39008: LIST
39009: LIST
39010: PUSH
39011: EMPTY
39012: LIST
39013: LIST
39014: LIST
39015: LIST
39016: PUSH
39017: EMPTY
39018: LIST
39019: LIST
39020: PPUSH
39021: CALL_OW 72
39025: ST_TO_ADDR
39026: GO 39029
39028: POP
// if i = 1 then
39029: LD_VAR 0 8
39033: PUSH
39034: LD_INT 1
39036: EQUAL
39037: IFFALSE 39148
// begin tmp := [ ] ;
39039: LD_ADDR_VAR 0 19
39043: PUSH
39044: EMPTY
39045: ST_TO_ADDR
// for j in f do
39046: LD_ADDR_VAR 0 9
39050: PUSH
39051: LD_VAR 0 12
39055: PUSH
39056: FOR_IN
39057: IFFALSE 39130
// if GetBType ( j ) = b_bunker then
39059: LD_VAR 0 9
39063: PPUSH
39064: CALL_OW 266
39068: PUSH
39069: LD_INT 32
39071: EQUAL
39072: IFFALSE 39099
// tmp := Insert ( tmp , 1 , j ) else
39074: LD_ADDR_VAR 0 19
39078: PUSH
39079: LD_VAR 0 19
39083: PPUSH
39084: LD_INT 1
39086: PPUSH
39087: LD_VAR 0 9
39091: PPUSH
39092: CALL_OW 2
39096: ST_TO_ADDR
39097: GO 39128
// tmp := Insert ( tmp , tmp + 1 , j ) ;
39099: LD_ADDR_VAR 0 19
39103: PUSH
39104: LD_VAR 0 19
39108: PPUSH
39109: LD_VAR 0 19
39113: PUSH
39114: LD_INT 1
39116: PLUS
39117: PPUSH
39118: LD_VAR 0 9
39122: PPUSH
39123: CALL_OW 2
39127: ST_TO_ADDR
39128: GO 39056
39130: POP
39131: POP
// if tmp then
39132: LD_VAR 0 19
39136: IFFALSE 39148
// f := tmp ;
39138: LD_ADDR_VAR 0 12
39142: PUSH
39143: LD_VAR 0 19
39147: ST_TO_ADDR
// end ; x := personel [ i ] ;
39148: LD_ADDR_VAR 0 13
39152: PUSH
39153: LD_VAR 0 6
39157: PUSH
39158: LD_VAR 0 8
39162: ARRAY
39163: ST_TO_ADDR
// if x = - 1 then
39164: LD_VAR 0 13
39168: PUSH
39169: LD_INT 1
39171: NEG
39172: EQUAL
39173: IFFALSE 39382
// begin for j in f do
39175: LD_ADDR_VAR 0 9
39179: PUSH
39180: LD_VAR 0 12
39184: PUSH
39185: FOR_IN
39186: IFFALSE 39378
// repeat InitHc ;
39188: CALL_OW 19
// if GetBType ( j ) = b_barracks then
39192: LD_VAR 0 9
39196: PPUSH
39197: CALL_OW 266
39201: PUSH
39202: LD_INT 5
39204: EQUAL
39205: IFFALSE 39275
// begin if UnitsInside ( j ) < 3 then
39207: LD_VAR 0 9
39211: PPUSH
39212: CALL_OW 313
39216: PUSH
39217: LD_INT 3
39219: LESS
39220: IFFALSE 39256
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
39222: LD_INT 0
39224: PPUSH
39225: LD_INT 5
39227: PUSH
39228: LD_INT 8
39230: PUSH
39231: LD_INT 9
39233: PUSH
39234: EMPTY
39235: LIST
39236: LIST
39237: LIST
39238: PUSH
39239: LD_VAR 0 17
39243: ARRAY
39244: PPUSH
39245: LD_VAR 0 4
39249: PPUSH
39250: CALL_OW 380
39254: GO 39273
// PrepareHuman ( false , i , skill ) ;
39256: LD_INT 0
39258: PPUSH
39259: LD_VAR 0 8
39263: PPUSH
39264: LD_VAR 0 4
39268: PPUSH
39269: CALL_OW 380
// end else
39273: GO 39292
// PrepareHuman ( false , i , skill ) ;
39275: LD_INT 0
39277: PPUSH
39278: LD_VAR 0 8
39282: PPUSH
39283: LD_VAR 0 4
39287: PPUSH
39288: CALL_OW 380
// un := CreateHuman ;
39292: LD_ADDR_VAR 0 14
39296: PUSH
39297: CALL_OW 44
39301: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39302: LD_ADDR_VAR 0 7
39306: PUSH
39307: LD_VAR 0 7
39311: PPUSH
39312: LD_INT 1
39314: PPUSH
39315: LD_VAR 0 14
39319: PPUSH
39320: CALL_OW 2
39324: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
39325: LD_VAR 0 14
39329: PPUSH
39330: LD_VAR 0 9
39334: PPUSH
39335: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
39339: LD_VAR 0 9
39343: PPUSH
39344: CALL_OW 313
39348: PUSH
39349: LD_INT 6
39351: EQUAL
39352: PUSH
39353: LD_VAR 0 9
39357: PPUSH
39358: CALL_OW 266
39362: PUSH
39363: LD_INT 32
39365: PUSH
39366: LD_INT 31
39368: PUSH
39369: EMPTY
39370: LIST
39371: LIST
39372: IN
39373: OR
39374: IFFALSE 39188
39376: GO 39185
39378: POP
39379: POP
// end else
39380: GO 39762
// for j = 1 to x do
39382: LD_ADDR_VAR 0 9
39386: PUSH
39387: DOUBLE
39388: LD_INT 1
39390: DEC
39391: ST_TO_ADDR
39392: LD_VAR 0 13
39396: PUSH
39397: FOR_TO
39398: IFFALSE 39760
// begin InitHc ;
39400: CALL_OW 19
// if not f then
39404: LD_VAR 0 12
39408: NOT
39409: IFFALSE 39498
// begin PrepareHuman ( false , i , skill ) ;
39411: LD_INT 0
39413: PPUSH
39414: LD_VAR 0 8
39418: PPUSH
39419: LD_VAR 0 4
39423: PPUSH
39424: CALL_OW 380
// un := CreateHuman ;
39428: LD_ADDR_VAR 0 14
39432: PUSH
39433: CALL_OW 44
39437: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39438: LD_ADDR_VAR 0 7
39442: PUSH
39443: LD_VAR 0 7
39447: PPUSH
39448: LD_INT 1
39450: PPUSH
39451: LD_VAR 0 14
39455: PPUSH
39456: CALL_OW 2
39460: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
39461: LD_VAR 0 14
39465: PPUSH
39466: LD_VAR 0 1
39470: PPUSH
39471: CALL_OW 250
39475: PPUSH
39476: LD_VAR 0 1
39480: PPUSH
39481: CALL_OW 251
39485: PPUSH
39486: LD_INT 10
39488: PPUSH
39489: LD_INT 0
39491: PPUSH
39492: CALL_OW 50
// continue ;
39496: GO 39397
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
39498: LD_VAR 0 12
39502: PUSH
39503: LD_INT 1
39505: ARRAY
39506: PPUSH
39507: CALL_OW 313
39511: PUSH
39512: LD_VAR 0 12
39516: PUSH
39517: LD_INT 1
39519: ARRAY
39520: PPUSH
39521: CALL_OW 266
39525: PUSH
39526: LD_INT 32
39528: PUSH
39529: LD_INT 31
39531: PUSH
39532: EMPTY
39533: LIST
39534: LIST
39535: IN
39536: AND
39537: PUSH
39538: LD_VAR 0 12
39542: PUSH
39543: LD_INT 1
39545: ARRAY
39546: PPUSH
39547: CALL_OW 313
39551: PUSH
39552: LD_INT 6
39554: EQUAL
39555: OR
39556: IFFALSE 39576
// f := Delete ( f , 1 ) ;
39558: LD_ADDR_VAR 0 12
39562: PUSH
39563: LD_VAR 0 12
39567: PPUSH
39568: LD_INT 1
39570: PPUSH
39571: CALL_OW 3
39575: ST_TO_ADDR
// if not f then
39576: LD_VAR 0 12
39580: NOT
39581: IFFALSE 39599
// begin x := x + 2 ;
39583: LD_ADDR_VAR 0 13
39587: PUSH
39588: LD_VAR 0 13
39592: PUSH
39593: LD_INT 2
39595: PLUS
39596: ST_TO_ADDR
// continue ;
39597: GO 39397
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
39599: LD_VAR 0 12
39603: PUSH
39604: LD_INT 1
39606: ARRAY
39607: PPUSH
39608: CALL_OW 266
39612: PUSH
39613: LD_INT 5
39615: EQUAL
39616: IFFALSE 39690
// begin if UnitsInside ( f [ 1 ] ) < 3 then
39618: LD_VAR 0 12
39622: PUSH
39623: LD_INT 1
39625: ARRAY
39626: PPUSH
39627: CALL_OW 313
39631: PUSH
39632: LD_INT 3
39634: LESS
39635: IFFALSE 39671
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
39637: LD_INT 0
39639: PPUSH
39640: LD_INT 5
39642: PUSH
39643: LD_INT 8
39645: PUSH
39646: LD_INT 9
39648: PUSH
39649: EMPTY
39650: LIST
39651: LIST
39652: LIST
39653: PUSH
39654: LD_VAR 0 17
39658: ARRAY
39659: PPUSH
39660: LD_VAR 0 4
39664: PPUSH
39665: CALL_OW 380
39669: GO 39688
// PrepareHuman ( false , i , skill ) ;
39671: LD_INT 0
39673: PPUSH
39674: LD_VAR 0 8
39678: PPUSH
39679: LD_VAR 0 4
39683: PPUSH
39684: CALL_OW 380
// end else
39688: GO 39707
// PrepareHuman ( false , i , skill ) ;
39690: LD_INT 0
39692: PPUSH
39693: LD_VAR 0 8
39697: PPUSH
39698: LD_VAR 0 4
39702: PPUSH
39703: CALL_OW 380
// un := CreateHuman ;
39707: LD_ADDR_VAR 0 14
39711: PUSH
39712: CALL_OW 44
39716: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39717: LD_ADDR_VAR 0 7
39721: PUSH
39722: LD_VAR 0 7
39726: PPUSH
39727: LD_INT 1
39729: PPUSH
39730: LD_VAR 0 14
39734: PPUSH
39735: CALL_OW 2
39739: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
39740: LD_VAR 0 14
39744: PPUSH
39745: LD_VAR 0 12
39749: PUSH
39750: LD_INT 1
39752: ARRAY
39753: PPUSH
39754: CALL_OW 52
// end ;
39758: GO 39397
39760: POP
39761: POP
// end ;
39762: GO 38699
39764: POP
39765: POP
// result := result ^ buildings ;
39766: LD_ADDR_VAR 0 7
39770: PUSH
39771: LD_VAR 0 7
39775: PUSH
39776: LD_VAR 0 18
39780: ADD
39781: ST_TO_ADDR
// end else
39782: GO 39925
// begin for i = 1 to personel do
39784: LD_ADDR_VAR 0 8
39788: PUSH
39789: DOUBLE
39790: LD_INT 1
39792: DEC
39793: ST_TO_ADDR
39794: LD_VAR 0 6
39798: PUSH
39799: FOR_TO
39800: IFFALSE 39923
// begin if i > 4 then
39802: LD_VAR 0 8
39806: PUSH
39807: LD_INT 4
39809: GREATER
39810: IFFALSE 39814
// break ;
39812: GO 39923
// x := personel [ i ] ;
39814: LD_ADDR_VAR 0 13
39818: PUSH
39819: LD_VAR 0 6
39823: PUSH
39824: LD_VAR 0 8
39828: ARRAY
39829: ST_TO_ADDR
// if x = - 1 then
39830: LD_VAR 0 13
39834: PUSH
39835: LD_INT 1
39837: NEG
39838: EQUAL
39839: IFFALSE 39843
// continue ;
39841: GO 39799
// PrepareHuman ( false , i , skill ) ;
39843: LD_INT 0
39845: PPUSH
39846: LD_VAR 0 8
39850: PPUSH
39851: LD_VAR 0 4
39855: PPUSH
39856: CALL_OW 380
// un := CreateHuman ;
39860: LD_ADDR_VAR 0 14
39864: PUSH
39865: CALL_OW 44
39869: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
39870: LD_VAR 0 14
39874: PPUSH
39875: LD_VAR 0 1
39879: PPUSH
39880: CALL_OW 250
39884: PPUSH
39885: LD_VAR 0 1
39889: PPUSH
39890: CALL_OW 251
39894: PPUSH
39895: LD_INT 10
39897: PPUSH
39898: LD_INT 0
39900: PPUSH
39901: CALL_OW 50
// result := result ^ un ;
39905: LD_ADDR_VAR 0 7
39909: PUSH
39910: LD_VAR 0 7
39914: PUSH
39915: LD_VAR 0 14
39919: ADD
39920: ST_TO_ADDR
// end ;
39921: GO 39799
39923: POP
39924: POP
// end ; end ;
39925: LD_VAR 0 7
39929: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
39930: LD_INT 0
39932: PPUSH
39933: PPUSH
39934: PPUSH
39935: PPUSH
39936: PPUSH
39937: PPUSH
39938: PPUSH
39939: PPUSH
39940: PPUSH
39941: PPUSH
39942: PPUSH
39943: PPUSH
39944: PPUSH
39945: PPUSH
39946: PPUSH
39947: PPUSH
// result := false ;
39948: LD_ADDR_VAR 0 3
39952: PUSH
39953: LD_INT 0
39955: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
39956: LD_VAR 0 1
39960: NOT
39961: PUSH
39962: LD_VAR 0 1
39966: PPUSH
39967: CALL_OW 266
39971: PUSH
39972: LD_INT 32
39974: PUSH
39975: LD_INT 33
39977: PUSH
39978: EMPTY
39979: LIST
39980: LIST
39981: IN
39982: NOT
39983: OR
39984: IFFALSE 39988
// exit ;
39986: GO 41097
// nat := GetNation ( tower ) ;
39988: LD_ADDR_VAR 0 12
39992: PUSH
39993: LD_VAR 0 1
39997: PPUSH
39998: CALL_OW 248
40002: ST_TO_ADDR
// side := GetSide ( tower ) ;
40003: LD_ADDR_VAR 0 16
40007: PUSH
40008: LD_VAR 0 1
40012: PPUSH
40013: CALL_OW 255
40017: ST_TO_ADDR
// x := GetX ( tower ) ;
40018: LD_ADDR_VAR 0 10
40022: PUSH
40023: LD_VAR 0 1
40027: PPUSH
40028: CALL_OW 250
40032: ST_TO_ADDR
// y := GetY ( tower ) ;
40033: LD_ADDR_VAR 0 11
40037: PUSH
40038: LD_VAR 0 1
40042: PPUSH
40043: CALL_OW 251
40047: ST_TO_ADDR
// if not x or not y then
40048: LD_VAR 0 10
40052: NOT
40053: PUSH
40054: LD_VAR 0 11
40058: NOT
40059: OR
40060: IFFALSE 40064
// exit ;
40062: GO 41097
// weapon := 0 ;
40064: LD_ADDR_VAR 0 18
40068: PUSH
40069: LD_INT 0
40071: ST_TO_ADDR
// fac_list := [ ] ;
40072: LD_ADDR_VAR 0 17
40076: PUSH
40077: EMPTY
40078: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
40079: LD_ADDR_VAR 0 6
40083: PUSH
40084: LD_VAR 0 1
40088: PPUSH
40089: CALL_OW 274
40093: PPUSH
40094: LD_VAR 0 2
40098: PPUSH
40099: LD_INT 0
40101: PPUSH
40102: CALL 37668 0 3
40106: PPUSH
40107: LD_INT 30
40109: PUSH
40110: LD_INT 3
40112: PUSH
40113: EMPTY
40114: LIST
40115: LIST
40116: PPUSH
40117: CALL_OW 72
40121: ST_TO_ADDR
// if not factories then
40122: LD_VAR 0 6
40126: NOT
40127: IFFALSE 40131
// exit ;
40129: GO 41097
// for i in factories do
40131: LD_ADDR_VAR 0 8
40135: PUSH
40136: LD_VAR 0 6
40140: PUSH
40141: FOR_IN
40142: IFFALSE 40167
// fac_list := fac_list union AvailableWeaponList ( i ) ;
40144: LD_ADDR_VAR 0 17
40148: PUSH
40149: LD_VAR 0 17
40153: PUSH
40154: LD_VAR 0 8
40158: PPUSH
40159: CALL_OW 478
40163: UNION
40164: ST_TO_ADDR
40165: GO 40141
40167: POP
40168: POP
// if not fac_list then
40169: LD_VAR 0 17
40173: NOT
40174: IFFALSE 40178
// exit ;
40176: GO 41097
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
40178: LD_ADDR_VAR 0 5
40182: PUSH
40183: LD_INT 4
40185: PUSH
40186: LD_INT 5
40188: PUSH
40189: LD_INT 9
40191: PUSH
40192: LD_INT 10
40194: PUSH
40195: LD_INT 6
40197: PUSH
40198: LD_INT 7
40200: PUSH
40201: LD_INT 11
40203: PUSH
40204: EMPTY
40205: LIST
40206: LIST
40207: LIST
40208: LIST
40209: LIST
40210: LIST
40211: LIST
40212: PUSH
40213: LD_INT 27
40215: PUSH
40216: LD_INT 28
40218: PUSH
40219: LD_INT 26
40221: PUSH
40222: LD_INT 30
40224: PUSH
40225: EMPTY
40226: LIST
40227: LIST
40228: LIST
40229: LIST
40230: PUSH
40231: LD_INT 43
40233: PUSH
40234: LD_INT 44
40236: PUSH
40237: LD_INT 46
40239: PUSH
40240: LD_INT 45
40242: PUSH
40243: LD_INT 47
40245: PUSH
40246: LD_INT 49
40248: PUSH
40249: EMPTY
40250: LIST
40251: LIST
40252: LIST
40253: LIST
40254: LIST
40255: LIST
40256: PUSH
40257: EMPTY
40258: LIST
40259: LIST
40260: LIST
40261: PUSH
40262: LD_VAR 0 12
40266: ARRAY
40267: ST_TO_ADDR
// list := list isect fac_list ;
40268: LD_ADDR_VAR 0 5
40272: PUSH
40273: LD_VAR 0 5
40277: PUSH
40278: LD_VAR 0 17
40282: ISECT
40283: ST_TO_ADDR
// if not list then
40284: LD_VAR 0 5
40288: NOT
40289: IFFALSE 40293
// exit ;
40291: GO 41097
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
40293: LD_VAR 0 12
40297: PUSH
40298: LD_INT 3
40300: EQUAL
40301: PUSH
40302: LD_INT 49
40304: PUSH
40305: LD_VAR 0 5
40309: IN
40310: AND
40311: PUSH
40312: LD_INT 31
40314: PPUSH
40315: LD_VAR 0 16
40319: PPUSH
40320: CALL_OW 321
40324: PUSH
40325: LD_INT 2
40327: EQUAL
40328: AND
40329: IFFALSE 40389
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
40331: LD_INT 22
40333: PUSH
40334: LD_VAR 0 16
40338: PUSH
40339: EMPTY
40340: LIST
40341: LIST
40342: PUSH
40343: LD_INT 35
40345: PUSH
40346: LD_INT 49
40348: PUSH
40349: EMPTY
40350: LIST
40351: LIST
40352: PUSH
40353: LD_INT 91
40355: PUSH
40356: LD_VAR 0 1
40360: PUSH
40361: LD_INT 10
40363: PUSH
40364: EMPTY
40365: LIST
40366: LIST
40367: LIST
40368: PUSH
40369: EMPTY
40370: LIST
40371: LIST
40372: LIST
40373: PPUSH
40374: CALL_OW 69
40378: NOT
40379: IFFALSE 40389
// weapon := ru_time_lapser ;
40381: LD_ADDR_VAR 0 18
40385: PUSH
40386: LD_INT 49
40388: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
40389: LD_VAR 0 12
40393: PUSH
40394: LD_INT 1
40396: PUSH
40397: LD_INT 2
40399: PUSH
40400: EMPTY
40401: LIST
40402: LIST
40403: IN
40404: PUSH
40405: LD_INT 11
40407: PUSH
40408: LD_VAR 0 5
40412: IN
40413: PUSH
40414: LD_INT 30
40416: PUSH
40417: LD_VAR 0 5
40421: IN
40422: OR
40423: AND
40424: PUSH
40425: LD_INT 6
40427: PPUSH
40428: LD_VAR 0 16
40432: PPUSH
40433: CALL_OW 321
40437: PUSH
40438: LD_INT 2
40440: EQUAL
40441: AND
40442: IFFALSE 40607
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
40444: LD_INT 22
40446: PUSH
40447: LD_VAR 0 16
40451: PUSH
40452: EMPTY
40453: LIST
40454: LIST
40455: PUSH
40456: LD_INT 2
40458: PUSH
40459: LD_INT 35
40461: PUSH
40462: LD_INT 11
40464: PUSH
40465: EMPTY
40466: LIST
40467: LIST
40468: PUSH
40469: LD_INT 35
40471: PUSH
40472: LD_INT 30
40474: PUSH
40475: EMPTY
40476: LIST
40477: LIST
40478: PUSH
40479: EMPTY
40480: LIST
40481: LIST
40482: LIST
40483: PUSH
40484: LD_INT 91
40486: PUSH
40487: LD_VAR 0 1
40491: PUSH
40492: LD_INT 18
40494: PUSH
40495: EMPTY
40496: LIST
40497: LIST
40498: LIST
40499: PUSH
40500: EMPTY
40501: LIST
40502: LIST
40503: LIST
40504: PPUSH
40505: CALL_OW 69
40509: NOT
40510: PUSH
40511: LD_INT 22
40513: PUSH
40514: LD_VAR 0 16
40518: PUSH
40519: EMPTY
40520: LIST
40521: LIST
40522: PUSH
40523: LD_INT 2
40525: PUSH
40526: LD_INT 30
40528: PUSH
40529: LD_INT 32
40531: PUSH
40532: EMPTY
40533: LIST
40534: LIST
40535: PUSH
40536: LD_INT 30
40538: PUSH
40539: LD_INT 33
40541: PUSH
40542: EMPTY
40543: LIST
40544: LIST
40545: PUSH
40546: EMPTY
40547: LIST
40548: LIST
40549: LIST
40550: PUSH
40551: LD_INT 91
40553: PUSH
40554: LD_VAR 0 1
40558: PUSH
40559: LD_INT 12
40561: PUSH
40562: EMPTY
40563: LIST
40564: LIST
40565: LIST
40566: PUSH
40567: EMPTY
40568: LIST
40569: LIST
40570: LIST
40571: PUSH
40572: EMPTY
40573: LIST
40574: PPUSH
40575: CALL_OW 69
40579: PUSH
40580: LD_INT 2
40582: GREATER
40583: AND
40584: IFFALSE 40607
// weapon := [ us_radar , ar_radar ] [ nat ] ;
40586: LD_ADDR_VAR 0 18
40590: PUSH
40591: LD_INT 11
40593: PUSH
40594: LD_INT 30
40596: PUSH
40597: EMPTY
40598: LIST
40599: LIST
40600: PUSH
40601: LD_VAR 0 12
40605: ARRAY
40606: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
40607: LD_VAR 0 18
40611: NOT
40612: PUSH
40613: LD_INT 40
40615: PPUSH
40616: LD_VAR 0 16
40620: PPUSH
40621: CALL_OW 321
40625: PUSH
40626: LD_INT 2
40628: EQUAL
40629: AND
40630: PUSH
40631: LD_INT 7
40633: PUSH
40634: LD_VAR 0 5
40638: IN
40639: PUSH
40640: LD_INT 28
40642: PUSH
40643: LD_VAR 0 5
40647: IN
40648: OR
40649: PUSH
40650: LD_INT 45
40652: PUSH
40653: LD_VAR 0 5
40657: IN
40658: OR
40659: AND
40660: IFFALSE 40914
// begin hex := GetHexInfo ( x , y ) ;
40662: LD_ADDR_VAR 0 4
40666: PUSH
40667: LD_VAR 0 10
40671: PPUSH
40672: LD_VAR 0 11
40676: PPUSH
40677: CALL_OW 546
40681: ST_TO_ADDR
// if hex [ 1 ] then
40682: LD_VAR 0 4
40686: PUSH
40687: LD_INT 1
40689: ARRAY
40690: IFFALSE 40694
// exit ;
40692: GO 41097
// height := hex [ 2 ] ;
40694: LD_ADDR_VAR 0 15
40698: PUSH
40699: LD_VAR 0 4
40703: PUSH
40704: LD_INT 2
40706: ARRAY
40707: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
40708: LD_ADDR_VAR 0 14
40712: PUSH
40713: LD_INT 0
40715: PUSH
40716: LD_INT 2
40718: PUSH
40719: LD_INT 3
40721: PUSH
40722: LD_INT 5
40724: PUSH
40725: EMPTY
40726: LIST
40727: LIST
40728: LIST
40729: LIST
40730: ST_TO_ADDR
// for i in tmp do
40731: LD_ADDR_VAR 0 8
40735: PUSH
40736: LD_VAR 0 14
40740: PUSH
40741: FOR_IN
40742: IFFALSE 40912
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
40744: LD_ADDR_VAR 0 9
40748: PUSH
40749: LD_VAR 0 10
40753: PPUSH
40754: LD_VAR 0 8
40758: PPUSH
40759: LD_INT 5
40761: PPUSH
40762: CALL_OW 272
40766: PUSH
40767: LD_VAR 0 11
40771: PPUSH
40772: LD_VAR 0 8
40776: PPUSH
40777: LD_INT 5
40779: PPUSH
40780: CALL_OW 273
40784: PUSH
40785: EMPTY
40786: LIST
40787: LIST
40788: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
40789: LD_VAR 0 9
40793: PUSH
40794: LD_INT 1
40796: ARRAY
40797: PPUSH
40798: LD_VAR 0 9
40802: PUSH
40803: LD_INT 2
40805: ARRAY
40806: PPUSH
40807: CALL_OW 488
40811: IFFALSE 40910
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
40813: LD_ADDR_VAR 0 4
40817: PUSH
40818: LD_VAR 0 9
40822: PUSH
40823: LD_INT 1
40825: ARRAY
40826: PPUSH
40827: LD_VAR 0 9
40831: PUSH
40832: LD_INT 2
40834: ARRAY
40835: PPUSH
40836: CALL_OW 546
40840: ST_TO_ADDR
// if hex [ 1 ] then
40841: LD_VAR 0 4
40845: PUSH
40846: LD_INT 1
40848: ARRAY
40849: IFFALSE 40853
// continue ;
40851: GO 40741
// h := hex [ 2 ] ;
40853: LD_ADDR_VAR 0 13
40857: PUSH
40858: LD_VAR 0 4
40862: PUSH
40863: LD_INT 2
40865: ARRAY
40866: ST_TO_ADDR
// if h + 7 < height then
40867: LD_VAR 0 13
40871: PUSH
40872: LD_INT 7
40874: PLUS
40875: PUSH
40876: LD_VAR 0 15
40880: LESS
40881: IFFALSE 40910
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
40883: LD_ADDR_VAR 0 18
40887: PUSH
40888: LD_INT 7
40890: PUSH
40891: LD_INT 28
40893: PUSH
40894: LD_INT 45
40896: PUSH
40897: EMPTY
40898: LIST
40899: LIST
40900: LIST
40901: PUSH
40902: LD_VAR 0 12
40906: ARRAY
40907: ST_TO_ADDR
// break ;
40908: GO 40912
// end ; end ; end ;
40910: GO 40741
40912: POP
40913: POP
// end ; if not weapon then
40914: LD_VAR 0 18
40918: NOT
40919: IFFALSE 40979
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
40921: LD_ADDR_VAR 0 5
40925: PUSH
40926: LD_VAR 0 5
40930: PUSH
40931: LD_INT 11
40933: PUSH
40934: LD_INT 30
40936: PUSH
40937: LD_INT 49
40939: PUSH
40940: EMPTY
40941: LIST
40942: LIST
40943: LIST
40944: DIFF
40945: ST_TO_ADDR
// if not list then
40946: LD_VAR 0 5
40950: NOT
40951: IFFALSE 40955
// exit ;
40953: GO 41097
// weapon := list [ rand ( 1 , list ) ] ;
40955: LD_ADDR_VAR 0 18
40959: PUSH
40960: LD_VAR 0 5
40964: PUSH
40965: LD_INT 1
40967: PPUSH
40968: LD_VAR 0 5
40972: PPUSH
40973: CALL_OW 12
40977: ARRAY
40978: ST_TO_ADDR
// end ; if weapon then
40979: LD_VAR 0 18
40983: IFFALSE 41097
// begin tmp := CostOfWeapon ( weapon ) ;
40985: LD_ADDR_VAR 0 14
40989: PUSH
40990: LD_VAR 0 18
40994: PPUSH
40995: CALL_OW 451
40999: ST_TO_ADDR
// j := GetBase ( tower ) ;
41000: LD_ADDR_VAR 0 9
41004: PUSH
41005: LD_VAR 0 1
41009: PPUSH
41010: CALL_OW 274
41014: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
41015: LD_VAR 0 9
41019: PPUSH
41020: LD_INT 1
41022: PPUSH
41023: CALL_OW 275
41027: PUSH
41028: LD_VAR 0 14
41032: PUSH
41033: LD_INT 1
41035: ARRAY
41036: GREATEREQUAL
41037: PUSH
41038: LD_VAR 0 9
41042: PPUSH
41043: LD_INT 2
41045: PPUSH
41046: CALL_OW 275
41050: PUSH
41051: LD_VAR 0 14
41055: PUSH
41056: LD_INT 2
41058: ARRAY
41059: GREATEREQUAL
41060: AND
41061: PUSH
41062: LD_VAR 0 9
41066: PPUSH
41067: LD_INT 3
41069: PPUSH
41070: CALL_OW 275
41074: PUSH
41075: LD_VAR 0 14
41079: PUSH
41080: LD_INT 3
41082: ARRAY
41083: GREATEREQUAL
41084: AND
41085: IFFALSE 41097
// result := weapon ;
41087: LD_ADDR_VAR 0 3
41091: PUSH
41092: LD_VAR 0 18
41096: ST_TO_ADDR
// end ; end ;
41097: LD_VAR 0 3
41101: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
41102: LD_INT 0
41104: PPUSH
41105: PPUSH
// result := true ;
41106: LD_ADDR_VAR 0 3
41110: PUSH
41111: LD_INT 1
41113: ST_TO_ADDR
// if array1 = array2 then
41114: LD_VAR 0 1
41118: PUSH
41119: LD_VAR 0 2
41123: EQUAL
41124: IFFALSE 41184
// begin for i = 1 to array1 do
41126: LD_ADDR_VAR 0 4
41130: PUSH
41131: DOUBLE
41132: LD_INT 1
41134: DEC
41135: ST_TO_ADDR
41136: LD_VAR 0 1
41140: PUSH
41141: FOR_TO
41142: IFFALSE 41180
// if array1 [ i ] <> array2 [ i ] then
41144: LD_VAR 0 1
41148: PUSH
41149: LD_VAR 0 4
41153: ARRAY
41154: PUSH
41155: LD_VAR 0 2
41159: PUSH
41160: LD_VAR 0 4
41164: ARRAY
41165: NONEQUAL
41166: IFFALSE 41178
// begin result := false ;
41168: LD_ADDR_VAR 0 3
41172: PUSH
41173: LD_INT 0
41175: ST_TO_ADDR
// break ;
41176: GO 41180
// end ;
41178: GO 41141
41180: POP
41181: POP
// end else
41182: GO 41192
// result := false ;
41184: LD_ADDR_VAR 0 3
41188: PUSH
41189: LD_INT 0
41191: ST_TO_ADDR
// end ;
41192: LD_VAR 0 3
41196: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
41197: LD_INT 0
41199: PPUSH
41200: PPUSH
// if not array1 or not array2 then
41201: LD_VAR 0 1
41205: NOT
41206: PUSH
41207: LD_VAR 0 2
41211: NOT
41212: OR
41213: IFFALSE 41217
// exit ;
41215: GO 41281
// result := true ;
41217: LD_ADDR_VAR 0 3
41221: PUSH
41222: LD_INT 1
41224: ST_TO_ADDR
// for i = 1 to array1 do
41225: LD_ADDR_VAR 0 4
41229: PUSH
41230: DOUBLE
41231: LD_INT 1
41233: DEC
41234: ST_TO_ADDR
41235: LD_VAR 0 1
41239: PUSH
41240: FOR_TO
41241: IFFALSE 41279
// if array1 [ i ] <> array2 [ i ] then
41243: LD_VAR 0 1
41247: PUSH
41248: LD_VAR 0 4
41252: ARRAY
41253: PUSH
41254: LD_VAR 0 2
41258: PUSH
41259: LD_VAR 0 4
41263: ARRAY
41264: NONEQUAL
41265: IFFALSE 41277
// begin result := false ;
41267: LD_ADDR_VAR 0 3
41271: PUSH
41272: LD_INT 0
41274: ST_TO_ADDR
// break ;
41275: GO 41279
// end ;
41277: GO 41240
41279: POP
41280: POP
// end ;
41281: LD_VAR 0 3
41285: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
41286: LD_INT 0
41288: PPUSH
41289: PPUSH
41290: PPUSH
// pom := GetBase ( fac ) ;
41291: LD_ADDR_VAR 0 5
41295: PUSH
41296: LD_VAR 0 1
41300: PPUSH
41301: CALL_OW 274
41305: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
41306: LD_ADDR_VAR 0 4
41310: PUSH
41311: LD_VAR 0 2
41315: PUSH
41316: LD_INT 1
41318: ARRAY
41319: PPUSH
41320: LD_VAR 0 2
41324: PUSH
41325: LD_INT 2
41327: ARRAY
41328: PPUSH
41329: LD_VAR 0 2
41333: PUSH
41334: LD_INT 3
41336: ARRAY
41337: PPUSH
41338: LD_VAR 0 2
41342: PUSH
41343: LD_INT 4
41345: ARRAY
41346: PPUSH
41347: CALL_OW 449
41351: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41352: LD_ADDR_VAR 0 3
41356: PUSH
41357: LD_VAR 0 5
41361: PPUSH
41362: LD_INT 1
41364: PPUSH
41365: CALL_OW 275
41369: PUSH
41370: LD_VAR 0 4
41374: PUSH
41375: LD_INT 1
41377: ARRAY
41378: GREATEREQUAL
41379: PUSH
41380: LD_VAR 0 5
41384: PPUSH
41385: LD_INT 2
41387: PPUSH
41388: CALL_OW 275
41392: PUSH
41393: LD_VAR 0 4
41397: PUSH
41398: LD_INT 2
41400: ARRAY
41401: GREATEREQUAL
41402: AND
41403: PUSH
41404: LD_VAR 0 5
41408: PPUSH
41409: LD_INT 3
41411: PPUSH
41412: CALL_OW 275
41416: PUSH
41417: LD_VAR 0 4
41421: PUSH
41422: LD_INT 3
41424: ARRAY
41425: GREATEREQUAL
41426: AND
41427: ST_TO_ADDR
// end ;
41428: LD_VAR 0 3
41432: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
41433: LD_INT 0
41435: PPUSH
41436: PPUSH
41437: PPUSH
41438: PPUSH
// pom := GetBase ( building ) ;
41439: LD_ADDR_VAR 0 3
41443: PUSH
41444: LD_VAR 0 1
41448: PPUSH
41449: CALL_OW 274
41453: ST_TO_ADDR
// if not pom then
41454: LD_VAR 0 3
41458: NOT
41459: IFFALSE 41463
// exit ;
41461: GO 41633
// btype := GetBType ( building ) ;
41463: LD_ADDR_VAR 0 5
41467: PUSH
41468: LD_VAR 0 1
41472: PPUSH
41473: CALL_OW 266
41477: ST_TO_ADDR
// if btype = b_armoury then
41478: LD_VAR 0 5
41482: PUSH
41483: LD_INT 4
41485: EQUAL
41486: IFFALSE 41496
// btype := b_barracks ;
41488: LD_ADDR_VAR 0 5
41492: PUSH
41493: LD_INT 5
41495: ST_TO_ADDR
// if btype = b_depot then
41496: LD_VAR 0 5
41500: PUSH
41501: LD_INT 0
41503: EQUAL
41504: IFFALSE 41514
// btype := b_warehouse ;
41506: LD_ADDR_VAR 0 5
41510: PUSH
41511: LD_INT 1
41513: ST_TO_ADDR
// if btype = b_workshop then
41514: LD_VAR 0 5
41518: PUSH
41519: LD_INT 2
41521: EQUAL
41522: IFFALSE 41532
// btype := b_factory ;
41524: LD_ADDR_VAR 0 5
41528: PUSH
41529: LD_INT 3
41531: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
41532: LD_ADDR_VAR 0 4
41536: PUSH
41537: LD_VAR 0 5
41541: PPUSH
41542: LD_VAR 0 1
41546: PPUSH
41547: CALL_OW 248
41551: PPUSH
41552: CALL_OW 450
41556: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41557: LD_ADDR_VAR 0 2
41561: PUSH
41562: LD_VAR 0 3
41566: PPUSH
41567: LD_INT 1
41569: PPUSH
41570: CALL_OW 275
41574: PUSH
41575: LD_VAR 0 4
41579: PUSH
41580: LD_INT 1
41582: ARRAY
41583: GREATEREQUAL
41584: PUSH
41585: LD_VAR 0 3
41589: PPUSH
41590: LD_INT 2
41592: PPUSH
41593: CALL_OW 275
41597: PUSH
41598: LD_VAR 0 4
41602: PUSH
41603: LD_INT 2
41605: ARRAY
41606: GREATEREQUAL
41607: AND
41608: PUSH
41609: LD_VAR 0 3
41613: PPUSH
41614: LD_INT 3
41616: PPUSH
41617: CALL_OW 275
41621: PUSH
41622: LD_VAR 0 4
41626: PUSH
41627: LD_INT 3
41629: ARRAY
41630: GREATEREQUAL
41631: AND
41632: ST_TO_ADDR
// end ;
41633: LD_VAR 0 2
41637: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
41638: LD_INT 0
41640: PPUSH
41641: PPUSH
41642: PPUSH
// pom := GetBase ( building ) ;
41643: LD_ADDR_VAR 0 4
41647: PUSH
41648: LD_VAR 0 1
41652: PPUSH
41653: CALL_OW 274
41657: ST_TO_ADDR
// if not pom then
41658: LD_VAR 0 4
41662: NOT
41663: IFFALSE 41667
// exit ;
41665: GO 41768
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
41667: LD_ADDR_VAR 0 5
41671: PUSH
41672: LD_VAR 0 2
41676: PPUSH
41677: LD_VAR 0 1
41681: PPUSH
41682: CALL_OW 248
41686: PPUSH
41687: CALL_OW 450
41691: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41692: LD_ADDR_VAR 0 3
41696: PUSH
41697: LD_VAR 0 4
41701: PPUSH
41702: LD_INT 1
41704: PPUSH
41705: CALL_OW 275
41709: PUSH
41710: LD_VAR 0 5
41714: PUSH
41715: LD_INT 1
41717: ARRAY
41718: GREATEREQUAL
41719: PUSH
41720: LD_VAR 0 4
41724: PPUSH
41725: LD_INT 2
41727: PPUSH
41728: CALL_OW 275
41732: PUSH
41733: LD_VAR 0 5
41737: PUSH
41738: LD_INT 2
41740: ARRAY
41741: GREATEREQUAL
41742: AND
41743: PUSH
41744: LD_VAR 0 4
41748: PPUSH
41749: LD_INT 3
41751: PPUSH
41752: CALL_OW 275
41756: PUSH
41757: LD_VAR 0 5
41761: PUSH
41762: LD_INT 3
41764: ARRAY
41765: GREATEREQUAL
41766: AND
41767: ST_TO_ADDR
// end ;
41768: LD_VAR 0 3
41772: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
41773: LD_INT 0
41775: PPUSH
41776: PPUSH
41777: PPUSH
41778: PPUSH
41779: PPUSH
41780: PPUSH
41781: PPUSH
41782: PPUSH
41783: PPUSH
41784: PPUSH
41785: PPUSH
// result := false ;
41786: LD_ADDR_VAR 0 8
41790: PUSH
41791: LD_INT 0
41793: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
41794: LD_VAR 0 5
41798: NOT
41799: PUSH
41800: LD_VAR 0 1
41804: NOT
41805: OR
41806: PUSH
41807: LD_VAR 0 2
41811: NOT
41812: OR
41813: PUSH
41814: LD_VAR 0 3
41818: NOT
41819: OR
41820: IFFALSE 41824
// exit ;
41822: GO 42638
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
41824: LD_ADDR_VAR 0 14
41828: PUSH
41829: LD_VAR 0 1
41833: PPUSH
41834: LD_VAR 0 2
41838: PPUSH
41839: LD_VAR 0 3
41843: PPUSH
41844: LD_VAR 0 4
41848: PPUSH
41849: LD_VAR 0 5
41853: PUSH
41854: LD_INT 1
41856: ARRAY
41857: PPUSH
41858: CALL_OW 248
41862: PPUSH
41863: LD_INT 0
41865: PPUSH
41866: CALL 43891 0 6
41870: ST_TO_ADDR
// if not hexes then
41871: LD_VAR 0 14
41875: NOT
41876: IFFALSE 41880
// exit ;
41878: GO 42638
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
41880: LD_ADDR_VAR 0 17
41884: PUSH
41885: LD_VAR 0 5
41889: PPUSH
41890: LD_INT 22
41892: PUSH
41893: LD_VAR 0 13
41897: PPUSH
41898: CALL_OW 255
41902: PUSH
41903: EMPTY
41904: LIST
41905: LIST
41906: PUSH
41907: LD_INT 2
41909: PUSH
41910: LD_INT 30
41912: PUSH
41913: LD_INT 0
41915: PUSH
41916: EMPTY
41917: LIST
41918: LIST
41919: PUSH
41920: LD_INT 30
41922: PUSH
41923: LD_INT 1
41925: PUSH
41926: EMPTY
41927: LIST
41928: LIST
41929: PUSH
41930: EMPTY
41931: LIST
41932: LIST
41933: LIST
41934: PUSH
41935: EMPTY
41936: LIST
41937: LIST
41938: PPUSH
41939: CALL_OW 72
41943: ST_TO_ADDR
// for i = 1 to hexes do
41944: LD_ADDR_VAR 0 9
41948: PUSH
41949: DOUBLE
41950: LD_INT 1
41952: DEC
41953: ST_TO_ADDR
41954: LD_VAR 0 14
41958: PUSH
41959: FOR_TO
41960: IFFALSE 42636
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
41962: LD_ADDR_VAR 0 13
41966: PUSH
41967: LD_VAR 0 14
41971: PUSH
41972: LD_VAR 0 9
41976: ARRAY
41977: PUSH
41978: LD_INT 1
41980: ARRAY
41981: PPUSH
41982: LD_VAR 0 14
41986: PUSH
41987: LD_VAR 0 9
41991: ARRAY
41992: PUSH
41993: LD_INT 2
41995: ARRAY
41996: PPUSH
41997: CALL_OW 428
42001: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
42002: LD_VAR 0 14
42006: PUSH
42007: LD_VAR 0 9
42011: ARRAY
42012: PUSH
42013: LD_INT 1
42015: ARRAY
42016: PPUSH
42017: LD_VAR 0 14
42021: PUSH
42022: LD_VAR 0 9
42026: ARRAY
42027: PUSH
42028: LD_INT 2
42030: ARRAY
42031: PPUSH
42032: CALL_OW 351
42036: PUSH
42037: LD_VAR 0 14
42041: PUSH
42042: LD_VAR 0 9
42046: ARRAY
42047: PUSH
42048: LD_INT 1
42050: ARRAY
42051: PPUSH
42052: LD_VAR 0 14
42056: PUSH
42057: LD_VAR 0 9
42061: ARRAY
42062: PUSH
42063: LD_INT 2
42065: ARRAY
42066: PPUSH
42067: CALL_OW 488
42071: NOT
42072: OR
42073: PUSH
42074: LD_VAR 0 13
42078: PPUSH
42079: CALL_OW 247
42083: PUSH
42084: LD_INT 3
42086: EQUAL
42087: OR
42088: IFFALSE 42094
// exit ;
42090: POP
42091: POP
42092: GO 42638
// if not tmp then
42094: LD_VAR 0 13
42098: NOT
42099: IFFALSE 42103
// continue ;
42101: GO 41959
// result := true ;
42103: LD_ADDR_VAR 0 8
42107: PUSH
42108: LD_INT 1
42110: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
42111: LD_VAR 0 6
42115: PUSH
42116: LD_VAR 0 13
42120: PPUSH
42121: CALL_OW 247
42125: PUSH
42126: LD_INT 2
42128: EQUAL
42129: AND
42130: PUSH
42131: LD_VAR 0 13
42135: PPUSH
42136: CALL_OW 263
42140: PUSH
42141: LD_INT 1
42143: EQUAL
42144: AND
42145: IFFALSE 42309
// begin if IsDrivenBy ( tmp ) then
42147: LD_VAR 0 13
42151: PPUSH
42152: CALL_OW 311
42156: IFFALSE 42160
// continue ;
42158: GO 41959
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
42160: LD_VAR 0 6
42164: PPUSH
42165: LD_INT 3
42167: PUSH
42168: LD_INT 60
42170: PUSH
42171: EMPTY
42172: LIST
42173: PUSH
42174: EMPTY
42175: LIST
42176: LIST
42177: PUSH
42178: LD_INT 3
42180: PUSH
42181: LD_INT 55
42183: PUSH
42184: EMPTY
42185: LIST
42186: PUSH
42187: EMPTY
42188: LIST
42189: LIST
42190: PUSH
42191: EMPTY
42192: LIST
42193: LIST
42194: PPUSH
42195: CALL_OW 72
42199: IFFALSE 42307
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
42201: LD_ADDR_VAR 0 18
42205: PUSH
42206: LD_VAR 0 6
42210: PPUSH
42211: LD_INT 3
42213: PUSH
42214: LD_INT 60
42216: PUSH
42217: EMPTY
42218: LIST
42219: PUSH
42220: EMPTY
42221: LIST
42222: LIST
42223: PUSH
42224: LD_INT 3
42226: PUSH
42227: LD_INT 55
42229: PUSH
42230: EMPTY
42231: LIST
42232: PUSH
42233: EMPTY
42234: LIST
42235: LIST
42236: PUSH
42237: EMPTY
42238: LIST
42239: LIST
42240: PPUSH
42241: CALL_OW 72
42245: PUSH
42246: LD_INT 1
42248: ARRAY
42249: ST_TO_ADDR
// if IsInUnit ( driver ) then
42250: LD_VAR 0 18
42254: PPUSH
42255: CALL_OW 310
42259: IFFALSE 42270
// ComExit ( driver ) ;
42261: LD_VAR 0 18
42265: PPUSH
42266: CALL 67672 0 1
// AddComEnterUnit ( driver , tmp ) ;
42270: LD_VAR 0 18
42274: PPUSH
42275: LD_VAR 0 13
42279: PPUSH
42280: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
42284: LD_VAR 0 18
42288: PPUSH
42289: LD_VAR 0 7
42293: PPUSH
42294: CALL_OW 173
// AddComExitVehicle ( driver ) ;
42298: LD_VAR 0 18
42302: PPUSH
42303: CALL_OW 181
// end ; continue ;
42307: GO 41959
// end ; if not cleaners or not tmp in cleaners then
42309: LD_VAR 0 6
42313: NOT
42314: PUSH
42315: LD_VAR 0 13
42319: PUSH
42320: LD_VAR 0 6
42324: IN
42325: NOT
42326: OR
42327: IFFALSE 42634
// begin if dep then
42329: LD_VAR 0 17
42333: IFFALSE 42469
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
42335: LD_ADDR_VAR 0 16
42339: PUSH
42340: LD_VAR 0 17
42344: PUSH
42345: LD_INT 1
42347: ARRAY
42348: PPUSH
42349: CALL_OW 250
42353: PPUSH
42354: LD_VAR 0 17
42358: PUSH
42359: LD_INT 1
42361: ARRAY
42362: PPUSH
42363: CALL_OW 254
42367: PPUSH
42368: LD_INT 5
42370: PPUSH
42371: CALL_OW 272
42375: PUSH
42376: LD_VAR 0 17
42380: PUSH
42381: LD_INT 1
42383: ARRAY
42384: PPUSH
42385: CALL_OW 251
42389: PPUSH
42390: LD_VAR 0 17
42394: PUSH
42395: LD_INT 1
42397: ARRAY
42398: PPUSH
42399: CALL_OW 254
42403: PPUSH
42404: LD_INT 5
42406: PPUSH
42407: CALL_OW 273
42411: PUSH
42412: EMPTY
42413: LIST
42414: LIST
42415: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
42416: LD_VAR 0 16
42420: PUSH
42421: LD_INT 1
42423: ARRAY
42424: PPUSH
42425: LD_VAR 0 16
42429: PUSH
42430: LD_INT 2
42432: ARRAY
42433: PPUSH
42434: CALL_OW 488
42438: IFFALSE 42469
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
42440: LD_VAR 0 13
42444: PPUSH
42445: LD_VAR 0 16
42449: PUSH
42450: LD_INT 1
42452: ARRAY
42453: PPUSH
42454: LD_VAR 0 16
42458: PUSH
42459: LD_INT 2
42461: ARRAY
42462: PPUSH
42463: CALL_OW 111
// continue ;
42467: GO 41959
// end ; end ; r := GetDir ( tmp ) ;
42469: LD_ADDR_VAR 0 15
42473: PUSH
42474: LD_VAR 0 13
42478: PPUSH
42479: CALL_OW 254
42483: ST_TO_ADDR
// if r = 5 then
42484: LD_VAR 0 15
42488: PUSH
42489: LD_INT 5
42491: EQUAL
42492: IFFALSE 42502
// r := 0 ;
42494: LD_ADDR_VAR 0 15
42498: PUSH
42499: LD_INT 0
42501: ST_TO_ADDR
// for j = r to 5 do
42502: LD_ADDR_VAR 0 10
42506: PUSH
42507: DOUBLE
42508: LD_VAR 0 15
42512: DEC
42513: ST_TO_ADDR
42514: LD_INT 5
42516: PUSH
42517: FOR_TO
42518: IFFALSE 42632
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
42520: LD_ADDR_VAR 0 11
42524: PUSH
42525: LD_VAR 0 13
42529: PPUSH
42530: CALL_OW 250
42534: PPUSH
42535: LD_VAR 0 10
42539: PPUSH
42540: LD_INT 2
42542: PPUSH
42543: CALL_OW 272
42547: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
42548: LD_ADDR_VAR 0 12
42552: PUSH
42553: LD_VAR 0 13
42557: PPUSH
42558: CALL_OW 251
42562: PPUSH
42563: LD_VAR 0 10
42567: PPUSH
42568: LD_INT 2
42570: PPUSH
42571: CALL_OW 273
42575: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
42576: LD_VAR 0 11
42580: PPUSH
42581: LD_VAR 0 12
42585: PPUSH
42586: CALL_OW 488
42590: PUSH
42591: LD_VAR 0 11
42595: PPUSH
42596: LD_VAR 0 12
42600: PPUSH
42601: CALL_OW 428
42605: NOT
42606: AND
42607: IFFALSE 42630
// begin ComMoveXY ( tmp , _x , _y ) ;
42609: LD_VAR 0 13
42613: PPUSH
42614: LD_VAR 0 11
42618: PPUSH
42619: LD_VAR 0 12
42623: PPUSH
42624: CALL_OW 111
// break ;
42628: GO 42632
// end ; end ;
42630: GO 42517
42632: POP
42633: POP
// end ; end ;
42634: GO 41959
42636: POP
42637: POP
// end ;
42638: LD_VAR 0 8
42642: RET
// export function BuildingTechInvented ( side , btype ) ; begin
42643: LD_INT 0
42645: PPUSH
// result := true ;
42646: LD_ADDR_VAR 0 3
42650: PUSH
42651: LD_INT 1
42653: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
42654: LD_VAR 0 2
42658: PUSH
42659: LD_INT 24
42661: DOUBLE
42662: EQUAL
42663: IFTRUE 42673
42665: LD_INT 33
42667: DOUBLE
42668: EQUAL
42669: IFTRUE 42673
42671: GO 42698
42673: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
42674: LD_ADDR_VAR 0 3
42678: PUSH
42679: LD_INT 32
42681: PPUSH
42682: LD_VAR 0 1
42686: PPUSH
42687: CALL_OW 321
42691: PUSH
42692: LD_INT 2
42694: EQUAL
42695: ST_TO_ADDR
42696: GO 43014
42698: LD_INT 20
42700: DOUBLE
42701: EQUAL
42702: IFTRUE 42706
42704: GO 42731
42706: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
42707: LD_ADDR_VAR 0 3
42711: PUSH
42712: LD_INT 6
42714: PPUSH
42715: LD_VAR 0 1
42719: PPUSH
42720: CALL_OW 321
42724: PUSH
42725: LD_INT 2
42727: EQUAL
42728: ST_TO_ADDR
42729: GO 43014
42731: LD_INT 22
42733: DOUBLE
42734: EQUAL
42735: IFTRUE 42745
42737: LD_INT 36
42739: DOUBLE
42740: EQUAL
42741: IFTRUE 42745
42743: GO 42770
42745: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
42746: LD_ADDR_VAR 0 3
42750: PUSH
42751: LD_INT 15
42753: PPUSH
42754: LD_VAR 0 1
42758: PPUSH
42759: CALL_OW 321
42763: PUSH
42764: LD_INT 2
42766: EQUAL
42767: ST_TO_ADDR
42768: GO 43014
42770: LD_INT 30
42772: DOUBLE
42773: EQUAL
42774: IFTRUE 42778
42776: GO 42803
42778: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
42779: LD_ADDR_VAR 0 3
42783: PUSH
42784: LD_INT 20
42786: PPUSH
42787: LD_VAR 0 1
42791: PPUSH
42792: CALL_OW 321
42796: PUSH
42797: LD_INT 2
42799: EQUAL
42800: ST_TO_ADDR
42801: GO 43014
42803: LD_INT 28
42805: DOUBLE
42806: EQUAL
42807: IFTRUE 42817
42809: LD_INT 21
42811: DOUBLE
42812: EQUAL
42813: IFTRUE 42817
42815: GO 42842
42817: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
42818: LD_ADDR_VAR 0 3
42822: PUSH
42823: LD_INT 21
42825: PPUSH
42826: LD_VAR 0 1
42830: PPUSH
42831: CALL_OW 321
42835: PUSH
42836: LD_INT 2
42838: EQUAL
42839: ST_TO_ADDR
42840: GO 43014
42842: LD_INT 16
42844: DOUBLE
42845: EQUAL
42846: IFTRUE 42850
42848: GO 42875
42850: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
42851: LD_ADDR_VAR 0 3
42855: PUSH
42856: LD_INT 84
42858: PPUSH
42859: LD_VAR 0 1
42863: PPUSH
42864: CALL_OW 321
42868: PUSH
42869: LD_INT 2
42871: EQUAL
42872: ST_TO_ADDR
42873: GO 43014
42875: LD_INT 19
42877: DOUBLE
42878: EQUAL
42879: IFTRUE 42889
42881: LD_INT 23
42883: DOUBLE
42884: EQUAL
42885: IFTRUE 42889
42887: GO 42914
42889: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
42890: LD_ADDR_VAR 0 3
42894: PUSH
42895: LD_INT 83
42897: PPUSH
42898: LD_VAR 0 1
42902: PPUSH
42903: CALL_OW 321
42907: PUSH
42908: LD_INT 2
42910: EQUAL
42911: ST_TO_ADDR
42912: GO 43014
42914: LD_INT 17
42916: DOUBLE
42917: EQUAL
42918: IFTRUE 42922
42920: GO 42947
42922: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
42923: LD_ADDR_VAR 0 3
42927: PUSH
42928: LD_INT 39
42930: PPUSH
42931: LD_VAR 0 1
42935: PPUSH
42936: CALL_OW 321
42940: PUSH
42941: LD_INT 2
42943: EQUAL
42944: ST_TO_ADDR
42945: GO 43014
42947: LD_INT 18
42949: DOUBLE
42950: EQUAL
42951: IFTRUE 42955
42953: GO 42980
42955: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
42956: LD_ADDR_VAR 0 3
42960: PUSH
42961: LD_INT 40
42963: PPUSH
42964: LD_VAR 0 1
42968: PPUSH
42969: CALL_OW 321
42973: PUSH
42974: LD_INT 2
42976: EQUAL
42977: ST_TO_ADDR
42978: GO 43014
42980: LD_INT 27
42982: DOUBLE
42983: EQUAL
42984: IFTRUE 42988
42986: GO 43013
42988: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
42989: LD_ADDR_VAR 0 3
42993: PUSH
42994: LD_INT 35
42996: PPUSH
42997: LD_VAR 0 1
43001: PPUSH
43002: CALL_OW 321
43006: PUSH
43007: LD_INT 2
43009: EQUAL
43010: ST_TO_ADDR
43011: GO 43014
43013: POP
// end ;
43014: LD_VAR 0 3
43018: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
43019: LD_INT 0
43021: PPUSH
43022: PPUSH
43023: PPUSH
43024: PPUSH
43025: PPUSH
43026: PPUSH
43027: PPUSH
43028: PPUSH
43029: PPUSH
43030: PPUSH
43031: PPUSH
// result := false ;
43032: LD_ADDR_VAR 0 6
43036: PUSH
43037: LD_INT 0
43039: ST_TO_ADDR
// if btype = b_depot then
43040: LD_VAR 0 2
43044: PUSH
43045: LD_INT 0
43047: EQUAL
43048: IFFALSE 43060
// begin result := true ;
43050: LD_ADDR_VAR 0 6
43054: PUSH
43055: LD_INT 1
43057: ST_TO_ADDR
// exit ;
43058: GO 43886
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
43060: LD_VAR 0 1
43064: NOT
43065: PUSH
43066: LD_VAR 0 1
43070: PPUSH
43071: CALL_OW 266
43075: PUSH
43076: LD_INT 0
43078: PUSH
43079: LD_INT 1
43081: PUSH
43082: EMPTY
43083: LIST
43084: LIST
43085: IN
43086: NOT
43087: OR
43088: PUSH
43089: LD_VAR 0 2
43093: NOT
43094: OR
43095: PUSH
43096: LD_VAR 0 5
43100: PUSH
43101: LD_INT 0
43103: PUSH
43104: LD_INT 1
43106: PUSH
43107: LD_INT 2
43109: PUSH
43110: LD_INT 3
43112: PUSH
43113: LD_INT 4
43115: PUSH
43116: LD_INT 5
43118: PUSH
43119: EMPTY
43120: LIST
43121: LIST
43122: LIST
43123: LIST
43124: LIST
43125: LIST
43126: IN
43127: NOT
43128: OR
43129: PUSH
43130: LD_VAR 0 3
43134: PPUSH
43135: LD_VAR 0 4
43139: PPUSH
43140: CALL_OW 488
43144: NOT
43145: OR
43146: IFFALSE 43150
// exit ;
43148: GO 43886
// side := GetSide ( depot ) ;
43150: LD_ADDR_VAR 0 9
43154: PUSH
43155: LD_VAR 0 1
43159: PPUSH
43160: CALL_OW 255
43164: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
43165: LD_VAR 0 9
43169: PPUSH
43170: LD_VAR 0 2
43174: PPUSH
43175: CALL 42643 0 2
43179: NOT
43180: IFFALSE 43184
// exit ;
43182: GO 43886
// pom := GetBase ( depot ) ;
43184: LD_ADDR_VAR 0 10
43188: PUSH
43189: LD_VAR 0 1
43193: PPUSH
43194: CALL_OW 274
43198: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
43199: LD_ADDR_VAR 0 11
43203: PUSH
43204: LD_VAR 0 2
43208: PPUSH
43209: LD_VAR 0 1
43213: PPUSH
43214: CALL_OW 248
43218: PPUSH
43219: CALL_OW 450
43223: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
43224: LD_VAR 0 10
43228: PPUSH
43229: LD_INT 1
43231: PPUSH
43232: CALL_OW 275
43236: PUSH
43237: LD_VAR 0 11
43241: PUSH
43242: LD_INT 1
43244: ARRAY
43245: GREATEREQUAL
43246: PUSH
43247: LD_VAR 0 10
43251: PPUSH
43252: LD_INT 2
43254: PPUSH
43255: CALL_OW 275
43259: PUSH
43260: LD_VAR 0 11
43264: PUSH
43265: LD_INT 2
43267: ARRAY
43268: GREATEREQUAL
43269: AND
43270: PUSH
43271: LD_VAR 0 10
43275: PPUSH
43276: LD_INT 3
43278: PPUSH
43279: CALL_OW 275
43283: PUSH
43284: LD_VAR 0 11
43288: PUSH
43289: LD_INT 3
43291: ARRAY
43292: GREATEREQUAL
43293: AND
43294: NOT
43295: IFFALSE 43299
// exit ;
43297: GO 43886
// if GetBType ( depot ) = b_depot then
43299: LD_VAR 0 1
43303: PPUSH
43304: CALL_OW 266
43308: PUSH
43309: LD_INT 0
43311: EQUAL
43312: IFFALSE 43324
// dist := 28 else
43314: LD_ADDR_VAR 0 14
43318: PUSH
43319: LD_INT 28
43321: ST_TO_ADDR
43322: GO 43332
// dist := 36 ;
43324: LD_ADDR_VAR 0 14
43328: PUSH
43329: LD_INT 36
43331: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
43332: LD_VAR 0 1
43336: PPUSH
43337: LD_VAR 0 3
43341: PPUSH
43342: LD_VAR 0 4
43346: PPUSH
43347: CALL_OW 297
43351: PUSH
43352: LD_VAR 0 14
43356: GREATER
43357: IFFALSE 43361
// exit ;
43359: GO 43886
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
43361: LD_ADDR_VAR 0 12
43365: PUSH
43366: LD_VAR 0 2
43370: PPUSH
43371: LD_VAR 0 3
43375: PPUSH
43376: LD_VAR 0 4
43380: PPUSH
43381: LD_VAR 0 5
43385: PPUSH
43386: LD_VAR 0 1
43390: PPUSH
43391: CALL_OW 248
43395: PPUSH
43396: LD_INT 0
43398: PPUSH
43399: CALL 43891 0 6
43403: ST_TO_ADDR
// if not hexes then
43404: LD_VAR 0 12
43408: NOT
43409: IFFALSE 43413
// exit ;
43411: GO 43886
// hex := GetHexInfo ( x , y ) ;
43413: LD_ADDR_VAR 0 15
43417: PUSH
43418: LD_VAR 0 3
43422: PPUSH
43423: LD_VAR 0 4
43427: PPUSH
43428: CALL_OW 546
43432: ST_TO_ADDR
// if hex [ 1 ] then
43433: LD_VAR 0 15
43437: PUSH
43438: LD_INT 1
43440: ARRAY
43441: IFFALSE 43445
// exit ;
43443: GO 43886
// height := hex [ 2 ] ;
43445: LD_ADDR_VAR 0 13
43449: PUSH
43450: LD_VAR 0 15
43454: PUSH
43455: LD_INT 2
43457: ARRAY
43458: ST_TO_ADDR
// for i = 1 to hexes do
43459: LD_ADDR_VAR 0 7
43463: PUSH
43464: DOUBLE
43465: LD_INT 1
43467: DEC
43468: ST_TO_ADDR
43469: LD_VAR 0 12
43473: PUSH
43474: FOR_TO
43475: IFFALSE 43805
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
43477: LD_VAR 0 12
43481: PUSH
43482: LD_VAR 0 7
43486: ARRAY
43487: PUSH
43488: LD_INT 1
43490: ARRAY
43491: PPUSH
43492: LD_VAR 0 12
43496: PUSH
43497: LD_VAR 0 7
43501: ARRAY
43502: PUSH
43503: LD_INT 2
43505: ARRAY
43506: PPUSH
43507: CALL_OW 488
43511: NOT
43512: PUSH
43513: LD_VAR 0 12
43517: PUSH
43518: LD_VAR 0 7
43522: ARRAY
43523: PUSH
43524: LD_INT 1
43526: ARRAY
43527: PPUSH
43528: LD_VAR 0 12
43532: PUSH
43533: LD_VAR 0 7
43537: ARRAY
43538: PUSH
43539: LD_INT 2
43541: ARRAY
43542: PPUSH
43543: CALL_OW 428
43547: PUSH
43548: LD_INT 0
43550: GREATER
43551: OR
43552: PUSH
43553: LD_VAR 0 12
43557: PUSH
43558: LD_VAR 0 7
43562: ARRAY
43563: PUSH
43564: LD_INT 1
43566: ARRAY
43567: PPUSH
43568: LD_VAR 0 12
43572: PUSH
43573: LD_VAR 0 7
43577: ARRAY
43578: PUSH
43579: LD_INT 2
43581: ARRAY
43582: PPUSH
43583: CALL_OW 351
43587: OR
43588: IFFALSE 43594
// exit ;
43590: POP
43591: POP
43592: GO 43886
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
43594: LD_ADDR_VAR 0 8
43598: PUSH
43599: LD_VAR 0 12
43603: PUSH
43604: LD_VAR 0 7
43608: ARRAY
43609: PUSH
43610: LD_INT 1
43612: ARRAY
43613: PPUSH
43614: LD_VAR 0 12
43618: PUSH
43619: LD_VAR 0 7
43623: ARRAY
43624: PUSH
43625: LD_INT 2
43627: ARRAY
43628: PPUSH
43629: CALL_OW 546
43633: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
43634: LD_VAR 0 8
43638: PUSH
43639: LD_INT 1
43641: ARRAY
43642: PUSH
43643: LD_VAR 0 8
43647: PUSH
43648: LD_INT 2
43650: ARRAY
43651: PUSH
43652: LD_VAR 0 13
43656: PUSH
43657: LD_INT 2
43659: PLUS
43660: GREATER
43661: OR
43662: PUSH
43663: LD_VAR 0 8
43667: PUSH
43668: LD_INT 2
43670: ARRAY
43671: PUSH
43672: LD_VAR 0 13
43676: PUSH
43677: LD_INT 2
43679: MINUS
43680: LESS
43681: OR
43682: PUSH
43683: LD_VAR 0 8
43687: PUSH
43688: LD_INT 3
43690: ARRAY
43691: PUSH
43692: LD_INT 0
43694: PUSH
43695: LD_INT 8
43697: PUSH
43698: LD_INT 9
43700: PUSH
43701: LD_INT 10
43703: PUSH
43704: LD_INT 11
43706: PUSH
43707: LD_INT 12
43709: PUSH
43710: LD_INT 13
43712: PUSH
43713: LD_INT 16
43715: PUSH
43716: LD_INT 17
43718: PUSH
43719: LD_INT 18
43721: PUSH
43722: LD_INT 19
43724: PUSH
43725: LD_INT 20
43727: PUSH
43728: LD_INT 21
43730: PUSH
43731: EMPTY
43732: LIST
43733: LIST
43734: LIST
43735: LIST
43736: LIST
43737: LIST
43738: LIST
43739: LIST
43740: LIST
43741: LIST
43742: LIST
43743: LIST
43744: LIST
43745: IN
43746: NOT
43747: OR
43748: PUSH
43749: LD_VAR 0 8
43753: PUSH
43754: LD_INT 5
43756: ARRAY
43757: NOT
43758: OR
43759: PUSH
43760: LD_VAR 0 8
43764: PUSH
43765: LD_INT 6
43767: ARRAY
43768: PUSH
43769: LD_INT 1
43771: PUSH
43772: LD_INT 2
43774: PUSH
43775: LD_INT 7
43777: PUSH
43778: LD_INT 9
43780: PUSH
43781: LD_INT 10
43783: PUSH
43784: LD_INT 11
43786: PUSH
43787: EMPTY
43788: LIST
43789: LIST
43790: LIST
43791: LIST
43792: LIST
43793: LIST
43794: IN
43795: NOT
43796: OR
43797: IFFALSE 43803
// exit ;
43799: POP
43800: POP
43801: GO 43886
// end ;
43803: GO 43474
43805: POP
43806: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
43807: LD_VAR 0 9
43811: PPUSH
43812: LD_VAR 0 3
43816: PPUSH
43817: LD_VAR 0 4
43821: PPUSH
43822: LD_INT 20
43824: PPUSH
43825: CALL 35809 0 4
43829: PUSH
43830: LD_INT 4
43832: ARRAY
43833: IFFALSE 43837
// exit ;
43835: GO 43886
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
43837: LD_VAR 0 2
43841: PUSH
43842: LD_INT 29
43844: PUSH
43845: LD_INT 30
43847: PUSH
43848: EMPTY
43849: LIST
43850: LIST
43851: IN
43852: PUSH
43853: LD_VAR 0 3
43857: PPUSH
43858: LD_VAR 0 4
43862: PPUSH
43863: LD_VAR 0 9
43867: PPUSH
43868: CALL_OW 440
43872: NOT
43873: AND
43874: IFFALSE 43878
// exit ;
43876: GO 43886
// result := true ;
43878: LD_ADDR_VAR 0 6
43882: PUSH
43883: LD_INT 1
43885: ST_TO_ADDR
// end ;
43886: LD_VAR 0 6
43890: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
43891: LD_INT 0
43893: PPUSH
43894: PPUSH
43895: PPUSH
43896: PPUSH
43897: PPUSH
43898: PPUSH
43899: PPUSH
43900: PPUSH
43901: PPUSH
43902: PPUSH
43903: PPUSH
43904: PPUSH
43905: PPUSH
43906: PPUSH
43907: PPUSH
43908: PPUSH
43909: PPUSH
43910: PPUSH
43911: PPUSH
43912: PPUSH
43913: PPUSH
43914: PPUSH
43915: PPUSH
43916: PPUSH
43917: PPUSH
43918: PPUSH
43919: PPUSH
43920: PPUSH
43921: PPUSH
43922: PPUSH
43923: PPUSH
43924: PPUSH
43925: PPUSH
43926: PPUSH
43927: PPUSH
43928: PPUSH
43929: PPUSH
43930: PPUSH
43931: PPUSH
43932: PPUSH
43933: PPUSH
43934: PPUSH
43935: PPUSH
43936: PPUSH
43937: PPUSH
43938: PPUSH
43939: PPUSH
43940: PPUSH
43941: PPUSH
43942: PPUSH
43943: PPUSH
43944: PPUSH
43945: PPUSH
43946: PPUSH
43947: PPUSH
43948: PPUSH
43949: PPUSH
43950: PPUSH
// result = [ ] ;
43951: LD_ADDR_VAR 0 7
43955: PUSH
43956: EMPTY
43957: ST_TO_ADDR
// temp_list = [ ] ;
43958: LD_ADDR_VAR 0 9
43962: PUSH
43963: EMPTY
43964: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
43965: LD_VAR 0 4
43969: PUSH
43970: LD_INT 0
43972: PUSH
43973: LD_INT 1
43975: PUSH
43976: LD_INT 2
43978: PUSH
43979: LD_INT 3
43981: PUSH
43982: LD_INT 4
43984: PUSH
43985: LD_INT 5
43987: PUSH
43988: EMPTY
43989: LIST
43990: LIST
43991: LIST
43992: LIST
43993: LIST
43994: LIST
43995: IN
43996: NOT
43997: PUSH
43998: LD_VAR 0 1
44002: PUSH
44003: LD_INT 0
44005: PUSH
44006: LD_INT 1
44008: PUSH
44009: EMPTY
44010: LIST
44011: LIST
44012: IN
44013: PUSH
44014: LD_VAR 0 5
44018: PUSH
44019: LD_INT 1
44021: PUSH
44022: LD_INT 2
44024: PUSH
44025: LD_INT 3
44027: PUSH
44028: EMPTY
44029: LIST
44030: LIST
44031: LIST
44032: IN
44033: NOT
44034: AND
44035: OR
44036: IFFALSE 44040
// exit ;
44038: GO 62431
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
44040: LD_VAR 0 1
44044: PUSH
44045: LD_INT 6
44047: PUSH
44048: LD_INT 7
44050: PUSH
44051: LD_INT 8
44053: PUSH
44054: LD_INT 13
44056: PUSH
44057: LD_INT 12
44059: PUSH
44060: LD_INT 15
44062: PUSH
44063: LD_INT 11
44065: PUSH
44066: LD_INT 14
44068: PUSH
44069: LD_INT 10
44071: PUSH
44072: EMPTY
44073: LIST
44074: LIST
44075: LIST
44076: LIST
44077: LIST
44078: LIST
44079: LIST
44080: LIST
44081: LIST
44082: IN
44083: IFFALSE 44093
// btype = b_lab ;
44085: LD_ADDR_VAR 0 1
44089: PUSH
44090: LD_INT 6
44092: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
44093: LD_VAR 0 6
44097: PUSH
44098: LD_INT 0
44100: PUSH
44101: LD_INT 1
44103: PUSH
44104: LD_INT 2
44106: PUSH
44107: EMPTY
44108: LIST
44109: LIST
44110: LIST
44111: IN
44112: NOT
44113: PUSH
44114: LD_VAR 0 1
44118: PUSH
44119: LD_INT 0
44121: PUSH
44122: LD_INT 1
44124: PUSH
44125: LD_INT 2
44127: PUSH
44128: LD_INT 3
44130: PUSH
44131: LD_INT 6
44133: PUSH
44134: LD_INT 36
44136: PUSH
44137: LD_INT 4
44139: PUSH
44140: LD_INT 5
44142: PUSH
44143: LD_INT 31
44145: PUSH
44146: LD_INT 32
44148: PUSH
44149: LD_INT 33
44151: PUSH
44152: EMPTY
44153: LIST
44154: LIST
44155: LIST
44156: LIST
44157: LIST
44158: LIST
44159: LIST
44160: LIST
44161: LIST
44162: LIST
44163: LIST
44164: IN
44165: NOT
44166: PUSH
44167: LD_VAR 0 6
44171: PUSH
44172: LD_INT 1
44174: EQUAL
44175: AND
44176: OR
44177: PUSH
44178: LD_VAR 0 1
44182: PUSH
44183: LD_INT 2
44185: PUSH
44186: LD_INT 3
44188: PUSH
44189: EMPTY
44190: LIST
44191: LIST
44192: IN
44193: NOT
44194: PUSH
44195: LD_VAR 0 6
44199: PUSH
44200: LD_INT 2
44202: EQUAL
44203: AND
44204: OR
44205: IFFALSE 44215
// mode = 0 ;
44207: LD_ADDR_VAR 0 6
44211: PUSH
44212: LD_INT 0
44214: ST_TO_ADDR
// case mode of 0 :
44215: LD_VAR 0 6
44219: PUSH
44220: LD_INT 0
44222: DOUBLE
44223: EQUAL
44224: IFTRUE 44228
44226: GO 55681
44228: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
44229: LD_ADDR_VAR 0 11
44233: PUSH
44234: LD_INT 0
44236: PUSH
44237: LD_INT 0
44239: PUSH
44240: EMPTY
44241: LIST
44242: LIST
44243: PUSH
44244: LD_INT 0
44246: PUSH
44247: LD_INT 1
44249: NEG
44250: PUSH
44251: EMPTY
44252: LIST
44253: LIST
44254: PUSH
44255: LD_INT 1
44257: PUSH
44258: LD_INT 0
44260: PUSH
44261: EMPTY
44262: LIST
44263: LIST
44264: PUSH
44265: LD_INT 1
44267: PUSH
44268: LD_INT 1
44270: PUSH
44271: EMPTY
44272: LIST
44273: LIST
44274: PUSH
44275: LD_INT 0
44277: PUSH
44278: LD_INT 1
44280: PUSH
44281: EMPTY
44282: LIST
44283: LIST
44284: PUSH
44285: LD_INT 1
44287: NEG
44288: PUSH
44289: LD_INT 0
44291: PUSH
44292: EMPTY
44293: LIST
44294: LIST
44295: PUSH
44296: LD_INT 1
44298: NEG
44299: PUSH
44300: LD_INT 1
44302: NEG
44303: PUSH
44304: EMPTY
44305: LIST
44306: LIST
44307: PUSH
44308: LD_INT 1
44310: NEG
44311: PUSH
44312: LD_INT 2
44314: NEG
44315: PUSH
44316: EMPTY
44317: LIST
44318: LIST
44319: PUSH
44320: LD_INT 0
44322: PUSH
44323: LD_INT 2
44325: NEG
44326: PUSH
44327: EMPTY
44328: LIST
44329: LIST
44330: PUSH
44331: LD_INT 1
44333: PUSH
44334: LD_INT 1
44336: NEG
44337: PUSH
44338: EMPTY
44339: LIST
44340: LIST
44341: PUSH
44342: LD_INT 1
44344: PUSH
44345: LD_INT 2
44347: PUSH
44348: EMPTY
44349: LIST
44350: LIST
44351: PUSH
44352: LD_INT 0
44354: PUSH
44355: LD_INT 2
44357: PUSH
44358: EMPTY
44359: LIST
44360: LIST
44361: PUSH
44362: LD_INT 1
44364: NEG
44365: PUSH
44366: LD_INT 1
44368: PUSH
44369: EMPTY
44370: LIST
44371: LIST
44372: PUSH
44373: LD_INT 1
44375: PUSH
44376: LD_INT 3
44378: PUSH
44379: EMPTY
44380: LIST
44381: LIST
44382: PUSH
44383: LD_INT 0
44385: PUSH
44386: LD_INT 3
44388: PUSH
44389: EMPTY
44390: LIST
44391: LIST
44392: PUSH
44393: LD_INT 1
44395: NEG
44396: PUSH
44397: LD_INT 2
44399: PUSH
44400: EMPTY
44401: LIST
44402: LIST
44403: PUSH
44404: EMPTY
44405: LIST
44406: LIST
44407: LIST
44408: LIST
44409: LIST
44410: LIST
44411: LIST
44412: LIST
44413: LIST
44414: LIST
44415: LIST
44416: LIST
44417: LIST
44418: LIST
44419: LIST
44420: LIST
44421: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44422: LD_ADDR_VAR 0 12
44426: PUSH
44427: LD_INT 0
44429: PUSH
44430: LD_INT 0
44432: PUSH
44433: EMPTY
44434: LIST
44435: LIST
44436: PUSH
44437: LD_INT 0
44439: PUSH
44440: LD_INT 1
44442: NEG
44443: PUSH
44444: EMPTY
44445: LIST
44446: LIST
44447: PUSH
44448: LD_INT 1
44450: PUSH
44451: LD_INT 0
44453: PUSH
44454: EMPTY
44455: LIST
44456: LIST
44457: PUSH
44458: LD_INT 1
44460: PUSH
44461: LD_INT 1
44463: PUSH
44464: EMPTY
44465: LIST
44466: LIST
44467: PUSH
44468: LD_INT 0
44470: PUSH
44471: LD_INT 1
44473: PUSH
44474: EMPTY
44475: LIST
44476: LIST
44477: PUSH
44478: LD_INT 1
44480: NEG
44481: PUSH
44482: LD_INT 0
44484: PUSH
44485: EMPTY
44486: LIST
44487: LIST
44488: PUSH
44489: LD_INT 1
44491: NEG
44492: PUSH
44493: LD_INT 1
44495: NEG
44496: PUSH
44497: EMPTY
44498: LIST
44499: LIST
44500: PUSH
44501: LD_INT 1
44503: PUSH
44504: LD_INT 1
44506: NEG
44507: PUSH
44508: EMPTY
44509: LIST
44510: LIST
44511: PUSH
44512: LD_INT 2
44514: PUSH
44515: LD_INT 0
44517: PUSH
44518: EMPTY
44519: LIST
44520: LIST
44521: PUSH
44522: LD_INT 2
44524: PUSH
44525: LD_INT 1
44527: PUSH
44528: EMPTY
44529: LIST
44530: LIST
44531: PUSH
44532: LD_INT 1
44534: NEG
44535: PUSH
44536: LD_INT 1
44538: PUSH
44539: EMPTY
44540: LIST
44541: LIST
44542: PUSH
44543: LD_INT 2
44545: NEG
44546: PUSH
44547: LD_INT 0
44549: PUSH
44550: EMPTY
44551: LIST
44552: LIST
44553: PUSH
44554: LD_INT 2
44556: NEG
44557: PUSH
44558: LD_INT 1
44560: NEG
44561: PUSH
44562: EMPTY
44563: LIST
44564: LIST
44565: PUSH
44566: LD_INT 2
44568: NEG
44569: PUSH
44570: LD_INT 1
44572: PUSH
44573: EMPTY
44574: LIST
44575: LIST
44576: PUSH
44577: LD_INT 3
44579: NEG
44580: PUSH
44581: LD_INT 0
44583: PUSH
44584: EMPTY
44585: LIST
44586: LIST
44587: PUSH
44588: LD_INT 3
44590: NEG
44591: PUSH
44592: LD_INT 1
44594: NEG
44595: PUSH
44596: EMPTY
44597: LIST
44598: LIST
44599: PUSH
44600: EMPTY
44601: LIST
44602: LIST
44603: LIST
44604: LIST
44605: LIST
44606: LIST
44607: LIST
44608: LIST
44609: LIST
44610: LIST
44611: LIST
44612: LIST
44613: LIST
44614: LIST
44615: LIST
44616: LIST
44617: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44618: LD_ADDR_VAR 0 13
44622: PUSH
44623: LD_INT 0
44625: PUSH
44626: LD_INT 0
44628: PUSH
44629: EMPTY
44630: LIST
44631: LIST
44632: PUSH
44633: LD_INT 0
44635: PUSH
44636: LD_INT 1
44638: NEG
44639: PUSH
44640: EMPTY
44641: LIST
44642: LIST
44643: PUSH
44644: LD_INT 1
44646: PUSH
44647: LD_INT 0
44649: PUSH
44650: EMPTY
44651: LIST
44652: LIST
44653: PUSH
44654: LD_INT 1
44656: PUSH
44657: LD_INT 1
44659: PUSH
44660: EMPTY
44661: LIST
44662: LIST
44663: PUSH
44664: LD_INT 0
44666: PUSH
44667: LD_INT 1
44669: PUSH
44670: EMPTY
44671: LIST
44672: LIST
44673: PUSH
44674: LD_INT 1
44676: NEG
44677: PUSH
44678: LD_INT 0
44680: PUSH
44681: EMPTY
44682: LIST
44683: LIST
44684: PUSH
44685: LD_INT 1
44687: NEG
44688: PUSH
44689: LD_INT 1
44691: NEG
44692: PUSH
44693: EMPTY
44694: LIST
44695: LIST
44696: PUSH
44697: LD_INT 1
44699: NEG
44700: PUSH
44701: LD_INT 2
44703: NEG
44704: PUSH
44705: EMPTY
44706: LIST
44707: LIST
44708: PUSH
44709: LD_INT 2
44711: PUSH
44712: LD_INT 1
44714: PUSH
44715: EMPTY
44716: LIST
44717: LIST
44718: PUSH
44719: LD_INT 2
44721: PUSH
44722: LD_INT 2
44724: PUSH
44725: EMPTY
44726: LIST
44727: LIST
44728: PUSH
44729: LD_INT 1
44731: PUSH
44732: LD_INT 2
44734: PUSH
44735: EMPTY
44736: LIST
44737: LIST
44738: PUSH
44739: LD_INT 2
44741: NEG
44742: PUSH
44743: LD_INT 1
44745: NEG
44746: PUSH
44747: EMPTY
44748: LIST
44749: LIST
44750: PUSH
44751: LD_INT 2
44753: NEG
44754: PUSH
44755: LD_INT 2
44757: NEG
44758: PUSH
44759: EMPTY
44760: LIST
44761: LIST
44762: PUSH
44763: LD_INT 2
44765: NEG
44766: PUSH
44767: LD_INT 3
44769: NEG
44770: PUSH
44771: EMPTY
44772: LIST
44773: LIST
44774: PUSH
44775: LD_INT 3
44777: NEG
44778: PUSH
44779: LD_INT 2
44781: NEG
44782: PUSH
44783: EMPTY
44784: LIST
44785: LIST
44786: PUSH
44787: LD_INT 3
44789: NEG
44790: PUSH
44791: LD_INT 3
44793: NEG
44794: PUSH
44795: EMPTY
44796: LIST
44797: LIST
44798: PUSH
44799: EMPTY
44800: LIST
44801: LIST
44802: LIST
44803: LIST
44804: LIST
44805: LIST
44806: LIST
44807: LIST
44808: LIST
44809: LIST
44810: LIST
44811: LIST
44812: LIST
44813: LIST
44814: LIST
44815: LIST
44816: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
44817: LD_ADDR_VAR 0 14
44821: PUSH
44822: LD_INT 0
44824: PUSH
44825: LD_INT 0
44827: PUSH
44828: EMPTY
44829: LIST
44830: LIST
44831: PUSH
44832: LD_INT 0
44834: PUSH
44835: LD_INT 1
44837: NEG
44838: PUSH
44839: EMPTY
44840: LIST
44841: LIST
44842: PUSH
44843: LD_INT 1
44845: PUSH
44846: LD_INT 0
44848: PUSH
44849: EMPTY
44850: LIST
44851: LIST
44852: PUSH
44853: LD_INT 1
44855: PUSH
44856: LD_INT 1
44858: PUSH
44859: EMPTY
44860: LIST
44861: LIST
44862: PUSH
44863: LD_INT 0
44865: PUSH
44866: LD_INT 1
44868: PUSH
44869: EMPTY
44870: LIST
44871: LIST
44872: PUSH
44873: LD_INT 1
44875: NEG
44876: PUSH
44877: LD_INT 0
44879: PUSH
44880: EMPTY
44881: LIST
44882: LIST
44883: PUSH
44884: LD_INT 1
44886: NEG
44887: PUSH
44888: LD_INT 1
44890: NEG
44891: PUSH
44892: EMPTY
44893: LIST
44894: LIST
44895: PUSH
44896: LD_INT 1
44898: NEG
44899: PUSH
44900: LD_INT 2
44902: NEG
44903: PUSH
44904: EMPTY
44905: LIST
44906: LIST
44907: PUSH
44908: LD_INT 0
44910: PUSH
44911: LD_INT 2
44913: NEG
44914: PUSH
44915: EMPTY
44916: LIST
44917: LIST
44918: PUSH
44919: LD_INT 1
44921: PUSH
44922: LD_INT 1
44924: NEG
44925: PUSH
44926: EMPTY
44927: LIST
44928: LIST
44929: PUSH
44930: LD_INT 1
44932: PUSH
44933: LD_INT 2
44935: PUSH
44936: EMPTY
44937: LIST
44938: LIST
44939: PUSH
44940: LD_INT 0
44942: PUSH
44943: LD_INT 2
44945: PUSH
44946: EMPTY
44947: LIST
44948: LIST
44949: PUSH
44950: LD_INT 1
44952: NEG
44953: PUSH
44954: LD_INT 1
44956: PUSH
44957: EMPTY
44958: LIST
44959: LIST
44960: PUSH
44961: LD_INT 1
44963: NEG
44964: PUSH
44965: LD_INT 3
44967: NEG
44968: PUSH
44969: EMPTY
44970: LIST
44971: LIST
44972: PUSH
44973: LD_INT 0
44975: PUSH
44976: LD_INT 3
44978: NEG
44979: PUSH
44980: EMPTY
44981: LIST
44982: LIST
44983: PUSH
44984: LD_INT 1
44986: PUSH
44987: LD_INT 2
44989: NEG
44990: PUSH
44991: EMPTY
44992: LIST
44993: LIST
44994: PUSH
44995: EMPTY
44996: LIST
44997: LIST
44998: LIST
44999: LIST
45000: LIST
45001: LIST
45002: LIST
45003: LIST
45004: LIST
45005: LIST
45006: LIST
45007: LIST
45008: LIST
45009: LIST
45010: LIST
45011: LIST
45012: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
45013: LD_ADDR_VAR 0 15
45017: PUSH
45018: LD_INT 0
45020: PUSH
45021: LD_INT 0
45023: PUSH
45024: EMPTY
45025: LIST
45026: LIST
45027: PUSH
45028: LD_INT 0
45030: PUSH
45031: LD_INT 1
45033: NEG
45034: PUSH
45035: EMPTY
45036: LIST
45037: LIST
45038: PUSH
45039: LD_INT 1
45041: PUSH
45042: LD_INT 0
45044: PUSH
45045: EMPTY
45046: LIST
45047: LIST
45048: PUSH
45049: LD_INT 1
45051: PUSH
45052: LD_INT 1
45054: PUSH
45055: EMPTY
45056: LIST
45057: LIST
45058: PUSH
45059: LD_INT 0
45061: PUSH
45062: LD_INT 1
45064: PUSH
45065: EMPTY
45066: LIST
45067: LIST
45068: PUSH
45069: LD_INT 1
45071: NEG
45072: PUSH
45073: LD_INT 0
45075: PUSH
45076: EMPTY
45077: LIST
45078: LIST
45079: PUSH
45080: LD_INT 1
45082: NEG
45083: PUSH
45084: LD_INT 1
45086: NEG
45087: PUSH
45088: EMPTY
45089: LIST
45090: LIST
45091: PUSH
45092: LD_INT 1
45094: PUSH
45095: LD_INT 1
45097: NEG
45098: PUSH
45099: EMPTY
45100: LIST
45101: LIST
45102: PUSH
45103: LD_INT 2
45105: PUSH
45106: LD_INT 0
45108: PUSH
45109: EMPTY
45110: LIST
45111: LIST
45112: PUSH
45113: LD_INT 2
45115: PUSH
45116: LD_INT 1
45118: PUSH
45119: EMPTY
45120: LIST
45121: LIST
45122: PUSH
45123: LD_INT 1
45125: NEG
45126: PUSH
45127: LD_INT 1
45129: PUSH
45130: EMPTY
45131: LIST
45132: LIST
45133: PUSH
45134: LD_INT 2
45136: NEG
45137: PUSH
45138: LD_INT 0
45140: PUSH
45141: EMPTY
45142: LIST
45143: LIST
45144: PUSH
45145: LD_INT 2
45147: NEG
45148: PUSH
45149: LD_INT 1
45151: NEG
45152: PUSH
45153: EMPTY
45154: LIST
45155: LIST
45156: PUSH
45157: LD_INT 2
45159: PUSH
45160: LD_INT 1
45162: NEG
45163: PUSH
45164: EMPTY
45165: LIST
45166: LIST
45167: PUSH
45168: LD_INT 3
45170: PUSH
45171: LD_INT 0
45173: PUSH
45174: EMPTY
45175: LIST
45176: LIST
45177: PUSH
45178: LD_INT 3
45180: PUSH
45181: LD_INT 1
45183: PUSH
45184: EMPTY
45185: LIST
45186: LIST
45187: PUSH
45188: EMPTY
45189: LIST
45190: LIST
45191: LIST
45192: LIST
45193: LIST
45194: LIST
45195: LIST
45196: LIST
45197: LIST
45198: LIST
45199: LIST
45200: LIST
45201: LIST
45202: LIST
45203: LIST
45204: LIST
45205: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
45206: LD_ADDR_VAR 0 16
45210: PUSH
45211: LD_INT 0
45213: PUSH
45214: LD_INT 0
45216: PUSH
45217: EMPTY
45218: LIST
45219: LIST
45220: PUSH
45221: LD_INT 0
45223: PUSH
45224: LD_INT 1
45226: NEG
45227: PUSH
45228: EMPTY
45229: LIST
45230: LIST
45231: PUSH
45232: LD_INT 1
45234: PUSH
45235: LD_INT 0
45237: PUSH
45238: EMPTY
45239: LIST
45240: LIST
45241: PUSH
45242: LD_INT 1
45244: PUSH
45245: LD_INT 1
45247: PUSH
45248: EMPTY
45249: LIST
45250: LIST
45251: PUSH
45252: LD_INT 0
45254: PUSH
45255: LD_INT 1
45257: PUSH
45258: EMPTY
45259: LIST
45260: LIST
45261: PUSH
45262: LD_INT 1
45264: NEG
45265: PUSH
45266: LD_INT 0
45268: PUSH
45269: EMPTY
45270: LIST
45271: LIST
45272: PUSH
45273: LD_INT 1
45275: NEG
45276: PUSH
45277: LD_INT 1
45279: NEG
45280: PUSH
45281: EMPTY
45282: LIST
45283: LIST
45284: PUSH
45285: LD_INT 1
45287: NEG
45288: PUSH
45289: LD_INT 2
45291: NEG
45292: PUSH
45293: EMPTY
45294: LIST
45295: LIST
45296: PUSH
45297: LD_INT 2
45299: PUSH
45300: LD_INT 1
45302: PUSH
45303: EMPTY
45304: LIST
45305: LIST
45306: PUSH
45307: LD_INT 2
45309: PUSH
45310: LD_INT 2
45312: PUSH
45313: EMPTY
45314: LIST
45315: LIST
45316: PUSH
45317: LD_INT 1
45319: PUSH
45320: LD_INT 2
45322: PUSH
45323: EMPTY
45324: LIST
45325: LIST
45326: PUSH
45327: LD_INT 2
45329: NEG
45330: PUSH
45331: LD_INT 1
45333: NEG
45334: PUSH
45335: EMPTY
45336: LIST
45337: LIST
45338: PUSH
45339: LD_INT 2
45341: NEG
45342: PUSH
45343: LD_INT 2
45345: NEG
45346: PUSH
45347: EMPTY
45348: LIST
45349: LIST
45350: PUSH
45351: LD_INT 3
45353: PUSH
45354: LD_INT 2
45356: PUSH
45357: EMPTY
45358: LIST
45359: LIST
45360: PUSH
45361: LD_INT 3
45363: PUSH
45364: LD_INT 3
45366: PUSH
45367: EMPTY
45368: LIST
45369: LIST
45370: PUSH
45371: LD_INT 2
45373: PUSH
45374: LD_INT 3
45376: PUSH
45377: EMPTY
45378: LIST
45379: LIST
45380: PUSH
45381: EMPTY
45382: LIST
45383: LIST
45384: LIST
45385: LIST
45386: LIST
45387: LIST
45388: LIST
45389: LIST
45390: LIST
45391: LIST
45392: LIST
45393: LIST
45394: LIST
45395: LIST
45396: LIST
45397: LIST
45398: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45399: LD_ADDR_VAR 0 17
45403: PUSH
45404: LD_INT 0
45406: PUSH
45407: LD_INT 0
45409: PUSH
45410: EMPTY
45411: LIST
45412: LIST
45413: PUSH
45414: LD_INT 0
45416: PUSH
45417: LD_INT 1
45419: NEG
45420: PUSH
45421: EMPTY
45422: LIST
45423: LIST
45424: PUSH
45425: LD_INT 1
45427: PUSH
45428: LD_INT 0
45430: PUSH
45431: EMPTY
45432: LIST
45433: LIST
45434: PUSH
45435: LD_INT 1
45437: PUSH
45438: LD_INT 1
45440: PUSH
45441: EMPTY
45442: LIST
45443: LIST
45444: PUSH
45445: LD_INT 0
45447: PUSH
45448: LD_INT 1
45450: PUSH
45451: EMPTY
45452: LIST
45453: LIST
45454: PUSH
45455: LD_INT 1
45457: NEG
45458: PUSH
45459: LD_INT 0
45461: PUSH
45462: EMPTY
45463: LIST
45464: LIST
45465: PUSH
45466: LD_INT 1
45468: NEG
45469: PUSH
45470: LD_INT 1
45472: NEG
45473: PUSH
45474: EMPTY
45475: LIST
45476: LIST
45477: PUSH
45478: LD_INT 1
45480: NEG
45481: PUSH
45482: LD_INT 2
45484: NEG
45485: PUSH
45486: EMPTY
45487: LIST
45488: LIST
45489: PUSH
45490: LD_INT 0
45492: PUSH
45493: LD_INT 2
45495: NEG
45496: PUSH
45497: EMPTY
45498: LIST
45499: LIST
45500: PUSH
45501: LD_INT 1
45503: PUSH
45504: LD_INT 1
45506: NEG
45507: PUSH
45508: EMPTY
45509: LIST
45510: LIST
45511: PUSH
45512: LD_INT 2
45514: PUSH
45515: LD_INT 0
45517: PUSH
45518: EMPTY
45519: LIST
45520: LIST
45521: PUSH
45522: LD_INT 2
45524: PUSH
45525: LD_INT 1
45527: PUSH
45528: EMPTY
45529: LIST
45530: LIST
45531: PUSH
45532: LD_INT 2
45534: PUSH
45535: LD_INT 2
45537: PUSH
45538: EMPTY
45539: LIST
45540: LIST
45541: PUSH
45542: LD_INT 1
45544: PUSH
45545: LD_INT 2
45547: PUSH
45548: EMPTY
45549: LIST
45550: LIST
45551: PUSH
45552: LD_INT 0
45554: PUSH
45555: LD_INT 2
45557: PUSH
45558: EMPTY
45559: LIST
45560: LIST
45561: PUSH
45562: LD_INT 1
45564: NEG
45565: PUSH
45566: LD_INT 1
45568: PUSH
45569: EMPTY
45570: LIST
45571: LIST
45572: PUSH
45573: LD_INT 2
45575: NEG
45576: PUSH
45577: LD_INT 0
45579: PUSH
45580: EMPTY
45581: LIST
45582: LIST
45583: PUSH
45584: LD_INT 2
45586: NEG
45587: PUSH
45588: LD_INT 1
45590: NEG
45591: PUSH
45592: EMPTY
45593: LIST
45594: LIST
45595: PUSH
45596: LD_INT 2
45598: NEG
45599: PUSH
45600: LD_INT 2
45602: NEG
45603: PUSH
45604: EMPTY
45605: LIST
45606: LIST
45607: PUSH
45608: EMPTY
45609: LIST
45610: LIST
45611: LIST
45612: LIST
45613: LIST
45614: LIST
45615: LIST
45616: LIST
45617: LIST
45618: LIST
45619: LIST
45620: LIST
45621: LIST
45622: LIST
45623: LIST
45624: LIST
45625: LIST
45626: LIST
45627: LIST
45628: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45629: LD_ADDR_VAR 0 18
45633: PUSH
45634: LD_INT 0
45636: PUSH
45637: LD_INT 0
45639: PUSH
45640: EMPTY
45641: LIST
45642: LIST
45643: PUSH
45644: LD_INT 0
45646: PUSH
45647: LD_INT 1
45649: NEG
45650: PUSH
45651: EMPTY
45652: LIST
45653: LIST
45654: PUSH
45655: LD_INT 1
45657: PUSH
45658: LD_INT 0
45660: PUSH
45661: EMPTY
45662: LIST
45663: LIST
45664: PUSH
45665: LD_INT 1
45667: PUSH
45668: LD_INT 1
45670: PUSH
45671: EMPTY
45672: LIST
45673: LIST
45674: PUSH
45675: LD_INT 0
45677: PUSH
45678: LD_INT 1
45680: PUSH
45681: EMPTY
45682: LIST
45683: LIST
45684: PUSH
45685: LD_INT 1
45687: NEG
45688: PUSH
45689: LD_INT 0
45691: PUSH
45692: EMPTY
45693: LIST
45694: LIST
45695: PUSH
45696: LD_INT 1
45698: NEG
45699: PUSH
45700: LD_INT 1
45702: NEG
45703: PUSH
45704: EMPTY
45705: LIST
45706: LIST
45707: PUSH
45708: LD_INT 1
45710: NEG
45711: PUSH
45712: LD_INT 2
45714: NEG
45715: PUSH
45716: EMPTY
45717: LIST
45718: LIST
45719: PUSH
45720: LD_INT 0
45722: PUSH
45723: LD_INT 2
45725: NEG
45726: PUSH
45727: EMPTY
45728: LIST
45729: LIST
45730: PUSH
45731: LD_INT 1
45733: PUSH
45734: LD_INT 1
45736: NEG
45737: PUSH
45738: EMPTY
45739: LIST
45740: LIST
45741: PUSH
45742: LD_INT 2
45744: PUSH
45745: LD_INT 0
45747: PUSH
45748: EMPTY
45749: LIST
45750: LIST
45751: PUSH
45752: LD_INT 2
45754: PUSH
45755: LD_INT 1
45757: PUSH
45758: EMPTY
45759: LIST
45760: LIST
45761: PUSH
45762: LD_INT 2
45764: PUSH
45765: LD_INT 2
45767: PUSH
45768: EMPTY
45769: LIST
45770: LIST
45771: PUSH
45772: LD_INT 1
45774: PUSH
45775: LD_INT 2
45777: PUSH
45778: EMPTY
45779: LIST
45780: LIST
45781: PUSH
45782: LD_INT 0
45784: PUSH
45785: LD_INT 2
45787: PUSH
45788: EMPTY
45789: LIST
45790: LIST
45791: PUSH
45792: LD_INT 1
45794: NEG
45795: PUSH
45796: LD_INT 1
45798: PUSH
45799: EMPTY
45800: LIST
45801: LIST
45802: PUSH
45803: LD_INT 2
45805: NEG
45806: PUSH
45807: LD_INT 0
45809: PUSH
45810: EMPTY
45811: LIST
45812: LIST
45813: PUSH
45814: LD_INT 2
45816: NEG
45817: PUSH
45818: LD_INT 1
45820: NEG
45821: PUSH
45822: EMPTY
45823: LIST
45824: LIST
45825: PUSH
45826: LD_INT 2
45828: NEG
45829: PUSH
45830: LD_INT 2
45832: NEG
45833: PUSH
45834: EMPTY
45835: LIST
45836: LIST
45837: PUSH
45838: EMPTY
45839: LIST
45840: LIST
45841: LIST
45842: LIST
45843: LIST
45844: LIST
45845: LIST
45846: LIST
45847: LIST
45848: LIST
45849: LIST
45850: LIST
45851: LIST
45852: LIST
45853: LIST
45854: LIST
45855: LIST
45856: LIST
45857: LIST
45858: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45859: LD_ADDR_VAR 0 19
45863: PUSH
45864: LD_INT 0
45866: PUSH
45867: LD_INT 0
45869: PUSH
45870: EMPTY
45871: LIST
45872: LIST
45873: PUSH
45874: LD_INT 0
45876: PUSH
45877: LD_INT 1
45879: NEG
45880: PUSH
45881: EMPTY
45882: LIST
45883: LIST
45884: PUSH
45885: LD_INT 1
45887: PUSH
45888: LD_INT 0
45890: PUSH
45891: EMPTY
45892: LIST
45893: LIST
45894: PUSH
45895: LD_INT 1
45897: PUSH
45898: LD_INT 1
45900: PUSH
45901: EMPTY
45902: LIST
45903: LIST
45904: PUSH
45905: LD_INT 0
45907: PUSH
45908: LD_INT 1
45910: PUSH
45911: EMPTY
45912: LIST
45913: LIST
45914: PUSH
45915: LD_INT 1
45917: NEG
45918: PUSH
45919: LD_INT 0
45921: PUSH
45922: EMPTY
45923: LIST
45924: LIST
45925: PUSH
45926: LD_INT 1
45928: NEG
45929: PUSH
45930: LD_INT 1
45932: NEG
45933: PUSH
45934: EMPTY
45935: LIST
45936: LIST
45937: PUSH
45938: LD_INT 1
45940: NEG
45941: PUSH
45942: LD_INT 2
45944: NEG
45945: PUSH
45946: EMPTY
45947: LIST
45948: LIST
45949: PUSH
45950: LD_INT 0
45952: PUSH
45953: LD_INT 2
45955: NEG
45956: PUSH
45957: EMPTY
45958: LIST
45959: LIST
45960: PUSH
45961: LD_INT 1
45963: PUSH
45964: LD_INT 1
45966: NEG
45967: PUSH
45968: EMPTY
45969: LIST
45970: LIST
45971: PUSH
45972: LD_INT 2
45974: PUSH
45975: LD_INT 0
45977: PUSH
45978: EMPTY
45979: LIST
45980: LIST
45981: PUSH
45982: LD_INT 2
45984: PUSH
45985: LD_INT 1
45987: PUSH
45988: EMPTY
45989: LIST
45990: LIST
45991: PUSH
45992: LD_INT 2
45994: PUSH
45995: LD_INT 2
45997: PUSH
45998: EMPTY
45999: LIST
46000: LIST
46001: PUSH
46002: LD_INT 1
46004: PUSH
46005: LD_INT 2
46007: PUSH
46008: EMPTY
46009: LIST
46010: LIST
46011: PUSH
46012: LD_INT 0
46014: PUSH
46015: LD_INT 2
46017: PUSH
46018: EMPTY
46019: LIST
46020: LIST
46021: PUSH
46022: LD_INT 1
46024: NEG
46025: PUSH
46026: LD_INT 1
46028: PUSH
46029: EMPTY
46030: LIST
46031: LIST
46032: PUSH
46033: LD_INT 2
46035: NEG
46036: PUSH
46037: LD_INT 0
46039: PUSH
46040: EMPTY
46041: LIST
46042: LIST
46043: PUSH
46044: LD_INT 2
46046: NEG
46047: PUSH
46048: LD_INT 1
46050: NEG
46051: PUSH
46052: EMPTY
46053: LIST
46054: LIST
46055: PUSH
46056: LD_INT 2
46058: NEG
46059: PUSH
46060: LD_INT 2
46062: NEG
46063: PUSH
46064: EMPTY
46065: LIST
46066: LIST
46067: PUSH
46068: EMPTY
46069: LIST
46070: LIST
46071: LIST
46072: LIST
46073: LIST
46074: LIST
46075: LIST
46076: LIST
46077: LIST
46078: LIST
46079: LIST
46080: LIST
46081: LIST
46082: LIST
46083: LIST
46084: LIST
46085: LIST
46086: LIST
46087: LIST
46088: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46089: LD_ADDR_VAR 0 20
46093: PUSH
46094: LD_INT 0
46096: PUSH
46097: LD_INT 0
46099: PUSH
46100: EMPTY
46101: LIST
46102: LIST
46103: PUSH
46104: LD_INT 0
46106: PUSH
46107: LD_INT 1
46109: NEG
46110: PUSH
46111: EMPTY
46112: LIST
46113: LIST
46114: PUSH
46115: LD_INT 1
46117: PUSH
46118: LD_INT 0
46120: PUSH
46121: EMPTY
46122: LIST
46123: LIST
46124: PUSH
46125: LD_INT 1
46127: PUSH
46128: LD_INT 1
46130: PUSH
46131: EMPTY
46132: LIST
46133: LIST
46134: PUSH
46135: LD_INT 0
46137: PUSH
46138: LD_INT 1
46140: PUSH
46141: EMPTY
46142: LIST
46143: LIST
46144: PUSH
46145: LD_INT 1
46147: NEG
46148: PUSH
46149: LD_INT 0
46151: PUSH
46152: EMPTY
46153: LIST
46154: LIST
46155: PUSH
46156: LD_INT 1
46158: NEG
46159: PUSH
46160: LD_INT 1
46162: NEG
46163: PUSH
46164: EMPTY
46165: LIST
46166: LIST
46167: PUSH
46168: LD_INT 1
46170: NEG
46171: PUSH
46172: LD_INT 2
46174: NEG
46175: PUSH
46176: EMPTY
46177: LIST
46178: LIST
46179: PUSH
46180: LD_INT 0
46182: PUSH
46183: LD_INT 2
46185: NEG
46186: PUSH
46187: EMPTY
46188: LIST
46189: LIST
46190: PUSH
46191: LD_INT 1
46193: PUSH
46194: LD_INT 1
46196: NEG
46197: PUSH
46198: EMPTY
46199: LIST
46200: LIST
46201: PUSH
46202: LD_INT 2
46204: PUSH
46205: LD_INT 0
46207: PUSH
46208: EMPTY
46209: LIST
46210: LIST
46211: PUSH
46212: LD_INT 2
46214: PUSH
46215: LD_INT 1
46217: PUSH
46218: EMPTY
46219: LIST
46220: LIST
46221: PUSH
46222: LD_INT 2
46224: PUSH
46225: LD_INT 2
46227: PUSH
46228: EMPTY
46229: LIST
46230: LIST
46231: PUSH
46232: LD_INT 1
46234: PUSH
46235: LD_INT 2
46237: PUSH
46238: EMPTY
46239: LIST
46240: LIST
46241: PUSH
46242: LD_INT 0
46244: PUSH
46245: LD_INT 2
46247: PUSH
46248: EMPTY
46249: LIST
46250: LIST
46251: PUSH
46252: LD_INT 1
46254: NEG
46255: PUSH
46256: LD_INT 1
46258: PUSH
46259: EMPTY
46260: LIST
46261: LIST
46262: PUSH
46263: LD_INT 2
46265: NEG
46266: PUSH
46267: LD_INT 0
46269: PUSH
46270: EMPTY
46271: LIST
46272: LIST
46273: PUSH
46274: LD_INT 2
46276: NEG
46277: PUSH
46278: LD_INT 1
46280: NEG
46281: PUSH
46282: EMPTY
46283: LIST
46284: LIST
46285: PUSH
46286: LD_INT 2
46288: NEG
46289: PUSH
46290: LD_INT 2
46292: NEG
46293: PUSH
46294: EMPTY
46295: LIST
46296: LIST
46297: PUSH
46298: EMPTY
46299: LIST
46300: LIST
46301: LIST
46302: LIST
46303: LIST
46304: LIST
46305: LIST
46306: LIST
46307: LIST
46308: LIST
46309: LIST
46310: LIST
46311: LIST
46312: LIST
46313: LIST
46314: LIST
46315: LIST
46316: LIST
46317: LIST
46318: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46319: LD_ADDR_VAR 0 21
46323: PUSH
46324: LD_INT 0
46326: PUSH
46327: LD_INT 0
46329: PUSH
46330: EMPTY
46331: LIST
46332: LIST
46333: PUSH
46334: LD_INT 0
46336: PUSH
46337: LD_INT 1
46339: NEG
46340: PUSH
46341: EMPTY
46342: LIST
46343: LIST
46344: PUSH
46345: LD_INT 1
46347: PUSH
46348: LD_INT 0
46350: PUSH
46351: EMPTY
46352: LIST
46353: LIST
46354: PUSH
46355: LD_INT 1
46357: PUSH
46358: LD_INT 1
46360: PUSH
46361: EMPTY
46362: LIST
46363: LIST
46364: PUSH
46365: LD_INT 0
46367: PUSH
46368: LD_INT 1
46370: PUSH
46371: EMPTY
46372: LIST
46373: LIST
46374: PUSH
46375: LD_INT 1
46377: NEG
46378: PUSH
46379: LD_INT 0
46381: PUSH
46382: EMPTY
46383: LIST
46384: LIST
46385: PUSH
46386: LD_INT 1
46388: NEG
46389: PUSH
46390: LD_INT 1
46392: NEG
46393: PUSH
46394: EMPTY
46395: LIST
46396: LIST
46397: PUSH
46398: LD_INT 1
46400: NEG
46401: PUSH
46402: LD_INT 2
46404: NEG
46405: PUSH
46406: EMPTY
46407: LIST
46408: LIST
46409: PUSH
46410: LD_INT 0
46412: PUSH
46413: LD_INT 2
46415: NEG
46416: PUSH
46417: EMPTY
46418: LIST
46419: LIST
46420: PUSH
46421: LD_INT 1
46423: PUSH
46424: LD_INT 1
46426: NEG
46427: PUSH
46428: EMPTY
46429: LIST
46430: LIST
46431: PUSH
46432: LD_INT 2
46434: PUSH
46435: LD_INT 0
46437: PUSH
46438: EMPTY
46439: LIST
46440: LIST
46441: PUSH
46442: LD_INT 2
46444: PUSH
46445: LD_INT 1
46447: PUSH
46448: EMPTY
46449: LIST
46450: LIST
46451: PUSH
46452: LD_INT 2
46454: PUSH
46455: LD_INT 2
46457: PUSH
46458: EMPTY
46459: LIST
46460: LIST
46461: PUSH
46462: LD_INT 1
46464: PUSH
46465: LD_INT 2
46467: PUSH
46468: EMPTY
46469: LIST
46470: LIST
46471: PUSH
46472: LD_INT 0
46474: PUSH
46475: LD_INT 2
46477: PUSH
46478: EMPTY
46479: LIST
46480: LIST
46481: PUSH
46482: LD_INT 1
46484: NEG
46485: PUSH
46486: LD_INT 1
46488: PUSH
46489: EMPTY
46490: LIST
46491: LIST
46492: PUSH
46493: LD_INT 2
46495: NEG
46496: PUSH
46497: LD_INT 0
46499: PUSH
46500: EMPTY
46501: LIST
46502: LIST
46503: PUSH
46504: LD_INT 2
46506: NEG
46507: PUSH
46508: LD_INT 1
46510: NEG
46511: PUSH
46512: EMPTY
46513: LIST
46514: LIST
46515: PUSH
46516: LD_INT 2
46518: NEG
46519: PUSH
46520: LD_INT 2
46522: NEG
46523: PUSH
46524: EMPTY
46525: LIST
46526: LIST
46527: PUSH
46528: EMPTY
46529: LIST
46530: LIST
46531: LIST
46532: LIST
46533: LIST
46534: LIST
46535: LIST
46536: LIST
46537: LIST
46538: LIST
46539: LIST
46540: LIST
46541: LIST
46542: LIST
46543: LIST
46544: LIST
46545: LIST
46546: LIST
46547: LIST
46548: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46549: LD_ADDR_VAR 0 22
46553: PUSH
46554: LD_INT 0
46556: PUSH
46557: LD_INT 0
46559: PUSH
46560: EMPTY
46561: LIST
46562: LIST
46563: PUSH
46564: LD_INT 0
46566: PUSH
46567: LD_INT 1
46569: NEG
46570: PUSH
46571: EMPTY
46572: LIST
46573: LIST
46574: PUSH
46575: LD_INT 1
46577: PUSH
46578: LD_INT 0
46580: PUSH
46581: EMPTY
46582: LIST
46583: LIST
46584: PUSH
46585: LD_INT 1
46587: PUSH
46588: LD_INT 1
46590: PUSH
46591: EMPTY
46592: LIST
46593: LIST
46594: PUSH
46595: LD_INT 0
46597: PUSH
46598: LD_INT 1
46600: PUSH
46601: EMPTY
46602: LIST
46603: LIST
46604: PUSH
46605: LD_INT 1
46607: NEG
46608: PUSH
46609: LD_INT 0
46611: PUSH
46612: EMPTY
46613: LIST
46614: LIST
46615: PUSH
46616: LD_INT 1
46618: NEG
46619: PUSH
46620: LD_INT 1
46622: NEG
46623: PUSH
46624: EMPTY
46625: LIST
46626: LIST
46627: PUSH
46628: LD_INT 1
46630: NEG
46631: PUSH
46632: LD_INT 2
46634: NEG
46635: PUSH
46636: EMPTY
46637: LIST
46638: LIST
46639: PUSH
46640: LD_INT 0
46642: PUSH
46643: LD_INT 2
46645: NEG
46646: PUSH
46647: EMPTY
46648: LIST
46649: LIST
46650: PUSH
46651: LD_INT 1
46653: PUSH
46654: LD_INT 1
46656: NEG
46657: PUSH
46658: EMPTY
46659: LIST
46660: LIST
46661: PUSH
46662: LD_INT 2
46664: PUSH
46665: LD_INT 0
46667: PUSH
46668: EMPTY
46669: LIST
46670: LIST
46671: PUSH
46672: LD_INT 2
46674: PUSH
46675: LD_INT 1
46677: PUSH
46678: EMPTY
46679: LIST
46680: LIST
46681: PUSH
46682: LD_INT 2
46684: PUSH
46685: LD_INT 2
46687: PUSH
46688: EMPTY
46689: LIST
46690: LIST
46691: PUSH
46692: LD_INT 1
46694: PUSH
46695: LD_INT 2
46697: PUSH
46698: EMPTY
46699: LIST
46700: LIST
46701: PUSH
46702: LD_INT 0
46704: PUSH
46705: LD_INT 2
46707: PUSH
46708: EMPTY
46709: LIST
46710: LIST
46711: PUSH
46712: LD_INT 1
46714: NEG
46715: PUSH
46716: LD_INT 1
46718: PUSH
46719: EMPTY
46720: LIST
46721: LIST
46722: PUSH
46723: LD_INT 2
46725: NEG
46726: PUSH
46727: LD_INT 0
46729: PUSH
46730: EMPTY
46731: LIST
46732: LIST
46733: PUSH
46734: LD_INT 2
46736: NEG
46737: PUSH
46738: LD_INT 1
46740: NEG
46741: PUSH
46742: EMPTY
46743: LIST
46744: LIST
46745: PUSH
46746: LD_INT 2
46748: NEG
46749: PUSH
46750: LD_INT 2
46752: NEG
46753: PUSH
46754: EMPTY
46755: LIST
46756: LIST
46757: PUSH
46758: EMPTY
46759: LIST
46760: LIST
46761: LIST
46762: LIST
46763: LIST
46764: LIST
46765: LIST
46766: LIST
46767: LIST
46768: LIST
46769: LIST
46770: LIST
46771: LIST
46772: LIST
46773: LIST
46774: LIST
46775: LIST
46776: LIST
46777: LIST
46778: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
46779: LD_ADDR_VAR 0 23
46783: PUSH
46784: LD_INT 0
46786: PUSH
46787: LD_INT 0
46789: PUSH
46790: EMPTY
46791: LIST
46792: LIST
46793: PUSH
46794: LD_INT 0
46796: PUSH
46797: LD_INT 1
46799: NEG
46800: PUSH
46801: EMPTY
46802: LIST
46803: LIST
46804: PUSH
46805: LD_INT 1
46807: PUSH
46808: LD_INT 0
46810: PUSH
46811: EMPTY
46812: LIST
46813: LIST
46814: PUSH
46815: LD_INT 1
46817: PUSH
46818: LD_INT 1
46820: PUSH
46821: EMPTY
46822: LIST
46823: LIST
46824: PUSH
46825: LD_INT 0
46827: PUSH
46828: LD_INT 1
46830: PUSH
46831: EMPTY
46832: LIST
46833: LIST
46834: PUSH
46835: LD_INT 1
46837: NEG
46838: PUSH
46839: LD_INT 0
46841: PUSH
46842: EMPTY
46843: LIST
46844: LIST
46845: PUSH
46846: LD_INT 1
46848: NEG
46849: PUSH
46850: LD_INT 1
46852: NEG
46853: PUSH
46854: EMPTY
46855: LIST
46856: LIST
46857: PUSH
46858: LD_INT 1
46860: NEG
46861: PUSH
46862: LD_INT 2
46864: NEG
46865: PUSH
46866: EMPTY
46867: LIST
46868: LIST
46869: PUSH
46870: LD_INT 0
46872: PUSH
46873: LD_INT 2
46875: NEG
46876: PUSH
46877: EMPTY
46878: LIST
46879: LIST
46880: PUSH
46881: LD_INT 1
46883: PUSH
46884: LD_INT 1
46886: NEG
46887: PUSH
46888: EMPTY
46889: LIST
46890: LIST
46891: PUSH
46892: LD_INT 2
46894: PUSH
46895: LD_INT 0
46897: PUSH
46898: EMPTY
46899: LIST
46900: LIST
46901: PUSH
46902: LD_INT 2
46904: PUSH
46905: LD_INT 1
46907: PUSH
46908: EMPTY
46909: LIST
46910: LIST
46911: PUSH
46912: LD_INT 2
46914: PUSH
46915: LD_INT 2
46917: PUSH
46918: EMPTY
46919: LIST
46920: LIST
46921: PUSH
46922: LD_INT 1
46924: PUSH
46925: LD_INT 2
46927: PUSH
46928: EMPTY
46929: LIST
46930: LIST
46931: PUSH
46932: LD_INT 0
46934: PUSH
46935: LD_INT 2
46937: PUSH
46938: EMPTY
46939: LIST
46940: LIST
46941: PUSH
46942: LD_INT 1
46944: NEG
46945: PUSH
46946: LD_INT 1
46948: PUSH
46949: EMPTY
46950: LIST
46951: LIST
46952: PUSH
46953: LD_INT 2
46955: NEG
46956: PUSH
46957: LD_INT 0
46959: PUSH
46960: EMPTY
46961: LIST
46962: LIST
46963: PUSH
46964: LD_INT 2
46966: NEG
46967: PUSH
46968: LD_INT 1
46970: NEG
46971: PUSH
46972: EMPTY
46973: LIST
46974: LIST
46975: PUSH
46976: LD_INT 2
46978: NEG
46979: PUSH
46980: LD_INT 2
46982: NEG
46983: PUSH
46984: EMPTY
46985: LIST
46986: LIST
46987: PUSH
46988: LD_INT 2
46990: NEG
46991: PUSH
46992: LD_INT 3
46994: NEG
46995: PUSH
46996: EMPTY
46997: LIST
46998: LIST
46999: PUSH
47000: LD_INT 1
47002: NEG
47003: PUSH
47004: LD_INT 3
47006: NEG
47007: PUSH
47008: EMPTY
47009: LIST
47010: LIST
47011: PUSH
47012: LD_INT 1
47014: PUSH
47015: LD_INT 2
47017: NEG
47018: PUSH
47019: EMPTY
47020: LIST
47021: LIST
47022: PUSH
47023: LD_INT 2
47025: PUSH
47026: LD_INT 1
47028: NEG
47029: PUSH
47030: EMPTY
47031: LIST
47032: LIST
47033: PUSH
47034: EMPTY
47035: LIST
47036: LIST
47037: LIST
47038: LIST
47039: LIST
47040: LIST
47041: LIST
47042: LIST
47043: LIST
47044: LIST
47045: LIST
47046: LIST
47047: LIST
47048: LIST
47049: LIST
47050: LIST
47051: LIST
47052: LIST
47053: LIST
47054: LIST
47055: LIST
47056: LIST
47057: LIST
47058: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
47059: LD_ADDR_VAR 0 24
47063: PUSH
47064: LD_INT 0
47066: PUSH
47067: LD_INT 0
47069: PUSH
47070: EMPTY
47071: LIST
47072: LIST
47073: PUSH
47074: LD_INT 0
47076: PUSH
47077: LD_INT 1
47079: NEG
47080: PUSH
47081: EMPTY
47082: LIST
47083: LIST
47084: PUSH
47085: LD_INT 1
47087: PUSH
47088: LD_INT 0
47090: PUSH
47091: EMPTY
47092: LIST
47093: LIST
47094: PUSH
47095: LD_INT 1
47097: PUSH
47098: LD_INT 1
47100: PUSH
47101: EMPTY
47102: LIST
47103: LIST
47104: PUSH
47105: LD_INT 0
47107: PUSH
47108: LD_INT 1
47110: PUSH
47111: EMPTY
47112: LIST
47113: LIST
47114: PUSH
47115: LD_INT 1
47117: NEG
47118: PUSH
47119: LD_INT 0
47121: PUSH
47122: EMPTY
47123: LIST
47124: LIST
47125: PUSH
47126: LD_INT 1
47128: NEG
47129: PUSH
47130: LD_INT 1
47132: NEG
47133: PUSH
47134: EMPTY
47135: LIST
47136: LIST
47137: PUSH
47138: LD_INT 1
47140: NEG
47141: PUSH
47142: LD_INT 2
47144: NEG
47145: PUSH
47146: EMPTY
47147: LIST
47148: LIST
47149: PUSH
47150: LD_INT 0
47152: PUSH
47153: LD_INT 2
47155: NEG
47156: PUSH
47157: EMPTY
47158: LIST
47159: LIST
47160: PUSH
47161: LD_INT 1
47163: PUSH
47164: LD_INT 1
47166: NEG
47167: PUSH
47168: EMPTY
47169: LIST
47170: LIST
47171: PUSH
47172: LD_INT 2
47174: PUSH
47175: LD_INT 0
47177: PUSH
47178: EMPTY
47179: LIST
47180: LIST
47181: PUSH
47182: LD_INT 2
47184: PUSH
47185: LD_INT 1
47187: PUSH
47188: EMPTY
47189: LIST
47190: LIST
47191: PUSH
47192: LD_INT 2
47194: PUSH
47195: LD_INT 2
47197: PUSH
47198: EMPTY
47199: LIST
47200: LIST
47201: PUSH
47202: LD_INT 1
47204: PUSH
47205: LD_INT 2
47207: PUSH
47208: EMPTY
47209: LIST
47210: LIST
47211: PUSH
47212: LD_INT 0
47214: PUSH
47215: LD_INT 2
47217: PUSH
47218: EMPTY
47219: LIST
47220: LIST
47221: PUSH
47222: LD_INT 1
47224: NEG
47225: PUSH
47226: LD_INT 1
47228: PUSH
47229: EMPTY
47230: LIST
47231: LIST
47232: PUSH
47233: LD_INT 2
47235: NEG
47236: PUSH
47237: LD_INT 0
47239: PUSH
47240: EMPTY
47241: LIST
47242: LIST
47243: PUSH
47244: LD_INT 2
47246: NEG
47247: PUSH
47248: LD_INT 1
47250: NEG
47251: PUSH
47252: EMPTY
47253: LIST
47254: LIST
47255: PUSH
47256: LD_INT 2
47258: NEG
47259: PUSH
47260: LD_INT 2
47262: NEG
47263: PUSH
47264: EMPTY
47265: LIST
47266: LIST
47267: PUSH
47268: LD_INT 1
47270: PUSH
47271: LD_INT 2
47273: NEG
47274: PUSH
47275: EMPTY
47276: LIST
47277: LIST
47278: PUSH
47279: LD_INT 2
47281: PUSH
47282: LD_INT 1
47284: NEG
47285: PUSH
47286: EMPTY
47287: LIST
47288: LIST
47289: PUSH
47290: LD_INT 3
47292: PUSH
47293: LD_INT 1
47295: PUSH
47296: EMPTY
47297: LIST
47298: LIST
47299: PUSH
47300: LD_INT 3
47302: PUSH
47303: LD_INT 2
47305: PUSH
47306: EMPTY
47307: LIST
47308: LIST
47309: PUSH
47310: EMPTY
47311: LIST
47312: LIST
47313: LIST
47314: LIST
47315: LIST
47316: LIST
47317: LIST
47318: LIST
47319: LIST
47320: LIST
47321: LIST
47322: LIST
47323: LIST
47324: LIST
47325: LIST
47326: LIST
47327: LIST
47328: LIST
47329: LIST
47330: LIST
47331: LIST
47332: LIST
47333: LIST
47334: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
47335: LD_ADDR_VAR 0 25
47339: PUSH
47340: LD_INT 0
47342: PUSH
47343: LD_INT 0
47345: PUSH
47346: EMPTY
47347: LIST
47348: LIST
47349: PUSH
47350: LD_INT 0
47352: PUSH
47353: LD_INT 1
47355: NEG
47356: PUSH
47357: EMPTY
47358: LIST
47359: LIST
47360: PUSH
47361: LD_INT 1
47363: PUSH
47364: LD_INT 0
47366: PUSH
47367: EMPTY
47368: LIST
47369: LIST
47370: PUSH
47371: LD_INT 1
47373: PUSH
47374: LD_INT 1
47376: PUSH
47377: EMPTY
47378: LIST
47379: LIST
47380: PUSH
47381: LD_INT 0
47383: PUSH
47384: LD_INT 1
47386: PUSH
47387: EMPTY
47388: LIST
47389: LIST
47390: PUSH
47391: LD_INT 1
47393: NEG
47394: PUSH
47395: LD_INT 0
47397: PUSH
47398: EMPTY
47399: LIST
47400: LIST
47401: PUSH
47402: LD_INT 1
47404: NEG
47405: PUSH
47406: LD_INT 1
47408: NEG
47409: PUSH
47410: EMPTY
47411: LIST
47412: LIST
47413: PUSH
47414: LD_INT 1
47416: NEG
47417: PUSH
47418: LD_INT 2
47420: NEG
47421: PUSH
47422: EMPTY
47423: LIST
47424: LIST
47425: PUSH
47426: LD_INT 0
47428: PUSH
47429: LD_INT 2
47431: NEG
47432: PUSH
47433: EMPTY
47434: LIST
47435: LIST
47436: PUSH
47437: LD_INT 1
47439: PUSH
47440: LD_INT 1
47442: NEG
47443: PUSH
47444: EMPTY
47445: LIST
47446: LIST
47447: PUSH
47448: LD_INT 2
47450: PUSH
47451: LD_INT 0
47453: PUSH
47454: EMPTY
47455: LIST
47456: LIST
47457: PUSH
47458: LD_INT 2
47460: PUSH
47461: LD_INT 1
47463: PUSH
47464: EMPTY
47465: LIST
47466: LIST
47467: PUSH
47468: LD_INT 2
47470: PUSH
47471: LD_INT 2
47473: PUSH
47474: EMPTY
47475: LIST
47476: LIST
47477: PUSH
47478: LD_INT 1
47480: PUSH
47481: LD_INT 2
47483: PUSH
47484: EMPTY
47485: LIST
47486: LIST
47487: PUSH
47488: LD_INT 0
47490: PUSH
47491: LD_INT 2
47493: PUSH
47494: EMPTY
47495: LIST
47496: LIST
47497: PUSH
47498: LD_INT 1
47500: NEG
47501: PUSH
47502: LD_INT 1
47504: PUSH
47505: EMPTY
47506: LIST
47507: LIST
47508: PUSH
47509: LD_INT 2
47511: NEG
47512: PUSH
47513: LD_INT 0
47515: PUSH
47516: EMPTY
47517: LIST
47518: LIST
47519: PUSH
47520: LD_INT 2
47522: NEG
47523: PUSH
47524: LD_INT 1
47526: NEG
47527: PUSH
47528: EMPTY
47529: LIST
47530: LIST
47531: PUSH
47532: LD_INT 2
47534: NEG
47535: PUSH
47536: LD_INT 2
47538: NEG
47539: PUSH
47540: EMPTY
47541: LIST
47542: LIST
47543: PUSH
47544: LD_INT 3
47546: PUSH
47547: LD_INT 1
47549: PUSH
47550: EMPTY
47551: LIST
47552: LIST
47553: PUSH
47554: LD_INT 3
47556: PUSH
47557: LD_INT 2
47559: PUSH
47560: EMPTY
47561: LIST
47562: LIST
47563: PUSH
47564: LD_INT 2
47566: PUSH
47567: LD_INT 3
47569: PUSH
47570: EMPTY
47571: LIST
47572: LIST
47573: PUSH
47574: LD_INT 1
47576: PUSH
47577: LD_INT 3
47579: PUSH
47580: EMPTY
47581: LIST
47582: LIST
47583: PUSH
47584: EMPTY
47585: LIST
47586: LIST
47587: LIST
47588: LIST
47589: LIST
47590: LIST
47591: LIST
47592: LIST
47593: LIST
47594: LIST
47595: LIST
47596: LIST
47597: LIST
47598: LIST
47599: LIST
47600: LIST
47601: LIST
47602: LIST
47603: LIST
47604: LIST
47605: LIST
47606: LIST
47607: LIST
47608: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
47609: LD_ADDR_VAR 0 26
47613: PUSH
47614: LD_INT 0
47616: PUSH
47617: LD_INT 0
47619: PUSH
47620: EMPTY
47621: LIST
47622: LIST
47623: PUSH
47624: LD_INT 0
47626: PUSH
47627: LD_INT 1
47629: NEG
47630: PUSH
47631: EMPTY
47632: LIST
47633: LIST
47634: PUSH
47635: LD_INT 1
47637: PUSH
47638: LD_INT 0
47640: PUSH
47641: EMPTY
47642: LIST
47643: LIST
47644: PUSH
47645: LD_INT 1
47647: PUSH
47648: LD_INT 1
47650: PUSH
47651: EMPTY
47652: LIST
47653: LIST
47654: PUSH
47655: LD_INT 0
47657: PUSH
47658: LD_INT 1
47660: PUSH
47661: EMPTY
47662: LIST
47663: LIST
47664: PUSH
47665: LD_INT 1
47667: NEG
47668: PUSH
47669: LD_INT 0
47671: PUSH
47672: EMPTY
47673: LIST
47674: LIST
47675: PUSH
47676: LD_INT 1
47678: NEG
47679: PUSH
47680: LD_INT 1
47682: NEG
47683: PUSH
47684: EMPTY
47685: LIST
47686: LIST
47687: PUSH
47688: LD_INT 1
47690: NEG
47691: PUSH
47692: LD_INT 2
47694: NEG
47695: PUSH
47696: EMPTY
47697: LIST
47698: LIST
47699: PUSH
47700: LD_INT 0
47702: PUSH
47703: LD_INT 2
47705: NEG
47706: PUSH
47707: EMPTY
47708: LIST
47709: LIST
47710: PUSH
47711: LD_INT 1
47713: PUSH
47714: LD_INT 1
47716: NEG
47717: PUSH
47718: EMPTY
47719: LIST
47720: LIST
47721: PUSH
47722: LD_INT 2
47724: PUSH
47725: LD_INT 0
47727: PUSH
47728: EMPTY
47729: LIST
47730: LIST
47731: PUSH
47732: LD_INT 2
47734: PUSH
47735: LD_INT 1
47737: PUSH
47738: EMPTY
47739: LIST
47740: LIST
47741: PUSH
47742: LD_INT 2
47744: PUSH
47745: LD_INT 2
47747: PUSH
47748: EMPTY
47749: LIST
47750: LIST
47751: PUSH
47752: LD_INT 1
47754: PUSH
47755: LD_INT 2
47757: PUSH
47758: EMPTY
47759: LIST
47760: LIST
47761: PUSH
47762: LD_INT 0
47764: PUSH
47765: LD_INT 2
47767: PUSH
47768: EMPTY
47769: LIST
47770: LIST
47771: PUSH
47772: LD_INT 1
47774: NEG
47775: PUSH
47776: LD_INT 1
47778: PUSH
47779: EMPTY
47780: LIST
47781: LIST
47782: PUSH
47783: LD_INT 2
47785: NEG
47786: PUSH
47787: LD_INT 0
47789: PUSH
47790: EMPTY
47791: LIST
47792: LIST
47793: PUSH
47794: LD_INT 2
47796: NEG
47797: PUSH
47798: LD_INT 1
47800: NEG
47801: PUSH
47802: EMPTY
47803: LIST
47804: LIST
47805: PUSH
47806: LD_INT 2
47808: NEG
47809: PUSH
47810: LD_INT 2
47812: NEG
47813: PUSH
47814: EMPTY
47815: LIST
47816: LIST
47817: PUSH
47818: LD_INT 2
47820: PUSH
47821: LD_INT 3
47823: PUSH
47824: EMPTY
47825: LIST
47826: LIST
47827: PUSH
47828: LD_INT 1
47830: PUSH
47831: LD_INT 3
47833: PUSH
47834: EMPTY
47835: LIST
47836: LIST
47837: PUSH
47838: LD_INT 1
47840: NEG
47841: PUSH
47842: LD_INT 2
47844: PUSH
47845: EMPTY
47846: LIST
47847: LIST
47848: PUSH
47849: LD_INT 2
47851: NEG
47852: PUSH
47853: LD_INT 1
47855: PUSH
47856: EMPTY
47857: LIST
47858: LIST
47859: PUSH
47860: EMPTY
47861: LIST
47862: LIST
47863: LIST
47864: LIST
47865: LIST
47866: LIST
47867: LIST
47868: LIST
47869: LIST
47870: LIST
47871: LIST
47872: LIST
47873: LIST
47874: LIST
47875: LIST
47876: LIST
47877: LIST
47878: LIST
47879: LIST
47880: LIST
47881: LIST
47882: LIST
47883: LIST
47884: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
47885: LD_ADDR_VAR 0 27
47889: PUSH
47890: LD_INT 0
47892: PUSH
47893: LD_INT 0
47895: PUSH
47896: EMPTY
47897: LIST
47898: LIST
47899: PUSH
47900: LD_INT 0
47902: PUSH
47903: LD_INT 1
47905: NEG
47906: PUSH
47907: EMPTY
47908: LIST
47909: LIST
47910: PUSH
47911: LD_INT 1
47913: PUSH
47914: LD_INT 0
47916: PUSH
47917: EMPTY
47918: LIST
47919: LIST
47920: PUSH
47921: LD_INT 1
47923: PUSH
47924: LD_INT 1
47926: PUSH
47927: EMPTY
47928: LIST
47929: LIST
47930: PUSH
47931: LD_INT 0
47933: PUSH
47934: LD_INT 1
47936: PUSH
47937: EMPTY
47938: LIST
47939: LIST
47940: PUSH
47941: LD_INT 1
47943: NEG
47944: PUSH
47945: LD_INT 0
47947: PUSH
47948: EMPTY
47949: LIST
47950: LIST
47951: PUSH
47952: LD_INT 1
47954: NEG
47955: PUSH
47956: LD_INT 1
47958: NEG
47959: PUSH
47960: EMPTY
47961: LIST
47962: LIST
47963: PUSH
47964: LD_INT 1
47966: NEG
47967: PUSH
47968: LD_INT 2
47970: NEG
47971: PUSH
47972: EMPTY
47973: LIST
47974: LIST
47975: PUSH
47976: LD_INT 0
47978: PUSH
47979: LD_INT 2
47981: NEG
47982: PUSH
47983: EMPTY
47984: LIST
47985: LIST
47986: PUSH
47987: LD_INT 1
47989: PUSH
47990: LD_INT 1
47992: NEG
47993: PUSH
47994: EMPTY
47995: LIST
47996: LIST
47997: PUSH
47998: LD_INT 2
48000: PUSH
48001: LD_INT 0
48003: PUSH
48004: EMPTY
48005: LIST
48006: LIST
48007: PUSH
48008: LD_INT 2
48010: PUSH
48011: LD_INT 1
48013: PUSH
48014: EMPTY
48015: LIST
48016: LIST
48017: PUSH
48018: LD_INT 2
48020: PUSH
48021: LD_INT 2
48023: PUSH
48024: EMPTY
48025: LIST
48026: LIST
48027: PUSH
48028: LD_INT 1
48030: PUSH
48031: LD_INT 2
48033: PUSH
48034: EMPTY
48035: LIST
48036: LIST
48037: PUSH
48038: LD_INT 0
48040: PUSH
48041: LD_INT 2
48043: PUSH
48044: EMPTY
48045: LIST
48046: LIST
48047: PUSH
48048: LD_INT 1
48050: NEG
48051: PUSH
48052: LD_INT 1
48054: PUSH
48055: EMPTY
48056: LIST
48057: LIST
48058: PUSH
48059: LD_INT 2
48061: NEG
48062: PUSH
48063: LD_INT 0
48065: PUSH
48066: EMPTY
48067: LIST
48068: LIST
48069: PUSH
48070: LD_INT 2
48072: NEG
48073: PUSH
48074: LD_INT 1
48076: NEG
48077: PUSH
48078: EMPTY
48079: LIST
48080: LIST
48081: PUSH
48082: LD_INT 2
48084: NEG
48085: PUSH
48086: LD_INT 2
48088: NEG
48089: PUSH
48090: EMPTY
48091: LIST
48092: LIST
48093: PUSH
48094: LD_INT 1
48096: NEG
48097: PUSH
48098: LD_INT 2
48100: PUSH
48101: EMPTY
48102: LIST
48103: LIST
48104: PUSH
48105: LD_INT 2
48107: NEG
48108: PUSH
48109: LD_INT 1
48111: PUSH
48112: EMPTY
48113: LIST
48114: LIST
48115: PUSH
48116: LD_INT 3
48118: NEG
48119: PUSH
48120: LD_INT 1
48122: NEG
48123: PUSH
48124: EMPTY
48125: LIST
48126: LIST
48127: PUSH
48128: LD_INT 3
48130: NEG
48131: PUSH
48132: LD_INT 2
48134: NEG
48135: PUSH
48136: EMPTY
48137: LIST
48138: LIST
48139: PUSH
48140: EMPTY
48141: LIST
48142: LIST
48143: LIST
48144: LIST
48145: LIST
48146: LIST
48147: LIST
48148: LIST
48149: LIST
48150: LIST
48151: LIST
48152: LIST
48153: LIST
48154: LIST
48155: LIST
48156: LIST
48157: LIST
48158: LIST
48159: LIST
48160: LIST
48161: LIST
48162: LIST
48163: LIST
48164: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
48165: LD_ADDR_VAR 0 28
48169: PUSH
48170: LD_INT 0
48172: PUSH
48173: LD_INT 0
48175: PUSH
48176: EMPTY
48177: LIST
48178: LIST
48179: PUSH
48180: LD_INT 0
48182: PUSH
48183: LD_INT 1
48185: NEG
48186: PUSH
48187: EMPTY
48188: LIST
48189: LIST
48190: PUSH
48191: LD_INT 1
48193: PUSH
48194: LD_INT 0
48196: PUSH
48197: EMPTY
48198: LIST
48199: LIST
48200: PUSH
48201: LD_INT 1
48203: PUSH
48204: LD_INT 1
48206: PUSH
48207: EMPTY
48208: LIST
48209: LIST
48210: PUSH
48211: LD_INT 0
48213: PUSH
48214: LD_INT 1
48216: PUSH
48217: EMPTY
48218: LIST
48219: LIST
48220: PUSH
48221: LD_INT 1
48223: NEG
48224: PUSH
48225: LD_INT 0
48227: PUSH
48228: EMPTY
48229: LIST
48230: LIST
48231: PUSH
48232: LD_INT 1
48234: NEG
48235: PUSH
48236: LD_INT 1
48238: NEG
48239: PUSH
48240: EMPTY
48241: LIST
48242: LIST
48243: PUSH
48244: LD_INT 1
48246: NEG
48247: PUSH
48248: LD_INT 2
48250: NEG
48251: PUSH
48252: EMPTY
48253: LIST
48254: LIST
48255: PUSH
48256: LD_INT 0
48258: PUSH
48259: LD_INT 2
48261: NEG
48262: PUSH
48263: EMPTY
48264: LIST
48265: LIST
48266: PUSH
48267: LD_INT 1
48269: PUSH
48270: LD_INT 1
48272: NEG
48273: PUSH
48274: EMPTY
48275: LIST
48276: LIST
48277: PUSH
48278: LD_INT 2
48280: PUSH
48281: LD_INT 0
48283: PUSH
48284: EMPTY
48285: LIST
48286: LIST
48287: PUSH
48288: LD_INT 2
48290: PUSH
48291: LD_INT 1
48293: PUSH
48294: EMPTY
48295: LIST
48296: LIST
48297: PUSH
48298: LD_INT 2
48300: PUSH
48301: LD_INT 2
48303: PUSH
48304: EMPTY
48305: LIST
48306: LIST
48307: PUSH
48308: LD_INT 1
48310: PUSH
48311: LD_INT 2
48313: PUSH
48314: EMPTY
48315: LIST
48316: LIST
48317: PUSH
48318: LD_INT 0
48320: PUSH
48321: LD_INT 2
48323: PUSH
48324: EMPTY
48325: LIST
48326: LIST
48327: PUSH
48328: LD_INT 1
48330: NEG
48331: PUSH
48332: LD_INT 1
48334: PUSH
48335: EMPTY
48336: LIST
48337: LIST
48338: PUSH
48339: LD_INT 2
48341: NEG
48342: PUSH
48343: LD_INT 0
48345: PUSH
48346: EMPTY
48347: LIST
48348: LIST
48349: PUSH
48350: LD_INT 2
48352: NEG
48353: PUSH
48354: LD_INT 1
48356: NEG
48357: PUSH
48358: EMPTY
48359: LIST
48360: LIST
48361: PUSH
48362: LD_INT 2
48364: NEG
48365: PUSH
48366: LD_INT 2
48368: NEG
48369: PUSH
48370: EMPTY
48371: LIST
48372: LIST
48373: PUSH
48374: LD_INT 2
48376: NEG
48377: PUSH
48378: LD_INT 3
48380: NEG
48381: PUSH
48382: EMPTY
48383: LIST
48384: LIST
48385: PUSH
48386: LD_INT 1
48388: NEG
48389: PUSH
48390: LD_INT 3
48392: NEG
48393: PUSH
48394: EMPTY
48395: LIST
48396: LIST
48397: PUSH
48398: LD_INT 3
48400: NEG
48401: PUSH
48402: LD_INT 1
48404: NEG
48405: PUSH
48406: EMPTY
48407: LIST
48408: LIST
48409: PUSH
48410: LD_INT 3
48412: NEG
48413: PUSH
48414: LD_INT 2
48416: NEG
48417: PUSH
48418: EMPTY
48419: LIST
48420: LIST
48421: PUSH
48422: EMPTY
48423: LIST
48424: LIST
48425: LIST
48426: LIST
48427: LIST
48428: LIST
48429: LIST
48430: LIST
48431: LIST
48432: LIST
48433: LIST
48434: LIST
48435: LIST
48436: LIST
48437: LIST
48438: LIST
48439: LIST
48440: LIST
48441: LIST
48442: LIST
48443: LIST
48444: LIST
48445: LIST
48446: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
48447: LD_ADDR_VAR 0 29
48451: PUSH
48452: LD_INT 0
48454: PUSH
48455: LD_INT 0
48457: PUSH
48458: EMPTY
48459: LIST
48460: LIST
48461: PUSH
48462: LD_INT 0
48464: PUSH
48465: LD_INT 1
48467: NEG
48468: PUSH
48469: EMPTY
48470: LIST
48471: LIST
48472: PUSH
48473: LD_INT 1
48475: PUSH
48476: LD_INT 0
48478: PUSH
48479: EMPTY
48480: LIST
48481: LIST
48482: PUSH
48483: LD_INT 1
48485: PUSH
48486: LD_INT 1
48488: PUSH
48489: EMPTY
48490: LIST
48491: LIST
48492: PUSH
48493: LD_INT 0
48495: PUSH
48496: LD_INT 1
48498: PUSH
48499: EMPTY
48500: LIST
48501: LIST
48502: PUSH
48503: LD_INT 1
48505: NEG
48506: PUSH
48507: LD_INT 0
48509: PUSH
48510: EMPTY
48511: LIST
48512: LIST
48513: PUSH
48514: LD_INT 1
48516: NEG
48517: PUSH
48518: LD_INT 1
48520: NEG
48521: PUSH
48522: EMPTY
48523: LIST
48524: LIST
48525: PUSH
48526: LD_INT 1
48528: NEG
48529: PUSH
48530: LD_INT 2
48532: NEG
48533: PUSH
48534: EMPTY
48535: LIST
48536: LIST
48537: PUSH
48538: LD_INT 0
48540: PUSH
48541: LD_INT 2
48543: NEG
48544: PUSH
48545: EMPTY
48546: LIST
48547: LIST
48548: PUSH
48549: LD_INT 1
48551: PUSH
48552: LD_INT 1
48554: NEG
48555: PUSH
48556: EMPTY
48557: LIST
48558: LIST
48559: PUSH
48560: LD_INT 2
48562: PUSH
48563: LD_INT 0
48565: PUSH
48566: EMPTY
48567: LIST
48568: LIST
48569: PUSH
48570: LD_INT 2
48572: PUSH
48573: LD_INT 1
48575: PUSH
48576: EMPTY
48577: LIST
48578: LIST
48579: PUSH
48580: LD_INT 1
48582: PUSH
48583: LD_INT 2
48585: PUSH
48586: EMPTY
48587: LIST
48588: LIST
48589: PUSH
48590: LD_INT 0
48592: PUSH
48593: LD_INT 2
48595: PUSH
48596: EMPTY
48597: LIST
48598: LIST
48599: PUSH
48600: LD_INT 1
48602: NEG
48603: PUSH
48604: LD_INT 1
48606: PUSH
48607: EMPTY
48608: LIST
48609: LIST
48610: PUSH
48611: LD_INT 2
48613: NEG
48614: PUSH
48615: LD_INT 1
48617: NEG
48618: PUSH
48619: EMPTY
48620: LIST
48621: LIST
48622: PUSH
48623: LD_INT 2
48625: NEG
48626: PUSH
48627: LD_INT 2
48629: NEG
48630: PUSH
48631: EMPTY
48632: LIST
48633: LIST
48634: PUSH
48635: LD_INT 2
48637: NEG
48638: PUSH
48639: LD_INT 3
48641: NEG
48642: PUSH
48643: EMPTY
48644: LIST
48645: LIST
48646: PUSH
48647: LD_INT 2
48649: PUSH
48650: LD_INT 1
48652: NEG
48653: PUSH
48654: EMPTY
48655: LIST
48656: LIST
48657: PUSH
48658: LD_INT 3
48660: PUSH
48661: LD_INT 1
48663: PUSH
48664: EMPTY
48665: LIST
48666: LIST
48667: PUSH
48668: LD_INT 1
48670: PUSH
48671: LD_INT 3
48673: PUSH
48674: EMPTY
48675: LIST
48676: LIST
48677: PUSH
48678: LD_INT 1
48680: NEG
48681: PUSH
48682: LD_INT 2
48684: PUSH
48685: EMPTY
48686: LIST
48687: LIST
48688: PUSH
48689: LD_INT 3
48691: NEG
48692: PUSH
48693: LD_INT 2
48695: NEG
48696: PUSH
48697: EMPTY
48698: LIST
48699: LIST
48700: PUSH
48701: EMPTY
48702: LIST
48703: LIST
48704: LIST
48705: LIST
48706: LIST
48707: LIST
48708: LIST
48709: LIST
48710: LIST
48711: LIST
48712: LIST
48713: LIST
48714: LIST
48715: LIST
48716: LIST
48717: LIST
48718: LIST
48719: LIST
48720: LIST
48721: LIST
48722: LIST
48723: LIST
48724: LIST
48725: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48726: LD_ADDR_VAR 0 30
48730: PUSH
48731: LD_INT 0
48733: PUSH
48734: LD_INT 0
48736: PUSH
48737: EMPTY
48738: LIST
48739: LIST
48740: PUSH
48741: LD_INT 0
48743: PUSH
48744: LD_INT 1
48746: NEG
48747: PUSH
48748: EMPTY
48749: LIST
48750: LIST
48751: PUSH
48752: LD_INT 1
48754: PUSH
48755: LD_INT 0
48757: PUSH
48758: EMPTY
48759: LIST
48760: LIST
48761: PUSH
48762: LD_INT 1
48764: PUSH
48765: LD_INT 1
48767: PUSH
48768: EMPTY
48769: LIST
48770: LIST
48771: PUSH
48772: LD_INT 0
48774: PUSH
48775: LD_INT 1
48777: PUSH
48778: EMPTY
48779: LIST
48780: LIST
48781: PUSH
48782: LD_INT 1
48784: NEG
48785: PUSH
48786: LD_INT 0
48788: PUSH
48789: EMPTY
48790: LIST
48791: LIST
48792: PUSH
48793: LD_INT 1
48795: NEG
48796: PUSH
48797: LD_INT 1
48799: NEG
48800: PUSH
48801: EMPTY
48802: LIST
48803: LIST
48804: PUSH
48805: LD_INT 1
48807: NEG
48808: PUSH
48809: LD_INT 2
48811: NEG
48812: PUSH
48813: EMPTY
48814: LIST
48815: LIST
48816: PUSH
48817: LD_INT 0
48819: PUSH
48820: LD_INT 2
48822: NEG
48823: PUSH
48824: EMPTY
48825: LIST
48826: LIST
48827: PUSH
48828: LD_INT 1
48830: PUSH
48831: LD_INT 1
48833: NEG
48834: PUSH
48835: EMPTY
48836: LIST
48837: LIST
48838: PUSH
48839: LD_INT 2
48841: PUSH
48842: LD_INT 0
48844: PUSH
48845: EMPTY
48846: LIST
48847: LIST
48848: PUSH
48849: LD_INT 2
48851: PUSH
48852: LD_INT 1
48854: PUSH
48855: EMPTY
48856: LIST
48857: LIST
48858: PUSH
48859: LD_INT 2
48861: PUSH
48862: LD_INT 2
48864: PUSH
48865: EMPTY
48866: LIST
48867: LIST
48868: PUSH
48869: LD_INT 1
48871: PUSH
48872: LD_INT 2
48874: PUSH
48875: EMPTY
48876: LIST
48877: LIST
48878: PUSH
48879: LD_INT 1
48881: NEG
48882: PUSH
48883: LD_INT 1
48885: PUSH
48886: EMPTY
48887: LIST
48888: LIST
48889: PUSH
48890: LD_INT 2
48892: NEG
48893: PUSH
48894: LD_INT 0
48896: PUSH
48897: EMPTY
48898: LIST
48899: LIST
48900: PUSH
48901: LD_INT 2
48903: NEG
48904: PUSH
48905: LD_INT 1
48907: NEG
48908: PUSH
48909: EMPTY
48910: LIST
48911: LIST
48912: PUSH
48913: LD_INT 1
48915: NEG
48916: PUSH
48917: LD_INT 3
48919: NEG
48920: PUSH
48921: EMPTY
48922: LIST
48923: LIST
48924: PUSH
48925: LD_INT 1
48927: PUSH
48928: LD_INT 2
48930: NEG
48931: PUSH
48932: EMPTY
48933: LIST
48934: LIST
48935: PUSH
48936: LD_INT 3
48938: PUSH
48939: LD_INT 2
48941: PUSH
48942: EMPTY
48943: LIST
48944: LIST
48945: PUSH
48946: LD_INT 2
48948: PUSH
48949: LD_INT 3
48951: PUSH
48952: EMPTY
48953: LIST
48954: LIST
48955: PUSH
48956: LD_INT 2
48958: NEG
48959: PUSH
48960: LD_INT 1
48962: PUSH
48963: EMPTY
48964: LIST
48965: LIST
48966: PUSH
48967: LD_INT 3
48969: NEG
48970: PUSH
48971: LD_INT 1
48973: NEG
48974: PUSH
48975: EMPTY
48976: LIST
48977: LIST
48978: PUSH
48979: EMPTY
48980: LIST
48981: LIST
48982: LIST
48983: LIST
48984: LIST
48985: LIST
48986: LIST
48987: LIST
48988: LIST
48989: LIST
48990: LIST
48991: LIST
48992: LIST
48993: LIST
48994: LIST
48995: LIST
48996: LIST
48997: LIST
48998: LIST
48999: LIST
49000: LIST
49001: LIST
49002: LIST
49003: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49004: LD_ADDR_VAR 0 31
49008: PUSH
49009: LD_INT 0
49011: PUSH
49012: LD_INT 0
49014: PUSH
49015: EMPTY
49016: LIST
49017: LIST
49018: PUSH
49019: LD_INT 0
49021: PUSH
49022: LD_INT 1
49024: NEG
49025: PUSH
49026: EMPTY
49027: LIST
49028: LIST
49029: PUSH
49030: LD_INT 1
49032: PUSH
49033: LD_INT 0
49035: PUSH
49036: EMPTY
49037: LIST
49038: LIST
49039: PUSH
49040: LD_INT 1
49042: PUSH
49043: LD_INT 1
49045: PUSH
49046: EMPTY
49047: LIST
49048: LIST
49049: PUSH
49050: LD_INT 0
49052: PUSH
49053: LD_INT 1
49055: PUSH
49056: EMPTY
49057: LIST
49058: LIST
49059: PUSH
49060: LD_INT 1
49062: NEG
49063: PUSH
49064: LD_INT 0
49066: PUSH
49067: EMPTY
49068: LIST
49069: LIST
49070: PUSH
49071: LD_INT 1
49073: NEG
49074: PUSH
49075: LD_INT 1
49077: NEG
49078: PUSH
49079: EMPTY
49080: LIST
49081: LIST
49082: PUSH
49083: LD_INT 1
49085: NEG
49086: PUSH
49087: LD_INT 2
49089: NEG
49090: PUSH
49091: EMPTY
49092: LIST
49093: LIST
49094: PUSH
49095: LD_INT 1
49097: PUSH
49098: LD_INT 1
49100: NEG
49101: PUSH
49102: EMPTY
49103: LIST
49104: LIST
49105: PUSH
49106: LD_INT 2
49108: PUSH
49109: LD_INT 0
49111: PUSH
49112: EMPTY
49113: LIST
49114: LIST
49115: PUSH
49116: LD_INT 2
49118: PUSH
49119: LD_INT 1
49121: PUSH
49122: EMPTY
49123: LIST
49124: LIST
49125: PUSH
49126: LD_INT 2
49128: PUSH
49129: LD_INT 2
49131: PUSH
49132: EMPTY
49133: LIST
49134: LIST
49135: PUSH
49136: LD_INT 1
49138: PUSH
49139: LD_INT 2
49141: PUSH
49142: EMPTY
49143: LIST
49144: LIST
49145: PUSH
49146: LD_INT 0
49148: PUSH
49149: LD_INT 2
49151: PUSH
49152: EMPTY
49153: LIST
49154: LIST
49155: PUSH
49156: LD_INT 1
49158: NEG
49159: PUSH
49160: LD_INT 1
49162: PUSH
49163: EMPTY
49164: LIST
49165: LIST
49166: PUSH
49167: LD_INT 2
49169: NEG
49170: PUSH
49171: LD_INT 1
49173: NEG
49174: PUSH
49175: EMPTY
49176: LIST
49177: LIST
49178: PUSH
49179: LD_INT 2
49181: NEG
49182: PUSH
49183: LD_INT 2
49185: NEG
49186: PUSH
49187: EMPTY
49188: LIST
49189: LIST
49190: PUSH
49191: LD_INT 2
49193: NEG
49194: PUSH
49195: LD_INT 3
49197: NEG
49198: PUSH
49199: EMPTY
49200: LIST
49201: LIST
49202: PUSH
49203: LD_INT 2
49205: PUSH
49206: LD_INT 1
49208: NEG
49209: PUSH
49210: EMPTY
49211: LIST
49212: LIST
49213: PUSH
49214: LD_INT 3
49216: PUSH
49217: LD_INT 1
49219: PUSH
49220: EMPTY
49221: LIST
49222: LIST
49223: PUSH
49224: LD_INT 1
49226: PUSH
49227: LD_INT 3
49229: PUSH
49230: EMPTY
49231: LIST
49232: LIST
49233: PUSH
49234: LD_INT 1
49236: NEG
49237: PUSH
49238: LD_INT 2
49240: PUSH
49241: EMPTY
49242: LIST
49243: LIST
49244: PUSH
49245: LD_INT 3
49247: NEG
49248: PUSH
49249: LD_INT 2
49251: NEG
49252: PUSH
49253: EMPTY
49254: LIST
49255: LIST
49256: PUSH
49257: EMPTY
49258: LIST
49259: LIST
49260: LIST
49261: LIST
49262: LIST
49263: LIST
49264: LIST
49265: LIST
49266: LIST
49267: LIST
49268: LIST
49269: LIST
49270: LIST
49271: LIST
49272: LIST
49273: LIST
49274: LIST
49275: LIST
49276: LIST
49277: LIST
49278: LIST
49279: LIST
49280: LIST
49281: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49282: LD_ADDR_VAR 0 32
49286: PUSH
49287: LD_INT 0
49289: PUSH
49290: LD_INT 0
49292: PUSH
49293: EMPTY
49294: LIST
49295: LIST
49296: PUSH
49297: LD_INT 0
49299: PUSH
49300: LD_INT 1
49302: NEG
49303: PUSH
49304: EMPTY
49305: LIST
49306: LIST
49307: PUSH
49308: LD_INT 1
49310: PUSH
49311: LD_INT 0
49313: PUSH
49314: EMPTY
49315: LIST
49316: LIST
49317: PUSH
49318: LD_INT 1
49320: PUSH
49321: LD_INT 1
49323: PUSH
49324: EMPTY
49325: LIST
49326: LIST
49327: PUSH
49328: LD_INT 0
49330: PUSH
49331: LD_INT 1
49333: PUSH
49334: EMPTY
49335: LIST
49336: LIST
49337: PUSH
49338: LD_INT 1
49340: NEG
49341: PUSH
49342: LD_INT 0
49344: PUSH
49345: EMPTY
49346: LIST
49347: LIST
49348: PUSH
49349: LD_INT 1
49351: NEG
49352: PUSH
49353: LD_INT 1
49355: NEG
49356: PUSH
49357: EMPTY
49358: LIST
49359: LIST
49360: PUSH
49361: LD_INT 1
49363: NEG
49364: PUSH
49365: LD_INT 2
49367: NEG
49368: PUSH
49369: EMPTY
49370: LIST
49371: LIST
49372: PUSH
49373: LD_INT 0
49375: PUSH
49376: LD_INT 2
49378: NEG
49379: PUSH
49380: EMPTY
49381: LIST
49382: LIST
49383: PUSH
49384: LD_INT 1
49386: PUSH
49387: LD_INT 1
49389: NEG
49390: PUSH
49391: EMPTY
49392: LIST
49393: LIST
49394: PUSH
49395: LD_INT 2
49397: PUSH
49398: LD_INT 1
49400: PUSH
49401: EMPTY
49402: LIST
49403: LIST
49404: PUSH
49405: LD_INT 2
49407: PUSH
49408: LD_INT 2
49410: PUSH
49411: EMPTY
49412: LIST
49413: LIST
49414: PUSH
49415: LD_INT 1
49417: PUSH
49418: LD_INT 2
49420: PUSH
49421: EMPTY
49422: LIST
49423: LIST
49424: PUSH
49425: LD_INT 0
49427: PUSH
49428: LD_INT 2
49430: PUSH
49431: EMPTY
49432: LIST
49433: LIST
49434: PUSH
49435: LD_INT 1
49437: NEG
49438: PUSH
49439: LD_INT 1
49441: PUSH
49442: EMPTY
49443: LIST
49444: LIST
49445: PUSH
49446: LD_INT 2
49448: NEG
49449: PUSH
49450: LD_INT 0
49452: PUSH
49453: EMPTY
49454: LIST
49455: LIST
49456: PUSH
49457: LD_INT 2
49459: NEG
49460: PUSH
49461: LD_INT 1
49463: NEG
49464: PUSH
49465: EMPTY
49466: LIST
49467: LIST
49468: PUSH
49469: LD_INT 1
49471: NEG
49472: PUSH
49473: LD_INT 3
49475: NEG
49476: PUSH
49477: EMPTY
49478: LIST
49479: LIST
49480: PUSH
49481: LD_INT 1
49483: PUSH
49484: LD_INT 2
49486: NEG
49487: PUSH
49488: EMPTY
49489: LIST
49490: LIST
49491: PUSH
49492: LD_INT 3
49494: PUSH
49495: LD_INT 2
49497: PUSH
49498: EMPTY
49499: LIST
49500: LIST
49501: PUSH
49502: LD_INT 2
49504: PUSH
49505: LD_INT 3
49507: PUSH
49508: EMPTY
49509: LIST
49510: LIST
49511: PUSH
49512: LD_INT 2
49514: NEG
49515: PUSH
49516: LD_INT 1
49518: PUSH
49519: EMPTY
49520: LIST
49521: LIST
49522: PUSH
49523: LD_INT 3
49525: NEG
49526: PUSH
49527: LD_INT 1
49529: NEG
49530: PUSH
49531: EMPTY
49532: LIST
49533: LIST
49534: PUSH
49535: EMPTY
49536: LIST
49537: LIST
49538: LIST
49539: LIST
49540: LIST
49541: LIST
49542: LIST
49543: LIST
49544: LIST
49545: LIST
49546: LIST
49547: LIST
49548: LIST
49549: LIST
49550: LIST
49551: LIST
49552: LIST
49553: LIST
49554: LIST
49555: LIST
49556: LIST
49557: LIST
49558: LIST
49559: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49560: LD_ADDR_VAR 0 33
49564: PUSH
49565: LD_INT 0
49567: PUSH
49568: LD_INT 0
49570: PUSH
49571: EMPTY
49572: LIST
49573: LIST
49574: PUSH
49575: LD_INT 0
49577: PUSH
49578: LD_INT 1
49580: NEG
49581: PUSH
49582: EMPTY
49583: LIST
49584: LIST
49585: PUSH
49586: LD_INT 1
49588: PUSH
49589: LD_INT 0
49591: PUSH
49592: EMPTY
49593: LIST
49594: LIST
49595: PUSH
49596: LD_INT 1
49598: PUSH
49599: LD_INT 1
49601: PUSH
49602: EMPTY
49603: LIST
49604: LIST
49605: PUSH
49606: LD_INT 0
49608: PUSH
49609: LD_INT 1
49611: PUSH
49612: EMPTY
49613: LIST
49614: LIST
49615: PUSH
49616: LD_INT 1
49618: NEG
49619: PUSH
49620: LD_INT 0
49622: PUSH
49623: EMPTY
49624: LIST
49625: LIST
49626: PUSH
49627: LD_INT 1
49629: NEG
49630: PUSH
49631: LD_INT 1
49633: NEG
49634: PUSH
49635: EMPTY
49636: LIST
49637: LIST
49638: PUSH
49639: LD_INT 1
49641: NEG
49642: PUSH
49643: LD_INT 2
49645: NEG
49646: PUSH
49647: EMPTY
49648: LIST
49649: LIST
49650: PUSH
49651: LD_INT 1
49653: PUSH
49654: LD_INT 1
49656: NEG
49657: PUSH
49658: EMPTY
49659: LIST
49660: LIST
49661: PUSH
49662: LD_INT 2
49664: PUSH
49665: LD_INT 0
49667: PUSH
49668: EMPTY
49669: LIST
49670: LIST
49671: PUSH
49672: LD_INT 2
49674: PUSH
49675: LD_INT 1
49677: PUSH
49678: EMPTY
49679: LIST
49680: LIST
49681: PUSH
49682: LD_INT 1
49684: PUSH
49685: LD_INT 2
49687: PUSH
49688: EMPTY
49689: LIST
49690: LIST
49691: PUSH
49692: LD_INT 0
49694: PUSH
49695: LD_INT 2
49697: PUSH
49698: EMPTY
49699: LIST
49700: LIST
49701: PUSH
49702: LD_INT 1
49704: NEG
49705: PUSH
49706: LD_INT 1
49708: PUSH
49709: EMPTY
49710: LIST
49711: LIST
49712: PUSH
49713: LD_INT 2
49715: NEG
49716: PUSH
49717: LD_INT 0
49719: PUSH
49720: EMPTY
49721: LIST
49722: LIST
49723: PUSH
49724: LD_INT 2
49726: NEG
49727: PUSH
49728: LD_INT 1
49730: NEG
49731: PUSH
49732: EMPTY
49733: LIST
49734: LIST
49735: PUSH
49736: LD_INT 2
49738: NEG
49739: PUSH
49740: LD_INT 2
49742: NEG
49743: PUSH
49744: EMPTY
49745: LIST
49746: LIST
49747: PUSH
49748: LD_INT 2
49750: NEG
49751: PUSH
49752: LD_INT 3
49754: NEG
49755: PUSH
49756: EMPTY
49757: LIST
49758: LIST
49759: PUSH
49760: LD_INT 2
49762: PUSH
49763: LD_INT 1
49765: NEG
49766: PUSH
49767: EMPTY
49768: LIST
49769: LIST
49770: PUSH
49771: LD_INT 3
49773: PUSH
49774: LD_INT 1
49776: PUSH
49777: EMPTY
49778: LIST
49779: LIST
49780: PUSH
49781: LD_INT 1
49783: PUSH
49784: LD_INT 3
49786: PUSH
49787: EMPTY
49788: LIST
49789: LIST
49790: PUSH
49791: LD_INT 1
49793: NEG
49794: PUSH
49795: LD_INT 2
49797: PUSH
49798: EMPTY
49799: LIST
49800: LIST
49801: PUSH
49802: LD_INT 3
49804: NEG
49805: PUSH
49806: LD_INT 2
49808: NEG
49809: PUSH
49810: EMPTY
49811: LIST
49812: LIST
49813: PUSH
49814: EMPTY
49815: LIST
49816: LIST
49817: LIST
49818: LIST
49819: LIST
49820: LIST
49821: LIST
49822: LIST
49823: LIST
49824: LIST
49825: LIST
49826: LIST
49827: LIST
49828: LIST
49829: LIST
49830: LIST
49831: LIST
49832: LIST
49833: LIST
49834: LIST
49835: LIST
49836: LIST
49837: LIST
49838: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49839: LD_ADDR_VAR 0 34
49843: PUSH
49844: LD_INT 0
49846: PUSH
49847: LD_INT 0
49849: PUSH
49850: EMPTY
49851: LIST
49852: LIST
49853: PUSH
49854: LD_INT 0
49856: PUSH
49857: LD_INT 1
49859: NEG
49860: PUSH
49861: EMPTY
49862: LIST
49863: LIST
49864: PUSH
49865: LD_INT 1
49867: PUSH
49868: LD_INT 0
49870: PUSH
49871: EMPTY
49872: LIST
49873: LIST
49874: PUSH
49875: LD_INT 1
49877: PUSH
49878: LD_INT 1
49880: PUSH
49881: EMPTY
49882: LIST
49883: LIST
49884: PUSH
49885: LD_INT 0
49887: PUSH
49888: LD_INT 1
49890: PUSH
49891: EMPTY
49892: LIST
49893: LIST
49894: PUSH
49895: LD_INT 1
49897: NEG
49898: PUSH
49899: LD_INT 0
49901: PUSH
49902: EMPTY
49903: LIST
49904: LIST
49905: PUSH
49906: LD_INT 1
49908: NEG
49909: PUSH
49910: LD_INT 1
49912: NEG
49913: PUSH
49914: EMPTY
49915: LIST
49916: LIST
49917: PUSH
49918: LD_INT 1
49920: NEG
49921: PUSH
49922: LD_INT 2
49924: NEG
49925: PUSH
49926: EMPTY
49927: LIST
49928: LIST
49929: PUSH
49930: LD_INT 0
49932: PUSH
49933: LD_INT 2
49935: NEG
49936: PUSH
49937: EMPTY
49938: LIST
49939: LIST
49940: PUSH
49941: LD_INT 1
49943: PUSH
49944: LD_INT 1
49946: NEG
49947: PUSH
49948: EMPTY
49949: LIST
49950: LIST
49951: PUSH
49952: LD_INT 2
49954: PUSH
49955: LD_INT 1
49957: PUSH
49958: EMPTY
49959: LIST
49960: LIST
49961: PUSH
49962: LD_INT 2
49964: PUSH
49965: LD_INT 2
49967: PUSH
49968: EMPTY
49969: LIST
49970: LIST
49971: PUSH
49972: LD_INT 1
49974: PUSH
49975: LD_INT 2
49977: PUSH
49978: EMPTY
49979: LIST
49980: LIST
49981: PUSH
49982: LD_INT 1
49984: NEG
49985: PUSH
49986: LD_INT 1
49988: PUSH
49989: EMPTY
49990: LIST
49991: LIST
49992: PUSH
49993: LD_INT 2
49995: NEG
49996: PUSH
49997: LD_INT 0
49999: PUSH
50000: EMPTY
50001: LIST
50002: LIST
50003: PUSH
50004: LD_INT 2
50006: NEG
50007: PUSH
50008: LD_INT 1
50010: NEG
50011: PUSH
50012: EMPTY
50013: LIST
50014: LIST
50015: PUSH
50016: LD_INT 2
50018: NEG
50019: PUSH
50020: LD_INT 2
50022: NEG
50023: PUSH
50024: EMPTY
50025: LIST
50026: LIST
50027: PUSH
50028: LD_INT 1
50030: NEG
50031: PUSH
50032: LD_INT 3
50034: NEG
50035: PUSH
50036: EMPTY
50037: LIST
50038: LIST
50039: PUSH
50040: LD_INT 1
50042: PUSH
50043: LD_INT 2
50045: NEG
50046: PUSH
50047: EMPTY
50048: LIST
50049: LIST
50050: PUSH
50051: LD_INT 3
50053: PUSH
50054: LD_INT 2
50056: PUSH
50057: EMPTY
50058: LIST
50059: LIST
50060: PUSH
50061: LD_INT 2
50063: PUSH
50064: LD_INT 3
50066: PUSH
50067: EMPTY
50068: LIST
50069: LIST
50070: PUSH
50071: LD_INT 2
50073: NEG
50074: PUSH
50075: LD_INT 1
50077: PUSH
50078: EMPTY
50079: LIST
50080: LIST
50081: PUSH
50082: LD_INT 3
50084: NEG
50085: PUSH
50086: LD_INT 1
50088: NEG
50089: PUSH
50090: EMPTY
50091: LIST
50092: LIST
50093: PUSH
50094: EMPTY
50095: LIST
50096: LIST
50097: LIST
50098: LIST
50099: LIST
50100: LIST
50101: LIST
50102: LIST
50103: LIST
50104: LIST
50105: LIST
50106: LIST
50107: LIST
50108: LIST
50109: LIST
50110: LIST
50111: LIST
50112: LIST
50113: LIST
50114: LIST
50115: LIST
50116: LIST
50117: LIST
50118: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
50119: LD_ADDR_VAR 0 35
50123: PUSH
50124: LD_INT 0
50126: PUSH
50127: LD_INT 0
50129: PUSH
50130: EMPTY
50131: LIST
50132: LIST
50133: PUSH
50134: LD_INT 0
50136: PUSH
50137: LD_INT 1
50139: NEG
50140: PUSH
50141: EMPTY
50142: LIST
50143: LIST
50144: PUSH
50145: LD_INT 1
50147: PUSH
50148: LD_INT 0
50150: PUSH
50151: EMPTY
50152: LIST
50153: LIST
50154: PUSH
50155: LD_INT 1
50157: PUSH
50158: LD_INT 1
50160: PUSH
50161: EMPTY
50162: LIST
50163: LIST
50164: PUSH
50165: LD_INT 0
50167: PUSH
50168: LD_INT 1
50170: PUSH
50171: EMPTY
50172: LIST
50173: LIST
50174: PUSH
50175: LD_INT 1
50177: NEG
50178: PUSH
50179: LD_INT 0
50181: PUSH
50182: EMPTY
50183: LIST
50184: LIST
50185: PUSH
50186: LD_INT 1
50188: NEG
50189: PUSH
50190: LD_INT 1
50192: NEG
50193: PUSH
50194: EMPTY
50195: LIST
50196: LIST
50197: PUSH
50198: LD_INT 2
50200: PUSH
50201: LD_INT 1
50203: PUSH
50204: EMPTY
50205: LIST
50206: LIST
50207: PUSH
50208: LD_INT 2
50210: NEG
50211: PUSH
50212: LD_INT 1
50214: NEG
50215: PUSH
50216: EMPTY
50217: LIST
50218: LIST
50219: PUSH
50220: EMPTY
50221: LIST
50222: LIST
50223: LIST
50224: LIST
50225: LIST
50226: LIST
50227: LIST
50228: LIST
50229: LIST
50230: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
50231: LD_ADDR_VAR 0 36
50235: PUSH
50236: LD_INT 0
50238: PUSH
50239: LD_INT 0
50241: PUSH
50242: EMPTY
50243: LIST
50244: LIST
50245: PUSH
50246: LD_INT 0
50248: PUSH
50249: LD_INT 1
50251: NEG
50252: PUSH
50253: EMPTY
50254: LIST
50255: LIST
50256: PUSH
50257: LD_INT 1
50259: PUSH
50260: LD_INT 0
50262: PUSH
50263: EMPTY
50264: LIST
50265: LIST
50266: PUSH
50267: LD_INT 1
50269: PUSH
50270: LD_INT 1
50272: PUSH
50273: EMPTY
50274: LIST
50275: LIST
50276: PUSH
50277: LD_INT 0
50279: PUSH
50280: LD_INT 1
50282: PUSH
50283: EMPTY
50284: LIST
50285: LIST
50286: PUSH
50287: LD_INT 1
50289: NEG
50290: PUSH
50291: LD_INT 0
50293: PUSH
50294: EMPTY
50295: LIST
50296: LIST
50297: PUSH
50298: LD_INT 1
50300: NEG
50301: PUSH
50302: LD_INT 1
50304: NEG
50305: PUSH
50306: EMPTY
50307: LIST
50308: LIST
50309: PUSH
50310: LD_INT 1
50312: NEG
50313: PUSH
50314: LD_INT 2
50316: NEG
50317: PUSH
50318: EMPTY
50319: LIST
50320: LIST
50321: PUSH
50322: LD_INT 1
50324: PUSH
50325: LD_INT 2
50327: PUSH
50328: EMPTY
50329: LIST
50330: LIST
50331: PUSH
50332: EMPTY
50333: LIST
50334: LIST
50335: LIST
50336: LIST
50337: LIST
50338: LIST
50339: LIST
50340: LIST
50341: LIST
50342: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
50343: LD_ADDR_VAR 0 37
50347: PUSH
50348: LD_INT 0
50350: PUSH
50351: LD_INT 0
50353: PUSH
50354: EMPTY
50355: LIST
50356: LIST
50357: PUSH
50358: LD_INT 0
50360: PUSH
50361: LD_INT 1
50363: NEG
50364: PUSH
50365: EMPTY
50366: LIST
50367: LIST
50368: PUSH
50369: LD_INT 1
50371: PUSH
50372: LD_INT 0
50374: PUSH
50375: EMPTY
50376: LIST
50377: LIST
50378: PUSH
50379: LD_INT 1
50381: PUSH
50382: LD_INT 1
50384: PUSH
50385: EMPTY
50386: LIST
50387: LIST
50388: PUSH
50389: LD_INT 0
50391: PUSH
50392: LD_INT 1
50394: PUSH
50395: EMPTY
50396: LIST
50397: LIST
50398: PUSH
50399: LD_INT 1
50401: NEG
50402: PUSH
50403: LD_INT 0
50405: PUSH
50406: EMPTY
50407: LIST
50408: LIST
50409: PUSH
50410: LD_INT 1
50412: NEG
50413: PUSH
50414: LD_INT 1
50416: NEG
50417: PUSH
50418: EMPTY
50419: LIST
50420: LIST
50421: PUSH
50422: LD_INT 1
50424: PUSH
50425: LD_INT 1
50427: NEG
50428: PUSH
50429: EMPTY
50430: LIST
50431: LIST
50432: PUSH
50433: LD_INT 1
50435: NEG
50436: PUSH
50437: LD_INT 1
50439: PUSH
50440: EMPTY
50441: LIST
50442: LIST
50443: PUSH
50444: EMPTY
50445: LIST
50446: LIST
50447: LIST
50448: LIST
50449: LIST
50450: LIST
50451: LIST
50452: LIST
50453: LIST
50454: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
50455: LD_ADDR_VAR 0 38
50459: PUSH
50460: LD_INT 0
50462: PUSH
50463: LD_INT 0
50465: PUSH
50466: EMPTY
50467: LIST
50468: LIST
50469: PUSH
50470: LD_INT 0
50472: PUSH
50473: LD_INT 1
50475: NEG
50476: PUSH
50477: EMPTY
50478: LIST
50479: LIST
50480: PUSH
50481: LD_INT 1
50483: PUSH
50484: LD_INT 0
50486: PUSH
50487: EMPTY
50488: LIST
50489: LIST
50490: PUSH
50491: LD_INT 1
50493: PUSH
50494: LD_INT 1
50496: PUSH
50497: EMPTY
50498: LIST
50499: LIST
50500: PUSH
50501: LD_INT 0
50503: PUSH
50504: LD_INT 1
50506: PUSH
50507: EMPTY
50508: LIST
50509: LIST
50510: PUSH
50511: LD_INT 1
50513: NEG
50514: PUSH
50515: LD_INT 0
50517: PUSH
50518: EMPTY
50519: LIST
50520: LIST
50521: PUSH
50522: LD_INT 1
50524: NEG
50525: PUSH
50526: LD_INT 1
50528: NEG
50529: PUSH
50530: EMPTY
50531: LIST
50532: LIST
50533: PUSH
50534: LD_INT 2
50536: PUSH
50537: LD_INT 1
50539: PUSH
50540: EMPTY
50541: LIST
50542: LIST
50543: PUSH
50544: LD_INT 2
50546: NEG
50547: PUSH
50548: LD_INT 1
50550: NEG
50551: PUSH
50552: EMPTY
50553: LIST
50554: LIST
50555: PUSH
50556: EMPTY
50557: LIST
50558: LIST
50559: LIST
50560: LIST
50561: LIST
50562: LIST
50563: LIST
50564: LIST
50565: LIST
50566: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
50567: LD_ADDR_VAR 0 39
50571: PUSH
50572: LD_INT 0
50574: PUSH
50575: LD_INT 0
50577: PUSH
50578: EMPTY
50579: LIST
50580: LIST
50581: PUSH
50582: LD_INT 0
50584: PUSH
50585: LD_INT 1
50587: NEG
50588: PUSH
50589: EMPTY
50590: LIST
50591: LIST
50592: PUSH
50593: LD_INT 1
50595: PUSH
50596: LD_INT 0
50598: PUSH
50599: EMPTY
50600: LIST
50601: LIST
50602: PUSH
50603: LD_INT 1
50605: PUSH
50606: LD_INT 1
50608: PUSH
50609: EMPTY
50610: LIST
50611: LIST
50612: PUSH
50613: LD_INT 0
50615: PUSH
50616: LD_INT 1
50618: PUSH
50619: EMPTY
50620: LIST
50621: LIST
50622: PUSH
50623: LD_INT 1
50625: NEG
50626: PUSH
50627: LD_INT 0
50629: PUSH
50630: EMPTY
50631: LIST
50632: LIST
50633: PUSH
50634: LD_INT 1
50636: NEG
50637: PUSH
50638: LD_INT 1
50640: NEG
50641: PUSH
50642: EMPTY
50643: LIST
50644: LIST
50645: PUSH
50646: LD_INT 1
50648: NEG
50649: PUSH
50650: LD_INT 2
50652: NEG
50653: PUSH
50654: EMPTY
50655: LIST
50656: LIST
50657: PUSH
50658: LD_INT 1
50660: PUSH
50661: LD_INT 2
50663: PUSH
50664: EMPTY
50665: LIST
50666: LIST
50667: PUSH
50668: EMPTY
50669: LIST
50670: LIST
50671: LIST
50672: LIST
50673: LIST
50674: LIST
50675: LIST
50676: LIST
50677: LIST
50678: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
50679: LD_ADDR_VAR 0 40
50683: PUSH
50684: LD_INT 0
50686: PUSH
50687: LD_INT 0
50689: PUSH
50690: EMPTY
50691: LIST
50692: LIST
50693: PUSH
50694: LD_INT 0
50696: PUSH
50697: LD_INT 1
50699: NEG
50700: PUSH
50701: EMPTY
50702: LIST
50703: LIST
50704: PUSH
50705: LD_INT 1
50707: PUSH
50708: LD_INT 0
50710: PUSH
50711: EMPTY
50712: LIST
50713: LIST
50714: PUSH
50715: LD_INT 1
50717: PUSH
50718: LD_INT 1
50720: PUSH
50721: EMPTY
50722: LIST
50723: LIST
50724: PUSH
50725: LD_INT 0
50727: PUSH
50728: LD_INT 1
50730: PUSH
50731: EMPTY
50732: LIST
50733: LIST
50734: PUSH
50735: LD_INT 1
50737: NEG
50738: PUSH
50739: LD_INT 0
50741: PUSH
50742: EMPTY
50743: LIST
50744: LIST
50745: PUSH
50746: LD_INT 1
50748: NEG
50749: PUSH
50750: LD_INT 1
50752: NEG
50753: PUSH
50754: EMPTY
50755: LIST
50756: LIST
50757: PUSH
50758: LD_INT 1
50760: PUSH
50761: LD_INT 1
50763: NEG
50764: PUSH
50765: EMPTY
50766: LIST
50767: LIST
50768: PUSH
50769: LD_INT 1
50771: NEG
50772: PUSH
50773: LD_INT 1
50775: PUSH
50776: EMPTY
50777: LIST
50778: LIST
50779: PUSH
50780: EMPTY
50781: LIST
50782: LIST
50783: LIST
50784: LIST
50785: LIST
50786: LIST
50787: LIST
50788: LIST
50789: LIST
50790: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50791: LD_ADDR_VAR 0 41
50795: PUSH
50796: LD_INT 0
50798: PUSH
50799: LD_INT 0
50801: PUSH
50802: EMPTY
50803: LIST
50804: LIST
50805: PUSH
50806: LD_INT 0
50808: PUSH
50809: LD_INT 1
50811: NEG
50812: PUSH
50813: EMPTY
50814: LIST
50815: LIST
50816: PUSH
50817: LD_INT 1
50819: PUSH
50820: LD_INT 0
50822: PUSH
50823: EMPTY
50824: LIST
50825: LIST
50826: PUSH
50827: LD_INT 1
50829: PUSH
50830: LD_INT 1
50832: PUSH
50833: EMPTY
50834: LIST
50835: LIST
50836: PUSH
50837: LD_INT 0
50839: PUSH
50840: LD_INT 1
50842: PUSH
50843: EMPTY
50844: LIST
50845: LIST
50846: PUSH
50847: LD_INT 1
50849: NEG
50850: PUSH
50851: LD_INT 0
50853: PUSH
50854: EMPTY
50855: LIST
50856: LIST
50857: PUSH
50858: LD_INT 1
50860: NEG
50861: PUSH
50862: LD_INT 1
50864: NEG
50865: PUSH
50866: EMPTY
50867: LIST
50868: LIST
50869: PUSH
50870: LD_INT 1
50872: NEG
50873: PUSH
50874: LD_INT 2
50876: NEG
50877: PUSH
50878: EMPTY
50879: LIST
50880: LIST
50881: PUSH
50882: LD_INT 1
50884: PUSH
50885: LD_INT 1
50887: NEG
50888: PUSH
50889: EMPTY
50890: LIST
50891: LIST
50892: PUSH
50893: LD_INT 2
50895: PUSH
50896: LD_INT 0
50898: PUSH
50899: EMPTY
50900: LIST
50901: LIST
50902: PUSH
50903: LD_INT 2
50905: PUSH
50906: LD_INT 1
50908: PUSH
50909: EMPTY
50910: LIST
50911: LIST
50912: PUSH
50913: LD_INT 2
50915: PUSH
50916: LD_INT 2
50918: PUSH
50919: EMPTY
50920: LIST
50921: LIST
50922: PUSH
50923: LD_INT 1
50925: PUSH
50926: LD_INT 2
50928: PUSH
50929: EMPTY
50930: LIST
50931: LIST
50932: PUSH
50933: LD_INT 1
50935: NEG
50936: PUSH
50937: LD_INT 1
50939: PUSH
50940: EMPTY
50941: LIST
50942: LIST
50943: PUSH
50944: LD_INT 2
50946: NEG
50947: PUSH
50948: LD_INT 0
50950: PUSH
50951: EMPTY
50952: LIST
50953: LIST
50954: PUSH
50955: LD_INT 2
50957: NEG
50958: PUSH
50959: LD_INT 1
50961: NEG
50962: PUSH
50963: EMPTY
50964: LIST
50965: LIST
50966: PUSH
50967: LD_INT 2
50969: NEG
50970: PUSH
50971: LD_INT 2
50973: NEG
50974: PUSH
50975: EMPTY
50976: LIST
50977: LIST
50978: PUSH
50979: LD_INT 2
50981: NEG
50982: PUSH
50983: LD_INT 3
50985: NEG
50986: PUSH
50987: EMPTY
50988: LIST
50989: LIST
50990: PUSH
50991: LD_INT 2
50993: PUSH
50994: LD_INT 1
50996: NEG
50997: PUSH
50998: EMPTY
50999: LIST
51000: LIST
51001: PUSH
51002: LD_INT 3
51004: PUSH
51005: LD_INT 0
51007: PUSH
51008: EMPTY
51009: LIST
51010: LIST
51011: PUSH
51012: LD_INT 3
51014: PUSH
51015: LD_INT 1
51017: PUSH
51018: EMPTY
51019: LIST
51020: LIST
51021: PUSH
51022: LD_INT 3
51024: PUSH
51025: LD_INT 2
51027: PUSH
51028: EMPTY
51029: LIST
51030: LIST
51031: PUSH
51032: LD_INT 3
51034: PUSH
51035: LD_INT 3
51037: PUSH
51038: EMPTY
51039: LIST
51040: LIST
51041: PUSH
51042: LD_INT 2
51044: PUSH
51045: LD_INT 3
51047: PUSH
51048: EMPTY
51049: LIST
51050: LIST
51051: PUSH
51052: LD_INT 2
51054: NEG
51055: PUSH
51056: LD_INT 1
51058: PUSH
51059: EMPTY
51060: LIST
51061: LIST
51062: PUSH
51063: LD_INT 3
51065: NEG
51066: PUSH
51067: LD_INT 0
51069: PUSH
51070: EMPTY
51071: LIST
51072: LIST
51073: PUSH
51074: LD_INT 3
51076: NEG
51077: PUSH
51078: LD_INT 1
51080: NEG
51081: PUSH
51082: EMPTY
51083: LIST
51084: LIST
51085: PUSH
51086: LD_INT 3
51088: NEG
51089: PUSH
51090: LD_INT 2
51092: NEG
51093: PUSH
51094: EMPTY
51095: LIST
51096: LIST
51097: PUSH
51098: LD_INT 3
51100: NEG
51101: PUSH
51102: LD_INT 3
51104: NEG
51105: PUSH
51106: EMPTY
51107: LIST
51108: LIST
51109: PUSH
51110: EMPTY
51111: LIST
51112: LIST
51113: LIST
51114: LIST
51115: LIST
51116: LIST
51117: LIST
51118: LIST
51119: LIST
51120: LIST
51121: LIST
51122: LIST
51123: LIST
51124: LIST
51125: LIST
51126: LIST
51127: LIST
51128: LIST
51129: LIST
51130: LIST
51131: LIST
51132: LIST
51133: LIST
51134: LIST
51135: LIST
51136: LIST
51137: LIST
51138: LIST
51139: LIST
51140: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51141: LD_ADDR_VAR 0 42
51145: PUSH
51146: LD_INT 0
51148: PUSH
51149: LD_INT 0
51151: PUSH
51152: EMPTY
51153: LIST
51154: LIST
51155: PUSH
51156: LD_INT 0
51158: PUSH
51159: LD_INT 1
51161: NEG
51162: PUSH
51163: EMPTY
51164: LIST
51165: LIST
51166: PUSH
51167: LD_INT 1
51169: PUSH
51170: LD_INT 0
51172: PUSH
51173: EMPTY
51174: LIST
51175: LIST
51176: PUSH
51177: LD_INT 1
51179: PUSH
51180: LD_INT 1
51182: PUSH
51183: EMPTY
51184: LIST
51185: LIST
51186: PUSH
51187: LD_INT 0
51189: PUSH
51190: LD_INT 1
51192: PUSH
51193: EMPTY
51194: LIST
51195: LIST
51196: PUSH
51197: LD_INT 1
51199: NEG
51200: PUSH
51201: LD_INT 0
51203: PUSH
51204: EMPTY
51205: LIST
51206: LIST
51207: PUSH
51208: LD_INT 1
51210: NEG
51211: PUSH
51212: LD_INT 1
51214: NEG
51215: PUSH
51216: EMPTY
51217: LIST
51218: LIST
51219: PUSH
51220: LD_INT 1
51222: NEG
51223: PUSH
51224: LD_INT 2
51226: NEG
51227: PUSH
51228: EMPTY
51229: LIST
51230: LIST
51231: PUSH
51232: LD_INT 0
51234: PUSH
51235: LD_INT 2
51237: NEG
51238: PUSH
51239: EMPTY
51240: LIST
51241: LIST
51242: PUSH
51243: LD_INT 1
51245: PUSH
51246: LD_INT 1
51248: NEG
51249: PUSH
51250: EMPTY
51251: LIST
51252: LIST
51253: PUSH
51254: LD_INT 2
51256: PUSH
51257: LD_INT 1
51259: PUSH
51260: EMPTY
51261: LIST
51262: LIST
51263: PUSH
51264: LD_INT 2
51266: PUSH
51267: LD_INT 2
51269: PUSH
51270: EMPTY
51271: LIST
51272: LIST
51273: PUSH
51274: LD_INT 1
51276: PUSH
51277: LD_INT 2
51279: PUSH
51280: EMPTY
51281: LIST
51282: LIST
51283: PUSH
51284: LD_INT 0
51286: PUSH
51287: LD_INT 2
51289: PUSH
51290: EMPTY
51291: LIST
51292: LIST
51293: PUSH
51294: LD_INT 1
51296: NEG
51297: PUSH
51298: LD_INT 1
51300: PUSH
51301: EMPTY
51302: LIST
51303: LIST
51304: PUSH
51305: LD_INT 2
51307: NEG
51308: PUSH
51309: LD_INT 1
51311: NEG
51312: PUSH
51313: EMPTY
51314: LIST
51315: LIST
51316: PUSH
51317: LD_INT 2
51319: NEG
51320: PUSH
51321: LD_INT 2
51323: NEG
51324: PUSH
51325: EMPTY
51326: LIST
51327: LIST
51328: PUSH
51329: LD_INT 2
51331: NEG
51332: PUSH
51333: LD_INT 3
51335: NEG
51336: PUSH
51337: EMPTY
51338: LIST
51339: LIST
51340: PUSH
51341: LD_INT 1
51343: NEG
51344: PUSH
51345: LD_INT 3
51347: NEG
51348: PUSH
51349: EMPTY
51350: LIST
51351: LIST
51352: PUSH
51353: LD_INT 0
51355: PUSH
51356: LD_INT 3
51358: NEG
51359: PUSH
51360: EMPTY
51361: LIST
51362: LIST
51363: PUSH
51364: LD_INT 1
51366: PUSH
51367: LD_INT 2
51369: NEG
51370: PUSH
51371: EMPTY
51372: LIST
51373: LIST
51374: PUSH
51375: LD_INT 3
51377: PUSH
51378: LD_INT 2
51380: PUSH
51381: EMPTY
51382: LIST
51383: LIST
51384: PUSH
51385: LD_INT 3
51387: PUSH
51388: LD_INT 3
51390: PUSH
51391: EMPTY
51392: LIST
51393: LIST
51394: PUSH
51395: LD_INT 2
51397: PUSH
51398: LD_INT 3
51400: PUSH
51401: EMPTY
51402: LIST
51403: LIST
51404: PUSH
51405: LD_INT 1
51407: PUSH
51408: LD_INT 3
51410: PUSH
51411: EMPTY
51412: LIST
51413: LIST
51414: PUSH
51415: LD_INT 0
51417: PUSH
51418: LD_INT 3
51420: PUSH
51421: EMPTY
51422: LIST
51423: LIST
51424: PUSH
51425: LD_INT 1
51427: NEG
51428: PUSH
51429: LD_INT 2
51431: PUSH
51432: EMPTY
51433: LIST
51434: LIST
51435: PUSH
51436: LD_INT 3
51438: NEG
51439: PUSH
51440: LD_INT 2
51442: NEG
51443: PUSH
51444: EMPTY
51445: LIST
51446: LIST
51447: PUSH
51448: LD_INT 3
51450: NEG
51451: PUSH
51452: LD_INT 3
51454: NEG
51455: PUSH
51456: EMPTY
51457: LIST
51458: LIST
51459: PUSH
51460: EMPTY
51461: LIST
51462: LIST
51463: LIST
51464: LIST
51465: LIST
51466: LIST
51467: LIST
51468: LIST
51469: LIST
51470: LIST
51471: LIST
51472: LIST
51473: LIST
51474: LIST
51475: LIST
51476: LIST
51477: LIST
51478: LIST
51479: LIST
51480: LIST
51481: LIST
51482: LIST
51483: LIST
51484: LIST
51485: LIST
51486: LIST
51487: LIST
51488: LIST
51489: LIST
51490: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51491: LD_ADDR_VAR 0 43
51495: PUSH
51496: LD_INT 0
51498: PUSH
51499: LD_INT 0
51501: PUSH
51502: EMPTY
51503: LIST
51504: LIST
51505: PUSH
51506: LD_INT 0
51508: PUSH
51509: LD_INT 1
51511: NEG
51512: PUSH
51513: EMPTY
51514: LIST
51515: LIST
51516: PUSH
51517: LD_INT 1
51519: PUSH
51520: LD_INT 0
51522: PUSH
51523: EMPTY
51524: LIST
51525: LIST
51526: PUSH
51527: LD_INT 1
51529: PUSH
51530: LD_INT 1
51532: PUSH
51533: EMPTY
51534: LIST
51535: LIST
51536: PUSH
51537: LD_INT 0
51539: PUSH
51540: LD_INT 1
51542: PUSH
51543: EMPTY
51544: LIST
51545: LIST
51546: PUSH
51547: LD_INT 1
51549: NEG
51550: PUSH
51551: LD_INT 0
51553: PUSH
51554: EMPTY
51555: LIST
51556: LIST
51557: PUSH
51558: LD_INT 1
51560: NEG
51561: PUSH
51562: LD_INT 1
51564: NEG
51565: PUSH
51566: EMPTY
51567: LIST
51568: LIST
51569: PUSH
51570: LD_INT 1
51572: NEG
51573: PUSH
51574: LD_INT 2
51576: NEG
51577: PUSH
51578: EMPTY
51579: LIST
51580: LIST
51581: PUSH
51582: LD_INT 0
51584: PUSH
51585: LD_INT 2
51587: NEG
51588: PUSH
51589: EMPTY
51590: LIST
51591: LIST
51592: PUSH
51593: LD_INT 1
51595: PUSH
51596: LD_INT 1
51598: NEG
51599: PUSH
51600: EMPTY
51601: LIST
51602: LIST
51603: PUSH
51604: LD_INT 2
51606: PUSH
51607: LD_INT 0
51609: PUSH
51610: EMPTY
51611: LIST
51612: LIST
51613: PUSH
51614: LD_INT 2
51616: PUSH
51617: LD_INT 1
51619: PUSH
51620: EMPTY
51621: LIST
51622: LIST
51623: PUSH
51624: LD_INT 1
51626: PUSH
51627: LD_INT 2
51629: PUSH
51630: EMPTY
51631: LIST
51632: LIST
51633: PUSH
51634: LD_INT 0
51636: PUSH
51637: LD_INT 2
51639: PUSH
51640: EMPTY
51641: LIST
51642: LIST
51643: PUSH
51644: LD_INT 1
51646: NEG
51647: PUSH
51648: LD_INT 1
51650: PUSH
51651: EMPTY
51652: LIST
51653: LIST
51654: PUSH
51655: LD_INT 2
51657: NEG
51658: PUSH
51659: LD_INT 0
51661: PUSH
51662: EMPTY
51663: LIST
51664: LIST
51665: PUSH
51666: LD_INT 2
51668: NEG
51669: PUSH
51670: LD_INT 1
51672: NEG
51673: PUSH
51674: EMPTY
51675: LIST
51676: LIST
51677: PUSH
51678: LD_INT 1
51680: NEG
51681: PUSH
51682: LD_INT 3
51684: NEG
51685: PUSH
51686: EMPTY
51687: LIST
51688: LIST
51689: PUSH
51690: LD_INT 0
51692: PUSH
51693: LD_INT 3
51695: NEG
51696: PUSH
51697: EMPTY
51698: LIST
51699: LIST
51700: PUSH
51701: LD_INT 1
51703: PUSH
51704: LD_INT 2
51706: NEG
51707: PUSH
51708: EMPTY
51709: LIST
51710: LIST
51711: PUSH
51712: LD_INT 2
51714: PUSH
51715: LD_INT 1
51717: NEG
51718: PUSH
51719: EMPTY
51720: LIST
51721: LIST
51722: PUSH
51723: LD_INT 3
51725: PUSH
51726: LD_INT 0
51728: PUSH
51729: EMPTY
51730: LIST
51731: LIST
51732: PUSH
51733: LD_INT 3
51735: PUSH
51736: LD_INT 1
51738: PUSH
51739: EMPTY
51740: LIST
51741: LIST
51742: PUSH
51743: LD_INT 1
51745: PUSH
51746: LD_INT 3
51748: PUSH
51749: EMPTY
51750: LIST
51751: LIST
51752: PUSH
51753: LD_INT 0
51755: PUSH
51756: LD_INT 3
51758: PUSH
51759: EMPTY
51760: LIST
51761: LIST
51762: PUSH
51763: LD_INT 1
51765: NEG
51766: PUSH
51767: LD_INT 2
51769: PUSH
51770: EMPTY
51771: LIST
51772: LIST
51773: PUSH
51774: LD_INT 2
51776: NEG
51777: PUSH
51778: LD_INT 1
51780: PUSH
51781: EMPTY
51782: LIST
51783: LIST
51784: PUSH
51785: LD_INT 3
51787: NEG
51788: PUSH
51789: LD_INT 0
51791: PUSH
51792: EMPTY
51793: LIST
51794: LIST
51795: PUSH
51796: LD_INT 3
51798: NEG
51799: PUSH
51800: LD_INT 1
51802: NEG
51803: PUSH
51804: EMPTY
51805: LIST
51806: LIST
51807: PUSH
51808: EMPTY
51809: LIST
51810: LIST
51811: LIST
51812: LIST
51813: LIST
51814: LIST
51815: LIST
51816: LIST
51817: LIST
51818: LIST
51819: LIST
51820: LIST
51821: LIST
51822: LIST
51823: LIST
51824: LIST
51825: LIST
51826: LIST
51827: LIST
51828: LIST
51829: LIST
51830: LIST
51831: LIST
51832: LIST
51833: LIST
51834: LIST
51835: LIST
51836: LIST
51837: LIST
51838: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51839: LD_ADDR_VAR 0 44
51843: PUSH
51844: LD_INT 0
51846: PUSH
51847: LD_INT 0
51849: PUSH
51850: EMPTY
51851: LIST
51852: LIST
51853: PUSH
51854: LD_INT 0
51856: PUSH
51857: LD_INT 1
51859: NEG
51860: PUSH
51861: EMPTY
51862: LIST
51863: LIST
51864: PUSH
51865: LD_INT 1
51867: PUSH
51868: LD_INT 0
51870: PUSH
51871: EMPTY
51872: LIST
51873: LIST
51874: PUSH
51875: LD_INT 1
51877: PUSH
51878: LD_INT 1
51880: PUSH
51881: EMPTY
51882: LIST
51883: LIST
51884: PUSH
51885: LD_INT 0
51887: PUSH
51888: LD_INT 1
51890: PUSH
51891: EMPTY
51892: LIST
51893: LIST
51894: PUSH
51895: LD_INT 1
51897: NEG
51898: PUSH
51899: LD_INT 0
51901: PUSH
51902: EMPTY
51903: LIST
51904: LIST
51905: PUSH
51906: LD_INT 1
51908: NEG
51909: PUSH
51910: LD_INT 1
51912: NEG
51913: PUSH
51914: EMPTY
51915: LIST
51916: LIST
51917: PUSH
51918: LD_INT 1
51920: NEG
51921: PUSH
51922: LD_INT 2
51924: NEG
51925: PUSH
51926: EMPTY
51927: LIST
51928: LIST
51929: PUSH
51930: LD_INT 1
51932: PUSH
51933: LD_INT 1
51935: NEG
51936: PUSH
51937: EMPTY
51938: LIST
51939: LIST
51940: PUSH
51941: LD_INT 2
51943: PUSH
51944: LD_INT 0
51946: PUSH
51947: EMPTY
51948: LIST
51949: LIST
51950: PUSH
51951: LD_INT 2
51953: PUSH
51954: LD_INT 1
51956: PUSH
51957: EMPTY
51958: LIST
51959: LIST
51960: PUSH
51961: LD_INT 2
51963: PUSH
51964: LD_INT 2
51966: PUSH
51967: EMPTY
51968: LIST
51969: LIST
51970: PUSH
51971: LD_INT 1
51973: PUSH
51974: LD_INT 2
51976: PUSH
51977: EMPTY
51978: LIST
51979: LIST
51980: PUSH
51981: LD_INT 1
51983: NEG
51984: PUSH
51985: LD_INT 1
51987: PUSH
51988: EMPTY
51989: LIST
51990: LIST
51991: PUSH
51992: LD_INT 2
51994: NEG
51995: PUSH
51996: LD_INT 0
51998: PUSH
51999: EMPTY
52000: LIST
52001: LIST
52002: PUSH
52003: LD_INT 2
52005: NEG
52006: PUSH
52007: LD_INT 1
52009: NEG
52010: PUSH
52011: EMPTY
52012: LIST
52013: LIST
52014: PUSH
52015: LD_INT 2
52017: NEG
52018: PUSH
52019: LD_INT 2
52021: NEG
52022: PUSH
52023: EMPTY
52024: LIST
52025: LIST
52026: PUSH
52027: LD_INT 2
52029: NEG
52030: PUSH
52031: LD_INT 3
52033: NEG
52034: PUSH
52035: EMPTY
52036: LIST
52037: LIST
52038: PUSH
52039: LD_INT 2
52041: PUSH
52042: LD_INT 1
52044: NEG
52045: PUSH
52046: EMPTY
52047: LIST
52048: LIST
52049: PUSH
52050: LD_INT 3
52052: PUSH
52053: LD_INT 0
52055: PUSH
52056: EMPTY
52057: LIST
52058: LIST
52059: PUSH
52060: LD_INT 3
52062: PUSH
52063: LD_INT 1
52065: PUSH
52066: EMPTY
52067: LIST
52068: LIST
52069: PUSH
52070: LD_INT 3
52072: PUSH
52073: LD_INT 2
52075: PUSH
52076: EMPTY
52077: LIST
52078: LIST
52079: PUSH
52080: LD_INT 3
52082: PUSH
52083: LD_INT 3
52085: PUSH
52086: EMPTY
52087: LIST
52088: LIST
52089: PUSH
52090: LD_INT 2
52092: PUSH
52093: LD_INT 3
52095: PUSH
52096: EMPTY
52097: LIST
52098: LIST
52099: PUSH
52100: LD_INT 2
52102: NEG
52103: PUSH
52104: LD_INT 1
52106: PUSH
52107: EMPTY
52108: LIST
52109: LIST
52110: PUSH
52111: LD_INT 3
52113: NEG
52114: PUSH
52115: LD_INT 0
52117: PUSH
52118: EMPTY
52119: LIST
52120: LIST
52121: PUSH
52122: LD_INT 3
52124: NEG
52125: PUSH
52126: LD_INT 1
52128: NEG
52129: PUSH
52130: EMPTY
52131: LIST
52132: LIST
52133: PUSH
52134: LD_INT 3
52136: NEG
52137: PUSH
52138: LD_INT 2
52140: NEG
52141: PUSH
52142: EMPTY
52143: LIST
52144: LIST
52145: PUSH
52146: LD_INT 3
52148: NEG
52149: PUSH
52150: LD_INT 3
52152: NEG
52153: PUSH
52154: EMPTY
52155: LIST
52156: LIST
52157: PUSH
52158: EMPTY
52159: LIST
52160: LIST
52161: LIST
52162: LIST
52163: LIST
52164: LIST
52165: LIST
52166: LIST
52167: LIST
52168: LIST
52169: LIST
52170: LIST
52171: LIST
52172: LIST
52173: LIST
52174: LIST
52175: LIST
52176: LIST
52177: LIST
52178: LIST
52179: LIST
52180: LIST
52181: LIST
52182: LIST
52183: LIST
52184: LIST
52185: LIST
52186: LIST
52187: LIST
52188: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52189: LD_ADDR_VAR 0 45
52193: PUSH
52194: LD_INT 0
52196: PUSH
52197: LD_INT 0
52199: PUSH
52200: EMPTY
52201: LIST
52202: LIST
52203: PUSH
52204: LD_INT 0
52206: PUSH
52207: LD_INT 1
52209: NEG
52210: PUSH
52211: EMPTY
52212: LIST
52213: LIST
52214: PUSH
52215: LD_INT 1
52217: PUSH
52218: LD_INT 0
52220: PUSH
52221: EMPTY
52222: LIST
52223: LIST
52224: PUSH
52225: LD_INT 1
52227: PUSH
52228: LD_INT 1
52230: PUSH
52231: EMPTY
52232: LIST
52233: LIST
52234: PUSH
52235: LD_INT 0
52237: PUSH
52238: LD_INT 1
52240: PUSH
52241: EMPTY
52242: LIST
52243: LIST
52244: PUSH
52245: LD_INT 1
52247: NEG
52248: PUSH
52249: LD_INT 0
52251: PUSH
52252: EMPTY
52253: LIST
52254: LIST
52255: PUSH
52256: LD_INT 1
52258: NEG
52259: PUSH
52260: LD_INT 1
52262: NEG
52263: PUSH
52264: EMPTY
52265: LIST
52266: LIST
52267: PUSH
52268: LD_INT 1
52270: NEG
52271: PUSH
52272: LD_INT 2
52274: NEG
52275: PUSH
52276: EMPTY
52277: LIST
52278: LIST
52279: PUSH
52280: LD_INT 0
52282: PUSH
52283: LD_INT 2
52285: NEG
52286: PUSH
52287: EMPTY
52288: LIST
52289: LIST
52290: PUSH
52291: LD_INT 1
52293: PUSH
52294: LD_INT 1
52296: NEG
52297: PUSH
52298: EMPTY
52299: LIST
52300: LIST
52301: PUSH
52302: LD_INT 2
52304: PUSH
52305: LD_INT 1
52307: PUSH
52308: EMPTY
52309: LIST
52310: LIST
52311: PUSH
52312: LD_INT 2
52314: PUSH
52315: LD_INT 2
52317: PUSH
52318: EMPTY
52319: LIST
52320: LIST
52321: PUSH
52322: LD_INT 1
52324: PUSH
52325: LD_INT 2
52327: PUSH
52328: EMPTY
52329: LIST
52330: LIST
52331: PUSH
52332: LD_INT 0
52334: PUSH
52335: LD_INT 2
52337: PUSH
52338: EMPTY
52339: LIST
52340: LIST
52341: PUSH
52342: LD_INT 1
52344: NEG
52345: PUSH
52346: LD_INT 1
52348: PUSH
52349: EMPTY
52350: LIST
52351: LIST
52352: PUSH
52353: LD_INT 2
52355: NEG
52356: PUSH
52357: LD_INT 1
52359: NEG
52360: PUSH
52361: EMPTY
52362: LIST
52363: LIST
52364: PUSH
52365: LD_INT 2
52367: NEG
52368: PUSH
52369: LD_INT 2
52371: NEG
52372: PUSH
52373: EMPTY
52374: LIST
52375: LIST
52376: PUSH
52377: LD_INT 2
52379: NEG
52380: PUSH
52381: LD_INT 3
52383: NEG
52384: PUSH
52385: EMPTY
52386: LIST
52387: LIST
52388: PUSH
52389: LD_INT 1
52391: NEG
52392: PUSH
52393: LD_INT 3
52395: NEG
52396: PUSH
52397: EMPTY
52398: LIST
52399: LIST
52400: PUSH
52401: LD_INT 0
52403: PUSH
52404: LD_INT 3
52406: NEG
52407: PUSH
52408: EMPTY
52409: LIST
52410: LIST
52411: PUSH
52412: LD_INT 1
52414: PUSH
52415: LD_INT 2
52417: NEG
52418: PUSH
52419: EMPTY
52420: LIST
52421: LIST
52422: PUSH
52423: LD_INT 3
52425: PUSH
52426: LD_INT 2
52428: PUSH
52429: EMPTY
52430: LIST
52431: LIST
52432: PUSH
52433: LD_INT 3
52435: PUSH
52436: LD_INT 3
52438: PUSH
52439: EMPTY
52440: LIST
52441: LIST
52442: PUSH
52443: LD_INT 2
52445: PUSH
52446: LD_INT 3
52448: PUSH
52449: EMPTY
52450: LIST
52451: LIST
52452: PUSH
52453: LD_INT 1
52455: PUSH
52456: LD_INT 3
52458: PUSH
52459: EMPTY
52460: LIST
52461: LIST
52462: PUSH
52463: LD_INT 0
52465: PUSH
52466: LD_INT 3
52468: PUSH
52469: EMPTY
52470: LIST
52471: LIST
52472: PUSH
52473: LD_INT 1
52475: NEG
52476: PUSH
52477: LD_INT 2
52479: PUSH
52480: EMPTY
52481: LIST
52482: LIST
52483: PUSH
52484: LD_INT 3
52486: NEG
52487: PUSH
52488: LD_INT 2
52490: NEG
52491: PUSH
52492: EMPTY
52493: LIST
52494: LIST
52495: PUSH
52496: LD_INT 3
52498: NEG
52499: PUSH
52500: LD_INT 3
52502: NEG
52503: PUSH
52504: EMPTY
52505: LIST
52506: LIST
52507: PUSH
52508: EMPTY
52509: LIST
52510: LIST
52511: LIST
52512: LIST
52513: LIST
52514: LIST
52515: LIST
52516: LIST
52517: LIST
52518: LIST
52519: LIST
52520: LIST
52521: LIST
52522: LIST
52523: LIST
52524: LIST
52525: LIST
52526: LIST
52527: LIST
52528: LIST
52529: LIST
52530: LIST
52531: LIST
52532: LIST
52533: LIST
52534: LIST
52535: LIST
52536: LIST
52537: LIST
52538: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52539: LD_ADDR_VAR 0 46
52543: PUSH
52544: LD_INT 0
52546: PUSH
52547: LD_INT 0
52549: PUSH
52550: EMPTY
52551: LIST
52552: LIST
52553: PUSH
52554: LD_INT 0
52556: PUSH
52557: LD_INT 1
52559: NEG
52560: PUSH
52561: EMPTY
52562: LIST
52563: LIST
52564: PUSH
52565: LD_INT 1
52567: PUSH
52568: LD_INT 0
52570: PUSH
52571: EMPTY
52572: LIST
52573: LIST
52574: PUSH
52575: LD_INT 1
52577: PUSH
52578: LD_INT 1
52580: PUSH
52581: EMPTY
52582: LIST
52583: LIST
52584: PUSH
52585: LD_INT 0
52587: PUSH
52588: LD_INT 1
52590: PUSH
52591: EMPTY
52592: LIST
52593: LIST
52594: PUSH
52595: LD_INT 1
52597: NEG
52598: PUSH
52599: LD_INT 0
52601: PUSH
52602: EMPTY
52603: LIST
52604: LIST
52605: PUSH
52606: LD_INT 1
52608: NEG
52609: PUSH
52610: LD_INT 1
52612: NEG
52613: PUSH
52614: EMPTY
52615: LIST
52616: LIST
52617: PUSH
52618: LD_INT 1
52620: NEG
52621: PUSH
52622: LD_INT 2
52624: NEG
52625: PUSH
52626: EMPTY
52627: LIST
52628: LIST
52629: PUSH
52630: LD_INT 0
52632: PUSH
52633: LD_INT 2
52635: NEG
52636: PUSH
52637: EMPTY
52638: LIST
52639: LIST
52640: PUSH
52641: LD_INT 1
52643: PUSH
52644: LD_INT 1
52646: NEG
52647: PUSH
52648: EMPTY
52649: LIST
52650: LIST
52651: PUSH
52652: LD_INT 2
52654: PUSH
52655: LD_INT 0
52657: PUSH
52658: EMPTY
52659: LIST
52660: LIST
52661: PUSH
52662: LD_INT 2
52664: PUSH
52665: LD_INT 1
52667: PUSH
52668: EMPTY
52669: LIST
52670: LIST
52671: PUSH
52672: LD_INT 1
52674: PUSH
52675: LD_INT 2
52677: PUSH
52678: EMPTY
52679: LIST
52680: LIST
52681: PUSH
52682: LD_INT 0
52684: PUSH
52685: LD_INT 2
52687: PUSH
52688: EMPTY
52689: LIST
52690: LIST
52691: PUSH
52692: LD_INT 1
52694: NEG
52695: PUSH
52696: LD_INT 1
52698: PUSH
52699: EMPTY
52700: LIST
52701: LIST
52702: PUSH
52703: LD_INT 2
52705: NEG
52706: PUSH
52707: LD_INT 0
52709: PUSH
52710: EMPTY
52711: LIST
52712: LIST
52713: PUSH
52714: LD_INT 2
52716: NEG
52717: PUSH
52718: LD_INT 1
52720: NEG
52721: PUSH
52722: EMPTY
52723: LIST
52724: LIST
52725: PUSH
52726: LD_INT 1
52728: NEG
52729: PUSH
52730: LD_INT 3
52732: NEG
52733: PUSH
52734: EMPTY
52735: LIST
52736: LIST
52737: PUSH
52738: LD_INT 0
52740: PUSH
52741: LD_INT 3
52743: NEG
52744: PUSH
52745: EMPTY
52746: LIST
52747: LIST
52748: PUSH
52749: LD_INT 1
52751: PUSH
52752: LD_INT 2
52754: NEG
52755: PUSH
52756: EMPTY
52757: LIST
52758: LIST
52759: PUSH
52760: LD_INT 2
52762: PUSH
52763: LD_INT 1
52765: NEG
52766: PUSH
52767: EMPTY
52768: LIST
52769: LIST
52770: PUSH
52771: LD_INT 3
52773: PUSH
52774: LD_INT 0
52776: PUSH
52777: EMPTY
52778: LIST
52779: LIST
52780: PUSH
52781: LD_INT 3
52783: PUSH
52784: LD_INT 1
52786: PUSH
52787: EMPTY
52788: LIST
52789: LIST
52790: PUSH
52791: LD_INT 1
52793: PUSH
52794: LD_INT 3
52796: PUSH
52797: EMPTY
52798: LIST
52799: LIST
52800: PUSH
52801: LD_INT 0
52803: PUSH
52804: LD_INT 3
52806: PUSH
52807: EMPTY
52808: LIST
52809: LIST
52810: PUSH
52811: LD_INT 1
52813: NEG
52814: PUSH
52815: LD_INT 2
52817: PUSH
52818: EMPTY
52819: LIST
52820: LIST
52821: PUSH
52822: LD_INT 2
52824: NEG
52825: PUSH
52826: LD_INT 1
52828: PUSH
52829: EMPTY
52830: LIST
52831: LIST
52832: PUSH
52833: LD_INT 3
52835: NEG
52836: PUSH
52837: LD_INT 0
52839: PUSH
52840: EMPTY
52841: LIST
52842: LIST
52843: PUSH
52844: LD_INT 3
52846: NEG
52847: PUSH
52848: LD_INT 1
52850: NEG
52851: PUSH
52852: EMPTY
52853: LIST
52854: LIST
52855: PUSH
52856: EMPTY
52857: LIST
52858: LIST
52859: LIST
52860: LIST
52861: LIST
52862: LIST
52863: LIST
52864: LIST
52865: LIST
52866: LIST
52867: LIST
52868: LIST
52869: LIST
52870: LIST
52871: LIST
52872: LIST
52873: LIST
52874: LIST
52875: LIST
52876: LIST
52877: LIST
52878: LIST
52879: LIST
52880: LIST
52881: LIST
52882: LIST
52883: LIST
52884: LIST
52885: LIST
52886: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52887: LD_ADDR_VAR 0 47
52891: PUSH
52892: LD_INT 0
52894: PUSH
52895: LD_INT 0
52897: PUSH
52898: EMPTY
52899: LIST
52900: LIST
52901: PUSH
52902: LD_INT 0
52904: PUSH
52905: LD_INT 1
52907: NEG
52908: PUSH
52909: EMPTY
52910: LIST
52911: LIST
52912: PUSH
52913: LD_INT 1
52915: PUSH
52916: LD_INT 0
52918: PUSH
52919: EMPTY
52920: LIST
52921: LIST
52922: PUSH
52923: LD_INT 1
52925: PUSH
52926: LD_INT 1
52928: PUSH
52929: EMPTY
52930: LIST
52931: LIST
52932: PUSH
52933: LD_INT 0
52935: PUSH
52936: LD_INT 1
52938: PUSH
52939: EMPTY
52940: LIST
52941: LIST
52942: PUSH
52943: LD_INT 1
52945: NEG
52946: PUSH
52947: LD_INT 0
52949: PUSH
52950: EMPTY
52951: LIST
52952: LIST
52953: PUSH
52954: LD_INT 1
52956: NEG
52957: PUSH
52958: LD_INT 1
52960: NEG
52961: PUSH
52962: EMPTY
52963: LIST
52964: LIST
52965: PUSH
52966: LD_INT 1
52968: NEG
52969: PUSH
52970: LD_INT 2
52972: NEG
52973: PUSH
52974: EMPTY
52975: LIST
52976: LIST
52977: PUSH
52978: LD_INT 0
52980: PUSH
52981: LD_INT 2
52983: NEG
52984: PUSH
52985: EMPTY
52986: LIST
52987: LIST
52988: PUSH
52989: LD_INT 1
52991: PUSH
52992: LD_INT 1
52994: NEG
52995: PUSH
52996: EMPTY
52997: LIST
52998: LIST
52999: PUSH
53000: LD_INT 2
53002: NEG
53003: PUSH
53004: LD_INT 1
53006: NEG
53007: PUSH
53008: EMPTY
53009: LIST
53010: LIST
53011: PUSH
53012: LD_INT 2
53014: NEG
53015: PUSH
53016: LD_INT 2
53018: NEG
53019: PUSH
53020: EMPTY
53021: LIST
53022: LIST
53023: PUSH
53024: EMPTY
53025: LIST
53026: LIST
53027: LIST
53028: LIST
53029: LIST
53030: LIST
53031: LIST
53032: LIST
53033: LIST
53034: LIST
53035: LIST
53036: LIST
53037: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
53038: LD_ADDR_VAR 0 48
53042: PUSH
53043: LD_INT 0
53045: PUSH
53046: LD_INT 0
53048: PUSH
53049: EMPTY
53050: LIST
53051: LIST
53052: PUSH
53053: LD_INT 0
53055: PUSH
53056: LD_INT 1
53058: NEG
53059: PUSH
53060: EMPTY
53061: LIST
53062: LIST
53063: PUSH
53064: LD_INT 1
53066: PUSH
53067: LD_INT 0
53069: PUSH
53070: EMPTY
53071: LIST
53072: LIST
53073: PUSH
53074: LD_INT 1
53076: PUSH
53077: LD_INT 1
53079: PUSH
53080: EMPTY
53081: LIST
53082: LIST
53083: PUSH
53084: LD_INT 0
53086: PUSH
53087: LD_INT 1
53089: PUSH
53090: EMPTY
53091: LIST
53092: LIST
53093: PUSH
53094: LD_INT 1
53096: NEG
53097: PUSH
53098: LD_INT 0
53100: PUSH
53101: EMPTY
53102: LIST
53103: LIST
53104: PUSH
53105: LD_INT 1
53107: NEG
53108: PUSH
53109: LD_INT 1
53111: NEG
53112: PUSH
53113: EMPTY
53114: LIST
53115: LIST
53116: PUSH
53117: LD_INT 1
53119: NEG
53120: PUSH
53121: LD_INT 2
53123: NEG
53124: PUSH
53125: EMPTY
53126: LIST
53127: LIST
53128: PUSH
53129: LD_INT 0
53131: PUSH
53132: LD_INT 2
53134: NEG
53135: PUSH
53136: EMPTY
53137: LIST
53138: LIST
53139: PUSH
53140: LD_INT 1
53142: PUSH
53143: LD_INT 1
53145: NEG
53146: PUSH
53147: EMPTY
53148: LIST
53149: LIST
53150: PUSH
53151: LD_INT 2
53153: PUSH
53154: LD_INT 0
53156: PUSH
53157: EMPTY
53158: LIST
53159: LIST
53160: PUSH
53161: LD_INT 2
53163: PUSH
53164: LD_INT 1
53166: PUSH
53167: EMPTY
53168: LIST
53169: LIST
53170: PUSH
53171: EMPTY
53172: LIST
53173: LIST
53174: LIST
53175: LIST
53176: LIST
53177: LIST
53178: LIST
53179: LIST
53180: LIST
53181: LIST
53182: LIST
53183: LIST
53184: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
53185: LD_ADDR_VAR 0 49
53189: PUSH
53190: LD_INT 0
53192: PUSH
53193: LD_INT 0
53195: PUSH
53196: EMPTY
53197: LIST
53198: LIST
53199: PUSH
53200: LD_INT 0
53202: PUSH
53203: LD_INT 1
53205: NEG
53206: PUSH
53207: EMPTY
53208: LIST
53209: LIST
53210: PUSH
53211: LD_INT 1
53213: PUSH
53214: LD_INT 0
53216: PUSH
53217: EMPTY
53218: LIST
53219: LIST
53220: PUSH
53221: LD_INT 1
53223: PUSH
53224: LD_INT 1
53226: PUSH
53227: EMPTY
53228: LIST
53229: LIST
53230: PUSH
53231: LD_INT 0
53233: PUSH
53234: LD_INT 1
53236: PUSH
53237: EMPTY
53238: LIST
53239: LIST
53240: PUSH
53241: LD_INT 1
53243: NEG
53244: PUSH
53245: LD_INT 0
53247: PUSH
53248: EMPTY
53249: LIST
53250: LIST
53251: PUSH
53252: LD_INT 1
53254: NEG
53255: PUSH
53256: LD_INT 1
53258: NEG
53259: PUSH
53260: EMPTY
53261: LIST
53262: LIST
53263: PUSH
53264: LD_INT 1
53266: PUSH
53267: LD_INT 1
53269: NEG
53270: PUSH
53271: EMPTY
53272: LIST
53273: LIST
53274: PUSH
53275: LD_INT 2
53277: PUSH
53278: LD_INT 0
53280: PUSH
53281: EMPTY
53282: LIST
53283: LIST
53284: PUSH
53285: LD_INT 2
53287: PUSH
53288: LD_INT 1
53290: PUSH
53291: EMPTY
53292: LIST
53293: LIST
53294: PUSH
53295: LD_INT 2
53297: PUSH
53298: LD_INT 2
53300: PUSH
53301: EMPTY
53302: LIST
53303: LIST
53304: PUSH
53305: LD_INT 1
53307: PUSH
53308: LD_INT 2
53310: PUSH
53311: EMPTY
53312: LIST
53313: LIST
53314: PUSH
53315: EMPTY
53316: LIST
53317: LIST
53318: LIST
53319: LIST
53320: LIST
53321: LIST
53322: LIST
53323: LIST
53324: LIST
53325: LIST
53326: LIST
53327: LIST
53328: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
53329: LD_ADDR_VAR 0 50
53333: PUSH
53334: LD_INT 0
53336: PUSH
53337: LD_INT 0
53339: PUSH
53340: EMPTY
53341: LIST
53342: LIST
53343: PUSH
53344: LD_INT 0
53346: PUSH
53347: LD_INT 1
53349: NEG
53350: PUSH
53351: EMPTY
53352: LIST
53353: LIST
53354: PUSH
53355: LD_INT 1
53357: PUSH
53358: LD_INT 0
53360: PUSH
53361: EMPTY
53362: LIST
53363: LIST
53364: PUSH
53365: LD_INT 1
53367: PUSH
53368: LD_INT 1
53370: PUSH
53371: EMPTY
53372: LIST
53373: LIST
53374: PUSH
53375: LD_INT 0
53377: PUSH
53378: LD_INT 1
53380: PUSH
53381: EMPTY
53382: LIST
53383: LIST
53384: PUSH
53385: LD_INT 1
53387: NEG
53388: PUSH
53389: LD_INT 0
53391: PUSH
53392: EMPTY
53393: LIST
53394: LIST
53395: PUSH
53396: LD_INT 1
53398: NEG
53399: PUSH
53400: LD_INT 1
53402: NEG
53403: PUSH
53404: EMPTY
53405: LIST
53406: LIST
53407: PUSH
53408: LD_INT 2
53410: PUSH
53411: LD_INT 1
53413: PUSH
53414: EMPTY
53415: LIST
53416: LIST
53417: PUSH
53418: LD_INT 2
53420: PUSH
53421: LD_INT 2
53423: PUSH
53424: EMPTY
53425: LIST
53426: LIST
53427: PUSH
53428: LD_INT 1
53430: PUSH
53431: LD_INT 2
53433: PUSH
53434: EMPTY
53435: LIST
53436: LIST
53437: PUSH
53438: LD_INT 0
53440: PUSH
53441: LD_INT 2
53443: PUSH
53444: EMPTY
53445: LIST
53446: LIST
53447: PUSH
53448: LD_INT 1
53450: NEG
53451: PUSH
53452: LD_INT 1
53454: PUSH
53455: EMPTY
53456: LIST
53457: LIST
53458: PUSH
53459: EMPTY
53460: LIST
53461: LIST
53462: LIST
53463: LIST
53464: LIST
53465: LIST
53466: LIST
53467: LIST
53468: LIST
53469: LIST
53470: LIST
53471: LIST
53472: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
53473: LD_ADDR_VAR 0 51
53477: PUSH
53478: LD_INT 0
53480: PUSH
53481: LD_INT 0
53483: PUSH
53484: EMPTY
53485: LIST
53486: LIST
53487: PUSH
53488: LD_INT 0
53490: PUSH
53491: LD_INT 1
53493: NEG
53494: PUSH
53495: EMPTY
53496: LIST
53497: LIST
53498: PUSH
53499: LD_INT 1
53501: PUSH
53502: LD_INT 0
53504: PUSH
53505: EMPTY
53506: LIST
53507: LIST
53508: PUSH
53509: LD_INT 1
53511: PUSH
53512: LD_INT 1
53514: PUSH
53515: EMPTY
53516: LIST
53517: LIST
53518: PUSH
53519: LD_INT 0
53521: PUSH
53522: LD_INT 1
53524: PUSH
53525: EMPTY
53526: LIST
53527: LIST
53528: PUSH
53529: LD_INT 1
53531: NEG
53532: PUSH
53533: LD_INT 0
53535: PUSH
53536: EMPTY
53537: LIST
53538: LIST
53539: PUSH
53540: LD_INT 1
53542: NEG
53543: PUSH
53544: LD_INT 1
53546: NEG
53547: PUSH
53548: EMPTY
53549: LIST
53550: LIST
53551: PUSH
53552: LD_INT 1
53554: PUSH
53555: LD_INT 2
53557: PUSH
53558: EMPTY
53559: LIST
53560: LIST
53561: PUSH
53562: LD_INT 0
53564: PUSH
53565: LD_INT 2
53567: PUSH
53568: EMPTY
53569: LIST
53570: LIST
53571: PUSH
53572: LD_INT 1
53574: NEG
53575: PUSH
53576: LD_INT 1
53578: PUSH
53579: EMPTY
53580: LIST
53581: LIST
53582: PUSH
53583: LD_INT 2
53585: NEG
53586: PUSH
53587: LD_INT 0
53589: PUSH
53590: EMPTY
53591: LIST
53592: LIST
53593: PUSH
53594: LD_INT 2
53596: NEG
53597: PUSH
53598: LD_INT 1
53600: NEG
53601: PUSH
53602: EMPTY
53603: LIST
53604: LIST
53605: PUSH
53606: EMPTY
53607: LIST
53608: LIST
53609: LIST
53610: LIST
53611: LIST
53612: LIST
53613: LIST
53614: LIST
53615: LIST
53616: LIST
53617: LIST
53618: LIST
53619: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53620: LD_ADDR_VAR 0 52
53624: PUSH
53625: LD_INT 0
53627: PUSH
53628: LD_INT 0
53630: PUSH
53631: EMPTY
53632: LIST
53633: LIST
53634: PUSH
53635: LD_INT 0
53637: PUSH
53638: LD_INT 1
53640: NEG
53641: PUSH
53642: EMPTY
53643: LIST
53644: LIST
53645: PUSH
53646: LD_INT 1
53648: PUSH
53649: LD_INT 0
53651: PUSH
53652: EMPTY
53653: LIST
53654: LIST
53655: PUSH
53656: LD_INT 1
53658: PUSH
53659: LD_INT 1
53661: PUSH
53662: EMPTY
53663: LIST
53664: LIST
53665: PUSH
53666: LD_INT 0
53668: PUSH
53669: LD_INT 1
53671: PUSH
53672: EMPTY
53673: LIST
53674: LIST
53675: PUSH
53676: LD_INT 1
53678: NEG
53679: PUSH
53680: LD_INT 0
53682: PUSH
53683: EMPTY
53684: LIST
53685: LIST
53686: PUSH
53687: LD_INT 1
53689: NEG
53690: PUSH
53691: LD_INT 1
53693: NEG
53694: PUSH
53695: EMPTY
53696: LIST
53697: LIST
53698: PUSH
53699: LD_INT 1
53701: NEG
53702: PUSH
53703: LD_INT 2
53705: NEG
53706: PUSH
53707: EMPTY
53708: LIST
53709: LIST
53710: PUSH
53711: LD_INT 1
53713: NEG
53714: PUSH
53715: LD_INT 1
53717: PUSH
53718: EMPTY
53719: LIST
53720: LIST
53721: PUSH
53722: LD_INT 2
53724: NEG
53725: PUSH
53726: LD_INT 0
53728: PUSH
53729: EMPTY
53730: LIST
53731: LIST
53732: PUSH
53733: LD_INT 2
53735: NEG
53736: PUSH
53737: LD_INT 1
53739: NEG
53740: PUSH
53741: EMPTY
53742: LIST
53743: LIST
53744: PUSH
53745: LD_INT 2
53747: NEG
53748: PUSH
53749: LD_INT 2
53751: NEG
53752: PUSH
53753: EMPTY
53754: LIST
53755: LIST
53756: PUSH
53757: EMPTY
53758: LIST
53759: LIST
53760: LIST
53761: LIST
53762: LIST
53763: LIST
53764: LIST
53765: LIST
53766: LIST
53767: LIST
53768: LIST
53769: LIST
53770: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53771: LD_ADDR_VAR 0 53
53775: PUSH
53776: LD_INT 0
53778: PUSH
53779: LD_INT 0
53781: PUSH
53782: EMPTY
53783: LIST
53784: LIST
53785: PUSH
53786: LD_INT 0
53788: PUSH
53789: LD_INT 1
53791: NEG
53792: PUSH
53793: EMPTY
53794: LIST
53795: LIST
53796: PUSH
53797: LD_INT 1
53799: PUSH
53800: LD_INT 0
53802: PUSH
53803: EMPTY
53804: LIST
53805: LIST
53806: PUSH
53807: LD_INT 1
53809: PUSH
53810: LD_INT 1
53812: PUSH
53813: EMPTY
53814: LIST
53815: LIST
53816: PUSH
53817: LD_INT 0
53819: PUSH
53820: LD_INT 1
53822: PUSH
53823: EMPTY
53824: LIST
53825: LIST
53826: PUSH
53827: LD_INT 1
53829: NEG
53830: PUSH
53831: LD_INT 0
53833: PUSH
53834: EMPTY
53835: LIST
53836: LIST
53837: PUSH
53838: LD_INT 1
53840: NEG
53841: PUSH
53842: LD_INT 1
53844: NEG
53845: PUSH
53846: EMPTY
53847: LIST
53848: LIST
53849: PUSH
53850: LD_INT 1
53852: NEG
53853: PUSH
53854: LD_INT 2
53856: NEG
53857: PUSH
53858: EMPTY
53859: LIST
53860: LIST
53861: PUSH
53862: LD_INT 0
53864: PUSH
53865: LD_INT 2
53867: NEG
53868: PUSH
53869: EMPTY
53870: LIST
53871: LIST
53872: PUSH
53873: LD_INT 1
53875: PUSH
53876: LD_INT 1
53878: NEG
53879: PUSH
53880: EMPTY
53881: LIST
53882: LIST
53883: PUSH
53884: LD_INT 2
53886: PUSH
53887: LD_INT 0
53889: PUSH
53890: EMPTY
53891: LIST
53892: LIST
53893: PUSH
53894: LD_INT 2
53896: PUSH
53897: LD_INT 1
53899: PUSH
53900: EMPTY
53901: LIST
53902: LIST
53903: PUSH
53904: LD_INT 2
53906: PUSH
53907: LD_INT 2
53909: PUSH
53910: EMPTY
53911: LIST
53912: LIST
53913: PUSH
53914: LD_INT 1
53916: PUSH
53917: LD_INT 2
53919: PUSH
53920: EMPTY
53921: LIST
53922: LIST
53923: PUSH
53924: LD_INT 0
53926: PUSH
53927: LD_INT 2
53929: PUSH
53930: EMPTY
53931: LIST
53932: LIST
53933: PUSH
53934: LD_INT 1
53936: NEG
53937: PUSH
53938: LD_INT 1
53940: PUSH
53941: EMPTY
53942: LIST
53943: LIST
53944: PUSH
53945: LD_INT 2
53947: NEG
53948: PUSH
53949: LD_INT 0
53951: PUSH
53952: EMPTY
53953: LIST
53954: LIST
53955: PUSH
53956: LD_INT 2
53958: NEG
53959: PUSH
53960: LD_INT 1
53962: NEG
53963: PUSH
53964: EMPTY
53965: LIST
53966: LIST
53967: PUSH
53968: LD_INT 2
53970: NEG
53971: PUSH
53972: LD_INT 2
53974: NEG
53975: PUSH
53976: EMPTY
53977: LIST
53978: LIST
53979: PUSH
53980: EMPTY
53981: LIST
53982: LIST
53983: LIST
53984: LIST
53985: LIST
53986: LIST
53987: LIST
53988: LIST
53989: LIST
53990: LIST
53991: LIST
53992: LIST
53993: LIST
53994: LIST
53995: LIST
53996: LIST
53997: LIST
53998: LIST
53999: LIST
54000: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54001: LD_ADDR_VAR 0 54
54005: PUSH
54006: LD_INT 0
54008: PUSH
54009: LD_INT 0
54011: PUSH
54012: EMPTY
54013: LIST
54014: LIST
54015: PUSH
54016: LD_INT 0
54018: PUSH
54019: LD_INT 1
54021: NEG
54022: PUSH
54023: EMPTY
54024: LIST
54025: LIST
54026: PUSH
54027: LD_INT 1
54029: PUSH
54030: LD_INT 0
54032: PUSH
54033: EMPTY
54034: LIST
54035: LIST
54036: PUSH
54037: LD_INT 1
54039: PUSH
54040: LD_INT 1
54042: PUSH
54043: EMPTY
54044: LIST
54045: LIST
54046: PUSH
54047: LD_INT 0
54049: PUSH
54050: LD_INT 1
54052: PUSH
54053: EMPTY
54054: LIST
54055: LIST
54056: PUSH
54057: LD_INT 1
54059: NEG
54060: PUSH
54061: LD_INT 0
54063: PUSH
54064: EMPTY
54065: LIST
54066: LIST
54067: PUSH
54068: LD_INT 1
54070: NEG
54071: PUSH
54072: LD_INT 1
54074: NEG
54075: PUSH
54076: EMPTY
54077: LIST
54078: LIST
54079: PUSH
54080: LD_INT 1
54082: NEG
54083: PUSH
54084: LD_INT 2
54086: NEG
54087: PUSH
54088: EMPTY
54089: LIST
54090: LIST
54091: PUSH
54092: LD_INT 0
54094: PUSH
54095: LD_INT 2
54097: NEG
54098: PUSH
54099: EMPTY
54100: LIST
54101: LIST
54102: PUSH
54103: LD_INT 1
54105: PUSH
54106: LD_INT 1
54108: NEG
54109: PUSH
54110: EMPTY
54111: LIST
54112: LIST
54113: PUSH
54114: LD_INT 2
54116: PUSH
54117: LD_INT 0
54119: PUSH
54120: EMPTY
54121: LIST
54122: LIST
54123: PUSH
54124: LD_INT 2
54126: PUSH
54127: LD_INT 1
54129: PUSH
54130: EMPTY
54131: LIST
54132: LIST
54133: PUSH
54134: LD_INT 2
54136: PUSH
54137: LD_INT 2
54139: PUSH
54140: EMPTY
54141: LIST
54142: LIST
54143: PUSH
54144: LD_INT 1
54146: PUSH
54147: LD_INT 2
54149: PUSH
54150: EMPTY
54151: LIST
54152: LIST
54153: PUSH
54154: LD_INT 0
54156: PUSH
54157: LD_INT 2
54159: PUSH
54160: EMPTY
54161: LIST
54162: LIST
54163: PUSH
54164: LD_INT 1
54166: NEG
54167: PUSH
54168: LD_INT 1
54170: PUSH
54171: EMPTY
54172: LIST
54173: LIST
54174: PUSH
54175: LD_INT 2
54177: NEG
54178: PUSH
54179: LD_INT 0
54181: PUSH
54182: EMPTY
54183: LIST
54184: LIST
54185: PUSH
54186: LD_INT 2
54188: NEG
54189: PUSH
54190: LD_INT 1
54192: NEG
54193: PUSH
54194: EMPTY
54195: LIST
54196: LIST
54197: PUSH
54198: LD_INT 2
54200: NEG
54201: PUSH
54202: LD_INT 2
54204: NEG
54205: PUSH
54206: EMPTY
54207: LIST
54208: LIST
54209: PUSH
54210: EMPTY
54211: LIST
54212: LIST
54213: LIST
54214: LIST
54215: LIST
54216: LIST
54217: LIST
54218: LIST
54219: LIST
54220: LIST
54221: LIST
54222: LIST
54223: LIST
54224: LIST
54225: LIST
54226: LIST
54227: LIST
54228: LIST
54229: LIST
54230: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54231: LD_ADDR_VAR 0 55
54235: PUSH
54236: LD_INT 0
54238: PUSH
54239: LD_INT 0
54241: PUSH
54242: EMPTY
54243: LIST
54244: LIST
54245: PUSH
54246: LD_INT 0
54248: PUSH
54249: LD_INT 1
54251: NEG
54252: PUSH
54253: EMPTY
54254: LIST
54255: LIST
54256: PUSH
54257: LD_INT 1
54259: PUSH
54260: LD_INT 0
54262: PUSH
54263: EMPTY
54264: LIST
54265: LIST
54266: PUSH
54267: LD_INT 1
54269: PUSH
54270: LD_INT 1
54272: PUSH
54273: EMPTY
54274: LIST
54275: LIST
54276: PUSH
54277: LD_INT 0
54279: PUSH
54280: LD_INT 1
54282: PUSH
54283: EMPTY
54284: LIST
54285: LIST
54286: PUSH
54287: LD_INT 1
54289: NEG
54290: PUSH
54291: LD_INT 0
54293: PUSH
54294: EMPTY
54295: LIST
54296: LIST
54297: PUSH
54298: LD_INT 1
54300: NEG
54301: PUSH
54302: LD_INT 1
54304: NEG
54305: PUSH
54306: EMPTY
54307: LIST
54308: LIST
54309: PUSH
54310: LD_INT 1
54312: NEG
54313: PUSH
54314: LD_INT 2
54316: NEG
54317: PUSH
54318: EMPTY
54319: LIST
54320: LIST
54321: PUSH
54322: LD_INT 0
54324: PUSH
54325: LD_INT 2
54327: NEG
54328: PUSH
54329: EMPTY
54330: LIST
54331: LIST
54332: PUSH
54333: LD_INT 1
54335: PUSH
54336: LD_INT 1
54338: NEG
54339: PUSH
54340: EMPTY
54341: LIST
54342: LIST
54343: PUSH
54344: LD_INT 2
54346: PUSH
54347: LD_INT 0
54349: PUSH
54350: EMPTY
54351: LIST
54352: LIST
54353: PUSH
54354: LD_INT 2
54356: PUSH
54357: LD_INT 1
54359: PUSH
54360: EMPTY
54361: LIST
54362: LIST
54363: PUSH
54364: LD_INT 2
54366: PUSH
54367: LD_INT 2
54369: PUSH
54370: EMPTY
54371: LIST
54372: LIST
54373: PUSH
54374: LD_INT 1
54376: PUSH
54377: LD_INT 2
54379: PUSH
54380: EMPTY
54381: LIST
54382: LIST
54383: PUSH
54384: LD_INT 0
54386: PUSH
54387: LD_INT 2
54389: PUSH
54390: EMPTY
54391: LIST
54392: LIST
54393: PUSH
54394: LD_INT 1
54396: NEG
54397: PUSH
54398: LD_INT 1
54400: PUSH
54401: EMPTY
54402: LIST
54403: LIST
54404: PUSH
54405: LD_INT 2
54407: NEG
54408: PUSH
54409: LD_INT 0
54411: PUSH
54412: EMPTY
54413: LIST
54414: LIST
54415: PUSH
54416: LD_INT 2
54418: NEG
54419: PUSH
54420: LD_INT 1
54422: NEG
54423: PUSH
54424: EMPTY
54425: LIST
54426: LIST
54427: PUSH
54428: LD_INT 2
54430: NEG
54431: PUSH
54432: LD_INT 2
54434: NEG
54435: PUSH
54436: EMPTY
54437: LIST
54438: LIST
54439: PUSH
54440: EMPTY
54441: LIST
54442: LIST
54443: LIST
54444: LIST
54445: LIST
54446: LIST
54447: LIST
54448: LIST
54449: LIST
54450: LIST
54451: LIST
54452: LIST
54453: LIST
54454: LIST
54455: LIST
54456: LIST
54457: LIST
54458: LIST
54459: LIST
54460: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54461: LD_ADDR_VAR 0 56
54465: PUSH
54466: LD_INT 0
54468: PUSH
54469: LD_INT 0
54471: PUSH
54472: EMPTY
54473: LIST
54474: LIST
54475: PUSH
54476: LD_INT 0
54478: PUSH
54479: LD_INT 1
54481: NEG
54482: PUSH
54483: EMPTY
54484: LIST
54485: LIST
54486: PUSH
54487: LD_INT 1
54489: PUSH
54490: LD_INT 0
54492: PUSH
54493: EMPTY
54494: LIST
54495: LIST
54496: PUSH
54497: LD_INT 1
54499: PUSH
54500: LD_INT 1
54502: PUSH
54503: EMPTY
54504: LIST
54505: LIST
54506: PUSH
54507: LD_INT 0
54509: PUSH
54510: LD_INT 1
54512: PUSH
54513: EMPTY
54514: LIST
54515: LIST
54516: PUSH
54517: LD_INT 1
54519: NEG
54520: PUSH
54521: LD_INT 0
54523: PUSH
54524: EMPTY
54525: LIST
54526: LIST
54527: PUSH
54528: LD_INT 1
54530: NEG
54531: PUSH
54532: LD_INT 1
54534: NEG
54535: PUSH
54536: EMPTY
54537: LIST
54538: LIST
54539: PUSH
54540: LD_INT 1
54542: NEG
54543: PUSH
54544: LD_INT 2
54546: NEG
54547: PUSH
54548: EMPTY
54549: LIST
54550: LIST
54551: PUSH
54552: LD_INT 0
54554: PUSH
54555: LD_INT 2
54557: NEG
54558: PUSH
54559: EMPTY
54560: LIST
54561: LIST
54562: PUSH
54563: LD_INT 1
54565: PUSH
54566: LD_INT 1
54568: NEG
54569: PUSH
54570: EMPTY
54571: LIST
54572: LIST
54573: PUSH
54574: LD_INT 2
54576: PUSH
54577: LD_INT 0
54579: PUSH
54580: EMPTY
54581: LIST
54582: LIST
54583: PUSH
54584: LD_INT 2
54586: PUSH
54587: LD_INT 1
54589: PUSH
54590: EMPTY
54591: LIST
54592: LIST
54593: PUSH
54594: LD_INT 2
54596: PUSH
54597: LD_INT 2
54599: PUSH
54600: EMPTY
54601: LIST
54602: LIST
54603: PUSH
54604: LD_INT 1
54606: PUSH
54607: LD_INT 2
54609: PUSH
54610: EMPTY
54611: LIST
54612: LIST
54613: PUSH
54614: LD_INT 0
54616: PUSH
54617: LD_INT 2
54619: PUSH
54620: EMPTY
54621: LIST
54622: LIST
54623: PUSH
54624: LD_INT 1
54626: NEG
54627: PUSH
54628: LD_INT 1
54630: PUSH
54631: EMPTY
54632: LIST
54633: LIST
54634: PUSH
54635: LD_INT 2
54637: NEG
54638: PUSH
54639: LD_INT 0
54641: PUSH
54642: EMPTY
54643: LIST
54644: LIST
54645: PUSH
54646: LD_INT 2
54648: NEG
54649: PUSH
54650: LD_INT 1
54652: NEG
54653: PUSH
54654: EMPTY
54655: LIST
54656: LIST
54657: PUSH
54658: LD_INT 2
54660: NEG
54661: PUSH
54662: LD_INT 2
54664: NEG
54665: PUSH
54666: EMPTY
54667: LIST
54668: LIST
54669: PUSH
54670: EMPTY
54671: LIST
54672: LIST
54673: LIST
54674: LIST
54675: LIST
54676: LIST
54677: LIST
54678: LIST
54679: LIST
54680: LIST
54681: LIST
54682: LIST
54683: LIST
54684: LIST
54685: LIST
54686: LIST
54687: LIST
54688: LIST
54689: LIST
54690: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54691: LD_ADDR_VAR 0 57
54695: PUSH
54696: LD_INT 0
54698: PUSH
54699: LD_INT 0
54701: PUSH
54702: EMPTY
54703: LIST
54704: LIST
54705: PUSH
54706: LD_INT 0
54708: PUSH
54709: LD_INT 1
54711: NEG
54712: PUSH
54713: EMPTY
54714: LIST
54715: LIST
54716: PUSH
54717: LD_INT 1
54719: PUSH
54720: LD_INT 0
54722: PUSH
54723: EMPTY
54724: LIST
54725: LIST
54726: PUSH
54727: LD_INT 1
54729: PUSH
54730: LD_INT 1
54732: PUSH
54733: EMPTY
54734: LIST
54735: LIST
54736: PUSH
54737: LD_INT 0
54739: PUSH
54740: LD_INT 1
54742: PUSH
54743: EMPTY
54744: LIST
54745: LIST
54746: PUSH
54747: LD_INT 1
54749: NEG
54750: PUSH
54751: LD_INT 0
54753: PUSH
54754: EMPTY
54755: LIST
54756: LIST
54757: PUSH
54758: LD_INT 1
54760: NEG
54761: PUSH
54762: LD_INT 1
54764: NEG
54765: PUSH
54766: EMPTY
54767: LIST
54768: LIST
54769: PUSH
54770: LD_INT 1
54772: NEG
54773: PUSH
54774: LD_INT 2
54776: NEG
54777: PUSH
54778: EMPTY
54779: LIST
54780: LIST
54781: PUSH
54782: LD_INT 0
54784: PUSH
54785: LD_INT 2
54787: NEG
54788: PUSH
54789: EMPTY
54790: LIST
54791: LIST
54792: PUSH
54793: LD_INT 1
54795: PUSH
54796: LD_INT 1
54798: NEG
54799: PUSH
54800: EMPTY
54801: LIST
54802: LIST
54803: PUSH
54804: LD_INT 2
54806: PUSH
54807: LD_INT 0
54809: PUSH
54810: EMPTY
54811: LIST
54812: LIST
54813: PUSH
54814: LD_INT 2
54816: PUSH
54817: LD_INT 1
54819: PUSH
54820: EMPTY
54821: LIST
54822: LIST
54823: PUSH
54824: LD_INT 2
54826: PUSH
54827: LD_INT 2
54829: PUSH
54830: EMPTY
54831: LIST
54832: LIST
54833: PUSH
54834: LD_INT 1
54836: PUSH
54837: LD_INT 2
54839: PUSH
54840: EMPTY
54841: LIST
54842: LIST
54843: PUSH
54844: LD_INT 0
54846: PUSH
54847: LD_INT 2
54849: PUSH
54850: EMPTY
54851: LIST
54852: LIST
54853: PUSH
54854: LD_INT 1
54856: NEG
54857: PUSH
54858: LD_INT 1
54860: PUSH
54861: EMPTY
54862: LIST
54863: LIST
54864: PUSH
54865: LD_INT 2
54867: NEG
54868: PUSH
54869: LD_INT 0
54871: PUSH
54872: EMPTY
54873: LIST
54874: LIST
54875: PUSH
54876: LD_INT 2
54878: NEG
54879: PUSH
54880: LD_INT 1
54882: NEG
54883: PUSH
54884: EMPTY
54885: LIST
54886: LIST
54887: PUSH
54888: LD_INT 2
54890: NEG
54891: PUSH
54892: LD_INT 2
54894: NEG
54895: PUSH
54896: EMPTY
54897: LIST
54898: LIST
54899: PUSH
54900: EMPTY
54901: LIST
54902: LIST
54903: LIST
54904: LIST
54905: LIST
54906: LIST
54907: LIST
54908: LIST
54909: LIST
54910: LIST
54911: LIST
54912: LIST
54913: LIST
54914: LIST
54915: LIST
54916: LIST
54917: LIST
54918: LIST
54919: LIST
54920: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54921: LD_ADDR_VAR 0 58
54925: PUSH
54926: LD_INT 0
54928: PUSH
54929: LD_INT 0
54931: PUSH
54932: EMPTY
54933: LIST
54934: LIST
54935: PUSH
54936: LD_INT 0
54938: PUSH
54939: LD_INT 1
54941: NEG
54942: PUSH
54943: EMPTY
54944: LIST
54945: LIST
54946: PUSH
54947: LD_INT 1
54949: PUSH
54950: LD_INT 0
54952: PUSH
54953: EMPTY
54954: LIST
54955: LIST
54956: PUSH
54957: LD_INT 1
54959: PUSH
54960: LD_INT 1
54962: PUSH
54963: EMPTY
54964: LIST
54965: LIST
54966: PUSH
54967: LD_INT 0
54969: PUSH
54970: LD_INT 1
54972: PUSH
54973: EMPTY
54974: LIST
54975: LIST
54976: PUSH
54977: LD_INT 1
54979: NEG
54980: PUSH
54981: LD_INT 0
54983: PUSH
54984: EMPTY
54985: LIST
54986: LIST
54987: PUSH
54988: LD_INT 1
54990: NEG
54991: PUSH
54992: LD_INT 1
54994: NEG
54995: PUSH
54996: EMPTY
54997: LIST
54998: LIST
54999: PUSH
55000: LD_INT 1
55002: NEG
55003: PUSH
55004: LD_INT 2
55006: NEG
55007: PUSH
55008: EMPTY
55009: LIST
55010: LIST
55011: PUSH
55012: LD_INT 0
55014: PUSH
55015: LD_INT 2
55017: NEG
55018: PUSH
55019: EMPTY
55020: LIST
55021: LIST
55022: PUSH
55023: LD_INT 1
55025: PUSH
55026: LD_INT 1
55028: NEG
55029: PUSH
55030: EMPTY
55031: LIST
55032: LIST
55033: PUSH
55034: LD_INT 2
55036: PUSH
55037: LD_INT 0
55039: PUSH
55040: EMPTY
55041: LIST
55042: LIST
55043: PUSH
55044: LD_INT 2
55046: PUSH
55047: LD_INT 1
55049: PUSH
55050: EMPTY
55051: LIST
55052: LIST
55053: PUSH
55054: LD_INT 2
55056: PUSH
55057: LD_INT 2
55059: PUSH
55060: EMPTY
55061: LIST
55062: LIST
55063: PUSH
55064: LD_INT 1
55066: PUSH
55067: LD_INT 2
55069: PUSH
55070: EMPTY
55071: LIST
55072: LIST
55073: PUSH
55074: LD_INT 0
55076: PUSH
55077: LD_INT 2
55079: PUSH
55080: EMPTY
55081: LIST
55082: LIST
55083: PUSH
55084: LD_INT 1
55086: NEG
55087: PUSH
55088: LD_INT 1
55090: PUSH
55091: EMPTY
55092: LIST
55093: LIST
55094: PUSH
55095: LD_INT 2
55097: NEG
55098: PUSH
55099: LD_INT 0
55101: PUSH
55102: EMPTY
55103: LIST
55104: LIST
55105: PUSH
55106: LD_INT 2
55108: NEG
55109: PUSH
55110: LD_INT 1
55112: NEG
55113: PUSH
55114: EMPTY
55115: LIST
55116: LIST
55117: PUSH
55118: LD_INT 2
55120: NEG
55121: PUSH
55122: LD_INT 2
55124: NEG
55125: PUSH
55126: EMPTY
55127: LIST
55128: LIST
55129: PUSH
55130: EMPTY
55131: LIST
55132: LIST
55133: LIST
55134: LIST
55135: LIST
55136: LIST
55137: LIST
55138: LIST
55139: LIST
55140: LIST
55141: LIST
55142: LIST
55143: LIST
55144: LIST
55145: LIST
55146: LIST
55147: LIST
55148: LIST
55149: LIST
55150: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55151: LD_ADDR_VAR 0 59
55155: PUSH
55156: LD_INT 0
55158: PUSH
55159: LD_INT 0
55161: PUSH
55162: EMPTY
55163: LIST
55164: LIST
55165: PUSH
55166: LD_INT 0
55168: PUSH
55169: LD_INT 1
55171: NEG
55172: PUSH
55173: EMPTY
55174: LIST
55175: LIST
55176: PUSH
55177: LD_INT 1
55179: PUSH
55180: LD_INT 0
55182: PUSH
55183: EMPTY
55184: LIST
55185: LIST
55186: PUSH
55187: LD_INT 1
55189: PUSH
55190: LD_INT 1
55192: PUSH
55193: EMPTY
55194: LIST
55195: LIST
55196: PUSH
55197: LD_INT 0
55199: PUSH
55200: LD_INT 1
55202: PUSH
55203: EMPTY
55204: LIST
55205: LIST
55206: PUSH
55207: LD_INT 1
55209: NEG
55210: PUSH
55211: LD_INT 0
55213: PUSH
55214: EMPTY
55215: LIST
55216: LIST
55217: PUSH
55218: LD_INT 1
55220: NEG
55221: PUSH
55222: LD_INT 1
55224: NEG
55225: PUSH
55226: EMPTY
55227: LIST
55228: LIST
55229: PUSH
55230: EMPTY
55231: LIST
55232: LIST
55233: LIST
55234: LIST
55235: LIST
55236: LIST
55237: LIST
55238: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55239: LD_ADDR_VAR 0 60
55243: PUSH
55244: LD_INT 0
55246: PUSH
55247: LD_INT 0
55249: PUSH
55250: EMPTY
55251: LIST
55252: LIST
55253: PUSH
55254: LD_INT 0
55256: PUSH
55257: LD_INT 1
55259: NEG
55260: PUSH
55261: EMPTY
55262: LIST
55263: LIST
55264: PUSH
55265: LD_INT 1
55267: PUSH
55268: LD_INT 0
55270: PUSH
55271: EMPTY
55272: LIST
55273: LIST
55274: PUSH
55275: LD_INT 1
55277: PUSH
55278: LD_INT 1
55280: PUSH
55281: EMPTY
55282: LIST
55283: LIST
55284: PUSH
55285: LD_INT 0
55287: PUSH
55288: LD_INT 1
55290: PUSH
55291: EMPTY
55292: LIST
55293: LIST
55294: PUSH
55295: LD_INT 1
55297: NEG
55298: PUSH
55299: LD_INT 0
55301: PUSH
55302: EMPTY
55303: LIST
55304: LIST
55305: PUSH
55306: LD_INT 1
55308: NEG
55309: PUSH
55310: LD_INT 1
55312: NEG
55313: PUSH
55314: EMPTY
55315: LIST
55316: LIST
55317: PUSH
55318: EMPTY
55319: LIST
55320: LIST
55321: LIST
55322: LIST
55323: LIST
55324: LIST
55325: LIST
55326: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55327: LD_ADDR_VAR 0 61
55331: PUSH
55332: LD_INT 0
55334: PUSH
55335: LD_INT 0
55337: PUSH
55338: EMPTY
55339: LIST
55340: LIST
55341: PUSH
55342: LD_INT 0
55344: PUSH
55345: LD_INT 1
55347: NEG
55348: PUSH
55349: EMPTY
55350: LIST
55351: LIST
55352: PUSH
55353: LD_INT 1
55355: PUSH
55356: LD_INT 0
55358: PUSH
55359: EMPTY
55360: LIST
55361: LIST
55362: PUSH
55363: LD_INT 1
55365: PUSH
55366: LD_INT 1
55368: PUSH
55369: EMPTY
55370: LIST
55371: LIST
55372: PUSH
55373: LD_INT 0
55375: PUSH
55376: LD_INT 1
55378: PUSH
55379: EMPTY
55380: LIST
55381: LIST
55382: PUSH
55383: LD_INT 1
55385: NEG
55386: PUSH
55387: LD_INT 0
55389: PUSH
55390: EMPTY
55391: LIST
55392: LIST
55393: PUSH
55394: LD_INT 1
55396: NEG
55397: PUSH
55398: LD_INT 1
55400: NEG
55401: PUSH
55402: EMPTY
55403: LIST
55404: LIST
55405: PUSH
55406: EMPTY
55407: LIST
55408: LIST
55409: LIST
55410: LIST
55411: LIST
55412: LIST
55413: LIST
55414: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55415: LD_ADDR_VAR 0 62
55419: PUSH
55420: LD_INT 0
55422: PUSH
55423: LD_INT 0
55425: PUSH
55426: EMPTY
55427: LIST
55428: LIST
55429: PUSH
55430: LD_INT 0
55432: PUSH
55433: LD_INT 1
55435: NEG
55436: PUSH
55437: EMPTY
55438: LIST
55439: LIST
55440: PUSH
55441: LD_INT 1
55443: PUSH
55444: LD_INT 0
55446: PUSH
55447: EMPTY
55448: LIST
55449: LIST
55450: PUSH
55451: LD_INT 1
55453: PUSH
55454: LD_INT 1
55456: PUSH
55457: EMPTY
55458: LIST
55459: LIST
55460: PUSH
55461: LD_INT 0
55463: PUSH
55464: LD_INT 1
55466: PUSH
55467: EMPTY
55468: LIST
55469: LIST
55470: PUSH
55471: LD_INT 1
55473: NEG
55474: PUSH
55475: LD_INT 0
55477: PUSH
55478: EMPTY
55479: LIST
55480: LIST
55481: PUSH
55482: LD_INT 1
55484: NEG
55485: PUSH
55486: LD_INT 1
55488: NEG
55489: PUSH
55490: EMPTY
55491: LIST
55492: LIST
55493: PUSH
55494: EMPTY
55495: LIST
55496: LIST
55497: LIST
55498: LIST
55499: LIST
55500: LIST
55501: LIST
55502: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55503: LD_ADDR_VAR 0 63
55507: PUSH
55508: LD_INT 0
55510: PUSH
55511: LD_INT 0
55513: PUSH
55514: EMPTY
55515: LIST
55516: LIST
55517: PUSH
55518: LD_INT 0
55520: PUSH
55521: LD_INT 1
55523: NEG
55524: PUSH
55525: EMPTY
55526: LIST
55527: LIST
55528: PUSH
55529: LD_INT 1
55531: PUSH
55532: LD_INT 0
55534: PUSH
55535: EMPTY
55536: LIST
55537: LIST
55538: PUSH
55539: LD_INT 1
55541: PUSH
55542: LD_INT 1
55544: PUSH
55545: EMPTY
55546: LIST
55547: LIST
55548: PUSH
55549: LD_INT 0
55551: PUSH
55552: LD_INT 1
55554: PUSH
55555: EMPTY
55556: LIST
55557: LIST
55558: PUSH
55559: LD_INT 1
55561: NEG
55562: PUSH
55563: LD_INT 0
55565: PUSH
55566: EMPTY
55567: LIST
55568: LIST
55569: PUSH
55570: LD_INT 1
55572: NEG
55573: PUSH
55574: LD_INT 1
55576: NEG
55577: PUSH
55578: EMPTY
55579: LIST
55580: LIST
55581: PUSH
55582: EMPTY
55583: LIST
55584: LIST
55585: LIST
55586: LIST
55587: LIST
55588: LIST
55589: LIST
55590: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55591: LD_ADDR_VAR 0 64
55595: PUSH
55596: LD_INT 0
55598: PUSH
55599: LD_INT 0
55601: PUSH
55602: EMPTY
55603: LIST
55604: LIST
55605: PUSH
55606: LD_INT 0
55608: PUSH
55609: LD_INT 1
55611: NEG
55612: PUSH
55613: EMPTY
55614: LIST
55615: LIST
55616: PUSH
55617: LD_INT 1
55619: PUSH
55620: LD_INT 0
55622: PUSH
55623: EMPTY
55624: LIST
55625: LIST
55626: PUSH
55627: LD_INT 1
55629: PUSH
55630: LD_INT 1
55632: PUSH
55633: EMPTY
55634: LIST
55635: LIST
55636: PUSH
55637: LD_INT 0
55639: PUSH
55640: LD_INT 1
55642: PUSH
55643: EMPTY
55644: LIST
55645: LIST
55646: PUSH
55647: LD_INT 1
55649: NEG
55650: PUSH
55651: LD_INT 0
55653: PUSH
55654: EMPTY
55655: LIST
55656: LIST
55657: PUSH
55658: LD_INT 1
55660: NEG
55661: PUSH
55662: LD_INT 1
55664: NEG
55665: PUSH
55666: EMPTY
55667: LIST
55668: LIST
55669: PUSH
55670: EMPTY
55671: LIST
55672: LIST
55673: LIST
55674: LIST
55675: LIST
55676: LIST
55677: LIST
55678: ST_TO_ADDR
// end ; 1 :
55679: GO 61576
55681: LD_INT 1
55683: DOUBLE
55684: EQUAL
55685: IFTRUE 55689
55687: GO 58312
55689: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55690: LD_ADDR_VAR 0 11
55694: PUSH
55695: LD_INT 1
55697: NEG
55698: PUSH
55699: LD_INT 3
55701: NEG
55702: PUSH
55703: EMPTY
55704: LIST
55705: LIST
55706: PUSH
55707: LD_INT 0
55709: PUSH
55710: LD_INT 3
55712: NEG
55713: PUSH
55714: EMPTY
55715: LIST
55716: LIST
55717: PUSH
55718: LD_INT 1
55720: PUSH
55721: LD_INT 2
55723: NEG
55724: PUSH
55725: EMPTY
55726: LIST
55727: LIST
55728: PUSH
55729: EMPTY
55730: LIST
55731: LIST
55732: LIST
55733: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55734: LD_ADDR_VAR 0 12
55738: PUSH
55739: LD_INT 2
55741: PUSH
55742: LD_INT 1
55744: NEG
55745: PUSH
55746: EMPTY
55747: LIST
55748: LIST
55749: PUSH
55750: LD_INT 3
55752: PUSH
55753: LD_INT 0
55755: PUSH
55756: EMPTY
55757: LIST
55758: LIST
55759: PUSH
55760: LD_INT 3
55762: PUSH
55763: LD_INT 1
55765: PUSH
55766: EMPTY
55767: LIST
55768: LIST
55769: PUSH
55770: EMPTY
55771: LIST
55772: LIST
55773: LIST
55774: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55775: LD_ADDR_VAR 0 13
55779: PUSH
55780: LD_INT 3
55782: PUSH
55783: LD_INT 2
55785: PUSH
55786: EMPTY
55787: LIST
55788: LIST
55789: PUSH
55790: LD_INT 3
55792: PUSH
55793: LD_INT 3
55795: PUSH
55796: EMPTY
55797: LIST
55798: LIST
55799: PUSH
55800: LD_INT 2
55802: PUSH
55803: LD_INT 3
55805: PUSH
55806: EMPTY
55807: LIST
55808: LIST
55809: PUSH
55810: EMPTY
55811: LIST
55812: LIST
55813: LIST
55814: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55815: LD_ADDR_VAR 0 14
55819: PUSH
55820: LD_INT 1
55822: PUSH
55823: LD_INT 3
55825: PUSH
55826: EMPTY
55827: LIST
55828: LIST
55829: PUSH
55830: LD_INT 0
55832: PUSH
55833: LD_INT 3
55835: PUSH
55836: EMPTY
55837: LIST
55838: LIST
55839: PUSH
55840: LD_INT 1
55842: NEG
55843: PUSH
55844: LD_INT 2
55846: PUSH
55847: EMPTY
55848: LIST
55849: LIST
55850: PUSH
55851: EMPTY
55852: LIST
55853: LIST
55854: LIST
55855: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55856: LD_ADDR_VAR 0 15
55860: PUSH
55861: LD_INT 2
55863: NEG
55864: PUSH
55865: LD_INT 1
55867: PUSH
55868: EMPTY
55869: LIST
55870: LIST
55871: PUSH
55872: LD_INT 3
55874: NEG
55875: PUSH
55876: LD_INT 0
55878: PUSH
55879: EMPTY
55880: LIST
55881: LIST
55882: PUSH
55883: LD_INT 3
55885: NEG
55886: PUSH
55887: LD_INT 1
55889: NEG
55890: PUSH
55891: EMPTY
55892: LIST
55893: LIST
55894: PUSH
55895: EMPTY
55896: LIST
55897: LIST
55898: LIST
55899: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55900: LD_ADDR_VAR 0 16
55904: PUSH
55905: LD_INT 2
55907: NEG
55908: PUSH
55909: LD_INT 3
55911: NEG
55912: PUSH
55913: EMPTY
55914: LIST
55915: LIST
55916: PUSH
55917: LD_INT 3
55919: NEG
55920: PUSH
55921: LD_INT 2
55923: NEG
55924: PUSH
55925: EMPTY
55926: LIST
55927: LIST
55928: PUSH
55929: LD_INT 3
55931: NEG
55932: PUSH
55933: LD_INT 3
55935: NEG
55936: PUSH
55937: EMPTY
55938: LIST
55939: LIST
55940: PUSH
55941: EMPTY
55942: LIST
55943: LIST
55944: LIST
55945: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55946: LD_ADDR_VAR 0 17
55950: PUSH
55951: LD_INT 1
55953: NEG
55954: PUSH
55955: LD_INT 3
55957: NEG
55958: PUSH
55959: EMPTY
55960: LIST
55961: LIST
55962: PUSH
55963: LD_INT 0
55965: PUSH
55966: LD_INT 3
55968: NEG
55969: PUSH
55970: EMPTY
55971: LIST
55972: LIST
55973: PUSH
55974: LD_INT 1
55976: PUSH
55977: LD_INT 2
55979: NEG
55980: PUSH
55981: EMPTY
55982: LIST
55983: LIST
55984: PUSH
55985: EMPTY
55986: LIST
55987: LIST
55988: LIST
55989: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55990: LD_ADDR_VAR 0 18
55994: PUSH
55995: LD_INT 2
55997: PUSH
55998: LD_INT 1
56000: NEG
56001: PUSH
56002: EMPTY
56003: LIST
56004: LIST
56005: PUSH
56006: LD_INT 3
56008: PUSH
56009: LD_INT 0
56011: PUSH
56012: EMPTY
56013: LIST
56014: LIST
56015: PUSH
56016: LD_INT 3
56018: PUSH
56019: LD_INT 1
56021: PUSH
56022: EMPTY
56023: LIST
56024: LIST
56025: PUSH
56026: EMPTY
56027: LIST
56028: LIST
56029: LIST
56030: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56031: LD_ADDR_VAR 0 19
56035: PUSH
56036: LD_INT 3
56038: PUSH
56039: LD_INT 2
56041: PUSH
56042: EMPTY
56043: LIST
56044: LIST
56045: PUSH
56046: LD_INT 3
56048: PUSH
56049: LD_INT 3
56051: PUSH
56052: EMPTY
56053: LIST
56054: LIST
56055: PUSH
56056: LD_INT 2
56058: PUSH
56059: LD_INT 3
56061: PUSH
56062: EMPTY
56063: LIST
56064: LIST
56065: PUSH
56066: EMPTY
56067: LIST
56068: LIST
56069: LIST
56070: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56071: LD_ADDR_VAR 0 20
56075: PUSH
56076: LD_INT 1
56078: PUSH
56079: LD_INT 3
56081: PUSH
56082: EMPTY
56083: LIST
56084: LIST
56085: PUSH
56086: LD_INT 0
56088: PUSH
56089: LD_INT 3
56091: PUSH
56092: EMPTY
56093: LIST
56094: LIST
56095: PUSH
56096: LD_INT 1
56098: NEG
56099: PUSH
56100: LD_INT 2
56102: PUSH
56103: EMPTY
56104: LIST
56105: LIST
56106: PUSH
56107: EMPTY
56108: LIST
56109: LIST
56110: LIST
56111: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56112: LD_ADDR_VAR 0 21
56116: PUSH
56117: LD_INT 2
56119: NEG
56120: PUSH
56121: LD_INT 1
56123: PUSH
56124: EMPTY
56125: LIST
56126: LIST
56127: PUSH
56128: LD_INT 3
56130: NEG
56131: PUSH
56132: LD_INT 0
56134: PUSH
56135: EMPTY
56136: LIST
56137: LIST
56138: PUSH
56139: LD_INT 3
56141: NEG
56142: PUSH
56143: LD_INT 1
56145: NEG
56146: PUSH
56147: EMPTY
56148: LIST
56149: LIST
56150: PUSH
56151: EMPTY
56152: LIST
56153: LIST
56154: LIST
56155: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56156: LD_ADDR_VAR 0 22
56160: PUSH
56161: LD_INT 2
56163: NEG
56164: PUSH
56165: LD_INT 3
56167: NEG
56168: PUSH
56169: EMPTY
56170: LIST
56171: LIST
56172: PUSH
56173: LD_INT 3
56175: NEG
56176: PUSH
56177: LD_INT 2
56179: NEG
56180: PUSH
56181: EMPTY
56182: LIST
56183: LIST
56184: PUSH
56185: LD_INT 3
56187: NEG
56188: PUSH
56189: LD_INT 3
56191: NEG
56192: PUSH
56193: EMPTY
56194: LIST
56195: LIST
56196: PUSH
56197: EMPTY
56198: LIST
56199: LIST
56200: LIST
56201: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
56202: LD_ADDR_VAR 0 23
56206: PUSH
56207: LD_INT 0
56209: PUSH
56210: LD_INT 3
56212: NEG
56213: PUSH
56214: EMPTY
56215: LIST
56216: LIST
56217: PUSH
56218: LD_INT 1
56220: NEG
56221: PUSH
56222: LD_INT 4
56224: NEG
56225: PUSH
56226: EMPTY
56227: LIST
56228: LIST
56229: PUSH
56230: LD_INT 1
56232: PUSH
56233: LD_INT 3
56235: NEG
56236: PUSH
56237: EMPTY
56238: LIST
56239: LIST
56240: PUSH
56241: EMPTY
56242: LIST
56243: LIST
56244: LIST
56245: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
56246: LD_ADDR_VAR 0 24
56250: PUSH
56251: LD_INT 3
56253: PUSH
56254: LD_INT 0
56256: PUSH
56257: EMPTY
56258: LIST
56259: LIST
56260: PUSH
56261: LD_INT 3
56263: PUSH
56264: LD_INT 1
56266: NEG
56267: PUSH
56268: EMPTY
56269: LIST
56270: LIST
56271: PUSH
56272: LD_INT 4
56274: PUSH
56275: LD_INT 1
56277: PUSH
56278: EMPTY
56279: LIST
56280: LIST
56281: PUSH
56282: EMPTY
56283: LIST
56284: LIST
56285: LIST
56286: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
56287: LD_ADDR_VAR 0 25
56291: PUSH
56292: LD_INT 3
56294: PUSH
56295: LD_INT 3
56297: PUSH
56298: EMPTY
56299: LIST
56300: LIST
56301: PUSH
56302: LD_INT 4
56304: PUSH
56305: LD_INT 3
56307: PUSH
56308: EMPTY
56309: LIST
56310: LIST
56311: PUSH
56312: LD_INT 3
56314: PUSH
56315: LD_INT 4
56317: PUSH
56318: EMPTY
56319: LIST
56320: LIST
56321: PUSH
56322: EMPTY
56323: LIST
56324: LIST
56325: LIST
56326: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
56327: LD_ADDR_VAR 0 26
56331: PUSH
56332: LD_INT 0
56334: PUSH
56335: LD_INT 3
56337: PUSH
56338: EMPTY
56339: LIST
56340: LIST
56341: PUSH
56342: LD_INT 1
56344: PUSH
56345: LD_INT 4
56347: PUSH
56348: EMPTY
56349: LIST
56350: LIST
56351: PUSH
56352: LD_INT 1
56354: NEG
56355: PUSH
56356: LD_INT 3
56358: PUSH
56359: EMPTY
56360: LIST
56361: LIST
56362: PUSH
56363: EMPTY
56364: LIST
56365: LIST
56366: LIST
56367: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
56368: LD_ADDR_VAR 0 27
56372: PUSH
56373: LD_INT 3
56375: NEG
56376: PUSH
56377: LD_INT 0
56379: PUSH
56380: EMPTY
56381: LIST
56382: LIST
56383: PUSH
56384: LD_INT 3
56386: NEG
56387: PUSH
56388: LD_INT 1
56390: PUSH
56391: EMPTY
56392: LIST
56393: LIST
56394: PUSH
56395: LD_INT 4
56397: NEG
56398: PUSH
56399: LD_INT 1
56401: NEG
56402: PUSH
56403: EMPTY
56404: LIST
56405: LIST
56406: PUSH
56407: EMPTY
56408: LIST
56409: LIST
56410: LIST
56411: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
56412: LD_ADDR_VAR 0 28
56416: PUSH
56417: LD_INT 3
56419: NEG
56420: PUSH
56421: LD_INT 3
56423: NEG
56424: PUSH
56425: EMPTY
56426: LIST
56427: LIST
56428: PUSH
56429: LD_INT 3
56431: NEG
56432: PUSH
56433: LD_INT 4
56435: NEG
56436: PUSH
56437: EMPTY
56438: LIST
56439: LIST
56440: PUSH
56441: LD_INT 4
56443: NEG
56444: PUSH
56445: LD_INT 3
56447: NEG
56448: PUSH
56449: EMPTY
56450: LIST
56451: LIST
56452: PUSH
56453: EMPTY
56454: LIST
56455: LIST
56456: LIST
56457: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
56458: LD_ADDR_VAR 0 29
56462: PUSH
56463: LD_INT 1
56465: NEG
56466: PUSH
56467: LD_INT 3
56469: NEG
56470: PUSH
56471: EMPTY
56472: LIST
56473: LIST
56474: PUSH
56475: LD_INT 0
56477: PUSH
56478: LD_INT 3
56480: NEG
56481: PUSH
56482: EMPTY
56483: LIST
56484: LIST
56485: PUSH
56486: LD_INT 1
56488: PUSH
56489: LD_INT 2
56491: NEG
56492: PUSH
56493: EMPTY
56494: LIST
56495: LIST
56496: PUSH
56497: LD_INT 1
56499: NEG
56500: PUSH
56501: LD_INT 4
56503: NEG
56504: PUSH
56505: EMPTY
56506: LIST
56507: LIST
56508: PUSH
56509: LD_INT 0
56511: PUSH
56512: LD_INT 4
56514: NEG
56515: PUSH
56516: EMPTY
56517: LIST
56518: LIST
56519: PUSH
56520: LD_INT 1
56522: PUSH
56523: LD_INT 3
56525: NEG
56526: PUSH
56527: EMPTY
56528: LIST
56529: LIST
56530: PUSH
56531: LD_INT 1
56533: NEG
56534: PUSH
56535: LD_INT 5
56537: NEG
56538: PUSH
56539: EMPTY
56540: LIST
56541: LIST
56542: PUSH
56543: LD_INT 0
56545: PUSH
56546: LD_INT 5
56548: NEG
56549: PUSH
56550: EMPTY
56551: LIST
56552: LIST
56553: PUSH
56554: LD_INT 1
56556: PUSH
56557: LD_INT 4
56559: NEG
56560: PUSH
56561: EMPTY
56562: LIST
56563: LIST
56564: PUSH
56565: LD_INT 1
56567: NEG
56568: PUSH
56569: LD_INT 6
56571: NEG
56572: PUSH
56573: EMPTY
56574: LIST
56575: LIST
56576: PUSH
56577: LD_INT 0
56579: PUSH
56580: LD_INT 6
56582: NEG
56583: PUSH
56584: EMPTY
56585: LIST
56586: LIST
56587: PUSH
56588: LD_INT 1
56590: PUSH
56591: LD_INT 5
56593: NEG
56594: PUSH
56595: EMPTY
56596: LIST
56597: LIST
56598: PUSH
56599: EMPTY
56600: LIST
56601: LIST
56602: LIST
56603: LIST
56604: LIST
56605: LIST
56606: LIST
56607: LIST
56608: LIST
56609: LIST
56610: LIST
56611: LIST
56612: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
56613: LD_ADDR_VAR 0 30
56617: PUSH
56618: LD_INT 2
56620: PUSH
56621: LD_INT 1
56623: NEG
56624: PUSH
56625: EMPTY
56626: LIST
56627: LIST
56628: PUSH
56629: LD_INT 3
56631: PUSH
56632: LD_INT 0
56634: PUSH
56635: EMPTY
56636: LIST
56637: LIST
56638: PUSH
56639: LD_INT 3
56641: PUSH
56642: LD_INT 1
56644: PUSH
56645: EMPTY
56646: LIST
56647: LIST
56648: PUSH
56649: LD_INT 3
56651: PUSH
56652: LD_INT 1
56654: NEG
56655: PUSH
56656: EMPTY
56657: LIST
56658: LIST
56659: PUSH
56660: LD_INT 4
56662: PUSH
56663: LD_INT 0
56665: PUSH
56666: EMPTY
56667: LIST
56668: LIST
56669: PUSH
56670: LD_INT 4
56672: PUSH
56673: LD_INT 1
56675: PUSH
56676: EMPTY
56677: LIST
56678: LIST
56679: PUSH
56680: LD_INT 4
56682: PUSH
56683: LD_INT 1
56685: NEG
56686: PUSH
56687: EMPTY
56688: LIST
56689: LIST
56690: PUSH
56691: LD_INT 5
56693: PUSH
56694: LD_INT 0
56696: PUSH
56697: EMPTY
56698: LIST
56699: LIST
56700: PUSH
56701: LD_INT 5
56703: PUSH
56704: LD_INT 1
56706: PUSH
56707: EMPTY
56708: LIST
56709: LIST
56710: PUSH
56711: LD_INT 5
56713: PUSH
56714: LD_INT 1
56716: NEG
56717: PUSH
56718: EMPTY
56719: LIST
56720: LIST
56721: PUSH
56722: LD_INT 6
56724: PUSH
56725: LD_INT 0
56727: PUSH
56728: EMPTY
56729: LIST
56730: LIST
56731: PUSH
56732: LD_INT 6
56734: PUSH
56735: LD_INT 1
56737: PUSH
56738: EMPTY
56739: LIST
56740: LIST
56741: PUSH
56742: EMPTY
56743: LIST
56744: LIST
56745: LIST
56746: LIST
56747: LIST
56748: LIST
56749: LIST
56750: LIST
56751: LIST
56752: LIST
56753: LIST
56754: LIST
56755: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
56756: LD_ADDR_VAR 0 31
56760: PUSH
56761: LD_INT 3
56763: PUSH
56764: LD_INT 2
56766: PUSH
56767: EMPTY
56768: LIST
56769: LIST
56770: PUSH
56771: LD_INT 3
56773: PUSH
56774: LD_INT 3
56776: PUSH
56777: EMPTY
56778: LIST
56779: LIST
56780: PUSH
56781: LD_INT 2
56783: PUSH
56784: LD_INT 3
56786: PUSH
56787: EMPTY
56788: LIST
56789: LIST
56790: PUSH
56791: LD_INT 4
56793: PUSH
56794: LD_INT 3
56796: PUSH
56797: EMPTY
56798: LIST
56799: LIST
56800: PUSH
56801: LD_INT 4
56803: PUSH
56804: LD_INT 4
56806: PUSH
56807: EMPTY
56808: LIST
56809: LIST
56810: PUSH
56811: LD_INT 3
56813: PUSH
56814: LD_INT 4
56816: PUSH
56817: EMPTY
56818: LIST
56819: LIST
56820: PUSH
56821: LD_INT 5
56823: PUSH
56824: LD_INT 4
56826: PUSH
56827: EMPTY
56828: LIST
56829: LIST
56830: PUSH
56831: LD_INT 5
56833: PUSH
56834: LD_INT 5
56836: PUSH
56837: EMPTY
56838: LIST
56839: LIST
56840: PUSH
56841: LD_INT 4
56843: PUSH
56844: LD_INT 5
56846: PUSH
56847: EMPTY
56848: LIST
56849: LIST
56850: PUSH
56851: LD_INT 6
56853: PUSH
56854: LD_INT 5
56856: PUSH
56857: EMPTY
56858: LIST
56859: LIST
56860: PUSH
56861: LD_INT 6
56863: PUSH
56864: LD_INT 6
56866: PUSH
56867: EMPTY
56868: LIST
56869: LIST
56870: PUSH
56871: LD_INT 5
56873: PUSH
56874: LD_INT 6
56876: PUSH
56877: EMPTY
56878: LIST
56879: LIST
56880: PUSH
56881: EMPTY
56882: LIST
56883: LIST
56884: LIST
56885: LIST
56886: LIST
56887: LIST
56888: LIST
56889: LIST
56890: LIST
56891: LIST
56892: LIST
56893: LIST
56894: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
56895: LD_ADDR_VAR 0 32
56899: PUSH
56900: LD_INT 1
56902: PUSH
56903: LD_INT 3
56905: PUSH
56906: EMPTY
56907: LIST
56908: LIST
56909: PUSH
56910: LD_INT 0
56912: PUSH
56913: LD_INT 3
56915: PUSH
56916: EMPTY
56917: LIST
56918: LIST
56919: PUSH
56920: LD_INT 1
56922: NEG
56923: PUSH
56924: LD_INT 2
56926: PUSH
56927: EMPTY
56928: LIST
56929: LIST
56930: PUSH
56931: LD_INT 1
56933: PUSH
56934: LD_INT 4
56936: PUSH
56937: EMPTY
56938: LIST
56939: LIST
56940: PUSH
56941: LD_INT 0
56943: PUSH
56944: LD_INT 4
56946: PUSH
56947: EMPTY
56948: LIST
56949: LIST
56950: PUSH
56951: LD_INT 1
56953: NEG
56954: PUSH
56955: LD_INT 3
56957: PUSH
56958: EMPTY
56959: LIST
56960: LIST
56961: PUSH
56962: LD_INT 1
56964: PUSH
56965: LD_INT 5
56967: PUSH
56968: EMPTY
56969: LIST
56970: LIST
56971: PUSH
56972: LD_INT 0
56974: PUSH
56975: LD_INT 5
56977: PUSH
56978: EMPTY
56979: LIST
56980: LIST
56981: PUSH
56982: LD_INT 1
56984: NEG
56985: PUSH
56986: LD_INT 4
56988: PUSH
56989: EMPTY
56990: LIST
56991: LIST
56992: PUSH
56993: LD_INT 1
56995: PUSH
56996: LD_INT 6
56998: PUSH
56999: EMPTY
57000: LIST
57001: LIST
57002: PUSH
57003: LD_INT 0
57005: PUSH
57006: LD_INT 6
57008: PUSH
57009: EMPTY
57010: LIST
57011: LIST
57012: PUSH
57013: LD_INT 1
57015: NEG
57016: PUSH
57017: LD_INT 5
57019: PUSH
57020: EMPTY
57021: LIST
57022: LIST
57023: PUSH
57024: EMPTY
57025: LIST
57026: LIST
57027: LIST
57028: LIST
57029: LIST
57030: LIST
57031: LIST
57032: LIST
57033: LIST
57034: LIST
57035: LIST
57036: LIST
57037: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
57038: LD_ADDR_VAR 0 33
57042: PUSH
57043: LD_INT 2
57045: NEG
57046: PUSH
57047: LD_INT 1
57049: PUSH
57050: EMPTY
57051: LIST
57052: LIST
57053: PUSH
57054: LD_INT 3
57056: NEG
57057: PUSH
57058: LD_INT 0
57060: PUSH
57061: EMPTY
57062: LIST
57063: LIST
57064: PUSH
57065: LD_INT 3
57067: NEG
57068: PUSH
57069: LD_INT 1
57071: NEG
57072: PUSH
57073: EMPTY
57074: LIST
57075: LIST
57076: PUSH
57077: LD_INT 3
57079: NEG
57080: PUSH
57081: LD_INT 1
57083: PUSH
57084: EMPTY
57085: LIST
57086: LIST
57087: PUSH
57088: LD_INT 4
57090: NEG
57091: PUSH
57092: LD_INT 0
57094: PUSH
57095: EMPTY
57096: LIST
57097: LIST
57098: PUSH
57099: LD_INT 4
57101: NEG
57102: PUSH
57103: LD_INT 1
57105: NEG
57106: PUSH
57107: EMPTY
57108: LIST
57109: LIST
57110: PUSH
57111: LD_INT 4
57113: NEG
57114: PUSH
57115: LD_INT 1
57117: PUSH
57118: EMPTY
57119: LIST
57120: LIST
57121: PUSH
57122: LD_INT 5
57124: NEG
57125: PUSH
57126: LD_INT 0
57128: PUSH
57129: EMPTY
57130: LIST
57131: LIST
57132: PUSH
57133: LD_INT 5
57135: NEG
57136: PUSH
57137: LD_INT 1
57139: NEG
57140: PUSH
57141: EMPTY
57142: LIST
57143: LIST
57144: PUSH
57145: LD_INT 5
57147: NEG
57148: PUSH
57149: LD_INT 1
57151: PUSH
57152: EMPTY
57153: LIST
57154: LIST
57155: PUSH
57156: LD_INT 6
57158: NEG
57159: PUSH
57160: LD_INT 0
57162: PUSH
57163: EMPTY
57164: LIST
57165: LIST
57166: PUSH
57167: LD_INT 6
57169: NEG
57170: PUSH
57171: LD_INT 1
57173: NEG
57174: PUSH
57175: EMPTY
57176: LIST
57177: LIST
57178: PUSH
57179: EMPTY
57180: LIST
57181: LIST
57182: LIST
57183: LIST
57184: LIST
57185: LIST
57186: LIST
57187: LIST
57188: LIST
57189: LIST
57190: LIST
57191: LIST
57192: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
57193: LD_ADDR_VAR 0 34
57197: PUSH
57198: LD_INT 2
57200: NEG
57201: PUSH
57202: LD_INT 3
57204: NEG
57205: PUSH
57206: EMPTY
57207: LIST
57208: LIST
57209: PUSH
57210: LD_INT 3
57212: NEG
57213: PUSH
57214: LD_INT 2
57216: NEG
57217: PUSH
57218: EMPTY
57219: LIST
57220: LIST
57221: PUSH
57222: LD_INT 3
57224: NEG
57225: PUSH
57226: LD_INT 3
57228: NEG
57229: PUSH
57230: EMPTY
57231: LIST
57232: LIST
57233: PUSH
57234: LD_INT 3
57236: NEG
57237: PUSH
57238: LD_INT 4
57240: NEG
57241: PUSH
57242: EMPTY
57243: LIST
57244: LIST
57245: PUSH
57246: LD_INT 4
57248: NEG
57249: PUSH
57250: LD_INT 3
57252: NEG
57253: PUSH
57254: EMPTY
57255: LIST
57256: LIST
57257: PUSH
57258: LD_INT 4
57260: NEG
57261: PUSH
57262: LD_INT 4
57264: NEG
57265: PUSH
57266: EMPTY
57267: LIST
57268: LIST
57269: PUSH
57270: LD_INT 4
57272: NEG
57273: PUSH
57274: LD_INT 5
57276: NEG
57277: PUSH
57278: EMPTY
57279: LIST
57280: LIST
57281: PUSH
57282: LD_INT 5
57284: NEG
57285: PUSH
57286: LD_INT 4
57288: NEG
57289: PUSH
57290: EMPTY
57291: LIST
57292: LIST
57293: PUSH
57294: LD_INT 5
57296: NEG
57297: PUSH
57298: LD_INT 5
57300: NEG
57301: PUSH
57302: EMPTY
57303: LIST
57304: LIST
57305: PUSH
57306: LD_INT 5
57308: NEG
57309: PUSH
57310: LD_INT 6
57312: NEG
57313: PUSH
57314: EMPTY
57315: LIST
57316: LIST
57317: PUSH
57318: LD_INT 6
57320: NEG
57321: PUSH
57322: LD_INT 5
57324: NEG
57325: PUSH
57326: EMPTY
57327: LIST
57328: LIST
57329: PUSH
57330: LD_INT 6
57332: NEG
57333: PUSH
57334: LD_INT 6
57336: NEG
57337: PUSH
57338: EMPTY
57339: LIST
57340: LIST
57341: PUSH
57342: EMPTY
57343: LIST
57344: LIST
57345: LIST
57346: LIST
57347: LIST
57348: LIST
57349: LIST
57350: LIST
57351: LIST
57352: LIST
57353: LIST
57354: LIST
57355: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
57356: LD_ADDR_VAR 0 41
57360: PUSH
57361: LD_INT 0
57363: PUSH
57364: LD_INT 2
57366: NEG
57367: PUSH
57368: EMPTY
57369: LIST
57370: LIST
57371: PUSH
57372: LD_INT 1
57374: NEG
57375: PUSH
57376: LD_INT 3
57378: NEG
57379: PUSH
57380: EMPTY
57381: LIST
57382: LIST
57383: PUSH
57384: LD_INT 1
57386: PUSH
57387: LD_INT 2
57389: NEG
57390: PUSH
57391: EMPTY
57392: LIST
57393: LIST
57394: PUSH
57395: EMPTY
57396: LIST
57397: LIST
57398: LIST
57399: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
57400: LD_ADDR_VAR 0 42
57404: PUSH
57405: LD_INT 2
57407: PUSH
57408: LD_INT 0
57410: PUSH
57411: EMPTY
57412: LIST
57413: LIST
57414: PUSH
57415: LD_INT 2
57417: PUSH
57418: LD_INT 1
57420: NEG
57421: PUSH
57422: EMPTY
57423: LIST
57424: LIST
57425: PUSH
57426: LD_INT 3
57428: PUSH
57429: LD_INT 1
57431: PUSH
57432: EMPTY
57433: LIST
57434: LIST
57435: PUSH
57436: EMPTY
57437: LIST
57438: LIST
57439: LIST
57440: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
57441: LD_ADDR_VAR 0 43
57445: PUSH
57446: LD_INT 2
57448: PUSH
57449: LD_INT 2
57451: PUSH
57452: EMPTY
57453: LIST
57454: LIST
57455: PUSH
57456: LD_INT 3
57458: PUSH
57459: LD_INT 2
57461: PUSH
57462: EMPTY
57463: LIST
57464: LIST
57465: PUSH
57466: LD_INT 2
57468: PUSH
57469: LD_INT 3
57471: PUSH
57472: EMPTY
57473: LIST
57474: LIST
57475: PUSH
57476: EMPTY
57477: LIST
57478: LIST
57479: LIST
57480: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
57481: LD_ADDR_VAR 0 44
57485: PUSH
57486: LD_INT 0
57488: PUSH
57489: LD_INT 2
57491: PUSH
57492: EMPTY
57493: LIST
57494: LIST
57495: PUSH
57496: LD_INT 1
57498: PUSH
57499: LD_INT 3
57501: PUSH
57502: EMPTY
57503: LIST
57504: LIST
57505: PUSH
57506: LD_INT 1
57508: NEG
57509: PUSH
57510: LD_INT 2
57512: PUSH
57513: EMPTY
57514: LIST
57515: LIST
57516: PUSH
57517: EMPTY
57518: LIST
57519: LIST
57520: LIST
57521: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
57522: LD_ADDR_VAR 0 45
57526: PUSH
57527: LD_INT 2
57529: NEG
57530: PUSH
57531: LD_INT 0
57533: PUSH
57534: EMPTY
57535: LIST
57536: LIST
57537: PUSH
57538: LD_INT 2
57540: NEG
57541: PUSH
57542: LD_INT 1
57544: PUSH
57545: EMPTY
57546: LIST
57547: LIST
57548: PUSH
57549: LD_INT 3
57551: NEG
57552: PUSH
57553: LD_INT 1
57555: NEG
57556: PUSH
57557: EMPTY
57558: LIST
57559: LIST
57560: PUSH
57561: EMPTY
57562: LIST
57563: LIST
57564: LIST
57565: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
57566: LD_ADDR_VAR 0 46
57570: PUSH
57571: LD_INT 2
57573: NEG
57574: PUSH
57575: LD_INT 2
57577: NEG
57578: PUSH
57579: EMPTY
57580: LIST
57581: LIST
57582: PUSH
57583: LD_INT 2
57585: NEG
57586: PUSH
57587: LD_INT 3
57589: NEG
57590: PUSH
57591: EMPTY
57592: LIST
57593: LIST
57594: PUSH
57595: LD_INT 3
57597: NEG
57598: PUSH
57599: LD_INT 2
57601: NEG
57602: PUSH
57603: EMPTY
57604: LIST
57605: LIST
57606: PUSH
57607: EMPTY
57608: LIST
57609: LIST
57610: LIST
57611: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
57612: LD_ADDR_VAR 0 47
57616: PUSH
57617: LD_INT 2
57619: NEG
57620: PUSH
57621: LD_INT 3
57623: NEG
57624: PUSH
57625: EMPTY
57626: LIST
57627: LIST
57628: PUSH
57629: LD_INT 1
57631: NEG
57632: PUSH
57633: LD_INT 3
57635: NEG
57636: PUSH
57637: EMPTY
57638: LIST
57639: LIST
57640: PUSH
57641: EMPTY
57642: LIST
57643: LIST
57644: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
57645: LD_ADDR_VAR 0 48
57649: PUSH
57650: LD_INT 1
57652: PUSH
57653: LD_INT 2
57655: NEG
57656: PUSH
57657: EMPTY
57658: LIST
57659: LIST
57660: PUSH
57661: LD_INT 2
57663: PUSH
57664: LD_INT 1
57666: NEG
57667: PUSH
57668: EMPTY
57669: LIST
57670: LIST
57671: PUSH
57672: EMPTY
57673: LIST
57674: LIST
57675: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
57676: LD_ADDR_VAR 0 49
57680: PUSH
57681: LD_INT 3
57683: PUSH
57684: LD_INT 1
57686: PUSH
57687: EMPTY
57688: LIST
57689: LIST
57690: PUSH
57691: LD_INT 3
57693: PUSH
57694: LD_INT 2
57696: PUSH
57697: EMPTY
57698: LIST
57699: LIST
57700: PUSH
57701: EMPTY
57702: LIST
57703: LIST
57704: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
57705: LD_ADDR_VAR 0 50
57709: PUSH
57710: LD_INT 2
57712: PUSH
57713: LD_INT 3
57715: PUSH
57716: EMPTY
57717: LIST
57718: LIST
57719: PUSH
57720: LD_INT 1
57722: PUSH
57723: LD_INT 3
57725: PUSH
57726: EMPTY
57727: LIST
57728: LIST
57729: PUSH
57730: EMPTY
57731: LIST
57732: LIST
57733: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
57734: LD_ADDR_VAR 0 51
57738: PUSH
57739: LD_INT 1
57741: NEG
57742: PUSH
57743: LD_INT 2
57745: PUSH
57746: EMPTY
57747: LIST
57748: LIST
57749: PUSH
57750: LD_INT 2
57752: NEG
57753: PUSH
57754: LD_INT 1
57756: PUSH
57757: EMPTY
57758: LIST
57759: LIST
57760: PUSH
57761: EMPTY
57762: LIST
57763: LIST
57764: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
57765: LD_ADDR_VAR 0 52
57769: PUSH
57770: LD_INT 3
57772: NEG
57773: PUSH
57774: LD_INT 1
57776: NEG
57777: PUSH
57778: EMPTY
57779: LIST
57780: LIST
57781: PUSH
57782: LD_INT 3
57784: NEG
57785: PUSH
57786: LD_INT 2
57788: NEG
57789: PUSH
57790: EMPTY
57791: LIST
57792: LIST
57793: PUSH
57794: EMPTY
57795: LIST
57796: LIST
57797: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
57798: LD_ADDR_VAR 0 53
57802: PUSH
57803: LD_INT 1
57805: NEG
57806: PUSH
57807: LD_INT 3
57809: NEG
57810: PUSH
57811: EMPTY
57812: LIST
57813: LIST
57814: PUSH
57815: LD_INT 0
57817: PUSH
57818: LD_INT 3
57820: NEG
57821: PUSH
57822: EMPTY
57823: LIST
57824: LIST
57825: PUSH
57826: LD_INT 1
57828: PUSH
57829: LD_INT 2
57831: NEG
57832: PUSH
57833: EMPTY
57834: LIST
57835: LIST
57836: PUSH
57837: EMPTY
57838: LIST
57839: LIST
57840: LIST
57841: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
57842: LD_ADDR_VAR 0 54
57846: PUSH
57847: LD_INT 2
57849: PUSH
57850: LD_INT 1
57852: NEG
57853: PUSH
57854: EMPTY
57855: LIST
57856: LIST
57857: PUSH
57858: LD_INT 3
57860: PUSH
57861: LD_INT 0
57863: PUSH
57864: EMPTY
57865: LIST
57866: LIST
57867: PUSH
57868: LD_INT 3
57870: PUSH
57871: LD_INT 1
57873: PUSH
57874: EMPTY
57875: LIST
57876: LIST
57877: PUSH
57878: EMPTY
57879: LIST
57880: LIST
57881: LIST
57882: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
57883: LD_ADDR_VAR 0 55
57887: PUSH
57888: LD_INT 3
57890: PUSH
57891: LD_INT 2
57893: PUSH
57894: EMPTY
57895: LIST
57896: LIST
57897: PUSH
57898: LD_INT 3
57900: PUSH
57901: LD_INT 3
57903: PUSH
57904: EMPTY
57905: LIST
57906: LIST
57907: PUSH
57908: LD_INT 2
57910: PUSH
57911: LD_INT 3
57913: PUSH
57914: EMPTY
57915: LIST
57916: LIST
57917: PUSH
57918: EMPTY
57919: LIST
57920: LIST
57921: LIST
57922: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
57923: LD_ADDR_VAR 0 56
57927: PUSH
57928: LD_INT 1
57930: PUSH
57931: LD_INT 3
57933: PUSH
57934: EMPTY
57935: LIST
57936: LIST
57937: PUSH
57938: LD_INT 0
57940: PUSH
57941: LD_INT 3
57943: PUSH
57944: EMPTY
57945: LIST
57946: LIST
57947: PUSH
57948: LD_INT 1
57950: NEG
57951: PUSH
57952: LD_INT 2
57954: PUSH
57955: EMPTY
57956: LIST
57957: LIST
57958: PUSH
57959: EMPTY
57960: LIST
57961: LIST
57962: LIST
57963: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57964: LD_ADDR_VAR 0 57
57968: PUSH
57969: LD_INT 2
57971: NEG
57972: PUSH
57973: LD_INT 1
57975: PUSH
57976: EMPTY
57977: LIST
57978: LIST
57979: PUSH
57980: LD_INT 3
57982: NEG
57983: PUSH
57984: LD_INT 0
57986: PUSH
57987: EMPTY
57988: LIST
57989: LIST
57990: PUSH
57991: LD_INT 3
57993: NEG
57994: PUSH
57995: LD_INT 1
57997: NEG
57998: PUSH
57999: EMPTY
58000: LIST
58001: LIST
58002: PUSH
58003: EMPTY
58004: LIST
58005: LIST
58006: LIST
58007: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58008: LD_ADDR_VAR 0 58
58012: PUSH
58013: LD_INT 2
58015: NEG
58016: PUSH
58017: LD_INT 3
58019: NEG
58020: PUSH
58021: EMPTY
58022: LIST
58023: LIST
58024: PUSH
58025: LD_INT 3
58027: NEG
58028: PUSH
58029: LD_INT 2
58031: NEG
58032: PUSH
58033: EMPTY
58034: LIST
58035: LIST
58036: PUSH
58037: LD_INT 3
58039: NEG
58040: PUSH
58041: LD_INT 3
58043: NEG
58044: PUSH
58045: EMPTY
58046: LIST
58047: LIST
58048: PUSH
58049: EMPTY
58050: LIST
58051: LIST
58052: LIST
58053: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
58054: LD_ADDR_VAR 0 59
58058: PUSH
58059: LD_INT 1
58061: NEG
58062: PUSH
58063: LD_INT 2
58065: NEG
58066: PUSH
58067: EMPTY
58068: LIST
58069: LIST
58070: PUSH
58071: LD_INT 0
58073: PUSH
58074: LD_INT 2
58076: NEG
58077: PUSH
58078: EMPTY
58079: LIST
58080: LIST
58081: PUSH
58082: LD_INT 1
58084: PUSH
58085: LD_INT 1
58087: NEG
58088: PUSH
58089: EMPTY
58090: LIST
58091: LIST
58092: PUSH
58093: EMPTY
58094: LIST
58095: LIST
58096: LIST
58097: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
58098: LD_ADDR_VAR 0 60
58102: PUSH
58103: LD_INT 1
58105: PUSH
58106: LD_INT 1
58108: NEG
58109: PUSH
58110: EMPTY
58111: LIST
58112: LIST
58113: PUSH
58114: LD_INT 2
58116: PUSH
58117: LD_INT 0
58119: PUSH
58120: EMPTY
58121: LIST
58122: LIST
58123: PUSH
58124: LD_INT 2
58126: PUSH
58127: LD_INT 1
58129: PUSH
58130: EMPTY
58131: LIST
58132: LIST
58133: PUSH
58134: EMPTY
58135: LIST
58136: LIST
58137: LIST
58138: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
58139: LD_ADDR_VAR 0 61
58143: PUSH
58144: LD_INT 2
58146: PUSH
58147: LD_INT 1
58149: PUSH
58150: EMPTY
58151: LIST
58152: LIST
58153: PUSH
58154: LD_INT 2
58156: PUSH
58157: LD_INT 2
58159: PUSH
58160: EMPTY
58161: LIST
58162: LIST
58163: PUSH
58164: LD_INT 1
58166: PUSH
58167: LD_INT 2
58169: PUSH
58170: EMPTY
58171: LIST
58172: LIST
58173: PUSH
58174: EMPTY
58175: LIST
58176: LIST
58177: LIST
58178: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
58179: LD_ADDR_VAR 0 62
58183: PUSH
58184: LD_INT 1
58186: PUSH
58187: LD_INT 2
58189: PUSH
58190: EMPTY
58191: LIST
58192: LIST
58193: PUSH
58194: LD_INT 0
58196: PUSH
58197: LD_INT 2
58199: PUSH
58200: EMPTY
58201: LIST
58202: LIST
58203: PUSH
58204: LD_INT 1
58206: NEG
58207: PUSH
58208: LD_INT 1
58210: PUSH
58211: EMPTY
58212: LIST
58213: LIST
58214: PUSH
58215: EMPTY
58216: LIST
58217: LIST
58218: LIST
58219: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
58220: LD_ADDR_VAR 0 63
58224: PUSH
58225: LD_INT 1
58227: NEG
58228: PUSH
58229: LD_INT 1
58231: PUSH
58232: EMPTY
58233: LIST
58234: LIST
58235: PUSH
58236: LD_INT 2
58238: NEG
58239: PUSH
58240: LD_INT 0
58242: PUSH
58243: EMPTY
58244: LIST
58245: LIST
58246: PUSH
58247: LD_INT 2
58249: NEG
58250: PUSH
58251: LD_INT 1
58253: NEG
58254: PUSH
58255: EMPTY
58256: LIST
58257: LIST
58258: PUSH
58259: EMPTY
58260: LIST
58261: LIST
58262: LIST
58263: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58264: LD_ADDR_VAR 0 64
58268: PUSH
58269: LD_INT 1
58271: NEG
58272: PUSH
58273: LD_INT 2
58275: NEG
58276: PUSH
58277: EMPTY
58278: LIST
58279: LIST
58280: PUSH
58281: LD_INT 2
58283: NEG
58284: PUSH
58285: LD_INT 1
58287: NEG
58288: PUSH
58289: EMPTY
58290: LIST
58291: LIST
58292: PUSH
58293: LD_INT 2
58295: NEG
58296: PUSH
58297: LD_INT 2
58299: NEG
58300: PUSH
58301: EMPTY
58302: LIST
58303: LIST
58304: PUSH
58305: EMPTY
58306: LIST
58307: LIST
58308: LIST
58309: ST_TO_ADDR
// end ; 2 :
58310: GO 61576
58312: LD_INT 2
58314: DOUBLE
58315: EQUAL
58316: IFTRUE 58320
58318: GO 61575
58320: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
58321: LD_ADDR_VAR 0 29
58325: PUSH
58326: LD_INT 4
58328: PUSH
58329: LD_INT 0
58331: PUSH
58332: EMPTY
58333: LIST
58334: LIST
58335: PUSH
58336: LD_INT 4
58338: PUSH
58339: LD_INT 1
58341: NEG
58342: PUSH
58343: EMPTY
58344: LIST
58345: LIST
58346: PUSH
58347: LD_INT 5
58349: PUSH
58350: LD_INT 0
58352: PUSH
58353: EMPTY
58354: LIST
58355: LIST
58356: PUSH
58357: LD_INT 5
58359: PUSH
58360: LD_INT 1
58362: PUSH
58363: EMPTY
58364: LIST
58365: LIST
58366: PUSH
58367: LD_INT 4
58369: PUSH
58370: LD_INT 1
58372: PUSH
58373: EMPTY
58374: LIST
58375: LIST
58376: PUSH
58377: LD_INT 3
58379: PUSH
58380: LD_INT 0
58382: PUSH
58383: EMPTY
58384: LIST
58385: LIST
58386: PUSH
58387: LD_INT 3
58389: PUSH
58390: LD_INT 1
58392: NEG
58393: PUSH
58394: EMPTY
58395: LIST
58396: LIST
58397: PUSH
58398: LD_INT 3
58400: PUSH
58401: LD_INT 2
58403: NEG
58404: PUSH
58405: EMPTY
58406: LIST
58407: LIST
58408: PUSH
58409: LD_INT 5
58411: PUSH
58412: LD_INT 2
58414: PUSH
58415: EMPTY
58416: LIST
58417: LIST
58418: PUSH
58419: LD_INT 3
58421: PUSH
58422: LD_INT 3
58424: PUSH
58425: EMPTY
58426: LIST
58427: LIST
58428: PUSH
58429: LD_INT 3
58431: PUSH
58432: LD_INT 2
58434: PUSH
58435: EMPTY
58436: LIST
58437: LIST
58438: PUSH
58439: LD_INT 4
58441: PUSH
58442: LD_INT 3
58444: PUSH
58445: EMPTY
58446: LIST
58447: LIST
58448: PUSH
58449: LD_INT 4
58451: PUSH
58452: LD_INT 4
58454: PUSH
58455: EMPTY
58456: LIST
58457: LIST
58458: PUSH
58459: LD_INT 3
58461: PUSH
58462: LD_INT 4
58464: PUSH
58465: EMPTY
58466: LIST
58467: LIST
58468: PUSH
58469: LD_INT 2
58471: PUSH
58472: LD_INT 3
58474: PUSH
58475: EMPTY
58476: LIST
58477: LIST
58478: PUSH
58479: LD_INT 2
58481: PUSH
58482: LD_INT 2
58484: PUSH
58485: EMPTY
58486: LIST
58487: LIST
58488: PUSH
58489: LD_INT 4
58491: PUSH
58492: LD_INT 2
58494: PUSH
58495: EMPTY
58496: LIST
58497: LIST
58498: PUSH
58499: LD_INT 2
58501: PUSH
58502: LD_INT 4
58504: PUSH
58505: EMPTY
58506: LIST
58507: LIST
58508: PUSH
58509: LD_INT 0
58511: PUSH
58512: LD_INT 4
58514: PUSH
58515: EMPTY
58516: LIST
58517: LIST
58518: PUSH
58519: LD_INT 0
58521: PUSH
58522: LD_INT 3
58524: PUSH
58525: EMPTY
58526: LIST
58527: LIST
58528: PUSH
58529: LD_INT 1
58531: PUSH
58532: LD_INT 4
58534: PUSH
58535: EMPTY
58536: LIST
58537: LIST
58538: PUSH
58539: LD_INT 1
58541: PUSH
58542: LD_INT 5
58544: PUSH
58545: EMPTY
58546: LIST
58547: LIST
58548: PUSH
58549: LD_INT 0
58551: PUSH
58552: LD_INT 5
58554: PUSH
58555: EMPTY
58556: LIST
58557: LIST
58558: PUSH
58559: LD_INT 1
58561: NEG
58562: PUSH
58563: LD_INT 4
58565: PUSH
58566: EMPTY
58567: LIST
58568: LIST
58569: PUSH
58570: LD_INT 1
58572: NEG
58573: PUSH
58574: LD_INT 3
58576: PUSH
58577: EMPTY
58578: LIST
58579: LIST
58580: PUSH
58581: LD_INT 2
58583: PUSH
58584: LD_INT 5
58586: PUSH
58587: EMPTY
58588: LIST
58589: LIST
58590: PUSH
58591: LD_INT 2
58593: NEG
58594: PUSH
58595: LD_INT 3
58597: PUSH
58598: EMPTY
58599: LIST
58600: LIST
58601: PUSH
58602: LD_INT 3
58604: NEG
58605: PUSH
58606: LD_INT 0
58608: PUSH
58609: EMPTY
58610: LIST
58611: LIST
58612: PUSH
58613: LD_INT 3
58615: NEG
58616: PUSH
58617: LD_INT 1
58619: NEG
58620: PUSH
58621: EMPTY
58622: LIST
58623: LIST
58624: PUSH
58625: LD_INT 2
58627: NEG
58628: PUSH
58629: LD_INT 0
58631: PUSH
58632: EMPTY
58633: LIST
58634: LIST
58635: PUSH
58636: LD_INT 2
58638: NEG
58639: PUSH
58640: LD_INT 1
58642: PUSH
58643: EMPTY
58644: LIST
58645: LIST
58646: PUSH
58647: LD_INT 3
58649: NEG
58650: PUSH
58651: LD_INT 1
58653: PUSH
58654: EMPTY
58655: LIST
58656: LIST
58657: PUSH
58658: LD_INT 4
58660: NEG
58661: PUSH
58662: LD_INT 0
58664: PUSH
58665: EMPTY
58666: LIST
58667: LIST
58668: PUSH
58669: LD_INT 4
58671: NEG
58672: PUSH
58673: LD_INT 1
58675: NEG
58676: PUSH
58677: EMPTY
58678: LIST
58679: LIST
58680: PUSH
58681: LD_INT 4
58683: NEG
58684: PUSH
58685: LD_INT 2
58687: NEG
58688: PUSH
58689: EMPTY
58690: LIST
58691: LIST
58692: PUSH
58693: LD_INT 2
58695: NEG
58696: PUSH
58697: LD_INT 2
58699: PUSH
58700: EMPTY
58701: LIST
58702: LIST
58703: PUSH
58704: LD_INT 4
58706: NEG
58707: PUSH
58708: LD_INT 4
58710: NEG
58711: PUSH
58712: EMPTY
58713: LIST
58714: LIST
58715: PUSH
58716: LD_INT 4
58718: NEG
58719: PUSH
58720: LD_INT 5
58722: NEG
58723: PUSH
58724: EMPTY
58725: LIST
58726: LIST
58727: PUSH
58728: LD_INT 3
58730: NEG
58731: PUSH
58732: LD_INT 4
58734: NEG
58735: PUSH
58736: EMPTY
58737: LIST
58738: LIST
58739: PUSH
58740: LD_INT 3
58742: NEG
58743: PUSH
58744: LD_INT 3
58746: NEG
58747: PUSH
58748: EMPTY
58749: LIST
58750: LIST
58751: PUSH
58752: LD_INT 4
58754: NEG
58755: PUSH
58756: LD_INT 3
58758: NEG
58759: PUSH
58760: EMPTY
58761: LIST
58762: LIST
58763: PUSH
58764: LD_INT 5
58766: NEG
58767: PUSH
58768: LD_INT 4
58770: NEG
58771: PUSH
58772: EMPTY
58773: LIST
58774: LIST
58775: PUSH
58776: LD_INT 5
58778: NEG
58779: PUSH
58780: LD_INT 5
58782: NEG
58783: PUSH
58784: EMPTY
58785: LIST
58786: LIST
58787: PUSH
58788: LD_INT 3
58790: NEG
58791: PUSH
58792: LD_INT 5
58794: NEG
58795: PUSH
58796: EMPTY
58797: LIST
58798: LIST
58799: PUSH
58800: LD_INT 5
58802: NEG
58803: PUSH
58804: LD_INT 3
58806: NEG
58807: PUSH
58808: EMPTY
58809: LIST
58810: LIST
58811: PUSH
58812: EMPTY
58813: LIST
58814: LIST
58815: LIST
58816: LIST
58817: LIST
58818: LIST
58819: LIST
58820: LIST
58821: LIST
58822: LIST
58823: LIST
58824: LIST
58825: LIST
58826: LIST
58827: LIST
58828: LIST
58829: LIST
58830: LIST
58831: LIST
58832: LIST
58833: LIST
58834: LIST
58835: LIST
58836: LIST
58837: LIST
58838: LIST
58839: LIST
58840: LIST
58841: LIST
58842: LIST
58843: LIST
58844: LIST
58845: LIST
58846: LIST
58847: LIST
58848: LIST
58849: LIST
58850: LIST
58851: LIST
58852: LIST
58853: LIST
58854: LIST
58855: LIST
58856: LIST
58857: LIST
58858: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
58859: LD_ADDR_VAR 0 30
58863: PUSH
58864: LD_INT 4
58866: PUSH
58867: LD_INT 4
58869: PUSH
58870: EMPTY
58871: LIST
58872: LIST
58873: PUSH
58874: LD_INT 4
58876: PUSH
58877: LD_INT 3
58879: PUSH
58880: EMPTY
58881: LIST
58882: LIST
58883: PUSH
58884: LD_INT 5
58886: PUSH
58887: LD_INT 4
58889: PUSH
58890: EMPTY
58891: LIST
58892: LIST
58893: PUSH
58894: LD_INT 5
58896: PUSH
58897: LD_INT 5
58899: PUSH
58900: EMPTY
58901: LIST
58902: LIST
58903: PUSH
58904: LD_INT 4
58906: PUSH
58907: LD_INT 5
58909: PUSH
58910: EMPTY
58911: LIST
58912: LIST
58913: PUSH
58914: LD_INT 3
58916: PUSH
58917: LD_INT 4
58919: PUSH
58920: EMPTY
58921: LIST
58922: LIST
58923: PUSH
58924: LD_INT 3
58926: PUSH
58927: LD_INT 3
58929: PUSH
58930: EMPTY
58931: LIST
58932: LIST
58933: PUSH
58934: LD_INT 5
58936: PUSH
58937: LD_INT 3
58939: PUSH
58940: EMPTY
58941: LIST
58942: LIST
58943: PUSH
58944: LD_INT 3
58946: PUSH
58947: LD_INT 5
58949: PUSH
58950: EMPTY
58951: LIST
58952: LIST
58953: PUSH
58954: LD_INT 0
58956: PUSH
58957: LD_INT 3
58959: PUSH
58960: EMPTY
58961: LIST
58962: LIST
58963: PUSH
58964: LD_INT 0
58966: PUSH
58967: LD_INT 2
58969: PUSH
58970: EMPTY
58971: LIST
58972: LIST
58973: PUSH
58974: LD_INT 1
58976: PUSH
58977: LD_INT 3
58979: PUSH
58980: EMPTY
58981: LIST
58982: LIST
58983: PUSH
58984: LD_INT 1
58986: PUSH
58987: LD_INT 4
58989: PUSH
58990: EMPTY
58991: LIST
58992: LIST
58993: PUSH
58994: LD_INT 0
58996: PUSH
58997: LD_INT 4
58999: PUSH
59000: EMPTY
59001: LIST
59002: LIST
59003: PUSH
59004: LD_INT 1
59006: NEG
59007: PUSH
59008: LD_INT 3
59010: PUSH
59011: EMPTY
59012: LIST
59013: LIST
59014: PUSH
59015: LD_INT 1
59017: NEG
59018: PUSH
59019: LD_INT 2
59021: PUSH
59022: EMPTY
59023: LIST
59024: LIST
59025: PUSH
59026: LD_INT 2
59028: PUSH
59029: LD_INT 4
59031: PUSH
59032: EMPTY
59033: LIST
59034: LIST
59035: PUSH
59036: LD_INT 2
59038: NEG
59039: PUSH
59040: LD_INT 2
59042: PUSH
59043: EMPTY
59044: LIST
59045: LIST
59046: PUSH
59047: LD_INT 4
59049: NEG
59050: PUSH
59051: LD_INT 0
59053: PUSH
59054: EMPTY
59055: LIST
59056: LIST
59057: PUSH
59058: LD_INT 4
59060: NEG
59061: PUSH
59062: LD_INT 1
59064: NEG
59065: PUSH
59066: EMPTY
59067: LIST
59068: LIST
59069: PUSH
59070: LD_INT 3
59072: NEG
59073: PUSH
59074: LD_INT 0
59076: PUSH
59077: EMPTY
59078: LIST
59079: LIST
59080: PUSH
59081: LD_INT 3
59083: NEG
59084: PUSH
59085: LD_INT 1
59087: PUSH
59088: EMPTY
59089: LIST
59090: LIST
59091: PUSH
59092: LD_INT 4
59094: NEG
59095: PUSH
59096: LD_INT 1
59098: PUSH
59099: EMPTY
59100: LIST
59101: LIST
59102: PUSH
59103: LD_INT 5
59105: NEG
59106: PUSH
59107: LD_INT 0
59109: PUSH
59110: EMPTY
59111: LIST
59112: LIST
59113: PUSH
59114: LD_INT 5
59116: NEG
59117: PUSH
59118: LD_INT 1
59120: NEG
59121: PUSH
59122: EMPTY
59123: LIST
59124: LIST
59125: PUSH
59126: LD_INT 5
59128: NEG
59129: PUSH
59130: LD_INT 2
59132: NEG
59133: PUSH
59134: EMPTY
59135: LIST
59136: LIST
59137: PUSH
59138: LD_INT 3
59140: NEG
59141: PUSH
59142: LD_INT 2
59144: PUSH
59145: EMPTY
59146: LIST
59147: LIST
59148: PUSH
59149: LD_INT 3
59151: NEG
59152: PUSH
59153: LD_INT 3
59155: NEG
59156: PUSH
59157: EMPTY
59158: LIST
59159: LIST
59160: PUSH
59161: LD_INT 3
59163: NEG
59164: PUSH
59165: LD_INT 4
59167: NEG
59168: PUSH
59169: EMPTY
59170: LIST
59171: LIST
59172: PUSH
59173: LD_INT 2
59175: NEG
59176: PUSH
59177: LD_INT 3
59179: NEG
59180: PUSH
59181: EMPTY
59182: LIST
59183: LIST
59184: PUSH
59185: LD_INT 2
59187: NEG
59188: PUSH
59189: LD_INT 2
59191: NEG
59192: PUSH
59193: EMPTY
59194: LIST
59195: LIST
59196: PUSH
59197: LD_INT 3
59199: NEG
59200: PUSH
59201: LD_INT 2
59203: NEG
59204: PUSH
59205: EMPTY
59206: LIST
59207: LIST
59208: PUSH
59209: LD_INT 4
59211: NEG
59212: PUSH
59213: LD_INT 3
59215: NEG
59216: PUSH
59217: EMPTY
59218: LIST
59219: LIST
59220: PUSH
59221: LD_INT 4
59223: NEG
59224: PUSH
59225: LD_INT 4
59227: NEG
59228: PUSH
59229: EMPTY
59230: LIST
59231: LIST
59232: PUSH
59233: LD_INT 2
59235: NEG
59236: PUSH
59237: LD_INT 4
59239: NEG
59240: PUSH
59241: EMPTY
59242: LIST
59243: LIST
59244: PUSH
59245: LD_INT 4
59247: NEG
59248: PUSH
59249: LD_INT 2
59251: NEG
59252: PUSH
59253: EMPTY
59254: LIST
59255: LIST
59256: PUSH
59257: LD_INT 0
59259: PUSH
59260: LD_INT 4
59262: NEG
59263: PUSH
59264: EMPTY
59265: LIST
59266: LIST
59267: PUSH
59268: LD_INT 0
59270: PUSH
59271: LD_INT 5
59273: NEG
59274: PUSH
59275: EMPTY
59276: LIST
59277: LIST
59278: PUSH
59279: LD_INT 1
59281: PUSH
59282: LD_INT 4
59284: NEG
59285: PUSH
59286: EMPTY
59287: LIST
59288: LIST
59289: PUSH
59290: LD_INT 1
59292: PUSH
59293: LD_INT 3
59295: NEG
59296: PUSH
59297: EMPTY
59298: LIST
59299: LIST
59300: PUSH
59301: LD_INT 0
59303: PUSH
59304: LD_INT 3
59306: NEG
59307: PUSH
59308: EMPTY
59309: LIST
59310: LIST
59311: PUSH
59312: LD_INT 1
59314: NEG
59315: PUSH
59316: LD_INT 4
59318: NEG
59319: PUSH
59320: EMPTY
59321: LIST
59322: LIST
59323: PUSH
59324: LD_INT 1
59326: NEG
59327: PUSH
59328: LD_INT 5
59330: NEG
59331: PUSH
59332: EMPTY
59333: LIST
59334: LIST
59335: PUSH
59336: LD_INT 2
59338: PUSH
59339: LD_INT 3
59341: NEG
59342: PUSH
59343: EMPTY
59344: LIST
59345: LIST
59346: PUSH
59347: LD_INT 2
59349: NEG
59350: PUSH
59351: LD_INT 5
59353: NEG
59354: PUSH
59355: EMPTY
59356: LIST
59357: LIST
59358: PUSH
59359: EMPTY
59360: LIST
59361: LIST
59362: LIST
59363: LIST
59364: LIST
59365: LIST
59366: LIST
59367: LIST
59368: LIST
59369: LIST
59370: LIST
59371: LIST
59372: LIST
59373: LIST
59374: LIST
59375: LIST
59376: LIST
59377: LIST
59378: LIST
59379: LIST
59380: LIST
59381: LIST
59382: LIST
59383: LIST
59384: LIST
59385: LIST
59386: LIST
59387: LIST
59388: LIST
59389: LIST
59390: LIST
59391: LIST
59392: LIST
59393: LIST
59394: LIST
59395: LIST
59396: LIST
59397: LIST
59398: LIST
59399: LIST
59400: LIST
59401: LIST
59402: LIST
59403: LIST
59404: LIST
59405: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
59406: LD_ADDR_VAR 0 31
59410: PUSH
59411: LD_INT 0
59413: PUSH
59414: LD_INT 4
59416: PUSH
59417: EMPTY
59418: LIST
59419: LIST
59420: PUSH
59421: LD_INT 0
59423: PUSH
59424: LD_INT 3
59426: PUSH
59427: EMPTY
59428: LIST
59429: LIST
59430: PUSH
59431: LD_INT 1
59433: PUSH
59434: LD_INT 4
59436: PUSH
59437: EMPTY
59438: LIST
59439: LIST
59440: PUSH
59441: LD_INT 1
59443: PUSH
59444: LD_INT 5
59446: PUSH
59447: EMPTY
59448: LIST
59449: LIST
59450: PUSH
59451: LD_INT 0
59453: PUSH
59454: LD_INT 5
59456: PUSH
59457: EMPTY
59458: LIST
59459: LIST
59460: PUSH
59461: LD_INT 1
59463: NEG
59464: PUSH
59465: LD_INT 4
59467: PUSH
59468: EMPTY
59469: LIST
59470: LIST
59471: PUSH
59472: LD_INT 1
59474: NEG
59475: PUSH
59476: LD_INT 3
59478: PUSH
59479: EMPTY
59480: LIST
59481: LIST
59482: PUSH
59483: LD_INT 2
59485: PUSH
59486: LD_INT 5
59488: PUSH
59489: EMPTY
59490: LIST
59491: LIST
59492: PUSH
59493: LD_INT 2
59495: NEG
59496: PUSH
59497: LD_INT 3
59499: PUSH
59500: EMPTY
59501: LIST
59502: LIST
59503: PUSH
59504: LD_INT 3
59506: NEG
59507: PUSH
59508: LD_INT 0
59510: PUSH
59511: EMPTY
59512: LIST
59513: LIST
59514: PUSH
59515: LD_INT 3
59517: NEG
59518: PUSH
59519: LD_INT 1
59521: NEG
59522: PUSH
59523: EMPTY
59524: LIST
59525: LIST
59526: PUSH
59527: LD_INT 2
59529: NEG
59530: PUSH
59531: LD_INT 0
59533: PUSH
59534: EMPTY
59535: LIST
59536: LIST
59537: PUSH
59538: LD_INT 2
59540: NEG
59541: PUSH
59542: LD_INT 1
59544: PUSH
59545: EMPTY
59546: LIST
59547: LIST
59548: PUSH
59549: LD_INT 3
59551: NEG
59552: PUSH
59553: LD_INT 1
59555: PUSH
59556: EMPTY
59557: LIST
59558: LIST
59559: PUSH
59560: LD_INT 4
59562: NEG
59563: PUSH
59564: LD_INT 0
59566: PUSH
59567: EMPTY
59568: LIST
59569: LIST
59570: PUSH
59571: LD_INT 4
59573: NEG
59574: PUSH
59575: LD_INT 1
59577: NEG
59578: PUSH
59579: EMPTY
59580: LIST
59581: LIST
59582: PUSH
59583: LD_INT 4
59585: NEG
59586: PUSH
59587: LD_INT 2
59589: NEG
59590: PUSH
59591: EMPTY
59592: LIST
59593: LIST
59594: PUSH
59595: LD_INT 2
59597: NEG
59598: PUSH
59599: LD_INT 2
59601: PUSH
59602: EMPTY
59603: LIST
59604: LIST
59605: PUSH
59606: LD_INT 4
59608: NEG
59609: PUSH
59610: LD_INT 4
59612: NEG
59613: PUSH
59614: EMPTY
59615: LIST
59616: LIST
59617: PUSH
59618: LD_INT 4
59620: NEG
59621: PUSH
59622: LD_INT 5
59624: NEG
59625: PUSH
59626: EMPTY
59627: LIST
59628: LIST
59629: PUSH
59630: LD_INT 3
59632: NEG
59633: PUSH
59634: LD_INT 4
59636: NEG
59637: PUSH
59638: EMPTY
59639: LIST
59640: LIST
59641: PUSH
59642: LD_INT 3
59644: NEG
59645: PUSH
59646: LD_INT 3
59648: NEG
59649: PUSH
59650: EMPTY
59651: LIST
59652: LIST
59653: PUSH
59654: LD_INT 4
59656: NEG
59657: PUSH
59658: LD_INT 3
59660: NEG
59661: PUSH
59662: EMPTY
59663: LIST
59664: LIST
59665: PUSH
59666: LD_INT 5
59668: NEG
59669: PUSH
59670: LD_INT 4
59672: NEG
59673: PUSH
59674: EMPTY
59675: LIST
59676: LIST
59677: PUSH
59678: LD_INT 5
59680: NEG
59681: PUSH
59682: LD_INT 5
59684: NEG
59685: PUSH
59686: EMPTY
59687: LIST
59688: LIST
59689: PUSH
59690: LD_INT 3
59692: NEG
59693: PUSH
59694: LD_INT 5
59696: NEG
59697: PUSH
59698: EMPTY
59699: LIST
59700: LIST
59701: PUSH
59702: LD_INT 5
59704: NEG
59705: PUSH
59706: LD_INT 3
59708: NEG
59709: PUSH
59710: EMPTY
59711: LIST
59712: LIST
59713: PUSH
59714: LD_INT 0
59716: PUSH
59717: LD_INT 3
59719: NEG
59720: PUSH
59721: EMPTY
59722: LIST
59723: LIST
59724: PUSH
59725: LD_INT 0
59727: PUSH
59728: LD_INT 4
59730: NEG
59731: PUSH
59732: EMPTY
59733: LIST
59734: LIST
59735: PUSH
59736: LD_INT 1
59738: PUSH
59739: LD_INT 3
59741: NEG
59742: PUSH
59743: EMPTY
59744: LIST
59745: LIST
59746: PUSH
59747: LD_INT 1
59749: PUSH
59750: LD_INT 2
59752: NEG
59753: PUSH
59754: EMPTY
59755: LIST
59756: LIST
59757: PUSH
59758: LD_INT 0
59760: PUSH
59761: LD_INT 2
59763: NEG
59764: PUSH
59765: EMPTY
59766: LIST
59767: LIST
59768: PUSH
59769: LD_INT 1
59771: NEG
59772: PUSH
59773: LD_INT 3
59775: NEG
59776: PUSH
59777: EMPTY
59778: LIST
59779: LIST
59780: PUSH
59781: LD_INT 1
59783: NEG
59784: PUSH
59785: LD_INT 4
59787: NEG
59788: PUSH
59789: EMPTY
59790: LIST
59791: LIST
59792: PUSH
59793: LD_INT 2
59795: PUSH
59796: LD_INT 2
59798: NEG
59799: PUSH
59800: EMPTY
59801: LIST
59802: LIST
59803: PUSH
59804: LD_INT 2
59806: NEG
59807: PUSH
59808: LD_INT 4
59810: NEG
59811: PUSH
59812: EMPTY
59813: LIST
59814: LIST
59815: PUSH
59816: LD_INT 4
59818: PUSH
59819: LD_INT 0
59821: PUSH
59822: EMPTY
59823: LIST
59824: LIST
59825: PUSH
59826: LD_INT 4
59828: PUSH
59829: LD_INT 1
59831: NEG
59832: PUSH
59833: EMPTY
59834: LIST
59835: LIST
59836: PUSH
59837: LD_INT 5
59839: PUSH
59840: LD_INT 0
59842: PUSH
59843: EMPTY
59844: LIST
59845: LIST
59846: PUSH
59847: LD_INT 5
59849: PUSH
59850: LD_INT 1
59852: PUSH
59853: EMPTY
59854: LIST
59855: LIST
59856: PUSH
59857: LD_INT 4
59859: PUSH
59860: LD_INT 1
59862: PUSH
59863: EMPTY
59864: LIST
59865: LIST
59866: PUSH
59867: LD_INT 3
59869: PUSH
59870: LD_INT 0
59872: PUSH
59873: EMPTY
59874: LIST
59875: LIST
59876: PUSH
59877: LD_INT 3
59879: PUSH
59880: LD_INT 1
59882: NEG
59883: PUSH
59884: EMPTY
59885: LIST
59886: LIST
59887: PUSH
59888: LD_INT 3
59890: PUSH
59891: LD_INT 2
59893: NEG
59894: PUSH
59895: EMPTY
59896: LIST
59897: LIST
59898: PUSH
59899: LD_INT 5
59901: PUSH
59902: LD_INT 2
59904: PUSH
59905: EMPTY
59906: LIST
59907: LIST
59908: PUSH
59909: EMPTY
59910: LIST
59911: LIST
59912: LIST
59913: LIST
59914: LIST
59915: LIST
59916: LIST
59917: LIST
59918: LIST
59919: LIST
59920: LIST
59921: LIST
59922: LIST
59923: LIST
59924: LIST
59925: LIST
59926: LIST
59927: LIST
59928: LIST
59929: LIST
59930: LIST
59931: LIST
59932: LIST
59933: LIST
59934: LIST
59935: LIST
59936: LIST
59937: LIST
59938: LIST
59939: LIST
59940: LIST
59941: LIST
59942: LIST
59943: LIST
59944: LIST
59945: LIST
59946: LIST
59947: LIST
59948: LIST
59949: LIST
59950: LIST
59951: LIST
59952: LIST
59953: LIST
59954: LIST
59955: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
59956: LD_ADDR_VAR 0 32
59960: PUSH
59961: LD_INT 4
59963: NEG
59964: PUSH
59965: LD_INT 0
59967: PUSH
59968: EMPTY
59969: LIST
59970: LIST
59971: PUSH
59972: LD_INT 4
59974: NEG
59975: PUSH
59976: LD_INT 1
59978: NEG
59979: PUSH
59980: EMPTY
59981: LIST
59982: LIST
59983: PUSH
59984: LD_INT 3
59986: NEG
59987: PUSH
59988: LD_INT 0
59990: PUSH
59991: EMPTY
59992: LIST
59993: LIST
59994: PUSH
59995: LD_INT 3
59997: NEG
59998: PUSH
59999: LD_INT 1
60001: PUSH
60002: EMPTY
60003: LIST
60004: LIST
60005: PUSH
60006: LD_INT 4
60008: NEG
60009: PUSH
60010: LD_INT 1
60012: PUSH
60013: EMPTY
60014: LIST
60015: LIST
60016: PUSH
60017: LD_INT 5
60019: NEG
60020: PUSH
60021: LD_INT 0
60023: PUSH
60024: EMPTY
60025: LIST
60026: LIST
60027: PUSH
60028: LD_INT 5
60030: NEG
60031: PUSH
60032: LD_INT 1
60034: NEG
60035: PUSH
60036: EMPTY
60037: LIST
60038: LIST
60039: PUSH
60040: LD_INT 5
60042: NEG
60043: PUSH
60044: LD_INT 2
60046: NEG
60047: PUSH
60048: EMPTY
60049: LIST
60050: LIST
60051: PUSH
60052: LD_INT 3
60054: NEG
60055: PUSH
60056: LD_INT 2
60058: PUSH
60059: EMPTY
60060: LIST
60061: LIST
60062: PUSH
60063: LD_INT 3
60065: NEG
60066: PUSH
60067: LD_INT 3
60069: NEG
60070: PUSH
60071: EMPTY
60072: LIST
60073: LIST
60074: PUSH
60075: LD_INT 3
60077: NEG
60078: PUSH
60079: LD_INT 4
60081: NEG
60082: PUSH
60083: EMPTY
60084: LIST
60085: LIST
60086: PUSH
60087: LD_INT 2
60089: NEG
60090: PUSH
60091: LD_INT 3
60093: NEG
60094: PUSH
60095: EMPTY
60096: LIST
60097: LIST
60098: PUSH
60099: LD_INT 2
60101: NEG
60102: PUSH
60103: LD_INT 2
60105: NEG
60106: PUSH
60107: EMPTY
60108: LIST
60109: LIST
60110: PUSH
60111: LD_INT 3
60113: NEG
60114: PUSH
60115: LD_INT 2
60117: NEG
60118: PUSH
60119: EMPTY
60120: LIST
60121: LIST
60122: PUSH
60123: LD_INT 4
60125: NEG
60126: PUSH
60127: LD_INT 3
60129: NEG
60130: PUSH
60131: EMPTY
60132: LIST
60133: LIST
60134: PUSH
60135: LD_INT 4
60137: NEG
60138: PUSH
60139: LD_INT 4
60141: NEG
60142: PUSH
60143: EMPTY
60144: LIST
60145: LIST
60146: PUSH
60147: LD_INT 2
60149: NEG
60150: PUSH
60151: LD_INT 4
60153: NEG
60154: PUSH
60155: EMPTY
60156: LIST
60157: LIST
60158: PUSH
60159: LD_INT 4
60161: NEG
60162: PUSH
60163: LD_INT 2
60165: NEG
60166: PUSH
60167: EMPTY
60168: LIST
60169: LIST
60170: PUSH
60171: LD_INT 0
60173: PUSH
60174: LD_INT 4
60176: NEG
60177: PUSH
60178: EMPTY
60179: LIST
60180: LIST
60181: PUSH
60182: LD_INT 0
60184: PUSH
60185: LD_INT 5
60187: NEG
60188: PUSH
60189: EMPTY
60190: LIST
60191: LIST
60192: PUSH
60193: LD_INT 1
60195: PUSH
60196: LD_INT 4
60198: NEG
60199: PUSH
60200: EMPTY
60201: LIST
60202: LIST
60203: PUSH
60204: LD_INT 1
60206: PUSH
60207: LD_INT 3
60209: NEG
60210: PUSH
60211: EMPTY
60212: LIST
60213: LIST
60214: PUSH
60215: LD_INT 0
60217: PUSH
60218: LD_INT 3
60220: NEG
60221: PUSH
60222: EMPTY
60223: LIST
60224: LIST
60225: PUSH
60226: LD_INT 1
60228: NEG
60229: PUSH
60230: LD_INT 4
60232: NEG
60233: PUSH
60234: EMPTY
60235: LIST
60236: LIST
60237: PUSH
60238: LD_INT 1
60240: NEG
60241: PUSH
60242: LD_INT 5
60244: NEG
60245: PUSH
60246: EMPTY
60247: LIST
60248: LIST
60249: PUSH
60250: LD_INT 2
60252: PUSH
60253: LD_INT 3
60255: NEG
60256: PUSH
60257: EMPTY
60258: LIST
60259: LIST
60260: PUSH
60261: LD_INT 2
60263: NEG
60264: PUSH
60265: LD_INT 5
60267: NEG
60268: PUSH
60269: EMPTY
60270: LIST
60271: LIST
60272: PUSH
60273: LD_INT 3
60275: PUSH
60276: LD_INT 0
60278: PUSH
60279: EMPTY
60280: LIST
60281: LIST
60282: PUSH
60283: LD_INT 3
60285: PUSH
60286: LD_INT 1
60288: NEG
60289: PUSH
60290: EMPTY
60291: LIST
60292: LIST
60293: PUSH
60294: LD_INT 4
60296: PUSH
60297: LD_INT 0
60299: PUSH
60300: EMPTY
60301: LIST
60302: LIST
60303: PUSH
60304: LD_INT 4
60306: PUSH
60307: LD_INT 1
60309: PUSH
60310: EMPTY
60311: LIST
60312: LIST
60313: PUSH
60314: LD_INT 3
60316: PUSH
60317: LD_INT 1
60319: PUSH
60320: EMPTY
60321: LIST
60322: LIST
60323: PUSH
60324: LD_INT 2
60326: PUSH
60327: LD_INT 0
60329: PUSH
60330: EMPTY
60331: LIST
60332: LIST
60333: PUSH
60334: LD_INT 2
60336: PUSH
60337: LD_INT 1
60339: NEG
60340: PUSH
60341: EMPTY
60342: LIST
60343: LIST
60344: PUSH
60345: LD_INT 2
60347: PUSH
60348: LD_INT 2
60350: NEG
60351: PUSH
60352: EMPTY
60353: LIST
60354: LIST
60355: PUSH
60356: LD_INT 4
60358: PUSH
60359: LD_INT 2
60361: PUSH
60362: EMPTY
60363: LIST
60364: LIST
60365: PUSH
60366: LD_INT 4
60368: PUSH
60369: LD_INT 4
60371: PUSH
60372: EMPTY
60373: LIST
60374: LIST
60375: PUSH
60376: LD_INT 4
60378: PUSH
60379: LD_INT 3
60381: PUSH
60382: EMPTY
60383: LIST
60384: LIST
60385: PUSH
60386: LD_INT 5
60388: PUSH
60389: LD_INT 4
60391: PUSH
60392: EMPTY
60393: LIST
60394: LIST
60395: PUSH
60396: LD_INT 5
60398: PUSH
60399: LD_INT 5
60401: PUSH
60402: EMPTY
60403: LIST
60404: LIST
60405: PUSH
60406: LD_INT 4
60408: PUSH
60409: LD_INT 5
60411: PUSH
60412: EMPTY
60413: LIST
60414: LIST
60415: PUSH
60416: LD_INT 3
60418: PUSH
60419: LD_INT 4
60421: PUSH
60422: EMPTY
60423: LIST
60424: LIST
60425: PUSH
60426: LD_INT 3
60428: PUSH
60429: LD_INT 3
60431: PUSH
60432: EMPTY
60433: LIST
60434: LIST
60435: PUSH
60436: LD_INT 5
60438: PUSH
60439: LD_INT 3
60441: PUSH
60442: EMPTY
60443: LIST
60444: LIST
60445: PUSH
60446: LD_INT 3
60448: PUSH
60449: LD_INT 5
60451: PUSH
60452: EMPTY
60453: LIST
60454: LIST
60455: PUSH
60456: EMPTY
60457: LIST
60458: LIST
60459: LIST
60460: LIST
60461: LIST
60462: LIST
60463: LIST
60464: LIST
60465: LIST
60466: LIST
60467: LIST
60468: LIST
60469: LIST
60470: LIST
60471: LIST
60472: LIST
60473: LIST
60474: LIST
60475: LIST
60476: LIST
60477: LIST
60478: LIST
60479: LIST
60480: LIST
60481: LIST
60482: LIST
60483: LIST
60484: LIST
60485: LIST
60486: LIST
60487: LIST
60488: LIST
60489: LIST
60490: LIST
60491: LIST
60492: LIST
60493: LIST
60494: LIST
60495: LIST
60496: LIST
60497: LIST
60498: LIST
60499: LIST
60500: LIST
60501: LIST
60502: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
60503: LD_ADDR_VAR 0 33
60507: PUSH
60508: LD_INT 4
60510: NEG
60511: PUSH
60512: LD_INT 4
60514: NEG
60515: PUSH
60516: EMPTY
60517: LIST
60518: LIST
60519: PUSH
60520: LD_INT 4
60522: NEG
60523: PUSH
60524: LD_INT 5
60526: NEG
60527: PUSH
60528: EMPTY
60529: LIST
60530: LIST
60531: PUSH
60532: LD_INT 3
60534: NEG
60535: PUSH
60536: LD_INT 4
60538: NEG
60539: PUSH
60540: EMPTY
60541: LIST
60542: LIST
60543: PUSH
60544: LD_INT 3
60546: NEG
60547: PUSH
60548: LD_INT 3
60550: NEG
60551: PUSH
60552: EMPTY
60553: LIST
60554: LIST
60555: PUSH
60556: LD_INT 4
60558: NEG
60559: PUSH
60560: LD_INT 3
60562: NEG
60563: PUSH
60564: EMPTY
60565: LIST
60566: LIST
60567: PUSH
60568: LD_INT 5
60570: NEG
60571: PUSH
60572: LD_INT 4
60574: NEG
60575: PUSH
60576: EMPTY
60577: LIST
60578: LIST
60579: PUSH
60580: LD_INT 5
60582: NEG
60583: PUSH
60584: LD_INT 5
60586: NEG
60587: PUSH
60588: EMPTY
60589: LIST
60590: LIST
60591: PUSH
60592: LD_INT 3
60594: NEG
60595: PUSH
60596: LD_INT 5
60598: NEG
60599: PUSH
60600: EMPTY
60601: LIST
60602: LIST
60603: PUSH
60604: LD_INT 5
60606: NEG
60607: PUSH
60608: LD_INT 3
60610: NEG
60611: PUSH
60612: EMPTY
60613: LIST
60614: LIST
60615: PUSH
60616: LD_INT 0
60618: PUSH
60619: LD_INT 3
60621: NEG
60622: PUSH
60623: EMPTY
60624: LIST
60625: LIST
60626: PUSH
60627: LD_INT 0
60629: PUSH
60630: LD_INT 4
60632: NEG
60633: PUSH
60634: EMPTY
60635: LIST
60636: LIST
60637: PUSH
60638: LD_INT 1
60640: PUSH
60641: LD_INT 3
60643: NEG
60644: PUSH
60645: EMPTY
60646: LIST
60647: LIST
60648: PUSH
60649: LD_INT 1
60651: PUSH
60652: LD_INT 2
60654: NEG
60655: PUSH
60656: EMPTY
60657: LIST
60658: LIST
60659: PUSH
60660: LD_INT 0
60662: PUSH
60663: LD_INT 2
60665: NEG
60666: PUSH
60667: EMPTY
60668: LIST
60669: LIST
60670: PUSH
60671: LD_INT 1
60673: NEG
60674: PUSH
60675: LD_INT 3
60677: NEG
60678: PUSH
60679: EMPTY
60680: LIST
60681: LIST
60682: PUSH
60683: LD_INT 1
60685: NEG
60686: PUSH
60687: LD_INT 4
60689: NEG
60690: PUSH
60691: EMPTY
60692: LIST
60693: LIST
60694: PUSH
60695: LD_INT 2
60697: PUSH
60698: LD_INT 2
60700: NEG
60701: PUSH
60702: EMPTY
60703: LIST
60704: LIST
60705: PUSH
60706: LD_INT 2
60708: NEG
60709: PUSH
60710: LD_INT 4
60712: NEG
60713: PUSH
60714: EMPTY
60715: LIST
60716: LIST
60717: PUSH
60718: LD_INT 4
60720: PUSH
60721: LD_INT 0
60723: PUSH
60724: EMPTY
60725: LIST
60726: LIST
60727: PUSH
60728: LD_INT 4
60730: PUSH
60731: LD_INT 1
60733: NEG
60734: PUSH
60735: EMPTY
60736: LIST
60737: LIST
60738: PUSH
60739: LD_INT 5
60741: PUSH
60742: LD_INT 0
60744: PUSH
60745: EMPTY
60746: LIST
60747: LIST
60748: PUSH
60749: LD_INT 5
60751: PUSH
60752: LD_INT 1
60754: PUSH
60755: EMPTY
60756: LIST
60757: LIST
60758: PUSH
60759: LD_INT 4
60761: PUSH
60762: LD_INT 1
60764: PUSH
60765: EMPTY
60766: LIST
60767: LIST
60768: PUSH
60769: LD_INT 3
60771: PUSH
60772: LD_INT 0
60774: PUSH
60775: EMPTY
60776: LIST
60777: LIST
60778: PUSH
60779: LD_INT 3
60781: PUSH
60782: LD_INT 1
60784: NEG
60785: PUSH
60786: EMPTY
60787: LIST
60788: LIST
60789: PUSH
60790: LD_INT 3
60792: PUSH
60793: LD_INT 2
60795: NEG
60796: PUSH
60797: EMPTY
60798: LIST
60799: LIST
60800: PUSH
60801: LD_INT 5
60803: PUSH
60804: LD_INT 2
60806: PUSH
60807: EMPTY
60808: LIST
60809: LIST
60810: PUSH
60811: LD_INT 3
60813: PUSH
60814: LD_INT 3
60816: PUSH
60817: EMPTY
60818: LIST
60819: LIST
60820: PUSH
60821: LD_INT 3
60823: PUSH
60824: LD_INT 2
60826: PUSH
60827: EMPTY
60828: LIST
60829: LIST
60830: PUSH
60831: LD_INT 4
60833: PUSH
60834: LD_INT 3
60836: PUSH
60837: EMPTY
60838: LIST
60839: LIST
60840: PUSH
60841: LD_INT 4
60843: PUSH
60844: LD_INT 4
60846: PUSH
60847: EMPTY
60848: LIST
60849: LIST
60850: PUSH
60851: LD_INT 3
60853: PUSH
60854: LD_INT 4
60856: PUSH
60857: EMPTY
60858: LIST
60859: LIST
60860: PUSH
60861: LD_INT 2
60863: PUSH
60864: LD_INT 3
60866: PUSH
60867: EMPTY
60868: LIST
60869: LIST
60870: PUSH
60871: LD_INT 2
60873: PUSH
60874: LD_INT 2
60876: PUSH
60877: EMPTY
60878: LIST
60879: LIST
60880: PUSH
60881: LD_INT 4
60883: PUSH
60884: LD_INT 2
60886: PUSH
60887: EMPTY
60888: LIST
60889: LIST
60890: PUSH
60891: LD_INT 2
60893: PUSH
60894: LD_INT 4
60896: PUSH
60897: EMPTY
60898: LIST
60899: LIST
60900: PUSH
60901: LD_INT 0
60903: PUSH
60904: LD_INT 4
60906: PUSH
60907: EMPTY
60908: LIST
60909: LIST
60910: PUSH
60911: LD_INT 0
60913: PUSH
60914: LD_INT 3
60916: PUSH
60917: EMPTY
60918: LIST
60919: LIST
60920: PUSH
60921: LD_INT 1
60923: PUSH
60924: LD_INT 4
60926: PUSH
60927: EMPTY
60928: LIST
60929: LIST
60930: PUSH
60931: LD_INT 1
60933: PUSH
60934: LD_INT 5
60936: PUSH
60937: EMPTY
60938: LIST
60939: LIST
60940: PUSH
60941: LD_INT 0
60943: PUSH
60944: LD_INT 5
60946: PUSH
60947: EMPTY
60948: LIST
60949: LIST
60950: PUSH
60951: LD_INT 1
60953: NEG
60954: PUSH
60955: LD_INT 4
60957: PUSH
60958: EMPTY
60959: LIST
60960: LIST
60961: PUSH
60962: LD_INT 1
60964: NEG
60965: PUSH
60966: LD_INT 3
60968: PUSH
60969: EMPTY
60970: LIST
60971: LIST
60972: PUSH
60973: LD_INT 2
60975: PUSH
60976: LD_INT 5
60978: PUSH
60979: EMPTY
60980: LIST
60981: LIST
60982: PUSH
60983: LD_INT 2
60985: NEG
60986: PUSH
60987: LD_INT 3
60989: PUSH
60990: EMPTY
60991: LIST
60992: LIST
60993: PUSH
60994: EMPTY
60995: LIST
60996: LIST
60997: LIST
60998: LIST
60999: LIST
61000: LIST
61001: LIST
61002: LIST
61003: LIST
61004: LIST
61005: LIST
61006: LIST
61007: LIST
61008: LIST
61009: LIST
61010: LIST
61011: LIST
61012: LIST
61013: LIST
61014: LIST
61015: LIST
61016: LIST
61017: LIST
61018: LIST
61019: LIST
61020: LIST
61021: LIST
61022: LIST
61023: LIST
61024: LIST
61025: LIST
61026: LIST
61027: LIST
61028: LIST
61029: LIST
61030: LIST
61031: LIST
61032: LIST
61033: LIST
61034: LIST
61035: LIST
61036: LIST
61037: LIST
61038: LIST
61039: LIST
61040: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
61041: LD_ADDR_VAR 0 34
61045: PUSH
61046: LD_INT 0
61048: PUSH
61049: LD_INT 4
61051: NEG
61052: PUSH
61053: EMPTY
61054: LIST
61055: LIST
61056: PUSH
61057: LD_INT 0
61059: PUSH
61060: LD_INT 5
61062: NEG
61063: PUSH
61064: EMPTY
61065: LIST
61066: LIST
61067: PUSH
61068: LD_INT 1
61070: PUSH
61071: LD_INT 4
61073: NEG
61074: PUSH
61075: EMPTY
61076: LIST
61077: LIST
61078: PUSH
61079: LD_INT 1
61081: PUSH
61082: LD_INT 3
61084: NEG
61085: PUSH
61086: EMPTY
61087: LIST
61088: LIST
61089: PUSH
61090: LD_INT 0
61092: PUSH
61093: LD_INT 3
61095: NEG
61096: PUSH
61097: EMPTY
61098: LIST
61099: LIST
61100: PUSH
61101: LD_INT 1
61103: NEG
61104: PUSH
61105: LD_INT 4
61107: NEG
61108: PUSH
61109: EMPTY
61110: LIST
61111: LIST
61112: PUSH
61113: LD_INT 1
61115: NEG
61116: PUSH
61117: LD_INT 5
61119: NEG
61120: PUSH
61121: EMPTY
61122: LIST
61123: LIST
61124: PUSH
61125: LD_INT 2
61127: PUSH
61128: LD_INT 3
61130: NEG
61131: PUSH
61132: EMPTY
61133: LIST
61134: LIST
61135: PUSH
61136: LD_INT 2
61138: NEG
61139: PUSH
61140: LD_INT 5
61142: NEG
61143: PUSH
61144: EMPTY
61145: LIST
61146: LIST
61147: PUSH
61148: LD_INT 3
61150: PUSH
61151: LD_INT 0
61153: PUSH
61154: EMPTY
61155: LIST
61156: LIST
61157: PUSH
61158: LD_INT 3
61160: PUSH
61161: LD_INT 1
61163: NEG
61164: PUSH
61165: EMPTY
61166: LIST
61167: LIST
61168: PUSH
61169: LD_INT 4
61171: PUSH
61172: LD_INT 0
61174: PUSH
61175: EMPTY
61176: LIST
61177: LIST
61178: PUSH
61179: LD_INT 4
61181: PUSH
61182: LD_INT 1
61184: PUSH
61185: EMPTY
61186: LIST
61187: LIST
61188: PUSH
61189: LD_INT 3
61191: PUSH
61192: LD_INT 1
61194: PUSH
61195: EMPTY
61196: LIST
61197: LIST
61198: PUSH
61199: LD_INT 2
61201: PUSH
61202: LD_INT 0
61204: PUSH
61205: EMPTY
61206: LIST
61207: LIST
61208: PUSH
61209: LD_INT 2
61211: PUSH
61212: LD_INT 1
61214: NEG
61215: PUSH
61216: EMPTY
61217: LIST
61218: LIST
61219: PUSH
61220: LD_INT 2
61222: PUSH
61223: LD_INT 2
61225: NEG
61226: PUSH
61227: EMPTY
61228: LIST
61229: LIST
61230: PUSH
61231: LD_INT 4
61233: PUSH
61234: LD_INT 2
61236: PUSH
61237: EMPTY
61238: LIST
61239: LIST
61240: PUSH
61241: LD_INT 4
61243: PUSH
61244: LD_INT 4
61246: PUSH
61247: EMPTY
61248: LIST
61249: LIST
61250: PUSH
61251: LD_INT 4
61253: PUSH
61254: LD_INT 3
61256: PUSH
61257: EMPTY
61258: LIST
61259: LIST
61260: PUSH
61261: LD_INT 5
61263: PUSH
61264: LD_INT 4
61266: PUSH
61267: EMPTY
61268: LIST
61269: LIST
61270: PUSH
61271: LD_INT 5
61273: PUSH
61274: LD_INT 5
61276: PUSH
61277: EMPTY
61278: LIST
61279: LIST
61280: PUSH
61281: LD_INT 4
61283: PUSH
61284: LD_INT 5
61286: PUSH
61287: EMPTY
61288: LIST
61289: LIST
61290: PUSH
61291: LD_INT 3
61293: PUSH
61294: LD_INT 4
61296: PUSH
61297: EMPTY
61298: LIST
61299: LIST
61300: PUSH
61301: LD_INT 3
61303: PUSH
61304: LD_INT 3
61306: PUSH
61307: EMPTY
61308: LIST
61309: LIST
61310: PUSH
61311: LD_INT 5
61313: PUSH
61314: LD_INT 3
61316: PUSH
61317: EMPTY
61318: LIST
61319: LIST
61320: PUSH
61321: LD_INT 3
61323: PUSH
61324: LD_INT 5
61326: PUSH
61327: EMPTY
61328: LIST
61329: LIST
61330: PUSH
61331: LD_INT 0
61333: PUSH
61334: LD_INT 3
61336: PUSH
61337: EMPTY
61338: LIST
61339: LIST
61340: PUSH
61341: LD_INT 0
61343: PUSH
61344: LD_INT 2
61346: PUSH
61347: EMPTY
61348: LIST
61349: LIST
61350: PUSH
61351: LD_INT 1
61353: PUSH
61354: LD_INT 3
61356: PUSH
61357: EMPTY
61358: LIST
61359: LIST
61360: PUSH
61361: LD_INT 1
61363: PUSH
61364: LD_INT 4
61366: PUSH
61367: EMPTY
61368: LIST
61369: LIST
61370: PUSH
61371: LD_INT 0
61373: PUSH
61374: LD_INT 4
61376: PUSH
61377: EMPTY
61378: LIST
61379: LIST
61380: PUSH
61381: LD_INT 1
61383: NEG
61384: PUSH
61385: LD_INT 3
61387: PUSH
61388: EMPTY
61389: LIST
61390: LIST
61391: PUSH
61392: LD_INT 1
61394: NEG
61395: PUSH
61396: LD_INT 2
61398: PUSH
61399: EMPTY
61400: LIST
61401: LIST
61402: PUSH
61403: LD_INT 2
61405: PUSH
61406: LD_INT 4
61408: PUSH
61409: EMPTY
61410: LIST
61411: LIST
61412: PUSH
61413: LD_INT 2
61415: NEG
61416: PUSH
61417: LD_INT 2
61419: PUSH
61420: EMPTY
61421: LIST
61422: LIST
61423: PUSH
61424: LD_INT 4
61426: NEG
61427: PUSH
61428: LD_INT 0
61430: PUSH
61431: EMPTY
61432: LIST
61433: LIST
61434: PUSH
61435: LD_INT 4
61437: NEG
61438: PUSH
61439: LD_INT 1
61441: NEG
61442: PUSH
61443: EMPTY
61444: LIST
61445: LIST
61446: PUSH
61447: LD_INT 3
61449: NEG
61450: PUSH
61451: LD_INT 0
61453: PUSH
61454: EMPTY
61455: LIST
61456: LIST
61457: PUSH
61458: LD_INT 3
61460: NEG
61461: PUSH
61462: LD_INT 1
61464: PUSH
61465: EMPTY
61466: LIST
61467: LIST
61468: PUSH
61469: LD_INT 4
61471: NEG
61472: PUSH
61473: LD_INT 1
61475: PUSH
61476: EMPTY
61477: LIST
61478: LIST
61479: PUSH
61480: LD_INT 5
61482: NEG
61483: PUSH
61484: LD_INT 0
61486: PUSH
61487: EMPTY
61488: LIST
61489: LIST
61490: PUSH
61491: LD_INT 5
61493: NEG
61494: PUSH
61495: LD_INT 1
61497: NEG
61498: PUSH
61499: EMPTY
61500: LIST
61501: LIST
61502: PUSH
61503: LD_INT 5
61505: NEG
61506: PUSH
61507: LD_INT 2
61509: NEG
61510: PUSH
61511: EMPTY
61512: LIST
61513: LIST
61514: PUSH
61515: LD_INT 3
61517: NEG
61518: PUSH
61519: LD_INT 2
61521: PUSH
61522: EMPTY
61523: LIST
61524: LIST
61525: PUSH
61526: EMPTY
61527: LIST
61528: LIST
61529: LIST
61530: LIST
61531: LIST
61532: LIST
61533: LIST
61534: LIST
61535: LIST
61536: LIST
61537: LIST
61538: LIST
61539: LIST
61540: LIST
61541: LIST
61542: LIST
61543: LIST
61544: LIST
61545: LIST
61546: LIST
61547: LIST
61548: LIST
61549: LIST
61550: LIST
61551: LIST
61552: LIST
61553: LIST
61554: LIST
61555: LIST
61556: LIST
61557: LIST
61558: LIST
61559: LIST
61560: LIST
61561: LIST
61562: LIST
61563: LIST
61564: LIST
61565: LIST
61566: LIST
61567: LIST
61568: LIST
61569: LIST
61570: LIST
61571: LIST
61572: ST_TO_ADDR
// end ; end ;
61573: GO 61576
61575: POP
// case btype of b_depot , b_warehouse :
61576: LD_VAR 0 1
61580: PUSH
61581: LD_INT 0
61583: DOUBLE
61584: EQUAL
61585: IFTRUE 61595
61587: LD_INT 1
61589: DOUBLE
61590: EQUAL
61591: IFTRUE 61595
61593: GO 61796
61595: POP
// case nation of nation_american :
61596: LD_VAR 0 5
61600: PUSH
61601: LD_INT 1
61603: DOUBLE
61604: EQUAL
61605: IFTRUE 61609
61607: GO 61665
61609: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
61610: LD_ADDR_VAR 0 9
61614: PUSH
61615: LD_VAR 0 11
61619: PUSH
61620: LD_VAR 0 12
61624: PUSH
61625: LD_VAR 0 13
61629: PUSH
61630: LD_VAR 0 14
61634: PUSH
61635: LD_VAR 0 15
61639: PUSH
61640: LD_VAR 0 16
61644: PUSH
61645: EMPTY
61646: LIST
61647: LIST
61648: LIST
61649: LIST
61650: LIST
61651: LIST
61652: PUSH
61653: LD_VAR 0 4
61657: PUSH
61658: LD_INT 1
61660: PLUS
61661: ARRAY
61662: ST_TO_ADDR
61663: GO 61794
61665: LD_INT 2
61667: DOUBLE
61668: EQUAL
61669: IFTRUE 61673
61671: GO 61729
61673: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
61674: LD_ADDR_VAR 0 9
61678: PUSH
61679: LD_VAR 0 17
61683: PUSH
61684: LD_VAR 0 18
61688: PUSH
61689: LD_VAR 0 19
61693: PUSH
61694: LD_VAR 0 20
61698: PUSH
61699: LD_VAR 0 21
61703: PUSH
61704: LD_VAR 0 22
61708: PUSH
61709: EMPTY
61710: LIST
61711: LIST
61712: LIST
61713: LIST
61714: LIST
61715: LIST
61716: PUSH
61717: LD_VAR 0 4
61721: PUSH
61722: LD_INT 1
61724: PLUS
61725: ARRAY
61726: ST_TO_ADDR
61727: GO 61794
61729: LD_INT 3
61731: DOUBLE
61732: EQUAL
61733: IFTRUE 61737
61735: GO 61793
61737: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
61738: LD_ADDR_VAR 0 9
61742: PUSH
61743: LD_VAR 0 23
61747: PUSH
61748: LD_VAR 0 24
61752: PUSH
61753: LD_VAR 0 25
61757: PUSH
61758: LD_VAR 0 26
61762: PUSH
61763: LD_VAR 0 27
61767: PUSH
61768: LD_VAR 0 28
61772: PUSH
61773: EMPTY
61774: LIST
61775: LIST
61776: LIST
61777: LIST
61778: LIST
61779: LIST
61780: PUSH
61781: LD_VAR 0 4
61785: PUSH
61786: LD_INT 1
61788: PLUS
61789: ARRAY
61790: ST_TO_ADDR
61791: GO 61794
61793: POP
61794: GO 62349
61796: LD_INT 2
61798: DOUBLE
61799: EQUAL
61800: IFTRUE 61810
61802: LD_INT 3
61804: DOUBLE
61805: EQUAL
61806: IFTRUE 61810
61808: GO 61866
61810: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
61811: LD_ADDR_VAR 0 9
61815: PUSH
61816: LD_VAR 0 29
61820: PUSH
61821: LD_VAR 0 30
61825: PUSH
61826: LD_VAR 0 31
61830: PUSH
61831: LD_VAR 0 32
61835: PUSH
61836: LD_VAR 0 33
61840: PUSH
61841: LD_VAR 0 34
61845: PUSH
61846: EMPTY
61847: LIST
61848: LIST
61849: LIST
61850: LIST
61851: LIST
61852: LIST
61853: PUSH
61854: LD_VAR 0 4
61858: PUSH
61859: LD_INT 1
61861: PLUS
61862: ARRAY
61863: ST_TO_ADDR
61864: GO 62349
61866: LD_INT 16
61868: DOUBLE
61869: EQUAL
61870: IFTRUE 61928
61872: LD_INT 17
61874: DOUBLE
61875: EQUAL
61876: IFTRUE 61928
61878: LD_INT 18
61880: DOUBLE
61881: EQUAL
61882: IFTRUE 61928
61884: LD_INT 19
61886: DOUBLE
61887: EQUAL
61888: IFTRUE 61928
61890: LD_INT 22
61892: DOUBLE
61893: EQUAL
61894: IFTRUE 61928
61896: LD_INT 20
61898: DOUBLE
61899: EQUAL
61900: IFTRUE 61928
61902: LD_INT 21
61904: DOUBLE
61905: EQUAL
61906: IFTRUE 61928
61908: LD_INT 23
61910: DOUBLE
61911: EQUAL
61912: IFTRUE 61928
61914: LD_INT 24
61916: DOUBLE
61917: EQUAL
61918: IFTRUE 61928
61920: LD_INT 25
61922: DOUBLE
61923: EQUAL
61924: IFTRUE 61928
61926: GO 61984
61928: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
61929: LD_ADDR_VAR 0 9
61933: PUSH
61934: LD_VAR 0 35
61938: PUSH
61939: LD_VAR 0 36
61943: PUSH
61944: LD_VAR 0 37
61948: PUSH
61949: LD_VAR 0 38
61953: PUSH
61954: LD_VAR 0 39
61958: PUSH
61959: LD_VAR 0 40
61963: PUSH
61964: EMPTY
61965: LIST
61966: LIST
61967: LIST
61968: LIST
61969: LIST
61970: LIST
61971: PUSH
61972: LD_VAR 0 4
61976: PUSH
61977: LD_INT 1
61979: PLUS
61980: ARRAY
61981: ST_TO_ADDR
61982: GO 62349
61984: LD_INT 6
61986: DOUBLE
61987: EQUAL
61988: IFTRUE 62040
61990: LD_INT 7
61992: DOUBLE
61993: EQUAL
61994: IFTRUE 62040
61996: LD_INT 8
61998: DOUBLE
61999: EQUAL
62000: IFTRUE 62040
62002: LD_INT 13
62004: DOUBLE
62005: EQUAL
62006: IFTRUE 62040
62008: LD_INT 12
62010: DOUBLE
62011: EQUAL
62012: IFTRUE 62040
62014: LD_INT 15
62016: DOUBLE
62017: EQUAL
62018: IFTRUE 62040
62020: LD_INT 11
62022: DOUBLE
62023: EQUAL
62024: IFTRUE 62040
62026: LD_INT 14
62028: DOUBLE
62029: EQUAL
62030: IFTRUE 62040
62032: LD_INT 10
62034: DOUBLE
62035: EQUAL
62036: IFTRUE 62040
62038: GO 62096
62040: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
62041: LD_ADDR_VAR 0 9
62045: PUSH
62046: LD_VAR 0 41
62050: PUSH
62051: LD_VAR 0 42
62055: PUSH
62056: LD_VAR 0 43
62060: PUSH
62061: LD_VAR 0 44
62065: PUSH
62066: LD_VAR 0 45
62070: PUSH
62071: LD_VAR 0 46
62075: PUSH
62076: EMPTY
62077: LIST
62078: LIST
62079: LIST
62080: LIST
62081: LIST
62082: LIST
62083: PUSH
62084: LD_VAR 0 4
62088: PUSH
62089: LD_INT 1
62091: PLUS
62092: ARRAY
62093: ST_TO_ADDR
62094: GO 62349
62096: LD_INT 36
62098: DOUBLE
62099: EQUAL
62100: IFTRUE 62104
62102: GO 62160
62104: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
62105: LD_ADDR_VAR 0 9
62109: PUSH
62110: LD_VAR 0 47
62114: PUSH
62115: LD_VAR 0 48
62119: PUSH
62120: LD_VAR 0 49
62124: PUSH
62125: LD_VAR 0 50
62129: PUSH
62130: LD_VAR 0 51
62134: PUSH
62135: LD_VAR 0 52
62139: PUSH
62140: EMPTY
62141: LIST
62142: LIST
62143: LIST
62144: LIST
62145: LIST
62146: LIST
62147: PUSH
62148: LD_VAR 0 4
62152: PUSH
62153: LD_INT 1
62155: PLUS
62156: ARRAY
62157: ST_TO_ADDR
62158: GO 62349
62160: LD_INT 4
62162: DOUBLE
62163: EQUAL
62164: IFTRUE 62186
62166: LD_INT 5
62168: DOUBLE
62169: EQUAL
62170: IFTRUE 62186
62172: LD_INT 34
62174: DOUBLE
62175: EQUAL
62176: IFTRUE 62186
62178: LD_INT 37
62180: DOUBLE
62181: EQUAL
62182: IFTRUE 62186
62184: GO 62242
62186: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
62187: LD_ADDR_VAR 0 9
62191: PUSH
62192: LD_VAR 0 53
62196: PUSH
62197: LD_VAR 0 54
62201: PUSH
62202: LD_VAR 0 55
62206: PUSH
62207: LD_VAR 0 56
62211: PUSH
62212: LD_VAR 0 57
62216: PUSH
62217: LD_VAR 0 58
62221: PUSH
62222: EMPTY
62223: LIST
62224: LIST
62225: LIST
62226: LIST
62227: LIST
62228: LIST
62229: PUSH
62230: LD_VAR 0 4
62234: PUSH
62235: LD_INT 1
62237: PLUS
62238: ARRAY
62239: ST_TO_ADDR
62240: GO 62349
62242: LD_INT 31
62244: DOUBLE
62245: EQUAL
62246: IFTRUE 62292
62248: LD_INT 32
62250: DOUBLE
62251: EQUAL
62252: IFTRUE 62292
62254: LD_INT 33
62256: DOUBLE
62257: EQUAL
62258: IFTRUE 62292
62260: LD_INT 27
62262: DOUBLE
62263: EQUAL
62264: IFTRUE 62292
62266: LD_INT 26
62268: DOUBLE
62269: EQUAL
62270: IFTRUE 62292
62272: LD_INT 28
62274: DOUBLE
62275: EQUAL
62276: IFTRUE 62292
62278: LD_INT 29
62280: DOUBLE
62281: EQUAL
62282: IFTRUE 62292
62284: LD_INT 30
62286: DOUBLE
62287: EQUAL
62288: IFTRUE 62292
62290: GO 62348
62292: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
62293: LD_ADDR_VAR 0 9
62297: PUSH
62298: LD_VAR 0 59
62302: PUSH
62303: LD_VAR 0 60
62307: PUSH
62308: LD_VAR 0 61
62312: PUSH
62313: LD_VAR 0 62
62317: PUSH
62318: LD_VAR 0 63
62322: PUSH
62323: LD_VAR 0 64
62327: PUSH
62328: EMPTY
62329: LIST
62330: LIST
62331: LIST
62332: LIST
62333: LIST
62334: LIST
62335: PUSH
62336: LD_VAR 0 4
62340: PUSH
62341: LD_INT 1
62343: PLUS
62344: ARRAY
62345: ST_TO_ADDR
62346: GO 62349
62348: POP
// temp_list2 = [ ] ;
62349: LD_ADDR_VAR 0 10
62353: PUSH
62354: EMPTY
62355: ST_TO_ADDR
// for i in temp_list do
62356: LD_ADDR_VAR 0 8
62360: PUSH
62361: LD_VAR 0 9
62365: PUSH
62366: FOR_IN
62367: IFFALSE 62419
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
62369: LD_ADDR_VAR 0 10
62373: PUSH
62374: LD_VAR 0 10
62378: PUSH
62379: LD_VAR 0 8
62383: PUSH
62384: LD_INT 1
62386: ARRAY
62387: PUSH
62388: LD_VAR 0 2
62392: PLUS
62393: PUSH
62394: LD_VAR 0 8
62398: PUSH
62399: LD_INT 2
62401: ARRAY
62402: PUSH
62403: LD_VAR 0 3
62407: PLUS
62408: PUSH
62409: EMPTY
62410: LIST
62411: LIST
62412: PUSH
62413: EMPTY
62414: LIST
62415: ADD
62416: ST_TO_ADDR
62417: GO 62366
62419: POP
62420: POP
// result = temp_list2 ;
62421: LD_ADDR_VAR 0 7
62425: PUSH
62426: LD_VAR 0 10
62430: ST_TO_ADDR
// end ;
62431: LD_VAR 0 7
62435: RET
// export function EnemyInRange ( unit , dist ) ; begin
62436: LD_INT 0
62438: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
62439: LD_ADDR_VAR 0 3
62443: PUSH
62444: LD_VAR 0 1
62448: PPUSH
62449: CALL_OW 255
62453: PPUSH
62454: LD_VAR 0 1
62458: PPUSH
62459: CALL_OW 250
62463: PPUSH
62464: LD_VAR 0 1
62468: PPUSH
62469: CALL_OW 251
62473: PPUSH
62474: LD_VAR 0 2
62478: PPUSH
62479: CALL 35809 0 4
62483: PUSH
62484: LD_INT 4
62486: ARRAY
62487: ST_TO_ADDR
// end ;
62488: LD_VAR 0 3
62492: RET
// export function PlayerSeeMe ( unit ) ; begin
62493: LD_INT 0
62495: PPUSH
// result := See ( your_side , unit ) ;
62496: LD_ADDR_VAR 0 2
62500: PUSH
62501: LD_OWVAR 2
62505: PPUSH
62506: LD_VAR 0 1
62510: PPUSH
62511: CALL_OW 292
62515: ST_TO_ADDR
// end ;
62516: LD_VAR 0 2
62520: RET
// export function ReverseDir ( unit ) ; begin
62521: LD_INT 0
62523: PPUSH
// if not unit then
62524: LD_VAR 0 1
62528: NOT
62529: IFFALSE 62533
// exit ;
62531: GO 62556
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
62533: LD_ADDR_VAR 0 2
62537: PUSH
62538: LD_VAR 0 1
62542: PPUSH
62543: CALL_OW 254
62547: PUSH
62548: LD_INT 3
62550: PLUS
62551: PUSH
62552: LD_INT 6
62554: MOD
62555: ST_TO_ADDR
// end ;
62556: LD_VAR 0 2
62560: RET
// export function ReverseArray ( array ) ; var i ; begin
62561: LD_INT 0
62563: PPUSH
62564: PPUSH
// if not array then
62565: LD_VAR 0 1
62569: NOT
62570: IFFALSE 62574
// exit ;
62572: GO 62629
// result := [ ] ;
62574: LD_ADDR_VAR 0 2
62578: PUSH
62579: EMPTY
62580: ST_TO_ADDR
// for i := array downto 1 do
62581: LD_ADDR_VAR 0 3
62585: PUSH
62586: DOUBLE
62587: LD_VAR 0 1
62591: INC
62592: ST_TO_ADDR
62593: LD_INT 1
62595: PUSH
62596: FOR_DOWNTO
62597: IFFALSE 62627
// result := Join ( result , array [ i ] ) ;
62599: LD_ADDR_VAR 0 2
62603: PUSH
62604: LD_VAR 0 2
62608: PPUSH
62609: LD_VAR 0 1
62613: PUSH
62614: LD_VAR 0 3
62618: ARRAY
62619: PPUSH
62620: CALL 67274 0 2
62624: ST_TO_ADDR
62625: GO 62596
62627: POP
62628: POP
// end ;
62629: LD_VAR 0 2
62633: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
62634: LD_INT 0
62636: PPUSH
62637: PPUSH
62638: PPUSH
62639: PPUSH
62640: PPUSH
62641: PPUSH
// if not unit or not hexes then
62642: LD_VAR 0 1
62646: NOT
62647: PUSH
62648: LD_VAR 0 2
62652: NOT
62653: OR
62654: IFFALSE 62658
// exit ;
62656: GO 62781
// dist := 9999 ;
62658: LD_ADDR_VAR 0 5
62662: PUSH
62663: LD_INT 9999
62665: ST_TO_ADDR
// for i = 1 to hexes do
62666: LD_ADDR_VAR 0 4
62670: PUSH
62671: DOUBLE
62672: LD_INT 1
62674: DEC
62675: ST_TO_ADDR
62676: LD_VAR 0 2
62680: PUSH
62681: FOR_TO
62682: IFFALSE 62769
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
62684: LD_ADDR_VAR 0 6
62688: PUSH
62689: LD_VAR 0 1
62693: PPUSH
62694: LD_VAR 0 2
62698: PUSH
62699: LD_VAR 0 4
62703: ARRAY
62704: PUSH
62705: LD_INT 1
62707: ARRAY
62708: PPUSH
62709: LD_VAR 0 2
62713: PUSH
62714: LD_VAR 0 4
62718: ARRAY
62719: PUSH
62720: LD_INT 2
62722: ARRAY
62723: PPUSH
62724: CALL_OW 297
62728: ST_TO_ADDR
// if tdist < dist then
62729: LD_VAR 0 6
62733: PUSH
62734: LD_VAR 0 5
62738: LESS
62739: IFFALSE 62767
// begin hex := hexes [ i ] ;
62741: LD_ADDR_VAR 0 8
62745: PUSH
62746: LD_VAR 0 2
62750: PUSH
62751: LD_VAR 0 4
62755: ARRAY
62756: ST_TO_ADDR
// dist := tdist ;
62757: LD_ADDR_VAR 0 5
62761: PUSH
62762: LD_VAR 0 6
62766: ST_TO_ADDR
// end ; end ;
62767: GO 62681
62769: POP
62770: POP
// result := hex ;
62771: LD_ADDR_VAR 0 3
62775: PUSH
62776: LD_VAR 0 8
62780: ST_TO_ADDR
// end ;
62781: LD_VAR 0 3
62785: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
62786: LD_INT 0
62788: PPUSH
62789: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
62790: LD_VAR 0 1
62794: NOT
62795: PUSH
62796: LD_VAR 0 1
62800: PUSH
62801: LD_INT 21
62803: PUSH
62804: LD_INT 2
62806: PUSH
62807: EMPTY
62808: LIST
62809: LIST
62810: PUSH
62811: LD_INT 23
62813: PUSH
62814: LD_INT 2
62816: PUSH
62817: EMPTY
62818: LIST
62819: LIST
62820: PUSH
62821: EMPTY
62822: LIST
62823: LIST
62824: PPUSH
62825: CALL_OW 69
62829: IN
62830: NOT
62831: OR
62832: IFFALSE 62836
// exit ;
62834: GO 62883
// for i = 1 to 3 do
62836: LD_ADDR_VAR 0 3
62840: PUSH
62841: DOUBLE
62842: LD_INT 1
62844: DEC
62845: ST_TO_ADDR
62846: LD_INT 3
62848: PUSH
62849: FOR_TO
62850: IFFALSE 62881
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
62852: LD_VAR 0 1
62856: PPUSH
62857: CALL_OW 250
62861: PPUSH
62862: LD_VAR 0 1
62866: PPUSH
62867: CALL_OW 251
62871: PPUSH
62872: LD_INT 1
62874: PPUSH
62875: CALL_OW 453
62879: GO 62849
62881: POP
62882: POP
// end ;
62883: LD_VAR 0 2
62887: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
62888: LD_INT 0
62890: PPUSH
62891: PPUSH
62892: PPUSH
62893: PPUSH
62894: PPUSH
62895: PPUSH
// if not unit or not enemy_unit then
62896: LD_VAR 0 1
62900: NOT
62901: PUSH
62902: LD_VAR 0 2
62906: NOT
62907: OR
62908: IFFALSE 62912
// exit ;
62910: GO 63379
// if GetLives ( i ) < 250 then
62912: LD_VAR 0 4
62916: PPUSH
62917: CALL_OW 256
62921: PUSH
62922: LD_INT 250
62924: LESS
62925: IFFALSE 62938
// begin ComAutodestruct ( i ) ;
62927: LD_VAR 0 4
62931: PPUSH
62932: CALL 62786 0 1
// exit ;
62936: GO 63379
// end ; x := GetX ( enemy_unit ) ;
62938: LD_ADDR_VAR 0 7
62942: PUSH
62943: LD_VAR 0 2
62947: PPUSH
62948: CALL_OW 250
62952: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
62953: LD_ADDR_VAR 0 8
62957: PUSH
62958: LD_VAR 0 2
62962: PPUSH
62963: CALL_OW 251
62967: ST_TO_ADDR
// if not x or not y then
62968: LD_VAR 0 7
62972: NOT
62973: PUSH
62974: LD_VAR 0 8
62978: NOT
62979: OR
62980: IFFALSE 62984
// exit ;
62982: GO 63379
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
62984: LD_ADDR_VAR 0 6
62988: PUSH
62989: LD_VAR 0 7
62993: PPUSH
62994: LD_INT 0
62996: PPUSH
62997: LD_INT 4
62999: PPUSH
63000: CALL_OW 272
63004: PUSH
63005: LD_VAR 0 8
63009: PPUSH
63010: LD_INT 0
63012: PPUSH
63013: LD_INT 4
63015: PPUSH
63016: CALL_OW 273
63020: PUSH
63021: EMPTY
63022: LIST
63023: LIST
63024: PUSH
63025: LD_VAR 0 7
63029: PPUSH
63030: LD_INT 1
63032: PPUSH
63033: LD_INT 4
63035: PPUSH
63036: CALL_OW 272
63040: PUSH
63041: LD_VAR 0 8
63045: PPUSH
63046: LD_INT 1
63048: PPUSH
63049: LD_INT 4
63051: PPUSH
63052: CALL_OW 273
63056: PUSH
63057: EMPTY
63058: LIST
63059: LIST
63060: PUSH
63061: LD_VAR 0 7
63065: PPUSH
63066: LD_INT 2
63068: PPUSH
63069: LD_INT 4
63071: PPUSH
63072: CALL_OW 272
63076: PUSH
63077: LD_VAR 0 8
63081: PPUSH
63082: LD_INT 2
63084: PPUSH
63085: LD_INT 4
63087: PPUSH
63088: CALL_OW 273
63092: PUSH
63093: EMPTY
63094: LIST
63095: LIST
63096: PUSH
63097: LD_VAR 0 7
63101: PPUSH
63102: LD_INT 3
63104: PPUSH
63105: LD_INT 4
63107: PPUSH
63108: CALL_OW 272
63112: PUSH
63113: LD_VAR 0 8
63117: PPUSH
63118: LD_INT 3
63120: PPUSH
63121: LD_INT 4
63123: PPUSH
63124: CALL_OW 273
63128: PUSH
63129: EMPTY
63130: LIST
63131: LIST
63132: PUSH
63133: LD_VAR 0 7
63137: PPUSH
63138: LD_INT 4
63140: PPUSH
63141: LD_INT 4
63143: PPUSH
63144: CALL_OW 272
63148: PUSH
63149: LD_VAR 0 8
63153: PPUSH
63154: LD_INT 4
63156: PPUSH
63157: LD_INT 4
63159: PPUSH
63160: CALL_OW 273
63164: PUSH
63165: EMPTY
63166: LIST
63167: LIST
63168: PUSH
63169: LD_VAR 0 7
63173: PPUSH
63174: LD_INT 5
63176: PPUSH
63177: LD_INT 4
63179: PPUSH
63180: CALL_OW 272
63184: PUSH
63185: LD_VAR 0 8
63189: PPUSH
63190: LD_INT 5
63192: PPUSH
63193: LD_INT 4
63195: PPUSH
63196: CALL_OW 273
63200: PUSH
63201: EMPTY
63202: LIST
63203: LIST
63204: PUSH
63205: EMPTY
63206: LIST
63207: LIST
63208: LIST
63209: LIST
63210: LIST
63211: LIST
63212: ST_TO_ADDR
// for i = tmp downto 1 do
63213: LD_ADDR_VAR 0 4
63217: PUSH
63218: DOUBLE
63219: LD_VAR 0 6
63223: INC
63224: ST_TO_ADDR
63225: LD_INT 1
63227: PUSH
63228: FOR_DOWNTO
63229: IFFALSE 63330
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
63231: LD_VAR 0 6
63235: PUSH
63236: LD_VAR 0 4
63240: ARRAY
63241: PUSH
63242: LD_INT 1
63244: ARRAY
63245: PPUSH
63246: LD_VAR 0 6
63250: PUSH
63251: LD_VAR 0 4
63255: ARRAY
63256: PUSH
63257: LD_INT 2
63259: ARRAY
63260: PPUSH
63261: CALL_OW 488
63265: NOT
63266: PUSH
63267: LD_VAR 0 6
63271: PUSH
63272: LD_VAR 0 4
63276: ARRAY
63277: PUSH
63278: LD_INT 1
63280: ARRAY
63281: PPUSH
63282: LD_VAR 0 6
63286: PUSH
63287: LD_VAR 0 4
63291: ARRAY
63292: PUSH
63293: LD_INT 2
63295: ARRAY
63296: PPUSH
63297: CALL_OW 428
63301: PUSH
63302: LD_INT 0
63304: NONEQUAL
63305: OR
63306: IFFALSE 63328
// tmp := Delete ( tmp , i ) ;
63308: LD_ADDR_VAR 0 6
63312: PUSH
63313: LD_VAR 0 6
63317: PPUSH
63318: LD_VAR 0 4
63322: PPUSH
63323: CALL_OW 3
63327: ST_TO_ADDR
63328: GO 63228
63330: POP
63331: POP
// j := GetClosestHex ( unit , tmp ) ;
63332: LD_ADDR_VAR 0 5
63336: PUSH
63337: LD_VAR 0 1
63341: PPUSH
63342: LD_VAR 0 6
63346: PPUSH
63347: CALL 62634 0 2
63351: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
63352: LD_VAR 0 1
63356: PPUSH
63357: LD_VAR 0 5
63361: PUSH
63362: LD_INT 1
63364: ARRAY
63365: PPUSH
63366: LD_VAR 0 5
63370: PUSH
63371: LD_INT 2
63373: ARRAY
63374: PPUSH
63375: CALL_OW 111
// end ;
63379: LD_VAR 0 3
63383: RET
// export function PrepareApemanSoldier ( ) ; begin
63384: LD_INT 0
63386: PPUSH
// uc_nation := 0 ;
63387: LD_ADDR_OWVAR 21
63391: PUSH
63392: LD_INT 0
63394: ST_TO_ADDR
// hc_sex := sex_male ;
63395: LD_ADDR_OWVAR 27
63399: PUSH
63400: LD_INT 1
63402: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
63403: LD_ADDR_OWVAR 28
63407: PUSH
63408: LD_INT 15
63410: ST_TO_ADDR
// hc_gallery :=  ;
63411: LD_ADDR_OWVAR 33
63415: PUSH
63416: LD_STRING 
63418: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
63419: LD_ADDR_OWVAR 31
63423: PUSH
63424: LD_INT 0
63426: PPUSH
63427: LD_INT 3
63429: PPUSH
63430: CALL_OW 12
63434: PUSH
63435: LD_INT 0
63437: PPUSH
63438: LD_INT 3
63440: PPUSH
63441: CALL_OW 12
63445: PUSH
63446: LD_INT 0
63448: PUSH
63449: LD_INT 0
63451: PUSH
63452: EMPTY
63453: LIST
63454: LIST
63455: LIST
63456: LIST
63457: ST_TO_ADDR
// end ;
63458: LD_VAR 0 1
63462: RET
// export function PrepareApemanEngineer ( ) ; begin
63463: LD_INT 0
63465: PPUSH
// uc_nation := 0 ;
63466: LD_ADDR_OWVAR 21
63470: PUSH
63471: LD_INT 0
63473: ST_TO_ADDR
// hc_sex := sex_male ;
63474: LD_ADDR_OWVAR 27
63478: PUSH
63479: LD_INT 1
63481: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
63482: LD_ADDR_OWVAR 28
63486: PUSH
63487: LD_INT 16
63489: ST_TO_ADDR
// hc_gallery :=  ;
63490: LD_ADDR_OWVAR 33
63494: PUSH
63495: LD_STRING 
63497: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
63498: LD_ADDR_OWVAR 31
63502: PUSH
63503: LD_INT 0
63505: PPUSH
63506: LD_INT 3
63508: PPUSH
63509: CALL_OW 12
63513: PUSH
63514: LD_INT 0
63516: PPUSH
63517: LD_INT 3
63519: PPUSH
63520: CALL_OW 12
63524: PUSH
63525: LD_INT 0
63527: PUSH
63528: LD_INT 0
63530: PUSH
63531: EMPTY
63532: LIST
63533: LIST
63534: LIST
63535: LIST
63536: ST_TO_ADDR
// end ;
63537: LD_VAR 0 1
63541: RET
// export function PrepareApeman ( agressivity ) ; begin
63542: LD_INT 0
63544: PPUSH
// uc_side := 0 ;
63545: LD_ADDR_OWVAR 20
63549: PUSH
63550: LD_INT 0
63552: ST_TO_ADDR
// uc_nation := 0 ;
63553: LD_ADDR_OWVAR 21
63557: PUSH
63558: LD_INT 0
63560: ST_TO_ADDR
// hc_sex := sex_male ;
63561: LD_ADDR_OWVAR 27
63565: PUSH
63566: LD_INT 1
63568: ST_TO_ADDR
// hc_class := class_apeman ;
63569: LD_ADDR_OWVAR 28
63573: PUSH
63574: LD_INT 12
63576: ST_TO_ADDR
// hc_gallery :=  ;
63577: LD_ADDR_OWVAR 33
63581: PUSH
63582: LD_STRING 
63584: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
63585: LD_ADDR_OWVAR 35
63589: PUSH
63590: LD_VAR 0 1
63594: NEG
63595: PPUSH
63596: LD_VAR 0 1
63600: PPUSH
63601: CALL_OW 12
63605: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
63606: LD_ADDR_OWVAR 31
63610: PUSH
63611: LD_INT 0
63613: PPUSH
63614: LD_INT 3
63616: PPUSH
63617: CALL_OW 12
63621: PUSH
63622: LD_INT 0
63624: PPUSH
63625: LD_INT 3
63627: PPUSH
63628: CALL_OW 12
63632: PUSH
63633: LD_INT 0
63635: PUSH
63636: LD_INT 0
63638: PUSH
63639: EMPTY
63640: LIST
63641: LIST
63642: LIST
63643: LIST
63644: ST_TO_ADDR
// end ;
63645: LD_VAR 0 2
63649: RET
// export function PrepareTiger ( agressivity ) ; begin
63650: LD_INT 0
63652: PPUSH
// uc_side := 0 ;
63653: LD_ADDR_OWVAR 20
63657: PUSH
63658: LD_INT 0
63660: ST_TO_ADDR
// uc_nation := 0 ;
63661: LD_ADDR_OWVAR 21
63665: PUSH
63666: LD_INT 0
63668: ST_TO_ADDR
// hc_class := class_tiger ;
63669: LD_ADDR_OWVAR 28
63673: PUSH
63674: LD_INT 14
63676: ST_TO_ADDR
// hc_gallery :=  ;
63677: LD_ADDR_OWVAR 33
63681: PUSH
63682: LD_STRING 
63684: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
63685: LD_ADDR_OWVAR 35
63689: PUSH
63690: LD_VAR 0 1
63694: NEG
63695: PPUSH
63696: LD_VAR 0 1
63700: PPUSH
63701: CALL_OW 12
63705: ST_TO_ADDR
// end ;
63706: LD_VAR 0 2
63710: RET
// export function PrepareEnchidna ( ) ; begin
63711: LD_INT 0
63713: PPUSH
// uc_side := 0 ;
63714: LD_ADDR_OWVAR 20
63718: PUSH
63719: LD_INT 0
63721: ST_TO_ADDR
// uc_nation := 0 ;
63722: LD_ADDR_OWVAR 21
63726: PUSH
63727: LD_INT 0
63729: ST_TO_ADDR
// hc_class := class_baggie ;
63730: LD_ADDR_OWVAR 28
63734: PUSH
63735: LD_INT 13
63737: ST_TO_ADDR
// hc_gallery :=  ;
63738: LD_ADDR_OWVAR 33
63742: PUSH
63743: LD_STRING 
63745: ST_TO_ADDR
// end ;
63746: LD_VAR 0 1
63750: RET
// export function PrepareFrog ( ) ; begin
63751: LD_INT 0
63753: PPUSH
// uc_side := 0 ;
63754: LD_ADDR_OWVAR 20
63758: PUSH
63759: LD_INT 0
63761: ST_TO_ADDR
// uc_nation := 0 ;
63762: LD_ADDR_OWVAR 21
63766: PUSH
63767: LD_INT 0
63769: ST_TO_ADDR
// hc_class := class_frog ;
63770: LD_ADDR_OWVAR 28
63774: PUSH
63775: LD_INT 19
63777: ST_TO_ADDR
// hc_gallery :=  ;
63778: LD_ADDR_OWVAR 33
63782: PUSH
63783: LD_STRING 
63785: ST_TO_ADDR
// end ;
63786: LD_VAR 0 1
63790: RET
// export function PrepareFish ( ) ; begin
63791: LD_INT 0
63793: PPUSH
// uc_side := 0 ;
63794: LD_ADDR_OWVAR 20
63798: PUSH
63799: LD_INT 0
63801: ST_TO_ADDR
// uc_nation := 0 ;
63802: LD_ADDR_OWVAR 21
63806: PUSH
63807: LD_INT 0
63809: ST_TO_ADDR
// hc_class := class_fish ;
63810: LD_ADDR_OWVAR 28
63814: PUSH
63815: LD_INT 20
63817: ST_TO_ADDR
// hc_gallery :=  ;
63818: LD_ADDR_OWVAR 33
63822: PUSH
63823: LD_STRING 
63825: ST_TO_ADDR
// end ;
63826: LD_VAR 0 1
63830: RET
// export function PrepareBird ( ) ; begin
63831: LD_INT 0
63833: PPUSH
// uc_side := 0 ;
63834: LD_ADDR_OWVAR 20
63838: PUSH
63839: LD_INT 0
63841: ST_TO_ADDR
// uc_nation := 0 ;
63842: LD_ADDR_OWVAR 21
63846: PUSH
63847: LD_INT 0
63849: ST_TO_ADDR
// hc_class := class_phororhacos ;
63850: LD_ADDR_OWVAR 28
63854: PUSH
63855: LD_INT 18
63857: ST_TO_ADDR
// hc_gallery :=  ;
63858: LD_ADDR_OWVAR 33
63862: PUSH
63863: LD_STRING 
63865: ST_TO_ADDR
// end ;
63866: LD_VAR 0 1
63870: RET
// export function PrepareHorse ( ) ; begin
63871: LD_INT 0
63873: PPUSH
// uc_side := 0 ;
63874: LD_ADDR_OWVAR 20
63878: PUSH
63879: LD_INT 0
63881: ST_TO_ADDR
// uc_nation := 0 ;
63882: LD_ADDR_OWVAR 21
63886: PUSH
63887: LD_INT 0
63889: ST_TO_ADDR
// hc_class := class_horse ;
63890: LD_ADDR_OWVAR 28
63894: PUSH
63895: LD_INT 21
63897: ST_TO_ADDR
// hc_gallery :=  ;
63898: LD_ADDR_OWVAR 33
63902: PUSH
63903: LD_STRING 
63905: ST_TO_ADDR
// end ;
63906: LD_VAR 0 1
63910: RET
// export function PrepareMastodont ( ) ; begin
63911: LD_INT 0
63913: PPUSH
// uc_side := 0 ;
63914: LD_ADDR_OWVAR 20
63918: PUSH
63919: LD_INT 0
63921: ST_TO_ADDR
// uc_nation := 0 ;
63922: LD_ADDR_OWVAR 21
63926: PUSH
63927: LD_INT 0
63929: ST_TO_ADDR
// vc_chassis := class_mastodont ;
63930: LD_ADDR_OWVAR 37
63934: PUSH
63935: LD_INT 31
63937: ST_TO_ADDR
// vc_control := control_rider ;
63938: LD_ADDR_OWVAR 38
63942: PUSH
63943: LD_INT 4
63945: ST_TO_ADDR
// end ;
63946: LD_VAR 0 1
63950: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
63951: LD_INT 0
63953: PPUSH
63954: PPUSH
63955: PPUSH
// uc_side = 0 ;
63956: LD_ADDR_OWVAR 20
63960: PUSH
63961: LD_INT 0
63963: ST_TO_ADDR
// uc_nation = 0 ;
63964: LD_ADDR_OWVAR 21
63968: PUSH
63969: LD_INT 0
63971: ST_TO_ADDR
// InitHc_All ( ) ;
63972: CALL_OW 584
// InitVc ;
63976: CALL_OW 20
// if mastodonts then
63980: LD_VAR 0 6
63984: IFFALSE 64051
// for i = 1 to mastodonts do
63986: LD_ADDR_VAR 0 11
63990: PUSH
63991: DOUBLE
63992: LD_INT 1
63994: DEC
63995: ST_TO_ADDR
63996: LD_VAR 0 6
64000: PUSH
64001: FOR_TO
64002: IFFALSE 64049
// begin vc_chassis := 31 ;
64004: LD_ADDR_OWVAR 37
64008: PUSH
64009: LD_INT 31
64011: ST_TO_ADDR
// vc_control := control_rider ;
64012: LD_ADDR_OWVAR 38
64016: PUSH
64017: LD_INT 4
64019: ST_TO_ADDR
// animal := CreateVehicle ;
64020: LD_ADDR_VAR 0 12
64024: PUSH
64025: CALL_OW 45
64029: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64030: LD_VAR 0 12
64034: PPUSH
64035: LD_VAR 0 8
64039: PPUSH
64040: LD_INT 0
64042: PPUSH
64043: CALL 66179 0 3
// end ;
64047: GO 64001
64049: POP
64050: POP
// if horses then
64051: LD_VAR 0 5
64055: IFFALSE 64122
// for i = 1 to horses do
64057: LD_ADDR_VAR 0 11
64061: PUSH
64062: DOUBLE
64063: LD_INT 1
64065: DEC
64066: ST_TO_ADDR
64067: LD_VAR 0 5
64071: PUSH
64072: FOR_TO
64073: IFFALSE 64120
// begin hc_class := 21 ;
64075: LD_ADDR_OWVAR 28
64079: PUSH
64080: LD_INT 21
64082: ST_TO_ADDR
// hc_gallery :=  ;
64083: LD_ADDR_OWVAR 33
64087: PUSH
64088: LD_STRING 
64090: ST_TO_ADDR
// animal := CreateHuman ;
64091: LD_ADDR_VAR 0 12
64095: PUSH
64096: CALL_OW 44
64100: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64101: LD_VAR 0 12
64105: PPUSH
64106: LD_VAR 0 8
64110: PPUSH
64111: LD_INT 0
64113: PPUSH
64114: CALL 66179 0 3
// end ;
64118: GO 64072
64120: POP
64121: POP
// if birds then
64122: LD_VAR 0 1
64126: IFFALSE 64193
// for i = 1 to birds do
64128: LD_ADDR_VAR 0 11
64132: PUSH
64133: DOUBLE
64134: LD_INT 1
64136: DEC
64137: ST_TO_ADDR
64138: LD_VAR 0 1
64142: PUSH
64143: FOR_TO
64144: IFFALSE 64191
// begin hc_class := 18 ;
64146: LD_ADDR_OWVAR 28
64150: PUSH
64151: LD_INT 18
64153: ST_TO_ADDR
// hc_gallery =  ;
64154: LD_ADDR_OWVAR 33
64158: PUSH
64159: LD_STRING 
64161: ST_TO_ADDR
// animal := CreateHuman ;
64162: LD_ADDR_VAR 0 12
64166: PUSH
64167: CALL_OW 44
64171: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64172: LD_VAR 0 12
64176: PPUSH
64177: LD_VAR 0 8
64181: PPUSH
64182: LD_INT 0
64184: PPUSH
64185: CALL 66179 0 3
// end ;
64189: GO 64143
64191: POP
64192: POP
// if tigers then
64193: LD_VAR 0 2
64197: IFFALSE 64281
// for i = 1 to tigers do
64199: LD_ADDR_VAR 0 11
64203: PUSH
64204: DOUBLE
64205: LD_INT 1
64207: DEC
64208: ST_TO_ADDR
64209: LD_VAR 0 2
64213: PUSH
64214: FOR_TO
64215: IFFALSE 64279
// begin hc_class = class_tiger ;
64217: LD_ADDR_OWVAR 28
64221: PUSH
64222: LD_INT 14
64224: ST_TO_ADDR
// hc_gallery =  ;
64225: LD_ADDR_OWVAR 33
64229: PUSH
64230: LD_STRING 
64232: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
64233: LD_ADDR_OWVAR 35
64237: PUSH
64238: LD_INT 7
64240: NEG
64241: PPUSH
64242: LD_INT 7
64244: PPUSH
64245: CALL_OW 12
64249: ST_TO_ADDR
// animal := CreateHuman ;
64250: LD_ADDR_VAR 0 12
64254: PUSH
64255: CALL_OW 44
64259: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64260: LD_VAR 0 12
64264: PPUSH
64265: LD_VAR 0 8
64269: PPUSH
64270: LD_INT 0
64272: PPUSH
64273: CALL 66179 0 3
// end ;
64277: GO 64214
64279: POP
64280: POP
// if apemans then
64281: LD_VAR 0 3
64285: IFFALSE 64408
// for i = 1 to apemans do
64287: LD_ADDR_VAR 0 11
64291: PUSH
64292: DOUBLE
64293: LD_INT 1
64295: DEC
64296: ST_TO_ADDR
64297: LD_VAR 0 3
64301: PUSH
64302: FOR_TO
64303: IFFALSE 64406
// begin hc_class = class_apeman ;
64305: LD_ADDR_OWVAR 28
64309: PUSH
64310: LD_INT 12
64312: ST_TO_ADDR
// hc_gallery =  ;
64313: LD_ADDR_OWVAR 33
64317: PUSH
64318: LD_STRING 
64320: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
64321: LD_ADDR_OWVAR 35
64325: PUSH
64326: LD_INT 2
64328: NEG
64329: PPUSH
64330: LD_INT 2
64332: PPUSH
64333: CALL_OW 12
64337: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
64338: LD_ADDR_OWVAR 31
64342: PUSH
64343: LD_INT 1
64345: PPUSH
64346: LD_INT 3
64348: PPUSH
64349: CALL_OW 12
64353: PUSH
64354: LD_INT 1
64356: PPUSH
64357: LD_INT 3
64359: PPUSH
64360: CALL_OW 12
64364: PUSH
64365: LD_INT 0
64367: PUSH
64368: LD_INT 0
64370: PUSH
64371: EMPTY
64372: LIST
64373: LIST
64374: LIST
64375: LIST
64376: ST_TO_ADDR
// animal := CreateHuman ;
64377: LD_ADDR_VAR 0 12
64381: PUSH
64382: CALL_OW 44
64386: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64387: LD_VAR 0 12
64391: PPUSH
64392: LD_VAR 0 8
64396: PPUSH
64397: LD_INT 0
64399: PPUSH
64400: CALL 66179 0 3
// end ;
64404: GO 64302
64406: POP
64407: POP
// if enchidnas then
64408: LD_VAR 0 4
64412: IFFALSE 64479
// for i = 1 to enchidnas do
64414: LD_ADDR_VAR 0 11
64418: PUSH
64419: DOUBLE
64420: LD_INT 1
64422: DEC
64423: ST_TO_ADDR
64424: LD_VAR 0 4
64428: PUSH
64429: FOR_TO
64430: IFFALSE 64477
// begin hc_class = 13 ;
64432: LD_ADDR_OWVAR 28
64436: PUSH
64437: LD_INT 13
64439: ST_TO_ADDR
// hc_gallery =  ;
64440: LD_ADDR_OWVAR 33
64444: PUSH
64445: LD_STRING 
64447: ST_TO_ADDR
// animal := CreateHuman ;
64448: LD_ADDR_VAR 0 12
64452: PUSH
64453: CALL_OW 44
64457: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64458: LD_VAR 0 12
64462: PPUSH
64463: LD_VAR 0 8
64467: PPUSH
64468: LD_INT 0
64470: PPUSH
64471: CALL 66179 0 3
// end ;
64475: GO 64429
64477: POP
64478: POP
// if fishes then
64479: LD_VAR 0 7
64483: IFFALSE 64550
// for i = 1 to fishes do
64485: LD_ADDR_VAR 0 11
64489: PUSH
64490: DOUBLE
64491: LD_INT 1
64493: DEC
64494: ST_TO_ADDR
64495: LD_VAR 0 7
64499: PUSH
64500: FOR_TO
64501: IFFALSE 64548
// begin hc_class = 20 ;
64503: LD_ADDR_OWVAR 28
64507: PUSH
64508: LD_INT 20
64510: ST_TO_ADDR
// hc_gallery =  ;
64511: LD_ADDR_OWVAR 33
64515: PUSH
64516: LD_STRING 
64518: ST_TO_ADDR
// animal := CreateHuman ;
64519: LD_ADDR_VAR 0 12
64523: PUSH
64524: CALL_OW 44
64528: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
64529: LD_VAR 0 12
64533: PPUSH
64534: LD_VAR 0 9
64538: PPUSH
64539: LD_INT 0
64541: PPUSH
64542: CALL 66179 0 3
// end ;
64546: GO 64500
64548: POP
64549: POP
// end ;
64550: LD_VAR 0 10
64554: RET
// export function WantHeal ( sci , unit ) ; begin
64555: LD_INT 0
64557: PPUSH
// if GetTaskList ( sci ) > 0 then
64558: LD_VAR 0 1
64562: PPUSH
64563: CALL_OW 437
64567: PUSH
64568: LD_INT 0
64570: GREATER
64571: IFFALSE 64641
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
64573: LD_VAR 0 1
64577: PPUSH
64578: CALL_OW 437
64582: PUSH
64583: LD_INT 1
64585: ARRAY
64586: PUSH
64587: LD_INT 1
64589: ARRAY
64590: PUSH
64591: LD_STRING l
64593: EQUAL
64594: PUSH
64595: LD_VAR 0 1
64599: PPUSH
64600: CALL_OW 437
64604: PUSH
64605: LD_INT 1
64607: ARRAY
64608: PUSH
64609: LD_INT 4
64611: ARRAY
64612: PUSH
64613: LD_VAR 0 2
64617: EQUAL
64618: AND
64619: IFFALSE 64631
// result := true else
64621: LD_ADDR_VAR 0 3
64625: PUSH
64626: LD_INT 1
64628: ST_TO_ADDR
64629: GO 64639
// result := false ;
64631: LD_ADDR_VAR 0 3
64635: PUSH
64636: LD_INT 0
64638: ST_TO_ADDR
// end else
64639: GO 64649
// result := false ;
64641: LD_ADDR_VAR 0 3
64645: PUSH
64646: LD_INT 0
64648: ST_TO_ADDR
// end ;
64649: LD_VAR 0 3
64653: RET
// export function HealTarget ( sci ) ; begin
64654: LD_INT 0
64656: PPUSH
// if not sci then
64657: LD_VAR 0 1
64661: NOT
64662: IFFALSE 64666
// exit ;
64664: GO 64731
// result := 0 ;
64666: LD_ADDR_VAR 0 2
64670: PUSH
64671: LD_INT 0
64673: ST_TO_ADDR
// if GetTaskList ( sci ) then
64674: LD_VAR 0 1
64678: PPUSH
64679: CALL_OW 437
64683: IFFALSE 64731
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
64685: LD_VAR 0 1
64689: PPUSH
64690: CALL_OW 437
64694: PUSH
64695: LD_INT 1
64697: ARRAY
64698: PUSH
64699: LD_INT 1
64701: ARRAY
64702: PUSH
64703: LD_STRING l
64705: EQUAL
64706: IFFALSE 64731
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
64708: LD_ADDR_VAR 0 2
64712: PUSH
64713: LD_VAR 0 1
64717: PPUSH
64718: CALL_OW 437
64722: PUSH
64723: LD_INT 1
64725: ARRAY
64726: PUSH
64727: LD_INT 4
64729: ARRAY
64730: ST_TO_ADDR
// end ;
64731: LD_VAR 0 2
64735: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
64736: LD_INT 0
64738: PPUSH
64739: PPUSH
64740: PPUSH
64741: PPUSH
// if not base_units then
64742: LD_VAR 0 1
64746: NOT
64747: IFFALSE 64751
// exit ;
64749: GO 64838
// result := false ;
64751: LD_ADDR_VAR 0 2
64755: PUSH
64756: LD_INT 0
64758: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
64759: LD_ADDR_VAR 0 5
64763: PUSH
64764: LD_VAR 0 1
64768: PPUSH
64769: LD_INT 21
64771: PUSH
64772: LD_INT 3
64774: PUSH
64775: EMPTY
64776: LIST
64777: LIST
64778: PPUSH
64779: CALL_OW 72
64783: ST_TO_ADDR
// if not tmp then
64784: LD_VAR 0 5
64788: NOT
64789: IFFALSE 64793
// exit ;
64791: GO 64838
// for i in tmp do
64793: LD_ADDR_VAR 0 3
64797: PUSH
64798: LD_VAR 0 5
64802: PUSH
64803: FOR_IN
64804: IFFALSE 64836
// begin result := EnemyInRange ( i , 22 ) ;
64806: LD_ADDR_VAR 0 2
64810: PUSH
64811: LD_VAR 0 3
64815: PPUSH
64816: LD_INT 22
64818: PPUSH
64819: CALL 62436 0 2
64823: ST_TO_ADDR
// if result then
64824: LD_VAR 0 2
64828: IFFALSE 64834
// exit ;
64830: POP
64831: POP
64832: GO 64838
// end ;
64834: GO 64803
64836: POP
64837: POP
// end ;
64838: LD_VAR 0 2
64842: RET
// export function FilterByTag ( units , tag ) ; begin
64843: LD_INT 0
64845: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
64846: LD_ADDR_VAR 0 3
64850: PUSH
64851: LD_VAR 0 1
64855: PPUSH
64856: LD_INT 120
64858: PUSH
64859: LD_VAR 0 2
64863: PUSH
64864: EMPTY
64865: LIST
64866: LIST
64867: PPUSH
64868: CALL_OW 72
64872: ST_TO_ADDR
// end ;
64873: LD_VAR 0 3
64877: RET
// export function IsDriver ( un ) ; begin
64878: LD_INT 0
64880: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
64881: LD_ADDR_VAR 0 2
64885: PUSH
64886: LD_VAR 0 1
64890: PUSH
64891: LD_INT 55
64893: PUSH
64894: EMPTY
64895: LIST
64896: PPUSH
64897: CALL_OW 69
64901: IN
64902: ST_TO_ADDR
// end ;
64903: LD_VAR 0 2
64907: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
64908: LD_INT 0
64910: PPUSH
64911: PPUSH
// list := [ ] ;
64912: LD_ADDR_VAR 0 5
64916: PUSH
64917: EMPTY
64918: ST_TO_ADDR
// case d of 0 :
64919: LD_VAR 0 3
64923: PUSH
64924: LD_INT 0
64926: DOUBLE
64927: EQUAL
64928: IFTRUE 64932
64930: GO 65065
64932: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
64933: LD_ADDR_VAR 0 5
64937: PUSH
64938: LD_VAR 0 1
64942: PUSH
64943: LD_INT 4
64945: MINUS
64946: PUSH
64947: LD_VAR 0 2
64951: PUSH
64952: LD_INT 4
64954: MINUS
64955: PUSH
64956: LD_INT 2
64958: PUSH
64959: EMPTY
64960: LIST
64961: LIST
64962: LIST
64963: PUSH
64964: LD_VAR 0 1
64968: PUSH
64969: LD_INT 3
64971: MINUS
64972: PUSH
64973: LD_VAR 0 2
64977: PUSH
64978: LD_INT 1
64980: PUSH
64981: EMPTY
64982: LIST
64983: LIST
64984: LIST
64985: PUSH
64986: LD_VAR 0 1
64990: PUSH
64991: LD_INT 4
64993: PLUS
64994: PUSH
64995: LD_VAR 0 2
64999: PUSH
65000: LD_INT 4
65002: PUSH
65003: EMPTY
65004: LIST
65005: LIST
65006: LIST
65007: PUSH
65008: LD_VAR 0 1
65012: PUSH
65013: LD_INT 3
65015: PLUS
65016: PUSH
65017: LD_VAR 0 2
65021: PUSH
65022: LD_INT 3
65024: PLUS
65025: PUSH
65026: LD_INT 5
65028: PUSH
65029: EMPTY
65030: LIST
65031: LIST
65032: LIST
65033: PUSH
65034: LD_VAR 0 1
65038: PUSH
65039: LD_VAR 0 2
65043: PUSH
65044: LD_INT 4
65046: PLUS
65047: PUSH
65048: LD_INT 0
65050: PUSH
65051: EMPTY
65052: LIST
65053: LIST
65054: LIST
65055: PUSH
65056: EMPTY
65057: LIST
65058: LIST
65059: LIST
65060: LIST
65061: LIST
65062: ST_TO_ADDR
// end ; 1 :
65063: GO 65763
65065: LD_INT 1
65067: DOUBLE
65068: EQUAL
65069: IFTRUE 65073
65071: GO 65206
65073: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
65074: LD_ADDR_VAR 0 5
65078: PUSH
65079: LD_VAR 0 1
65083: PUSH
65084: LD_VAR 0 2
65088: PUSH
65089: LD_INT 4
65091: MINUS
65092: PUSH
65093: LD_INT 3
65095: PUSH
65096: EMPTY
65097: LIST
65098: LIST
65099: LIST
65100: PUSH
65101: LD_VAR 0 1
65105: PUSH
65106: LD_INT 3
65108: MINUS
65109: PUSH
65110: LD_VAR 0 2
65114: PUSH
65115: LD_INT 3
65117: MINUS
65118: PUSH
65119: LD_INT 2
65121: PUSH
65122: EMPTY
65123: LIST
65124: LIST
65125: LIST
65126: PUSH
65127: LD_VAR 0 1
65131: PUSH
65132: LD_INT 4
65134: MINUS
65135: PUSH
65136: LD_VAR 0 2
65140: PUSH
65141: LD_INT 1
65143: PUSH
65144: EMPTY
65145: LIST
65146: LIST
65147: LIST
65148: PUSH
65149: LD_VAR 0 1
65153: PUSH
65154: LD_VAR 0 2
65158: PUSH
65159: LD_INT 3
65161: PLUS
65162: PUSH
65163: LD_INT 0
65165: PUSH
65166: EMPTY
65167: LIST
65168: LIST
65169: LIST
65170: PUSH
65171: LD_VAR 0 1
65175: PUSH
65176: LD_INT 4
65178: PLUS
65179: PUSH
65180: LD_VAR 0 2
65184: PUSH
65185: LD_INT 4
65187: PLUS
65188: PUSH
65189: LD_INT 5
65191: PUSH
65192: EMPTY
65193: LIST
65194: LIST
65195: LIST
65196: PUSH
65197: EMPTY
65198: LIST
65199: LIST
65200: LIST
65201: LIST
65202: LIST
65203: ST_TO_ADDR
// end ; 2 :
65204: GO 65763
65206: LD_INT 2
65208: DOUBLE
65209: EQUAL
65210: IFTRUE 65214
65212: GO 65343
65214: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
65215: LD_ADDR_VAR 0 5
65219: PUSH
65220: LD_VAR 0 1
65224: PUSH
65225: LD_VAR 0 2
65229: PUSH
65230: LD_INT 3
65232: MINUS
65233: PUSH
65234: LD_INT 3
65236: PUSH
65237: EMPTY
65238: LIST
65239: LIST
65240: LIST
65241: PUSH
65242: LD_VAR 0 1
65246: PUSH
65247: LD_INT 4
65249: PLUS
65250: PUSH
65251: LD_VAR 0 2
65255: PUSH
65256: LD_INT 4
65258: PUSH
65259: EMPTY
65260: LIST
65261: LIST
65262: LIST
65263: PUSH
65264: LD_VAR 0 1
65268: PUSH
65269: LD_VAR 0 2
65273: PUSH
65274: LD_INT 4
65276: PLUS
65277: PUSH
65278: LD_INT 0
65280: PUSH
65281: EMPTY
65282: LIST
65283: LIST
65284: LIST
65285: PUSH
65286: LD_VAR 0 1
65290: PUSH
65291: LD_INT 3
65293: MINUS
65294: PUSH
65295: LD_VAR 0 2
65299: PUSH
65300: LD_INT 1
65302: PUSH
65303: EMPTY
65304: LIST
65305: LIST
65306: LIST
65307: PUSH
65308: LD_VAR 0 1
65312: PUSH
65313: LD_INT 4
65315: MINUS
65316: PUSH
65317: LD_VAR 0 2
65321: PUSH
65322: LD_INT 4
65324: MINUS
65325: PUSH
65326: LD_INT 2
65328: PUSH
65329: EMPTY
65330: LIST
65331: LIST
65332: LIST
65333: PUSH
65334: EMPTY
65335: LIST
65336: LIST
65337: LIST
65338: LIST
65339: LIST
65340: ST_TO_ADDR
// end ; 3 :
65341: GO 65763
65343: LD_INT 3
65345: DOUBLE
65346: EQUAL
65347: IFTRUE 65351
65349: GO 65484
65351: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
65352: LD_ADDR_VAR 0 5
65356: PUSH
65357: LD_VAR 0 1
65361: PUSH
65362: LD_INT 3
65364: PLUS
65365: PUSH
65366: LD_VAR 0 2
65370: PUSH
65371: LD_INT 4
65373: PUSH
65374: EMPTY
65375: LIST
65376: LIST
65377: LIST
65378: PUSH
65379: LD_VAR 0 1
65383: PUSH
65384: LD_INT 4
65386: PLUS
65387: PUSH
65388: LD_VAR 0 2
65392: PUSH
65393: LD_INT 4
65395: PLUS
65396: PUSH
65397: LD_INT 5
65399: PUSH
65400: EMPTY
65401: LIST
65402: LIST
65403: LIST
65404: PUSH
65405: LD_VAR 0 1
65409: PUSH
65410: LD_INT 4
65412: MINUS
65413: PUSH
65414: LD_VAR 0 2
65418: PUSH
65419: LD_INT 1
65421: PUSH
65422: EMPTY
65423: LIST
65424: LIST
65425: LIST
65426: PUSH
65427: LD_VAR 0 1
65431: PUSH
65432: LD_VAR 0 2
65436: PUSH
65437: LD_INT 4
65439: MINUS
65440: PUSH
65441: LD_INT 3
65443: PUSH
65444: EMPTY
65445: LIST
65446: LIST
65447: LIST
65448: PUSH
65449: LD_VAR 0 1
65453: PUSH
65454: LD_INT 3
65456: MINUS
65457: PUSH
65458: LD_VAR 0 2
65462: PUSH
65463: LD_INT 3
65465: MINUS
65466: PUSH
65467: LD_INT 2
65469: PUSH
65470: EMPTY
65471: LIST
65472: LIST
65473: LIST
65474: PUSH
65475: EMPTY
65476: LIST
65477: LIST
65478: LIST
65479: LIST
65480: LIST
65481: ST_TO_ADDR
// end ; 4 :
65482: GO 65763
65484: LD_INT 4
65486: DOUBLE
65487: EQUAL
65488: IFTRUE 65492
65490: GO 65625
65492: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
65493: LD_ADDR_VAR 0 5
65497: PUSH
65498: LD_VAR 0 1
65502: PUSH
65503: LD_VAR 0 2
65507: PUSH
65508: LD_INT 4
65510: PLUS
65511: PUSH
65512: LD_INT 0
65514: PUSH
65515: EMPTY
65516: LIST
65517: LIST
65518: LIST
65519: PUSH
65520: LD_VAR 0 1
65524: PUSH
65525: LD_INT 3
65527: PLUS
65528: PUSH
65529: LD_VAR 0 2
65533: PUSH
65534: LD_INT 3
65536: PLUS
65537: PUSH
65538: LD_INT 5
65540: PUSH
65541: EMPTY
65542: LIST
65543: LIST
65544: LIST
65545: PUSH
65546: LD_VAR 0 1
65550: PUSH
65551: LD_INT 4
65553: PLUS
65554: PUSH
65555: LD_VAR 0 2
65559: PUSH
65560: LD_INT 4
65562: PUSH
65563: EMPTY
65564: LIST
65565: LIST
65566: LIST
65567: PUSH
65568: LD_VAR 0 1
65572: PUSH
65573: LD_VAR 0 2
65577: PUSH
65578: LD_INT 3
65580: MINUS
65581: PUSH
65582: LD_INT 3
65584: PUSH
65585: EMPTY
65586: LIST
65587: LIST
65588: LIST
65589: PUSH
65590: LD_VAR 0 1
65594: PUSH
65595: LD_INT 4
65597: MINUS
65598: PUSH
65599: LD_VAR 0 2
65603: PUSH
65604: LD_INT 4
65606: MINUS
65607: PUSH
65608: LD_INT 2
65610: PUSH
65611: EMPTY
65612: LIST
65613: LIST
65614: LIST
65615: PUSH
65616: EMPTY
65617: LIST
65618: LIST
65619: LIST
65620: LIST
65621: LIST
65622: ST_TO_ADDR
// end ; 5 :
65623: GO 65763
65625: LD_INT 5
65627: DOUBLE
65628: EQUAL
65629: IFTRUE 65633
65631: GO 65762
65633: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
65634: LD_ADDR_VAR 0 5
65638: PUSH
65639: LD_VAR 0 1
65643: PUSH
65644: LD_INT 4
65646: MINUS
65647: PUSH
65648: LD_VAR 0 2
65652: PUSH
65653: LD_INT 1
65655: PUSH
65656: EMPTY
65657: LIST
65658: LIST
65659: LIST
65660: PUSH
65661: LD_VAR 0 1
65665: PUSH
65666: LD_VAR 0 2
65670: PUSH
65671: LD_INT 4
65673: MINUS
65674: PUSH
65675: LD_INT 3
65677: PUSH
65678: EMPTY
65679: LIST
65680: LIST
65681: LIST
65682: PUSH
65683: LD_VAR 0 1
65687: PUSH
65688: LD_INT 4
65690: PLUS
65691: PUSH
65692: LD_VAR 0 2
65696: PUSH
65697: LD_INT 4
65699: PLUS
65700: PUSH
65701: LD_INT 5
65703: PUSH
65704: EMPTY
65705: LIST
65706: LIST
65707: LIST
65708: PUSH
65709: LD_VAR 0 1
65713: PUSH
65714: LD_INT 3
65716: PLUS
65717: PUSH
65718: LD_VAR 0 2
65722: PUSH
65723: LD_INT 4
65725: PUSH
65726: EMPTY
65727: LIST
65728: LIST
65729: LIST
65730: PUSH
65731: LD_VAR 0 1
65735: PUSH
65736: LD_VAR 0 2
65740: PUSH
65741: LD_INT 3
65743: PLUS
65744: PUSH
65745: LD_INT 0
65747: PUSH
65748: EMPTY
65749: LIST
65750: LIST
65751: LIST
65752: PUSH
65753: EMPTY
65754: LIST
65755: LIST
65756: LIST
65757: LIST
65758: LIST
65759: ST_TO_ADDR
// end ; end ;
65760: GO 65763
65762: POP
// result := list ;
65763: LD_ADDR_VAR 0 4
65767: PUSH
65768: LD_VAR 0 5
65772: ST_TO_ADDR
// end ;
65773: LD_VAR 0 4
65777: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
65778: LD_INT 0
65780: PPUSH
65781: PPUSH
65782: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
65783: LD_VAR 0 1
65787: NOT
65788: PUSH
65789: LD_VAR 0 2
65793: PUSH
65794: LD_INT 1
65796: PUSH
65797: LD_INT 2
65799: PUSH
65800: LD_INT 3
65802: PUSH
65803: LD_INT 4
65805: PUSH
65806: EMPTY
65807: LIST
65808: LIST
65809: LIST
65810: LIST
65811: IN
65812: NOT
65813: OR
65814: IFFALSE 65818
// exit ;
65816: GO 65901
// tmp := [ ] ;
65818: LD_ADDR_VAR 0 5
65822: PUSH
65823: EMPTY
65824: ST_TO_ADDR
// for i in units do
65825: LD_ADDR_VAR 0 4
65829: PUSH
65830: LD_VAR 0 1
65834: PUSH
65835: FOR_IN
65836: IFFALSE 65870
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
65838: LD_ADDR_VAR 0 5
65842: PUSH
65843: LD_VAR 0 5
65847: PPUSH
65848: LD_VAR 0 4
65852: PPUSH
65853: LD_VAR 0 2
65857: PPUSH
65858: CALL_OW 259
65862: PPUSH
65863: CALL 67274 0 2
65867: ST_TO_ADDR
65868: GO 65835
65870: POP
65871: POP
// if not tmp then
65872: LD_VAR 0 5
65876: NOT
65877: IFFALSE 65881
// exit ;
65879: GO 65901
// result := SortListByListDesc ( units , tmp ) ;
65881: LD_ADDR_VAR 0 3
65885: PUSH
65886: LD_VAR 0 1
65890: PPUSH
65891: LD_VAR 0 5
65895: PPUSH
65896: CALL_OW 77
65900: ST_TO_ADDR
// end ;
65901: LD_VAR 0 3
65905: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
65906: LD_INT 0
65908: PPUSH
65909: PPUSH
65910: PPUSH
// result := false ;
65911: LD_ADDR_VAR 0 3
65915: PUSH
65916: LD_INT 0
65918: ST_TO_ADDR
// if not building then
65919: LD_VAR 0 2
65923: NOT
65924: IFFALSE 65928
// exit ;
65926: GO 66066
// x := GetX ( building ) ;
65928: LD_ADDR_VAR 0 4
65932: PUSH
65933: LD_VAR 0 2
65937: PPUSH
65938: CALL_OW 250
65942: ST_TO_ADDR
// y := GetY ( building ) ;
65943: LD_ADDR_VAR 0 5
65947: PUSH
65948: LD_VAR 0 2
65952: PPUSH
65953: CALL_OW 251
65957: ST_TO_ADDR
// if not x or not y then
65958: LD_VAR 0 4
65962: NOT
65963: PUSH
65964: LD_VAR 0 5
65968: NOT
65969: OR
65970: IFFALSE 65974
// exit ;
65972: GO 66066
// if GetTaskList ( unit ) then
65974: LD_VAR 0 1
65978: PPUSH
65979: CALL_OW 437
65983: IFFALSE 66066
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
65985: LD_STRING e
65987: PUSH
65988: LD_VAR 0 1
65992: PPUSH
65993: CALL_OW 437
65997: PUSH
65998: LD_INT 1
66000: ARRAY
66001: PUSH
66002: LD_INT 1
66004: ARRAY
66005: EQUAL
66006: PUSH
66007: LD_VAR 0 4
66011: PUSH
66012: LD_VAR 0 1
66016: PPUSH
66017: CALL_OW 437
66021: PUSH
66022: LD_INT 1
66024: ARRAY
66025: PUSH
66026: LD_INT 2
66028: ARRAY
66029: EQUAL
66030: AND
66031: PUSH
66032: LD_VAR 0 5
66036: PUSH
66037: LD_VAR 0 1
66041: PPUSH
66042: CALL_OW 437
66046: PUSH
66047: LD_INT 1
66049: ARRAY
66050: PUSH
66051: LD_INT 3
66053: ARRAY
66054: EQUAL
66055: AND
66056: IFFALSE 66066
// result := true end ;
66058: LD_ADDR_VAR 0 3
66062: PUSH
66063: LD_INT 1
66065: ST_TO_ADDR
// end ;
66066: LD_VAR 0 3
66070: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
66071: LD_INT 0
66073: PPUSH
// result := false ;
66074: LD_ADDR_VAR 0 4
66078: PUSH
66079: LD_INT 0
66081: ST_TO_ADDR
// if GetTaskList ( unit ) then
66082: LD_VAR 0 1
66086: PPUSH
66087: CALL_OW 437
66091: IFFALSE 66174
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
66093: LD_STRING M
66095: PUSH
66096: LD_VAR 0 1
66100: PPUSH
66101: CALL_OW 437
66105: PUSH
66106: LD_INT 1
66108: ARRAY
66109: PUSH
66110: LD_INT 1
66112: ARRAY
66113: EQUAL
66114: PUSH
66115: LD_VAR 0 2
66119: PUSH
66120: LD_VAR 0 1
66124: PPUSH
66125: CALL_OW 437
66129: PUSH
66130: LD_INT 1
66132: ARRAY
66133: PUSH
66134: LD_INT 2
66136: ARRAY
66137: EQUAL
66138: AND
66139: PUSH
66140: LD_VAR 0 3
66144: PUSH
66145: LD_VAR 0 1
66149: PPUSH
66150: CALL_OW 437
66154: PUSH
66155: LD_INT 1
66157: ARRAY
66158: PUSH
66159: LD_INT 3
66161: ARRAY
66162: EQUAL
66163: AND
66164: IFFALSE 66174
// result := true ;
66166: LD_ADDR_VAR 0 4
66170: PUSH
66171: LD_INT 1
66173: ST_TO_ADDR
// end ; end ;
66174: LD_VAR 0 4
66178: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
66179: LD_INT 0
66181: PPUSH
66182: PPUSH
66183: PPUSH
66184: PPUSH
// if not unit or not area then
66185: LD_VAR 0 1
66189: NOT
66190: PUSH
66191: LD_VAR 0 2
66195: NOT
66196: OR
66197: IFFALSE 66201
// exit ;
66199: GO 66377
// tmp := AreaToList ( area , i ) ;
66201: LD_ADDR_VAR 0 6
66205: PUSH
66206: LD_VAR 0 2
66210: PPUSH
66211: LD_VAR 0 5
66215: PPUSH
66216: CALL_OW 517
66220: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
66221: LD_ADDR_VAR 0 5
66225: PUSH
66226: DOUBLE
66227: LD_INT 1
66229: DEC
66230: ST_TO_ADDR
66231: LD_VAR 0 6
66235: PUSH
66236: LD_INT 1
66238: ARRAY
66239: PUSH
66240: FOR_TO
66241: IFFALSE 66375
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
66243: LD_ADDR_VAR 0 7
66247: PUSH
66248: LD_VAR 0 6
66252: PUSH
66253: LD_INT 1
66255: ARRAY
66256: PUSH
66257: LD_VAR 0 5
66261: ARRAY
66262: PUSH
66263: LD_VAR 0 6
66267: PUSH
66268: LD_INT 2
66270: ARRAY
66271: PUSH
66272: LD_VAR 0 5
66276: ARRAY
66277: PUSH
66278: EMPTY
66279: LIST
66280: LIST
66281: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
66282: LD_INT 92
66284: PUSH
66285: LD_VAR 0 7
66289: PUSH
66290: LD_INT 1
66292: ARRAY
66293: PUSH
66294: LD_VAR 0 7
66298: PUSH
66299: LD_INT 2
66301: ARRAY
66302: PUSH
66303: LD_INT 2
66305: PUSH
66306: EMPTY
66307: LIST
66308: LIST
66309: LIST
66310: LIST
66311: PPUSH
66312: CALL_OW 69
66316: PUSH
66317: LD_INT 0
66319: EQUAL
66320: IFFALSE 66373
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
66322: LD_VAR 0 1
66326: PPUSH
66327: LD_VAR 0 7
66331: PUSH
66332: LD_INT 1
66334: ARRAY
66335: PPUSH
66336: LD_VAR 0 7
66340: PUSH
66341: LD_INT 2
66343: ARRAY
66344: PPUSH
66345: LD_VAR 0 3
66349: PPUSH
66350: CALL_OW 48
// result := IsPlaced ( unit ) ;
66354: LD_ADDR_VAR 0 4
66358: PUSH
66359: LD_VAR 0 1
66363: PPUSH
66364: CALL_OW 305
66368: ST_TO_ADDR
// exit ;
66369: POP
66370: POP
66371: GO 66377
// end ; end ;
66373: GO 66240
66375: POP
66376: POP
// end ;
66377: LD_VAR 0 4
66381: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
66382: LD_INT 0
66384: PPUSH
66385: PPUSH
66386: PPUSH
// if not side or side > 8 then
66387: LD_VAR 0 1
66391: NOT
66392: PUSH
66393: LD_VAR 0 1
66397: PUSH
66398: LD_INT 8
66400: GREATER
66401: OR
66402: IFFALSE 66406
// exit ;
66404: GO 66593
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
66406: LD_ADDR_VAR 0 4
66410: PUSH
66411: LD_INT 22
66413: PUSH
66414: LD_VAR 0 1
66418: PUSH
66419: EMPTY
66420: LIST
66421: LIST
66422: PUSH
66423: LD_INT 21
66425: PUSH
66426: LD_INT 3
66428: PUSH
66429: EMPTY
66430: LIST
66431: LIST
66432: PUSH
66433: EMPTY
66434: LIST
66435: LIST
66436: PPUSH
66437: CALL_OW 69
66441: ST_TO_ADDR
// if not tmp then
66442: LD_VAR 0 4
66446: NOT
66447: IFFALSE 66451
// exit ;
66449: GO 66593
// enable_addtolog := true ;
66451: LD_ADDR_OWVAR 81
66455: PUSH
66456: LD_INT 1
66458: ST_TO_ADDR
// AddToLog ( [ ) ;
66459: LD_STRING [
66461: PPUSH
66462: CALL_OW 561
// for i in tmp do
66466: LD_ADDR_VAR 0 3
66470: PUSH
66471: LD_VAR 0 4
66475: PUSH
66476: FOR_IN
66477: IFFALSE 66584
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
66479: LD_STRING [
66481: PUSH
66482: LD_VAR 0 3
66486: PPUSH
66487: CALL_OW 266
66491: STR
66492: PUSH
66493: LD_STRING , 
66495: STR
66496: PUSH
66497: LD_VAR 0 3
66501: PPUSH
66502: CALL_OW 250
66506: STR
66507: PUSH
66508: LD_STRING , 
66510: STR
66511: PUSH
66512: LD_VAR 0 3
66516: PPUSH
66517: CALL_OW 251
66521: STR
66522: PUSH
66523: LD_STRING , 
66525: STR
66526: PUSH
66527: LD_VAR 0 3
66531: PPUSH
66532: CALL_OW 254
66536: STR
66537: PUSH
66538: LD_STRING , 
66540: STR
66541: PUSH
66542: LD_VAR 0 3
66546: PPUSH
66547: LD_INT 1
66549: PPUSH
66550: CALL_OW 268
66554: STR
66555: PUSH
66556: LD_STRING , 
66558: STR
66559: PUSH
66560: LD_VAR 0 3
66564: PPUSH
66565: LD_INT 2
66567: PPUSH
66568: CALL_OW 268
66572: STR
66573: PUSH
66574: LD_STRING ],
66576: STR
66577: PPUSH
66578: CALL_OW 561
// end ;
66582: GO 66476
66584: POP
66585: POP
// AddToLog ( ]; ) ;
66586: LD_STRING ];
66588: PPUSH
66589: CALL_OW 561
// end ;
66593: LD_VAR 0 2
66597: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
66598: LD_INT 0
66600: PPUSH
66601: PPUSH
66602: PPUSH
66603: PPUSH
66604: PPUSH
// if not area or not rate or not max then
66605: LD_VAR 0 1
66609: NOT
66610: PUSH
66611: LD_VAR 0 2
66615: NOT
66616: OR
66617: PUSH
66618: LD_VAR 0 4
66622: NOT
66623: OR
66624: IFFALSE 66628
// exit ;
66626: GO 66817
// while 1 do
66628: LD_INT 1
66630: IFFALSE 66817
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
66632: LD_ADDR_VAR 0 9
66636: PUSH
66637: LD_VAR 0 1
66641: PPUSH
66642: LD_INT 1
66644: PPUSH
66645: CALL_OW 287
66649: PUSH
66650: LD_INT 10
66652: MUL
66653: ST_TO_ADDR
// r := rate / 10 ;
66654: LD_ADDR_VAR 0 7
66658: PUSH
66659: LD_VAR 0 2
66663: PUSH
66664: LD_INT 10
66666: DIVREAL
66667: ST_TO_ADDR
// time := 1 1$00 ;
66668: LD_ADDR_VAR 0 8
66672: PUSH
66673: LD_INT 2100
66675: ST_TO_ADDR
// if amount < min then
66676: LD_VAR 0 9
66680: PUSH
66681: LD_VAR 0 3
66685: LESS
66686: IFFALSE 66704
// r := r * 2 else
66688: LD_ADDR_VAR 0 7
66692: PUSH
66693: LD_VAR 0 7
66697: PUSH
66698: LD_INT 2
66700: MUL
66701: ST_TO_ADDR
66702: GO 66730
// if amount > max then
66704: LD_VAR 0 9
66708: PUSH
66709: LD_VAR 0 4
66713: GREATER
66714: IFFALSE 66730
// r := r / 2 ;
66716: LD_ADDR_VAR 0 7
66720: PUSH
66721: LD_VAR 0 7
66725: PUSH
66726: LD_INT 2
66728: DIVREAL
66729: ST_TO_ADDR
// time := time / r ;
66730: LD_ADDR_VAR 0 8
66734: PUSH
66735: LD_VAR 0 8
66739: PUSH
66740: LD_VAR 0 7
66744: DIVREAL
66745: ST_TO_ADDR
// if time < 0 then
66746: LD_VAR 0 8
66750: PUSH
66751: LD_INT 0
66753: LESS
66754: IFFALSE 66771
// time := time * - 1 ;
66756: LD_ADDR_VAR 0 8
66760: PUSH
66761: LD_VAR 0 8
66765: PUSH
66766: LD_INT 1
66768: NEG
66769: MUL
66770: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
66771: LD_VAR 0 8
66775: PUSH
66776: LD_INT 35
66778: PPUSH
66779: LD_INT 875
66781: PPUSH
66782: CALL_OW 12
66786: PLUS
66787: PPUSH
66788: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
66792: LD_INT 1
66794: PPUSH
66795: LD_INT 5
66797: PPUSH
66798: CALL_OW 12
66802: PPUSH
66803: LD_VAR 0 1
66807: PPUSH
66808: LD_INT 1
66810: PPUSH
66811: CALL_OW 55
// end ;
66815: GO 66628
// end ;
66817: LD_VAR 0 5
66821: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
66822: LD_INT 0
66824: PPUSH
66825: PPUSH
66826: PPUSH
66827: PPUSH
66828: PPUSH
66829: PPUSH
66830: PPUSH
66831: PPUSH
// if not turrets or not factories then
66832: LD_VAR 0 1
66836: NOT
66837: PUSH
66838: LD_VAR 0 2
66842: NOT
66843: OR
66844: IFFALSE 66848
// exit ;
66846: GO 67155
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
66848: LD_ADDR_VAR 0 10
66852: PUSH
66853: LD_INT 5
66855: PUSH
66856: LD_INT 6
66858: PUSH
66859: EMPTY
66860: LIST
66861: LIST
66862: PUSH
66863: LD_INT 2
66865: PUSH
66866: LD_INT 4
66868: PUSH
66869: EMPTY
66870: LIST
66871: LIST
66872: PUSH
66873: LD_INT 3
66875: PUSH
66876: LD_INT 5
66878: PUSH
66879: EMPTY
66880: LIST
66881: LIST
66882: PUSH
66883: EMPTY
66884: LIST
66885: LIST
66886: LIST
66887: PUSH
66888: LD_INT 24
66890: PUSH
66891: LD_INT 25
66893: PUSH
66894: EMPTY
66895: LIST
66896: LIST
66897: PUSH
66898: LD_INT 23
66900: PUSH
66901: LD_INT 27
66903: PUSH
66904: EMPTY
66905: LIST
66906: LIST
66907: PUSH
66908: EMPTY
66909: LIST
66910: LIST
66911: PUSH
66912: LD_INT 42
66914: PUSH
66915: LD_INT 43
66917: PUSH
66918: EMPTY
66919: LIST
66920: LIST
66921: PUSH
66922: LD_INT 44
66924: PUSH
66925: LD_INT 46
66927: PUSH
66928: EMPTY
66929: LIST
66930: LIST
66931: PUSH
66932: LD_INT 45
66934: PUSH
66935: LD_INT 47
66937: PUSH
66938: EMPTY
66939: LIST
66940: LIST
66941: PUSH
66942: EMPTY
66943: LIST
66944: LIST
66945: LIST
66946: PUSH
66947: EMPTY
66948: LIST
66949: LIST
66950: LIST
66951: ST_TO_ADDR
// result := [ ] ;
66952: LD_ADDR_VAR 0 3
66956: PUSH
66957: EMPTY
66958: ST_TO_ADDR
// for i in turrets do
66959: LD_ADDR_VAR 0 4
66963: PUSH
66964: LD_VAR 0 1
66968: PUSH
66969: FOR_IN
66970: IFFALSE 67153
// begin nat := GetNation ( i ) ;
66972: LD_ADDR_VAR 0 7
66976: PUSH
66977: LD_VAR 0 4
66981: PPUSH
66982: CALL_OW 248
66986: ST_TO_ADDR
// weapon := 0 ;
66987: LD_ADDR_VAR 0 8
66991: PUSH
66992: LD_INT 0
66994: ST_TO_ADDR
// if not nat then
66995: LD_VAR 0 7
66999: NOT
67000: IFFALSE 67004
// continue ;
67002: GO 66969
// for j in list [ nat ] do
67004: LD_ADDR_VAR 0 5
67008: PUSH
67009: LD_VAR 0 10
67013: PUSH
67014: LD_VAR 0 7
67018: ARRAY
67019: PUSH
67020: FOR_IN
67021: IFFALSE 67062
// if GetBWeapon ( i ) = j [ 1 ] then
67023: LD_VAR 0 4
67027: PPUSH
67028: CALL_OW 269
67032: PUSH
67033: LD_VAR 0 5
67037: PUSH
67038: LD_INT 1
67040: ARRAY
67041: EQUAL
67042: IFFALSE 67060
// begin weapon := j [ 2 ] ;
67044: LD_ADDR_VAR 0 8
67048: PUSH
67049: LD_VAR 0 5
67053: PUSH
67054: LD_INT 2
67056: ARRAY
67057: ST_TO_ADDR
// break ;
67058: GO 67062
// end ;
67060: GO 67020
67062: POP
67063: POP
// if not weapon then
67064: LD_VAR 0 8
67068: NOT
67069: IFFALSE 67073
// continue ;
67071: GO 66969
// for k in factories do
67073: LD_ADDR_VAR 0 6
67077: PUSH
67078: LD_VAR 0 2
67082: PUSH
67083: FOR_IN
67084: IFFALSE 67149
// begin weapons := AvailableWeaponList ( k ) ;
67086: LD_ADDR_VAR 0 9
67090: PUSH
67091: LD_VAR 0 6
67095: PPUSH
67096: CALL_OW 478
67100: ST_TO_ADDR
// if not weapons then
67101: LD_VAR 0 9
67105: NOT
67106: IFFALSE 67110
// continue ;
67108: GO 67083
// if weapon in weapons then
67110: LD_VAR 0 8
67114: PUSH
67115: LD_VAR 0 9
67119: IN
67120: IFFALSE 67147
// begin result := [ i , weapon ] ;
67122: LD_ADDR_VAR 0 3
67126: PUSH
67127: LD_VAR 0 4
67131: PUSH
67132: LD_VAR 0 8
67136: PUSH
67137: EMPTY
67138: LIST
67139: LIST
67140: ST_TO_ADDR
// exit ;
67141: POP
67142: POP
67143: POP
67144: POP
67145: GO 67155
// end ; end ;
67147: GO 67083
67149: POP
67150: POP
// end ;
67151: GO 66969
67153: POP
67154: POP
// end ;
67155: LD_VAR 0 3
67159: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
67160: LD_INT 0
67162: PPUSH
// if not side or side > 8 then
67163: LD_VAR 0 3
67167: NOT
67168: PUSH
67169: LD_VAR 0 3
67173: PUSH
67174: LD_INT 8
67176: GREATER
67177: OR
67178: IFFALSE 67182
// exit ;
67180: GO 67241
// if not range then
67182: LD_VAR 0 4
67186: NOT
67187: IFFALSE 67198
// range := - 12 ;
67189: LD_ADDR_VAR 0 4
67193: PUSH
67194: LD_INT 12
67196: NEG
67197: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
67198: LD_VAR 0 1
67202: PPUSH
67203: LD_VAR 0 2
67207: PPUSH
67208: LD_VAR 0 3
67212: PPUSH
67213: LD_VAR 0 4
67217: PPUSH
67218: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
67222: LD_VAR 0 1
67226: PPUSH
67227: LD_VAR 0 2
67231: PPUSH
67232: LD_VAR 0 3
67236: PPUSH
67237: CALL_OW 331
// end ;
67241: LD_VAR 0 5
67245: RET
// export function Video ( mode ) ; begin
67246: LD_INT 0
67248: PPUSH
// ingame_video = mode ;
67249: LD_ADDR_OWVAR 52
67253: PUSH
67254: LD_VAR 0 1
67258: ST_TO_ADDR
// interface_hidden = mode ;
67259: LD_ADDR_OWVAR 54
67263: PUSH
67264: LD_VAR 0 1
67268: ST_TO_ADDR
// end ;
67269: LD_VAR 0 2
67273: RET
// export function Join ( array , element ) ; begin
67274: LD_INT 0
67276: PPUSH
// result := Replace ( array , array + 1 , element ) ;
67277: LD_ADDR_VAR 0 3
67281: PUSH
67282: LD_VAR 0 1
67286: PPUSH
67287: LD_VAR 0 1
67291: PUSH
67292: LD_INT 1
67294: PLUS
67295: PPUSH
67296: LD_VAR 0 2
67300: PPUSH
67301: CALL_OW 1
67305: ST_TO_ADDR
// end ;
67306: LD_VAR 0 3
67310: RET
// export function JoinUnion ( array , element ) ; begin
67311: LD_INT 0
67313: PPUSH
// result := array union element ;
67314: LD_ADDR_VAR 0 3
67318: PUSH
67319: LD_VAR 0 1
67323: PUSH
67324: LD_VAR 0 2
67328: UNION
67329: ST_TO_ADDR
// end ;
67330: LD_VAR 0 3
67334: RET
// export function GetBehemoths ( side ) ; begin
67335: LD_INT 0
67337: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
67338: LD_ADDR_VAR 0 2
67342: PUSH
67343: LD_INT 22
67345: PUSH
67346: LD_VAR 0 1
67350: PUSH
67351: EMPTY
67352: LIST
67353: LIST
67354: PUSH
67355: LD_INT 31
67357: PUSH
67358: LD_INT 25
67360: PUSH
67361: EMPTY
67362: LIST
67363: LIST
67364: PUSH
67365: EMPTY
67366: LIST
67367: LIST
67368: PPUSH
67369: CALL_OW 69
67373: ST_TO_ADDR
// end ;
67374: LD_VAR 0 2
67378: RET
// export function Shuffle ( array ) ; var i , index ; begin
67379: LD_INT 0
67381: PPUSH
67382: PPUSH
67383: PPUSH
// result := [ ] ;
67384: LD_ADDR_VAR 0 2
67388: PUSH
67389: EMPTY
67390: ST_TO_ADDR
// if not array then
67391: LD_VAR 0 1
67395: NOT
67396: IFFALSE 67400
// exit ;
67398: GO 67499
// Randomize ;
67400: CALL_OW 10
// for i = array downto 1 do
67404: LD_ADDR_VAR 0 3
67408: PUSH
67409: DOUBLE
67410: LD_VAR 0 1
67414: INC
67415: ST_TO_ADDR
67416: LD_INT 1
67418: PUSH
67419: FOR_DOWNTO
67420: IFFALSE 67497
// begin index := rand ( 1 , array ) ;
67422: LD_ADDR_VAR 0 4
67426: PUSH
67427: LD_INT 1
67429: PPUSH
67430: LD_VAR 0 1
67434: PPUSH
67435: CALL_OW 12
67439: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
67440: LD_ADDR_VAR 0 2
67444: PUSH
67445: LD_VAR 0 2
67449: PPUSH
67450: LD_VAR 0 2
67454: PUSH
67455: LD_INT 1
67457: PLUS
67458: PPUSH
67459: LD_VAR 0 1
67463: PUSH
67464: LD_VAR 0 4
67468: ARRAY
67469: PPUSH
67470: CALL_OW 2
67474: ST_TO_ADDR
// array := Delete ( array , index ) ;
67475: LD_ADDR_VAR 0 1
67479: PUSH
67480: LD_VAR 0 1
67484: PPUSH
67485: LD_VAR 0 4
67489: PPUSH
67490: CALL_OW 3
67494: ST_TO_ADDR
// end ;
67495: GO 67419
67497: POP
67498: POP
// end ;
67499: LD_VAR 0 2
67503: RET
// export function GetBaseMaterials ( base ) ; begin
67504: LD_INT 0
67506: PPUSH
// result := [ 0 , 0 , 0 ] ;
67507: LD_ADDR_VAR 0 2
67511: PUSH
67512: LD_INT 0
67514: PUSH
67515: LD_INT 0
67517: PUSH
67518: LD_INT 0
67520: PUSH
67521: EMPTY
67522: LIST
67523: LIST
67524: LIST
67525: ST_TO_ADDR
// if not base then
67526: LD_VAR 0 1
67530: NOT
67531: IFFALSE 67535
// exit ;
67533: GO 67584
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
67535: LD_ADDR_VAR 0 2
67539: PUSH
67540: LD_VAR 0 1
67544: PPUSH
67545: LD_INT 1
67547: PPUSH
67548: CALL_OW 275
67552: PUSH
67553: LD_VAR 0 1
67557: PPUSH
67558: LD_INT 2
67560: PPUSH
67561: CALL_OW 275
67565: PUSH
67566: LD_VAR 0 1
67570: PPUSH
67571: LD_INT 3
67573: PPUSH
67574: CALL_OW 275
67578: PUSH
67579: EMPTY
67580: LIST
67581: LIST
67582: LIST
67583: ST_TO_ADDR
// end ;
67584: LD_VAR 0 2
67588: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
67589: LD_INT 0
67591: PPUSH
67592: PPUSH
// result := array ;
67593: LD_ADDR_VAR 0 3
67597: PUSH
67598: LD_VAR 0 1
67602: ST_TO_ADDR
// if size >= result then
67603: LD_VAR 0 2
67607: PUSH
67608: LD_VAR 0 3
67612: GREATEREQUAL
67613: IFFALSE 67617
// exit ;
67615: GO 67667
// if size then
67617: LD_VAR 0 2
67621: IFFALSE 67667
// for i := array downto size do
67623: LD_ADDR_VAR 0 4
67627: PUSH
67628: DOUBLE
67629: LD_VAR 0 1
67633: INC
67634: ST_TO_ADDR
67635: LD_VAR 0 2
67639: PUSH
67640: FOR_DOWNTO
67641: IFFALSE 67665
// result := Delete ( result , result ) ;
67643: LD_ADDR_VAR 0 3
67647: PUSH
67648: LD_VAR 0 3
67652: PPUSH
67653: LD_VAR 0 3
67657: PPUSH
67658: CALL_OW 3
67662: ST_TO_ADDR
67663: GO 67640
67665: POP
67666: POP
// end ;
67667: LD_VAR 0 3
67671: RET
// export function ComExit ( unit ) ; var tmp ; begin
67672: LD_INT 0
67674: PPUSH
67675: PPUSH
// if not IsInUnit ( unit ) then
67676: LD_VAR 0 1
67680: PPUSH
67681: CALL_OW 310
67685: NOT
67686: IFFALSE 67690
// exit ;
67688: GO 67750
// tmp := IsInUnit ( unit ) ;
67690: LD_ADDR_VAR 0 3
67694: PUSH
67695: LD_VAR 0 1
67699: PPUSH
67700: CALL_OW 310
67704: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
67705: LD_VAR 0 3
67709: PPUSH
67710: CALL_OW 247
67714: PUSH
67715: LD_INT 2
67717: EQUAL
67718: IFFALSE 67731
// ComExitVehicle ( unit ) else
67720: LD_VAR 0 1
67724: PPUSH
67725: CALL_OW 121
67729: GO 67740
// ComExitBuilding ( unit ) ;
67731: LD_VAR 0 1
67735: PPUSH
67736: CALL_OW 122
// result := tmp ;
67740: LD_ADDR_VAR 0 2
67744: PUSH
67745: LD_VAR 0 3
67749: ST_TO_ADDR
// end ;
67750: LD_VAR 0 2
67754: RET
// export function ComExitAll ( units ) ; var i ; begin
67755: LD_INT 0
67757: PPUSH
67758: PPUSH
// if not units then
67759: LD_VAR 0 1
67763: NOT
67764: IFFALSE 67768
// exit ;
67766: GO 67794
// for i in units do
67768: LD_ADDR_VAR 0 3
67772: PUSH
67773: LD_VAR 0 1
67777: PUSH
67778: FOR_IN
67779: IFFALSE 67792
// ComExit ( i ) ;
67781: LD_VAR 0 3
67785: PPUSH
67786: CALL 67672 0 1
67790: GO 67778
67792: POP
67793: POP
// end ;
67794: LD_VAR 0 2
67798: RET
// export function ResetHc ; begin
67799: LD_INT 0
67801: PPUSH
// InitHc ;
67802: CALL_OW 19
// hc_importance := 0 ;
67806: LD_ADDR_OWVAR 32
67810: PUSH
67811: LD_INT 0
67813: ST_TO_ADDR
// end ;
67814: LD_VAR 0 1
67818: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
67819: LD_INT 0
67821: PPUSH
67822: PPUSH
67823: PPUSH
// _x := ( x1 + x2 ) div 2 ;
67824: LD_ADDR_VAR 0 6
67828: PUSH
67829: LD_VAR 0 1
67833: PUSH
67834: LD_VAR 0 3
67838: PLUS
67839: PUSH
67840: LD_INT 2
67842: DIV
67843: ST_TO_ADDR
// if _x < 0 then
67844: LD_VAR 0 6
67848: PUSH
67849: LD_INT 0
67851: LESS
67852: IFFALSE 67869
// _x := _x * - 1 ;
67854: LD_ADDR_VAR 0 6
67858: PUSH
67859: LD_VAR 0 6
67863: PUSH
67864: LD_INT 1
67866: NEG
67867: MUL
67868: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
67869: LD_ADDR_VAR 0 7
67873: PUSH
67874: LD_VAR 0 2
67878: PUSH
67879: LD_VAR 0 4
67883: PLUS
67884: PUSH
67885: LD_INT 2
67887: DIV
67888: ST_TO_ADDR
// if _y < 0 then
67889: LD_VAR 0 7
67893: PUSH
67894: LD_INT 0
67896: LESS
67897: IFFALSE 67914
// _y := _y * - 1 ;
67899: LD_ADDR_VAR 0 7
67903: PUSH
67904: LD_VAR 0 7
67908: PUSH
67909: LD_INT 1
67911: NEG
67912: MUL
67913: ST_TO_ADDR
// result := [ _x , _y ] ;
67914: LD_ADDR_VAR 0 5
67918: PUSH
67919: LD_VAR 0 6
67923: PUSH
67924: LD_VAR 0 7
67928: PUSH
67929: EMPTY
67930: LIST
67931: LIST
67932: ST_TO_ADDR
// end ;
67933: LD_VAR 0 5
67937: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
67938: LD_INT 0
67940: PPUSH
67941: PPUSH
67942: PPUSH
67943: PPUSH
// task := GetTaskList ( unit ) ;
67944: LD_ADDR_VAR 0 7
67948: PUSH
67949: LD_VAR 0 1
67953: PPUSH
67954: CALL_OW 437
67958: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
67959: LD_VAR 0 7
67963: NOT
67964: PUSH
67965: LD_VAR 0 1
67969: PPUSH
67970: LD_VAR 0 2
67974: PPUSH
67975: CALL_OW 308
67979: NOT
67980: AND
67981: IFFALSE 67985
// exit ;
67983: GO 68103
// if IsInArea ( unit , area ) then
67985: LD_VAR 0 1
67989: PPUSH
67990: LD_VAR 0 2
67994: PPUSH
67995: CALL_OW 308
67999: IFFALSE 68017
// begin ComMoveToArea ( unit , goAway ) ;
68001: LD_VAR 0 1
68005: PPUSH
68006: LD_VAR 0 3
68010: PPUSH
68011: CALL_OW 113
// exit ;
68015: GO 68103
// end ; if task [ 1 ] [ 1 ] <> M then
68017: LD_VAR 0 7
68021: PUSH
68022: LD_INT 1
68024: ARRAY
68025: PUSH
68026: LD_INT 1
68028: ARRAY
68029: PUSH
68030: LD_STRING M
68032: NONEQUAL
68033: IFFALSE 68037
// exit ;
68035: GO 68103
// x := task [ 1 ] [ 2 ] ;
68037: LD_ADDR_VAR 0 5
68041: PUSH
68042: LD_VAR 0 7
68046: PUSH
68047: LD_INT 1
68049: ARRAY
68050: PUSH
68051: LD_INT 2
68053: ARRAY
68054: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
68055: LD_ADDR_VAR 0 6
68059: PUSH
68060: LD_VAR 0 7
68064: PUSH
68065: LD_INT 1
68067: ARRAY
68068: PUSH
68069: LD_INT 3
68071: ARRAY
68072: ST_TO_ADDR
// if InArea ( x , y , area ) then
68073: LD_VAR 0 5
68077: PPUSH
68078: LD_VAR 0 6
68082: PPUSH
68083: LD_VAR 0 2
68087: PPUSH
68088: CALL_OW 309
68092: IFFALSE 68103
// ComStop ( unit ) ;
68094: LD_VAR 0 1
68098: PPUSH
68099: CALL_OW 141
// end ;
68103: LD_VAR 0 4
68107: RET
// export function Abs ( value ) ; begin
68108: LD_INT 0
68110: PPUSH
// result := value ;
68111: LD_ADDR_VAR 0 2
68115: PUSH
68116: LD_VAR 0 1
68120: ST_TO_ADDR
// if value < 0 then
68121: LD_VAR 0 1
68125: PUSH
68126: LD_INT 0
68128: LESS
68129: IFFALSE 68146
// result := value * - 1 ;
68131: LD_ADDR_VAR 0 2
68135: PUSH
68136: LD_VAR 0 1
68140: PUSH
68141: LD_INT 1
68143: NEG
68144: MUL
68145: ST_TO_ADDR
// end ;
68146: LD_VAR 0 2
68150: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
68151: LD_INT 0
68153: PPUSH
68154: PPUSH
68155: PPUSH
68156: PPUSH
68157: PPUSH
68158: PPUSH
68159: PPUSH
68160: PPUSH
// if not unit or not building then
68161: LD_VAR 0 1
68165: NOT
68166: PUSH
68167: LD_VAR 0 2
68171: NOT
68172: OR
68173: IFFALSE 68177
// exit ;
68175: GO 68403
// x := GetX ( building ) ;
68177: LD_ADDR_VAR 0 4
68181: PUSH
68182: LD_VAR 0 2
68186: PPUSH
68187: CALL_OW 250
68191: ST_TO_ADDR
// y := GetY ( building ) ;
68192: LD_ADDR_VAR 0 6
68196: PUSH
68197: LD_VAR 0 2
68201: PPUSH
68202: CALL_OW 251
68206: ST_TO_ADDR
// d := GetDir ( building ) ;
68207: LD_ADDR_VAR 0 8
68211: PUSH
68212: LD_VAR 0 2
68216: PPUSH
68217: CALL_OW 254
68221: ST_TO_ADDR
// r := 4 ;
68222: LD_ADDR_VAR 0 9
68226: PUSH
68227: LD_INT 4
68229: ST_TO_ADDR
// for i := 1 to 5 do
68230: LD_ADDR_VAR 0 10
68234: PUSH
68235: DOUBLE
68236: LD_INT 1
68238: DEC
68239: ST_TO_ADDR
68240: LD_INT 5
68242: PUSH
68243: FOR_TO
68244: IFFALSE 68401
// begin _x := ShiftX ( x , d , r + i ) ;
68246: LD_ADDR_VAR 0 5
68250: PUSH
68251: LD_VAR 0 4
68255: PPUSH
68256: LD_VAR 0 8
68260: PPUSH
68261: LD_VAR 0 9
68265: PUSH
68266: LD_VAR 0 10
68270: PLUS
68271: PPUSH
68272: CALL_OW 272
68276: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
68277: LD_ADDR_VAR 0 7
68281: PUSH
68282: LD_VAR 0 6
68286: PPUSH
68287: LD_VAR 0 8
68291: PPUSH
68292: LD_VAR 0 9
68296: PUSH
68297: LD_VAR 0 10
68301: PLUS
68302: PPUSH
68303: CALL_OW 273
68307: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
68308: LD_VAR 0 5
68312: PPUSH
68313: LD_VAR 0 7
68317: PPUSH
68318: CALL_OW 488
68322: PUSH
68323: LD_VAR 0 5
68327: PPUSH
68328: LD_VAR 0 7
68332: PPUSH
68333: CALL_OW 428
68337: PPUSH
68338: CALL_OW 247
68342: PUSH
68343: LD_INT 3
68345: PUSH
68346: LD_INT 2
68348: PUSH
68349: EMPTY
68350: LIST
68351: LIST
68352: IN
68353: NOT
68354: AND
68355: IFFALSE 68399
// begin ComMoveXY ( unit , _x , _y ) ;
68357: LD_VAR 0 1
68361: PPUSH
68362: LD_VAR 0 5
68366: PPUSH
68367: LD_VAR 0 7
68371: PPUSH
68372: CALL_OW 111
// result := [ _x , _y ] ;
68376: LD_ADDR_VAR 0 3
68380: PUSH
68381: LD_VAR 0 5
68385: PUSH
68386: LD_VAR 0 7
68390: PUSH
68391: EMPTY
68392: LIST
68393: LIST
68394: ST_TO_ADDR
// exit ;
68395: POP
68396: POP
68397: GO 68403
// end ; end ;
68399: GO 68243
68401: POP
68402: POP
// end ;
68403: LD_VAR 0 3
68407: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
68408: LD_INT 0
68410: PPUSH
68411: PPUSH
68412: PPUSH
// result := 0 ;
68413: LD_ADDR_VAR 0 3
68417: PUSH
68418: LD_INT 0
68420: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
68421: LD_VAR 0 1
68425: PUSH
68426: LD_INT 0
68428: LESS
68429: PUSH
68430: LD_VAR 0 1
68434: PUSH
68435: LD_INT 8
68437: GREATER
68438: OR
68439: PUSH
68440: LD_VAR 0 2
68444: PUSH
68445: LD_INT 0
68447: LESS
68448: OR
68449: PUSH
68450: LD_VAR 0 2
68454: PUSH
68455: LD_INT 8
68457: GREATER
68458: OR
68459: IFFALSE 68463
// exit ;
68461: GO 68538
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
68463: LD_ADDR_VAR 0 4
68467: PUSH
68468: LD_INT 22
68470: PUSH
68471: LD_VAR 0 2
68475: PUSH
68476: EMPTY
68477: LIST
68478: LIST
68479: PPUSH
68480: CALL_OW 69
68484: PUSH
68485: FOR_IN
68486: IFFALSE 68536
// begin un := UnitShoot ( i ) ;
68488: LD_ADDR_VAR 0 5
68492: PUSH
68493: LD_VAR 0 4
68497: PPUSH
68498: CALL_OW 504
68502: ST_TO_ADDR
// if GetSide ( un ) = side1 then
68503: LD_VAR 0 5
68507: PPUSH
68508: CALL_OW 255
68512: PUSH
68513: LD_VAR 0 1
68517: EQUAL
68518: IFFALSE 68534
// begin result := un ;
68520: LD_ADDR_VAR 0 3
68524: PUSH
68525: LD_VAR 0 5
68529: ST_TO_ADDR
// exit ;
68530: POP
68531: POP
68532: GO 68538
// end ; end ;
68534: GO 68485
68536: POP
68537: POP
// end ;
68538: LD_VAR 0 3
68542: RET
// export function GetCargoBay ( units ) ; begin
68543: LD_INT 0
68545: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
68546: LD_ADDR_VAR 0 2
68550: PUSH
68551: LD_VAR 0 1
68555: PPUSH
68556: LD_INT 2
68558: PUSH
68559: LD_INT 34
68561: PUSH
68562: LD_INT 12
68564: PUSH
68565: EMPTY
68566: LIST
68567: LIST
68568: PUSH
68569: LD_INT 34
68571: PUSH
68572: LD_INT 51
68574: PUSH
68575: EMPTY
68576: LIST
68577: LIST
68578: PUSH
68579: LD_INT 34
68581: PUSH
68582: LD_INT 32
68584: PUSH
68585: EMPTY
68586: LIST
68587: LIST
68588: PUSH
68589: LD_INT 34
68591: PUSH
68592: LD_INT 89
68594: PUSH
68595: EMPTY
68596: LIST
68597: LIST
68598: PUSH
68599: EMPTY
68600: LIST
68601: LIST
68602: LIST
68603: LIST
68604: LIST
68605: PPUSH
68606: CALL_OW 72
68610: ST_TO_ADDR
// end ;
68611: LD_VAR 0 2
68615: RET
// export function Negate ( value ) ; begin
68616: LD_INT 0
68618: PPUSH
// result := not value ;
68619: LD_ADDR_VAR 0 2
68623: PUSH
68624: LD_VAR 0 1
68628: NOT
68629: ST_TO_ADDR
// end ;
68630: LD_VAR 0 2
68634: RET
// export function Inc ( value ) ; begin
68635: LD_INT 0
68637: PPUSH
// result := value + 1 ;
68638: LD_ADDR_VAR 0 2
68642: PUSH
68643: LD_VAR 0 1
68647: PUSH
68648: LD_INT 1
68650: PLUS
68651: ST_TO_ADDR
// end ;
68652: LD_VAR 0 2
68656: RET
// export function Dec ( value ) ; begin
68657: LD_INT 0
68659: PPUSH
// result := value - 1 ;
68660: LD_ADDR_VAR 0 2
68664: PUSH
68665: LD_VAR 0 1
68669: PUSH
68670: LD_INT 1
68672: MINUS
68673: ST_TO_ADDR
// end ;
68674: LD_VAR 0 2
68678: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
68679: LD_INT 0
68681: PPUSH
68682: PPUSH
68683: PPUSH
68684: PPUSH
68685: PPUSH
68686: PPUSH
68687: PPUSH
68688: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
68689: LD_VAR 0 1
68693: PPUSH
68694: LD_VAR 0 2
68698: PPUSH
68699: CALL_OW 488
68703: NOT
68704: PUSH
68705: LD_VAR 0 3
68709: PPUSH
68710: LD_VAR 0 4
68714: PPUSH
68715: CALL_OW 488
68719: NOT
68720: OR
68721: IFFALSE 68734
// begin result := - 1 ;
68723: LD_ADDR_VAR 0 5
68727: PUSH
68728: LD_INT 1
68730: NEG
68731: ST_TO_ADDR
// exit ;
68732: GO 68969
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
68734: LD_ADDR_VAR 0 12
68738: PUSH
68739: LD_VAR 0 1
68743: PPUSH
68744: LD_VAR 0 2
68748: PPUSH
68749: LD_VAR 0 3
68753: PPUSH
68754: LD_VAR 0 4
68758: PPUSH
68759: CALL 67819 0 4
68763: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
68764: LD_ADDR_VAR 0 11
68768: PUSH
68769: LD_VAR 0 1
68773: PPUSH
68774: LD_VAR 0 2
68778: PPUSH
68779: LD_VAR 0 12
68783: PUSH
68784: LD_INT 1
68786: ARRAY
68787: PPUSH
68788: LD_VAR 0 12
68792: PUSH
68793: LD_INT 2
68795: ARRAY
68796: PPUSH
68797: CALL_OW 298
68801: ST_TO_ADDR
// distance := 9999 ;
68802: LD_ADDR_VAR 0 10
68806: PUSH
68807: LD_INT 9999
68809: ST_TO_ADDR
// for i := 0 to 5 do
68810: LD_ADDR_VAR 0 6
68814: PUSH
68815: DOUBLE
68816: LD_INT 0
68818: DEC
68819: ST_TO_ADDR
68820: LD_INT 5
68822: PUSH
68823: FOR_TO
68824: IFFALSE 68967
// begin _x := ShiftX ( x1 , i , centerDist ) ;
68826: LD_ADDR_VAR 0 7
68830: PUSH
68831: LD_VAR 0 1
68835: PPUSH
68836: LD_VAR 0 6
68840: PPUSH
68841: LD_VAR 0 11
68845: PPUSH
68846: CALL_OW 272
68850: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
68851: LD_ADDR_VAR 0 8
68855: PUSH
68856: LD_VAR 0 2
68860: PPUSH
68861: LD_VAR 0 6
68865: PPUSH
68866: LD_VAR 0 11
68870: PPUSH
68871: CALL_OW 273
68875: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
68876: LD_VAR 0 7
68880: PPUSH
68881: LD_VAR 0 8
68885: PPUSH
68886: CALL_OW 488
68890: NOT
68891: IFFALSE 68895
// continue ;
68893: GO 68823
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
68895: LD_ADDR_VAR 0 9
68899: PUSH
68900: LD_VAR 0 12
68904: PUSH
68905: LD_INT 1
68907: ARRAY
68908: PPUSH
68909: LD_VAR 0 12
68913: PUSH
68914: LD_INT 2
68916: ARRAY
68917: PPUSH
68918: LD_VAR 0 7
68922: PPUSH
68923: LD_VAR 0 8
68927: PPUSH
68928: CALL_OW 298
68932: ST_TO_ADDR
// if tmp < distance then
68933: LD_VAR 0 9
68937: PUSH
68938: LD_VAR 0 10
68942: LESS
68943: IFFALSE 68965
// begin result := i ;
68945: LD_ADDR_VAR 0 5
68949: PUSH
68950: LD_VAR 0 6
68954: ST_TO_ADDR
// distance := tmp ;
68955: LD_ADDR_VAR 0 10
68959: PUSH
68960: LD_VAR 0 9
68964: ST_TO_ADDR
// end ; end ;
68965: GO 68823
68967: POP
68968: POP
// end ;
68969: LD_VAR 0 5
68973: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
68974: LD_INT 0
68976: PPUSH
68977: PPUSH
// if not driver or not IsInUnit ( driver ) then
68978: LD_VAR 0 1
68982: NOT
68983: PUSH
68984: LD_VAR 0 1
68988: PPUSH
68989: CALL_OW 310
68993: NOT
68994: OR
68995: IFFALSE 68999
// exit ;
68997: GO 69089
// vehicle := IsInUnit ( driver ) ;
68999: LD_ADDR_VAR 0 3
69003: PUSH
69004: LD_VAR 0 1
69008: PPUSH
69009: CALL_OW 310
69013: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
69014: LD_VAR 0 1
69018: PPUSH
69019: LD_STRING \
69021: PUSH
69022: LD_INT 0
69024: PUSH
69025: LD_INT 0
69027: PUSH
69028: LD_INT 0
69030: PUSH
69031: LD_INT 0
69033: PUSH
69034: LD_INT 0
69036: PUSH
69037: LD_INT 0
69039: PUSH
69040: EMPTY
69041: LIST
69042: LIST
69043: LIST
69044: LIST
69045: LIST
69046: LIST
69047: LIST
69048: PUSH
69049: LD_STRING E
69051: PUSH
69052: LD_INT 0
69054: PUSH
69055: LD_INT 0
69057: PUSH
69058: LD_VAR 0 3
69062: PUSH
69063: LD_INT 0
69065: PUSH
69066: LD_INT 0
69068: PUSH
69069: LD_INT 0
69071: PUSH
69072: EMPTY
69073: LIST
69074: LIST
69075: LIST
69076: LIST
69077: LIST
69078: LIST
69079: LIST
69080: PUSH
69081: EMPTY
69082: LIST
69083: LIST
69084: PPUSH
69085: CALL_OW 446
// end ;
69089: LD_VAR 0 2
69093: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
69094: LD_INT 0
69096: PPUSH
69097: PPUSH
// if not driver or not IsInUnit ( driver ) then
69098: LD_VAR 0 1
69102: NOT
69103: PUSH
69104: LD_VAR 0 1
69108: PPUSH
69109: CALL_OW 310
69113: NOT
69114: OR
69115: IFFALSE 69119
// exit ;
69117: GO 69209
// vehicle := IsInUnit ( driver ) ;
69119: LD_ADDR_VAR 0 3
69123: PUSH
69124: LD_VAR 0 1
69128: PPUSH
69129: CALL_OW 310
69133: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
69134: LD_VAR 0 1
69138: PPUSH
69139: LD_STRING \
69141: PUSH
69142: LD_INT 0
69144: PUSH
69145: LD_INT 0
69147: PUSH
69148: LD_INT 0
69150: PUSH
69151: LD_INT 0
69153: PUSH
69154: LD_INT 0
69156: PUSH
69157: LD_INT 0
69159: PUSH
69160: EMPTY
69161: LIST
69162: LIST
69163: LIST
69164: LIST
69165: LIST
69166: LIST
69167: LIST
69168: PUSH
69169: LD_STRING E
69171: PUSH
69172: LD_INT 0
69174: PUSH
69175: LD_INT 0
69177: PUSH
69178: LD_VAR 0 3
69182: PUSH
69183: LD_INT 0
69185: PUSH
69186: LD_INT 0
69188: PUSH
69189: LD_INT 0
69191: PUSH
69192: EMPTY
69193: LIST
69194: LIST
69195: LIST
69196: LIST
69197: LIST
69198: LIST
69199: LIST
69200: PUSH
69201: EMPTY
69202: LIST
69203: LIST
69204: PPUSH
69205: CALL_OW 447
// end ;
69209: LD_VAR 0 2
69213: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
69214: LD_INT 0
69216: PPUSH
69217: PPUSH
69218: PPUSH
// tmp := [ ] ;
69219: LD_ADDR_VAR 0 5
69223: PUSH
69224: EMPTY
69225: ST_TO_ADDR
// for i in units do
69226: LD_ADDR_VAR 0 4
69230: PUSH
69231: LD_VAR 0 1
69235: PUSH
69236: FOR_IN
69237: IFFALSE 69275
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
69239: LD_ADDR_VAR 0 5
69243: PUSH
69244: LD_VAR 0 5
69248: PPUSH
69249: LD_VAR 0 5
69253: PUSH
69254: LD_INT 1
69256: PLUS
69257: PPUSH
69258: LD_VAR 0 4
69262: PPUSH
69263: CALL_OW 256
69267: PPUSH
69268: CALL_OW 2
69272: ST_TO_ADDR
69273: GO 69236
69275: POP
69276: POP
// if not tmp then
69277: LD_VAR 0 5
69281: NOT
69282: IFFALSE 69286
// exit ;
69284: GO 69334
// if asc then
69286: LD_VAR 0 2
69290: IFFALSE 69314
// result := SortListByListAsc ( units , tmp ) else
69292: LD_ADDR_VAR 0 3
69296: PUSH
69297: LD_VAR 0 1
69301: PPUSH
69302: LD_VAR 0 5
69306: PPUSH
69307: CALL_OW 76
69311: ST_TO_ADDR
69312: GO 69334
// result := SortListByListDesc ( units , tmp ) ;
69314: LD_ADDR_VAR 0 3
69318: PUSH
69319: LD_VAR 0 1
69323: PPUSH
69324: LD_VAR 0 5
69328: PPUSH
69329: CALL_OW 77
69333: ST_TO_ADDR
// end ;
69334: LD_VAR 0 3
69338: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
69339: LD_INT 0
69341: PPUSH
69342: PPUSH
// task := GetTaskList ( mech ) ;
69343: LD_ADDR_VAR 0 4
69347: PUSH
69348: LD_VAR 0 1
69352: PPUSH
69353: CALL_OW 437
69357: ST_TO_ADDR
// if not task then
69358: LD_VAR 0 4
69362: NOT
69363: IFFALSE 69367
// exit ;
69365: GO 69409
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
69367: LD_ADDR_VAR 0 3
69371: PUSH
69372: LD_VAR 0 4
69376: PUSH
69377: LD_INT 1
69379: ARRAY
69380: PUSH
69381: LD_INT 1
69383: ARRAY
69384: PUSH
69385: LD_STRING r
69387: EQUAL
69388: PUSH
69389: LD_VAR 0 4
69393: PUSH
69394: LD_INT 1
69396: ARRAY
69397: PUSH
69398: LD_INT 4
69400: ARRAY
69401: PUSH
69402: LD_VAR 0 2
69406: EQUAL
69407: AND
69408: ST_TO_ADDR
// end ;
69409: LD_VAR 0 3
69413: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
69414: LD_INT 0
69416: PPUSH
// SetDir ( unit , d ) ;
69417: LD_VAR 0 1
69421: PPUSH
69422: LD_VAR 0 4
69426: PPUSH
69427: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
69431: LD_VAR 0 1
69435: PPUSH
69436: LD_VAR 0 2
69440: PPUSH
69441: LD_VAR 0 3
69445: PPUSH
69446: LD_VAR 0 5
69450: PPUSH
69451: CALL_OW 48
// end ;
69455: LD_VAR 0 6
69459: RET
// export function ToNaturalNumber ( number ) ; begin
69460: LD_INT 0
69462: PPUSH
// result := number div 1 ;
69463: LD_ADDR_VAR 0 2
69467: PUSH
69468: LD_VAR 0 1
69472: PUSH
69473: LD_INT 1
69475: DIV
69476: ST_TO_ADDR
// if number < 0 then
69477: LD_VAR 0 1
69481: PUSH
69482: LD_INT 0
69484: LESS
69485: IFFALSE 69495
// result := 0 ;
69487: LD_ADDR_VAR 0 2
69491: PUSH
69492: LD_INT 0
69494: ST_TO_ADDR
// end ;
69495: LD_VAR 0 2
69499: RET
// export function SortByClass ( units , class ) ; var un ; begin
69500: LD_INT 0
69502: PPUSH
69503: PPUSH
// if not units or not class then
69504: LD_VAR 0 1
69508: NOT
69509: PUSH
69510: LD_VAR 0 2
69514: NOT
69515: OR
69516: IFFALSE 69520
// exit ;
69518: GO 69615
// result := [ ] ;
69520: LD_ADDR_VAR 0 3
69524: PUSH
69525: EMPTY
69526: ST_TO_ADDR
// for un in units do
69527: LD_ADDR_VAR 0 4
69531: PUSH
69532: LD_VAR 0 1
69536: PUSH
69537: FOR_IN
69538: IFFALSE 69613
// if GetClass ( un ) = class then
69540: LD_VAR 0 4
69544: PPUSH
69545: CALL_OW 257
69549: PUSH
69550: LD_VAR 0 2
69554: EQUAL
69555: IFFALSE 69582
// result := Insert ( result , 1 , un ) else
69557: LD_ADDR_VAR 0 3
69561: PUSH
69562: LD_VAR 0 3
69566: PPUSH
69567: LD_INT 1
69569: PPUSH
69570: LD_VAR 0 4
69574: PPUSH
69575: CALL_OW 2
69579: ST_TO_ADDR
69580: GO 69611
// result := Replace ( result , result + 1 , un ) ;
69582: LD_ADDR_VAR 0 3
69586: PUSH
69587: LD_VAR 0 3
69591: PPUSH
69592: LD_VAR 0 3
69596: PUSH
69597: LD_INT 1
69599: PLUS
69600: PPUSH
69601: LD_VAR 0 4
69605: PPUSH
69606: CALL_OW 1
69610: ST_TO_ADDR
69611: GO 69537
69613: POP
69614: POP
// end ;
69615: LD_VAR 0 3
69619: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
69620: LD_INT 0
69622: PPUSH
69623: PPUSH
69624: PPUSH
69625: PPUSH
69626: PPUSH
69627: PPUSH
69628: PPUSH
// result := [ ] ;
69629: LD_ADDR_VAR 0 4
69633: PUSH
69634: EMPTY
69635: ST_TO_ADDR
// if x - r < 0 then
69636: LD_VAR 0 1
69640: PUSH
69641: LD_VAR 0 3
69645: MINUS
69646: PUSH
69647: LD_INT 0
69649: LESS
69650: IFFALSE 69662
// min_x := 0 else
69652: LD_ADDR_VAR 0 8
69656: PUSH
69657: LD_INT 0
69659: ST_TO_ADDR
69660: GO 69678
// min_x := x - r ;
69662: LD_ADDR_VAR 0 8
69666: PUSH
69667: LD_VAR 0 1
69671: PUSH
69672: LD_VAR 0 3
69676: MINUS
69677: ST_TO_ADDR
// if y - r < 0 then
69678: LD_VAR 0 2
69682: PUSH
69683: LD_VAR 0 3
69687: MINUS
69688: PUSH
69689: LD_INT 0
69691: LESS
69692: IFFALSE 69704
// min_y := 0 else
69694: LD_ADDR_VAR 0 7
69698: PUSH
69699: LD_INT 0
69701: ST_TO_ADDR
69702: GO 69720
// min_y := y - r ;
69704: LD_ADDR_VAR 0 7
69708: PUSH
69709: LD_VAR 0 2
69713: PUSH
69714: LD_VAR 0 3
69718: MINUS
69719: ST_TO_ADDR
// max_x := x + r ;
69720: LD_ADDR_VAR 0 9
69724: PUSH
69725: LD_VAR 0 1
69729: PUSH
69730: LD_VAR 0 3
69734: PLUS
69735: ST_TO_ADDR
// max_y := y + r ;
69736: LD_ADDR_VAR 0 10
69740: PUSH
69741: LD_VAR 0 2
69745: PUSH
69746: LD_VAR 0 3
69750: PLUS
69751: ST_TO_ADDR
// for _x = min_x to max_x do
69752: LD_ADDR_VAR 0 5
69756: PUSH
69757: DOUBLE
69758: LD_VAR 0 8
69762: DEC
69763: ST_TO_ADDR
69764: LD_VAR 0 9
69768: PUSH
69769: FOR_TO
69770: IFFALSE 69871
// for _y = min_y to max_y do
69772: LD_ADDR_VAR 0 6
69776: PUSH
69777: DOUBLE
69778: LD_VAR 0 7
69782: DEC
69783: ST_TO_ADDR
69784: LD_VAR 0 10
69788: PUSH
69789: FOR_TO
69790: IFFALSE 69867
// begin if not ValidHex ( _x , _y ) then
69792: LD_VAR 0 5
69796: PPUSH
69797: LD_VAR 0 6
69801: PPUSH
69802: CALL_OW 488
69806: NOT
69807: IFFALSE 69811
// continue ;
69809: GO 69789
// if GetResourceTypeXY ( _x , _y ) then
69811: LD_VAR 0 5
69815: PPUSH
69816: LD_VAR 0 6
69820: PPUSH
69821: CALL_OW 283
69825: IFFALSE 69865
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
69827: LD_ADDR_VAR 0 4
69831: PUSH
69832: LD_VAR 0 4
69836: PPUSH
69837: LD_VAR 0 4
69841: PUSH
69842: LD_INT 1
69844: PLUS
69845: PPUSH
69846: LD_VAR 0 5
69850: PUSH
69851: LD_VAR 0 6
69855: PUSH
69856: EMPTY
69857: LIST
69858: LIST
69859: PPUSH
69860: CALL_OW 1
69864: ST_TO_ADDR
// end ;
69865: GO 69789
69867: POP
69868: POP
69869: GO 69769
69871: POP
69872: POP
// end ;
69873: LD_VAR 0 4
69877: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
69878: LD_INT 0
69880: PPUSH
69881: PPUSH
69882: PPUSH
69883: PPUSH
69884: PPUSH
69885: PPUSH
69886: PPUSH
69887: PPUSH
// if not units then
69888: LD_VAR 0 1
69892: NOT
69893: IFFALSE 69897
// exit ;
69895: GO 70421
// result := UnitFilter ( units , [ f_ok ] ) ;
69897: LD_ADDR_VAR 0 3
69901: PUSH
69902: LD_VAR 0 1
69906: PPUSH
69907: LD_INT 50
69909: PUSH
69910: EMPTY
69911: LIST
69912: PPUSH
69913: CALL_OW 72
69917: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
69918: LD_ADDR_VAR 0 8
69922: PUSH
69923: LD_VAR 0 1
69927: PUSH
69928: LD_INT 1
69930: ARRAY
69931: PPUSH
69932: CALL_OW 255
69936: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
69937: LD_ADDR_VAR 0 10
69941: PUSH
69942: LD_INT 29
69944: PUSH
69945: LD_INT 91
69947: PUSH
69948: LD_INT 49
69950: PUSH
69951: EMPTY
69952: LIST
69953: LIST
69954: LIST
69955: ST_TO_ADDR
// if not result then
69956: LD_VAR 0 3
69960: NOT
69961: IFFALSE 69965
// exit ;
69963: GO 70421
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
69965: LD_ADDR_VAR 0 5
69969: PUSH
69970: LD_INT 81
69972: PUSH
69973: LD_VAR 0 8
69977: PUSH
69978: EMPTY
69979: LIST
69980: LIST
69981: PPUSH
69982: CALL_OW 69
69986: ST_TO_ADDR
// for i in result do
69987: LD_ADDR_VAR 0 4
69991: PUSH
69992: LD_VAR 0 3
69996: PUSH
69997: FOR_IN
69998: IFFALSE 70419
// begin tag := GetTag ( i ) + 1 ;
70000: LD_ADDR_VAR 0 9
70004: PUSH
70005: LD_VAR 0 4
70009: PPUSH
70010: CALL_OW 110
70014: PUSH
70015: LD_INT 1
70017: PLUS
70018: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
70019: LD_ADDR_VAR 0 7
70023: PUSH
70024: LD_VAR 0 4
70028: PPUSH
70029: CALL_OW 250
70033: PPUSH
70034: LD_VAR 0 4
70038: PPUSH
70039: CALL_OW 251
70043: PPUSH
70044: LD_INT 6
70046: PPUSH
70047: CALL 69620 0 3
70051: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
70052: LD_VAR 0 4
70056: PPUSH
70057: CALL_OW 247
70061: PUSH
70062: LD_INT 2
70064: EQUAL
70065: PUSH
70066: LD_VAR 0 7
70070: AND
70071: PUSH
70072: LD_VAR 0 4
70076: PPUSH
70077: CALL_OW 264
70081: PUSH
70082: LD_VAR 0 10
70086: IN
70087: NOT
70088: AND
70089: IFFALSE 70128
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
70091: LD_VAR 0 4
70095: PPUSH
70096: LD_VAR 0 7
70100: PUSH
70101: LD_INT 1
70103: ARRAY
70104: PUSH
70105: LD_INT 1
70107: ARRAY
70108: PPUSH
70109: LD_VAR 0 7
70113: PUSH
70114: LD_INT 1
70116: ARRAY
70117: PUSH
70118: LD_INT 2
70120: ARRAY
70121: PPUSH
70122: CALL_OW 116
70126: GO 70417
// if path > tag then
70128: LD_VAR 0 2
70132: PUSH
70133: LD_VAR 0 9
70137: GREATER
70138: IFFALSE 70346
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
70140: LD_ADDR_VAR 0 6
70144: PUSH
70145: LD_VAR 0 5
70149: PPUSH
70150: LD_INT 91
70152: PUSH
70153: LD_VAR 0 4
70157: PUSH
70158: LD_INT 8
70160: PUSH
70161: EMPTY
70162: LIST
70163: LIST
70164: LIST
70165: PPUSH
70166: CALL_OW 72
70170: ST_TO_ADDR
// if nearEnemy then
70171: LD_VAR 0 6
70175: IFFALSE 70244
// begin if GetWeapon ( i ) = ru_time_lapser then
70177: LD_VAR 0 4
70181: PPUSH
70182: CALL_OW 264
70186: PUSH
70187: LD_INT 49
70189: EQUAL
70190: IFFALSE 70218
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
70192: LD_VAR 0 4
70196: PPUSH
70197: LD_VAR 0 6
70201: PPUSH
70202: LD_VAR 0 4
70206: PPUSH
70207: CALL_OW 74
70211: PPUSH
70212: CALL_OW 112
70216: GO 70242
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
70218: LD_VAR 0 4
70222: PPUSH
70223: LD_VAR 0 6
70227: PPUSH
70228: LD_VAR 0 4
70232: PPUSH
70233: CALL_OW 74
70237: PPUSH
70238: CALL 71346 0 2
// end else
70242: GO 70344
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
70244: LD_VAR 0 4
70248: PPUSH
70249: LD_VAR 0 2
70253: PUSH
70254: LD_VAR 0 9
70258: ARRAY
70259: PUSH
70260: LD_INT 1
70262: ARRAY
70263: PPUSH
70264: LD_VAR 0 2
70268: PUSH
70269: LD_VAR 0 9
70273: ARRAY
70274: PUSH
70275: LD_INT 2
70277: ARRAY
70278: PPUSH
70279: CALL_OW 297
70283: PUSH
70284: LD_INT 6
70286: GREATER
70287: IFFALSE 70330
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
70289: LD_VAR 0 4
70293: PPUSH
70294: LD_VAR 0 2
70298: PUSH
70299: LD_VAR 0 9
70303: ARRAY
70304: PUSH
70305: LD_INT 1
70307: ARRAY
70308: PPUSH
70309: LD_VAR 0 2
70313: PUSH
70314: LD_VAR 0 9
70318: ARRAY
70319: PUSH
70320: LD_INT 2
70322: ARRAY
70323: PPUSH
70324: CALL_OW 114
70328: GO 70344
// SetTag ( i , tag ) ;
70330: LD_VAR 0 4
70334: PPUSH
70335: LD_VAR 0 9
70339: PPUSH
70340: CALL_OW 109
// end else
70344: GO 70417
// if enemy then
70346: LD_VAR 0 5
70350: IFFALSE 70417
// begin if GetWeapon ( i ) = ru_time_lapser then
70352: LD_VAR 0 4
70356: PPUSH
70357: CALL_OW 264
70361: PUSH
70362: LD_INT 49
70364: EQUAL
70365: IFFALSE 70393
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
70367: LD_VAR 0 4
70371: PPUSH
70372: LD_VAR 0 5
70376: PPUSH
70377: LD_VAR 0 4
70381: PPUSH
70382: CALL_OW 74
70386: PPUSH
70387: CALL_OW 112
70391: GO 70417
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
70393: LD_VAR 0 4
70397: PPUSH
70398: LD_VAR 0 5
70402: PPUSH
70403: LD_VAR 0 4
70407: PPUSH
70408: CALL_OW 74
70412: PPUSH
70413: CALL 71346 0 2
// end ; end ;
70417: GO 69997
70419: POP
70420: POP
// end ;
70421: LD_VAR 0 3
70425: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
70426: LD_INT 0
70428: PPUSH
70429: PPUSH
70430: PPUSH
// if not unit or IsInUnit ( unit ) then
70431: LD_VAR 0 1
70435: NOT
70436: PUSH
70437: LD_VAR 0 1
70441: PPUSH
70442: CALL_OW 310
70446: OR
70447: IFFALSE 70451
// exit ;
70449: GO 70542
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
70451: LD_ADDR_VAR 0 4
70455: PUSH
70456: LD_VAR 0 1
70460: PPUSH
70461: CALL_OW 250
70465: PPUSH
70466: LD_VAR 0 2
70470: PPUSH
70471: LD_INT 1
70473: PPUSH
70474: CALL_OW 272
70478: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
70479: LD_ADDR_VAR 0 5
70483: PUSH
70484: LD_VAR 0 1
70488: PPUSH
70489: CALL_OW 251
70493: PPUSH
70494: LD_VAR 0 2
70498: PPUSH
70499: LD_INT 1
70501: PPUSH
70502: CALL_OW 273
70506: ST_TO_ADDR
// if ValidHex ( x , y ) then
70507: LD_VAR 0 4
70511: PPUSH
70512: LD_VAR 0 5
70516: PPUSH
70517: CALL_OW 488
70521: IFFALSE 70542
// ComTurnXY ( unit , x , y ) ;
70523: LD_VAR 0 1
70527: PPUSH
70528: LD_VAR 0 4
70532: PPUSH
70533: LD_VAR 0 5
70537: PPUSH
70538: CALL_OW 118
// end ;
70542: LD_VAR 0 3
70546: RET
// export function SeeUnits ( side , units ) ; var i ; begin
70547: LD_INT 0
70549: PPUSH
70550: PPUSH
// result := false ;
70551: LD_ADDR_VAR 0 3
70555: PUSH
70556: LD_INT 0
70558: ST_TO_ADDR
// if not units then
70559: LD_VAR 0 2
70563: NOT
70564: IFFALSE 70568
// exit ;
70566: GO 70613
// for i in units do
70568: LD_ADDR_VAR 0 4
70572: PUSH
70573: LD_VAR 0 2
70577: PUSH
70578: FOR_IN
70579: IFFALSE 70611
// if See ( side , i ) then
70581: LD_VAR 0 1
70585: PPUSH
70586: LD_VAR 0 4
70590: PPUSH
70591: CALL_OW 292
70595: IFFALSE 70609
// begin result := true ;
70597: LD_ADDR_VAR 0 3
70601: PUSH
70602: LD_INT 1
70604: ST_TO_ADDR
// exit ;
70605: POP
70606: POP
70607: GO 70613
// end ;
70609: GO 70578
70611: POP
70612: POP
// end ;
70613: LD_VAR 0 3
70617: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
70618: LD_INT 0
70620: PPUSH
70621: PPUSH
70622: PPUSH
70623: PPUSH
// if not unit or not points then
70624: LD_VAR 0 1
70628: NOT
70629: PUSH
70630: LD_VAR 0 2
70634: NOT
70635: OR
70636: IFFALSE 70640
// exit ;
70638: GO 70730
// dist := 99999 ;
70640: LD_ADDR_VAR 0 5
70644: PUSH
70645: LD_INT 99999
70647: ST_TO_ADDR
// for i in points do
70648: LD_ADDR_VAR 0 4
70652: PUSH
70653: LD_VAR 0 2
70657: PUSH
70658: FOR_IN
70659: IFFALSE 70728
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
70661: LD_ADDR_VAR 0 6
70665: PUSH
70666: LD_VAR 0 1
70670: PPUSH
70671: LD_VAR 0 4
70675: PUSH
70676: LD_INT 1
70678: ARRAY
70679: PPUSH
70680: LD_VAR 0 4
70684: PUSH
70685: LD_INT 2
70687: ARRAY
70688: PPUSH
70689: CALL_OW 297
70693: ST_TO_ADDR
// if tmpDist < dist then
70694: LD_VAR 0 6
70698: PUSH
70699: LD_VAR 0 5
70703: LESS
70704: IFFALSE 70726
// begin result := i ;
70706: LD_ADDR_VAR 0 3
70710: PUSH
70711: LD_VAR 0 4
70715: ST_TO_ADDR
// dist := tmpDist ;
70716: LD_ADDR_VAR 0 5
70720: PUSH
70721: LD_VAR 0 6
70725: ST_TO_ADDR
// end ; end ;
70726: GO 70658
70728: POP
70729: POP
// end ;
70730: LD_VAR 0 3
70734: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
70735: LD_INT 0
70737: PPUSH
// uc_side := side ;
70738: LD_ADDR_OWVAR 20
70742: PUSH
70743: LD_VAR 0 1
70747: ST_TO_ADDR
// uc_nation := 3 ;
70748: LD_ADDR_OWVAR 21
70752: PUSH
70753: LD_INT 3
70755: ST_TO_ADDR
// vc_chassis := 25 ;
70756: LD_ADDR_OWVAR 37
70760: PUSH
70761: LD_INT 25
70763: ST_TO_ADDR
// vc_engine := engine_siberite ;
70764: LD_ADDR_OWVAR 39
70768: PUSH
70769: LD_INT 3
70771: ST_TO_ADDR
// vc_control := control_computer ;
70772: LD_ADDR_OWVAR 38
70776: PUSH
70777: LD_INT 3
70779: ST_TO_ADDR
// vc_weapon := 59 ;
70780: LD_ADDR_OWVAR 40
70784: PUSH
70785: LD_INT 59
70787: ST_TO_ADDR
// result := CreateVehicle ;
70788: LD_ADDR_VAR 0 5
70792: PUSH
70793: CALL_OW 45
70797: ST_TO_ADDR
// SetDir ( result , d ) ;
70798: LD_VAR 0 5
70802: PPUSH
70803: LD_VAR 0 4
70807: PPUSH
70808: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
70812: LD_VAR 0 5
70816: PPUSH
70817: LD_VAR 0 2
70821: PPUSH
70822: LD_VAR 0 3
70826: PPUSH
70827: LD_INT 0
70829: PPUSH
70830: CALL_OW 48
// end ;
70834: LD_VAR 0 5
70838: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
70839: LD_INT 0
70841: PPUSH
70842: PPUSH
70843: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
70844: LD_ADDR_VAR 0 2
70848: PUSH
70849: LD_INT 0
70851: PUSH
70852: LD_INT 0
70854: PUSH
70855: LD_INT 0
70857: PUSH
70858: LD_INT 0
70860: PUSH
70861: EMPTY
70862: LIST
70863: LIST
70864: LIST
70865: LIST
70866: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
70867: LD_VAR 0 1
70871: NOT
70872: PUSH
70873: LD_VAR 0 1
70877: PPUSH
70878: CALL_OW 264
70882: PUSH
70883: LD_INT 12
70885: PUSH
70886: LD_INT 51
70888: PUSH
70889: LD_INT 32
70891: PUSH
70892: LD_INT 89
70894: PUSH
70895: EMPTY
70896: LIST
70897: LIST
70898: LIST
70899: LIST
70900: IN
70901: NOT
70902: OR
70903: IFFALSE 70907
// exit ;
70905: GO 71005
// for i := 1 to 3 do
70907: LD_ADDR_VAR 0 3
70911: PUSH
70912: DOUBLE
70913: LD_INT 1
70915: DEC
70916: ST_TO_ADDR
70917: LD_INT 3
70919: PUSH
70920: FOR_TO
70921: IFFALSE 71003
// begin tmp := GetCargo ( cargo , i ) ;
70923: LD_ADDR_VAR 0 4
70927: PUSH
70928: LD_VAR 0 1
70932: PPUSH
70933: LD_VAR 0 3
70937: PPUSH
70938: CALL_OW 289
70942: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
70943: LD_ADDR_VAR 0 2
70947: PUSH
70948: LD_VAR 0 2
70952: PPUSH
70953: LD_VAR 0 3
70957: PPUSH
70958: LD_VAR 0 4
70962: PPUSH
70963: CALL_OW 1
70967: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
70968: LD_ADDR_VAR 0 2
70972: PUSH
70973: LD_VAR 0 2
70977: PPUSH
70978: LD_INT 4
70980: PPUSH
70981: LD_VAR 0 2
70985: PUSH
70986: LD_INT 4
70988: ARRAY
70989: PUSH
70990: LD_VAR 0 4
70994: PLUS
70995: PPUSH
70996: CALL_OW 1
71000: ST_TO_ADDR
// end ;
71001: GO 70920
71003: POP
71004: POP
// end ;
71005: LD_VAR 0 2
71009: RET
// export function Length ( array ) ; begin
71010: LD_INT 0
71012: PPUSH
// result := array + 0 ;
71013: LD_ADDR_VAR 0 2
71017: PUSH
71018: LD_VAR 0 1
71022: PUSH
71023: LD_INT 0
71025: PLUS
71026: ST_TO_ADDR
// end ;
71027: LD_VAR 0 2
71031: RET
// export function PrepareArray ( array ) ; begin
71032: LD_INT 0
71034: PPUSH
// result := array diff 0 ;
71035: LD_ADDR_VAR 0 2
71039: PUSH
71040: LD_VAR 0 1
71044: PUSH
71045: LD_INT 0
71047: DIFF
71048: ST_TO_ADDR
// if not result [ 1 ] then
71049: LD_VAR 0 2
71053: PUSH
71054: LD_INT 1
71056: ARRAY
71057: NOT
71058: IFFALSE 71078
// result := Delete ( result , 1 ) ;
71060: LD_ADDR_VAR 0 2
71064: PUSH
71065: LD_VAR 0 2
71069: PPUSH
71070: LD_INT 1
71072: PPUSH
71073: CALL_OW 3
71077: ST_TO_ADDR
// end ;
71078: LD_VAR 0 2
71082: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
71083: LD_INT 0
71085: PPUSH
71086: PPUSH
71087: PPUSH
71088: PPUSH
// sibRocketRange := 25 ;
71089: LD_ADDR_VAR 0 6
71093: PUSH
71094: LD_INT 25
71096: ST_TO_ADDR
// result := false ;
71097: LD_ADDR_VAR 0 4
71101: PUSH
71102: LD_INT 0
71104: ST_TO_ADDR
// for i := 0 to 5 do
71105: LD_ADDR_VAR 0 5
71109: PUSH
71110: DOUBLE
71111: LD_INT 0
71113: DEC
71114: ST_TO_ADDR
71115: LD_INT 5
71117: PUSH
71118: FOR_TO
71119: IFFALSE 71186
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
71121: LD_VAR 0 1
71125: PPUSH
71126: LD_VAR 0 5
71130: PPUSH
71131: LD_VAR 0 6
71135: PPUSH
71136: CALL_OW 272
71140: PPUSH
71141: LD_VAR 0 2
71145: PPUSH
71146: LD_VAR 0 5
71150: PPUSH
71151: LD_VAR 0 6
71155: PPUSH
71156: CALL_OW 273
71160: PPUSH
71161: LD_VAR 0 3
71165: PPUSH
71166: CALL_OW 309
71170: IFFALSE 71184
// begin result := true ;
71172: LD_ADDR_VAR 0 4
71176: PUSH
71177: LD_INT 1
71179: ST_TO_ADDR
// exit ;
71180: POP
71181: POP
71182: GO 71188
// end ;
71184: GO 71118
71186: POP
71187: POP
// end ;
71188: LD_VAR 0 4
71192: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
71193: LD_INT 0
71195: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
71196: LD_VAR 0 1
71200: PPUSH
71201: LD_VAR 0 2
71205: PPUSH
71206: LD_INT 0
71208: PPUSH
71209: LD_INT 0
71211: PPUSH
71212: LD_INT 1
71214: PPUSH
71215: LD_INT 0
71217: PPUSH
71218: CALL_OW 587
// end ;
71222: LD_VAR 0 3
71226: RET
// export function CenterOnNow ( unit ) ; begin
71227: LD_INT 0
71229: PPUSH
// result := IsInUnit ( unit ) ;
71230: LD_ADDR_VAR 0 2
71234: PUSH
71235: LD_VAR 0 1
71239: PPUSH
71240: CALL_OW 310
71244: ST_TO_ADDR
// if not result then
71245: LD_VAR 0 2
71249: NOT
71250: IFFALSE 71262
// result := unit ;
71252: LD_ADDR_VAR 0 2
71256: PUSH
71257: LD_VAR 0 1
71261: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
71262: LD_VAR 0 1
71266: PPUSH
71267: CALL_OW 87
// end ;
71271: LD_VAR 0 2
71275: RET
// export function ComMoveHex ( unit , hex ) ; begin
71276: LD_INT 0
71278: PPUSH
// if not hex then
71279: LD_VAR 0 2
71283: NOT
71284: IFFALSE 71288
// exit ;
71286: GO 71341
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
71288: LD_VAR 0 2
71292: PUSH
71293: LD_INT 1
71295: ARRAY
71296: PPUSH
71297: LD_VAR 0 2
71301: PUSH
71302: LD_INT 2
71304: ARRAY
71305: PPUSH
71306: CALL_OW 428
71310: IFFALSE 71314
// exit ;
71312: GO 71341
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
71314: LD_VAR 0 1
71318: PPUSH
71319: LD_VAR 0 2
71323: PUSH
71324: LD_INT 1
71326: ARRAY
71327: PPUSH
71328: LD_VAR 0 2
71332: PUSH
71333: LD_INT 2
71335: ARRAY
71336: PPUSH
71337: CALL_OW 111
// end ;
71341: LD_VAR 0 3
71345: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
71346: LD_INT 0
71348: PPUSH
71349: PPUSH
71350: PPUSH
// if not unit or not enemy then
71351: LD_VAR 0 1
71355: NOT
71356: PUSH
71357: LD_VAR 0 2
71361: NOT
71362: OR
71363: IFFALSE 71367
// exit ;
71365: GO 71491
// x := GetX ( enemy ) ;
71367: LD_ADDR_VAR 0 4
71371: PUSH
71372: LD_VAR 0 2
71376: PPUSH
71377: CALL_OW 250
71381: ST_TO_ADDR
// y := GetY ( enemy ) ;
71382: LD_ADDR_VAR 0 5
71386: PUSH
71387: LD_VAR 0 2
71391: PPUSH
71392: CALL_OW 251
71396: ST_TO_ADDR
// if ValidHex ( x , y ) then
71397: LD_VAR 0 4
71401: PPUSH
71402: LD_VAR 0 5
71406: PPUSH
71407: CALL_OW 488
71411: IFFALSE 71491
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
71413: LD_VAR 0 2
71417: PPUSH
71418: CALL_OW 247
71422: PUSH
71423: LD_INT 3
71425: PUSH
71426: LD_INT 2
71428: PUSH
71429: EMPTY
71430: LIST
71431: LIST
71432: IN
71433: PUSH
71434: LD_VAR 0 1
71438: PPUSH
71439: CALL_OW 255
71443: PPUSH
71444: LD_VAR 0 2
71448: PPUSH
71449: CALL_OW 292
71453: OR
71454: IFFALSE 71472
// ComAttackUnit ( unit , enemy ) else
71456: LD_VAR 0 1
71460: PPUSH
71461: LD_VAR 0 2
71465: PPUSH
71466: CALL_OW 115
71470: GO 71491
// ComAgressiveMove ( unit , x , y ) ;
71472: LD_VAR 0 1
71476: PPUSH
71477: LD_VAR 0 4
71481: PPUSH
71482: LD_VAR 0 5
71486: PPUSH
71487: CALL_OW 114
// end ;
71491: LD_VAR 0 3
71495: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
71496: LD_INT 0
71498: PPUSH
71499: PPUSH
71500: PPUSH
// list := AreaToList ( area , 0 ) ;
71501: LD_ADDR_VAR 0 5
71505: PUSH
71506: LD_VAR 0 1
71510: PPUSH
71511: LD_INT 0
71513: PPUSH
71514: CALL_OW 517
71518: ST_TO_ADDR
// if not list then
71519: LD_VAR 0 5
71523: NOT
71524: IFFALSE 71528
// exit ;
71526: GO 71658
// if all then
71528: LD_VAR 0 2
71532: IFFALSE 71620
// begin for i := 1 to list [ 1 ] do
71534: LD_ADDR_VAR 0 4
71538: PUSH
71539: DOUBLE
71540: LD_INT 1
71542: DEC
71543: ST_TO_ADDR
71544: LD_VAR 0 5
71548: PUSH
71549: LD_INT 1
71551: ARRAY
71552: PUSH
71553: FOR_TO
71554: IFFALSE 71616
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
71556: LD_ADDR_VAR 0 3
71560: PUSH
71561: LD_VAR 0 3
71565: PPUSH
71566: LD_VAR 0 3
71570: PUSH
71571: LD_INT 1
71573: PLUS
71574: PPUSH
71575: LD_VAR 0 5
71579: PUSH
71580: LD_INT 1
71582: ARRAY
71583: PUSH
71584: LD_VAR 0 4
71588: ARRAY
71589: PUSH
71590: LD_VAR 0 5
71594: PUSH
71595: LD_INT 2
71597: ARRAY
71598: PUSH
71599: LD_VAR 0 4
71603: ARRAY
71604: PUSH
71605: EMPTY
71606: LIST
71607: LIST
71608: PPUSH
71609: CALL_OW 1
71613: ST_TO_ADDR
71614: GO 71553
71616: POP
71617: POP
// exit ;
71618: GO 71658
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
71620: LD_ADDR_VAR 0 3
71624: PUSH
71625: LD_VAR 0 5
71629: PUSH
71630: LD_INT 1
71632: ARRAY
71633: PUSH
71634: LD_INT 1
71636: ARRAY
71637: PUSH
71638: LD_VAR 0 5
71642: PUSH
71643: LD_INT 2
71645: ARRAY
71646: PUSH
71647: LD_INT 1
71649: ARRAY
71650: PUSH
71651: EMPTY
71652: LIST
71653: LIST
71654: PUSH
71655: EMPTY
71656: LIST
71657: ST_TO_ADDR
// end ;
71658: LD_VAR 0 3
71662: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
71663: LD_INT 0
71665: PPUSH
71666: PPUSH
// list := AreaToList ( area , 0 ) ;
71667: LD_ADDR_VAR 0 4
71671: PUSH
71672: LD_VAR 0 1
71676: PPUSH
71677: LD_INT 0
71679: PPUSH
71680: CALL_OW 517
71684: ST_TO_ADDR
// if not list then
71685: LD_VAR 0 4
71689: NOT
71690: IFFALSE 71694
// exit ;
71692: GO 71735
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
71694: LD_ADDR_VAR 0 3
71698: PUSH
71699: LD_VAR 0 4
71703: PUSH
71704: LD_INT 1
71706: ARRAY
71707: PUSH
71708: LD_INT 1
71710: ARRAY
71711: PUSH
71712: LD_VAR 0 4
71716: PUSH
71717: LD_INT 2
71719: ARRAY
71720: PUSH
71721: LD_INT 1
71723: ARRAY
71724: PUSH
71725: LD_VAR 0 2
71729: PUSH
71730: EMPTY
71731: LIST
71732: LIST
71733: LIST
71734: ST_TO_ADDR
// end ;
71735: LD_VAR 0 3
71739: RET
// export function First ( array ) ; begin
71740: LD_INT 0
71742: PPUSH
// if not array then
71743: LD_VAR 0 1
71747: NOT
71748: IFFALSE 71752
// exit ;
71750: GO 71766
// result := array [ 1 ] ;
71752: LD_ADDR_VAR 0 2
71756: PUSH
71757: LD_VAR 0 1
71761: PUSH
71762: LD_INT 1
71764: ARRAY
71765: ST_TO_ADDR
// end ;
71766: LD_VAR 0 2
71770: RET
// export function Last ( array ) ; begin
71771: LD_INT 0
71773: PPUSH
// if not array then
71774: LD_VAR 0 1
71778: NOT
71779: IFFALSE 71783
// exit ;
71781: GO 71799
// result := array [ array ] ;
71783: LD_ADDR_VAR 0 2
71787: PUSH
71788: LD_VAR 0 1
71792: PUSH
71793: LD_VAR 0 1
71797: ARRAY
71798: ST_TO_ADDR
// end ;
71799: LD_VAR 0 2
71803: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
71804: LD_INT 0
71806: PPUSH
71807: PPUSH
// result := [ ] ;
71808: LD_ADDR_VAR 0 5
71812: PUSH
71813: EMPTY
71814: ST_TO_ADDR
// if not array then
71815: LD_VAR 0 1
71819: NOT
71820: IFFALSE 71824
// exit ;
71822: GO 71936
// for i := 1 to array do
71824: LD_ADDR_VAR 0 6
71828: PUSH
71829: DOUBLE
71830: LD_INT 1
71832: DEC
71833: ST_TO_ADDR
71834: LD_VAR 0 1
71838: PUSH
71839: FOR_TO
71840: IFFALSE 71934
// if array [ i ] [ index ] = value then
71842: LD_VAR 0 1
71846: PUSH
71847: LD_VAR 0 6
71851: ARRAY
71852: PUSH
71853: LD_VAR 0 2
71857: ARRAY
71858: PUSH
71859: LD_VAR 0 3
71863: EQUAL
71864: IFFALSE 71932
// begin if indexColumn then
71866: LD_VAR 0 4
71870: IFFALSE 71906
// result := Join ( result , array [ i ] [ indexColumn ] ) else
71872: LD_ADDR_VAR 0 5
71876: PUSH
71877: LD_VAR 0 5
71881: PPUSH
71882: LD_VAR 0 1
71886: PUSH
71887: LD_VAR 0 6
71891: ARRAY
71892: PUSH
71893: LD_VAR 0 4
71897: ARRAY
71898: PPUSH
71899: CALL 67274 0 2
71903: ST_TO_ADDR
71904: GO 71932
// result := Join ( result , array [ i ] ) ;
71906: LD_ADDR_VAR 0 5
71910: PUSH
71911: LD_VAR 0 5
71915: PPUSH
71916: LD_VAR 0 1
71920: PUSH
71921: LD_VAR 0 6
71925: ARRAY
71926: PPUSH
71927: CALL 67274 0 2
71931: ST_TO_ADDR
// end ;
71932: GO 71839
71934: POP
71935: POP
// end ;
71936: LD_VAR 0 5
71940: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
71941: LD_INT 0
71943: PPUSH
71944: PPUSH
71945: PPUSH
// if btype = b_depot then
71946: LD_VAR 0 2
71950: PUSH
71951: LD_INT 0
71953: EQUAL
71954: IFFALSE 71966
// begin result := true ;
71956: LD_ADDR_VAR 0 3
71960: PUSH
71961: LD_INT 1
71963: ST_TO_ADDR
// exit ;
71964: GO 72082
// end ; pom := GetBase ( depot ) ;
71966: LD_ADDR_VAR 0 4
71970: PUSH
71971: LD_VAR 0 1
71975: PPUSH
71976: CALL_OW 274
71980: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
71981: LD_ADDR_VAR 0 5
71985: PUSH
71986: LD_VAR 0 2
71990: PPUSH
71991: LD_VAR 0 1
71995: PPUSH
71996: CALL_OW 248
72000: PPUSH
72001: CALL_OW 450
72005: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
72006: LD_ADDR_VAR 0 3
72010: PUSH
72011: LD_VAR 0 4
72015: PPUSH
72016: LD_INT 1
72018: PPUSH
72019: CALL_OW 275
72023: PUSH
72024: LD_VAR 0 5
72028: PUSH
72029: LD_INT 1
72031: ARRAY
72032: GREATEREQUAL
72033: PUSH
72034: LD_VAR 0 4
72038: PPUSH
72039: LD_INT 2
72041: PPUSH
72042: CALL_OW 275
72046: PUSH
72047: LD_VAR 0 5
72051: PUSH
72052: LD_INT 2
72054: ARRAY
72055: GREATEREQUAL
72056: AND
72057: PUSH
72058: LD_VAR 0 4
72062: PPUSH
72063: LD_INT 3
72065: PPUSH
72066: CALL_OW 275
72070: PUSH
72071: LD_VAR 0 5
72075: PUSH
72076: LD_INT 3
72078: ARRAY
72079: GREATEREQUAL
72080: AND
72081: ST_TO_ADDR
// end ;
72082: LD_VAR 0 3
72086: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
72087: LD_INT 0
72089: PPUSH
// if not vehicles or not parkingPoint then
72090: LD_VAR 0 1
72094: NOT
72095: PUSH
72096: LD_VAR 0 2
72100: NOT
72101: OR
72102: IFFALSE 72106
// exit ;
72104: GO 72204
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
72106: LD_ADDR_VAR 0 1
72110: PUSH
72111: LD_VAR 0 1
72115: PPUSH
72116: LD_INT 50
72118: PUSH
72119: EMPTY
72120: LIST
72121: PUSH
72122: LD_INT 3
72124: PUSH
72125: LD_INT 92
72127: PUSH
72128: LD_VAR 0 2
72132: PUSH
72133: LD_INT 1
72135: ARRAY
72136: PUSH
72137: LD_VAR 0 2
72141: PUSH
72142: LD_INT 2
72144: ARRAY
72145: PUSH
72146: LD_INT 8
72148: PUSH
72149: EMPTY
72150: LIST
72151: LIST
72152: LIST
72153: LIST
72154: PUSH
72155: EMPTY
72156: LIST
72157: LIST
72158: PUSH
72159: EMPTY
72160: LIST
72161: LIST
72162: PPUSH
72163: CALL_OW 72
72167: ST_TO_ADDR
// if not vehicles then
72168: LD_VAR 0 1
72172: NOT
72173: IFFALSE 72177
// exit ;
72175: GO 72204
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
72177: LD_VAR 0 1
72181: PPUSH
72182: LD_VAR 0 2
72186: PUSH
72187: LD_INT 1
72189: ARRAY
72190: PPUSH
72191: LD_VAR 0 2
72195: PUSH
72196: LD_INT 2
72198: ARRAY
72199: PPUSH
72200: CALL_OW 111
// end ;
72204: LD_VAR 0 3
72208: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
72209: LD_INT 0
72211: PPUSH
72212: PPUSH
72213: PPUSH
// if not side or not area then
72214: LD_VAR 0 1
72218: NOT
72219: PUSH
72220: LD_VAR 0 2
72224: NOT
72225: OR
72226: IFFALSE 72230
// exit ;
72228: GO 72349
// tmp := AreaToList ( area , 0 ) ;
72230: LD_ADDR_VAR 0 5
72234: PUSH
72235: LD_VAR 0 2
72239: PPUSH
72240: LD_INT 0
72242: PPUSH
72243: CALL_OW 517
72247: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
72248: LD_ADDR_VAR 0 4
72252: PUSH
72253: DOUBLE
72254: LD_INT 1
72256: DEC
72257: ST_TO_ADDR
72258: LD_VAR 0 5
72262: PUSH
72263: LD_INT 1
72265: ARRAY
72266: PUSH
72267: FOR_TO
72268: IFFALSE 72347
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
72270: LD_VAR 0 5
72274: PUSH
72275: LD_INT 1
72277: ARRAY
72278: PUSH
72279: LD_VAR 0 4
72283: ARRAY
72284: PPUSH
72285: LD_VAR 0 5
72289: PUSH
72290: LD_INT 2
72292: ARRAY
72293: PUSH
72294: LD_VAR 0 4
72298: ARRAY
72299: PPUSH
72300: CALL_OW 351
72304: IFFALSE 72345
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
72306: LD_VAR 0 5
72310: PUSH
72311: LD_INT 1
72313: ARRAY
72314: PUSH
72315: LD_VAR 0 4
72319: ARRAY
72320: PPUSH
72321: LD_VAR 0 5
72325: PUSH
72326: LD_INT 2
72328: ARRAY
72329: PUSH
72330: LD_VAR 0 4
72334: ARRAY
72335: PPUSH
72336: LD_VAR 0 1
72340: PPUSH
72341: CALL_OW 244
// end ;
72345: GO 72267
72347: POP
72348: POP
// end ; end_of_file
72349: LD_VAR 0 3
72353: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
72354: LD_VAR 0 1
72358: PUSH
72359: LD_INT 200
72361: DOUBLE
72362: GREATEREQUAL
72363: IFFALSE 72371
72365: LD_INT 299
72367: DOUBLE
72368: LESSEQUAL
72369: IFTRUE 72373
72371: GO 72405
72373: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
72374: LD_VAR 0 1
72378: PPUSH
72379: LD_VAR 0 2
72383: PPUSH
72384: LD_VAR 0 3
72388: PPUSH
72389: LD_VAR 0 4
72393: PPUSH
72394: LD_VAR 0 5
72398: PPUSH
72399: CALL 25065 0 5
72403: GO 72482
72405: LD_INT 300
72407: DOUBLE
72408: GREATEREQUAL
72409: IFFALSE 72417
72411: LD_INT 399
72413: DOUBLE
72414: LESSEQUAL
72415: IFTRUE 72419
72417: GO 72481
72419: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
72420: LD_VAR 0 1
72424: PPUSH
72425: LD_VAR 0 2
72429: PPUSH
72430: LD_VAR 0 3
72434: PPUSH
72435: LD_VAR 0 4
72439: PPUSH
72440: LD_VAR 0 5
72444: PPUSH
72445: LD_VAR 0 6
72449: PPUSH
72450: LD_VAR 0 7
72454: PPUSH
72455: LD_VAR 0 8
72459: PPUSH
72460: LD_VAR 0 9
72464: PPUSH
72465: LD_VAR 0 10
72469: PPUSH
72470: LD_VAR 0 11
72474: PPUSH
72475: CALL 21390 0 11
72479: GO 72482
72481: POP
// end ;
72482: PPOPN 11
72484: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
72485: LD_VAR 0 1
72489: PPUSH
72490: LD_VAR 0 2
72494: PPUSH
72495: LD_VAR 0 3
72499: PPUSH
72500: LD_VAR 0 4
72504: PPUSH
72505: LD_VAR 0 5
72509: PPUSH
72510: CALL 24801 0 5
// end ; end_of_file
72514: PPOPN 5
72516: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
72517: LD_VAR 0 1
72521: PPUSH
72522: LD_VAR 0 2
72526: PPUSH
72527: LD_VAR 0 3
72531: PPUSH
72532: LD_VAR 0 4
72536: PPUSH
72537: LD_VAR 0 5
72541: PPUSH
72542: LD_VAR 0 6
72546: PPUSH
72547: CALL 9042 0 6
// end ;
72551: PPOPN 6
72553: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
72554: LD_INT 0
72556: PPUSH
// begin if not units then
72557: LD_VAR 0 1
72561: NOT
72562: IFFALSE 72566
// exit ;
72564: GO 72566
// end ;
72566: PPOPN 7
72568: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
72569: CALL 8929 0 0
// end ;
72573: PPOPN 1
72575: END
