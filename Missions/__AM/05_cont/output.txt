// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RandomizeAll ;
  11: CALL_OW 11
// Init ;
  15: CALL 79 0 0
// InitRestrictions ;
  19: CALL 207 0 0
// if debug then
  23: LD_EXP 1
  27: IFFALSE 33
// DebugMode ;
  29: CALL 288 0 0
// SpawnApeman ( apemanStartArea , 2 ) ;
  33: LD_INT 12
  35: PPUSH
  36: LD_INT 2
  38: PPUSH
  39: CALL 595 0 2
// SpawnApeman ( apemanArea , [ 10 , 8 , 7 ] [ Difficulty ] ) ;
  43: LD_INT 11
  45: PPUSH
  46: LD_INT 10
  48: PUSH
  49: LD_INT 8
  51: PUSH
  52: LD_INT 7
  54: PUSH
  55: EMPTY
  56: LIST
  57: LIST
  58: LIST
  59: PUSH
  60: LD_OWVAR 67
  64: ARRAY
  65: PPUSH
  66: CALL 595 0 2
// PrepareAmericans ;
  70: CALL 1194 0 0
// Action ;
  74: CALL 2130 0 0
// end ;
  78: END
// export debug ; export mission_prefix , mission_prefix_prev ; export deltaBuilded , denisArrives , Delta , radar_allowed , first_apeman_tamed , apeman_army , radar_researched , radar_builded ; export apeman_counter , arab_spotted , end_mission , apeKillCounter ; function Init ; begin
  79: LD_INT 0
  81: PPUSH
// debug := false ;
  82: LD_ADDR_EXP 1
  86: PUSH
  87: LD_INT 0
  89: ST_TO_ADDR
// mission_prefix := 05_ ;
  90: LD_ADDR_EXP 2
  94: PUSH
  95: LD_STRING 05_
  97: ST_TO_ADDR
// mission_prefix_prev := 05a_ ;
  98: LD_ADDR_EXP 3
 102: PUSH
 103: LD_STRING 05a_
 105: ST_TO_ADDR
// deltaBuilded := false ;
 106: LD_ADDR_EXP 4
 110: PUSH
 111: LD_INT 0
 113: ST_TO_ADDR
// denisArrives := false ;
 114: LD_ADDR_EXP 5
 118: PUSH
 119: LD_INT 0
 121: ST_TO_ADDR
// radar_allowed := false ;
 122: LD_ADDR_EXP 7
 126: PUSH
 127: LD_INT 0
 129: ST_TO_ADDR
// first_apeman_tamed := false ;
 130: LD_ADDR_EXP 8
 134: PUSH
 135: LD_INT 0
 137: ST_TO_ADDR
// arab_spotted := false ;
 138: LD_ADDR_EXP 13
 142: PUSH
 143: LD_INT 0
 145: ST_TO_ADDR
// end_mission := false ;
 146: LD_ADDR_EXP 14
 150: PUSH
 151: LD_INT 0
 153: ST_TO_ADDR
// apeman_army := false ;
 154: LD_ADDR_EXP 9
 158: PUSH
 159: LD_INT 0
 161: ST_TO_ADDR
// radar_researched := false ;
 162: LD_ADDR_EXP 10
 166: PUSH
 167: LD_INT 0
 169: ST_TO_ADDR
// radar_builded := false ;
 170: LD_ADDR_EXP 11
 174: PUSH
 175: LD_INT 0
 177: ST_TO_ADDR
// apeman_counter := 0 ;
 178: LD_ADDR_EXP 12
 182: PUSH
 183: LD_INT 0
 185: ST_TO_ADDR
// Delta := 0 ;
 186: LD_ADDR_EXP 6
 190: PUSH
 191: LD_INT 0
 193: ST_TO_ADDR
// apeKillCounter := 0 ;
 194: LD_ADDR_EXP 15
 198: PUSH
 199: LD_INT 0
 201: ST_TO_ADDR
// end ;
 202: LD_VAR 0 1
 206: RET
// function InitRestrictions ; begin
 207: LD_INT 0
 209: PPUSH
// SetRestrict ( b_lab_half , 1 , state_enabled ) ;
 210: LD_INT 7
 212: PPUSH
 213: LD_INT 1
 215: PPUSH
 216: LD_INT 1
 218: PPUSH
 219: CALL_OW 324
// SetRestrict ( b_lab_full , 1 , state_enabled ) ;
 223: LD_INT 8
 225: PPUSH
 226: LD_INT 1
 228: PPUSH
 229: LD_INT 1
 231: PPUSH
 232: CALL_OW 324
// SetRestrict ( b_lab_weapon , 1 , state_enabled ) ;
 236: LD_INT 10
 238: PPUSH
 239: LD_INT 1
 241: PPUSH
 242: LD_INT 1
 244: PPUSH
 245: CALL_OW 324
// SetTech ( tech_gatling , 1 , LoadVariable ( GatlingInGamma , 1 ) ) ;
 249: LD_INT 69
 251: PPUSH
 252: LD_INT 1
 254: PPUSH
 255: LD_STRING GatlingInGamma
 257: PPUSH
 258: LD_INT 1
 260: PPUSH
 261: CALL_OW 30
 265: PPUSH
 266: CALL_OW 322
// SetTech ( tech_weap1 , 1 , state_enabled ) ;
 270: LD_INT 51
 272: PPUSH
 273: LD_INT 1
 275: PPUSH
 276: LD_INT 1
 278: PPUSH
 279: CALL_OW 322
// end ;
 283: LD_VAR 0 1
 287: RET
// function DebugMode ; begin
 288: LD_INT 0
 290: PPUSH
// FogOff ( 1 ) ;
 291: LD_INT 1
 293: PPUSH
 294: CALL_OW 344
// Difficulty := 2 ;
 298: LD_ADDR_OWVAR 67
 302: PUSH
 303: LD_INT 2
 305: ST_TO_ADDR
// end ;
 306: LD_VAR 0 1
 310: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 0 ] ] ) >= 7 do
 311: LD_INT 22
 313: PUSH
 314: LD_INT 1
 316: PUSH
 317: EMPTY
 318: LIST
 319: LIST
 320: PUSH
 321: LD_INT 23
 323: PUSH
 324: LD_INT 0
 326: PUSH
 327: EMPTY
 328: LIST
 329: LIST
 330: PUSH
 331: EMPTY
 332: LIST
 333: LIST
 334: PPUSH
 335: CALL_OW 69
 339: PUSH
 340: LD_INT 7
 342: GREATEREQUAL
 343: IFFALSE 355
 345: GO 347
 347: DISABLE
// SetAchievement ( ACH_TAME ) ;
 348: LD_STRING ACH_TAME
 350: PPUSH
 351: CALL_OW 543
 355: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_bweapon , us_radar ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_radar ] ] ) do
 356: LD_INT 22
 358: PUSH
 359: LD_INT 1
 361: PUSH
 362: EMPTY
 363: LIST
 364: LIST
 365: PUSH
 366: LD_INT 35
 368: PUSH
 369: LD_INT 11
 371: PUSH
 372: EMPTY
 373: LIST
 374: LIST
 375: PUSH
 376: EMPTY
 377: LIST
 378: LIST
 379: PPUSH
 380: CALL_OW 69
 384: PUSH
 385: LD_INT 22
 387: PUSH
 388: LD_INT 1
 390: PUSH
 391: EMPTY
 392: LIST
 393: LIST
 394: PUSH
 395: LD_INT 34
 397: PUSH
 398: LD_INT 11
 400: PUSH
 401: EMPTY
 402: LIST
 403: LIST
 404: PUSH
 405: EMPTY
 406: LIST
 407: LIST
 408: PPUSH
 409: CALL_OW 69
 413: AND
 414: IFFALSE 426
 416: GO 418
 418: DISABLE
// SetAchievement ( ACH_RADAR ) ; end_of_file
 419: LD_STRING ACH_RADAR
 421: PPUSH
 422: CALL_OW 543
 426: END
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 427: LD_INT 0
 429: PPUSH
// uc_side := side ;
 430: LD_ADDR_OWVAR 20
 434: PUSH
 435: LD_VAR 0 1
 439: ST_TO_ADDR
// uc_nation := nation ;
 440: LD_ADDR_OWVAR 21
 444: PUSH
 445: LD_VAR 0 2
 449: ST_TO_ADDR
// vc_chassis := chassis ;
 450: LD_ADDR_OWVAR 37
 454: PUSH
 455: LD_VAR 0 3
 459: ST_TO_ADDR
// vc_engine := engine ;
 460: LD_ADDR_OWVAR 39
 464: PUSH
 465: LD_VAR 0 4
 469: ST_TO_ADDR
// vc_control := control ;
 470: LD_ADDR_OWVAR 38
 474: PUSH
 475: LD_VAR 0 5
 479: ST_TO_ADDR
// vc_weapon := weapon ;
 480: LD_ADDR_OWVAR 40
 484: PUSH
 485: LD_VAR 0 6
 489: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 490: LD_ADDR_OWVAR 41
 494: PUSH
 495: LD_VAR 0 7
 499: ST_TO_ADDR
// result := CreateVehicle ;
 500: LD_ADDR_VAR 0 8
 504: PUSH
 505: CALL_OW 45
 509: ST_TO_ADDR
// end ;
 510: LD_VAR 0 8
 514: RET
// export function SayX ( units , ident ) ; var i ; begin
 515: LD_INT 0
 517: PPUSH
 518: PPUSH
// result := false ;
 519: LD_ADDR_VAR 0 3
 523: PUSH
 524: LD_INT 0
 526: ST_TO_ADDR
// if not units then
 527: LD_VAR 0 1
 531: NOT
 532: IFFALSE 536
// exit ;
 534: GO 590
// for i in units do
 536: LD_ADDR_VAR 0 4
 540: PUSH
 541: LD_VAR 0 1
 545: PUSH
 546: FOR_IN
 547: IFFALSE 588
// if IsOk ( i ) then
 549: LD_VAR 0 4
 553: PPUSH
 554: CALL_OW 302
 558: IFFALSE 586
// begin Say ( i , ident ) ;
 560: LD_VAR 0 4
 564: PPUSH
 565: LD_VAR 0 2
 569: PPUSH
 570: CALL_OW 88
// result := i ;
 574: LD_ADDR_VAR 0 3
 578: PUSH
 579: LD_VAR 0 4
 583: ST_TO_ADDR
// break ;
 584: GO 588
// end ;
 586: GO 546
 588: POP
 589: POP
// end ;
 590: LD_VAR 0 3
 594: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 595: LD_INT 0
 597: PPUSH
 598: PPUSH
// InitUc ;
 599: CALL_OW 18
// InitHc ;
 603: CALL_OW 19
// uc_side := 0 ;
 607: LD_ADDR_OWVAR 20
 611: PUSH
 612: LD_INT 0
 614: ST_TO_ADDR
// uc_nation := 0 ;
 615: LD_ADDR_OWVAR 21
 619: PUSH
 620: LD_INT 0
 622: ST_TO_ADDR
// for i = 1 to amount do
 623: LD_ADDR_VAR 0 4
 627: PUSH
 628: DOUBLE
 629: LD_INT 1
 631: DEC
 632: ST_TO_ADDR
 633: LD_VAR 0 2
 637: PUSH
 638: FOR_TO
 639: IFFALSE 721
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 641: LD_ADDR_OWVAR 29
 645: PUSH
 646: LD_INT 9
 648: PPUSH
 649: LD_INT 12
 651: PPUSH
 652: CALL_OW 12
 656: PUSH
 657: LD_INT 9
 659: PPUSH
 660: LD_INT 12
 662: PPUSH
 663: CALL_OW 12
 667: PUSH
 668: EMPTY
 669: LIST
 670: LIST
 671: ST_TO_ADDR
// hc_agressivity := rand ( - 5 , 5 ) ;
 672: LD_ADDR_OWVAR 35
 676: PUSH
 677: LD_INT 5
 679: NEG
 680: PPUSH
 681: LD_INT 5
 683: PPUSH
 684: CALL_OW 12
 688: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 689: LD_INT 0
 691: PPUSH
 692: LD_INT 12
 694: PPUSH
 695: LD_INT 1
 697: PPUSH
 698: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 702: CALL_OW 44
 706: PPUSH
 707: LD_VAR 0 1
 711: PPUSH
 712: LD_INT 0
 714: PPUSH
 715: CALL_OW 49
// end ;
 719: GO 638
 721: POP
 722: POP
// InitHc ;
 723: CALL_OW 19
// end ;
 727: LD_VAR 0 3
 731: RET
// export function Attack ( unit , enemy_list ) ; var target , targets_list ; begin
 732: LD_INT 0
 734: PPUSH
 735: PPUSH
 736: PPUSH
// if not unit then
 737: LD_VAR 0 1
 741: NOT
 742: IFFALSE 746
// exit ;
 744: GO 1189
// if IsInUnit ( unit ) then
 746: LD_VAR 0 1
 750: PPUSH
 751: CALL_OW 310
 755: IFFALSE 772
// unit := IsDrivenBy ( unit ) ;
 757: LD_ADDR_VAR 0 1
 761: PUSH
 762: LD_VAR 0 1
 766: PPUSH
 767: CALL_OW 311
 771: ST_TO_ADDR
// targets_list := [ ] ;
 772: LD_ADDR_VAR 0 5
 776: PUSH
 777: EMPTY
 778: ST_TO_ADDR
// target := UnitFilter ( enemy_list , [ [ f_lives , 250 ] , [ f_not , [ f_weapon , us_cargo_bay ] ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 779: LD_ADDR_VAR 0 4
 783: PUSH
 784: LD_VAR 0 2
 788: PPUSH
 789: LD_INT 24
 791: PUSH
 792: LD_INT 250
 794: PUSH
 795: EMPTY
 796: LIST
 797: LIST
 798: PUSH
 799: LD_INT 3
 801: PUSH
 802: LD_INT 34
 804: PUSH
 805: LD_INT 12
 807: PUSH
 808: EMPTY
 809: LIST
 810: LIST
 811: PUSH
 812: EMPTY
 813: LIST
 814: LIST
 815: PUSH
 816: LD_INT 21
 818: PUSH
 819: LD_INT 2
 821: PUSH
 822: EMPTY
 823: LIST
 824: LIST
 825: PUSH
 826: LD_INT 58
 828: PUSH
 829: EMPTY
 830: LIST
 831: PUSH
 832: EMPTY
 833: LIST
 834: LIST
 835: LIST
 836: LIST
 837: PPUSH
 838: CALL_OW 72
 842: ST_TO_ADDR
// if GetDistUnits ( NearestUnitToUnit ( target , unit ) , unit ) < 11 and not IsInUnit ( unit ) then
 843: LD_VAR 0 4
 847: PPUSH
 848: LD_VAR 0 1
 852: PPUSH
 853: CALL_OW 74
 857: PPUSH
 858: LD_VAR 0 1
 862: PPUSH
 863: CALL_OW 296
 867: PUSH
 868: LD_INT 11
 870: LESS
 871: PUSH
 872: LD_VAR 0 1
 876: PPUSH
 877: CALL_OW 310
 881: NOT
 882: AND
 883: IFFALSE 911
// begin ComEnterUnit ( unit , NearestUnitToUnit ( target , unit ) ) ;
 885: LD_VAR 0 1
 889: PPUSH
 890: LD_VAR 0 4
 894: PPUSH
 895: LD_VAR 0 1
 899: PPUSH
 900: CALL_OW 74
 904: PPUSH
 905: CALL_OW 120
// exit ;
 909: GO 1189
// end ; targets_list := [ UnitFilter ( enemy_list , [ [ f_type , unit_human ] , [ f_not , [ f_inside ] ] ] ) , UnitFilter ( enemy_list , [ f_type , unit_vehicle ] ) , UnitFilter ( enemy_list , [ [ f_type , unit_building ] , [ f_not , [ f_empty ] ] ] ) , enemy_list ] ;
 911: LD_ADDR_VAR 0 5
 915: PUSH
 916: LD_VAR 0 2
 920: PPUSH
 921: LD_INT 21
 923: PUSH
 924: LD_INT 1
 926: PUSH
 927: EMPTY
 928: LIST
 929: LIST
 930: PUSH
 931: LD_INT 3
 933: PUSH
 934: LD_INT 54
 936: PUSH
 937: EMPTY
 938: LIST
 939: PUSH
 940: EMPTY
 941: LIST
 942: LIST
 943: PUSH
 944: EMPTY
 945: LIST
 946: LIST
 947: PPUSH
 948: CALL_OW 72
 952: PUSH
 953: LD_VAR 0 2
 957: PPUSH
 958: LD_INT 21
 960: PUSH
 961: LD_INT 2
 963: PUSH
 964: EMPTY
 965: LIST
 966: LIST
 967: PPUSH
 968: CALL_OW 72
 972: PUSH
 973: LD_VAR 0 2
 977: PPUSH
 978: LD_INT 21
 980: PUSH
 981: LD_INT 3
 983: PUSH
 984: EMPTY
 985: LIST
 986: LIST
 987: PUSH
 988: LD_INT 3
 990: PUSH
 991: LD_INT 58
 993: PUSH
 994: EMPTY
 995: LIST
 996: PUSH
 997: EMPTY
 998: LIST
 999: LIST
1000: PUSH
1001: EMPTY
1002: LIST
1003: LIST
1004: PPUSH
1005: CALL_OW 72
1009: PUSH
1010: LD_VAR 0 2
1014: PUSH
1015: EMPTY
1016: LIST
1017: LIST
1018: LIST
1019: LIST
1020: ST_TO_ADDR
// for target in targets_list do
1021: LD_ADDR_VAR 0 4
1025: PUSH
1026: LD_VAR 0 5
1030: PUSH
1031: FOR_IN
1032: IFFALSE 1187
// begin if target then
1034: LD_VAR 0 4
1038: IFFALSE 1185
// if GetTag ( unit ) = 11 and ( GetType ( NearestUnitToUnit ( target , unit ) ) = unit_building or GetWeapon ( NearestUnitToUnit ( target , unit ) ) = us_cargo_bay ) then
1040: LD_VAR 0 1
1044: PPUSH
1045: CALL_OW 110
1049: PUSH
1050: LD_INT 11
1052: EQUAL
1053: PUSH
1054: LD_VAR 0 4
1058: PPUSH
1059: LD_VAR 0 1
1063: PPUSH
1064: CALL_OW 74
1068: PPUSH
1069: CALL_OW 247
1073: PUSH
1074: LD_INT 3
1076: EQUAL
1077: PUSH
1078: LD_VAR 0 4
1082: PPUSH
1083: LD_VAR 0 1
1087: PPUSH
1088: CALL_OW 74
1092: PPUSH
1093: CALL_OW 264
1097: PUSH
1098: LD_INT 12
1100: EQUAL
1101: OR
1102: AND
1103: IFFALSE 1149
// begin ComPlaceDelayedCharge ( unit , 0 , 0 , NearestUnitToUnit ( target , unit ) ) ;
1105: LD_VAR 0 1
1109: PPUSH
1110: LD_INT 0
1112: PPUSH
1113: LD_INT 0
1115: PPUSH
1116: LD_VAR 0 4
1120: PPUSH
1121: LD_VAR 0 1
1125: PPUSH
1126: CALL_OW 74
1130: PPUSH
1131: CALL_OW 132
// SetTag ( unit , 0 ) ;
1135: LD_VAR 0 1
1139: PPUSH
1140: LD_INT 0
1142: PPUSH
1143: CALL_OW 109
// end else
1147: GO 1185
// if not HasTask ( unit ) then
1149: LD_VAR 0 1
1153: PPUSH
1154: CALL_OW 314
1158: NOT
1159: IFFALSE 1185
// ComAttackUnit ( unit , NearestUnitToUnit ( target , unit ) ) ;
1161: LD_VAR 0 1
1165: PPUSH
1166: LD_VAR 0 4
1170: PPUSH
1171: LD_VAR 0 1
1175: PPUSH
1176: CALL_OW 74
1180: PPUSH
1181: CALL_OW 115
// end ;
1185: GO 1031
1187: POP
1188: POP
// end ; end_of_file
1189: LD_VAR 0 3
1193: RET
// export JMM , Gladstone , Harrison , Denis , Brown , Donaldson , Lisa , Frank , Bobby , Cyrus ; export others ; export function PrepareAmericans ; var i , points , veh , tmp ; begin
1194: LD_INT 0
1196: PPUSH
1197: PPUSH
1198: PPUSH
1199: PPUSH
1200: PPUSH
// uc_nation := 1 ;
1201: LD_ADDR_OWVAR 21
1205: PUSH
1206: LD_INT 1
1208: ST_TO_ADDR
// uc_side := 4 ;
1209: LD_ADDR_OWVAR 20
1213: PUSH
1214: LD_INT 4
1216: ST_TO_ADDR
// Denis := PrepareUnit ( Denis , false ,  ) ;
1217: LD_ADDR_EXP 19
1221: PUSH
1222: LD_STRING Denis
1224: PPUSH
1225: LD_INT 0
1227: PPUSH
1228: LD_STRING 
1230: PPUSH
1231: CALL 22413 0 3
1235: ST_TO_ADDR
// Harrison := PrepareUnit ( Harisson , false ,  ) ;
1236: LD_ADDR_EXP 18
1240: PUSH
1241: LD_STRING Harisson
1243: PPUSH
1244: LD_INT 0
1246: PPUSH
1247: LD_STRING 
1249: PPUSH
1250: CALL 22413 0 3
1254: ST_TO_ADDR
// uc_side := 1 ;
1255: LD_ADDR_OWVAR 20
1259: PUSH
1260: LD_INT 1
1262: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debug ) , mission_prefix_prev ) ;
1263: LD_ADDR_EXP 16
1267: PUSH
1268: LD_STRING JMM
1270: PPUSH
1271: LD_EXP 1
1275: NOT
1276: PPUSH
1277: LD_EXP 3
1281: PPUSH
1282: CALL 22413 0 3
1286: ST_TO_ADDR
// Gladstone := PrepareUnit ( Gladstone , false , mission_prefix_prev ) ;
1287: LD_ADDR_EXP 17
1291: PUSH
1292: LD_STRING Gladstone
1294: PPUSH
1295: LD_INT 0
1297: PPUSH
1298: LD_EXP 3
1302: PPUSH
1303: CALL 22413 0 3
1307: ST_TO_ADDR
// if LoadVariable ( BrownInDelta , debug ) then
1308: LD_STRING BrownInDelta
1310: PPUSH
1311: LD_EXP 1
1315: PPUSH
1316: CALL_OW 30
1320: IFFALSE 1362
// begin Brown := PrepareUnit ( Brown , ( not debug ) , mission_prefix_prev ) ;
1322: LD_ADDR_EXP 20
1326: PUSH
1327: LD_STRING Brown
1329: PPUSH
1330: LD_EXP 1
1334: NOT
1335: PPUSH
1336: LD_EXP 3
1340: PPUSH
1341: CALL 22413 0 3
1345: ST_TO_ADDR
// tmp := tmp ^ Brown ;
1346: LD_ADDR_VAR 0 5
1350: PUSH
1351: LD_VAR 0 5
1355: PUSH
1356: LD_EXP 20
1360: ADD
1361: ST_TO_ADDR
// end ; if LoadVariable ( DonaldsonInDelta , debug ) then
1362: LD_STRING DonaldsonInDelta
1364: PPUSH
1365: LD_EXP 1
1369: PPUSH
1370: CALL_OW 30
1374: IFFALSE 1416
// begin Donaldson := PrepareUnit ( Donaldson , ( not debug ) , mission_prefix_prev ) ;
1376: LD_ADDR_EXP 21
1380: PUSH
1381: LD_STRING Donaldson
1383: PPUSH
1384: LD_EXP 1
1388: NOT
1389: PPUSH
1390: LD_EXP 3
1394: PPUSH
1395: CALL 22413 0 3
1399: ST_TO_ADDR
// tmp := tmp ^ Donaldson ;
1400: LD_ADDR_VAR 0 5
1404: PUSH
1405: LD_VAR 0 5
1409: PUSH
1410: LD_EXP 21
1414: ADD
1415: ST_TO_ADDR
// end ; if LoadVariable ( LisaInDelta , debug ) then
1416: LD_STRING LisaInDelta
1418: PPUSH
1419: LD_EXP 1
1423: PPUSH
1424: CALL_OW 30
1428: IFFALSE 1470
// begin Lisa := PrepareUnit ( Lisa , ( not debug ) , mission_prefix_prev ) ;
1430: LD_ADDR_EXP 22
1434: PUSH
1435: LD_STRING Lisa
1437: PPUSH
1438: LD_EXP 1
1442: NOT
1443: PPUSH
1444: LD_EXP 3
1448: PPUSH
1449: CALL 22413 0 3
1453: ST_TO_ADDR
// tmp := tmp ^ Lisa ;
1454: LD_ADDR_VAR 0 5
1458: PUSH
1459: LD_VAR 0 5
1463: PUSH
1464: LD_EXP 22
1468: ADD
1469: ST_TO_ADDR
// end ; if LoadVariable ( FrankInDelta , debug ) then
1470: LD_STRING FrankInDelta
1472: PPUSH
1473: LD_EXP 1
1477: PPUSH
1478: CALL_OW 30
1482: IFFALSE 1524
// begin Frank := PrepareUnit ( Frank , ( not debug ) , mission_prefix_prev ) ;
1484: LD_ADDR_EXP 23
1488: PUSH
1489: LD_STRING Frank
1491: PPUSH
1492: LD_EXP 1
1496: NOT
1497: PPUSH
1498: LD_EXP 3
1502: PPUSH
1503: CALL 22413 0 3
1507: ST_TO_ADDR
// tmp := tmp ^ Frank ;
1508: LD_ADDR_VAR 0 5
1512: PUSH
1513: LD_VAR 0 5
1517: PUSH
1518: LD_EXP 23
1522: ADD
1523: ST_TO_ADDR
// end ; if LoadVariable ( BobbyInDelta , 0 ) then
1524: LD_STRING BobbyInDelta
1526: PPUSH
1527: LD_INT 0
1529: PPUSH
1530: CALL_OW 30
1534: IFFALSE 1576
// begin Bobby := PrepareUnit ( Bobby , ( not debug ) , mission_prefix_prev ) ;
1536: LD_ADDR_EXP 24
1540: PUSH
1541: LD_STRING Bobby
1543: PPUSH
1544: LD_EXP 1
1548: NOT
1549: PPUSH
1550: LD_EXP 3
1554: PPUSH
1555: CALL 22413 0 3
1559: ST_TO_ADDR
// tmp := tmp ^ Bobby ;
1560: LD_ADDR_VAR 0 5
1564: PUSH
1565: LD_VAR 0 5
1569: PUSH
1570: LD_EXP 24
1574: ADD
1575: ST_TO_ADDR
// end ; if LoadVariable ( CyrusInDelta , 0 ) then
1576: LD_STRING CyrusInDelta
1578: PPUSH
1579: LD_INT 0
1581: PPUSH
1582: CALL_OW 30
1586: IFFALSE 1628
// begin Cyrus := PrepareUnit ( Cyrus , ( not debug ) , mission_prefix_prev ) ;
1588: LD_ADDR_EXP 25
1592: PUSH
1593: LD_STRING Cyrus
1595: PPUSH
1596: LD_EXP 1
1600: NOT
1601: PPUSH
1602: LD_EXP 3
1606: PPUSH
1607: CALL 22413 0 3
1611: ST_TO_ADDR
// tmp := tmp ^ Cyrus ;
1612: LD_ADDR_VAR 0 5
1616: PUSH
1617: LD_VAR 0 5
1621: PUSH
1622: LD_EXP 25
1626: ADD
1627: ST_TO_ADDR
// end ; others := CreateCharacterSet ( othersDelta ) ;
1628: LD_ADDR_EXP 26
1632: PUSH
1633: LD_STRING othersDelta
1635: PPUSH
1636: CALL_OW 31
1640: ST_TO_ADDR
// if not others and debug then
1641: LD_EXP 26
1645: NOT
1646: PUSH
1647: LD_EXP 1
1651: AND
1652: IFFALSE 1717
// begin InitHc ;
1654: CALL_OW 19
// for i = 1 to 2 do
1658: LD_ADDR_VAR 0 2
1662: PUSH
1663: DOUBLE
1664: LD_INT 1
1666: DEC
1667: ST_TO_ADDR
1668: LD_INT 2
1670: PUSH
1671: FOR_TO
1672: IFFALSE 1715
// begin PrepareHuman ( false , i mod 4 + 1 , 3 ) ;
1674: LD_INT 0
1676: PPUSH
1677: LD_VAR 0 2
1681: PUSH
1682: LD_INT 4
1684: MOD
1685: PUSH
1686: LD_INT 1
1688: PLUS
1689: PPUSH
1690: LD_INT 3
1692: PPUSH
1693: CALL_OW 380
// others := others ^ CreateHuman ;
1697: LD_ADDR_EXP 26
1701: PUSH
1702: LD_EXP 26
1706: PUSH
1707: CALL_OW 44
1711: ADD
1712: ST_TO_ADDR
// end ;
1713: GO 1671
1715: POP
1716: POP
// end ; if others then
1717: LD_EXP 26
1721: IFFALSE 1739
// tmp := tmp ^ others ;
1723: LD_ADDR_VAR 0 5
1727: PUSH
1728: LD_VAR 0 5
1732: PUSH
1733: LD_EXP 26
1737: ADD
1738: ST_TO_ADDR
// points := [ [ 28 , 49 ] , [ 33 , 54 ] , [ 38 , 56 ] ] ;
1739: LD_ADDR_VAR 0 3
1743: PUSH
1744: LD_INT 28
1746: PUSH
1747: LD_INT 49
1749: PUSH
1750: EMPTY
1751: LIST
1752: LIST
1753: PUSH
1754: LD_INT 33
1756: PUSH
1757: LD_INT 54
1759: PUSH
1760: EMPTY
1761: LIST
1762: LIST
1763: PUSH
1764: LD_INT 38
1766: PUSH
1767: LD_INT 56
1769: PUSH
1770: EMPTY
1771: LIST
1772: LIST
1773: PUSH
1774: EMPTY
1775: LIST
1776: LIST
1777: LIST
1778: ST_TO_ADDR
// veh := PrepareTank ( 1 , 1 , us_medium_wheeled , engine_solar , control_manual , us_cargo_bay , 80 ) ;
1779: LD_ADDR_VAR 0 4
1783: PUSH
1784: LD_INT 1
1786: PPUSH
1787: LD_INT 1
1789: PPUSH
1790: LD_INT 2
1792: PPUSH
1793: LD_INT 2
1795: PPUSH
1796: LD_INT 1
1798: PPUSH
1799: LD_INT 12
1801: PPUSH
1802: LD_INT 80
1804: PPUSH
1805: CALL 427 0 7
1809: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
1810: LD_VAR 0 4
1814: PPUSH
1815: LD_INT 1
1817: PPUSH
1818: CALL_OW 233
// PlaceUnitXY ( veh , points [ 1 ] [ 1 ] , points [ 1 ] [ 2 ] , false ) ;
1822: LD_VAR 0 4
1826: PPUSH
1827: LD_VAR 0 3
1831: PUSH
1832: LD_INT 1
1834: ARRAY
1835: PUSH
1836: LD_INT 1
1838: ARRAY
1839: PPUSH
1840: LD_VAR 0 3
1844: PUSH
1845: LD_INT 1
1847: ARRAY
1848: PUSH
1849: LD_INT 2
1851: ARRAY
1852: PPUSH
1853: LD_INT 0
1855: PPUSH
1856: CALL_OW 48
// SetCargo ( veh , mat_cans , 100 ) ;
1860: LD_VAR 0 4
1864: PPUSH
1865: LD_INT 1
1867: PPUSH
1868: LD_INT 100
1870: PPUSH
1871: CALL_OW 290
// PlaceHumanInUnit ( others [ 1 ] , veh ) ;
1875: LD_EXP 26
1879: PUSH
1880: LD_INT 1
1882: ARRAY
1883: PPUSH
1884: LD_VAR 0 4
1888: PPUSH
1889: CALL_OW 52
// veh := PrepareTank ( 1 , 1 , us_light_wheeled , engine_solar , control_manual , us_machine_gun , 80 ) ;
1893: LD_ADDR_VAR 0 4
1897: PUSH
1898: LD_INT 1
1900: PPUSH
1901: LD_INT 1
1903: PPUSH
1904: LD_INT 1
1906: PPUSH
1907: LD_INT 2
1909: PPUSH
1910: LD_INT 1
1912: PPUSH
1913: LD_INT 2
1915: PPUSH
1916: LD_INT 80
1918: PPUSH
1919: CALL 427 0 7
1923: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
1924: LD_VAR 0 4
1928: PPUSH
1929: LD_INT 1
1931: PPUSH
1932: CALL_OW 233
// PlaceUnitXY ( veh , points [ 2 ] [ 1 ] , points [ 2 ] [ 2 ] , false ) ;
1936: LD_VAR 0 4
1940: PPUSH
1941: LD_VAR 0 3
1945: PUSH
1946: LD_INT 2
1948: ARRAY
1949: PUSH
1950: LD_INT 1
1952: ARRAY
1953: PPUSH
1954: LD_VAR 0 3
1958: PUSH
1959: LD_INT 2
1961: ARRAY
1962: PUSH
1963: LD_INT 2
1965: ARRAY
1966: PPUSH
1967: LD_INT 0
1969: PPUSH
1970: CALL_OW 48
// PlaceHumanInUnit ( Gladstone , veh ) ;
1974: LD_EXP 17
1978: PPUSH
1979: LD_VAR 0 4
1983: PPUSH
1984: CALL_OW 52
// veh := PrepareTank ( 1 , 1 , us_light_wheeled , engine_solar , control_manual , us_light_gun , 80 ) ;
1988: LD_ADDR_VAR 0 4
1992: PUSH
1993: LD_INT 1
1995: PPUSH
1996: LD_INT 1
1998: PPUSH
1999: LD_INT 1
2001: PPUSH
2002: LD_INT 2
2004: PPUSH
2005: LD_INT 1
2007: PPUSH
2008: LD_INT 3
2010: PPUSH
2011: LD_INT 80
2013: PPUSH
2014: CALL 427 0 7
2018: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
2019: LD_VAR 0 4
2023: PPUSH
2024: LD_INT 1
2026: PPUSH
2027: CALL_OW 233
// PlaceUnitXY ( veh , points [ 3 ] [ 1 ] , points [ 3 ] [ 2 ] , false ) ;
2031: LD_VAR 0 4
2035: PPUSH
2036: LD_VAR 0 3
2040: PUSH
2041: LD_INT 3
2043: ARRAY
2044: PUSH
2045: LD_INT 1
2047: ARRAY
2048: PPUSH
2049: LD_VAR 0 3
2053: PUSH
2054: LD_INT 3
2056: ARRAY
2057: PUSH
2058: LD_INT 2
2060: ARRAY
2061: PPUSH
2062: LD_INT 0
2064: PPUSH
2065: CALL_OW 48
// PlaceHumanInUnit ( JMM , veh ) ;
2069: LD_EXP 16
2073: PPUSH
2074: LD_VAR 0 4
2078: PPUSH
2079: CALL_OW 52
// for i in tmp diff others [ 1 ] do
2083: LD_ADDR_VAR 0 2
2087: PUSH
2088: LD_VAR 0 5
2092: PUSH
2093: LD_EXP 26
2097: PUSH
2098: LD_INT 1
2100: ARRAY
2101: DIFF
2102: PUSH
2103: FOR_IN
2104: IFFALSE 2123
// PlaceUnitArea ( i , startArea , false ) ;
2106: LD_VAR 0 2
2110: PPUSH
2111: LD_INT 5
2113: PPUSH
2114: LD_INT 0
2116: PPUSH
2117: CALL_OW 49
2121: GO 2103
2123: POP
2124: POP
// end ; end_of_file
2125: LD_VAR 0 1
2129: RET
// export function Action ; var m ; begin
2130: LD_INT 0
2132: PPUSH
2133: PPUSH
// InGameOn ;
2134: CALL_OW 8
// CenterNowOnXY ( 28 , 51 ) ;
2138: LD_INT 28
2140: PPUSH
2141: LD_INT 51
2143: PPUSH
2144: CALL_OW 86
// Wait ( 3 ) ;
2148: LD_INT 3
2150: PPUSH
2151: CALL_OW 67
// Say ( JMM , D1d-JMM-1a ) ;
2155: LD_EXP 16
2159: PPUSH
2160: LD_STRING D1d-JMM-1a
2162: PPUSH
2163: CALL_OW 88
// SayRadio ( Harrison , D1d-Har-1 ) ;
2167: LD_EXP 18
2171: PPUSH
2172: LD_STRING D1d-Har-1
2174: PPUSH
2175: CALL_OW 94
// InGameOff ;
2179: CALL_OW 9
// SaveForQuickRestart ;
2183: CALL_OW 22
// ChangeMissionObjectives ( M1 ) ;
2187: LD_STRING M1
2189: PPUSH
2190: CALL_OW 337
// Wait ( 0 0$2 ) ;
2194: LD_INT 70
2196: PPUSH
2197: CALL_OW 67
// Say ( JMM , D2-JMM-1 ) ;
2201: LD_EXP 16
2205: PPUSH
2206: LD_STRING D2-JMM-1
2208: PPUSH
2209: CALL_OW 88
// Say ( Gladstone , D2-Glad-1 ) ;
2213: LD_EXP 17
2217: PPUSH
2218: LD_STRING D2-Glad-1
2220: PPUSH
2221: CALL_OW 88
// Say ( JMM , D2-JMM-2 ) ;
2225: LD_EXP 16
2229: PPUSH
2230: LD_STRING D2-JMM-2
2232: PPUSH
2233: CALL_OW 88
// Say ( Gladstone , D2-Glad-2 ) ;
2237: LD_EXP 17
2241: PPUSH
2242: LD_STRING D2-Glad-2
2244: PPUSH
2245: CALL_OW 88
// Say ( JMM , D2-JMM-3 ) ;
2249: LD_EXP 16
2253: PPUSH
2254: LD_STRING D2-JMM-3
2256: PPUSH
2257: CALL_OW 88
// Wait ( rand ( 0 0$30 , 1 1$00 ) ) ;
2261: LD_INT 1050
2263: PPUSH
2264: LD_INT 2100
2266: PPUSH
2267: CALL_OW 12
2271: PPUSH
2272: CALL_OW 67
// SetWeather ( 1 , 570 , 350 ) ;
2276: LD_INT 1
2278: PPUSH
2279: LD_INT 570
2281: PPUSH
2282: LD_INT 350
2284: PPUSH
2285: CALL_OW 550
// Wait ( rand ( 3 3$00 , 5 5$00 ) ) ;
2289: LD_INT 6300
2291: PPUSH
2292: LD_INT 10500
2294: PPUSH
2295: CALL_OW 12
2299: PPUSH
2300: CALL_OW 67
// SetWeather ( 0 , 570 , 350 ) ;
2304: LD_INT 0
2306: PPUSH
2307: LD_INT 570
2309: PPUSH
2310: LD_INT 350
2312: PPUSH
2313: CALL_OW 550
// end ;
2317: LD_VAR 0 1
2321: RET
// every 0 0$01 trigger FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_not , [ f_constructed ] ] , [ f_btype , b_depot ] ] ] ) and not deltaBuilded do
2322: LD_INT 22
2324: PUSH
2325: LD_INT 1
2327: PUSH
2328: EMPTY
2329: LIST
2330: LIST
2331: PUSH
2332: LD_INT 3
2334: PUSH
2335: LD_INT 57
2337: PUSH
2338: EMPTY
2339: LIST
2340: PUSH
2341: EMPTY
2342: LIST
2343: LIST
2344: PUSH
2345: LD_INT 30
2347: PUSH
2348: LD_INT 0
2350: PUSH
2351: EMPTY
2352: LIST
2353: LIST
2354: PUSH
2355: EMPTY
2356: LIST
2357: LIST
2358: LIST
2359: PUSH
2360: EMPTY
2361: LIST
2362: PPUSH
2363: CALL_OW 69
2367: PUSH
2368: LD_EXP 4
2372: NOT
2373: AND
2374: IFFALSE 2387
2376: GO 2378
2378: DISABLE
// begin deltaBuilded := true ;
2379: LD_ADDR_EXP 4
2383: PUSH
2384: LD_INT 1
2386: ST_TO_ADDR
// end ;
2387: END
// every 0 0$01 trigger not Delta and deltaBuilded and FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_not , [ f_constructed ] ] , [ f_btype , b_depot ] ] ] ) do
2388: LD_EXP 6
2392: NOT
2393: PUSH
2394: LD_EXP 4
2398: AND
2399: PUSH
2400: LD_INT 22
2402: PUSH
2403: LD_INT 1
2405: PUSH
2406: EMPTY
2407: LIST
2408: LIST
2409: PUSH
2410: LD_INT 3
2412: PUSH
2413: LD_INT 57
2415: PUSH
2416: EMPTY
2417: LIST
2418: PUSH
2419: EMPTY
2420: LIST
2421: LIST
2422: PUSH
2423: LD_INT 30
2425: PUSH
2426: LD_INT 0
2428: PUSH
2429: EMPTY
2430: LIST
2431: LIST
2432: PUSH
2433: EMPTY
2434: LIST
2435: LIST
2436: LIST
2437: PUSH
2438: EMPTY
2439: LIST
2440: PPUSH
2441: CALL_OW 69
2445: AND
2446: IFFALSE 2532
2448: GO 2450
2450: DISABLE
// begin enable ;
2451: ENABLE
// SetRestrict ( b_depot , 1 , state_disabled ) ;
2452: LD_INT 0
2454: PPUSH
2455: LD_INT 1
2457: PPUSH
2458: LD_INT 0
2460: PPUSH
2461: CALL_OW 324
// Delta := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_not , [ f_constructed ] ] , [ f_btype , b_depot ] ] ] ) [ 1 ] ;
2465: LD_ADDR_EXP 6
2469: PUSH
2470: LD_INT 22
2472: PUSH
2473: LD_INT 1
2475: PUSH
2476: EMPTY
2477: LIST
2478: LIST
2479: PUSH
2480: LD_INT 3
2482: PUSH
2483: LD_INT 57
2485: PUSH
2486: EMPTY
2487: LIST
2488: PUSH
2489: EMPTY
2490: LIST
2491: LIST
2492: PUSH
2493: LD_INT 30
2495: PUSH
2496: LD_INT 0
2498: PUSH
2499: EMPTY
2500: LIST
2501: LIST
2502: PUSH
2503: EMPTY
2504: LIST
2505: LIST
2506: LIST
2507: PUSH
2508: EMPTY
2509: LIST
2510: PPUSH
2511: CALL_OW 69
2515: PUSH
2516: LD_INT 1
2518: ARRAY
2519: ST_TO_ADDR
// SetBName ( Delta , Delta ) ;
2520: LD_EXP 6
2524: PPUSH
2525: LD_STRING Delta
2527: PPUSH
2528: CALL_OW 500
// end ;
2532: END
// every 0 0$2 trigger GetTech ( tech_ApeLang , 1 ) = state_researched and IsOk ( Gladstone ) do
2533: LD_INT 1
2535: PPUSH
2536: LD_INT 1
2538: PPUSH
2539: CALL_OW 321
2543: PUSH
2544: LD_INT 2
2546: EQUAL
2547: PUSH
2548: LD_EXP 17
2552: PPUSH
2553: CALL_OW 302
2557: AND
2558: IFFALSE 2619
2560: GO 2562
2562: DISABLE
// begin DialogueOn ;
2563: CALL_OW 6
// Say ( Gladstone , D3-Glad-1 ) ;
2567: LD_EXP 17
2571: PPUSH
2572: LD_STRING D3-Glad-1
2574: PPUSH
2575: CALL_OW 88
// Say ( JMM , D3-JMM-1 ) ;
2579: LD_EXP 16
2583: PPUSH
2584: LD_STRING D3-JMM-1
2586: PPUSH
2587: CALL_OW 88
// Say ( Gladstone , D3-Glad-2 ) ;
2591: LD_EXP 17
2595: PPUSH
2596: LD_STRING D3-Glad-2
2598: PPUSH
2599: CALL_OW 88
// Say ( JMM , D3-JMM-2 ) ;
2603: LD_EXP 16
2607: PPUSH
2608: LD_STRING D3-JMM-2
2610: PPUSH
2611: CALL_OW 88
// DialogueOff ;
2615: CALL_OW 7
// end ;
2619: END
// every 0 0$1 trigger GetTech ( tech_ApePsych , 1 ) = state_researched do var sol ;
2620: LD_INT 2
2622: PPUSH
2623: LD_INT 1
2625: PPUSH
2626: CALL_OW 321
2630: PUSH
2631: LD_INT 2
2633: EQUAL
2634: IFFALSE 2811
2636: GO 2638
2638: DISABLE
2639: LD_INT 0
2641: PPUSH
// begin DialogueOn ;
2642: CALL_OW 6
// if Frank then
2646: LD_EXP 23
2650: IFFALSE 2664
// Say ( Frank , D8a-Frank-1 ) ;
2652: LD_EXP 23
2656: PPUSH
2657: LD_STRING D8a-Frank-1
2659: PPUSH
2660: CALL_OW 88
// sol := SayX ( UnitFilter ( others , [ f_sex , sex_male ] ) , D8a-Sol1-1 ) ;
2664: LD_ADDR_VAR 0 1
2668: PUSH
2669: LD_EXP 26
2673: PPUSH
2674: LD_INT 26
2676: PUSH
2677: LD_INT 1
2679: PUSH
2680: EMPTY
2681: LIST
2682: LIST
2683: PPUSH
2684: CALL_OW 72
2688: PPUSH
2689: LD_STRING D8a-Sol1-1
2691: PPUSH
2692: CALL 515 0 2
2696: ST_TO_ADDR
// if Denis and GetSide ( Denis ) = 1 then
2697: LD_EXP 19
2701: PUSH
2702: LD_EXP 19
2706: PPUSH
2707: CALL_OW 255
2711: PUSH
2712: LD_INT 1
2714: EQUAL
2715: AND
2716: IFFALSE 2730
// Say ( Denis , D8a-Den-1 ) ;
2718: LD_EXP 19
2722: PPUSH
2723: LD_STRING D8a-Den-1
2725: PPUSH
2726: CALL_OW 88
// if sol or Denis or Frank then
2730: LD_VAR 0 1
2734: PUSH
2735: LD_EXP 19
2739: OR
2740: PUSH
2741: LD_EXP 23
2745: OR
2746: IFFALSE 2807
// begin SayX ( UnitFilter ( others , [ [ f_class , 4 ] , [ f_sex , sex_male ] ] ) diff sol , D8a-Sci1-1 ) ;
2748: LD_EXP 26
2752: PPUSH
2753: LD_INT 25
2755: PUSH
2756: LD_INT 4
2758: PUSH
2759: EMPTY
2760: LIST
2761: LIST
2762: PUSH
2763: LD_INT 26
2765: PUSH
2766: LD_INT 1
2768: PUSH
2769: EMPTY
2770: LIST
2771: LIST
2772: PUSH
2773: EMPTY
2774: LIST
2775: LIST
2776: PPUSH
2777: CALL_OW 72
2781: PUSH
2782: LD_VAR 0 1
2786: DIFF
2787: PPUSH
2788: LD_STRING D8a-Sci1-1
2790: PPUSH
2791: CALL 515 0 2
// Say ( JMM , D8a-JMM-1 ) ;
2795: LD_EXP 16
2799: PPUSH
2800: LD_STRING D8a-JMM-1
2802: PPUSH
2803: CALL_OW 88
// end ; DialogueOff ;
2807: CALL_OW 7
// end ;
2811: PPOPN 1
2813: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_apeman_engineer ] ] ) do
2814: LD_INT 22
2816: PUSH
2817: LD_INT 1
2819: PUSH
2820: EMPTY
2821: LIST
2822: LIST
2823: PUSH
2824: LD_INT 25
2826: PUSH
2827: LD_INT 16
2829: PUSH
2830: EMPTY
2831: LIST
2832: LIST
2833: PUSH
2834: EMPTY
2835: LIST
2836: LIST
2837: PPUSH
2838: CALL_OW 69
2842: IFFALSE 2901
2844: GO 2846
2846: DISABLE
// begin ChangeMissionObjectives ( M1a ) ;
2847: LD_STRING M1a
2849: PPUSH
2850: CALL_OW 337
// case Query ( Q2 ) of 1 :
2854: LD_STRING Q2
2856: PPUSH
2857: CALL_OW 97
2861: PUSH
2862: LD_INT 1
2864: DOUBLE
2865: EQUAL
2866: IFTRUE 2870
2868: GO 2881
2870: POP
// end_mission := true ; 2 :
2871: LD_ADDR_EXP 14
2875: PUSH
2876: LD_INT 1
2878: ST_TO_ADDR
2879: GO 2901
2881: LD_INT 2
2883: DOUBLE
2884: EQUAL
2885: IFTRUE 2889
2887: GO 2900
2889: POP
// end_the_mission_allowed := true ; end ;
2890: LD_ADDR_OWVAR 57
2894: PUSH
2895: LD_INT 1
2897: ST_TO_ADDR
2898: GO 2901
2900: POP
// end ;
2901: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) and Delta do
2902: LD_INT 22
2904: PUSH
2905: LD_INT 1
2907: PUSH
2908: EMPTY
2909: LIST
2910: LIST
2911: PUSH
2912: LD_INT 2
2914: PUSH
2915: LD_INT 30
2917: PUSH
2918: LD_INT 6
2920: PUSH
2921: EMPTY
2922: LIST
2923: LIST
2924: PUSH
2925: LD_INT 30
2927: PUSH
2928: LD_INT 7
2930: PUSH
2931: EMPTY
2932: LIST
2933: LIST
2934: PUSH
2935: EMPTY
2936: LIST
2937: LIST
2938: LIST
2939: PUSH
2940: EMPTY
2941: LIST
2942: LIST
2943: PPUSH
2944: CALL_OW 69
2948: PUSH
2949: LD_INT 22
2951: PUSH
2952: LD_INT 1
2954: PUSH
2955: EMPTY
2956: LIST
2957: LIST
2958: PUSH
2959: LD_INT 2
2961: PUSH
2962: LD_INT 30
2964: PUSH
2965: LD_INT 2
2967: PUSH
2968: EMPTY
2969: LIST
2970: LIST
2971: PUSH
2972: LD_INT 30
2974: PUSH
2975: LD_INT 3
2977: PUSH
2978: EMPTY
2979: LIST
2980: LIST
2981: PUSH
2982: EMPTY
2983: LIST
2984: LIST
2985: LIST
2986: PUSH
2987: EMPTY
2988: LIST
2989: LIST
2990: PPUSH
2991: CALL_OW 69
2995: AND
2996: PUSH
2997: LD_EXP 6
3001: AND
3002: IFFALSE 3513
3004: GO 3006
3006: DISABLE
// begin Wait ( rand ( 0 0$30 , 0 0$50 ) ) ;
3007: LD_INT 1050
3009: PPUSH
3010: LD_INT 1750
3012: PPUSH
3013: CALL_OW 12
3017: PPUSH
3018: CALL_OW 67
// PlaceUnitArea ( Denis , [ denisArea1 , denisArea2 , denisArea3 ] [ Difficulty ] , false ) ;
3022: LD_EXP 19
3026: PPUSH
3027: LD_INT 6
3029: PUSH
3030: LD_INT 9
3032: PUSH
3033: LD_INT 10
3035: PUSH
3036: EMPTY
3037: LIST
3038: LIST
3039: LIST
3040: PUSH
3041: LD_OWVAR 67
3045: ARRAY
3046: PPUSH
3047: LD_INT 0
3049: PPUSH
3050: CALL_OW 49
// ComHold ( Denis ) ;
3054: LD_EXP 19
3058: PPUSH
3059: CALL_OW 140
// InGameOn ;
3063: CALL_OW 8
// DialogueOn ;
3067: CALL_OW 6
// if Delta then
3071: LD_EXP 6
3075: IFFALSE 3088
// CenterNowOnUnits ( Delta ) else
3077: LD_EXP 6
3081: PPUSH
3082: CALL_OW 87
3086: GO 3097
// CenterNowOnUnits ( JMM ) ;
3088: LD_EXP 16
3092: PPUSH
3093: CALL_OW 87
// SayRadio ( Denis , DD-Den-1 ) ;
3097: LD_EXP 19
3101: PPUSH
3102: LD_STRING DD-Den-1
3104: PPUSH
3105: CALL_OW 94
// Say ( JMM , DD-JMM-1 ) ;
3109: LD_EXP 16
3113: PPUSH
3114: LD_STRING DD-JMM-1
3116: PPUSH
3117: CALL_OW 88
// SayRadio ( Denis , DD-Den-2 ) ;
3121: LD_EXP 19
3125: PPUSH
3126: LD_STRING DD-Den-2
3128: PPUSH
3129: CALL_OW 94
// Wait ( 3 ) ;
3133: LD_INT 3
3135: PPUSH
3136: CALL_OW 67
// DialogueOff ;
3140: CALL_OW 7
// InGameOff ;
3144: CALL_OW 9
// if Difficulty = 1 then
3148: LD_OWVAR 67
3152: PUSH
3153: LD_INT 1
3155: EQUAL
3156: IFFALSE 3232
// begin PlaceSeeing ( GetX ( Denis ) , GetY ( Denis ) , 1 , - 12 ) ;
3158: LD_EXP 19
3162: PPUSH
3163: CALL_OW 250
3167: PPUSH
3168: LD_EXP 19
3172: PPUSH
3173: CALL_OW 251
3177: PPUSH
3178: LD_INT 1
3180: PPUSH
3181: LD_INT 12
3183: NEG
3184: PPUSH
3185: CALL_OW 330
// CenterNowOnUnits ( Denis ) ;
3189: LD_EXP 19
3193: PPUSH
3194: CALL_OW 87
// wait ( 0 0$5 ) ;
3198: LD_INT 175
3200: PPUSH
3201: CALL_OW 67
// RemoveSeeing ( GetX ( Denis ) , GetY ( Denis ) , 1 ) ;
3205: LD_EXP 19
3209: PPUSH
3210: CALL_OW 250
3214: PPUSH
3215: LD_EXP 19
3219: PPUSH
3220: CALL_OW 251
3224: PPUSH
3225: LD_INT 1
3227: PPUSH
3228: CALL_OW 331
// end ; repeat wait ( 0 0$01 ) ;
3232: LD_INT 35
3234: PPUSH
3235: CALL_OW 67
// until See ( 1 , Denis ) or IsDead ( Denis ) ;
3239: LD_INT 1
3241: PPUSH
3242: LD_EXP 19
3246: PPUSH
3247: CALL_OW 292
3251: PUSH
3252: LD_EXP 19
3256: PPUSH
3257: CALL_OW 301
3261: OR
3262: IFFALSE 3232
// if IsDead ( Denis ) then
3264: LD_EXP 19
3268: PPUSH
3269: CALL_OW 301
3273: IFFALSE 3277
// exit ;
3275: GO 3513
// SetSide ( Denis , 1 ) ;
3277: LD_EXP 19
3281: PPUSH
3282: LD_INT 1
3284: PPUSH
3285: CALL_OW 235
// Say ( Denis , DD-Den-2a ) ;
3289: LD_EXP 19
3293: PPUSH
3294: LD_STRING DD-Den-2a
3296: PPUSH
3297: CALL_OW 88
// repeat wait ( 0 0$01 ) ;
3301: LD_INT 35
3303: PPUSH
3304: CALL_OW 67
// until GetBType ( IsInUnit ( Denis ) ) in [ b_lab , b_lab_half , b_lab_full ] or IsDead ( Denis ) ;
3308: LD_EXP 19
3312: PPUSH
3313: CALL_OW 310
3317: PPUSH
3318: CALL_OW 266
3322: PUSH
3323: LD_INT 6
3325: PUSH
3326: LD_INT 7
3328: PUSH
3329: LD_INT 8
3331: PUSH
3332: EMPTY
3333: LIST
3334: LIST
3335: LIST
3336: IN
3337: PUSH
3338: LD_EXP 19
3342: PPUSH
3343: CALL_OW 301
3347: OR
3348: IFFALSE 3301
// if IsDead ( Denis ) then
3350: LD_EXP 19
3354: PPUSH
3355: CALL_OW 301
3359: IFFALSE 3363
// exit ;
3361: GO 3513
// Say ( Denis , DD-Den-2b ) ;
3363: LD_EXP 19
3367: PPUSH
3368: LD_STRING DD-Den-2b
3370: PPUSH
3371: CALL_OW 88
// ComChangeProfession ( Denis , 4 ) ;
3375: LD_EXP 19
3379: PPUSH
3380: LD_INT 4
3382: PPUSH
3383: CALL_OW 123
// Wait ( 0 0$02 ) ;
3387: LD_INT 70
3389: PPUSH
3390: CALL_OW 67
// DialogueOn ;
3394: CALL_OW 6
// CenterNowOnUnits ( Denis ) ;
3398: LD_EXP 19
3402: PPUSH
3403: CALL_OW 87
// Say ( JMM , D4-JMM-1 ) ;
3407: LD_EXP 16
3411: PPUSH
3412: LD_STRING D4-JMM-1
3414: PPUSH
3415: CALL_OW 88
// Say ( Denis , D4-Den-1 ) ;
3419: LD_EXP 19
3423: PPUSH
3424: LD_STRING D4-Den-1
3426: PPUSH
3427: CALL_OW 88
// Say ( JMM , D4-JMM-2 ) ;
3431: LD_EXP 16
3435: PPUSH
3436: LD_STRING D4-JMM-2
3438: PPUSH
3439: CALL_OW 88
// Say ( Denis , D4-Den-2 ) ;
3443: LD_EXP 19
3447: PPUSH
3448: LD_STRING D4-Den-2
3450: PPUSH
3451: CALL_OW 88
// DialogueOff ;
3455: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
3459: LD_STRING M2
3461: PPUSH
3462: CALL_OW 337
// radar_allowed := true ;
3466: LD_ADDR_EXP 7
3470: PUSH
3471: LD_INT 1
3473: ST_TO_ADDR
// SetTech ( tech_radar , 1 , state_enabled ) ;
3474: LD_INT 6
3476: PPUSH
3477: LD_INT 1
3479: PPUSH
3480: LD_INT 1
3482: PPUSH
3483: CALL_OW 322
// SetRestrict ( b_lab_opto , 1 , state_enabled ) ;
3487: LD_INT 15
3489: PPUSH
3490: LD_INT 1
3492: PPUSH
3493: LD_INT 1
3495: PPUSH
3496: CALL_OW 324
// SetRestrict ( b_ext_radar , 1 , state_enabled ) ;
3500: LD_INT 20
3502: PPUSH
3503: LD_INT 1
3505: PPUSH
3506: LD_INT 1
3508: PPUSH
3509: CALL_OW 324
// end ;
3513: END
// every 0 0$1 trigger arab_spotted do var sol , sol2 ;
3514: LD_EXP 13
3518: IFFALSE 4141
3520: GO 3522
3522: DISABLE
3523: LD_INT 0
3525: PPUSH
3526: PPUSH
// begin sol := SayX ( UnitFilter ( others , [ f_sex , sex_male ] ) , D5-Sol1-1 ) ;
3527: LD_ADDR_VAR 0 1
3531: PUSH
3532: LD_EXP 26
3536: PPUSH
3537: LD_INT 26
3539: PUSH
3540: LD_INT 1
3542: PUSH
3543: EMPTY
3544: LIST
3545: LIST
3546: PPUSH
3547: CALL_OW 72
3551: PPUSH
3552: LD_STRING D5-Sol1-1
3554: PPUSH
3555: CALL 515 0 2
3559: ST_TO_ADDR
// if not sol then
3560: LD_VAR 0 1
3564: NOT
3565: IFFALSE 3569
// exit ;
3567: GO 4141
// repeat wait ( 0 0$01 ) ;
3569: LD_INT 35
3571: PPUSH
3572: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) = 0 ;
3576: LD_INT 22
3578: PUSH
3579: LD_INT 2
3581: PUSH
3582: EMPTY
3583: LIST
3584: LIST
3585: PUSH
3586: LD_INT 21
3588: PUSH
3589: LD_INT 1
3591: PUSH
3592: EMPTY
3593: LIST
3594: LIST
3595: PUSH
3596: EMPTY
3597: LIST
3598: LIST
3599: PPUSH
3600: CALL_OW 69
3604: PUSH
3605: LD_INT 0
3607: EQUAL
3608: IFFALSE 3569
// if IsOk ( sol ) then
3610: LD_VAR 0 1
3614: PPUSH
3615: CALL_OW 302
3619: IFFALSE 3639
// begin sol2 := others diff sol ;
3621: LD_ADDR_VAR 0 2
3625: PUSH
3626: LD_EXP 26
3630: PUSH
3631: LD_VAR 0 1
3635: DIFF
3636: ST_TO_ADDR
// end else
3637: GO 3641
// exit ;
3639: GO 4141
// if not Lisa and not sol2 then
3641: LD_EXP 22
3645: NOT
3646: PUSH
3647: LD_VAR 0 2
3651: NOT
3652: AND
3653: IFFALSE 3657
// exit ;
3655: GO 4141
// DialogueOn ;
3657: CALL_OW 6
// if Lisa then
3661: LD_EXP 22
3665: IFFALSE 3681
// Say ( Lisa , D5a-Lisa-1 ) else
3667: LD_EXP 22
3671: PPUSH
3672: LD_STRING D5a-Lisa-1
3674: PPUSH
3675: CALL_OW 88
3679: GO 3756
// if sol2 then
3681: LD_VAR 0 2
3685: IFFALSE 3756
// case GetSex ( sol2 [ 1 ] ) of sex_male :
3687: LD_VAR 0 2
3691: PUSH
3692: LD_INT 1
3694: ARRAY
3695: PPUSH
3696: CALL_OW 258
3700: PUSH
3701: LD_INT 1
3703: DOUBLE
3704: EQUAL
3705: IFTRUE 3709
3707: GO 3728
3709: POP
// Say ( sol2 [ 1 ] , D5-Sol2-1 ) ; sex_female :
3710: LD_VAR 0 2
3714: PUSH
3715: LD_INT 1
3717: ARRAY
3718: PPUSH
3719: LD_STRING D5-Sol2-1
3721: PPUSH
3722: CALL_OW 88
3726: GO 3756
3728: LD_INT 2
3730: DOUBLE
3731: EQUAL
3732: IFTRUE 3736
3734: GO 3755
3736: POP
// Say ( sol2 [ 1 ] , D5-FSol2-1 ) ; end ;
3737: LD_VAR 0 2
3741: PUSH
3742: LD_INT 1
3744: ARRAY
3745: PPUSH
3746: LD_STRING D5-FSol2-1
3748: PPUSH
3749: CALL_OW 88
3753: GO 3756
3755: POP
// Say ( sol , D5-Sol1-2 ) ;
3756: LD_VAR 0 1
3760: PPUSH
3761: LD_STRING D5-Sol1-2
3763: PPUSH
3764: CALL_OW 88
// if Lisa then
3768: LD_EXP 22
3772: IFFALSE 3788
// Say ( Lisa , D5a-Lisa-2 ) else
3774: LD_EXP 22
3778: PPUSH
3779: LD_STRING D5a-Lisa-2
3781: PPUSH
3782: CALL_OW 88
3786: GO 3863
// if sol2 then
3788: LD_VAR 0 2
3792: IFFALSE 3863
// case GetSex ( sol2 [ 1 ] ) of sex_male :
3794: LD_VAR 0 2
3798: PUSH
3799: LD_INT 1
3801: ARRAY
3802: PPUSH
3803: CALL_OW 258
3807: PUSH
3808: LD_INT 1
3810: DOUBLE
3811: EQUAL
3812: IFTRUE 3816
3814: GO 3835
3816: POP
// Say ( sol2 [ 1 ] , D5-Sol2-2 ) ; sex_female :
3817: LD_VAR 0 2
3821: PUSH
3822: LD_INT 1
3824: ARRAY
3825: PPUSH
3826: LD_STRING D5-Sol2-2
3828: PPUSH
3829: CALL_OW 88
3833: GO 3863
3835: LD_INT 2
3837: DOUBLE
3838: EQUAL
3839: IFTRUE 3843
3841: GO 3862
3843: POP
// Say ( sol2 [ 1 ] , D5-FSol2-2 ) ; end ;
3844: LD_VAR 0 2
3848: PUSH
3849: LD_INT 1
3851: ARRAY
3852: PPUSH
3853: LD_STRING D5-FSol2-2
3855: PPUSH
3856: CALL_OW 88
3860: GO 3863
3862: POP
// Say ( sol , D5a-Sol1-3 ) ;
3863: LD_VAR 0 1
3867: PPUSH
3868: LD_STRING D5a-Sol1-3
3870: PPUSH
3871: CALL_OW 88
// if Lisa then
3875: LD_EXP 22
3879: IFFALSE 3893
// Say ( Lisa , D5a-Lisa-3 ) ;
3881: LD_EXP 22
3885: PPUSH
3886: LD_STRING D5a-Lisa-3
3888: PPUSH
3889: CALL_OW 88
// if not sol2 then
3893: LD_VAR 0 2
3897: NOT
3898: IFFALSE 3906
// begin DialogueOff ;
3900: CALL_OW 7
// exit ;
3904: GO 4141
// end ; case GetSex ( sol2 [ 1 ] ) of sex_male :
3906: LD_VAR 0 2
3910: PUSH
3911: LD_INT 1
3913: ARRAY
3914: PPUSH
3915: CALL_OW 258
3919: PUSH
3920: LD_INT 1
3922: DOUBLE
3923: EQUAL
3924: IFTRUE 3928
3926: GO 3947
3928: POP
// Say ( sol2 [ 1 ] , D5-Sol2-3 ) ; sex_female :
3929: LD_VAR 0 2
3933: PUSH
3934: LD_INT 1
3936: ARRAY
3937: PPUSH
3938: LD_STRING D5-Sol2-3
3940: PPUSH
3941: CALL_OW 88
3945: GO 3975
3947: LD_INT 2
3949: DOUBLE
3950: EQUAL
3951: IFTRUE 3955
3953: GO 3974
3955: POP
// Say ( sol2 [ 1 ] , D5-FSol2-3 ) ; end ;
3956: LD_VAR 0 2
3960: PUSH
3961: LD_INT 1
3963: ARRAY
3964: PPUSH
3965: LD_STRING D5-FSol2-3
3967: PPUSH
3968: CALL_OW 88
3972: GO 3975
3974: POP
// Say ( sol , D5-Sol1-4 ) ;
3975: LD_VAR 0 1
3979: PPUSH
3980: LD_STRING D5-Sol1-4
3982: PPUSH
3983: CALL_OW 88
// case GetSex ( sol2 [ 1 ] ) of sex_male :
3987: LD_VAR 0 2
3991: PUSH
3992: LD_INT 1
3994: ARRAY
3995: PPUSH
3996: CALL_OW 258
4000: PUSH
4001: LD_INT 1
4003: DOUBLE
4004: EQUAL
4005: IFTRUE 4009
4007: GO 4028
4009: POP
// Say ( sol2 [ 1 ] , D5-Sol2-4 ) ; sex_female :
4010: LD_VAR 0 2
4014: PUSH
4015: LD_INT 1
4017: ARRAY
4018: PPUSH
4019: LD_STRING D5-Sol2-4
4021: PPUSH
4022: CALL_OW 88
4026: GO 4056
4028: LD_INT 2
4030: DOUBLE
4031: EQUAL
4032: IFTRUE 4036
4034: GO 4055
4036: POP
// Say ( sol2 [ 1 ] , D5-FSol2-4 ) ; end ;
4037: LD_VAR 0 2
4041: PUSH
4042: LD_INT 1
4044: ARRAY
4045: PPUSH
4046: LD_STRING D5-FSol2-4
4048: PPUSH
4049: CALL_OW 88
4053: GO 4056
4055: POP
// Say ( sol , D5-Sol1-5 ) ;
4056: LD_VAR 0 1
4060: PPUSH
4061: LD_STRING D5-Sol1-5
4063: PPUSH
4064: CALL_OW 88
// case GetSex ( sol2 [ 1 ] ) of sex_male :
4068: LD_VAR 0 2
4072: PUSH
4073: LD_INT 1
4075: ARRAY
4076: PPUSH
4077: CALL_OW 258
4081: PUSH
4082: LD_INT 1
4084: DOUBLE
4085: EQUAL
4086: IFTRUE 4090
4088: GO 4109
4090: POP
// Say ( sol2 [ 1 ] , D5-Sol2-5 ) ; sex_female :
4091: LD_VAR 0 2
4095: PUSH
4096: LD_INT 1
4098: ARRAY
4099: PPUSH
4100: LD_STRING D5-Sol2-5
4102: PPUSH
4103: CALL_OW 88
4107: GO 4137
4109: LD_INT 2
4111: DOUBLE
4112: EQUAL
4113: IFTRUE 4117
4115: GO 4136
4117: POP
// Say ( sol2 [ 1 ] , D5-FSol2-5 ) ; end ;
4118: LD_VAR 0 2
4122: PUSH
4123: LD_INT 1
4125: ARRAY
4126: PPUSH
4127: LD_STRING D5-FSol2-5
4129: PPUSH
4130: CALL_OW 88
4134: GO 4137
4136: POP
// DialogueOff ;
4137: CALL_OW 7
// end ;
4141: PPOPN 2
4143: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_apeman_engineer ] ] ) >= 5 do
4144: LD_INT 22
4146: PUSH
4147: LD_INT 1
4149: PUSH
4150: EMPTY
4151: LIST
4152: LIST
4153: PUSH
4154: LD_INT 25
4156: PUSH
4157: LD_INT 16
4159: PUSH
4160: EMPTY
4161: LIST
4162: LIST
4163: PUSH
4164: EMPTY
4165: LIST
4166: LIST
4167: PPUSH
4168: CALL_OW 69
4172: PUSH
4173: LD_INT 5
4175: GREATEREQUAL
4176: IFFALSE 4196
4178: GO 4180
4180: DISABLE
// begin ChangeMissionObjectives ( M1b ) ;
4181: LD_STRING M1b
4183: PPUSH
4184: CALL_OW 337
// apeman_army := true ;
4188: LD_ADDR_EXP 9
4192: PUSH
4193: LD_INT 1
4195: ST_TO_ADDR
// end ;
4196: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] , [ f_constructed ] ] ) do
4197: LD_INT 22
4199: PUSH
4200: LD_INT 1
4202: PUSH
4203: EMPTY
4204: LIST
4205: LIST
4206: PUSH
4207: LD_INT 30
4209: PUSH
4210: LD_INT 3
4212: PUSH
4213: EMPTY
4214: LIST
4215: LIST
4216: PUSH
4217: LD_INT 57
4219: PUSH
4220: EMPTY
4221: LIST
4222: PUSH
4223: EMPTY
4224: LIST
4225: LIST
4226: LIST
4227: PPUSH
4228: CALL_OW 69
4232: IFFALSE 4244
4234: GO 4236
4236: DISABLE
// ChangeMissionObjectives ( M1c ) ;
4237: LD_STRING M1c
4239: PPUSH
4240: CALL_OW 337
4244: END
// every 0 0$1 trigger GetTech ( tech_radar , 1 ) = state_researched do
4245: LD_INT 6
4247: PPUSH
4248: LD_INT 1
4250: PPUSH
4251: CALL_OW 321
4255: PUSH
4256: LD_INT 2
4258: EQUAL
4259: IFFALSE 4279
4261: GO 4263
4263: DISABLE
// begin ChangeMissionObjectives ( M2a ) ;
4264: LD_STRING M2a
4266: PPUSH
4267: CALL_OW 337
// radar_researched := true ;
4271: LD_ADDR_EXP 10
4275: PUSH
4276: LD_INT 1
4278: ST_TO_ADDR
// end ;
4279: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_weapon , us_radar ] , [ f_bweapon , us_radar ] ] ] ) do
4280: LD_INT 22
4282: PUSH
4283: LD_INT 1
4285: PUSH
4286: EMPTY
4287: LIST
4288: LIST
4289: PUSH
4290: LD_INT 2
4292: PUSH
4293: LD_INT 34
4295: PUSH
4296: LD_INT 11
4298: PUSH
4299: EMPTY
4300: LIST
4301: LIST
4302: PUSH
4303: LD_INT 35
4305: PUSH
4306: LD_INT 11
4308: PUSH
4309: EMPTY
4310: LIST
4311: LIST
4312: PUSH
4313: EMPTY
4314: LIST
4315: LIST
4316: LIST
4317: PUSH
4318: EMPTY
4319: LIST
4320: LIST
4321: PPUSH
4322: CALL_OW 69
4326: IFFALSE 4346
4328: GO 4330
4330: DISABLE
// begin ChangeMissionObjectives ( M2b ) ;
4331: LD_STRING M2b
4333: PPUSH
4334: CALL_OW 337
// radar_builded := true ;
4338: LD_ADDR_EXP 11
4342: PUSH
4343: LD_INT 1
4345: ST_TO_ADDR
// end ;
4346: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) = 0 and not first_apeman_tamed do
4347: LD_INT 22
4349: PUSH
4350: LD_INT 0
4352: PUSH
4353: EMPTY
4354: LIST
4355: LIST
4356: PUSH
4357: LD_INT 25
4359: PUSH
4360: LD_INT 12
4362: PUSH
4363: EMPTY
4364: LIST
4365: LIST
4366: PUSH
4367: EMPTY
4368: LIST
4369: LIST
4370: PPUSH
4371: CALL_OW 69
4375: PUSH
4376: LD_INT 0
4378: EQUAL
4379: PUSH
4380: LD_EXP 8
4384: NOT
4385: AND
4386: IFFALSE 4398
4388: GO 4390
4390: DISABLE
// YouLost ( Apeman ) ;
4391: LD_STRING Apeman
4393: PPUSH
4394: CALL_OW 104
4398: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_apeman_engineer ] ] ) >= 7 do var i , filter ;
4399: LD_INT 22
4401: PUSH
4402: LD_INT 1
4404: PUSH
4405: EMPTY
4406: LIST
4407: LIST
4408: PUSH
4409: LD_INT 25
4411: PUSH
4412: LD_INT 16
4414: PUSH
4415: EMPTY
4416: LIST
4417: LIST
4418: PUSH
4419: EMPTY
4420: LIST
4421: LIST
4422: PPUSH
4423: CALL_OW 69
4427: PUSH
4428: LD_INT 7
4430: GREATEREQUAL
4431: IFFALSE 4529
4433: GO 4435
4435: DISABLE
4436: LD_INT 0
4438: PPUSH
4439: PPUSH
// begin filter := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 4 ] ] ) ^ JMM ;
4440: LD_ADDR_VAR 0 2
4444: PUSH
4445: LD_INT 22
4447: PUSH
4448: LD_INT 1
4450: PUSH
4451: EMPTY
4452: LIST
4453: LIST
4454: PUSH
4455: LD_INT 21
4457: PUSH
4458: LD_INT 1
4460: PUSH
4461: EMPTY
4462: LIST
4463: LIST
4464: PUSH
4465: LD_INT 25
4467: PUSH
4468: LD_INT 4
4470: PUSH
4471: EMPTY
4472: LIST
4473: LIST
4474: PUSH
4475: EMPTY
4476: LIST
4477: LIST
4478: LIST
4479: PPUSH
4480: CALL_OW 69
4484: PUSH
4485: LD_EXP 16
4489: ADD
4490: ST_TO_ADDR
// if filter then
4491: LD_VAR 0 2
4495: IFFALSE 4529
// for i in filter do
4497: LD_ADDR_VAR 0 1
4501: PUSH
4502: LD_VAR 0 2
4506: PUSH
4507: FOR_IN
4508: IFFALSE 4527
// AddExperience ( i , 4 , 3500 ) ;
4510: LD_VAR 0 1
4514: PPUSH
4515: LD_INT 4
4517: PPUSH
4518: LD_INT 3500
4520: PPUSH
4521: CALL_OW 492
4525: GO 4507
4527: POP
4528: POP
// end ;
4529: PPOPN 2
4531: END
// every 0 0$1 trigger end_mission do var i , tmp , m1 , m2 , m3 ;
4532: LD_EXP 14
4536: IFFALSE 5670
4538: GO 4540
4540: DISABLE
4541: LD_INT 0
4543: PPUSH
4544: PPUSH
4545: PPUSH
4546: PPUSH
4547: PPUSH
// begin if apeKillCounter = 0 then
4548: LD_EXP 15
4552: PUSH
4553: LD_INT 0
4555: EQUAL
4556: IFFALSE 4565
// SetAchievement ( ACH_APEKILLER ) ;
4558: LD_STRING ACH_APEKILLER
4560: PPUSH
4561: CALL_OW 543
// if FilterAllUnits ( [ f_side , 2 ] ) then
4565: LD_INT 22
4567: PUSH
4568: LD_INT 2
4570: PUSH
4571: EMPTY
4572: LIST
4573: LIST
4574: PPUSH
4575: CALL_OW 69
4579: IFFALSE 4617
// for i in FilterAllUnits ( [ f_side , 2 ] ) do
4581: LD_ADDR_VAR 0 1
4585: PUSH
4586: LD_INT 22
4588: PUSH
4589: LD_INT 2
4591: PUSH
4592: EMPTY
4593: LIST
4594: LIST
4595: PPUSH
4596: CALL_OW 69
4600: PUSH
4601: FOR_IN
4602: IFFALSE 4615
// RemoveUnit ( i ) ;
4604: LD_VAR 0 1
4608: PPUSH
4609: CALL_OW 64
4613: GO 4601
4615: POP
4616: POP
// m1 := false ;
4617: LD_ADDR_VAR 0 3
4621: PUSH
4622: LD_INT 0
4624: ST_TO_ADDR
// m2 := false ;
4625: LD_ADDR_VAR 0 4
4629: PUSH
4630: LD_INT 0
4632: ST_TO_ADDR
// m3 := false ;
4633: LD_ADDR_VAR 0 5
4637: PUSH
4638: LD_INT 0
4640: ST_TO_ADDR
// if apeman_army then
4641: LD_EXP 9
4645: IFFALSE 4667
// begin AddMedal ( Tame , 1 ) ;
4647: LD_STRING Tame
4649: PPUSH
4650: LD_INT 1
4652: PPUSH
4653: CALL_OW 101
// m1 := true ;
4657: LD_ADDR_VAR 0 3
4661: PUSH
4662: LD_INT 1
4664: ST_TO_ADDR
// end else
4665: GO 4678
// AddMedal ( Tame , - 1 ) ;
4667: LD_STRING Tame
4669: PPUSH
4670: LD_INT 1
4672: NEG
4673: PPUSH
4674: CALL_OW 101
// if radar_researched then
4678: LD_EXP 10
4682: IFFALSE 4714
// begin SaveVariable ( true , radarResInDelta ) ;
4684: LD_INT 1
4686: PPUSH
4687: LD_STRING radarResInDelta
4689: PPUSH
4690: CALL_OW 39
// AddMedal ( Radar , 1 ) ;
4694: LD_STRING Radar
4696: PPUSH
4697: LD_INT 1
4699: PPUSH
4700: CALL_OW 101
// m2 := true ;
4704: LD_ADDR_VAR 0 4
4708: PUSH
4709: LD_INT 1
4711: ST_TO_ADDR
// end else
4712: GO 4744
// if radar_allowed then
4714: LD_EXP 7
4718: IFFALSE 4733
// AddMedal ( Radar , - 2 ) else
4720: LD_STRING Radar
4722: PPUSH
4723: LD_INT 2
4725: NEG
4726: PPUSH
4727: CALL_OW 101
4731: GO 4744
// AddMedal ( Radar , - 1 ) ;
4733: LD_STRING Radar
4735: PPUSH
4736: LD_INT 1
4738: NEG
4739: PPUSH
4740: CALL_OW 101
// if radar_builded then
4744: LD_EXP 11
4748: IFFALSE 4770
// begin AddMedal ( BuildRadar , 1 ) ;
4750: LD_STRING BuildRadar
4752: PPUSH
4753: LD_INT 1
4755: PPUSH
4756: CALL_OW 101
// m3 := true ;
4760: LD_ADDR_VAR 0 5
4764: PUSH
4765: LD_INT 1
4767: ST_TO_ADDR
// end else
4768: GO 4781
// AddMedal ( BuildRadar , - 1 ) ;
4770: LD_STRING BuildRadar
4772: PPUSH
4773: LD_INT 1
4775: NEG
4776: PPUSH
4777: CALL_OW 101
// if tick <= 7 7$00 then
4781: LD_OWVAR 1
4785: PUSH
4786: LD_INT 14700
4788: LESSEQUAL
4789: IFFALSE 4798
// SetAchievement ( ACH_ASPEED_5 ) ;
4791: LD_STRING ACH_ASPEED_5
4793: PPUSH
4794: CALL_OW 543
// if m1 and m2 and m3 and Difficulty = 3 then
4798: LD_VAR 0 3
4802: PUSH
4803: LD_VAR 0 4
4807: AND
4808: PUSH
4809: LD_VAR 0 5
4813: AND
4814: PUSH
4815: LD_OWVAR 67
4819: PUSH
4820: LD_INT 3
4822: EQUAL
4823: AND
4824: IFFALSE 4836
// SetAchievementEX ( ACH_AMER , 5 ) ;
4826: LD_STRING ACH_AMER
4828: PPUSH
4829: LD_INT 5
4831: PPUSH
4832: CALL_OW 564
// GiveMedals ( MAIN ) ;
4836: LD_STRING MAIN
4838: PPUSH
4839: CALL_OW 102
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ;
4843: LD_ADDR_VAR 0 2
4847: PUSH
4848: LD_INT 22
4850: PUSH
4851: LD_INT 1
4853: PUSH
4854: EMPTY
4855: LIST
4856: LIST
4857: PUSH
4858: LD_INT 21
4860: PUSH
4861: LD_INT 1
4863: PUSH
4864: EMPTY
4865: LIST
4866: LIST
4867: PUSH
4868: LD_INT 2
4870: PUSH
4871: LD_INT 25
4873: PUSH
4874: LD_INT 1
4876: PUSH
4877: EMPTY
4878: LIST
4879: LIST
4880: PUSH
4881: LD_INT 25
4883: PUSH
4884: LD_INT 2
4886: PUSH
4887: EMPTY
4888: LIST
4889: LIST
4890: PUSH
4891: LD_INT 25
4893: PUSH
4894: LD_INT 3
4896: PUSH
4897: EMPTY
4898: LIST
4899: LIST
4900: PUSH
4901: LD_INT 25
4903: PUSH
4904: LD_INT 4
4906: PUSH
4907: EMPTY
4908: LIST
4909: LIST
4910: PUSH
4911: EMPTY
4912: LIST
4913: LIST
4914: LIST
4915: LIST
4916: LIST
4917: PUSH
4918: EMPTY
4919: LIST
4920: LIST
4921: LIST
4922: PPUSH
4923: CALL_OW 69
4927: ST_TO_ADDR
// RewardPeople ( tmp ) ;
4928: LD_VAR 0 2
4932: PPUSH
4933: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
4937: LD_EXP 16
4941: PPUSH
4942: LD_EXP 2
4946: PUSH
4947: LD_STRING JMM
4949: STR
4950: PPUSH
4951: CALL_OW 38
// if IsOk ( Gladstone ) then
4955: LD_EXP 17
4959: PPUSH
4960: CALL_OW 302
4964: IFFALSE 4984
// begin SaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
4966: LD_EXP 17
4970: PPUSH
4971: LD_EXP 2
4975: PUSH
4976: LD_STRING Gladstone
4978: STR
4979: PPUSH
4980: CALL_OW 38
// end ; if IsOk ( Denis ) and GetSide ( Denis ) = 1 then
4984: LD_EXP 19
4988: PPUSH
4989: CALL_OW 302
4993: PUSH
4994: LD_EXP 19
4998: PPUSH
4999: CALL_OW 255
5003: PUSH
5004: LD_INT 1
5006: EQUAL
5007: AND
5008: IFFALSE 5038
// begin SaveCharacters ( Denis , mission_prefix & Denis ) ;
5010: LD_EXP 19
5014: PPUSH
5015: LD_EXP 2
5019: PUSH
5020: LD_STRING Denis
5022: STR
5023: PPUSH
5024: CALL_OW 38
// SaveVariable ( true , DenisInDelta ) ;
5028: LD_INT 1
5030: PPUSH
5031: LD_STRING DenisInDelta
5033: PPUSH
5034: CALL_OW 39
// end ; if IsOk ( Lisa ) then
5038: LD_EXP 22
5042: PPUSH
5043: CALL_OW 302
5047: IFFALSE 5067
// begin SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
5049: LD_EXP 22
5053: PPUSH
5054: LD_EXP 2
5058: PUSH
5059: LD_STRING Lisa
5061: STR
5062: PPUSH
5063: CALL_OW 38
// end ; if IsOk ( Frank ) then
5067: LD_EXP 23
5071: PPUSH
5072: CALL_OW 302
5076: IFFALSE 5096
// begin SaveCharacters ( Frank , mission_prefix & Frank ) ;
5078: LD_EXP 23
5082: PPUSH
5083: LD_EXP 2
5087: PUSH
5088: LD_STRING Frank
5090: STR
5091: PPUSH
5092: CALL_OW 38
// end ; if IsOk ( Bobby ) then
5096: LD_EXP 24
5100: PPUSH
5101: CALL_OW 302
5105: IFFALSE 5125
// begin SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
5107: LD_EXP 24
5111: PPUSH
5112: LD_EXP 2
5116: PUSH
5117: LD_STRING Bobby
5119: STR
5120: PPUSH
5121: CALL_OW 38
// end ; if IsOk ( Cyrus ) then
5125: LD_EXP 25
5129: PPUSH
5130: CALL_OW 302
5134: IFFALSE 5154
// begin SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
5136: LD_EXP 25
5140: PPUSH
5141: LD_EXP 2
5145: PUSH
5146: LD_STRING Cyrus
5148: STR
5149: PPUSH
5150: CALL_OW 38
// end ; if IsOk ( Brown ) then
5154: LD_EXP 20
5158: PPUSH
5159: CALL_OW 302
5163: IFFALSE 5183
// begin SaveCharacters ( Brown , mission_prefix & Brown ) ;
5165: LD_EXP 20
5169: PPUSH
5170: LD_EXP 2
5174: PUSH
5175: LD_STRING Brown
5177: STR
5178: PPUSH
5179: CALL_OW 38
// end ; if IsOk ( Donaldson ) then
5183: LD_EXP 21
5187: PPUSH
5188: CALL_OW 302
5192: IFFALSE 5212
// begin SaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
5194: LD_EXP 21
5198: PPUSH
5199: LD_EXP 2
5203: PUSH
5204: LD_STRING Donaldson
5206: STR
5207: PPUSH
5208: CALL_OW 38
// end ; if others then
5212: LD_EXP 26
5216: IFFALSE 5230
// SaveCharacters ( others , othersInDelta ) ;
5218: LD_EXP 26
5222: PPUSH
5223: LD_STRING othersInDelta
5225: PPUSH
5226: CALL_OW 38
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_apeman_engineer ] ] ) then
5230: LD_INT 22
5232: PUSH
5233: LD_INT 1
5235: PUSH
5236: EMPTY
5237: LIST
5238: LIST
5239: PUSH
5240: LD_INT 25
5242: PUSH
5243: LD_INT 16
5245: PUSH
5246: EMPTY
5247: LIST
5248: LIST
5249: PUSH
5250: EMPTY
5251: LIST
5252: LIST
5253: PPUSH
5254: CALL_OW 69
5258: IFFALSE 5296
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_apeman_engineer ] ] ) , apeInDelta ) ;
5260: LD_INT 22
5262: PUSH
5263: LD_INT 1
5265: PUSH
5266: EMPTY
5267: LIST
5268: LIST
5269: PUSH
5270: LD_INT 25
5272: PUSH
5273: LD_INT 16
5275: PUSH
5276: EMPTY
5277: LIST
5278: LIST
5279: PUSH
5280: EMPTY
5281: LIST
5282: LIST
5283: PPUSH
5284: CALL_OW 69
5288: PPUSH
5289: LD_STRING apeInDelta
5291: PPUSH
5292: CALL_OW 38
// tmp := [ ] ;
5296: LD_ADDR_VAR 0 2
5300: PUSH
5301: EMPTY
5302: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) then
5303: LD_INT 22
5305: PUSH
5306: LD_INT 1
5308: PUSH
5309: EMPTY
5310: LIST
5311: LIST
5312: PUSH
5313: LD_INT 21
5315: PUSH
5316: LD_INT 2
5318: PUSH
5319: EMPTY
5320: LIST
5321: LIST
5322: PUSH
5323: EMPTY
5324: LIST
5325: LIST
5326: PPUSH
5327: CALL_OW 69
5331: IFFALSE 5442
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) do
5333: LD_ADDR_VAR 0 1
5337: PUSH
5338: LD_INT 22
5340: PUSH
5341: LD_INT 1
5343: PUSH
5344: EMPTY
5345: LIST
5346: LIST
5347: PUSH
5348: LD_INT 21
5350: PUSH
5351: LD_INT 2
5353: PUSH
5354: EMPTY
5355: LIST
5356: LIST
5357: PUSH
5358: EMPTY
5359: LIST
5360: LIST
5361: PPUSH
5362: CALL_OW 69
5366: PUSH
5367: FOR_IN
5368: IFFALSE 5440
// tmp := tmp ^ [ GetNation ( i ) , GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) ] ;
5370: LD_ADDR_VAR 0 2
5374: PUSH
5375: LD_VAR 0 2
5379: PUSH
5380: LD_VAR 0 1
5384: PPUSH
5385: CALL_OW 248
5389: PUSH
5390: LD_VAR 0 1
5394: PPUSH
5395: CALL_OW 265
5399: PUSH
5400: LD_VAR 0 1
5404: PPUSH
5405: CALL_OW 262
5409: PUSH
5410: LD_VAR 0 1
5414: PPUSH
5415: CALL_OW 263
5419: PUSH
5420: LD_VAR 0 1
5424: PPUSH
5425: CALL_OW 264
5429: PUSH
5430: EMPTY
5431: LIST
5432: LIST
5433: LIST
5434: LIST
5435: LIST
5436: ADD
5437: ST_TO_ADDR
5438: GO 5367
5440: POP
5441: POP
// if tmp then
5442: LD_VAR 0 2
5446: IFFALSE 5460
// SaveVariable ( tmp , vehiclesInDelta ) ;
5448: LD_VAR 0 2
5452: PPUSH
5453: LD_STRING vehiclesInDelta
5455: PPUSH
5456: CALL_OW 39
// tmp := [ ] ;
5460: LD_ADDR_VAR 0 2
5464: PUSH
5465: EMPTY
5466: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) then
5467: LD_INT 22
5469: PUSH
5470: LD_INT 1
5472: PUSH
5473: EMPTY
5474: LIST
5475: LIST
5476: PUSH
5477: LD_INT 21
5479: PUSH
5480: LD_INT 3
5482: PUSH
5483: EMPTY
5484: LIST
5485: LIST
5486: PUSH
5487: EMPTY
5488: LIST
5489: LIST
5490: PPUSH
5491: CALL_OW 69
5495: IFFALSE 5648
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) do
5497: LD_ADDR_VAR 0 1
5501: PUSH
5502: LD_INT 22
5504: PUSH
5505: LD_INT 1
5507: PUSH
5508: EMPTY
5509: LIST
5510: LIST
5511: PUSH
5512: LD_INT 21
5514: PUSH
5515: LD_INT 3
5517: PUSH
5518: EMPTY
5519: LIST
5520: LIST
5521: PUSH
5522: EMPTY
5523: LIST
5524: LIST
5525: PPUSH
5526: CALL_OW 69
5530: PUSH
5531: FOR_IN
5532: IFFALSE 5646
// tmp := tmp ^ [ [ GetBType ( i ) , GetBLevel ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) , GetBWeapon ( i ) ] ] ;
5534: LD_ADDR_VAR 0 2
5538: PUSH
5539: LD_VAR 0 2
5543: PUSH
5544: LD_VAR 0 1
5548: PPUSH
5549: CALL_OW 266
5553: PUSH
5554: LD_VAR 0 1
5558: PPUSH
5559: CALL_OW 267
5563: PUSH
5564: LD_VAR 0 1
5568: PPUSH
5569: CALL_OW 250
5573: PUSH
5574: LD_VAR 0 1
5578: PPUSH
5579: CALL_OW 251
5583: PUSH
5584: LD_VAR 0 1
5588: PPUSH
5589: CALL_OW 254
5593: PUSH
5594: LD_VAR 0 1
5598: PPUSH
5599: LD_INT 1
5601: PPUSH
5602: CALL_OW 268
5606: PUSH
5607: LD_VAR 0 1
5611: PPUSH
5612: LD_INT 2
5614: PPUSH
5615: CALL_OW 268
5619: PUSH
5620: LD_VAR 0 1
5624: PPUSH
5625: CALL_OW 269
5629: PUSH
5630: EMPTY
5631: LIST
5632: LIST
5633: LIST
5634: LIST
5635: LIST
5636: LIST
5637: LIST
5638: LIST
5639: PUSH
5640: EMPTY
5641: LIST
5642: ADD
5643: ST_TO_ADDR
5644: GO 5531
5646: POP
5647: POP
// if tmp then
5648: LD_VAR 0 2
5652: IFFALSE 5666
// SaveVariable ( tmp , buildingsInDelta ) ;
5654: LD_VAR 0 2
5658: PPUSH
5659: LD_STRING buildingsInDelta
5661: PPUSH
5662: CALL_OW 39
// YouWin ;
5666: CALL_OW 103
// end ; end_of_file
5670: PPOPN 5
5672: END
// export function PrepareArabianTroops ( amount , skill , area ) ; var i , un , tmp ; begin
5673: LD_INT 0
5675: PPUSH
5676: PPUSH
5677: PPUSH
5678: PPUSH
// InitHc ;
5679: CALL_OW 19
// InitUc ;
5683: CALL_OW 18
// uc_side := 2 ;
5687: LD_ADDR_OWVAR 20
5691: PUSH
5692: LD_INT 2
5694: ST_TO_ADDR
// uc_nation := 2 ;
5695: LD_ADDR_OWVAR 21
5699: PUSH
5700: LD_INT 2
5702: ST_TO_ADDR
// if not amount then
5703: LD_VAR 0 1
5707: NOT
5708: IFFALSE 5712
// exit ;
5710: GO 5835
// for i = 1 to amount do
5712: LD_ADDR_VAR 0 5
5716: PUSH
5717: DOUBLE
5718: LD_INT 1
5720: DEC
5721: ST_TO_ADDR
5722: LD_VAR 0 1
5726: PUSH
5727: FOR_TO
5728: IFFALSE 5823
// begin PrepareHuman ( false , 1 , skill ) ;
5730: LD_INT 0
5732: PPUSH
5733: LD_INT 1
5735: PPUSH
5736: LD_VAR 0 2
5740: PPUSH
5741: CALL_OW 380
// un := CreateHuman ;
5745: LD_ADDR_VAR 0 6
5749: PUSH
5750: CALL_OW 44
5754: ST_TO_ADDR
// tmp := Insert ( tmp , 1 , un ) ;
5755: LD_ADDR_VAR 0 7
5759: PUSH
5760: LD_VAR 0 7
5764: PPUSH
5765: LD_INT 1
5767: PPUSH
5768: LD_VAR 0 6
5772: PPUSH
5773: CALL_OW 2
5777: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
5778: LD_VAR 0 6
5782: PPUSH
5783: LD_VAR 0 3
5787: PPUSH
5788: LD_INT 0
5790: PPUSH
5791: CALL_OW 49
// if i mod 2 = 0 then
5795: LD_VAR 0 5
5799: PUSH
5800: LD_INT 2
5802: MOD
5803: PUSH
5804: LD_INT 0
5806: EQUAL
5807: IFFALSE 5821
// SetTag ( un , 11 ) ;
5809: LD_VAR 0 6
5813: PPUSH
5814: LD_INT 11
5816: PPUSH
5817: CALL_OW 109
// end ;
5821: GO 5727
5823: POP
5824: POP
// result := tmp ;
5825: LD_ADDR_VAR 0 4
5829: PUSH
5830: LD_VAR 0 7
5834: ST_TO_ADDR
// end ;
5835: LD_VAR 0 4
5839: RET
// export ar_forces , ap_killers ; every 0 0$1 trigger Delta do var i , timer , more_troops , skill , eng , un , veh , force ;
5840: LD_EXP 6
5844: IFFALSE 6711
5846: GO 5848
5848: DISABLE
5849: LD_INT 0
5851: PPUSH
5852: PPUSH
5853: PPUSH
5854: PPUSH
5855: PPUSH
5856: PPUSH
5857: PPUSH
5858: PPUSH
// begin more_troops := false ;
5859: LD_ADDR_VAR 0 3
5863: PUSH
5864: LD_INT 0
5866: ST_TO_ADDR
// skill := [ 3 , 4 , 5 ] [ Difficulty ] ;
5867: LD_ADDR_VAR 0 4
5871: PUSH
5872: LD_INT 3
5874: PUSH
5875: LD_INT 4
5877: PUSH
5878: LD_INT 5
5880: PUSH
5881: EMPTY
5882: LIST
5883: LIST
5884: LIST
5885: PUSH
5886: LD_OWVAR 67
5890: ARRAY
5891: ST_TO_ADDR
// timer := [ 5 5$00 , 4 4$00 , 3 3$00 ] [ Difficulty ] ;
5892: LD_ADDR_VAR 0 2
5896: PUSH
5897: LD_INT 10500
5899: PUSH
5900: LD_INT 8400
5902: PUSH
5903: LD_INT 6300
5905: PUSH
5906: EMPTY
5907: LIST
5908: LIST
5909: LIST
5910: PUSH
5911: LD_OWVAR 67
5915: ARRAY
5916: ST_TO_ADDR
// force := [ ] ;
5917: LD_ADDR_VAR 0 8
5921: PUSH
5922: EMPTY
5923: ST_TO_ADDR
// ar_forces := [ ] ;
5924: LD_ADDR_EXP 27
5928: PUSH
5929: EMPTY
5930: ST_TO_ADDR
// ap_killers := [ ] ;
5931: LD_ADDR_EXP 28
5935: PUSH
5936: EMPTY
5937: ST_TO_ADDR
// Wait ( timer ) ;
5938: LD_VAR 0 2
5942: PPUSH
5943: CALL_OW 67
// if Denis and GetSide ( Denis ) = 4 then
5947: LD_EXP 19
5951: PUSH
5952: LD_EXP 19
5956: PPUSH
5957: CALL_OW 255
5961: PUSH
5962: LD_INT 4
5964: EQUAL
5965: AND
5966: IFFALSE 5975
// Wait ( 0 0$45 ) ;
5968: LD_INT 1575
5970: PPUSH
5971: CALL_OW 67
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_armoury ] ] ) then
5975: LD_INT 22
5977: PUSH
5978: LD_INT 1
5980: PUSH
5981: EMPTY
5982: LIST
5983: LIST
5984: PUSH
5985: LD_INT 30
5987: PUSH
5988: LD_INT 4
5990: PUSH
5991: EMPTY
5992: LIST
5993: LIST
5994: PUSH
5995: EMPTY
5996: LIST
5997: LIST
5998: PPUSH
5999: CALL_OW 69
6003: IFFALSE 6020
// begin Wait ( 1 1$25 ) ;
6005: LD_INT 2975
6007: PPUSH
6008: CALL_OW 67
// more_troops := true ;
6012: LD_ADDR_VAR 0 3
6016: PUSH
6017: LD_INT 1
6019: ST_TO_ADDR
// end ; if more_troops then
6020: LD_VAR 0 3
6024: IFFALSE 6212
// begin force := PrepareArabianTroops ( [ 4 , 5 , 6 ] [ Difficulty ] , skill , arArea2 ) ;
6026: LD_ADDR_VAR 0 8
6030: PUSH
6031: LD_INT 4
6033: PUSH
6034: LD_INT 5
6036: PUSH
6037: LD_INT 6
6039: PUSH
6040: EMPTY
6041: LIST
6042: LIST
6043: LIST
6044: PUSH
6045: LD_OWVAR 67
6049: ARRAY
6050: PPUSH
6051: LD_VAR 0 4
6055: PPUSH
6056: LD_INT 14
6058: PPUSH
6059: CALL 5673 0 3
6063: ST_TO_ADDR
// veh := PrepareTank ( 2 , 3 , ru_medium_tracked , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_heavy_machine_gun , ru_gatling_gun ] [ Difficulty ] , 90 ) ;
6064: LD_ADDR_VAR 0 7
6068: PUSH
6069: LD_INT 2
6071: PPUSH
6072: LD_INT 3
6074: PPUSH
6075: LD_INT 22
6077: PPUSH
6078: LD_INT 1
6080: PPUSH
6081: LD_INT 1
6083: PPUSH
6084: LD_INT 42
6086: PUSH
6087: LD_INT 42
6089: PUSH
6090: LD_INT 43
6092: PUSH
6093: EMPTY
6094: LIST
6095: LIST
6096: LIST
6097: PUSH
6098: LD_OWVAR 67
6102: ARRAY
6103: PPUSH
6104: LD_INT 90
6106: PPUSH
6107: CALL 427 0 7
6111: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
6112: LD_VAR 0 7
6116: PPUSH
6117: LD_INT 4
6119: PPUSH
6120: CALL_OW 233
// PlaceUnitArea ( veh , arArea1 , false ) ;
6124: LD_VAR 0 7
6128: PPUSH
6129: LD_INT 13
6131: PPUSH
6132: LD_INT 0
6134: PPUSH
6135: CALL_OW 49
// uc_side := 2 ;
6139: LD_ADDR_OWVAR 20
6143: PUSH
6144: LD_INT 2
6146: ST_TO_ADDR
// uc_nation := 2 ;
6147: LD_ADDR_OWVAR 21
6151: PUSH
6152: LD_INT 2
6154: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
6155: LD_INT 0
6157: PPUSH
6158: LD_INT 1
6160: PPUSH
6161: LD_VAR 0 4
6165: PPUSH
6166: CALL_OW 380
// un := CreateHuman ;
6170: LD_ADDR_VAR 0 6
6174: PUSH
6175: CALL_OW 44
6179: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6180: LD_VAR 0 6
6184: PPUSH
6185: LD_VAR 0 7
6189: PPUSH
6190: CALL_OW 52
// force := force ^ un ;
6194: LD_ADDR_VAR 0 8
6198: PUSH
6199: LD_VAR 0 8
6203: PUSH
6204: LD_VAR 0 6
6208: ADD
6209: ST_TO_ADDR
// end else
6210: GO 6250
// begin force := PrepareArabianTroops ( [ 3 , 4 , 5 ] [ Difficulty ] , skill , arArea2 ) ;
6212: LD_ADDR_VAR 0 8
6216: PUSH
6217: LD_INT 3
6219: PUSH
6220: LD_INT 4
6222: PUSH
6223: LD_INT 5
6225: PUSH
6226: EMPTY
6227: LIST
6228: LIST
6229: LIST
6230: PUSH
6231: LD_OWVAR 67
6235: ARRAY
6236: PPUSH
6237: LD_VAR 0 4
6241: PPUSH
6242: LD_INT 14
6244: PPUSH
6245: CALL 5673 0 3
6249: ST_TO_ADDR
// end ; if force then
6250: LD_VAR 0 8
6254: IFFALSE 6266
// ar_forces := force ;
6256: LD_ADDR_EXP 27
6260: PUSH
6261: LD_VAR 0 8
6265: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
6266: LD_INT 35
6268: PPUSH
6269: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) = 0 ;
6273: LD_INT 22
6275: PUSH
6276: LD_INT 2
6278: PUSH
6279: EMPTY
6280: LIST
6281: LIST
6282: PUSH
6283: LD_INT 21
6285: PUSH
6286: LD_INT 1
6288: PUSH
6289: EMPTY
6290: LIST
6291: LIST
6292: PUSH
6293: EMPTY
6294: LIST
6295: LIST
6296: PPUSH
6297: CALL_OW 69
6301: PUSH
6302: LD_INT 0
6304: EQUAL
6305: IFFALSE 6266
// Wait ( timer ) ;
6307: LD_VAR 0 2
6311: PPUSH
6312: CALL_OW 67
// force := PrepareArabianTroops ( [ 4 , 5 , 6 ] [ Difficulty ] , skill , [ arArea1 , arArea2 ] [ rand ( 1 , 2 ) ] ) ;
6316: LD_ADDR_VAR 0 8
6320: PUSH
6321: LD_INT 4
6323: PUSH
6324: LD_INT 5
6326: PUSH
6327: LD_INT 6
6329: PUSH
6330: EMPTY
6331: LIST
6332: LIST
6333: LIST
6334: PUSH
6335: LD_OWVAR 67
6339: ARRAY
6340: PPUSH
6341: LD_VAR 0 4
6345: PPUSH
6346: LD_INT 13
6348: PUSH
6349: LD_INT 14
6351: PUSH
6352: EMPTY
6353: LIST
6354: LIST
6355: PUSH
6356: LD_INT 1
6358: PPUSH
6359: LD_INT 2
6361: PPUSH
6362: CALL_OW 12
6366: ARRAY
6367: PPUSH
6368: CALL 5673 0 3
6372: ST_TO_ADDR
// if Difficulty > 1 and Delta then
6373: LD_OWVAR 67
6377: PUSH
6378: LD_INT 1
6380: GREATER
6381: PUSH
6382: LD_EXP 6
6386: AND
6387: IFFALSE 6466
// begin uc_side := 2 ;
6389: LD_ADDR_OWVAR 20
6393: PUSH
6394: LD_INT 2
6396: ST_TO_ADDR
// uc_nation := 2 ;
6397: LD_ADDR_OWVAR 21
6401: PUSH
6402: LD_INT 2
6404: ST_TO_ADDR
// PrepareHuman ( false , 2 , skill ) ;
6405: LD_INT 0
6407: PPUSH
6408: LD_INT 2
6410: PPUSH
6411: LD_VAR 0 4
6415: PPUSH
6416: CALL_OW 380
// eng := CreateHuman ;
6420: LD_ADDR_VAR 0 5
6424: PUSH
6425: CALL_OW 44
6429: ST_TO_ADDR
// PlaceUnitArea ( eng , arArea1 , false ) ;
6430: LD_VAR 0 5
6434: PPUSH
6435: LD_INT 13
6437: PPUSH
6438: LD_INT 0
6440: PPUSH
6441: CALL_OW 49
// Wait ( 3 ) ;
6445: LD_INT 3
6447: PPUSH
6448: CALL_OW 67
// AddComEnterUnit ( eng , Delta ) ;
6452: LD_VAR 0 5
6456: PPUSH
6457: LD_EXP 6
6461: PPUSH
6462: CALL_OW 180
// end ; if force then
6466: LD_VAR 0 8
6470: IFFALSE 6482
// ar_forces := force ;
6472: LD_ADDR_EXP 27
6476: PUSH
6477: LD_VAR 0 8
6481: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
6482: LD_INT 35
6484: PPUSH
6485: CALL_OW 67
// if eng then
6489: LD_VAR 0 5
6493: IFFALSE 6547
// if GetSide ( Delta ) = 2 and IsOk ( eng ) and not IsInUnit ( eng ) then
6495: LD_EXP 6
6499: PPUSH
6500: CALL_OW 255
6504: PUSH
6505: LD_INT 2
6507: EQUAL
6508: PUSH
6509: LD_VAR 0 5
6513: PPUSH
6514: CALL_OW 302
6518: AND
6519: PUSH
6520: LD_VAR 0 5
6524: PPUSH
6525: CALL_OW 310
6529: NOT
6530: AND
6531: IFFALSE 6547
// ComEnterUnit ( eng , Delta ) ;
6533: LD_VAR 0 5
6537: PPUSH
6538: LD_EXP 6
6542: PPUSH
6543: CALL_OW 120
// until FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) = 0 ;
6547: LD_INT 22
6549: PUSH
6550: LD_INT 2
6552: PUSH
6553: EMPTY
6554: LIST
6555: LIST
6556: PUSH
6557: LD_INT 21
6559: PUSH
6560: LD_INT 1
6562: PUSH
6563: EMPTY
6564: LIST
6565: LIST
6566: PUSH
6567: EMPTY
6568: LIST
6569: LIST
6570: PPUSH
6571: CALL_OW 69
6575: PUSH
6576: LD_INT 0
6578: EQUAL
6579: IFFALSE 6482
// Wait ( 2 2$00 ) ;
6581: LD_INT 4200
6583: PPUSH
6584: CALL_OW 67
// ap_killers := PrepareArabianTroops ( [ 1 , 2 , 2 ] [ Difficulty ] , skill , arArea1 ) ;
6588: LD_ADDR_EXP 28
6592: PUSH
6593: LD_INT 1
6595: PUSH
6596: LD_INT 2
6598: PUSH
6599: LD_INT 2
6601: PUSH
6602: EMPTY
6603: LIST
6604: LIST
6605: LIST
6606: PUSH
6607: LD_OWVAR 67
6611: ARRAY
6612: PPUSH
6613: LD_VAR 0 4
6617: PPUSH
6618: LD_INT 13
6620: PPUSH
6621: CALL 5673 0 3
6625: ST_TO_ADDR
// Wait ( timer * 2 ) ;
6626: LD_VAR 0 2
6630: PUSH
6631: LD_INT 2
6633: MUL
6634: PPUSH
6635: CALL_OW 67
// ar_forces := PrepareArabianTroops ( [ 5 , 6 , 7 ] [ Difficulty ] , skill , arArea1 ) ^ PrepareArabianTroops ( [ 3 , 4 , 4 ] [ Difficulty ] , skill , arArea2 ) ;
6639: LD_ADDR_EXP 27
6643: PUSH
6644: LD_INT 5
6646: PUSH
6647: LD_INT 6
6649: PUSH
6650: LD_INT 7
6652: PUSH
6653: EMPTY
6654: LIST
6655: LIST
6656: LIST
6657: PUSH
6658: LD_OWVAR 67
6662: ARRAY
6663: PPUSH
6664: LD_VAR 0 4
6668: PPUSH
6669: LD_INT 13
6671: PPUSH
6672: CALL 5673 0 3
6676: PUSH
6677: LD_INT 3
6679: PUSH
6680: LD_INT 4
6682: PUSH
6683: LD_INT 4
6685: PUSH
6686: EMPTY
6687: LIST
6688: LIST
6689: LIST
6690: PUSH
6691: LD_OWVAR 67
6695: ARRAY
6696: PPUSH
6697: LD_VAR 0 4
6701: PPUSH
6702: LD_INT 14
6704: PPUSH
6705: CALL 5673 0 3
6709: ADD
6710: ST_TO_ADDR
// end ;
6711: PPOPN 8
6713: END
// every 0 0$03 trigger ar_forces do var i , target ;
6714: LD_EXP 27
6718: IFFALSE 6916
6720: GO 6722
6722: DISABLE
6723: LD_INT 0
6725: PPUSH
6726: PPUSH
// begin enable ;
6727: ENABLE
// if not ar_forces then
6728: LD_EXP 27
6732: NOT
6733: IFFALSE 6737
// exit ;
6735: GO 6916
// if Delta then
6737: LD_EXP 6
6741: IFFALSE 6755
// target := Delta else
6743: LD_ADDR_VAR 0 2
6747: PUSH
6748: LD_EXP 6
6752: ST_TO_ADDR
6753: GO 6765
// target := JMM ;
6755: LD_ADDR_VAR 0 2
6759: PUSH
6760: LD_EXP 16
6764: ST_TO_ADDR
// for i in ar_forces do
6765: LD_ADDR_VAR 0 1
6769: PUSH
6770: LD_EXP 27
6774: PUSH
6775: FOR_IN
6776: IFFALSE 6914
// begin if i in FilterAllUnits ( [ f_driving ] ) then
6778: LD_VAR 0 1
6782: PUSH
6783: LD_INT 55
6785: PUSH
6786: EMPTY
6787: LIST
6788: PPUSH
6789: CALL_OW 69
6793: IN
6794: IFFALSE 6837
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , IsInUnit ( i ) ) ) else
6796: LD_VAR 0 1
6800: PPUSH
6801: LD_INT 22
6803: PUSH
6804: LD_INT 1
6806: PUSH
6807: EMPTY
6808: LIST
6809: LIST
6810: PPUSH
6811: CALL_OW 69
6815: PPUSH
6816: LD_VAR 0 1
6820: PPUSH
6821: CALL_OW 310
6825: PPUSH
6826: CALL_OW 74
6830: PPUSH
6831: CALL_OW 115
6835: GO 6912
// if GetDistUnits ( i , target ) > 30 then
6837: LD_VAR 0 1
6841: PPUSH
6842: LD_VAR 0 2
6846: PPUSH
6847: CALL_OW 296
6851: PUSH
6852: LD_INT 30
6854: GREATER
6855: IFFALSE 6888
// ComAgressiveMove ( i , GetX ( target ) , GetY ( target ) ) else
6857: LD_VAR 0 1
6861: PPUSH
6862: LD_VAR 0 2
6866: PPUSH
6867: CALL_OW 250
6871: PPUSH
6872: LD_VAR 0 2
6876: PPUSH
6877: CALL_OW 251
6881: PPUSH
6882: CALL_OW 114
6886: GO 6912
// Attack ( i , FilterAllUnits ( [ f_enemy , 2 ] ) ) ;
6888: LD_VAR 0 1
6892: PPUSH
6893: LD_INT 81
6895: PUSH
6896: LD_INT 2
6898: PUSH
6899: EMPTY
6900: LIST
6901: LIST
6902: PPUSH
6903: CALL_OW 69
6907: PPUSH
6908: CALL 732 0 2
// end ;
6912: GO 6775
6914: POP
6915: POP
// end ;
6916: PPOPN 2
6918: END
// every 0 0$01 trigger ap_killers do var filter , i , target ;
6919: LD_EXP 28
6923: IFFALSE 7083
6925: GO 6927
6927: DISABLE
6928: LD_INT 0
6930: PPUSH
6931: PPUSH
6932: PPUSH
// begin enable ;
6933: ENABLE
// filter := FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) ;
6934: LD_ADDR_VAR 0 1
6938: PUSH
6939: LD_INT 22
6941: PUSH
6942: LD_INT 0
6944: PUSH
6945: EMPTY
6946: LIST
6947: LIST
6948: PUSH
6949: LD_INT 25
6951: PUSH
6952: LD_INT 12
6954: PUSH
6955: EMPTY
6956: LIST
6957: LIST
6958: PUSH
6959: EMPTY
6960: LIST
6961: LIST
6962: PPUSH
6963: CALL_OW 69
6967: ST_TO_ADDR
// if not filter then
6968: LD_VAR 0 1
6972: NOT
6973: IFFALSE 7000
// begin ar_forces := ar_forces ^ ap_killers ;
6975: LD_ADDR_EXP 27
6979: PUSH
6980: LD_EXP 27
6984: PUSH
6985: LD_EXP 28
6989: ADD
6990: ST_TO_ADDR
// ap_killers := [ ] ;
6991: LD_ADDR_EXP 28
6995: PUSH
6996: EMPTY
6997: ST_TO_ADDR
// exit ;
6998: GO 7083
// end ; for i in ap_killers do
7000: LD_ADDR_VAR 0 2
7004: PUSH
7005: LD_EXP 28
7009: PUSH
7010: FOR_IN
7011: IFFALSE 7081
// begin if not IsOk ( i ) then
7013: LD_VAR 0 2
7017: PPUSH
7018: CALL_OW 302
7022: NOT
7023: IFFALSE 7027
// continue ;
7025: GO 7010
// if not HasTask ( i ) then
7027: LD_VAR 0 2
7031: PPUSH
7032: CALL_OW 314
7036: NOT
7037: IFFALSE 7059
// target := NearestUnitToUnit ( filter , i ) ;
7039: LD_ADDR_VAR 0 3
7043: PUSH
7044: LD_VAR 0 1
7048: PPUSH
7049: LD_VAR 0 2
7053: PPUSH
7054: CALL_OW 74
7058: ST_TO_ADDR
// if target then
7059: LD_VAR 0 3
7063: IFFALSE 7079
// ComAttackUnit ( i , target ) ;
7065: LD_VAR 0 2
7069: PPUSH
7070: LD_VAR 0 3
7074: PPUSH
7075: CALL_OW 115
// end ;
7079: GO 7010
7081: POP
7082: POP
// end ; end_of_file
7083: PPOPN 3
7085: END
// every 0 0$40 + 0 0$2 trigger Delta do var i , counter , cr ;
7086: LD_EXP 6
7090: IFFALSE 7222
7092: GO 7094
7094: DISABLE
7095: LD_INT 0
7097: PPUSH
7098: PPUSH
7099: PPUSH
// begin counter := [ 300 , 250 , 220 ] [ Difficulty ] ;
7100: LD_ADDR_VAR 0 2
7104: PUSH
7105: LD_INT 300
7107: PUSH
7108: LD_INT 250
7110: PUSH
7111: LD_INT 220
7113: PUSH
7114: EMPTY
7115: LIST
7116: LIST
7117: LIST
7118: PUSH
7119: LD_OWVAR 67
7123: ARRAY
7124: ST_TO_ADDR
// CreateCratesArea ( Rand ( 1 , 3 ) , cratesArea , true ) ;
7125: LD_INT 1
7127: PPUSH
7128: LD_INT 3
7130: PPUSH
7131: CALL_OW 12
7135: PPUSH
7136: LD_INT 7
7138: PPUSH
7139: LD_INT 1
7141: PPUSH
7142: CALL_OW 55
// repeat wait ( rand ( 1 1$30 , 2 2$20 ) ) ;
7146: LD_INT 3150
7148: PPUSH
7149: LD_INT 4900
7151: PPUSH
7152: CALL_OW 12
7156: PPUSH
7157: CALL_OW 67
// cr := rand ( 1 , 5 ) ;
7161: LD_ADDR_VAR 0 3
7165: PUSH
7166: LD_INT 1
7168: PPUSH
7169: LD_INT 5
7171: PPUSH
7172: CALL_OW 12
7176: ST_TO_ADDR
// CreateCratesArea ( cr , cratesArea , true ) ;
7177: LD_VAR 0 3
7181: PPUSH
7182: LD_INT 7
7184: PPUSH
7185: LD_INT 1
7187: PPUSH
7188: CALL_OW 55
// counter := counter - cr * 10 ;
7192: LD_ADDR_VAR 0 2
7196: PUSH
7197: LD_VAR 0 2
7201: PUSH
7202: LD_VAR 0 3
7206: PUSH
7207: LD_INT 10
7209: MUL
7210: MINUS
7211: ST_TO_ADDR
// until counter <= 0 ;
7212: LD_VAR 0 2
7216: PUSH
7217: LD_INT 0
7219: LESSEQUAL
7220: IFFALSE 7146
// end ;
7222: PPOPN 3
7224: END
// every 0 0$03 trigger not Delta do var i ;
7225: LD_EXP 6
7229: NOT
7230: IFFALSE 7300
7232: GO 7234
7234: DISABLE
7235: LD_INT 0
7237: PPUSH
// begin for i = 1 to 4 - Difficulty do
7238: LD_ADDR_VAR 0 1
7242: PUSH
7243: DOUBLE
7244: LD_INT 1
7246: DEC
7247: ST_TO_ADDR
7248: LD_INT 4
7250: PUSH
7251: LD_OWVAR 67
7255: MINUS
7256: PUSH
7257: FOR_TO
7258: IFFALSE 7298
// begin CreateCratesArea ( rand ( 2 , 5 ) , deltaMainArea , true ) ;
7260: LD_INT 2
7262: PPUSH
7263: LD_INT 5
7265: PPUSH
7266: CALL_OW 12
7270: PPUSH
7271: LD_INT 8
7273: PPUSH
7274: LD_INT 1
7276: PPUSH
7277: CALL_OW 55
// Wait ( rand ( 0 0$16 , 0 0$39 ) ) ;
7281: LD_INT 560
7283: PPUSH
7284: LD_INT 1365
7286: PPUSH
7287: CALL_OW 12
7291: PPUSH
7292: CALL_OW 67
// end ;
7296: GO 7257
7298: POP
7299: POP
// end ;
7300: PPOPN 1
7302: END
// every 3 3$00 trigger tick < 15 15$00 do
7303: LD_OWVAR 1
7307: PUSH
7308: LD_INT 31500
7310: LESS
7311: IFFALSE 7371
7313: GO 7315
7315: DISABLE
// begin enable ;
7316: ENABLE
// CreateCratesAnyWhere ( rand ( 1 , 3 ) , true ) ;
7317: LD_INT 1
7319: PPUSH
7320: LD_INT 3
7322: PPUSH
7323: CALL_OW 12
7327: PPUSH
7328: LD_INT 1
7330: PPUSH
7331: CALL_OW 57
// Wait ( rand ( 0 0$38 , 0 0$59 ) ) ;
7335: LD_INT 1330
7337: PPUSH
7338: LD_INT 2065
7340: PPUSH
7341: CALL_OW 12
7345: PPUSH
7346: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 4 ) , riverArea , true ) ;
7350: LD_INT 1
7352: PPUSH
7353: LD_INT 4
7355: PPUSH
7356: CALL_OW 12
7360: PPUSH
7361: LD_INT 15
7363: PPUSH
7364: LD_INT 1
7366: PPUSH
7367: CALL_OW 55
// end ; end_of_file
7371: END
// on UnitDestroyed ( un ) do begin if un = JMM then
7372: LD_VAR 0 1
7376: PUSH
7377: LD_EXP 16
7381: EQUAL
7382: IFFALSE 7391
// YouLost ( JMM ) ;
7384: LD_STRING JMM
7386: PPUSH
7387: CALL_OW 104
// if un = Delta then
7391: LD_VAR 0 1
7395: PUSH
7396: LD_EXP 6
7400: EQUAL
7401: IFFALSE 7424
// begin Delta := 0 ;
7403: LD_ADDR_EXP 6
7407: PUSH
7408: LD_INT 0
7410: ST_TO_ADDR
// SetRestrict ( b_depot , 1 , true ) ;
7411: LD_INT 0
7413: PPUSH
7414: LD_INT 1
7416: PPUSH
7417: LD_INT 1
7419: PPUSH
7420: CALL_OW 324
// end ; if un in ar_forces then
7424: LD_VAR 0 1
7428: PUSH
7429: LD_EXP 27
7433: IN
7434: IFFALSE 7452
// ar_forces := ar_forces diff un ;
7436: LD_ADDR_EXP 27
7440: PUSH
7441: LD_EXP 27
7445: PUSH
7446: LD_VAR 0 1
7450: DIFF
7451: ST_TO_ADDR
// if un in ap_killers then
7452: LD_VAR 0 1
7456: PUSH
7457: LD_EXP 28
7461: IN
7462: IFFALSE 7480
// ap_killers := ap_killers diff un ;
7464: LD_ADDR_EXP 28
7468: PUSH
7469: LD_EXP 28
7473: PUSH
7474: LD_VAR 0 1
7478: DIFF
7479: ST_TO_ADDR
// if un in FilterAllUnits ( [ f_or , [ f_class , class_apeman ] , [ f_class , class_apeman_engineer ] ] ) then
7480: LD_VAR 0 1
7484: PUSH
7485: LD_INT 2
7487: PUSH
7488: LD_INT 25
7490: PUSH
7491: LD_INT 12
7493: PUSH
7494: EMPTY
7495: LIST
7496: LIST
7497: PUSH
7498: LD_INT 25
7500: PUSH
7501: LD_INT 16
7503: PUSH
7504: EMPTY
7505: LIST
7506: LIST
7507: PUSH
7508: EMPTY
7509: LIST
7510: LIST
7511: LIST
7512: PPUSH
7513: CALL_OW 69
7517: IN
7518: IFFALSE 7534
// apeKillCounter := apeKillCounter + 1 ;
7520: LD_ADDR_EXP 15
7524: PUSH
7525: LD_EXP 15
7529: PUSH
7530: LD_INT 1
7532: PLUS
7533: ST_TO_ADDR
// end ;
7534: PPOPN 1
7536: END
// on Contact ( s1 , s2 ) do if s1 = 1 and s2 = 2 and not arab_spotted then
7537: LD_VAR 0 1
7541: PUSH
7542: LD_INT 1
7544: EQUAL
7545: PUSH
7546: LD_VAR 0 2
7550: PUSH
7551: LD_INT 2
7553: EQUAL
7554: AND
7555: PUSH
7556: LD_EXP 13
7560: NOT
7561: AND
7562: IFFALSE 7572
// arab_spotted := true ;
7564: LD_ADDR_EXP 13
7568: PUSH
7569: LD_INT 1
7571: ST_TO_ADDR
7572: PPOPN 2
7574: END
// on EndTheMissionRaised ( p ) do begin end_the_mission_allowed := false ;
7575: LD_ADDR_OWVAR 57
7579: PUSH
7580: LD_INT 0
7582: ST_TO_ADDR
// end_mission := true ;
7583: LD_ADDR_EXP 14
7587: PUSH
7588: LD_INT 1
7590: ST_TO_ADDR
// end ;
7591: PPOPN 1
7593: END
// on ApemanTamed ( apeman , sci ) do begin if GetSide ( sci ) = 1 then
7594: LD_VAR 0 2
7598: PPUSH
7599: CALL_OW 255
7603: PUSH
7604: LD_INT 1
7606: EQUAL
7607: IFFALSE 7623
// apeman_counter := apeman_counter + 1 ;
7609: LD_ADDR_EXP 12
7613: PUSH
7614: LD_EXP 12
7618: PUSH
7619: LD_INT 1
7621: PLUS
7622: ST_TO_ADDR
// if not first_apeman_tamed then
7623: LD_EXP 8
7627: NOT
7628: IFFALSE 7828
// begin first_apeman_tamed := true ;
7630: LD_ADDR_EXP 8
7634: PUSH
7635: LD_INT 1
7637: ST_TO_ADDR
// if sci = Gladstone then
7638: LD_VAR 0 2
7642: PUSH
7643: LD_EXP 17
7647: EQUAL
7648: IFFALSE 7662
// Say ( Gladstone , D7b-Glad-1 ) ;
7650: LD_EXP 17
7654: PPUSH
7655: LD_STRING D7b-Glad-1
7657: PPUSH
7658: CALL_OW 88
// if sci = Denis then
7662: LD_VAR 0 2
7666: PUSH
7667: LD_EXP 19
7671: EQUAL
7672: IFFALSE 7686
// Say ( Denis , D7a-Den-1 ) ;
7674: LD_EXP 19
7678: PPUSH
7679: LD_STRING D7a-Den-1
7681: PPUSH
7682: CALL_OW 88
// if not sci in [ JMM , Gladstone , Denis , Lisa , Frank , Bobby , Cyrus , Donaldson ] then
7686: LD_VAR 0 2
7690: PUSH
7691: LD_EXP 16
7695: PUSH
7696: LD_EXP 17
7700: PUSH
7701: LD_EXP 19
7705: PUSH
7706: LD_EXP 22
7710: PUSH
7711: LD_EXP 23
7715: PUSH
7716: LD_EXP 24
7720: PUSH
7721: LD_EXP 25
7725: PUSH
7726: LD_EXP 21
7730: PUSH
7731: EMPTY
7732: LIST
7733: LIST
7734: LIST
7735: LIST
7736: LIST
7737: LIST
7738: LIST
7739: LIST
7740: IN
7741: NOT
7742: IFFALSE 7785
// begin if GetSex ( sci ) = sex_male then
7744: LD_VAR 0 2
7748: PPUSH
7749: CALL_OW 258
7753: PUSH
7754: LD_INT 1
7756: EQUAL
7757: IFFALSE 7773
// Say ( sci , D7c-Sci1-1 ) else
7759: LD_VAR 0 2
7763: PPUSH
7764: LD_STRING D7c-Sci1-1
7766: PPUSH
7767: CALL_OW 88
7771: GO 7785
// Say ( sci , D7c-FSci1-1 ) ;
7773: LD_VAR 0 2
7777: PPUSH
7778: LD_STRING D7c-FSci1-1
7780: PPUSH
7781: CALL_OW 88
// end ; if not sci = Gladstone then
7785: LD_VAR 0 2
7789: PUSH
7790: LD_EXP 17
7794: EQUAL
7795: NOT
7796: IFFALSE 7810
// Say ( Gladstone , D7c-Glad-1 ) ;
7798: LD_EXP 17
7802: PPUSH
7803: LD_STRING D7c-Glad-1
7805: PPUSH
7806: CALL_OW 88
// if Lisa then
7810: LD_EXP 22
7814: IFFALSE 7828
// Say ( Lisa , D8-Lisa-1 ) ;
7816: LD_EXP 22
7820: PPUSH
7821: LD_STRING D8-Lisa-1
7823: PPUSH
7824: CALL_OW 88
// end ; end ; end_of_file
7828: PPOPN 2
7830: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar , ar_crane ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export function InitGlobalVariables ; begin
7831: LD_INT 0
7833: PPUSH
// ar_crane := 88 ;
7834: LD_ADDR_EXP 35
7838: PUSH
7839: LD_INT 88
7841: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
7842: LD_ADDR_EXP 30
7846: PUSH
7847: LD_INT 89
7849: ST_TO_ADDR
// us_hack := 99 ;
7850: LD_ADDR_EXP 31
7854: PUSH
7855: LD_INT 99
7857: ST_TO_ADDR
// us_artillery := 97 ;
7858: LD_ADDR_EXP 32
7862: PUSH
7863: LD_INT 97
7865: ST_TO_ADDR
// ar_bio_bomb := 91 ;
7866: LD_ADDR_EXP 33
7870: PUSH
7871: LD_INT 91
7873: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
7874: LD_ADDR_EXP 34
7878: PUSH
7879: LD_INT 92
7881: ST_TO_ADDR
// ru_radar := 98 ;
7882: LD_ADDR_EXP 29
7886: PUSH
7887: LD_INT 98
7889: ST_TO_ADDR
// tech_Artillery := 80 ;
7890: LD_ADDR_EXP 36
7894: PUSH
7895: LD_INT 80
7897: ST_TO_ADDR
// tech_RadMat := 81 ;
7898: LD_ADDR_EXP 37
7902: PUSH
7903: LD_INT 81
7905: ST_TO_ADDR
// tech_BasicTools := 82 ;
7906: LD_ADDR_EXP 38
7910: PUSH
7911: LD_INT 82
7913: ST_TO_ADDR
// tech_Cargo := 83 ;
7914: LD_ADDR_EXP 39
7918: PUSH
7919: LD_INT 83
7921: ST_TO_ADDR
// tech_Track := 84 ;
7922: LD_ADDR_EXP 40
7926: PUSH
7927: LD_INT 84
7929: ST_TO_ADDR
// tech_Crane := 85 ;
7930: LD_ADDR_EXP 41
7934: PUSH
7935: LD_INT 85
7937: ST_TO_ADDR
// tech_Bulldozer := 86 ;
7938: LD_ADDR_EXP 42
7942: PUSH
7943: LD_INT 86
7945: ST_TO_ADDR
// tech_Hovercraft := 87 ;
7946: LD_ADDR_EXP 43
7950: PUSH
7951: LD_INT 87
7953: ST_TO_ADDR
// end ;
7954: LD_VAR 0 1
7958: RET
// every 1 do
7959: GO 7961
7961: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
7962: CALL 7831 0 0
7966: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
7967: LD_VAR 0 2
7971: PUSH
7972: LD_INT 100
7974: EQUAL
7975: IFFALSE 8924
// begin if not StreamModeActive then
7977: LD_EXP 44
7981: NOT
7982: IFFALSE 7992
// StreamModeActive := true ;
7984: LD_ADDR_EXP 44
7988: PUSH
7989: LD_INT 1
7991: ST_TO_ADDR
// if p3 = 0 then
7992: LD_VAR 0 3
7996: PUSH
7997: LD_INT 0
7999: EQUAL
8000: IFFALSE 8006
// InitStreamMode ;
8002: CALL 9157 0 0
// if p3 = 1 then
8006: LD_VAR 0 3
8010: PUSH
8011: LD_INT 1
8013: EQUAL
8014: IFFALSE 8024
// sRocket := true ;
8016: LD_ADDR_EXP 49
8020: PUSH
8021: LD_INT 1
8023: ST_TO_ADDR
// if p3 = 2 then
8024: LD_VAR 0 3
8028: PUSH
8029: LD_INT 2
8031: EQUAL
8032: IFFALSE 8042
// sSpeed := true ;
8034: LD_ADDR_EXP 48
8038: PUSH
8039: LD_INT 1
8041: ST_TO_ADDR
// if p3 = 3 then
8042: LD_VAR 0 3
8046: PUSH
8047: LD_INT 3
8049: EQUAL
8050: IFFALSE 8060
// sEngine := true ;
8052: LD_ADDR_EXP 50
8056: PUSH
8057: LD_INT 1
8059: ST_TO_ADDR
// if p3 = 4 then
8060: LD_VAR 0 3
8064: PUSH
8065: LD_INT 4
8067: EQUAL
8068: IFFALSE 8078
// sSpec := true ;
8070: LD_ADDR_EXP 47
8074: PUSH
8075: LD_INT 1
8077: ST_TO_ADDR
// if p3 = 5 then
8078: LD_VAR 0 3
8082: PUSH
8083: LD_INT 5
8085: EQUAL
8086: IFFALSE 8096
// sLevel := true ;
8088: LD_ADDR_EXP 51
8092: PUSH
8093: LD_INT 1
8095: ST_TO_ADDR
// if p3 = 6 then
8096: LD_VAR 0 3
8100: PUSH
8101: LD_INT 6
8103: EQUAL
8104: IFFALSE 8114
// sArmoury := true ;
8106: LD_ADDR_EXP 52
8110: PUSH
8111: LD_INT 1
8113: ST_TO_ADDR
// if p3 = 7 then
8114: LD_VAR 0 3
8118: PUSH
8119: LD_INT 7
8121: EQUAL
8122: IFFALSE 8132
// sRadar := true ;
8124: LD_ADDR_EXP 53
8128: PUSH
8129: LD_INT 1
8131: ST_TO_ADDR
// if p3 = 8 then
8132: LD_VAR 0 3
8136: PUSH
8137: LD_INT 8
8139: EQUAL
8140: IFFALSE 8150
// sBunker := true ;
8142: LD_ADDR_EXP 54
8146: PUSH
8147: LD_INT 1
8149: ST_TO_ADDR
// if p3 = 9 then
8150: LD_VAR 0 3
8154: PUSH
8155: LD_INT 9
8157: EQUAL
8158: IFFALSE 8168
// sHack := true ;
8160: LD_ADDR_EXP 55
8164: PUSH
8165: LD_INT 1
8167: ST_TO_ADDR
// if p3 = 10 then
8168: LD_VAR 0 3
8172: PUSH
8173: LD_INT 10
8175: EQUAL
8176: IFFALSE 8186
// sFire := true ;
8178: LD_ADDR_EXP 56
8182: PUSH
8183: LD_INT 1
8185: ST_TO_ADDR
// if p3 = 11 then
8186: LD_VAR 0 3
8190: PUSH
8191: LD_INT 11
8193: EQUAL
8194: IFFALSE 8204
// sRefresh := true ;
8196: LD_ADDR_EXP 57
8200: PUSH
8201: LD_INT 1
8203: ST_TO_ADDR
// if p3 = 12 then
8204: LD_VAR 0 3
8208: PUSH
8209: LD_INT 12
8211: EQUAL
8212: IFFALSE 8222
// sExp := true ;
8214: LD_ADDR_EXP 58
8218: PUSH
8219: LD_INT 1
8221: ST_TO_ADDR
// if p3 = 13 then
8222: LD_VAR 0 3
8226: PUSH
8227: LD_INT 13
8229: EQUAL
8230: IFFALSE 8240
// sDepot := true ;
8232: LD_ADDR_EXP 59
8236: PUSH
8237: LD_INT 1
8239: ST_TO_ADDR
// if p3 = 14 then
8240: LD_VAR 0 3
8244: PUSH
8245: LD_INT 14
8247: EQUAL
8248: IFFALSE 8258
// sFlag := true ;
8250: LD_ADDR_EXP 60
8254: PUSH
8255: LD_INT 1
8257: ST_TO_ADDR
// if p3 = 15 then
8258: LD_VAR 0 3
8262: PUSH
8263: LD_INT 15
8265: EQUAL
8266: IFFALSE 8276
// sKamikadze := true ;
8268: LD_ADDR_EXP 68
8272: PUSH
8273: LD_INT 1
8275: ST_TO_ADDR
// if p3 = 16 then
8276: LD_VAR 0 3
8280: PUSH
8281: LD_INT 16
8283: EQUAL
8284: IFFALSE 8294
// sTroll := true ;
8286: LD_ADDR_EXP 69
8290: PUSH
8291: LD_INT 1
8293: ST_TO_ADDR
// if p3 = 17 then
8294: LD_VAR 0 3
8298: PUSH
8299: LD_INT 17
8301: EQUAL
8302: IFFALSE 8312
// sSlow := true ;
8304: LD_ADDR_EXP 70
8308: PUSH
8309: LD_INT 1
8311: ST_TO_ADDR
// if p3 = 18 then
8312: LD_VAR 0 3
8316: PUSH
8317: LD_INT 18
8319: EQUAL
8320: IFFALSE 8330
// sLack := true ;
8322: LD_ADDR_EXP 71
8326: PUSH
8327: LD_INT 1
8329: ST_TO_ADDR
// if p3 = 19 then
8330: LD_VAR 0 3
8334: PUSH
8335: LD_INT 19
8337: EQUAL
8338: IFFALSE 8348
// sTank := true ;
8340: LD_ADDR_EXP 73
8344: PUSH
8345: LD_INT 1
8347: ST_TO_ADDR
// if p3 = 20 then
8348: LD_VAR 0 3
8352: PUSH
8353: LD_INT 20
8355: EQUAL
8356: IFFALSE 8366
// sRemote := true ;
8358: LD_ADDR_EXP 74
8362: PUSH
8363: LD_INT 1
8365: ST_TO_ADDR
// if p3 = 21 then
8366: LD_VAR 0 3
8370: PUSH
8371: LD_INT 21
8373: EQUAL
8374: IFFALSE 8384
// sPowell := true ;
8376: LD_ADDR_EXP 75
8380: PUSH
8381: LD_INT 1
8383: ST_TO_ADDR
// if p3 = 22 then
8384: LD_VAR 0 3
8388: PUSH
8389: LD_INT 22
8391: EQUAL
8392: IFFALSE 8402
// sTeleport := true ;
8394: LD_ADDR_EXP 78
8398: PUSH
8399: LD_INT 1
8401: ST_TO_ADDR
// if p3 = 23 then
8402: LD_VAR 0 3
8406: PUSH
8407: LD_INT 23
8409: EQUAL
8410: IFFALSE 8420
// sOilTower := true ;
8412: LD_ADDR_EXP 80
8416: PUSH
8417: LD_INT 1
8419: ST_TO_ADDR
// if p3 = 24 then
8420: LD_VAR 0 3
8424: PUSH
8425: LD_INT 24
8427: EQUAL
8428: IFFALSE 8438
// sShovel := true ;
8430: LD_ADDR_EXP 81
8434: PUSH
8435: LD_INT 1
8437: ST_TO_ADDR
// if p3 = 25 then
8438: LD_VAR 0 3
8442: PUSH
8443: LD_INT 25
8445: EQUAL
8446: IFFALSE 8456
// sSheik := true ;
8448: LD_ADDR_EXP 82
8452: PUSH
8453: LD_INT 1
8455: ST_TO_ADDR
// if p3 = 26 then
8456: LD_VAR 0 3
8460: PUSH
8461: LD_INT 26
8463: EQUAL
8464: IFFALSE 8474
// sEarthquake := true ;
8466: LD_ADDR_EXP 84
8470: PUSH
8471: LD_INT 1
8473: ST_TO_ADDR
// if p3 = 27 then
8474: LD_VAR 0 3
8478: PUSH
8479: LD_INT 27
8481: EQUAL
8482: IFFALSE 8492
// sAI := true ;
8484: LD_ADDR_EXP 85
8488: PUSH
8489: LD_INT 1
8491: ST_TO_ADDR
// if p3 = 28 then
8492: LD_VAR 0 3
8496: PUSH
8497: LD_INT 28
8499: EQUAL
8500: IFFALSE 8510
// sCargo := true ;
8502: LD_ADDR_EXP 88
8506: PUSH
8507: LD_INT 1
8509: ST_TO_ADDR
// if p3 = 29 then
8510: LD_VAR 0 3
8514: PUSH
8515: LD_INT 29
8517: EQUAL
8518: IFFALSE 8528
// sDLaser := true ;
8520: LD_ADDR_EXP 89
8524: PUSH
8525: LD_INT 1
8527: ST_TO_ADDR
// if p3 = 30 then
8528: LD_VAR 0 3
8532: PUSH
8533: LD_INT 30
8535: EQUAL
8536: IFFALSE 8546
// sExchange := true ;
8538: LD_ADDR_EXP 90
8542: PUSH
8543: LD_INT 1
8545: ST_TO_ADDR
// if p3 = 31 then
8546: LD_VAR 0 3
8550: PUSH
8551: LD_INT 31
8553: EQUAL
8554: IFFALSE 8564
// sFac := true ;
8556: LD_ADDR_EXP 91
8560: PUSH
8561: LD_INT 1
8563: ST_TO_ADDR
// if p3 = 32 then
8564: LD_VAR 0 3
8568: PUSH
8569: LD_INT 32
8571: EQUAL
8572: IFFALSE 8582
// sPower := true ;
8574: LD_ADDR_EXP 92
8578: PUSH
8579: LD_INT 1
8581: ST_TO_ADDR
// if p3 = 33 then
8582: LD_VAR 0 3
8586: PUSH
8587: LD_INT 33
8589: EQUAL
8590: IFFALSE 8600
// sRandom := true ;
8592: LD_ADDR_EXP 93
8596: PUSH
8597: LD_INT 1
8599: ST_TO_ADDR
// if p3 = 34 then
8600: LD_VAR 0 3
8604: PUSH
8605: LD_INT 34
8607: EQUAL
8608: IFFALSE 8618
// sShield := true ;
8610: LD_ADDR_EXP 94
8614: PUSH
8615: LD_INT 1
8617: ST_TO_ADDR
// if p3 = 35 then
8618: LD_VAR 0 3
8622: PUSH
8623: LD_INT 35
8625: EQUAL
8626: IFFALSE 8636
// sTime := true ;
8628: LD_ADDR_EXP 95
8632: PUSH
8633: LD_INT 1
8635: ST_TO_ADDR
// if p3 = 36 then
8636: LD_VAR 0 3
8640: PUSH
8641: LD_INT 36
8643: EQUAL
8644: IFFALSE 8654
// sTools := true ;
8646: LD_ADDR_EXP 96
8650: PUSH
8651: LD_INT 1
8653: ST_TO_ADDR
// if p3 = 101 then
8654: LD_VAR 0 3
8658: PUSH
8659: LD_INT 101
8661: EQUAL
8662: IFFALSE 8672
// sSold := true ;
8664: LD_ADDR_EXP 61
8668: PUSH
8669: LD_INT 1
8671: ST_TO_ADDR
// if p3 = 102 then
8672: LD_VAR 0 3
8676: PUSH
8677: LD_INT 102
8679: EQUAL
8680: IFFALSE 8690
// sDiff := true ;
8682: LD_ADDR_EXP 62
8686: PUSH
8687: LD_INT 1
8689: ST_TO_ADDR
// if p3 = 103 then
8690: LD_VAR 0 3
8694: PUSH
8695: LD_INT 103
8697: EQUAL
8698: IFFALSE 8708
// sFog := true ;
8700: LD_ADDR_EXP 65
8704: PUSH
8705: LD_INT 1
8707: ST_TO_ADDR
// if p3 = 104 then
8708: LD_VAR 0 3
8712: PUSH
8713: LD_INT 104
8715: EQUAL
8716: IFFALSE 8726
// sReset := true ;
8718: LD_ADDR_EXP 66
8722: PUSH
8723: LD_INT 1
8725: ST_TO_ADDR
// if p3 = 105 then
8726: LD_VAR 0 3
8730: PUSH
8731: LD_INT 105
8733: EQUAL
8734: IFFALSE 8744
// sSun := true ;
8736: LD_ADDR_EXP 67
8740: PUSH
8741: LD_INT 1
8743: ST_TO_ADDR
// if p3 = 106 then
8744: LD_VAR 0 3
8748: PUSH
8749: LD_INT 106
8751: EQUAL
8752: IFFALSE 8762
// sTiger := true ;
8754: LD_ADDR_EXP 63
8758: PUSH
8759: LD_INT 1
8761: ST_TO_ADDR
// if p3 = 107 then
8762: LD_VAR 0 3
8766: PUSH
8767: LD_INT 107
8769: EQUAL
8770: IFFALSE 8780
// sBomb := true ;
8772: LD_ADDR_EXP 64
8776: PUSH
8777: LD_INT 1
8779: ST_TO_ADDR
// if p3 = 108 then
8780: LD_VAR 0 3
8784: PUSH
8785: LD_INT 108
8787: EQUAL
8788: IFFALSE 8798
// sWound := true ;
8790: LD_ADDR_EXP 72
8794: PUSH
8795: LD_INT 1
8797: ST_TO_ADDR
// if p3 = 109 then
8798: LD_VAR 0 3
8802: PUSH
8803: LD_INT 109
8805: EQUAL
8806: IFFALSE 8816
// sBetray := true ;
8808: LD_ADDR_EXP 76
8812: PUSH
8813: LD_INT 1
8815: ST_TO_ADDR
// if p3 = 110 then
8816: LD_VAR 0 3
8820: PUSH
8821: LD_INT 110
8823: EQUAL
8824: IFFALSE 8834
// sContamin := true ;
8826: LD_ADDR_EXP 77
8830: PUSH
8831: LD_INT 1
8833: ST_TO_ADDR
// if p3 = 111 then
8834: LD_VAR 0 3
8838: PUSH
8839: LD_INT 111
8841: EQUAL
8842: IFFALSE 8852
// sOil := true ;
8844: LD_ADDR_EXP 79
8848: PUSH
8849: LD_INT 1
8851: ST_TO_ADDR
// if p3 = 112 then
8852: LD_VAR 0 3
8856: PUSH
8857: LD_INT 112
8859: EQUAL
8860: IFFALSE 8870
// sStu := true ;
8862: LD_ADDR_EXP 83
8866: PUSH
8867: LD_INT 1
8869: ST_TO_ADDR
// if p3 = 113 then
8870: LD_VAR 0 3
8874: PUSH
8875: LD_INT 113
8877: EQUAL
8878: IFFALSE 8888
// sBazooka := true ;
8880: LD_ADDR_EXP 86
8884: PUSH
8885: LD_INT 1
8887: ST_TO_ADDR
// if p3 = 114 then
8888: LD_VAR 0 3
8892: PUSH
8893: LD_INT 114
8895: EQUAL
8896: IFFALSE 8906
// sMortar := true ;
8898: LD_ADDR_EXP 87
8902: PUSH
8903: LD_INT 1
8905: ST_TO_ADDR
// if p3 = 115 then
8906: LD_VAR 0 3
8910: PUSH
8911: LD_INT 115
8913: EQUAL
8914: IFFALSE 8924
// sRanger := true ;
8916: LD_ADDR_EXP 97
8920: PUSH
8921: LD_INT 1
8923: ST_TO_ADDR
// end ; if p2 = 101 then
8924: LD_VAR 0 2
8928: PUSH
8929: LD_INT 101
8931: EQUAL
8932: IFFALSE 9135
// begin case p3 of 1 :
8934: LD_VAR 0 3
8938: PUSH
8939: LD_INT 1
8941: DOUBLE
8942: EQUAL
8943: IFTRUE 8947
8945: GO 8954
8947: POP
// hHackUnlimitedResources ; 2 :
8948: CALL 19229 0 0
8952: GO 9135
8954: LD_INT 2
8956: DOUBLE
8957: EQUAL
8958: IFTRUE 8962
8960: GO 8969
8962: POP
// hHackSetLevel10 ; 3 :
8963: CALL 19362 0 0
8967: GO 9135
8969: LD_INT 3
8971: DOUBLE
8972: EQUAL
8973: IFTRUE 8977
8975: GO 8984
8977: POP
// hHackSetLevel10YourUnits ; 4 :
8978: CALL 19447 0 0
8982: GO 9135
8984: LD_INT 4
8986: DOUBLE
8987: EQUAL
8988: IFTRUE 8992
8990: GO 9014
8992: POP
// hHackSpawnHuman ( p4 , p5 , p6 ) ; 5 :
8993: LD_VAR 0 4
8997: PPUSH
8998: LD_VAR 0 5
9002: PPUSH
9003: LD_VAR 0 6
9007: PPUSH
9008: CALL 19537 0 3
9012: GO 9135
9014: LD_INT 5
9016: DOUBLE
9017: EQUAL
9018: IFTRUE 9022
9020: GO 9029
9022: POP
// hHackSpawnVehicle ; 6 :
9023: CALL 19598 0 0
9027: GO 9135
9029: LD_INT 6
9031: DOUBLE
9032: EQUAL
9033: IFTRUE 9037
9035: GO 9044
9037: POP
// hHackInvincible ; 7 :
9038: CALL 20144 0 0
9042: GO 9135
9044: LD_INT 7
9046: DOUBLE
9047: EQUAL
9048: IFTRUE 9052
9050: GO 9059
9052: POP
// hHackInvisible ; 8 :
9053: CALL 20255 0 0
9057: GO 9135
9059: LD_INT 8
9061: DOUBLE
9062: EQUAL
9063: IFTRUE 9067
9065: GO 9074
9067: POP
// hHackChangeYourSide ; 9 :
9068: CALL 20312 0 0
9072: GO 9135
9074: LD_INT 9
9076: DOUBLE
9077: EQUAL
9078: IFTRUE 9082
9080: GO 9089
9082: POP
// hHackChangeUnitSide ; 10 :
9083: CALL 20354 0 0
9087: GO 9135
9089: LD_INT 10
9091: DOUBLE
9092: EQUAL
9093: IFTRUE 9097
9095: GO 9104
9097: POP
// hHackFog ; 11 :
9098: CALL 20455 0 0
9102: GO 9135
9104: LD_INT 11
9106: DOUBLE
9107: EQUAL
9108: IFTRUE 9112
9110: GO 9119
9112: POP
// hHackApeman ; 12 :
9113: CALL 20470 0 0
9117: GO 9135
9119: LD_INT 12
9121: DOUBLE
9122: EQUAL
9123: IFTRUE 9127
9125: GO 9134
9127: POP
// hHackBoom ; end ;
9128: CALL 20555 0 0
9132: GO 9135
9134: POP
// end ; end ;
9135: PPOPN 6
9137: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
9138: GO 9140
9140: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
9141: LD_STRING initStreamRollete();
9143: PPUSH
9144: CALL_OW 559
// InitStreamMode ;
9148: CALL 9157 0 0
// DefineStreamItems ( ) ;
9152: CALL 9597 0 0
// end ;
9156: END
// function InitStreamMode ; begin
9157: LD_INT 0
9159: PPUSH
// streamModeActive := false ;
9160: LD_ADDR_EXP 44
9164: PUSH
9165: LD_INT 0
9167: ST_TO_ADDR
// normalCounter := 36 ;
9168: LD_ADDR_EXP 45
9172: PUSH
9173: LD_INT 36
9175: ST_TO_ADDR
// hardcoreCounter := 16 ;
9176: LD_ADDR_EXP 46
9180: PUSH
9181: LD_INT 16
9183: ST_TO_ADDR
// sRocket := false ;
9184: LD_ADDR_EXP 49
9188: PUSH
9189: LD_INT 0
9191: ST_TO_ADDR
// sSpeed := false ;
9192: LD_ADDR_EXP 48
9196: PUSH
9197: LD_INT 0
9199: ST_TO_ADDR
// sEngine := false ;
9200: LD_ADDR_EXP 50
9204: PUSH
9205: LD_INT 0
9207: ST_TO_ADDR
// sSpec := false ;
9208: LD_ADDR_EXP 47
9212: PUSH
9213: LD_INT 0
9215: ST_TO_ADDR
// sLevel := false ;
9216: LD_ADDR_EXP 51
9220: PUSH
9221: LD_INT 0
9223: ST_TO_ADDR
// sArmoury := false ;
9224: LD_ADDR_EXP 52
9228: PUSH
9229: LD_INT 0
9231: ST_TO_ADDR
// sRadar := false ;
9232: LD_ADDR_EXP 53
9236: PUSH
9237: LD_INT 0
9239: ST_TO_ADDR
// sBunker := false ;
9240: LD_ADDR_EXP 54
9244: PUSH
9245: LD_INT 0
9247: ST_TO_ADDR
// sHack := false ;
9248: LD_ADDR_EXP 55
9252: PUSH
9253: LD_INT 0
9255: ST_TO_ADDR
// sFire := false ;
9256: LD_ADDR_EXP 56
9260: PUSH
9261: LD_INT 0
9263: ST_TO_ADDR
// sRefresh := false ;
9264: LD_ADDR_EXP 57
9268: PUSH
9269: LD_INT 0
9271: ST_TO_ADDR
// sExp := false ;
9272: LD_ADDR_EXP 58
9276: PUSH
9277: LD_INT 0
9279: ST_TO_ADDR
// sDepot := false ;
9280: LD_ADDR_EXP 59
9284: PUSH
9285: LD_INT 0
9287: ST_TO_ADDR
// sFlag := false ;
9288: LD_ADDR_EXP 60
9292: PUSH
9293: LD_INT 0
9295: ST_TO_ADDR
// sKamikadze := false ;
9296: LD_ADDR_EXP 68
9300: PUSH
9301: LD_INT 0
9303: ST_TO_ADDR
// sTroll := false ;
9304: LD_ADDR_EXP 69
9308: PUSH
9309: LD_INT 0
9311: ST_TO_ADDR
// sSlow := false ;
9312: LD_ADDR_EXP 70
9316: PUSH
9317: LD_INT 0
9319: ST_TO_ADDR
// sLack := false ;
9320: LD_ADDR_EXP 71
9324: PUSH
9325: LD_INT 0
9327: ST_TO_ADDR
// sTank := false ;
9328: LD_ADDR_EXP 73
9332: PUSH
9333: LD_INT 0
9335: ST_TO_ADDR
// sRemote := false ;
9336: LD_ADDR_EXP 74
9340: PUSH
9341: LD_INT 0
9343: ST_TO_ADDR
// sPowell := false ;
9344: LD_ADDR_EXP 75
9348: PUSH
9349: LD_INT 0
9351: ST_TO_ADDR
// sTeleport := false ;
9352: LD_ADDR_EXP 78
9356: PUSH
9357: LD_INT 0
9359: ST_TO_ADDR
// sOilTower := false ;
9360: LD_ADDR_EXP 80
9364: PUSH
9365: LD_INT 0
9367: ST_TO_ADDR
// sShovel := false ;
9368: LD_ADDR_EXP 81
9372: PUSH
9373: LD_INT 0
9375: ST_TO_ADDR
// sSheik := false ;
9376: LD_ADDR_EXP 82
9380: PUSH
9381: LD_INT 0
9383: ST_TO_ADDR
// sEarthquake := false ;
9384: LD_ADDR_EXP 84
9388: PUSH
9389: LD_INT 0
9391: ST_TO_ADDR
// sAI := false ;
9392: LD_ADDR_EXP 85
9396: PUSH
9397: LD_INT 0
9399: ST_TO_ADDR
// sCargo := false ;
9400: LD_ADDR_EXP 88
9404: PUSH
9405: LD_INT 0
9407: ST_TO_ADDR
// sDLaser := false ;
9408: LD_ADDR_EXP 89
9412: PUSH
9413: LD_INT 0
9415: ST_TO_ADDR
// sExchange := false ;
9416: LD_ADDR_EXP 90
9420: PUSH
9421: LD_INT 0
9423: ST_TO_ADDR
// sFac := false ;
9424: LD_ADDR_EXP 91
9428: PUSH
9429: LD_INT 0
9431: ST_TO_ADDR
// sPower := false ;
9432: LD_ADDR_EXP 92
9436: PUSH
9437: LD_INT 0
9439: ST_TO_ADDR
// sRandom := false ;
9440: LD_ADDR_EXP 93
9444: PUSH
9445: LD_INT 0
9447: ST_TO_ADDR
// sShield := false ;
9448: LD_ADDR_EXP 94
9452: PUSH
9453: LD_INT 0
9455: ST_TO_ADDR
// sTime := false ;
9456: LD_ADDR_EXP 95
9460: PUSH
9461: LD_INT 0
9463: ST_TO_ADDR
// sTools := false ;
9464: LD_ADDR_EXP 96
9468: PUSH
9469: LD_INT 0
9471: ST_TO_ADDR
// sSold := false ;
9472: LD_ADDR_EXP 61
9476: PUSH
9477: LD_INT 0
9479: ST_TO_ADDR
// sDiff := false ;
9480: LD_ADDR_EXP 62
9484: PUSH
9485: LD_INT 0
9487: ST_TO_ADDR
// sFog := false ;
9488: LD_ADDR_EXP 65
9492: PUSH
9493: LD_INT 0
9495: ST_TO_ADDR
// sReset := false ;
9496: LD_ADDR_EXP 66
9500: PUSH
9501: LD_INT 0
9503: ST_TO_ADDR
// sSun := false ;
9504: LD_ADDR_EXP 67
9508: PUSH
9509: LD_INT 0
9511: ST_TO_ADDR
// sTiger := false ;
9512: LD_ADDR_EXP 63
9516: PUSH
9517: LD_INT 0
9519: ST_TO_ADDR
// sBomb := false ;
9520: LD_ADDR_EXP 64
9524: PUSH
9525: LD_INT 0
9527: ST_TO_ADDR
// sWound := false ;
9528: LD_ADDR_EXP 72
9532: PUSH
9533: LD_INT 0
9535: ST_TO_ADDR
// sBetray := false ;
9536: LD_ADDR_EXP 76
9540: PUSH
9541: LD_INT 0
9543: ST_TO_ADDR
// sContamin := false ;
9544: LD_ADDR_EXP 77
9548: PUSH
9549: LD_INT 0
9551: ST_TO_ADDR
// sOil := false ;
9552: LD_ADDR_EXP 79
9556: PUSH
9557: LD_INT 0
9559: ST_TO_ADDR
// sStu := false ;
9560: LD_ADDR_EXP 83
9564: PUSH
9565: LD_INT 0
9567: ST_TO_ADDR
// sBazooka := false ;
9568: LD_ADDR_EXP 86
9572: PUSH
9573: LD_INT 0
9575: ST_TO_ADDR
// sMortar := false ;
9576: LD_ADDR_EXP 87
9580: PUSH
9581: LD_INT 0
9583: ST_TO_ADDR
// sRanger := false ;
9584: LD_ADDR_EXP 97
9588: PUSH
9589: LD_INT 0
9591: ST_TO_ADDR
// end ;
9592: LD_VAR 0 1
9596: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
9597: LD_INT 0
9599: PPUSH
9600: PPUSH
9601: PPUSH
9602: PPUSH
9603: PPUSH
// result := [ ] ;
9604: LD_ADDR_VAR 0 1
9608: PUSH
9609: EMPTY
9610: ST_TO_ADDR
// if campaign_id = 1 then
9611: LD_OWVAR 69
9615: PUSH
9616: LD_INT 1
9618: EQUAL
9619: IFFALSE 12557
// begin case mission_number of 1 :
9621: LD_OWVAR 70
9625: PUSH
9626: LD_INT 1
9628: DOUBLE
9629: EQUAL
9630: IFTRUE 9634
9632: GO 9698
9634: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
9635: LD_ADDR_VAR 0 1
9639: PUSH
9640: LD_INT 2
9642: PUSH
9643: LD_INT 4
9645: PUSH
9646: LD_INT 11
9648: PUSH
9649: LD_INT 12
9651: PUSH
9652: LD_INT 15
9654: PUSH
9655: LD_INT 16
9657: PUSH
9658: LD_INT 22
9660: PUSH
9661: LD_INT 23
9663: PUSH
9664: LD_INT 26
9666: PUSH
9667: EMPTY
9668: LIST
9669: LIST
9670: LIST
9671: LIST
9672: LIST
9673: LIST
9674: LIST
9675: LIST
9676: LIST
9677: PUSH
9678: LD_INT 101
9680: PUSH
9681: LD_INT 102
9683: PUSH
9684: LD_INT 106
9686: PUSH
9687: EMPTY
9688: LIST
9689: LIST
9690: LIST
9691: PUSH
9692: EMPTY
9693: LIST
9694: LIST
9695: ST_TO_ADDR
9696: GO 12555
9698: LD_INT 2
9700: DOUBLE
9701: EQUAL
9702: IFTRUE 9706
9704: GO 9778
9706: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
9707: LD_ADDR_VAR 0 1
9711: PUSH
9712: LD_INT 2
9714: PUSH
9715: LD_INT 4
9717: PUSH
9718: LD_INT 11
9720: PUSH
9721: LD_INT 12
9723: PUSH
9724: LD_INT 15
9726: PUSH
9727: LD_INT 16
9729: PUSH
9730: LD_INT 22
9732: PUSH
9733: LD_INT 23
9735: PUSH
9736: LD_INT 26
9738: PUSH
9739: EMPTY
9740: LIST
9741: LIST
9742: LIST
9743: LIST
9744: LIST
9745: LIST
9746: LIST
9747: LIST
9748: LIST
9749: PUSH
9750: LD_INT 101
9752: PUSH
9753: LD_INT 102
9755: PUSH
9756: LD_INT 105
9758: PUSH
9759: LD_INT 106
9761: PUSH
9762: LD_INT 108
9764: PUSH
9765: EMPTY
9766: LIST
9767: LIST
9768: LIST
9769: LIST
9770: LIST
9771: PUSH
9772: EMPTY
9773: LIST
9774: LIST
9775: ST_TO_ADDR
9776: GO 12555
9778: LD_INT 3
9780: DOUBLE
9781: EQUAL
9782: IFTRUE 9786
9784: GO 9862
9786: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
9787: LD_ADDR_VAR 0 1
9791: PUSH
9792: LD_INT 2
9794: PUSH
9795: LD_INT 4
9797: PUSH
9798: LD_INT 5
9800: PUSH
9801: LD_INT 11
9803: PUSH
9804: LD_INT 12
9806: PUSH
9807: LD_INT 15
9809: PUSH
9810: LD_INT 16
9812: PUSH
9813: LD_INT 22
9815: PUSH
9816: LD_INT 26
9818: PUSH
9819: LD_INT 36
9821: PUSH
9822: EMPTY
9823: LIST
9824: LIST
9825: LIST
9826: LIST
9827: LIST
9828: LIST
9829: LIST
9830: LIST
9831: LIST
9832: LIST
9833: PUSH
9834: LD_INT 101
9836: PUSH
9837: LD_INT 102
9839: PUSH
9840: LD_INT 105
9842: PUSH
9843: LD_INT 106
9845: PUSH
9846: LD_INT 108
9848: PUSH
9849: EMPTY
9850: LIST
9851: LIST
9852: LIST
9853: LIST
9854: LIST
9855: PUSH
9856: EMPTY
9857: LIST
9858: LIST
9859: ST_TO_ADDR
9860: GO 12555
9862: LD_INT 4
9864: DOUBLE
9865: EQUAL
9866: IFTRUE 9870
9868: GO 9954
9870: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
9871: LD_ADDR_VAR 0 1
9875: PUSH
9876: LD_INT 2
9878: PUSH
9879: LD_INT 4
9881: PUSH
9882: LD_INT 5
9884: PUSH
9885: LD_INT 8
9887: PUSH
9888: LD_INT 11
9890: PUSH
9891: LD_INT 12
9893: PUSH
9894: LD_INT 15
9896: PUSH
9897: LD_INT 16
9899: PUSH
9900: LD_INT 22
9902: PUSH
9903: LD_INT 23
9905: PUSH
9906: LD_INT 26
9908: PUSH
9909: LD_INT 36
9911: PUSH
9912: EMPTY
9913: LIST
9914: LIST
9915: LIST
9916: LIST
9917: LIST
9918: LIST
9919: LIST
9920: LIST
9921: LIST
9922: LIST
9923: LIST
9924: LIST
9925: PUSH
9926: LD_INT 101
9928: PUSH
9929: LD_INT 102
9931: PUSH
9932: LD_INT 105
9934: PUSH
9935: LD_INT 106
9937: PUSH
9938: LD_INT 108
9940: PUSH
9941: EMPTY
9942: LIST
9943: LIST
9944: LIST
9945: LIST
9946: LIST
9947: PUSH
9948: EMPTY
9949: LIST
9950: LIST
9951: ST_TO_ADDR
9952: GO 12555
9954: LD_INT 5
9956: DOUBLE
9957: EQUAL
9958: IFTRUE 9962
9960: GO 10062
9962: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
9963: LD_ADDR_VAR 0 1
9967: PUSH
9968: LD_INT 2
9970: PUSH
9971: LD_INT 4
9973: PUSH
9974: LD_INT 5
9976: PUSH
9977: LD_INT 6
9979: PUSH
9980: LD_INT 8
9982: PUSH
9983: LD_INT 11
9985: PUSH
9986: LD_INT 12
9988: PUSH
9989: LD_INT 15
9991: PUSH
9992: LD_INT 16
9994: PUSH
9995: LD_INT 22
9997: PUSH
9998: LD_INT 23
10000: PUSH
10001: LD_INT 25
10003: PUSH
10004: LD_INT 26
10006: PUSH
10007: LD_INT 36
10009: PUSH
10010: EMPTY
10011: LIST
10012: LIST
10013: LIST
10014: LIST
10015: LIST
10016: LIST
10017: LIST
10018: LIST
10019: LIST
10020: LIST
10021: LIST
10022: LIST
10023: LIST
10024: LIST
10025: PUSH
10026: LD_INT 101
10028: PUSH
10029: LD_INT 102
10031: PUSH
10032: LD_INT 105
10034: PUSH
10035: LD_INT 106
10037: PUSH
10038: LD_INT 108
10040: PUSH
10041: LD_INT 109
10043: PUSH
10044: LD_INT 112
10046: PUSH
10047: EMPTY
10048: LIST
10049: LIST
10050: LIST
10051: LIST
10052: LIST
10053: LIST
10054: LIST
10055: PUSH
10056: EMPTY
10057: LIST
10058: LIST
10059: ST_TO_ADDR
10060: GO 12555
10062: LD_INT 6
10064: DOUBLE
10065: EQUAL
10066: IFTRUE 10070
10068: GO 10190
10070: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
10071: LD_ADDR_VAR 0 1
10075: PUSH
10076: LD_INT 2
10078: PUSH
10079: LD_INT 4
10081: PUSH
10082: LD_INT 5
10084: PUSH
10085: LD_INT 6
10087: PUSH
10088: LD_INT 8
10090: PUSH
10091: LD_INT 11
10093: PUSH
10094: LD_INT 12
10096: PUSH
10097: LD_INT 15
10099: PUSH
10100: LD_INT 16
10102: PUSH
10103: LD_INT 20
10105: PUSH
10106: LD_INT 21
10108: PUSH
10109: LD_INT 22
10111: PUSH
10112: LD_INT 23
10114: PUSH
10115: LD_INT 25
10117: PUSH
10118: LD_INT 26
10120: PUSH
10121: LD_INT 30
10123: PUSH
10124: LD_INT 31
10126: PUSH
10127: LD_INT 32
10129: PUSH
10130: LD_INT 36
10132: PUSH
10133: EMPTY
10134: LIST
10135: LIST
10136: LIST
10137: LIST
10138: LIST
10139: LIST
10140: LIST
10141: LIST
10142: LIST
10143: LIST
10144: LIST
10145: LIST
10146: LIST
10147: LIST
10148: LIST
10149: LIST
10150: LIST
10151: LIST
10152: LIST
10153: PUSH
10154: LD_INT 101
10156: PUSH
10157: LD_INT 102
10159: PUSH
10160: LD_INT 105
10162: PUSH
10163: LD_INT 106
10165: PUSH
10166: LD_INT 108
10168: PUSH
10169: LD_INT 109
10171: PUSH
10172: LD_INT 112
10174: PUSH
10175: EMPTY
10176: LIST
10177: LIST
10178: LIST
10179: LIST
10180: LIST
10181: LIST
10182: LIST
10183: PUSH
10184: EMPTY
10185: LIST
10186: LIST
10187: ST_TO_ADDR
10188: GO 12555
10190: LD_INT 7
10192: DOUBLE
10193: EQUAL
10194: IFTRUE 10198
10196: GO 10298
10198: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
10199: LD_ADDR_VAR 0 1
10203: PUSH
10204: LD_INT 2
10206: PUSH
10207: LD_INT 4
10209: PUSH
10210: LD_INT 5
10212: PUSH
10213: LD_INT 7
10215: PUSH
10216: LD_INT 11
10218: PUSH
10219: LD_INT 12
10221: PUSH
10222: LD_INT 15
10224: PUSH
10225: LD_INT 16
10227: PUSH
10228: LD_INT 20
10230: PUSH
10231: LD_INT 21
10233: PUSH
10234: LD_INT 22
10236: PUSH
10237: LD_INT 23
10239: PUSH
10240: LD_INT 25
10242: PUSH
10243: LD_INT 26
10245: PUSH
10246: EMPTY
10247: LIST
10248: LIST
10249: LIST
10250: LIST
10251: LIST
10252: LIST
10253: LIST
10254: LIST
10255: LIST
10256: LIST
10257: LIST
10258: LIST
10259: LIST
10260: LIST
10261: PUSH
10262: LD_INT 101
10264: PUSH
10265: LD_INT 102
10267: PUSH
10268: LD_INT 103
10270: PUSH
10271: LD_INT 105
10273: PUSH
10274: LD_INT 106
10276: PUSH
10277: LD_INT 108
10279: PUSH
10280: LD_INT 112
10282: PUSH
10283: EMPTY
10284: LIST
10285: LIST
10286: LIST
10287: LIST
10288: LIST
10289: LIST
10290: LIST
10291: PUSH
10292: EMPTY
10293: LIST
10294: LIST
10295: ST_TO_ADDR
10296: GO 12555
10298: LD_INT 8
10300: DOUBLE
10301: EQUAL
10302: IFTRUE 10306
10304: GO 10434
10306: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
10307: LD_ADDR_VAR 0 1
10311: PUSH
10312: LD_INT 2
10314: PUSH
10315: LD_INT 4
10317: PUSH
10318: LD_INT 5
10320: PUSH
10321: LD_INT 6
10323: PUSH
10324: LD_INT 7
10326: PUSH
10327: LD_INT 8
10329: PUSH
10330: LD_INT 11
10332: PUSH
10333: LD_INT 12
10335: PUSH
10336: LD_INT 15
10338: PUSH
10339: LD_INT 16
10341: PUSH
10342: LD_INT 20
10344: PUSH
10345: LD_INT 21
10347: PUSH
10348: LD_INT 22
10350: PUSH
10351: LD_INT 23
10353: PUSH
10354: LD_INT 25
10356: PUSH
10357: LD_INT 26
10359: PUSH
10360: LD_INT 30
10362: PUSH
10363: LD_INT 31
10365: PUSH
10366: LD_INT 32
10368: PUSH
10369: LD_INT 36
10371: PUSH
10372: EMPTY
10373: LIST
10374: LIST
10375: LIST
10376: LIST
10377: LIST
10378: LIST
10379: LIST
10380: LIST
10381: LIST
10382: LIST
10383: LIST
10384: LIST
10385: LIST
10386: LIST
10387: LIST
10388: LIST
10389: LIST
10390: LIST
10391: LIST
10392: LIST
10393: PUSH
10394: LD_INT 101
10396: PUSH
10397: LD_INT 102
10399: PUSH
10400: LD_INT 103
10402: PUSH
10403: LD_INT 105
10405: PUSH
10406: LD_INT 106
10408: PUSH
10409: LD_INT 108
10411: PUSH
10412: LD_INT 109
10414: PUSH
10415: LD_INT 112
10417: PUSH
10418: EMPTY
10419: LIST
10420: LIST
10421: LIST
10422: LIST
10423: LIST
10424: LIST
10425: LIST
10426: LIST
10427: PUSH
10428: EMPTY
10429: LIST
10430: LIST
10431: ST_TO_ADDR
10432: GO 12555
10434: LD_INT 9
10436: DOUBLE
10437: EQUAL
10438: IFTRUE 10442
10440: GO 10578
10442: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
10443: LD_ADDR_VAR 0 1
10447: PUSH
10448: LD_INT 2
10450: PUSH
10451: LD_INT 4
10453: PUSH
10454: LD_INT 5
10456: PUSH
10457: LD_INT 6
10459: PUSH
10460: LD_INT 7
10462: PUSH
10463: LD_INT 8
10465: PUSH
10466: LD_INT 11
10468: PUSH
10469: LD_INT 12
10471: PUSH
10472: LD_INT 15
10474: PUSH
10475: LD_INT 16
10477: PUSH
10478: LD_INT 20
10480: PUSH
10481: LD_INT 21
10483: PUSH
10484: LD_INT 22
10486: PUSH
10487: LD_INT 23
10489: PUSH
10490: LD_INT 25
10492: PUSH
10493: LD_INT 26
10495: PUSH
10496: LD_INT 28
10498: PUSH
10499: LD_INT 30
10501: PUSH
10502: LD_INT 31
10504: PUSH
10505: LD_INT 32
10507: PUSH
10508: LD_INT 36
10510: PUSH
10511: EMPTY
10512: LIST
10513: LIST
10514: LIST
10515: LIST
10516: LIST
10517: LIST
10518: LIST
10519: LIST
10520: LIST
10521: LIST
10522: LIST
10523: LIST
10524: LIST
10525: LIST
10526: LIST
10527: LIST
10528: LIST
10529: LIST
10530: LIST
10531: LIST
10532: LIST
10533: PUSH
10534: LD_INT 101
10536: PUSH
10537: LD_INT 102
10539: PUSH
10540: LD_INT 103
10542: PUSH
10543: LD_INT 105
10545: PUSH
10546: LD_INT 106
10548: PUSH
10549: LD_INT 108
10551: PUSH
10552: LD_INT 109
10554: PUSH
10555: LD_INT 112
10557: PUSH
10558: LD_INT 114
10560: PUSH
10561: EMPTY
10562: LIST
10563: LIST
10564: LIST
10565: LIST
10566: LIST
10567: LIST
10568: LIST
10569: LIST
10570: LIST
10571: PUSH
10572: EMPTY
10573: LIST
10574: LIST
10575: ST_TO_ADDR
10576: GO 12555
10578: LD_INT 10
10580: DOUBLE
10581: EQUAL
10582: IFTRUE 10586
10584: GO 10770
10586: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
10587: LD_ADDR_VAR 0 1
10591: PUSH
10592: LD_INT 2
10594: PUSH
10595: LD_INT 4
10597: PUSH
10598: LD_INT 5
10600: PUSH
10601: LD_INT 6
10603: PUSH
10604: LD_INT 7
10606: PUSH
10607: LD_INT 8
10609: PUSH
10610: LD_INT 9
10612: PUSH
10613: LD_INT 10
10615: PUSH
10616: LD_INT 11
10618: PUSH
10619: LD_INT 12
10621: PUSH
10622: LD_INT 13
10624: PUSH
10625: LD_INT 14
10627: PUSH
10628: LD_INT 15
10630: PUSH
10631: LD_INT 16
10633: PUSH
10634: LD_INT 17
10636: PUSH
10637: LD_INT 18
10639: PUSH
10640: LD_INT 19
10642: PUSH
10643: LD_INT 20
10645: PUSH
10646: LD_INT 21
10648: PUSH
10649: LD_INT 22
10651: PUSH
10652: LD_INT 23
10654: PUSH
10655: LD_INT 24
10657: PUSH
10658: LD_INT 25
10660: PUSH
10661: LD_INT 26
10663: PUSH
10664: LD_INT 28
10666: PUSH
10667: LD_INT 30
10669: PUSH
10670: LD_INT 31
10672: PUSH
10673: LD_INT 32
10675: PUSH
10676: LD_INT 36
10678: PUSH
10679: EMPTY
10680: LIST
10681: LIST
10682: LIST
10683: LIST
10684: LIST
10685: LIST
10686: LIST
10687: LIST
10688: LIST
10689: LIST
10690: LIST
10691: LIST
10692: LIST
10693: LIST
10694: LIST
10695: LIST
10696: LIST
10697: LIST
10698: LIST
10699: LIST
10700: LIST
10701: LIST
10702: LIST
10703: LIST
10704: LIST
10705: LIST
10706: LIST
10707: LIST
10708: LIST
10709: PUSH
10710: LD_INT 101
10712: PUSH
10713: LD_INT 102
10715: PUSH
10716: LD_INT 103
10718: PUSH
10719: LD_INT 104
10721: PUSH
10722: LD_INT 105
10724: PUSH
10725: LD_INT 106
10727: PUSH
10728: LD_INT 107
10730: PUSH
10731: LD_INT 108
10733: PUSH
10734: LD_INT 109
10736: PUSH
10737: LD_INT 110
10739: PUSH
10740: LD_INT 111
10742: PUSH
10743: LD_INT 112
10745: PUSH
10746: LD_INT 114
10748: PUSH
10749: EMPTY
10750: LIST
10751: LIST
10752: LIST
10753: LIST
10754: LIST
10755: LIST
10756: LIST
10757: LIST
10758: LIST
10759: LIST
10760: LIST
10761: LIST
10762: LIST
10763: PUSH
10764: EMPTY
10765: LIST
10766: LIST
10767: ST_TO_ADDR
10768: GO 12555
10770: LD_INT 11
10772: DOUBLE
10773: EQUAL
10774: IFTRUE 10778
10776: GO 10970
10778: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
10779: LD_ADDR_VAR 0 1
10783: PUSH
10784: LD_INT 2
10786: PUSH
10787: LD_INT 3
10789: PUSH
10790: LD_INT 4
10792: PUSH
10793: LD_INT 5
10795: PUSH
10796: LD_INT 6
10798: PUSH
10799: LD_INT 7
10801: PUSH
10802: LD_INT 8
10804: PUSH
10805: LD_INT 9
10807: PUSH
10808: LD_INT 10
10810: PUSH
10811: LD_INT 11
10813: PUSH
10814: LD_INT 12
10816: PUSH
10817: LD_INT 13
10819: PUSH
10820: LD_INT 14
10822: PUSH
10823: LD_INT 15
10825: PUSH
10826: LD_INT 16
10828: PUSH
10829: LD_INT 17
10831: PUSH
10832: LD_INT 18
10834: PUSH
10835: LD_INT 19
10837: PUSH
10838: LD_INT 20
10840: PUSH
10841: LD_INT 21
10843: PUSH
10844: LD_INT 22
10846: PUSH
10847: LD_INT 23
10849: PUSH
10850: LD_INT 24
10852: PUSH
10853: LD_INT 25
10855: PUSH
10856: LD_INT 26
10858: PUSH
10859: LD_INT 28
10861: PUSH
10862: LD_INT 30
10864: PUSH
10865: LD_INT 31
10867: PUSH
10868: LD_INT 32
10870: PUSH
10871: LD_INT 34
10873: PUSH
10874: LD_INT 36
10876: PUSH
10877: EMPTY
10878: LIST
10879: LIST
10880: LIST
10881: LIST
10882: LIST
10883: LIST
10884: LIST
10885: LIST
10886: LIST
10887: LIST
10888: LIST
10889: LIST
10890: LIST
10891: LIST
10892: LIST
10893: LIST
10894: LIST
10895: LIST
10896: LIST
10897: LIST
10898: LIST
10899: LIST
10900: LIST
10901: LIST
10902: LIST
10903: LIST
10904: LIST
10905: LIST
10906: LIST
10907: LIST
10908: LIST
10909: PUSH
10910: LD_INT 101
10912: PUSH
10913: LD_INT 102
10915: PUSH
10916: LD_INT 103
10918: PUSH
10919: LD_INT 104
10921: PUSH
10922: LD_INT 105
10924: PUSH
10925: LD_INT 106
10927: PUSH
10928: LD_INT 107
10930: PUSH
10931: LD_INT 108
10933: PUSH
10934: LD_INT 109
10936: PUSH
10937: LD_INT 110
10939: PUSH
10940: LD_INT 111
10942: PUSH
10943: LD_INT 112
10945: PUSH
10946: LD_INT 114
10948: PUSH
10949: EMPTY
10950: LIST
10951: LIST
10952: LIST
10953: LIST
10954: LIST
10955: LIST
10956: LIST
10957: LIST
10958: LIST
10959: LIST
10960: LIST
10961: LIST
10962: LIST
10963: PUSH
10964: EMPTY
10965: LIST
10966: LIST
10967: ST_TO_ADDR
10968: GO 12555
10970: LD_INT 12
10972: DOUBLE
10973: EQUAL
10974: IFTRUE 10978
10976: GO 11186
10978: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
10979: LD_ADDR_VAR 0 1
10983: PUSH
10984: LD_INT 1
10986: PUSH
10987: LD_INT 2
10989: PUSH
10990: LD_INT 3
10992: PUSH
10993: LD_INT 4
10995: PUSH
10996: LD_INT 5
10998: PUSH
10999: LD_INT 6
11001: PUSH
11002: LD_INT 7
11004: PUSH
11005: LD_INT 8
11007: PUSH
11008: LD_INT 9
11010: PUSH
11011: LD_INT 10
11013: PUSH
11014: LD_INT 11
11016: PUSH
11017: LD_INT 12
11019: PUSH
11020: LD_INT 13
11022: PUSH
11023: LD_INT 14
11025: PUSH
11026: LD_INT 15
11028: PUSH
11029: LD_INT 16
11031: PUSH
11032: LD_INT 17
11034: PUSH
11035: LD_INT 18
11037: PUSH
11038: LD_INT 19
11040: PUSH
11041: LD_INT 20
11043: PUSH
11044: LD_INT 21
11046: PUSH
11047: LD_INT 22
11049: PUSH
11050: LD_INT 23
11052: PUSH
11053: LD_INT 24
11055: PUSH
11056: LD_INT 25
11058: PUSH
11059: LD_INT 26
11061: PUSH
11062: LD_INT 27
11064: PUSH
11065: LD_INT 28
11067: PUSH
11068: LD_INT 30
11070: PUSH
11071: LD_INT 31
11073: PUSH
11074: LD_INT 32
11076: PUSH
11077: LD_INT 33
11079: PUSH
11080: LD_INT 34
11082: PUSH
11083: LD_INT 36
11085: PUSH
11086: EMPTY
11087: LIST
11088: LIST
11089: LIST
11090: LIST
11091: LIST
11092: LIST
11093: LIST
11094: LIST
11095: LIST
11096: LIST
11097: LIST
11098: LIST
11099: LIST
11100: LIST
11101: LIST
11102: LIST
11103: LIST
11104: LIST
11105: LIST
11106: LIST
11107: LIST
11108: LIST
11109: LIST
11110: LIST
11111: LIST
11112: LIST
11113: LIST
11114: LIST
11115: LIST
11116: LIST
11117: LIST
11118: LIST
11119: LIST
11120: LIST
11121: PUSH
11122: LD_INT 101
11124: PUSH
11125: LD_INT 102
11127: PUSH
11128: LD_INT 103
11130: PUSH
11131: LD_INT 104
11133: PUSH
11134: LD_INT 105
11136: PUSH
11137: LD_INT 106
11139: PUSH
11140: LD_INT 107
11142: PUSH
11143: LD_INT 108
11145: PUSH
11146: LD_INT 109
11148: PUSH
11149: LD_INT 110
11151: PUSH
11152: LD_INT 111
11154: PUSH
11155: LD_INT 112
11157: PUSH
11158: LD_INT 113
11160: PUSH
11161: LD_INT 114
11163: PUSH
11164: EMPTY
11165: LIST
11166: LIST
11167: LIST
11168: LIST
11169: LIST
11170: LIST
11171: LIST
11172: LIST
11173: LIST
11174: LIST
11175: LIST
11176: LIST
11177: LIST
11178: LIST
11179: PUSH
11180: EMPTY
11181: LIST
11182: LIST
11183: ST_TO_ADDR
11184: GO 12555
11186: LD_INT 13
11188: DOUBLE
11189: EQUAL
11190: IFTRUE 11194
11192: GO 11390
11194: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
11195: LD_ADDR_VAR 0 1
11199: PUSH
11200: LD_INT 1
11202: PUSH
11203: LD_INT 2
11205: PUSH
11206: LD_INT 3
11208: PUSH
11209: LD_INT 4
11211: PUSH
11212: LD_INT 5
11214: PUSH
11215: LD_INT 8
11217: PUSH
11218: LD_INT 9
11220: PUSH
11221: LD_INT 10
11223: PUSH
11224: LD_INT 11
11226: PUSH
11227: LD_INT 12
11229: PUSH
11230: LD_INT 14
11232: PUSH
11233: LD_INT 15
11235: PUSH
11236: LD_INT 16
11238: PUSH
11239: LD_INT 17
11241: PUSH
11242: LD_INT 18
11244: PUSH
11245: LD_INT 19
11247: PUSH
11248: LD_INT 20
11250: PUSH
11251: LD_INT 21
11253: PUSH
11254: LD_INT 22
11256: PUSH
11257: LD_INT 23
11259: PUSH
11260: LD_INT 24
11262: PUSH
11263: LD_INT 25
11265: PUSH
11266: LD_INT 26
11268: PUSH
11269: LD_INT 27
11271: PUSH
11272: LD_INT 28
11274: PUSH
11275: LD_INT 30
11277: PUSH
11278: LD_INT 31
11280: PUSH
11281: LD_INT 32
11283: PUSH
11284: LD_INT 33
11286: PUSH
11287: LD_INT 34
11289: PUSH
11290: LD_INT 36
11292: PUSH
11293: EMPTY
11294: LIST
11295: LIST
11296: LIST
11297: LIST
11298: LIST
11299: LIST
11300: LIST
11301: LIST
11302: LIST
11303: LIST
11304: LIST
11305: LIST
11306: LIST
11307: LIST
11308: LIST
11309: LIST
11310: LIST
11311: LIST
11312: LIST
11313: LIST
11314: LIST
11315: LIST
11316: LIST
11317: LIST
11318: LIST
11319: LIST
11320: LIST
11321: LIST
11322: LIST
11323: LIST
11324: LIST
11325: PUSH
11326: LD_INT 101
11328: PUSH
11329: LD_INT 102
11331: PUSH
11332: LD_INT 103
11334: PUSH
11335: LD_INT 104
11337: PUSH
11338: LD_INT 105
11340: PUSH
11341: LD_INT 106
11343: PUSH
11344: LD_INT 107
11346: PUSH
11347: LD_INT 108
11349: PUSH
11350: LD_INT 109
11352: PUSH
11353: LD_INT 110
11355: PUSH
11356: LD_INT 111
11358: PUSH
11359: LD_INT 112
11361: PUSH
11362: LD_INT 113
11364: PUSH
11365: LD_INT 114
11367: PUSH
11368: EMPTY
11369: LIST
11370: LIST
11371: LIST
11372: LIST
11373: LIST
11374: LIST
11375: LIST
11376: LIST
11377: LIST
11378: LIST
11379: LIST
11380: LIST
11381: LIST
11382: LIST
11383: PUSH
11384: EMPTY
11385: LIST
11386: LIST
11387: ST_TO_ADDR
11388: GO 12555
11390: LD_INT 14
11392: DOUBLE
11393: EQUAL
11394: IFTRUE 11398
11396: GO 11610
11398: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
11399: LD_ADDR_VAR 0 1
11403: PUSH
11404: LD_INT 1
11406: PUSH
11407: LD_INT 2
11409: PUSH
11410: LD_INT 3
11412: PUSH
11413: LD_INT 4
11415: PUSH
11416: LD_INT 5
11418: PUSH
11419: LD_INT 6
11421: PUSH
11422: LD_INT 7
11424: PUSH
11425: LD_INT 8
11427: PUSH
11428: LD_INT 9
11430: PUSH
11431: LD_INT 10
11433: PUSH
11434: LD_INT 11
11436: PUSH
11437: LD_INT 12
11439: PUSH
11440: LD_INT 13
11442: PUSH
11443: LD_INT 14
11445: PUSH
11446: LD_INT 15
11448: PUSH
11449: LD_INT 16
11451: PUSH
11452: LD_INT 17
11454: PUSH
11455: LD_INT 18
11457: PUSH
11458: LD_INT 19
11460: PUSH
11461: LD_INT 20
11463: PUSH
11464: LD_INT 21
11466: PUSH
11467: LD_INT 22
11469: PUSH
11470: LD_INT 23
11472: PUSH
11473: LD_INT 24
11475: PUSH
11476: LD_INT 25
11478: PUSH
11479: LD_INT 26
11481: PUSH
11482: LD_INT 27
11484: PUSH
11485: LD_INT 28
11487: PUSH
11488: LD_INT 29
11490: PUSH
11491: LD_INT 30
11493: PUSH
11494: LD_INT 31
11496: PUSH
11497: LD_INT 32
11499: PUSH
11500: LD_INT 33
11502: PUSH
11503: LD_INT 34
11505: PUSH
11506: LD_INT 36
11508: PUSH
11509: EMPTY
11510: LIST
11511: LIST
11512: LIST
11513: LIST
11514: LIST
11515: LIST
11516: LIST
11517: LIST
11518: LIST
11519: LIST
11520: LIST
11521: LIST
11522: LIST
11523: LIST
11524: LIST
11525: LIST
11526: LIST
11527: LIST
11528: LIST
11529: LIST
11530: LIST
11531: LIST
11532: LIST
11533: LIST
11534: LIST
11535: LIST
11536: LIST
11537: LIST
11538: LIST
11539: LIST
11540: LIST
11541: LIST
11542: LIST
11543: LIST
11544: LIST
11545: PUSH
11546: LD_INT 101
11548: PUSH
11549: LD_INT 102
11551: PUSH
11552: LD_INT 103
11554: PUSH
11555: LD_INT 104
11557: PUSH
11558: LD_INT 105
11560: PUSH
11561: LD_INT 106
11563: PUSH
11564: LD_INT 107
11566: PUSH
11567: LD_INT 108
11569: PUSH
11570: LD_INT 109
11572: PUSH
11573: LD_INT 110
11575: PUSH
11576: LD_INT 111
11578: PUSH
11579: LD_INT 112
11581: PUSH
11582: LD_INT 113
11584: PUSH
11585: LD_INT 114
11587: PUSH
11588: EMPTY
11589: LIST
11590: LIST
11591: LIST
11592: LIST
11593: LIST
11594: LIST
11595: LIST
11596: LIST
11597: LIST
11598: LIST
11599: LIST
11600: LIST
11601: LIST
11602: LIST
11603: PUSH
11604: EMPTY
11605: LIST
11606: LIST
11607: ST_TO_ADDR
11608: GO 12555
11610: LD_INT 15
11612: DOUBLE
11613: EQUAL
11614: IFTRUE 11618
11616: GO 11830
11618: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
11619: LD_ADDR_VAR 0 1
11623: PUSH
11624: LD_INT 1
11626: PUSH
11627: LD_INT 2
11629: PUSH
11630: LD_INT 3
11632: PUSH
11633: LD_INT 4
11635: PUSH
11636: LD_INT 5
11638: PUSH
11639: LD_INT 6
11641: PUSH
11642: LD_INT 7
11644: PUSH
11645: LD_INT 8
11647: PUSH
11648: LD_INT 9
11650: PUSH
11651: LD_INT 10
11653: PUSH
11654: LD_INT 11
11656: PUSH
11657: LD_INT 12
11659: PUSH
11660: LD_INT 13
11662: PUSH
11663: LD_INT 14
11665: PUSH
11666: LD_INT 15
11668: PUSH
11669: LD_INT 16
11671: PUSH
11672: LD_INT 17
11674: PUSH
11675: LD_INT 18
11677: PUSH
11678: LD_INT 19
11680: PUSH
11681: LD_INT 20
11683: PUSH
11684: LD_INT 21
11686: PUSH
11687: LD_INT 22
11689: PUSH
11690: LD_INT 23
11692: PUSH
11693: LD_INT 24
11695: PUSH
11696: LD_INT 25
11698: PUSH
11699: LD_INT 26
11701: PUSH
11702: LD_INT 27
11704: PUSH
11705: LD_INT 28
11707: PUSH
11708: LD_INT 29
11710: PUSH
11711: LD_INT 30
11713: PUSH
11714: LD_INT 31
11716: PUSH
11717: LD_INT 32
11719: PUSH
11720: LD_INT 33
11722: PUSH
11723: LD_INT 34
11725: PUSH
11726: LD_INT 36
11728: PUSH
11729: EMPTY
11730: LIST
11731: LIST
11732: LIST
11733: LIST
11734: LIST
11735: LIST
11736: LIST
11737: LIST
11738: LIST
11739: LIST
11740: LIST
11741: LIST
11742: LIST
11743: LIST
11744: LIST
11745: LIST
11746: LIST
11747: LIST
11748: LIST
11749: LIST
11750: LIST
11751: LIST
11752: LIST
11753: LIST
11754: LIST
11755: LIST
11756: LIST
11757: LIST
11758: LIST
11759: LIST
11760: LIST
11761: LIST
11762: LIST
11763: LIST
11764: LIST
11765: PUSH
11766: LD_INT 101
11768: PUSH
11769: LD_INT 102
11771: PUSH
11772: LD_INT 103
11774: PUSH
11775: LD_INT 104
11777: PUSH
11778: LD_INT 105
11780: PUSH
11781: LD_INT 106
11783: PUSH
11784: LD_INT 107
11786: PUSH
11787: LD_INT 108
11789: PUSH
11790: LD_INT 109
11792: PUSH
11793: LD_INT 110
11795: PUSH
11796: LD_INT 111
11798: PUSH
11799: LD_INT 112
11801: PUSH
11802: LD_INT 113
11804: PUSH
11805: LD_INT 114
11807: PUSH
11808: EMPTY
11809: LIST
11810: LIST
11811: LIST
11812: LIST
11813: LIST
11814: LIST
11815: LIST
11816: LIST
11817: LIST
11818: LIST
11819: LIST
11820: LIST
11821: LIST
11822: LIST
11823: PUSH
11824: EMPTY
11825: LIST
11826: LIST
11827: ST_TO_ADDR
11828: GO 12555
11830: LD_INT 16
11832: DOUBLE
11833: EQUAL
11834: IFTRUE 11838
11836: GO 11962
11838: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
11839: LD_ADDR_VAR 0 1
11843: PUSH
11844: LD_INT 2
11846: PUSH
11847: LD_INT 4
11849: PUSH
11850: LD_INT 5
11852: PUSH
11853: LD_INT 7
11855: PUSH
11856: LD_INT 11
11858: PUSH
11859: LD_INT 12
11861: PUSH
11862: LD_INT 15
11864: PUSH
11865: LD_INT 16
11867: PUSH
11868: LD_INT 20
11870: PUSH
11871: LD_INT 21
11873: PUSH
11874: LD_INT 22
11876: PUSH
11877: LD_INT 23
11879: PUSH
11880: LD_INT 25
11882: PUSH
11883: LD_INT 26
11885: PUSH
11886: LD_INT 30
11888: PUSH
11889: LD_INT 31
11891: PUSH
11892: LD_INT 32
11894: PUSH
11895: LD_INT 33
11897: PUSH
11898: LD_INT 34
11900: PUSH
11901: EMPTY
11902: LIST
11903: LIST
11904: LIST
11905: LIST
11906: LIST
11907: LIST
11908: LIST
11909: LIST
11910: LIST
11911: LIST
11912: LIST
11913: LIST
11914: LIST
11915: LIST
11916: LIST
11917: LIST
11918: LIST
11919: LIST
11920: LIST
11921: PUSH
11922: LD_INT 101
11924: PUSH
11925: LD_INT 102
11927: PUSH
11928: LD_INT 103
11930: PUSH
11931: LD_INT 106
11933: PUSH
11934: LD_INT 108
11936: PUSH
11937: LD_INT 112
11939: PUSH
11940: LD_INT 113
11942: PUSH
11943: LD_INT 114
11945: PUSH
11946: EMPTY
11947: LIST
11948: LIST
11949: LIST
11950: LIST
11951: LIST
11952: LIST
11953: LIST
11954: LIST
11955: PUSH
11956: EMPTY
11957: LIST
11958: LIST
11959: ST_TO_ADDR
11960: GO 12555
11962: LD_INT 17
11964: DOUBLE
11965: EQUAL
11966: IFTRUE 11970
11968: GO 12182
11970: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
11971: LD_ADDR_VAR 0 1
11975: PUSH
11976: LD_INT 1
11978: PUSH
11979: LD_INT 2
11981: PUSH
11982: LD_INT 3
11984: PUSH
11985: LD_INT 4
11987: PUSH
11988: LD_INT 5
11990: PUSH
11991: LD_INT 6
11993: PUSH
11994: LD_INT 7
11996: PUSH
11997: LD_INT 8
11999: PUSH
12000: LD_INT 9
12002: PUSH
12003: LD_INT 10
12005: PUSH
12006: LD_INT 11
12008: PUSH
12009: LD_INT 12
12011: PUSH
12012: LD_INT 13
12014: PUSH
12015: LD_INT 14
12017: PUSH
12018: LD_INT 15
12020: PUSH
12021: LD_INT 16
12023: PUSH
12024: LD_INT 17
12026: PUSH
12027: LD_INT 18
12029: PUSH
12030: LD_INT 19
12032: PUSH
12033: LD_INT 20
12035: PUSH
12036: LD_INT 21
12038: PUSH
12039: LD_INT 22
12041: PUSH
12042: LD_INT 23
12044: PUSH
12045: LD_INT 24
12047: PUSH
12048: LD_INT 25
12050: PUSH
12051: LD_INT 26
12053: PUSH
12054: LD_INT 27
12056: PUSH
12057: LD_INT 28
12059: PUSH
12060: LD_INT 29
12062: PUSH
12063: LD_INT 30
12065: PUSH
12066: LD_INT 31
12068: PUSH
12069: LD_INT 32
12071: PUSH
12072: LD_INT 33
12074: PUSH
12075: LD_INT 34
12077: PUSH
12078: LD_INT 36
12080: PUSH
12081: EMPTY
12082: LIST
12083: LIST
12084: LIST
12085: LIST
12086: LIST
12087: LIST
12088: LIST
12089: LIST
12090: LIST
12091: LIST
12092: LIST
12093: LIST
12094: LIST
12095: LIST
12096: LIST
12097: LIST
12098: LIST
12099: LIST
12100: LIST
12101: LIST
12102: LIST
12103: LIST
12104: LIST
12105: LIST
12106: LIST
12107: LIST
12108: LIST
12109: LIST
12110: LIST
12111: LIST
12112: LIST
12113: LIST
12114: LIST
12115: LIST
12116: LIST
12117: PUSH
12118: LD_INT 101
12120: PUSH
12121: LD_INT 102
12123: PUSH
12124: LD_INT 103
12126: PUSH
12127: LD_INT 104
12129: PUSH
12130: LD_INT 105
12132: PUSH
12133: LD_INT 106
12135: PUSH
12136: LD_INT 107
12138: PUSH
12139: LD_INT 108
12141: PUSH
12142: LD_INT 109
12144: PUSH
12145: LD_INT 110
12147: PUSH
12148: LD_INT 111
12150: PUSH
12151: LD_INT 112
12153: PUSH
12154: LD_INT 113
12156: PUSH
12157: LD_INT 114
12159: PUSH
12160: EMPTY
12161: LIST
12162: LIST
12163: LIST
12164: LIST
12165: LIST
12166: LIST
12167: LIST
12168: LIST
12169: LIST
12170: LIST
12171: LIST
12172: LIST
12173: LIST
12174: LIST
12175: PUSH
12176: EMPTY
12177: LIST
12178: LIST
12179: ST_TO_ADDR
12180: GO 12555
12182: LD_INT 18
12184: DOUBLE
12185: EQUAL
12186: IFTRUE 12190
12188: GO 12326
12190: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
12191: LD_ADDR_VAR 0 1
12195: PUSH
12196: LD_INT 2
12198: PUSH
12199: LD_INT 4
12201: PUSH
12202: LD_INT 5
12204: PUSH
12205: LD_INT 7
12207: PUSH
12208: LD_INT 11
12210: PUSH
12211: LD_INT 12
12213: PUSH
12214: LD_INT 15
12216: PUSH
12217: LD_INT 16
12219: PUSH
12220: LD_INT 20
12222: PUSH
12223: LD_INT 21
12225: PUSH
12226: LD_INT 22
12228: PUSH
12229: LD_INT 23
12231: PUSH
12232: LD_INT 25
12234: PUSH
12235: LD_INT 26
12237: PUSH
12238: LD_INT 30
12240: PUSH
12241: LD_INT 31
12243: PUSH
12244: LD_INT 32
12246: PUSH
12247: LD_INT 33
12249: PUSH
12250: LD_INT 34
12252: PUSH
12253: LD_INT 35
12255: PUSH
12256: LD_INT 36
12258: PUSH
12259: EMPTY
12260: LIST
12261: LIST
12262: LIST
12263: LIST
12264: LIST
12265: LIST
12266: LIST
12267: LIST
12268: LIST
12269: LIST
12270: LIST
12271: LIST
12272: LIST
12273: LIST
12274: LIST
12275: LIST
12276: LIST
12277: LIST
12278: LIST
12279: LIST
12280: LIST
12281: PUSH
12282: LD_INT 101
12284: PUSH
12285: LD_INT 102
12287: PUSH
12288: LD_INT 103
12290: PUSH
12291: LD_INT 106
12293: PUSH
12294: LD_INT 108
12296: PUSH
12297: LD_INT 112
12299: PUSH
12300: LD_INT 113
12302: PUSH
12303: LD_INT 114
12305: PUSH
12306: LD_INT 115
12308: PUSH
12309: EMPTY
12310: LIST
12311: LIST
12312: LIST
12313: LIST
12314: LIST
12315: LIST
12316: LIST
12317: LIST
12318: LIST
12319: PUSH
12320: EMPTY
12321: LIST
12322: LIST
12323: ST_TO_ADDR
12324: GO 12555
12326: LD_INT 19
12328: DOUBLE
12329: EQUAL
12330: IFTRUE 12334
12332: GO 12554
12334: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
12335: LD_ADDR_VAR 0 1
12339: PUSH
12340: LD_INT 1
12342: PUSH
12343: LD_INT 2
12345: PUSH
12346: LD_INT 3
12348: PUSH
12349: LD_INT 4
12351: PUSH
12352: LD_INT 5
12354: PUSH
12355: LD_INT 6
12357: PUSH
12358: LD_INT 7
12360: PUSH
12361: LD_INT 8
12363: PUSH
12364: LD_INT 9
12366: PUSH
12367: LD_INT 10
12369: PUSH
12370: LD_INT 11
12372: PUSH
12373: LD_INT 12
12375: PUSH
12376: LD_INT 13
12378: PUSH
12379: LD_INT 14
12381: PUSH
12382: LD_INT 15
12384: PUSH
12385: LD_INT 16
12387: PUSH
12388: LD_INT 17
12390: PUSH
12391: LD_INT 18
12393: PUSH
12394: LD_INT 19
12396: PUSH
12397: LD_INT 20
12399: PUSH
12400: LD_INT 21
12402: PUSH
12403: LD_INT 22
12405: PUSH
12406: LD_INT 23
12408: PUSH
12409: LD_INT 24
12411: PUSH
12412: LD_INT 25
12414: PUSH
12415: LD_INT 26
12417: PUSH
12418: LD_INT 27
12420: PUSH
12421: LD_INT 28
12423: PUSH
12424: LD_INT 29
12426: PUSH
12427: LD_INT 30
12429: PUSH
12430: LD_INT 31
12432: PUSH
12433: LD_INT 32
12435: PUSH
12436: LD_INT 33
12438: PUSH
12439: LD_INT 34
12441: PUSH
12442: LD_INT 35
12444: PUSH
12445: LD_INT 36
12447: PUSH
12448: EMPTY
12449: LIST
12450: LIST
12451: LIST
12452: LIST
12453: LIST
12454: LIST
12455: LIST
12456: LIST
12457: LIST
12458: LIST
12459: LIST
12460: LIST
12461: LIST
12462: LIST
12463: LIST
12464: LIST
12465: LIST
12466: LIST
12467: LIST
12468: LIST
12469: LIST
12470: LIST
12471: LIST
12472: LIST
12473: LIST
12474: LIST
12475: LIST
12476: LIST
12477: LIST
12478: LIST
12479: LIST
12480: LIST
12481: LIST
12482: LIST
12483: LIST
12484: LIST
12485: PUSH
12486: LD_INT 101
12488: PUSH
12489: LD_INT 102
12491: PUSH
12492: LD_INT 103
12494: PUSH
12495: LD_INT 104
12497: PUSH
12498: LD_INT 105
12500: PUSH
12501: LD_INT 106
12503: PUSH
12504: LD_INT 107
12506: PUSH
12507: LD_INT 108
12509: PUSH
12510: LD_INT 109
12512: PUSH
12513: LD_INT 110
12515: PUSH
12516: LD_INT 111
12518: PUSH
12519: LD_INT 112
12521: PUSH
12522: LD_INT 113
12524: PUSH
12525: LD_INT 114
12527: PUSH
12528: LD_INT 115
12530: PUSH
12531: EMPTY
12532: LIST
12533: LIST
12534: LIST
12535: LIST
12536: LIST
12537: LIST
12538: LIST
12539: LIST
12540: LIST
12541: LIST
12542: LIST
12543: LIST
12544: LIST
12545: LIST
12546: LIST
12547: PUSH
12548: EMPTY
12549: LIST
12550: LIST
12551: ST_TO_ADDR
12552: GO 12555
12554: POP
// end else
12555: GO 12774
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
12557: LD_ADDR_VAR 0 1
12561: PUSH
12562: LD_INT 1
12564: PUSH
12565: LD_INT 2
12567: PUSH
12568: LD_INT 3
12570: PUSH
12571: LD_INT 4
12573: PUSH
12574: LD_INT 5
12576: PUSH
12577: LD_INT 6
12579: PUSH
12580: LD_INT 7
12582: PUSH
12583: LD_INT 8
12585: PUSH
12586: LD_INT 9
12588: PUSH
12589: LD_INT 10
12591: PUSH
12592: LD_INT 11
12594: PUSH
12595: LD_INT 12
12597: PUSH
12598: LD_INT 13
12600: PUSH
12601: LD_INT 14
12603: PUSH
12604: LD_INT 15
12606: PUSH
12607: LD_INT 16
12609: PUSH
12610: LD_INT 17
12612: PUSH
12613: LD_INT 18
12615: PUSH
12616: LD_INT 19
12618: PUSH
12619: LD_INT 20
12621: PUSH
12622: LD_INT 21
12624: PUSH
12625: LD_INT 22
12627: PUSH
12628: LD_INT 23
12630: PUSH
12631: LD_INT 24
12633: PUSH
12634: LD_INT 25
12636: PUSH
12637: LD_INT 26
12639: PUSH
12640: LD_INT 27
12642: PUSH
12643: LD_INT 28
12645: PUSH
12646: LD_INT 29
12648: PUSH
12649: LD_INT 30
12651: PUSH
12652: LD_INT 31
12654: PUSH
12655: LD_INT 32
12657: PUSH
12658: LD_INT 33
12660: PUSH
12661: LD_INT 34
12663: PUSH
12664: LD_INT 35
12666: PUSH
12667: LD_INT 36
12669: PUSH
12670: EMPTY
12671: LIST
12672: LIST
12673: LIST
12674: LIST
12675: LIST
12676: LIST
12677: LIST
12678: LIST
12679: LIST
12680: LIST
12681: LIST
12682: LIST
12683: LIST
12684: LIST
12685: LIST
12686: LIST
12687: LIST
12688: LIST
12689: LIST
12690: LIST
12691: LIST
12692: LIST
12693: LIST
12694: LIST
12695: LIST
12696: LIST
12697: LIST
12698: LIST
12699: LIST
12700: LIST
12701: LIST
12702: LIST
12703: LIST
12704: LIST
12705: LIST
12706: LIST
12707: PUSH
12708: LD_INT 101
12710: PUSH
12711: LD_INT 102
12713: PUSH
12714: LD_INT 103
12716: PUSH
12717: LD_INT 104
12719: PUSH
12720: LD_INT 105
12722: PUSH
12723: LD_INT 106
12725: PUSH
12726: LD_INT 107
12728: PUSH
12729: LD_INT 108
12731: PUSH
12732: LD_INT 109
12734: PUSH
12735: LD_INT 110
12737: PUSH
12738: LD_INT 111
12740: PUSH
12741: LD_INT 112
12743: PUSH
12744: LD_INT 113
12746: PUSH
12747: LD_INT 114
12749: PUSH
12750: LD_INT 115
12752: PUSH
12753: EMPTY
12754: LIST
12755: LIST
12756: LIST
12757: LIST
12758: LIST
12759: LIST
12760: LIST
12761: LIST
12762: LIST
12763: LIST
12764: LIST
12765: LIST
12766: LIST
12767: LIST
12768: LIST
12769: PUSH
12770: EMPTY
12771: LIST
12772: LIST
12773: ST_TO_ADDR
// if result then
12774: LD_VAR 0 1
12778: IFFALSE 13067
// begin normal :=  ;
12780: LD_ADDR_VAR 0 3
12784: PUSH
12785: LD_STRING 
12787: ST_TO_ADDR
// hardcore :=  ;
12788: LD_ADDR_VAR 0 4
12792: PUSH
12793: LD_STRING 
12795: ST_TO_ADDR
// for i = 1 to normalCounter do
12796: LD_ADDR_VAR 0 5
12800: PUSH
12801: DOUBLE
12802: LD_INT 1
12804: DEC
12805: ST_TO_ADDR
12806: LD_EXP 45
12810: PUSH
12811: FOR_TO
12812: IFFALSE 12913
// begin tmp := 0 ;
12814: LD_ADDR_VAR 0 2
12818: PUSH
12819: LD_STRING 0
12821: ST_TO_ADDR
// if result [ 1 ] then
12822: LD_VAR 0 1
12826: PUSH
12827: LD_INT 1
12829: ARRAY
12830: IFFALSE 12895
// if result [ 1 ] [ 1 ] = i then
12832: LD_VAR 0 1
12836: PUSH
12837: LD_INT 1
12839: ARRAY
12840: PUSH
12841: LD_INT 1
12843: ARRAY
12844: PUSH
12845: LD_VAR 0 5
12849: EQUAL
12850: IFFALSE 12895
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
12852: LD_ADDR_VAR 0 1
12856: PUSH
12857: LD_VAR 0 1
12861: PPUSH
12862: LD_INT 1
12864: PPUSH
12865: LD_VAR 0 1
12869: PUSH
12870: LD_INT 1
12872: ARRAY
12873: PPUSH
12874: LD_INT 1
12876: PPUSH
12877: CALL_OW 3
12881: PPUSH
12882: CALL_OW 1
12886: ST_TO_ADDR
// tmp := 1 ;
12887: LD_ADDR_VAR 0 2
12891: PUSH
12892: LD_STRING 1
12894: ST_TO_ADDR
// end ; normal := normal & tmp ;
12895: LD_ADDR_VAR 0 3
12899: PUSH
12900: LD_VAR 0 3
12904: PUSH
12905: LD_VAR 0 2
12909: STR
12910: ST_TO_ADDR
// end ;
12911: GO 12811
12913: POP
12914: POP
// for i = 1 to hardcoreCounter do
12915: LD_ADDR_VAR 0 5
12919: PUSH
12920: DOUBLE
12921: LD_INT 1
12923: DEC
12924: ST_TO_ADDR
12925: LD_EXP 46
12929: PUSH
12930: FOR_TO
12931: IFFALSE 13036
// begin tmp := 0 ;
12933: LD_ADDR_VAR 0 2
12937: PUSH
12938: LD_STRING 0
12940: ST_TO_ADDR
// if result [ 2 ] then
12941: LD_VAR 0 1
12945: PUSH
12946: LD_INT 2
12948: ARRAY
12949: IFFALSE 13018
// if result [ 2 ] [ 1 ] = 100 + i then
12951: LD_VAR 0 1
12955: PUSH
12956: LD_INT 2
12958: ARRAY
12959: PUSH
12960: LD_INT 1
12962: ARRAY
12963: PUSH
12964: LD_INT 100
12966: PUSH
12967: LD_VAR 0 5
12971: PLUS
12972: EQUAL
12973: IFFALSE 13018
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
12975: LD_ADDR_VAR 0 1
12979: PUSH
12980: LD_VAR 0 1
12984: PPUSH
12985: LD_INT 2
12987: PPUSH
12988: LD_VAR 0 1
12992: PUSH
12993: LD_INT 2
12995: ARRAY
12996: PPUSH
12997: LD_INT 1
12999: PPUSH
13000: CALL_OW 3
13004: PPUSH
13005: CALL_OW 1
13009: ST_TO_ADDR
// tmp := 1 ;
13010: LD_ADDR_VAR 0 2
13014: PUSH
13015: LD_STRING 1
13017: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
13018: LD_ADDR_VAR 0 4
13022: PUSH
13023: LD_VAR 0 4
13027: PUSH
13028: LD_VAR 0 2
13032: STR
13033: ST_TO_ADDR
// end ;
13034: GO 12930
13036: POP
13037: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
13038: LD_STRING getStreamItemsFromMission("
13040: PUSH
13041: LD_VAR 0 3
13045: STR
13046: PUSH
13047: LD_STRING ","
13049: STR
13050: PUSH
13051: LD_VAR 0 4
13055: STR
13056: PUSH
13057: LD_STRING ")
13059: STR
13060: PPUSH
13061: CALL_OW 559
// end else
13065: GO 13074
// ToLua ( getStreamItemsFromMission("","") ) ;
13067: LD_STRING getStreamItemsFromMission("","")
13069: PPUSH
13070: CALL_OW 559
// end ;
13074: LD_VAR 0 1
13078: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
13079: LD_EXP 44
13083: PUSH
13084: LD_EXP 49
13088: AND
13089: IFFALSE 13213
13091: GO 13093
13093: DISABLE
13094: LD_INT 0
13096: PPUSH
13097: PPUSH
// begin enable ;
13098: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
13099: LD_ADDR_VAR 0 2
13103: PUSH
13104: LD_INT 22
13106: PUSH
13107: LD_OWVAR 2
13111: PUSH
13112: EMPTY
13113: LIST
13114: LIST
13115: PUSH
13116: LD_INT 2
13118: PUSH
13119: LD_INT 34
13121: PUSH
13122: LD_INT 7
13124: PUSH
13125: EMPTY
13126: LIST
13127: LIST
13128: PUSH
13129: LD_INT 34
13131: PUSH
13132: LD_INT 45
13134: PUSH
13135: EMPTY
13136: LIST
13137: LIST
13138: PUSH
13139: LD_INT 34
13141: PUSH
13142: LD_INT 28
13144: PUSH
13145: EMPTY
13146: LIST
13147: LIST
13148: PUSH
13149: LD_INT 34
13151: PUSH
13152: LD_INT 47
13154: PUSH
13155: EMPTY
13156: LIST
13157: LIST
13158: PUSH
13159: EMPTY
13160: LIST
13161: LIST
13162: LIST
13163: LIST
13164: LIST
13165: PUSH
13166: EMPTY
13167: LIST
13168: LIST
13169: PPUSH
13170: CALL_OW 69
13174: ST_TO_ADDR
// if not tmp then
13175: LD_VAR 0 2
13179: NOT
13180: IFFALSE 13184
// exit ;
13182: GO 13213
// for i in tmp do
13184: LD_ADDR_VAR 0 1
13188: PUSH
13189: LD_VAR 0 2
13193: PUSH
13194: FOR_IN
13195: IFFALSE 13211
// begin SetLives ( i , 0 ) ;
13197: LD_VAR 0 1
13201: PPUSH
13202: LD_INT 0
13204: PPUSH
13205: CALL_OW 234
// end ;
13209: GO 13194
13211: POP
13212: POP
// end ;
13213: PPOPN 2
13215: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
13216: LD_EXP 44
13220: PUSH
13221: LD_EXP 50
13225: AND
13226: IFFALSE 13310
13228: GO 13230
13230: DISABLE
13231: LD_INT 0
13233: PPUSH
13234: PPUSH
// begin enable ;
13235: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
13236: LD_ADDR_VAR 0 2
13240: PUSH
13241: LD_INT 22
13243: PUSH
13244: LD_OWVAR 2
13248: PUSH
13249: EMPTY
13250: LIST
13251: LIST
13252: PUSH
13253: LD_INT 32
13255: PUSH
13256: LD_INT 3
13258: PUSH
13259: EMPTY
13260: LIST
13261: LIST
13262: PUSH
13263: EMPTY
13264: LIST
13265: LIST
13266: PPUSH
13267: CALL_OW 69
13271: ST_TO_ADDR
// if not tmp then
13272: LD_VAR 0 2
13276: NOT
13277: IFFALSE 13281
// exit ;
13279: GO 13310
// for i in tmp do
13281: LD_ADDR_VAR 0 1
13285: PUSH
13286: LD_VAR 0 2
13290: PUSH
13291: FOR_IN
13292: IFFALSE 13308
// begin SetLives ( i , 0 ) ;
13294: LD_VAR 0 1
13298: PPUSH
13299: LD_INT 0
13301: PPUSH
13302: CALL_OW 234
// end ;
13306: GO 13291
13308: POP
13309: POP
// end ;
13310: PPOPN 2
13312: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
13313: LD_EXP 44
13317: PUSH
13318: LD_EXP 47
13322: AND
13323: IFFALSE 13416
13325: GO 13327
13327: DISABLE
13328: LD_INT 0
13330: PPUSH
// begin enable ;
13331: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
13332: LD_ADDR_VAR 0 1
13336: PUSH
13337: LD_INT 22
13339: PUSH
13340: LD_OWVAR 2
13344: PUSH
13345: EMPTY
13346: LIST
13347: LIST
13348: PUSH
13349: LD_INT 2
13351: PUSH
13352: LD_INT 25
13354: PUSH
13355: LD_INT 5
13357: PUSH
13358: EMPTY
13359: LIST
13360: LIST
13361: PUSH
13362: LD_INT 25
13364: PUSH
13365: LD_INT 9
13367: PUSH
13368: EMPTY
13369: LIST
13370: LIST
13371: PUSH
13372: LD_INT 25
13374: PUSH
13375: LD_INT 8
13377: PUSH
13378: EMPTY
13379: LIST
13380: LIST
13381: PUSH
13382: EMPTY
13383: LIST
13384: LIST
13385: LIST
13386: LIST
13387: PUSH
13388: EMPTY
13389: LIST
13390: LIST
13391: PPUSH
13392: CALL_OW 69
13396: PUSH
13397: FOR_IN
13398: IFFALSE 13414
// begin SetClass ( i , 1 ) ;
13400: LD_VAR 0 1
13404: PPUSH
13405: LD_INT 1
13407: PPUSH
13408: CALL_OW 336
// end ;
13412: GO 13397
13414: POP
13415: POP
// end ;
13416: PPOPN 1
13418: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
13419: LD_EXP 44
13423: PUSH
13424: LD_EXP 48
13428: AND
13429: PUSH
13430: LD_OWVAR 65
13434: PUSH
13435: LD_INT 7
13437: LESS
13438: AND
13439: IFFALSE 13453
13441: GO 13443
13443: DISABLE
// begin enable ;
13444: ENABLE
// game_speed := 7 ;
13445: LD_ADDR_OWVAR 65
13449: PUSH
13450: LD_INT 7
13452: ST_TO_ADDR
// end ;
13453: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
13454: LD_EXP 44
13458: PUSH
13459: LD_EXP 51
13463: AND
13464: IFFALSE 13666
13466: GO 13468
13468: DISABLE
13469: LD_INT 0
13471: PPUSH
13472: PPUSH
13473: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
13474: LD_ADDR_VAR 0 3
13478: PUSH
13479: LD_INT 81
13481: PUSH
13482: LD_OWVAR 2
13486: PUSH
13487: EMPTY
13488: LIST
13489: LIST
13490: PUSH
13491: LD_INT 21
13493: PUSH
13494: LD_INT 1
13496: PUSH
13497: EMPTY
13498: LIST
13499: LIST
13500: PUSH
13501: EMPTY
13502: LIST
13503: LIST
13504: PPUSH
13505: CALL_OW 69
13509: ST_TO_ADDR
// if not tmp then
13510: LD_VAR 0 3
13514: NOT
13515: IFFALSE 13519
// exit ;
13517: GO 13666
// if tmp > 5 then
13519: LD_VAR 0 3
13523: PUSH
13524: LD_INT 5
13526: GREATER
13527: IFFALSE 13539
// k := 5 else
13529: LD_ADDR_VAR 0 2
13533: PUSH
13534: LD_INT 5
13536: ST_TO_ADDR
13537: GO 13549
// k := tmp ;
13539: LD_ADDR_VAR 0 2
13543: PUSH
13544: LD_VAR 0 3
13548: ST_TO_ADDR
// for i := 1 to k do
13549: LD_ADDR_VAR 0 1
13553: PUSH
13554: DOUBLE
13555: LD_INT 1
13557: DEC
13558: ST_TO_ADDR
13559: LD_VAR 0 2
13563: PUSH
13564: FOR_TO
13565: IFFALSE 13664
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
13567: LD_VAR 0 3
13571: PUSH
13572: LD_VAR 0 1
13576: ARRAY
13577: PPUSH
13578: LD_VAR 0 1
13582: PUSH
13583: LD_INT 4
13585: MOD
13586: PUSH
13587: LD_INT 1
13589: PLUS
13590: PPUSH
13591: CALL_OW 259
13595: PUSH
13596: LD_INT 10
13598: LESS
13599: IFFALSE 13662
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
13601: LD_VAR 0 3
13605: PUSH
13606: LD_VAR 0 1
13610: ARRAY
13611: PPUSH
13612: LD_VAR 0 1
13616: PUSH
13617: LD_INT 4
13619: MOD
13620: PUSH
13621: LD_INT 1
13623: PLUS
13624: PPUSH
13625: LD_VAR 0 3
13629: PUSH
13630: LD_VAR 0 1
13634: ARRAY
13635: PPUSH
13636: LD_VAR 0 1
13640: PUSH
13641: LD_INT 4
13643: MOD
13644: PUSH
13645: LD_INT 1
13647: PLUS
13648: PPUSH
13649: CALL_OW 259
13653: PUSH
13654: LD_INT 1
13656: PLUS
13657: PPUSH
13658: CALL_OW 237
13662: GO 13564
13664: POP
13665: POP
// end ;
13666: PPOPN 3
13668: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
13669: LD_EXP 44
13673: PUSH
13674: LD_EXP 52
13678: AND
13679: IFFALSE 13699
13681: GO 13683
13683: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
13684: LD_INT 4
13686: PPUSH
13687: LD_OWVAR 2
13691: PPUSH
13692: LD_INT 0
13694: PPUSH
13695: CALL_OW 324
13699: END
// every 0 0$1 trigger StreamModeActive and sShovel do
13700: LD_EXP 44
13704: PUSH
13705: LD_EXP 81
13709: AND
13710: IFFALSE 13730
13712: GO 13714
13714: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
13715: LD_INT 19
13717: PPUSH
13718: LD_OWVAR 2
13722: PPUSH
13723: LD_INT 0
13725: PPUSH
13726: CALL_OW 324
13730: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
13731: LD_EXP 44
13735: PUSH
13736: LD_EXP 53
13740: AND
13741: IFFALSE 13843
13743: GO 13745
13745: DISABLE
13746: LD_INT 0
13748: PPUSH
13749: PPUSH
// begin enable ;
13750: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
13751: LD_ADDR_VAR 0 2
13755: PUSH
13756: LD_INT 22
13758: PUSH
13759: LD_OWVAR 2
13763: PUSH
13764: EMPTY
13765: LIST
13766: LIST
13767: PUSH
13768: LD_INT 2
13770: PUSH
13771: LD_INT 34
13773: PUSH
13774: LD_INT 11
13776: PUSH
13777: EMPTY
13778: LIST
13779: LIST
13780: PUSH
13781: LD_INT 34
13783: PUSH
13784: LD_INT 30
13786: PUSH
13787: EMPTY
13788: LIST
13789: LIST
13790: PUSH
13791: EMPTY
13792: LIST
13793: LIST
13794: LIST
13795: PUSH
13796: EMPTY
13797: LIST
13798: LIST
13799: PPUSH
13800: CALL_OW 69
13804: ST_TO_ADDR
// if not tmp then
13805: LD_VAR 0 2
13809: NOT
13810: IFFALSE 13814
// exit ;
13812: GO 13843
// for i in tmp do
13814: LD_ADDR_VAR 0 1
13818: PUSH
13819: LD_VAR 0 2
13823: PUSH
13824: FOR_IN
13825: IFFALSE 13841
// begin SetLives ( i , 0 ) ;
13827: LD_VAR 0 1
13831: PPUSH
13832: LD_INT 0
13834: PPUSH
13835: CALL_OW 234
// end ;
13839: GO 13824
13841: POP
13842: POP
// end ;
13843: PPOPN 2
13845: END
// every 0 0$1 trigger StreamModeActive and sBunker do
13846: LD_EXP 44
13850: PUSH
13851: LD_EXP 54
13855: AND
13856: IFFALSE 13876
13858: GO 13860
13860: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
13861: LD_INT 32
13863: PPUSH
13864: LD_OWVAR 2
13868: PPUSH
13869: LD_INT 0
13871: PPUSH
13872: CALL_OW 324
13876: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
13877: LD_EXP 44
13881: PUSH
13882: LD_EXP 55
13886: AND
13887: IFFALSE 14068
13889: GO 13891
13891: DISABLE
13892: LD_INT 0
13894: PPUSH
13895: PPUSH
13896: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
13897: LD_ADDR_VAR 0 2
13901: PUSH
13902: LD_INT 22
13904: PUSH
13905: LD_OWVAR 2
13909: PUSH
13910: EMPTY
13911: LIST
13912: LIST
13913: PUSH
13914: LD_INT 33
13916: PUSH
13917: LD_INT 3
13919: PUSH
13920: EMPTY
13921: LIST
13922: LIST
13923: PUSH
13924: EMPTY
13925: LIST
13926: LIST
13927: PPUSH
13928: CALL_OW 69
13932: ST_TO_ADDR
// if not tmp then
13933: LD_VAR 0 2
13937: NOT
13938: IFFALSE 13942
// exit ;
13940: GO 14068
// side := 0 ;
13942: LD_ADDR_VAR 0 3
13946: PUSH
13947: LD_INT 0
13949: ST_TO_ADDR
// for i := 1 to 8 do
13950: LD_ADDR_VAR 0 1
13954: PUSH
13955: DOUBLE
13956: LD_INT 1
13958: DEC
13959: ST_TO_ADDR
13960: LD_INT 8
13962: PUSH
13963: FOR_TO
13964: IFFALSE 14012
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
13966: LD_OWVAR 2
13970: PUSH
13971: LD_VAR 0 1
13975: NONEQUAL
13976: PUSH
13977: LD_OWVAR 2
13981: PPUSH
13982: LD_VAR 0 1
13986: PPUSH
13987: CALL_OW 81
13991: PUSH
13992: LD_INT 2
13994: EQUAL
13995: AND
13996: IFFALSE 14010
// begin side := i ;
13998: LD_ADDR_VAR 0 3
14002: PUSH
14003: LD_VAR 0 1
14007: ST_TO_ADDR
// break ;
14008: GO 14012
// end ;
14010: GO 13963
14012: POP
14013: POP
// if not side then
14014: LD_VAR 0 3
14018: NOT
14019: IFFALSE 14023
// exit ;
14021: GO 14068
// for i := 1 to tmp do
14023: LD_ADDR_VAR 0 1
14027: PUSH
14028: DOUBLE
14029: LD_INT 1
14031: DEC
14032: ST_TO_ADDR
14033: LD_VAR 0 2
14037: PUSH
14038: FOR_TO
14039: IFFALSE 14066
// if Prob ( 60 ) then
14041: LD_INT 60
14043: PPUSH
14044: CALL_OW 13
14048: IFFALSE 14064
// SetSide ( i , side ) ;
14050: LD_VAR 0 1
14054: PPUSH
14055: LD_VAR 0 3
14059: PPUSH
14060: CALL_OW 235
14064: GO 14038
14066: POP
14067: POP
// end ;
14068: PPOPN 3
14070: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
14071: LD_EXP 44
14075: PUSH
14076: LD_EXP 57
14080: AND
14081: IFFALSE 14200
14083: GO 14085
14085: DISABLE
14086: LD_INT 0
14088: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
14089: LD_ADDR_VAR 0 1
14093: PUSH
14094: LD_INT 22
14096: PUSH
14097: LD_OWVAR 2
14101: PUSH
14102: EMPTY
14103: LIST
14104: LIST
14105: PUSH
14106: LD_INT 21
14108: PUSH
14109: LD_INT 1
14111: PUSH
14112: EMPTY
14113: LIST
14114: LIST
14115: PUSH
14116: LD_INT 3
14118: PUSH
14119: LD_INT 23
14121: PUSH
14122: LD_INT 0
14124: PUSH
14125: EMPTY
14126: LIST
14127: LIST
14128: PUSH
14129: EMPTY
14130: LIST
14131: LIST
14132: PUSH
14133: EMPTY
14134: LIST
14135: LIST
14136: LIST
14137: PPUSH
14138: CALL_OW 69
14142: PUSH
14143: FOR_IN
14144: IFFALSE 14198
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
14146: LD_VAR 0 1
14150: PPUSH
14151: CALL_OW 257
14155: PUSH
14156: LD_INT 1
14158: PUSH
14159: LD_INT 2
14161: PUSH
14162: LD_INT 3
14164: PUSH
14165: LD_INT 4
14167: PUSH
14168: EMPTY
14169: LIST
14170: LIST
14171: LIST
14172: LIST
14173: IN
14174: IFFALSE 14196
// SetClass ( un , rand ( 1 , 4 ) ) ;
14176: LD_VAR 0 1
14180: PPUSH
14181: LD_INT 1
14183: PPUSH
14184: LD_INT 4
14186: PPUSH
14187: CALL_OW 12
14191: PPUSH
14192: CALL_OW 336
14196: GO 14143
14198: POP
14199: POP
// end ;
14200: PPOPN 1
14202: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
14203: LD_EXP 44
14207: PUSH
14208: LD_EXP 56
14212: AND
14213: IFFALSE 14292
14215: GO 14217
14217: DISABLE
14218: LD_INT 0
14220: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
14221: LD_ADDR_VAR 0 1
14225: PUSH
14226: LD_INT 22
14228: PUSH
14229: LD_OWVAR 2
14233: PUSH
14234: EMPTY
14235: LIST
14236: LIST
14237: PUSH
14238: LD_INT 21
14240: PUSH
14241: LD_INT 3
14243: PUSH
14244: EMPTY
14245: LIST
14246: LIST
14247: PUSH
14248: EMPTY
14249: LIST
14250: LIST
14251: PPUSH
14252: CALL_OW 69
14256: ST_TO_ADDR
// if not tmp then
14257: LD_VAR 0 1
14261: NOT
14262: IFFALSE 14266
// exit ;
14264: GO 14292
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
14266: LD_VAR 0 1
14270: PUSH
14271: LD_INT 1
14273: PPUSH
14274: LD_VAR 0 1
14278: PPUSH
14279: CALL_OW 12
14283: ARRAY
14284: PPUSH
14285: LD_INT 100
14287: PPUSH
14288: CALL_OW 234
// end ;
14292: PPOPN 1
14294: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
14295: LD_EXP 44
14299: PUSH
14300: LD_EXP 58
14304: AND
14305: IFFALSE 14403
14307: GO 14309
14309: DISABLE
14310: LD_INT 0
14312: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
14313: LD_ADDR_VAR 0 1
14317: PUSH
14318: LD_INT 22
14320: PUSH
14321: LD_OWVAR 2
14325: PUSH
14326: EMPTY
14327: LIST
14328: LIST
14329: PUSH
14330: LD_INT 21
14332: PUSH
14333: LD_INT 1
14335: PUSH
14336: EMPTY
14337: LIST
14338: LIST
14339: PUSH
14340: EMPTY
14341: LIST
14342: LIST
14343: PPUSH
14344: CALL_OW 69
14348: ST_TO_ADDR
// if not tmp then
14349: LD_VAR 0 1
14353: NOT
14354: IFFALSE 14358
// exit ;
14356: GO 14403
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
14358: LD_VAR 0 1
14362: PUSH
14363: LD_INT 1
14365: PPUSH
14366: LD_VAR 0 1
14370: PPUSH
14371: CALL_OW 12
14375: ARRAY
14376: PPUSH
14377: LD_INT 1
14379: PPUSH
14380: LD_INT 4
14382: PPUSH
14383: CALL_OW 12
14387: PPUSH
14388: LD_INT 3000
14390: PPUSH
14391: LD_INT 9000
14393: PPUSH
14394: CALL_OW 12
14398: PPUSH
14399: CALL_OW 492
// end ;
14403: PPOPN 1
14405: END
// every 0 0$1 trigger StreamModeActive and sDepot do
14406: LD_EXP 44
14410: PUSH
14411: LD_EXP 59
14415: AND
14416: IFFALSE 14436
14418: GO 14420
14420: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
14421: LD_INT 1
14423: PPUSH
14424: LD_OWVAR 2
14428: PPUSH
14429: LD_INT 0
14431: PPUSH
14432: CALL_OW 324
14436: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
14437: LD_EXP 44
14441: PUSH
14442: LD_EXP 60
14446: AND
14447: IFFALSE 14530
14449: GO 14451
14451: DISABLE
14452: LD_INT 0
14454: PPUSH
14455: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
14456: LD_ADDR_VAR 0 2
14460: PUSH
14461: LD_INT 22
14463: PUSH
14464: LD_OWVAR 2
14468: PUSH
14469: EMPTY
14470: LIST
14471: LIST
14472: PUSH
14473: LD_INT 21
14475: PUSH
14476: LD_INT 3
14478: PUSH
14479: EMPTY
14480: LIST
14481: LIST
14482: PUSH
14483: EMPTY
14484: LIST
14485: LIST
14486: PPUSH
14487: CALL_OW 69
14491: ST_TO_ADDR
// if not tmp then
14492: LD_VAR 0 2
14496: NOT
14497: IFFALSE 14501
// exit ;
14499: GO 14530
// for i in tmp do
14501: LD_ADDR_VAR 0 1
14505: PUSH
14506: LD_VAR 0 2
14510: PUSH
14511: FOR_IN
14512: IFFALSE 14528
// SetBLevel ( i , 10 ) ;
14514: LD_VAR 0 1
14518: PPUSH
14519: LD_INT 10
14521: PPUSH
14522: CALL_OW 241
14526: GO 14511
14528: POP
14529: POP
// end ;
14530: PPOPN 2
14532: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
14533: LD_EXP 44
14537: PUSH
14538: LD_EXP 61
14542: AND
14543: IFFALSE 14654
14545: GO 14547
14547: DISABLE
14548: LD_INT 0
14550: PPUSH
14551: PPUSH
14552: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
14553: LD_ADDR_VAR 0 3
14557: PUSH
14558: LD_INT 22
14560: PUSH
14561: LD_OWVAR 2
14565: PUSH
14566: EMPTY
14567: LIST
14568: LIST
14569: PUSH
14570: LD_INT 25
14572: PUSH
14573: LD_INT 1
14575: PUSH
14576: EMPTY
14577: LIST
14578: LIST
14579: PUSH
14580: EMPTY
14581: LIST
14582: LIST
14583: PPUSH
14584: CALL_OW 69
14588: ST_TO_ADDR
// if not tmp then
14589: LD_VAR 0 3
14593: NOT
14594: IFFALSE 14598
// exit ;
14596: GO 14654
// un := tmp [ rand ( 1 , tmp ) ] ;
14598: LD_ADDR_VAR 0 2
14602: PUSH
14603: LD_VAR 0 3
14607: PUSH
14608: LD_INT 1
14610: PPUSH
14611: LD_VAR 0 3
14615: PPUSH
14616: CALL_OW 12
14620: ARRAY
14621: ST_TO_ADDR
// if Crawls ( un ) then
14622: LD_VAR 0 2
14626: PPUSH
14627: CALL_OW 318
14631: IFFALSE 14642
// ComWalk ( un ) ;
14633: LD_VAR 0 2
14637: PPUSH
14638: CALL_OW 138
// SetClass ( un , class_sniper ) ;
14642: LD_VAR 0 2
14646: PPUSH
14647: LD_INT 5
14649: PPUSH
14650: CALL_OW 336
// end ;
14654: PPOPN 3
14656: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
14657: LD_EXP 44
14661: PUSH
14662: LD_EXP 62
14666: AND
14667: PUSH
14668: LD_OWVAR 67
14672: PUSH
14673: LD_INT 3
14675: LESS
14676: AND
14677: IFFALSE 14696
14679: GO 14681
14681: DISABLE
// Difficulty := Difficulty + 1 ;
14682: LD_ADDR_OWVAR 67
14686: PUSH
14687: LD_OWVAR 67
14691: PUSH
14692: LD_INT 1
14694: PLUS
14695: ST_TO_ADDR
14696: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
14697: LD_EXP 44
14701: PUSH
14702: LD_EXP 63
14706: AND
14707: IFFALSE 14810
14709: GO 14711
14711: DISABLE
14712: LD_INT 0
14714: PPUSH
// begin for i := 1 to 5 do
14715: LD_ADDR_VAR 0 1
14719: PUSH
14720: DOUBLE
14721: LD_INT 1
14723: DEC
14724: ST_TO_ADDR
14725: LD_INT 5
14727: PUSH
14728: FOR_TO
14729: IFFALSE 14808
// begin uc_nation := nation_nature ;
14731: LD_ADDR_OWVAR 21
14735: PUSH
14736: LD_INT 0
14738: ST_TO_ADDR
// uc_side := 0 ;
14739: LD_ADDR_OWVAR 20
14743: PUSH
14744: LD_INT 0
14746: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
14747: LD_ADDR_OWVAR 29
14751: PUSH
14752: LD_INT 12
14754: PUSH
14755: LD_INT 12
14757: PUSH
14758: EMPTY
14759: LIST
14760: LIST
14761: ST_TO_ADDR
// hc_agressivity := 20 ;
14762: LD_ADDR_OWVAR 35
14766: PUSH
14767: LD_INT 20
14769: ST_TO_ADDR
// hc_class := class_tiger ;
14770: LD_ADDR_OWVAR 28
14774: PUSH
14775: LD_INT 14
14777: ST_TO_ADDR
// hc_gallery :=  ;
14778: LD_ADDR_OWVAR 33
14782: PUSH
14783: LD_STRING 
14785: ST_TO_ADDR
// hc_name :=  ;
14786: LD_ADDR_OWVAR 26
14790: PUSH
14791: LD_STRING 
14793: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
14794: CALL_OW 44
14798: PPUSH
14799: LD_INT 0
14801: PPUSH
14802: CALL_OW 51
// end ;
14806: GO 14728
14808: POP
14809: POP
// end ;
14810: PPOPN 1
14812: END
// every 0 0$1 trigger StreamModeActive and sBomb do
14813: LD_EXP 44
14817: PUSH
14818: LD_EXP 64
14822: AND
14823: IFFALSE 14832
14825: GO 14827
14827: DISABLE
// StreamSibBomb ;
14828: CALL 14833 0 0
14832: END
// export function StreamSibBomb ; var i , x , y ; begin
14833: LD_INT 0
14835: PPUSH
14836: PPUSH
14837: PPUSH
14838: PPUSH
// result := false ;
14839: LD_ADDR_VAR 0 1
14843: PUSH
14844: LD_INT 0
14846: ST_TO_ADDR
// for i := 1 to 16 do
14847: LD_ADDR_VAR 0 2
14851: PUSH
14852: DOUBLE
14853: LD_INT 1
14855: DEC
14856: ST_TO_ADDR
14857: LD_INT 16
14859: PUSH
14860: FOR_TO
14861: IFFALSE 15060
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
14863: LD_ADDR_VAR 0 3
14867: PUSH
14868: LD_INT 10
14870: PUSH
14871: LD_INT 20
14873: PUSH
14874: LD_INT 30
14876: PUSH
14877: LD_INT 40
14879: PUSH
14880: LD_INT 50
14882: PUSH
14883: LD_INT 60
14885: PUSH
14886: LD_INT 70
14888: PUSH
14889: LD_INT 80
14891: PUSH
14892: LD_INT 90
14894: PUSH
14895: LD_INT 100
14897: PUSH
14898: LD_INT 110
14900: PUSH
14901: LD_INT 120
14903: PUSH
14904: LD_INT 130
14906: PUSH
14907: LD_INT 140
14909: PUSH
14910: LD_INT 150
14912: PUSH
14913: EMPTY
14914: LIST
14915: LIST
14916: LIST
14917: LIST
14918: LIST
14919: LIST
14920: LIST
14921: LIST
14922: LIST
14923: LIST
14924: LIST
14925: LIST
14926: LIST
14927: LIST
14928: LIST
14929: PUSH
14930: LD_INT 1
14932: PPUSH
14933: LD_INT 15
14935: PPUSH
14936: CALL_OW 12
14940: ARRAY
14941: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
14942: LD_ADDR_VAR 0 4
14946: PUSH
14947: LD_INT 10
14949: PUSH
14950: LD_INT 20
14952: PUSH
14953: LD_INT 30
14955: PUSH
14956: LD_INT 40
14958: PUSH
14959: LD_INT 50
14961: PUSH
14962: LD_INT 60
14964: PUSH
14965: LD_INT 70
14967: PUSH
14968: LD_INT 80
14970: PUSH
14971: LD_INT 90
14973: PUSH
14974: LD_INT 100
14976: PUSH
14977: LD_INT 110
14979: PUSH
14980: LD_INT 120
14982: PUSH
14983: LD_INT 130
14985: PUSH
14986: LD_INT 140
14988: PUSH
14989: LD_INT 150
14991: PUSH
14992: EMPTY
14993: LIST
14994: LIST
14995: LIST
14996: LIST
14997: LIST
14998: LIST
14999: LIST
15000: LIST
15001: LIST
15002: LIST
15003: LIST
15004: LIST
15005: LIST
15006: LIST
15007: LIST
15008: PUSH
15009: LD_INT 1
15011: PPUSH
15012: LD_INT 15
15014: PPUSH
15015: CALL_OW 12
15019: ARRAY
15020: ST_TO_ADDR
// if ValidHex ( x , y ) then
15021: LD_VAR 0 3
15025: PPUSH
15026: LD_VAR 0 4
15030: PPUSH
15031: CALL_OW 488
15035: IFFALSE 15058
// begin result := [ x , y ] ;
15037: LD_ADDR_VAR 0 1
15041: PUSH
15042: LD_VAR 0 3
15046: PUSH
15047: LD_VAR 0 4
15051: PUSH
15052: EMPTY
15053: LIST
15054: LIST
15055: ST_TO_ADDR
// break ;
15056: GO 15060
// end ; end ;
15058: GO 14860
15060: POP
15061: POP
// if result then
15062: LD_VAR 0 1
15066: IFFALSE 15126
// begin ToLua ( playSibBomb() ) ;
15068: LD_STRING playSibBomb()
15070: PPUSH
15071: CALL_OW 559
// wait ( 0 0$14 ) ;
15075: LD_INT 490
15077: PPUSH
15078: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
15082: LD_VAR 0 1
15086: PUSH
15087: LD_INT 1
15089: ARRAY
15090: PPUSH
15091: LD_VAR 0 1
15095: PUSH
15096: LD_INT 2
15098: ARRAY
15099: PPUSH
15100: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
15104: LD_VAR 0 1
15108: PUSH
15109: LD_INT 1
15111: ARRAY
15112: PPUSH
15113: LD_VAR 0 1
15117: PUSH
15118: LD_INT 2
15120: ARRAY
15121: PPUSH
15122: CALL_OW 429
// end ; end ;
15126: LD_VAR 0 1
15130: RET
// every 0 0$1 trigger StreamModeActive and sReset do
15131: LD_EXP 44
15135: PUSH
15136: LD_EXP 66
15140: AND
15141: IFFALSE 15153
15143: GO 15145
15145: DISABLE
// YouLost (  ) ;
15146: LD_STRING 
15148: PPUSH
15149: CALL_OW 104
15153: END
// every 0 0$1 trigger StreamModeActive and sFog do
15154: LD_EXP 44
15158: PUSH
15159: LD_EXP 65
15163: AND
15164: IFFALSE 15178
15166: GO 15168
15168: DISABLE
// FogOff ( your_side ) ;
15169: LD_OWVAR 2
15173: PPUSH
15174: CALL_OW 344
15178: END
// every 0 0$1 trigger StreamModeActive and sSun do
15179: LD_EXP 44
15183: PUSH
15184: LD_EXP 67
15188: AND
15189: IFFALSE 15217
15191: GO 15193
15193: DISABLE
// begin solar_recharge_percent := 0 ;
15194: LD_ADDR_OWVAR 79
15198: PUSH
15199: LD_INT 0
15201: ST_TO_ADDR
// wait ( 5 5$00 ) ;
15202: LD_INT 10500
15204: PPUSH
15205: CALL_OW 67
// solar_recharge_percent := 100 ;
15209: LD_ADDR_OWVAR 79
15213: PUSH
15214: LD_INT 100
15216: ST_TO_ADDR
// end ;
15217: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
15218: LD_EXP 44
15222: PUSH
15223: LD_EXP 68
15227: AND
15228: IFFALSE 15467
15230: GO 15232
15232: DISABLE
15233: LD_INT 0
15235: PPUSH
15236: PPUSH
15237: PPUSH
// begin tmp := [ ] ;
15238: LD_ADDR_VAR 0 3
15242: PUSH
15243: EMPTY
15244: ST_TO_ADDR
// for i := 1 to 6 do
15245: LD_ADDR_VAR 0 1
15249: PUSH
15250: DOUBLE
15251: LD_INT 1
15253: DEC
15254: ST_TO_ADDR
15255: LD_INT 6
15257: PUSH
15258: FOR_TO
15259: IFFALSE 15364
// begin uc_nation := nation_nature ;
15261: LD_ADDR_OWVAR 21
15265: PUSH
15266: LD_INT 0
15268: ST_TO_ADDR
// uc_side := 0 ;
15269: LD_ADDR_OWVAR 20
15273: PUSH
15274: LD_INT 0
15276: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
15277: LD_ADDR_OWVAR 29
15281: PUSH
15282: LD_INT 12
15284: PUSH
15285: LD_INT 12
15287: PUSH
15288: EMPTY
15289: LIST
15290: LIST
15291: ST_TO_ADDR
// hc_agressivity := 20 ;
15292: LD_ADDR_OWVAR 35
15296: PUSH
15297: LD_INT 20
15299: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
15300: LD_ADDR_OWVAR 28
15304: PUSH
15305: LD_INT 17
15307: ST_TO_ADDR
// hc_gallery :=  ;
15308: LD_ADDR_OWVAR 33
15312: PUSH
15313: LD_STRING 
15315: ST_TO_ADDR
// hc_name :=  ;
15316: LD_ADDR_OWVAR 26
15320: PUSH
15321: LD_STRING 
15323: ST_TO_ADDR
// un := CreateHuman ;
15324: LD_ADDR_VAR 0 2
15328: PUSH
15329: CALL_OW 44
15333: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
15334: LD_VAR 0 2
15338: PPUSH
15339: LD_INT 1
15341: PPUSH
15342: CALL_OW 51
// tmp := tmp ^ un ;
15346: LD_ADDR_VAR 0 3
15350: PUSH
15351: LD_VAR 0 3
15355: PUSH
15356: LD_VAR 0 2
15360: ADD
15361: ST_TO_ADDR
// end ;
15362: GO 15258
15364: POP
15365: POP
// repeat wait ( 0 0$1 ) ;
15366: LD_INT 35
15368: PPUSH
15369: CALL_OW 67
// for un in tmp do
15373: LD_ADDR_VAR 0 2
15377: PUSH
15378: LD_VAR 0 3
15382: PUSH
15383: FOR_IN
15384: IFFALSE 15458
// begin if IsDead ( un ) then
15386: LD_VAR 0 2
15390: PPUSH
15391: CALL_OW 301
15395: IFFALSE 15415
// begin tmp := tmp diff un ;
15397: LD_ADDR_VAR 0 3
15401: PUSH
15402: LD_VAR 0 3
15406: PUSH
15407: LD_VAR 0 2
15411: DIFF
15412: ST_TO_ADDR
// continue ;
15413: GO 15383
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
15415: LD_VAR 0 2
15419: PPUSH
15420: LD_INT 3
15422: PUSH
15423: LD_INT 22
15425: PUSH
15426: LD_INT 0
15428: PUSH
15429: EMPTY
15430: LIST
15431: LIST
15432: PUSH
15433: EMPTY
15434: LIST
15435: LIST
15436: PPUSH
15437: CALL_OW 69
15441: PPUSH
15442: LD_VAR 0 2
15446: PPUSH
15447: CALL_OW 74
15451: PPUSH
15452: CALL_OW 115
// end ;
15456: GO 15383
15458: POP
15459: POP
// until not tmp ;
15460: LD_VAR 0 3
15464: NOT
15465: IFFALSE 15366
// end ;
15467: PPOPN 3
15469: END
// every 0 0$1 trigger StreamModeActive and sTroll do
15470: LD_EXP 44
15474: PUSH
15475: LD_EXP 69
15479: AND
15480: IFFALSE 15534
15482: GO 15484
15484: DISABLE
// begin ToLua ( displayTroll(); ) ;
15485: LD_STRING displayTroll();
15487: PPUSH
15488: CALL_OW 559
// wait ( 3 3$00 ) ;
15492: LD_INT 6300
15494: PPUSH
15495: CALL_OW 67
// ToLua ( hideTroll(); ) ;
15499: LD_STRING hideTroll();
15501: PPUSH
15502: CALL_OW 559
// wait ( 1 1$00 ) ;
15506: LD_INT 2100
15508: PPUSH
15509: CALL_OW 67
// ToLua ( displayTroll(); ) ;
15513: LD_STRING displayTroll();
15515: PPUSH
15516: CALL_OW 559
// wait ( 1 1$00 ) ;
15520: LD_INT 2100
15522: PPUSH
15523: CALL_OW 67
// ToLua ( hideTroll(); ) ;
15527: LD_STRING hideTroll();
15529: PPUSH
15530: CALL_OW 559
// end ;
15534: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
15535: LD_EXP 44
15539: PUSH
15540: LD_EXP 70
15544: AND
15545: IFFALSE 15608
15547: GO 15549
15549: DISABLE
15550: LD_INT 0
15552: PPUSH
// begin p := 0 ;
15553: LD_ADDR_VAR 0 1
15557: PUSH
15558: LD_INT 0
15560: ST_TO_ADDR
// repeat game_speed := 1 ;
15561: LD_ADDR_OWVAR 65
15565: PUSH
15566: LD_INT 1
15568: ST_TO_ADDR
// wait ( 0 0$1 ) ;
15569: LD_INT 35
15571: PPUSH
15572: CALL_OW 67
// p := p + 1 ;
15576: LD_ADDR_VAR 0 1
15580: PUSH
15581: LD_VAR 0 1
15585: PUSH
15586: LD_INT 1
15588: PLUS
15589: ST_TO_ADDR
// until p >= 60 ;
15590: LD_VAR 0 1
15594: PUSH
15595: LD_INT 60
15597: GREATEREQUAL
15598: IFFALSE 15561
// game_speed := 4 ;
15600: LD_ADDR_OWVAR 65
15604: PUSH
15605: LD_INT 4
15607: ST_TO_ADDR
// end ;
15608: PPOPN 1
15610: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
15611: LD_EXP 44
15615: PUSH
15616: LD_EXP 71
15620: AND
15621: IFFALSE 15767
15623: GO 15625
15625: DISABLE
15626: LD_INT 0
15628: PPUSH
15629: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15630: LD_ADDR_VAR 0 1
15634: PUSH
15635: LD_INT 22
15637: PUSH
15638: LD_OWVAR 2
15642: PUSH
15643: EMPTY
15644: LIST
15645: LIST
15646: PUSH
15647: LD_INT 2
15649: PUSH
15650: LD_INT 30
15652: PUSH
15653: LD_INT 0
15655: PUSH
15656: EMPTY
15657: LIST
15658: LIST
15659: PUSH
15660: LD_INT 30
15662: PUSH
15663: LD_INT 1
15665: PUSH
15666: EMPTY
15667: LIST
15668: LIST
15669: PUSH
15670: EMPTY
15671: LIST
15672: LIST
15673: LIST
15674: PUSH
15675: EMPTY
15676: LIST
15677: LIST
15678: PPUSH
15679: CALL_OW 69
15683: ST_TO_ADDR
// if not depot then
15684: LD_VAR 0 1
15688: NOT
15689: IFFALSE 15693
// exit ;
15691: GO 15767
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
15693: LD_ADDR_VAR 0 2
15697: PUSH
15698: LD_VAR 0 1
15702: PUSH
15703: LD_INT 1
15705: PPUSH
15706: LD_VAR 0 1
15710: PPUSH
15711: CALL_OW 12
15715: ARRAY
15716: PPUSH
15717: CALL_OW 274
15721: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
15722: LD_VAR 0 2
15726: PPUSH
15727: LD_INT 1
15729: PPUSH
15730: LD_INT 0
15732: PPUSH
15733: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
15737: LD_VAR 0 2
15741: PPUSH
15742: LD_INT 2
15744: PPUSH
15745: LD_INT 0
15747: PPUSH
15748: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
15752: LD_VAR 0 2
15756: PPUSH
15757: LD_INT 3
15759: PPUSH
15760: LD_INT 0
15762: PPUSH
15763: CALL_OW 277
// end ;
15767: PPOPN 2
15769: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
15770: LD_EXP 44
15774: PUSH
15775: LD_EXP 72
15779: AND
15780: IFFALSE 15877
15782: GO 15784
15784: DISABLE
15785: LD_INT 0
15787: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
15788: LD_ADDR_VAR 0 1
15792: PUSH
15793: LD_INT 22
15795: PUSH
15796: LD_OWVAR 2
15800: PUSH
15801: EMPTY
15802: LIST
15803: LIST
15804: PUSH
15805: LD_INT 21
15807: PUSH
15808: LD_INT 1
15810: PUSH
15811: EMPTY
15812: LIST
15813: LIST
15814: PUSH
15815: LD_INT 3
15817: PUSH
15818: LD_INT 23
15820: PUSH
15821: LD_INT 0
15823: PUSH
15824: EMPTY
15825: LIST
15826: LIST
15827: PUSH
15828: EMPTY
15829: LIST
15830: LIST
15831: PUSH
15832: EMPTY
15833: LIST
15834: LIST
15835: LIST
15836: PPUSH
15837: CALL_OW 69
15841: ST_TO_ADDR
// if not tmp then
15842: LD_VAR 0 1
15846: NOT
15847: IFFALSE 15851
// exit ;
15849: GO 15877
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
15851: LD_VAR 0 1
15855: PUSH
15856: LD_INT 1
15858: PPUSH
15859: LD_VAR 0 1
15863: PPUSH
15864: CALL_OW 12
15868: ARRAY
15869: PPUSH
15870: LD_INT 200
15872: PPUSH
15873: CALL_OW 234
// end ;
15877: PPOPN 1
15879: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
15880: LD_EXP 44
15884: PUSH
15885: LD_EXP 73
15889: AND
15890: IFFALSE 15969
15892: GO 15894
15894: DISABLE
15895: LD_INT 0
15897: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
15898: LD_ADDR_VAR 0 1
15902: PUSH
15903: LD_INT 22
15905: PUSH
15906: LD_OWVAR 2
15910: PUSH
15911: EMPTY
15912: LIST
15913: LIST
15914: PUSH
15915: LD_INT 21
15917: PUSH
15918: LD_INT 2
15920: PUSH
15921: EMPTY
15922: LIST
15923: LIST
15924: PUSH
15925: EMPTY
15926: LIST
15927: LIST
15928: PPUSH
15929: CALL_OW 69
15933: ST_TO_ADDR
// if not tmp then
15934: LD_VAR 0 1
15938: NOT
15939: IFFALSE 15943
// exit ;
15941: GO 15969
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
15943: LD_VAR 0 1
15947: PUSH
15948: LD_INT 1
15950: PPUSH
15951: LD_VAR 0 1
15955: PPUSH
15956: CALL_OW 12
15960: ARRAY
15961: PPUSH
15962: LD_INT 60
15964: PPUSH
15965: CALL_OW 234
// end ;
15969: PPOPN 1
15971: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
15972: LD_EXP 44
15976: PUSH
15977: LD_EXP 74
15981: AND
15982: IFFALSE 16081
15984: GO 15986
15986: DISABLE
15987: LD_INT 0
15989: PPUSH
15990: PPUSH
// begin enable ;
15991: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
15992: LD_ADDR_VAR 0 1
15996: PUSH
15997: LD_INT 22
15999: PUSH
16000: LD_OWVAR 2
16004: PUSH
16005: EMPTY
16006: LIST
16007: LIST
16008: PUSH
16009: LD_INT 61
16011: PUSH
16012: EMPTY
16013: LIST
16014: PUSH
16015: LD_INT 33
16017: PUSH
16018: LD_INT 2
16020: PUSH
16021: EMPTY
16022: LIST
16023: LIST
16024: PUSH
16025: EMPTY
16026: LIST
16027: LIST
16028: LIST
16029: PPUSH
16030: CALL_OW 69
16034: ST_TO_ADDR
// if not tmp then
16035: LD_VAR 0 1
16039: NOT
16040: IFFALSE 16044
// exit ;
16042: GO 16081
// for i in tmp do
16044: LD_ADDR_VAR 0 2
16048: PUSH
16049: LD_VAR 0 1
16053: PUSH
16054: FOR_IN
16055: IFFALSE 16079
// if IsControledBy ( i ) then
16057: LD_VAR 0 2
16061: PPUSH
16062: CALL_OW 312
16066: IFFALSE 16077
// ComUnlink ( i ) ;
16068: LD_VAR 0 2
16072: PPUSH
16073: CALL_OW 136
16077: GO 16054
16079: POP
16080: POP
// end ;
16081: PPOPN 2
16083: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
16084: LD_EXP 44
16088: PUSH
16089: LD_EXP 75
16093: AND
16094: IFFALSE 16234
16096: GO 16098
16098: DISABLE
16099: LD_INT 0
16101: PPUSH
16102: PPUSH
// begin ToLua ( displayPowell(); ) ;
16103: LD_STRING displayPowell();
16105: PPUSH
16106: CALL_OW 559
// uc_side := 0 ;
16110: LD_ADDR_OWVAR 20
16114: PUSH
16115: LD_INT 0
16117: ST_TO_ADDR
// uc_nation := 2 ;
16118: LD_ADDR_OWVAR 21
16122: PUSH
16123: LD_INT 2
16125: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
16126: LD_ADDR_OWVAR 37
16130: PUSH
16131: LD_INT 14
16133: ST_TO_ADDR
// vc_engine := engine_siberite ;
16134: LD_ADDR_OWVAR 39
16138: PUSH
16139: LD_INT 3
16141: ST_TO_ADDR
// vc_control := control_apeman ;
16142: LD_ADDR_OWVAR 38
16146: PUSH
16147: LD_INT 5
16149: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
16150: LD_ADDR_OWVAR 40
16154: PUSH
16155: LD_INT 29
16157: ST_TO_ADDR
// un := CreateVehicle ;
16158: LD_ADDR_VAR 0 2
16162: PUSH
16163: CALL_OW 45
16167: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
16168: LD_VAR 0 2
16172: PPUSH
16173: LD_INT 1
16175: PPUSH
16176: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
16180: LD_INT 35
16182: PPUSH
16183: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
16187: LD_VAR 0 2
16191: PPUSH
16192: LD_INT 22
16194: PUSH
16195: LD_OWVAR 2
16199: PUSH
16200: EMPTY
16201: LIST
16202: LIST
16203: PPUSH
16204: CALL_OW 69
16208: PPUSH
16209: LD_VAR 0 2
16213: PPUSH
16214: CALL_OW 74
16218: PPUSH
16219: CALL_OW 115
// until IsDead ( un ) ;
16223: LD_VAR 0 2
16227: PPUSH
16228: CALL_OW 301
16232: IFFALSE 16180
// end ;
16234: PPOPN 2
16236: END
// every 0 0$1 trigger StreamModeActive and sStu do
16237: LD_EXP 44
16241: PUSH
16242: LD_EXP 83
16246: AND
16247: IFFALSE 16263
16249: GO 16251
16251: DISABLE
// begin ToLua ( displayStucuk(); ) ;
16252: LD_STRING displayStucuk();
16254: PPUSH
16255: CALL_OW 559
// ResetFog ;
16259: CALL_OW 335
// end ;
16263: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
16264: LD_EXP 44
16268: PUSH
16269: LD_EXP 76
16273: AND
16274: IFFALSE 16415
16276: GO 16278
16278: DISABLE
16279: LD_INT 0
16281: PPUSH
16282: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
16283: LD_ADDR_VAR 0 2
16287: PUSH
16288: LD_INT 22
16290: PUSH
16291: LD_OWVAR 2
16295: PUSH
16296: EMPTY
16297: LIST
16298: LIST
16299: PUSH
16300: LD_INT 21
16302: PUSH
16303: LD_INT 1
16305: PUSH
16306: EMPTY
16307: LIST
16308: LIST
16309: PUSH
16310: EMPTY
16311: LIST
16312: LIST
16313: PPUSH
16314: CALL_OW 69
16318: ST_TO_ADDR
// if not tmp then
16319: LD_VAR 0 2
16323: NOT
16324: IFFALSE 16328
// exit ;
16326: GO 16415
// un := tmp [ rand ( 1 , tmp ) ] ;
16328: LD_ADDR_VAR 0 1
16332: PUSH
16333: LD_VAR 0 2
16337: PUSH
16338: LD_INT 1
16340: PPUSH
16341: LD_VAR 0 2
16345: PPUSH
16346: CALL_OW 12
16350: ARRAY
16351: ST_TO_ADDR
// SetSide ( un , 0 ) ;
16352: LD_VAR 0 1
16356: PPUSH
16357: LD_INT 0
16359: PPUSH
16360: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
16364: LD_VAR 0 1
16368: PPUSH
16369: LD_OWVAR 3
16373: PUSH
16374: LD_VAR 0 1
16378: DIFF
16379: PPUSH
16380: LD_VAR 0 1
16384: PPUSH
16385: CALL_OW 74
16389: PPUSH
16390: CALL_OW 115
// wait ( 0 0$20 ) ;
16394: LD_INT 700
16396: PPUSH
16397: CALL_OW 67
// SetSide ( un , your_side ) ;
16401: LD_VAR 0 1
16405: PPUSH
16406: LD_OWVAR 2
16410: PPUSH
16411: CALL_OW 235
// end ;
16415: PPOPN 2
16417: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
16418: LD_EXP 44
16422: PUSH
16423: LD_EXP 77
16427: AND
16428: IFFALSE 16534
16430: GO 16432
16432: DISABLE
16433: LD_INT 0
16435: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
16436: LD_ADDR_VAR 0 1
16440: PUSH
16441: LD_INT 22
16443: PUSH
16444: LD_OWVAR 2
16448: PUSH
16449: EMPTY
16450: LIST
16451: LIST
16452: PUSH
16453: LD_INT 2
16455: PUSH
16456: LD_INT 30
16458: PUSH
16459: LD_INT 0
16461: PUSH
16462: EMPTY
16463: LIST
16464: LIST
16465: PUSH
16466: LD_INT 30
16468: PUSH
16469: LD_INT 1
16471: PUSH
16472: EMPTY
16473: LIST
16474: LIST
16475: PUSH
16476: EMPTY
16477: LIST
16478: LIST
16479: LIST
16480: PUSH
16481: EMPTY
16482: LIST
16483: LIST
16484: PPUSH
16485: CALL_OW 69
16489: ST_TO_ADDR
// if not depot then
16490: LD_VAR 0 1
16494: NOT
16495: IFFALSE 16499
// exit ;
16497: GO 16534
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
16499: LD_VAR 0 1
16503: PUSH
16504: LD_INT 1
16506: ARRAY
16507: PPUSH
16508: CALL_OW 250
16512: PPUSH
16513: LD_VAR 0 1
16517: PUSH
16518: LD_INT 1
16520: ARRAY
16521: PPUSH
16522: CALL_OW 251
16526: PPUSH
16527: LD_INT 70
16529: PPUSH
16530: CALL_OW 495
// end ;
16534: PPOPN 1
16536: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
16537: LD_EXP 44
16541: PUSH
16542: LD_EXP 78
16546: AND
16547: IFFALSE 16758
16549: GO 16551
16551: DISABLE
16552: LD_INT 0
16554: PPUSH
16555: PPUSH
16556: PPUSH
16557: PPUSH
16558: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
16559: LD_ADDR_VAR 0 5
16563: PUSH
16564: LD_INT 22
16566: PUSH
16567: LD_OWVAR 2
16571: PUSH
16572: EMPTY
16573: LIST
16574: LIST
16575: PUSH
16576: LD_INT 21
16578: PUSH
16579: LD_INT 1
16581: PUSH
16582: EMPTY
16583: LIST
16584: LIST
16585: PUSH
16586: EMPTY
16587: LIST
16588: LIST
16589: PPUSH
16590: CALL_OW 69
16594: ST_TO_ADDR
// if not tmp then
16595: LD_VAR 0 5
16599: NOT
16600: IFFALSE 16604
// exit ;
16602: GO 16758
// for i in tmp do
16604: LD_ADDR_VAR 0 1
16608: PUSH
16609: LD_VAR 0 5
16613: PUSH
16614: FOR_IN
16615: IFFALSE 16756
// begin d := rand ( 0 , 5 ) ;
16617: LD_ADDR_VAR 0 4
16621: PUSH
16622: LD_INT 0
16624: PPUSH
16625: LD_INT 5
16627: PPUSH
16628: CALL_OW 12
16632: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
16633: LD_ADDR_VAR 0 2
16637: PUSH
16638: LD_VAR 0 1
16642: PPUSH
16643: CALL_OW 250
16647: PPUSH
16648: LD_VAR 0 4
16652: PPUSH
16653: LD_INT 3
16655: PPUSH
16656: LD_INT 12
16658: PPUSH
16659: CALL_OW 12
16663: PPUSH
16664: CALL_OW 272
16668: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
16669: LD_ADDR_VAR 0 3
16673: PUSH
16674: LD_VAR 0 1
16678: PPUSH
16679: CALL_OW 251
16683: PPUSH
16684: LD_VAR 0 4
16688: PPUSH
16689: LD_INT 3
16691: PPUSH
16692: LD_INT 12
16694: PPUSH
16695: CALL_OW 12
16699: PPUSH
16700: CALL_OW 273
16704: ST_TO_ADDR
// if ValidHex ( x , y ) then
16705: LD_VAR 0 2
16709: PPUSH
16710: LD_VAR 0 3
16714: PPUSH
16715: CALL_OW 488
16719: IFFALSE 16754
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
16721: LD_VAR 0 1
16725: PPUSH
16726: LD_VAR 0 2
16730: PPUSH
16731: LD_VAR 0 3
16735: PPUSH
16736: LD_INT 3
16738: PPUSH
16739: LD_INT 6
16741: PPUSH
16742: CALL_OW 12
16746: PPUSH
16747: LD_INT 1
16749: PPUSH
16750: CALL_OW 483
// end ;
16754: GO 16614
16756: POP
16757: POP
// end ;
16758: PPOPN 5
16760: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
16761: LD_EXP 44
16765: PUSH
16766: LD_EXP 79
16770: AND
16771: IFFALSE 16865
16773: GO 16775
16775: DISABLE
16776: LD_INT 0
16778: PPUSH
16779: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
16780: LD_ADDR_VAR 0 2
16784: PUSH
16785: LD_INT 22
16787: PUSH
16788: LD_OWVAR 2
16792: PUSH
16793: EMPTY
16794: LIST
16795: LIST
16796: PUSH
16797: LD_INT 32
16799: PUSH
16800: LD_INT 1
16802: PUSH
16803: EMPTY
16804: LIST
16805: LIST
16806: PUSH
16807: LD_INT 21
16809: PUSH
16810: LD_INT 2
16812: PUSH
16813: EMPTY
16814: LIST
16815: LIST
16816: PUSH
16817: EMPTY
16818: LIST
16819: LIST
16820: LIST
16821: PPUSH
16822: CALL_OW 69
16826: ST_TO_ADDR
// if not tmp then
16827: LD_VAR 0 2
16831: NOT
16832: IFFALSE 16836
// exit ;
16834: GO 16865
// for i in tmp do
16836: LD_ADDR_VAR 0 1
16840: PUSH
16841: LD_VAR 0 2
16845: PUSH
16846: FOR_IN
16847: IFFALSE 16863
// SetFuel ( i , 0 ) ;
16849: LD_VAR 0 1
16853: PPUSH
16854: LD_INT 0
16856: PPUSH
16857: CALL_OW 240
16861: GO 16846
16863: POP
16864: POP
// end ;
16865: PPOPN 2
16867: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
16868: LD_EXP 44
16872: PUSH
16873: LD_EXP 80
16877: AND
16878: IFFALSE 16944
16880: GO 16882
16882: DISABLE
16883: LD_INT 0
16885: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
16886: LD_ADDR_VAR 0 1
16890: PUSH
16891: LD_INT 22
16893: PUSH
16894: LD_OWVAR 2
16898: PUSH
16899: EMPTY
16900: LIST
16901: LIST
16902: PUSH
16903: LD_INT 30
16905: PUSH
16906: LD_INT 29
16908: PUSH
16909: EMPTY
16910: LIST
16911: LIST
16912: PUSH
16913: EMPTY
16914: LIST
16915: LIST
16916: PPUSH
16917: CALL_OW 69
16921: ST_TO_ADDR
// if not tmp then
16922: LD_VAR 0 1
16926: NOT
16927: IFFALSE 16931
// exit ;
16929: GO 16944
// DestroyUnit ( tmp [ 1 ] ) ;
16931: LD_VAR 0 1
16935: PUSH
16936: LD_INT 1
16938: ARRAY
16939: PPUSH
16940: CALL_OW 65
// end ;
16944: PPOPN 1
16946: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
16947: LD_EXP 44
16951: PUSH
16952: LD_EXP 82
16956: AND
16957: IFFALSE 17086
16959: GO 16961
16961: DISABLE
16962: LD_INT 0
16964: PPUSH
// begin uc_side := 0 ;
16965: LD_ADDR_OWVAR 20
16969: PUSH
16970: LD_INT 0
16972: ST_TO_ADDR
// uc_nation := nation_arabian ;
16973: LD_ADDR_OWVAR 21
16977: PUSH
16978: LD_INT 2
16980: ST_TO_ADDR
// hc_gallery :=  ;
16981: LD_ADDR_OWVAR 33
16985: PUSH
16986: LD_STRING 
16988: ST_TO_ADDR
// hc_name :=  ;
16989: LD_ADDR_OWVAR 26
16993: PUSH
16994: LD_STRING 
16996: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
16997: LD_INT 1
16999: PPUSH
17000: LD_INT 11
17002: PPUSH
17003: LD_INT 10
17005: PPUSH
17006: CALL_OW 380
// un := CreateHuman ;
17010: LD_ADDR_VAR 0 1
17014: PUSH
17015: CALL_OW 44
17019: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
17020: LD_VAR 0 1
17024: PPUSH
17025: LD_INT 1
17027: PPUSH
17028: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
17032: LD_INT 35
17034: PPUSH
17035: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
17039: LD_VAR 0 1
17043: PPUSH
17044: LD_INT 22
17046: PUSH
17047: LD_OWVAR 2
17051: PUSH
17052: EMPTY
17053: LIST
17054: LIST
17055: PPUSH
17056: CALL_OW 69
17060: PPUSH
17061: LD_VAR 0 1
17065: PPUSH
17066: CALL_OW 74
17070: PPUSH
17071: CALL_OW 115
// until IsDead ( un ) ;
17075: LD_VAR 0 1
17079: PPUSH
17080: CALL_OW 301
17084: IFFALSE 17032
// end ;
17086: PPOPN 1
17088: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
17089: LD_EXP 44
17093: PUSH
17094: LD_EXP 84
17098: AND
17099: IFFALSE 17111
17101: GO 17103
17103: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
17104: LD_STRING earthquake(getX(game), 0, 32)
17106: PPUSH
17107: CALL_OW 559
17111: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
17112: LD_EXP 44
17116: PUSH
17117: LD_EXP 85
17121: AND
17122: IFFALSE 17213
17124: GO 17126
17126: DISABLE
17127: LD_INT 0
17129: PPUSH
// begin enable ;
17130: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
17131: LD_ADDR_VAR 0 1
17135: PUSH
17136: LD_INT 22
17138: PUSH
17139: LD_OWVAR 2
17143: PUSH
17144: EMPTY
17145: LIST
17146: LIST
17147: PUSH
17148: LD_INT 21
17150: PUSH
17151: LD_INT 2
17153: PUSH
17154: EMPTY
17155: LIST
17156: LIST
17157: PUSH
17158: LD_INT 33
17160: PUSH
17161: LD_INT 3
17163: PUSH
17164: EMPTY
17165: LIST
17166: LIST
17167: PUSH
17168: EMPTY
17169: LIST
17170: LIST
17171: LIST
17172: PPUSH
17173: CALL_OW 69
17177: ST_TO_ADDR
// if not tmp then
17178: LD_VAR 0 1
17182: NOT
17183: IFFALSE 17187
// exit ;
17185: GO 17213
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
17187: LD_VAR 0 1
17191: PUSH
17192: LD_INT 1
17194: PPUSH
17195: LD_VAR 0 1
17199: PPUSH
17200: CALL_OW 12
17204: ARRAY
17205: PPUSH
17206: LD_INT 1
17208: PPUSH
17209: CALL_OW 234
// end ;
17213: PPOPN 1
17215: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
17216: LD_EXP 44
17220: PUSH
17221: LD_EXP 86
17225: AND
17226: IFFALSE 17367
17228: GO 17230
17230: DISABLE
17231: LD_INT 0
17233: PPUSH
17234: PPUSH
17235: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17236: LD_ADDR_VAR 0 3
17240: PUSH
17241: LD_INT 22
17243: PUSH
17244: LD_OWVAR 2
17248: PUSH
17249: EMPTY
17250: LIST
17251: LIST
17252: PUSH
17253: LD_INT 25
17255: PUSH
17256: LD_INT 1
17258: PUSH
17259: EMPTY
17260: LIST
17261: LIST
17262: PUSH
17263: EMPTY
17264: LIST
17265: LIST
17266: PPUSH
17267: CALL_OW 69
17271: ST_TO_ADDR
// if not tmp then
17272: LD_VAR 0 3
17276: NOT
17277: IFFALSE 17281
// exit ;
17279: GO 17367
// un := tmp [ rand ( 1 , tmp ) ] ;
17281: LD_ADDR_VAR 0 2
17285: PUSH
17286: LD_VAR 0 3
17290: PUSH
17291: LD_INT 1
17293: PPUSH
17294: LD_VAR 0 3
17298: PPUSH
17299: CALL_OW 12
17303: ARRAY
17304: ST_TO_ADDR
// if Crawls ( un ) then
17305: LD_VAR 0 2
17309: PPUSH
17310: CALL_OW 318
17314: IFFALSE 17325
// ComWalk ( un ) ;
17316: LD_VAR 0 2
17320: PPUSH
17321: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
17325: LD_VAR 0 2
17329: PPUSH
17330: LD_INT 9
17332: PPUSH
17333: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
17337: LD_INT 28
17339: PPUSH
17340: LD_OWVAR 2
17344: PPUSH
17345: LD_INT 2
17347: PPUSH
17348: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
17352: LD_INT 29
17354: PPUSH
17355: LD_OWVAR 2
17359: PPUSH
17360: LD_INT 2
17362: PPUSH
17363: CALL_OW 322
// end ;
17367: PPOPN 3
17369: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
17370: LD_EXP 44
17374: PUSH
17375: LD_EXP 87
17379: AND
17380: IFFALSE 17491
17382: GO 17384
17384: DISABLE
17385: LD_INT 0
17387: PPUSH
17388: PPUSH
17389: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17390: LD_ADDR_VAR 0 3
17394: PUSH
17395: LD_INT 22
17397: PUSH
17398: LD_OWVAR 2
17402: PUSH
17403: EMPTY
17404: LIST
17405: LIST
17406: PUSH
17407: LD_INT 25
17409: PUSH
17410: LD_INT 1
17412: PUSH
17413: EMPTY
17414: LIST
17415: LIST
17416: PUSH
17417: EMPTY
17418: LIST
17419: LIST
17420: PPUSH
17421: CALL_OW 69
17425: ST_TO_ADDR
// if not tmp then
17426: LD_VAR 0 3
17430: NOT
17431: IFFALSE 17435
// exit ;
17433: GO 17491
// un := tmp [ rand ( 1 , tmp ) ] ;
17435: LD_ADDR_VAR 0 2
17439: PUSH
17440: LD_VAR 0 3
17444: PUSH
17445: LD_INT 1
17447: PPUSH
17448: LD_VAR 0 3
17452: PPUSH
17453: CALL_OW 12
17457: ARRAY
17458: ST_TO_ADDR
// if Crawls ( un ) then
17459: LD_VAR 0 2
17463: PPUSH
17464: CALL_OW 318
17468: IFFALSE 17479
// ComWalk ( un ) ;
17470: LD_VAR 0 2
17474: PPUSH
17475: CALL_OW 138
// SetClass ( un , class_mortar ) ;
17479: LD_VAR 0 2
17483: PPUSH
17484: LD_INT 8
17486: PPUSH
17487: CALL_OW 336
// end ;
17491: PPOPN 3
17493: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
17494: LD_EXP 44
17498: PUSH
17499: LD_EXP 88
17503: AND
17504: IFFALSE 17648
17506: GO 17508
17508: DISABLE
17509: LD_INT 0
17511: PPUSH
17512: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
17513: LD_ADDR_VAR 0 2
17517: PUSH
17518: LD_INT 22
17520: PUSH
17521: LD_OWVAR 2
17525: PUSH
17526: EMPTY
17527: LIST
17528: LIST
17529: PUSH
17530: LD_INT 21
17532: PUSH
17533: LD_INT 2
17535: PUSH
17536: EMPTY
17537: LIST
17538: LIST
17539: PUSH
17540: LD_INT 2
17542: PUSH
17543: LD_INT 34
17545: PUSH
17546: LD_INT 12
17548: PUSH
17549: EMPTY
17550: LIST
17551: LIST
17552: PUSH
17553: LD_INT 34
17555: PUSH
17556: LD_INT 51
17558: PUSH
17559: EMPTY
17560: LIST
17561: LIST
17562: PUSH
17563: LD_INT 34
17565: PUSH
17566: LD_INT 32
17568: PUSH
17569: EMPTY
17570: LIST
17571: LIST
17572: PUSH
17573: EMPTY
17574: LIST
17575: LIST
17576: LIST
17577: LIST
17578: PUSH
17579: EMPTY
17580: LIST
17581: LIST
17582: LIST
17583: PPUSH
17584: CALL_OW 69
17588: ST_TO_ADDR
// if not tmp then
17589: LD_VAR 0 2
17593: NOT
17594: IFFALSE 17598
// exit ;
17596: GO 17648
// for i in tmp do
17598: LD_ADDR_VAR 0 1
17602: PUSH
17603: LD_VAR 0 2
17607: PUSH
17608: FOR_IN
17609: IFFALSE 17646
// if GetCargo ( i , mat_artifact ) = 0 then
17611: LD_VAR 0 1
17615: PPUSH
17616: LD_INT 4
17618: PPUSH
17619: CALL_OW 289
17623: PUSH
17624: LD_INT 0
17626: EQUAL
17627: IFFALSE 17644
// SetCargo ( i , mat_siberit , 100 ) ;
17629: LD_VAR 0 1
17633: PPUSH
17634: LD_INT 3
17636: PPUSH
17637: LD_INT 100
17639: PPUSH
17640: CALL_OW 290
17644: GO 17608
17646: POP
17647: POP
// end ;
17648: PPOPN 2
17650: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
17651: LD_EXP 44
17655: PUSH
17656: LD_EXP 89
17660: AND
17661: IFFALSE 17844
17663: GO 17665
17665: DISABLE
17666: LD_INT 0
17668: PPUSH
17669: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
17670: LD_ADDR_VAR 0 2
17674: PUSH
17675: LD_INT 22
17677: PUSH
17678: LD_OWVAR 2
17682: PUSH
17683: EMPTY
17684: LIST
17685: LIST
17686: PPUSH
17687: CALL_OW 69
17691: ST_TO_ADDR
// if not tmp then
17692: LD_VAR 0 2
17696: NOT
17697: IFFALSE 17701
// exit ;
17699: GO 17844
// for i := 1 to 2 do
17701: LD_ADDR_VAR 0 1
17705: PUSH
17706: DOUBLE
17707: LD_INT 1
17709: DEC
17710: ST_TO_ADDR
17711: LD_INT 2
17713: PUSH
17714: FOR_TO
17715: IFFALSE 17842
// begin uc_side := your_side ;
17717: LD_ADDR_OWVAR 20
17721: PUSH
17722: LD_OWVAR 2
17726: ST_TO_ADDR
// uc_nation := nation_american ;
17727: LD_ADDR_OWVAR 21
17731: PUSH
17732: LD_INT 1
17734: ST_TO_ADDR
// vc_chassis := us_morphling ;
17735: LD_ADDR_OWVAR 37
17739: PUSH
17740: LD_INT 5
17742: ST_TO_ADDR
// vc_engine := engine_siberite ;
17743: LD_ADDR_OWVAR 39
17747: PUSH
17748: LD_INT 3
17750: ST_TO_ADDR
// vc_control := control_computer ;
17751: LD_ADDR_OWVAR 38
17755: PUSH
17756: LD_INT 3
17758: ST_TO_ADDR
// vc_weapon := us_double_laser ;
17759: LD_ADDR_OWVAR 40
17763: PUSH
17764: LD_INT 10
17766: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
17767: LD_VAR 0 2
17771: PUSH
17772: LD_INT 1
17774: ARRAY
17775: PPUSH
17776: CALL_OW 310
17780: NOT
17781: IFFALSE 17828
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
17783: CALL_OW 45
17787: PPUSH
17788: LD_VAR 0 2
17792: PUSH
17793: LD_INT 1
17795: ARRAY
17796: PPUSH
17797: CALL_OW 250
17801: PPUSH
17802: LD_VAR 0 2
17806: PUSH
17807: LD_INT 1
17809: ARRAY
17810: PPUSH
17811: CALL_OW 251
17815: PPUSH
17816: LD_INT 12
17818: PPUSH
17819: LD_INT 1
17821: PPUSH
17822: CALL_OW 50
17826: GO 17840
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
17828: CALL_OW 45
17832: PPUSH
17833: LD_INT 1
17835: PPUSH
17836: CALL_OW 51
// end ;
17840: GO 17714
17842: POP
17843: POP
// end ;
17844: PPOPN 2
17846: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
17847: LD_EXP 44
17851: PUSH
17852: LD_EXP 90
17856: AND
17857: IFFALSE 18079
17859: GO 17861
17861: DISABLE
17862: LD_INT 0
17864: PPUSH
17865: PPUSH
17866: PPUSH
17867: PPUSH
17868: PPUSH
17869: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
17870: LD_ADDR_VAR 0 6
17874: PUSH
17875: LD_INT 22
17877: PUSH
17878: LD_OWVAR 2
17882: PUSH
17883: EMPTY
17884: LIST
17885: LIST
17886: PUSH
17887: LD_INT 21
17889: PUSH
17890: LD_INT 1
17892: PUSH
17893: EMPTY
17894: LIST
17895: LIST
17896: PUSH
17897: LD_INT 3
17899: PUSH
17900: LD_INT 23
17902: PUSH
17903: LD_INT 0
17905: PUSH
17906: EMPTY
17907: LIST
17908: LIST
17909: PUSH
17910: EMPTY
17911: LIST
17912: LIST
17913: PUSH
17914: EMPTY
17915: LIST
17916: LIST
17917: LIST
17918: PPUSH
17919: CALL_OW 69
17923: ST_TO_ADDR
// if not tmp then
17924: LD_VAR 0 6
17928: NOT
17929: IFFALSE 17933
// exit ;
17931: GO 18079
// s1 := rand ( 1 , 4 ) ;
17933: LD_ADDR_VAR 0 2
17937: PUSH
17938: LD_INT 1
17940: PPUSH
17941: LD_INT 4
17943: PPUSH
17944: CALL_OW 12
17948: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
17949: LD_ADDR_VAR 0 4
17953: PUSH
17954: LD_VAR 0 6
17958: PUSH
17959: LD_INT 1
17961: ARRAY
17962: PPUSH
17963: LD_VAR 0 2
17967: PPUSH
17968: CALL_OW 259
17972: ST_TO_ADDR
// if s1 = 1 then
17973: LD_VAR 0 2
17977: PUSH
17978: LD_INT 1
17980: EQUAL
17981: IFFALSE 18001
// s2 := rand ( 2 , 4 ) else
17983: LD_ADDR_VAR 0 3
17987: PUSH
17988: LD_INT 2
17990: PPUSH
17991: LD_INT 4
17993: PPUSH
17994: CALL_OW 12
17998: ST_TO_ADDR
17999: GO 18009
// s2 := 1 ;
18001: LD_ADDR_VAR 0 3
18005: PUSH
18006: LD_INT 1
18008: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
18009: LD_ADDR_VAR 0 5
18013: PUSH
18014: LD_VAR 0 6
18018: PUSH
18019: LD_INT 1
18021: ARRAY
18022: PPUSH
18023: LD_VAR 0 3
18027: PPUSH
18028: CALL_OW 259
18032: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
18033: LD_VAR 0 6
18037: PUSH
18038: LD_INT 1
18040: ARRAY
18041: PPUSH
18042: LD_VAR 0 2
18046: PPUSH
18047: LD_VAR 0 5
18051: PPUSH
18052: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
18056: LD_VAR 0 6
18060: PUSH
18061: LD_INT 1
18063: ARRAY
18064: PPUSH
18065: LD_VAR 0 3
18069: PPUSH
18070: LD_VAR 0 4
18074: PPUSH
18075: CALL_OW 237
// end ;
18079: PPOPN 6
18081: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
18082: LD_EXP 44
18086: PUSH
18087: LD_EXP 91
18091: AND
18092: IFFALSE 18171
18094: GO 18096
18096: DISABLE
18097: LD_INT 0
18099: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
18100: LD_ADDR_VAR 0 1
18104: PUSH
18105: LD_INT 22
18107: PUSH
18108: LD_OWVAR 2
18112: PUSH
18113: EMPTY
18114: LIST
18115: LIST
18116: PUSH
18117: LD_INT 30
18119: PUSH
18120: LD_INT 3
18122: PUSH
18123: EMPTY
18124: LIST
18125: LIST
18126: PUSH
18127: EMPTY
18128: LIST
18129: LIST
18130: PPUSH
18131: CALL_OW 69
18135: ST_TO_ADDR
// if not tmp then
18136: LD_VAR 0 1
18140: NOT
18141: IFFALSE 18145
// exit ;
18143: GO 18171
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
18145: LD_VAR 0 1
18149: PUSH
18150: LD_INT 1
18152: PPUSH
18153: LD_VAR 0 1
18157: PPUSH
18158: CALL_OW 12
18162: ARRAY
18163: PPUSH
18164: LD_INT 1
18166: PPUSH
18167: CALL_OW 234
// end ;
18171: PPOPN 1
18173: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
18174: LD_EXP 44
18178: PUSH
18179: LD_EXP 92
18183: AND
18184: IFFALSE 18296
18186: GO 18188
18188: DISABLE
18189: LD_INT 0
18191: PPUSH
18192: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
18193: LD_ADDR_VAR 0 2
18197: PUSH
18198: LD_INT 22
18200: PUSH
18201: LD_OWVAR 2
18205: PUSH
18206: EMPTY
18207: LIST
18208: LIST
18209: PUSH
18210: LD_INT 2
18212: PUSH
18213: LD_INT 30
18215: PUSH
18216: LD_INT 27
18218: PUSH
18219: EMPTY
18220: LIST
18221: LIST
18222: PUSH
18223: LD_INT 30
18225: PUSH
18226: LD_INT 26
18228: PUSH
18229: EMPTY
18230: LIST
18231: LIST
18232: PUSH
18233: LD_INT 30
18235: PUSH
18236: LD_INT 28
18238: PUSH
18239: EMPTY
18240: LIST
18241: LIST
18242: PUSH
18243: EMPTY
18244: LIST
18245: LIST
18246: LIST
18247: LIST
18248: PUSH
18249: EMPTY
18250: LIST
18251: LIST
18252: PPUSH
18253: CALL_OW 69
18257: ST_TO_ADDR
// if not tmp then
18258: LD_VAR 0 2
18262: NOT
18263: IFFALSE 18267
// exit ;
18265: GO 18296
// for i in tmp do
18267: LD_ADDR_VAR 0 1
18271: PUSH
18272: LD_VAR 0 2
18276: PUSH
18277: FOR_IN
18278: IFFALSE 18294
// SetLives ( i , 1 ) ;
18280: LD_VAR 0 1
18284: PPUSH
18285: LD_INT 1
18287: PPUSH
18288: CALL_OW 234
18292: GO 18277
18294: POP
18295: POP
// end ;
18296: PPOPN 2
18298: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
18299: LD_EXP 44
18303: PUSH
18304: LD_EXP 93
18308: AND
18309: IFFALSE 18583
18311: GO 18313
18313: DISABLE
18314: LD_INT 0
18316: PPUSH
18317: PPUSH
18318: PPUSH
// begin i := rand ( 1 , 7 ) ;
18319: LD_ADDR_VAR 0 1
18323: PUSH
18324: LD_INT 1
18326: PPUSH
18327: LD_INT 7
18329: PPUSH
18330: CALL_OW 12
18334: ST_TO_ADDR
// case i of 1 :
18335: LD_VAR 0 1
18339: PUSH
18340: LD_INT 1
18342: DOUBLE
18343: EQUAL
18344: IFTRUE 18348
18346: GO 18358
18348: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
18349: LD_STRING earthquake(getX(game), 0, 32)
18351: PPUSH
18352: CALL_OW 559
18356: GO 18583
18358: LD_INT 2
18360: DOUBLE
18361: EQUAL
18362: IFTRUE 18366
18364: GO 18380
18366: POP
// begin ToLua ( displayStucuk(); ) ;
18367: LD_STRING displayStucuk();
18369: PPUSH
18370: CALL_OW 559
// ResetFog ;
18374: CALL_OW 335
// end ; 3 :
18378: GO 18583
18380: LD_INT 3
18382: DOUBLE
18383: EQUAL
18384: IFTRUE 18388
18386: GO 18492
18388: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18389: LD_ADDR_VAR 0 2
18393: PUSH
18394: LD_INT 22
18396: PUSH
18397: LD_OWVAR 2
18401: PUSH
18402: EMPTY
18403: LIST
18404: LIST
18405: PUSH
18406: LD_INT 25
18408: PUSH
18409: LD_INT 1
18411: PUSH
18412: EMPTY
18413: LIST
18414: LIST
18415: PUSH
18416: EMPTY
18417: LIST
18418: LIST
18419: PPUSH
18420: CALL_OW 69
18424: ST_TO_ADDR
// if not tmp then
18425: LD_VAR 0 2
18429: NOT
18430: IFFALSE 18434
// exit ;
18432: GO 18583
// un := tmp [ rand ( 1 , tmp ) ] ;
18434: LD_ADDR_VAR 0 3
18438: PUSH
18439: LD_VAR 0 2
18443: PUSH
18444: LD_INT 1
18446: PPUSH
18447: LD_VAR 0 2
18451: PPUSH
18452: CALL_OW 12
18456: ARRAY
18457: ST_TO_ADDR
// if Crawls ( un ) then
18458: LD_VAR 0 3
18462: PPUSH
18463: CALL_OW 318
18467: IFFALSE 18478
// ComWalk ( un ) ;
18469: LD_VAR 0 3
18473: PPUSH
18474: CALL_OW 138
// SetClass ( un , class_mortar ) ;
18478: LD_VAR 0 3
18482: PPUSH
18483: LD_INT 8
18485: PPUSH
18486: CALL_OW 336
// end ; 4 :
18490: GO 18583
18492: LD_INT 4
18494: DOUBLE
18495: EQUAL
18496: IFTRUE 18500
18498: GO 18561
18500: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
18501: LD_ADDR_VAR 0 2
18505: PUSH
18506: LD_INT 22
18508: PUSH
18509: LD_OWVAR 2
18513: PUSH
18514: EMPTY
18515: LIST
18516: LIST
18517: PUSH
18518: LD_INT 30
18520: PUSH
18521: LD_INT 29
18523: PUSH
18524: EMPTY
18525: LIST
18526: LIST
18527: PUSH
18528: EMPTY
18529: LIST
18530: LIST
18531: PPUSH
18532: CALL_OW 69
18536: ST_TO_ADDR
// if not tmp then
18537: LD_VAR 0 2
18541: NOT
18542: IFFALSE 18546
// exit ;
18544: GO 18583
// DestroyUnit ( tmp [ 1 ] ) ;
18546: LD_VAR 0 2
18550: PUSH
18551: LD_INT 1
18553: ARRAY
18554: PPUSH
18555: CALL_OW 65
// end ; 5 .. 7 :
18559: GO 18583
18561: LD_INT 5
18563: DOUBLE
18564: GREATEREQUAL
18565: IFFALSE 18573
18567: LD_INT 7
18569: DOUBLE
18570: LESSEQUAL
18571: IFTRUE 18575
18573: GO 18582
18575: POP
// StreamSibBomb ; end ;
18576: CALL 14833 0 0
18580: GO 18583
18582: POP
// end ;
18583: PPOPN 3
18585: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
18586: LD_EXP 44
18590: PUSH
18591: LD_EXP 94
18595: AND
18596: IFFALSE 18752
18598: GO 18600
18600: DISABLE
18601: LD_INT 0
18603: PPUSH
18604: PPUSH
18605: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
18606: LD_ADDR_VAR 0 2
18610: PUSH
18611: LD_INT 81
18613: PUSH
18614: LD_OWVAR 2
18618: PUSH
18619: EMPTY
18620: LIST
18621: LIST
18622: PUSH
18623: LD_INT 2
18625: PUSH
18626: LD_INT 21
18628: PUSH
18629: LD_INT 1
18631: PUSH
18632: EMPTY
18633: LIST
18634: LIST
18635: PUSH
18636: LD_INT 21
18638: PUSH
18639: LD_INT 2
18641: PUSH
18642: EMPTY
18643: LIST
18644: LIST
18645: PUSH
18646: EMPTY
18647: LIST
18648: LIST
18649: LIST
18650: PUSH
18651: EMPTY
18652: LIST
18653: LIST
18654: PPUSH
18655: CALL_OW 69
18659: ST_TO_ADDR
// if not tmp then
18660: LD_VAR 0 2
18664: NOT
18665: IFFALSE 18669
// exit ;
18667: GO 18752
// p := 0 ;
18669: LD_ADDR_VAR 0 3
18673: PUSH
18674: LD_INT 0
18676: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
18677: LD_INT 35
18679: PPUSH
18680: CALL_OW 67
// p := p + 1 ;
18684: LD_ADDR_VAR 0 3
18688: PUSH
18689: LD_VAR 0 3
18693: PUSH
18694: LD_INT 1
18696: PLUS
18697: ST_TO_ADDR
// for i in tmp do
18698: LD_ADDR_VAR 0 1
18702: PUSH
18703: LD_VAR 0 2
18707: PUSH
18708: FOR_IN
18709: IFFALSE 18740
// if GetLives ( i ) < 1000 then
18711: LD_VAR 0 1
18715: PPUSH
18716: CALL_OW 256
18720: PUSH
18721: LD_INT 1000
18723: LESS
18724: IFFALSE 18738
// SetLives ( i , 1000 ) ;
18726: LD_VAR 0 1
18730: PPUSH
18731: LD_INT 1000
18733: PPUSH
18734: CALL_OW 234
18738: GO 18708
18740: POP
18741: POP
// until p > 20 ;
18742: LD_VAR 0 3
18746: PUSH
18747: LD_INT 20
18749: GREATER
18750: IFFALSE 18677
// end ;
18752: PPOPN 3
18754: END
// every 0 0$1 trigger StreamModeActive and sTime do
18755: LD_EXP 44
18759: PUSH
18760: LD_EXP 95
18764: AND
18765: IFFALSE 18800
18767: GO 18769
18769: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
18770: LD_INT 28
18772: PPUSH
18773: LD_OWVAR 2
18777: PPUSH
18778: LD_INT 2
18780: PPUSH
18781: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
18785: LD_INT 30
18787: PPUSH
18788: LD_OWVAR 2
18792: PPUSH
18793: LD_INT 2
18795: PPUSH
18796: CALL_OW 322
// end ;
18800: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
18801: LD_EXP 44
18805: PUSH
18806: LD_EXP 96
18810: AND
18811: IFFALSE 18932
18813: GO 18815
18815: DISABLE
18816: LD_INT 0
18818: PPUSH
18819: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
18820: LD_ADDR_VAR 0 2
18824: PUSH
18825: LD_INT 22
18827: PUSH
18828: LD_OWVAR 2
18832: PUSH
18833: EMPTY
18834: LIST
18835: LIST
18836: PUSH
18837: LD_INT 21
18839: PUSH
18840: LD_INT 1
18842: PUSH
18843: EMPTY
18844: LIST
18845: LIST
18846: PUSH
18847: LD_INT 3
18849: PUSH
18850: LD_INT 23
18852: PUSH
18853: LD_INT 0
18855: PUSH
18856: EMPTY
18857: LIST
18858: LIST
18859: PUSH
18860: EMPTY
18861: LIST
18862: LIST
18863: PUSH
18864: EMPTY
18865: LIST
18866: LIST
18867: LIST
18868: PPUSH
18869: CALL_OW 69
18873: ST_TO_ADDR
// if not tmp then
18874: LD_VAR 0 2
18878: NOT
18879: IFFALSE 18883
// exit ;
18881: GO 18932
// for i in tmp do
18883: LD_ADDR_VAR 0 1
18887: PUSH
18888: LD_VAR 0 2
18892: PUSH
18893: FOR_IN
18894: IFFALSE 18930
// begin if Crawls ( i ) then
18896: LD_VAR 0 1
18900: PPUSH
18901: CALL_OW 318
18905: IFFALSE 18916
// ComWalk ( i ) ;
18907: LD_VAR 0 1
18911: PPUSH
18912: CALL_OW 138
// SetClass ( i , 2 ) ;
18916: LD_VAR 0 1
18920: PPUSH
18921: LD_INT 2
18923: PPUSH
18924: CALL_OW 336
// end ;
18928: GO 18893
18930: POP
18931: POP
// end ;
18932: PPOPN 2
18934: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
18935: LD_EXP 44
18939: PUSH
18940: LD_EXP 97
18944: AND
18945: IFFALSE 19226
18947: GO 18949
18949: DISABLE
18950: LD_INT 0
18952: PPUSH
18953: PPUSH
18954: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
18955: LD_OWVAR 2
18959: PPUSH
18960: LD_INT 9
18962: PPUSH
18963: LD_INT 1
18965: PPUSH
18966: LD_INT 1
18968: PPUSH
18969: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
18973: LD_INT 9
18975: PPUSH
18976: LD_OWVAR 2
18980: PPUSH
18981: CALL_OW 343
// uc_side := 9 ;
18985: LD_ADDR_OWVAR 20
18989: PUSH
18990: LD_INT 9
18992: ST_TO_ADDR
// uc_nation := 2 ;
18993: LD_ADDR_OWVAR 21
18997: PUSH
18998: LD_INT 2
19000: ST_TO_ADDR
// hc_name := Dark Warrior ;
19001: LD_ADDR_OWVAR 26
19005: PUSH
19006: LD_STRING Dark Warrior
19008: ST_TO_ADDR
// hc_gallery :=  ;
19009: LD_ADDR_OWVAR 33
19013: PUSH
19014: LD_STRING 
19016: ST_TO_ADDR
// hc_noskilllimit := true ;
19017: LD_ADDR_OWVAR 76
19021: PUSH
19022: LD_INT 1
19024: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
19025: LD_ADDR_OWVAR 31
19029: PUSH
19030: LD_INT 30
19032: PUSH
19033: LD_INT 30
19035: PUSH
19036: LD_INT 30
19038: PUSH
19039: LD_INT 30
19041: PUSH
19042: EMPTY
19043: LIST
19044: LIST
19045: LIST
19046: LIST
19047: ST_TO_ADDR
// un := CreateHuman ;
19048: LD_ADDR_VAR 0 3
19052: PUSH
19053: CALL_OW 44
19057: ST_TO_ADDR
// hc_noskilllimit := false ;
19058: LD_ADDR_OWVAR 76
19062: PUSH
19063: LD_INT 0
19065: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
19066: LD_VAR 0 3
19070: PPUSH
19071: LD_INT 1
19073: PPUSH
19074: CALL_OW 51
// p := 0 ;
19078: LD_ADDR_VAR 0 2
19082: PUSH
19083: LD_INT 0
19085: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
19086: LD_INT 35
19088: PPUSH
19089: CALL_OW 67
// p := p + 1 ;
19093: LD_ADDR_VAR 0 2
19097: PUSH
19098: LD_VAR 0 2
19102: PUSH
19103: LD_INT 1
19105: PLUS
19106: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
19107: LD_VAR 0 3
19111: PPUSH
19112: CALL_OW 256
19116: PUSH
19117: LD_INT 1000
19119: LESS
19120: IFFALSE 19134
// SetLives ( un , 1000 ) ;
19122: LD_VAR 0 3
19126: PPUSH
19127: LD_INT 1000
19129: PPUSH
19130: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
19134: LD_VAR 0 3
19138: PPUSH
19139: LD_INT 81
19141: PUSH
19142: LD_OWVAR 2
19146: PUSH
19147: EMPTY
19148: LIST
19149: LIST
19150: PUSH
19151: LD_INT 91
19153: PUSH
19154: LD_VAR 0 3
19158: PUSH
19159: LD_INT 30
19161: PUSH
19162: EMPTY
19163: LIST
19164: LIST
19165: LIST
19166: PUSH
19167: EMPTY
19168: LIST
19169: LIST
19170: PPUSH
19171: CALL_OW 69
19175: PPUSH
19176: LD_VAR 0 3
19180: PPUSH
19181: CALL_OW 74
19185: PPUSH
19186: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
19190: LD_VAR 0 2
19194: PUSH
19195: LD_INT 60
19197: GREATER
19198: PUSH
19199: LD_VAR 0 3
19203: PPUSH
19204: CALL_OW 301
19208: OR
19209: IFFALSE 19086
// if un then
19211: LD_VAR 0 3
19215: IFFALSE 19226
// RemoveUnit ( un ) ;
19217: LD_VAR 0 3
19221: PPUSH
19222: CALL_OW 64
// end ;
19226: PPOPN 3
19228: END
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
19229: LD_INT 0
19231: PPUSH
19232: PPUSH
19233: PPUSH
19234: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19235: LD_ADDR_VAR 0 4
19239: PUSH
19240: LD_INT 22
19242: PUSH
19243: LD_OWVAR 2
19247: PUSH
19248: EMPTY
19249: LIST
19250: LIST
19251: PUSH
19252: LD_INT 2
19254: PUSH
19255: LD_INT 30
19257: PUSH
19258: LD_INT 0
19260: PUSH
19261: EMPTY
19262: LIST
19263: LIST
19264: PUSH
19265: LD_INT 30
19267: PUSH
19268: LD_INT 1
19270: PUSH
19271: EMPTY
19272: LIST
19273: LIST
19274: PUSH
19275: EMPTY
19276: LIST
19277: LIST
19278: LIST
19279: PUSH
19280: EMPTY
19281: LIST
19282: LIST
19283: PPUSH
19284: CALL_OW 69
19288: ST_TO_ADDR
// if not tmp then
19289: LD_VAR 0 4
19293: NOT
19294: IFFALSE 19298
// exit ;
19296: GO 19357
// for i in tmp do
19298: LD_ADDR_VAR 0 2
19302: PUSH
19303: LD_VAR 0 4
19307: PUSH
19308: FOR_IN
19309: IFFALSE 19355
// for j = 1 to 3 do
19311: LD_ADDR_VAR 0 3
19315: PUSH
19316: DOUBLE
19317: LD_INT 1
19319: DEC
19320: ST_TO_ADDR
19321: LD_INT 3
19323: PUSH
19324: FOR_TO
19325: IFFALSE 19351
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
19327: LD_VAR 0 2
19331: PPUSH
19332: CALL_OW 274
19336: PPUSH
19337: LD_VAR 0 3
19341: PPUSH
19342: LD_INT 99999
19344: PPUSH
19345: CALL_OW 277
19349: GO 19324
19351: POP
19352: POP
19353: GO 19308
19355: POP
19356: POP
// end ;
19357: LD_VAR 0 1
19361: RET
// export function hHackSetLevel10 ; var i , j ; begin
19362: LD_INT 0
19364: PPUSH
19365: PPUSH
19366: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
19367: LD_ADDR_VAR 0 2
19371: PUSH
19372: LD_INT 21
19374: PUSH
19375: LD_INT 1
19377: PUSH
19378: EMPTY
19379: LIST
19380: LIST
19381: PPUSH
19382: CALL_OW 69
19386: PUSH
19387: FOR_IN
19388: IFFALSE 19440
// if IsSelected ( i ) then
19390: LD_VAR 0 2
19394: PPUSH
19395: CALL_OW 306
19399: IFFALSE 19438
// begin for j := 1 to 4 do
19401: LD_ADDR_VAR 0 3
19405: PUSH
19406: DOUBLE
19407: LD_INT 1
19409: DEC
19410: ST_TO_ADDR
19411: LD_INT 4
19413: PUSH
19414: FOR_TO
19415: IFFALSE 19436
// SetSkill ( i , j , 10 ) ;
19417: LD_VAR 0 2
19421: PPUSH
19422: LD_VAR 0 3
19426: PPUSH
19427: LD_INT 10
19429: PPUSH
19430: CALL_OW 237
19434: GO 19414
19436: POP
19437: POP
// end ;
19438: GO 19387
19440: POP
19441: POP
// end ;
19442: LD_VAR 0 1
19446: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
19447: LD_INT 0
19449: PPUSH
19450: PPUSH
19451: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
19452: LD_ADDR_VAR 0 2
19456: PUSH
19457: LD_INT 22
19459: PUSH
19460: LD_OWVAR 2
19464: PUSH
19465: EMPTY
19466: LIST
19467: LIST
19468: PUSH
19469: LD_INT 21
19471: PUSH
19472: LD_INT 1
19474: PUSH
19475: EMPTY
19476: LIST
19477: LIST
19478: PUSH
19479: EMPTY
19480: LIST
19481: LIST
19482: PPUSH
19483: CALL_OW 69
19487: PUSH
19488: FOR_IN
19489: IFFALSE 19530
// begin for j := 1 to 4 do
19491: LD_ADDR_VAR 0 3
19495: PUSH
19496: DOUBLE
19497: LD_INT 1
19499: DEC
19500: ST_TO_ADDR
19501: LD_INT 4
19503: PUSH
19504: FOR_TO
19505: IFFALSE 19526
// SetSkill ( i , j , 10 ) ;
19507: LD_VAR 0 2
19511: PPUSH
19512: LD_VAR 0 3
19516: PPUSH
19517: LD_INT 10
19519: PPUSH
19520: CALL_OW 237
19524: GO 19504
19526: POP
19527: POP
// end ;
19528: GO 19488
19530: POP
19531: POP
// end ;
19532: LD_VAR 0 1
19536: RET
// export function hHackSpawnHuman ( nation , class , skill ) ; begin
19537: LD_INT 0
19539: PPUSH
// uc_side := your_side ;
19540: LD_ADDR_OWVAR 20
19544: PUSH
19545: LD_OWVAR 2
19549: ST_TO_ADDR
// uc_nation := nation ;
19550: LD_ADDR_OWVAR 21
19554: PUSH
19555: LD_VAR 0 1
19559: ST_TO_ADDR
// InitHc ;
19560: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
19564: LD_INT 0
19566: PPUSH
19567: LD_VAR 0 2
19571: PPUSH
19572: LD_VAR 0 3
19576: PPUSH
19577: CALL_OW 380
// PlaceUnitAnywhere ( CreateHuman , true ) ;
19581: CALL_OW 44
19585: PPUSH
19586: LD_INT 1
19588: PPUSH
19589: CALL_OW 51
// end ;
19593: LD_VAR 0 4
19597: RET
// export function hHackSpawnVehicle ; begin
19598: LD_INT 0
19600: PPUSH
// uc_side := your_side ;
19601: LD_ADDR_OWVAR 20
19605: PUSH
19606: LD_OWVAR 2
19610: ST_TO_ADDR
// uc_nation := rand ( 1 , 3 ) ;
19611: LD_ADDR_OWVAR 21
19615: PUSH
19616: LD_INT 1
19618: PPUSH
19619: LD_INT 3
19621: PPUSH
19622: CALL_OW 12
19626: ST_TO_ADDR
// InitVc ;
19627: CALL_OW 20
// case uc_nation of 1 :
19631: LD_OWVAR 21
19635: PUSH
19636: LD_INT 1
19638: DOUBLE
19639: EQUAL
19640: IFTRUE 19644
19642: GO 19788
19644: POP
// begin vc_chassis := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] [ rand ( 1 , 5 ) ] ;
19645: LD_ADDR_OWVAR 37
19649: PUSH
19650: LD_INT 1
19652: PUSH
19653: LD_INT 2
19655: PUSH
19656: LD_INT 3
19658: PUSH
19659: LD_INT 4
19661: PUSH
19662: LD_INT 5
19664: PUSH
19665: EMPTY
19666: LIST
19667: LIST
19668: LIST
19669: LIST
19670: LIST
19671: PUSH
19672: LD_INT 1
19674: PPUSH
19675: LD_INT 5
19677: PPUSH
19678: CALL_OW 12
19682: ARRAY
19683: ST_TO_ADDR
// vc_engine := rand ( 1 , 3 ) ;
19684: LD_ADDR_OWVAR 39
19688: PUSH
19689: LD_INT 1
19691: PPUSH
19692: LD_INT 3
19694: PPUSH
19695: CALL_OW 12
19699: ST_TO_ADDR
// vc_control := [ control_manual , control_remote , control_computer ] [ rand ( 1 , 3 ) ] ;
19700: LD_ADDR_OWVAR 38
19704: PUSH
19705: LD_INT 1
19707: PUSH
19708: LD_INT 2
19710: PUSH
19711: LD_INT 3
19713: PUSH
19714: EMPTY
19715: LIST
19716: LIST
19717: LIST
19718: PUSH
19719: LD_INT 1
19721: PPUSH
19722: LD_INT 3
19724: PPUSH
19725: CALL_OW 12
19729: ARRAY
19730: ST_TO_ADDR
// vc_weapon := [ us_machine_gun , us_gatling_gun , us_double_gun , us_light_gun , us_rocket_launcher , us_siberium_rocket , us_laser , us_double_laser , us_heavy_gun ] [ rand ( 1 , 9 ) ] ;
19731: LD_ADDR_OWVAR 40
19735: PUSH
19736: LD_INT 2
19738: PUSH
19739: LD_INT 4
19741: PUSH
19742: LD_INT 5
19744: PUSH
19745: LD_INT 3
19747: PUSH
19748: LD_INT 7
19750: PUSH
19751: LD_INT 8
19753: PUSH
19754: LD_INT 9
19756: PUSH
19757: LD_INT 10
19759: PUSH
19760: LD_INT 6
19762: PUSH
19763: EMPTY
19764: LIST
19765: LIST
19766: LIST
19767: LIST
19768: LIST
19769: LIST
19770: LIST
19771: LIST
19772: LIST
19773: PUSH
19774: LD_INT 1
19776: PPUSH
19777: LD_INT 9
19779: PPUSH
19780: CALL_OW 12
19784: ARRAY
19785: ST_TO_ADDR
// end ; 2 :
19786: GO 20053
19788: LD_INT 2
19790: DOUBLE
19791: EQUAL
19792: IFTRUE 19796
19794: GO 19920
19796: POP
// begin vc_chassis := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] [ rand ( 1 , 4 ) ] ;
19797: LD_ADDR_OWVAR 37
19801: PUSH
19802: LD_INT 11
19804: PUSH
19805: LD_INT 12
19807: PUSH
19808: LD_INT 13
19810: PUSH
19811: LD_INT 14
19813: PUSH
19814: EMPTY
19815: LIST
19816: LIST
19817: LIST
19818: LIST
19819: PUSH
19820: LD_INT 1
19822: PPUSH
19823: LD_INT 4
19825: PPUSH
19826: CALL_OW 12
19830: ARRAY
19831: ST_TO_ADDR
// vc_engine := rand ( 1 , 3 ) ;
19832: LD_ADDR_OWVAR 39
19836: PUSH
19837: LD_INT 1
19839: PPUSH
19840: LD_INT 3
19842: PPUSH
19843: CALL_OW 12
19847: ST_TO_ADDR
// vc_control := [ control_manual , control_remote , control_apeman ] [ rand ( 1 , 3 ) ] ;
19848: LD_ADDR_OWVAR 38
19852: PUSH
19853: LD_INT 1
19855: PUSH
19856: LD_INT 2
19858: PUSH
19859: LD_INT 5
19861: PUSH
19862: EMPTY
19863: LIST
19864: LIST
19865: LIST
19866: PUSH
19867: LD_INT 1
19869: PPUSH
19870: LD_INT 3
19872: PPUSH
19873: CALL_OW 12
19877: ARRAY
19878: ST_TO_ADDR
// vc_weapon := [ ar_double_machine_gun , ar_flame_thrower , ar_gun , ar_rocket_launcher , ar_selfpropelled_bomb ] [ rand ( 1 , 5 ) ] ;
19879: LD_ADDR_OWVAR 40
19883: PUSH
19884: LD_INT 24
19886: PUSH
19887: LD_INT 26
19889: PUSH
19890: LD_INT 27
19892: PUSH
19893: LD_INT 28
19895: PUSH
19896: LD_INT 29
19898: PUSH
19899: EMPTY
19900: LIST
19901: LIST
19902: LIST
19903: LIST
19904: LIST
19905: PUSH
19906: LD_INT 1
19908: PPUSH
19909: LD_INT 5
19911: PPUSH
19912: CALL_OW 12
19916: ARRAY
19917: ST_TO_ADDR
// end ; 3 :
19918: GO 20053
19920: LD_INT 3
19922: DOUBLE
19923: EQUAL
19924: IFTRUE 19928
19926: GO 20052
19928: POP
// begin vc_chassis := [ ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] [ rand ( 1 , 4 ) ] ;
19929: LD_ADDR_OWVAR 37
19933: PUSH
19934: LD_INT 21
19936: PUSH
19937: LD_INT 23
19939: PUSH
19940: LD_INT 22
19942: PUSH
19943: LD_INT 24
19945: PUSH
19946: EMPTY
19947: LIST
19948: LIST
19949: LIST
19950: LIST
19951: PUSH
19952: LD_INT 1
19954: PPUSH
19955: LD_INT 4
19957: PPUSH
19958: CALL_OW 12
19962: ARRAY
19963: ST_TO_ADDR
// vc_engine := rand ( 1 , 3 ) ;
19964: LD_ADDR_OWVAR 39
19968: PUSH
19969: LD_INT 1
19971: PPUSH
19972: LD_INT 3
19974: PPUSH
19975: CALL_OW 12
19979: ST_TO_ADDR
// vc_control := [ control_manual , control_computer ] [ rand ( 1 , 2 ) ] ;
19980: LD_ADDR_OWVAR 38
19984: PUSH
19985: LD_INT 1
19987: PUSH
19988: LD_INT 3
19990: PUSH
19991: EMPTY
19992: LIST
19993: LIST
19994: PUSH
19995: LD_INT 1
19997: PPUSH
19998: LD_INT 2
20000: PPUSH
20001: CALL_OW 12
20005: ARRAY
20006: ST_TO_ADDR
// vc_weapon := [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun , ru_heavy_gun , ru_siberium_rocket , ru_rocket ] [ rand ( 1 , 6 ) ] ;
20007: LD_ADDR_OWVAR 40
20011: PUSH
20012: LD_INT 42
20014: PUSH
20015: LD_INT 43
20017: PUSH
20018: LD_INT 44
20020: PUSH
20021: LD_INT 46
20023: PUSH
20024: LD_INT 48
20026: PUSH
20027: LD_INT 47
20029: PUSH
20030: EMPTY
20031: LIST
20032: LIST
20033: LIST
20034: LIST
20035: LIST
20036: LIST
20037: PUSH
20038: LD_INT 1
20040: PPUSH
20041: LD_INT 6
20043: PPUSH
20044: CALL_OW 12
20048: ARRAY
20049: ST_TO_ADDR
// end ; end ;
20050: GO 20053
20052: POP
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
20053: CALL_OW 45
20057: PPUSH
20058: LD_INT 1
20060: PPUSH
20061: CALL_OW 51
// end ;
20065: LD_VAR 0 1
20069: RET
// export hInvincible ; every 1 do
20070: GO 20072
20072: DISABLE
// hInvincible := [ ] ;
20073: LD_ADDR_EXP 98
20077: PUSH
20078: EMPTY
20079: ST_TO_ADDR
20080: END
// every 10 do var i ;
20081: GO 20083
20083: DISABLE
20084: LD_INT 0
20086: PPUSH
// begin enable ;
20087: ENABLE
// if not hInvincible then
20088: LD_EXP 98
20092: NOT
20093: IFFALSE 20097
// exit ;
20095: GO 20141
// for i in hInvincible do
20097: LD_ADDR_VAR 0 1
20101: PUSH
20102: LD_EXP 98
20106: PUSH
20107: FOR_IN
20108: IFFALSE 20139
// if GetLives ( i ) < 1000 then
20110: LD_VAR 0 1
20114: PPUSH
20115: CALL_OW 256
20119: PUSH
20120: LD_INT 1000
20122: LESS
20123: IFFALSE 20137
// SetLives ( i , 1000 ) ;
20125: LD_VAR 0 1
20129: PPUSH
20130: LD_INT 1000
20132: PPUSH
20133: CALL_OW 234
20137: GO 20107
20139: POP
20140: POP
// end ;
20141: PPOPN 1
20143: END
// export function hHackInvincible ; var i ; begin
20144: LD_INT 0
20146: PPUSH
20147: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
20148: LD_ADDR_VAR 0 2
20152: PUSH
20153: LD_INT 2
20155: PUSH
20156: LD_INT 21
20158: PUSH
20159: LD_INT 1
20161: PUSH
20162: EMPTY
20163: LIST
20164: LIST
20165: PUSH
20166: LD_INT 21
20168: PUSH
20169: LD_INT 2
20171: PUSH
20172: EMPTY
20173: LIST
20174: LIST
20175: PUSH
20176: EMPTY
20177: LIST
20178: LIST
20179: LIST
20180: PPUSH
20181: CALL_OW 69
20185: PUSH
20186: FOR_IN
20187: IFFALSE 20248
// if IsSelected ( i ) then
20189: LD_VAR 0 2
20193: PPUSH
20194: CALL_OW 306
20198: IFFALSE 20246
// begin if i in hInvincible then
20200: LD_VAR 0 2
20204: PUSH
20205: LD_EXP 98
20209: IN
20210: IFFALSE 20230
// hInvincible := hInvincible diff i else
20212: LD_ADDR_EXP 98
20216: PUSH
20217: LD_EXP 98
20221: PUSH
20222: LD_VAR 0 2
20226: DIFF
20227: ST_TO_ADDR
20228: GO 20246
// hInvincible := hInvincible union i ;
20230: LD_ADDR_EXP 98
20234: PUSH
20235: LD_EXP 98
20239: PUSH
20240: LD_VAR 0 2
20244: UNION
20245: ST_TO_ADDR
// end ;
20246: GO 20186
20248: POP
20249: POP
// end ;
20250: LD_VAR 0 1
20254: RET
// export function hHackInvisible ; var i , j ; begin
20255: LD_INT 0
20257: PPUSH
20258: PPUSH
20259: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
20260: LD_ADDR_VAR 0 2
20264: PUSH
20265: LD_INT 21
20267: PUSH
20268: LD_INT 1
20270: PUSH
20271: EMPTY
20272: LIST
20273: LIST
20274: PPUSH
20275: CALL_OW 69
20279: PUSH
20280: FOR_IN
20281: IFFALSE 20305
// if IsSelected ( i ) then
20283: LD_VAR 0 2
20287: PPUSH
20288: CALL_OW 306
20292: IFFALSE 20303
// ComForceInvisible ( i ) ;
20294: LD_VAR 0 2
20298: PPUSH
20299: CALL_OW 496
20303: GO 20280
20305: POP
20306: POP
// end ;
20307: LD_VAR 0 1
20311: RET
// export function hHackChangeYourSide ; begin
20312: LD_INT 0
20314: PPUSH
// if your_side = 8 then
20315: LD_OWVAR 2
20319: PUSH
20320: LD_INT 8
20322: EQUAL
20323: IFFALSE 20335
// your_side := 0 else
20325: LD_ADDR_OWVAR 2
20329: PUSH
20330: LD_INT 0
20332: ST_TO_ADDR
20333: GO 20349
// your_side := your_side + 1 ;
20335: LD_ADDR_OWVAR 2
20339: PUSH
20340: LD_OWVAR 2
20344: PUSH
20345: LD_INT 1
20347: PLUS
20348: ST_TO_ADDR
// end ;
20349: LD_VAR 0 1
20353: RET
// export function hHackChangeUnitSide ; var i , j ; begin
20354: LD_INT 0
20356: PPUSH
20357: PPUSH
20358: PPUSH
// for i in all_units do
20359: LD_ADDR_VAR 0 2
20363: PUSH
20364: LD_OWVAR 3
20368: PUSH
20369: FOR_IN
20370: IFFALSE 20448
// if IsSelected ( i ) then
20372: LD_VAR 0 2
20376: PPUSH
20377: CALL_OW 306
20381: IFFALSE 20446
// begin j := GetSide ( i ) ;
20383: LD_ADDR_VAR 0 3
20387: PUSH
20388: LD_VAR 0 2
20392: PPUSH
20393: CALL_OW 255
20397: ST_TO_ADDR
// if j = 8 then
20398: LD_VAR 0 3
20402: PUSH
20403: LD_INT 8
20405: EQUAL
20406: IFFALSE 20418
// j := 0 else
20408: LD_ADDR_VAR 0 3
20412: PUSH
20413: LD_INT 0
20415: ST_TO_ADDR
20416: GO 20432
// j := j + 1 ;
20418: LD_ADDR_VAR 0 3
20422: PUSH
20423: LD_VAR 0 3
20427: PUSH
20428: LD_INT 1
20430: PLUS
20431: ST_TO_ADDR
// SetSide ( i , j ) ;
20432: LD_VAR 0 2
20436: PPUSH
20437: LD_VAR 0 3
20441: PPUSH
20442: CALL_OW 235
// end ;
20446: GO 20369
20448: POP
20449: POP
// end ;
20450: LD_VAR 0 1
20454: RET
// export function hHackFog ; begin
20455: LD_INT 0
20457: PPUSH
// FogOff ( true ) ;
20458: LD_INT 1
20460: PPUSH
20461: CALL_OW 344
// end ;
20465: LD_VAR 0 1
20469: RET
// export function hHackApeman ; begin
20470: LD_INT 0
20472: PPUSH
// uc_side := your_side ;
20473: LD_ADDR_OWVAR 20
20477: PUSH
20478: LD_OWVAR 2
20482: ST_TO_ADDR
// uc_nation := 0 ;
20483: LD_ADDR_OWVAR 21
20487: PUSH
20488: LD_INT 0
20490: ST_TO_ADDR
// hc_name :=  ;
20491: LD_ADDR_OWVAR 26
20495: PUSH
20496: LD_STRING 
20498: ST_TO_ADDR
// hc_gallery :=  ;
20499: LD_ADDR_OWVAR 33
20503: PUSH
20504: LD_STRING 
20506: ST_TO_ADDR
// hc_skills := [ 0 , 0 , 0 , 0 ] ;
20507: LD_ADDR_OWVAR 31
20511: PUSH
20512: LD_INT 0
20514: PUSH
20515: LD_INT 0
20517: PUSH
20518: LD_INT 0
20520: PUSH
20521: LD_INT 0
20523: PUSH
20524: EMPTY
20525: LIST
20526: LIST
20527: LIST
20528: LIST
20529: ST_TO_ADDR
// hc_class := class_apeman ;
20530: LD_ADDR_OWVAR 28
20534: PUSH
20535: LD_INT 12
20537: ST_TO_ADDR
// PlaceUnitAnywhere ( CreateHuman , true ) ;
20538: CALL_OW 44
20542: PPUSH
20543: LD_INT 1
20545: PPUSH
20546: CALL_OW 51
// end ;
20550: LD_VAR 0 1
20554: RET
// export function hHackBoom ; begin
20555: LD_INT 0
20557: PPUSH
// uc_side := your_side ;
20558: LD_ADDR_OWVAR 20
20562: PUSH
20563: LD_OWVAR 2
20567: ST_TO_ADDR
// uc_nation := 1 ;
20568: LD_ADDR_OWVAR 21
20572: PUSH
20573: LD_INT 1
20575: ST_TO_ADDR
// vc_chassis := us_morphling ;
20576: LD_ADDR_OWVAR 37
20580: PUSH
20581: LD_INT 5
20583: ST_TO_ADDR
// vc_engine := engine_siberite ;
20584: LD_ADDR_OWVAR 39
20588: PUSH
20589: LD_INT 3
20591: ST_TO_ADDR
// vc_control := control_computer ;
20592: LD_ADDR_OWVAR 38
20596: PUSH
20597: LD_INT 3
20599: ST_TO_ADDR
// vc_weapon := us_siberium_rocket ;
20600: LD_ADDR_OWVAR 40
20604: PUSH
20605: LD_INT 8
20607: ST_TO_ADDR
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
20608: CALL_OW 45
20612: PPUSH
20613: LD_INT 1
20615: PPUSH
20616: CALL_OW 51
// end ; end_of_file
20620: LD_VAR 0 1
20624: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
20625: LD_INT 0
20627: PPUSH
20628: PPUSH
20629: PPUSH
20630: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
20631: LD_VAR 0 1
20635: PPUSH
20636: CALL_OW 264
20640: PUSH
20641: LD_EXP 33
20645: EQUAL
20646: IFFALSE 20718
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
20648: LD_INT 68
20650: PPUSH
20651: LD_VAR 0 1
20655: PPUSH
20656: CALL_OW 255
20660: PPUSH
20661: CALL_OW 321
20665: PUSH
20666: LD_INT 2
20668: EQUAL
20669: IFFALSE 20681
// eff := 70 else
20671: LD_ADDR_VAR 0 4
20675: PUSH
20676: LD_INT 70
20678: ST_TO_ADDR
20679: GO 20689
// eff := 30 ;
20681: LD_ADDR_VAR 0 4
20685: PUSH
20686: LD_INT 30
20688: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
20689: LD_VAR 0 1
20693: PPUSH
20694: CALL_OW 250
20698: PPUSH
20699: LD_VAR 0 1
20703: PPUSH
20704: CALL_OW 251
20708: PPUSH
20709: LD_VAR 0 4
20713: PPUSH
20714: CALL_OW 495
// end ; end ;
20718: LD_VAR 0 2
20722: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
20723: LD_INT 0
20725: PPUSH
// end ;
20726: LD_VAR 0 4
20730: RET
// export function SOS_Command ( cmd ) ; begin
20731: LD_INT 0
20733: PPUSH
// end ;
20734: LD_VAR 0 2
20738: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y ) do begin if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
20739: LD_VAR 0 1
20743: PUSH
20744: LD_INT 254
20746: EQUAL
20747: PUSH
20748: LD_VAR 0 2
20752: PPUSH
20753: CALL_OW 264
20757: PUSH
20758: LD_EXP 31
20762: EQUAL
20763: AND
20764: PUSH
20765: LD_VAR 0 3
20769: PPUSH
20770: CALL_OW 263
20774: PUSH
20775: LD_INT 3
20777: EQUAL
20778: AND
20779: IFFALSE 20795
// HackDestroyVehicle ( unit , selectedUnit ) ;
20781: LD_VAR 0 2
20785: PPUSH
20786: LD_VAR 0 3
20790: PPUSH
20791: CALL 22302 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
20795: LD_VAR 0 1
20799: PUSH
20800: LD_INT 255
20802: EQUAL
20803: PUSH
20804: LD_VAR 0 2
20808: PPUSH
20809: CALL_OW 264
20813: PUSH
20814: LD_INT 14
20816: PUSH
20817: LD_INT 53
20819: PUSH
20820: EMPTY
20821: LIST
20822: LIST
20823: IN
20824: AND
20825: PUSH
20826: LD_VAR 0 4
20830: PPUSH
20831: LD_VAR 0 5
20835: PPUSH
20836: CALL_OW 488
20840: AND
20841: IFFALSE 20865
// CutTreeXYR ( unit , x , y , 12 ) ;
20843: LD_VAR 0 2
20847: PPUSH
20848: LD_VAR 0 4
20852: PPUSH
20853: LD_VAR 0 5
20857: PPUSH
20858: LD_INT 12
20860: PPUSH
20861: CALL 20868 0 4
// end ;
20865: PPOPN 5
20867: END
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
20868: LD_INT 0
20870: PPUSH
20871: PPUSH
20872: PPUSH
20873: PPUSH
20874: PPUSH
20875: PPUSH
20876: PPUSH
20877: PPUSH
20878: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
20879: LD_VAR 0 1
20883: NOT
20884: PUSH
20885: LD_VAR 0 2
20889: PPUSH
20890: LD_VAR 0 3
20894: PPUSH
20895: CALL_OW 488
20899: NOT
20900: OR
20901: PUSH
20902: LD_VAR 0 4
20906: NOT
20907: OR
20908: IFFALSE 20912
// exit ;
20910: GO 21252
// list := [ ] ;
20912: LD_ADDR_VAR 0 13
20916: PUSH
20917: EMPTY
20918: ST_TO_ADDR
// if x - r < 0 then
20919: LD_VAR 0 2
20923: PUSH
20924: LD_VAR 0 4
20928: MINUS
20929: PUSH
20930: LD_INT 0
20932: LESS
20933: IFFALSE 20945
// min_x := 0 else
20935: LD_ADDR_VAR 0 7
20939: PUSH
20940: LD_INT 0
20942: ST_TO_ADDR
20943: GO 20961
// min_x := x - r ;
20945: LD_ADDR_VAR 0 7
20949: PUSH
20950: LD_VAR 0 2
20954: PUSH
20955: LD_VAR 0 4
20959: MINUS
20960: ST_TO_ADDR
// if y - r < 0 then
20961: LD_VAR 0 3
20965: PUSH
20966: LD_VAR 0 4
20970: MINUS
20971: PUSH
20972: LD_INT 0
20974: LESS
20975: IFFALSE 20987
// min_y := 0 else
20977: LD_ADDR_VAR 0 8
20981: PUSH
20982: LD_INT 0
20984: ST_TO_ADDR
20985: GO 21003
// min_y := y - r ;
20987: LD_ADDR_VAR 0 8
20991: PUSH
20992: LD_VAR 0 3
20996: PUSH
20997: LD_VAR 0 4
21001: MINUS
21002: ST_TO_ADDR
// max_x := x + r ;
21003: LD_ADDR_VAR 0 9
21007: PUSH
21008: LD_VAR 0 2
21012: PUSH
21013: LD_VAR 0 4
21017: PLUS
21018: ST_TO_ADDR
// max_y := y + r ;
21019: LD_ADDR_VAR 0 10
21023: PUSH
21024: LD_VAR 0 3
21028: PUSH
21029: LD_VAR 0 4
21033: PLUS
21034: ST_TO_ADDR
// for _x = min_x to max_x do
21035: LD_ADDR_VAR 0 11
21039: PUSH
21040: DOUBLE
21041: LD_VAR 0 7
21045: DEC
21046: ST_TO_ADDR
21047: LD_VAR 0 9
21051: PUSH
21052: FOR_TO
21053: IFFALSE 21170
// for _y = min_y to max_y do
21055: LD_ADDR_VAR 0 12
21059: PUSH
21060: DOUBLE
21061: LD_VAR 0 8
21065: DEC
21066: ST_TO_ADDR
21067: LD_VAR 0 10
21071: PUSH
21072: FOR_TO
21073: IFFALSE 21166
// begin if not ValidHex ( _x , _y ) then
21075: LD_VAR 0 11
21079: PPUSH
21080: LD_VAR 0 12
21084: PPUSH
21085: CALL_OW 488
21089: NOT
21090: IFFALSE 21094
// continue ;
21092: GO 21072
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
21094: LD_VAR 0 11
21098: PPUSH
21099: LD_VAR 0 12
21103: PPUSH
21104: CALL_OW 351
21108: PUSH
21109: LD_VAR 0 11
21113: PPUSH
21114: LD_VAR 0 12
21118: PPUSH
21119: CALL_OW 554
21123: AND
21124: IFFALSE 21164
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
21126: LD_ADDR_VAR 0 13
21130: PUSH
21131: LD_VAR 0 13
21135: PPUSH
21136: LD_VAR 0 13
21140: PUSH
21141: LD_INT 1
21143: PLUS
21144: PPUSH
21145: LD_VAR 0 11
21149: PUSH
21150: LD_VAR 0 12
21154: PUSH
21155: EMPTY
21156: LIST
21157: LIST
21158: PPUSH
21159: CALL_OW 2
21163: ST_TO_ADDR
// end ;
21164: GO 21072
21166: POP
21167: POP
21168: GO 21052
21170: POP
21171: POP
// if not list then
21172: LD_VAR 0 13
21176: NOT
21177: IFFALSE 21181
// exit ;
21179: GO 21252
// for i in list do
21181: LD_ADDR_VAR 0 6
21185: PUSH
21186: LD_VAR 0 13
21190: PUSH
21191: FOR_IN
21192: IFFALSE 21250
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
21194: LD_VAR 0 1
21198: PPUSH
21199: LD_STRING M
21201: PUSH
21202: LD_VAR 0 6
21206: PUSH
21207: LD_INT 1
21209: ARRAY
21210: PUSH
21211: LD_VAR 0 6
21215: PUSH
21216: LD_INT 2
21218: ARRAY
21219: PUSH
21220: LD_INT 0
21222: PUSH
21223: LD_INT 0
21225: PUSH
21226: LD_INT 0
21228: PUSH
21229: LD_INT 0
21231: PUSH
21232: EMPTY
21233: LIST
21234: LIST
21235: LIST
21236: LIST
21237: LIST
21238: LIST
21239: LIST
21240: PUSH
21241: EMPTY
21242: LIST
21243: PPUSH
21244: CALL_OW 447
21248: GO 21191
21250: POP
21251: POP
// end ;
21252: LD_VAR 0 5
21256: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
21257: LD_EXP 99
21261: NOT
21262: IFFALSE 21312
21264: GO 21266
21266: DISABLE
// begin initHack := true ;
21267: LD_ADDR_EXP 99
21271: PUSH
21272: LD_INT 1
21274: ST_TO_ADDR
// hackTanks := [ ] ;
21275: LD_ADDR_EXP 100
21279: PUSH
21280: EMPTY
21281: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
21282: LD_ADDR_EXP 101
21286: PUSH
21287: EMPTY
21288: ST_TO_ADDR
// hackLimit := 3 ;
21289: LD_ADDR_EXP 102
21293: PUSH
21294: LD_INT 3
21296: ST_TO_ADDR
// hackDist := 12 ;
21297: LD_ADDR_EXP 103
21301: PUSH
21302: LD_INT 12
21304: ST_TO_ADDR
// hackCounter := [ ] ;
21305: LD_ADDR_EXP 104
21309: PUSH
21310: EMPTY
21311: ST_TO_ADDR
// end ;
21312: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
21313: LD_EXP 99
21317: PUSH
21318: LD_INT 34
21320: PUSH
21321: LD_EXP 31
21325: PUSH
21326: EMPTY
21327: LIST
21328: LIST
21329: PPUSH
21330: CALL_OW 69
21334: AND
21335: IFFALSE 21590
21337: GO 21339
21339: DISABLE
21340: LD_INT 0
21342: PPUSH
21343: PPUSH
// begin enable ;
21344: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
21345: LD_ADDR_VAR 0 1
21349: PUSH
21350: LD_INT 34
21352: PUSH
21353: LD_EXP 31
21357: PUSH
21358: EMPTY
21359: LIST
21360: LIST
21361: PPUSH
21362: CALL_OW 69
21366: PUSH
21367: FOR_IN
21368: IFFALSE 21588
// begin if not i in hackTanks then
21370: LD_VAR 0 1
21374: PUSH
21375: LD_EXP 100
21379: IN
21380: NOT
21381: IFFALSE 21464
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
21383: LD_ADDR_EXP 100
21387: PUSH
21388: LD_EXP 100
21392: PPUSH
21393: LD_EXP 100
21397: PUSH
21398: LD_INT 1
21400: PLUS
21401: PPUSH
21402: LD_VAR 0 1
21406: PPUSH
21407: CALL_OW 1
21411: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
21412: LD_ADDR_EXP 101
21416: PUSH
21417: LD_EXP 101
21421: PPUSH
21422: LD_EXP 101
21426: PUSH
21427: LD_INT 1
21429: PLUS
21430: PPUSH
21431: EMPTY
21432: PPUSH
21433: CALL_OW 1
21437: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
21438: LD_ADDR_EXP 104
21442: PUSH
21443: LD_EXP 104
21447: PPUSH
21448: LD_EXP 104
21452: PUSH
21453: LD_INT 1
21455: PLUS
21456: PPUSH
21457: EMPTY
21458: PPUSH
21459: CALL_OW 1
21463: ST_TO_ADDR
// end ; if not IsOk ( i ) then
21464: LD_VAR 0 1
21468: PPUSH
21469: CALL_OW 302
21473: NOT
21474: IFFALSE 21487
// begin HackUnlinkAll ( i ) ;
21476: LD_VAR 0 1
21480: PPUSH
21481: CALL 21593 0 1
// continue ;
21485: GO 21367
// end ; HackCheckCapturedStatus ( i ) ;
21487: LD_VAR 0 1
21491: PPUSH
21492: CALL 22036 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
21496: LD_ADDR_VAR 0 2
21500: PUSH
21501: LD_INT 81
21503: PUSH
21504: LD_VAR 0 1
21508: PPUSH
21509: CALL_OW 255
21513: PUSH
21514: EMPTY
21515: LIST
21516: LIST
21517: PUSH
21518: LD_INT 33
21520: PUSH
21521: LD_INT 3
21523: PUSH
21524: EMPTY
21525: LIST
21526: LIST
21527: PUSH
21528: LD_INT 91
21530: PUSH
21531: LD_VAR 0 1
21535: PUSH
21536: LD_EXP 103
21540: PUSH
21541: EMPTY
21542: LIST
21543: LIST
21544: LIST
21545: PUSH
21546: LD_INT 50
21548: PUSH
21549: EMPTY
21550: LIST
21551: PUSH
21552: EMPTY
21553: LIST
21554: LIST
21555: LIST
21556: LIST
21557: PPUSH
21558: CALL_OW 69
21562: ST_TO_ADDR
// if not tmp then
21563: LD_VAR 0 2
21567: NOT
21568: IFFALSE 21572
// continue ;
21570: GO 21367
// HackLink ( i , tmp ) ;
21572: LD_VAR 0 1
21576: PPUSH
21577: LD_VAR 0 2
21581: PPUSH
21582: CALL 21729 0 2
// end ;
21586: GO 21367
21588: POP
21589: POP
// end ;
21590: PPOPN 2
21592: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
21593: LD_INT 0
21595: PPUSH
21596: PPUSH
21597: PPUSH
// if not hack in hackTanks then
21598: LD_VAR 0 1
21602: PUSH
21603: LD_EXP 100
21607: IN
21608: NOT
21609: IFFALSE 21613
// exit ;
21611: GO 21724
// index := GetElementIndex ( hackTanks , hack ) ;
21613: LD_ADDR_VAR 0 4
21617: PUSH
21618: LD_EXP 100
21622: PPUSH
21623: LD_VAR 0 1
21627: PPUSH
21628: CALL 27144 0 2
21632: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
21633: LD_EXP 101
21637: PUSH
21638: LD_VAR 0 4
21642: ARRAY
21643: IFFALSE 21724
// begin for i in hackTanksCaptured [ index ] do
21645: LD_ADDR_VAR 0 3
21649: PUSH
21650: LD_EXP 101
21654: PUSH
21655: LD_VAR 0 4
21659: ARRAY
21660: PUSH
21661: FOR_IN
21662: IFFALSE 21688
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
21664: LD_VAR 0 3
21668: PUSH
21669: LD_INT 1
21671: ARRAY
21672: PPUSH
21673: LD_VAR 0 3
21677: PUSH
21678: LD_INT 2
21680: ARRAY
21681: PPUSH
21682: CALL_OW 235
21686: GO 21661
21688: POP
21689: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
21690: LD_ADDR_EXP 101
21694: PUSH
21695: LD_EXP 101
21699: PPUSH
21700: LD_VAR 0 4
21704: PPUSH
21705: EMPTY
21706: PPUSH
21707: CALL_OW 1
21711: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
21712: LD_VAR 0 1
21716: PPUSH
21717: LD_INT 0
21719: PPUSH
21720: CALL_OW 505
// end ; end ;
21724: LD_VAR 0 2
21728: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
21729: LD_INT 0
21731: PPUSH
21732: PPUSH
21733: PPUSH
// if not hack in hackTanks or not vehicles then
21734: LD_VAR 0 1
21738: PUSH
21739: LD_EXP 100
21743: IN
21744: NOT
21745: PUSH
21746: LD_VAR 0 2
21750: NOT
21751: OR
21752: IFFALSE 21756
// exit ;
21754: GO 22031
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
21756: LD_ADDR_VAR 0 2
21760: PUSH
21761: LD_VAR 0 1
21765: PPUSH
21766: LD_VAR 0 2
21770: PPUSH
21771: LD_INT 1
21773: PPUSH
21774: LD_INT 1
21776: PPUSH
21777: CALL 27794 0 4
21781: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
21782: LD_ADDR_VAR 0 5
21786: PUSH
21787: LD_EXP 100
21791: PPUSH
21792: LD_VAR 0 1
21796: PPUSH
21797: CALL 27144 0 2
21801: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
21802: LD_EXP 101
21806: PUSH
21807: LD_VAR 0 5
21811: ARRAY
21812: PUSH
21813: LD_EXP 102
21817: LESS
21818: IFFALSE 22007
// begin for i := 1 to vehicles do
21820: LD_ADDR_VAR 0 4
21824: PUSH
21825: DOUBLE
21826: LD_INT 1
21828: DEC
21829: ST_TO_ADDR
21830: LD_VAR 0 2
21834: PUSH
21835: FOR_TO
21836: IFFALSE 22005
// begin if hackTanksCaptured [ index ] = hackLimit then
21838: LD_EXP 101
21842: PUSH
21843: LD_VAR 0 5
21847: ARRAY
21848: PUSH
21849: LD_EXP 102
21853: EQUAL
21854: IFFALSE 21858
// break ;
21856: GO 22005
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
21858: LD_ADDR_EXP 104
21862: PUSH
21863: LD_EXP 104
21867: PPUSH
21868: LD_VAR 0 5
21872: PPUSH
21873: LD_EXP 104
21877: PUSH
21878: LD_VAR 0 5
21882: ARRAY
21883: PUSH
21884: LD_INT 1
21886: PLUS
21887: PPUSH
21888: CALL_OW 1
21892: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
21893: LD_ADDR_EXP 101
21897: PUSH
21898: LD_EXP 101
21902: PPUSH
21903: LD_VAR 0 5
21907: PUSH
21908: LD_EXP 101
21912: PUSH
21913: LD_VAR 0 5
21917: ARRAY
21918: PUSH
21919: LD_INT 1
21921: PLUS
21922: PUSH
21923: EMPTY
21924: LIST
21925: LIST
21926: PPUSH
21927: LD_VAR 0 2
21931: PUSH
21932: LD_VAR 0 4
21936: ARRAY
21937: PUSH
21938: LD_VAR 0 2
21942: PUSH
21943: LD_VAR 0 4
21947: ARRAY
21948: PPUSH
21949: CALL_OW 255
21953: PUSH
21954: EMPTY
21955: LIST
21956: LIST
21957: PPUSH
21958: CALL 27359 0 3
21962: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
21963: LD_VAR 0 2
21967: PUSH
21968: LD_VAR 0 4
21972: ARRAY
21973: PPUSH
21974: LD_VAR 0 1
21978: PPUSH
21979: CALL_OW 255
21983: PPUSH
21984: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
21988: LD_VAR 0 2
21992: PUSH
21993: LD_VAR 0 4
21997: ARRAY
21998: PPUSH
21999: CALL_OW 141
// end ;
22003: GO 21835
22005: POP
22006: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
22007: LD_VAR 0 1
22011: PPUSH
22012: LD_EXP 101
22016: PUSH
22017: LD_VAR 0 5
22021: ARRAY
22022: PUSH
22023: LD_INT 0
22025: PLUS
22026: PPUSH
22027: CALL_OW 505
// end ;
22031: LD_VAR 0 3
22035: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
22036: LD_INT 0
22038: PPUSH
22039: PPUSH
22040: PPUSH
22041: PPUSH
// if not hack in hackTanks then
22042: LD_VAR 0 1
22046: PUSH
22047: LD_EXP 100
22051: IN
22052: NOT
22053: IFFALSE 22057
// exit ;
22055: GO 22297
// index := GetElementIndex ( hackTanks , hack ) ;
22057: LD_ADDR_VAR 0 4
22061: PUSH
22062: LD_EXP 100
22066: PPUSH
22067: LD_VAR 0 1
22071: PPUSH
22072: CALL 27144 0 2
22076: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
22077: LD_ADDR_VAR 0 3
22081: PUSH
22082: DOUBLE
22083: LD_EXP 101
22087: PUSH
22088: LD_VAR 0 4
22092: ARRAY
22093: INC
22094: ST_TO_ADDR
22095: LD_INT 1
22097: PUSH
22098: FOR_DOWNTO
22099: IFFALSE 22271
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
22101: LD_ADDR_VAR 0 5
22105: PUSH
22106: LD_EXP 101
22110: PUSH
22111: LD_VAR 0 4
22115: ARRAY
22116: PUSH
22117: LD_VAR 0 3
22121: ARRAY
22122: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
22123: LD_VAR 0 5
22127: PUSH
22128: LD_INT 1
22130: ARRAY
22131: PPUSH
22132: CALL_OW 302
22136: NOT
22137: PUSH
22138: LD_VAR 0 5
22142: PUSH
22143: LD_INT 1
22145: ARRAY
22146: PPUSH
22147: CALL_OW 255
22151: PUSH
22152: LD_VAR 0 1
22156: PPUSH
22157: CALL_OW 255
22161: NONEQUAL
22162: OR
22163: IFFALSE 22269
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
22165: LD_VAR 0 5
22169: PUSH
22170: LD_INT 1
22172: ARRAY
22173: PPUSH
22174: CALL_OW 305
22178: PUSH
22179: LD_VAR 0 5
22183: PUSH
22184: LD_INT 1
22186: ARRAY
22187: PPUSH
22188: CALL_OW 255
22192: PUSH
22193: LD_VAR 0 1
22197: PPUSH
22198: CALL_OW 255
22202: EQUAL
22203: AND
22204: IFFALSE 22228
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
22206: LD_VAR 0 5
22210: PUSH
22211: LD_INT 1
22213: ARRAY
22214: PPUSH
22215: LD_VAR 0 5
22219: PUSH
22220: LD_INT 2
22222: ARRAY
22223: PPUSH
22224: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
22228: LD_ADDR_EXP 101
22232: PUSH
22233: LD_EXP 101
22237: PPUSH
22238: LD_VAR 0 4
22242: PPUSH
22243: LD_EXP 101
22247: PUSH
22248: LD_VAR 0 4
22252: ARRAY
22253: PPUSH
22254: LD_VAR 0 3
22258: PPUSH
22259: CALL_OW 3
22263: PPUSH
22264: CALL_OW 1
22268: ST_TO_ADDR
// end ; end ;
22269: GO 22098
22271: POP
22272: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
22273: LD_VAR 0 1
22277: PPUSH
22278: LD_EXP 101
22282: PUSH
22283: LD_VAR 0 4
22287: ARRAY
22288: PUSH
22289: LD_INT 0
22291: PLUS
22292: PPUSH
22293: CALL_OW 505
// end ;
22297: LD_VAR 0 2
22301: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
22302: LD_INT 0
22304: PPUSH
22305: PPUSH
22306: PPUSH
22307: PPUSH
// if not hack in hackTanks then
22308: LD_VAR 0 1
22312: PUSH
22313: LD_EXP 100
22317: IN
22318: NOT
22319: IFFALSE 22323
// exit ;
22321: GO 22408
// index := GetElementIndex ( hackTanks , hack ) ;
22323: LD_ADDR_VAR 0 5
22327: PUSH
22328: LD_EXP 100
22332: PPUSH
22333: LD_VAR 0 1
22337: PPUSH
22338: CALL 27144 0 2
22342: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
22343: LD_ADDR_VAR 0 4
22347: PUSH
22348: DOUBLE
22349: LD_INT 1
22351: DEC
22352: ST_TO_ADDR
22353: LD_EXP 101
22357: PUSH
22358: LD_VAR 0 5
22362: ARRAY
22363: PUSH
22364: FOR_TO
22365: IFFALSE 22406
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
22367: LD_EXP 101
22371: PUSH
22372: LD_VAR 0 5
22376: ARRAY
22377: PUSH
22378: LD_VAR 0 4
22382: ARRAY
22383: PUSH
22384: LD_INT 1
22386: ARRAY
22387: PUSH
22388: LD_VAR 0 2
22392: EQUAL
22393: IFFALSE 22404
// KillUnit ( vehicle ) ;
22395: LD_VAR 0 2
22399: PPUSH
22400: CALL_OW 66
22404: GO 22364
22406: POP
22407: POP
// end ; end_of_file
22408: LD_VAR 0 3
22412: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
22413: LD_INT 0
22415: PPUSH
22416: PPUSH
// if exist_mode then
22417: LD_VAR 0 2
22421: IFFALSE 22446
// unit := CreateCharacter ( prefix & ident ) else
22423: LD_ADDR_VAR 0 5
22427: PUSH
22428: LD_VAR 0 3
22432: PUSH
22433: LD_VAR 0 1
22437: STR
22438: PPUSH
22439: CALL_OW 34
22443: ST_TO_ADDR
22444: GO 22461
// unit := NewCharacter ( ident ) ;
22446: LD_ADDR_VAR 0 5
22450: PUSH
22451: LD_VAR 0 1
22455: PPUSH
22456: CALL_OW 25
22460: ST_TO_ADDR
// result := unit ;
22461: LD_ADDR_VAR 0 4
22465: PUSH
22466: LD_VAR 0 5
22470: ST_TO_ADDR
// end ;
22471: LD_VAR 0 4
22475: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
22476: LD_INT 0
22478: PPUSH
22479: PPUSH
// if not side or not nation then
22480: LD_VAR 0 1
22484: NOT
22485: PUSH
22486: LD_VAR 0 2
22490: NOT
22491: OR
22492: IFFALSE 22496
// exit ;
22494: GO 23260
// case nation of nation_american :
22496: LD_VAR 0 2
22500: PUSH
22501: LD_INT 1
22503: DOUBLE
22504: EQUAL
22505: IFTRUE 22509
22507: GO 22723
22509: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
22510: LD_ADDR_VAR 0 4
22514: PUSH
22515: LD_INT 35
22517: PUSH
22518: LD_INT 45
22520: PUSH
22521: LD_INT 46
22523: PUSH
22524: LD_INT 47
22526: PUSH
22527: LD_INT 82
22529: PUSH
22530: LD_INT 83
22532: PUSH
22533: LD_INT 84
22535: PUSH
22536: LD_INT 85
22538: PUSH
22539: LD_INT 86
22541: PUSH
22542: LD_INT 1
22544: PUSH
22545: LD_INT 2
22547: PUSH
22548: LD_INT 6
22550: PUSH
22551: LD_INT 15
22553: PUSH
22554: LD_INT 16
22556: PUSH
22557: LD_INT 7
22559: PUSH
22560: LD_INT 12
22562: PUSH
22563: LD_INT 13
22565: PUSH
22566: LD_INT 10
22568: PUSH
22569: LD_INT 14
22571: PUSH
22572: LD_INT 20
22574: PUSH
22575: LD_INT 21
22577: PUSH
22578: LD_INT 22
22580: PUSH
22581: LD_INT 25
22583: PUSH
22584: LD_INT 32
22586: PUSH
22587: LD_INT 27
22589: PUSH
22590: LD_INT 36
22592: PUSH
22593: LD_INT 69
22595: PUSH
22596: LD_INT 39
22598: PUSH
22599: LD_INT 34
22601: PUSH
22602: LD_INT 40
22604: PUSH
22605: LD_INT 48
22607: PUSH
22608: LD_INT 49
22610: PUSH
22611: LD_INT 50
22613: PUSH
22614: LD_INT 51
22616: PUSH
22617: LD_INT 52
22619: PUSH
22620: LD_INT 53
22622: PUSH
22623: LD_INT 54
22625: PUSH
22626: LD_INT 55
22628: PUSH
22629: LD_INT 56
22631: PUSH
22632: LD_INT 57
22634: PUSH
22635: LD_INT 58
22637: PUSH
22638: LD_INT 59
22640: PUSH
22641: LD_INT 60
22643: PUSH
22644: LD_INT 61
22646: PUSH
22647: LD_INT 62
22649: PUSH
22650: LD_INT 80
22652: PUSH
22653: LD_INT 82
22655: PUSH
22656: LD_INT 83
22658: PUSH
22659: LD_INT 84
22661: PUSH
22662: LD_INT 85
22664: PUSH
22665: LD_INT 86
22667: PUSH
22668: EMPTY
22669: LIST
22670: LIST
22671: LIST
22672: LIST
22673: LIST
22674: LIST
22675: LIST
22676: LIST
22677: LIST
22678: LIST
22679: LIST
22680: LIST
22681: LIST
22682: LIST
22683: LIST
22684: LIST
22685: LIST
22686: LIST
22687: LIST
22688: LIST
22689: LIST
22690: LIST
22691: LIST
22692: LIST
22693: LIST
22694: LIST
22695: LIST
22696: LIST
22697: LIST
22698: LIST
22699: LIST
22700: LIST
22701: LIST
22702: LIST
22703: LIST
22704: LIST
22705: LIST
22706: LIST
22707: LIST
22708: LIST
22709: LIST
22710: LIST
22711: LIST
22712: LIST
22713: LIST
22714: LIST
22715: LIST
22716: LIST
22717: LIST
22718: LIST
22719: LIST
22720: ST_TO_ADDR
22721: GO 23184
22723: LD_INT 2
22725: DOUBLE
22726: EQUAL
22727: IFTRUE 22731
22729: GO 22953
22731: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
22732: LD_ADDR_VAR 0 4
22736: PUSH
22737: LD_INT 35
22739: PUSH
22740: LD_INT 45
22742: PUSH
22743: LD_INT 46
22745: PUSH
22746: LD_INT 47
22748: PUSH
22749: LD_INT 82
22751: PUSH
22752: LD_INT 83
22754: PUSH
22755: LD_INT 84
22757: PUSH
22758: LD_INT 85
22760: PUSH
22761: LD_INT 87
22763: PUSH
22764: LD_INT 70
22766: PUSH
22767: LD_INT 1
22769: PUSH
22770: LD_INT 11
22772: PUSH
22773: LD_INT 3
22775: PUSH
22776: LD_INT 4
22778: PUSH
22779: LD_INT 5
22781: PUSH
22782: LD_INT 6
22784: PUSH
22785: LD_INT 15
22787: PUSH
22788: LD_INT 18
22790: PUSH
22791: LD_INT 7
22793: PUSH
22794: LD_INT 17
22796: PUSH
22797: LD_INT 8
22799: PUSH
22800: LD_INT 20
22802: PUSH
22803: LD_INT 21
22805: PUSH
22806: LD_INT 22
22808: PUSH
22809: LD_INT 72
22811: PUSH
22812: LD_INT 26
22814: PUSH
22815: LD_INT 69
22817: PUSH
22818: LD_INT 39
22820: PUSH
22821: LD_INT 40
22823: PUSH
22824: LD_INT 41
22826: PUSH
22827: LD_INT 42
22829: PUSH
22830: LD_INT 43
22832: PUSH
22833: LD_INT 48
22835: PUSH
22836: LD_INT 49
22838: PUSH
22839: LD_INT 50
22841: PUSH
22842: LD_INT 51
22844: PUSH
22845: LD_INT 52
22847: PUSH
22848: LD_INT 53
22850: PUSH
22851: LD_INT 54
22853: PUSH
22854: LD_INT 55
22856: PUSH
22857: LD_INT 56
22859: PUSH
22860: LD_INT 60
22862: PUSH
22863: LD_INT 61
22865: PUSH
22866: LD_INT 62
22868: PUSH
22869: LD_INT 66
22871: PUSH
22872: LD_INT 67
22874: PUSH
22875: LD_INT 68
22877: PUSH
22878: LD_INT 81
22880: PUSH
22881: LD_INT 82
22883: PUSH
22884: LD_INT 83
22886: PUSH
22887: LD_INT 84
22889: PUSH
22890: LD_INT 85
22892: PUSH
22893: LD_INT 87
22895: PUSH
22896: EMPTY
22897: LIST
22898: LIST
22899: LIST
22900: LIST
22901: LIST
22902: LIST
22903: LIST
22904: LIST
22905: LIST
22906: LIST
22907: LIST
22908: LIST
22909: LIST
22910: LIST
22911: LIST
22912: LIST
22913: LIST
22914: LIST
22915: LIST
22916: LIST
22917: LIST
22918: LIST
22919: LIST
22920: LIST
22921: LIST
22922: LIST
22923: LIST
22924: LIST
22925: LIST
22926: LIST
22927: LIST
22928: LIST
22929: LIST
22930: LIST
22931: LIST
22932: LIST
22933: LIST
22934: LIST
22935: LIST
22936: LIST
22937: LIST
22938: LIST
22939: LIST
22940: LIST
22941: LIST
22942: LIST
22943: LIST
22944: LIST
22945: LIST
22946: LIST
22947: LIST
22948: LIST
22949: LIST
22950: ST_TO_ADDR
22951: GO 23184
22953: LD_INT 3
22955: DOUBLE
22956: EQUAL
22957: IFTRUE 22961
22959: GO 23183
22961: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
22962: LD_ADDR_VAR 0 4
22966: PUSH
22967: LD_INT 46
22969: PUSH
22970: LD_INT 47
22972: PUSH
22973: LD_INT 1
22975: PUSH
22976: LD_INT 2
22978: PUSH
22979: LD_INT 82
22981: PUSH
22982: LD_INT 83
22984: PUSH
22985: LD_INT 84
22987: PUSH
22988: LD_INT 85
22990: PUSH
22991: LD_INT 86
22993: PUSH
22994: LD_INT 11
22996: PUSH
22997: LD_INT 9
22999: PUSH
23000: LD_INT 20
23002: PUSH
23003: LD_INT 19
23005: PUSH
23006: LD_INT 21
23008: PUSH
23009: LD_INT 24
23011: PUSH
23012: LD_INT 22
23014: PUSH
23015: LD_INT 25
23017: PUSH
23018: LD_INT 28
23020: PUSH
23021: LD_INT 29
23023: PUSH
23024: LD_INT 30
23026: PUSH
23027: LD_INT 31
23029: PUSH
23030: LD_INT 37
23032: PUSH
23033: LD_INT 38
23035: PUSH
23036: LD_INT 32
23038: PUSH
23039: LD_INT 27
23041: PUSH
23042: LD_INT 33
23044: PUSH
23045: LD_INT 69
23047: PUSH
23048: LD_INT 39
23050: PUSH
23051: LD_INT 34
23053: PUSH
23054: LD_INT 40
23056: PUSH
23057: LD_INT 71
23059: PUSH
23060: LD_INT 23
23062: PUSH
23063: LD_INT 44
23065: PUSH
23066: LD_INT 48
23068: PUSH
23069: LD_INT 49
23071: PUSH
23072: LD_INT 50
23074: PUSH
23075: LD_INT 51
23077: PUSH
23078: LD_INT 52
23080: PUSH
23081: LD_INT 53
23083: PUSH
23084: LD_INT 54
23086: PUSH
23087: LD_INT 55
23089: PUSH
23090: LD_INT 56
23092: PUSH
23093: LD_INT 57
23095: PUSH
23096: LD_INT 58
23098: PUSH
23099: LD_INT 59
23101: PUSH
23102: LD_INT 63
23104: PUSH
23105: LD_INT 64
23107: PUSH
23108: LD_INT 65
23110: PUSH
23111: LD_INT 82
23113: PUSH
23114: LD_INT 83
23116: PUSH
23117: LD_INT 84
23119: PUSH
23120: LD_INT 85
23122: PUSH
23123: LD_INT 86
23125: PUSH
23126: EMPTY
23127: LIST
23128: LIST
23129: LIST
23130: LIST
23131: LIST
23132: LIST
23133: LIST
23134: LIST
23135: LIST
23136: LIST
23137: LIST
23138: LIST
23139: LIST
23140: LIST
23141: LIST
23142: LIST
23143: LIST
23144: LIST
23145: LIST
23146: LIST
23147: LIST
23148: LIST
23149: LIST
23150: LIST
23151: LIST
23152: LIST
23153: LIST
23154: LIST
23155: LIST
23156: LIST
23157: LIST
23158: LIST
23159: LIST
23160: LIST
23161: LIST
23162: LIST
23163: LIST
23164: LIST
23165: LIST
23166: LIST
23167: LIST
23168: LIST
23169: LIST
23170: LIST
23171: LIST
23172: LIST
23173: LIST
23174: LIST
23175: LIST
23176: LIST
23177: LIST
23178: LIST
23179: LIST
23180: ST_TO_ADDR
23181: GO 23184
23183: POP
// if state > - 1 and state < 3 then
23184: LD_VAR 0 3
23188: PUSH
23189: LD_INT 1
23191: NEG
23192: GREATER
23193: PUSH
23194: LD_VAR 0 3
23198: PUSH
23199: LD_INT 3
23201: LESS
23202: AND
23203: IFFALSE 23260
// for i in result do
23205: LD_ADDR_VAR 0 5
23209: PUSH
23210: LD_VAR 0 4
23214: PUSH
23215: FOR_IN
23216: IFFALSE 23258
// if GetTech ( i , side ) <> state then
23218: LD_VAR 0 5
23222: PPUSH
23223: LD_VAR 0 1
23227: PPUSH
23228: CALL_OW 321
23232: PUSH
23233: LD_VAR 0 3
23237: NONEQUAL
23238: IFFALSE 23256
// result := result diff i ;
23240: LD_ADDR_VAR 0 4
23244: PUSH
23245: LD_VAR 0 4
23249: PUSH
23250: LD_VAR 0 5
23254: DIFF
23255: ST_TO_ADDR
23256: GO 23215
23258: POP
23259: POP
// end ;
23260: LD_VAR 0 4
23264: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
23265: LD_INT 0
23267: PPUSH
23268: PPUSH
23269: PPUSH
// result := true ;
23270: LD_ADDR_VAR 0 3
23274: PUSH
23275: LD_INT 1
23277: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
23278: LD_ADDR_VAR 0 5
23282: PUSH
23283: LD_VAR 0 2
23287: PPUSH
23288: CALL_OW 480
23292: ST_TO_ADDR
// if not tmp then
23293: LD_VAR 0 5
23297: NOT
23298: IFFALSE 23302
// exit ;
23300: GO 23351
// for i in tmp do
23302: LD_ADDR_VAR 0 4
23306: PUSH
23307: LD_VAR 0 5
23311: PUSH
23312: FOR_IN
23313: IFFALSE 23349
// if GetTech ( i , side ) <> state_researched then
23315: LD_VAR 0 4
23319: PPUSH
23320: LD_VAR 0 1
23324: PPUSH
23325: CALL_OW 321
23329: PUSH
23330: LD_INT 2
23332: NONEQUAL
23333: IFFALSE 23347
// begin result := false ;
23335: LD_ADDR_VAR 0 3
23339: PUSH
23340: LD_INT 0
23342: ST_TO_ADDR
// exit ;
23343: POP
23344: POP
23345: GO 23351
// end ;
23347: GO 23312
23349: POP
23350: POP
// end ;
23351: LD_VAR 0 3
23355: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
23356: LD_INT 0
23358: PPUSH
23359: PPUSH
23360: PPUSH
23361: PPUSH
23362: PPUSH
23363: PPUSH
23364: PPUSH
23365: PPUSH
23366: PPUSH
23367: PPUSH
23368: PPUSH
23369: PPUSH
23370: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
23371: LD_VAR 0 1
23375: NOT
23376: PUSH
23377: LD_VAR 0 1
23381: PPUSH
23382: CALL_OW 257
23386: PUSH
23387: LD_INT 9
23389: NONEQUAL
23390: OR
23391: IFFALSE 23395
// exit ;
23393: GO 23968
// side := GetSide ( unit ) ;
23395: LD_ADDR_VAR 0 9
23399: PUSH
23400: LD_VAR 0 1
23404: PPUSH
23405: CALL_OW 255
23409: ST_TO_ADDR
// tech_space := tech_spacanom ;
23410: LD_ADDR_VAR 0 12
23414: PUSH
23415: LD_INT 29
23417: ST_TO_ADDR
// tech_time := tech_taurad ;
23418: LD_ADDR_VAR 0 13
23422: PUSH
23423: LD_INT 28
23425: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
23426: LD_ADDR_VAR 0 11
23430: PUSH
23431: LD_VAR 0 1
23435: PPUSH
23436: CALL_OW 310
23440: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
23441: LD_VAR 0 11
23445: PPUSH
23446: CALL_OW 247
23450: PUSH
23451: LD_INT 2
23453: EQUAL
23454: IFFALSE 23458
// exit ;
23456: GO 23968
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
23458: LD_ADDR_VAR 0 8
23462: PUSH
23463: LD_INT 81
23465: PUSH
23466: LD_VAR 0 9
23470: PUSH
23471: EMPTY
23472: LIST
23473: LIST
23474: PUSH
23475: LD_INT 3
23477: PUSH
23478: LD_INT 21
23480: PUSH
23481: LD_INT 3
23483: PUSH
23484: EMPTY
23485: LIST
23486: LIST
23487: PUSH
23488: EMPTY
23489: LIST
23490: LIST
23491: PUSH
23492: EMPTY
23493: LIST
23494: LIST
23495: PPUSH
23496: CALL_OW 69
23500: ST_TO_ADDR
// if not tmp then
23501: LD_VAR 0 8
23505: NOT
23506: IFFALSE 23510
// exit ;
23508: GO 23968
// if in_unit then
23510: LD_VAR 0 11
23514: IFFALSE 23538
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
23516: LD_ADDR_VAR 0 10
23520: PUSH
23521: LD_VAR 0 8
23525: PPUSH
23526: LD_VAR 0 11
23530: PPUSH
23531: CALL_OW 74
23535: ST_TO_ADDR
23536: GO 23558
// enemy := NearestUnitToUnit ( tmp , unit ) ;
23538: LD_ADDR_VAR 0 10
23542: PUSH
23543: LD_VAR 0 8
23547: PPUSH
23548: LD_VAR 0 1
23552: PPUSH
23553: CALL_OW 74
23557: ST_TO_ADDR
// if not enemy then
23558: LD_VAR 0 10
23562: NOT
23563: IFFALSE 23567
// exit ;
23565: GO 23968
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
23567: LD_VAR 0 11
23571: PUSH
23572: LD_VAR 0 11
23576: PPUSH
23577: LD_VAR 0 10
23581: PPUSH
23582: CALL_OW 296
23586: PUSH
23587: LD_INT 13
23589: GREATER
23590: AND
23591: PUSH
23592: LD_VAR 0 1
23596: PPUSH
23597: LD_VAR 0 10
23601: PPUSH
23602: CALL_OW 296
23606: PUSH
23607: LD_INT 12
23609: GREATER
23610: OR
23611: IFFALSE 23615
// exit ;
23613: GO 23968
// missile := [ 1 ] ;
23615: LD_ADDR_VAR 0 14
23619: PUSH
23620: LD_INT 1
23622: PUSH
23623: EMPTY
23624: LIST
23625: ST_TO_ADDR
// if Researched ( side , tech_space ) then
23626: LD_VAR 0 9
23630: PPUSH
23631: LD_VAR 0 12
23635: PPUSH
23636: CALL_OW 325
23640: IFFALSE 23669
// missile := Insert ( missile , missile + 1 , 2 ) ;
23642: LD_ADDR_VAR 0 14
23646: PUSH
23647: LD_VAR 0 14
23651: PPUSH
23652: LD_VAR 0 14
23656: PUSH
23657: LD_INT 1
23659: PLUS
23660: PPUSH
23661: LD_INT 2
23663: PPUSH
23664: CALL_OW 2
23668: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
23669: LD_VAR 0 9
23673: PPUSH
23674: LD_VAR 0 13
23678: PPUSH
23679: CALL_OW 325
23683: PUSH
23684: LD_VAR 0 10
23688: PPUSH
23689: CALL_OW 255
23693: PPUSH
23694: LD_VAR 0 13
23698: PPUSH
23699: CALL_OW 325
23703: NOT
23704: AND
23705: IFFALSE 23734
// missile := Insert ( missile , missile + 1 , 3 ) ;
23707: LD_ADDR_VAR 0 14
23711: PUSH
23712: LD_VAR 0 14
23716: PPUSH
23717: LD_VAR 0 14
23721: PUSH
23722: LD_INT 1
23724: PLUS
23725: PPUSH
23726: LD_INT 3
23728: PPUSH
23729: CALL_OW 2
23733: ST_TO_ADDR
// if missile < 2 then
23734: LD_VAR 0 14
23738: PUSH
23739: LD_INT 2
23741: LESS
23742: IFFALSE 23746
// exit ;
23744: GO 23968
// x := GetX ( enemy ) ;
23746: LD_ADDR_VAR 0 4
23750: PUSH
23751: LD_VAR 0 10
23755: PPUSH
23756: CALL_OW 250
23760: ST_TO_ADDR
// y := GetY ( enemy ) ;
23761: LD_ADDR_VAR 0 5
23765: PUSH
23766: LD_VAR 0 10
23770: PPUSH
23771: CALL_OW 251
23775: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
23776: LD_ADDR_VAR 0 6
23780: PUSH
23781: LD_VAR 0 4
23785: PUSH
23786: LD_INT 1
23788: NEG
23789: PPUSH
23790: LD_INT 1
23792: PPUSH
23793: CALL_OW 12
23797: PLUS
23798: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
23799: LD_ADDR_VAR 0 7
23803: PUSH
23804: LD_VAR 0 5
23808: PUSH
23809: LD_INT 1
23811: NEG
23812: PPUSH
23813: LD_INT 1
23815: PPUSH
23816: CALL_OW 12
23820: PLUS
23821: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
23822: LD_VAR 0 6
23826: PPUSH
23827: LD_VAR 0 7
23831: PPUSH
23832: CALL_OW 488
23836: NOT
23837: IFFALSE 23859
// begin _x := x ;
23839: LD_ADDR_VAR 0 6
23843: PUSH
23844: LD_VAR 0 4
23848: ST_TO_ADDR
// _y := y ;
23849: LD_ADDR_VAR 0 7
23853: PUSH
23854: LD_VAR 0 5
23858: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
23859: LD_ADDR_VAR 0 3
23863: PUSH
23864: LD_INT 1
23866: PPUSH
23867: LD_VAR 0 14
23871: PPUSH
23872: CALL_OW 12
23876: ST_TO_ADDR
// case i of 1 :
23877: LD_VAR 0 3
23881: PUSH
23882: LD_INT 1
23884: DOUBLE
23885: EQUAL
23886: IFTRUE 23890
23888: GO 23907
23890: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
23891: LD_VAR 0 1
23895: PPUSH
23896: LD_VAR 0 10
23900: PPUSH
23901: CALL_OW 115
23905: GO 23968
23907: LD_INT 2
23909: DOUBLE
23910: EQUAL
23911: IFTRUE 23915
23913: GO 23937
23915: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
23916: LD_VAR 0 1
23920: PPUSH
23921: LD_VAR 0 6
23925: PPUSH
23926: LD_VAR 0 7
23930: PPUSH
23931: CALL_OW 153
23935: GO 23968
23937: LD_INT 3
23939: DOUBLE
23940: EQUAL
23941: IFTRUE 23945
23943: GO 23967
23945: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
23946: LD_VAR 0 1
23950: PPUSH
23951: LD_VAR 0 6
23955: PPUSH
23956: LD_VAR 0 7
23960: PPUSH
23961: CALL_OW 154
23965: GO 23968
23967: POP
// end ;
23968: LD_VAR 0 2
23972: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
23973: LD_INT 0
23975: PPUSH
23976: PPUSH
23977: PPUSH
23978: PPUSH
23979: PPUSH
23980: PPUSH
// if not unit or not building then
23981: LD_VAR 0 1
23985: NOT
23986: PUSH
23987: LD_VAR 0 2
23991: NOT
23992: OR
23993: IFFALSE 23997
// exit ;
23995: GO 24155
// x := GetX ( building ) ;
23997: LD_ADDR_VAR 0 5
24001: PUSH
24002: LD_VAR 0 2
24006: PPUSH
24007: CALL_OW 250
24011: ST_TO_ADDR
// y := GetY ( building ) ;
24012: LD_ADDR_VAR 0 6
24016: PUSH
24017: LD_VAR 0 2
24021: PPUSH
24022: CALL_OW 251
24026: ST_TO_ADDR
// for i = 0 to 5 do
24027: LD_ADDR_VAR 0 4
24031: PUSH
24032: DOUBLE
24033: LD_INT 0
24035: DEC
24036: ST_TO_ADDR
24037: LD_INT 5
24039: PUSH
24040: FOR_TO
24041: IFFALSE 24153
// begin _x := ShiftX ( x , i , 3 ) ;
24043: LD_ADDR_VAR 0 7
24047: PUSH
24048: LD_VAR 0 5
24052: PPUSH
24053: LD_VAR 0 4
24057: PPUSH
24058: LD_INT 3
24060: PPUSH
24061: CALL_OW 272
24065: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
24066: LD_ADDR_VAR 0 8
24070: PUSH
24071: LD_VAR 0 6
24075: PPUSH
24076: LD_VAR 0 4
24080: PPUSH
24081: LD_INT 3
24083: PPUSH
24084: CALL_OW 273
24088: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
24089: LD_VAR 0 7
24093: PPUSH
24094: LD_VAR 0 8
24098: PPUSH
24099: CALL_OW 488
24103: NOT
24104: IFFALSE 24108
// continue ;
24106: GO 24040
// if HexInfo ( _x , _y ) = 0 then
24108: LD_VAR 0 7
24112: PPUSH
24113: LD_VAR 0 8
24117: PPUSH
24118: CALL_OW 428
24122: PUSH
24123: LD_INT 0
24125: EQUAL
24126: IFFALSE 24151
// begin ComMoveXY ( unit , _x , _y ) ;
24128: LD_VAR 0 1
24132: PPUSH
24133: LD_VAR 0 7
24137: PPUSH
24138: LD_VAR 0 8
24142: PPUSH
24143: CALL_OW 111
// exit ;
24147: POP
24148: POP
24149: GO 24155
// end ; end ;
24151: GO 24040
24153: POP
24154: POP
// end ;
24155: LD_VAR 0 3
24159: RET
// export function ScanBase ( side , base_area ) ; begin
24160: LD_INT 0
24162: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
24163: LD_ADDR_VAR 0 3
24167: PUSH
24168: LD_VAR 0 2
24172: PPUSH
24173: LD_INT 81
24175: PUSH
24176: LD_VAR 0 1
24180: PUSH
24181: EMPTY
24182: LIST
24183: LIST
24184: PPUSH
24185: CALL_OW 70
24189: ST_TO_ADDR
// end ;
24190: LD_VAR 0 3
24194: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
24195: LD_INT 0
24197: PPUSH
24198: PPUSH
24199: PPUSH
24200: PPUSH
// result := false ;
24201: LD_ADDR_VAR 0 2
24205: PUSH
24206: LD_INT 0
24208: ST_TO_ADDR
// side := GetSide ( unit ) ;
24209: LD_ADDR_VAR 0 3
24213: PUSH
24214: LD_VAR 0 1
24218: PPUSH
24219: CALL_OW 255
24223: ST_TO_ADDR
// nat := GetNation ( unit ) ;
24224: LD_ADDR_VAR 0 4
24228: PUSH
24229: LD_VAR 0 1
24233: PPUSH
24234: CALL_OW 248
24238: ST_TO_ADDR
// case nat of 1 :
24239: LD_VAR 0 4
24243: PUSH
24244: LD_INT 1
24246: DOUBLE
24247: EQUAL
24248: IFTRUE 24252
24250: GO 24263
24252: POP
// tech := tech_lassight ; 2 :
24253: LD_ADDR_VAR 0 5
24257: PUSH
24258: LD_INT 12
24260: ST_TO_ADDR
24261: GO 24302
24263: LD_INT 2
24265: DOUBLE
24266: EQUAL
24267: IFTRUE 24271
24269: GO 24282
24271: POP
// tech := tech_mortar ; 3 :
24272: LD_ADDR_VAR 0 5
24276: PUSH
24277: LD_INT 41
24279: ST_TO_ADDR
24280: GO 24302
24282: LD_INT 3
24284: DOUBLE
24285: EQUAL
24286: IFTRUE 24290
24288: GO 24301
24290: POP
// tech := tech_bazooka ; end ;
24291: LD_ADDR_VAR 0 5
24295: PUSH
24296: LD_INT 44
24298: ST_TO_ADDR
24299: GO 24302
24301: POP
// if Researched ( side , tech ) then
24302: LD_VAR 0 3
24306: PPUSH
24307: LD_VAR 0 5
24311: PPUSH
24312: CALL_OW 325
24316: IFFALSE 24343
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
24318: LD_ADDR_VAR 0 2
24322: PUSH
24323: LD_INT 5
24325: PUSH
24326: LD_INT 8
24328: PUSH
24329: LD_INT 9
24331: PUSH
24332: EMPTY
24333: LIST
24334: LIST
24335: LIST
24336: PUSH
24337: LD_VAR 0 4
24341: ARRAY
24342: ST_TO_ADDR
// end ;
24343: LD_VAR 0 2
24347: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
24348: LD_INT 0
24350: PPUSH
24351: PPUSH
24352: PPUSH
// if not mines then
24353: LD_VAR 0 2
24357: NOT
24358: IFFALSE 24362
// exit ;
24360: GO 24506
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
24362: LD_ADDR_VAR 0 5
24366: PUSH
24367: LD_INT 81
24369: PUSH
24370: LD_VAR 0 1
24374: PUSH
24375: EMPTY
24376: LIST
24377: LIST
24378: PUSH
24379: LD_INT 3
24381: PUSH
24382: LD_INT 21
24384: PUSH
24385: LD_INT 3
24387: PUSH
24388: EMPTY
24389: LIST
24390: LIST
24391: PUSH
24392: EMPTY
24393: LIST
24394: LIST
24395: PUSH
24396: EMPTY
24397: LIST
24398: LIST
24399: PPUSH
24400: CALL_OW 69
24404: ST_TO_ADDR
// for i in mines do
24405: LD_ADDR_VAR 0 4
24409: PUSH
24410: LD_VAR 0 2
24414: PUSH
24415: FOR_IN
24416: IFFALSE 24504
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
24418: LD_VAR 0 4
24422: PUSH
24423: LD_INT 1
24425: ARRAY
24426: PPUSH
24427: LD_VAR 0 4
24431: PUSH
24432: LD_INT 2
24434: ARRAY
24435: PPUSH
24436: CALL_OW 458
24440: NOT
24441: IFFALSE 24445
// continue ;
24443: GO 24415
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
24445: LD_VAR 0 4
24449: PUSH
24450: LD_INT 1
24452: ARRAY
24453: PPUSH
24454: LD_VAR 0 4
24458: PUSH
24459: LD_INT 2
24461: ARRAY
24462: PPUSH
24463: CALL_OW 428
24467: PUSH
24468: LD_VAR 0 5
24472: IN
24473: IFFALSE 24502
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
24475: LD_VAR 0 4
24479: PUSH
24480: LD_INT 1
24482: ARRAY
24483: PPUSH
24484: LD_VAR 0 4
24488: PUSH
24489: LD_INT 2
24491: ARRAY
24492: PPUSH
24493: LD_VAR 0 1
24497: PPUSH
24498: CALL_OW 456
// end ;
24502: GO 24415
24504: POP
24505: POP
// end ;
24506: LD_VAR 0 3
24510: RET
// export function Count ( array ) ; var i ; begin
24511: LD_INT 0
24513: PPUSH
24514: PPUSH
// result := 0 ;
24515: LD_ADDR_VAR 0 2
24519: PUSH
24520: LD_INT 0
24522: ST_TO_ADDR
// for i in array do
24523: LD_ADDR_VAR 0 3
24527: PUSH
24528: LD_VAR 0 1
24532: PUSH
24533: FOR_IN
24534: IFFALSE 24558
// if i then
24536: LD_VAR 0 3
24540: IFFALSE 24556
// result := result + 1 ;
24542: LD_ADDR_VAR 0 2
24546: PUSH
24547: LD_VAR 0 2
24551: PUSH
24552: LD_INT 1
24554: PLUS
24555: ST_TO_ADDR
24556: GO 24533
24558: POP
24559: POP
// end ;
24560: LD_VAR 0 2
24564: RET
// export function IsEmpty ( building ) ; begin
24565: LD_INT 0
24567: PPUSH
// if not building then
24568: LD_VAR 0 1
24572: NOT
24573: IFFALSE 24577
// exit ;
24575: GO 24620
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
24577: LD_ADDR_VAR 0 2
24581: PUSH
24582: LD_VAR 0 1
24586: PUSH
24587: LD_INT 22
24589: PUSH
24590: LD_VAR 0 1
24594: PPUSH
24595: CALL_OW 255
24599: PUSH
24600: EMPTY
24601: LIST
24602: LIST
24603: PUSH
24604: LD_INT 58
24606: PUSH
24607: EMPTY
24608: LIST
24609: PUSH
24610: EMPTY
24611: LIST
24612: LIST
24613: PPUSH
24614: CALL_OW 69
24618: IN
24619: ST_TO_ADDR
// end ;
24620: LD_VAR 0 2
24624: RET
// export function IsNotFull ( building ) ; begin
24625: LD_INT 0
24627: PPUSH
// if not building then
24628: LD_VAR 0 1
24632: NOT
24633: IFFALSE 24637
// exit ;
24635: GO 24656
// result := UnitsInside ( building ) < 6 ;
24637: LD_ADDR_VAR 0 2
24641: PUSH
24642: LD_VAR 0 1
24646: PPUSH
24647: CALL_OW 313
24651: PUSH
24652: LD_INT 6
24654: LESS
24655: ST_TO_ADDR
// end ;
24656: LD_VAR 0 2
24660: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
24661: LD_INT 0
24663: PPUSH
24664: PPUSH
24665: PPUSH
24666: PPUSH
// tmp := [ ] ;
24667: LD_ADDR_VAR 0 3
24671: PUSH
24672: EMPTY
24673: ST_TO_ADDR
// list := [ ] ;
24674: LD_ADDR_VAR 0 5
24678: PUSH
24679: EMPTY
24680: ST_TO_ADDR
// for i = 16 to 25 do
24681: LD_ADDR_VAR 0 4
24685: PUSH
24686: DOUBLE
24687: LD_INT 16
24689: DEC
24690: ST_TO_ADDR
24691: LD_INT 25
24693: PUSH
24694: FOR_TO
24695: IFFALSE 24768
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
24697: LD_ADDR_VAR 0 3
24701: PUSH
24702: LD_VAR 0 3
24706: PUSH
24707: LD_INT 22
24709: PUSH
24710: LD_VAR 0 1
24714: PPUSH
24715: CALL_OW 255
24719: PUSH
24720: EMPTY
24721: LIST
24722: LIST
24723: PUSH
24724: LD_INT 91
24726: PUSH
24727: LD_VAR 0 1
24731: PUSH
24732: LD_INT 6
24734: PUSH
24735: EMPTY
24736: LIST
24737: LIST
24738: LIST
24739: PUSH
24740: LD_INT 30
24742: PUSH
24743: LD_VAR 0 4
24747: PUSH
24748: EMPTY
24749: LIST
24750: LIST
24751: PUSH
24752: EMPTY
24753: LIST
24754: LIST
24755: LIST
24756: PUSH
24757: EMPTY
24758: LIST
24759: PPUSH
24760: CALL_OW 69
24764: ADD
24765: ST_TO_ADDR
24766: GO 24694
24768: POP
24769: POP
// for i = 1 to tmp do
24770: LD_ADDR_VAR 0 4
24774: PUSH
24775: DOUBLE
24776: LD_INT 1
24778: DEC
24779: ST_TO_ADDR
24780: LD_VAR 0 3
24784: PUSH
24785: FOR_TO
24786: IFFALSE 24874
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
24788: LD_ADDR_VAR 0 5
24792: PUSH
24793: LD_VAR 0 5
24797: PUSH
24798: LD_VAR 0 3
24802: PUSH
24803: LD_VAR 0 4
24807: ARRAY
24808: PPUSH
24809: CALL_OW 266
24813: PUSH
24814: LD_VAR 0 3
24818: PUSH
24819: LD_VAR 0 4
24823: ARRAY
24824: PPUSH
24825: CALL_OW 250
24829: PUSH
24830: LD_VAR 0 3
24834: PUSH
24835: LD_VAR 0 4
24839: ARRAY
24840: PPUSH
24841: CALL_OW 251
24845: PUSH
24846: LD_VAR 0 3
24850: PUSH
24851: LD_VAR 0 4
24855: ARRAY
24856: PPUSH
24857: CALL_OW 254
24861: PUSH
24862: EMPTY
24863: LIST
24864: LIST
24865: LIST
24866: LIST
24867: PUSH
24868: EMPTY
24869: LIST
24870: ADD
24871: ST_TO_ADDR
24872: GO 24785
24874: POP
24875: POP
// result := list ;
24876: LD_ADDR_VAR 0 2
24880: PUSH
24881: LD_VAR 0 5
24885: ST_TO_ADDR
// end ;
24886: LD_VAR 0 2
24890: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
24891: LD_INT 0
24893: PPUSH
24894: PPUSH
24895: PPUSH
24896: PPUSH
24897: PPUSH
24898: PPUSH
24899: PPUSH
// if not factory then
24900: LD_VAR 0 1
24904: NOT
24905: IFFALSE 24909
// exit ;
24907: GO 25502
// if control = control_apeman then
24909: LD_VAR 0 4
24913: PUSH
24914: LD_INT 5
24916: EQUAL
24917: IFFALSE 25026
// begin tmp := UnitsInside ( factory ) ;
24919: LD_ADDR_VAR 0 8
24923: PUSH
24924: LD_VAR 0 1
24928: PPUSH
24929: CALL_OW 313
24933: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
24934: LD_VAR 0 8
24938: PPUSH
24939: LD_INT 25
24941: PUSH
24942: LD_INT 12
24944: PUSH
24945: EMPTY
24946: LIST
24947: LIST
24948: PPUSH
24949: CALL_OW 72
24953: NOT
24954: IFFALSE 24964
// control := control_manual ;
24956: LD_ADDR_VAR 0 4
24960: PUSH
24961: LD_INT 1
24963: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
24964: LD_ADDR_VAR 0 8
24968: PUSH
24969: LD_VAR 0 1
24973: PPUSH
24974: CALL 24661 0 1
24978: ST_TO_ADDR
// if tmp then
24979: LD_VAR 0 8
24983: IFFALSE 25026
// begin for i in tmp do
24985: LD_ADDR_VAR 0 7
24989: PUSH
24990: LD_VAR 0 8
24994: PUSH
24995: FOR_IN
24996: IFFALSE 25024
// if i [ 1 ] = b_ext_radio then
24998: LD_VAR 0 7
25002: PUSH
25003: LD_INT 1
25005: ARRAY
25006: PUSH
25007: LD_INT 22
25009: EQUAL
25010: IFFALSE 25022
// begin control := control_remote ;
25012: LD_ADDR_VAR 0 4
25016: PUSH
25017: LD_INT 2
25019: ST_TO_ADDR
// break ;
25020: GO 25024
// end ;
25022: GO 24995
25024: POP
25025: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
25026: LD_VAR 0 1
25030: PPUSH
25031: LD_VAR 0 2
25035: PPUSH
25036: LD_VAR 0 3
25040: PPUSH
25041: LD_VAR 0 4
25045: PPUSH
25046: LD_VAR 0 5
25050: PPUSH
25051: CALL_OW 448
25055: IFFALSE 25090
// begin result := [ chassis , engine , control , weapon ] ;
25057: LD_ADDR_VAR 0 6
25061: PUSH
25062: LD_VAR 0 2
25066: PUSH
25067: LD_VAR 0 3
25071: PUSH
25072: LD_VAR 0 4
25076: PUSH
25077: LD_VAR 0 5
25081: PUSH
25082: EMPTY
25083: LIST
25084: LIST
25085: LIST
25086: LIST
25087: ST_TO_ADDR
// exit ;
25088: GO 25502
// end ; _chassis := AvailableChassisList ( factory ) ;
25090: LD_ADDR_VAR 0 9
25094: PUSH
25095: LD_VAR 0 1
25099: PPUSH
25100: CALL_OW 475
25104: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
25105: LD_ADDR_VAR 0 11
25109: PUSH
25110: LD_VAR 0 1
25114: PPUSH
25115: CALL_OW 476
25119: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
25120: LD_ADDR_VAR 0 12
25124: PUSH
25125: LD_VAR 0 1
25129: PPUSH
25130: CALL_OW 477
25134: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
25135: LD_ADDR_VAR 0 10
25139: PUSH
25140: LD_VAR 0 1
25144: PPUSH
25145: CALL_OW 478
25149: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
25150: LD_VAR 0 9
25154: NOT
25155: PUSH
25156: LD_VAR 0 11
25160: NOT
25161: OR
25162: PUSH
25163: LD_VAR 0 12
25167: NOT
25168: OR
25169: PUSH
25170: LD_VAR 0 10
25174: NOT
25175: OR
25176: IFFALSE 25211
// begin result := [ chassis , engine , control , weapon ] ;
25178: LD_ADDR_VAR 0 6
25182: PUSH
25183: LD_VAR 0 2
25187: PUSH
25188: LD_VAR 0 3
25192: PUSH
25193: LD_VAR 0 4
25197: PUSH
25198: LD_VAR 0 5
25202: PUSH
25203: EMPTY
25204: LIST
25205: LIST
25206: LIST
25207: LIST
25208: ST_TO_ADDR
// exit ;
25209: GO 25502
// end ; if not chassis in _chassis then
25211: LD_VAR 0 2
25215: PUSH
25216: LD_VAR 0 9
25220: IN
25221: NOT
25222: IFFALSE 25248
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
25224: LD_ADDR_VAR 0 2
25228: PUSH
25229: LD_VAR 0 9
25233: PUSH
25234: LD_INT 1
25236: PPUSH
25237: LD_VAR 0 9
25241: PPUSH
25242: CALL_OW 12
25246: ARRAY
25247: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
25248: LD_VAR 0 2
25252: PPUSH
25253: LD_VAR 0 3
25257: PPUSH
25258: CALL 25507 0 2
25262: NOT
25263: IFFALSE 25322
// repeat engine := _engine [ 1 ] ;
25265: LD_ADDR_VAR 0 3
25269: PUSH
25270: LD_VAR 0 11
25274: PUSH
25275: LD_INT 1
25277: ARRAY
25278: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
25279: LD_ADDR_VAR 0 11
25283: PUSH
25284: LD_VAR 0 11
25288: PPUSH
25289: LD_INT 1
25291: PPUSH
25292: CALL_OW 3
25296: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
25297: LD_VAR 0 2
25301: PPUSH
25302: LD_VAR 0 3
25306: PPUSH
25307: CALL 25507 0 2
25311: PUSH
25312: LD_VAR 0 11
25316: PUSH
25317: EMPTY
25318: EQUAL
25319: OR
25320: IFFALSE 25265
// if not control in _control then
25322: LD_VAR 0 4
25326: PUSH
25327: LD_VAR 0 12
25331: IN
25332: NOT
25333: IFFALSE 25359
// control := _control [ rand ( 1 , _control ) ] ;
25335: LD_ADDR_VAR 0 4
25339: PUSH
25340: LD_VAR 0 12
25344: PUSH
25345: LD_INT 1
25347: PPUSH
25348: LD_VAR 0 12
25352: PPUSH
25353: CALL_OW 12
25357: ARRAY
25358: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
25359: LD_VAR 0 2
25363: PPUSH
25364: LD_VAR 0 5
25368: PPUSH
25369: CALL 25727 0 2
25373: NOT
25374: IFFALSE 25433
// repeat weapon := _weapon [ 1 ] ;
25376: LD_ADDR_VAR 0 5
25380: PUSH
25381: LD_VAR 0 10
25385: PUSH
25386: LD_INT 1
25388: ARRAY
25389: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
25390: LD_ADDR_VAR 0 10
25394: PUSH
25395: LD_VAR 0 10
25399: PPUSH
25400: LD_INT 1
25402: PPUSH
25403: CALL_OW 3
25407: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
25408: LD_VAR 0 2
25412: PPUSH
25413: LD_VAR 0 5
25417: PPUSH
25418: CALL 25727 0 2
25422: PUSH
25423: LD_VAR 0 10
25427: PUSH
25428: EMPTY
25429: EQUAL
25430: OR
25431: IFFALSE 25376
// result := [ ] ;
25433: LD_ADDR_VAR 0 6
25437: PUSH
25438: EMPTY
25439: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
25440: LD_VAR 0 1
25444: PPUSH
25445: LD_VAR 0 2
25449: PPUSH
25450: LD_VAR 0 3
25454: PPUSH
25455: LD_VAR 0 4
25459: PPUSH
25460: LD_VAR 0 5
25464: PPUSH
25465: CALL_OW 448
25469: IFFALSE 25502
// result := [ chassis , engine , control , weapon ] ;
25471: LD_ADDR_VAR 0 6
25475: PUSH
25476: LD_VAR 0 2
25480: PUSH
25481: LD_VAR 0 3
25485: PUSH
25486: LD_VAR 0 4
25490: PUSH
25491: LD_VAR 0 5
25495: PUSH
25496: EMPTY
25497: LIST
25498: LIST
25499: LIST
25500: LIST
25501: ST_TO_ADDR
// end ;
25502: LD_VAR 0 6
25506: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
25507: LD_INT 0
25509: PPUSH
// if not chassis or not engine then
25510: LD_VAR 0 1
25514: NOT
25515: PUSH
25516: LD_VAR 0 2
25520: NOT
25521: OR
25522: IFFALSE 25526
// exit ;
25524: GO 25722
// case engine of engine_solar :
25526: LD_VAR 0 2
25530: PUSH
25531: LD_INT 2
25533: DOUBLE
25534: EQUAL
25535: IFTRUE 25539
25537: GO 25577
25539: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
25540: LD_ADDR_VAR 0 3
25544: PUSH
25545: LD_INT 11
25547: PUSH
25548: LD_INT 12
25550: PUSH
25551: LD_INT 13
25553: PUSH
25554: LD_INT 14
25556: PUSH
25557: LD_INT 1
25559: PUSH
25560: LD_INT 2
25562: PUSH
25563: LD_INT 3
25565: PUSH
25566: EMPTY
25567: LIST
25568: LIST
25569: LIST
25570: LIST
25571: LIST
25572: LIST
25573: LIST
25574: ST_TO_ADDR
25575: GO 25706
25577: LD_INT 1
25579: DOUBLE
25580: EQUAL
25581: IFTRUE 25585
25583: GO 25647
25585: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
25586: LD_ADDR_VAR 0 3
25590: PUSH
25591: LD_INT 11
25593: PUSH
25594: LD_INT 12
25596: PUSH
25597: LD_INT 13
25599: PUSH
25600: LD_INT 14
25602: PUSH
25603: LD_INT 1
25605: PUSH
25606: LD_INT 2
25608: PUSH
25609: LD_INT 3
25611: PUSH
25612: LD_INT 4
25614: PUSH
25615: LD_INT 5
25617: PUSH
25618: LD_INT 21
25620: PUSH
25621: LD_INT 23
25623: PUSH
25624: LD_INT 22
25626: PUSH
25627: LD_INT 24
25629: PUSH
25630: EMPTY
25631: LIST
25632: LIST
25633: LIST
25634: LIST
25635: LIST
25636: LIST
25637: LIST
25638: LIST
25639: LIST
25640: LIST
25641: LIST
25642: LIST
25643: LIST
25644: ST_TO_ADDR
25645: GO 25706
25647: LD_INT 3
25649: DOUBLE
25650: EQUAL
25651: IFTRUE 25655
25653: GO 25705
25655: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
25656: LD_ADDR_VAR 0 3
25660: PUSH
25661: LD_INT 13
25663: PUSH
25664: LD_INT 14
25666: PUSH
25667: LD_INT 2
25669: PUSH
25670: LD_INT 3
25672: PUSH
25673: LD_INT 4
25675: PUSH
25676: LD_INT 5
25678: PUSH
25679: LD_INT 21
25681: PUSH
25682: LD_INT 22
25684: PUSH
25685: LD_INT 23
25687: PUSH
25688: LD_INT 24
25690: PUSH
25691: EMPTY
25692: LIST
25693: LIST
25694: LIST
25695: LIST
25696: LIST
25697: LIST
25698: LIST
25699: LIST
25700: LIST
25701: LIST
25702: ST_TO_ADDR
25703: GO 25706
25705: POP
// result := ( chassis in result ) ;
25706: LD_ADDR_VAR 0 3
25710: PUSH
25711: LD_VAR 0 1
25715: PUSH
25716: LD_VAR 0 3
25720: IN
25721: ST_TO_ADDR
// end ;
25722: LD_VAR 0 3
25726: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
25727: LD_INT 0
25729: PPUSH
// if not chassis or not weapon then
25730: LD_VAR 0 1
25734: NOT
25735: PUSH
25736: LD_VAR 0 2
25740: NOT
25741: OR
25742: IFFALSE 25746
// exit ;
25744: GO 26772
// case weapon of us_machine_gun :
25746: LD_VAR 0 2
25750: PUSH
25751: LD_INT 2
25753: DOUBLE
25754: EQUAL
25755: IFTRUE 25759
25757: GO 25789
25759: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
25760: LD_ADDR_VAR 0 3
25764: PUSH
25765: LD_INT 1
25767: PUSH
25768: LD_INT 2
25770: PUSH
25771: LD_INT 3
25773: PUSH
25774: LD_INT 4
25776: PUSH
25777: LD_INT 5
25779: PUSH
25780: EMPTY
25781: LIST
25782: LIST
25783: LIST
25784: LIST
25785: LIST
25786: ST_TO_ADDR
25787: GO 26756
25789: LD_INT 3
25791: DOUBLE
25792: EQUAL
25793: IFTRUE 25797
25795: GO 25827
25797: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
25798: LD_ADDR_VAR 0 3
25802: PUSH
25803: LD_INT 1
25805: PUSH
25806: LD_INT 2
25808: PUSH
25809: LD_INT 3
25811: PUSH
25812: LD_INT 4
25814: PUSH
25815: LD_INT 5
25817: PUSH
25818: EMPTY
25819: LIST
25820: LIST
25821: LIST
25822: LIST
25823: LIST
25824: ST_TO_ADDR
25825: GO 26756
25827: LD_INT 11
25829: DOUBLE
25830: EQUAL
25831: IFTRUE 25835
25833: GO 25865
25835: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
25836: LD_ADDR_VAR 0 3
25840: PUSH
25841: LD_INT 1
25843: PUSH
25844: LD_INT 2
25846: PUSH
25847: LD_INT 3
25849: PUSH
25850: LD_INT 4
25852: PUSH
25853: LD_INT 5
25855: PUSH
25856: EMPTY
25857: LIST
25858: LIST
25859: LIST
25860: LIST
25861: LIST
25862: ST_TO_ADDR
25863: GO 26756
25865: LD_INT 4
25867: DOUBLE
25868: EQUAL
25869: IFTRUE 25873
25871: GO 25899
25873: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
25874: LD_ADDR_VAR 0 3
25878: PUSH
25879: LD_INT 2
25881: PUSH
25882: LD_INT 3
25884: PUSH
25885: LD_INT 4
25887: PUSH
25888: LD_INT 5
25890: PUSH
25891: EMPTY
25892: LIST
25893: LIST
25894: LIST
25895: LIST
25896: ST_TO_ADDR
25897: GO 26756
25899: LD_INT 5
25901: DOUBLE
25902: EQUAL
25903: IFTRUE 25907
25905: GO 25933
25907: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
25908: LD_ADDR_VAR 0 3
25912: PUSH
25913: LD_INT 2
25915: PUSH
25916: LD_INT 3
25918: PUSH
25919: LD_INT 4
25921: PUSH
25922: LD_INT 5
25924: PUSH
25925: EMPTY
25926: LIST
25927: LIST
25928: LIST
25929: LIST
25930: ST_TO_ADDR
25931: GO 26756
25933: LD_INT 9
25935: DOUBLE
25936: EQUAL
25937: IFTRUE 25941
25939: GO 25967
25941: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
25942: LD_ADDR_VAR 0 3
25946: PUSH
25947: LD_INT 2
25949: PUSH
25950: LD_INT 3
25952: PUSH
25953: LD_INT 4
25955: PUSH
25956: LD_INT 5
25958: PUSH
25959: EMPTY
25960: LIST
25961: LIST
25962: LIST
25963: LIST
25964: ST_TO_ADDR
25965: GO 26756
25967: LD_INT 7
25969: DOUBLE
25970: EQUAL
25971: IFTRUE 25975
25973: GO 26001
25975: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
25976: LD_ADDR_VAR 0 3
25980: PUSH
25981: LD_INT 2
25983: PUSH
25984: LD_INT 3
25986: PUSH
25987: LD_INT 4
25989: PUSH
25990: LD_INT 5
25992: PUSH
25993: EMPTY
25994: LIST
25995: LIST
25996: LIST
25997: LIST
25998: ST_TO_ADDR
25999: GO 26756
26001: LD_INT 12
26003: DOUBLE
26004: EQUAL
26005: IFTRUE 26009
26007: GO 26035
26009: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
26010: LD_ADDR_VAR 0 3
26014: PUSH
26015: LD_INT 2
26017: PUSH
26018: LD_INT 3
26020: PUSH
26021: LD_INT 4
26023: PUSH
26024: LD_INT 5
26026: PUSH
26027: EMPTY
26028: LIST
26029: LIST
26030: LIST
26031: LIST
26032: ST_TO_ADDR
26033: GO 26756
26035: LD_INT 13
26037: DOUBLE
26038: EQUAL
26039: IFTRUE 26043
26041: GO 26069
26043: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
26044: LD_ADDR_VAR 0 3
26048: PUSH
26049: LD_INT 2
26051: PUSH
26052: LD_INT 3
26054: PUSH
26055: LD_INT 4
26057: PUSH
26058: LD_INT 5
26060: PUSH
26061: EMPTY
26062: LIST
26063: LIST
26064: LIST
26065: LIST
26066: ST_TO_ADDR
26067: GO 26756
26069: LD_INT 14
26071: DOUBLE
26072: EQUAL
26073: IFTRUE 26077
26075: GO 26095
26077: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
26078: LD_ADDR_VAR 0 3
26082: PUSH
26083: LD_INT 4
26085: PUSH
26086: LD_INT 5
26088: PUSH
26089: EMPTY
26090: LIST
26091: LIST
26092: ST_TO_ADDR
26093: GO 26756
26095: LD_INT 6
26097: DOUBLE
26098: EQUAL
26099: IFTRUE 26103
26101: GO 26121
26103: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
26104: LD_ADDR_VAR 0 3
26108: PUSH
26109: LD_INT 4
26111: PUSH
26112: LD_INT 5
26114: PUSH
26115: EMPTY
26116: LIST
26117: LIST
26118: ST_TO_ADDR
26119: GO 26756
26121: LD_INT 10
26123: DOUBLE
26124: EQUAL
26125: IFTRUE 26129
26127: GO 26147
26129: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
26130: LD_ADDR_VAR 0 3
26134: PUSH
26135: LD_INT 4
26137: PUSH
26138: LD_INT 5
26140: PUSH
26141: EMPTY
26142: LIST
26143: LIST
26144: ST_TO_ADDR
26145: GO 26756
26147: LD_INT 22
26149: DOUBLE
26150: EQUAL
26151: IFTRUE 26155
26153: GO 26181
26155: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
26156: LD_ADDR_VAR 0 3
26160: PUSH
26161: LD_INT 11
26163: PUSH
26164: LD_INT 12
26166: PUSH
26167: LD_INT 13
26169: PUSH
26170: LD_INT 14
26172: PUSH
26173: EMPTY
26174: LIST
26175: LIST
26176: LIST
26177: LIST
26178: ST_TO_ADDR
26179: GO 26756
26181: LD_INT 23
26183: DOUBLE
26184: EQUAL
26185: IFTRUE 26189
26187: GO 26215
26189: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
26190: LD_ADDR_VAR 0 3
26194: PUSH
26195: LD_INT 11
26197: PUSH
26198: LD_INT 12
26200: PUSH
26201: LD_INT 13
26203: PUSH
26204: LD_INT 14
26206: PUSH
26207: EMPTY
26208: LIST
26209: LIST
26210: LIST
26211: LIST
26212: ST_TO_ADDR
26213: GO 26756
26215: LD_INT 24
26217: DOUBLE
26218: EQUAL
26219: IFTRUE 26223
26221: GO 26249
26223: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
26224: LD_ADDR_VAR 0 3
26228: PUSH
26229: LD_INT 11
26231: PUSH
26232: LD_INT 12
26234: PUSH
26235: LD_INT 13
26237: PUSH
26238: LD_INT 14
26240: PUSH
26241: EMPTY
26242: LIST
26243: LIST
26244: LIST
26245: LIST
26246: ST_TO_ADDR
26247: GO 26756
26249: LD_INT 30
26251: DOUBLE
26252: EQUAL
26253: IFTRUE 26257
26255: GO 26283
26257: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
26258: LD_ADDR_VAR 0 3
26262: PUSH
26263: LD_INT 11
26265: PUSH
26266: LD_INT 12
26268: PUSH
26269: LD_INT 13
26271: PUSH
26272: LD_INT 14
26274: PUSH
26275: EMPTY
26276: LIST
26277: LIST
26278: LIST
26279: LIST
26280: ST_TO_ADDR
26281: GO 26756
26283: LD_INT 25
26285: DOUBLE
26286: EQUAL
26287: IFTRUE 26291
26289: GO 26309
26291: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
26292: LD_ADDR_VAR 0 3
26296: PUSH
26297: LD_INT 13
26299: PUSH
26300: LD_INT 14
26302: PUSH
26303: EMPTY
26304: LIST
26305: LIST
26306: ST_TO_ADDR
26307: GO 26756
26309: LD_INT 27
26311: DOUBLE
26312: EQUAL
26313: IFTRUE 26317
26315: GO 26335
26317: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
26318: LD_ADDR_VAR 0 3
26322: PUSH
26323: LD_INT 13
26325: PUSH
26326: LD_INT 14
26328: PUSH
26329: EMPTY
26330: LIST
26331: LIST
26332: ST_TO_ADDR
26333: GO 26756
26335: LD_INT 28
26337: DOUBLE
26338: EQUAL
26339: IFTRUE 26343
26341: GO 26361
26343: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
26344: LD_ADDR_VAR 0 3
26348: PUSH
26349: LD_INT 13
26351: PUSH
26352: LD_INT 14
26354: PUSH
26355: EMPTY
26356: LIST
26357: LIST
26358: ST_TO_ADDR
26359: GO 26756
26361: LD_INT 29
26363: DOUBLE
26364: EQUAL
26365: IFTRUE 26369
26367: GO 26387
26369: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
26370: LD_ADDR_VAR 0 3
26374: PUSH
26375: LD_INT 13
26377: PUSH
26378: LD_INT 14
26380: PUSH
26381: EMPTY
26382: LIST
26383: LIST
26384: ST_TO_ADDR
26385: GO 26756
26387: LD_INT 31
26389: DOUBLE
26390: EQUAL
26391: IFTRUE 26395
26393: GO 26413
26395: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
26396: LD_ADDR_VAR 0 3
26400: PUSH
26401: LD_INT 13
26403: PUSH
26404: LD_INT 14
26406: PUSH
26407: EMPTY
26408: LIST
26409: LIST
26410: ST_TO_ADDR
26411: GO 26756
26413: LD_INT 26
26415: DOUBLE
26416: EQUAL
26417: IFTRUE 26421
26419: GO 26439
26421: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
26422: LD_ADDR_VAR 0 3
26426: PUSH
26427: LD_INT 13
26429: PUSH
26430: LD_INT 14
26432: PUSH
26433: EMPTY
26434: LIST
26435: LIST
26436: ST_TO_ADDR
26437: GO 26756
26439: LD_INT 42
26441: DOUBLE
26442: EQUAL
26443: IFTRUE 26447
26445: GO 26473
26447: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
26448: LD_ADDR_VAR 0 3
26452: PUSH
26453: LD_INT 21
26455: PUSH
26456: LD_INT 22
26458: PUSH
26459: LD_INT 23
26461: PUSH
26462: LD_INT 24
26464: PUSH
26465: EMPTY
26466: LIST
26467: LIST
26468: LIST
26469: LIST
26470: ST_TO_ADDR
26471: GO 26756
26473: LD_INT 43
26475: DOUBLE
26476: EQUAL
26477: IFTRUE 26481
26479: GO 26507
26481: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
26482: LD_ADDR_VAR 0 3
26486: PUSH
26487: LD_INT 21
26489: PUSH
26490: LD_INT 22
26492: PUSH
26493: LD_INT 23
26495: PUSH
26496: LD_INT 24
26498: PUSH
26499: EMPTY
26500: LIST
26501: LIST
26502: LIST
26503: LIST
26504: ST_TO_ADDR
26505: GO 26756
26507: LD_INT 44
26509: DOUBLE
26510: EQUAL
26511: IFTRUE 26515
26513: GO 26541
26515: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
26516: LD_ADDR_VAR 0 3
26520: PUSH
26521: LD_INT 21
26523: PUSH
26524: LD_INT 22
26526: PUSH
26527: LD_INT 23
26529: PUSH
26530: LD_INT 24
26532: PUSH
26533: EMPTY
26534: LIST
26535: LIST
26536: LIST
26537: LIST
26538: ST_TO_ADDR
26539: GO 26756
26541: LD_INT 45
26543: DOUBLE
26544: EQUAL
26545: IFTRUE 26549
26547: GO 26575
26549: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
26550: LD_ADDR_VAR 0 3
26554: PUSH
26555: LD_INT 21
26557: PUSH
26558: LD_INT 22
26560: PUSH
26561: LD_INT 23
26563: PUSH
26564: LD_INT 24
26566: PUSH
26567: EMPTY
26568: LIST
26569: LIST
26570: LIST
26571: LIST
26572: ST_TO_ADDR
26573: GO 26756
26575: LD_INT 49
26577: DOUBLE
26578: EQUAL
26579: IFTRUE 26583
26581: GO 26609
26583: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
26584: LD_ADDR_VAR 0 3
26588: PUSH
26589: LD_INT 21
26591: PUSH
26592: LD_INT 22
26594: PUSH
26595: LD_INT 23
26597: PUSH
26598: LD_INT 24
26600: PUSH
26601: EMPTY
26602: LIST
26603: LIST
26604: LIST
26605: LIST
26606: ST_TO_ADDR
26607: GO 26756
26609: LD_INT 51
26611: DOUBLE
26612: EQUAL
26613: IFTRUE 26617
26615: GO 26643
26617: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
26618: LD_ADDR_VAR 0 3
26622: PUSH
26623: LD_INT 21
26625: PUSH
26626: LD_INT 22
26628: PUSH
26629: LD_INT 23
26631: PUSH
26632: LD_INT 24
26634: PUSH
26635: EMPTY
26636: LIST
26637: LIST
26638: LIST
26639: LIST
26640: ST_TO_ADDR
26641: GO 26756
26643: LD_INT 52
26645: DOUBLE
26646: EQUAL
26647: IFTRUE 26651
26649: GO 26677
26651: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
26652: LD_ADDR_VAR 0 3
26656: PUSH
26657: LD_INT 21
26659: PUSH
26660: LD_INT 22
26662: PUSH
26663: LD_INT 23
26665: PUSH
26666: LD_INT 24
26668: PUSH
26669: EMPTY
26670: LIST
26671: LIST
26672: LIST
26673: LIST
26674: ST_TO_ADDR
26675: GO 26756
26677: LD_INT 53
26679: DOUBLE
26680: EQUAL
26681: IFTRUE 26685
26683: GO 26703
26685: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
26686: LD_ADDR_VAR 0 3
26690: PUSH
26691: LD_INT 23
26693: PUSH
26694: LD_INT 24
26696: PUSH
26697: EMPTY
26698: LIST
26699: LIST
26700: ST_TO_ADDR
26701: GO 26756
26703: LD_INT 46
26705: DOUBLE
26706: EQUAL
26707: IFTRUE 26711
26709: GO 26729
26711: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
26712: LD_ADDR_VAR 0 3
26716: PUSH
26717: LD_INT 23
26719: PUSH
26720: LD_INT 24
26722: PUSH
26723: EMPTY
26724: LIST
26725: LIST
26726: ST_TO_ADDR
26727: GO 26756
26729: LD_INT 47
26731: DOUBLE
26732: EQUAL
26733: IFTRUE 26737
26735: GO 26755
26737: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
26738: LD_ADDR_VAR 0 3
26742: PUSH
26743: LD_INT 23
26745: PUSH
26746: LD_INT 24
26748: PUSH
26749: EMPTY
26750: LIST
26751: LIST
26752: ST_TO_ADDR
26753: GO 26756
26755: POP
// result := ( chassis in result ) ;
26756: LD_ADDR_VAR 0 3
26760: PUSH
26761: LD_VAR 0 1
26765: PUSH
26766: LD_VAR 0 3
26770: IN
26771: ST_TO_ADDR
// end ;
26772: LD_VAR 0 3
26776: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
26777: LD_INT 0
26779: PPUSH
26780: PPUSH
26781: PPUSH
26782: PPUSH
26783: PPUSH
26784: PPUSH
26785: PPUSH
// result := array ;
26786: LD_ADDR_VAR 0 5
26790: PUSH
26791: LD_VAR 0 1
26795: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
26796: LD_VAR 0 1
26800: NOT
26801: PUSH
26802: LD_VAR 0 2
26806: NOT
26807: OR
26808: PUSH
26809: LD_VAR 0 3
26813: NOT
26814: OR
26815: PUSH
26816: LD_VAR 0 2
26820: PUSH
26821: LD_VAR 0 1
26825: GREATER
26826: OR
26827: PUSH
26828: LD_VAR 0 3
26832: PUSH
26833: LD_VAR 0 1
26837: GREATER
26838: OR
26839: IFFALSE 26843
// exit ;
26841: GO 27139
// if direction then
26843: LD_VAR 0 4
26847: IFFALSE 26911
// begin d := 1 ;
26849: LD_ADDR_VAR 0 9
26853: PUSH
26854: LD_INT 1
26856: ST_TO_ADDR
// if i_from > i_to then
26857: LD_VAR 0 2
26861: PUSH
26862: LD_VAR 0 3
26866: GREATER
26867: IFFALSE 26893
// length := ( array - i_from ) + i_to else
26869: LD_ADDR_VAR 0 11
26873: PUSH
26874: LD_VAR 0 1
26878: PUSH
26879: LD_VAR 0 2
26883: MINUS
26884: PUSH
26885: LD_VAR 0 3
26889: PLUS
26890: ST_TO_ADDR
26891: GO 26909
// length := i_to - i_from ;
26893: LD_ADDR_VAR 0 11
26897: PUSH
26898: LD_VAR 0 3
26902: PUSH
26903: LD_VAR 0 2
26907: MINUS
26908: ST_TO_ADDR
// end else
26909: GO 26972
// begin d := - 1 ;
26911: LD_ADDR_VAR 0 9
26915: PUSH
26916: LD_INT 1
26918: NEG
26919: ST_TO_ADDR
// if i_from > i_to then
26920: LD_VAR 0 2
26924: PUSH
26925: LD_VAR 0 3
26929: GREATER
26930: IFFALSE 26950
// length := i_from - i_to else
26932: LD_ADDR_VAR 0 11
26936: PUSH
26937: LD_VAR 0 2
26941: PUSH
26942: LD_VAR 0 3
26946: MINUS
26947: ST_TO_ADDR
26948: GO 26972
// length := ( array - i_to ) + i_from ;
26950: LD_ADDR_VAR 0 11
26954: PUSH
26955: LD_VAR 0 1
26959: PUSH
26960: LD_VAR 0 3
26964: MINUS
26965: PUSH
26966: LD_VAR 0 2
26970: PLUS
26971: ST_TO_ADDR
// end ; if not length then
26972: LD_VAR 0 11
26976: NOT
26977: IFFALSE 26981
// exit ;
26979: GO 27139
// tmp := array ;
26981: LD_ADDR_VAR 0 10
26985: PUSH
26986: LD_VAR 0 1
26990: ST_TO_ADDR
// for i = 1 to length do
26991: LD_ADDR_VAR 0 6
26995: PUSH
26996: DOUBLE
26997: LD_INT 1
26999: DEC
27000: ST_TO_ADDR
27001: LD_VAR 0 11
27005: PUSH
27006: FOR_TO
27007: IFFALSE 27127
// begin for j = 1 to array do
27009: LD_ADDR_VAR 0 7
27013: PUSH
27014: DOUBLE
27015: LD_INT 1
27017: DEC
27018: ST_TO_ADDR
27019: LD_VAR 0 1
27023: PUSH
27024: FOR_TO
27025: IFFALSE 27113
// begin k := j + d ;
27027: LD_ADDR_VAR 0 8
27031: PUSH
27032: LD_VAR 0 7
27036: PUSH
27037: LD_VAR 0 9
27041: PLUS
27042: ST_TO_ADDR
// if k > array then
27043: LD_VAR 0 8
27047: PUSH
27048: LD_VAR 0 1
27052: GREATER
27053: IFFALSE 27063
// k := 1 ;
27055: LD_ADDR_VAR 0 8
27059: PUSH
27060: LD_INT 1
27062: ST_TO_ADDR
// if not k then
27063: LD_VAR 0 8
27067: NOT
27068: IFFALSE 27080
// k := array ;
27070: LD_ADDR_VAR 0 8
27074: PUSH
27075: LD_VAR 0 1
27079: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
27080: LD_ADDR_VAR 0 10
27084: PUSH
27085: LD_VAR 0 10
27089: PPUSH
27090: LD_VAR 0 8
27094: PPUSH
27095: LD_VAR 0 1
27099: PUSH
27100: LD_VAR 0 7
27104: ARRAY
27105: PPUSH
27106: CALL_OW 1
27110: ST_TO_ADDR
// end ;
27111: GO 27024
27113: POP
27114: POP
// array := tmp ;
27115: LD_ADDR_VAR 0 1
27119: PUSH
27120: LD_VAR 0 10
27124: ST_TO_ADDR
// end ;
27125: GO 27006
27127: POP
27128: POP
// result := array ;
27129: LD_ADDR_VAR 0 5
27133: PUSH
27134: LD_VAR 0 1
27138: ST_TO_ADDR
// end ;
27139: LD_VAR 0 5
27143: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
27144: LD_INT 0
27146: PPUSH
27147: PPUSH
// result := 0 ;
27148: LD_ADDR_VAR 0 3
27152: PUSH
27153: LD_INT 0
27155: ST_TO_ADDR
// if not array or not value in array then
27156: LD_VAR 0 1
27160: NOT
27161: PUSH
27162: LD_VAR 0 2
27166: PUSH
27167: LD_VAR 0 1
27171: IN
27172: NOT
27173: OR
27174: IFFALSE 27178
// exit ;
27176: GO 27232
// for i = 1 to array do
27178: LD_ADDR_VAR 0 4
27182: PUSH
27183: DOUBLE
27184: LD_INT 1
27186: DEC
27187: ST_TO_ADDR
27188: LD_VAR 0 1
27192: PUSH
27193: FOR_TO
27194: IFFALSE 27230
// if value = array [ i ] then
27196: LD_VAR 0 2
27200: PUSH
27201: LD_VAR 0 1
27205: PUSH
27206: LD_VAR 0 4
27210: ARRAY
27211: EQUAL
27212: IFFALSE 27228
// begin result := i ;
27214: LD_ADDR_VAR 0 3
27218: PUSH
27219: LD_VAR 0 4
27223: ST_TO_ADDR
// exit ;
27224: POP
27225: POP
27226: GO 27232
// end ;
27228: GO 27193
27230: POP
27231: POP
// end ;
27232: LD_VAR 0 3
27236: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
27237: LD_INT 0
27239: PPUSH
// vc_chassis := chassis ;
27240: LD_ADDR_OWVAR 37
27244: PUSH
27245: LD_VAR 0 1
27249: ST_TO_ADDR
// vc_engine := engine ;
27250: LD_ADDR_OWVAR 39
27254: PUSH
27255: LD_VAR 0 2
27259: ST_TO_ADDR
// vc_control := control ;
27260: LD_ADDR_OWVAR 38
27264: PUSH
27265: LD_VAR 0 3
27269: ST_TO_ADDR
// vc_weapon := weapon ;
27270: LD_ADDR_OWVAR 40
27274: PUSH
27275: LD_VAR 0 4
27279: ST_TO_ADDR
// vc_fuel_battery := fuel ;
27280: LD_ADDR_OWVAR 41
27284: PUSH
27285: LD_VAR 0 5
27289: ST_TO_ADDR
// end ;
27290: LD_VAR 0 6
27294: RET
// export function WantPlant ( unit ) ; var task ; begin
27295: LD_INT 0
27297: PPUSH
27298: PPUSH
// result := false ;
27299: LD_ADDR_VAR 0 2
27303: PUSH
27304: LD_INT 0
27306: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
27307: LD_ADDR_VAR 0 3
27311: PUSH
27312: LD_VAR 0 1
27316: PPUSH
27317: CALL_OW 437
27321: ST_TO_ADDR
// if task then
27322: LD_VAR 0 3
27326: IFFALSE 27354
// if task [ 1 ] [ 1 ] = p then
27328: LD_VAR 0 3
27332: PUSH
27333: LD_INT 1
27335: ARRAY
27336: PUSH
27337: LD_INT 1
27339: ARRAY
27340: PUSH
27341: LD_STRING p
27343: EQUAL
27344: IFFALSE 27354
// result := true ;
27346: LD_ADDR_VAR 0 2
27350: PUSH
27351: LD_INT 1
27353: ST_TO_ADDR
// end ;
27354: LD_VAR 0 2
27358: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
27359: LD_INT 0
27361: PPUSH
27362: PPUSH
27363: PPUSH
27364: PPUSH
// if pos < 1 then
27365: LD_VAR 0 2
27369: PUSH
27370: LD_INT 1
27372: LESS
27373: IFFALSE 27377
// exit ;
27375: GO 27680
// if pos = 1 then
27377: LD_VAR 0 2
27381: PUSH
27382: LD_INT 1
27384: EQUAL
27385: IFFALSE 27418
// result := Replace ( arr , pos [ 1 ] , value ) else
27387: LD_ADDR_VAR 0 4
27391: PUSH
27392: LD_VAR 0 1
27396: PPUSH
27397: LD_VAR 0 2
27401: PUSH
27402: LD_INT 1
27404: ARRAY
27405: PPUSH
27406: LD_VAR 0 3
27410: PPUSH
27411: CALL_OW 1
27415: ST_TO_ADDR
27416: GO 27680
// begin tmp := arr ;
27418: LD_ADDR_VAR 0 6
27422: PUSH
27423: LD_VAR 0 1
27427: ST_TO_ADDR
// s_arr := [ tmp ] ;
27428: LD_ADDR_VAR 0 7
27432: PUSH
27433: LD_VAR 0 6
27437: PUSH
27438: EMPTY
27439: LIST
27440: ST_TO_ADDR
// for i = 1 to pos - 1 do
27441: LD_ADDR_VAR 0 5
27445: PUSH
27446: DOUBLE
27447: LD_INT 1
27449: DEC
27450: ST_TO_ADDR
27451: LD_VAR 0 2
27455: PUSH
27456: LD_INT 1
27458: MINUS
27459: PUSH
27460: FOR_TO
27461: IFFALSE 27506
// begin tmp := tmp [ pos [ i ] ] ;
27463: LD_ADDR_VAR 0 6
27467: PUSH
27468: LD_VAR 0 6
27472: PUSH
27473: LD_VAR 0 2
27477: PUSH
27478: LD_VAR 0 5
27482: ARRAY
27483: ARRAY
27484: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
27485: LD_ADDR_VAR 0 7
27489: PUSH
27490: LD_VAR 0 7
27494: PUSH
27495: LD_VAR 0 6
27499: PUSH
27500: EMPTY
27501: LIST
27502: ADD
27503: ST_TO_ADDR
// end ;
27504: GO 27460
27506: POP
27507: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
27508: LD_ADDR_VAR 0 6
27512: PUSH
27513: LD_VAR 0 6
27517: PPUSH
27518: LD_VAR 0 2
27522: PUSH
27523: LD_VAR 0 2
27527: ARRAY
27528: PPUSH
27529: LD_VAR 0 3
27533: PPUSH
27534: CALL_OW 1
27538: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
27539: LD_ADDR_VAR 0 7
27543: PUSH
27544: LD_VAR 0 7
27548: PPUSH
27549: LD_VAR 0 7
27553: PPUSH
27554: LD_VAR 0 6
27558: PPUSH
27559: CALL_OW 1
27563: ST_TO_ADDR
// for i = s_arr downto 2 do
27564: LD_ADDR_VAR 0 5
27568: PUSH
27569: DOUBLE
27570: LD_VAR 0 7
27574: INC
27575: ST_TO_ADDR
27576: LD_INT 2
27578: PUSH
27579: FOR_DOWNTO
27580: IFFALSE 27664
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
27582: LD_ADDR_VAR 0 6
27586: PUSH
27587: LD_VAR 0 7
27591: PUSH
27592: LD_VAR 0 5
27596: PUSH
27597: LD_INT 1
27599: MINUS
27600: ARRAY
27601: PPUSH
27602: LD_VAR 0 2
27606: PUSH
27607: LD_VAR 0 5
27611: PUSH
27612: LD_INT 1
27614: MINUS
27615: ARRAY
27616: PPUSH
27617: LD_VAR 0 7
27621: PUSH
27622: LD_VAR 0 5
27626: ARRAY
27627: PPUSH
27628: CALL_OW 1
27632: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
27633: LD_ADDR_VAR 0 7
27637: PUSH
27638: LD_VAR 0 7
27642: PPUSH
27643: LD_VAR 0 5
27647: PUSH
27648: LD_INT 1
27650: MINUS
27651: PPUSH
27652: LD_VAR 0 6
27656: PPUSH
27657: CALL_OW 1
27661: ST_TO_ADDR
// end ;
27662: GO 27579
27664: POP
27665: POP
// result := s_arr [ 1 ] ;
27666: LD_ADDR_VAR 0 4
27670: PUSH
27671: LD_VAR 0 7
27675: PUSH
27676: LD_INT 1
27678: ARRAY
27679: ST_TO_ADDR
// end ; end ;
27680: LD_VAR 0 4
27684: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
27685: LD_INT 0
27687: PPUSH
27688: PPUSH
// if not list then
27689: LD_VAR 0 1
27693: NOT
27694: IFFALSE 27698
// exit ;
27696: GO 27789
// i := list [ pos1 ] ;
27698: LD_ADDR_VAR 0 5
27702: PUSH
27703: LD_VAR 0 1
27707: PUSH
27708: LD_VAR 0 2
27712: ARRAY
27713: ST_TO_ADDR
// if not i then
27714: LD_VAR 0 5
27718: NOT
27719: IFFALSE 27723
// exit ;
27721: GO 27789
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
27723: LD_ADDR_VAR 0 1
27727: PUSH
27728: LD_VAR 0 1
27732: PPUSH
27733: LD_VAR 0 2
27737: PPUSH
27738: LD_VAR 0 1
27742: PUSH
27743: LD_VAR 0 3
27747: ARRAY
27748: PPUSH
27749: CALL_OW 1
27753: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
27754: LD_ADDR_VAR 0 1
27758: PUSH
27759: LD_VAR 0 1
27763: PPUSH
27764: LD_VAR 0 3
27768: PPUSH
27769: LD_VAR 0 5
27773: PPUSH
27774: CALL_OW 1
27778: ST_TO_ADDR
// result := list ;
27779: LD_ADDR_VAR 0 4
27783: PUSH
27784: LD_VAR 0 1
27788: ST_TO_ADDR
// end ;
27789: LD_VAR 0 4
27793: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
27794: LD_INT 0
27796: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
27797: LD_ADDR_VAR 0 5
27801: PUSH
27802: LD_VAR 0 1
27806: PPUSH
27807: CALL_OW 250
27811: PPUSH
27812: LD_VAR 0 1
27816: PPUSH
27817: CALL_OW 251
27821: PPUSH
27822: LD_VAR 0 2
27826: PPUSH
27827: LD_VAR 0 3
27831: PPUSH
27832: LD_VAR 0 4
27836: PPUSH
27837: CALL 27847 0 5
27841: ST_TO_ADDR
// end ;
27842: LD_VAR 0 5
27846: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
27847: LD_INT 0
27849: PPUSH
27850: PPUSH
27851: PPUSH
27852: PPUSH
// if not list then
27853: LD_VAR 0 3
27857: NOT
27858: IFFALSE 27862
// exit ;
27860: GO 28250
// result := [ ] ;
27862: LD_ADDR_VAR 0 6
27866: PUSH
27867: EMPTY
27868: ST_TO_ADDR
// for i in list do
27869: LD_ADDR_VAR 0 7
27873: PUSH
27874: LD_VAR 0 3
27878: PUSH
27879: FOR_IN
27880: IFFALSE 28082
// begin tmp := GetDistUnitXY ( i , x , y ) ;
27882: LD_ADDR_VAR 0 9
27886: PUSH
27887: LD_VAR 0 7
27891: PPUSH
27892: LD_VAR 0 1
27896: PPUSH
27897: LD_VAR 0 2
27901: PPUSH
27902: CALL_OW 297
27906: ST_TO_ADDR
// if not result then
27907: LD_VAR 0 6
27911: NOT
27912: IFFALSE 27938
// result := [ [ i , tmp ] ] else
27914: LD_ADDR_VAR 0 6
27918: PUSH
27919: LD_VAR 0 7
27923: PUSH
27924: LD_VAR 0 9
27928: PUSH
27929: EMPTY
27930: LIST
27931: LIST
27932: PUSH
27933: EMPTY
27934: LIST
27935: ST_TO_ADDR
27936: GO 28080
// begin if result [ result ] [ 2 ] < tmp then
27938: LD_VAR 0 6
27942: PUSH
27943: LD_VAR 0 6
27947: ARRAY
27948: PUSH
27949: LD_INT 2
27951: ARRAY
27952: PUSH
27953: LD_VAR 0 9
27957: LESS
27958: IFFALSE 28000
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
27960: LD_ADDR_VAR 0 6
27964: PUSH
27965: LD_VAR 0 6
27969: PPUSH
27970: LD_VAR 0 6
27974: PUSH
27975: LD_INT 1
27977: PLUS
27978: PPUSH
27979: LD_VAR 0 7
27983: PUSH
27984: LD_VAR 0 9
27988: PUSH
27989: EMPTY
27990: LIST
27991: LIST
27992: PPUSH
27993: CALL_OW 2
27997: ST_TO_ADDR
27998: GO 28080
// for j = 1 to result do
28000: LD_ADDR_VAR 0 8
28004: PUSH
28005: DOUBLE
28006: LD_INT 1
28008: DEC
28009: ST_TO_ADDR
28010: LD_VAR 0 6
28014: PUSH
28015: FOR_TO
28016: IFFALSE 28078
// begin if tmp < result [ j ] [ 2 ] then
28018: LD_VAR 0 9
28022: PUSH
28023: LD_VAR 0 6
28027: PUSH
28028: LD_VAR 0 8
28032: ARRAY
28033: PUSH
28034: LD_INT 2
28036: ARRAY
28037: LESS
28038: IFFALSE 28076
// begin result := Insert ( result , j , [ i , tmp ] ) ;
28040: LD_ADDR_VAR 0 6
28044: PUSH
28045: LD_VAR 0 6
28049: PPUSH
28050: LD_VAR 0 8
28054: PPUSH
28055: LD_VAR 0 7
28059: PUSH
28060: LD_VAR 0 9
28064: PUSH
28065: EMPTY
28066: LIST
28067: LIST
28068: PPUSH
28069: CALL_OW 2
28073: ST_TO_ADDR
// break ;
28074: GO 28078
// end ; end ;
28076: GO 28015
28078: POP
28079: POP
// end ; end ;
28080: GO 27879
28082: POP
28083: POP
// if result and not asc then
28084: LD_VAR 0 6
28088: PUSH
28089: LD_VAR 0 4
28093: NOT
28094: AND
28095: IFFALSE 28170
// begin tmp := result ;
28097: LD_ADDR_VAR 0 9
28101: PUSH
28102: LD_VAR 0 6
28106: ST_TO_ADDR
// for i = tmp downto 1 do
28107: LD_ADDR_VAR 0 7
28111: PUSH
28112: DOUBLE
28113: LD_VAR 0 9
28117: INC
28118: ST_TO_ADDR
28119: LD_INT 1
28121: PUSH
28122: FOR_DOWNTO
28123: IFFALSE 28168
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
28125: LD_ADDR_VAR 0 6
28129: PUSH
28130: LD_VAR 0 6
28134: PPUSH
28135: LD_VAR 0 9
28139: PUSH
28140: LD_VAR 0 7
28144: MINUS
28145: PUSH
28146: LD_INT 1
28148: PLUS
28149: PPUSH
28150: LD_VAR 0 9
28154: PUSH
28155: LD_VAR 0 7
28159: ARRAY
28160: PPUSH
28161: CALL_OW 1
28165: ST_TO_ADDR
28166: GO 28122
28168: POP
28169: POP
// end ; tmp := [ ] ;
28170: LD_ADDR_VAR 0 9
28174: PUSH
28175: EMPTY
28176: ST_TO_ADDR
// if mode then
28177: LD_VAR 0 5
28181: IFFALSE 28250
// begin for i = 1 to result do
28183: LD_ADDR_VAR 0 7
28187: PUSH
28188: DOUBLE
28189: LD_INT 1
28191: DEC
28192: ST_TO_ADDR
28193: LD_VAR 0 6
28197: PUSH
28198: FOR_TO
28199: IFFALSE 28238
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
28201: LD_ADDR_VAR 0 9
28205: PUSH
28206: LD_VAR 0 9
28210: PPUSH
28211: LD_VAR 0 7
28215: PPUSH
28216: LD_VAR 0 6
28220: PUSH
28221: LD_VAR 0 7
28225: ARRAY
28226: PUSH
28227: LD_INT 1
28229: ARRAY
28230: PPUSH
28231: CALL_OW 1
28235: ST_TO_ADDR
28236: GO 28198
28238: POP
28239: POP
// result := tmp ;
28240: LD_ADDR_VAR 0 6
28244: PUSH
28245: LD_VAR 0 9
28249: ST_TO_ADDR
// end ; end ;
28250: LD_VAR 0 6
28254: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
28255: LD_INT 0
28257: PPUSH
28258: PPUSH
28259: PPUSH
28260: PPUSH
28261: PPUSH
28262: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
28263: LD_ADDR_VAR 0 5
28267: PUSH
28268: LD_INT 0
28270: PUSH
28271: LD_INT 0
28273: PUSH
28274: LD_INT 0
28276: PUSH
28277: EMPTY
28278: PUSH
28279: EMPTY
28280: LIST
28281: LIST
28282: LIST
28283: LIST
28284: ST_TO_ADDR
// if not x or not y then
28285: LD_VAR 0 2
28289: NOT
28290: PUSH
28291: LD_VAR 0 3
28295: NOT
28296: OR
28297: IFFALSE 28301
// exit ;
28299: GO 29947
// if not range then
28301: LD_VAR 0 4
28305: NOT
28306: IFFALSE 28316
// range := 10 ;
28308: LD_ADDR_VAR 0 4
28312: PUSH
28313: LD_INT 10
28315: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
28316: LD_ADDR_VAR 0 8
28320: PUSH
28321: LD_INT 81
28323: PUSH
28324: LD_VAR 0 1
28328: PUSH
28329: EMPTY
28330: LIST
28331: LIST
28332: PUSH
28333: LD_INT 92
28335: PUSH
28336: LD_VAR 0 2
28340: PUSH
28341: LD_VAR 0 3
28345: PUSH
28346: LD_VAR 0 4
28350: PUSH
28351: EMPTY
28352: LIST
28353: LIST
28354: LIST
28355: LIST
28356: PUSH
28357: LD_INT 3
28359: PUSH
28360: LD_INT 21
28362: PUSH
28363: LD_INT 3
28365: PUSH
28366: EMPTY
28367: LIST
28368: LIST
28369: PUSH
28370: EMPTY
28371: LIST
28372: LIST
28373: PUSH
28374: EMPTY
28375: LIST
28376: LIST
28377: LIST
28378: PPUSH
28379: CALL_OW 69
28383: ST_TO_ADDR
// if not tmp then
28384: LD_VAR 0 8
28388: NOT
28389: IFFALSE 28393
// exit ;
28391: GO 29947
// for i in tmp do
28393: LD_ADDR_VAR 0 6
28397: PUSH
28398: LD_VAR 0 8
28402: PUSH
28403: FOR_IN
28404: IFFALSE 29922
// begin points := [ 0 , 0 , 0 ] ;
28406: LD_ADDR_VAR 0 9
28410: PUSH
28411: LD_INT 0
28413: PUSH
28414: LD_INT 0
28416: PUSH
28417: LD_INT 0
28419: PUSH
28420: EMPTY
28421: LIST
28422: LIST
28423: LIST
28424: ST_TO_ADDR
// bpoints := 1 ;
28425: LD_ADDR_VAR 0 10
28429: PUSH
28430: LD_INT 1
28432: ST_TO_ADDR
// case GetType ( i ) of unit_human :
28433: LD_VAR 0 6
28437: PPUSH
28438: CALL_OW 247
28442: PUSH
28443: LD_INT 1
28445: DOUBLE
28446: EQUAL
28447: IFTRUE 28451
28449: GO 29029
28451: POP
// begin if GetClass ( i ) = 1 then
28452: LD_VAR 0 6
28456: PPUSH
28457: CALL_OW 257
28461: PUSH
28462: LD_INT 1
28464: EQUAL
28465: IFFALSE 28486
// points := [ 10 , 5 , 3 ] ;
28467: LD_ADDR_VAR 0 9
28471: PUSH
28472: LD_INT 10
28474: PUSH
28475: LD_INT 5
28477: PUSH
28478: LD_INT 3
28480: PUSH
28481: EMPTY
28482: LIST
28483: LIST
28484: LIST
28485: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
28486: LD_VAR 0 6
28490: PPUSH
28491: CALL_OW 257
28495: PUSH
28496: LD_INT 2
28498: PUSH
28499: LD_INT 3
28501: PUSH
28502: LD_INT 4
28504: PUSH
28505: EMPTY
28506: LIST
28507: LIST
28508: LIST
28509: IN
28510: IFFALSE 28531
// points := [ 3 , 2 , 1 ] ;
28512: LD_ADDR_VAR 0 9
28516: PUSH
28517: LD_INT 3
28519: PUSH
28520: LD_INT 2
28522: PUSH
28523: LD_INT 1
28525: PUSH
28526: EMPTY
28527: LIST
28528: LIST
28529: LIST
28530: ST_TO_ADDR
// if GetClass ( i ) = 5 then
28531: LD_VAR 0 6
28535: PPUSH
28536: CALL_OW 257
28540: PUSH
28541: LD_INT 5
28543: EQUAL
28544: IFFALSE 28565
// points := [ 130 , 5 , 2 ] ;
28546: LD_ADDR_VAR 0 9
28550: PUSH
28551: LD_INT 130
28553: PUSH
28554: LD_INT 5
28556: PUSH
28557: LD_INT 2
28559: PUSH
28560: EMPTY
28561: LIST
28562: LIST
28563: LIST
28564: ST_TO_ADDR
// if GetClass ( i ) = 8 then
28565: LD_VAR 0 6
28569: PPUSH
28570: CALL_OW 257
28574: PUSH
28575: LD_INT 8
28577: EQUAL
28578: IFFALSE 28599
// points := [ 35 , 35 , 30 ] ;
28580: LD_ADDR_VAR 0 9
28584: PUSH
28585: LD_INT 35
28587: PUSH
28588: LD_INT 35
28590: PUSH
28591: LD_INT 30
28593: PUSH
28594: EMPTY
28595: LIST
28596: LIST
28597: LIST
28598: ST_TO_ADDR
// if GetClass ( i ) = 9 then
28599: LD_VAR 0 6
28603: PPUSH
28604: CALL_OW 257
28608: PUSH
28609: LD_INT 9
28611: EQUAL
28612: IFFALSE 28633
// points := [ 20 , 55 , 40 ] ;
28614: LD_ADDR_VAR 0 9
28618: PUSH
28619: LD_INT 20
28621: PUSH
28622: LD_INT 55
28624: PUSH
28625: LD_INT 40
28627: PUSH
28628: EMPTY
28629: LIST
28630: LIST
28631: LIST
28632: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
28633: LD_VAR 0 6
28637: PPUSH
28638: CALL_OW 257
28642: PUSH
28643: LD_INT 12
28645: PUSH
28646: LD_INT 16
28648: PUSH
28649: EMPTY
28650: LIST
28651: LIST
28652: IN
28653: IFFALSE 28674
// points := [ 5 , 3 , 2 ] ;
28655: LD_ADDR_VAR 0 9
28659: PUSH
28660: LD_INT 5
28662: PUSH
28663: LD_INT 3
28665: PUSH
28666: LD_INT 2
28668: PUSH
28669: EMPTY
28670: LIST
28671: LIST
28672: LIST
28673: ST_TO_ADDR
// if GetClass ( i ) = 17 then
28674: LD_VAR 0 6
28678: PPUSH
28679: CALL_OW 257
28683: PUSH
28684: LD_INT 17
28686: EQUAL
28687: IFFALSE 28708
// points := [ 100 , 50 , 75 ] ;
28689: LD_ADDR_VAR 0 9
28693: PUSH
28694: LD_INT 100
28696: PUSH
28697: LD_INT 50
28699: PUSH
28700: LD_INT 75
28702: PUSH
28703: EMPTY
28704: LIST
28705: LIST
28706: LIST
28707: ST_TO_ADDR
// if GetClass ( i ) = 15 then
28708: LD_VAR 0 6
28712: PPUSH
28713: CALL_OW 257
28717: PUSH
28718: LD_INT 15
28720: EQUAL
28721: IFFALSE 28742
// points := [ 10 , 5 , 3 ] ;
28723: LD_ADDR_VAR 0 9
28727: PUSH
28728: LD_INT 10
28730: PUSH
28731: LD_INT 5
28733: PUSH
28734: LD_INT 3
28736: PUSH
28737: EMPTY
28738: LIST
28739: LIST
28740: LIST
28741: ST_TO_ADDR
// if GetClass ( i ) = 14 then
28742: LD_VAR 0 6
28746: PPUSH
28747: CALL_OW 257
28751: PUSH
28752: LD_INT 14
28754: EQUAL
28755: IFFALSE 28776
// points := [ 10 , 0 , 0 ] ;
28757: LD_ADDR_VAR 0 9
28761: PUSH
28762: LD_INT 10
28764: PUSH
28765: LD_INT 0
28767: PUSH
28768: LD_INT 0
28770: PUSH
28771: EMPTY
28772: LIST
28773: LIST
28774: LIST
28775: ST_TO_ADDR
// if GetClass ( i ) = 11 then
28776: LD_VAR 0 6
28780: PPUSH
28781: CALL_OW 257
28785: PUSH
28786: LD_INT 11
28788: EQUAL
28789: IFFALSE 28810
// points := [ 30 , 10 , 5 ] ;
28791: LD_ADDR_VAR 0 9
28795: PUSH
28796: LD_INT 30
28798: PUSH
28799: LD_INT 10
28801: PUSH
28802: LD_INT 5
28804: PUSH
28805: EMPTY
28806: LIST
28807: LIST
28808: LIST
28809: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
28810: LD_VAR 0 1
28814: PPUSH
28815: LD_INT 5
28817: PPUSH
28818: CALL_OW 321
28822: PUSH
28823: LD_INT 2
28825: EQUAL
28826: IFFALSE 28843
// bpoints := bpoints * 1.8 ;
28828: LD_ADDR_VAR 0 10
28832: PUSH
28833: LD_VAR 0 10
28837: PUSH
28838: LD_REAL  1.80000000000000E+0000
28841: MUL
28842: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
28843: LD_VAR 0 6
28847: PPUSH
28848: CALL_OW 257
28852: PUSH
28853: LD_INT 1
28855: PUSH
28856: LD_INT 2
28858: PUSH
28859: LD_INT 3
28861: PUSH
28862: LD_INT 4
28864: PUSH
28865: EMPTY
28866: LIST
28867: LIST
28868: LIST
28869: LIST
28870: IN
28871: PUSH
28872: LD_VAR 0 1
28876: PPUSH
28877: LD_INT 51
28879: PPUSH
28880: CALL_OW 321
28884: PUSH
28885: LD_INT 2
28887: EQUAL
28888: AND
28889: IFFALSE 28906
// bpoints := bpoints * 1.2 ;
28891: LD_ADDR_VAR 0 10
28895: PUSH
28896: LD_VAR 0 10
28900: PUSH
28901: LD_REAL  1.20000000000000E+0000
28904: MUL
28905: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
28906: LD_VAR 0 6
28910: PPUSH
28911: CALL_OW 257
28915: PUSH
28916: LD_INT 5
28918: PUSH
28919: LD_INT 7
28921: PUSH
28922: LD_INT 9
28924: PUSH
28925: EMPTY
28926: LIST
28927: LIST
28928: LIST
28929: IN
28930: PUSH
28931: LD_VAR 0 1
28935: PPUSH
28936: LD_INT 52
28938: PPUSH
28939: CALL_OW 321
28943: PUSH
28944: LD_INT 2
28946: EQUAL
28947: AND
28948: IFFALSE 28965
// bpoints := bpoints * 1.5 ;
28950: LD_ADDR_VAR 0 10
28954: PUSH
28955: LD_VAR 0 10
28959: PUSH
28960: LD_REAL  1.50000000000000E+0000
28963: MUL
28964: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
28965: LD_VAR 0 1
28969: PPUSH
28970: LD_INT 66
28972: PPUSH
28973: CALL_OW 321
28977: PUSH
28978: LD_INT 2
28980: EQUAL
28981: IFFALSE 28998
// bpoints := bpoints * 1.1 ;
28983: LD_ADDR_VAR 0 10
28987: PUSH
28988: LD_VAR 0 10
28992: PUSH
28993: LD_REAL  1.10000000000000E+0000
28996: MUL
28997: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
28998: LD_ADDR_VAR 0 10
29002: PUSH
29003: LD_VAR 0 10
29007: PUSH
29008: LD_VAR 0 6
29012: PPUSH
29013: LD_INT 1
29015: PPUSH
29016: CALL_OW 259
29020: PUSH
29021: LD_REAL  1.15000000000000E+0000
29024: MUL
29025: MUL
29026: ST_TO_ADDR
// end ; unit_vehicle :
29027: GO 29851
29029: LD_INT 2
29031: DOUBLE
29032: EQUAL
29033: IFTRUE 29037
29035: GO 29839
29037: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
29038: LD_VAR 0 6
29042: PPUSH
29043: CALL_OW 264
29047: PUSH
29048: LD_INT 2
29050: PUSH
29051: LD_INT 42
29053: PUSH
29054: LD_INT 24
29056: PUSH
29057: EMPTY
29058: LIST
29059: LIST
29060: LIST
29061: IN
29062: IFFALSE 29083
// points := [ 25 , 5 , 3 ] ;
29064: LD_ADDR_VAR 0 9
29068: PUSH
29069: LD_INT 25
29071: PUSH
29072: LD_INT 5
29074: PUSH
29075: LD_INT 3
29077: PUSH
29078: EMPTY
29079: LIST
29080: LIST
29081: LIST
29082: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
29083: LD_VAR 0 6
29087: PPUSH
29088: CALL_OW 264
29092: PUSH
29093: LD_INT 4
29095: PUSH
29096: LD_INT 43
29098: PUSH
29099: LD_INT 25
29101: PUSH
29102: EMPTY
29103: LIST
29104: LIST
29105: LIST
29106: IN
29107: IFFALSE 29128
// points := [ 40 , 15 , 5 ] ;
29109: LD_ADDR_VAR 0 9
29113: PUSH
29114: LD_INT 40
29116: PUSH
29117: LD_INT 15
29119: PUSH
29120: LD_INT 5
29122: PUSH
29123: EMPTY
29124: LIST
29125: LIST
29126: LIST
29127: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
29128: LD_VAR 0 6
29132: PPUSH
29133: CALL_OW 264
29137: PUSH
29138: LD_INT 3
29140: PUSH
29141: LD_INT 23
29143: PUSH
29144: EMPTY
29145: LIST
29146: LIST
29147: IN
29148: IFFALSE 29169
// points := [ 7 , 25 , 8 ] ;
29150: LD_ADDR_VAR 0 9
29154: PUSH
29155: LD_INT 7
29157: PUSH
29158: LD_INT 25
29160: PUSH
29161: LD_INT 8
29163: PUSH
29164: EMPTY
29165: LIST
29166: LIST
29167: LIST
29168: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
29169: LD_VAR 0 6
29173: PPUSH
29174: CALL_OW 264
29178: PUSH
29179: LD_INT 5
29181: PUSH
29182: LD_INT 27
29184: PUSH
29185: LD_INT 44
29187: PUSH
29188: EMPTY
29189: LIST
29190: LIST
29191: LIST
29192: IN
29193: IFFALSE 29214
// points := [ 14 , 50 , 16 ] ;
29195: LD_ADDR_VAR 0 9
29199: PUSH
29200: LD_INT 14
29202: PUSH
29203: LD_INT 50
29205: PUSH
29206: LD_INT 16
29208: PUSH
29209: EMPTY
29210: LIST
29211: LIST
29212: LIST
29213: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
29214: LD_VAR 0 6
29218: PPUSH
29219: CALL_OW 264
29223: PUSH
29224: LD_INT 6
29226: PUSH
29227: LD_INT 46
29229: PUSH
29230: EMPTY
29231: LIST
29232: LIST
29233: IN
29234: IFFALSE 29255
// points := [ 32 , 120 , 70 ] ;
29236: LD_ADDR_VAR 0 9
29240: PUSH
29241: LD_INT 32
29243: PUSH
29244: LD_INT 120
29246: PUSH
29247: LD_INT 70
29249: PUSH
29250: EMPTY
29251: LIST
29252: LIST
29253: LIST
29254: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
29255: LD_VAR 0 6
29259: PPUSH
29260: CALL_OW 264
29264: PUSH
29265: LD_INT 7
29267: PUSH
29268: LD_INT 28
29270: PUSH
29271: LD_INT 45
29273: PUSH
29274: EMPTY
29275: LIST
29276: LIST
29277: LIST
29278: IN
29279: IFFALSE 29300
// points := [ 35 , 20 , 45 ] ;
29281: LD_ADDR_VAR 0 9
29285: PUSH
29286: LD_INT 35
29288: PUSH
29289: LD_INT 20
29291: PUSH
29292: LD_INT 45
29294: PUSH
29295: EMPTY
29296: LIST
29297: LIST
29298: LIST
29299: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
29300: LD_VAR 0 6
29304: PPUSH
29305: CALL_OW 264
29309: PUSH
29310: LD_INT 47
29312: PUSH
29313: EMPTY
29314: LIST
29315: IN
29316: IFFALSE 29337
// points := [ 67 , 45 , 75 ] ;
29318: LD_ADDR_VAR 0 9
29322: PUSH
29323: LD_INT 67
29325: PUSH
29326: LD_INT 45
29328: PUSH
29329: LD_INT 75
29331: PUSH
29332: EMPTY
29333: LIST
29334: LIST
29335: LIST
29336: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
29337: LD_VAR 0 6
29341: PPUSH
29342: CALL_OW 264
29346: PUSH
29347: LD_INT 26
29349: PUSH
29350: EMPTY
29351: LIST
29352: IN
29353: IFFALSE 29374
// points := [ 120 , 30 , 80 ] ;
29355: LD_ADDR_VAR 0 9
29359: PUSH
29360: LD_INT 120
29362: PUSH
29363: LD_INT 30
29365: PUSH
29366: LD_INT 80
29368: PUSH
29369: EMPTY
29370: LIST
29371: LIST
29372: LIST
29373: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
29374: LD_VAR 0 6
29378: PPUSH
29379: CALL_OW 264
29383: PUSH
29384: LD_INT 22
29386: PUSH
29387: EMPTY
29388: LIST
29389: IN
29390: IFFALSE 29411
// points := [ 40 , 1 , 1 ] ;
29392: LD_ADDR_VAR 0 9
29396: PUSH
29397: LD_INT 40
29399: PUSH
29400: LD_INT 1
29402: PUSH
29403: LD_INT 1
29405: PUSH
29406: EMPTY
29407: LIST
29408: LIST
29409: LIST
29410: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
29411: LD_VAR 0 6
29415: PPUSH
29416: CALL_OW 264
29420: PUSH
29421: LD_INT 29
29423: PUSH
29424: EMPTY
29425: LIST
29426: IN
29427: IFFALSE 29448
// points := [ 70 , 200 , 400 ] ;
29429: LD_ADDR_VAR 0 9
29433: PUSH
29434: LD_INT 70
29436: PUSH
29437: LD_INT 200
29439: PUSH
29440: LD_INT 400
29442: PUSH
29443: EMPTY
29444: LIST
29445: LIST
29446: LIST
29447: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
29448: LD_VAR 0 6
29452: PPUSH
29453: CALL_OW 264
29457: PUSH
29458: LD_INT 14
29460: PUSH
29461: LD_INT 53
29463: PUSH
29464: EMPTY
29465: LIST
29466: LIST
29467: IN
29468: IFFALSE 29489
// points := [ 40 , 10 , 20 ] ;
29470: LD_ADDR_VAR 0 9
29474: PUSH
29475: LD_INT 40
29477: PUSH
29478: LD_INT 10
29480: PUSH
29481: LD_INT 20
29483: PUSH
29484: EMPTY
29485: LIST
29486: LIST
29487: LIST
29488: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
29489: LD_VAR 0 6
29493: PPUSH
29494: CALL_OW 264
29498: PUSH
29499: LD_INT 9
29501: PUSH
29502: EMPTY
29503: LIST
29504: IN
29505: IFFALSE 29526
// points := [ 5 , 70 , 20 ] ;
29507: LD_ADDR_VAR 0 9
29511: PUSH
29512: LD_INT 5
29514: PUSH
29515: LD_INT 70
29517: PUSH
29518: LD_INT 20
29520: PUSH
29521: EMPTY
29522: LIST
29523: LIST
29524: LIST
29525: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
29526: LD_VAR 0 6
29530: PPUSH
29531: CALL_OW 264
29535: PUSH
29536: LD_INT 10
29538: PUSH
29539: EMPTY
29540: LIST
29541: IN
29542: IFFALSE 29563
// points := [ 35 , 110 , 70 ] ;
29544: LD_ADDR_VAR 0 9
29548: PUSH
29549: LD_INT 35
29551: PUSH
29552: LD_INT 110
29554: PUSH
29555: LD_INT 70
29557: PUSH
29558: EMPTY
29559: LIST
29560: LIST
29561: LIST
29562: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
29563: LD_VAR 0 6
29567: PPUSH
29568: CALL_OW 265
29572: PUSH
29573: LD_INT 25
29575: EQUAL
29576: IFFALSE 29597
// points := [ 80 , 65 , 100 ] ;
29578: LD_ADDR_VAR 0 9
29582: PUSH
29583: LD_INT 80
29585: PUSH
29586: LD_INT 65
29588: PUSH
29589: LD_INT 100
29591: PUSH
29592: EMPTY
29593: LIST
29594: LIST
29595: LIST
29596: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
29597: LD_VAR 0 6
29601: PPUSH
29602: CALL_OW 263
29606: PUSH
29607: LD_INT 1
29609: EQUAL
29610: IFFALSE 29645
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
29612: LD_ADDR_VAR 0 10
29616: PUSH
29617: LD_VAR 0 10
29621: PUSH
29622: LD_VAR 0 6
29626: PPUSH
29627: CALL_OW 311
29631: PPUSH
29632: LD_INT 3
29634: PPUSH
29635: CALL_OW 259
29639: PUSH
29640: LD_INT 4
29642: MUL
29643: MUL
29644: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
29645: LD_VAR 0 6
29649: PPUSH
29650: CALL_OW 263
29654: PUSH
29655: LD_INT 2
29657: EQUAL
29658: IFFALSE 29709
// begin j := IsControledBy ( i ) ;
29660: LD_ADDR_VAR 0 7
29664: PUSH
29665: LD_VAR 0 6
29669: PPUSH
29670: CALL_OW 312
29674: ST_TO_ADDR
// if j then
29675: LD_VAR 0 7
29679: IFFALSE 29709
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
29681: LD_ADDR_VAR 0 10
29685: PUSH
29686: LD_VAR 0 10
29690: PUSH
29691: LD_VAR 0 7
29695: PPUSH
29696: LD_INT 3
29698: PPUSH
29699: CALL_OW 259
29703: PUSH
29704: LD_INT 3
29706: MUL
29707: MUL
29708: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
29709: LD_VAR 0 6
29713: PPUSH
29714: CALL_OW 264
29718: PUSH
29719: LD_INT 5
29721: PUSH
29722: LD_INT 6
29724: PUSH
29725: LD_INT 46
29727: PUSH
29728: LD_INT 44
29730: PUSH
29731: LD_INT 47
29733: PUSH
29734: LD_INT 45
29736: PUSH
29737: LD_INT 28
29739: PUSH
29740: LD_INT 7
29742: PUSH
29743: LD_INT 27
29745: PUSH
29746: LD_INT 29
29748: PUSH
29749: EMPTY
29750: LIST
29751: LIST
29752: LIST
29753: LIST
29754: LIST
29755: LIST
29756: LIST
29757: LIST
29758: LIST
29759: LIST
29760: IN
29761: PUSH
29762: LD_VAR 0 1
29766: PPUSH
29767: LD_INT 52
29769: PPUSH
29770: CALL_OW 321
29774: PUSH
29775: LD_INT 2
29777: EQUAL
29778: AND
29779: IFFALSE 29796
// bpoints := bpoints * 1.2 ;
29781: LD_ADDR_VAR 0 10
29785: PUSH
29786: LD_VAR 0 10
29790: PUSH
29791: LD_REAL  1.20000000000000E+0000
29794: MUL
29795: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
29796: LD_VAR 0 6
29800: PPUSH
29801: CALL_OW 264
29805: PUSH
29806: LD_INT 6
29808: PUSH
29809: LD_INT 46
29811: PUSH
29812: LD_INT 47
29814: PUSH
29815: EMPTY
29816: LIST
29817: LIST
29818: LIST
29819: IN
29820: IFFALSE 29837
// bpoints := bpoints * 1.2 ;
29822: LD_ADDR_VAR 0 10
29826: PUSH
29827: LD_VAR 0 10
29831: PUSH
29832: LD_REAL  1.20000000000000E+0000
29835: MUL
29836: ST_TO_ADDR
// end ; unit_building :
29837: GO 29851
29839: LD_INT 3
29841: DOUBLE
29842: EQUAL
29843: IFTRUE 29847
29845: GO 29850
29847: POP
// ; end ;
29848: GO 29851
29850: POP
// for j = 1 to 3 do
29851: LD_ADDR_VAR 0 7
29855: PUSH
29856: DOUBLE
29857: LD_INT 1
29859: DEC
29860: ST_TO_ADDR
29861: LD_INT 3
29863: PUSH
29864: FOR_TO
29865: IFFALSE 29918
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
29867: LD_ADDR_VAR 0 5
29871: PUSH
29872: LD_VAR 0 5
29876: PPUSH
29877: LD_VAR 0 7
29881: PPUSH
29882: LD_VAR 0 5
29886: PUSH
29887: LD_VAR 0 7
29891: ARRAY
29892: PUSH
29893: LD_VAR 0 9
29897: PUSH
29898: LD_VAR 0 7
29902: ARRAY
29903: PUSH
29904: LD_VAR 0 10
29908: MUL
29909: PLUS
29910: PPUSH
29911: CALL_OW 1
29915: ST_TO_ADDR
29916: GO 29864
29918: POP
29919: POP
// end ;
29920: GO 28403
29922: POP
29923: POP
// result := Replace ( result , 4 , tmp ) ;
29924: LD_ADDR_VAR 0 5
29928: PUSH
29929: LD_VAR 0 5
29933: PPUSH
29934: LD_INT 4
29936: PPUSH
29937: LD_VAR 0 8
29941: PPUSH
29942: CALL_OW 1
29946: ST_TO_ADDR
// end ;
29947: LD_VAR 0 5
29951: RET
// export function DangerAtRange ( unit , range ) ; begin
29952: LD_INT 0
29954: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
29955: LD_ADDR_VAR 0 3
29959: PUSH
29960: LD_VAR 0 1
29964: PPUSH
29965: CALL_OW 255
29969: PPUSH
29970: LD_VAR 0 1
29974: PPUSH
29975: CALL_OW 250
29979: PPUSH
29980: LD_VAR 0 1
29984: PPUSH
29985: CALL_OW 251
29989: PPUSH
29990: LD_VAR 0 2
29994: PPUSH
29995: CALL 28255 0 4
29999: ST_TO_ADDR
// end ;
30000: LD_VAR 0 3
30004: RET
// export function DangerInArea ( side , area ) ; begin
30005: LD_INT 0
30007: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
30008: LD_ADDR_VAR 0 3
30012: PUSH
30013: LD_VAR 0 2
30017: PPUSH
30018: LD_INT 81
30020: PUSH
30021: LD_VAR 0 1
30025: PUSH
30026: EMPTY
30027: LIST
30028: LIST
30029: PPUSH
30030: CALL_OW 70
30034: ST_TO_ADDR
// end ;
30035: LD_VAR 0 3
30039: RET
// export function IsExtension ( b ) ; begin
30040: LD_INT 0
30042: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
30043: LD_ADDR_VAR 0 2
30047: PUSH
30048: LD_VAR 0 1
30052: PUSH
30053: LD_INT 23
30055: PUSH
30056: LD_INT 20
30058: PUSH
30059: LD_INT 22
30061: PUSH
30062: LD_INT 17
30064: PUSH
30065: LD_INT 24
30067: PUSH
30068: LD_INT 21
30070: PUSH
30071: LD_INT 19
30073: PUSH
30074: LD_INT 16
30076: PUSH
30077: LD_INT 25
30079: PUSH
30080: LD_INT 18
30082: PUSH
30083: EMPTY
30084: LIST
30085: LIST
30086: LIST
30087: LIST
30088: LIST
30089: LIST
30090: LIST
30091: LIST
30092: LIST
30093: LIST
30094: IN
30095: ST_TO_ADDR
// end ;
30096: LD_VAR 0 2
30100: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
30101: LD_INT 0
30103: PPUSH
30104: PPUSH
30105: PPUSH
// result := [ ] ;
30106: LD_ADDR_VAR 0 3
30110: PUSH
30111: EMPTY
30112: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
30113: LD_ADDR_VAR 0 4
30117: PUSH
30118: LD_VAR 0 2
30122: PPUSH
30123: LD_INT 21
30125: PUSH
30126: LD_INT 3
30128: PUSH
30129: EMPTY
30130: LIST
30131: LIST
30132: PPUSH
30133: CALL_OW 70
30137: ST_TO_ADDR
// if not tmp then
30138: LD_VAR 0 4
30142: NOT
30143: IFFALSE 30147
// exit ;
30145: GO 30205
// for i in tmp do
30147: LD_ADDR_VAR 0 5
30151: PUSH
30152: LD_VAR 0 4
30156: PUSH
30157: FOR_IN
30158: IFFALSE 30193
// if GetBase ( i ) <> base then
30160: LD_VAR 0 5
30164: PPUSH
30165: CALL_OW 274
30169: PUSH
30170: LD_VAR 0 1
30174: NONEQUAL
30175: IFFALSE 30191
// ComLinkToBase ( base , i ) ;
30177: LD_VAR 0 1
30181: PPUSH
30182: LD_VAR 0 5
30186: PPUSH
30187: CALL_OW 169
30191: GO 30157
30193: POP
30194: POP
// result := tmp ;
30195: LD_ADDR_VAR 0 3
30199: PUSH
30200: LD_VAR 0 4
30204: ST_TO_ADDR
// end ;
30205: LD_VAR 0 3
30209: RET
// export function ComComplete ( unit , b ) ; var i ; begin
30210: LD_INT 0
30212: PPUSH
30213: PPUSH
// if BuildingStatus ( b ) = bs_build then
30214: LD_VAR 0 2
30218: PPUSH
30219: CALL_OW 461
30223: PUSH
30224: LD_INT 1
30226: EQUAL
30227: IFFALSE 30287
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
30229: LD_VAR 0 1
30233: PPUSH
30234: LD_STRING h
30236: PUSH
30237: LD_VAR 0 2
30241: PPUSH
30242: CALL_OW 250
30246: PUSH
30247: LD_VAR 0 2
30251: PPUSH
30252: CALL_OW 251
30256: PUSH
30257: LD_VAR 0 2
30261: PUSH
30262: LD_INT 0
30264: PUSH
30265: LD_INT 0
30267: PUSH
30268: LD_INT 0
30270: PUSH
30271: EMPTY
30272: LIST
30273: LIST
30274: LIST
30275: LIST
30276: LIST
30277: LIST
30278: LIST
30279: PUSH
30280: EMPTY
30281: LIST
30282: PPUSH
30283: CALL_OW 446
// end ;
30287: LD_VAR 0 3
30291: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
30292: LD_INT 0
30294: PPUSH
30295: PPUSH
30296: PPUSH
30297: PPUSH
30298: PPUSH
30299: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
30300: LD_VAR 0 1
30304: NOT
30305: PUSH
30306: LD_VAR 0 1
30310: PPUSH
30311: CALL_OW 263
30315: PUSH
30316: LD_INT 2
30318: EQUAL
30319: NOT
30320: OR
30321: IFFALSE 30325
// exit ;
30323: GO 30641
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
30325: LD_ADDR_VAR 0 6
30329: PUSH
30330: LD_INT 22
30332: PUSH
30333: LD_VAR 0 1
30337: PPUSH
30338: CALL_OW 255
30342: PUSH
30343: EMPTY
30344: LIST
30345: LIST
30346: PUSH
30347: LD_INT 2
30349: PUSH
30350: LD_INT 30
30352: PUSH
30353: LD_INT 36
30355: PUSH
30356: EMPTY
30357: LIST
30358: LIST
30359: PUSH
30360: LD_INT 34
30362: PUSH
30363: LD_INT 31
30365: PUSH
30366: EMPTY
30367: LIST
30368: LIST
30369: PUSH
30370: EMPTY
30371: LIST
30372: LIST
30373: LIST
30374: PUSH
30375: EMPTY
30376: LIST
30377: LIST
30378: PPUSH
30379: CALL_OW 69
30383: ST_TO_ADDR
// if not tmp then
30384: LD_VAR 0 6
30388: NOT
30389: IFFALSE 30393
// exit ;
30391: GO 30641
// result := [ ] ;
30393: LD_ADDR_VAR 0 2
30397: PUSH
30398: EMPTY
30399: ST_TO_ADDR
// for i in tmp do
30400: LD_ADDR_VAR 0 3
30404: PUSH
30405: LD_VAR 0 6
30409: PUSH
30410: FOR_IN
30411: IFFALSE 30482
// begin t := UnitsInside ( i ) ;
30413: LD_ADDR_VAR 0 4
30417: PUSH
30418: LD_VAR 0 3
30422: PPUSH
30423: CALL_OW 313
30427: ST_TO_ADDR
// if t then
30428: LD_VAR 0 4
30432: IFFALSE 30480
// for j in t do
30434: LD_ADDR_VAR 0 7
30438: PUSH
30439: LD_VAR 0 4
30443: PUSH
30444: FOR_IN
30445: IFFALSE 30478
// result := Insert ( result , result + 1 , j ) ;
30447: LD_ADDR_VAR 0 2
30451: PUSH
30452: LD_VAR 0 2
30456: PPUSH
30457: LD_VAR 0 2
30461: PUSH
30462: LD_INT 1
30464: PLUS
30465: PPUSH
30466: LD_VAR 0 7
30470: PPUSH
30471: CALL_OW 2
30475: ST_TO_ADDR
30476: GO 30444
30478: POP
30479: POP
// end ;
30480: GO 30410
30482: POP
30483: POP
// if not result then
30484: LD_VAR 0 2
30488: NOT
30489: IFFALSE 30493
// exit ;
30491: GO 30641
// mech := result [ 1 ] ;
30493: LD_ADDR_VAR 0 5
30497: PUSH
30498: LD_VAR 0 2
30502: PUSH
30503: LD_INT 1
30505: ARRAY
30506: ST_TO_ADDR
// if result > 1 then
30507: LD_VAR 0 2
30511: PUSH
30512: LD_INT 1
30514: GREATER
30515: IFFALSE 30627
// for i = 2 to result do
30517: LD_ADDR_VAR 0 3
30521: PUSH
30522: DOUBLE
30523: LD_INT 2
30525: DEC
30526: ST_TO_ADDR
30527: LD_VAR 0 2
30531: PUSH
30532: FOR_TO
30533: IFFALSE 30625
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
30535: LD_ADDR_VAR 0 4
30539: PUSH
30540: LD_VAR 0 2
30544: PUSH
30545: LD_VAR 0 3
30549: ARRAY
30550: PPUSH
30551: LD_INT 3
30553: PPUSH
30554: CALL_OW 259
30558: PUSH
30559: LD_VAR 0 2
30563: PUSH
30564: LD_VAR 0 3
30568: ARRAY
30569: PPUSH
30570: CALL_OW 432
30574: MINUS
30575: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
30576: LD_VAR 0 4
30580: PUSH
30581: LD_VAR 0 5
30585: PPUSH
30586: LD_INT 3
30588: PPUSH
30589: CALL_OW 259
30593: PUSH
30594: LD_VAR 0 5
30598: PPUSH
30599: CALL_OW 432
30603: MINUS
30604: GREATEREQUAL
30605: IFFALSE 30623
// mech := result [ i ] ;
30607: LD_ADDR_VAR 0 5
30611: PUSH
30612: LD_VAR 0 2
30616: PUSH
30617: LD_VAR 0 3
30621: ARRAY
30622: ST_TO_ADDR
// end ;
30623: GO 30532
30625: POP
30626: POP
// ComLinkTo ( vehicle , mech ) ;
30627: LD_VAR 0 1
30631: PPUSH
30632: LD_VAR 0 5
30636: PPUSH
30637: CALL_OW 135
// end ;
30641: LD_VAR 0 2
30645: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
30646: LD_INT 0
30648: PPUSH
30649: PPUSH
30650: PPUSH
30651: PPUSH
30652: PPUSH
30653: PPUSH
30654: PPUSH
30655: PPUSH
30656: PPUSH
30657: PPUSH
30658: PPUSH
30659: PPUSH
30660: PPUSH
// result := [ ] ;
30661: LD_ADDR_VAR 0 7
30665: PUSH
30666: EMPTY
30667: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
30668: LD_VAR 0 1
30672: PPUSH
30673: CALL_OW 266
30677: PUSH
30678: LD_INT 0
30680: PUSH
30681: LD_INT 1
30683: PUSH
30684: EMPTY
30685: LIST
30686: LIST
30687: IN
30688: NOT
30689: IFFALSE 30693
// exit ;
30691: GO 32324
// if name then
30693: LD_VAR 0 3
30697: IFFALSE 30713
// SetBName ( base_dep , name ) ;
30699: LD_VAR 0 1
30703: PPUSH
30704: LD_VAR 0 3
30708: PPUSH
30709: CALL_OW 500
// base := GetBase ( base_dep ) ;
30713: LD_ADDR_VAR 0 15
30717: PUSH
30718: LD_VAR 0 1
30722: PPUSH
30723: CALL_OW 274
30727: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
30728: LD_ADDR_VAR 0 16
30732: PUSH
30733: LD_VAR 0 1
30737: PPUSH
30738: CALL_OW 255
30742: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
30743: LD_ADDR_VAR 0 17
30747: PUSH
30748: LD_VAR 0 1
30752: PPUSH
30753: CALL_OW 248
30757: ST_TO_ADDR
// if sources then
30758: LD_VAR 0 5
30762: IFFALSE 30809
// for i = 1 to 3 do
30764: LD_ADDR_VAR 0 8
30768: PUSH
30769: DOUBLE
30770: LD_INT 1
30772: DEC
30773: ST_TO_ADDR
30774: LD_INT 3
30776: PUSH
30777: FOR_TO
30778: IFFALSE 30807
// AddResourceType ( base , i , sources [ i ] ) ;
30780: LD_VAR 0 15
30784: PPUSH
30785: LD_VAR 0 8
30789: PPUSH
30790: LD_VAR 0 5
30794: PUSH
30795: LD_VAR 0 8
30799: ARRAY
30800: PPUSH
30801: CALL_OW 276
30805: GO 30777
30807: POP
30808: POP
// buildings := GetBaseBuildings ( base , area ) ;
30809: LD_ADDR_VAR 0 18
30813: PUSH
30814: LD_VAR 0 15
30818: PPUSH
30819: LD_VAR 0 2
30823: PPUSH
30824: CALL 30101 0 2
30828: ST_TO_ADDR
// InitHc ;
30829: CALL_OW 19
// InitUc ;
30833: CALL_OW 18
// uc_side := side ;
30837: LD_ADDR_OWVAR 20
30841: PUSH
30842: LD_VAR 0 16
30846: ST_TO_ADDR
// uc_nation := nation ;
30847: LD_ADDR_OWVAR 21
30851: PUSH
30852: LD_VAR 0 17
30856: ST_TO_ADDR
// if buildings then
30857: LD_VAR 0 18
30861: IFFALSE 32183
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
30863: LD_ADDR_VAR 0 19
30867: PUSH
30868: LD_VAR 0 18
30872: PPUSH
30873: LD_INT 2
30875: PUSH
30876: LD_INT 30
30878: PUSH
30879: LD_INT 29
30881: PUSH
30882: EMPTY
30883: LIST
30884: LIST
30885: PUSH
30886: LD_INT 30
30888: PUSH
30889: LD_INT 30
30891: PUSH
30892: EMPTY
30893: LIST
30894: LIST
30895: PUSH
30896: EMPTY
30897: LIST
30898: LIST
30899: LIST
30900: PPUSH
30901: CALL_OW 72
30905: ST_TO_ADDR
// if tmp then
30906: LD_VAR 0 19
30910: IFFALSE 30958
// for i in tmp do
30912: LD_ADDR_VAR 0 8
30916: PUSH
30917: LD_VAR 0 19
30921: PUSH
30922: FOR_IN
30923: IFFALSE 30956
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
30925: LD_VAR 0 8
30929: PPUSH
30930: CALL_OW 250
30934: PPUSH
30935: LD_VAR 0 8
30939: PPUSH
30940: CALL_OW 251
30944: PPUSH
30945: LD_VAR 0 16
30949: PPUSH
30950: CALL_OW 441
30954: GO 30922
30956: POP
30957: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
30958: LD_VAR 0 18
30962: PPUSH
30963: LD_INT 2
30965: PUSH
30966: LD_INT 30
30968: PUSH
30969: LD_INT 32
30971: PUSH
30972: EMPTY
30973: LIST
30974: LIST
30975: PUSH
30976: LD_INT 30
30978: PUSH
30979: LD_INT 33
30981: PUSH
30982: EMPTY
30983: LIST
30984: LIST
30985: PUSH
30986: EMPTY
30987: LIST
30988: LIST
30989: LIST
30990: PPUSH
30991: CALL_OW 72
30995: IFFALSE 31083
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
30997: LD_ADDR_VAR 0 8
31001: PUSH
31002: LD_VAR 0 18
31006: PPUSH
31007: LD_INT 2
31009: PUSH
31010: LD_INT 30
31012: PUSH
31013: LD_INT 32
31015: PUSH
31016: EMPTY
31017: LIST
31018: LIST
31019: PUSH
31020: LD_INT 30
31022: PUSH
31023: LD_INT 33
31025: PUSH
31026: EMPTY
31027: LIST
31028: LIST
31029: PUSH
31030: EMPTY
31031: LIST
31032: LIST
31033: LIST
31034: PPUSH
31035: CALL_OW 72
31039: PUSH
31040: FOR_IN
31041: IFFALSE 31081
// begin if not GetBWeapon ( i ) then
31043: LD_VAR 0 8
31047: PPUSH
31048: CALL_OW 269
31052: NOT
31053: IFFALSE 31079
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
31055: LD_VAR 0 8
31059: PPUSH
31060: LD_VAR 0 8
31064: PPUSH
31065: LD_VAR 0 2
31069: PPUSH
31070: CALL 32329 0 2
31074: PPUSH
31075: CALL_OW 431
// end ;
31079: GO 31040
31081: POP
31082: POP
// end ; for i = 1 to personel do
31083: LD_ADDR_VAR 0 8
31087: PUSH
31088: DOUBLE
31089: LD_INT 1
31091: DEC
31092: ST_TO_ADDR
31093: LD_VAR 0 6
31097: PUSH
31098: FOR_TO
31099: IFFALSE 32163
// begin if i > 4 then
31101: LD_VAR 0 8
31105: PUSH
31106: LD_INT 4
31108: GREATER
31109: IFFALSE 31113
// break ;
31111: GO 32163
// case i of 1 :
31113: LD_VAR 0 8
31117: PUSH
31118: LD_INT 1
31120: DOUBLE
31121: EQUAL
31122: IFTRUE 31126
31124: GO 31206
31126: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
31127: LD_ADDR_VAR 0 12
31131: PUSH
31132: LD_VAR 0 18
31136: PPUSH
31137: LD_INT 22
31139: PUSH
31140: LD_VAR 0 16
31144: PUSH
31145: EMPTY
31146: LIST
31147: LIST
31148: PUSH
31149: LD_INT 58
31151: PUSH
31152: EMPTY
31153: LIST
31154: PUSH
31155: LD_INT 2
31157: PUSH
31158: LD_INT 30
31160: PUSH
31161: LD_INT 32
31163: PUSH
31164: EMPTY
31165: LIST
31166: LIST
31167: PUSH
31168: LD_INT 30
31170: PUSH
31171: LD_INT 4
31173: PUSH
31174: EMPTY
31175: LIST
31176: LIST
31177: PUSH
31178: LD_INT 30
31180: PUSH
31181: LD_INT 5
31183: PUSH
31184: EMPTY
31185: LIST
31186: LIST
31187: PUSH
31188: EMPTY
31189: LIST
31190: LIST
31191: LIST
31192: LIST
31193: PUSH
31194: EMPTY
31195: LIST
31196: LIST
31197: LIST
31198: PPUSH
31199: CALL_OW 72
31203: ST_TO_ADDR
31204: GO 31428
31206: LD_INT 2
31208: DOUBLE
31209: EQUAL
31210: IFTRUE 31214
31212: GO 31276
31214: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
31215: LD_ADDR_VAR 0 12
31219: PUSH
31220: LD_VAR 0 18
31224: PPUSH
31225: LD_INT 22
31227: PUSH
31228: LD_VAR 0 16
31232: PUSH
31233: EMPTY
31234: LIST
31235: LIST
31236: PUSH
31237: LD_INT 2
31239: PUSH
31240: LD_INT 30
31242: PUSH
31243: LD_INT 0
31245: PUSH
31246: EMPTY
31247: LIST
31248: LIST
31249: PUSH
31250: LD_INT 30
31252: PUSH
31253: LD_INT 1
31255: PUSH
31256: EMPTY
31257: LIST
31258: LIST
31259: PUSH
31260: EMPTY
31261: LIST
31262: LIST
31263: LIST
31264: PUSH
31265: EMPTY
31266: LIST
31267: LIST
31268: PPUSH
31269: CALL_OW 72
31273: ST_TO_ADDR
31274: GO 31428
31276: LD_INT 3
31278: DOUBLE
31279: EQUAL
31280: IFTRUE 31284
31282: GO 31346
31284: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
31285: LD_ADDR_VAR 0 12
31289: PUSH
31290: LD_VAR 0 18
31294: PPUSH
31295: LD_INT 22
31297: PUSH
31298: LD_VAR 0 16
31302: PUSH
31303: EMPTY
31304: LIST
31305: LIST
31306: PUSH
31307: LD_INT 2
31309: PUSH
31310: LD_INT 30
31312: PUSH
31313: LD_INT 2
31315: PUSH
31316: EMPTY
31317: LIST
31318: LIST
31319: PUSH
31320: LD_INT 30
31322: PUSH
31323: LD_INT 3
31325: PUSH
31326: EMPTY
31327: LIST
31328: LIST
31329: PUSH
31330: EMPTY
31331: LIST
31332: LIST
31333: LIST
31334: PUSH
31335: EMPTY
31336: LIST
31337: LIST
31338: PPUSH
31339: CALL_OW 72
31343: ST_TO_ADDR
31344: GO 31428
31346: LD_INT 4
31348: DOUBLE
31349: EQUAL
31350: IFTRUE 31354
31352: GO 31427
31354: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
31355: LD_ADDR_VAR 0 12
31359: PUSH
31360: LD_VAR 0 18
31364: PPUSH
31365: LD_INT 22
31367: PUSH
31368: LD_VAR 0 16
31372: PUSH
31373: EMPTY
31374: LIST
31375: LIST
31376: PUSH
31377: LD_INT 2
31379: PUSH
31380: LD_INT 30
31382: PUSH
31383: LD_INT 6
31385: PUSH
31386: EMPTY
31387: LIST
31388: LIST
31389: PUSH
31390: LD_INT 30
31392: PUSH
31393: LD_INT 7
31395: PUSH
31396: EMPTY
31397: LIST
31398: LIST
31399: PUSH
31400: LD_INT 30
31402: PUSH
31403: LD_INT 8
31405: PUSH
31406: EMPTY
31407: LIST
31408: LIST
31409: PUSH
31410: EMPTY
31411: LIST
31412: LIST
31413: LIST
31414: LIST
31415: PUSH
31416: EMPTY
31417: LIST
31418: LIST
31419: PPUSH
31420: CALL_OW 72
31424: ST_TO_ADDR
31425: GO 31428
31427: POP
// if i = 1 then
31428: LD_VAR 0 8
31432: PUSH
31433: LD_INT 1
31435: EQUAL
31436: IFFALSE 31547
// begin tmp := [ ] ;
31438: LD_ADDR_VAR 0 19
31442: PUSH
31443: EMPTY
31444: ST_TO_ADDR
// for j in f do
31445: LD_ADDR_VAR 0 9
31449: PUSH
31450: LD_VAR 0 12
31454: PUSH
31455: FOR_IN
31456: IFFALSE 31529
// if GetBType ( j ) = b_bunker then
31458: LD_VAR 0 9
31462: PPUSH
31463: CALL_OW 266
31467: PUSH
31468: LD_INT 32
31470: EQUAL
31471: IFFALSE 31498
// tmp := Insert ( tmp , 1 , j ) else
31473: LD_ADDR_VAR 0 19
31477: PUSH
31478: LD_VAR 0 19
31482: PPUSH
31483: LD_INT 1
31485: PPUSH
31486: LD_VAR 0 9
31490: PPUSH
31491: CALL_OW 2
31495: ST_TO_ADDR
31496: GO 31527
// tmp := Insert ( tmp , tmp + 1 , j ) ;
31498: LD_ADDR_VAR 0 19
31502: PUSH
31503: LD_VAR 0 19
31507: PPUSH
31508: LD_VAR 0 19
31512: PUSH
31513: LD_INT 1
31515: PLUS
31516: PPUSH
31517: LD_VAR 0 9
31521: PPUSH
31522: CALL_OW 2
31526: ST_TO_ADDR
31527: GO 31455
31529: POP
31530: POP
// if tmp then
31531: LD_VAR 0 19
31535: IFFALSE 31547
// f := tmp ;
31537: LD_ADDR_VAR 0 12
31541: PUSH
31542: LD_VAR 0 19
31546: ST_TO_ADDR
// end ; x := personel [ i ] ;
31547: LD_ADDR_VAR 0 13
31551: PUSH
31552: LD_VAR 0 6
31556: PUSH
31557: LD_VAR 0 8
31561: ARRAY
31562: ST_TO_ADDR
// if x = - 1 then
31563: LD_VAR 0 13
31567: PUSH
31568: LD_INT 1
31570: NEG
31571: EQUAL
31572: IFFALSE 31781
// begin for j in f do
31574: LD_ADDR_VAR 0 9
31578: PUSH
31579: LD_VAR 0 12
31583: PUSH
31584: FOR_IN
31585: IFFALSE 31777
// repeat InitHc ;
31587: CALL_OW 19
// if GetBType ( j ) = b_barracks then
31591: LD_VAR 0 9
31595: PPUSH
31596: CALL_OW 266
31600: PUSH
31601: LD_INT 5
31603: EQUAL
31604: IFFALSE 31674
// begin if UnitsInside ( j ) < 3 then
31606: LD_VAR 0 9
31610: PPUSH
31611: CALL_OW 313
31615: PUSH
31616: LD_INT 3
31618: LESS
31619: IFFALSE 31655
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
31621: LD_INT 0
31623: PPUSH
31624: LD_INT 5
31626: PUSH
31627: LD_INT 8
31629: PUSH
31630: LD_INT 9
31632: PUSH
31633: EMPTY
31634: LIST
31635: LIST
31636: LIST
31637: PUSH
31638: LD_VAR 0 17
31642: ARRAY
31643: PPUSH
31644: LD_VAR 0 4
31648: PPUSH
31649: CALL_OW 380
31653: GO 31672
// PrepareHuman ( false , i , skill ) ;
31655: LD_INT 0
31657: PPUSH
31658: LD_VAR 0 8
31662: PPUSH
31663: LD_VAR 0 4
31667: PPUSH
31668: CALL_OW 380
// end else
31672: GO 31691
// PrepareHuman ( false , i , skill ) ;
31674: LD_INT 0
31676: PPUSH
31677: LD_VAR 0 8
31681: PPUSH
31682: LD_VAR 0 4
31686: PPUSH
31687: CALL_OW 380
// un := CreateHuman ;
31691: LD_ADDR_VAR 0 14
31695: PUSH
31696: CALL_OW 44
31700: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
31701: LD_ADDR_VAR 0 7
31705: PUSH
31706: LD_VAR 0 7
31710: PPUSH
31711: LD_INT 1
31713: PPUSH
31714: LD_VAR 0 14
31718: PPUSH
31719: CALL_OW 2
31723: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
31724: LD_VAR 0 14
31728: PPUSH
31729: LD_VAR 0 9
31733: PPUSH
31734: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
31738: LD_VAR 0 9
31742: PPUSH
31743: CALL_OW 313
31747: PUSH
31748: LD_INT 6
31750: EQUAL
31751: PUSH
31752: LD_VAR 0 9
31756: PPUSH
31757: CALL_OW 266
31761: PUSH
31762: LD_INT 32
31764: PUSH
31765: LD_INT 31
31767: PUSH
31768: EMPTY
31769: LIST
31770: LIST
31771: IN
31772: OR
31773: IFFALSE 31587
31775: GO 31584
31777: POP
31778: POP
// end else
31779: GO 32161
// for j = 1 to x do
31781: LD_ADDR_VAR 0 9
31785: PUSH
31786: DOUBLE
31787: LD_INT 1
31789: DEC
31790: ST_TO_ADDR
31791: LD_VAR 0 13
31795: PUSH
31796: FOR_TO
31797: IFFALSE 32159
// begin InitHc ;
31799: CALL_OW 19
// if not f then
31803: LD_VAR 0 12
31807: NOT
31808: IFFALSE 31897
// begin PrepareHuman ( false , i , skill ) ;
31810: LD_INT 0
31812: PPUSH
31813: LD_VAR 0 8
31817: PPUSH
31818: LD_VAR 0 4
31822: PPUSH
31823: CALL_OW 380
// un := CreateHuman ;
31827: LD_ADDR_VAR 0 14
31831: PUSH
31832: CALL_OW 44
31836: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
31837: LD_ADDR_VAR 0 7
31841: PUSH
31842: LD_VAR 0 7
31846: PPUSH
31847: LD_INT 1
31849: PPUSH
31850: LD_VAR 0 14
31854: PPUSH
31855: CALL_OW 2
31859: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
31860: LD_VAR 0 14
31864: PPUSH
31865: LD_VAR 0 1
31869: PPUSH
31870: CALL_OW 250
31874: PPUSH
31875: LD_VAR 0 1
31879: PPUSH
31880: CALL_OW 251
31884: PPUSH
31885: LD_INT 10
31887: PPUSH
31888: LD_INT 0
31890: PPUSH
31891: CALL_OW 50
// continue ;
31895: GO 31796
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
31897: LD_VAR 0 12
31901: PUSH
31902: LD_INT 1
31904: ARRAY
31905: PPUSH
31906: CALL_OW 313
31910: PUSH
31911: LD_VAR 0 12
31915: PUSH
31916: LD_INT 1
31918: ARRAY
31919: PPUSH
31920: CALL_OW 266
31924: PUSH
31925: LD_INT 32
31927: PUSH
31928: LD_INT 31
31930: PUSH
31931: EMPTY
31932: LIST
31933: LIST
31934: IN
31935: AND
31936: PUSH
31937: LD_VAR 0 12
31941: PUSH
31942: LD_INT 1
31944: ARRAY
31945: PPUSH
31946: CALL_OW 313
31950: PUSH
31951: LD_INT 6
31953: EQUAL
31954: OR
31955: IFFALSE 31975
// f := Delete ( f , 1 ) ;
31957: LD_ADDR_VAR 0 12
31961: PUSH
31962: LD_VAR 0 12
31966: PPUSH
31967: LD_INT 1
31969: PPUSH
31970: CALL_OW 3
31974: ST_TO_ADDR
// if not f then
31975: LD_VAR 0 12
31979: NOT
31980: IFFALSE 31998
// begin x := x + 2 ;
31982: LD_ADDR_VAR 0 13
31986: PUSH
31987: LD_VAR 0 13
31991: PUSH
31992: LD_INT 2
31994: PLUS
31995: ST_TO_ADDR
// continue ;
31996: GO 31796
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
31998: LD_VAR 0 12
32002: PUSH
32003: LD_INT 1
32005: ARRAY
32006: PPUSH
32007: CALL_OW 266
32011: PUSH
32012: LD_INT 5
32014: EQUAL
32015: IFFALSE 32089
// begin if UnitsInside ( f [ 1 ] ) < 3 then
32017: LD_VAR 0 12
32021: PUSH
32022: LD_INT 1
32024: ARRAY
32025: PPUSH
32026: CALL_OW 313
32030: PUSH
32031: LD_INT 3
32033: LESS
32034: IFFALSE 32070
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
32036: LD_INT 0
32038: PPUSH
32039: LD_INT 5
32041: PUSH
32042: LD_INT 8
32044: PUSH
32045: LD_INT 9
32047: PUSH
32048: EMPTY
32049: LIST
32050: LIST
32051: LIST
32052: PUSH
32053: LD_VAR 0 17
32057: ARRAY
32058: PPUSH
32059: LD_VAR 0 4
32063: PPUSH
32064: CALL_OW 380
32068: GO 32087
// PrepareHuman ( false , i , skill ) ;
32070: LD_INT 0
32072: PPUSH
32073: LD_VAR 0 8
32077: PPUSH
32078: LD_VAR 0 4
32082: PPUSH
32083: CALL_OW 380
// end else
32087: GO 32106
// PrepareHuman ( false , i , skill ) ;
32089: LD_INT 0
32091: PPUSH
32092: LD_VAR 0 8
32096: PPUSH
32097: LD_VAR 0 4
32101: PPUSH
32102: CALL_OW 380
// un := CreateHuman ;
32106: LD_ADDR_VAR 0 14
32110: PUSH
32111: CALL_OW 44
32115: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
32116: LD_ADDR_VAR 0 7
32120: PUSH
32121: LD_VAR 0 7
32125: PPUSH
32126: LD_INT 1
32128: PPUSH
32129: LD_VAR 0 14
32133: PPUSH
32134: CALL_OW 2
32138: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
32139: LD_VAR 0 14
32143: PPUSH
32144: LD_VAR 0 12
32148: PUSH
32149: LD_INT 1
32151: ARRAY
32152: PPUSH
32153: CALL_OW 52
// end ;
32157: GO 31796
32159: POP
32160: POP
// end ;
32161: GO 31098
32163: POP
32164: POP
// result := result ^ buildings ;
32165: LD_ADDR_VAR 0 7
32169: PUSH
32170: LD_VAR 0 7
32174: PUSH
32175: LD_VAR 0 18
32179: ADD
32180: ST_TO_ADDR
// end else
32181: GO 32324
// begin for i = 1 to personel do
32183: LD_ADDR_VAR 0 8
32187: PUSH
32188: DOUBLE
32189: LD_INT 1
32191: DEC
32192: ST_TO_ADDR
32193: LD_VAR 0 6
32197: PUSH
32198: FOR_TO
32199: IFFALSE 32322
// begin if i > 4 then
32201: LD_VAR 0 8
32205: PUSH
32206: LD_INT 4
32208: GREATER
32209: IFFALSE 32213
// break ;
32211: GO 32322
// x := personel [ i ] ;
32213: LD_ADDR_VAR 0 13
32217: PUSH
32218: LD_VAR 0 6
32222: PUSH
32223: LD_VAR 0 8
32227: ARRAY
32228: ST_TO_ADDR
// if x = - 1 then
32229: LD_VAR 0 13
32233: PUSH
32234: LD_INT 1
32236: NEG
32237: EQUAL
32238: IFFALSE 32242
// continue ;
32240: GO 32198
// PrepareHuman ( false , i , skill ) ;
32242: LD_INT 0
32244: PPUSH
32245: LD_VAR 0 8
32249: PPUSH
32250: LD_VAR 0 4
32254: PPUSH
32255: CALL_OW 380
// un := CreateHuman ;
32259: LD_ADDR_VAR 0 14
32263: PUSH
32264: CALL_OW 44
32268: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
32269: LD_VAR 0 14
32273: PPUSH
32274: LD_VAR 0 1
32278: PPUSH
32279: CALL_OW 250
32283: PPUSH
32284: LD_VAR 0 1
32288: PPUSH
32289: CALL_OW 251
32293: PPUSH
32294: LD_INT 10
32296: PPUSH
32297: LD_INT 0
32299: PPUSH
32300: CALL_OW 50
// result := result ^ un ;
32304: LD_ADDR_VAR 0 7
32308: PUSH
32309: LD_VAR 0 7
32313: PUSH
32314: LD_VAR 0 14
32318: ADD
32319: ST_TO_ADDR
// end ;
32320: GO 32198
32322: POP
32323: POP
// end ; end ;
32324: LD_VAR 0 7
32328: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
32329: LD_INT 0
32331: PPUSH
32332: PPUSH
32333: PPUSH
32334: PPUSH
32335: PPUSH
32336: PPUSH
32337: PPUSH
32338: PPUSH
32339: PPUSH
32340: PPUSH
32341: PPUSH
32342: PPUSH
32343: PPUSH
32344: PPUSH
32345: PPUSH
32346: PPUSH
// result := false ;
32347: LD_ADDR_VAR 0 3
32351: PUSH
32352: LD_INT 0
32354: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
32355: LD_VAR 0 1
32359: NOT
32360: PUSH
32361: LD_VAR 0 1
32365: PPUSH
32366: CALL_OW 266
32370: PUSH
32371: LD_INT 32
32373: PUSH
32374: LD_INT 33
32376: PUSH
32377: EMPTY
32378: LIST
32379: LIST
32380: IN
32381: NOT
32382: OR
32383: IFFALSE 32387
// exit ;
32385: GO 33523
// nat := GetNation ( tower ) ;
32387: LD_ADDR_VAR 0 12
32391: PUSH
32392: LD_VAR 0 1
32396: PPUSH
32397: CALL_OW 248
32401: ST_TO_ADDR
// side := GetSide ( tower ) ;
32402: LD_ADDR_VAR 0 16
32406: PUSH
32407: LD_VAR 0 1
32411: PPUSH
32412: CALL_OW 255
32416: ST_TO_ADDR
// x := GetX ( tower ) ;
32417: LD_ADDR_VAR 0 10
32421: PUSH
32422: LD_VAR 0 1
32426: PPUSH
32427: CALL_OW 250
32431: ST_TO_ADDR
// y := GetY ( tower ) ;
32432: LD_ADDR_VAR 0 11
32436: PUSH
32437: LD_VAR 0 1
32441: PPUSH
32442: CALL_OW 251
32446: ST_TO_ADDR
// if not x or not y then
32447: LD_VAR 0 10
32451: NOT
32452: PUSH
32453: LD_VAR 0 11
32457: NOT
32458: OR
32459: IFFALSE 32463
// exit ;
32461: GO 33523
// weapon := 0 ;
32463: LD_ADDR_VAR 0 18
32467: PUSH
32468: LD_INT 0
32470: ST_TO_ADDR
// fac_list := [ ] ;
32471: LD_ADDR_VAR 0 17
32475: PUSH
32476: EMPTY
32477: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
32478: LD_ADDR_VAR 0 6
32482: PUSH
32483: LD_VAR 0 1
32487: PPUSH
32488: CALL_OW 274
32492: PPUSH
32493: LD_VAR 0 2
32497: PPUSH
32498: CALL 30101 0 2
32502: PPUSH
32503: LD_INT 30
32505: PUSH
32506: LD_INT 3
32508: PUSH
32509: EMPTY
32510: LIST
32511: LIST
32512: PPUSH
32513: CALL_OW 72
32517: ST_TO_ADDR
// if not factories then
32518: LD_VAR 0 6
32522: NOT
32523: IFFALSE 32527
// exit ;
32525: GO 33523
// for i in factories do
32527: LD_ADDR_VAR 0 8
32531: PUSH
32532: LD_VAR 0 6
32536: PUSH
32537: FOR_IN
32538: IFFALSE 32563
// fac_list := fac_list union AvailableWeaponList ( i ) ;
32540: LD_ADDR_VAR 0 17
32544: PUSH
32545: LD_VAR 0 17
32549: PUSH
32550: LD_VAR 0 8
32554: PPUSH
32555: CALL_OW 478
32559: UNION
32560: ST_TO_ADDR
32561: GO 32537
32563: POP
32564: POP
// if not fac_list then
32565: LD_VAR 0 17
32569: NOT
32570: IFFALSE 32574
// exit ;
32572: GO 33523
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
32574: LD_ADDR_VAR 0 5
32578: PUSH
32579: LD_INT 4
32581: PUSH
32582: LD_INT 5
32584: PUSH
32585: LD_INT 9
32587: PUSH
32588: LD_INT 10
32590: PUSH
32591: LD_INT 6
32593: PUSH
32594: LD_INT 7
32596: PUSH
32597: LD_INT 11
32599: PUSH
32600: EMPTY
32601: LIST
32602: LIST
32603: LIST
32604: LIST
32605: LIST
32606: LIST
32607: LIST
32608: PUSH
32609: LD_INT 27
32611: PUSH
32612: LD_INT 28
32614: PUSH
32615: LD_INT 26
32617: PUSH
32618: LD_INT 30
32620: PUSH
32621: EMPTY
32622: LIST
32623: LIST
32624: LIST
32625: LIST
32626: PUSH
32627: LD_INT 43
32629: PUSH
32630: LD_INT 44
32632: PUSH
32633: LD_INT 46
32635: PUSH
32636: LD_INT 45
32638: PUSH
32639: LD_INT 47
32641: PUSH
32642: LD_INT 49
32644: PUSH
32645: EMPTY
32646: LIST
32647: LIST
32648: LIST
32649: LIST
32650: LIST
32651: LIST
32652: PUSH
32653: EMPTY
32654: LIST
32655: LIST
32656: LIST
32657: PUSH
32658: LD_VAR 0 12
32662: ARRAY
32663: ST_TO_ADDR
// for i in list do
32664: LD_ADDR_VAR 0 8
32668: PUSH
32669: LD_VAR 0 5
32673: PUSH
32674: FOR_IN
32675: IFFALSE 32708
// if not i in fac_list then
32677: LD_VAR 0 8
32681: PUSH
32682: LD_VAR 0 17
32686: IN
32687: NOT
32688: IFFALSE 32706
// list := list diff i ;
32690: LD_ADDR_VAR 0 5
32694: PUSH
32695: LD_VAR 0 5
32699: PUSH
32700: LD_VAR 0 8
32704: DIFF
32705: ST_TO_ADDR
32706: GO 32674
32708: POP
32709: POP
// if not list then
32710: LD_VAR 0 5
32714: NOT
32715: IFFALSE 32719
// exit ;
32717: GO 33523
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
32719: LD_VAR 0 12
32723: PUSH
32724: LD_INT 3
32726: EQUAL
32727: PUSH
32728: LD_INT 49
32730: PUSH
32731: LD_VAR 0 5
32735: IN
32736: AND
32737: PUSH
32738: LD_INT 31
32740: PPUSH
32741: LD_VAR 0 16
32745: PPUSH
32746: CALL_OW 321
32750: PUSH
32751: LD_INT 2
32753: EQUAL
32754: AND
32755: IFFALSE 32815
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
32757: LD_INT 22
32759: PUSH
32760: LD_VAR 0 16
32764: PUSH
32765: EMPTY
32766: LIST
32767: LIST
32768: PUSH
32769: LD_INT 35
32771: PUSH
32772: LD_INT 49
32774: PUSH
32775: EMPTY
32776: LIST
32777: LIST
32778: PUSH
32779: LD_INT 91
32781: PUSH
32782: LD_VAR 0 1
32786: PUSH
32787: LD_INT 10
32789: PUSH
32790: EMPTY
32791: LIST
32792: LIST
32793: LIST
32794: PUSH
32795: EMPTY
32796: LIST
32797: LIST
32798: LIST
32799: PPUSH
32800: CALL_OW 69
32804: NOT
32805: IFFALSE 32815
// weapon := ru_time_lapser ;
32807: LD_ADDR_VAR 0 18
32811: PUSH
32812: LD_INT 49
32814: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
32815: LD_VAR 0 12
32819: PUSH
32820: LD_INT 1
32822: PUSH
32823: LD_INT 2
32825: PUSH
32826: EMPTY
32827: LIST
32828: LIST
32829: IN
32830: PUSH
32831: LD_INT 11
32833: PUSH
32834: LD_VAR 0 5
32838: IN
32839: PUSH
32840: LD_INT 30
32842: PUSH
32843: LD_VAR 0 5
32847: IN
32848: OR
32849: AND
32850: PUSH
32851: LD_INT 6
32853: PPUSH
32854: LD_VAR 0 16
32858: PPUSH
32859: CALL_OW 321
32863: PUSH
32864: LD_INT 2
32866: EQUAL
32867: AND
32868: IFFALSE 33033
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
32870: LD_INT 22
32872: PUSH
32873: LD_VAR 0 16
32877: PUSH
32878: EMPTY
32879: LIST
32880: LIST
32881: PUSH
32882: LD_INT 2
32884: PUSH
32885: LD_INT 35
32887: PUSH
32888: LD_INT 11
32890: PUSH
32891: EMPTY
32892: LIST
32893: LIST
32894: PUSH
32895: LD_INT 35
32897: PUSH
32898: LD_INT 30
32900: PUSH
32901: EMPTY
32902: LIST
32903: LIST
32904: PUSH
32905: EMPTY
32906: LIST
32907: LIST
32908: LIST
32909: PUSH
32910: LD_INT 91
32912: PUSH
32913: LD_VAR 0 1
32917: PUSH
32918: LD_INT 18
32920: PUSH
32921: EMPTY
32922: LIST
32923: LIST
32924: LIST
32925: PUSH
32926: EMPTY
32927: LIST
32928: LIST
32929: LIST
32930: PPUSH
32931: CALL_OW 69
32935: NOT
32936: PUSH
32937: LD_INT 22
32939: PUSH
32940: LD_VAR 0 16
32944: PUSH
32945: EMPTY
32946: LIST
32947: LIST
32948: PUSH
32949: LD_INT 2
32951: PUSH
32952: LD_INT 30
32954: PUSH
32955: LD_INT 32
32957: PUSH
32958: EMPTY
32959: LIST
32960: LIST
32961: PUSH
32962: LD_INT 30
32964: PUSH
32965: LD_INT 33
32967: PUSH
32968: EMPTY
32969: LIST
32970: LIST
32971: PUSH
32972: EMPTY
32973: LIST
32974: LIST
32975: LIST
32976: PUSH
32977: LD_INT 91
32979: PUSH
32980: LD_VAR 0 1
32984: PUSH
32985: LD_INT 12
32987: PUSH
32988: EMPTY
32989: LIST
32990: LIST
32991: LIST
32992: PUSH
32993: EMPTY
32994: LIST
32995: LIST
32996: LIST
32997: PUSH
32998: EMPTY
32999: LIST
33000: PPUSH
33001: CALL_OW 69
33005: PUSH
33006: LD_INT 2
33008: GREATER
33009: AND
33010: IFFALSE 33033
// weapon := [ us_radar , ar_radar ] [ nat ] ;
33012: LD_ADDR_VAR 0 18
33016: PUSH
33017: LD_INT 11
33019: PUSH
33020: LD_INT 30
33022: PUSH
33023: EMPTY
33024: LIST
33025: LIST
33026: PUSH
33027: LD_VAR 0 12
33031: ARRAY
33032: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
33033: LD_VAR 0 18
33037: NOT
33038: PUSH
33039: LD_INT 40
33041: PPUSH
33042: LD_VAR 0 16
33046: PPUSH
33047: CALL_OW 321
33051: PUSH
33052: LD_INT 2
33054: EQUAL
33055: AND
33056: PUSH
33057: LD_INT 7
33059: PUSH
33060: LD_VAR 0 5
33064: IN
33065: PUSH
33066: LD_INT 28
33068: PUSH
33069: LD_VAR 0 5
33073: IN
33074: OR
33075: PUSH
33076: LD_INT 45
33078: PUSH
33079: LD_VAR 0 5
33083: IN
33084: OR
33085: AND
33086: IFFALSE 33340
// begin hex := GetHexInfo ( x , y ) ;
33088: LD_ADDR_VAR 0 4
33092: PUSH
33093: LD_VAR 0 10
33097: PPUSH
33098: LD_VAR 0 11
33102: PPUSH
33103: CALL_OW 546
33107: ST_TO_ADDR
// if hex [ 1 ] then
33108: LD_VAR 0 4
33112: PUSH
33113: LD_INT 1
33115: ARRAY
33116: IFFALSE 33120
// exit ;
33118: GO 33523
// height := hex [ 2 ] ;
33120: LD_ADDR_VAR 0 15
33124: PUSH
33125: LD_VAR 0 4
33129: PUSH
33130: LD_INT 2
33132: ARRAY
33133: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
33134: LD_ADDR_VAR 0 14
33138: PUSH
33139: LD_INT 0
33141: PUSH
33142: LD_INT 2
33144: PUSH
33145: LD_INT 3
33147: PUSH
33148: LD_INT 5
33150: PUSH
33151: EMPTY
33152: LIST
33153: LIST
33154: LIST
33155: LIST
33156: ST_TO_ADDR
// for i in tmp do
33157: LD_ADDR_VAR 0 8
33161: PUSH
33162: LD_VAR 0 14
33166: PUSH
33167: FOR_IN
33168: IFFALSE 33338
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
33170: LD_ADDR_VAR 0 9
33174: PUSH
33175: LD_VAR 0 10
33179: PPUSH
33180: LD_VAR 0 8
33184: PPUSH
33185: LD_INT 5
33187: PPUSH
33188: CALL_OW 272
33192: PUSH
33193: LD_VAR 0 11
33197: PPUSH
33198: LD_VAR 0 8
33202: PPUSH
33203: LD_INT 5
33205: PPUSH
33206: CALL_OW 273
33210: PUSH
33211: EMPTY
33212: LIST
33213: LIST
33214: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
33215: LD_VAR 0 9
33219: PUSH
33220: LD_INT 1
33222: ARRAY
33223: PPUSH
33224: LD_VAR 0 9
33228: PUSH
33229: LD_INT 2
33231: ARRAY
33232: PPUSH
33233: CALL_OW 488
33237: IFFALSE 33336
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
33239: LD_ADDR_VAR 0 4
33243: PUSH
33244: LD_VAR 0 9
33248: PUSH
33249: LD_INT 1
33251: ARRAY
33252: PPUSH
33253: LD_VAR 0 9
33257: PUSH
33258: LD_INT 2
33260: ARRAY
33261: PPUSH
33262: CALL_OW 546
33266: ST_TO_ADDR
// if hex [ 1 ] then
33267: LD_VAR 0 4
33271: PUSH
33272: LD_INT 1
33274: ARRAY
33275: IFFALSE 33279
// continue ;
33277: GO 33167
// h := hex [ 2 ] ;
33279: LD_ADDR_VAR 0 13
33283: PUSH
33284: LD_VAR 0 4
33288: PUSH
33289: LD_INT 2
33291: ARRAY
33292: ST_TO_ADDR
// if h + 7 < height then
33293: LD_VAR 0 13
33297: PUSH
33298: LD_INT 7
33300: PLUS
33301: PUSH
33302: LD_VAR 0 15
33306: LESS
33307: IFFALSE 33336
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
33309: LD_ADDR_VAR 0 18
33313: PUSH
33314: LD_INT 7
33316: PUSH
33317: LD_INT 28
33319: PUSH
33320: LD_INT 45
33322: PUSH
33323: EMPTY
33324: LIST
33325: LIST
33326: LIST
33327: PUSH
33328: LD_VAR 0 12
33332: ARRAY
33333: ST_TO_ADDR
// break ;
33334: GO 33338
// end ; end ; end ;
33336: GO 33167
33338: POP
33339: POP
// end ; if not weapon then
33340: LD_VAR 0 18
33344: NOT
33345: IFFALSE 33405
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
33347: LD_ADDR_VAR 0 5
33351: PUSH
33352: LD_VAR 0 5
33356: PUSH
33357: LD_INT 11
33359: PUSH
33360: LD_INT 30
33362: PUSH
33363: LD_INT 49
33365: PUSH
33366: EMPTY
33367: LIST
33368: LIST
33369: LIST
33370: DIFF
33371: ST_TO_ADDR
// if not list then
33372: LD_VAR 0 5
33376: NOT
33377: IFFALSE 33381
// exit ;
33379: GO 33523
// weapon := list [ rand ( 1 , list ) ] ;
33381: LD_ADDR_VAR 0 18
33385: PUSH
33386: LD_VAR 0 5
33390: PUSH
33391: LD_INT 1
33393: PPUSH
33394: LD_VAR 0 5
33398: PPUSH
33399: CALL_OW 12
33403: ARRAY
33404: ST_TO_ADDR
// end ; if weapon then
33405: LD_VAR 0 18
33409: IFFALSE 33523
// begin tmp := CostOfWeapon ( weapon ) ;
33411: LD_ADDR_VAR 0 14
33415: PUSH
33416: LD_VAR 0 18
33420: PPUSH
33421: CALL_OW 451
33425: ST_TO_ADDR
// j := GetBase ( tower ) ;
33426: LD_ADDR_VAR 0 9
33430: PUSH
33431: LD_VAR 0 1
33435: PPUSH
33436: CALL_OW 274
33440: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
33441: LD_VAR 0 9
33445: PPUSH
33446: LD_INT 1
33448: PPUSH
33449: CALL_OW 275
33453: PUSH
33454: LD_VAR 0 14
33458: PUSH
33459: LD_INT 1
33461: ARRAY
33462: GREATEREQUAL
33463: PUSH
33464: LD_VAR 0 9
33468: PPUSH
33469: LD_INT 2
33471: PPUSH
33472: CALL_OW 275
33476: PUSH
33477: LD_VAR 0 14
33481: PUSH
33482: LD_INT 2
33484: ARRAY
33485: GREATEREQUAL
33486: AND
33487: PUSH
33488: LD_VAR 0 9
33492: PPUSH
33493: LD_INT 3
33495: PPUSH
33496: CALL_OW 275
33500: PUSH
33501: LD_VAR 0 14
33505: PUSH
33506: LD_INT 3
33508: ARRAY
33509: GREATEREQUAL
33510: AND
33511: IFFALSE 33523
// result := weapon ;
33513: LD_ADDR_VAR 0 3
33517: PUSH
33518: LD_VAR 0 18
33522: ST_TO_ADDR
// end ; end ;
33523: LD_VAR 0 3
33527: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
33528: LD_INT 0
33530: PPUSH
33531: PPUSH
// result := true ;
33532: LD_ADDR_VAR 0 3
33536: PUSH
33537: LD_INT 1
33539: ST_TO_ADDR
// if array1 = array2 then
33540: LD_VAR 0 1
33544: PUSH
33545: LD_VAR 0 2
33549: EQUAL
33550: IFFALSE 33610
// begin for i = 1 to array1 do
33552: LD_ADDR_VAR 0 4
33556: PUSH
33557: DOUBLE
33558: LD_INT 1
33560: DEC
33561: ST_TO_ADDR
33562: LD_VAR 0 1
33566: PUSH
33567: FOR_TO
33568: IFFALSE 33606
// if array1 [ i ] <> array2 [ i ] then
33570: LD_VAR 0 1
33574: PUSH
33575: LD_VAR 0 4
33579: ARRAY
33580: PUSH
33581: LD_VAR 0 2
33585: PUSH
33586: LD_VAR 0 4
33590: ARRAY
33591: NONEQUAL
33592: IFFALSE 33604
// begin result := false ;
33594: LD_ADDR_VAR 0 3
33598: PUSH
33599: LD_INT 0
33601: ST_TO_ADDR
// break ;
33602: GO 33606
// end ;
33604: GO 33567
33606: POP
33607: POP
// end else
33608: GO 33618
// result := false ;
33610: LD_ADDR_VAR 0 3
33614: PUSH
33615: LD_INT 0
33617: ST_TO_ADDR
// end ;
33618: LD_VAR 0 3
33622: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
33623: LD_INT 0
33625: PPUSH
33626: PPUSH
33627: PPUSH
// pom := GetBase ( fac ) ;
33628: LD_ADDR_VAR 0 5
33632: PUSH
33633: LD_VAR 0 1
33637: PPUSH
33638: CALL_OW 274
33642: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
33643: LD_ADDR_VAR 0 4
33647: PUSH
33648: LD_VAR 0 2
33652: PUSH
33653: LD_INT 1
33655: ARRAY
33656: PPUSH
33657: LD_VAR 0 2
33661: PUSH
33662: LD_INT 2
33664: ARRAY
33665: PPUSH
33666: LD_VAR 0 2
33670: PUSH
33671: LD_INT 3
33673: ARRAY
33674: PPUSH
33675: LD_VAR 0 2
33679: PUSH
33680: LD_INT 4
33682: ARRAY
33683: PPUSH
33684: CALL_OW 449
33688: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
33689: LD_ADDR_VAR 0 3
33693: PUSH
33694: LD_VAR 0 5
33698: PPUSH
33699: LD_INT 1
33701: PPUSH
33702: CALL_OW 275
33706: PUSH
33707: LD_VAR 0 4
33711: PUSH
33712: LD_INT 1
33714: ARRAY
33715: GREATEREQUAL
33716: PUSH
33717: LD_VAR 0 5
33721: PPUSH
33722: LD_INT 2
33724: PPUSH
33725: CALL_OW 275
33729: PUSH
33730: LD_VAR 0 4
33734: PUSH
33735: LD_INT 2
33737: ARRAY
33738: GREATEREQUAL
33739: AND
33740: PUSH
33741: LD_VAR 0 5
33745: PPUSH
33746: LD_INT 3
33748: PPUSH
33749: CALL_OW 275
33753: PUSH
33754: LD_VAR 0 4
33758: PUSH
33759: LD_INT 3
33761: ARRAY
33762: GREATEREQUAL
33763: AND
33764: ST_TO_ADDR
// end ;
33765: LD_VAR 0 3
33769: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
33770: LD_INT 0
33772: PPUSH
33773: PPUSH
33774: PPUSH
33775: PPUSH
// pom := GetBase ( building ) ;
33776: LD_ADDR_VAR 0 3
33780: PUSH
33781: LD_VAR 0 1
33785: PPUSH
33786: CALL_OW 274
33790: ST_TO_ADDR
// if not pom then
33791: LD_VAR 0 3
33795: NOT
33796: IFFALSE 33800
// exit ;
33798: GO 33970
// btype := GetBType ( building ) ;
33800: LD_ADDR_VAR 0 5
33804: PUSH
33805: LD_VAR 0 1
33809: PPUSH
33810: CALL_OW 266
33814: ST_TO_ADDR
// if btype = b_armoury then
33815: LD_VAR 0 5
33819: PUSH
33820: LD_INT 4
33822: EQUAL
33823: IFFALSE 33833
// btype := b_barracks ;
33825: LD_ADDR_VAR 0 5
33829: PUSH
33830: LD_INT 5
33832: ST_TO_ADDR
// if btype = b_depot then
33833: LD_VAR 0 5
33837: PUSH
33838: LD_INT 0
33840: EQUAL
33841: IFFALSE 33851
// btype := b_warehouse ;
33843: LD_ADDR_VAR 0 5
33847: PUSH
33848: LD_INT 1
33850: ST_TO_ADDR
// if btype = b_workshop then
33851: LD_VAR 0 5
33855: PUSH
33856: LD_INT 2
33858: EQUAL
33859: IFFALSE 33869
// btype := b_factory ;
33861: LD_ADDR_VAR 0 5
33865: PUSH
33866: LD_INT 3
33868: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
33869: LD_ADDR_VAR 0 4
33873: PUSH
33874: LD_VAR 0 5
33878: PPUSH
33879: LD_VAR 0 1
33883: PPUSH
33884: CALL_OW 248
33888: PPUSH
33889: CALL_OW 450
33893: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
33894: LD_ADDR_VAR 0 2
33898: PUSH
33899: LD_VAR 0 3
33903: PPUSH
33904: LD_INT 1
33906: PPUSH
33907: CALL_OW 275
33911: PUSH
33912: LD_VAR 0 4
33916: PUSH
33917: LD_INT 1
33919: ARRAY
33920: GREATEREQUAL
33921: PUSH
33922: LD_VAR 0 3
33926: PPUSH
33927: LD_INT 2
33929: PPUSH
33930: CALL_OW 275
33934: PUSH
33935: LD_VAR 0 4
33939: PUSH
33940: LD_INT 2
33942: ARRAY
33943: GREATEREQUAL
33944: AND
33945: PUSH
33946: LD_VAR 0 3
33950: PPUSH
33951: LD_INT 3
33953: PPUSH
33954: CALL_OW 275
33958: PUSH
33959: LD_VAR 0 4
33963: PUSH
33964: LD_INT 3
33966: ARRAY
33967: GREATEREQUAL
33968: AND
33969: ST_TO_ADDR
// end ;
33970: LD_VAR 0 2
33974: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
33975: LD_INT 0
33977: PPUSH
33978: PPUSH
33979: PPUSH
// pom := GetBase ( building ) ;
33980: LD_ADDR_VAR 0 4
33984: PUSH
33985: LD_VAR 0 1
33989: PPUSH
33990: CALL_OW 274
33994: ST_TO_ADDR
// if not pom then
33995: LD_VAR 0 4
33999: NOT
34000: IFFALSE 34004
// exit ;
34002: GO 34105
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
34004: LD_ADDR_VAR 0 5
34008: PUSH
34009: LD_VAR 0 2
34013: PPUSH
34014: LD_VAR 0 1
34018: PPUSH
34019: CALL_OW 248
34023: PPUSH
34024: CALL_OW 450
34028: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
34029: LD_ADDR_VAR 0 3
34033: PUSH
34034: LD_VAR 0 4
34038: PPUSH
34039: LD_INT 1
34041: PPUSH
34042: CALL_OW 275
34046: PUSH
34047: LD_VAR 0 5
34051: PUSH
34052: LD_INT 1
34054: ARRAY
34055: GREATEREQUAL
34056: PUSH
34057: LD_VAR 0 4
34061: PPUSH
34062: LD_INT 2
34064: PPUSH
34065: CALL_OW 275
34069: PUSH
34070: LD_VAR 0 5
34074: PUSH
34075: LD_INT 2
34077: ARRAY
34078: GREATEREQUAL
34079: AND
34080: PUSH
34081: LD_VAR 0 4
34085: PPUSH
34086: LD_INT 3
34088: PPUSH
34089: CALL_OW 275
34093: PUSH
34094: LD_VAR 0 5
34098: PUSH
34099: LD_INT 3
34101: ARRAY
34102: GREATEREQUAL
34103: AND
34104: ST_TO_ADDR
// end ;
34105: LD_VAR 0 3
34109: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
34110: LD_INT 0
34112: PPUSH
34113: PPUSH
34114: PPUSH
34115: PPUSH
34116: PPUSH
34117: PPUSH
34118: PPUSH
34119: PPUSH
34120: PPUSH
34121: PPUSH
// result := false ;
34122: LD_ADDR_VAR 0 6
34126: PUSH
34127: LD_INT 0
34129: ST_TO_ADDR
// if not base or not btype or not x or not y then
34130: LD_VAR 0 1
34134: NOT
34135: PUSH
34136: LD_VAR 0 2
34140: NOT
34141: OR
34142: PUSH
34143: LD_VAR 0 3
34147: NOT
34148: OR
34149: PUSH
34150: LD_VAR 0 4
34154: NOT
34155: OR
34156: IFFALSE 34160
// exit ;
34158: GO 34769
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
34160: LD_ADDR_VAR 0 12
34164: PUSH
34165: LD_VAR 0 2
34169: PPUSH
34170: LD_VAR 0 3
34174: PPUSH
34175: LD_VAR 0 4
34179: PPUSH
34180: LD_VAR 0 5
34184: PPUSH
34185: LD_VAR 0 1
34189: PUSH
34190: LD_INT 1
34192: ARRAY
34193: PPUSH
34194: CALL_OW 248
34198: PPUSH
34199: LD_INT 0
34201: PPUSH
34202: CALL 35606 0 6
34206: ST_TO_ADDR
// if not hexes then
34207: LD_VAR 0 12
34211: NOT
34212: IFFALSE 34216
// exit ;
34214: GO 34769
// for i = 1 to hexes do
34216: LD_ADDR_VAR 0 7
34220: PUSH
34221: DOUBLE
34222: LD_INT 1
34224: DEC
34225: ST_TO_ADDR
34226: LD_VAR 0 12
34230: PUSH
34231: FOR_TO
34232: IFFALSE 34767
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
34234: LD_ADDR_VAR 0 11
34238: PUSH
34239: LD_VAR 0 12
34243: PUSH
34244: LD_VAR 0 7
34248: ARRAY
34249: PUSH
34250: LD_INT 1
34252: ARRAY
34253: PPUSH
34254: LD_VAR 0 12
34258: PUSH
34259: LD_VAR 0 7
34263: ARRAY
34264: PUSH
34265: LD_INT 2
34267: ARRAY
34268: PPUSH
34269: CALL_OW 428
34273: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
34274: LD_VAR 0 12
34278: PUSH
34279: LD_VAR 0 7
34283: ARRAY
34284: PUSH
34285: LD_INT 1
34287: ARRAY
34288: PPUSH
34289: LD_VAR 0 12
34293: PUSH
34294: LD_VAR 0 7
34298: ARRAY
34299: PUSH
34300: LD_INT 2
34302: ARRAY
34303: PPUSH
34304: CALL_OW 351
34308: PUSH
34309: LD_VAR 0 12
34313: PUSH
34314: LD_VAR 0 7
34318: ARRAY
34319: PUSH
34320: LD_INT 1
34322: ARRAY
34323: PPUSH
34324: LD_VAR 0 12
34328: PUSH
34329: LD_VAR 0 7
34333: ARRAY
34334: PUSH
34335: LD_INT 2
34337: ARRAY
34338: PPUSH
34339: CALL_OW 488
34343: NOT
34344: OR
34345: PUSH
34346: LD_VAR 0 11
34350: PPUSH
34351: CALL_OW 247
34355: PUSH
34356: LD_INT 3
34358: EQUAL
34359: OR
34360: IFFALSE 34366
// exit ;
34362: POP
34363: POP
34364: GO 34769
// if not tmp or not tmp in base then
34366: LD_VAR 0 11
34370: NOT
34371: PUSH
34372: LD_VAR 0 11
34376: PUSH
34377: LD_VAR 0 1
34381: IN
34382: NOT
34383: OR
34384: IFFALSE 34388
// continue ;
34386: GO 34231
// result := true ;
34388: LD_ADDR_VAR 0 6
34392: PUSH
34393: LD_INT 1
34395: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
34396: LD_ADDR_VAR 0 15
34400: PUSH
34401: LD_VAR 0 1
34405: PPUSH
34406: LD_INT 22
34408: PUSH
34409: LD_VAR 0 11
34413: PPUSH
34414: CALL_OW 255
34418: PUSH
34419: EMPTY
34420: LIST
34421: LIST
34422: PUSH
34423: LD_INT 2
34425: PUSH
34426: LD_INT 30
34428: PUSH
34429: LD_INT 0
34431: PUSH
34432: EMPTY
34433: LIST
34434: LIST
34435: PUSH
34436: LD_INT 30
34438: PUSH
34439: LD_INT 1
34441: PUSH
34442: EMPTY
34443: LIST
34444: LIST
34445: PUSH
34446: EMPTY
34447: LIST
34448: LIST
34449: LIST
34450: PUSH
34451: EMPTY
34452: LIST
34453: LIST
34454: PPUSH
34455: CALL_OW 72
34459: ST_TO_ADDR
// if dep then
34460: LD_VAR 0 15
34464: IFFALSE 34600
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
34466: LD_ADDR_VAR 0 14
34470: PUSH
34471: LD_VAR 0 15
34475: PUSH
34476: LD_INT 1
34478: ARRAY
34479: PPUSH
34480: CALL_OW 250
34484: PPUSH
34485: LD_VAR 0 15
34489: PUSH
34490: LD_INT 1
34492: ARRAY
34493: PPUSH
34494: CALL_OW 254
34498: PPUSH
34499: LD_INT 5
34501: PPUSH
34502: CALL_OW 272
34506: PUSH
34507: LD_VAR 0 15
34511: PUSH
34512: LD_INT 1
34514: ARRAY
34515: PPUSH
34516: CALL_OW 251
34520: PPUSH
34521: LD_VAR 0 15
34525: PUSH
34526: LD_INT 1
34528: ARRAY
34529: PPUSH
34530: CALL_OW 254
34534: PPUSH
34535: LD_INT 5
34537: PPUSH
34538: CALL_OW 273
34542: PUSH
34543: EMPTY
34544: LIST
34545: LIST
34546: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
34547: LD_VAR 0 14
34551: PUSH
34552: LD_INT 1
34554: ARRAY
34555: PPUSH
34556: LD_VAR 0 14
34560: PUSH
34561: LD_INT 2
34563: ARRAY
34564: PPUSH
34565: CALL_OW 488
34569: IFFALSE 34600
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
34571: LD_VAR 0 11
34575: PPUSH
34576: LD_VAR 0 14
34580: PUSH
34581: LD_INT 1
34583: ARRAY
34584: PPUSH
34585: LD_VAR 0 14
34589: PUSH
34590: LD_INT 2
34592: ARRAY
34593: PPUSH
34594: CALL_OW 111
// continue ;
34598: GO 34231
// end ; end ; r := GetDir ( tmp ) ;
34600: LD_ADDR_VAR 0 13
34604: PUSH
34605: LD_VAR 0 11
34609: PPUSH
34610: CALL_OW 254
34614: ST_TO_ADDR
// if r = 5 then
34615: LD_VAR 0 13
34619: PUSH
34620: LD_INT 5
34622: EQUAL
34623: IFFALSE 34633
// r := 0 ;
34625: LD_ADDR_VAR 0 13
34629: PUSH
34630: LD_INT 0
34632: ST_TO_ADDR
// for j = r to 5 do
34633: LD_ADDR_VAR 0 8
34637: PUSH
34638: DOUBLE
34639: LD_VAR 0 13
34643: DEC
34644: ST_TO_ADDR
34645: LD_INT 5
34647: PUSH
34648: FOR_TO
34649: IFFALSE 34763
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
34651: LD_ADDR_VAR 0 9
34655: PUSH
34656: LD_VAR 0 11
34660: PPUSH
34661: CALL_OW 250
34665: PPUSH
34666: LD_VAR 0 8
34670: PPUSH
34671: LD_INT 2
34673: PPUSH
34674: CALL_OW 272
34678: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
34679: LD_ADDR_VAR 0 10
34683: PUSH
34684: LD_VAR 0 11
34688: PPUSH
34689: CALL_OW 251
34693: PPUSH
34694: LD_VAR 0 8
34698: PPUSH
34699: LD_INT 2
34701: PPUSH
34702: CALL_OW 273
34706: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
34707: LD_VAR 0 9
34711: PPUSH
34712: LD_VAR 0 10
34716: PPUSH
34717: CALL_OW 488
34721: PUSH
34722: LD_VAR 0 9
34726: PPUSH
34727: LD_VAR 0 10
34731: PPUSH
34732: CALL_OW 428
34736: NOT
34737: AND
34738: IFFALSE 34761
// begin ComMoveXY ( tmp , _x , _y ) ;
34740: LD_VAR 0 11
34744: PPUSH
34745: LD_VAR 0 9
34749: PPUSH
34750: LD_VAR 0 10
34754: PPUSH
34755: CALL_OW 111
// break ;
34759: GO 34763
// end ; end ;
34761: GO 34648
34763: POP
34764: POP
// end ;
34765: GO 34231
34767: POP
34768: POP
// end ;
34769: LD_VAR 0 6
34773: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
34774: LD_INT 0
34776: PPUSH
34777: PPUSH
34778: PPUSH
34779: PPUSH
34780: PPUSH
34781: PPUSH
34782: PPUSH
34783: PPUSH
34784: PPUSH
34785: PPUSH
// result := false ;
34786: LD_ADDR_VAR 0 6
34790: PUSH
34791: LD_INT 0
34793: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
34794: LD_VAR 0 1
34798: NOT
34799: PUSH
34800: LD_VAR 0 1
34804: PPUSH
34805: CALL_OW 266
34809: PUSH
34810: LD_INT 0
34812: PUSH
34813: LD_INT 1
34815: PUSH
34816: EMPTY
34817: LIST
34818: LIST
34819: IN
34820: NOT
34821: OR
34822: PUSH
34823: LD_VAR 0 2
34827: NOT
34828: OR
34829: PUSH
34830: LD_VAR 0 5
34834: PUSH
34835: LD_INT 0
34837: PUSH
34838: LD_INT 1
34840: PUSH
34841: LD_INT 2
34843: PUSH
34844: LD_INT 3
34846: PUSH
34847: LD_INT 4
34849: PUSH
34850: LD_INT 5
34852: PUSH
34853: EMPTY
34854: LIST
34855: LIST
34856: LIST
34857: LIST
34858: LIST
34859: LIST
34860: IN
34861: NOT
34862: OR
34863: PUSH
34864: LD_VAR 0 3
34868: PPUSH
34869: LD_VAR 0 4
34873: PPUSH
34874: CALL_OW 488
34878: NOT
34879: OR
34880: IFFALSE 34884
// exit ;
34882: GO 35601
// pom := GetBase ( depot ) ;
34884: LD_ADDR_VAR 0 10
34888: PUSH
34889: LD_VAR 0 1
34893: PPUSH
34894: CALL_OW 274
34898: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
34899: LD_ADDR_VAR 0 11
34903: PUSH
34904: LD_VAR 0 2
34908: PPUSH
34909: LD_VAR 0 1
34913: PPUSH
34914: CALL_OW 248
34918: PPUSH
34919: CALL_OW 450
34923: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
34924: LD_VAR 0 10
34928: PPUSH
34929: LD_INT 1
34931: PPUSH
34932: CALL_OW 275
34936: PUSH
34937: LD_VAR 0 11
34941: PUSH
34942: LD_INT 1
34944: ARRAY
34945: GREATEREQUAL
34946: PUSH
34947: LD_VAR 0 10
34951: PPUSH
34952: LD_INT 2
34954: PPUSH
34955: CALL_OW 275
34959: PUSH
34960: LD_VAR 0 11
34964: PUSH
34965: LD_INT 2
34967: ARRAY
34968: GREATEREQUAL
34969: AND
34970: PUSH
34971: LD_VAR 0 10
34975: PPUSH
34976: LD_INT 3
34978: PPUSH
34979: CALL_OW 275
34983: PUSH
34984: LD_VAR 0 11
34988: PUSH
34989: LD_INT 3
34991: ARRAY
34992: GREATEREQUAL
34993: AND
34994: NOT
34995: IFFALSE 34999
// exit ;
34997: GO 35601
// if GetBType ( depot ) = b_depot then
34999: LD_VAR 0 1
35003: PPUSH
35004: CALL_OW 266
35008: PUSH
35009: LD_INT 0
35011: EQUAL
35012: IFFALSE 35024
// dist := 28 else
35014: LD_ADDR_VAR 0 14
35018: PUSH
35019: LD_INT 28
35021: ST_TO_ADDR
35022: GO 35032
// dist := 36 ;
35024: LD_ADDR_VAR 0 14
35028: PUSH
35029: LD_INT 36
35031: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
35032: LD_VAR 0 1
35036: PPUSH
35037: LD_VAR 0 3
35041: PPUSH
35042: LD_VAR 0 4
35046: PPUSH
35047: CALL_OW 297
35051: PUSH
35052: LD_VAR 0 14
35056: GREATER
35057: IFFALSE 35061
// exit ;
35059: GO 35601
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
35061: LD_ADDR_VAR 0 12
35065: PUSH
35066: LD_VAR 0 2
35070: PPUSH
35071: LD_VAR 0 3
35075: PPUSH
35076: LD_VAR 0 4
35080: PPUSH
35081: LD_VAR 0 5
35085: PPUSH
35086: LD_VAR 0 1
35090: PPUSH
35091: CALL_OW 248
35095: PPUSH
35096: LD_INT 0
35098: PPUSH
35099: CALL 35606 0 6
35103: ST_TO_ADDR
// if not hexes then
35104: LD_VAR 0 12
35108: NOT
35109: IFFALSE 35113
// exit ;
35111: GO 35601
// hex := GetHexInfo ( x , y ) ;
35113: LD_ADDR_VAR 0 15
35117: PUSH
35118: LD_VAR 0 3
35122: PPUSH
35123: LD_VAR 0 4
35127: PPUSH
35128: CALL_OW 546
35132: ST_TO_ADDR
// if hex [ 1 ] then
35133: LD_VAR 0 15
35137: PUSH
35138: LD_INT 1
35140: ARRAY
35141: IFFALSE 35145
// exit ;
35143: GO 35601
// height := hex [ 2 ] ;
35145: LD_ADDR_VAR 0 13
35149: PUSH
35150: LD_VAR 0 15
35154: PUSH
35155: LD_INT 2
35157: ARRAY
35158: ST_TO_ADDR
// for i = 1 to hexes do
35159: LD_ADDR_VAR 0 7
35163: PUSH
35164: DOUBLE
35165: LD_INT 1
35167: DEC
35168: ST_TO_ADDR
35169: LD_VAR 0 12
35173: PUSH
35174: FOR_TO
35175: IFFALSE 35505
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
35177: LD_VAR 0 12
35181: PUSH
35182: LD_VAR 0 7
35186: ARRAY
35187: PUSH
35188: LD_INT 1
35190: ARRAY
35191: PPUSH
35192: LD_VAR 0 12
35196: PUSH
35197: LD_VAR 0 7
35201: ARRAY
35202: PUSH
35203: LD_INT 2
35205: ARRAY
35206: PPUSH
35207: CALL_OW 488
35211: NOT
35212: PUSH
35213: LD_VAR 0 12
35217: PUSH
35218: LD_VAR 0 7
35222: ARRAY
35223: PUSH
35224: LD_INT 1
35226: ARRAY
35227: PPUSH
35228: LD_VAR 0 12
35232: PUSH
35233: LD_VAR 0 7
35237: ARRAY
35238: PUSH
35239: LD_INT 2
35241: ARRAY
35242: PPUSH
35243: CALL_OW 428
35247: PUSH
35248: LD_INT 0
35250: GREATER
35251: OR
35252: PUSH
35253: LD_VAR 0 12
35257: PUSH
35258: LD_VAR 0 7
35262: ARRAY
35263: PUSH
35264: LD_INT 1
35266: ARRAY
35267: PPUSH
35268: LD_VAR 0 12
35272: PUSH
35273: LD_VAR 0 7
35277: ARRAY
35278: PUSH
35279: LD_INT 2
35281: ARRAY
35282: PPUSH
35283: CALL_OW 351
35287: OR
35288: IFFALSE 35294
// exit ;
35290: POP
35291: POP
35292: GO 35601
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
35294: LD_ADDR_VAR 0 8
35298: PUSH
35299: LD_VAR 0 12
35303: PUSH
35304: LD_VAR 0 7
35308: ARRAY
35309: PUSH
35310: LD_INT 1
35312: ARRAY
35313: PPUSH
35314: LD_VAR 0 12
35318: PUSH
35319: LD_VAR 0 7
35323: ARRAY
35324: PUSH
35325: LD_INT 2
35327: ARRAY
35328: PPUSH
35329: CALL_OW 546
35333: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
35334: LD_VAR 0 8
35338: PUSH
35339: LD_INT 1
35341: ARRAY
35342: PUSH
35343: LD_VAR 0 8
35347: PUSH
35348: LD_INT 2
35350: ARRAY
35351: PUSH
35352: LD_VAR 0 13
35356: PUSH
35357: LD_INT 2
35359: PLUS
35360: GREATER
35361: OR
35362: PUSH
35363: LD_VAR 0 8
35367: PUSH
35368: LD_INT 2
35370: ARRAY
35371: PUSH
35372: LD_VAR 0 13
35376: PUSH
35377: LD_INT 2
35379: MINUS
35380: LESS
35381: OR
35382: PUSH
35383: LD_VAR 0 8
35387: PUSH
35388: LD_INT 3
35390: ARRAY
35391: PUSH
35392: LD_INT 0
35394: PUSH
35395: LD_INT 8
35397: PUSH
35398: LD_INT 9
35400: PUSH
35401: LD_INT 10
35403: PUSH
35404: LD_INT 11
35406: PUSH
35407: LD_INT 12
35409: PUSH
35410: LD_INT 13
35412: PUSH
35413: LD_INT 16
35415: PUSH
35416: LD_INT 17
35418: PUSH
35419: LD_INT 18
35421: PUSH
35422: LD_INT 19
35424: PUSH
35425: LD_INT 20
35427: PUSH
35428: LD_INT 21
35430: PUSH
35431: EMPTY
35432: LIST
35433: LIST
35434: LIST
35435: LIST
35436: LIST
35437: LIST
35438: LIST
35439: LIST
35440: LIST
35441: LIST
35442: LIST
35443: LIST
35444: LIST
35445: IN
35446: NOT
35447: OR
35448: PUSH
35449: LD_VAR 0 8
35453: PUSH
35454: LD_INT 5
35456: ARRAY
35457: NOT
35458: OR
35459: PUSH
35460: LD_VAR 0 8
35464: PUSH
35465: LD_INT 6
35467: ARRAY
35468: PUSH
35469: LD_INT 1
35471: PUSH
35472: LD_INT 2
35474: PUSH
35475: LD_INT 7
35477: PUSH
35478: LD_INT 9
35480: PUSH
35481: LD_INT 10
35483: PUSH
35484: LD_INT 11
35486: PUSH
35487: EMPTY
35488: LIST
35489: LIST
35490: LIST
35491: LIST
35492: LIST
35493: LIST
35494: IN
35495: NOT
35496: OR
35497: IFFALSE 35503
// exit ;
35499: POP
35500: POP
35501: GO 35601
// end ;
35503: GO 35174
35505: POP
35506: POP
// side := GetSide ( depot ) ;
35507: LD_ADDR_VAR 0 9
35511: PUSH
35512: LD_VAR 0 1
35516: PPUSH
35517: CALL_OW 255
35521: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
35522: LD_VAR 0 9
35526: PPUSH
35527: LD_VAR 0 3
35531: PPUSH
35532: LD_VAR 0 4
35536: PPUSH
35537: LD_INT 20
35539: PPUSH
35540: CALL 28255 0 4
35544: PUSH
35545: LD_INT 4
35547: ARRAY
35548: IFFALSE 35552
// exit ;
35550: GO 35601
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
35552: LD_VAR 0 2
35556: PUSH
35557: LD_INT 29
35559: PUSH
35560: LD_INT 30
35562: PUSH
35563: EMPTY
35564: LIST
35565: LIST
35566: IN
35567: PUSH
35568: LD_VAR 0 3
35572: PPUSH
35573: LD_VAR 0 4
35577: PPUSH
35578: LD_VAR 0 9
35582: PPUSH
35583: CALL_OW 440
35587: NOT
35588: AND
35589: IFFALSE 35593
// exit ;
35591: GO 35601
// result := true ;
35593: LD_ADDR_VAR 0 6
35597: PUSH
35598: LD_INT 1
35600: ST_TO_ADDR
// end ;
35601: LD_VAR 0 6
35605: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 , DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 , DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ; var Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 , Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ; var Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 , ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ; var Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 , Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ; begin
35606: LD_INT 0
35608: PPUSH
35609: PPUSH
35610: PPUSH
35611: PPUSH
35612: PPUSH
35613: PPUSH
35614: PPUSH
35615: PPUSH
35616: PPUSH
35617: PPUSH
35618: PPUSH
35619: PPUSH
35620: PPUSH
35621: PPUSH
35622: PPUSH
35623: PPUSH
35624: PPUSH
35625: PPUSH
35626: PPUSH
35627: PPUSH
35628: PPUSH
35629: PPUSH
35630: PPUSH
35631: PPUSH
35632: PPUSH
35633: PPUSH
35634: PPUSH
35635: PPUSH
35636: PPUSH
35637: PPUSH
35638: PPUSH
35639: PPUSH
35640: PPUSH
35641: PPUSH
35642: PPUSH
35643: PPUSH
35644: PPUSH
35645: PPUSH
35646: PPUSH
35647: PPUSH
35648: PPUSH
35649: PPUSH
35650: PPUSH
35651: PPUSH
35652: PPUSH
35653: PPUSH
35654: PPUSH
35655: PPUSH
35656: PPUSH
35657: PPUSH
35658: PPUSH
35659: PPUSH
35660: PPUSH
35661: PPUSH
35662: PPUSH
35663: PPUSH
35664: PPUSH
35665: PPUSH
// result = [ ] ;
35666: LD_ADDR_VAR 0 7
35670: PUSH
35671: EMPTY
35672: ST_TO_ADDR
// temp_list = [ ] ;
35673: LD_ADDR_VAR 0 9
35677: PUSH
35678: EMPTY
35679: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
35680: LD_VAR 0 4
35684: PUSH
35685: LD_INT 0
35687: PUSH
35688: LD_INT 1
35690: PUSH
35691: LD_INT 2
35693: PUSH
35694: LD_INT 3
35696: PUSH
35697: LD_INT 4
35699: PUSH
35700: LD_INT 5
35702: PUSH
35703: EMPTY
35704: LIST
35705: LIST
35706: LIST
35707: LIST
35708: LIST
35709: LIST
35710: IN
35711: NOT
35712: PUSH
35713: LD_VAR 0 1
35717: PUSH
35718: LD_INT 0
35720: PUSH
35721: LD_INT 1
35723: PUSH
35724: EMPTY
35725: LIST
35726: LIST
35727: IN
35728: PUSH
35729: LD_VAR 0 5
35733: PUSH
35734: LD_INT 1
35736: PUSH
35737: LD_INT 2
35739: PUSH
35740: LD_INT 3
35742: PUSH
35743: EMPTY
35744: LIST
35745: LIST
35746: LIST
35747: IN
35748: NOT
35749: AND
35750: OR
35751: IFFALSE 35755
// exit ;
35753: GO 54146
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
35755: LD_VAR 0 1
35759: PUSH
35760: LD_INT 6
35762: PUSH
35763: LD_INT 7
35765: PUSH
35766: LD_INT 8
35768: PUSH
35769: LD_INT 13
35771: PUSH
35772: LD_INT 12
35774: PUSH
35775: LD_INT 15
35777: PUSH
35778: LD_INT 11
35780: PUSH
35781: LD_INT 14
35783: PUSH
35784: LD_INT 10
35786: PUSH
35787: EMPTY
35788: LIST
35789: LIST
35790: LIST
35791: LIST
35792: LIST
35793: LIST
35794: LIST
35795: LIST
35796: LIST
35797: IN
35798: IFFALSE 35808
// btype = b_lab ;
35800: LD_ADDR_VAR 0 1
35804: PUSH
35805: LD_INT 6
35807: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
35808: LD_VAR 0 6
35812: PUSH
35813: LD_INT 0
35815: PUSH
35816: LD_INT 1
35818: PUSH
35819: LD_INT 2
35821: PUSH
35822: EMPTY
35823: LIST
35824: LIST
35825: LIST
35826: IN
35827: NOT
35828: PUSH
35829: LD_VAR 0 1
35833: PUSH
35834: LD_INT 0
35836: PUSH
35837: LD_INT 1
35839: PUSH
35840: LD_INT 2
35842: PUSH
35843: LD_INT 3
35845: PUSH
35846: LD_INT 6
35848: PUSH
35849: LD_INT 36
35851: PUSH
35852: LD_INT 4
35854: PUSH
35855: LD_INT 5
35857: PUSH
35858: LD_INT 31
35860: PUSH
35861: LD_INT 32
35863: PUSH
35864: LD_INT 33
35866: PUSH
35867: EMPTY
35868: LIST
35869: LIST
35870: LIST
35871: LIST
35872: LIST
35873: LIST
35874: LIST
35875: LIST
35876: LIST
35877: LIST
35878: LIST
35879: IN
35880: NOT
35881: PUSH
35882: LD_VAR 0 6
35886: PUSH
35887: LD_INT 1
35889: EQUAL
35890: AND
35891: OR
35892: PUSH
35893: LD_VAR 0 1
35897: PUSH
35898: LD_INT 2
35900: PUSH
35901: LD_INT 3
35903: PUSH
35904: EMPTY
35905: LIST
35906: LIST
35907: IN
35908: NOT
35909: PUSH
35910: LD_VAR 0 6
35914: PUSH
35915: LD_INT 2
35917: EQUAL
35918: AND
35919: OR
35920: IFFALSE 35930
// mode = 0 ;
35922: LD_ADDR_VAR 0 6
35926: PUSH
35927: LD_INT 0
35929: ST_TO_ADDR
// case mode of 0 :
35930: LD_VAR 0 6
35934: PUSH
35935: LD_INT 0
35937: DOUBLE
35938: EQUAL
35939: IFTRUE 35943
35941: GO 47396
35943: POP
// begin DepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
35944: LD_ADDR_VAR 0 11
35948: PUSH
35949: LD_INT 0
35951: PUSH
35952: LD_INT 0
35954: PUSH
35955: EMPTY
35956: LIST
35957: LIST
35958: PUSH
35959: LD_INT 0
35961: PUSH
35962: LD_INT 1
35964: NEG
35965: PUSH
35966: EMPTY
35967: LIST
35968: LIST
35969: PUSH
35970: LD_INT 1
35972: PUSH
35973: LD_INT 0
35975: PUSH
35976: EMPTY
35977: LIST
35978: LIST
35979: PUSH
35980: LD_INT 1
35982: PUSH
35983: LD_INT 1
35985: PUSH
35986: EMPTY
35987: LIST
35988: LIST
35989: PUSH
35990: LD_INT 0
35992: PUSH
35993: LD_INT 1
35995: PUSH
35996: EMPTY
35997: LIST
35998: LIST
35999: PUSH
36000: LD_INT 1
36002: NEG
36003: PUSH
36004: LD_INT 0
36006: PUSH
36007: EMPTY
36008: LIST
36009: LIST
36010: PUSH
36011: LD_INT 1
36013: NEG
36014: PUSH
36015: LD_INT 1
36017: NEG
36018: PUSH
36019: EMPTY
36020: LIST
36021: LIST
36022: PUSH
36023: LD_INT 1
36025: NEG
36026: PUSH
36027: LD_INT 2
36029: NEG
36030: PUSH
36031: EMPTY
36032: LIST
36033: LIST
36034: PUSH
36035: LD_INT 0
36037: PUSH
36038: LD_INT 2
36040: NEG
36041: PUSH
36042: EMPTY
36043: LIST
36044: LIST
36045: PUSH
36046: LD_INT 1
36048: PUSH
36049: LD_INT 1
36051: NEG
36052: PUSH
36053: EMPTY
36054: LIST
36055: LIST
36056: PUSH
36057: LD_INT 1
36059: PUSH
36060: LD_INT 2
36062: PUSH
36063: EMPTY
36064: LIST
36065: LIST
36066: PUSH
36067: LD_INT 0
36069: PUSH
36070: LD_INT 2
36072: PUSH
36073: EMPTY
36074: LIST
36075: LIST
36076: PUSH
36077: LD_INT 1
36079: NEG
36080: PUSH
36081: LD_INT 1
36083: PUSH
36084: EMPTY
36085: LIST
36086: LIST
36087: PUSH
36088: LD_INT 1
36090: PUSH
36091: LD_INT 3
36093: PUSH
36094: EMPTY
36095: LIST
36096: LIST
36097: PUSH
36098: LD_INT 0
36100: PUSH
36101: LD_INT 3
36103: PUSH
36104: EMPTY
36105: LIST
36106: LIST
36107: PUSH
36108: LD_INT 1
36110: NEG
36111: PUSH
36112: LD_INT 2
36114: PUSH
36115: EMPTY
36116: LIST
36117: LIST
36118: PUSH
36119: EMPTY
36120: LIST
36121: LIST
36122: LIST
36123: LIST
36124: LIST
36125: LIST
36126: LIST
36127: LIST
36128: LIST
36129: LIST
36130: LIST
36131: LIST
36132: LIST
36133: LIST
36134: LIST
36135: LIST
36136: ST_TO_ADDR
// DepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
36137: LD_ADDR_VAR 0 12
36141: PUSH
36142: LD_INT 0
36144: PUSH
36145: LD_INT 0
36147: PUSH
36148: EMPTY
36149: LIST
36150: LIST
36151: PUSH
36152: LD_INT 0
36154: PUSH
36155: LD_INT 1
36157: NEG
36158: PUSH
36159: EMPTY
36160: LIST
36161: LIST
36162: PUSH
36163: LD_INT 1
36165: PUSH
36166: LD_INT 0
36168: PUSH
36169: EMPTY
36170: LIST
36171: LIST
36172: PUSH
36173: LD_INT 1
36175: PUSH
36176: LD_INT 1
36178: PUSH
36179: EMPTY
36180: LIST
36181: LIST
36182: PUSH
36183: LD_INT 0
36185: PUSH
36186: LD_INT 1
36188: PUSH
36189: EMPTY
36190: LIST
36191: LIST
36192: PUSH
36193: LD_INT 1
36195: NEG
36196: PUSH
36197: LD_INT 0
36199: PUSH
36200: EMPTY
36201: LIST
36202: LIST
36203: PUSH
36204: LD_INT 1
36206: NEG
36207: PUSH
36208: LD_INT 1
36210: NEG
36211: PUSH
36212: EMPTY
36213: LIST
36214: LIST
36215: PUSH
36216: LD_INT 1
36218: PUSH
36219: LD_INT 1
36221: NEG
36222: PUSH
36223: EMPTY
36224: LIST
36225: LIST
36226: PUSH
36227: LD_INT 2
36229: PUSH
36230: LD_INT 0
36232: PUSH
36233: EMPTY
36234: LIST
36235: LIST
36236: PUSH
36237: LD_INT 2
36239: PUSH
36240: LD_INT 1
36242: PUSH
36243: EMPTY
36244: LIST
36245: LIST
36246: PUSH
36247: LD_INT 1
36249: NEG
36250: PUSH
36251: LD_INT 1
36253: PUSH
36254: EMPTY
36255: LIST
36256: LIST
36257: PUSH
36258: LD_INT 2
36260: NEG
36261: PUSH
36262: LD_INT 0
36264: PUSH
36265: EMPTY
36266: LIST
36267: LIST
36268: PUSH
36269: LD_INT 2
36271: NEG
36272: PUSH
36273: LD_INT 1
36275: NEG
36276: PUSH
36277: EMPTY
36278: LIST
36279: LIST
36280: PUSH
36281: LD_INT 2
36283: NEG
36284: PUSH
36285: LD_INT 1
36287: PUSH
36288: EMPTY
36289: LIST
36290: LIST
36291: PUSH
36292: LD_INT 3
36294: NEG
36295: PUSH
36296: LD_INT 0
36298: PUSH
36299: EMPTY
36300: LIST
36301: LIST
36302: PUSH
36303: LD_INT 3
36305: NEG
36306: PUSH
36307: LD_INT 1
36309: NEG
36310: PUSH
36311: EMPTY
36312: LIST
36313: LIST
36314: PUSH
36315: EMPTY
36316: LIST
36317: LIST
36318: LIST
36319: LIST
36320: LIST
36321: LIST
36322: LIST
36323: LIST
36324: LIST
36325: LIST
36326: LIST
36327: LIST
36328: LIST
36329: LIST
36330: LIST
36331: LIST
36332: ST_TO_ADDR
// DepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
36333: LD_ADDR_VAR 0 13
36337: PUSH
36338: LD_INT 0
36340: PUSH
36341: LD_INT 0
36343: PUSH
36344: EMPTY
36345: LIST
36346: LIST
36347: PUSH
36348: LD_INT 0
36350: PUSH
36351: LD_INT 1
36353: NEG
36354: PUSH
36355: EMPTY
36356: LIST
36357: LIST
36358: PUSH
36359: LD_INT 1
36361: PUSH
36362: LD_INT 0
36364: PUSH
36365: EMPTY
36366: LIST
36367: LIST
36368: PUSH
36369: LD_INT 1
36371: PUSH
36372: LD_INT 1
36374: PUSH
36375: EMPTY
36376: LIST
36377: LIST
36378: PUSH
36379: LD_INT 0
36381: PUSH
36382: LD_INT 1
36384: PUSH
36385: EMPTY
36386: LIST
36387: LIST
36388: PUSH
36389: LD_INT 1
36391: NEG
36392: PUSH
36393: LD_INT 0
36395: PUSH
36396: EMPTY
36397: LIST
36398: LIST
36399: PUSH
36400: LD_INT 1
36402: NEG
36403: PUSH
36404: LD_INT 1
36406: NEG
36407: PUSH
36408: EMPTY
36409: LIST
36410: LIST
36411: PUSH
36412: LD_INT 1
36414: NEG
36415: PUSH
36416: LD_INT 2
36418: NEG
36419: PUSH
36420: EMPTY
36421: LIST
36422: LIST
36423: PUSH
36424: LD_INT 2
36426: PUSH
36427: LD_INT 1
36429: PUSH
36430: EMPTY
36431: LIST
36432: LIST
36433: PUSH
36434: LD_INT 2
36436: PUSH
36437: LD_INT 2
36439: PUSH
36440: EMPTY
36441: LIST
36442: LIST
36443: PUSH
36444: LD_INT 1
36446: PUSH
36447: LD_INT 2
36449: PUSH
36450: EMPTY
36451: LIST
36452: LIST
36453: PUSH
36454: LD_INT 2
36456: NEG
36457: PUSH
36458: LD_INT 1
36460: NEG
36461: PUSH
36462: EMPTY
36463: LIST
36464: LIST
36465: PUSH
36466: LD_INT 2
36468: NEG
36469: PUSH
36470: LD_INT 2
36472: NEG
36473: PUSH
36474: EMPTY
36475: LIST
36476: LIST
36477: PUSH
36478: LD_INT 2
36480: NEG
36481: PUSH
36482: LD_INT 3
36484: NEG
36485: PUSH
36486: EMPTY
36487: LIST
36488: LIST
36489: PUSH
36490: LD_INT 3
36492: NEG
36493: PUSH
36494: LD_INT 2
36496: NEG
36497: PUSH
36498: EMPTY
36499: LIST
36500: LIST
36501: PUSH
36502: LD_INT 3
36504: NEG
36505: PUSH
36506: LD_INT 3
36508: NEG
36509: PUSH
36510: EMPTY
36511: LIST
36512: LIST
36513: PUSH
36514: EMPTY
36515: LIST
36516: LIST
36517: LIST
36518: LIST
36519: LIST
36520: LIST
36521: LIST
36522: LIST
36523: LIST
36524: LIST
36525: LIST
36526: LIST
36527: LIST
36528: LIST
36529: LIST
36530: LIST
36531: ST_TO_ADDR
// DepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
36532: LD_ADDR_VAR 0 14
36536: PUSH
36537: LD_INT 0
36539: PUSH
36540: LD_INT 0
36542: PUSH
36543: EMPTY
36544: LIST
36545: LIST
36546: PUSH
36547: LD_INT 0
36549: PUSH
36550: LD_INT 1
36552: NEG
36553: PUSH
36554: EMPTY
36555: LIST
36556: LIST
36557: PUSH
36558: LD_INT 1
36560: PUSH
36561: LD_INT 0
36563: PUSH
36564: EMPTY
36565: LIST
36566: LIST
36567: PUSH
36568: LD_INT 1
36570: PUSH
36571: LD_INT 1
36573: PUSH
36574: EMPTY
36575: LIST
36576: LIST
36577: PUSH
36578: LD_INT 0
36580: PUSH
36581: LD_INT 1
36583: PUSH
36584: EMPTY
36585: LIST
36586: LIST
36587: PUSH
36588: LD_INT 1
36590: NEG
36591: PUSH
36592: LD_INT 0
36594: PUSH
36595: EMPTY
36596: LIST
36597: LIST
36598: PUSH
36599: LD_INT 1
36601: NEG
36602: PUSH
36603: LD_INT 1
36605: NEG
36606: PUSH
36607: EMPTY
36608: LIST
36609: LIST
36610: PUSH
36611: LD_INT 1
36613: NEG
36614: PUSH
36615: LD_INT 2
36617: NEG
36618: PUSH
36619: EMPTY
36620: LIST
36621: LIST
36622: PUSH
36623: LD_INT 0
36625: PUSH
36626: LD_INT 2
36628: NEG
36629: PUSH
36630: EMPTY
36631: LIST
36632: LIST
36633: PUSH
36634: LD_INT 1
36636: PUSH
36637: LD_INT 1
36639: NEG
36640: PUSH
36641: EMPTY
36642: LIST
36643: LIST
36644: PUSH
36645: LD_INT 1
36647: PUSH
36648: LD_INT 2
36650: PUSH
36651: EMPTY
36652: LIST
36653: LIST
36654: PUSH
36655: LD_INT 0
36657: PUSH
36658: LD_INT 2
36660: PUSH
36661: EMPTY
36662: LIST
36663: LIST
36664: PUSH
36665: LD_INT 1
36667: NEG
36668: PUSH
36669: LD_INT 1
36671: PUSH
36672: EMPTY
36673: LIST
36674: LIST
36675: PUSH
36676: LD_INT 1
36678: NEG
36679: PUSH
36680: LD_INT 3
36682: NEG
36683: PUSH
36684: EMPTY
36685: LIST
36686: LIST
36687: PUSH
36688: LD_INT 0
36690: PUSH
36691: LD_INT 3
36693: NEG
36694: PUSH
36695: EMPTY
36696: LIST
36697: LIST
36698: PUSH
36699: LD_INT 1
36701: PUSH
36702: LD_INT 2
36704: NEG
36705: PUSH
36706: EMPTY
36707: LIST
36708: LIST
36709: PUSH
36710: EMPTY
36711: LIST
36712: LIST
36713: LIST
36714: LIST
36715: LIST
36716: LIST
36717: LIST
36718: LIST
36719: LIST
36720: LIST
36721: LIST
36722: LIST
36723: LIST
36724: LIST
36725: LIST
36726: LIST
36727: ST_TO_ADDR
// DepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
36728: LD_ADDR_VAR 0 15
36732: PUSH
36733: LD_INT 0
36735: PUSH
36736: LD_INT 0
36738: PUSH
36739: EMPTY
36740: LIST
36741: LIST
36742: PUSH
36743: LD_INT 0
36745: PUSH
36746: LD_INT 1
36748: NEG
36749: PUSH
36750: EMPTY
36751: LIST
36752: LIST
36753: PUSH
36754: LD_INT 1
36756: PUSH
36757: LD_INT 0
36759: PUSH
36760: EMPTY
36761: LIST
36762: LIST
36763: PUSH
36764: LD_INT 1
36766: PUSH
36767: LD_INT 1
36769: PUSH
36770: EMPTY
36771: LIST
36772: LIST
36773: PUSH
36774: LD_INT 0
36776: PUSH
36777: LD_INT 1
36779: PUSH
36780: EMPTY
36781: LIST
36782: LIST
36783: PUSH
36784: LD_INT 1
36786: NEG
36787: PUSH
36788: LD_INT 0
36790: PUSH
36791: EMPTY
36792: LIST
36793: LIST
36794: PUSH
36795: LD_INT 1
36797: NEG
36798: PUSH
36799: LD_INT 1
36801: NEG
36802: PUSH
36803: EMPTY
36804: LIST
36805: LIST
36806: PUSH
36807: LD_INT 1
36809: PUSH
36810: LD_INT 1
36812: NEG
36813: PUSH
36814: EMPTY
36815: LIST
36816: LIST
36817: PUSH
36818: LD_INT 2
36820: PUSH
36821: LD_INT 0
36823: PUSH
36824: EMPTY
36825: LIST
36826: LIST
36827: PUSH
36828: LD_INT 2
36830: PUSH
36831: LD_INT 1
36833: PUSH
36834: EMPTY
36835: LIST
36836: LIST
36837: PUSH
36838: LD_INT 1
36840: NEG
36841: PUSH
36842: LD_INT 1
36844: PUSH
36845: EMPTY
36846: LIST
36847: LIST
36848: PUSH
36849: LD_INT 2
36851: NEG
36852: PUSH
36853: LD_INT 0
36855: PUSH
36856: EMPTY
36857: LIST
36858: LIST
36859: PUSH
36860: LD_INT 2
36862: NEG
36863: PUSH
36864: LD_INT 1
36866: NEG
36867: PUSH
36868: EMPTY
36869: LIST
36870: LIST
36871: PUSH
36872: LD_INT 2
36874: PUSH
36875: LD_INT 1
36877: NEG
36878: PUSH
36879: EMPTY
36880: LIST
36881: LIST
36882: PUSH
36883: LD_INT 3
36885: PUSH
36886: LD_INT 0
36888: PUSH
36889: EMPTY
36890: LIST
36891: LIST
36892: PUSH
36893: LD_INT 3
36895: PUSH
36896: LD_INT 1
36898: PUSH
36899: EMPTY
36900: LIST
36901: LIST
36902: PUSH
36903: EMPTY
36904: LIST
36905: LIST
36906: LIST
36907: LIST
36908: LIST
36909: LIST
36910: LIST
36911: LIST
36912: LIST
36913: LIST
36914: LIST
36915: LIST
36916: LIST
36917: LIST
36918: LIST
36919: LIST
36920: ST_TO_ADDR
// DepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
36921: LD_ADDR_VAR 0 16
36925: PUSH
36926: LD_INT 0
36928: PUSH
36929: LD_INT 0
36931: PUSH
36932: EMPTY
36933: LIST
36934: LIST
36935: PUSH
36936: LD_INT 0
36938: PUSH
36939: LD_INT 1
36941: NEG
36942: PUSH
36943: EMPTY
36944: LIST
36945: LIST
36946: PUSH
36947: LD_INT 1
36949: PUSH
36950: LD_INT 0
36952: PUSH
36953: EMPTY
36954: LIST
36955: LIST
36956: PUSH
36957: LD_INT 1
36959: PUSH
36960: LD_INT 1
36962: PUSH
36963: EMPTY
36964: LIST
36965: LIST
36966: PUSH
36967: LD_INT 0
36969: PUSH
36970: LD_INT 1
36972: PUSH
36973: EMPTY
36974: LIST
36975: LIST
36976: PUSH
36977: LD_INT 1
36979: NEG
36980: PUSH
36981: LD_INT 0
36983: PUSH
36984: EMPTY
36985: LIST
36986: LIST
36987: PUSH
36988: LD_INT 1
36990: NEG
36991: PUSH
36992: LD_INT 1
36994: NEG
36995: PUSH
36996: EMPTY
36997: LIST
36998: LIST
36999: PUSH
37000: LD_INT 1
37002: NEG
37003: PUSH
37004: LD_INT 2
37006: NEG
37007: PUSH
37008: EMPTY
37009: LIST
37010: LIST
37011: PUSH
37012: LD_INT 2
37014: PUSH
37015: LD_INT 1
37017: PUSH
37018: EMPTY
37019: LIST
37020: LIST
37021: PUSH
37022: LD_INT 2
37024: PUSH
37025: LD_INT 2
37027: PUSH
37028: EMPTY
37029: LIST
37030: LIST
37031: PUSH
37032: LD_INT 1
37034: PUSH
37035: LD_INT 2
37037: PUSH
37038: EMPTY
37039: LIST
37040: LIST
37041: PUSH
37042: LD_INT 2
37044: NEG
37045: PUSH
37046: LD_INT 1
37048: NEG
37049: PUSH
37050: EMPTY
37051: LIST
37052: LIST
37053: PUSH
37054: LD_INT 2
37056: NEG
37057: PUSH
37058: LD_INT 2
37060: NEG
37061: PUSH
37062: EMPTY
37063: LIST
37064: LIST
37065: PUSH
37066: LD_INT 3
37068: PUSH
37069: LD_INT 2
37071: PUSH
37072: EMPTY
37073: LIST
37074: LIST
37075: PUSH
37076: LD_INT 3
37078: PUSH
37079: LD_INT 3
37081: PUSH
37082: EMPTY
37083: LIST
37084: LIST
37085: PUSH
37086: LD_INT 2
37088: PUSH
37089: LD_INT 3
37091: PUSH
37092: EMPTY
37093: LIST
37094: LIST
37095: PUSH
37096: EMPTY
37097: LIST
37098: LIST
37099: LIST
37100: LIST
37101: LIST
37102: LIST
37103: LIST
37104: LIST
37105: LIST
37106: LIST
37107: LIST
37108: LIST
37109: LIST
37110: LIST
37111: LIST
37112: LIST
37113: ST_TO_ADDR
// DepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37114: LD_ADDR_VAR 0 17
37118: PUSH
37119: LD_INT 0
37121: PUSH
37122: LD_INT 0
37124: PUSH
37125: EMPTY
37126: LIST
37127: LIST
37128: PUSH
37129: LD_INT 0
37131: PUSH
37132: LD_INT 1
37134: NEG
37135: PUSH
37136: EMPTY
37137: LIST
37138: LIST
37139: PUSH
37140: LD_INT 1
37142: PUSH
37143: LD_INT 0
37145: PUSH
37146: EMPTY
37147: LIST
37148: LIST
37149: PUSH
37150: LD_INT 1
37152: PUSH
37153: LD_INT 1
37155: PUSH
37156: EMPTY
37157: LIST
37158: LIST
37159: PUSH
37160: LD_INT 0
37162: PUSH
37163: LD_INT 1
37165: PUSH
37166: EMPTY
37167: LIST
37168: LIST
37169: PUSH
37170: LD_INT 1
37172: NEG
37173: PUSH
37174: LD_INT 0
37176: PUSH
37177: EMPTY
37178: LIST
37179: LIST
37180: PUSH
37181: LD_INT 1
37183: NEG
37184: PUSH
37185: LD_INT 1
37187: NEG
37188: PUSH
37189: EMPTY
37190: LIST
37191: LIST
37192: PUSH
37193: LD_INT 1
37195: NEG
37196: PUSH
37197: LD_INT 2
37199: NEG
37200: PUSH
37201: EMPTY
37202: LIST
37203: LIST
37204: PUSH
37205: LD_INT 0
37207: PUSH
37208: LD_INT 2
37210: NEG
37211: PUSH
37212: EMPTY
37213: LIST
37214: LIST
37215: PUSH
37216: LD_INT 1
37218: PUSH
37219: LD_INT 1
37221: NEG
37222: PUSH
37223: EMPTY
37224: LIST
37225: LIST
37226: PUSH
37227: LD_INT 2
37229: PUSH
37230: LD_INT 0
37232: PUSH
37233: EMPTY
37234: LIST
37235: LIST
37236: PUSH
37237: LD_INT 2
37239: PUSH
37240: LD_INT 1
37242: PUSH
37243: EMPTY
37244: LIST
37245: LIST
37246: PUSH
37247: LD_INT 2
37249: PUSH
37250: LD_INT 2
37252: PUSH
37253: EMPTY
37254: LIST
37255: LIST
37256: PUSH
37257: LD_INT 1
37259: PUSH
37260: LD_INT 2
37262: PUSH
37263: EMPTY
37264: LIST
37265: LIST
37266: PUSH
37267: LD_INT 0
37269: PUSH
37270: LD_INT 2
37272: PUSH
37273: EMPTY
37274: LIST
37275: LIST
37276: PUSH
37277: LD_INT 1
37279: NEG
37280: PUSH
37281: LD_INT 1
37283: PUSH
37284: EMPTY
37285: LIST
37286: LIST
37287: PUSH
37288: LD_INT 2
37290: NEG
37291: PUSH
37292: LD_INT 0
37294: PUSH
37295: EMPTY
37296: LIST
37297: LIST
37298: PUSH
37299: LD_INT 2
37301: NEG
37302: PUSH
37303: LD_INT 1
37305: NEG
37306: PUSH
37307: EMPTY
37308: LIST
37309: LIST
37310: PUSH
37311: LD_INT 2
37313: NEG
37314: PUSH
37315: LD_INT 2
37317: NEG
37318: PUSH
37319: EMPTY
37320: LIST
37321: LIST
37322: PUSH
37323: EMPTY
37324: LIST
37325: LIST
37326: LIST
37327: LIST
37328: LIST
37329: LIST
37330: LIST
37331: LIST
37332: LIST
37333: LIST
37334: LIST
37335: LIST
37336: LIST
37337: LIST
37338: LIST
37339: LIST
37340: LIST
37341: LIST
37342: LIST
37343: ST_TO_ADDR
// DepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37344: LD_ADDR_VAR 0 18
37348: PUSH
37349: LD_INT 0
37351: PUSH
37352: LD_INT 0
37354: PUSH
37355: EMPTY
37356: LIST
37357: LIST
37358: PUSH
37359: LD_INT 0
37361: PUSH
37362: LD_INT 1
37364: NEG
37365: PUSH
37366: EMPTY
37367: LIST
37368: LIST
37369: PUSH
37370: LD_INT 1
37372: PUSH
37373: LD_INT 0
37375: PUSH
37376: EMPTY
37377: LIST
37378: LIST
37379: PUSH
37380: LD_INT 1
37382: PUSH
37383: LD_INT 1
37385: PUSH
37386: EMPTY
37387: LIST
37388: LIST
37389: PUSH
37390: LD_INT 0
37392: PUSH
37393: LD_INT 1
37395: PUSH
37396: EMPTY
37397: LIST
37398: LIST
37399: PUSH
37400: LD_INT 1
37402: NEG
37403: PUSH
37404: LD_INT 0
37406: PUSH
37407: EMPTY
37408: LIST
37409: LIST
37410: PUSH
37411: LD_INT 1
37413: NEG
37414: PUSH
37415: LD_INT 1
37417: NEG
37418: PUSH
37419: EMPTY
37420: LIST
37421: LIST
37422: PUSH
37423: LD_INT 1
37425: NEG
37426: PUSH
37427: LD_INT 2
37429: NEG
37430: PUSH
37431: EMPTY
37432: LIST
37433: LIST
37434: PUSH
37435: LD_INT 0
37437: PUSH
37438: LD_INT 2
37440: NEG
37441: PUSH
37442: EMPTY
37443: LIST
37444: LIST
37445: PUSH
37446: LD_INT 1
37448: PUSH
37449: LD_INT 1
37451: NEG
37452: PUSH
37453: EMPTY
37454: LIST
37455: LIST
37456: PUSH
37457: LD_INT 2
37459: PUSH
37460: LD_INT 0
37462: PUSH
37463: EMPTY
37464: LIST
37465: LIST
37466: PUSH
37467: LD_INT 2
37469: PUSH
37470: LD_INT 1
37472: PUSH
37473: EMPTY
37474: LIST
37475: LIST
37476: PUSH
37477: LD_INT 2
37479: PUSH
37480: LD_INT 2
37482: PUSH
37483: EMPTY
37484: LIST
37485: LIST
37486: PUSH
37487: LD_INT 1
37489: PUSH
37490: LD_INT 2
37492: PUSH
37493: EMPTY
37494: LIST
37495: LIST
37496: PUSH
37497: LD_INT 0
37499: PUSH
37500: LD_INT 2
37502: PUSH
37503: EMPTY
37504: LIST
37505: LIST
37506: PUSH
37507: LD_INT 1
37509: NEG
37510: PUSH
37511: LD_INT 1
37513: PUSH
37514: EMPTY
37515: LIST
37516: LIST
37517: PUSH
37518: LD_INT 2
37520: NEG
37521: PUSH
37522: LD_INT 0
37524: PUSH
37525: EMPTY
37526: LIST
37527: LIST
37528: PUSH
37529: LD_INT 2
37531: NEG
37532: PUSH
37533: LD_INT 1
37535: NEG
37536: PUSH
37537: EMPTY
37538: LIST
37539: LIST
37540: PUSH
37541: LD_INT 2
37543: NEG
37544: PUSH
37545: LD_INT 2
37547: NEG
37548: PUSH
37549: EMPTY
37550: LIST
37551: LIST
37552: PUSH
37553: EMPTY
37554: LIST
37555: LIST
37556: LIST
37557: LIST
37558: LIST
37559: LIST
37560: LIST
37561: LIST
37562: LIST
37563: LIST
37564: LIST
37565: LIST
37566: LIST
37567: LIST
37568: LIST
37569: LIST
37570: LIST
37571: LIST
37572: LIST
37573: ST_TO_ADDR
// DepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37574: LD_ADDR_VAR 0 19
37578: PUSH
37579: LD_INT 0
37581: PUSH
37582: LD_INT 0
37584: PUSH
37585: EMPTY
37586: LIST
37587: LIST
37588: PUSH
37589: LD_INT 0
37591: PUSH
37592: LD_INT 1
37594: NEG
37595: PUSH
37596: EMPTY
37597: LIST
37598: LIST
37599: PUSH
37600: LD_INT 1
37602: PUSH
37603: LD_INT 0
37605: PUSH
37606: EMPTY
37607: LIST
37608: LIST
37609: PUSH
37610: LD_INT 1
37612: PUSH
37613: LD_INT 1
37615: PUSH
37616: EMPTY
37617: LIST
37618: LIST
37619: PUSH
37620: LD_INT 0
37622: PUSH
37623: LD_INT 1
37625: PUSH
37626: EMPTY
37627: LIST
37628: LIST
37629: PUSH
37630: LD_INT 1
37632: NEG
37633: PUSH
37634: LD_INT 0
37636: PUSH
37637: EMPTY
37638: LIST
37639: LIST
37640: PUSH
37641: LD_INT 1
37643: NEG
37644: PUSH
37645: LD_INT 1
37647: NEG
37648: PUSH
37649: EMPTY
37650: LIST
37651: LIST
37652: PUSH
37653: LD_INT 1
37655: NEG
37656: PUSH
37657: LD_INT 2
37659: NEG
37660: PUSH
37661: EMPTY
37662: LIST
37663: LIST
37664: PUSH
37665: LD_INT 0
37667: PUSH
37668: LD_INT 2
37670: NEG
37671: PUSH
37672: EMPTY
37673: LIST
37674: LIST
37675: PUSH
37676: LD_INT 1
37678: PUSH
37679: LD_INT 1
37681: NEG
37682: PUSH
37683: EMPTY
37684: LIST
37685: LIST
37686: PUSH
37687: LD_INT 2
37689: PUSH
37690: LD_INT 0
37692: PUSH
37693: EMPTY
37694: LIST
37695: LIST
37696: PUSH
37697: LD_INT 2
37699: PUSH
37700: LD_INT 1
37702: PUSH
37703: EMPTY
37704: LIST
37705: LIST
37706: PUSH
37707: LD_INT 2
37709: PUSH
37710: LD_INT 2
37712: PUSH
37713: EMPTY
37714: LIST
37715: LIST
37716: PUSH
37717: LD_INT 1
37719: PUSH
37720: LD_INT 2
37722: PUSH
37723: EMPTY
37724: LIST
37725: LIST
37726: PUSH
37727: LD_INT 0
37729: PUSH
37730: LD_INT 2
37732: PUSH
37733: EMPTY
37734: LIST
37735: LIST
37736: PUSH
37737: LD_INT 1
37739: NEG
37740: PUSH
37741: LD_INT 1
37743: PUSH
37744: EMPTY
37745: LIST
37746: LIST
37747: PUSH
37748: LD_INT 2
37750: NEG
37751: PUSH
37752: LD_INT 0
37754: PUSH
37755: EMPTY
37756: LIST
37757: LIST
37758: PUSH
37759: LD_INT 2
37761: NEG
37762: PUSH
37763: LD_INT 1
37765: NEG
37766: PUSH
37767: EMPTY
37768: LIST
37769: LIST
37770: PUSH
37771: LD_INT 2
37773: NEG
37774: PUSH
37775: LD_INT 2
37777: NEG
37778: PUSH
37779: EMPTY
37780: LIST
37781: LIST
37782: PUSH
37783: EMPTY
37784: LIST
37785: LIST
37786: LIST
37787: LIST
37788: LIST
37789: LIST
37790: LIST
37791: LIST
37792: LIST
37793: LIST
37794: LIST
37795: LIST
37796: LIST
37797: LIST
37798: LIST
37799: LIST
37800: LIST
37801: LIST
37802: LIST
37803: ST_TO_ADDR
// DepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37804: LD_ADDR_VAR 0 20
37808: PUSH
37809: LD_INT 0
37811: PUSH
37812: LD_INT 0
37814: PUSH
37815: EMPTY
37816: LIST
37817: LIST
37818: PUSH
37819: LD_INT 0
37821: PUSH
37822: LD_INT 1
37824: NEG
37825: PUSH
37826: EMPTY
37827: LIST
37828: LIST
37829: PUSH
37830: LD_INT 1
37832: PUSH
37833: LD_INT 0
37835: PUSH
37836: EMPTY
37837: LIST
37838: LIST
37839: PUSH
37840: LD_INT 1
37842: PUSH
37843: LD_INT 1
37845: PUSH
37846: EMPTY
37847: LIST
37848: LIST
37849: PUSH
37850: LD_INT 0
37852: PUSH
37853: LD_INT 1
37855: PUSH
37856: EMPTY
37857: LIST
37858: LIST
37859: PUSH
37860: LD_INT 1
37862: NEG
37863: PUSH
37864: LD_INT 0
37866: PUSH
37867: EMPTY
37868: LIST
37869: LIST
37870: PUSH
37871: LD_INT 1
37873: NEG
37874: PUSH
37875: LD_INT 1
37877: NEG
37878: PUSH
37879: EMPTY
37880: LIST
37881: LIST
37882: PUSH
37883: LD_INT 1
37885: NEG
37886: PUSH
37887: LD_INT 2
37889: NEG
37890: PUSH
37891: EMPTY
37892: LIST
37893: LIST
37894: PUSH
37895: LD_INT 0
37897: PUSH
37898: LD_INT 2
37900: NEG
37901: PUSH
37902: EMPTY
37903: LIST
37904: LIST
37905: PUSH
37906: LD_INT 1
37908: PUSH
37909: LD_INT 1
37911: NEG
37912: PUSH
37913: EMPTY
37914: LIST
37915: LIST
37916: PUSH
37917: LD_INT 2
37919: PUSH
37920: LD_INT 0
37922: PUSH
37923: EMPTY
37924: LIST
37925: LIST
37926: PUSH
37927: LD_INT 2
37929: PUSH
37930: LD_INT 1
37932: PUSH
37933: EMPTY
37934: LIST
37935: LIST
37936: PUSH
37937: LD_INT 2
37939: PUSH
37940: LD_INT 2
37942: PUSH
37943: EMPTY
37944: LIST
37945: LIST
37946: PUSH
37947: LD_INT 1
37949: PUSH
37950: LD_INT 2
37952: PUSH
37953: EMPTY
37954: LIST
37955: LIST
37956: PUSH
37957: LD_INT 0
37959: PUSH
37960: LD_INT 2
37962: PUSH
37963: EMPTY
37964: LIST
37965: LIST
37966: PUSH
37967: LD_INT 1
37969: NEG
37970: PUSH
37971: LD_INT 1
37973: PUSH
37974: EMPTY
37975: LIST
37976: LIST
37977: PUSH
37978: LD_INT 2
37980: NEG
37981: PUSH
37982: LD_INT 0
37984: PUSH
37985: EMPTY
37986: LIST
37987: LIST
37988: PUSH
37989: LD_INT 2
37991: NEG
37992: PUSH
37993: LD_INT 1
37995: NEG
37996: PUSH
37997: EMPTY
37998: LIST
37999: LIST
38000: PUSH
38001: LD_INT 2
38003: NEG
38004: PUSH
38005: LD_INT 2
38007: NEG
38008: PUSH
38009: EMPTY
38010: LIST
38011: LIST
38012: PUSH
38013: EMPTY
38014: LIST
38015: LIST
38016: LIST
38017: LIST
38018: LIST
38019: LIST
38020: LIST
38021: LIST
38022: LIST
38023: LIST
38024: LIST
38025: LIST
38026: LIST
38027: LIST
38028: LIST
38029: LIST
38030: LIST
38031: LIST
38032: LIST
38033: ST_TO_ADDR
// DepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38034: LD_ADDR_VAR 0 21
38038: PUSH
38039: LD_INT 0
38041: PUSH
38042: LD_INT 0
38044: PUSH
38045: EMPTY
38046: LIST
38047: LIST
38048: PUSH
38049: LD_INT 0
38051: PUSH
38052: LD_INT 1
38054: NEG
38055: PUSH
38056: EMPTY
38057: LIST
38058: LIST
38059: PUSH
38060: LD_INT 1
38062: PUSH
38063: LD_INT 0
38065: PUSH
38066: EMPTY
38067: LIST
38068: LIST
38069: PUSH
38070: LD_INT 1
38072: PUSH
38073: LD_INT 1
38075: PUSH
38076: EMPTY
38077: LIST
38078: LIST
38079: PUSH
38080: LD_INT 0
38082: PUSH
38083: LD_INT 1
38085: PUSH
38086: EMPTY
38087: LIST
38088: LIST
38089: PUSH
38090: LD_INT 1
38092: NEG
38093: PUSH
38094: LD_INT 0
38096: PUSH
38097: EMPTY
38098: LIST
38099: LIST
38100: PUSH
38101: LD_INT 1
38103: NEG
38104: PUSH
38105: LD_INT 1
38107: NEG
38108: PUSH
38109: EMPTY
38110: LIST
38111: LIST
38112: PUSH
38113: LD_INT 1
38115: NEG
38116: PUSH
38117: LD_INT 2
38119: NEG
38120: PUSH
38121: EMPTY
38122: LIST
38123: LIST
38124: PUSH
38125: LD_INT 0
38127: PUSH
38128: LD_INT 2
38130: NEG
38131: PUSH
38132: EMPTY
38133: LIST
38134: LIST
38135: PUSH
38136: LD_INT 1
38138: PUSH
38139: LD_INT 1
38141: NEG
38142: PUSH
38143: EMPTY
38144: LIST
38145: LIST
38146: PUSH
38147: LD_INT 2
38149: PUSH
38150: LD_INT 0
38152: PUSH
38153: EMPTY
38154: LIST
38155: LIST
38156: PUSH
38157: LD_INT 2
38159: PUSH
38160: LD_INT 1
38162: PUSH
38163: EMPTY
38164: LIST
38165: LIST
38166: PUSH
38167: LD_INT 2
38169: PUSH
38170: LD_INT 2
38172: PUSH
38173: EMPTY
38174: LIST
38175: LIST
38176: PUSH
38177: LD_INT 1
38179: PUSH
38180: LD_INT 2
38182: PUSH
38183: EMPTY
38184: LIST
38185: LIST
38186: PUSH
38187: LD_INT 0
38189: PUSH
38190: LD_INT 2
38192: PUSH
38193: EMPTY
38194: LIST
38195: LIST
38196: PUSH
38197: LD_INT 1
38199: NEG
38200: PUSH
38201: LD_INT 1
38203: PUSH
38204: EMPTY
38205: LIST
38206: LIST
38207: PUSH
38208: LD_INT 2
38210: NEG
38211: PUSH
38212: LD_INT 0
38214: PUSH
38215: EMPTY
38216: LIST
38217: LIST
38218: PUSH
38219: LD_INT 2
38221: NEG
38222: PUSH
38223: LD_INT 1
38225: NEG
38226: PUSH
38227: EMPTY
38228: LIST
38229: LIST
38230: PUSH
38231: LD_INT 2
38233: NEG
38234: PUSH
38235: LD_INT 2
38237: NEG
38238: PUSH
38239: EMPTY
38240: LIST
38241: LIST
38242: PUSH
38243: EMPTY
38244: LIST
38245: LIST
38246: LIST
38247: LIST
38248: LIST
38249: LIST
38250: LIST
38251: LIST
38252: LIST
38253: LIST
38254: LIST
38255: LIST
38256: LIST
38257: LIST
38258: LIST
38259: LIST
38260: LIST
38261: LIST
38262: LIST
38263: ST_TO_ADDR
// DepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38264: LD_ADDR_VAR 0 22
38268: PUSH
38269: LD_INT 0
38271: PUSH
38272: LD_INT 0
38274: PUSH
38275: EMPTY
38276: LIST
38277: LIST
38278: PUSH
38279: LD_INT 0
38281: PUSH
38282: LD_INT 1
38284: NEG
38285: PUSH
38286: EMPTY
38287: LIST
38288: LIST
38289: PUSH
38290: LD_INT 1
38292: PUSH
38293: LD_INT 0
38295: PUSH
38296: EMPTY
38297: LIST
38298: LIST
38299: PUSH
38300: LD_INT 1
38302: PUSH
38303: LD_INT 1
38305: PUSH
38306: EMPTY
38307: LIST
38308: LIST
38309: PUSH
38310: LD_INT 0
38312: PUSH
38313: LD_INT 1
38315: PUSH
38316: EMPTY
38317: LIST
38318: LIST
38319: PUSH
38320: LD_INT 1
38322: NEG
38323: PUSH
38324: LD_INT 0
38326: PUSH
38327: EMPTY
38328: LIST
38329: LIST
38330: PUSH
38331: LD_INT 1
38333: NEG
38334: PUSH
38335: LD_INT 1
38337: NEG
38338: PUSH
38339: EMPTY
38340: LIST
38341: LIST
38342: PUSH
38343: LD_INT 1
38345: NEG
38346: PUSH
38347: LD_INT 2
38349: NEG
38350: PUSH
38351: EMPTY
38352: LIST
38353: LIST
38354: PUSH
38355: LD_INT 0
38357: PUSH
38358: LD_INT 2
38360: NEG
38361: PUSH
38362: EMPTY
38363: LIST
38364: LIST
38365: PUSH
38366: LD_INT 1
38368: PUSH
38369: LD_INT 1
38371: NEG
38372: PUSH
38373: EMPTY
38374: LIST
38375: LIST
38376: PUSH
38377: LD_INT 2
38379: PUSH
38380: LD_INT 0
38382: PUSH
38383: EMPTY
38384: LIST
38385: LIST
38386: PUSH
38387: LD_INT 2
38389: PUSH
38390: LD_INT 1
38392: PUSH
38393: EMPTY
38394: LIST
38395: LIST
38396: PUSH
38397: LD_INT 2
38399: PUSH
38400: LD_INT 2
38402: PUSH
38403: EMPTY
38404: LIST
38405: LIST
38406: PUSH
38407: LD_INT 1
38409: PUSH
38410: LD_INT 2
38412: PUSH
38413: EMPTY
38414: LIST
38415: LIST
38416: PUSH
38417: LD_INT 0
38419: PUSH
38420: LD_INT 2
38422: PUSH
38423: EMPTY
38424: LIST
38425: LIST
38426: PUSH
38427: LD_INT 1
38429: NEG
38430: PUSH
38431: LD_INT 1
38433: PUSH
38434: EMPTY
38435: LIST
38436: LIST
38437: PUSH
38438: LD_INT 2
38440: NEG
38441: PUSH
38442: LD_INT 0
38444: PUSH
38445: EMPTY
38446: LIST
38447: LIST
38448: PUSH
38449: LD_INT 2
38451: NEG
38452: PUSH
38453: LD_INT 1
38455: NEG
38456: PUSH
38457: EMPTY
38458: LIST
38459: LIST
38460: PUSH
38461: LD_INT 2
38463: NEG
38464: PUSH
38465: LD_INT 2
38467: NEG
38468: PUSH
38469: EMPTY
38470: LIST
38471: LIST
38472: PUSH
38473: EMPTY
38474: LIST
38475: LIST
38476: LIST
38477: LIST
38478: LIST
38479: LIST
38480: LIST
38481: LIST
38482: LIST
38483: LIST
38484: LIST
38485: LIST
38486: LIST
38487: LIST
38488: LIST
38489: LIST
38490: LIST
38491: LIST
38492: LIST
38493: ST_TO_ADDR
// DepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
38494: LD_ADDR_VAR 0 23
38498: PUSH
38499: LD_INT 0
38501: PUSH
38502: LD_INT 0
38504: PUSH
38505: EMPTY
38506: LIST
38507: LIST
38508: PUSH
38509: LD_INT 0
38511: PUSH
38512: LD_INT 1
38514: NEG
38515: PUSH
38516: EMPTY
38517: LIST
38518: LIST
38519: PUSH
38520: LD_INT 1
38522: PUSH
38523: LD_INT 0
38525: PUSH
38526: EMPTY
38527: LIST
38528: LIST
38529: PUSH
38530: LD_INT 1
38532: PUSH
38533: LD_INT 1
38535: PUSH
38536: EMPTY
38537: LIST
38538: LIST
38539: PUSH
38540: LD_INT 0
38542: PUSH
38543: LD_INT 1
38545: PUSH
38546: EMPTY
38547: LIST
38548: LIST
38549: PUSH
38550: LD_INT 1
38552: NEG
38553: PUSH
38554: LD_INT 0
38556: PUSH
38557: EMPTY
38558: LIST
38559: LIST
38560: PUSH
38561: LD_INT 1
38563: NEG
38564: PUSH
38565: LD_INT 1
38567: NEG
38568: PUSH
38569: EMPTY
38570: LIST
38571: LIST
38572: PUSH
38573: LD_INT 1
38575: NEG
38576: PUSH
38577: LD_INT 2
38579: NEG
38580: PUSH
38581: EMPTY
38582: LIST
38583: LIST
38584: PUSH
38585: LD_INT 0
38587: PUSH
38588: LD_INT 2
38590: NEG
38591: PUSH
38592: EMPTY
38593: LIST
38594: LIST
38595: PUSH
38596: LD_INT 1
38598: PUSH
38599: LD_INT 1
38601: NEG
38602: PUSH
38603: EMPTY
38604: LIST
38605: LIST
38606: PUSH
38607: LD_INT 2
38609: PUSH
38610: LD_INT 0
38612: PUSH
38613: EMPTY
38614: LIST
38615: LIST
38616: PUSH
38617: LD_INT 2
38619: PUSH
38620: LD_INT 1
38622: PUSH
38623: EMPTY
38624: LIST
38625: LIST
38626: PUSH
38627: LD_INT 2
38629: PUSH
38630: LD_INT 2
38632: PUSH
38633: EMPTY
38634: LIST
38635: LIST
38636: PUSH
38637: LD_INT 1
38639: PUSH
38640: LD_INT 2
38642: PUSH
38643: EMPTY
38644: LIST
38645: LIST
38646: PUSH
38647: LD_INT 0
38649: PUSH
38650: LD_INT 2
38652: PUSH
38653: EMPTY
38654: LIST
38655: LIST
38656: PUSH
38657: LD_INT 1
38659: NEG
38660: PUSH
38661: LD_INT 1
38663: PUSH
38664: EMPTY
38665: LIST
38666: LIST
38667: PUSH
38668: LD_INT 2
38670: NEG
38671: PUSH
38672: LD_INT 0
38674: PUSH
38675: EMPTY
38676: LIST
38677: LIST
38678: PUSH
38679: LD_INT 2
38681: NEG
38682: PUSH
38683: LD_INT 1
38685: NEG
38686: PUSH
38687: EMPTY
38688: LIST
38689: LIST
38690: PUSH
38691: LD_INT 2
38693: NEG
38694: PUSH
38695: LD_INT 2
38697: NEG
38698: PUSH
38699: EMPTY
38700: LIST
38701: LIST
38702: PUSH
38703: LD_INT 2
38705: NEG
38706: PUSH
38707: LD_INT 3
38709: NEG
38710: PUSH
38711: EMPTY
38712: LIST
38713: LIST
38714: PUSH
38715: LD_INT 1
38717: NEG
38718: PUSH
38719: LD_INT 3
38721: NEG
38722: PUSH
38723: EMPTY
38724: LIST
38725: LIST
38726: PUSH
38727: LD_INT 1
38729: PUSH
38730: LD_INT 2
38732: NEG
38733: PUSH
38734: EMPTY
38735: LIST
38736: LIST
38737: PUSH
38738: LD_INT 2
38740: PUSH
38741: LD_INT 1
38743: NEG
38744: PUSH
38745: EMPTY
38746: LIST
38747: LIST
38748: PUSH
38749: EMPTY
38750: LIST
38751: LIST
38752: LIST
38753: LIST
38754: LIST
38755: LIST
38756: LIST
38757: LIST
38758: LIST
38759: LIST
38760: LIST
38761: LIST
38762: LIST
38763: LIST
38764: LIST
38765: LIST
38766: LIST
38767: LIST
38768: LIST
38769: LIST
38770: LIST
38771: LIST
38772: LIST
38773: ST_TO_ADDR
// DepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
38774: LD_ADDR_VAR 0 24
38778: PUSH
38779: LD_INT 0
38781: PUSH
38782: LD_INT 0
38784: PUSH
38785: EMPTY
38786: LIST
38787: LIST
38788: PUSH
38789: LD_INT 0
38791: PUSH
38792: LD_INT 1
38794: NEG
38795: PUSH
38796: EMPTY
38797: LIST
38798: LIST
38799: PUSH
38800: LD_INT 1
38802: PUSH
38803: LD_INT 0
38805: PUSH
38806: EMPTY
38807: LIST
38808: LIST
38809: PUSH
38810: LD_INT 1
38812: PUSH
38813: LD_INT 1
38815: PUSH
38816: EMPTY
38817: LIST
38818: LIST
38819: PUSH
38820: LD_INT 0
38822: PUSH
38823: LD_INT 1
38825: PUSH
38826: EMPTY
38827: LIST
38828: LIST
38829: PUSH
38830: LD_INT 1
38832: NEG
38833: PUSH
38834: LD_INT 0
38836: PUSH
38837: EMPTY
38838: LIST
38839: LIST
38840: PUSH
38841: LD_INT 1
38843: NEG
38844: PUSH
38845: LD_INT 1
38847: NEG
38848: PUSH
38849: EMPTY
38850: LIST
38851: LIST
38852: PUSH
38853: LD_INT 1
38855: NEG
38856: PUSH
38857: LD_INT 2
38859: NEG
38860: PUSH
38861: EMPTY
38862: LIST
38863: LIST
38864: PUSH
38865: LD_INT 0
38867: PUSH
38868: LD_INT 2
38870: NEG
38871: PUSH
38872: EMPTY
38873: LIST
38874: LIST
38875: PUSH
38876: LD_INT 1
38878: PUSH
38879: LD_INT 1
38881: NEG
38882: PUSH
38883: EMPTY
38884: LIST
38885: LIST
38886: PUSH
38887: LD_INT 2
38889: PUSH
38890: LD_INT 0
38892: PUSH
38893: EMPTY
38894: LIST
38895: LIST
38896: PUSH
38897: LD_INT 2
38899: PUSH
38900: LD_INT 1
38902: PUSH
38903: EMPTY
38904: LIST
38905: LIST
38906: PUSH
38907: LD_INT 2
38909: PUSH
38910: LD_INT 2
38912: PUSH
38913: EMPTY
38914: LIST
38915: LIST
38916: PUSH
38917: LD_INT 1
38919: PUSH
38920: LD_INT 2
38922: PUSH
38923: EMPTY
38924: LIST
38925: LIST
38926: PUSH
38927: LD_INT 0
38929: PUSH
38930: LD_INT 2
38932: PUSH
38933: EMPTY
38934: LIST
38935: LIST
38936: PUSH
38937: LD_INT 1
38939: NEG
38940: PUSH
38941: LD_INT 1
38943: PUSH
38944: EMPTY
38945: LIST
38946: LIST
38947: PUSH
38948: LD_INT 2
38950: NEG
38951: PUSH
38952: LD_INT 0
38954: PUSH
38955: EMPTY
38956: LIST
38957: LIST
38958: PUSH
38959: LD_INT 2
38961: NEG
38962: PUSH
38963: LD_INT 1
38965: NEG
38966: PUSH
38967: EMPTY
38968: LIST
38969: LIST
38970: PUSH
38971: LD_INT 2
38973: NEG
38974: PUSH
38975: LD_INT 2
38977: NEG
38978: PUSH
38979: EMPTY
38980: LIST
38981: LIST
38982: PUSH
38983: LD_INT 1
38985: PUSH
38986: LD_INT 2
38988: NEG
38989: PUSH
38990: EMPTY
38991: LIST
38992: LIST
38993: PUSH
38994: LD_INT 2
38996: PUSH
38997: LD_INT 1
38999: NEG
39000: PUSH
39001: EMPTY
39002: LIST
39003: LIST
39004: PUSH
39005: LD_INT 3
39007: PUSH
39008: LD_INT 1
39010: PUSH
39011: EMPTY
39012: LIST
39013: LIST
39014: PUSH
39015: LD_INT 3
39017: PUSH
39018: LD_INT 2
39020: PUSH
39021: EMPTY
39022: LIST
39023: LIST
39024: PUSH
39025: EMPTY
39026: LIST
39027: LIST
39028: LIST
39029: LIST
39030: LIST
39031: LIST
39032: LIST
39033: LIST
39034: LIST
39035: LIST
39036: LIST
39037: LIST
39038: LIST
39039: LIST
39040: LIST
39041: LIST
39042: LIST
39043: LIST
39044: LIST
39045: LIST
39046: LIST
39047: LIST
39048: LIST
39049: ST_TO_ADDR
// DepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
39050: LD_ADDR_VAR 0 25
39054: PUSH
39055: LD_INT 0
39057: PUSH
39058: LD_INT 0
39060: PUSH
39061: EMPTY
39062: LIST
39063: LIST
39064: PUSH
39065: LD_INT 0
39067: PUSH
39068: LD_INT 1
39070: NEG
39071: PUSH
39072: EMPTY
39073: LIST
39074: LIST
39075: PUSH
39076: LD_INT 1
39078: PUSH
39079: LD_INT 0
39081: PUSH
39082: EMPTY
39083: LIST
39084: LIST
39085: PUSH
39086: LD_INT 1
39088: PUSH
39089: LD_INT 1
39091: PUSH
39092: EMPTY
39093: LIST
39094: LIST
39095: PUSH
39096: LD_INT 0
39098: PUSH
39099: LD_INT 1
39101: PUSH
39102: EMPTY
39103: LIST
39104: LIST
39105: PUSH
39106: LD_INT 1
39108: NEG
39109: PUSH
39110: LD_INT 0
39112: PUSH
39113: EMPTY
39114: LIST
39115: LIST
39116: PUSH
39117: LD_INT 1
39119: NEG
39120: PUSH
39121: LD_INT 1
39123: NEG
39124: PUSH
39125: EMPTY
39126: LIST
39127: LIST
39128: PUSH
39129: LD_INT 1
39131: NEG
39132: PUSH
39133: LD_INT 2
39135: NEG
39136: PUSH
39137: EMPTY
39138: LIST
39139: LIST
39140: PUSH
39141: LD_INT 0
39143: PUSH
39144: LD_INT 2
39146: NEG
39147: PUSH
39148: EMPTY
39149: LIST
39150: LIST
39151: PUSH
39152: LD_INT 1
39154: PUSH
39155: LD_INT 1
39157: NEG
39158: PUSH
39159: EMPTY
39160: LIST
39161: LIST
39162: PUSH
39163: LD_INT 2
39165: PUSH
39166: LD_INT 0
39168: PUSH
39169: EMPTY
39170: LIST
39171: LIST
39172: PUSH
39173: LD_INT 2
39175: PUSH
39176: LD_INT 1
39178: PUSH
39179: EMPTY
39180: LIST
39181: LIST
39182: PUSH
39183: LD_INT 2
39185: PUSH
39186: LD_INT 2
39188: PUSH
39189: EMPTY
39190: LIST
39191: LIST
39192: PUSH
39193: LD_INT 1
39195: PUSH
39196: LD_INT 2
39198: PUSH
39199: EMPTY
39200: LIST
39201: LIST
39202: PUSH
39203: LD_INT 0
39205: PUSH
39206: LD_INT 2
39208: PUSH
39209: EMPTY
39210: LIST
39211: LIST
39212: PUSH
39213: LD_INT 1
39215: NEG
39216: PUSH
39217: LD_INT 1
39219: PUSH
39220: EMPTY
39221: LIST
39222: LIST
39223: PUSH
39224: LD_INT 2
39226: NEG
39227: PUSH
39228: LD_INT 0
39230: PUSH
39231: EMPTY
39232: LIST
39233: LIST
39234: PUSH
39235: LD_INT 2
39237: NEG
39238: PUSH
39239: LD_INT 1
39241: NEG
39242: PUSH
39243: EMPTY
39244: LIST
39245: LIST
39246: PUSH
39247: LD_INT 2
39249: NEG
39250: PUSH
39251: LD_INT 2
39253: NEG
39254: PUSH
39255: EMPTY
39256: LIST
39257: LIST
39258: PUSH
39259: LD_INT 3
39261: PUSH
39262: LD_INT 1
39264: PUSH
39265: EMPTY
39266: LIST
39267: LIST
39268: PUSH
39269: LD_INT 3
39271: PUSH
39272: LD_INT 2
39274: PUSH
39275: EMPTY
39276: LIST
39277: LIST
39278: PUSH
39279: LD_INT 2
39281: PUSH
39282: LD_INT 3
39284: PUSH
39285: EMPTY
39286: LIST
39287: LIST
39288: PUSH
39289: LD_INT 1
39291: PUSH
39292: LD_INT 3
39294: PUSH
39295: EMPTY
39296: LIST
39297: LIST
39298: PUSH
39299: EMPTY
39300: LIST
39301: LIST
39302: LIST
39303: LIST
39304: LIST
39305: LIST
39306: LIST
39307: LIST
39308: LIST
39309: LIST
39310: LIST
39311: LIST
39312: LIST
39313: LIST
39314: LIST
39315: LIST
39316: LIST
39317: LIST
39318: LIST
39319: LIST
39320: LIST
39321: LIST
39322: LIST
39323: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
39324: LD_ADDR_VAR 0 26
39328: PUSH
39329: LD_INT 0
39331: PUSH
39332: LD_INT 0
39334: PUSH
39335: EMPTY
39336: LIST
39337: LIST
39338: PUSH
39339: LD_INT 0
39341: PUSH
39342: LD_INT 1
39344: NEG
39345: PUSH
39346: EMPTY
39347: LIST
39348: LIST
39349: PUSH
39350: LD_INT 1
39352: PUSH
39353: LD_INT 0
39355: PUSH
39356: EMPTY
39357: LIST
39358: LIST
39359: PUSH
39360: LD_INT 1
39362: PUSH
39363: LD_INT 1
39365: PUSH
39366: EMPTY
39367: LIST
39368: LIST
39369: PUSH
39370: LD_INT 0
39372: PUSH
39373: LD_INT 1
39375: PUSH
39376: EMPTY
39377: LIST
39378: LIST
39379: PUSH
39380: LD_INT 1
39382: NEG
39383: PUSH
39384: LD_INT 0
39386: PUSH
39387: EMPTY
39388: LIST
39389: LIST
39390: PUSH
39391: LD_INT 1
39393: NEG
39394: PUSH
39395: LD_INT 1
39397: NEG
39398: PUSH
39399: EMPTY
39400: LIST
39401: LIST
39402: PUSH
39403: LD_INT 1
39405: NEG
39406: PUSH
39407: LD_INT 2
39409: NEG
39410: PUSH
39411: EMPTY
39412: LIST
39413: LIST
39414: PUSH
39415: LD_INT 0
39417: PUSH
39418: LD_INT 2
39420: NEG
39421: PUSH
39422: EMPTY
39423: LIST
39424: LIST
39425: PUSH
39426: LD_INT 1
39428: PUSH
39429: LD_INT 1
39431: NEG
39432: PUSH
39433: EMPTY
39434: LIST
39435: LIST
39436: PUSH
39437: LD_INT 2
39439: PUSH
39440: LD_INT 0
39442: PUSH
39443: EMPTY
39444: LIST
39445: LIST
39446: PUSH
39447: LD_INT 2
39449: PUSH
39450: LD_INT 1
39452: PUSH
39453: EMPTY
39454: LIST
39455: LIST
39456: PUSH
39457: LD_INT 2
39459: PUSH
39460: LD_INT 2
39462: PUSH
39463: EMPTY
39464: LIST
39465: LIST
39466: PUSH
39467: LD_INT 1
39469: PUSH
39470: LD_INT 2
39472: PUSH
39473: EMPTY
39474: LIST
39475: LIST
39476: PUSH
39477: LD_INT 0
39479: PUSH
39480: LD_INT 2
39482: PUSH
39483: EMPTY
39484: LIST
39485: LIST
39486: PUSH
39487: LD_INT 1
39489: NEG
39490: PUSH
39491: LD_INT 1
39493: PUSH
39494: EMPTY
39495: LIST
39496: LIST
39497: PUSH
39498: LD_INT 2
39500: NEG
39501: PUSH
39502: LD_INT 0
39504: PUSH
39505: EMPTY
39506: LIST
39507: LIST
39508: PUSH
39509: LD_INT 2
39511: NEG
39512: PUSH
39513: LD_INT 1
39515: NEG
39516: PUSH
39517: EMPTY
39518: LIST
39519: LIST
39520: PUSH
39521: LD_INT 2
39523: NEG
39524: PUSH
39525: LD_INT 2
39527: NEG
39528: PUSH
39529: EMPTY
39530: LIST
39531: LIST
39532: PUSH
39533: LD_INT 2
39535: PUSH
39536: LD_INT 3
39538: PUSH
39539: EMPTY
39540: LIST
39541: LIST
39542: PUSH
39543: LD_INT 1
39545: PUSH
39546: LD_INT 3
39548: PUSH
39549: EMPTY
39550: LIST
39551: LIST
39552: PUSH
39553: LD_INT 1
39555: NEG
39556: PUSH
39557: LD_INT 2
39559: PUSH
39560: EMPTY
39561: LIST
39562: LIST
39563: PUSH
39564: LD_INT 2
39566: NEG
39567: PUSH
39568: LD_INT 1
39570: PUSH
39571: EMPTY
39572: LIST
39573: LIST
39574: PUSH
39575: EMPTY
39576: LIST
39577: LIST
39578: LIST
39579: LIST
39580: LIST
39581: LIST
39582: LIST
39583: LIST
39584: LIST
39585: LIST
39586: LIST
39587: LIST
39588: LIST
39589: LIST
39590: LIST
39591: LIST
39592: LIST
39593: LIST
39594: LIST
39595: LIST
39596: LIST
39597: LIST
39598: LIST
39599: ST_TO_ADDR
// DepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
39600: LD_ADDR_VAR 0 27
39604: PUSH
39605: LD_INT 0
39607: PUSH
39608: LD_INT 0
39610: PUSH
39611: EMPTY
39612: LIST
39613: LIST
39614: PUSH
39615: LD_INT 0
39617: PUSH
39618: LD_INT 1
39620: NEG
39621: PUSH
39622: EMPTY
39623: LIST
39624: LIST
39625: PUSH
39626: LD_INT 1
39628: PUSH
39629: LD_INT 0
39631: PUSH
39632: EMPTY
39633: LIST
39634: LIST
39635: PUSH
39636: LD_INT 1
39638: PUSH
39639: LD_INT 1
39641: PUSH
39642: EMPTY
39643: LIST
39644: LIST
39645: PUSH
39646: LD_INT 0
39648: PUSH
39649: LD_INT 1
39651: PUSH
39652: EMPTY
39653: LIST
39654: LIST
39655: PUSH
39656: LD_INT 1
39658: NEG
39659: PUSH
39660: LD_INT 0
39662: PUSH
39663: EMPTY
39664: LIST
39665: LIST
39666: PUSH
39667: LD_INT 1
39669: NEG
39670: PUSH
39671: LD_INT 1
39673: NEG
39674: PUSH
39675: EMPTY
39676: LIST
39677: LIST
39678: PUSH
39679: LD_INT 1
39681: NEG
39682: PUSH
39683: LD_INT 2
39685: NEG
39686: PUSH
39687: EMPTY
39688: LIST
39689: LIST
39690: PUSH
39691: LD_INT 0
39693: PUSH
39694: LD_INT 2
39696: NEG
39697: PUSH
39698: EMPTY
39699: LIST
39700: LIST
39701: PUSH
39702: LD_INT 1
39704: PUSH
39705: LD_INT 1
39707: NEG
39708: PUSH
39709: EMPTY
39710: LIST
39711: LIST
39712: PUSH
39713: LD_INT 2
39715: PUSH
39716: LD_INT 0
39718: PUSH
39719: EMPTY
39720: LIST
39721: LIST
39722: PUSH
39723: LD_INT 2
39725: PUSH
39726: LD_INT 1
39728: PUSH
39729: EMPTY
39730: LIST
39731: LIST
39732: PUSH
39733: LD_INT 2
39735: PUSH
39736: LD_INT 2
39738: PUSH
39739: EMPTY
39740: LIST
39741: LIST
39742: PUSH
39743: LD_INT 1
39745: PUSH
39746: LD_INT 2
39748: PUSH
39749: EMPTY
39750: LIST
39751: LIST
39752: PUSH
39753: LD_INT 0
39755: PUSH
39756: LD_INT 2
39758: PUSH
39759: EMPTY
39760: LIST
39761: LIST
39762: PUSH
39763: LD_INT 1
39765: NEG
39766: PUSH
39767: LD_INT 1
39769: PUSH
39770: EMPTY
39771: LIST
39772: LIST
39773: PUSH
39774: LD_INT 2
39776: NEG
39777: PUSH
39778: LD_INT 0
39780: PUSH
39781: EMPTY
39782: LIST
39783: LIST
39784: PUSH
39785: LD_INT 2
39787: NEG
39788: PUSH
39789: LD_INT 1
39791: NEG
39792: PUSH
39793: EMPTY
39794: LIST
39795: LIST
39796: PUSH
39797: LD_INT 2
39799: NEG
39800: PUSH
39801: LD_INT 2
39803: NEG
39804: PUSH
39805: EMPTY
39806: LIST
39807: LIST
39808: PUSH
39809: LD_INT 1
39811: NEG
39812: PUSH
39813: LD_INT 2
39815: PUSH
39816: EMPTY
39817: LIST
39818: LIST
39819: PUSH
39820: LD_INT 2
39822: NEG
39823: PUSH
39824: LD_INT 1
39826: PUSH
39827: EMPTY
39828: LIST
39829: LIST
39830: PUSH
39831: LD_INT 3
39833: NEG
39834: PUSH
39835: LD_INT 1
39837: NEG
39838: PUSH
39839: EMPTY
39840: LIST
39841: LIST
39842: PUSH
39843: LD_INT 3
39845: NEG
39846: PUSH
39847: LD_INT 2
39849: NEG
39850: PUSH
39851: EMPTY
39852: LIST
39853: LIST
39854: PUSH
39855: EMPTY
39856: LIST
39857: LIST
39858: LIST
39859: LIST
39860: LIST
39861: LIST
39862: LIST
39863: LIST
39864: LIST
39865: LIST
39866: LIST
39867: LIST
39868: LIST
39869: LIST
39870: LIST
39871: LIST
39872: LIST
39873: LIST
39874: LIST
39875: LIST
39876: LIST
39877: LIST
39878: LIST
39879: ST_TO_ADDR
// DepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
39880: LD_ADDR_VAR 0 28
39884: PUSH
39885: LD_INT 0
39887: PUSH
39888: LD_INT 0
39890: PUSH
39891: EMPTY
39892: LIST
39893: LIST
39894: PUSH
39895: LD_INT 0
39897: PUSH
39898: LD_INT 1
39900: NEG
39901: PUSH
39902: EMPTY
39903: LIST
39904: LIST
39905: PUSH
39906: LD_INT 1
39908: PUSH
39909: LD_INT 0
39911: PUSH
39912: EMPTY
39913: LIST
39914: LIST
39915: PUSH
39916: LD_INT 1
39918: PUSH
39919: LD_INT 1
39921: PUSH
39922: EMPTY
39923: LIST
39924: LIST
39925: PUSH
39926: LD_INT 0
39928: PUSH
39929: LD_INT 1
39931: PUSH
39932: EMPTY
39933: LIST
39934: LIST
39935: PUSH
39936: LD_INT 1
39938: NEG
39939: PUSH
39940: LD_INT 0
39942: PUSH
39943: EMPTY
39944: LIST
39945: LIST
39946: PUSH
39947: LD_INT 1
39949: NEG
39950: PUSH
39951: LD_INT 1
39953: NEG
39954: PUSH
39955: EMPTY
39956: LIST
39957: LIST
39958: PUSH
39959: LD_INT 1
39961: NEG
39962: PUSH
39963: LD_INT 2
39965: NEG
39966: PUSH
39967: EMPTY
39968: LIST
39969: LIST
39970: PUSH
39971: LD_INT 0
39973: PUSH
39974: LD_INT 2
39976: NEG
39977: PUSH
39978: EMPTY
39979: LIST
39980: LIST
39981: PUSH
39982: LD_INT 1
39984: PUSH
39985: LD_INT 1
39987: NEG
39988: PUSH
39989: EMPTY
39990: LIST
39991: LIST
39992: PUSH
39993: LD_INT 2
39995: PUSH
39996: LD_INT 0
39998: PUSH
39999: EMPTY
40000: LIST
40001: LIST
40002: PUSH
40003: LD_INT 2
40005: PUSH
40006: LD_INT 1
40008: PUSH
40009: EMPTY
40010: LIST
40011: LIST
40012: PUSH
40013: LD_INT 2
40015: PUSH
40016: LD_INT 2
40018: PUSH
40019: EMPTY
40020: LIST
40021: LIST
40022: PUSH
40023: LD_INT 1
40025: PUSH
40026: LD_INT 2
40028: PUSH
40029: EMPTY
40030: LIST
40031: LIST
40032: PUSH
40033: LD_INT 0
40035: PUSH
40036: LD_INT 2
40038: PUSH
40039: EMPTY
40040: LIST
40041: LIST
40042: PUSH
40043: LD_INT 1
40045: NEG
40046: PUSH
40047: LD_INT 1
40049: PUSH
40050: EMPTY
40051: LIST
40052: LIST
40053: PUSH
40054: LD_INT 2
40056: NEG
40057: PUSH
40058: LD_INT 0
40060: PUSH
40061: EMPTY
40062: LIST
40063: LIST
40064: PUSH
40065: LD_INT 2
40067: NEG
40068: PUSH
40069: LD_INT 1
40071: NEG
40072: PUSH
40073: EMPTY
40074: LIST
40075: LIST
40076: PUSH
40077: LD_INT 2
40079: NEG
40080: PUSH
40081: LD_INT 2
40083: NEG
40084: PUSH
40085: EMPTY
40086: LIST
40087: LIST
40088: PUSH
40089: LD_INT 2
40091: NEG
40092: PUSH
40093: LD_INT 3
40095: NEG
40096: PUSH
40097: EMPTY
40098: LIST
40099: LIST
40100: PUSH
40101: LD_INT 1
40103: NEG
40104: PUSH
40105: LD_INT 3
40107: NEG
40108: PUSH
40109: EMPTY
40110: LIST
40111: LIST
40112: PUSH
40113: LD_INT 3
40115: NEG
40116: PUSH
40117: LD_INT 1
40119: NEG
40120: PUSH
40121: EMPTY
40122: LIST
40123: LIST
40124: PUSH
40125: LD_INT 3
40127: NEG
40128: PUSH
40129: LD_INT 2
40131: NEG
40132: PUSH
40133: EMPTY
40134: LIST
40135: LIST
40136: PUSH
40137: EMPTY
40138: LIST
40139: LIST
40140: LIST
40141: LIST
40142: LIST
40143: LIST
40144: LIST
40145: LIST
40146: LIST
40147: LIST
40148: LIST
40149: LIST
40150: LIST
40151: LIST
40152: LIST
40153: LIST
40154: LIST
40155: LIST
40156: LIST
40157: LIST
40158: LIST
40159: LIST
40160: LIST
40161: ST_TO_ADDR
// Factory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
40162: LD_ADDR_VAR 0 29
40166: PUSH
40167: LD_INT 0
40169: PUSH
40170: LD_INT 0
40172: PUSH
40173: EMPTY
40174: LIST
40175: LIST
40176: PUSH
40177: LD_INT 0
40179: PUSH
40180: LD_INT 1
40182: NEG
40183: PUSH
40184: EMPTY
40185: LIST
40186: LIST
40187: PUSH
40188: LD_INT 1
40190: PUSH
40191: LD_INT 0
40193: PUSH
40194: EMPTY
40195: LIST
40196: LIST
40197: PUSH
40198: LD_INT 1
40200: PUSH
40201: LD_INT 1
40203: PUSH
40204: EMPTY
40205: LIST
40206: LIST
40207: PUSH
40208: LD_INT 0
40210: PUSH
40211: LD_INT 1
40213: PUSH
40214: EMPTY
40215: LIST
40216: LIST
40217: PUSH
40218: LD_INT 1
40220: NEG
40221: PUSH
40222: LD_INT 0
40224: PUSH
40225: EMPTY
40226: LIST
40227: LIST
40228: PUSH
40229: LD_INT 1
40231: NEG
40232: PUSH
40233: LD_INT 1
40235: NEG
40236: PUSH
40237: EMPTY
40238: LIST
40239: LIST
40240: PUSH
40241: LD_INT 1
40243: NEG
40244: PUSH
40245: LD_INT 2
40247: NEG
40248: PUSH
40249: EMPTY
40250: LIST
40251: LIST
40252: PUSH
40253: LD_INT 0
40255: PUSH
40256: LD_INT 2
40258: NEG
40259: PUSH
40260: EMPTY
40261: LIST
40262: LIST
40263: PUSH
40264: LD_INT 1
40266: PUSH
40267: LD_INT 1
40269: NEG
40270: PUSH
40271: EMPTY
40272: LIST
40273: LIST
40274: PUSH
40275: LD_INT 2
40277: PUSH
40278: LD_INT 0
40280: PUSH
40281: EMPTY
40282: LIST
40283: LIST
40284: PUSH
40285: LD_INT 2
40287: PUSH
40288: LD_INT 1
40290: PUSH
40291: EMPTY
40292: LIST
40293: LIST
40294: PUSH
40295: LD_INT 1
40297: PUSH
40298: LD_INT 2
40300: PUSH
40301: EMPTY
40302: LIST
40303: LIST
40304: PUSH
40305: LD_INT 0
40307: PUSH
40308: LD_INT 2
40310: PUSH
40311: EMPTY
40312: LIST
40313: LIST
40314: PUSH
40315: LD_INT 1
40317: NEG
40318: PUSH
40319: LD_INT 1
40321: PUSH
40322: EMPTY
40323: LIST
40324: LIST
40325: PUSH
40326: LD_INT 2
40328: NEG
40329: PUSH
40330: LD_INT 1
40332: NEG
40333: PUSH
40334: EMPTY
40335: LIST
40336: LIST
40337: PUSH
40338: LD_INT 2
40340: NEG
40341: PUSH
40342: LD_INT 2
40344: NEG
40345: PUSH
40346: EMPTY
40347: LIST
40348: LIST
40349: PUSH
40350: LD_INT 2
40352: NEG
40353: PUSH
40354: LD_INT 3
40356: NEG
40357: PUSH
40358: EMPTY
40359: LIST
40360: LIST
40361: PUSH
40362: LD_INT 2
40364: PUSH
40365: LD_INT 1
40367: NEG
40368: PUSH
40369: EMPTY
40370: LIST
40371: LIST
40372: PUSH
40373: LD_INT 3
40375: PUSH
40376: LD_INT 1
40378: PUSH
40379: EMPTY
40380: LIST
40381: LIST
40382: PUSH
40383: LD_INT 1
40385: PUSH
40386: LD_INT 3
40388: PUSH
40389: EMPTY
40390: LIST
40391: LIST
40392: PUSH
40393: LD_INT 1
40395: NEG
40396: PUSH
40397: LD_INT 2
40399: PUSH
40400: EMPTY
40401: LIST
40402: LIST
40403: PUSH
40404: LD_INT 3
40406: NEG
40407: PUSH
40408: LD_INT 2
40410: NEG
40411: PUSH
40412: EMPTY
40413: LIST
40414: LIST
40415: PUSH
40416: EMPTY
40417: LIST
40418: LIST
40419: LIST
40420: LIST
40421: LIST
40422: LIST
40423: LIST
40424: LIST
40425: LIST
40426: LIST
40427: LIST
40428: LIST
40429: LIST
40430: LIST
40431: LIST
40432: LIST
40433: LIST
40434: LIST
40435: LIST
40436: LIST
40437: LIST
40438: LIST
40439: LIST
40440: ST_TO_ADDR
// Factory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
40441: LD_ADDR_VAR 0 30
40445: PUSH
40446: LD_INT 0
40448: PUSH
40449: LD_INT 0
40451: PUSH
40452: EMPTY
40453: LIST
40454: LIST
40455: PUSH
40456: LD_INT 0
40458: PUSH
40459: LD_INT 1
40461: NEG
40462: PUSH
40463: EMPTY
40464: LIST
40465: LIST
40466: PUSH
40467: LD_INT 1
40469: PUSH
40470: LD_INT 0
40472: PUSH
40473: EMPTY
40474: LIST
40475: LIST
40476: PUSH
40477: LD_INT 1
40479: PUSH
40480: LD_INT 1
40482: PUSH
40483: EMPTY
40484: LIST
40485: LIST
40486: PUSH
40487: LD_INT 0
40489: PUSH
40490: LD_INT 1
40492: PUSH
40493: EMPTY
40494: LIST
40495: LIST
40496: PUSH
40497: LD_INT 1
40499: NEG
40500: PUSH
40501: LD_INT 0
40503: PUSH
40504: EMPTY
40505: LIST
40506: LIST
40507: PUSH
40508: LD_INT 1
40510: NEG
40511: PUSH
40512: LD_INT 1
40514: NEG
40515: PUSH
40516: EMPTY
40517: LIST
40518: LIST
40519: PUSH
40520: LD_INT 1
40522: NEG
40523: PUSH
40524: LD_INT 2
40526: NEG
40527: PUSH
40528: EMPTY
40529: LIST
40530: LIST
40531: PUSH
40532: LD_INT 0
40534: PUSH
40535: LD_INT 2
40537: NEG
40538: PUSH
40539: EMPTY
40540: LIST
40541: LIST
40542: PUSH
40543: LD_INT 1
40545: PUSH
40546: LD_INT 1
40548: NEG
40549: PUSH
40550: EMPTY
40551: LIST
40552: LIST
40553: PUSH
40554: LD_INT 2
40556: PUSH
40557: LD_INT 0
40559: PUSH
40560: EMPTY
40561: LIST
40562: LIST
40563: PUSH
40564: LD_INT 2
40566: PUSH
40567: LD_INT 1
40569: PUSH
40570: EMPTY
40571: LIST
40572: LIST
40573: PUSH
40574: LD_INT 2
40576: PUSH
40577: LD_INT 2
40579: PUSH
40580: EMPTY
40581: LIST
40582: LIST
40583: PUSH
40584: LD_INT 1
40586: PUSH
40587: LD_INT 2
40589: PUSH
40590: EMPTY
40591: LIST
40592: LIST
40593: PUSH
40594: LD_INT 1
40596: NEG
40597: PUSH
40598: LD_INT 1
40600: PUSH
40601: EMPTY
40602: LIST
40603: LIST
40604: PUSH
40605: LD_INT 2
40607: NEG
40608: PUSH
40609: LD_INT 0
40611: PUSH
40612: EMPTY
40613: LIST
40614: LIST
40615: PUSH
40616: LD_INT 2
40618: NEG
40619: PUSH
40620: LD_INT 1
40622: NEG
40623: PUSH
40624: EMPTY
40625: LIST
40626: LIST
40627: PUSH
40628: LD_INT 1
40630: NEG
40631: PUSH
40632: LD_INT 3
40634: NEG
40635: PUSH
40636: EMPTY
40637: LIST
40638: LIST
40639: PUSH
40640: LD_INT 1
40642: PUSH
40643: LD_INT 2
40645: NEG
40646: PUSH
40647: EMPTY
40648: LIST
40649: LIST
40650: PUSH
40651: LD_INT 3
40653: PUSH
40654: LD_INT 2
40656: PUSH
40657: EMPTY
40658: LIST
40659: LIST
40660: PUSH
40661: LD_INT 2
40663: PUSH
40664: LD_INT 3
40666: PUSH
40667: EMPTY
40668: LIST
40669: LIST
40670: PUSH
40671: LD_INT 2
40673: NEG
40674: PUSH
40675: LD_INT 1
40677: PUSH
40678: EMPTY
40679: LIST
40680: LIST
40681: PUSH
40682: LD_INT 3
40684: NEG
40685: PUSH
40686: LD_INT 1
40688: NEG
40689: PUSH
40690: EMPTY
40691: LIST
40692: LIST
40693: PUSH
40694: EMPTY
40695: LIST
40696: LIST
40697: LIST
40698: LIST
40699: LIST
40700: LIST
40701: LIST
40702: LIST
40703: LIST
40704: LIST
40705: LIST
40706: LIST
40707: LIST
40708: LIST
40709: LIST
40710: LIST
40711: LIST
40712: LIST
40713: LIST
40714: LIST
40715: LIST
40716: LIST
40717: LIST
40718: ST_TO_ADDR
// Factory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
40719: LD_ADDR_VAR 0 31
40723: PUSH
40724: LD_INT 0
40726: PUSH
40727: LD_INT 0
40729: PUSH
40730: EMPTY
40731: LIST
40732: LIST
40733: PUSH
40734: LD_INT 0
40736: PUSH
40737: LD_INT 1
40739: NEG
40740: PUSH
40741: EMPTY
40742: LIST
40743: LIST
40744: PUSH
40745: LD_INT 1
40747: PUSH
40748: LD_INT 0
40750: PUSH
40751: EMPTY
40752: LIST
40753: LIST
40754: PUSH
40755: LD_INT 1
40757: PUSH
40758: LD_INT 1
40760: PUSH
40761: EMPTY
40762: LIST
40763: LIST
40764: PUSH
40765: LD_INT 0
40767: PUSH
40768: LD_INT 1
40770: PUSH
40771: EMPTY
40772: LIST
40773: LIST
40774: PUSH
40775: LD_INT 1
40777: NEG
40778: PUSH
40779: LD_INT 0
40781: PUSH
40782: EMPTY
40783: LIST
40784: LIST
40785: PUSH
40786: LD_INT 1
40788: NEG
40789: PUSH
40790: LD_INT 1
40792: NEG
40793: PUSH
40794: EMPTY
40795: LIST
40796: LIST
40797: PUSH
40798: LD_INT 1
40800: NEG
40801: PUSH
40802: LD_INT 2
40804: NEG
40805: PUSH
40806: EMPTY
40807: LIST
40808: LIST
40809: PUSH
40810: LD_INT 1
40812: PUSH
40813: LD_INT 1
40815: NEG
40816: PUSH
40817: EMPTY
40818: LIST
40819: LIST
40820: PUSH
40821: LD_INT 2
40823: PUSH
40824: LD_INT 0
40826: PUSH
40827: EMPTY
40828: LIST
40829: LIST
40830: PUSH
40831: LD_INT 2
40833: PUSH
40834: LD_INT 1
40836: PUSH
40837: EMPTY
40838: LIST
40839: LIST
40840: PUSH
40841: LD_INT 2
40843: PUSH
40844: LD_INT 2
40846: PUSH
40847: EMPTY
40848: LIST
40849: LIST
40850: PUSH
40851: LD_INT 1
40853: PUSH
40854: LD_INT 2
40856: PUSH
40857: EMPTY
40858: LIST
40859: LIST
40860: PUSH
40861: LD_INT 0
40863: PUSH
40864: LD_INT 2
40866: PUSH
40867: EMPTY
40868: LIST
40869: LIST
40870: PUSH
40871: LD_INT 1
40873: NEG
40874: PUSH
40875: LD_INT 1
40877: PUSH
40878: EMPTY
40879: LIST
40880: LIST
40881: PUSH
40882: LD_INT 2
40884: NEG
40885: PUSH
40886: LD_INT 1
40888: NEG
40889: PUSH
40890: EMPTY
40891: LIST
40892: LIST
40893: PUSH
40894: LD_INT 2
40896: NEG
40897: PUSH
40898: LD_INT 2
40900: NEG
40901: PUSH
40902: EMPTY
40903: LIST
40904: LIST
40905: PUSH
40906: LD_INT 2
40908: NEG
40909: PUSH
40910: LD_INT 3
40912: NEG
40913: PUSH
40914: EMPTY
40915: LIST
40916: LIST
40917: PUSH
40918: LD_INT 2
40920: PUSH
40921: LD_INT 1
40923: NEG
40924: PUSH
40925: EMPTY
40926: LIST
40927: LIST
40928: PUSH
40929: LD_INT 3
40931: PUSH
40932: LD_INT 1
40934: PUSH
40935: EMPTY
40936: LIST
40937: LIST
40938: PUSH
40939: LD_INT 1
40941: PUSH
40942: LD_INT 3
40944: PUSH
40945: EMPTY
40946: LIST
40947: LIST
40948: PUSH
40949: LD_INT 1
40951: NEG
40952: PUSH
40953: LD_INT 2
40955: PUSH
40956: EMPTY
40957: LIST
40958: LIST
40959: PUSH
40960: LD_INT 3
40962: NEG
40963: PUSH
40964: LD_INT 2
40966: NEG
40967: PUSH
40968: EMPTY
40969: LIST
40970: LIST
40971: PUSH
40972: EMPTY
40973: LIST
40974: LIST
40975: LIST
40976: LIST
40977: LIST
40978: LIST
40979: LIST
40980: LIST
40981: LIST
40982: LIST
40983: LIST
40984: LIST
40985: LIST
40986: LIST
40987: LIST
40988: LIST
40989: LIST
40990: LIST
40991: LIST
40992: LIST
40993: LIST
40994: LIST
40995: LIST
40996: ST_TO_ADDR
// Factory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
40997: LD_ADDR_VAR 0 32
41001: PUSH
41002: LD_INT 0
41004: PUSH
41005: LD_INT 0
41007: PUSH
41008: EMPTY
41009: LIST
41010: LIST
41011: PUSH
41012: LD_INT 0
41014: PUSH
41015: LD_INT 1
41017: NEG
41018: PUSH
41019: EMPTY
41020: LIST
41021: LIST
41022: PUSH
41023: LD_INT 1
41025: PUSH
41026: LD_INT 0
41028: PUSH
41029: EMPTY
41030: LIST
41031: LIST
41032: PUSH
41033: LD_INT 1
41035: PUSH
41036: LD_INT 1
41038: PUSH
41039: EMPTY
41040: LIST
41041: LIST
41042: PUSH
41043: LD_INT 0
41045: PUSH
41046: LD_INT 1
41048: PUSH
41049: EMPTY
41050: LIST
41051: LIST
41052: PUSH
41053: LD_INT 1
41055: NEG
41056: PUSH
41057: LD_INT 0
41059: PUSH
41060: EMPTY
41061: LIST
41062: LIST
41063: PUSH
41064: LD_INT 1
41066: NEG
41067: PUSH
41068: LD_INT 1
41070: NEG
41071: PUSH
41072: EMPTY
41073: LIST
41074: LIST
41075: PUSH
41076: LD_INT 1
41078: NEG
41079: PUSH
41080: LD_INT 2
41082: NEG
41083: PUSH
41084: EMPTY
41085: LIST
41086: LIST
41087: PUSH
41088: LD_INT 0
41090: PUSH
41091: LD_INT 2
41093: NEG
41094: PUSH
41095: EMPTY
41096: LIST
41097: LIST
41098: PUSH
41099: LD_INT 1
41101: PUSH
41102: LD_INT 1
41104: NEG
41105: PUSH
41106: EMPTY
41107: LIST
41108: LIST
41109: PUSH
41110: LD_INT 2
41112: PUSH
41113: LD_INT 1
41115: PUSH
41116: EMPTY
41117: LIST
41118: LIST
41119: PUSH
41120: LD_INT 2
41122: PUSH
41123: LD_INT 2
41125: PUSH
41126: EMPTY
41127: LIST
41128: LIST
41129: PUSH
41130: LD_INT 1
41132: PUSH
41133: LD_INT 2
41135: PUSH
41136: EMPTY
41137: LIST
41138: LIST
41139: PUSH
41140: LD_INT 0
41142: PUSH
41143: LD_INT 2
41145: PUSH
41146: EMPTY
41147: LIST
41148: LIST
41149: PUSH
41150: LD_INT 1
41152: NEG
41153: PUSH
41154: LD_INT 1
41156: PUSH
41157: EMPTY
41158: LIST
41159: LIST
41160: PUSH
41161: LD_INT 2
41163: NEG
41164: PUSH
41165: LD_INT 0
41167: PUSH
41168: EMPTY
41169: LIST
41170: LIST
41171: PUSH
41172: LD_INT 2
41174: NEG
41175: PUSH
41176: LD_INT 1
41178: NEG
41179: PUSH
41180: EMPTY
41181: LIST
41182: LIST
41183: PUSH
41184: LD_INT 1
41186: NEG
41187: PUSH
41188: LD_INT 3
41190: NEG
41191: PUSH
41192: EMPTY
41193: LIST
41194: LIST
41195: PUSH
41196: LD_INT 1
41198: PUSH
41199: LD_INT 2
41201: NEG
41202: PUSH
41203: EMPTY
41204: LIST
41205: LIST
41206: PUSH
41207: LD_INT 3
41209: PUSH
41210: LD_INT 2
41212: PUSH
41213: EMPTY
41214: LIST
41215: LIST
41216: PUSH
41217: LD_INT 2
41219: PUSH
41220: LD_INT 3
41222: PUSH
41223: EMPTY
41224: LIST
41225: LIST
41226: PUSH
41227: LD_INT 2
41229: NEG
41230: PUSH
41231: LD_INT 1
41233: PUSH
41234: EMPTY
41235: LIST
41236: LIST
41237: PUSH
41238: LD_INT 3
41240: NEG
41241: PUSH
41242: LD_INT 1
41244: NEG
41245: PUSH
41246: EMPTY
41247: LIST
41248: LIST
41249: PUSH
41250: EMPTY
41251: LIST
41252: LIST
41253: LIST
41254: LIST
41255: LIST
41256: LIST
41257: LIST
41258: LIST
41259: LIST
41260: LIST
41261: LIST
41262: LIST
41263: LIST
41264: LIST
41265: LIST
41266: LIST
41267: LIST
41268: LIST
41269: LIST
41270: LIST
41271: LIST
41272: LIST
41273: LIST
41274: ST_TO_ADDR
// Factory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
41275: LD_ADDR_VAR 0 33
41279: PUSH
41280: LD_INT 0
41282: PUSH
41283: LD_INT 0
41285: PUSH
41286: EMPTY
41287: LIST
41288: LIST
41289: PUSH
41290: LD_INT 0
41292: PUSH
41293: LD_INT 1
41295: NEG
41296: PUSH
41297: EMPTY
41298: LIST
41299: LIST
41300: PUSH
41301: LD_INT 1
41303: PUSH
41304: LD_INT 0
41306: PUSH
41307: EMPTY
41308: LIST
41309: LIST
41310: PUSH
41311: LD_INT 1
41313: PUSH
41314: LD_INT 1
41316: PUSH
41317: EMPTY
41318: LIST
41319: LIST
41320: PUSH
41321: LD_INT 0
41323: PUSH
41324: LD_INT 1
41326: PUSH
41327: EMPTY
41328: LIST
41329: LIST
41330: PUSH
41331: LD_INT 1
41333: NEG
41334: PUSH
41335: LD_INT 0
41337: PUSH
41338: EMPTY
41339: LIST
41340: LIST
41341: PUSH
41342: LD_INT 1
41344: NEG
41345: PUSH
41346: LD_INT 1
41348: NEG
41349: PUSH
41350: EMPTY
41351: LIST
41352: LIST
41353: PUSH
41354: LD_INT 1
41356: NEG
41357: PUSH
41358: LD_INT 2
41360: NEG
41361: PUSH
41362: EMPTY
41363: LIST
41364: LIST
41365: PUSH
41366: LD_INT 1
41368: PUSH
41369: LD_INT 1
41371: NEG
41372: PUSH
41373: EMPTY
41374: LIST
41375: LIST
41376: PUSH
41377: LD_INT 2
41379: PUSH
41380: LD_INT 0
41382: PUSH
41383: EMPTY
41384: LIST
41385: LIST
41386: PUSH
41387: LD_INT 2
41389: PUSH
41390: LD_INT 1
41392: PUSH
41393: EMPTY
41394: LIST
41395: LIST
41396: PUSH
41397: LD_INT 1
41399: PUSH
41400: LD_INT 2
41402: PUSH
41403: EMPTY
41404: LIST
41405: LIST
41406: PUSH
41407: LD_INT 0
41409: PUSH
41410: LD_INT 2
41412: PUSH
41413: EMPTY
41414: LIST
41415: LIST
41416: PUSH
41417: LD_INT 1
41419: NEG
41420: PUSH
41421: LD_INT 1
41423: PUSH
41424: EMPTY
41425: LIST
41426: LIST
41427: PUSH
41428: LD_INT 2
41430: NEG
41431: PUSH
41432: LD_INT 0
41434: PUSH
41435: EMPTY
41436: LIST
41437: LIST
41438: PUSH
41439: LD_INT 2
41441: NEG
41442: PUSH
41443: LD_INT 1
41445: NEG
41446: PUSH
41447: EMPTY
41448: LIST
41449: LIST
41450: PUSH
41451: LD_INT 2
41453: NEG
41454: PUSH
41455: LD_INT 2
41457: NEG
41458: PUSH
41459: EMPTY
41460: LIST
41461: LIST
41462: PUSH
41463: LD_INT 2
41465: NEG
41466: PUSH
41467: LD_INT 3
41469: NEG
41470: PUSH
41471: EMPTY
41472: LIST
41473: LIST
41474: PUSH
41475: LD_INT 2
41477: PUSH
41478: LD_INT 1
41480: NEG
41481: PUSH
41482: EMPTY
41483: LIST
41484: LIST
41485: PUSH
41486: LD_INT 3
41488: PUSH
41489: LD_INT 1
41491: PUSH
41492: EMPTY
41493: LIST
41494: LIST
41495: PUSH
41496: LD_INT 1
41498: PUSH
41499: LD_INT 3
41501: PUSH
41502: EMPTY
41503: LIST
41504: LIST
41505: PUSH
41506: LD_INT 1
41508: NEG
41509: PUSH
41510: LD_INT 2
41512: PUSH
41513: EMPTY
41514: LIST
41515: LIST
41516: PUSH
41517: LD_INT 3
41519: NEG
41520: PUSH
41521: LD_INT 2
41523: NEG
41524: PUSH
41525: EMPTY
41526: LIST
41527: LIST
41528: PUSH
41529: EMPTY
41530: LIST
41531: LIST
41532: LIST
41533: LIST
41534: LIST
41535: LIST
41536: LIST
41537: LIST
41538: LIST
41539: LIST
41540: LIST
41541: LIST
41542: LIST
41543: LIST
41544: LIST
41545: LIST
41546: LIST
41547: LIST
41548: LIST
41549: LIST
41550: LIST
41551: LIST
41552: LIST
41553: ST_TO_ADDR
// Factory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
41554: LD_ADDR_VAR 0 34
41558: PUSH
41559: LD_INT 0
41561: PUSH
41562: LD_INT 0
41564: PUSH
41565: EMPTY
41566: LIST
41567: LIST
41568: PUSH
41569: LD_INT 0
41571: PUSH
41572: LD_INT 1
41574: NEG
41575: PUSH
41576: EMPTY
41577: LIST
41578: LIST
41579: PUSH
41580: LD_INT 1
41582: PUSH
41583: LD_INT 0
41585: PUSH
41586: EMPTY
41587: LIST
41588: LIST
41589: PUSH
41590: LD_INT 1
41592: PUSH
41593: LD_INT 1
41595: PUSH
41596: EMPTY
41597: LIST
41598: LIST
41599: PUSH
41600: LD_INT 0
41602: PUSH
41603: LD_INT 1
41605: PUSH
41606: EMPTY
41607: LIST
41608: LIST
41609: PUSH
41610: LD_INT 1
41612: NEG
41613: PUSH
41614: LD_INT 0
41616: PUSH
41617: EMPTY
41618: LIST
41619: LIST
41620: PUSH
41621: LD_INT 1
41623: NEG
41624: PUSH
41625: LD_INT 1
41627: NEG
41628: PUSH
41629: EMPTY
41630: LIST
41631: LIST
41632: PUSH
41633: LD_INT 1
41635: NEG
41636: PUSH
41637: LD_INT 2
41639: NEG
41640: PUSH
41641: EMPTY
41642: LIST
41643: LIST
41644: PUSH
41645: LD_INT 0
41647: PUSH
41648: LD_INT 2
41650: NEG
41651: PUSH
41652: EMPTY
41653: LIST
41654: LIST
41655: PUSH
41656: LD_INT 1
41658: PUSH
41659: LD_INT 1
41661: NEG
41662: PUSH
41663: EMPTY
41664: LIST
41665: LIST
41666: PUSH
41667: LD_INT 2
41669: PUSH
41670: LD_INT 1
41672: PUSH
41673: EMPTY
41674: LIST
41675: LIST
41676: PUSH
41677: LD_INT 2
41679: PUSH
41680: LD_INT 2
41682: PUSH
41683: EMPTY
41684: LIST
41685: LIST
41686: PUSH
41687: LD_INT 1
41689: PUSH
41690: LD_INT 2
41692: PUSH
41693: EMPTY
41694: LIST
41695: LIST
41696: PUSH
41697: LD_INT 1
41699: NEG
41700: PUSH
41701: LD_INT 1
41703: PUSH
41704: EMPTY
41705: LIST
41706: LIST
41707: PUSH
41708: LD_INT 2
41710: NEG
41711: PUSH
41712: LD_INT 0
41714: PUSH
41715: EMPTY
41716: LIST
41717: LIST
41718: PUSH
41719: LD_INT 2
41721: NEG
41722: PUSH
41723: LD_INT 1
41725: NEG
41726: PUSH
41727: EMPTY
41728: LIST
41729: LIST
41730: PUSH
41731: LD_INT 2
41733: NEG
41734: PUSH
41735: LD_INT 2
41737: NEG
41738: PUSH
41739: EMPTY
41740: LIST
41741: LIST
41742: PUSH
41743: LD_INT 1
41745: NEG
41746: PUSH
41747: LD_INT 3
41749: NEG
41750: PUSH
41751: EMPTY
41752: LIST
41753: LIST
41754: PUSH
41755: LD_INT 1
41757: PUSH
41758: LD_INT 2
41760: NEG
41761: PUSH
41762: EMPTY
41763: LIST
41764: LIST
41765: PUSH
41766: LD_INT 3
41768: PUSH
41769: LD_INT 2
41771: PUSH
41772: EMPTY
41773: LIST
41774: LIST
41775: PUSH
41776: LD_INT 2
41778: PUSH
41779: LD_INT 3
41781: PUSH
41782: EMPTY
41783: LIST
41784: LIST
41785: PUSH
41786: LD_INT 2
41788: NEG
41789: PUSH
41790: LD_INT 1
41792: PUSH
41793: EMPTY
41794: LIST
41795: LIST
41796: PUSH
41797: LD_INT 3
41799: NEG
41800: PUSH
41801: LD_INT 1
41803: NEG
41804: PUSH
41805: EMPTY
41806: LIST
41807: LIST
41808: PUSH
41809: EMPTY
41810: LIST
41811: LIST
41812: LIST
41813: LIST
41814: LIST
41815: LIST
41816: LIST
41817: LIST
41818: LIST
41819: LIST
41820: LIST
41821: LIST
41822: LIST
41823: LIST
41824: LIST
41825: LIST
41826: LIST
41827: LIST
41828: LIST
41829: LIST
41830: LIST
41831: LIST
41832: LIST
41833: ST_TO_ADDR
// Ext0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
41834: LD_ADDR_VAR 0 35
41838: PUSH
41839: LD_INT 0
41841: PUSH
41842: LD_INT 0
41844: PUSH
41845: EMPTY
41846: LIST
41847: LIST
41848: PUSH
41849: LD_INT 0
41851: PUSH
41852: LD_INT 1
41854: NEG
41855: PUSH
41856: EMPTY
41857: LIST
41858: LIST
41859: PUSH
41860: LD_INT 1
41862: PUSH
41863: LD_INT 0
41865: PUSH
41866: EMPTY
41867: LIST
41868: LIST
41869: PUSH
41870: LD_INT 1
41872: PUSH
41873: LD_INT 1
41875: PUSH
41876: EMPTY
41877: LIST
41878: LIST
41879: PUSH
41880: LD_INT 0
41882: PUSH
41883: LD_INT 1
41885: PUSH
41886: EMPTY
41887: LIST
41888: LIST
41889: PUSH
41890: LD_INT 1
41892: NEG
41893: PUSH
41894: LD_INT 0
41896: PUSH
41897: EMPTY
41898: LIST
41899: LIST
41900: PUSH
41901: LD_INT 1
41903: NEG
41904: PUSH
41905: LD_INT 1
41907: NEG
41908: PUSH
41909: EMPTY
41910: LIST
41911: LIST
41912: PUSH
41913: LD_INT 2
41915: PUSH
41916: LD_INT 1
41918: PUSH
41919: EMPTY
41920: LIST
41921: LIST
41922: PUSH
41923: LD_INT 2
41925: NEG
41926: PUSH
41927: LD_INT 1
41929: NEG
41930: PUSH
41931: EMPTY
41932: LIST
41933: LIST
41934: PUSH
41935: EMPTY
41936: LIST
41937: LIST
41938: LIST
41939: LIST
41940: LIST
41941: LIST
41942: LIST
41943: LIST
41944: LIST
41945: ST_TO_ADDR
// Ext1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
41946: LD_ADDR_VAR 0 36
41950: PUSH
41951: LD_INT 0
41953: PUSH
41954: LD_INT 0
41956: PUSH
41957: EMPTY
41958: LIST
41959: LIST
41960: PUSH
41961: LD_INT 0
41963: PUSH
41964: LD_INT 1
41966: NEG
41967: PUSH
41968: EMPTY
41969: LIST
41970: LIST
41971: PUSH
41972: LD_INT 1
41974: PUSH
41975: LD_INT 0
41977: PUSH
41978: EMPTY
41979: LIST
41980: LIST
41981: PUSH
41982: LD_INT 1
41984: PUSH
41985: LD_INT 1
41987: PUSH
41988: EMPTY
41989: LIST
41990: LIST
41991: PUSH
41992: LD_INT 0
41994: PUSH
41995: LD_INT 1
41997: PUSH
41998: EMPTY
41999: LIST
42000: LIST
42001: PUSH
42002: LD_INT 1
42004: NEG
42005: PUSH
42006: LD_INT 0
42008: PUSH
42009: EMPTY
42010: LIST
42011: LIST
42012: PUSH
42013: LD_INT 1
42015: NEG
42016: PUSH
42017: LD_INT 1
42019: NEG
42020: PUSH
42021: EMPTY
42022: LIST
42023: LIST
42024: PUSH
42025: LD_INT 1
42027: NEG
42028: PUSH
42029: LD_INT 2
42031: NEG
42032: PUSH
42033: EMPTY
42034: LIST
42035: LIST
42036: PUSH
42037: LD_INT 1
42039: PUSH
42040: LD_INT 2
42042: PUSH
42043: EMPTY
42044: LIST
42045: LIST
42046: PUSH
42047: EMPTY
42048: LIST
42049: LIST
42050: LIST
42051: LIST
42052: LIST
42053: LIST
42054: LIST
42055: LIST
42056: LIST
42057: ST_TO_ADDR
// Ext2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
42058: LD_ADDR_VAR 0 37
42062: PUSH
42063: LD_INT 0
42065: PUSH
42066: LD_INT 0
42068: PUSH
42069: EMPTY
42070: LIST
42071: LIST
42072: PUSH
42073: LD_INT 0
42075: PUSH
42076: LD_INT 1
42078: NEG
42079: PUSH
42080: EMPTY
42081: LIST
42082: LIST
42083: PUSH
42084: LD_INT 1
42086: PUSH
42087: LD_INT 0
42089: PUSH
42090: EMPTY
42091: LIST
42092: LIST
42093: PUSH
42094: LD_INT 1
42096: PUSH
42097: LD_INT 1
42099: PUSH
42100: EMPTY
42101: LIST
42102: LIST
42103: PUSH
42104: LD_INT 0
42106: PUSH
42107: LD_INT 1
42109: PUSH
42110: EMPTY
42111: LIST
42112: LIST
42113: PUSH
42114: LD_INT 1
42116: NEG
42117: PUSH
42118: LD_INT 0
42120: PUSH
42121: EMPTY
42122: LIST
42123: LIST
42124: PUSH
42125: LD_INT 1
42127: NEG
42128: PUSH
42129: LD_INT 1
42131: NEG
42132: PUSH
42133: EMPTY
42134: LIST
42135: LIST
42136: PUSH
42137: LD_INT 1
42139: PUSH
42140: LD_INT 1
42142: NEG
42143: PUSH
42144: EMPTY
42145: LIST
42146: LIST
42147: PUSH
42148: LD_INT 1
42150: NEG
42151: PUSH
42152: LD_INT 1
42154: PUSH
42155: EMPTY
42156: LIST
42157: LIST
42158: PUSH
42159: EMPTY
42160: LIST
42161: LIST
42162: LIST
42163: LIST
42164: LIST
42165: LIST
42166: LIST
42167: LIST
42168: LIST
42169: ST_TO_ADDR
// Ext3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
42170: LD_ADDR_VAR 0 38
42174: PUSH
42175: LD_INT 0
42177: PUSH
42178: LD_INT 0
42180: PUSH
42181: EMPTY
42182: LIST
42183: LIST
42184: PUSH
42185: LD_INT 0
42187: PUSH
42188: LD_INT 1
42190: NEG
42191: PUSH
42192: EMPTY
42193: LIST
42194: LIST
42195: PUSH
42196: LD_INT 1
42198: PUSH
42199: LD_INT 0
42201: PUSH
42202: EMPTY
42203: LIST
42204: LIST
42205: PUSH
42206: LD_INT 1
42208: PUSH
42209: LD_INT 1
42211: PUSH
42212: EMPTY
42213: LIST
42214: LIST
42215: PUSH
42216: LD_INT 0
42218: PUSH
42219: LD_INT 1
42221: PUSH
42222: EMPTY
42223: LIST
42224: LIST
42225: PUSH
42226: LD_INT 1
42228: NEG
42229: PUSH
42230: LD_INT 0
42232: PUSH
42233: EMPTY
42234: LIST
42235: LIST
42236: PUSH
42237: LD_INT 1
42239: NEG
42240: PUSH
42241: LD_INT 1
42243: NEG
42244: PUSH
42245: EMPTY
42246: LIST
42247: LIST
42248: PUSH
42249: LD_INT 2
42251: PUSH
42252: LD_INT 1
42254: PUSH
42255: EMPTY
42256: LIST
42257: LIST
42258: PUSH
42259: LD_INT 2
42261: NEG
42262: PUSH
42263: LD_INT 1
42265: NEG
42266: PUSH
42267: EMPTY
42268: LIST
42269: LIST
42270: PUSH
42271: EMPTY
42272: LIST
42273: LIST
42274: LIST
42275: LIST
42276: LIST
42277: LIST
42278: LIST
42279: LIST
42280: LIST
42281: ST_TO_ADDR
// Ext4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
42282: LD_ADDR_VAR 0 39
42286: PUSH
42287: LD_INT 0
42289: PUSH
42290: LD_INT 0
42292: PUSH
42293: EMPTY
42294: LIST
42295: LIST
42296: PUSH
42297: LD_INT 0
42299: PUSH
42300: LD_INT 1
42302: NEG
42303: PUSH
42304: EMPTY
42305: LIST
42306: LIST
42307: PUSH
42308: LD_INT 1
42310: PUSH
42311: LD_INT 0
42313: PUSH
42314: EMPTY
42315: LIST
42316: LIST
42317: PUSH
42318: LD_INT 1
42320: PUSH
42321: LD_INT 1
42323: PUSH
42324: EMPTY
42325: LIST
42326: LIST
42327: PUSH
42328: LD_INT 0
42330: PUSH
42331: LD_INT 1
42333: PUSH
42334: EMPTY
42335: LIST
42336: LIST
42337: PUSH
42338: LD_INT 1
42340: NEG
42341: PUSH
42342: LD_INT 0
42344: PUSH
42345: EMPTY
42346: LIST
42347: LIST
42348: PUSH
42349: LD_INT 1
42351: NEG
42352: PUSH
42353: LD_INT 1
42355: NEG
42356: PUSH
42357: EMPTY
42358: LIST
42359: LIST
42360: PUSH
42361: LD_INT 1
42363: NEG
42364: PUSH
42365: LD_INT 2
42367: NEG
42368: PUSH
42369: EMPTY
42370: LIST
42371: LIST
42372: PUSH
42373: LD_INT 1
42375: PUSH
42376: LD_INT 2
42378: PUSH
42379: EMPTY
42380: LIST
42381: LIST
42382: PUSH
42383: EMPTY
42384: LIST
42385: LIST
42386: LIST
42387: LIST
42388: LIST
42389: LIST
42390: LIST
42391: LIST
42392: LIST
42393: ST_TO_ADDR
// Ext5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
42394: LD_ADDR_VAR 0 40
42398: PUSH
42399: LD_INT 0
42401: PUSH
42402: LD_INT 0
42404: PUSH
42405: EMPTY
42406: LIST
42407: LIST
42408: PUSH
42409: LD_INT 0
42411: PUSH
42412: LD_INT 1
42414: NEG
42415: PUSH
42416: EMPTY
42417: LIST
42418: LIST
42419: PUSH
42420: LD_INT 1
42422: PUSH
42423: LD_INT 0
42425: PUSH
42426: EMPTY
42427: LIST
42428: LIST
42429: PUSH
42430: LD_INT 1
42432: PUSH
42433: LD_INT 1
42435: PUSH
42436: EMPTY
42437: LIST
42438: LIST
42439: PUSH
42440: LD_INT 0
42442: PUSH
42443: LD_INT 1
42445: PUSH
42446: EMPTY
42447: LIST
42448: LIST
42449: PUSH
42450: LD_INT 1
42452: NEG
42453: PUSH
42454: LD_INT 0
42456: PUSH
42457: EMPTY
42458: LIST
42459: LIST
42460: PUSH
42461: LD_INT 1
42463: NEG
42464: PUSH
42465: LD_INT 1
42467: NEG
42468: PUSH
42469: EMPTY
42470: LIST
42471: LIST
42472: PUSH
42473: LD_INT 1
42475: PUSH
42476: LD_INT 1
42478: NEG
42479: PUSH
42480: EMPTY
42481: LIST
42482: LIST
42483: PUSH
42484: LD_INT 1
42486: NEG
42487: PUSH
42488: LD_INT 1
42490: PUSH
42491: EMPTY
42492: LIST
42493: LIST
42494: PUSH
42495: EMPTY
42496: LIST
42497: LIST
42498: LIST
42499: LIST
42500: LIST
42501: LIST
42502: LIST
42503: LIST
42504: LIST
42505: ST_TO_ADDR
// Lab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42506: LD_ADDR_VAR 0 41
42510: PUSH
42511: LD_INT 0
42513: PUSH
42514: LD_INT 0
42516: PUSH
42517: EMPTY
42518: LIST
42519: LIST
42520: PUSH
42521: LD_INT 0
42523: PUSH
42524: LD_INT 1
42526: NEG
42527: PUSH
42528: EMPTY
42529: LIST
42530: LIST
42531: PUSH
42532: LD_INT 1
42534: PUSH
42535: LD_INT 0
42537: PUSH
42538: EMPTY
42539: LIST
42540: LIST
42541: PUSH
42542: LD_INT 1
42544: PUSH
42545: LD_INT 1
42547: PUSH
42548: EMPTY
42549: LIST
42550: LIST
42551: PUSH
42552: LD_INT 0
42554: PUSH
42555: LD_INT 1
42557: PUSH
42558: EMPTY
42559: LIST
42560: LIST
42561: PUSH
42562: LD_INT 1
42564: NEG
42565: PUSH
42566: LD_INT 0
42568: PUSH
42569: EMPTY
42570: LIST
42571: LIST
42572: PUSH
42573: LD_INT 1
42575: NEG
42576: PUSH
42577: LD_INT 1
42579: NEG
42580: PUSH
42581: EMPTY
42582: LIST
42583: LIST
42584: PUSH
42585: LD_INT 1
42587: NEG
42588: PUSH
42589: LD_INT 2
42591: NEG
42592: PUSH
42593: EMPTY
42594: LIST
42595: LIST
42596: PUSH
42597: LD_INT 1
42599: PUSH
42600: LD_INT 1
42602: NEG
42603: PUSH
42604: EMPTY
42605: LIST
42606: LIST
42607: PUSH
42608: LD_INT 2
42610: PUSH
42611: LD_INT 0
42613: PUSH
42614: EMPTY
42615: LIST
42616: LIST
42617: PUSH
42618: LD_INT 2
42620: PUSH
42621: LD_INT 1
42623: PUSH
42624: EMPTY
42625: LIST
42626: LIST
42627: PUSH
42628: LD_INT 2
42630: PUSH
42631: LD_INT 2
42633: PUSH
42634: EMPTY
42635: LIST
42636: LIST
42637: PUSH
42638: LD_INT 1
42640: PUSH
42641: LD_INT 2
42643: PUSH
42644: EMPTY
42645: LIST
42646: LIST
42647: PUSH
42648: LD_INT 1
42650: NEG
42651: PUSH
42652: LD_INT 1
42654: PUSH
42655: EMPTY
42656: LIST
42657: LIST
42658: PUSH
42659: LD_INT 2
42661: NEG
42662: PUSH
42663: LD_INT 0
42665: PUSH
42666: EMPTY
42667: LIST
42668: LIST
42669: PUSH
42670: LD_INT 2
42672: NEG
42673: PUSH
42674: LD_INT 1
42676: NEG
42677: PUSH
42678: EMPTY
42679: LIST
42680: LIST
42681: PUSH
42682: LD_INT 2
42684: NEG
42685: PUSH
42686: LD_INT 2
42688: NEG
42689: PUSH
42690: EMPTY
42691: LIST
42692: LIST
42693: PUSH
42694: LD_INT 2
42696: NEG
42697: PUSH
42698: LD_INT 3
42700: NEG
42701: PUSH
42702: EMPTY
42703: LIST
42704: LIST
42705: PUSH
42706: LD_INT 2
42708: PUSH
42709: LD_INT 1
42711: NEG
42712: PUSH
42713: EMPTY
42714: LIST
42715: LIST
42716: PUSH
42717: LD_INT 3
42719: PUSH
42720: LD_INT 0
42722: PUSH
42723: EMPTY
42724: LIST
42725: LIST
42726: PUSH
42727: LD_INT 3
42729: PUSH
42730: LD_INT 1
42732: PUSH
42733: EMPTY
42734: LIST
42735: LIST
42736: PUSH
42737: LD_INT 3
42739: PUSH
42740: LD_INT 2
42742: PUSH
42743: EMPTY
42744: LIST
42745: LIST
42746: PUSH
42747: LD_INT 3
42749: PUSH
42750: LD_INT 3
42752: PUSH
42753: EMPTY
42754: LIST
42755: LIST
42756: PUSH
42757: LD_INT 2
42759: PUSH
42760: LD_INT 3
42762: PUSH
42763: EMPTY
42764: LIST
42765: LIST
42766: PUSH
42767: LD_INT 2
42769: NEG
42770: PUSH
42771: LD_INT 1
42773: PUSH
42774: EMPTY
42775: LIST
42776: LIST
42777: PUSH
42778: LD_INT 3
42780: NEG
42781: PUSH
42782: LD_INT 0
42784: PUSH
42785: EMPTY
42786: LIST
42787: LIST
42788: PUSH
42789: LD_INT 3
42791: NEG
42792: PUSH
42793: LD_INT 1
42795: NEG
42796: PUSH
42797: EMPTY
42798: LIST
42799: LIST
42800: PUSH
42801: LD_INT 3
42803: NEG
42804: PUSH
42805: LD_INT 2
42807: NEG
42808: PUSH
42809: EMPTY
42810: LIST
42811: LIST
42812: PUSH
42813: LD_INT 3
42815: NEG
42816: PUSH
42817: LD_INT 3
42819: NEG
42820: PUSH
42821: EMPTY
42822: LIST
42823: LIST
42824: PUSH
42825: EMPTY
42826: LIST
42827: LIST
42828: LIST
42829: LIST
42830: LIST
42831: LIST
42832: LIST
42833: LIST
42834: LIST
42835: LIST
42836: LIST
42837: LIST
42838: LIST
42839: LIST
42840: LIST
42841: LIST
42842: LIST
42843: LIST
42844: LIST
42845: LIST
42846: LIST
42847: LIST
42848: LIST
42849: LIST
42850: LIST
42851: LIST
42852: LIST
42853: LIST
42854: LIST
42855: ST_TO_ADDR
// Lab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42856: LD_ADDR_VAR 0 42
42860: PUSH
42861: LD_INT 0
42863: PUSH
42864: LD_INT 0
42866: PUSH
42867: EMPTY
42868: LIST
42869: LIST
42870: PUSH
42871: LD_INT 0
42873: PUSH
42874: LD_INT 1
42876: NEG
42877: PUSH
42878: EMPTY
42879: LIST
42880: LIST
42881: PUSH
42882: LD_INT 1
42884: PUSH
42885: LD_INT 0
42887: PUSH
42888: EMPTY
42889: LIST
42890: LIST
42891: PUSH
42892: LD_INT 1
42894: PUSH
42895: LD_INT 1
42897: PUSH
42898: EMPTY
42899: LIST
42900: LIST
42901: PUSH
42902: LD_INT 0
42904: PUSH
42905: LD_INT 1
42907: PUSH
42908: EMPTY
42909: LIST
42910: LIST
42911: PUSH
42912: LD_INT 1
42914: NEG
42915: PUSH
42916: LD_INT 0
42918: PUSH
42919: EMPTY
42920: LIST
42921: LIST
42922: PUSH
42923: LD_INT 1
42925: NEG
42926: PUSH
42927: LD_INT 1
42929: NEG
42930: PUSH
42931: EMPTY
42932: LIST
42933: LIST
42934: PUSH
42935: LD_INT 1
42937: NEG
42938: PUSH
42939: LD_INT 2
42941: NEG
42942: PUSH
42943: EMPTY
42944: LIST
42945: LIST
42946: PUSH
42947: LD_INT 0
42949: PUSH
42950: LD_INT 2
42952: NEG
42953: PUSH
42954: EMPTY
42955: LIST
42956: LIST
42957: PUSH
42958: LD_INT 1
42960: PUSH
42961: LD_INT 1
42963: NEG
42964: PUSH
42965: EMPTY
42966: LIST
42967: LIST
42968: PUSH
42969: LD_INT 2
42971: PUSH
42972: LD_INT 1
42974: PUSH
42975: EMPTY
42976: LIST
42977: LIST
42978: PUSH
42979: LD_INT 2
42981: PUSH
42982: LD_INT 2
42984: PUSH
42985: EMPTY
42986: LIST
42987: LIST
42988: PUSH
42989: LD_INT 1
42991: PUSH
42992: LD_INT 2
42994: PUSH
42995: EMPTY
42996: LIST
42997: LIST
42998: PUSH
42999: LD_INT 0
43001: PUSH
43002: LD_INT 2
43004: PUSH
43005: EMPTY
43006: LIST
43007: LIST
43008: PUSH
43009: LD_INT 1
43011: NEG
43012: PUSH
43013: LD_INT 1
43015: PUSH
43016: EMPTY
43017: LIST
43018: LIST
43019: PUSH
43020: LD_INT 2
43022: NEG
43023: PUSH
43024: LD_INT 1
43026: NEG
43027: PUSH
43028: EMPTY
43029: LIST
43030: LIST
43031: PUSH
43032: LD_INT 2
43034: NEG
43035: PUSH
43036: LD_INT 2
43038: NEG
43039: PUSH
43040: EMPTY
43041: LIST
43042: LIST
43043: PUSH
43044: LD_INT 2
43046: NEG
43047: PUSH
43048: LD_INT 3
43050: NEG
43051: PUSH
43052: EMPTY
43053: LIST
43054: LIST
43055: PUSH
43056: LD_INT 1
43058: NEG
43059: PUSH
43060: LD_INT 3
43062: NEG
43063: PUSH
43064: EMPTY
43065: LIST
43066: LIST
43067: PUSH
43068: LD_INT 0
43070: PUSH
43071: LD_INT 3
43073: NEG
43074: PUSH
43075: EMPTY
43076: LIST
43077: LIST
43078: PUSH
43079: LD_INT 1
43081: PUSH
43082: LD_INT 2
43084: NEG
43085: PUSH
43086: EMPTY
43087: LIST
43088: LIST
43089: PUSH
43090: LD_INT 3
43092: PUSH
43093: LD_INT 2
43095: PUSH
43096: EMPTY
43097: LIST
43098: LIST
43099: PUSH
43100: LD_INT 3
43102: PUSH
43103: LD_INT 3
43105: PUSH
43106: EMPTY
43107: LIST
43108: LIST
43109: PUSH
43110: LD_INT 2
43112: PUSH
43113: LD_INT 3
43115: PUSH
43116: EMPTY
43117: LIST
43118: LIST
43119: PUSH
43120: LD_INT 1
43122: PUSH
43123: LD_INT 3
43125: PUSH
43126: EMPTY
43127: LIST
43128: LIST
43129: PUSH
43130: LD_INT 0
43132: PUSH
43133: LD_INT 3
43135: PUSH
43136: EMPTY
43137: LIST
43138: LIST
43139: PUSH
43140: LD_INT 1
43142: NEG
43143: PUSH
43144: LD_INT 2
43146: PUSH
43147: EMPTY
43148: LIST
43149: LIST
43150: PUSH
43151: LD_INT 3
43153: NEG
43154: PUSH
43155: LD_INT 2
43157: NEG
43158: PUSH
43159: EMPTY
43160: LIST
43161: LIST
43162: PUSH
43163: LD_INT 3
43165: NEG
43166: PUSH
43167: LD_INT 3
43169: NEG
43170: PUSH
43171: EMPTY
43172: LIST
43173: LIST
43174: PUSH
43175: EMPTY
43176: LIST
43177: LIST
43178: LIST
43179: LIST
43180: LIST
43181: LIST
43182: LIST
43183: LIST
43184: LIST
43185: LIST
43186: LIST
43187: LIST
43188: LIST
43189: LIST
43190: LIST
43191: LIST
43192: LIST
43193: LIST
43194: LIST
43195: LIST
43196: LIST
43197: LIST
43198: LIST
43199: LIST
43200: LIST
43201: LIST
43202: LIST
43203: LIST
43204: LIST
43205: ST_TO_ADDR
// Lab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43206: LD_ADDR_VAR 0 43
43210: PUSH
43211: LD_INT 0
43213: PUSH
43214: LD_INT 0
43216: PUSH
43217: EMPTY
43218: LIST
43219: LIST
43220: PUSH
43221: LD_INT 0
43223: PUSH
43224: LD_INT 1
43226: NEG
43227: PUSH
43228: EMPTY
43229: LIST
43230: LIST
43231: PUSH
43232: LD_INT 1
43234: PUSH
43235: LD_INT 0
43237: PUSH
43238: EMPTY
43239: LIST
43240: LIST
43241: PUSH
43242: LD_INT 1
43244: PUSH
43245: LD_INT 1
43247: PUSH
43248: EMPTY
43249: LIST
43250: LIST
43251: PUSH
43252: LD_INT 0
43254: PUSH
43255: LD_INT 1
43257: PUSH
43258: EMPTY
43259: LIST
43260: LIST
43261: PUSH
43262: LD_INT 1
43264: NEG
43265: PUSH
43266: LD_INT 0
43268: PUSH
43269: EMPTY
43270: LIST
43271: LIST
43272: PUSH
43273: LD_INT 1
43275: NEG
43276: PUSH
43277: LD_INT 1
43279: NEG
43280: PUSH
43281: EMPTY
43282: LIST
43283: LIST
43284: PUSH
43285: LD_INT 1
43287: NEG
43288: PUSH
43289: LD_INT 2
43291: NEG
43292: PUSH
43293: EMPTY
43294: LIST
43295: LIST
43296: PUSH
43297: LD_INT 0
43299: PUSH
43300: LD_INT 2
43302: NEG
43303: PUSH
43304: EMPTY
43305: LIST
43306: LIST
43307: PUSH
43308: LD_INT 1
43310: PUSH
43311: LD_INT 1
43313: NEG
43314: PUSH
43315: EMPTY
43316: LIST
43317: LIST
43318: PUSH
43319: LD_INT 2
43321: PUSH
43322: LD_INT 0
43324: PUSH
43325: EMPTY
43326: LIST
43327: LIST
43328: PUSH
43329: LD_INT 2
43331: PUSH
43332: LD_INT 1
43334: PUSH
43335: EMPTY
43336: LIST
43337: LIST
43338: PUSH
43339: LD_INT 1
43341: PUSH
43342: LD_INT 2
43344: PUSH
43345: EMPTY
43346: LIST
43347: LIST
43348: PUSH
43349: LD_INT 0
43351: PUSH
43352: LD_INT 2
43354: PUSH
43355: EMPTY
43356: LIST
43357: LIST
43358: PUSH
43359: LD_INT 1
43361: NEG
43362: PUSH
43363: LD_INT 1
43365: PUSH
43366: EMPTY
43367: LIST
43368: LIST
43369: PUSH
43370: LD_INT 2
43372: NEG
43373: PUSH
43374: LD_INT 0
43376: PUSH
43377: EMPTY
43378: LIST
43379: LIST
43380: PUSH
43381: LD_INT 2
43383: NEG
43384: PUSH
43385: LD_INT 1
43387: NEG
43388: PUSH
43389: EMPTY
43390: LIST
43391: LIST
43392: PUSH
43393: LD_INT 1
43395: NEG
43396: PUSH
43397: LD_INT 3
43399: NEG
43400: PUSH
43401: EMPTY
43402: LIST
43403: LIST
43404: PUSH
43405: LD_INT 0
43407: PUSH
43408: LD_INT 3
43410: NEG
43411: PUSH
43412: EMPTY
43413: LIST
43414: LIST
43415: PUSH
43416: LD_INT 1
43418: PUSH
43419: LD_INT 2
43421: NEG
43422: PUSH
43423: EMPTY
43424: LIST
43425: LIST
43426: PUSH
43427: LD_INT 2
43429: PUSH
43430: LD_INT 1
43432: NEG
43433: PUSH
43434: EMPTY
43435: LIST
43436: LIST
43437: PUSH
43438: LD_INT 3
43440: PUSH
43441: LD_INT 0
43443: PUSH
43444: EMPTY
43445: LIST
43446: LIST
43447: PUSH
43448: LD_INT 3
43450: PUSH
43451: LD_INT 1
43453: PUSH
43454: EMPTY
43455: LIST
43456: LIST
43457: PUSH
43458: LD_INT 1
43460: PUSH
43461: LD_INT 3
43463: PUSH
43464: EMPTY
43465: LIST
43466: LIST
43467: PUSH
43468: LD_INT 0
43470: PUSH
43471: LD_INT 3
43473: PUSH
43474: EMPTY
43475: LIST
43476: LIST
43477: PUSH
43478: LD_INT 1
43480: NEG
43481: PUSH
43482: LD_INT 2
43484: PUSH
43485: EMPTY
43486: LIST
43487: LIST
43488: PUSH
43489: LD_INT 2
43491: NEG
43492: PUSH
43493: LD_INT 1
43495: PUSH
43496: EMPTY
43497: LIST
43498: LIST
43499: PUSH
43500: LD_INT 3
43502: NEG
43503: PUSH
43504: LD_INT 0
43506: PUSH
43507: EMPTY
43508: LIST
43509: LIST
43510: PUSH
43511: LD_INT 3
43513: NEG
43514: PUSH
43515: LD_INT 1
43517: NEG
43518: PUSH
43519: EMPTY
43520: LIST
43521: LIST
43522: PUSH
43523: EMPTY
43524: LIST
43525: LIST
43526: LIST
43527: LIST
43528: LIST
43529: LIST
43530: LIST
43531: LIST
43532: LIST
43533: LIST
43534: LIST
43535: LIST
43536: LIST
43537: LIST
43538: LIST
43539: LIST
43540: LIST
43541: LIST
43542: LIST
43543: LIST
43544: LIST
43545: LIST
43546: LIST
43547: LIST
43548: LIST
43549: LIST
43550: LIST
43551: LIST
43552: LIST
43553: ST_TO_ADDR
// Lab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43554: LD_ADDR_VAR 0 44
43558: PUSH
43559: LD_INT 0
43561: PUSH
43562: LD_INT 0
43564: PUSH
43565: EMPTY
43566: LIST
43567: LIST
43568: PUSH
43569: LD_INT 0
43571: PUSH
43572: LD_INT 1
43574: NEG
43575: PUSH
43576: EMPTY
43577: LIST
43578: LIST
43579: PUSH
43580: LD_INT 1
43582: PUSH
43583: LD_INT 0
43585: PUSH
43586: EMPTY
43587: LIST
43588: LIST
43589: PUSH
43590: LD_INT 1
43592: PUSH
43593: LD_INT 1
43595: PUSH
43596: EMPTY
43597: LIST
43598: LIST
43599: PUSH
43600: LD_INT 0
43602: PUSH
43603: LD_INT 1
43605: PUSH
43606: EMPTY
43607: LIST
43608: LIST
43609: PUSH
43610: LD_INT 1
43612: NEG
43613: PUSH
43614: LD_INT 0
43616: PUSH
43617: EMPTY
43618: LIST
43619: LIST
43620: PUSH
43621: LD_INT 1
43623: NEG
43624: PUSH
43625: LD_INT 1
43627: NEG
43628: PUSH
43629: EMPTY
43630: LIST
43631: LIST
43632: PUSH
43633: LD_INT 1
43635: NEG
43636: PUSH
43637: LD_INT 2
43639: NEG
43640: PUSH
43641: EMPTY
43642: LIST
43643: LIST
43644: PUSH
43645: LD_INT 1
43647: PUSH
43648: LD_INT 1
43650: NEG
43651: PUSH
43652: EMPTY
43653: LIST
43654: LIST
43655: PUSH
43656: LD_INT 2
43658: PUSH
43659: LD_INT 0
43661: PUSH
43662: EMPTY
43663: LIST
43664: LIST
43665: PUSH
43666: LD_INT 2
43668: PUSH
43669: LD_INT 1
43671: PUSH
43672: EMPTY
43673: LIST
43674: LIST
43675: PUSH
43676: LD_INT 2
43678: PUSH
43679: LD_INT 2
43681: PUSH
43682: EMPTY
43683: LIST
43684: LIST
43685: PUSH
43686: LD_INT 1
43688: PUSH
43689: LD_INT 2
43691: PUSH
43692: EMPTY
43693: LIST
43694: LIST
43695: PUSH
43696: LD_INT 1
43698: NEG
43699: PUSH
43700: LD_INT 1
43702: PUSH
43703: EMPTY
43704: LIST
43705: LIST
43706: PUSH
43707: LD_INT 2
43709: NEG
43710: PUSH
43711: LD_INT 0
43713: PUSH
43714: EMPTY
43715: LIST
43716: LIST
43717: PUSH
43718: LD_INT 2
43720: NEG
43721: PUSH
43722: LD_INT 1
43724: NEG
43725: PUSH
43726: EMPTY
43727: LIST
43728: LIST
43729: PUSH
43730: LD_INT 2
43732: NEG
43733: PUSH
43734: LD_INT 2
43736: NEG
43737: PUSH
43738: EMPTY
43739: LIST
43740: LIST
43741: PUSH
43742: LD_INT 2
43744: NEG
43745: PUSH
43746: LD_INT 3
43748: NEG
43749: PUSH
43750: EMPTY
43751: LIST
43752: LIST
43753: PUSH
43754: LD_INT 2
43756: PUSH
43757: LD_INT 1
43759: NEG
43760: PUSH
43761: EMPTY
43762: LIST
43763: LIST
43764: PUSH
43765: LD_INT 3
43767: PUSH
43768: LD_INT 0
43770: PUSH
43771: EMPTY
43772: LIST
43773: LIST
43774: PUSH
43775: LD_INT 3
43777: PUSH
43778: LD_INT 1
43780: PUSH
43781: EMPTY
43782: LIST
43783: LIST
43784: PUSH
43785: LD_INT 3
43787: PUSH
43788: LD_INT 2
43790: PUSH
43791: EMPTY
43792: LIST
43793: LIST
43794: PUSH
43795: LD_INT 3
43797: PUSH
43798: LD_INT 3
43800: PUSH
43801: EMPTY
43802: LIST
43803: LIST
43804: PUSH
43805: LD_INT 2
43807: PUSH
43808: LD_INT 3
43810: PUSH
43811: EMPTY
43812: LIST
43813: LIST
43814: PUSH
43815: LD_INT 2
43817: NEG
43818: PUSH
43819: LD_INT 1
43821: PUSH
43822: EMPTY
43823: LIST
43824: LIST
43825: PUSH
43826: LD_INT 3
43828: NEG
43829: PUSH
43830: LD_INT 0
43832: PUSH
43833: EMPTY
43834: LIST
43835: LIST
43836: PUSH
43837: LD_INT 3
43839: NEG
43840: PUSH
43841: LD_INT 1
43843: NEG
43844: PUSH
43845: EMPTY
43846: LIST
43847: LIST
43848: PUSH
43849: LD_INT 3
43851: NEG
43852: PUSH
43853: LD_INT 2
43855: NEG
43856: PUSH
43857: EMPTY
43858: LIST
43859: LIST
43860: PUSH
43861: LD_INT 3
43863: NEG
43864: PUSH
43865: LD_INT 3
43867: NEG
43868: PUSH
43869: EMPTY
43870: LIST
43871: LIST
43872: PUSH
43873: EMPTY
43874: LIST
43875: LIST
43876: LIST
43877: LIST
43878: LIST
43879: LIST
43880: LIST
43881: LIST
43882: LIST
43883: LIST
43884: LIST
43885: LIST
43886: LIST
43887: LIST
43888: LIST
43889: LIST
43890: LIST
43891: LIST
43892: LIST
43893: LIST
43894: LIST
43895: LIST
43896: LIST
43897: LIST
43898: LIST
43899: LIST
43900: LIST
43901: LIST
43902: LIST
43903: ST_TO_ADDR
// Lab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43904: LD_ADDR_VAR 0 45
43908: PUSH
43909: LD_INT 0
43911: PUSH
43912: LD_INT 0
43914: PUSH
43915: EMPTY
43916: LIST
43917: LIST
43918: PUSH
43919: LD_INT 0
43921: PUSH
43922: LD_INT 1
43924: NEG
43925: PUSH
43926: EMPTY
43927: LIST
43928: LIST
43929: PUSH
43930: LD_INT 1
43932: PUSH
43933: LD_INT 0
43935: PUSH
43936: EMPTY
43937: LIST
43938: LIST
43939: PUSH
43940: LD_INT 1
43942: PUSH
43943: LD_INT 1
43945: PUSH
43946: EMPTY
43947: LIST
43948: LIST
43949: PUSH
43950: LD_INT 0
43952: PUSH
43953: LD_INT 1
43955: PUSH
43956: EMPTY
43957: LIST
43958: LIST
43959: PUSH
43960: LD_INT 1
43962: NEG
43963: PUSH
43964: LD_INT 0
43966: PUSH
43967: EMPTY
43968: LIST
43969: LIST
43970: PUSH
43971: LD_INT 1
43973: NEG
43974: PUSH
43975: LD_INT 1
43977: NEG
43978: PUSH
43979: EMPTY
43980: LIST
43981: LIST
43982: PUSH
43983: LD_INT 1
43985: NEG
43986: PUSH
43987: LD_INT 2
43989: NEG
43990: PUSH
43991: EMPTY
43992: LIST
43993: LIST
43994: PUSH
43995: LD_INT 0
43997: PUSH
43998: LD_INT 2
44000: NEG
44001: PUSH
44002: EMPTY
44003: LIST
44004: LIST
44005: PUSH
44006: LD_INT 1
44008: PUSH
44009: LD_INT 1
44011: NEG
44012: PUSH
44013: EMPTY
44014: LIST
44015: LIST
44016: PUSH
44017: LD_INT 2
44019: PUSH
44020: LD_INT 1
44022: PUSH
44023: EMPTY
44024: LIST
44025: LIST
44026: PUSH
44027: LD_INT 2
44029: PUSH
44030: LD_INT 2
44032: PUSH
44033: EMPTY
44034: LIST
44035: LIST
44036: PUSH
44037: LD_INT 1
44039: PUSH
44040: LD_INT 2
44042: PUSH
44043: EMPTY
44044: LIST
44045: LIST
44046: PUSH
44047: LD_INT 0
44049: PUSH
44050: LD_INT 2
44052: PUSH
44053: EMPTY
44054: LIST
44055: LIST
44056: PUSH
44057: LD_INT 1
44059: NEG
44060: PUSH
44061: LD_INT 1
44063: PUSH
44064: EMPTY
44065: LIST
44066: LIST
44067: PUSH
44068: LD_INT 2
44070: NEG
44071: PUSH
44072: LD_INT 1
44074: NEG
44075: PUSH
44076: EMPTY
44077: LIST
44078: LIST
44079: PUSH
44080: LD_INT 2
44082: NEG
44083: PUSH
44084: LD_INT 2
44086: NEG
44087: PUSH
44088: EMPTY
44089: LIST
44090: LIST
44091: PUSH
44092: LD_INT 2
44094: NEG
44095: PUSH
44096: LD_INT 3
44098: NEG
44099: PUSH
44100: EMPTY
44101: LIST
44102: LIST
44103: PUSH
44104: LD_INT 1
44106: NEG
44107: PUSH
44108: LD_INT 3
44110: NEG
44111: PUSH
44112: EMPTY
44113: LIST
44114: LIST
44115: PUSH
44116: LD_INT 0
44118: PUSH
44119: LD_INT 3
44121: NEG
44122: PUSH
44123: EMPTY
44124: LIST
44125: LIST
44126: PUSH
44127: LD_INT 1
44129: PUSH
44130: LD_INT 2
44132: NEG
44133: PUSH
44134: EMPTY
44135: LIST
44136: LIST
44137: PUSH
44138: LD_INT 3
44140: PUSH
44141: LD_INT 2
44143: PUSH
44144: EMPTY
44145: LIST
44146: LIST
44147: PUSH
44148: LD_INT 3
44150: PUSH
44151: LD_INT 3
44153: PUSH
44154: EMPTY
44155: LIST
44156: LIST
44157: PUSH
44158: LD_INT 2
44160: PUSH
44161: LD_INT 3
44163: PUSH
44164: EMPTY
44165: LIST
44166: LIST
44167: PUSH
44168: LD_INT 1
44170: PUSH
44171: LD_INT 3
44173: PUSH
44174: EMPTY
44175: LIST
44176: LIST
44177: PUSH
44178: LD_INT 0
44180: PUSH
44181: LD_INT 3
44183: PUSH
44184: EMPTY
44185: LIST
44186: LIST
44187: PUSH
44188: LD_INT 1
44190: NEG
44191: PUSH
44192: LD_INT 2
44194: PUSH
44195: EMPTY
44196: LIST
44197: LIST
44198: PUSH
44199: LD_INT 3
44201: NEG
44202: PUSH
44203: LD_INT 2
44205: NEG
44206: PUSH
44207: EMPTY
44208: LIST
44209: LIST
44210: PUSH
44211: LD_INT 3
44213: NEG
44214: PUSH
44215: LD_INT 3
44217: NEG
44218: PUSH
44219: EMPTY
44220: LIST
44221: LIST
44222: PUSH
44223: EMPTY
44224: LIST
44225: LIST
44226: LIST
44227: LIST
44228: LIST
44229: LIST
44230: LIST
44231: LIST
44232: LIST
44233: LIST
44234: LIST
44235: LIST
44236: LIST
44237: LIST
44238: LIST
44239: LIST
44240: LIST
44241: LIST
44242: LIST
44243: LIST
44244: LIST
44245: LIST
44246: LIST
44247: LIST
44248: LIST
44249: LIST
44250: LIST
44251: LIST
44252: LIST
44253: ST_TO_ADDR
// Lab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44254: LD_ADDR_VAR 0 46
44258: PUSH
44259: LD_INT 0
44261: PUSH
44262: LD_INT 0
44264: PUSH
44265: EMPTY
44266: LIST
44267: LIST
44268: PUSH
44269: LD_INT 0
44271: PUSH
44272: LD_INT 1
44274: NEG
44275: PUSH
44276: EMPTY
44277: LIST
44278: LIST
44279: PUSH
44280: LD_INT 1
44282: PUSH
44283: LD_INT 0
44285: PUSH
44286: EMPTY
44287: LIST
44288: LIST
44289: PUSH
44290: LD_INT 1
44292: PUSH
44293: LD_INT 1
44295: PUSH
44296: EMPTY
44297: LIST
44298: LIST
44299: PUSH
44300: LD_INT 0
44302: PUSH
44303: LD_INT 1
44305: PUSH
44306: EMPTY
44307: LIST
44308: LIST
44309: PUSH
44310: LD_INT 1
44312: NEG
44313: PUSH
44314: LD_INT 0
44316: PUSH
44317: EMPTY
44318: LIST
44319: LIST
44320: PUSH
44321: LD_INT 1
44323: NEG
44324: PUSH
44325: LD_INT 1
44327: NEG
44328: PUSH
44329: EMPTY
44330: LIST
44331: LIST
44332: PUSH
44333: LD_INT 1
44335: NEG
44336: PUSH
44337: LD_INT 2
44339: NEG
44340: PUSH
44341: EMPTY
44342: LIST
44343: LIST
44344: PUSH
44345: LD_INT 0
44347: PUSH
44348: LD_INT 2
44350: NEG
44351: PUSH
44352: EMPTY
44353: LIST
44354: LIST
44355: PUSH
44356: LD_INT 1
44358: PUSH
44359: LD_INT 1
44361: NEG
44362: PUSH
44363: EMPTY
44364: LIST
44365: LIST
44366: PUSH
44367: LD_INT 2
44369: PUSH
44370: LD_INT 0
44372: PUSH
44373: EMPTY
44374: LIST
44375: LIST
44376: PUSH
44377: LD_INT 2
44379: PUSH
44380: LD_INT 1
44382: PUSH
44383: EMPTY
44384: LIST
44385: LIST
44386: PUSH
44387: LD_INT 1
44389: PUSH
44390: LD_INT 2
44392: PUSH
44393: EMPTY
44394: LIST
44395: LIST
44396: PUSH
44397: LD_INT 0
44399: PUSH
44400: LD_INT 2
44402: PUSH
44403: EMPTY
44404: LIST
44405: LIST
44406: PUSH
44407: LD_INT 1
44409: NEG
44410: PUSH
44411: LD_INT 1
44413: PUSH
44414: EMPTY
44415: LIST
44416: LIST
44417: PUSH
44418: LD_INT 2
44420: NEG
44421: PUSH
44422: LD_INT 0
44424: PUSH
44425: EMPTY
44426: LIST
44427: LIST
44428: PUSH
44429: LD_INT 2
44431: NEG
44432: PUSH
44433: LD_INT 1
44435: NEG
44436: PUSH
44437: EMPTY
44438: LIST
44439: LIST
44440: PUSH
44441: LD_INT 1
44443: NEG
44444: PUSH
44445: LD_INT 3
44447: NEG
44448: PUSH
44449: EMPTY
44450: LIST
44451: LIST
44452: PUSH
44453: LD_INT 0
44455: PUSH
44456: LD_INT 3
44458: NEG
44459: PUSH
44460: EMPTY
44461: LIST
44462: LIST
44463: PUSH
44464: LD_INT 1
44466: PUSH
44467: LD_INT 2
44469: NEG
44470: PUSH
44471: EMPTY
44472: LIST
44473: LIST
44474: PUSH
44475: LD_INT 2
44477: PUSH
44478: LD_INT 1
44480: NEG
44481: PUSH
44482: EMPTY
44483: LIST
44484: LIST
44485: PUSH
44486: LD_INT 3
44488: PUSH
44489: LD_INT 0
44491: PUSH
44492: EMPTY
44493: LIST
44494: LIST
44495: PUSH
44496: LD_INT 3
44498: PUSH
44499: LD_INT 1
44501: PUSH
44502: EMPTY
44503: LIST
44504: LIST
44505: PUSH
44506: LD_INT 1
44508: PUSH
44509: LD_INT 3
44511: PUSH
44512: EMPTY
44513: LIST
44514: LIST
44515: PUSH
44516: LD_INT 0
44518: PUSH
44519: LD_INT 3
44521: PUSH
44522: EMPTY
44523: LIST
44524: LIST
44525: PUSH
44526: LD_INT 1
44528: NEG
44529: PUSH
44530: LD_INT 2
44532: PUSH
44533: EMPTY
44534: LIST
44535: LIST
44536: PUSH
44537: LD_INT 2
44539: NEG
44540: PUSH
44541: LD_INT 1
44543: PUSH
44544: EMPTY
44545: LIST
44546: LIST
44547: PUSH
44548: LD_INT 3
44550: NEG
44551: PUSH
44552: LD_INT 0
44554: PUSH
44555: EMPTY
44556: LIST
44557: LIST
44558: PUSH
44559: LD_INT 3
44561: NEG
44562: PUSH
44563: LD_INT 1
44565: NEG
44566: PUSH
44567: EMPTY
44568: LIST
44569: LIST
44570: PUSH
44571: EMPTY
44572: LIST
44573: LIST
44574: LIST
44575: LIST
44576: LIST
44577: LIST
44578: LIST
44579: LIST
44580: LIST
44581: LIST
44582: LIST
44583: LIST
44584: LIST
44585: LIST
44586: LIST
44587: LIST
44588: LIST
44589: LIST
44590: LIST
44591: LIST
44592: LIST
44593: LIST
44594: LIST
44595: LIST
44596: LIST
44597: LIST
44598: LIST
44599: LIST
44600: LIST
44601: ST_TO_ADDR
// ControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44602: LD_ADDR_VAR 0 47
44606: PUSH
44607: LD_INT 0
44609: PUSH
44610: LD_INT 0
44612: PUSH
44613: EMPTY
44614: LIST
44615: LIST
44616: PUSH
44617: LD_INT 0
44619: PUSH
44620: LD_INT 1
44622: NEG
44623: PUSH
44624: EMPTY
44625: LIST
44626: LIST
44627: PUSH
44628: LD_INT 1
44630: PUSH
44631: LD_INT 0
44633: PUSH
44634: EMPTY
44635: LIST
44636: LIST
44637: PUSH
44638: LD_INT 1
44640: PUSH
44641: LD_INT 1
44643: PUSH
44644: EMPTY
44645: LIST
44646: LIST
44647: PUSH
44648: LD_INT 0
44650: PUSH
44651: LD_INT 1
44653: PUSH
44654: EMPTY
44655: LIST
44656: LIST
44657: PUSH
44658: LD_INT 1
44660: NEG
44661: PUSH
44662: LD_INT 0
44664: PUSH
44665: EMPTY
44666: LIST
44667: LIST
44668: PUSH
44669: LD_INT 1
44671: NEG
44672: PUSH
44673: LD_INT 1
44675: NEG
44676: PUSH
44677: EMPTY
44678: LIST
44679: LIST
44680: PUSH
44681: LD_INT 1
44683: NEG
44684: PUSH
44685: LD_INT 2
44687: NEG
44688: PUSH
44689: EMPTY
44690: LIST
44691: LIST
44692: PUSH
44693: LD_INT 0
44695: PUSH
44696: LD_INT 2
44698: NEG
44699: PUSH
44700: EMPTY
44701: LIST
44702: LIST
44703: PUSH
44704: LD_INT 1
44706: PUSH
44707: LD_INT 1
44709: NEG
44710: PUSH
44711: EMPTY
44712: LIST
44713: LIST
44714: PUSH
44715: LD_INT 2
44717: NEG
44718: PUSH
44719: LD_INT 1
44721: NEG
44722: PUSH
44723: EMPTY
44724: LIST
44725: LIST
44726: PUSH
44727: LD_INT 2
44729: NEG
44730: PUSH
44731: LD_INT 2
44733: NEG
44734: PUSH
44735: EMPTY
44736: LIST
44737: LIST
44738: PUSH
44739: EMPTY
44740: LIST
44741: LIST
44742: LIST
44743: LIST
44744: LIST
44745: LIST
44746: LIST
44747: LIST
44748: LIST
44749: LIST
44750: LIST
44751: LIST
44752: ST_TO_ADDR
// ControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
44753: LD_ADDR_VAR 0 48
44757: PUSH
44758: LD_INT 0
44760: PUSH
44761: LD_INT 0
44763: PUSH
44764: EMPTY
44765: LIST
44766: LIST
44767: PUSH
44768: LD_INT 0
44770: PUSH
44771: LD_INT 1
44773: NEG
44774: PUSH
44775: EMPTY
44776: LIST
44777: LIST
44778: PUSH
44779: LD_INT 1
44781: PUSH
44782: LD_INT 0
44784: PUSH
44785: EMPTY
44786: LIST
44787: LIST
44788: PUSH
44789: LD_INT 1
44791: PUSH
44792: LD_INT 1
44794: PUSH
44795: EMPTY
44796: LIST
44797: LIST
44798: PUSH
44799: LD_INT 0
44801: PUSH
44802: LD_INT 1
44804: PUSH
44805: EMPTY
44806: LIST
44807: LIST
44808: PUSH
44809: LD_INT 1
44811: NEG
44812: PUSH
44813: LD_INT 0
44815: PUSH
44816: EMPTY
44817: LIST
44818: LIST
44819: PUSH
44820: LD_INT 1
44822: NEG
44823: PUSH
44824: LD_INT 1
44826: NEG
44827: PUSH
44828: EMPTY
44829: LIST
44830: LIST
44831: PUSH
44832: LD_INT 1
44834: NEG
44835: PUSH
44836: LD_INT 2
44838: NEG
44839: PUSH
44840: EMPTY
44841: LIST
44842: LIST
44843: PUSH
44844: LD_INT 0
44846: PUSH
44847: LD_INT 2
44849: NEG
44850: PUSH
44851: EMPTY
44852: LIST
44853: LIST
44854: PUSH
44855: LD_INT 1
44857: PUSH
44858: LD_INT 1
44860: NEG
44861: PUSH
44862: EMPTY
44863: LIST
44864: LIST
44865: PUSH
44866: LD_INT 2
44868: PUSH
44869: LD_INT 0
44871: PUSH
44872: EMPTY
44873: LIST
44874: LIST
44875: PUSH
44876: LD_INT 2
44878: PUSH
44879: LD_INT 1
44881: PUSH
44882: EMPTY
44883: LIST
44884: LIST
44885: PUSH
44886: EMPTY
44887: LIST
44888: LIST
44889: LIST
44890: LIST
44891: LIST
44892: LIST
44893: LIST
44894: LIST
44895: LIST
44896: LIST
44897: LIST
44898: LIST
44899: ST_TO_ADDR
// ControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
44900: LD_ADDR_VAR 0 49
44904: PUSH
44905: LD_INT 0
44907: PUSH
44908: LD_INT 0
44910: PUSH
44911: EMPTY
44912: LIST
44913: LIST
44914: PUSH
44915: LD_INT 0
44917: PUSH
44918: LD_INT 1
44920: NEG
44921: PUSH
44922: EMPTY
44923: LIST
44924: LIST
44925: PUSH
44926: LD_INT 1
44928: PUSH
44929: LD_INT 0
44931: PUSH
44932: EMPTY
44933: LIST
44934: LIST
44935: PUSH
44936: LD_INT 1
44938: PUSH
44939: LD_INT 1
44941: PUSH
44942: EMPTY
44943: LIST
44944: LIST
44945: PUSH
44946: LD_INT 0
44948: PUSH
44949: LD_INT 1
44951: PUSH
44952: EMPTY
44953: LIST
44954: LIST
44955: PUSH
44956: LD_INT 1
44958: NEG
44959: PUSH
44960: LD_INT 0
44962: PUSH
44963: EMPTY
44964: LIST
44965: LIST
44966: PUSH
44967: LD_INT 1
44969: NEG
44970: PUSH
44971: LD_INT 1
44973: NEG
44974: PUSH
44975: EMPTY
44976: LIST
44977: LIST
44978: PUSH
44979: LD_INT 1
44981: PUSH
44982: LD_INT 1
44984: NEG
44985: PUSH
44986: EMPTY
44987: LIST
44988: LIST
44989: PUSH
44990: LD_INT 2
44992: PUSH
44993: LD_INT 0
44995: PUSH
44996: EMPTY
44997: LIST
44998: LIST
44999: PUSH
45000: LD_INT 2
45002: PUSH
45003: LD_INT 1
45005: PUSH
45006: EMPTY
45007: LIST
45008: LIST
45009: PUSH
45010: LD_INT 2
45012: PUSH
45013: LD_INT 2
45015: PUSH
45016: EMPTY
45017: LIST
45018: LIST
45019: PUSH
45020: LD_INT 1
45022: PUSH
45023: LD_INT 2
45025: PUSH
45026: EMPTY
45027: LIST
45028: LIST
45029: PUSH
45030: EMPTY
45031: LIST
45032: LIST
45033: LIST
45034: LIST
45035: LIST
45036: LIST
45037: LIST
45038: LIST
45039: LIST
45040: LIST
45041: LIST
45042: LIST
45043: ST_TO_ADDR
// ControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
45044: LD_ADDR_VAR 0 50
45048: PUSH
45049: LD_INT 0
45051: PUSH
45052: LD_INT 0
45054: PUSH
45055: EMPTY
45056: LIST
45057: LIST
45058: PUSH
45059: LD_INT 0
45061: PUSH
45062: LD_INT 1
45064: NEG
45065: PUSH
45066: EMPTY
45067: LIST
45068: LIST
45069: PUSH
45070: LD_INT 1
45072: PUSH
45073: LD_INT 0
45075: PUSH
45076: EMPTY
45077: LIST
45078: LIST
45079: PUSH
45080: LD_INT 1
45082: PUSH
45083: LD_INT 1
45085: PUSH
45086: EMPTY
45087: LIST
45088: LIST
45089: PUSH
45090: LD_INT 0
45092: PUSH
45093: LD_INT 1
45095: PUSH
45096: EMPTY
45097: LIST
45098: LIST
45099: PUSH
45100: LD_INT 1
45102: NEG
45103: PUSH
45104: LD_INT 0
45106: PUSH
45107: EMPTY
45108: LIST
45109: LIST
45110: PUSH
45111: LD_INT 1
45113: NEG
45114: PUSH
45115: LD_INT 1
45117: NEG
45118: PUSH
45119: EMPTY
45120: LIST
45121: LIST
45122: PUSH
45123: LD_INT 2
45125: PUSH
45126: LD_INT 1
45128: PUSH
45129: EMPTY
45130: LIST
45131: LIST
45132: PUSH
45133: LD_INT 2
45135: PUSH
45136: LD_INT 2
45138: PUSH
45139: EMPTY
45140: LIST
45141: LIST
45142: PUSH
45143: LD_INT 1
45145: PUSH
45146: LD_INT 2
45148: PUSH
45149: EMPTY
45150: LIST
45151: LIST
45152: PUSH
45153: LD_INT 0
45155: PUSH
45156: LD_INT 2
45158: PUSH
45159: EMPTY
45160: LIST
45161: LIST
45162: PUSH
45163: LD_INT 1
45165: NEG
45166: PUSH
45167: LD_INT 1
45169: PUSH
45170: EMPTY
45171: LIST
45172: LIST
45173: PUSH
45174: EMPTY
45175: LIST
45176: LIST
45177: LIST
45178: LIST
45179: LIST
45180: LIST
45181: LIST
45182: LIST
45183: LIST
45184: LIST
45185: LIST
45186: LIST
45187: ST_TO_ADDR
// ControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
45188: LD_ADDR_VAR 0 51
45192: PUSH
45193: LD_INT 0
45195: PUSH
45196: LD_INT 0
45198: PUSH
45199: EMPTY
45200: LIST
45201: LIST
45202: PUSH
45203: LD_INT 0
45205: PUSH
45206: LD_INT 1
45208: NEG
45209: PUSH
45210: EMPTY
45211: LIST
45212: LIST
45213: PUSH
45214: LD_INT 1
45216: PUSH
45217: LD_INT 0
45219: PUSH
45220: EMPTY
45221: LIST
45222: LIST
45223: PUSH
45224: LD_INT 1
45226: PUSH
45227: LD_INT 1
45229: PUSH
45230: EMPTY
45231: LIST
45232: LIST
45233: PUSH
45234: LD_INT 0
45236: PUSH
45237: LD_INT 1
45239: PUSH
45240: EMPTY
45241: LIST
45242: LIST
45243: PUSH
45244: LD_INT 1
45246: NEG
45247: PUSH
45248: LD_INT 0
45250: PUSH
45251: EMPTY
45252: LIST
45253: LIST
45254: PUSH
45255: LD_INT 1
45257: NEG
45258: PUSH
45259: LD_INT 1
45261: NEG
45262: PUSH
45263: EMPTY
45264: LIST
45265: LIST
45266: PUSH
45267: LD_INT 1
45269: PUSH
45270: LD_INT 2
45272: PUSH
45273: EMPTY
45274: LIST
45275: LIST
45276: PUSH
45277: LD_INT 0
45279: PUSH
45280: LD_INT 2
45282: PUSH
45283: EMPTY
45284: LIST
45285: LIST
45286: PUSH
45287: LD_INT 1
45289: NEG
45290: PUSH
45291: LD_INT 1
45293: PUSH
45294: EMPTY
45295: LIST
45296: LIST
45297: PUSH
45298: LD_INT 2
45300: NEG
45301: PUSH
45302: LD_INT 0
45304: PUSH
45305: EMPTY
45306: LIST
45307: LIST
45308: PUSH
45309: LD_INT 2
45311: NEG
45312: PUSH
45313: LD_INT 1
45315: NEG
45316: PUSH
45317: EMPTY
45318: LIST
45319: LIST
45320: PUSH
45321: EMPTY
45322: LIST
45323: LIST
45324: LIST
45325: LIST
45326: LIST
45327: LIST
45328: LIST
45329: LIST
45330: LIST
45331: LIST
45332: LIST
45333: LIST
45334: ST_TO_ADDR
// ControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45335: LD_ADDR_VAR 0 52
45339: PUSH
45340: LD_INT 0
45342: PUSH
45343: LD_INT 0
45345: PUSH
45346: EMPTY
45347: LIST
45348: LIST
45349: PUSH
45350: LD_INT 0
45352: PUSH
45353: LD_INT 1
45355: NEG
45356: PUSH
45357: EMPTY
45358: LIST
45359: LIST
45360: PUSH
45361: LD_INT 1
45363: PUSH
45364: LD_INT 0
45366: PUSH
45367: EMPTY
45368: LIST
45369: LIST
45370: PUSH
45371: LD_INT 1
45373: PUSH
45374: LD_INT 1
45376: PUSH
45377: EMPTY
45378: LIST
45379: LIST
45380: PUSH
45381: LD_INT 0
45383: PUSH
45384: LD_INT 1
45386: PUSH
45387: EMPTY
45388: LIST
45389: LIST
45390: PUSH
45391: LD_INT 1
45393: NEG
45394: PUSH
45395: LD_INT 0
45397: PUSH
45398: EMPTY
45399: LIST
45400: LIST
45401: PUSH
45402: LD_INT 1
45404: NEG
45405: PUSH
45406: LD_INT 1
45408: NEG
45409: PUSH
45410: EMPTY
45411: LIST
45412: LIST
45413: PUSH
45414: LD_INT 1
45416: NEG
45417: PUSH
45418: LD_INT 2
45420: NEG
45421: PUSH
45422: EMPTY
45423: LIST
45424: LIST
45425: PUSH
45426: LD_INT 1
45428: NEG
45429: PUSH
45430: LD_INT 1
45432: PUSH
45433: EMPTY
45434: LIST
45435: LIST
45436: PUSH
45437: LD_INT 2
45439: NEG
45440: PUSH
45441: LD_INT 0
45443: PUSH
45444: EMPTY
45445: LIST
45446: LIST
45447: PUSH
45448: LD_INT 2
45450: NEG
45451: PUSH
45452: LD_INT 1
45454: NEG
45455: PUSH
45456: EMPTY
45457: LIST
45458: LIST
45459: PUSH
45460: LD_INT 2
45462: NEG
45463: PUSH
45464: LD_INT 2
45466: NEG
45467: PUSH
45468: EMPTY
45469: LIST
45470: LIST
45471: PUSH
45472: EMPTY
45473: LIST
45474: LIST
45475: LIST
45476: LIST
45477: LIST
45478: LIST
45479: LIST
45480: LIST
45481: LIST
45482: LIST
45483: LIST
45484: LIST
45485: ST_TO_ADDR
// Barracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45486: LD_ADDR_VAR 0 53
45490: PUSH
45491: LD_INT 0
45493: PUSH
45494: LD_INT 0
45496: PUSH
45497: EMPTY
45498: LIST
45499: LIST
45500: PUSH
45501: LD_INT 0
45503: PUSH
45504: LD_INT 1
45506: NEG
45507: PUSH
45508: EMPTY
45509: LIST
45510: LIST
45511: PUSH
45512: LD_INT 1
45514: PUSH
45515: LD_INT 0
45517: PUSH
45518: EMPTY
45519: LIST
45520: LIST
45521: PUSH
45522: LD_INT 1
45524: PUSH
45525: LD_INT 1
45527: PUSH
45528: EMPTY
45529: LIST
45530: LIST
45531: PUSH
45532: LD_INT 0
45534: PUSH
45535: LD_INT 1
45537: PUSH
45538: EMPTY
45539: LIST
45540: LIST
45541: PUSH
45542: LD_INT 1
45544: NEG
45545: PUSH
45546: LD_INT 0
45548: PUSH
45549: EMPTY
45550: LIST
45551: LIST
45552: PUSH
45553: LD_INT 1
45555: NEG
45556: PUSH
45557: LD_INT 1
45559: NEG
45560: PUSH
45561: EMPTY
45562: LIST
45563: LIST
45564: PUSH
45565: LD_INT 1
45567: NEG
45568: PUSH
45569: LD_INT 2
45571: NEG
45572: PUSH
45573: EMPTY
45574: LIST
45575: LIST
45576: PUSH
45577: LD_INT 0
45579: PUSH
45580: LD_INT 2
45582: NEG
45583: PUSH
45584: EMPTY
45585: LIST
45586: LIST
45587: PUSH
45588: LD_INT 1
45590: PUSH
45591: LD_INT 1
45593: NEG
45594: PUSH
45595: EMPTY
45596: LIST
45597: LIST
45598: PUSH
45599: LD_INT 2
45601: PUSH
45602: LD_INT 0
45604: PUSH
45605: EMPTY
45606: LIST
45607: LIST
45608: PUSH
45609: LD_INT 2
45611: PUSH
45612: LD_INT 1
45614: PUSH
45615: EMPTY
45616: LIST
45617: LIST
45618: PUSH
45619: LD_INT 2
45621: PUSH
45622: LD_INT 2
45624: PUSH
45625: EMPTY
45626: LIST
45627: LIST
45628: PUSH
45629: LD_INT 1
45631: PUSH
45632: LD_INT 2
45634: PUSH
45635: EMPTY
45636: LIST
45637: LIST
45638: PUSH
45639: LD_INT 0
45641: PUSH
45642: LD_INT 2
45644: PUSH
45645: EMPTY
45646: LIST
45647: LIST
45648: PUSH
45649: LD_INT 1
45651: NEG
45652: PUSH
45653: LD_INT 1
45655: PUSH
45656: EMPTY
45657: LIST
45658: LIST
45659: PUSH
45660: LD_INT 2
45662: NEG
45663: PUSH
45664: LD_INT 0
45666: PUSH
45667: EMPTY
45668: LIST
45669: LIST
45670: PUSH
45671: LD_INT 2
45673: NEG
45674: PUSH
45675: LD_INT 1
45677: NEG
45678: PUSH
45679: EMPTY
45680: LIST
45681: LIST
45682: PUSH
45683: LD_INT 2
45685: NEG
45686: PUSH
45687: LD_INT 2
45689: NEG
45690: PUSH
45691: EMPTY
45692: LIST
45693: LIST
45694: PUSH
45695: EMPTY
45696: LIST
45697: LIST
45698: LIST
45699: LIST
45700: LIST
45701: LIST
45702: LIST
45703: LIST
45704: LIST
45705: LIST
45706: LIST
45707: LIST
45708: LIST
45709: LIST
45710: LIST
45711: LIST
45712: LIST
45713: LIST
45714: LIST
45715: ST_TO_ADDR
// Barracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45716: LD_ADDR_VAR 0 54
45720: PUSH
45721: LD_INT 0
45723: PUSH
45724: LD_INT 0
45726: PUSH
45727: EMPTY
45728: LIST
45729: LIST
45730: PUSH
45731: LD_INT 0
45733: PUSH
45734: LD_INT 1
45736: NEG
45737: PUSH
45738: EMPTY
45739: LIST
45740: LIST
45741: PUSH
45742: LD_INT 1
45744: PUSH
45745: LD_INT 0
45747: PUSH
45748: EMPTY
45749: LIST
45750: LIST
45751: PUSH
45752: LD_INT 1
45754: PUSH
45755: LD_INT 1
45757: PUSH
45758: EMPTY
45759: LIST
45760: LIST
45761: PUSH
45762: LD_INT 0
45764: PUSH
45765: LD_INT 1
45767: PUSH
45768: EMPTY
45769: LIST
45770: LIST
45771: PUSH
45772: LD_INT 1
45774: NEG
45775: PUSH
45776: LD_INT 0
45778: PUSH
45779: EMPTY
45780: LIST
45781: LIST
45782: PUSH
45783: LD_INT 1
45785: NEG
45786: PUSH
45787: LD_INT 1
45789: NEG
45790: PUSH
45791: EMPTY
45792: LIST
45793: LIST
45794: PUSH
45795: LD_INT 1
45797: NEG
45798: PUSH
45799: LD_INT 2
45801: NEG
45802: PUSH
45803: EMPTY
45804: LIST
45805: LIST
45806: PUSH
45807: LD_INT 0
45809: PUSH
45810: LD_INT 2
45812: NEG
45813: PUSH
45814: EMPTY
45815: LIST
45816: LIST
45817: PUSH
45818: LD_INT 1
45820: PUSH
45821: LD_INT 1
45823: NEG
45824: PUSH
45825: EMPTY
45826: LIST
45827: LIST
45828: PUSH
45829: LD_INT 2
45831: PUSH
45832: LD_INT 0
45834: PUSH
45835: EMPTY
45836: LIST
45837: LIST
45838: PUSH
45839: LD_INT 2
45841: PUSH
45842: LD_INT 1
45844: PUSH
45845: EMPTY
45846: LIST
45847: LIST
45848: PUSH
45849: LD_INT 2
45851: PUSH
45852: LD_INT 2
45854: PUSH
45855: EMPTY
45856: LIST
45857: LIST
45858: PUSH
45859: LD_INT 1
45861: PUSH
45862: LD_INT 2
45864: PUSH
45865: EMPTY
45866: LIST
45867: LIST
45868: PUSH
45869: LD_INT 0
45871: PUSH
45872: LD_INT 2
45874: PUSH
45875: EMPTY
45876: LIST
45877: LIST
45878: PUSH
45879: LD_INT 1
45881: NEG
45882: PUSH
45883: LD_INT 1
45885: PUSH
45886: EMPTY
45887: LIST
45888: LIST
45889: PUSH
45890: LD_INT 2
45892: NEG
45893: PUSH
45894: LD_INT 0
45896: PUSH
45897: EMPTY
45898: LIST
45899: LIST
45900: PUSH
45901: LD_INT 2
45903: NEG
45904: PUSH
45905: LD_INT 1
45907: NEG
45908: PUSH
45909: EMPTY
45910: LIST
45911: LIST
45912: PUSH
45913: LD_INT 2
45915: NEG
45916: PUSH
45917: LD_INT 2
45919: NEG
45920: PUSH
45921: EMPTY
45922: LIST
45923: LIST
45924: PUSH
45925: EMPTY
45926: LIST
45927: LIST
45928: LIST
45929: LIST
45930: LIST
45931: LIST
45932: LIST
45933: LIST
45934: LIST
45935: LIST
45936: LIST
45937: LIST
45938: LIST
45939: LIST
45940: LIST
45941: LIST
45942: LIST
45943: LIST
45944: LIST
45945: ST_TO_ADDR
// Barracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45946: LD_ADDR_VAR 0 55
45950: PUSH
45951: LD_INT 0
45953: PUSH
45954: LD_INT 0
45956: PUSH
45957: EMPTY
45958: LIST
45959: LIST
45960: PUSH
45961: LD_INT 0
45963: PUSH
45964: LD_INT 1
45966: NEG
45967: PUSH
45968: EMPTY
45969: LIST
45970: LIST
45971: PUSH
45972: LD_INT 1
45974: PUSH
45975: LD_INT 0
45977: PUSH
45978: EMPTY
45979: LIST
45980: LIST
45981: PUSH
45982: LD_INT 1
45984: PUSH
45985: LD_INT 1
45987: PUSH
45988: EMPTY
45989: LIST
45990: LIST
45991: PUSH
45992: LD_INT 0
45994: PUSH
45995: LD_INT 1
45997: PUSH
45998: EMPTY
45999: LIST
46000: LIST
46001: PUSH
46002: LD_INT 1
46004: NEG
46005: PUSH
46006: LD_INT 0
46008: PUSH
46009: EMPTY
46010: LIST
46011: LIST
46012: PUSH
46013: LD_INT 1
46015: NEG
46016: PUSH
46017: LD_INT 1
46019: NEG
46020: PUSH
46021: EMPTY
46022: LIST
46023: LIST
46024: PUSH
46025: LD_INT 1
46027: NEG
46028: PUSH
46029: LD_INT 2
46031: NEG
46032: PUSH
46033: EMPTY
46034: LIST
46035: LIST
46036: PUSH
46037: LD_INT 0
46039: PUSH
46040: LD_INT 2
46042: NEG
46043: PUSH
46044: EMPTY
46045: LIST
46046: LIST
46047: PUSH
46048: LD_INT 1
46050: PUSH
46051: LD_INT 1
46053: NEG
46054: PUSH
46055: EMPTY
46056: LIST
46057: LIST
46058: PUSH
46059: LD_INT 2
46061: PUSH
46062: LD_INT 0
46064: PUSH
46065: EMPTY
46066: LIST
46067: LIST
46068: PUSH
46069: LD_INT 2
46071: PUSH
46072: LD_INT 1
46074: PUSH
46075: EMPTY
46076: LIST
46077: LIST
46078: PUSH
46079: LD_INT 2
46081: PUSH
46082: LD_INT 2
46084: PUSH
46085: EMPTY
46086: LIST
46087: LIST
46088: PUSH
46089: LD_INT 1
46091: PUSH
46092: LD_INT 2
46094: PUSH
46095: EMPTY
46096: LIST
46097: LIST
46098: PUSH
46099: LD_INT 0
46101: PUSH
46102: LD_INT 2
46104: PUSH
46105: EMPTY
46106: LIST
46107: LIST
46108: PUSH
46109: LD_INT 1
46111: NEG
46112: PUSH
46113: LD_INT 1
46115: PUSH
46116: EMPTY
46117: LIST
46118: LIST
46119: PUSH
46120: LD_INT 2
46122: NEG
46123: PUSH
46124: LD_INT 0
46126: PUSH
46127: EMPTY
46128: LIST
46129: LIST
46130: PUSH
46131: LD_INT 2
46133: NEG
46134: PUSH
46135: LD_INT 1
46137: NEG
46138: PUSH
46139: EMPTY
46140: LIST
46141: LIST
46142: PUSH
46143: LD_INT 2
46145: NEG
46146: PUSH
46147: LD_INT 2
46149: NEG
46150: PUSH
46151: EMPTY
46152: LIST
46153: LIST
46154: PUSH
46155: EMPTY
46156: LIST
46157: LIST
46158: LIST
46159: LIST
46160: LIST
46161: LIST
46162: LIST
46163: LIST
46164: LIST
46165: LIST
46166: LIST
46167: LIST
46168: LIST
46169: LIST
46170: LIST
46171: LIST
46172: LIST
46173: LIST
46174: LIST
46175: ST_TO_ADDR
// Barracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46176: LD_ADDR_VAR 0 56
46180: PUSH
46181: LD_INT 0
46183: PUSH
46184: LD_INT 0
46186: PUSH
46187: EMPTY
46188: LIST
46189: LIST
46190: PUSH
46191: LD_INT 0
46193: PUSH
46194: LD_INT 1
46196: NEG
46197: PUSH
46198: EMPTY
46199: LIST
46200: LIST
46201: PUSH
46202: LD_INT 1
46204: PUSH
46205: LD_INT 0
46207: PUSH
46208: EMPTY
46209: LIST
46210: LIST
46211: PUSH
46212: LD_INT 1
46214: PUSH
46215: LD_INT 1
46217: PUSH
46218: EMPTY
46219: LIST
46220: LIST
46221: PUSH
46222: LD_INT 0
46224: PUSH
46225: LD_INT 1
46227: PUSH
46228: EMPTY
46229: LIST
46230: LIST
46231: PUSH
46232: LD_INT 1
46234: NEG
46235: PUSH
46236: LD_INT 0
46238: PUSH
46239: EMPTY
46240: LIST
46241: LIST
46242: PUSH
46243: LD_INT 1
46245: NEG
46246: PUSH
46247: LD_INT 1
46249: NEG
46250: PUSH
46251: EMPTY
46252: LIST
46253: LIST
46254: PUSH
46255: LD_INT 1
46257: NEG
46258: PUSH
46259: LD_INT 2
46261: NEG
46262: PUSH
46263: EMPTY
46264: LIST
46265: LIST
46266: PUSH
46267: LD_INT 0
46269: PUSH
46270: LD_INT 2
46272: NEG
46273: PUSH
46274: EMPTY
46275: LIST
46276: LIST
46277: PUSH
46278: LD_INT 1
46280: PUSH
46281: LD_INT 1
46283: NEG
46284: PUSH
46285: EMPTY
46286: LIST
46287: LIST
46288: PUSH
46289: LD_INT 2
46291: PUSH
46292: LD_INT 0
46294: PUSH
46295: EMPTY
46296: LIST
46297: LIST
46298: PUSH
46299: LD_INT 2
46301: PUSH
46302: LD_INT 1
46304: PUSH
46305: EMPTY
46306: LIST
46307: LIST
46308: PUSH
46309: LD_INT 2
46311: PUSH
46312: LD_INT 2
46314: PUSH
46315: EMPTY
46316: LIST
46317: LIST
46318: PUSH
46319: LD_INT 1
46321: PUSH
46322: LD_INT 2
46324: PUSH
46325: EMPTY
46326: LIST
46327: LIST
46328: PUSH
46329: LD_INT 0
46331: PUSH
46332: LD_INT 2
46334: PUSH
46335: EMPTY
46336: LIST
46337: LIST
46338: PUSH
46339: LD_INT 1
46341: NEG
46342: PUSH
46343: LD_INT 1
46345: PUSH
46346: EMPTY
46347: LIST
46348: LIST
46349: PUSH
46350: LD_INT 2
46352: NEG
46353: PUSH
46354: LD_INT 0
46356: PUSH
46357: EMPTY
46358: LIST
46359: LIST
46360: PUSH
46361: LD_INT 2
46363: NEG
46364: PUSH
46365: LD_INT 1
46367: NEG
46368: PUSH
46369: EMPTY
46370: LIST
46371: LIST
46372: PUSH
46373: LD_INT 2
46375: NEG
46376: PUSH
46377: LD_INT 2
46379: NEG
46380: PUSH
46381: EMPTY
46382: LIST
46383: LIST
46384: PUSH
46385: EMPTY
46386: LIST
46387: LIST
46388: LIST
46389: LIST
46390: LIST
46391: LIST
46392: LIST
46393: LIST
46394: LIST
46395: LIST
46396: LIST
46397: LIST
46398: LIST
46399: LIST
46400: LIST
46401: LIST
46402: LIST
46403: LIST
46404: LIST
46405: ST_TO_ADDR
// Barracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46406: LD_ADDR_VAR 0 57
46410: PUSH
46411: LD_INT 0
46413: PUSH
46414: LD_INT 0
46416: PUSH
46417: EMPTY
46418: LIST
46419: LIST
46420: PUSH
46421: LD_INT 0
46423: PUSH
46424: LD_INT 1
46426: NEG
46427: PUSH
46428: EMPTY
46429: LIST
46430: LIST
46431: PUSH
46432: LD_INT 1
46434: PUSH
46435: LD_INT 0
46437: PUSH
46438: EMPTY
46439: LIST
46440: LIST
46441: PUSH
46442: LD_INT 1
46444: PUSH
46445: LD_INT 1
46447: PUSH
46448: EMPTY
46449: LIST
46450: LIST
46451: PUSH
46452: LD_INT 0
46454: PUSH
46455: LD_INT 1
46457: PUSH
46458: EMPTY
46459: LIST
46460: LIST
46461: PUSH
46462: LD_INT 1
46464: NEG
46465: PUSH
46466: LD_INT 0
46468: PUSH
46469: EMPTY
46470: LIST
46471: LIST
46472: PUSH
46473: LD_INT 1
46475: NEG
46476: PUSH
46477: LD_INT 1
46479: NEG
46480: PUSH
46481: EMPTY
46482: LIST
46483: LIST
46484: PUSH
46485: LD_INT 1
46487: NEG
46488: PUSH
46489: LD_INT 2
46491: NEG
46492: PUSH
46493: EMPTY
46494: LIST
46495: LIST
46496: PUSH
46497: LD_INT 0
46499: PUSH
46500: LD_INT 2
46502: NEG
46503: PUSH
46504: EMPTY
46505: LIST
46506: LIST
46507: PUSH
46508: LD_INT 1
46510: PUSH
46511: LD_INT 1
46513: NEG
46514: PUSH
46515: EMPTY
46516: LIST
46517: LIST
46518: PUSH
46519: LD_INT 2
46521: PUSH
46522: LD_INT 0
46524: PUSH
46525: EMPTY
46526: LIST
46527: LIST
46528: PUSH
46529: LD_INT 2
46531: PUSH
46532: LD_INT 1
46534: PUSH
46535: EMPTY
46536: LIST
46537: LIST
46538: PUSH
46539: LD_INT 2
46541: PUSH
46542: LD_INT 2
46544: PUSH
46545: EMPTY
46546: LIST
46547: LIST
46548: PUSH
46549: LD_INT 1
46551: PUSH
46552: LD_INT 2
46554: PUSH
46555: EMPTY
46556: LIST
46557: LIST
46558: PUSH
46559: LD_INT 0
46561: PUSH
46562: LD_INT 2
46564: PUSH
46565: EMPTY
46566: LIST
46567: LIST
46568: PUSH
46569: LD_INT 1
46571: NEG
46572: PUSH
46573: LD_INT 1
46575: PUSH
46576: EMPTY
46577: LIST
46578: LIST
46579: PUSH
46580: LD_INT 2
46582: NEG
46583: PUSH
46584: LD_INT 0
46586: PUSH
46587: EMPTY
46588: LIST
46589: LIST
46590: PUSH
46591: LD_INT 2
46593: NEG
46594: PUSH
46595: LD_INT 1
46597: NEG
46598: PUSH
46599: EMPTY
46600: LIST
46601: LIST
46602: PUSH
46603: LD_INT 2
46605: NEG
46606: PUSH
46607: LD_INT 2
46609: NEG
46610: PUSH
46611: EMPTY
46612: LIST
46613: LIST
46614: PUSH
46615: EMPTY
46616: LIST
46617: LIST
46618: LIST
46619: LIST
46620: LIST
46621: LIST
46622: LIST
46623: LIST
46624: LIST
46625: LIST
46626: LIST
46627: LIST
46628: LIST
46629: LIST
46630: LIST
46631: LIST
46632: LIST
46633: LIST
46634: LIST
46635: ST_TO_ADDR
// Barracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46636: LD_ADDR_VAR 0 58
46640: PUSH
46641: LD_INT 0
46643: PUSH
46644: LD_INT 0
46646: PUSH
46647: EMPTY
46648: LIST
46649: LIST
46650: PUSH
46651: LD_INT 0
46653: PUSH
46654: LD_INT 1
46656: NEG
46657: PUSH
46658: EMPTY
46659: LIST
46660: LIST
46661: PUSH
46662: LD_INT 1
46664: PUSH
46665: LD_INT 0
46667: PUSH
46668: EMPTY
46669: LIST
46670: LIST
46671: PUSH
46672: LD_INT 1
46674: PUSH
46675: LD_INT 1
46677: PUSH
46678: EMPTY
46679: LIST
46680: LIST
46681: PUSH
46682: LD_INT 0
46684: PUSH
46685: LD_INT 1
46687: PUSH
46688: EMPTY
46689: LIST
46690: LIST
46691: PUSH
46692: LD_INT 1
46694: NEG
46695: PUSH
46696: LD_INT 0
46698: PUSH
46699: EMPTY
46700: LIST
46701: LIST
46702: PUSH
46703: LD_INT 1
46705: NEG
46706: PUSH
46707: LD_INT 1
46709: NEG
46710: PUSH
46711: EMPTY
46712: LIST
46713: LIST
46714: PUSH
46715: LD_INT 1
46717: NEG
46718: PUSH
46719: LD_INT 2
46721: NEG
46722: PUSH
46723: EMPTY
46724: LIST
46725: LIST
46726: PUSH
46727: LD_INT 0
46729: PUSH
46730: LD_INT 2
46732: NEG
46733: PUSH
46734: EMPTY
46735: LIST
46736: LIST
46737: PUSH
46738: LD_INT 1
46740: PUSH
46741: LD_INT 1
46743: NEG
46744: PUSH
46745: EMPTY
46746: LIST
46747: LIST
46748: PUSH
46749: LD_INT 2
46751: PUSH
46752: LD_INT 0
46754: PUSH
46755: EMPTY
46756: LIST
46757: LIST
46758: PUSH
46759: LD_INT 2
46761: PUSH
46762: LD_INT 1
46764: PUSH
46765: EMPTY
46766: LIST
46767: LIST
46768: PUSH
46769: LD_INT 2
46771: PUSH
46772: LD_INT 2
46774: PUSH
46775: EMPTY
46776: LIST
46777: LIST
46778: PUSH
46779: LD_INT 1
46781: PUSH
46782: LD_INT 2
46784: PUSH
46785: EMPTY
46786: LIST
46787: LIST
46788: PUSH
46789: LD_INT 0
46791: PUSH
46792: LD_INT 2
46794: PUSH
46795: EMPTY
46796: LIST
46797: LIST
46798: PUSH
46799: LD_INT 1
46801: NEG
46802: PUSH
46803: LD_INT 1
46805: PUSH
46806: EMPTY
46807: LIST
46808: LIST
46809: PUSH
46810: LD_INT 2
46812: NEG
46813: PUSH
46814: LD_INT 0
46816: PUSH
46817: EMPTY
46818: LIST
46819: LIST
46820: PUSH
46821: LD_INT 2
46823: NEG
46824: PUSH
46825: LD_INT 1
46827: NEG
46828: PUSH
46829: EMPTY
46830: LIST
46831: LIST
46832: PUSH
46833: LD_INT 2
46835: NEG
46836: PUSH
46837: LD_INT 2
46839: NEG
46840: PUSH
46841: EMPTY
46842: LIST
46843: LIST
46844: PUSH
46845: EMPTY
46846: LIST
46847: LIST
46848: LIST
46849: LIST
46850: LIST
46851: LIST
46852: LIST
46853: LIST
46854: LIST
46855: LIST
46856: LIST
46857: LIST
46858: LIST
46859: LIST
46860: LIST
46861: LIST
46862: LIST
46863: LIST
46864: LIST
46865: ST_TO_ADDR
// Bunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46866: LD_ADDR_VAR 0 59
46870: PUSH
46871: LD_INT 0
46873: PUSH
46874: LD_INT 0
46876: PUSH
46877: EMPTY
46878: LIST
46879: LIST
46880: PUSH
46881: LD_INT 0
46883: PUSH
46884: LD_INT 1
46886: NEG
46887: PUSH
46888: EMPTY
46889: LIST
46890: LIST
46891: PUSH
46892: LD_INT 1
46894: PUSH
46895: LD_INT 0
46897: PUSH
46898: EMPTY
46899: LIST
46900: LIST
46901: PUSH
46902: LD_INT 1
46904: PUSH
46905: LD_INT 1
46907: PUSH
46908: EMPTY
46909: LIST
46910: LIST
46911: PUSH
46912: LD_INT 0
46914: PUSH
46915: LD_INT 1
46917: PUSH
46918: EMPTY
46919: LIST
46920: LIST
46921: PUSH
46922: LD_INT 1
46924: NEG
46925: PUSH
46926: LD_INT 0
46928: PUSH
46929: EMPTY
46930: LIST
46931: LIST
46932: PUSH
46933: LD_INT 1
46935: NEG
46936: PUSH
46937: LD_INT 1
46939: NEG
46940: PUSH
46941: EMPTY
46942: LIST
46943: LIST
46944: PUSH
46945: EMPTY
46946: LIST
46947: LIST
46948: LIST
46949: LIST
46950: LIST
46951: LIST
46952: LIST
46953: ST_TO_ADDR
// Bunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46954: LD_ADDR_VAR 0 60
46958: PUSH
46959: LD_INT 0
46961: PUSH
46962: LD_INT 0
46964: PUSH
46965: EMPTY
46966: LIST
46967: LIST
46968: PUSH
46969: LD_INT 0
46971: PUSH
46972: LD_INT 1
46974: NEG
46975: PUSH
46976: EMPTY
46977: LIST
46978: LIST
46979: PUSH
46980: LD_INT 1
46982: PUSH
46983: LD_INT 0
46985: PUSH
46986: EMPTY
46987: LIST
46988: LIST
46989: PUSH
46990: LD_INT 1
46992: PUSH
46993: LD_INT 1
46995: PUSH
46996: EMPTY
46997: LIST
46998: LIST
46999: PUSH
47000: LD_INT 0
47002: PUSH
47003: LD_INT 1
47005: PUSH
47006: EMPTY
47007: LIST
47008: LIST
47009: PUSH
47010: LD_INT 1
47012: NEG
47013: PUSH
47014: LD_INT 0
47016: PUSH
47017: EMPTY
47018: LIST
47019: LIST
47020: PUSH
47021: LD_INT 1
47023: NEG
47024: PUSH
47025: LD_INT 1
47027: NEG
47028: PUSH
47029: EMPTY
47030: LIST
47031: LIST
47032: PUSH
47033: EMPTY
47034: LIST
47035: LIST
47036: LIST
47037: LIST
47038: LIST
47039: LIST
47040: LIST
47041: ST_TO_ADDR
// Bunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47042: LD_ADDR_VAR 0 61
47046: PUSH
47047: LD_INT 0
47049: PUSH
47050: LD_INT 0
47052: PUSH
47053: EMPTY
47054: LIST
47055: LIST
47056: PUSH
47057: LD_INT 0
47059: PUSH
47060: LD_INT 1
47062: NEG
47063: PUSH
47064: EMPTY
47065: LIST
47066: LIST
47067: PUSH
47068: LD_INT 1
47070: PUSH
47071: LD_INT 0
47073: PUSH
47074: EMPTY
47075: LIST
47076: LIST
47077: PUSH
47078: LD_INT 1
47080: PUSH
47081: LD_INT 1
47083: PUSH
47084: EMPTY
47085: LIST
47086: LIST
47087: PUSH
47088: LD_INT 0
47090: PUSH
47091: LD_INT 1
47093: PUSH
47094: EMPTY
47095: LIST
47096: LIST
47097: PUSH
47098: LD_INT 1
47100: NEG
47101: PUSH
47102: LD_INT 0
47104: PUSH
47105: EMPTY
47106: LIST
47107: LIST
47108: PUSH
47109: LD_INT 1
47111: NEG
47112: PUSH
47113: LD_INT 1
47115: NEG
47116: PUSH
47117: EMPTY
47118: LIST
47119: LIST
47120: PUSH
47121: EMPTY
47122: LIST
47123: LIST
47124: LIST
47125: LIST
47126: LIST
47127: LIST
47128: LIST
47129: ST_TO_ADDR
// Bunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47130: LD_ADDR_VAR 0 62
47134: PUSH
47135: LD_INT 0
47137: PUSH
47138: LD_INT 0
47140: PUSH
47141: EMPTY
47142: LIST
47143: LIST
47144: PUSH
47145: LD_INT 0
47147: PUSH
47148: LD_INT 1
47150: NEG
47151: PUSH
47152: EMPTY
47153: LIST
47154: LIST
47155: PUSH
47156: LD_INT 1
47158: PUSH
47159: LD_INT 0
47161: PUSH
47162: EMPTY
47163: LIST
47164: LIST
47165: PUSH
47166: LD_INT 1
47168: PUSH
47169: LD_INT 1
47171: PUSH
47172: EMPTY
47173: LIST
47174: LIST
47175: PUSH
47176: LD_INT 0
47178: PUSH
47179: LD_INT 1
47181: PUSH
47182: EMPTY
47183: LIST
47184: LIST
47185: PUSH
47186: LD_INT 1
47188: NEG
47189: PUSH
47190: LD_INT 0
47192: PUSH
47193: EMPTY
47194: LIST
47195: LIST
47196: PUSH
47197: LD_INT 1
47199: NEG
47200: PUSH
47201: LD_INT 1
47203: NEG
47204: PUSH
47205: EMPTY
47206: LIST
47207: LIST
47208: PUSH
47209: EMPTY
47210: LIST
47211: LIST
47212: LIST
47213: LIST
47214: LIST
47215: LIST
47216: LIST
47217: ST_TO_ADDR
// Bunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47218: LD_ADDR_VAR 0 63
47222: PUSH
47223: LD_INT 0
47225: PUSH
47226: LD_INT 0
47228: PUSH
47229: EMPTY
47230: LIST
47231: LIST
47232: PUSH
47233: LD_INT 0
47235: PUSH
47236: LD_INT 1
47238: NEG
47239: PUSH
47240: EMPTY
47241: LIST
47242: LIST
47243: PUSH
47244: LD_INT 1
47246: PUSH
47247: LD_INT 0
47249: PUSH
47250: EMPTY
47251: LIST
47252: LIST
47253: PUSH
47254: LD_INT 1
47256: PUSH
47257: LD_INT 1
47259: PUSH
47260: EMPTY
47261: LIST
47262: LIST
47263: PUSH
47264: LD_INT 0
47266: PUSH
47267: LD_INT 1
47269: PUSH
47270: EMPTY
47271: LIST
47272: LIST
47273: PUSH
47274: LD_INT 1
47276: NEG
47277: PUSH
47278: LD_INT 0
47280: PUSH
47281: EMPTY
47282: LIST
47283: LIST
47284: PUSH
47285: LD_INT 1
47287: NEG
47288: PUSH
47289: LD_INT 1
47291: NEG
47292: PUSH
47293: EMPTY
47294: LIST
47295: LIST
47296: PUSH
47297: EMPTY
47298: LIST
47299: LIST
47300: LIST
47301: LIST
47302: LIST
47303: LIST
47304: LIST
47305: ST_TO_ADDR
// Bunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47306: LD_ADDR_VAR 0 64
47310: PUSH
47311: LD_INT 0
47313: PUSH
47314: LD_INT 0
47316: PUSH
47317: EMPTY
47318: LIST
47319: LIST
47320: PUSH
47321: LD_INT 0
47323: PUSH
47324: LD_INT 1
47326: NEG
47327: PUSH
47328: EMPTY
47329: LIST
47330: LIST
47331: PUSH
47332: LD_INT 1
47334: PUSH
47335: LD_INT 0
47337: PUSH
47338: EMPTY
47339: LIST
47340: LIST
47341: PUSH
47342: LD_INT 1
47344: PUSH
47345: LD_INT 1
47347: PUSH
47348: EMPTY
47349: LIST
47350: LIST
47351: PUSH
47352: LD_INT 0
47354: PUSH
47355: LD_INT 1
47357: PUSH
47358: EMPTY
47359: LIST
47360: LIST
47361: PUSH
47362: LD_INT 1
47364: NEG
47365: PUSH
47366: LD_INT 0
47368: PUSH
47369: EMPTY
47370: LIST
47371: LIST
47372: PUSH
47373: LD_INT 1
47375: NEG
47376: PUSH
47377: LD_INT 1
47379: NEG
47380: PUSH
47381: EMPTY
47382: LIST
47383: LIST
47384: PUSH
47385: EMPTY
47386: LIST
47387: LIST
47388: LIST
47389: LIST
47390: LIST
47391: LIST
47392: LIST
47393: ST_TO_ADDR
// end ; 1 :
47394: GO 53291
47396: LD_INT 1
47398: DOUBLE
47399: EQUAL
47400: IFTRUE 47404
47402: GO 50027
47404: POP
// begin DepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
47405: LD_ADDR_VAR 0 11
47409: PUSH
47410: LD_INT 1
47412: NEG
47413: PUSH
47414: LD_INT 3
47416: NEG
47417: PUSH
47418: EMPTY
47419: LIST
47420: LIST
47421: PUSH
47422: LD_INT 0
47424: PUSH
47425: LD_INT 3
47427: NEG
47428: PUSH
47429: EMPTY
47430: LIST
47431: LIST
47432: PUSH
47433: LD_INT 1
47435: PUSH
47436: LD_INT 2
47438: NEG
47439: PUSH
47440: EMPTY
47441: LIST
47442: LIST
47443: PUSH
47444: EMPTY
47445: LIST
47446: LIST
47447: LIST
47448: ST_TO_ADDR
// DepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
47449: LD_ADDR_VAR 0 12
47453: PUSH
47454: LD_INT 2
47456: PUSH
47457: LD_INT 1
47459: NEG
47460: PUSH
47461: EMPTY
47462: LIST
47463: LIST
47464: PUSH
47465: LD_INT 3
47467: PUSH
47468: LD_INT 0
47470: PUSH
47471: EMPTY
47472: LIST
47473: LIST
47474: PUSH
47475: LD_INT 3
47477: PUSH
47478: LD_INT 1
47480: PUSH
47481: EMPTY
47482: LIST
47483: LIST
47484: PUSH
47485: EMPTY
47486: LIST
47487: LIST
47488: LIST
47489: ST_TO_ADDR
// DepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
47490: LD_ADDR_VAR 0 13
47494: PUSH
47495: LD_INT 3
47497: PUSH
47498: LD_INT 2
47500: PUSH
47501: EMPTY
47502: LIST
47503: LIST
47504: PUSH
47505: LD_INT 3
47507: PUSH
47508: LD_INT 3
47510: PUSH
47511: EMPTY
47512: LIST
47513: LIST
47514: PUSH
47515: LD_INT 2
47517: PUSH
47518: LD_INT 3
47520: PUSH
47521: EMPTY
47522: LIST
47523: LIST
47524: PUSH
47525: EMPTY
47526: LIST
47527: LIST
47528: LIST
47529: ST_TO_ADDR
// DepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
47530: LD_ADDR_VAR 0 14
47534: PUSH
47535: LD_INT 1
47537: PUSH
47538: LD_INT 3
47540: PUSH
47541: EMPTY
47542: LIST
47543: LIST
47544: PUSH
47545: LD_INT 0
47547: PUSH
47548: LD_INT 3
47550: PUSH
47551: EMPTY
47552: LIST
47553: LIST
47554: PUSH
47555: LD_INT 1
47557: NEG
47558: PUSH
47559: LD_INT 2
47561: PUSH
47562: EMPTY
47563: LIST
47564: LIST
47565: PUSH
47566: EMPTY
47567: LIST
47568: LIST
47569: LIST
47570: ST_TO_ADDR
// DepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47571: LD_ADDR_VAR 0 15
47575: PUSH
47576: LD_INT 2
47578: NEG
47579: PUSH
47580: LD_INT 1
47582: PUSH
47583: EMPTY
47584: LIST
47585: LIST
47586: PUSH
47587: LD_INT 3
47589: NEG
47590: PUSH
47591: LD_INT 0
47593: PUSH
47594: EMPTY
47595: LIST
47596: LIST
47597: PUSH
47598: LD_INT 3
47600: NEG
47601: PUSH
47602: LD_INT 1
47604: NEG
47605: PUSH
47606: EMPTY
47607: LIST
47608: LIST
47609: PUSH
47610: EMPTY
47611: LIST
47612: LIST
47613: LIST
47614: ST_TO_ADDR
// DepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47615: LD_ADDR_VAR 0 16
47619: PUSH
47620: LD_INT 2
47622: NEG
47623: PUSH
47624: LD_INT 3
47626: NEG
47627: PUSH
47628: EMPTY
47629: LIST
47630: LIST
47631: PUSH
47632: LD_INT 3
47634: NEG
47635: PUSH
47636: LD_INT 2
47638: NEG
47639: PUSH
47640: EMPTY
47641: LIST
47642: LIST
47643: PUSH
47644: LD_INT 3
47646: NEG
47647: PUSH
47648: LD_INT 3
47650: NEG
47651: PUSH
47652: EMPTY
47653: LIST
47654: LIST
47655: PUSH
47656: EMPTY
47657: LIST
47658: LIST
47659: LIST
47660: ST_TO_ADDR
// DepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
47661: LD_ADDR_VAR 0 17
47665: PUSH
47666: LD_INT 1
47668: NEG
47669: PUSH
47670: LD_INT 3
47672: NEG
47673: PUSH
47674: EMPTY
47675: LIST
47676: LIST
47677: PUSH
47678: LD_INT 0
47680: PUSH
47681: LD_INT 3
47683: NEG
47684: PUSH
47685: EMPTY
47686: LIST
47687: LIST
47688: PUSH
47689: LD_INT 1
47691: PUSH
47692: LD_INT 2
47694: NEG
47695: PUSH
47696: EMPTY
47697: LIST
47698: LIST
47699: PUSH
47700: EMPTY
47701: LIST
47702: LIST
47703: LIST
47704: ST_TO_ADDR
// DepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
47705: LD_ADDR_VAR 0 18
47709: PUSH
47710: LD_INT 2
47712: PUSH
47713: LD_INT 1
47715: NEG
47716: PUSH
47717: EMPTY
47718: LIST
47719: LIST
47720: PUSH
47721: LD_INT 3
47723: PUSH
47724: LD_INT 0
47726: PUSH
47727: EMPTY
47728: LIST
47729: LIST
47730: PUSH
47731: LD_INT 3
47733: PUSH
47734: LD_INT 1
47736: PUSH
47737: EMPTY
47738: LIST
47739: LIST
47740: PUSH
47741: EMPTY
47742: LIST
47743: LIST
47744: LIST
47745: ST_TO_ADDR
// DepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
47746: LD_ADDR_VAR 0 19
47750: PUSH
47751: LD_INT 3
47753: PUSH
47754: LD_INT 2
47756: PUSH
47757: EMPTY
47758: LIST
47759: LIST
47760: PUSH
47761: LD_INT 3
47763: PUSH
47764: LD_INT 3
47766: PUSH
47767: EMPTY
47768: LIST
47769: LIST
47770: PUSH
47771: LD_INT 2
47773: PUSH
47774: LD_INT 3
47776: PUSH
47777: EMPTY
47778: LIST
47779: LIST
47780: PUSH
47781: EMPTY
47782: LIST
47783: LIST
47784: LIST
47785: ST_TO_ADDR
// DepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
47786: LD_ADDR_VAR 0 20
47790: PUSH
47791: LD_INT 1
47793: PUSH
47794: LD_INT 3
47796: PUSH
47797: EMPTY
47798: LIST
47799: LIST
47800: PUSH
47801: LD_INT 0
47803: PUSH
47804: LD_INT 3
47806: PUSH
47807: EMPTY
47808: LIST
47809: LIST
47810: PUSH
47811: LD_INT 1
47813: NEG
47814: PUSH
47815: LD_INT 2
47817: PUSH
47818: EMPTY
47819: LIST
47820: LIST
47821: PUSH
47822: EMPTY
47823: LIST
47824: LIST
47825: LIST
47826: ST_TO_ADDR
// DepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47827: LD_ADDR_VAR 0 21
47831: PUSH
47832: LD_INT 2
47834: NEG
47835: PUSH
47836: LD_INT 1
47838: PUSH
47839: EMPTY
47840: LIST
47841: LIST
47842: PUSH
47843: LD_INT 3
47845: NEG
47846: PUSH
47847: LD_INT 0
47849: PUSH
47850: EMPTY
47851: LIST
47852: LIST
47853: PUSH
47854: LD_INT 3
47856: NEG
47857: PUSH
47858: LD_INT 1
47860: NEG
47861: PUSH
47862: EMPTY
47863: LIST
47864: LIST
47865: PUSH
47866: EMPTY
47867: LIST
47868: LIST
47869: LIST
47870: ST_TO_ADDR
// DepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47871: LD_ADDR_VAR 0 22
47875: PUSH
47876: LD_INT 2
47878: NEG
47879: PUSH
47880: LD_INT 3
47882: NEG
47883: PUSH
47884: EMPTY
47885: LIST
47886: LIST
47887: PUSH
47888: LD_INT 3
47890: NEG
47891: PUSH
47892: LD_INT 2
47894: NEG
47895: PUSH
47896: EMPTY
47897: LIST
47898: LIST
47899: PUSH
47900: LD_INT 3
47902: NEG
47903: PUSH
47904: LD_INT 3
47906: NEG
47907: PUSH
47908: EMPTY
47909: LIST
47910: LIST
47911: PUSH
47912: EMPTY
47913: LIST
47914: LIST
47915: LIST
47916: ST_TO_ADDR
// DepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
47917: LD_ADDR_VAR 0 23
47921: PUSH
47922: LD_INT 0
47924: PUSH
47925: LD_INT 3
47927: NEG
47928: PUSH
47929: EMPTY
47930: LIST
47931: LIST
47932: PUSH
47933: LD_INT 1
47935: NEG
47936: PUSH
47937: LD_INT 4
47939: NEG
47940: PUSH
47941: EMPTY
47942: LIST
47943: LIST
47944: PUSH
47945: LD_INT 1
47947: PUSH
47948: LD_INT 3
47950: NEG
47951: PUSH
47952: EMPTY
47953: LIST
47954: LIST
47955: PUSH
47956: EMPTY
47957: LIST
47958: LIST
47959: LIST
47960: ST_TO_ADDR
// DepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
47961: LD_ADDR_VAR 0 24
47965: PUSH
47966: LD_INT 3
47968: PUSH
47969: LD_INT 0
47971: PUSH
47972: EMPTY
47973: LIST
47974: LIST
47975: PUSH
47976: LD_INT 3
47978: PUSH
47979: LD_INT 1
47981: NEG
47982: PUSH
47983: EMPTY
47984: LIST
47985: LIST
47986: PUSH
47987: LD_INT 4
47989: PUSH
47990: LD_INT 1
47992: PUSH
47993: EMPTY
47994: LIST
47995: LIST
47996: PUSH
47997: EMPTY
47998: LIST
47999: LIST
48000: LIST
48001: ST_TO_ADDR
// DepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
48002: LD_ADDR_VAR 0 25
48006: PUSH
48007: LD_INT 3
48009: PUSH
48010: LD_INT 3
48012: PUSH
48013: EMPTY
48014: LIST
48015: LIST
48016: PUSH
48017: LD_INT 4
48019: PUSH
48020: LD_INT 3
48022: PUSH
48023: EMPTY
48024: LIST
48025: LIST
48026: PUSH
48027: LD_INT 3
48029: PUSH
48030: LD_INT 4
48032: PUSH
48033: EMPTY
48034: LIST
48035: LIST
48036: PUSH
48037: EMPTY
48038: LIST
48039: LIST
48040: LIST
48041: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
48042: LD_ADDR_VAR 0 26
48046: PUSH
48047: LD_INT 0
48049: PUSH
48050: LD_INT 3
48052: PUSH
48053: EMPTY
48054: LIST
48055: LIST
48056: PUSH
48057: LD_INT 1
48059: PUSH
48060: LD_INT 4
48062: PUSH
48063: EMPTY
48064: LIST
48065: LIST
48066: PUSH
48067: LD_INT 1
48069: NEG
48070: PUSH
48071: LD_INT 3
48073: PUSH
48074: EMPTY
48075: LIST
48076: LIST
48077: PUSH
48078: EMPTY
48079: LIST
48080: LIST
48081: LIST
48082: ST_TO_ADDR
// DepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
48083: LD_ADDR_VAR 0 27
48087: PUSH
48088: LD_INT 3
48090: NEG
48091: PUSH
48092: LD_INT 0
48094: PUSH
48095: EMPTY
48096: LIST
48097: LIST
48098: PUSH
48099: LD_INT 3
48101: NEG
48102: PUSH
48103: LD_INT 1
48105: PUSH
48106: EMPTY
48107: LIST
48108: LIST
48109: PUSH
48110: LD_INT 4
48112: NEG
48113: PUSH
48114: LD_INT 1
48116: NEG
48117: PUSH
48118: EMPTY
48119: LIST
48120: LIST
48121: PUSH
48122: EMPTY
48123: LIST
48124: LIST
48125: LIST
48126: ST_TO_ADDR
// DepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
48127: LD_ADDR_VAR 0 28
48131: PUSH
48132: LD_INT 3
48134: NEG
48135: PUSH
48136: LD_INT 3
48138: NEG
48139: PUSH
48140: EMPTY
48141: LIST
48142: LIST
48143: PUSH
48144: LD_INT 3
48146: NEG
48147: PUSH
48148: LD_INT 4
48150: NEG
48151: PUSH
48152: EMPTY
48153: LIST
48154: LIST
48155: PUSH
48156: LD_INT 4
48158: NEG
48159: PUSH
48160: LD_INT 3
48162: NEG
48163: PUSH
48164: EMPTY
48165: LIST
48166: LIST
48167: PUSH
48168: EMPTY
48169: LIST
48170: LIST
48171: LIST
48172: ST_TO_ADDR
// Factory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
48173: LD_ADDR_VAR 0 29
48177: PUSH
48178: LD_INT 1
48180: NEG
48181: PUSH
48182: LD_INT 3
48184: NEG
48185: PUSH
48186: EMPTY
48187: LIST
48188: LIST
48189: PUSH
48190: LD_INT 0
48192: PUSH
48193: LD_INT 3
48195: NEG
48196: PUSH
48197: EMPTY
48198: LIST
48199: LIST
48200: PUSH
48201: LD_INT 1
48203: PUSH
48204: LD_INT 2
48206: NEG
48207: PUSH
48208: EMPTY
48209: LIST
48210: LIST
48211: PUSH
48212: LD_INT 1
48214: NEG
48215: PUSH
48216: LD_INT 4
48218: NEG
48219: PUSH
48220: EMPTY
48221: LIST
48222: LIST
48223: PUSH
48224: LD_INT 0
48226: PUSH
48227: LD_INT 4
48229: NEG
48230: PUSH
48231: EMPTY
48232: LIST
48233: LIST
48234: PUSH
48235: LD_INT 1
48237: PUSH
48238: LD_INT 3
48240: NEG
48241: PUSH
48242: EMPTY
48243: LIST
48244: LIST
48245: PUSH
48246: LD_INT 1
48248: NEG
48249: PUSH
48250: LD_INT 5
48252: NEG
48253: PUSH
48254: EMPTY
48255: LIST
48256: LIST
48257: PUSH
48258: LD_INT 0
48260: PUSH
48261: LD_INT 5
48263: NEG
48264: PUSH
48265: EMPTY
48266: LIST
48267: LIST
48268: PUSH
48269: LD_INT 1
48271: PUSH
48272: LD_INT 4
48274: NEG
48275: PUSH
48276: EMPTY
48277: LIST
48278: LIST
48279: PUSH
48280: LD_INT 1
48282: NEG
48283: PUSH
48284: LD_INT 6
48286: NEG
48287: PUSH
48288: EMPTY
48289: LIST
48290: LIST
48291: PUSH
48292: LD_INT 0
48294: PUSH
48295: LD_INT 6
48297: NEG
48298: PUSH
48299: EMPTY
48300: LIST
48301: LIST
48302: PUSH
48303: LD_INT 1
48305: PUSH
48306: LD_INT 5
48308: NEG
48309: PUSH
48310: EMPTY
48311: LIST
48312: LIST
48313: PUSH
48314: EMPTY
48315: LIST
48316: LIST
48317: LIST
48318: LIST
48319: LIST
48320: LIST
48321: LIST
48322: LIST
48323: LIST
48324: LIST
48325: LIST
48326: LIST
48327: ST_TO_ADDR
// Factory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
48328: LD_ADDR_VAR 0 30
48332: PUSH
48333: LD_INT 2
48335: PUSH
48336: LD_INT 1
48338: NEG
48339: PUSH
48340: EMPTY
48341: LIST
48342: LIST
48343: PUSH
48344: LD_INT 3
48346: PUSH
48347: LD_INT 0
48349: PUSH
48350: EMPTY
48351: LIST
48352: LIST
48353: PUSH
48354: LD_INT 3
48356: PUSH
48357: LD_INT 1
48359: PUSH
48360: EMPTY
48361: LIST
48362: LIST
48363: PUSH
48364: LD_INT 3
48366: PUSH
48367: LD_INT 1
48369: NEG
48370: PUSH
48371: EMPTY
48372: LIST
48373: LIST
48374: PUSH
48375: LD_INT 4
48377: PUSH
48378: LD_INT 0
48380: PUSH
48381: EMPTY
48382: LIST
48383: LIST
48384: PUSH
48385: LD_INT 4
48387: PUSH
48388: LD_INT 1
48390: PUSH
48391: EMPTY
48392: LIST
48393: LIST
48394: PUSH
48395: LD_INT 4
48397: PUSH
48398: LD_INT 1
48400: NEG
48401: PUSH
48402: EMPTY
48403: LIST
48404: LIST
48405: PUSH
48406: LD_INT 5
48408: PUSH
48409: LD_INT 0
48411: PUSH
48412: EMPTY
48413: LIST
48414: LIST
48415: PUSH
48416: LD_INT 5
48418: PUSH
48419: LD_INT 1
48421: PUSH
48422: EMPTY
48423: LIST
48424: LIST
48425: PUSH
48426: LD_INT 5
48428: PUSH
48429: LD_INT 1
48431: NEG
48432: PUSH
48433: EMPTY
48434: LIST
48435: LIST
48436: PUSH
48437: LD_INT 6
48439: PUSH
48440: LD_INT 0
48442: PUSH
48443: EMPTY
48444: LIST
48445: LIST
48446: PUSH
48447: LD_INT 6
48449: PUSH
48450: LD_INT 1
48452: PUSH
48453: EMPTY
48454: LIST
48455: LIST
48456: PUSH
48457: EMPTY
48458: LIST
48459: LIST
48460: LIST
48461: LIST
48462: LIST
48463: LIST
48464: LIST
48465: LIST
48466: LIST
48467: LIST
48468: LIST
48469: LIST
48470: ST_TO_ADDR
// Factory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
48471: LD_ADDR_VAR 0 31
48475: PUSH
48476: LD_INT 3
48478: PUSH
48479: LD_INT 2
48481: PUSH
48482: EMPTY
48483: LIST
48484: LIST
48485: PUSH
48486: LD_INT 3
48488: PUSH
48489: LD_INT 3
48491: PUSH
48492: EMPTY
48493: LIST
48494: LIST
48495: PUSH
48496: LD_INT 2
48498: PUSH
48499: LD_INT 3
48501: PUSH
48502: EMPTY
48503: LIST
48504: LIST
48505: PUSH
48506: LD_INT 4
48508: PUSH
48509: LD_INT 3
48511: PUSH
48512: EMPTY
48513: LIST
48514: LIST
48515: PUSH
48516: LD_INT 4
48518: PUSH
48519: LD_INT 4
48521: PUSH
48522: EMPTY
48523: LIST
48524: LIST
48525: PUSH
48526: LD_INT 3
48528: PUSH
48529: LD_INT 4
48531: PUSH
48532: EMPTY
48533: LIST
48534: LIST
48535: PUSH
48536: LD_INT 5
48538: PUSH
48539: LD_INT 4
48541: PUSH
48542: EMPTY
48543: LIST
48544: LIST
48545: PUSH
48546: LD_INT 5
48548: PUSH
48549: LD_INT 5
48551: PUSH
48552: EMPTY
48553: LIST
48554: LIST
48555: PUSH
48556: LD_INT 4
48558: PUSH
48559: LD_INT 5
48561: PUSH
48562: EMPTY
48563: LIST
48564: LIST
48565: PUSH
48566: LD_INT 6
48568: PUSH
48569: LD_INT 5
48571: PUSH
48572: EMPTY
48573: LIST
48574: LIST
48575: PUSH
48576: LD_INT 6
48578: PUSH
48579: LD_INT 6
48581: PUSH
48582: EMPTY
48583: LIST
48584: LIST
48585: PUSH
48586: LD_INT 5
48588: PUSH
48589: LD_INT 6
48591: PUSH
48592: EMPTY
48593: LIST
48594: LIST
48595: PUSH
48596: EMPTY
48597: LIST
48598: LIST
48599: LIST
48600: LIST
48601: LIST
48602: LIST
48603: LIST
48604: LIST
48605: LIST
48606: LIST
48607: LIST
48608: LIST
48609: ST_TO_ADDR
// Factory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
48610: LD_ADDR_VAR 0 32
48614: PUSH
48615: LD_INT 1
48617: PUSH
48618: LD_INT 3
48620: PUSH
48621: EMPTY
48622: LIST
48623: LIST
48624: PUSH
48625: LD_INT 0
48627: PUSH
48628: LD_INT 3
48630: PUSH
48631: EMPTY
48632: LIST
48633: LIST
48634: PUSH
48635: LD_INT 1
48637: NEG
48638: PUSH
48639: LD_INT 2
48641: PUSH
48642: EMPTY
48643: LIST
48644: LIST
48645: PUSH
48646: LD_INT 1
48648: PUSH
48649: LD_INT 4
48651: PUSH
48652: EMPTY
48653: LIST
48654: LIST
48655: PUSH
48656: LD_INT 0
48658: PUSH
48659: LD_INT 4
48661: PUSH
48662: EMPTY
48663: LIST
48664: LIST
48665: PUSH
48666: LD_INT 1
48668: NEG
48669: PUSH
48670: LD_INT 3
48672: PUSH
48673: EMPTY
48674: LIST
48675: LIST
48676: PUSH
48677: LD_INT 1
48679: PUSH
48680: LD_INT 5
48682: PUSH
48683: EMPTY
48684: LIST
48685: LIST
48686: PUSH
48687: LD_INT 0
48689: PUSH
48690: LD_INT 5
48692: PUSH
48693: EMPTY
48694: LIST
48695: LIST
48696: PUSH
48697: LD_INT 1
48699: NEG
48700: PUSH
48701: LD_INT 4
48703: PUSH
48704: EMPTY
48705: LIST
48706: LIST
48707: PUSH
48708: LD_INT 1
48710: PUSH
48711: LD_INT 6
48713: PUSH
48714: EMPTY
48715: LIST
48716: LIST
48717: PUSH
48718: LD_INT 0
48720: PUSH
48721: LD_INT 6
48723: PUSH
48724: EMPTY
48725: LIST
48726: LIST
48727: PUSH
48728: LD_INT 1
48730: NEG
48731: PUSH
48732: LD_INT 5
48734: PUSH
48735: EMPTY
48736: LIST
48737: LIST
48738: PUSH
48739: EMPTY
48740: LIST
48741: LIST
48742: LIST
48743: LIST
48744: LIST
48745: LIST
48746: LIST
48747: LIST
48748: LIST
48749: LIST
48750: LIST
48751: LIST
48752: ST_TO_ADDR
// Factory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
48753: LD_ADDR_VAR 0 33
48757: PUSH
48758: LD_INT 2
48760: NEG
48761: PUSH
48762: LD_INT 1
48764: PUSH
48765: EMPTY
48766: LIST
48767: LIST
48768: PUSH
48769: LD_INT 3
48771: NEG
48772: PUSH
48773: LD_INT 0
48775: PUSH
48776: EMPTY
48777: LIST
48778: LIST
48779: PUSH
48780: LD_INT 3
48782: NEG
48783: PUSH
48784: LD_INT 1
48786: NEG
48787: PUSH
48788: EMPTY
48789: LIST
48790: LIST
48791: PUSH
48792: LD_INT 3
48794: NEG
48795: PUSH
48796: LD_INT 1
48798: PUSH
48799: EMPTY
48800: LIST
48801: LIST
48802: PUSH
48803: LD_INT 4
48805: NEG
48806: PUSH
48807: LD_INT 0
48809: PUSH
48810: EMPTY
48811: LIST
48812: LIST
48813: PUSH
48814: LD_INT 4
48816: NEG
48817: PUSH
48818: LD_INT 1
48820: NEG
48821: PUSH
48822: EMPTY
48823: LIST
48824: LIST
48825: PUSH
48826: LD_INT 4
48828: NEG
48829: PUSH
48830: LD_INT 1
48832: PUSH
48833: EMPTY
48834: LIST
48835: LIST
48836: PUSH
48837: LD_INT 5
48839: NEG
48840: PUSH
48841: LD_INT 0
48843: PUSH
48844: EMPTY
48845: LIST
48846: LIST
48847: PUSH
48848: LD_INT 5
48850: NEG
48851: PUSH
48852: LD_INT 1
48854: NEG
48855: PUSH
48856: EMPTY
48857: LIST
48858: LIST
48859: PUSH
48860: LD_INT 5
48862: NEG
48863: PUSH
48864: LD_INT 1
48866: PUSH
48867: EMPTY
48868: LIST
48869: LIST
48870: PUSH
48871: LD_INT 6
48873: NEG
48874: PUSH
48875: LD_INT 0
48877: PUSH
48878: EMPTY
48879: LIST
48880: LIST
48881: PUSH
48882: LD_INT 6
48884: NEG
48885: PUSH
48886: LD_INT 1
48888: NEG
48889: PUSH
48890: EMPTY
48891: LIST
48892: LIST
48893: PUSH
48894: EMPTY
48895: LIST
48896: LIST
48897: LIST
48898: LIST
48899: LIST
48900: LIST
48901: LIST
48902: LIST
48903: LIST
48904: LIST
48905: LIST
48906: LIST
48907: ST_TO_ADDR
// Factory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
48908: LD_ADDR_VAR 0 34
48912: PUSH
48913: LD_INT 2
48915: NEG
48916: PUSH
48917: LD_INT 3
48919: NEG
48920: PUSH
48921: EMPTY
48922: LIST
48923: LIST
48924: PUSH
48925: LD_INT 3
48927: NEG
48928: PUSH
48929: LD_INT 2
48931: NEG
48932: PUSH
48933: EMPTY
48934: LIST
48935: LIST
48936: PUSH
48937: LD_INT 3
48939: NEG
48940: PUSH
48941: LD_INT 3
48943: NEG
48944: PUSH
48945: EMPTY
48946: LIST
48947: LIST
48948: PUSH
48949: LD_INT 3
48951: NEG
48952: PUSH
48953: LD_INT 4
48955: NEG
48956: PUSH
48957: EMPTY
48958: LIST
48959: LIST
48960: PUSH
48961: LD_INT 4
48963: NEG
48964: PUSH
48965: LD_INT 3
48967: NEG
48968: PUSH
48969: EMPTY
48970: LIST
48971: LIST
48972: PUSH
48973: LD_INT 4
48975: NEG
48976: PUSH
48977: LD_INT 4
48979: NEG
48980: PUSH
48981: EMPTY
48982: LIST
48983: LIST
48984: PUSH
48985: LD_INT 4
48987: NEG
48988: PUSH
48989: LD_INT 5
48991: NEG
48992: PUSH
48993: EMPTY
48994: LIST
48995: LIST
48996: PUSH
48997: LD_INT 5
48999: NEG
49000: PUSH
49001: LD_INT 4
49003: NEG
49004: PUSH
49005: EMPTY
49006: LIST
49007: LIST
49008: PUSH
49009: LD_INT 5
49011: NEG
49012: PUSH
49013: LD_INT 5
49015: NEG
49016: PUSH
49017: EMPTY
49018: LIST
49019: LIST
49020: PUSH
49021: LD_INT 5
49023: NEG
49024: PUSH
49025: LD_INT 6
49027: NEG
49028: PUSH
49029: EMPTY
49030: LIST
49031: LIST
49032: PUSH
49033: LD_INT 6
49035: NEG
49036: PUSH
49037: LD_INT 5
49039: NEG
49040: PUSH
49041: EMPTY
49042: LIST
49043: LIST
49044: PUSH
49045: LD_INT 6
49047: NEG
49048: PUSH
49049: LD_INT 6
49051: NEG
49052: PUSH
49053: EMPTY
49054: LIST
49055: LIST
49056: PUSH
49057: EMPTY
49058: LIST
49059: LIST
49060: LIST
49061: LIST
49062: LIST
49063: LIST
49064: LIST
49065: LIST
49066: LIST
49067: LIST
49068: LIST
49069: LIST
49070: ST_TO_ADDR
// Lab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
49071: LD_ADDR_VAR 0 41
49075: PUSH
49076: LD_INT 0
49078: PUSH
49079: LD_INT 2
49081: NEG
49082: PUSH
49083: EMPTY
49084: LIST
49085: LIST
49086: PUSH
49087: LD_INT 1
49089: NEG
49090: PUSH
49091: LD_INT 3
49093: NEG
49094: PUSH
49095: EMPTY
49096: LIST
49097: LIST
49098: PUSH
49099: LD_INT 1
49101: PUSH
49102: LD_INT 2
49104: NEG
49105: PUSH
49106: EMPTY
49107: LIST
49108: LIST
49109: PUSH
49110: EMPTY
49111: LIST
49112: LIST
49113: LIST
49114: ST_TO_ADDR
// Lab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
49115: LD_ADDR_VAR 0 42
49119: PUSH
49120: LD_INT 2
49122: PUSH
49123: LD_INT 0
49125: PUSH
49126: EMPTY
49127: LIST
49128: LIST
49129: PUSH
49130: LD_INT 2
49132: PUSH
49133: LD_INT 1
49135: NEG
49136: PUSH
49137: EMPTY
49138: LIST
49139: LIST
49140: PUSH
49141: LD_INT 3
49143: PUSH
49144: LD_INT 1
49146: PUSH
49147: EMPTY
49148: LIST
49149: LIST
49150: PUSH
49151: EMPTY
49152: LIST
49153: LIST
49154: LIST
49155: ST_TO_ADDR
// Lab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
49156: LD_ADDR_VAR 0 43
49160: PUSH
49161: LD_INT 2
49163: PUSH
49164: LD_INT 2
49166: PUSH
49167: EMPTY
49168: LIST
49169: LIST
49170: PUSH
49171: LD_INT 3
49173: PUSH
49174: LD_INT 2
49176: PUSH
49177: EMPTY
49178: LIST
49179: LIST
49180: PUSH
49181: LD_INT 2
49183: PUSH
49184: LD_INT 3
49186: PUSH
49187: EMPTY
49188: LIST
49189: LIST
49190: PUSH
49191: EMPTY
49192: LIST
49193: LIST
49194: LIST
49195: ST_TO_ADDR
// Lab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
49196: LD_ADDR_VAR 0 44
49200: PUSH
49201: LD_INT 0
49203: PUSH
49204: LD_INT 2
49206: PUSH
49207: EMPTY
49208: LIST
49209: LIST
49210: PUSH
49211: LD_INT 1
49213: PUSH
49214: LD_INT 3
49216: PUSH
49217: EMPTY
49218: LIST
49219: LIST
49220: PUSH
49221: LD_INT 1
49223: NEG
49224: PUSH
49225: LD_INT 2
49227: PUSH
49228: EMPTY
49229: LIST
49230: LIST
49231: PUSH
49232: EMPTY
49233: LIST
49234: LIST
49235: LIST
49236: ST_TO_ADDR
// Lab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49237: LD_ADDR_VAR 0 45
49241: PUSH
49242: LD_INT 2
49244: NEG
49245: PUSH
49246: LD_INT 0
49248: PUSH
49249: EMPTY
49250: LIST
49251: LIST
49252: PUSH
49253: LD_INT 2
49255: NEG
49256: PUSH
49257: LD_INT 1
49259: PUSH
49260: EMPTY
49261: LIST
49262: LIST
49263: PUSH
49264: LD_INT 3
49266: NEG
49267: PUSH
49268: LD_INT 1
49270: NEG
49271: PUSH
49272: EMPTY
49273: LIST
49274: LIST
49275: PUSH
49276: EMPTY
49277: LIST
49278: LIST
49279: LIST
49280: ST_TO_ADDR
// Lab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
49281: LD_ADDR_VAR 0 46
49285: PUSH
49286: LD_INT 2
49288: NEG
49289: PUSH
49290: LD_INT 2
49292: NEG
49293: PUSH
49294: EMPTY
49295: LIST
49296: LIST
49297: PUSH
49298: LD_INT 2
49300: NEG
49301: PUSH
49302: LD_INT 3
49304: NEG
49305: PUSH
49306: EMPTY
49307: LIST
49308: LIST
49309: PUSH
49310: LD_INT 3
49312: NEG
49313: PUSH
49314: LD_INT 2
49316: NEG
49317: PUSH
49318: EMPTY
49319: LIST
49320: LIST
49321: PUSH
49322: EMPTY
49323: LIST
49324: LIST
49325: LIST
49326: ST_TO_ADDR
// ControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
49327: LD_ADDR_VAR 0 47
49331: PUSH
49332: LD_INT 2
49334: NEG
49335: PUSH
49336: LD_INT 3
49338: NEG
49339: PUSH
49340: EMPTY
49341: LIST
49342: LIST
49343: PUSH
49344: LD_INT 1
49346: NEG
49347: PUSH
49348: LD_INT 3
49350: NEG
49351: PUSH
49352: EMPTY
49353: LIST
49354: LIST
49355: PUSH
49356: EMPTY
49357: LIST
49358: LIST
49359: ST_TO_ADDR
// ControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
49360: LD_ADDR_VAR 0 48
49364: PUSH
49365: LD_INT 1
49367: PUSH
49368: LD_INT 2
49370: NEG
49371: PUSH
49372: EMPTY
49373: LIST
49374: LIST
49375: PUSH
49376: LD_INT 2
49378: PUSH
49379: LD_INT 1
49381: NEG
49382: PUSH
49383: EMPTY
49384: LIST
49385: LIST
49386: PUSH
49387: EMPTY
49388: LIST
49389: LIST
49390: ST_TO_ADDR
// ControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
49391: LD_ADDR_VAR 0 49
49395: PUSH
49396: LD_INT 3
49398: PUSH
49399: LD_INT 1
49401: PUSH
49402: EMPTY
49403: LIST
49404: LIST
49405: PUSH
49406: LD_INT 3
49408: PUSH
49409: LD_INT 2
49411: PUSH
49412: EMPTY
49413: LIST
49414: LIST
49415: PUSH
49416: EMPTY
49417: LIST
49418: LIST
49419: ST_TO_ADDR
// ControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
49420: LD_ADDR_VAR 0 50
49424: PUSH
49425: LD_INT 2
49427: PUSH
49428: LD_INT 3
49430: PUSH
49431: EMPTY
49432: LIST
49433: LIST
49434: PUSH
49435: LD_INT 1
49437: PUSH
49438: LD_INT 3
49440: PUSH
49441: EMPTY
49442: LIST
49443: LIST
49444: PUSH
49445: EMPTY
49446: LIST
49447: LIST
49448: ST_TO_ADDR
// ControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
49449: LD_ADDR_VAR 0 51
49453: PUSH
49454: LD_INT 1
49456: NEG
49457: PUSH
49458: LD_INT 2
49460: PUSH
49461: EMPTY
49462: LIST
49463: LIST
49464: PUSH
49465: LD_INT 2
49467: NEG
49468: PUSH
49469: LD_INT 1
49471: PUSH
49472: EMPTY
49473: LIST
49474: LIST
49475: PUSH
49476: EMPTY
49477: LIST
49478: LIST
49479: ST_TO_ADDR
// ControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
49480: LD_ADDR_VAR 0 52
49484: PUSH
49485: LD_INT 3
49487: NEG
49488: PUSH
49489: LD_INT 1
49491: NEG
49492: PUSH
49493: EMPTY
49494: LIST
49495: LIST
49496: PUSH
49497: LD_INT 3
49499: NEG
49500: PUSH
49501: LD_INT 2
49503: NEG
49504: PUSH
49505: EMPTY
49506: LIST
49507: LIST
49508: PUSH
49509: EMPTY
49510: LIST
49511: LIST
49512: ST_TO_ADDR
// Barracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
49513: LD_ADDR_VAR 0 53
49517: PUSH
49518: LD_INT 1
49520: NEG
49521: PUSH
49522: LD_INT 3
49524: NEG
49525: PUSH
49526: EMPTY
49527: LIST
49528: LIST
49529: PUSH
49530: LD_INT 0
49532: PUSH
49533: LD_INT 3
49535: NEG
49536: PUSH
49537: EMPTY
49538: LIST
49539: LIST
49540: PUSH
49541: LD_INT 1
49543: PUSH
49544: LD_INT 2
49546: NEG
49547: PUSH
49548: EMPTY
49549: LIST
49550: LIST
49551: PUSH
49552: EMPTY
49553: LIST
49554: LIST
49555: LIST
49556: ST_TO_ADDR
// Barracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
49557: LD_ADDR_VAR 0 54
49561: PUSH
49562: LD_INT 2
49564: PUSH
49565: LD_INT 1
49567: NEG
49568: PUSH
49569: EMPTY
49570: LIST
49571: LIST
49572: PUSH
49573: LD_INT 3
49575: PUSH
49576: LD_INT 0
49578: PUSH
49579: EMPTY
49580: LIST
49581: LIST
49582: PUSH
49583: LD_INT 3
49585: PUSH
49586: LD_INT 1
49588: PUSH
49589: EMPTY
49590: LIST
49591: LIST
49592: PUSH
49593: EMPTY
49594: LIST
49595: LIST
49596: LIST
49597: ST_TO_ADDR
// Barracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
49598: LD_ADDR_VAR 0 55
49602: PUSH
49603: LD_INT 3
49605: PUSH
49606: LD_INT 2
49608: PUSH
49609: EMPTY
49610: LIST
49611: LIST
49612: PUSH
49613: LD_INT 3
49615: PUSH
49616: LD_INT 3
49618: PUSH
49619: EMPTY
49620: LIST
49621: LIST
49622: PUSH
49623: LD_INT 2
49625: PUSH
49626: LD_INT 3
49628: PUSH
49629: EMPTY
49630: LIST
49631: LIST
49632: PUSH
49633: EMPTY
49634: LIST
49635: LIST
49636: LIST
49637: ST_TO_ADDR
// Barracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
49638: LD_ADDR_VAR 0 56
49642: PUSH
49643: LD_INT 1
49645: PUSH
49646: LD_INT 3
49648: PUSH
49649: EMPTY
49650: LIST
49651: LIST
49652: PUSH
49653: LD_INT 0
49655: PUSH
49656: LD_INT 3
49658: PUSH
49659: EMPTY
49660: LIST
49661: LIST
49662: PUSH
49663: LD_INT 1
49665: NEG
49666: PUSH
49667: LD_INT 2
49669: PUSH
49670: EMPTY
49671: LIST
49672: LIST
49673: PUSH
49674: EMPTY
49675: LIST
49676: LIST
49677: LIST
49678: ST_TO_ADDR
// Barracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49679: LD_ADDR_VAR 0 57
49683: PUSH
49684: LD_INT 2
49686: NEG
49687: PUSH
49688: LD_INT 1
49690: PUSH
49691: EMPTY
49692: LIST
49693: LIST
49694: PUSH
49695: LD_INT 3
49697: NEG
49698: PUSH
49699: LD_INT 0
49701: PUSH
49702: EMPTY
49703: LIST
49704: LIST
49705: PUSH
49706: LD_INT 3
49708: NEG
49709: PUSH
49710: LD_INT 1
49712: NEG
49713: PUSH
49714: EMPTY
49715: LIST
49716: LIST
49717: PUSH
49718: EMPTY
49719: LIST
49720: LIST
49721: LIST
49722: ST_TO_ADDR
// Barracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49723: LD_ADDR_VAR 0 58
49727: PUSH
49728: LD_INT 2
49730: NEG
49731: PUSH
49732: LD_INT 3
49734: NEG
49735: PUSH
49736: EMPTY
49737: LIST
49738: LIST
49739: PUSH
49740: LD_INT 3
49742: NEG
49743: PUSH
49744: LD_INT 2
49746: NEG
49747: PUSH
49748: EMPTY
49749: LIST
49750: LIST
49751: PUSH
49752: LD_INT 3
49754: NEG
49755: PUSH
49756: LD_INT 3
49758: NEG
49759: PUSH
49760: EMPTY
49761: LIST
49762: LIST
49763: PUSH
49764: EMPTY
49765: LIST
49766: LIST
49767: LIST
49768: ST_TO_ADDR
// Bunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
49769: LD_ADDR_VAR 0 59
49773: PUSH
49774: LD_INT 1
49776: NEG
49777: PUSH
49778: LD_INT 2
49780: NEG
49781: PUSH
49782: EMPTY
49783: LIST
49784: LIST
49785: PUSH
49786: LD_INT 0
49788: PUSH
49789: LD_INT 2
49791: NEG
49792: PUSH
49793: EMPTY
49794: LIST
49795: LIST
49796: PUSH
49797: LD_INT 1
49799: PUSH
49800: LD_INT 1
49802: NEG
49803: PUSH
49804: EMPTY
49805: LIST
49806: LIST
49807: PUSH
49808: EMPTY
49809: LIST
49810: LIST
49811: LIST
49812: ST_TO_ADDR
// Bunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
49813: LD_ADDR_VAR 0 60
49817: PUSH
49818: LD_INT 1
49820: PUSH
49821: LD_INT 1
49823: NEG
49824: PUSH
49825: EMPTY
49826: LIST
49827: LIST
49828: PUSH
49829: LD_INT 2
49831: PUSH
49832: LD_INT 0
49834: PUSH
49835: EMPTY
49836: LIST
49837: LIST
49838: PUSH
49839: LD_INT 2
49841: PUSH
49842: LD_INT 1
49844: PUSH
49845: EMPTY
49846: LIST
49847: LIST
49848: PUSH
49849: EMPTY
49850: LIST
49851: LIST
49852: LIST
49853: ST_TO_ADDR
// Bunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
49854: LD_ADDR_VAR 0 61
49858: PUSH
49859: LD_INT 2
49861: PUSH
49862: LD_INT 1
49864: PUSH
49865: EMPTY
49866: LIST
49867: LIST
49868: PUSH
49869: LD_INT 2
49871: PUSH
49872: LD_INT 2
49874: PUSH
49875: EMPTY
49876: LIST
49877: LIST
49878: PUSH
49879: LD_INT 1
49881: PUSH
49882: LD_INT 2
49884: PUSH
49885: EMPTY
49886: LIST
49887: LIST
49888: PUSH
49889: EMPTY
49890: LIST
49891: LIST
49892: LIST
49893: ST_TO_ADDR
// Bunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
49894: LD_ADDR_VAR 0 62
49898: PUSH
49899: LD_INT 1
49901: PUSH
49902: LD_INT 2
49904: PUSH
49905: EMPTY
49906: LIST
49907: LIST
49908: PUSH
49909: LD_INT 0
49911: PUSH
49912: LD_INT 2
49914: PUSH
49915: EMPTY
49916: LIST
49917: LIST
49918: PUSH
49919: LD_INT 1
49921: NEG
49922: PUSH
49923: LD_INT 1
49925: PUSH
49926: EMPTY
49927: LIST
49928: LIST
49929: PUSH
49930: EMPTY
49931: LIST
49932: LIST
49933: LIST
49934: ST_TO_ADDR
// Bunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
49935: LD_ADDR_VAR 0 63
49939: PUSH
49940: LD_INT 1
49942: NEG
49943: PUSH
49944: LD_INT 1
49946: PUSH
49947: EMPTY
49948: LIST
49949: LIST
49950: PUSH
49951: LD_INT 2
49953: NEG
49954: PUSH
49955: LD_INT 0
49957: PUSH
49958: EMPTY
49959: LIST
49960: LIST
49961: PUSH
49962: LD_INT 2
49964: NEG
49965: PUSH
49966: LD_INT 1
49968: NEG
49969: PUSH
49970: EMPTY
49971: LIST
49972: LIST
49973: PUSH
49974: EMPTY
49975: LIST
49976: LIST
49977: LIST
49978: ST_TO_ADDR
// Bunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49979: LD_ADDR_VAR 0 64
49983: PUSH
49984: LD_INT 1
49986: NEG
49987: PUSH
49988: LD_INT 2
49990: NEG
49991: PUSH
49992: EMPTY
49993: LIST
49994: LIST
49995: PUSH
49996: LD_INT 2
49998: NEG
49999: PUSH
50000: LD_INT 1
50002: NEG
50003: PUSH
50004: EMPTY
50005: LIST
50006: LIST
50007: PUSH
50008: LD_INT 2
50010: NEG
50011: PUSH
50012: LD_INT 2
50014: NEG
50015: PUSH
50016: EMPTY
50017: LIST
50018: LIST
50019: PUSH
50020: EMPTY
50021: LIST
50022: LIST
50023: LIST
50024: ST_TO_ADDR
// end ; 2 :
50025: GO 53291
50027: LD_INT 2
50029: DOUBLE
50030: EQUAL
50031: IFTRUE 50035
50033: GO 53290
50035: POP
// begin Factory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
50036: LD_ADDR_VAR 0 29
50040: PUSH
50041: LD_INT 4
50043: PUSH
50044: LD_INT 0
50046: PUSH
50047: EMPTY
50048: LIST
50049: LIST
50050: PUSH
50051: LD_INT 4
50053: PUSH
50054: LD_INT 1
50056: NEG
50057: PUSH
50058: EMPTY
50059: LIST
50060: LIST
50061: PUSH
50062: LD_INT 5
50064: PUSH
50065: LD_INT 0
50067: PUSH
50068: EMPTY
50069: LIST
50070: LIST
50071: PUSH
50072: LD_INT 5
50074: PUSH
50075: LD_INT 1
50077: PUSH
50078: EMPTY
50079: LIST
50080: LIST
50081: PUSH
50082: LD_INT 4
50084: PUSH
50085: LD_INT 1
50087: PUSH
50088: EMPTY
50089: LIST
50090: LIST
50091: PUSH
50092: LD_INT 3
50094: PUSH
50095: LD_INT 0
50097: PUSH
50098: EMPTY
50099: LIST
50100: LIST
50101: PUSH
50102: LD_INT 3
50104: PUSH
50105: LD_INT 1
50107: NEG
50108: PUSH
50109: EMPTY
50110: LIST
50111: LIST
50112: PUSH
50113: LD_INT 3
50115: PUSH
50116: LD_INT 2
50118: NEG
50119: PUSH
50120: EMPTY
50121: LIST
50122: LIST
50123: PUSH
50124: LD_INT 5
50126: PUSH
50127: LD_INT 2
50129: PUSH
50130: EMPTY
50131: LIST
50132: LIST
50133: PUSH
50134: LD_INT 3
50136: PUSH
50137: LD_INT 3
50139: PUSH
50140: EMPTY
50141: LIST
50142: LIST
50143: PUSH
50144: LD_INT 3
50146: PUSH
50147: LD_INT 2
50149: PUSH
50150: EMPTY
50151: LIST
50152: LIST
50153: PUSH
50154: LD_INT 4
50156: PUSH
50157: LD_INT 3
50159: PUSH
50160: EMPTY
50161: LIST
50162: LIST
50163: PUSH
50164: LD_INT 4
50166: PUSH
50167: LD_INT 4
50169: PUSH
50170: EMPTY
50171: LIST
50172: LIST
50173: PUSH
50174: LD_INT 3
50176: PUSH
50177: LD_INT 4
50179: PUSH
50180: EMPTY
50181: LIST
50182: LIST
50183: PUSH
50184: LD_INT 2
50186: PUSH
50187: LD_INT 3
50189: PUSH
50190: EMPTY
50191: LIST
50192: LIST
50193: PUSH
50194: LD_INT 2
50196: PUSH
50197: LD_INT 2
50199: PUSH
50200: EMPTY
50201: LIST
50202: LIST
50203: PUSH
50204: LD_INT 4
50206: PUSH
50207: LD_INT 2
50209: PUSH
50210: EMPTY
50211: LIST
50212: LIST
50213: PUSH
50214: LD_INT 2
50216: PUSH
50217: LD_INT 4
50219: PUSH
50220: EMPTY
50221: LIST
50222: LIST
50223: PUSH
50224: LD_INT 0
50226: PUSH
50227: LD_INT 4
50229: PUSH
50230: EMPTY
50231: LIST
50232: LIST
50233: PUSH
50234: LD_INT 0
50236: PUSH
50237: LD_INT 3
50239: PUSH
50240: EMPTY
50241: LIST
50242: LIST
50243: PUSH
50244: LD_INT 1
50246: PUSH
50247: LD_INT 4
50249: PUSH
50250: EMPTY
50251: LIST
50252: LIST
50253: PUSH
50254: LD_INT 1
50256: PUSH
50257: LD_INT 5
50259: PUSH
50260: EMPTY
50261: LIST
50262: LIST
50263: PUSH
50264: LD_INT 0
50266: PUSH
50267: LD_INT 5
50269: PUSH
50270: EMPTY
50271: LIST
50272: LIST
50273: PUSH
50274: LD_INT 1
50276: NEG
50277: PUSH
50278: LD_INT 4
50280: PUSH
50281: EMPTY
50282: LIST
50283: LIST
50284: PUSH
50285: LD_INT 1
50287: NEG
50288: PUSH
50289: LD_INT 3
50291: PUSH
50292: EMPTY
50293: LIST
50294: LIST
50295: PUSH
50296: LD_INT 2
50298: PUSH
50299: LD_INT 5
50301: PUSH
50302: EMPTY
50303: LIST
50304: LIST
50305: PUSH
50306: LD_INT 2
50308: NEG
50309: PUSH
50310: LD_INT 3
50312: PUSH
50313: EMPTY
50314: LIST
50315: LIST
50316: PUSH
50317: LD_INT 3
50319: NEG
50320: PUSH
50321: LD_INT 0
50323: PUSH
50324: EMPTY
50325: LIST
50326: LIST
50327: PUSH
50328: LD_INT 3
50330: NEG
50331: PUSH
50332: LD_INT 1
50334: NEG
50335: PUSH
50336: EMPTY
50337: LIST
50338: LIST
50339: PUSH
50340: LD_INT 2
50342: NEG
50343: PUSH
50344: LD_INT 0
50346: PUSH
50347: EMPTY
50348: LIST
50349: LIST
50350: PUSH
50351: LD_INT 2
50353: NEG
50354: PUSH
50355: LD_INT 1
50357: PUSH
50358: EMPTY
50359: LIST
50360: LIST
50361: PUSH
50362: LD_INT 3
50364: NEG
50365: PUSH
50366: LD_INT 1
50368: PUSH
50369: EMPTY
50370: LIST
50371: LIST
50372: PUSH
50373: LD_INT 4
50375: NEG
50376: PUSH
50377: LD_INT 0
50379: PUSH
50380: EMPTY
50381: LIST
50382: LIST
50383: PUSH
50384: LD_INT 4
50386: NEG
50387: PUSH
50388: LD_INT 1
50390: NEG
50391: PUSH
50392: EMPTY
50393: LIST
50394: LIST
50395: PUSH
50396: LD_INT 4
50398: NEG
50399: PUSH
50400: LD_INT 2
50402: NEG
50403: PUSH
50404: EMPTY
50405: LIST
50406: LIST
50407: PUSH
50408: LD_INT 2
50410: NEG
50411: PUSH
50412: LD_INT 2
50414: PUSH
50415: EMPTY
50416: LIST
50417: LIST
50418: PUSH
50419: LD_INT 4
50421: NEG
50422: PUSH
50423: LD_INT 4
50425: NEG
50426: PUSH
50427: EMPTY
50428: LIST
50429: LIST
50430: PUSH
50431: LD_INT 4
50433: NEG
50434: PUSH
50435: LD_INT 5
50437: NEG
50438: PUSH
50439: EMPTY
50440: LIST
50441: LIST
50442: PUSH
50443: LD_INT 3
50445: NEG
50446: PUSH
50447: LD_INT 4
50449: NEG
50450: PUSH
50451: EMPTY
50452: LIST
50453: LIST
50454: PUSH
50455: LD_INT 3
50457: NEG
50458: PUSH
50459: LD_INT 3
50461: NEG
50462: PUSH
50463: EMPTY
50464: LIST
50465: LIST
50466: PUSH
50467: LD_INT 4
50469: NEG
50470: PUSH
50471: LD_INT 3
50473: NEG
50474: PUSH
50475: EMPTY
50476: LIST
50477: LIST
50478: PUSH
50479: LD_INT 5
50481: NEG
50482: PUSH
50483: LD_INT 4
50485: NEG
50486: PUSH
50487: EMPTY
50488: LIST
50489: LIST
50490: PUSH
50491: LD_INT 5
50493: NEG
50494: PUSH
50495: LD_INT 5
50497: NEG
50498: PUSH
50499: EMPTY
50500: LIST
50501: LIST
50502: PUSH
50503: LD_INT 3
50505: NEG
50506: PUSH
50507: LD_INT 5
50509: NEG
50510: PUSH
50511: EMPTY
50512: LIST
50513: LIST
50514: PUSH
50515: LD_INT 5
50517: NEG
50518: PUSH
50519: LD_INT 3
50521: NEG
50522: PUSH
50523: EMPTY
50524: LIST
50525: LIST
50526: PUSH
50527: EMPTY
50528: LIST
50529: LIST
50530: LIST
50531: LIST
50532: LIST
50533: LIST
50534: LIST
50535: LIST
50536: LIST
50537: LIST
50538: LIST
50539: LIST
50540: LIST
50541: LIST
50542: LIST
50543: LIST
50544: LIST
50545: LIST
50546: LIST
50547: LIST
50548: LIST
50549: LIST
50550: LIST
50551: LIST
50552: LIST
50553: LIST
50554: LIST
50555: LIST
50556: LIST
50557: LIST
50558: LIST
50559: LIST
50560: LIST
50561: LIST
50562: LIST
50563: LIST
50564: LIST
50565: LIST
50566: LIST
50567: LIST
50568: LIST
50569: LIST
50570: LIST
50571: LIST
50572: LIST
50573: ST_TO_ADDR
// Factory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
50574: LD_ADDR_VAR 0 30
50578: PUSH
50579: LD_INT 4
50581: PUSH
50582: LD_INT 4
50584: PUSH
50585: EMPTY
50586: LIST
50587: LIST
50588: PUSH
50589: LD_INT 4
50591: PUSH
50592: LD_INT 3
50594: PUSH
50595: EMPTY
50596: LIST
50597: LIST
50598: PUSH
50599: LD_INT 5
50601: PUSH
50602: LD_INT 4
50604: PUSH
50605: EMPTY
50606: LIST
50607: LIST
50608: PUSH
50609: LD_INT 5
50611: PUSH
50612: LD_INT 5
50614: PUSH
50615: EMPTY
50616: LIST
50617: LIST
50618: PUSH
50619: LD_INT 4
50621: PUSH
50622: LD_INT 5
50624: PUSH
50625: EMPTY
50626: LIST
50627: LIST
50628: PUSH
50629: LD_INT 3
50631: PUSH
50632: LD_INT 4
50634: PUSH
50635: EMPTY
50636: LIST
50637: LIST
50638: PUSH
50639: LD_INT 3
50641: PUSH
50642: LD_INT 3
50644: PUSH
50645: EMPTY
50646: LIST
50647: LIST
50648: PUSH
50649: LD_INT 5
50651: PUSH
50652: LD_INT 3
50654: PUSH
50655: EMPTY
50656: LIST
50657: LIST
50658: PUSH
50659: LD_INT 3
50661: PUSH
50662: LD_INT 5
50664: PUSH
50665: EMPTY
50666: LIST
50667: LIST
50668: PUSH
50669: LD_INT 0
50671: PUSH
50672: LD_INT 3
50674: PUSH
50675: EMPTY
50676: LIST
50677: LIST
50678: PUSH
50679: LD_INT 0
50681: PUSH
50682: LD_INT 2
50684: PUSH
50685: EMPTY
50686: LIST
50687: LIST
50688: PUSH
50689: LD_INT 1
50691: PUSH
50692: LD_INT 3
50694: PUSH
50695: EMPTY
50696: LIST
50697: LIST
50698: PUSH
50699: LD_INT 1
50701: PUSH
50702: LD_INT 4
50704: PUSH
50705: EMPTY
50706: LIST
50707: LIST
50708: PUSH
50709: LD_INT 0
50711: PUSH
50712: LD_INT 4
50714: PUSH
50715: EMPTY
50716: LIST
50717: LIST
50718: PUSH
50719: LD_INT 1
50721: NEG
50722: PUSH
50723: LD_INT 3
50725: PUSH
50726: EMPTY
50727: LIST
50728: LIST
50729: PUSH
50730: LD_INT 1
50732: NEG
50733: PUSH
50734: LD_INT 2
50736: PUSH
50737: EMPTY
50738: LIST
50739: LIST
50740: PUSH
50741: LD_INT 2
50743: PUSH
50744: LD_INT 4
50746: PUSH
50747: EMPTY
50748: LIST
50749: LIST
50750: PUSH
50751: LD_INT 2
50753: NEG
50754: PUSH
50755: LD_INT 2
50757: PUSH
50758: EMPTY
50759: LIST
50760: LIST
50761: PUSH
50762: LD_INT 4
50764: NEG
50765: PUSH
50766: LD_INT 0
50768: PUSH
50769: EMPTY
50770: LIST
50771: LIST
50772: PUSH
50773: LD_INT 4
50775: NEG
50776: PUSH
50777: LD_INT 1
50779: NEG
50780: PUSH
50781: EMPTY
50782: LIST
50783: LIST
50784: PUSH
50785: LD_INT 3
50787: NEG
50788: PUSH
50789: LD_INT 0
50791: PUSH
50792: EMPTY
50793: LIST
50794: LIST
50795: PUSH
50796: LD_INT 3
50798: NEG
50799: PUSH
50800: LD_INT 1
50802: PUSH
50803: EMPTY
50804: LIST
50805: LIST
50806: PUSH
50807: LD_INT 4
50809: NEG
50810: PUSH
50811: LD_INT 1
50813: PUSH
50814: EMPTY
50815: LIST
50816: LIST
50817: PUSH
50818: LD_INT 5
50820: NEG
50821: PUSH
50822: LD_INT 0
50824: PUSH
50825: EMPTY
50826: LIST
50827: LIST
50828: PUSH
50829: LD_INT 5
50831: NEG
50832: PUSH
50833: LD_INT 1
50835: NEG
50836: PUSH
50837: EMPTY
50838: LIST
50839: LIST
50840: PUSH
50841: LD_INT 5
50843: NEG
50844: PUSH
50845: LD_INT 2
50847: NEG
50848: PUSH
50849: EMPTY
50850: LIST
50851: LIST
50852: PUSH
50853: LD_INT 3
50855: NEG
50856: PUSH
50857: LD_INT 2
50859: PUSH
50860: EMPTY
50861: LIST
50862: LIST
50863: PUSH
50864: LD_INT 3
50866: NEG
50867: PUSH
50868: LD_INT 3
50870: NEG
50871: PUSH
50872: EMPTY
50873: LIST
50874: LIST
50875: PUSH
50876: LD_INT 3
50878: NEG
50879: PUSH
50880: LD_INT 4
50882: NEG
50883: PUSH
50884: EMPTY
50885: LIST
50886: LIST
50887: PUSH
50888: LD_INT 2
50890: NEG
50891: PUSH
50892: LD_INT 3
50894: NEG
50895: PUSH
50896: EMPTY
50897: LIST
50898: LIST
50899: PUSH
50900: LD_INT 2
50902: NEG
50903: PUSH
50904: LD_INT 2
50906: NEG
50907: PUSH
50908: EMPTY
50909: LIST
50910: LIST
50911: PUSH
50912: LD_INT 3
50914: NEG
50915: PUSH
50916: LD_INT 2
50918: NEG
50919: PUSH
50920: EMPTY
50921: LIST
50922: LIST
50923: PUSH
50924: LD_INT 4
50926: NEG
50927: PUSH
50928: LD_INT 3
50930: NEG
50931: PUSH
50932: EMPTY
50933: LIST
50934: LIST
50935: PUSH
50936: LD_INT 4
50938: NEG
50939: PUSH
50940: LD_INT 4
50942: NEG
50943: PUSH
50944: EMPTY
50945: LIST
50946: LIST
50947: PUSH
50948: LD_INT 2
50950: NEG
50951: PUSH
50952: LD_INT 4
50954: NEG
50955: PUSH
50956: EMPTY
50957: LIST
50958: LIST
50959: PUSH
50960: LD_INT 4
50962: NEG
50963: PUSH
50964: LD_INT 2
50966: NEG
50967: PUSH
50968: EMPTY
50969: LIST
50970: LIST
50971: PUSH
50972: LD_INT 0
50974: PUSH
50975: LD_INT 4
50977: NEG
50978: PUSH
50979: EMPTY
50980: LIST
50981: LIST
50982: PUSH
50983: LD_INT 0
50985: PUSH
50986: LD_INT 5
50988: NEG
50989: PUSH
50990: EMPTY
50991: LIST
50992: LIST
50993: PUSH
50994: LD_INT 1
50996: PUSH
50997: LD_INT 4
50999: NEG
51000: PUSH
51001: EMPTY
51002: LIST
51003: LIST
51004: PUSH
51005: LD_INT 1
51007: PUSH
51008: LD_INT 3
51010: NEG
51011: PUSH
51012: EMPTY
51013: LIST
51014: LIST
51015: PUSH
51016: LD_INT 0
51018: PUSH
51019: LD_INT 3
51021: NEG
51022: PUSH
51023: EMPTY
51024: LIST
51025: LIST
51026: PUSH
51027: LD_INT 1
51029: NEG
51030: PUSH
51031: LD_INT 4
51033: NEG
51034: PUSH
51035: EMPTY
51036: LIST
51037: LIST
51038: PUSH
51039: LD_INT 1
51041: NEG
51042: PUSH
51043: LD_INT 5
51045: NEG
51046: PUSH
51047: EMPTY
51048: LIST
51049: LIST
51050: PUSH
51051: LD_INT 2
51053: PUSH
51054: LD_INT 3
51056: NEG
51057: PUSH
51058: EMPTY
51059: LIST
51060: LIST
51061: PUSH
51062: LD_INT 2
51064: NEG
51065: PUSH
51066: LD_INT 5
51068: NEG
51069: PUSH
51070: EMPTY
51071: LIST
51072: LIST
51073: PUSH
51074: EMPTY
51075: LIST
51076: LIST
51077: LIST
51078: LIST
51079: LIST
51080: LIST
51081: LIST
51082: LIST
51083: LIST
51084: LIST
51085: LIST
51086: LIST
51087: LIST
51088: LIST
51089: LIST
51090: LIST
51091: LIST
51092: LIST
51093: LIST
51094: LIST
51095: LIST
51096: LIST
51097: LIST
51098: LIST
51099: LIST
51100: LIST
51101: LIST
51102: LIST
51103: LIST
51104: LIST
51105: LIST
51106: LIST
51107: LIST
51108: LIST
51109: LIST
51110: LIST
51111: LIST
51112: LIST
51113: LIST
51114: LIST
51115: LIST
51116: LIST
51117: LIST
51118: LIST
51119: LIST
51120: ST_TO_ADDR
// Factory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
51121: LD_ADDR_VAR 0 31
51125: PUSH
51126: LD_INT 0
51128: PUSH
51129: LD_INT 4
51131: PUSH
51132: EMPTY
51133: LIST
51134: LIST
51135: PUSH
51136: LD_INT 0
51138: PUSH
51139: LD_INT 3
51141: PUSH
51142: EMPTY
51143: LIST
51144: LIST
51145: PUSH
51146: LD_INT 1
51148: PUSH
51149: LD_INT 4
51151: PUSH
51152: EMPTY
51153: LIST
51154: LIST
51155: PUSH
51156: LD_INT 1
51158: PUSH
51159: LD_INT 5
51161: PUSH
51162: EMPTY
51163: LIST
51164: LIST
51165: PUSH
51166: LD_INT 0
51168: PUSH
51169: LD_INT 5
51171: PUSH
51172: EMPTY
51173: LIST
51174: LIST
51175: PUSH
51176: LD_INT 1
51178: NEG
51179: PUSH
51180: LD_INT 4
51182: PUSH
51183: EMPTY
51184: LIST
51185: LIST
51186: PUSH
51187: LD_INT 1
51189: NEG
51190: PUSH
51191: LD_INT 3
51193: PUSH
51194: EMPTY
51195: LIST
51196: LIST
51197: PUSH
51198: LD_INT 2
51200: PUSH
51201: LD_INT 5
51203: PUSH
51204: EMPTY
51205: LIST
51206: LIST
51207: PUSH
51208: LD_INT 2
51210: NEG
51211: PUSH
51212: LD_INT 3
51214: PUSH
51215: EMPTY
51216: LIST
51217: LIST
51218: PUSH
51219: LD_INT 3
51221: NEG
51222: PUSH
51223: LD_INT 0
51225: PUSH
51226: EMPTY
51227: LIST
51228: LIST
51229: PUSH
51230: LD_INT 3
51232: NEG
51233: PUSH
51234: LD_INT 1
51236: NEG
51237: PUSH
51238: EMPTY
51239: LIST
51240: LIST
51241: PUSH
51242: LD_INT 2
51244: NEG
51245: PUSH
51246: LD_INT 0
51248: PUSH
51249: EMPTY
51250: LIST
51251: LIST
51252: PUSH
51253: LD_INT 2
51255: NEG
51256: PUSH
51257: LD_INT 1
51259: PUSH
51260: EMPTY
51261: LIST
51262: LIST
51263: PUSH
51264: LD_INT 3
51266: NEG
51267: PUSH
51268: LD_INT 1
51270: PUSH
51271: EMPTY
51272: LIST
51273: LIST
51274: PUSH
51275: LD_INT 4
51277: NEG
51278: PUSH
51279: LD_INT 0
51281: PUSH
51282: EMPTY
51283: LIST
51284: LIST
51285: PUSH
51286: LD_INT 4
51288: NEG
51289: PUSH
51290: LD_INT 1
51292: NEG
51293: PUSH
51294: EMPTY
51295: LIST
51296: LIST
51297: PUSH
51298: LD_INT 4
51300: NEG
51301: PUSH
51302: LD_INT 2
51304: NEG
51305: PUSH
51306: EMPTY
51307: LIST
51308: LIST
51309: PUSH
51310: LD_INT 2
51312: NEG
51313: PUSH
51314: LD_INT 2
51316: PUSH
51317: EMPTY
51318: LIST
51319: LIST
51320: PUSH
51321: LD_INT 4
51323: NEG
51324: PUSH
51325: LD_INT 4
51327: NEG
51328: PUSH
51329: EMPTY
51330: LIST
51331: LIST
51332: PUSH
51333: LD_INT 4
51335: NEG
51336: PUSH
51337: LD_INT 5
51339: NEG
51340: PUSH
51341: EMPTY
51342: LIST
51343: LIST
51344: PUSH
51345: LD_INT 3
51347: NEG
51348: PUSH
51349: LD_INT 4
51351: NEG
51352: PUSH
51353: EMPTY
51354: LIST
51355: LIST
51356: PUSH
51357: LD_INT 3
51359: NEG
51360: PUSH
51361: LD_INT 3
51363: NEG
51364: PUSH
51365: EMPTY
51366: LIST
51367: LIST
51368: PUSH
51369: LD_INT 4
51371: NEG
51372: PUSH
51373: LD_INT 3
51375: NEG
51376: PUSH
51377: EMPTY
51378: LIST
51379: LIST
51380: PUSH
51381: LD_INT 5
51383: NEG
51384: PUSH
51385: LD_INT 4
51387: NEG
51388: PUSH
51389: EMPTY
51390: LIST
51391: LIST
51392: PUSH
51393: LD_INT 5
51395: NEG
51396: PUSH
51397: LD_INT 5
51399: NEG
51400: PUSH
51401: EMPTY
51402: LIST
51403: LIST
51404: PUSH
51405: LD_INT 3
51407: NEG
51408: PUSH
51409: LD_INT 5
51411: NEG
51412: PUSH
51413: EMPTY
51414: LIST
51415: LIST
51416: PUSH
51417: LD_INT 5
51419: NEG
51420: PUSH
51421: LD_INT 3
51423: NEG
51424: PUSH
51425: EMPTY
51426: LIST
51427: LIST
51428: PUSH
51429: LD_INT 0
51431: PUSH
51432: LD_INT 3
51434: NEG
51435: PUSH
51436: EMPTY
51437: LIST
51438: LIST
51439: PUSH
51440: LD_INT 0
51442: PUSH
51443: LD_INT 4
51445: NEG
51446: PUSH
51447: EMPTY
51448: LIST
51449: LIST
51450: PUSH
51451: LD_INT 1
51453: PUSH
51454: LD_INT 3
51456: NEG
51457: PUSH
51458: EMPTY
51459: LIST
51460: LIST
51461: PUSH
51462: LD_INT 1
51464: PUSH
51465: LD_INT 2
51467: NEG
51468: PUSH
51469: EMPTY
51470: LIST
51471: LIST
51472: PUSH
51473: LD_INT 0
51475: PUSH
51476: LD_INT 2
51478: NEG
51479: PUSH
51480: EMPTY
51481: LIST
51482: LIST
51483: PUSH
51484: LD_INT 1
51486: NEG
51487: PUSH
51488: LD_INT 3
51490: NEG
51491: PUSH
51492: EMPTY
51493: LIST
51494: LIST
51495: PUSH
51496: LD_INT 1
51498: NEG
51499: PUSH
51500: LD_INT 4
51502: NEG
51503: PUSH
51504: EMPTY
51505: LIST
51506: LIST
51507: PUSH
51508: LD_INT 2
51510: PUSH
51511: LD_INT 2
51513: NEG
51514: PUSH
51515: EMPTY
51516: LIST
51517: LIST
51518: PUSH
51519: LD_INT 2
51521: NEG
51522: PUSH
51523: LD_INT 4
51525: NEG
51526: PUSH
51527: EMPTY
51528: LIST
51529: LIST
51530: PUSH
51531: LD_INT 4
51533: PUSH
51534: LD_INT 0
51536: PUSH
51537: EMPTY
51538: LIST
51539: LIST
51540: PUSH
51541: LD_INT 4
51543: PUSH
51544: LD_INT 1
51546: NEG
51547: PUSH
51548: EMPTY
51549: LIST
51550: LIST
51551: PUSH
51552: LD_INT 5
51554: PUSH
51555: LD_INT 0
51557: PUSH
51558: EMPTY
51559: LIST
51560: LIST
51561: PUSH
51562: LD_INT 5
51564: PUSH
51565: LD_INT 1
51567: PUSH
51568: EMPTY
51569: LIST
51570: LIST
51571: PUSH
51572: LD_INT 4
51574: PUSH
51575: LD_INT 1
51577: PUSH
51578: EMPTY
51579: LIST
51580: LIST
51581: PUSH
51582: LD_INT 3
51584: PUSH
51585: LD_INT 0
51587: PUSH
51588: EMPTY
51589: LIST
51590: LIST
51591: PUSH
51592: LD_INT 3
51594: PUSH
51595: LD_INT 1
51597: NEG
51598: PUSH
51599: EMPTY
51600: LIST
51601: LIST
51602: PUSH
51603: LD_INT 3
51605: PUSH
51606: LD_INT 2
51608: NEG
51609: PUSH
51610: EMPTY
51611: LIST
51612: LIST
51613: PUSH
51614: LD_INT 5
51616: PUSH
51617: LD_INT 2
51619: PUSH
51620: EMPTY
51621: LIST
51622: LIST
51623: PUSH
51624: EMPTY
51625: LIST
51626: LIST
51627: LIST
51628: LIST
51629: LIST
51630: LIST
51631: LIST
51632: LIST
51633: LIST
51634: LIST
51635: LIST
51636: LIST
51637: LIST
51638: LIST
51639: LIST
51640: LIST
51641: LIST
51642: LIST
51643: LIST
51644: LIST
51645: LIST
51646: LIST
51647: LIST
51648: LIST
51649: LIST
51650: LIST
51651: LIST
51652: LIST
51653: LIST
51654: LIST
51655: LIST
51656: LIST
51657: LIST
51658: LIST
51659: LIST
51660: LIST
51661: LIST
51662: LIST
51663: LIST
51664: LIST
51665: LIST
51666: LIST
51667: LIST
51668: LIST
51669: LIST
51670: ST_TO_ADDR
// Factory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
51671: LD_ADDR_VAR 0 32
51675: PUSH
51676: LD_INT 4
51678: NEG
51679: PUSH
51680: LD_INT 0
51682: PUSH
51683: EMPTY
51684: LIST
51685: LIST
51686: PUSH
51687: LD_INT 4
51689: NEG
51690: PUSH
51691: LD_INT 1
51693: NEG
51694: PUSH
51695: EMPTY
51696: LIST
51697: LIST
51698: PUSH
51699: LD_INT 3
51701: NEG
51702: PUSH
51703: LD_INT 0
51705: PUSH
51706: EMPTY
51707: LIST
51708: LIST
51709: PUSH
51710: LD_INT 3
51712: NEG
51713: PUSH
51714: LD_INT 1
51716: PUSH
51717: EMPTY
51718: LIST
51719: LIST
51720: PUSH
51721: LD_INT 4
51723: NEG
51724: PUSH
51725: LD_INT 1
51727: PUSH
51728: EMPTY
51729: LIST
51730: LIST
51731: PUSH
51732: LD_INT 5
51734: NEG
51735: PUSH
51736: LD_INT 0
51738: PUSH
51739: EMPTY
51740: LIST
51741: LIST
51742: PUSH
51743: LD_INT 5
51745: NEG
51746: PUSH
51747: LD_INT 1
51749: NEG
51750: PUSH
51751: EMPTY
51752: LIST
51753: LIST
51754: PUSH
51755: LD_INT 5
51757: NEG
51758: PUSH
51759: LD_INT 2
51761: NEG
51762: PUSH
51763: EMPTY
51764: LIST
51765: LIST
51766: PUSH
51767: LD_INT 3
51769: NEG
51770: PUSH
51771: LD_INT 2
51773: PUSH
51774: EMPTY
51775: LIST
51776: LIST
51777: PUSH
51778: LD_INT 3
51780: NEG
51781: PUSH
51782: LD_INT 3
51784: NEG
51785: PUSH
51786: EMPTY
51787: LIST
51788: LIST
51789: PUSH
51790: LD_INT 3
51792: NEG
51793: PUSH
51794: LD_INT 4
51796: NEG
51797: PUSH
51798: EMPTY
51799: LIST
51800: LIST
51801: PUSH
51802: LD_INT 2
51804: NEG
51805: PUSH
51806: LD_INT 3
51808: NEG
51809: PUSH
51810: EMPTY
51811: LIST
51812: LIST
51813: PUSH
51814: LD_INT 2
51816: NEG
51817: PUSH
51818: LD_INT 2
51820: NEG
51821: PUSH
51822: EMPTY
51823: LIST
51824: LIST
51825: PUSH
51826: LD_INT 3
51828: NEG
51829: PUSH
51830: LD_INT 2
51832: NEG
51833: PUSH
51834: EMPTY
51835: LIST
51836: LIST
51837: PUSH
51838: LD_INT 4
51840: NEG
51841: PUSH
51842: LD_INT 3
51844: NEG
51845: PUSH
51846: EMPTY
51847: LIST
51848: LIST
51849: PUSH
51850: LD_INT 4
51852: NEG
51853: PUSH
51854: LD_INT 4
51856: NEG
51857: PUSH
51858: EMPTY
51859: LIST
51860: LIST
51861: PUSH
51862: LD_INT 2
51864: NEG
51865: PUSH
51866: LD_INT 4
51868: NEG
51869: PUSH
51870: EMPTY
51871: LIST
51872: LIST
51873: PUSH
51874: LD_INT 4
51876: NEG
51877: PUSH
51878: LD_INT 2
51880: NEG
51881: PUSH
51882: EMPTY
51883: LIST
51884: LIST
51885: PUSH
51886: LD_INT 0
51888: PUSH
51889: LD_INT 4
51891: NEG
51892: PUSH
51893: EMPTY
51894: LIST
51895: LIST
51896: PUSH
51897: LD_INT 0
51899: PUSH
51900: LD_INT 5
51902: NEG
51903: PUSH
51904: EMPTY
51905: LIST
51906: LIST
51907: PUSH
51908: LD_INT 1
51910: PUSH
51911: LD_INT 4
51913: NEG
51914: PUSH
51915: EMPTY
51916: LIST
51917: LIST
51918: PUSH
51919: LD_INT 1
51921: PUSH
51922: LD_INT 3
51924: NEG
51925: PUSH
51926: EMPTY
51927: LIST
51928: LIST
51929: PUSH
51930: LD_INT 0
51932: PUSH
51933: LD_INT 3
51935: NEG
51936: PUSH
51937: EMPTY
51938: LIST
51939: LIST
51940: PUSH
51941: LD_INT 1
51943: NEG
51944: PUSH
51945: LD_INT 4
51947: NEG
51948: PUSH
51949: EMPTY
51950: LIST
51951: LIST
51952: PUSH
51953: LD_INT 1
51955: NEG
51956: PUSH
51957: LD_INT 5
51959: NEG
51960: PUSH
51961: EMPTY
51962: LIST
51963: LIST
51964: PUSH
51965: LD_INT 2
51967: PUSH
51968: LD_INT 3
51970: NEG
51971: PUSH
51972: EMPTY
51973: LIST
51974: LIST
51975: PUSH
51976: LD_INT 2
51978: NEG
51979: PUSH
51980: LD_INT 5
51982: NEG
51983: PUSH
51984: EMPTY
51985: LIST
51986: LIST
51987: PUSH
51988: LD_INT 3
51990: PUSH
51991: LD_INT 0
51993: PUSH
51994: EMPTY
51995: LIST
51996: LIST
51997: PUSH
51998: LD_INT 3
52000: PUSH
52001: LD_INT 1
52003: NEG
52004: PUSH
52005: EMPTY
52006: LIST
52007: LIST
52008: PUSH
52009: LD_INT 4
52011: PUSH
52012: LD_INT 0
52014: PUSH
52015: EMPTY
52016: LIST
52017: LIST
52018: PUSH
52019: LD_INT 4
52021: PUSH
52022: LD_INT 1
52024: PUSH
52025: EMPTY
52026: LIST
52027: LIST
52028: PUSH
52029: LD_INT 3
52031: PUSH
52032: LD_INT 1
52034: PUSH
52035: EMPTY
52036: LIST
52037: LIST
52038: PUSH
52039: LD_INT 2
52041: PUSH
52042: LD_INT 0
52044: PUSH
52045: EMPTY
52046: LIST
52047: LIST
52048: PUSH
52049: LD_INT 2
52051: PUSH
52052: LD_INT 1
52054: NEG
52055: PUSH
52056: EMPTY
52057: LIST
52058: LIST
52059: PUSH
52060: LD_INT 2
52062: PUSH
52063: LD_INT 2
52065: NEG
52066: PUSH
52067: EMPTY
52068: LIST
52069: LIST
52070: PUSH
52071: LD_INT 4
52073: PUSH
52074: LD_INT 2
52076: PUSH
52077: EMPTY
52078: LIST
52079: LIST
52080: PUSH
52081: LD_INT 4
52083: PUSH
52084: LD_INT 4
52086: PUSH
52087: EMPTY
52088: LIST
52089: LIST
52090: PUSH
52091: LD_INT 4
52093: PUSH
52094: LD_INT 3
52096: PUSH
52097: EMPTY
52098: LIST
52099: LIST
52100: PUSH
52101: LD_INT 5
52103: PUSH
52104: LD_INT 4
52106: PUSH
52107: EMPTY
52108: LIST
52109: LIST
52110: PUSH
52111: LD_INT 5
52113: PUSH
52114: LD_INT 5
52116: PUSH
52117: EMPTY
52118: LIST
52119: LIST
52120: PUSH
52121: LD_INT 4
52123: PUSH
52124: LD_INT 5
52126: PUSH
52127: EMPTY
52128: LIST
52129: LIST
52130: PUSH
52131: LD_INT 3
52133: PUSH
52134: LD_INT 4
52136: PUSH
52137: EMPTY
52138: LIST
52139: LIST
52140: PUSH
52141: LD_INT 3
52143: PUSH
52144: LD_INT 3
52146: PUSH
52147: EMPTY
52148: LIST
52149: LIST
52150: PUSH
52151: LD_INT 5
52153: PUSH
52154: LD_INT 3
52156: PUSH
52157: EMPTY
52158: LIST
52159: LIST
52160: PUSH
52161: LD_INT 3
52163: PUSH
52164: LD_INT 5
52166: PUSH
52167: EMPTY
52168: LIST
52169: LIST
52170: PUSH
52171: EMPTY
52172: LIST
52173: LIST
52174: LIST
52175: LIST
52176: LIST
52177: LIST
52178: LIST
52179: LIST
52180: LIST
52181: LIST
52182: LIST
52183: LIST
52184: LIST
52185: LIST
52186: LIST
52187: LIST
52188: LIST
52189: LIST
52190: LIST
52191: LIST
52192: LIST
52193: LIST
52194: LIST
52195: LIST
52196: LIST
52197: LIST
52198: LIST
52199: LIST
52200: LIST
52201: LIST
52202: LIST
52203: LIST
52204: LIST
52205: LIST
52206: LIST
52207: LIST
52208: LIST
52209: LIST
52210: LIST
52211: LIST
52212: LIST
52213: LIST
52214: LIST
52215: LIST
52216: LIST
52217: ST_TO_ADDR
// Factory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
52218: LD_ADDR_VAR 0 33
52222: PUSH
52223: LD_INT 4
52225: NEG
52226: PUSH
52227: LD_INT 4
52229: NEG
52230: PUSH
52231: EMPTY
52232: LIST
52233: LIST
52234: PUSH
52235: LD_INT 4
52237: NEG
52238: PUSH
52239: LD_INT 5
52241: NEG
52242: PUSH
52243: EMPTY
52244: LIST
52245: LIST
52246: PUSH
52247: LD_INT 3
52249: NEG
52250: PUSH
52251: LD_INT 4
52253: NEG
52254: PUSH
52255: EMPTY
52256: LIST
52257: LIST
52258: PUSH
52259: LD_INT 3
52261: NEG
52262: PUSH
52263: LD_INT 3
52265: NEG
52266: PUSH
52267: EMPTY
52268: LIST
52269: LIST
52270: PUSH
52271: LD_INT 4
52273: NEG
52274: PUSH
52275: LD_INT 3
52277: NEG
52278: PUSH
52279: EMPTY
52280: LIST
52281: LIST
52282: PUSH
52283: LD_INT 5
52285: NEG
52286: PUSH
52287: LD_INT 4
52289: NEG
52290: PUSH
52291: EMPTY
52292: LIST
52293: LIST
52294: PUSH
52295: LD_INT 5
52297: NEG
52298: PUSH
52299: LD_INT 5
52301: NEG
52302: PUSH
52303: EMPTY
52304: LIST
52305: LIST
52306: PUSH
52307: LD_INT 3
52309: NEG
52310: PUSH
52311: LD_INT 5
52313: NEG
52314: PUSH
52315: EMPTY
52316: LIST
52317: LIST
52318: PUSH
52319: LD_INT 5
52321: NEG
52322: PUSH
52323: LD_INT 3
52325: NEG
52326: PUSH
52327: EMPTY
52328: LIST
52329: LIST
52330: PUSH
52331: LD_INT 0
52333: PUSH
52334: LD_INT 3
52336: NEG
52337: PUSH
52338: EMPTY
52339: LIST
52340: LIST
52341: PUSH
52342: LD_INT 0
52344: PUSH
52345: LD_INT 4
52347: NEG
52348: PUSH
52349: EMPTY
52350: LIST
52351: LIST
52352: PUSH
52353: LD_INT 1
52355: PUSH
52356: LD_INT 3
52358: NEG
52359: PUSH
52360: EMPTY
52361: LIST
52362: LIST
52363: PUSH
52364: LD_INT 1
52366: PUSH
52367: LD_INT 2
52369: NEG
52370: PUSH
52371: EMPTY
52372: LIST
52373: LIST
52374: PUSH
52375: LD_INT 0
52377: PUSH
52378: LD_INT 2
52380: NEG
52381: PUSH
52382: EMPTY
52383: LIST
52384: LIST
52385: PUSH
52386: LD_INT 1
52388: NEG
52389: PUSH
52390: LD_INT 3
52392: NEG
52393: PUSH
52394: EMPTY
52395: LIST
52396: LIST
52397: PUSH
52398: LD_INT 1
52400: NEG
52401: PUSH
52402: LD_INT 4
52404: NEG
52405: PUSH
52406: EMPTY
52407: LIST
52408: LIST
52409: PUSH
52410: LD_INT 2
52412: PUSH
52413: LD_INT 2
52415: NEG
52416: PUSH
52417: EMPTY
52418: LIST
52419: LIST
52420: PUSH
52421: LD_INT 2
52423: NEG
52424: PUSH
52425: LD_INT 4
52427: NEG
52428: PUSH
52429: EMPTY
52430: LIST
52431: LIST
52432: PUSH
52433: LD_INT 4
52435: PUSH
52436: LD_INT 0
52438: PUSH
52439: EMPTY
52440: LIST
52441: LIST
52442: PUSH
52443: LD_INT 4
52445: PUSH
52446: LD_INT 1
52448: NEG
52449: PUSH
52450: EMPTY
52451: LIST
52452: LIST
52453: PUSH
52454: LD_INT 5
52456: PUSH
52457: LD_INT 0
52459: PUSH
52460: EMPTY
52461: LIST
52462: LIST
52463: PUSH
52464: LD_INT 5
52466: PUSH
52467: LD_INT 1
52469: PUSH
52470: EMPTY
52471: LIST
52472: LIST
52473: PUSH
52474: LD_INT 4
52476: PUSH
52477: LD_INT 1
52479: PUSH
52480: EMPTY
52481: LIST
52482: LIST
52483: PUSH
52484: LD_INT 3
52486: PUSH
52487: LD_INT 0
52489: PUSH
52490: EMPTY
52491: LIST
52492: LIST
52493: PUSH
52494: LD_INT 3
52496: PUSH
52497: LD_INT 1
52499: NEG
52500: PUSH
52501: EMPTY
52502: LIST
52503: LIST
52504: PUSH
52505: LD_INT 3
52507: PUSH
52508: LD_INT 2
52510: NEG
52511: PUSH
52512: EMPTY
52513: LIST
52514: LIST
52515: PUSH
52516: LD_INT 5
52518: PUSH
52519: LD_INT 2
52521: PUSH
52522: EMPTY
52523: LIST
52524: LIST
52525: PUSH
52526: LD_INT 3
52528: PUSH
52529: LD_INT 3
52531: PUSH
52532: EMPTY
52533: LIST
52534: LIST
52535: PUSH
52536: LD_INT 3
52538: PUSH
52539: LD_INT 2
52541: PUSH
52542: EMPTY
52543: LIST
52544: LIST
52545: PUSH
52546: LD_INT 4
52548: PUSH
52549: LD_INT 3
52551: PUSH
52552: EMPTY
52553: LIST
52554: LIST
52555: PUSH
52556: LD_INT 4
52558: PUSH
52559: LD_INT 4
52561: PUSH
52562: EMPTY
52563: LIST
52564: LIST
52565: PUSH
52566: LD_INT 3
52568: PUSH
52569: LD_INT 4
52571: PUSH
52572: EMPTY
52573: LIST
52574: LIST
52575: PUSH
52576: LD_INT 2
52578: PUSH
52579: LD_INT 3
52581: PUSH
52582: EMPTY
52583: LIST
52584: LIST
52585: PUSH
52586: LD_INT 2
52588: PUSH
52589: LD_INT 2
52591: PUSH
52592: EMPTY
52593: LIST
52594: LIST
52595: PUSH
52596: LD_INT 4
52598: PUSH
52599: LD_INT 2
52601: PUSH
52602: EMPTY
52603: LIST
52604: LIST
52605: PUSH
52606: LD_INT 2
52608: PUSH
52609: LD_INT 4
52611: PUSH
52612: EMPTY
52613: LIST
52614: LIST
52615: PUSH
52616: LD_INT 0
52618: PUSH
52619: LD_INT 4
52621: PUSH
52622: EMPTY
52623: LIST
52624: LIST
52625: PUSH
52626: LD_INT 0
52628: PUSH
52629: LD_INT 3
52631: PUSH
52632: EMPTY
52633: LIST
52634: LIST
52635: PUSH
52636: LD_INT 1
52638: PUSH
52639: LD_INT 4
52641: PUSH
52642: EMPTY
52643: LIST
52644: LIST
52645: PUSH
52646: LD_INT 1
52648: PUSH
52649: LD_INT 5
52651: PUSH
52652: EMPTY
52653: LIST
52654: LIST
52655: PUSH
52656: LD_INT 0
52658: PUSH
52659: LD_INT 5
52661: PUSH
52662: EMPTY
52663: LIST
52664: LIST
52665: PUSH
52666: LD_INT 1
52668: NEG
52669: PUSH
52670: LD_INT 4
52672: PUSH
52673: EMPTY
52674: LIST
52675: LIST
52676: PUSH
52677: LD_INT 1
52679: NEG
52680: PUSH
52681: LD_INT 3
52683: PUSH
52684: EMPTY
52685: LIST
52686: LIST
52687: PUSH
52688: LD_INT 2
52690: PUSH
52691: LD_INT 5
52693: PUSH
52694: EMPTY
52695: LIST
52696: LIST
52697: PUSH
52698: LD_INT 2
52700: NEG
52701: PUSH
52702: LD_INT 3
52704: PUSH
52705: EMPTY
52706: LIST
52707: LIST
52708: PUSH
52709: EMPTY
52710: LIST
52711: LIST
52712: LIST
52713: LIST
52714: LIST
52715: LIST
52716: LIST
52717: LIST
52718: LIST
52719: LIST
52720: LIST
52721: LIST
52722: LIST
52723: LIST
52724: LIST
52725: LIST
52726: LIST
52727: LIST
52728: LIST
52729: LIST
52730: LIST
52731: LIST
52732: LIST
52733: LIST
52734: LIST
52735: LIST
52736: LIST
52737: LIST
52738: LIST
52739: LIST
52740: LIST
52741: LIST
52742: LIST
52743: LIST
52744: LIST
52745: LIST
52746: LIST
52747: LIST
52748: LIST
52749: LIST
52750: LIST
52751: LIST
52752: LIST
52753: LIST
52754: LIST
52755: ST_TO_ADDR
// Factory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
52756: LD_ADDR_VAR 0 34
52760: PUSH
52761: LD_INT 0
52763: PUSH
52764: LD_INT 4
52766: NEG
52767: PUSH
52768: EMPTY
52769: LIST
52770: LIST
52771: PUSH
52772: LD_INT 0
52774: PUSH
52775: LD_INT 5
52777: NEG
52778: PUSH
52779: EMPTY
52780: LIST
52781: LIST
52782: PUSH
52783: LD_INT 1
52785: PUSH
52786: LD_INT 4
52788: NEG
52789: PUSH
52790: EMPTY
52791: LIST
52792: LIST
52793: PUSH
52794: LD_INT 1
52796: PUSH
52797: LD_INT 3
52799: NEG
52800: PUSH
52801: EMPTY
52802: LIST
52803: LIST
52804: PUSH
52805: LD_INT 0
52807: PUSH
52808: LD_INT 3
52810: NEG
52811: PUSH
52812: EMPTY
52813: LIST
52814: LIST
52815: PUSH
52816: LD_INT 1
52818: NEG
52819: PUSH
52820: LD_INT 4
52822: NEG
52823: PUSH
52824: EMPTY
52825: LIST
52826: LIST
52827: PUSH
52828: LD_INT 1
52830: NEG
52831: PUSH
52832: LD_INT 5
52834: NEG
52835: PUSH
52836: EMPTY
52837: LIST
52838: LIST
52839: PUSH
52840: LD_INT 2
52842: PUSH
52843: LD_INT 3
52845: NEG
52846: PUSH
52847: EMPTY
52848: LIST
52849: LIST
52850: PUSH
52851: LD_INT 2
52853: NEG
52854: PUSH
52855: LD_INT 5
52857: NEG
52858: PUSH
52859: EMPTY
52860: LIST
52861: LIST
52862: PUSH
52863: LD_INT 3
52865: PUSH
52866: LD_INT 0
52868: PUSH
52869: EMPTY
52870: LIST
52871: LIST
52872: PUSH
52873: LD_INT 3
52875: PUSH
52876: LD_INT 1
52878: NEG
52879: PUSH
52880: EMPTY
52881: LIST
52882: LIST
52883: PUSH
52884: LD_INT 4
52886: PUSH
52887: LD_INT 0
52889: PUSH
52890: EMPTY
52891: LIST
52892: LIST
52893: PUSH
52894: LD_INT 4
52896: PUSH
52897: LD_INT 1
52899: PUSH
52900: EMPTY
52901: LIST
52902: LIST
52903: PUSH
52904: LD_INT 3
52906: PUSH
52907: LD_INT 1
52909: PUSH
52910: EMPTY
52911: LIST
52912: LIST
52913: PUSH
52914: LD_INT 2
52916: PUSH
52917: LD_INT 0
52919: PUSH
52920: EMPTY
52921: LIST
52922: LIST
52923: PUSH
52924: LD_INT 2
52926: PUSH
52927: LD_INT 1
52929: NEG
52930: PUSH
52931: EMPTY
52932: LIST
52933: LIST
52934: PUSH
52935: LD_INT 2
52937: PUSH
52938: LD_INT 2
52940: NEG
52941: PUSH
52942: EMPTY
52943: LIST
52944: LIST
52945: PUSH
52946: LD_INT 4
52948: PUSH
52949: LD_INT 2
52951: PUSH
52952: EMPTY
52953: LIST
52954: LIST
52955: PUSH
52956: LD_INT 4
52958: PUSH
52959: LD_INT 4
52961: PUSH
52962: EMPTY
52963: LIST
52964: LIST
52965: PUSH
52966: LD_INT 4
52968: PUSH
52969: LD_INT 3
52971: PUSH
52972: EMPTY
52973: LIST
52974: LIST
52975: PUSH
52976: LD_INT 5
52978: PUSH
52979: LD_INT 4
52981: PUSH
52982: EMPTY
52983: LIST
52984: LIST
52985: PUSH
52986: LD_INT 5
52988: PUSH
52989: LD_INT 5
52991: PUSH
52992: EMPTY
52993: LIST
52994: LIST
52995: PUSH
52996: LD_INT 4
52998: PUSH
52999: LD_INT 5
53001: PUSH
53002: EMPTY
53003: LIST
53004: LIST
53005: PUSH
53006: LD_INT 3
53008: PUSH
53009: LD_INT 4
53011: PUSH
53012: EMPTY
53013: LIST
53014: LIST
53015: PUSH
53016: LD_INT 3
53018: PUSH
53019: LD_INT 3
53021: PUSH
53022: EMPTY
53023: LIST
53024: LIST
53025: PUSH
53026: LD_INT 5
53028: PUSH
53029: LD_INT 3
53031: PUSH
53032: EMPTY
53033: LIST
53034: LIST
53035: PUSH
53036: LD_INT 3
53038: PUSH
53039: LD_INT 5
53041: PUSH
53042: EMPTY
53043: LIST
53044: LIST
53045: PUSH
53046: LD_INT 0
53048: PUSH
53049: LD_INT 3
53051: PUSH
53052: EMPTY
53053: LIST
53054: LIST
53055: PUSH
53056: LD_INT 0
53058: PUSH
53059: LD_INT 2
53061: PUSH
53062: EMPTY
53063: LIST
53064: LIST
53065: PUSH
53066: LD_INT 1
53068: PUSH
53069: LD_INT 3
53071: PUSH
53072: EMPTY
53073: LIST
53074: LIST
53075: PUSH
53076: LD_INT 1
53078: PUSH
53079: LD_INT 4
53081: PUSH
53082: EMPTY
53083: LIST
53084: LIST
53085: PUSH
53086: LD_INT 0
53088: PUSH
53089: LD_INT 4
53091: PUSH
53092: EMPTY
53093: LIST
53094: LIST
53095: PUSH
53096: LD_INT 1
53098: NEG
53099: PUSH
53100: LD_INT 3
53102: PUSH
53103: EMPTY
53104: LIST
53105: LIST
53106: PUSH
53107: LD_INT 1
53109: NEG
53110: PUSH
53111: LD_INT 2
53113: PUSH
53114: EMPTY
53115: LIST
53116: LIST
53117: PUSH
53118: LD_INT 2
53120: PUSH
53121: LD_INT 4
53123: PUSH
53124: EMPTY
53125: LIST
53126: LIST
53127: PUSH
53128: LD_INT 2
53130: NEG
53131: PUSH
53132: LD_INT 2
53134: PUSH
53135: EMPTY
53136: LIST
53137: LIST
53138: PUSH
53139: LD_INT 4
53141: NEG
53142: PUSH
53143: LD_INT 0
53145: PUSH
53146: EMPTY
53147: LIST
53148: LIST
53149: PUSH
53150: LD_INT 4
53152: NEG
53153: PUSH
53154: LD_INT 1
53156: NEG
53157: PUSH
53158: EMPTY
53159: LIST
53160: LIST
53161: PUSH
53162: LD_INT 3
53164: NEG
53165: PUSH
53166: LD_INT 0
53168: PUSH
53169: EMPTY
53170: LIST
53171: LIST
53172: PUSH
53173: LD_INT 3
53175: NEG
53176: PUSH
53177: LD_INT 1
53179: PUSH
53180: EMPTY
53181: LIST
53182: LIST
53183: PUSH
53184: LD_INT 4
53186: NEG
53187: PUSH
53188: LD_INT 1
53190: PUSH
53191: EMPTY
53192: LIST
53193: LIST
53194: PUSH
53195: LD_INT 5
53197: NEG
53198: PUSH
53199: LD_INT 0
53201: PUSH
53202: EMPTY
53203: LIST
53204: LIST
53205: PUSH
53206: LD_INT 5
53208: NEG
53209: PUSH
53210: LD_INT 1
53212: NEG
53213: PUSH
53214: EMPTY
53215: LIST
53216: LIST
53217: PUSH
53218: LD_INT 5
53220: NEG
53221: PUSH
53222: LD_INT 2
53224: NEG
53225: PUSH
53226: EMPTY
53227: LIST
53228: LIST
53229: PUSH
53230: LD_INT 3
53232: NEG
53233: PUSH
53234: LD_INT 2
53236: PUSH
53237: EMPTY
53238: LIST
53239: LIST
53240: PUSH
53241: EMPTY
53242: LIST
53243: LIST
53244: LIST
53245: LIST
53246: LIST
53247: LIST
53248: LIST
53249: LIST
53250: LIST
53251: LIST
53252: LIST
53253: LIST
53254: LIST
53255: LIST
53256: LIST
53257: LIST
53258: LIST
53259: LIST
53260: LIST
53261: LIST
53262: LIST
53263: LIST
53264: LIST
53265: LIST
53266: LIST
53267: LIST
53268: LIST
53269: LIST
53270: LIST
53271: LIST
53272: LIST
53273: LIST
53274: LIST
53275: LIST
53276: LIST
53277: LIST
53278: LIST
53279: LIST
53280: LIST
53281: LIST
53282: LIST
53283: LIST
53284: LIST
53285: LIST
53286: LIST
53287: ST_TO_ADDR
// end ; end ;
53288: GO 53291
53290: POP
// case btype of b_depot , b_warehouse :
53291: LD_VAR 0 1
53295: PUSH
53296: LD_INT 0
53298: DOUBLE
53299: EQUAL
53300: IFTRUE 53310
53302: LD_INT 1
53304: DOUBLE
53305: EQUAL
53306: IFTRUE 53310
53308: GO 53511
53310: POP
// case nation of nation_american :
53311: LD_VAR 0 5
53315: PUSH
53316: LD_INT 1
53318: DOUBLE
53319: EQUAL
53320: IFTRUE 53324
53322: GO 53380
53324: POP
// temp_list = [ DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 ] [ dir + 1 ] ; nation_arabian :
53325: LD_ADDR_VAR 0 9
53329: PUSH
53330: LD_VAR 0 11
53334: PUSH
53335: LD_VAR 0 12
53339: PUSH
53340: LD_VAR 0 13
53344: PUSH
53345: LD_VAR 0 14
53349: PUSH
53350: LD_VAR 0 15
53354: PUSH
53355: LD_VAR 0 16
53359: PUSH
53360: EMPTY
53361: LIST
53362: LIST
53363: LIST
53364: LIST
53365: LIST
53366: LIST
53367: PUSH
53368: LD_VAR 0 4
53372: PUSH
53373: LD_INT 1
53375: PLUS
53376: ARRAY
53377: ST_TO_ADDR
53378: GO 53509
53380: LD_INT 2
53382: DOUBLE
53383: EQUAL
53384: IFTRUE 53388
53386: GO 53444
53388: POP
// temp_list = [ DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 ] [ dir + 1 ] ; nation_russian :
53389: LD_ADDR_VAR 0 9
53393: PUSH
53394: LD_VAR 0 17
53398: PUSH
53399: LD_VAR 0 18
53403: PUSH
53404: LD_VAR 0 19
53408: PUSH
53409: LD_VAR 0 20
53413: PUSH
53414: LD_VAR 0 21
53418: PUSH
53419: LD_VAR 0 22
53423: PUSH
53424: EMPTY
53425: LIST
53426: LIST
53427: LIST
53428: LIST
53429: LIST
53430: LIST
53431: PUSH
53432: LD_VAR 0 4
53436: PUSH
53437: LD_INT 1
53439: PLUS
53440: ARRAY
53441: ST_TO_ADDR
53442: GO 53509
53444: LD_INT 3
53446: DOUBLE
53447: EQUAL
53448: IFTRUE 53452
53450: GO 53508
53452: POP
// temp_list = [ DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
53453: LD_ADDR_VAR 0 9
53457: PUSH
53458: LD_VAR 0 23
53462: PUSH
53463: LD_VAR 0 24
53467: PUSH
53468: LD_VAR 0 25
53472: PUSH
53473: LD_VAR 0 26
53477: PUSH
53478: LD_VAR 0 27
53482: PUSH
53483: LD_VAR 0 28
53487: PUSH
53488: EMPTY
53489: LIST
53490: LIST
53491: LIST
53492: LIST
53493: LIST
53494: LIST
53495: PUSH
53496: LD_VAR 0 4
53500: PUSH
53501: LD_INT 1
53503: PLUS
53504: ARRAY
53505: ST_TO_ADDR
53506: GO 53509
53508: POP
53509: GO 54064
53511: LD_INT 2
53513: DOUBLE
53514: EQUAL
53515: IFTRUE 53525
53517: LD_INT 3
53519: DOUBLE
53520: EQUAL
53521: IFTRUE 53525
53523: GO 53581
53525: POP
// temp_list = [ Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
53526: LD_ADDR_VAR 0 9
53530: PUSH
53531: LD_VAR 0 29
53535: PUSH
53536: LD_VAR 0 30
53540: PUSH
53541: LD_VAR 0 31
53545: PUSH
53546: LD_VAR 0 32
53550: PUSH
53551: LD_VAR 0 33
53555: PUSH
53556: LD_VAR 0 34
53560: PUSH
53561: EMPTY
53562: LIST
53563: LIST
53564: LIST
53565: LIST
53566: LIST
53567: LIST
53568: PUSH
53569: LD_VAR 0 4
53573: PUSH
53574: LD_INT 1
53576: PLUS
53577: ARRAY
53578: ST_TO_ADDR
53579: GO 54064
53581: LD_INT 16
53583: DOUBLE
53584: EQUAL
53585: IFTRUE 53643
53587: LD_INT 17
53589: DOUBLE
53590: EQUAL
53591: IFTRUE 53643
53593: LD_INT 18
53595: DOUBLE
53596: EQUAL
53597: IFTRUE 53643
53599: LD_INT 19
53601: DOUBLE
53602: EQUAL
53603: IFTRUE 53643
53605: LD_INT 22
53607: DOUBLE
53608: EQUAL
53609: IFTRUE 53643
53611: LD_INT 20
53613: DOUBLE
53614: EQUAL
53615: IFTRUE 53643
53617: LD_INT 21
53619: DOUBLE
53620: EQUAL
53621: IFTRUE 53643
53623: LD_INT 23
53625: DOUBLE
53626: EQUAL
53627: IFTRUE 53643
53629: LD_INT 24
53631: DOUBLE
53632: EQUAL
53633: IFTRUE 53643
53635: LD_INT 25
53637: DOUBLE
53638: EQUAL
53639: IFTRUE 53643
53641: GO 53699
53643: POP
// temp_list = [ Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
53644: LD_ADDR_VAR 0 9
53648: PUSH
53649: LD_VAR 0 35
53653: PUSH
53654: LD_VAR 0 36
53658: PUSH
53659: LD_VAR 0 37
53663: PUSH
53664: LD_VAR 0 38
53668: PUSH
53669: LD_VAR 0 39
53673: PUSH
53674: LD_VAR 0 40
53678: PUSH
53679: EMPTY
53680: LIST
53681: LIST
53682: LIST
53683: LIST
53684: LIST
53685: LIST
53686: PUSH
53687: LD_VAR 0 4
53691: PUSH
53692: LD_INT 1
53694: PLUS
53695: ARRAY
53696: ST_TO_ADDR
53697: GO 54064
53699: LD_INT 6
53701: DOUBLE
53702: EQUAL
53703: IFTRUE 53755
53705: LD_INT 7
53707: DOUBLE
53708: EQUAL
53709: IFTRUE 53755
53711: LD_INT 8
53713: DOUBLE
53714: EQUAL
53715: IFTRUE 53755
53717: LD_INT 13
53719: DOUBLE
53720: EQUAL
53721: IFTRUE 53755
53723: LD_INT 12
53725: DOUBLE
53726: EQUAL
53727: IFTRUE 53755
53729: LD_INT 15
53731: DOUBLE
53732: EQUAL
53733: IFTRUE 53755
53735: LD_INT 11
53737: DOUBLE
53738: EQUAL
53739: IFTRUE 53755
53741: LD_INT 14
53743: DOUBLE
53744: EQUAL
53745: IFTRUE 53755
53747: LD_INT 10
53749: DOUBLE
53750: EQUAL
53751: IFTRUE 53755
53753: GO 53811
53755: POP
// temp_list = [ Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 ] [ dir + 1 ] ; b_control_tower :
53756: LD_ADDR_VAR 0 9
53760: PUSH
53761: LD_VAR 0 41
53765: PUSH
53766: LD_VAR 0 42
53770: PUSH
53771: LD_VAR 0 43
53775: PUSH
53776: LD_VAR 0 44
53780: PUSH
53781: LD_VAR 0 45
53785: PUSH
53786: LD_VAR 0 46
53790: PUSH
53791: EMPTY
53792: LIST
53793: LIST
53794: LIST
53795: LIST
53796: LIST
53797: LIST
53798: PUSH
53799: LD_VAR 0 4
53803: PUSH
53804: LD_INT 1
53806: PLUS
53807: ARRAY
53808: ST_TO_ADDR
53809: GO 54064
53811: LD_INT 36
53813: DOUBLE
53814: EQUAL
53815: IFTRUE 53819
53817: GO 53875
53819: POP
// temp_list = [ ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
53820: LD_ADDR_VAR 0 9
53824: PUSH
53825: LD_VAR 0 47
53829: PUSH
53830: LD_VAR 0 48
53834: PUSH
53835: LD_VAR 0 49
53839: PUSH
53840: LD_VAR 0 50
53844: PUSH
53845: LD_VAR 0 51
53849: PUSH
53850: LD_VAR 0 52
53854: PUSH
53855: EMPTY
53856: LIST
53857: LIST
53858: LIST
53859: LIST
53860: LIST
53861: LIST
53862: PUSH
53863: LD_VAR 0 4
53867: PUSH
53868: LD_INT 1
53870: PLUS
53871: ARRAY
53872: ST_TO_ADDR
53873: GO 54064
53875: LD_INT 4
53877: DOUBLE
53878: EQUAL
53879: IFTRUE 53901
53881: LD_INT 5
53883: DOUBLE
53884: EQUAL
53885: IFTRUE 53901
53887: LD_INT 34
53889: DOUBLE
53890: EQUAL
53891: IFTRUE 53901
53893: LD_INT 37
53895: DOUBLE
53896: EQUAL
53897: IFTRUE 53901
53899: GO 53957
53901: POP
// temp_list = [ Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
53902: LD_ADDR_VAR 0 9
53906: PUSH
53907: LD_VAR 0 53
53911: PUSH
53912: LD_VAR 0 54
53916: PUSH
53917: LD_VAR 0 55
53921: PUSH
53922: LD_VAR 0 56
53926: PUSH
53927: LD_VAR 0 57
53931: PUSH
53932: LD_VAR 0 58
53936: PUSH
53937: EMPTY
53938: LIST
53939: LIST
53940: LIST
53941: LIST
53942: LIST
53943: LIST
53944: PUSH
53945: LD_VAR 0 4
53949: PUSH
53950: LD_INT 1
53952: PLUS
53953: ARRAY
53954: ST_TO_ADDR
53955: GO 54064
53957: LD_INT 31
53959: DOUBLE
53960: EQUAL
53961: IFTRUE 54007
53963: LD_INT 32
53965: DOUBLE
53966: EQUAL
53967: IFTRUE 54007
53969: LD_INT 33
53971: DOUBLE
53972: EQUAL
53973: IFTRUE 54007
53975: LD_INT 27
53977: DOUBLE
53978: EQUAL
53979: IFTRUE 54007
53981: LD_INT 26
53983: DOUBLE
53984: EQUAL
53985: IFTRUE 54007
53987: LD_INT 28
53989: DOUBLE
53990: EQUAL
53991: IFTRUE 54007
53993: LD_INT 29
53995: DOUBLE
53996: EQUAL
53997: IFTRUE 54007
53999: LD_INT 30
54001: DOUBLE
54002: EQUAL
54003: IFTRUE 54007
54005: GO 54063
54007: POP
// temp_list = [ Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ] [ dir + 1 ] ; end ;
54008: LD_ADDR_VAR 0 9
54012: PUSH
54013: LD_VAR 0 59
54017: PUSH
54018: LD_VAR 0 60
54022: PUSH
54023: LD_VAR 0 61
54027: PUSH
54028: LD_VAR 0 62
54032: PUSH
54033: LD_VAR 0 63
54037: PUSH
54038: LD_VAR 0 64
54042: PUSH
54043: EMPTY
54044: LIST
54045: LIST
54046: LIST
54047: LIST
54048: LIST
54049: LIST
54050: PUSH
54051: LD_VAR 0 4
54055: PUSH
54056: LD_INT 1
54058: PLUS
54059: ARRAY
54060: ST_TO_ADDR
54061: GO 54064
54063: POP
// temp_list2 = [ ] ;
54064: LD_ADDR_VAR 0 10
54068: PUSH
54069: EMPTY
54070: ST_TO_ADDR
// for i in temp_list do
54071: LD_ADDR_VAR 0 8
54075: PUSH
54076: LD_VAR 0 9
54080: PUSH
54081: FOR_IN
54082: IFFALSE 54134
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
54084: LD_ADDR_VAR 0 10
54088: PUSH
54089: LD_VAR 0 10
54093: PUSH
54094: LD_VAR 0 8
54098: PUSH
54099: LD_INT 1
54101: ARRAY
54102: PUSH
54103: LD_VAR 0 2
54107: PLUS
54108: PUSH
54109: LD_VAR 0 8
54113: PUSH
54114: LD_INT 2
54116: ARRAY
54117: PUSH
54118: LD_VAR 0 3
54122: PLUS
54123: PUSH
54124: EMPTY
54125: LIST
54126: LIST
54127: PUSH
54128: EMPTY
54129: LIST
54130: ADD
54131: ST_TO_ADDR
54132: GO 54081
54134: POP
54135: POP
// result = temp_list2 ;
54136: LD_ADDR_VAR 0 7
54140: PUSH
54141: LD_VAR 0 10
54145: ST_TO_ADDR
// end ;
54146: LD_VAR 0 7
54150: RET
// export function EnemyInRange ( unit , dist ) ; begin
54151: LD_INT 0
54153: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
54154: LD_ADDR_VAR 0 3
54158: PUSH
54159: LD_VAR 0 1
54163: PPUSH
54164: CALL_OW 255
54168: PPUSH
54169: LD_VAR 0 1
54173: PPUSH
54174: CALL_OW 250
54178: PPUSH
54179: LD_VAR 0 1
54183: PPUSH
54184: CALL_OW 251
54188: PPUSH
54189: LD_VAR 0 2
54193: PPUSH
54194: CALL 28255 0 4
54198: PUSH
54199: LD_INT 4
54201: ARRAY
54202: ST_TO_ADDR
// end ;
54203: LD_VAR 0 3
54207: RET
// export function PlayerSeeMe ( unit ) ; begin
54208: LD_INT 0
54210: PPUSH
// result := See ( your_side , unit ) ;
54211: LD_ADDR_VAR 0 2
54215: PUSH
54216: LD_OWVAR 2
54220: PPUSH
54221: LD_VAR 0 1
54225: PPUSH
54226: CALL_OW 292
54230: ST_TO_ADDR
// end ;
54231: LD_VAR 0 2
54235: RET
// export function ReverseDir ( unit ) ; begin
54236: LD_INT 0
54238: PPUSH
// if not unit then
54239: LD_VAR 0 1
54243: NOT
54244: IFFALSE 54248
// exit ;
54246: GO 54271
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
54248: LD_ADDR_VAR 0 2
54252: PUSH
54253: LD_VAR 0 1
54257: PPUSH
54258: CALL_OW 254
54262: PUSH
54263: LD_INT 3
54265: PLUS
54266: PUSH
54267: LD_INT 6
54269: MOD
54270: ST_TO_ADDR
// end ;
54271: LD_VAR 0 2
54275: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
54276: LD_INT 0
54278: PPUSH
54279: PPUSH
54280: PPUSH
54281: PPUSH
54282: PPUSH
// if not hexes then
54283: LD_VAR 0 2
54287: NOT
54288: IFFALSE 54292
// exit ;
54290: GO 54440
// dist := 9999 ;
54292: LD_ADDR_VAR 0 5
54296: PUSH
54297: LD_INT 9999
54299: ST_TO_ADDR
// for i = 1 to hexes do
54300: LD_ADDR_VAR 0 4
54304: PUSH
54305: DOUBLE
54306: LD_INT 1
54308: DEC
54309: ST_TO_ADDR
54310: LD_VAR 0 2
54314: PUSH
54315: FOR_TO
54316: IFFALSE 54428
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
54318: LD_VAR 0 1
54322: PPUSH
54323: LD_VAR 0 2
54327: PUSH
54328: LD_VAR 0 4
54332: ARRAY
54333: PUSH
54334: LD_INT 1
54336: ARRAY
54337: PPUSH
54338: LD_VAR 0 2
54342: PUSH
54343: LD_VAR 0 4
54347: ARRAY
54348: PUSH
54349: LD_INT 2
54351: ARRAY
54352: PPUSH
54353: CALL_OW 297
54357: PUSH
54358: LD_VAR 0 5
54362: LESS
54363: IFFALSE 54426
// begin hex := hexes [ i ] ;
54365: LD_ADDR_VAR 0 7
54369: PUSH
54370: LD_VAR 0 2
54374: PUSH
54375: LD_VAR 0 4
54379: ARRAY
54380: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
54381: LD_ADDR_VAR 0 5
54385: PUSH
54386: LD_VAR 0 1
54390: PPUSH
54391: LD_VAR 0 2
54395: PUSH
54396: LD_VAR 0 4
54400: ARRAY
54401: PUSH
54402: LD_INT 1
54404: ARRAY
54405: PPUSH
54406: LD_VAR 0 2
54410: PUSH
54411: LD_VAR 0 4
54415: ARRAY
54416: PUSH
54417: LD_INT 2
54419: ARRAY
54420: PPUSH
54421: CALL_OW 297
54425: ST_TO_ADDR
// end ; end ;
54426: GO 54315
54428: POP
54429: POP
// result := hex ;
54430: LD_ADDR_VAR 0 3
54434: PUSH
54435: LD_VAR 0 7
54439: ST_TO_ADDR
// end ;
54440: LD_VAR 0 3
54444: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
54445: LD_INT 0
54447: PPUSH
54448: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
54449: LD_VAR 0 1
54453: NOT
54454: PUSH
54455: LD_VAR 0 1
54459: PUSH
54460: LD_INT 21
54462: PUSH
54463: LD_INT 2
54465: PUSH
54466: EMPTY
54467: LIST
54468: LIST
54469: PUSH
54470: LD_INT 23
54472: PUSH
54473: LD_INT 2
54475: PUSH
54476: EMPTY
54477: LIST
54478: LIST
54479: PUSH
54480: EMPTY
54481: LIST
54482: LIST
54483: PPUSH
54484: CALL_OW 69
54488: IN
54489: NOT
54490: OR
54491: IFFALSE 54495
// exit ;
54493: GO 54542
// for i = 1 to 3 do
54495: LD_ADDR_VAR 0 3
54499: PUSH
54500: DOUBLE
54501: LD_INT 1
54503: DEC
54504: ST_TO_ADDR
54505: LD_INT 3
54507: PUSH
54508: FOR_TO
54509: IFFALSE 54540
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
54511: LD_VAR 0 1
54515: PPUSH
54516: CALL_OW 250
54520: PPUSH
54521: LD_VAR 0 1
54525: PPUSH
54526: CALL_OW 251
54530: PPUSH
54531: LD_INT 1
54533: PPUSH
54534: CALL_OW 453
54538: GO 54508
54540: POP
54541: POP
// end ;
54542: LD_VAR 0 2
54546: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
54547: LD_INT 0
54549: PPUSH
54550: PPUSH
54551: PPUSH
54552: PPUSH
54553: PPUSH
54554: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
54555: LD_VAR 0 1
54559: NOT
54560: PUSH
54561: LD_VAR 0 2
54565: NOT
54566: OR
54567: PUSH
54568: LD_VAR 0 1
54572: PPUSH
54573: CALL_OW 314
54577: OR
54578: IFFALSE 54582
// exit ;
54580: GO 55023
// x := GetX ( enemy_unit ) ;
54582: LD_ADDR_VAR 0 7
54586: PUSH
54587: LD_VAR 0 2
54591: PPUSH
54592: CALL_OW 250
54596: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
54597: LD_ADDR_VAR 0 8
54601: PUSH
54602: LD_VAR 0 2
54606: PPUSH
54607: CALL_OW 251
54611: ST_TO_ADDR
// if not x or not y then
54612: LD_VAR 0 7
54616: NOT
54617: PUSH
54618: LD_VAR 0 8
54622: NOT
54623: OR
54624: IFFALSE 54628
// exit ;
54626: GO 55023
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
54628: LD_ADDR_VAR 0 6
54632: PUSH
54633: LD_VAR 0 7
54637: PPUSH
54638: LD_INT 0
54640: PPUSH
54641: LD_INT 4
54643: PPUSH
54644: CALL_OW 272
54648: PUSH
54649: LD_VAR 0 8
54653: PPUSH
54654: LD_INT 0
54656: PPUSH
54657: LD_INT 4
54659: PPUSH
54660: CALL_OW 273
54664: PUSH
54665: EMPTY
54666: LIST
54667: LIST
54668: PUSH
54669: LD_VAR 0 7
54673: PPUSH
54674: LD_INT 1
54676: PPUSH
54677: LD_INT 4
54679: PPUSH
54680: CALL_OW 272
54684: PUSH
54685: LD_VAR 0 8
54689: PPUSH
54690: LD_INT 1
54692: PPUSH
54693: LD_INT 4
54695: PPUSH
54696: CALL_OW 273
54700: PUSH
54701: EMPTY
54702: LIST
54703: LIST
54704: PUSH
54705: LD_VAR 0 7
54709: PPUSH
54710: LD_INT 2
54712: PPUSH
54713: LD_INT 4
54715: PPUSH
54716: CALL_OW 272
54720: PUSH
54721: LD_VAR 0 8
54725: PPUSH
54726: LD_INT 2
54728: PPUSH
54729: LD_INT 4
54731: PPUSH
54732: CALL_OW 273
54736: PUSH
54737: EMPTY
54738: LIST
54739: LIST
54740: PUSH
54741: LD_VAR 0 7
54745: PPUSH
54746: LD_INT 3
54748: PPUSH
54749: LD_INT 4
54751: PPUSH
54752: CALL_OW 272
54756: PUSH
54757: LD_VAR 0 8
54761: PPUSH
54762: LD_INT 3
54764: PPUSH
54765: LD_INT 4
54767: PPUSH
54768: CALL_OW 273
54772: PUSH
54773: EMPTY
54774: LIST
54775: LIST
54776: PUSH
54777: LD_VAR 0 7
54781: PPUSH
54782: LD_INT 4
54784: PPUSH
54785: LD_INT 4
54787: PPUSH
54788: CALL_OW 272
54792: PUSH
54793: LD_VAR 0 8
54797: PPUSH
54798: LD_INT 4
54800: PPUSH
54801: LD_INT 4
54803: PPUSH
54804: CALL_OW 273
54808: PUSH
54809: EMPTY
54810: LIST
54811: LIST
54812: PUSH
54813: LD_VAR 0 7
54817: PPUSH
54818: LD_INT 5
54820: PPUSH
54821: LD_INT 4
54823: PPUSH
54824: CALL_OW 272
54828: PUSH
54829: LD_VAR 0 8
54833: PPUSH
54834: LD_INT 5
54836: PPUSH
54837: LD_INT 4
54839: PPUSH
54840: CALL_OW 273
54844: PUSH
54845: EMPTY
54846: LIST
54847: LIST
54848: PUSH
54849: EMPTY
54850: LIST
54851: LIST
54852: LIST
54853: LIST
54854: LIST
54855: LIST
54856: ST_TO_ADDR
// for i = tmp downto 1 do
54857: LD_ADDR_VAR 0 4
54861: PUSH
54862: DOUBLE
54863: LD_VAR 0 6
54867: INC
54868: ST_TO_ADDR
54869: LD_INT 1
54871: PUSH
54872: FOR_DOWNTO
54873: IFFALSE 54974
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
54875: LD_VAR 0 6
54879: PUSH
54880: LD_VAR 0 4
54884: ARRAY
54885: PUSH
54886: LD_INT 1
54888: ARRAY
54889: PPUSH
54890: LD_VAR 0 6
54894: PUSH
54895: LD_VAR 0 4
54899: ARRAY
54900: PUSH
54901: LD_INT 2
54903: ARRAY
54904: PPUSH
54905: CALL_OW 488
54909: NOT
54910: PUSH
54911: LD_VAR 0 6
54915: PUSH
54916: LD_VAR 0 4
54920: ARRAY
54921: PUSH
54922: LD_INT 1
54924: ARRAY
54925: PPUSH
54926: LD_VAR 0 6
54930: PUSH
54931: LD_VAR 0 4
54935: ARRAY
54936: PUSH
54937: LD_INT 2
54939: ARRAY
54940: PPUSH
54941: CALL_OW 428
54945: PUSH
54946: LD_INT 0
54948: NONEQUAL
54949: OR
54950: IFFALSE 54972
// tmp := Delete ( tmp , i ) ;
54952: LD_ADDR_VAR 0 6
54956: PUSH
54957: LD_VAR 0 6
54961: PPUSH
54962: LD_VAR 0 4
54966: PPUSH
54967: CALL_OW 3
54971: ST_TO_ADDR
54972: GO 54872
54974: POP
54975: POP
// j := GetClosestHex ( unit , tmp ) ;
54976: LD_ADDR_VAR 0 5
54980: PUSH
54981: LD_VAR 0 1
54985: PPUSH
54986: LD_VAR 0 6
54990: PPUSH
54991: CALL 54276 0 2
54995: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
54996: LD_VAR 0 1
55000: PPUSH
55001: LD_VAR 0 5
55005: PUSH
55006: LD_INT 1
55008: ARRAY
55009: PPUSH
55010: LD_VAR 0 5
55014: PUSH
55015: LD_INT 2
55017: ARRAY
55018: PPUSH
55019: CALL_OW 111
// end ;
55023: LD_VAR 0 3
55027: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
55028: LD_INT 0
55030: PPUSH
55031: PPUSH
55032: PPUSH
// uc_side = 0 ;
55033: LD_ADDR_OWVAR 20
55037: PUSH
55038: LD_INT 0
55040: ST_TO_ADDR
// uc_nation = 0 ;
55041: LD_ADDR_OWVAR 21
55045: PUSH
55046: LD_INT 0
55048: ST_TO_ADDR
// InitHc ;
55049: CALL_OW 19
// InitVc ;
55053: CALL_OW 20
// if mastodonts then
55057: LD_VAR 0 6
55061: IFFALSE 55128
// for i = 1 to mastodonts do
55063: LD_ADDR_VAR 0 11
55067: PUSH
55068: DOUBLE
55069: LD_INT 1
55071: DEC
55072: ST_TO_ADDR
55073: LD_VAR 0 6
55077: PUSH
55078: FOR_TO
55079: IFFALSE 55126
// begin vc_chassis := 31 ;
55081: LD_ADDR_OWVAR 37
55085: PUSH
55086: LD_INT 31
55088: ST_TO_ADDR
// vc_control := control_rider ;
55089: LD_ADDR_OWVAR 38
55093: PUSH
55094: LD_INT 4
55096: ST_TO_ADDR
// animal := CreateVehicle ;
55097: LD_ADDR_VAR 0 12
55101: PUSH
55102: CALL_OW 45
55106: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55107: LD_VAR 0 12
55111: PPUSH
55112: LD_VAR 0 8
55116: PPUSH
55117: LD_INT 0
55119: PPUSH
55120: CALL 57197 0 3
// end ;
55124: GO 55078
55126: POP
55127: POP
// if horses then
55128: LD_VAR 0 5
55132: IFFALSE 55199
// for i = 1 to horses do
55134: LD_ADDR_VAR 0 11
55138: PUSH
55139: DOUBLE
55140: LD_INT 1
55142: DEC
55143: ST_TO_ADDR
55144: LD_VAR 0 5
55148: PUSH
55149: FOR_TO
55150: IFFALSE 55197
// begin hc_class := 21 ;
55152: LD_ADDR_OWVAR 28
55156: PUSH
55157: LD_INT 21
55159: ST_TO_ADDR
// hc_gallery :=  ;
55160: LD_ADDR_OWVAR 33
55164: PUSH
55165: LD_STRING 
55167: ST_TO_ADDR
// animal := CreateHuman ;
55168: LD_ADDR_VAR 0 12
55172: PUSH
55173: CALL_OW 44
55177: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55178: LD_VAR 0 12
55182: PPUSH
55183: LD_VAR 0 8
55187: PPUSH
55188: LD_INT 0
55190: PPUSH
55191: CALL 57197 0 3
// end ;
55195: GO 55149
55197: POP
55198: POP
// if birds then
55199: LD_VAR 0 1
55203: IFFALSE 55270
// for i = 1 to birds do
55205: LD_ADDR_VAR 0 11
55209: PUSH
55210: DOUBLE
55211: LD_INT 1
55213: DEC
55214: ST_TO_ADDR
55215: LD_VAR 0 1
55219: PUSH
55220: FOR_TO
55221: IFFALSE 55268
// begin hc_class = 18 ;
55223: LD_ADDR_OWVAR 28
55227: PUSH
55228: LD_INT 18
55230: ST_TO_ADDR
// hc_gallery =  ;
55231: LD_ADDR_OWVAR 33
55235: PUSH
55236: LD_STRING 
55238: ST_TO_ADDR
// animal := CreateHuman ;
55239: LD_ADDR_VAR 0 12
55243: PUSH
55244: CALL_OW 44
55248: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55249: LD_VAR 0 12
55253: PPUSH
55254: LD_VAR 0 8
55258: PPUSH
55259: LD_INT 0
55261: PPUSH
55262: CALL 57197 0 3
// end ;
55266: GO 55220
55268: POP
55269: POP
// if tigers then
55270: LD_VAR 0 2
55274: IFFALSE 55358
// for i = 1 to tigers do
55276: LD_ADDR_VAR 0 11
55280: PUSH
55281: DOUBLE
55282: LD_INT 1
55284: DEC
55285: ST_TO_ADDR
55286: LD_VAR 0 2
55290: PUSH
55291: FOR_TO
55292: IFFALSE 55356
// begin hc_class = class_tiger ;
55294: LD_ADDR_OWVAR 28
55298: PUSH
55299: LD_INT 14
55301: ST_TO_ADDR
// hc_gallery =  ;
55302: LD_ADDR_OWVAR 33
55306: PUSH
55307: LD_STRING 
55309: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
55310: LD_ADDR_OWVAR 35
55314: PUSH
55315: LD_INT 7
55317: NEG
55318: PPUSH
55319: LD_INT 7
55321: PPUSH
55322: CALL_OW 12
55326: ST_TO_ADDR
// animal := CreateHuman ;
55327: LD_ADDR_VAR 0 12
55331: PUSH
55332: CALL_OW 44
55336: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55337: LD_VAR 0 12
55341: PPUSH
55342: LD_VAR 0 8
55346: PPUSH
55347: LD_INT 0
55349: PPUSH
55350: CALL 57197 0 3
// end ;
55354: GO 55291
55356: POP
55357: POP
// if apemans then
55358: LD_VAR 0 3
55362: IFFALSE 55485
// for i = 1 to apemans do
55364: LD_ADDR_VAR 0 11
55368: PUSH
55369: DOUBLE
55370: LD_INT 1
55372: DEC
55373: ST_TO_ADDR
55374: LD_VAR 0 3
55378: PUSH
55379: FOR_TO
55380: IFFALSE 55483
// begin hc_class = class_apeman ;
55382: LD_ADDR_OWVAR 28
55386: PUSH
55387: LD_INT 12
55389: ST_TO_ADDR
// hc_gallery =  ;
55390: LD_ADDR_OWVAR 33
55394: PUSH
55395: LD_STRING 
55397: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
55398: LD_ADDR_OWVAR 35
55402: PUSH
55403: LD_INT 5
55405: NEG
55406: PPUSH
55407: LD_INT 5
55409: PPUSH
55410: CALL_OW 12
55414: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
55415: LD_ADDR_OWVAR 31
55419: PUSH
55420: LD_INT 1
55422: PPUSH
55423: LD_INT 3
55425: PPUSH
55426: CALL_OW 12
55430: PUSH
55431: LD_INT 1
55433: PPUSH
55434: LD_INT 3
55436: PPUSH
55437: CALL_OW 12
55441: PUSH
55442: LD_INT 0
55444: PUSH
55445: LD_INT 0
55447: PUSH
55448: EMPTY
55449: LIST
55450: LIST
55451: LIST
55452: LIST
55453: ST_TO_ADDR
// animal := CreateHuman ;
55454: LD_ADDR_VAR 0 12
55458: PUSH
55459: CALL_OW 44
55463: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55464: LD_VAR 0 12
55468: PPUSH
55469: LD_VAR 0 8
55473: PPUSH
55474: LD_INT 0
55476: PPUSH
55477: CALL 57197 0 3
// end ;
55481: GO 55379
55483: POP
55484: POP
// if enchidnas then
55485: LD_VAR 0 4
55489: IFFALSE 55556
// for i = 1 to enchidnas do
55491: LD_ADDR_VAR 0 11
55495: PUSH
55496: DOUBLE
55497: LD_INT 1
55499: DEC
55500: ST_TO_ADDR
55501: LD_VAR 0 4
55505: PUSH
55506: FOR_TO
55507: IFFALSE 55554
// begin hc_class = 13 ;
55509: LD_ADDR_OWVAR 28
55513: PUSH
55514: LD_INT 13
55516: ST_TO_ADDR
// hc_gallery =  ;
55517: LD_ADDR_OWVAR 33
55521: PUSH
55522: LD_STRING 
55524: ST_TO_ADDR
// animal := CreateHuman ;
55525: LD_ADDR_VAR 0 12
55529: PUSH
55530: CALL_OW 44
55534: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55535: LD_VAR 0 12
55539: PPUSH
55540: LD_VAR 0 8
55544: PPUSH
55545: LD_INT 0
55547: PPUSH
55548: CALL 57197 0 3
// end ;
55552: GO 55506
55554: POP
55555: POP
// if fishes then
55556: LD_VAR 0 7
55560: IFFALSE 55627
// for i = 1 to fishes do
55562: LD_ADDR_VAR 0 11
55566: PUSH
55567: DOUBLE
55568: LD_INT 1
55570: DEC
55571: ST_TO_ADDR
55572: LD_VAR 0 7
55576: PUSH
55577: FOR_TO
55578: IFFALSE 55625
// begin hc_class = 20 ;
55580: LD_ADDR_OWVAR 28
55584: PUSH
55585: LD_INT 20
55587: ST_TO_ADDR
// hc_gallery =  ;
55588: LD_ADDR_OWVAR 33
55592: PUSH
55593: LD_STRING 
55595: ST_TO_ADDR
// animal := CreateHuman ;
55596: LD_ADDR_VAR 0 12
55600: PUSH
55601: CALL_OW 44
55605: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
55606: LD_VAR 0 12
55610: PPUSH
55611: LD_VAR 0 9
55615: PPUSH
55616: LD_INT 0
55618: PPUSH
55619: CALL 57197 0 3
// end ;
55623: GO 55577
55625: POP
55626: POP
// end ;
55627: LD_VAR 0 10
55631: RET
// export function WantHeal ( sci , unit ) ; begin
55632: LD_INT 0
55634: PPUSH
// if GetTaskList ( sci ) > 0 then
55635: LD_VAR 0 1
55639: PPUSH
55640: CALL_OW 437
55644: PUSH
55645: LD_INT 0
55647: GREATER
55648: IFFALSE 55718
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
55650: LD_VAR 0 1
55654: PPUSH
55655: CALL_OW 437
55659: PUSH
55660: LD_INT 1
55662: ARRAY
55663: PUSH
55664: LD_INT 1
55666: ARRAY
55667: PUSH
55668: LD_STRING l
55670: EQUAL
55671: PUSH
55672: LD_VAR 0 1
55676: PPUSH
55677: CALL_OW 437
55681: PUSH
55682: LD_INT 1
55684: ARRAY
55685: PUSH
55686: LD_INT 4
55688: ARRAY
55689: PUSH
55690: LD_VAR 0 2
55694: EQUAL
55695: AND
55696: IFFALSE 55708
// result := true else
55698: LD_ADDR_VAR 0 3
55702: PUSH
55703: LD_INT 1
55705: ST_TO_ADDR
55706: GO 55716
// result := false ;
55708: LD_ADDR_VAR 0 3
55712: PUSH
55713: LD_INT 0
55715: ST_TO_ADDR
// end else
55716: GO 55726
// result := false ;
55718: LD_ADDR_VAR 0 3
55722: PUSH
55723: LD_INT 0
55725: ST_TO_ADDR
// end ;
55726: LD_VAR 0 3
55730: RET
// export function HealTarget ( sci ) ; begin
55731: LD_INT 0
55733: PPUSH
// if not sci then
55734: LD_VAR 0 1
55738: NOT
55739: IFFALSE 55743
// exit ;
55741: GO 55808
// result := 0 ;
55743: LD_ADDR_VAR 0 2
55747: PUSH
55748: LD_INT 0
55750: ST_TO_ADDR
// if GetTaskList ( sci ) then
55751: LD_VAR 0 1
55755: PPUSH
55756: CALL_OW 437
55760: IFFALSE 55808
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
55762: LD_VAR 0 1
55766: PPUSH
55767: CALL_OW 437
55771: PUSH
55772: LD_INT 1
55774: ARRAY
55775: PUSH
55776: LD_INT 1
55778: ARRAY
55779: PUSH
55780: LD_STRING l
55782: EQUAL
55783: IFFALSE 55808
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
55785: LD_ADDR_VAR 0 2
55789: PUSH
55790: LD_VAR 0 1
55794: PPUSH
55795: CALL_OW 437
55799: PUSH
55800: LD_INT 1
55802: ARRAY
55803: PUSH
55804: LD_INT 4
55806: ARRAY
55807: ST_TO_ADDR
// end ;
55808: LD_VAR 0 2
55812: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
55813: LD_INT 0
55815: PPUSH
55816: PPUSH
55817: PPUSH
55818: PPUSH
// if not base_units then
55819: LD_VAR 0 1
55823: NOT
55824: IFFALSE 55828
// exit ;
55826: GO 55915
// result := false ;
55828: LD_ADDR_VAR 0 2
55832: PUSH
55833: LD_INT 0
55835: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
55836: LD_ADDR_VAR 0 5
55840: PUSH
55841: LD_VAR 0 1
55845: PPUSH
55846: LD_INT 21
55848: PUSH
55849: LD_INT 3
55851: PUSH
55852: EMPTY
55853: LIST
55854: LIST
55855: PPUSH
55856: CALL_OW 72
55860: ST_TO_ADDR
// if not tmp then
55861: LD_VAR 0 5
55865: NOT
55866: IFFALSE 55870
// exit ;
55868: GO 55915
// for i in tmp do
55870: LD_ADDR_VAR 0 3
55874: PUSH
55875: LD_VAR 0 5
55879: PUSH
55880: FOR_IN
55881: IFFALSE 55913
// begin result := EnemyInRange ( i , 22 ) ;
55883: LD_ADDR_VAR 0 2
55887: PUSH
55888: LD_VAR 0 3
55892: PPUSH
55893: LD_INT 22
55895: PPUSH
55896: CALL 54151 0 2
55900: ST_TO_ADDR
// if result then
55901: LD_VAR 0 2
55905: IFFALSE 55911
// exit ;
55907: POP
55908: POP
55909: GO 55915
// end ;
55911: GO 55880
55913: POP
55914: POP
// end ;
55915: LD_VAR 0 2
55919: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
55920: LD_INT 0
55922: PPUSH
55923: PPUSH
// if not units then
55924: LD_VAR 0 1
55928: NOT
55929: IFFALSE 55933
// exit ;
55931: GO 56003
// result := [ ] ;
55933: LD_ADDR_VAR 0 3
55937: PUSH
55938: EMPTY
55939: ST_TO_ADDR
// for i in units do
55940: LD_ADDR_VAR 0 4
55944: PUSH
55945: LD_VAR 0 1
55949: PUSH
55950: FOR_IN
55951: IFFALSE 56001
// if GetTag ( i ) = tag then
55953: LD_VAR 0 4
55957: PPUSH
55958: CALL_OW 110
55962: PUSH
55963: LD_VAR 0 2
55967: EQUAL
55968: IFFALSE 55999
// result := Insert ( result , result + 1 , i ) ;
55970: LD_ADDR_VAR 0 3
55974: PUSH
55975: LD_VAR 0 3
55979: PPUSH
55980: LD_VAR 0 3
55984: PUSH
55985: LD_INT 1
55987: PLUS
55988: PPUSH
55989: LD_VAR 0 4
55993: PPUSH
55994: CALL_OW 2
55998: ST_TO_ADDR
55999: GO 55950
56001: POP
56002: POP
// end ;
56003: LD_VAR 0 3
56007: RET
// export function IsDriver ( un ) ; begin
56008: LD_INT 0
56010: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
56011: LD_ADDR_VAR 0 2
56015: PUSH
56016: LD_VAR 0 1
56020: PUSH
56021: LD_INT 55
56023: PUSH
56024: EMPTY
56025: LIST
56026: PPUSH
56027: CALL_OW 69
56031: IN
56032: ST_TO_ADDR
// end ;
56033: LD_VAR 0 2
56037: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
56038: LD_INT 0
56040: PPUSH
56041: PPUSH
// list := [ ] ;
56042: LD_ADDR_VAR 0 5
56046: PUSH
56047: EMPTY
56048: ST_TO_ADDR
// case d of 0 :
56049: LD_VAR 0 3
56053: PUSH
56054: LD_INT 0
56056: DOUBLE
56057: EQUAL
56058: IFTRUE 56062
56060: GO 56195
56062: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
56063: LD_ADDR_VAR 0 5
56067: PUSH
56068: LD_VAR 0 1
56072: PUSH
56073: LD_INT 4
56075: MINUS
56076: PUSH
56077: LD_VAR 0 2
56081: PUSH
56082: LD_INT 4
56084: MINUS
56085: PUSH
56086: LD_INT 2
56088: PUSH
56089: EMPTY
56090: LIST
56091: LIST
56092: LIST
56093: PUSH
56094: LD_VAR 0 1
56098: PUSH
56099: LD_INT 3
56101: MINUS
56102: PUSH
56103: LD_VAR 0 2
56107: PUSH
56108: LD_INT 1
56110: PUSH
56111: EMPTY
56112: LIST
56113: LIST
56114: LIST
56115: PUSH
56116: LD_VAR 0 1
56120: PUSH
56121: LD_INT 4
56123: PLUS
56124: PUSH
56125: LD_VAR 0 2
56129: PUSH
56130: LD_INT 4
56132: PUSH
56133: EMPTY
56134: LIST
56135: LIST
56136: LIST
56137: PUSH
56138: LD_VAR 0 1
56142: PUSH
56143: LD_INT 3
56145: PLUS
56146: PUSH
56147: LD_VAR 0 2
56151: PUSH
56152: LD_INT 3
56154: PLUS
56155: PUSH
56156: LD_INT 5
56158: PUSH
56159: EMPTY
56160: LIST
56161: LIST
56162: LIST
56163: PUSH
56164: LD_VAR 0 1
56168: PUSH
56169: LD_VAR 0 2
56173: PUSH
56174: LD_INT 4
56176: PLUS
56177: PUSH
56178: LD_INT 0
56180: PUSH
56181: EMPTY
56182: LIST
56183: LIST
56184: LIST
56185: PUSH
56186: EMPTY
56187: LIST
56188: LIST
56189: LIST
56190: LIST
56191: LIST
56192: ST_TO_ADDR
// end ; 1 :
56193: GO 56893
56195: LD_INT 1
56197: DOUBLE
56198: EQUAL
56199: IFTRUE 56203
56201: GO 56336
56203: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
56204: LD_ADDR_VAR 0 5
56208: PUSH
56209: LD_VAR 0 1
56213: PUSH
56214: LD_VAR 0 2
56218: PUSH
56219: LD_INT 4
56221: MINUS
56222: PUSH
56223: LD_INT 3
56225: PUSH
56226: EMPTY
56227: LIST
56228: LIST
56229: LIST
56230: PUSH
56231: LD_VAR 0 1
56235: PUSH
56236: LD_INT 3
56238: MINUS
56239: PUSH
56240: LD_VAR 0 2
56244: PUSH
56245: LD_INT 3
56247: MINUS
56248: PUSH
56249: LD_INT 2
56251: PUSH
56252: EMPTY
56253: LIST
56254: LIST
56255: LIST
56256: PUSH
56257: LD_VAR 0 1
56261: PUSH
56262: LD_INT 4
56264: MINUS
56265: PUSH
56266: LD_VAR 0 2
56270: PUSH
56271: LD_INT 1
56273: PUSH
56274: EMPTY
56275: LIST
56276: LIST
56277: LIST
56278: PUSH
56279: LD_VAR 0 1
56283: PUSH
56284: LD_VAR 0 2
56288: PUSH
56289: LD_INT 3
56291: PLUS
56292: PUSH
56293: LD_INT 0
56295: PUSH
56296: EMPTY
56297: LIST
56298: LIST
56299: LIST
56300: PUSH
56301: LD_VAR 0 1
56305: PUSH
56306: LD_INT 4
56308: PLUS
56309: PUSH
56310: LD_VAR 0 2
56314: PUSH
56315: LD_INT 4
56317: PLUS
56318: PUSH
56319: LD_INT 5
56321: PUSH
56322: EMPTY
56323: LIST
56324: LIST
56325: LIST
56326: PUSH
56327: EMPTY
56328: LIST
56329: LIST
56330: LIST
56331: LIST
56332: LIST
56333: ST_TO_ADDR
// end ; 2 :
56334: GO 56893
56336: LD_INT 2
56338: DOUBLE
56339: EQUAL
56340: IFTRUE 56344
56342: GO 56473
56344: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
56345: LD_ADDR_VAR 0 5
56349: PUSH
56350: LD_VAR 0 1
56354: PUSH
56355: LD_VAR 0 2
56359: PUSH
56360: LD_INT 3
56362: MINUS
56363: PUSH
56364: LD_INT 3
56366: PUSH
56367: EMPTY
56368: LIST
56369: LIST
56370: LIST
56371: PUSH
56372: LD_VAR 0 1
56376: PUSH
56377: LD_INT 4
56379: PLUS
56380: PUSH
56381: LD_VAR 0 2
56385: PUSH
56386: LD_INT 4
56388: PUSH
56389: EMPTY
56390: LIST
56391: LIST
56392: LIST
56393: PUSH
56394: LD_VAR 0 1
56398: PUSH
56399: LD_VAR 0 2
56403: PUSH
56404: LD_INT 4
56406: PLUS
56407: PUSH
56408: LD_INT 0
56410: PUSH
56411: EMPTY
56412: LIST
56413: LIST
56414: LIST
56415: PUSH
56416: LD_VAR 0 1
56420: PUSH
56421: LD_INT 3
56423: MINUS
56424: PUSH
56425: LD_VAR 0 2
56429: PUSH
56430: LD_INT 1
56432: PUSH
56433: EMPTY
56434: LIST
56435: LIST
56436: LIST
56437: PUSH
56438: LD_VAR 0 1
56442: PUSH
56443: LD_INT 4
56445: MINUS
56446: PUSH
56447: LD_VAR 0 2
56451: PUSH
56452: LD_INT 4
56454: MINUS
56455: PUSH
56456: LD_INT 2
56458: PUSH
56459: EMPTY
56460: LIST
56461: LIST
56462: LIST
56463: PUSH
56464: EMPTY
56465: LIST
56466: LIST
56467: LIST
56468: LIST
56469: LIST
56470: ST_TO_ADDR
// end ; 3 :
56471: GO 56893
56473: LD_INT 3
56475: DOUBLE
56476: EQUAL
56477: IFTRUE 56481
56479: GO 56614
56481: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
56482: LD_ADDR_VAR 0 5
56486: PUSH
56487: LD_VAR 0 1
56491: PUSH
56492: LD_INT 3
56494: PLUS
56495: PUSH
56496: LD_VAR 0 2
56500: PUSH
56501: LD_INT 4
56503: PUSH
56504: EMPTY
56505: LIST
56506: LIST
56507: LIST
56508: PUSH
56509: LD_VAR 0 1
56513: PUSH
56514: LD_INT 4
56516: PLUS
56517: PUSH
56518: LD_VAR 0 2
56522: PUSH
56523: LD_INT 4
56525: PLUS
56526: PUSH
56527: LD_INT 5
56529: PUSH
56530: EMPTY
56531: LIST
56532: LIST
56533: LIST
56534: PUSH
56535: LD_VAR 0 1
56539: PUSH
56540: LD_INT 4
56542: MINUS
56543: PUSH
56544: LD_VAR 0 2
56548: PUSH
56549: LD_INT 1
56551: PUSH
56552: EMPTY
56553: LIST
56554: LIST
56555: LIST
56556: PUSH
56557: LD_VAR 0 1
56561: PUSH
56562: LD_VAR 0 2
56566: PUSH
56567: LD_INT 4
56569: MINUS
56570: PUSH
56571: LD_INT 3
56573: PUSH
56574: EMPTY
56575: LIST
56576: LIST
56577: LIST
56578: PUSH
56579: LD_VAR 0 1
56583: PUSH
56584: LD_INT 3
56586: MINUS
56587: PUSH
56588: LD_VAR 0 2
56592: PUSH
56593: LD_INT 3
56595: MINUS
56596: PUSH
56597: LD_INT 2
56599: PUSH
56600: EMPTY
56601: LIST
56602: LIST
56603: LIST
56604: PUSH
56605: EMPTY
56606: LIST
56607: LIST
56608: LIST
56609: LIST
56610: LIST
56611: ST_TO_ADDR
// end ; 4 :
56612: GO 56893
56614: LD_INT 4
56616: DOUBLE
56617: EQUAL
56618: IFTRUE 56622
56620: GO 56755
56622: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
56623: LD_ADDR_VAR 0 5
56627: PUSH
56628: LD_VAR 0 1
56632: PUSH
56633: LD_VAR 0 2
56637: PUSH
56638: LD_INT 4
56640: PLUS
56641: PUSH
56642: LD_INT 0
56644: PUSH
56645: EMPTY
56646: LIST
56647: LIST
56648: LIST
56649: PUSH
56650: LD_VAR 0 1
56654: PUSH
56655: LD_INT 3
56657: PLUS
56658: PUSH
56659: LD_VAR 0 2
56663: PUSH
56664: LD_INT 3
56666: PLUS
56667: PUSH
56668: LD_INT 5
56670: PUSH
56671: EMPTY
56672: LIST
56673: LIST
56674: LIST
56675: PUSH
56676: LD_VAR 0 1
56680: PUSH
56681: LD_INT 4
56683: PLUS
56684: PUSH
56685: LD_VAR 0 2
56689: PUSH
56690: LD_INT 4
56692: PUSH
56693: EMPTY
56694: LIST
56695: LIST
56696: LIST
56697: PUSH
56698: LD_VAR 0 1
56702: PUSH
56703: LD_VAR 0 2
56707: PUSH
56708: LD_INT 3
56710: MINUS
56711: PUSH
56712: LD_INT 3
56714: PUSH
56715: EMPTY
56716: LIST
56717: LIST
56718: LIST
56719: PUSH
56720: LD_VAR 0 1
56724: PUSH
56725: LD_INT 4
56727: MINUS
56728: PUSH
56729: LD_VAR 0 2
56733: PUSH
56734: LD_INT 4
56736: MINUS
56737: PUSH
56738: LD_INT 2
56740: PUSH
56741: EMPTY
56742: LIST
56743: LIST
56744: LIST
56745: PUSH
56746: EMPTY
56747: LIST
56748: LIST
56749: LIST
56750: LIST
56751: LIST
56752: ST_TO_ADDR
// end ; 5 :
56753: GO 56893
56755: LD_INT 5
56757: DOUBLE
56758: EQUAL
56759: IFTRUE 56763
56761: GO 56892
56763: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
56764: LD_ADDR_VAR 0 5
56768: PUSH
56769: LD_VAR 0 1
56773: PUSH
56774: LD_INT 4
56776: MINUS
56777: PUSH
56778: LD_VAR 0 2
56782: PUSH
56783: LD_INT 1
56785: PUSH
56786: EMPTY
56787: LIST
56788: LIST
56789: LIST
56790: PUSH
56791: LD_VAR 0 1
56795: PUSH
56796: LD_VAR 0 2
56800: PUSH
56801: LD_INT 4
56803: MINUS
56804: PUSH
56805: LD_INT 3
56807: PUSH
56808: EMPTY
56809: LIST
56810: LIST
56811: LIST
56812: PUSH
56813: LD_VAR 0 1
56817: PUSH
56818: LD_INT 4
56820: PLUS
56821: PUSH
56822: LD_VAR 0 2
56826: PUSH
56827: LD_INT 4
56829: PLUS
56830: PUSH
56831: LD_INT 5
56833: PUSH
56834: EMPTY
56835: LIST
56836: LIST
56837: LIST
56838: PUSH
56839: LD_VAR 0 1
56843: PUSH
56844: LD_INT 3
56846: PLUS
56847: PUSH
56848: LD_VAR 0 2
56852: PUSH
56853: LD_INT 4
56855: PUSH
56856: EMPTY
56857: LIST
56858: LIST
56859: LIST
56860: PUSH
56861: LD_VAR 0 1
56865: PUSH
56866: LD_VAR 0 2
56870: PUSH
56871: LD_INT 3
56873: PLUS
56874: PUSH
56875: LD_INT 0
56877: PUSH
56878: EMPTY
56879: LIST
56880: LIST
56881: LIST
56882: PUSH
56883: EMPTY
56884: LIST
56885: LIST
56886: LIST
56887: LIST
56888: LIST
56889: ST_TO_ADDR
// end ; end ;
56890: GO 56893
56892: POP
// result := list ;
56893: LD_ADDR_VAR 0 4
56897: PUSH
56898: LD_VAR 0 5
56902: ST_TO_ADDR
// end ;
56903: LD_VAR 0 4
56907: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
56908: LD_INT 0
56910: PPUSH
56911: PPUSH
56912: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
56913: LD_VAR 0 1
56917: NOT
56918: PUSH
56919: LD_VAR 0 2
56923: PUSH
56924: LD_INT 1
56926: PUSH
56927: LD_INT 2
56929: PUSH
56930: LD_INT 3
56932: PUSH
56933: LD_INT 4
56935: PUSH
56936: EMPTY
56937: LIST
56938: LIST
56939: LIST
56940: LIST
56941: IN
56942: NOT
56943: OR
56944: IFFALSE 56948
// exit ;
56946: GO 57040
// tmp := [ ] ;
56948: LD_ADDR_VAR 0 5
56952: PUSH
56953: EMPTY
56954: ST_TO_ADDR
// for i in units do
56955: LD_ADDR_VAR 0 4
56959: PUSH
56960: LD_VAR 0 1
56964: PUSH
56965: FOR_IN
56966: IFFALSE 57009
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
56968: LD_ADDR_VAR 0 5
56972: PUSH
56973: LD_VAR 0 5
56977: PPUSH
56978: LD_VAR 0 5
56982: PUSH
56983: LD_INT 1
56985: PLUS
56986: PPUSH
56987: LD_VAR 0 4
56991: PPUSH
56992: LD_VAR 0 2
56996: PPUSH
56997: CALL_OW 259
57001: PPUSH
57002: CALL_OW 2
57006: ST_TO_ADDR
57007: GO 56965
57009: POP
57010: POP
// if not tmp then
57011: LD_VAR 0 5
57015: NOT
57016: IFFALSE 57020
// exit ;
57018: GO 57040
// result := SortListByListDesc ( units , tmp ) ;
57020: LD_ADDR_VAR 0 3
57024: PUSH
57025: LD_VAR 0 1
57029: PPUSH
57030: LD_VAR 0 5
57034: PPUSH
57035: CALL_OW 77
57039: ST_TO_ADDR
// end ;
57040: LD_VAR 0 3
57044: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
57045: LD_INT 0
57047: PPUSH
57048: PPUSH
57049: PPUSH
// x := GetX ( building ) ;
57050: LD_ADDR_VAR 0 4
57054: PUSH
57055: LD_VAR 0 2
57059: PPUSH
57060: CALL_OW 250
57064: ST_TO_ADDR
// y := GetY ( building ) ;
57065: LD_ADDR_VAR 0 5
57069: PUSH
57070: LD_VAR 0 2
57074: PPUSH
57075: CALL_OW 251
57079: ST_TO_ADDR
// if GetTaskList ( unit ) then
57080: LD_VAR 0 1
57084: PPUSH
57085: CALL_OW 437
57089: IFFALSE 57184
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
57091: LD_STRING e
57093: PUSH
57094: LD_VAR 0 1
57098: PPUSH
57099: CALL_OW 437
57103: PUSH
57104: LD_INT 1
57106: ARRAY
57107: PUSH
57108: LD_INT 1
57110: ARRAY
57111: EQUAL
57112: PUSH
57113: LD_VAR 0 4
57117: PUSH
57118: LD_VAR 0 1
57122: PPUSH
57123: CALL_OW 437
57127: PUSH
57128: LD_INT 1
57130: ARRAY
57131: PUSH
57132: LD_INT 2
57134: ARRAY
57135: EQUAL
57136: AND
57137: PUSH
57138: LD_VAR 0 5
57142: PUSH
57143: LD_VAR 0 1
57147: PPUSH
57148: CALL_OW 437
57152: PUSH
57153: LD_INT 1
57155: ARRAY
57156: PUSH
57157: LD_INT 3
57159: ARRAY
57160: EQUAL
57161: AND
57162: IFFALSE 57174
// result := true else
57164: LD_ADDR_VAR 0 3
57168: PUSH
57169: LD_INT 1
57171: ST_TO_ADDR
57172: GO 57182
// result := false ;
57174: LD_ADDR_VAR 0 3
57178: PUSH
57179: LD_INT 0
57181: ST_TO_ADDR
// end else
57182: GO 57192
// result := false ;
57184: LD_ADDR_VAR 0 3
57188: PUSH
57189: LD_INT 0
57191: ST_TO_ADDR
// end ;
57192: LD_VAR 0 3
57196: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
57197: LD_INT 0
57199: PPUSH
57200: PPUSH
57201: PPUSH
57202: PPUSH
// if not unit or not area then
57203: LD_VAR 0 1
57207: NOT
57208: PUSH
57209: LD_VAR 0 2
57213: NOT
57214: OR
57215: IFFALSE 57219
// exit ;
57217: GO 57383
// tmp := AreaToList ( area , i ) ;
57219: LD_ADDR_VAR 0 6
57223: PUSH
57224: LD_VAR 0 2
57228: PPUSH
57229: LD_VAR 0 5
57233: PPUSH
57234: CALL_OW 517
57238: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
57239: LD_ADDR_VAR 0 5
57243: PUSH
57244: DOUBLE
57245: LD_INT 1
57247: DEC
57248: ST_TO_ADDR
57249: LD_VAR 0 6
57253: PUSH
57254: LD_INT 1
57256: ARRAY
57257: PUSH
57258: FOR_TO
57259: IFFALSE 57381
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
57261: LD_ADDR_VAR 0 7
57265: PUSH
57266: LD_VAR 0 6
57270: PUSH
57271: LD_INT 1
57273: ARRAY
57274: PUSH
57275: LD_VAR 0 5
57279: ARRAY
57280: PUSH
57281: LD_VAR 0 6
57285: PUSH
57286: LD_INT 2
57288: ARRAY
57289: PUSH
57290: LD_VAR 0 5
57294: ARRAY
57295: PUSH
57296: EMPTY
57297: LIST
57298: LIST
57299: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
57300: LD_VAR 0 7
57304: PUSH
57305: LD_INT 1
57307: ARRAY
57308: PPUSH
57309: LD_VAR 0 7
57313: PUSH
57314: LD_INT 2
57316: ARRAY
57317: PPUSH
57318: CALL_OW 428
57322: PUSH
57323: LD_INT 0
57325: EQUAL
57326: IFFALSE 57379
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
57328: LD_VAR 0 1
57332: PPUSH
57333: LD_VAR 0 7
57337: PUSH
57338: LD_INT 1
57340: ARRAY
57341: PPUSH
57342: LD_VAR 0 7
57346: PUSH
57347: LD_INT 2
57349: ARRAY
57350: PPUSH
57351: LD_VAR 0 3
57355: PPUSH
57356: CALL_OW 48
// result := IsPlaced ( unit ) ;
57360: LD_ADDR_VAR 0 4
57364: PUSH
57365: LD_VAR 0 1
57369: PPUSH
57370: CALL_OW 305
57374: ST_TO_ADDR
// exit ;
57375: POP
57376: POP
57377: GO 57383
// end ; end ;
57379: GO 57258
57381: POP
57382: POP
// end ;
57383: LD_VAR 0 4
57387: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
57388: LD_INT 0
57390: PPUSH
57391: PPUSH
57392: PPUSH
// if not side or side > 8 then
57393: LD_VAR 0 1
57397: NOT
57398: PUSH
57399: LD_VAR 0 1
57403: PUSH
57404: LD_INT 8
57406: GREATER
57407: OR
57408: IFFALSE 57412
// exit ;
57410: GO 57599
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
57412: LD_ADDR_VAR 0 4
57416: PUSH
57417: LD_INT 22
57419: PUSH
57420: LD_VAR 0 1
57424: PUSH
57425: EMPTY
57426: LIST
57427: LIST
57428: PUSH
57429: LD_INT 21
57431: PUSH
57432: LD_INT 3
57434: PUSH
57435: EMPTY
57436: LIST
57437: LIST
57438: PUSH
57439: EMPTY
57440: LIST
57441: LIST
57442: PPUSH
57443: CALL_OW 69
57447: ST_TO_ADDR
// if not tmp then
57448: LD_VAR 0 4
57452: NOT
57453: IFFALSE 57457
// exit ;
57455: GO 57599
// enable_addtolog := true ;
57457: LD_ADDR_OWVAR 81
57461: PUSH
57462: LD_INT 1
57464: ST_TO_ADDR
// AddToLog ( [ ) ;
57465: LD_STRING [
57467: PPUSH
57468: CALL_OW 561
// for i in tmp do
57472: LD_ADDR_VAR 0 3
57476: PUSH
57477: LD_VAR 0 4
57481: PUSH
57482: FOR_IN
57483: IFFALSE 57590
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
57485: LD_STRING [
57487: PUSH
57488: LD_VAR 0 3
57492: PPUSH
57493: CALL_OW 266
57497: STR
57498: PUSH
57499: LD_STRING , 
57501: STR
57502: PUSH
57503: LD_VAR 0 3
57507: PPUSH
57508: CALL_OW 250
57512: STR
57513: PUSH
57514: LD_STRING , 
57516: STR
57517: PUSH
57518: LD_VAR 0 3
57522: PPUSH
57523: CALL_OW 251
57527: STR
57528: PUSH
57529: LD_STRING , 
57531: STR
57532: PUSH
57533: LD_VAR 0 3
57537: PPUSH
57538: CALL_OW 254
57542: STR
57543: PUSH
57544: LD_STRING , 
57546: STR
57547: PUSH
57548: LD_VAR 0 3
57552: PPUSH
57553: LD_INT 1
57555: PPUSH
57556: CALL_OW 268
57560: STR
57561: PUSH
57562: LD_STRING , 
57564: STR
57565: PUSH
57566: LD_VAR 0 3
57570: PPUSH
57571: LD_INT 2
57573: PPUSH
57574: CALL_OW 268
57578: STR
57579: PUSH
57580: LD_STRING ],
57582: STR
57583: PPUSH
57584: CALL_OW 561
// end ;
57588: GO 57482
57590: POP
57591: POP
// AddToLog ( ]; ) ;
57592: LD_STRING ];
57594: PPUSH
57595: CALL_OW 561
// end ;
57599: LD_VAR 0 2
57603: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
57604: LD_INT 0
57606: PPUSH
57607: PPUSH
57608: PPUSH
57609: PPUSH
57610: PPUSH
// if not area or not rate or not max then
57611: LD_VAR 0 1
57615: NOT
57616: PUSH
57617: LD_VAR 0 2
57621: NOT
57622: OR
57623: PUSH
57624: LD_VAR 0 4
57628: NOT
57629: OR
57630: IFFALSE 57634
// exit ;
57632: GO 57826
// while 1 do
57634: LD_INT 1
57636: IFFALSE 57826
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
57638: LD_ADDR_VAR 0 9
57642: PUSH
57643: LD_VAR 0 1
57647: PPUSH
57648: LD_INT 1
57650: PPUSH
57651: CALL_OW 287
57655: PUSH
57656: LD_INT 10
57658: MUL
57659: ST_TO_ADDR
// r := rate / 10 ;
57660: LD_ADDR_VAR 0 7
57664: PUSH
57665: LD_VAR 0 2
57669: PUSH
57670: LD_INT 10
57672: DIVREAL
57673: ST_TO_ADDR
// time := 1 1$00 ;
57674: LD_ADDR_VAR 0 8
57678: PUSH
57679: LD_INT 2100
57681: ST_TO_ADDR
// if amount < min then
57682: LD_VAR 0 9
57686: PUSH
57687: LD_VAR 0 3
57691: LESS
57692: IFFALSE 57710
// r := r * 2 else
57694: LD_ADDR_VAR 0 7
57698: PUSH
57699: LD_VAR 0 7
57703: PUSH
57704: LD_INT 2
57706: MUL
57707: ST_TO_ADDR
57708: GO 57736
// if amount > max then
57710: LD_VAR 0 9
57714: PUSH
57715: LD_VAR 0 4
57719: GREATER
57720: IFFALSE 57736
// r := r / 2 ;
57722: LD_ADDR_VAR 0 7
57726: PUSH
57727: LD_VAR 0 7
57731: PUSH
57732: LD_INT 2
57734: DIVREAL
57735: ST_TO_ADDR
// time := time / r ;
57736: LD_ADDR_VAR 0 8
57740: PUSH
57741: LD_VAR 0 8
57745: PUSH
57746: LD_VAR 0 7
57750: DIVREAL
57751: ST_TO_ADDR
// if time < 0 then
57752: LD_VAR 0 8
57756: PUSH
57757: LD_INT 0
57759: LESS
57760: IFFALSE 57777
// time := time * - 1 ;
57762: LD_ADDR_VAR 0 8
57766: PUSH
57767: LD_VAR 0 8
57771: PUSH
57772: LD_INT 1
57774: NEG
57775: MUL
57776: ST_TO_ADDR
// wait ( time ) ;
57777: LD_VAR 0 8
57781: PPUSH
57782: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
57786: LD_INT 35
57788: PPUSH
57789: LD_INT 875
57791: PPUSH
57792: CALL_OW 12
57796: PPUSH
57797: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
57801: LD_INT 1
57803: PPUSH
57804: LD_INT 5
57806: PPUSH
57807: CALL_OW 12
57811: PPUSH
57812: LD_VAR 0 1
57816: PPUSH
57817: LD_INT 1
57819: PPUSH
57820: CALL_OW 55
// end ;
57824: GO 57634
// end ;
57826: LD_VAR 0 5
57830: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
57831: LD_INT 0
57833: PPUSH
57834: PPUSH
57835: PPUSH
57836: PPUSH
57837: PPUSH
57838: PPUSH
57839: PPUSH
57840: PPUSH
// if not turrets or not factories then
57841: LD_VAR 0 1
57845: NOT
57846: PUSH
57847: LD_VAR 0 2
57851: NOT
57852: OR
57853: IFFALSE 57857
// exit ;
57855: GO 58164
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
57857: LD_ADDR_VAR 0 10
57861: PUSH
57862: LD_INT 5
57864: PUSH
57865: LD_INT 6
57867: PUSH
57868: EMPTY
57869: LIST
57870: LIST
57871: PUSH
57872: LD_INT 2
57874: PUSH
57875: LD_INT 4
57877: PUSH
57878: EMPTY
57879: LIST
57880: LIST
57881: PUSH
57882: LD_INT 3
57884: PUSH
57885: LD_INT 5
57887: PUSH
57888: EMPTY
57889: LIST
57890: LIST
57891: PUSH
57892: EMPTY
57893: LIST
57894: LIST
57895: LIST
57896: PUSH
57897: LD_INT 24
57899: PUSH
57900: LD_INT 25
57902: PUSH
57903: EMPTY
57904: LIST
57905: LIST
57906: PUSH
57907: LD_INT 23
57909: PUSH
57910: LD_INT 27
57912: PUSH
57913: EMPTY
57914: LIST
57915: LIST
57916: PUSH
57917: EMPTY
57918: LIST
57919: LIST
57920: PUSH
57921: LD_INT 42
57923: PUSH
57924: LD_INT 43
57926: PUSH
57927: EMPTY
57928: LIST
57929: LIST
57930: PUSH
57931: LD_INT 44
57933: PUSH
57934: LD_INT 46
57936: PUSH
57937: EMPTY
57938: LIST
57939: LIST
57940: PUSH
57941: LD_INT 45
57943: PUSH
57944: LD_INT 47
57946: PUSH
57947: EMPTY
57948: LIST
57949: LIST
57950: PUSH
57951: EMPTY
57952: LIST
57953: LIST
57954: LIST
57955: PUSH
57956: EMPTY
57957: LIST
57958: LIST
57959: LIST
57960: ST_TO_ADDR
// result := [ ] ;
57961: LD_ADDR_VAR 0 3
57965: PUSH
57966: EMPTY
57967: ST_TO_ADDR
// for i in turrets do
57968: LD_ADDR_VAR 0 4
57972: PUSH
57973: LD_VAR 0 1
57977: PUSH
57978: FOR_IN
57979: IFFALSE 58162
// begin nat := GetNation ( i ) ;
57981: LD_ADDR_VAR 0 7
57985: PUSH
57986: LD_VAR 0 4
57990: PPUSH
57991: CALL_OW 248
57995: ST_TO_ADDR
// weapon := 0 ;
57996: LD_ADDR_VAR 0 8
58000: PUSH
58001: LD_INT 0
58003: ST_TO_ADDR
// if not nat then
58004: LD_VAR 0 7
58008: NOT
58009: IFFALSE 58013
// continue ;
58011: GO 57978
// for j in list [ nat ] do
58013: LD_ADDR_VAR 0 5
58017: PUSH
58018: LD_VAR 0 10
58022: PUSH
58023: LD_VAR 0 7
58027: ARRAY
58028: PUSH
58029: FOR_IN
58030: IFFALSE 58071
// if GetBWeapon ( i ) = j [ 1 ] then
58032: LD_VAR 0 4
58036: PPUSH
58037: CALL_OW 269
58041: PUSH
58042: LD_VAR 0 5
58046: PUSH
58047: LD_INT 1
58049: ARRAY
58050: EQUAL
58051: IFFALSE 58069
// begin weapon := j [ 2 ] ;
58053: LD_ADDR_VAR 0 8
58057: PUSH
58058: LD_VAR 0 5
58062: PUSH
58063: LD_INT 2
58065: ARRAY
58066: ST_TO_ADDR
// break ;
58067: GO 58071
// end ;
58069: GO 58029
58071: POP
58072: POP
// if not weapon then
58073: LD_VAR 0 8
58077: NOT
58078: IFFALSE 58082
// continue ;
58080: GO 57978
// for k in factories do
58082: LD_ADDR_VAR 0 6
58086: PUSH
58087: LD_VAR 0 2
58091: PUSH
58092: FOR_IN
58093: IFFALSE 58158
// begin weapons := AvailableWeaponList ( k ) ;
58095: LD_ADDR_VAR 0 9
58099: PUSH
58100: LD_VAR 0 6
58104: PPUSH
58105: CALL_OW 478
58109: ST_TO_ADDR
// if not weapons then
58110: LD_VAR 0 9
58114: NOT
58115: IFFALSE 58119
// continue ;
58117: GO 58092
// if weapon in weapons then
58119: LD_VAR 0 8
58123: PUSH
58124: LD_VAR 0 9
58128: IN
58129: IFFALSE 58156
// begin result := [ i , weapon ] ;
58131: LD_ADDR_VAR 0 3
58135: PUSH
58136: LD_VAR 0 4
58140: PUSH
58141: LD_VAR 0 8
58145: PUSH
58146: EMPTY
58147: LIST
58148: LIST
58149: ST_TO_ADDR
// exit ;
58150: POP
58151: POP
58152: POP
58153: POP
58154: GO 58164
// end ; end ;
58156: GO 58092
58158: POP
58159: POP
// end ;
58160: GO 57978
58162: POP
58163: POP
// end ;
58164: LD_VAR 0 3
58168: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
58169: LD_INT 0
58171: PPUSH
// if not side or side > 8 then
58172: LD_VAR 0 3
58176: NOT
58177: PUSH
58178: LD_VAR 0 3
58182: PUSH
58183: LD_INT 8
58185: GREATER
58186: OR
58187: IFFALSE 58191
// exit ;
58189: GO 58250
// if not range then
58191: LD_VAR 0 4
58195: NOT
58196: IFFALSE 58207
// range := - 12 ;
58198: LD_ADDR_VAR 0 4
58202: PUSH
58203: LD_INT 12
58205: NEG
58206: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
58207: LD_VAR 0 1
58211: PPUSH
58212: LD_VAR 0 2
58216: PPUSH
58217: LD_VAR 0 3
58221: PPUSH
58222: LD_VAR 0 4
58226: PPUSH
58227: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
58231: LD_VAR 0 1
58235: PPUSH
58236: LD_VAR 0 2
58240: PPUSH
58241: LD_VAR 0 3
58245: PPUSH
58246: CALL_OW 331
// end ;
58250: LD_VAR 0 5
58254: RET
// export function Video ( mode ) ; begin
58255: LD_INT 0
58257: PPUSH
// ingame_video = mode ;
58258: LD_ADDR_OWVAR 52
58262: PUSH
58263: LD_VAR 0 1
58267: ST_TO_ADDR
// interface_hidden = mode ;
58268: LD_ADDR_OWVAR 54
58272: PUSH
58273: LD_VAR 0 1
58277: ST_TO_ADDR
// end ;
58278: LD_VAR 0 2
58282: RET
// export function Join ( array , element ) ; begin
58283: LD_INT 0
58285: PPUSH
// result := Replace ( array , array + 1 , element ) ;
58286: LD_ADDR_VAR 0 3
58290: PUSH
58291: LD_VAR 0 1
58295: PPUSH
58296: LD_VAR 0 1
58300: PUSH
58301: LD_INT 1
58303: PLUS
58304: PPUSH
58305: LD_VAR 0 2
58309: PPUSH
58310: CALL_OW 1
58314: ST_TO_ADDR
// end ;
58315: LD_VAR 0 3
58319: RET
// export function JoinUnion ( array , element ) ; begin
58320: LD_INT 0
58322: PPUSH
// result := array union element ;
58323: LD_ADDR_VAR 0 3
58327: PUSH
58328: LD_VAR 0 1
58332: PUSH
58333: LD_VAR 0 2
58337: UNION
58338: ST_TO_ADDR
// end ;
58339: LD_VAR 0 3
58343: RET
// export function GetBehemoths ( side ) ; begin
58344: LD_INT 0
58346: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
58347: LD_ADDR_VAR 0 2
58351: PUSH
58352: LD_INT 22
58354: PUSH
58355: LD_VAR 0 1
58359: PUSH
58360: EMPTY
58361: LIST
58362: LIST
58363: PUSH
58364: LD_INT 31
58366: PUSH
58367: LD_INT 25
58369: PUSH
58370: EMPTY
58371: LIST
58372: LIST
58373: PUSH
58374: EMPTY
58375: LIST
58376: LIST
58377: PPUSH
58378: CALL_OW 69
58382: ST_TO_ADDR
// end ;
58383: LD_VAR 0 2
58387: RET
// export function Shuffle ( array ) ; var i , index ; begin
58388: LD_INT 0
58390: PPUSH
58391: PPUSH
58392: PPUSH
// result := [ ] ;
58393: LD_ADDR_VAR 0 2
58397: PUSH
58398: EMPTY
58399: ST_TO_ADDR
// if not array then
58400: LD_VAR 0 1
58404: NOT
58405: IFFALSE 58409
// exit ;
58407: GO 58508
// Randomize ;
58409: CALL_OW 10
// for i = array downto 1 do
58413: LD_ADDR_VAR 0 3
58417: PUSH
58418: DOUBLE
58419: LD_VAR 0 1
58423: INC
58424: ST_TO_ADDR
58425: LD_INT 1
58427: PUSH
58428: FOR_DOWNTO
58429: IFFALSE 58506
// begin index := rand ( 1 , array ) ;
58431: LD_ADDR_VAR 0 4
58435: PUSH
58436: LD_INT 1
58438: PPUSH
58439: LD_VAR 0 1
58443: PPUSH
58444: CALL_OW 12
58448: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
58449: LD_ADDR_VAR 0 2
58453: PUSH
58454: LD_VAR 0 2
58458: PPUSH
58459: LD_VAR 0 2
58463: PUSH
58464: LD_INT 1
58466: PLUS
58467: PPUSH
58468: LD_VAR 0 1
58472: PUSH
58473: LD_VAR 0 4
58477: ARRAY
58478: PPUSH
58479: CALL_OW 2
58483: ST_TO_ADDR
// array := Delete ( array , index ) ;
58484: LD_ADDR_VAR 0 1
58488: PUSH
58489: LD_VAR 0 1
58493: PPUSH
58494: LD_VAR 0 4
58498: PPUSH
58499: CALL_OW 3
58503: ST_TO_ADDR
// end ;
58504: GO 58428
58506: POP
58507: POP
// end ;
58508: LD_VAR 0 2
58512: RET
// export function GetBaseMaterials ( base ) ; begin
58513: LD_INT 0
58515: PPUSH
// result := [ 0 , 0 , 0 ] ;
58516: LD_ADDR_VAR 0 2
58520: PUSH
58521: LD_INT 0
58523: PUSH
58524: LD_INT 0
58526: PUSH
58527: LD_INT 0
58529: PUSH
58530: EMPTY
58531: LIST
58532: LIST
58533: LIST
58534: ST_TO_ADDR
// if not base then
58535: LD_VAR 0 1
58539: NOT
58540: IFFALSE 58544
// exit ;
58542: GO 58593
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
58544: LD_ADDR_VAR 0 2
58548: PUSH
58549: LD_VAR 0 1
58553: PPUSH
58554: LD_INT 1
58556: PPUSH
58557: CALL_OW 275
58561: PUSH
58562: LD_VAR 0 1
58566: PPUSH
58567: LD_INT 2
58569: PPUSH
58570: CALL_OW 275
58574: PUSH
58575: LD_VAR 0 1
58579: PPUSH
58580: LD_INT 3
58582: PPUSH
58583: CALL_OW 275
58587: PUSH
58588: EMPTY
58589: LIST
58590: LIST
58591: LIST
58592: ST_TO_ADDR
// end ;
58593: LD_VAR 0 2
58597: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
58598: LD_INT 0
58600: PPUSH
58601: PPUSH
// result := array ;
58602: LD_ADDR_VAR 0 3
58606: PUSH
58607: LD_VAR 0 1
58611: ST_TO_ADDR
// if size > 0 then
58612: LD_VAR 0 2
58616: PUSH
58617: LD_INT 0
58619: GREATER
58620: IFFALSE 58666
// for i := array downto size do
58622: LD_ADDR_VAR 0 4
58626: PUSH
58627: DOUBLE
58628: LD_VAR 0 1
58632: INC
58633: ST_TO_ADDR
58634: LD_VAR 0 2
58638: PUSH
58639: FOR_DOWNTO
58640: IFFALSE 58664
// result := Delete ( result , result ) ;
58642: LD_ADDR_VAR 0 3
58646: PUSH
58647: LD_VAR 0 3
58651: PPUSH
58652: LD_VAR 0 3
58656: PPUSH
58657: CALL_OW 3
58661: ST_TO_ADDR
58662: GO 58639
58664: POP
58665: POP
// end ;
58666: LD_VAR 0 3
58670: RET
// export function ComExit ( unit ) ; var tmp ; begin
58671: LD_INT 0
58673: PPUSH
58674: PPUSH
// if not IsInUnit ( unit ) then
58675: LD_VAR 0 1
58679: PPUSH
58680: CALL_OW 310
58684: NOT
58685: IFFALSE 58689
// exit ;
58687: GO 58749
// tmp := IsInUnit ( unit ) ;
58689: LD_ADDR_VAR 0 3
58693: PUSH
58694: LD_VAR 0 1
58698: PPUSH
58699: CALL_OW 310
58703: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
58704: LD_VAR 0 3
58708: PPUSH
58709: CALL_OW 247
58713: PUSH
58714: LD_INT 2
58716: EQUAL
58717: IFFALSE 58730
// ComExitVehicle ( unit ) else
58719: LD_VAR 0 1
58723: PPUSH
58724: CALL_OW 121
58728: GO 58739
// ComExitBuilding ( unit ) ;
58730: LD_VAR 0 1
58734: PPUSH
58735: CALL_OW 122
// result := tmp ;
58739: LD_ADDR_VAR 0 2
58743: PUSH
58744: LD_VAR 0 3
58748: ST_TO_ADDR
// end ;
58749: LD_VAR 0 2
58753: RET
// export function ResetHc ; begin
58754: LD_INT 0
58756: PPUSH
// InitHc ;
58757: CALL_OW 19
// hc_importance := 0 ;
58761: LD_ADDR_OWVAR 32
58765: PUSH
58766: LD_INT 0
58768: ST_TO_ADDR
// end ;
58769: LD_VAR 0 1
58773: RET
