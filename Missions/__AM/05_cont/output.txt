// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RandomizeAll ;
  11: CALL_OW 11
// Init ;
  15: CALL 83 0 0
// InitRestrictions ;
  19: CALL 211 0 0
// if debug then
  23: LD_EXP 1
  27: IFFALSE 33
// DebugMode ;
  29: CALL 292 0 0
// SpawnApeman ( apemanStartArea , 2 ) ;
  33: LD_INT 12
  35: PPUSH
  36: LD_INT 2
  38: PPUSH
  39: CALL 599 0 2
// SpawnApeman ( apemanArea , [ 10 , 8 , 7 , 6 ] [ Difficulty ] ) ;
  43: LD_INT 11
  45: PPUSH
  46: LD_INT 10
  48: PUSH
  49: LD_INT 8
  51: PUSH
  52: LD_INT 7
  54: PUSH
  55: LD_INT 6
  57: PUSH
  58: EMPTY
  59: LIST
  60: LIST
  61: LIST
  62: LIST
  63: PUSH
  64: LD_OWVAR 67
  68: ARRAY
  69: PPUSH
  70: CALL 599 0 2
// PrepareAmericans ;
  74: CALL 1198 0 0
// Action ;
  78: CALL 2134 0 0
// end ;
  82: END
// export debug ; export mission_prefix , mission_prefix_prev ; export deltaBuilded , denisArrives , Delta , radar_allowed , first_apeman_tamed , apeman_army , radar_researched , radar_builded ; export apeman_counter , arab_spotted , end_mission , apeKillCounter ; function Init ; begin
  83: LD_INT 0
  85: PPUSH
// debug := false ;
  86: LD_ADDR_EXP 1
  90: PUSH
  91: LD_INT 0
  93: ST_TO_ADDR
// mission_prefix := 05_ ;
  94: LD_ADDR_EXP 2
  98: PUSH
  99: LD_STRING 05_
 101: ST_TO_ADDR
// mission_prefix_prev := 05a_ ;
 102: LD_ADDR_EXP 3
 106: PUSH
 107: LD_STRING 05a_
 109: ST_TO_ADDR
// deltaBuilded := false ;
 110: LD_ADDR_EXP 4
 114: PUSH
 115: LD_INT 0
 117: ST_TO_ADDR
// denisArrives := false ;
 118: LD_ADDR_EXP 5
 122: PUSH
 123: LD_INT 0
 125: ST_TO_ADDR
// radar_allowed := false ;
 126: LD_ADDR_EXP 7
 130: PUSH
 131: LD_INT 0
 133: ST_TO_ADDR
// first_apeman_tamed := false ;
 134: LD_ADDR_EXP 8
 138: PUSH
 139: LD_INT 0
 141: ST_TO_ADDR
// arab_spotted := false ;
 142: LD_ADDR_EXP 13
 146: PUSH
 147: LD_INT 0
 149: ST_TO_ADDR
// end_mission := false ;
 150: LD_ADDR_EXP 14
 154: PUSH
 155: LD_INT 0
 157: ST_TO_ADDR
// apeman_army := false ;
 158: LD_ADDR_EXP 9
 162: PUSH
 163: LD_INT 0
 165: ST_TO_ADDR
// radar_researched := false ;
 166: LD_ADDR_EXP 10
 170: PUSH
 171: LD_INT 0
 173: ST_TO_ADDR
// radar_builded := false ;
 174: LD_ADDR_EXP 11
 178: PUSH
 179: LD_INT 0
 181: ST_TO_ADDR
// apeman_counter := 0 ;
 182: LD_ADDR_EXP 12
 186: PUSH
 187: LD_INT 0
 189: ST_TO_ADDR
// Delta := 0 ;
 190: LD_ADDR_EXP 6
 194: PUSH
 195: LD_INT 0
 197: ST_TO_ADDR
// apeKillCounter := 0 ;
 198: LD_ADDR_EXP 15
 202: PUSH
 203: LD_INT 0
 205: ST_TO_ADDR
// end ;
 206: LD_VAR 0 1
 210: RET
// function InitRestrictions ; begin
 211: LD_INT 0
 213: PPUSH
// SetRestrict ( b_lab_half , 1 , state_enabled ) ;
 214: LD_INT 7
 216: PPUSH
 217: LD_INT 1
 219: PPUSH
 220: LD_INT 1
 222: PPUSH
 223: CALL_OW 324
// SetRestrict ( b_lab_full , 1 , state_enabled ) ;
 227: LD_INT 8
 229: PPUSH
 230: LD_INT 1
 232: PPUSH
 233: LD_INT 1
 235: PPUSH
 236: CALL_OW 324
// SetRestrict ( b_lab_weapon , 1 , state_enabled ) ;
 240: LD_INT 10
 242: PPUSH
 243: LD_INT 1
 245: PPUSH
 246: LD_INT 1
 248: PPUSH
 249: CALL_OW 324
// SetTech ( tech_gatling , 1 , LoadVariable ( GatlingInGamma , 1 ) ) ;
 253: LD_INT 69
 255: PPUSH
 256: LD_INT 1
 258: PPUSH
 259: LD_STRING GatlingInGamma
 261: PPUSH
 262: LD_INT 1
 264: PPUSH
 265: CALL_OW 30
 269: PPUSH
 270: CALL_OW 322
// SetTech ( tech_weap1 , 1 , state_enabled ) ;
 274: LD_INT 51
 276: PPUSH
 277: LD_INT 1
 279: PPUSH
 280: LD_INT 1
 282: PPUSH
 283: CALL_OW 322
// end ;
 287: LD_VAR 0 1
 291: RET
// function DebugMode ; begin
 292: LD_INT 0
 294: PPUSH
// FogOff ( 1 ) ;
 295: LD_INT 1
 297: PPUSH
 298: CALL_OW 344
// Difficulty := 2 ;
 302: LD_ADDR_OWVAR 67
 306: PUSH
 307: LD_INT 2
 309: ST_TO_ADDR
// end ;
 310: LD_VAR 0 1
 314: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 0 ] ] ) >= 7 do
 315: LD_INT 22
 317: PUSH
 318: LD_INT 1
 320: PUSH
 321: EMPTY
 322: LIST
 323: LIST
 324: PUSH
 325: LD_INT 23
 327: PUSH
 328: LD_INT 0
 330: PUSH
 331: EMPTY
 332: LIST
 333: LIST
 334: PUSH
 335: EMPTY
 336: LIST
 337: LIST
 338: PPUSH
 339: CALL_OW 69
 343: PUSH
 344: LD_INT 7
 346: GREATEREQUAL
 347: IFFALSE 359
 349: GO 351
 351: DISABLE
// SetAchievement ( ACH_TAME ) ;
 352: LD_STRING ACH_TAME
 354: PPUSH
 355: CALL_OW 543
 359: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_bweapon , us_radar ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_radar ] ] ) do
 360: LD_INT 22
 362: PUSH
 363: LD_INT 1
 365: PUSH
 366: EMPTY
 367: LIST
 368: LIST
 369: PUSH
 370: LD_INT 35
 372: PUSH
 373: LD_INT 11
 375: PUSH
 376: EMPTY
 377: LIST
 378: LIST
 379: PUSH
 380: EMPTY
 381: LIST
 382: LIST
 383: PPUSH
 384: CALL_OW 69
 388: PUSH
 389: LD_INT 22
 391: PUSH
 392: LD_INT 1
 394: PUSH
 395: EMPTY
 396: LIST
 397: LIST
 398: PUSH
 399: LD_INT 34
 401: PUSH
 402: LD_INT 11
 404: PUSH
 405: EMPTY
 406: LIST
 407: LIST
 408: PUSH
 409: EMPTY
 410: LIST
 411: LIST
 412: PPUSH
 413: CALL_OW 69
 417: AND
 418: IFFALSE 430
 420: GO 422
 422: DISABLE
// SetAchievement ( ACH_RADAR ) ; end_of_file
 423: LD_STRING ACH_RADAR
 425: PPUSH
 426: CALL_OW 543
 430: END
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 431: LD_INT 0
 433: PPUSH
// uc_side := side ;
 434: LD_ADDR_OWVAR 20
 438: PUSH
 439: LD_VAR 0 1
 443: ST_TO_ADDR
// uc_nation := nation ;
 444: LD_ADDR_OWVAR 21
 448: PUSH
 449: LD_VAR 0 2
 453: ST_TO_ADDR
// vc_chassis := chassis ;
 454: LD_ADDR_OWVAR 37
 458: PUSH
 459: LD_VAR 0 3
 463: ST_TO_ADDR
// vc_engine := engine ;
 464: LD_ADDR_OWVAR 39
 468: PUSH
 469: LD_VAR 0 4
 473: ST_TO_ADDR
// vc_control := control ;
 474: LD_ADDR_OWVAR 38
 478: PUSH
 479: LD_VAR 0 5
 483: ST_TO_ADDR
// vc_weapon := weapon ;
 484: LD_ADDR_OWVAR 40
 488: PUSH
 489: LD_VAR 0 6
 493: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 494: LD_ADDR_OWVAR 41
 498: PUSH
 499: LD_VAR 0 7
 503: ST_TO_ADDR
// result := CreateVehicle ;
 504: LD_ADDR_VAR 0 8
 508: PUSH
 509: CALL_OW 45
 513: ST_TO_ADDR
// end ;
 514: LD_VAR 0 8
 518: RET
// export function SayX ( units , ident ) ; var i ; begin
 519: LD_INT 0
 521: PPUSH
 522: PPUSH
// result := false ;
 523: LD_ADDR_VAR 0 3
 527: PUSH
 528: LD_INT 0
 530: ST_TO_ADDR
// if not units then
 531: LD_VAR 0 1
 535: NOT
 536: IFFALSE 540
// exit ;
 538: GO 594
// for i in units do
 540: LD_ADDR_VAR 0 4
 544: PUSH
 545: LD_VAR 0 1
 549: PUSH
 550: FOR_IN
 551: IFFALSE 592
// if IsOk ( i ) then
 553: LD_VAR 0 4
 557: PPUSH
 558: CALL_OW 302
 562: IFFALSE 590
// begin Say ( i , ident ) ;
 564: LD_VAR 0 4
 568: PPUSH
 569: LD_VAR 0 2
 573: PPUSH
 574: CALL_OW 88
// result := i ;
 578: LD_ADDR_VAR 0 3
 582: PUSH
 583: LD_VAR 0 4
 587: ST_TO_ADDR
// break ;
 588: GO 592
// end ;
 590: GO 550
 592: POP
 593: POP
// end ;
 594: LD_VAR 0 3
 598: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 599: LD_INT 0
 601: PPUSH
 602: PPUSH
// InitUc ;
 603: CALL_OW 18
// InitHc ;
 607: CALL_OW 19
// uc_side := 0 ;
 611: LD_ADDR_OWVAR 20
 615: PUSH
 616: LD_INT 0
 618: ST_TO_ADDR
// uc_nation := 0 ;
 619: LD_ADDR_OWVAR 21
 623: PUSH
 624: LD_INT 0
 626: ST_TO_ADDR
// for i = 1 to amount do
 627: LD_ADDR_VAR 0 4
 631: PUSH
 632: DOUBLE
 633: LD_INT 1
 635: DEC
 636: ST_TO_ADDR
 637: LD_VAR 0 2
 641: PUSH
 642: FOR_TO
 643: IFFALSE 725
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 645: LD_ADDR_OWVAR 29
 649: PUSH
 650: LD_INT 9
 652: PPUSH
 653: LD_INT 12
 655: PPUSH
 656: CALL_OW 12
 660: PUSH
 661: LD_INT 9
 663: PPUSH
 664: LD_INT 12
 666: PPUSH
 667: CALL_OW 12
 671: PUSH
 672: EMPTY
 673: LIST
 674: LIST
 675: ST_TO_ADDR
// hc_agressivity := rand ( - 5 , 5 ) ;
 676: LD_ADDR_OWVAR 35
 680: PUSH
 681: LD_INT 5
 683: NEG
 684: PPUSH
 685: LD_INT 5
 687: PPUSH
 688: CALL_OW 12
 692: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 693: LD_INT 0
 695: PPUSH
 696: LD_INT 12
 698: PPUSH
 699: LD_INT 1
 701: PPUSH
 702: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 706: CALL_OW 44
 710: PPUSH
 711: LD_VAR 0 1
 715: PPUSH
 716: LD_INT 0
 718: PPUSH
 719: CALL_OW 49
// end ;
 723: GO 642
 725: POP
 726: POP
// InitHc ;
 727: CALL_OW 19
// end ;
 731: LD_VAR 0 3
 735: RET
// export function Attack ( unit , enemy_list ) ; var target , targets_list ; begin
 736: LD_INT 0
 738: PPUSH
 739: PPUSH
 740: PPUSH
// if not unit then
 741: LD_VAR 0 1
 745: NOT
 746: IFFALSE 750
// exit ;
 748: GO 1193
// if IsInUnit ( unit ) then
 750: LD_VAR 0 1
 754: PPUSH
 755: CALL_OW 310
 759: IFFALSE 776
// unit := IsDrivenBy ( unit ) ;
 761: LD_ADDR_VAR 0 1
 765: PUSH
 766: LD_VAR 0 1
 770: PPUSH
 771: CALL_OW 311
 775: ST_TO_ADDR
// targets_list := [ ] ;
 776: LD_ADDR_VAR 0 5
 780: PUSH
 781: EMPTY
 782: ST_TO_ADDR
// target := UnitFilter ( enemy_list , [ [ f_lives , 250 ] , [ f_not , [ f_weapon , us_cargo_bay ] ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 783: LD_ADDR_VAR 0 4
 787: PUSH
 788: LD_VAR 0 2
 792: PPUSH
 793: LD_INT 24
 795: PUSH
 796: LD_INT 250
 798: PUSH
 799: EMPTY
 800: LIST
 801: LIST
 802: PUSH
 803: LD_INT 3
 805: PUSH
 806: LD_INT 34
 808: PUSH
 809: LD_INT 12
 811: PUSH
 812: EMPTY
 813: LIST
 814: LIST
 815: PUSH
 816: EMPTY
 817: LIST
 818: LIST
 819: PUSH
 820: LD_INT 21
 822: PUSH
 823: LD_INT 2
 825: PUSH
 826: EMPTY
 827: LIST
 828: LIST
 829: PUSH
 830: LD_INT 58
 832: PUSH
 833: EMPTY
 834: LIST
 835: PUSH
 836: EMPTY
 837: LIST
 838: LIST
 839: LIST
 840: LIST
 841: PPUSH
 842: CALL_OW 72
 846: ST_TO_ADDR
// if GetDistUnits ( NearestUnitToUnit ( target , unit ) , unit ) < 11 and not IsInUnit ( unit ) then
 847: LD_VAR 0 4
 851: PPUSH
 852: LD_VAR 0 1
 856: PPUSH
 857: CALL_OW 74
 861: PPUSH
 862: LD_VAR 0 1
 866: PPUSH
 867: CALL_OW 296
 871: PUSH
 872: LD_INT 11
 874: LESS
 875: PUSH
 876: LD_VAR 0 1
 880: PPUSH
 881: CALL_OW 310
 885: NOT
 886: AND
 887: IFFALSE 915
// begin ComEnterUnit ( unit , NearestUnitToUnit ( target , unit ) ) ;
 889: LD_VAR 0 1
 893: PPUSH
 894: LD_VAR 0 4
 898: PPUSH
 899: LD_VAR 0 1
 903: PPUSH
 904: CALL_OW 74
 908: PPUSH
 909: CALL_OW 120
// exit ;
 913: GO 1193
// end ; targets_list := [ UnitFilter ( enemy_list , [ [ f_type , unit_human ] , [ f_not , [ f_inside ] ] ] ) , UnitFilter ( enemy_list , [ f_type , unit_vehicle ] ) , UnitFilter ( enemy_list , [ [ f_type , unit_building ] , [ f_not , [ f_empty ] ] ] ) , enemy_list ] ;
 915: LD_ADDR_VAR 0 5
 919: PUSH
 920: LD_VAR 0 2
 924: PPUSH
 925: LD_INT 21
 927: PUSH
 928: LD_INT 1
 930: PUSH
 931: EMPTY
 932: LIST
 933: LIST
 934: PUSH
 935: LD_INT 3
 937: PUSH
 938: LD_INT 54
 940: PUSH
 941: EMPTY
 942: LIST
 943: PUSH
 944: EMPTY
 945: LIST
 946: LIST
 947: PUSH
 948: EMPTY
 949: LIST
 950: LIST
 951: PPUSH
 952: CALL_OW 72
 956: PUSH
 957: LD_VAR 0 2
 961: PPUSH
 962: LD_INT 21
 964: PUSH
 965: LD_INT 2
 967: PUSH
 968: EMPTY
 969: LIST
 970: LIST
 971: PPUSH
 972: CALL_OW 72
 976: PUSH
 977: LD_VAR 0 2
 981: PPUSH
 982: LD_INT 21
 984: PUSH
 985: LD_INT 3
 987: PUSH
 988: EMPTY
 989: LIST
 990: LIST
 991: PUSH
 992: LD_INT 3
 994: PUSH
 995: LD_INT 58
 997: PUSH
 998: EMPTY
 999: LIST
1000: PUSH
1001: EMPTY
1002: LIST
1003: LIST
1004: PUSH
1005: EMPTY
1006: LIST
1007: LIST
1008: PPUSH
1009: CALL_OW 72
1013: PUSH
1014: LD_VAR 0 2
1018: PUSH
1019: EMPTY
1020: LIST
1021: LIST
1022: LIST
1023: LIST
1024: ST_TO_ADDR
// for target in targets_list do
1025: LD_ADDR_VAR 0 4
1029: PUSH
1030: LD_VAR 0 5
1034: PUSH
1035: FOR_IN
1036: IFFALSE 1191
// begin if target then
1038: LD_VAR 0 4
1042: IFFALSE 1189
// if GetTag ( unit ) = 11 and ( GetType ( NearestUnitToUnit ( target , unit ) ) = unit_building or GetWeapon ( NearestUnitToUnit ( target , unit ) ) = us_cargo_bay ) then
1044: LD_VAR 0 1
1048: PPUSH
1049: CALL_OW 110
1053: PUSH
1054: LD_INT 11
1056: EQUAL
1057: PUSH
1058: LD_VAR 0 4
1062: PPUSH
1063: LD_VAR 0 1
1067: PPUSH
1068: CALL_OW 74
1072: PPUSH
1073: CALL_OW 247
1077: PUSH
1078: LD_INT 3
1080: EQUAL
1081: PUSH
1082: LD_VAR 0 4
1086: PPUSH
1087: LD_VAR 0 1
1091: PPUSH
1092: CALL_OW 74
1096: PPUSH
1097: CALL_OW 264
1101: PUSH
1102: LD_INT 12
1104: EQUAL
1105: OR
1106: AND
1107: IFFALSE 1153
// begin ComPlaceDelayedCharge ( unit , 0 , 0 , NearestUnitToUnit ( target , unit ) ) ;
1109: LD_VAR 0 1
1113: PPUSH
1114: LD_INT 0
1116: PPUSH
1117: LD_INT 0
1119: PPUSH
1120: LD_VAR 0 4
1124: PPUSH
1125: LD_VAR 0 1
1129: PPUSH
1130: CALL_OW 74
1134: PPUSH
1135: CALL_OW 132
// SetTag ( unit , 0 ) ;
1139: LD_VAR 0 1
1143: PPUSH
1144: LD_INT 0
1146: PPUSH
1147: CALL_OW 109
// end else
1151: GO 1189
// if not HasTask ( unit ) then
1153: LD_VAR 0 1
1157: PPUSH
1158: CALL_OW 314
1162: NOT
1163: IFFALSE 1189
// ComAttackUnit ( unit , NearestUnitToUnit ( target , unit ) ) ;
1165: LD_VAR 0 1
1169: PPUSH
1170: LD_VAR 0 4
1174: PPUSH
1175: LD_VAR 0 1
1179: PPUSH
1180: CALL_OW 74
1184: PPUSH
1185: CALL_OW 115
// end ;
1189: GO 1035
1191: POP
1192: POP
// end ; end_of_file
1193: LD_VAR 0 3
1197: RET
// export JMM , Gladstone , Harrison , Denis , Brown , Donaldson , Lisa , Frank , Bobby , Cyrus ; export others ; export function PrepareAmericans ; var i , points , veh , tmp ; begin
1198: LD_INT 0
1200: PPUSH
1201: PPUSH
1202: PPUSH
1203: PPUSH
1204: PPUSH
// uc_nation := 1 ;
1205: LD_ADDR_OWVAR 21
1209: PUSH
1210: LD_INT 1
1212: ST_TO_ADDR
// uc_side := 4 ;
1213: LD_ADDR_OWVAR 20
1217: PUSH
1218: LD_INT 4
1220: ST_TO_ADDR
// Denis := PrepareUnit ( Denis , false ,  ) ;
1221: LD_ADDR_EXP 19
1225: PUSH
1226: LD_STRING Denis
1228: PPUSH
1229: LD_INT 0
1231: PPUSH
1232: LD_STRING 
1234: PPUSH
1235: CALL 25837 0 3
1239: ST_TO_ADDR
// Harrison := PrepareUnit ( Harisson , false ,  ) ;
1240: LD_ADDR_EXP 18
1244: PUSH
1245: LD_STRING Harisson
1247: PPUSH
1248: LD_INT 0
1250: PPUSH
1251: LD_STRING 
1253: PPUSH
1254: CALL 25837 0 3
1258: ST_TO_ADDR
// uc_side := 1 ;
1259: LD_ADDR_OWVAR 20
1263: PUSH
1264: LD_INT 1
1266: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debug ) , mission_prefix_prev ) ;
1267: LD_ADDR_EXP 16
1271: PUSH
1272: LD_STRING JMM
1274: PPUSH
1275: LD_EXP 1
1279: NOT
1280: PPUSH
1281: LD_EXP 3
1285: PPUSH
1286: CALL 25837 0 3
1290: ST_TO_ADDR
// Gladstone := PrepareUnit ( Gladstone , false , mission_prefix_prev ) ;
1291: LD_ADDR_EXP 17
1295: PUSH
1296: LD_STRING Gladstone
1298: PPUSH
1299: LD_INT 0
1301: PPUSH
1302: LD_EXP 3
1306: PPUSH
1307: CALL 25837 0 3
1311: ST_TO_ADDR
// if LoadVariable ( BrownInDelta , debug ) then
1312: LD_STRING BrownInDelta
1314: PPUSH
1315: LD_EXP 1
1319: PPUSH
1320: CALL_OW 30
1324: IFFALSE 1366
// begin Brown := PrepareUnit ( Brown , ( not debug ) , mission_prefix_prev ) ;
1326: LD_ADDR_EXP 20
1330: PUSH
1331: LD_STRING Brown
1333: PPUSH
1334: LD_EXP 1
1338: NOT
1339: PPUSH
1340: LD_EXP 3
1344: PPUSH
1345: CALL 25837 0 3
1349: ST_TO_ADDR
// tmp := tmp ^ Brown ;
1350: LD_ADDR_VAR 0 5
1354: PUSH
1355: LD_VAR 0 5
1359: PUSH
1360: LD_EXP 20
1364: ADD
1365: ST_TO_ADDR
// end ; if LoadVariable ( DonaldsonInDelta , debug ) then
1366: LD_STRING DonaldsonInDelta
1368: PPUSH
1369: LD_EXP 1
1373: PPUSH
1374: CALL_OW 30
1378: IFFALSE 1420
// begin Donaldson := PrepareUnit ( Donaldson , ( not debug ) , mission_prefix_prev ) ;
1380: LD_ADDR_EXP 21
1384: PUSH
1385: LD_STRING Donaldson
1387: PPUSH
1388: LD_EXP 1
1392: NOT
1393: PPUSH
1394: LD_EXP 3
1398: PPUSH
1399: CALL 25837 0 3
1403: ST_TO_ADDR
// tmp := tmp ^ Donaldson ;
1404: LD_ADDR_VAR 0 5
1408: PUSH
1409: LD_VAR 0 5
1413: PUSH
1414: LD_EXP 21
1418: ADD
1419: ST_TO_ADDR
// end ; if LoadVariable ( LisaInDelta , debug ) then
1420: LD_STRING LisaInDelta
1422: PPUSH
1423: LD_EXP 1
1427: PPUSH
1428: CALL_OW 30
1432: IFFALSE 1474
// begin Lisa := PrepareUnit ( Lisa , ( not debug ) , mission_prefix_prev ) ;
1434: LD_ADDR_EXP 22
1438: PUSH
1439: LD_STRING Lisa
1441: PPUSH
1442: LD_EXP 1
1446: NOT
1447: PPUSH
1448: LD_EXP 3
1452: PPUSH
1453: CALL 25837 0 3
1457: ST_TO_ADDR
// tmp := tmp ^ Lisa ;
1458: LD_ADDR_VAR 0 5
1462: PUSH
1463: LD_VAR 0 5
1467: PUSH
1468: LD_EXP 22
1472: ADD
1473: ST_TO_ADDR
// end ; if LoadVariable ( FrankInDelta , debug ) then
1474: LD_STRING FrankInDelta
1476: PPUSH
1477: LD_EXP 1
1481: PPUSH
1482: CALL_OW 30
1486: IFFALSE 1528
// begin Frank := PrepareUnit ( Frank , ( not debug ) , mission_prefix_prev ) ;
1488: LD_ADDR_EXP 23
1492: PUSH
1493: LD_STRING Frank
1495: PPUSH
1496: LD_EXP 1
1500: NOT
1501: PPUSH
1502: LD_EXP 3
1506: PPUSH
1507: CALL 25837 0 3
1511: ST_TO_ADDR
// tmp := tmp ^ Frank ;
1512: LD_ADDR_VAR 0 5
1516: PUSH
1517: LD_VAR 0 5
1521: PUSH
1522: LD_EXP 23
1526: ADD
1527: ST_TO_ADDR
// end ; if LoadVariable ( BobbyInDelta , 0 ) then
1528: LD_STRING BobbyInDelta
1530: PPUSH
1531: LD_INT 0
1533: PPUSH
1534: CALL_OW 30
1538: IFFALSE 1580
// begin Bobby := PrepareUnit ( Bobby , ( not debug ) , mission_prefix_prev ) ;
1540: LD_ADDR_EXP 24
1544: PUSH
1545: LD_STRING Bobby
1547: PPUSH
1548: LD_EXP 1
1552: NOT
1553: PPUSH
1554: LD_EXP 3
1558: PPUSH
1559: CALL 25837 0 3
1563: ST_TO_ADDR
// tmp := tmp ^ Bobby ;
1564: LD_ADDR_VAR 0 5
1568: PUSH
1569: LD_VAR 0 5
1573: PUSH
1574: LD_EXP 24
1578: ADD
1579: ST_TO_ADDR
// end ; if LoadVariable ( CyrusInDelta , 0 ) then
1580: LD_STRING CyrusInDelta
1582: PPUSH
1583: LD_INT 0
1585: PPUSH
1586: CALL_OW 30
1590: IFFALSE 1632
// begin Cyrus := PrepareUnit ( Cyrus , ( not debug ) , mission_prefix_prev ) ;
1592: LD_ADDR_EXP 25
1596: PUSH
1597: LD_STRING Cyrus
1599: PPUSH
1600: LD_EXP 1
1604: NOT
1605: PPUSH
1606: LD_EXP 3
1610: PPUSH
1611: CALL 25837 0 3
1615: ST_TO_ADDR
// tmp := tmp ^ Cyrus ;
1616: LD_ADDR_VAR 0 5
1620: PUSH
1621: LD_VAR 0 5
1625: PUSH
1626: LD_EXP 25
1630: ADD
1631: ST_TO_ADDR
// end ; others := CreateCharacterSet ( othersDelta ) ;
1632: LD_ADDR_EXP 26
1636: PUSH
1637: LD_STRING othersDelta
1639: PPUSH
1640: CALL_OW 31
1644: ST_TO_ADDR
// if not others and debug then
1645: LD_EXP 26
1649: NOT
1650: PUSH
1651: LD_EXP 1
1655: AND
1656: IFFALSE 1721
// begin InitHc ;
1658: CALL_OW 19
// for i = 1 to 2 do
1662: LD_ADDR_VAR 0 2
1666: PUSH
1667: DOUBLE
1668: LD_INT 1
1670: DEC
1671: ST_TO_ADDR
1672: LD_INT 2
1674: PUSH
1675: FOR_TO
1676: IFFALSE 1719
// begin PrepareHuman ( false , i mod 4 + 1 , 3 ) ;
1678: LD_INT 0
1680: PPUSH
1681: LD_VAR 0 2
1685: PUSH
1686: LD_INT 4
1688: MOD
1689: PUSH
1690: LD_INT 1
1692: PLUS
1693: PPUSH
1694: LD_INT 3
1696: PPUSH
1697: CALL_OW 380
// others := others ^ CreateHuman ;
1701: LD_ADDR_EXP 26
1705: PUSH
1706: LD_EXP 26
1710: PUSH
1711: CALL_OW 44
1715: ADD
1716: ST_TO_ADDR
// end ;
1717: GO 1675
1719: POP
1720: POP
// end ; if others then
1721: LD_EXP 26
1725: IFFALSE 1743
// tmp := tmp ^ others ;
1727: LD_ADDR_VAR 0 5
1731: PUSH
1732: LD_VAR 0 5
1736: PUSH
1737: LD_EXP 26
1741: ADD
1742: ST_TO_ADDR
// points := [ [ 28 , 49 ] , [ 33 , 54 ] , [ 38 , 56 ] ] ;
1743: LD_ADDR_VAR 0 3
1747: PUSH
1748: LD_INT 28
1750: PUSH
1751: LD_INT 49
1753: PUSH
1754: EMPTY
1755: LIST
1756: LIST
1757: PUSH
1758: LD_INT 33
1760: PUSH
1761: LD_INT 54
1763: PUSH
1764: EMPTY
1765: LIST
1766: LIST
1767: PUSH
1768: LD_INT 38
1770: PUSH
1771: LD_INT 56
1773: PUSH
1774: EMPTY
1775: LIST
1776: LIST
1777: PUSH
1778: EMPTY
1779: LIST
1780: LIST
1781: LIST
1782: ST_TO_ADDR
// veh := PrepareTank ( 1 , 1 , us_medium_wheeled , engine_solar , control_manual , us_cargo_bay , 80 ) ;
1783: LD_ADDR_VAR 0 4
1787: PUSH
1788: LD_INT 1
1790: PPUSH
1791: LD_INT 1
1793: PPUSH
1794: LD_INT 2
1796: PPUSH
1797: LD_INT 2
1799: PPUSH
1800: LD_INT 1
1802: PPUSH
1803: LD_INT 12
1805: PPUSH
1806: LD_INT 80
1808: PPUSH
1809: CALL 431 0 7
1813: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
1814: LD_VAR 0 4
1818: PPUSH
1819: LD_INT 1
1821: PPUSH
1822: CALL_OW 233
// PlaceUnitXY ( veh , points [ 1 ] [ 1 ] , points [ 1 ] [ 2 ] , false ) ;
1826: LD_VAR 0 4
1830: PPUSH
1831: LD_VAR 0 3
1835: PUSH
1836: LD_INT 1
1838: ARRAY
1839: PUSH
1840: LD_INT 1
1842: ARRAY
1843: PPUSH
1844: LD_VAR 0 3
1848: PUSH
1849: LD_INT 1
1851: ARRAY
1852: PUSH
1853: LD_INT 2
1855: ARRAY
1856: PPUSH
1857: LD_INT 0
1859: PPUSH
1860: CALL_OW 48
// SetCargo ( veh , mat_cans , 100 ) ;
1864: LD_VAR 0 4
1868: PPUSH
1869: LD_INT 1
1871: PPUSH
1872: LD_INT 100
1874: PPUSH
1875: CALL_OW 290
// PlaceHumanInUnit ( others [ 1 ] , veh ) ;
1879: LD_EXP 26
1883: PUSH
1884: LD_INT 1
1886: ARRAY
1887: PPUSH
1888: LD_VAR 0 4
1892: PPUSH
1893: CALL_OW 52
// veh := PrepareTank ( 1 , 1 , us_light_wheeled , engine_solar , control_manual , us_machine_gun , 80 ) ;
1897: LD_ADDR_VAR 0 4
1901: PUSH
1902: LD_INT 1
1904: PPUSH
1905: LD_INT 1
1907: PPUSH
1908: LD_INT 1
1910: PPUSH
1911: LD_INT 2
1913: PPUSH
1914: LD_INT 1
1916: PPUSH
1917: LD_INT 2
1919: PPUSH
1920: LD_INT 80
1922: PPUSH
1923: CALL 431 0 7
1927: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
1928: LD_VAR 0 4
1932: PPUSH
1933: LD_INT 1
1935: PPUSH
1936: CALL_OW 233
// PlaceUnitXY ( veh , points [ 2 ] [ 1 ] , points [ 2 ] [ 2 ] , false ) ;
1940: LD_VAR 0 4
1944: PPUSH
1945: LD_VAR 0 3
1949: PUSH
1950: LD_INT 2
1952: ARRAY
1953: PUSH
1954: LD_INT 1
1956: ARRAY
1957: PPUSH
1958: LD_VAR 0 3
1962: PUSH
1963: LD_INT 2
1965: ARRAY
1966: PUSH
1967: LD_INT 2
1969: ARRAY
1970: PPUSH
1971: LD_INT 0
1973: PPUSH
1974: CALL_OW 48
// PlaceHumanInUnit ( Gladstone , veh ) ;
1978: LD_EXP 17
1982: PPUSH
1983: LD_VAR 0 4
1987: PPUSH
1988: CALL_OW 52
// veh := PrepareTank ( 1 , 1 , us_light_wheeled , engine_solar , control_manual , us_light_gun , 80 ) ;
1992: LD_ADDR_VAR 0 4
1996: PUSH
1997: LD_INT 1
1999: PPUSH
2000: LD_INT 1
2002: PPUSH
2003: LD_INT 1
2005: PPUSH
2006: LD_INT 2
2008: PPUSH
2009: LD_INT 1
2011: PPUSH
2012: LD_INT 3
2014: PPUSH
2015: LD_INT 80
2017: PPUSH
2018: CALL 431 0 7
2022: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
2023: LD_VAR 0 4
2027: PPUSH
2028: LD_INT 1
2030: PPUSH
2031: CALL_OW 233
// PlaceUnitXY ( veh , points [ 3 ] [ 1 ] , points [ 3 ] [ 2 ] , false ) ;
2035: LD_VAR 0 4
2039: PPUSH
2040: LD_VAR 0 3
2044: PUSH
2045: LD_INT 3
2047: ARRAY
2048: PUSH
2049: LD_INT 1
2051: ARRAY
2052: PPUSH
2053: LD_VAR 0 3
2057: PUSH
2058: LD_INT 3
2060: ARRAY
2061: PUSH
2062: LD_INT 2
2064: ARRAY
2065: PPUSH
2066: LD_INT 0
2068: PPUSH
2069: CALL_OW 48
// PlaceHumanInUnit ( JMM , veh ) ;
2073: LD_EXP 16
2077: PPUSH
2078: LD_VAR 0 4
2082: PPUSH
2083: CALL_OW 52
// for i in tmp diff others [ 1 ] do
2087: LD_ADDR_VAR 0 2
2091: PUSH
2092: LD_VAR 0 5
2096: PUSH
2097: LD_EXP 26
2101: PUSH
2102: LD_INT 1
2104: ARRAY
2105: DIFF
2106: PUSH
2107: FOR_IN
2108: IFFALSE 2127
// PlaceUnitArea ( i , startArea , false ) ;
2110: LD_VAR 0 2
2114: PPUSH
2115: LD_INT 5
2117: PPUSH
2118: LD_INT 0
2120: PPUSH
2121: CALL_OW 49
2125: GO 2107
2127: POP
2128: POP
// end ; end_of_file
2129: LD_VAR 0 1
2133: RET
// export function Action ; var m ; begin
2134: LD_INT 0
2136: PPUSH
2137: PPUSH
// InGameOn ;
2138: CALL_OW 8
// CenterNowOnXY ( 28 , 51 ) ;
2142: LD_INT 28
2144: PPUSH
2145: LD_INT 51
2147: PPUSH
2148: CALL_OW 86
// Wait ( 3 ) ;
2152: LD_INT 3
2154: PPUSH
2155: CALL_OW 67
// Say ( JMM , D1d-JMM-1a ) ;
2159: LD_EXP 16
2163: PPUSH
2164: LD_STRING D1d-JMM-1a
2166: PPUSH
2167: CALL_OW 88
// SayRadio ( Harrison , D1d-Har-1 ) ;
2171: LD_EXP 18
2175: PPUSH
2176: LD_STRING D1d-Har-1
2178: PPUSH
2179: CALL_OW 94
// InGameOff ;
2183: CALL_OW 9
// SaveForQuickRestart ;
2187: CALL_OW 22
// ChangeMissionObjectives ( M1 ) ;
2191: LD_STRING M1
2193: PPUSH
2194: CALL_OW 337
// Wait ( 0 0$2 ) ;
2198: LD_INT 70
2200: PPUSH
2201: CALL_OW 67
// Say ( JMM , D2-JMM-1 ) ;
2205: LD_EXP 16
2209: PPUSH
2210: LD_STRING D2-JMM-1
2212: PPUSH
2213: CALL_OW 88
// Say ( Gladstone , D2-Glad-1 ) ;
2217: LD_EXP 17
2221: PPUSH
2222: LD_STRING D2-Glad-1
2224: PPUSH
2225: CALL_OW 88
// Say ( JMM , D2-JMM-2 ) ;
2229: LD_EXP 16
2233: PPUSH
2234: LD_STRING D2-JMM-2
2236: PPUSH
2237: CALL_OW 88
// Say ( Gladstone , D2-Glad-2 ) ;
2241: LD_EXP 17
2245: PPUSH
2246: LD_STRING D2-Glad-2
2248: PPUSH
2249: CALL_OW 88
// Say ( JMM , D2-JMM-3 ) ;
2253: LD_EXP 16
2257: PPUSH
2258: LD_STRING D2-JMM-3
2260: PPUSH
2261: CALL_OW 88
// Wait ( rand ( 0 0$30 , 1 1$00 ) ) ;
2265: LD_INT 1050
2267: PPUSH
2268: LD_INT 2100
2270: PPUSH
2271: CALL_OW 12
2275: PPUSH
2276: CALL_OW 67
// SetWeather ( 1 , 570 , 350 ) ;
2280: LD_INT 1
2282: PPUSH
2283: LD_INT 570
2285: PPUSH
2286: LD_INT 350
2288: PPUSH
2289: CALL_OW 550
// Wait ( rand ( 3 3$00 , 5 5$00 ) ) ;
2293: LD_INT 6300
2295: PPUSH
2296: LD_INT 10500
2298: PPUSH
2299: CALL_OW 12
2303: PPUSH
2304: CALL_OW 67
// SetWeather ( 0 , 570 , 350 ) ;
2308: LD_INT 0
2310: PPUSH
2311: LD_INT 570
2313: PPUSH
2314: LD_INT 350
2316: PPUSH
2317: CALL_OW 550
// end ;
2321: LD_VAR 0 1
2325: RET
// every 0 0$01 trigger FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_not , [ f_constructed ] ] , [ f_btype , b_depot ] ] ] ) and not deltaBuilded do
2326: LD_INT 22
2328: PUSH
2329: LD_INT 1
2331: PUSH
2332: EMPTY
2333: LIST
2334: LIST
2335: PUSH
2336: LD_INT 3
2338: PUSH
2339: LD_INT 57
2341: PUSH
2342: EMPTY
2343: LIST
2344: PUSH
2345: EMPTY
2346: LIST
2347: LIST
2348: PUSH
2349: LD_INT 30
2351: PUSH
2352: LD_INT 0
2354: PUSH
2355: EMPTY
2356: LIST
2357: LIST
2358: PUSH
2359: EMPTY
2360: LIST
2361: LIST
2362: LIST
2363: PUSH
2364: EMPTY
2365: LIST
2366: PPUSH
2367: CALL_OW 69
2371: PUSH
2372: LD_EXP 4
2376: NOT
2377: AND
2378: IFFALSE 2391
2380: GO 2382
2382: DISABLE
// begin deltaBuilded := true ;
2383: LD_ADDR_EXP 4
2387: PUSH
2388: LD_INT 1
2390: ST_TO_ADDR
// end ;
2391: END
// every 0 0$01 trigger not Delta and deltaBuilded and FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_not , [ f_constructed ] ] , [ f_btype , b_depot ] ] ] ) do
2392: LD_EXP 6
2396: NOT
2397: PUSH
2398: LD_EXP 4
2402: AND
2403: PUSH
2404: LD_INT 22
2406: PUSH
2407: LD_INT 1
2409: PUSH
2410: EMPTY
2411: LIST
2412: LIST
2413: PUSH
2414: LD_INT 3
2416: PUSH
2417: LD_INT 57
2419: PUSH
2420: EMPTY
2421: LIST
2422: PUSH
2423: EMPTY
2424: LIST
2425: LIST
2426: PUSH
2427: LD_INT 30
2429: PUSH
2430: LD_INT 0
2432: PUSH
2433: EMPTY
2434: LIST
2435: LIST
2436: PUSH
2437: EMPTY
2438: LIST
2439: LIST
2440: LIST
2441: PUSH
2442: EMPTY
2443: LIST
2444: PPUSH
2445: CALL_OW 69
2449: AND
2450: IFFALSE 2536
2452: GO 2454
2454: DISABLE
// begin enable ;
2455: ENABLE
// SetRestrict ( b_depot , 1 , state_disabled ) ;
2456: LD_INT 0
2458: PPUSH
2459: LD_INT 1
2461: PPUSH
2462: LD_INT 0
2464: PPUSH
2465: CALL_OW 324
// Delta := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_not , [ f_constructed ] ] , [ f_btype , b_depot ] ] ] ) [ 1 ] ;
2469: LD_ADDR_EXP 6
2473: PUSH
2474: LD_INT 22
2476: PUSH
2477: LD_INT 1
2479: PUSH
2480: EMPTY
2481: LIST
2482: LIST
2483: PUSH
2484: LD_INT 3
2486: PUSH
2487: LD_INT 57
2489: PUSH
2490: EMPTY
2491: LIST
2492: PUSH
2493: EMPTY
2494: LIST
2495: LIST
2496: PUSH
2497: LD_INT 30
2499: PUSH
2500: LD_INT 0
2502: PUSH
2503: EMPTY
2504: LIST
2505: LIST
2506: PUSH
2507: EMPTY
2508: LIST
2509: LIST
2510: LIST
2511: PUSH
2512: EMPTY
2513: LIST
2514: PPUSH
2515: CALL_OW 69
2519: PUSH
2520: LD_INT 1
2522: ARRAY
2523: ST_TO_ADDR
// SetBName ( Delta , Delta ) ;
2524: LD_EXP 6
2528: PPUSH
2529: LD_STRING Delta
2531: PPUSH
2532: CALL_OW 500
// end ;
2536: END
// every 0 0$2 trigger GetTech ( tech_ApeLang , 1 ) = state_researched and IsOk ( Gladstone ) do
2537: LD_INT 1
2539: PPUSH
2540: LD_INT 1
2542: PPUSH
2543: CALL_OW 321
2547: PUSH
2548: LD_INT 2
2550: EQUAL
2551: PUSH
2552: LD_EXP 17
2556: PPUSH
2557: CALL_OW 302
2561: AND
2562: IFFALSE 2623
2564: GO 2566
2566: DISABLE
// begin DialogueOn ;
2567: CALL_OW 6
// Say ( Gladstone , D3-Glad-1 ) ;
2571: LD_EXP 17
2575: PPUSH
2576: LD_STRING D3-Glad-1
2578: PPUSH
2579: CALL_OW 88
// Say ( JMM , D3-JMM-1 ) ;
2583: LD_EXP 16
2587: PPUSH
2588: LD_STRING D3-JMM-1
2590: PPUSH
2591: CALL_OW 88
// Say ( Gladstone , D3-Glad-2 ) ;
2595: LD_EXP 17
2599: PPUSH
2600: LD_STRING D3-Glad-2
2602: PPUSH
2603: CALL_OW 88
// Say ( JMM , D3-JMM-2 ) ;
2607: LD_EXP 16
2611: PPUSH
2612: LD_STRING D3-JMM-2
2614: PPUSH
2615: CALL_OW 88
// DialogueOff ;
2619: CALL_OW 7
// end ;
2623: END
// every 0 0$1 trigger GetTech ( tech_ApePsych , 1 ) = state_researched do var sol ;
2624: LD_INT 2
2626: PPUSH
2627: LD_INT 1
2629: PPUSH
2630: CALL_OW 321
2634: PUSH
2635: LD_INT 2
2637: EQUAL
2638: IFFALSE 2815
2640: GO 2642
2642: DISABLE
2643: LD_INT 0
2645: PPUSH
// begin DialogueOn ;
2646: CALL_OW 6
// if Frank then
2650: LD_EXP 23
2654: IFFALSE 2668
// Say ( Frank , D8a-Frank-1 ) ;
2656: LD_EXP 23
2660: PPUSH
2661: LD_STRING D8a-Frank-1
2663: PPUSH
2664: CALL_OW 88
// sol := SayX ( UnitFilter ( others , [ f_sex , sex_male ] ) , D8a-Sol1-1 ) ;
2668: LD_ADDR_VAR 0 1
2672: PUSH
2673: LD_EXP 26
2677: PPUSH
2678: LD_INT 26
2680: PUSH
2681: LD_INT 1
2683: PUSH
2684: EMPTY
2685: LIST
2686: LIST
2687: PPUSH
2688: CALL_OW 72
2692: PPUSH
2693: LD_STRING D8a-Sol1-1
2695: PPUSH
2696: CALL 519 0 2
2700: ST_TO_ADDR
// if Denis and GetSide ( Denis ) = 1 then
2701: LD_EXP 19
2705: PUSH
2706: LD_EXP 19
2710: PPUSH
2711: CALL_OW 255
2715: PUSH
2716: LD_INT 1
2718: EQUAL
2719: AND
2720: IFFALSE 2734
// Say ( Denis , D8a-Den-1 ) ;
2722: LD_EXP 19
2726: PPUSH
2727: LD_STRING D8a-Den-1
2729: PPUSH
2730: CALL_OW 88
// if sol or Denis or Frank then
2734: LD_VAR 0 1
2738: PUSH
2739: LD_EXP 19
2743: OR
2744: PUSH
2745: LD_EXP 23
2749: OR
2750: IFFALSE 2811
// begin SayX ( UnitFilter ( others , [ [ f_class , 4 ] , [ f_sex , sex_male ] ] ) diff sol , D8a-Sci1-1 ) ;
2752: LD_EXP 26
2756: PPUSH
2757: LD_INT 25
2759: PUSH
2760: LD_INT 4
2762: PUSH
2763: EMPTY
2764: LIST
2765: LIST
2766: PUSH
2767: LD_INT 26
2769: PUSH
2770: LD_INT 1
2772: PUSH
2773: EMPTY
2774: LIST
2775: LIST
2776: PUSH
2777: EMPTY
2778: LIST
2779: LIST
2780: PPUSH
2781: CALL_OW 72
2785: PUSH
2786: LD_VAR 0 1
2790: DIFF
2791: PPUSH
2792: LD_STRING D8a-Sci1-1
2794: PPUSH
2795: CALL 519 0 2
// Say ( JMM , D8a-JMM-1 ) ;
2799: LD_EXP 16
2803: PPUSH
2804: LD_STRING D8a-JMM-1
2806: PPUSH
2807: CALL_OW 88
// end ; DialogueOff ;
2811: CALL_OW 7
// end ;
2815: PPOPN 1
2817: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_apeman_engineer ] ] ) do
2818: LD_INT 22
2820: PUSH
2821: LD_INT 1
2823: PUSH
2824: EMPTY
2825: LIST
2826: LIST
2827: PUSH
2828: LD_INT 25
2830: PUSH
2831: LD_INT 16
2833: PUSH
2834: EMPTY
2835: LIST
2836: LIST
2837: PUSH
2838: EMPTY
2839: LIST
2840: LIST
2841: PPUSH
2842: CALL_OW 69
2846: IFFALSE 2905
2848: GO 2850
2850: DISABLE
// begin ChangeMissionObjectives ( M1a ) ;
2851: LD_STRING M1a
2853: PPUSH
2854: CALL_OW 337
// case Query ( Q2 ) of 1 :
2858: LD_STRING Q2
2860: PPUSH
2861: CALL_OW 97
2865: PUSH
2866: LD_INT 1
2868: DOUBLE
2869: EQUAL
2870: IFTRUE 2874
2872: GO 2885
2874: POP
// end_mission := true ; 2 :
2875: LD_ADDR_EXP 14
2879: PUSH
2880: LD_INT 1
2882: ST_TO_ADDR
2883: GO 2905
2885: LD_INT 2
2887: DOUBLE
2888: EQUAL
2889: IFTRUE 2893
2891: GO 2904
2893: POP
// end_the_mission_allowed := true ; end ;
2894: LD_ADDR_OWVAR 57
2898: PUSH
2899: LD_INT 1
2901: ST_TO_ADDR
2902: GO 2905
2904: POP
// end ;
2905: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) and Delta do
2906: LD_INT 22
2908: PUSH
2909: LD_INT 1
2911: PUSH
2912: EMPTY
2913: LIST
2914: LIST
2915: PUSH
2916: LD_INT 2
2918: PUSH
2919: LD_INT 30
2921: PUSH
2922: LD_INT 6
2924: PUSH
2925: EMPTY
2926: LIST
2927: LIST
2928: PUSH
2929: LD_INT 30
2931: PUSH
2932: LD_INT 7
2934: PUSH
2935: EMPTY
2936: LIST
2937: LIST
2938: PUSH
2939: EMPTY
2940: LIST
2941: LIST
2942: LIST
2943: PUSH
2944: EMPTY
2945: LIST
2946: LIST
2947: PPUSH
2948: CALL_OW 69
2952: PUSH
2953: LD_INT 22
2955: PUSH
2956: LD_INT 1
2958: PUSH
2959: EMPTY
2960: LIST
2961: LIST
2962: PUSH
2963: LD_INT 2
2965: PUSH
2966: LD_INT 30
2968: PUSH
2969: LD_INT 2
2971: PUSH
2972: EMPTY
2973: LIST
2974: LIST
2975: PUSH
2976: LD_INT 30
2978: PUSH
2979: LD_INT 3
2981: PUSH
2982: EMPTY
2983: LIST
2984: LIST
2985: PUSH
2986: EMPTY
2987: LIST
2988: LIST
2989: LIST
2990: PUSH
2991: EMPTY
2992: LIST
2993: LIST
2994: PPUSH
2995: CALL_OW 69
2999: AND
3000: PUSH
3001: LD_EXP 6
3005: AND
3006: IFFALSE 3521
3008: GO 3010
3010: DISABLE
// begin Wait ( rand ( 0 0$30 , 0 0$50 ) ) ;
3011: LD_INT 1050
3013: PPUSH
3014: LD_INT 1750
3016: PPUSH
3017: CALL_OW 12
3021: PPUSH
3022: CALL_OW 67
// PlaceUnitArea ( Denis , [ denisArea1 , denisArea2 , denisArea3 , denisArea4 ] [ Difficulty ] , false ) ;
3026: LD_EXP 19
3030: PPUSH
3031: LD_INT 6
3033: PUSH
3034: LD_INT 9
3036: PUSH
3037: LD_INT 10
3039: PUSH
3040: LD_INT 16
3042: PUSH
3043: EMPTY
3044: LIST
3045: LIST
3046: LIST
3047: LIST
3048: PUSH
3049: LD_OWVAR 67
3053: ARRAY
3054: PPUSH
3055: LD_INT 0
3057: PPUSH
3058: CALL_OW 49
// ComHold ( Denis ) ;
3062: LD_EXP 19
3066: PPUSH
3067: CALL_OW 140
// InGameOn ;
3071: CALL_OW 8
// DialogueOn ;
3075: CALL_OW 6
// if Delta then
3079: LD_EXP 6
3083: IFFALSE 3096
// CenterNowOnUnits ( Delta ) else
3085: LD_EXP 6
3089: PPUSH
3090: CALL_OW 87
3094: GO 3105
// CenterNowOnUnits ( JMM ) ;
3096: LD_EXP 16
3100: PPUSH
3101: CALL_OW 87
// SayRadio ( Denis , DD-Den-1 ) ;
3105: LD_EXP 19
3109: PPUSH
3110: LD_STRING DD-Den-1
3112: PPUSH
3113: CALL_OW 94
// Say ( JMM , DD-JMM-1 ) ;
3117: LD_EXP 16
3121: PPUSH
3122: LD_STRING DD-JMM-1
3124: PPUSH
3125: CALL_OW 88
// SayRadio ( Denis , DD-Den-2 ) ;
3129: LD_EXP 19
3133: PPUSH
3134: LD_STRING DD-Den-2
3136: PPUSH
3137: CALL_OW 94
// Wait ( 3 ) ;
3141: LD_INT 3
3143: PPUSH
3144: CALL_OW 67
// DialogueOff ;
3148: CALL_OW 7
// InGameOff ;
3152: CALL_OW 9
// if Difficulty = 1 then
3156: LD_OWVAR 67
3160: PUSH
3161: LD_INT 1
3163: EQUAL
3164: IFFALSE 3240
// begin PlaceSeeing ( GetX ( Denis ) , GetY ( Denis ) , 1 , - 12 ) ;
3166: LD_EXP 19
3170: PPUSH
3171: CALL_OW 250
3175: PPUSH
3176: LD_EXP 19
3180: PPUSH
3181: CALL_OW 251
3185: PPUSH
3186: LD_INT 1
3188: PPUSH
3189: LD_INT 12
3191: NEG
3192: PPUSH
3193: CALL_OW 330
// CenterNowOnUnits ( Denis ) ;
3197: LD_EXP 19
3201: PPUSH
3202: CALL_OW 87
// wait ( 0 0$5 ) ;
3206: LD_INT 175
3208: PPUSH
3209: CALL_OW 67
// RemoveSeeing ( GetX ( Denis ) , GetY ( Denis ) , 1 ) ;
3213: LD_EXP 19
3217: PPUSH
3218: CALL_OW 250
3222: PPUSH
3223: LD_EXP 19
3227: PPUSH
3228: CALL_OW 251
3232: PPUSH
3233: LD_INT 1
3235: PPUSH
3236: CALL_OW 331
// end ; repeat wait ( 0 0$01 ) ;
3240: LD_INT 35
3242: PPUSH
3243: CALL_OW 67
// until See ( 1 , Denis ) or IsDead ( Denis ) ;
3247: LD_INT 1
3249: PPUSH
3250: LD_EXP 19
3254: PPUSH
3255: CALL_OW 292
3259: PUSH
3260: LD_EXP 19
3264: PPUSH
3265: CALL_OW 301
3269: OR
3270: IFFALSE 3240
// if IsDead ( Denis ) then
3272: LD_EXP 19
3276: PPUSH
3277: CALL_OW 301
3281: IFFALSE 3285
// exit ;
3283: GO 3521
// SetSide ( Denis , 1 ) ;
3285: LD_EXP 19
3289: PPUSH
3290: LD_INT 1
3292: PPUSH
3293: CALL_OW 235
// Say ( Denis , DD-Den-2a ) ;
3297: LD_EXP 19
3301: PPUSH
3302: LD_STRING DD-Den-2a
3304: PPUSH
3305: CALL_OW 88
// repeat wait ( 0 0$01 ) ;
3309: LD_INT 35
3311: PPUSH
3312: CALL_OW 67
// until GetBType ( IsInUnit ( Denis ) ) in [ b_lab , b_lab_half , b_lab_full ] or IsDead ( Denis ) ;
3316: LD_EXP 19
3320: PPUSH
3321: CALL_OW 310
3325: PPUSH
3326: CALL_OW 266
3330: PUSH
3331: LD_INT 6
3333: PUSH
3334: LD_INT 7
3336: PUSH
3337: LD_INT 8
3339: PUSH
3340: EMPTY
3341: LIST
3342: LIST
3343: LIST
3344: IN
3345: PUSH
3346: LD_EXP 19
3350: PPUSH
3351: CALL_OW 301
3355: OR
3356: IFFALSE 3309
// if IsDead ( Denis ) then
3358: LD_EXP 19
3362: PPUSH
3363: CALL_OW 301
3367: IFFALSE 3371
// exit ;
3369: GO 3521
// Say ( Denis , DD-Den-2b ) ;
3371: LD_EXP 19
3375: PPUSH
3376: LD_STRING DD-Den-2b
3378: PPUSH
3379: CALL_OW 88
// ComChangeProfession ( Denis , 4 ) ;
3383: LD_EXP 19
3387: PPUSH
3388: LD_INT 4
3390: PPUSH
3391: CALL_OW 123
// Wait ( 0 0$02 ) ;
3395: LD_INT 70
3397: PPUSH
3398: CALL_OW 67
// DialogueOn ;
3402: CALL_OW 6
// CenterNowOnUnits ( Denis ) ;
3406: LD_EXP 19
3410: PPUSH
3411: CALL_OW 87
// Say ( JMM , D4-JMM-1 ) ;
3415: LD_EXP 16
3419: PPUSH
3420: LD_STRING D4-JMM-1
3422: PPUSH
3423: CALL_OW 88
// Say ( Denis , D4-Den-1 ) ;
3427: LD_EXP 19
3431: PPUSH
3432: LD_STRING D4-Den-1
3434: PPUSH
3435: CALL_OW 88
// Say ( JMM , D4-JMM-2 ) ;
3439: LD_EXP 16
3443: PPUSH
3444: LD_STRING D4-JMM-2
3446: PPUSH
3447: CALL_OW 88
// Say ( Denis , D4-Den-2 ) ;
3451: LD_EXP 19
3455: PPUSH
3456: LD_STRING D4-Den-2
3458: PPUSH
3459: CALL_OW 88
// DialogueOff ;
3463: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
3467: LD_STRING M2
3469: PPUSH
3470: CALL_OW 337
// radar_allowed := true ;
3474: LD_ADDR_EXP 7
3478: PUSH
3479: LD_INT 1
3481: ST_TO_ADDR
// SetTech ( tech_radar , 1 , state_enabled ) ;
3482: LD_INT 6
3484: PPUSH
3485: LD_INT 1
3487: PPUSH
3488: LD_INT 1
3490: PPUSH
3491: CALL_OW 322
// SetRestrict ( b_lab_opto , 1 , state_enabled ) ;
3495: LD_INT 15
3497: PPUSH
3498: LD_INT 1
3500: PPUSH
3501: LD_INT 1
3503: PPUSH
3504: CALL_OW 324
// SetRestrict ( b_ext_radar , 1 , state_enabled ) ;
3508: LD_INT 20
3510: PPUSH
3511: LD_INT 1
3513: PPUSH
3514: LD_INT 1
3516: PPUSH
3517: CALL_OW 324
// end ;
3521: END
// every 0 0$1 trigger arab_spotted do var sol , sol2 ;
3522: LD_EXP 13
3526: IFFALSE 4149
3528: GO 3530
3530: DISABLE
3531: LD_INT 0
3533: PPUSH
3534: PPUSH
// begin sol := SayX ( UnitFilter ( others , [ f_sex , sex_male ] ) , D5-Sol1-1 ) ;
3535: LD_ADDR_VAR 0 1
3539: PUSH
3540: LD_EXP 26
3544: PPUSH
3545: LD_INT 26
3547: PUSH
3548: LD_INT 1
3550: PUSH
3551: EMPTY
3552: LIST
3553: LIST
3554: PPUSH
3555: CALL_OW 72
3559: PPUSH
3560: LD_STRING D5-Sol1-1
3562: PPUSH
3563: CALL 519 0 2
3567: ST_TO_ADDR
// if not sol then
3568: LD_VAR 0 1
3572: NOT
3573: IFFALSE 3577
// exit ;
3575: GO 4149
// repeat wait ( 0 0$01 ) ;
3577: LD_INT 35
3579: PPUSH
3580: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) = 0 ;
3584: LD_INT 22
3586: PUSH
3587: LD_INT 2
3589: PUSH
3590: EMPTY
3591: LIST
3592: LIST
3593: PUSH
3594: LD_INT 21
3596: PUSH
3597: LD_INT 1
3599: PUSH
3600: EMPTY
3601: LIST
3602: LIST
3603: PUSH
3604: EMPTY
3605: LIST
3606: LIST
3607: PPUSH
3608: CALL_OW 69
3612: PUSH
3613: LD_INT 0
3615: EQUAL
3616: IFFALSE 3577
// if IsOk ( sol ) then
3618: LD_VAR 0 1
3622: PPUSH
3623: CALL_OW 302
3627: IFFALSE 3647
// begin sol2 := others diff sol ;
3629: LD_ADDR_VAR 0 2
3633: PUSH
3634: LD_EXP 26
3638: PUSH
3639: LD_VAR 0 1
3643: DIFF
3644: ST_TO_ADDR
// end else
3645: GO 3649
// exit ;
3647: GO 4149
// if not Lisa and not sol2 then
3649: LD_EXP 22
3653: NOT
3654: PUSH
3655: LD_VAR 0 2
3659: NOT
3660: AND
3661: IFFALSE 3665
// exit ;
3663: GO 4149
// DialogueOn ;
3665: CALL_OW 6
// if Lisa then
3669: LD_EXP 22
3673: IFFALSE 3689
// Say ( Lisa , D5a-Lisa-1 ) else
3675: LD_EXP 22
3679: PPUSH
3680: LD_STRING D5a-Lisa-1
3682: PPUSH
3683: CALL_OW 88
3687: GO 3764
// if sol2 then
3689: LD_VAR 0 2
3693: IFFALSE 3764
// case GetSex ( sol2 [ 1 ] ) of sex_male :
3695: LD_VAR 0 2
3699: PUSH
3700: LD_INT 1
3702: ARRAY
3703: PPUSH
3704: CALL_OW 258
3708: PUSH
3709: LD_INT 1
3711: DOUBLE
3712: EQUAL
3713: IFTRUE 3717
3715: GO 3736
3717: POP
// Say ( sol2 [ 1 ] , D5-Sol2-1 ) ; sex_female :
3718: LD_VAR 0 2
3722: PUSH
3723: LD_INT 1
3725: ARRAY
3726: PPUSH
3727: LD_STRING D5-Sol2-1
3729: PPUSH
3730: CALL_OW 88
3734: GO 3764
3736: LD_INT 2
3738: DOUBLE
3739: EQUAL
3740: IFTRUE 3744
3742: GO 3763
3744: POP
// Say ( sol2 [ 1 ] , D5-FSol2-1 ) ; end ;
3745: LD_VAR 0 2
3749: PUSH
3750: LD_INT 1
3752: ARRAY
3753: PPUSH
3754: LD_STRING D5-FSol2-1
3756: PPUSH
3757: CALL_OW 88
3761: GO 3764
3763: POP
// Say ( sol , D5-Sol1-2 ) ;
3764: LD_VAR 0 1
3768: PPUSH
3769: LD_STRING D5-Sol1-2
3771: PPUSH
3772: CALL_OW 88
// if Lisa then
3776: LD_EXP 22
3780: IFFALSE 3796
// Say ( Lisa , D5a-Lisa-2 ) else
3782: LD_EXP 22
3786: PPUSH
3787: LD_STRING D5a-Lisa-2
3789: PPUSH
3790: CALL_OW 88
3794: GO 3871
// if sol2 then
3796: LD_VAR 0 2
3800: IFFALSE 3871
// case GetSex ( sol2 [ 1 ] ) of sex_male :
3802: LD_VAR 0 2
3806: PUSH
3807: LD_INT 1
3809: ARRAY
3810: PPUSH
3811: CALL_OW 258
3815: PUSH
3816: LD_INT 1
3818: DOUBLE
3819: EQUAL
3820: IFTRUE 3824
3822: GO 3843
3824: POP
// Say ( sol2 [ 1 ] , D5-Sol2-2 ) ; sex_female :
3825: LD_VAR 0 2
3829: PUSH
3830: LD_INT 1
3832: ARRAY
3833: PPUSH
3834: LD_STRING D5-Sol2-2
3836: PPUSH
3837: CALL_OW 88
3841: GO 3871
3843: LD_INT 2
3845: DOUBLE
3846: EQUAL
3847: IFTRUE 3851
3849: GO 3870
3851: POP
// Say ( sol2 [ 1 ] , D5-FSol2-2 ) ; end ;
3852: LD_VAR 0 2
3856: PUSH
3857: LD_INT 1
3859: ARRAY
3860: PPUSH
3861: LD_STRING D5-FSol2-2
3863: PPUSH
3864: CALL_OW 88
3868: GO 3871
3870: POP
// Say ( sol , D5a-Sol1-3 ) ;
3871: LD_VAR 0 1
3875: PPUSH
3876: LD_STRING D5a-Sol1-3
3878: PPUSH
3879: CALL_OW 88
// if Lisa then
3883: LD_EXP 22
3887: IFFALSE 3901
// Say ( Lisa , D5a-Lisa-3 ) ;
3889: LD_EXP 22
3893: PPUSH
3894: LD_STRING D5a-Lisa-3
3896: PPUSH
3897: CALL_OW 88
// if not sol2 then
3901: LD_VAR 0 2
3905: NOT
3906: IFFALSE 3914
// begin DialogueOff ;
3908: CALL_OW 7
// exit ;
3912: GO 4149
// end ; case GetSex ( sol2 [ 1 ] ) of sex_male :
3914: LD_VAR 0 2
3918: PUSH
3919: LD_INT 1
3921: ARRAY
3922: PPUSH
3923: CALL_OW 258
3927: PUSH
3928: LD_INT 1
3930: DOUBLE
3931: EQUAL
3932: IFTRUE 3936
3934: GO 3955
3936: POP
// Say ( sol2 [ 1 ] , D5-Sol2-3 ) ; sex_female :
3937: LD_VAR 0 2
3941: PUSH
3942: LD_INT 1
3944: ARRAY
3945: PPUSH
3946: LD_STRING D5-Sol2-3
3948: PPUSH
3949: CALL_OW 88
3953: GO 3983
3955: LD_INT 2
3957: DOUBLE
3958: EQUAL
3959: IFTRUE 3963
3961: GO 3982
3963: POP
// Say ( sol2 [ 1 ] , D5-FSol2-3 ) ; end ;
3964: LD_VAR 0 2
3968: PUSH
3969: LD_INT 1
3971: ARRAY
3972: PPUSH
3973: LD_STRING D5-FSol2-3
3975: PPUSH
3976: CALL_OW 88
3980: GO 3983
3982: POP
// Say ( sol , D5-Sol1-4 ) ;
3983: LD_VAR 0 1
3987: PPUSH
3988: LD_STRING D5-Sol1-4
3990: PPUSH
3991: CALL_OW 88
// case GetSex ( sol2 [ 1 ] ) of sex_male :
3995: LD_VAR 0 2
3999: PUSH
4000: LD_INT 1
4002: ARRAY
4003: PPUSH
4004: CALL_OW 258
4008: PUSH
4009: LD_INT 1
4011: DOUBLE
4012: EQUAL
4013: IFTRUE 4017
4015: GO 4036
4017: POP
// Say ( sol2 [ 1 ] , D5-Sol2-4 ) ; sex_female :
4018: LD_VAR 0 2
4022: PUSH
4023: LD_INT 1
4025: ARRAY
4026: PPUSH
4027: LD_STRING D5-Sol2-4
4029: PPUSH
4030: CALL_OW 88
4034: GO 4064
4036: LD_INT 2
4038: DOUBLE
4039: EQUAL
4040: IFTRUE 4044
4042: GO 4063
4044: POP
// Say ( sol2 [ 1 ] , D5-FSol2-4 ) ; end ;
4045: LD_VAR 0 2
4049: PUSH
4050: LD_INT 1
4052: ARRAY
4053: PPUSH
4054: LD_STRING D5-FSol2-4
4056: PPUSH
4057: CALL_OW 88
4061: GO 4064
4063: POP
// Say ( sol , D5-Sol1-5 ) ;
4064: LD_VAR 0 1
4068: PPUSH
4069: LD_STRING D5-Sol1-5
4071: PPUSH
4072: CALL_OW 88
// case GetSex ( sol2 [ 1 ] ) of sex_male :
4076: LD_VAR 0 2
4080: PUSH
4081: LD_INT 1
4083: ARRAY
4084: PPUSH
4085: CALL_OW 258
4089: PUSH
4090: LD_INT 1
4092: DOUBLE
4093: EQUAL
4094: IFTRUE 4098
4096: GO 4117
4098: POP
// Say ( sol2 [ 1 ] , D5-Sol2-5 ) ; sex_female :
4099: LD_VAR 0 2
4103: PUSH
4104: LD_INT 1
4106: ARRAY
4107: PPUSH
4108: LD_STRING D5-Sol2-5
4110: PPUSH
4111: CALL_OW 88
4115: GO 4145
4117: LD_INT 2
4119: DOUBLE
4120: EQUAL
4121: IFTRUE 4125
4123: GO 4144
4125: POP
// Say ( sol2 [ 1 ] , D5-FSol2-5 ) ; end ;
4126: LD_VAR 0 2
4130: PUSH
4131: LD_INT 1
4133: ARRAY
4134: PPUSH
4135: LD_STRING D5-FSol2-5
4137: PPUSH
4138: CALL_OW 88
4142: GO 4145
4144: POP
// DialogueOff ;
4145: CALL_OW 7
// end ;
4149: PPOPN 2
4151: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_apeman_engineer ] ] ) >= 5 do
4152: LD_INT 22
4154: PUSH
4155: LD_INT 1
4157: PUSH
4158: EMPTY
4159: LIST
4160: LIST
4161: PUSH
4162: LD_INT 25
4164: PUSH
4165: LD_INT 16
4167: PUSH
4168: EMPTY
4169: LIST
4170: LIST
4171: PUSH
4172: EMPTY
4173: LIST
4174: LIST
4175: PPUSH
4176: CALL_OW 69
4180: PUSH
4181: LD_INT 5
4183: GREATEREQUAL
4184: IFFALSE 4204
4186: GO 4188
4188: DISABLE
// begin ChangeMissionObjectives ( M1b ) ;
4189: LD_STRING M1b
4191: PPUSH
4192: CALL_OW 337
// apeman_army := true ;
4196: LD_ADDR_EXP 9
4200: PUSH
4201: LD_INT 1
4203: ST_TO_ADDR
// end ;
4204: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] , [ f_constructed ] ] ) do
4205: LD_INT 22
4207: PUSH
4208: LD_INT 1
4210: PUSH
4211: EMPTY
4212: LIST
4213: LIST
4214: PUSH
4215: LD_INT 30
4217: PUSH
4218: LD_INT 3
4220: PUSH
4221: EMPTY
4222: LIST
4223: LIST
4224: PUSH
4225: LD_INT 57
4227: PUSH
4228: EMPTY
4229: LIST
4230: PUSH
4231: EMPTY
4232: LIST
4233: LIST
4234: LIST
4235: PPUSH
4236: CALL_OW 69
4240: IFFALSE 4252
4242: GO 4244
4244: DISABLE
// ChangeMissionObjectives ( M1c ) ;
4245: LD_STRING M1c
4247: PPUSH
4248: CALL_OW 337
4252: END
// every 0 0$1 trigger GetTech ( tech_radar , 1 ) = state_researched do
4253: LD_INT 6
4255: PPUSH
4256: LD_INT 1
4258: PPUSH
4259: CALL_OW 321
4263: PUSH
4264: LD_INT 2
4266: EQUAL
4267: IFFALSE 4287
4269: GO 4271
4271: DISABLE
// begin ChangeMissionObjectives ( M2a ) ;
4272: LD_STRING M2a
4274: PPUSH
4275: CALL_OW 337
// radar_researched := true ;
4279: LD_ADDR_EXP 10
4283: PUSH
4284: LD_INT 1
4286: ST_TO_ADDR
// end ;
4287: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_weapon , us_radar ] , [ f_bweapon , us_radar ] ] ] ) do
4288: LD_INT 22
4290: PUSH
4291: LD_INT 1
4293: PUSH
4294: EMPTY
4295: LIST
4296: LIST
4297: PUSH
4298: LD_INT 2
4300: PUSH
4301: LD_INT 34
4303: PUSH
4304: LD_INT 11
4306: PUSH
4307: EMPTY
4308: LIST
4309: LIST
4310: PUSH
4311: LD_INT 35
4313: PUSH
4314: LD_INT 11
4316: PUSH
4317: EMPTY
4318: LIST
4319: LIST
4320: PUSH
4321: EMPTY
4322: LIST
4323: LIST
4324: LIST
4325: PUSH
4326: EMPTY
4327: LIST
4328: LIST
4329: PPUSH
4330: CALL_OW 69
4334: IFFALSE 4354
4336: GO 4338
4338: DISABLE
// begin ChangeMissionObjectives ( M2b ) ;
4339: LD_STRING M2b
4341: PPUSH
4342: CALL_OW 337
// radar_builded := true ;
4346: LD_ADDR_EXP 11
4350: PUSH
4351: LD_INT 1
4353: ST_TO_ADDR
// end ;
4354: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) = 0 and not first_apeman_tamed do
4355: LD_INT 22
4357: PUSH
4358: LD_INT 0
4360: PUSH
4361: EMPTY
4362: LIST
4363: LIST
4364: PUSH
4365: LD_INT 25
4367: PUSH
4368: LD_INT 12
4370: PUSH
4371: EMPTY
4372: LIST
4373: LIST
4374: PUSH
4375: EMPTY
4376: LIST
4377: LIST
4378: PPUSH
4379: CALL_OW 69
4383: PUSH
4384: LD_INT 0
4386: EQUAL
4387: PUSH
4388: LD_EXP 8
4392: NOT
4393: AND
4394: IFFALSE 4406
4396: GO 4398
4398: DISABLE
// YouLost ( Apeman ) ;
4399: LD_STRING Apeman
4401: PPUSH
4402: CALL_OW 104
4406: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_apeman_engineer ] ] ) >= 7 do var i , filter ;
4407: LD_INT 22
4409: PUSH
4410: LD_INT 1
4412: PUSH
4413: EMPTY
4414: LIST
4415: LIST
4416: PUSH
4417: LD_INT 25
4419: PUSH
4420: LD_INT 16
4422: PUSH
4423: EMPTY
4424: LIST
4425: LIST
4426: PUSH
4427: EMPTY
4428: LIST
4429: LIST
4430: PPUSH
4431: CALL_OW 69
4435: PUSH
4436: LD_INT 7
4438: GREATEREQUAL
4439: IFFALSE 4537
4441: GO 4443
4443: DISABLE
4444: LD_INT 0
4446: PPUSH
4447: PPUSH
// begin filter := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 4 ] ] ) ^ JMM ;
4448: LD_ADDR_VAR 0 2
4452: PUSH
4453: LD_INT 22
4455: PUSH
4456: LD_INT 1
4458: PUSH
4459: EMPTY
4460: LIST
4461: LIST
4462: PUSH
4463: LD_INT 21
4465: PUSH
4466: LD_INT 1
4468: PUSH
4469: EMPTY
4470: LIST
4471: LIST
4472: PUSH
4473: LD_INT 25
4475: PUSH
4476: LD_INT 4
4478: PUSH
4479: EMPTY
4480: LIST
4481: LIST
4482: PUSH
4483: EMPTY
4484: LIST
4485: LIST
4486: LIST
4487: PPUSH
4488: CALL_OW 69
4492: PUSH
4493: LD_EXP 16
4497: ADD
4498: ST_TO_ADDR
// if filter then
4499: LD_VAR 0 2
4503: IFFALSE 4537
// for i in filter do
4505: LD_ADDR_VAR 0 1
4509: PUSH
4510: LD_VAR 0 2
4514: PUSH
4515: FOR_IN
4516: IFFALSE 4535
// AddExperience ( i , 4 , 3500 ) ;
4518: LD_VAR 0 1
4522: PPUSH
4523: LD_INT 4
4525: PPUSH
4526: LD_INT 3500
4528: PPUSH
4529: CALL_OW 492
4533: GO 4515
4535: POP
4536: POP
// end ;
4537: PPOPN 2
4539: END
// every 0 0$1 trigger end_mission do var i , tmp , m1 , m2 , m3 ;
4540: LD_EXP 14
4544: IFFALSE 5678
4546: GO 4548
4548: DISABLE
4549: LD_INT 0
4551: PPUSH
4552: PPUSH
4553: PPUSH
4554: PPUSH
4555: PPUSH
// begin if apeKillCounter = 0 then
4556: LD_EXP 15
4560: PUSH
4561: LD_INT 0
4563: EQUAL
4564: IFFALSE 4573
// SetAchievement ( ACH_APEKILLER ) ;
4566: LD_STRING ACH_APEKILLER
4568: PPUSH
4569: CALL_OW 543
// if FilterAllUnits ( [ f_side , 2 ] ) then
4573: LD_INT 22
4575: PUSH
4576: LD_INT 2
4578: PUSH
4579: EMPTY
4580: LIST
4581: LIST
4582: PPUSH
4583: CALL_OW 69
4587: IFFALSE 4625
// for i in FilterAllUnits ( [ f_side , 2 ] ) do
4589: LD_ADDR_VAR 0 1
4593: PUSH
4594: LD_INT 22
4596: PUSH
4597: LD_INT 2
4599: PUSH
4600: EMPTY
4601: LIST
4602: LIST
4603: PPUSH
4604: CALL_OW 69
4608: PUSH
4609: FOR_IN
4610: IFFALSE 4623
// RemoveUnit ( i ) ;
4612: LD_VAR 0 1
4616: PPUSH
4617: CALL_OW 64
4621: GO 4609
4623: POP
4624: POP
// m1 := false ;
4625: LD_ADDR_VAR 0 3
4629: PUSH
4630: LD_INT 0
4632: ST_TO_ADDR
// m2 := false ;
4633: LD_ADDR_VAR 0 4
4637: PUSH
4638: LD_INT 0
4640: ST_TO_ADDR
// m3 := false ;
4641: LD_ADDR_VAR 0 5
4645: PUSH
4646: LD_INT 0
4648: ST_TO_ADDR
// if apeman_army then
4649: LD_EXP 9
4653: IFFALSE 4675
// begin AddMedal ( Tame , 1 ) ;
4655: LD_STRING Tame
4657: PPUSH
4658: LD_INT 1
4660: PPUSH
4661: CALL_OW 101
// m1 := true ;
4665: LD_ADDR_VAR 0 3
4669: PUSH
4670: LD_INT 1
4672: ST_TO_ADDR
// end else
4673: GO 4686
// AddMedal ( Tame , - 1 ) ;
4675: LD_STRING Tame
4677: PPUSH
4678: LD_INT 1
4680: NEG
4681: PPUSH
4682: CALL_OW 101
// if radar_researched then
4686: LD_EXP 10
4690: IFFALSE 4722
// begin SaveVariable ( true , radarResInDelta ) ;
4692: LD_INT 1
4694: PPUSH
4695: LD_STRING radarResInDelta
4697: PPUSH
4698: CALL_OW 39
// AddMedal ( Radar , 1 ) ;
4702: LD_STRING Radar
4704: PPUSH
4705: LD_INT 1
4707: PPUSH
4708: CALL_OW 101
// m2 := true ;
4712: LD_ADDR_VAR 0 4
4716: PUSH
4717: LD_INT 1
4719: ST_TO_ADDR
// end else
4720: GO 4752
// if radar_allowed then
4722: LD_EXP 7
4726: IFFALSE 4741
// AddMedal ( Radar , - 2 ) else
4728: LD_STRING Radar
4730: PPUSH
4731: LD_INT 2
4733: NEG
4734: PPUSH
4735: CALL_OW 101
4739: GO 4752
// AddMedal ( Radar , - 1 ) ;
4741: LD_STRING Radar
4743: PPUSH
4744: LD_INT 1
4746: NEG
4747: PPUSH
4748: CALL_OW 101
// if radar_builded then
4752: LD_EXP 11
4756: IFFALSE 4778
// begin AddMedal ( BuildRadar , 1 ) ;
4758: LD_STRING BuildRadar
4760: PPUSH
4761: LD_INT 1
4763: PPUSH
4764: CALL_OW 101
// m3 := true ;
4768: LD_ADDR_VAR 0 5
4772: PUSH
4773: LD_INT 1
4775: ST_TO_ADDR
// end else
4776: GO 4789
// AddMedal ( BuildRadar , - 1 ) ;
4778: LD_STRING BuildRadar
4780: PPUSH
4781: LD_INT 1
4783: NEG
4784: PPUSH
4785: CALL_OW 101
// if tick <= 7 7$00 then
4789: LD_OWVAR 1
4793: PUSH
4794: LD_INT 14700
4796: LESSEQUAL
4797: IFFALSE 4806
// SetAchievement ( ACH_ASPEED_5 ) ;
4799: LD_STRING ACH_ASPEED_5
4801: PPUSH
4802: CALL_OW 543
// if m1 and m2 and m3 and Difficulty >= 3 then
4806: LD_VAR 0 3
4810: PUSH
4811: LD_VAR 0 4
4815: AND
4816: PUSH
4817: LD_VAR 0 5
4821: AND
4822: PUSH
4823: LD_OWVAR 67
4827: PUSH
4828: LD_INT 3
4830: GREATEREQUAL
4831: AND
4832: IFFALSE 4844
// SetAchievementEX ( ACH_AMER , 5 ) ;
4834: LD_STRING ACH_AMER
4836: PPUSH
4837: LD_INT 5
4839: PPUSH
4840: CALL_OW 564
// GiveMedals ( MAIN ) ;
4844: LD_STRING MAIN
4846: PPUSH
4847: CALL_OW 102
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ;
4851: LD_ADDR_VAR 0 2
4855: PUSH
4856: LD_INT 22
4858: PUSH
4859: LD_INT 1
4861: PUSH
4862: EMPTY
4863: LIST
4864: LIST
4865: PUSH
4866: LD_INT 21
4868: PUSH
4869: LD_INT 1
4871: PUSH
4872: EMPTY
4873: LIST
4874: LIST
4875: PUSH
4876: LD_INT 2
4878: PUSH
4879: LD_INT 25
4881: PUSH
4882: LD_INT 1
4884: PUSH
4885: EMPTY
4886: LIST
4887: LIST
4888: PUSH
4889: LD_INT 25
4891: PUSH
4892: LD_INT 2
4894: PUSH
4895: EMPTY
4896: LIST
4897: LIST
4898: PUSH
4899: LD_INT 25
4901: PUSH
4902: LD_INT 3
4904: PUSH
4905: EMPTY
4906: LIST
4907: LIST
4908: PUSH
4909: LD_INT 25
4911: PUSH
4912: LD_INT 4
4914: PUSH
4915: EMPTY
4916: LIST
4917: LIST
4918: PUSH
4919: EMPTY
4920: LIST
4921: LIST
4922: LIST
4923: LIST
4924: LIST
4925: PUSH
4926: EMPTY
4927: LIST
4928: LIST
4929: LIST
4930: PPUSH
4931: CALL_OW 69
4935: ST_TO_ADDR
// RewardPeople ( tmp ) ;
4936: LD_VAR 0 2
4940: PPUSH
4941: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
4945: LD_EXP 16
4949: PPUSH
4950: LD_EXP 2
4954: PUSH
4955: LD_STRING JMM
4957: STR
4958: PPUSH
4959: CALL_OW 38
// if IsOk ( Gladstone ) then
4963: LD_EXP 17
4967: PPUSH
4968: CALL_OW 302
4972: IFFALSE 4992
// begin SaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
4974: LD_EXP 17
4978: PPUSH
4979: LD_EXP 2
4983: PUSH
4984: LD_STRING Gladstone
4986: STR
4987: PPUSH
4988: CALL_OW 38
// end ; if IsOk ( Denis ) and GetSide ( Denis ) = 1 then
4992: LD_EXP 19
4996: PPUSH
4997: CALL_OW 302
5001: PUSH
5002: LD_EXP 19
5006: PPUSH
5007: CALL_OW 255
5011: PUSH
5012: LD_INT 1
5014: EQUAL
5015: AND
5016: IFFALSE 5046
// begin SaveCharacters ( Denis , mission_prefix & Denis ) ;
5018: LD_EXP 19
5022: PPUSH
5023: LD_EXP 2
5027: PUSH
5028: LD_STRING Denis
5030: STR
5031: PPUSH
5032: CALL_OW 38
// SaveVariable ( true , DenisInDelta ) ;
5036: LD_INT 1
5038: PPUSH
5039: LD_STRING DenisInDelta
5041: PPUSH
5042: CALL_OW 39
// end ; if IsOk ( Lisa ) then
5046: LD_EXP 22
5050: PPUSH
5051: CALL_OW 302
5055: IFFALSE 5075
// begin SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
5057: LD_EXP 22
5061: PPUSH
5062: LD_EXP 2
5066: PUSH
5067: LD_STRING Lisa
5069: STR
5070: PPUSH
5071: CALL_OW 38
// end ; if IsOk ( Frank ) then
5075: LD_EXP 23
5079: PPUSH
5080: CALL_OW 302
5084: IFFALSE 5104
// begin SaveCharacters ( Frank , mission_prefix & Frank ) ;
5086: LD_EXP 23
5090: PPUSH
5091: LD_EXP 2
5095: PUSH
5096: LD_STRING Frank
5098: STR
5099: PPUSH
5100: CALL_OW 38
// end ; if IsOk ( Bobby ) then
5104: LD_EXP 24
5108: PPUSH
5109: CALL_OW 302
5113: IFFALSE 5133
// begin SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
5115: LD_EXP 24
5119: PPUSH
5120: LD_EXP 2
5124: PUSH
5125: LD_STRING Bobby
5127: STR
5128: PPUSH
5129: CALL_OW 38
// end ; if IsOk ( Cyrus ) then
5133: LD_EXP 25
5137: PPUSH
5138: CALL_OW 302
5142: IFFALSE 5162
// begin SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
5144: LD_EXP 25
5148: PPUSH
5149: LD_EXP 2
5153: PUSH
5154: LD_STRING Cyrus
5156: STR
5157: PPUSH
5158: CALL_OW 38
// end ; if IsOk ( Brown ) then
5162: LD_EXP 20
5166: PPUSH
5167: CALL_OW 302
5171: IFFALSE 5191
// begin SaveCharacters ( Brown , mission_prefix & Brown ) ;
5173: LD_EXP 20
5177: PPUSH
5178: LD_EXP 2
5182: PUSH
5183: LD_STRING Brown
5185: STR
5186: PPUSH
5187: CALL_OW 38
// end ; if IsOk ( Donaldson ) then
5191: LD_EXP 21
5195: PPUSH
5196: CALL_OW 302
5200: IFFALSE 5220
// begin SaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
5202: LD_EXP 21
5206: PPUSH
5207: LD_EXP 2
5211: PUSH
5212: LD_STRING Donaldson
5214: STR
5215: PPUSH
5216: CALL_OW 38
// end ; if others then
5220: LD_EXP 26
5224: IFFALSE 5238
// SaveCharacters ( others , othersInDelta ) ;
5226: LD_EXP 26
5230: PPUSH
5231: LD_STRING othersInDelta
5233: PPUSH
5234: CALL_OW 38
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_apeman_engineer ] ] ) then
5238: LD_INT 22
5240: PUSH
5241: LD_INT 1
5243: PUSH
5244: EMPTY
5245: LIST
5246: LIST
5247: PUSH
5248: LD_INT 25
5250: PUSH
5251: LD_INT 16
5253: PUSH
5254: EMPTY
5255: LIST
5256: LIST
5257: PUSH
5258: EMPTY
5259: LIST
5260: LIST
5261: PPUSH
5262: CALL_OW 69
5266: IFFALSE 5304
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_apeman_engineer ] ] ) , apeInDelta ) ;
5268: LD_INT 22
5270: PUSH
5271: LD_INT 1
5273: PUSH
5274: EMPTY
5275: LIST
5276: LIST
5277: PUSH
5278: LD_INT 25
5280: PUSH
5281: LD_INT 16
5283: PUSH
5284: EMPTY
5285: LIST
5286: LIST
5287: PUSH
5288: EMPTY
5289: LIST
5290: LIST
5291: PPUSH
5292: CALL_OW 69
5296: PPUSH
5297: LD_STRING apeInDelta
5299: PPUSH
5300: CALL_OW 38
// tmp := [ ] ;
5304: LD_ADDR_VAR 0 2
5308: PUSH
5309: EMPTY
5310: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) then
5311: LD_INT 22
5313: PUSH
5314: LD_INT 1
5316: PUSH
5317: EMPTY
5318: LIST
5319: LIST
5320: PUSH
5321: LD_INT 21
5323: PUSH
5324: LD_INT 2
5326: PUSH
5327: EMPTY
5328: LIST
5329: LIST
5330: PUSH
5331: EMPTY
5332: LIST
5333: LIST
5334: PPUSH
5335: CALL_OW 69
5339: IFFALSE 5450
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) do
5341: LD_ADDR_VAR 0 1
5345: PUSH
5346: LD_INT 22
5348: PUSH
5349: LD_INT 1
5351: PUSH
5352: EMPTY
5353: LIST
5354: LIST
5355: PUSH
5356: LD_INT 21
5358: PUSH
5359: LD_INT 2
5361: PUSH
5362: EMPTY
5363: LIST
5364: LIST
5365: PUSH
5366: EMPTY
5367: LIST
5368: LIST
5369: PPUSH
5370: CALL_OW 69
5374: PUSH
5375: FOR_IN
5376: IFFALSE 5448
// tmp := tmp ^ [ GetNation ( i ) , GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) ] ;
5378: LD_ADDR_VAR 0 2
5382: PUSH
5383: LD_VAR 0 2
5387: PUSH
5388: LD_VAR 0 1
5392: PPUSH
5393: CALL_OW 248
5397: PUSH
5398: LD_VAR 0 1
5402: PPUSH
5403: CALL_OW 265
5407: PUSH
5408: LD_VAR 0 1
5412: PPUSH
5413: CALL_OW 262
5417: PUSH
5418: LD_VAR 0 1
5422: PPUSH
5423: CALL_OW 263
5427: PUSH
5428: LD_VAR 0 1
5432: PPUSH
5433: CALL_OW 264
5437: PUSH
5438: EMPTY
5439: LIST
5440: LIST
5441: LIST
5442: LIST
5443: LIST
5444: ADD
5445: ST_TO_ADDR
5446: GO 5375
5448: POP
5449: POP
// if tmp then
5450: LD_VAR 0 2
5454: IFFALSE 5468
// SaveVariable ( tmp , vehiclesInDelta ) ;
5456: LD_VAR 0 2
5460: PPUSH
5461: LD_STRING vehiclesInDelta
5463: PPUSH
5464: CALL_OW 39
// tmp := [ ] ;
5468: LD_ADDR_VAR 0 2
5472: PUSH
5473: EMPTY
5474: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) then
5475: LD_INT 22
5477: PUSH
5478: LD_INT 1
5480: PUSH
5481: EMPTY
5482: LIST
5483: LIST
5484: PUSH
5485: LD_INT 21
5487: PUSH
5488: LD_INT 3
5490: PUSH
5491: EMPTY
5492: LIST
5493: LIST
5494: PUSH
5495: EMPTY
5496: LIST
5497: LIST
5498: PPUSH
5499: CALL_OW 69
5503: IFFALSE 5656
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) do
5505: LD_ADDR_VAR 0 1
5509: PUSH
5510: LD_INT 22
5512: PUSH
5513: LD_INT 1
5515: PUSH
5516: EMPTY
5517: LIST
5518: LIST
5519: PUSH
5520: LD_INT 21
5522: PUSH
5523: LD_INT 3
5525: PUSH
5526: EMPTY
5527: LIST
5528: LIST
5529: PUSH
5530: EMPTY
5531: LIST
5532: LIST
5533: PPUSH
5534: CALL_OW 69
5538: PUSH
5539: FOR_IN
5540: IFFALSE 5654
// tmp := tmp ^ [ [ GetBType ( i ) , GetBLevel ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) , GetBWeapon ( i ) ] ] ;
5542: LD_ADDR_VAR 0 2
5546: PUSH
5547: LD_VAR 0 2
5551: PUSH
5552: LD_VAR 0 1
5556: PPUSH
5557: CALL_OW 266
5561: PUSH
5562: LD_VAR 0 1
5566: PPUSH
5567: CALL_OW 267
5571: PUSH
5572: LD_VAR 0 1
5576: PPUSH
5577: CALL_OW 250
5581: PUSH
5582: LD_VAR 0 1
5586: PPUSH
5587: CALL_OW 251
5591: PUSH
5592: LD_VAR 0 1
5596: PPUSH
5597: CALL_OW 254
5601: PUSH
5602: LD_VAR 0 1
5606: PPUSH
5607: LD_INT 1
5609: PPUSH
5610: CALL_OW 268
5614: PUSH
5615: LD_VAR 0 1
5619: PPUSH
5620: LD_INT 2
5622: PPUSH
5623: CALL_OW 268
5627: PUSH
5628: LD_VAR 0 1
5632: PPUSH
5633: CALL_OW 269
5637: PUSH
5638: EMPTY
5639: LIST
5640: LIST
5641: LIST
5642: LIST
5643: LIST
5644: LIST
5645: LIST
5646: LIST
5647: PUSH
5648: EMPTY
5649: LIST
5650: ADD
5651: ST_TO_ADDR
5652: GO 5539
5654: POP
5655: POP
// if tmp then
5656: LD_VAR 0 2
5660: IFFALSE 5674
// SaveVariable ( tmp , buildingsInDelta ) ;
5662: LD_VAR 0 2
5666: PPUSH
5667: LD_STRING buildingsInDelta
5669: PPUSH
5670: CALL_OW 39
// YouWin ;
5674: CALL_OW 103
// end ; end_of_file
5678: PPOPN 5
5680: END
// export function PrepareArabianTroops ( amount , skill , area ) ; var i , un , tmp ; begin
5681: LD_INT 0
5683: PPUSH
5684: PPUSH
5685: PPUSH
5686: PPUSH
// InitHc ;
5687: CALL_OW 19
// InitUc ;
5691: CALL_OW 18
// uc_side := 2 ;
5695: LD_ADDR_OWVAR 20
5699: PUSH
5700: LD_INT 2
5702: ST_TO_ADDR
// uc_nation := 2 ;
5703: LD_ADDR_OWVAR 21
5707: PUSH
5708: LD_INT 2
5710: ST_TO_ADDR
// if not amount then
5711: LD_VAR 0 1
5715: NOT
5716: IFFALSE 5720
// exit ;
5718: GO 5843
// for i = 1 to amount do
5720: LD_ADDR_VAR 0 5
5724: PUSH
5725: DOUBLE
5726: LD_INT 1
5728: DEC
5729: ST_TO_ADDR
5730: LD_VAR 0 1
5734: PUSH
5735: FOR_TO
5736: IFFALSE 5831
// begin PrepareHuman ( false , 1 , skill ) ;
5738: LD_INT 0
5740: PPUSH
5741: LD_INT 1
5743: PPUSH
5744: LD_VAR 0 2
5748: PPUSH
5749: CALL_OW 380
// un := CreateHuman ;
5753: LD_ADDR_VAR 0 6
5757: PUSH
5758: CALL_OW 44
5762: ST_TO_ADDR
// tmp := Insert ( tmp , 1 , un ) ;
5763: LD_ADDR_VAR 0 7
5767: PUSH
5768: LD_VAR 0 7
5772: PPUSH
5773: LD_INT 1
5775: PPUSH
5776: LD_VAR 0 6
5780: PPUSH
5781: CALL_OW 2
5785: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
5786: LD_VAR 0 6
5790: PPUSH
5791: LD_VAR 0 3
5795: PPUSH
5796: LD_INT 0
5798: PPUSH
5799: CALL_OW 49
// if i mod 2 = 0 then
5803: LD_VAR 0 5
5807: PUSH
5808: LD_INT 2
5810: MOD
5811: PUSH
5812: LD_INT 0
5814: EQUAL
5815: IFFALSE 5829
// SetTag ( un , 11 ) ;
5817: LD_VAR 0 6
5821: PPUSH
5822: LD_INT 11
5824: PPUSH
5825: CALL_OW 109
// end ;
5829: GO 5735
5831: POP
5832: POP
// result := tmp ;
5833: LD_ADDR_VAR 0 4
5837: PUSH
5838: LD_VAR 0 7
5842: ST_TO_ADDR
// end ;
5843: LD_VAR 0 4
5847: RET
// export ar_forces , ap_killers ; every 0 0$1 trigger Delta do var i , timer , more_troops , skill , eng , un , veh , force ;
5848: LD_EXP 6
5852: IFFALSE 6755
5854: GO 5856
5856: DISABLE
5857: LD_INT 0
5859: PPUSH
5860: PPUSH
5861: PPUSH
5862: PPUSH
5863: PPUSH
5864: PPUSH
5865: PPUSH
5866: PPUSH
// begin more_troops := false ;
5867: LD_ADDR_VAR 0 3
5871: PUSH
5872: LD_INT 0
5874: ST_TO_ADDR
// skill := [ 3 , 4 , 5 , 5 ] [ Difficulty ] ;
5875: LD_ADDR_VAR 0 4
5879: PUSH
5880: LD_INT 3
5882: PUSH
5883: LD_INT 4
5885: PUSH
5886: LD_INT 5
5888: PUSH
5889: LD_INT 5
5891: PUSH
5892: EMPTY
5893: LIST
5894: LIST
5895: LIST
5896: LIST
5897: PUSH
5898: LD_OWVAR 67
5902: ARRAY
5903: ST_TO_ADDR
// timer := [ 5 5$00 , 4 4$00 , 3 3$00 , 2 2$30 ] [ Difficulty ] ;
5904: LD_ADDR_VAR 0 2
5908: PUSH
5909: LD_INT 10500
5911: PUSH
5912: LD_INT 8400
5914: PUSH
5915: LD_INT 6300
5917: PUSH
5918: LD_INT 5250
5920: PUSH
5921: EMPTY
5922: LIST
5923: LIST
5924: LIST
5925: LIST
5926: PUSH
5927: LD_OWVAR 67
5931: ARRAY
5932: ST_TO_ADDR
// force := [ ] ;
5933: LD_ADDR_VAR 0 8
5937: PUSH
5938: EMPTY
5939: ST_TO_ADDR
// ar_forces := [ ] ;
5940: LD_ADDR_EXP 27
5944: PUSH
5945: EMPTY
5946: ST_TO_ADDR
// ap_killers := [ ] ;
5947: LD_ADDR_EXP 28
5951: PUSH
5952: EMPTY
5953: ST_TO_ADDR
// Wait ( timer ) ;
5954: LD_VAR 0 2
5958: PPUSH
5959: CALL_OW 67
// if Denis and GetSide ( Denis ) = 4 then
5963: LD_EXP 19
5967: PUSH
5968: LD_EXP 19
5972: PPUSH
5973: CALL_OW 255
5977: PUSH
5978: LD_INT 4
5980: EQUAL
5981: AND
5982: IFFALSE 5991
// Wait ( 0 0$45 ) ;
5984: LD_INT 1575
5986: PPUSH
5987: CALL_OW 67
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_armoury ] ] ) then
5991: LD_INT 22
5993: PUSH
5994: LD_INT 1
5996: PUSH
5997: EMPTY
5998: LIST
5999: LIST
6000: PUSH
6001: LD_INT 30
6003: PUSH
6004: LD_INT 4
6006: PUSH
6007: EMPTY
6008: LIST
6009: LIST
6010: PUSH
6011: EMPTY
6012: LIST
6013: LIST
6014: PPUSH
6015: CALL_OW 69
6019: IFFALSE 6036
// begin Wait ( 1 1$25 ) ;
6021: LD_INT 2975
6023: PPUSH
6024: CALL_OW 67
// more_troops := true ;
6028: LD_ADDR_VAR 0 3
6032: PUSH
6033: LD_INT 1
6035: ST_TO_ADDR
// end ; if more_troops then
6036: LD_VAR 0 3
6040: IFFALSE 6236
// begin force := PrepareArabianTroops ( [ 4 , 5 , 6 , 7 ] [ Difficulty ] , skill , arArea2 ) ;
6042: LD_ADDR_VAR 0 8
6046: PUSH
6047: LD_INT 4
6049: PUSH
6050: LD_INT 5
6052: PUSH
6053: LD_INT 6
6055: PUSH
6056: LD_INT 7
6058: PUSH
6059: EMPTY
6060: LIST
6061: LIST
6062: LIST
6063: LIST
6064: PUSH
6065: LD_OWVAR 67
6069: ARRAY
6070: PPUSH
6071: LD_VAR 0 4
6075: PPUSH
6076: LD_INT 14
6078: PPUSH
6079: CALL 5681 0 3
6083: ST_TO_ADDR
// veh := PrepareTank ( 2 , 3 , ru_medium_tracked , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_heavy_machine_gun , ru_gatling_gun , ru_gun ] [ Difficulty ] , 90 ) ;
6084: LD_ADDR_VAR 0 7
6088: PUSH
6089: LD_INT 2
6091: PPUSH
6092: LD_INT 3
6094: PPUSH
6095: LD_INT 22
6097: PPUSH
6098: LD_INT 1
6100: PPUSH
6101: LD_INT 1
6103: PPUSH
6104: LD_INT 42
6106: PUSH
6107: LD_INT 42
6109: PUSH
6110: LD_INT 43
6112: PUSH
6113: LD_INT 44
6115: PUSH
6116: EMPTY
6117: LIST
6118: LIST
6119: LIST
6120: LIST
6121: PUSH
6122: LD_OWVAR 67
6126: ARRAY
6127: PPUSH
6128: LD_INT 90
6130: PPUSH
6131: CALL 431 0 7
6135: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
6136: LD_VAR 0 7
6140: PPUSH
6141: LD_INT 4
6143: PPUSH
6144: CALL_OW 233
// PlaceUnitArea ( veh , arArea1 , false ) ;
6148: LD_VAR 0 7
6152: PPUSH
6153: LD_INT 13
6155: PPUSH
6156: LD_INT 0
6158: PPUSH
6159: CALL_OW 49
// uc_side := 2 ;
6163: LD_ADDR_OWVAR 20
6167: PUSH
6168: LD_INT 2
6170: ST_TO_ADDR
// uc_nation := 2 ;
6171: LD_ADDR_OWVAR 21
6175: PUSH
6176: LD_INT 2
6178: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
6179: LD_INT 0
6181: PPUSH
6182: LD_INT 1
6184: PPUSH
6185: LD_VAR 0 4
6189: PPUSH
6190: CALL_OW 380
// un := CreateHuman ;
6194: LD_ADDR_VAR 0 6
6198: PUSH
6199: CALL_OW 44
6203: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6204: LD_VAR 0 6
6208: PPUSH
6209: LD_VAR 0 7
6213: PPUSH
6214: CALL_OW 52
// force := force ^ un ;
6218: LD_ADDR_VAR 0 8
6222: PUSH
6223: LD_VAR 0 8
6227: PUSH
6228: LD_VAR 0 6
6232: ADD
6233: ST_TO_ADDR
// end else
6234: GO 6278
// begin force := PrepareArabianTroops ( [ 3 , 4 , 5 , 6 ] [ Difficulty ] , skill , arArea2 ) ;
6236: LD_ADDR_VAR 0 8
6240: PUSH
6241: LD_INT 3
6243: PUSH
6244: LD_INT 4
6246: PUSH
6247: LD_INT 5
6249: PUSH
6250: LD_INT 6
6252: PUSH
6253: EMPTY
6254: LIST
6255: LIST
6256: LIST
6257: LIST
6258: PUSH
6259: LD_OWVAR 67
6263: ARRAY
6264: PPUSH
6265: LD_VAR 0 4
6269: PPUSH
6270: LD_INT 14
6272: PPUSH
6273: CALL 5681 0 3
6277: ST_TO_ADDR
// end ; if force then
6278: LD_VAR 0 8
6282: IFFALSE 6294
// ar_forces := force ;
6284: LD_ADDR_EXP 27
6288: PUSH
6289: LD_VAR 0 8
6293: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
6294: LD_INT 35
6296: PPUSH
6297: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) = 0 ;
6301: LD_INT 22
6303: PUSH
6304: LD_INT 2
6306: PUSH
6307: EMPTY
6308: LIST
6309: LIST
6310: PUSH
6311: LD_INT 21
6313: PUSH
6314: LD_INT 1
6316: PUSH
6317: EMPTY
6318: LIST
6319: LIST
6320: PUSH
6321: EMPTY
6322: LIST
6323: LIST
6324: PPUSH
6325: CALL_OW 69
6329: PUSH
6330: LD_INT 0
6332: EQUAL
6333: IFFALSE 6294
// Wait ( timer ) ;
6335: LD_VAR 0 2
6339: PPUSH
6340: CALL_OW 67
// force := PrepareArabianTroops ( [ 4 , 5 , 6 , 7 ] [ Difficulty ] , skill , [ arArea1 , arArea2 ] [ rand ( 1 , 2 ) ] ) ;
6344: LD_ADDR_VAR 0 8
6348: PUSH
6349: LD_INT 4
6351: PUSH
6352: LD_INT 5
6354: PUSH
6355: LD_INT 6
6357: PUSH
6358: LD_INT 7
6360: PUSH
6361: EMPTY
6362: LIST
6363: LIST
6364: LIST
6365: LIST
6366: PUSH
6367: LD_OWVAR 67
6371: ARRAY
6372: PPUSH
6373: LD_VAR 0 4
6377: PPUSH
6378: LD_INT 13
6380: PUSH
6381: LD_INT 14
6383: PUSH
6384: EMPTY
6385: LIST
6386: LIST
6387: PUSH
6388: LD_INT 1
6390: PPUSH
6391: LD_INT 2
6393: PPUSH
6394: CALL_OW 12
6398: ARRAY
6399: PPUSH
6400: CALL 5681 0 3
6404: ST_TO_ADDR
// if Difficulty > 1 and Delta then
6405: LD_OWVAR 67
6409: PUSH
6410: LD_INT 1
6412: GREATER
6413: PUSH
6414: LD_EXP 6
6418: AND
6419: IFFALSE 6498
// begin uc_side := 2 ;
6421: LD_ADDR_OWVAR 20
6425: PUSH
6426: LD_INT 2
6428: ST_TO_ADDR
// uc_nation := 2 ;
6429: LD_ADDR_OWVAR 21
6433: PUSH
6434: LD_INT 2
6436: ST_TO_ADDR
// PrepareHuman ( false , 2 , skill ) ;
6437: LD_INT 0
6439: PPUSH
6440: LD_INT 2
6442: PPUSH
6443: LD_VAR 0 4
6447: PPUSH
6448: CALL_OW 380
// eng := CreateHuman ;
6452: LD_ADDR_VAR 0 5
6456: PUSH
6457: CALL_OW 44
6461: ST_TO_ADDR
// PlaceUnitArea ( eng , arArea1 , false ) ;
6462: LD_VAR 0 5
6466: PPUSH
6467: LD_INT 13
6469: PPUSH
6470: LD_INT 0
6472: PPUSH
6473: CALL_OW 49
// Wait ( 3 ) ;
6477: LD_INT 3
6479: PPUSH
6480: CALL_OW 67
// AddComEnterUnit ( eng , Delta ) ;
6484: LD_VAR 0 5
6488: PPUSH
6489: LD_EXP 6
6493: PPUSH
6494: CALL_OW 180
// end ; if force then
6498: LD_VAR 0 8
6502: IFFALSE 6514
// ar_forces := force ;
6504: LD_ADDR_EXP 27
6508: PUSH
6509: LD_VAR 0 8
6513: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
6514: LD_INT 35
6516: PPUSH
6517: CALL_OW 67
// if eng then
6521: LD_VAR 0 5
6525: IFFALSE 6579
// if GetSide ( Delta ) = 2 and IsOk ( eng ) and not IsInUnit ( eng ) then
6527: LD_EXP 6
6531: PPUSH
6532: CALL_OW 255
6536: PUSH
6537: LD_INT 2
6539: EQUAL
6540: PUSH
6541: LD_VAR 0 5
6545: PPUSH
6546: CALL_OW 302
6550: AND
6551: PUSH
6552: LD_VAR 0 5
6556: PPUSH
6557: CALL_OW 310
6561: NOT
6562: AND
6563: IFFALSE 6579
// ComEnterUnit ( eng , Delta ) ;
6565: LD_VAR 0 5
6569: PPUSH
6570: LD_EXP 6
6574: PPUSH
6575: CALL_OW 120
// until FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) = 0 ;
6579: LD_INT 22
6581: PUSH
6582: LD_INT 2
6584: PUSH
6585: EMPTY
6586: LIST
6587: LIST
6588: PUSH
6589: LD_INT 21
6591: PUSH
6592: LD_INT 1
6594: PUSH
6595: EMPTY
6596: LIST
6597: LIST
6598: PUSH
6599: EMPTY
6600: LIST
6601: LIST
6602: PPUSH
6603: CALL_OW 69
6607: PUSH
6608: LD_INT 0
6610: EQUAL
6611: IFFALSE 6514
// Wait ( 2 2$00 ) ;
6613: LD_INT 4200
6615: PPUSH
6616: CALL_OW 67
// ap_killers := PrepareArabianTroops ( [ 1 , 2 , 2 , 2 ] [ Difficulty ] , skill , arArea1 ) ;
6620: LD_ADDR_EXP 28
6624: PUSH
6625: LD_INT 1
6627: PUSH
6628: LD_INT 2
6630: PUSH
6631: LD_INT 2
6633: PUSH
6634: LD_INT 2
6636: PUSH
6637: EMPTY
6638: LIST
6639: LIST
6640: LIST
6641: LIST
6642: PUSH
6643: LD_OWVAR 67
6647: ARRAY
6648: PPUSH
6649: LD_VAR 0 4
6653: PPUSH
6654: LD_INT 13
6656: PPUSH
6657: CALL 5681 0 3
6661: ST_TO_ADDR
// Wait ( timer * 2 ) ;
6662: LD_VAR 0 2
6666: PUSH
6667: LD_INT 2
6669: MUL
6670: PPUSH
6671: CALL_OW 67
// ar_forces := PrepareArabianTroops ( [ 5 , 6 , 7 , 8 ] [ Difficulty ] , skill , arArea1 ) ^ PrepareArabianTroops ( [ 3 , 4 , 4 , 4 ] [ Difficulty ] , skill , arArea2 ) ;
6675: LD_ADDR_EXP 27
6679: PUSH
6680: LD_INT 5
6682: PUSH
6683: LD_INT 6
6685: PUSH
6686: LD_INT 7
6688: PUSH
6689: LD_INT 8
6691: PUSH
6692: EMPTY
6693: LIST
6694: LIST
6695: LIST
6696: LIST
6697: PUSH
6698: LD_OWVAR 67
6702: ARRAY
6703: PPUSH
6704: LD_VAR 0 4
6708: PPUSH
6709: LD_INT 13
6711: PPUSH
6712: CALL 5681 0 3
6716: PUSH
6717: LD_INT 3
6719: PUSH
6720: LD_INT 4
6722: PUSH
6723: LD_INT 4
6725: PUSH
6726: LD_INT 4
6728: PUSH
6729: EMPTY
6730: LIST
6731: LIST
6732: LIST
6733: LIST
6734: PUSH
6735: LD_OWVAR 67
6739: ARRAY
6740: PPUSH
6741: LD_VAR 0 4
6745: PPUSH
6746: LD_INT 14
6748: PPUSH
6749: CALL 5681 0 3
6753: ADD
6754: ST_TO_ADDR
// end ;
6755: PPOPN 8
6757: END
// every 0 0$03 trigger ar_forces do var i , target ;
6758: LD_EXP 27
6762: IFFALSE 6960
6764: GO 6766
6766: DISABLE
6767: LD_INT 0
6769: PPUSH
6770: PPUSH
// begin enable ;
6771: ENABLE
// if not ar_forces then
6772: LD_EXP 27
6776: NOT
6777: IFFALSE 6781
// exit ;
6779: GO 6960
// if Delta then
6781: LD_EXP 6
6785: IFFALSE 6799
// target := Delta else
6787: LD_ADDR_VAR 0 2
6791: PUSH
6792: LD_EXP 6
6796: ST_TO_ADDR
6797: GO 6809
// target := JMM ;
6799: LD_ADDR_VAR 0 2
6803: PUSH
6804: LD_EXP 16
6808: ST_TO_ADDR
// for i in ar_forces do
6809: LD_ADDR_VAR 0 1
6813: PUSH
6814: LD_EXP 27
6818: PUSH
6819: FOR_IN
6820: IFFALSE 6958
// begin if i in FilterAllUnits ( [ f_driving ] ) then
6822: LD_VAR 0 1
6826: PUSH
6827: LD_INT 55
6829: PUSH
6830: EMPTY
6831: LIST
6832: PPUSH
6833: CALL_OW 69
6837: IN
6838: IFFALSE 6881
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , IsInUnit ( i ) ) ) else
6840: LD_VAR 0 1
6844: PPUSH
6845: LD_INT 22
6847: PUSH
6848: LD_INT 1
6850: PUSH
6851: EMPTY
6852: LIST
6853: LIST
6854: PPUSH
6855: CALL_OW 69
6859: PPUSH
6860: LD_VAR 0 1
6864: PPUSH
6865: CALL_OW 310
6869: PPUSH
6870: CALL_OW 74
6874: PPUSH
6875: CALL_OW 115
6879: GO 6956
// if GetDistUnits ( i , target ) > 30 then
6881: LD_VAR 0 1
6885: PPUSH
6886: LD_VAR 0 2
6890: PPUSH
6891: CALL_OW 296
6895: PUSH
6896: LD_INT 30
6898: GREATER
6899: IFFALSE 6932
// ComAgressiveMove ( i , GetX ( target ) , GetY ( target ) ) else
6901: LD_VAR 0 1
6905: PPUSH
6906: LD_VAR 0 2
6910: PPUSH
6911: CALL_OW 250
6915: PPUSH
6916: LD_VAR 0 2
6920: PPUSH
6921: CALL_OW 251
6925: PPUSH
6926: CALL_OW 114
6930: GO 6956
// Attack ( i , FilterAllUnits ( [ f_enemy , 2 ] ) ) ;
6932: LD_VAR 0 1
6936: PPUSH
6937: LD_INT 81
6939: PUSH
6940: LD_INT 2
6942: PUSH
6943: EMPTY
6944: LIST
6945: LIST
6946: PPUSH
6947: CALL_OW 69
6951: PPUSH
6952: CALL 736 0 2
// end ;
6956: GO 6819
6958: POP
6959: POP
// end ;
6960: PPOPN 2
6962: END
// every 0 0$01 trigger ap_killers do var filter , i , target ;
6963: LD_EXP 28
6967: IFFALSE 7127
6969: GO 6971
6971: DISABLE
6972: LD_INT 0
6974: PPUSH
6975: PPUSH
6976: PPUSH
// begin enable ;
6977: ENABLE
// filter := FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) ;
6978: LD_ADDR_VAR 0 1
6982: PUSH
6983: LD_INT 22
6985: PUSH
6986: LD_INT 0
6988: PUSH
6989: EMPTY
6990: LIST
6991: LIST
6992: PUSH
6993: LD_INT 25
6995: PUSH
6996: LD_INT 12
6998: PUSH
6999: EMPTY
7000: LIST
7001: LIST
7002: PUSH
7003: EMPTY
7004: LIST
7005: LIST
7006: PPUSH
7007: CALL_OW 69
7011: ST_TO_ADDR
// if not filter then
7012: LD_VAR 0 1
7016: NOT
7017: IFFALSE 7044
// begin ar_forces := ar_forces ^ ap_killers ;
7019: LD_ADDR_EXP 27
7023: PUSH
7024: LD_EXP 27
7028: PUSH
7029: LD_EXP 28
7033: ADD
7034: ST_TO_ADDR
// ap_killers := [ ] ;
7035: LD_ADDR_EXP 28
7039: PUSH
7040: EMPTY
7041: ST_TO_ADDR
// exit ;
7042: GO 7127
// end ; for i in ap_killers do
7044: LD_ADDR_VAR 0 2
7048: PUSH
7049: LD_EXP 28
7053: PUSH
7054: FOR_IN
7055: IFFALSE 7125
// begin if not IsOk ( i ) then
7057: LD_VAR 0 2
7061: PPUSH
7062: CALL_OW 302
7066: NOT
7067: IFFALSE 7071
// continue ;
7069: GO 7054
// if not HasTask ( i ) then
7071: LD_VAR 0 2
7075: PPUSH
7076: CALL_OW 314
7080: NOT
7081: IFFALSE 7103
// target := NearestUnitToUnit ( filter , i ) ;
7083: LD_ADDR_VAR 0 3
7087: PUSH
7088: LD_VAR 0 1
7092: PPUSH
7093: LD_VAR 0 2
7097: PPUSH
7098: CALL_OW 74
7102: ST_TO_ADDR
// if target then
7103: LD_VAR 0 3
7107: IFFALSE 7123
// ComAttackUnit ( i , target ) ;
7109: LD_VAR 0 2
7113: PPUSH
7114: LD_VAR 0 3
7118: PPUSH
7119: CALL_OW 115
// end ;
7123: GO 7054
7125: POP
7126: POP
// end ; end_of_file
7127: PPOPN 3
7129: END
// every 0 0$40 + 0 0$2 trigger Delta do var i , counter , cr ;
7130: LD_EXP 6
7134: IFFALSE 7270
7136: GO 7138
7138: DISABLE
7139: LD_INT 0
7141: PPUSH
7142: PPUSH
7143: PPUSH
// begin counter := [ 300 , 250 , 220 , 210 ] [ Difficulty ] ;
7144: LD_ADDR_VAR 0 2
7148: PUSH
7149: LD_INT 300
7151: PUSH
7152: LD_INT 250
7154: PUSH
7155: LD_INT 220
7157: PUSH
7158: LD_INT 210
7160: PUSH
7161: EMPTY
7162: LIST
7163: LIST
7164: LIST
7165: LIST
7166: PUSH
7167: LD_OWVAR 67
7171: ARRAY
7172: ST_TO_ADDR
// CreateCratesArea ( Rand ( 1 , 3 ) , cratesArea , true ) ;
7173: LD_INT 1
7175: PPUSH
7176: LD_INT 3
7178: PPUSH
7179: CALL_OW 12
7183: PPUSH
7184: LD_INT 7
7186: PPUSH
7187: LD_INT 1
7189: PPUSH
7190: CALL_OW 55
// repeat wait ( rand ( 1 1$30 , 2 2$20 ) ) ;
7194: LD_INT 3150
7196: PPUSH
7197: LD_INT 4900
7199: PPUSH
7200: CALL_OW 12
7204: PPUSH
7205: CALL_OW 67
// cr := rand ( 1 , 5 ) ;
7209: LD_ADDR_VAR 0 3
7213: PUSH
7214: LD_INT 1
7216: PPUSH
7217: LD_INT 5
7219: PPUSH
7220: CALL_OW 12
7224: ST_TO_ADDR
// CreateCratesArea ( cr , cratesArea , true ) ;
7225: LD_VAR 0 3
7229: PPUSH
7230: LD_INT 7
7232: PPUSH
7233: LD_INT 1
7235: PPUSH
7236: CALL_OW 55
// counter := counter - cr * 10 ;
7240: LD_ADDR_VAR 0 2
7244: PUSH
7245: LD_VAR 0 2
7249: PUSH
7250: LD_VAR 0 3
7254: PUSH
7255: LD_INT 10
7257: MUL
7258: MINUS
7259: ST_TO_ADDR
// until counter <= 0 ;
7260: LD_VAR 0 2
7264: PUSH
7265: LD_INT 0
7267: LESSEQUAL
7268: IFFALSE 7194
// end ;
7270: PPOPN 3
7272: END
// every 0 0$03 trigger not Delta do var i ;
7273: LD_EXP 6
7277: NOT
7278: IFFALSE 7348
7280: GO 7282
7282: DISABLE
7283: LD_INT 0
7285: PPUSH
// begin for i = 1 to 5 - Difficulty do
7286: LD_ADDR_VAR 0 1
7290: PUSH
7291: DOUBLE
7292: LD_INT 1
7294: DEC
7295: ST_TO_ADDR
7296: LD_INT 5
7298: PUSH
7299: LD_OWVAR 67
7303: MINUS
7304: PUSH
7305: FOR_TO
7306: IFFALSE 7346
// begin CreateCratesArea ( rand ( 2 , 5 ) , deltaMainArea , true ) ;
7308: LD_INT 2
7310: PPUSH
7311: LD_INT 5
7313: PPUSH
7314: CALL_OW 12
7318: PPUSH
7319: LD_INT 8
7321: PPUSH
7322: LD_INT 1
7324: PPUSH
7325: CALL_OW 55
// Wait ( rand ( 0 0$16 , 0 0$39 ) ) ;
7329: LD_INT 560
7331: PPUSH
7332: LD_INT 1365
7334: PPUSH
7335: CALL_OW 12
7339: PPUSH
7340: CALL_OW 67
// end ;
7344: GO 7305
7346: POP
7347: POP
// end ;
7348: PPOPN 1
7350: END
// every 3 3$00 trigger tick < 15 15$00 do
7351: LD_OWVAR 1
7355: PUSH
7356: LD_INT 31500
7358: LESS
7359: IFFALSE 7419
7361: GO 7363
7363: DISABLE
// begin enable ;
7364: ENABLE
// CreateCratesAnyWhere ( rand ( 1 , 3 ) , true ) ;
7365: LD_INT 1
7367: PPUSH
7368: LD_INT 3
7370: PPUSH
7371: CALL_OW 12
7375: PPUSH
7376: LD_INT 1
7378: PPUSH
7379: CALL_OW 57
// Wait ( rand ( 0 0$38 , 0 0$59 ) ) ;
7383: LD_INT 1330
7385: PPUSH
7386: LD_INT 2065
7388: PPUSH
7389: CALL_OW 12
7393: PPUSH
7394: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 4 ) , riverArea , true ) ;
7398: LD_INT 1
7400: PPUSH
7401: LD_INT 4
7403: PPUSH
7404: CALL_OW 12
7408: PPUSH
7409: LD_INT 15
7411: PPUSH
7412: LD_INT 1
7414: PPUSH
7415: CALL_OW 55
// end ; end_of_file
7419: END
// on UnitDestroyed ( un ) do begin if un = JMM then
7420: LD_VAR 0 1
7424: PUSH
7425: LD_EXP 16
7429: EQUAL
7430: IFFALSE 7439
// YouLost ( JMM ) ;
7432: LD_STRING JMM
7434: PPUSH
7435: CALL_OW 104
// if un = Delta then
7439: LD_VAR 0 1
7443: PUSH
7444: LD_EXP 6
7448: EQUAL
7449: IFFALSE 7472
// begin Delta := 0 ;
7451: LD_ADDR_EXP 6
7455: PUSH
7456: LD_INT 0
7458: ST_TO_ADDR
// SetRestrict ( b_depot , 1 , true ) ;
7459: LD_INT 0
7461: PPUSH
7462: LD_INT 1
7464: PPUSH
7465: LD_INT 1
7467: PPUSH
7468: CALL_OW 324
// end ; if un in ar_forces then
7472: LD_VAR 0 1
7476: PUSH
7477: LD_EXP 27
7481: IN
7482: IFFALSE 7500
// ar_forces := ar_forces diff un ;
7484: LD_ADDR_EXP 27
7488: PUSH
7489: LD_EXP 27
7493: PUSH
7494: LD_VAR 0 1
7498: DIFF
7499: ST_TO_ADDR
// if un in ap_killers then
7500: LD_VAR 0 1
7504: PUSH
7505: LD_EXP 28
7509: IN
7510: IFFALSE 7528
// ap_killers := ap_killers diff un ;
7512: LD_ADDR_EXP 28
7516: PUSH
7517: LD_EXP 28
7521: PUSH
7522: LD_VAR 0 1
7526: DIFF
7527: ST_TO_ADDR
// if un in FilterAllUnits ( [ f_or , [ f_class , class_apeman ] , [ f_class , class_apeman_engineer ] ] ) then
7528: LD_VAR 0 1
7532: PUSH
7533: LD_INT 2
7535: PUSH
7536: LD_INT 25
7538: PUSH
7539: LD_INT 12
7541: PUSH
7542: EMPTY
7543: LIST
7544: LIST
7545: PUSH
7546: LD_INT 25
7548: PUSH
7549: LD_INT 16
7551: PUSH
7552: EMPTY
7553: LIST
7554: LIST
7555: PUSH
7556: EMPTY
7557: LIST
7558: LIST
7559: LIST
7560: PPUSH
7561: CALL_OW 69
7565: IN
7566: IFFALSE 7582
// apeKillCounter := apeKillCounter + 1 ;
7568: LD_ADDR_EXP 15
7572: PUSH
7573: LD_EXP 15
7577: PUSH
7578: LD_INT 1
7580: PLUS
7581: ST_TO_ADDR
// end ;
7582: PPOPN 1
7584: END
// on Contact ( s1 , s2 ) do if s1 = 1 and s2 = 2 and not arab_spotted then
7585: LD_VAR 0 1
7589: PUSH
7590: LD_INT 1
7592: EQUAL
7593: PUSH
7594: LD_VAR 0 2
7598: PUSH
7599: LD_INT 2
7601: EQUAL
7602: AND
7603: PUSH
7604: LD_EXP 13
7608: NOT
7609: AND
7610: IFFALSE 7620
// arab_spotted := true ;
7612: LD_ADDR_EXP 13
7616: PUSH
7617: LD_INT 1
7619: ST_TO_ADDR
7620: PPOPN 2
7622: END
// on EndTheMissionRaised ( p ) do begin end_the_mission_allowed := false ;
7623: LD_ADDR_OWVAR 57
7627: PUSH
7628: LD_INT 0
7630: ST_TO_ADDR
// end_mission := true ;
7631: LD_ADDR_EXP 14
7635: PUSH
7636: LD_INT 1
7638: ST_TO_ADDR
// end ;
7639: PPOPN 1
7641: END
// on ApemanTamed ( apeman , sci ) do begin if GetSide ( sci ) = 1 then
7642: LD_VAR 0 2
7646: PPUSH
7647: CALL_OW 255
7651: PUSH
7652: LD_INT 1
7654: EQUAL
7655: IFFALSE 7671
// apeman_counter := apeman_counter + 1 ;
7657: LD_ADDR_EXP 12
7661: PUSH
7662: LD_EXP 12
7666: PUSH
7667: LD_INT 1
7669: PLUS
7670: ST_TO_ADDR
// if not first_apeman_tamed then
7671: LD_EXP 8
7675: NOT
7676: IFFALSE 7876
// begin first_apeman_tamed := true ;
7678: LD_ADDR_EXP 8
7682: PUSH
7683: LD_INT 1
7685: ST_TO_ADDR
// if sci = Gladstone then
7686: LD_VAR 0 2
7690: PUSH
7691: LD_EXP 17
7695: EQUAL
7696: IFFALSE 7710
// Say ( Gladstone , D7b-Glad-1 ) ;
7698: LD_EXP 17
7702: PPUSH
7703: LD_STRING D7b-Glad-1
7705: PPUSH
7706: CALL_OW 88
// if sci = Denis then
7710: LD_VAR 0 2
7714: PUSH
7715: LD_EXP 19
7719: EQUAL
7720: IFFALSE 7734
// Say ( Denis , D7a-Den-1 ) ;
7722: LD_EXP 19
7726: PPUSH
7727: LD_STRING D7a-Den-1
7729: PPUSH
7730: CALL_OW 88
// if not sci in [ JMM , Gladstone , Denis , Lisa , Frank , Bobby , Cyrus , Donaldson ] then
7734: LD_VAR 0 2
7738: PUSH
7739: LD_EXP 16
7743: PUSH
7744: LD_EXP 17
7748: PUSH
7749: LD_EXP 19
7753: PUSH
7754: LD_EXP 22
7758: PUSH
7759: LD_EXP 23
7763: PUSH
7764: LD_EXP 24
7768: PUSH
7769: LD_EXP 25
7773: PUSH
7774: LD_EXP 21
7778: PUSH
7779: EMPTY
7780: LIST
7781: LIST
7782: LIST
7783: LIST
7784: LIST
7785: LIST
7786: LIST
7787: LIST
7788: IN
7789: NOT
7790: IFFALSE 7833
// begin if GetSex ( sci ) = sex_male then
7792: LD_VAR 0 2
7796: PPUSH
7797: CALL_OW 258
7801: PUSH
7802: LD_INT 1
7804: EQUAL
7805: IFFALSE 7821
// Say ( sci , D7c-Sci1-1 ) else
7807: LD_VAR 0 2
7811: PPUSH
7812: LD_STRING D7c-Sci1-1
7814: PPUSH
7815: CALL_OW 88
7819: GO 7833
// Say ( sci , D7c-FSci1-1 ) ;
7821: LD_VAR 0 2
7825: PPUSH
7826: LD_STRING D7c-FSci1-1
7828: PPUSH
7829: CALL_OW 88
// end ; if not sci = Gladstone then
7833: LD_VAR 0 2
7837: PUSH
7838: LD_EXP 17
7842: EQUAL
7843: NOT
7844: IFFALSE 7858
// Say ( Gladstone , D7c-Glad-1 ) ;
7846: LD_EXP 17
7850: PPUSH
7851: LD_STRING D7c-Glad-1
7853: PPUSH
7854: CALL_OW 88
// if Lisa then
7858: LD_EXP 22
7862: IFFALSE 7876
// Say ( Lisa , D8-Lisa-1 ) ;
7864: LD_EXP 22
7868: PPUSH
7869: LD_STRING D8-Lisa-1
7871: PPUSH
7872: CALL_OW 88
// end ; end ; end_of_file
7876: PPOPN 2
7878: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
7879: LD_INT 0
7881: PPUSH
// ar_miner := 81 ;
7882: LD_ADDR_EXP 36
7886: PUSH
7887: LD_INT 81
7889: ST_TO_ADDR
// ar_crane := 88 ;
7890: LD_ADDR_EXP 35
7894: PUSH
7895: LD_INT 88
7897: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
7898: LD_ADDR_EXP 30
7902: PUSH
7903: LD_INT 89
7905: ST_TO_ADDR
// us_hack := 99 ;
7906: LD_ADDR_EXP 31
7910: PUSH
7911: LD_INT 99
7913: ST_TO_ADDR
// us_artillery := 97 ;
7914: LD_ADDR_EXP 32
7918: PUSH
7919: LD_INT 97
7921: ST_TO_ADDR
// ar_bio_bomb := 91 ;
7922: LD_ADDR_EXP 33
7926: PUSH
7927: LD_INT 91
7929: ST_TO_ADDR
// ar_mortar := 92 ;
7930: LD_ADDR_EXP 34
7934: PUSH
7935: LD_INT 92
7937: ST_TO_ADDR
// ru_radar := 98 ;
7938: LD_ADDR_EXP 29
7942: PUSH
7943: LD_INT 98
7945: ST_TO_ADDR
// tech_Artillery := 80 ;
7946: LD_ADDR_EXP 37
7950: PUSH
7951: LD_INT 80
7953: ST_TO_ADDR
// tech_RadMat := 81 ;
7954: LD_ADDR_EXP 38
7958: PUSH
7959: LD_INT 81
7961: ST_TO_ADDR
// tech_BasicTools := 82 ;
7962: LD_ADDR_EXP 39
7966: PUSH
7967: LD_INT 82
7969: ST_TO_ADDR
// tech_Cargo := 83 ;
7970: LD_ADDR_EXP 40
7974: PUSH
7975: LD_INT 83
7977: ST_TO_ADDR
// tech_Track := 84 ;
7978: LD_ADDR_EXP 41
7982: PUSH
7983: LD_INT 84
7985: ST_TO_ADDR
// tech_Crane := 85 ;
7986: LD_ADDR_EXP 42
7990: PUSH
7991: LD_INT 85
7993: ST_TO_ADDR
// tech_Bulldozer := 86 ;
7994: LD_ADDR_EXP 43
7998: PUSH
7999: LD_INT 86
8001: ST_TO_ADDR
// tech_Hovercraft := 87 ;
8002: LD_ADDR_EXP 44
8006: PUSH
8007: LD_INT 87
8009: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
8010: LD_ADDR_EXP 45
8014: PUSH
8015: LD_INT 88
8017: ST_TO_ADDR
// class_mastodont := 31 ;
8018: LD_ADDR_EXP 46
8022: PUSH
8023: LD_INT 31
8025: ST_TO_ADDR
// class_horse := 21 ;
8026: LD_ADDR_EXP 47
8030: PUSH
8031: LD_INT 21
8033: ST_TO_ADDR
// end ;
8034: LD_VAR 0 1
8038: RET
// every 1 do
8039: GO 8041
8041: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
8042: CALL 7879 0 0
8046: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
8047: LD_INT 0
8049: PPUSH
// if p2 = 100 then
8050: LD_VAR 0 2
8054: PUSH
8055: LD_INT 100
8057: EQUAL
8058: IFFALSE 9061
// begin if not StreamModeActive then
8060: LD_EXP 48
8064: NOT
8065: IFFALSE 8075
// StreamModeActive := true ;
8067: LD_ADDR_EXP 48
8071: PUSH
8072: LD_INT 1
8074: ST_TO_ADDR
// if p3 = 0 then
8075: LD_VAR 0 3
8079: PUSH
8080: LD_INT 0
8082: EQUAL
8083: IFFALSE 8089
// InitStreamMode ;
8085: CALL 9221 0 0
// if p3 = 1 then
8089: LD_VAR 0 3
8093: PUSH
8094: LD_INT 1
8096: EQUAL
8097: IFFALSE 8107
// sRocket := true ;
8099: LD_ADDR_EXP 53
8103: PUSH
8104: LD_INT 1
8106: ST_TO_ADDR
// if p3 = 2 then
8107: LD_VAR 0 3
8111: PUSH
8112: LD_INT 2
8114: EQUAL
8115: IFFALSE 8125
// sSpeed := true ;
8117: LD_ADDR_EXP 52
8121: PUSH
8122: LD_INT 1
8124: ST_TO_ADDR
// if p3 = 3 then
8125: LD_VAR 0 3
8129: PUSH
8130: LD_INT 3
8132: EQUAL
8133: IFFALSE 8143
// sEngine := true ;
8135: LD_ADDR_EXP 54
8139: PUSH
8140: LD_INT 1
8142: ST_TO_ADDR
// if p3 = 4 then
8143: LD_VAR 0 3
8147: PUSH
8148: LD_INT 4
8150: EQUAL
8151: IFFALSE 8161
// sSpec := true ;
8153: LD_ADDR_EXP 51
8157: PUSH
8158: LD_INT 1
8160: ST_TO_ADDR
// if p3 = 5 then
8161: LD_VAR 0 3
8165: PUSH
8166: LD_INT 5
8168: EQUAL
8169: IFFALSE 8179
// sLevel := true ;
8171: LD_ADDR_EXP 55
8175: PUSH
8176: LD_INT 1
8178: ST_TO_ADDR
// if p3 = 6 then
8179: LD_VAR 0 3
8183: PUSH
8184: LD_INT 6
8186: EQUAL
8187: IFFALSE 8197
// sArmoury := true ;
8189: LD_ADDR_EXP 56
8193: PUSH
8194: LD_INT 1
8196: ST_TO_ADDR
// if p3 = 7 then
8197: LD_VAR 0 3
8201: PUSH
8202: LD_INT 7
8204: EQUAL
8205: IFFALSE 8215
// sRadar := true ;
8207: LD_ADDR_EXP 57
8211: PUSH
8212: LD_INT 1
8214: ST_TO_ADDR
// if p3 = 8 then
8215: LD_VAR 0 3
8219: PUSH
8220: LD_INT 8
8222: EQUAL
8223: IFFALSE 8233
// sBunker := true ;
8225: LD_ADDR_EXP 58
8229: PUSH
8230: LD_INT 1
8232: ST_TO_ADDR
// if p3 = 9 then
8233: LD_VAR 0 3
8237: PUSH
8238: LD_INT 9
8240: EQUAL
8241: IFFALSE 8251
// sHack := true ;
8243: LD_ADDR_EXP 59
8247: PUSH
8248: LD_INT 1
8250: ST_TO_ADDR
// if p3 = 10 then
8251: LD_VAR 0 3
8255: PUSH
8256: LD_INT 10
8258: EQUAL
8259: IFFALSE 8269
// sFire := true ;
8261: LD_ADDR_EXP 60
8265: PUSH
8266: LD_INT 1
8268: ST_TO_ADDR
// if p3 = 11 then
8269: LD_VAR 0 3
8273: PUSH
8274: LD_INT 11
8276: EQUAL
8277: IFFALSE 8287
// sRefresh := true ;
8279: LD_ADDR_EXP 61
8283: PUSH
8284: LD_INT 1
8286: ST_TO_ADDR
// if p3 = 12 then
8287: LD_VAR 0 3
8291: PUSH
8292: LD_INT 12
8294: EQUAL
8295: IFFALSE 8305
// sExp := true ;
8297: LD_ADDR_EXP 62
8301: PUSH
8302: LD_INT 1
8304: ST_TO_ADDR
// if p3 = 13 then
8305: LD_VAR 0 3
8309: PUSH
8310: LD_INT 13
8312: EQUAL
8313: IFFALSE 8323
// sDepot := true ;
8315: LD_ADDR_EXP 63
8319: PUSH
8320: LD_INT 1
8322: ST_TO_ADDR
// if p3 = 14 then
8323: LD_VAR 0 3
8327: PUSH
8328: LD_INT 14
8330: EQUAL
8331: IFFALSE 8341
// sFlag := true ;
8333: LD_ADDR_EXP 64
8337: PUSH
8338: LD_INT 1
8340: ST_TO_ADDR
// if p3 = 15 then
8341: LD_VAR 0 3
8345: PUSH
8346: LD_INT 15
8348: EQUAL
8349: IFFALSE 8359
// sKamikadze := true ;
8351: LD_ADDR_EXP 72
8355: PUSH
8356: LD_INT 1
8358: ST_TO_ADDR
// if p3 = 16 then
8359: LD_VAR 0 3
8363: PUSH
8364: LD_INT 16
8366: EQUAL
8367: IFFALSE 8377
// sTroll := true ;
8369: LD_ADDR_EXP 73
8373: PUSH
8374: LD_INT 1
8376: ST_TO_ADDR
// if p3 = 17 then
8377: LD_VAR 0 3
8381: PUSH
8382: LD_INT 17
8384: EQUAL
8385: IFFALSE 8395
// sSlow := true ;
8387: LD_ADDR_EXP 74
8391: PUSH
8392: LD_INT 1
8394: ST_TO_ADDR
// if p3 = 18 then
8395: LD_VAR 0 3
8399: PUSH
8400: LD_INT 18
8402: EQUAL
8403: IFFALSE 8413
// sLack := true ;
8405: LD_ADDR_EXP 75
8409: PUSH
8410: LD_INT 1
8412: ST_TO_ADDR
// if p3 = 19 then
8413: LD_VAR 0 3
8417: PUSH
8418: LD_INT 19
8420: EQUAL
8421: IFFALSE 8431
// sTank := true ;
8423: LD_ADDR_EXP 77
8427: PUSH
8428: LD_INT 1
8430: ST_TO_ADDR
// if p3 = 20 then
8431: LD_VAR 0 3
8435: PUSH
8436: LD_INT 20
8438: EQUAL
8439: IFFALSE 8449
// sRemote := true ;
8441: LD_ADDR_EXP 78
8445: PUSH
8446: LD_INT 1
8448: ST_TO_ADDR
// if p3 = 21 then
8449: LD_VAR 0 3
8453: PUSH
8454: LD_INT 21
8456: EQUAL
8457: IFFALSE 8467
// sPowell := true ;
8459: LD_ADDR_EXP 79
8463: PUSH
8464: LD_INT 1
8466: ST_TO_ADDR
// if p3 = 22 then
8467: LD_VAR 0 3
8471: PUSH
8472: LD_INT 22
8474: EQUAL
8475: IFFALSE 8485
// sTeleport := true ;
8477: LD_ADDR_EXP 82
8481: PUSH
8482: LD_INT 1
8484: ST_TO_ADDR
// if p3 = 23 then
8485: LD_VAR 0 3
8489: PUSH
8490: LD_INT 23
8492: EQUAL
8493: IFFALSE 8503
// sOilTower := true ;
8495: LD_ADDR_EXP 84
8499: PUSH
8500: LD_INT 1
8502: ST_TO_ADDR
// if p3 = 24 then
8503: LD_VAR 0 3
8507: PUSH
8508: LD_INT 24
8510: EQUAL
8511: IFFALSE 8521
// sShovel := true ;
8513: LD_ADDR_EXP 85
8517: PUSH
8518: LD_INT 1
8520: ST_TO_ADDR
// if p3 = 25 then
8521: LD_VAR 0 3
8525: PUSH
8526: LD_INT 25
8528: EQUAL
8529: IFFALSE 8539
// sSheik := true ;
8531: LD_ADDR_EXP 86
8535: PUSH
8536: LD_INT 1
8538: ST_TO_ADDR
// if p3 = 26 then
8539: LD_VAR 0 3
8543: PUSH
8544: LD_INT 26
8546: EQUAL
8547: IFFALSE 8557
// sEarthquake := true ;
8549: LD_ADDR_EXP 88
8553: PUSH
8554: LD_INT 1
8556: ST_TO_ADDR
// if p3 = 27 then
8557: LD_VAR 0 3
8561: PUSH
8562: LD_INT 27
8564: EQUAL
8565: IFFALSE 8575
// sAI := true ;
8567: LD_ADDR_EXP 89
8571: PUSH
8572: LD_INT 1
8574: ST_TO_ADDR
// if p3 = 28 then
8575: LD_VAR 0 3
8579: PUSH
8580: LD_INT 28
8582: EQUAL
8583: IFFALSE 8593
// sCargo := true ;
8585: LD_ADDR_EXP 92
8589: PUSH
8590: LD_INT 1
8592: ST_TO_ADDR
// if p3 = 29 then
8593: LD_VAR 0 3
8597: PUSH
8598: LD_INT 29
8600: EQUAL
8601: IFFALSE 8611
// sDLaser := true ;
8603: LD_ADDR_EXP 93
8607: PUSH
8608: LD_INT 1
8610: ST_TO_ADDR
// if p3 = 30 then
8611: LD_VAR 0 3
8615: PUSH
8616: LD_INT 30
8618: EQUAL
8619: IFFALSE 8629
// sExchange := true ;
8621: LD_ADDR_EXP 94
8625: PUSH
8626: LD_INT 1
8628: ST_TO_ADDR
// if p3 = 31 then
8629: LD_VAR 0 3
8633: PUSH
8634: LD_INT 31
8636: EQUAL
8637: IFFALSE 8647
// sFac := true ;
8639: LD_ADDR_EXP 95
8643: PUSH
8644: LD_INT 1
8646: ST_TO_ADDR
// if p3 = 32 then
8647: LD_VAR 0 3
8651: PUSH
8652: LD_INT 32
8654: EQUAL
8655: IFFALSE 8665
// sPower := true ;
8657: LD_ADDR_EXP 96
8661: PUSH
8662: LD_INT 1
8664: ST_TO_ADDR
// if p3 = 33 then
8665: LD_VAR 0 3
8669: PUSH
8670: LD_INT 33
8672: EQUAL
8673: IFFALSE 8683
// sRandom := true ;
8675: LD_ADDR_EXP 97
8679: PUSH
8680: LD_INT 1
8682: ST_TO_ADDR
// if p3 = 34 then
8683: LD_VAR 0 3
8687: PUSH
8688: LD_INT 34
8690: EQUAL
8691: IFFALSE 8701
// sShield := true ;
8693: LD_ADDR_EXP 98
8697: PUSH
8698: LD_INT 1
8700: ST_TO_ADDR
// if p3 = 35 then
8701: LD_VAR 0 3
8705: PUSH
8706: LD_INT 35
8708: EQUAL
8709: IFFALSE 8719
// sTime := true ;
8711: LD_ADDR_EXP 99
8715: PUSH
8716: LD_INT 1
8718: ST_TO_ADDR
// if p3 = 36 then
8719: LD_VAR 0 3
8723: PUSH
8724: LD_INT 36
8726: EQUAL
8727: IFFALSE 8737
// sTools := true ;
8729: LD_ADDR_EXP 100
8733: PUSH
8734: LD_INT 1
8736: ST_TO_ADDR
// if p3 = 101 then
8737: LD_VAR 0 3
8741: PUSH
8742: LD_INT 101
8744: EQUAL
8745: IFFALSE 8755
// sSold := true ;
8747: LD_ADDR_EXP 65
8751: PUSH
8752: LD_INT 1
8754: ST_TO_ADDR
// if p3 = 102 then
8755: LD_VAR 0 3
8759: PUSH
8760: LD_INT 102
8762: EQUAL
8763: IFFALSE 8773
// sDiff := true ;
8765: LD_ADDR_EXP 66
8769: PUSH
8770: LD_INT 1
8772: ST_TO_ADDR
// if p3 = 103 then
8773: LD_VAR 0 3
8777: PUSH
8778: LD_INT 103
8780: EQUAL
8781: IFFALSE 8791
// sFog := true ;
8783: LD_ADDR_EXP 69
8787: PUSH
8788: LD_INT 1
8790: ST_TO_ADDR
// if p3 = 104 then
8791: LD_VAR 0 3
8795: PUSH
8796: LD_INT 104
8798: EQUAL
8799: IFFALSE 8809
// sReset := true ;
8801: LD_ADDR_EXP 70
8805: PUSH
8806: LD_INT 1
8808: ST_TO_ADDR
// if p3 = 105 then
8809: LD_VAR 0 3
8813: PUSH
8814: LD_INT 105
8816: EQUAL
8817: IFFALSE 8827
// sSun := true ;
8819: LD_ADDR_EXP 71
8823: PUSH
8824: LD_INT 1
8826: ST_TO_ADDR
// if p3 = 106 then
8827: LD_VAR 0 3
8831: PUSH
8832: LD_INT 106
8834: EQUAL
8835: IFFALSE 8845
// sTiger := true ;
8837: LD_ADDR_EXP 67
8841: PUSH
8842: LD_INT 1
8844: ST_TO_ADDR
// if p3 = 107 then
8845: LD_VAR 0 3
8849: PUSH
8850: LD_INT 107
8852: EQUAL
8853: IFFALSE 8863
// sBomb := true ;
8855: LD_ADDR_EXP 68
8859: PUSH
8860: LD_INT 1
8862: ST_TO_ADDR
// if p3 = 108 then
8863: LD_VAR 0 3
8867: PUSH
8868: LD_INT 108
8870: EQUAL
8871: IFFALSE 8881
// sWound := true ;
8873: LD_ADDR_EXP 76
8877: PUSH
8878: LD_INT 1
8880: ST_TO_ADDR
// if p3 = 109 then
8881: LD_VAR 0 3
8885: PUSH
8886: LD_INT 109
8888: EQUAL
8889: IFFALSE 8899
// sBetray := true ;
8891: LD_ADDR_EXP 80
8895: PUSH
8896: LD_INT 1
8898: ST_TO_ADDR
// if p3 = 110 then
8899: LD_VAR 0 3
8903: PUSH
8904: LD_INT 110
8906: EQUAL
8907: IFFALSE 8917
// sContamin := true ;
8909: LD_ADDR_EXP 81
8913: PUSH
8914: LD_INT 1
8916: ST_TO_ADDR
// if p3 = 111 then
8917: LD_VAR 0 3
8921: PUSH
8922: LD_INT 111
8924: EQUAL
8925: IFFALSE 8935
// sOil := true ;
8927: LD_ADDR_EXP 83
8931: PUSH
8932: LD_INT 1
8934: ST_TO_ADDR
// if p3 = 112 then
8935: LD_VAR 0 3
8939: PUSH
8940: LD_INT 112
8942: EQUAL
8943: IFFALSE 8953
// sStu := true ;
8945: LD_ADDR_EXP 87
8949: PUSH
8950: LD_INT 1
8952: ST_TO_ADDR
// if p3 = 113 then
8953: LD_VAR 0 3
8957: PUSH
8958: LD_INT 113
8960: EQUAL
8961: IFFALSE 8971
// sBazooka := true ;
8963: LD_ADDR_EXP 90
8967: PUSH
8968: LD_INT 1
8970: ST_TO_ADDR
// if p3 = 114 then
8971: LD_VAR 0 3
8975: PUSH
8976: LD_INT 114
8978: EQUAL
8979: IFFALSE 8989
// sMortar := true ;
8981: LD_ADDR_EXP 91
8985: PUSH
8986: LD_INT 1
8988: ST_TO_ADDR
// if p3 = 115 then
8989: LD_VAR 0 3
8993: PUSH
8994: LD_INT 115
8996: EQUAL
8997: IFFALSE 9007
// sRanger := true ;
8999: LD_ADDR_EXP 101
9003: PUSH
9004: LD_INT 1
9006: ST_TO_ADDR
// if p3 = 116 then
9007: LD_VAR 0 3
9011: PUSH
9012: LD_INT 116
9014: EQUAL
9015: IFFALSE 9025
// sComputer := true ;
9017: LD_ADDR_EXP 102
9021: PUSH
9022: LD_INT 1
9024: ST_TO_ADDR
// if p3 = 117 then
9025: LD_VAR 0 3
9029: PUSH
9030: LD_INT 117
9032: EQUAL
9033: IFFALSE 9043
// s30 := true ;
9035: LD_ADDR_EXP 103
9039: PUSH
9040: LD_INT 1
9042: ST_TO_ADDR
// if p3 = 118 then
9043: LD_VAR 0 3
9047: PUSH
9048: LD_INT 118
9050: EQUAL
9051: IFFALSE 9061
// s60 := true ;
9053: LD_ADDR_EXP 104
9057: PUSH
9058: LD_INT 1
9060: ST_TO_ADDR
// end ; if p2 = 101 then
9061: LD_VAR 0 2
9065: PUSH
9066: LD_INT 101
9068: EQUAL
9069: IFFALSE 9197
// begin case p3 of 1 :
9071: LD_VAR 0 3
9075: PUSH
9076: LD_INT 1
9078: DOUBLE
9079: EQUAL
9080: IFTRUE 9084
9082: GO 9091
9084: POP
// hHackUnlimitedResources ; 2 :
9085: CALL 20793 0 0
9089: GO 9197
9091: LD_INT 2
9093: DOUBLE
9094: EQUAL
9095: IFTRUE 9099
9097: GO 9106
9099: POP
// hHackSetLevel10 ; 3 :
9100: CALL 20926 0 0
9104: GO 9197
9106: LD_INT 3
9108: DOUBLE
9109: EQUAL
9110: IFTRUE 9114
9112: GO 9121
9114: POP
// hHackSetLevel10YourUnits ; 4 :
9115: CALL 21011 0 0
9119: GO 9197
9121: LD_INT 4
9123: DOUBLE
9124: EQUAL
9125: IFTRUE 9129
9127: GO 9136
9129: POP
// hHackInvincible ; 5 :
9130: CALL 21459 0 0
9134: GO 9197
9136: LD_INT 5
9138: DOUBLE
9139: EQUAL
9140: IFTRUE 9144
9142: GO 9151
9144: POP
// hHackInvisible ; 6 :
9145: CALL 21570 0 0
9149: GO 9197
9151: LD_INT 6
9153: DOUBLE
9154: EQUAL
9155: IFTRUE 9159
9157: GO 9166
9159: POP
// hHackChangeYourSide ; 7 :
9160: CALL 21627 0 0
9164: GO 9197
9166: LD_INT 7
9168: DOUBLE
9169: EQUAL
9170: IFTRUE 9174
9172: GO 9181
9174: POP
// hHackChangeUnitSide ; 8 :
9175: CALL 21669 0 0
9179: GO 9197
9181: LD_INT 8
9183: DOUBLE
9184: EQUAL
9185: IFTRUE 9189
9187: GO 9196
9189: POP
// hHackFog ; end ;
9190: CALL 21770 0 0
9194: GO 9197
9196: POP
// end ; end ;
9197: LD_VAR 0 7
9201: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
9202: GO 9204
9204: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
9205: LD_STRING initStreamRollete();
9207: PPUSH
9208: CALL_OW 559
// InitStreamMode ;
9212: CALL 9221 0 0
// DefineStreamItems ( ) ;
9216: CALL 9685 0 0
// end ;
9220: END
// function InitStreamMode ; begin
9221: LD_INT 0
9223: PPUSH
// streamModeActive := false ;
9224: LD_ADDR_EXP 48
9228: PUSH
9229: LD_INT 0
9231: ST_TO_ADDR
// normalCounter := 36 ;
9232: LD_ADDR_EXP 49
9236: PUSH
9237: LD_INT 36
9239: ST_TO_ADDR
// hardcoreCounter := 16 ;
9240: LD_ADDR_EXP 50
9244: PUSH
9245: LD_INT 16
9247: ST_TO_ADDR
// sRocket := false ;
9248: LD_ADDR_EXP 53
9252: PUSH
9253: LD_INT 0
9255: ST_TO_ADDR
// sSpeed := false ;
9256: LD_ADDR_EXP 52
9260: PUSH
9261: LD_INT 0
9263: ST_TO_ADDR
// sEngine := false ;
9264: LD_ADDR_EXP 54
9268: PUSH
9269: LD_INT 0
9271: ST_TO_ADDR
// sSpec := false ;
9272: LD_ADDR_EXP 51
9276: PUSH
9277: LD_INT 0
9279: ST_TO_ADDR
// sLevel := false ;
9280: LD_ADDR_EXP 55
9284: PUSH
9285: LD_INT 0
9287: ST_TO_ADDR
// sArmoury := false ;
9288: LD_ADDR_EXP 56
9292: PUSH
9293: LD_INT 0
9295: ST_TO_ADDR
// sRadar := false ;
9296: LD_ADDR_EXP 57
9300: PUSH
9301: LD_INT 0
9303: ST_TO_ADDR
// sBunker := false ;
9304: LD_ADDR_EXP 58
9308: PUSH
9309: LD_INT 0
9311: ST_TO_ADDR
// sHack := false ;
9312: LD_ADDR_EXP 59
9316: PUSH
9317: LD_INT 0
9319: ST_TO_ADDR
// sFire := false ;
9320: LD_ADDR_EXP 60
9324: PUSH
9325: LD_INT 0
9327: ST_TO_ADDR
// sRefresh := false ;
9328: LD_ADDR_EXP 61
9332: PUSH
9333: LD_INT 0
9335: ST_TO_ADDR
// sExp := false ;
9336: LD_ADDR_EXP 62
9340: PUSH
9341: LD_INT 0
9343: ST_TO_ADDR
// sDepot := false ;
9344: LD_ADDR_EXP 63
9348: PUSH
9349: LD_INT 0
9351: ST_TO_ADDR
// sFlag := false ;
9352: LD_ADDR_EXP 64
9356: PUSH
9357: LD_INT 0
9359: ST_TO_ADDR
// sKamikadze := false ;
9360: LD_ADDR_EXP 72
9364: PUSH
9365: LD_INT 0
9367: ST_TO_ADDR
// sTroll := false ;
9368: LD_ADDR_EXP 73
9372: PUSH
9373: LD_INT 0
9375: ST_TO_ADDR
// sSlow := false ;
9376: LD_ADDR_EXP 74
9380: PUSH
9381: LD_INT 0
9383: ST_TO_ADDR
// sLack := false ;
9384: LD_ADDR_EXP 75
9388: PUSH
9389: LD_INT 0
9391: ST_TO_ADDR
// sTank := false ;
9392: LD_ADDR_EXP 77
9396: PUSH
9397: LD_INT 0
9399: ST_TO_ADDR
// sRemote := false ;
9400: LD_ADDR_EXP 78
9404: PUSH
9405: LD_INT 0
9407: ST_TO_ADDR
// sPowell := false ;
9408: LD_ADDR_EXP 79
9412: PUSH
9413: LD_INT 0
9415: ST_TO_ADDR
// sTeleport := false ;
9416: LD_ADDR_EXP 82
9420: PUSH
9421: LD_INT 0
9423: ST_TO_ADDR
// sOilTower := false ;
9424: LD_ADDR_EXP 84
9428: PUSH
9429: LD_INT 0
9431: ST_TO_ADDR
// sShovel := false ;
9432: LD_ADDR_EXP 85
9436: PUSH
9437: LD_INT 0
9439: ST_TO_ADDR
// sSheik := false ;
9440: LD_ADDR_EXP 86
9444: PUSH
9445: LD_INT 0
9447: ST_TO_ADDR
// sEarthquake := false ;
9448: LD_ADDR_EXP 88
9452: PUSH
9453: LD_INT 0
9455: ST_TO_ADDR
// sAI := false ;
9456: LD_ADDR_EXP 89
9460: PUSH
9461: LD_INT 0
9463: ST_TO_ADDR
// sCargo := false ;
9464: LD_ADDR_EXP 92
9468: PUSH
9469: LD_INT 0
9471: ST_TO_ADDR
// sDLaser := false ;
9472: LD_ADDR_EXP 93
9476: PUSH
9477: LD_INT 0
9479: ST_TO_ADDR
// sExchange := false ;
9480: LD_ADDR_EXP 94
9484: PUSH
9485: LD_INT 0
9487: ST_TO_ADDR
// sFac := false ;
9488: LD_ADDR_EXP 95
9492: PUSH
9493: LD_INT 0
9495: ST_TO_ADDR
// sPower := false ;
9496: LD_ADDR_EXP 96
9500: PUSH
9501: LD_INT 0
9503: ST_TO_ADDR
// sRandom := false ;
9504: LD_ADDR_EXP 97
9508: PUSH
9509: LD_INT 0
9511: ST_TO_ADDR
// sShield := false ;
9512: LD_ADDR_EXP 98
9516: PUSH
9517: LD_INT 0
9519: ST_TO_ADDR
// sTime := false ;
9520: LD_ADDR_EXP 99
9524: PUSH
9525: LD_INT 0
9527: ST_TO_ADDR
// sTools := false ;
9528: LD_ADDR_EXP 100
9532: PUSH
9533: LD_INT 0
9535: ST_TO_ADDR
// sSold := false ;
9536: LD_ADDR_EXP 65
9540: PUSH
9541: LD_INT 0
9543: ST_TO_ADDR
// sDiff := false ;
9544: LD_ADDR_EXP 66
9548: PUSH
9549: LD_INT 0
9551: ST_TO_ADDR
// sFog := false ;
9552: LD_ADDR_EXP 69
9556: PUSH
9557: LD_INT 0
9559: ST_TO_ADDR
// sReset := false ;
9560: LD_ADDR_EXP 70
9564: PUSH
9565: LD_INT 0
9567: ST_TO_ADDR
// sSun := false ;
9568: LD_ADDR_EXP 71
9572: PUSH
9573: LD_INT 0
9575: ST_TO_ADDR
// sTiger := false ;
9576: LD_ADDR_EXP 67
9580: PUSH
9581: LD_INT 0
9583: ST_TO_ADDR
// sBomb := false ;
9584: LD_ADDR_EXP 68
9588: PUSH
9589: LD_INT 0
9591: ST_TO_ADDR
// sWound := false ;
9592: LD_ADDR_EXP 76
9596: PUSH
9597: LD_INT 0
9599: ST_TO_ADDR
// sBetray := false ;
9600: LD_ADDR_EXP 80
9604: PUSH
9605: LD_INT 0
9607: ST_TO_ADDR
// sContamin := false ;
9608: LD_ADDR_EXP 81
9612: PUSH
9613: LD_INT 0
9615: ST_TO_ADDR
// sOil := false ;
9616: LD_ADDR_EXP 83
9620: PUSH
9621: LD_INT 0
9623: ST_TO_ADDR
// sStu := false ;
9624: LD_ADDR_EXP 87
9628: PUSH
9629: LD_INT 0
9631: ST_TO_ADDR
// sBazooka := false ;
9632: LD_ADDR_EXP 90
9636: PUSH
9637: LD_INT 0
9639: ST_TO_ADDR
// sMortar := false ;
9640: LD_ADDR_EXP 91
9644: PUSH
9645: LD_INT 0
9647: ST_TO_ADDR
// sRanger := false ;
9648: LD_ADDR_EXP 101
9652: PUSH
9653: LD_INT 0
9655: ST_TO_ADDR
// sComputer := false ;
9656: LD_ADDR_EXP 102
9660: PUSH
9661: LD_INT 0
9663: ST_TO_ADDR
// s30 := false ;
9664: LD_ADDR_EXP 103
9668: PUSH
9669: LD_INT 0
9671: ST_TO_ADDR
// s60 := false ;
9672: LD_ADDR_EXP 104
9676: PUSH
9677: LD_INT 0
9679: ST_TO_ADDR
// end ;
9680: LD_VAR 0 1
9684: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
9685: LD_INT 0
9687: PPUSH
9688: PPUSH
9689: PPUSH
9690: PPUSH
9691: PPUSH
// result := [ ] ;
9692: LD_ADDR_VAR 0 1
9696: PUSH
9697: EMPTY
9698: ST_TO_ADDR
// if campaign_id = 1 then
9699: LD_OWVAR 69
9703: PUSH
9704: LD_INT 1
9706: EQUAL
9707: IFFALSE 12873
// begin case mission_number of 1 :
9709: LD_OWVAR 70
9713: PUSH
9714: LD_INT 1
9716: DOUBLE
9717: EQUAL
9718: IFTRUE 9722
9720: GO 9798
9722: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
9723: LD_ADDR_VAR 0 1
9727: PUSH
9728: LD_INT 2
9730: PUSH
9731: LD_INT 4
9733: PUSH
9734: LD_INT 11
9736: PUSH
9737: LD_INT 12
9739: PUSH
9740: LD_INT 15
9742: PUSH
9743: LD_INT 16
9745: PUSH
9746: LD_INT 22
9748: PUSH
9749: LD_INT 23
9751: PUSH
9752: LD_INT 26
9754: PUSH
9755: EMPTY
9756: LIST
9757: LIST
9758: LIST
9759: LIST
9760: LIST
9761: LIST
9762: LIST
9763: LIST
9764: LIST
9765: PUSH
9766: LD_INT 101
9768: PUSH
9769: LD_INT 102
9771: PUSH
9772: LD_INT 106
9774: PUSH
9775: LD_INT 116
9777: PUSH
9778: LD_INT 117
9780: PUSH
9781: LD_INT 118
9783: PUSH
9784: EMPTY
9785: LIST
9786: LIST
9787: LIST
9788: LIST
9789: LIST
9790: LIST
9791: PUSH
9792: EMPTY
9793: LIST
9794: LIST
9795: ST_TO_ADDR
9796: GO 12871
9798: LD_INT 2
9800: DOUBLE
9801: EQUAL
9802: IFTRUE 9806
9804: GO 9890
9806: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
9807: LD_ADDR_VAR 0 1
9811: PUSH
9812: LD_INT 2
9814: PUSH
9815: LD_INT 4
9817: PUSH
9818: LD_INT 11
9820: PUSH
9821: LD_INT 12
9823: PUSH
9824: LD_INT 15
9826: PUSH
9827: LD_INT 16
9829: PUSH
9830: LD_INT 22
9832: PUSH
9833: LD_INT 23
9835: PUSH
9836: LD_INT 26
9838: PUSH
9839: EMPTY
9840: LIST
9841: LIST
9842: LIST
9843: LIST
9844: LIST
9845: LIST
9846: LIST
9847: LIST
9848: LIST
9849: PUSH
9850: LD_INT 101
9852: PUSH
9853: LD_INT 102
9855: PUSH
9856: LD_INT 105
9858: PUSH
9859: LD_INT 106
9861: PUSH
9862: LD_INT 108
9864: PUSH
9865: LD_INT 116
9867: PUSH
9868: LD_INT 117
9870: PUSH
9871: LD_INT 118
9873: PUSH
9874: EMPTY
9875: LIST
9876: LIST
9877: LIST
9878: LIST
9879: LIST
9880: LIST
9881: LIST
9882: LIST
9883: PUSH
9884: EMPTY
9885: LIST
9886: LIST
9887: ST_TO_ADDR
9888: GO 12871
9890: LD_INT 3
9892: DOUBLE
9893: EQUAL
9894: IFTRUE 9898
9896: GO 9986
9898: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
9899: LD_ADDR_VAR 0 1
9903: PUSH
9904: LD_INT 2
9906: PUSH
9907: LD_INT 4
9909: PUSH
9910: LD_INT 5
9912: PUSH
9913: LD_INT 11
9915: PUSH
9916: LD_INT 12
9918: PUSH
9919: LD_INT 15
9921: PUSH
9922: LD_INT 16
9924: PUSH
9925: LD_INT 22
9927: PUSH
9928: LD_INT 26
9930: PUSH
9931: LD_INT 36
9933: PUSH
9934: EMPTY
9935: LIST
9936: LIST
9937: LIST
9938: LIST
9939: LIST
9940: LIST
9941: LIST
9942: LIST
9943: LIST
9944: LIST
9945: PUSH
9946: LD_INT 101
9948: PUSH
9949: LD_INT 102
9951: PUSH
9952: LD_INT 105
9954: PUSH
9955: LD_INT 106
9957: PUSH
9958: LD_INT 108
9960: PUSH
9961: LD_INT 116
9963: PUSH
9964: LD_INT 117
9966: PUSH
9967: LD_INT 118
9969: PUSH
9970: EMPTY
9971: LIST
9972: LIST
9973: LIST
9974: LIST
9975: LIST
9976: LIST
9977: LIST
9978: LIST
9979: PUSH
9980: EMPTY
9981: LIST
9982: LIST
9983: ST_TO_ADDR
9984: GO 12871
9986: LD_INT 4
9988: DOUBLE
9989: EQUAL
9990: IFTRUE 9994
9992: GO 10090
9994: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
9995: LD_ADDR_VAR 0 1
9999: PUSH
10000: LD_INT 2
10002: PUSH
10003: LD_INT 4
10005: PUSH
10006: LD_INT 5
10008: PUSH
10009: LD_INT 8
10011: PUSH
10012: LD_INT 11
10014: PUSH
10015: LD_INT 12
10017: PUSH
10018: LD_INT 15
10020: PUSH
10021: LD_INT 16
10023: PUSH
10024: LD_INT 22
10026: PUSH
10027: LD_INT 23
10029: PUSH
10030: LD_INT 26
10032: PUSH
10033: LD_INT 36
10035: PUSH
10036: EMPTY
10037: LIST
10038: LIST
10039: LIST
10040: LIST
10041: LIST
10042: LIST
10043: LIST
10044: LIST
10045: LIST
10046: LIST
10047: LIST
10048: LIST
10049: PUSH
10050: LD_INT 101
10052: PUSH
10053: LD_INT 102
10055: PUSH
10056: LD_INT 105
10058: PUSH
10059: LD_INT 106
10061: PUSH
10062: LD_INT 108
10064: PUSH
10065: LD_INT 116
10067: PUSH
10068: LD_INT 117
10070: PUSH
10071: LD_INT 118
10073: PUSH
10074: EMPTY
10075: LIST
10076: LIST
10077: LIST
10078: LIST
10079: LIST
10080: LIST
10081: LIST
10082: LIST
10083: PUSH
10084: EMPTY
10085: LIST
10086: LIST
10087: ST_TO_ADDR
10088: GO 12871
10090: LD_INT 5
10092: DOUBLE
10093: EQUAL
10094: IFTRUE 10098
10096: GO 10210
10098: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
10099: LD_ADDR_VAR 0 1
10103: PUSH
10104: LD_INT 2
10106: PUSH
10107: LD_INT 4
10109: PUSH
10110: LD_INT 5
10112: PUSH
10113: LD_INT 6
10115: PUSH
10116: LD_INT 8
10118: PUSH
10119: LD_INT 11
10121: PUSH
10122: LD_INT 12
10124: PUSH
10125: LD_INT 15
10127: PUSH
10128: LD_INT 16
10130: PUSH
10131: LD_INT 22
10133: PUSH
10134: LD_INT 23
10136: PUSH
10137: LD_INT 25
10139: PUSH
10140: LD_INT 26
10142: PUSH
10143: LD_INT 36
10145: PUSH
10146: EMPTY
10147: LIST
10148: LIST
10149: LIST
10150: LIST
10151: LIST
10152: LIST
10153: LIST
10154: LIST
10155: LIST
10156: LIST
10157: LIST
10158: LIST
10159: LIST
10160: LIST
10161: PUSH
10162: LD_INT 101
10164: PUSH
10165: LD_INT 102
10167: PUSH
10168: LD_INT 105
10170: PUSH
10171: LD_INT 106
10173: PUSH
10174: LD_INT 108
10176: PUSH
10177: LD_INT 109
10179: PUSH
10180: LD_INT 112
10182: PUSH
10183: LD_INT 116
10185: PUSH
10186: LD_INT 117
10188: PUSH
10189: LD_INT 118
10191: PUSH
10192: EMPTY
10193: LIST
10194: LIST
10195: LIST
10196: LIST
10197: LIST
10198: LIST
10199: LIST
10200: LIST
10201: LIST
10202: LIST
10203: PUSH
10204: EMPTY
10205: LIST
10206: LIST
10207: ST_TO_ADDR
10208: GO 12871
10210: LD_INT 6
10212: DOUBLE
10213: EQUAL
10214: IFTRUE 10218
10216: GO 10350
10218: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
10219: LD_ADDR_VAR 0 1
10223: PUSH
10224: LD_INT 2
10226: PUSH
10227: LD_INT 4
10229: PUSH
10230: LD_INT 5
10232: PUSH
10233: LD_INT 6
10235: PUSH
10236: LD_INT 8
10238: PUSH
10239: LD_INT 11
10241: PUSH
10242: LD_INT 12
10244: PUSH
10245: LD_INT 15
10247: PUSH
10248: LD_INT 16
10250: PUSH
10251: LD_INT 20
10253: PUSH
10254: LD_INT 21
10256: PUSH
10257: LD_INT 22
10259: PUSH
10260: LD_INT 23
10262: PUSH
10263: LD_INT 25
10265: PUSH
10266: LD_INT 26
10268: PUSH
10269: LD_INT 30
10271: PUSH
10272: LD_INT 31
10274: PUSH
10275: LD_INT 32
10277: PUSH
10278: LD_INT 36
10280: PUSH
10281: EMPTY
10282: LIST
10283: LIST
10284: LIST
10285: LIST
10286: LIST
10287: LIST
10288: LIST
10289: LIST
10290: LIST
10291: LIST
10292: LIST
10293: LIST
10294: LIST
10295: LIST
10296: LIST
10297: LIST
10298: LIST
10299: LIST
10300: LIST
10301: PUSH
10302: LD_INT 101
10304: PUSH
10305: LD_INT 102
10307: PUSH
10308: LD_INT 105
10310: PUSH
10311: LD_INT 106
10313: PUSH
10314: LD_INT 108
10316: PUSH
10317: LD_INT 109
10319: PUSH
10320: LD_INT 112
10322: PUSH
10323: LD_INT 116
10325: PUSH
10326: LD_INT 117
10328: PUSH
10329: LD_INT 118
10331: PUSH
10332: EMPTY
10333: LIST
10334: LIST
10335: LIST
10336: LIST
10337: LIST
10338: LIST
10339: LIST
10340: LIST
10341: LIST
10342: LIST
10343: PUSH
10344: EMPTY
10345: LIST
10346: LIST
10347: ST_TO_ADDR
10348: GO 12871
10350: LD_INT 7
10352: DOUBLE
10353: EQUAL
10354: IFTRUE 10358
10356: GO 10470
10358: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
10359: LD_ADDR_VAR 0 1
10363: PUSH
10364: LD_INT 2
10366: PUSH
10367: LD_INT 4
10369: PUSH
10370: LD_INT 5
10372: PUSH
10373: LD_INT 7
10375: PUSH
10376: LD_INT 11
10378: PUSH
10379: LD_INT 12
10381: PUSH
10382: LD_INT 15
10384: PUSH
10385: LD_INT 16
10387: PUSH
10388: LD_INT 20
10390: PUSH
10391: LD_INT 21
10393: PUSH
10394: LD_INT 22
10396: PUSH
10397: LD_INT 23
10399: PUSH
10400: LD_INT 25
10402: PUSH
10403: LD_INT 26
10405: PUSH
10406: EMPTY
10407: LIST
10408: LIST
10409: LIST
10410: LIST
10411: LIST
10412: LIST
10413: LIST
10414: LIST
10415: LIST
10416: LIST
10417: LIST
10418: LIST
10419: LIST
10420: LIST
10421: PUSH
10422: LD_INT 101
10424: PUSH
10425: LD_INT 102
10427: PUSH
10428: LD_INT 103
10430: PUSH
10431: LD_INT 105
10433: PUSH
10434: LD_INT 106
10436: PUSH
10437: LD_INT 108
10439: PUSH
10440: LD_INT 112
10442: PUSH
10443: LD_INT 116
10445: PUSH
10446: LD_INT 117
10448: PUSH
10449: LD_INT 118
10451: PUSH
10452: EMPTY
10453: LIST
10454: LIST
10455: LIST
10456: LIST
10457: LIST
10458: LIST
10459: LIST
10460: LIST
10461: LIST
10462: LIST
10463: PUSH
10464: EMPTY
10465: LIST
10466: LIST
10467: ST_TO_ADDR
10468: GO 12871
10470: LD_INT 8
10472: DOUBLE
10473: EQUAL
10474: IFTRUE 10478
10476: GO 10618
10478: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
10479: LD_ADDR_VAR 0 1
10483: PUSH
10484: LD_INT 2
10486: PUSH
10487: LD_INT 4
10489: PUSH
10490: LD_INT 5
10492: PUSH
10493: LD_INT 6
10495: PUSH
10496: LD_INT 7
10498: PUSH
10499: LD_INT 8
10501: PUSH
10502: LD_INT 11
10504: PUSH
10505: LD_INT 12
10507: PUSH
10508: LD_INT 15
10510: PUSH
10511: LD_INT 16
10513: PUSH
10514: LD_INT 20
10516: PUSH
10517: LD_INT 21
10519: PUSH
10520: LD_INT 22
10522: PUSH
10523: LD_INT 23
10525: PUSH
10526: LD_INT 25
10528: PUSH
10529: LD_INT 26
10531: PUSH
10532: LD_INT 30
10534: PUSH
10535: LD_INT 31
10537: PUSH
10538: LD_INT 32
10540: PUSH
10541: LD_INT 36
10543: PUSH
10544: EMPTY
10545: LIST
10546: LIST
10547: LIST
10548: LIST
10549: LIST
10550: LIST
10551: LIST
10552: LIST
10553: LIST
10554: LIST
10555: LIST
10556: LIST
10557: LIST
10558: LIST
10559: LIST
10560: LIST
10561: LIST
10562: LIST
10563: LIST
10564: LIST
10565: PUSH
10566: LD_INT 101
10568: PUSH
10569: LD_INT 102
10571: PUSH
10572: LD_INT 103
10574: PUSH
10575: LD_INT 105
10577: PUSH
10578: LD_INT 106
10580: PUSH
10581: LD_INT 108
10583: PUSH
10584: LD_INT 109
10586: PUSH
10587: LD_INT 112
10589: PUSH
10590: LD_INT 116
10592: PUSH
10593: LD_INT 117
10595: PUSH
10596: LD_INT 118
10598: PUSH
10599: EMPTY
10600: LIST
10601: LIST
10602: LIST
10603: LIST
10604: LIST
10605: LIST
10606: LIST
10607: LIST
10608: LIST
10609: LIST
10610: LIST
10611: PUSH
10612: EMPTY
10613: LIST
10614: LIST
10615: ST_TO_ADDR
10616: GO 12871
10618: LD_INT 9
10620: DOUBLE
10621: EQUAL
10622: IFTRUE 10626
10624: GO 10774
10626: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
10627: LD_ADDR_VAR 0 1
10631: PUSH
10632: LD_INT 2
10634: PUSH
10635: LD_INT 4
10637: PUSH
10638: LD_INT 5
10640: PUSH
10641: LD_INT 6
10643: PUSH
10644: LD_INT 7
10646: PUSH
10647: LD_INT 8
10649: PUSH
10650: LD_INT 11
10652: PUSH
10653: LD_INT 12
10655: PUSH
10656: LD_INT 15
10658: PUSH
10659: LD_INT 16
10661: PUSH
10662: LD_INT 20
10664: PUSH
10665: LD_INT 21
10667: PUSH
10668: LD_INT 22
10670: PUSH
10671: LD_INT 23
10673: PUSH
10674: LD_INT 25
10676: PUSH
10677: LD_INT 26
10679: PUSH
10680: LD_INT 28
10682: PUSH
10683: LD_INT 30
10685: PUSH
10686: LD_INT 31
10688: PUSH
10689: LD_INT 32
10691: PUSH
10692: LD_INT 36
10694: PUSH
10695: EMPTY
10696: LIST
10697: LIST
10698: LIST
10699: LIST
10700: LIST
10701: LIST
10702: LIST
10703: LIST
10704: LIST
10705: LIST
10706: LIST
10707: LIST
10708: LIST
10709: LIST
10710: LIST
10711: LIST
10712: LIST
10713: LIST
10714: LIST
10715: LIST
10716: LIST
10717: PUSH
10718: LD_INT 101
10720: PUSH
10721: LD_INT 102
10723: PUSH
10724: LD_INT 103
10726: PUSH
10727: LD_INT 105
10729: PUSH
10730: LD_INT 106
10732: PUSH
10733: LD_INT 108
10735: PUSH
10736: LD_INT 109
10738: PUSH
10739: LD_INT 112
10741: PUSH
10742: LD_INT 114
10744: PUSH
10745: LD_INT 116
10747: PUSH
10748: LD_INT 117
10750: PUSH
10751: LD_INT 118
10753: PUSH
10754: EMPTY
10755: LIST
10756: LIST
10757: LIST
10758: LIST
10759: LIST
10760: LIST
10761: LIST
10762: LIST
10763: LIST
10764: LIST
10765: LIST
10766: LIST
10767: PUSH
10768: EMPTY
10769: LIST
10770: LIST
10771: ST_TO_ADDR
10772: GO 12871
10774: LD_INT 10
10776: DOUBLE
10777: EQUAL
10778: IFTRUE 10782
10780: GO 10978
10782: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
10783: LD_ADDR_VAR 0 1
10787: PUSH
10788: LD_INT 2
10790: PUSH
10791: LD_INT 4
10793: PUSH
10794: LD_INT 5
10796: PUSH
10797: LD_INT 6
10799: PUSH
10800: LD_INT 7
10802: PUSH
10803: LD_INT 8
10805: PUSH
10806: LD_INT 9
10808: PUSH
10809: LD_INT 10
10811: PUSH
10812: LD_INT 11
10814: PUSH
10815: LD_INT 12
10817: PUSH
10818: LD_INT 13
10820: PUSH
10821: LD_INT 14
10823: PUSH
10824: LD_INT 15
10826: PUSH
10827: LD_INT 16
10829: PUSH
10830: LD_INT 17
10832: PUSH
10833: LD_INT 18
10835: PUSH
10836: LD_INT 19
10838: PUSH
10839: LD_INT 20
10841: PUSH
10842: LD_INT 21
10844: PUSH
10845: LD_INT 22
10847: PUSH
10848: LD_INT 23
10850: PUSH
10851: LD_INT 24
10853: PUSH
10854: LD_INT 25
10856: PUSH
10857: LD_INT 26
10859: PUSH
10860: LD_INT 28
10862: PUSH
10863: LD_INT 30
10865: PUSH
10866: LD_INT 31
10868: PUSH
10869: LD_INT 32
10871: PUSH
10872: LD_INT 36
10874: PUSH
10875: EMPTY
10876: LIST
10877: LIST
10878: LIST
10879: LIST
10880: LIST
10881: LIST
10882: LIST
10883: LIST
10884: LIST
10885: LIST
10886: LIST
10887: LIST
10888: LIST
10889: LIST
10890: LIST
10891: LIST
10892: LIST
10893: LIST
10894: LIST
10895: LIST
10896: LIST
10897: LIST
10898: LIST
10899: LIST
10900: LIST
10901: LIST
10902: LIST
10903: LIST
10904: LIST
10905: PUSH
10906: LD_INT 101
10908: PUSH
10909: LD_INT 102
10911: PUSH
10912: LD_INT 103
10914: PUSH
10915: LD_INT 104
10917: PUSH
10918: LD_INT 105
10920: PUSH
10921: LD_INT 106
10923: PUSH
10924: LD_INT 107
10926: PUSH
10927: LD_INT 108
10929: PUSH
10930: LD_INT 109
10932: PUSH
10933: LD_INT 110
10935: PUSH
10936: LD_INT 111
10938: PUSH
10939: LD_INT 112
10941: PUSH
10942: LD_INT 114
10944: PUSH
10945: LD_INT 116
10947: PUSH
10948: LD_INT 117
10950: PUSH
10951: LD_INT 118
10953: PUSH
10954: EMPTY
10955: LIST
10956: LIST
10957: LIST
10958: LIST
10959: LIST
10960: LIST
10961: LIST
10962: LIST
10963: LIST
10964: LIST
10965: LIST
10966: LIST
10967: LIST
10968: LIST
10969: LIST
10970: LIST
10971: PUSH
10972: EMPTY
10973: LIST
10974: LIST
10975: ST_TO_ADDR
10976: GO 12871
10978: LD_INT 11
10980: DOUBLE
10981: EQUAL
10982: IFTRUE 10986
10984: GO 11190
10986: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
10987: LD_ADDR_VAR 0 1
10991: PUSH
10992: LD_INT 2
10994: PUSH
10995: LD_INT 3
10997: PUSH
10998: LD_INT 4
11000: PUSH
11001: LD_INT 5
11003: PUSH
11004: LD_INT 6
11006: PUSH
11007: LD_INT 7
11009: PUSH
11010: LD_INT 8
11012: PUSH
11013: LD_INT 9
11015: PUSH
11016: LD_INT 10
11018: PUSH
11019: LD_INT 11
11021: PUSH
11022: LD_INT 12
11024: PUSH
11025: LD_INT 13
11027: PUSH
11028: LD_INT 14
11030: PUSH
11031: LD_INT 15
11033: PUSH
11034: LD_INT 16
11036: PUSH
11037: LD_INT 17
11039: PUSH
11040: LD_INT 18
11042: PUSH
11043: LD_INT 19
11045: PUSH
11046: LD_INT 20
11048: PUSH
11049: LD_INT 21
11051: PUSH
11052: LD_INT 22
11054: PUSH
11055: LD_INT 23
11057: PUSH
11058: LD_INT 24
11060: PUSH
11061: LD_INT 25
11063: PUSH
11064: LD_INT 26
11066: PUSH
11067: LD_INT 28
11069: PUSH
11070: LD_INT 30
11072: PUSH
11073: LD_INT 31
11075: PUSH
11076: LD_INT 32
11078: PUSH
11079: LD_INT 34
11081: PUSH
11082: LD_INT 36
11084: PUSH
11085: EMPTY
11086: LIST
11087: LIST
11088: LIST
11089: LIST
11090: LIST
11091: LIST
11092: LIST
11093: LIST
11094: LIST
11095: LIST
11096: LIST
11097: LIST
11098: LIST
11099: LIST
11100: LIST
11101: LIST
11102: LIST
11103: LIST
11104: LIST
11105: LIST
11106: LIST
11107: LIST
11108: LIST
11109: LIST
11110: LIST
11111: LIST
11112: LIST
11113: LIST
11114: LIST
11115: LIST
11116: LIST
11117: PUSH
11118: LD_INT 101
11120: PUSH
11121: LD_INT 102
11123: PUSH
11124: LD_INT 103
11126: PUSH
11127: LD_INT 104
11129: PUSH
11130: LD_INT 105
11132: PUSH
11133: LD_INT 106
11135: PUSH
11136: LD_INT 107
11138: PUSH
11139: LD_INT 108
11141: PUSH
11142: LD_INT 109
11144: PUSH
11145: LD_INT 110
11147: PUSH
11148: LD_INT 111
11150: PUSH
11151: LD_INT 112
11153: PUSH
11154: LD_INT 114
11156: PUSH
11157: LD_INT 116
11159: PUSH
11160: LD_INT 117
11162: PUSH
11163: LD_INT 118
11165: PUSH
11166: EMPTY
11167: LIST
11168: LIST
11169: LIST
11170: LIST
11171: LIST
11172: LIST
11173: LIST
11174: LIST
11175: LIST
11176: LIST
11177: LIST
11178: LIST
11179: LIST
11180: LIST
11181: LIST
11182: LIST
11183: PUSH
11184: EMPTY
11185: LIST
11186: LIST
11187: ST_TO_ADDR
11188: GO 12871
11190: LD_INT 12
11192: DOUBLE
11193: EQUAL
11194: IFTRUE 11198
11196: GO 11418
11198: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
11199: LD_ADDR_VAR 0 1
11203: PUSH
11204: LD_INT 1
11206: PUSH
11207: LD_INT 2
11209: PUSH
11210: LD_INT 3
11212: PUSH
11213: LD_INT 4
11215: PUSH
11216: LD_INT 5
11218: PUSH
11219: LD_INT 6
11221: PUSH
11222: LD_INT 7
11224: PUSH
11225: LD_INT 8
11227: PUSH
11228: LD_INT 9
11230: PUSH
11231: LD_INT 10
11233: PUSH
11234: LD_INT 11
11236: PUSH
11237: LD_INT 12
11239: PUSH
11240: LD_INT 13
11242: PUSH
11243: LD_INT 14
11245: PUSH
11246: LD_INT 15
11248: PUSH
11249: LD_INT 16
11251: PUSH
11252: LD_INT 17
11254: PUSH
11255: LD_INT 18
11257: PUSH
11258: LD_INT 19
11260: PUSH
11261: LD_INT 20
11263: PUSH
11264: LD_INT 21
11266: PUSH
11267: LD_INT 22
11269: PUSH
11270: LD_INT 23
11272: PUSH
11273: LD_INT 24
11275: PUSH
11276: LD_INT 25
11278: PUSH
11279: LD_INT 26
11281: PUSH
11282: LD_INT 27
11284: PUSH
11285: LD_INT 28
11287: PUSH
11288: LD_INT 30
11290: PUSH
11291: LD_INT 31
11293: PUSH
11294: LD_INT 32
11296: PUSH
11297: LD_INT 33
11299: PUSH
11300: LD_INT 34
11302: PUSH
11303: LD_INT 36
11305: PUSH
11306: EMPTY
11307: LIST
11308: LIST
11309: LIST
11310: LIST
11311: LIST
11312: LIST
11313: LIST
11314: LIST
11315: LIST
11316: LIST
11317: LIST
11318: LIST
11319: LIST
11320: LIST
11321: LIST
11322: LIST
11323: LIST
11324: LIST
11325: LIST
11326: LIST
11327: LIST
11328: LIST
11329: LIST
11330: LIST
11331: LIST
11332: LIST
11333: LIST
11334: LIST
11335: LIST
11336: LIST
11337: LIST
11338: LIST
11339: LIST
11340: LIST
11341: PUSH
11342: LD_INT 101
11344: PUSH
11345: LD_INT 102
11347: PUSH
11348: LD_INT 103
11350: PUSH
11351: LD_INT 104
11353: PUSH
11354: LD_INT 105
11356: PUSH
11357: LD_INT 106
11359: PUSH
11360: LD_INT 107
11362: PUSH
11363: LD_INT 108
11365: PUSH
11366: LD_INT 109
11368: PUSH
11369: LD_INT 110
11371: PUSH
11372: LD_INT 111
11374: PUSH
11375: LD_INT 112
11377: PUSH
11378: LD_INT 113
11380: PUSH
11381: LD_INT 114
11383: PUSH
11384: LD_INT 116
11386: PUSH
11387: LD_INT 117
11389: PUSH
11390: LD_INT 118
11392: PUSH
11393: EMPTY
11394: LIST
11395: LIST
11396: LIST
11397: LIST
11398: LIST
11399: LIST
11400: LIST
11401: LIST
11402: LIST
11403: LIST
11404: LIST
11405: LIST
11406: LIST
11407: LIST
11408: LIST
11409: LIST
11410: LIST
11411: PUSH
11412: EMPTY
11413: LIST
11414: LIST
11415: ST_TO_ADDR
11416: GO 12871
11418: LD_INT 13
11420: DOUBLE
11421: EQUAL
11422: IFTRUE 11426
11424: GO 11634
11426: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
11427: LD_ADDR_VAR 0 1
11431: PUSH
11432: LD_INT 1
11434: PUSH
11435: LD_INT 2
11437: PUSH
11438: LD_INT 3
11440: PUSH
11441: LD_INT 4
11443: PUSH
11444: LD_INT 5
11446: PUSH
11447: LD_INT 8
11449: PUSH
11450: LD_INT 9
11452: PUSH
11453: LD_INT 10
11455: PUSH
11456: LD_INT 11
11458: PUSH
11459: LD_INT 12
11461: PUSH
11462: LD_INT 14
11464: PUSH
11465: LD_INT 15
11467: PUSH
11468: LD_INT 16
11470: PUSH
11471: LD_INT 17
11473: PUSH
11474: LD_INT 18
11476: PUSH
11477: LD_INT 19
11479: PUSH
11480: LD_INT 20
11482: PUSH
11483: LD_INT 21
11485: PUSH
11486: LD_INT 22
11488: PUSH
11489: LD_INT 23
11491: PUSH
11492: LD_INT 24
11494: PUSH
11495: LD_INT 25
11497: PUSH
11498: LD_INT 26
11500: PUSH
11501: LD_INT 27
11503: PUSH
11504: LD_INT 28
11506: PUSH
11507: LD_INT 30
11509: PUSH
11510: LD_INT 31
11512: PUSH
11513: LD_INT 32
11515: PUSH
11516: LD_INT 33
11518: PUSH
11519: LD_INT 34
11521: PUSH
11522: LD_INT 36
11524: PUSH
11525: EMPTY
11526: LIST
11527: LIST
11528: LIST
11529: LIST
11530: LIST
11531: LIST
11532: LIST
11533: LIST
11534: LIST
11535: LIST
11536: LIST
11537: LIST
11538: LIST
11539: LIST
11540: LIST
11541: LIST
11542: LIST
11543: LIST
11544: LIST
11545: LIST
11546: LIST
11547: LIST
11548: LIST
11549: LIST
11550: LIST
11551: LIST
11552: LIST
11553: LIST
11554: LIST
11555: LIST
11556: LIST
11557: PUSH
11558: LD_INT 101
11560: PUSH
11561: LD_INT 102
11563: PUSH
11564: LD_INT 103
11566: PUSH
11567: LD_INT 104
11569: PUSH
11570: LD_INT 105
11572: PUSH
11573: LD_INT 106
11575: PUSH
11576: LD_INT 107
11578: PUSH
11579: LD_INT 108
11581: PUSH
11582: LD_INT 109
11584: PUSH
11585: LD_INT 110
11587: PUSH
11588: LD_INT 111
11590: PUSH
11591: LD_INT 112
11593: PUSH
11594: LD_INT 113
11596: PUSH
11597: LD_INT 114
11599: PUSH
11600: LD_INT 116
11602: PUSH
11603: LD_INT 117
11605: PUSH
11606: LD_INT 118
11608: PUSH
11609: EMPTY
11610: LIST
11611: LIST
11612: LIST
11613: LIST
11614: LIST
11615: LIST
11616: LIST
11617: LIST
11618: LIST
11619: LIST
11620: LIST
11621: LIST
11622: LIST
11623: LIST
11624: LIST
11625: LIST
11626: LIST
11627: PUSH
11628: EMPTY
11629: LIST
11630: LIST
11631: ST_TO_ADDR
11632: GO 12871
11634: LD_INT 14
11636: DOUBLE
11637: EQUAL
11638: IFTRUE 11642
11640: GO 11866
11642: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
11643: LD_ADDR_VAR 0 1
11647: PUSH
11648: LD_INT 1
11650: PUSH
11651: LD_INT 2
11653: PUSH
11654: LD_INT 3
11656: PUSH
11657: LD_INT 4
11659: PUSH
11660: LD_INT 5
11662: PUSH
11663: LD_INT 6
11665: PUSH
11666: LD_INT 7
11668: PUSH
11669: LD_INT 8
11671: PUSH
11672: LD_INT 9
11674: PUSH
11675: LD_INT 10
11677: PUSH
11678: LD_INT 11
11680: PUSH
11681: LD_INT 12
11683: PUSH
11684: LD_INT 13
11686: PUSH
11687: LD_INT 14
11689: PUSH
11690: LD_INT 15
11692: PUSH
11693: LD_INT 16
11695: PUSH
11696: LD_INT 17
11698: PUSH
11699: LD_INT 18
11701: PUSH
11702: LD_INT 19
11704: PUSH
11705: LD_INT 20
11707: PUSH
11708: LD_INT 21
11710: PUSH
11711: LD_INT 22
11713: PUSH
11714: LD_INT 23
11716: PUSH
11717: LD_INT 24
11719: PUSH
11720: LD_INT 25
11722: PUSH
11723: LD_INT 26
11725: PUSH
11726: LD_INT 27
11728: PUSH
11729: LD_INT 28
11731: PUSH
11732: LD_INT 29
11734: PUSH
11735: LD_INT 30
11737: PUSH
11738: LD_INT 31
11740: PUSH
11741: LD_INT 32
11743: PUSH
11744: LD_INT 33
11746: PUSH
11747: LD_INT 34
11749: PUSH
11750: LD_INT 36
11752: PUSH
11753: EMPTY
11754: LIST
11755: LIST
11756: LIST
11757: LIST
11758: LIST
11759: LIST
11760: LIST
11761: LIST
11762: LIST
11763: LIST
11764: LIST
11765: LIST
11766: LIST
11767: LIST
11768: LIST
11769: LIST
11770: LIST
11771: LIST
11772: LIST
11773: LIST
11774: LIST
11775: LIST
11776: LIST
11777: LIST
11778: LIST
11779: LIST
11780: LIST
11781: LIST
11782: LIST
11783: LIST
11784: LIST
11785: LIST
11786: LIST
11787: LIST
11788: LIST
11789: PUSH
11790: LD_INT 101
11792: PUSH
11793: LD_INT 102
11795: PUSH
11796: LD_INT 103
11798: PUSH
11799: LD_INT 104
11801: PUSH
11802: LD_INT 105
11804: PUSH
11805: LD_INT 106
11807: PUSH
11808: LD_INT 107
11810: PUSH
11811: LD_INT 108
11813: PUSH
11814: LD_INT 109
11816: PUSH
11817: LD_INT 110
11819: PUSH
11820: LD_INT 111
11822: PUSH
11823: LD_INT 112
11825: PUSH
11826: LD_INT 113
11828: PUSH
11829: LD_INT 114
11831: PUSH
11832: LD_INT 116
11834: PUSH
11835: LD_INT 117
11837: PUSH
11838: LD_INT 118
11840: PUSH
11841: EMPTY
11842: LIST
11843: LIST
11844: LIST
11845: LIST
11846: LIST
11847: LIST
11848: LIST
11849: LIST
11850: LIST
11851: LIST
11852: LIST
11853: LIST
11854: LIST
11855: LIST
11856: LIST
11857: LIST
11858: LIST
11859: PUSH
11860: EMPTY
11861: LIST
11862: LIST
11863: ST_TO_ADDR
11864: GO 12871
11866: LD_INT 15
11868: DOUBLE
11869: EQUAL
11870: IFTRUE 11874
11872: GO 12098
11874: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
11875: LD_ADDR_VAR 0 1
11879: PUSH
11880: LD_INT 1
11882: PUSH
11883: LD_INT 2
11885: PUSH
11886: LD_INT 3
11888: PUSH
11889: LD_INT 4
11891: PUSH
11892: LD_INT 5
11894: PUSH
11895: LD_INT 6
11897: PUSH
11898: LD_INT 7
11900: PUSH
11901: LD_INT 8
11903: PUSH
11904: LD_INT 9
11906: PUSH
11907: LD_INT 10
11909: PUSH
11910: LD_INT 11
11912: PUSH
11913: LD_INT 12
11915: PUSH
11916: LD_INT 13
11918: PUSH
11919: LD_INT 14
11921: PUSH
11922: LD_INT 15
11924: PUSH
11925: LD_INT 16
11927: PUSH
11928: LD_INT 17
11930: PUSH
11931: LD_INT 18
11933: PUSH
11934: LD_INT 19
11936: PUSH
11937: LD_INT 20
11939: PUSH
11940: LD_INT 21
11942: PUSH
11943: LD_INT 22
11945: PUSH
11946: LD_INT 23
11948: PUSH
11949: LD_INT 24
11951: PUSH
11952: LD_INT 25
11954: PUSH
11955: LD_INT 26
11957: PUSH
11958: LD_INT 27
11960: PUSH
11961: LD_INT 28
11963: PUSH
11964: LD_INT 29
11966: PUSH
11967: LD_INT 30
11969: PUSH
11970: LD_INT 31
11972: PUSH
11973: LD_INT 32
11975: PUSH
11976: LD_INT 33
11978: PUSH
11979: LD_INT 34
11981: PUSH
11982: LD_INT 36
11984: PUSH
11985: EMPTY
11986: LIST
11987: LIST
11988: LIST
11989: LIST
11990: LIST
11991: LIST
11992: LIST
11993: LIST
11994: LIST
11995: LIST
11996: LIST
11997: LIST
11998: LIST
11999: LIST
12000: LIST
12001: LIST
12002: LIST
12003: LIST
12004: LIST
12005: LIST
12006: LIST
12007: LIST
12008: LIST
12009: LIST
12010: LIST
12011: LIST
12012: LIST
12013: LIST
12014: LIST
12015: LIST
12016: LIST
12017: LIST
12018: LIST
12019: LIST
12020: LIST
12021: PUSH
12022: LD_INT 101
12024: PUSH
12025: LD_INT 102
12027: PUSH
12028: LD_INT 103
12030: PUSH
12031: LD_INT 104
12033: PUSH
12034: LD_INT 105
12036: PUSH
12037: LD_INT 106
12039: PUSH
12040: LD_INT 107
12042: PUSH
12043: LD_INT 108
12045: PUSH
12046: LD_INT 109
12048: PUSH
12049: LD_INT 110
12051: PUSH
12052: LD_INT 111
12054: PUSH
12055: LD_INT 112
12057: PUSH
12058: LD_INT 113
12060: PUSH
12061: LD_INT 114
12063: PUSH
12064: LD_INT 116
12066: PUSH
12067: LD_INT 117
12069: PUSH
12070: LD_INT 118
12072: PUSH
12073: EMPTY
12074: LIST
12075: LIST
12076: LIST
12077: LIST
12078: LIST
12079: LIST
12080: LIST
12081: LIST
12082: LIST
12083: LIST
12084: LIST
12085: LIST
12086: LIST
12087: LIST
12088: LIST
12089: LIST
12090: LIST
12091: PUSH
12092: EMPTY
12093: LIST
12094: LIST
12095: ST_TO_ADDR
12096: GO 12871
12098: LD_INT 16
12100: DOUBLE
12101: EQUAL
12102: IFTRUE 12106
12104: GO 12242
12106: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
12107: LD_ADDR_VAR 0 1
12111: PUSH
12112: LD_INT 2
12114: PUSH
12115: LD_INT 4
12117: PUSH
12118: LD_INT 5
12120: PUSH
12121: LD_INT 7
12123: PUSH
12124: LD_INT 11
12126: PUSH
12127: LD_INT 12
12129: PUSH
12130: LD_INT 15
12132: PUSH
12133: LD_INT 16
12135: PUSH
12136: LD_INT 20
12138: PUSH
12139: LD_INT 21
12141: PUSH
12142: LD_INT 22
12144: PUSH
12145: LD_INT 23
12147: PUSH
12148: LD_INT 25
12150: PUSH
12151: LD_INT 26
12153: PUSH
12154: LD_INT 30
12156: PUSH
12157: LD_INT 31
12159: PUSH
12160: LD_INT 32
12162: PUSH
12163: LD_INT 33
12165: PUSH
12166: LD_INT 34
12168: PUSH
12169: EMPTY
12170: LIST
12171: LIST
12172: LIST
12173: LIST
12174: LIST
12175: LIST
12176: LIST
12177: LIST
12178: LIST
12179: LIST
12180: LIST
12181: LIST
12182: LIST
12183: LIST
12184: LIST
12185: LIST
12186: LIST
12187: LIST
12188: LIST
12189: PUSH
12190: LD_INT 101
12192: PUSH
12193: LD_INT 102
12195: PUSH
12196: LD_INT 103
12198: PUSH
12199: LD_INT 106
12201: PUSH
12202: LD_INT 108
12204: PUSH
12205: LD_INT 112
12207: PUSH
12208: LD_INT 113
12210: PUSH
12211: LD_INT 114
12213: PUSH
12214: LD_INT 116
12216: PUSH
12217: LD_INT 117
12219: PUSH
12220: LD_INT 118
12222: PUSH
12223: EMPTY
12224: LIST
12225: LIST
12226: LIST
12227: LIST
12228: LIST
12229: LIST
12230: LIST
12231: LIST
12232: LIST
12233: LIST
12234: LIST
12235: PUSH
12236: EMPTY
12237: LIST
12238: LIST
12239: ST_TO_ADDR
12240: GO 12871
12242: LD_INT 17
12244: DOUBLE
12245: EQUAL
12246: IFTRUE 12250
12248: GO 12474
12250: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
12251: LD_ADDR_VAR 0 1
12255: PUSH
12256: LD_INT 1
12258: PUSH
12259: LD_INT 2
12261: PUSH
12262: LD_INT 3
12264: PUSH
12265: LD_INT 4
12267: PUSH
12268: LD_INT 5
12270: PUSH
12271: LD_INT 6
12273: PUSH
12274: LD_INT 7
12276: PUSH
12277: LD_INT 8
12279: PUSH
12280: LD_INT 9
12282: PUSH
12283: LD_INT 10
12285: PUSH
12286: LD_INT 11
12288: PUSH
12289: LD_INT 12
12291: PUSH
12292: LD_INT 13
12294: PUSH
12295: LD_INT 14
12297: PUSH
12298: LD_INT 15
12300: PUSH
12301: LD_INT 16
12303: PUSH
12304: LD_INT 17
12306: PUSH
12307: LD_INT 18
12309: PUSH
12310: LD_INT 19
12312: PUSH
12313: LD_INT 20
12315: PUSH
12316: LD_INT 21
12318: PUSH
12319: LD_INT 22
12321: PUSH
12322: LD_INT 23
12324: PUSH
12325: LD_INT 24
12327: PUSH
12328: LD_INT 25
12330: PUSH
12331: LD_INT 26
12333: PUSH
12334: LD_INT 27
12336: PUSH
12337: LD_INT 28
12339: PUSH
12340: LD_INT 29
12342: PUSH
12343: LD_INT 30
12345: PUSH
12346: LD_INT 31
12348: PUSH
12349: LD_INT 32
12351: PUSH
12352: LD_INT 33
12354: PUSH
12355: LD_INT 34
12357: PUSH
12358: LD_INT 36
12360: PUSH
12361: EMPTY
12362: LIST
12363: LIST
12364: LIST
12365: LIST
12366: LIST
12367: LIST
12368: LIST
12369: LIST
12370: LIST
12371: LIST
12372: LIST
12373: LIST
12374: LIST
12375: LIST
12376: LIST
12377: LIST
12378: LIST
12379: LIST
12380: LIST
12381: LIST
12382: LIST
12383: LIST
12384: LIST
12385: LIST
12386: LIST
12387: LIST
12388: LIST
12389: LIST
12390: LIST
12391: LIST
12392: LIST
12393: LIST
12394: LIST
12395: LIST
12396: LIST
12397: PUSH
12398: LD_INT 101
12400: PUSH
12401: LD_INT 102
12403: PUSH
12404: LD_INT 103
12406: PUSH
12407: LD_INT 104
12409: PUSH
12410: LD_INT 105
12412: PUSH
12413: LD_INT 106
12415: PUSH
12416: LD_INT 107
12418: PUSH
12419: LD_INT 108
12421: PUSH
12422: LD_INT 109
12424: PUSH
12425: LD_INT 110
12427: PUSH
12428: LD_INT 111
12430: PUSH
12431: LD_INT 112
12433: PUSH
12434: LD_INT 113
12436: PUSH
12437: LD_INT 114
12439: PUSH
12440: LD_INT 116
12442: PUSH
12443: LD_INT 117
12445: PUSH
12446: LD_INT 118
12448: PUSH
12449: EMPTY
12450: LIST
12451: LIST
12452: LIST
12453: LIST
12454: LIST
12455: LIST
12456: LIST
12457: LIST
12458: LIST
12459: LIST
12460: LIST
12461: LIST
12462: LIST
12463: LIST
12464: LIST
12465: LIST
12466: LIST
12467: PUSH
12468: EMPTY
12469: LIST
12470: LIST
12471: ST_TO_ADDR
12472: GO 12871
12474: LD_INT 18
12476: DOUBLE
12477: EQUAL
12478: IFTRUE 12482
12480: GO 12630
12482: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
12483: LD_ADDR_VAR 0 1
12487: PUSH
12488: LD_INT 2
12490: PUSH
12491: LD_INT 4
12493: PUSH
12494: LD_INT 5
12496: PUSH
12497: LD_INT 7
12499: PUSH
12500: LD_INT 11
12502: PUSH
12503: LD_INT 12
12505: PUSH
12506: LD_INT 15
12508: PUSH
12509: LD_INT 16
12511: PUSH
12512: LD_INT 20
12514: PUSH
12515: LD_INT 21
12517: PUSH
12518: LD_INT 22
12520: PUSH
12521: LD_INT 23
12523: PUSH
12524: LD_INT 25
12526: PUSH
12527: LD_INT 26
12529: PUSH
12530: LD_INT 30
12532: PUSH
12533: LD_INT 31
12535: PUSH
12536: LD_INT 32
12538: PUSH
12539: LD_INT 33
12541: PUSH
12542: LD_INT 34
12544: PUSH
12545: LD_INT 35
12547: PUSH
12548: LD_INT 36
12550: PUSH
12551: EMPTY
12552: LIST
12553: LIST
12554: LIST
12555: LIST
12556: LIST
12557: LIST
12558: LIST
12559: LIST
12560: LIST
12561: LIST
12562: LIST
12563: LIST
12564: LIST
12565: LIST
12566: LIST
12567: LIST
12568: LIST
12569: LIST
12570: LIST
12571: LIST
12572: LIST
12573: PUSH
12574: LD_INT 101
12576: PUSH
12577: LD_INT 102
12579: PUSH
12580: LD_INT 103
12582: PUSH
12583: LD_INT 106
12585: PUSH
12586: LD_INT 108
12588: PUSH
12589: LD_INT 112
12591: PUSH
12592: LD_INT 113
12594: PUSH
12595: LD_INT 114
12597: PUSH
12598: LD_INT 115
12600: PUSH
12601: LD_INT 116
12603: PUSH
12604: LD_INT 117
12606: PUSH
12607: LD_INT 118
12609: PUSH
12610: EMPTY
12611: LIST
12612: LIST
12613: LIST
12614: LIST
12615: LIST
12616: LIST
12617: LIST
12618: LIST
12619: LIST
12620: LIST
12621: LIST
12622: LIST
12623: PUSH
12624: EMPTY
12625: LIST
12626: LIST
12627: ST_TO_ADDR
12628: GO 12871
12630: LD_INT 19
12632: DOUBLE
12633: EQUAL
12634: IFTRUE 12638
12636: GO 12870
12638: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
12639: LD_ADDR_VAR 0 1
12643: PUSH
12644: LD_INT 1
12646: PUSH
12647: LD_INT 2
12649: PUSH
12650: LD_INT 3
12652: PUSH
12653: LD_INT 4
12655: PUSH
12656: LD_INT 5
12658: PUSH
12659: LD_INT 6
12661: PUSH
12662: LD_INT 7
12664: PUSH
12665: LD_INT 8
12667: PUSH
12668: LD_INT 9
12670: PUSH
12671: LD_INT 10
12673: PUSH
12674: LD_INT 11
12676: PUSH
12677: LD_INT 12
12679: PUSH
12680: LD_INT 13
12682: PUSH
12683: LD_INT 14
12685: PUSH
12686: LD_INT 15
12688: PUSH
12689: LD_INT 16
12691: PUSH
12692: LD_INT 17
12694: PUSH
12695: LD_INT 18
12697: PUSH
12698: LD_INT 19
12700: PUSH
12701: LD_INT 20
12703: PUSH
12704: LD_INT 21
12706: PUSH
12707: LD_INT 22
12709: PUSH
12710: LD_INT 23
12712: PUSH
12713: LD_INT 24
12715: PUSH
12716: LD_INT 25
12718: PUSH
12719: LD_INT 26
12721: PUSH
12722: LD_INT 27
12724: PUSH
12725: LD_INT 28
12727: PUSH
12728: LD_INT 29
12730: PUSH
12731: LD_INT 30
12733: PUSH
12734: LD_INT 31
12736: PUSH
12737: LD_INT 32
12739: PUSH
12740: LD_INT 33
12742: PUSH
12743: LD_INT 34
12745: PUSH
12746: LD_INT 35
12748: PUSH
12749: LD_INT 36
12751: PUSH
12752: EMPTY
12753: LIST
12754: LIST
12755: LIST
12756: LIST
12757: LIST
12758: LIST
12759: LIST
12760: LIST
12761: LIST
12762: LIST
12763: LIST
12764: LIST
12765: LIST
12766: LIST
12767: LIST
12768: LIST
12769: LIST
12770: LIST
12771: LIST
12772: LIST
12773: LIST
12774: LIST
12775: LIST
12776: LIST
12777: LIST
12778: LIST
12779: LIST
12780: LIST
12781: LIST
12782: LIST
12783: LIST
12784: LIST
12785: LIST
12786: LIST
12787: LIST
12788: LIST
12789: PUSH
12790: LD_INT 101
12792: PUSH
12793: LD_INT 102
12795: PUSH
12796: LD_INT 103
12798: PUSH
12799: LD_INT 104
12801: PUSH
12802: LD_INT 105
12804: PUSH
12805: LD_INT 106
12807: PUSH
12808: LD_INT 107
12810: PUSH
12811: LD_INT 108
12813: PUSH
12814: LD_INT 109
12816: PUSH
12817: LD_INT 110
12819: PUSH
12820: LD_INT 111
12822: PUSH
12823: LD_INT 112
12825: PUSH
12826: LD_INT 113
12828: PUSH
12829: LD_INT 114
12831: PUSH
12832: LD_INT 115
12834: PUSH
12835: LD_INT 116
12837: PUSH
12838: LD_INT 117
12840: PUSH
12841: LD_INT 118
12843: PUSH
12844: EMPTY
12845: LIST
12846: LIST
12847: LIST
12848: LIST
12849: LIST
12850: LIST
12851: LIST
12852: LIST
12853: LIST
12854: LIST
12855: LIST
12856: LIST
12857: LIST
12858: LIST
12859: LIST
12860: LIST
12861: LIST
12862: LIST
12863: PUSH
12864: EMPTY
12865: LIST
12866: LIST
12867: ST_TO_ADDR
12868: GO 12871
12870: POP
// end else
12871: GO 13102
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
12873: LD_ADDR_VAR 0 1
12877: PUSH
12878: LD_INT 1
12880: PUSH
12881: LD_INT 2
12883: PUSH
12884: LD_INT 3
12886: PUSH
12887: LD_INT 4
12889: PUSH
12890: LD_INT 5
12892: PUSH
12893: LD_INT 6
12895: PUSH
12896: LD_INT 7
12898: PUSH
12899: LD_INT 8
12901: PUSH
12902: LD_INT 9
12904: PUSH
12905: LD_INT 10
12907: PUSH
12908: LD_INT 11
12910: PUSH
12911: LD_INT 12
12913: PUSH
12914: LD_INT 13
12916: PUSH
12917: LD_INT 14
12919: PUSH
12920: LD_INT 15
12922: PUSH
12923: LD_INT 16
12925: PUSH
12926: LD_INT 17
12928: PUSH
12929: LD_INT 18
12931: PUSH
12932: LD_INT 19
12934: PUSH
12935: LD_INT 20
12937: PUSH
12938: LD_INT 21
12940: PUSH
12941: LD_INT 22
12943: PUSH
12944: LD_INT 23
12946: PUSH
12947: LD_INT 24
12949: PUSH
12950: LD_INT 25
12952: PUSH
12953: LD_INT 26
12955: PUSH
12956: LD_INT 27
12958: PUSH
12959: LD_INT 28
12961: PUSH
12962: LD_INT 29
12964: PUSH
12965: LD_INT 30
12967: PUSH
12968: LD_INT 31
12970: PUSH
12971: LD_INT 32
12973: PUSH
12974: LD_INT 33
12976: PUSH
12977: LD_INT 34
12979: PUSH
12980: LD_INT 35
12982: PUSH
12983: LD_INT 36
12985: PUSH
12986: EMPTY
12987: LIST
12988: LIST
12989: LIST
12990: LIST
12991: LIST
12992: LIST
12993: LIST
12994: LIST
12995: LIST
12996: LIST
12997: LIST
12998: LIST
12999: LIST
13000: LIST
13001: LIST
13002: LIST
13003: LIST
13004: LIST
13005: LIST
13006: LIST
13007: LIST
13008: LIST
13009: LIST
13010: LIST
13011: LIST
13012: LIST
13013: LIST
13014: LIST
13015: LIST
13016: LIST
13017: LIST
13018: LIST
13019: LIST
13020: LIST
13021: LIST
13022: LIST
13023: PUSH
13024: LD_INT 101
13026: PUSH
13027: LD_INT 102
13029: PUSH
13030: LD_INT 103
13032: PUSH
13033: LD_INT 104
13035: PUSH
13036: LD_INT 105
13038: PUSH
13039: LD_INT 106
13041: PUSH
13042: LD_INT 107
13044: PUSH
13045: LD_INT 108
13047: PUSH
13048: LD_INT 109
13050: PUSH
13051: LD_INT 110
13053: PUSH
13054: LD_INT 111
13056: PUSH
13057: LD_INT 112
13059: PUSH
13060: LD_INT 113
13062: PUSH
13063: LD_INT 114
13065: PUSH
13066: LD_INT 115
13068: PUSH
13069: LD_INT 116
13071: PUSH
13072: LD_INT 117
13074: PUSH
13075: LD_INT 118
13077: PUSH
13078: EMPTY
13079: LIST
13080: LIST
13081: LIST
13082: LIST
13083: LIST
13084: LIST
13085: LIST
13086: LIST
13087: LIST
13088: LIST
13089: LIST
13090: LIST
13091: LIST
13092: LIST
13093: LIST
13094: LIST
13095: LIST
13096: LIST
13097: PUSH
13098: EMPTY
13099: LIST
13100: LIST
13101: ST_TO_ADDR
// if result then
13102: LD_VAR 0 1
13106: IFFALSE 13395
// begin normal :=  ;
13108: LD_ADDR_VAR 0 3
13112: PUSH
13113: LD_STRING 
13115: ST_TO_ADDR
// hardcore :=  ;
13116: LD_ADDR_VAR 0 4
13120: PUSH
13121: LD_STRING 
13123: ST_TO_ADDR
// for i = 1 to normalCounter do
13124: LD_ADDR_VAR 0 5
13128: PUSH
13129: DOUBLE
13130: LD_INT 1
13132: DEC
13133: ST_TO_ADDR
13134: LD_EXP 49
13138: PUSH
13139: FOR_TO
13140: IFFALSE 13241
// begin tmp := 0 ;
13142: LD_ADDR_VAR 0 2
13146: PUSH
13147: LD_STRING 0
13149: ST_TO_ADDR
// if result [ 1 ] then
13150: LD_VAR 0 1
13154: PUSH
13155: LD_INT 1
13157: ARRAY
13158: IFFALSE 13223
// if result [ 1 ] [ 1 ] = i then
13160: LD_VAR 0 1
13164: PUSH
13165: LD_INT 1
13167: ARRAY
13168: PUSH
13169: LD_INT 1
13171: ARRAY
13172: PUSH
13173: LD_VAR 0 5
13177: EQUAL
13178: IFFALSE 13223
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
13180: LD_ADDR_VAR 0 1
13184: PUSH
13185: LD_VAR 0 1
13189: PPUSH
13190: LD_INT 1
13192: PPUSH
13193: LD_VAR 0 1
13197: PUSH
13198: LD_INT 1
13200: ARRAY
13201: PPUSH
13202: LD_INT 1
13204: PPUSH
13205: CALL_OW 3
13209: PPUSH
13210: CALL_OW 1
13214: ST_TO_ADDR
// tmp := 1 ;
13215: LD_ADDR_VAR 0 2
13219: PUSH
13220: LD_STRING 1
13222: ST_TO_ADDR
// end ; normal := normal & tmp ;
13223: LD_ADDR_VAR 0 3
13227: PUSH
13228: LD_VAR 0 3
13232: PUSH
13233: LD_VAR 0 2
13237: STR
13238: ST_TO_ADDR
// end ;
13239: GO 13139
13241: POP
13242: POP
// for i = 1 to hardcoreCounter do
13243: LD_ADDR_VAR 0 5
13247: PUSH
13248: DOUBLE
13249: LD_INT 1
13251: DEC
13252: ST_TO_ADDR
13253: LD_EXP 50
13257: PUSH
13258: FOR_TO
13259: IFFALSE 13364
// begin tmp := 0 ;
13261: LD_ADDR_VAR 0 2
13265: PUSH
13266: LD_STRING 0
13268: ST_TO_ADDR
// if result [ 2 ] then
13269: LD_VAR 0 1
13273: PUSH
13274: LD_INT 2
13276: ARRAY
13277: IFFALSE 13346
// if result [ 2 ] [ 1 ] = 100 + i then
13279: LD_VAR 0 1
13283: PUSH
13284: LD_INT 2
13286: ARRAY
13287: PUSH
13288: LD_INT 1
13290: ARRAY
13291: PUSH
13292: LD_INT 100
13294: PUSH
13295: LD_VAR 0 5
13299: PLUS
13300: EQUAL
13301: IFFALSE 13346
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
13303: LD_ADDR_VAR 0 1
13307: PUSH
13308: LD_VAR 0 1
13312: PPUSH
13313: LD_INT 2
13315: PPUSH
13316: LD_VAR 0 1
13320: PUSH
13321: LD_INT 2
13323: ARRAY
13324: PPUSH
13325: LD_INT 1
13327: PPUSH
13328: CALL_OW 3
13332: PPUSH
13333: CALL_OW 1
13337: ST_TO_ADDR
// tmp := 1 ;
13338: LD_ADDR_VAR 0 2
13342: PUSH
13343: LD_STRING 1
13345: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
13346: LD_ADDR_VAR 0 4
13350: PUSH
13351: LD_VAR 0 4
13355: PUSH
13356: LD_VAR 0 2
13360: STR
13361: ST_TO_ADDR
// end ;
13362: GO 13258
13364: POP
13365: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
13366: LD_STRING getStreamItemsFromMission("
13368: PUSH
13369: LD_VAR 0 3
13373: STR
13374: PUSH
13375: LD_STRING ","
13377: STR
13378: PUSH
13379: LD_VAR 0 4
13383: STR
13384: PUSH
13385: LD_STRING ")
13387: STR
13388: PPUSH
13389: CALL_OW 559
// end else
13393: GO 13402
// ToLua ( getStreamItemsFromMission("","") ) ;
13395: LD_STRING getStreamItemsFromMission("","")
13397: PPUSH
13398: CALL_OW 559
// end ;
13402: LD_VAR 0 1
13406: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
13407: LD_EXP 48
13411: PUSH
13412: LD_EXP 53
13416: AND
13417: IFFALSE 13541
13419: GO 13421
13421: DISABLE
13422: LD_INT 0
13424: PPUSH
13425: PPUSH
// begin enable ;
13426: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
13427: LD_ADDR_VAR 0 2
13431: PUSH
13432: LD_INT 22
13434: PUSH
13435: LD_OWVAR 2
13439: PUSH
13440: EMPTY
13441: LIST
13442: LIST
13443: PUSH
13444: LD_INT 2
13446: PUSH
13447: LD_INT 34
13449: PUSH
13450: LD_INT 7
13452: PUSH
13453: EMPTY
13454: LIST
13455: LIST
13456: PUSH
13457: LD_INT 34
13459: PUSH
13460: LD_INT 45
13462: PUSH
13463: EMPTY
13464: LIST
13465: LIST
13466: PUSH
13467: LD_INT 34
13469: PUSH
13470: LD_INT 28
13472: PUSH
13473: EMPTY
13474: LIST
13475: LIST
13476: PUSH
13477: LD_INT 34
13479: PUSH
13480: LD_INT 47
13482: PUSH
13483: EMPTY
13484: LIST
13485: LIST
13486: PUSH
13487: EMPTY
13488: LIST
13489: LIST
13490: LIST
13491: LIST
13492: LIST
13493: PUSH
13494: EMPTY
13495: LIST
13496: LIST
13497: PPUSH
13498: CALL_OW 69
13502: ST_TO_ADDR
// if not tmp then
13503: LD_VAR 0 2
13507: NOT
13508: IFFALSE 13512
// exit ;
13510: GO 13541
// for i in tmp do
13512: LD_ADDR_VAR 0 1
13516: PUSH
13517: LD_VAR 0 2
13521: PUSH
13522: FOR_IN
13523: IFFALSE 13539
// begin SetLives ( i , 0 ) ;
13525: LD_VAR 0 1
13529: PPUSH
13530: LD_INT 0
13532: PPUSH
13533: CALL_OW 234
// end ;
13537: GO 13522
13539: POP
13540: POP
// end ;
13541: PPOPN 2
13543: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
13544: LD_EXP 48
13548: PUSH
13549: LD_EXP 54
13553: AND
13554: IFFALSE 13638
13556: GO 13558
13558: DISABLE
13559: LD_INT 0
13561: PPUSH
13562: PPUSH
// begin enable ;
13563: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
13564: LD_ADDR_VAR 0 2
13568: PUSH
13569: LD_INT 22
13571: PUSH
13572: LD_OWVAR 2
13576: PUSH
13577: EMPTY
13578: LIST
13579: LIST
13580: PUSH
13581: LD_INT 32
13583: PUSH
13584: LD_INT 3
13586: PUSH
13587: EMPTY
13588: LIST
13589: LIST
13590: PUSH
13591: EMPTY
13592: LIST
13593: LIST
13594: PPUSH
13595: CALL_OW 69
13599: ST_TO_ADDR
// if not tmp then
13600: LD_VAR 0 2
13604: NOT
13605: IFFALSE 13609
// exit ;
13607: GO 13638
// for i in tmp do
13609: LD_ADDR_VAR 0 1
13613: PUSH
13614: LD_VAR 0 2
13618: PUSH
13619: FOR_IN
13620: IFFALSE 13636
// begin SetLives ( i , 0 ) ;
13622: LD_VAR 0 1
13626: PPUSH
13627: LD_INT 0
13629: PPUSH
13630: CALL_OW 234
// end ;
13634: GO 13619
13636: POP
13637: POP
// end ;
13638: PPOPN 2
13640: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
13641: LD_EXP 48
13645: PUSH
13646: LD_EXP 51
13650: AND
13651: IFFALSE 13744
13653: GO 13655
13655: DISABLE
13656: LD_INT 0
13658: PPUSH
// begin enable ;
13659: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
13660: LD_ADDR_VAR 0 1
13664: PUSH
13665: LD_INT 22
13667: PUSH
13668: LD_OWVAR 2
13672: PUSH
13673: EMPTY
13674: LIST
13675: LIST
13676: PUSH
13677: LD_INT 2
13679: PUSH
13680: LD_INT 25
13682: PUSH
13683: LD_INT 5
13685: PUSH
13686: EMPTY
13687: LIST
13688: LIST
13689: PUSH
13690: LD_INT 25
13692: PUSH
13693: LD_INT 9
13695: PUSH
13696: EMPTY
13697: LIST
13698: LIST
13699: PUSH
13700: LD_INT 25
13702: PUSH
13703: LD_INT 8
13705: PUSH
13706: EMPTY
13707: LIST
13708: LIST
13709: PUSH
13710: EMPTY
13711: LIST
13712: LIST
13713: LIST
13714: LIST
13715: PUSH
13716: EMPTY
13717: LIST
13718: LIST
13719: PPUSH
13720: CALL_OW 69
13724: PUSH
13725: FOR_IN
13726: IFFALSE 13742
// begin SetClass ( i , 1 ) ;
13728: LD_VAR 0 1
13732: PPUSH
13733: LD_INT 1
13735: PPUSH
13736: CALL_OW 336
// end ;
13740: GO 13725
13742: POP
13743: POP
// end ;
13744: PPOPN 1
13746: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
13747: LD_EXP 48
13751: PUSH
13752: LD_EXP 52
13756: AND
13757: PUSH
13758: LD_OWVAR 65
13762: PUSH
13763: LD_INT 7
13765: LESS
13766: AND
13767: IFFALSE 13781
13769: GO 13771
13771: DISABLE
// begin enable ;
13772: ENABLE
// game_speed := 7 ;
13773: LD_ADDR_OWVAR 65
13777: PUSH
13778: LD_INT 7
13780: ST_TO_ADDR
// end ;
13781: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
13782: LD_EXP 48
13786: PUSH
13787: LD_EXP 55
13791: AND
13792: IFFALSE 13994
13794: GO 13796
13796: DISABLE
13797: LD_INT 0
13799: PPUSH
13800: PPUSH
13801: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
13802: LD_ADDR_VAR 0 3
13806: PUSH
13807: LD_INT 81
13809: PUSH
13810: LD_OWVAR 2
13814: PUSH
13815: EMPTY
13816: LIST
13817: LIST
13818: PUSH
13819: LD_INT 21
13821: PUSH
13822: LD_INT 1
13824: PUSH
13825: EMPTY
13826: LIST
13827: LIST
13828: PUSH
13829: EMPTY
13830: LIST
13831: LIST
13832: PPUSH
13833: CALL_OW 69
13837: ST_TO_ADDR
// if not tmp then
13838: LD_VAR 0 3
13842: NOT
13843: IFFALSE 13847
// exit ;
13845: GO 13994
// if tmp > 5 then
13847: LD_VAR 0 3
13851: PUSH
13852: LD_INT 5
13854: GREATER
13855: IFFALSE 13867
// k := 5 else
13857: LD_ADDR_VAR 0 2
13861: PUSH
13862: LD_INT 5
13864: ST_TO_ADDR
13865: GO 13877
// k := tmp ;
13867: LD_ADDR_VAR 0 2
13871: PUSH
13872: LD_VAR 0 3
13876: ST_TO_ADDR
// for i := 1 to k do
13877: LD_ADDR_VAR 0 1
13881: PUSH
13882: DOUBLE
13883: LD_INT 1
13885: DEC
13886: ST_TO_ADDR
13887: LD_VAR 0 2
13891: PUSH
13892: FOR_TO
13893: IFFALSE 13992
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
13895: LD_VAR 0 3
13899: PUSH
13900: LD_VAR 0 1
13904: ARRAY
13905: PPUSH
13906: LD_VAR 0 1
13910: PUSH
13911: LD_INT 4
13913: MOD
13914: PUSH
13915: LD_INT 1
13917: PLUS
13918: PPUSH
13919: CALL_OW 259
13923: PUSH
13924: LD_INT 10
13926: LESS
13927: IFFALSE 13990
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
13929: LD_VAR 0 3
13933: PUSH
13934: LD_VAR 0 1
13938: ARRAY
13939: PPUSH
13940: LD_VAR 0 1
13944: PUSH
13945: LD_INT 4
13947: MOD
13948: PUSH
13949: LD_INT 1
13951: PLUS
13952: PPUSH
13953: LD_VAR 0 3
13957: PUSH
13958: LD_VAR 0 1
13962: ARRAY
13963: PPUSH
13964: LD_VAR 0 1
13968: PUSH
13969: LD_INT 4
13971: MOD
13972: PUSH
13973: LD_INT 1
13975: PLUS
13976: PPUSH
13977: CALL_OW 259
13981: PUSH
13982: LD_INT 1
13984: PLUS
13985: PPUSH
13986: CALL_OW 237
13990: GO 13892
13992: POP
13993: POP
// end ;
13994: PPOPN 3
13996: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
13997: LD_EXP 48
14001: PUSH
14002: LD_EXP 56
14006: AND
14007: IFFALSE 14027
14009: GO 14011
14011: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
14012: LD_INT 4
14014: PPUSH
14015: LD_OWVAR 2
14019: PPUSH
14020: LD_INT 0
14022: PPUSH
14023: CALL_OW 324
14027: END
// every 0 0$1 trigger StreamModeActive and sShovel do
14028: LD_EXP 48
14032: PUSH
14033: LD_EXP 85
14037: AND
14038: IFFALSE 14058
14040: GO 14042
14042: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
14043: LD_INT 19
14045: PPUSH
14046: LD_OWVAR 2
14050: PPUSH
14051: LD_INT 0
14053: PPUSH
14054: CALL_OW 324
14058: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
14059: LD_EXP 48
14063: PUSH
14064: LD_EXP 57
14068: AND
14069: IFFALSE 14171
14071: GO 14073
14073: DISABLE
14074: LD_INT 0
14076: PPUSH
14077: PPUSH
// begin enable ;
14078: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
14079: LD_ADDR_VAR 0 2
14083: PUSH
14084: LD_INT 22
14086: PUSH
14087: LD_OWVAR 2
14091: PUSH
14092: EMPTY
14093: LIST
14094: LIST
14095: PUSH
14096: LD_INT 2
14098: PUSH
14099: LD_INT 34
14101: PUSH
14102: LD_INT 11
14104: PUSH
14105: EMPTY
14106: LIST
14107: LIST
14108: PUSH
14109: LD_INT 34
14111: PUSH
14112: LD_INT 30
14114: PUSH
14115: EMPTY
14116: LIST
14117: LIST
14118: PUSH
14119: EMPTY
14120: LIST
14121: LIST
14122: LIST
14123: PUSH
14124: EMPTY
14125: LIST
14126: LIST
14127: PPUSH
14128: CALL_OW 69
14132: ST_TO_ADDR
// if not tmp then
14133: LD_VAR 0 2
14137: NOT
14138: IFFALSE 14142
// exit ;
14140: GO 14171
// for i in tmp do
14142: LD_ADDR_VAR 0 1
14146: PUSH
14147: LD_VAR 0 2
14151: PUSH
14152: FOR_IN
14153: IFFALSE 14169
// begin SetLives ( i , 0 ) ;
14155: LD_VAR 0 1
14159: PPUSH
14160: LD_INT 0
14162: PPUSH
14163: CALL_OW 234
// end ;
14167: GO 14152
14169: POP
14170: POP
// end ;
14171: PPOPN 2
14173: END
// every 0 0$1 trigger StreamModeActive and sBunker do
14174: LD_EXP 48
14178: PUSH
14179: LD_EXP 58
14183: AND
14184: IFFALSE 14204
14186: GO 14188
14188: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
14189: LD_INT 32
14191: PPUSH
14192: LD_OWVAR 2
14196: PPUSH
14197: LD_INT 0
14199: PPUSH
14200: CALL_OW 324
14204: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
14205: LD_EXP 48
14209: PUSH
14210: LD_EXP 59
14214: AND
14215: IFFALSE 14396
14217: GO 14219
14219: DISABLE
14220: LD_INT 0
14222: PPUSH
14223: PPUSH
14224: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
14225: LD_ADDR_VAR 0 2
14229: PUSH
14230: LD_INT 22
14232: PUSH
14233: LD_OWVAR 2
14237: PUSH
14238: EMPTY
14239: LIST
14240: LIST
14241: PUSH
14242: LD_INT 33
14244: PUSH
14245: LD_INT 3
14247: PUSH
14248: EMPTY
14249: LIST
14250: LIST
14251: PUSH
14252: EMPTY
14253: LIST
14254: LIST
14255: PPUSH
14256: CALL_OW 69
14260: ST_TO_ADDR
// if not tmp then
14261: LD_VAR 0 2
14265: NOT
14266: IFFALSE 14270
// exit ;
14268: GO 14396
// side := 0 ;
14270: LD_ADDR_VAR 0 3
14274: PUSH
14275: LD_INT 0
14277: ST_TO_ADDR
// for i := 1 to 8 do
14278: LD_ADDR_VAR 0 1
14282: PUSH
14283: DOUBLE
14284: LD_INT 1
14286: DEC
14287: ST_TO_ADDR
14288: LD_INT 8
14290: PUSH
14291: FOR_TO
14292: IFFALSE 14340
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
14294: LD_OWVAR 2
14298: PUSH
14299: LD_VAR 0 1
14303: NONEQUAL
14304: PUSH
14305: LD_OWVAR 2
14309: PPUSH
14310: LD_VAR 0 1
14314: PPUSH
14315: CALL_OW 81
14319: PUSH
14320: LD_INT 2
14322: EQUAL
14323: AND
14324: IFFALSE 14338
// begin side := i ;
14326: LD_ADDR_VAR 0 3
14330: PUSH
14331: LD_VAR 0 1
14335: ST_TO_ADDR
// break ;
14336: GO 14340
// end ;
14338: GO 14291
14340: POP
14341: POP
// if not side then
14342: LD_VAR 0 3
14346: NOT
14347: IFFALSE 14351
// exit ;
14349: GO 14396
// for i := 1 to tmp do
14351: LD_ADDR_VAR 0 1
14355: PUSH
14356: DOUBLE
14357: LD_INT 1
14359: DEC
14360: ST_TO_ADDR
14361: LD_VAR 0 2
14365: PUSH
14366: FOR_TO
14367: IFFALSE 14394
// if Prob ( 60 ) then
14369: LD_INT 60
14371: PPUSH
14372: CALL_OW 13
14376: IFFALSE 14392
// SetSide ( i , side ) ;
14378: LD_VAR 0 1
14382: PPUSH
14383: LD_VAR 0 3
14387: PPUSH
14388: CALL_OW 235
14392: GO 14366
14394: POP
14395: POP
// end ;
14396: PPOPN 3
14398: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
14399: LD_EXP 48
14403: PUSH
14404: LD_EXP 61
14408: AND
14409: IFFALSE 14528
14411: GO 14413
14413: DISABLE
14414: LD_INT 0
14416: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
14417: LD_ADDR_VAR 0 1
14421: PUSH
14422: LD_INT 22
14424: PUSH
14425: LD_OWVAR 2
14429: PUSH
14430: EMPTY
14431: LIST
14432: LIST
14433: PUSH
14434: LD_INT 21
14436: PUSH
14437: LD_INT 1
14439: PUSH
14440: EMPTY
14441: LIST
14442: LIST
14443: PUSH
14444: LD_INT 3
14446: PUSH
14447: LD_INT 23
14449: PUSH
14450: LD_INT 0
14452: PUSH
14453: EMPTY
14454: LIST
14455: LIST
14456: PUSH
14457: EMPTY
14458: LIST
14459: LIST
14460: PUSH
14461: EMPTY
14462: LIST
14463: LIST
14464: LIST
14465: PPUSH
14466: CALL_OW 69
14470: PUSH
14471: FOR_IN
14472: IFFALSE 14526
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
14474: LD_VAR 0 1
14478: PPUSH
14479: CALL_OW 257
14483: PUSH
14484: LD_INT 1
14486: PUSH
14487: LD_INT 2
14489: PUSH
14490: LD_INT 3
14492: PUSH
14493: LD_INT 4
14495: PUSH
14496: EMPTY
14497: LIST
14498: LIST
14499: LIST
14500: LIST
14501: IN
14502: IFFALSE 14524
// SetClass ( un , rand ( 1 , 4 ) ) ;
14504: LD_VAR 0 1
14508: PPUSH
14509: LD_INT 1
14511: PPUSH
14512: LD_INT 4
14514: PPUSH
14515: CALL_OW 12
14519: PPUSH
14520: CALL_OW 336
14524: GO 14471
14526: POP
14527: POP
// end ;
14528: PPOPN 1
14530: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
14531: LD_EXP 48
14535: PUSH
14536: LD_EXP 60
14540: AND
14541: IFFALSE 14620
14543: GO 14545
14545: DISABLE
14546: LD_INT 0
14548: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
14549: LD_ADDR_VAR 0 1
14553: PUSH
14554: LD_INT 22
14556: PUSH
14557: LD_OWVAR 2
14561: PUSH
14562: EMPTY
14563: LIST
14564: LIST
14565: PUSH
14566: LD_INT 21
14568: PUSH
14569: LD_INT 3
14571: PUSH
14572: EMPTY
14573: LIST
14574: LIST
14575: PUSH
14576: EMPTY
14577: LIST
14578: LIST
14579: PPUSH
14580: CALL_OW 69
14584: ST_TO_ADDR
// if not tmp then
14585: LD_VAR 0 1
14589: NOT
14590: IFFALSE 14594
// exit ;
14592: GO 14620
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
14594: LD_VAR 0 1
14598: PUSH
14599: LD_INT 1
14601: PPUSH
14602: LD_VAR 0 1
14606: PPUSH
14607: CALL_OW 12
14611: ARRAY
14612: PPUSH
14613: LD_INT 100
14615: PPUSH
14616: CALL_OW 234
// end ;
14620: PPOPN 1
14622: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
14623: LD_EXP 48
14627: PUSH
14628: LD_EXP 62
14632: AND
14633: IFFALSE 14731
14635: GO 14637
14637: DISABLE
14638: LD_INT 0
14640: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
14641: LD_ADDR_VAR 0 1
14645: PUSH
14646: LD_INT 22
14648: PUSH
14649: LD_OWVAR 2
14653: PUSH
14654: EMPTY
14655: LIST
14656: LIST
14657: PUSH
14658: LD_INT 21
14660: PUSH
14661: LD_INT 1
14663: PUSH
14664: EMPTY
14665: LIST
14666: LIST
14667: PUSH
14668: EMPTY
14669: LIST
14670: LIST
14671: PPUSH
14672: CALL_OW 69
14676: ST_TO_ADDR
// if not tmp then
14677: LD_VAR 0 1
14681: NOT
14682: IFFALSE 14686
// exit ;
14684: GO 14731
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
14686: LD_VAR 0 1
14690: PUSH
14691: LD_INT 1
14693: PPUSH
14694: LD_VAR 0 1
14698: PPUSH
14699: CALL_OW 12
14703: ARRAY
14704: PPUSH
14705: LD_INT 1
14707: PPUSH
14708: LD_INT 4
14710: PPUSH
14711: CALL_OW 12
14715: PPUSH
14716: LD_INT 3000
14718: PPUSH
14719: LD_INT 9000
14721: PPUSH
14722: CALL_OW 12
14726: PPUSH
14727: CALL_OW 492
// end ;
14731: PPOPN 1
14733: END
// every 0 0$1 trigger StreamModeActive and sDepot do
14734: LD_EXP 48
14738: PUSH
14739: LD_EXP 63
14743: AND
14744: IFFALSE 14764
14746: GO 14748
14748: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
14749: LD_INT 1
14751: PPUSH
14752: LD_OWVAR 2
14756: PPUSH
14757: LD_INT 0
14759: PPUSH
14760: CALL_OW 324
14764: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
14765: LD_EXP 48
14769: PUSH
14770: LD_EXP 64
14774: AND
14775: IFFALSE 14858
14777: GO 14779
14779: DISABLE
14780: LD_INT 0
14782: PPUSH
14783: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
14784: LD_ADDR_VAR 0 2
14788: PUSH
14789: LD_INT 22
14791: PUSH
14792: LD_OWVAR 2
14796: PUSH
14797: EMPTY
14798: LIST
14799: LIST
14800: PUSH
14801: LD_INT 21
14803: PUSH
14804: LD_INT 3
14806: PUSH
14807: EMPTY
14808: LIST
14809: LIST
14810: PUSH
14811: EMPTY
14812: LIST
14813: LIST
14814: PPUSH
14815: CALL_OW 69
14819: ST_TO_ADDR
// if not tmp then
14820: LD_VAR 0 2
14824: NOT
14825: IFFALSE 14829
// exit ;
14827: GO 14858
// for i in tmp do
14829: LD_ADDR_VAR 0 1
14833: PUSH
14834: LD_VAR 0 2
14838: PUSH
14839: FOR_IN
14840: IFFALSE 14856
// SetBLevel ( i , 10 ) ;
14842: LD_VAR 0 1
14846: PPUSH
14847: LD_INT 10
14849: PPUSH
14850: CALL_OW 241
14854: GO 14839
14856: POP
14857: POP
// end ;
14858: PPOPN 2
14860: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
14861: LD_EXP 48
14865: PUSH
14866: LD_EXP 65
14870: AND
14871: IFFALSE 14982
14873: GO 14875
14875: DISABLE
14876: LD_INT 0
14878: PPUSH
14879: PPUSH
14880: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
14881: LD_ADDR_VAR 0 3
14885: PUSH
14886: LD_INT 22
14888: PUSH
14889: LD_OWVAR 2
14893: PUSH
14894: EMPTY
14895: LIST
14896: LIST
14897: PUSH
14898: LD_INT 25
14900: PUSH
14901: LD_INT 1
14903: PUSH
14904: EMPTY
14905: LIST
14906: LIST
14907: PUSH
14908: EMPTY
14909: LIST
14910: LIST
14911: PPUSH
14912: CALL_OW 69
14916: ST_TO_ADDR
// if not tmp then
14917: LD_VAR 0 3
14921: NOT
14922: IFFALSE 14926
// exit ;
14924: GO 14982
// un := tmp [ rand ( 1 , tmp ) ] ;
14926: LD_ADDR_VAR 0 2
14930: PUSH
14931: LD_VAR 0 3
14935: PUSH
14936: LD_INT 1
14938: PPUSH
14939: LD_VAR 0 3
14943: PPUSH
14944: CALL_OW 12
14948: ARRAY
14949: ST_TO_ADDR
// if Crawls ( un ) then
14950: LD_VAR 0 2
14954: PPUSH
14955: CALL_OW 318
14959: IFFALSE 14970
// ComWalk ( un ) ;
14961: LD_VAR 0 2
14965: PPUSH
14966: CALL_OW 138
// SetClass ( un , class_sniper ) ;
14970: LD_VAR 0 2
14974: PPUSH
14975: LD_INT 5
14977: PPUSH
14978: CALL_OW 336
// end ;
14982: PPOPN 3
14984: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
14985: LD_EXP 48
14989: PUSH
14990: LD_EXP 66
14994: AND
14995: PUSH
14996: LD_OWVAR 67
15000: PUSH
15001: LD_INT 4
15003: LESS
15004: AND
15005: IFFALSE 15024
15007: GO 15009
15009: DISABLE
// begin Difficulty := Difficulty + 1 ;
15010: LD_ADDR_OWVAR 67
15014: PUSH
15015: LD_OWVAR 67
15019: PUSH
15020: LD_INT 1
15022: PLUS
15023: ST_TO_ADDR
// end ;
15024: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
15025: LD_EXP 48
15029: PUSH
15030: LD_EXP 67
15034: AND
15035: IFFALSE 15138
15037: GO 15039
15039: DISABLE
15040: LD_INT 0
15042: PPUSH
// begin for i := 1 to 5 do
15043: LD_ADDR_VAR 0 1
15047: PUSH
15048: DOUBLE
15049: LD_INT 1
15051: DEC
15052: ST_TO_ADDR
15053: LD_INT 5
15055: PUSH
15056: FOR_TO
15057: IFFALSE 15136
// begin uc_nation := nation_nature ;
15059: LD_ADDR_OWVAR 21
15063: PUSH
15064: LD_INT 0
15066: ST_TO_ADDR
// uc_side := 0 ;
15067: LD_ADDR_OWVAR 20
15071: PUSH
15072: LD_INT 0
15074: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
15075: LD_ADDR_OWVAR 29
15079: PUSH
15080: LD_INT 12
15082: PUSH
15083: LD_INT 12
15085: PUSH
15086: EMPTY
15087: LIST
15088: LIST
15089: ST_TO_ADDR
// hc_agressivity := 20 ;
15090: LD_ADDR_OWVAR 35
15094: PUSH
15095: LD_INT 20
15097: ST_TO_ADDR
// hc_class := class_tiger ;
15098: LD_ADDR_OWVAR 28
15102: PUSH
15103: LD_INT 14
15105: ST_TO_ADDR
// hc_gallery :=  ;
15106: LD_ADDR_OWVAR 33
15110: PUSH
15111: LD_STRING 
15113: ST_TO_ADDR
// hc_name :=  ;
15114: LD_ADDR_OWVAR 26
15118: PUSH
15119: LD_STRING 
15121: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
15122: CALL_OW 44
15126: PPUSH
15127: LD_INT 0
15129: PPUSH
15130: CALL_OW 51
// end ;
15134: GO 15056
15136: POP
15137: POP
// end ;
15138: PPOPN 1
15140: END
// every 0 0$1 trigger StreamModeActive and sBomb do
15141: LD_EXP 48
15145: PUSH
15146: LD_EXP 68
15150: AND
15151: IFFALSE 15160
15153: GO 15155
15155: DISABLE
// StreamSibBomb ;
15156: CALL 15161 0 0
15160: END
// export function StreamSibBomb ; var i , x , y ; begin
15161: LD_INT 0
15163: PPUSH
15164: PPUSH
15165: PPUSH
15166: PPUSH
// result := false ;
15167: LD_ADDR_VAR 0 1
15171: PUSH
15172: LD_INT 0
15174: ST_TO_ADDR
// for i := 1 to 16 do
15175: LD_ADDR_VAR 0 2
15179: PUSH
15180: DOUBLE
15181: LD_INT 1
15183: DEC
15184: ST_TO_ADDR
15185: LD_INT 16
15187: PUSH
15188: FOR_TO
15189: IFFALSE 15388
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
15191: LD_ADDR_VAR 0 3
15195: PUSH
15196: LD_INT 10
15198: PUSH
15199: LD_INT 20
15201: PUSH
15202: LD_INT 30
15204: PUSH
15205: LD_INT 40
15207: PUSH
15208: LD_INT 50
15210: PUSH
15211: LD_INT 60
15213: PUSH
15214: LD_INT 70
15216: PUSH
15217: LD_INT 80
15219: PUSH
15220: LD_INT 90
15222: PUSH
15223: LD_INT 100
15225: PUSH
15226: LD_INT 110
15228: PUSH
15229: LD_INT 120
15231: PUSH
15232: LD_INT 130
15234: PUSH
15235: LD_INT 140
15237: PUSH
15238: LD_INT 150
15240: PUSH
15241: EMPTY
15242: LIST
15243: LIST
15244: LIST
15245: LIST
15246: LIST
15247: LIST
15248: LIST
15249: LIST
15250: LIST
15251: LIST
15252: LIST
15253: LIST
15254: LIST
15255: LIST
15256: LIST
15257: PUSH
15258: LD_INT 1
15260: PPUSH
15261: LD_INT 15
15263: PPUSH
15264: CALL_OW 12
15268: ARRAY
15269: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
15270: LD_ADDR_VAR 0 4
15274: PUSH
15275: LD_INT 10
15277: PUSH
15278: LD_INT 20
15280: PUSH
15281: LD_INT 30
15283: PUSH
15284: LD_INT 40
15286: PUSH
15287: LD_INT 50
15289: PUSH
15290: LD_INT 60
15292: PUSH
15293: LD_INT 70
15295: PUSH
15296: LD_INT 80
15298: PUSH
15299: LD_INT 90
15301: PUSH
15302: LD_INT 100
15304: PUSH
15305: LD_INT 110
15307: PUSH
15308: LD_INT 120
15310: PUSH
15311: LD_INT 130
15313: PUSH
15314: LD_INT 140
15316: PUSH
15317: LD_INT 150
15319: PUSH
15320: EMPTY
15321: LIST
15322: LIST
15323: LIST
15324: LIST
15325: LIST
15326: LIST
15327: LIST
15328: LIST
15329: LIST
15330: LIST
15331: LIST
15332: LIST
15333: LIST
15334: LIST
15335: LIST
15336: PUSH
15337: LD_INT 1
15339: PPUSH
15340: LD_INT 15
15342: PPUSH
15343: CALL_OW 12
15347: ARRAY
15348: ST_TO_ADDR
// if ValidHex ( x , y ) then
15349: LD_VAR 0 3
15353: PPUSH
15354: LD_VAR 0 4
15358: PPUSH
15359: CALL_OW 488
15363: IFFALSE 15386
// begin result := [ x , y ] ;
15365: LD_ADDR_VAR 0 1
15369: PUSH
15370: LD_VAR 0 3
15374: PUSH
15375: LD_VAR 0 4
15379: PUSH
15380: EMPTY
15381: LIST
15382: LIST
15383: ST_TO_ADDR
// break ;
15384: GO 15388
// end ; end ;
15386: GO 15188
15388: POP
15389: POP
// if result then
15390: LD_VAR 0 1
15394: IFFALSE 15454
// begin ToLua ( playSibBomb() ) ;
15396: LD_STRING playSibBomb()
15398: PPUSH
15399: CALL_OW 559
// wait ( 0 0$14 ) ;
15403: LD_INT 490
15405: PPUSH
15406: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
15410: LD_VAR 0 1
15414: PUSH
15415: LD_INT 1
15417: ARRAY
15418: PPUSH
15419: LD_VAR 0 1
15423: PUSH
15424: LD_INT 2
15426: ARRAY
15427: PPUSH
15428: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
15432: LD_VAR 0 1
15436: PUSH
15437: LD_INT 1
15439: ARRAY
15440: PPUSH
15441: LD_VAR 0 1
15445: PUSH
15446: LD_INT 2
15448: ARRAY
15449: PPUSH
15450: CALL_OW 429
// end ; end ;
15454: LD_VAR 0 1
15458: RET
// every 0 0$1 trigger StreamModeActive and sReset do
15459: LD_EXP 48
15463: PUSH
15464: LD_EXP 70
15468: AND
15469: IFFALSE 15481
15471: GO 15473
15473: DISABLE
// YouLost (  ) ;
15474: LD_STRING 
15476: PPUSH
15477: CALL_OW 104
15481: END
// every 0 0$1 trigger StreamModeActive and sFog do
15482: LD_EXP 48
15486: PUSH
15487: LD_EXP 69
15491: AND
15492: IFFALSE 15506
15494: GO 15496
15496: DISABLE
// FogOff ( your_side ) ;
15497: LD_OWVAR 2
15501: PPUSH
15502: CALL_OW 344
15506: END
// every 0 0$1 trigger StreamModeActive and sSun do
15507: LD_EXP 48
15511: PUSH
15512: LD_EXP 71
15516: AND
15517: IFFALSE 15545
15519: GO 15521
15521: DISABLE
// begin solar_recharge_percent := 0 ;
15522: LD_ADDR_OWVAR 79
15526: PUSH
15527: LD_INT 0
15529: ST_TO_ADDR
// wait ( 5 5$00 ) ;
15530: LD_INT 10500
15532: PPUSH
15533: CALL_OW 67
// solar_recharge_percent := 100 ;
15537: LD_ADDR_OWVAR 79
15541: PUSH
15542: LD_INT 100
15544: ST_TO_ADDR
// end ;
15545: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
15546: LD_EXP 48
15550: PUSH
15551: LD_EXP 72
15555: AND
15556: IFFALSE 15795
15558: GO 15560
15560: DISABLE
15561: LD_INT 0
15563: PPUSH
15564: PPUSH
15565: PPUSH
// begin tmp := [ ] ;
15566: LD_ADDR_VAR 0 3
15570: PUSH
15571: EMPTY
15572: ST_TO_ADDR
// for i := 1 to 6 do
15573: LD_ADDR_VAR 0 1
15577: PUSH
15578: DOUBLE
15579: LD_INT 1
15581: DEC
15582: ST_TO_ADDR
15583: LD_INT 6
15585: PUSH
15586: FOR_TO
15587: IFFALSE 15692
// begin uc_nation := nation_nature ;
15589: LD_ADDR_OWVAR 21
15593: PUSH
15594: LD_INT 0
15596: ST_TO_ADDR
// uc_side := 0 ;
15597: LD_ADDR_OWVAR 20
15601: PUSH
15602: LD_INT 0
15604: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
15605: LD_ADDR_OWVAR 29
15609: PUSH
15610: LD_INT 12
15612: PUSH
15613: LD_INT 12
15615: PUSH
15616: EMPTY
15617: LIST
15618: LIST
15619: ST_TO_ADDR
// hc_agressivity := 20 ;
15620: LD_ADDR_OWVAR 35
15624: PUSH
15625: LD_INT 20
15627: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
15628: LD_ADDR_OWVAR 28
15632: PUSH
15633: LD_INT 17
15635: ST_TO_ADDR
// hc_gallery :=  ;
15636: LD_ADDR_OWVAR 33
15640: PUSH
15641: LD_STRING 
15643: ST_TO_ADDR
// hc_name :=  ;
15644: LD_ADDR_OWVAR 26
15648: PUSH
15649: LD_STRING 
15651: ST_TO_ADDR
// un := CreateHuman ;
15652: LD_ADDR_VAR 0 2
15656: PUSH
15657: CALL_OW 44
15661: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
15662: LD_VAR 0 2
15666: PPUSH
15667: LD_INT 1
15669: PPUSH
15670: CALL_OW 51
// tmp := tmp ^ un ;
15674: LD_ADDR_VAR 0 3
15678: PUSH
15679: LD_VAR 0 3
15683: PUSH
15684: LD_VAR 0 2
15688: ADD
15689: ST_TO_ADDR
// end ;
15690: GO 15586
15692: POP
15693: POP
// repeat wait ( 0 0$1 ) ;
15694: LD_INT 35
15696: PPUSH
15697: CALL_OW 67
// for un in tmp do
15701: LD_ADDR_VAR 0 2
15705: PUSH
15706: LD_VAR 0 3
15710: PUSH
15711: FOR_IN
15712: IFFALSE 15786
// begin if IsDead ( un ) then
15714: LD_VAR 0 2
15718: PPUSH
15719: CALL_OW 301
15723: IFFALSE 15743
// begin tmp := tmp diff un ;
15725: LD_ADDR_VAR 0 3
15729: PUSH
15730: LD_VAR 0 3
15734: PUSH
15735: LD_VAR 0 2
15739: DIFF
15740: ST_TO_ADDR
// continue ;
15741: GO 15711
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
15743: LD_VAR 0 2
15747: PPUSH
15748: LD_INT 3
15750: PUSH
15751: LD_INT 22
15753: PUSH
15754: LD_INT 0
15756: PUSH
15757: EMPTY
15758: LIST
15759: LIST
15760: PUSH
15761: EMPTY
15762: LIST
15763: LIST
15764: PPUSH
15765: CALL_OW 69
15769: PPUSH
15770: LD_VAR 0 2
15774: PPUSH
15775: CALL_OW 74
15779: PPUSH
15780: CALL_OW 115
// end ;
15784: GO 15711
15786: POP
15787: POP
// until not tmp ;
15788: LD_VAR 0 3
15792: NOT
15793: IFFALSE 15694
// end ;
15795: PPOPN 3
15797: END
// every 0 0$1 trigger StreamModeActive and sTroll do
15798: LD_EXP 48
15802: PUSH
15803: LD_EXP 73
15807: AND
15808: IFFALSE 15862
15810: GO 15812
15812: DISABLE
// begin ToLua ( displayTroll(); ) ;
15813: LD_STRING displayTroll();
15815: PPUSH
15816: CALL_OW 559
// wait ( 3 3$00 ) ;
15820: LD_INT 6300
15822: PPUSH
15823: CALL_OW 67
// ToLua ( hideTroll(); ) ;
15827: LD_STRING hideTroll();
15829: PPUSH
15830: CALL_OW 559
// wait ( 1 1$00 ) ;
15834: LD_INT 2100
15836: PPUSH
15837: CALL_OW 67
// ToLua ( displayTroll(); ) ;
15841: LD_STRING displayTroll();
15843: PPUSH
15844: CALL_OW 559
// wait ( 1 1$00 ) ;
15848: LD_INT 2100
15850: PPUSH
15851: CALL_OW 67
// ToLua ( hideTroll(); ) ;
15855: LD_STRING hideTroll();
15857: PPUSH
15858: CALL_OW 559
// end ;
15862: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
15863: LD_EXP 48
15867: PUSH
15868: LD_EXP 74
15872: AND
15873: IFFALSE 15936
15875: GO 15877
15877: DISABLE
15878: LD_INT 0
15880: PPUSH
// begin p := 0 ;
15881: LD_ADDR_VAR 0 1
15885: PUSH
15886: LD_INT 0
15888: ST_TO_ADDR
// repeat game_speed := 1 ;
15889: LD_ADDR_OWVAR 65
15893: PUSH
15894: LD_INT 1
15896: ST_TO_ADDR
// wait ( 0 0$1 ) ;
15897: LD_INT 35
15899: PPUSH
15900: CALL_OW 67
// p := p + 1 ;
15904: LD_ADDR_VAR 0 1
15908: PUSH
15909: LD_VAR 0 1
15913: PUSH
15914: LD_INT 1
15916: PLUS
15917: ST_TO_ADDR
// until p >= 60 ;
15918: LD_VAR 0 1
15922: PUSH
15923: LD_INT 60
15925: GREATEREQUAL
15926: IFFALSE 15889
// game_speed := 4 ;
15928: LD_ADDR_OWVAR 65
15932: PUSH
15933: LD_INT 4
15935: ST_TO_ADDR
// end ;
15936: PPOPN 1
15938: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
15939: LD_EXP 48
15943: PUSH
15944: LD_EXP 75
15948: AND
15949: IFFALSE 16095
15951: GO 15953
15953: DISABLE
15954: LD_INT 0
15956: PPUSH
15957: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15958: LD_ADDR_VAR 0 1
15962: PUSH
15963: LD_INT 22
15965: PUSH
15966: LD_OWVAR 2
15970: PUSH
15971: EMPTY
15972: LIST
15973: LIST
15974: PUSH
15975: LD_INT 2
15977: PUSH
15978: LD_INT 30
15980: PUSH
15981: LD_INT 0
15983: PUSH
15984: EMPTY
15985: LIST
15986: LIST
15987: PUSH
15988: LD_INT 30
15990: PUSH
15991: LD_INT 1
15993: PUSH
15994: EMPTY
15995: LIST
15996: LIST
15997: PUSH
15998: EMPTY
15999: LIST
16000: LIST
16001: LIST
16002: PUSH
16003: EMPTY
16004: LIST
16005: LIST
16006: PPUSH
16007: CALL_OW 69
16011: ST_TO_ADDR
// if not depot then
16012: LD_VAR 0 1
16016: NOT
16017: IFFALSE 16021
// exit ;
16019: GO 16095
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
16021: LD_ADDR_VAR 0 2
16025: PUSH
16026: LD_VAR 0 1
16030: PUSH
16031: LD_INT 1
16033: PPUSH
16034: LD_VAR 0 1
16038: PPUSH
16039: CALL_OW 12
16043: ARRAY
16044: PPUSH
16045: CALL_OW 274
16049: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
16050: LD_VAR 0 2
16054: PPUSH
16055: LD_INT 1
16057: PPUSH
16058: LD_INT 0
16060: PPUSH
16061: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
16065: LD_VAR 0 2
16069: PPUSH
16070: LD_INT 2
16072: PPUSH
16073: LD_INT 0
16075: PPUSH
16076: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
16080: LD_VAR 0 2
16084: PPUSH
16085: LD_INT 3
16087: PPUSH
16088: LD_INT 0
16090: PPUSH
16091: CALL_OW 277
// end ;
16095: PPOPN 2
16097: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
16098: LD_EXP 48
16102: PUSH
16103: LD_EXP 76
16107: AND
16108: IFFALSE 16205
16110: GO 16112
16112: DISABLE
16113: LD_INT 0
16115: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
16116: LD_ADDR_VAR 0 1
16120: PUSH
16121: LD_INT 22
16123: PUSH
16124: LD_OWVAR 2
16128: PUSH
16129: EMPTY
16130: LIST
16131: LIST
16132: PUSH
16133: LD_INT 21
16135: PUSH
16136: LD_INT 1
16138: PUSH
16139: EMPTY
16140: LIST
16141: LIST
16142: PUSH
16143: LD_INT 3
16145: PUSH
16146: LD_INT 23
16148: PUSH
16149: LD_INT 0
16151: PUSH
16152: EMPTY
16153: LIST
16154: LIST
16155: PUSH
16156: EMPTY
16157: LIST
16158: LIST
16159: PUSH
16160: EMPTY
16161: LIST
16162: LIST
16163: LIST
16164: PPUSH
16165: CALL_OW 69
16169: ST_TO_ADDR
// if not tmp then
16170: LD_VAR 0 1
16174: NOT
16175: IFFALSE 16179
// exit ;
16177: GO 16205
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
16179: LD_VAR 0 1
16183: PUSH
16184: LD_INT 1
16186: PPUSH
16187: LD_VAR 0 1
16191: PPUSH
16192: CALL_OW 12
16196: ARRAY
16197: PPUSH
16198: LD_INT 200
16200: PPUSH
16201: CALL_OW 234
// end ;
16205: PPOPN 1
16207: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
16208: LD_EXP 48
16212: PUSH
16213: LD_EXP 77
16217: AND
16218: IFFALSE 16297
16220: GO 16222
16222: DISABLE
16223: LD_INT 0
16225: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
16226: LD_ADDR_VAR 0 1
16230: PUSH
16231: LD_INT 22
16233: PUSH
16234: LD_OWVAR 2
16238: PUSH
16239: EMPTY
16240: LIST
16241: LIST
16242: PUSH
16243: LD_INT 21
16245: PUSH
16246: LD_INT 2
16248: PUSH
16249: EMPTY
16250: LIST
16251: LIST
16252: PUSH
16253: EMPTY
16254: LIST
16255: LIST
16256: PPUSH
16257: CALL_OW 69
16261: ST_TO_ADDR
// if not tmp then
16262: LD_VAR 0 1
16266: NOT
16267: IFFALSE 16271
// exit ;
16269: GO 16297
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
16271: LD_VAR 0 1
16275: PUSH
16276: LD_INT 1
16278: PPUSH
16279: LD_VAR 0 1
16283: PPUSH
16284: CALL_OW 12
16288: ARRAY
16289: PPUSH
16290: LD_INT 60
16292: PPUSH
16293: CALL_OW 234
// end ;
16297: PPOPN 1
16299: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
16300: LD_EXP 48
16304: PUSH
16305: LD_EXP 78
16309: AND
16310: IFFALSE 16409
16312: GO 16314
16314: DISABLE
16315: LD_INT 0
16317: PPUSH
16318: PPUSH
// begin enable ;
16319: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
16320: LD_ADDR_VAR 0 1
16324: PUSH
16325: LD_INT 22
16327: PUSH
16328: LD_OWVAR 2
16332: PUSH
16333: EMPTY
16334: LIST
16335: LIST
16336: PUSH
16337: LD_INT 61
16339: PUSH
16340: EMPTY
16341: LIST
16342: PUSH
16343: LD_INT 33
16345: PUSH
16346: LD_INT 2
16348: PUSH
16349: EMPTY
16350: LIST
16351: LIST
16352: PUSH
16353: EMPTY
16354: LIST
16355: LIST
16356: LIST
16357: PPUSH
16358: CALL_OW 69
16362: ST_TO_ADDR
// if not tmp then
16363: LD_VAR 0 1
16367: NOT
16368: IFFALSE 16372
// exit ;
16370: GO 16409
// for i in tmp do
16372: LD_ADDR_VAR 0 2
16376: PUSH
16377: LD_VAR 0 1
16381: PUSH
16382: FOR_IN
16383: IFFALSE 16407
// if IsControledBy ( i ) then
16385: LD_VAR 0 2
16389: PPUSH
16390: CALL_OW 312
16394: IFFALSE 16405
// ComUnlink ( i ) ;
16396: LD_VAR 0 2
16400: PPUSH
16401: CALL_OW 136
16405: GO 16382
16407: POP
16408: POP
// end ;
16409: PPOPN 2
16411: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
16412: LD_EXP 48
16416: PUSH
16417: LD_EXP 79
16421: AND
16422: IFFALSE 16562
16424: GO 16426
16426: DISABLE
16427: LD_INT 0
16429: PPUSH
16430: PPUSH
// begin ToLua ( displayPowell(); ) ;
16431: LD_STRING displayPowell();
16433: PPUSH
16434: CALL_OW 559
// uc_side := 0 ;
16438: LD_ADDR_OWVAR 20
16442: PUSH
16443: LD_INT 0
16445: ST_TO_ADDR
// uc_nation := 2 ;
16446: LD_ADDR_OWVAR 21
16450: PUSH
16451: LD_INT 2
16453: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
16454: LD_ADDR_OWVAR 37
16458: PUSH
16459: LD_INT 14
16461: ST_TO_ADDR
// vc_engine := engine_siberite ;
16462: LD_ADDR_OWVAR 39
16466: PUSH
16467: LD_INT 3
16469: ST_TO_ADDR
// vc_control := control_apeman ;
16470: LD_ADDR_OWVAR 38
16474: PUSH
16475: LD_INT 5
16477: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
16478: LD_ADDR_OWVAR 40
16482: PUSH
16483: LD_INT 29
16485: ST_TO_ADDR
// un := CreateVehicle ;
16486: LD_ADDR_VAR 0 2
16490: PUSH
16491: CALL_OW 45
16495: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
16496: LD_VAR 0 2
16500: PPUSH
16501: LD_INT 1
16503: PPUSH
16504: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
16508: LD_INT 35
16510: PPUSH
16511: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
16515: LD_VAR 0 2
16519: PPUSH
16520: LD_INT 22
16522: PUSH
16523: LD_OWVAR 2
16527: PUSH
16528: EMPTY
16529: LIST
16530: LIST
16531: PPUSH
16532: CALL_OW 69
16536: PPUSH
16537: LD_VAR 0 2
16541: PPUSH
16542: CALL_OW 74
16546: PPUSH
16547: CALL_OW 115
// until IsDead ( un ) ;
16551: LD_VAR 0 2
16555: PPUSH
16556: CALL_OW 301
16560: IFFALSE 16508
// end ;
16562: PPOPN 2
16564: END
// every 0 0$1 trigger StreamModeActive and sStu do
16565: LD_EXP 48
16569: PUSH
16570: LD_EXP 87
16574: AND
16575: IFFALSE 16591
16577: GO 16579
16579: DISABLE
// begin ToLua ( displayStucuk(); ) ;
16580: LD_STRING displayStucuk();
16582: PPUSH
16583: CALL_OW 559
// ResetFog ;
16587: CALL_OW 335
// end ;
16591: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
16592: LD_EXP 48
16596: PUSH
16597: LD_EXP 80
16601: AND
16602: IFFALSE 16743
16604: GO 16606
16606: DISABLE
16607: LD_INT 0
16609: PPUSH
16610: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
16611: LD_ADDR_VAR 0 2
16615: PUSH
16616: LD_INT 22
16618: PUSH
16619: LD_OWVAR 2
16623: PUSH
16624: EMPTY
16625: LIST
16626: LIST
16627: PUSH
16628: LD_INT 21
16630: PUSH
16631: LD_INT 1
16633: PUSH
16634: EMPTY
16635: LIST
16636: LIST
16637: PUSH
16638: EMPTY
16639: LIST
16640: LIST
16641: PPUSH
16642: CALL_OW 69
16646: ST_TO_ADDR
// if not tmp then
16647: LD_VAR 0 2
16651: NOT
16652: IFFALSE 16656
// exit ;
16654: GO 16743
// un := tmp [ rand ( 1 , tmp ) ] ;
16656: LD_ADDR_VAR 0 1
16660: PUSH
16661: LD_VAR 0 2
16665: PUSH
16666: LD_INT 1
16668: PPUSH
16669: LD_VAR 0 2
16673: PPUSH
16674: CALL_OW 12
16678: ARRAY
16679: ST_TO_ADDR
// SetSide ( un , 0 ) ;
16680: LD_VAR 0 1
16684: PPUSH
16685: LD_INT 0
16687: PPUSH
16688: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
16692: LD_VAR 0 1
16696: PPUSH
16697: LD_OWVAR 3
16701: PUSH
16702: LD_VAR 0 1
16706: DIFF
16707: PPUSH
16708: LD_VAR 0 1
16712: PPUSH
16713: CALL_OW 74
16717: PPUSH
16718: CALL_OW 115
// wait ( 0 0$20 ) ;
16722: LD_INT 700
16724: PPUSH
16725: CALL_OW 67
// SetSide ( un , your_side ) ;
16729: LD_VAR 0 1
16733: PPUSH
16734: LD_OWVAR 2
16738: PPUSH
16739: CALL_OW 235
// end ;
16743: PPOPN 2
16745: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
16746: LD_EXP 48
16750: PUSH
16751: LD_EXP 81
16755: AND
16756: IFFALSE 16862
16758: GO 16760
16760: DISABLE
16761: LD_INT 0
16763: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
16764: LD_ADDR_VAR 0 1
16768: PUSH
16769: LD_INT 22
16771: PUSH
16772: LD_OWVAR 2
16776: PUSH
16777: EMPTY
16778: LIST
16779: LIST
16780: PUSH
16781: LD_INT 2
16783: PUSH
16784: LD_INT 30
16786: PUSH
16787: LD_INT 0
16789: PUSH
16790: EMPTY
16791: LIST
16792: LIST
16793: PUSH
16794: LD_INT 30
16796: PUSH
16797: LD_INT 1
16799: PUSH
16800: EMPTY
16801: LIST
16802: LIST
16803: PUSH
16804: EMPTY
16805: LIST
16806: LIST
16807: LIST
16808: PUSH
16809: EMPTY
16810: LIST
16811: LIST
16812: PPUSH
16813: CALL_OW 69
16817: ST_TO_ADDR
// if not depot then
16818: LD_VAR 0 1
16822: NOT
16823: IFFALSE 16827
// exit ;
16825: GO 16862
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
16827: LD_VAR 0 1
16831: PUSH
16832: LD_INT 1
16834: ARRAY
16835: PPUSH
16836: CALL_OW 250
16840: PPUSH
16841: LD_VAR 0 1
16845: PUSH
16846: LD_INT 1
16848: ARRAY
16849: PPUSH
16850: CALL_OW 251
16854: PPUSH
16855: LD_INT 70
16857: PPUSH
16858: CALL_OW 495
// end ;
16862: PPOPN 1
16864: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
16865: LD_EXP 48
16869: PUSH
16870: LD_EXP 82
16874: AND
16875: IFFALSE 17086
16877: GO 16879
16879: DISABLE
16880: LD_INT 0
16882: PPUSH
16883: PPUSH
16884: PPUSH
16885: PPUSH
16886: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
16887: LD_ADDR_VAR 0 5
16891: PUSH
16892: LD_INT 22
16894: PUSH
16895: LD_OWVAR 2
16899: PUSH
16900: EMPTY
16901: LIST
16902: LIST
16903: PUSH
16904: LD_INT 21
16906: PUSH
16907: LD_INT 1
16909: PUSH
16910: EMPTY
16911: LIST
16912: LIST
16913: PUSH
16914: EMPTY
16915: LIST
16916: LIST
16917: PPUSH
16918: CALL_OW 69
16922: ST_TO_ADDR
// if not tmp then
16923: LD_VAR 0 5
16927: NOT
16928: IFFALSE 16932
// exit ;
16930: GO 17086
// for i in tmp do
16932: LD_ADDR_VAR 0 1
16936: PUSH
16937: LD_VAR 0 5
16941: PUSH
16942: FOR_IN
16943: IFFALSE 17084
// begin d := rand ( 0 , 5 ) ;
16945: LD_ADDR_VAR 0 4
16949: PUSH
16950: LD_INT 0
16952: PPUSH
16953: LD_INT 5
16955: PPUSH
16956: CALL_OW 12
16960: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
16961: LD_ADDR_VAR 0 2
16965: PUSH
16966: LD_VAR 0 1
16970: PPUSH
16971: CALL_OW 250
16975: PPUSH
16976: LD_VAR 0 4
16980: PPUSH
16981: LD_INT 3
16983: PPUSH
16984: LD_INT 12
16986: PPUSH
16987: CALL_OW 12
16991: PPUSH
16992: CALL_OW 272
16996: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
16997: LD_ADDR_VAR 0 3
17001: PUSH
17002: LD_VAR 0 1
17006: PPUSH
17007: CALL_OW 251
17011: PPUSH
17012: LD_VAR 0 4
17016: PPUSH
17017: LD_INT 3
17019: PPUSH
17020: LD_INT 12
17022: PPUSH
17023: CALL_OW 12
17027: PPUSH
17028: CALL_OW 273
17032: ST_TO_ADDR
// if ValidHex ( x , y ) then
17033: LD_VAR 0 2
17037: PPUSH
17038: LD_VAR 0 3
17042: PPUSH
17043: CALL_OW 488
17047: IFFALSE 17082
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
17049: LD_VAR 0 1
17053: PPUSH
17054: LD_VAR 0 2
17058: PPUSH
17059: LD_VAR 0 3
17063: PPUSH
17064: LD_INT 3
17066: PPUSH
17067: LD_INT 6
17069: PPUSH
17070: CALL_OW 12
17074: PPUSH
17075: LD_INT 1
17077: PPUSH
17078: CALL_OW 483
// end ;
17082: GO 16942
17084: POP
17085: POP
// end ;
17086: PPOPN 5
17088: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
17089: LD_EXP 48
17093: PUSH
17094: LD_EXP 83
17098: AND
17099: IFFALSE 17193
17101: GO 17103
17103: DISABLE
17104: LD_INT 0
17106: PPUSH
17107: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
17108: LD_ADDR_VAR 0 2
17112: PUSH
17113: LD_INT 22
17115: PUSH
17116: LD_OWVAR 2
17120: PUSH
17121: EMPTY
17122: LIST
17123: LIST
17124: PUSH
17125: LD_INT 32
17127: PUSH
17128: LD_INT 1
17130: PUSH
17131: EMPTY
17132: LIST
17133: LIST
17134: PUSH
17135: LD_INT 21
17137: PUSH
17138: LD_INT 2
17140: PUSH
17141: EMPTY
17142: LIST
17143: LIST
17144: PUSH
17145: EMPTY
17146: LIST
17147: LIST
17148: LIST
17149: PPUSH
17150: CALL_OW 69
17154: ST_TO_ADDR
// if not tmp then
17155: LD_VAR 0 2
17159: NOT
17160: IFFALSE 17164
// exit ;
17162: GO 17193
// for i in tmp do
17164: LD_ADDR_VAR 0 1
17168: PUSH
17169: LD_VAR 0 2
17173: PUSH
17174: FOR_IN
17175: IFFALSE 17191
// SetFuel ( i , 0 ) ;
17177: LD_VAR 0 1
17181: PPUSH
17182: LD_INT 0
17184: PPUSH
17185: CALL_OW 240
17189: GO 17174
17191: POP
17192: POP
// end ;
17193: PPOPN 2
17195: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
17196: LD_EXP 48
17200: PUSH
17201: LD_EXP 84
17205: AND
17206: IFFALSE 17272
17208: GO 17210
17210: DISABLE
17211: LD_INT 0
17213: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
17214: LD_ADDR_VAR 0 1
17218: PUSH
17219: LD_INT 22
17221: PUSH
17222: LD_OWVAR 2
17226: PUSH
17227: EMPTY
17228: LIST
17229: LIST
17230: PUSH
17231: LD_INT 30
17233: PUSH
17234: LD_INT 29
17236: PUSH
17237: EMPTY
17238: LIST
17239: LIST
17240: PUSH
17241: EMPTY
17242: LIST
17243: LIST
17244: PPUSH
17245: CALL_OW 69
17249: ST_TO_ADDR
// if not tmp then
17250: LD_VAR 0 1
17254: NOT
17255: IFFALSE 17259
// exit ;
17257: GO 17272
// DestroyUnit ( tmp [ 1 ] ) ;
17259: LD_VAR 0 1
17263: PUSH
17264: LD_INT 1
17266: ARRAY
17267: PPUSH
17268: CALL_OW 65
// end ;
17272: PPOPN 1
17274: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
17275: LD_EXP 48
17279: PUSH
17280: LD_EXP 86
17284: AND
17285: IFFALSE 17414
17287: GO 17289
17289: DISABLE
17290: LD_INT 0
17292: PPUSH
// begin uc_side := 0 ;
17293: LD_ADDR_OWVAR 20
17297: PUSH
17298: LD_INT 0
17300: ST_TO_ADDR
// uc_nation := nation_arabian ;
17301: LD_ADDR_OWVAR 21
17305: PUSH
17306: LD_INT 2
17308: ST_TO_ADDR
// hc_gallery :=  ;
17309: LD_ADDR_OWVAR 33
17313: PUSH
17314: LD_STRING 
17316: ST_TO_ADDR
// hc_name :=  ;
17317: LD_ADDR_OWVAR 26
17321: PUSH
17322: LD_STRING 
17324: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
17325: LD_INT 1
17327: PPUSH
17328: LD_INT 11
17330: PPUSH
17331: LD_INT 10
17333: PPUSH
17334: CALL_OW 380
// un := CreateHuman ;
17338: LD_ADDR_VAR 0 1
17342: PUSH
17343: CALL_OW 44
17347: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
17348: LD_VAR 0 1
17352: PPUSH
17353: LD_INT 1
17355: PPUSH
17356: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
17360: LD_INT 35
17362: PPUSH
17363: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
17367: LD_VAR 0 1
17371: PPUSH
17372: LD_INT 22
17374: PUSH
17375: LD_OWVAR 2
17379: PUSH
17380: EMPTY
17381: LIST
17382: LIST
17383: PPUSH
17384: CALL_OW 69
17388: PPUSH
17389: LD_VAR 0 1
17393: PPUSH
17394: CALL_OW 74
17398: PPUSH
17399: CALL_OW 115
// until IsDead ( un ) ;
17403: LD_VAR 0 1
17407: PPUSH
17408: CALL_OW 301
17412: IFFALSE 17360
// end ;
17414: PPOPN 1
17416: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
17417: LD_EXP 48
17421: PUSH
17422: LD_EXP 88
17426: AND
17427: IFFALSE 17439
17429: GO 17431
17431: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
17432: LD_STRING earthquake(getX(game), 0, 32)
17434: PPUSH
17435: CALL_OW 559
17439: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
17440: LD_EXP 48
17444: PUSH
17445: LD_EXP 89
17449: AND
17450: IFFALSE 17541
17452: GO 17454
17454: DISABLE
17455: LD_INT 0
17457: PPUSH
// begin enable ;
17458: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
17459: LD_ADDR_VAR 0 1
17463: PUSH
17464: LD_INT 22
17466: PUSH
17467: LD_OWVAR 2
17471: PUSH
17472: EMPTY
17473: LIST
17474: LIST
17475: PUSH
17476: LD_INT 21
17478: PUSH
17479: LD_INT 2
17481: PUSH
17482: EMPTY
17483: LIST
17484: LIST
17485: PUSH
17486: LD_INT 33
17488: PUSH
17489: LD_INT 3
17491: PUSH
17492: EMPTY
17493: LIST
17494: LIST
17495: PUSH
17496: EMPTY
17497: LIST
17498: LIST
17499: LIST
17500: PPUSH
17501: CALL_OW 69
17505: ST_TO_ADDR
// if not tmp then
17506: LD_VAR 0 1
17510: NOT
17511: IFFALSE 17515
// exit ;
17513: GO 17541
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
17515: LD_VAR 0 1
17519: PUSH
17520: LD_INT 1
17522: PPUSH
17523: LD_VAR 0 1
17527: PPUSH
17528: CALL_OW 12
17532: ARRAY
17533: PPUSH
17534: LD_INT 1
17536: PPUSH
17537: CALL_OW 234
// end ;
17541: PPOPN 1
17543: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
17544: LD_EXP 48
17548: PUSH
17549: LD_EXP 90
17553: AND
17554: IFFALSE 17695
17556: GO 17558
17558: DISABLE
17559: LD_INT 0
17561: PPUSH
17562: PPUSH
17563: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17564: LD_ADDR_VAR 0 3
17568: PUSH
17569: LD_INT 22
17571: PUSH
17572: LD_OWVAR 2
17576: PUSH
17577: EMPTY
17578: LIST
17579: LIST
17580: PUSH
17581: LD_INT 25
17583: PUSH
17584: LD_INT 1
17586: PUSH
17587: EMPTY
17588: LIST
17589: LIST
17590: PUSH
17591: EMPTY
17592: LIST
17593: LIST
17594: PPUSH
17595: CALL_OW 69
17599: ST_TO_ADDR
// if not tmp then
17600: LD_VAR 0 3
17604: NOT
17605: IFFALSE 17609
// exit ;
17607: GO 17695
// un := tmp [ rand ( 1 , tmp ) ] ;
17609: LD_ADDR_VAR 0 2
17613: PUSH
17614: LD_VAR 0 3
17618: PUSH
17619: LD_INT 1
17621: PPUSH
17622: LD_VAR 0 3
17626: PPUSH
17627: CALL_OW 12
17631: ARRAY
17632: ST_TO_ADDR
// if Crawls ( un ) then
17633: LD_VAR 0 2
17637: PPUSH
17638: CALL_OW 318
17642: IFFALSE 17653
// ComWalk ( un ) ;
17644: LD_VAR 0 2
17648: PPUSH
17649: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
17653: LD_VAR 0 2
17657: PPUSH
17658: LD_INT 9
17660: PPUSH
17661: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
17665: LD_INT 28
17667: PPUSH
17668: LD_OWVAR 2
17672: PPUSH
17673: LD_INT 2
17675: PPUSH
17676: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
17680: LD_INT 29
17682: PPUSH
17683: LD_OWVAR 2
17687: PPUSH
17688: LD_INT 2
17690: PPUSH
17691: CALL_OW 322
// end ;
17695: PPOPN 3
17697: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
17698: LD_EXP 48
17702: PUSH
17703: LD_EXP 91
17707: AND
17708: IFFALSE 17819
17710: GO 17712
17712: DISABLE
17713: LD_INT 0
17715: PPUSH
17716: PPUSH
17717: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17718: LD_ADDR_VAR 0 3
17722: PUSH
17723: LD_INT 22
17725: PUSH
17726: LD_OWVAR 2
17730: PUSH
17731: EMPTY
17732: LIST
17733: LIST
17734: PUSH
17735: LD_INT 25
17737: PUSH
17738: LD_INT 1
17740: PUSH
17741: EMPTY
17742: LIST
17743: LIST
17744: PUSH
17745: EMPTY
17746: LIST
17747: LIST
17748: PPUSH
17749: CALL_OW 69
17753: ST_TO_ADDR
// if not tmp then
17754: LD_VAR 0 3
17758: NOT
17759: IFFALSE 17763
// exit ;
17761: GO 17819
// un := tmp [ rand ( 1 , tmp ) ] ;
17763: LD_ADDR_VAR 0 2
17767: PUSH
17768: LD_VAR 0 3
17772: PUSH
17773: LD_INT 1
17775: PPUSH
17776: LD_VAR 0 3
17780: PPUSH
17781: CALL_OW 12
17785: ARRAY
17786: ST_TO_ADDR
// if Crawls ( un ) then
17787: LD_VAR 0 2
17791: PPUSH
17792: CALL_OW 318
17796: IFFALSE 17807
// ComWalk ( un ) ;
17798: LD_VAR 0 2
17802: PPUSH
17803: CALL_OW 138
// SetClass ( un , class_mortar ) ;
17807: LD_VAR 0 2
17811: PPUSH
17812: LD_INT 8
17814: PPUSH
17815: CALL_OW 336
// end ;
17819: PPOPN 3
17821: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
17822: LD_EXP 48
17826: PUSH
17827: LD_EXP 92
17831: AND
17832: IFFALSE 17976
17834: GO 17836
17836: DISABLE
17837: LD_INT 0
17839: PPUSH
17840: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
17841: LD_ADDR_VAR 0 2
17845: PUSH
17846: LD_INT 22
17848: PUSH
17849: LD_OWVAR 2
17853: PUSH
17854: EMPTY
17855: LIST
17856: LIST
17857: PUSH
17858: LD_INT 21
17860: PUSH
17861: LD_INT 2
17863: PUSH
17864: EMPTY
17865: LIST
17866: LIST
17867: PUSH
17868: LD_INT 2
17870: PUSH
17871: LD_INT 34
17873: PUSH
17874: LD_INT 12
17876: PUSH
17877: EMPTY
17878: LIST
17879: LIST
17880: PUSH
17881: LD_INT 34
17883: PUSH
17884: LD_INT 51
17886: PUSH
17887: EMPTY
17888: LIST
17889: LIST
17890: PUSH
17891: LD_INT 34
17893: PUSH
17894: LD_INT 32
17896: PUSH
17897: EMPTY
17898: LIST
17899: LIST
17900: PUSH
17901: EMPTY
17902: LIST
17903: LIST
17904: LIST
17905: LIST
17906: PUSH
17907: EMPTY
17908: LIST
17909: LIST
17910: LIST
17911: PPUSH
17912: CALL_OW 69
17916: ST_TO_ADDR
// if not tmp then
17917: LD_VAR 0 2
17921: NOT
17922: IFFALSE 17926
// exit ;
17924: GO 17976
// for i in tmp do
17926: LD_ADDR_VAR 0 1
17930: PUSH
17931: LD_VAR 0 2
17935: PUSH
17936: FOR_IN
17937: IFFALSE 17974
// if GetCargo ( i , mat_artifact ) = 0 then
17939: LD_VAR 0 1
17943: PPUSH
17944: LD_INT 4
17946: PPUSH
17947: CALL_OW 289
17951: PUSH
17952: LD_INT 0
17954: EQUAL
17955: IFFALSE 17972
// SetCargo ( i , mat_siberit , 100 ) ;
17957: LD_VAR 0 1
17961: PPUSH
17962: LD_INT 3
17964: PPUSH
17965: LD_INT 100
17967: PPUSH
17968: CALL_OW 290
17972: GO 17936
17974: POP
17975: POP
// end ;
17976: PPOPN 2
17978: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
17979: LD_EXP 48
17983: PUSH
17984: LD_EXP 93
17988: AND
17989: IFFALSE 18172
17991: GO 17993
17993: DISABLE
17994: LD_INT 0
17996: PPUSH
17997: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
17998: LD_ADDR_VAR 0 2
18002: PUSH
18003: LD_INT 22
18005: PUSH
18006: LD_OWVAR 2
18010: PUSH
18011: EMPTY
18012: LIST
18013: LIST
18014: PPUSH
18015: CALL_OW 69
18019: ST_TO_ADDR
// if not tmp then
18020: LD_VAR 0 2
18024: NOT
18025: IFFALSE 18029
// exit ;
18027: GO 18172
// for i := 1 to 2 do
18029: LD_ADDR_VAR 0 1
18033: PUSH
18034: DOUBLE
18035: LD_INT 1
18037: DEC
18038: ST_TO_ADDR
18039: LD_INT 2
18041: PUSH
18042: FOR_TO
18043: IFFALSE 18170
// begin uc_side := your_side ;
18045: LD_ADDR_OWVAR 20
18049: PUSH
18050: LD_OWVAR 2
18054: ST_TO_ADDR
// uc_nation := nation_american ;
18055: LD_ADDR_OWVAR 21
18059: PUSH
18060: LD_INT 1
18062: ST_TO_ADDR
// vc_chassis := us_morphling ;
18063: LD_ADDR_OWVAR 37
18067: PUSH
18068: LD_INT 5
18070: ST_TO_ADDR
// vc_engine := engine_siberite ;
18071: LD_ADDR_OWVAR 39
18075: PUSH
18076: LD_INT 3
18078: ST_TO_ADDR
// vc_control := control_computer ;
18079: LD_ADDR_OWVAR 38
18083: PUSH
18084: LD_INT 3
18086: ST_TO_ADDR
// vc_weapon := us_double_laser ;
18087: LD_ADDR_OWVAR 40
18091: PUSH
18092: LD_INT 10
18094: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
18095: LD_VAR 0 2
18099: PUSH
18100: LD_INT 1
18102: ARRAY
18103: PPUSH
18104: CALL_OW 310
18108: NOT
18109: IFFALSE 18156
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
18111: CALL_OW 45
18115: PPUSH
18116: LD_VAR 0 2
18120: PUSH
18121: LD_INT 1
18123: ARRAY
18124: PPUSH
18125: CALL_OW 250
18129: PPUSH
18130: LD_VAR 0 2
18134: PUSH
18135: LD_INT 1
18137: ARRAY
18138: PPUSH
18139: CALL_OW 251
18143: PPUSH
18144: LD_INT 12
18146: PPUSH
18147: LD_INT 1
18149: PPUSH
18150: CALL_OW 50
18154: GO 18168
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
18156: CALL_OW 45
18160: PPUSH
18161: LD_INT 1
18163: PPUSH
18164: CALL_OW 51
// end ;
18168: GO 18042
18170: POP
18171: POP
// end ;
18172: PPOPN 2
18174: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
18175: LD_EXP 48
18179: PUSH
18180: LD_EXP 94
18184: AND
18185: IFFALSE 18407
18187: GO 18189
18189: DISABLE
18190: LD_INT 0
18192: PPUSH
18193: PPUSH
18194: PPUSH
18195: PPUSH
18196: PPUSH
18197: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
18198: LD_ADDR_VAR 0 6
18202: PUSH
18203: LD_INT 22
18205: PUSH
18206: LD_OWVAR 2
18210: PUSH
18211: EMPTY
18212: LIST
18213: LIST
18214: PUSH
18215: LD_INT 21
18217: PUSH
18218: LD_INT 1
18220: PUSH
18221: EMPTY
18222: LIST
18223: LIST
18224: PUSH
18225: LD_INT 3
18227: PUSH
18228: LD_INT 23
18230: PUSH
18231: LD_INT 0
18233: PUSH
18234: EMPTY
18235: LIST
18236: LIST
18237: PUSH
18238: EMPTY
18239: LIST
18240: LIST
18241: PUSH
18242: EMPTY
18243: LIST
18244: LIST
18245: LIST
18246: PPUSH
18247: CALL_OW 69
18251: ST_TO_ADDR
// if not tmp then
18252: LD_VAR 0 6
18256: NOT
18257: IFFALSE 18261
// exit ;
18259: GO 18407
// s1 := rand ( 1 , 4 ) ;
18261: LD_ADDR_VAR 0 2
18265: PUSH
18266: LD_INT 1
18268: PPUSH
18269: LD_INT 4
18271: PPUSH
18272: CALL_OW 12
18276: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
18277: LD_ADDR_VAR 0 4
18281: PUSH
18282: LD_VAR 0 6
18286: PUSH
18287: LD_INT 1
18289: ARRAY
18290: PPUSH
18291: LD_VAR 0 2
18295: PPUSH
18296: CALL_OW 259
18300: ST_TO_ADDR
// if s1 = 1 then
18301: LD_VAR 0 2
18305: PUSH
18306: LD_INT 1
18308: EQUAL
18309: IFFALSE 18329
// s2 := rand ( 2 , 4 ) else
18311: LD_ADDR_VAR 0 3
18315: PUSH
18316: LD_INT 2
18318: PPUSH
18319: LD_INT 4
18321: PPUSH
18322: CALL_OW 12
18326: ST_TO_ADDR
18327: GO 18337
// s2 := 1 ;
18329: LD_ADDR_VAR 0 3
18333: PUSH
18334: LD_INT 1
18336: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
18337: LD_ADDR_VAR 0 5
18341: PUSH
18342: LD_VAR 0 6
18346: PUSH
18347: LD_INT 1
18349: ARRAY
18350: PPUSH
18351: LD_VAR 0 3
18355: PPUSH
18356: CALL_OW 259
18360: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
18361: LD_VAR 0 6
18365: PUSH
18366: LD_INT 1
18368: ARRAY
18369: PPUSH
18370: LD_VAR 0 2
18374: PPUSH
18375: LD_VAR 0 5
18379: PPUSH
18380: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
18384: LD_VAR 0 6
18388: PUSH
18389: LD_INT 1
18391: ARRAY
18392: PPUSH
18393: LD_VAR 0 3
18397: PPUSH
18398: LD_VAR 0 4
18402: PPUSH
18403: CALL_OW 237
// end ;
18407: PPOPN 6
18409: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
18410: LD_EXP 48
18414: PUSH
18415: LD_EXP 95
18419: AND
18420: IFFALSE 18499
18422: GO 18424
18424: DISABLE
18425: LD_INT 0
18427: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
18428: LD_ADDR_VAR 0 1
18432: PUSH
18433: LD_INT 22
18435: PUSH
18436: LD_OWVAR 2
18440: PUSH
18441: EMPTY
18442: LIST
18443: LIST
18444: PUSH
18445: LD_INT 30
18447: PUSH
18448: LD_INT 3
18450: PUSH
18451: EMPTY
18452: LIST
18453: LIST
18454: PUSH
18455: EMPTY
18456: LIST
18457: LIST
18458: PPUSH
18459: CALL_OW 69
18463: ST_TO_ADDR
// if not tmp then
18464: LD_VAR 0 1
18468: NOT
18469: IFFALSE 18473
// exit ;
18471: GO 18499
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
18473: LD_VAR 0 1
18477: PUSH
18478: LD_INT 1
18480: PPUSH
18481: LD_VAR 0 1
18485: PPUSH
18486: CALL_OW 12
18490: ARRAY
18491: PPUSH
18492: LD_INT 1
18494: PPUSH
18495: CALL_OW 234
// end ;
18499: PPOPN 1
18501: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
18502: LD_EXP 48
18506: PUSH
18507: LD_EXP 96
18511: AND
18512: IFFALSE 18624
18514: GO 18516
18516: DISABLE
18517: LD_INT 0
18519: PPUSH
18520: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
18521: LD_ADDR_VAR 0 2
18525: PUSH
18526: LD_INT 22
18528: PUSH
18529: LD_OWVAR 2
18533: PUSH
18534: EMPTY
18535: LIST
18536: LIST
18537: PUSH
18538: LD_INT 2
18540: PUSH
18541: LD_INT 30
18543: PUSH
18544: LD_INT 27
18546: PUSH
18547: EMPTY
18548: LIST
18549: LIST
18550: PUSH
18551: LD_INT 30
18553: PUSH
18554: LD_INT 26
18556: PUSH
18557: EMPTY
18558: LIST
18559: LIST
18560: PUSH
18561: LD_INT 30
18563: PUSH
18564: LD_INT 28
18566: PUSH
18567: EMPTY
18568: LIST
18569: LIST
18570: PUSH
18571: EMPTY
18572: LIST
18573: LIST
18574: LIST
18575: LIST
18576: PUSH
18577: EMPTY
18578: LIST
18579: LIST
18580: PPUSH
18581: CALL_OW 69
18585: ST_TO_ADDR
// if not tmp then
18586: LD_VAR 0 2
18590: NOT
18591: IFFALSE 18595
// exit ;
18593: GO 18624
// for i in tmp do
18595: LD_ADDR_VAR 0 1
18599: PUSH
18600: LD_VAR 0 2
18604: PUSH
18605: FOR_IN
18606: IFFALSE 18622
// SetLives ( i , 1 ) ;
18608: LD_VAR 0 1
18612: PPUSH
18613: LD_INT 1
18615: PPUSH
18616: CALL_OW 234
18620: GO 18605
18622: POP
18623: POP
// end ;
18624: PPOPN 2
18626: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
18627: LD_EXP 48
18631: PUSH
18632: LD_EXP 97
18636: AND
18637: IFFALSE 18924
18639: GO 18641
18641: DISABLE
18642: LD_INT 0
18644: PPUSH
18645: PPUSH
18646: PPUSH
// begin i := rand ( 1 , 7 ) ;
18647: LD_ADDR_VAR 0 1
18651: PUSH
18652: LD_INT 1
18654: PPUSH
18655: LD_INT 7
18657: PPUSH
18658: CALL_OW 12
18662: ST_TO_ADDR
// case i of 1 :
18663: LD_VAR 0 1
18667: PUSH
18668: LD_INT 1
18670: DOUBLE
18671: EQUAL
18672: IFTRUE 18676
18674: GO 18686
18676: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
18677: LD_STRING earthquake(getX(game), 0, 32)
18679: PPUSH
18680: CALL_OW 559
18684: GO 18924
18686: LD_INT 2
18688: DOUBLE
18689: EQUAL
18690: IFTRUE 18694
18692: GO 18708
18694: POP
// begin ToLua ( displayStucuk(); ) ;
18695: LD_STRING displayStucuk();
18697: PPUSH
18698: CALL_OW 559
// ResetFog ;
18702: CALL_OW 335
// end ; 3 :
18706: GO 18924
18708: LD_INT 3
18710: DOUBLE
18711: EQUAL
18712: IFTRUE 18716
18714: GO 18820
18716: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18717: LD_ADDR_VAR 0 2
18721: PUSH
18722: LD_INT 22
18724: PUSH
18725: LD_OWVAR 2
18729: PUSH
18730: EMPTY
18731: LIST
18732: LIST
18733: PUSH
18734: LD_INT 25
18736: PUSH
18737: LD_INT 1
18739: PUSH
18740: EMPTY
18741: LIST
18742: LIST
18743: PUSH
18744: EMPTY
18745: LIST
18746: LIST
18747: PPUSH
18748: CALL_OW 69
18752: ST_TO_ADDR
// if not tmp then
18753: LD_VAR 0 2
18757: NOT
18758: IFFALSE 18762
// exit ;
18760: GO 18924
// un := tmp [ rand ( 1 , tmp ) ] ;
18762: LD_ADDR_VAR 0 3
18766: PUSH
18767: LD_VAR 0 2
18771: PUSH
18772: LD_INT 1
18774: PPUSH
18775: LD_VAR 0 2
18779: PPUSH
18780: CALL_OW 12
18784: ARRAY
18785: ST_TO_ADDR
// if Crawls ( un ) then
18786: LD_VAR 0 3
18790: PPUSH
18791: CALL_OW 318
18795: IFFALSE 18806
// ComWalk ( un ) ;
18797: LD_VAR 0 3
18801: PPUSH
18802: CALL_OW 138
// SetClass ( un , class_mortar ) ;
18806: LD_VAR 0 3
18810: PPUSH
18811: LD_INT 8
18813: PPUSH
18814: CALL_OW 336
// end ; 4 :
18818: GO 18924
18820: LD_INT 4
18822: DOUBLE
18823: EQUAL
18824: IFTRUE 18828
18826: GO 18902
18828: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
18829: LD_ADDR_VAR 0 2
18833: PUSH
18834: LD_INT 22
18836: PUSH
18837: LD_OWVAR 2
18841: PUSH
18842: EMPTY
18843: LIST
18844: LIST
18845: PUSH
18846: LD_INT 30
18848: PUSH
18849: LD_INT 29
18851: PUSH
18852: EMPTY
18853: LIST
18854: LIST
18855: PUSH
18856: EMPTY
18857: LIST
18858: LIST
18859: PPUSH
18860: CALL_OW 69
18864: ST_TO_ADDR
// if not tmp then
18865: LD_VAR 0 2
18869: NOT
18870: IFFALSE 18874
// exit ;
18872: GO 18924
// CenterNowOnUnits ( tmp [ 1 ] ) ;
18874: LD_VAR 0 2
18878: PUSH
18879: LD_INT 1
18881: ARRAY
18882: PPUSH
18883: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
18887: LD_VAR 0 2
18891: PUSH
18892: LD_INT 1
18894: ARRAY
18895: PPUSH
18896: CALL_OW 65
// end ; 5 .. 7 :
18900: GO 18924
18902: LD_INT 5
18904: DOUBLE
18905: GREATEREQUAL
18906: IFFALSE 18914
18908: LD_INT 7
18910: DOUBLE
18911: LESSEQUAL
18912: IFTRUE 18916
18914: GO 18923
18916: POP
// StreamSibBomb ; end ;
18917: CALL 15161 0 0
18921: GO 18924
18923: POP
// end ;
18924: PPOPN 3
18926: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
18927: LD_EXP 48
18931: PUSH
18932: LD_EXP 98
18936: AND
18937: IFFALSE 19093
18939: GO 18941
18941: DISABLE
18942: LD_INT 0
18944: PPUSH
18945: PPUSH
18946: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
18947: LD_ADDR_VAR 0 2
18951: PUSH
18952: LD_INT 81
18954: PUSH
18955: LD_OWVAR 2
18959: PUSH
18960: EMPTY
18961: LIST
18962: LIST
18963: PUSH
18964: LD_INT 2
18966: PUSH
18967: LD_INT 21
18969: PUSH
18970: LD_INT 1
18972: PUSH
18973: EMPTY
18974: LIST
18975: LIST
18976: PUSH
18977: LD_INT 21
18979: PUSH
18980: LD_INT 2
18982: PUSH
18983: EMPTY
18984: LIST
18985: LIST
18986: PUSH
18987: EMPTY
18988: LIST
18989: LIST
18990: LIST
18991: PUSH
18992: EMPTY
18993: LIST
18994: LIST
18995: PPUSH
18996: CALL_OW 69
19000: ST_TO_ADDR
// if not tmp then
19001: LD_VAR 0 2
19005: NOT
19006: IFFALSE 19010
// exit ;
19008: GO 19093
// p := 0 ;
19010: LD_ADDR_VAR 0 3
19014: PUSH
19015: LD_INT 0
19017: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
19018: LD_INT 35
19020: PPUSH
19021: CALL_OW 67
// p := p + 1 ;
19025: LD_ADDR_VAR 0 3
19029: PUSH
19030: LD_VAR 0 3
19034: PUSH
19035: LD_INT 1
19037: PLUS
19038: ST_TO_ADDR
// for i in tmp do
19039: LD_ADDR_VAR 0 1
19043: PUSH
19044: LD_VAR 0 2
19048: PUSH
19049: FOR_IN
19050: IFFALSE 19081
// if GetLives ( i ) < 1000 then
19052: LD_VAR 0 1
19056: PPUSH
19057: CALL_OW 256
19061: PUSH
19062: LD_INT 1000
19064: LESS
19065: IFFALSE 19079
// SetLives ( i , 1000 ) ;
19067: LD_VAR 0 1
19071: PPUSH
19072: LD_INT 1000
19074: PPUSH
19075: CALL_OW 234
19079: GO 19049
19081: POP
19082: POP
// until p > 20 ;
19083: LD_VAR 0 3
19087: PUSH
19088: LD_INT 20
19090: GREATER
19091: IFFALSE 19018
// end ;
19093: PPOPN 3
19095: END
// every 0 0$1 trigger StreamModeActive and sTime do
19096: LD_EXP 48
19100: PUSH
19101: LD_EXP 99
19105: AND
19106: IFFALSE 19141
19108: GO 19110
19110: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
19111: LD_INT 28
19113: PPUSH
19114: LD_OWVAR 2
19118: PPUSH
19119: LD_INT 2
19121: PPUSH
19122: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
19126: LD_INT 30
19128: PPUSH
19129: LD_OWVAR 2
19133: PPUSH
19134: LD_INT 2
19136: PPUSH
19137: CALL_OW 322
// end ;
19141: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
19142: LD_EXP 48
19146: PUSH
19147: LD_EXP 100
19151: AND
19152: IFFALSE 19273
19154: GO 19156
19156: DISABLE
19157: LD_INT 0
19159: PPUSH
19160: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
19161: LD_ADDR_VAR 0 2
19165: PUSH
19166: LD_INT 22
19168: PUSH
19169: LD_OWVAR 2
19173: PUSH
19174: EMPTY
19175: LIST
19176: LIST
19177: PUSH
19178: LD_INT 21
19180: PUSH
19181: LD_INT 1
19183: PUSH
19184: EMPTY
19185: LIST
19186: LIST
19187: PUSH
19188: LD_INT 3
19190: PUSH
19191: LD_INT 23
19193: PUSH
19194: LD_INT 0
19196: PUSH
19197: EMPTY
19198: LIST
19199: LIST
19200: PUSH
19201: EMPTY
19202: LIST
19203: LIST
19204: PUSH
19205: EMPTY
19206: LIST
19207: LIST
19208: LIST
19209: PPUSH
19210: CALL_OW 69
19214: ST_TO_ADDR
// if not tmp then
19215: LD_VAR 0 2
19219: NOT
19220: IFFALSE 19224
// exit ;
19222: GO 19273
// for i in tmp do
19224: LD_ADDR_VAR 0 1
19228: PUSH
19229: LD_VAR 0 2
19233: PUSH
19234: FOR_IN
19235: IFFALSE 19271
// begin if Crawls ( i ) then
19237: LD_VAR 0 1
19241: PPUSH
19242: CALL_OW 318
19246: IFFALSE 19257
// ComWalk ( i ) ;
19248: LD_VAR 0 1
19252: PPUSH
19253: CALL_OW 138
// SetClass ( i , 2 ) ;
19257: LD_VAR 0 1
19261: PPUSH
19262: LD_INT 2
19264: PPUSH
19265: CALL_OW 336
// end ;
19269: GO 19234
19271: POP
19272: POP
// end ;
19273: PPOPN 2
19275: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
19276: LD_EXP 48
19280: PUSH
19281: LD_EXP 101
19285: AND
19286: IFFALSE 19574
19288: GO 19290
19290: DISABLE
19291: LD_INT 0
19293: PPUSH
19294: PPUSH
19295: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
19296: LD_OWVAR 2
19300: PPUSH
19301: LD_INT 9
19303: PPUSH
19304: LD_INT 1
19306: PPUSH
19307: LD_INT 1
19309: PPUSH
19310: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
19314: LD_INT 9
19316: PPUSH
19317: LD_OWVAR 2
19321: PPUSH
19322: CALL_OW 343
// uc_side := 9 ;
19326: LD_ADDR_OWVAR 20
19330: PUSH
19331: LD_INT 9
19333: ST_TO_ADDR
// uc_nation := 2 ;
19334: LD_ADDR_OWVAR 21
19338: PUSH
19339: LD_INT 2
19341: ST_TO_ADDR
// hc_name := Dark Warrior ;
19342: LD_ADDR_OWVAR 26
19346: PUSH
19347: LD_STRING Dark Warrior
19349: ST_TO_ADDR
// hc_gallery :=  ;
19350: LD_ADDR_OWVAR 33
19354: PUSH
19355: LD_STRING 
19357: ST_TO_ADDR
// hc_noskilllimit := true ;
19358: LD_ADDR_OWVAR 76
19362: PUSH
19363: LD_INT 1
19365: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
19366: LD_ADDR_OWVAR 31
19370: PUSH
19371: LD_INT 30
19373: PUSH
19374: LD_INT 30
19376: PUSH
19377: LD_INT 30
19379: PUSH
19380: LD_INT 30
19382: PUSH
19383: EMPTY
19384: LIST
19385: LIST
19386: LIST
19387: LIST
19388: ST_TO_ADDR
// un := CreateHuman ;
19389: LD_ADDR_VAR 0 3
19393: PUSH
19394: CALL_OW 44
19398: ST_TO_ADDR
// hc_noskilllimit := false ;
19399: LD_ADDR_OWVAR 76
19403: PUSH
19404: LD_INT 0
19406: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
19407: LD_VAR 0 3
19411: PPUSH
19412: LD_INT 1
19414: PPUSH
19415: CALL_OW 51
// ToLua ( playRanger() ) ;
19419: LD_STRING playRanger()
19421: PPUSH
19422: CALL_OW 559
// p := 0 ;
19426: LD_ADDR_VAR 0 2
19430: PUSH
19431: LD_INT 0
19433: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
19434: LD_INT 35
19436: PPUSH
19437: CALL_OW 67
// p := p + 1 ;
19441: LD_ADDR_VAR 0 2
19445: PUSH
19446: LD_VAR 0 2
19450: PUSH
19451: LD_INT 1
19453: PLUS
19454: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
19455: LD_VAR 0 3
19459: PPUSH
19460: CALL_OW 256
19464: PUSH
19465: LD_INT 1000
19467: LESS
19468: IFFALSE 19482
// SetLives ( un , 1000 ) ;
19470: LD_VAR 0 3
19474: PPUSH
19475: LD_INT 1000
19477: PPUSH
19478: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
19482: LD_VAR 0 3
19486: PPUSH
19487: LD_INT 81
19489: PUSH
19490: LD_OWVAR 2
19494: PUSH
19495: EMPTY
19496: LIST
19497: LIST
19498: PUSH
19499: LD_INT 91
19501: PUSH
19502: LD_VAR 0 3
19506: PUSH
19507: LD_INT 30
19509: PUSH
19510: EMPTY
19511: LIST
19512: LIST
19513: LIST
19514: PUSH
19515: EMPTY
19516: LIST
19517: LIST
19518: PPUSH
19519: CALL_OW 69
19523: PPUSH
19524: LD_VAR 0 3
19528: PPUSH
19529: CALL_OW 74
19533: PPUSH
19534: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
19538: LD_VAR 0 2
19542: PUSH
19543: LD_INT 80
19545: GREATER
19546: PUSH
19547: LD_VAR 0 3
19551: PPUSH
19552: CALL_OW 301
19556: OR
19557: IFFALSE 19434
// if un then
19559: LD_VAR 0 3
19563: IFFALSE 19574
// RemoveUnit ( un ) ;
19565: LD_VAR 0 3
19569: PPUSH
19570: CALL_OW 64
// end ;
19574: PPOPN 3
19576: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
19577: LD_EXP 102
19581: IFFALSE 19697
19583: GO 19585
19585: DISABLE
19586: LD_INT 0
19588: PPUSH
19589: PPUSH
19590: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
19591: LD_ADDR_VAR 0 2
19595: PUSH
19596: LD_INT 81
19598: PUSH
19599: LD_OWVAR 2
19603: PUSH
19604: EMPTY
19605: LIST
19606: LIST
19607: PUSH
19608: LD_INT 21
19610: PUSH
19611: LD_INT 1
19613: PUSH
19614: EMPTY
19615: LIST
19616: LIST
19617: PUSH
19618: EMPTY
19619: LIST
19620: LIST
19621: PPUSH
19622: CALL_OW 69
19626: ST_TO_ADDR
// ToLua ( playComputer() ) ;
19627: LD_STRING playComputer()
19629: PPUSH
19630: CALL_OW 559
// if not tmp then
19634: LD_VAR 0 2
19638: NOT
19639: IFFALSE 19643
// exit ;
19641: GO 19697
// for i in tmp do
19643: LD_ADDR_VAR 0 1
19647: PUSH
19648: LD_VAR 0 2
19652: PUSH
19653: FOR_IN
19654: IFFALSE 19695
// for j := 1 to 4 do
19656: LD_ADDR_VAR 0 3
19660: PUSH
19661: DOUBLE
19662: LD_INT 1
19664: DEC
19665: ST_TO_ADDR
19666: LD_INT 4
19668: PUSH
19669: FOR_TO
19670: IFFALSE 19691
// SetSkill ( i , j , 10 ) ;
19672: LD_VAR 0 1
19676: PPUSH
19677: LD_VAR 0 3
19681: PPUSH
19682: LD_INT 10
19684: PPUSH
19685: CALL_OW 237
19689: GO 19669
19691: POP
19692: POP
19693: GO 19653
19695: POP
19696: POP
// end ;
19697: PPOPN 3
19699: END
// every 0 0$1 trigger s30 do var i , tmp ;
19700: LD_EXP 103
19704: IFFALSE 19773
19706: GO 19708
19708: DISABLE
19709: LD_INT 0
19711: PPUSH
19712: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
19713: LD_ADDR_VAR 0 2
19717: PUSH
19718: LD_INT 22
19720: PUSH
19721: LD_OWVAR 2
19725: PUSH
19726: EMPTY
19727: LIST
19728: LIST
19729: PPUSH
19730: CALL_OW 69
19734: ST_TO_ADDR
// if not tmp then
19735: LD_VAR 0 2
19739: NOT
19740: IFFALSE 19744
// exit ;
19742: GO 19773
// for i in tmp do
19744: LD_ADDR_VAR 0 1
19748: PUSH
19749: LD_VAR 0 2
19753: PUSH
19754: FOR_IN
19755: IFFALSE 19771
// SetLives ( i , 300 ) ;
19757: LD_VAR 0 1
19761: PPUSH
19762: LD_INT 300
19764: PPUSH
19765: CALL_OW 234
19769: GO 19754
19771: POP
19772: POP
// end ;
19773: PPOPN 2
19775: END
// every 0 0$1 trigger s60 do var i , tmp ;
19776: LD_EXP 104
19780: IFFALSE 19849
19782: GO 19784
19784: DISABLE
19785: LD_INT 0
19787: PPUSH
19788: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
19789: LD_ADDR_VAR 0 2
19793: PUSH
19794: LD_INT 22
19796: PUSH
19797: LD_OWVAR 2
19801: PUSH
19802: EMPTY
19803: LIST
19804: LIST
19805: PPUSH
19806: CALL_OW 69
19810: ST_TO_ADDR
// if not tmp then
19811: LD_VAR 0 2
19815: NOT
19816: IFFALSE 19820
// exit ;
19818: GO 19849
// for i in tmp do
19820: LD_ADDR_VAR 0 1
19824: PUSH
19825: LD_VAR 0 2
19829: PUSH
19830: FOR_IN
19831: IFFALSE 19847
// SetLives ( i , 600 ) ;
19833: LD_VAR 0 1
19837: PPUSH
19838: LD_INT 600
19840: PPUSH
19841: CALL_OW 234
19845: GO 19830
19847: POP
19848: POP
// end ;
19849: PPOPN 2
19851: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
19852: LD_INT 0
19854: PPUSH
// case cmd of 301 :
19855: LD_VAR 0 1
19859: PUSH
19860: LD_INT 301
19862: DOUBLE
19863: EQUAL
19864: IFTRUE 19868
19866: GO 19900
19868: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
19869: LD_VAR 0 6
19873: PPUSH
19874: LD_VAR 0 7
19878: PPUSH
19879: LD_VAR 0 8
19883: PPUSH
19884: LD_VAR 0 4
19888: PPUSH
19889: LD_VAR 0 5
19893: PPUSH
19894: CALL 21101 0 5
19898: GO 20021
19900: LD_INT 302
19902: DOUBLE
19903: EQUAL
19904: IFTRUE 19908
19906: GO 19945
19908: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
19909: LD_VAR 0 6
19913: PPUSH
19914: LD_VAR 0 7
19918: PPUSH
19919: LD_VAR 0 8
19923: PPUSH
19924: LD_VAR 0 9
19928: PPUSH
19929: LD_VAR 0 4
19933: PPUSH
19934: LD_VAR 0 5
19938: PPUSH
19939: CALL 21192 0 6
19943: GO 20021
19945: LD_INT 303
19947: DOUBLE
19948: EQUAL
19949: IFTRUE 19953
19951: GO 19990
19953: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
19954: LD_VAR 0 6
19958: PPUSH
19959: LD_VAR 0 7
19963: PPUSH
19964: LD_VAR 0 8
19968: PPUSH
19969: LD_VAR 0 9
19973: PPUSH
19974: LD_VAR 0 4
19978: PPUSH
19979: LD_VAR 0 5
19983: PPUSH
19984: CALL 20026 0 6
19988: GO 20021
19990: LD_INT 304
19992: DOUBLE
19993: EQUAL
19994: IFTRUE 19998
19996: GO 20020
19998: POP
// hHackTeleport ( unit , x , y ) ; end ;
19999: LD_VAR 0 2
20003: PPUSH
20004: LD_VAR 0 4
20008: PPUSH
20009: LD_VAR 0 5
20013: PPUSH
20014: CALL 21785 0 3
20018: GO 20021
20020: POP
// end ;
20021: LD_VAR 0 12
20025: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
20026: LD_INT 0
20028: PPUSH
20029: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
20030: LD_VAR 0 1
20034: PUSH
20035: LD_INT 1
20037: LESS
20038: PUSH
20039: LD_VAR 0 1
20043: PUSH
20044: LD_INT 3
20046: GREATER
20047: OR
20048: PUSH
20049: LD_VAR 0 5
20053: PPUSH
20054: LD_VAR 0 6
20058: PPUSH
20059: CALL_OW 428
20063: OR
20064: IFFALSE 20068
// exit ;
20066: GO 20788
// uc_side := your_side ;
20068: LD_ADDR_OWVAR 20
20072: PUSH
20073: LD_OWVAR 2
20077: ST_TO_ADDR
// uc_nation := nation ;
20078: LD_ADDR_OWVAR 21
20082: PUSH
20083: LD_VAR 0 1
20087: ST_TO_ADDR
// bc_level = 1 ;
20088: LD_ADDR_OWVAR 43
20092: PUSH
20093: LD_INT 1
20095: ST_TO_ADDR
// case btype of 1 :
20096: LD_VAR 0 2
20100: PUSH
20101: LD_INT 1
20103: DOUBLE
20104: EQUAL
20105: IFTRUE 20109
20107: GO 20120
20109: POP
// bc_type := b_depot ; 2 :
20110: LD_ADDR_OWVAR 42
20114: PUSH
20115: LD_INT 0
20117: ST_TO_ADDR
20118: GO 20732
20120: LD_INT 2
20122: DOUBLE
20123: EQUAL
20124: IFTRUE 20128
20126: GO 20139
20128: POP
// bc_type := b_warehouse ; 3 :
20129: LD_ADDR_OWVAR 42
20133: PUSH
20134: LD_INT 1
20136: ST_TO_ADDR
20137: GO 20732
20139: LD_INT 3
20141: DOUBLE
20142: EQUAL
20143: IFTRUE 20147
20145: GO 20158
20147: POP
// bc_type := b_lab ; 4 .. 9 :
20148: LD_ADDR_OWVAR 42
20152: PUSH
20153: LD_INT 6
20155: ST_TO_ADDR
20156: GO 20732
20158: LD_INT 4
20160: DOUBLE
20161: GREATEREQUAL
20162: IFFALSE 20170
20164: LD_INT 9
20166: DOUBLE
20167: LESSEQUAL
20168: IFTRUE 20172
20170: GO 20224
20172: POP
// begin bc_type := b_lab_half ;
20173: LD_ADDR_OWVAR 42
20177: PUSH
20178: LD_INT 7
20180: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
20181: LD_ADDR_OWVAR 44
20185: PUSH
20186: LD_INT 10
20188: PUSH
20189: LD_INT 11
20191: PUSH
20192: LD_INT 12
20194: PUSH
20195: LD_INT 15
20197: PUSH
20198: LD_INT 14
20200: PUSH
20201: LD_INT 13
20203: PUSH
20204: EMPTY
20205: LIST
20206: LIST
20207: LIST
20208: LIST
20209: LIST
20210: LIST
20211: PUSH
20212: LD_VAR 0 2
20216: PUSH
20217: LD_INT 3
20219: MINUS
20220: ARRAY
20221: ST_TO_ADDR
// end ; 10 .. 13 :
20222: GO 20732
20224: LD_INT 10
20226: DOUBLE
20227: GREATEREQUAL
20228: IFFALSE 20236
20230: LD_INT 13
20232: DOUBLE
20233: LESSEQUAL
20234: IFTRUE 20238
20236: GO 20315
20238: POP
// begin bc_type := b_lab_full ;
20239: LD_ADDR_OWVAR 42
20243: PUSH
20244: LD_INT 8
20246: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
20247: LD_ADDR_OWVAR 44
20251: PUSH
20252: LD_INT 10
20254: PUSH
20255: LD_INT 12
20257: PUSH
20258: LD_INT 14
20260: PUSH
20261: LD_INT 13
20263: PUSH
20264: EMPTY
20265: LIST
20266: LIST
20267: LIST
20268: LIST
20269: PUSH
20270: LD_VAR 0 2
20274: PUSH
20275: LD_INT 9
20277: MINUS
20278: ARRAY
20279: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
20280: LD_ADDR_OWVAR 45
20284: PUSH
20285: LD_INT 11
20287: PUSH
20288: LD_INT 15
20290: PUSH
20291: LD_INT 12
20293: PUSH
20294: LD_INT 15
20296: PUSH
20297: EMPTY
20298: LIST
20299: LIST
20300: LIST
20301: LIST
20302: PUSH
20303: LD_VAR 0 2
20307: PUSH
20308: LD_INT 9
20310: MINUS
20311: ARRAY
20312: ST_TO_ADDR
// end ; 14 :
20313: GO 20732
20315: LD_INT 14
20317: DOUBLE
20318: EQUAL
20319: IFTRUE 20323
20321: GO 20334
20323: POP
// bc_type := b_workshop ; 15 :
20324: LD_ADDR_OWVAR 42
20328: PUSH
20329: LD_INT 2
20331: ST_TO_ADDR
20332: GO 20732
20334: LD_INT 15
20336: DOUBLE
20337: EQUAL
20338: IFTRUE 20342
20340: GO 20353
20342: POP
// bc_type := b_factory ; 16 :
20343: LD_ADDR_OWVAR 42
20347: PUSH
20348: LD_INT 3
20350: ST_TO_ADDR
20351: GO 20732
20353: LD_INT 16
20355: DOUBLE
20356: EQUAL
20357: IFTRUE 20361
20359: GO 20372
20361: POP
// bc_type := b_ext_gun ; 17 :
20362: LD_ADDR_OWVAR 42
20366: PUSH
20367: LD_INT 17
20369: ST_TO_ADDR
20370: GO 20732
20372: LD_INT 17
20374: DOUBLE
20375: EQUAL
20376: IFTRUE 20380
20378: GO 20408
20380: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
20381: LD_ADDR_OWVAR 42
20385: PUSH
20386: LD_INT 19
20388: PUSH
20389: LD_INT 23
20391: PUSH
20392: LD_INT 19
20394: PUSH
20395: EMPTY
20396: LIST
20397: LIST
20398: LIST
20399: PUSH
20400: LD_VAR 0 1
20404: ARRAY
20405: ST_TO_ADDR
20406: GO 20732
20408: LD_INT 18
20410: DOUBLE
20411: EQUAL
20412: IFTRUE 20416
20414: GO 20427
20416: POP
// bc_type := b_ext_radar ; 19 :
20417: LD_ADDR_OWVAR 42
20421: PUSH
20422: LD_INT 20
20424: ST_TO_ADDR
20425: GO 20732
20427: LD_INT 19
20429: DOUBLE
20430: EQUAL
20431: IFTRUE 20435
20433: GO 20446
20435: POP
// bc_type := b_ext_radio ; 20 :
20436: LD_ADDR_OWVAR 42
20440: PUSH
20441: LD_INT 22
20443: ST_TO_ADDR
20444: GO 20732
20446: LD_INT 20
20448: DOUBLE
20449: EQUAL
20450: IFTRUE 20454
20452: GO 20465
20454: POP
// bc_type := b_ext_siberium ; 21 :
20455: LD_ADDR_OWVAR 42
20459: PUSH
20460: LD_INT 21
20462: ST_TO_ADDR
20463: GO 20732
20465: LD_INT 21
20467: DOUBLE
20468: EQUAL
20469: IFTRUE 20473
20471: GO 20484
20473: POP
// bc_type := b_ext_computer ; 22 :
20474: LD_ADDR_OWVAR 42
20478: PUSH
20479: LD_INT 24
20481: ST_TO_ADDR
20482: GO 20732
20484: LD_INT 22
20486: DOUBLE
20487: EQUAL
20488: IFTRUE 20492
20490: GO 20503
20492: POP
// bc_type := b_ext_track ; 23 :
20493: LD_ADDR_OWVAR 42
20497: PUSH
20498: LD_INT 16
20500: ST_TO_ADDR
20501: GO 20732
20503: LD_INT 23
20505: DOUBLE
20506: EQUAL
20507: IFTRUE 20511
20509: GO 20522
20511: POP
// bc_type := b_ext_laser ; 24 :
20512: LD_ADDR_OWVAR 42
20516: PUSH
20517: LD_INT 25
20519: ST_TO_ADDR
20520: GO 20732
20522: LD_INT 24
20524: DOUBLE
20525: EQUAL
20526: IFTRUE 20530
20528: GO 20541
20530: POP
// bc_type := b_control_tower ; 25 :
20531: LD_ADDR_OWVAR 42
20535: PUSH
20536: LD_INT 36
20538: ST_TO_ADDR
20539: GO 20732
20541: LD_INT 25
20543: DOUBLE
20544: EQUAL
20545: IFTRUE 20549
20547: GO 20560
20549: POP
// bc_type := b_breastwork ; 26 :
20550: LD_ADDR_OWVAR 42
20554: PUSH
20555: LD_INT 31
20557: ST_TO_ADDR
20558: GO 20732
20560: LD_INT 26
20562: DOUBLE
20563: EQUAL
20564: IFTRUE 20568
20566: GO 20579
20568: POP
// bc_type := b_bunker ; 27 :
20569: LD_ADDR_OWVAR 42
20573: PUSH
20574: LD_INT 32
20576: ST_TO_ADDR
20577: GO 20732
20579: LD_INT 27
20581: DOUBLE
20582: EQUAL
20583: IFTRUE 20587
20585: GO 20598
20587: POP
// bc_type := b_turret ; 28 :
20588: LD_ADDR_OWVAR 42
20592: PUSH
20593: LD_INT 33
20595: ST_TO_ADDR
20596: GO 20732
20598: LD_INT 28
20600: DOUBLE
20601: EQUAL
20602: IFTRUE 20606
20604: GO 20617
20606: POP
// bc_type := b_armoury ; 29 :
20607: LD_ADDR_OWVAR 42
20611: PUSH
20612: LD_INT 4
20614: ST_TO_ADDR
20615: GO 20732
20617: LD_INT 29
20619: DOUBLE
20620: EQUAL
20621: IFTRUE 20625
20623: GO 20636
20625: POP
// bc_type := b_barracks ; 30 :
20626: LD_ADDR_OWVAR 42
20630: PUSH
20631: LD_INT 5
20633: ST_TO_ADDR
20634: GO 20732
20636: LD_INT 30
20638: DOUBLE
20639: EQUAL
20640: IFTRUE 20644
20642: GO 20655
20644: POP
// bc_type := b_solar_power ; 31 :
20645: LD_ADDR_OWVAR 42
20649: PUSH
20650: LD_INT 27
20652: ST_TO_ADDR
20653: GO 20732
20655: LD_INT 31
20657: DOUBLE
20658: EQUAL
20659: IFTRUE 20663
20661: GO 20674
20663: POP
// bc_type := b_oil_power ; 32 :
20664: LD_ADDR_OWVAR 42
20668: PUSH
20669: LD_INT 26
20671: ST_TO_ADDR
20672: GO 20732
20674: LD_INT 32
20676: DOUBLE
20677: EQUAL
20678: IFTRUE 20682
20680: GO 20693
20682: POP
// bc_type := b_siberite_power ; 33 :
20683: LD_ADDR_OWVAR 42
20687: PUSH
20688: LD_INT 28
20690: ST_TO_ADDR
20691: GO 20732
20693: LD_INT 33
20695: DOUBLE
20696: EQUAL
20697: IFTRUE 20701
20699: GO 20712
20701: POP
// bc_type := b_oil_mine ; 34 :
20702: LD_ADDR_OWVAR 42
20706: PUSH
20707: LD_INT 29
20709: ST_TO_ADDR
20710: GO 20732
20712: LD_INT 34
20714: DOUBLE
20715: EQUAL
20716: IFTRUE 20720
20718: GO 20731
20720: POP
// bc_type := b_siberite_mine ; end ;
20721: LD_ADDR_OWVAR 42
20725: PUSH
20726: LD_INT 30
20728: ST_TO_ADDR
20729: GO 20732
20731: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
20732: LD_ADDR_VAR 0 8
20736: PUSH
20737: LD_VAR 0 5
20741: PPUSH
20742: LD_VAR 0 6
20746: PPUSH
20747: LD_VAR 0 3
20751: PPUSH
20752: CALL_OW 47
20756: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
20757: LD_OWVAR 42
20761: PUSH
20762: LD_INT 32
20764: PUSH
20765: LD_INT 33
20767: PUSH
20768: EMPTY
20769: LIST
20770: LIST
20771: IN
20772: IFFALSE 20788
// PlaceWeaponTurret ( b , weapon ) ;
20774: LD_VAR 0 8
20778: PPUSH
20779: LD_VAR 0 4
20783: PPUSH
20784: CALL_OW 431
// end ;
20788: LD_VAR 0 7
20792: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
20793: LD_INT 0
20795: PPUSH
20796: PPUSH
20797: PPUSH
20798: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20799: LD_ADDR_VAR 0 4
20803: PUSH
20804: LD_INT 22
20806: PUSH
20807: LD_OWVAR 2
20811: PUSH
20812: EMPTY
20813: LIST
20814: LIST
20815: PUSH
20816: LD_INT 2
20818: PUSH
20819: LD_INT 30
20821: PUSH
20822: LD_INT 0
20824: PUSH
20825: EMPTY
20826: LIST
20827: LIST
20828: PUSH
20829: LD_INT 30
20831: PUSH
20832: LD_INT 1
20834: PUSH
20835: EMPTY
20836: LIST
20837: LIST
20838: PUSH
20839: EMPTY
20840: LIST
20841: LIST
20842: LIST
20843: PUSH
20844: EMPTY
20845: LIST
20846: LIST
20847: PPUSH
20848: CALL_OW 69
20852: ST_TO_ADDR
// if not tmp then
20853: LD_VAR 0 4
20857: NOT
20858: IFFALSE 20862
// exit ;
20860: GO 20921
// for i in tmp do
20862: LD_ADDR_VAR 0 2
20866: PUSH
20867: LD_VAR 0 4
20871: PUSH
20872: FOR_IN
20873: IFFALSE 20919
// for j = 1 to 3 do
20875: LD_ADDR_VAR 0 3
20879: PUSH
20880: DOUBLE
20881: LD_INT 1
20883: DEC
20884: ST_TO_ADDR
20885: LD_INT 3
20887: PUSH
20888: FOR_TO
20889: IFFALSE 20915
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
20891: LD_VAR 0 2
20895: PPUSH
20896: CALL_OW 274
20900: PPUSH
20901: LD_VAR 0 3
20905: PPUSH
20906: LD_INT 99999
20908: PPUSH
20909: CALL_OW 277
20913: GO 20888
20915: POP
20916: POP
20917: GO 20872
20919: POP
20920: POP
// end ;
20921: LD_VAR 0 1
20925: RET
// export function hHackSetLevel10 ; var i , j ; begin
20926: LD_INT 0
20928: PPUSH
20929: PPUSH
20930: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
20931: LD_ADDR_VAR 0 2
20935: PUSH
20936: LD_INT 21
20938: PUSH
20939: LD_INT 1
20941: PUSH
20942: EMPTY
20943: LIST
20944: LIST
20945: PPUSH
20946: CALL_OW 69
20950: PUSH
20951: FOR_IN
20952: IFFALSE 21004
// if IsSelected ( i ) then
20954: LD_VAR 0 2
20958: PPUSH
20959: CALL_OW 306
20963: IFFALSE 21002
// begin for j := 1 to 4 do
20965: LD_ADDR_VAR 0 3
20969: PUSH
20970: DOUBLE
20971: LD_INT 1
20973: DEC
20974: ST_TO_ADDR
20975: LD_INT 4
20977: PUSH
20978: FOR_TO
20979: IFFALSE 21000
// SetSkill ( i , j , 10 ) ;
20981: LD_VAR 0 2
20985: PPUSH
20986: LD_VAR 0 3
20990: PPUSH
20991: LD_INT 10
20993: PPUSH
20994: CALL_OW 237
20998: GO 20978
21000: POP
21001: POP
// end ;
21002: GO 20951
21004: POP
21005: POP
// end ;
21006: LD_VAR 0 1
21010: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
21011: LD_INT 0
21013: PPUSH
21014: PPUSH
21015: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
21016: LD_ADDR_VAR 0 2
21020: PUSH
21021: LD_INT 22
21023: PUSH
21024: LD_OWVAR 2
21028: PUSH
21029: EMPTY
21030: LIST
21031: LIST
21032: PUSH
21033: LD_INT 21
21035: PUSH
21036: LD_INT 1
21038: PUSH
21039: EMPTY
21040: LIST
21041: LIST
21042: PUSH
21043: EMPTY
21044: LIST
21045: LIST
21046: PPUSH
21047: CALL_OW 69
21051: PUSH
21052: FOR_IN
21053: IFFALSE 21094
// begin for j := 1 to 4 do
21055: LD_ADDR_VAR 0 3
21059: PUSH
21060: DOUBLE
21061: LD_INT 1
21063: DEC
21064: ST_TO_ADDR
21065: LD_INT 4
21067: PUSH
21068: FOR_TO
21069: IFFALSE 21090
// SetSkill ( i , j , 10 ) ;
21071: LD_VAR 0 2
21075: PPUSH
21076: LD_VAR 0 3
21080: PPUSH
21081: LD_INT 10
21083: PPUSH
21084: CALL_OW 237
21088: GO 21068
21090: POP
21091: POP
// end ;
21092: GO 21052
21094: POP
21095: POP
// end ;
21096: LD_VAR 0 1
21100: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
21101: LD_INT 0
21103: PPUSH
// uc_side := your_side ;
21104: LD_ADDR_OWVAR 20
21108: PUSH
21109: LD_OWVAR 2
21113: ST_TO_ADDR
// uc_nation := nation ;
21114: LD_ADDR_OWVAR 21
21118: PUSH
21119: LD_VAR 0 1
21123: ST_TO_ADDR
// InitHc ;
21124: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
21128: LD_INT 0
21130: PPUSH
21131: LD_VAR 0 2
21135: PPUSH
21136: LD_VAR 0 3
21140: PPUSH
21141: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
21145: LD_VAR 0 4
21149: PPUSH
21150: LD_VAR 0 5
21154: PPUSH
21155: CALL_OW 428
21159: PUSH
21160: LD_INT 0
21162: EQUAL
21163: IFFALSE 21187
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
21165: CALL_OW 44
21169: PPUSH
21170: LD_VAR 0 4
21174: PPUSH
21175: LD_VAR 0 5
21179: PPUSH
21180: LD_INT 1
21182: PPUSH
21183: CALL_OW 48
// end ;
21187: LD_VAR 0 6
21191: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
21192: LD_INT 0
21194: PPUSH
21195: PPUSH
// uc_side := your_side ;
21196: LD_ADDR_OWVAR 20
21200: PUSH
21201: LD_OWVAR 2
21205: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
21206: LD_VAR 0 1
21210: PUSH
21211: LD_INT 1
21213: PUSH
21214: LD_INT 2
21216: PUSH
21217: LD_INT 3
21219: PUSH
21220: LD_INT 4
21222: PUSH
21223: LD_INT 5
21225: PUSH
21226: EMPTY
21227: LIST
21228: LIST
21229: LIST
21230: LIST
21231: LIST
21232: IN
21233: IFFALSE 21245
// uc_nation := nation_american else
21235: LD_ADDR_OWVAR 21
21239: PUSH
21240: LD_INT 1
21242: ST_TO_ADDR
21243: GO 21288
// if chassis in [ 11 , 12 , 13 , 14 ] then
21245: LD_VAR 0 1
21249: PUSH
21250: LD_INT 11
21252: PUSH
21253: LD_INT 12
21255: PUSH
21256: LD_INT 13
21258: PUSH
21259: LD_INT 14
21261: PUSH
21262: EMPTY
21263: LIST
21264: LIST
21265: LIST
21266: LIST
21267: IN
21268: IFFALSE 21280
// uc_nation := nation_arabian else
21270: LD_ADDR_OWVAR 21
21274: PUSH
21275: LD_INT 2
21277: ST_TO_ADDR
21278: GO 21288
// uc_nation := nation_russian ;
21280: LD_ADDR_OWVAR 21
21284: PUSH
21285: LD_INT 3
21287: ST_TO_ADDR
// vc_chassis := chassis ;
21288: LD_ADDR_OWVAR 37
21292: PUSH
21293: LD_VAR 0 1
21297: ST_TO_ADDR
// vc_engine := engine ;
21298: LD_ADDR_OWVAR 39
21302: PUSH
21303: LD_VAR 0 2
21307: ST_TO_ADDR
// vc_control := control ;
21308: LD_ADDR_OWVAR 38
21312: PUSH
21313: LD_VAR 0 3
21317: ST_TO_ADDR
// vc_weapon := weapon ;
21318: LD_ADDR_OWVAR 40
21322: PUSH
21323: LD_VAR 0 4
21327: ST_TO_ADDR
// un := CreateVehicle ;
21328: LD_ADDR_VAR 0 8
21332: PUSH
21333: CALL_OW 45
21337: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
21338: LD_VAR 0 8
21342: PPUSH
21343: LD_INT 0
21345: PPUSH
21346: LD_INT 5
21348: PPUSH
21349: CALL_OW 12
21353: PPUSH
21354: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
21358: LD_VAR 0 8
21362: PPUSH
21363: LD_VAR 0 5
21367: PPUSH
21368: LD_VAR 0 6
21372: PPUSH
21373: LD_INT 1
21375: PPUSH
21376: CALL_OW 48
// end ;
21380: LD_VAR 0 7
21384: RET
// export hInvincible ; every 1 do
21385: GO 21387
21387: DISABLE
// hInvincible := [ ] ;
21388: LD_ADDR_EXP 105
21392: PUSH
21393: EMPTY
21394: ST_TO_ADDR
21395: END
// every 10 do var i ;
21396: GO 21398
21398: DISABLE
21399: LD_INT 0
21401: PPUSH
// begin enable ;
21402: ENABLE
// if not hInvincible then
21403: LD_EXP 105
21407: NOT
21408: IFFALSE 21412
// exit ;
21410: GO 21456
// for i in hInvincible do
21412: LD_ADDR_VAR 0 1
21416: PUSH
21417: LD_EXP 105
21421: PUSH
21422: FOR_IN
21423: IFFALSE 21454
// if GetLives ( i ) < 1000 then
21425: LD_VAR 0 1
21429: PPUSH
21430: CALL_OW 256
21434: PUSH
21435: LD_INT 1000
21437: LESS
21438: IFFALSE 21452
// SetLives ( i , 1000 ) ;
21440: LD_VAR 0 1
21444: PPUSH
21445: LD_INT 1000
21447: PPUSH
21448: CALL_OW 234
21452: GO 21422
21454: POP
21455: POP
// end ;
21456: PPOPN 1
21458: END
// export function hHackInvincible ; var i ; begin
21459: LD_INT 0
21461: PPUSH
21462: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
21463: LD_ADDR_VAR 0 2
21467: PUSH
21468: LD_INT 2
21470: PUSH
21471: LD_INT 21
21473: PUSH
21474: LD_INT 1
21476: PUSH
21477: EMPTY
21478: LIST
21479: LIST
21480: PUSH
21481: LD_INT 21
21483: PUSH
21484: LD_INT 2
21486: PUSH
21487: EMPTY
21488: LIST
21489: LIST
21490: PUSH
21491: EMPTY
21492: LIST
21493: LIST
21494: LIST
21495: PPUSH
21496: CALL_OW 69
21500: PUSH
21501: FOR_IN
21502: IFFALSE 21563
// if IsSelected ( i ) then
21504: LD_VAR 0 2
21508: PPUSH
21509: CALL_OW 306
21513: IFFALSE 21561
// begin if i in hInvincible then
21515: LD_VAR 0 2
21519: PUSH
21520: LD_EXP 105
21524: IN
21525: IFFALSE 21545
// hInvincible := hInvincible diff i else
21527: LD_ADDR_EXP 105
21531: PUSH
21532: LD_EXP 105
21536: PUSH
21537: LD_VAR 0 2
21541: DIFF
21542: ST_TO_ADDR
21543: GO 21561
// hInvincible := hInvincible union i ;
21545: LD_ADDR_EXP 105
21549: PUSH
21550: LD_EXP 105
21554: PUSH
21555: LD_VAR 0 2
21559: UNION
21560: ST_TO_ADDR
// end ;
21561: GO 21501
21563: POP
21564: POP
// end ;
21565: LD_VAR 0 1
21569: RET
// export function hHackInvisible ; var i , j ; begin
21570: LD_INT 0
21572: PPUSH
21573: PPUSH
21574: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
21575: LD_ADDR_VAR 0 2
21579: PUSH
21580: LD_INT 21
21582: PUSH
21583: LD_INT 1
21585: PUSH
21586: EMPTY
21587: LIST
21588: LIST
21589: PPUSH
21590: CALL_OW 69
21594: PUSH
21595: FOR_IN
21596: IFFALSE 21620
// if IsSelected ( i ) then
21598: LD_VAR 0 2
21602: PPUSH
21603: CALL_OW 306
21607: IFFALSE 21618
// ComForceInvisible ( i ) ;
21609: LD_VAR 0 2
21613: PPUSH
21614: CALL_OW 496
21618: GO 21595
21620: POP
21621: POP
// end ;
21622: LD_VAR 0 1
21626: RET
// export function hHackChangeYourSide ; begin
21627: LD_INT 0
21629: PPUSH
// if your_side = 8 then
21630: LD_OWVAR 2
21634: PUSH
21635: LD_INT 8
21637: EQUAL
21638: IFFALSE 21650
// your_side := 0 else
21640: LD_ADDR_OWVAR 2
21644: PUSH
21645: LD_INT 0
21647: ST_TO_ADDR
21648: GO 21664
// your_side := your_side + 1 ;
21650: LD_ADDR_OWVAR 2
21654: PUSH
21655: LD_OWVAR 2
21659: PUSH
21660: LD_INT 1
21662: PLUS
21663: ST_TO_ADDR
// end ;
21664: LD_VAR 0 1
21668: RET
// export function hHackChangeUnitSide ; var i , j ; begin
21669: LD_INT 0
21671: PPUSH
21672: PPUSH
21673: PPUSH
// for i in all_units do
21674: LD_ADDR_VAR 0 2
21678: PUSH
21679: LD_OWVAR 3
21683: PUSH
21684: FOR_IN
21685: IFFALSE 21763
// if IsSelected ( i ) then
21687: LD_VAR 0 2
21691: PPUSH
21692: CALL_OW 306
21696: IFFALSE 21761
// begin j := GetSide ( i ) ;
21698: LD_ADDR_VAR 0 3
21702: PUSH
21703: LD_VAR 0 2
21707: PPUSH
21708: CALL_OW 255
21712: ST_TO_ADDR
// if j = 8 then
21713: LD_VAR 0 3
21717: PUSH
21718: LD_INT 8
21720: EQUAL
21721: IFFALSE 21733
// j := 0 else
21723: LD_ADDR_VAR 0 3
21727: PUSH
21728: LD_INT 0
21730: ST_TO_ADDR
21731: GO 21747
// j := j + 1 ;
21733: LD_ADDR_VAR 0 3
21737: PUSH
21738: LD_VAR 0 3
21742: PUSH
21743: LD_INT 1
21745: PLUS
21746: ST_TO_ADDR
// SetSide ( i , j ) ;
21747: LD_VAR 0 2
21751: PPUSH
21752: LD_VAR 0 3
21756: PPUSH
21757: CALL_OW 235
// end ;
21761: GO 21684
21763: POP
21764: POP
// end ;
21765: LD_VAR 0 1
21769: RET
// export function hHackFog ; begin
21770: LD_INT 0
21772: PPUSH
// FogOff ( true ) ;
21773: LD_INT 1
21775: PPUSH
21776: CALL_OW 344
// end ;
21780: LD_VAR 0 1
21784: RET
// export function hHackTeleport ( unit , x , y ) ; begin
21785: LD_INT 0
21787: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
21788: LD_VAR 0 1
21792: PPUSH
21793: LD_VAR 0 2
21797: PPUSH
21798: LD_VAR 0 3
21802: PPUSH
21803: LD_INT 1
21805: PPUSH
21806: LD_INT 1
21808: PPUSH
21809: CALL_OW 483
// CenterOnXY ( x , y ) ;
21813: LD_VAR 0 2
21817: PPUSH
21818: LD_VAR 0 3
21822: PPUSH
21823: CALL_OW 84
// end ; end_of_file
21827: LD_VAR 0 4
21831: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
21832: LD_INT 0
21834: PPUSH
21835: PPUSH
21836: PPUSH
21837: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
21838: LD_VAR 0 1
21842: PPUSH
21843: CALL_OW 264
21847: PUSH
21848: LD_EXP 33
21852: EQUAL
21853: IFFALSE 21925
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
21855: LD_INT 68
21857: PPUSH
21858: LD_VAR 0 1
21862: PPUSH
21863: CALL_OW 255
21867: PPUSH
21868: CALL_OW 321
21872: PUSH
21873: LD_INT 2
21875: EQUAL
21876: IFFALSE 21888
// eff := 70 else
21878: LD_ADDR_VAR 0 4
21882: PUSH
21883: LD_INT 70
21885: ST_TO_ADDR
21886: GO 21896
// eff := 30 ;
21888: LD_ADDR_VAR 0 4
21892: PUSH
21893: LD_INT 30
21895: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
21896: LD_VAR 0 1
21900: PPUSH
21901: CALL_OW 250
21905: PPUSH
21906: LD_VAR 0 1
21910: PPUSH
21911: CALL_OW 251
21915: PPUSH
21916: LD_VAR 0 4
21920: PPUSH
21921: CALL_OW 495
// end ; end ;
21925: LD_VAR 0 2
21929: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
21930: LD_INT 0
21932: PPUSH
// end ;
21933: LD_VAR 0 4
21937: RET
// export function SOS_Command ( cmd ) ; begin
21938: LD_INT 0
21940: PPUSH
// end ;
21941: LD_VAR 0 2
21945: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
21946: LD_INT 0
21948: PPUSH
// end ;
21949: LD_VAR 0 6
21953: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
21954: LD_INT 0
21956: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
21957: LD_VAR 0 1
21961: PUSH
21962: LD_INT 250
21964: EQUAL
21965: PUSH
21966: LD_VAR 0 2
21970: PPUSH
21971: CALL_OW 264
21975: PUSH
21976: LD_EXP 36
21980: EQUAL
21981: AND
21982: IFFALSE 22003
// MinerPlaceMine ( unit , x , y ) ;
21984: LD_VAR 0 2
21988: PPUSH
21989: LD_VAR 0 4
21993: PPUSH
21994: LD_VAR 0 5
21998: PPUSH
21999: CALL 24352 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
22003: LD_VAR 0 1
22007: PUSH
22008: LD_INT 251
22010: EQUAL
22011: PUSH
22012: LD_VAR 0 2
22016: PPUSH
22017: CALL_OW 264
22021: PUSH
22022: LD_EXP 36
22026: EQUAL
22027: AND
22028: IFFALSE 22049
// MinerDetonateMine ( unit , x , y ) ;
22030: LD_VAR 0 2
22034: PPUSH
22035: LD_VAR 0 4
22039: PPUSH
22040: LD_VAR 0 5
22044: PPUSH
22045: CALL 24629 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
22049: LD_VAR 0 1
22053: PUSH
22054: LD_INT 252
22056: EQUAL
22057: PUSH
22058: LD_VAR 0 2
22062: PPUSH
22063: CALL_OW 264
22067: PUSH
22068: LD_EXP 36
22072: EQUAL
22073: AND
22074: IFFALSE 22095
// MinerCreateMinefield ( unit , x , y ) ;
22076: LD_VAR 0 2
22080: PPUSH
22081: LD_VAR 0 4
22085: PPUSH
22086: LD_VAR 0 5
22090: PPUSH
22091: CALL 25046 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
22095: LD_VAR 0 1
22099: PUSH
22100: LD_INT 253
22102: EQUAL
22103: PUSH
22104: LD_VAR 0 2
22108: PPUSH
22109: CALL_OW 257
22113: PUSH
22114: LD_INT 5
22116: EQUAL
22117: AND
22118: IFFALSE 22139
// ComBinocular ( unit , x , y ) ;
22120: LD_VAR 0 2
22124: PPUSH
22125: LD_VAR 0 4
22129: PPUSH
22130: LD_VAR 0 5
22134: PPUSH
22135: CALL 25417 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
22139: LD_VAR 0 1
22143: PUSH
22144: LD_INT 254
22146: EQUAL
22147: PUSH
22148: LD_VAR 0 2
22152: PPUSH
22153: CALL_OW 264
22157: PUSH
22158: LD_EXP 31
22162: EQUAL
22163: AND
22164: PUSH
22165: LD_VAR 0 3
22169: PPUSH
22170: CALL_OW 263
22174: PUSH
22175: LD_INT 3
22177: EQUAL
22178: AND
22179: IFFALSE 22195
// HackDestroyVehicle ( unit , selectedUnit ) ;
22181: LD_VAR 0 2
22185: PPUSH
22186: LD_VAR 0 3
22190: PPUSH
22191: CALL 23712 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
22195: LD_VAR 0 1
22199: PUSH
22200: LD_INT 255
22202: EQUAL
22203: PUSH
22204: LD_VAR 0 2
22208: PPUSH
22209: CALL_OW 264
22213: PUSH
22214: LD_INT 14
22216: PUSH
22217: LD_INT 53
22219: PUSH
22220: EMPTY
22221: LIST
22222: LIST
22223: IN
22224: AND
22225: PUSH
22226: LD_VAR 0 4
22230: PPUSH
22231: LD_VAR 0 5
22235: PPUSH
22236: CALL_OW 488
22240: AND
22241: IFFALSE 22265
// CutTreeXYR ( unit , x , y , 12 ) ;
22243: LD_VAR 0 2
22247: PPUSH
22248: LD_VAR 0 4
22252: PPUSH
22253: LD_VAR 0 5
22257: PPUSH
22258: LD_INT 12
22260: PPUSH
22261: CALL 22278 0 4
// end ;
22265: LD_VAR 0 6
22269: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
22270: LD_INT 0
22272: PPUSH
// end ;
22273: LD_VAR 0 4
22277: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
22278: LD_INT 0
22280: PPUSH
22281: PPUSH
22282: PPUSH
22283: PPUSH
22284: PPUSH
22285: PPUSH
22286: PPUSH
22287: PPUSH
22288: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
22289: LD_VAR 0 1
22293: NOT
22294: PUSH
22295: LD_VAR 0 2
22299: PPUSH
22300: LD_VAR 0 3
22304: PPUSH
22305: CALL_OW 488
22309: NOT
22310: OR
22311: PUSH
22312: LD_VAR 0 4
22316: NOT
22317: OR
22318: IFFALSE 22322
// exit ;
22320: GO 22662
// list := [ ] ;
22322: LD_ADDR_VAR 0 13
22326: PUSH
22327: EMPTY
22328: ST_TO_ADDR
// if x - r < 0 then
22329: LD_VAR 0 2
22333: PUSH
22334: LD_VAR 0 4
22338: MINUS
22339: PUSH
22340: LD_INT 0
22342: LESS
22343: IFFALSE 22355
// min_x := 0 else
22345: LD_ADDR_VAR 0 7
22349: PUSH
22350: LD_INT 0
22352: ST_TO_ADDR
22353: GO 22371
// min_x := x - r ;
22355: LD_ADDR_VAR 0 7
22359: PUSH
22360: LD_VAR 0 2
22364: PUSH
22365: LD_VAR 0 4
22369: MINUS
22370: ST_TO_ADDR
// if y - r < 0 then
22371: LD_VAR 0 3
22375: PUSH
22376: LD_VAR 0 4
22380: MINUS
22381: PUSH
22382: LD_INT 0
22384: LESS
22385: IFFALSE 22397
// min_y := 0 else
22387: LD_ADDR_VAR 0 8
22391: PUSH
22392: LD_INT 0
22394: ST_TO_ADDR
22395: GO 22413
// min_y := y - r ;
22397: LD_ADDR_VAR 0 8
22401: PUSH
22402: LD_VAR 0 3
22406: PUSH
22407: LD_VAR 0 4
22411: MINUS
22412: ST_TO_ADDR
// max_x := x + r ;
22413: LD_ADDR_VAR 0 9
22417: PUSH
22418: LD_VAR 0 2
22422: PUSH
22423: LD_VAR 0 4
22427: PLUS
22428: ST_TO_ADDR
// max_y := y + r ;
22429: LD_ADDR_VAR 0 10
22433: PUSH
22434: LD_VAR 0 3
22438: PUSH
22439: LD_VAR 0 4
22443: PLUS
22444: ST_TO_ADDR
// for _x = min_x to max_x do
22445: LD_ADDR_VAR 0 11
22449: PUSH
22450: DOUBLE
22451: LD_VAR 0 7
22455: DEC
22456: ST_TO_ADDR
22457: LD_VAR 0 9
22461: PUSH
22462: FOR_TO
22463: IFFALSE 22580
// for _y = min_y to max_y do
22465: LD_ADDR_VAR 0 12
22469: PUSH
22470: DOUBLE
22471: LD_VAR 0 8
22475: DEC
22476: ST_TO_ADDR
22477: LD_VAR 0 10
22481: PUSH
22482: FOR_TO
22483: IFFALSE 22576
// begin if not ValidHex ( _x , _y ) then
22485: LD_VAR 0 11
22489: PPUSH
22490: LD_VAR 0 12
22494: PPUSH
22495: CALL_OW 488
22499: NOT
22500: IFFALSE 22504
// continue ;
22502: GO 22482
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
22504: LD_VAR 0 11
22508: PPUSH
22509: LD_VAR 0 12
22513: PPUSH
22514: CALL_OW 351
22518: PUSH
22519: LD_VAR 0 11
22523: PPUSH
22524: LD_VAR 0 12
22528: PPUSH
22529: CALL_OW 554
22533: AND
22534: IFFALSE 22574
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
22536: LD_ADDR_VAR 0 13
22540: PUSH
22541: LD_VAR 0 13
22545: PPUSH
22546: LD_VAR 0 13
22550: PUSH
22551: LD_INT 1
22553: PLUS
22554: PPUSH
22555: LD_VAR 0 11
22559: PUSH
22560: LD_VAR 0 12
22564: PUSH
22565: EMPTY
22566: LIST
22567: LIST
22568: PPUSH
22569: CALL_OW 2
22573: ST_TO_ADDR
// end ;
22574: GO 22482
22576: POP
22577: POP
22578: GO 22462
22580: POP
22581: POP
// if not list then
22582: LD_VAR 0 13
22586: NOT
22587: IFFALSE 22591
// exit ;
22589: GO 22662
// for i in list do
22591: LD_ADDR_VAR 0 6
22595: PUSH
22596: LD_VAR 0 13
22600: PUSH
22601: FOR_IN
22602: IFFALSE 22660
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
22604: LD_VAR 0 1
22608: PPUSH
22609: LD_STRING M
22611: PUSH
22612: LD_VAR 0 6
22616: PUSH
22617: LD_INT 1
22619: ARRAY
22620: PUSH
22621: LD_VAR 0 6
22625: PUSH
22626: LD_INT 2
22628: ARRAY
22629: PUSH
22630: LD_INT 0
22632: PUSH
22633: LD_INT 0
22635: PUSH
22636: LD_INT 0
22638: PUSH
22639: LD_INT 0
22641: PUSH
22642: EMPTY
22643: LIST
22644: LIST
22645: LIST
22646: LIST
22647: LIST
22648: LIST
22649: LIST
22650: PUSH
22651: EMPTY
22652: LIST
22653: PPUSH
22654: CALL_OW 447
22658: GO 22601
22660: POP
22661: POP
// end ;
22662: LD_VAR 0 5
22666: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
22667: LD_EXP 108
22671: NOT
22672: IFFALSE 22722
22674: GO 22676
22676: DISABLE
// begin initHack := true ;
22677: LD_ADDR_EXP 108
22681: PUSH
22682: LD_INT 1
22684: ST_TO_ADDR
// hackTanks := [ ] ;
22685: LD_ADDR_EXP 109
22689: PUSH
22690: EMPTY
22691: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
22692: LD_ADDR_EXP 110
22696: PUSH
22697: EMPTY
22698: ST_TO_ADDR
// hackLimit := 3 ;
22699: LD_ADDR_EXP 111
22703: PUSH
22704: LD_INT 3
22706: ST_TO_ADDR
// hackDist := 12 ;
22707: LD_ADDR_EXP 112
22711: PUSH
22712: LD_INT 12
22714: ST_TO_ADDR
// hackCounter := [ ] ;
22715: LD_ADDR_EXP 113
22719: PUSH
22720: EMPTY
22721: ST_TO_ADDR
// end ;
22722: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
22723: LD_EXP 108
22727: PUSH
22728: LD_INT 34
22730: PUSH
22731: LD_EXP 31
22735: PUSH
22736: EMPTY
22737: LIST
22738: LIST
22739: PPUSH
22740: CALL_OW 69
22744: AND
22745: IFFALSE 23000
22747: GO 22749
22749: DISABLE
22750: LD_INT 0
22752: PPUSH
22753: PPUSH
// begin enable ;
22754: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
22755: LD_ADDR_VAR 0 1
22759: PUSH
22760: LD_INT 34
22762: PUSH
22763: LD_EXP 31
22767: PUSH
22768: EMPTY
22769: LIST
22770: LIST
22771: PPUSH
22772: CALL_OW 69
22776: PUSH
22777: FOR_IN
22778: IFFALSE 22998
// begin if not i in hackTanks then
22780: LD_VAR 0 1
22784: PUSH
22785: LD_EXP 109
22789: IN
22790: NOT
22791: IFFALSE 22874
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
22793: LD_ADDR_EXP 109
22797: PUSH
22798: LD_EXP 109
22802: PPUSH
22803: LD_EXP 109
22807: PUSH
22808: LD_INT 1
22810: PLUS
22811: PPUSH
22812: LD_VAR 0 1
22816: PPUSH
22817: CALL_OW 1
22821: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
22822: LD_ADDR_EXP 110
22826: PUSH
22827: LD_EXP 110
22831: PPUSH
22832: LD_EXP 110
22836: PUSH
22837: LD_INT 1
22839: PLUS
22840: PPUSH
22841: EMPTY
22842: PPUSH
22843: CALL_OW 1
22847: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
22848: LD_ADDR_EXP 113
22852: PUSH
22853: LD_EXP 113
22857: PPUSH
22858: LD_EXP 113
22862: PUSH
22863: LD_INT 1
22865: PLUS
22866: PPUSH
22867: EMPTY
22868: PPUSH
22869: CALL_OW 1
22873: ST_TO_ADDR
// end ; if not IsOk ( i ) then
22874: LD_VAR 0 1
22878: PPUSH
22879: CALL_OW 302
22883: NOT
22884: IFFALSE 22897
// begin HackUnlinkAll ( i ) ;
22886: LD_VAR 0 1
22890: PPUSH
22891: CALL 23003 0 1
// continue ;
22895: GO 22777
// end ; HackCheckCapturedStatus ( i ) ;
22897: LD_VAR 0 1
22901: PPUSH
22902: CALL 23446 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
22906: LD_ADDR_VAR 0 2
22910: PUSH
22911: LD_INT 81
22913: PUSH
22914: LD_VAR 0 1
22918: PPUSH
22919: CALL_OW 255
22923: PUSH
22924: EMPTY
22925: LIST
22926: LIST
22927: PUSH
22928: LD_INT 33
22930: PUSH
22931: LD_INT 3
22933: PUSH
22934: EMPTY
22935: LIST
22936: LIST
22937: PUSH
22938: LD_INT 91
22940: PUSH
22941: LD_VAR 0 1
22945: PUSH
22946: LD_EXP 112
22950: PUSH
22951: EMPTY
22952: LIST
22953: LIST
22954: LIST
22955: PUSH
22956: LD_INT 50
22958: PUSH
22959: EMPTY
22960: LIST
22961: PUSH
22962: EMPTY
22963: LIST
22964: LIST
22965: LIST
22966: LIST
22967: PPUSH
22968: CALL_OW 69
22972: ST_TO_ADDR
// if not tmp then
22973: LD_VAR 0 2
22977: NOT
22978: IFFALSE 22982
// continue ;
22980: GO 22777
// HackLink ( i , tmp ) ;
22982: LD_VAR 0 1
22986: PPUSH
22987: LD_VAR 0 2
22991: PPUSH
22992: CALL 23139 0 2
// end ;
22996: GO 22777
22998: POP
22999: POP
// end ;
23000: PPOPN 2
23002: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
23003: LD_INT 0
23005: PPUSH
23006: PPUSH
23007: PPUSH
// if not hack in hackTanks then
23008: LD_VAR 0 1
23012: PUSH
23013: LD_EXP 109
23017: IN
23018: NOT
23019: IFFALSE 23023
// exit ;
23021: GO 23134
// index := GetElementIndex ( hackTanks , hack ) ;
23023: LD_ADDR_VAR 0 4
23027: PUSH
23028: LD_EXP 109
23032: PPUSH
23033: LD_VAR 0 1
23037: PPUSH
23038: CALL 30608 0 2
23042: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
23043: LD_EXP 110
23047: PUSH
23048: LD_VAR 0 4
23052: ARRAY
23053: IFFALSE 23134
// begin for i in hackTanksCaptured [ index ] do
23055: LD_ADDR_VAR 0 3
23059: PUSH
23060: LD_EXP 110
23064: PUSH
23065: LD_VAR 0 4
23069: ARRAY
23070: PUSH
23071: FOR_IN
23072: IFFALSE 23098
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
23074: LD_VAR 0 3
23078: PUSH
23079: LD_INT 1
23081: ARRAY
23082: PPUSH
23083: LD_VAR 0 3
23087: PUSH
23088: LD_INT 2
23090: ARRAY
23091: PPUSH
23092: CALL_OW 235
23096: GO 23071
23098: POP
23099: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
23100: LD_ADDR_EXP 110
23104: PUSH
23105: LD_EXP 110
23109: PPUSH
23110: LD_VAR 0 4
23114: PPUSH
23115: EMPTY
23116: PPUSH
23117: CALL_OW 1
23121: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
23122: LD_VAR 0 1
23126: PPUSH
23127: LD_INT 0
23129: PPUSH
23130: CALL_OW 505
// end ; end ;
23134: LD_VAR 0 2
23138: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
23139: LD_INT 0
23141: PPUSH
23142: PPUSH
23143: PPUSH
// if not hack in hackTanks or not vehicles then
23144: LD_VAR 0 1
23148: PUSH
23149: LD_EXP 109
23153: IN
23154: NOT
23155: PUSH
23156: LD_VAR 0 2
23160: NOT
23161: OR
23162: IFFALSE 23166
// exit ;
23164: GO 23441
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
23166: LD_ADDR_VAR 0 2
23170: PUSH
23171: LD_VAR 0 1
23175: PPUSH
23176: LD_VAR 0 2
23180: PPUSH
23181: LD_INT 1
23183: PPUSH
23184: LD_INT 1
23186: PPUSH
23187: CALL 31258 0 4
23191: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
23192: LD_ADDR_VAR 0 5
23196: PUSH
23197: LD_EXP 109
23201: PPUSH
23202: LD_VAR 0 1
23206: PPUSH
23207: CALL 30608 0 2
23211: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
23212: LD_EXP 110
23216: PUSH
23217: LD_VAR 0 5
23221: ARRAY
23222: PUSH
23223: LD_EXP 111
23227: LESS
23228: IFFALSE 23417
// begin for i := 1 to vehicles do
23230: LD_ADDR_VAR 0 4
23234: PUSH
23235: DOUBLE
23236: LD_INT 1
23238: DEC
23239: ST_TO_ADDR
23240: LD_VAR 0 2
23244: PUSH
23245: FOR_TO
23246: IFFALSE 23415
// begin if hackTanksCaptured [ index ] = hackLimit then
23248: LD_EXP 110
23252: PUSH
23253: LD_VAR 0 5
23257: ARRAY
23258: PUSH
23259: LD_EXP 111
23263: EQUAL
23264: IFFALSE 23268
// break ;
23266: GO 23415
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
23268: LD_ADDR_EXP 113
23272: PUSH
23273: LD_EXP 113
23277: PPUSH
23278: LD_VAR 0 5
23282: PPUSH
23283: LD_EXP 113
23287: PUSH
23288: LD_VAR 0 5
23292: ARRAY
23293: PUSH
23294: LD_INT 1
23296: PLUS
23297: PPUSH
23298: CALL_OW 1
23302: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
23303: LD_ADDR_EXP 110
23307: PUSH
23308: LD_EXP 110
23312: PPUSH
23313: LD_VAR 0 5
23317: PUSH
23318: LD_EXP 110
23322: PUSH
23323: LD_VAR 0 5
23327: ARRAY
23328: PUSH
23329: LD_INT 1
23331: PLUS
23332: PUSH
23333: EMPTY
23334: LIST
23335: LIST
23336: PPUSH
23337: LD_VAR 0 2
23341: PUSH
23342: LD_VAR 0 4
23346: ARRAY
23347: PUSH
23348: LD_VAR 0 2
23352: PUSH
23353: LD_VAR 0 4
23357: ARRAY
23358: PPUSH
23359: CALL_OW 255
23363: PUSH
23364: EMPTY
23365: LIST
23366: LIST
23367: PPUSH
23368: CALL 30823 0 3
23372: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
23373: LD_VAR 0 2
23377: PUSH
23378: LD_VAR 0 4
23382: ARRAY
23383: PPUSH
23384: LD_VAR 0 1
23388: PPUSH
23389: CALL_OW 255
23393: PPUSH
23394: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
23398: LD_VAR 0 2
23402: PUSH
23403: LD_VAR 0 4
23407: ARRAY
23408: PPUSH
23409: CALL_OW 141
// end ;
23413: GO 23245
23415: POP
23416: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
23417: LD_VAR 0 1
23421: PPUSH
23422: LD_EXP 110
23426: PUSH
23427: LD_VAR 0 5
23431: ARRAY
23432: PUSH
23433: LD_INT 0
23435: PLUS
23436: PPUSH
23437: CALL_OW 505
// end ;
23441: LD_VAR 0 3
23445: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
23446: LD_INT 0
23448: PPUSH
23449: PPUSH
23450: PPUSH
23451: PPUSH
// if not hack in hackTanks then
23452: LD_VAR 0 1
23456: PUSH
23457: LD_EXP 109
23461: IN
23462: NOT
23463: IFFALSE 23467
// exit ;
23465: GO 23707
// index := GetElementIndex ( hackTanks , hack ) ;
23467: LD_ADDR_VAR 0 4
23471: PUSH
23472: LD_EXP 109
23476: PPUSH
23477: LD_VAR 0 1
23481: PPUSH
23482: CALL 30608 0 2
23486: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
23487: LD_ADDR_VAR 0 3
23491: PUSH
23492: DOUBLE
23493: LD_EXP 110
23497: PUSH
23498: LD_VAR 0 4
23502: ARRAY
23503: INC
23504: ST_TO_ADDR
23505: LD_INT 1
23507: PUSH
23508: FOR_DOWNTO
23509: IFFALSE 23681
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
23511: LD_ADDR_VAR 0 5
23515: PUSH
23516: LD_EXP 110
23520: PUSH
23521: LD_VAR 0 4
23525: ARRAY
23526: PUSH
23527: LD_VAR 0 3
23531: ARRAY
23532: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
23533: LD_VAR 0 5
23537: PUSH
23538: LD_INT 1
23540: ARRAY
23541: PPUSH
23542: CALL_OW 302
23546: NOT
23547: PUSH
23548: LD_VAR 0 5
23552: PUSH
23553: LD_INT 1
23555: ARRAY
23556: PPUSH
23557: CALL_OW 255
23561: PUSH
23562: LD_VAR 0 1
23566: PPUSH
23567: CALL_OW 255
23571: NONEQUAL
23572: OR
23573: IFFALSE 23679
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
23575: LD_VAR 0 5
23579: PUSH
23580: LD_INT 1
23582: ARRAY
23583: PPUSH
23584: CALL_OW 305
23588: PUSH
23589: LD_VAR 0 5
23593: PUSH
23594: LD_INT 1
23596: ARRAY
23597: PPUSH
23598: CALL_OW 255
23602: PUSH
23603: LD_VAR 0 1
23607: PPUSH
23608: CALL_OW 255
23612: EQUAL
23613: AND
23614: IFFALSE 23638
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
23616: LD_VAR 0 5
23620: PUSH
23621: LD_INT 1
23623: ARRAY
23624: PPUSH
23625: LD_VAR 0 5
23629: PUSH
23630: LD_INT 2
23632: ARRAY
23633: PPUSH
23634: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
23638: LD_ADDR_EXP 110
23642: PUSH
23643: LD_EXP 110
23647: PPUSH
23648: LD_VAR 0 4
23652: PPUSH
23653: LD_EXP 110
23657: PUSH
23658: LD_VAR 0 4
23662: ARRAY
23663: PPUSH
23664: LD_VAR 0 3
23668: PPUSH
23669: CALL_OW 3
23673: PPUSH
23674: CALL_OW 1
23678: ST_TO_ADDR
// end ; end ;
23679: GO 23508
23681: POP
23682: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
23683: LD_VAR 0 1
23687: PPUSH
23688: LD_EXP 110
23692: PUSH
23693: LD_VAR 0 4
23697: ARRAY
23698: PUSH
23699: LD_INT 0
23701: PLUS
23702: PPUSH
23703: CALL_OW 505
// end ;
23707: LD_VAR 0 2
23711: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
23712: LD_INT 0
23714: PPUSH
23715: PPUSH
23716: PPUSH
23717: PPUSH
// if not hack in hackTanks then
23718: LD_VAR 0 1
23722: PUSH
23723: LD_EXP 109
23727: IN
23728: NOT
23729: IFFALSE 23733
// exit ;
23731: GO 23818
// index := GetElementIndex ( hackTanks , hack ) ;
23733: LD_ADDR_VAR 0 5
23737: PUSH
23738: LD_EXP 109
23742: PPUSH
23743: LD_VAR 0 1
23747: PPUSH
23748: CALL 30608 0 2
23752: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
23753: LD_ADDR_VAR 0 4
23757: PUSH
23758: DOUBLE
23759: LD_INT 1
23761: DEC
23762: ST_TO_ADDR
23763: LD_EXP 110
23767: PUSH
23768: LD_VAR 0 5
23772: ARRAY
23773: PUSH
23774: FOR_TO
23775: IFFALSE 23816
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
23777: LD_EXP 110
23781: PUSH
23782: LD_VAR 0 5
23786: ARRAY
23787: PUSH
23788: LD_VAR 0 4
23792: ARRAY
23793: PUSH
23794: LD_INT 1
23796: ARRAY
23797: PUSH
23798: LD_VAR 0 2
23802: EQUAL
23803: IFFALSE 23814
// KillUnit ( vehicle ) ;
23805: LD_VAR 0 2
23809: PPUSH
23810: CALL_OW 66
23814: GO 23774
23816: POP
23817: POP
// end ;
23818: LD_VAR 0 3
23822: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
23823: LD_EXP 114
23827: NOT
23828: IFFALSE 23863
23830: GO 23832
23832: DISABLE
// begin initMiner := true ;
23833: LD_ADDR_EXP 114
23837: PUSH
23838: LD_INT 1
23840: ST_TO_ADDR
// minersList := [ ] ;
23841: LD_ADDR_EXP 115
23845: PUSH
23846: EMPTY
23847: ST_TO_ADDR
// minerMinesList := [ ] ;
23848: LD_ADDR_EXP 116
23852: PUSH
23853: EMPTY
23854: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
23855: LD_ADDR_EXP 117
23859: PUSH
23860: LD_INT 5
23862: ST_TO_ADDR
// end ;
23863: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
23864: LD_EXP 114
23868: PUSH
23869: LD_INT 34
23871: PUSH
23872: LD_EXP 36
23876: PUSH
23877: EMPTY
23878: LIST
23879: LIST
23880: PPUSH
23881: CALL_OW 69
23885: AND
23886: IFFALSE 24349
23888: GO 23890
23890: DISABLE
23891: LD_INT 0
23893: PPUSH
23894: PPUSH
23895: PPUSH
23896: PPUSH
// begin enable ;
23897: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
23898: LD_ADDR_VAR 0 1
23902: PUSH
23903: LD_INT 34
23905: PUSH
23906: LD_EXP 36
23910: PUSH
23911: EMPTY
23912: LIST
23913: LIST
23914: PPUSH
23915: CALL_OW 69
23919: PUSH
23920: FOR_IN
23921: IFFALSE 23993
// begin if not i in minersList then
23923: LD_VAR 0 1
23927: PUSH
23928: LD_EXP 115
23932: IN
23933: NOT
23934: IFFALSE 23991
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
23936: LD_ADDR_EXP 115
23940: PUSH
23941: LD_EXP 115
23945: PPUSH
23946: LD_EXP 115
23950: PUSH
23951: LD_INT 1
23953: PLUS
23954: PPUSH
23955: LD_VAR 0 1
23959: PPUSH
23960: CALL_OW 1
23964: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
23965: LD_ADDR_EXP 116
23969: PUSH
23970: LD_EXP 116
23974: PPUSH
23975: LD_EXP 116
23979: PUSH
23980: LD_INT 1
23982: PLUS
23983: PPUSH
23984: EMPTY
23985: PPUSH
23986: CALL_OW 1
23990: ST_TO_ADDR
// end end ;
23991: GO 23920
23993: POP
23994: POP
// for i := minerMinesList downto 1 do
23995: LD_ADDR_VAR 0 1
23999: PUSH
24000: DOUBLE
24001: LD_EXP 116
24005: INC
24006: ST_TO_ADDR
24007: LD_INT 1
24009: PUSH
24010: FOR_DOWNTO
24011: IFFALSE 24347
// begin if IsLive ( minersList [ i ] ) then
24013: LD_EXP 115
24017: PUSH
24018: LD_VAR 0 1
24022: ARRAY
24023: PPUSH
24024: CALL_OW 300
24028: IFFALSE 24056
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
24030: LD_EXP 115
24034: PUSH
24035: LD_VAR 0 1
24039: ARRAY
24040: PPUSH
24041: LD_EXP 116
24045: PUSH
24046: LD_VAR 0 1
24050: ARRAY
24051: PPUSH
24052: CALL_OW 505
// if not minerMinesList [ i ] then
24056: LD_EXP 116
24060: PUSH
24061: LD_VAR 0 1
24065: ARRAY
24066: NOT
24067: IFFALSE 24071
// continue ;
24069: GO 24010
// for j := minerMinesList [ i ] downto 1 do
24071: LD_ADDR_VAR 0 2
24075: PUSH
24076: DOUBLE
24077: LD_EXP 116
24081: PUSH
24082: LD_VAR 0 1
24086: ARRAY
24087: INC
24088: ST_TO_ADDR
24089: LD_INT 1
24091: PUSH
24092: FOR_DOWNTO
24093: IFFALSE 24343
// begin side := GetSide ( minersList [ i ] ) ;
24095: LD_ADDR_VAR 0 3
24099: PUSH
24100: LD_EXP 115
24104: PUSH
24105: LD_VAR 0 1
24109: ARRAY
24110: PPUSH
24111: CALL_OW 255
24115: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
24116: LD_ADDR_VAR 0 4
24120: PUSH
24121: LD_EXP 116
24125: PUSH
24126: LD_VAR 0 1
24130: ARRAY
24131: PUSH
24132: LD_VAR 0 2
24136: ARRAY
24137: PUSH
24138: LD_INT 1
24140: ARRAY
24141: PPUSH
24142: LD_EXP 116
24146: PUSH
24147: LD_VAR 0 1
24151: ARRAY
24152: PUSH
24153: LD_VAR 0 2
24157: ARRAY
24158: PUSH
24159: LD_INT 2
24161: ARRAY
24162: PPUSH
24163: CALL_OW 428
24167: ST_TO_ADDR
// if not tmp then
24168: LD_VAR 0 4
24172: NOT
24173: IFFALSE 24177
// continue ;
24175: GO 24092
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
24177: LD_VAR 0 4
24181: PUSH
24182: LD_INT 81
24184: PUSH
24185: LD_VAR 0 3
24189: PUSH
24190: EMPTY
24191: LIST
24192: LIST
24193: PPUSH
24194: CALL_OW 69
24198: IN
24199: PUSH
24200: LD_EXP 116
24204: PUSH
24205: LD_VAR 0 1
24209: ARRAY
24210: PUSH
24211: LD_VAR 0 2
24215: ARRAY
24216: PUSH
24217: LD_INT 1
24219: ARRAY
24220: PPUSH
24221: LD_EXP 116
24225: PUSH
24226: LD_VAR 0 1
24230: ARRAY
24231: PUSH
24232: LD_VAR 0 2
24236: ARRAY
24237: PUSH
24238: LD_INT 2
24240: ARRAY
24241: PPUSH
24242: CALL_OW 458
24246: AND
24247: IFFALSE 24341
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
24249: LD_EXP 116
24253: PUSH
24254: LD_VAR 0 1
24258: ARRAY
24259: PUSH
24260: LD_VAR 0 2
24264: ARRAY
24265: PUSH
24266: LD_INT 1
24268: ARRAY
24269: PPUSH
24270: LD_EXP 116
24274: PUSH
24275: LD_VAR 0 1
24279: ARRAY
24280: PUSH
24281: LD_VAR 0 2
24285: ARRAY
24286: PUSH
24287: LD_INT 2
24289: ARRAY
24290: PPUSH
24291: LD_VAR 0 3
24295: PPUSH
24296: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
24300: LD_ADDR_EXP 116
24304: PUSH
24305: LD_EXP 116
24309: PPUSH
24310: LD_VAR 0 1
24314: PPUSH
24315: LD_EXP 116
24319: PUSH
24320: LD_VAR 0 1
24324: ARRAY
24325: PPUSH
24326: LD_VAR 0 2
24330: PPUSH
24331: CALL_OW 3
24335: PPUSH
24336: CALL_OW 1
24340: ST_TO_ADDR
// end ; end ;
24341: GO 24092
24343: POP
24344: POP
// end ;
24345: GO 24010
24347: POP
24348: POP
// end ;
24349: PPOPN 4
24351: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
24352: LD_INT 0
24354: PPUSH
24355: PPUSH
// result := false ;
24356: LD_ADDR_VAR 0 4
24360: PUSH
24361: LD_INT 0
24363: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
24364: LD_VAR 0 1
24368: PPUSH
24369: CALL_OW 264
24373: PUSH
24374: LD_EXP 36
24378: EQUAL
24379: NOT
24380: IFFALSE 24384
// exit ;
24382: GO 24624
// index := GetElementIndex ( minersList , unit ) ;
24384: LD_ADDR_VAR 0 5
24388: PUSH
24389: LD_EXP 115
24393: PPUSH
24394: LD_VAR 0 1
24398: PPUSH
24399: CALL 30608 0 2
24403: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
24404: LD_EXP 116
24408: PUSH
24409: LD_VAR 0 5
24413: ARRAY
24414: PUSH
24415: LD_EXP 117
24419: GREATEREQUAL
24420: IFFALSE 24424
// exit ;
24422: GO 24624
// ComMoveXY ( unit , x , y ) ;
24424: LD_VAR 0 1
24428: PPUSH
24429: LD_VAR 0 2
24433: PPUSH
24434: LD_VAR 0 3
24438: PPUSH
24439: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
24443: LD_INT 35
24445: PPUSH
24446: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
24450: LD_VAR 0 1
24454: PPUSH
24455: LD_VAR 0 2
24459: PPUSH
24460: LD_VAR 0 3
24464: PPUSH
24465: CALL 61380 0 3
24469: NOT
24470: PUSH
24471: LD_VAR 0 1
24475: PPUSH
24476: CALL_OW 314
24480: AND
24481: IFFALSE 24485
// exit ;
24483: GO 24624
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
24485: LD_VAR 0 2
24489: PPUSH
24490: LD_VAR 0 3
24494: PPUSH
24495: CALL_OW 428
24499: PUSH
24500: LD_VAR 0 1
24504: EQUAL
24505: PUSH
24506: LD_VAR 0 1
24510: PPUSH
24511: CALL_OW 314
24515: NOT
24516: AND
24517: IFFALSE 24443
// PlaySoundXY ( x , y , PlantMine ) ;
24519: LD_VAR 0 2
24523: PPUSH
24524: LD_VAR 0 3
24528: PPUSH
24529: LD_STRING PlantMine
24531: PPUSH
24532: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
24536: LD_VAR 0 2
24540: PPUSH
24541: LD_VAR 0 3
24545: PPUSH
24546: LD_VAR 0 1
24550: PPUSH
24551: CALL_OW 255
24555: PPUSH
24556: LD_INT 0
24558: PPUSH
24559: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
24563: LD_ADDR_EXP 116
24567: PUSH
24568: LD_EXP 116
24572: PPUSH
24573: LD_VAR 0 5
24577: PUSH
24578: LD_EXP 116
24582: PUSH
24583: LD_VAR 0 5
24587: ARRAY
24588: PUSH
24589: LD_INT 1
24591: PLUS
24592: PUSH
24593: EMPTY
24594: LIST
24595: LIST
24596: PPUSH
24597: LD_VAR 0 2
24601: PUSH
24602: LD_VAR 0 3
24606: PUSH
24607: EMPTY
24608: LIST
24609: LIST
24610: PPUSH
24611: CALL 30823 0 3
24615: ST_TO_ADDR
// result := true ;
24616: LD_ADDR_VAR 0 4
24620: PUSH
24621: LD_INT 1
24623: ST_TO_ADDR
// end ;
24624: LD_VAR 0 4
24628: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
24629: LD_INT 0
24631: PPUSH
24632: PPUSH
24633: PPUSH
// if not unit in minersList then
24634: LD_VAR 0 1
24638: PUSH
24639: LD_EXP 115
24643: IN
24644: NOT
24645: IFFALSE 24649
// exit ;
24647: GO 25041
// index := GetElementIndex ( minersList , unit ) ;
24649: LD_ADDR_VAR 0 6
24653: PUSH
24654: LD_EXP 115
24658: PPUSH
24659: LD_VAR 0 1
24663: PPUSH
24664: CALL 30608 0 2
24668: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
24669: LD_ADDR_VAR 0 5
24673: PUSH
24674: DOUBLE
24675: LD_EXP 116
24679: PUSH
24680: LD_VAR 0 6
24684: ARRAY
24685: INC
24686: ST_TO_ADDR
24687: LD_INT 1
24689: PUSH
24690: FOR_DOWNTO
24691: IFFALSE 24852
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
24693: LD_EXP 116
24697: PUSH
24698: LD_VAR 0 6
24702: ARRAY
24703: PUSH
24704: LD_VAR 0 5
24708: ARRAY
24709: PUSH
24710: LD_INT 1
24712: ARRAY
24713: PUSH
24714: LD_VAR 0 2
24718: EQUAL
24719: PUSH
24720: LD_EXP 116
24724: PUSH
24725: LD_VAR 0 6
24729: ARRAY
24730: PUSH
24731: LD_VAR 0 5
24735: ARRAY
24736: PUSH
24737: LD_INT 2
24739: ARRAY
24740: PUSH
24741: LD_VAR 0 3
24745: EQUAL
24746: AND
24747: IFFALSE 24850
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
24749: LD_EXP 116
24753: PUSH
24754: LD_VAR 0 6
24758: ARRAY
24759: PUSH
24760: LD_VAR 0 5
24764: ARRAY
24765: PUSH
24766: LD_INT 1
24768: ARRAY
24769: PPUSH
24770: LD_EXP 116
24774: PUSH
24775: LD_VAR 0 6
24779: ARRAY
24780: PUSH
24781: LD_VAR 0 5
24785: ARRAY
24786: PUSH
24787: LD_INT 2
24789: ARRAY
24790: PPUSH
24791: LD_VAR 0 1
24795: PPUSH
24796: CALL_OW 255
24800: PPUSH
24801: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
24805: LD_ADDR_EXP 116
24809: PUSH
24810: LD_EXP 116
24814: PPUSH
24815: LD_VAR 0 6
24819: PPUSH
24820: LD_EXP 116
24824: PUSH
24825: LD_VAR 0 6
24829: ARRAY
24830: PPUSH
24831: LD_VAR 0 5
24835: PPUSH
24836: CALL_OW 3
24840: PPUSH
24841: CALL_OW 1
24845: ST_TO_ADDR
// exit ;
24846: POP
24847: POP
24848: GO 25041
// end ; end ;
24850: GO 24690
24852: POP
24853: POP
// for i := minerMinesList [ index ] downto 1 do
24854: LD_ADDR_VAR 0 5
24858: PUSH
24859: DOUBLE
24860: LD_EXP 116
24864: PUSH
24865: LD_VAR 0 6
24869: ARRAY
24870: INC
24871: ST_TO_ADDR
24872: LD_INT 1
24874: PUSH
24875: FOR_DOWNTO
24876: IFFALSE 25039
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
24878: LD_EXP 116
24882: PUSH
24883: LD_VAR 0 6
24887: ARRAY
24888: PUSH
24889: LD_VAR 0 5
24893: ARRAY
24894: PUSH
24895: LD_INT 1
24897: ARRAY
24898: PPUSH
24899: LD_EXP 116
24903: PUSH
24904: LD_VAR 0 6
24908: ARRAY
24909: PUSH
24910: LD_VAR 0 5
24914: ARRAY
24915: PUSH
24916: LD_INT 2
24918: ARRAY
24919: PPUSH
24920: LD_VAR 0 2
24924: PPUSH
24925: LD_VAR 0 3
24929: PPUSH
24930: CALL_OW 298
24934: PUSH
24935: LD_INT 6
24937: LESS
24938: IFFALSE 25037
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
24940: LD_EXP 116
24944: PUSH
24945: LD_VAR 0 6
24949: ARRAY
24950: PUSH
24951: LD_VAR 0 5
24955: ARRAY
24956: PUSH
24957: LD_INT 1
24959: ARRAY
24960: PPUSH
24961: LD_EXP 116
24965: PUSH
24966: LD_VAR 0 6
24970: ARRAY
24971: PUSH
24972: LD_VAR 0 5
24976: ARRAY
24977: PUSH
24978: LD_INT 2
24980: ARRAY
24981: PPUSH
24982: LD_VAR 0 1
24986: PPUSH
24987: CALL_OW 255
24991: PPUSH
24992: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
24996: LD_ADDR_EXP 116
25000: PUSH
25001: LD_EXP 116
25005: PPUSH
25006: LD_VAR 0 6
25010: PPUSH
25011: LD_EXP 116
25015: PUSH
25016: LD_VAR 0 6
25020: ARRAY
25021: PPUSH
25022: LD_VAR 0 5
25026: PPUSH
25027: CALL_OW 3
25031: PPUSH
25032: CALL_OW 1
25036: ST_TO_ADDR
// end ; end ;
25037: GO 24875
25039: POP
25040: POP
// end ;
25041: LD_VAR 0 4
25045: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
25046: LD_INT 0
25048: PPUSH
25049: PPUSH
25050: PPUSH
25051: PPUSH
25052: PPUSH
25053: PPUSH
25054: PPUSH
25055: PPUSH
25056: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
25057: LD_VAR 0 1
25061: PPUSH
25062: CALL_OW 264
25066: PUSH
25067: LD_EXP 36
25071: EQUAL
25072: NOT
25073: PUSH
25074: LD_VAR 0 1
25078: PUSH
25079: LD_EXP 115
25083: IN
25084: NOT
25085: OR
25086: IFFALSE 25090
// exit ;
25088: GO 25412
// index := GetElementIndex ( minersList , unit ) ;
25090: LD_ADDR_VAR 0 6
25094: PUSH
25095: LD_EXP 115
25099: PPUSH
25100: LD_VAR 0 1
25104: PPUSH
25105: CALL 30608 0 2
25109: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
25110: LD_ADDR_VAR 0 8
25114: PUSH
25115: LD_EXP 117
25119: PUSH
25120: LD_EXP 116
25124: PUSH
25125: LD_VAR 0 6
25129: ARRAY
25130: MINUS
25131: ST_TO_ADDR
// if not minesFreeAmount then
25132: LD_VAR 0 8
25136: NOT
25137: IFFALSE 25141
// exit ;
25139: GO 25412
// tmp := [ ] ;
25141: LD_ADDR_VAR 0 7
25145: PUSH
25146: EMPTY
25147: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
25148: LD_ADDR_VAR 0 5
25152: PUSH
25153: DOUBLE
25154: LD_INT 1
25156: DEC
25157: ST_TO_ADDR
25158: LD_VAR 0 8
25162: PUSH
25163: FOR_TO
25164: IFFALSE 25359
// begin _d := rand ( 0 , 5 ) ;
25166: LD_ADDR_VAR 0 11
25170: PUSH
25171: LD_INT 0
25173: PPUSH
25174: LD_INT 5
25176: PPUSH
25177: CALL_OW 12
25181: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
25182: LD_ADDR_VAR 0 12
25186: PUSH
25187: LD_INT 2
25189: PPUSH
25190: LD_INT 6
25192: PPUSH
25193: CALL_OW 12
25197: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
25198: LD_ADDR_VAR 0 9
25202: PUSH
25203: LD_VAR 0 2
25207: PPUSH
25208: LD_VAR 0 11
25212: PPUSH
25213: LD_VAR 0 12
25217: PPUSH
25218: CALL_OW 272
25222: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
25223: LD_ADDR_VAR 0 10
25227: PUSH
25228: LD_VAR 0 3
25232: PPUSH
25233: LD_VAR 0 11
25237: PPUSH
25238: LD_VAR 0 12
25242: PPUSH
25243: CALL_OW 273
25247: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
25248: LD_VAR 0 9
25252: PPUSH
25253: LD_VAR 0 10
25257: PPUSH
25258: CALL_OW 488
25262: PUSH
25263: LD_VAR 0 9
25267: PUSH
25268: LD_VAR 0 10
25272: PUSH
25273: EMPTY
25274: LIST
25275: LIST
25276: PUSH
25277: LD_VAR 0 7
25281: IN
25282: NOT
25283: AND
25284: PUSH
25285: LD_VAR 0 9
25289: PPUSH
25290: LD_VAR 0 10
25294: PPUSH
25295: CALL_OW 458
25299: NOT
25300: AND
25301: IFFALSE 25343
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
25303: LD_ADDR_VAR 0 7
25307: PUSH
25308: LD_VAR 0 7
25312: PPUSH
25313: LD_VAR 0 7
25317: PUSH
25318: LD_INT 1
25320: PLUS
25321: PPUSH
25322: LD_VAR 0 9
25326: PUSH
25327: LD_VAR 0 10
25331: PUSH
25332: EMPTY
25333: LIST
25334: LIST
25335: PPUSH
25336: CALL_OW 1
25340: ST_TO_ADDR
25341: GO 25357
// i := i - 1 ;
25343: LD_ADDR_VAR 0 5
25347: PUSH
25348: LD_VAR 0 5
25352: PUSH
25353: LD_INT 1
25355: MINUS
25356: ST_TO_ADDR
// end ;
25357: GO 25163
25359: POP
25360: POP
// for i in tmp do
25361: LD_ADDR_VAR 0 5
25365: PUSH
25366: LD_VAR 0 7
25370: PUSH
25371: FOR_IN
25372: IFFALSE 25410
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
25374: LD_VAR 0 1
25378: PPUSH
25379: LD_VAR 0 5
25383: PUSH
25384: LD_INT 1
25386: ARRAY
25387: PPUSH
25388: LD_VAR 0 5
25392: PUSH
25393: LD_INT 2
25395: ARRAY
25396: PPUSH
25397: CALL 24352 0 3
25401: NOT
25402: IFFALSE 25408
// exit ;
25404: POP
25405: POP
25406: GO 25412
25408: GO 25371
25410: POP
25411: POP
// end ;
25412: LD_VAR 0 4
25416: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
25417: LD_INT 0
25419: PPUSH
25420: PPUSH
25421: PPUSH
25422: PPUSH
25423: PPUSH
25424: PPUSH
25425: PPUSH
// if not GetClass ( unit ) = class_sniper then
25426: LD_VAR 0 1
25430: PPUSH
25431: CALL_OW 257
25435: PUSH
25436: LD_INT 5
25438: EQUAL
25439: NOT
25440: IFFALSE 25444
// exit ;
25442: GO 25832
// dist := 8 ;
25444: LD_ADDR_VAR 0 5
25448: PUSH
25449: LD_INT 8
25451: ST_TO_ADDR
// viewRange := 12 ;
25452: LD_ADDR_VAR 0 7
25456: PUSH
25457: LD_INT 12
25459: ST_TO_ADDR
// side := GetSide ( unit ) ;
25460: LD_ADDR_VAR 0 6
25464: PUSH
25465: LD_VAR 0 1
25469: PPUSH
25470: CALL_OW 255
25474: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
25475: LD_INT 61
25477: PPUSH
25478: LD_VAR 0 6
25482: PPUSH
25483: CALL_OW 321
25487: PUSH
25488: LD_INT 2
25490: EQUAL
25491: IFFALSE 25501
// viewRange := 16 ;
25493: LD_ADDR_VAR 0 7
25497: PUSH
25498: LD_INT 16
25500: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
25501: LD_VAR 0 1
25505: PPUSH
25506: LD_VAR 0 2
25510: PPUSH
25511: LD_VAR 0 3
25515: PPUSH
25516: CALL_OW 297
25520: PUSH
25521: LD_VAR 0 5
25525: GREATER
25526: IFFALSE 25605
// begin ComMoveXY ( unit , x , y ) ;
25528: LD_VAR 0 1
25532: PPUSH
25533: LD_VAR 0 2
25537: PPUSH
25538: LD_VAR 0 3
25542: PPUSH
25543: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
25547: LD_INT 35
25549: PPUSH
25550: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
25554: LD_VAR 0 1
25558: PPUSH
25559: LD_VAR 0 2
25563: PPUSH
25564: LD_VAR 0 3
25568: PPUSH
25569: CALL 61380 0 3
25573: NOT
25574: IFFALSE 25578
// exit ;
25576: GO 25832
// until GetDistUnitXY ( unit , x , y ) < dist ;
25578: LD_VAR 0 1
25582: PPUSH
25583: LD_VAR 0 2
25587: PPUSH
25588: LD_VAR 0 3
25592: PPUSH
25593: CALL_OW 297
25597: PUSH
25598: LD_VAR 0 5
25602: LESS
25603: IFFALSE 25547
// end ; ComTurnXY ( unit , x , y ) ;
25605: LD_VAR 0 1
25609: PPUSH
25610: LD_VAR 0 2
25614: PPUSH
25615: LD_VAR 0 3
25619: PPUSH
25620: CALL_OW 118
// wait ( 5 ) ;
25624: LD_INT 5
25626: PPUSH
25627: CALL_OW 67
// _d := GetDir ( unit ) ;
25631: LD_ADDR_VAR 0 10
25635: PUSH
25636: LD_VAR 0 1
25640: PPUSH
25641: CALL_OW 254
25645: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
25646: LD_ADDR_VAR 0 8
25650: PUSH
25651: LD_VAR 0 1
25655: PPUSH
25656: CALL_OW 250
25660: PPUSH
25661: LD_VAR 0 10
25665: PPUSH
25666: LD_VAR 0 5
25670: PPUSH
25671: CALL_OW 272
25675: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
25676: LD_ADDR_VAR 0 9
25680: PUSH
25681: LD_VAR 0 1
25685: PPUSH
25686: CALL_OW 251
25690: PPUSH
25691: LD_VAR 0 10
25695: PPUSH
25696: LD_VAR 0 5
25700: PPUSH
25701: CALL_OW 273
25705: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
25706: LD_VAR 0 8
25710: PPUSH
25711: LD_VAR 0 9
25715: PPUSH
25716: CALL_OW 488
25720: NOT
25721: IFFALSE 25725
// exit ;
25723: GO 25832
// ComAnimCustom ( unit , 1 ) ;
25725: LD_VAR 0 1
25729: PPUSH
25730: LD_INT 1
25732: PPUSH
25733: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
25737: LD_VAR 0 8
25741: PPUSH
25742: LD_VAR 0 9
25746: PPUSH
25747: LD_VAR 0 6
25751: PPUSH
25752: LD_VAR 0 7
25756: PPUSH
25757: CALL_OW 330
// repeat wait ( 1 ) ;
25761: LD_INT 1
25763: PPUSH
25764: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
25768: LD_VAR 0 1
25772: PPUSH
25773: CALL_OW 316
25777: PUSH
25778: LD_VAR 0 1
25782: PPUSH
25783: CALL_OW 314
25787: OR
25788: PUSH
25789: LD_VAR 0 1
25793: PPUSH
25794: CALL_OW 302
25798: NOT
25799: OR
25800: PUSH
25801: LD_VAR 0 1
25805: PPUSH
25806: CALL_OW 301
25810: OR
25811: IFFALSE 25761
// RemoveSeeing ( _x , _y , side ) ;
25813: LD_VAR 0 8
25817: PPUSH
25818: LD_VAR 0 9
25822: PPUSH
25823: LD_VAR 0 6
25827: PPUSH
25828: CALL_OW 331
// end ; end_of_file
25832: LD_VAR 0 4
25836: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
25837: LD_INT 0
25839: PPUSH
25840: PPUSH
// if exist_mode then
25841: LD_VAR 0 2
25845: IFFALSE 25870
// unit := CreateCharacter ( prefix & ident ) else
25847: LD_ADDR_VAR 0 5
25851: PUSH
25852: LD_VAR 0 3
25856: PUSH
25857: LD_VAR 0 1
25861: STR
25862: PPUSH
25863: CALL_OW 34
25867: ST_TO_ADDR
25868: GO 25885
// unit := NewCharacter ( ident ) ;
25870: LD_ADDR_VAR 0 5
25874: PUSH
25875: LD_VAR 0 1
25879: PPUSH
25880: CALL_OW 25
25884: ST_TO_ADDR
// result := unit ;
25885: LD_ADDR_VAR 0 4
25889: PUSH
25890: LD_VAR 0 5
25894: ST_TO_ADDR
// end ;
25895: LD_VAR 0 4
25899: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
25900: LD_INT 0
25902: PPUSH
25903: PPUSH
// if not side or not nation then
25904: LD_VAR 0 1
25908: NOT
25909: PUSH
25910: LD_VAR 0 2
25914: NOT
25915: OR
25916: IFFALSE 25920
// exit ;
25918: GO 26688
// case nation of nation_american :
25920: LD_VAR 0 2
25924: PUSH
25925: LD_INT 1
25927: DOUBLE
25928: EQUAL
25929: IFTRUE 25933
25931: GO 26147
25933: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
25934: LD_ADDR_VAR 0 4
25938: PUSH
25939: LD_INT 35
25941: PUSH
25942: LD_INT 45
25944: PUSH
25945: LD_INT 46
25947: PUSH
25948: LD_INT 47
25950: PUSH
25951: LD_INT 82
25953: PUSH
25954: LD_INT 83
25956: PUSH
25957: LD_INT 84
25959: PUSH
25960: LD_INT 85
25962: PUSH
25963: LD_INT 86
25965: PUSH
25966: LD_INT 1
25968: PUSH
25969: LD_INT 2
25971: PUSH
25972: LD_INT 6
25974: PUSH
25975: LD_INT 15
25977: PUSH
25978: LD_INT 16
25980: PUSH
25981: LD_INT 7
25983: PUSH
25984: LD_INT 12
25986: PUSH
25987: LD_INT 13
25989: PUSH
25990: LD_INT 10
25992: PUSH
25993: LD_INT 14
25995: PUSH
25996: LD_INT 20
25998: PUSH
25999: LD_INT 21
26001: PUSH
26002: LD_INT 22
26004: PUSH
26005: LD_INT 25
26007: PUSH
26008: LD_INT 32
26010: PUSH
26011: LD_INT 27
26013: PUSH
26014: LD_INT 36
26016: PUSH
26017: LD_INT 69
26019: PUSH
26020: LD_INT 39
26022: PUSH
26023: LD_INT 34
26025: PUSH
26026: LD_INT 40
26028: PUSH
26029: LD_INT 48
26031: PUSH
26032: LD_INT 49
26034: PUSH
26035: LD_INT 50
26037: PUSH
26038: LD_INT 51
26040: PUSH
26041: LD_INT 52
26043: PUSH
26044: LD_INT 53
26046: PUSH
26047: LD_INT 54
26049: PUSH
26050: LD_INT 55
26052: PUSH
26053: LD_INT 56
26055: PUSH
26056: LD_INT 57
26058: PUSH
26059: LD_INT 58
26061: PUSH
26062: LD_INT 59
26064: PUSH
26065: LD_INT 60
26067: PUSH
26068: LD_INT 61
26070: PUSH
26071: LD_INT 62
26073: PUSH
26074: LD_INT 80
26076: PUSH
26077: LD_INT 82
26079: PUSH
26080: LD_INT 83
26082: PUSH
26083: LD_INT 84
26085: PUSH
26086: LD_INT 85
26088: PUSH
26089: LD_INT 86
26091: PUSH
26092: EMPTY
26093: LIST
26094: LIST
26095: LIST
26096: LIST
26097: LIST
26098: LIST
26099: LIST
26100: LIST
26101: LIST
26102: LIST
26103: LIST
26104: LIST
26105: LIST
26106: LIST
26107: LIST
26108: LIST
26109: LIST
26110: LIST
26111: LIST
26112: LIST
26113: LIST
26114: LIST
26115: LIST
26116: LIST
26117: LIST
26118: LIST
26119: LIST
26120: LIST
26121: LIST
26122: LIST
26123: LIST
26124: LIST
26125: LIST
26126: LIST
26127: LIST
26128: LIST
26129: LIST
26130: LIST
26131: LIST
26132: LIST
26133: LIST
26134: LIST
26135: LIST
26136: LIST
26137: LIST
26138: LIST
26139: LIST
26140: LIST
26141: LIST
26142: LIST
26143: LIST
26144: ST_TO_ADDR
26145: GO 26612
26147: LD_INT 2
26149: DOUBLE
26150: EQUAL
26151: IFTRUE 26155
26153: GO 26381
26155: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
26156: LD_ADDR_VAR 0 4
26160: PUSH
26161: LD_INT 35
26163: PUSH
26164: LD_INT 45
26166: PUSH
26167: LD_INT 46
26169: PUSH
26170: LD_INT 47
26172: PUSH
26173: LD_INT 82
26175: PUSH
26176: LD_INT 83
26178: PUSH
26179: LD_INT 84
26181: PUSH
26182: LD_INT 85
26184: PUSH
26185: LD_INT 87
26187: PUSH
26188: LD_INT 70
26190: PUSH
26191: LD_INT 1
26193: PUSH
26194: LD_INT 11
26196: PUSH
26197: LD_INT 3
26199: PUSH
26200: LD_INT 4
26202: PUSH
26203: LD_INT 5
26205: PUSH
26206: LD_INT 6
26208: PUSH
26209: LD_INT 15
26211: PUSH
26212: LD_INT 18
26214: PUSH
26215: LD_INT 7
26217: PUSH
26218: LD_INT 17
26220: PUSH
26221: LD_INT 8
26223: PUSH
26224: LD_INT 20
26226: PUSH
26227: LD_INT 21
26229: PUSH
26230: LD_INT 22
26232: PUSH
26233: LD_INT 72
26235: PUSH
26236: LD_INT 26
26238: PUSH
26239: LD_INT 69
26241: PUSH
26242: LD_INT 39
26244: PUSH
26245: LD_INT 40
26247: PUSH
26248: LD_INT 41
26250: PUSH
26251: LD_INT 42
26253: PUSH
26254: LD_INT 43
26256: PUSH
26257: LD_INT 48
26259: PUSH
26260: LD_INT 49
26262: PUSH
26263: LD_INT 50
26265: PUSH
26266: LD_INT 51
26268: PUSH
26269: LD_INT 52
26271: PUSH
26272: LD_INT 53
26274: PUSH
26275: LD_INT 54
26277: PUSH
26278: LD_INT 55
26280: PUSH
26281: LD_INT 56
26283: PUSH
26284: LD_INT 60
26286: PUSH
26287: LD_INT 61
26289: PUSH
26290: LD_INT 62
26292: PUSH
26293: LD_INT 66
26295: PUSH
26296: LD_INT 67
26298: PUSH
26299: LD_INT 68
26301: PUSH
26302: LD_INT 81
26304: PUSH
26305: LD_INT 82
26307: PUSH
26308: LD_INT 83
26310: PUSH
26311: LD_INT 84
26313: PUSH
26314: LD_INT 85
26316: PUSH
26317: LD_INT 87
26319: PUSH
26320: LD_INT 88
26322: PUSH
26323: EMPTY
26324: LIST
26325: LIST
26326: LIST
26327: LIST
26328: LIST
26329: LIST
26330: LIST
26331: LIST
26332: LIST
26333: LIST
26334: LIST
26335: LIST
26336: LIST
26337: LIST
26338: LIST
26339: LIST
26340: LIST
26341: LIST
26342: LIST
26343: LIST
26344: LIST
26345: LIST
26346: LIST
26347: LIST
26348: LIST
26349: LIST
26350: LIST
26351: LIST
26352: LIST
26353: LIST
26354: LIST
26355: LIST
26356: LIST
26357: LIST
26358: LIST
26359: LIST
26360: LIST
26361: LIST
26362: LIST
26363: LIST
26364: LIST
26365: LIST
26366: LIST
26367: LIST
26368: LIST
26369: LIST
26370: LIST
26371: LIST
26372: LIST
26373: LIST
26374: LIST
26375: LIST
26376: LIST
26377: LIST
26378: ST_TO_ADDR
26379: GO 26612
26381: LD_INT 3
26383: DOUBLE
26384: EQUAL
26385: IFTRUE 26389
26387: GO 26611
26389: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
26390: LD_ADDR_VAR 0 4
26394: PUSH
26395: LD_INT 46
26397: PUSH
26398: LD_INT 47
26400: PUSH
26401: LD_INT 1
26403: PUSH
26404: LD_INT 2
26406: PUSH
26407: LD_INT 82
26409: PUSH
26410: LD_INT 83
26412: PUSH
26413: LD_INT 84
26415: PUSH
26416: LD_INT 85
26418: PUSH
26419: LD_INT 86
26421: PUSH
26422: LD_INT 11
26424: PUSH
26425: LD_INT 9
26427: PUSH
26428: LD_INT 20
26430: PUSH
26431: LD_INT 19
26433: PUSH
26434: LD_INT 21
26436: PUSH
26437: LD_INT 24
26439: PUSH
26440: LD_INT 22
26442: PUSH
26443: LD_INT 25
26445: PUSH
26446: LD_INT 28
26448: PUSH
26449: LD_INT 29
26451: PUSH
26452: LD_INT 30
26454: PUSH
26455: LD_INT 31
26457: PUSH
26458: LD_INT 37
26460: PUSH
26461: LD_INT 38
26463: PUSH
26464: LD_INT 32
26466: PUSH
26467: LD_INT 27
26469: PUSH
26470: LD_INT 33
26472: PUSH
26473: LD_INT 69
26475: PUSH
26476: LD_INT 39
26478: PUSH
26479: LD_INT 34
26481: PUSH
26482: LD_INT 40
26484: PUSH
26485: LD_INT 71
26487: PUSH
26488: LD_INT 23
26490: PUSH
26491: LD_INT 44
26493: PUSH
26494: LD_INT 48
26496: PUSH
26497: LD_INT 49
26499: PUSH
26500: LD_INT 50
26502: PUSH
26503: LD_INT 51
26505: PUSH
26506: LD_INT 52
26508: PUSH
26509: LD_INT 53
26511: PUSH
26512: LD_INT 54
26514: PUSH
26515: LD_INT 55
26517: PUSH
26518: LD_INT 56
26520: PUSH
26521: LD_INT 57
26523: PUSH
26524: LD_INT 58
26526: PUSH
26527: LD_INT 59
26529: PUSH
26530: LD_INT 63
26532: PUSH
26533: LD_INT 64
26535: PUSH
26536: LD_INT 65
26538: PUSH
26539: LD_INT 82
26541: PUSH
26542: LD_INT 83
26544: PUSH
26545: LD_INT 84
26547: PUSH
26548: LD_INT 85
26550: PUSH
26551: LD_INT 86
26553: PUSH
26554: EMPTY
26555: LIST
26556: LIST
26557: LIST
26558: LIST
26559: LIST
26560: LIST
26561: LIST
26562: LIST
26563: LIST
26564: LIST
26565: LIST
26566: LIST
26567: LIST
26568: LIST
26569: LIST
26570: LIST
26571: LIST
26572: LIST
26573: LIST
26574: LIST
26575: LIST
26576: LIST
26577: LIST
26578: LIST
26579: LIST
26580: LIST
26581: LIST
26582: LIST
26583: LIST
26584: LIST
26585: LIST
26586: LIST
26587: LIST
26588: LIST
26589: LIST
26590: LIST
26591: LIST
26592: LIST
26593: LIST
26594: LIST
26595: LIST
26596: LIST
26597: LIST
26598: LIST
26599: LIST
26600: LIST
26601: LIST
26602: LIST
26603: LIST
26604: LIST
26605: LIST
26606: LIST
26607: LIST
26608: ST_TO_ADDR
26609: GO 26612
26611: POP
// if state > - 1 and state < 3 then
26612: LD_VAR 0 3
26616: PUSH
26617: LD_INT 1
26619: NEG
26620: GREATER
26621: PUSH
26622: LD_VAR 0 3
26626: PUSH
26627: LD_INT 3
26629: LESS
26630: AND
26631: IFFALSE 26688
// for i in result do
26633: LD_ADDR_VAR 0 5
26637: PUSH
26638: LD_VAR 0 4
26642: PUSH
26643: FOR_IN
26644: IFFALSE 26686
// if GetTech ( i , side ) <> state then
26646: LD_VAR 0 5
26650: PPUSH
26651: LD_VAR 0 1
26655: PPUSH
26656: CALL_OW 321
26660: PUSH
26661: LD_VAR 0 3
26665: NONEQUAL
26666: IFFALSE 26684
// result := result diff i ;
26668: LD_ADDR_VAR 0 4
26672: PUSH
26673: LD_VAR 0 4
26677: PUSH
26678: LD_VAR 0 5
26682: DIFF
26683: ST_TO_ADDR
26684: GO 26643
26686: POP
26687: POP
// end ;
26688: LD_VAR 0 4
26692: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
26693: LD_INT 0
26695: PPUSH
26696: PPUSH
26697: PPUSH
// result := true ;
26698: LD_ADDR_VAR 0 3
26702: PUSH
26703: LD_INT 1
26705: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
26706: LD_ADDR_VAR 0 5
26710: PUSH
26711: LD_VAR 0 2
26715: PPUSH
26716: CALL_OW 480
26720: ST_TO_ADDR
// if not tmp then
26721: LD_VAR 0 5
26725: NOT
26726: IFFALSE 26730
// exit ;
26728: GO 26779
// for i in tmp do
26730: LD_ADDR_VAR 0 4
26734: PUSH
26735: LD_VAR 0 5
26739: PUSH
26740: FOR_IN
26741: IFFALSE 26777
// if GetTech ( i , side ) <> state_researched then
26743: LD_VAR 0 4
26747: PPUSH
26748: LD_VAR 0 1
26752: PPUSH
26753: CALL_OW 321
26757: PUSH
26758: LD_INT 2
26760: NONEQUAL
26761: IFFALSE 26775
// begin result := false ;
26763: LD_ADDR_VAR 0 3
26767: PUSH
26768: LD_INT 0
26770: ST_TO_ADDR
// exit ;
26771: POP
26772: POP
26773: GO 26779
// end ;
26775: GO 26740
26777: POP
26778: POP
// end ;
26779: LD_VAR 0 3
26783: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
26784: LD_INT 0
26786: PPUSH
26787: PPUSH
26788: PPUSH
26789: PPUSH
26790: PPUSH
26791: PPUSH
26792: PPUSH
26793: PPUSH
26794: PPUSH
26795: PPUSH
26796: PPUSH
26797: PPUSH
26798: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
26799: LD_VAR 0 1
26803: NOT
26804: PUSH
26805: LD_VAR 0 1
26809: PPUSH
26810: CALL_OW 257
26814: PUSH
26815: LD_INT 9
26817: NONEQUAL
26818: OR
26819: IFFALSE 26823
// exit ;
26821: GO 27396
// side := GetSide ( unit ) ;
26823: LD_ADDR_VAR 0 9
26827: PUSH
26828: LD_VAR 0 1
26832: PPUSH
26833: CALL_OW 255
26837: ST_TO_ADDR
// tech_space := tech_spacanom ;
26838: LD_ADDR_VAR 0 12
26842: PUSH
26843: LD_INT 29
26845: ST_TO_ADDR
// tech_time := tech_taurad ;
26846: LD_ADDR_VAR 0 13
26850: PUSH
26851: LD_INT 28
26853: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
26854: LD_ADDR_VAR 0 11
26858: PUSH
26859: LD_VAR 0 1
26863: PPUSH
26864: CALL_OW 310
26868: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
26869: LD_VAR 0 11
26873: PPUSH
26874: CALL_OW 247
26878: PUSH
26879: LD_INT 2
26881: EQUAL
26882: IFFALSE 26886
// exit ;
26884: GO 27396
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
26886: LD_ADDR_VAR 0 8
26890: PUSH
26891: LD_INT 81
26893: PUSH
26894: LD_VAR 0 9
26898: PUSH
26899: EMPTY
26900: LIST
26901: LIST
26902: PUSH
26903: LD_INT 3
26905: PUSH
26906: LD_INT 21
26908: PUSH
26909: LD_INT 3
26911: PUSH
26912: EMPTY
26913: LIST
26914: LIST
26915: PUSH
26916: EMPTY
26917: LIST
26918: LIST
26919: PUSH
26920: EMPTY
26921: LIST
26922: LIST
26923: PPUSH
26924: CALL_OW 69
26928: ST_TO_ADDR
// if not tmp then
26929: LD_VAR 0 8
26933: NOT
26934: IFFALSE 26938
// exit ;
26936: GO 27396
// if in_unit then
26938: LD_VAR 0 11
26942: IFFALSE 26966
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
26944: LD_ADDR_VAR 0 10
26948: PUSH
26949: LD_VAR 0 8
26953: PPUSH
26954: LD_VAR 0 11
26958: PPUSH
26959: CALL_OW 74
26963: ST_TO_ADDR
26964: GO 26986
// enemy := NearestUnitToUnit ( tmp , unit ) ;
26966: LD_ADDR_VAR 0 10
26970: PUSH
26971: LD_VAR 0 8
26975: PPUSH
26976: LD_VAR 0 1
26980: PPUSH
26981: CALL_OW 74
26985: ST_TO_ADDR
// if not enemy then
26986: LD_VAR 0 10
26990: NOT
26991: IFFALSE 26995
// exit ;
26993: GO 27396
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
26995: LD_VAR 0 11
26999: PUSH
27000: LD_VAR 0 11
27004: PPUSH
27005: LD_VAR 0 10
27009: PPUSH
27010: CALL_OW 296
27014: PUSH
27015: LD_INT 13
27017: GREATER
27018: AND
27019: PUSH
27020: LD_VAR 0 1
27024: PPUSH
27025: LD_VAR 0 10
27029: PPUSH
27030: CALL_OW 296
27034: PUSH
27035: LD_INT 12
27037: GREATER
27038: OR
27039: IFFALSE 27043
// exit ;
27041: GO 27396
// missile := [ 1 ] ;
27043: LD_ADDR_VAR 0 14
27047: PUSH
27048: LD_INT 1
27050: PUSH
27051: EMPTY
27052: LIST
27053: ST_TO_ADDR
// if Researched ( side , tech_space ) then
27054: LD_VAR 0 9
27058: PPUSH
27059: LD_VAR 0 12
27063: PPUSH
27064: CALL_OW 325
27068: IFFALSE 27097
// missile := Insert ( missile , missile + 1 , 2 ) ;
27070: LD_ADDR_VAR 0 14
27074: PUSH
27075: LD_VAR 0 14
27079: PPUSH
27080: LD_VAR 0 14
27084: PUSH
27085: LD_INT 1
27087: PLUS
27088: PPUSH
27089: LD_INT 2
27091: PPUSH
27092: CALL_OW 2
27096: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
27097: LD_VAR 0 9
27101: PPUSH
27102: LD_VAR 0 13
27106: PPUSH
27107: CALL_OW 325
27111: PUSH
27112: LD_VAR 0 10
27116: PPUSH
27117: CALL_OW 255
27121: PPUSH
27122: LD_VAR 0 13
27126: PPUSH
27127: CALL_OW 325
27131: NOT
27132: AND
27133: IFFALSE 27162
// missile := Insert ( missile , missile + 1 , 3 ) ;
27135: LD_ADDR_VAR 0 14
27139: PUSH
27140: LD_VAR 0 14
27144: PPUSH
27145: LD_VAR 0 14
27149: PUSH
27150: LD_INT 1
27152: PLUS
27153: PPUSH
27154: LD_INT 3
27156: PPUSH
27157: CALL_OW 2
27161: ST_TO_ADDR
// if missile < 2 then
27162: LD_VAR 0 14
27166: PUSH
27167: LD_INT 2
27169: LESS
27170: IFFALSE 27174
// exit ;
27172: GO 27396
// x := GetX ( enemy ) ;
27174: LD_ADDR_VAR 0 4
27178: PUSH
27179: LD_VAR 0 10
27183: PPUSH
27184: CALL_OW 250
27188: ST_TO_ADDR
// y := GetY ( enemy ) ;
27189: LD_ADDR_VAR 0 5
27193: PUSH
27194: LD_VAR 0 10
27198: PPUSH
27199: CALL_OW 251
27203: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
27204: LD_ADDR_VAR 0 6
27208: PUSH
27209: LD_VAR 0 4
27213: PUSH
27214: LD_INT 1
27216: NEG
27217: PPUSH
27218: LD_INT 1
27220: PPUSH
27221: CALL_OW 12
27225: PLUS
27226: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
27227: LD_ADDR_VAR 0 7
27231: PUSH
27232: LD_VAR 0 5
27236: PUSH
27237: LD_INT 1
27239: NEG
27240: PPUSH
27241: LD_INT 1
27243: PPUSH
27244: CALL_OW 12
27248: PLUS
27249: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
27250: LD_VAR 0 6
27254: PPUSH
27255: LD_VAR 0 7
27259: PPUSH
27260: CALL_OW 488
27264: NOT
27265: IFFALSE 27287
// begin _x := x ;
27267: LD_ADDR_VAR 0 6
27271: PUSH
27272: LD_VAR 0 4
27276: ST_TO_ADDR
// _y := y ;
27277: LD_ADDR_VAR 0 7
27281: PUSH
27282: LD_VAR 0 5
27286: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
27287: LD_ADDR_VAR 0 3
27291: PUSH
27292: LD_INT 1
27294: PPUSH
27295: LD_VAR 0 14
27299: PPUSH
27300: CALL_OW 12
27304: ST_TO_ADDR
// case i of 1 :
27305: LD_VAR 0 3
27309: PUSH
27310: LD_INT 1
27312: DOUBLE
27313: EQUAL
27314: IFTRUE 27318
27316: GO 27335
27318: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
27319: LD_VAR 0 1
27323: PPUSH
27324: LD_VAR 0 10
27328: PPUSH
27329: CALL_OW 115
27333: GO 27396
27335: LD_INT 2
27337: DOUBLE
27338: EQUAL
27339: IFTRUE 27343
27341: GO 27365
27343: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
27344: LD_VAR 0 1
27348: PPUSH
27349: LD_VAR 0 6
27353: PPUSH
27354: LD_VAR 0 7
27358: PPUSH
27359: CALL_OW 153
27363: GO 27396
27365: LD_INT 3
27367: DOUBLE
27368: EQUAL
27369: IFTRUE 27373
27371: GO 27395
27373: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
27374: LD_VAR 0 1
27378: PPUSH
27379: LD_VAR 0 6
27383: PPUSH
27384: LD_VAR 0 7
27388: PPUSH
27389: CALL_OW 154
27393: GO 27396
27395: POP
// end ;
27396: LD_VAR 0 2
27400: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
27401: LD_INT 0
27403: PPUSH
27404: PPUSH
27405: PPUSH
27406: PPUSH
27407: PPUSH
27408: PPUSH
// if not unit or not building then
27409: LD_VAR 0 1
27413: NOT
27414: PUSH
27415: LD_VAR 0 2
27419: NOT
27420: OR
27421: IFFALSE 27425
// exit ;
27423: GO 27583
// x := GetX ( building ) ;
27425: LD_ADDR_VAR 0 5
27429: PUSH
27430: LD_VAR 0 2
27434: PPUSH
27435: CALL_OW 250
27439: ST_TO_ADDR
// y := GetY ( building ) ;
27440: LD_ADDR_VAR 0 6
27444: PUSH
27445: LD_VAR 0 2
27449: PPUSH
27450: CALL_OW 251
27454: ST_TO_ADDR
// for i = 0 to 5 do
27455: LD_ADDR_VAR 0 4
27459: PUSH
27460: DOUBLE
27461: LD_INT 0
27463: DEC
27464: ST_TO_ADDR
27465: LD_INT 5
27467: PUSH
27468: FOR_TO
27469: IFFALSE 27581
// begin _x := ShiftX ( x , i , 3 ) ;
27471: LD_ADDR_VAR 0 7
27475: PUSH
27476: LD_VAR 0 5
27480: PPUSH
27481: LD_VAR 0 4
27485: PPUSH
27486: LD_INT 3
27488: PPUSH
27489: CALL_OW 272
27493: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
27494: LD_ADDR_VAR 0 8
27498: PUSH
27499: LD_VAR 0 6
27503: PPUSH
27504: LD_VAR 0 4
27508: PPUSH
27509: LD_INT 3
27511: PPUSH
27512: CALL_OW 273
27516: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
27517: LD_VAR 0 7
27521: PPUSH
27522: LD_VAR 0 8
27526: PPUSH
27527: CALL_OW 488
27531: NOT
27532: IFFALSE 27536
// continue ;
27534: GO 27468
// if HexInfo ( _x , _y ) = 0 then
27536: LD_VAR 0 7
27540: PPUSH
27541: LD_VAR 0 8
27545: PPUSH
27546: CALL_OW 428
27550: PUSH
27551: LD_INT 0
27553: EQUAL
27554: IFFALSE 27579
// begin ComMoveXY ( unit , _x , _y ) ;
27556: LD_VAR 0 1
27560: PPUSH
27561: LD_VAR 0 7
27565: PPUSH
27566: LD_VAR 0 8
27570: PPUSH
27571: CALL_OW 111
// exit ;
27575: POP
27576: POP
27577: GO 27583
// end ; end ;
27579: GO 27468
27581: POP
27582: POP
// end ;
27583: LD_VAR 0 3
27587: RET
// export function ScanBase ( side , base_area ) ; begin
27588: LD_INT 0
27590: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
27591: LD_ADDR_VAR 0 3
27595: PUSH
27596: LD_VAR 0 2
27600: PPUSH
27601: LD_INT 81
27603: PUSH
27604: LD_VAR 0 1
27608: PUSH
27609: EMPTY
27610: LIST
27611: LIST
27612: PPUSH
27613: CALL_OW 70
27617: ST_TO_ADDR
// end ;
27618: LD_VAR 0 3
27622: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
27623: LD_INT 0
27625: PPUSH
27626: PPUSH
27627: PPUSH
27628: PPUSH
// result := false ;
27629: LD_ADDR_VAR 0 2
27633: PUSH
27634: LD_INT 0
27636: ST_TO_ADDR
// side := GetSide ( unit ) ;
27637: LD_ADDR_VAR 0 3
27641: PUSH
27642: LD_VAR 0 1
27646: PPUSH
27647: CALL_OW 255
27651: ST_TO_ADDR
// nat := GetNation ( unit ) ;
27652: LD_ADDR_VAR 0 4
27656: PUSH
27657: LD_VAR 0 1
27661: PPUSH
27662: CALL_OW 248
27666: ST_TO_ADDR
// case nat of 1 :
27667: LD_VAR 0 4
27671: PUSH
27672: LD_INT 1
27674: DOUBLE
27675: EQUAL
27676: IFTRUE 27680
27678: GO 27691
27680: POP
// tech := tech_lassight ; 2 :
27681: LD_ADDR_VAR 0 5
27685: PUSH
27686: LD_INT 12
27688: ST_TO_ADDR
27689: GO 27730
27691: LD_INT 2
27693: DOUBLE
27694: EQUAL
27695: IFTRUE 27699
27697: GO 27710
27699: POP
// tech := tech_mortar ; 3 :
27700: LD_ADDR_VAR 0 5
27704: PUSH
27705: LD_INT 41
27707: ST_TO_ADDR
27708: GO 27730
27710: LD_INT 3
27712: DOUBLE
27713: EQUAL
27714: IFTRUE 27718
27716: GO 27729
27718: POP
// tech := tech_bazooka ; end ;
27719: LD_ADDR_VAR 0 5
27723: PUSH
27724: LD_INT 44
27726: ST_TO_ADDR
27727: GO 27730
27729: POP
// if Researched ( side , tech ) then
27730: LD_VAR 0 3
27734: PPUSH
27735: LD_VAR 0 5
27739: PPUSH
27740: CALL_OW 325
27744: IFFALSE 27771
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
27746: LD_ADDR_VAR 0 2
27750: PUSH
27751: LD_INT 5
27753: PUSH
27754: LD_INT 8
27756: PUSH
27757: LD_INT 9
27759: PUSH
27760: EMPTY
27761: LIST
27762: LIST
27763: LIST
27764: PUSH
27765: LD_VAR 0 4
27769: ARRAY
27770: ST_TO_ADDR
// end ;
27771: LD_VAR 0 2
27775: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
27776: LD_INT 0
27778: PPUSH
27779: PPUSH
27780: PPUSH
// if not mines then
27781: LD_VAR 0 2
27785: NOT
27786: IFFALSE 27790
// exit ;
27788: GO 27934
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
27790: LD_ADDR_VAR 0 5
27794: PUSH
27795: LD_INT 81
27797: PUSH
27798: LD_VAR 0 1
27802: PUSH
27803: EMPTY
27804: LIST
27805: LIST
27806: PUSH
27807: LD_INT 3
27809: PUSH
27810: LD_INT 21
27812: PUSH
27813: LD_INT 3
27815: PUSH
27816: EMPTY
27817: LIST
27818: LIST
27819: PUSH
27820: EMPTY
27821: LIST
27822: LIST
27823: PUSH
27824: EMPTY
27825: LIST
27826: LIST
27827: PPUSH
27828: CALL_OW 69
27832: ST_TO_ADDR
// for i in mines do
27833: LD_ADDR_VAR 0 4
27837: PUSH
27838: LD_VAR 0 2
27842: PUSH
27843: FOR_IN
27844: IFFALSE 27932
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
27846: LD_VAR 0 4
27850: PUSH
27851: LD_INT 1
27853: ARRAY
27854: PPUSH
27855: LD_VAR 0 4
27859: PUSH
27860: LD_INT 2
27862: ARRAY
27863: PPUSH
27864: CALL_OW 458
27868: NOT
27869: IFFALSE 27873
// continue ;
27871: GO 27843
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
27873: LD_VAR 0 4
27877: PUSH
27878: LD_INT 1
27880: ARRAY
27881: PPUSH
27882: LD_VAR 0 4
27886: PUSH
27887: LD_INT 2
27889: ARRAY
27890: PPUSH
27891: CALL_OW 428
27895: PUSH
27896: LD_VAR 0 5
27900: IN
27901: IFFALSE 27930
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
27903: LD_VAR 0 4
27907: PUSH
27908: LD_INT 1
27910: ARRAY
27911: PPUSH
27912: LD_VAR 0 4
27916: PUSH
27917: LD_INT 2
27919: ARRAY
27920: PPUSH
27921: LD_VAR 0 1
27925: PPUSH
27926: CALL_OW 456
// end ;
27930: GO 27843
27932: POP
27933: POP
// end ;
27934: LD_VAR 0 3
27938: RET
// export function Count ( array ) ; var i ; begin
27939: LD_INT 0
27941: PPUSH
27942: PPUSH
// result := 0 ;
27943: LD_ADDR_VAR 0 2
27947: PUSH
27948: LD_INT 0
27950: ST_TO_ADDR
// for i in array do
27951: LD_ADDR_VAR 0 3
27955: PUSH
27956: LD_VAR 0 1
27960: PUSH
27961: FOR_IN
27962: IFFALSE 27986
// if i then
27964: LD_VAR 0 3
27968: IFFALSE 27984
// result := result + 1 ;
27970: LD_ADDR_VAR 0 2
27974: PUSH
27975: LD_VAR 0 2
27979: PUSH
27980: LD_INT 1
27982: PLUS
27983: ST_TO_ADDR
27984: GO 27961
27986: POP
27987: POP
// end ;
27988: LD_VAR 0 2
27992: RET
// export function IsEmpty ( building ) ; begin
27993: LD_INT 0
27995: PPUSH
// if not building then
27996: LD_VAR 0 1
28000: NOT
28001: IFFALSE 28005
// exit ;
28003: GO 28048
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
28005: LD_ADDR_VAR 0 2
28009: PUSH
28010: LD_VAR 0 1
28014: PUSH
28015: LD_INT 22
28017: PUSH
28018: LD_VAR 0 1
28022: PPUSH
28023: CALL_OW 255
28027: PUSH
28028: EMPTY
28029: LIST
28030: LIST
28031: PUSH
28032: LD_INT 58
28034: PUSH
28035: EMPTY
28036: LIST
28037: PUSH
28038: EMPTY
28039: LIST
28040: LIST
28041: PPUSH
28042: CALL_OW 69
28046: IN
28047: ST_TO_ADDR
// end ;
28048: LD_VAR 0 2
28052: RET
// export function IsNotFull ( building ) ; begin
28053: LD_INT 0
28055: PPUSH
// if not building then
28056: LD_VAR 0 1
28060: NOT
28061: IFFALSE 28065
// exit ;
28063: GO 28084
// result := UnitsInside ( building ) < 6 ;
28065: LD_ADDR_VAR 0 2
28069: PUSH
28070: LD_VAR 0 1
28074: PPUSH
28075: CALL_OW 313
28079: PUSH
28080: LD_INT 6
28082: LESS
28083: ST_TO_ADDR
// end ;
28084: LD_VAR 0 2
28088: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
28089: LD_INT 0
28091: PPUSH
28092: PPUSH
28093: PPUSH
28094: PPUSH
// tmp := [ ] ;
28095: LD_ADDR_VAR 0 3
28099: PUSH
28100: EMPTY
28101: ST_TO_ADDR
// list := [ ] ;
28102: LD_ADDR_VAR 0 5
28106: PUSH
28107: EMPTY
28108: ST_TO_ADDR
// for i = 16 to 25 do
28109: LD_ADDR_VAR 0 4
28113: PUSH
28114: DOUBLE
28115: LD_INT 16
28117: DEC
28118: ST_TO_ADDR
28119: LD_INT 25
28121: PUSH
28122: FOR_TO
28123: IFFALSE 28196
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
28125: LD_ADDR_VAR 0 3
28129: PUSH
28130: LD_VAR 0 3
28134: PUSH
28135: LD_INT 22
28137: PUSH
28138: LD_VAR 0 1
28142: PPUSH
28143: CALL_OW 255
28147: PUSH
28148: EMPTY
28149: LIST
28150: LIST
28151: PUSH
28152: LD_INT 91
28154: PUSH
28155: LD_VAR 0 1
28159: PUSH
28160: LD_INT 6
28162: PUSH
28163: EMPTY
28164: LIST
28165: LIST
28166: LIST
28167: PUSH
28168: LD_INT 30
28170: PUSH
28171: LD_VAR 0 4
28175: PUSH
28176: EMPTY
28177: LIST
28178: LIST
28179: PUSH
28180: EMPTY
28181: LIST
28182: LIST
28183: LIST
28184: PUSH
28185: EMPTY
28186: LIST
28187: PPUSH
28188: CALL_OW 69
28192: ADD
28193: ST_TO_ADDR
28194: GO 28122
28196: POP
28197: POP
// for i = 1 to tmp do
28198: LD_ADDR_VAR 0 4
28202: PUSH
28203: DOUBLE
28204: LD_INT 1
28206: DEC
28207: ST_TO_ADDR
28208: LD_VAR 0 3
28212: PUSH
28213: FOR_TO
28214: IFFALSE 28302
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
28216: LD_ADDR_VAR 0 5
28220: PUSH
28221: LD_VAR 0 5
28225: PUSH
28226: LD_VAR 0 3
28230: PUSH
28231: LD_VAR 0 4
28235: ARRAY
28236: PPUSH
28237: CALL_OW 266
28241: PUSH
28242: LD_VAR 0 3
28246: PUSH
28247: LD_VAR 0 4
28251: ARRAY
28252: PPUSH
28253: CALL_OW 250
28257: PUSH
28258: LD_VAR 0 3
28262: PUSH
28263: LD_VAR 0 4
28267: ARRAY
28268: PPUSH
28269: CALL_OW 251
28273: PUSH
28274: LD_VAR 0 3
28278: PUSH
28279: LD_VAR 0 4
28283: ARRAY
28284: PPUSH
28285: CALL_OW 254
28289: PUSH
28290: EMPTY
28291: LIST
28292: LIST
28293: LIST
28294: LIST
28295: PUSH
28296: EMPTY
28297: LIST
28298: ADD
28299: ST_TO_ADDR
28300: GO 28213
28302: POP
28303: POP
// result := list ;
28304: LD_ADDR_VAR 0 2
28308: PUSH
28309: LD_VAR 0 5
28313: ST_TO_ADDR
// end ;
28314: LD_VAR 0 2
28318: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
28319: LD_INT 0
28321: PPUSH
28322: PPUSH
28323: PPUSH
28324: PPUSH
28325: PPUSH
28326: PPUSH
28327: PPUSH
// if not factory then
28328: LD_VAR 0 1
28332: NOT
28333: IFFALSE 28337
// exit ;
28335: GO 28930
// if control = control_apeman then
28337: LD_VAR 0 4
28341: PUSH
28342: LD_INT 5
28344: EQUAL
28345: IFFALSE 28454
// begin tmp := UnitsInside ( factory ) ;
28347: LD_ADDR_VAR 0 8
28351: PUSH
28352: LD_VAR 0 1
28356: PPUSH
28357: CALL_OW 313
28361: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
28362: LD_VAR 0 8
28366: PPUSH
28367: LD_INT 25
28369: PUSH
28370: LD_INT 12
28372: PUSH
28373: EMPTY
28374: LIST
28375: LIST
28376: PPUSH
28377: CALL_OW 72
28381: NOT
28382: IFFALSE 28392
// control := control_manual ;
28384: LD_ADDR_VAR 0 4
28388: PUSH
28389: LD_INT 1
28391: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
28392: LD_ADDR_VAR 0 8
28396: PUSH
28397: LD_VAR 0 1
28401: PPUSH
28402: CALL 28089 0 1
28406: ST_TO_ADDR
// if tmp then
28407: LD_VAR 0 8
28411: IFFALSE 28454
// begin for i in tmp do
28413: LD_ADDR_VAR 0 7
28417: PUSH
28418: LD_VAR 0 8
28422: PUSH
28423: FOR_IN
28424: IFFALSE 28452
// if i [ 1 ] = b_ext_radio then
28426: LD_VAR 0 7
28430: PUSH
28431: LD_INT 1
28433: ARRAY
28434: PUSH
28435: LD_INT 22
28437: EQUAL
28438: IFFALSE 28450
// begin control := control_remote ;
28440: LD_ADDR_VAR 0 4
28444: PUSH
28445: LD_INT 2
28447: ST_TO_ADDR
// break ;
28448: GO 28452
// end ;
28450: GO 28423
28452: POP
28453: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
28454: LD_VAR 0 1
28458: PPUSH
28459: LD_VAR 0 2
28463: PPUSH
28464: LD_VAR 0 3
28468: PPUSH
28469: LD_VAR 0 4
28473: PPUSH
28474: LD_VAR 0 5
28478: PPUSH
28479: CALL_OW 448
28483: IFFALSE 28518
// begin result := [ chassis , engine , control , weapon ] ;
28485: LD_ADDR_VAR 0 6
28489: PUSH
28490: LD_VAR 0 2
28494: PUSH
28495: LD_VAR 0 3
28499: PUSH
28500: LD_VAR 0 4
28504: PUSH
28505: LD_VAR 0 5
28509: PUSH
28510: EMPTY
28511: LIST
28512: LIST
28513: LIST
28514: LIST
28515: ST_TO_ADDR
// exit ;
28516: GO 28930
// end ; _chassis := AvailableChassisList ( factory ) ;
28518: LD_ADDR_VAR 0 9
28522: PUSH
28523: LD_VAR 0 1
28527: PPUSH
28528: CALL_OW 475
28532: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
28533: LD_ADDR_VAR 0 11
28537: PUSH
28538: LD_VAR 0 1
28542: PPUSH
28543: CALL_OW 476
28547: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
28548: LD_ADDR_VAR 0 12
28552: PUSH
28553: LD_VAR 0 1
28557: PPUSH
28558: CALL_OW 477
28562: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
28563: LD_ADDR_VAR 0 10
28567: PUSH
28568: LD_VAR 0 1
28572: PPUSH
28573: CALL_OW 478
28577: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
28578: LD_VAR 0 9
28582: NOT
28583: PUSH
28584: LD_VAR 0 11
28588: NOT
28589: OR
28590: PUSH
28591: LD_VAR 0 12
28595: NOT
28596: OR
28597: PUSH
28598: LD_VAR 0 10
28602: NOT
28603: OR
28604: IFFALSE 28639
// begin result := [ chassis , engine , control , weapon ] ;
28606: LD_ADDR_VAR 0 6
28610: PUSH
28611: LD_VAR 0 2
28615: PUSH
28616: LD_VAR 0 3
28620: PUSH
28621: LD_VAR 0 4
28625: PUSH
28626: LD_VAR 0 5
28630: PUSH
28631: EMPTY
28632: LIST
28633: LIST
28634: LIST
28635: LIST
28636: ST_TO_ADDR
// exit ;
28637: GO 28930
// end ; if not chassis in _chassis then
28639: LD_VAR 0 2
28643: PUSH
28644: LD_VAR 0 9
28648: IN
28649: NOT
28650: IFFALSE 28676
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
28652: LD_ADDR_VAR 0 2
28656: PUSH
28657: LD_VAR 0 9
28661: PUSH
28662: LD_INT 1
28664: PPUSH
28665: LD_VAR 0 9
28669: PPUSH
28670: CALL_OW 12
28674: ARRAY
28675: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
28676: LD_VAR 0 2
28680: PPUSH
28681: LD_VAR 0 3
28685: PPUSH
28686: CALL 28935 0 2
28690: NOT
28691: IFFALSE 28750
// repeat engine := _engine [ 1 ] ;
28693: LD_ADDR_VAR 0 3
28697: PUSH
28698: LD_VAR 0 11
28702: PUSH
28703: LD_INT 1
28705: ARRAY
28706: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
28707: LD_ADDR_VAR 0 11
28711: PUSH
28712: LD_VAR 0 11
28716: PPUSH
28717: LD_INT 1
28719: PPUSH
28720: CALL_OW 3
28724: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
28725: LD_VAR 0 2
28729: PPUSH
28730: LD_VAR 0 3
28734: PPUSH
28735: CALL 28935 0 2
28739: PUSH
28740: LD_VAR 0 11
28744: PUSH
28745: EMPTY
28746: EQUAL
28747: OR
28748: IFFALSE 28693
// if not control in _control then
28750: LD_VAR 0 4
28754: PUSH
28755: LD_VAR 0 12
28759: IN
28760: NOT
28761: IFFALSE 28787
// control := _control [ rand ( 1 , _control ) ] ;
28763: LD_ADDR_VAR 0 4
28767: PUSH
28768: LD_VAR 0 12
28772: PUSH
28773: LD_INT 1
28775: PPUSH
28776: LD_VAR 0 12
28780: PPUSH
28781: CALL_OW 12
28785: ARRAY
28786: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
28787: LD_VAR 0 2
28791: PPUSH
28792: LD_VAR 0 5
28796: PPUSH
28797: CALL 29155 0 2
28801: NOT
28802: IFFALSE 28861
// repeat weapon := _weapon [ 1 ] ;
28804: LD_ADDR_VAR 0 5
28808: PUSH
28809: LD_VAR 0 10
28813: PUSH
28814: LD_INT 1
28816: ARRAY
28817: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
28818: LD_ADDR_VAR 0 10
28822: PUSH
28823: LD_VAR 0 10
28827: PPUSH
28828: LD_INT 1
28830: PPUSH
28831: CALL_OW 3
28835: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
28836: LD_VAR 0 2
28840: PPUSH
28841: LD_VAR 0 5
28845: PPUSH
28846: CALL 29155 0 2
28850: PUSH
28851: LD_VAR 0 10
28855: PUSH
28856: EMPTY
28857: EQUAL
28858: OR
28859: IFFALSE 28804
// result := [ ] ;
28861: LD_ADDR_VAR 0 6
28865: PUSH
28866: EMPTY
28867: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
28868: LD_VAR 0 1
28872: PPUSH
28873: LD_VAR 0 2
28877: PPUSH
28878: LD_VAR 0 3
28882: PPUSH
28883: LD_VAR 0 4
28887: PPUSH
28888: LD_VAR 0 5
28892: PPUSH
28893: CALL_OW 448
28897: IFFALSE 28930
// result := [ chassis , engine , control , weapon ] ;
28899: LD_ADDR_VAR 0 6
28903: PUSH
28904: LD_VAR 0 2
28908: PUSH
28909: LD_VAR 0 3
28913: PUSH
28914: LD_VAR 0 4
28918: PUSH
28919: LD_VAR 0 5
28923: PUSH
28924: EMPTY
28925: LIST
28926: LIST
28927: LIST
28928: LIST
28929: ST_TO_ADDR
// end ;
28930: LD_VAR 0 6
28934: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
28935: LD_INT 0
28937: PPUSH
// if not chassis or not engine then
28938: LD_VAR 0 1
28942: NOT
28943: PUSH
28944: LD_VAR 0 2
28948: NOT
28949: OR
28950: IFFALSE 28954
// exit ;
28952: GO 29150
// case engine of engine_solar :
28954: LD_VAR 0 2
28958: PUSH
28959: LD_INT 2
28961: DOUBLE
28962: EQUAL
28963: IFTRUE 28967
28965: GO 29005
28967: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
28968: LD_ADDR_VAR 0 3
28972: PUSH
28973: LD_INT 11
28975: PUSH
28976: LD_INT 12
28978: PUSH
28979: LD_INT 13
28981: PUSH
28982: LD_INT 14
28984: PUSH
28985: LD_INT 1
28987: PUSH
28988: LD_INT 2
28990: PUSH
28991: LD_INT 3
28993: PUSH
28994: EMPTY
28995: LIST
28996: LIST
28997: LIST
28998: LIST
28999: LIST
29000: LIST
29001: LIST
29002: ST_TO_ADDR
29003: GO 29134
29005: LD_INT 1
29007: DOUBLE
29008: EQUAL
29009: IFTRUE 29013
29011: GO 29075
29013: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
29014: LD_ADDR_VAR 0 3
29018: PUSH
29019: LD_INT 11
29021: PUSH
29022: LD_INT 12
29024: PUSH
29025: LD_INT 13
29027: PUSH
29028: LD_INT 14
29030: PUSH
29031: LD_INT 1
29033: PUSH
29034: LD_INT 2
29036: PUSH
29037: LD_INT 3
29039: PUSH
29040: LD_INT 4
29042: PUSH
29043: LD_INT 5
29045: PUSH
29046: LD_INT 21
29048: PUSH
29049: LD_INT 23
29051: PUSH
29052: LD_INT 22
29054: PUSH
29055: LD_INT 24
29057: PUSH
29058: EMPTY
29059: LIST
29060: LIST
29061: LIST
29062: LIST
29063: LIST
29064: LIST
29065: LIST
29066: LIST
29067: LIST
29068: LIST
29069: LIST
29070: LIST
29071: LIST
29072: ST_TO_ADDR
29073: GO 29134
29075: LD_INT 3
29077: DOUBLE
29078: EQUAL
29079: IFTRUE 29083
29081: GO 29133
29083: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
29084: LD_ADDR_VAR 0 3
29088: PUSH
29089: LD_INT 13
29091: PUSH
29092: LD_INT 14
29094: PUSH
29095: LD_INT 2
29097: PUSH
29098: LD_INT 3
29100: PUSH
29101: LD_INT 4
29103: PUSH
29104: LD_INT 5
29106: PUSH
29107: LD_INT 21
29109: PUSH
29110: LD_INT 22
29112: PUSH
29113: LD_INT 23
29115: PUSH
29116: LD_INT 24
29118: PUSH
29119: EMPTY
29120: LIST
29121: LIST
29122: LIST
29123: LIST
29124: LIST
29125: LIST
29126: LIST
29127: LIST
29128: LIST
29129: LIST
29130: ST_TO_ADDR
29131: GO 29134
29133: POP
// result := ( chassis in result ) ;
29134: LD_ADDR_VAR 0 3
29138: PUSH
29139: LD_VAR 0 1
29143: PUSH
29144: LD_VAR 0 3
29148: IN
29149: ST_TO_ADDR
// end ;
29150: LD_VAR 0 3
29154: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
29155: LD_INT 0
29157: PPUSH
// if not chassis or not weapon then
29158: LD_VAR 0 1
29162: NOT
29163: PUSH
29164: LD_VAR 0 2
29168: NOT
29169: OR
29170: IFFALSE 29174
// exit ;
29172: GO 30236
// case weapon of us_machine_gun :
29174: LD_VAR 0 2
29178: PUSH
29179: LD_INT 2
29181: DOUBLE
29182: EQUAL
29183: IFTRUE 29187
29185: GO 29217
29187: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
29188: LD_ADDR_VAR 0 3
29192: PUSH
29193: LD_INT 1
29195: PUSH
29196: LD_INT 2
29198: PUSH
29199: LD_INT 3
29201: PUSH
29202: LD_INT 4
29204: PUSH
29205: LD_INT 5
29207: PUSH
29208: EMPTY
29209: LIST
29210: LIST
29211: LIST
29212: LIST
29213: LIST
29214: ST_TO_ADDR
29215: GO 30220
29217: LD_INT 3
29219: DOUBLE
29220: EQUAL
29221: IFTRUE 29225
29223: GO 29255
29225: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
29226: LD_ADDR_VAR 0 3
29230: PUSH
29231: LD_INT 1
29233: PUSH
29234: LD_INT 2
29236: PUSH
29237: LD_INT 3
29239: PUSH
29240: LD_INT 4
29242: PUSH
29243: LD_INT 5
29245: PUSH
29246: EMPTY
29247: LIST
29248: LIST
29249: LIST
29250: LIST
29251: LIST
29252: ST_TO_ADDR
29253: GO 30220
29255: LD_INT 11
29257: DOUBLE
29258: EQUAL
29259: IFTRUE 29263
29261: GO 29293
29263: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
29264: LD_ADDR_VAR 0 3
29268: PUSH
29269: LD_INT 1
29271: PUSH
29272: LD_INT 2
29274: PUSH
29275: LD_INT 3
29277: PUSH
29278: LD_INT 4
29280: PUSH
29281: LD_INT 5
29283: PUSH
29284: EMPTY
29285: LIST
29286: LIST
29287: LIST
29288: LIST
29289: LIST
29290: ST_TO_ADDR
29291: GO 30220
29293: LD_INT 4
29295: DOUBLE
29296: EQUAL
29297: IFTRUE 29301
29299: GO 29327
29301: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
29302: LD_ADDR_VAR 0 3
29306: PUSH
29307: LD_INT 2
29309: PUSH
29310: LD_INT 3
29312: PUSH
29313: LD_INT 4
29315: PUSH
29316: LD_INT 5
29318: PUSH
29319: EMPTY
29320: LIST
29321: LIST
29322: LIST
29323: LIST
29324: ST_TO_ADDR
29325: GO 30220
29327: LD_INT 5
29329: DOUBLE
29330: EQUAL
29331: IFTRUE 29335
29333: GO 29361
29335: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
29336: LD_ADDR_VAR 0 3
29340: PUSH
29341: LD_INT 2
29343: PUSH
29344: LD_INT 3
29346: PUSH
29347: LD_INT 4
29349: PUSH
29350: LD_INT 5
29352: PUSH
29353: EMPTY
29354: LIST
29355: LIST
29356: LIST
29357: LIST
29358: ST_TO_ADDR
29359: GO 30220
29361: LD_INT 9
29363: DOUBLE
29364: EQUAL
29365: IFTRUE 29369
29367: GO 29395
29369: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
29370: LD_ADDR_VAR 0 3
29374: PUSH
29375: LD_INT 2
29377: PUSH
29378: LD_INT 3
29380: PUSH
29381: LD_INT 4
29383: PUSH
29384: LD_INT 5
29386: PUSH
29387: EMPTY
29388: LIST
29389: LIST
29390: LIST
29391: LIST
29392: ST_TO_ADDR
29393: GO 30220
29395: LD_INT 7
29397: DOUBLE
29398: EQUAL
29399: IFTRUE 29403
29401: GO 29429
29403: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
29404: LD_ADDR_VAR 0 3
29408: PUSH
29409: LD_INT 2
29411: PUSH
29412: LD_INT 3
29414: PUSH
29415: LD_INT 4
29417: PUSH
29418: LD_INT 5
29420: PUSH
29421: EMPTY
29422: LIST
29423: LIST
29424: LIST
29425: LIST
29426: ST_TO_ADDR
29427: GO 30220
29429: LD_INT 12
29431: DOUBLE
29432: EQUAL
29433: IFTRUE 29437
29435: GO 29463
29437: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
29438: LD_ADDR_VAR 0 3
29442: PUSH
29443: LD_INT 2
29445: PUSH
29446: LD_INT 3
29448: PUSH
29449: LD_INT 4
29451: PUSH
29452: LD_INT 5
29454: PUSH
29455: EMPTY
29456: LIST
29457: LIST
29458: LIST
29459: LIST
29460: ST_TO_ADDR
29461: GO 30220
29463: LD_INT 13
29465: DOUBLE
29466: EQUAL
29467: IFTRUE 29471
29469: GO 29497
29471: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
29472: LD_ADDR_VAR 0 3
29476: PUSH
29477: LD_INT 2
29479: PUSH
29480: LD_INT 3
29482: PUSH
29483: LD_INT 4
29485: PUSH
29486: LD_INT 5
29488: PUSH
29489: EMPTY
29490: LIST
29491: LIST
29492: LIST
29493: LIST
29494: ST_TO_ADDR
29495: GO 30220
29497: LD_INT 14
29499: DOUBLE
29500: EQUAL
29501: IFTRUE 29505
29503: GO 29523
29505: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
29506: LD_ADDR_VAR 0 3
29510: PUSH
29511: LD_INT 4
29513: PUSH
29514: LD_INT 5
29516: PUSH
29517: EMPTY
29518: LIST
29519: LIST
29520: ST_TO_ADDR
29521: GO 30220
29523: LD_INT 6
29525: DOUBLE
29526: EQUAL
29527: IFTRUE 29531
29529: GO 29549
29531: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
29532: LD_ADDR_VAR 0 3
29536: PUSH
29537: LD_INT 4
29539: PUSH
29540: LD_INT 5
29542: PUSH
29543: EMPTY
29544: LIST
29545: LIST
29546: ST_TO_ADDR
29547: GO 30220
29549: LD_INT 10
29551: DOUBLE
29552: EQUAL
29553: IFTRUE 29557
29555: GO 29575
29557: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
29558: LD_ADDR_VAR 0 3
29562: PUSH
29563: LD_INT 4
29565: PUSH
29566: LD_INT 5
29568: PUSH
29569: EMPTY
29570: LIST
29571: LIST
29572: ST_TO_ADDR
29573: GO 30220
29575: LD_INT 22
29577: DOUBLE
29578: EQUAL
29579: IFTRUE 29583
29581: GO 29609
29583: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
29584: LD_ADDR_VAR 0 3
29588: PUSH
29589: LD_INT 11
29591: PUSH
29592: LD_INT 12
29594: PUSH
29595: LD_INT 13
29597: PUSH
29598: LD_INT 14
29600: PUSH
29601: EMPTY
29602: LIST
29603: LIST
29604: LIST
29605: LIST
29606: ST_TO_ADDR
29607: GO 30220
29609: LD_INT 23
29611: DOUBLE
29612: EQUAL
29613: IFTRUE 29617
29615: GO 29643
29617: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
29618: LD_ADDR_VAR 0 3
29622: PUSH
29623: LD_INT 11
29625: PUSH
29626: LD_INT 12
29628: PUSH
29629: LD_INT 13
29631: PUSH
29632: LD_INT 14
29634: PUSH
29635: EMPTY
29636: LIST
29637: LIST
29638: LIST
29639: LIST
29640: ST_TO_ADDR
29641: GO 30220
29643: LD_INT 24
29645: DOUBLE
29646: EQUAL
29647: IFTRUE 29651
29649: GO 29677
29651: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
29652: LD_ADDR_VAR 0 3
29656: PUSH
29657: LD_INT 11
29659: PUSH
29660: LD_INT 12
29662: PUSH
29663: LD_INT 13
29665: PUSH
29666: LD_INT 14
29668: PUSH
29669: EMPTY
29670: LIST
29671: LIST
29672: LIST
29673: LIST
29674: ST_TO_ADDR
29675: GO 30220
29677: LD_INT 30
29679: DOUBLE
29680: EQUAL
29681: IFTRUE 29685
29683: GO 29711
29685: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
29686: LD_ADDR_VAR 0 3
29690: PUSH
29691: LD_INT 11
29693: PUSH
29694: LD_INT 12
29696: PUSH
29697: LD_INT 13
29699: PUSH
29700: LD_INT 14
29702: PUSH
29703: EMPTY
29704: LIST
29705: LIST
29706: LIST
29707: LIST
29708: ST_TO_ADDR
29709: GO 30220
29711: LD_INT 25
29713: DOUBLE
29714: EQUAL
29715: IFTRUE 29719
29717: GO 29737
29719: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
29720: LD_ADDR_VAR 0 3
29724: PUSH
29725: LD_INT 13
29727: PUSH
29728: LD_INT 14
29730: PUSH
29731: EMPTY
29732: LIST
29733: LIST
29734: ST_TO_ADDR
29735: GO 30220
29737: LD_INT 27
29739: DOUBLE
29740: EQUAL
29741: IFTRUE 29745
29743: GO 29763
29745: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
29746: LD_ADDR_VAR 0 3
29750: PUSH
29751: LD_INT 13
29753: PUSH
29754: LD_INT 14
29756: PUSH
29757: EMPTY
29758: LIST
29759: LIST
29760: ST_TO_ADDR
29761: GO 30220
29763: LD_EXP 34
29767: DOUBLE
29768: EQUAL
29769: IFTRUE 29773
29771: GO 29799
29773: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
29774: LD_ADDR_VAR 0 3
29778: PUSH
29779: LD_INT 11
29781: PUSH
29782: LD_INT 12
29784: PUSH
29785: LD_INT 13
29787: PUSH
29788: LD_INT 14
29790: PUSH
29791: EMPTY
29792: LIST
29793: LIST
29794: LIST
29795: LIST
29796: ST_TO_ADDR
29797: GO 30220
29799: LD_INT 28
29801: DOUBLE
29802: EQUAL
29803: IFTRUE 29807
29805: GO 29825
29807: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
29808: LD_ADDR_VAR 0 3
29812: PUSH
29813: LD_INT 13
29815: PUSH
29816: LD_INT 14
29818: PUSH
29819: EMPTY
29820: LIST
29821: LIST
29822: ST_TO_ADDR
29823: GO 30220
29825: LD_INT 29
29827: DOUBLE
29828: EQUAL
29829: IFTRUE 29833
29831: GO 29851
29833: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
29834: LD_ADDR_VAR 0 3
29838: PUSH
29839: LD_INT 13
29841: PUSH
29842: LD_INT 14
29844: PUSH
29845: EMPTY
29846: LIST
29847: LIST
29848: ST_TO_ADDR
29849: GO 30220
29851: LD_INT 31
29853: DOUBLE
29854: EQUAL
29855: IFTRUE 29859
29857: GO 29877
29859: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
29860: LD_ADDR_VAR 0 3
29864: PUSH
29865: LD_INT 13
29867: PUSH
29868: LD_INT 14
29870: PUSH
29871: EMPTY
29872: LIST
29873: LIST
29874: ST_TO_ADDR
29875: GO 30220
29877: LD_INT 26
29879: DOUBLE
29880: EQUAL
29881: IFTRUE 29885
29883: GO 29903
29885: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
29886: LD_ADDR_VAR 0 3
29890: PUSH
29891: LD_INT 13
29893: PUSH
29894: LD_INT 14
29896: PUSH
29897: EMPTY
29898: LIST
29899: LIST
29900: ST_TO_ADDR
29901: GO 30220
29903: LD_INT 42
29905: DOUBLE
29906: EQUAL
29907: IFTRUE 29911
29909: GO 29937
29911: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
29912: LD_ADDR_VAR 0 3
29916: PUSH
29917: LD_INT 21
29919: PUSH
29920: LD_INT 22
29922: PUSH
29923: LD_INT 23
29925: PUSH
29926: LD_INT 24
29928: PUSH
29929: EMPTY
29930: LIST
29931: LIST
29932: LIST
29933: LIST
29934: ST_TO_ADDR
29935: GO 30220
29937: LD_INT 43
29939: DOUBLE
29940: EQUAL
29941: IFTRUE 29945
29943: GO 29971
29945: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
29946: LD_ADDR_VAR 0 3
29950: PUSH
29951: LD_INT 21
29953: PUSH
29954: LD_INT 22
29956: PUSH
29957: LD_INT 23
29959: PUSH
29960: LD_INT 24
29962: PUSH
29963: EMPTY
29964: LIST
29965: LIST
29966: LIST
29967: LIST
29968: ST_TO_ADDR
29969: GO 30220
29971: LD_INT 44
29973: DOUBLE
29974: EQUAL
29975: IFTRUE 29979
29977: GO 30005
29979: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
29980: LD_ADDR_VAR 0 3
29984: PUSH
29985: LD_INT 21
29987: PUSH
29988: LD_INT 22
29990: PUSH
29991: LD_INT 23
29993: PUSH
29994: LD_INT 24
29996: PUSH
29997: EMPTY
29998: LIST
29999: LIST
30000: LIST
30001: LIST
30002: ST_TO_ADDR
30003: GO 30220
30005: LD_INT 45
30007: DOUBLE
30008: EQUAL
30009: IFTRUE 30013
30011: GO 30039
30013: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
30014: LD_ADDR_VAR 0 3
30018: PUSH
30019: LD_INT 21
30021: PUSH
30022: LD_INT 22
30024: PUSH
30025: LD_INT 23
30027: PUSH
30028: LD_INT 24
30030: PUSH
30031: EMPTY
30032: LIST
30033: LIST
30034: LIST
30035: LIST
30036: ST_TO_ADDR
30037: GO 30220
30039: LD_INT 49
30041: DOUBLE
30042: EQUAL
30043: IFTRUE 30047
30045: GO 30073
30047: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
30048: LD_ADDR_VAR 0 3
30052: PUSH
30053: LD_INT 21
30055: PUSH
30056: LD_INT 22
30058: PUSH
30059: LD_INT 23
30061: PUSH
30062: LD_INT 24
30064: PUSH
30065: EMPTY
30066: LIST
30067: LIST
30068: LIST
30069: LIST
30070: ST_TO_ADDR
30071: GO 30220
30073: LD_INT 51
30075: DOUBLE
30076: EQUAL
30077: IFTRUE 30081
30079: GO 30107
30081: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
30082: LD_ADDR_VAR 0 3
30086: PUSH
30087: LD_INT 21
30089: PUSH
30090: LD_INT 22
30092: PUSH
30093: LD_INT 23
30095: PUSH
30096: LD_INT 24
30098: PUSH
30099: EMPTY
30100: LIST
30101: LIST
30102: LIST
30103: LIST
30104: ST_TO_ADDR
30105: GO 30220
30107: LD_INT 52
30109: DOUBLE
30110: EQUAL
30111: IFTRUE 30115
30113: GO 30141
30115: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
30116: LD_ADDR_VAR 0 3
30120: PUSH
30121: LD_INT 21
30123: PUSH
30124: LD_INT 22
30126: PUSH
30127: LD_INT 23
30129: PUSH
30130: LD_INT 24
30132: PUSH
30133: EMPTY
30134: LIST
30135: LIST
30136: LIST
30137: LIST
30138: ST_TO_ADDR
30139: GO 30220
30141: LD_INT 53
30143: DOUBLE
30144: EQUAL
30145: IFTRUE 30149
30147: GO 30167
30149: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
30150: LD_ADDR_VAR 0 3
30154: PUSH
30155: LD_INT 23
30157: PUSH
30158: LD_INT 24
30160: PUSH
30161: EMPTY
30162: LIST
30163: LIST
30164: ST_TO_ADDR
30165: GO 30220
30167: LD_INT 46
30169: DOUBLE
30170: EQUAL
30171: IFTRUE 30175
30173: GO 30193
30175: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
30176: LD_ADDR_VAR 0 3
30180: PUSH
30181: LD_INT 23
30183: PUSH
30184: LD_INT 24
30186: PUSH
30187: EMPTY
30188: LIST
30189: LIST
30190: ST_TO_ADDR
30191: GO 30220
30193: LD_INT 47
30195: DOUBLE
30196: EQUAL
30197: IFTRUE 30201
30199: GO 30219
30201: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
30202: LD_ADDR_VAR 0 3
30206: PUSH
30207: LD_INT 23
30209: PUSH
30210: LD_INT 24
30212: PUSH
30213: EMPTY
30214: LIST
30215: LIST
30216: ST_TO_ADDR
30217: GO 30220
30219: POP
// result := ( chassis in result ) ;
30220: LD_ADDR_VAR 0 3
30224: PUSH
30225: LD_VAR 0 1
30229: PUSH
30230: LD_VAR 0 3
30234: IN
30235: ST_TO_ADDR
// end ;
30236: LD_VAR 0 3
30240: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
30241: LD_INT 0
30243: PPUSH
30244: PPUSH
30245: PPUSH
30246: PPUSH
30247: PPUSH
30248: PPUSH
30249: PPUSH
// result := array ;
30250: LD_ADDR_VAR 0 5
30254: PUSH
30255: LD_VAR 0 1
30259: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
30260: LD_VAR 0 1
30264: NOT
30265: PUSH
30266: LD_VAR 0 2
30270: NOT
30271: OR
30272: PUSH
30273: LD_VAR 0 3
30277: NOT
30278: OR
30279: PUSH
30280: LD_VAR 0 2
30284: PUSH
30285: LD_VAR 0 1
30289: GREATER
30290: OR
30291: PUSH
30292: LD_VAR 0 3
30296: PUSH
30297: LD_VAR 0 1
30301: GREATER
30302: OR
30303: IFFALSE 30307
// exit ;
30305: GO 30603
// if direction then
30307: LD_VAR 0 4
30311: IFFALSE 30375
// begin d := 1 ;
30313: LD_ADDR_VAR 0 9
30317: PUSH
30318: LD_INT 1
30320: ST_TO_ADDR
// if i_from > i_to then
30321: LD_VAR 0 2
30325: PUSH
30326: LD_VAR 0 3
30330: GREATER
30331: IFFALSE 30357
// length := ( array - i_from ) + i_to else
30333: LD_ADDR_VAR 0 11
30337: PUSH
30338: LD_VAR 0 1
30342: PUSH
30343: LD_VAR 0 2
30347: MINUS
30348: PUSH
30349: LD_VAR 0 3
30353: PLUS
30354: ST_TO_ADDR
30355: GO 30373
// length := i_to - i_from ;
30357: LD_ADDR_VAR 0 11
30361: PUSH
30362: LD_VAR 0 3
30366: PUSH
30367: LD_VAR 0 2
30371: MINUS
30372: ST_TO_ADDR
// end else
30373: GO 30436
// begin d := - 1 ;
30375: LD_ADDR_VAR 0 9
30379: PUSH
30380: LD_INT 1
30382: NEG
30383: ST_TO_ADDR
// if i_from > i_to then
30384: LD_VAR 0 2
30388: PUSH
30389: LD_VAR 0 3
30393: GREATER
30394: IFFALSE 30414
// length := i_from - i_to else
30396: LD_ADDR_VAR 0 11
30400: PUSH
30401: LD_VAR 0 2
30405: PUSH
30406: LD_VAR 0 3
30410: MINUS
30411: ST_TO_ADDR
30412: GO 30436
// length := ( array - i_to ) + i_from ;
30414: LD_ADDR_VAR 0 11
30418: PUSH
30419: LD_VAR 0 1
30423: PUSH
30424: LD_VAR 0 3
30428: MINUS
30429: PUSH
30430: LD_VAR 0 2
30434: PLUS
30435: ST_TO_ADDR
// end ; if not length then
30436: LD_VAR 0 11
30440: NOT
30441: IFFALSE 30445
// exit ;
30443: GO 30603
// tmp := array ;
30445: LD_ADDR_VAR 0 10
30449: PUSH
30450: LD_VAR 0 1
30454: ST_TO_ADDR
// for i = 1 to length do
30455: LD_ADDR_VAR 0 6
30459: PUSH
30460: DOUBLE
30461: LD_INT 1
30463: DEC
30464: ST_TO_ADDR
30465: LD_VAR 0 11
30469: PUSH
30470: FOR_TO
30471: IFFALSE 30591
// begin for j = 1 to array do
30473: LD_ADDR_VAR 0 7
30477: PUSH
30478: DOUBLE
30479: LD_INT 1
30481: DEC
30482: ST_TO_ADDR
30483: LD_VAR 0 1
30487: PUSH
30488: FOR_TO
30489: IFFALSE 30577
// begin k := j + d ;
30491: LD_ADDR_VAR 0 8
30495: PUSH
30496: LD_VAR 0 7
30500: PUSH
30501: LD_VAR 0 9
30505: PLUS
30506: ST_TO_ADDR
// if k > array then
30507: LD_VAR 0 8
30511: PUSH
30512: LD_VAR 0 1
30516: GREATER
30517: IFFALSE 30527
// k := 1 ;
30519: LD_ADDR_VAR 0 8
30523: PUSH
30524: LD_INT 1
30526: ST_TO_ADDR
// if not k then
30527: LD_VAR 0 8
30531: NOT
30532: IFFALSE 30544
// k := array ;
30534: LD_ADDR_VAR 0 8
30538: PUSH
30539: LD_VAR 0 1
30543: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
30544: LD_ADDR_VAR 0 10
30548: PUSH
30549: LD_VAR 0 10
30553: PPUSH
30554: LD_VAR 0 8
30558: PPUSH
30559: LD_VAR 0 1
30563: PUSH
30564: LD_VAR 0 7
30568: ARRAY
30569: PPUSH
30570: CALL_OW 1
30574: ST_TO_ADDR
// end ;
30575: GO 30488
30577: POP
30578: POP
// array := tmp ;
30579: LD_ADDR_VAR 0 1
30583: PUSH
30584: LD_VAR 0 10
30588: ST_TO_ADDR
// end ;
30589: GO 30470
30591: POP
30592: POP
// result := array ;
30593: LD_ADDR_VAR 0 5
30597: PUSH
30598: LD_VAR 0 1
30602: ST_TO_ADDR
// end ;
30603: LD_VAR 0 5
30607: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
30608: LD_INT 0
30610: PPUSH
30611: PPUSH
// result := 0 ;
30612: LD_ADDR_VAR 0 3
30616: PUSH
30617: LD_INT 0
30619: ST_TO_ADDR
// if not array or not value in array then
30620: LD_VAR 0 1
30624: NOT
30625: PUSH
30626: LD_VAR 0 2
30630: PUSH
30631: LD_VAR 0 1
30635: IN
30636: NOT
30637: OR
30638: IFFALSE 30642
// exit ;
30640: GO 30696
// for i = 1 to array do
30642: LD_ADDR_VAR 0 4
30646: PUSH
30647: DOUBLE
30648: LD_INT 1
30650: DEC
30651: ST_TO_ADDR
30652: LD_VAR 0 1
30656: PUSH
30657: FOR_TO
30658: IFFALSE 30694
// if value = array [ i ] then
30660: LD_VAR 0 2
30664: PUSH
30665: LD_VAR 0 1
30669: PUSH
30670: LD_VAR 0 4
30674: ARRAY
30675: EQUAL
30676: IFFALSE 30692
// begin result := i ;
30678: LD_ADDR_VAR 0 3
30682: PUSH
30683: LD_VAR 0 4
30687: ST_TO_ADDR
// exit ;
30688: POP
30689: POP
30690: GO 30696
// end ;
30692: GO 30657
30694: POP
30695: POP
// end ;
30696: LD_VAR 0 3
30700: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
30701: LD_INT 0
30703: PPUSH
// vc_chassis := chassis ;
30704: LD_ADDR_OWVAR 37
30708: PUSH
30709: LD_VAR 0 1
30713: ST_TO_ADDR
// vc_engine := engine ;
30714: LD_ADDR_OWVAR 39
30718: PUSH
30719: LD_VAR 0 2
30723: ST_TO_ADDR
// vc_control := control ;
30724: LD_ADDR_OWVAR 38
30728: PUSH
30729: LD_VAR 0 3
30733: ST_TO_ADDR
// vc_weapon := weapon ;
30734: LD_ADDR_OWVAR 40
30738: PUSH
30739: LD_VAR 0 4
30743: ST_TO_ADDR
// vc_fuel_battery := fuel ;
30744: LD_ADDR_OWVAR 41
30748: PUSH
30749: LD_VAR 0 5
30753: ST_TO_ADDR
// end ;
30754: LD_VAR 0 6
30758: RET
// export function WantPlant ( unit ) ; var task ; begin
30759: LD_INT 0
30761: PPUSH
30762: PPUSH
// result := false ;
30763: LD_ADDR_VAR 0 2
30767: PUSH
30768: LD_INT 0
30770: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
30771: LD_ADDR_VAR 0 3
30775: PUSH
30776: LD_VAR 0 1
30780: PPUSH
30781: CALL_OW 437
30785: ST_TO_ADDR
// if task then
30786: LD_VAR 0 3
30790: IFFALSE 30818
// if task [ 1 ] [ 1 ] = p then
30792: LD_VAR 0 3
30796: PUSH
30797: LD_INT 1
30799: ARRAY
30800: PUSH
30801: LD_INT 1
30803: ARRAY
30804: PUSH
30805: LD_STRING p
30807: EQUAL
30808: IFFALSE 30818
// result := true ;
30810: LD_ADDR_VAR 0 2
30814: PUSH
30815: LD_INT 1
30817: ST_TO_ADDR
// end ;
30818: LD_VAR 0 2
30822: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
30823: LD_INT 0
30825: PPUSH
30826: PPUSH
30827: PPUSH
30828: PPUSH
// if pos < 1 then
30829: LD_VAR 0 2
30833: PUSH
30834: LD_INT 1
30836: LESS
30837: IFFALSE 30841
// exit ;
30839: GO 31144
// if pos = 1 then
30841: LD_VAR 0 2
30845: PUSH
30846: LD_INT 1
30848: EQUAL
30849: IFFALSE 30882
// result := Replace ( arr , pos [ 1 ] , value ) else
30851: LD_ADDR_VAR 0 4
30855: PUSH
30856: LD_VAR 0 1
30860: PPUSH
30861: LD_VAR 0 2
30865: PUSH
30866: LD_INT 1
30868: ARRAY
30869: PPUSH
30870: LD_VAR 0 3
30874: PPUSH
30875: CALL_OW 1
30879: ST_TO_ADDR
30880: GO 31144
// begin tmp := arr ;
30882: LD_ADDR_VAR 0 6
30886: PUSH
30887: LD_VAR 0 1
30891: ST_TO_ADDR
// s_arr := [ tmp ] ;
30892: LD_ADDR_VAR 0 7
30896: PUSH
30897: LD_VAR 0 6
30901: PUSH
30902: EMPTY
30903: LIST
30904: ST_TO_ADDR
// for i = 1 to pos - 1 do
30905: LD_ADDR_VAR 0 5
30909: PUSH
30910: DOUBLE
30911: LD_INT 1
30913: DEC
30914: ST_TO_ADDR
30915: LD_VAR 0 2
30919: PUSH
30920: LD_INT 1
30922: MINUS
30923: PUSH
30924: FOR_TO
30925: IFFALSE 30970
// begin tmp := tmp [ pos [ i ] ] ;
30927: LD_ADDR_VAR 0 6
30931: PUSH
30932: LD_VAR 0 6
30936: PUSH
30937: LD_VAR 0 2
30941: PUSH
30942: LD_VAR 0 5
30946: ARRAY
30947: ARRAY
30948: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
30949: LD_ADDR_VAR 0 7
30953: PUSH
30954: LD_VAR 0 7
30958: PUSH
30959: LD_VAR 0 6
30963: PUSH
30964: EMPTY
30965: LIST
30966: ADD
30967: ST_TO_ADDR
// end ;
30968: GO 30924
30970: POP
30971: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
30972: LD_ADDR_VAR 0 6
30976: PUSH
30977: LD_VAR 0 6
30981: PPUSH
30982: LD_VAR 0 2
30986: PUSH
30987: LD_VAR 0 2
30991: ARRAY
30992: PPUSH
30993: LD_VAR 0 3
30997: PPUSH
30998: CALL_OW 1
31002: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
31003: LD_ADDR_VAR 0 7
31007: PUSH
31008: LD_VAR 0 7
31012: PPUSH
31013: LD_VAR 0 7
31017: PPUSH
31018: LD_VAR 0 6
31022: PPUSH
31023: CALL_OW 1
31027: ST_TO_ADDR
// for i = s_arr downto 2 do
31028: LD_ADDR_VAR 0 5
31032: PUSH
31033: DOUBLE
31034: LD_VAR 0 7
31038: INC
31039: ST_TO_ADDR
31040: LD_INT 2
31042: PUSH
31043: FOR_DOWNTO
31044: IFFALSE 31128
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
31046: LD_ADDR_VAR 0 6
31050: PUSH
31051: LD_VAR 0 7
31055: PUSH
31056: LD_VAR 0 5
31060: PUSH
31061: LD_INT 1
31063: MINUS
31064: ARRAY
31065: PPUSH
31066: LD_VAR 0 2
31070: PUSH
31071: LD_VAR 0 5
31075: PUSH
31076: LD_INT 1
31078: MINUS
31079: ARRAY
31080: PPUSH
31081: LD_VAR 0 7
31085: PUSH
31086: LD_VAR 0 5
31090: ARRAY
31091: PPUSH
31092: CALL_OW 1
31096: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
31097: LD_ADDR_VAR 0 7
31101: PUSH
31102: LD_VAR 0 7
31106: PPUSH
31107: LD_VAR 0 5
31111: PUSH
31112: LD_INT 1
31114: MINUS
31115: PPUSH
31116: LD_VAR 0 6
31120: PPUSH
31121: CALL_OW 1
31125: ST_TO_ADDR
// end ;
31126: GO 31043
31128: POP
31129: POP
// result := s_arr [ 1 ] ;
31130: LD_ADDR_VAR 0 4
31134: PUSH
31135: LD_VAR 0 7
31139: PUSH
31140: LD_INT 1
31142: ARRAY
31143: ST_TO_ADDR
// end ; end ;
31144: LD_VAR 0 4
31148: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
31149: LD_INT 0
31151: PPUSH
31152: PPUSH
// if not list then
31153: LD_VAR 0 1
31157: NOT
31158: IFFALSE 31162
// exit ;
31160: GO 31253
// i := list [ pos1 ] ;
31162: LD_ADDR_VAR 0 5
31166: PUSH
31167: LD_VAR 0 1
31171: PUSH
31172: LD_VAR 0 2
31176: ARRAY
31177: ST_TO_ADDR
// if not i then
31178: LD_VAR 0 5
31182: NOT
31183: IFFALSE 31187
// exit ;
31185: GO 31253
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
31187: LD_ADDR_VAR 0 1
31191: PUSH
31192: LD_VAR 0 1
31196: PPUSH
31197: LD_VAR 0 2
31201: PPUSH
31202: LD_VAR 0 1
31206: PUSH
31207: LD_VAR 0 3
31211: ARRAY
31212: PPUSH
31213: CALL_OW 1
31217: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
31218: LD_ADDR_VAR 0 1
31222: PUSH
31223: LD_VAR 0 1
31227: PPUSH
31228: LD_VAR 0 3
31232: PPUSH
31233: LD_VAR 0 5
31237: PPUSH
31238: CALL_OW 1
31242: ST_TO_ADDR
// result := list ;
31243: LD_ADDR_VAR 0 4
31247: PUSH
31248: LD_VAR 0 1
31252: ST_TO_ADDR
// end ;
31253: LD_VAR 0 4
31257: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
31258: LD_INT 0
31260: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
31261: LD_ADDR_VAR 0 5
31265: PUSH
31266: LD_VAR 0 1
31270: PPUSH
31271: CALL_OW 250
31275: PPUSH
31276: LD_VAR 0 1
31280: PPUSH
31281: CALL_OW 251
31285: PPUSH
31286: LD_VAR 0 2
31290: PPUSH
31291: LD_VAR 0 3
31295: PPUSH
31296: LD_VAR 0 4
31300: PPUSH
31301: CALL 31311 0 5
31305: ST_TO_ADDR
// end ;
31306: LD_VAR 0 5
31310: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
31311: LD_INT 0
31313: PPUSH
31314: PPUSH
31315: PPUSH
31316: PPUSH
// if not list then
31317: LD_VAR 0 3
31321: NOT
31322: IFFALSE 31326
// exit ;
31324: GO 31714
// result := [ ] ;
31326: LD_ADDR_VAR 0 6
31330: PUSH
31331: EMPTY
31332: ST_TO_ADDR
// for i in list do
31333: LD_ADDR_VAR 0 7
31337: PUSH
31338: LD_VAR 0 3
31342: PUSH
31343: FOR_IN
31344: IFFALSE 31546
// begin tmp := GetDistUnitXY ( i , x , y ) ;
31346: LD_ADDR_VAR 0 9
31350: PUSH
31351: LD_VAR 0 7
31355: PPUSH
31356: LD_VAR 0 1
31360: PPUSH
31361: LD_VAR 0 2
31365: PPUSH
31366: CALL_OW 297
31370: ST_TO_ADDR
// if not result then
31371: LD_VAR 0 6
31375: NOT
31376: IFFALSE 31402
// result := [ [ i , tmp ] ] else
31378: LD_ADDR_VAR 0 6
31382: PUSH
31383: LD_VAR 0 7
31387: PUSH
31388: LD_VAR 0 9
31392: PUSH
31393: EMPTY
31394: LIST
31395: LIST
31396: PUSH
31397: EMPTY
31398: LIST
31399: ST_TO_ADDR
31400: GO 31544
// begin if result [ result ] [ 2 ] < tmp then
31402: LD_VAR 0 6
31406: PUSH
31407: LD_VAR 0 6
31411: ARRAY
31412: PUSH
31413: LD_INT 2
31415: ARRAY
31416: PUSH
31417: LD_VAR 0 9
31421: LESS
31422: IFFALSE 31464
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
31424: LD_ADDR_VAR 0 6
31428: PUSH
31429: LD_VAR 0 6
31433: PPUSH
31434: LD_VAR 0 6
31438: PUSH
31439: LD_INT 1
31441: PLUS
31442: PPUSH
31443: LD_VAR 0 7
31447: PUSH
31448: LD_VAR 0 9
31452: PUSH
31453: EMPTY
31454: LIST
31455: LIST
31456: PPUSH
31457: CALL_OW 2
31461: ST_TO_ADDR
31462: GO 31544
// for j = 1 to result do
31464: LD_ADDR_VAR 0 8
31468: PUSH
31469: DOUBLE
31470: LD_INT 1
31472: DEC
31473: ST_TO_ADDR
31474: LD_VAR 0 6
31478: PUSH
31479: FOR_TO
31480: IFFALSE 31542
// begin if tmp < result [ j ] [ 2 ] then
31482: LD_VAR 0 9
31486: PUSH
31487: LD_VAR 0 6
31491: PUSH
31492: LD_VAR 0 8
31496: ARRAY
31497: PUSH
31498: LD_INT 2
31500: ARRAY
31501: LESS
31502: IFFALSE 31540
// begin result := Insert ( result , j , [ i , tmp ] ) ;
31504: LD_ADDR_VAR 0 6
31508: PUSH
31509: LD_VAR 0 6
31513: PPUSH
31514: LD_VAR 0 8
31518: PPUSH
31519: LD_VAR 0 7
31523: PUSH
31524: LD_VAR 0 9
31528: PUSH
31529: EMPTY
31530: LIST
31531: LIST
31532: PPUSH
31533: CALL_OW 2
31537: ST_TO_ADDR
// break ;
31538: GO 31542
// end ; end ;
31540: GO 31479
31542: POP
31543: POP
// end ; end ;
31544: GO 31343
31546: POP
31547: POP
// if result and not asc then
31548: LD_VAR 0 6
31552: PUSH
31553: LD_VAR 0 4
31557: NOT
31558: AND
31559: IFFALSE 31634
// begin tmp := result ;
31561: LD_ADDR_VAR 0 9
31565: PUSH
31566: LD_VAR 0 6
31570: ST_TO_ADDR
// for i = tmp downto 1 do
31571: LD_ADDR_VAR 0 7
31575: PUSH
31576: DOUBLE
31577: LD_VAR 0 9
31581: INC
31582: ST_TO_ADDR
31583: LD_INT 1
31585: PUSH
31586: FOR_DOWNTO
31587: IFFALSE 31632
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
31589: LD_ADDR_VAR 0 6
31593: PUSH
31594: LD_VAR 0 6
31598: PPUSH
31599: LD_VAR 0 9
31603: PUSH
31604: LD_VAR 0 7
31608: MINUS
31609: PUSH
31610: LD_INT 1
31612: PLUS
31613: PPUSH
31614: LD_VAR 0 9
31618: PUSH
31619: LD_VAR 0 7
31623: ARRAY
31624: PPUSH
31625: CALL_OW 1
31629: ST_TO_ADDR
31630: GO 31586
31632: POP
31633: POP
// end ; tmp := [ ] ;
31634: LD_ADDR_VAR 0 9
31638: PUSH
31639: EMPTY
31640: ST_TO_ADDR
// if mode then
31641: LD_VAR 0 5
31645: IFFALSE 31714
// begin for i = 1 to result do
31647: LD_ADDR_VAR 0 7
31651: PUSH
31652: DOUBLE
31653: LD_INT 1
31655: DEC
31656: ST_TO_ADDR
31657: LD_VAR 0 6
31661: PUSH
31662: FOR_TO
31663: IFFALSE 31702
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
31665: LD_ADDR_VAR 0 9
31669: PUSH
31670: LD_VAR 0 9
31674: PPUSH
31675: LD_VAR 0 7
31679: PPUSH
31680: LD_VAR 0 6
31684: PUSH
31685: LD_VAR 0 7
31689: ARRAY
31690: PUSH
31691: LD_INT 1
31693: ARRAY
31694: PPUSH
31695: CALL_OW 1
31699: ST_TO_ADDR
31700: GO 31662
31702: POP
31703: POP
// result := tmp ;
31704: LD_ADDR_VAR 0 6
31708: PUSH
31709: LD_VAR 0 9
31713: ST_TO_ADDR
// end ; end ;
31714: LD_VAR 0 6
31718: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
31719: LD_INT 0
31721: PPUSH
31722: PPUSH
31723: PPUSH
31724: PPUSH
31725: PPUSH
31726: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
31727: LD_ADDR_VAR 0 5
31731: PUSH
31732: LD_INT 0
31734: PUSH
31735: LD_INT 0
31737: PUSH
31738: LD_INT 0
31740: PUSH
31741: EMPTY
31742: PUSH
31743: EMPTY
31744: LIST
31745: LIST
31746: LIST
31747: LIST
31748: ST_TO_ADDR
// if not x or not y then
31749: LD_VAR 0 2
31753: NOT
31754: PUSH
31755: LD_VAR 0 3
31759: NOT
31760: OR
31761: IFFALSE 31765
// exit ;
31763: GO 33417
// if not range then
31765: LD_VAR 0 4
31769: NOT
31770: IFFALSE 31780
// range := 10 ;
31772: LD_ADDR_VAR 0 4
31776: PUSH
31777: LD_INT 10
31779: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
31780: LD_ADDR_VAR 0 8
31784: PUSH
31785: LD_INT 81
31787: PUSH
31788: LD_VAR 0 1
31792: PUSH
31793: EMPTY
31794: LIST
31795: LIST
31796: PUSH
31797: LD_INT 92
31799: PUSH
31800: LD_VAR 0 2
31804: PUSH
31805: LD_VAR 0 3
31809: PUSH
31810: LD_VAR 0 4
31814: PUSH
31815: EMPTY
31816: LIST
31817: LIST
31818: LIST
31819: LIST
31820: PUSH
31821: LD_INT 3
31823: PUSH
31824: LD_INT 21
31826: PUSH
31827: LD_INT 3
31829: PUSH
31830: EMPTY
31831: LIST
31832: LIST
31833: PUSH
31834: EMPTY
31835: LIST
31836: LIST
31837: PUSH
31838: EMPTY
31839: LIST
31840: LIST
31841: LIST
31842: PPUSH
31843: CALL_OW 69
31847: ST_TO_ADDR
// if not tmp then
31848: LD_VAR 0 8
31852: NOT
31853: IFFALSE 31857
// exit ;
31855: GO 33417
// for i in tmp do
31857: LD_ADDR_VAR 0 6
31861: PUSH
31862: LD_VAR 0 8
31866: PUSH
31867: FOR_IN
31868: IFFALSE 33392
// begin points := [ 0 , 0 , 0 ] ;
31870: LD_ADDR_VAR 0 9
31874: PUSH
31875: LD_INT 0
31877: PUSH
31878: LD_INT 0
31880: PUSH
31881: LD_INT 0
31883: PUSH
31884: EMPTY
31885: LIST
31886: LIST
31887: LIST
31888: ST_TO_ADDR
// bpoints := 1 ;
31889: LD_ADDR_VAR 0 10
31893: PUSH
31894: LD_INT 1
31896: ST_TO_ADDR
// case GetType ( i ) of unit_human :
31897: LD_VAR 0 6
31901: PPUSH
31902: CALL_OW 247
31906: PUSH
31907: LD_INT 1
31909: DOUBLE
31910: EQUAL
31911: IFTRUE 31915
31913: GO 32493
31915: POP
// begin if GetClass ( i ) = 1 then
31916: LD_VAR 0 6
31920: PPUSH
31921: CALL_OW 257
31925: PUSH
31926: LD_INT 1
31928: EQUAL
31929: IFFALSE 31950
// points := [ 10 , 5 , 3 ] ;
31931: LD_ADDR_VAR 0 9
31935: PUSH
31936: LD_INT 10
31938: PUSH
31939: LD_INT 5
31941: PUSH
31942: LD_INT 3
31944: PUSH
31945: EMPTY
31946: LIST
31947: LIST
31948: LIST
31949: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
31950: LD_VAR 0 6
31954: PPUSH
31955: CALL_OW 257
31959: PUSH
31960: LD_INT 2
31962: PUSH
31963: LD_INT 3
31965: PUSH
31966: LD_INT 4
31968: PUSH
31969: EMPTY
31970: LIST
31971: LIST
31972: LIST
31973: IN
31974: IFFALSE 31995
// points := [ 3 , 2 , 1 ] ;
31976: LD_ADDR_VAR 0 9
31980: PUSH
31981: LD_INT 3
31983: PUSH
31984: LD_INT 2
31986: PUSH
31987: LD_INT 1
31989: PUSH
31990: EMPTY
31991: LIST
31992: LIST
31993: LIST
31994: ST_TO_ADDR
// if GetClass ( i ) = 5 then
31995: LD_VAR 0 6
31999: PPUSH
32000: CALL_OW 257
32004: PUSH
32005: LD_INT 5
32007: EQUAL
32008: IFFALSE 32029
// points := [ 130 , 5 , 2 ] ;
32010: LD_ADDR_VAR 0 9
32014: PUSH
32015: LD_INT 130
32017: PUSH
32018: LD_INT 5
32020: PUSH
32021: LD_INT 2
32023: PUSH
32024: EMPTY
32025: LIST
32026: LIST
32027: LIST
32028: ST_TO_ADDR
// if GetClass ( i ) = 8 then
32029: LD_VAR 0 6
32033: PPUSH
32034: CALL_OW 257
32038: PUSH
32039: LD_INT 8
32041: EQUAL
32042: IFFALSE 32063
// points := [ 35 , 35 , 30 ] ;
32044: LD_ADDR_VAR 0 9
32048: PUSH
32049: LD_INT 35
32051: PUSH
32052: LD_INT 35
32054: PUSH
32055: LD_INT 30
32057: PUSH
32058: EMPTY
32059: LIST
32060: LIST
32061: LIST
32062: ST_TO_ADDR
// if GetClass ( i ) = 9 then
32063: LD_VAR 0 6
32067: PPUSH
32068: CALL_OW 257
32072: PUSH
32073: LD_INT 9
32075: EQUAL
32076: IFFALSE 32097
// points := [ 20 , 55 , 40 ] ;
32078: LD_ADDR_VAR 0 9
32082: PUSH
32083: LD_INT 20
32085: PUSH
32086: LD_INT 55
32088: PUSH
32089: LD_INT 40
32091: PUSH
32092: EMPTY
32093: LIST
32094: LIST
32095: LIST
32096: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
32097: LD_VAR 0 6
32101: PPUSH
32102: CALL_OW 257
32106: PUSH
32107: LD_INT 12
32109: PUSH
32110: LD_INT 16
32112: PUSH
32113: EMPTY
32114: LIST
32115: LIST
32116: IN
32117: IFFALSE 32138
// points := [ 5 , 3 , 2 ] ;
32119: LD_ADDR_VAR 0 9
32123: PUSH
32124: LD_INT 5
32126: PUSH
32127: LD_INT 3
32129: PUSH
32130: LD_INT 2
32132: PUSH
32133: EMPTY
32134: LIST
32135: LIST
32136: LIST
32137: ST_TO_ADDR
// if GetClass ( i ) = 17 then
32138: LD_VAR 0 6
32142: PPUSH
32143: CALL_OW 257
32147: PUSH
32148: LD_INT 17
32150: EQUAL
32151: IFFALSE 32172
// points := [ 100 , 50 , 75 ] ;
32153: LD_ADDR_VAR 0 9
32157: PUSH
32158: LD_INT 100
32160: PUSH
32161: LD_INT 50
32163: PUSH
32164: LD_INT 75
32166: PUSH
32167: EMPTY
32168: LIST
32169: LIST
32170: LIST
32171: ST_TO_ADDR
// if GetClass ( i ) = 15 then
32172: LD_VAR 0 6
32176: PPUSH
32177: CALL_OW 257
32181: PUSH
32182: LD_INT 15
32184: EQUAL
32185: IFFALSE 32206
// points := [ 10 , 5 , 3 ] ;
32187: LD_ADDR_VAR 0 9
32191: PUSH
32192: LD_INT 10
32194: PUSH
32195: LD_INT 5
32197: PUSH
32198: LD_INT 3
32200: PUSH
32201: EMPTY
32202: LIST
32203: LIST
32204: LIST
32205: ST_TO_ADDR
// if GetClass ( i ) = 14 then
32206: LD_VAR 0 6
32210: PPUSH
32211: CALL_OW 257
32215: PUSH
32216: LD_INT 14
32218: EQUAL
32219: IFFALSE 32240
// points := [ 10 , 0 , 0 ] ;
32221: LD_ADDR_VAR 0 9
32225: PUSH
32226: LD_INT 10
32228: PUSH
32229: LD_INT 0
32231: PUSH
32232: LD_INT 0
32234: PUSH
32235: EMPTY
32236: LIST
32237: LIST
32238: LIST
32239: ST_TO_ADDR
// if GetClass ( i ) = 11 then
32240: LD_VAR 0 6
32244: PPUSH
32245: CALL_OW 257
32249: PUSH
32250: LD_INT 11
32252: EQUAL
32253: IFFALSE 32274
// points := [ 30 , 10 , 5 ] ;
32255: LD_ADDR_VAR 0 9
32259: PUSH
32260: LD_INT 30
32262: PUSH
32263: LD_INT 10
32265: PUSH
32266: LD_INT 5
32268: PUSH
32269: EMPTY
32270: LIST
32271: LIST
32272: LIST
32273: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
32274: LD_VAR 0 1
32278: PPUSH
32279: LD_INT 5
32281: PPUSH
32282: CALL_OW 321
32286: PUSH
32287: LD_INT 2
32289: EQUAL
32290: IFFALSE 32307
// bpoints := bpoints * 1.8 ;
32292: LD_ADDR_VAR 0 10
32296: PUSH
32297: LD_VAR 0 10
32301: PUSH
32302: LD_REAL  1.80000000000000E+0000
32305: MUL
32306: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
32307: LD_VAR 0 6
32311: PPUSH
32312: CALL_OW 257
32316: PUSH
32317: LD_INT 1
32319: PUSH
32320: LD_INT 2
32322: PUSH
32323: LD_INT 3
32325: PUSH
32326: LD_INT 4
32328: PUSH
32329: EMPTY
32330: LIST
32331: LIST
32332: LIST
32333: LIST
32334: IN
32335: PUSH
32336: LD_VAR 0 1
32340: PPUSH
32341: LD_INT 51
32343: PPUSH
32344: CALL_OW 321
32348: PUSH
32349: LD_INT 2
32351: EQUAL
32352: AND
32353: IFFALSE 32370
// bpoints := bpoints * 1.2 ;
32355: LD_ADDR_VAR 0 10
32359: PUSH
32360: LD_VAR 0 10
32364: PUSH
32365: LD_REAL  1.20000000000000E+0000
32368: MUL
32369: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
32370: LD_VAR 0 6
32374: PPUSH
32375: CALL_OW 257
32379: PUSH
32380: LD_INT 5
32382: PUSH
32383: LD_INT 7
32385: PUSH
32386: LD_INT 9
32388: PUSH
32389: EMPTY
32390: LIST
32391: LIST
32392: LIST
32393: IN
32394: PUSH
32395: LD_VAR 0 1
32399: PPUSH
32400: LD_INT 52
32402: PPUSH
32403: CALL_OW 321
32407: PUSH
32408: LD_INT 2
32410: EQUAL
32411: AND
32412: IFFALSE 32429
// bpoints := bpoints * 1.5 ;
32414: LD_ADDR_VAR 0 10
32418: PUSH
32419: LD_VAR 0 10
32423: PUSH
32424: LD_REAL  1.50000000000000E+0000
32427: MUL
32428: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
32429: LD_VAR 0 1
32433: PPUSH
32434: LD_INT 66
32436: PPUSH
32437: CALL_OW 321
32441: PUSH
32442: LD_INT 2
32444: EQUAL
32445: IFFALSE 32462
// bpoints := bpoints * 1.1 ;
32447: LD_ADDR_VAR 0 10
32451: PUSH
32452: LD_VAR 0 10
32456: PUSH
32457: LD_REAL  1.10000000000000E+0000
32460: MUL
32461: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
32462: LD_ADDR_VAR 0 10
32466: PUSH
32467: LD_VAR 0 10
32471: PUSH
32472: LD_VAR 0 6
32476: PPUSH
32477: LD_INT 1
32479: PPUSH
32480: CALL_OW 259
32484: PUSH
32485: LD_REAL  1.15000000000000E+0000
32488: MUL
32489: MUL
32490: ST_TO_ADDR
// end ; unit_vehicle :
32491: GO 33321
32493: LD_INT 2
32495: DOUBLE
32496: EQUAL
32497: IFTRUE 32501
32499: GO 33309
32501: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
32502: LD_VAR 0 6
32506: PPUSH
32507: CALL_OW 264
32511: PUSH
32512: LD_INT 2
32514: PUSH
32515: LD_INT 42
32517: PUSH
32518: LD_INT 24
32520: PUSH
32521: EMPTY
32522: LIST
32523: LIST
32524: LIST
32525: IN
32526: IFFALSE 32547
// points := [ 25 , 5 , 3 ] ;
32528: LD_ADDR_VAR 0 9
32532: PUSH
32533: LD_INT 25
32535: PUSH
32536: LD_INT 5
32538: PUSH
32539: LD_INT 3
32541: PUSH
32542: EMPTY
32543: LIST
32544: LIST
32545: LIST
32546: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
32547: LD_VAR 0 6
32551: PPUSH
32552: CALL_OW 264
32556: PUSH
32557: LD_INT 4
32559: PUSH
32560: LD_INT 43
32562: PUSH
32563: LD_INT 25
32565: PUSH
32566: EMPTY
32567: LIST
32568: LIST
32569: LIST
32570: IN
32571: IFFALSE 32592
// points := [ 40 , 15 , 5 ] ;
32573: LD_ADDR_VAR 0 9
32577: PUSH
32578: LD_INT 40
32580: PUSH
32581: LD_INT 15
32583: PUSH
32584: LD_INT 5
32586: PUSH
32587: EMPTY
32588: LIST
32589: LIST
32590: LIST
32591: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
32592: LD_VAR 0 6
32596: PPUSH
32597: CALL_OW 264
32601: PUSH
32602: LD_INT 3
32604: PUSH
32605: LD_INT 23
32607: PUSH
32608: EMPTY
32609: LIST
32610: LIST
32611: IN
32612: IFFALSE 32633
// points := [ 7 , 25 , 8 ] ;
32614: LD_ADDR_VAR 0 9
32618: PUSH
32619: LD_INT 7
32621: PUSH
32622: LD_INT 25
32624: PUSH
32625: LD_INT 8
32627: PUSH
32628: EMPTY
32629: LIST
32630: LIST
32631: LIST
32632: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
32633: LD_VAR 0 6
32637: PPUSH
32638: CALL_OW 264
32642: PUSH
32643: LD_INT 5
32645: PUSH
32646: LD_INT 27
32648: PUSH
32649: LD_INT 44
32651: PUSH
32652: EMPTY
32653: LIST
32654: LIST
32655: LIST
32656: IN
32657: IFFALSE 32678
// points := [ 14 , 50 , 16 ] ;
32659: LD_ADDR_VAR 0 9
32663: PUSH
32664: LD_INT 14
32666: PUSH
32667: LD_INT 50
32669: PUSH
32670: LD_INT 16
32672: PUSH
32673: EMPTY
32674: LIST
32675: LIST
32676: LIST
32677: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
32678: LD_VAR 0 6
32682: PPUSH
32683: CALL_OW 264
32687: PUSH
32688: LD_INT 6
32690: PUSH
32691: LD_INT 46
32693: PUSH
32694: EMPTY
32695: LIST
32696: LIST
32697: IN
32698: IFFALSE 32719
// points := [ 32 , 120 , 70 ] ;
32700: LD_ADDR_VAR 0 9
32704: PUSH
32705: LD_INT 32
32707: PUSH
32708: LD_INT 120
32710: PUSH
32711: LD_INT 70
32713: PUSH
32714: EMPTY
32715: LIST
32716: LIST
32717: LIST
32718: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
32719: LD_VAR 0 6
32723: PPUSH
32724: CALL_OW 264
32728: PUSH
32729: LD_INT 7
32731: PUSH
32732: LD_INT 28
32734: PUSH
32735: LD_INT 45
32737: PUSH
32738: LD_EXP 34
32742: PUSH
32743: EMPTY
32744: LIST
32745: LIST
32746: LIST
32747: LIST
32748: IN
32749: IFFALSE 32770
// points := [ 35 , 20 , 45 ] ;
32751: LD_ADDR_VAR 0 9
32755: PUSH
32756: LD_INT 35
32758: PUSH
32759: LD_INT 20
32761: PUSH
32762: LD_INT 45
32764: PUSH
32765: EMPTY
32766: LIST
32767: LIST
32768: LIST
32769: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
32770: LD_VAR 0 6
32774: PPUSH
32775: CALL_OW 264
32779: PUSH
32780: LD_INT 47
32782: PUSH
32783: EMPTY
32784: LIST
32785: IN
32786: IFFALSE 32807
// points := [ 67 , 45 , 75 ] ;
32788: LD_ADDR_VAR 0 9
32792: PUSH
32793: LD_INT 67
32795: PUSH
32796: LD_INT 45
32798: PUSH
32799: LD_INT 75
32801: PUSH
32802: EMPTY
32803: LIST
32804: LIST
32805: LIST
32806: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
32807: LD_VAR 0 6
32811: PPUSH
32812: CALL_OW 264
32816: PUSH
32817: LD_INT 26
32819: PUSH
32820: EMPTY
32821: LIST
32822: IN
32823: IFFALSE 32844
// points := [ 120 , 30 , 80 ] ;
32825: LD_ADDR_VAR 0 9
32829: PUSH
32830: LD_INT 120
32832: PUSH
32833: LD_INT 30
32835: PUSH
32836: LD_INT 80
32838: PUSH
32839: EMPTY
32840: LIST
32841: LIST
32842: LIST
32843: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
32844: LD_VAR 0 6
32848: PPUSH
32849: CALL_OW 264
32853: PUSH
32854: LD_INT 22
32856: PUSH
32857: EMPTY
32858: LIST
32859: IN
32860: IFFALSE 32881
// points := [ 40 , 1 , 1 ] ;
32862: LD_ADDR_VAR 0 9
32866: PUSH
32867: LD_INT 40
32869: PUSH
32870: LD_INT 1
32872: PUSH
32873: LD_INT 1
32875: PUSH
32876: EMPTY
32877: LIST
32878: LIST
32879: LIST
32880: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
32881: LD_VAR 0 6
32885: PPUSH
32886: CALL_OW 264
32890: PUSH
32891: LD_INT 29
32893: PUSH
32894: EMPTY
32895: LIST
32896: IN
32897: IFFALSE 32918
// points := [ 70 , 200 , 400 ] ;
32899: LD_ADDR_VAR 0 9
32903: PUSH
32904: LD_INT 70
32906: PUSH
32907: LD_INT 200
32909: PUSH
32910: LD_INT 400
32912: PUSH
32913: EMPTY
32914: LIST
32915: LIST
32916: LIST
32917: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
32918: LD_VAR 0 6
32922: PPUSH
32923: CALL_OW 264
32927: PUSH
32928: LD_INT 14
32930: PUSH
32931: LD_INT 53
32933: PUSH
32934: EMPTY
32935: LIST
32936: LIST
32937: IN
32938: IFFALSE 32959
// points := [ 40 , 10 , 20 ] ;
32940: LD_ADDR_VAR 0 9
32944: PUSH
32945: LD_INT 40
32947: PUSH
32948: LD_INT 10
32950: PUSH
32951: LD_INT 20
32953: PUSH
32954: EMPTY
32955: LIST
32956: LIST
32957: LIST
32958: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
32959: LD_VAR 0 6
32963: PPUSH
32964: CALL_OW 264
32968: PUSH
32969: LD_INT 9
32971: PUSH
32972: EMPTY
32973: LIST
32974: IN
32975: IFFALSE 32996
// points := [ 5 , 70 , 20 ] ;
32977: LD_ADDR_VAR 0 9
32981: PUSH
32982: LD_INT 5
32984: PUSH
32985: LD_INT 70
32987: PUSH
32988: LD_INT 20
32990: PUSH
32991: EMPTY
32992: LIST
32993: LIST
32994: LIST
32995: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
32996: LD_VAR 0 6
33000: PPUSH
33001: CALL_OW 264
33005: PUSH
33006: LD_INT 10
33008: PUSH
33009: EMPTY
33010: LIST
33011: IN
33012: IFFALSE 33033
// points := [ 35 , 110 , 70 ] ;
33014: LD_ADDR_VAR 0 9
33018: PUSH
33019: LD_INT 35
33021: PUSH
33022: LD_INT 110
33024: PUSH
33025: LD_INT 70
33027: PUSH
33028: EMPTY
33029: LIST
33030: LIST
33031: LIST
33032: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
33033: LD_VAR 0 6
33037: PPUSH
33038: CALL_OW 265
33042: PUSH
33043: LD_INT 25
33045: EQUAL
33046: IFFALSE 33067
// points := [ 80 , 65 , 100 ] ;
33048: LD_ADDR_VAR 0 9
33052: PUSH
33053: LD_INT 80
33055: PUSH
33056: LD_INT 65
33058: PUSH
33059: LD_INT 100
33061: PUSH
33062: EMPTY
33063: LIST
33064: LIST
33065: LIST
33066: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
33067: LD_VAR 0 6
33071: PPUSH
33072: CALL_OW 263
33076: PUSH
33077: LD_INT 1
33079: EQUAL
33080: IFFALSE 33115
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
33082: LD_ADDR_VAR 0 10
33086: PUSH
33087: LD_VAR 0 10
33091: PUSH
33092: LD_VAR 0 6
33096: PPUSH
33097: CALL_OW 311
33101: PPUSH
33102: LD_INT 3
33104: PPUSH
33105: CALL_OW 259
33109: PUSH
33110: LD_INT 4
33112: MUL
33113: MUL
33114: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
33115: LD_VAR 0 6
33119: PPUSH
33120: CALL_OW 263
33124: PUSH
33125: LD_INT 2
33127: EQUAL
33128: IFFALSE 33179
// begin j := IsControledBy ( i ) ;
33130: LD_ADDR_VAR 0 7
33134: PUSH
33135: LD_VAR 0 6
33139: PPUSH
33140: CALL_OW 312
33144: ST_TO_ADDR
// if j then
33145: LD_VAR 0 7
33149: IFFALSE 33179
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
33151: LD_ADDR_VAR 0 10
33155: PUSH
33156: LD_VAR 0 10
33160: PUSH
33161: LD_VAR 0 7
33165: PPUSH
33166: LD_INT 3
33168: PPUSH
33169: CALL_OW 259
33173: PUSH
33174: LD_INT 3
33176: MUL
33177: MUL
33178: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
33179: LD_VAR 0 6
33183: PPUSH
33184: CALL_OW 264
33188: PUSH
33189: LD_INT 5
33191: PUSH
33192: LD_INT 6
33194: PUSH
33195: LD_INT 46
33197: PUSH
33198: LD_INT 44
33200: PUSH
33201: LD_INT 47
33203: PUSH
33204: LD_INT 45
33206: PUSH
33207: LD_INT 28
33209: PUSH
33210: LD_INT 7
33212: PUSH
33213: LD_INT 27
33215: PUSH
33216: LD_INT 29
33218: PUSH
33219: EMPTY
33220: LIST
33221: LIST
33222: LIST
33223: LIST
33224: LIST
33225: LIST
33226: LIST
33227: LIST
33228: LIST
33229: LIST
33230: IN
33231: PUSH
33232: LD_VAR 0 1
33236: PPUSH
33237: LD_INT 52
33239: PPUSH
33240: CALL_OW 321
33244: PUSH
33245: LD_INT 2
33247: EQUAL
33248: AND
33249: IFFALSE 33266
// bpoints := bpoints * 1.2 ;
33251: LD_ADDR_VAR 0 10
33255: PUSH
33256: LD_VAR 0 10
33260: PUSH
33261: LD_REAL  1.20000000000000E+0000
33264: MUL
33265: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
33266: LD_VAR 0 6
33270: PPUSH
33271: CALL_OW 264
33275: PUSH
33276: LD_INT 6
33278: PUSH
33279: LD_INT 46
33281: PUSH
33282: LD_INT 47
33284: PUSH
33285: EMPTY
33286: LIST
33287: LIST
33288: LIST
33289: IN
33290: IFFALSE 33307
// bpoints := bpoints * 1.2 ;
33292: LD_ADDR_VAR 0 10
33296: PUSH
33297: LD_VAR 0 10
33301: PUSH
33302: LD_REAL  1.20000000000000E+0000
33305: MUL
33306: ST_TO_ADDR
// end ; unit_building :
33307: GO 33321
33309: LD_INT 3
33311: DOUBLE
33312: EQUAL
33313: IFTRUE 33317
33315: GO 33320
33317: POP
// ; end ;
33318: GO 33321
33320: POP
// for j = 1 to 3 do
33321: LD_ADDR_VAR 0 7
33325: PUSH
33326: DOUBLE
33327: LD_INT 1
33329: DEC
33330: ST_TO_ADDR
33331: LD_INT 3
33333: PUSH
33334: FOR_TO
33335: IFFALSE 33388
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
33337: LD_ADDR_VAR 0 5
33341: PUSH
33342: LD_VAR 0 5
33346: PPUSH
33347: LD_VAR 0 7
33351: PPUSH
33352: LD_VAR 0 5
33356: PUSH
33357: LD_VAR 0 7
33361: ARRAY
33362: PUSH
33363: LD_VAR 0 9
33367: PUSH
33368: LD_VAR 0 7
33372: ARRAY
33373: PUSH
33374: LD_VAR 0 10
33378: MUL
33379: PLUS
33380: PPUSH
33381: CALL_OW 1
33385: ST_TO_ADDR
33386: GO 33334
33388: POP
33389: POP
// end ;
33390: GO 31867
33392: POP
33393: POP
// result := Replace ( result , 4 , tmp ) ;
33394: LD_ADDR_VAR 0 5
33398: PUSH
33399: LD_VAR 0 5
33403: PPUSH
33404: LD_INT 4
33406: PPUSH
33407: LD_VAR 0 8
33411: PPUSH
33412: CALL_OW 1
33416: ST_TO_ADDR
// end ;
33417: LD_VAR 0 5
33421: RET
// export function DangerAtRange ( unit , range ) ; begin
33422: LD_INT 0
33424: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
33425: LD_ADDR_VAR 0 3
33429: PUSH
33430: LD_VAR 0 1
33434: PPUSH
33435: CALL_OW 255
33439: PPUSH
33440: LD_VAR 0 1
33444: PPUSH
33445: CALL_OW 250
33449: PPUSH
33450: LD_VAR 0 1
33454: PPUSH
33455: CALL_OW 251
33459: PPUSH
33460: LD_VAR 0 2
33464: PPUSH
33465: CALL 31719 0 4
33469: ST_TO_ADDR
// end ;
33470: LD_VAR 0 3
33474: RET
// export function DangerInArea ( side , area ) ; begin
33475: LD_INT 0
33477: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
33478: LD_ADDR_VAR 0 3
33482: PUSH
33483: LD_VAR 0 2
33487: PPUSH
33488: LD_INT 81
33490: PUSH
33491: LD_VAR 0 1
33495: PUSH
33496: EMPTY
33497: LIST
33498: LIST
33499: PPUSH
33500: CALL_OW 70
33504: ST_TO_ADDR
// end ;
33505: LD_VAR 0 3
33509: RET
// export function IsExtension ( b ) ; begin
33510: LD_INT 0
33512: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
33513: LD_ADDR_VAR 0 2
33517: PUSH
33518: LD_VAR 0 1
33522: PUSH
33523: LD_INT 23
33525: PUSH
33526: LD_INT 20
33528: PUSH
33529: LD_INT 22
33531: PUSH
33532: LD_INT 17
33534: PUSH
33535: LD_INT 24
33537: PUSH
33538: LD_INT 21
33540: PUSH
33541: LD_INT 19
33543: PUSH
33544: LD_INT 16
33546: PUSH
33547: LD_INT 25
33549: PUSH
33550: LD_INT 18
33552: PUSH
33553: EMPTY
33554: LIST
33555: LIST
33556: LIST
33557: LIST
33558: LIST
33559: LIST
33560: LIST
33561: LIST
33562: LIST
33563: LIST
33564: IN
33565: ST_TO_ADDR
// end ;
33566: LD_VAR 0 2
33570: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
33571: LD_INT 0
33573: PPUSH
33574: PPUSH
33575: PPUSH
// result := [ ] ;
33576: LD_ADDR_VAR 0 4
33580: PUSH
33581: EMPTY
33582: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
33583: LD_ADDR_VAR 0 5
33587: PUSH
33588: LD_VAR 0 2
33592: PPUSH
33593: LD_INT 21
33595: PUSH
33596: LD_INT 3
33598: PUSH
33599: EMPTY
33600: LIST
33601: LIST
33602: PPUSH
33603: CALL_OW 70
33607: ST_TO_ADDR
// if not tmp then
33608: LD_VAR 0 5
33612: NOT
33613: IFFALSE 33617
// exit ;
33615: GO 33681
// if checkLink then
33617: LD_VAR 0 3
33621: IFFALSE 33671
// begin for i in tmp do
33623: LD_ADDR_VAR 0 6
33627: PUSH
33628: LD_VAR 0 5
33632: PUSH
33633: FOR_IN
33634: IFFALSE 33669
// if GetBase ( i ) <> base then
33636: LD_VAR 0 6
33640: PPUSH
33641: CALL_OW 274
33645: PUSH
33646: LD_VAR 0 1
33650: NONEQUAL
33651: IFFALSE 33667
// ComLinkToBase ( base , i ) ;
33653: LD_VAR 0 1
33657: PPUSH
33658: LD_VAR 0 6
33662: PPUSH
33663: CALL_OW 169
33667: GO 33633
33669: POP
33670: POP
// end ; result := tmp ;
33671: LD_ADDR_VAR 0 4
33675: PUSH
33676: LD_VAR 0 5
33680: ST_TO_ADDR
// end ;
33681: LD_VAR 0 4
33685: RET
// export function ComComplete ( units , b ) ; var i ; begin
33686: LD_INT 0
33688: PPUSH
33689: PPUSH
// if not units then
33690: LD_VAR 0 1
33694: NOT
33695: IFFALSE 33699
// exit ;
33697: GO 33789
// for i in units do
33699: LD_ADDR_VAR 0 4
33703: PUSH
33704: LD_VAR 0 1
33708: PUSH
33709: FOR_IN
33710: IFFALSE 33787
// if BuildingStatus ( b ) = bs_build then
33712: LD_VAR 0 2
33716: PPUSH
33717: CALL_OW 461
33721: PUSH
33722: LD_INT 1
33724: EQUAL
33725: IFFALSE 33785
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
33727: LD_VAR 0 4
33731: PPUSH
33732: LD_STRING h
33734: PUSH
33735: LD_VAR 0 2
33739: PPUSH
33740: CALL_OW 250
33744: PUSH
33745: LD_VAR 0 2
33749: PPUSH
33750: CALL_OW 251
33754: PUSH
33755: LD_VAR 0 2
33759: PUSH
33760: LD_INT 0
33762: PUSH
33763: LD_INT 0
33765: PUSH
33766: LD_INT 0
33768: PUSH
33769: EMPTY
33770: LIST
33771: LIST
33772: LIST
33773: LIST
33774: LIST
33775: LIST
33776: LIST
33777: PUSH
33778: EMPTY
33779: LIST
33780: PPUSH
33781: CALL_OW 446
33785: GO 33709
33787: POP
33788: POP
// end ;
33789: LD_VAR 0 3
33793: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
33794: LD_INT 0
33796: PPUSH
33797: PPUSH
33798: PPUSH
33799: PPUSH
33800: PPUSH
33801: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
33802: LD_VAR 0 1
33806: NOT
33807: PUSH
33808: LD_VAR 0 1
33812: PPUSH
33813: CALL_OW 263
33817: PUSH
33818: LD_INT 2
33820: NONEQUAL
33821: OR
33822: IFFALSE 33826
// exit ;
33824: GO 34142
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
33826: LD_ADDR_VAR 0 6
33830: PUSH
33831: LD_INT 22
33833: PUSH
33834: LD_VAR 0 1
33838: PPUSH
33839: CALL_OW 255
33843: PUSH
33844: EMPTY
33845: LIST
33846: LIST
33847: PUSH
33848: LD_INT 2
33850: PUSH
33851: LD_INT 30
33853: PUSH
33854: LD_INT 36
33856: PUSH
33857: EMPTY
33858: LIST
33859: LIST
33860: PUSH
33861: LD_INT 34
33863: PUSH
33864: LD_INT 31
33866: PUSH
33867: EMPTY
33868: LIST
33869: LIST
33870: PUSH
33871: EMPTY
33872: LIST
33873: LIST
33874: LIST
33875: PUSH
33876: EMPTY
33877: LIST
33878: LIST
33879: PPUSH
33880: CALL_OW 69
33884: ST_TO_ADDR
// if not tmp then
33885: LD_VAR 0 6
33889: NOT
33890: IFFALSE 33894
// exit ;
33892: GO 34142
// result := [ ] ;
33894: LD_ADDR_VAR 0 2
33898: PUSH
33899: EMPTY
33900: ST_TO_ADDR
// for i in tmp do
33901: LD_ADDR_VAR 0 3
33905: PUSH
33906: LD_VAR 0 6
33910: PUSH
33911: FOR_IN
33912: IFFALSE 33983
// begin t := UnitsInside ( i ) ;
33914: LD_ADDR_VAR 0 4
33918: PUSH
33919: LD_VAR 0 3
33923: PPUSH
33924: CALL_OW 313
33928: ST_TO_ADDR
// if t then
33929: LD_VAR 0 4
33933: IFFALSE 33981
// for j in t do
33935: LD_ADDR_VAR 0 7
33939: PUSH
33940: LD_VAR 0 4
33944: PUSH
33945: FOR_IN
33946: IFFALSE 33979
// result := Replace ( result , result + 1 , j ) ;
33948: LD_ADDR_VAR 0 2
33952: PUSH
33953: LD_VAR 0 2
33957: PPUSH
33958: LD_VAR 0 2
33962: PUSH
33963: LD_INT 1
33965: PLUS
33966: PPUSH
33967: LD_VAR 0 7
33971: PPUSH
33972: CALL_OW 1
33976: ST_TO_ADDR
33977: GO 33945
33979: POP
33980: POP
// end ;
33981: GO 33911
33983: POP
33984: POP
// if not result then
33985: LD_VAR 0 2
33989: NOT
33990: IFFALSE 33994
// exit ;
33992: GO 34142
// mech := result [ 1 ] ;
33994: LD_ADDR_VAR 0 5
33998: PUSH
33999: LD_VAR 0 2
34003: PUSH
34004: LD_INT 1
34006: ARRAY
34007: ST_TO_ADDR
// if result > 1 then
34008: LD_VAR 0 2
34012: PUSH
34013: LD_INT 1
34015: GREATER
34016: IFFALSE 34128
// begin for i = 2 to result do
34018: LD_ADDR_VAR 0 3
34022: PUSH
34023: DOUBLE
34024: LD_INT 2
34026: DEC
34027: ST_TO_ADDR
34028: LD_VAR 0 2
34032: PUSH
34033: FOR_TO
34034: IFFALSE 34126
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
34036: LD_ADDR_VAR 0 4
34040: PUSH
34041: LD_VAR 0 2
34045: PUSH
34046: LD_VAR 0 3
34050: ARRAY
34051: PPUSH
34052: LD_INT 3
34054: PPUSH
34055: CALL_OW 259
34059: PUSH
34060: LD_VAR 0 2
34064: PUSH
34065: LD_VAR 0 3
34069: ARRAY
34070: PPUSH
34071: CALL_OW 432
34075: MINUS
34076: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
34077: LD_VAR 0 4
34081: PUSH
34082: LD_VAR 0 5
34086: PPUSH
34087: LD_INT 3
34089: PPUSH
34090: CALL_OW 259
34094: PUSH
34095: LD_VAR 0 5
34099: PPUSH
34100: CALL_OW 432
34104: MINUS
34105: GREATEREQUAL
34106: IFFALSE 34124
// mech := result [ i ] ;
34108: LD_ADDR_VAR 0 5
34112: PUSH
34113: LD_VAR 0 2
34117: PUSH
34118: LD_VAR 0 3
34122: ARRAY
34123: ST_TO_ADDR
// end ;
34124: GO 34033
34126: POP
34127: POP
// end ; ComLinkTo ( vehicle , mech ) ;
34128: LD_VAR 0 1
34132: PPUSH
34133: LD_VAR 0 5
34137: PPUSH
34138: CALL_OW 135
// end ;
34142: LD_VAR 0 2
34146: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
34147: LD_INT 0
34149: PPUSH
34150: PPUSH
34151: PPUSH
34152: PPUSH
34153: PPUSH
34154: PPUSH
34155: PPUSH
34156: PPUSH
34157: PPUSH
34158: PPUSH
34159: PPUSH
34160: PPUSH
34161: PPUSH
// result := [ ] ;
34162: LD_ADDR_VAR 0 7
34166: PUSH
34167: EMPTY
34168: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
34169: LD_VAR 0 1
34173: PPUSH
34174: CALL_OW 266
34178: PUSH
34179: LD_INT 0
34181: PUSH
34182: LD_INT 1
34184: PUSH
34185: EMPTY
34186: LIST
34187: LIST
34188: IN
34189: NOT
34190: IFFALSE 34194
// exit ;
34192: GO 35828
// if name then
34194: LD_VAR 0 3
34198: IFFALSE 34214
// SetBName ( base_dep , name ) ;
34200: LD_VAR 0 1
34204: PPUSH
34205: LD_VAR 0 3
34209: PPUSH
34210: CALL_OW 500
// base := GetBase ( base_dep ) ;
34214: LD_ADDR_VAR 0 15
34218: PUSH
34219: LD_VAR 0 1
34223: PPUSH
34224: CALL_OW 274
34228: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
34229: LD_ADDR_VAR 0 16
34233: PUSH
34234: LD_VAR 0 1
34238: PPUSH
34239: CALL_OW 255
34243: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
34244: LD_ADDR_VAR 0 17
34248: PUSH
34249: LD_VAR 0 1
34253: PPUSH
34254: CALL_OW 248
34258: ST_TO_ADDR
// if sources then
34259: LD_VAR 0 5
34263: IFFALSE 34310
// for i = 1 to 3 do
34265: LD_ADDR_VAR 0 8
34269: PUSH
34270: DOUBLE
34271: LD_INT 1
34273: DEC
34274: ST_TO_ADDR
34275: LD_INT 3
34277: PUSH
34278: FOR_TO
34279: IFFALSE 34308
// AddResourceType ( base , i , sources [ i ] ) ;
34281: LD_VAR 0 15
34285: PPUSH
34286: LD_VAR 0 8
34290: PPUSH
34291: LD_VAR 0 5
34295: PUSH
34296: LD_VAR 0 8
34300: ARRAY
34301: PPUSH
34302: CALL_OW 276
34306: GO 34278
34308: POP
34309: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
34310: LD_ADDR_VAR 0 18
34314: PUSH
34315: LD_VAR 0 15
34319: PPUSH
34320: LD_VAR 0 2
34324: PPUSH
34325: LD_INT 1
34327: PPUSH
34328: CALL 33571 0 3
34332: ST_TO_ADDR
// InitHc ;
34333: CALL_OW 19
// InitUc ;
34337: CALL_OW 18
// uc_side := side ;
34341: LD_ADDR_OWVAR 20
34345: PUSH
34346: LD_VAR 0 16
34350: ST_TO_ADDR
// uc_nation := nation ;
34351: LD_ADDR_OWVAR 21
34355: PUSH
34356: LD_VAR 0 17
34360: ST_TO_ADDR
// if buildings then
34361: LD_VAR 0 18
34365: IFFALSE 35687
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
34367: LD_ADDR_VAR 0 19
34371: PUSH
34372: LD_VAR 0 18
34376: PPUSH
34377: LD_INT 2
34379: PUSH
34380: LD_INT 30
34382: PUSH
34383: LD_INT 29
34385: PUSH
34386: EMPTY
34387: LIST
34388: LIST
34389: PUSH
34390: LD_INT 30
34392: PUSH
34393: LD_INT 30
34395: PUSH
34396: EMPTY
34397: LIST
34398: LIST
34399: PUSH
34400: EMPTY
34401: LIST
34402: LIST
34403: LIST
34404: PPUSH
34405: CALL_OW 72
34409: ST_TO_ADDR
// if tmp then
34410: LD_VAR 0 19
34414: IFFALSE 34462
// for i in tmp do
34416: LD_ADDR_VAR 0 8
34420: PUSH
34421: LD_VAR 0 19
34425: PUSH
34426: FOR_IN
34427: IFFALSE 34460
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
34429: LD_VAR 0 8
34433: PPUSH
34434: CALL_OW 250
34438: PPUSH
34439: LD_VAR 0 8
34443: PPUSH
34444: CALL_OW 251
34448: PPUSH
34449: LD_VAR 0 16
34453: PPUSH
34454: CALL_OW 441
34458: GO 34426
34460: POP
34461: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
34462: LD_VAR 0 18
34466: PPUSH
34467: LD_INT 2
34469: PUSH
34470: LD_INT 30
34472: PUSH
34473: LD_INT 32
34475: PUSH
34476: EMPTY
34477: LIST
34478: LIST
34479: PUSH
34480: LD_INT 30
34482: PUSH
34483: LD_INT 33
34485: PUSH
34486: EMPTY
34487: LIST
34488: LIST
34489: PUSH
34490: EMPTY
34491: LIST
34492: LIST
34493: LIST
34494: PPUSH
34495: CALL_OW 72
34499: IFFALSE 34587
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
34501: LD_ADDR_VAR 0 8
34505: PUSH
34506: LD_VAR 0 18
34510: PPUSH
34511: LD_INT 2
34513: PUSH
34514: LD_INT 30
34516: PUSH
34517: LD_INT 32
34519: PUSH
34520: EMPTY
34521: LIST
34522: LIST
34523: PUSH
34524: LD_INT 30
34526: PUSH
34527: LD_INT 33
34529: PUSH
34530: EMPTY
34531: LIST
34532: LIST
34533: PUSH
34534: EMPTY
34535: LIST
34536: LIST
34537: LIST
34538: PPUSH
34539: CALL_OW 72
34543: PUSH
34544: FOR_IN
34545: IFFALSE 34585
// begin if not GetBWeapon ( i ) then
34547: LD_VAR 0 8
34551: PPUSH
34552: CALL_OW 269
34556: NOT
34557: IFFALSE 34583
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
34559: LD_VAR 0 8
34563: PPUSH
34564: LD_VAR 0 8
34568: PPUSH
34569: LD_VAR 0 2
34573: PPUSH
34574: CALL 35833 0 2
34578: PPUSH
34579: CALL_OW 431
// end ;
34583: GO 34544
34585: POP
34586: POP
// end ; for i = 1 to personel do
34587: LD_ADDR_VAR 0 8
34591: PUSH
34592: DOUBLE
34593: LD_INT 1
34595: DEC
34596: ST_TO_ADDR
34597: LD_VAR 0 6
34601: PUSH
34602: FOR_TO
34603: IFFALSE 35667
// begin if i > 4 then
34605: LD_VAR 0 8
34609: PUSH
34610: LD_INT 4
34612: GREATER
34613: IFFALSE 34617
// break ;
34615: GO 35667
// case i of 1 :
34617: LD_VAR 0 8
34621: PUSH
34622: LD_INT 1
34624: DOUBLE
34625: EQUAL
34626: IFTRUE 34630
34628: GO 34710
34630: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
34631: LD_ADDR_VAR 0 12
34635: PUSH
34636: LD_VAR 0 18
34640: PPUSH
34641: LD_INT 22
34643: PUSH
34644: LD_VAR 0 16
34648: PUSH
34649: EMPTY
34650: LIST
34651: LIST
34652: PUSH
34653: LD_INT 58
34655: PUSH
34656: EMPTY
34657: LIST
34658: PUSH
34659: LD_INT 2
34661: PUSH
34662: LD_INT 30
34664: PUSH
34665: LD_INT 32
34667: PUSH
34668: EMPTY
34669: LIST
34670: LIST
34671: PUSH
34672: LD_INT 30
34674: PUSH
34675: LD_INT 4
34677: PUSH
34678: EMPTY
34679: LIST
34680: LIST
34681: PUSH
34682: LD_INT 30
34684: PUSH
34685: LD_INT 5
34687: PUSH
34688: EMPTY
34689: LIST
34690: LIST
34691: PUSH
34692: EMPTY
34693: LIST
34694: LIST
34695: LIST
34696: LIST
34697: PUSH
34698: EMPTY
34699: LIST
34700: LIST
34701: LIST
34702: PPUSH
34703: CALL_OW 72
34707: ST_TO_ADDR
34708: GO 34932
34710: LD_INT 2
34712: DOUBLE
34713: EQUAL
34714: IFTRUE 34718
34716: GO 34780
34718: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
34719: LD_ADDR_VAR 0 12
34723: PUSH
34724: LD_VAR 0 18
34728: PPUSH
34729: LD_INT 22
34731: PUSH
34732: LD_VAR 0 16
34736: PUSH
34737: EMPTY
34738: LIST
34739: LIST
34740: PUSH
34741: LD_INT 2
34743: PUSH
34744: LD_INT 30
34746: PUSH
34747: LD_INT 0
34749: PUSH
34750: EMPTY
34751: LIST
34752: LIST
34753: PUSH
34754: LD_INT 30
34756: PUSH
34757: LD_INT 1
34759: PUSH
34760: EMPTY
34761: LIST
34762: LIST
34763: PUSH
34764: EMPTY
34765: LIST
34766: LIST
34767: LIST
34768: PUSH
34769: EMPTY
34770: LIST
34771: LIST
34772: PPUSH
34773: CALL_OW 72
34777: ST_TO_ADDR
34778: GO 34932
34780: LD_INT 3
34782: DOUBLE
34783: EQUAL
34784: IFTRUE 34788
34786: GO 34850
34788: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
34789: LD_ADDR_VAR 0 12
34793: PUSH
34794: LD_VAR 0 18
34798: PPUSH
34799: LD_INT 22
34801: PUSH
34802: LD_VAR 0 16
34806: PUSH
34807: EMPTY
34808: LIST
34809: LIST
34810: PUSH
34811: LD_INT 2
34813: PUSH
34814: LD_INT 30
34816: PUSH
34817: LD_INT 2
34819: PUSH
34820: EMPTY
34821: LIST
34822: LIST
34823: PUSH
34824: LD_INT 30
34826: PUSH
34827: LD_INT 3
34829: PUSH
34830: EMPTY
34831: LIST
34832: LIST
34833: PUSH
34834: EMPTY
34835: LIST
34836: LIST
34837: LIST
34838: PUSH
34839: EMPTY
34840: LIST
34841: LIST
34842: PPUSH
34843: CALL_OW 72
34847: ST_TO_ADDR
34848: GO 34932
34850: LD_INT 4
34852: DOUBLE
34853: EQUAL
34854: IFTRUE 34858
34856: GO 34931
34858: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
34859: LD_ADDR_VAR 0 12
34863: PUSH
34864: LD_VAR 0 18
34868: PPUSH
34869: LD_INT 22
34871: PUSH
34872: LD_VAR 0 16
34876: PUSH
34877: EMPTY
34878: LIST
34879: LIST
34880: PUSH
34881: LD_INT 2
34883: PUSH
34884: LD_INT 30
34886: PUSH
34887: LD_INT 6
34889: PUSH
34890: EMPTY
34891: LIST
34892: LIST
34893: PUSH
34894: LD_INT 30
34896: PUSH
34897: LD_INT 7
34899: PUSH
34900: EMPTY
34901: LIST
34902: LIST
34903: PUSH
34904: LD_INT 30
34906: PUSH
34907: LD_INT 8
34909: PUSH
34910: EMPTY
34911: LIST
34912: LIST
34913: PUSH
34914: EMPTY
34915: LIST
34916: LIST
34917: LIST
34918: LIST
34919: PUSH
34920: EMPTY
34921: LIST
34922: LIST
34923: PPUSH
34924: CALL_OW 72
34928: ST_TO_ADDR
34929: GO 34932
34931: POP
// if i = 1 then
34932: LD_VAR 0 8
34936: PUSH
34937: LD_INT 1
34939: EQUAL
34940: IFFALSE 35051
// begin tmp := [ ] ;
34942: LD_ADDR_VAR 0 19
34946: PUSH
34947: EMPTY
34948: ST_TO_ADDR
// for j in f do
34949: LD_ADDR_VAR 0 9
34953: PUSH
34954: LD_VAR 0 12
34958: PUSH
34959: FOR_IN
34960: IFFALSE 35033
// if GetBType ( j ) = b_bunker then
34962: LD_VAR 0 9
34966: PPUSH
34967: CALL_OW 266
34971: PUSH
34972: LD_INT 32
34974: EQUAL
34975: IFFALSE 35002
// tmp := Insert ( tmp , 1 , j ) else
34977: LD_ADDR_VAR 0 19
34981: PUSH
34982: LD_VAR 0 19
34986: PPUSH
34987: LD_INT 1
34989: PPUSH
34990: LD_VAR 0 9
34994: PPUSH
34995: CALL_OW 2
34999: ST_TO_ADDR
35000: GO 35031
// tmp := Insert ( tmp , tmp + 1 , j ) ;
35002: LD_ADDR_VAR 0 19
35006: PUSH
35007: LD_VAR 0 19
35011: PPUSH
35012: LD_VAR 0 19
35016: PUSH
35017: LD_INT 1
35019: PLUS
35020: PPUSH
35021: LD_VAR 0 9
35025: PPUSH
35026: CALL_OW 2
35030: ST_TO_ADDR
35031: GO 34959
35033: POP
35034: POP
// if tmp then
35035: LD_VAR 0 19
35039: IFFALSE 35051
// f := tmp ;
35041: LD_ADDR_VAR 0 12
35045: PUSH
35046: LD_VAR 0 19
35050: ST_TO_ADDR
// end ; x := personel [ i ] ;
35051: LD_ADDR_VAR 0 13
35055: PUSH
35056: LD_VAR 0 6
35060: PUSH
35061: LD_VAR 0 8
35065: ARRAY
35066: ST_TO_ADDR
// if x = - 1 then
35067: LD_VAR 0 13
35071: PUSH
35072: LD_INT 1
35074: NEG
35075: EQUAL
35076: IFFALSE 35285
// begin for j in f do
35078: LD_ADDR_VAR 0 9
35082: PUSH
35083: LD_VAR 0 12
35087: PUSH
35088: FOR_IN
35089: IFFALSE 35281
// repeat InitHc ;
35091: CALL_OW 19
// if GetBType ( j ) = b_barracks then
35095: LD_VAR 0 9
35099: PPUSH
35100: CALL_OW 266
35104: PUSH
35105: LD_INT 5
35107: EQUAL
35108: IFFALSE 35178
// begin if UnitsInside ( j ) < 3 then
35110: LD_VAR 0 9
35114: PPUSH
35115: CALL_OW 313
35119: PUSH
35120: LD_INT 3
35122: LESS
35123: IFFALSE 35159
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
35125: LD_INT 0
35127: PPUSH
35128: LD_INT 5
35130: PUSH
35131: LD_INT 8
35133: PUSH
35134: LD_INT 9
35136: PUSH
35137: EMPTY
35138: LIST
35139: LIST
35140: LIST
35141: PUSH
35142: LD_VAR 0 17
35146: ARRAY
35147: PPUSH
35148: LD_VAR 0 4
35152: PPUSH
35153: CALL_OW 380
35157: GO 35176
// PrepareHuman ( false , i , skill ) ;
35159: LD_INT 0
35161: PPUSH
35162: LD_VAR 0 8
35166: PPUSH
35167: LD_VAR 0 4
35171: PPUSH
35172: CALL_OW 380
// end else
35176: GO 35195
// PrepareHuman ( false , i , skill ) ;
35178: LD_INT 0
35180: PPUSH
35181: LD_VAR 0 8
35185: PPUSH
35186: LD_VAR 0 4
35190: PPUSH
35191: CALL_OW 380
// un := CreateHuman ;
35195: LD_ADDR_VAR 0 14
35199: PUSH
35200: CALL_OW 44
35204: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
35205: LD_ADDR_VAR 0 7
35209: PUSH
35210: LD_VAR 0 7
35214: PPUSH
35215: LD_INT 1
35217: PPUSH
35218: LD_VAR 0 14
35222: PPUSH
35223: CALL_OW 2
35227: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
35228: LD_VAR 0 14
35232: PPUSH
35233: LD_VAR 0 9
35237: PPUSH
35238: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
35242: LD_VAR 0 9
35246: PPUSH
35247: CALL_OW 313
35251: PUSH
35252: LD_INT 6
35254: EQUAL
35255: PUSH
35256: LD_VAR 0 9
35260: PPUSH
35261: CALL_OW 266
35265: PUSH
35266: LD_INT 32
35268: PUSH
35269: LD_INT 31
35271: PUSH
35272: EMPTY
35273: LIST
35274: LIST
35275: IN
35276: OR
35277: IFFALSE 35091
35279: GO 35088
35281: POP
35282: POP
// end else
35283: GO 35665
// for j = 1 to x do
35285: LD_ADDR_VAR 0 9
35289: PUSH
35290: DOUBLE
35291: LD_INT 1
35293: DEC
35294: ST_TO_ADDR
35295: LD_VAR 0 13
35299: PUSH
35300: FOR_TO
35301: IFFALSE 35663
// begin InitHc ;
35303: CALL_OW 19
// if not f then
35307: LD_VAR 0 12
35311: NOT
35312: IFFALSE 35401
// begin PrepareHuman ( false , i , skill ) ;
35314: LD_INT 0
35316: PPUSH
35317: LD_VAR 0 8
35321: PPUSH
35322: LD_VAR 0 4
35326: PPUSH
35327: CALL_OW 380
// un := CreateHuman ;
35331: LD_ADDR_VAR 0 14
35335: PUSH
35336: CALL_OW 44
35340: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
35341: LD_ADDR_VAR 0 7
35345: PUSH
35346: LD_VAR 0 7
35350: PPUSH
35351: LD_INT 1
35353: PPUSH
35354: LD_VAR 0 14
35358: PPUSH
35359: CALL_OW 2
35363: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
35364: LD_VAR 0 14
35368: PPUSH
35369: LD_VAR 0 1
35373: PPUSH
35374: CALL_OW 250
35378: PPUSH
35379: LD_VAR 0 1
35383: PPUSH
35384: CALL_OW 251
35388: PPUSH
35389: LD_INT 10
35391: PPUSH
35392: LD_INT 0
35394: PPUSH
35395: CALL_OW 50
// continue ;
35399: GO 35300
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
35401: LD_VAR 0 12
35405: PUSH
35406: LD_INT 1
35408: ARRAY
35409: PPUSH
35410: CALL_OW 313
35414: PUSH
35415: LD_VAR 0 12
35419: PUSH
35420: LD_INT 1
35422: ARRAY
35423: PPUSH
35424: CALL_OW 266
35428: PUSH
35429: LD_INT 32
35431: PUSH
35432: LD_INT 31
35434: PUSH
35435: EMPTY
35436: LIST
35437: LIST
35438: IN
35439: AND
35440: PUSH
35441: LD_VAR 0 12
35445: PUSH
35446: LD_INT 1
35448: ARRAY
35449: PPUSH
35450: CALL_OW 313
35454: PUSH
35455: LD_INT 6
35457: EQUAL
35458: OR
35459: IFFALSE 35479
// f := Delete ( f , 1 ) ;
35461: LD_ADDR_VAR 0 12
35465: PUSH
35466: LD_VAR 0 12
35470: PPUSH
35471: LD_INT 1
35473: PPUSH
35474: CALL_OW 3
35478: ST_TO_ADDR
// if not f then
35479: LD_VAR 0 12
35483: NOT
35484: IFFALSE 35502
// begin x := x + 2 ;
35486: LD_ADDR_VAR 0 13
35490: PUSH
35491: LD_VAR 0 13
35495: PUSH
35496: LD_INT 2
35498: PLUS
35499: ST_TO_ADDR
// continue ;
35500: GO 35300
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
35502: LD_VAR 0 12
35506: PUSH
35507: LD_INT 1
35509: ARRAY
35510: PPUSH
35511: CALL_OW 266
35515: PUSH
35516: LD_INT 5
35518: EQUAL
35519: IFFALSE 35593
// begin if UnitsInside ( f [ 1 ] ) < 3 then
35521: LD_VAR 0 12
35525: PUSH
35526: LD_INT 1
35528: ARRAY
35529: PPUSH
35530: CALL_OW 313
35534: PUSH
35535: LD_INT 3
35537: LESS
35538: IFFALSE 35574
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
35540: LD_INT 0
35542: PPUSH
35543: LD_INT 5
35545: PUSH
35546: LD_INT 8
35548: PUSH
35549: LD_INT 9
35551: PUSH
35552: EMPTY
35553: LIST
35554: LIST
35555: LIST
35556: PUSH
35557: LD_VAR 0 17
35561: ARRAY
35562: PPUSH
35563: LD_VAR 0 4
35567: PPUSH
35568: CALL_OW 380
35572: GO 35591
// PrepareHuman ( false , i , skill ) ;
35574: LD_INT 0
35576: PPUSH
35577: LD_VAR 0 8
35581: PPUSH
35582: LD_VAR 0 4
35586: PPUSH
35587: CALL_OW 380
// end else
35591: GO 35610
// PrepareHuman ( false , i , skill ) ;
35593: LD_INT 0
35595: PPUSH
35596: LD_VAR 0 8
35600: PPUSH
35601: LD_VAR 0 4
35605: PPUSH
35606: CALL_OW 380
// un := CreateHuman ;
35610: LD_ADDR_VAR 0 14
35614: PUSH
35615: CALL_OW 44
35619: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
35620: LD_ADDR_VAR 0 7
35624: PUSH
35625: LD_VAR 0 7
35629: PPUSH
35630: LD_INT 1
35632: PPUSH
35633: LD_VAR 0 14
35637: PPUSH
35638: CALL_OW 2
35642: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
35643: LD_VAR 0 14
35647: PPUSH
35648: LD_VAR 0 12
35652: PUSH
35653: LD_INT 1
35655: ARRAY
35656: PPUSH
35657: CALL_OW 52
// end ;
35661: GO 35300
35663: POP
35664: POP
// end ;
35665: GO 34602
35667: POP
35668: POP
// result := result ^ buildings ;
35669: LD_ADDR_VAR 0 7
35673: PUSH
35674: LD_VAR 0 7
35678: PUSH
35679: LD_VAR 0 18
35683: ADD
35684: ST_TO_ADDR
// end else
35685: GO 35828
// begin for i = 1 to personel do
35687: LD_ADDR_VAR 0 8
35691: PUSH
35692: DOUBLE
35693: LD_INT 1
35695: DEC
35696: ST_TO_ADDR
35697: LD_VAR 0 6
35701: PUSH
35702: FOR_TO
35703: IFFALSE 35826
// begin if i > 4 then
35705: LD_VAR 0 8
35709: PUSH
35710: LD_INT 4
35712: GREATER
35713: IFFALSE 35717
// break ;
35715: GO 35826
// x := personel [ i ] ;
35717: LD_ADDR_VAR 0 13
35721: PUSH
35722: LD_VAR 0 6
35726: PUSH
35727: LD_VAR 0 8
35731: ARRAY
35732: ST_TO_ADDR
// if x = - 1 then
35733: LD_VAR 0 13
35737: PUSH
35738: LD_INT 1
35740: NEG
35741: EQUAL
35742: IFFALSE 35746
// continue ;
35744: GO 35702
// PrepareHuman ( false , i , skill ) ;
35746: LD_INT 0
35748: PPUSH
35749: LD_VAR 0 8
35753: PPUSH
35754: LD_VAR 0 4
35758: PPUSH
35759: CALL_OW 380
// un := CreateHuman ;
35763: LD_ADDR_VAR 0 14
35767: PUSH
35768: CALL_OW 44
35772: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
35773: LD_VAR 0 14
35777: PPUSH
35778: LD_VAR 0 1
35782: PPUSH
35783: CALL_OW 250
35787: PPUSH
35788: LD_VAR 0 1
35792: PPUSH
35793: CALL_OW 251
35797: PPUSH
35798: LD_INT 10
35800: PPUSH
35801: LD_INT 0
35803: PPUSH
35804: CALL_OW 50
// result := result ^ un ;
35808: LD_ADDR_VAR 0 7
35812: PUSH
35813: LD_VAR 0 7
35817: PUSH
35818: LD_VAR 0 14
35822: ADD
35823: ST_TO_ADDR
// end ;
35824: GO 35702
35826: POP
35827: POP
// end ; end ;
35828: LD_VAR 0 7
35832: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
35833: LD_INT 0
35835: PPUSH
35836: PPUSH
35837: PPUSH
35838: PPUSH
35839: PPUSH
35840: PPUSH
35841: PPUSH
35842: PPUSH
35843: PPUSH
35844: PPUSH
35845: PPUSH
35846: PPUSH
35847: PPUSH
35848: PPUSH
35849: PPUSH
35850: PPUSH
// result := false ;
35851: LD_ADDR_VAR 0 3
35855: PUSH
35856: LD_INT 0
35858: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
35859: LD_VAR 0 1
35863: NOT
35864: PUSH
35865: LD_VAR 0 1
35869: PPUSH
35870: CALL_OW 266
35874: PUSH
35875: LD_INT 32
35877: PUSH
35878: LD_INT 33
35880: PUSH
35881: EMPTY
35882: LIST
35883: LIST
35884: IN
35885: NOT
35886: OR
35887: IFFALSE 35891
// exit ;
35889: GO 37000
// nat := GetNation ( tower ) ;
35891: LD_ADDR_VAR 0 12
35895: PUSH
35896: LD_VAR 0 1
35900: PPUSH
35901: CALL_OW 248
35905: ST_TO_ADDR
// side := GetSide ( tower ) ;
35906: LD_ADDR_VAR 0 16
35910: PUSH
35911: LD_VAR 0 1
35915: PPUSH
35916: CALL_OW 255
35920: ST_TO_ADDR
// x := GetX ( tower ) ;
35921: LD_ADDR_VAR 0 10
35925: PUSH
35926: LD_VAR 0 1
35930: PPUSH
35931: CALL_OW 250
35935: ST_TO_ADDR
// y := GetY ( tower ) ;
35936: LD_ADDR_VAR 0 11
35940: PUSH
35941: LD_VAR 0 1
35945: PPUSH
35946: CALL_OW 251
35950: ST_TO_ADDR
// if not x or not y then
35951: LD_VAR 0 10
35955: NOT
35956: PUSH
35957: LD_VAR 0 11
35961: NOT
35962: OR
35963: IFFALSE 35967
// exit ;
35965: GO 37000
// weapon := 0 ;
35967: LD_ADDR_VAR 0 18
35971: PUSH
35972: LD_INT 0
35974: ST_TO_ADDR
// fac_list := [ ] ;
35975: LD_ADDR_VAR 0 17
35979: PUSH
35980: EMPTY
35981: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
35982: LD_ADDR_VAR 0 6
35986: PUSH
35987: LD_VAR 0 1
35991: PPUSH
35992: CALL_OW 274
35996: PPUSH
35997: LD_VAR 0 2
36001: PPUSH
36002: LD_INT 0
36004: PPUSH
36005: CALL 33571 0 3
36009: PPUSH
36010: LD_INT 30
36012: PUSH
36013: LD_INT 3
36015: PUSH
36016: EMPTY
36017: LIST
36018: LIST
36019: PPUSH
36020: CALL_OW 72
36024: ST_TO_ADDR
// if not factories then
36025: LD_VAR 0 6
36029: NOT
36030: IFFALSE 36034
// exit ;
36032: GO 37000
// for i in factories do
36034: LD_ADDR_VAR 0 8
36038: PUSH
36039: LD_VAR 0 6
36043: PUSH
36044: FOR_IN
36045: IFFALSE 36070
// fac_list := fac_list union AvailableWeaponList ( i ) ;
36047: LD_ADDR_VAR 0 17
36051: PUSH
36052: LD_VAR 0 17
36056: PUSH
36057: LD_VAR 0 8
36061: PPUSH
36062: CALL_OW 478
36066: UNION
36067: ST_TO_ADDR
36068: GO 36044
36070: POP
36071: POP
// if not fac_list then
36072: LD_VAR 0 17
36076: NOT
36077: IFFALSE 36081
// exit ;
36079: GO 37000
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
36081: LD_ADDR_VAR 0 5
36085: PUSH
36086: LD_INT 4
36088: PUSH
36089: LD_INT 5
36091: PUSH
36092: LD_INT 9
36094: PUSH
36095: LD_INT 10
36097: PUSH
36098: LD_INT 6
36100: PUSH
36101: LD_INT 7
36103: PUSH
36104: LD_INT 11
36106: PUSH
36107: EMPTY
36108: LIST
36109: LIST
36110: LIST
36111: LIST
36112: LIST
36113: LIST
36114: LIST
36115: PUSH
36116: LD_INT 27
36118: PUSH
36119: LD_INT 28
36121: PUSH
36122: LD_INT 26
36124: PUSH
36125: LD_INT 30
36127: PUSH
36128: EMPTY
36129: LIST
36130: LIST
36131: LIST
36132: LIST
36133: PUSH
36134: LD_INT 43
36136: PUSH
36137: LD_INT 44
36139: PUSH
36140: LD_INT 46
36142: PUSH
36143: LD_INT 45
36145: PUSH
36146: LD_INT 47
36148: PUSH
36149: LD_INT 49
36151: PUSH
36152: EMPTY
36153: LIST
36154: LIST
36155: LIST
36156: LIST
36157: LIST
36158: LIST
36159: PUSH
36160: EMPTY
36161: LIST
36162: LIST
36163: LIST
36164: PUSH
36165: LD_VAR 0 12
36169: ARRAY
36170: ST_TO_ADDR
// list := list isect fac_list ;
36171: LD_ADDR_VAR 0 5
36175: PUSH
36176: LD_VAR 0 5
36180: PUSH
36181: LD_VAR 0 17
36185: ISECT
36186: ST_TO_ADDR
// if not list then
36187: LD_VAR 0 5
36191: NOT
36192: IFFALSE 36196
// exit ;
36194: GO 37000
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
36196: LD_VAR 0 12
36200: PUSH
36201: LD_INT 3
36203: EQUAL
36204: PUSH
36205: LD_INT 49
36207: PUSH
36208: LD_VAR 0 5
36212: IN
36213: AND
36214: PUSH
36215: LD_INT 31
36217: PPUSH
36218: LD_VAR 0 16
36222: PPUSH
36223: CALL_OW 321
36227: PUSH
36228: LD_INT 2
36230: EQUAL
36231: AND
36232: IFFALSE 36292
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
36234: LD_INT 22
36236: PUSH
36237: LD_VAR 0 16
36241: PUSH
36242: EMPTY
36243: LIST
36244: LIST
36245: PUSH
36246: LD_INT 35
36248: PUSH
36249: LD_INT 49
36251: PUSH
36252: EMPTY
36253: LIST
36254: LIST
36255: PUSH
36256: LD_INT 91
36258: PUSH
36259: LD_VAR 0 1
36263: PUSH
36264: LD_INT 10
36266: PUSH
36267: EMPTY
36268: LIST
36269: LIST
36270: LIST
36271: PUSH
36272: EMPTY
36273: LIST
36274: LIST
36275: LIST
36276: PPUSH
36277: CALL_OW 69
36281: NOT
36282: IFFALSE 36292
// weapon := ru_time_lapser ;
36284: LD_ADDR_VAR 0 18
36288: PUSH
36289: LD_INT 49
36291: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
36292: LD_VAR 0 12
36296: PUSH
36297: LD_INT 1
36299: PUSH
36300: LD_INT 2
36302: PUSH
36303: EMPTY
36304: LIST
36305: LIST
36306: IN
36307: PUSH
36308: LD_INT 11
36310: PUSH
36311: LD_VAR 0 5
36315: IN
36316: PUSH
36317: LD_INT 30
36319: PUSH
36320: LD_VAR 0 5
36324: IN
36325: OR
36326: AND
36327: PUSH
36328: LD_INT 6
36330: PPUSH
36331: LD_VAR 0 16
36335: PPUSH
36336: CALL_OW 321
36340: PUSH
36341: LD_INT 2
36343: EQUAL
36344: AND
36345: IFFALSE 36510
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
36347: LD_INT 22
36349: PUSH
36350: LD_VAR 0 16
36354: PUSH
36355: EMPTY
36356: LIST
36357: LIST
36358: PUSH
36359: LD_INT 2
36361: PUSH
36362: LD_INT 35
36364: PUSH
36365: LD_INT 11
36367: PUSH
36368: EMPTY
36369: LIST
36370: LIST
36371: PUSH
36372: LD_INT 35
36374: PUSH
36375: LD_INT 30
36377: PUSH
36378: EMPTY
36379: LIST
36380: LIST
36381: PUSH
36382: EMPTY
36383: LIST
36384: LIST
36385: LIST
36386: PUSH
36387: LD_INT 91
36389: PUSH
36390: LD_VAR 0 1
36394: PUSH
36395: LD_INT 18
36397: PUSH
36398: EMPTY
36399: LIST
36400: LIST
36401: LIST
36402: PUSH
36403: EMPTY
36404: LIST
36405: LIST
36406: LIST
36407: PPUSH
36408: CALL_OW 69
36412: NOT
36413: PUSH
36414: LD_INT 22
36416: PUSH
36417: LD_VAR 0 16
36421: PUSH
36422: EMPTY
36423: LIST
36424: LIST
36425: PUSH
36426: LD_INT 2
36428: PUSH
36429: LD_INT 30
36431: PUSH
36432: LD_INT 32
36434: PUSH
36435: EMPTY
36436: LIST
36437: LIST
36438: PUSH
36439: LD_INT 30
36441: PUSH
36442: LD_INT 33
36444: PUSH
36445: EMPTY
36446: LIST
36447: LIST
36448: PUSH
36449: EMPTY
36450: LIST
36451: LIST
36452: LIST
36453: PUSH
36454: LD_INT 91
36456: PUSH
36457: LD_VAR 0 1
36461: PUSH
36462: LD_INT 12
36464: PUSH
36465: EMPTY
36466: LIST
36467: LIST
36468: LIST
36469: PUSH
36470: EMPTY
36471: LIST
36472: LIST
36473: LIST
36474: PUSH
36475: EMPTY
36476: LIST
36477: PPUSH
36478: CALL_OW 69
36482: PUSH
36483: LD_INT 2
36485: GREATER
36486: AND
36487: IFFALSE 36510
// weapon := [ us_radar , ar_radar ] [ nat ] ;
36489: LD_ADDR_VAR 0 18
36493: PUSH
36494: LD_INT 11
36496: PUSH
36497: LD_INT 30
36499: PUSH
36500: EMPTY
36501: LIST
36502: LIST
36503: PUSH
36504: LD_VAR 0 12
36508: ARRAY
36509: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
36510: LD_VAR 0 18
36514: NOT
36515: PUSH
36516: LD_INT 40
36518: PPUSH
36519: LD_VAR 0 16
36523: PPUSH
36524: CALL_OW 321
36528: PUSH
36529: LD_INT 2
36531: EQUAL
36532: AND
36533: PUSH
36534: LD_INT 7
36536: PUSH
36537: LD_VAR 0 5
36541: IN
36542: PUSH
36543: LD_INT 28
36545: PUSH
36546: LD_VAR 0 5
36550: IN
36551: OR
36552: PUSH
36553: LD_INT 45
36555: PUSH
36556: LD_VAR 0 5
36560: IN
36561: OR
36562: AND
36563: IFFALSE 36817
// begin hex := GetHexInfo ( x , y ) ;
36565: LD_ADDR_VAR 0 4
36569: PUSH
36570: LD_VAR 0 10
36574: PPUSH
36575: LD_VAR 0 11
36579: PPUSH
36580: CALL_OW 546
36584: ST_TO_ADDR
// if hex [ 1 ] then
36585: LD_VAR 0 4
36589: PUSH
36590: LD_INT 1
36592: ARRAY
36593: IFFALSE 36597
// exit ;
36595: GO 37000
// height := hex [ 2 ] ;
36597: LD_ADDR_VAR 0 15
36601: PUSH
36602: LD_VAR 0 4
36606: PUSH
36607: LD_INT 2
36609: ARRAY
36610: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
36611: LD_ADDR_VAR 0 14
36615: PUSH
36616: LD_INT 0
36618: PUSH
36619: LD_INT 2
36621: PUSH
36622: LD_INT 3
36624: PUSH
36625: LD_INT 5
36627: PUSH
36628: EMPTY
36629: LIST
36630: LIST
36631: LIST
36632: LIST
36633: ST_TO_ADDR
// for i in tmp do
36634: LD_ADDR_VAR 0 8
36638: PUSH
36639: LD_VAR 0 14
36643: PUSH
36644: FOR_IN
36645: IFFALSE 36815
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
36647: LD_ADDR_VAR 0 9
36651: PUSH
36652: LD_VAR 0 10
36656: PPUSH
36657: LD_VAR 0 8
36661: PPUSH
36662: LD_INT 5
36664: PPUSH
36665: CALL_OW 272
36669: PUSH
36670: LD_VAR 0 11
36674: PPUSH
36675: LD_VAR 0 8
36679: PPUSH
36680: LD_INT 5
36682: PPUSH
36683: CALL_OW 273
36687: PUSH
36688: EMPTY
36689: LIST
36690: LIST
36691: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
36692: LD_VAR 0 9
36696: PUSH
36697: LD_INT 1
36699: ARRAY
36700: PPUSH
36701: LD_VAR 0 9
36705: PUSH
36706: LD_INT 2
36708: ARRAY
36709: PPUSH
36710: CALL_OW 488
36714: IFFALSE 36813
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
36716: LD_ADDR_VAR 0 4
36720: PUSH
36721: LD_VAR 0 9
36725: PUSH
36726: LD_INT 1
36728: ARRAY
36729: PPUSH
36730: LD_VAR 0 9
36734: PUSH
36735: LD_INT 2
36737: ARRAY
36738: PPUSH
36739: CALL_OW 546
36743: ST_TO_ADDR
// if hex [ 1 ] then
36744: LD_VAR 0 4
36748: PUSH
36749: LD_INT 1
36751: ARRAY
36752: IFFALSE 36756
// continue ;
36754: GO 36644
// h := hex [ 2 ] ;
36756: LD_ADDR_VAR 0 13
36760: PUSH
36761: LD_VAR 0 4
36765: PUSH
36766: LD_INT 2
36768: ARRAY
36769: ST_TO_ADDR
// if h + 7 < height then
36770: LD_VAR 0 13
36774: PUSH
36775: LD_INT 7
36777: PLUS
36778: PUSH
36779: LD_VAR 0 15
36783: LESS
36784: IFFALSE 36813
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
36786: LD_ADDR_VAR 0 18
36790: PUSH
36791: LD_INT 7
36793: PUSH
36794: LD_INT 28
36796: PUSH
36797: LD_INT 45
36799: PUSH
36800: EMPTY
36801: LIST
36802: LIST
36803: LIST
36804: PUSH
36805: LD_VAR 0 12
36809: ARRAY
36810: ST_TO_ADDR
// break ;
36811: GO 36815
// end ; end ; end ;
36813: GO 36644
36815: POP
36816: POP
// end ; if not weapon then
36817: LD_VAR 0 18
36821: NOT
36822: IFFALSE 36882
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
36824: LD_ADDR_VAR 0 5
36828: PUSH
36829: LD_VAR 0 5
36833: PUSH
36834: LD_INT 11
36836: PUSH
36837: LD_INT 30
36839: PUSH
36840: LD_INT 49
36842: PUSH
36843: EMPTY
36844: LIST
36845: LIST
36846: LIST
36847: DIFF
36848: ST_TO_ADDR
// if not list then
36849: LD_VAR 0 5
36853: NOT
36854: IFFALSE 36858
// exit ;
36856: GO 37000
// weapon := list [ rand ( 1 , list ) ] ;
36858: LD_ADDR_VAR 0 18
36862: PUSH
36863: LD_VAR 0 5
36867: PUSH
36868: LD_INT 1
36870: PPUSH
36871: LD_VAR 0 5
36875: PPUSH
36876: CALL_OW 12
36880: ARRAY
36881: ST_TO_ADDR
// end ; if weapon then
36882: LD_VAR 0 18
36886: IFFALSE 37000
// begin tmp := CostOfWeapon ( weapon ) ;
36888: LD_ADDR_VAR 0 14
36892: PUSH
36893: LD_VAR 0 18
36897: PPUSH
36898: CALL_OW 451
36902: ST_TO_ADDR
// j := GetBase ( tower ) ;
36903: LD_ADDR_VAR 0 9
36907: PUSH
36908: LD_VAR 0 1
36912: PPUSH
36913: CALL_OW 274
36917: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
36918: LD_VAR 0 9
36922: PPUSH
36923: LD_INT 1
36925: PPUSH
36926: CALL_OW 275
36930: PUSH
36931: LD_VAR 0 14
36935: PUSH
36936: LD_INT 1
36938: ARRAY
36939: GREATEREQUAL
36940: PUSH
36941: LD_VAR 0 9
36945: PPUSH
36946: LD_INT 2
36948: PPUSH
36949: CALL_OW 275
36953: PUSH
36954: LD_VAR 0 14
36958: PUSH
36959: LD_INT 2
36961: ARRAY
36962: GREATEREQUAL
36963: AND
36964: PUSH
36965: LD_VAR 0 9
36969: PPUSH
36970: LD_INT 3
36972: PPUSH
36973: CALL_OW 275
36977: PUSH
36978: LD_VAR 0 14
36982: PUSH
36983: LD_INT 3
36985: ARRAY
36986: GREATEREQUAL
36987: AND
36988: IFFALSE 37000
// result := weapon ;
36990: LD_ADDR_VAR 0 3
36994: PUSH
36995: LD_VAR 0 18
36999: ST_TO_ADDR
// end ; end ;
37000: LD_VAR 0 3
37004: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
37005: LD_INT 0
37007: PPUSH
37008: PPUSH
// result := true ;
37009: LD_ADDR_VAR 0 3
37013: PUSH
37014: LD_INT 1
37016: ST_TO_ADDR
// if array1 = array2 then
37017: LD_VAR 0 1
37021: PUSH
37022: LD_VAR 0 2
37026: EQUAL
37027: IFFALSE 37087
// begin for i = 1 to array1 do
37029: LD_ADDR_VAR 0 4
37033: PUSH
37034: DOUBLE
37035: LD_INT 1
37037: DEC
37038: ST_TO_ADDR
37039: LD_VAR 0 1
37043: PUSH
37044: FOR_TO
37045: IFFALSE 37083
// if array1 [ i ] <> array2 [ i ] then
37047: LD_VAR 0 1
37051: PUSH
37052: LD_VAR 0 4
37056: ARRAY
37057: PUSH
37058: LD_VAR 0 2
37062: PUSH
37063: LD_VAR 0 4
37067: ARRAY
37068: NONEQUAL
37069: IFFALSE 37081
// begin result := false ;
37071: LD_ADDR_VAR 0 3
37075: PUSH
37076: LD_INT 0
37078: ST_TO_ADDR
// break ;
37079: GO 37083
// end ;
37081: GO 37044
37083: POP
37084: POP
// end else
37085: GO 37095
// result := false ;
37087: LD_ADDR_VAR 0 3
37091: PUSH
37092: LD_INT 0
37094: ST_TO_ADDR
// end ;
37095: LD_VAR 0 3
37099: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
37100: LD_INT 0
37102: PPUSH
37103: PPUSH
// if not array1 or not array2 then
37104: LD_VAR 0 1
37108: NOT
37109: PUSH
37110: LD_VAR 0 2
37114: NOT
37115: OR
37116: IFFALSE 37120
// exit ;
37118: GO 37184
// result := true ;
37120: LD_ADDR_VAR 0 3
37124: PUSH
37125: LD_INT 1
37127: ST_TO_ADDR
// for i = 1 to array1 do
37128: LD_ADDR_VAR 0 4
37132: PUSH
37133: DOUBLE
37134: LD_INT 1
37136: DEC
37137: ST_TO_ADDR
37138: LD_VAR 0 1
37142: PUSH
37143: FOR_TO
37144: IFFALSE 37182
// if array1 [ i ] <> array2 [ i ] then
37146: LD_VAR 0 1
37150: PUSH
37151: LD_VAR 0 4
37155: ARRAY
37156: PUSH
37157: LD_VAR 0 2
37161: PUSH
37162: LD_VAR 0 4
37166: ARRAY
37167: NONEQUAL
37168: IFFALSE 37180
// begin result := false ;
37170: LD_ADDR_VAR 0 3
37174: PUSH
37175: LD_INT 0
37177: ST_TO_ADDR
// break ;
37178: GO 37182
// end ;
37180: GO 37143
37182: POP
37183: POP
// end ;
37184: LD_VAR 0 3
37188: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
37189: LD_INT 0
37191: PPUSH
37192: PPUSH
37193: PPUSH
// pom := GetBase ( fac ) ;
37194: LD_ADDR_VAR 0 5
37198: PUSH
37199: LD_VAR 0 1
37203: PPUSH
37204: CALL_OW 274
37208: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
37209: LD_ADDR_VAR 0 4
37213: PUSH
37214: LD_VAR 0 2
37218: PUSH
37219: LD_INT 1
37221: ARRAY
37222: PPUSH
37223: LD_VAR 0 2
37227: PUSH
37228: LD_INT 2
37230: ARRAY
37231: PPUSH
37232: LD_VAR 0 2
37236: PUSH
37237: LD_INT 3
37239: ARRAY
37240: PPUSH
37241: LD_VAR 0 2
37245: PUSH
37246: LD_INT 4
37248: ARRAY
37249: PPUSH
37250: CALL_OW 449
37254: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
37255: LD_ADDR_VAR 0 3
37259: PUSH
37260: LD_VAR 0 5
37264: PPUSH
37265: LD_INT 1
37267: PPUSH
37268: CALL_OW 275
37272: PUSH
37273: LD_VAR 0 4
37277: PUSH
37278: LD_INT 1
37280: ARRAY
37281: GREATEREQUAL
37282: PUSH
37283: LD_VAR 0 5
37287: PPUSH
37288: LD_INT 2
37290: PPUSH
37291: CALL_OW 275
37295: PUSH
37296: LD_VAR 0 4
37300: PUSH
37301: LD_INT 2
37303: ARRAY
37304: GREATEREQUAL
37305: AND
37306: PUSH
37307: LD_VAR 0 5
37311: PPUSH
37312: LD_INT 3
37314: PPUSH
37315: CALL_OW 275
37319: PUSH
37320: LD_VAR 0 4
37324: PUSH
37325: LD_INT 3
37327: ARRAY
37328: GREATEREQUAL
37329: AND
37330: ST_TO_ADDR
// end ;
37331: LD_VAR 0 3
37335: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
37336: LD_INT 0
37338: PPUSH
37339: PPUSH
37340: PPUSH
37341: PPUSH
// pom := GetBase ( building ) ;
37342: LD_ADDR_VAR 0 3
37346: PUSH
37347: LD_VAR 0 1
37351: PPUSH
37352: CALL_OW 274
37356: ST_TO_ADDR
// if not pom then
37357: LD_VAR 0 3
37361: NOT
37362: IFFALSE 37366
// exit ;
37364: GO 37536
// btype := GetBType ( building ) ;
37366: LD_ADDR_VAR 0 5
37370: PUSH
37371: LD_VAR 0 1
37375: PPUSH
37376: CALL_OW 266
37380: ST_TO_ADDR
// if btype = b_armoury then
37381: LD_VAR 0 5
37385: PUSH
37386: LD_INT 4
37388: EQUAL
37389: IFFALSE 37399
// btype := b_barracks ;
37391: LD_ADDR_VAR 0 5
37395: PUSH
37396: LD_INT 5
37398: ST_TO_ADDR
// if btype = b_depot then
37399: LD_VAR 0 5
37403: PUSH
37404: LD_INT 0
37406: EQUAL
37407: IFFALSE 37417
// btype := b_warehouse ;
37409: LD_ADDR_VAR 0 5
37413: PUSH
37414: LD_INT 1
37416: ST_TO_ADDR
// if btype = b_workshop then
37417: LD_VAR 0 5
37421: PUSH
37422: LD_INT 2
37424: EQUAL
37425: IFFALSE 37435
// btype := b_factory ;
37427: LD_ADDR_VAR 0 5
37431: PUSH
37432: LD_INT 3
37434: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
37435: LD_ADDR_VAR 0 4
37439: PUSH
37440: LD_VAR 0 5
37444: PPUSH
37445: LD_VAR 0 1
37449: PPUSH
37450: CALL_OW 248
37454: PPUSH
37455: CALL_OW 450
37459: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
37460: LD_ADDR_VAR 0 2
37464: PUSH
37465: LD_VAR 0 3
37469: PPUSH
37470: LD_INT 1
37472: PPUSH
37473: CALL_OW 275
37477: PUSH
37478: LD_VAR 0 4
37482: PUSH
37483: LD_INT 1
37485: ARRAY
37486: GREATEREQUAL
37487: PUSH
37488: LD_VAR 0 3
37492: PPUSH
37493: LD_INT 2
37495: PPUSH
37496: CALL_OW 275
37500: PUSH
37501: LD_VAR 0 4
37505: PUSH
37506: LD_INT 2
37508: ARRAY
37509: GREATEREQUAL
37510: AND
37511: PUSH
37512: LD_VAR 0 3
37516: PPUSH
37517: LD_INT 3
37519: PPUSH
37520: CALL_OW 275
37524: PUSH
37525: LD_VAR 0 4
37529: PUSH
37530: LD_INT 3
37532: ARRAY
37533: GREATEREQUAL
37534: AND
37535: ST_TO_ADDR
// end ;
37536: LD_VAR 0 2
37540: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
37541: LD_INT 0
37543: PPUSH
37544: PPUSH
37545: PPUSH
// pom := GetBase ( building ) ;
37546: LD_ADDR_VAR 0 4
37550: PUSH
37551: LD_VAR 0 1
37555: PPUSH
37556: CALL_OW 274
37560: ST_TO_ADDR
// if not pom then
37561: LD_VAR 0 4
37565: NOT
37566: IFFALSE 37570
// exit ;
37568: GO 37671
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
37570: LD_ADDR_VAR 0 5
37574: PUSH
37575: LD_VAR 0 2
37579: PPUSH
37580: LD_VAR 0 1
37584: PPUSH
37585: CALL_OW 248
37589: PPUSH
37590: CALL_OW 450
37594: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
37595: LD_ADDR_VAR 0 3
37599: PUSH
37600: LD_VAR 0 4
37604: PPUSH
37605: LD_INT 1
37607: PPUSH
37608: CALL_OW 275
37612: PUSH
37613: LD_VAR 0 5
37617: PUSH
37618: LD_INT 1
37620: ARRAY
37621: GREATEREQUAL
37622: PUSH
37623: LD_VAR 0 4
37627: PPUSH
37628: LD_INT 2
37630: PPUSH
37631: CALL_OW 275
37635: PUSH
37636: LD_VAR 0 5
37640: PUSH
37641: LD_INT 2
37643: ARRAY
37644: GREATEREQUAL
37645: AND
37646: PUSH
37647: LD_VAR 0 4
37651: PPUSH
37652: LD_INT 3
37654: PPUSH
37655: CALL_OW 275
37659: PUSH
37660: LD_VAR 0 5
37664: PUSH
37665: LD_INT 3
37667: ARRAY
37668: GREATEREQUAL
37669: AND
37670: ST_TO_ADDR
// end ;
37671: LD_VAR 0 3
37675: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
37676: LD_INT 0
37678: PPUSH
37679: PPUSH
37680: PPUSH
37681: PPUSH
37682: PPUSH
37683: PPUSH
37684: PPUSH
37685: PPUSH
37686: PPUSH
37687: PPUSH
37688: PPUSH
// result := false ;
37689: LD_ADDR_VAR 0 8
37693: PUSH
37694: LD_INT 0
37696: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
37697: LD_VAR 0 5
37701: NOT
37702: PUSH
37703: LD_VAR 0 1
37707: NOT
37708: OR
37709: PUSH
37710: LD_VAR 0 2
37714: NOT
37715: OR
37716: PUSH
37717: LD_VAR 0 3
37721: NOT
37722: OR
37723: IFFALSE 37727
// exit ;
37725: GO 38541
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
37727: LD_ADDR_VAR 0 14
37731: PUSH
37732: LD_VAR 0 1
37736: PPUSH
37737: LD_VAR 0 2
37741: PPUSH
37742: LD_VAR 0 3
37746: PPUSH
37747: LD_VAR 0 4
37751: PPUSH
37752: LD_VAR 0 5
37756: PUSH
37757: LD_INT 1
37759: ARRAY
37760: PPUSH
37761: CALL_OW 248
37765: PPUSH
37766: LD_INT 0
37768: PPUSH
37769: CALL 39778 0 6
37773: ST_TO_ADDR
// if not hexes then
37774: LD_VAR 0 14
37778: NOT
37779: IFFALSE 37783
// exit ;
37781: GO 38541
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
37783: LD_ADDR_VAR 0 17
37787: PUSH
37788: LD_VAR 0 5
37792: PPUSH
37793: LD_INT 22
37795: PUSH
37796: LD_VAR 0 13
37800: PPUSH
37801: CALL_OW 255
37805: PUSH
37806: EMPTY
37807: LIST
37808: LIST
37809: PUSH
37810: LD_INT 2
37812: PUSH
37813: LD_INT 30
37815: PUSH
37816: LD_INT 0
37818: PUSH
37819: EMPTY
37820: LIST
37821: LIST
37822: PUSH
37823: LD_INT 30
37825: PUSH
37826: LD_INT 1
37828: PUSH
37829: EMPTY
37830: LIST
37831: LIST
37832: PUSH
37833: EMPTY
37834: LIST
37835: LIST
37836: LIST
37837: PUSH
37838: EMPTY
37839: LIST
37840: LIST
37841: PPUSH
37842: CALL_OW 72
37846: ST_TO_ADDR
// for i = 1 to hexes do
37847: LD_ADDR_VAR 0 9
37851: PUSH
37852: DOUBLE
37853: LD_INT 1
37855: DEC
37856: ST_TO_ADDR
37857: LD_VAR 0 14
37861: PUSH
37862: FOR_TO
37863: IFFALSE 38539
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
37865: LD_ADDR_VAR 0 13
37869: PUSH
37870: LD_VAR 0 14
37874: PUSH
37875: LD_VAR 0 9
37879: ARRAY
37880: PUSH
37881: LD_INT 1
37883: ARRAY
37884: PPUSH
37885: LD_VAR 0 14
37889: PUSH
37890: LD_VAR 0 9
37894: ARRAY
37895: PUSH
37896: LD_INT 2
37898: ARRAY
37899: PPUSH
37900: CALL_OW 428
37904: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
37905: LD_VAR 0 14
37909: PUSH
37910: LD_VAR 0 9
37914: ARRAY
37915: PUSH
37916: LD_INT 1
37918: ARRAY
37919: PPUSH
37920: LD_VAR 0 14
37924: PUSH
37925: LD_VAR 0 9
37929: ARRAY
37930: PUSH
37931: LD_INT 2
37933: ARRAY
37934: PPUSH
37935: CALL_OW 351
37939: PUSH
37940: LD_VAR 0 14
37944: PUSH
37945: LD_VAR 0 9
37949: ARRAY
37950: PUSH
37951: LD_INT 1
37953: ARRAY
37954: PPUSH
37955: LD_VAR 0 14
37959: PUSH
37960: LD_VAR 0 9
37964: ARRAY
37965: PUSH
37966: LD_INT 2
37968: ARRAY
37969: PPUSH
37970: CALL_OW 488
37974: NOT
37975: OR
37976: PUSH
37977: LD_VAR 0 13
37981: PPUSH
37982: CALL_OW 247
37986: PUSH
37987: LD_INT 3
37989: EQUAL
37990: OR
37991: IFFALSE 37997
// exit ;
37993: POP
37994: POP
37995: GO 38541
// if not tmp then
37997: LD_VAR 0 13
38001: NOT
38002: IFFALSE 38006
// continue ;
38004: GO 37862
// result := true ;
38006: LD_ADDR_VAR 0 8
38010: PUSH
38011: LD_INT 1
38013: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
38014: LD_VAR 0 6
38018: PUSH
38019: LD_VAR 0 13
38023: PPUSH
38024: CALL_OW 247
38028: PUSH
38029: LD_INT 2
38031: EQUAL
38032: AND
38033: PUSH
38034: LD_VAR 0 13
38038: PPUSH
38039: CALL_OW 263
38043: PUSH
38044: LD_INT 1
38046: EQUAL
38047: AND
38048: IFFALSE 38212
// begin if IsDrivenBy ( tmp ) then
38050: LD_VAR 0 13
38054: PPUSH
38055: CALL_OW 311
38059: IFFALSE 38063
// continue ;
38061: GO 37862
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
38063: LD_VAR 0 6
38067: PPUSH
38068: LD_INT 3
38070: PUSH
38071: LD_INT 60
38073: PUSH
38074: EMPTY
38075: LIST
38076: PUSH
38077: EMPTY
38078: LIST
38079: LIST
38080: PUSH
38081: LD_INT 3
38083: PUSH
38084: LD_INT 55
38086: PUSH
38087: EMPTY
38088: LIST
38089: PUSH
38090: EMPTY
38091: LIST
38092: LIST
38093: PUSH
38094: EMPTY
38095: LIST
38096: LIST
38097: PPUSH
38098: CALL_OW 72
38102: IFFALSE 38210
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
38104: LD_ADDR_VAR 0 18
38108: PUSH
38109: LD_VAR 0 6
38113: PPUSH
38114: LD_INT 3
38116: PUSH
38117: LD_INT 60
38119: PUSH
38120: EMPTY
38121: LIST
38122: PUSH
38123: EMPTY
38124: LIST
38125: LIST
38126: PUSH
38127: LD_INT 3
38129: PUSH
38130: LD_INT 55
38132: PUSH
38133: EMPTY
38134: LIST
38135: PUSH
38136: EMPTY
38137: LIST
38138: LIST
38139: PUSH
38140: EMPTY
38141: LIST
38142: LIST
38143: PPUSH
38144: CALL_OW 72
38148: PUSH
38149: LD_INT 1
38151: ARRAY
38152: ST_TO_ADDR
// if IsInUnit ( driver ) then
38153: LD_VAR 0 18
38157: PPUSH
38158: CALL_OW 310
38162: IFFALSE 38173
// ComExit ( driver ) ;
38164: LD_VAR 0 18
38168: PPUSH
38169: CALL 62962 0 1
// AddComEnterUnit ( driver , tmp ) ;
38173: LD_VAR 0 18
38177: PPUSH
38178: LD_VAR 0 13
38182: PPUSH
38183: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
38187: LD_VAR 0 18
38191: PPUSH
38192: LD_VAR 0 7
38196: PPUSH
38197: CALL_OW 173
// AddComExitVehicle ( driver ) ;
38201: LD_VAR 0 18
38205: PPUSH
38206: CALL_OW 181
// end ; continue ;
38210: GO 37862
// end ; if not cleaners or not tmp in cleaners then
38212: LD_VAR 0 6
38216: NOT
38217: PUSH
38218: LD_VAR 0 13
38222: PUSH
38223: LD_VAR 0 6
38227: IN
38228: NOT
38229: OR
38230: IFFALSE 38537
// begin if dep then
38232: LD_VAR 0 17
38236: IFFALSE 38372
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
38238: LD_ADDR_VAR 0 16
38242: PUSH
38243: LD_VAR 0 17
38247: PUSH
38248: LD_INT 1
38250: ARRAY
38251: PPUSH
38252: CALL_OW 250
38256: PPUSH
38257: LD_VAR 0 17
38261: PUSH
38262: LD_INT 1
38264: ARRAY
38265: PPUSH
38266: CALL_OW 254
38270: PPUSH
38271: LD_INT 5
38273: PPUSH
38274: CALL_OW 272
38278: PUSH
38279: LD_VAR 0 17
38283: PUSH
38284: LD_INT 1
38286: ARRAY
38287: PPUSH
38288: CALL_OW 251
38292: PPUSH
38293: LD_VAR 0 17
38297: PUSH
38298: LD_INT 1
38300: ARRAY
38301: PPUSH
38302: CALL_OW 254
38306: PPUSH
38307: LD_INT 5
38309: PPUSH
38310: CALL_OW 273
38314: PUSH
38315: EMPTY
38316: LIST
38317: LIST
38318: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
38319: LD_VAR 0 16
38323: PUSH
38324: LD_INT 1
38326: ARRAY
38327: PPUSH
38328: LD_VAR 0 16
38332: PUSH
38333: LD_INT 2
38335: ARRAY
38336: PPUSH
38337: CALL_OW 488
38341: IFFALSE 38372
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
38343: LD_VAR 0 13
38347: PPUSH
38348: LD_VAR 0 16
38352: PUSH
38353: LD_INT 1
38355: ARRAY
38356: PPUSH
38357: LD_VAR 0 16
38361: PUSH
38362: LD_INT 2
38364: ARRAY
38365: PPUSH
38366: CALL_OW 111
// continue ;
38370: GO 37862
// end ; end ; r := GetDir ( tmp ) ;
38372: LD_ADDR_VAR 0 15
38376: PUSH
38377: LD_VAR 0 13
38381: PPUSH
38382: CALL_OW 254
38386: ST_TO_ADDR
// if r = 5 then
38387: LD_VAR 0 15
38391: PUSH
38392: LD_INT 5
38394: EQUAL
38395: IFFALSE 38405
// r := 0 ;
38397: LD_ADDR_VAR 0 15
38401: PUSH
38402: LD_INT 0
38404: ST_TO_ADDR
// for j = r to 5 do
38405: LD_ADDR_VAR 0 10
38409: PUSH
38410: DOUBLE
38411: LD_VAR 0 15
38415: DEC
38416: ST_TO_ADDR
38417: LD_INT 5
38419: PUSH
38420: FOR_TO
38421: IFFALSE 38535
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
38423: LD_ADDR_VAR 0 11
38427: PUSH
38428: LD_VAR 0 13
38432: PPUSH
38433: CALL_OW 250
38437: PPUSH
38438: LD_VAR 0 10
38442: PPUSH
38443: LD_INT 2
38445: PPUSH
38446: CALL_OW 272
38450: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
38451: LD_ADDR_VAR 0 12
38455: PUSH
38456: LD_VAR 0 13
38460: PPUSH
38461: CALL_OW 251
38465: PPUSH
38466: LD_VAR 0 10
38470: PPUSH
38471: LD_INT 2
38473: PPUSH
38474: CALL_OW 273
38478: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
38479: LD_VAR 0 11
38483: PPUSH
38484: LD_VAR 0 12
38488: PPUSH
38489: CALL_OW 488
38493: PUSH
38494: LD_VAR 0 11
38498: PPUSH
38499: LD_VAR 0 12
38503: PPUSH
38504: CALL_OW 428
38508: NOT
38509: AND
38510: IFFALSE 38533
// begin ComMoveXY ( tmp , _x , _y ) ;
38512: LD_VAR 0 13
38516: PPUSH
38517: LD_VAR 0 11
38521: PPUSH
38522: LD_VAR 0 12
38526: PPUSH
38527: CALL_OW 111
// break ;
38531: GO 38535
// end ; end ;
38533: GO 38420
38535: POP
38536: POP
// end ; end ;
38537: GO 37862
38539: POP
38540: POP
// end ;
38541: LD_VAR 0 8
38545: RET
// export function BuildingTechInvented ( side , btype ) ; begin
38546: LD_INT 0
38548: PPUSH
// result := true ;
38549: LD_ADDR_VAR 0 3
38553: PUSH
38554: LD_INT 1
38556: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
38557: LD_VAR 0 2
38561: PUSH
38562: LD_INT 24
38564: DOUBLE
38565: EQUAL
38566: IFTRUE 38576
38568: LD_INT 33
38570: DOUBLE
38571: EQUAL
38572: IFTRUE 38576
38574: GO 38601
38576: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
38577: LD_ADDR_VAR 0 3
38581: PUSH
38582: LD_INT 32
38584: PPUSH
38585: LD_VAR 0 1
38589: PPUSH
38590: CALL_OW 321
38594: PUSH
38595: LD_INT 2
38597: EQUAL
38598: ST_TO_ADDR
38599: GO 38921
38601: LD_INT 20
38603: DOUBLE
38604: EQUAL
38605: IFTRUE 38609
38607: GO 38634
38609: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
38610: LD_ADDR_VAR 0 3
38614: PUSH
38615: LD_INT 6
38617: PPUSH
38618: LD_VAR 0 1
38622: PPUSH
38623: CALL_OW 321
38627: PUSH
38628: LD_INT 2
38630: EQUAL
38631: ST_TO_ADDR
38632: GO 38921
38634: LD_INT 22
38636: DOUBLE
38637: EQUAL
38638: IFTRUE 38648
38640: LD_INT 36
38642: DOUBLE
38643: EQUAL
38644: IFTRUE 38648
38646: GO 38673
38648: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
38649: LD_ADDR_VAR 0 3
38653: PUSH
38654: LD_INT 15
38656: PPUSH
38657: LD_VAR 0 1
38661: PPUSH
38662: CALL_OW 321
38666: PUSH
38667: LD_INT 2
38669: EQUAL
38670: ST_TO_ADDR
38671: GO 38921
38673: LD_INT 30
38675: DOUBLE
38676: EQUAL
38677: IFTRUE 38681
38679: GO 38706
38681: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
38682: LD_ADDR_VAR 0 3
38686: PUSH
38687: LD_INT 20
38689: PPUSH
38690: LD_VAR 0 1
38694: PPUSH
38695: CALL_OW 321
38699: PUSH
38700: LD_INT 2
38702: EQUAL
38703: ST_TO_ADDR
38704: GO 38921
38706: LD_INT 28
38708: DOUBLE
38709: EQUAL
38710: IFTRUE 38720
38712: LD_INT 21
38714: DOUBLE
38715: EQUAL
38716: IFTRUE 38720
38718: GO 38745
38720: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
38721: LD_ADDR_VAR 0 3
38725: PUSH
38726: LD_INT 21
38728: PPUSH
38729: LD_VAR 0 1
38733: PPUSH
38734: CALL_OW 321
38738: PUSH
38739: LD_INT 2
38741: EQUAL
38742: ST_TO_ADDR
38743: GO 38921
38745: LD_INT 16
38747: DOUBLE
38748: EQUAL
38749: IFTRUE 38753
38751: GO 38780
38753: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
38754: LD_ADDR_VAR 0 3
38758: PUSH
38759: LD_EXP 41
38763: PPUSH
38764: LD_VAR 0 1
38768: PPUSH
38769: CALL_OW 321
38773: PUSH
38774: LD_INT 2
38776: EQUAL
38777: ST_TO_ADDR
38778: GO 38921
38780: LD_INT 19
38782: DOUBLE
38783: EQUAL
38784: IFTRUE 38794
38786: LD_INT 23
38788: DOUBLE
38789: EQUAL
38790: IFTRUE 38794
38792: GO 38821
38794: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
38795: LD_ADDR_VAR 0 3
38799: PUSH
38800: LD_EXP 40
38804: PPUSH
38805: LD_VAR 0 1
38809: PPUSH
38810: CALL_OW 321
38814: PUSH
38815: LD_INT 2
38817: EQUAL
38818: ST_TO_ADDR
38819: GO 38921
38821: LD_INT 17
38823: DOUBLE
38824: EQUAL
38825: IFTRUE 38829
38827: GO 38854
38829: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
38830: LD_ADDR_VAR 0 3
38834: PUSH
38835: LD_INT 39
38837: PPUSH
38838: LD_VAR 0 1
38842: PPUSH
38843: CALL_OW 321
38847: PUSH
38848: LD_INT 2
38850: EQUAL
38851: ST_TO_ADDR
38852: GO 38921
38854: LD_INT 18
38856: DOUBLE
38857: EQUAL
38858: IFTRUE 38862
38860: GO 38887
38862: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
38863: LD_ADDR_VAR 0 3
38867: PUSH
38868: LD_INT 40
38870: PPUSH
38871: LD_VAR 0 1
38875: PPUSH
38876: CALL_OW 321
38880: PUSH
38881: LD_INT 2
38883: EQUAL
38884: ST_TO_ADDR
38885: GO 38921
38887: LD_INT 27
38889: DOUBLE
38890: EQUAL
38891: IFTRUE 38895
38893: GO 38920
38895: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
38896: LD_ADDR_VAR 0 3
38900: PUSH
38901: LD_INT 35
38903: PPUSH
38904: LD_VAR 0 1
38908: PPUSH
38909: CALL_OW 321
38913: PUSH
38914: LD_INT 2
38916: EQUAL
38917: ST_TO_ADDR
38918: GO 38921
38920: POP
// end ;
38921: LD_VAR 0 3
38925: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
38926: LD_INT 0
38928: PPUSH
38929: PPUSH
38930: PPUSH
38931: PPUSH
38932: PPUSH
38933: PPUSH
38934: PPUSH
38935: PPUSH
38936: PPUSH
38937: PPUSH
38938: PPUSH
// result := false ;
38939: LD_ADDR_VAR 0 6
38943: PUSH
38944: LD_INT 0
38946: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
38947: LD_VAR 0 1
38951: NOT
38952: PUSH
38953: LD_VAR 0 1
38957: PPUSH
38958: CALL_OW 266
38962: PUSH
38963: LD_INT 0
38965: PUSH
38966: LD_INT 1
38968: PUSH
38969: EMPTY
38970: LIST
38971: LIST
38972: IN
38973: NOT
38974: OR
38975: PUSH
38976: LD_VAR 0 2
38980: NOT
38981: OR
38982: PUSH
38983: LD_VAR 0 5
38987: PUSH
38988: LD_INT 0
38990: PUSH
38991: LD_INT 1
38993: PUSH
38994: LD_INT 2
38996: PUSH
38997: LD_INT 3
38999: PUSH
39000: LD_INT 4
39002: PUSH
39003: LD_INT 5
39005: PUSH
39006: EMPTY
39007: LIST
39008: LIST
39009: LIST
39010: LIST
39011: LIST
39012: LIST
39013: IN
39014: NOT
39015: OR
39016: PUSH
39017: LD_VAR 0 3
39021: PPUSH
39022: LD_VAR 0 4
39026: PPUSH
39027: CALL_OW 488
39031: NOT
39032: OR
39033: IFFALSE 39037
// exit ;
39035: GO 39773
// side := GetSide ( depot ) ;
39037: LD_ADDR_VAR 0 9
39041: PUSH
39042: LD_VAR 0 1
39046: PPUSH
39047: CALL_OW 255
39051: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
39052: LD_VAR 0 9
39056: PPUSH
39057: LD_VAR 0 2
39061: PPUSH
39062: CALL 38546 0 2
39066: NOT
39067: IFFALSE 39071
// exit ;
39069: GO 39773
// pom := GetBase ( depot ) ;
39071: LD_ADDR_VAR 0 10
39075: PUSH
39076: LD_VAR 0 1
39080: PPUSH
39081: CALL_OW 274
39085: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
39086: LD_ADDR_VAR 0 11
39090: PUSH
39091: LD_VAR 0 2
39095: PPUSH
39096: LD_VAR 0 1
39100: PPUSH
39101: CALL_OW 248
39105: PPUSH
39106: CALL_OW 450
39110: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
39111: LD_VAR 0 10
39115: PPUSH
39116: LD_INT 1
39118: PPUSH
39119: CALL_OW 275
39123: PUSH
39124: LD_VAR 0 11
39128: PUSH
39129: LD_INT 1
39131: ARRAY
39132: GREATEREQUAL
39133: PUSH
39134: LD_VAR 0 10
39138: PPUSH
39139: LD_INT 2
39141: PPUSH
39142: CALL_OW 275
39146: PUSH
39147: LD_VAR 0 11
39151: PUSH
39152: LD_INT 2
39154: ARRAY
39155: GREATEREQUAL
39156: AND
39157: PUSH
39158: LD_VAR 0 10
39162: PPUSH
39163: LD_INT 3
39165: PPUSH
39166: CALL_OW 275
39170: PUSH
39171: LD_VAR 0 11
39175: PUSH
39176: LD_INT 3
39178: ARRAY
39179: GREATEREQUAL
39180: AND
39181: NOT
39182: IFFALSE 39186
// exit ;
39184: GO 39773
// if GetBType ( depot ) = b_depot then
39186: LD_VAR 0 1
39190: PPUSH
39191: CALL_OW 266
39195: PUSH
39196: LD_INT 0
39198: EQUAL
39199: IFFALSE 39211
// dist := 28 else
39201: LD_ADDR_VAR 0 14
39205: PUSH
39206: LD_INT 28
39208: ST_TO_ADDR
39209: GO 39219
// dist := 36 ;
39211: LD_ADDR_VAR 0 14
39215: PUSH
39216: LD_INT 36
39218: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
39219: LD_VAR 0 1
39223: PPUSH
39224: LD_VAR 0 3
39228: PPUSH
39229: LD_VAR 0 4
39233: PPUSH
39234: CALL_OW 297
39238: PUSH
39239: LD_VAR 0 14
39243: GREATER
39244: IFFALSE 39248
// exit ;
39246: GO 39773
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
39248: LD_ADDR_VAR 0 12
39252: PUSH
39253: LD_VAR 0 2
39257: PPUSH
39258: LD_VAR 0 3
39262: PPUSH
39263: LD_VAR 0 4
39267: PPUSH
39268: LD_VAR 0 5
39272: PPUSH
39273: LD_VAR 0 1
39277: PPUSH
39278: CALL_OW 248
39282: PPUSH
39283: LD_INT 0
39285: PPUSH
39286: CALL 39778 0 6
39290: ST_TO_ADDR
// if not hexes then
39291: LD_VAR 0 12
39295: NOT
39296: IFFALSE 39300
// exit ;
39298: GO 39773
// hex := GetHexInfo ( x , y ) ;
39300: LD_ADDR_VAR 0 15
39304: PUSH
39305: LD_VAR 0 3
39309: PPUSH
39310: LD_VAR 0 4
39314: PPUSH
39315: CALL_OW 546
39319: ST_TO_ADDR
// if hex [ 1 ] then
39320: LD_VAR 0 15
39324: PUSH
39325: LD_INT 1
39327: ARRAY
39328: IFFALSE 39332
// exit ;
39330: GO 39773
// height := hex [ 2 ] ;
39332: LD_ADDR_VAR 0 13
39336: PUSH
39337: LD_VAR 0 15
39341: PUSH
39342: LD_INT 2
39344: ARRAY
39345: ST_TO_ADDR
// for i = 1 to hexes do
39346: LD_ADDR_VAR 0 7
39350: PUSH
39351: DOUBLE
39352: LD_INT 1
39354: DEC
39355: ST_TO_ADDR
39356: LD_VAR 0 12
39360: PUSH
39361: FOR_TO
39362: IFFALSE 39692
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
39364: LD_VAR 0 12
39368: PUSH
39369: LD_VAR 0 7
39373: ARRAY
39374: PUSH
39375: LD_INT 1
39377: ARRAY
39378: PPUSH
39379: LD_VAR 0 12
39383: PUSH
39384: LD_VAR 0 7
39388: ARRAY
39389: PUSH
39390: LD_INT 2
39392: ARRAY
39393: PPUSH
39394: CALL_OW 488
39398: NOT
39399: PUSH
39400: LD_VAR 0 12
39404: PUSH
39405: LD_VAR 0 7
39409: ARRAY
39410: PUSH
39411: LD_INT 1
39413: ARRAY
39414: PPUSH
39415: LD_VAR 0 12
39419: PUSH
39420: LD_VAR 0 7
39424: ARRAY
39425: PUSH
39426: LD_INT 2
39428: ARRAY
39429: PPUSH
39430: CALL_OW 428
39434: PUSH
39435: LD_INT 0
39437: GREATER
39438: OR
39439: PUSH
39440: LD_VAR 0 12
39444: PUSH
39445: LD_VAR 0 7
39449: ARRAY
39450: PUSH
39451: LD_INT 1
39453: ARRAY
39454: PPUSH
39455: LD_VAR 0 12
39459: PUSH
39460: LD_VAR 0 7
39464: ARRAY
39465: PUSH
39466: LD_INT 2
39468: ARRAY
39469: PPUSH
39470: CALL_OW 351
39474: OR
39475: IFFALSE 39481
// exit ;
39477: POP
39478: POP
39479: GO 39773
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
39481: LD_ADDR_VAR 0 8
39485: PUSH
39486: LD_VAR 0 12
39490: PUSH
39491: LD_VAR 0 7
39495: ARRAY
39496: PUSH
39497: LD_INT 1
39499: ARRAY
39500: PPUSH
39501: LD_VAR 0 12
39505: PUSH
39506: LD_VAR 0 7
39510: ARRAY
39511: PUSH
39512: LD_INT 2
39514: ARRAY
39515: PPUSH
39516: CALL_OW 546
39520: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
39521: LD_VAR 0 8
39525: PUSH
39526: LD_INT 1
39528: ARRAY
39529: PUSH
39530: LD_VAR 0 8
39534: PUSH
39535: LD_INT 2
39537: ARRAY
39538: PUSH
39539: LD_VAR 0 13
39543: PUSH
39544: LD_INT 2
39546: PLUS
39547: GREATER
39548: OR
39549: PUSH
39550: LD_VAR 0 8
39554: PUSH
39555: LD_INT 2
39557: ARRAY
39558: PUSH
39559: LD_VAR 0 13
39563: PUSH
39564: LD_INT 2
39566: MINUS
39567: LESS
39568: OR
39569: PUSH
39570: LD_VAR 0 8
39574: PUSH
39575: LD_INT 3
39577: ARRAY
39578: PUSH
39579: LD_INT 0
39581: PUSH
39582: LD_INT 8
39584: PUSH
39585: LD_INT 9
39587: PUSH
39588: LD_INT 10
39590: PUSH
39591: LD_INT 11
39593: PUSH
39594: LD_INT 12
39596: PUSH
39597: LD_INT 13
39599: PUSH
39600: LD_INT 16
39602: PUSH
39603: LD_INT 17
39605: PUSH
39606: LD_INT 18
39608: PUSH
39609: LD_INT 19
39611: PUSH
39612: LD_INT 20
39614: PUSH
39615: LD_INT 21
39617: PUSH
39618: EMPTY
39619: LIST
39620: LIST
39621: LIST
39622: LIST
39623: LIST
39624: LIST
39625: LIST
39626: LIST
39627: LIST
39628: LIST
39629: LIST
39630: LIST
39631: LIST
39632: IN
39633: NOT
39634: OR
39635: PUSH
39636: LD_VAR 0 8
39640: PUSH
39641: LD_INT 5
39643: ARRAY
39644: NOT
39645: OR
39646: PUSH
39647: LD_VAR 0 8
39651: PUSH
39652: LD_INT 6
39654: ARRAY
39655: PUSH
39656: LD_INT 1
39658: PUSH
39659: LD_INT 2
39661: PUSH
39662: LD_INT 7
39664: PUSH
39665: LD_INT 9
39667: PUSH
39668: LD_INT 10
39670: PUSH
39671: LD_INT 11
39673: PUSH
39674: EMPTY
39675: LIST
39676: LIST
39677: LIST
39678: LIST
39679: LIST
39680: LIST
39681: IN
39682: NOT
39683: OR
39684: IFFALSE 39690
// exit ;
39686: POP
39687: POP
39688: GO 39773
// end ;
39690: GO 39361
39692: POP
39693: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
39694: LD_VAR 0 9
39698: PPUSH
39699: LD_VAR 0 3
39703: PPUSH
39704: LD_VAR 0 4
39708: PPUSH
39709: LD_INT 20
39711: PPUSH
39712: CALL 31719 0 4
39716: PUSH
39717: LD_INT 4
39719: ARRAY
39720: IFFALSE 39724
// exit ;
39722: GO 39773
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
39724: LD_VAR 0 2
39728: PUSH
39729: LD_INT 29
39731: PUSH
39732: LD_INT 30
39734: PUSH
39735: EMPTY
39736: LIST
39737: LIST
39738: IN
39739: PUSH
39740: LD_VAR 0 3
39744: PPUSH
39745: LD_VAR 0 4
39749: PPUSH
39750: LD_VAR 0 9
39754: PPUSH
39755: CALL_OW 440
39759: NOT
39760: AND
39761: IFFALSE 39765
// exit ;
39763: GO 39773
// result := true ;
39765: LD_ADDR_VAR 0 6
39769: PUSH
39770: LD_INT 1
39772: ST_TO_ADDR
// end ;
39773: LD_VAR 0 6
39777: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
39778: LD_INT 0
39780: PPUSH
39781: PPUSH
39782: PPUSH
39783: PPUSH
39784: PPUSH
39785: PPUSH
39786: PPUSH
39787: PPUSH
39788: PPUSH
39789: PPUSH
39790: PPUSH
39791: PPUSH
39792: PPUSH
39793: PPUSH
39794: PPUSH
39795: PPUSH
39796: PPUSH
39797: PPUSH
39798: PPUSH
39799: PPUSH
39800: PPUSH
39801: PPUSH
39802: PPUSH
39803: PPUSH
39804: PPUSH
39805: PPUSH
39806: PPUSH
39807: PPUSH
39808: PPUSH
39809: PPUSH
39810: PPUSH
39811: PPUSH
39812: PPUSH
39813: PPUSH
39814: PPUSH
39815: PPUSH
39816: PPUSH
39817: PPUSH
39818: PPUSH
39819: PPUSH
39820: PPUSH
39821: PPUSH
39822: PPUSH
39823: PPUSH
39824: PPUSH
39825: PPUSH
39826: PPUSH
39827: PPUSH
39828: PPUSH
39829: PPUSH
39830: PPUSH
39831: PPUSH
39832: PPUSH
39833: PPUSH
39834: PPUSH
39835: PPUSH
39836: PPUSH
39837: PPUSH
// result = [ ] ;
39838: LD_ADDR_VAR 0 7
39842: PUSH
39843: EMPTY
39844: ST_TO_ADDR
// temp_list = [ ] ;
39845: LD_ADDR_VAR 0 9
39849: PUSH
39850: EMPTY
39851: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
39852: LD_VAR 0 4
39856: PUSH
39857: LD_INT 0
39859: PUSH
39860: LD_INT 1
39862: PUSH
39863: LD_INT 2
39865: PUSH
39866: LD_INT 3
39868: PUSH
39869: LD_INT 4
39871: PUSH
39872: LD_INT 5
39874: PUSH
39875: EMPTY
39876: LIST
39877: LIST
39878: LIST
39879: LIST
39880: LIST
39881: LIST
39882: IN
39883: NOT
39884: PUSH
39885: LD_VAR 0 1
39889: PUSH
39890: LD_INT 0
39892: PUSH
39893: LD_INT 1
39895: PUSH
39896: EMPTY
39897: LIST
39898: LIST
39899: IN
39900: PUSH
39901: LD_VAR 0 5
39905: PUSH
39906: LD_INT 1
39908: PUSH
39909: LD_INT 2
39911: PUSH
39912: LD_INT 3
39914: PUSH
39915: EMPTY
39916: LIST
39917: LIST
39918: LIST
39919: IN
39920: NOT
39921: AND
39922: OR
39923: IFFALSE 39927
// exit ;
39925: GO 58318
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
39927: LD_VAR 0 1
39931: PUSH
39932: LD_INT 6
39934: PUSH
39935: LD_INT 7
39937: PUSH
39938: LD_INT 8
39940: PUSH
39941: LD_INT 13
39943: PUSH
39944: LD_INT 12
39946: PUSH
39947: LD_INT 15
39949: PUSH
39950: LD_INT 11
39952: PUSH
39953: LD_INT 14
39955: PUSH
39956: LD_INT 10
39958: PUSH
39959: EMPTY
39960: LIST
39961: LIST
39962: LIST
39963: LIST
39964: LIST
39965: LIST
39966: LIST
39967: LIST
39968: LIST
39969: IN
39970: IFFALSE 39980
// btype = b_lab ;
39972: LD_ADDR_VAR 0 1
39976: PUSH
39977: LD_INT 6
39979: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
39980: LD_VAR 0 6
39984: PUSH
39985: LD_INT 0
39987: PUSH
39988: LD_INT 1
39990: PUSH
39991: LD_INT 2
39993: PUSH
39994: EMPTY
39995: LIST
39996: LIST
39997: LIST
39998: IN
39999: NOT
40000: PUSH
40001: LD_VAR 0 1
40005: PUSH
40006: LD_INT 0
40008: PUSH
40009: LD_INT 1
40011: PUSH
40012: LD_INT 2
40014: PUSH
40015: LD_INT 3
40017: PUSH
40018: LD_INT 6
40020: PUSH
40021: LD_INT 36
40023: PUSH
40024: LD_INT 4
40026: PUSH
40027: LD_INT 5
40029: PUSH
40030: LD_INT 31
40032: PUSH
40033: LD_INT 32
40035: PUSH
40036: LD_INT 33
40038: PUSH
40039: EMPTY
40040: LIST
40041: LIST
40042: LIST
40043: LIST
40044: LIST
40045: LIST
40046: LIST
40047: LIST
40048: LIST
40049: LIST
40050: LIST
40051: IN
40052: NOT
40053: PUSH
40054: LD_VAR 0 6
40058: PUSH
40059: LD_INT 1
40061: EQUAL
40062: AND
40063: OR
40064: PUSH
40065: LD_VAR 0 1
40069: PUSH
40070: LD_INT 2
40072: PUSH
40073: LD_INT 3
40075: PUSH
40076: EMPTY
40077: LIST
40078: LIST
40079: IN
40080: NOT
40081: PUSH
40082: LD_VAR 0 6
40086: PUSH
40087: LD_INT 2
40089: EQUAL
40090: AND
40091: OR
40092: IFFALSE 40102
// mode = 0 ;
40094: LD_ADDR_VAR 0 6
40098: PUSH
40099: LD_INT 0
40101: ST_TO_ADDR
// case mode of 0 :
40102: LD_VAR 0 6
40106: PUSH
40107: LD_INT 0
40109: DOUBLE
40110: EQUAL
40111: IFTRUE 40115
40113: GO 51568
40115: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
40116: LD_ADDR_VAR 0 11
40120: PUSH
40121: LD_INT 0
40123: PUSH
40124: LD_INT 0
40126: PUSH
40127: EMPTY
40128: LIST
40129: LIST
40130: PUSH
40131: LD_INT 0
40133: PUSH
40134: LD_INT 1
40136: NEG
40137: PUSH
40138: EMPTY
40139: LIST
40140: LIST
40141: PUSH
40142: LD_INT 1
40144: PUSH
40145: LD_INT 0
40147: PUSH
40148: EMPTY
40149: LIST
40150: LIST
40151: PUSH
40152: LD_INT 1
40154: PUSH
40155: LD_INT 1
40157: PUSH
40158: EMPTY
40159: LIST
40160: LIST
40161: PUSH
40162: LD_INT 0
40164: PUSH
40165: LD_INT 1
40167: PUSH
40168: EMPTY
40169: LIST
40170: LIST
40171: PUSH
40172: LD_INT 1
40174: NEG
40175: PUSH
40176: LD_INT 0
40178: PUSH
40179: EMPTY
40180: LIST
40181: LIST
40182: PUSH
40183: LD_INT 1
40185: NEG
40186: PUSH
40187: LD_INT 1
40189: NEG
40190: PUSH
40191: EMPTY
40192: LIST
40193: LIST
40194: PUSH
40195: LD_INT 1
40197: NEG
40198: PUSH
40199: LD_INT 2
40201: NEG
40202: PUSH
40203: EMPTY
40204: LIST
40205: LIST
40206: PUSH
40207: LD_INT 0
40209: PUSH
40210: LD_INT 2
40212: NEG
40213: PUSH
40214: EMPTY
40215: LIST
40216: LIST
40217: PUSH
40218: LD_INT 1
40220: PUSH
40221: LD_INT 1
40223: NEG
40224: PUSH
40225: EMPTY
40226: LIST
40227: LIST
40228: PUSH
40229: LD_INT 1
40231: PUSH
40232: LD_INT 2
40234: PUSH
40235: EMPTY
40236: LIST
40237: LIST
40238: PUSH
40239: LD_INT 0
40241: PUSH
40242: LD_INT 2
40244: PUSH
40245: EMPTY
40246: LIST
40247: LIST
40248: PUSH
40249: LD_INT 1
40251: NEG
40252: PUSH
40253: LD_INT 1
40255: PUSH
40256: EMPTY
40257: LIST
40258: LIST
40259: PUSH
40260: LD_INT 1
40262: PUSH
40263: LD_INT 3
40265: PUSH
40266: EMPTY
40267: LIST
40268: LIST
40269: PUSH
40270: LD_INT 0
40272: PUSH
40273: LD_INT 3
40275: PUSH
40276: EMPTY
40277: LIST
40278: LIST
40279: PUSH
40280: LD_INT 1
40282: NEG
40283: PUSH
40284: LD_INT 2
40286: PUSH
40287: EMPTY
40288: LIST
40289: LIST
40290: PUSH
40291: EMPTY
40292: LIST
40293: LIST
40294: LIST
40295: LIST
40296: LIST
40297: LIST
40298: LIST
40299: LIST
40300: LIST
40301: LIST
40302: LIST
40303: LIST
40304: LIST
40305: LIST
40306: LIST
40307: LIST
40308: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
40309: LD_ADDR_VAR 0 12
40313: PUSH
40314: LD_INT 0
40316: PUSH
40317: LD_INT 0
40319: PUSH
40320: EMPTY
40321: LIST
40322: LIST
40323: PUSH
40324: LD_INT 0
40326: PUSH
40327: LD_INT 1
40329: NEG
40330: PUSH
40331: EMPTY
40332: LIST
40333: LIST
40334: PUSH
40335: LD_INT 1
40337: PUSH
40338: LD_INT 0
40340: PUSH
40341: EMPTY
40342: LIST
40343: LIST
40344: PUSH
40345: LD_INT 1
40347: PUSH
40348: LD_INT 1
40350: PUSH
40351: EMPTY
40352: LIST
40353: LIST
40354: PUSH
40355: LD_INT 0
40357: PUSH
40358: LD_INT 1
40360: PUSH
40361: EMPTY
40362: LIST
40363: LIST
40364: PUSH
40365: LD_INT 1
40367: NEG
40368: PUSH
40369: LD_INT 0
40371: PUSH
40372: EMPTY
40373: LIST
40374: LIST
40375: PUSH
40376: LD_INT 1
40378: NEG
40379: PUSH
40380: LD_INT 1
40382: NEG
40383: PUSH
40384: EMPTY
40385: LIST
40386: LIST
40387: PUSH
40388: LD_INT 1
40390: PUSH
40391: LD_INT 1
40393: NEG
40394: PUSH
40395: EMPTY
40396: LIST
40397: LIST
40398: PUSH
40399: LD_INT 2
40401: PUSH
40402: LD_INT 0
40404: PUSH
40405: EMPTY
40406: LIST
40407: LIST
40408: PUSH
40409: LD_INT 2
40411: PUSH
40412: LD_INT 1
40414: PUSH
40415: EMPTY
40416: LIST
40417: LIST
40418: PUSH
40419: LD_INT 1
40421: NEG
40422: PUSH
40423: LD_INT 1
40425: PUSH
40426: EMPTY
40427: LIST
40428: LIST
40429: PUSH
40430: LD_INT 2
40432: NEG
40433: PUSH
40434: LD_INT 0
40436: PUSH
40437: EMPTY
40438: LIST
40439: LIST
40440: PUSH
40441: LD_INT 2
40443: NEG
40444: PUSH
40445: LD_INT 1
40447: NEG
40448: PUSH
40449: EMPTY
40450: LIST
40451: LIST
40452: PUSH
40453: LD_INT 2
40455: NEG
40456: PUSH
40457: LD_INT 1
40459: PUSH
40460: EMPTY
40461: LIST
40462: LIST
40463: PUSH
40464: LD_INT 3
40466: NEG
40467: PUSH
40468: LD_INT 0
40470: PUSH
40471: EMPTY
40472: LIST
40473: LIST
40474: PUSH
40475: LD_INT 3
40477: NEG
40478: PUSH
40479: LD_INT 1
40481: NEG
40482: PUSH
40483: EMPTY
40484: LIST
40485: LIST
40486: PUSH
40487: EMPTY
40488: LIST
40489: LIST
40490: LIST
40491: LIST
40492: LIST
40493: LIST
40494: LIST
40495: LIST
40496: LIST
40497: LIST
40498: LIST
40499: LIST
40500: LIST
40501: LIST
40502: LIST
40503: LIST
40504: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
40505: LD_ADDR_VAR 0 13
40509: PUSH
40510: LD_INT 0
40512: PUSH
40513: LD_INT 0
40515: PUSH
40516: EMPTY
40517: LIST
40518: LIST
40519: PUSH
40520: LD_INT 0
40522: PUSH
40523: LD_INT 1
40525: NEG
40526: PUSH
40527: EMPTY
40528: LIST
40529: LIST
40530: PUSH
40531: LD_INT 1
40533: PUSH
40534: LD_INT 0
40536: PUSH
40537: EMPTY
40538: LIST
40539: LIST
40540: PUSH
40541: LD_INT 1
40543: PUSH
40544: LD_INT 1
40546: PUSH
40547: EMPTY
40548: LIST
40549: LIST
40550: PUSH
40551: LD_INT 0
40553: PUSH
40554: LD_INT 1
40556: PUSH
40557: EMPTY
40558: LIST
40559: LIST
40560: PUSH
40561: LD_INT 1
40563: NEG
40564: PUSH
40565: LD_INT 0
40567: PUSH
40568: EMPTY
40569: LIST
40570: LIST
40571: PUSH
40572: LD_INT 1
40574: NEG
40575: PUSH
40576: LD_INT 1
40578: NEG
40579: PUSH
40580: EMPTY
40581: LIST
40582: LIST
40583: PUSH
40584: LD_INT 1
40586: NEG
40587: PUSH
40588: LD_INT 2
40590: NEG
40591: PUSH
40592: EMPTY
40593: LIST
40594: LIST
40595: PUSH
40596: LD_INT 2
40598: PUSH
40599: LD_INT 1
40601: PUSH
40602: EMPTY
40603: LIST
40604: LIST
40605: PUSH
40606: LD_INT 2
40608: PUSH
40609: LD_INT 2
40611: PUSH
40612: EMPTY
40613: LIST
40614: LIST
40615: PUSH
40616: LD_INT 1
40618: PUSH
40619: LD_INT 2
40621: PUSH
40622: EMPTY
40623: LIST
40624: LIST
40625: PUSH
40626: LD_INT 2
40628: NEG
40629: PUSH
40630: LD_INT 1
40632: NEG
40633: PUSH
40634: EMPTY
40635: LIST
40636: LIST
40637: PUSH
40638: LD_INT 2
40640: NEG
40641: PUSH
40642: LD_INT 2
40644: NEG
40645: PUSH
40646: EMPTY
40647: LIST
40648: LIST
40649: PUSH
40650: LD_INT 2
40652: NEG
40653: PUSH
40654: LD_INT 3
40656: NEG
40657: PUSH
40658: EMPTY
40659: LIST
40660: LIST
40661: PUSH
40662: LD_INT 3
40664: NEG
40665: PUSH
40666: LD_INT 2
40668: NEG
40669: PUSH
40670: EMPTY
40671: LIST
40672: LIST
40673: PUSH
40674: LD_INT 3
40676: NEG
40677: PUSH
40678: LD_INT 3
40680: NEG
40681: PUSH
40682: EMPTY
40683: LIST
40684: LIST
40685: PUSH
40686: EMPTY
40687: LIST
40688: LIST
40689: LIST
40690: LIST
40691: LIST
40692: LIST
40693: LIST
40694: LIST
40695: LIST
40696: LIST
40697: LIST
40698: LIST
40699: LIST
40700: LIST
40701: LIST
40702: LIST
40703: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
40704: LD_ADDR_VAR 0 14
40708: PUSH
40709: LD_INT 0
40711: PUSH
40712: LD_INT 0
40714: PUSH
40715: EMPTY
40716: LIST
40717: LIST
40718: PUSH
40719: LD_INT 0
40721: PUSH
40722: LD_INT 1
40724: NEG
40725: PUSH
40726: EMPTY
40727: LIST
40728: LIST
40729: PUSH
40730: LD_INT 1
40732: PUSH
40733: LD_INT 0
40735: PUSH
40736: EMPTY
40737: LIST
40738: LIST
40739: PUSH
40740: LD_INT 1
40742: PUSH
40743: LD_INT 1
40745: PUSH
40746: EMPTY
40747: LIST
40748: LIST
40749: PUSH
40750: LD_INT 0
40752: PUSH
40753: LD_INT 1
40755: PUSH
40756: EMPTY
40757: LIST
40758: LIST
40759: PUSH
40760: LD_INT 1
40762: NEG
40763: PUSH
40764: LD_INT 0
40766: PUSH
40767: EMPTY
40768: LIST
40769: LIST
40770: PUSH
40771: LD_INT 1
40773: NEG
40774: PUSH
40775: LD_INT 1
40777: NEG
40778: PUSH
40779: EMPTY
40780: LIST
40781: LIST
40782: PUSH
40783: LD_INT 1
40785: NEG
40786: PUSH
40787: LD_INT 2
40789: NEG
40790: PUSH
40791: EMPTY
40792: LIST
40793: LIST
40794: PUSH
40795: LD_INT 0
40797: PUSH
40798: LD_INT 2
40800: NEG
40801: PUSH
40802: EMPTY
40803: LIST
40804: LIST
40805: PUSH
40806: LD_INT 1
40808: PUSH
40809: LD_INT 1
40811: NEG
40812: PUSH
40813: EMPTY
40814: LIST
40815: LIST
40816: PUSH
40817: LD_INT 1
40819: PUSH
40820: LD_INT 2
40822: PUSH
40823: EMPTY
40824: LIST
40825: LIST
40826: PUSH
40827: LD_INT 0
40829: PUSH
40830: LD_INT 2
40832: PUSH
40833: EMPTY
40834: LIST
40835: LIST
40836: PUSH
40837: LD_INT 1
40839: NEG
40840: PUSH
40841: LD_INT 1
40843: PUSH
40844: EMPTY
40845: LIST
40846: LIST
40847: PUSH
40848: LD_INT 1
40850: NEG
40851: PUSH
40852: LD_INT 3
40854: NEG
40855: PUSH
40856: EMPTY
40857: LIST
40858: LIST
40859: PUSH
40860: LD_INT 0
40862: PUSH
40863: LD_INT 3
40865: NEG
40866: PUSH
40867: EMPTY
40868: LIST
40869: LIST
40870: PUSH
40871: LD_INT 1
40873: PUSH
40874: LD_INT 2
40876: NEG
40877: PUSH
40878: EMPTY
40879: LIST
40880: LIST
40881: PUSH
40882: EMPTY
40883: LIST
40884: LIST
40885: LIST
40886: LIST
40887: LIST
40888: LIST
40889: LIST
40890: LIST
40891: LIST
40892: LIST
40893: LIST
40894: LIST
40895: LIST
40896: LIST
40897: LIST
40898: LIST
40899: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
40900: LD_ADDR_VAR 0 15
40904: PUSH
40905: LD_INT 0
40907: PUSH
40908: LD_INT 0
40910: PUSH
40911: EMPTY
40912: LIST
40913: LIST
40914: PUSH
40915: LD_INT 0
40917: PUSH
40918: LD_INT 1
40920: NEG
40921: PUSH
40922: EMPTY
40923: LIST
40924: LIST
40925: PUSH
40926: LD_INT 1
40928: PUSH
40929: LD_INT 0
40931: PUSH
40932: EMPTY
40933: LIST
40934: LIST
40935: PUSH
40936: LD_INT 1
40938: PUSH
40939: LD_INT 1
40941: PUSH
40942: EMPTY
40943: LIST
40944: LIST
40945: PUSH
40946: LD_INT 0
40948: PUSH
40949: LD_INT 1
40951: PUSH
40952: EMPTY
40953: LIST
40954: LIST
40955: PUSH
40956: LD_INT 1
40958: NEG
40959: PUSH
40960: LD_INT 0
40962: PUSH
40963: EMPTY
40964: LIST
40965: LIST
40966: PUSH
40967: LD_INT 1
40969: NEG
40970: PUSH
40971: LD_INT 1
40973: NEG
40974: PUSH
40975: EMPTY
40976: LIST
40977: LIST
40978: PUSH
40979: LD_INT 1
40981: PUSH
40982: LD_INT 1
40984: NEG
40985: PUSH
40986: EMPTY
40987: LIST
40988: LIST
40989: PUSH
40990: LD_INT 2
40992: PUSH
40993: LD_INT 0
40995: PUSH
40996: EMPTY
40997: LIST
40998: LIST
40999: PUSH
41000: LD_INT 2
41002: PUSH
41003: LD_INT 1
41005: PUSH
41006: EMPTY
41007: LIST
41008: LIST
41009: PUSH
41010: LD_INT 1
41012: NEG
41013: PUSH
41014: LD_INT 1
41016: PUSH
41017: EMPTY
41018: LIST
41019: LIST
41020: PUSH
41021: LD_INT 2
41023: NEG
41024: PUSH
41025: LD_INT 0
41027: PUSH
41028: EMPTY
41029: LIST
41030: LIST
41031: PUSH
41032: LD_INT 2
41034: NEG
41035: PUSH
41036: LD_INT 1
41038: NEG
41039: PUSH
41040: EMPTY
41041: LIST
41042: LIST
41043: PUSH
41044: LD_INT 2
41046: PUSH
41047: LD_INT 1
41049: NEG
41050: PUSH
41051: EMPTY
41052: LIST
41053: LIST
41054: PUSH
41055: LD_INT 3
41057: PUSH
41058: LD_INT 0
41060: PUSH
41061: EMPTY
41062: LIST
41063: LIST
41064: PUSH
41065: LD_INT 3
41067: PUSH
41068: LD_INT 1
41070: PUSH
41071: EMPTY
41072: LIST
41073: LIST
41074: PUSH
41075: EMPTY
41076: LIST
41077: LIST
41078: LIST
41079: LIST
41080: LIST
41081: LIST
41082: LIST
41083: LIST
41084: LIST
41085: LIST
41086: LIST
41087: LIST
41088: LIST
41089: LIST
41090: LIST
41091: LIST
41092: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
41093: LD_ADDR_VAR 0 16
41097: PUSH
41098: LD_INT 0
41100: PUSH
41101: LD_INT 0
41103: PUSH
41104: EMPTY
41105: LIST
41106: LIST
41107: PUSH
41108: LD_INT 0
41110: PUSH
41111: LD_INT 1
41113: NEG
41114: PUSH
41115: EMPTY
41116: LIST
41117: LIST
41118: PUSH
41119: LD_INT 1
41121: PUSH
41122: LD_INT 0
41124: PUSH
41125: EMPTY
41126: LIST
41127: LIST
41128: PUSH
41129: LD_INT 1
41131: PUSH
41132: LD_INT 1
41134: PUSH
41135: EMPTY
41136: LIST
41137: LIST
41138: PUSH
41139: LD_INT 0
41141: PUSH
41142: LD_INT 1
41144: PUSH
41145: EMPTY
41146: LIST
41147: LIST
41148: PUSH
41149: LD_INT 1
41151: NEG
41152: PUSH
41153: LD_INT 0
41155: PUSH
41156: EMPTY
41157: LIST
41158: LIST
41159: PUSH
41160: LD_INT 1
41162: NEG
41163: PUSH
41164: LD_INT 1
41166: NEG
41167: PUSH
41168: EMPTY
41169: LIST
41170: LIST
41171: PUSH
41172: LD_INT 1
41174: NEG
41175: PUSH
41176: LD_INT 2
41178: NEG
41179: PUSH
41180: EMPTY
41181: LIST
41182: LIST
41183: PUSH
41184: LD_INT 2
41186: PUSH
41187: LD_INT 1
41189: PUSH
41190: EMPTY
41191: LIST
41192: LIST
41193: PUSH
41194: LD_INT 2
41196: PUSH
41197: LD_INT 2
41199: PUSH
41200: EMPTY
41201: LIST
41202: LIST
41203: PUSH
41204: LD_INT 1
41206: PUSH
41207: LD_INT 2
41209: PUSH
41210: EMPTY
41211: LIST
41212: LIST
41213: PUSH
41214: LD_INT 2
41216: NEG
41217: PUSH
41218: LD_INT 1
41220: NEG
41221: PUSH
41222: EMPTY
41223: LIST
41224: LIST
41225: PUSH
41226: LD_INT 2
41228: NEG
41229: PUSH
41230: LD_INT 2
41232: NEG
41233: PUSH
41234: EMPTY
41235: LIST
41236: LIST
41237: PUSH
41238: LD_INT 3
41240: PUSH
41241: LD_INT 2
41243: PUSH
41244: EMPTY
41245: LIST
41246: LIST
41247: PUSH
41248: LD_INT 3
41250: PUSH
41251: LD_INT 3
41253: PUSH
41254: EMPTY
41255: LIST
41256: LIST
41257: PUSH
41258: LD_INT 2
41260: PUSH
41261: LD_INT 3
41263: PUSH
41264: EMPTY
41265: LIST
41266: LIST
41267: PUSH
41268: EMPTY
41269: LIST
41270: LIST
41271: LIST
41272: LIST
41273: LIST
41274: LIST
41275: LIST
41276: LIST
41277: LIST
41278: LIST
41279: LIST
41280: LIST
41281: LIST
41282: LIST
41283: LIST
41284: LIST
41285: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41286: LD_ADDR_VAR 0 17
41290: PUSH
41291: LD_INT 0
41293: PUSH
41294: LD_INT 0
41296: PUSH
41297: EMPTY
41298: LIST
41299: LIST
41300: PUSH
41301: LD_INT 0
41303: PUSH
41304: LD_INT 1
41306: NEG
41307: PUSH
41308: EMPTY
41309: LIST
41310: LIST
41311: PUSH
41312: LD_INT 1
41314: PUSH
41315: LD_INT 0
41317: PUSH
41318: EMPTY
41319: LIST
41320: LIST
41321: PUSH
41322: LD_INT 1
41324: PUSH
41325: LD_INT 1
41327: PUSH
41328: EMPTY
41329: LIST
41330: LIST
41331: PUSH
41332: LD_INT 0
41334: PUSH
41335: LD_INT 1
41337: PUSH
41338: EMPTY
41339: LIST
41340: LIST
41341: PUSH
41342: LD_INT 1
41344: NEG
41345: PUSH
41346: LD_INT 0
41348: PUSH
41349: EMPTY
41350: LIST
41351: LIST
41352: PUSH
41353: LD_INT 1
41355: NEG
41356: PUSH
41357: LD_INT 1
41359: NEG
41360: PUSH
41361: EMPTY
41362: LIST
41363: LIST
41364: PUSH
41365: LD_INT 1
41367: NEG
41368: PUSH
41369: LD_INT 2
41371: NEG
41372: PUSH
41373: EMPTY
41374: LIST
41375: LIST
41376: PUSH
41377: LD_INT 0
41379: PUSH
41380: LD_INT 2
41382: NEG
41383: PUSH
41384: EMPTY
41385: LIST
41386: LIST
41387: PUSH
41388: LD_INT 1
41390: PUSH
41391: LD_INT 1
41393: NEG
41394: PUSH
41395: EMPTY
41396: LIST
41397: LIST
41398: PUSH
41399: LD_INT 2
41401: PUSH
41402: LD_INT 0
41404: PUSH
41405: EMPTY
41406: LIST
41407: LIST
41408: PUSH
41409: LD_INT 2
41411: PUSH
41412: LD_INT 1
41414: PUSH
41415: EMPTY
41416: LIST
41417: LIST
41418: PUSH
41419: LD_INT 2
41421: PUSH
41422: LD_INT 2
41424: PUSH
41425: EMPTY
41426: LIST
41427: LIST
41428: PUSH
41429: LD_INT 1
41431: PUSH
41432: LD_INT 2
41434: PUSH
41435: EMPTY
41436: LIST
41437: LIST
41438: PUSH
41439: LD_INT 0
41441: PUSH
41442: LD_INT 2
41444: PUSH
41445: EMPTY
41446: LIST
41447: LIST
41448: PUSH
41449: LD_INT 1
41451: NEG
41452: PUSH
41453: LD_INT 1
41455: PUSH
41456: EMPTY
41457: LIST
41458: LIST
41459: PUSH
41460: LD_INT 2
41462: NEG
41463: PUSH
41464: LD_INT 0
41466: PUSH
41467: EMPTY
41468: LIST
41469: LIST
41470: PUSH
41471: LD_INT 2
41473: NEG
41474: PUSH
41475: LD_INT 1
41477: NEG
41478: PUSH
41479: EMPTY
41480: LIST
41481: LIST
41482: PUSH
41483: LD_INT 2
41485: NEG
41486: PUSH
41487: LD_INT 2
41489: NEG
41490: PUSH
41491: EMPTY
41492: LIST
41493: LIST
41494: PUSH
41495: EMPTY
41496: LIST
41497: LIST
41498: LIST
41499: LIST
41500: LIST
41501: LIST
41502: LIST
41503: LIST
41504: LIST
41505: LIST
41506: LIST
41507: LIST
41508: LIST
41509: LIST
41510: LIST
41511: LIST
41512: LIST
41513: LIST
41514: LIST
41515: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41516: LD_ADDR_VAR 0 18
41520: PUSH
41521: LD_INT 0
41523: PUSH
41524: LD_INT 0
41526: PUSH
41527: EMPTY
41528: LIST
41529: LIST
41530: PUSH
41531: LD_INT 0
41533: PUSH
41534: LD_INT 1
41536: NEG
41537: PUSH
41538: EMPTY
41539: LIST
41540: LIST
41541: PUSH
41542: LD_INT 1
41544: PUSH
41545: LD_INT 0
41547: PUSH
41548: EMPTY
41549: LIST
41550: LIST
41551: PUSH
41552: LD_INT 1
41554: PUSH
41555: LD_INT 1
41557: PUSH
41558: EMPTY
41559: LIST
41560: LIST
41561: PUSH
41562: LD_INT 0
41564: PUSH
41565: LD_INT 1
41567: PUSH
41568: EMPTY
41569: LIST
41570: LIST
41571: PUSH
41572: LD_INT 1
41574: NEG
41575: PUSH
41576: LD_INT 0
41578: PUSH
41579: EMPTY
41580: LIST
41581: LIST
41582: PUSH
41583: LD_INT 1
41585: NEG
41586: PUSH
41587: LD_INT 1
41589: NEG
41590: PUSH
41591: EMPTY
41592: LIST
41593: LIST
41594: PUSH
41595: LD_INT 1
41597: NEG
41598: PUSH
41599: LD_INT 2
41601: NEG
41602: PUSH
41603: EMPTY
41604: LIST
41605: LIST
41606: PUSH
41607: LD_INT 0
41609: PUSH
41610: LD_INT 2
41612: NEG
41613: PUSH
41614: EMPTY
41615: LIST
41616: LIST
41617: PUSH
41618: LD_INT 1
41620: PUSH
41621: LD_INT 1
41623: NEG
41624: PUSH
41625: EMPTY
41626: LIST
41627: LIST
41628: PUSH
41629: LD_INT 2
41631: PUSH
41632: LD_INT 0
41634: PUSH
41635: EMPTY
41636: LIST
41637: LIST
41638: PUSH
41639: LD_INT 2
41641: PUSH
41642: LD_INT 1
41644: PUSH
41645: EMPTY
41646: LIST
41647: LIST
41648: PUSH
41649: LD_INT 2
41651: PUSH
41652: LD_INT 2
41654: PUSH
41655: EMPTY
41656: LIST
41657: LIST
41658: PUSH
41659: LD_INT 1
41661: PUSH
41662: LD_INT 2
41664: PUSH
41665: EMPTY
41666: LIST
41667: LIST
41668: PUSH
41669: LD_INT 0
41671: PUSH
41672: LD_INT 2
41674: PUSH
41675: EMPTY
41676: LIST
41677: LIST
41678: PUSH
41679: LD_INT 1
41681: NEG
41682: PUSH
41683: LD_INT 1
41685: PUSH
41686: EMPTY
41687: LIST
41688: LIST
41689: PUSH
41690: LD_INT 2
41692: NEG
41693: PUSH
41694: LD_INT 0
41696: PUSH
41697: EMPTY
41698: LIST
41699: LIST
41700: PUSH
41701: LD_INT 2
41703: NEG
41704: PUSH
41705: LD_INT 1
41707: NEG
41708: PUSH
41709: EMPTY
41710: LIST
41711: LIST
41712: PUSH
41713: LD_INT 2
41715: NEG
41716: PUSH
41717: LD_INT 2
41719: NEG
41720: PUSH
41721: EMPTY
41722: LIST
41723: LIST
41724: PUSH
41725: EMPTY
41726: LIST
41727: LIST
41728: LIST
41729: LIST
41730: LIST
41731: LIST
41732: LIST
41733: LIST
41734: LIST
41735: LIST
41736: LIST
41737: LIST
41738: LIST
41739: LIST
41740: LIST
41741: LIST
41742: LIST
41743: LIST
41744: LIST
41745: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41746: LD_ADDR_VAR 0 19
41750: PUSH
41751: LD_INT 0
41753: PUSH
41754: LD_INT 0
41756: PUSH
41757: EMPTY
41758: LIST
41759: LIST
41760: PUSH
41761: LD_INT 0
41763: PUSH
41764: LD_INT 1
41766: NEG
41767: PUSH
41768: EMPTY
41769: LIST
41770: LIST
41771: PUSH
41772: LD_INT 1
41774: PUSH
41775: LD_INT 0
41777: PUSH
41778: EMPTY
41779: LIST
41780: LIST
41781: PUSH
41782: LD_INT 1
41784: PUSH
41785: LD_INT 1
41787: PUSH
41788: EMPTY
41789: LIST
41790: LIST
41791: PUSH
41792: LD_INT 0
41794: PUSH
41795: LD_INT 1
41797: PUSH
41798: EMPTY
41799: LIST
41800: LIST
41801: PUSH
41802: LD_INT 1
41804: NEG
41805: PUSH
41806: LD_INT 0
41808: PUSH
41809: EMPTY
41810: LIST
41811: LIST
41812: PUSH
41813: LD_INT 1
41815: NEG
41816: PUSH
41817: LD_INT 1
41819: NEG
41820: PUSH
41821: EMPTY
41822: LIST
41823: LIST
41824: PUSH
41825: LD_INT 1
41827: NEG
41828: PUSH
41829: LD_INT 2
41831: NEG
41832: PUSH
41833: EMPTY
41834: LIST
41835: LIST
41836: PUSH
41837: LD_INT 0
41839: PUSH
41840: LD_INT 2
41842: NEG
41843: PUSH
41844: EMPTY
41845: LIST
41846: LIST
41847: PUSH
41848: LD_INT 1
41850: PUSH
41851: LD_INT 1
41853: NEG
41854: PUSH
41855: EMPTY
41856: LIST
41857: LIST
41858: PUSH
41859: LD_INT 2
41861: PUSH
41862: LD_INT 0
41864: PUSH
41865: EMPTY
41866: LIST
41867: LIST
41868: PUSH
41869: LD_INT 2
41871: PUSH
41872: LD_INT 1
41874: PUSH
41875: EMPTY
41876: LIST
41877: LIST
41878: PUSH
41879: LD_INT 2
41881: PUSH
41882: LD_INT 2
41884: PUSH
41885: EMPTY
41886: LIST
41887: LIST
41888: PUSH
41889: LD_INT 1
41891: PUSH
41892: LD_INT 2
41894: PUSH
41895: EMPTY
41896: LIST
41897: LIST
41898: PUSH
41899: LD_INT 0
41901: PUSH
41902: LD_INT 2
41904: PUSH
41905: EMPTY
41906: LIST
41907: LIST
41908: PUSH
41909: LD_INT 1
41911: NEG
41912: PUSH
41913: LD_INT 1
41915: PUSH
41916: EMPTY
41917: LIST
41918: LIST
41919: PUSH
41920: LD_INT 2
41922: NEG
41923: PUSH
41924: LD_INT 0
41926: PUSH
41927: EMPTY
41928: LIST
41929: LIST
41930: PUSH
41931: LD_INT 2
41933: NEG
41934: PUSH
41935: LD_INT 1
41937: NEG
41938: PUSH
41939: EMPTY
41940: LIST
41941: LIST
41942: PUSH
41943: LD_INT 2
41945: NEG
41946: PUSH
41947: LD_INT 2
41949: NEG
41950: PUSH
41951: EMPTY
41952: LIST
41953: LIST
41954: PUSH
41955: EMPTY
41956: LIST
41957: LIST
41958: LIST
41959: LIST
41960: LIST
41961: LIST
41962: LIST
41963: LIST
41964: LIST
41965: LIST
41966: LIST
41967: LIST
41968: LIST
41969: LIST
41970: LIST
41971: LIST
41972: LIST
41973: LIST
41974: LIST
41975: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41976: LD_ADDR_VAR 0 20
41980: PUSH
41981: LD_INT 0
41983: PUSH
41984: LD_INT 0
41986: PUSH
41987: EMPTY
41988: LIST
41989: LIST
41990: PUSH
41991: LD_INT 0
41993: PUSH
41994: LD_INT 1
41996: NEG
41997: PUSH
41998: EMPTY
41999: LIST
42000: LIST
42001: PUSH
42002: LD_INT 1
42004: PUSH
42005: LD_INT 0
42007: PUSH
42008: EMPTY
42009: LIST
42010: LIST
42011: PUSH
42012: LD_INT 1
42014: PUSH
42015: LD_INT 1
42017: PUSH
42018: EMPTY
42019: LIST
42020: LIST
42021: PUSH
42022: LD_INT 0
42024: PUSH
42025: LD_INT 1
42027: PUSH
42028: EMPTY
42029: LIST
42030: LIST
42031: PUSH
42032: LD_INT 1
42034: NEG
42035: PUSH
42036: LD_INT 0
42038: PUSH
42039: EMPTY
42040: LIST
42041: LIST
42042: PUSH
42043: LD_INT 1
42045: NEG
42046: PUSH
42047: LD_INT 1
42049: NEG
42050: PUSH
42051: EMPTY
42052: LIST
42053: LIST
42054: PUSH
42055: LD_INT 1
42057: NEG
42058: PUSH
42059: LD_INT 2
42061: NEG
42062: PUSH
42063: EMPTY
42064: LIST
42065: LIST
42066: PUSH
42067: LD_INT 0
42069: PUSH
42070: LD_INT 2
42072: NEG
42073: PUSH
42074: EMPTY
42075: LIST
42076: LIST
42077: PUSH
42078: LD_INT 1
42080: PUSH
42081: LD_INT 1
42083: NEG
42084: PUSH
42085: EMPTY
42086: LIST
42087: LIST
42088: PUSH
42089: LD_INT 2
42091: PUSH
42092: LD_INT 0
42094: PUSH
42095: EMPTY
42096: LIST
42097: LIST
42098: PUSH
42099: LD_INT 2
42101: PUSH
42102: LD_INT 1
42104: PUSH
42105: EMPTY
42106: LIST
42107: LIST
42108: PUSH
42109: LD_INT 2
42111: PUSH
42112: LD_INT 2
42114: PUSH
42115: EMPTY
42116: LIST
42117: LIST
42118: PUSH
42119: LD_INT 1
42121: PUSH
42122: LD_INT 2
42124: PUSH
42125: EMPTY
42126: LIST
42127: LIST
42128: PUSH
42129: LD_INT 0
42131: PUSH
42132: LD_INT 2
42134: PUSH
42135: EMPTY
42136: LIST
42137: LIST
42138: PUSH
42139: LD_INT 1
42141: NEG
42142: PUSH
42143: LD_INT 1
42145: PUSH
42146: EMPTY
42147: LIST
42148: LIST
42149: PUSH
42150: LD_INT 2
42152: NEG
42153: PUSH
42154: LD_INT 0
42156: PUSH
42157: EMPTY
42158: LIST
42159: LIST
42160: PUSH
42161: LD_INT 2
42163: NEG
42164: PUSH
42165: LD_INT 1
42167: NEG
42168: PUSH
42169: EMPTY
42170: LIST
42171: LIST
42172: PUSH
42173: LD_INT 2
42175: NEG
42176: PUSH
42177: LD_INT 2
42179: NEG
42180: PUSH
42181: EMPTY
42182: LIST
42183: LIST
42184: PUSH
42185: EMPTY
42186: LIST
42187: LIST
42188: LIST
42189: LIST
42190: LIST
42191: LIST
42192: LIST
42193: LIST
42194: LIST
42195: LIST
42196: LIST
42197: LIST
42198: LIST
42199: LIST
42200: LIST
42201: LIST
42202: LIST
42203: LIST
42204: LIST
42205: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42206: LD_ADDR_VAR 0 21
42210: PUSH
42211: LD_INT 0
42213: PUSH
42214: LD_INT 0
42216: PUSH
42217: EMPTY
42218: LIST
42219: LIST
42220: PUSH
42221: LD_INT 0
42223: PUSH
42224: LD_INT 1
42226: NEG
42227: PUSH
42228: EMPTY
42229: LIST
42230: LIST
42231: PUSH
42232: LD_INT 1
42234: PUSH
42235: LD_INT 0
42237: PUSH
42238: EMPTY
42239: LIST
42240: LIST
42241: PUSH
42242: LD_INT 1
42244: PUSH
42245: LD_INT 1
42247: PUSH
42248: EMPTY
42249: LIST
42250: LIST
42251: PUSH
42252: LD_INT 0
42254: PUSH
42255: LD_INT 1
42257: PUSH
42258: EMPTY
42259: LIST
42260: LIST
42261: PUSH
42262: LD_INT 1
42264: NEG
42265: PUSH
42266: LD_INT 0
42268: PUSH
42269: EMPTY
42270: LIST
42271: LIST
42272: PUSH
42273: LD_INT 1
42275: NEG
42276: PUSH
42277: LD_INT 1
42279: NEG
42280: PUSH
42281: EMPTY
42282: LIST
42283: LIST
42284: PUSH
42285: LD_INT 1
42287: NEG
42288: PUSH
42289: LD_INT 2
42291: NEG
42292: PUSH
42293: EMPTY
42294: LIST
42295: LIST
42296: PUSH
42297: LD_INT 0
42299: PUSH
42300: LD_INT 2
42302: NEG
42303: PUSH
42304: EMPTY
42305: LIST
42306: LIST
42307: PUSH
42308: LD_INT 1
42310: PUSH
42311: LD_INT 1
42313: NEG
42314: PUSH
42315: EMPTY
42316: LIST
42317: LIST
42318: PUSH
42319: LD_INT 2
42321: PUSH
42322: LD_INT 0
42324: PUSH
42325: EMPTY
42326: LIST
42327: LIST
42328: PUSH
42329: LD_INT 2
42331: PUSH
42332: LD_INT 1
42334: PUSH
42335: EMPTY
42336: LIST
42337: LIST
42338: PUSH
42339: LD_INT 2
42341: PUSH
42342: LD_INT 2
42344: PUSH
42345: EMPTY
42346: LIST
42347: LIST
42348: PUSH
42349: LD_INT 1
42351: PUSH
42352: LD_INT 2
42354: PUSH
42355: EMPTY
42356: LIST
42357: LIST
42358: PUSH
42359: LD_INT 0
42361: PUSH
42362: LD_INT 2
42364: PUSH
42365: EMPTY
42366: LIST
42367: LIST
42368: PUSH
42369: LD_INT 1
42371: NEG
42372: PUSH
42373: LD_INT 1
42375: PUSH
42376: EMPTY
42377: LIST
42378: LIST
42379: PUSH
42380: LD_INT 2
42382: NEG
42383: PUSH
42384: LD_INT 0
42386: PUSH
42387: EMPTY
42388: LIST
42389: LIST
42390: PUSH
42391: LD_INT 2
42393: NEG
42394: PUSH
42395: LD_INT 1
42397: NEG
42398: PUSH
42399: EMPTY
42400: LIST
42401: LIST
42402: PUSH
42403: LD_INT 2
42405: NEG
42406: PUSH
42407: LD_INT 2
42409: NEG
42410: PUSH
42411: EMPTY
42412: LIST
42413: LIST
42414: PUSH
42415: EMPTY
42416: LIST
42417: LIST
42418: LIST
42419: LIST
42420: LIST
42421: LIST
42422: LIST
42423: LIST
42424: LIST
42425: LIST
42426: LIST
42427: LIST
42428: LIST
42429: LIST
42430: LIST
42431: LIST
42432: LIST
42433: LIST
42434: LIST
42435: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42436: LD_ADDR_VAR 0 22
42440: PUSH
42441: LD_INT 0
42443: PUSH
42444: LD_INT 0
42446: PUSH
42447: EMPTY
42448: LIST
42449: LIST
42450: PUSH
42451: LD_INT 0
42453: PUSH
42454: LD_INT 1
42456: NEG
42457: PUSH
42458: EMPTY
42459: LIST
42460: LIST
42461: PUSH
42462: LD_INT 1
42464: PUSH
42465: LD_INT 0
42467: PUSH
42468: EMPTY
42469: LIST
42470: LIST
42471: PUSH
42472: LD_INT 1
42474: PUSH
42475: LD_INT 1
42477: PUSH
42478: EMPTY
42479: LIST
42480: LIST
42481: PUSH
42482: LD_INT 0
42484: PUSH
42485: LD_INT 1
42487: PUSH
42488: EMPTY
42489: LIST
42490: LIST
42491: PUSH
42492: LD_INT 1
42494: NEG
42495: PUSH
42496: LD_INT 0
42498: PUSH
42499: EMPTY
42500: LIST
42501: LIST
42502: PUSH
42503: LD_INT 1
42505: NEG
42506: PUSH
42507: LD_INT 1
42509: NEG
42510: PUSH
42511: EMPTY
42512: LIST
42513: LIST
42514: PUSH
42515: LD_INT 1
42517: NEG
42518: PUSH
42519: LD_INT 2
42521: NEG
42522: PUSH
42523: EMPTY
42524: LIST
42525: LIST
42526: PUSH
42527: LD_INT 0
42529: PUSH
42530: LD_INT 2
42532: NEG
42533: PUSH
42534: EMPTY
42535: LIST
42536: LIST
42537: PUSH
42538: LD_INT 1
42540: PUSH
42541: LD_INT 1
42543: NEG
42544: PUSH
42545: EMPTY
42546: LIST
42547: LIST
42548: PUSH
42549: LD_INT 2
42551: PUSH
42552: LD_INT 0
42554: PUSH
42555: EMPTY
42556: LIST
42557: LIST
42558: PUSH
42559: LD_INT 2
42561: PUSH
42562: LD_INT 1
42564: PUSH
42565: EMPTY
42566: LIST
42567: LIST
42568: PUSH
42569: LD_INT 2
42571: PUSH
42572: LD_INT 2
42574: PUSH
42575: EMPTY
42576: LIST
42577: LIST
42578: PUSH
42579: LD_INT 1
42581: PUSH
42582: LD_INT 2
42584: PUSH
42585: EMPTY
42586: LIST
42587: LIST
42588: PUSH
42589: LD_INT 0
42591: PUSH
42592: LD_INT 2
42594: PUSH
42595: EMPTY
42596: LIST
42597: LIST
42598: PUSH
42599: LD_INT 1
42601: NEG
42602: PUSH
42603: LD_INT 1
42605: PUSH
42606: EMPTY
42607: LIST
42608: LIST
42609: PUSH
42610: LD_INT 2
42612: NEG
42613: PUSH
42614: LD_INT 0
42616: PUSH
42617: EMPTY
42618: LIST
42619: LIST
42620: PUSH
42621: LD_INT 2
42623: NEG
42624: PUSH
42625: LD_INT 1
42627: NEG
42628: PUSH
42629: EMPTY
42630: LIST
42631: LIST
42632: PUSH
42633: LD_INT 2
42635: NEG
42636: PUSH
42637: LD_INT 2
42639: NEG
42640: PUSH
42641: EMPTY
42642: LIST
42643: LIST
42644: PUSH
42645: EMPTY
42646: LIST
42647: LIST
42648: LIST
42649: LIST
42650: LIST
42651: LIST
42652: LIST
42653: LIST
42654: LIST
42655: LIST
42656: LIST
42657: LIST
42658: LIST
42659: LIST
42660: LIST
42661: LIST
42662: LIST
42663: LIST
42664: LIST
42665: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
42666: LD_ADDR_VAR 0 23
42670: PUSH
42671: LD_INT 0
42673: PUSH
42674: LD_INT 0
42676: PUSH
42677: EMPTY
42678: LIST
42679: LIST
42680: PUSH
42681: LD_INT 0
42683: PUSH
42684: LD_INT 1
42686: NEG
42687: PUSH
42688: EMPTY
42689: LIST
42690: LIST
42691: PUSH
42692: LD_INT 1
42694: PUSH
42695: LD_INT 0
42697: PUSH
42698: EMPTY
42699: LIST
42700: LIST
42701: PUSH
42702: LD_INT 1
42704: PUSH
42705: LD_INT 1
42707: PUSH
42708: EMPTY
42709: LIST
42710: LIST
42711: PUSH
42712: LD_INT 0
42714: PUSH
42715: LD_INT 1
42717: PUSH
42718: EMPTY
42719: LIST
42720: LIST
42721: PUSH
42722: LD_INT 1
42724: NEG
42725: PUSH
42726: LD_INT 0
42728: PUSH
42729: EMPTY
42730: LIST
42731: LIST
42732: PUSH
42733: LD_INT 1
42735: NEG
42736: PUSH
42737: LD_INT 1
42739: NEG
42740: PUSH
42741: EMPTY
42742: LIST
42743: LIST
42744: PUSH
42745: LD_INT 1
42747: NEG
42748: PUSH
42749: LD_INT 2
42751: NEG
42752: PUSH
42753: EMPTY
42754: LIST
42755: LIST
42756: PUSH
42757: LD_INT 0
42759: PUSH
42760: LD_INT 2
42762: NEG
42763: PUSH
42764: EMPTY
42765: LIST
42766: LIST
42767: PUSH
42768: LD_INT 1
42770: PUSH
42771: LD_INT 1
42773: NEG
42774: PUSH
42775: EMPTY
42776: LIST
42777: LIST
42778: PUSH
42779: LD_INT 2
42781: PUSH
42782: LD_INT 0
42784: PUSH
42785: EMPTY
42786: LIST
42787: LIST
42788: PUSH
42789: LD_INT 2
42791: PUSH
42792: LD_INT 1
42794: PUSH
42795: EMPTY
42796: LIST
42797: LIST
42798: PUSH
42799: LD_INT 2
42801: PUSH
42802: LD_INT 2
42804: PUSH
42805: EMPTY
42806: LIST
42807: LIST
42808: PUSH
42809: LD_INT 1
42811: PUSH
42812: LD_INT 2
42814: PUSH
42815: EMPTY
42816: LIST
42817: LIST
42818: PUSH
42819: LD_INT 0
42821: PUSH
42822: LD_INT 2
42824: PUSH
42825: EMPTY
42826: LIST
42827: LIST
42828: PUSH
42829: LD_INT 1
42831: NEG
42832: PUSH
42833: LD_INT 1
42835: PUSH
42836: EMPTY
42837: LIST
42838: LIST
42839: PUSH
42840: LD_INT 2
42842: NEG
42843: PUSH
42844: LD_INT 0
42846: PUSH
42847: EMPTY
42848: LIST
42849: LIST
42850: PUSH
42851: LD_INT 2
42853: NEG
42854: PUSH
42855: LD_INT 1
42857: NEG
42858: PUSH
42859: EMPTY
42860: LIST
42861: LIST
42862: PUSH
42863: LD_INT 2
42865: NEG
42866: PUSH
42867: LD_INT 2
42869: NEG
42870: PUSH
42871: EMPTY
42872: LIST
42873: LIST
42874: PUSH
42875: LD_INT 2
42877: NEG
42878: PUSH
42879: LD_INT 3
42881: NEG
42882: PUSH
42883: EMPTY
42884: LIST
42885: LIST
42886: PUSH
42887: LD_INT 1
42889: NEG
42890: PUSH
42891: LD_INT 3
42893: NEG
42894: PUSH
42895: EMPTY
42896: LIST
42897: LIST
42898: PUSH
42899: LD_INT 1
42901: PUSH
42902: LD_INT 2
42904: NEG
42905: PUSH
42906: EMPTY
42907: LIST
42908: LIST
42909: PUSH
42910: LD_INT 2
42912: PUSH
42913: LD_INT 1
42915: NEG
42916: PUSH
42917: EMPTY
42918: LIST
42919: LIST
42920: PUSH
42921: EMPTY
42922: LIST
42923: LIST
42924: LIST
42925: LIST
42926: LIST
42927: LIST
42928: LIST
42929: LIST
42930: LIST
42931: LIST
42932: LIST
42933: LIST
42934: LIST
42935: LIST
42936: LIST
42937: LIST
42938: LIST
42939: LIST
42940: LIST
42941: LIST
42942: LIST
42943: LIST
42944: LIST
42945: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
42946: LD_ADDR_VAR 0 24
42950: PUSH
42951: LD_INT 0
42953: PUSH
42954: LD_INT 0
42956: PUSH
42957: EMPTY
42958: LIST
42959: LIST
42960: PUSH
42961: LD_INT 0
42963: PUSH
42964: LD_INT 1
42966: NEG
42967: PUSH
42968: EMPTY
42969: LIST
42970: LIST
42971: PUSH
42972: LD_INT 1
42974: PUSH
42975: LD_INT 0
42977: PUSH
42978: EMPTY
42979: LIST
42980: LIST
42981: PUSH
42982: LD_INT 1
42984: PUSH
42985: LD_INT 1
42987: PUSH
42988: EMPTY
42989: LIST
42990: LIST
42991: PUSH
42992: LD_INT 0
42994: PUSH
42995: LD_INT 1
42997: PUSH
42998: EMPTY
42999: LIST
43000: LIST
43001: PUSH
43002: LD_INT 1
43004: NEG
43005: PUSH
43006: LD_INT 0
43008: PUSH
43009: EMPTY
43010: LIST
43011: LIST
43012: PUSH
43013: LD_INT 1
43015: NEG
43016: PUSH
43017: LD_INT 1
43019: NEG
43020: PUSH
43021: EMPTY
43022: LIST
43023: LIST
43024: PUSH
43025: LD_INT 1
43027: NEG
43028: PUSH
43029: LD_INT 2
43031: NEG
43032: PUSH
43033: EMPTY
43034: LIST
43035: LIST
43036: PUSH
43037: LD_INT 0
43039: PUSH
43040: LD_INT 2
43042: NEG
43043: PUSH
43044: EMPTY
43045: LIST
43046: LIST
43047: PUSH
43048: LD_INT 1
43050: PUSH
43051: LD_INT 1
43053: NEG
43054: PUSH
43055: EMPTY
43056: LIST
43057: LIST
43058: PUSH
43059: LD_INT 2
43061: PUSH
43062: LD_INT 0
43064: PUSH
43065: EMPTY
43066: LIST
43067: LIST
43068: PUSH
43069: LD_INT 2
43071: PUSH
43072: LD_INT 1
43074: PUSH
43075: EMPTY
43076: LIST
43077: LIST
43078: PUSH
43079: LD_INT 2
43081: PUSH
43082: LD_INT 2
43084: PUSH
43085: EMPTY
43086: LIST
43087: LIST
43088: PUSH
43089: LD_INT 1
43091: PUSH
43092: LD_INT 2
43094: PUSH
43095: EMPTY
43096: LIST
43097: LIST
43098: PUSH
43099: LD_INT 0
43101: PUSH
43102: LD_INT 2
43104: PUSH
43105: EMPTY
43106: LIST
43107: LIST
43108: PUSH
43109: LD_INT 1
43111: NEG
43112: PUSH
43113: LD_INT 1
43115: PUSH
43116: EMPTY
43117: LIST
43118: LIST
43119: PUSH
43120: LD_INT 2
43122: NEG
43123: PUSH
43124: LD_INT 0
43126: PUSH
43127: EMPTY
43128: LIST
43129: LIST
43130: PUSH
43131: LD_INT 2
43133: NEG
43134: PUSH
43135: LD_INT 1
43137: NEG
43138: PUSH
43139: EMPTY
43140: LIST
43141: LIST
43142: PUSH
43143: LD_INT 2
43145: NEG
43146: PUSH
43147: LD_INT 2
43149: NEG
43150: PUSH
43151: EMPTY
43152: LIST
43153: LIST
43154: PUSH
43155: LD_INT 1
43157: PUSH
43158: LD_INT 2
43160: NEG
43161: PUSH
43162: EMPTY
43163: LIST
43164: LIST
43165: PUSH
43166: LD_INT 2
43168: PUSH
43169: LD_INT 1
43171: NEG
43172: PUSH
43173: EMPTY
43174: LIST
43175: LIST
43176: PUSH
43177: LD_INT 3
43179: PUSH
43180: LD_INT 1
43182: PUSH
43183: EMPTY
43184: LIST
43185: LIST
43186: PUSH
43187: LD_INT 3
43189: PUSH
43190: LD_INT 2
43192: PUSH
43193: EMPTY
43194: LIST
43195: LIST
43196: PUSH
43197: EMPTY
43198: LIST
43199: LIST
43200: LIST
43201: LIST
43202: LIST
43203: LIST
43204: LIST
43205: LIST
43206: LIST
43207: LIST
43208: LIST
43209: LIST
43210: LIST
43211: LIST
43212: LIST
43213: LIST
43214: LIST
43215: LIST
43216: LIST
43217: LIST
43218: LIST
43219: LIST
43220: LIST
43221: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
43222: LD_ADDR_VAR 0 25
43226: PUSH
43227: LD_INT 0
43229: PUSH
43230: LD_INT 0
43232: PUSH
43233: EMPTY
43234: LIST
43235: LIST
43236: PUSH
43237: LD_INT 0
43239: PUSH
43240: LD_INT 1
43242: NEG
43243: PUSH
43244: EMPTY
43245: LIST
43246: LIST
43247: PUSH
43248: LD_INT 1
43250: PUSH
43251: LD_INT 0
43253: PUSH
43254: EMPTY
43255: LIST
43256: LIST
43257: PUSH
43258: LD_INT 1
43260: PUSH
43261: LD_INT 1
43263: PUSH
43264: EMPTY
43265: LIST
43266: LIST
43267: PUSH
43268: LD_INT 0
43270: PUSH
43271: LD_INT 1
43273: PUSH
43274: EMPTY
43275: LIST
43276: LIST
43277: PUSH
43278: LD_INT 1
43280: NEG
43281: PUSH
43282: LD_INT 0
43284: PUSH
43285: EMPTY
43286: LIST
43287: LIST
43288: PUSH
43289: LD_INT 1
43291: NEG
43292: PUSH
43293: LD_INT 1
43295: NEG
43296: PUSH
43297: EMPTY
43298: LIST
43299: LIST
43300: PUSH
43301: LD_INT 1
43303: NEG
43304: PUSH
43305: LD_INT 2
43307: NEG
43308: PUSH
43309: EMPTY
43310: LIST
43311: LIST
43312: PUSH
43313: LD_INT 0
43315: PUSH
43316: LD_INT 2
43318: NEG
43319: PUSH
43320: EMPTY
43321: LIST
43322: LIST
43323: PUSH
43324: LD_INT 1
43326: PUSH
43327: LD_INT 1
43329: NEG
43330: PUSH
43331: EMPTY
43332: LIST
43333: LIST
43334: PUSH
43335: LD_INT 2
43337: PUSH
43338: LD_INT 0
43340: PUSH
43341: EMPTY
43342: LIST
43343: LIST
43344: PUSH
43345: LD_INT 2
43347: PUSH
43348: LD_INT 1
43350: PUSH
43351: EMPTY
43352: LIST
43353: LIST
43354: PUSH
43355: LD_INT 2
43357: PUSH
43358: LD_INT 2
43360: PUSH
43361: EMPTY
43362: LIST
43363: LIST
43364: PUSH
43365: LD_INT 1
43367: PUSH
43368: LD_INT 2
43370: PUSH
43371: EMPTY
43372: LIST
43373: LIST
43374: PUSH
43375: LD_INT 0
43377: PUSH
43378: LD_INT 2
43380: PUSH
43381: EMPTY
43382: LIST
43383: LIST
43384: PUSH
43385: LD_INT 1
43387: NEG
43388: PUSH
43389: LD_INT 1
43391: PUSH
43392: EMPTY
43393: LIST
43394: LIST
43395: PUSH
43396: LD_INT 2
43398: NEG
43399: PUSH
43400: LD_INT 0
43402: PUSH
43403: EMPTY
43404: LIST
43405: LIST
43406: PUSH
43407: LD_INT 2
43409: NEG
43410: PUSH
43411: LD_INT 1
43413: NEG
43414: PUSH
43415: EMPTY
43416: LIST
43417: LIST
43418: PUSH
43419: LD_INT 2
43421: NEG
43422: PUSH
43423: LD_INT 2
43425: NEG
43426: PUSH
43427: EMPTY
43428: LIST
43429: LIST
43430: PUSH
43431: LD_INT 3
43433: PUSH
43434: LD_INT 1
43436: PUSH
43437: EMPTY
43438: LIST
43439: LIST
43440: PUSH
43441: LD_INT 3
43443: PUSH
43444: LD_INT 2
43446: PUSH
43447: EMPTY
43448: LIST
43449: LIST
43450: PUSH
43451: LD_INT 2
43453: PUSH
43454: LD_INT 3
43456: PUSH
43457: EMPTY
43458: LIST
43459: LIST
43460: PUSH
43461: LD_INT 1
43463: PUSH
43464: LD_INT 3
43466: PUSH
43467: EMPTY
43468: LIST
43469: LIST
43470: PUSH
43471: EMPTY
43472: LIST
43473: LIST
43474: LIST
43475: LIST
43476: LIST
43477: LIST
43478: LIST
43479: LIST
43480: LIST
43481: LIST
43482: LIST
43483: LIST
43484: LIST
43485: LIST
43486: LIST
43487: LIST
43488: LIST
43489: LIST
43490: LIST
43491: LIST
43492: LIST
43493: LIST
43494: LIST
43495: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
43496: LD_ADDR_VAR 0 26
43500: PUSH
43501: LD_INT 0
43503: PUSH
43504: LD_INT 0
43506: PUSH
43507: EMPTY
43508: LIST
43509: LIST
43510: PUSH
43511: LD_INT 0
43513: PUSH
43514: LD_INT 1
43516: NEG
43517: PUSH
43518: EMPTY
43519: LIST
43520: LIST
43521: PUSH
43522: LD_INT 1
43524: PUSH
43525: LD_INT 0
43527: PUSH
43528: EMPTY
43529: LIST
43530: LIST
43531: PUSH
43532: LD_INT 1
43534: PUSH
43535: LD_INT 1
43537: PUSH
43538: EMPTY
43539: LIST
43540: LIST
43541: PUSH
43542: LD_INT 0
43544: PUSH
43545: LD_INT 1
43547: PUSH
43548: EMPTY
43549: LIST
43550: LIST
43551: PUSH
43552: LD_INT 1
43554: NEG
43555: PUSH
43556: LD_INT 0
43558: PUSH
43559: EMPTY
43560: LIST
43561: LIST
43562: PUSH
43563: LD_INT 1
43565: NEG
43566: PUSH
43567: LD_INT 1
43569: NEG
43570: PUSH
43571: EMPTY
43572: LIST
43573: LIST
43574: PUSH
43575: LD_INT 1
43577: NEG
43578: PUSH
43579: LD_INT 2
43581: NEG
43582: PUSH
43583: EMPTY
43584: LIST
43585: LIST
43586: PUSH
43587: LD_INT 0
43589: PUSH
43590: LD_INT 2
43592: NEG
43593: PUSH
43594: EMPTY
43595: LIST
43596: LIST
43597: PUSH
43598: LD_INT 1
43600: PUSH
43601: LD_INT 1
43603: NEG
43604: PUSH
43605: EMPTY
43606: LIST
43607: LIST
43608: PUSH
43609: LD_INT 2
43611: PUSH
43612: LD_INT 0
43614: PUSH
43615: EMPTY
43616: LIST
43617: LIST
43618: PUSH
43619: LD_INT 2
43621: PUSH
43622: LD_INT 1
43624: PUSH
43625: EMPTY
43626: LIST
43627: LIST
43628: PUSH
43629: LD_INT 2
43631: PUSH
43632: LD_INT 2
43634: PUSH
43635: EMPTY
43636: LIST
43637: LIST
43638: PUSH
43639: LD_INT 1
43641: PUSH
43642: LD_INT 2
43644: PUSH
43645: EMPTY
43646: LIST
43647: LIST
43648: PUSH
43649: LD_INT 0
43651: PUSH
43652: LD_INT 2
43654: PUSH
43655: EMPTY
43656: LIST
43657: LIST
43658: PUSH
43659: LD_INT 1
43661: NEG
43662: PUSH
43663: LD_INT 1
43665: PUSH
43666: EMPTY
43667: LIST
43668: LIST
43669: PUSH
43670: LD_INT 2
43672: NEG
43673: PUSH
43674: LD_INT 0
43676: PUSH
43677: EMPTY
43678: LIST
43679: LIST
43680: PUSH
43681: LD_INT 2
43683: NEG
43684: PUSH
43685: LD_INT 1
43687: NEG
43688: PUSH
43689: EMPTY
43690: LIST
43691: LIST
43692: PUSH
43693: LD_INT 2
43695: NEG
43696: PUSH
43697: LD_INT 2
43699: NEG
43700: PUSH
43701: EMPTY
43702: LIST
43703: LIST
43704: PUSH
43705: LD_INT 2
43707: PUSH
43708: LD_INT 3
43710: PUSH
43711: EMPTY
43712: LIST
43713: LIST
43714: PUSH
43715: LD_INT 1
43717: PUSH
43718: LD_INT 3
43720: PUSH
43721: EMPTY
43722: LIST
43723: LIST
43724: PUSH
43725: LD_INT 1
43727: NEG
43728: PUSH
43729: LD_INT 2
43731: PUSH
43732: EMPTY
43733: LIST
43734: LIST
43735: PUSH
43736: LD_INT 2
43738: NEG
43739: PUSH
43740: LD_INT 1
43742: PUSH
43743: EMPTY
43744: LIST
43745: LIST
43746: PUSH
43747: EMPTY
43748: LIST
43749: LIST
43750: LIST
43751: LIST
43752: LIST
43753: LIST
43754: LIST
43755: LIST
43756: LIST
43757: LIST
43758: LIST
43759: LIST
43760: LIST
43761: LIST
43762: LIST
43763: LIST
43764: LIST
43765: LIST
43766: LIST
43767: LIST
43768: LIST
43769: LIST
43770: LIST
43771: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
43772: LD_ADDR_VAR 0 27
43776: PUSH
43777: LD_INT 0
43779: PUSH
43780: LD_INT 0
43782: PUSH
43783: EMPTY
43784: LIST
43785: LIST
43786: PUSH
43787: LD_INT 0
43789: PUSH
43790: LD_INT 1
43792: NEG
43793: PUSH
43794: EMPTY
43795: LIST
43796: LIST
43797: PUSH
43798: LD_INT 1
43800: PUSH
43801: LD_INT 0
43803: PUSH
43804: EMPTY
43805: LIST
43806: LIST
43807: PUSH
43808: LD_INT 1
43810: PUSH
43811: LD_INT 1
43813: PUSH
43814: EMPTY
43815: LIST
43816: LIST
43817: PUSH
43818: LD_INT 0
43820: PUSH
43821: LD_INT 1
43823: PUSH
43824: EMPTY
43825: LIST
43826: LIST
43827: PUSH
43828: LD_INT 1
43830: NEG
43831: PUSH
43832: LD_INT 0
43834: PUSH
43835: EMPTY
43836: LIST
43837: LIST
43838: PUSH
43839: LD_INT 1
43841: NEG
43842: PUSH
43843: LD_INT 1
43845: NEG
43846: PUSH
43847: EMPTY
43848: LIST
43849: LIST
43850: PUSH
43851: LD_INT 1
43853: NEG
43854: PUSH
43855: LD_INT 2
43857: NEG
43858: PUSH
43859: EMPTY
43860: LIST
43861: LIST
43862: PUSH
43863: LD_INT 0
43865: PUSH
43866: LD_INT 2
43868: NEG
43869: PUSH
43870: EMPTY
43871: LIST
43872: LIST
43873: PUSH
43874: LD_INT 1
43876: PUSH
43877: LD_INT 1
43879: NEG
43880: PUSH
43881: EMPTY
43882: LIST
43883: LIST
43884: PUSH
43885: LD_INT 2
43887: PUSH
43888: LD_INT 0
43890: PUSH
43891: EMPTY
43892: LIST
43893: LIST
43894: PUSH
43895: LD_INT 2
43897: PUSH
43898: LD_INT 1
43900: PUSH
43901: EMPTY
43902: LIST
43903: LIST
43904: PUSH
43905: LD_INT 2
43907: PUSH
43908: LD_INT 2
43910: PUSH
43911: EMPTY
43912: LIST
43913: LIST
43914: PUSH
43915: LD_INT 1
43917: PUSH
43918: LD_INT 2
43920: PUSH
43921: EMPTY
43922: LIST
43923: LIST
43924: PUSH
43925: LD_INT 0
43927: PUSH
43928: LD_INT 2
43930: PUSH
43931: EMPTY
43932: LIST
43933: LIST
43934: PUSH
43935: LD_INT 1
43937: NEG
43938: PUSH
43939: LD_INT 1
43941: PUSH
43942: EMPTY
43943: LIST
43944: LIST
43945: PUSH
43946: LD_INT 2
43948: NEG
43949: PUSH
43950: LD_INT 0
43952: PUSH
43953: EMPTY
43954: LIST
43955: LIST
43956: PUSH
43957: LD_INT 2
43959: NEG
43960: PUSH
43961: LD_INT 1
43963: NEG
43964: PUSH
43965: EMPTY
43966: LIST
43967: LIST
43968: PUSH
43969: LD_INT 2
43971: NEG
43972: PUSH
43973: LD_INT 2
43975: NEG
43976: PUSH
43977: EMPTY
43978: LIST
43979: LIST
43980: PUSH
43981: LD_INT 1
43983: NEG
43984: PUSH
43985: LD_INT 2
43987: PUSH
43988: EMPTY
43989: LIST
43990: LIST
43991: PUSH
43992: LD_INT 2
43994: NEG
43995: PUSH
43996: LD_INT 1
43998: PUSH
43999: EMPTY
44000: LIST
44001: LIST
44002: PUSH
44003: LD_INT 3
44005: NEG
44006: PUSH
44007: LD_INT 1
44009: NEG
44010: PUSH
44011: EMPTY
44012: LIST
44013: LIST
44014: PUSH
44015: LD_INT 3
44017: NEG
44018: PUSH
44019: LD_INT 2
44021: NEG
44022: PUSH
44023: EMPTY
44024: LIST
44025: LIST
44026: PUSH
44027: EMPTY
44028: LIST
44029: LIST
44030: LIST
44031: LIST
44032: LIST
44033: LIST
44034: LIST
44035: LIST
44036: LIST
44037: LIST
44038: LIST
44039: LIST
44040: LIST
44041: LIST
44042: LIST
44043: LIST
44044: LIST
44045: LIST
44046: LIST
44047: LIST
44048: LIST
44049: LIST
44050: LIST
44051: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
44052: LD_ADDR_VAR 0 28
44056: PUSH
44057: LD_INT 0
44059: PUSH
44060: LD_INT 0
44062: PUSH
44063: EMPTY
44064: LIST
44065: LIST
44066: PUSH
44067: LD_INT 0
44069: PUSH
44070: LD_INT 1
44072: NEG
44073: PUSH
44074: EMPTY
44075: LIST
44076: LIST
44077: PUSH
44078: LD_INT 1
44080: PUSH
44081: LD_INT 0
44083: PUSH
44084: EMPTY
44085: LIST
44086: LIST
44087: PUSH
44088: LD_INT 1
44090: PUSH
44091: LD_INT 1
44093: PUSH
44094: EMPTY
44095: LIST
44096: LIST
44097: PUSH
44098: LD_INT 0
44100: PUSH
44101: LD_INT 1
44103: PUSH
44104: EMPTY
44105: LIST
44106: LIST
44107: PUSH
44108: LD_INT 1
44110: NEG
44111: PUSH
44112: LD_INT 0
44114: PUSH
44115: EMPTY
44116: LIST
44117: LIST
44118: PUSH
44119: LD_INT 1
44121: NEG
44122: PUSH
44123: LD_INT 1
44125: NEG
44126: PUSH
44127: EMPTY
44128: LIST
44129: LIST
44130: PUSH
44131: LD_INT 1
44133: NEG
44134: PUSH
44135: LD_INT 2
44137: NEG
44138: PUSH
44139: EMPTY
44140: LIST
44141: LIST
44142: PUSH
44143: LD_INT 0
44145: PUSH
44146: LD_INT 2
44148: NEG
44149: PUSH
44150: EMPTY
44151: LIST
44152: LIST
44153: PUSH
44154: LD_INT 1
44156: PUSH
44157: LD_INT 1
44159: NEG
44160: PUSH
44161: EMPTY
44162: LIST
44163: LIST
44164: PUSH
44165: LD_INT 2
44167: PUSH
44168: LD_INT 0
44170: PUSH
44171: EMPTY
44172: LIST
44173: LIST
44174: PUSH
44175: LD_INT 2
44177: PUSH
44178: LD_INT 1
44180: PUSH
44181: EMPTY
44182: LIST
44183: LIST
44184: PUSH
44185: LD_INT 2
44187: PUSH
44188: LD_INT 2
44190: PUSH
44191: EMPTY
44192: LIST
44193: LIST
44194: PUSH
44195: LD_INT 1
44197: PUSH
44198: LD_INT 2
44200: PUSH
44201: EMPTY
44202: LIST
44203: LIST
44204: PUSH
44205: LD_INT 0
44207: PUSH
44208: LD_INT 2
44210: PUSH
44211: EMPTY
44212: LIST
44213: LIST
44214: PUSH
44215: LD_INT 1
44217: NEG
44218: PUSH
44219: LD_INT 1
44221: PUSH
44222: EMPTY
44223: LIST
44224: LIST
44225: PUSH
44226: LD_INT 2
44228: NEG
44229: PUSH
44230: LD_INT 0
44232: PUSH
44233: EMPTY
44234: LIST
44235: LIST
44236: PUSH
44237: LD_INT 2
44239: NEG
44240: PUSH
44241: LD_INT 1
44243: NEG
44244: PUSH
44245: EMPTY
44246: LIST
44247: LIST
44248: PUSH
44249: LD_INT 2
44251: NEG
44252: PUSH
44253: LD_INT 2
44255: NEG
44256: PUSH
44257: EMPTY
44258: LIST
44259: LIST
44260: PUSH
44261: LD_INT 2
44263: NEG
44264: PUSH
44265: LD_INT 3
44267: NEG
44268: PUSH
44269: EMPTY
44270: LIST
44271: LIST
44272: PUSH
44273: LD_INT 1
44275: NEG
44276: PUSH
44277: LD_INT 3
44279: NEG
44280: PUSH
44281: EMPTY
44282: LIST
44283: LIST
44284: PUSH
44285: LD_INT 3
44287: NEG
44288: PUSH
44289: LD_INT 1
44291: NEG
44292: PUSH
44293: EMPTY
44294: LIST
44295: LIST
44296: PUSH
44297: LD_INT 3
44299: NEG
44300: PUSH
44301: LD_INT 2
44303: NEG
44304: PUSH
44305: EMPTY
44306: LIST
44307: LIST
44308: PUSH
44309: EMPTY
44310: LIST
44311: LIST
44312: LIST
44313: LIST
44314: LIST
44315: LIST
44316: LIST
44317: LIST
44318: LIST
44319: LIST
44320: LIST
44321: LIST
44322: LIST
44323: LIST
44324: LIST
44325: LIST
44326: LIST
44327: LIST
44328: LIST
44329: LIST
44330: LIST
44331: LIST
44332: LIST
44333: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
44334: LD_ADDR_VAR 0 29
44338: PUSH
44339: LD_INT 0
44341: PUSH
44342: LD_INT 0
44344: PUSH
44345: EMPTY
44346: LIST
44347: LIST
44348: PUSH
44349: LD_INT 0
44351: PUSH
44352: LD_INT 1
44354: NEG
44355: PUSH
44356: EMPTY
44357: LIST
44358: LIST
44359: PUSH
44360: LD_INT 1
44362: PUSH
44363: LD_INT 0
44365: PUSH
44366: EMPTY
44367: LIST
44368: LIST
44369: PUSH
44370: LD_INT 1
44372: PUSH
44373: LD_INT 1
44375: PUSH
44376: EMPTY
44377: LIST
44378: LIST
44379: PUSH
44380: LD_INT 0
44382: PUSH
44383: LD_INT 1
44385: PUSH
44386: EMPTY
44387: LIST
44388: LIST
44389: PUSH
44390: LD_INT 1
44392: NEG
44393: PUSH
44394: LD_INT 0
44396: PUSH
44397: EMPTY
44398: LIST
44399: LIST
44400: PUSH
44401: LD_INT 1
44403: NEG
44404: PUSH
44405: LD_INT 1
44407: NEG
44408: PUSH
44409: EMPTY
44410: LIST
44411: LIST
44412: PUSH
44413: LD_INT 1
44415: NEG
44416: PUSH
44417: LD_INT 2
44419: NEG
44420: PUSH
44421: EMPTY
44422: LIST
44423: LIST
44424: PUSH
44425: LD_INT 0
44427: PUSH
44428: LD_INT 2
44430: NEG
44431: PUSH
44432: EMPTY
44433: LIST
44434: LIST
44435: PUSH
44436: LD_INT 1
44438: PUSH
44439: LD_INT 1
44441: NEG
44442: PUSH
44443: EMPTY
44444: LIST
44445: LIST
44446: PUSH
44447: LD_INT 2
44449: PUSH
44450: LD_INT 0
44452: PUSH
44453: EMPTY
44454: LIST
44455: LIST
44456: PUSH
44457: LD_INT 2
44459: PUSH
44460: LD_INT 1
44462: PUSH
44463: EMPTY
44464: LIST
44465: LIST
44466: PUSH
44467: LD_INT 1
44469: PUSH
44470: LD_INT 2
44472: PUSH
44473: EMPTY
44474: LIST
44475: LIST
44476: PUSH
44477: LD_INT 0
44479: PUSH
44480: LD_INT 2
44482: PUSH
44483: EMPTY
44484: LIST
44485: LIST
44486: PUSH
44487: LD_INT 1
44489: NEG
44490: PUSH
44491: LD_INT 1
44493: PUSH
44494: EMPTY
44495: LIST
44496: LIST
44497: PUSH
44498: LD_INT 2
44500: NEG
44501: PUSH
44502: LD_INT 1
44504: NEG
44505: PUSH
44506: EMPTY
44507: LIST
44508: LIST
44509: PUSH
44510: LD_INT 2
44512: NEG
44513: PUSH
44514: LD_INT 2
44516: NEG
44517: PUSH
44518: EMPTY
44519: LIST
44520: LIST
44521: PUSH
44522: LD_INT 2
44524: NEG
44525: PUSH
44526: LD_INT 3
44528: NEG
44529: PUSH
44530: EMPTY
44531: LIST
44532: LIST
44533: PUSH
44534: LD_INT 2
44536: PUSH
44537: LD_INT 1
44539: NEG
44540: PUSH
44541: EMPTY
44542: LIST
44543: LIST
44544: PUSH
44545: LD_INT 3
44547: PUSH
44548: LD_INT 1
44550: PUSH
44551: EMPTY
44552: LIST
44553: LIST
44554: PUSH
44555: LD_INT 1
44557: PUSH
44558: LD_INT 3
44560: PUSH
44561: EMPTY
44562: LIST
44563: LIST
44564: PUSH
44565: LD_INT 1
44567: NEG
44568: PUSH
44569: LD_INT 2
44571: PUSH
44572: EMPTY
44573: LIST
44574: LIST
44575: PUSH
44576: LD_INT 3
44578: NEG
44579: PUSH
44580: LD_INT 2
44582: NEG
44583: PUSH
44584: EMPTY
44585: LIST
44586: LIST
44587: PUSH
44588: EMPTY
44589: LIST
44590: LIST
44591: LIST
44592: LIST
44593: LIST
44594: LIST
44595: LIST
44596: LIST
44597: LIST
44598: LIST
44599: LIST
44600: LIST
44601: LIST
44602: LIST
44603: LIST
44604: LIST
44605: LIST
44606: LIST
44607: LIST
44608: LIST
44609: LIST
44610: LIST
44611: LIST
44612: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
44613: LD_ADDR_VAR 0 30
44617: PUSH
44618: LD_INT 0
44620: PUSH
44621: LD_INT 0
44623: PUSH
44624: EMPTY
44625: LIST
44626: LIST
44627: PUSH
44628: LD_INT 0
44630: PUSH
44631: LD_INT 1
44633: NEG
44634: PUSH
44635: EMPTY
44636: LIST
44637: LIST
44638: PUSH
44639: LD_INT 1
44641: PUSH
44642: LD_INT 0
44644: PUSH
44645: EMPTY
44646: LIST
44647: LIST
44648: PUSH
44649: LD_INT 1
44651: PUSH
44652: LD_INT 1
44654: PUSH
44655: EMPTY
44656: LIST
44657: LIST
44658: PUSH
44659: LD_INT 0
44661: PUSH
44662: LD_INT 1
44664: PUSH
44665: EMPTY
44666: LIST
44667: LIST
44668: PUSH
44669: LD_INT 1
44671: NEG
44672: PUSH
44673: LD_INT 0
44675: PUSH
44676: EMPTY
44677: LIST
44678: LIST
44679: PUSH
44680: LD_INT 1
44682: NEG
44683: PUSH
44684: LD_INT 1
44686: NEG
44687: PUSH
44688: EMPTY
44689: LIST
44690: LIST
44691: PUSH
44692: LD_INT 1
44694: NEG
44695: PUSH
44696: LD_INT 2
44698: NEG
44699: PUSH
44700: EMPTY
44701: LIST
44702: LIST
44703: PUSH
44704: LD_INT 0
44706: PUSH
44707: LD_INT 2
44709: NEG
44710: PUSH
44711: EMPTY
44712: LIST
44713: LIST
44714: PUSH
44715: LD_INT 1
44717: PUSH
44718: LD_INT 1
44720: NEG
44721: PUSH
44722: EMPTY
44723: LIST
44724: LIST
44725: PUSH
44726: LD_INT 2
44728: PUSH
44729: LD_INT 0
44731: PUSH
44732: EMPTY
44733: LIST
44734: LIST
44735: PUSH
44736: LD_INT 2
44738: PUSH
44739: LD_INT 1
44741: PUSH
44742: EMPTY
44743: LIST
44744: LIST
44745: PUSH
44746: LD_INT 2
44748: PUSH
44749: LD_INT 2
44751: PUSH
44752: EMPTY
44753: LIST
44754: LIST
44755: PUSH
44756: LD_INT 1
44758: PUSH
44759: LD_INT 2
44761: PUSH
44762: EMPTY
44763: LIST
44764: LIST
44765: PUSH
44766: LD_INT 1
44768: NEG
44769: PUSH
44770: LD_INT 1
44772: PUSH
44773: EMPTY
44774: LIST
44775: LIST
44776: PUSH
44777: LD_INT 2
44779: NEG
44780: PUSH
44781: LD_INT 0
44783: PUSH
44784: EMPTY
44785: LIST
44786: LIST
44787: PUSH
44788: LD_INT 2
44790: NEG
44791: PUSH
44792: LD_INT 1
44794: NEG
44795: PUSH
44796: EMPTY
44797: LIST
44798: LIST
44799: PUSH
44800: LD_INT 1
44802: NEG
44803: PUSH
44804: LD_INT 3
44806: NEG
44807: PUSH
44808: EMPTY
44809: LIST
44810: LIST
44811: PUSH
44812: LD_INT 1
44814: PUSH
44815: LD_INT 2
44817: NEG
44818: PUSH
44819: EMPTY
44820: LIST
44821: LIST
44822: PUSH
44823: LD_INT 3
44825: PUSH
44826: LD_INT 2
44828: PUSH
44829: EMPTY
44830: LIST
44831: LIST
44832: PUSH
44833: LD_INT 2
44835: PUSH
44836: LD_INT 3
44838: PUSH
44839: EMPTY
44840: LIST
44841: LIST
44842: PUSH
44843: LD_INT 2
44845: NEG
44846: PUSH
44847: LD_INT 1
44849: PUSH
44850: EMPTY
44851: LIST
44852: LIST
44853: PUSH
44854: LD_INT 3
44856: NEG
44857: PUSH
44858: LD_INT 1
44860: NEG
44861: PUSH
44862: EMPTY
44863: LIST
44864: LIST
44865: PUSH
44866: EMPTY
44867: LIST
44868: LIST
44869: LIST
44870: LIST
44871: LIST
44872: LIST
44873: LIST
44874: LIST
44875: LIST
44876: LIST
44877: LIST
44878: LIST
44879: LIST
44880: LIST
44881: LIST
44882: LIST
44883: LIST
44884: LIST
44885: LIST
44886: LIST
44887: LIST
44888: LIST
44889: LIST
44890: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
44891: LD_ADDR_VAR 0 31
44895: PUSH
44896: LD_INT 0
44898: PUSH
44899: LD_INT 0
44901: PUSH
44902: EMPTY
44903: LIST
44904: LIST
44905: PUSH
44906: LD_INT 0
44908: PUSH
44909: LD_INT 1
44911: NEG
44912: PUSH
44913: EMPTY
44914: LIST
44915: LIST
44916: PUSH
44917: LD_INT 1
44919: PUSH
44920: LD_INT 0
44922: PUSH
44923: EMPTY
44924: LIST
44925: LIST
44926: PUSH
44927: LD_INT 1
44929: PUSH
44930: LD_INT 1
44932: PUSH
44933: EMPTY
44934: LIST
44935: LIST
44936: PUSH
44937: LD_INT 0
44939: PUSH
44940: LD_INT 1
44942: PUSH
44943: EMPTY
44944: LIST
44945: LIST
44946: PUSH
44947: LD_INT 1
44949: NEG
44950: PUSH
44951: LD_INT 0
44953: PUSH
44954: EMPTY
44955: LIST
44956: LIST
44957: PUSH
44958: LD_INT 1
44960: NEG
44961: PUSH
44962: LD_INT 1
44964: NEG
44965: PUSH
44966: EMPTY
44967: LIST
44968: LIST
44969: PUSH
44970: LD_INT 1
44972: NEG
44973: PUSH
44974: LD_INT 2
44976: NEG
44977: PUSH
44978: EMPTY
44979: LIST
44980: LIST
44981: PUSH
44982: LD_INT 1
44984: PUSH
44985: LD_INT 1
44987: NEG
44988: PUSH
44989: EMPTY
44990: LIST
44991: LIST
44992: PUSH
44993: LD_INT 2
44995: PUSH
44996: LD_INT 0
44998: PUSH
44999: EMPTY
45000: LIST
45001: LIST
45002: PUSH
45003: LD_INT 2
45005: PUSH
45006: LD_INT 1
45008: PUSH
45009: EMPTY
45010: LIST
45011: LIST
45012: PUSH
45013: LD_INT 2
45015: PUSH
45016: LD_INT 2
45018: PUSH
45019: EMPTY
45020: LIST
45021: LIST
45022: PUSH
45023: LD_INT 1
45025: PUSH
45026: LD_INT 2
45028: PUSH
45029: EMPTY
45030: LIST
45031: LIST
45032: PUSH
45033: LD_INT 0
45035: PUSH
45036: LD_INT 2
45038: PUSH
45039: EMPTY
45040: LIST
45041: LIST
45042: PUSH
45043: LD_INT 1
45045: NEG
45046: PUSH
45047: LD_INT 1
45049: PUSH
45050: EMPTY
45051: LIST
45052: LIST
45053: PUSH
45054: LD_INT 2
45056: NEG
45057: PUSH
45058: LD_INT 1
45060: NEG
45061: PUSH
45062: EMPTY
45063: LIST
45064: LIST
45065: PUSH
45066: LD_INT 2
45068: NEG
45069: PUSH
45070: LD_INT 2
45072: NEG
45073: PUSH
45074: EMPTY
45075: LIST
45076: LIST
45077: PUSH
45078: LD_INT 2
45080: NEG
45081: PUSH
45082: LD_INT 3
45084: NEG
45085: PUSH
45086: EMPTY
45087: LIST
45088: LIST
45089: PUSH
45090: LD_INT 2
45092: PUSH
45093: LD_INT 1
45095: NEG
45096: PUSH
45097: EMPTY
45098: LIST
45099: LIST
45100: PUSH
45101: LD_INT 3
45103: PUSH
45104: LD_INT 1
45106: PUSH
45107: EMPTY
45108: LIST
45109: LIST
45110: PUSH
45111: LD_INT 1
45113: PUSH
45114: LD_INT 3
45116: PUSH
45117: EMPTY
45118: LIST
45119: LIST
45120: PUSH
45121: LD_INT 1
45123: NEG
45124: PUSH
45125: LD_INT 2
45127: PUSH
45128: EMPTY
45129: LIST
45130: LIST
45131: PUSH
45132: LD_INT 3
45134: NEG
45135: PUSH
45136: LD_INT 2
45138: NEG
45139: PUSH
45140: EMPTY
45141: LIST
45142: LIST
45143: PUSH
45144: EMPTY
45145: LIST
45146: LIST
45147: LIST
45148: LIST
45149: LIST
45150: LIST
45151: LIST
45152: LIST
45153: LIST
45154: LIST
45155: LIST
45156: LIST
45157: LIST
45158: LIST
45159: LIST
45160: LIST
45161: LIST
45162: LIST
45163: LIST
45164: LIST
45165: LIST
45166: LIST
45167: LIST
45168: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
45169: LD_ADDR_VAR 0 32
45173: PUSH
45174: LD_INT 0
45176: PUSH
45177: LD_INT 0
45179: PUSH
45180: EMPTY
45181: LIST
45182: LIST
45183: PUSH
45184: LD_INT 0
45186: PUSH
45187: LD_INT 1
45189: NEG
45190: PUSH
45191: EMPTY
45192: LIST
45193: LIST
45194: PUSH
45195: LD_INT 1
45197: PUSH
45198: LD_INT 0
45200: PUSH
45201: EMPTY
45202: LIST
45203: LIST
45204: PUSH
45205: LD_INT 1
45207: PUSH
45208: LD_INT 1
45210: PUSH
45211: EMPTY
45212: LIST
45213: LIST
45214: PUSH
45215: LD_INT 0
45217: PUSH
45218: LD_INT 1
45220: PUSH
45221: EMPTY
45222: LIST
45223: LIST
45224: PUSH
45225: LD_INT 1
45227: NEG
45228: PUSH
45229: LD_INT 0
45231: PUSH
45232: EMPTY
45233: LIST
45234: LIST
45235: PUSH
45236: LD_INT 1
45238: NEG
45239: PUSH
45240: LD_INT 1
45242: NEG
45243: PUSH
45244: EMPTY
45245: LIST
45246: LIST
45247: PUSH
45248: LD_INT 1
45250: NEG
45251: PUSH
45252: LD_INT 2
45254: NEG
45255: PUSH
45256: EMPTY
45257: LIST
45258: LIST
45259: PUSH
45260: LD_INT 0
45262: PUSH
45263: LD_INT 2
45265: NEG
45266: PUSH
45267: EMPTY
45268: LIST
45269: LIST
45270: PUSH
45271: LD_INT 1
45273: PUSH
45274: LD_INT 1
45276: NEG
45277: PUSH
45278: EMPTY
45279: LIST
45280: LIST
45281: PUSH
45282: LD_INT 2
45284: PUSH
45285: LD_INT 1
45287: PUSH
45288: EMPTY
45289: LIST
45290: LIST
45291: PUSH
45292: LD_INT 2
45294: PUSH
45295: LD_INT 2
45297: PUSH
45298: EMPTY
45299: LIST
45300: LIST
45301: PUSH
45302: LD_INT 1
45304: PUSH
45305: LD_INT 2
45307: PUSH
45308: EMPTY
45309: LIST
45310: LIST
45311: PUSH
45312: LD_INT 0
45314: PUSH
45315: LD_INT 2
45317: PUSH
45318: EMPTY
45319: LIST
45320: LIST
45321: PUSH
45322: LD_INT 1
45324: NEG
45325: PUSH
45326: LD_INT 1
45328: PUSH
45329: EMPTY
45330: LIST
45331: LIST
45332: PUSH
45333: LD_INT 2
45335: NEG
45336: PUSH
45337: LD_INT 0
45339: PUSH
45340: EMPTY
45341: LIST
45342: LIST
45343: PUSH
45344: LD_INT 2
45346: NEG
45347: PUSH
45348: LD_INT 1
45350: NEG
45351: PUSH
45352: EMPTY
45353: LIST
45354: LIST
45355: PUSH
45356: LD_INT 1
45358: NEG
45359: PUSH
45360: LD_INT 3
45362: NEG
45363: PUSH
45364: EMPTY
45365: LIST
45366: LIST
45367: PUSH
45368: LD_INT 1
45370: PUSH
45371: LD_INT 2
45373: NEG
45374: PUSH
45375: EMPTY
45376: LIST
45377: LIST
45378: PUSH
45379: LD_INT 3
45381: PUSH
45382: LD_INT 2
45384: PUSH
45385: EMPTY
45386: LIST
45387: LIST
45388: PUSH
45389: LD_INT 2
45391: PUSH
45392: LD_INT 3
45394: PUSH
45395: EMPTY
45396: LIST
45397: LIST
45398: PUSH
45399: LD_INT 2
45401: NEG
45402: PUSH
45403: LD_INT 1
45405: PUSH
45406: EMPTY
45407: LIST
45408: LIST
45409: PUSH
45410: LD_INT 3
45412: NEG
45413: PUSH
45414: LD_INT 1
45416: NEG
45417: PUSH
45418: EMPTY
45419: LIST
45420: LIST
45421: PUSH
45422: EMPTY
45423: LIST
45424: LIST
45425: LIST
45426: LIST
45427: LIST
45428: LIST
45429: LIST
45430: LIST
45431: LIST
45432: LIST
45433: LIST
45434: LIST
45435: LIST
45436: LIST
45437: LIST
45438: LIST
45439: LIST
45440: LIST
45441: LIST
45442: LIST
45443: LIST
45444: LIST
45445: LIST
45446: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
45447: LD_ADDR_VAR 0 33
45451: PUSH
45452: LD_INT 0
45454: PUSH
45455: LD_INT 0
45457: PUSH
45458: EMPTY
45459: LIST
45460: LIST
45461: PUSH
45462: LD_INT 0
45464: PUSH
45465: LD_INT 1
45467: NEG
45468: PUSH
45469: EMPTY
45470: LIST
45471: LIST
45472: PUSH
45473: LD_INT 1
45475: PUSH
45476: LD_INT 0
45478: PUSH
45479: EMPTY
45480: LIST
45481: LIST
45482: PUSH
45483: LD_INT 1
45485: PUSH
45486: LD_INT 1
45488: PUSH
45489: EMPTY
45490: LIST
45491: LIST
45492: PUSH
45493: LD_INT 0
45495: PUSH
45496: LD_INT 1
45498: PUSH
45499: EMPTY
45500: LIST
45501: LIST
45502: PUSH
45503: LD_INT 1
45505: NEG
45506: PUSH
45507: LD_INT 0
45509: PUSH
45510: EMPTY
45511: LIST
45512: LIST
45513: PUSH
45514: LD_INT 1
45516: NEG
45517: PUSH
45518: LD_INT 1
45520: NEG
45521: PUSH
45522: EMPTY
45523: LIST
45524: LIST
45525: PUSH
45526: LD_INT 1
45528: NEG
45529: PUSH
45530: LD_INT 2
45532: NEG
45533: PUSH
45534: EMPTY
45535: LIST
45536: LIST
45537: PUSH
45538: LD_INT 1
45540: PUSH
45541: LD_INT 1
45543: NEG
45544: PUSH
45545: EMPTY
45546: LIST
45547: LIST
45548: PUSH
45549: LD_INT 2
45551: PUSH
45552: LD_INT 0
45554: PUSH
45555: EMPTY
45556: LIST
45557: LIST
45558: PUSH
45559: LD_INT 2
45561: PUSH
45562: LD_INT 1
45564: PUSH
45565: EMPTY
45566: LIST
45567: LIST
45568: PUSH
45569: LD_INT 1
45571: PUSH
45572: LD_INT 2
45574: PUSH
45575: EMPTY
45576: LIST
45577: LIST
45578: PUSH
45579: LD_INT 0
45581: PUSH
45582: LD_INT 2
45584: PUSH
45585: EMPTY
45586: LIST
45587: LIST
45588: PUSH
45589: LD_INT 1
45591: NEG
45592: PUSH
45593: LD_INT 1
45595: PUSH
45596: EMPTY
45597: LIST
45598: LIST
45599: PUSH
45600: LD_INT 2
45602: NEG
45603: PUSH
45604: LD_INT 0
45606: PUSH
45607: EMPTY
45608: LIST
45609: LIST
45610: PUSH
45611: LD_INT 2
45613: NEG
45614: PUSH
45615: LD_INT 1
45617: NEG
45618: PUSH
45619: EMPTY
45620: LIST
45621: LIST
45622: PUSH
45623: LD_INT 2
45625: NEG
45626: PUSH
45627: LD_INT 2
45629: NEG
45630: PUSH
45631: EMPTY
45632: LIST
45633: LIST
45634: PUSH
45635: LD_INT 2
45637: NEG
45638: PUSH
45639: LD_INT 3
45641: NEG
45642: PUSH
45643: EMPTY
45644: LIST
45645: LIST
45646: PUSH
45647: LD_INT 2
45649: PUSH
45650: LD_INT 1
45652: NEG
45653: PUSH
45654: EMPTY
45655: LIST
45656: LIST
45657: PUSH
45658: LD_INT 3
45660: PUSH
45661: LD_INT 1
45663: PUSH
45664: EMPTY
45665: LIST
45666: LIST
45667: PUSH
45668: LD_INT 1
45670: PUSH
45671: LD_INT 3
45673: PUSH
45674: EMPTY
45675: LIST
45676: LIST
45677: PUSH
45678: LD_INT 1
45680: NEG
45681: PUSH
45682: LD_INT 2
45684: PUSH
45685: EMPTY
45686: LIST
45687: LIST
45688: PUSH
45689: LD_INT 3
45691: NEG
45692: PUSH
45693: LD_INT 2
45695: NEG
45696: PUSH
45697: EMPTY
45698: LIST
45699: LIST
45700: PUSH
45701: EMPTY
45702: LIST
45703: LIST
45704: LIST
45705: LIST
45706: LIST
45707: LIST
45708: LIST
45709: LIST
45710: LIST
45711: LIST
45712: LIST
45713: LIST
45714: LIST
45715: LIST
45716: LIST
45717: LIST
45718: LIST
45719: LIST
45720: LIST
45721: LIST
45722: LIST
45723: LIST
45724: LIST
45725: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
45726: LD_ADDR_VAR 0 34
45730: PUSH
45731: LD_INT 0
45733: PUSH
45734: LD_INT 0
45736: PUSH
45737: EMPTY
45738: LIST
45739: LIST
45740: PUSH
45741: LD_INT 0
45743: PUSH
45744: LD_INT 1
45746: NEG
45747: PUSH
45748: EMPTY
45749: LIST
45750: LIST
45751: PUSH
45752: LD_INT 1
45754: PUSH
45755: LD_INT 0
45757: PUSH
45758: EMPTY
45759: LIST
45760: LIST
45761: PUSH
45762: LD_INT 1
45764: PUSH
45765: LD_INT 1
45767: PUSH
45768: EMPTY
45769: LIST
45770: LIST
45771: PUSH
45772: LD_INT 0
45774: PUSH
45775: LD_INT 1
45777: PUSH
45778: EMPTY
45779: LIST
45780: LIST
45781: PUSH
45782: LD_INT 1
45784: NEG
45785: PUSH
45786: LD_INT 0
45788: PUSH
45789: EMPTY
45790: LIST
45791: LIST
45792: PUSH
45793: LD_INT 1
45795: NEG
45796: PUSH
45797: LD_INT 1
45799: NEG
45800: PUSH
45801: EMPTY
45802: LIST
45803: LIST
45804: PUSH
45805: LD_INT 1
45807: NEG
45808: PUSH
45809: LD_INT 2
45811: NEG
45812: PUSH
45813: EMPTY
45814: LIST
45815: LIST
45816: PUSH
45817: LD_INT 0
45819: PUSH
45820: LD_INT 2
45822: NEG
45823: PUSH
45824: EMPTY
45825: LIST
45826: LIST
45827: PUSH
45828: LD_INT 1
45830: PUSH
45831: LD_INT 1
45833: NEG
45834: PUSH
45835: EMPTY
45836: LIST
45837: LIST
45838: PUSH
45839: LD_INT 2
45841: PUSH
45842: LD_INT 1
45844: PUSH
45845: EMPTY
45846: LIST
45847: LIST
45848: PUSH
45849: LD_INT 2
45851: PUSH
45852: LD_INT 2
45854: PUSH
45855: EMPTY
45856: LIST
45857: LIST
45858: PUSH
45859: LD_INT 1
45861: PUSH
45862: LD_INT 2
45864: PUSH
45865: EMPTY
45866: LIST
45867: LIST
45868: PUSH
45869: LD_INT 1
45871: NEG
45872: PUSH
45873: LD_INT 1
45875: PUSH
45876: EMPTY
45877: LIST
45878: LIST
45879: PUSH
45880: LD_INT 2
45882: NEG
45883: PUSH
45884: LD_INT 0
45886: PUSH
45887: EMPTY
45888: LIST
45889: LIST
45890: PUSH
45891: LD_INT 2
45893: NEG
45894: PUSH
45895: LD_INT 1
45897: NEG
45898: PUSH
45899: EMPTY
45900: LIST
45901: LIST
45902: PUSH
45903: LD_INT 2
45905: NEG
45906: PUSH
45907: LD_INT 2
45909: NEG
45910: PUSH
45911: EMPTY
45912: LIST
45913: LIST
45914: PUSH
45915: LD_INT 1
45917: NEG
45918: PUSH
45919: LD_INT 3
45921: NEG
45922: PUSH
45923: EMPTY
45924: LIST
45925: LIST
45926: PUSH
45927: LD_INT 1
45929: PUSH
45930: LD_INT 2
45932: NEG
45933: PUSH
45934: EMPTY
45935: LIST
45936: LIST
45937: PUSH
45938: LD_INT 3
45940: PUSH
45941: LD_INT 2
45943: PUSH
45944: EMPTY
45945: LIST
45946: LIST
45947: PUSH
45948: LD_INT 2
45950: PUSH
45951: LD_INT 3
45953: PUSH
45954: EMPTY
45955: LIST
45956: LIST
45957: PUSH
45958: LD_INT 2
45960: NEG
45961: PUSH
45962: LD_INT 1
45964: PUSH
45965: EMPTY
45966: LIST
45967: LIST
45968: PUSH
45969: LD_INT 3
45971: NEG
45972: PUSH
45973: LD_INT 1
45975: NEG
45976: PUSH
45977: EMPTY
45978: LIST
45979: LIST
45980: PUSH
45981: EMPTY
45982: LIST
45983: LIST
45984: LIST
45985: LIST
45986: LIST
45987: LIST
45988: LIST
45989: LIST
45990: LIST
45991: LIST
45992: LIST
45993: LIST
45994: LIST
45995: LIST
45996: LIST
45997: LIST
45998: LIST
45999: LIST
46000: LIST
46001: LIST
46002: LIST
46003: LIST
46004: LIST
46005: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
46006: LD_ADDR_VAR 0 35
46010: PUSH
46011: LD_INT 0
46013: PUSH
46014: LD_INT 0
46016: PUSH
46017: EMPTY
46018: LIST
46019: LIST
46020: PUSH
46021: LD_INT 0
46023: PUSH
46024: LD_INT 1
46026: NEG
46027: PUSH
46028: EMPTY
46029: LIST
46030: LIST
46031: PUSH
46032: LD_INT 1
46034: PUSH
46035: LD_INT 0
46037: PUSH
46038: EMPTY
46039: LIST
46040: LIST
46041: PUSH
46042: LD_INT 1
46044: PUSH
46045: LD_INT 1
46047: PUSH
46048: EMPTY
46049: LIST
46050: LIST
46051: PUSH
46052: LD_INT 0
46054: PUSH
46055: LD_INT 1
46057: PUSH
46058: EMPTY
46059: LIST
46060: LIST
46061: PUSH
46062: LD_INT 1
46064: NEG
46065: PUSH
46066: LD_INT 0
46068: PUSH
46069: EMPTY
46070: LIST
46071: LIST
46072: PUSH
46073: LD_INT 1
46075: NEG
46076: PUSH
46077: LD_INT 1
46079: NEG
46080: PUSH
46081: EMPTY
46082: LIST
46083: LIST
46084: PUSH
46085: LD_INT 2
46087: PUSH
46088: LD_INT 1
46090: PUSH
46091: EMPTY
46092: LIST
46093: LIST
46094: PUSH
46095: LD_INT 2
46097: NEG
46098: PUSH
46099: LD_INT 1
46101: NEG
46102: PUSH
46103: EMPTY
46104: LIST
46105: LIST
46106: PUSH
46107: EMPTY
46108: LIST
46109: LIST
46110: LIST
46111: LIST
46112: LIST
46113: LIST
46114: LIST
46115: LIST
46116: LIST
46117: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
46118: LD_ADDR_VAR 0 36
46122: PUSH
46123: LD_INT 0
46125: PUSH
46126: LD_INT 0
46128: PUSH
46129: EMPTY
46130: LIST
46131: LIST
46132: PUSH
46133: LD_INT 0
46135: PUSH
46136: LD_INT 1
46138: NEG
46139: PUSH
46140: EMPTY
46141: LIST
46142: LIST
46143: PUSH
46144: LD_INT 1
46146: PUSH
46147: LD_INT 0
46149: PUSH
46150: EMPTY
46151: LIST
46152: LIST
46153: PUSH
46154: LD_INT 1
46156: PUSH
46157: LD_INT 1
46159: PUSH
46160: EMPTY
46161: LIST
46162: LIST
46163: PUSH
46164: LD_INT 0
46166: PUSH
46167: LD_INT 1
46169: PUSH
46170: EMPTY
46171: LIST
46172: LIST
46173: PUSH
46174: LD_INT 1
46176: NEG
46177: PUSH
46178: LD_INT 0
46180: PUSH
46181: EMPTY
46182: LIST
46183: LIST
46184: PUSH
46185: LD_INT 1
46187: NEG
46188: PUSH
46189: LD_INT 1
46191: NEG
46192: PUSH
46193: EMPTY
46194: LIST
46195: LIST
46196: PUSH
46197: LD_INT 1
46199: NEG
46200: PUSH
46201: LD_INT 2
46203: NEG
46204: PUSH
46205: EMPTY
46206: LIST
46207: LIST
46208: PUSH
46209: LD_INT 1
46211: PUSH
46212: LD_INT 2
46214: PUSH
46215: EMPTY
46216: LIST
46217: LIST
46218: PUSH
46219: EMPTY
46220: LIST
46221: LIST
46222: LIST
46223: LIST
46224: LIST
46225: LIST
46226: LIST
46227: LIST
46228: LIST
46229: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
46230: LD_ADDR_VAR 0 37
46234: PUSH
46235: LD_INT 0
46237: PUSH
46238: LD_INT 0
46240: PUSH
46241: EMPTY
46242: LIST
46243: LIST
46244: PUSH
46245: LD_INT 0
46247: PUSH
46248: LD_INT 1
46250: NEG
46251: PUSH
46252: EMPTY
46253: LIST
46254: LIST
46255: PUSH
46256: LD_INT 1
46258: PUSH
46259: LD_INT 0
46261: PUSH
46262: EMPTY
46263: LIST
46264: LIST
46265: PUSH
46266: LD_INT 1
46268: PUSH
46269: LD_INT 1
46271: PUSH
46272: EMPTY
46273: LIST
46274: LIST
46275: PUSH
46276: LD_INT 0
46278: PUSH
46279: LD_INT 1
46281: PUSH
46282: EMPTY
46283: LIST
46284: LIST
46285: PUSH
46286: LD_INT 1
46288: NEG
46289: PUSH
46290: LD_INT 0
46292: PUSH
46293: EMPTY
46294: LIST
46295: LIST
46296: PUSH
46297: LD_INT 1
46299: NEG
46300: PUSH
46301: LD_INT 1
46303: NEG
46304: PUSH
46305: EMPTY
46306: LIST
46307: LIST
46308: PUSH
46309: LD_INT 1
46311: PUSH
46312: LD_INT 1
46314: NEG
46315: PUSH
46316: EMPTY
46317: LIST
46318: LIST
46319: PUSH
46320: LD_INT 1
46322: NEG
46323: PUSH
46324: LD_INT 1
46326: PUSH
46327: EMPTY
46328: LIST
46329: LIST
46330: PUSH
46331: EMPTY
46332: LIST
46333: LIST
46334: LIST
46335: LIST
46336: LIST
46337: LIST
46338: LIST
46339: LIST
46340: LIST
46341: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
46342: LD_ADDR_VAR 0 38
46346: PUSH
46347: LD_INT 0
46349: PUSH
46350: LD_INT 0
46352: PUSH
46353: EMPTY
46354: LIST
46355: LIST
46356: PUSH
46357: LD_INT 0
46359: PUSH
46360: LD_INT 1
46362: NEG
46363: PUSH
46364: EMPTY
46365: LIST
46366: LIST
46367: PUSH
46368: LD_INT 1
46370: PUSH
46371: LD_INT 0
46373: PUSH
46374: EMPTY
46375: LIST
46376: LIST
46377: PUSH
46378: LD_INT 1
46380: PUSH
46381: LD_INT 1
46383: PUSH
46384: EMPTY
46385: LIST
46386: LIST
46387: PUSH
46388: LD_INT 0
46390: PUSH
46391: LD_INT 1
46393: PUSH
46394: EMPTY
46395: LIST
46396: LIST
46397: PUSH
46398: LD_INT 1
46400: NEG
46401: PUSH
46402: LD_INT 0
46404: PUSH
46405: EMPTY
46406: LIST
46407: LIST
46408: PUSH
46409: LD_INT 1
46411: NEG
46412: PUSH
46413: LD_INT 1
46415: NEG
46416: PUSH
46417: EMPTY
46418: LIST
46419: LIST
46420: PUSH
46421: LD_INT 2
46423: PUSH
46424: LD_INT 1
46426: PUSH
46427: EMPTY
46428: LIST
46429: LIST
46430: PUSH
46431: LD_INT 2
46433: NEG
46434: PUSH
46435: LD_INT 1
46437: NEG
46438: PUSH
46439: EMPTY
46440: LIST
46441: LIST
46442: PUSH
46443: EMPTY
46444: LIST
46445: LIST
46446: LIST
46447: LIST
46448: LIST
46449: LIST
46450: LIST
46451: LIST
46452: LIST
46453: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
46454: LD_ADDR_VAR 0 39
46458: PUSH
46459: LD_INT 0
46461: PUSH
46462: LD_INT 0
46464: PUSH
46465: EMPTY
46466: LIST
46467: LIST
46468: PUSH
46469: LD_INT 0
46471: PUSH
46472: LD_INT 1
46474: NEG
46475: PUSH
46476: EMPTY
46477: LIST
46478: LIST
46479: PUSH
46480: LD_INT 1
46482: PUSH
46483: LD_INT 0
46485: PUSH
46486: EMPTY
46487: LIST
46488: LIST
46489: PUSH
46490: LD_INT 1
46492: PUSH
46493: LD_INT 1
46495: PUSH
46496: EMPTY
46497: LIST
46498: LIST
46499: PUSH
46500: LD_INT 0
46502: PUSH
46503: LD_INT 1
46505: PUSH
46506: EMPTY
46507: LIST
46508: LIST
46509: PUSH
46510: LD_INT 1
46512: NEG
46513: PUSH
46514: LD_INT 0
46516: PUSH
46517: EMPTY
46518: LIST
46519: LIST
46520: PUSH
46521: LD_INT 1
46523: NEG
46524: PUSH
46525: LD_INT 1
46527: NEG
46528: PUSH
46529: EMPTY
46530: LIST
46531: LIST
46532: PUSH
46533: LD_INT 1
46535: NEG
46536: PUSH
46537: LD_INT 2
46539: NEG
46540: PUSH
46541: EMPTY
46542: LIST
46543: LIST
46544: PUSH
46545: LD_INT 1
46547: PUSH
46548: LD_INT 2
46550: PUSH
46551: EMPTY
46552: LIST
46553: LIST
46554: PUSH
46555: EMPTY
46556: LIST
46557: LIST
46558: LIST
46559: LIST
46560: LIST
46561: LIST
46562: LIST
46563: LIST
46564: LIST
46565: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
46566: LD_ADDR_VAR 0 40
46570: PUSH
46571: LD_INT 0
46573: PUSH
46574: LD_INT 0
46576: PUSH
46577: EMPTY
46578: LIST
46579: LIST
46580: PUSH
46581: LD_INT 0
46583: PUSH
46584: LD_INT 1
46586: NEG
46587: PUSH
46588: EMPTY
46589: LIST
46590: LIST
46591: PUSH
46592: LD_INT 1
46594: PUSH
46595: LD_INT 0
46597: PUSH
46598: EMPTY
46599: LIST
46600: LIST
46601: PUSH
46602: LD_INT 1
46604: PUSH
46605: LD_INT 1
46607: PUSH
46608: EMPTY
46609: LIST
46610: LIST
46611: PUSH
46612: LD_INT 0
46614: PUSH
46615: LD_INT 1
46617: PUSH
46618: EMPTY
46619: LIST
46620: LIST
46621: PUSH
46622: LD_INT 1
46624: NEG
46625: PUSH
46626: LD_INT 0
46628: PUSH
46629: EMPTY
46630: LIST
46631: LIST
46632: PUSH
46633: LD_INT 1
46635: NEG
46636: PUSH
46637: LD_INT 1
46639: NEG
46640: PUSH
46641: EMPTY
46642: LIST
46643: LIST
46644: PUSH
46645: LD_INT 1
46647: PUSH
46648: LD_INT 1
46650: NEG
46651: PUSH
46652: EMPTY
46653: LIST
46654: LIST
46655: PUSH
46656: LD_INT 1
46658: NEG
46659: PUSH
46660: LD_INT 1
46662: PUSH
46663: EMPTY
46664: LIST
46665: LIST
46666: PUSH
46667: EMPTY
46668: LIST
46669: LIST
46670: LIST
46671: LIST
46672: LIST
46673: LIST
46674: LIST
46675: LIST
46676: LIST
46677: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46678: LD_ADDR_VAR 0 41
46682: PUSH
46683: LD_INT 0
46685: PUSH
46686: LD_INT 0
46688: PUSH
46689: EMPTY
46690: LIST
46691: LIST
46692: PUSH
46693: LD_INT 0
46695: PUSH
46696: LD_INT 1
46698: NEG
46699: PUSH
46700: EMPTY
46701: LIST
46702: LIST
46703: PUSH
46704: LD_INT 1
46706: PUSH
46707: LD_INT 0
46709: PUSH
46710: EMPTY
46711: LIST
46712: LIST
46713: PUSH
46714: LD_INT 1
46716: PUSH
46717: LD_INT 1
46719: PUSH
46720: EMPTY
46721: LIST
46722: LIST
46723: PUSH
46724: LD_INT 0
46726: PUSH
46727: LD_INT 1
46729: PUSH
46730: EMPTY
46731: LIST
46732: LIST
46733: PUSH
46734: LD_INT 1
46736: NEG
46737: PUSH
46738: LD_INT 0
46740: PUSH
46741: EMPTY
46742: LIST
46743: LIST
46744: PUSH
46745: LD_INT 1
46747: NEG
46748: PUSH
46749: LD_INT 1
46751: NEG
46752: PUSH
46753: EMPTY
46754: LIST
46755: LIST
46756: PUSH
46757: LD_INT 1
46759: NEG
46760: PUSH
46761: LD_INT 2
46763: NEG
46764: PUSH
46765: EMPTY
46766: LIST
46767: LIST
46768: PUSH
46769: LD_INT 1
46771: PUSH
46772: LD_INT 1
46774: NEG
46775: PUSH
46776: EMPTY
46777: LIST
46778: LIST
46779: PUSH
46780: LD_INT 2
46782: PUSH
46783: LD_INT 0
46785: PUSH
46786: EMPTY
46787: LIST
46788: LIST
46789: PUSH
46790: LD_INT 2
46792: PUSH
46793: LD_INT 1
46795: PUSH
46796: EMPTY
46797: LIST
46798: LIST
46799: PUSH
46800: LD_INT 2
46802: PUSH
46803: LD_INT 2
46805: PUSH
46806: EMPTY
46807: LIST
46808: LIST
46809: PUSH
46810: LD_INT 1
46812: PUSH
46813: LD_INT 2
46815: PUSH
46816: EMPTY
46817: LIST
46818: LIST
46819: PUSH
46820: LD_INT 1
46822: NEG
46823: PUSH
46824: LD_INT 1
46826: PUSH
46827: EMPTY
46828: LIST
46829: LIST
46830: PUSH
46831: LD_INT 2
46833: NEG
46834: PUSH
46835: LD_INT 0
46837: PUSH
46838: EMPTY
46839: LIST
46840: LIST
46841: PUSH
46842: LD_INT 2
46844: NEG
46845: PUSH
46846: LD_INT 1
46848: NEG
46849: PUSH
46850: EMPTY
46851: LIST
46852: LIST
46853: PUSH
46854: LD_INT 2
46856: NEG
46857: PUSH
46858: LD_INT 2
46860: NEG
46861: PUSH
46862: EMPTY
46863: LIST
46864: LIST
46865: PUSH
46866: LD_INT 2
46868: NEG
46869: PUSH
46870: LD_INT 3
46872: NEG
46873: PUSH
46874: EMPTY
46875: LIST
46876: LIST
46877: PUSH
46878: LD_INT 2
46880: PUSH
46881: LD_INT 1
46883: NEG
46884: PUSH
46885: EMPTY
46886: LIST
46887: LIST
46888: PUSH
46889: LD_INT 3
46891: PUSH
46892: LD_INT 0
46894: PUSH
46895: EMPTY
46896: LIST
46897: LIST
46898: PUSH
46899: LD_INT 3
46901: PUSH
46902: LD_INT 1
46904: PUSH
46905: EMPTY
46906: LIST
46907: LIST
46908: PUSH
46909: LD_INT 3
46911: PUSH
46912: LD_INT 2
46914: PUSH
46915: EMPTY
46916: LIST
46917: LIST
46918: PUSH
46919: LD_INT 3
46921: PUSH
46922: LD_INT 3
46924: PUSH
46925: EMPTY
46926: LIST
46927: LIST
46928: PUSH
46929: LD_INT 2
46931: PUSH
46932: LD_INT 3
46934: PUSH
46935: EMPTY
46936: LIST
46937: LIST
46938: PUSH
46939: LD_INT 2
46941: NEG
46942: PUSH
46943: LD_INT 1
46945: PUSH
46946: EMPTY
46947: LIST
46948: LIST
46949: PUSH
46950: LD_INT 3
46952: NEG
46953: PUSH
46954: LD_INT 0
46956: PUSH
46957: EMPTY
46958: LIST
46959: LIST
46960: PUSH
46961: LD_INT 3
46963: NEG
46964: PUSH
46965: LD_INT 1
46967: NEG
46968: PUSH
46969: EMPTY
46970: LIST
46971: LIST
46972: PUSH
46973: LD_INT 3
46975: NEG
46976: PUSH
46977: LD_INT 2
46979: NEG
46980: PUSH
46981: EMPTY
46982: LIST
46983: LIST
46984: PUSH
46985: LD_INT 3
46987: NEG
46988: PUSH
46989: LD_INT 3
46991: NEG
46992: PUSH
46993: EMPTY
46994: LIST
46995: LIST
46996: PUSH
46997: EMPTY
46998: LIST
46999: LIST
47000: LIST
47001: LIST
47002: LIST
47003: LIST
47004: LIST
47005: LIST
47006: LIST
47007: LIST
47008: LIST
47009: LIST
47010: LIST
47011: LIST
47012: LIST
47013: LIST
47014: LIST
47015: LIST
47016: LIST
47017: LIST
47018: LIST
47019: LIST
47020: LIST
47021: LIST
47022: LIST
47023: LIST
47024: LIST
47025: LIST
47026: LIST
47027: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47028: LD_ADDR_VAR 0 42
47032: PUSH
47033: LD_INT 0
47035: PUSH
47036: LD_INT 0
47038: PUSH
47039: EMPTY
47040: LIST
47041: LIST
47042: PUSH
47043: LD_INT 0
47045: PUSH
47046: LD_INT 1
47048: NEG
47049: PUSH
47050: EMPTY
47051: LIST
47052: LIST
47053: PUSH
47054: LD_INT 1
47056: PUSH
47057: LD_INT 0
47059: PUSH
47060: EMPTY
47061: LIST
47062: LIST
47063: PUSH
47064: LD_INT 1
47066: PUSH
47067: LD_INT 1
47069: PUSH
47070: EMPTY
47071: LIST
47072: LIST
47073: PUSH
47074: LD_INT 0
47076: PUSH
47077: LD_INT 1
47079: PUSH
47080: EMPTY
47081: LIST
47082: LIST
47083: PUSH
47084: LD_INT 1
47086: NEG
47087: PUSH
47088: LD_INT 0
47090: PUSH
47091: EMPTY
47092: LIST
47093: LIST
47094: PUSH
47095: LD_INT 1
47097: NEG
47098: PUSH
47099: LD_INT 1
47101: NEG
47102: PUSH
47103: EMPTY
47104: LIST
47105: LIST
47106: PUSH
47107: LD_INT 1
47109: NEG
47110: PUSH
47111: LD_INT 2
47113: NEG
47114: PUSH
47115: EMPTY
47116: LIST
47117: LIST
47118: PUSH
47119: LD_INT 0
47121: PUSH
47122: LD_INT 2
47124: NEG
47125: PUSH
47126: EMPTY
47127: LIST
47128: LIST
47129: PUSH
47130: LD_INT 1
47132: PUSH
47133: LD_INT 1
47135: NEG
47136: PUSH
47137: EMPTY
47138: LIST
47139: LIST
47140: PUSH
47141: LD_INT 2
47143: PUSH
47144: LD_INT 1
47146: PUSH
47147: EMPTY
47148: LIST
47149: LIST
47150: PUSH
47151: LD_INT 2
47153: PUSH
47154: LD_INT 2
47156: PUSH
47157: EMPTY
47158: LIST
47159: LIST
47160: PUSH
47161: LD_INT 1
47163: PUSH
47164: LD_INT 2
47166: PUSH
47167: EMPTY
47168: LIST
47169: LIST
47170: PUSH
47171: LD_INT 0
47173: PUSH
47174: LD_INT 2
47176: PUSH
47177: EMPTY
47178: LIST
47179: LIST
47180: PUSH
47181: LD_INT 1
47183: NEG
47184: PUSH
47185: LD_INT 1
47187: PUSH
47188: EMPTY
47189: LIST
47190: LIST
47191: PUSH
47192: LD_INT 2
47194: NEG
47195: PUSH
47196: LD_INT 1
47198: NEG
47199: PUSH
47200: EMPTY
47201: LIST
47202: LIST
47203: PUSH
47204: LD_INT 2
47206: NEG
47207: PUSH
47208: LD_INT 2
47210: NEG
47211: PUSH
47212: EMPTY
47213: LIST
47214: LIST
47215: PUSH
47216: LD_INT 2
47218: NEG
47219: PUSH
47220: LD_INT 3
47222: NEG
47223: PUSH
47224: EMPTY
47225: LIST
47226: LIST
47227: PUSH
47228: LD_INT 1
47230: NEG
47231: PUSH
47232: LD_INT 3
47234: NEG
47235: PUSH
47236: EMPTY
47237: LIST
47238: LIST
47239: PUSH
47240: LD_INT 0
47242: PUSH
47243: LD_INT 3
47245: NEG
47246: PUSH
47247: EMPTY
47248: LIST
47249: LIST
47250: PUSH
47251: LD_INT 1
47253: PUSH
47254: LD_INT 2
47256: NEG
47257: PUSH
47258: EMPTY
47259: LIST
47260: LIST
47261: PUSH
47262: LD_INT 3
47264: PUSH
47265: LD_INT 2
47267: PUSH
47268: EMPTY
47269: LIST
47270: LIST
47271: PUSH
47272: LD_INT 3
47274: PUSH
47275: LD_INT 3
47277: PUSH
47278: EMPTY
47279: LIST
47280: LIST
47281: PUSH
47282: LD_INT 2
47284: PUSH
47285: LD_INT 3
47287: PUSH
47288: EMPTY
47289: LIST
47290: LIST
47291: PUSH
47292: LD_INT 1
47294: PUSH
47295: LD_INT 3
47297: PUSH
47298: EMPTY
47299: LIST
47300: LIST
47301: PUSH
47302: LD_INT 0
47304: PUSH
47305: LD_INT 3
47307: PUSH
47308: EMPTY
47309: LIST
47310: LIST
47311: PUSH
47312: LD_INT 1
47314: NEG
47315: PUSH
47316: LD_INT 2
47318: PUSH
47319: EMPTY
47320: LIST
47321: LIST
47322: PUSH
47323: LD_INT 3
47325: NEG
47326: PUSH
47327: LD_INT 2
47329: NEG
47330: PUSH
47331: EMPTY
47332: LIST
47333: LIST
47334: PUSH
47335: LD_INT 3
47337: NEG
47338: PUSH
47339: LD_INT 3
47341: NEG
47342: PUSH
47343: EMPTY
47344: LIST
47345: LIST
47346: PUSH
47347: EMPTY
47348: LIST
47349: LIST
47350: LIST
47351: LIST
47352: LIST
47353: LIST
47354: LIST
47355: LIST
47356: LIST
47357: LIST
47358: LIST
47359: LIST
47360: LIST
47361: LIST
47362: LIST
47363: LIST
47364: LIST
47365: LIST
47366: LIST
47367: LIST
47368: LIST
47369: LIST
47370: LIST
47371: LIST
47372: LIST
47373: LIST
47374: LIST
47375: LIST
47376: LIST
47377: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47378: LD_ADDR_VAR 0 43
47382: PUSH
47383: LD_INT 0
47385: PUSH
47386: LD_INT 0
47388: PUSH
47389: EMPTY
47390: LIST
47391: LIST
47392: PUSH
47393: LD_INT 0
47395: PUSH
47396: LD_INT 1
47398: NEG
47399: PUSH
47400: EMPTY
47401: LIST
47402: LIST
47403: PUSH
47404: LD_INT 1
47406: PUSH
47407: LD_INT 0
47409: PUSH
47410: EMPTY
47411: LIST
47412: LIST
47413: PUSH
47414: LD_INT 1
47416: PUSH
47417: LD_INT 1
47419: PUSH
47420: EMPTY
47421: LIST
47422: LIST
47423: PUSH
47424: LD_INT 0
47426: PUSH
47427: LD_INT 1
47429: PUSH
47430: EMPTY
47431: LIST
47432: LIST
47433: PUSH
47434: LD_INT 1
47436: NEG
47437: PUSH
47438: LD_INT 0
47440: PUSH
47441: EMPTY
47442: LIST
47443: LIST
47444: PUSH
47445: LD_INT 1
47447: NEG
47448: PUSH
47449: LD_INT 1
47451: NEG
47452: PUSH
47453: EMPTY
47454: LIST
47455: LIST
47456: PUSH
47457: LD_INT 1
47459: NEG
47460: PUSH
47461: LD_INT 2
47463: NEG
47464: PUSH
47465: EMPTY
47466: LIST
47467: LIST
47468: PUSH
47469: LD_INT 0
47471: PUSH
47472: LD_INT 2
47474: NEG
47475: PUSH
47476: EMPTY
47477: LIST
47478: LIST
47479: PUSH
47480: LD_INT 1
47482: PUSH
47483: LD_INT 1
47485: NEG
47486: PUSH
47487: EMPTY
47488: LIST
47489: LIST
47490: PUSH
47491: LD_INT 2
47493: PUSH
47494: LD_INT 0
47496: PUSH
47497: EMPTY
47498: LIST
47499: LIST
47500: PUSH
47501: LD_INT 2
47503: PUSH
47504: LD_INT 1
47506: PUSH
47507: EMPTY
47508: LIST
47509: LIST
47510: PUSH
47511: LD_INT 1
47513: PUSH
47514: LD_INT 2
47516: PUSH
47517: EMPTY
47518: LIST
47519: LIST
47520: PUSH
47521: LD_INT 0
47523: PUSH
47524: LD_INT 2
47526: PUSH
47527: EMPTY
47528: LIST
47529: LIST
47530: PUSH
47531: LD_INT 1
47533: NEG
47534: PUSH
47535: LD_INT 1
47537: PUSH
47538: EMPTY
47539: LIST
47540: LIST
47541: PUSH
47542: LD_INT 2
47544: NEG
47545: PUSH
47546: LD_INT 0
47548: PUSH
47549: EMPTY
47550: LIST
47551: LIST
47552: PUSH
47553: LD_INT 2
47555: NEG
47556: PUSH
47557: LD_INT 1
47559: NEG
47560: PUSH
47561: EMPTY
47562: LIST
47563: LIST
47564: PUSH
47565: LD_INT 1
47567: NEG
47568: PUSH
47569: LD_INT 3
47571: NEG
47572: PUSH
47573: EMPTY
47574: LIST
47575: LIST
47576: PUSH
47577: LD_INT 0
47579: PUSH
47580: LD_INT 3
47582: NEG
47583: PUSH
47584: EMPTY
47585: LIST
47586: LIST
47587: PUSH
47588: LD_INT 1
47590: PUSH
47591: LD_INT 2
47593: NEG
47594: PUSH
47595: EMPTY
47596: LIST
47597: LIST
47598: PUSH
47599: LD_INT 2
47601: PUSH
47602: LD_INT 1
47604: NEG
47605: PUSH
47606: EMPTY
47607: LIST
47608: LIST
47609: PUSH
47610: LD_INT 3
47612: PUSH
47613: LD_INT 0
47615: PUSH
47616: EMPTY
47617: LIST
47618: LIST
47619: PUSH
47620: LD_INT 3
47622: PUSH
47623: LD_INT 1
47625: PUSH
47626: EMPTY
47627: LIST
47628: LIST
47629: PUSH
47630: LD_INT 1
47632: PUSH
47633: LD_INT 3
47635: PUSH
47636: EMPTY
47637: LIST
47638: LIST
47639: PUSH
47640: LD_INT 0
47642: PUSH
47643: LD_INT 3
47645: PUSH
47646: EMPTY
47647: LIST
47648: LIST
47649: PUSH
47650: LD_INT 1
47652: NEG
47653: PUSH
47654: LD_INT 2
47656: PUSH
47657: EMPTY
47658: LIST
47659: LIST
47660: PUSH
47661: LD_INT 2
47663: NEG
47664: PUSH
47665: LD_INT 1
47667: PUSH
47668: EMPTY
47669: LIST
47670: LIST
47671: PUSH
47672: LD_INT 3
47674: NEG
47675: PUSH
47676: LD_INT 0
47678: PUSH
47679: EMPTY
47680: LIST
47681: LIST
47682: PUSH
47683: LD_INT 3
47685: NEG
47686: PUSH
47687: LD_INT 1
47689: NEG
47690: PUSH
47691: EMPTY
47692: LIST
47693: LIST
47694: PUSH
47695: EMPTY
47696: LIST
47697: LIST
47698: LIST
47699: LIST
47700: LIST
47701: LIST
47702: LIST
47703: LIST
47704: LIST
47705: LIST
47706: LIST
47707: LIST
47708: LIST
47709: LIST
47710: LIST
47711: LIST
47712: LIST
47713: LIST
47714: LIST
47715: LIST
47716: LIST
47717: LIST
47718: LIST
47719: LIST
47720: LIST
47721: LIST
47722: LIST
47723: LIST
47724: LIST
47725: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47726: LD_ADDR_VAR 0 44
47730: PUSH
47731: LD_INT 0
47733: PUSH
47734: LD_INT 0
47736: PUSH
47737: EMPTY
47738: LIST
47739: LIST
47740: PUSH
47741: LD_INT 0
47743: PUSH
47744: LD_INT 1
47746: NEG
47747: PUSH
47748: EMPTY
47749: LIST
47750: LIST
47751: PUSH
47752: LD_INT 1
47754: PUSH
47755: LD_INT 0
47757: PUSH
47758: EMPTY
47759: LIST
47760: LIST
47761: PUSH
47762: LD_INT 1
47764: PUSH
47765: LD_INT 1
47767: PUSH
47768: EMPTY
47769: LIST
47770: LIST
47771: PUSH
47772: LD_INT 0
47774: PUSH
47775: LD_INT 1
47777: PUSH
47778: EMPTY
47779: LIST
47780: LIST
47781: PUSH
47782: LD_INT 1
47784: NEG
47785: PUSH
47786: LD_INT 0
47788: PUSH
47789: EMPTY
47790: LIST
47791: LIST
47792: PUSH
47793: LD_INT 1
47795: NEG
47796: PUSH
47797: LD_INT 1
47799: NEG
47800: PUSH
47801: EMPTY
47802: LIST
47803: LIST
47804: PUSH
47805: LD_INT 1
47807: NEG
47808: PUSH
47809: LD_INT 2
47811: NEG
47812: PUSH
47813: EMPTY
47814: LIST
47815: LIST
47816: PUSH
47817: LD_INT 1
47819: PUSH
47820: LD_INT 1
47822: NEG
47823: PUSH
47824: EMPTY
47825: LIST
47826: LIST
47827: PUSH
47828: LD_INT 2
47830: PUSH
47831: LD_INT 0
47833: PUSH
47834: EMPTY
47835: LIST
47836: LIST
47837: PUSH
47838: LD_INT 2
47840: PUSH
47841: LD_INT 1
47843: PUSH
47844: EMPTY
47845: LIST
47846: LIST
47847: PUSH
47848: LD_INT 2
47850: PUSH
47851: LD_INT 2
47853: PUSH
47854: EMPTY
47855: LIST
47856: LIST
47857: PUSH
47858: LD_INT 1
47860: PUSH
47861: LD_INT 2
47863: PUSH
47864: EMPTY
47865: LIST
47866: LIST
47867: PUSH
47868: LD_INT 1
47870: NEG
47871: PUSH
47872: LD_INT 1
47874: PUSH
47875: EMPTY
47876: LIST
47877: LIST
47878: PUSH
47879: LD_INT 2
47881: NEG
47882: PUSH
47883: LD_INT 0
47885: PUSH
47886: EMPTY
47887: LIST
47888: LIST
47889: PUSH
47890: LD_INT 2
47892: NEG
47893: PUSH
47894: LD_INT 1
47896: NEG
47897: PUSH
47898: EMPTY
47899: LIST
47900: LIST
47901: PUSH
47902: LD_INT 2
47904: NEG
47905: PUSH
47906: LD_INT 2
47908: NEG
47909: PUSH
47910: EMPTY
47911: LIST
47912: LIST
47913: PUSH
47914: LD_INT 2
47916: NEG
47917: PUSH
47918: LD_INT 3
47920: NEG
47921: PUSH
47922: EMPTY
47923: LIST
47924: LIST
47925: PUSH
47926: LD_INT 2
47928: PUSH
47929: LD_INT 1
47931: NEG
47932: PUSH
47933: EMPTY
47934: LIST
47935: LIST
47936: PUSH
47937: LD_INT 3
47939: PUSH
47940: LD_INT 0
47942: PUSH
47943: EMPTY
47944: LIST
47945: LIST
47946: PUSH
47947: LD_INT 3
47949: PUSH
47950: LD_INT 1
47952: PUSH
47953: EMPTY
47954: LIST
47955: LIST
47956: PUSH
47957: LD_INT 3
47959: PUSH
47960: LD_INT 2
47962: PUSH
47963: EMPTY
47964: LIST
47965: LIST
47966: PUSH
47967: LD_INT 3
47969: PUSH
47970: LD_INT 3
47972: PUSH
47973: EMPTY
47974: LIST
47975: LIST
47976: PUSH
47977: LD_INT 2
47979: PUSH
47980: LD_INT 3
47982: PUSH
47983: EMPTY
47984: LIST
47985: LIST
47986: PUSH
47987: LD_INT 2
47989: NEG
47990: PUSH
47991: LD_INT 1
47993: PUSH
47994: EMPTY
47995: LIST
47996: LIST
47997: PUSH
47998: LD_INT 3
48000: NEG
48001: PUSH
48002: LD_INT 0
48004: PUSH
48005: EMPTY
48006: LIST
48007: LIST
48008: PUSH
48009: LD_INT 3
48011: NEG
48012: PUSH
48013: LD_INT 1
48015: NEG
48016: PUSH
48017: EMPTY
48018: LIST
48019: LIST
48020: PUSH
48021: LD_INT 3
48023: NEG
48024: PUSH
48025: LD_INT 2
48027: NEG
48028: PUSH
48029: EMPTY
48030: LIST
48031: LIST
48032: PUSH
48033: LD_INT 3
48035: NEG
48036: PUSH
48037: LD_INT 3
48039: NEG
48040: PUSH
48041: EMPTY
48042: LIST
48043: LIST
48044: PUSH
48045: EMPTY
48046: LIST
48047: LIST
48048: LIST
48049: LIST
48050: LIST
48051: LIST
48052: LIST
48053: LIST
48054: LIST
48055: LIST
48056: LIST
48057: LIST
48058: LIST
48059: LIST
48060: LIST
48061: LIST
48062: LIST
48063: LIST
48064: LIST
48065: LIST
48066: LIST
48067: LIST
48068: LIST
48069: LIST
48070: LIST
48071: LIST
48072: LIST
48073: LIST
48074: LIST
48075: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48076: LD_ADDR_VAR 0 45
48080: PUSH
48081: LD_INT 0
48083: PUSH
48084: LD_INT 0
48086: PUSH
48087: EMPTY
48088: LIST
48089: LIST
48090: PUSH
48091: LD_INT 0
48093: PUSH
48094: LD_INT 1
48096: NEG
48097: PUSH
48098: EMPTY
48099: LIST
48100: LIST
48101: PUSH
48102: LD_INT 1
48104: PUSH
48105: LD_INT 0
48107: PUSH
48108: EMPTY
48109: LIST
48110: LIST
48111: PUSH
48112: LD_INT 1
48114: PUSH
48115: LD_INT 1
48117: PUSH
48118: EMPTY
48119: LIST
48120: LIST
48121: PUSH
48122: LD_INT 0
48124: PUSH
48125: LD_INT 1
48127: PUSH
48128: EMPTY
48129: LIST
48130: LIST
48131: PUSH
48132: LD_INT 1
48134: NEG
48135: PUSH
48136: LD_INT 0
48138: PUSH
48139: EMPTY
48140: LIST
48141: LIST
48142: PUSH
48143: LD_INT 1
48145: NEG
48146: PUSH
48147: LD_INT 1
48149: NEG
48150: PUSH
48151: EMPTY
48152: LIST
48153: LIST
48154: PUSH
48155: LD_INT 1
48157: NEG
48158: PUSH
48159: LD_INT 2
48161: NEG
48162: PUSH
48163: EMPTY
48164: LIST
48165: LIST
48166: PUSH
48167: LD_INT 0
48169: PUSH
48170: LD_INT 2
48172: NEG
48173: PUSH
48174: EMPTY
48175: LIST
48176: LIST
48177: PUSH
48178: LD_INT 1
48180: PUSH
48181: LD_INT 1
48183: NEG
48184: PUSH
48185: EMPTY
48186: LIST
48187: LIST
48188: PUSH
48189: LD_INT 2
48191: PUSH
48192: LD_INT 1
48194: PUSH
48195: EMPTY
48196: LIST
48197: LIST
48198: PUSH
48199: LD_INT 2
48201: PUSH
48202: LD_INT 2
48204: PUSH
48205: EMPTY
48206: LIST
48207: LIST
48208: PUSH
48209: LD_INT 1
48211: PUSH
48212: LD_INT 2
48214: PUSH
48215: EMPTY
48216: LIST
48217: LIST
48218: PUSH
48219: LD_INT 0
48221: PUSH
48222: LD_INT 2
48224: PUSH
48225: EMPTY
48226: LIST
48227: LIST
48228: PUSH
48229: LD_INT 1
48231: NEG
48232: PUSH
48233: LD_INT 1
48235: PUSH
48236: EMPTY
48237: LIST
48238: LIST
48239: PUSH
48240: LD_INT 2
48242: NEG
48243: PUSH
48244: LD_INT 1
48246: NEG
48247: PUSH
48248: EMPTY
48249: LIST
48250: LIST
48251: PUSH
48252: LD_INT 2
48254: NEG
48255: PUSH
48256: LD_INT 2
48258: NEG
48259: PUSH
48260: EMPTY
48261: LIST
48262: LIST
48263: PUSH
48264: LD_INT 2
48266: NEG
48267: PUSH
48268: LD_INT 3
48270: NEG
48271: PUSH
48272: EMPTY
48273: LIST
48274: LIST
48275: PUSH
48276: LD_INT 1
48278: NEG
48279: PUSH
48280: LD_INT 3
48282: NEG
48283: PUSH
48284: EMPTY
48285: LIST
48286: LIST
48287: PUSH
48288: LD_INT 0
48290: PUSH
48291: LD_INT 3
48293: NEG
48294: PUSH
48295: EMPTY
48296: LIST
48297: LIST
48298: PUSH
48299: LD_INT 1
48301: PUSH
48302: LD_INT 2
48304: NEG
48305: PUSH
48306: EMPTY
48307: LIST
48308: LIST
48309: PUSH
48310: LD_INT 3
48312: PUSH
48313: LD_INT 2
48315: PUSH
48316: EMPTY
48317: LIST
48318: LIST
48319: PUSH
48320: LD_INT 3
48322: PUSH
48323: LD_INT 3
48325: PUSH
48326: EMPTY
48327: LIST
48328: LIST
48329: PUSH
48330: LD_INT 2
48332: PUSH
48333: LD_INT 3
48335: PUSH
48336: EMPTY
48337: LIST
48338: LIST
48339: PUSH
48340: LD_INT 1
48342: PUSH
48343: LD_INT 3
48345: PUSH
48346: EMPTY
48347: LIST
48348: LIST
48349: PUSH
48350: LD_INT 0
48352: PUSH
48353: LD_INT 3
48355: PUSH
48356: EMPTY
48357: LIST
48358: LIST
48359: PUSH
48360: LD_INT 1
48362: NEG
48363: PUSH
48364: LD_INT 2
48366: PUSH
48367: EMPTY
48368: LIST
48369: LIST
48370: PUSH
48371: LD_INT 3
48373: NEG
48374: PUSH
48375: LD_INT 2
48377: NEG
48378: PUSH
48379: EMPTY
48380: LIST
48381: LIST
48382: PUSH
48383: LD_INT 3
48385: NEG
48386: PUSH
48387: LD_INT 3
48389: NEG
48390: PUSH
48391: EMPTY
48392: LIST
48393: LIST
48394: PUSH
48395: EMPTY
48396: LIST
48397: LIST
48398: LIST
48399: LIST
48400: LIST
48401: LIST
48402: LIST
48403: LIST
48404: LIST
48405: LIST
48406: LIST
48407: LIST
48408: LIST
48409: LIST
48410: LIST
48411: LIST
48412: LIST
48413: LIST
48414: LIST
48415: LIST
48416: LIST
48417: LIST
48418: LIST
48419: LIST
48420: LIST
48421: LIST
48422: LIST
48423: LIST
48424: LIST
48425: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48426: LD_ADDR_VAR 0 46
48430: PUSH
48431: LD_INT 0
48433: PUSH
48434: LD_INT 0
48436: PUSH
48437: EMPTY
48438: LIST
48439: LIST
48440: PUSH
48441: LD_INT 0
48443: PUSH
48444: LD_INT 1
48446: NEG
48447: PUSH
48448: EMPTY
48449: LIST
48450: LIST
48451: PUSH
48452: LD_INT 1
48454: PUSH
48455: LD_INT 0
48457: PUSH
48458: EMPTY
48459: LIST
48460: LIST
48461: PUSH
48462: LD_INT 1
48464: PUSH
48465: LD_INT 1
48467: PUSH
48468: EMPTY
48469: LIST
48470: LIST
48471: PUSH
48472: LD_INT 0
48474: PUSH
48475: LD_INT 1
48477: PUSH
48478: EMPTY
48479: LIST
48480: LIST
48481: PUSH
48482: LD_INT 1
48484: NEG
48485: PUSH
48486: LD_INT 0
48488: PUSH
48489: EMPTY
48490: LIST
48491: LIST
48492: PUSH
48493: LD_INT 1
48495: NEG
48496: PUSH
48497: LD_INT 1
48499: NEG
48500: PUSH
48501: EMPTY
48502: LIST
48503: LIST
48504: PUSH
48505: LD_INT 1
48507: NEG
48508: PUSH
48509: LD_INT 2
48511: NEG
48512: PUSH
48513: EMPTY
48514: LIST
48515: LIST
48516: PUSH
48517: LD_INT 0
48519: PUSH
48520: LD_INT 2
48522: NEG
48523: PUSH
48524: EMPTY
48525: LIST
48526: LIST
48527: PUSH
48528: LD_INT 1
48530: PUSH
48531: LD_INT 1
48533: NEG
48534: PUSH
48535: EMPTY
48536: LIST
48537: LIST
48538: PUSH
48539: LD_INT 2
48541: PUSH
48542: LD_INT 0
48544: PUSH
48545: EMPTY
48546: LIST
48547: LIST
48548: PUSH
48549: LD_INT 2
48551: PUSH
48552: LD_INT 1
48554: PUSH
48555: EMPTY
48556: LIST
48557: LIST
48558: PUSH
48559: LD_INT 1
48561: PUSH
48562: LD_INT 2
48564: PUSH
48565: EMPTY
48566: LIST
48567: LIST
48568: PUSH
48569: LD_INT 0
48571: PUSH
48572: LD_INT 2
48574: PUSH
48575: EMPTY
48576: LIST
48577: LIST
48578: PUSH
48579: LD_INT 1
48581: NEG
48582: PUSH
48583: LD_INT 1
48585: PUSH
48586: EMPTY
48587: LIST
48588: LIST
48589: PUSH
48590: LD_INT 2
48592: NEG
48593: PUSH
48594: LD_INT 0
48596: PUSH
48597: EMPTY
48598: LIST
48599: LIST
48600: PUSH
48601: LD_INT 2
48603: NEG
48604: PUSH
48605: LD_INT 1
48607: NEG
48608: PUSH
48609: EMPTY
48610: LIST
48611: LIST
48612: PUSH
48613: LD_INT 1
48615: NEG
48616: PUSH
48617: LD_INT 3
48619: NEG
48620: PUSH
48621: EMPTY
48622: LIST
48623: LIST
48624: PUSH
48625: LD_INT 0
48627: PUSH
48628: LD_INT 3
48630: NEG
48631: PUSH
48632: EMPTY
48633: LIST
48634: LIST
48635: PUSH
48636: LD_INT 1
48638: PUSH
48639: LD_INT 2
48641: NEG
48642: PUSH
48643: EMPTY
48644: LIST
48645: LIST
48646: PUSH
48647: LD_INT 2
48649: PUSH
48650: LD_INT 1
48652: NEG
48653: PUSH
48654: EMPTY
48655: LIST
48656: LIST
48657: PUSH
48658: LD_INT 3
48660: PUSH
48661: LD_INT 0
48663: PUSH
48664: EMPTY
48665: LIST
48666: LIST
48667: PUSH
48668: LD_INT 3
48670: PUSH
48671: LD_INT 1
48673: PUSH
48674: EMPTY
48675: LIST
48676: LIST
48677: PUSH
48678: LD_INT 1
48680: PUSH
48681: LD_INT 3
48683: PUSH
48684: EMPTY
48685: LIST
48686: LIST
48687: PUSH
48688: LD_INT 0
48690: PUSH
48691: LD_INT 3
48693: PUSH
48694: EMPTY
48695: LIST
48696: LIST
48697: PUSH
48698: LD_INT 1
48700: NEG
48701: PUSH
48702: LD_INT 2
48704: PUSH
48705: EMPTY
48706: LIST
48707: LIST
48708: PUSH
48709: LD_INT 2
48711: NEG
48712: PUSH
48713: LD_INT 1
48715: PUSH
48716: EMPTY
48717: LIST
48718: LIST
48719: PUSH
48720: LD_INT 3
48722: NEG
48723: PUSH
48724: LD_INT 0
48726: PUSH
48727: EMPTY
48728: LIST
48729: LIST
48730: PUSH
48731: LD_INT 3
48733: NEG
48734: PUSH
48735: LD_INT 1
48737: NEG
48738: PUSH
48739: EMPTY
48740: LIST
48741: LIST
48742: PUSH
48743: EMPTY
48744: LIST
48745: LIST
48746: LIST
48747: LIST
48748: LIST
48749: LIST
48750: LIST
48751: LIST
48752: LIST
48753: LIST
48754: LIST
48755: LIST
48756: LIST
48757: LIST
48758: LIST
48759: LIST
48760: LIST
48761: LIST
48762: LIST
48763: LIST
48764: LIST
48765: LIST
48766: LIST
48767: LIST
48768: LIST
48769: LIST
48770: LIST
48771: LIST
48772: LIST
48773: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48774: LD_ADDR_VAR 0 47
48778: PUSH
48779: LD_INT 0
48781: PUSH
48782: LD_INT 0
48784: PUSH
48785: EMPTY
48786: LIST
48787: LIST
48788: PUSH
48789: LD_INT 0
48791: PUSH
48792: LD_INT 1
48794: NEG
48795: PUSH
48796: EMPTY
48797: LIST
48798: LIST
48799: PUSH
48800: LD_INT 1
48802: PUSH
48803: LD_INT 0
48805: PUSH
48806: EMPTY
48807: LIST
48808: LIST
48809: PUSH
48810: LD_INT 1
48812: PUSH
48813: LD_INT 1
48815: PUSH
48816: EMPTY
48817: LIST
48818: LIST
48819: PUSH
48820: LD_INT 0
48822: PUSH
48823: LD_INT 1
48825: PUSH
48826: EMPTY
48827: LIST
48828: LIST
48829: PUSH
48830: LD_INT 1
48832: NEG
48833: PUSH
48834: LD_INT 0
48836: PUSH
48837: EMPTY
48838: LIST
48839: LIST
48840: PUSH
48841: LD_INT 1
48843: NEG
48844: PUSH
48845: LD_INT 1
48847: NEG
48848: PUSH
48849: EMPTY
48850: LIST
48851: LIST
48852: PUSH
48853: LD_INT 1
48855: NEG
48856: PUSH
48857: LD_INT 2
48859: NEG
48860: PUSH
48861: EMPTY
48862: LIST
48863: LIST
48864: PUSH
48865: LD_INT 0
48867: PUSH
48868: LD_INT 2
48870: NEG
48871: PUSH
48872: EMPTY
48873: LIST
48874: LIST
48875: PUSH
48876: LD_INT 1
48878: PUSH
48879: LD_INT 1
48881: NEG
48882: PUSH
48883: EMPTY
48884: LIST
48885: LIST
48886: PUSH
48887: LD_INT 2
48889: NEG
48890: PUSH
48891: LD_INT 1
48893: NEG
48894: PUSH
48895: EMPTY
48896: LIST
48897: LIST
48898: PUSH
48899: LD_INT 2
48901: NEG
48902: PUSH
48903: LD_INT 2
48905: NEG
48906: PUSH
48907: EMPTY
48908: LIST
48909: LIST
48910: PUSH
48911: EMPTY
48912: LIST
48913: LIST
48914: LIST
48915: LIST
48916: LIST
48917: LIST
48918: LIST
48919: LIST
48920: LIST
48921: LIST
48922: LIST
48923: LIST
48924: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
48925: LD_ADDR_VAR 0 48
48929: PUSH
48930: LD_INT 0
48932: PUSH
48933: LD_INT 0
48935: PUSH
48936: EMPTY
48937: LIST
48938: LIST
48939: PUSH
48940: LD_INT 0
48942: PUSH
48943: LD_INT 1
48945: NEG
48946: PUSH
48947: EMPTY
48948: LIST
48949: LIST
48950: PUSH
48951: LD_INT 1
48953: PUSH
48954: LD_INT 0
48956: PUSH
48957: EMPTY
48958: LIST
48959: LIST
48960: PUSH
48961: LD_INT 1
48963: PUSH
48964: LD_INT 1
48966: PUSH
48967: EMPTY
48968: LIST
48969: LIST
48970: PUSH
48971: LD_INT 0
48973: PUSH
48974: LD_INT 1
48976: PUSH
48977: EMPTY
48978: LIST
48979: LIST
48980: PUSH
48981: LD_INT 1
48983: NEG
48984: PUSH
48985: LD_INT 0
48987: PUSH
48988: EMPTY
48989: LIST
48990: LIST
48991: PUSH
48992: LD_INT 1
48994: NEG
48995: PUSH
48996: LD_INT 1
48998: NEG
48999: PUSH
49000: EMPTY
49001: LIST
49002: LIST
49003: PUSH
49004: LD_INT 1
49006: NEG
49007: PUSH
49008: LD_INT 2
49010: NEG
49011: PUSH
49012: EMPTY
49013: LIST
49014: LIST
49015: PUSH
49016: LD_INT 0
49018: PUSH
49019: LD_INT 2
49021: NEG
49022: PUSH
49023: EMPTY
49024: LIST
49025: LIST
49026: PUSH
49027: LD_INT 1
49029: PUSH
49030: LD_INT 1
49032: NEG
49033: PUSH
49034: EMPTY
49035: LIST
49036: LIST
49037: PUSH
49038: LD_INT 2
49040: PUSH
49041: LD_INT 0
49043: PUSH
49044: EMPTY
49045: LIST
49046: LIST
49047: PUSH
49048: LD_INT 2
49050: PUSH
49051: LD_INT 1
49053: PUSH
49054: EMPTY
49055: LIST
49056: LIST
49057: PUSH
49058: EMPTY
49059: LIST
49060: LIST
49061: LIST
49062: LIST
49063: LIST
49064: LIST
49065: LIST
49066: LIST
49067: LIST
49068: LIST
49069: LIST
49070: LIST
49071: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
49072: LD_ADDR_VAR 0 49
49076: PUSH
49077: LD_INT 0
49079: PUSH
49080: LD_INT 0
49082: PUSH
49083: EMPTY
49084: LIST
49085: LIST
49086: PUSH
49087: LD_INT 0
49089: PUSH
49090: LD_INT 1
49092: NEG
49093: PUSH
49094: EMPTY
49095: LIST
49096: LIST
49097: PUSH
49098: LD_INT 1
49100: PUSH
49101: LD_INT 0
49103: PUSH
49104: EMPTY
49105: LIST
49106: LIST
49107: PUSH
49108: LD_INT 1
49110: PUSH
49111: LD_INT 1
49113: PUSH
49114: EMPTY
49115: LIST
49116: LIST
49117: PUSH
49118: LD_INT 0
49120: PUSH
49121: LD_INT 1
49123: PUSH
49124: EMPTY
49125: LIST
49126: LIST
49127: PUSH
49128: LD_INT 1
49130: NEG
49131: PUSH
49132: LD_INT 0
49134: PUSH
49135: EMPTY
49136: LIST
49137: LIST
49138: PUSH
49139: LD_INT 1
49141: NEG
49142: PUSH
49143: LD_INT 1
49145: NEG
49146: PUSH
49147: EMPTY
49148: LIST
49149: LIST
49150: PUSH
49151: LD_INT 1
49153: PUSH
49154: LD_INT 1
49156: NEG
49157: PUSH
49158: EMPTY
49159: LIST
49160: LIST
49161: PUSH
49162: LD_INT 2
49164: PUSH
49165: LD_INT 0
49167: PUSH
49168: EMPTY
49169: LIST
49170: LIST
49171: PUSH
49172: LD_INT 2
49174: PUSH
49175: LD_INT 1
49177: PUSH
49178: EMPTY
49179: LIST
49180: LIST
49181: PUSH
49182: LD_INT 2
49184: PUSH
49185: LD_INT 2
49187: PUSH
49188: EMPTY
49189: LIST
49190: LIST
49191: PUSH
49192: LD_INT 1
49194: PUSH
49195: LD_INT 2
49197: PUSH
49198: EMPTY
49199: LIST
49200: LIST
49201: PUSH
49202: EMPTY
49203: LIST
49204: LIST
49205: LIST
49206: LIST
49207: LIST
49208: LIST
49209: LIST
49210: LIST
49211: LIST
49212: LIST
49213: LIST
49214: LIST
49215: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
49216: LD_ADDR_VAR 0 50
49220: PUSH
49221: LD_INT 0
49223: PUSH
49224: LD_INT 0
49226: PUSH
49227: EMPTY
49228: LIST
49229: LIST
49230: PUSH
49231: LD_INT 0
49233: PUSH
49234: LD_INT 1
49236: NEG
49237: PUSH
49238: EMPTY
49239: LIST
49240: LIST
49241: PUSH
49242: LD_INT 1
49244: PUSH
49245: LD_INT 0
49247: PUSH
49248: EMPTY
49249: LIST
49250: LIST
49251: PUSH
49252: LD_INT 1
49254: PUSH
49255: LD_INT 1
49257: PUSH
49258: EMPTY
49259: LIST
49260: LIST
49261: PUSH
49262: LD_INT 0
49264: PUSH
49265: LD_INT 1
49267: PUSH
49268: EMPTY
49269: LIST
49270: LIST
49271: PUSH
49272: LD_INT 1
49274: NEG
49275: PUSH
49276: LD_INT 0
49278: PUSH
49279: EMPTY
49280: LIST
49281: LIST
49282: PUSH
49283: LD_INT 1
49285: NEG
49286: PUSH
49287: LD_INT 1
49289: NEG
49290: PUSH
49291: EMPTY
49292: LIST
49293: LIST
49294: PUSH
49295: LD_INT 2
49297: PUSH
49298: LD_INT 1
49300: PUSH
49301: EMPTY
49302: LIST
49303: LIST
49304: PUSH
49305: LD_INT 2
49307: PUSH
49308: LD_INT 2
49310: PUSH
49311: EMPTY
49312: LIST
49313: LIST
49314: PUSH
49315: LD_INT 1
49317: PUSH
49318: LD_INT 2
49320: PUSH
49321: EMPTY
49322: LIST
49323: LIST
49324: PUSH
49325: LD_INT 0
49327: PUSH
49328: LD_INT 2
49330: PUSH
49331: EMPTY
49332: LIST
49333: LIST
49334: PUSH
49335: LD_INT 1
49337: NEG
49338: PUSH
49339: LD_INT 1
49341: PUSH
49342: EMPTY
49343: LIST
49344: LIST
49345: PUSH
49346: EMPTY
49347: LIST
49348: LIST
49349: LIST
49350: LIST
49351: LIST
49352: LIST
49353: LIST
49354: LIST
49355: LIST
49356: LIST
49357: LIST
49358: LIST
49359: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
49360: LD_ADDR_VAR 0 51
49364: PUSH
49365: LD_INT 0
49367: PUSH
49368: LD_INT 0
49370: PUSH
49371: EMPTY
49372: LIST
49373: LIST
49374: PUSH
49375: LD_INT 0
49377: PUSH
49378: LD_INT 1
49380: NEG
49381: PUSH
49382: EMPTY
49383: LIST
49384: LIST
49385: PUSH
49386: LD_INT 1
49388: PUSH
49389: LD_INT 0
49391: PUSH
49392: EMPTY
49393: LIST
49394: LIST
49395: PUSH
49396: LD_INT 1
49398: PUSH
49399: LD_INT 1
49401: PUSH
49402: EMPTY
49403: LIST
49404: LIST
49405: PUSH
49406: LD_INT 0
49408: PUSH
49409: LD_INT 1
49411: PUSH
49412: EMPTY
49413: LIST
49414: LIST
49415: PUSH
49416: LD_INT 1
49418: NEG
49419: PUSH
49420: LD_INT 0
49422: PUSH
49423: EMPTY
49424: LIST
49425: LIST
49426: PUSH
49427: LD_INT 1
49429: NEG
49430: PUSH
49431: LD_INT 1
49433: NEG
49434: PUSH
49435: EMPTY
49436: LIST
49437: LIST
49438: PUSH
49439: LD_INT 1
49441: PUSH
49442: LD_INT 2
49444: PUSH
49445: EMPTY
49446: LIST
49447: LIST
49448: PUSH
49449: LD_INT 0
49451: PUSH
49452: LD_INT 2
49454: PUSH
49455: EMPTY
49456: LIST
49457: LIST
49458: PUSH
49459: LD_INT 1
49461: NEG
49462: PUSH
49463: LD_INT 1
49465: PUSH
49466: EMPTY
49467: LIST
49468: LIST
49469: PUSH
49470: LD_INT 2
49472: NEG
49473: PUSH
49474: LD_INT 0
49476: PUSH
49477: EMPTY
49478: LIST
49479: LIST
49480: PUSH
49481: LD_INT 2
49483: NEG
49484: PUSH
49485: LD_INT 1
49487: NEG
49488: PUSH
49489: EMPTY
49490: LIST
49491: LIST
49492: PUSH
49493: EMPTY
49494: LIST
49495: LIST
49496: LIST
49497: LIST
49498: LIST
49499: LIST
49500: LIST
49501: LIST
49502: LIST
49503: LIST
49504: LIST
49505: LIST
49506: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49507: LD_ADDR_VAR 0 52
49511: PUSH
49512: LD_INT 0
49514: PUSH
49515: LD_INT 0
49517: PUSH
49518: EMPTY
49519: LIST
49520: LIST
49521: PUSH
49522: LD_INT 0
49524: PUSH
49525: LD_INT 1
49527: NEG
49528: PUSH
49529: EMPTY
49530: LIST
49531: LIST
49532: PUSH
49533: LD_INT 1
49535: PUSH
49536: LD_INT 0
49538: PUSH
49539: EMPTY
49540: LIST
49541: LIST
49542: PUSH
49543: LD_INT 1
49545: PUSH
49546: LD_INT 1
49548: PUSH
49549: EMPTY
49550: LIST
49551: LIST
49552: PUSH
49553: LD_INT 0
49555: PUSH
49556: LD_INT 1
49558: PUSH
49559: EMPTY
49560: LIST
49561: LIST
49562: PUSH
49563: LD_INT 1
49565: NEG
49566: PUSH
49567: LD_INT 0
49569: PUSH
49570: EMPTY
49571: LIST
49572: LIST
49573: PUSH
49574: LD_INT 1
49576: NEG
49577: PUSH
49578: LD_INT 1
49580: NEG
49581: PUSH
49582: EMPTY
49583: LIST
49584: LIST
49585: PUSH
49586: LD_INT 1
49588: NEG
49589: PUSH
49590: LD_INT 2
49592: NEG
49593: PUSH
49594: EMPTY
49595: LIST
49596: LIST
49597: PUSH
49598: LD_INT 1
49600: NEG
49601: PUSH
49602: LD_INT 1
49604: PUSH
49605: EMPTY
49606: LIST
49607: LIST
49608: PUSH
49609: LD_INT 2
49611: NEG
49612: PUSH
49613: LD_INT 0
49615: PUSH
49616: EMPTY
49617: LIST
49618: LIST
49619: PUSH
49620: LD_INT 2
49622: NEG
49623: PUSH
49624: LD_INT 1
49626: NEG
49627: PUSH
49628: EMPTY
49629: LIST
49630: LIST
49631: PUSH
49632: LD_INT 2
49634: NEG
49635: PUSH
49636: LD_INT 2
49638: NEG
49639: PUSH
49640: EMPTY
49641: LIST
49642: LIST
49643: PUSH
49644: EMPTY
49645: LIST
49646: LIST
49647: LIST
49648: LIST
49649: LIST
49650: LIST
49651: LIST
49652: LIST
49653: LIST
49654: LIST
49655: LIST
49656: LIST
49657: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49658: LD_ADDR_VAR 0 53
49662: PUSH
49663: LD_INT 0
49665: PUSH
49666: LD_INT 0
49668: PUSH
49669: EMPTY
49670: LIST
49671: LIST
49672: PUSH
49673: LD_INT 0
49675: PUSH
49676: LD_INT 1
49678: NEG
49679: PUSH
49680: EMPTY
49681: LIST
49682: LIST
49683: PUSH
49684: LD_INT 1
49686: PUSH
49687: LD_INT 0
49689: PUSH
49690: EMPTY
49691: LIST
49692: LIST
49693: PUSH
49694: LD_INT 1
49696: PUSH
49697: LD_INT 1
49699: PUSH
49700: EMPTY
49701: LIST
49702: LIST
49703: PUSH
49704: LD_INT 0
49706: PUSH
49707: LD_INT 1
49709: PUSH
49710: EMPTY
49711: LIST
49712: LIST
49713: PUSH
49714: LD_INT 1
49716: NEG
49717: PUSH
49718: LD_INT 0
49720: PUSH
49721: EMPTY
49722: LIST
49723: LIST
49724: PUSH
49725: LD_INT 1
49727: NEG
49728: PUSH
49729: LD_INT 1
49731: NEG
49732: PUSH
49733: EMPTY
49734: LIST
49735: LIST
49736: PUSH
49737: LD_INT 1
49739: NEG
49740: PUSH
49741: LD_INT 2
49743: NEG
49744: PUSH
49745: EMPTY
49746: LIST
49747: LIST
49748: PUSH
49749: LD_INT 0
49751: PUSH
49752: LD_INT 2
49754: NEG
49755: PUSH
49756: EMPTY
49757: LIST
49758: LIST
49759: PUSH
49760: LD_INT 1
49762: PUSH
49763: LD_INT 1
49765: NEG
49766: PUSH
49767: EMPTY
49768: LIST
49769: LIST
49770: PUSH
49771: LD_INT 2
49773: PUSH
49774: LD_INT 0
49776: PUSH
49777: EMPTY
49778: LIST
49779: LIST
49780: PUSH
49781: LD_INT 2
49783: PUSH
49784: LD_INT 1
49786: PUSH
49787: EMPTY
49788: LIST
49789: LIST
49790: PUSH
49791: LD_INT 2
49793: PUSH
49794: LD_INT 2
49796: PUSH
49797: EMPTY
49798: LIST
49799: LIST
49800: PUSH
49801: LD_INT 1
49803: PUSH
49804: LD_INT 2
49806: PUSH
49807: EMPTY
49808: LIST
49809: LIST
49810: PUSH
49811: LD_INT 0
49813: PUSH
49814: LD_INT 2
49816: PUSH
49817: EMPTY
49818: LIST
49819: LIST
49820: PUSH
49821: LD_INT 1
49823: NEG
49824: PUSH
49825: LD_INT 1
49827: PUSH
49828: EMPTY
49829: LIST
49830: LIST
49831: PUSH
49832: LD_INT 2
49834: NEG
49835: PUSH
49836: LD_INT 0
49838: PUSH
49839: EMPTY
49840: LIST
49841: LIST
49842: PUSH
49843: LD_INT 2
49845: NEG
49846: PUSH
49847: LD_INT 1
49849: NEG
49850: PUSH
49851: EMPTY
49852: LIST
49853: LIST
49854: PUSH
49855: LD_INT 2
49857: NEG
49858: PUSH
49859: LD_INT 2
49861: NEG
49862: PUSH
49863: EMPTY
49864: LIST
49865: LIST
49866: PUSH
49867: EMPTY
49868: LIST
49869: LIST
49870: LIST
49871: LIST
49872: LIST
49873: LIST
49874: LIST
49875: LIST
49876: LIST
49877: LIST
49878: LIST
49879: LIST
49880: LIST
49881: LIST
49882: LIST
49883: LIST
49884: LIST
49885: LIST
49886: LIST
49887: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49888: LD_ADDR_VAR 0 54
49892: PUSH
49893: LD_INT 0
49895: PUSH
49896: LD_INT 0
49898: PUSH
49899: EMPTY
49900: LIST
49901: LIST
49902: PUSH
49903: LD_INT 0
49905: PUSH
49906: LD_INT 1
49908: NEG
49909: PUSH
49910: EMPTY
49911: LIST
49912: LIST
49913: PUSH
49914: LD_INT 1
49916: PUSH
49917: LD_INT 0
49919: PUSH
49920: EMPTY
49921: LIST
49922: LIST
49923: PUSH
49924: LD_INT 1
49926: PUSH
49927: LD_INT 1
49929: PUSH
49930: EMPTY
49931: LIST
49932: LIST
49933: PUSH
49934: LD_INT 0
49936: PUSH
49937: LD_INT 1
49939: PUSH
49940: EMPTY
49941: LIST
49942: LIST
49943: PUSH
49944: LD_INT 1
49946: NEG
49947: PUSH
49948: LD_INT 0
49950: PUSH
49951: EMPTY
49952: LIST
49953: LIST
49954: PUSH
49955: LD_INT 1
49957: NEG
49958: PUSH
49959: LD_INT 1
49961: NEG
49962: PUSH
49963: EMPTY
49964: LIST
49965: LIST
49966: PUSH
49967: LD_INT 1
49969: NEG
49970: PUSH
49971: LD_INT 2
49973: NEG
49974: PUSH
49975: EMPTY
49976: LIST
49977: LIST
49978: PUSH
49979: LD_INT 0
49981: PUSH
49982: LD_INT 2
49984: NEG
49985: PUSH
49986: EMPTY
49987: LIST
49988: LIST
49989: PUSH
49990: LD_INT 1
49992: PUSH
49993: LD_INT 1
49995: NEG
49996: PUSH
49997: EMPTY
49998: LIST
49999: LIST
50000: PUSH
50001: LD_INT 2
50003: PUSH
50004: LD_INT 0
50006: PUSH
50007: EMPTY
50008: LIST
50009: LIST
50010: PUSH
50011: LD_INT 2
50013: PUSH
50014: LD_INT 1
50016: PUSH
50017: EMPTY
50018: LIST
50019: LIST
50020: PUSH
50021: LD_INT 2
50023: PUSH
50024: LD_INT 2
50026: PUSH
50027: EMPTY
50028: LIST
50029: LIST
50030: PUSH
50031: LD_INT 1
50033: PUSH
50034: LD_INT 2
50036: PUSH
50037: EMPTY
50038: LIST
50039: LIST
50040: PUSH
50041: LD_INT 0
50043: PUSH
50044: LD_INT 2
50046: PUSH
50047: EMPTY
50048: LIST
50049: LIST
50050: PUSH
50051: LD_INT 1
50053: NEG
50054: PUSH
50055: LD_INT 1
50057: PUSH
50058: EMPTY
50059: LIST
50060: LIST
50061: PUSH
50062: LD_INT 2
50064: NEG
50065: PUSH
50066: LD_INT 0
50068: PUSH
50069: EMPTY
50070: LIST
50071: LIST
50072: PUSH
50073: LD_INT 2
50075: NEG
50076: PUSH
50077: LD_INT 1
50079: NEG
50080: PUSH
50081: EMPTY
50082: LIST
50083: LIST
50084: PUSH
50085: LD_INT 2
50087: NEG
50088: PUSH
50089: LD_INT 2
50091: NEG
50092: PUSH
50093: EMPTY
50094: LIST
50095: LIST
50096: PUSH
50097: EMPTY
50098: LIST
50099: LIST
50100: LIST
50101: LIST
50102: LIST
50103: LIST
50104: LIST
50105: LIST
50106: LIST
50107: LIST
50108: LIST
50109: LIST
50110: LIST
50111: LIST
50112: LIST
50113: LIST
50114: LIST
50115: LIST
50116: LIST
50117: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50118: LD_ADDR_VAR 0 55
50122: PUSH
50123: LD_INT 0
50125: PUSH
50126: LD_INT 0
50128: PUSH
50129: EMPTY
50130: LIST
50131: LIST
50132: PUSH
50133: LD_INT 0
50135: PUSH
50136: LD_INT 1
50138: NEG
50139: PUSH
50140: EMPTY
50141: LIST
50142: LIST
50143: PUSH
50144: LD_INT 1
50146: PUSH
50147: LD_INT 0
50149: PUSH
50150: EMPTY
50151: LIST
50152: LIST
50153: PUSH
50154: LD_INT 1
50156: PUSH
50157: LD_INT 1
50159: PUSH
50160: EMPTY
50161: LIST
50162: LIST
50163: PUSH
50164: LD_INT 0
50166: PUSH
50167: LD_INT 1
50169: PUSH
50170: EMPTY
50171: LIST
50172: LIST
50173: PUSH
50174: LD_INT 1
50176: NEG
50177: PUSH
50178: LD_INT 0
50180: PUSH
50181: EMPTY
50182: LIST
50183: LIST
50184: PUSH
50185: LD_INT 1
50187: NEG
50188: PUSH
50189: LD_INT 1
50191: NEG
50192: PUSH
50193: EMPTY
50194: LIST
50195: LIST
50196: PUSH
50197: LD_INT 1
50199: NEG
50200: PUSH
50201: LD_INT 2
50203: NEG
50204: PUSH
50205: EMPTY
50206: LIST
50207: LIST
50208: PUSH
50209: LD_INT 0
50211: PUSH
50212: LD_INT 2
50214: NEG
50215: PUSH
50216: EMPTY
50217: LIST
50218: LIST
50219: PUSH
50220: LD_INT 1
50222: PUSH
50223: LD_INT 1
50225: NEG
50226: PUSH
50227: EMPTY
50228: LIST
50229: LIST
50230: PUSH
50231: LD_INT 2
50233: PUSH
50234: LD_INT 0
50236: PUSH
50237: EMPTY
50238: LIST
50239: LIST
50240: PUSH
50241: LD_INT 2
50243: PUSH
50244: LD_INT 1
50246: PUSH
50247: EMPTY
50248: LIST
50249: LIST
50250: PUSH
50251: LD_INT 2
50253: PUSH
50254: LD_INT 2
50256: PUSH
50257: EMPTY
50258: LIST
50259: LIST
50260: PUSH
50261: LD_INT 1
50263: PUSH
50264: LD_INT 2
50266: PUSH
50267: EMPTY
50268: LIST
50269: LIST
50270: PUSH
50271: LD_INT 0
50273: PUSH
50274: LD_INT 2
50276: PUSH
50277: EMPTY
50278: LIST
50279: LIST
50280: PUSH
50281: LD_INT 1
50283: NEG
50284: PUSH
50285: LD_INT 1
50287: PUSH
50288: EMPTY
50289: LIST
50290: LIST
50291: PUSH
50292: LD_INT 2
50294: NEG
50295: PUSH
50296: LD_INT 0
50298: PUSH
50299: EMPTY
50300: LIST
50301: LIST
50302: PUSH
50303: LD_INT 2
50305: NEG
50306: PUSH
50307: LD_INT 1
50309: NEG
50310: PUSH
50311: EMPTY
50312: LIST
50313: LIST
50314: PUSH
50315: LD_INT 2
50317: NEG
50318: PUSH
50319: LD_INT 2
50321: NEG
50322: PUSH
50323: EMPTY
50324: LIST
50325: LIST
50326: PUSH
50327: EMPTY
50328: LIST
50329: LIST
50330: LIST
50331: LIST
50332: LIST
50333: LIST
50334: LIST
50335: LIST
50336: LIST
50337: LIST
50338: LIST
50339: LIST
50340: LIST
50341: LIST
50342: LIST
50343: LIST
50344: LIST
50345: LIST
50346: LIST
50347: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50348: LD_ADDR_VAR 0 56
50352: PUSH
50353: LD_INT 0
50355: PUSH
50356: LD_INT 0
50358: PUSH
50359: EMPTY
50360: LIST
50361: LIST
50362: PUSH
50363: LD_INT 0
50365: PUSH
50366: LD_INT 1
50368: NEG
50369: PUSH
50370: EMPTY
50371: LIST
50372: LIST
50373: PUSH
50374: LD_INT 1
50376: PUSH
50377: LD_INT 0
50379: PUSH
50380: EMPTY
50381: LIST
50382: LIST
50383: PUSH
50384: LD_INT 1
50386: PUSH
50387: LD_INT 1
50389: PUSH
50390: EMPTY
50391: LIST
50392: LIST
50393: PUSH
50394: LD_INT 0
50396: PUSH
50397: LD_INT 1
50399: PUSH
50400: EMPTY
50401: LIST
50402: LIST
50403: PUSH
50404: LD_INT 1
50406: NEG
50407: PUSH
50408: LD_INT 0
50410: PUSH
50411: EMPTY
50412: LIST
50413: LIST
50414: PUSH
50415: LD_INT 1
50417: NEG
50418: PUSH
50419: LD_INT 1
50421: NEG
50422: PUSH
50423: EMPTY
50424: LIST
50425: LIST
50426: PUSH
50427: LD_INT 1
50429: NEG
50430: PUSH
50431: LD_INT 2
50433: NEG
50434: PUSH
50435: EMPTY
50436: LIST
50437: LIST
50438: PUSH
50439: LD_INT 0
50441: PUSH
50442: LD_INT 2
50444: NEG
50445: PUSH
50446: EMPTY
50447: LIST
50448: LIST
50449: PUSH
50450: LD_INT 1
50452: PUSH
50453: LD_INT 1
50455: NEG
50456: PUSH
50457: EMPTY
50458: LIST
50459: LIST
50460: PUSH
50461: LD_INT 2
50463: PUSH
50464: LD_INT 0
50466: PUSH
50467: EMPTY
50468: LIST
50469: LIST
50470: PUSH
50471: LD_INT 2
50473: PUSH
50474: LD_INT 1
50476: PUSH
50477: EMPTY
50478: LIST
50479: LIST
50480: PUSH
50481: LD_INT 2
50483: PUSH
50484: LD_INT 2
50486: PUSH
50487: EMPTY
50488: LIST
50489: LIST
50490: PUSH
50491: LD_INT 1
50493: PUSH
50494: LD_INT 2
50496: PUSH
50497: EMPTY
50498: LIST
50499: LIST
50500: PUSH
50501: LD_INT 0
50503: PUSH
50504: LD_INT 2
50506: PUSH
50507: EMPTY
50508: LIST
50509: LIST
50510: PUSH
50511: LD_INT 1
50513: NEG
50514: PUSH
50515: LD_INT 1
50517: PUSH
50518: EMPTY
50519: LIST
50520: LIST
50521: PUSH
50522: LD_INT 2
50524: NEG
50525: PUSH
50526: LD_INT 0
50528: PUSH
50529: EMPTY
50530: LIST
50531: LIST
50532: PUSH
50533: LD_INT 2
50535: NEG
50536: PUSH
50537: LD_INT 1
50539: NEG
50540: PUSH
50541: EMPTY
50542: LIST
50543: LIST
50544: PUSH
50545: LD_INT 2
50547: NEG
50548: PUSH
50549: LD_INT 2
50551: NEG
50552: PUSH
50553: EMPTY
50554: LIST
50555: LIST
50556: PUSH
50557: EMPTY
50558: LIST
50559: LIST
50560: LIST
50561: LIST
50562: LIST
50563: LIST
50564: LIST
50565: LIST
50566: LIST
50567: LIST
50568: LIST
50569: LIST
50570: LIST
50571: LIST
50572: LIST
50573: LIST
50574: LIST
50575: LIST
50576: LIST
50577: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50578: LD_ADDR_VAR 0 57
50582: PUSH
50583: LD_INT 0
50585: PUSH
50586: LD_INT 0
50588: PUSH
50589: EMPTY
50590: LIST
50591: LIST
50592: PUSH
50593: LD_INT 0
50595: PUSH
50596: LD_INT 1
50598: NEG
50599: PUSH
50600: EMPTY
50601: LIST
50602: LIST
50603: PUSH
50604: LD_INT 1
50606: PUSH
50607: LD_INT 0
50609: PUSH
50610: EMPTY
50611: LIST
50612: LIST
50613: PUSH
50614: LD_INT 1
50616: PUSH
50617: LD_INT 1
50619: PUSH
50620: EMPTY
50621: LIST
50622: LIST
50623: PUSH
50624: LD_INT 0
50626: PUSH
50627: LD_INT 1
50629: PUSH
50630: EMPTY
50631: LIST
50632: LIST
50633: PUSH
50634: LD_INT 1
50636: NEG
50637: PUSH
50638: LD_INT 0
50640: PUSH
50641: EMPTY
50642: LIST
50643: LIST
50644: PUSH
50645: LD_INT 1
50647: NEG
50648: PUSH
50649: LD_INT 1
50651: NEG
50652: PUSH
50653: EMPTY
50654: LIST
50655: LIST
50656: PUSH
50657: LD_INT 1
50659: NEG
50660: PUSH
50661: LD_INT 2
50663: NEG
50664: PUSH
50665: EMPTY
50666: LIST
50667: LIST
50668: PUSH
50669: LD_INT 0
50671: PUSH
50672: LD_INT 2
50674: NEG
50675: PUSH
50676: EMPTY
50677: LIST
50678: LIST
50679: PUSH
50680: LD_INT 1
50682: PUSH
50683: LD_INT 1
50685: NEG
50686: PUSH
50687: EMPTY
50688: LIST
50689: LIST
50690: PUSH
50691: LD_INT 2
50693: PUSH
50694: LD_INT 0
50696: PUSH
50697: EMPTY
50698: LIST
50699: LIST
50700: PUSH
50701: LD_INT 2
50703: PUSH
50704: LD_INT 1
50706: PUSH
50707: EMPTY
50708: LIST
50709: LIST
50710: PUSH
50711: LD_INT 2
50713: PUSH
50714: LD_INT 2
50716: PUSH
50717: EMPTY
50718: LIST
50719: LIST
50720: PUSH
50721: LD_INT 1
50723: PUSH
50724: LD_INT 2
50726: PUSH
50727: EMPTY
50728: LIST
50729: LIST
50730: PUSH
50731: LD_INT 0
50733: PUSH
50734: LD_INT 2
50736: PUSH
50737: EMPTY
50738: LIST
50739: LIST
50740: PUSH
50741: LD_INT 1
50743: NEG
50744: PUSH
50745: LD_INT 1
50747: PUSH
50748: EMPTY
50749: LIST
50750: LIST
50751: PUSH
50752: LD_INT 2
50754: NEG
50755: PUSH
50756: LD_INT 0
50758: PUSH
50759: EMPTY
50760: LIST
50761: LIST
50762: PUSH
50763: LD_INT 2
50765: NEG
50766: PUSH
50767: LD_INT 1
50769: NEG
50770: PUSH
50771: EMPTY
50772: LIST
50773: LIST
50774: PUSH
50775: LD_INT 2
50777: NEG
50778: PUSH
50779: LD_INT 2
50781: NEG
50782: PUSH
50783: EMPTY
50784: LIST
50785: LIST
50786: PUSH
50787: EMPTY
50788: LIST
50789: LIST
50790: LIST
50791: LIST
50792: LIST
50793: LIST
50794: LIST
50795: LIST
50796: LIST
50797: LIST
50798: LIST
50799: LIST
50800: LIST
50801: LIST
50802: LIST
50803: LIST
50804: LIST
50805: LIST
50806: LIST
50807: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50808: LD_ADDR_VAR 0 58
50812: PUSH
50813: LD_INT 0
50815: PUSH
50816: LD_INT 0
50818: PUSH
50819: EMPTY
50820: LIST
50821: LIST
50822: PUSH
50823: LD_INT 0
50825: PUSH
50826: LD_INT 1
50828: NEG
50829: PUSH
50830: EMPTY
50831: LIST
50832: LIST
50833: PUSH
50834: LD_INT 1
50836: PUSH
50837: LD_INT 0
50839: PUSH
50840: EMPTY
50841: LIST
50842: LIST
50843: PUSH
50844: LD_INT 1
50846: PUSH
50847: LD_INT 1
50849: PUSH
50850: EMPTY
50851: LIST
50852: LIST
50853: PUSH
50854: LD_INT 0
50856: PUSH
50857: LD_INT 1
50859: PUSH
50860: EMPTY
50861: LIST
50862: LIST
50863: PUSH
50864: LD_INT 1
50866: NEG
50867: PUSH
50868: LD_INT 0
50870: PUSH
50871: EMPTY
50872: LIST
50873: LIST
50874: PUSH
50875: LD_INT 1
50877: NEG
50878: PUSH
50879: LD_INT 1
50881: NEG
50882: PUSH
50883: EMPTY
50884: LIST
50885: LIST
50886: PUSH
50887: LD_INT 1
50889: NEG
50890: PUSH
50891: LD_INT 2
50893: NEG
50894: PUSH
50895: EMPTY
50896: LIST
50897: LIST
50898: PUSH
50899: LD_INT 0
50901: PUSH
50902: LD_INT 2
50904: NEG
50905: PUSH
50906: EMPTY
50907: LIST
50908: LIST
50909: PUSH
50910: LD_INT 1
50912: PUSH
50913: LD_INT 1
50915: NEG
50916: PUSH
50917: EMPTY
50918: LIST
50919: LIST
50920: PUSH
50921: LD_INT 2
50923: PUSH
50924: LD_INT 0
50926: PUSH
50927: EMPTY
50928: LIST
50929: LIST
50930: PUSH
50931: LD_INT 2
50933: PUSH
50934: LD_INT 1
50936: PUSH
50937: EMPTY
50938: LIST
50939: LIST
50940: PUSH
50941: LD_INT 2
50943: PUSH
50944: LD_INT 2
50946: PUSH
50947: EMPTY
50948: LIST
50949: LIST
50950: PUSH
50951: LD_INT 1
50953: PUSH
50954: LD_INT 2
50956: PUSH
50957: EMPTY
50958: LIST
50959: LIST
50960: PUSH
50961: LD_INT 0
50963: PUSH
50964: LD_INT 2
50966: PUSH
50967: EMPTY
50968: LIST
50969: LIST
50970: PUSH
50971: LD_INT 1
50973: NEG
50974: PUSH
50975: LD_INT 1
50977: PUSH
50978: EMPTY
50979: LIST
50980: LIST
50981: PUSH
50982: LD_INT 2
50984: NEG
50985: PUSH
50986: LD_INT 0
50988: PUSH
50989: EMPTY
50990: LIST
50991: LIST
50992: PUSH
50993: LD_INT 2
50995: NEG
50996: PUSH
50997: LD_INT 1
50999: NEG
51000: PUSH
51001: EMPTY
51002: LIST
51003: LIST
51004: PUSH
51005: LD_INT 2
51007: NEG
51008: PUSH
51009: LD_INT 2
51011: NEG
51012: PUSH
51013: EMPTY
51014: LIST
51015: LIST
51016: PUSH
51017: EMPTY
51018: LIST
51019: LIST
51020: LIST
51021: LIST
51022: LIST
51023: LIST
51024: LIST
51025: LIST
51026: LIST
51027: LIST
51028: LIST
51029: LIST
51030: LIST
51031: LIST
51032: LIST
51033: LIST
51034: LIST
51035: LIST
51036: LIST
51037: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51038: LD_ADDR_VAR 0 59
51042: PUSH
51043: LD_INT 0
51045: PUSH
51046: LD_INT 0
51048: PUSH
51049: EMPTY
51050: LIST
51051: LIST
51052: PUSH
51053: LD_INT 0
51055: PUSH
51056: LD_INT 1
51058: NEG
51059: PUSH
51060: EMPTY
51061: LIST
51062: LIST
51063: PUSH
51064: LD_INT 1
51066: PUSH
51067: LD_INT 0
51069: PUSH
51070: EMPTY
51071: LIST
51072: LIST
51073: PUSH
51074: LD_INT 1
51076: PUSH
51077: LD_INT 1
51079: PUSH
51080: EMPTY
51081: LIST
51082: LIST
51083: PUSH
51084: LD_INT 0
51086: PUSH
51087: LD_INT 1
51089: PUSH
51090: EMPTY
51091: LIST
51092: LIST
51093: PUSH
51094: LD_INT 1
51096: NEG
51097: PUSH
51098: LD_INT 0
51100: PUSH
51101: EMPTY
51102: LIST
51103: LIST
51104: PUSH
51105: LD_INT 1
51107: NEG
51108: PUSH
51109: LD_INT 1
51111: NEG
51112: PUSH
51113: EMPTY
51114: LIST
51115: LIST
51116: PUSH
51117: EMPTY
51118: LIST
51119: LIST
51120: LIST
51121: LIST
51122: LIST
51123: LIST
51124: LIST
51125: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51126: LD_ADDR_VAR 0 60
51130: PUSH
51131: LD_INT 0
51133: PUSH
51134: LD_INT 0
51136: PUSH
51137: EMPTY
51138: LIST
51139: LIST
51140: PUSH
51141: LD_INT 0
51143: PUSH
51144: LD_INT 1
51146: NEG
51147: PUSH
51148: EMPTY
51149: LIST
51150: LIST
51151: PUSH
51152: LD_INT 1
51154: PUSH
51155: LD_INT 0
51157: PUSH
51158: EMPTY
51159: LIST
51160: LIST
51161: PUSH
51162: LD_INT 1
51164: PUSH
51165: LD_INT 1
51167: PUSH
51168: EMPTY
51169: LIST
51170: LIST
51171: PUSH
51172: LD_INT 0
51174: PUSH
51175: LD_INT 1
51177: PUSH
51178: EMPTY
51179: LIST
51180: LIST
51181: PUSH
51182: LD_INT 1
51184: NEG
51185: PUSH
51186: LD_INT 0
51188: PUSH
51189: EMPTY
51190: LIST
51191: LIST
51192: PUSH
51193: LD_INT 1
51195: NEG
51196: PUSH
51197: LD_INT 1
51199: NEG
51200: PUSH
51201: EMPTY
51202: LIST
51203: LIST
51204: PUSH
51205: EMPTY
51206: LIST
51207: LIST
51208: LIST
51209: LIST
51210: LIST
51211: LIST
51212: LIST
51213: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51214: LD_ADDR_VAR 0 61
51218: PUSH
51219: LD_INT 0
51221: PUSH
51222: LD_INT 0
51224: PUSH
51225: EMPTY
51226: LIST
51227: LIST
51228: PUSH
51229: LD_INT 0
51231: PUSH
51232: LD_INT 1
51234: NEG
51235: PUSH
51236: EMPTY
51237: LIST
51238: LIST
51239: PUSH
51240: LD_INT 1
51242: PUSH
51243: LD_INT 0
51245: PUSH
51246: EMPTY
51247: LIST
51248: LIST
51249: PUSH
51250: LD_INT 1
51252: PUSH
51253: LD_INT 1
51255: PUSH
51256: EMPTY
51257: LIST
51258: LIST
51259: PUSH
51260: LD_INT 0
51262: PUSH
51263: LD_INT 1
51265: PUSH
51266: EMPTY
51267: LIST
51268: LIST
51269: PUSH
51270: LD_INT 1
51272: NEG
51273: PUSH
51274: LD_INT 0
51276: PUSH
51277: EMPTY
51278: LIST
51279: LIST
51280: PUSH
51281: LD_INT 1
51283: NEG
51284: PUSH
51285: LD_INT 1
51287: NEG
51288: PUSH
51289: EMPTY
51290: LIST
51291: LIST
51292: PUSH
51293: EMPTY
51294: LIST
51295: LIST
51296: LIST
51297: LIST
51298: LIST
51299: LIST
51300: LIST
51301: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51302: LD_ADDR_VAR 0 62
51306: PUSH
51307: LD_INT 0
51309: PUSH
51310: LD_INT 0
51312: PUSH
51313: EMPTY
51314: LIST
51315: LIST
51316: PUSH
51317: LD_INT 0
51319: PUSH
51320: LD_INT 1
51322: NEG
51323: PUSH
51324: EMPTY
51325: LIST
51326: LIST
51327: PUSH
51328: LD_INT 1
51330: PUSH
51331: LD_INT 0
51333: PUSH
51334: EMPTY
51335: LIST
51336: LIST
51337: PUSH
51338: LD_INT 1
51340: PUSH
51341: LD_INT 1
51343: PUSH
51344: EMPTY
51345: LIST
51346: LIST
51347: PUSH
51348: LD_INT 0
51350: PUSH
51351: LD_INT 1
51353: PUSH
51354: EMPTY
51355: LIST
51356: LIST
51357: PUSH
51358: LD_INT 1
51360: NEG
51361: PUSH
51362: LD_INT 0
51364: PUSH
51365: EMPTY
51366: LIST
51367: LIST
51368: PUSH
51369: LD_INT 1
51371: NEG
51372: PUSH
51373: LD_INT 1
51375: NEG
51376: PUSH
51377: EMPTY
51378: LIST
51379: LIST
51380: PUSH
51381: EMPTY
51382: LIST
51383: LIST
51384: LIST
51385: LIST
51386: LIST
51387: LIST
51388: LIST
51389: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51390: LD_ADDR_VAR 0 63
51394: PUSH
51395: LD_INT 0
51397: PUSH
51398: LD_INT 0
51400: PUSH
51401: EMPTY
51402: LIST
51403: LIST
51404: PUSH
51405: LD_INT 0
51407: PUSH
51408: LD_INT 1
51410: NEG
51411: PUSH
51412: EMPTY
51413: LIST
51414: LIST
51415: PUSH
51416: LD_INT 1
51418: PUSH
51419: LD_INT 0
51421: PUSH
51422: EMPTY
51423: LIST
51424: LIST
51425: PUSH
51426: LD_INT 1
51428: PUSH
51429: LD_INT 1
51431: PUSH
51432: EMPTY
51433: LIST
51434: LIST
51435: PUSH
51436: LD_INT 0
51438: PUSH
51439: LD_INT 1
51441: PUSH
51442: EMPTY
51443: LIST
51444: LIST
51445: PUSH
51446: LD_INT 1
51448: NEG
51449: PUSH
51450: LD_INT 0
51452: PUSH
51453: EMPTY
51454: LIST
51455: LIST
51456: PUSH
51457: LD_INT 1
51459: NEG
51460: PUSH
51461: LD_INT 1
51463: NEG
51464: PUSH
51465: EMPTY
51466: LIST
51467: LIST
51468: PUSH
51469: EMPTY
51470: LIST
51471: LIST
51472: LIST
51473: LIST
51474: LIST
51475: LIST
51476: LIST
51477: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51478: LD_ADDR_VAR 0 64
51482: PUSH
51483: LD_INT 0
51485: PUSH
51486: LD_INT 0
51488: PUSH
51489: EMPTY
51490: LIST
51491: LIST
51492: PUSH
51493: LD_INT 0
51495: PUSH
51496: LD_INT 1
51498: NEG
51499: PUSH
51500: EMPTY
51501: LIST
51502: LIST
51503: PUSH
51504: LD_INT 1
51506: PUSH
51507: LD_INT 0
51509: PUSH
51510: EMPTY
51511: LIST
51512: LIST
51513: PUSH
51514: LD_INT 1
51516: PUSH
51517: LD_INT 1
51519: PUSH
51520: EMPTY
51521: LIST
51522: LIST
51523: PUSH
51524: LD_INT 0
51526: PUSH
51527: LD_INT 1
51529: PUSH
51530: EMPTY
51531: LIST
51532: LIST
51533: PUSH
51534: LD_INT 1
51536: NEG
51537: PUSH
51538: LD_INT 0
51540: PUSH
51541: EMPTY
51542: LIST
51543: LIST
51544: PUSH
51545: LD_INT 1
51547: NEG
51548: PUSH
51549: LD_INT 1
51551: NEG
51552: PUSH
51553: EMPTY
51554: LIST
51555: LIST
51556: PUSH
51557: EMPTY
51558: LIST
51559: LIST
51560: LIST
51561: LIST
51562: LIST
51563: LIST
51564: LIST
51565: ST_TO_ADDR
// end ; 1 :
51566: GO 57463
51568: LD_INT 1
51570: DOUBLE
51571: EQUAL
51572: IFTRUE 51576
51574: GO 54199
51576: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
51577: LD_ADDR_VAR 0 11
51581: PUSH
51582: LD_INT 1
51584: NEG
51585: PUSH
51586: LD_INT 3
51588: NEG
51589: PUSH
51590: EMPTY
51591: LIST
51592: LIST
51593: PUSH
51594: LD_INT 0
51596: PUSH
51597: LD_INT 3
51599: NEG
51600: PUSH
51601: EMPTY
51602: LIST
51603: LIST
51604: PUSH
51605: LD_INT 1
51607: PUSH
51608: LD_INT 2
51610: NEG
51611: PUSH
51612: EMPTY
51613: LIST
51614: LIST
51615: PUSH
51616: EMPTY
51617: LIST
51618: LIST
51619: LIST
51620: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
51621: LD_ADDR_VAR 0 12
51625: PUSH
51626: LD_INT 2
51628: PUSH
51629: LD_INT 1
51631: NEG
51632: PUSH
51633: EMPTY
51634: LIST
51635: LIST
51636: PUSH
51637: LD_INT 3
51639: PUSH
51640: LD_INT 0
51642: PUSH
51643: EMPTY
51644: LIST
51645: LIST
51646: PUSH
51647: LD_INT 3
51649: PUSH
51650: LD_INT 1
51652: PUSH
51653: EMPTY
51654: LIST
51655: LIST
51656: PUSH
51657: EMPTY
51658: LIST
51659: LIST
51660: LIST
51661: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
51662: LD_ADDR_VAR 0 13
51666: PUSH
51667: LD_INT 3
51669: PUSH
51670: LD_INT 2
51672: PUSH
51673: EMPTY
51674: LIST
51675: LIST
51676: PUSH
51677: LD_INT 3
51679: PUSH
51680: LD_INT 3
51682: PUSH
51683: EMPTY
51684: LIST
51685: LIST
51686: PUSH
51687: LD_INT 2
51689: PUSH
51690: LD_INT 3
51692: PUSH
51693: EMPTY
51694: LIST
51695: LIST
51696: PUSH
51697: EMPTY
51698: LIST
51699: LIST
51700: LIST
51701: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
51702: LD_ADDR_VAR 0 14
51706: PUSH
51707: LD_INT 1
51709: PUSH
51710: LD_INT 3
51712: PUSH
51713: EMPTY
51714: LIST
51715: LIST
51716: PUSH
51717: LD_INT 0
51719: PUSH
51720: LD_INT 3
51722: PUSH
51723: EMPTY
51724: LIST
51725: LIST
51726: PUSH
51727: LD_INT 1
51729: NEG
51730: PUSH
51731: LD_INT 2
51733: PUSH
51734: EMPTY
51735: LIST
51736: LIST
51737: PUSH
51738: EMPTY
51739: LIST
51740: LIST
51741: LIST
51742: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51743: LD_ADDR_VAR 0 15
51747: PUSH
51748: LD_INT 2
51750: NEG
51751: PUSH
51752: LD_INT 1
51754: PUSH
51755: EMPTY
51756: LIST
51757: LIST
51758: PUSH
51759: LD_INT 3
51761: NEG
51762: PUSH
51763: LD_INT 0
51765: PUSH
51766: EMPTY
51767: LIST
51768: LIST
51769: PUSH
51770: LD_INT 3
51772: NEG
51773: PUSH
51774: LD_INT 1
51776: NEG
51777: PUSH
51778: EMPTY
51779: LIST
51780: LIST
51781: PUSH
51782: EMPTY
51783: LIST
51784: LIST
51785: LIST
51786: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51787: LD_ADDR_VAR 0 16
51791: PUSH
51792: LD_INT 2
51794: NEG
51795: PUSH
51796: LD_INT 3
51798: NEG
51799: PUSH
51800: EMPTY
51801: LIST
51802: LIST
51803: PUSH
51804: LD_INT 3
51806: NEG
51807: PUSH
51808: LD_INT 2
51810: NEG
51811: PUSH
51812: EMPTY
51813: LIST
51814: LIST
51815: PUSH
51816: LD_INT 3
51818: NEG
51819: PUSH
51820: LD_INT 3
51822: NEG
51823: PUSH
51824: EMPTY
51825: LIST
51826: LIST
51827: PUSH
51828: EMPTY
51829: LIST
51830: LIST
51831: LIST
51832: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
51833: LD_ADDR_VAR 0 17
51837: PUSH
51838: LD_INT 1
51840: NEG
51841: PUSH
51842: LD_INT 3
51844: NEG
51845: PUSH
51846: EMPTY
51847: LIST
51848: LIST
51849: PUSH
51850: LD_INT 0
51852: PUSH
51853: LD_INT 3
51855: NEG
51856: PUSH
51857: EMPTY
51858: LIST
51859: LIST
51860: PUSH
51861: LD_INT 1
51863: PUSH
51864: LD_INT 2
51866: NEG
51867: PUSH
51868: EMPTY
51869: LIST
51870: LIST
51871: PUSH
51872: EMPTY
51873: LIST
51874: LIST
51875: LIST
51876: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
51877: LD_ADDR_VAR 0 18
51881: PUSH
51882: LD_INT 2
51884: PUSH
51885: LD_INT 1
51887: NEG
51888: PUSH
51889: EMPTY
51890: LIST
51891: LIST
51892: PUSH
51893: LD_INT 3
51895: PUSH
51896: LD_INT 0
51898: PUSH
51899: EMPTY
51900: LIST
51901: LIST
51902: PUSH
51903: LD_INT 3
51905: PUSH
51906: LD_INT 1
51908: PUSH
51909: EMPTY
51910: LIST
51911: LIST
51912: PUSH
51913: EMPTY
51914: LIST
51915: LIST
51916: LIST
51917: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
51918: LD_ADDR_VAR 0 19
51922: PUSH
51923: LD_INT 3
51925: PUSH
51926: LD_INT 2
51928: PUSH
51929: EMPTY
51930: LIST
51931: LIST
51932: PUSH
51933: LD_INT 3
51935: PUSH
51936: LD_INT 3
51938: PUSH
51939: EMPTY
51940: LIST
51941: LIST
51942: PUSH
51943: LD_INT 2
51945: PUSH
51946: LD_INT 3
51948: PUSH
51949: EMPTY
51950: LIST
51951: LIST
51952: PUSH
51953: EMPTY
51954: LIST
51955: LIST
51956: LIST
51957: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
51958: LD_ADDR_VAR 0 20
51962: PUSH
51963: LD_INT 1
51965: PUSH
51966: LD_INT 3
51968: PUSH
51969: EMPTY
51970: LIST
51971: LIST
51972: PUSH
51973: LD_INT 0
51975: PUSH
51976: LD_INT 3
51978: PUSH
51979: EMPTY
51980: LIST
51981: LIST
51982: PUSH
51983: LD_INT 1
51985: NEG
51986: PUSH
51987: LD_INT 2
51989: PUSH
51990: EMPTY
51991: LIST
51992: LIST
51993: PUSH
51994: EMPTY
51995: LIST
51996: LIST
51997: LIST
51998: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51999: LD_ADDR_VAR 0 21
52003: PUSH
52004: LD_INT 2
52006: NEG
52007: PUSH
52008: LD_INT 1
52010: PUSH
52011: EMPTY
52012: LIST
52013: LIST
52014: PUSH
52015: LD_INT 3
52017: NEG
52018: PUSH
52019: LD_INT 0
52021: PUSH
52022: EMPTY
52023: LIST
52024: LIST
52025: PUSH
52026: LD_INT 3
52028: NEG
52029: PUSH
52030: LD_INT 1
52032: NEG
52033: PUSH
52034: EMPTY
52035: LIST
52036: LIST
52037: PUSH
52038: EMPTY
52039: LIST
52040: LIST
52041: LIST
52042: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52043: LD_ADDR_VAR 0 22
52047: PUSH
52048: LD_INT 2
52050: NEG
52051: PUSH
52052: LD_INT 3
52054: NEG
52055: PUSH
52056: EMPTY
52057: LIST
52058: LIST
52059: PUSH
52060: LD_INT 3
52062: NEG
52063: PUSH
52064: LD_INT 2
52066: NEG
52067: PUSH
52068: EMPTY
52069: LIST
52070: LIST
52071: PUSH
52072: LD_INT 3
52074: NEG
52075: PUSH
52076: LD_INT 3
52078: NEG
52079: PUSH
52080: EMPTY
52081: LIST
52082: LIST
52083: PUSH
52084: EMPTY
52085: LIST
52086: LIST
52087: LIST
52088: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
52089: LD_ADDR_VAR 0 23
52093: PUSH
52094: LD_INT 0
52096: PUSH
52097: LD_INT 3
52099: NEG
52100: PUSH
52101: EMPTY
52102: LIST
52103: LIST
52104: PUSH
52105: LD_INT 1
52107: NEG
52108: PUSH
52109: LD_INT 4
52111: NEG
52112: PUSH
52113: EMPTY
52114: LIST
52115: LIST
52116: PUSH
52117: LD_INT 1
52119: PUSH
52120: LD_INT 3
52122: NEG
52123: PUSH
52124: EMPTY
52125: LIST
52126: LIST
52127: PUSH
52128: EMPTY
52129: LIST
52130: LIST
52131: LIST
52132: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
52133: LD_ADDR_VAR 0 24
52137: PUSH
52138: LD_INT 3
52140: PUSH
52141: LD_INT 0
52143: PUSH
52144: EMPTY
52145: LIST
52146: LIST
52147: PUSH
52148: LD_INT 3
52150: PUSH
52151: LD_INT 1
52153: NEG
52154: PUSH
52155: EMPTY
52156: LIST
52157: LIST
52158: PUSH
52159: LD_INT 4
52161: PUSH
52162: LD_INT 1
52164: PUSH
52165: EMPTY
52166: LIST
52167: LIST
52168: PUSH
52169: EMPTY
52170: LIST
52171: LIST
52172: LIST
52173: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
52174: LD_ADDR_VAR 0 25
52178: PUSH
52179: LD_INT 3
52181: PUSH
52182: LD_INT 3
52184: PUSH
52185: EMPTY
52186: LIST
52187: LIST
52188: PUSH
52189: LD_INT 4
52191: PUSH
52192: LD_INT 3
52194: PUSH
52195: EMPTY
52196: LIST
52197: LIST
52198: PUSH
52199: LD_INT 3
52201: PUSH
52202: LD_INT 4
52204: PUSH
52205: EMPTY
52206: LIST
52207: LIST
52208: PUSH
52209: EMPTY
52210: LIST
52211: LIST
52212: LIST
52213: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
52214: LD_ADDR_VAR 0 26
52218: PUSH
52219: LD_INT 0
52221: PUSH
52222: LD_INT 3
52224: PUSH
52225: EMPTY
52226: LIST
52227: LIST
52228: PUSH
52229: LD_INT 1
52231: PUSH
52232: LD_INT 4
52234: PUSH
52235: EMPTY
52236: LIST
52237: LIST
52238: PUSH
52239: LD_INT 1
52241: NEG
52242: PUSH
52243: LD_INT 3
52245: PUSH
52246: EMPTY
52247: LIST
52248: LIST
52249: PUSH
52250: EMPTY
52251: LIST
52252: LIST
52253: LIST
52254: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
52255: LD_ADDR_VAR 0 27
52259: PUSH
52260: LD_INT 3
52262: NEG
52263: PUSH
52264: LD_INT 0
52266: PUSH
52267: EMPTY
52268: LIST
52269: LIST
52270: PUSH
52271: LD_INT 3
52273: NEG
52274: PUSH
52275: LD_INT 1
52277: PUSH
52278: EMPTY
52279: LIST
52280: LIST
52281: PUSH
52282: LD_INT 4
52284: NEG
52285: PUSH
52286: LD_INT 1
52288: NEG
52289: PUSH
52290: EMPTY
52291: LIST
52292: LIST
52293: PUSH
52294: EMPTY
52295: LIST
52296: LIST
52297: LIST
52298: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
52299: LD_ADDR_VAR 0 28
52303: PUSH
52304: LD_INT 3
52306: NEG
52307: PUSH
52308: LD_INT 3
52310: NEG
52311: PUSH
52312: EMPTY
52313: LIST
52314: LIST
52315: PUSH
52316: LD_INT 3
52318: NEG
52319: PUSH
52320: LD_INT 4
52322: NEG
52323: PUSH
52324: EMPTY
52325: LIST
52326: LIST
52327: PUSH
52328: LD_INT 4
52330: NEG
52331: PUSH
52332: LD_INT 3
52334: NEG
52335: PUSH
52336: EMPTY
52337: LIST
52338: LIST
52339: PUSH
52340: EMPTY
52341: LIST
52342: LIST
52343: LIST
52344: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
52345: LD_ADDR_VAR 0 29
52349: PUSH
52350: LD_INT 1
52352: NEG
52353: PUSH
52354: LD_INT 3
52356: NEG
52357: PUSH
52358: EMPTY
52359: LIST
52360: LIST
52361: PUSH
52362: LD_INT 0
52364: PUSH
52365: LD_INT 3
52367: NEG
52368: PUSH
52369: EMPTY
52370: LIST
52371: LIST
52372: PUSH
52373: LD_INT 1
52375: PUSH
52376: LD_INT 2
52378: NEG
52379: PUSH
52380: EMPTY
52381: LIST
52382: LIST
52383: PUSH
52384: LD_INT 1
52386: NEG
52387: PUSH
52388: LD_INT 4
52390: NEG
52391: PUSH
52392: EMPTY
52393: LIST
52394: LIST
52395: PUSH
52396: LD_INT 0
52398: PUSH
52399: LD_INT 4
52401: NEG
52402: PUSH
52403: EMPTY
52404: LIST
52405: LIST
52406: PUSH
52407: LD_INT 1
52409: PUSH
52410: LD_INT 3
52412: NEG
52413: PUSH
52414: EMPTY
52415: LIST
52416: LIST
52417: PUSH
52418: LD_INT 1
52420: NEG
52421: PUSH
52422: LD_INT 5
52424: NEG
52425: PUSH
52426: EMPTY
52427: LIST
52428: LIST
52429: PUSH
52430: LD_INT 0
52432: PUSH
52433: LD_INT 5
52435: NEG
52436: PUSH
52437: EMPTY
52438: LIST
52439: LIST
52440: PUSH
52441: LD_INT 1
52443: PUSH
52444: LD_INT 4
52446: NEG
52447: PUSH
52448: EMPTY
52449: LIST
52450: LIST
52451: PUSH
52452: LD_INT 1
52454: NEG
52455: PUSH
52456: LD_INT 6
52458: NEG
52459: PUSH
52460: EMPTY
52461: LIST
52462: LIST
52463: PUSH
52464: LD_INT 0
52466: PUSH
52467: LD_INT 6
52469: NEG
52470: PUSH
52471: EMPTY
52472: LIST
52473: LIST
52474: PUSH
52475: LD_INT 1
52477: PUSH
52478: LD_INT 5
52480: NEG
52481: PUSH
52482: EMPTY
52483: LIST
52484: LIST
52485: PUSH
52486: EMPTY
52487: LIST
52488: LIST
52489: LIST
52490: LIST
52491: LIST
52492: LIST
52493: LIST
52494: LIST
52495: LIST
52496: LIST
52497: LIST
52498: LIST
52499: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
52500: LD_ADDR_VAR 0 30
52504: PUSH
52505: LD_INT 2
52507: PUSH
52508: LD_INT 1
52510: NEG
52511: PUSH
52512: EMPTY
52513: LIST
52514: LIST
52515: PUSH
52516: LD_INT 3
52518: PUSH
52519: LD_INT 0
52521: PUSH
52522: EMPTY
52523: LIST
52524: LIST
52525: PUSH
52526: LD_INT 3
52528: PUSH
52529: LD_INT 1
52531: PUSH
52532: EMPTY
52533: LIST
52534: LIST
52535: PUSH
52536: LD_INT 3
52538: PUSH
52539: LD_INT 1
52541: NEG
52542: PUSH
52543: EMPTY
52544: LIST
52545: LIST
52546: PUSH
52547: LD_INT 4
52549: PUSH
52550: LD_INT 0
52552: PUSH
52553: EMPTY
52554: LIST
52555: LIST
52556: PUSH
52557: LD_INT 4
52559: PUSH
52560: LD_INT 1
52562: PUSH
52563: EMPTY
52564: LIST
52565: LIST
52566: PUSH
52567: LD_INT 4
52569: PUSH
52570: LD_INT 1
52572: NEG
52573: PUSH
52574: EMPTY
52575: LIST
52576: LIST
52577: PUSH
52578: LD_INT 5
52580: PUSH
52581: LD_INT 0
52583: PUSH
52584: EMPTY
52585: LIST
52586: LIST
52587: PUSH
52588: LD_INT 5
52590: PUSH
52591: LD_INT 1
52593: PUSH
52594: EMPTY
52595: LIST
52596: LIST
52597: PUSH
52598: LD_INT 5
52600: PUSH
52601: LD_INT 1
52603: NEG
52604: PUSH
52605: EMPTY
52606: LIST
52607: LIST
52608: PUSH
52609: LD_INT 6
52611: PUSH
52612: LD_INT 0
52614: PUSH
52615: EMPTY
52616: LIST
52617: LIST
52618: PUSH
52619: LD_INT 6
52621: PUSH
52622: LD_INT 1
52624: PUSH
52625: EMPTY
52626: LIST
52627: LIST
52628: PUSH
52629: EMPTY
52630: LIST
52631: LIST
52632: LIST
52633: LIST
52634: LIST
52635: LIST
52636: LIST
52637: LIST
52638: LIST
52639: LIST
52640: LIST
52641: LIST
52642: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
52643: LD_ADDR_VAR 0 31
52647: PUSH
52648: LD_INT 3
52650: PUSH
52651: LD_INT 2
52653: PUSH
52654: EMPTY
52655: LIST
52656: LIST
52657: PUSH
52658: LD_INT 3
52660: PUSH
52661: LD_INT 3
52663: PUSH
52664: EMPTY
52665: LIST
52666: LIST
52667: PUSH
52668: LD_INT 2
52670: PUSH
52671: LD_INT 3
52673: PUSH
52674: EMPTY
52675: LIST
52676: LIST
52677: PUSH
52678: LD_INT 4
52680: PUSH
52681: LD_INT 3
52683: PUSH
52684: EMPTY
52685: LIST
52686: LIST
52687: PUSH
52688: LD_INT 4
52690: PUSH
52691: LD_INT 4
52693: PUSH
52694: EMPTY
52695: LIST
52696: LIST
52697: PUSH
52698: LD_INT 3
52700: PUSH
52701: LD_INT 4
52703: PUSH
52704: EMPTY
52705: LIST
52706: LIST
52707: PUSH
52708: LD_INT 5
52710: PUSH
52711: LD_INT 4
52713: PUSH
52714: EMPTY
52715: LIST
52716: LIST
52717: PUSH
52718: LD_INT 5
52720: PUSH
52721: LD_INT 5
52723: PUSH
52724: EMPTY
52725: LIST
52726: LIST
52727: PUSH
52728: LD_INT 4
52730: PUSH
52731: LD_INT 5
52733: PUSH
52734: EMPTY
52735: LIST
52736: LIST
52737: PUSH
52738: LD_INT 6
52740: PUSH
52741: LD_INT 5
52743: PUSH
52744: EMPTY
52745: LIST
52746: LIST
52747: PUSH
52748: LD_INT 6
52750: PUSH
52751: LD_INT 6
52753: PUSH
52754: EMPTY
52755: LIST
52756: LIST
52757: PUSH
52758: LD_INT 5
52760: PUSH
52761: LD_INT 6
52763: PUSH
52764: EMPTY
52765: LIST
52766: LIST
52767: PUSH
52768: EMPTY
52769: LIST
52770: LIST
52771: LIST
52772: LIST
52773: LIST
52774: LIST
52775: LIST
52776: LIST
52777: LIST
52778: LIST
52779: LIST
52780: LIST
52781: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
52782: LD_ADDR_VAR 0 32
52786: PUSH
52787: LD_INT 1
52789: PUSH
52790: LD_INT 3
52792: PUSH
52793: EMPTY
52794: LIST
52795: LIST
52796: PUSH
52797: LD_INT 0
52799: PUSH
52800: LD_INT 3
52802: PUSH
52803: EMPTY
52804: LIST
52805: LIST
52806: PUSH
52807: LD_INT 1
52809: NEG
52810: PUSH
52811: LD_INT 2
52813: PUSH
52814: EMPTY
52815: LIST
52816: LIST
52817: PUSH
52818: LD_INT 1
52820: PUSH
52821: LD_INT 4
52823: PUSH
52824: EMPTY
52825: LIST
52826: LIST
52827: PUSH
52828: LD_INT 0
52830: PUSH
52831: LD_INT 4
52833: PUSH
52834: EMPTY
52835: LIST
52836: LIST
52837: PUSH
52838: LD_INT 1
52840: NEG
52841: PUSH
52842: LD_INT 3
52844: PUSH
52845: EMPTY
52846: LIST
52847: LIST
52848: PUSH
52849: LD_INT 1
52851: PUSH
52852: LD_INT 5
52854: PUSH
52855: EMPTY
52856: LIST
52857: LIST
52858: PUSH
52859: LD_INT 0
52861: PUSH
52862: LD_INT 5
52864: PUSH
52865: EMPTY
52866: LIST
52867: LIST
52868: PUSH
52869: LD_INT 1
52871: NEG
52872: PUSH
52873: LD_INT 4
52875: PUSH
52876: EMPTY
52877: LIST
52878: LIST
52879: PUSH
52880: LD_INT 1
52882: PUSH
52883: LD_INT 6
52885: PUSH
52886: EMPTY
52887: LIST
52888: LIST
52889: PUSH
52890: LD_INT 0
52892: PUSH
52893: LD_INT 6
52895: PUSH
52896: EMPTY
52897: LIST
52898: LIST
52899: PUSH
52900: LD_INT 1
52902: NEG
52903: PUSH
52904: LD_INT 5
52906: PUSH
52907: EMPTY
52908: LIST
52909: LIST
52910: PUSH
52911: EMPTY
52912: LIST
52913: LIST
52914: LIST
52915: LIST
52916: LIST
52917: LIST
52918: LIST
52919: LIST
52920: LIST
52921: LIST
52922: LIST
52923: LIST
52924: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
52925: LD_ADDR_VAR 0 33
52929: PUSH
52930: LD_INT 2
52932: NEG
52933: PUSH
52934: LD_INT 1
52936: PUSH
52937: EMPTY
52938: LIST
52939: LIST
52940: PUSH
52941: LD_INT 3
52943: NEG
52944: PUSH
52945: LD_INT 0
52947: PUSH
52948: EMPTY
52949: LIST
52950: LIST
52951: PUSH
52952: LD_INT 3
52954: NEG
52955: PUSH
52956: LD_INT 1
52958: NEG
52959: PUSH
52960: EMPTY
52961: LIST
52962: LIST
52963: PUSH
52964: LD_INT 3
52966: NEG
52967: PUSH
52968: LD_INT 1
52970: PUSH
52971: EMPTY
52972: LIST
52973: LIST
52974: PUSH
52975: LD_INT 4
52977: NEG
52978: PUSH
52979: LD_INT 0
52981: PUSH
52982: EMPTY
52983: LIST
52984: LIST
52985: PUSH
52986: LD_INT 4
52988: NEG
52989: PUSH
52990: LD_INT 1
52992: NEG
52993: PUSH
52994: EMPTY
52995: LIST
52996: LIST
52997: PUSH
52998: LD_INT 4
53000: NEG
53001: PUSH
53002: LD_INT 1
53004: PUSH
53005: EMPTY
53006: LIST
53007: LIST
53008: PUSH
53009: LD_INT 5
53011: NEG
53012: PUSH
53013: LD_INT 0
53015: PUSH
53016: EMPTY
53017: LIST
53018: LIST
53019: PUSH
53020: LD_INT 5
53022: NEG
53023: PUSH
53024: LD_INT 1
53026: NEG
53027: PUSH
53028: EMPTY
53029: LIST
53030: LIST
53031: PUSH
53032: LD_INT 5
53034: NEG
53035: PUSH
53036: LD_INT 1
53038: PUSH
53039: EMPTY
53040: LIST
53041: LIST
53042: PUSH
53043: LD_INT 6
53045: NEG
53046: PUSH
53047: LD_INT 0
53049: PUSH
53050: EMPTY
53051: LIST
53052: LIST
53053: PUSH
53054: LD_INT 6
53056: NEG
53057: PUSH
53058: LD_INT 1
53060: NEG
53061: PUSH
53062: EMPTY
53063: LIST
53064: LIST
53065: PUSH
53066: EMPTY
53067: LIST
53068: LIST
53069: LIST
53070: LIST
53071: LIST
53072: LIST
53073: LIST
53074: LIST
53075: LIST
53076: LIST
53077: LIST
53078: LIST
53079: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
53080: LD_ADDR_VAR 0 34
53084: PUSH
53085: LD_INT 2
53087: NEG
53088: PUSH
53089: LD_INT 3
53091: NEG
53092: PUSH
53093: EMPTY
53094: LIST
53095: LIST
53096: PUSH
53097: LD_INT 3
53099: NEG
53100: PUSH
53101: LD_INT 2
53103: NEG
53104: PUSH
53105: EMPTY
53106: LIST
53107: LIST
53108: PUSH
53109: LD_INT 3
53111: NEG
53112: PUSH
53113: LD_INT 3
53115: NEG
53116: PUSH
53117: EMPTY
53118: LIST
53119: LIST
53120: PUSH
53121: LD_INT 3
53123: NEG
53124: PUSH
53125: LD_INT 4
53127: NEG
53128: PUSH
53129: EMPTY
53130: LIST
53131: LIST
53132: PUSH
53133: LD_INT 4
53135: NEG
53136: PUSH
53137: LD_INT 3
53139: NEG
53140: PUSH
53141: EMPTY
53142: LIST
53143: LIST
53144: PUSH
53145: LD_INT 4
53147: NEG
53148: PUSH
53149: LD_INT 4
53151: NEG
53152: PUSH
53153: EMPTY
53154: LIST
53155: LIST
53156: PUSH
53157: LD_INT 4
53159: NEG
53160: PUSH
53161: LD_INT 5
53163: NEG
53164: PUSH
53165: EMPTY
53166: LIST
53167: LIST
53168: PUSH
53169: LD_INT 5
53171: NEG
53172: PUSH
53173: LD_INT 4
53175: NEG
53176: PUSH
53177: EMPTY
53178: LIST
53179: LIST
53180: PUSH
53181: LD_INT 5
53183: NEG
53184: PUSH
53185: LD_INT 5
53187: NEG
53188: PUSH
53189: EMPTY
53190: LIST
53191: LIST
53192: PUSH
53193: LD_INT 5
53195: NEG
53196: PUSH
53197: LD_INT 6
53199: NEG
53200: PUSH
53201: EMPTY
53202: LIST
53203: LIST
53204: PUSH
53205: LD_INT 6
53207: NEG
53208: PUSH
53209: LD_INT 5
53211: NEG
53212: PUSH
53213: EMPTY
53214: LIST
53215: LIST
53216: PUSH
53217: LD_INT 6
53219: NEG
53220: PUSH
53221: LD_INT 6
53223: NEG
53224: PUSH
53225: EMPTY
53226: LIST
53227: LIST
53228: PUSH
53229: EMPTY
53230: LIST
53231: LIST
53232: LIST
53233: LIST
53234: LIST
53235: LIST
53236: LIST
53237: LIST
53238: LIST
53239: LIST
53240: LIST
53241: LIST
53242: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
53243: LD_ADDR_VAR 0 41
53247: PUSH
53248: LD_INT 0
53250: PUSH
53251: LD_INT 2
53253: NEG
53254: PUSH
53255: EMPTY
53256: LIST
53257: LIST
53258: PUSH
53259: LD_INT 1
53261: NEG
53262: PUSH
53263: LD_INT 3
53265: NEG
53266: PUSH
53267: EMPTY
53268: LIST
53269: LIST
53270: PUSH
53271: LD_INT 1
53273: PUSH
53274: LD_INT 2
53276: NEG
53277: PUSH
53278: EMPTY
53279: LIST
53280: LIST
53281: PUSH
53282: EMPTY
53283: LIST
53284: LIST
53285: LIST
53286: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
53287: LD_ADDR_VAR 0 42
53291: PUSH
53292: LD_INT 2
53294: PUSH
53295: LD_INT 0
53297: PUSH
53298: EMPTY
53299: LIST
53300: LIST
53301: PUSH
53302: LD_INT 2
53304: PUSH
53305: LD_INT 1
53307: NEG
53308: PUSH
53309: EMPTY
53310: LIST
53311: LIST
53312: PUSH
53313: LD_INT 3
53315: PUSH
53316: LD_INT 1
53318: PUSH
53319: EMPTY
53320: LIST
53321: LIST
53322: PUSH
53323: EMPTY
53324: LIST
53325: LIST
53326: LIST
53327: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
53328: LD_ADDR_VAR 0 43
53332: PUSH
53333: LD_INT 2
53335: PUSH
53336: LD_INT 2
53338: PUSH
53339: EMPTY
53340: LIST
53341: LIST
53342: PUSH
53343: LD_INT 3
53345: PUSH
53346: LD_INT 2
53348: PUSH
53349: EMPTY
53350: LIST
53351: LIST
53352: PUSH
53353: LD_INT 2
53355: PUSH
53356: LD_INT 3
53358: PUSH
53359: EMPTY
53360: LIST
53361: LIST
53362: PUSH
53363: EMPTY
53364: LIST
53365: LIST
53366: LIST
53367: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
53368: LD_ADDR_VAR 0 44
53372: PUSH
53373: LD_INT 0
53375: PUSH
53376: LD_INT 2
53378: PUSH
53379: EMPTY
53380: LIST
53381: LIST
53382: PUSH
53383: LD_INT 1
53385: PUSH
53386: LD_INT 3
53388: PUSH
53389: EMPTY
53390: LIST
53391: LIST
53392: PUSH
53393: LD_INT 1
53395: NEG
53396: PUSH
53397: LD_INT 2
53399: PUSH
53400: EMPTY
53401: LIST
53402: LIST
53403: PUSH
53404: EMPTY
53405: LIST
53406: LIST
53407: LIST
53408: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
53409: LD_ADDR_VAR 0 45
53413: PUSH
53414: LD_INT 2
53416: NEG
53417: PUSH
53418: LD_INT 0
53420: PUSH
53421: EMPTY
53422: LIST
53423: LIST
53424: PUSH
53425: LD_INT 2
53427: NEG
53428: PUSH
53429: LD_INT 1
53431: PUSH
53432: EMPTY
53433: LIST
53434: LIST
53435: PUSH
53436: LD_INT 3
53438: NEG
53439: PUSH
53440: LD_INT 1
53442: NEG
53443: PUSH
53444: EMPTY
53445: LIST
53446: LIST
53447: PUSH
53448: EMPTY
53449: LIST
53450: LIST
53451: LIST
53452: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
53453: LD_ADDR_VAR 0 46
53457: PUSH
53458: LD_INT 2
53460: NEG
53461: PUSH
53462: LD_INT 2
53464: NEG
53465: PUSH
53466: EMPTY
53467: LIST
53468: LIST
53469: PUSH
53470: LD_INT 2
53472: NEG
53473: PUSH
53474: LD_INT 3
53476: NEG
53477: PUSH
53478: EMPTY
53479: LIST
53480: LIST
53481: PUSH
53482: LD_INT 3
53484: NEG
53485: PUSH
53486: LD_INT 2
53488: NEG
53489: PUSH
53490: EMPTY
53491: LIST
53492: LIST
53493: PUSH
53494: EMPTY
53495: LIST
53496: LIST
53497: LIST
53498: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
53499: LD_ADDR_VAR 0 47
53503: PUSH
53504: LD_INT 2
53506: NEG
53507: PUSH
53508: LD_INT 3
53510: NEG
53511: PUSH
53512: EMPTY
53513: LIST
53514: LIST
53515: PUSH
53516: LD_INT 1
53518: NEG
53519: PUSH
53520: LD_INT 3
53522: NEG
53523: PUSH
53524: EMPTY
53525: LIST
53526: LIST
53527: PUSH
53528: EMPTY
53529: LIST
53530: LIST
53531: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
53532: LD_ADDR_VAR 0 48
53536: PUSH
53537: LD_INT 1
53539: PUSH
53540: LD_INT 2
53542: NEG
53543: PUSH
53544: EMPTY
53545: LIST
53546: LIST
53547: PUSH
53548: LD_INT 2
53550: PUSH
53551: LD_INT 1
53553: NEG
53554: PUSH
53555: EMPTY
53556: LIST
53557: LIST
53558: PUSH
53559: EMPTY
53560: LIST
53561: LIST
53562: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
53563: LD_ADDR_VAR 0 49
53567: PUSH
53568: LD_INT 3
53570: PUSH
53571: LD_INT 1
53573: PUSH
53574: EMPTY
53575: LIST
53576: LIST
53577: PUSH
53578: LD_INT 3
53580: PUSH
53581: LD_INT 2
53583: PUSH
53584: EMPTY
53585: LIST
53586: LIST
53587: PUSH
53588: EMPTY
53589: LIST
53590: LIST
53591: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
53592: LD_ADDR_VAR 0 50
53596: PUSH
53597: LD_INT 2
53599: PUSH
53600: LD_INT 3
53602: PUSH
53603: EMPTY
53604: LIST
53605: LIST
53606: PUSH
53607: LD_INT 1
53609: PUSH
53610: LD_INT 3
53612: PUSH
53613: EMPTY
53614: LIST
53615: LIST
53616: PUSH
53617: EMPTY
53618: LIST
53619: LIST
53620: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
53621: LD_ADDR_VAR 0 51
53625: PUSH
53626: LD_INT 1
53628: NEG
53629: PUSH
53630: LD_INT 2
53632: PUSH
53633: EMPTY
53634: LIST
53635: LIST
53636: PUSH
53637: LD_INT 2
53639: NEG
53640: PUSH
53641: LD_INT 1
53643: PUSH
53644: EMPTY
53645: LIST
53646: LIST
53647: PUSH
53648: EMPTY
53649: LIST
53650: LIST
53651: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
53652: LD_ADDR_VAR 0 52
53656: PUSH
53657: LD_INT 3
53659: NEG
53660: PUSH
53661: LD_INT 1
53663: NEG
53664: PUSH
53665: EMPTY
53666: LIST
53667: LIST
53668: PUSH
53669: LD_INT 3
53671: NEG
53672: PUSH
53673: LD_INT 2
53675: NEG
53676: PUSH
53677: EMPTY
53678: LIST
53679: LIST
53680: PUSH
53681: EMPTY
53682: LIST
53683: LIST
53684: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53685: LD_ADDR_VAR 0 53
53689: PUSH
53690: LD_INT 1
53692: NEG
53693: PUSH
53694: LD_INT 3
53696: NEG
53697: PUSH
53698: EMPTY
53699: LIST
53700: LIST
53701: PUSH
53702: LD_INT 0
53704: PUSH
53705: LD_INT 3
53707: NEG
53708: PUSH
53709: EMPTY
53710: LIST
53711: LIST
53712: PUSH
53713: LD_INT 1
53715: PUSH
53716: LD_INT 2
53718: NEG
53719: PUSH
53720: EMPTY
53721: LIST
53722: LIST
53723: PUSH
53724: EMPTY
53725: LIST
53726: LIST
53727: LIST
53728: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53729: LD_ADDR_VAR 0 54
53733: PUSH
53734: LD_INT 2
53736: PUSH
53737: LD_INT 1
53739: NEG
53740: PUSH
53741: EMPTY
53742: LIST
53743: LIST
53744: PUSH
53745: LD_INT 3
53747: PUSH
53748: LD_INT 0
53750: PUSH
53751: EMPTY
53752: LIST
53753: LIST
53754: PUSH
53755: LD_INT 3
53757: PUSH
53758: LD_INT 1
53760: PUSH
53761: EMPTY
53762: LIST
53763: LIST
53764: PUSH
53765: EMPTY
53766: LIST
53767: LIST
53768: LIST
53769: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53770: LD_ADDR_VAR 0 55
53774: PUSH
53775: LD_INT 3
53777: PUSH
53778: LD_INT 2
53780: PUSH
53781: EMPTY
53782: LIST
53783: LIST
53784: PUSH
53785: LD_INT 3
53787: PUSH
53788: LD_INT 3
53790: PUSH
53791: EMPTY
53792: LIST
53793: LIST
53794: PUSH
53795: LD_INT 2
53797: PUSH
53798: LD_INT 3
53800: PUSH
53801: EMPTY
53802: LIST
53803: LIST
53804: PUSH
53805: EMPTY
53806: LIST
53807: LIST
53808: LIST
53809: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53810: LD_ADDR_VAR 0 56
53814: PUSH
53815: LD_INT 1
53817: PUSH
53818: LD_INT 3
53820: PUSH
53821: EMPTY
53822: LIST
53823: LIST
53824: PUSH
53825: LD_INT 0
53827: PUSH
53828: LD_INT 3
53830: PUSH
53831: EMPTY
53832: LIST
53833: LIST
53834: PUSH
53835: LD_INT 1
53837: NEG
53838: PUSH
53839: LD_INT 2
53841: PUSH
53842: EMPTY
53843: LIST
53844: LIST
53845: PUSH
53846: EMPTY
53847: LIST
53848: LIST
53849: LIST
53850: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53851: LD_ADDR_VAR 0 57
53855: PUSH
53856: LD_INT 2
53858: NEG
53859: PUSH
53860: LD_INT 1
53862: PUSH
53863: EMPTY
53864: LIST
53865: LIST
53866: PUSH
53867: LD_INT 3
53869: NEG
53870: PUSH
53871: LD_INT 0
53873: PUSH
53874: EMPTY
53875: LIST
53876: LIST
53877: PUSH
53878: LD_INT 3
53880: NEG
53881: PUSH
53882: LD_INT 1
53884: NEG
53885: PUSH
53886: EMPTY
53887: LIST
53888: LIST
53889: PUSH
53890: EMPTY
53891: LIST
53892: LIST
53893: LIST
53894: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53895: LD_ADDR_VAR 0 58
53899: PUSH
53900: LD_INT 2
53902: NEG
53903: PUSH
53904: LD_INT 3
53906: NEG
53907: PUSH
53908: EMPTY
53909: LIST
53910: LIST
53911: PUSH
53912: LD_INT 3
53914: NEG
53915: PUSH
53916: LD_INT 2
53918: NEG
53919: PUSH
53920: EMPTY
53921: LIST
53922: LIST
53923: PUSH
53924: LD_INT 3
53926: NEG
53927: PUSH
53928: LD_INT 3
53930: NEG
53931: PUSH
53932: EMPTY
53933: LIST
53934: LIST
53935: PUSH
53936: EMPTY
53937: LIST
53938: LIST
53939: LIST
53940: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
53941: LD_ADDR_VAR 0 59
53945: PUSH
53946: LD_INT 1
53948: NEG
53949: PUSH
53950: LD_INT 2
53952: NEG
53953: PUSH
53954: EMPTY
53955: LIST
53956: LIST
53957: PUSH
53958: LD_INT 0
53960: PUSH
53961: LD_INT 2
53963: NEG
53964: PUSH
53965: EMPTY
53966: LIST
53967: LIST
53968: PUSH
53969: LD_INT 1
53971: PUSH
53972: LD_INT 1
53974: NEG
53975: PUSH
53976: EMPTY
53977: LIST
53978: LIST
53979: PUSH
53980: EMPTY
53981: LIST
53982: LIST
53983: LIST
53984: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
53985: LD_ADDR_VAR 0 60
53989: PUSH
53990: LD_INT 1
53992: PUSH
53993: LD_INT 1
53995: NEG
53996: PUSH
53997: EMPTY
53998: LIST
53999: LIST
54000: PUSH
54001: LD_INT 2
54003: PUSH
54004: LD_INT 0
54006: PUSH
54007: EMPTY
54008: LIST
54009: LIST
54010: PUSH
54011: LD_INT 2
54013: PUSH
54014: LD_INT 1
54016: PUSH
54017: EMPTY
54018: LIST
54019: LIST
54020: PUSH
54021: EMPTY
54022: LIST
54023: LIST
54024: LIST
54025: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
54026: LD_ADDR_VAR 0 61
54030: PUSH
54031: LD_INT 2
54033: PUSH
54034: LD_INT 1
54036: PUSH
54037: EMPTY
54038: LIST
54039: LIST
54040: PUSH
54041: LD_INT 2
54043: PUSH
54044: LD_INT 2
54046: PUSH
54047: EMPTY
54048: LIST
54049: LIST
54050: PUSH
54051: LD_INT 1
54053: PUSH
54054: LD_INT 2
54056: PUSH
54057: EMPTY
54058: LIST
54059: LIST
54060: PUSH
54061: EMPTY
54062: LIST
54063: LIST
54064: LIST
54065: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
54066: LD_ADDR_VAR 0 62
54070: PUSH
54071: LD_INT 1
54073: PUSH
54074: LD_INT 2
54076: PUSH
54077: EMPTY
54078: LIST
54079: LIST
54080: PUSH
54081: LD_INT 0
54083: PUSH
54084: LD_INT 2
54086: PUSH
54087: EMPTY
54088: LIST
54089: LIST
54090: PUSH
54091: LD_INT 1
54093: NEG
54094: PUSH
54095: LD_INT 1
54097: PUSH
54098: EMPTY
54099: LIST
54100: LIST
54101: PUSH
54102: EMPTY
54103: LIST
54104: LIST
54105: LIST
54106: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
54107: LD_ADDR_VAR 0 63
54111: PUSH
54112: LD_INT 1
54114: NEG
54115: PUSH
54116: LD_INT 1
54118: PUSH
54119: EMPTY
54120: LIST
54121: LIST
54122: PUSH
54123: LD_INT 2
54125: NEG
54126: PUSH
54127: LD_INT 0
54129: PUSH
54130: EMPTY
54131: LIST
54132: LIST
54133: PUSH
54134: LD_INT 2
54136: NEG
54137: PUSH
54138: LD_INT 1
54140: NEG
54141: PUSH
54142: EMPTY
54143: LIST
54144: LIST
54145: PUSH
54146: EMPTY
54147: LIST
54148: LIST
54149: LIST
54150: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54151: LD_ADDR_VAR 0 64
54155: PUSH
54156: LD_INT 1
54158: NEG
54159: PUSH
54160: LD_INT 2
54162: NEG
54163: PUSH
54164: EMPTY
54165: LIST
54166: LIST
54167: PUSH
54168: LD_INT 2
54170: NEG
54171: PUSH
54172: LD_INT 1
54174: NEG
54175: PUSH
54176: EMPTY
54177: LIST
54178: LIST
54179: PUSH
54180: LD_INT 2
54182: NEG
54183: PUSH
54184: LD_INT 2
54186: NEG
54187: PUSH
54188: EMPTY
54189: LIST
54190: LIST
54191: PUSH
54192: EMPTY
54193: LIST
54194: LIST
54195: LIST
54196: ST_TO_ADDR
// end ; 2 :
54197: GO 57463
54199: LD_INT 2
54201: DOUBLE
54202: EQUAL
54203: IFTRUE 54207
54205: GO 57462
54207: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
54208: LD_ADDR_VAR 0 29
54212: PUSH
54213: LD_INT 4
54215: PUSH
54216: LD_INT 0
54218: PUSH
54219: EMPTY
54220: LIST
54221: LIST
54222: PUSH
54223: LD_INT 4
54225: PUSH
54226: LD_INT 1
54228: NEG
54229: PUSH
54230: EMPTY
54231: LIST
54232: LIST
54233: PUSH
54234: LD_INT 5
54236: PUSH
54237: LD_INT 0
54239: PUSH
54240: EMPTY
54241: LIST
54242: LIST
54243: PUSH
54244: LD_INT 5
54246: PUSH
54247: LD_INT 1
54249: PUSH
54250: EMPTY
54251: LIST
54252: LIST
54253: PUSH
54254: LD_INT 4
54256: PUSH
54257: LD_INT 1
54259: PUSH
54260: EMPTY
54261: LIST
54262: LIST
54263: PUSH
54264: LD_INT 3
54266: PUSH
54267: LD_INT 0
54269: PUSH
54270: EMPTY
54271: LIST
54272: LIST
54273: PUSH
54274: LD_INT 3
54276: PUSH
54277: LD_INT 1
54279: NEG
54280: PUSH
54281: EMPTY
54282: LIST
54283: LIST
54284: PUSH
54285: LD_INT 3
54287: PUSH
54288: LD_INT 2
54290: NEG
54291: PUSH
54292: EMPTY
54293: LIST
54294: LIST
54295: PUSH
54296: LD_INT 5
54298: PUSH
54299: LD_INT 2
54301: PUSH
54302: EMPTY
54303: LIST
54304: LIST
54305: PUSH
54306: LD_INT 3
54308: PUSH
54309: LD_INT 3
54311: PUSH
54312: EMPTY
54313: LIST
54314: LIST
54315: PUSH
54316: LD_INT 3
54318: PUSH
54319: LD_INT 2
54321: PUSH
54322: EMPTY
54323: LIST
54324: LIST
54325: PUSH
54326: LD_INT 4
54328: PUSH
54329: LD_INT 3
54331: PUSH
54332: EMPTY
54333: LIST
54334: LIST
54335: PUSH
54336: LD_INT 4
54338: PUSH
54339: LD_INT 4
54341: PUSH
54342: EMPTY
54343: LIST
54344: LIST
54345: PUSH
54346: LD_INT 3
54348: PUSH
54349: LD_INT 4
54351: PUSH
54352: EMPTY
54353: LIST
54354: LIST
54355: PUSH
54356: LD_INT 2
54358: PUSH
54359: LD_INT 3
54361: PUSH
54362: EMPTY
54363: LIST
54364: LIST
54365: PUSH
54366: LD_INT 2
54368: PUSH
54369: LD_INT 2
54371: PUSH
54372: EMPTY
54373: LIST
54374: LIST
54375: PUSH
54376: LD_INT 4
54378: PUSH
54379: LD_INT 2
54381: PUSH
54382: EMPTY
54383: LIST
54384: LIST
54385: PUSH
54386: LD_INT 2
54388: PUSH
54389: LD_INT 4
54391: PUSH
54392: EMPTY
54393: LIST
54394: LIST
54395: PUSH
54396: LD_INT 0
54398: PUSH
54399: LD_INT 4
54401: PUSH
54402: EMPTY
54403: LIST
54404: LIST
54405: PUSH
54406: LD_INT 0
54408: PUSH
54409: LD_INT 3
54411: PUSH
54412: EMPTY
54413: LIST
54414: LIST
54415: PUSH
54416: LD_INT 1
54418: PUSH
54419: LD_INT 4
54421: PUSH
54422: EMPTY
54423: LIST
54424: LIST
54425: PUSH
54426: LD_INT 1
54428: PUSH
54429: LD_INT 5
54431: PUSH
54432: EMPTY
54433: LIST
54434: LIST
54435: PUSH
54436: LD_INT 0
54438: PUSH
54439: LD_INT 5
54441: PUSH
54442: EMPTY
54443: LIST
54444: LIST
54445: PUSH
54446: LD_INT 1
54448: NEG
54449: PUSH
54450: LD_INT 4
54452: PUSH
54453: EMPTY
54454: LIST
54455: LIST
54456: PUSH
54457: LD_INT 1
54459: NEG
54460: PUSH
54461: LD_INT 3
54463: PUSH
54464: EMPTY
54465: LIST
54466: LIST
54467: PUSH
54468: LD_INT 2
54470: PUSH
54471: LD_INT 5
54473: PUSH
54474: EMPTY
54475: LIST
54476: LIST
54477: PUSH
54478: LD_INT 2
54480: NEG
54481: PUSH
54482: LD_INT 3
54484: PUSH
54485: EMPTY
54486: LIST
54487: LIST
54488: PUSH
54489: LD_INT 3
54491: NEG
54492: PUSH
54493: LD_INT 0
54495: PUSH
54496: EMPTY
54497: LIST
54498: LIST
54499: PUSH
54500: LD_INT 3
54502: NEG
54503: PUSH
54504: LD_INT 1
54506: NEG
54507: PUSH
54508: EMPTY
54509: LIST
54510: LIST
54511: PUSH
54512: LD_INT 2
54514: NEG
54515: PUSH
54516: LD_INT 0
54518: PUSH
54519: EMPTY
54520: LIST
54521: LIST
54522: PUSH
54523: LD_INT 2
54525: NEG
54526: PUSH
54527: LD_INT 1
54529: PUSH
54530: EMPTY
54531: LIST
54532: LIST
54533: PUSH
54534: LD_INT 3
54536: NEG
54537: PUSH
54538: LD_INT 1
54540: PUSH
54541: EMPTY
54542: LIST
54543: LIST
54544: PUSH
54545: LD_INT 4
54547: NEG
54548: PUSH
54549: LD_INT 0
54551: PUSH
54552: EMPTY
54553: LIST
54554: LIST
54555: PUSH
54556: LD_INT 4
54558: NEG
54559: PUSH
54560: LD_INT 1
54562: NEG
54563: PUSH
54564: EMPTY
54565: LIST
54566: LIST
54567: PUSH
54568: LD_INT 4
54570: NEG
54571: PUSH
54572: LD_INT 2
54574: NEG
54575: PUSH
54576: EMPTY
54577: LIST
54578: LIST
54579: PUSH
54580: LD_INT 2
54582: NEG
54583: PUSH
54584: LD_INT 2
54586: PUSH
54587: EMPTY
54588: LIST
54589: LIST
54590: PUSH
54591: LD_INT 4
54593: NEG
54594: PUSH
54595: LD_INT 4
54597: NEG
54598: PUSH
54599: EMPTY
54600: LIST
54601: LIST
54602: PUSH
54603: LD_INT 4
54605: NEG
54606: PUSH
54607: LD_INT 5
54609: NEG
54610: PUSH
54611: EMPTY
54612: LIST
54613: LIST
54614: PUSH
54615: LD_INT 3
54617: NEG
54618: PUSH
54619: LD_INT 4
54621: NEG
54622: PUSH
54623: EMPTY
54624: LIST
54625: LIST
54626: PUSH
54627: LD_INT 3
54629: NEG
54630: PUSH
54631: LD_INT 3
54633: NEG
54634: PUSH
54635: EMPTY
54636: LIST
54637: LIST
54638: PUSH
54639: LD_INT 4
54641: NEG
54642: PUSH
54643: LD_INT 3
54645: NEG
54646: PUSH
54647: EMPTY
54648: LIST
54649: LIST
54650: PUSH
54651: LD_INT 5
54653: NEG
54654: PUSH
54655: LD_INT 4
54657: NEG
54658: PUSH
54659: EMPTY
54660: LIST
54661: LIST
54662: PUSH
54663: LD_INT 5
54665: NEG
54666: PUSH
54667: LD_INT 5
54669: NEG
54670: PUSH
54671: EMPTY
54672: LIST
54673: LIST
54674: PUSH
54675: LD_INT 3
54677: NEG
54678: PUSH
54679: LD_INT 5
54681: NEG
54682: PUSH
54683: EMPTY
54684: LIST
54685: LIST
54686: PUSH
54687: LD_INT 5
54689: NEG
54690: PUSH
54691: LD_INT 3
54693: NEG
54694: PUSH
54695: EMPTY
54696: LIST
54697: LIST
54698: PUSH
54699: EMPTY
54700: LIST
54701: LIST
54702: LIST
54703: LIST
54704: LIST
54705: LIST
54706: LIST
54707: LIST
54708: LIST
54709: LIST
54710: LIST
54711: LIST
54712: LIST
54713: LIST
54714: LIST
54715: LIST
54716: LIST
54717: LIST
54718: LIST
54719: LIST
54720: LIST
54721: LIST
54722: LIST
54723: LIST
54724: LIST
54725: LIST
54726: LIST
54727: LIST
54728: LIST
54729: LIST
54730: LIST
54731: LIST
54732: LIST
54733: LIST
54734: LIST
54735: LIST
54736: LIST
54737: LIST
54738: LIST
54739: LIST
54740: LIST
54741: LIST
54742: LIST
54743: LIST
54744: LIST
54745: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
54746: LD_ADDR_VAR 0 30
54750: PUSH
54751: LD_INT 4
54753: PUSH
54754: LD_INT 4
54756: PUSH
54757: EMPTY
54758: LIST
54759: LIST
54760: PUSH
54761: LD_INT 4
54763: PUSH
54764: LD_INT 3
54766: PUSH
54767: EMPTY
54768: LIST
54769: LIST
54770: PUSH
54771: LD_INT 5
54773: PUSH
54774: LD_INT 4
54776: PUSH
54777: EMPTY
54778: LIST
54779: LIST
54780: PUSH
54781: LD_INT 5
54783: PUSH
54784: LD_INT 5
54786: PUSH
54787: EMPTY
54788: LIST
54789: LIST
54790: PUSH
54791: LD_INT 4
54793: PUSH
54794: LD_INT 5
54796: PUSH
54797: EMPTY
54798: LIST
54799: LIST
54800: PUSH
54801: LD_INT 3
54803: PUSH
54804: LD_INT 4
54806: PUSH
54807: EMPTY
54808: LIST
54809: LIST
54810: PUSH
54811: LD_INT 3
54813: PUSH
54814: LD_INT 3
54816: PUSH
54817: EMPTY
54818: LIST
54819: LIST
54820: PUSH
54821: LD_INT 5
54823: PUSH
54824: LD_INT 3
54826: PUSH
54827: EMPTY
54828: LIST
54829: LIST
54830: PUSH
54831: LD_INT 3
54833: PUSH
54834: LD_INT 5
54836: PUSH
54837: EMPTY
54838: LIST
54839: LIST
54840: PUSH
54841: LD_INT 0
54843: PUSH
54844: LD_INT 3
54846: PUSH
54847: EMPTY
54848: LIST
54849: LIST
54850: PUSH
54851: LD_INT 0
54853: PUSH
54854: LD_INT 2
54856: PUSH
54857: EMPTY
54858: LIST
54859: LIST
54860: PUSH
54861: LD_INT 1
54863: PUSH
54864: LD_INT 3
54866: PUSH
54867: EMPTY
54868: LIST
54869: LIST
54870: PUSH
54871: LD_INT 1
54873: PUSH
54874: LD_INT 4
54876: PUSH
54877: EMPTY
54878: LIST
54879: LIST
54880: PUSH
54881: LD_INT 0
54883: PUSH
54884: LD_INT 4
54886: PUSH
54887: EMPTY
54888: LIST
54889: LIST
54890: PUSH
54891: LD_INT 1
54893: NEG
54894: PUSH
54895: LD_INT 3
54897: PUSH
54898: EMPTY
54899: LIST
54900: LIST
54901: PUSH
54902: LD_INT 1
54904: NEG
54905: PUSH
54906: LD_INT 2
54908: PUSH
54909: EMPTY
54910: LIST
54911: LIST
54912: PUSH
54913: LD_INT 2
54915: PUSH
54916: LD_INT 4
54918: PUSH
54919: EMPTY
54920: LIST
54921: LIST
54922: PUSH
54923: LD_INT 2
54925: NEG
54926: PUSH
54927: LD_INT 2
54929: PUSH
54930: EMPTY
54931: LIST
54932: LIST
54933: PUSH
54934: LD_INT 4
54936: NEG
54937: PUSH
54938: LD_INT 0
54940: PUSH
54941: EMPTY
54942: LIST
54943: LIST
54944: PUSH
54945: LD_INT 4
54947: NEG
54948: PUSH
54949: LD_INT 1
54951: NEG
54952: PUSH
54953: EMPTY
54954: LIST
54955: LIST
54956: PUSH
54957: LD_INT 3
54959: NEG
54960: PUSH
54961: LD_INT 0
54963: PUSH
54964: EMPTY
54965: LIST
54966: LIST
54967: PUSH
54968: LD_INT 3
54970: NEG
54971: PUSH
54972: LD_INT 1
54974: PUSH
54975: EMPTY
54976: LIST
54977: LIST
54978: PUSH
54979: LD_INT 4
54981: NEG
54982: PUSH
54983: LD_INT 1
54985: PUSH
54986: EMPTY
54987: LIST
54988: LIST
54989: PUSH
54990: LD_INT 5
54992: NEG
54993: PUSH
54994: LD_INT 0
54996: PUSH
54997: EMPTY
54998: LIST
54999: LIST
55000: PUSH
55001: LD_INT 5
55003: NEG
55004: PUSH
55005: LD_INT 1
55007: NEG
55008: PUSH
55009: EMPTY
55010: LIST
55011: LIST
55012: PUSH
55013: LD_INT 5
55015: NEG
55016: PUSH
55017: LD_INT 2
55019: NEG
55020: PUSH
55021: EMPTY
55022: LIST
55023: LIST
55024: PUSH
55025: LD_INT 3
55027: NEG
55028: PUSH
55029: LD_INT 2
55031: PUSH
55032: EMPTY
55033: LIST
55034: LIST
55035: PUSH
55036: LD_INT 3
55038: NEG
55039: PUSH
55040: LD_INT 3
55042: NEG
55043: PUSH
55044: EMPTY
55045: LIST
55046: LIST
55047: PUSH
55048: LD_INT 3
55050: NEG
55051: PUSH
55052: LD_INT 4
55054: NEG
55055: PUSH
55056: EMPTY
55057: LIST
55058: LIST
55059: PUSH
55060: LD_INT 2
55062: NEG
55063: PUSH
55064: LD_INT 3
55066: NEG
55067: PUSH
55068: EMPTY
55069: LIST
55070: LIST
55071: PUSH
55072: LD_INT 2
55074: NEG
55075: PUSH
55076: LD_INT 2
55078: NEG
55079: PUSH
55080: EMPTY
55081: LIST
55082: LIST
55083: PUSH
55084: LD_INT 3
55086: NEG
55087: PUSH
55088: LD_INT 2
55090: NEG
55091: PUSH
55092: EMPTY
55093: LIST
55094: LIST
55095: PUSH
55096: LD_INT 4
55098: NEG
55099: PUSH
55100: LD_INT 3
55102: NEG
55103: PUSH
55104: EMPTY
55105: LIST
55106: LIST
55107: PUSH
55108: LD_INT 4
55110: NEG
55111: PUSH
55112: LD_INT 4
55114: NEG
55115: PUSH
55116: EMPTY
55117: LIST
55118: LIST
55119: PUSH
55120: LD_INT 2
55122: NEG
55123: PUSH
55124: LD_INT 4
55126: NEG
55127: PUSH
55128: EMPTY
55129: LIST
55130: LIST
55131: PUSH
55132: LD_INT 4
55134: NEG
55135: PUSH
55136: LD_INT 2
55138: NEG
55139: PUSH
55140: EMPTY
55141: LIST
55142: LIST
55143: PUSH
55144: LD_INT 0
55146: PUSH
55147: LD_INT 4
55149: NEG
55150: PUSH
55151: EMPTY
55152: LIST
55153: LIST
55154: PUSH
55155: LD_INT 0
55157: PUSH
55158: LD_INT 5
55160: NEG
55161: PUSH
55162: EMPTY
55163: LIST
55164: LIST
55165: PUSH
55166: LD_INT 1
55168: PUSH
55169: LD_INT 4
55171: NEG
55172: PUSH
55173: EMPTY
55174: LIST
55175: LIST
55176: PUSH
55177: LD_INT 1
55179: PUSH
55180: LD_INT 3
55182: NEG
55183: PUSH
55184: EMPTY
55185: LIST
55186: LIST
55187: PUSH
55188: LD_INT 0
55190: PUSH
55191: LD_INT 3
55193: NEG
55194: PUSH
55195: EMPTY
55196: LIST
55197: LIST
55198: PUSH
55199: LD_INT 1
55201: NEG
55202: PUSH
55203: LD_INT 4
55205: NEG
55206: PUSH
55207: EMPTY
55208: LIST
55209: LIST
55210: PUSH
55211: LD_INT 1
55213: NEG
55214: PUSH
55215: LD_INT 5
55217: NEG
55218: PUSH
55219: EMPTY
55220: LIST
55221: LIST
55222: PUSH
55223: LD_INT 2
55225: PUSH
55226: LD_INT 3
55228: NEG
55229: PUSH
55230: EMPTY
55231: LIST
55232: LIST
55233: PUSH
55234: LD_INT 2
55236: NEG
55237: PUSH
55238: LD_INT 5
55240: NEG
55241: PUSH
55242: EMPTY
55243: LIST
55244: LIST
55245: PUSH
55246: EMPTY
55247: LIST
55248: LIST
55249: LIST
55250: LIST
55251: LIST
55252: LIST
55253: LIST
55254: LIST
55255: LIST
55256: LIST
55257: LIST
55258: LIST
55259: LIST
55260: LIST
55261: LIST
55262: LIST
55263: LIST
55264: LIST
55265: LIST
55266: LIST
55267: LIST
55268: LIST
55269: LIST
55270: LIST
55271: LIST
55272: LIST
55273: LIST
55274: LIST
55275: LIST
55276: LIST
55277: LIST
55278: LIST
55279: LIST
55280: LIST
55281: LIST
55282: LIST
55283: LIST
55284: LIST
55285: LIST
55286: LIST
55287: LIST
55288: LIST
55289: LIST
55290: LIST
55291: LIST
55292: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
55293: LD_ADDR_VAR 0 31
55297: PUSH
55298: LD_INT 0
55300: PUSH
55301: LD_INT 4
55303: PUSH
55304: EMPTY
55305: LIST
55306: LIST
55307: PUSH
55308: LD_INT 0
55310: PUSH
55311: LD_INT 3
55313: PUSH
55314: EMPTY
55315: LIST
55316: LIST
55317: PUSH
55318: LD_INT 1
55320: PUSH
55321: LD_INT 4
55323: PUSH
55324: EMPTY
55325: LIST
55326: LIST
55327: PUSH
55328: LD_INT 1
55330: PUSH
55331: LD_INT 5
55333: PUSH
55334: EMPTY
55335: LIST
55336: LIST
55337: PUSH
55338: LD_INT 0
55340: PUSH
55341: LD_INT 5
55343: PUSH
55344: EMPTY
55345: LIST
55346: LIST
55347: PUSH
55348: LD_INT 1
55350: NEG
55351: PUSH
55352: LD_INT 4
55354: PUSH
55355: EMPTY
55356: LIST
55357: LIST
55358: PUSH
55359: LD_INT 1
55361: NEG
55362: PUSH
55363: LD_INT 3
55365: PUSH
55366: EMPTY
55367: LIST
55368: LIST
55369: PUSH
55370: LD_INT 2
55372: PUSH
55373: LD_INT 5
55375: PUSH
55376: EMPTY
55377: LIST
55378: LIST
55379: PUSH
55380: LD_INT 2
55382: NEG
55383: PUSH
55384: LD_INT 3
55386: PUSH
55387: EMPTY
55388: LIST
55389: LIST
55390: PUSH
55391: LD_INT 3
55393: NEG
55394: PUSH
55395: LD_INT 0
55397: PUSH
55398: EMPTY
55399: LIST
55400: LIST
55401: PUSH
55402: LD_INT 3
55404: NEG
55405: PUSH
55406: LD_INT 1
55408: NEG
55409: PUSH
55410: EMPTY
55411: LIST
55412: LIST
55413: PUSH
55414: LD_INT 2
55416: NEG
55417: PUSH
55418: LD_INT 0
55420: PUSH
55421: EMPTY
55422: LIST
55423: LIST
55424: PUSH
55425: LD_INT 2
55427: NEG
55428: PUSH
55429: LD_INT 1
55431: PUSH
55432: EMPTY
55433: LIST
55434: LIST
55435: PUSH
55436: LD_INT 3
55438: NEG
55439: PUSH
55440: LD_INT 1
55442: PUSH
55443: EMPTY
55444: LIST
55445: LIST
55446: PUSH
55447: LD_INT 4
55449: NEG
55450: PUSH
55451: LD_INT 0
55453: PUSH
55454: EMPTY
55455: LIST
55456: LIST
55457: PUSH
55458: LD_INT 4
55460: NEG
55461: PUSH
55462: LD_INT 1
55464: NEG
55465: PUSH
55466: EMPTY
55467: LIST
55468: LIST
55469: PUSH
55470: LD_INT 4
55472: NEG
55473: PUSH
55474: LD_INT 2
55476: NEG
55477: PUSH
55478: EMPTY
55479: LIST
55480: LIST
55481: PUSH
55482: LD_INT 2
55484: NEG
55485: PUSH
55486: LD_INT 2
55488: PUSH
55489: EMPTY
55490: LIST
55491: LIST
55492: PUSH
55493: LD_INT 4
55495: NEG
55496: PUSH
55497: LD_INT 4
55499: NEG
55500: PUSH
55501: EMPTY
55502: LIST
55503: LIST
55504: PUSH
55505: LD_INT 4
55507: NEG
55508: PUSH
55509: LD_INT 5
55511: NEG
55512: PUSH
55513: EMPTY
55514: LIST
55515: LIST
55516: PUSH
55517: LD_INT 3
55519: NEG
55520: PUSH
55521: LD_INT 4
55523: NEG
55524: PUSH
55525: EMPTY
55526: LIST
55527: LIST
55528: PUSH
55529: LD_INT 3
55531: NEG
55532: PUSH
55533: LD_INT 3
55535: NEG
55536: PUSH
55537: EMPTY
55538: LIST
55539: LIST
55540: PUSH
55541: LD_INT 4
55543: NEG
55544: PUSH
55545: LD_INT 3
55547: NEG
55548: PUSH
55549: EMPTY
55550: LIST
55551: LIST
55552: PUSH
55553: LD_INT 5
55555: NEG
55556: PUSH
55557: LD_INT 4
55559: NEG
55560: PUSH
55561: EMPTY
55562: LIST
55563: LIST
55564: PUSH
55565: LD_INT 5
55567: NEG
55568: PUSH
55569: LD_INT 5
55571: NEG
55572: PUSH
55573: EMPTY
55574: LIST
55575: LIST
55576: PUSH
55577: LD_INT 3
55579: NEG
55580: PUSH
55581: LD_INT 5
55583: NEG
55584: PUSH
55585: EMPTY
55586: LIST
55587: LIST
55588: PUSH
55589: LD_INT 5
55591: NEG
55592: PUSH
55593: LD_INT 3
55595: NEG
55596: PUSH
55597: EMPTY
55598: LIST
55599: LIST
55600: PUSH
55601: LD_INT 0
55603: PUSH
55604: LD_INT 3
55606: NEG
55607: PUSH
55608: EMPTY
55609: LIST
55610: LIST
55611: PUSH
55612: LD_INT 0
55614: PUSH
55615: LD_INT 4
55617: NEG
55618: PUSH
55619: EMPTY
55620: LIST
55621: LIST
55622: PUSH
55623: LD_INT 1
55625: PUSH
55626: LD_INT 3
55628: NEG
55629: PUSH
55630: EMPTY
55631: LIST
55632: LIST
55633: PUSH
55634: LD_INT 1
55636: PUSH
55637: LD_INT 2
55639: NEG
55640: PUSH
55641: EMPTY
55642: LIST
55643: LIST
55644: PUSH
55645: LD_INT 0
55647: PUSH
55648: LD_INT 2
55650: NEG
55651: PUSH
55652: EMPTY
55653: LIST
55654: LIST
55655: PUSH
55656: LD_INT 1
55658: NEG
55659: PUSH
55660: LD_INT 3
55662: NEG
55663: PUSH
55664: EMPTY
55665: LIST
55666: LIST
55667: PUSH
55668: LD_INT 1
55670: NEG
55671: PUSH
55672: LD_INT 4
55674: NEG
55675: PUSH
55676: EMPTY
55677: LIST
55678: LIST
55679: PUSH
55680: LD_INT 2
55682: PUSH
55683: LD_INT 2
55685: NEG
55686: PUSH
55687: EMPTY
55688: LIST
55689: LIST
55690: PUSH
55691: LD_INT 2
55693: NEG
55694: PUSH
55695: LD_INT 4
55697: NEG
55698: PUSH
55699: EMPTY
55700: LIST
55701: LIST
55702: PUSH
55703: LD_INT 4
55705: PUSH
55706: LD_INT 0
55708: PUSH
55709: EMPTY
55710: LIST
55711: LIST
55712: PUSH
55713: LD_INT 4
55715: PUSH
55716: LD_INT 1
55718: NEG
55719: PUSH
55720: EMPTY
55721: LIST
55722: LIST
55723: PUSH
55724: LD_INT 5
55726: PUSH
55727: LD_INT 0
55729: PUSH
55730: EMPTY
55731: LIST
55732: LIST
55733: PUSH
55734: LD_INT 5
55736: PUSH
55737: LD_INT 1
55739: PUSH
55740: EMPTY
55741: LIST
55742: LIST
55743: PUSH
55744: LD_INT 4
55746: PUSH
55747: LD_INT 1
55749: PUSH
55750: EMPTY
55751: LIST
55752: LIST
55753: PUSH
55754: LD_INT 3
55756: PUSH
55757: LD_INT 0
55759: PUSH
55760: EMPTY
55761: LIST
55762: LIST
55763: PUSH
55764: LD_INT 3
55766: PUSH
55767: LD_INT 1
55769: NEG
55770: PUSH
55771: EMPTY
55772: LIST
55773: LIST
55774: PUSH
55775: LD_INT 3
55777: PUSH
55778: LD_INT 2
55780: NEG
55781: PUSH
55782: EMPTY
55783: LIST
55784: LIST
55785: PUSH
55786: LD_INT 5
55788: PUSH
55789: LD_INT 2
55791: PUSH
55792: EMPTY
55793: LIST
55794: LIST
55795: PUSH
55796: EMPTY
55797: LIST
55798: LIST
55799: LIST
55800: LIST
55801: LIST
55802: LIST
55803: LIST
55804: LIST
55805: LIST
55806: LIST
55807: LIST
55808: LIST
55809: LIST
55810: LIST
55811: LIST
55812: LIST
55813: LIST
55814: LIST
55815: LIST
55816: LIST
55817: LIST
55818: LIST
55819: LIST
55820: LIST
55821: LIST
55822: LIST
55823: LIST
55824: LIST
55825: LIST
55826: LIST
55827: LIST
55828: LIST
55829: LIST
55830: LIST
55831: LIST
55832: LIST
55833: LIST
55834: LIST
55835: LIST
55836: LIST
55837: LIST
55838: LIST
55839: LIST
55840: LIST
55841: LIST
55842: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
55843: LD_ADDR_VAR 0 32
55847: PUSH
55848: LD_INT 4
55850: NEG
55851: PUSH
55852: LD_INT 0
55854: PUSH
55855: EMPTY
55856: LIST
55857: LIST
55858: PUSH
55859: LD_INT 4
55861: NEG
55862: PUSH
55863: LD_INT 1
55865: NEG
55866: PUSH
55867: EMPTY
55868: LIST
55869: LIST
55870: PUSH
55871: LD_INT 3
55873: NEG
55874: PUSH
55875: LD_INT 0
55877: PUSH
55878: EMPTY
55879: LIST
55880: LIST
55881: PUSH
55882: LD_INT 3
55884: NEG
55885: PUSH
55886: LD_INT 1
55888: PUSH
55889: EMPTY
55890: LIST
55891: LIST
55892: PUSH
55893: LD_INT 4
55895: NEG
55896: PUSH
55897: LD_INT 1
55899: PUSH
55900: EMPTY
55901: LIST
55902: LIST
55903: PUSH
55904: LD_INT 5
55906: NEG
55907: PUSH
55908: LD_INT 0
55910: PUSH
55911: EMPTY
55912: LIST
55913: LIST
55914: PUSH
55915: LD_INT 5
55917: NEG
55918: PUSH
55919: LD_INT 1
55921: NEG
55922: PUSH
55923: EMPTY
55924: LIST
55925: LIST
55926: PUSH
55927: LD_INT 5
55929: NEG
55930: PUSH
55931: LD_INT 2
55933: NEG
55934: PUSH
55935: EMPTY
55936: LIST
55937: LIST
55938: PUSH
55939: LD_INT 3
55941: NEG
55942: PUSH
55943: LD_INT 2
55945: PUSH
55946: EMPTY
55947: LIST
55948: LIST
55949: PUSH
55950: LD_INT 3
55952: NEG
55953: PUSH
55954: LD_INT 3
55956: NEG
55957: PUSH
55958: EMPTY
55959: LIST
55960: LIST
55961: PUSH
55962: LD_INT 3
55964: NEG
55965: PUSH
55966: LD_INT 4
55968: NEG
55969: PUSH
55970: EMPTY
55971: LIST
55972: LIST
55973: PUSH
55974: LD_INT 2
55976: NEG
55977: PUSH
55978: LD_INT 3
55980: NEG
55981: PUSH
55982: EMPTY
55983: LIST
55984: LIST
55985: PUSH
55986: LD_INT 2
55988: NEG
55989: PUSH
55990: LD_INT 2
55992: NEG
55993: PUSH
55994: EMPTY
55995: LIST
55996: LIST
55997: PUSH
55998: LD_INT 3
56000: NEG
56001: PUSH
56002: LD_INT 2
56004: NEG
56005: PUSH
56006: EMPTY
56007: LIST
56008: LIST
56009: PUSH
56010: LD_INT 4
56012: NEG
56013: PUSH
56014: LD_INT 3
56016: NEG
56017: PUSH
56018: EMPTY
56019: LIST
56020: LIST
56021: PUSH
56022: LD_INT 4
56024: NEG
56025: PUSH
56026: LD_INT 4
56028: NEG
56029: PUSH
56030: EMPTY
56031: LIST
56032: LIST
56033: PUSH
56034: LD_INT 2
56036: NEG
56037: PUSH
56038: LD_INT 4
56040: NEG
56041: PUSH
56042: EMPTY
56043: LIST
56044: LIST
56045: PUSH
56046: LD_INT 4
56048: NEG
56049: PUSH
56050: LD_INT 2
56052: NEG
56053: PUSH
56054: EMPTY
56055: LIST
56056: LIST
56057: PUSH
56058: LD_INT 0
56060: PUSH
56061: LD_INT 4
56063: NEG
56064: PUSH
56065: EMPTY
56066: LIST
56067: LIST
56068: PUSH
56069: LD_INT 0
56071: PUSH
56072: LD_INT 5
56074: NEG
56075: PUSH
56076: EMPTY
56077: LIST
56078: LIST
56079: PUSH
56080: LD_INT 1
56082: PUSH
56083: LD_INT 4
56085: NEG
56086: PUSH
56087: EMPTY
56088: LIST
56089: LIST
56090: PUSH
56091: LD_INT 1
56093: PUSH
56094: LD_INT 3
56096: NEG
56097: PUSH
56098: EMPTY
56099: LIST
56100: LIST
56101: PUSH
56102: LD_INT 0
56104: PUSH
56105: LD_INT 3
56107: NEG
56108: PUSH
56109: EMPTY
56110: LIST
56111: LIST
56112: PUSH
56113: LD_INT 1
56115: NEG
56116: PUSH
56117: LD_INT 4
56119: NEG
56120: PUSH
56121: EMPTY
56122: LIST
56123: LIST
56124: PUSH
56125: LD_INT 1
56127: NEG
56128: PUSH
56129: LD_INT 5
56131: NEG
56132: PUSH
56133: EMPTY
56134: LIST
56135: LIST
56136: PUSH
56137: LD_INT 2
56139: PUSH
56140: LD_INT 3
56142: NEG
56143: PUSH
56144: EMPTY
56145: LIST
56146: LIST
56147: PUSH
56148: LD_INT 2
56150: NEG
56151: PUSH
56152: LD_INT 5
56154: NEG
56155: PUSH
56156: EMPTY
56157: LIST
56158: LIST
56159: PUSH
56160: LD_INT 3
56162: PUSH
56163: LD_INT 0
56165: PUSH
56166: EMPTY
56167: LIST
56168: LIST
56169: PUSH
56170: LD_INT 3
56172: PUSH
56173: LD_INT 1
56175: NEG
56176: PUSH
56177: EMPTY
56178: LIST
56179: LIST
56180: PUSH
56181: LD_INT 4
56183: PUSH
56184: LD_INT 0
56186: PUSH
56187: EMPTY
56188: LIST
56189: LIST
56190: PUSH
56191: LD_INT 4
56193: PUSH
56194: LD_INT 1
56196: PUSH
56197: EMPTY
56198: LIST
56199: LIST
56200: PUSH
56201: LD_INT 3
56203: PUSH
56204: LD_INT 1
56206: PUSH
56207: EMPTY
56208: LIST
56209: LIST
56210: PUSH
56211: LD_INT 2
56213: PUSH
56214: LD_INT 0
56216: PUSH
56217: EMPTY
56218: LIST
56219: LIST
56220: PUSH
56221: LD_INT 2
56223: PUSH
56224: LD_INT 1
56226: NEG
56227: PUSH
56228: EMPTY
56229: LIST
56230: LIST
56231: PUSH
56232: LD_INT 2
56234: PUSH
56235: LD_INT 2
56237: NEG
56238: PUSH
56239: EMPTY
56240: LIST
56241: LIST
56242: PUSH
56243: LD_INT 4
56245: PUSH
56246: LD_INT 2
56248: PUSH
56249: EMPTY
56250: LIST
56251: LIST
56252: PUSH
56253: LD_INT 4
56255: PUSH
56256: LD_INT 4
56258: PUSH
56259: EMPTY
56260: LIST
56261: LIST
56262: PUSH
56263: LD_INT 4
56265: PUSH
56266: LD_INT 3
56268: PUSH
56269: EMPTY
56270: LIST
56271: LIST
56272: PUSH
56273: LD_INT 5
56275: PUSH
56276: LD_INT 4
56278: PUSH
56279: EMPTY
56280: LIST
56281: LIST
56282: PUSH
56283: LD_INT 5
56285: PUSH
56286: LD_INT 5
56288: PUSH
56289: EMPTY
56290: LIST
56291: LIST
56292: PUSH
56293: LD_INT 4
56295: PUSH
56296: LD_INT 5
56298: PUSH
56299: EMPTY
56300: LIST
56301: LIST
56302: PUSH
56303: LD_INT 3
56305: PUSH
56306: LD_INT 4
56308: PUSH
56309: EMPTY
56310: LIST
56311: LIST
56312: PUSH
56313: LD_INT 3
56315: PUSH
56316: LD_INT 3
56318: PUSH
56319: EMPTY
56320: LIST
56321: LIST
56322: PUSH
56323: LD_INT 5
56325: PUSH
56326: LD_INT 3
56328: PUSH
56329: EMPTY
56330: LIST
56331: LIST
56332: PUSH
56333: LD_INT 3
56335: PUSH
56336: LD_INT 5
56338: PUSH
56339: EMPTY
56340: LIST
56341: LIST
56342: PUSH
56343: EMPTY
56344: LIST
56345: LIST
56346: LIST
56347: LIST
56348: LIST
56349: LIST
56350: LIST
56351: LIST
56352: LIST
56353: LIST
56354: LIST
56355: LIST
56356: LIST
56357: LIST
56358: LIST
56359: LIST
56360: LIST
56361: LIST
56362: LIST
56363: LIST
56364: LIST
56365: LIST
56366: LIST
56367: LIST
56368: LIST
56369: LIST
56370: LIST
56371: LIST
56372: LIST
56373: LIST
56374: LIST
56375: LIST
56376: LIST
56377: LIST
56378: LIST
56379: LIST
56380: LIST
56381: LIST
56382: LIST
56383: LIST
56384: LIST
56385: LIST
56386: LIST
56387: LIST
56388: LIST
56389: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
56390: LD_ADDR_VAR 0 33
56394: PUSH
56395: LD_INT 4
56397: NEG
56398: PUSH
56399: LD_INT 4
56401: NEG
56402: PUSH
56403: EMPTY
56404: LIST
56405: LIST
56406: PUSH
56407: LD_INT 4
56409: NEG
56410: PUSH
56411: LD_INT 5
56413: NEG
56414: PUSH
56415: EMPTY
56416: LIST
56417: LIST
56418: PUSH
56419: LD_INT 3
56421: NEG
56422: PUSH
56423: LD_INT 4
56425: NEG
56426: PUSH
56427: EMPTY
56428: LIST
56429: LIST
56430: PUSH
56431: LD_INT 3
56433: NEG
56434: PUSH
56435: LD_INT 3
56437: NEG
56438: PUSH
56439: EMPTY
56440: LIST
56441: LIST
56442: PUSH
56443: LD_INT 4
56445: NEG
56446: PUSH
56447: LD_INT 3
56449: NEG
56450: PUSH
56451: EMPTY
56452: LIST
56453: LIST
56454: PUSH
56455: LD_INT 5
56457: NEG
56458: PUSH
56459: LD_INT 4
56461: NEG
56462: PUSH
56463: EMPTY
56464: LIST
56465: LIST
56466: PUSH
56467: LD_INT 5
56469: NEG
56470: PUSH
56471: LD_INT 5
56473: NEG
56474: PUSH
56475: EMPTY
56476: LIST
56477: LIST
56478: PUSH
56479: LD_INT 3
56481: NEG
56482: PUSH
56483: LD_INT 5
56485: NEG
56486: PUSH
56487: EMPTY
56488: LIST
56489: LIST
56490: PUSH
56491: LD_INT 5
56493: NEG
56494: PUSH
56495: LD_INT 3
56497: NEG
56498: PUSH
56499: EMPTY
56500: LIST
56501: LIST
56502: PUSH
56503: LD_INT 0
56505: PUSH
56506: LD_INT 3
56508: NEG
56509: PUSH
56510: EMPTY
56511: LIST
56512: LIST
56513: PUSH
56514: LD_INT 0
56516: PUSH
56517: LD_INT 4
56519: NEG
56520: PUSH
56521: EMPTY
56522: LIST
56523: LIST
56524: PUSH
56525: LD_INT 1
56527: PUSH
56528: LD_INT 3
56530: NEG
56531: PUSH
56532: EMPTY
56533: LIST
56534: LIST
56535: PUSH
56536: LD_INT 1
56538: PUSH
56539: LD_INT 2
56541: NEG
56542: PUSH
56543: EMPTY
56544: LIST
56545: LIST
56546: PUSH
56547: LD_INT 0
56549: PUSH
56550: LD_INT 2
56552: NEG
56553: PUSH
56554: EMPTY
56555: LIST
56556: LIST
56557: PUSH
56558: LD_INT 1
56560: NEG
56561: PUSH
56562: LD_INT 3
56564: NEG
56565: PUSH
56566: EMPTY
56567: LIST
56568: LIST
56569: PUSH
56570: LD_INT 1
56572: NEG
56573: PUSH
56574: LD_INT 4
56576: NEG
56577: PUSH
56578: EMPTY
56579: LIST
56580: LIST
56581: PUSH
56582: LD_INT 2
56584: PUSH
56585: LD_INT 2
56587: NEG
56588: PUSH
56589: EMPTY
56590: LIST
56591: LIST
56592: PUSH
56593: LD_INT 2
56595: NEG
56596: PUSH
56597: LD_INT 4
56599: NEG
56600: PUSH
56601: EMPTY
56602: LIST
56603: LIST
56604: PUSH
56605: LD_INT 4
56607: PUSH
56608: LD_INT 0
56610: PUSH
56611: EMPTY
56612: LIST
56613: LIST
56614: PUSH
56615: LD_INT 4
56617: PUSH
56618: LD_INT 1
56620: NEG
56621: PUSH
56622: EMPTY
56623: LIST
56624: LIST
56625: PUSH
56626: LD_INT 5
56628: PUSH
56629: LD_INT 0
56631: PUSH
56632: EMPTY
56633: LIST
56634: LIST
56635: PUSH
56636: LD_INT 5
56638: PUSH
56639: LD_INT 1
56641: PUSH
56642: EMPTY
56643: LIST
56644: LIST
56645: PUSH
56646: LD_INT 4
56648: PUSH
56649: LD_INT 1
56651: PUSH
56652: EMPTY
56653: LIST
56654: LIST
56655: PUSH
56656: LD_INT 3
56658: PUSH
56659: LD_INT 0
56661: PUSH
56662: EMPTY
56663: LIST
56664: LIST
56665: PUSH
56666: LD_INT 3
56668: PUSH
56669: LD_INT 1
56671: NEG
56672: PUSH
56673: EMPTY
56674: LIST
56675: LIST
56676: PUSH
56677: LD_INT 3
56679: PUSH
56680: LD_INT 2
56682: NEG
56683: PUSH
56684: EMPTY
56685: LIST
56686: LIST
56687: PUSH
56688: LD_INT 5
56690: PUSH
56691: LD_INT 2
56693: PUSH
56694: EMPTY
56695: LIST
56696: LIST
56697: PUSH
56698: LD_INT 3
56700: PUSH
56701: LD_INT 3
56703: PUSH
56704: EMPTY
56705: LIST
56706: LIST
56707: PUSH
56708: LD_INT 3
56710: PUSH
56711: LD_INT 2
56713: PUSH
56714: EMPTY
56715: LIST
56716: LIST
56717: PUSH
56718: LD_INT 4
56720: PUSH
56721: LD_INT 3
56723: PUSH
56724: EMPTY
56725: LIST
56726: LIST
56727: PUSH
56728: LD_INT 4
56730: PUSH
56731: LD_INT 4
56733: PUSH
56734: EMPTY
56735: LIST
56736: LIST
56737: PUSH
56738: LD_INT 3
56740: PUSH
56741: LD_INT 4
56743: PUSH
56744: EMPTY
56745: LIST
56746: LIST
56747: PUSH
56748: LD_INT 2
56750: PUSH
56751: LD_INT 3
56753: PUSH
56754: EMPTY
56755: LIST
56756: LIST
56757: PUSH
56758: LD_INT 2
56760: PUSH
56761: LD_INT 2
56763: PUSH
56764: EMPTY
56765: LIST
56766: LIST
56767: PUSH
56768: LD_INT 4
56770: PUSH
56771: LD_INT 2
56773: PUSH
56774: EMPTY
56775: LIST
56776: LIST
56777: PUSH
56778: LD_INT 2
56780: PUSH
56781: LD_INT 4
56783: PUSH
56784: EMPTY
56785: LIST
56786: LIST
56787: PUSH
56788: LD_INT 0
56790: PUSH
56791: LD_INT 4
56793: PUSH
56794: EMPTY
56795: LIST
56796: LIST
56797: PUSH
56798: LD_INT 0
56800: PUSH
56801: LD_INT 3
56803: PUSH
56804: EMPTY
56805: LIST
56806: LIST
56807: PUSH
56808: LD_INT 1
56810: PUSH
56811: LD_INT 4
56813: PUSH
56814: EMPTY
56815: LIST
56816: LIST
56817: PUSH
56818: LD_INT 1
56820: PUSH
56821: LD_INT 5
56823: PUSH
56824: EMPTY
56825: LIST
56826: LIST
56827: PUSH
56828: LD_INT 0
56830: PUSH
56831: LD_INT 5
56833: PUSH
56834: EMPTY
56835: LIST
56836: LIST
56837: PUSH
56838: LD_INT 1
56840: NEG
56841: PUSH
56842: LD_INT 4
56844: PUSH
56845: EMPTY
56846: LIST
56847: LIST
56848: PUSH
56849: LD_INT 1
56851: NEG
56852: PUSH
56853: LD_INT 3
56855: PUSH
56856: EMPTY
56857: LIST
56858: LIST
56859: PUSH
56860: LD_INT 2
56862: PUSH
56863: LD_INT 5
56865: PUSH
56866: EMPTY
56867: LIST
56868: LIST
56869: PUSH
56870: LD_INT 2
56872: NEG
56873: PUSH
56874: LD_INT 3
56876: PUSH
56877: EMPTY
56878: LIST
56879: LIST
56880: PUSH
56881: EMPTY
56882: LIST
56883: LIST
56884: LIST
56885: LIST
56886: LIST
56887: LIST
56888: LIST
56889: LIST
56890: LIST
56891: LIST
56892: LIST
56893: LIST
56894: LIST
56895: LIST
56896: LIST
56897: LIST
56898: LIST
56899: LIST
56900: LIST
56901: LIST
56902: LIST
56903: LIST
56904: LIST
56905: LIST
56906: LIST
56907: LIST
56908: LIST
56909: LIST
56910: LIST
56911: LIST
56912: LIST
56913: LIST
56914: LIST
56915: LIST
56916: LIST
56917: LIST
56918: LIST
56919: LIST
56920: LIST
56921: LIST
56922: LIST
56923: LIST
56924: LIST
56925: LIST
56926: LIST
56927: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
56928: LD_ADDR_VAR 0 34
56932: PUSH
56933: LD_INT 0
56935: PUSH
56936: LD_INT 4
56938: NEG
56939: PUSH
56940: EMPTY
56941: LIST
56942: LIST
56943: PUSH
56944: LD_INT 0
56946: PUSH
56947: LD_INT 5
56949: NEG
56950: PUSH
56951: EMPTY
56952: LIST
56953: LIST
56954: PUSH
56955: LD_INT 1
56957: PUSH
56958: LD_INT 4
56960: NEG
56961: PUSH
56962: EMPTY
56963: LIST
56964: LIST
56965: PUSH
56966: LD_INT 1
56968: PUSH
56969: LD_INT 3
56971: NEG
56972: PUSH
56973: EMPTY
56974: LIST
56975: LIST
56976: PUSH
56977: LD_INT 0
56979: PUSH
56980: LD_INT 3
56982: NEG
56983: PUSH
56984: EMPTY
56985: LIST
56986: LIST
56987: PUSH
56988: LD_INT 1
56990: NEG
56991: PUSH
56992: LD_INT 4
56994: NEG
56995: PUSH
56996: EMPTY
56997: LIST
56998: LIST
56999: PUSH
57000: LD_INT 1
57002: NEG
57003: PUSH
57004: LD_INT 5
57006: NEG
57007: PUSH
57008: EMPTY
57009: LIST
57010: LIST
57011: PUSH
57012: LD_INT 2
57014: PUSH
57015: LD_INT 3
57017: NEG
57018: PUSH
57019: EMPTY
57020: LIST
57021: LIST
57022: PUSH
57023: LD_INT 2
57025: NEG
57026: PUSH
57027: LD_INT 5
57029: NEG
57030: PUSH
57031: EMPTY
57032: LIST
57033: LIST
57034: PUSH
57035: LD_INT 3
57037: PUSH
57038: LD_INT 0
57040: PUSH
57041: EMPTY
57042: LIST
57043: LIST
57044: PUSH
57045: LD_INT 3
57047: PUSH
57048: LD_INT 1
57050: NEG
57051: PUSH
57052: EMPTY
57053: LIST
57054: LIST
57055: PUSH
57056: LD_INT 4
57058: PUSH
57059: LD_INT 0
57061: PUSH
57062: EMPTY
57063: LIST
57064: LIST
57065: PUSH
57066: LD_INT 4
57068: PUSH
57069: LD_INT 1
57071: PUSH
57072: EMPTY
57073: LIST
57074: LIST
57075: PUSH
57076: LD_INT 3
57078: PUSH
57079: LD_INT 1
57081: PUSH
57082: EMPTY
57083: LIST
57084: LIST
57085: PUSH
57086: LD_INT 2
57088: PUSH
57089: LD_INT 0
57091: PUSH
57092: EMPTY
57093: LIST
57094: LIST
57095: PUSH
57096: LD_INT 2
57098: PUSH
57099: LD_INT 1
57101: NEG
57102: PUSH
57103: EMPTY
57104: LIST
57105: LIST
57106: PUSH
57107: LD_INT 2
57109: PUSH
57110: LD_INT 2
57112: NEG
57113: PUSH
57114: EMPTY
57115: LIST
57116: LIST
57117: PUSH
57118: LD_INT 4
57120: PUSH
57121: LD_INT 2
57123: PUSH
57124: EMPTY
57125: LIST
57126: LIST
57127: PUSH
57128: LD_INT 4
57130: PUSH
57131: LD_INT 4
57133: PUSH
57134: EMPTY
57135: LIST
57136: LIST
57137: PUSH
57138: LD_INT 4
57140: PUSH
57141: LD_INT 3
57143: PUSH
57144: EMPTY
57145: LIST
57146: LIST
57147: PUSH
57148: LD_INT 5
57150: PUSH
57151: LD_INT 4
57153: PUSH
57154: EMPTY
57155: LIST
57156: LIST
57157: PUSH
57158: LD_INT 5
57160: PUSH
57161: LD_INT 5
57163: PUSH
57164: EMPTY
57165: LIST
57166: LIST
57167: PUSH
57168: LD_INT 4
57170: PUSH
57171: LD_INT 5
57173: PUSH
57174: EMPTY
57175: LIST
57176: LIST
57177: PUSH
57178: LD_INT 3
57180: PUSH
57181: LD_INT 4
57183: PUSH
57184: EMPTY
57185: LIST
57186: LIST
57187: PUSH
57188: LD_INT 3
57190: PUSH
57191: LD_INT 3
57193: PUSH
57194: EMPTY
57195: LIST
57196: LIST
57197: PUSH
57198: LD_INT 5
57200: PUSH
57201: LD_INT 3
57203: PUSH
57204: EMPTY
57205: LIST
57206: LIST
57207: PUSH
57208: LD_INT 3
57210: PUSH
57211: LD_INT 5
57213: PUSH
57214: EMPTY
57215: LIST
57216: LIST
57217: PUSH
57218: LD_INT 0
57220: PUSH
57221: LD_INT 3
57223: PUSH
57224: EMPTY
57225: LIST
57226: LIST
57227: PUSH
57228: LD_INT 0
57230: PUSH
57231: LD_INT 2
57233: PUSH
57234: EMPTY
57235: LIST
57236: LIST
57237: PUSH
57238: LD_INT 1
57240: PUSH
57241: LD_INT 3
57243: PUSH
57244: EMPTY
57245: LIST
57246: LIST
57247: PUSH
57248: LD_INT 1
57250: PUSH
57251: LD_INT 4
57253: PUSH
57254: EMPTY
57255: LIST
57256: LIST
57257: PUSH
57258: LD_INT 0
57260: PUSH
57261: LD_INT 4
57263: PUSH
57264: EMPTY
57265: LIST
57266: LIST
57267: PUSH
57268: LD_INT 1
57270: NEG
57271: PUSH
57272: LD_INT 3
57274: PUSH
57275: EMPTY
57276: LIST
57277: LIST
57278: PUSH
57279: LD_INT 1
57281: NEG
57282: PUSH
57283: LD_INT 2
57285: PUSH
57286: EMPTY
57287: LIST
57288: LIST
57289: PUSH
57290: LD_INT 2
57292: PUSH
57293: LD_INT 4
57295: PUSH
57296: EMPTY
57297: LIST
57298: LIST
57299: PUSH
57300: LD_INT 2
57302: NEG
57303: PUSH
57304: LD_INT 2
57306: PUSH
57307: EMPTY
57308: LIST
57309: LIST
57310: PUSH
57311: LD_INT 4
57313: NEG
57314: PUSH
57315: LD_INT 0
57317: PUSH
57318: EMPTY
57319: LIST
57320: LIST
57321: PUSH
57322: LD_INT 4
57324: NEG
57325: PUSH
57326: LD_INT 1
57328: NEG
57329: PUSH
57330: EMPTY
57331: LIST
57332: LIST
57333: PUSH
57334: LD_INT 3
57336: NEG
57337: PUSH
57338: LD_INT 0
57340: PUSH
57341: EMPTY
57342: LIST
57343: LIST
57344: PUSH
57345: LD_INT 3
57347: NEG
57348: PUSH
57349: LD_INT 1
57351: PUSH
57352: EMPTY
57353: LIST
57354: LIST
57355: PUSH
57356: LD_INT 4
57358: NEG
57359: PUSH
57360: LD_INT 1
57362: PUSH
57363: EMPTY
57364: LIST
57365: LIST
57366: PUSH
57367: LD_INT 5
57369: NEG
57370: PUSH
57371: LD_INT 0
57373: PUSH
57374: EMPTY
57375: LIST
57376: LIST
57377: PUSH
57378: LD_INT 5
57380: NEG
57381: PUSH
57382: LD_INT 1
57384: NEG
57385: PUSH
57386: EMPTY
57387: LIST
57388: LIST
57389: PUSH
57390: LD_INT 5
57392: NEG
57393: PUSH
57394: LD_INT 2
57396: NEG
57397: PUSH
57398: EMPTY
57399: LIST
57400: LIST
57401: PUSH
57402: LD_INT 3
57404: NEG
57405: PUSH
57406: LD_INT 2
57408: PUSH
57409: EMPTY
57410: LIST
57411: LIST
57412: PUSH
57413: EMPTY
57414: LIST
57415: LIST
57416: LIST
57417: LIST
57418: LIST
57419: LIST
57420: LIST
57421: LIST
57422: LIST
57423: LIST
57424: LIST
57425: LIST
57426: LIST
57427: LIST
57428: LIST
57429: LIST
57430: LIST
57431: LIST
57432: LIST
57433: LIST
57434: LIST
57435: LIST
57436: LIST
57437: LIST
57438: LIST
57439: LIST
57440: LIST
57441: LIST
57442: LIST
57443: LIST
57444: LIST
57445: LIST
57446: LIST
57447: LIST
57448: LIST
57449: LIST
57450: LIST
57451: LIST
57452: LIST
57453: LIST
57454: LIST
57455: LIST
57456: LIST
57457: LIST
57458: LIST
57459: ST_TO_ADDR
// end ; end ;
57460: GO 57463
57462: POP
// case btype of b_depot , b_warehouse :
57463: LD_VAR 0 1
57467: PUSH
57468: LD_INT 0
57470: DOUBLE
57471: EQUAL
57472: IFTRUE 57482
57474: LD_INT 1
57476: DOUBLE
57477: EQUAL
57478: IFTRUE 57482
57480: GO 57683
57482: POP
// case nation of nation_american :
57483: LD_VAR 0 5
57487: PUSH
57488: LD_INT 1
57490: DOUBLE
57491: EQUAL
57492: IFTRUE 57496
57494: GO 57552
57496: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
57497: LD_ADDR_VAR 0 9
57501: PUSH
57502: LD_VAR 0 11
57506: PUSH
57507: LD_VAR 0 12
57511: PUSH
57512: LD_VAR 0 13
57516: PUSH
57517: LD_VAR 0 14
57521: PUSH
57522: LD_VAR 0 15
57526: PUSH
57527: LD_VAR 0 16
57531: PUSH
57532: EMPTY
57533: LIST
57534: LIST
57535: LIST
57536: LIST
57537: LIST
57538: LIST
57539: PUSH
57540: LD_VAR 0 4
57544: PUSH
57545: LD_INT 1
57547: PLUS
57548: ARRAY
57549: ST_TO_ADDR
57550: GO 57681
57552: LD_INT 2
57554: DOUBLE
57555: EQUAL
57556: IFTRUE 57560
57558: GO 57616
57560: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
57561: LD_ADDR_VAR 0 9
57565: PUSH
57566: LD_VAR 0 17
57570: PUSH
57571: LD_VAR 0 18
57575: PUSH
57576: LD_VAR 0 19
57580: PUSH
57581: LD_VAR 0 20
57585: PUSH
57586: LD_VAR 0 21
57590: PUSH
57591: LD_VAR 0 22
57595: PUSH
57596: EMPTY
57597: LIST
57598: LIST
57599: LIST
57600: LIST
57601: LIST
57602: LIST
57603: PUSH
57604: LD_VAR 0 4
57608: PUSH
57609: LD_INT 1
57611: PLUS
57612: ARRAY
57613: ST_TO_ADDR
57614: GO 57681
57616: LD_INT 3
57618: DOUBLE
57619: EQUAL
57620: IFTRUE 57624
57622: GO 57680
57624: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
57625: LD_ADDR_VAR 0 9
57629: PUSH
57630: LD_VAR 0 23
57634: PUSH
57635: LD_VAR 0 24
57639: PUSH
57640: LD_VAR 0 25
57644: PUSH
57645: LD_VAR 0 26
57649: PUSH
57650: LD_VAR 0 27
57654: PUSH
57655: LD_VAR 0 28
57659: PUSH
57660: EMPTY
57661: LIST
57662: LIST
57663: LIST
57664: LIST
57665: LIST
57666: LIST
57667: PUSH
57668: LD_VAR 0 4
57672: PUSH
57673: LD_INT 1
57675: PLUS
57676: ARRAY
57677: ST_TO_ADDR
57678: GO 57681
57680: POP
57681: GO 58236
57683: LD_INT 2
57685: DOUBLE
57686: EQUAL
57687: IFTRUE 57697
57689: LD_INT 3
57691: DOUBLE
57692: EQUAL
57693: IFTRUE 57697
57695: GO 57753
57697: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
57698: LD_ADDR_VAR 0 9
57702: PUSH
57703: LD_VAR 0 29
57707: PUSH
57708: LD_VAR 0 30
57712: PUSH
57713: LD_VAR 0 31
57717: PUSH
57718: LD_VAR 0 32
57722: PUSH
57723: LD_VAR 0 33
57727: PUSH
57728: LD_VAR 0 34
57732: PUSH
57733: EMPTY
57734: LIST
57735: LIST
57736: LIST
57737: LIST
57738: LIST
57739: LIST
57740: PUSH
57741: LD_VAR 0 4
57745: PUSH
57746: LD_INT 1
57748: PLUS
57749: ARRAY
57750: ST_TO_ADDR
57751: GO 58236
57753: LD_INT 16
57755: DOUBLE
57756: EQUAL
57757: IFTRUE 57815
57759: LD_INT 17
57761: DOUBLE
57762: EQUAL
57763: IFTRUE 57815
57765: LD_INT 18
57767: DOUBLE
57768: EQUAL
57769: IFTRUE 57815
57771: LD_INT 19
57773: DOUBLE
57774: EQUAL
57775: IFTRUE 57815
57777: LD_INT 22
57779: DOUBLE
57780: EQUAL
57781: IFTRUE 57815
57783: LD_INT 20
57785: DOUBLE
57786: EQUAL
57787: IFTRUE 57815
57789: LD_INT 21
57791: DOUBLE
57792: EQUAL
57793: IFTRUE 57815
57795: LD_INT 23
57797: DOUBLE
57798: EQUAL
57799: IFTRUE 57815
57801: LD_INT 24
57803: DOUBLE
57804: EQUAL
57805: IFTRUE 57815
57807: LD_INT 25
57809: DOUBLE
57810: EQUAL
57811: IFTRUE 57815
57813: GO 57871
57815: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
57816: LD_ADDR_VAR 0 9
57820: PUSH
57821: LD_VAR 0 35
57825: PUSH
57826: LD_VAR 0 36
57830: PUSH
57831: LD_VAR 0 37
57835: PUSH
57836: LD_VAR 0 38
57840: PUSH
57841: LD_VAR 0 39
57845: PUSH
57846: LD_VAR 0 40
57850: PUSH
57851: EMPTY
57852: LIST
57853: LIST
57854: LIST
57855: LIST
57856: LIST
57857: LIST
57858: PUSH
57859: LD_VAR 0 4
57863: PUSH
57864: LD_INT 1
57866: PLUS
57867: ARRAY
57868: ST_TO_ADDR
57869: GO 58236
57871: LD_INT 6
57873: DOUBLE
57874: EQUAL
57875: IFTRUE 57927
57877: LD_INT 7
57879: DOUBLE
57880: EQUAL
57881: IFTRUE 57927
57883: LD_INT 8
57885: DOUBLE
57886: EQUAL
57887: IFTRUE 57927
57889: LD_INT 13
57891: DOUBLE
57892: EQUAL
57893: IFTRUE 57927
57895: LD_INT 12
57897: DOUBLE
57898: EQUAL
57899: IFTRUE 57927
57901: LD_INT 15
57903: DOUBLE
57904: EQUAL
57905: IFTRUE 57927
57907: LD_INT 11
57909: DOUBLE
57910: EQUAL
57911: IFTRUE 57927
57913: LD_INT 14
57915: DOUBLE
57916: EQUAL
57917: IFTRUE 57927
57919: LD_INT 10
57921: DOUBLE
57922: EQUAL
57923: IFTRUE 57927
57925: GO 57983
57927: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
57928: LD_ADDR_VAR 0 9
57932: PUSH
57933: LD_VAR 0 41
57937: PUSH
57938: LD_VAR 0 42
57942: PUSH
57943: LD_VAR 0 43
57947: PUSH
57948: LD_VAR 0 44
57952: PUSH
57953: LD_VAR 0 45
57957: PUSH
57958: LD_VAR 0 46
57962: PUSH
57963: EMPTY
57964: LIST
57965: LIST
57966: LIST
57967: LIST
57968: LIST
57969: LIST
57970: PUSH
57971: LD_VAR 0 4
57975: PUSH
57976: LD_INT 1
57978: PLUS
57979: ARRAY
57980: ST_TO_ADDR
57981: GO 58236
57983: LD_INT 36
57985: DOUBLE
57986: EQUAL
57987: IFTRUE 57991
57989: GO 58047
57991: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
57992: LD_ADDR_VAR 0 9
57996: PUSH
57997: LD_VAR 0 47
58001: PUSH
58002: LD_VAR 0 48
58006: PUSH
58007: LD_VAR 0 49
58011: PUSH
58012: LD_VAR 0 50
58016: PUSH
58017: LD_VAR 0 51
58021: PUSH
58022: LD_VAR 0 52
58026: PUSH
58027: EMPTY
58028: LIST
58029: LIST
58030: LIST
58031: LIST
58032: LIST
58033: LIST
58034: PUSH
58035: LD_VAR 0 4
58039: PUSH
58040: LD_INT 1
58042: PLUS
58043: ARRAY
58044: ST_TO_ADDR
58045: GO 58236
58047: LD_INT 4
58049: DOUBLE
58050: EQUAL
58051: IFTRUE 58073
58053: LD_INT 5
58055: DOUBLE
58056: EQUAL
58057: IFTRUE 58073
58059: LD_INT 34
58061: DOUBLE
58062: EQUAL
58063: IFTRUE 58073
58065: LD_INT 37
58067: DOUBLE
58068: EQUAL
58069: IFTRUE 58073
58071: GO 58129
58073: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
58074: LD_ADDR_VAR 0 9
58078: PUSH
58079: LD_VAR 0 53
58083: PUSH
58084: LD_VAR 0 54
58088: PUSH
58089: LD_VAR 0 55
58093: PUSH
58094: LD_VAR 0 56
58098: PUSH
58099: LD_VAR 0 57
58103: PUSH
58104: LD_VAR 0 58
58108: PUSH
58109: EMPTY
58110: LIST
58111: LIST
58112: LIST
58113: LIST
58114: LIST
58115: LIST
58116: PUSH
58117: LD_VAR 0 4
58121: PUSH
58122: LD_INT 1
58124: PLUS
58125: ARRAY
58126: ST_TO_ADDR
58127: GO 58236
58129: LD_INT 31
58131: DOUBLE
58132: EQUAL
58133: IFTRUE 58179
58135: LD_INT 32
58137: DOUBLE
58138: EQUAL
58139: IFTRUE 58179
58141: LD_INT 33
58143: DOUBLE
58144: EQUAL
58145: IFTRUE 58179
58147: LD_INT 27
58149: DOUBLE
58150: EQUAL
58151: IFTRUE 58179
58153: LD_INT 26
58155: DOUBLE
58156: EQUAL
58157: IFTRUE 58179
58159: LD_INT 28
58161: DOUBLE
58162: EQUAL
58163: IFTRUE 58179
58165: LD_INT 29
58167: DOUBLE
58168: EQUAL
58169: IFTRUE 58179
58171: LD_INT 30
58173: DOUBLE
58174: EQUAL
58175: IFTRUE 58179
58177: GO 58235
58179: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
58180: LD_ADDR_VAR 0 9
58184: PUSH
58185: LD_VAR 0 59
58189: PUSH
58190: LD_VAR 0 60
58194: PUSH
58195: LD_VAR 0 61
58199: PUSH
58200: LD_VAR 0 62
58204: PUSH
58205: LD_VAR 0 63
58209: PUSH
58210: LD_VAR 0 64
58214: PUSH
58215: EMPTY
58216: LIST
58217: LIST
58218: LIST
58219: LIST
58220: LIST
58221: LIST
58222: PUSH
58223: LD_VAR 0 4
58227: PUSH
58228: LD_INT 1
58230: PLUS
58231: ARRAY
58232: ST_TO_ADDR
58233: GO 58236
58235: POP
// temp_list2 = [ ] ;
58236: LD_ADDR_VAR 0 10
58240: PUSH
58241: EMPTY
58242: ST_TO_ADDR
// for i in temp_list do
58243: LD_ADDR_VAR 0 8
58247: PUSH
58248: LD_VAR 0 9
58252: PUSH
58253: FOR_IN
58254: IFFALSE 58306
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
58256: LD_ADDR_VAR 0 10
58260: PUSH
58261: LD_VAR 0 10
58265: PUSH
58266: LD_VAR 0 8
58270: PUSH
58271: LD_INT 1
58273: ARRAY
58274: PUSH
58275: LD_VAR 0 2
58279: PLUS
58280: PUSH
58281: LD_VAR 0 8
58285: PUSH
58286: LD_INT 2
58288: ARRAY
58289: PUSH
58290: LD_VAR 0 3
58294: PLUS
58295: PUSH
58296: EMPTY
58297: LIST
58298: LIST
58299: PUSH
58300: EMPTY
58301: LIST
58302: ADD
58303: ST_TO_ADDR
58304: GO 58253
58306: POP
58307: POP
// result = temp_list2 ;
58308: LD_ADDR_VAR 0 7
58312: PUSH
58313: LD_VAR 0 10
58317: ST_TO_ADDR
// end ;
58318: LD_VAR 0 7
58322: RET
// export function EnemyInRange ( unit , dist ) ; begin
58323: LD_INT 0
58325: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
58326: LD_ADDR_VAR 0 3
58330: PUSH
58331: LD_VAR 0 1
58335: PPUSH
58336: CALL_OW 255
58340: PPUSH
58341: LD_VAR 0 1
58345: PPUSH
58346: CALL_OW 250
58350: PPUSH
58351: LD_VAR 0 1
58355: PPUSH
58356: CALL_OW 251
58360: PPUSH
58361: LD_VAR 0 2
58365: PPUSH
58366: CALL 31719 0 4
58370: PUSH
58371: LD_INT 4
58373: ARRAY
58374: ST_TO_ADDR
// end ;
58375: LD_VAR 0 3
58379: RET
// export function PlayerSeeMe ( unit ) ; begin
58380: LD_INT 0
58382: PPUSH
// result := See ( your_side , unit ) ;
58383: LD_ADDR_VAR 0 2
58387: PUSH
58388: LD_OWVAR 2
58392: PPUSH
58393: LD_VAR 0 1
58397: PPUSH
58398: CALL_OW 292
58402: ST_TO_ADDR
// end ;
58403: LD_VAR 0 2
58407: RET
// export function ReverseDir ( unit ) ; begin
58408: LD_INT 0
58410: PPUSH
// if not unit then
58411: LD_VAR 0 1
58415: NOT
58416: IFFALSE 58420
// exit ;
58418: GO 58443
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
58420: LD_ADDR_VAR 0 2
58424: PUSH
58425: LD_VAR 0 1
58429: PPUSH
58430: CALL_OW 254
58434: PUSH
58435: LD_INT 3
58437: PLUS
58438: PUSH
58439: LD_INT 6
58441: MOD
58442: ST_TO_ADDR
// end ;
58443: LD_VAR 0 2
58447: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
58448: LD_INT 0
58450: PPUSH
58451: PPUSH
58452: PPUSH
58453: PPUSH
58454: PPUSH
// if not hexes then
58455: LD_VAR 0 2
58459: NOT
58460: IFFALSE 58464
// exit ;
58462: GO 58612
// dist := 9999 ;
58464: LD_ADDR_VAR 0 5
58468: PUSH
58469: LD_INT 9999
58471: ST_TO_ADDR
// for i = 1 to hexes do
58472: LD_ADDR_VAR 0 4
58476: PUSH
58477: DOUBLE
58478: LD_INT 1
58480: DEC
58481: ST_TO_ADDR
58482: LD_VAR 0 2
58486: PUSH
58487: FOR_TO
58488: IFFALSE 58600
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
58490: LD_VAR 0 1
58494: PPUSH
58495: LD_VAR 0 2
58499: PUSH
58500: LD_VAR 0 4
58504: ARRAY
58505: PUSH
58506: LD_INT 1
58508: ARRAY
58509: PPUSH
58510: LD_VAR 0 2
58514: PUSH
58515: LD_VAR 0 4
58519: ARRAY
58520: PUSH
58521: LD_INT 2
58523: ARRAY
58524: PPUSH
58525: CALL_OW 297
58529: PUSH
58530: LD_VAR 0 5
58534: LESS
58535: IFFALSE 58598
// begin hex := hexes [ i ] ;
58537: LD_ADDR_VAR 0 7
58541: PUSH
58542: LD_VAR 0 2
58546: PUSH
58547: LD_VAR 0 4
58551: ARRAY
58552: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
58553: LD_ADDR_VAR 0 5
58557: PUSH
58558: LD_VAR 0 1
58562: PPUSH
58563: LD_VAR 0 2
58567: PUSH
58568: LD_VAR 0 4
58572: ARRAY
58573: PUSH
58574: LD_INT 1
58576: ARRAY
58577: PPUSH
58578: LD_VAR 0 2
58582: PUSH
58583: LD_VAR 0 4
58587: ARRAY
58588: PUSH
58589: LD_INT 2
58591: ARRAY
58592: PPUSH
58593: CALL_OW 297
58597: ST_TO_ADDR
// end ; end ;
58598: GO 58487
58600: POP
58601: POP
// result := hex ;
58602: LD_ADDR_VAR 0 3
58606: PUSH
58607: LD_VAR 0 7
58611: ST_TO_ADDR
// end ;
58612: LD_VAR 0 3
58616: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
58617: LD_INT 0
58619: PPUSH
58620: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
58621: LD_VAR 0 1
58625: NOT
58626: PUSH
58627: LD_VAR 0 1
58631: PUSH
58632: LD_INT 21
58634: PUSH
58635: LD_INT 2
58637: PUSH
58638: EMPTY
58639: LIST
58640: LIST
58641: PUSH
58642: LD_INT 23
58644: PUSH
58645: LD_INT 2
58647: PUSH
58648: EMPTY
58649: LIST
58650: LIST
58651: PUSH
58652: EMPTY
58653: LIST
58654: LIST
58655: PPUSH
58656: CALL_OW 69
58660: IN
58661: NOT
58662: OR
58663: IFFALSE 58667
// exit ;
58665: GO 58714
// for i = 1 to 3 do
58667: LD_ADDR_VAR 0 3
58671: PUSH
58672: DOUBLE
58673: LD_INT 1
58675: DEC
58676: ST_TO_ADDR
58677: LD_INT 3
58679: PUSH
58680: FOR_TO
58681: IFFALSE 58712
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
58683: LD_VAR 0 1
58687: PPUSH
58688: CALL_OW 250
58692: PPUSH
58693: LD_VAR 0 1
58697: PPUSH
58698: CALL_OW 251
58702: PPUSH
58703: LD_INT 1
58705: PPUSH
58706: CALL_OW 453
58710: GO 58680
58712: POP
58713: POP
// end ;
58714: LD_VAR 0 2
58718: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
58719: LD_INT 0
58721: PPUSH
58722: PPUSH
58723: PPUSH
58724: PPUSH
58725: PPUSH
58726: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
58727: LD_VAR 0 1
58731: NOT
58732: PUSH
58733: LD_VAR 0 2
58737: NOT
58738: OR
58739: PUSH
58740: LD_VAR 0 1
58744: PPUSH
58745: CALL_OW 314
58749: OR
58750: IFFALSE 58754
// exit ;
58752: GO 59195
// x := GetX ( enemy_unit ) ;
58754: LD_ADDR_VAR 0 7
58758: PUSH
58759: LD_VAR 0 2
58763: PPUSH
58764: CALL_OW 250
58768: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
58769: LD_ADDR_VAR 0 8
58773: PUSH
58774: LD_VAR 0 2
58778: PPUSH
58779: CALL_OW 251
58783: ST_TO_ADDR
// if not x or not y then
58784: LD_VAR 0 7
58788: NOT
58789: PUSH
58790: LD_VAR 0 8
58794: NOT
58795: OR
58796: IFFALSE 58800
// exit ;
58798: GO 59195
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
58800: LD_ADDR_VAR 0 6
58804: PUSH
58805: LD_VAR 0 7
58809: PPUSH
58810: LD_INT 0
58812: PPUSH
58813: LD_INT 4
58815: PPUSH
58816: CALL_OW 272
58820: PUSH
58821: LD_VAR 0 8
58825: PPUSH
58826: LD_INT 0
58828: PPUSH
58829: LD_INT 4
58831: PPUSH
58832: CALL_OW 273
58836: PUSH
58837: EMPTY
58838: LIST
58839: LIST
58840: PUSH
58841: LD_VAR 0 7
58845: PPUSH
58846: LD_INT 1
58848: PPUSH
58849: LD_INT 4
58851: PPUSH
58852: CALL_OW 272
58856: PUSH
58857: LD_VAR 0 8
58861: PPUSH
58862: LD_INT 1
58864: PPUSH
58865: LD_INT 4
58867: PPUSH
58868: CALL_OW 273
58872: PUSH
58873: EMPTY
58874: LIST
58875: LIST
58876: PUSH
58877: LD_VAR 0 7
58881: PPUSH
58882: LD_INT 2
58884: PPUSH
58885: LD_INT 4
58887: PPUSH
58888: CALL_OW 272
58892: PUSH
58893: LD_VAR 0 8
58897: PPUSH
58898: LD_INT 2
58900: PPUSH
58901: LD_INT 4
58903: PPUSH
58904: CALL_OW 273
58908: PUSH
58909: EMPTY
58910: LIST
58911: LIST
58912: PUSH
58913: LD_VAR 0 7
58917: PPUSH
58918: LD_INT 3
58920: PPUSH
58921: LD_INT 4
58923: PPUSH
58924: CALL_OW 272
58928: PUSH
58929: LD_VAR 0 8
58933: PPUSH
58934: LD_INT 3
58936: PPUSH
58937: LD_INT 4
58939: PPUSH
58940: CALL_OW 273
58944: PUSH
58945: EMPTY
58946: LIST
58947: LIST
58948: PUSH
58949: LD_VAR 0 7
58953: PPUSH
58954: LD_INT 4
58956: PPUSH
58957: LD_INT 4
58959: PPUSH
58960: CALL_OW 272
58964: PUSH
58965: LD_VAR 0 8
58969: PPUSH
58970: LD_INT 4
58972: PPUSH
58973: LD_INT 4
58975: PPUSH
58976: CALL_OW 273
58980: PUSH
58981: EMPTY
58982: LIST
58983: LIST
58984: PUSH
58985: LD_VAR 0 7
58989: PPUSH
58990: LD_INT 5
58992: PPUSH
58993: LD_INT 4
58995: PPUSH
58996: CALL_OW 272
59000: PUSH
59001: LD_VAR 0 8
59005: PPUSH
59006: LD_INT 5
59008: PPUSH
59009: LD_INT 4
59011: PPUSH
59012: CALL_OW 273
59016: PUSH
59017: EMPTY
59018: LIST
59019: LIST
59020: PUSH
59021: EMPTY
59022: LIST
59023: LIST
59024: LIST
59025: LIST
59026: LIST
59027: LIST
59028: ST_TO_ADDR
// for i = tmp downto 1 do
59029: LD_ADDR_VAR 0 4
59033: PUSH
59034: DOUBLE
59035: LD_VAR 0 6
59039: INC
59040: ST_TO_ADDR
59041: LD_INT 1
59043: PUSH
59044: FOR_DOWNTO
59045: IFFALSE 59146
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
59047: LD_VAR 0 6
59051: PUSH
59052: LD_VAR 0 4
59056: ARRAY
59057: PUSH
59058: LD_INT 1
59060: ARRAY
59061: PPUSH
59062: LD_VAR 0 6
59066: PUSH
59067: LD_VAR 0 4
59071: ARRAY
59072: PUSH
59073: LD_INT 2
59075: ARRAY
59076: PPUSH
59077: CALL_OW 488
59081: NOT
59082: PUSH
59083: LD_VAR 0 6
59087: PUSH
59088: LD_VAR 0 4
59092: ARRAY
59093: PUSH
59094: LD_INT 1
59096: ARRAY
59097: PPUSH
59098: LD_VAR 0 6
59102: PUSH
59103: LD_VAR 0 4
59107: ARRAY
59108: PUSH
59109: LD_INT 2
59111: ARRAY
59112: PPUSH
59113: CALL_OW 428
59117: PUSH
59118: LD_INT 0
59120: NONEQUAL
59121: OR
59122: IFFALSE 59144
// tmp := Delete ( tmp , i ) ;
59124: LD_ADDR_VAR 0 6
59128: PUSH
59129: LD_VAR 0 6
59133: PPUSH
59134: LD_VAR 0 4
59138: PPUSH
59139: CALL_OW 3
59143: ST_TO_ADDR
59144: GO 59044
59146: POP
59147: POP
// j := GetClosestHex ( unit , tmp ) ;
59148: LD_ADDR_VAR 0 5
59152: PUSH
59153: LD_VAR 0 1
59157: PPUSH
59158: LD_VAR 0 6
59162: PPUSH
59163: CALL 58448 0 2
59167: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
59168: LD_VAR 0 1
59172: PPUSH
59173: LD_VAR 0 5
59177: PUSH
59178: LD_INT 1
59180: ARRAY
59181: PPUSH
59182: LD_VAR 0 5
59186: PUSH
59187: LD_INT 2
59189: ARRAY
59190: PPUSH
59191: CALL_OW 111
// end ;
59195: LD_VAR 0 3
59199: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
59200: LD_INT 0
59202: PPUSH
59203: PPUSH
59204: PPUSH
// uc_side = 0 ;
59205: LD_ADDR_OWVAR 20
59209: PUSH
59210: LD_INT 0
59212: ST_TO_ADDR
// uc_nation = 0 ;
59213: LD_ADDR_OWVAR 21
59217: PUSH
59218: LD_INT 0
59220: ST_TO_ADDR
// InitHc_All ( ) ;
59221: CALL_OW 584
// InitVc ;
59225: CALL_OW 20
// if mastodonts then
59229: LD_VAR 0 6
59233: IFFALSE 59300
// for i = 1 to mastodonts do
59235: LD_ADDR_VAR 0 11
59239: PUSH
59240: DOUBLE
59241: LD_INT 1
59243: DEC
59244: ST_TO_ADDR
59245: LD_VAR 0 6
59249: PUSH
59250: FOR_TO
59251: IFFALSE 59298
// begin vc_chassis := 31 ;
59253: LD_ADDR_OWVAR 37
59257: PUSH
59258: LD_INT 31
59260: ST_TO_ADDR
// vc_control := control_rider ;
59261: LD_ADDR_OWVAR 38
59265: PUSH
59266: LD_INT 4
59268: ST_TO_ADDR
// animal := CreateVehicle ;
59269: LD_ADDR_VAR 0 12
59273: PUSH
59274: CALL_OW 45
59278: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59279: LD_VAR 0 12
59283: PPUSH
59284: LD_VAR 0 8
59288: PPUSH
59289: LD_INT 0
59291: PPUSH
59292: CALL 61488 0 3
// end ;
59296: GO 59250
59298: POP
59299: POP
// if horses then
59300: LD_VAR 0 5
59304: IFFALSE 59371
// for i = 1 to horses do
59306: LD_ADDR_VAR 0 11
59310: PUSH
59311: DOUBLE
59312: LD_INT 1
59314: DEC
59315: ST_TO_ADDR
59316: LD_VAR 0 5
59320: PUSH
59321: FOR_TO
59322: IFFALSE 59369
// begin hc_class := 21 ;
59324: LD_ADDR_OWVAR 28
59328: PUSH
59329: LD_INT 21
59331: ST_TO_ADDR
// hc_gallery :=  ;
59332: LD_ADDR_OWVAR 33
59336: PUSH
59337: LD_STRING 
59339: ST_TO_ADDR
// animal := CreateHuman ;
59340: LD_ADDR_VAR 0 12
59344: PUSH
59345: CALL_OW 44
59349: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59350: LD_VAR 0 12
59354: PPUSH
59355: LD_VAR 0 8
59359: PPUSH
59360: LD_INT 0
59362: PPUSH
59363: CALL 61488 0 3
// end ;
59367: GO 59321
59369: POP
59370: POP
// if birds then
59371: LD_VAR 0 1
59375: IFFALSE 59442
// for i = 1 to birds do
59377: LD_ADDR_VAR 0 11
59381: PUSH
59382: DOUBLE
59383: LD_INT 1
59385: DEC
59386: ST_TO_ADDR
59387: LD_VAR 0 1
59391: PUSH
59392: FOR_TO
59393: IFFALSE 59440
// begin hc_class = 18 ;
59395: LD_ADDR_OWVAR 28
59399: PUSH
59400: LD_INT 18
59402: ST_TO_ADDR
// hc_gallery =  ;
59403: LD_ADDR_OWVAR 33
59407: PUSH
59408: LD_STRING 
59410: ST_TO_ADDR
// animal := CreateHuman ;
59411: LD_ADDR_VAR 0 12
59415: PUSH
59416: CALL_OW 44
59420: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59421: LD_VAR 0 12
59425: PPUSH
59426: LD_VAR 0 8
59430: PPUSH
59431: LD_INT 0
59433: PPUSH
59434: CALL 61488 0 3
// end ;
59438: GO 59392
59440: POP
59441: POP
// if tigers then
59442: LD_VAR 0 2
59446: IFFALSE 59530
// for i = 1 to tigers do
59448: LD_ADDR_VAR 0 11
59452: PUSH
59453: DOUBLE
59454: LD_INT 1
59456: DEC
59457: ST_TO_ADDR
59458: LD_VAR 0 2
59462: PUSH
59463: FOR_TO
59464: IFFALSE 59528
// begin hc_class = class_tiger ;
59466: LD_ADDR_OWVAR 28
59470: PUSH
59471: LD_INT 14
59473: ST_TO_ADDR
// hc_gallery =  ;
59474: LD_ADDR_OWVAR 33
59478: PUSH
59479: LD_STRING 
59481: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
59482: LD_ADDR_OWVAR 35
59486: PUSH
59487: LD_INT 7
59489: NEG
59490: PPUSH
59491: LD_INT 7
59493: PPUSH
59494: CALL_OW 12
59498: ST_TO_ADDR
// animal := CreateHuman ;
59499: LD_ADDR_VAR 0 12
59503: PUSH
59504: CALL_OW 44
59508: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59509: LD_VAR 0 12
59513: PPUSH
59514: LD_VAR 0 8
59518: PPUSH
59519: LD_INT 0
59521: PPUSH
59522: CALL 61488 0 3
// end ;
59526: GO 59463
59528: POP
59529: POP
// if apemans then
59530: LD_VAR 0 3
59534: IFFALSE 59657
// for i = 1 to apemans do
59536: LD_ADDR_VAR 0 11
59540: PUSH
59541: DOUBLE
59542: LD_INT 1
59544: DEC
59545: ST_TO_ADDR
59546: LD_VAR 0 3
59550: PUSH
59551: FOR_TO
59552: IFFALSE 59655
// begin hc_class = class_apeman ;
59554: LD_ADDR_OWVAR 28
59558: PUSH
59559: LD_INT 12
59561: ST_TO_ADDR
// hc_gallery =  ;
59562: LD_ADDR_OWVAR 33
59566: PUSH
59567: LD_STRING 
59569: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
59570: LD_ADDR_OWVAR 35
59574: PUSH
59575: LD_INT 2
59577: NEG
59578: PPUSH
59579: LD_INT 2
59581: PPUSH
59582: CALL_OW 12
59586: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
59587: LD_ADDR_OWVAR 31
59591: PUSH
59592: LD_INT 1
59594: PPUSH
59595: LD_INT 3
59597: PPUSH
59598: CALL_OW 12
59602: PUSH
59603: LD_INT 1
59605: PPUSH
59606: LD_INT 3
59608: PPUSH
59609: CALL_OW 12
59613: PUSH
59614: LD_INT 0
59616: PUSH
59617: LD_INT 0
59619: PUSH
59620: EMPTY
59621: LIST
59622: LIST
59623: LIST
59624: LIST
59625: ST_TO_ADDR
// animal := CreateHuman ;
59626: LD_ADDR_VAR 0 12
59630: PUSH
59631: CALL_OW 44
59635: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59636: LD_VAR 0 12
59640: PPUSH
59641: LD_VAR 0 8
59645: PPUSH
59646: LD_INT 0
59648: PPUSH
59649: CALL 61488 0 3
// end ;
59653: GO 59551
59655: POP
59656: POP
// if enchidnas then
59657: LD_VAR 0 4
59661: IFFALSE 59728
// for i = 1 to enchidnas do
59663: LD_ADDR_VAR 0 11
59667: PUSH
59668: DOUBLE
59669: LD_INT 1
59671: DEC
59672: ST_TO_ADDR
59673: LD_VAR 0 4
59677: PUSH
59678: FOR_TO
59679: IFFALSE 59726
// begin hc_class = 13 ;
59681: LD_ADDR_OWVAR 28
59685: PUSH
59686: LD_INT 13
59688: ST_TO_ADDR
// hc_gallery =  ;
59689: LD_ADDR_OWVAR 33
59693: PUSH
59694: LD_STRING 
59696: ST_TO_ADDR
// animal := CreateHuman ;
59697: LD_ADDR_VAR 0 12
59701: PUSH
59702: CALL_OW 44
59706: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59707: LD_VAR 0 12
59711: PPUSH
59712: LD_VAR 0 8
59716: PPUSH
59717: LD_INT 0
59719: PPUSH
59720: CALL 61488 0 3
// end ;
59724: GO 59678
59726: POP
59727: POP
// if fishes then
59728: LD_VAR 0 7
59732: IFFALSE 59799
// for i = 1 to fishes do
59734: LD_ADDR_VAR 0 11
59738: PUSH
59739: DOUBLE
59740: LD_INT 1
59742: DEC
59743: ST_TO_ADDR
59744: LD_VAR 0 7
59748: PUSH
59749: FOR_TO
59750: IFFALSE 59797
// begin hc_class = 20 ;
59752: LD_ADDR_OWVAR 28
59756: PUSH
59757: LD_INT 20
59759: ST_TO_ADDR
// hc_gallery =  ;
59760: LD_ADDR_OWVAR 33
59764: PUSH
59765: LD_STRING 
59767: ST_TO_ADDR
// animal := CreateHuman ;
59768: LD_ADDR_VAR 0 12
59772: PUSH
59773: CALL_OW 44
59777: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
59778: LD_VAR 0 12
59782: PPUSH
59783: LD_VAR 0 9
59787: PPUSH
59788: LD_INT 0
59790: PPUSH
59791: CALL 61488 0 3
// end ;
59795: GO 59749
59797: POP
59798: POP
// end ;
59799: LD_VAR 0 10
59803: RET
// export function WantHeal ( sci , unit ) ; begin
59804: LD_INT 0
59806: PPUSH
// if GetTaskList ( sci ) > 0 then
59807: LD_VAR 0 1
59811: PPUSH
59812: CALL_OW 437
59816: PUSH
59817: LD_INT 0
59819: GREATER
59820: IFFALSE 59890
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
59822: LD_VAR 0 1
59826: PPUSH
59827: CALL_OW 437
59831: PUSH
59832: LD_INT 1
59834: ARRAY
59835: PUSH
59836: LD_INT 1
59838: ARRAY
59839: PUSH
59840: LD_STRING l
59842: EQUAL
59843: PUSH
59844: LD_VAR 0 1
59848: PPUSH
59849: CALL_OW 437
59853: PUSH
59854: LD_INT 1
59856: ARRAY
59857: PUSH
59858: LD_INT 4
59860: ARRAY
59861: PUSH
59862: LD_VAR 0 2
59866: EQUAL
59867: AND
59868: IFFALSE 59880
// result := true else
59870: LD_ADDR_VAR 0 3
59874: PUSH
59875: LD_INT 1
59877: ST_TO_ADDR
59878: GO 59888
// result := false ;
59880: LD_ADDR_VAR 0 3
59884: PUSH
59885: LD_INT 0
59887: ST_TO_ADDR
// end else
59888: GO 59898
// result := false ;
59890: LD_ADDR_VAR 0 3
59894: PUSH
59895: LD_INT 0
59897: ST_TO_ADDR
// end ;
59898: LD_VAR 0 3
59902: RET
// export function HealTarget ( sci ) ; begin
59903: LD_INT 0
59905: PPUSH
// if not sci then
59906: LD_VAR 0 1
59910: NOT
59911: IFFALSE 59915
// exit ;
59913: GO 59980
// result := 0 ;
59915: LD_ADDR_VAR 0 2
59919: PUSH
59920: LD_INT 0
59922: ST_TO_ADDR
// if GetTaskList ( sci ) then
59923: LD_VAR 0 1
59927: PPUSH
59928: CALL_OW 437
59932: IFFALSE 59980
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
59934: LD_VAR 0 1
59938: PPUSH
59939: CALL_OW 437
59943: PUSH
59944: LD_INT 1
59946: ARRAY
59947: PUSH
59948: LD_INT 1
59950: ARRAY
59951: PUSH
59952: LD_STRING l
59954: EQUAL
59955: IFFALSE 59980
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
59957: LD_ADDR_VAR 0 2
59961: PUSH
59962: LD_VAR 0 1
59966: PPUSH
59967: CALL_OW 437
59971: PUSH
59972: LD_INT 1
59974: ARRAY
59975: PUSH
59976: LD_INT 4
59978: ARRAY
59979: ST_TO_ADDR
// end ;
59980: LD_VAR 0 2
59984: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
59985: LD_INT 0
59987: PPUSH
59988: PPUSH
59989: PPUSH
59990: PPUSH
// if not base_units then
59991: LD_VAR 0 1
59995: NOT
59996: IFFALSE 60000
// exit ;
59998: GO 60087
// result := false ;
60000: LD_ADDR_VAR 0 2
60004: PUSH
60005: LD_INT 0
60007: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
60008: LD_ADDR_VAR 0 5
60012: PUSH
60013: LD_VAR 0 1
60017: PPUSH
60018: LD_INT 21
60020: PUSH
60021: LD_INT 3
60023: PUSH
60024: EMPTY
60025: LIST
60026: LIST
60027: PPUSH
60028: CALL_OW 72
60032: ST_TO_ADDR
// if not tmp then
60033: LD_VAR 0 5
60037: NOT
60038: IFFALSE 60042
// exit ;
60040: GO 60087
// for i in tmp do
60042: LD_ADDR_VAR 0 3
60046: PUSH
60047: LD_VAR 0 5
60051: PUSH
60052: FOR_IN
60053: IFFALSE 60085
// begin result := EnemyInRange ( i , 22 ) ;
60055: LD_ADDR_VAR 0 2
60059: PUSH
60060: LD_VAR 0 3
60064: PPUSH
60065: LD_INT 22
60067: PPUSH
60068: CALL 58323 0 2
60072: ST_TO_ADDR
// if result then
60073: LD_VAR 0 2
60077: IFFALSE 60083
// exit ;
60079: POP
60080: POP
60081: GO 60087
// end ;
60083: GO 60052
60085: POP
60086: POP
// end ;
60087: LD_VAR 0 2
60091: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
60092: LD_INT 0
60094: PPUSH
60095: PPUSH
// if not units then
60096: LD_VAR 0 1
60100: NOT
60101: IFFALSE 60105
// exit ;
60103: GO 60175
// result := [ ] ;
60105: LD_ADDR_VAR 0 3
60109: PUSH
60110: EMPTY
60111: ST_TO_ADDR
// for i in units do
60112: LD_ADDR_VAR 0 4
60116: PUSH
60117: LD_VAR 0 1
60121: PUSH
60122: FOR_IN
60123: IFFALSE 60173
// if GetTag ( i ) = tag then
60125: LD_VAR 0 4
60129: PPUSH
60130: CALL_OW 110
60134: PUSH
60135: LD_VAR 0 2
60139: EQUAL
60140: IFFALSE 60171
// result := Replace ( result , result + 1 , i ) ;
60142: LD_ADDR_VAR 0 3
60146: PUSH
60147: LD_VAR 0 3
60151: PPUSH
60152: LD_VAR 0 3
60156: PUSH
60157: LD_INT 1
60159: PLUS
60160: PPUSH
60161: LD_VAR 0 4
60165: PPUSH
60166: CALL_OW 1
60170: ST_TO_ADDR
60171: GO 60122
60173: POP
60174: POP
// end ;
60175: LD_VAR 0 3
60179: RET
// export function IsDriver ( un ) ; begin
60180: LD_INT 0
60182: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
60183: LD_ADDR_VAR 0 2
60187: PUSH
60188: LD_VAR 0 1
60192: PUSH
60193: LD_INT 55
60195: PUSH
60196: EMPTY
60197: LIST
60198: PPUSH
60199: CALL_OW 69
60203: IN
60204: ST_TO_ADDR
// end ;
60205: LD_VAR 0 2
60209: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
60210: LD_INT 0
60212: PPUSH
60213: PPUSH
// list := [ ] ;
60214: LD_ADDR_VAR 0 5
60218: PUSH
60219: EMPTY
60220: ST_TO_ADDR
// case d of 0 :
60221: LD_VAR 0 3
60225: PUSH
60226: LD_INT 0
60228: DOUBLE
60229: EQUAL
60230: IFTRUE 60234
60232: GO 60367
60234: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
60235: LD_ADDR_VAR 0 5
60239: PUSH
60240: LD_VAR 0 1
60244: PUSH
60245: LD_INT 4
60247: MINUS
60248: PUSH
60249: LD_VAR 0 2
60253: PUSH
60254: LD_INT 4
60256: MINUS
60257: PUSH
60258: LD_INT 2
60260: PUSH
60261: EMPTY
60262: LIST
60263: LIST
60264: LIST
60265: PUSH
60266: LD_VAR 0 1
60270: PUSH
60271: LD_INT 3
60273: MINUS
60274: PUSH
60275: LD_VAR 0 2
60279: PUSH
60280: LD_INT 1
60282: PUSH
60283: EMPTY
60284: LIST
60285: LIST
60286: LIST
60287: PUSH
60288: LD_VAR 0 1
60292: PUSH
60293: LD_INT 4
60295: PLUS
60296: PUSH
60297: LD_VAR 0 2
60301: PUSH
60302: LD_INT 4
60304: PUSH
60305: EMPTY
60306: LIST
60307: LIST
60308: LIST
60309: PUSH
60310: LD_VAR 0 1
60314: PUSH
60315: LD_INT 3
60317: PLUS
60318: PUSH
60319: LD_VAR 0 2
60323: PUSH
60324: LD_INT 3
60326: PLUS
60327: PUSH
60328: LD_INT 5
60330: PUSH
60331: EMPTY
60332: LIST
60333: LIST
60334: LIST
60335: PUSH
60336: LD_VAR 0 1
60340: PUSH
60341: LD_VAR 0 2
60345: PUSH
60346: LD_INT 4
60348: PLUS
60349: PUSH
60350: LD_INT 0
60352: PUSH
60353: EMPTY
60354: LIST
60355: LIST
60356: LIST
60357: PUSH
60358: EMPTY
60359: LIST
60360: LIST
60361: LIST
60362: LIST
60363: LIST
60364: ST_TO_ADDR
// end ; 1 :
60365: GO 61065
60367: LD_INT 1
60369: DOUBLE
60370: EQUAL
60371: IFTRUE 60375
60373: GO 60508
60375: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
60376: LD_ADDR_VAR 0 5
60380: PUSH
60381: LD_VAR 0 1
60385: PUSH
60386: LD_VAR 0 2
60390: PUSH
60391: LD_INT 4
60393: MINUS
60394: PUSH
60395: LD_INT 3
60397: PUSH
60398: EMPTY
60399: LIST
60400: LIST
60401: LIST
60402: PUSH
60403: LD_VAR 0 1
60407: PUSH
60408: LD_INT 3
60410: MINUS
60411: PUSH
60412: LD_VAR 0 2
60416: PUSH
60417: LD_INT 3
60419: MINUS
60420: PUSH
60421: LD_INT 2
60423: PUSH
60424: EMPTY
60425: LIST
60426: LIST
60427: LIST
60428: PUSH
60429: LD_VAR 0 1
60433: PUSH
60434: LD_INT 4
60436: MINUS
60437: PUSH
60438: LD_VAR 0 2
60442: PUSH
60443: LD_INT 1
60445: PUSH
60446: EMPTY
60447: LIST
60448: LIST
60449: LIST
60450: PUSH
60451: LD_VAR 0 1
60455: PUSH
60456: LD_VAR 0 2
60460: PUSH
60461: LD_INT 3
60463: PLUS
60464: PUSH
60465: LD_INT 0
60467: PUSH
60468: EMPTY
60469: LIST
60470: LIST
60471: LIST
60472: PUSH
60473: LD_VAR 0 1
60477: PUSH
60478: LD_INT 4
60480: PLUS
60481: PUSH
60482: LD_VAR 0 2
60486: PUSH
60487: LD_INT 4
60489: PLUS
60490: PUSH
60491: LD_INT 5
60493: PUSH
60494: EMPTY
60495: LIST
60496: LIST
60497: LIST
60498: PUSH
60499: EMPTY
60500: LIST
60501: LIST
60502: LIST
60503: LIST
60504: LIST
60505: ST_TO_ADDR
// end ; 2 :
60506: GO 61065
60508: LD_INT 2
60510: DOUBLE
60511: EQUAL
60512: IFTRUE 60516
60514: GO 60645
60516: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
60517: LD_ADDR_VAR 0 5
60521: PUSH
60522: LD_VAR 0 1
60526: PUSH
60527: LD_VAR 0 2
60531: PUSH
60532: LD_INT 3
60534: MINUS
60535: PUSH
60536: LD_INT 3
60538: PUSH
60539: EMPTY
60540: LIST
60541: LIST
60542: LIST
60543: PUSH
60544: LD_VAR 0 1
60548: PUSH
60549: LD_INT 4
60551: PLUS
60552: PUSH
60553: LD_VAR 0 2
60557: PUSH
60558: LD_INT 4
60560: PUSH
60561: EMPTY
60562: LIST
60563: LIST
60564: LIST
60565: PUSH
60566: LD_VAR 0 1
60570: PUSH
60571: LD_VAR 0 2
60575: PUSH
60576: LD_INT 4
60578: PLUS
60579: PUSH
60580: LD_INT 0
60582: PUSH
60583: EMPTY
60584: LIST
60585: LIST
60586: LIST
60587: PUSH
60588: LD_VAR 0 1
60592: PUSH
60593: LD_INT 3
60595: MINUS
60596: PUSH
60597: LD_VAR 0 2
60601: PUSH
60602: LD_INT 1
60604: PUSH
60605: EMPTY
60606: LIST
60607: LIST
60608: LIST
60609: PUSH
60610: LD_VAR 0 1
60614: PUSH
60615: LD_INT 4
60617: MINUS
60618: PUSH
60619: LD_VAR 0 2
60623: PUSH
60624: LD_INT 4
60626: MINUS
60627: PUSH
60628: LD_INT 2
60630: PUSH
60631: EMPTY
60632: LIST
60633: LIST
60634: LIST
60635: PUSH
60636: EMPTY
60637: LIST
60638: LIST
60639: LIST
60640: LIST
60641: LIST
60642: ST_TO_ADDR
// end ; 3 :
60643: GO 61065
60645: LD_INT 3
60647: DOUBLE
60648: EQUAL
60649: IFTRUE 60653
60651: GO 60786
60653: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
60654: LD_ADDR_VAR 0 5
60658: PUSH
60659: LD_VAR 0 1
60663: PUSH
60664: LD_INT 3
60666: PLUS
60667: PUSH
60668: LD_VAR 0 2
60672: PUSH
60673: LD_INT 4
60675: PUSH
60676: EMPTY
60677: LIST
60678: LIST
60679: LIST
60680: PUSH
60681: LD_VAR 0 1
60685: PUSH
60686: LD_INT 4
60688: PLUS
60689: PUSH
60690: LD_VAR 0 2
60694: PUSH
60695: LD_INT 4
60697: PLUS
60698: PUSH
60699: LD_INT 5
60701: PUSH
60702: EMPTY
60703: LIST
60704: LIST
60705: LIST
60706: PUSH
60707: LD_VAR 0 1
60711: PUSH
60712: LD_INT 4
60714: MINUS
60715: PUSH
60716: LD_VAR 0 2
60720: PUSH
60721: LD_INT 1
60723: PUSH
60724: EMPTY
60725: LIST
60726: LIST
60727: LIST
60728: PUSH
60729: LD_VAR 0 1
60733: PUSH
60734: LD_VAR 0 2
60738: PUSH
60739: LD_INT 4
60741: MINUS
60742: PUSH
60743: LD_INT 3
60745: PUSH
60746: EMPTY
60747: LIST
60748: LIST
60749: LIST
60750: PUSH
60751: LD_VAR 0 1
60755: PUSH
60756: LD_INT 3
60758: MINUS
60759: PUSH
60760: LD_VAR 0 2
60764: PUSH
60765: LD_INT 3
60767: MINUS
60768: PUSH
60769: LD_INT 2
60771: PUSH
60772: EMPTY
60773: LIST
60774: LIST
60775: LIST
60776: PUSH
60777: EMPTY
60778: LIST
60779: LIST
60780: LIST
60781: LIST
60782: LIST
60783: ST_TO_ADDR
// end ; 4 :
60784: GO 61065
60786: LD_INT 4
60788: DOUBLE
60789: EQUAL
60790: IFTRUE 60794
60792: GO 60927
60794: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
60795: LD_ADDR_VAR 0 5
60799: PUSH
60800: LD_VAR 0 1
60804: PUSH
60805: LD_VAR 0 2
60809: PUSH
60810: LD_INT 4
60812: PLUS
60813: PUSH
60814: LD_INT 0
60816: PUSH
60817: EMPTY
60818: LIST
60819: LIST
60820: LIST
60821: PUSH
60822: LD_VAR 0 1
60826: PUSH
60827: LD_INT 3
60829: PLUS
60830: PUSH
60831: LD_VAR 0 2
60835: PUSH
60836: LD_INT 3
60838: PLUS
60839: PUSH
60840: LD_INT 5
60842: PUSH
60843: EMPTY
60844: LIST
60845: LIST
60846: LIST
60847: PUSH
60848: LD_VAR 0 1
60852: PUSH
60853: LD_INT 4
60855: PLUS
60856: PUSH
60857: LD_VAR 0 2
60861: PUSH
60862: LD_INT 4
60864: PUSH
60865: EMPTY
60866: LIST
60867: LIST
60868: LIST
60869: PUSH
60870: LD_VAR 0 1
60874: PUSH
60875: LD_VAR 0 2
60879: PUSH
60880: LD_INT 3
60882: MINUS
60883: PUSH
60884: LD_INT 3
60886: PUSH
60887: EMPTY
60888: LIST
60889: LIST
60890: LIST
60891: PUSH
60892: LD_VAR 0 1
60896: PUSH
60897: LD_INT 4
60899: MINUS
60900: PUSH
60901: LD_VAR 0 2
60905: PUSH
60906: LD_INT 4
60908: MINUS
60909: PUSH
60910: LD_INT 2
60912: PUSH
60913: EMPTY
60914: LIST
60915: LIST
60916: LIST
60917: PUSH
60918: EMPTY
60919: LIST
60920: LIST
60921: LIST
60922: LIST
60923: LIST
60924: ST_TO_ADDR
// end ; 5 :
60925: GO 61065
60927: LD_INT 5
60929: DOUBLE
60930: EQUAL
60931: IFTRUE 60935
60933: GO 61064
60935: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
60936: LD_ADDR_VAR 0 5
60940: PUSH
60941: LD_VAR 0 1
60945: PUSH
60946: LD_INT 4
60948: MINUS
60949: PUSH
60950: LD_VAR 0 2
60954: PUSH
60955: LD_INT 1
60957: PUSH
60958: EMPTY
60959: LIST
60960: LIST
60961: LIST
60962: PUSH
60963: LD_VAR 0 1
60967: PUSH
60968: LD_VAR 0 2
60972: PUSH
60973: LD_INT 4
60975: MINUS
60976: PUSH
60977: LD_INT 3
60979: PUSH
60980: EMPTY
60981: LIST
60982: LIST
60983: LIST
60984: PUSH
60985: LD_VAR 0 1
60989: PUSH
60990: LD_INT 4
60992: PLUS
60993: PUSH
60994: LD_VAR 0 2
60998: PUSH
60999: LD_INT 4
61001: PLUS
61002: PUSH
61003: LD_INT 5
61005: PUSH
61006: EMPTY
61007: LIST
61008: LIST
61009: LIST
61010: PUSH
61011: LD_VAR 0 1
61015: PUSH
61016: LD_INT 3
61018: PLUS
61019: PUSH
61020: LD_VAR 0 2
61024: PUSH
61025: LD_INT 4
61027: PUSH
61028: EMPTY
61029: LIST
61030: LIST
61031: LIST
61032: PUSH
61033: LD_VAR 0 1
61037: PUSH
61038: LD_VAR 0 2
61042: PUSH
61043: LD_INT 3
61045: PLUS
61046: PUSH
61047: LD_INT 0
61049: PUSH
61050: EMPTY
61051: LIST
61052: LIST
61053: LIST
61054: PUSH
61055: EMPTY
61056: LIST
61057: LIST
61058: LIST
61059: LIST
61060: LIST
61061: ST_TO_ADDR
// end ; end ;
61062: GO 61065
61064: POP
// result := list ;
61065: LD_ADDR_VAR 0 4
61069: PUSH
61070: LD_VAR 0 5
61074: ST_TO_ADDR
// end ;
61075: LD_VAR 0 4
61079: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
61080: LD_INT 0
61082: PPUSH
61083: PPUSH
61084: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
61085: LD_VAR 0 1
61089: NOT
61090: PUSH
61091: LD_VAR 0 2
61095: PUSH
61096: LD_INT 1
61098: PUSH
61099: LD_INT 2
61101: PUSH
61102: LD_INT 3
61104: PUSH
61105: LD_INT 4
61107: PUSH
61108: EMPTY
61109: LIST
61110: LIST
61111: LIST
61112: LIST
61113: IN
61114: NOT
61115: OR
61116: IFFALSE 61120
// exit ;
61118: GO 61212
// tmp := [ ] ;
61120: LD_ADDR_VAR 0 5
61124: PUSH
61125: EMPTY
61126: ST_TO_ADDR
// for i in units do
61127: LD_ADDR_VAR 0 4
61131: PUSH
61132: LD_VAR 0 1
61136: PUSH
61137: FOR_IN
61138: IFFALSE 61181
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
61140: LD_ADDR_VAR 0 5
61144: PUSH
61145: LD_VAR 0 5
61149: PPUSH
61150: LD_VAR 0 5
61154: PUSH
61155: LD_INT 1
61157: PLUS
61158: PPUSH
61159: LD_VAR 0 4
61163: PPUSH
61164: LD_VAR 0 2
61168: PPUSH
61169: CALL_OW 259
61173: PPUSH
61174: CALL_OW 2
61178: ST_TO_ADDR
61179: GO 61137
61181: POP
61182: POP
// if not tmp then
61183: LD_VAR 0 5
61187: NOT
61188: IFFALSE 61192
// exit ;
61190: GO 61212
// result := SortListByListDesc ( units , tmp ) ;
61192: LD_ADDR_VAR 0 3
61196: PUSH
61197: LD_VAR 0 1
61201: PPUSH
61202: LD_VAR 0 5
61206: PPUSH
61207: CALL_OW 77
61211: ST_TO_ADDR
// end ;
61212: LD_VAR 0 3
61216: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
61217: LD_INT 0
61219: PPUSH
61220: PPUSH
61221: PPUSH
// result := false ;
61222: LD_ADDR_VAR 0 3
61226: PUSH
61227: LD_INT 0
61229: ST_TO_ADDR
// x := GetX ( building ) ;
61230: LD_ADDR_VAR 0 4
61234: PUSH
61235: LD_VAR 0 2
61239: PPUSH
61240: CALL_OW 250
61244: ST_TO_ADDR
// y := GetY ( building ) ;
61245: LD_ADDR_VAR 0 5
61249: PUSH
61250: LD_VAR 0 2
61254: PPUSH
61255: CALL_OW 251
61259: ST_TO_ADDR
// if not building or not x or not y then
61260: LD_VAR 0 2
61264: NOT
61265: PUSH
61266: LD_VAR 0 4
61270: NOT
61271: OR
61272: PUSH
61273: LD_VAR 0 5
61277: NOT
61278: OR
61279: IFFALSE 61283
// exit ;
61281: GO 61375
// if GetTaskList ( unit ) then
61283: LD_VAR 0 1
61287: PPUSH
61288: CALL_OW 437
61292: IFFALSE 61375
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
61294: LD_STRING e
61296: PUSH
61297: LD_VAR 0 1
61301: PPUSH
61302: CALL_OW 437
61306: PUSH
61307: LD_INT 1
61309: ARRAY
61310: PUSH
61311: LD_INT 1
61313: ARRAY
61314: EQUAL
61315: PUSH
61316: LD_VAR 0 4
61320: PUSH
61321: LD_VAR 0 1
61325: PPUSH
61326: CALL_OW 437
61330: PUSH
61331: LD_INT 1
61333: ARRAY
61334: PUSH
61335: LD_INT 2
61337: ARRAY
61338: EQUAL
61339: AND
61340: PUSH
61341: LD_VAR 0 5
61345: PUSH
61346: LD_VAR 0 1
61350: PPUSH
61351: CALL_OW 437
61355: PUSH
61356: LD_INT 1
61358: ARRAY
61359: PUSH
61360: LD_INT 3
61362: ARRAY
61363: EQUAL
61364: AND
61365: IFFALSE 61375
// result := true end ;
61367: LD_ADDR_VAR 0 3
61371: PUSH
61372: LD_INT 1
61374: ST_TO_ADDR
// end ;
61375: LD_VAR 0 3
61379: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
61380: LD_INT 0
61382: PPUSH
// result := false ;
61383: LD_ADDR_VAR 0 4
61387: PUSH
61388: LD_INT 0
61390: ST_TO_ADDR
// if GetTaskList ( unit ) then
61391: LD_VAR 0 1
61395: PPUSH
61396: CALL_OW 437
61400: IFFALSE 61483
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
61402: LD_STRING M
61404: PUSH
61405: LD_VAR 0 1
61409: PPUSH
61410: CALL_OW 437
61414: PUSH
61415: LD_INT 1
61417: ARRAY
61418: PUSH
61419: LD_INT 1
61421: ARRAY
61422: EQUAL
61423: PUSH
61424: LD_VAR 0 2
61428: PUSH
61429: LD_VAR 0 1
61433: PPUSH
61434: CALL_OW 437
61438: PUSH
61439: LD_INT 1
61441: ARRAY
61442: PUSH
61443: LD_INT 2
61445: ARRAY
61446: EQUAL
61447: AND
61448: PUSH
61449: LD_VAR 0 3
61453: PUSH
61454: LD_VAR 0 1
61458: PPUSH
61459: CALL_OW 437
61463: PUSH
61464: LD_INT 1
61466: ARRAY
61467: PUSH
61468: LD_INT 3
61470: ARRAY
61471: EQUAL
61472: AND
61473: IFFALSE 61483
// result := true ;
61475: LD_ADDR_VAR 0 4
61479: PUSH
61480: LD_INT 1
61482: ST_TO_ADDR
// end ; end ;
61483: LD_VAR 0 4
61487: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
61488: LD_INT 0
61490: PPUSH
61491: PPUSH
61492: PPUSH
61493: PPUSH
// if not unit or not area then
61494: LD_VAR 0 1
61498: NOT
61499: PUSH
61500: LD_VAR 0 2
61504: NOT
61505: OR
61506: IFFALSE 61510
// exit ;
61508: GO 61674
// tmp := AreaToList ( area , i ) ;
61510: LD_ADDR_VAR 0 6
61514: PUSH
61515: LD_VAR 0 2
61519: PPUSH
61520: LD_VAR 0 5
61524: PPUSH
61525: CALL_OW 517
61529: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
61530: LD_ADDR_VAR 0 5
61534: PUSH
61535: DOUBLE
61536: LD_INT 1
61538: DEC
61539: ST_TO_ADDR
61540: LD_VAR 0 6
61544: PUSH
61545: LD_INT 1
61547: ARRAY
61548: PUSH
61549: FOR_TO
61550: IFFALSE 61672
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
61552: LD_ADDR_VAR 0 7
61556: PUSH
61557: LD_VAR 0 6
61561: PUSH
61562: LD_INT 1
61564: ARRAY
61565: PUSH
61566: LD_VAR 0 5
61570: ARRAY
61571: PUSH
61572: LD_VAR 0 6
61576: PUSH
61577: LD_INT 2
61579: ARRAY
61580: PUSH
61581: LD_VAR 0 5
61585: ARRAY
61586: PUSH
61587: EMPTY
61588: LIST
61589: LIST
61590: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
61591: LD_VAR 0 7
61595: PUSH
61596: LD_INT 1
61598: ARRAY
61599: PPUSH
61600: LD_VAR 0 7
61604: PUSH
61605: LD_INT 2
61607: ARRAY
61608: PPUSH
61609: CALL_OW 428
61613: PUSH
61614: LD_INT 0
61616: EQUAL
61617: IFFALSE 61670
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
61619: LD_VAR 0 1
61623: PPUSH
61624: LD_VAR 0 7
61628: PUSH
61629: LD_INT 1
61631: ARRAY
61632: PPUSH
61633: LD_VAR 0 7
61637: PUSH
61638: LD_INT 2
61640: ARRAY
61641: PPUSH
61642: LD_VAR 0 3
61646: PPUSH
61647: CALL_OW 48
// result := IsPlaced ( unit ) ;
61651: LD_ADDR_VAR 0 4
61655: PUSH
61656: LD_VAR 0 1
61660: PPUSH
61661: CALL_OW 305
61665: ST_TO_ADDR
// exit ;
61666: POP
61667: POP
61668: GO 61674
// end ; end ;
61670: GO 61549
61672: POP
61673: POP
// end ;
61674: LD_VAR 0 4
61678: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
61679: LD_INT 0
61681: PPUSH
61682: PPUSH
61683: PPUSH
// if not side or side > 8 then
61684: LD_VAR 0 1
61688: NOT
61689: PUSH
61690: LD_VAR 0 1
61694: PUSH
61695: LD_INT 8
61697: GREATER
61698: OR
61699: IFFALSE 61703
// exit ;
61701: GO 61890
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
61703: LD_ADDR_VAR 0 4
61707: PUSH
61708: LD_INT 22
61710: PUSH
61711: LD_VAR 0 1
61715: PUSH
61716: EMPTY
61717: LIST
61718: LIST
61719: PUSH
61720: LD_INT 21
61722: PUSH
61723: LD_INT 3
61725: PUSH
61726: EMPTY
61727: LIST
61728: LIST
61729: PUSH
61730: EMPTY
61731: LIST
61732: LIST
61733: PPUSH
61734: CALL_OW 69
61738: ST_TO_ADDR
// if not tmp then
61739: LD_VAR 0 4
61743: NOT
61744: IFFALSE 61748
// exit ;
61746: GO 61890
// enable_addtolog := true ;
61748: LD_ADDR_OWVAR 81
61752: PUSH
61753: LD_INT 1
61755: ST_TO_ADDR
// AddToLog ( [ ) ;
61756: LD_STRING [
61758: PPUSH
61759: CALL_OW 561
// for i in tmp do
61763: LD_ADDR_VAR 0 3
61767: PUSH
61768: LD_VAR 0 4
61772: PUSH
61773: FOR_IN
61774: IFFALSE 61881
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
61776: LD_STRING [
61778: PUSH
61779: LD_VAR 0 3
61783: PPUSH
61784: CALL_OW 266
61788: STR
61789: PUSH
61790: LD_STRING , 
61792: STR
61793: PUSH
61794: LD_VAR 0 3
61798: PPUSH
61799: CALL_OW 250
61803: STR
61804: PUSH
61805: LD_STRING , 
61807: STR
61808: PUSH
61809: LD_VAR 0 3
61813: PPUSH
61814: CALL_OW 251
61818: STR
61819: PUSH
61820: LD_STRING , 
61822: STR
61823: PUSH
61824: LD_VAR 0 3
61828: PPUSH
61829: CALL_OW 254
61833: STR
61834: PUSH
61835: LD_STRING , 
61837: STR
61838: PUSH
61839: LD_VAR 0 3
61843: PPUSH
61844: LD_INT 1
61846: PPUSH
61847: CALL_OW 268
61851: STR
61852: PUSH
61853: LD_STRING , 
61855: STR
61856: PUSH
61857: LD_VAR 0 3
61861: PPUSH
61862: LD_INT 2
61864: PPUSH
61865: CALL_OW 268
61869: STR
61870: PUSH
61871: LD_STRING ],
61873: STR
61874: PPUSH
61875: CALL_OW 561
// end ;
61879: GO 61773
61881: POP
61882: POP
// AddToLog ( ]; ) ;
61883: LD_STRING ];
61885: PPUSH
61886: CALL_OW 561
// end ;
61890: LD_VAR 0 2
61894: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
61895: LD_INT 0
61897: PPUSH
61898: PPUSH
61899: PPUSH
61900: PPUSH
61901: PPUSH
// if not area or not rate or not max then
61902: LD_VAR 0 1
61906: NOT
61907: PUSH
61908: LD_VAR 0 2
61912: NOT
61913: OR
61914: PUSH
61915: LD_VAR 0 4
61919: NOT
61920: OR
61921: IFFALSE 61925
// exit ;
61923: GO 62117
// while 1 do
61925: LD_INT 1
61927: IFFALSE 62117
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
61929: LD_ADDR_VAR 0 9
61933: PUSH
61934: LD_VAR 0 1
61938: PPUSH
61939: LD_INT 1
61941: PPUSH
61942: CALL_OW 287
61946: PUSH
61947: LD_INT 10
61949: MUL
61950: ST_TO_ADDR
// r := rate / 10 ;
61951: LD_ADDR_VAR 0 7
61955: PUSH
61956: LD_VAR 0 2
61960: PUSH
61961: LD_INT 10
61963: DIVREAL
61964: ST_TO_ADDR
// time := 1 1$00 ;
61965: LD_ADDR_VAR 0 8
61969: PUSH
61970: LD_INT 2100
61972: ST_TO_ADDR
// if amount < min then
61973: LD_VAR 0 9
61977: PUSH
61978: LD_VAR 0 3
61982: LESS
61983: IFFALSE 62001
// r := r * 2 else
61985: LD_ADDR_VAR 0 7
61989: PUSH
61990: LD_VAR 0 7
61994: PUSH
61995: LD_INT 2
61997: MUL
61998: ST_TO_ADDR
61999: GO 62027
// if amount > max then
62001: LD_VAR 0 9
62005: PUSH
62006: LD_VAR 0 4
62010: GREATER
62011: IFFALSE 62027
// r := r / 2 ;
62013: LD_ADDR_VAR 0 7
62017: PUSH
62018: LD_VAR 0 7
62022: PUSH
62023: LD_INT 2
62025: DIVREAL
62026: ST_TO_ADDR
// time := time / r ;
62027: LD_ADDR_VAR 0 8
62031: PUSH
62032: LD_VAR 0 8
62036: PUSH
62037: LD_VAR 0 7
62041: DIVREAL
62042: ST_TO_ADDR
// if time < 0 then
62043: LD_VAR 0 8
62047: PUSH
62048: LD_INT 0
62050: LESS
62051: IFFALSE 62068
// time := time * - 1 ;
62053: LD_ADDR_VAR 0 8
62057: PUSH
62058: LD_VAR 0 8
62062: PUSH
62063: LD_INT 1
62065: NEG
62066: MUL
62067: ST_TO_ADDR
// wait ( time ) ;
62068: LD_VAR 0 8
62072: PPUSH
62073: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
62077: LD_INT 35
62079: PPUSH
62080: LD_INT 875
62082: PPUSH
62083: CALL_OW 12
62087: PPUSH
62088: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
62092: LD_INT 1
62094: PPUSH
62095: LD_INT 5
62097: PPUSH
62098: CALL_OW 12
62102: PPUSH
62103: LD_VAR 0 1
62107: PPUSH
62108: LD_INT 1
62110: PPUSH
62111: CALL_OW 55
// end ;
62115: GO 61925
// end ;
62117: LD_VAR 0 5
62121: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
62122: LD_INT 0
62124: PPUSH
62125: PPUSH
62126: PPUSH
62127: PPUSH
62128: PPUSH
62129: PPUSH
62130: PPUSH
62131: PPUSH
// if not turrets or not factories then
62132: LD_VAR 0 1
62136: NOT
62137: PUSH
62138: LD_VAR 0 2
62142: NOT
62143: OR
62144: IFFALSE 62148
// exit ;
62146: GO 62455
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
62148: LD_ADDR_VAR 0 10
62152: PUSH
62153: LD_INT 5
62155: PUSH
62156: LD_INT 6
62158: PUSH
62159: EMPTY
62160: LIST
62161: LIST
62162: PUSH
62163: LD_INT 2
62165: PUSH
62166: LD_INT 4
62168: PUSH
62169: EMPTY
62170: LIST
62171: LIST
62172: PUSH
62173: LD_INT 3
62175: PUSH
62176: LD_INT 5
62178: PUSH
62179: EMPTY
62180: LIST
62181: LIST
62182: PUSH
62183: EMPTY
62184: LIST
62185: LIST
62186: LIST
62187: PUSH
62188: LD_INT 24
62190: PUSH
62191: LD_INT 25
62193: PUSH
62194: EMPTY
62195: LIST
62196: LIST
62197: PUSH
62198: LD_INT 23
62200: PUSH
62201: LD_INT 27
62203: PUSH
62204: EMPTY
62205: LIST
62206: LIST
62207: PUSH
62208: EMPTY
62209: LIST
62210: LIST
62211: PUSH
62212: LD_INT 42
62214: PUSH
62215: LD_INT 43
62217: PUSH
62218: EMPTY
62219: LIST
62220: LIST
62221: PUSH
62222: LD_INT 44
62224: PUSH
62225: LD_INT 46
62227: PUSH
62228: EMPTY
62229: LIST
62230: LIST
62231: PUSH
62232: LD_INT 45
62234: PUSH
62235: LD_INT 47
62237: PUSH
62238: EMPTY
62239: LIST
62240: LIST
62241: PUSH
62242: EMPTY
62243: LIST
62244: LIST
62245: LIST
62246: PUSH
62247: EMPTY
62248: LIST
62249: LIST
62250: LIST
62251: ST_TO_ADDR
// result := [ ] ;
62252: LD_ADDR_VAR 0 3
62256: PUSH
62257: EMPTY
62258: ST_TO_ADDR
// for i in turrets do
62259: LD_ADDR_VAR 0 4
62263: PUSH
62264: LD_VAR 0 1
62268: PUSH
62269: FOR_IN
62270: IFFALSE 62453
// begin nat := GetNation ( i ) ;
62272: LD_ADDR_VAR 0 7
62276: PUSH
62277: LD_VAR 0 4
62281: PPUSH
62282: CALL_OW 248
62286: ST_TO_ADDR
// weapon := 0 ;
62287: LD_ADDR_VAR 0 8
62291: PUSH
62292: LD_INT 0
62294: ST_TO_ADDR
// if not nat then
62295: LD_VAR 0 7
62299: NOT
62300: IFFALSE 62304
// continue ;
62302: GO 62269
// for j in list [ nat ] do
62304: LD_ADDR_VAR 0 5
62308: PUSH
62309: LD_VAR 0 10
62313: PUSH
62314: LD_VAR 0 7
62318: ARRAY
62319: PUSH
62320: FOR_IN
62321: IFFALSE 62362
// if GetBWeapon ( i ) = j [ 1 ] then
62323: LD_VAR 0 4
62327: PPUSH
62328: CALL_OW 269
62332: PUSH
62333: LD_VAR 0 5
62337: PUSH
62338: LD_INT 1
62340: ARRAY
62341: EQUAL
62342: IFFALSE 62360
// begin weapon := j [ 2 ] ;
62344: LD_ADDR_VAR 0 8
62348: PUSH
62349: LD_VAR 0 5
62353: PUSH
62354: LD_INT 2
62356: ARRAY
62357: ST_TO_ADDR
// break ;
62358: GO 62362
// end ;
62360: GO 62320
62362: POP
62363: POP
// if not weapon then
62364: LD_VAR 0 8
62368: NOT
62369: IFFALSE 62373
// continue ;
62371: GO 62269
// for k in factories do
62373: LD_ADDR_VAR 0 6
62377: PUSH
62378: LD_VAR 0 2
62382: PUSH
62383: FOR_IN
62384: IFFALSE 62449
// begin weapons := AvailableWeaponList ( k ) ;
62386: LD_ADDR_VAR 0 9
62390: PUSH
62391: LD_VAR 0 6
62395: PPUSH
62396: CALL_OW 478
62400: ST_TO_ADDR
// if not weapons then
62401: LD_VAR 0 9
62405: NOT
62406: IFFALSE 62410
// continue ;
62408: GO 62383
// if weapon in weapons then
62410: LD_VAR 0 8
62414: PUSH
62415: LD_VAR 0 9
62419: IN
62420: IFFALSE 62447
// begin result := [ i , weapon ] ;
62422: LD_ADDR_VAR 0 3
62426: PUSH
62427: LD_VAR 0 4
62431: PUSH
62432: LD_VAR 0 8
62436: PUSH
62437: EMPTY
62438: LIST
62439: LIST
62440: ST_TO_ADDR
// exit ;
62441: POP
62442: POP
62443: POP
62444: POP
62445: GO 62455
// end ; end ;
62447: GO 62383
62449: POP
62450: POP
// end ;
62451: GO 62269
62453: POP
62454: POP
// end ;
62455: LD_VAR 0 3
62459: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
62460: LD_INT 0
62462: PPUSH
// if not side or side > 8 then
62463: LD_VAR 0 3
62467: NOT
62468: PUSH
62469: LD_VAR 0 3
62473: PUSH
62474: LD_INT 8
62476: GREATER
62477: OR
62478: IFFALSE 62482
// exit ;
62480: GO 62541
// if not range then
62482: LD_VAR 0 4
62486: NOT
62487: IFFALSE 62498
// range := - 12 ;
62489: LD_ADDR_VAR 0 4
62493: PUSH
62494: LD_INT 12
62496: NEG
62497: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
62498: LD_VAR 0 1
62502: PPUSH
62503: LD_VAR 0 2
62507: PPUSH
62508: LD_VAR 0 3
62512: PPUSH
62513: LD_VAR 0 4
62517: PPUSH
62518: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
62522: LD_VAR 0 1
62526: PPUSH
62527: LD_VAR 0 2
62531: PPUSH
62532: LD_VAR 0 3
62536: PPUSH
62537: CALL_OW 331
// end ;
62541: LD_VAR 0 5
62545: RET
// export function Video ( mode ) ; begin
62546: LD_INT 0
62548: PPUSH
// ingame_video = mode ;
62549: LD_ADDR_OWVAR 52
62553: PUSH
62554: LD_VAR 0 1
62558: ST_TO_ADDR
// interface_hidden = mode ;
62559: LD_ADDR_OWVAR 54
62563: PUSH
62564: LD_VAR 0 1
62568: ST_TO_ADDR
// end ;
62569: LD_VAR 0 2
62573: RET
// export function Join ( array , element ) ; begin
62574: LD_INT 0
62576: PPUSH
// result := Replace ( array , array + 1 , element ) ;
62577: LD_ADDR_VAR 0 3
62581: PUSH
62582: LD_VAR 0 1
62586: PPUSH
62587: LD_VAR 0 1
62591: PUSH
62592: LD_INT 1
62594: PLUS
62595: PPUSH
62596: LD_VAR 0 2
62600: PPUSH
62601: CALL_OW 1
62605: ST_TO_ADDR
// end ;
62606: LD_VAR 0 3
62610: RET
// export function JoinUnion ( array , element ) ; begin
62611: LD_INT 0
62613: PPUSH
// result := array union element ;
62614: LD_ADDR_VAR 0 3
62618: PUSH
62619: LD_VAR 0 1
62623: PUSH
62624: LD_VAR 0 2
62628: UNION
62629: ST_TO_ADDR
// end ;
62630: LD_VAR 0 3
62634: RET
// export function GetBehemoths ( side ) ; begin
62635: LD_INT 0
62637: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
62638: LD_ADDR_VAR 0 2
62642: PUSH
62643: LD_INT 22
62645: PUSH
62646: LD_VAR 0 1
62650: PUSH
62651: EMPTY
62652: LIST
62653: LIST
62654: PUSH
62655: LD_INT 31
62657: PUSH
62658: LD_INT 25
62660: PUSH
62661: EMPTY
62662: LIST
62663: LIST
62664: PUSH
62665: EMPTY
62666: LIST
62667: LIST
62668: PPUSH
62669: CALL_OW 69
62673: ST_TO_ADDR
// end ;
62674: LD_VAR 0 2
62678: RET
// export function Shuffle ( array ) ; var i , index ; begin
62679: LD_INT 0
62681: PPUSH
62682: PPUSH
62683: PPUSH
// result := [ ] ;
62684: LD_ADDR_VAR 0 2
62688: PUSH
62689: EMPTY
62690: ST_TO_ADDR
// if not array then
62691: LD_VAR 0 1
62695: NOT
62696: IFFALSE 62700
// exit ;
62698: GO 62799
// Randomize ;
62700: CALL_OW 10
// for i = array downto 1 do
62704: LD_ADDR_VAR 0 3
62708: PUSH
62709: DOUBLE
62710: LD_VAR 0 1
62714: INC
62715: ST_TO_ADDR
62716: LD_INT 1
62718: PUSH
62719: FOR_DOWNTO
62720: IFFALSE 62797
// begin index := rand ( 1 , array ) ;
62722: LD_ADDR_VAR 0 4
62726: PUSH
62727: LD_INT 1
62729: PPUSH
62730: LD_VAR 0 1
62734: PPUSH
62735: CALL_OW 12
62739: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
62740: LD_ADDR_VAR 0 2
62744: PUSH
62745: LD_VAR 0 2
62749: PPUSH
62750: LD_VAR 0 2
62754: PUSH
62755: LD_INT 1
62757: PLUS
62758: PPUSH
62759: LD_VAR 0 1
62763: PUSH
62764: LD_VAR 0 4
62768: ARRAY
62769: PPUSH
62770: CALL_OW 2
62774: ST_TO_ADDR
// array := Delete ( array , index ) ;
62775: LD_ADDR_VAR 0 1
62779: PUSH
62780: LD_VAR 0 1
62784: PPUSH
62785: LD_VAR 0 4
62789: PPUSH
62790: CALL_OW 3
62794: ST_TO_ADDR
// end ;
62795: GO 62719
62797: POP
62798: POP
// end ;
62799: LD_VAR 0 2
62803: RET
// export function GetBaseMaterials ( base ) ; begin
62804: LD_INT 0
62806: PPUSH
// result := [ 0 , 0 , 0 ] ;
62807: LD_ADDR_VAR 0 2
62811: PUSH
62812: LD_INT 0
62814: PUSH
62815: LD_INT 0
62817: PUSH
62818: LD_INT 0
62820: PUSH
62821: EMPTY
62822: LIST
62823: LIST
62824: LIST
62825: ST_TO_ADDR
// if not base then
62826: LD_VAR 0 1
62830: NOT
62831: IFFALSE 62835
// exit ;
62833: GO 62884
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
62835: LD_ADDR_VAR 0 2
62839: PUSH
62840: LD_VAR 0 1
62844: PPUSH
62845: LD_INT 1
62847: PPUSH
62848: CALL_OW 275
62852: PUSH
62853: LD_VAR 0 1
62857: PPUSH
62858: LD_INT 2
62860: PPUSH
62861: CALL_OW 275
62865: PUSH
62866: LD_VAR 0 1
62870: PPUSH
62871: LD_INT 3
62873: PPUSH
62874: CALL_OW 275
62878: PUSH
62879: EMPTY
62880: LIST
62881: LIST
62882: LIST
62883: ST_TO_ADDR
// end ;
62884: LD_VAR 0 2
62888: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
62889: LD_INT 0
62891: PPUSH
62892: PPUSH
// result := array ;
62893: LD_ADDR_VAR 0 3
62897: PUSH
62898: LD_VAR 0 1
62902: ST_TO_ADDR
// if size > 0 then
62903: LD_VAR 0 2
62907: PUSH
62908: LD_INT 0
62910: GREATER
62911: IFFALSE 62957
// for i := array downto size do
62913: LD_ADDR_VAR 0 4
62917: PUSH
62918: DOUBLE
62919: LD_VAR 0 1
62923: INC
62924: ST_TO_ADDR
62925: LD_VAR 0 2
62929: PUSH
62930: FOR_DOWNTO
62931: IFFALSE 62955
// result := Delete ( result , result ) ;
62933: LD_ADDR_VAR 0 3
62937: PUSH
62938: LD_VAR 0 3
62942: PPUSH
62943: LD_VAR 0 3
62947: PPUSH
62948: CALL_OW 3
62952: ST_TO_ADDR
62953: GO 62930
62955: POP
62956: POP
// end ;
62957: LD_VAR 0 3
62961: RET
// export function ComExit ( unit ) ; var tmp ; begin
62962: LD_INT 0
62964: PPUSH
62965: PPUSH
// if not IsInUnit ( unit ) then
62966: LD_VAR 0 1
62970: PPUSH
62971: CALL_OW 310
62975: NOT
62976: IFFALSE 62980
// exit ;
62978: GO 63040
// tmp := IsInUnit ( unit ) ;
62980: LD_ADDR_VAR 0 3
62984: PUSH
62985: LD_VAR 0 1
62989: PPUSH
62990: CALL_OW 310
62994: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
62995: LD_VAR 0 3
62999: PPUSH
63000: CALL_OW 247
63004: PUSH
63005: LD_INT 2
63007: EQUAL
63008: IFFALSE 63021
// ComExitVehicle ( unit ) else
63010: LD_VAR 0 1
63014: PPUSH
63015: CALL_OW 121
63019: GO 63030
// ComExitBuilding ( unit ) ;
63021: LD_VAR 0 1
63025: PPUSH
63026: CALL_OW 122
// result := tmp ;
63030: LD_ADDR_VAR 0 2
63034: PUSH
63035: LD_VAR 0 3
63039: ST_TO_ADDR
// end ;
63040: LD_VAR 0 2
63044: RET
// export function ComExitAll ( units ) ; var i ; begin
63045: LD_INT 0
63047: PPUSH
63048: PPUSH
// if not units then
63049: LD_VAR 0 1
63053: NOT
63054: IFFALSE 63058
// exit ;
63056: GO 63084
// for i in units do
63058: LD_ADDR_VAR 0 3
63062: PUSH
63063: LD_VAR 0 1
63067: PUSH
63068: FOR_IN
63069: IFFALSE 63082
// ComExit ( i ) ;
63071: LD_VAR 0 3
63075: PPUSH
63076: CALL 62962 0 1
63080: GO 63068
63082: POP
63083: POP
// end ;
63084: LD_VAR 0 2
63088: RET
// export function ResetHc ; begin
63089: LD_INT 0
63091: PPUSH
// InitHc ;
63092: CALL_OW 19
// hc_importance := 0 ;
63096: LD_ADDR_OWVAR 32
63100: PUSH
63101: LD_INT 0
63103: ST_TO_ADDR
// end ;
63104: LD_VAR 0 1
63108: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
63109: LD_INT 0
63111: PPUSH
63112: PPUSH
63113: PPUSH
// _x := ( x1 + x2 ) div 2 ;
63114: LD_ADDR_VAR 0 6
63118: PUSH
63119: LD_VAR 0 1
63123: PUSH
63124: LD_VAR 0 3
63128: PLUS
63129: PUSH
63130: LD_INT 2
63132: DIV
63133: ST_TO_ADDR
// if _x < 0 then
63134: LD_VAR 0 6
63138: PUSH
63139: LD_INT 0
63141: LESS
63142: IFFALSE 63159
// _x := _x * - 1 ;
63144: LD_ADDR_VAR 0 6
63148: PUSH
63149: LD_VAR 0 6
63153: PUSH
63154: LD_INT 1
63156: NEG
63157: MUL
63158: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
63159: LD_ADDR_VAR 0 7
63163: PUSH
63164: LD_VAR 0 2
63168: PUSH
63169: LD_VAR 0 4
63173: PLUS
63174: PUSH
63175: LD_INT 2
63177: DIV
63178: ST_TO_ADDR
// if _y < 0 then
63179: LD_VAR 0 7
63183: PUSH
63184: LD_INT 0
63186: LESS
63187: IFFALSE 63204
// _y := _y * - 1 ;
63189: LD_ADDR_VAR 0 7
63193: PUSH
63194: LD_VAR 0 7
63198: PUSH
63199: LD_INT 1
63201: NEG
63202: MUL
63203: ST_TO_ADDR
// result := [ _x , _y ] ;
63204: LD_ADDR_VAR 0 5
63208: PUSH
63209: LD_VAR 0 6
63213: PUSH
63214: LD_VAR 0 7
63218: PUSH
63219: EMPTY
63220: LIST
63221: LIST
63222: ST_TO_ADDR
// end ;
63223: LD_VAR 0 5
63227: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
63228: LD_INT 0
63230: PPUSH
63231: PPUSH
63232: PPUSH
63233: PPUSH
// task := GetTaskList ( unit ) ;
63234: LD_ADDR_VAR 0 7
63238: PUSH
63239: LD_VAR 0 1
63243: PPUSH
63244: CALL_OW 437
63248: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
63249: LD_VAR 0 7
63253: NOT
63254: PUSH
63255: LD_VAR 0 1
63259: PPUSH
63260: LD_VAR 0 2
63264: PPUSH
63265: CALL_OW 308
63269: NOT
63270: AND
63271: IFFALSE 63275
// exit ;
63273: GO 63393
// if IsInArea ( unit , area ) then
63275: LD_VAR 0 1
63279: PPUSH
63280: LD_VAR 0 2
63284: PPUSH
63285: CALL_OW 308
63289: IFFALSE 63307
// begin ComMoveToArea ( unit , goAway ) ;
63291: LD_VAR 0 1
63295: PPUSH
63296: LD_VAR 0 3
63300: PPUSH
63301: CALL_OW 113
// exit ;
63305: GO 63393
// end ; if task [ 1 ] [ 1 ] <> M then
63307: LD_VAR 0 7
63311: PUSH
63312: LD_INT 1
63314: ARRAY
63315: PUSH
63316: LD_INT 1
63318: ARRAY
63319: PUSH
63320: LD_STRING M
63322: NONEQUAL
63323: IFFALSE 63327
// exit ;
63325: GO 63393
// x := task [ 1 ] [ 2 ] ;
63327: LD_ADDR_VAR 0 5
63331: PUSH
63332: LD_VAR 0 7
63336: PUSH
63337: LD_INT 1
63339: ARRAY
63340: PUSH
63341: LD_INT 2
63343: ARRAY
63344: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
63345: LD_ADDR_VAR 0 6
63349: PUSH
63350: LD_VAR 0 7
63354: PUSH
63355: LD_INT 1
63357: ARRAY
63358: PUSH
63359: LD_INT 3
63361: ARRAY
63362: ST_TO_ADDR
// if InArea ( x , y , area ) then
63363: LD_VAR 0 5
63367: PPUSH
63368: LD_VAR 0 6
63372: PPUSH
63373: LD_VAR 0 2
63377: PPUSH
63378: CALL_OW 309
63382: IFFALSE 63393
// ComStop ( unit ) ;
63384: LD_VAR 0 1
63388: PPUSH
63389: CALL_OW 141
// end ;
63393: LD_VAR 0 4
63397: RET
// export function Abs ( value ) ; begin
63398: LD_INT 0
63400: PPUSH
// result := value ;
63401: LD_ADDR_VAR 0 2
63405: PUSH
63406: LD_VAR 0 1
63410: ST_TO_ADDR
// if value < 0 then
63411: LD_VAR 0 1
63415: PUSH
63416: LD_INT 0
63418: LESS
63419: IFFALSE 63436
// result := value * - 1 ;
63421: LD_ADDR_VAR 0 2
63425: PUSH
63426: LD_VAR 0 1
63430: PUSH
63431: LD_INT 1
63433: NEG
63434: MUL
63435: ST_TO_ADDR
// end ;
63436: LD_VAR 0 2
63440: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
63441: LD_INT 0
63443: PPUSH
63444: PPUSH
63445: PPUSH
63446: PPUSH
63447: PPUSH
63448: PPUSH
63449: PPUSH
63450: PPUSH
// if not unit or not building then
63451: LD_VAR 0 1
63455: NOT
63456: PUSH
63457: LD_VAR 0 2
63461: NOT
63462: OR
63463: IFFALSE 63467
// exit ;
63465: GO 63693
// x := GetX ( building ) ;
63467: LD_ADDR_VAR 0 4
63471: PUSH
63472: LD_VAR 0 2
63476: PPUSH
63477: CALL_OW 250
63481: ST_TO_ADDR
// y := GetY ( building ) ;
63482: LD_ADDR_VAR 0 6
63486: PUSH
63487: LD_VAR 0 2
63491: PPUSH
63492: CALL_OW 251
63496: ST_TO_ADDR
// d := GetDir ( building ) ;
63497: LD_ADDR_VAR 0 8
63501: PUSH
63502: LD_VAR 0 2
63506: PPUSH
63507: CALL_OW 254
63511: ST_TO_ADDR
// r := 4 ;
63512: LD_ADDR_VAR 0 9
63516: PUSH
63517: LD_INT 4
63519: ST_TO_ADDR
// for i := 1 to 5 do
63520: LD_ADDR_VAR 0 10
63524: PUSH
63525: DOUBLE
63526: LD_INT 1
63528: DEC
63529: ST_TO_ADDR
63530: LD_INT 5
63532: PUSH
63533: FOR_TO
63534: IFFALSE 63691
// begin _x := ShiftX ( x , d , r + i ) ;
63536: LD_ADDR_VAR 0 5
63540: PUSH
63541: LD_VAR 0 4
63545: PPUSH
63546: LD_VAR 0 8
63550: PPUSH
63551: LD_VAR 0 9
63555: PUSH
63556: LD_VAR 0 10
63560: PLUS
63561: PPUSH
63562: CALL_OW 272
63566: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
63567: LD_ADDR_VAR 0 7
63571: PUSH
63572: LD_VAR 0 6
63576: PPUSH
63577: LD_VAR 0 8
63581: PPUSH
63582: LD_VAR 0 9
63586: PUSH
63587: LD_VAR 0 10
63591: PLUS
63592: PPUSH
63593: CALL_OW 273
63597: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
63598: LD_VAR 0 5
63602: PPUSH
63603: LD_VAR 0 7
63607: PPUSH
63608: CALL_OW 488
63612: PUSH
63613: LD_VAR 0 5
63617: PPUSH
63618: LD_VAR 0 7
63622: PPUSH
63623: CALL_OW 428
63627: PPUSH
63628: CALL_OW 247
63632: PUSH
63633: LD_INT 3
63635: PUSH
63636: LD_INT 2
63638: PUSH
63639: EMPTY
63640: LIST
63641: LIST
63642: IN
63643: NOT
63644: AND
63645: IFFALSE 63689
// begin ComMoveXY ( unit , _x , _y ) ;
63647: LD_VAR 0 1
63651: PPUSH
63652: LD_VAR 0 5
63656: PPUSH
63657: LD_VAR 0 7
63661: PPUSH
63662: CALL_OW 111
// result := [ _x , _y ] ;
63666: LD_ADDR_VAR 0 3
63670: PUSH
63671: LD_VAR 0 5
63675: PUSH
63676: LD_VAR 0 7
63680: PUSH
63681: EMPTY
63682: LIST
63683: LIST
63684: ST_TO_ADDR
// exit ;
63685: POP
63686: POP
63687: GO 63693
// end ; end ;
63689: GO 63533
63691: POP
63692: POP
// end ;
63693: LD_VAR 0 3
63697: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
63698: LD_INT 0
63700: PPUSH
63701: PPUSH
63702: PPUSH
// result := 0 ;
63703: LD_ADDR_VAR 0 3
63707: PUSH
63708: LD_INT 0
63710: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
63711: LD_VAR 0 1
63715: PUSH
63716: LD_INT 0
63718: LESS
63719: PUSH
63720: LD_VAR 0 1
63724: PUSH
63725: LD_INT 8
63727: GREATER
63728: OR
63729: PUSH
63730: LD_VAR 0 2
63734: PUSH
63735: LD_INT 0
63737: LESS
63738: OR
63739: PUSH
63740: LD_VAR 0 2
63744: PUSH
63745: LD_INT 8
63747: GREATER
63748: OR
63749: IFFALSE 63753
// exit ;
63751: GO 63828
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
63753: LD_ADDR_VAR 0 4
63757: PUSH
63758: LD_INT 22
63760: PUSH
63761: LD_VAR 0 2
63765: PUSH
63766: EMPTY
63767: LIST
63768: LIST
63769: PPUSH
63770: CALL_OW 69
63774: PUSH
63775: FOR_IN
63776: IFFALSE 63826
// begin un := UnitShoot ( i ) ;
63778: LD_ADDR_VAR 0 5
63782: PUSH
63783: LD_VAR 0 4
63787: PPUSH
63788: CALL_OW 504
63792: ST_TO_ADDR
// if GetSide ( un ) = side1 then
63793: LD_VAR 0 5
63797: PPUSH
63798: CALL_OW 255
63802: PUSH
63803: LD_VAR 0 1
63807: EQUAL
63808: IFFALSE 63824
// begin result := un ;
63810: LD_ADDR_VAR 0 3
63814: PUSH
63815: LD_VAR 0 5
63819: ST_TO_ADDR
// exit ;
63820: POP
63821: POP
63822: GO 63828
// end ; end ;
63824: GO 63775
63826: POP
63827: POP
// end ;
63828: LD_VAR 0 3
63832: RET
// export function GetCargoBay ( units ) ; begin
63833: LD_INT 0
63835: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
63836: LD_ADDR_VAR 0 2
63840: PUSH
63841: LD_VAR 0 1
63845: PPUSH
63846: LD_INT 2
63848: PUSH
63849: LD_INT 34
63851: PUSH
63852: LD_INT 12
63854: PUSH
63855: EMPTY
63856: LIST
63857: LIST
63858: PUSH
63859: LD_INT 34
63861: PUSH
63862: LD_INT 51
63864: PUSH
63865: EMPTY
63866: LIST
63867: LIST
63868: PUSH
63869: LD_INT 34
63871: PUSH
63872: LD_INT 32
63874: PUSH
63875: EMPTY
63876: LIST
63877: LIST
63878: PUSH
63879: LD_INT 34
63881: PUSH
63882: LD_EXP 30
63886: PUSH
63887: EMPTY
63888: LIST
63889: LIST
63890: PUSH
63891: EMPTY
63892: LIST
63893: LIST
63894: LIST
63895: LIST
63896: LIST
63897: PPUSH
63898: CALL_OW 72
63902: ST_TO_ADDR
// end ;
63903: LD_VAR 0 2
63907: RET
// export function Negate ( value ) ; begin
63908: LD_INT 0
63910: PPUSH
// result := not value ;
63911: LD_ADDR_VAR 0 2
63915: PUSH
63916: LD_VAR 0 1
63920: NOT
63921: ST_TO_ADDR
// end ;
63922: LD_VAR 0 2
63926: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; begin
63927: LD_INT 0
63929: PPUSH
// if x1 = x2 then
63930: LD_VAR 0 1
63934: PUSH
63935: LD_VAR 0 3
63939: EQUAL
63940: IFFALSE 63974
// begin if y1 > y2 then
63942: LD_VAR 0 2
63946: PUSH
63947: LD_VAR 0 4
63951: GREATER
63952: IFFALSE 63964
// result := 0 else
63954: LD_ADDR_VAR 0 5
63958: PUSH
63959: LD_INT 0
63961: ST_TO_ADDR
63962: GO 63972
// result := 3 ;
63964: LD_ADDR_VAR 0 5
63968: PUSH
63969: LD_INT 3
63971: ST_TO_ADDR
// exit ;
63972: GO 64060
// end ; if y1 = y2 then
63974: LD_VAR 0 2
63978: PUSH
63979: LD_VAR 0 4
63983: EQUAL
63984: IFFALSE 64018
// begin if x1 > x2 then
63986: LD_VAR 0 1
63990: PUSH
63991: LD_VAR 0 3
63995: GREATER
63996: IFFALSE 64008
// result := 1 else
63998: LD_ADDR_VAR 0 5
64002: PUSH
64003: LD_INT 1
64005: ST_TO_ADDR
64006: GO 64016
// result := 4 ;
64008: LD_ADDR_VAR 0 5
64012: PUSH
64013: LD_INT 4
64015: ST_TO_ADDR
// exit ;
64016: GO 64060
// end ; if x1 > x2 and y1 > y2 then
64018: LD_VAR 0 1
64022: PUSH
64023: LD_VAR 0 3
64027: GREATER
64028: PUSH
64029: LD_VAR 0 2
64033: PUSH
64034: LD_VAR 0 4
64038: GREATER
64039: AND
64040: IFFALSE 64052
// result := 2 else
64042: LD_ADDR_VAR 0 5
64046: PUSH
64047: LD_INT 2
64049: ST_TO_ADDR
64050: GO 64060
// result := 5 ;
64052: LD_ADDR_VAR 0 5
64056: PUSH
64057: LD_INT 5
64059: ST_TO_ADDR
// end ;
64060: LD_VAR 0 5
64064: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
64065: LD_INT 0
64067: PPUSH
64068: PPUSH
// if not driver or not IsInUnit ( driver ) then
64069: LD_VAR 0 1
64073: NOT
64074: PUSH
64075: LD_VAR 0 1
64079: PPUSH
64080: CALL_OW 310
64084: NOT
64085: OR
64086: IFFALSE 64090
// exit ;
64088: GO 64180
// vehicle := IsInUnit ( driver ) ;
64090: LD_ADDR_VAR 0 3
64094: PUSH
64095: LD_VAR 0 1
64099: PPUSH
64100: CALL_OW 310
64104: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
64105: LD_VAR 0 1
64109: PPUSH
64110: LD_STRING \
64112: PUSH
64113: LD_INT 0
64115: PUSH
64116: LD_INT 0
64118: PUSH
64119: LD_INT 0
64121: PUSH
64122: LD_INT 0
64124: PUSH
64125: LD_INT 0
64127: PUSH
64128: LD_INT 0
64130: PUSH
64131: EMPTY
64132: LIST
64133: LIST
64134: LIST
64135: LIST
64136: LIST
64137: LIST
64138: LIST
64139: PUSH
64140: LD_STRING E
64142: PUSH
64143: LD_INT 0
64145: PUSH
64146: LD_INT 0
64148: PUSH
64149: LD_VAR 0 3
64153: PUSH
64154: LD_INT 0
64156: PUSH
64157: LD_INT 0
64159: PUSH
64160: LD_INT 0
64162: PUSH
64163: EMPTY
64164: LIST
64165: LIST
64166: LIST
64167: LIST
64168: LIST
64169: LIST
64170: LIST
64171: PUSH
64172: EMPTY
64173: LIST
64174: LIST
64175: PPUSH
64176: CALL_OW 446
// end ;
64180: LD_VAR 0 2
64184: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
64185: LD_INT 0
64187: PPUSH
64188: PPUSH
// if not driver or not IsInUnit ( driver ) then
64189: LD_VAR 0 1
64193: NOT
64194: PUSH
64195: LD_VAR 0 1
64199: PPUSH
64200: CALL_OW 310
64204: NOT
64205: OR
64206: IFFALSE 64210
// exit ;
64208: GO 64300
// vehicle := IsInUnit ( driver ) ;
64210: LD_ADDR_VAR 0 3
64214: PUSH
64215: LD_VAR 0 1
64219: PPUSH
64220: CALL_OW 310
64224: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
64225: LD_VAR 0 1
64229: PPUSH
64230: LD_STRING \
64232: PUSH
64233: LD_INT 0
64235: PUSH
64236: LD_INT 0
64238: PUSH
64239: LD_INT 0
64241: PUSH
64242: LD_INT 0
64244: PUSH
64245: LD_INT 0
64247: PUSH
64248: LD_INT 0
64250: PUSH
64251: EMPTY
64252: LIST
64253: LIST
64254: LIST
64255: LIST
64256: LIST
64257: LIST
64258: LIST
64259: PUSH
64260: LD_STRING E
64262: PUSH
64263: LD_INT 0
64265: PUSH
64266: LD_INT 0
64268: PUSH
64269: LD_VAR 0 3
64273: PUSH
64274: LD_INT 0
64276: PUSH
64277: LD_INT 0
64279: PUSH
64280: LD_INT 0
64282: PUSH
64283: EMPTY
64284: LIST
64285: LIST
64286: LIST
64287: LIST
64288: LIST
64289: LIST
64290: LIST
64291: PUSH
64292: EMPTY
64293: LIST
64294: LIST
64295: PPUSH
64296: CALL_OW 447
// end ;
64300: LD_VAR 0 2
64304: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
64305: LD_INT 0
64307: PPUSH
64308: PPUSH
64309: PPUSH
// tmp := [ ] ;
64310: LD_ADDR_VAR 0 5
64314: PUSH
64315: EMPTY
64316: ST_TO_ADDR
// for i in units do
64317: LD_ADDR_VAR 0 4
64321: PUSH
64322: LD_VAR 0 1
64326: PUSH
64327: FOR_IN
64328: IFFALSE 64366
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
64330: LD_ADDR_VAR 0 5
64334: PUSH
64335: LD_VAR 0 5
64339: PPUSH
64340: LD_VAR 0 5
64344: PUSH
64345: LD_INT 1
64347: PLUS
64348: PPUSH
64349: LD_VAR 0 4
64353: PPUSH
64354: CALL_OW 256
64358: PPUSH
64359: CALL_OW 2
64363: ST_TO_ADDR
64364: GO 64327
64366: POP
64367: POP
// if not tmp then
64368: LD_VAR 0 5
64372: NOT
64373: IFFALSE 64377
// exit ;
64375: GO 64425
// if asc then
64377: LD_VAR 0 2
64381: IFFALSE 64405
// result := SortListByListAsc ( units , tmp ) else
64383: LD_ADDR_VAR 0 3
64387: PUSH
64388: LD_VAR 0 1
64392: PPUSH
64393: LD_VAR 0 5
64397: PPUSH
64398: CALL_OW 76
64402: ST_TO_ADDR
64403: GO 64425
// result := SortListByListDesc ( units , tmp ) ;
64405: LD_ADDR_VAR 0 3
64409: PUSH
64410: LD_VAR 0 1
64414: PPUSH
64415: LD_VAR 0 5
64419: PPUSH
64420: CALL_OW 77
64424: ST_TO_ADDR
// end ;
64425: LD_VAR 0 3
64429: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
64430: LD_INT 0
64432: PPUSH
64433: PPUSH
// task := GetTaskList ( mech ) ;
64434: LD_ADDR_VAR 0 4
64438: PUSH
64439: LD_VAR 0 1
64443: PPUSH
64444: CALL_OW 437
64448: ST_TO_ADDR
// if not task then
64449: LD_VAR 0 4
64453: NOT
64454: IFFALSE 64458
// exit ;
64456: GO 64500
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
64458: LD_ADDR_VAR 0 3
64462: PUSH
64463: LD_VAR 0 4
64467: PUSH
64468: LD_INT 1
64470: ARRAY
64471: PUSH
64472: LD_INT 1
64474: ARRAY
64475: PUSH
64476: LD_STRING r
64478: EQUAL
64479: PUSH
64480: LD_VAR 0 4
64484: PUSH
64485: LD_INT 1
64487: ARRAY
64488: PUSH
64489: LD_INT 4
64491: ARRAY
64492: PUSH
64493: LD_VAR 0 2
64497: EQUAL
64498: AND
64499: ST_TO_ADDR
// end ;
64500: LD_VAR 0 3
64504: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
64505: LD_INT 0
64507: PPUSH
// SetDir ( unit , d ) ;
64508: LD_VAR 0 1
64512: PPUSH
64513: LD_VAR 0 4
64517: PPUSH
64518: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
64522: LD_VAR 0 1
64526: PPUSH
64527: LD_VAR 0 2
64531: PPUSH
64532: LD_VAR 0 3
64536: PPUSH
64537: LD_VAR 0 5
64541: PPUSH
64542: CALL_OW 48
// end ;
64546: LD_VAR 0 6
64550: RET
// export function ToNaturalNumber ( number ) ; begin
64551: LD_INT 0
64553: PPUSH
// result := number div 1 ;
64554: LD_ADDR_VAR 0 2
64558: PUSH
64559: LD_VAR 0 1
64563: PUSH
64564: LD_INT 1
64566: DIV
64567: ST_TO_ADDR
// if number < 0 then
64568: LD_VAR 0 1
64572: PUSH
64573: LD_INT 0
64575: LESS
64576: IFFALSE 64586
// result := 0 ;
64578: LD_ADDR_VAR 0 2
64582: PUSH
64583: LD_INT 0
64585: ST_TO_ADDR
// end ;
64586: LD_VAR 0 2
64590: RET
// export function SortByClass ( units , class ) ; var un ; begin
64591: LD_INT 0
64593: PPUSH
64594: PPUSH
// if not units or not class then
64595: LD_VAR 0 1
64599: NOT
64600: PUSH
64601: LD_VAR 0 2
64605: NOT
64606: OR
64607: IFFALSE 64611
// exit ;
64609: GO 64706
// result := [ ] ;
64611: LD_ADDR_VAR 0 3
64615: PUSH
64616: EMPTY
64617: ST_TO_ADDR
// for un in units do
64618: LD_ADDR_VAR 0 4
64622: PUSH
64623: LD_VAR 0 1
64627: PUSH
64628: FOR_IN
64629: IFFALSE 64704
// if GetClass ( un ) = class then
64631: LD_VAR 0 4
64635: PPUSH
64636: CALL_OW 257
64640: PUSH
64641: LD_VAR 0 2
64645: EQUAL
64646: IFFALSE 64673
// result := Insert ( result , 1 , un ) else
64648: LD_ADDR_VAR 0 3
64652: PUSH
64653: LD_VAR 0 3
64657: PPUSH
64658: LD_INT 1
64660: PPUSH
64661: LD_VAR 0 4
64665: PPUSH
64666: CALL_OW 2
64670: ST_TO_ADDR
64671: GO 64702
// result := Replace ( result , result + 1 , un ) ;
64673: LD_ADDR_VAR 0 3
64677: PUSH
64678: LD_VAR 0 3
64682: PPUSH
64683: LD_VAR 0 3
64687: PUSH
64688: LD_INT 1
64690: PLUS
64691: PPUSH
64692: LD_VAR 0 4
64696: PPUSH
64697: CALL_OW 1
64701: ST_TO_ADDR
64702: GO 64628
64704: POP
64705: POP
// end ;
64706: LD_VAR 0 3
64710: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
64711: LD_INT 0
64713: PPUSH
64714: PPUSH
64715: PPUSH
64716: PPUSH
64717: PPUSH
64718: PPUSH
64719: PPUSH
// result := [ ] ;
64720: LD_ADDR_VAR 0 4
64724: PUSH
64725: EMPTY
64726: ST_TO_ADDR
// if x - r < 0 then
64727: LD_VAR 0 1
64731: PUSH
64732: LD_VAR 0 3
64736: MINUS
64737: PUSH
64738: LD_INT 0
64740: LESS
64741: IFFALSE 64753
// min_x := 0 else
64743: LD_ADDR_VAR 0 8
64747: PUSH
64748: LD_INT 0
64750: ST_TO_ADDR
64751: GO 64769
// min_x := x - r ;
64753: LD_ADDR_VAR 0 8
64757: PUSH
64758: LD_VAR 0 1
64762: PUSH
64763: LD_VAR 0 3
64767: MINUS
64768: ST_TO_ADDR
// if y - r < 0 then
64769: LD_VAR 0 2
64773: PUSH
64774: LD_VAR 0 3
64778: MINUS
64779: PUSH
64780: LD_INT 0
64782: LESS
64783: IFFALSE 64795
// min_y := 0 else
64785: LD_ADDR_VAR 0 7
64789: PUSH
64790: LD_INT 0
64792: ST_TO_ADDR
64793: GO 64811
// min_y := y - r ;
64795: LD_ADDR_VAR 0 7
64799: PUSH
64800: LD_VAR 0 2
64804: PUSH
64805: LD_VAR 0 3
64809: MINUS
64810: ST_TO_ADDR
// max_x := x + r ;
64811: LD_ADDR_VAR 0 9
64815: PUSH
64816: LD_VAR 0 1
64820: PUSH
64821: LD_VAR 0 3
64825: PLUS
64826: ST_TO_ADDR
// max_y := y + r ;
64827: LD_ADDR_VAR 0 10
64831: PUSH
64832: LD_VAR 0 2
64836: PUSH
64837: LD_VAR 0 3
64841: PLUS
64842: ST_TO_ADDR
// for _x = min_x to max_x do
64843: LD_ADDR_VAR 0 5
64847: PUSH
64848: DOUBLE
64849: LD_VAR 0 8
64853: DEC
64854: ST_TO_ADDR
64855: LD_VAR 0 9
64859: PUSH
64860: FOR_TO
64861: IFFALSE 64962
// for _y = min_y to max_y do
64863: LD_ADDR_VAR 0 6
64867: PUSH
64868: DOUBLE
64869: LD_VAR 0 7
64873: DEC
64874: ST_TO_ADDR
64875: LD_VAR 0 10
64879: PUSH
64880: FOR_TO
64881: IFFALSE 64958
// begin if not ValidHex ( _x , _y ) then
64883: LD_VAR 0 5
64887: PPUSH
64888: LD_VAR 0 6
64892: PPUSH
64893: CALL_OW 488
64897: NOT
64898: IFFALSE 64902
// continue ;
64900: GO 64880
// if GetResourceTypeXY ( _x , _y ) then
64902: LD_VAR 0 5
64906: PPUSH
64907: LD_VAR 0 6
64911: PPUSH
64912: CALL_OW 283
64916: IFFALSE 64956
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
64918: LD_ADDR_VAR 0 4
64922: PUSH
64923: LD_VAR 0 4
64927: PPUSH
64928: LD_VAR 0 4
64932: PUSH
64933: LD_INT 1
64935: PLUS
64936: PPUSH
64937: LD_VAR 0 5
64941: PUSH
64942: LD_VAR 0 6
64946: PUSH
64947: EMPTY
64948: LIST
64949: LIST
64950: PPUSH
64951: CALL_OW 1
64955: ST_TO_ADDR
// end ;
64956: GO 64880
64958: POP
64959: POP
64960: GO 64860
64962: POP
64963: POP
// end ;
64964: LD_VAR 0 4
64968: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , cr , side , tag ; begin
64969: LD_INT 0
64971: PPUSH
64972: PPUSH
64973: PPUSH
64974: PPUSH
64975: PPUSH
64976: PPUSH
// if not units then
64977: LD_VAR 0 1
64981: NOT
64982: IFFALSE 64986
// exit ;
64984: GO 65387
// result := UnitFilter ( units , [ f_ok ] ) ;
64986: LD_ADDR_VAR 0 3
64990: PUSH
64991: LD_VAR 0 1
64995: PPUSH
64996: LD_INT 50
64998: PUSH
64999: EMPTY
65000: LIST
65001: PPUSH
65002: CALL_OW 72
65006: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
65007: LD_ADDR_VAR 0 7
65011: PUSH
65012: LD_VAR 0 1
65016: PUSH
65017: LD_INT 1
65019: ARRAY
65020: PPUSH
65021: CALL_OW 255
65025: ST_TO_ADDR
// if not result then
65026: LD_VAR 0 3
65030: NOT
65031: IFFALSE 65035
// exit ;
65033: GO 65387
// for i in result do
65035: LD_ADDR_VAR 0 4
65039: PUSH
65040: LD_VAR 0 3
65044: PUSH
65045: FOR_IN
65046: IFFALSE 65385
// begin tag := GetTag ( i ) + 1 ;
65048: LD_ADDR_VAR 0 8
65052: PUSH
65053: LD_VAR 0 4
65057: PPUSH
65058: CALL_OW 110
65062: PUSH
65063: LD_INT 1
65065: PLUS
65066: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
65067: LD_ADDR_VAR 0 6
65071: PUSH
65072: LD_VAR 0 4
65076: PPUSH
65077: CALL_OW 250
65081: PPUSH
65082: LD_VAR 0 4
65086: PPUSH
65087: CALL_OW 251
65091: PPUSH
65092: LD_INT 6
65094: PPUSH
65095: CALL 64711 0 3
65099: ST_TO_ADDR
// if cr then
65100: LD_VAR 0 6
65104: IFFALSE 65143
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
65106: LD_VAR 0 4
65110: PPUSH
65111: LD_VAR 0 6
65115: PUSH
65116: LD_INT 1
65118: ARRAY
65119: PUSH
65120: LD_INT 1
65122: ARRAY
65123: PPUSH
65124: LD_VAR 0 6
65128: PUSH
65129: LD_INT 1
65131: ARRAY
65132: PUSH
65133: LD_INT 2
65135: ARRAY
65136: PPUSH
65137: CALL_OW 116
65141: GO 65383
// if path > tag then
65143: LD_VAR 0 2
65147: PUSH
65148: LD_VAR 0 8
65152: GREATER
65153: IFFALSE 65331
// begin enemy := FilterAllUnits ( [ [ f_enemy , side ] , [ f_dist , i , 12 ] ] ) ;
65155: LD_ADDR_VAR 0 5
65159: PUSH
65160: LD_INT 81
65162: PUSH
65163: LD_VAR 0 7
65167: PUSH
65168: EMPTY
65169: LIST
65170: LIST
65171: PUSH
65172: LD_INT 91
65174: PUSH
65175: LD_VAR 0 4
65179: PUSH
65180: LD_INT 12
65182: PUSH
65183: EMPTY
65184: LIST
65185: LIST
65186: LIST
65187: PUSH
65188: EMPTY
65189: LIST
65190: LIST
65191: PPUSH
65192: CALL_OW 69
65196: ST_TO_ADDR
// if enemy then
65197: LD_VAR 0 5
65201: IFFALSE 65229
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
65203: LD_VAR 0 4
65207: PPUSH
65208: LD_VAR 0 5
65212: PPUSH
65213: LD_VAR 0 4
65217: PPUSH
65218: CALL_OW 74
65222: PPUSH
65223: CALL_OW 115
65227: GO 65329
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
65229: LD_VAR 0 4
65233: PPUSH
65234: LD_VAR 0 2
65238: PUSH
65239: LD_VAR 0 8
65243: ARRAY
65244: PUSH
65245: LD_INT 1
65247: ARRAY
65248: PPUSH
65249: LD_VAR 0 2
65253: PUSH
65254: LD_VAR 0 8
65258: ARRAY
65259: PUSH
65260: LD_INT 2
65262: ARRAY
65263: PPUSH
65264: CALL_OW 297
65268: PUSH
65269: LD_INT 6
65271: GREATER
65272: IFFALSE 65315
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
65274: LD_VAR 0 4
65278: PPUSH
65279: LD_VAR 0 2
65283: PUSH
65284: LD_VAR 0 8
65288: ARRAY
65289: PUSH
65290: LD_INT 1
65292: ARRAY
65293: PPUSH
65294: LD_VAR 0 2
65298: PUSH
65299: LD_VAR 0 8
65303: ARRAY
65304: PUSH
65305: LD_INT 2
65307: ARRAY
65308: PPUSH
65309: CALL_OW 114
65313: GO 65329
// SetTag ( i , tag ) ;
65315: LD_VAR 0 4
65319: PPUSH
65320: LD_VAR 0 8
65324: PPUSH
65325: CALL_OW 109
// end else
65329: GO 65383
// begin enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
65331: LD_ADDR_VAR 0 5
65335: PUSH
65336: LD_INT 81
65338: PUSH
65339: LD_VAR 0 7
65343: PUSH
65344: EMPTY
65345: LIST
65346: LIST
65347: PPUSH
65348: CALL_OW 69
65352: ST_TO_ADDR
// if enemy then
65353: LD_VAR 0 5
65357: IFFALSE 65383
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
65359: LD_VAR 0 4
65363: PPUSH
65364: LD_VAR 0 5
65368: PPUSH
65369: LD_VAR 0 4
65373: PPUSH
65374: CALL_OW 74
65378: PPUSH
65379: CALL_OW 115
// end ; end ;
65383: GO 65045
65385: POP
65386: POP
// end ; end_of_file
65387: LD_VAR 0 3
65391: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
65392: LD_VAR 0 1
65396: PUSH
65397: LD_INT 200
65399: DOUBLE
65400: GREATEREQUAL
65401: IFFALSE 65409
65403: LD_INT 299
65405: DOUBLE
65406: LESSEQUAL
65407: IFTRUE 65411
65409: GO 65443
65411: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
65412: LD_VAR 0 1
65416: PPUSH
65417: LD_VAR 0 2
65421: PPUSH
65422: LD_VAR 0 3
65426: PPUSH
65427: LD_VAR 0 4
65431: PPUSH
65432: LD_VAR 0 5
65436: PPUSH
65437: CALL 21954 0 5
65441: GO 65520
65443: LD_INT 300
65445: DOUBLE
65446: GREATEREQUAL
65447: IFFALSE 65455
65449: LD_INT 399
65451: DOUBLE
65452: LESSEQUAL
65453: IFTRUE 65457
65455: GO 65519
65457: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
65458: LD_VAR 0 1
65462: PPUSH
65463: LD_VAR 0 2
65467: PPUSH
65468: LD_VAR 0 3
65472: PPUSH
65473: LD_VAR 0 4
65477: PPUSH
65478: LD_VAR 0 5
65482: PPUSH
65483: LD_VAR 0 6
65487: PPUSH
65488: LD_VAR 0 7
65492: PPUSH
65493: LD_VAR 0 8
65497: PPUSH
65498: LD_VAR 0 9
65502: PPUSH
65503: LD_VAR 0 10
65507: PPUSH
65508: LD_VAR 0 11
65512: PPUSH
65513: CALL 19852 0 11
65517: GO 65520
65519: POP
// end ;
65520: PPOPN 11
65522: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
65523: LD_VAR 0 1
65527: PPUSH
65528: LD_VAR 0 2
65532: PPUSH
65533: LD_VAR 0 3
65537: PPUSH
65538: LD_VAR 0 4
65542: PPUSH
65543: LD_VAR 0 5
65547: PPUSH
65548: CALL 21946 0 5
// end ; end_of_file
65552: PPOPN 5
65554: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
65555: LD_VAR 0 1
65559: PPUSH
65560: LD_VAR 0 2
65564: PPUSH
65565: LD_VAR 0 3
65569: PPUSH
65570: LD_VAR 0 4
65574: PPUSH
65575: LD_VAR 0 5
65579: PPUSH
65580: LD_VAR 0 6
65584: PPUSH
65585: CALL 8047 0 6
// end ;
65589: PPOPN 6
65591: END
