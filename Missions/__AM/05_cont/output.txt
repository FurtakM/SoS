// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RandomizeAll ;
  11: CALL_OW 11
// Init ;
  15: CALL 87 0 0
// InitRestrictions ;
  19: CALL 223 0 0
// if debug then
  23: LD_EXP 1
  27: IFFALSE 33
// DebugMode ;
  29: CALL 304 0 0
// SpawnApeman ( apemanStartArea , 2 ) ;
  33: LD_INT 12
  35: PPUSH
  36: LD_INT 2
  38: PPUSH
  39: CALL 798 0 2
// SpawnApeman ( apemanArea , [ 10 , 8 , 7 , 6 ] [ Difficulty ] ) ;
  43: LD_INT 11
  45: PPUSH
  46: LD_INT 10
  48: PUSH
  49: LD_INT 8
  51: PUSH
  52: LD_INT 7
  54: PUSH
  55: LD_INT 6
  57: PUSH
  58: EMPTY
  59: LIST
  60: LIST
  61: LIST
  62: LIST
  63: PUSH
  64: LD_OWVAR 67
  68: ARRAY
  69: PPUSH
  70: CALL 798 0 2
// CreateNature ;
  74: CALL 531 0 0
// PrepareAmericans ;
  78: CALL 1397 0 0
// Action ;
  82: CALL 2333 0 0
// end ;
  86: END
// export debug ; export mission_prefix , mission_prefix_prev ; export deltaBuilded , denisArrives , Delta , radar_allowed , first_apeman_tamed , apeman_army , radar_researched , radar_builded ; export apeman_counter , arab_spotted , end_mission , apeKillCounter , traitor ; function Init ; begin
  87: LD_INT 0
  89: PPUSH
// debug := false ;
  90: LD_ADDR_EXP 1
  94: PUSH
  95: LD_INT 0
  97: ST_TO_ADDR
// mission_prefix := 05_ ;
  98: LD_ADDR_EXP 2
 102: PUSH
 103: LD_STRING 05_
 105: ST_TO_ADDR
// mission_prefix_prev := 05a_ ;
 106: LD_ADDR_EXP 3
 110: PUSH
 111: LD_STRING 05a_
 113: ST_TO_ADDR
// deltaBuilded := false ;
 114: LD_ADDR_EXP 4
 118: PUSH
 119: LD_INT 0
 121: ST_TO_ADDR
// denisArrives := false ;
 122: LD_ADDR_EXP 5
 126: PUSH
 127: LD_INT 0
 129: ST_TO_ADDR
// radar_allowed := false ;
 130: LD_ADDR_EXP 7
 134: PUSH
 135: LD_INT 0
 137: ST_TO_ADDR
// first_apeman_tamed := false ;
 138: LD_ADDR_EXP 8
 142: PUSH
 143: LD_INT 0
 145: ST_TO_ADDR
// arab_spotted := false ;
 146: LD_ADDR_EXP 13
 150: PUSH
 151: LD_INT 0
 153: ST_TO_ADDR
// end_mission := false ;
 154: LD_ADDR_EXP 14
 158: PUSH
 159: LD_INT 0
 161: ST_TO_ADDR
// apeman_army := false ;
 162: LD_ADDR_EXP 9
 166: PUSH
 167: LD_INT 0
 169: ST_TO_ADDR
// radar_researched := false ;
 170: LD_ADDR_EXP 10
 174: PUSH
 175: LD_INT 0
 177: ST_TO_ADDR
// radar_builded := false ;
 178: LD_ADDR_EXP 11
 182: PUSH
 183: LD_INT 0
 185: ST_TO_ADDR
// apeman_counter := 0 ;
 186: LD_ADDR_EXP 12
 190: PUSH
 191: LD_INT 0
 193: ST_TO_ADDR
// Delta := 0 ;
 194: LD_ADDR_EXP 6
 198: PUSH
 199: LD_INT 0
 201: ST_TO_ADDR
// apeKillCounter := 0 ;
 202: LD_ADDR_EXP 15
 206: PUSH
 207: LD_INT 0
 209: ST_TO_ADDR
// traitor := false ;
 210: LD_ADDR_EXP 16
 214: PUSH
 215: LD_INT 0
 217: ST_TO_ADDR
// end ;
 218: LD_VAR 0 1
 222: RET
// function InitRestrictions ; begin
 223: LD_INT 0
 225: PPUSH
// SetRestrict ( b_lab_half , 1 , state_enabled ) ;
 226: LD_INT 7
 228: PPUSH
 229: LD_INT 1
 231: PPUSH
 232: LD_INT 1
 234: PPUSH
 235: CALL_OW 324
// SetRestrict ( b_lab_full , 1 , state_enabled ) ;
 239: LD_INT 8
 241: PPUSH
 242: LD_INT 1
 244: PPUSH
 245: LD_INT 1
 247: PPUSH
 248: CALL_OW 324
// SetRestrict ( b_lab_weapon , 1 , state_enabled ) ;
 252: LD_INT 10
 254: PPUSH
 255: LD_INT 1
 257: PPUSH
 258: LD_INT 1
 260: PPUSH
 261: CALL_OW 324
// SetTech ( tech_gatling , 1 , LoadVariable ( GatlingInGamma , 1 ) ) ;
 265: LD_INT 69
 267: PPUSH
 268: LD_INT 1
 270: PPUSH
 271: LD_STRING GatlingInGamma
 273: PPUSH
 274: LD_INT 1
 276: PPUSH
 277: CALL_OW 30
 281: PPUSH
 282: CALL_OW 322
// SetTech ( tech_weap1 , 1 , state_enabled ) ;
 286: LD_INT 51
 288: PPUSH
 289: LD_INT 1
 291: PPUSH
 292: LD_INT 1
 294: PPUSH
 295: CALL_OW 322
// end ;
 299: LD_VAR 0 1
 303: RET
// function DebugMode ; begin
 304: LD_INT 0
 306: PPUSH
// FogOff ( 1 ) ;
 307: LD_INT 1
 309: PPUSH
 310: CALL_OW 344
// Difficulty := 2 ;
 314: LD_ADDR_OWVAR 67
 318: PUSH
 319: LD_INT 2
 321: ST_TO_ADDR
// end ;
 322: LD_VAR 0 1
 326: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 0 ] ] ) >= 7 do
 327: LD_INT 22
 329: PUSH
 330: LD_INT 1
 332: PUSH
 333: EMPTY
 334: LIST
 335: LIST
 336: PUSH
 337: LD_INT 23
 339: PUSH
 340: LD_INT 0
 342: PUSH
 343: EMPTY
 344: LIST
 345: LIST
 346: PUSH
 347: EMPTY
 348: LIST
 349: LIST
 350: PPUSH
 351: CALL_OW 69
 355: PUSH
 356: LD_INT 7
 358: GREATEREQUAL
 359: IFFALSE 371
 361: GO 363
 363: DISABLE
// SetAchievement ( ACH_TAME ) ;
 364: LD_STRING ACH_TAME
 366: PPUSH
 367: CALL_OW 543
 371: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_bweapon , us_radar ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_radar ] ] ) do
 372: LD_INT 22
 374: PUSH
 375: LD_INT 1
 377: PUSH
 378: EMPTY
 379: LIST
 380: LIST
 381: PUSH
 382: LD_INT 35
 384: PUSH
 385: LD_INT 11
 387: PUSH
 388: EMPTY
 389: LIST
 390: LIST
 391: PUSH
 392: EMPTY
 393: LIST
 394: LIST
 395: PPUSH
 396: CALL_OW 69
 400: PUSH
 401: LD_INT 22
 403: PUSH
 404: LD_INT 1
 406: PUSH
 407: EMPTY
 408: LIST
 409: LIST
 410: PUSH
 411: LD_INT 34
 413: PUSH
 414: LD_INT 11
 416: PUSH
 417: EMPTY
 418: LIST
 419: LIST
 420: PUSH
 421: EMPTY
 422: LIST
 423: LIST
 424: PPUSH
 425: CALL_OW 69
 429: AND
 430: IFFALSE 442
 432: GO 434
 434: DISABLE
// SetAchievement ( ACH_RADAR ) ; end_of_file
 435: LD_STRING ACH_RADAR
 437: PPUSH
 438: CALL_OW 543
 442: END
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 443: LD_INT 0
 445: PPUSH
// uc_side := side ;
 446: LD_ADDR_OWVAR 20
 450: PUSH
 451: LD_VAR 0 1
 455: ST_TO_ADDR
// uc_nation := nation ;
 456: LD_ADDR_OWVAR 21
 460: PUSH
 461: LD_VAR 0 2
 465: ST_TO_ADDR
// vc_chassis := chassis ;
 466: LD_ADDR_OWVAR 37
 470: PUSH
 471: LD_VAR 0 3
 475: ST_TO_ADDR
// vc_engine := engine ;
 476: LD_ADDR_OWVAR 39
 480: PUSH
 481: LD_VAR 0 4
 485: ST_TO_ADDR
// vc_control := control ;
 486: LD_ADDR_OWVAR 38
 490: PUSH
 491: LD_VAR 0 5
 495: ST_TO_ADDR
// vc_weapon := weapon ;
 496: LD_ADDR_OWVAR 40
 500: PUSH
 501: LD_VAR 0 6
 505: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 506: LD_ADDR_OWVAR 41
 510: PUSH
 511: LD_VAR 0 7
 515: ST_TO_ADDR
// result := CreateVehicle ;
 516: LD_ADDR_VAR 0 8
 520: PUSH
 521: CALL_OW 45
 525: ST_TO_ADDR
// end ;
 526: LD_VAR 0 8
 530: RET
// export function CreateNature ; var i ; begin
 531: LD_INT 0
 533: PPUSH
 534: PPUSH
// for i := 1 to 4 do
 535: LD_ADDR_VAR 0 2
 539: PUSH
 540: DOUBLE
 541: LD_INT 1
 543: DEC
 544: ST_TO_ADDR
 545: LD_INT 4
 547: PUSH
 548: FOR_TO
 549: IFFALSE 572
// begin PrepareFrog ( ) ;
 551: CALL 64310 0 0
// PlaceUnitArea ( CreateHuman , swampArea , false ) ;
 555: CALL_OW 44
 559: PPUSH
 560: LD_INT 17
 562: PPUSH
 563: LD_INT 0
 565: PPUSH
 566: CALL_OW 49
// end ;
 570: GO 548
 572: POP
 573: POP
// for i := 1 to 6 do
 574: LD_ADDR_VAR 0 2
 578: PUSH
 579: DOUBLE
 580: LD_INT 1
 582: DEC
 583: ST_TO_ADDR
 584: LD_INT 6
 586: PUSH
 587: FOR_TO
 588: IFFALSE 611
// begin PrepareBird ( ) ;
 590: CALL 64390 0 0
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 594: CALL_OW 44
 598: PPUSH
 599: LD_INT 1
 601: PPUSH
 602: LD_INT 0
 604: PPUSH
 605: CALL_OW 49
// end ;
 609: GO 587
 611: POP
 612: POP
// for i := 1 to 11 do
 613: LD_ADDR_VAR 0 2
 617: PUSH
 618: DOUBLE
 619: LD_INT 1
 621: DEC
 622: ST_TO_ADDR
 623: LD_INT 11
 625: PUSH
 626: FOR_TO
 627: IFFALSE 650
// begin PrepareEnchidna ( ) ;
 629: CALL 64270 0 0
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 633: CALL_OW 44
 637: PPUSH
 638: LD_INT 1
 640: PPUSH
 641: LD_INT 0
 643: PPUSH
 644: CALL_OW 49
// end ;
 648: GO 626
 650: POP
 651: POP
// for i := 1 to 3 do
 652: LD_ADDR_VAR 0 2
 656: PUSH
 657: DOUBLE
 658: LD_INT 1
 660: DEC
 661: ST_TO_ADDR
 662: LD_INT 3
 664: PUSH
 665: FOR_TO
 666: IFFALSE 692
// begin PrepareTiger ( 10 ) ;
 668: LD_INT 10
 670: PPUSH
 671: CALL 64209 0 1
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 675: CALL_OW 44
 679: PPUSH
 680: LD_INT 1
 682: PPUSH
 683: LD_INT 0
 685: PPUSH
 686: CALL_OW 49
// end ;
 690: GO 665
 692: POP
 693: POP
// PrepareMastodont ( ) ;
 694: CALL 64470 0 0
// PlaceUnitArea ( CreateVehicle , mastodontArea , false ) ;
 698: CALL_OW 45
 702: PPUSH
 703: LD_INT 18
 705: PPUSH
 706: LD_INT 0
 708: PPUSH
 709: CALL_OW 49
// end ;
 713: LD_VAR 0 1
 717: RET
// export function SayX ( units , ident ) ; var i ; begin
 718: LD_INT 0
 720: PPUSH
 721: PPUSH
// result := false ;
 722: LD_ADDR_VAR 0 3
 726: PUSH
 727: LD_INT 0
 729: ST_TO_ADDR
// if not units then
 730: LD_VAR 0 1
 734: NOT
 735: IFFALSE 739
// exit ;
 737: GO 793
// for i in units do
 739: LD_ADDR_VAR 0 4
 743: PUSH
 744: LD_VAR 0 1
 748: PUSH
 749: FOR_IN
 750: IFFALSE 791
// if IsOk ( i ) then
 752: LD_VAR 0 4
 756: PPUSH
 757: CALL_OW 302
 761: IFFALSE 789
// begin Say ( i , ident ) ;
 763: LD_VAR 0 4
 767: PPUSH
 768: LD_VAR 0 2
 772: PPUSH
 773: CALL_OW 88
// result := i ;
 777: LD_ADDR_VAR 0 3
 781: PUSH
 782: LD_VAR 0 4
 786: ST_TO_ADDR
// break ;
 787: GO 791
// end ;
 789: GO 749
 791: POP
 792: POP
// end ;
 793: LD_VAR 0 3
 797: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 798: LD_INT 0
 800: PPUSH
 801: PPUSH
// InitUc ;
 802: CALL_OW 18
// InitHc ;
 806: CALL_OW 19
// uc_side := 0 ;
 810: LD_ADDR_OWVAR 20
 814: PUSH
 815: LD_INT 0
 817: ST_TO_ADDR
// uc_nation := 0 ;
 818: LD_ADDR_OWVAR 21
 822: PUSH
 823: LD_INT 0
 825: ST_TO_ADDR
// for i = 1 to amount do
 826: LD_ADDR_VAR 0 4
 830: PUSH
 831: DOUBLE
 832: LD_INT 1
 834: DEC
 835: ST_TO_ADDR
 836: LD_VAR 0 2
 840: PUSH
 841: FOR_TO
 842: IFFALSE 924
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 844: LD_ADDR_OWVAR 29
 848: PUSH
 849: LD_INT 9
 851: PPUSH
 852: LD_INT 12
 854: PPUSH
 855: CALL_OW 12
 859: PUSH
 860: LD_INT 9
 862: PPUSH
 863: LD_INT 12
 865: PPUSH
 866: CALL_OW 12
 870: PUSH
 871: EMPTY
 872: LIST
 873: LIST
 874: ST_TO_ADDR
// hc_agressivity := rand ( - 5 , 5 ) ;
 875: LD_ADDR_OWVAR 35
 879: PUSH
 880: LD_INT 5
 882: NEG
 883: PPUSH
 884: LD_INT 5
 886: PPUSH
 887: CALL_OW 12
 891: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 892: LD_INT 0
 894: PPUSH
 895: LD_INT 12
 897: PPUSH
 898: LD_INT 1
 900: PPUSH
 901: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 905: CALL_OW 44
 909: PPUSH
 910: LD_VAR 0 1
 914: PPUSH
 915: LD_INT 0
 917: PPUSH
 918: CALL_OW 49
// end ;
 922: GO 841
 924: POP
 925: POP
// InitHc ;
 926: CALL_OW 19
// end ;
 930: LD_VAR 0 3
 934: RET
// export function Attack ( unit , enemy_list ) ; var target , targets_list ; begin
 935: LD_INT 0
 937: PPUSH
 938: PPUSH
 939: PPUSH
// if not unit then
 940: LD_VAR 0 1
 944: NOT
 945: IFFALSE 949
// exit ;
 947: GO 1392
// if IsInUnit ( unit ) then
 949: LD_VAR 0 1
 953: PPUSH
 954: CALL_OW 310
 958: IFFALSE 975
// unit := IsDrivenBy ( unit ) ;
 960: LD_ADDR_VAR 0 1
 964: PUSH
 965: LD_VAR 0 1
 969: PPUSH
 970: CALL_OW 311
 974: ST_TO_ADDR
// targets_list := [ ] ;
 975: LD_ADDR_VAR 0 5
 979: PUSH
 980: EMPTY
 981: ST_TO_ADDR
// target := UnitFilter ( enemy_list , [ [ f_lives , 250 ] , [ f_not , [ f_weapon , us_cargo_bay ] ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 982: LD_ADDR_VAR 0 4
 986: PUSH
 987: LD_VAR 0 2
 991: PPUSH
 992: LD_INT 24
 994: PUSH
 995: LD_INT 250
 997: PUSH
 998: EMPTY
 999: LIST
1000: LIST
1001: PUSH
1002: LD_INT 3
1004: PUSH
1005: LD_INT 34
1007: PUSH
1008: LD_INT 12
1010: PUSH
1011: EMPTY
1012: LIST
1013: LIST
1014: PUSH
1015: EMPTY
1016: LIST
1017: LIST
1018: PUSH
1019: LD_INT 21
1021: PUSH
1022: LD_INT 2
1024: PUSH
1025: EMPTY
1026: LIST
1027: LIST
1028: PUSH
1029: LD_INT 58
1031: PUSH
1032: EMPTY
1033: LIST
1034: PUSH
1035: EMPTY
1036: LIST
1037: LIST
1038: LIST
1039: LIST
1040: PPUSH
1041: CALL_OW 72
1045: ST_TO_ADDR
// if GetDistUnits ( NearestUnitToUnit ( target , unit ) , unit ) < 11 and not IsInUnit ( unit ) then
1046: LD_VAR 0 4
1050: PPUSH
1051: LD_VAR 0 1
1055: PPUSH
1056: CALL_OW 74
1060: PPUSH
1061: LD_VAR 0 1
1065: PPUSH
1066: CALL_OW 296
1070: PUSH
1071: LD_INT 11
1073: LESS
1074: PUSH
1075: LD_VAR 0 1
1079: PPUSH
1080: CALL_OW 310
1084: NOT
1085: AND
1086: IFFALSE 1114
// begin ComEnterUnit ( unit , NearestUnitToUnit ( target , unit ) ) ;
1088: LD_VAR 0 1
1092: PPUSH
1093: LD_VAR 0 4
1097: PPUSH
1098: LD_VAR 0 1
1102: PPUSH
1103: CALL_OW 74
1107: PPUSH
1108: CALL_OW 120
// exit ;
1112: GO 1392
// end ; targets_list := [ UnitFilter ( enemy_list , [ [ f_type , unit_human ] , [ f_not , [ f_inside ] ] ] ) , UnitFilter ( enemy_list , [ f_type , unit_vehicle ] ) , UnitFilter ( enemy_list , [ [ f_type , unit_building ] , [ f_not , [ f_empty ] ] ] ) , enemy_list ] ;
1114: LD_ADDR_VAR 0 5
1118: PUSH
1119: LD_VAR 0 2
1123: PPUSH
1124: LD_INT 21
1126: PUSH
1127: LD_INT 1
1129: PUSH
1130: EMPTY
1131: LIST
1132: LIST
1133: PUSH
1134: LD_INT 3
1136: PUSH
1137: LD_INT 54
1139: PUSH
1140: EMPTY
1141: LIST
1142: PUSH
1143: EMPTY
1144: LIST
1145: LIST
1146: PUSH
1147: EMPTY
1148: LIST
1149: LIST
1150: PPUSH
1151: CALL_OW 72
1155: PUSH
1156: LD_VAR 0 2
1160: PPUSH
1161: LD_INT 21
1163: PUSH
1164: LD_INT 2
1166: PUSH
1167: EMPTY
1168: LIST
1169: LIST
1170: PPUSH
1171: CALL_OW 72
1175: PUSH
1176: LD_VAR 0 2
1180: PPUSH
1181: LD_INT 21
1183: PUSH
1184: LD_INT 3
1186: PUSH
1187: EMPTY
1188: LIST
1189: LIST
1190: PUSH
1191: LD_INT 3
1193: PUSH
1194: LD_INT 58
1196: PUSH
1197: EMPTY
1198: LIST
1199: PUSH
1200: EMPTY
1201: LIST
1202: LIST
1203: PUSH
1204: EMPTY
1205: LIST
1206: LIST
1207: PPUSH
1208: CALL_OW 72
1212: PUSH
1213: LD_VAR 0 2
1217: PUSH
1218: EMPTY
1219: LIST
1220: LIST
1221: LIST
1222: LIST
1223: ST_TO_ADDR
// for target in targets_list do
1224: LD_ADDR_VAR 0 4
1228: PUSH
1229: LD_VAR 0 5
1233: PUSH
1234: FOR_IN
1235: IFFALSE 1390
// begin if target then
1237: LD_VAR 0 4
1241: IFFALSE 1388
// if GetTag ( unit ) = 11 and ( GetType ( NearestUnitToUnit ( target , unit ) ) = unit_building or GetWeapon ( NearestUnitToUnit ( target , unit ) ) = us_cargo_bay ) then
1243: LD_VAR 0 1
1247: PPUSH
1248: CALL_OW 110
1252: PUSH
1253: LD_INT 11
1255: EQUAL
1256: PUSH
1257: LD_VAR 0 4
1261: PPUSH
1262: LD_VAR 0 1
1266: PPUSH
1267: CALL_OW 74
1271: PPUSH
1272: CALL_OW 247
1276: PUSH
1277: LD_INT 3
1279: EQUAL
1280: PUSH
1281: LD_VAR 0 4
1285: PPUSH
1286: LD_VAR 0 1
1290: PPUSH
1291: CALL_OW 74
1295: PPUSH
1296: CALL_OW 264
1300: PUSH
1301: LD_INT 12
1303: EQUAL
1304: OR
1305: AND
1306: IFFALSE 1352
// begin ComPlaceDelayedCharge ( unit , 0 , 0 , NearestUnitToUnit ( target , unit ) ) ;
1308: LD_VAR 0 1
1312: PPUSH
1313: LD_INT 0
1315: PPUSH
1316: LD_INT 0
1318: PPUSH
1319: LD_VAR 0 4
1323: PPUSH
1324: LD_VAR 0 1
1328: PPUSH
1329: CALL_OW 74
1333: PPUSH
1334: CALL_OW 132
// SetTag ( unit , 0 ) ;
1338: LD_VAR 0 1
1342: PPUSH
1343: LD_INT 0
1345: PPUSH
1346: CALL_OW 109
// end else
1350: GO 1388
// if not HasTask ( unit ) then
1352: LD_VAR 0 1
1356: PPUSH
1357: CALL_OW 314
1361: NOT
1362: IFFALSE 1388
// ComAttackUnit ( unit , NearestUnitToUnit ( target , unit ) ) ;
1364: LD_VAR 0 1
1368: PPUSH
1369: LD_VAR 0 4
1373: PPUSH
1374: LD_VAR 0 1
1378: PPUSH
1379: CALL_OW 74
1383: PPUSH
1384: CALL_OW 115
// end ;
1388: GO 1234
1390: POP
1391: POP
// end ; end_of_file
1392: LD_VAR 0 3
1396: RET
// export JMM , Gladstone , Harrison , Denis , Brown , Donaldson , Lisa , Frank , Bobby , Cyrus , Mike ; export others ; export function PrepareAmericans ; var i , points , veh , tmp ; begin
1397: LD_INT 0
1399: PPUSH
1400: PPUSH
1401: PPUSH
1402: PPUSH
1403: PPUSH
// uc_nation := 1 ;
1404: LD_ADDR_OWVAR 21
1408: PUSH
1409: LD_INT 1
1411: ST_TO_ADDR
// uc_side := 4 ;
1412: LD_ADDR_OWVAR 20
1416: PUSH
1417: LD_INT 4
1419: ST_TO_ADDR
// Denis := PrepareUnit ( Denis , false ,  ) ;
1420: LD_ADDR_EXP 20
1424: PUSH
1425: LD_STRING Denis
1427: PPUSH
1428: LD_INT 0
1430: PPUSH
1431: LD_STRING 
1433: PPUSH
1434: CALL 30101 0 3
1438: ST_TO_ADDR
// Harrison := PrepareUnit ( Harisson , false ,  ) ;
1439: LD_ADDR_EXP 19
1443: PUSH
1444: LD_STRING Harisson
1446: PPUSH
1447: LD_INT 0
1449: PPUSH
1450: LD_STRING 
1452: PPUSH
1453: CALL 30101 0 3
1457: ST_TO_ADDR
// uc_side := 1 ;
1458: LD_ADDR_OWVAR 20
1462: PUSH
1463: LD_INT 1
1465: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debug ) , mission_prefix_prev ) ;
1466: LD_ADDR_EXP 17
1470: PUSH
1471: LD_STRING JMM
1473: PPUSH
1474: LD_EXP 1
1478: NOT
1479: PPUSH
1480: LD_EXP 3
1484: PPUSH
1485: CALL 30101 0 3
1489: ST_TO_ADDR
// Gladstone := PrepareUnit ( Gladstone , false , mission_prefix_prev ) ;
1490: LD_ADDR_EXP 18
1494: PUSH
1495: LD_STRING Gladstone
1497: PPUSH
1498: LD_INT 0
1500: PPUSH
1501: LD_EXP 3
1505: PPUSH
1506: CALL 30101 0 3
1510: ST_TO_ADDR
// if LoadVariable ( BrownInDelta , debug ) then
1511: LD_STRING BrownInDelta
1513: PPUSH
1514: LD_EXP 1
1518: PPUSH
1519: CALL_OW 30
1523: IFFALSE 1565
// begin Brown := PrepareUnit ( Brown , ( not debug ) , mission_prefix_prev ) ;
1525: LD_ADDR_EXP 21
1529: PUSH
1530: LD_STRING Brown
1532: PPUSH
1533: LD_EXP 1
1537: NOT
1538: PPUSH
1539: LD_EXP 3
1543: PPUSH
1544: CALL 30101 0 3
1548: ST_TO_ADDR
// tmp := tmp ^ Brown ;
1549: LD_ADDR_VAR 0 5
1553: PUSH
1554: LD_VAR 0 5
1558: PUSH
1559: LD_EXP 21
1563: ADD
1564: ST_TO_ADDR
// end ; if LoadVariable ( DonaldsonInDelta , debug ) then
1565: LD_STRING DonaldsonInDelta
1567: PPUSH
1568: LD_EXP 1
1572: PPUSH
1573: CALL_OW 30
1577: IFFALSE 1619
// begin Donaldson := PrepareUnit ( Donaldson , ( not debug ) , mission_prefix_prev ) ;
1579: LD_ADDR_EXP 22
1583: PUSH
1584: LD_STRING Donaldson
1586: PPUSH
1587: LD_EXP 1
1591: NOT
1592: PPUSH
1593: LD_EXP 3
1597: PPUSH
1598: CALL 30101 0 3
1602: ST_TO_ADDR
// tmp := tmp ^ Donaldson ;
1603: LD_ADDR_VAR 0 5
1607: PUSH
1608: LD_VAR 0 5
1612: PUSH
1613: LD_EXP 22
1617: ADD
1618: ST_TO_ADDR
// end ; if LoadVariable ( LisaInDelta , debug ) then
1619: LD_STRING LisaInDelta
1621: PPUSH
1622: LD_EXP 1
1626: PPUSH
1627: CALL_OW 30
1631: IFFALSE 1673
// begin Lisa := PrepareUnit ( Lisa , ( not debug ) , mission_prefix_prev ) ;
1633: LD_ADDR_EXP 23
1637: PUSH
1638: LD_STRING Lisa
1640: PPUSH
1641: LD_EXP 1
1645: NOT
1646: PPUSH
1647: LD_EXP 3
1651: PPUSH
1652: CALL 30101 0 3
1656: ST_TO_ADDR
// tmp := tmp ^ Lisa ;
1657: LD_ADDR_VAR 0 5
1661: PUSH
1662: LD_VAR 0 5
1666: PUSH
1667: LD_EXP 23
1671: ADD
1672: ST_TO_ADDR
// end ; if LoadVariable ( FrankInDelta , debug ) then
1673: LD_STRING FrankInDelta
1675: PPUSH
1676: LD_EXP 1
1680: PPUSH
1681: CALL_OW 30
1685: IFFALSE 1727
// begin Frank := PrepareUnit ( Frank , ( not debug ) , mission_prefix_prev ) ;
1687: LD_ADDR_EXP 24
1691: PUSH
1692: LD_STRING Frank
1694: PPUSH
1695: LD_EXP 1
1699: NOT
1700: PPUSH
1701: LD_EXP 3
1705: PPUSH
1706: CALL 30101 0 3
1710: ST_TO_ADDR
// tmp := tmp ^ Frank ;
1711: LD_ADDR_VAR 0 5
1715: PUSH
1716: LD_VAR 0 5
1720: PUSH
1721: LD_EXP 24
1725: ADD
1726: ST_TO_ADDR
// end ; if LoadVariable ( BobbyInDelta , 0 ) then
1727: LD_STRING BobbyInDelta
1729: PPUSH
1730: LD_INT 0
1732: PPUSH
1733: CALL_OW 30
1737: IFFALSE 1779
// begin Bobby := PrepareUnit ( Bobby , ( not debug ) , mission_prefix_prev ) ;
1739: LD_ADDR_EXP 25
1743: PUSH
1744: LD_STRING Bobby
1746: PPUSH
1747: LD_EXP 1
1751: NOT
1752: PPUSH
1753: LD_EXP 3
1757: PPUSH
1758: CALL 30101 0 3
1762: ST_TO_ADDR
// tmp := tmp ^ Bobby ;
1763: LD_ADDR_VAR 0 5
1767: PUSH
1768: LD_VAR 0 5
1772: PUSH
1773: LD_EXP 25
1777: ADD
1778: ST_TO_ADDR
// end ; if LoadVariable ( CyrusInDelta , 0 ) then
1779: LD_STRING CyrusInDelta
1781: PPUSH
1782: LD_INT 0
1784: PPUSH
1785: CALL_OW 30
1789: IFFALSE 1831
// begin Cyrus := PrepareUnit ( Cyrus , ( not debug ) , mission_prefix_prev ) ;
1791: LD_ADDR_EXP 26
1795: PUSH
1796: LD_STRING Cyrus
1798: PPUSH
1799: LD_EXP 1
1803: NOT
1804: PPUSH
1805: LD_EXP 3
1809: PPUSH
1810: CALL 30101 0 3
1814: ST_TO_ADDR
// tmp := tmp ^ Cyrus ;
1815: LD_ADDR_VAR 0 5
1819: PUSH
1820: LD_VAR 0 5
1824: PUSH
1825: LD_EXP 26
1829: ADD
1830: ST_TO_ADDR
// end ; others := CreateCharacterSet ( othersDelta ) ;
1831: LD_ADDR_EXP 28
1835: PUSH
1836: LD_STRING othersDelta
1838: PPUSH
1839: CALL_OW 31
1843: ST_TO_ADDR
// if not others and debug then
1844: LD_EXP 28
1848: NOT
1849: PUSH
1850: LD_EXP 1
1854: AND
1855: IFFALSE 1920
// begin InitHc ;
1857: CALL_OW 19
// for i = 1 to 2 do
1861: LD_ADDR_VAR 0 2
1865: PUSH
1866: DOUBLE
1867: LD_INT 1
1869: DEC
1870: ST_TO_ADDR
1871: LD_INT 2
1873: PUSH
1874: FOR_TO
1875: IFFALSE 1918
// begin PrepareHuman ( false , i mod 4 + 1 , 3 ) ;
1877: LD_INT 0
1879: PPUSH
1880: LD_VAR 0 2
1884: PUSH
1885: LD_INT 4
1887: MOD
1888: PUSH
1889: LD_INT 1
1891: PLUS
1892: PPUSH
1893: LD_INT 3
1895: PPUSH
1896: CALL_OW 380
// others := others ^ CreateHuman ;
1900: LD_ADDR_EXP 28
1904: PUSH
1905: LD_EXP 28
1909: PUSH
1910: CALL_OW 44
1914: ADD
1915: ST_TO_ADDR
// end ;
1916: GO 1874
1918: POP
1919: POP
// end ; if others then
1920: LD_EXP 28
1924: IFFALSE 1942
// tmp := tmp ^ others ;
1926: LD_ADDR_VAR 0 5
1930: PUSH
1931: LD_VAR 0 5
1935: PUSH
1936: LD_EXP 28
1940: ADD
1941: ST_TO_ADDR
// points := [ [ 28 , 49 ] , [ 33 , 54 ] , [ 38 , 56 ] ] ;
1942: LD_ADDR_VAR 0 3
1946: PUSH
1947: LD_INT 28
1949: PUSH
1950: LD_INT 49
1952: PUSH
1953: EMPTY
1954: LIST
1955: LIST
1956: PUSH
1957: LD_INT 33
1959: PUSH
1960: LD_INT 54
1962: PUSH
1963: EMPTY
1964: LIST
1965: LIST
1966: PUSH
1967: LD_INT 38
1969: PUSH
1970: LD_INT 56
1972: PUSH
1973: EMPTY
1974: LIST
1975: LIST
1976: PUSH
1977: EMPTY
1978: LIST
1979: LIST
1980: LIST
1981: ST_TO_ADDR
// veh := PrepareTank ( 1 , 1 , us_medium_wheeled , engine_solar , control_manual , us_cargo_bay , 80 ) ;
1982: LD_ADDR_VAR 0 4
1986: PUSH
1987: LD_INT 1
1989: PPUSH
1990: LD_INT 1
1992: PPUSH
1993: LD_INT 2
1995: PPUSH
1996: LD_INT 2
1998: PPUSH
1999: LD_INT 1
2001: PPUSH
2002: LD_INT 12
2004: PPUSH
2005: LD_INT 80
2007: PPUSH
2008: CALL 443 0 7
2012: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
2013: LD_VAR 0 4
2017: PPUSH
2018: LD_INT 1
2020: PPUSH
2021: CALL_OW 233
// PlaceUnitXY ( veh , points [ 1 ] [ 1 ] , points [ 1 ] [ 2 ] , false ) ;
2025: LD_VAR 0 4
2029: PPUSH
2030: LD_VAR 0 3
2034: PUSH
2035: LD_INT 1
2037: ARRAY
2038: PUSH
2039: LD_INT 1
2041: ARRAY
2042: PPUSH
2043: LD_VAR 0 3
2047: PUSH
2048: LD_INT 1
2050: ARRAY
2051: PUSH
2052: LD_INT 2
2054: ARRAY
2055: PPUSH
2056: LD_INT 0
2058: PPUSH
2059: CALL_OW 48
// SetCargo ( veh , mat_cans , 100 ) ;
2063: LD_VAR 0 4
2067: PPUSH
2068: LD_INT 1
2070: PPUSH
2071: LD_INT 100
2073: PPUSH
2074: CALL_OW 290
// PlaceHumanInUnit ( others [ 1 ] , veh ) ;
2078: LD_EXP 28
2082: PUSH
2083: LD_INT 1
2085: ARRAY
2086: PPUSH
2087: LD_VAR 0 4
2091: PPUSH
2092: CALL_OW 52
// veh := PrepareTank ( 1 , 1 , us_light_wheeled , engine_solar , control_manual , us_machine_gun , 80 ) ;
2096: LD_ADDR_VAR 0 4
2100: PUSH
2101: LD_INT 1
2103: PPUSH
2104: LD_INT 1
2106: PPUSH
2107: LD_INT 1
2109: PPUSH
2110: LD_INT 2
2112: PPUSH
2113: LD_INT 1
2115: PPUSH
2116: LD_INT 2
2118: PPUSH
2119: LD_INT 80
2121: PPUSH
2122: CALL 443 0 7
2126: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
2127: LD_VAR 0 4
2131: PPUSH
2132: LD_INT 1
2134: PPUSH
2135: CALL_OW 233
// PlaceUnitXY ( veh , points [ 2 ] [ 1 ] , points [ 2 ] [ 2 ] , false ) ;
2139: LD_VAR 0 4
2143: PPUSH
2144: LD_VAR 0 3
2148: PUSH
2149: LD_INT 2
2151: ARRAY
2152: PUSH
2153: LD_INT 1
2155: ARRAY
2156: PPUSH
2157: LD_VAR 0 3
2161: PUSH
2162: LD_INT 2
2164: ARRAY
2165: PUSH
2166: LD_INT 2
2168: ARRAY
2169: PPUSH
2170: LD_INT 0
2172: PPUSH
2173: CALL_OW 48
// PlaceHumanInUnit ( Gladstone , veh ) ;
2177: LD_EXP 18
2181: PPUSH
2182: LD_VAR 0 4
2186: PPUSH
2187: CALL_OW 52
// veh := PrepareTank ( 1 , 1 , us_light_wheeled , engine_solar , control_manual , us_light_gun , 80 ) ;
2191: LD_ADDR_VAR 0 4
2195: PUSH
2196: LD_INT 1
2198: PPUSH
2199: LD_INT 1
2201: PPUSH
2202: LD_INT 1
2204: PPUSH
2205: LD_INT 2
2207: PPUSH
2208: LD_INT 1
2210: PPUSH
2211: LD_INT 3
2213: PPUSH
2214: LD_INT 80
2216: PPUSH
2217: CALL 443 0 7
2221: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
2222: LD_VAR 0 4
2226: PPUSH
2227: LD_INT 1
2229: PPUSH
2230: CALL_OW 233
// PlaceUnitXY ( veh , points [ 3 ] [ 1 ] , points [ 3 ] [ 2 ] , false ) ;
2234: LD_VAR 0 4
2238: PPUSH
2239: LD_VAR 0 3
2243: PUSH
2244: LD_INT 3
2246: ARRAY
2247: PUSH
2248: LD_INT 1
2250: ARRAY
2251: PPUSH
2252: LD_VAR 0 3
2256: PUSH
2257: LD_INT 3
2259: ARRAY
2260: PUSH
2261: LD_INT 2
2263: ARRAY
2264: PPUSH
2265: LD_INT 0
2267: PPUSH
2268: CALL_OW 48
// PlaceHumanInUnit ( JMM , veh ) ;
2272: LD_EXP 17
2276: PPUSH
2277: LD_VAR 0 4
2281: PPUSH
2282: CALL_OW 52
// for i in tmp diff others [ 1 ] do
2286: LD_ADDR_VAR 0 2
2290: PUSH
2291: LD_VAR 0 5
2295: PUSH
2296: LD_EXP 28
2300: PUSH
2301: LD_INT 1
2303: ARRAY
2304: DIFF
2305: PUSH
2306: FOR_IN
2307: IFFALSE 2326
// PlaceUnitArea ( i , startArea , false ) ;
2309: LD_VAR 0 2
2313: PPUSH
2314: LD_INT 5
2316: PPUSH
2317: LD_INT 0
2319: PPUSH
2320: CALL_OW 49
2324: GO 2306
2326: POP
2327: POP
// end ; end_of_file
2328: LD_VAR 0 1
2332: RET
// export function Action ; var m ; begin
2333: LD_INT 0
2335: PPUSH
2336: PPUSH
// InGameOn ;
2337: CALL_OW 8
// CenterNowOnXY ( 28 , 51 ) ;
2341: LD_INT 28
2343: PPUSH
2344: LD_INT 51
2346: PPUSH
2347: CALL_OW 86
// Wait ( 3 ) ;
2351: LD_INT 3
2353: PPUSH
2354: CALL_OW 67
// Say ( JMM , D1d-JMM-1a ) ;
2358: LD_EXP 17
2362: PPUSH
2363: LD_STRING D1d-JMM-1a
2365: PPUSH
2366: CALL_OW 88
// SayRadio ( Harrison , D1d-Har-1 ) ;
2370: LD_EXP 19
2374: PPUSH
2375: LD_STRING D1d-Har-1
2377: PPUSH
2378: CALL_OW 94
// InGameOff ;
2382: CALL_OW 9
// SaveForQuickRestart ;
2386: CALL_OW 22
// ChangeMissionObjectives ( M1 ) ;
2390: LD_STRING M1
2392: PPUSH
2393: CALL_OW 337
// Wait ( 0 0$2 ) ;
2397: LD_INT 70
2399: PPUSH
2400: CALL_OW 67
// Say ( JMM , D2-JMM-1 ) ;
2404: LD_EXP 17
2408: PPUSH
2409: LD_STRING D2-JMM-1
2411: PPUSH
2412: CALL_OW 88
// Say ( Gladstone , D2-Glad-1 ) ;
2416: LD_EXP 18
2420: PPUSH
2421: LD_STRING D2-Glad-1
2423: PPUSH
2424: CALL_OW 88
// Say ( JMM , D2-JMM-2 ) ;
2428: LD_EXP 17
2432: PPUSH
2433: LD_STRING D2-JMM-2
2435: PPUSH
2436: CALL_OW 88
// Say ( Gladstone , D2-Glad-2 ) ;
2440: LD_EXP 18
2444: PPUSH
2445: LD_STRING D2-Glad-2
2447: PPUSH
2448: CALL_OW 88
// Say ( JMM , D2-JMM-3 ) ;
2452: LD_EXP 17
2456: PPUSH
2457: LD_STRING D2-JMM-3
2459: PPUSH
2460: CALL_OW 88
// Wait ( rand ( 0 0$30 , 1 1$00 ) ) ;
2464: LD_INT 1050
2466: PPUSH
2467: LD_INT 2100
2469: PPUSH
2470: CALL_OW 12
2474: PPUSH
2475: CALL_OW 67
// SetWeather ( 1 , 570 , 350 ) ;
2479: LD_INT 1
2481: PPUSH
2482: LD_INT 570
2484: PPUSH
2485: LD_INT 350
2487: PPUSH
2488: CALL_OW 550
// Wait ( rand ( 3 3$00 , 5 5$00 ) ) ;
2492: LD_INT 6300
2494: PPUSH
2495: LD_INT 10500
2497: PPUSH
2498: CALL_OW 12
2502: PPUSH
2503: CALL_OW 67
// SetWeather ( 0 , 570 , 350 ) ;
2507: LD_INT 0
2509: PPUSH
2510: LD_INT 570
2512: PPUSH
2513: LD_INT 350
2515: PPUSH
2516: CALL_OW 550
// end ;
2520: LD_VAR 0 1
2524: RET
// every 0 0$01 trigger FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_not , [ f_constructed ] ] , [ f_btype , b_depot ] ] ] ) and not deltaBuilded do
2525: LD_INT 22
2527: PUSH
2528: LD_INT 1
2530: PUSH
2531: EMPTY
2532: LIST
2533: LIST
2534: PUSH
2535: LD_INT 3
2537: PUSH
2538: LD_INT 57
2540: PUSH
2541: EMPTY
2542: LIST
2543: PUSH
2544: EMPTY
2545: LIST
2546: LIST
2547: PUSH
2548: LD_INT 30
2550: PUSH
2551: LD_INT 0
2553: PUSH
2554: EMPTY
2555: LIST
2556: LIST
2557: PUSH
2558: EMPTY
2559: LIST
2560: LIST
2561: LIST
2562: PUSH
2563: EMPTY
2564: LIST
2565: PPUSH
2566: CALL_OW 69
2570: PUSH
2571: LD_EXP 4
2575: NOT
2576: AND
2577: IFFALSE 2590
2579: GO 2581
2581: DISABLE
// begin deltaBuilded := true ;
2582: LD_ADDR_EXP 4
2586: PUSH
2587: LD_INT 1
2589: ST_TO_ADDR
// end ;
2590: END
// every 0 0$01 trigger not Delta and deltaBuilded and FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_not , [ f_constructed ] ] , [ f_btype , b_depot ] ] ] ) do
2591: LD_EXP 6
2595: NOT
2596: PUSH
2597: LD_EXP 4
2601: AND
2602: PUSH
2603: LD_INT 22
2605: PUSH
2606: LD_INT 1
2608: PUSH
2609: EMPTY
2610: LIST
2611: LIST
2612: PUSH
2613: LD_INT 3
2615: PUSH
2616: LD_INT 57
2618: PUSH
2619: EMPTY
2620: LIST
2621: PUSH
2622: EMPTY
2623: LIST
2624: LIST
2625: PUSH
2626: LD_INT 30
2628: PUSH
2629: LD_INT 0
2631: PUSH
2632: EMPTY
2633: LIST
2634: LIST
2635: PUSH
2636: EMPTY
2637: LIST
2638: LIST
2639: LIST
2640: PUSH
2641: EMPTY
2642: LIST
2643: PPUSH
2644: CALL_OW 69
2648: AND
2649: IFFALSE 2735
2651: GO 2653
2653: DISABLE
// begin enable ;
2654: ENABLE
// SetRestrict ( b_depot , 1 , state_disabled ) ;
2655: LD_INT 0
2657: PPUSH
2658: LD_INT 1
2660: PPUSH
2661: LD_INT 0
2663: PPUSH
2664: CALL_OW 324
// Delta := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_not , [ f_constructed ] ] , [ f_btype , b_depot ] ] ] ) [ 1 ] ;
2668: LD_ADDR_EXP 6
2672: PUSH
2673: LD_INT 22
2675: PUSH
2676: LD_INT 1
2678: PUSH
2679: EMPTY
2680: LIST
2681: LIST
2682: PUSH
2683: LD_INT 3
2685: PUSH
2686: LD_INT 57
2688: PUSH
2689: EMPTY
2690: LIST
2691: PUSH
2692: EMPTY
2693: LIST
2694: LIST
2695: PUSH
2696: LD_INT 30
2698: PUSH
2699: LD_INT 0
2701: PUSH
2702: EMPTY
2703: LIST
2704: LIST
2705: PUSH
2706: EMPTY
2707: LIST
2708: LIST
2709: LIST
2710: PUSH
2711: EMPTY
2712: LIST
2713: PPUSH
2714: CALL_OW 69
2718: PUSH
2719: LD_INT 1
2721: ARRAY
2722: ST_TO_ADDR
// SetBName ( Delta , Delta ) ;
2723: LD_EXP 6
2727: PPUSH
2728: LD_STRING Delta
2730: PPUSH
2731: CALL_OW 500
// end ;
2735: END
// every 0 0$2 trigger GetTech ( tech_ApeLang , 1 ) = state_researched and IsOk ( Gladstone ) do
2736: LD_INT 1
2738: PPUSH
2739: LD_INT 1
2741: PPUSH
2742: CALL_OW 321
2746: PUSH
2747: LD_INT 2
2749: EQUAL
2750: PUSH
2751: LD_EXP 18
2755: PPUSH
2756: CALL_OW 302
2760: AND
2761: IFFALSE 2822
2763: GO 2765
2765: DISABLE
// begin DialogueOn ;
2766: CALL_OW 6
// Say ( Gladstone , D3-Glad-1 ) ;
2770: LD_EXP 18
2774: PPUSH
2775: LD_STRING D3-Glad-1
2777: PPUSH
2778: CALL_OW 88
// Say ( JMM , D3-JMM-1 ) ;
2782: LD_EXP 17
2786: PPUSH
2787: LD_STRING D3-JMM-1
2789: PPUSH
2790: CALL_OW 88
// Say ( Gladstone , D3-Glad-2 ) ;
2794: LD_EXP 18
2798: PPUSH
2799: LD_STRING D3-Glad-2
2801: PPUSH
2802: CALL_OW 88
// Say ( JMM , D3-JMM-2 ) ;
2806: LD_EXP 17
2810: PPUSH
2811: LD_STRING D3-JMM-2
2813: PPUSH
2814: CALL_OW 88
// DialogueOff ;
2818: CALL_OW 7
// end ;
2822: END
// every 0 0$1 trigger GetTech ( tech_ApePsych , 1 ) = state_researched and ( IsOk ( Frank ) or ( IsOk ( Denis ) and GetSide ( Denis ) = 1 ) or UnitFilter ( others , [ f_sex , sex_male ] ) ) do var i , sol , ape , b ;
2823: LD_INT 2
2825: PPUSH
2826: LD_INT 1
2828: PPUSH
2829: CALL_OW 321
2833: PUSH
2834: LD_INT 2
2836: EQUAL
2837: PUSH
2838: LD_EXP 24
2842: PPUSH
2843: CALL_OW 302
2847: PUSH
2848: LD_EXP 20
2852: PPUSH
2853: CALL_OW 302
2857: PUSH
2858: LD_EXP 20
2862: PPUSH
2863: CALL_OW 255
2867: PUSH
2868: LD_INT 1
2870: EQUAL
2871: AND
2872: OR
2873: PUSH
2874: LD_EXP 28
2878: PPUSH
2879: LD_INT 26
2881: PUSH
2882: LD_INT 1
2884: PUSH
2885: EMPTY
2886: LIST
2887: LIST
2888: PPUSH
2889: CALL_OW 72
2893: OR
2894: AND
2895: IFFALSE 3436
2897: GO 2899
2899: DISABLE
2900: LD_INT 0
2902: PPUSH
2903: PPUSH
2904: PPUSH
2905: PPUSH
// begin InGameOn ;
2906: CALL_OW 8
// DialogueOn ;
2910: CALL_OW 6
// if Frank then
2914: LD_EXP 24
2918: IFFALSE 2932
// Say ( Frank , D8a-Frank-1 ) ;
2920: LD_EXP 24
2924: PPUSH
2925: LD_STRING D8a-Frank-1
2927: PPUSH
2928: CALL_OW 88
// sol := SayX ( UnitFilter ( others , [ f_sex , sex_male ] ) , D8a-Sol1-1 ) ;
2932: LD_ADDR_VAR 0 2
2936: PUSH
2937: LD_EXP 28
2941: PPUSH
2942: LD_INT 26
2944: PUSH
2945: LD_INT 1
2947: PUSH
2948: EMPTY
2949: LIST
2950: LIST
2951: PPUSH
2952: CALL_OW 72
2956: PPUSH
2957: LD_STRING D8a-Sol1-1
2959: PPUSH
2960: CALL 718 0 2
2964: ST_TO_ADDR
// if Denis and GetSide ( Denis ) = 1 then
2965: LD_EXP 20
2969: PUSH
2970: LD_EXP 20
2974: PPUSH
2975: CALL_OW 255
2979: PUSH
2980: LD_INT 1
2982: EQUAL
2983: AND
2984: IFFALSE 2998
// Say ( Denis , D8a-Den-1 ) ;
2986: LD_EXP 20
2990: PPUSH
2991: LD_STRING D8a-Den-1
2993: PPUSH
2994: CALL_OW 88
// if sol or Denis or Frank then
2998: LD_VAR 0 2
3002: PUSH
3003: LD_EXP 20
3007: OR
3008: PUSH
3009: LD_EXP 24
3013: OR
3014: IFFALSE 3075
// begin SayX ( UnitFilter ( others , [ [ f_class , 4 ] , [ f_sex , sex_male ] ] ) diff sol , D8a-Sci1-1 ) ;
3016: LD_EXP 28
3020: PPUSH
3021: LD_INT 25
3023: PUSH
3024: LD_INT 4
3026: PUSH
3027: EMPTY
3028: LIST
3029: LIST
3030: PUSH
3031: LD_INT 26
3033: PUSH
3034: LD_INT 1
3036: PUSH
3037: EMPTY
3038: LIST
3039: LIST
3040: PUSH
3041: EMPTY
3042: LIST
3043: LIST
3044: PPUSH
3045: CALL_OW 72
3049: PUSH
3050: LD_VAR 0 2
3054: DIFF
3055: PPUSH
3056: LD_STRING D8a-Sci1-1
3058: PPUSH
3059: CALL 718 0 2
// Say ( JMM , D8a-JMM-1 ) ;
3063: LD_EXP 17
3067: PPUSH
3068: LD_STRING D8a-JMM-1
3070: PPUSH
3071: CALL_OW 88
// end ; ape := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_apeman ] , [ f_inside ] ] ) ;
3075: LD_ADDR_VAR 0 3
3079: PUSH
3080: LD_INT 22
3082: PUSH
3083: LD_INT 1
3085: PUSH
3086: EMPTY
3087: LIST
3088: LIST
3089: PUSH
3090: LD_INT 25
3092: PUSH
3093: LD_INT 12
3095: PUSH
3096: EMPTY
3097: LIST
3098: LIST
3099: PUSH
3100: LD_INT 54
3102: PUSH
3103: EMPTY
3104: LIST
3105: PUSH
3106: EMPTY
3107: LIST
3108: LIST
3109: LIST
3110: PPUSH
3111: CALL_OW 69
3115: ST_TO_ADDR
// b := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) [ 1 ] ;
3116: LD_ADDR_VAR 0 4
3120: PUSH
3121: LD_INT 22
3123: PUSH
3124: LD_INT 1
3126: PUSH
3127: EMPTY
3128: LIST
3129: LIST
3130: PUSH
3131: LD_INT 2
3133: PUSH
3134: LD_INT 30
3136: PUSH
3137: LD_INT 6
3139: PUSH
3140: EMPTY
3141: LIST
3142: LIST
3143: PUSH
3144: LD_INT 30
3146: PUSH
3147: LD_INT 7
3149: PUSH
3150: EMPTY
3151: LIST
3152: LIST
3153: PUSH
3154: LD_INT 30
3156: PUSH
3157: LD_INT 8
3159: PUSH
3160: EMPTY
3161: LIST
3162: LIST
3163: PUSH
3164: EMPTY
3165: LIST
3166: LIST
3167: LIST
3168: LIST
3169: PUSH
3170: EMPTY
3171: LIST
3172: LIST
3173: PPUSH
3174: CALL_OW 69
3178: PUSH
3179: LD_INT 1
3181: ARRAY
3182: ST_TO_ADDR
// for i in ape do
3183: LD_ADDR_VAR 0 1
3187: PUSH
3188: LD_VAR 0 3
3192: PUSH
3193: FOR_IN
3194: IFFALSE 3227
// if i in UnitsInside ( b ) then
3196: LD_VAR 0 1
3200: PUSH
3201: LD_VAR 0 4
3205: PPUSH
3206: CALL_OW 313
3210: IN
3211: IFFALSE 3225
// begin ape := i ;
3213: LD_ADDR_VAR 0 3
3217: PUSH
3218: LD_VAR 0 1
3222: ST_TO_ADDR
// break ;
3223: GO 3227
// end ;
3225: GO 3193
3227: POP
3228: POP
// if not ape then
3229: LD_VAR 0 3
3233: NOT
3234: IFFALSE 3246
// begin DialogueOff ;
3236: CALL_OW 7
// InGameOff ;
3240: CALL_OW 9
// exit ;
3244: GO 3436
// end ; RemoveUnit ( ape ) ;
3246: LD_VAR 0 3
3250: PPUSH
3251: CALL_OW 64
// PrepareApeman ( 0 ) ;
3255: LD_INT 0
3257: PPUSH
3258: CALL 64081 0 1
// uc_side := 1 ;
3262: LD_ADDR_OWVAR 20
3266: PUSH
3267: LD_INT 1
3269: ST_TO_ADDR
// hc_name := Mike  ;
3270: LD_ADDR_OWVAR 26
3274: PUSH
3275: LD_STRING Mike 
3277: ST_TO_ADDR
// hc_gallery := us ;
3278: LD_ADDR_OWVAR 33
3282: PUSH
3283: LD_STRING us
3285: ST_TO_ADDR
// hc_face_number := 30 ;
3286: LD_ADDR_OWVAR 34
3290: PUSH
3291: LD_INT 30
3293: ST_TO_ADDR
// hc_attr := [ GetAttr ( ape , attr_stamina ) , GetAttr ( ape , attr_speed ) ] ;
3294: LD_ADDR_OWVAR 29
3298: PUSH
3299: LD_VAR 0 3
3303: PPUSH
3304: LD_INT 1
3306: PPUSH
3307: CALL_OW 260
3311: PUSH
3312: LD_VAR 0 3
3316: PPUSH
3317: LD_INT 2
3319: PPUSH
3320: CALL_OW 260
3324: PUSH
3325: EMPTY
3326: LIST
3327: LIST
3328: ST_TO_ADDR
// hc_skills := [ GetSkill ( ape , 1 ) , GetSkill ( ape , 2 ) , GetSkill ( ape , 3 ) , GetSkill ( ape , 4 ) ] ;
3329: LD_ADDR_OWVAR 31
3333: PUSH
3334: LD_VAR 0 3
3338: PPUSH
3339: LD_INT 1
3341: PPUSH
3342: CALL_OW 259
3346: PUSH
3347: LD_VAR 0 3
3351: PPUSH
3352: LD_INT 2
3354: PPUSH
3355: CALL_OW 259
3359: PUSH
3360: LD_VAR 0 3
3364: PPUSH
3365: LD_INT 3
3367: PPUSH
3368: CALL_OW 259
3372: PUSH
3373: LD_VAR 0 3
3377: PPUSH
3378: LD_INT 4
3380: PPUSH
3381: CALL_OW 259
3385: PUSH
3386: EMPTY
3387: LIST
3388: LIST
3389: LIST
3390: LIST
3391: ST_TO_ADDR
// hc_sex := sex_male ;
3392: LD_ADDR_OWVAR 27
3396: PUSH
3397: LD_INT 1
3399: ST_TO_ADDR
// Mike := CreateHuman ;
3400: LD_ADDR_EXP 27
3404: PUSH
3405: CALL_OW 44
3409: ST_TO_ADDR
// PlaceHumanInUnit ( Mike , b ) ;
3410: LD_EXP 27
3414: PPUSH
3415: LD_VAR 0 4
3419: PPUSH
3420: CALL_OW 52
// InitHc_All ( ) ;
3424: CALL_OW 584
// DialogueOff ;
3428: CALL_OW 7
// InGameOff ;
3432: CALL_OW 9
// end ;
3436: PPOPN 4
3438: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_apeman_engineer ] ] ) do
3439: LD_INT 22
3441: PUSH
3442: LD_INT 1
3444: PUSH
3445: EMPTY
3446: LIST
3447: LIST
3448: PUSH
3449: LD_INT 25
3451: PUSH
3452: LD_INT 16
3454: PUSH
3455: EMPTY
3456: LIST
3457: LIST
3458: PUSH
3459: EMPTY
3460: LIST
3461: LIST
3462: PPUSH
3463: CALL_OW 69
3467: IFFALSE 3526
3469: GO 3471
3471: DISABLE
// begin ChangeMissionObjectives ( M1a ) ;
3472: LD_STRING M1a
3474: PPUSH
3475: CALL_OW 337
// case Query ( Q2 ) of 1 :
3479: LD_STRING Q2
3481: PPUSH
3482: CALL_OW 97
3486: PUSH
3487: LD_INT 1
3489: DOUBLE
3490: EQUAL
3491: IFTRUE 3495
3493: GO 3506
3495: POP
// end_mission := true ; 2 :
3496: LD_ADDR_EXP 14
3500: PUSH
3501: LD_INT 1
3503: ST_TO_ADDR
3504: GO 3526
3506: LD_INT 2
3508: DOUBLE
3509: EQUAL
3510: IFTRUE 3514
3512: GO 3525
3514: POP
// end_the_mission_allowed := true ; end ;
3515: LD_ADDR_OWVAR 57
3519: PUSH
3520: LD_INT 1
3522: ST_TO_ADDR
3523: GO 3526
3525: POP
// end ;
3526: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) and Delta do
3527: LD_INT 22
3529: PUSH
3530: LD_INT 1
3532: PUSH
3533: EMPTY
3534: LIST
3535: LIST
3536: PUSH
3537: LD_INT 2
3539: PUSH
3540: LD_INT 30
3542: PUSH
3543: LD_INT 6
3545: PUSH
3546: EMPTY
3547: LIST
3548: LIST
3549: PUSH
3550: LD_INT 30
3552: PUSH
3553: LD_INT 7
3555: PUSH
3556: EMPTY
3557: LIST
3558: LIST
3559: PUSH
3560: EMPTY
3561: LIST
3562: LIST
3563: LIST
3564: PUSH
3565: EMPTY
3566: LIST
3567: LIST
3568: PPUSH
3569: CALL_OW 69
3573: PUSH
3574: LD_INT 22
3576: PUSH
3577: LD_INT 1
3579: PUSH
3580: EMPTY
3581: LIST
3582: LIST
3583: PUSH
3584: LD_INT 2
3586: PUSH
3587: LD_INT 30
3589: PUSH
3590: LD_INT 2
3592: PUSH
3593: EMPTY
3594: LIST
3595: LIST
3596: PUSH
3597: LD_INT 30
3599: PUSH
3600: LD_INT 3
3602: PUSH
3603: EMPTY
3604: LIST
3605: LIST
3606: PUSH
3607: EMPTY
3608: LIST
3609: LIST
3610: LIST
3611: PUSH
3612: EMPTY
3613: LIST
3614: LIST
3615: PPUSH
3616: CALL_OW 69
3620: AND
3621: PUSH
3622: LD_EXP 6
3626: AND
3627: IFFALSE 4142
3629: GO 3631
3631: DISABLE
// begin Wait ( rand ( 0 0$30 , 0 0$50 ) ) ;
3632: LD_INT 1050
3634: PPUSH
3635: LD_INT 1750
3637: PPUSH
3638: CALL_OW 12
3642: PPUSH
3643: CALL_OW 67
// PlaceUnitArea ( Denis , [ denisArea1 , denisArea2 , denisArea3 , denisArea4 ] [ Difficulty ] , false ) ;
3647: LD_EXP 20
3651: PPUSH
3652: LD_INT 6
3654: PUSH
3655: LD_INT 9
3657: PUSH
3658: LD_INT 10
3660: PUSH
3661: LD_INT 16
3663: PUSH
3664: EMPTY
3665: LIST
3666: LIST
3667: LIST
3668: LIST
3669: PUSH
3670: LD_OWVAR 67
3674: ARRAY
3675: PPUSH
3676: LD_INT 0
3678: PPUSH
3679: CALL_OW 49
// ComHold ( Denis ) ;
3683: LD_EXP 20
3687: PPUSH
3688: CALL_OW 140
// InGameOn ;
3692: CALL_OW 8
// DialogueOn ;
3696: CALL_OW 6
// if Delta then
3700: LD_EXP 6
3704: IFFALSE 3717
// CenterNowOnUnits ( Delta ) else
3706: LD_EXP 6
3710: PPUSH
3711: CALL_OW 87
3715: GO 3726
// CenterNowOnUnits ( JMM ) ;
3717: LD_EXP 17
3721: PPUSH
3722: CALL_OW 87
// SayRadioNoFaceNoName ( Denis , DD-Den-1 ) ;
3726: LD_EXP 20
3730: PPUSH
3731: LD_STRING DD-Den-1
3733: PPUSH
3734: CALL 71902 0 2
// Say ( JMM , DD-JMM-1 ) ;
3738: LD_EXP 17
3742: PPUSH
3743: LD_STRING DD-JMM-1
3745: PPUSH
3746: CALL_OW 88
// SayRadioNoFaceNoName ( Denis , DD-Den-2 ) ;
3750: LD_EXP 20
3754: PPUSH
3755: LD_STRING DD-Den-2
3757: PPUSH
3758: CALL 71902 0 2
// Wait ( 3 ) ;
3762: LD_INT 3
3764: PPUSH
3765: CALL_OW 67
// DialogueOff ;
3769: CALL_OW 7
// InGameOff ;
3773: CALL_OW 9
// if Difficulty = 1 then
3777: LD_OWVAR 67
3781: PUSH
3782: LD_INT 1
3784: EQUAL
3785: IFFALSE 3861
// begin PlaceSeeing ( GetX ( Denis ) , GetY ( Denis ) , 1 , - 12 ) ;
3787: LD_EXP 20
3791: PPUSH
3792: CALL_OW 250
3796: PPUSH
3797: LD_EXP 20
3801: PPUSH
3802: CALL_OW 251
3806: PPUSH
3807: LD_INT 1
3809: PPUSH
3810: LD_INT 12
3812: NEG
3813: PPUSH
3814: CALL_OW 330
// CenterNowOnUnits ( Denis ) ;
3818: LD_EXP 20
3822: PPUSH
3823: CALL_OW 87
// wait ( 0 0$5 ) ;
3827: LD_INT 175
3829: PPUSH
3830: CALL_OW 67
// RemoveSeeing ( GetX ( Denis ) , GetY ( Denis ) , 1 ) ;
3834: LD_EXP 20
3838: PPUSH
3839: CALL_OW 250
3843: PPUSH
3844: LD_EXP 20
3848: PPUSH
3849: CALL_OW 251
3853: PPUSH
3854: LD_INT 1
3856: PPUSH
3857: CALL_OW 331
// end ; repeat wait ( 0 0$01 ) ;
3861: LD_INT 35
3863: PPUSH
3864: CALL_OW 67
// until See ( 1 , Denis ) or IsDead ( Denis ) ;
3868: LD_INT 1
3870: PPUSH
3871: LD_EXP 20
3875: PPUSH
3876: CALL_OW 292
3880: PUSH
3881: LD_EXP 20
3885: PPUSH
3886: CALL_OW 301
3890: OR
3891: IFFALSE 3861
// if IsDead ( Denis ) then
3893: LD_EXP 20
3897: PPUSH
3898: CALL_OW 301
3902: IFFALSE 3906
// exit ;
3904: GO 4142
// SetSide ( Denis , 1 ) ;
3906: LD_EXP 20
3910: PPUSH
3911: LD_INT 1
3913: PPUSH
3914: CALL_OW 235
// Say ( Denis , DD-Den-2a ) ;
3918: LD_EXP 20
3922: PPUSH
3923: LD_STRING DD-Den-2a
3925: PPUSH
3926: CALL_OW 88
// repeat wait ( 0 0$01 ) ;
3930: LD_INT 35
3932: PPUSH
3933: CALL_OW 67
// until GetBType ( IsInUnit ( Denis ) ) in [ b_lab , b_lab_half , b_lab_full ] or IsDead ( Denis ) ;
3937: LD_EXP 20
3941: PPUSH
3942: CALL_OW 310
3946: PPUSH
3947: CALL_OW 266
3951: PUSH
3952: LD_INT 6
3954: PUSH
3955: LD_INT 7
3957: PUSH
3958: LD_INT 8
3960: PUSH
3961: EMPTY
3962: LIST
3963: LIST
3964: LIST
3965: IN
3966: PUSH
3967: LD_EXP 20
3971: PPUSH
3972: CALL_OW 301
3976: OR
3977: IFFALSE 3930
// if IsDead ( Denis ) then
3979: LD_EXP 20
3983: PPUSH
3984: CALL_OW 301
3988: IFFALSE 3992
// exit ;
3990: GO 4142
// Say ( Denis , DD-Den-2b ) ;
3992: LD_EXP 20
3996: PPUSH
3997: LD_STRING DD-Den-2b
3999: PPUSH
4000: CALL_OW 88
// ComChangeProfession ( Denis , 4 ) ;
4004: LD_EXP 20
4008: PPUSH
4009: LD_INT 4
4011: PPUSH
4012: CALL_OW 123
// Wait ( 0 0$02 ) ;
4016: LD_INT 70
4018: PPUSH
4019: CALL_OW 67
// DialogueOn ;
4023: CALL_OW 6
// CenterNowOnUnits ( Denis ) ;
4027: LD_EXP 20
4031: PPUSH
4032: CALL_OW 87
// Say ( JMM , D4-JMM-1 ) ;
4036: LD_EXP 17
4040: PPUSH
4041: LD_STRING D4-JMM-1
4043: PPUSH
4044: CALL_OW 88
// Say ( Denis , D4-Den-1 ) ;
4048: LD_EXP 20
4052: PPUSH
4053: LD_STRING D4-Den-1
4055: PPUSH
4056: CALL_OW 88
// Say ( JMM , D4-JMM-2 ) ;
4060: LD_EXP 17
4064: PPUSH
4065: LD_STRING D4-JMM-2
4067: PPUSH
4068: CALL_OW 88
// Say ( Denis , D4-Den-2 ) ;
4072: LD_EXP 20
4076: PPUSH
4077: LD_STRING D4-Den-2
4079: PPUSH
4080: CALL_OW 88
// DialogueOff ;
4084: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
4088: LD_STRING M2
4090: PPUSH
4091: CALL_OW 337
// radar_allowed := true ;
4095: LD_ADDR_EXP 7
4099: PUSH
4100: LD_INT 1
4102: ST_TO_ADDR
// SetTech ( tech_radar , 1 , state_enabled ) ;
4103: LD_INT 6
4105: PPUSH
4106: LD_INT 1
4108: PPUSH
4109: LD_INT 1
4111: PPUSH
4112: CALL_OW 322
// SetRestrict ( b_lab_opto , 1 , state_enabled ) ;
4116: LD_INT 15
4118: PPUSH
4119: LD_INT 1
4121: PPUSH
4122: LD_INT 1
4124: PPUSH
4125: CALL_OW 324
// SetRestrict ( b_ext_radar , 1 , state_enabled ) ;
4129: LD_INT 20
4131: PPUSH
4132: LD_INT 1
4134: PPUSH
4135: LD_INT 1
4137: PPUSH
4138: CALL_OW 324
// end ;
4142: END
// every 0 0$1 trigger arab_spotted do var sol , sol2 ;
4143: LD_EXP 13
4147: IFFALSE 4770
4149: GO 4151
4151: DISABLE
4152: LD_INT 0
4154: PPUSH
4155: PPUSH
// begin sol := SayX ( UnitFilter ( others , [ f_sex , sex_male ] ) , D5-Sol1-1 ) ;
4156: LD_ADDR_VAR 0 1
4160: PUSH
4161: LD_EXP 28
4165: PPUSH
4166: LD_INT 26
4168: PUSH
4169: LD_INT 1
4171: PUSH
4172: EMPTY
4173: LIST
4174: LIST
4175: PPUSH
4176: CALL_OW 72
4180: PPUSH
4181: LD_STRING D5-Sol1-1
4183: PPUSH
4184: CALL 718 0 2
4188: ST_TO_ADDR
// if not sol then
4189: LD_VAR 0 1
4193: NOT
4194: IFFALSE 4198
// exit ;
4196: GO 4770
// repeat wait ( 0 0$01 ) ;
4198: LD_INT 35
4200: PPUSH
4201: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) = 0 ;
4205: LD_INT 22
4207: PUSH
4208: LD_INT 2
4210: PUSH
4211: EMPTY
4212: LIST
4213: LIST
4214: PUSH
4215: LD_INT 21
4217: PUSH
4218: LD_INT 1
4220: PUSH
4221: EMPTY
4222: LIST
4223: LIST
4224: PUSH
4225: EMPTY
4226: LIST
4227: LIST
4228: PPUSH
4229: CALL_OW 69
4233: PUSH
4234: LD_INT 0
4236: EQUAL
4237: IFFALSE 4198
// if IsOk ( sol ) then
4239: LD_VAR 0 1
4243: PPUSH
4244: CALL_OW 302
4248: IFFALSE 4268
// begin sol2 := others diff sol ;
4250: LD_ADDR_VAR 0 2
4254: PUSH
4255: LD_EXP 28
4259: PUSH
4260: LD_VAR 0 1
4264: DIFF
4265: ST_TO_ADDR
// end else
4266: GO 4270
// exit ;
4268: GO 4770
// if not Lisa and not sol2 then
4270: LD_EXP 23
4274: NOT
4275: PUSH
4276: LD_VAR 0 2
4280: NOT
4281: AND
4282: IFFALSE 4286
// exit ;
4284: GO 4770
// DialogueOn ;
4286: CALL_OW 6
// if Lisa then
4290: LD_EXP 23
4294: IFFALSE 4310
// Say ( Lisa , D5a-Lisa-1 ) else
4296: LD_EXP 23
4300: PPUSH
4301: LD_STRING D5a-Lisa-1
4303: PPUSH
4304: CALL_OW 88
4308: GO 4385
// if sol2 then
4310: LD_VAR 0 2
4314: IFFALSE 4385
// case GetSex ( sol2 [ 1 ] ) of sex_male :
4316: LD_VAR 0 2
4320: PUSH
4321: LD_INT 1
4323: ARRAY
4324: PPUSH
4325: CALL_OW 258
4329: PUSH
4330: LD_INT 1
4332: DOUBLE
4333: EQUAL
4334: IFTRUE 4338
4336: GO 4357
4338: POP
// Say ( sol2 [ 1 ] , D5-Sol2-1 ) ; sex_female :
4339: LD_VAR 0 2
4343: PUSH
4344: LD_INT 1
4346: ARRAY
4347: PPUSH
4348: LD_STRING D5-Sol2-1
4350: PPUSH
4351: CALL_OW 88
4355: GO 4385
4357: LD_INT 2
4359: DOUBLE
4360: EQUAL
4361: IFTRUE 4365
4363: GO 4384
4365: POP
// Say ( sol2 [ 1 ] , D5-FSol2-1 ) ; end ;
4366: LD_VAR 0 2
4370: PUSH
4371: LD_INT 1
4373: ARRAY
4374: PPUSH
4375: LD_STRING D5-FSol2-1
4377: PPUSH
4378: CALL_OW 88
4382: GO 4385
4384: POP
// Say ( sol , D5-Sol1-2 ) ;
4385: LD_VAR 0 1
4389: PPUSH
4390: LD_STRING D5-Sol1-2
4392: PPUSH
4393: CALL_OW 88
// if Lisa then
4397: LD_EXP 23
4401: IFFALSE 4417
// Say ( Lisa , D5a-Lisa-2 ) else
4403: LD_EXP 23
4407: PPUSH
4408: LD_STRING D5a-Lisa-2
4410: PPUSH
4411: CALL_OW 88
4415: GO 4492
// if sol2 then
4417: LD_VAR 0 2
4421: IFFALSE 4492
// case GetSex ( sol2 [ 1 ] ) of sex_male :
4423: LD_VAR 0 2
4427: PUSH
4428: LD_INT 1
4430: ARRAY
4431: PPUSH
4432: CALL_OW 258
4436: PUSH
4437: LD_INT 1
4439: DOUBLE
4440: EQUAL
4441: IFTRUE 4445
4443: GO 4464
4445: POP
// Say ( sol2 [ 1 ] , D5-Sol2-2 ) ; sex_female :
4446: LD_VAR 0 2
4450: PUSH
4451: LD_INT 1
4453: ARRAY
4454: PPUSH
4455: LD_STRING D5-Sol2-2
4457: PPUSH
4458: CALL_OW 88
4462: GO 4492
4464: LD_INT 2
4466: DOUBLE
4467: EQUAL
4468: IFTRUE 4472
4470: GO 4491
4472: POP
// Say ( sol2 [ 1 ] , D5-FSol2-2 ) ; end ;
4473: LD_VAR 0 2
4477: PUSH
4478: LD_INT 1
4480: ARRAY
4481: PPUSH
4482: LD_STRING D5-FSol2-2
4484: PPUSH
4485: CALL_OW 88
4489: GO 4492
4491: POP
// Say ( sol , D5a-Sol1-3 ) ;
4492: LD_VAR 0 1
4496: PPUSH
4497: LD_STRING D5a-Sol1-3
4499: PPUSH
4500: CALL_OW 88
// if Lisa then
4504: LD_EXP 23
4508: IFFALSE 4522
// Say ( Lisa , D5a-Lisa-3 ) ;
4510: LD_EXP 23
4514: PPUSH
4515: LD_STRING D5a-Lisa-3
4517: PPUSH
4518: CALL_OW 88
// if not sol2 then
4522: LD_VAR 0 2
4526: NOT
4527: IFFALSE 4535
// begin DialogueOff ;
4529: CALL_OW 7
// exit ;
4533: GO 4770
// end ; case GetSex ( sol2 [ 1 ] ) of sex_male :
4535: LD_VAR 0 2
4539: PUSH
4540: LD_INT 1
4542: ARRAY
4543: PPUSH
4544: CALL_OW 258
4548: PUSH
4549: LD_INT 1
4551: DOUBLE
4552: EQUAL
4553: IFTRUE 4557
4555: GO 4576
4557: POP
// Say ( sol2 [ 1 ] , D5-Sol2-3 ) ; sex_female :
4558: LD_VAR 0 2
4562: PUSH
4563: LD_INT 1
4565: ARRAY
4566: PPUSH
4567: LD_STRING D5-Sol2-3
4569: PPUSH
4570: CALL_OW 88
4574: GO 4604
4576: LD_INT 2
4578: DOUBLE
4579: EQUAL
4580: IFTRUE 4584
4582: GO 4603
4584: POP
// Say ( sol2 [ 1 ] , D5-FSol2-3 ) ; end ;
4585: LD_VAR 0 2
4589: PUSH
4590: LD_INT 1
4592: ARRAY
4593: PPUSH
4594: LD_STRING D5-FSol2-3
4596: PPUSH
4597: CALL_OW 88
4601: GO 4604
4603: POP
// Say ( sol , D5-Sol1-4 ) ;
4604: LD_VAR 0 1
4608: PPUSH
4609: LD_STRING D5-Sol1-4
4611: PPUSH
4612: CALL_OW 88
// case GetSex ( sol2 [ 1 ] ) of sex_male :
4616: LD_VAR 0 2
4620: PUSH
4621: LD_INT 1
4623: ARRAY
4624: PPUSH
4625: CALL_OW 258
4629: PUSH
4630: LD_INT 1
4632: DOUBLE
4633: EQUAL
4634: IFTRUE 4638
4636: GO 4657
4638: POP
// Say ( sol2 [ 1 ] , D5-Sol2-4 ) ; sex_female :
4639: LD_VAR 0 2
4643: PUSH
4644: LD_INT 1
4646: ARRAY
4647: PPUSH
4648: LD_STRING D5-Sol2-4
4650: PPUSH
4651: CALL_OW 88
4655: GO 4685
4657: LD_INT 2
4659: DOUBLE
4660: EQUAL
4661: IFTRUE 4665
4663: GO 4684
4665: POP
// Say ( sol2 [ 1 ] , D5-FSol2-4 ) ; end ;
4666: LD_VAR 0 2
4670: PUSH
4671: LD_INT 1
4673: ARRAY
4674: PPUSH
4675: LD_STRING D5-FSol2-4
4677: PPUSH
4678: CALL_OW 88
4682: GO 4685
4684: POP
// Say ( sol , D5-Sol1-5 ) ;
4685: LD_VAR 0 1
4689: PPUSH
4690: LD_STRING D5-Sol1-5
4692: PPUSH
4693: CALL_OW 88
// case GetSex ( sol2 [ 1 ] ) of sex_male :
4697: LD_VAR 0 2
4701: PUSH
4702: LD_INT 1
4704: ARRAY
4705: PPUSH
4706: CALL_OW 258
4710: PUSH
4711: LD_INT 1
4713: DOUBLE
4714: EQUAL
4715: IFTRUE 4719
4717: GO 4738
4719: POP
// Say ( sol2 [ 1 ] , D5-Sol2-5 ) ; sex_female :
4720: LD_VAR 0 2
4724: PUSH
4725: LD_INT 1
4727: ARRAY
4728: PPUSH
4729: LD_STRING D5-Sol2-5
4731: PPUSH
4732: CALL_OW 88
4736: GO 4766
4738: LD_INT 2
4740: DOUBLE
4741: EQUAL
4742: IFTRUE 4746
4744: GO 4765
4746: POP
// Say ( sol2 [ 1 ] , D5-FSol2-5 ) ; end ;
4747: LD_VAR 0 2
4751: PUSH
4752: LD_INT 1
4754: ARRAY
4755: PPUSH
4756: LD_STRING D5-FSol2-5
4758: PPUSH
4759: CALL_OW 88
4763: GO 4766
4765: POP
// DialogueOff ;
4766: CALL_OW 7
// end ;
4770: PPOPN 2
4772: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_apeman_engineer ] ] ) >= 5 do
4773: LD_INT 22
4775: PUSH
4776: LD_INT 1
4778: PUSH
4779: EMPTY
4780: LIST
4781: LIST
4782: PUSH
4783: LD_INT 25
4785: PUSH
4786: LD_INT 16
4788: PUSH
4789: EMPTY
4790: LIST
4791: LIST
4792: PUSH
4793: EMPTY
4794: LIST
4795: LIST
4796: PPUSH
4797: CALL_OW 69
4801: PUSH
4802: LD_INT 5
4804: GREATEREQUAL
4805: IFFALSE 4825
4807: GO 4809
4809: DISABLE
// begin ChangeMissionObjectives ( M1b ) ;
4810: LD_STRING M1b
4812: PPUSH
4813: CALL_OW 337
// apeman_army := true ;
4817: LD_ADDR_EXP 9
4821: PUSH
4822: LD_INT 1
4824: ST_TO_ADDR
// end ;
4825: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] , [ f_constructed ] ] ) do
4826: LD_INT 22
4828: PUSH
4829: LD_INT 1
4831: PUSH
4832: EMPTY
4833: LIST
4834: LIST
4835: PUSH
4836: LD_INT 30
4838: PUSH
4839: LD_INT 3
4841: PUSH
4842: EMPTY
4843: LIST
4844: LIST
4845: PUSH
4846: LD_INT 57
4848: PUSH
4849: EMPTY
4850: LIST
4851: PUSH
4852: EMPTY
4853: LIST
4854: LIST
4855: LIST
4856: PPUSH
4857: CALL_OW 69
4861: IFFALSE 4873
4863: GO 4865
4865: DISABLE
// ChangeMissionObjectives ( M1c ) ;
4866: LD_STRING M1c
4868: PPUSH
4869: CALL_OW 337
4873: END
// every 0 0$1 trigger GetTech ( tech_radar , 1 ) = state_researched do
4874: LD_INT 6
4876: PPUSH
4877: LD_INT 1
4879: PPUSH
4880: CALL_OW 321
4884: PUSH
4885: LD_INT 2
4887: EQUAL
4888: IFFALSE 4908
4890: GO 4892
4892: DISABLE
// begin ChangeMissionObjectives ( M2a ) ;
4893: LD_STRING M2a
4895: PPUSH
4896: CALL_OW 337
// radar_researched := true ;
4900: LD_ADDR_EXP 10
4904: PUSH
4905: LD_INT 1
4907: ST_TO_ADDR
// end ;
4908: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_weapon , us_radar ] , [ f_bweapon , us_radar ] ] ] ) do
4909: LD_INT 22
4911: PUSH
4912: LD_INT 1
4914: PUSH
4915: EMPTY
4916: LIST
4917: LIST
4918: PUSH
4919: LD_INT 2
4921: PUSH
4922: LD_INT 34
4924: PUSH
4925: LD_INT 11
4927: PUSH
4928: EMPTY
4929: LIST
4930: LIST
4931: PUSH
4932: LD_INT 35
4934: PUSH
4935: LD_INT 11
4937: PUSH
4938: EMPTY
4939: LIST
4940: LIST
4941: PUSH
4942: EMPTY
4943: LIST
4944: LIST
4945: LIST
4946: PUSH
4947: EMPTY
4948: LIST
4949: LIST
4950: PPUSH
4951: CALL_OW 69
4955: IFFALSE 4975
4957: GO 4959
4959: DISABLE
// begin ChangeMissionObjectives ( M2b ) ;
4960: LD_STRING M2b
4962: PPUSH
4963: CALL_OW 337
// radar_builded := true ;
4967: LD_ADDR_EXP 11
4971: PUSH
4972: LD_INT 1
4974: ST_TO_ADDR
// end ;
4975: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) = 0 and not first_apeman_tamed do
4976: LD_INT 22
4978: PUSH
4979: LD_INT 0
4981: PUSH
4982: EMPTY
4983: LIST
4984: LIST
4985: PUSH
4986: LD_INT 25
4988: PUSH
4989: LD_INT 12
4991: PUSH
4992: EMPTY
4993: LIST
4994: LIST
4995: PUSH
4996: EMPTY
4997: LIST
4998: LIST
4999: PPUSH
5000: CALL_OW 69
5004: PUSH
5005: LD_INT 0
5007: EQUAL
5008: PUSH
5009: LD_EXP 8
5013: NOT
5014: AND
5015: IFFALSE 5027
5017: GO 5019
5019: DISABLE
// YouLost ( Apeman ) ;
5020: LD_STRING Apeman
5022: PPUSH
5023: CALL_OW 104
5027: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_apeman_engineer ] ] ) >= 7 do var i , filter ;
5028: LD_INT 22
5030: PUSH
5031: LD_INT 1
5033: PUSH
5034: EMPTY
5035: LIST
5036: LIST
5037: PUSH
5038: LD_INT 25
5040: PUSH
5041: LD_INT 16
5043: PUSH
5044: EMPTY
5045: LIST
5046: LIST
5047: PUSH
5048: EMPTY
5049: LIST
5050: LIST
5051: PPUSH
5052: CALL_OW 69
5056: PUSH
5057: LD_INT 7
5059: GREATEREQUAL
5060: IFFALSE 5158
5062: GO 5064
5064: DISABLE
5065: LD_INT 0
5067: PPUSH
5068: PPUSH
// begin filter := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 4 ] ] ) ^ JMM ;
5069: LD_ADDR_VAR 0 2
5073: PUSH
5074: LD_INT 22
5076: PUSH
5077: LD_INT 1
5079: PUSH
5080: EMPTY
5081: LIST
5082: LIST
5083: PUSH
5084: LD_INT 21
5086: PUSH
5087: LD_INT 1
5089: PUSH
5090: EMPTY
5091: LIST
5092: LIST
5093: PUSH
5094: LD_INT 25
5096: PUSH
5097: LD_INT 4
5099: PUSH
5100: EMPTY
5101: LIST
5102: LIST
5103: PUSH
5104: EMPTY
5105: LIST
5106: LIST
5107: LIST
5108: PPUSH
5109: CALL_OW 69
5113: PUSH
5114: LD_EXP 17
5118: ADD
5119: ST_TO_ADDR
// if filter then
5120: LD_VAR 0 2
5124: IFFALSE 5158
// for i in filter do
5126: LD_ADDR_VAR 0 1
5130: PUSH
5131: LD_VAR 0 2
5135: PUSH
5136: FOR_IN
5137: IFFALSE 5156
// AddExperience ( i , 4 , 3500 ) ;
5139: LD_VAR 0 1
5143: PPUSH
5144: LD_INT 4
5146: PPUSH
5147: LD_INT 3500
5149: PPUSH
5150: CALL_OW 492
5154: GO 5136
5156: POP
5157: POP
// end ;
5158: PPOPN 2
5160: END
// every 0 0$1 trigger end_mission do var i , tmp , m1 , m2 , m3 ;
5161: LD_EXP 14
5165: IFFALSE 6348
5167: GO 5169
5169: DISABLE
5170: LD_INT 0
5172: PPUSH
5173: PPUSH
5174: PPUSH
5175: PPUSH
5176: PPUSH
// begin if apeKillCounter = 0 then
5177: LD_EXP 15
5181: PUSH
5182: LD_INT 0
5184: EQUAL
5185: IFFALSE 5194
// SetAchievement ( ACH_APEKILLER ) ;
5187: LD_STRING ACH_APEKILLER
5189: PPUSH
5190: CALL_OW 543
// if FilterAllUnits ( [ f_side , 2 ] ) then
5194: LD_INT 22
5196: PUSH
5197: LD_INT 2
5199: PUSH
5200: EMPTY
5201: LIST
5202: LIST
5203: PPUSH
5204: CALL_OW 69
5208: IFFALSE 5246
// for i in FilterAllUnits ( [ f_side , 2 ] ) do
5210: LD_ADDR_VAR 0 1
5214: PUSH
5215: LD_INT 22
5217: PUSH
5218: LD_INT 2
5220: PUSH
5221: EMPTY
5222: LIST
5223: LIST
5224: PPUSH
5225: CALL_OW 69
5229: PUSH
5230: FOR_IN
5231: IFFALSE 5244
// RemoveUnit ( i ) ;
5233: LD_VAR 0 1
5237: PPUSH
5238: CALL_OW 64
5242: GO 5230
5244: POP
5245: POP
// m1 := false ;
5246: LD_ADDR_VAR 0 3
5250: PUSH
5251: LD_INT 0
5253: ST_TO_ADDR
// m2 := false ;
5254: LD_ADDR_VAR 0 4
5258: PUSH
5259: LD_INT 0
5261: ST_TO_ADDR
// m3 := false ;
5262: LD_ADDR_VAR 0 5
5266: PUSH
5267: LD_INT 0
5269: ST_TO_ADDR
// if apeman_army then
5270: LD_EXP 9
5274: IFFALSE 5296
// begin AddMedal ( Tame , 1 ) ;
5276: LD_STRING Tame
5278: PPUSH
5279: LD_INT 1
5281: PPUSH
5282: CALL_OW 101
// m1 := true ;
5286: LD_ADDR_VAR 0 3
5290: PUSH
5291: LD_INT 1
5293: ST_TO_ADDR
// end else
5294: GO 5307
// AddMedal ( Tame , - 1 ) ;
5296: LD_STRING Tame
5298: PPUSH
5299: LD_INT 1
5301: NEG
5302: PPUSH
5303: CALL_OW 101
// if radar_researched then
5307: LD_EXP 10
5311: IFFALSE 5343
// begin SaveVariable ( true , radarResInDelta ) ;
5313: LD_INT 1
5315: PPUSH
5316: LD_STRING radarResInDelta
5318: PPUSH
5319: CALL_OW 39
// AddMedal ( Radar , 1 ) ;
5323: LD_STRING Radar
5325: PPUSH
5326: LD_INT 1
5328: PPUSH
5329: CALL_OW 101
// m2 := true ;
5333: LD_ADDR_VAR 0 4
5337: PUSH
5338: LD_INT 1
5340: ST_TO_ADDR
// end else
5341: GO 5373
// if radar_allowed then
5343: LD_EXP 7
5347: IFFALSE 5362
// AddMedal ( Radar , - 2 ) else
5349: LD_STRING Radar
5351: PPUSH
5352: LD_INT 2
5354: NEG
5355: PPUSH
5356: CALL_OW 101
5360: GO 5373
// AddMedal ( Radar , - 1 ) ;
5362: LD_STRING Radar
5364: PPUSH
5365: LD_INT 1
5367: NEG
5368: PPUSH
5369: CALL_OW 101
// if radar_builded then
5373: LD_EXP 11
5377: IFFALSE 5399
// begin AddMedal ( BuildRadar , 1 ) ;
5379: LD_STRING BuildRadar
5381: PPUSH
5382: LD_INT 1
5384: PPUSH
5385: CALL_OW 101
// m3 := true ;
5389: LD_ADDR_VAR 0 5
5393: PUSH
5394: LD_INT 1
5396: ST_TO_ADDR
// end else
5397: GO 5410
// AddMedal ( BuildRadar , - 1 ) ;
5399: LD_STRING BuildRadar
5401: PPUSH
5402: LD_INT 1
5404: NEG
5405: PPUSH
5406: CALL_OW 101
// if tick <= 7 7$00 then
5410: LD_OWVAR 1
5414: PUSH
5415: LD_INT 14700
5417: LESSEQUAL
5418: IFFALSE 5427
// SetAchievement ( ACH_ASPEED_5 ) ;
5420: LD_STRING ACH_ASPEED_5
5422: PPUSH
5423: CALL_OW 543
// if m1 and m2 and m3 and Difficulty >= 3 then
5427: LD_VAR 0 3
5431: PUSH
5432: LD_VAR 0 4
5436: AND
5437: PUSH
5438: LD_VAR 0 5
5442: AND
5443: PUSH
5444: LD_OWVAR 67
5448: PUSH
5449: LD_INT 3
5451: GREATEREQUAL
5452: AND
5453: IFFALSE 5465
// SetAchievementEX ( ACH_AMER , 5 ) ;
5455: LD_STRING ACH_AMER
5457: PPUSH
5458: LD_INT 5
5460: PPUSH
5461: CALL_OW 564
// GiveMedals ( MAIN ) ;
5465: LD_STRING MAIN
5467: PPUSH
5468: CALL_OW 102
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ;
5472: LD_ADDR_VAR 0 2
5476: PUSH
5477: LD_INT 22
5479: PUSH
5480: LD_INT 1
5482: PUSH
5483: EMPTY
5484: LIST
5485: LIST
5486: PUSH
5487: LD_INT 21
5489: PUSH
5490: LD_INT 1
5492: PUSH
5493: EMPTY
5494: LIST
5495: LIST
5496: PUSH
5497: LD_INT 2
5499: PUSH
5500: LD_INT 25
5502: PUSH
5503: LD_INT 1
5505: PUSH
5506: EMPTY
5507: LIST
5508: LIST
5509: PUSH
5510: LD_INT 25
5512: PUSH
5513: LD_INT 2
5515: PUSH
5516: EMPTY
5517: LIST
5518: LIST
5519: PUSH
5520: LD_INT 25
5522: PUSH
5523: LD_INT 3
5525: PUSH
5526: EMPTY
5527: LIST
5528: LIST
5529: PUSH
5530: LD_INT 25
5532: PUSH
5533: LD_INT 4
5535: PUSH
5536: EMPTY
5537: LIST
5538: LIST
5539: PUSH
5540: EMPTY
5541: LIST
5542: LIST
5543: LIST
5544: LIST
5545: LIST
5546: PUSH
5547: EMPTY
5548: LIST
5549: LIST
5550: LIST
5551: PPUSH
5552: CALL_OW 69
5556: ST_TO_ADDR
// RewardPeople ( tmp ) ;
5557: LD_VAR 0 2
5561: PPUSH
5562: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
5566: LD_EXP 17
5570: PPUSH
5571: LD_EXP 2
5575: PUSH
5576: LD_STRING JMM
5578: STR
5579: PPUSH
5580: CALL_OW 38
// if IsOk ( Gladstone ) then
5584: LD_EXP 18
5588: PPUSH
5589: CALL_OW 302
5593: IFFALSE 5620
// begin ToLua ( enableBioCharacter(BIO_TIM) ) ;
5595: LD_STRING enableBioCharacter(BIO_TIM)
5597: PPUSH
5598: CALL_OW 559
// SaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
5602: LD_EXP 18
5606: PPUSH
5607: LD_EXP 2
5611: PUSH
5612: LD_STRING Gladstone
5614: STR
5615: PPUSH
5616: CALL_OW 38
// end ; if IsOk ( Denis ) and GetSide ( Denis ) = 1 then
5620: LD_EXP 20
5624: PPUSH
5625: CALL_OW 302
5629: PUSH
5630: LD_EXP 20
5634: PPUSH
5635: CALL_OW 255
5639: PUSH
5640: LD_INT 1
5642: EQUAL
5643: AND
5644: IFFALSE 5681
// begin ToLua ( enableBioCharacter(BIO_DENIS) ) ;
5646: LD_STRING enableBioCharacter(BIO_DENIS)
5648: PPUSH
5649: CALL_OW 559
// SaveCharacters ( Denis , mission_prefix & Denis ) ;
5653: LD_EXP 20
5657: PPUSH
5658: LD_EXP 2
5662: PUSH
5663: LD_STRING Denis
5665: STR
5666: PPUSH
5667: CALL_OW 38
// SaveVariable ( true , DenisInDelta ) ;
5671: LD_INT 1
5673: PPUSH
5674: LD_STRING DenisInDelta
5676: PPUSH
5677: CALL_OW 39
// end ; if IsOk ( Lisa ) then
5681: LD_EXP 23
5685: PPUSH
5686: CALL_OW 302
5690: IFFALSE 5710
// begin SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
5692: LD_EXP 23
5696: PPUSH
5697: LD_EXP 2
5701: PUSH
5702: LD_STRING Lisa
5704: STR
5705: PPUSH
5706: CALL_OW 38
// end ; if IsOk ( Frank ) then
5710: LD_EXP 24
5714: PPUSH
5715: CALL_OW 302
5719: IFFALSE 5739
// begin SaveCharacters ( Frank , mission_prefix & Frank ) ;
5721: LD_EXP 24
5725: PPUSH
5726: LD_EXP 2
5730: PUSH
5731: LD_STRING Frank
5733: STR
5734: PPUSH
5735: CALL_OW 38
// end ; if IsOk ( Bobby ) then
5739: LD_EXP 25
5743: PPUSH
5744: CALL_OW 302
5748: IFFALSE 5768
// begin SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
5750: LD_EXP 25
5754: PPUSH
5755: LD_EXP 2
5759: PUSH
5760: LD_STRING Bobby
5762: STR
5763: PPUSH
5764: CALL_OW 38
// end ; if IsOk ( Cyrus ) then
5768: LD_EXP 26
5772: PPUSH
5773: CALL_OW 302
5777: IFFALSE 5797
// begin SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
5779: LD_EXP 26
5783: PPUSH
5784: LD_EXP 2
5788: PUSH
5789: LD_STRING Cyrus
5791: STR
5792: PPUSH
5793: CALL_OW 38
// end ; if IsOk ( Brown ) then
5797: LD_EXP 21
5801: PPUSH
5802: CALL_OW 302
5806: IFFALSE 5826
// begin SaveCharacters ( Brown , mission_prefix & Brown ) ;
5808: LD_EXP 21
5812: PPUSH
5813: LD_EXP 2
5817: PUSH
5818: LD_STRING Brown
5820: STR
5821: PPUSH
5822: CALL_OW 38
// end ; if IsOk ( Donaldson ) then
5826: LD_EXP 22
5830: PPUSH
5831: CALL_OW 302
5835: IFFALSE 5855
// begin SaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
5837: LD_EXP 22
5841: PPUSH
5842: LD_EXP 2
5846: PUSH
5847: LD_STRING Donaldson
5849: STR
5850: PPUSH
5851: CALL_OW 38
// end ; if IsOk ( Mike ) then
5855: LD_EXP 27
5859: PPUSH
5860: CALL_OW 302
5864: IFFALSE 5884
// SaveCharacters ( Mike , mission_prefix & Mike ) ;
5866: LD_EXP 27
5870: PPUSH
5871: LD_EXP 2
5875: PUSH
5876: LD_STRING Mike
5878: STR
5879: PPUSH
5880: CALL_OW 38
// if others then
5884: LD_EXP 28
5888: IFFALSE 5902
// SaveCharacters ( others , othersInDelta ) ;
5890: LD_EXP 28
5894: PPUSH
5895: LD_STRING othersInDelta
5897: PPUSH
5898: CALL_OW 38
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_apeman_engineer ] ] ) then
5902: LD_INT 22
5904: PUSH
5905: LD_INT 1
5907: PUSH
5908: EMPTY
5909: LIST
5910: LIST
5911: PUSH
5912: LD_INT 25
5914: PUSH
5915: LD_INT 16
5917: PUSH
5918: EMPTY
5919: LIST
5920: LIST
5921: PUSH
5922: EMPTY
5923: LIST
5924: LIST
5925: PPUSH
5926: CALL_OW 69
5930: IFFALSE 5974
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_apeman_engineer ] ] ) diff Mike , apeInDelta ) ;
5932: LD_INT 22
5934: PUSH
5935: LD_INT 1
5937: PUSH
5938: EMPTY
5939: LIST
5940: LIST
5941: PUSH
5942: LD_INT 25
5944: PUSH
5945: LD_INT 16
5947: PUSH
5948: EMPTY
5949: LIST
5950: LIST
5951: PUSH
5952: EMPTY
5953: LIST
5954: LIST
5955: PPUSH
5956: CALL_OW 69
5960: PUSH
5961: LD_EXP 27
5965: DIFF
5966: PPUSH
5967: LD_STRING apeInDelta
5969: PPUSH
5970: CALL_OW 38
// tmp := [ ] ;
5974: LD_ADDR_VAR 0 2
5978: PUSH
5979: EMPTY
5980: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) then
5981: LD_INT 22
5983: PUSH
5984: LD_INT 1
5986: PUSH
5987: EMPTY
5988: LIST
5989: LIST
5990: PUSH
5991: LD_INT 21
5993: PUSH
5994: LD_INT 2
5996: PUSH
5997: EMPTY
5998: LIST
5999: LIST
6000: PUSH
6001: EMPTY
6002: LIST
6003: LIST
6004: PPUSH
6005: CALL_OW 69
6009: IFFALSE 6120
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) do
6011: LD_ADDR_VAR 0 1
6015: PUSH
6016: LD_INT 22
6018: PUSH
6019: LD_INT 1
6021: PUSH
6022: EMPTY
6023: LIST
6024: LIST
6025: PUSH
6026: LD_INT 21
6028: PUSH
6029: LD_INT 2
6031: PUSH
6032: EMPTY
6033: LIST
6034: LIST
6035: PUSH
6036: EMPTY
6037: LIST
6038: LIST
6039: PPUSH
6040: CALL_OW 69
6044: PUSH
6045: FOR_IN
6046: IFFALSE 6118
// tmp := tmp ^ [ GetNation ( i ) , GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) ] ;
6048: LD_ADDR_VAR 0 2
6052: PUSH
6053: LD_VAR 0 2
6057: PUSH
6058: LD_VAR 0 1
6062: PPUSH
6063: CALL_OW 248
6067: PUSH
6068: LD_VAR 0 1
6072: PPUSH
6073: CALL_OW 265
6077: PUSH
6078: LD_VAR 0 1
6082: PPUSH
6083: CALL_OW 262
6087: PUSH
6088: LD_VAR 0 1
6092: PPUSH
6093: CALL_OW 263
6097: PUSH
6098: LD_VAR 0 1
6102: PPUSH
6103: CALL_OW 264
6107: PUSH
6108: EMPTY
6109: LIST
6110: LIST
6111: LIST
6112: LIST
6113: LIST
6114: ADD
6115: ST_TO_ADDR
6116: GO 6045
6118: POP
6119: POP
// if tmp then
6120: LD_VAR 0 2
6124: IFFALSE 6138
// SaveVariable ( tmp , vehiclesInDelta ) ;
6126: LD_VAR 0 2
6130: PPUSH
6131: LD_STRING vehiclesInDelta
6133: PPUSH
6134: CALL_OW 39
// tmp := [ ] ;
6138: LD_ADDR_VAR 0 2
6142: PUSH
6143: EMPTY
6144: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) then
6145: LD_INT 22
6147: PUSH
6148: LD_INT 1
6150: PUSH
6151: EMPTY
6152: LIST
6153: LIST
6154: PUSH
6155: LD_INT 21
6157: PUSH
6158: LD_INT 3
6160: PUSH
6161: EMPTY
6162: LIST
6163: LIST
6164: PUSH
6165: EMPTY
6166: LIST
6167: LIST
6168: PPUSH
6169: CALL_OW 69
6173: IFFALSE 6326
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) do
6175: LD_ADDR_VAR 0 1
6179: PUSH
6180: LD_INT 22
6182: PUSH
6183: LD_INT 1
6185: PUSH
6186: EMPTY
6187: LIST
6188: LIST
6189: PUSH
6190: LD_INT 21
6192: PUSH
6193: LD_INT 3
6195: PUSH
6196: EMPTY
6197: LIST
6198: LIST
6199: PUSH
6200: EMPTY
6201: LIST
6202: LIST
6203: PPUSH
6204: CALL_OW 69
6208: PUSH
6209: FOR_IN
6210: IFFALSE 6324
// tmp := tmp ^ [ [ GetBType ( i ) , GetBLevel ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) , GetBWeapon ( i ) ] ] ;
6212: LD_ADDR_VAR 0 2
6216: PUSH
6217: LD_VAR 0 2
6221: PUSH
6222: LD_VAR 0 1
6226: PPUSH
6227: CALL_OW 266
6231: PUSH
6232: LD_VAR 0 1
6236: PPUSH
6237: CALL_OW 267
6241: PUSH
6242: LD_VAR 0 1
6246: PPUSH
6247: CALL_OW 250
6251: PUSH
6252: LD_VAR 0 1
6256: PPUSH
6257: CALL_OW 251
6261: PUSH
6262: LD_VAR 0 1
6266: PPUSH
6267: CALL_OW 254
6271: PUSH
6272: LD_VAR 0 1
6276: PPUSH
6277: LD_INT 1
6279: PPUSH
6280: CALL_OW 268
6284: PUSH
6285: LD_VAR 0 1
6289: PPUSH
6290: LD_INT 2
6292: PPUSH
6293: CALL_OW 268
6297: PUSH
6298: LD_VAR 0 1
6302: PPUSH
6303: CALL_OW 269
6307: PUSH
6308: EMPTY
6309: LIST
6310: LIST
6311: LIST
6312: LIST
6313: LIST
6314: LIST
6315: LIST
6316: LIST
6317: PUSH
6318: EMPTY
6319: LIST
6320: ADD
6321: ST_TO_ADDR
6322: GO 6209
6324: POP
6325: POP
// if tmp then
6326: LD_VAR 0 2
6330: IFFALSE 6344
// SaveVariable ( tmp , buildingsInDelta ) ;
6332: LD_VAR 0 2
6336: PPUSH
6337: LD_STRING buildingsInDelta
6339: PPUSH
6340: CALL_OW 39
// YouWin ;
6344: CALL_OW 103
// end ; end_of_file
6348: PPOPN 5
6350: END
// export function PrepareArabianTroops ( amount , skill , area ) ; var i , un , tmp ; begin
6351: LD_INT 0
6353: PPUSH
6354: PPUSH
6355: PPUSH
6356: PPUSH
// InitHc ;
6357: CALL_OW 19
// InitUc ;
6361: CALL_OW 18
// uc_side := 2 ;
6365: LD_ADDR_OWVAR 20
6369: PUSH
6370: LD_INT 2
6372: ST_TO_ADDR
// uc_nation := 2 ;
6373: LD_ADDR_OWVAR 21
6377: PUSH
6378: LD_INT 2
6380: ST_TO_ADDR
// if not amount then
6381: LD_VAR 0 1
6385: NOT
6386: IFFALSE 6390
// exit ;
6388: GO 6513
// for i = 1 to amount do
6390: LD_ADDR_VAR 0 5
6394: PUSH
6395: DOUBLE
6396: LD_INT 1
6398: DEC
6399: ST_TO_ADDR
6400: LD_VAR 0 1
6404: PUSH
6405: FOR_TO
6406: IFFALSE 6501
// begin PrepareHuman ( false , 1 , skill ) ;
6408: LD_INT 0
6410: PPUSH
6411: LD_INT 1
6413: PPUSH
6414: LD_VAR 0 2
6418: PPUSH
6419: CALL_OW 380
// un := CreateHuman ;
6423: LD_ADDR_VAR 0 6
6427: PUSH
6428: CALL_OW 44
6432: ST_TO_ADDR
// tmp := Insert ( tmp , 1 , un ) ;
6433: LD_ADDR_VAR 0 7
6437: PUSH
6438: LD_VAR 0 7
6442: PPUSH
6443: LD_INT 1
6445: PPUSH
6446: LD_VAR 0 6
6450: PPUSH
6451: CALL_OW 2
6455: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
6456: LD_VAR 0 6
6460: PPUSH
6461: LD_VAR 0 3
6465: PPUSH
6466: LD_INT 0
6468: PPUSH
6469: CALL_OW 49
// if i mod 2 = 0 then
6473: LD_VAR 0 5
6477: PUSH
6478: LD_INT 2
6480: MOD
6481: PUSH
6482: LD_INT 0
6484: EQUAL
6485: IFFALSE 6499
// SetTag ( un , 11 ) ;
6487: LD_VAR 0 6
6491: PPUSH
6492: LD_INT 11
6494: PPUSH
6495: CALL_OW 109
// end ;
6499: GO 6405
6501: POP
6502: POP
// result := tmp ;
6503: LD_ADDR_VAR 0 4
6507: PUSH
6508: LD_VAR 0 7
6512: ST_TO_ADDR
// end ;
6513: LD_VAR 0 4
6517: RET
// export ar_forces , ap_killers ; every 0 0$1 trigger Delta do var i , timer , more_troops , skill , eng , un , veh , force ;
6518: LD_EXP 6
6522: IFFALSE 7607
6524: GO 6526
6526: DISABLE
6527: LD_INT 0
6529: PPUSH
6530: PPUSH
6531: PPUSH
6532: PPUSH
6533: PPUSH
6534: PPUSH
6535: PPUSH
6536: PPUSH
// begin more_troops := false ;
6537: LD_ADDR_VAR 0 3
6541: PUSH
6542: LD_INT 0
6544: ST_TO_ADDR
// skill := [ 3 , 4 , 5 , 5 ] [ Difficulty ] ;
6545: LD_ADDR_VAR 0 4
6549: PUSH
6550: LD_INT 3
6552: PUSH
6553: LD_INT 4
6555: PUSH
6556: LD_INT 5
6558: PUSH
6559: LD_INT 5
6561: PUSH
6562: EMPTY
6563: LIST
6564: LIST
6565: LIST
6566: LIST
6567: PUSH
6568: LD_OWVAR 67
6572: ARRAY
6573: ST_TO_ADDR
// timer := [ 5 5$00 , 4 4$00 , 3 3$00 , 2 2$30 ] [ Difficulty ] ;
6574: LD_ADDR_VAR 0 2
6578: PUSH
6579: LD_INT 10500
6581: PUSH
6582: LD_INT 8400
6584: PUSH
6585: LD_INT 6300
6587: PUSH
6588: LD_INT 5250
6590: PUSH
6591: EMPTY
6592: LIST
6593: LIST
6594: LIST
6595: LIST
6596: PUSH
6597: LD_OWVAR 67
6601: ARRAY
6602: ST_TO_ADDR
// force := [ ] ;
6603: LD_ADDR_VAR 0 8
6607: PUSH
6608: EMPTY
6609: ST_TO_ADDR
// ar_forces := [ ] ;
6610: LD_ADDR_EXP 29
6614: PUSH
6615: EMPTY
6616: ST_TO_ADDR
// ap_killers := [ ] ;
6617: LD_ADDR_EXP 30
6621: PUSH
6622: EMPTY
6623: ST_TO_ADDR
// Wait ( timer ) ;
6624: LD_VAR 0 2
6628: PPUSH
6629: CALL_OW 67
// if Denis and GetSide ( Denis ) = 4 then
6633: LD_EXP 20
6637: PUSH
6638: LD_EXP 20
6642: PPUSH
6643: CALL_OW 255
6647: PUSH
6648: LD_INT 4
6650: EQUAL
6651: AND
6652: IFFALSE 6661
// Wait ( 0 0$45 ) ;
6654: LD_INT 1575
6656: PPUSH
6657: CALL_OW 67
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_armoury ] ] ) then
6661: LD_INT 22
6663: PUSH
6664: LD_INT 1
6666: PUSH
6667: EMPTY
6668: LIST
6669: LIST
6670: PUSH
6671: LD_INT 30
6673: PUSH
6674: LD_INT 4
6676: PUSH
6677: EMPTY
6678: LIST
6679: LIST
6680: PUSH
6681: EMPTY
6682: LIST
6683: LIST
6684: PPUSH
6685: CALL_OW 69
6689: IFFALSE 6706
// begin wait ( 1 1$25 ) ;
6691: LD_INT 2975
6693: PPUSH
6694: CALL_OW 67
// more_troops := true ;
6698: LD_ADDR_VAR 0 3
6702: PUSH
6703: LD_INT 1
6705: ST_TO_ADDR
// end ; if more_troops then
6706: LD_VAR 0 3
6710: IFFALSE 6906
// begin force := PrepareArabianTroops ( [ 4 , 5 , 6 , 7 ] [ Difficulty ] , skill , arArea2 ) ;
6712: LD_ADDR_VAR 0 8
6716: PUSH
6717: LD_INT 4
6719: PUSH
6720: LD_INT 5
6722: PUSH
6723: LD_INT 6
6725: PUSH
6726: LD_INT 7
6728: PUSH
6729: EMPTY
6730: LIST
6731: LIST
6732: LIST
6733: LIST
6734: PUSH
6735: LD_OWVAR 67
6739: ARRAY
6740: PPUSH
6741: LD_VAR 0 4
6745: PPUSH
6746: LD_INT 14
6748: PPUSH
6749: CALL 6351 0 3
6753: ST_TO_ADDR
// veh := PrepareTank ( 2 , 3 , ru_medium_tracked , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_heavy_machine_gun , ru_gatling_gun , ru_gun ] [ Difficulty ] , 90 ) ;
6754: LD_ADDR_VAR 0 7
6758: PUSH
6759: LD_INT 2
6761: PPUSH
6762: LD_INT 3
6764: PPUSH
6765: LD_INT 22
6767: PPUSH
6768: LD_INT 1
6770: PPUSH
6771: LD_INT 1
6773: PPUSH
6774: LD_INT 42
6776: PUSH
6777: LD_INT 42
6779: PUSH
6780: LD_INT 43
6782: PUSH
6783: LD_INT 44
6785: PUSH
6786: EMPTY
6787: LIST
6788: LIST
6789: LIST
6790: LIST
6791: PUSH
6792: LD_OWVAR 67
6796: ARRAY
6797: PPUSH
6798: LD_INT 90
6800: PPUSH
6801: CALL 443 0 7
6805: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
6806: LD_VAR 0 7
6810: PPUSH
6811: LD_INT 4
6813: PPUSH
6814: CALL_OW 233
// PlaceUnitArea ( veh , arArea1 , false ) ;
6818: LD_VAR 0 7
6822: PPUSH
6823: LD_INT 13
6825: PPUSH
6826: LD_INT 0
6828: PPUSH
6829: CALL_OW 49
// uc_side := 2 ;
6833: LD_ADDR_OWVAR 20
6837: PUSH
6838: LD_INT 2
6840: ST_TO_ADDR
// uc_nation := 2 ;
6841: LD_ADDR_OWVAR 21
6845: PUSH
6846: LD_INT 2
6848: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
6849: LD_INT 0
6851: PPUSH
6852: LD_INT 1
6854: PPUSH
6855: LD_VAR 0 4
6859: PPUSH
6860: CALL_OW 380
// un := CreateHuman ;
6864: LD_ADDR_VAR 0 6
6868: PUSH
6869: CALL_OW 44
6873: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6874: LD_VAR 0 6
6878: PPUSH
6879: LD_VAR 0 7
6883: PPUSH
6884: CALL_OW 52
// force := force ^ un ;
6888: LD_ADDR_VAR 0 8
6892: PUSH
6893: LD_VAR 0 8
6897: PUSH
6898: LD_VAR 0 6
6902: ADD
6903: ST_TO_ADDR
// end else
6904: GO 6948
// begin force := PrepareArabianTroops ( [ 3 , 4 , 5 , 6 ] [ Difficulty ] , skill , arArea2 ) ;
6906: LD_ADDR_VAR 0 8
6910: PUSH
6911: LD_INT 3
6913: PUSH
6914: LD_INT 4
6916: PUSH
6917: LD_INT 5
6919: PUSH
6920: LD_INT 6
6922: PUSH
6923: EMPTY
6924: LIST
6925: LIST
6926: LIST
6927: LIST
6928: PUSH
6929: LD_OWVAR 67
6933: ARRAY
6934: PPUSH
6935: LD_VAR 0 4
6939: PPUSH
6940: LD_INT 14
6942: PPUSH
6943: CALL 6351 0 3
6947: ST_TO_ADDR
// end ; if force then
6948: LD_VAR 0 8
6952: IFFALSE 6964
// ar_forces := force ;
6954: LD_ADDR_EXP 29
6958: PUSH
6959: LD_VAR 0 8
6963: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
6964: LD_INT 35
6966: PPUSH
6967: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) = 0 ;
6971: LD_INT 22
6973: PUSH
6974: LD_INT 2
6976: PUSH
6977: EMPTY
6978: LIST
6979: LIST
6980: PUSH
6981: LD_INT 21
6983: PUSH
6984: LD_INT 1
6986: PUSH
6987: EMPTY
6988: LIST
6989: LIST
6990: PUSH
6991: EMPTY
6992: LIST
6993: LIST
6994: PPUSH
6995: CALL_OW 69
6999: PUSH
7000: LD_INT 0
7002: EQUAL
7003: IFFALSE 6964
// wait ( timer ) ;
7005: LD_VAR 0 2
7009: PPUSH
7010: CALL_OW 67
// force := PrepareArabianTroops ( [ 4 , 5 , 6 , 7 ] [ Difficulty ] , skill , [ arArea1 , arArea2 ] [ rand ( 1 , 2 ) ] ) ;
7014: LD_ADDR_VAR 0 8
7018: PUSH
7019: LD_INT 4
7021: PUSH
7022: LD_INT 5
7024: PUSH
7025: LD_INT 6
7027: PUSH
7028: LD_INT 7
7030: PUSH
7031: EMPTY
7032: LIST
7033: LIST
7034: LIST
7035: LIST
7036: PUSH
7037: LD_OWVAR 67
7041: ARRAY
7042: PPUSH
7043: LD_VAR 0 4
7047: PPUSH
7048: LD_INT 13
7050: PUSH
7051: LD_INT 14
7053: PUSH
7054: EMPTY
7055: LIST
7056: LIST
7057: PUSH
7058: LD_INT 1
7060: PPUSH
7061: LD_INT 2
7063: PPUSH
7064: CALL_OW 12
7068: ARRAY
7069: PPUSH
7070: CALL 6351 0 3
7074: ST_TO_ADDR
// if Difficulty > 1 and Delta then
7075: LD_OWVAR 67
7079: PUSH
7080: LD_INT 1
7082: GREATER
7083: PUSH
7084: LD_EXP 6
7088: AND
7089: IFFALSE 7168
// begin uc_side := 2 ;
7091: LD_ADDR_OWVAR 20
7095: PUSH
7096: LD_INT 2
7098: ST_TO_ADDR
// uc_nation := 2 ;
7099: LD_ADDR_OWVAR 21
7103: PUSH
7104: LD_INT 2
7106: ST_TO_ADDR
// PrepareHuman ( false , 2 , skill ) ;
7107: LD_INT 0
7109: PPUSH
7110: LD_INT 2
7112: PPUSH
7113: LD_VAR 0 4
7117: PPUSH
7118: CALL_OW 380
// eng := CreateHuman ;
7122: LD_ADDR_VAR 0 5
7126: PUSH
7127: CALL_OW 44
7131: ST_TO_ADDR
// PlaceUnitArea ( eng , arArea1 , false ) ;
7132: LD_VAR 0 5
7136: PPUSH
7137: LD_INT 13
7139: PPUSH
7140: LD_INT 0
7142: PPUSH
7143: CALL_OW 49
// Wait ( 3 ) ;
7147: LD_INT 3
7149: PPUSH
7150: CALL_OW 67
// AddComEnterUnit ( eng , Delta ) ;
7154: LD_VAR 0 5
7158: PPUSH
7159: LD_EXP 6
7163: PPUSH
7164: CALL_OW 180
// end ; if force then
7168: LD_VAR 0 8
7172: IFFALSE 7184
// ar_forces := force ;
7174: LD_ADDR_EXP 29
7178: PUSH
7179: LD_VAR 0 8
7183: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
7184: LD_INT 35
7186: PPUSH
7187: CALL_OW 67
// if eng then
7191: LD_VAR 0 5
7195: IFFALSE 7249
// if GetSide ( Delta ) = 2 and IsOk ( eng ) and not IsInUnit ( eng ) then
7197: LD_EXP 6
7201: PPUSH
7202: CALL_OW 255
7206: PUSH
7207: LD_INT 2
7209: EQUAL
7210: PUSH
7211: LD_VAR 0 5
7215: PPUSH
7216: CALL_OW 302
7220: AND
7221: PUSH
7222: LD_VAR 0 5
7226: PPUSH
7227: CALL_OW 310
7231: NOT
7232: AND
7233: IFFALSE 7249
// ComEnterUnit ( eng , Delta ) ;
7235: LD_VAR 0 5
7239: PPUSH
7240: LD_EXP 6
7244: PPUSH
7245: CALL_OW 120
// until FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) = 0 ;
7249: LD_INT 22
7251: PUSH
7252: LD_INT 2
7254: PUSH
7255: EMPTY
7256: LIST
7257: LIST
7258: PUSH
7259: LD_INT 21
7261: PUSH
7262: LD_INT 1
7264: PUSH
7265: EMPTY
7266: LIST
7267: LIST
7268: PUSH
7269: EMPTY
7270: LIST
7271: LIST
7272: PPUSH
7273: CALL_OW 69
7277: PUSH
7278: LD_INT 0
7280: EQUAL
7281: IFFALSE 7184
// Wait ( 2 2$00 ) ;
7283: LD_INT 4200
7285: PPUSH
7286: CALL_OW 67
// ap_killers := PrepareArabianTroops ( [ 1 , 2 , 2 , 2 ] [ Difficulty ] , skill , arArea1 ) ;
7290: LD_ADDR_EXP 30
7294: PUSH
7295: LD_INT 1
7297: PUSH
7298: LD_INT 2
7300: PUSH
7301: LD_INT 2
7303: PUSH
7304: LD_INT 2
7306: PUSH
7307: EMPTY
7308: LIST
7309: LIST
7310: LIST
7311: LIST
7312: PUSH
7313: LD_OWVAR 67
7317: ARRAY
7318: PPUSH
7319: LD_VAR 0 4
7323: PPUSH
7324: LD_INT 13
7326: PPUSH
7327: CALL 6351 0 3
7331: ST_TO_ADDR
// Wait ( timer * 2 ) ;
7332: LD_VAR 0 2
7336: PUSH
7337: LD_INT 2
7339: MUL
7340: PPUSH
7341: CALL_OW 67
// ar_forces := PrepareArabianTroops ( [ 5 , 6 , 7 , 8 ] [ Difficulty ] , skill , arArea1 ) ^ PrepareArabianTroops ( [ 3 , 4 , 4 , 4 ] [ Difficulty ] , skill , arArea2 ) ;
7345: LD_ADDR_EXP 29
7349: PUSH
7350: LD_INT 5
7352: PUSH
7353: LD_INT 6
7355: PUSH
7356: LD_INT 7
7358: PUSH
7359: LD_INT 8
7361: PUSH
7362: EMPTY
7363: LIST
7364: LIST
7365: LIST
7366: LIST
7367: PUSH
7368: LD_OWVAR 67
7372: ARRAY
7373: PPUSH
7374: LD_VAR 0 4
7378: PPUSH
7379: LD_INT 13
7381: PPUSH
7382: CALL 6351 0 3
7386: PUSH
7387: LD_INT 3
7389: PUSH
7390: LD_INT 4
7392: PUSH
7393: LD_INT 4
7395: PUSH
7396: LD_INT 4
7398: PUSH
7399: EMPTY
7400: LIST
7401: LIST
7402: LIST
7403: LIST
7404: PUSH
7405: LD_OWVAR 67
7409: ARRAY
7410: PPUSH
7411: LD_VAR 0 4
7415: PPUSH
7416: LD_INT 14
7418: PPUSH
7419: CALL 6351 0 3
7423: ADD
7424: ST_TO_ADDR
// if Difficulty < 4 and not traitor then
7425: LD_OWVAR 67
7429: PUSH
7430: LD_INT 4
7432: LESS
7433: PUSH
7434: LD_EXP 16
7438: NOT
7439: AND
7440: IFFALSE 7444
// exit ;
7442: GO 7607
// veh := PrepareTank ( 2 , 3 , ru_medium_tracked , engine_combustion , control_manual , ru_gun , 90 ) ;
7444: LD_ADDR_VAR 0 7
7448: PUSH
7449: LD_INT 2
7451: PPUSH
7452: LD_INT 3
7454: PPUSH
7455: LD_INT 22
7457: PPUSH
7458: LD_INT 1
7460: PPUSH
7461: LD_INT 1
7463: PPUSH
7464: LD_INT 44
7466: PPUSH
7467: LD_INT 90
7469: PPUSH
7470: CALL 443 0 7
7474: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
7475: LD_VAR 0 7
7479: PPUSH
7480: LD_INT 1
7482: PPUSH
7483: CALL_OW 233
// PlaceUnitXY ( veh , 28 , 51 , false ) ;
7487: LD_VAR 0 7
7491: PPUSH
7492: LD_INT 28
7494: PPUSH
7495: LD_INT 51
7497: PPUSH
7498: LD_INT 0
7500: PPUSH
7501: CALL_OW 48
// uc_side := 2 ;
7505: LD_ADDR_OWVAR 20
7509: PUSH
7510: LD_INT 2
7512: ST_TO_ADDR
// uc_nation := 2 ;
7513: LD_ADDR_OWVAR 21
7517: PUSH
7518: LD_INT 2
7520: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
7521: LD_INT 0
7523: PPUSH
7524: LD_INT 1
7526: PPUSH
7527: LD_VAR 0 4
7531: PPUSH
7532: CALL_OW 380
// un := CreateHuman ;
7536: LD_ADDR_VAR 0 6
7540: PUSH
7541: CALL_OW 44
7545: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
7546: LD_VAR 0 6
7550: PPUSH
7551: LD_VAR 0 7
7555: PPUSH
7556: CALL_OW 52
// ar_forces := Join ( ar_forces , un ) ;
7560: LD_ADDR_EXP 29
7564: PUSH
7565: LD_EXP 29
7569: PPUSH
7570: LD_VAR 0 6
7574: PPUSH
7575: CALL 67833 0 2
7579: ST_TO_ADDR
// ar_forces := ar_forces union PrepareArabianTroops ( 4 , skill , arArea3 ) ;
7580: LD_ADDR_EXP 29
7584: PUSH
7585: LD_EXP 29
7589: PUSH
7590: LD_INT 4
7592: PPUSH
7593: LD_VAR 0 4
7597: PPUSH
7598: LD_INT 19
7600: PPUSH
7601: CALL 6351 0 3
7605: UNION
7606: ST_TO_ADDR
// end ;
7607: PPOPN 8
7609: END
// every 0 0$03 trigger ar_forces do var i , target ;
7610: LD_EXP 29
7614: IFFALSE 7812
7616: GO 7618
7618: DISABLE
7619: LD_INT 0
7621: PPUSH
7622: PPUSH
// begin enable ;
7623: ENABLE
// if not ar_forces then
7624: LD_EXP 29
7628: NOT
7629: IFFALSE 7633
// exit ;
7631: GO 7812
// if Delta then
7633: LD_EXP 6
7637: IFFALSE 7651
// target := Delta else
7639: LD_ADDR_VAR 0 2
7643: PUSH
7644: LD_EXP 6
7648: ST_TO_ADDR
7649: GO 7661
// target := JMM ;
7651: LD_ADDR_VAR 0 2
7655: PUSH
7656: LD_EXP 17
7660: ST_TO_ADDR
// for i in ar_forces do
7661: LD_ADDR_VAR 0 1
7665: PUSH
7666: LD_EXP 29
7670: PUSH
7671: FOR_IN
7672: IFFALSE 7810
// begin if i in FilterAllUnits ( [ f_driving ] ) then
7674: LD_VAR 0 1
7678: PUSH
7679: LD_INT 55
7681: PUSH
7682: EMPTY
7683: LIST
7684: PPUSH
7685: CALL_OW 69
7689: IN
7690: IFFALSE 7733
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , IsInUnit ( i ) ) ) else
7692: LD_VAR 0 1
7696: PPUSH
7697: LD_INT 22
7699: PUSH
7700: LD_INT 1
7702: PUSH
7703: EMPTY
7704: LIST
7705: LIST
7706: PPUSH
7707: CALL_OW 69
7711: PPUSH
7712: LD_VAR 0 1
7716: PPUSH
7717: CALL_OW 310
7721: PPUSH
7722: CALL_OW 74
7726: PPUSH
7727: CALL_OW 115
7731: GO 7808
// if GetDistUnits ( i , target ) > 30 then
7733: LD_VAR 0 1
7737: PPUSH
7738: LD_VAR 0 2
7742: PPUSH
7743: CALL_OW 296
7747: PUSH
7748: LD_INT 30
7750: GREATER
7751: IFFALSE 7784
// ComAgressiveMove ( i , GetX ( target ) , GetY ( target ) ) else
7753: LD_VAR 0 1
7757: PPUSH
7758: LD_VAR 0 2
7762: PPUSH
7763: CALL_OW 250
7767: PPUSH
7768: LD_VAR 0 2
7772: PPUSH
7773: CALL_OW 251
7777: PPUSH
7778: CALL_OW 114
7782: GO 7808
// Attack ( i , FilterAllUnits ( [ f_enemy , 2 ] ) ) ;
7784: LD_VAR 0 1
7788: PPUSH
7789: LD_INT 81
7791: PUSH
7792: LD_INT 2
7794: PUSH
7795: EMPTY
7796: LIST
7797: LIST
7798: PPUSH
7799: CALL_OW 69
7803: PPUSH
7804: CALL 935 0 2
// end ;
7808: GO 7671
7810: POP
7811: POP
// end ;
7812: PPOPN 2
7814: END
// every 0 0$01 trigger ap_killers do var filter , i , target ;
7815: LD_EXP 30
7819: IFFALSE 7979
7821: GO 7823
7823: DISABLE
7824: LD_INT 0
7826: PPUSH
7827: PPUSH
7828: PPUSH
// begin enable ;
7829: ENABLE
// filter := FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) ;
7830: LD_ADDR_VAR 0 1
7834: PUSH
7835: LD_INT 22
7837: PUSH
7838: LD_INT 0
7840: PUSH
7841: EMPTY
7842: LIST
7843: LIST
7844: PUSH
7845: LD_INT 25
7847: PUSH
7848: LD_INT 12
7850: PUSH
7851: EMPTY
7852: LIST
7853: LIST
7854: PUSH
7855: EMPTY
7856: LIST
7857: LIST
7858: PPUSH
7859: CALL_OW 69
7863: ST_TO_ADDR
// if not filter then
7864: LD_VAR 0 1
7868: NOT
7869: IFFALSE 7896
// begin ar_forces := ar_forces ^ ap_killers ;
7871: LD_ADDR_EXP 29
7875: PUSH
7876: LD_EXP 29
7880: PUSH
7881: LD_EXP 30
7885: ADD
7886: ST_TO_ADDR
// ap_killers := [ ] ;
7887: LD_ADDR_EXP 30
7891: PUSH
7892: EMPTY
7893: ST_TO_ADDR
// exit ;
7894: GO 7979
// end ; for i in ap_killers do
7896: LD_ADDR_VAR 0 2
7900: PUSH
7901: LD_EXP 30
7905: PUSH
7906: FOR_IN
7907: IFFALSE 7977
// begin if not IsOk ( i ) then
7909: LD_VAR 0 2
7913: PPUSH
7914: CALL_OW 302
7918: NOT
7919: IFFALSE 7923
// continue ;
7921: GO 7906
// if not HasTask ( i ) then
7923: LD_VAR 0 2
7927: PPUSH
7928: CALL_OW 314
7932: NOT
7933: IFFALSE 7955
// target := NearestUnitToUnit ( filter , i ) ;
7935: LD_ADDR_VAR 0 3
7939: PUSH
7940: LD_VAR 0 1
7944: PPUSH
7945: LD_VAR 0 2
7949: PPUSH
7950: CALL_OW 74
7954: ST_TO_ADDR
// if target then
7955: LD_VAR 0 3
7959: IFFALSE 7975
// ComAttackUnit ( i , target ) ;
7961: LD_VAR 0 2
7965: PPUSH
7966: LD_VAR 0 3
7970: PPUSH
7971: CALL_OW 115
// end ;
7975: GO 7906
7977: POP
7978: POP
// end ; end_of_file
7979: PPOPN 3
7981: END
// every 0 0$40 + 0 0$2 trigger Delta do var i , counter , cr ;
7982: LD_EXP 6
7986: IFFALSE 8122
7988: GO 7990
7990: DISABLE
7991: LD_INT 0
7993: PPUSH
7994: PPUSH
7995: PPUSH
// begin counter := [ 300 , 250 , 220 , 210 ] [ Difficulty ] ;
7996: LD_ADDR_VAR 0 2
8000: PUSH
8001: LD_INT 300
8003: PUSH
8004: LD_INT 250
8006: PUSH
8007: LD_INT 220
8009: PUSH
8010: LD_INT 210
8012: PUSH
8013: EMPTY
8014: LIST
8015: LIST
8016: LIST
8017: LIST
8018: PUSH
8019: LD_OWVAR 67
8023: ARRAY
8024: ST_TO_ADDR
// CreateCratesArea ( Rand ( 1 , 3 ) , cratesArea , true ) ;
8025: LD_INT 1
8027: PPUSH
8028: LD_INT 3
8030: PPUSH
8031: CALL_OW 12
8035: PPUSH
8036: LD_INT 7
8038: PPUSH
8039: LD_INT 1
8041: PPUSH
8042: CALL_OW 55
// repeat wait ( rand ( 1 1$30 , 2 2$20 ) ) ;
8046: LD_INT 3150
8048: PPUSH
8049: LD_INT 4900
8051: PPUSH
8052: CALL_OW 12
8056: PPUSH
8057: CALL_OW 67
// cr := rand ( 1 , 5 ) ;
8061: LD_ADDR_VAR 0 3
8065: PUSH
8066: LD_INT 1
8068: PPUSH
8069: LD_INT 5
8071: PPUSH
8072: CALL_OW 12
8076: ST_TO_ADDR
// CreateCratesArea ( cr , cratesArea , true ) ;
8077: LD_VAR 0 3
8081: PPUSH
8082: LD_INT 7
8084: PPUSH
8085: LD_INT 1
8087: PPUSH
8088: CALL_OW 55
// counter := counter - cr * 10 ;
8092: LD_ADDR_VAR 0 2
8096: PUSH
8097: LD_VAR 0 2
8101: PUSH
8102: LD_VAR 0 3
8106: PUSH
8107: LD_INT 10
8109: MUL
8110: MINUS
8111: ST_TO_ADDR
// until counter <= 0 ;
8112: LD_VAR 0 2
8116: PUSH
8117: LD_INT 0
8119: LESSEQUAL
8120: IFFALSE 8046
// end ;
8122: PPOPN 3
8124: END
// every 0 0$03 trigger not Delta do var i ;
8125: LD_EXP 6
8129: NOT
8130: IFFALSE 8200
8132: GO 8134
8134: DISABLE
8135: LD_INT 0
8137: PPUSH
// begin for i = 1 to 5 - Difficulty do
8138: LD_ADDR_VAR 0 1
8142: PUSH
8143: DOUBLE
8144: LD_INT 1
8146: DEC
8147: ST_TO_ADDR
8148: LD_INT 5
8150: PUSH
8151: LD_OWVAR 67
8155: MINUS
8156: PUSH
8157: FOR_TO
8158: IFFALSE 8198
// begin CreateCratesArea ( rand ( 2 , 5 ) , deltaMainArea , true ) ;
8160: LD_INT 2
8162: PPUSH
8163: LD_INT 5
8165: PPUSH
8166: CALL_OW 12
8170: PPUSH
8171: LD_INT 8
8173: PPUSH
8174: LD_INT 1
8176: PPUSH
8177: CALL_OW 55
// Wait ( rand ( 0 0$16 , 0 0$39 ) ) ;
8181: LD_INT 560
8183: PPUSH
8184: LD_INT 1365
8186: PPUSH
8187: CALL_OW 12
8191: PPUSH
8192: CALL_OW 67
// end ;
8196: GO 8157
8198: POP
8199: POP
// end ;
8200: PPOPN 1
8202: END
// every 3 3$00 trigger tick < 15 15$00 do
8203: LD_OWVAR 1
8207: PUSH
8208: LD_INT 31500
8210: LESS
8211: IFFALSE 8271
8213: GO 8215
8215: DISABLE
// begin enable ;
8216: ENABLE
// CreateCratesAnyWhere ( rand ( 1 , 3 ) , true ) ;
8217: LD_INT 1
8219: PPUSH
8220: LD_INT 3
8222: PPUSH
8223: CALL_OW 12
8227: PPUSH
8228: LD_INT 1
8230: PPUSH
8231: CALL_OW 57
// Wait ( rand ( 0 0$38 , 0 0$59 ) ) ;
8235: LD_INT 1330
8237: PPUSH
8238: LD_INT 2065
8240: PPUSH
8241: CALL_OW 12
8245: PPUSH
8246: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 4 ) , riverArea , true ) ;
8250: LD_INT 1
8252: PPUSH
8253: LD_INT 4
8255: PPUSH
8256: CALL_OW 12
8260: PPUSH
8261: LD_INT 15
8263: PPUSH
8264: LD_INT 1
8266: PPUSH
8267: CALL_OW 55
// end ; end_of_file
8271: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
8272: LD_VAR 0 1
8276: PPUSH
8277: CALL 24817 0 1
// if un = JMM then
8281: LD_VAR 0 1
8285: PUSH
8286: LD_EXP 17
8290: EQUAL
8291: IFFALSE 8300
// YouLost ( JMM ) ;
8293: LD_STRING JMM
8295: PPUSH
8296: CALL_OW 104
// if un = Delta then
8300: LD_VAR 0 1
8304: PUSH
8305: LD_EXP 6
8309: EQUAL
8310: IFFALSE 8333
// begin Delta := 0 ;
8312: LD_ADDR_EXP 6
8316: PUSH
8317: LD_INT 0
8319: ST_TO_ADDR
// SetRestrict ( b_depot , 1 , true ) ;
8320: LD_INT 0
8322: PPUSH
8323: LD_INT 1
8325: PPUSH
8326: LD_INT 1
8328: PPUSH
8329: CALL_OW 324
// end ; if un in ar_forces then
8333: LD_VAR 0 1
8337: PUSH
8338: LD_EXP 29
8342: IN
8343: IFFALSE 8361
// ar_forces := ar_forces diff un ;
8345: LD_ADDR_EXP 29
8349: PUSH
8350: LD_EXP 29
8354: PUSH
8355: LD_VAR 0 1
8359: DIFF
8360: ST_TO_ADDR
// if un in ap_killers then
8361: LD_VAR 0 1
8365: PUSH
8366: LD_EXP 30
8370: IN
8371: IFFALSE 8389
// ap_killers := ap_killers diff un ;
8373: LD_ADDR_EXP 30
8377: PUSH
8378: LD_EXP 30
8382: PUSH
8383: LD_VAR 0 1
8387: DIFF
8388: ST_TO_ADDR
// if un in FilterAllUnits ( [ f_or , [ f_class , class_apeman ] , [ f_class , class_apeman_engineer ] ] ) then
8389: LD_VAR 0 1
8393: PUSH
8394: LD_INT 2
8396: PUSH
8397: LD_INT 25
8399: PUSH
8400: LD_INT 12
8402: PUSH
8403: EMPTY
8404: LIST
8405: LIST
8406: PUSH
8407: LD_INT 25
8409: PUSH
8410: LD_INT 16
8412: PUSH
8413: EMPTY
8414: LIST
8415: LIST
8416: PUSH
8417: EMPTY
8418: LIST
8419: LIST
8420: LIST
8421: PPUSH
8422: CALL_OW 69
8426: IN
8427: IFFALSE 8443
// apeKillCounter := apeKillCounter + 1 ;
8429: LD_ADDR_EXP 15
8433: PUSH
8434: LD_EXP 15
8438: PUSH
8439: LD_INT 1
8441: PLUS
8442: ST_TO_ADDR
// end ;
8443: PPOPN 1
8445: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if un in FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) and killerSide = 1 then
8446: LD_VAR 0 1
8450: PUSH
8451: LD_INT 22
8453: PUSH
8454: LD_INT 1
8456: PUSH
8457: EMPTY
8458: LIST
8459: LIST
8460: PUSH
8461: LD_INT 23
8463: PUSH
8464: LD_INT 1
8466: PUSH
8467: EMPTY
8468: LIST
8469: LIST
8470: PUSH
8471: LD_INT 21
8473: PUSH
8474: LD_INT 1
8476: PUSH
8477: EMPTY
8478: LIST
8479: LIST
8480: PUSH
8481: EMPTY
8482: LIST
8483: LIST
8484: LIST
8485: PPUSH
8486: CALL_OW 69
8490: IN
8491: PUSH
8492: LD_VAR 0 2
8496: PUSH
8497: LD_INT 1
8499: EQUAL
8500: AND
8501: IFFALSE 8511
// traitor := true ;
8503: LD_ADDR_EXP 16
8507: PUSH
8508: LD_INT 1
8510: ST_TO_ADDR
// end ;
8511: PPOPN 3
8513: END
// on VehicleConstructed ( veh , fac ) do begin SOS_VehicleConstructed ( veh , fac ) ;
8514: LD_VAR 0 1
8518: PPUSH
8519: LD_VAR 0 2
8523: PPUSH
8524: CALL 24875 0 2
// end ;
8528: PPOPN 2
8530: END
// on Contact ( s1 , s2 ) do begin if s1 = 1 and s2 = 2 and not arab_spotted then
8531: LD_VAR 0 1
8535: PUSH
8536: LD_INT 1
8538: EQUAL
8539: PUSH
8540: LD_VAR 0 2
8544: PUSH
8545: LD_INT 2
8547: EQUAL
8548: AND
8549: PUSH
8550: LD_EXP 13
8554: NOT
8555: AND
8556: IFFALSE 8566
// arab_spotted := true ;
8558: LD_ADDR_EXP 13
8562: PUSH
8563: LD_INT 1
8565: ST_TO_ADDR
// end ;
8566: PPOPN 2
8568: END
// on EndTheMissionRaised ( p ) do begin if FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] , [ f_type , unit_human ] ] ) then
8569: LD_INT 22
8571: PUSH
8572: LD_INT 2
8574: PUSH
8575: EMPTY
8576: LIST
8577: LIST
8578: PUSH
8579: LD_INT 50
8581: PUSH
8582: EMPTY
8583: LIST
8584: PUSH
8585: LD_INT 21
8587: PUSH
8588: LD_INT 1
8590: PUSH
8591: EMPTY
8592: LIST
8593: LIST
8594: PUSH
8595: EMPTY
8596: LIST
8597: LIST
8598: LIST
8599: PPUSH
8600: CALL_OW 69
8604: IFFALSE 8615
// begin Query ( QArabOnMap ) ;
8606: LD_STRING QArabOnMap
8608: PPUSH
8609: CALL_OW 97
// exit ;
8613: GO 8631
// end ; end_the_mission_allowed := false ;
8615: LD_ADDR_OWVAR 57
8619: PUSH
8620: LD_INT 0
8622: ST_TO_ADDR
// end_mission := true ;
8623: LD_ADDR_EXP 14
8627: PUSH
8628: LD_INT 1
8630: ST_TO_ADDR
// end ;
8631: PPOPN 1
8633: END
// on ApemanTamed ( apeman , sci ) do begin if GetSide ( sci ) = 1 then
8634: LD_VAR 0 2
8638: PPUSH
8639: CALL_OW 255
8643: PUSH
8644: LD_INT 1
8646: EQUAL
8647: IFFALSE 8663
// apeman_counter := apeman_counter + 1 ;
8649: LD_ADDR_EXP 12
8653: PUSH
8654: LD_EXP 12
8658: PUSH
8659: LD_INT 1
8661: PLUS
8662: ST_TO_ADDR
// if not first_apeman_tamed then
8663: LD_EXP 8
8667: NOT
8668: IFFALSE 8867
// begin first_apeman_tamed := true ;
8670: LD_ADDR_EXP 8
8674: PUSH
8675: LD_INT 1
8677: ST_TO_ADDR
// if sci = Gladstone then
8678: LD_VAR 0 2
8682: PUSH
8683: LD_EXP 18
8687: EQUAL
8688: IFFALSE 8702
// Say ( Gladstone , D7b-Glad-1 ) ;
8690: LD_EXP 18
8694: PPUSH
8695: LD_STRING D7b-Glad-1
8697: PPUSH
8698: CALL_OW 88
// if sci = Denis then
8702: LD_VAR 0 2
8706: PUSH
8707: LD_EXP 20
8711: EQUAL
8712: IFFALSE 8726
// Say ( Denis , D7a-Den-1 ) ;
8714: LD_EXP 20
8718: PPUSH
8719: LD_STRING D7a-Den-1
8721: PPUSH
8722: CALL_OW 88
// if not sci in [ JMM , Gladstone , Denis , Lisa , Frank , Bobby , Cyrus , Donaldson ] then
8726: LD_VAR 0 2
8730: PUSH
8731: LD_EXP 17
8735: PUSH
8736: LD_EXP 18
8740: PUSH
8741: LD_EXP 20
8745: PUSH
8746: LD_EXP 23
8750: PUSH
8751: LD_EXP 24
8755: PUSH
8756: LD_EXP 25
8760: PUSH
8761: LD_EXP 26
8765: PUSH
8766: LD_EXP 22
8770: PUSH
8771: EMPTY
8772: LIST
8773: LIST
8774: LIST
8775: LIST
8776: LIST
8777: LIST
8778: LIST
8779: LIST
8780: IN
8781: NOT
8782: IFFALSE 8825
// begin if GetSex ( sci ) = sex_male then
8784: LD_VAR 0 2
8788: PPUSH
8789: CALL_OW 258
8793: PUSH
8794: LD_INT 1
8796: EQUAL
8797: IFFALSE 8813
// Say ( sci , D7c-Sci1-1 ) else
8799: LD_VAR 0 2
8803: PPUSH
8804: LD_STRING D7c-Sci1-1
8806: PPUSH
8807: CALL_OW 88
8811: GO 8825
// Say ( sci , D7c-FSci1-1 ) ;
8813: LD_VAR 0 2
8817: PPUSH
8818: LD_STRING D7c-FSci1-1
8820: PPUSH
8821: CALL_OW 88
// end ; if sci <> Gladstone then
8825: LD_VAR 0 2
8829: PUSH
8830: LD_EXP 18
8834: NONEQUAL
8835: IFFALSE 8849
// Say ( Gladstone , D7c-Glad-1 ) ;
8837: LD_EXP 18
8841: PPUSH
8842: LD_STRING D7c-Glad-1
8844: PPUSH
8845: CALL_OW 88
// if Lisa then
8849: LD_EXP 23
8853: IFFALSE 8867
// Say ( Lisa , D8-Lisa-1 ) ;
8855: LD_EXP 23
8859: PPUSH
8860: LD_STRING D8-Lisa-1
8862: PPUSH
8863: CALL_OW 88
// end ; end ; end_of_file end_of_file
8867: PPOPN 2
8869: END
// export globalGameSaveCounter ; every 0 0$1 do
8870: GO 8872
8872: DISABLE
// begin enable ;
8873: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
8874: LD_STRING updateTimer(
8876: PUSH
8877: LD_OWVAR 1
8881: STR
8882: PUSH
8883: LD_STRING );
8885: STR
8886: PPUSH
8887: CALL_OW 559
// end ;
8891: END
// every 0 0$1 do
8892: GO 8894
8894: DISABLE
// begin globalGameSaveCounter := 0 ;
8895: LD_ADDR_EXP 31
8899: PUSH
8900: LD_INT 0
8902: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
8903: LD_STRING setGameSaveCounter(0)
8905: PPUSH
8906: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
8910: LD_STRING initStreamRollete();
8912: PPUSH
8913: CALL_OW 559
// InitStreamMode ;
8917: CALL 10260 0 0
// DefineStreamItems ( false ) ;
8921: LD_INT 0
8923: PPUSH
8924: CALL 10724 0 1
// end ;
8928: END
// export function SOS_MapStart ( ) ; begin
8929: LD_INT 0
8931: PPUSH
// if streamModeActive then
8932: LD_EXP 32
8936: IFFALSE 8945
// DefineStreamItems ( true ) ;
8938: LD_INT 1
8940: PPUSH
8941: CALL 10724 0 1
// UpdateLuaVariables ( ) ;
8945: CALL 8962 0 0
// UpdateFactoryWaypoints ( ) ;
8949: CALL 23726 0 0
// UpdateWarehouseGatheringPoints ( ) ;
8953: CALL 23978 0 0
// end ;
8957: LD_VAR 0 1
8961: RET
// function UpdateLuaVariables ( ) ; begin
8962: LD_INT 0
8964: PPUSH
// if globalGameSaveCounter then
8965: LD_EXP 31
8969: IFFALSE 9003
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
8971: LD_ADDR_EXP 31
8975: PUSH
8976: LD_EXP 31
8980: PPUSH
8981: CALL 69194 0 1
8985: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
8986: LD_STRING setGameSaveCounter(
8988: PUSH
8989: LD_EXP 31
8993: STR
8994: PUSH
8995: LD_STRING )
8997: STR
8998: PPUSH
8999: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
9003: LD_STRING setGameDifficulty(
9005: PUSH
9006: LD_OWVAR 67
9010: STR
9011: PUSH
9012: LD_STRING )
9014: STR
9015: PPUSH
9016: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
9020: LD_STRING displayDifficulty(
9022: PUSH
9023: LD_OWVAR 67
9027: STR
9028: PUSH
9029: LD_STRING )
9031: STR
9032: PPUSH
9033: CALL_OW 559
// end ;
9037: LD_VAR 0 1
9041: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
9042: LD_INT 0
9044: PPUSH
// if p2 = stream_mode then
9045: LD_VAR 0 2
9049: PUSH
9050: LD_INT 100
9052: EQUAL
9053: IFFALSE 10056
// begin if not StreamModeActive then
9055: LD_EXP 32
9059: NOT
9060: IFFALSE 9070
// StreamModeActive := true ;
9062: LD_ADDR_EXP 32
9066: PUSH
9067: LD_INT 1
9069: ST_TO_ADDR
// if p3 = 0 then
9070: LD_VAR 0 3
9074: PUSH
9075: LD_INT 0
9077: EQUAL
9078: IFFALSE 9084
// InitStreamMode ;
9080: CALL 10260 0 0
// if p3 = 1 then
9084: LD_VAR 0 3
9088: PUSH
9089: LD_INT 1
9091: EQUAL
9092: IFFALSE 9102
// sRocket := true ;
9094: LD_ADDR_EXP 37
9098: PUSH
9099: LD_INT 1
9101: ST_TO_ADDR
// if p3 = 2 then
9102: LD_VAR 0 3
9106: PUSH
9107: LD_INT 2
9109: EQUAL
9110: IFFALSE 9120
// sSpeed := true ;
9112: LD_ADDR_EXP 36
9116: PUSH
9117: LD_INT 1
9119: ST_TO_ADDR
// if p3 = 3 then
9120: LD_VAR 0 3
9124: PUSH
9125: LD_INT 3
9127: EQUAL
9128: IFFALSE 9138
// sEngine := true ;
9130: LD_ADDR_EXP 38
9134: PUSH
9135: LD_INT 1
9137: ST_TO_ADDR
// if p3 = 4 then
9138: LD_VAR 0 3
9142: PUSH
9143: LD_INT 4
9145: EQUAL
9146: IFFALSE 9156
// sSpec := true ;
9148: LD_ADDR_EXP 35
9152: PUSH
9153: LD_INT 1
9155: ST_TO_ADDR
// if p3 = 5 then
9156: LD_VAR 0 3
9160: PUSH
9161: LD_INT 5
9163: EQUAL
9164: IFFALSE 9174
// sLevel := true ;
9166: LD_ADDR_EXP 39
9170: PUSH
9171: LD_INT 1
9173: ST_TO_ADDR
// if p3 = 6 then
9174: LD_VAR 0 3
9178: PUSH
9179: LD_INT 6
9181: EQUAL
9182: IFFALSE 9192
// sArmoury := true ;
9184: LD_ADDR_EXP 40
9188: PUSH
9189: LD_INT 1
9191: ST_TO_ADDR
// if p3 = 7 then
9192: LD_VAR 0 3
9196: PUSH
9197: LD_INT 7
9199: EQUAL
9200: IFFALSE 9210
// sRadar := true ;
9202: LD_ADDR_EXP 41
9206: PUSH
9207: LD_INT 1
9209: ST_TO_ADDR
// if p3 = 8 then
9210: LD_VAR 0 3
9214: PUSH
9215: LD_INT 8
9217: EQUAL
9218: IFFALSE 9228
// sBunker := true ;
9220: LD_ADDR_EXP 42
9224: PUSH
9225: LD_INT 1
9227: ST_TO_ADDR
// if p3 = 9 then
9228: LD_VAR 0 3
9232: PUSH
9233: LD_INT 9
9235: EQUAL
9236: IFFALSE 9246
// sHack := true ;
9238: LD_ADDR_EXP 43
9242: PUSH
9243: LD_INT 1
9245: ST_TO_ADDR
// if p3 = 10 then
9246: LD_VAR 0 3
9250: PUSH
9251: LD_INT 10
9253: EQUAL
9254: IFFALSE 9264
// sFire := true ;
9256: LD_ADDR_EXP 44
9260: PUSH
9261: LD_INT 1
9263: ST_TO_ADDR
// if p3 = 11 then
9264: LD_VAR 0 3
9268: PUSH
9269: LD_INT 11
9271: EQUAL
9272: IFFALSE 9282
// sRefresh := true ;
9274: LD_ADDR_EXP 45
9278: PUSH
9279: LD_INT 1
9281: ST_TO_ADDR
// if p3 = 12 then
9282: LD_VAR 0 3
9286: PUSH
9287: LD_INT 12
9289: EQUAL
9290: IFFALSE 9300
// sExp := true ;
9292: LD_ADDR_EXP 46
9296: PUSH
9297: LD_INT 1
9299: ST_TO_ADDR
// if p3 = 13 then
9300: LD_VAR 0 3
9304: PUSH
9305: LD_INT 13
9307: EQUAL
9308: IFFALSE 9318
// sDepot := true ;
9310: LD_ADDR_EXP 47
9314: PUSH
9315: LD_INT 1
9317: ST_TO_ADDR
// if p3 = 14 then
9318: LD_VAR 0 3
9322: PUSH
9323: LD_INT 14
9325: EQUAL
9326: IFFALSE 9336
// sFlag := true ;
9328: LD_ADDR_EXP 48
9332: PUSH
9333: LD_INT 1
9335: ST_TO_ADDR
// if p3 = 15 then
9336: LD_VAR 0 3
9340: PUSH
9341: LD_INT 15
9343: EQUAL
9344: IFFALSE 9354
// sKamikadze := true ;
9346: LD_ADDR_EXP 56
9350: PUSH
9351: LD_INT 1
9353: ST_TO_ADDR
// if p3 = 16 then
9354: LD_VAR 0 3
9358: PUSH
9359: LD_INT 16
9361: EQUAL
9362: IFFALSE 9372
// sTroll := true ;
9364: LD_ADDR_EXP 57
9368: PUSH
9369: LD_INT 1
9371: ST_TO_ADDR
// if p3 = 17 then
9372: LD_VAR 0 3
9376: PUSH
9377: LD_INT 17
9379: EQUAL
9380: IFFALSE 9390
// sSlow := true ;
9382: LD_ADDR_EXP 58
9386: PUSH
9387: LD_INT 1
9389: ST_TO_ADDR
// if p3 = 18 then
9390: LD_VAR 0 3
9394: PUSH
9395: LD_INT 18
9397: EQUAL
9398: IFFALSE 9408
// sLack := true ;
9400: LD_ADDR_EXP 59
9404: PUSH
9405: LD_INT 1
9407: ST_TO_ADDR
// if p3 = 19 then
9408: LD_VAR 0 3
9412: PUSH
9413: LD_INT 19
9415: EQUAL
9416: IFFALSE 9426
// sTank := true ;
9418: LD_ADDR_EXP 61
9422: PUSH
9423: LD_INT 1
9425: ST_TO_ADDR
// if p3 = 20 then
9426: LD_VAR 0 3
9430: PUSH
9431: LD_INT 20
9433: EQUAL
9434: IFFALSE 9444
// sRemote := true ;
9436: LD_ADDR_EXP 62
9440: PUSH
9441: LD_INT 1
9443: ST_TO_ADDR
// if p3 = 21 then
9444: LD_VAR 0 3
9448: PUSH
9449: LD_INT 21
9451: EQUAL
9452: IFFALSE 9462
// sPowell := true ;
9454: LD_ADDR_EXP 63
9458: PUSH
9459: LD_INT 1
9461: ST_TO_ADDR
// if p3 = 22 then
9462: LD_VAR 0 3
9466: PUSH
9467: LD_INT 22
9469: EQUAL
9470: IFFALSE 9480
// sTeleport := true ;
9472: LD_ADDR_EXP 66
9476: PUSH
9477: LD_INT 1
9479: ST_TO_ADDR
// if p3 = 23 then
9480: LD_VAR 0 3
9484: PUSH
9485: LD_INT 23
9487: EQUAL
9488: IFFALSE 9498
// sOilTower := true ;
9490: LD_ADDR_EXP 68
9494: PUSH
9495: LD_INT 1
9497: ST_TO_ADDR
// if p3 = 24 then
9498: LD_VAR 0 3
9502: PUSH
9503: LD_INT 24
9505: EQUAL
9506: IFFALSE 9516
// sShovel := true ;
9508: LD_ADDR_EXP 69
9512: PUSH
9513: LD_INT 1
9515: ST_TO_ADDR
// if p3 = 25 then
9516: LD_VAR 0 3
9520: PUSH
9521: LD_INT 25
9523: EQUAL
9524: IFFALSE 9534
// sSheik := true ;
9526: LD_ADDR_EXP 70
9530: PUSH
9531: LD_INT 1
9533: ST_TO_ADDR
// if p3 = 26 then
9534: LD_VAR 0 3
9538: PUSH
9539: LD_INT 26
9541: EQUAL
9542: IFFALSE 9552
// sEarthquake := true ;
9544: LD_ADDR_EXP 72
9548: PUSH
9549: LD_INT 1
9551: ST_TO_ADDR
// if p3 = 27 then
9552: LD_VAR 0 3
9556: PUSH
9557: LD_INT 27
9559: EQUAL
9560: IFFALSE 9570
// sAI := true ;
9562: LD_ADDR_EXP 73
9566: PUSH
9567: LD_INT 1
9569: ST_TO_ADDR
// if p3 = 28 then
9570: LD_VAR 0 3
9574: PUSH
9575: LD_INT 28
9577: EQUAL
9578: IFFALSE 9588
// sCargo := true ;
9580: LD_ADDR_EXP 76
9584: PUSH
9585: LD_INT 1
9587: ST_TO_ADDR
// if p3 = 29 then
9588: LD_VAR 0 3
9592: PUSH
9593: LD_INT 29
9595: EQUAL
9596: IFFALSE 9606
// sDLaser := true ;
9598: LD_ADDR_EXP 77
9602: PUSH
9603: LD_INT 1
9605: ST_TO_ADDR
// if p3 = 30 then
9606: LD_VAR 0 3
9610: PUSH
9611: LD_INT 30
9613: EQUAL
9614: IFFALSE 9624
// sExchange := true ;
9616: LD_ADDR_EXP 78
9620: PUSH
9621: LD_INT 1
9623: ST_TO_ADDR
// if p3 = 31 then
9624: LD_VAR 0 3
9628: PUSH
9629: LD_INT 31
9631: EQUAL
9632: IFFALSE 9642
// sFac := true ;
9634: LD_ADDR_EXP 79
9638: PUSH
9639: LD_INT 1
9641: ST_TO_ADDR
// if p3 = 32 then
9642: LD_VAR 0 3
9646: PUSH
9647: LD_INT 32
9649: EQUAL
9650: IFFALSE 9660
// sPower := true ;
9652: LD_ADDR_EXP 80
9656: PUSH
9657: LD_INT 1
9659: ST_TO_ADDR
// if p3 = 33 then
9660: LD_VAR 0 3
9664: PUSH
9665: LD_INT 33
9667: EQUAL
9668: IFFALSE 9678
// sRandom := true ;
9670: LD_ADDR_EXP 81
9674: PUSH
9675: LD_INT 1
9677: ST_TO_ADDR
// if p3 = 34 then
9678: LD_VAR 0 3
9682: PUSH
9683: LD_INT 34
9685: EQUAL
9686: IFFALSE 9696
// sShield := true ;
9688: LD_ADDR_EXP 82
9692: PUSH
9693: LD_INT 1
9695: ST_TO_ADDR
// if p3 = 35 then
9696: LD_VAR 0 3
9700: PUSH
9701: LD_INT 35
9703: EQUAL
9704: IFFALSE 9714
// sTime := true ;
9706: LD_ADDR_EXP 83
9710: PUSH
9711: LD_INT 1
9713: ST_TO_ADDR
// if p3 = 36 then
9714: LD_VAR 0 3
9718: PUSH
9719: LD_INT 36
9721: EQUAL
9722: IFFALSE 9732
// sTools := true ;
9724: LD_ADDR_EXP 84
9728: PUSH
9729: LD_INT 1
9731: ST_TO_ADDR
// if p3 = 101 then
9732: LD_VAR 0 3
9736: PUSH
9737: LD_INT 101
9739: EQUAL
9740: IFFALSE 9750
// sSold := true ;
9742: LD_ADDR_EXP 49
9746: PUSH
9747: LD_INT 1
9749: ST_TO_ADDR
// if p3 = 102 then
9750: LD_VAR 0 3
9754: PUSH
9755: LD_INT 102
9757: EQUAL
9758: IFFALSE 9768
// sDiff := true ;
9760: LD_ADDR_EXP 50
9764: PUSH
9765: LD_INT 1
9767: ST_TO_ADDR
// if p3 = 103 then
9768: LD_VAR 0 3
9772: PUSH
9773: LD_INT 103
9775: EQUAL
9776: IFFALSE 9786
// sFog := true ;
9778: LD_ADDR_EXP 53
9782: PUSH
9783: LD_INT 1
9785: ST_TO_ADDR
// if p3 = 104 then
9786: LD_VAR 0 3
9790: PUSH
9791: LD_INT 104
9793: EQUAL
9794: IFFALSE 9804
// sReset := true ;
9796: LD_ADDR_EXP 54
9800: PUSH
9801: LD_INT 1
9803: ST_TO_ADDR
// if p3 = 105 then
9804: LD_VAR 0 3
9808: PUSH
9809: LD_INT 105
9811: EQUAL
9812: IFFALSE 9822
// sSun := true ;
9814: LD_ADDR_EXP 55
9818: PUSH
9819: LD_INT 1
9821: ST_TO_ADDR
// if p3 = 106 then
9822: LD_VAR 0 3
9826: PUSH
9827: LD_INT 106
9829: EQUAL
9830: IFFALSE 9840
// sTiger := true ;
9832: LD_ADDR_EXP 51
9836: PUSH
9837: LD_INT 1
9839: ST_TO_ADDR
// if p3 = 107 then
9840: LD_VAR 0 3
9844: PUSH
9845: LD_INT 107
9847: EQUAL
9848: IFFALSE 9858
// sBomb := true ;
9850: LD_ADDR_EXP 52
9854: PUSH
9855: LD_INT 1
9857: ST_TO_ADDR
// if p3 = 108 then
9858: LD_VAR 0 3
9862: PUSH
9863: LD_INT 108
9865: EQUAL
9866: IFFALSE 9876
// sWound := true ;
9868: LD_ADDR_EXP 60
9872: PUSH
9873: LD_INT 1
9875: ST_TO_ADDR
// if p3 = 109 then
9876: LD_VAR 0 3
9880: PUSH
9881: LD_INT 109
9883: EQUAL
9884: IFFALSE 9894
// sBetray := true ;
9886: LD_ADDR_EXP 64
9890: PUSH
9891: LD_INT 1
9893: ST_TO_ADDR
// if p3 = 110 then
9894: LD_VAR 0 3
9898: PUSH
9899: LD_INT 110
9901: EQUAL
9902: IFFALSE 9912
// sContamin := true ;
9904: LD_ADDR_EXP 65
9908: PUSH
9909: LD_INT 1
9911: ST_TO_ADDR
// if p3 = 111 then
9912: LD_VAR 0 3
9916: PUSH
9917: LD_INT 111
9919: EQUAL
9920: IFFALSE 9930
// sOil := true ;
9922: LD_ADDR_EXP 67
9926: PUSH
9927: LD_INT 1
9929: ST_TO_ADDR
// if p3 = 112 then
9930: LD_VAR 0 3
9934: PUSH
9935: LD_INT 112
9937: EQUAL
9938: IFFALSE 9948
// sStu := true ;
9940: LD_ADDR_EXP 71
9944: PUSH
9945: LD_INT 1
9947: ST_TO_ADDR
// if p3 = 113 then
9948: LD_VAR 0 3
9952: PUSH
9953: LD_INT 113
9955: EQUAL
9956: IFFALSE 9966
// sBazooka := true ;
9958: LD_ADDR_EXP 74
9962: PUSH
9963: LD_INT 1
9965: ST_TO_ADDR
// if p3 = 114 then
9966: LD_VAR 0 3
9970: PUSH
9971: LD_INT 114
9973: EQUAL
9974: IFFALSE 9984
// sMortar := true ;
9976: LD_ADDR_EXP 75
9980: PUSH
9981: LD_INT 1
9983: ST_TO_ADDR
// if p3 = 115 then
9984: LD_VAR 0 3
9988: PUSH
9989: LD_INT 115
9991: EQUAL
9992: IFFALSE 10002
// sRanger := true ;
9994: LD_ADDR_EXP 85
9998: PUSH
9999: LD_INT 1
10001: ST_TO_ADDR
// if p3 = 116 then
10002: LD_VAR 0 3
10006: PUSH
10007: LD_INT 116
10009: EQUAL
10010: IFFALSE 10020
// sComputer := true ;
10012: LD_ADDR_EXP 86
10016: PUSH
10017: LD_INT 1
10019: ST_TO_ADDR
// if p3 = 117 then
10020: LD_VAR 0 3
10024: PUSH
10025: LD_INT 117
10027: EQUAL
10028: IFFALSE 10038
// s30 := true ;
10030: LD_ADDR_EXP 87
10034: PUSH
10035: LD_INT 1
10037: ST_TO_ADDR
// if p3 = 118 then
10038: LD_VAR 0 3
10042: PUSH
10043: LD_INT 118
10045: EQUAL
10046: IFFALSE 10056
// s60 := true ;
10048: LD_ADDR_EXP 88
10052: PUSH
10053: LD_INT 1
10055: ST_TO_ADDR
// end ; if p2 = hack_mode then
10056: LD_VAR 0 2
10060: PUSH
10061: LD_INT 101
10063: EQUAL
10064: IFFALSE 10192
// begin case p3 of 1 :
10066: LD_VAR 0 3
10070: PUSH
10071: LD_INT 1
10073: DOUBLE
10074: EQUAL
10075: IFTRUE 10079
10077: GO 10086
10079: POP
// hHackUnlimitedResources ; 2 :
10080: CALL 22339 0 0
10084: GO 10192
10086: LD_INT 2
10088: DOUBLE
10089: EQUAL
10090: IFTRUE 10094
10092: GO 10101
10094: POP
// hHackSetLevel10 ; 3 :
10095: CALL 22472 0 0
10099: GO 10192
10101: LD_INT 3
10103: DOUBLE
10104: EQUAL
10105: IFTRUE 10109
10107: GO 10116
10109: POP
// hHackSetLevel10YourUnits ; 4 :
10110: CALL 22557 0 0
10114: GO 10192
10116: LD_INT 4
10118: DOUBLE
10119: EQUAL
10120: IFTRUE 10124
10122: GO 10131
10124: POP
// hHackInvincible ; 5 :
10125: CALL 23005 0 0
10129: GO 10192
10131: LD_INT 5
10133: DOUBLE
10134: EQUAL
10135: IFTRUE 10139
10137: GO 10146
10139: POP
// hHackInvisible ; 6 :
10140: CALL 23116 0 0
10144: GO 10192
10146: LD_INT 6
10148: DOUBLE
10149: EQUAL
10150: IFTRUE 10154
10152: GO 10161
10154: POP
// hHackChangeYourSide ; 7 :
10155: CALL 23173 0 0
10159: GO 10192
10161: LD_INT 7
10163: DOUBLE
10164: EQUAL
10165: IFTRUE 10169
10167: GO 10176
10169: POP
// hHackChangeUnitSide ; 8 :
10170: CALL 23215 0 0
10174: GO 10192
10176: LD_INT 8
10178: DOUBLE
10179: EQUAL
10180: IFTRUE 10184
10182: GO 10191
10184: POP
// hHackFog ; end ;
10185: CALL 23316 0 0
10189: GO 10192
10191: POP
// end ; if p2 = game_save_mode then
10192: LD_VAR 0 2
10196: PUSH
10197: LD_INT 102
10199: EQUAL
10200: IFFALSE 10255
// begin if p3 = 1 then
10202: LD_VAR 0 3
10206: PUSH
10207: LD_INT 1
10209: EQUAL
10210: IFFALSE 10222
// globalGameSaveCounter := p4 ;
10212: LD_ADDR_EXP 31
10216: PUSH
10217: LD_VAR 0 4
10221: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
10222: LD_VAR 0 3
10226: PUSH
10227: LD_INT 2
10229: EQUAL
10230: PUSH
10231: LD_EXP 31
10235: AND
10236: IFFALSE 10255
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
10238: LD_STRING setGameSaveCounter(
10240: PUSH
10241: LD_EXP 31
10245: STR
10246: PUSH
10247: LD_STRING )
10249: STR
10250: PPUSH
10251: CALL_OW 559
// end ; end ;
10255: LD_VAR 0 7
10259: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
10260: LD_INT 0
10262: PPUSH
// streamModeActive := false ;
10263: LD_ADDR_EXP 32
10267: PUSH
10268: LD_INT 0
10270: ST_TO_ADDR
// normalCounter := 36 ;
10271: LD_ADDR_EXP 33
10275: PUSH
10276: LD_INT 36
10278: ST_TO_ADDR
// hardcoreCounter := 18 ;
10279: LD_ADDR_EXP 34
10283: PUSH
10284: LD_INT 18
10286: ST_TO_ADDR
// sRocket := false ;
10287: LD_ADDR_EXP 37
10291: PUSH
10292: LD_INT 0
10294: ST_TO_ADDR
// sSpeed := false ;
10295: LD_ADDR_EXP 36
10299: PUSH
10300: LD_INT 0
10302: ST_TO_ADDR
// sEngine := false ;
10303: LD_ADDR_EXP 38
10307: PUSH
10308: LD_INT 0
10310: ST_TO_ADDR
// sSpec := false ;
10311: LD_ADDR_EXP 35
10315: PUSH
10316: LD_INT 0
10318: ST_TO_ADDR
// sLevel := false ;
10319: LD_ADDR_EXP 39
10323: PUSH
10324: LD_INT 0
10326: ST_TO_ADDR
// sArmoury := false ;
10327: LD_ADDR_EXP 40
10331: PUSH
10332: LD_INT 0
10334: ST_TO_ADDR
// sRadar := false ;
10335: LD_ADDR_EXP 41
10339: PUSH
10340: LD_INT 0
10342: ST_TO_ADDR
// sBunker := false ;
10343: LD_ADDR_EXP 42
10347: PUSH
10348: LD_INT 0
10350: ST_TO_ADDR
// sHack := false ;
10351: LD_ADDR_EXP 43
10355: PUSH
10356: LD_INT 0
10358: ST_TO_ADDR
// sFire := false ;
10359: LD_ADDR_EXP 44
10363: PUSH
10364: LD_INT 0
10366: ST_TO_ADDR
// sRefresh := false ;
10367: LD_ADDR_EXP 45
10371: PUSH
10372: LD_INT 0
10374: ST_TO_ADDR
// sExp := false ;
10375: LD_ADDR_EXP 46
10379: PUSH
10380: LD_INT 0
10382: ST_TO_ADDR
// sDepot := false ;
10383: LD_ADDR_EXP 47
10387: PUSH
10388: LD_INT 0
10390: ST_TO_ADDR
// sFlag := false ;
10391: LD_ADDR_EXP 48
10395: PUSH
10396: LD_INT 0
10398: ST_TO_ADDR
// sKamikadze := false ;
10399: LD_ADDR_EXP 56
10403: PUSH
10404: LD_INT 0
10406: ST_TO_ADDR
// sTroll := false ;
10407: LD_ADDR_EXP 57
10411: PUSH
10412: LD_INT 0
10414: ST_TO_ADDR
// sSlow := false ;
10415: LD_ADDR_EXP 58
10419: PUSH
10420: LD_INT 0
10422: ST_TO_ADDR
// sLack := false ;
10423: LD_ADDR_EXP 59
10427: PUSH
10428: LD_INT 0
10430: ST_TO_ADDR
// sTank := false ;
10431: LD_ADDR_EXP 61
10435: PUSH
10436: LD_INT 0
10438: ST_TO_ADDR
// sRemote := false ;
10439: LD_ADDR_EXP 62
10443: PUSH
10444: LD_INT 0
10446: ST_TO_ADDR
// sPowell := false ;
10447: LD_ADDR_EXP 63
10451: PUSH
10452: LD_INT 0
10454: ST_TO_ADDR
// sTeleport := false ;
10455: LD_ADDR_EXP 66
10459: PUSH
10460: LD_INT 0
10462: ST_TO_ADDR
// sOilTower := false ;
10463: LD_ADDR_EXP 68
10467: PUSH
10468: LD_INT 0
10470: ST_TO_ADDR
// sShovel := false ;
10471: LD_ADDR_EXP 69
10475: PUSH
10476: LD_INT 0
10478: ST_TO_ADDR
// sSheik := false ;
10479: LD_ADDR_EXP 70
10483: PUSH
10484: LD_INT 0
10486: ST_TO_ADDR
// sEarthquake := false ;
10487: LD_ADDR_EXP 72
10491: PUSH
10492: LD_INT 0
10494: ST_TO_ADDR
// sAI := false ;
10495: LD_ADDR_EXP 73
10499: PUSH
10500: LD_INT 0
10502: ST_TO_ADDR
// sCargo := false ;
10503: LD_ADDR_EXP 76
10507: PUSH
10508: LD_INT 0
10510: ST_TO_ADDR
// sDLaser := false ;
10511: LD_ADDR_EXP 77
10515: PUSH
10516: LD_INT 0
10518: ST_TO_ADDR
// sExchange := false ;
10519: LD_ADDR_EXP 78
10523: PUSH
10524: LD_INT 0
10526: ST_TO_ADDR
// sFac := false ;
10527: LD_ADDR_EXP 79
10531: PUSH
10532: LD_INT 0
10534: ST_TO_ADDR
// sPower := false ;
10535: LD_ADDR_EXP 80
10539: PUSH
10540: LD_INT 0
10542: ST_TO_ADDR
// sRandom := false ;
10543: LD_ADDR_EXP 81
10547: PUSH
10548: LD_INT 0
10550: ST_TO_ADDR
// sShield := false ;
10551: LD_ADDR_EXP 82
10555: PUSH
10556: LD_INT 0
10558: ST_TO_ADDR
// sTime := false ;
10559: LD_ADDR_EXP 83
10563: PUSH
10564: LD_INT 0
10566: ST_TO_ADDR
// sTools := false ;
10567: LD_ADDR_EXP 84
10571: PUSH
10572: LD_INT 0
10574: ST_TO_ADDR
// sSold := false ;
10575: LD_ADDR_EXP 49
10579: PUSH
10580: LD_INT 0
10582: ST_TO_ADDR
// sDiff := false ;
10583: LD_ADDR_EXP 50
10587: PUSH
10588: LD_INT 0
10590: ST_TO_ADDR
// sFog := false ;
10591: LD_ADDR_EXP 53
10595: PUSH
10596: LD_INT 0
10598: ST_TO_ADDR
// sReset := false ;
10599: LD_ADDR_EXP 54
10603: PUSH
10604: LD_INT 0
10606: ST_TO_ADDR
// sSun := false ;
10607: LD_ADDR_EXP 55
10611: PUSH
10612: LD_INT 0
10614: ST_TO_ADDR
// sTiger := false ;
10615: LD_ADDR_EXP 51
10619: PUSH
10620: LD_INT 0
10622: ST_TO_ADDR
// sBomb := false ;
10623: LD_ADDR_EXP 52
10627: PUSH
10628: LD_INT 0
10630: ST_TO_ADDR
// sWound := false ;
10631: LD_ADDR_EXP 60
10635: PUSH
10636: LD_INT 0
10638: ST_TO_ADDR
// sBetray := false ;
10639: LD_ADDR_EXP 64
10643: PUSH
10644: LD_INT 0
10646: ST_TO_ADDR
// sContamin := false ;
10647: LD_ADDR_EXP 65
10651: PUSH
10652: LD_INT 0
10654: ST_TO_ADDR
// sOil := false ;
10655: LD_ADDR_EXP 67
10659: PUSH
10660: LD_INT 0
10662: ST_TO_ADDR
// sStu := false ;
10663: LD_ADDR_EXP 71
10667: PUSH
10668: LD_INT 0
10670: ST_TO_ADDR
// sBazooka := false ;
10671: LD_ADDR_EXP 74
10675: PUSH
10676: LD_INT 0
10678: ST_TO_ADDR
// sMortar := false ;
10679: LD_ADDR_EXP 75
10683: PUSH
10684: LD_INT 0
10686: ST_TO_ADDR
// sRanger := false ;
10687: LD_ADDR_EXP 85
10691: PUSH
10692: LD_INT 0
10694: ST_TO_ADDR
// sComputer := false ;
10695: LD_ADDR_EXP 86
10699: PUSH
10700: LD_INT 0
10702: ST_TO_ADDR
// s30 := false ;
10703: LD_ADDR_EXP 87
10707: PUSH
10708: LD_INT 0
10710: ST_TO_ADDR
// s60 := false ;
10711: LD_ADDR_EXP 88
10715: PUSH
10716: LD_INT 0
10718: ST_TO_ADDR
// end ;
10719: LD_VAR 0 1
10723: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
10724: LD_INT 0
10726: PPUSH
10727: PPUSH
10728: PPUSH
10729: PPUSH
10730: PPUSH
10731: PPUSH
10732: PPUSH
// result := [ ] ;
10733: LD_ADDR_VAR 0 2
10737: PUSH
10738: EMPTY
10739: ST_TO_ADDR
// if campaign_id = 1 then
10740: LD_OWVAR 69
10744: PUSH
10745: LD_INT 1
10747: EQUAL
10748: IFFALSE 13914
// begin case mission_number of 1 :
10750: LD_OWVAR 70
10754: PUSH
10755: LD_INT 1
10757: DOUBLE
10758: EQUAL
10759: IFTRUE 10763
10761: GO 10839
10763: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
10764: LD_ADDR_VAR 0 2
10768: PUSH
10769: LD_INT 2
10771: PUSH
10772: LD_INT 4
10774: PUSH
10775: LD_INT 11
10777: PUSH
10778: LD_INT 12
10780: PUSH
10781: LD_INT 15
10783: PUSH
10784: LD_INT 16
10786: PUSH
10787: LD_INT 22
10789: PUSH
10790: LD_INT 23
10792: PUSH
10793: LD_INT 26
10795: PUSH
10796: EMPTY
10797: LIST
10798: LIST
10799: LIST
10800: LIST
10801: LIST
10802: LIST
10803: LIST
10804: LIST
10805: LIST
10806: PUSH
10807: LD_INT 101
10809: PUSH
10810: LD_INT 102
10812: PUSH
10813: LD_INT 106
10815: PUSH
10816: LD_INT 116
10818: PUSH
10819: LD_INT 117
10821: PUSH
10822: LD_INT 118
10824: PUSH
10825: EMPTY
10826: LIST
10827: LIST
10828: LIST
10829: LIST
10830: LIST
10831: LIST
10832: PUSH
10833: EMPTY
10834: LIST
10835: LIST
10836: ST_TO_ADDR
10837: GO 13912
10839: LD_INT 2
10841: DOUBLE
10842: EQUAL
10843: IFTRUE 10847
10845: GO 10931
10847: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
10848: LD_ADDR_VAR 0 2
10852: PUSH
10853: LD_INT 2
10855: PUSH
10856: LD_INT 4
10858: PUSH
10859: LD_INT 11
10861: PUSH
10862: LD_INT 12
10864: PUSH
10865: LD_INT 15
10867: PUSH
10868: LD_INT 16
10870: PUSH
10871: LD_INT 22
10873: PUSH
10874: LD_INT 23
10876: PUSH
10877: LD_INT 26
10879: PUSH
10880: EMPTY
10881: LIST
10882: LIST
10883: LIST
10884: LIST
10885: LIST
10886: LIST
10887: LIST
10888: LIST
10889: LIST
10890: PUSH
10891: LD_INT 101
10893: PUSH
10894: LD_INT 102
10896: PUSH
10897: LD_INT 105
10899: PUSH
10900: LD_INT 106
10902: PUSH
10903: LD_INT 108
10905: PUSH
10906: LD_INT 116
10908: PUSH
10909: LD_INT 117
10911: PUSH
10912: LD_INT 118
10914: PUSH
10915: EMPTY
10916: LIST
10917: LIST
10918: LIST
10919: LIST
10920: LIST
10921: LIST
10922: LIST
10923: LIST
10924: PUSH
10925: EMPTY
10926: LIST
10927: LIST
10928: ST_TO_ADDR
10929: GO 13912
10931: LD_INT 3
10933: DOUBLE
10934: EQUAL
10935: IFTRUE 10939
10937: GO 11027
10939: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
10940: LD_ADDR_VAR 0 2
10944: PUSH
10945: LD_INT 2
10947: PUSH
10948: LD_INT 4
10950: PUSH
10951: LD_INT 5
10953: PUSH
10954: LD_INT 11
10956: PUSH
10957: LD_INT 12
10959: PUSH
10960: LD_INT 15
10962: PUSH
10963: LD_INT 16
10965: PUSH
10966: LD_INT 22
10968: PUSH
10969: LD_INT 26
10971: PUSH
10972: LD_INT 36
10974: PUSH
10975: EMPTY
10976: LIST
10977: LIST
10978: LIST
10979: LIST
10980: LIST
10981: LIST
10982: LIST
10983: LIST
10984: LIST
10985: LIST
10986: PUSH
10987: LD_INT 101
10989: PUSH
10990: LD_INT 102
10992: PUSH
10993: LD_INT 105
10995: PUSH
10996: LD_INT 106
10998: PUSH
10999: LD_INT 108
11001: PUSH
11002: LD_INT 116
11004: PUSH
11005: LD_INT 117
11007: PUSH
11008: LD_INT 118
11010: PUSH
11011: EMPTY
11012: LIST
11013: LIST
11014: LIST
11015: LIST
11016: LIST
11017: LIST
11018: LIST
11019: LIST
11020: PUSH
11021: EMPTY
11022: LIST
11023: LIST
11024: ST_TO_ADDR
11025: GO 13912
11027: LD_INT 4
11029: DOUBLE
11030: EQUAL
11031: IFTRUE 11035
11033: GO 11131
11035: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
11036: LD_ADDR_VAR 0 2
11040: PUSH
11041: LD_INT 2
11043: PUSH
11044: LD_INT 4
11046: PUSH
11047: LD_INT 5
11049: PUSH
11050: LD_INT 8
11052: PUSH
11053: LD_INT 11
11055: PUSH
11056: LD_INT 12
11058: PUSH
11059: LD_INT 15
11061: PUSH
11062: LD_INT 16
11064: PUSH
11065: LD_INT 22
11067: PUSH
11068: LD_INT 23
11070: PUSH
11071: LD_INT 26
11073: PUSH
11074: LD_INT 36
11076: PUSH
11077: EMPTY
11078: LIST
11079: LIST
11080: LIST
11081: LIST
11082: LIST
11083: LIST
11084: LIST
11085: LIST
11086: LIST
11087: LIST
11088: LIST
11089: LIST
11090: PUSH
11091: LD_INT 101
11093: PUSH
11094: LD_INT 102
11096: PUSH
11097: LD_INT 105
11099: PUSH
11100: LD_INT 106
11102: PUSH
11103: LD_INT 108
11105: PUSH
11106: LD_INT 116
11108: PUSH
11109: LD_INT 117
11111: PUSH
11112: LD_INT 118
11114: PUSH
11115: EMPTY
11116: LIST
11117: LIST
11118: LIST
11119: LIST
11120: LIST
11121: LIST
11122: LIST
11123: LIST
11124: PUSH
11125: EMPTY
11126: LIST
11127: LIST
11128: ST_TO_ADDR
11129: GO 13912
11131: LD_INT 5
11133: DOUBLE
11134: EQUAL
11135: IFTRUE 11139
11137: GO 11251
11139: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
11140: LD_ADDR_VAR 0 2
11144: PUSH
11145: LD_INT 2
11147: PUSH
11148: LD_INT 4
11150: PUSH
11151: LD_INT 5
11153: PUSH
11154: LD_INT 6
11156: PUSH
11157: LD_INT 8
11159: PUSH
11160: LD_INT 11
11162: PUSH
11163: LD_INT 12
11165: PUSH
11166: LD_INT 15
11168: PUSH
11169: LD_INT 16
11171: PUSH
11172: LD_INT 22
11174: PUSH
11175: LD_INT 23
11177: PUSH
11178: LD_INT 25
11180: PUSH
11181: LD_INT 26
11183: PUSH
11184: LD_INT 36
11186: PUSH
11187: EMPTY
11188: LIST
11189: LIST
11190: LIST
11191: LIST
11192: LIST
11193: LIST
11194: LIST
11195: LIST
11196: LIST
11197: LIST
11198: LIST
11199: LIST
11200: LIST
11201: LIST
11202: PUSH
11203: LD_INT 101
11205: PUSH
11206: LD_INT 102
11208: PUSH
11209: LD_INT 105
11211: PUSH
11212: LD_INT 106
11214: PUSH
11215: LD_INT 108
11217: PUSH
11218: LD_INT 109
11220: PUSH
11221: LD_INT 112
11223: PUSH
11224: LD_INT 116
11226: PUSH
11227: LD_INT 117
11229: PUSH
11230: LD_INT 118
11232: PUSH
11233: EMPTY
11234: LIST
11235: LIST
11236: LIST
11237: LIST
11238: LIST
11239: LIST
11240: LIST
11241: LIST
11242: LIST
11243: LIST
11244: PUSH
11245: EMPTY
11246: LIST
11247: LIST
11248: ST_TO_ADDR
11249: GO 13912
11251: LD_INT 6
11253: DOUBLE
11254: EQUAL
11255: IFTRUE 11259
11257: GO 11391
11259: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
11260: LD_ADDR_VAR 0 2
11264: PUSH
11265: LD_INT 2
11267: PUSH
11268: LD_INT 4
11270: PUSH
11271: LD_INT 5
11273: PUSH
11274: LD_INT 6
11276: PUSH
11277: LD_INT 8
11279: PUSH
11280: LD_INT 11
11282: PUSH
11283: LD_INT 12
11285: PUSH
11286: LD_INT 15
11288: PUSH
11289: LD_INT 16
11291: PUSH
11292: LD_INT 20
11294: PUSH
11295: LD_INT 21
11297: PUSH
11298: LD_INT 22
11300: PUSH
11301: LD_INT 23
11303: PUSH
11304: LD_INT 25
11306: PUSH
11307: LD_INT 26
11309: PUSH
11310: LD_INT 30
11312: PUSH
11313: LD_INT 31
11315: PUSH
11316: LD_INT 32
11318: PUSH
11319: LD_INT 36
11321: PUSH
11322: EMPTY
11323: LIST
11324: LIST
11325: LIST
11326: LIST
11327: LIST
11328: LIST
11329: LIST
11330: LIST
11331: LIST
11332: LIST
11333: LIST
11334: LIST
11335: LIST
11336: LIST
11337: LIST
11338: LIST
11339: LIST
11340: LIST
11341: LIST
11342: PUSH
11343: LD_INT 101
11345: PUSH
11346: LD_INT 102
11348: PUSH
11349: LD_INT 105
11351: PUSH
11352: LD_INT 106
11354: PUSH
11355: LD_INT 108
11357: PUSH
11358: LD_INT 109
11360: PUSH
11361: LD_INT 112
11363: PUSH
11364: LD_INT 116
11366: PUSH
11367: LD_INT 117
11369: PUSH
11370: LD_INT 118
11372: PUSH
11373: EMPTY
11374: LIST
11375: LIST
11376: LIST
11377: LIST
11378: LIST
11379: LIST
11380: LIST
11381: LIST
11382: LIST
11383: LIST
11384: PUSH
11385: EMPTY
11386: LIST
11387: LIST
11388: ST_TO_ADDR
11389: GO 13912
11391: LD_INT 7
11393: DOUBLE
11394: EQUAL
11395: IFTRUE 11399
11397: GO 11511
11399: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
11400: LD_ADDR_VAR 0 2
11404: PUSH
11405: LD_INT 2
11407: PUSH
11408: LD_INT 4
11410: PUSH
11411: LD_INT 5
11413: PUSH
11414: LD_INT 7
11416: PUSH
11417: LD_INT 11
11419: PUSH
11420: LD_INT 12
11422: PUSH
11423: LD_INT 15
11425: PUSH
11426: LD_INT 16
11428: PUSH
11429: LD_INT 20
11431: PUSH
11432: LD_INT 21
11434: PUSH
11435: LD_INT 22
11437: PUSH
11438: LD_INT 23
11440: PUSH
11441: LD_INT 25
11443: PUSH
11444: LD_INT 26
11446: PUSH
11447: EMPTY
11448: LIST
11449: LIST
11450: LIST
11451: LIST
11452: LIST
11453: LIST
11454: LIST
11455: LIST
11456: LIST
11457: LIST
11458: LIST
11459: LIST
11460: LIST
11461: LIST
11462: PUSH
11463: LD_INT 101
11465: PUSH
11466: LD_INT 102
11468: PUSH
11469: LD_INT 103
11471: PUSH
11472: LD_INT 105
11474: PUSH
11475: LD_INT 106
11477: PUSH
11478: LD_INT 108
11480: PUSH
11481: LD_INT 112
11483: PUSH
11484: LD_INT 116
11486: PUSH
11487: LD_INT 117
11489: PUSH
11490: LD_INT 118
11492: PUSH
11493: EMPTY
11494: LIST
11495: LIST
11496: LIST
11497: LIST
11498: LIST
11499: LIST
11500: LIST
11501: LIST
11502: LIST
11503: LIST
11504: PUSH
11505: EMPTY
11506: LIST
11507: LIST
11508: ST_TO_ADDR
11509: GO 13912
11511: LD_INT 8
11513: DOUBLE
11514: EQUAL
11515: IFTRUE 11519
11517: GO 11659
11519: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
11520: LD_ADDR_VAR 0 2
11524: PUSH
11525: LD_INT 2
11527: PUSH
11528: LD_INT 4
11530: PUSH
11531: LD_INT 5
11533: PUSH
11534: LD_INT 6
11536: PUSH
11537: LD_INT 7
11539: PUSH
11540: LD_INT 8
11542: PUSH
11543: LD_INT 11
11545: PUSH
11546: LD_INT 12
11548: PUSH
11549: LD_INT 15
11551: PUSH
11552: LD_INT 16
11554: PUSH
11555: LD_INT 20
11557: PUSH
11558: LD_INT 21
11560: PUSH
11561: LD_INT 22
11563: PUSH
11564: LD_INT 23
11566: PUSH
11567: LD_INT 25
11569: PUSH
11570: LD_INT 26
11572: PUSH
11573: LD_INT 30
11575: PUSH
11576: LD_INT 31
11578: PUSH
11579: LD_INT 32
11581: PUSH
11582: LD_INT 36
11584: PUSH
11585: EMPTY
11586: LIST
11587: LIST
11588: LIST
11589: LIST
11590: LIST
11591: LIST
11592: LIST
11593: LIST
11594: LIST
11595: LIST
11596: LIST
11597: LIST
11598: LIST
11599: LIST
11600: LIST
11601: LIST
11602: LIST
11603: LIST
11604: LIST
11605: LIST
11606: PUSH
11607: LD_INT 101
11609: PUSH
11610: LD_INT 102
11612: PUSH
11613: LD_INT 103
11615: PUSH
11616: LD_INT 105
11618: PUSH
11619: LD_INT 106
11621: PUSH
11622: LD_INT 108
11624: PUSH
11625: LD_INT 109
11627: PUSH
11628: LD_INT 112
11630: PUSH
11631: LD_INT 116
11633: PUSH
11634: LD_INT 117
11636: PUSH
11637: LD_INT 118
11639: PUSH
11640: EMPTY
11641: LIST
11642: LIST
11643: LIST
11644: LIST
11645: LIST
11646: LIST
11647: LIST
11648: LIST
11649: LIST
11650: LIST
11651: LIST
11652: PUSH
11653: EMPTY
11654: LIST
11655: LIST
11656: ST_TO_ADDR
11657: GO 13912
11659: LD_INT 9
11661: DOUBLE
11662: EQUAL
11663: IFTRUE 11667
11665: GO 11815
11667: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
11668: LD_ADDR_VAR 0 2
11672: PUSH
11673: LD_INT 2
11675: PUSH
11676: LD_INT 4
11678: PUSH
11679: LD_INT 5
11681: PUSH
11682: LD_INT 6
11684: PUSH
11685: LD_INT 7
11687: PUSH
11688: LD_INT 8
11690: PUSH
11691: LD_INT 11
11693: PUSH
11694: LD_INT 12
11696: PUSH
11697: LD_INT 15
11699: PUSH
11700: LD_INT 16
11702: PUSH
11703: LD_INT 20
11705: PUSH
11706: LD_INT 21
11708: PUSH
11709: LD_INT 22
11711: PUSH
11712: LD_INT 23
11714: PUSH
11715: LD_INT 25
11717: PUSH
11718: LD_INT 26
11720: PUSH
11721: LD_INT 28
11723: PUSH
11724: LD_INT 30
11726: PUSH
11727: LD_INT 31
11729: PUSH
11730: LD_INT 32
11732: PUSH
11733: LD_INT 36
11735: PUSH
11736: EMPTY
11737: LIST
11738: LIST
11739: LIST
11740: LIST
11741: LIST
11742: LIST
11743: LIST
11744: LIST
11745: LIST
11746: LIST
11747: LIST
11748: LIST
11749: LIST
11750: LIST
11751: LIST
11752: LIST
11753: LIST
11754: LIST
11755: LIST
11756: LIST
11757: LIST
11758: PUSH
11759: LD_INT 101
11761: PUSH
11762: LD_INT 102
11764: PUSH
11765: LD_INT 103
11767: PUSH
11768: LD_INT 105
11770: PUSH
11771: LD_INT 106
11773: PUSH
11774: LD_INT 108
11776: PUSH
11777: LD_INT 109
11779: PUSH
11780: LD_INT 112
11782: PUSH
11783: LD_INT 114
11785: PUSH
11786: LD_INT 116
11788: PUSH
11789: LD_INT 117
11791: PUSH
11792: LD_INT 118
11794: PUSH
11795: EMPTY
11796: LIST
11797: LIST
11798: LIST
11799: LIST
11800: LIST
11801: LIST
11802: LIST
11803: LIST
11804: LIST
11805: LIST
11806: LIST
11807: LIST
11808: PUSH
11809: EMPTY
11810: LIST
11811: LIST
11812: ST_TO_ADDR
11813: GO 13912
11815: LD_INT 10
11817: DOUBLE
11818: EQUAL
11819: IFTRUE 11823
11821: GO 12019
11823: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
11824: LD_ADDR_VAR 0 2
11828: PUSH
11829: LD_INT 2
11831: PUSH
11832: LD_INT 4
11834: PUSH
11835: LD_INT 5
11837: PUSH
11838: LD_INT 6
11840: PUSH
11841: LD_INT 7
11843: PUSH
11844: LD_INT 8
11846: PUSH
11847: LD_INT 9
11849: PUSH
11850: LD_INT 10
11852: PUSH
11853: LD_INT 11
11855: PUSH
11856: LD_INT 12
11858: PUSH
11859: LD_INT 13
11861: PUSH
11862: LD_INT 14
11864: PUSH
11865: LD_INT 15
11867: PUSH
11868: LD_INT 16
11870: PUSH
11871: LD_INT 17
11873: PUSH
11874: LD_INT 18
11876: PUSH
11877: LD_INT 19
11879: PUSH
11880: LD_INT 20
11882: PUSH
11883: LD_INT 21
11885: PUSH
11886: LD_INT 22
11888: PUSH
11889: LD_INT 23
11891: PUSH
11892: LD_INT 24
11894: PUSH
11895: LD_INT 25
11897: PUSH
11898: LD_INT 26
11900: PUSH
11901: LD_INT 28
11903: PUSH
11904: LD_INT 30
11906: PUSH
11907: LD_INT 31
11909: PUSH
11910: LD_INT 32
11912: PUSH
11913: LD_INT 36
11915: PUSH
11916: EMPTY
11917: LIST
11918: LIST
11919: LIST
11920: LIST
11921: LIST
11922: LIST
11923: LIST
11924: LIST
11925: LIST
11926: LIST
11927: LIST
11928: LIST
11929: LIST
11930: LIST
11931: LIST
11932: LIST
11933: LIST
11934: LIST
11935: LIST
11936: LIST
11937: LIST
11938: LIST
11939: LIST
11940: LIST
11941: LIST
11942: LIST
11943: LIST
11944: LIST
11945: LIST
11946: PUSH
11947: LD_INT 101
11949: PUSH
11950: LD_INT 102
11952: PUSH
11953: LD_INT 103
11955: PUSH
11956: LD_INT 104
11958: PUSH
11959: LD_INT 105
11961: PUSH
11962: LD_INT 106
11964: PUSH
11965: LD_INT 107
11967: PUSH
11968: LD_INT 108
11970: PUSH
11971: LD_INT 109
11973: PUSH
11974: LD_INT 110
11976: PUSH
11977: LD_INT 111
11979: PUSH
11980: LD_INT 112
11982: PUSH
11983: LD_INT 114
11985: PUSH
11986: LD_INT 116
11988: PUSH
11989: LD_INT 117
11991: PUSH
11992: LD_INT 118
11994: PUSH
11995: EMPTY
11996: LIST
11997: LIST
11998: LIST
11999: LIST
12000: LIST
12001: LIST
12002: LIST
12003: LIST
12004: LIST
12005: LIST
12006: LIST
12007: LIST
12008: LIST
12009: LIST
12010: LIST
12011: LIST
12012: PUSH
12013: EMPTY
12014: LIST
12015: LIST
12016: ST_TO_ADDR
12017: GO 13912
12019: LD_INT 11
12021: DOUBLE
12022: EQUAL
12023: IFTRUE 12027
12025: GO 12231
12027: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
12028: LD_ADDR_VAR 0 2
12032: PUSH
12033: LD_INT 2
12035: PUSH
12036: LD_INT 3
12038: PUSH
12039: LD_INT 4
12041: PUSH
12042: LD_INT 5
12044: PUSH
12045: LD_INT 6
12047: PUSH
12048: LD_INT 7
12050: PUSH
12051: LD_INT 8
12053: PUSH
12054: LD_INT 9
12056: PUSH
12057: LD_INT 10
12059: PUSH
12060: LD_INT 11
12062: PUSH
12063: LD_INT 12
12065: PUSH
12066: LD_INT 13
12068: PUSH
12069: LD_INT 14
12071: PUSH
12072: LD_INT 15
12074: PUSH
12075: LD_INT 16
12077: PUSH
12078: LD_INT 17
12080: PUSH
12081: LD_INT 18
12083: PUSH
12084: LD_INT 19
12086: PUSH
12087: LD_INT 20
12089: PUSH
12090: LD_INT 21
12092: PUSH
12093: LD_INT 22
12095: PUSH
12096: LD_INT 23
12098: PUSH
12099: LD_INT 24
12101: PUSH
12102: LD_INT 25
12104: PUSH
12105: LD_INT 26
12107: PUSH
12108: LD_INT 28
12110: PUSH
12111: LD_INT 30
12113: PUSH
12114: LD_INT 31
12116: PUSH
12117: LD_INT 32
12119: PUSH
12120: LD_INT 34
12122: PUSH
12123: LD_INT 36
12125: PUSH
12126: EMPTY
12127: LIST
12128: LIST
12129: LIST
12130: LIST
12131: LIST
12132: LIST
12133: LIST
12134: LIST
12135: LIST
12136: LIST
12137: LIST
12138: LIST
12139: LIST
12140: LIST
12141: LIST
12142: LIST
12143: LIST
12144: LIST
12145: LIST
12146: LIST
12147: LIST
12148: LIST
12149: LIST
12150: LIST
12151: LIST
12152: LIST
12153: LIST
12154: LIST
12155: LIST
12156: LIST
12157: LIST
12158: PUSH
12159: LD_INT 101
12161: PUSH
12162: LD_INT 102
12164: PUSH
12165: LD_INT 103
12167: PUSH
12168: LD_INT 104
12170: PUSH
12171: LD_INT 105
12173: PUSH
12174: LD_INT 106
12176: PUSH
12177: LD_INT 107
12179: PUSH
12180: LD_INT 108
12182: PUSH
12183: LD_INT 109
12185: PUSH
12186: LD_INT 110
12188: PUSH
12189: LD_INT 111
12191: PUSH
12192: LD_INT 112
12194: PUSH
12195: LD_INT 114
12197: PUSH
12198: LD_INT 116
12200: PUSH
12201: LD_INT 117
12203: PUSH
12204: LD_INT 118
12206: PUSH
12207: EMPTY
12208: LIST
12209: LIST
12210: LIST
12211: LIST
12212: LIST
12213: LIST
12214: LIST
12215: LIST
12216: LIST
12217: LIST
12218: LIST
12219: LIST
12220: LIST
12221: LIST
12222: LIST
12223: LIST
12224: PUSH
12225: EMPTY
12226: LIST
12227: LIST
12228: ST_TO_ADDR
12229: GO 13912
12231: LD_INT 12
12233: DOUBLE
12234: EQUAL
12235: IFTRUE 12239
12237: GO 12459
12239: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
12240: LD_ADDR_VAR 0 2
12244: PUSH
12245: LD_INT 1
12247: PUSH
12248: LD_INT 2
12250: PUSH
12251: LD_INT 3
12253: PUSH
12254: LD_INT 4
12256: PUSH
12257: LD_INT 5
12259: PUSH
12260: LD_INT 6
12262: PUSH
12263: LD_INT 7
12265: PUSH
12266: LD_INT 8
12268: PUSH
12269: LD_INT 9
12271: PUSH
12272: LD_INT 10
12274: PUSH
12275: LD_INT 11
12277: PUSH
12278: LD_INT 12
12280: PUSH
12281: LD_INT 13
12283: PUSH
12284: LD_INT 14
12286: PUSH
12287: LD_INT 15
12289: PUSH
12290: LD_INT 16
12292: PUSH
12293: LD_INT 17
12295: PUSH
12296: LD_INT 18
12298: PUSH
12299: LD_INT 19
12301: PUSH
12302: LD_INT 20
12304: PUSH
12305: LD_INT 21
12307: PUSH
12308: LD_INT 22
12310: PUSH
12311: LD_INT 23
12313: PUSH
12314: LD_INT 24
12316: PUSH
12317: LD_INT 25
12319: PUSH
12320: LD_INT 26
12322: PUSH
12323: LD_INT 27
12325: PUSH
12326: LD_INT 28
12328: PUSH
12329: LD_INT 30
12331: PUSH
12332: LD_INT 31
12334: PUSH
12335: LD_INT 32
12337: PUSH
12338: LD_INT 33
12340: PUSH
12341: LD_INT 34
12343: PUSH
12344: LD_INT 36
12346: PUSH
12347: EMPTY
12348: LIST
12349: LIST
12350: LIST
12351: LIST
12352: LIST
12353: LIST
12354: LIST
12355: LIST
12356: LIST
12357: LIST
12358: LIST
12359: LIST
12360: LIST
12361: LIST
12362: LIST
12363: LIST
12364: LIST
12365: LIST
12366: LIST
12367: LIST
12368: LIST
12369: LIST
12370: LIST
12371: LIST
12372: LIST
12373: LIST
12374: LIST
12375: LIST
12376: LIST
12377: LIST
12378: LIST
12379: LIST
12380: LIST
12381: LIST
12382: PUSH
12383: LD_INT 101
12385: PUSH
12386: LD_INT 102
12388: PUSH
12389: LD_INT 103
12391: PUSH
12392: LD_INT 104
12394: PUSH
12395: LD_INT 105
12397: PUSH
12398: LD_INT 106
12400: PUSH
12401: LD_INT 107
12403: PUSH
12404: LD_INT 108
12406: PUSH
12407: LD_INT 109
12409: PUSH
12410: LD_INT 110
12412: PUSH
12413: LD_INT 111
12415: PUSH
12416: LD_INT 112
12418: PUSH
12419: LD_INT 113
12421: PUSH
12422: LD_INT 114
12424: PUSH
12425: LD_INT 116
12427: PUSH
12428: LD_INT 117
12430: PUSH
12431: LD_INT 118
12433: PUSH
12434: EMPTY
12435: LIST
12436: LIST
12437: LIST
12438: LIST
12439: LIST
12440: LIST
12441: LIST
12442: LIST
12443: LIST
12444: LIST
12445: LIST
12446: LIST
12447: LIST
12448: LIST
12449: LIST
12450: LIST
12451: LIST
12452: PUSH
12453: EMPTY
12454: LIST
12455: LIST
12456: ST_TO_ADDR
12457: GO 13912
12459: LD_INT 13
12461: DOUBLE
12462: EQUAL
12463: IFTRUE 12467
12465: GO 12675
12467: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
12468: LD_ADDR_VAR 0 2
12472: PUSH
12473: LD_INT 1
12475: PUSH
12476: LD_INT 2
12478: PUSH
12479: LD_INT 3
12481: PUSH
12482: LD_INT 4
12484: PUSH
12485: LD_INT 5
12487: PUSH
12488: LD_INT 8
12490: PUSH
12491: LD_INT 9
12493: PUSH
12494: LD_INT 10
12496: PUSH
12497: LD_INT 11
12499: PUSH
12500: LD_INT 12
12502: PUSH
12503: LD_INT 14
12505: PUSH
12506: LD_INT 15
12508: PUSH
12509: LD_INT 16
12511: PUSH
12512: LD_INT 17
12514: PUSH
12515: LD_INT 18
12517: PUSH
12518: LD_INT 19
12520: PUSH
12521: LD_INT 20
12523: PUSH
12524: LD_INT 21
12526: PUSH
12527: LD_INT 22
12529: PUSH
12530: LD_INT 23
12532: PUSH
12533: LD_INT 24
12535: PUSH
12536: LD_INT 25
12538: PUSH
12539: LD_INT 26
12541: PUSH
12542: LD_INT 27
12544: PUSH
12545: LD_INT 28
12547: PUSH
12548: LD_INT 30
12550: PUSH
12551: LD_INT 31
12553: PUSH
12554: LD_INT 32
12556: PUSH
12557: LD_INT 33
12559: PUSH
12560: LD_INT 34
12562: PUSH
12563: LD_INT 36
12565: PUSH
12566: EMPTY
12567: LIST
12568: LIST
12569: LIST
12570: LIST
12571: LIST
12572: LIST
12573: LIST
12574: LIST
12575: LIST
12576: LIST
12577: LIST
12578: LIST
12579: LIST
12580: LIST
12581: LIST
12582: LIST
12583: LIST
12584: LIST
12585: LIST
12586: LIST
12587: LIST
12588: LIST
12589: LIST
12590: LIST
12591: LIST
12592: LIST
12593: LIST
12594: LIST
12595: LIST
12596: LIST
12597: LIST
12598: PUSH
12599: LD_INT 101
12601: PUSH
12602: LD_INT 102
12604: PUSH
12605: LD_INT 103
12607: PUSH
12608: LD_INT 104
12610: PUSH
12611: LD_INT 105
12613: PUSH
12614: LD_INT 106
12616: PUSH
12617: LD_INT 107
12619: PUSH
12620: LD_INT 108
12622: PUSH
12623: LD_INT 109
12625: PUSH
12626: LD_INT 110
12628: PUSH
12629: LD_INT 111
12631: PUSH
12632: LD_INT 112
12634: PUSH
12635: LD_INT 113
12637: PUSH
12638: LD_INT 114
12640: PUSH
12641: LD_INT 116
12643: PUSH
12644: LD_INT 117
12646: PUSH
12647: LD_INT 118
12649: PUSH
12650: EMPTY
12651: LIST
12652: LIST
12653: LIST
12654: LIST
12655: LIST
12656: LIST
12657: LIST
12658: LIST
12659: LIST
12660: LIST
12661: LIST
12662: LIST
12663: LIST
12664: LIST
12665: LIST
12666: LIST
12667: LIST
12668: PUSH
12669: EMPTY
12670: LIST
12671: LIST
12672: ST_TO_ADDR
12673: GO 13912
12675: LD_INT 14
12677: DOUBLE
12678: EQUAL
12679: IFTRUE 12683
12681: GO 12907
12683: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
12684: LD_ADDR_VAR 0 2
12688: PUSH
12689: LD_INT 1
12691: PUSH
12692: LD_INT 2
12694: PUSH
12695: LD_INT 3
12697: PUSH
12698: LD_INT 4
12700: PUSH
12701: LD_INT 5
12703: PUSH
12704: LD_INT 6
12706: PUSH
12707: LD_INT 7
12709: PUSH
12710: LD_INT 8
12712: PUSH
12713: LD_INT 9
12715: PUSH
12716: LD_INT 10
12718: PUSH
12719: LD_INT 11
12721: PUSH
12722: LD_INT 12
12724: PUSH
12725: LD_INT 13
12727: PUSH
12728: LD_INT 14
12730: PUSH
12731: LD_INT 15
12733: PUSH
12734: LD_INT 16
12736: PUSH
12737: LD_INT 17
12739: PUSH
12740: LD_INT 18
12742: PUSH
12743: LD_INT 19
12745: PUSH
12746: LD_INT 20
12748: PUSH
12749: LD_INT 21
12751: PUSH
12752: LD_INT 22
12754: PUSH
12755: LD_INT 23
12757: PUSH
12758: LD_INT 24
12760: PUSH
12761: LD_INT 25
12763: PUSH
12764: LD_INT 26
12766: PUSH
12767: LD_INT 27
12769: PUSH
12770: LD_INT 28
12772: PUSH
12773: LD_INT 29
12775: PUSH
12776: LD_INT 30
12778: PUSH
12779: LD_INT 31
12781: PUSH
12782: LD_INT 32
12784: PUSH
12785: LD_INT 33
12787: PUSH
12788: LD_INT 34
12790: PUSH
12791: LD_INT 36
12793: PUSH
12794: EMPTY
12795: LIST
12796: LIST
12797: LIST
12798: LIST
12799: LIST
12800: LIST
12801: LIST
12802: LIST
12803: LIST
12804: LIST
12805: LIST
12806: LIST
12807: LIST
12808: LIST
12809: LIST
12810: LIST
12811: LIST
12812: LIST
12813: LIST
12814: LIST
12815: LIST
12816: LIST
12817: LIST
12818: LIST
12819: LIST
12820: LIST
12821: LIST
12822: LIST
12823: LIST
12824: LIST
12825: LIST
12826: LIST
12827: LIST
12828: LIST
12829: LIST
12830: PUSH
12831: LD_INT 101
12833: PUSH
12834: LD_INT 102
12836: PUSH
12837: LD_INT 103
12839: PUSH
12840: LD_INT 104
12842: PUSH
12843: LD_INT 105
12845: PUSH
12846: LD_INT 106
12848: PUSH
12849: LD_INT 107
12851: PUSH
12852: LD_INT 108
12854: PUSH
12855: LD_INT 109
12857: PUSH
12858: LD_INT 110
12860: PUSH
12861: LD_INT 111
12863: PUSH
12864: LD_INT 112
12866: PUSH
12867: LD_INT 113
12869: PUSH
12870: LD_INT 114
12872: PUSH
12873: LD_INT 116
12875: PUSH
12876: LD_INT 117
12878: PUSH
12879: LD_INT 118
12881: PUSH
12882: EMPTY
12883: LIST
12884: LIST
12885: LIST
12886: LIST
12887: LIST
12888: LIST
12889: LIST
12890: LIST
12891: LIST
12892: LIST
12893: LIST
12894: LIST
12895: LIST
12896: LIST
12897: LIST
12898: LIST
12899: LIST
12900: PUSH
12901: EMPTY
12902: LIST
12903: LIST
12904: ST_TO_ADDR
12905: GO 13912
12907: LD_INT 15
12909: DOUBLE
12910: EQUAL
12911: IFTRUE 12915
12913: GO 13139
12915: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
12916: LD_ADDR_VAR 0 2
12920: PUSH
12921: LD_INT 1
12923: PUSH
12924: LD_INT 2
12926: PUSH
12927: LD_INT 3
12929: PUSH
12930: LD_INT 4
12932: PUSH
12933: LD_INT 5
12935: PUSH
12936: LD_INT 6
12938: PUSH
12939: LD_INT 7
12941: PUSH
12942: LD_INT 8
12944: PUSH
12945: LD_INT 9
12947: PUSH
12948: LD_INT 10
12950: PUSH
12951: LD_INT 11
12953: PUSH
12954: LD_INT 12
12956: PUSH
12957: LD_INT 13
12959: PUSH
12960: LD_INT 14
12962: PUSH
12963: LD_INT 15
12965: PUSH
12966: LD_INT 16
12968: PUSH
12969: LD_INT 17
12971: PUSH
12972: LD_INT 18
12974: PUSH
12975: LD_INT 19
12977: PUSH
12978: LD_INT 20
12980: PUSH
12981: LD_INT 21
12983: PUSH
12984: LD_INT 22
12986: PUSH
12987: LD_INT 23
12989: PUSH
12990: LD_INT 24
12992: PUSH
12993: LD_INT 25
12995: PUSH
12996: LD_INT 26
12998: PUSH
12999: LD_INT 27
13001: PUSH
13002: LD_INT 28
13004: PUSH
13005: LD_INT 29
13007: PUSH
13008: LD_INT 30
13010: PUSH
13011: LD_INT 31
13013: PUSH
13014: LD_INT 32
13016: PUSH
13017: LD_INT 33
13019: PUSH
13020: LD_INT 34
13022: PUSH
13023: LD_INT 36
13025: PUSH
13026: EMPTY
13027: LIST
13028: LIST
13029: LIST
13030: LIST
13031: LIST
13032: LIST
13033: LIST
13034: LIST
13035: LIST
13036: LIST
13037: LIST
13038: LIST
13039: LIST
13040: LIST
13041: LIST
13042: LIST
13043: LIST
13044: LIST
13045: LIST
13046: LIST
13047: LIST
13048: LIST
13049: LIST
13050: LIST
13051: LIST
13052: LIST
13053: LIST
13054: LIST
13055: LIST
13056: LIST
13057: LIST
13058: LIST
13059: LIST
13060: LIST
13061: LIST
13062: PUSH
13063: LD_INT 101
13065: PUSH
13066: LD_INT 102
13068: PUSH
13069: LD_INT 103
13071: PUSH
13072: LD_INT 104
13074: PUSH
13075: LD_INT 105
13077: PUSH
13078: LD_INT 106
13080: PUSH
13081: LD_INT 107
13083: PUSH
13084: LD_INT 108
13086: PUSH
13087: LD_INT 109
13089: PUSH
13090: LD_INT 110
13092: PUSH
13093: LD_INT 111
13095: PUSH
13096: LD_INT 112
13098: PUSH
13099: LD_INT 113
13101: PUSH
13102: LD_INT 114
13104: PUSH
13105: LD_INT 116
13107: PUSH
13108: LD_INT 117
13110: PUSH
13111: LD_INT 118
13113: PUSH
13114: EMPTY
13115: LIST
13116: LIST
13117: LIST
13118: LIST
13119: LIST
13120: LIST
13121: LIST
13122: LIST
13123: LIST
13124: LIST
13125: LIST
13126: LIST
13127: LIST
13128: LIST
13129: LIST
13130: LIST
13131: LIST
13132: PUSH
13133: EMPTY
13134: LIST
13135: LIST
13136: ST_TO_ADDR
13137: GO 13912
13139: LD_INT 16
13141: DOUBLE
13142: EQUAL
13143: IFTRUE 13147
13145: GO 13283
13147: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
13148: LD_ADDR_VAR 0 2
13152: PUSH
13153: LD_INT 2
13155: PUSH
13156: LD_INT 4
13158: PUSH
13159: LD_INT 5
13161: PUSH
13162: LD_INT 7
13164: PUSH
13165: LD_INT 11
13167: PUSH
13168: LD_INT 12
13170: PUSH
13171: LD_INT 15
13173: PUSH
13174: LD_INT 16
13176: PUSH
13177: LD_INT 20
13179: PUSH
13180: LD_INT 21
13182: PUSH
13183: LD_INT 22
13185: PUSH
13186: LD_INT 23
13188: PUSH
13189: LD_INT 25
13191: PUSH
13192: LD_INT 26
13194: PUSH
13195: LD_INT 30
13197: PUSH
13198: LD_INT 31
13200: PUSH
13201: LD_INT 32
13203: PUSH
13204: LD_INT 33
13206: PUSH
13207: LD_INT 34
13209: PUSH
13210: EMPTY
13211: LIST
13212: LIST
13213: LIST
13214: LIST
13215: LIST
13216: LIST
13217: LIST
13218: LIST
13219: LIST
13220: LIST
13221: LIST
13222: LIST
13223: LIST
13224: LIST
13225: LIST
13226: LIST
13227: LIST
13228: LIST
13229: LIST
13230: PUSH
13231: LD_INT 101
13233: PUSH
13234: LD_INT 102
13236: PUSH
13237: LD_INT 103
13239: PUSH
13240: LD_INT 106
13242: PUSH
13243: LD_INT 108
13245: PUSH
13246: LD_INT 112
13248: PUSH
13249: LD_INT 113
13251: PUSH
13252: LD_INT 114
13254: PUSH
13255: LD_INT 116
13257: PUSH
13258: LD_INT 117
13260: PUSH
13261: LD_INT 118
13263: PUSH
13264: EMPTY
13265: LIST
13266: LIST
13267: LIST
13268: LIST
13269: LIST
13270: LIST
13271: LIST
13272: LIST
13273: LIST
13274: LIST
13275: LIST
13276: PUSH
13277: EMPTY
13278: LIST
13279: LIST
13280: ST_TO_ADDR
13281: GO 13912
13283: LD_INT 17
13285: DOUBLE
13286: EQUAL
13287: IFTRUE 13291
13289: GO 13515
13291: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
13292: LD_ADDR_VAR 0 2
13296: PUSH
13297: LD_INT 1
13299: PUSH
13300: LD_INT 2
13302: PUSH
13303: LD_INT 3
13305: PUSH
13306: LD_INT 4
13308: PUSH
13309: LD_INT 5
13311: PUSH
13312: LD_INT 6
13314: PUSH
13315: LD_INT 7
13317: PUSH
13318: LD_INT 8
13320: PUSH
13321: LD_INT 9
13323: PUSH
13324: LD_INT 10
13326: PUSH
13327: LD_INT 11
13329: PUSH
13330: LD_INT 12
13332: PUSH
13333: LD_INT 13
13335: PUSH
13336: LD_INT 14
13338: PUSH
13339: LD_INT 15
13341: PUSH
13342: LD_INT 16
13344: PUSH
13345: LD_INT 17
13347: PUSH
13348: LD_INT 18
13350: PUSH
13351: LD_INT 19
13353: PUSH
13354: LD_INT 20
13356: PUSH
13357: LD_INT 21
13359: PUSH
13360: LD_INT 22
13362: PUSH
13363: LD_INT 23
13365: PUSH
13366: LD_INT 24
13368: PUSH
13369: LD_INT 25
13371: PUSH
13372: LD_INT 26
13374: PUSH
13375: LD_INT 27
13377: PUSH
13378: LD_INT 28
13380: PUSH
13381: LD_INT 29
13383: PUSH
13384: LD_INT 30
13386: PUSH
13387: LD_INT 31
13389: PUSH
13390: LD_INT 32
13392: PUSH
13393: LD_INT 33
13395: PUSH
13396: LD_INT 34
13398: PUSH
13399: LD_INT 36
13401: PUSH
13402: EMPTY
13403: LIST
13404: LIST
13405: LIST
13406: LIST
13407: LIST
13408: LIST
13409: LIST
13410: LIST
13411: LIST
13412: LIST
13413: LIST
13414: LIST
13415: LIST
13416: LIST
13417: LIST
13418: LIST
13419: LIST
13420: LIST
13421: LIST
13422: LIST
13423: LIST
13424: LIST
13425: LIST
13426: LIST
13427: LIST
13428: LIST
13429: LIST
13430: LIST
13431: LIST
13432: LIST
13433: LIST
13434: LIST
13435: LIST
13436: LIST
13437: LIST
13438: PUSH
13439: LD_INT 101
13441: PUSH
13442: LD_INT 102
13444: PUSH
13445: LD_INT 103
13447: PUSH
13448: LD_INT 104
13450: PUSH
13451: LD_INT 105
13453: PUSH
13454: LD_INT 106
13456: PUSH
13457: LD_INT 107
13459: PUSH
13460: LD_INT 108
13462: PUSH
13463: LD_INT 109
13465: PUSH
13466: LD_INT 110
13468: PUSH
13469: LD_INT 111
13471: PUSH
13472: LD_INT 112
13474: PUSH
13475: LD_INT 113
13477: PUSH
13478: LD_INT 114
13480: PUSH
13481: LD_INT 116
13483: PUSH
13484: LD_INT 117
13486: PUSH
13487: LD_INT 118
13489: PUSH
13490: EMPTY
13491: LIST
13492: LIST
13493: LIST
13494: LIST
13495: LIST
13496: LIST
13497: LIST
13498: LIST
13499: LIST
13500: LIST
13501: LIST
13502: LIST
13503: LIST
13504: LIST
13505: LIST
13506: LIST
13507: LIST
13508: PUSH
13509: EMPTY
13510: LIST
13511: LIST
13512: ST_TO_ADDR
13513: GO 13912
13515: LD_INT 18
13517: DOUBLE
13518: EQUAL
13519: IFTRUE 13523
13521: GO 13671
13523: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
13524: LD_ADDR_VAR 0 2
13528: PUSH
13529: LD_INT 2
13531: PUSH
13532: LD_INT 4
13534: PUSH
13535: LD_INT 5
13537: PUSH
13538: LD_INT 7
13540: PUSH
13541: LD_INT 11
13543: PUSH
13544: LD_INT 12
13546: PUSH
13547: LD_INT 15
13549: PUSH
13550: LD_INT 16
13552: PUSH
13553: LD_INT 20
13555: PUSH
13556: LD_INT 21
13558: PUSH
13559: LD_INT 22
13561: PUSH
13562: LD_INT 23
13564: PUSH
13565: LD_INT 25
13567: PUSH
13568: LD_INT 26
13570: PUSH
13571: LD_INT 30
13573: PUSH
13574: LD_INT 31
13576: PUSH
13577: LD_INT 32
13579: PUSH
13580: LD_INT 33
13582: PUSH
13583: LD_INT 34
13585: PUSH
13586: LD_INT 35
13588: PUSH
13589: LD_INT 36
13591: PUSH
13592: EMPTY
13593: LIST
13594: LIST
13595: LIST
13596: LIST
13597: LIST
13598: LIST
13599: LIST
13600: LIST
13601: LIST
13602: LIST
13603: LIST
13604: LIST
13605: LIST
13606: LIST
13607: LIST
13608: LIST
13609: LIST
13610: LIST
13611: LIST
13612: LIST
13613: LIST
13614: PUSH
13615: LD_INT 101
13617: PUSH
13618: LD_INT 102
13620: PUSH
13621: LD_INT 103
13623: PUSH
13624: LD_INT 106
13626: PUSH
13627: LD_INT 108
13629: PUSH
13630: LD_INT 112
13632: PUSH
13633: LD_INT 113
13635: PUSH
13636: LD_INT 114
13638: PUSH
13639: LD_INT 115
13641: PUSH
13642: LD_INT 116
13644: PUSH
13645: LD_INT 117
13647: PUSH
13648: LD_INT 118
13650: PUSH
13651: EMPTY
13652: LIST
13653: LIST
13654: LIST
13655: LIST
13656: LIST
13657: LIST
13658: LIST
13659: LIST
13660: LIST
13661: LIST
13662: LIST
13663: LIST
13664: PUSH
13665: EMPTY
13666: LIST
13667: LIST
13668: ST_TO_ADDR
13669: GO 13912
13671: LD_INT 19
13673: DOUBLE
13674: EQUAL
13675: IFTRUE 13679
13677: GO 13911
13679: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
13680: LD_ADDR_VAR 0 2
13684: PUSH
13685: LD_INT 1
13687: PUSH
13688: LD_INT 2
13690: PUSH
13691: LD_INT 3
13693: PUSH
13694: LD_INT 4
13696: PUSH
13697: LD_INT 5
13699: PUSH
13700: LD_INT 6
13702: PUSH
13703: LD_INT 7
13705: PUSH
13706: LD_INT 8
13708: PUSH
13709: LD_INT 9
13711: PUSH
13712: LD_INT 10
13714: PUSH
13715: LD_INT 11
13717: PUSH
13718: LD_INT 12
13720: PUSH
13721: LD_INT 13
13723: PUSH
13724: LD_INT 14
13726: PUSH
13727: LD_INT 15
13729: PUSH
13730: LD_INT 16
13732: PUSH
13733: LD_INT 17
13735: PUSH
13736: LD_INT 18
13738: PUSH
13739: LD_INT 19
13741: PUSH
13742: LD_INT 20
13744: PUSH
13745: LD_INT 21
13747: PUSH
13748: LD_INT 22
13750: PUSH
13751: LD_INT 23
13753: PUSH
13754: LD_INT 24
13756: PUSH
13757: LD_INT 25
13759: PUSH
13760: LD_INT 26
13762: PUSH
13763: LD_INT 27
13765: PUSH
13766: LD_INT 28
13768: PUSH
13769: LD_INT 29
13771: PUSH
13772: LD_INT 30
13774: PUSH
13775: LD_INT 31
13777: PUSH
13778: LD_INT 32
13780: PUSH
13781: LD_INT 33
13783: PUSH
13784: LD_INT 34
13786: PUSH
13787: LD_INT 35
13789: PUSH
13790: LD_INT 36
13792: PUSH
13793: EMPTY
13794: LIST
13795: LIST
13796: LIST
13797: LIST
13798: LIST
13799: LIST
13800: LIST
13801: LIST
13802: LIST
13803: LIST
13804: LIST
13805: LIST
13806: LIST
13807: LIST
13808: LIST
13809: LIST
13810: LIST
13811: LIST
13812: LIST
13813: LIST
13814: LIST
13815: LIST
13816: LIST
13817: LIST
13818: LIST
13819: LIST
13820: LIST
13821: LIST
13822: LIST
13823: LIST
13824: LIST
13825: LIST
13826: LIST
13827: LIST
13828: LIST
13829: LIST
13830: PUSH
13831: LD_INT 101
13833: PUSH
13834: LD_INT 102
13836: PUSH
13837: LD_INT 103
13839: PUSH
13840: LD_INT 104
13842: PUSH
13843: LD_INT 105
13845: PUSH
13846: LD_INT 106
13848: PUSH
13849: LD_INT 107
13851: PUSH
13852: LD_INT 108
13854: PUSH
13855: LD_INT 109
13857: PUSH
13858: LD_INT 110
13860: PUSH
13861: LD_INT 111
13863: PUSH
13864: LD_INT 112
13866: PUSH
13867: LD_INT 113
13869: PUSH
13870: LD_INT 114
13872: PUSH
13873: LD_INT 115
13875: PUSH
13876: LD_INT 116
13878: PUSH
13879: LD_INT 117
13881: PUSH
13882: LD_INT 118
13884: PUSH
13885: EMPTY
13886: LIST
13887: LIST
13888: LIST
13889: LIST
13890: LIST
13891: LIST
13892: LIST
13893: LIST
13894: LIST
13895: LIST
13896: LIST
13897: LIST
13898: LIST
13899: LIST
13900: LIST
13901: LIST
13902: LIST
13903: LIST
13904: PUSH
13905: EMPTY
13906: LIST
13907: LIST
13908: ST_TO_ADDR
13909: GO 13912
13911: POP
// end else
13912: GO 14143
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
13914: LD_ADDR_VAR 0 2
13918: PUSH
13919: LD_INT 1
13921: PUSH
13922: LD_INT 2
13924: PUSH
13925: LD_INT 3
13927: PUSH
13928: LD_INT 4
13930: PUSH
13931: LD_INT 5
13933: PUSH
13934: LD_INT 6
13936: PUSH
13937: LD_INT 7
13939: PUSH
13940: LD_INT 8
13942: PUSH
13943: LD_INT 9
13945: PUSH
13946: LD_INT 10
13948: PUSH
13949: LD_INT 11
13951: PUSH
13952: LD_INT 12
13954: PUSH
13955: LD_INT 13
13957: PUSH
13958: LD_INT 14
13960: PUSH
13961: LD_INT 15
13963: PUSH
13964: LD_INT 16
13966: PUSH
13967: LD_INT 17
13969: PUSH
13970: LD_INT 18
13972: PUSH
13973: LD_INT 19
13975: PUSH
13976: LD_INT 20
13978: PUSH
13979: LD_INT 21
13981: PUSH
13982: LD_INT 22
13984: PUSH
13985: LD_INT 23
13987: PUSH
13988: LD_INT 24
13990: PUSH
13991: LD_INT 25
13993: PUSH
13994: LD_INT 26
13996: PUSH
13997: LD_INT 27
13999: PUSH
14000: LD_INT 28
14002: PUSH
14003: LD_INT 29
14005: PUSH
14006: LD_INT 30
14008: PUSH
14009: LD_INT 31
14011: PUSH
14012: LD_INT 32
14014: PUSH
14015: LD_INT 33
14017: PUSH
14018: LD_INT 34
14020: PUSH
14021: LD_INT 35
14023: PUSH
14024: LD_INT 36
14026: PUSH
14027: EMPTY
14028: LIST
14029: LIST
14030: LIST
14031: LIST
14032: LIST
14033: LIST
14034: LIST
14035: LIST
14036: LIST
14037: LIST
14038: LIST
14039: LIST
14040: LIST
14041: LIST
14042: LIST
14043: LIST
14044: LIST
14045: LIST
14046: LIST
14047: LIST
14048: LIST
14049: LIST
14050: LIST
14051: LIST
14052: LIST
14053: LIST
14054: LIST
14055: LIST
14056: LIST
14057: LIST
14058: LIST
14059: LIST
14060: LIST
14061: LIST
14062: LIST
14063: LIST
14064: PUSH
14065: LD_INT 101
14067: PUSH
14068: LD_INT 102
14070: PUSH
14071: LD_INT 103
14073: PUSH
14074: LD_INT 104
14076: PUSH
14077: LD_INT 105
14079: PUSH
14080: LD_INT 106
14082: PUSH
14083: LD_INT 107
14085: PUSH
14086: LD_INT 108
14088: PUSH
14089: LD_INT 109
14091: PUSH
14092: LD_INT 110
14094: PUSH
14095: LD_INT 111
14097: PUSH
14098: LD_INT 112
14100: PUSH
14101: LD_INT 113
14103: PUSH
14104: LD_INT 114
14106: PUSH
14107: LD_INT 115
14109: PUSH
14110: LD_INT 116
14112: PUSH
14113: LD_INT 117
14115: PUSH
14116: LD_INT 118
14118: PUSH
14119: EMPTY
14120: LIST
14121: LIST
14122: LIST
14123: LIST
14124: LIST
14125: LIST
14126: LIST
14127: LIST
14128: LIST
14129: LIST
14130: LIST
14131: LIST
14132: LIST
14133: LIST
14134: LIST
14135: LIST
14136: LIST
14137: LIST
14138: PUSH
14139: EMPTY
14140: LIST
14141: LIST
14142: ST_TO_ADDR
// if result then
14143: LD_VAR 0 2
14147: IFFALSE 14933
// begin normal :=  ;
14149: LD_ADDR_VAR 0 5
14153: PUSH
14154: LD_STRING 
14156: ST_TO_ADDR
// hardcore :=  ;
14157: LD_ADDR_VAR 0 6
14161: PUSH
14162: LD_STRING 
14164: ST_TO_ADDR
// active :=  ;
14165: LD_ADDR_VAR 0 7
14169: PUSH
14170: LD_STRING 
14172: ST_TO_ADDR
// for i = 1 to normalCounter do
14173: LD_ADDR_VAR 0 8
14177: PUSH
14178: DOUBLE
14179: LD_INT 1
14181: DEC
14182: ST_TO_ADDR
14183: LD_EXP 33
14187: PUSH
14188: FOR_TO
14189: IFFALSE 14290
// begin tmp := 0 ;
14191: LD_ADDR_VAR 0 3
14195: PUSH
14196: LD_STRING 0
14198: ST_TO_ADDR
// if result [ 1 ] then
14199: LD_VAR 0 2
14203: PUSH
14204: LD_INT 1
14206: ARRAY
14207: IFFALSE 14272
// if result [ 1 ] [ 1 ] = i then
14209: LD_VAR 0 2
14213: PUSH
14214: LD_INT 1
14216: ARRAY
14217: PUSH
14218: LD_INT 1
14220: ARRAY
14221: PUSH
14222: LD_VAR 0 8
14226: EQUAL
14227: IFFALSE 14272
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
14229: LD_ADDR_VAR 0 2
14233: PUSH
14234: LD_VAR 0 2
14238: PPUSH
14239: LD_INT 1
14241: PPUSH
14242: LD_VAR 0 2
14246: PUSH
14247: LD_INT 1
14249: ARRAY
14250: PPUSH
14251: LD_INT 1
14253: PPUSH
14254: CALL_OW 3
14258: PPUSH
14259: CALL_OW 1
14263: ST_TO_ADDR
// tmp := 1 ;
14264: LD_ADDR_VAR 0 3
14268: PUSH
14269: LD_STRING 1
14271: ST_TO_ADDR
// end ; normal := normal & tmp ;
14272: LD_ADDR_VAR 0 5
14276: PUSH
14277: LD_VAR 0 5
14281: PUSH
14282: LD_VAR 0 3
14286: STR
14287: ST_TO_ADDR
// end ;
14288: GO 14188
14290: POP
14291: POP
// for i = 1 to hardcoreCounter do
14292: LD_ADDR_VAR 0 8
14296: PUSH
14297: DOUBLE
14298: LD_INT 1
14300: DEC
14301: ST_TO_ADDR
14302: LD_EXP 34
14306: PUSH
14307: FOR_TO
14308: IFFALSE 14413
// begin tmp := 0 ;
14310: LD_ADDR_VAR 0 3
14314: PUSH
14315: LD_STRING 0
14317: ST_TO_ADDR
// if result [ 2 ] then
14318: LD_VAR 0 2
14322: PUSH
14323: LD_INT 2
14325: ARRAY
14326: IFFALSE 14395
// if result [ 2 ] [ 1 ] = 100 + i then
14328: LD_VAR 0 2
14332: PUSH
14333: LD_INT 2
14335: ARRAY
14336: PUSH
14337: LD_INT 1
14339: ARRAY
14340: PUSH
14341: LD_INT 100
14343: PUSH
14344: LD_VAR 0 8
14348: PLUS
14349: EQUAL
14350: IFFALSE 14395
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
14352: LD_ADDR_VAR 0 2
14356: PUSH
14357: LD_VAR 0 2
14361: PPUSH
14362: LD_INT 2
14364: PPUSH
14365: LD_VAR 0 2
14369: PUSH
14370: LD_INT 2
14372: ARRAY
14373: PPUSH
14374: LD_INT 1
14376: PPUSH
14377: CALL_OW 3
14381: PPUSH
14382: CALL_OW 1
14386: ST_TO_ADDR
// tmp := 1 ;
14387: LD_ADDR_VAR 0 3
14391: PUSH
14392: LD_STRING 1
14394: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
14395: LD_ADDR_VAR 0 6
14399: PUSH
14400: LD_VAR 0 6
14404: PUSH
14405: LD_VAR 0 3
14409: STR
14410: ST_TO_ADDR
// end ;
14411: GO 14307
14413: POP
14414: POP
// if isGameLoad then
14415: LD_VAR 0 1
14419: IFFALSE 14894
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
14421: LD_ADDR_VAR 0 4
14425: PUSH
14426: LD_EXP 37
14430: PUSH
14431: LD_EXP 36
14435: PUSH
14436: LD_EXP 38
14440: PUSH
14441: LD_EXP 35
14445: PUSH
14446: LD_EXP 39
14450: PUSH
14451: LD_EXP 40
14455: PUSH
14456: LD_EXP 41
14460: PUSH
14461: LD_EXP 42
14465: PUSH
14466: LD_EXP 43
14470: PUSH
14471: LD_EXP 44
14475: PUSH
14476: LD_EXP 45
14480: PUSH
14481: LD_EXP 46
14485: PUSH
14486: LD_EXP 47
14490: PUSH
14491: LD_EXP 48
14495: PUSH
14496: LD_EXP 56
14500: PUSH
14501: LD_EXP 57
14505: PUSH
14506: LD_EXP 58
14510: PUSH
14511: LD_EXP 59
14515: PUSH
14516: LD_EXP 61
14520: PUSH
14521: LD_EXP 62
14525: PUSH
14526: LD_EXP 63
14530: PUSH
14531: LD_EXP 66
14535: PUSH
14536: LD_EXP 68
14540: PUSH
14541: LD_EXP 69
14545: PUSH
14546: LD_EXP 70
14550: PUSH
14551: LD_EXP 72
14555: PUSH
14556: LD_EXP 73
14560: PUSH
14561: LD_EXP 76
14565: PUSH
14566: LD_EXP 77
14570: PUSH
14571: LD_EXP 78
14575: PUSH
14576: LD_EXP 79
14580: PUSH
14581: LD_EXP 80
14585: PUSH
14586: LD_EXP 81
14590: PUSH
14591: LD_EXP 82
14595: PUSH
14596: LD_EXP 83
14600: PUSH
14601: LD_EXP 84
14605: PUSH
14606: LD_EXP 49
14610: PUSH
14611: LD_EXP 50
14615: PUSH
14616: LD_EXP 53
14620: PUSH
14621: LD_EXP 54
14625: PUSH
14626: LD_EXP 55
14630: PUSH
14631: LD_EXP 51
14635: PUSH
14636: LD_EXP 52
14640: PUSH
14641: LD_EXP 60
14645: PUSH
14646: LD_EXP 64
14650: PUSH
14651: LD_EXP 65
14655: PUSH
14656: LD_EXP 67
14660: PUSH
14661: LD_EXP 71
14665: PUSH
14666: LD_EXP 74
14670: PUSH
14671: LD_EXP 75
14675: PUSH
14676: LD_EXP 85
14680: PUSH
14681: LD_EXP 86
14685: PUSH
14686: LD_EXP 87
14690: PUSH
14691: LD_EXP 88
14695: PUSH
14696: EMPTY
14697: LIST
14698: LIST
14699: LIST
14700: LIST
14701: LIST
14702: LIST
14703: LIST
14704: LIST
14705: LIST
14706: LIST
14707: LIST
14708: LIST
14709: LIST
14710: LIST
14711: LIST
14712: LIST
14713: LIST
14714: LIST
14715: LIST
14716: LIST
14717: LIST
14718: LIST
14719: LIST
14720: LIST
14721: LIST
14722: LIST
14723: LIST
14724: LIST
14725: LIST
14726: LIST
14727: LIST
14728: LIST
14729: LIST
14730: LIST
14731: LIST
14732: LIST
14733: LIST
14734: LIST
14735: LIST
14736: LIST
14737: LIST
14738: LIST
14739: LIST
14740: LIST
14741: LIST
14742: LIST
14743: LIST
14744: LIST
14745: LIST
14746: LIST
14747: LIST
14748: LIST
14749: LIST
14750: LIST
14751: ST_TO_ADDR
// tmp :=  ;
14752: LD_ADDR_VAR 0 3
14756: PUSH
14757: LD_STRING 
14759: ST_TO_ADDR
// for i = 1 to normalCounter do
14760: LD_ADDR_VAR 0 8
14764: PUSH
14765: DOUBLE
14766: LD_INT 1
14768: DEC
14769: ST_TO_ADDR
14770: LD_EXP 33
14774: PUSH
14775: FOR_TO
14776: IFFALSE 14812
// begin if flags [ i ] then
14778: LD_VAR 0 4
14782: PUSH
14783: LD_VAR 0 8
14787: ARRAY
14788: IFFALSE 14810
// tmp := tmp & i & ; ;
14790: LD_ADDR_VAR 0 3
14794: PUSH
14795: LD_VAR 0 3
14799: PUSH
14800: LD_VAR 0 8
14804: STR
14805: PUSH
14806: LD_STRING ;
14808: STR
14809: ST_TO_ADDR
// end ;
14810: GO 14775
14812: POP
14813: POP
// for i = 1 to hardcoreCounter do
14814: LD_ADDR_VAR 0 8
14818: PUSH
14819: DOUBLE
14820: LD_INT 1
14822: DEC
14823: ST_TO_ADDR
14824: LD_EXP 34
14828: PUSH
14829: FOR_TO
14830: IFFALSE 14876
// begin if flags [ normalCounter + i ] then
14832: LD_VAR 0 4
14836: PUSH
14837: LD_EXP 33
14841: PUSH
14842: LD_VAR 0 8
14846: PLUS
14847: ARRAY
14848: IFFALSE 14874
// tmp := tmp & ( 100 + i ) & ; ;
14850: LD_ADDR_VAR 0 3
14854: PUSH
14855: LD_VAR 0 3
14859: PUSH
14860: LD_INT 100
14862: PUSH
14863: LD_VAR 0 8
14867: PLUS
14868: STR
14869: PUSH
14870: LD_STRING ;
14872: STR
14873: ST_TO_ADDR
// end ;
14874: GO 14829
14876: POP
14877: POP
// if tmp then
14878: LD_VAR 0 3
14882: IFFALSE 14894
// active := tmp ;
14884: LD_ADDR_VAR 0 7
14888: PUSH
14889: LD_VAR 0 3
14893: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
14894: LD_STRING getStreamItemsFromMission("
14896: PUSH
14897: LD_VAR 0 5
14901: STR
14902: PUSH
14903: LD_STRING ","
14905: STR
14906: PUSH
14907: LD_VAR 0 6
14911: STR
14912: PUSH
14913: LD_STRING ","
14915: STR
14916: PUSH
14917: LD_VAR 0 7
14921: STR
14922: PUSH
14923: LD_STRING ")
14925: STR
14926: PPUSH
14927: CALL_OW 559
// end else
14931: GO 14940
// ToLua ( getStreamItemsFromMission("","","") ) ;
14933: LD_STRING getStreamItemsFromMission("","","")
14935: PPUSH
14936: CALL_OW 559
// end ;
14940: LD_VAR 0 2
14944: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
14945: LD_EXP 32
14949: PUSH
14950: LD_EXP 37
14954: AND
14955: IFFALSE 15079
14957: GO 14959
14959: DISABLE
14960: LD_INT 0
14962: PPUSH
14963: PPUSH
// begin enable ;
14964: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
14965: LD_ADDR_VAR 0 2
14969: PUSH
14970: LD_INT 22
14972: PUSH
14973: LD_OWVAR 2
14977: PUSH
14978: EMPTY
14979: LIST
14980: LIST
14981: PUSH
14982: LD_INT 2
14984: PUSH
14985: LD_INT 34
14987: PUSH
14988: LD_INT 7
14990: PUSH
14991: EMPTY
14992: LIST
14993: LIST
14994: PUSH
14995: LD_INT 34
14997: PUSH
14998: LD_INT 45
15000: PUSH
15001: EMPTY
15002: LIST
15003: LIST
15004: PUSH
15005: LD_INT 34
15007: PUSH
15008: LD_INT 28
15010: PUSH
15011: EMPTY
15012: LIST
15013: LIST
15014: PUSH
15015: LD_INT 34
15017: PUSH
15018: LD_INT 47
15020: PUSH
15021: EMPTY
15022: LIST
15023: LIST
15024: PUSH
15025: EMPTY
15026: LIST
15027: LIST
15028: LIST
15029: LIST
15030: LIST
15031: PUSH
15032: EMPTY
15033: LIST
15034: LIST
15035: PPUSH
15036: CALL_OW 69
15040: ST_TO_ADDR
// if not tmp then
15041: LD_VAR 0 2
15045: NOT
15046: IFFALSE 15050
// exit ;
15048: GO 15079
// for i in tmp do
15050: LD_ADDR_VAR 0 1
15054: PUSH
15055: LD_VAR 0 2
15059: PUSH
15060: FOR_IN
15061: IFFALSE 15077
// begin SetLives ( i , 0 ) ;
15063: LD_VAR 0 1
15067: PPUSH
15068: LD_INT 0
15070: PPUSH
15071: CALL_OW 234
// end ;
15075: GO 15060
15077: POP
15078: POP
// end ;
15079: PPOPN 2
15081: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
15082: LD_EXP 32
15086: PUSH
15087: LD_EXP 38
15091: AND
15092: IFFALSE 15176
15094: GO 15096
15096: DISABLE
15097: LD_INT 0
15099: PPUSH
15100: PPUSH
// begin enable ;
15101: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
15102: LD_ADDR_VAR 0 2
15106: PUSH
15107: LD_INT 22
15109: PUSH
15110: LD_OWVAR 2
15114: PUSH
15115: EMPTY
15116: LIST
15117: LIST
15118: PUSH
15119: LD_INT 32
15121: PUSH
15122: LD_INT 3
15124: PUSH
15125: EMPTY
15126: LIST
15127: LIST
15128: PUSH
15129: EMPTY
15130: LIST
15131: LIST
15132: PPUSH
15133: CALL_OW 69
15137: ST_TO_ADDR
// if not tmp then
15138: LD_VAR 0 2
15142: NOT
15143: IFFALSE 15147
// exit ;
15145: GO 15176
// for i in tmp do
15147: LD_ADDR_VAR 0 1
15151: PUSH
15152: LD_VAR 0 2
15156: PUSH
15157: FOR_IN
15158: IFFALSE 15174
// begin SetLives ( i , 0 ) ;
15160: LD_VAR 0 1
15164: PPUSH
15165: LD_INT 0
15167: PPUSH
15168: CALL_OW 234
// end ;
15172: GO 15157
15174: POP
15175: POP
// end ;
15176: PPOPN 2
15178: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
15179: LD_EXP 32
15183: PUSH
15184: LD_EXP 35
15188: AND
15189: IFFALSE 15282
15191: GO 15193
15193: DISABLE
15194: LD_INT 0
15196: PPUSH
// begin enable ;
15197: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
15198: LD_ADDR_VAR 0 1
15202: PUSH
15203: LD_INT 22
15205: PUSH
15206: LD_OWVAR 2
15210: PUSH
15211: EMPTY
15212: LIST
15213: LIST
15214: PUSH
15215: LD_INT 2
15217: PUSH
15218: LD_INT 25
15220: PUSH
15221: LD_INT 5
15223: PUSH
15224: EMPTY
15225: LIST
15226: LIST
15227: PUSH
15228: LD_INT 25
15230: PUSH
15231: LD_INT 9
15233: PUSH
15234: EMPTY
15235: LIST
15236: LIST
15237: PUSH
15238: LD_INT 25
15240: PUSH
15241: LD_INT 8
15243: PUSH
15244: EMPTY
15245: LIST
15246: LIST
15247: PUSH
15248: EMPTY
15249: LIST
15250: LIST
15251: LIST
15252: LIST
15253: PUSH
15254: EMPTY
15255: LIST
15256: LIST
15257: PPUSH
15258: CALL_OW 69
15262: PUSH
15263: FOR_IN
15264: IFFALSE 15280
// begin SetClass ( i , 1 ) ;
15266: LD_VAR 0 1
15270: PPUSH
15271: LD_INT 1
15273: PPUSH
15274: CALL_OW 336
// end ;
15278: GO 15263
15280: POP
15281: POP
// end ;
15282: PPOPN 1
15284: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
15285: LD_EXP 32
15289: PUSH
15290: LD_EXP 36
15294: AND
15295: PUSH
15296: LD_OWVAR 65
15300: PUSH
15301: LD_INT 7
15303: LESS
15304: AND
15305: IFFALSE 15319
15307: GO 15309
15309: DISABLE
// begin enable ;
15310: ENABLE
// game_speed := 7 ;
15311: LD_ADDR_OWVAR 65
15315: PUSH
15316: LD_INT 7
15318: ST_TO_ADDR
// end ;
15319: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
15320: LD_EXP 32
15324: PUSH
15325: LD_EXP 39
15329: AND
15330: IFFALSE 15532
15332: GO 15334
15334: DISABLE
15335: LD_INT 0
15337: PPUSH
15338: PPUSH
15339: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
15340: LD_ADDR_VAR 0 3
15344: PUSH
15345: LD_INT 81
15347: PUSH
15348: LD_OWVAR 2
15352: PUSH
15353: EMPTY
15354: LIST
15355: LIST
15356: PUSH
15357: LD_INT 21
15359: PUSH
15360: LD_INT 1
15362: PUSH
15363: EMPTY
15364: LIST
15365: LIST
15366: PUSH
15367: EMPTY
15368: LIST
15369: LIST
15370: PPUSH
15371: CALL_OW 69
15375: ST_TO_ADDR
// if not tmp then
15376: LD_VAR 0 3
15380: NOT
15381: IFFALSE 15385
// exit ;
15383: GO 15532
// if tmp > 5 then
15385: LD_VAR 0 3
15389: PUSH
15390: LD_INT 5
15392: GREATER
15393: IFFALSE 15405
// k := 5 else
15395: LD_ADDR_VAR 0 2
15399: PUSH
15400: LD_INT 5
15402: ST_TO_ADDR
15403: GO 15415
// k := tmp ;
15405: LD_ADDR_VAR 0 2
15409: PUSH
15410: LD_VAR 0 3
15414: ST_TO_ADDR
// for i := 1 to k do
15415: LD_ADDR_VAR 0 1
15419: PUSH
15420: DOUBLE
15421: LD_INT 1
15423: DEC
15424: ST_TO_ADDR
15425: LD_VAR 0 2
15429: PUSH
15430: FOR_TO
15431: IFFALSE 15530
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
15433: LD_VAR 0 3
15437: PUSH
15438: LD_VAR 0 1
15442: ARRAY
15443: PPUSH
15444: LD_VAR 0 1
15448: PUSH
15449: LD_INT 4
15451: MOD
15452: PUSH
15453: LD_INT 1
15455: PLUS
15456: PPUSH
15457: CALL_OW 259
15461: PUSH
15462: LD_INT 10
15464: LESS
15465: IFFALSE 15528
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
15467: LD_VAR 0 3
15471: PUSH
15472: LD_VAR 0 1
15476: ARRAY
15477: PPUSH
15478: LD_VAR 0 1
15482: PUSH
15483: LD_INT 4
15485: MOD
15486: PUSH
15487: LD_INT 1
15489: PLUS
15490: PPUSH
15491: LD_VAR 0 3
15495: PUSH
15496: LD_VAR 0 1
15500: ARRAY
15501: PPUSH
15502: LD_VAR 0 1
15506: PUSH
15507: LD_INT 4
15509: MOD
15510: PUSH
15511: LD_INT 1
15513: PLUS
15514: PPUSH
15515: CALL_OW 259
15519: PUSH
15520: LD_INT 1
15522: PLUS
15523: PPUSH
15524: CALL_OW 237
15528: GO 15430
15530: POP
15531: POP
// end ;
15532: PPOPN 3
15534: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
15535: LD_EXP 32
15539: PUSH
15540: LD_EXP 40
15544: AND
15545: IFFALSE 15565
15547: GO 15549
15549: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
15550: LD_INT 4
15552: PPUSH
15553: LD_OWVAR 2
15557: PPUSH
15558: LD_INT 0
15560: PPUSH
15561: CALL_OW 324
15565: END
// every 0 0$1 trigger StreamModeActive and sShovel do
15566: LD_EXP 32
15570: PUSH
15571: LD_EXP 69
15575: AND
15576: IFFALSE 15596
15578: GO 15580
15580: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
15581: LD_INT 19
15583: PPUSH
15584: LD_OWVAR 2
15588: PPUSH
15589: LD_INT 0
15591: PPUSH
15592: CALL_OW 324
15596: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
15597: LD_EXP 32
15601: PUSH
15602: LD_EXP 41
15606: AND
15607: IFFALSE 15709
15609: GO 15611
15611: DISABLE
15612: LD_INT 0
15614: PPUSH
15615: PPUSH
// begin enable ;
15616: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
15617: LD_ADDR_VAR 0 2
15621: PUSH
15622: LD_INT 22
15624: PUSH
15625: LD_OWVAR 2
15629: PUSH
15630: EMPTY
15631: LIST
15632: LIST
15633: PUSH
15634: LD_INT 2
15636: PUSH
15637: LD_INT 34
15639: PUSH
15640: LD_INT 11
15642: PUSH
15643: EMPTY
15644: LIST
15645: LIST
15646: PUSH
15647: LD_INT 34
15649: PUSH
15650: LD_INT 30
15652: PUSH
15653: EMPTY
15654: LIST
15655: LIST
15656: PUSH
15657: EMPTY
15658: LIST
15659: LIST
15660: LIST
15661: PUSH
15662: EMPTY
15663: LIST
15664: LIST
15665: PPUSH
15666: CALL_OW 69
15670: ST_TO_ADDR
// if not tmp then
15671: LD_VAR 0 2
15675: NOT
15676: IFFALSE 15680
// exit ;
15678: GO 15709
// for i in tmp do
15680: LD_ADDR_VAR 0 1
15684: PUSH
15685: LD_VAR 0 2
15689: PUSH
15690: FOR_IN
15691: IFFALSE 15707
// begin SetLives ( i , 0 ) ;
15693: LD_VAR 0 1
15697: PPUSH
15698: LD_INT 0
15700: PPUSH
15701: CALL_OW 234
// end ;
15705: GO 15690
15707: POP
15708: POP
// end ;
15709: PPOPN 2
15711: END
// every 0 0$1 trigger StreamModeActive and sBunker do
15712: LD_EXP 32
15716: PUSH
15717: LD_EXP 42
15721: AND
15722: IFFALSE 15742
15724: GO 15726
15726: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
15727: LD_INT 32
15729: PPUSH
15730: LD_OWVAR 2
15734: PPUSH
15735: LD_INT 0
15737: PPUSH
15738: CALL_OW 324
15742: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
15743: LD_EXP 32
15747: PUSH
15748: LD_EXP 43
15752: AND
15753: IFFALSE 15934
15755: GO 15757
15757: DISABLE
15758: LD_INT 0
15760: PPUSH
15761: PPUSH
15762: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
15763: LD_ADDR_VAR 0 2
15767: PUSH
15768: LD_INT 22
15770: PUSH
15771: LD_OWVAR 2
15775: PUSH
15776: EMPTY
15777: LIST
15778: LIST
15779: PUSH
15780: LD_INT 33
15782: PUSH
15783: LD_INT 3
15785: PUSH
15786: EMPTY
15787: LIST
15788: LIST
15789: PUSH
15790: EMPTY
15791: LIST
15792: LIST
15793: PPUSH
15794: CALL_OW 69
15798: ST_TO_ADDR
// if not tmp then
15799: LD_VAR 0 2
15803: NOT
15804: IFFALSE 15808
// exit ;
15806: GO 15934
// side := 0 ;
15808: LD_ADDR_VAR 0 3
15812: PUSH
15813: LD_INT 0
15815: ST_TO_ADDR
// for i := 1 to 8 do
15816: LD_ADDR_VAR 0 1
15820: PUSH
15821: DOUBLE
15822: LD_INT 1
15824: DEC
15825: ST_TO_ADDR
15826: LD_INT 8
15828: PUSH
15829: FOR_TO
15830: IFFALSE 15878
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
15832: LD_OWVAR 2
15836: PUSH
15837: LD_VAR 0 1
15841: NONEQUAL
15842: PUSH
15843: LD_OWVAR 2
15847: PPUSH
15848: LD_VAR 0 1
15852: PPUSH
15853: CALL_OW 81
15857: PUSH
15858: LD_INT 2
15860: EQUAL
15861: AND
15862: IFFALSE 15876
// begin side := i ;
15864: LD_ADDR_VAR 0 3
15868: PUSH
15869: LD_VAR 0 1
15873: ST_TO_ADDR
// break ;
15874: GO 15878
// end ;
15876: GO 15829
15878: POP
15879: POP
// if not side then
15880: LD_VAR 0 3
15884: NOT
15885: IFFALSE 15889
// exit ;
15887: GO 15934
// for i := 1 to tmp do
15889: LD_ADDR_VAR 0 1
15893: PUSH
15894: DOUBLE
15895: LD_INT 1
15897: DEC
15898: ST_TO_ADDR
15899: LD_VAR 0 2
15903: PUSH
15904: FOR_TO
15905: IFFALSE 15932
// if Prob ( 60 ) then
15907: LD_INT 60
15909: PPUSH
15910: CALL_OW 13
15914: IFFALSE 15930
// SetSide ( i , side ) ;
15916: LD_VAR 0 1
15920: PPUSH
15921: LD_VAR 0 3
15925: PPUSH
15926: CALL_OW 235
15930: GO 15904
15932: POP
15933: POP
// end ;
15934: PPOPN 3
15936: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
15937: LD_EXP 32
15941: PUSH
15942: LD_EXP 45
15946: AND
15947: IFFALSE 16066
15949: GO 15951
15951: DISABLE
15952: LD_INT 0
15954: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
15955: LD_ADDR_VAR 0 1
15959: PUSH
15960: LD_INT 22
15962: PUSH
15963: LD_OWVAR 2
15967: PUSH
15968: EMPTY
15969: LIST
15970: LIST
15971: PUSH
15972: LD_INT 21
15974: PUSH
15975: LD_INT 1
15977: PUSH
15978: EMPTY
15979: LIST
15980: LIST
15981: PUSH
15982: LD_INT 3
15984: PUSH
15985: LD_INT 23
15987: PUSH
15988: LD_INT 0
15990: PUSH
15991: EMPTY
15992: LIST
15993: LIST
15994: PUSH
15995: EMPTY
15996: LIST
15997: LIST
15998: PUSH
15999: EMPTY
16000: LIST
16001: LIST
16002: LIST
16003: PPUSH
16004: CALL_OW 69
16008: PUSH
16009: FOR_IN
16010: IFFALSE 16064
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
16012: LD_VAR 0 1
16016: PPUSH
16017: CALL_OW 257
16021: PUSH
16022: LD_INT 1
16024: PUSH
16025: LD_INT 2
16027: PUSH
16028: LD_INT 3
16030: PUSH
16031: LD_INT 4
16033: PUSH
16034: EMPTY
16035: LIST
16036: LIST
16037: LIST
16038: LIST
16039: IN
16040: IFFALSE 16062
// SetClass ( un , rand ( 1 , 4 ) ) ;
16042: LD_VAR 0 1
16046: PPUSH
16047: LD_INT 1
16049: PPUSH
16050: LD_INT 4
16052: PPUSH
16053: CALL_OW 12
16057: PPUSH
16058: CALL_OW 336
16062: GO 16009
16064: POP
16065: POP
// end ;
16066: PPOPN 1
16068: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
16069: LD_EXP 32
16073: PUSH
16074: LD_EXP 44
16078: AND
16079: IFFALSE 16158
16081: GO 16083
16083: DISABLE
16084: LD_INT 0
16086: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
16087: LD_ADDR_VAR 0 1
16091: PUSH
16092: LD_INT 22
16094: PUSH
16095: LD_OWVAR 2
16099: PUSH
16100: EMPTY
16101: LIST
16102: LIST
16103: PUSH
16104: LD_INT 21
16106: PUSH
16107: LD_INT 3
16109: PUSH
16110: EMPTY
16111: LIST
16112: LIST
16113: PUSH
16114: EMPTY
16115: LIST
16116: LIST
16117: PPUSH
16118: CALL_OW 69
16122: ST_TO_ADDR
// if not tmp then
16123: LD_VAR 0 1
16127: NOT
16128: IFFALSE 16132
// exit ;
16130: GO 16158
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
16132: LD_VAR 0 1
16136: PUSH
16137: LD_INT 1
16139: PPUSH
16140: LD_VAR 0 1
16144: PPUSH
16145: CALL_OW 12
16149: ARRAY
16150: PPUSH
16151: LD_INT 100
16153: PPUSH
16154: CALL_OW 234
// end ;
16158: PPOPN 1
16160: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
16161: LD_EXP 32
16165: PUSH
16166: LD_EXP 46
16170: AND
16171: IFFALSE 16269
16173: GO 16175
16175: DISABLE
16176: LD_INT 0
16178: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
16179: LD_ADDR_VAR 0 1
16183: PUSH
16184: LD_INT 22
16186: PUSH
16187: LD_OWVAR 2
16191: PUSH
16192: EMPTY
16193: LIST
16194: LIST
16195: PUSH
16196: LD_INT 21
16198: PUSH
16199: LD_INT 1
16201: PUSH
16202: EMPTY
16203: LIST
16204: LIST
16205: PUSH
16206: EMPTY
16207: LIST
16208: LIST
16209: PPUSH
16210: CALL_OW 69
16214: ST_TO_ADDR
// if not tmp then
16215: LD_VAR 0 1
16219: NOT
16220: IFFALSE 16224
// exit ;
16222: GO 16269
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
16224: LD_VAR 0 1
16228: PUSH
16229: LD_INT 1
16231: PPUSH
16232: LD_VAR 0 1
16236: PPUSH
16237: CALL_OW 12
16241: ARRAY
16242: PPUSH
16243: LD_INT 1
16245: PPUSH
16246: LD_INT 4
16248: PPUSH
16249: CALL_OW 12
16253: PPUSH
16254: LD_INT 3000
16256: PPUSH
16257: LD_INT 9000
16259: PPUSH
16260: CALL_OW 12
16264: PPUSH
16265: CALL_OW 492
// end ;
16269: PPOPN 1
16271: END
// every 0 0$1 trigger StreamModeActive and sDepot do
16272: LD_EXP 32
16276: PUSH
16277: LD_EXP 47
16281: AND
16282: IFFALSE 16302
16284: GO 16286
16286: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
16287: LD_INT 1
16289: PPUSH
16290: LD_OWVAR 2
16294: PPUSH
16295: LD_INT 0
16297: PPUSH
16298: CALL_OW 324
16302: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
16303: LD_EXP 32
16307: PUSH
16308: LD_EXP 48
16312: AND
16313: IFFALSE 16396
16315: GO 16317
16317: DISABLE
16318: LD_INT 0
16320: PPUSH
16321: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
16322: LD_ADDR_VAR 0 2
16326: PUSH
16327: LD_INT 22
16329: PUSH
16330: LD_OWVAR 2
16334: PUSH
16335: EMPTY
16336: LIST
16337: LIST
16338: PUSH
16339: LD_INT 21
16341: PUSH
16342: LD_INT 3
16344: PUSH
16345: EMPTY
16346: LIST
16347: LIST
16348: PUSH
16349: EMPTY
16350: LIST
16351: LIST
16352: PPUSH
16353: CALL_OW 69
16357: ST_TO_ADDR
// if not tmp then
16358: LD_VAR 0 2
16362: NOT
16363: IFFALSE 16367
// exit ;
16365: GO 16396
// for i in tmp do
16367: LD_ADDR_VAR 0 1
16371: PUSH
16372: LD_VAR 0 2
16376: PUSH
16377: FOR_IN
16378: IFFALSE 16394
// SetBLevel ( i , 10 ) ;
16380: LD_VAR 0 1
16384: PPUSH
16385: LD_INT 10
16387: PPUSH
16388: CALL_OW 241
16392: GO 16377
16394: POP
16395: POP
// end ;
16396: PPOPN 2
16398: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
16399: LD_EXP 32
16403: PUSH
16404: LD_EXP 49
16408: AND
16409: IFFALSE 16520
16411: GO 16413
16413: DISABLE
16414: LD_INT 0
16416: PPUSH
16417: PPUSH
16418: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
16419: LD_ADDR_VAR 0 3
16423: PUSH
16424: LD_INT 22
16426: PUSH
16427: LD_OWVAR 2
16431: PUSH
16432: EMPTY
16433: LIST
16434: LIST
16435: PUSH
16436: LD_INT 25
16438: PUSH
16439: LD_INT 1
16441: PUSH
16442: EMPTY
16443: LIST
16444: LIST
16445: PUSH
16446: EMPTY
16447: LIST
16448: LIST
16449: PPUSH
16450: CALL_OW 69
16454: ST_TO_ADDR
// if not tmp then
16455: LD_VAR 0 3
16459: NOT
16460: IFFALSE 16464
// exit ;
16462: GO 16520
// un := tmp [ rand ( 1 , tmp ) ] ;
16464: LD_ADDR_VAR 0 2
16468: PUSH
16469: LD_VAR 0 3
16473: PUSH
16474: LD_INT 1
16476: PPUSH
16477: LD_VAR 0 3
16481: PPUSH
16482: CALL_OW 12
16486: ARRAY
16487: ST_TO_ADDR
// if Crawls ( un ) then
16488: LD_VAR 0 2
16492: PPUSH
16493: CALL_OW 318
16497: IFFALSE 16508
// ComWalk ( un ) ;
16499: LD_VAR 0 2
16503: PPUSH
16504: CALL_OW 138
// SetClass ( un , class_sniper ) ;
16508: LD_VAR 0 2
16512: PPUSH
16513: LD_INT 5
16515: PPUSH
16516: CALL_OW 336
// end ;
16520: PPOPN 3
16522: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
16523: LD_EXP 32
16527: PUSH
16528: LD_EXP 50
16532: AND
16533: PUSH
16534: LD_OWVAR 67
16538: PUSH
16539: LD_INT 4
16541: LESS
16542: AND
16543: IFFALSE 16562
16545: GO 16547
16547: DISABLE
// begin Difficulty := Difficulty + 1 ;
16548: LD_ADDR_OWVAR 67
16552: PUSH
16553: LD_OWVAR 67
16557: PUSH
16558: LD_INT 1
16560: PLUS
16561: ST_TO_ADDR
// end ;
16562: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
16563: LD_EXP 32
16567: PUSH
16568: LD_EXP 51
16572: AND
16573: IFFALSE 16676
16575: GO 16577
16577: DISABLE
16578: LD_INT 0
16580: PPUSH
// begin for i := 1 to 5 do
16581: LD_ADDR_VAR 0 1
16585: PUSH
16586: DOUBLE
16587: LD_INT 1
16589: DEC
16590: ST_TO_ADDR
16591: LD_INT 5
16593: PUSH
16594: FOR_TO
16595: IFFALSE 16674
// begin uc_nation := nation_nature ;
16597: LD_ADDR_OWVAR 21
16601: PUSH
16602: LD_INT 0
16604: ST_TO_ADDR
// uc_side := 0 ;
16605: LD_ADDR_OWVAR 20
16609: PUSH
16610: LD_INT 0
16612: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
16613: LD_ADDR_OWVAR 29
16617: PUSH
16618: LD_INT 12
16620: PUSH
16621: LD_INT 12
16623: PUSH
16624: EMPTY
16625: LIST
16626: LIST
16627: ST_TO_ADDR
// hc_agressivity := 20 ;
16628: LD_ADDR_OWVAR 35
16632: PUSH
16633: LD_INT 20
16635: ST_TO_ADDR
// hc_class := class_tiger ;
16636: LD_ADDR_OWVAR 28
16640: PUSH
16641: LD_INT 14
16643: ST_TO_ADDR
// hc_gallery :=  ;
16644: LD_ADDR_OWVAR 33
16648: PUSH
16649: LD_STRING 
16651: ST_TO_ADDR
// hc_name :=  ;
16652: LD_ADDR_OWVAR 26
16656: PUSH
16657: LD_STRING 
16659: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
16660: CALL_OW 44
16664: PPUSH
16665: LD_INT 0
16667: PPUSH
16668: CALL_OW 51
// end ;
16672: GO 16594
16674: POP
16675: POP
// end ;
16676: PPOPN 1
16678: END
// every 0 0$1 trigger StreamModeActive and sBomb do
16679: LD_EXP 32
16683: PUSH
16684: LD_EXP 52
16688: AND
16689: IFFALSE 16698
16691: GO 16693
16693: DISABLE
// StreamSibBomb ;
16694: CALL 16699 0 0
16698: END
// export function StreamSibBomb ; var i , x , y ; begin
16699: LD_INT 0
16701: PPUSH
16702: PPUSH
16703: PPUSH
16704: PPUSH
// result := false ;
16705: LD_ADDR_VAR 0 1
16709: PUSH
16710: LD_INT 0
16712: ST_TO_ADDR
// for i := 1 to 16 do
16713: LD_ADDR_VAR 0 2
16717: PUSH
16718: DOUBLE
16719: LD_INT 1
16721: DEC
16722: ST_TO_ADDR
16723: LD_INT 16
16725: PUSH
16726: FOR_TO
16727: IFFALSE 16926
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
16729: LD_ADDR_VAR 0 3
16733: PUSH
16734: LD_INT 10
16736: PUSH
16737: LD_INT 20
16739: PUSH
16740: LD_INT 30
16742: PUSH
16743: LD_INT 40
16745: PUSH
16746: LD_INT 50
16748: PUSH
16749: LD_INT 60
16751: PUSH
16752: LD_INT 70
16754: PUSH
16755: LD_INT 80
16757: PUSH
16758: LD_INT 90
16760: PUSH
16761: LD_INT 100
16763: PUSH
16764: LD_INT 110
16766: PUSH
16767: LD_INT 120
16769: PUSH
16770: LD_INT 130
16772: PUSH
16773: LD_INT 140
16775: PUSH
16776: LD_INT 150
16778: PUSH
16779: EMPTY
16780: LIST
16781: LIST
16782: LIST
16783: LIST
16784: LIST
16785: LIST
16786: LIST
16787: LIST
16788: LIST
16789: LIST
16790: LIST
16791: LIST
16792: LIST
16793: LIST
16794: LIST
16795: PUSH
16796: LD_INT 1
16798: PPUSH
16799: LD_INT 15
16801: PPUSH
16802: CALL_OW 12
16806: ARRAY
16807: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
16808: LD_ADDR_VAR 0 4
16812: PUSH
16813: LD_INT 10
16815: PUSH
16816: LD_INT 20
16818: PUSH
16819: LD_INT 30
16821: PUSH
16822: LD_INT 40
16824: PUSH
16825: LD_INT 50
16827: PUSH
16828: LD_INT 60
16830: PUSH
16831: LD_INT 70
16833: PUSH
16834: LD_INT 80
16836: PUSH
16837: LD_INT 90
16839: PUSH
16840: LD_INT 100
16842: PUSH
16843: LD_INT 110
16845: PUSH
16846: LD_INT 120
16848: PUSH
16849: LD_INT 130
16851: PUSH
16852: LD_INT 140
16854: PUSH
16855: LD_INT 150
16857: PUSH
16858: EMPTY
16859: LIST
16860: LIST
16861: LIST
16862: LIST
16863: LIST
16864: LIST
16865: LIST
16866: LIST
16867: LIST
16868: LIST
16869: LIST
16870: LIST
16871: LIST
16872: LIST
16873: LIST
16874: PUSH
16875: LD_INT 1
16877: PPUSH
16878: LD_INT 15
16880: PPUSH
16881: CALL_OW 12
16885: ARRAY
16886: ST_TO_ADDR
// if ValidHex ( x , y ) then
16887: LD_VAR 0 3
16891: PPUSH
16892: LD_VAR 0 4
16896: PPUSH
16897: CALL_OW 488
16901: IFFALSE 16924
// begin result := [ x , y ] ;
16903: LD_ADDR_VAR 0 1
16907: PUSH
16908: LD_VAR 0 3
16912: PUSH
16913: LD_VAR 0 4
16917: PUSH
16918: EMPTY
16919: LIST
16920: LIST
16921: ST_TO_ADDR
// break ;
16922: GO 16926
// end ; end ;
16924: GO 16726
16926: POP
16927: POP
// if result then
16928: LD_VAR 0 1
16932: IFFALSE 16992
// begin ToLua ( playSibBomb() ) ;
16934: LD_STRING playSibBomb()
16936: PPUSH
16937: CALL_OW 559
// wait ( 0 0$14 ) ;
16941: LD_INT 490
16943: PPUSH
16944: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
16948: LD_VAR 0 1
16952: PUSH
16953: LD_INT 1
16955: ARRAY
16956: PPUSH
16957: LD_VAR 0 1
16961: PUSH
16962: LD_INT 2
16964: ARRAY
16965: PPUSH
16966: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
16970: LD_VAR 0 1
16974: PUSH
16975: LD_INT 1
16977: ARRAY
16978: PPUSH
16979: LD_VAR 0 1
16983: PUSH
16984: LD_INT 2
16986: ARRAY
16987: PPUSH
16988: CALL_OW 429
// end ; end ;
16992: LD_VAR 0 1
16996: RET
// every 0 0$1 trigger StreamModeActive and sReset do
16997: LD_EXP 32
17001: PUSH
17002: LD_EXP 54
17006: AND
17007: IFFALSE 17019
17009: GO 17011
17011: DISABLE
// YouLost (  ) ;
17012: LD_STRING 
17014: PPUSH
17015: CALL_OW 104
17019: END
// every 0 0$1 trigger StreamModeActive and sFog do
17020: LD_EXP 32
17024: PUSH
17025: LD_EXP 53
17029: AND
17030: IFFALSE 17044
17032: GO 17034
17034: DISABLE
// FogOff ( your_side ) ;
17035: LD_OWVAR 2
17039: PPUSH
17040: CALL_OW 344
17044: END
// every 0 0$1 trigger StreamModeActive and sSun do
17045: LD_EXP 32
17049: PUSH
17050: LD_EXP 55
17054: AND
17055: IFFALSE 17083
17057: GO 17059
17059: DISABLE
// begin solar_recharge_percent := 0 ;
17060: LD_ADDR_OWVAR 79
17064: PUSH
17065: LD_INT 0
17067: ST_TO_ADDR
// wait ( 5 5$00 ) ;
17068: LD_INT 10500
17070: PPUSH
17071: CALL_OW 67
// solar_recharge_percent := 100 ;
17075: LD_ADDR_OWVAR 79
17079: PUSH
17080: LD_INT 100
17082: ST_TO_ADDR
// end ;
17083: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
17084: LD_EXP 32
17088: PUSH
17089: LD_EXP 56
17093: AND
17094: IFFALSE 17333
17096: GO 17098
17098: DISABLE
17099: LD_INT 0
17101: PPUSH
17102: PPUSH
17103: PPUSH
// begin tmp := [ ] ;
17104: LD_ADDR_VAR 0 3
17108: PUSH
17109: EMPTY
17110: ST_TO_ADDR
// for i := 1 to 6 do
17111: LD_ADDR_VAR 0 1
17115: PUSH
17116: DOUBLE
17117: LD_INT 1
17119: DEC
17120: ST_TO_ADDR
17121: LD_INT 6
17123: PUSH
17124: FOR_TO
17125: IFFALSE 17230
// begin uc_nation := nation_nature ;
17127: LD_ADDR_OWVAR 21
17131: PUSH
17132: LD_INT 0
17134: ST_TO_ADDR
// uc_side := 0 ;
17135: LD_ADDR_OWVAR 20
17139: PUSH
17140: LD_INT 0
17142: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
17143: LD_ADDR_OWVAR 29
17147: PUSH
17148: LD_INT 12
17150: PUSH
17151: LD_INT 12
17153: PUSH
17154: EMPTY
17155: LIST
17156: LIST
17157: ST_TO_ADDR
// hc_agressivity := 20 ;
17158: LD_ADDR_OWVAR 35
17162: PUSH
17163: LD_INT 20
17165: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
17166: LD_ADDR_OWVAR 28
17170: PUSH
17171: LD_INT 17
17173: ST_TO_ADDR
// hc_gallery :=  ;
17174: LD_ADDR_OWVAR 33
17178: PUSH
17179: LD_STRING 
17181: ST_TO_ADDR
// hc_name :=  ;
17182: LD_ADDR_OWVAR 26
17186: PUSH
17187: LD_STRING 
17189: ST_TO_ADDR
// un := CreateHuman ;
17190: LD_ADDR_VAR 0 2
17194: PUSH
17195: CALL_OW 44
17199: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
17200: LD_VAR 0 2
17204: PPUSH
17205: LD_INT 1
17207: PPUSH
17208: CALL_OW 51
// tmp := tmp ^ un ;
17212: LD_ADDR_VAR 0 3
17216: PUSH
17217: LD_VAR 0 3
17221: PUSH
17222: LD_VAR 0 2
17226: ADD
17227: ST_TO_ADDR
// end ;
17228: GO 17124
17230: POP
17231: POP
// repeat wait ( 0 0$1 ) ;
17232: LD_INT 35
17234: PPUSH
17235: CALL_OW 67
// for un in tmp do
17239: LD_ADDR_VAR 0 2
17243: PUSH
17244: LD_VAR 0 3
17248: PUSH
17249: FOR_IN
17250: IFFALSE 17324
// begin if IsDead ( un ) then
17252: LD_VAR 0 2
17256: PPUSH
17257: CALL_OW 301
17261: IFFALSE 17281
// begin tmp := tmp diff un ;
17263: LD_ADDR_VAR 0 3
17267: PUSH
17268: LD_VAR 0 3
17272: PUSH
17273: LD_VAR 0 2
17277: DIFF
17278: ST_TO_ADDR
// continue ;
17279: GO 17249
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
17281: LD_VAR 0 2
17285: PPUSH
17286: LD_INT 3
17288: PUSH
17289: LD_INT 22
17291: PUSH
17292: LD_INT 0
17294: PUSH
17295: EMPTY
17296: LIST
17297: LIST
17298: PUSH
17299: EMPTY
17300: LIST
17301: LIST
17302: PPUSH
17303: CALL_OW 69
17307: PPUSH
17308: LD_VAR 0 2
17312: PPUSH
17313: CALL_OW 74
17317: PPUSH
17318: CALL_OW 115
// end ;
17322: GO 17249
17324: POP
17325: POP
// until not tmp ;
17326: LD_VAR 0 3
17330: NOT
17331: IFFALSE 17232
// end ;
17333: PPOPN 3
17335: END
// every 0 0$1 trigger StreamModeActive and sTroll do
17336: LD_EXP 32
17340: PUSH
17341: LD_EXP 57
17345: AND
17346: IFFALSE 17400
17348: GO 17350
17350: DISABLE
// begin ToLua ( displayTroll(); ) ;
17351: LD_STRING displayTroll();
17353: PPUSH
17354: CALL_OW 559
// wait ( 3 3$00 ) ;
17358: LD_INT 6300
17360: PPUSH
17361: CALL_OW 67
// ToLua ( hideTroll(); ) ;
17365: LD_STRING hideTroll();
17367: PPUSH
17368: CALL_OW 559
// wait ( 1 1$00 ) ;
17372: LD_INT 2100
17374: PPUSH
17375: CALL_OW 67
// ToLua ( displayTroll(); ) ;
17379: LD_STRING displayTroll();
17381: PPUSH
17382: CALL_OW 559
// wait ( 1 1$00 ) ;
17386: LD_INT 2100
17388: PPUSH
17389: CALL_OW 67
// ToLua ( hideTroll(); ) ;
17393: LD_STRING hideTroll();
17395: PPUSH
17396: CALL_OW 559
// end ;
17400: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
17401: LD_EXP 32
17405: PUSH
17406: LD_EXP 58
17410: AND
17411: IFFALSE 17474
17413: GO 17415
17415: DISABLE
17416: LD_INT 0
17418: PPUSH
// begin p := 0 ;
17419: LD_ADDR_VAR 0 1
17423: PUSH
17424: LD_INT 0
17426: ST_TO_ADDR
// repeat game_speed := 1 ;
17427: LD_ADDR_OWVAR 65
17431: PUSH
17432: LD_INT 1
17434: ST_TO_ADDR
// wait ( 0 0$1 ) ;
17435: LD_INT 35
17437: PPUSH
17438: CALL_OW 67
// p := p + 1 ;
17442: LD_ADDR_VAR 0 1
17446: PUSH
17447: LD_VAR 0 1
17451: PUSH
17452: LD_INT 1
17454: PLUS
17455: ST_TO_ADDR
// until p >= 60 ;
17456: LD_VAR 0 1
17460: PUSH
17461: LD_INT 60
17463: GREATEREQUAL
17464: IFFALSE 17427
// game_speed := 4 ;
17466: LD_ADDR_OWVAR 65
17470: PUSH
17471: LD_INT 4
17473: ST_TO_ADDR
// end ;
17474: PPOPN 1
17476: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
17477: LD_EXP 32
17481: PUSH
17482: LD_EXP 59
17486: AND
17487: IFFALSE 17633
17489: GO 17491
17491: DISABLE
17492: LD_INT 0
17494: PPUSH
17495: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
17496: LD_ADDR_VAR 0 1
17500: PUSH
17501: LD_INT 22
17503: PUSH
17504: LD_OWVAR 2
17508: PUSH
17509: EMPTY
17510: LIST
17511: LIST
17512: PUSH
17513: LD_INT 2
17515: PUSH
17516: LD_INT 30
17518: PUSH
17519: LD_INT 0
17521: PUSH
17522: EMPTY
17523: LIST
17524: LIST
17525: PUSH
17526: LD_INT 30
17528: PUSH
17529: LD_INT 1
17531: PUSH
17532: EMPTY
17533: LIST
17534: LIST
17535: PUSH
17536: EMPTY
17537: LIST
17538: LIST
17539: LIST
17540: PUSH
17541: EMPTY
17542: LIST
17543: LIST
17544: PPUSH
17545: CALL_OW 69
17549: ST_TO_ADDR
// if not depot then
17550: LD_VAR 0 1
17554: NOT
17555: IFFALSE 17559
// exit ;
17557: GO 17633
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
17559: LD_ADDR_VAR 0 2
17563: PUSH
17564: LD_VAR 0 1
17568: PUSH
17569: LD_INT 1
17571: PPUSH
17572: LD_VAR 0 1
17576: PPUSH
17577: CALL_OW 12
17581: ARRAY
17582: PPUSH
17583: CALL_OW 274
17587: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
17588: LD_VAR 0 2
17592: PPUSH
17593: LD_INT 1
17595: PPUSH
17596: LD_INT 0
17598: PPUSH
17599: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
17603: LD_VAR 0 2
17607: PPUSH
17608: LD_INT 2
17610: PPUSH
17611: LD_INT 0
17613: PPUSH
17614: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
17618: LD_VAR 0 2
17622: PPUSH
17623: LD_INT 3
17625: PPUSH
17626: LD_INT 0
17628: PPUSH
17629: CALL_OW 277
// end ;
17633: PPOPN 2
17635: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
17636: LD_EXP 32
17640: PUSH
17641: LD_EXP 60
17645: AND
17646: IFFALSE 17743
17648: GO 17650
17650: DISABLE
17651: LD_INT 0
17653: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
17654: LD_ADDR_VAR 0 1
17658: PUSH
17659: LD_INT 22
17661: PUSH
17662: LD_OWVAR 2
17666: PUSH
17667: EMPTY
17668: LIST
17669: LIST
17670: PUSH
17671: LD_INT 21
17673: PUSH
17674: LD_INT 1
17676: PUSH
17677: EMPTY
17678: LIST
17679: LIST
17680: PUSH
17681: LD_INT 3
17683: PUSH
17684: LD_INT 23
17686: PUSH
17687: LD_INT 0
17689: PUSH
17690: EMPTY
17691: LIST
17692: LIST
17693: PUSH
17694: EMPTY
17695: LIST
17696: LIST
17697: PUSH
17698: EMPTY
17699: LIST
17700: LIST
17701: LIST
17702: PPUSH
17703: CALL_OW 69
17707: ST_TO_ADDR
// if not tmp then
17708: LD_VAR 0 1
17712: NOT
17713: IFFALSE 17717
// exit ;
17715: GO 17743
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
17717: LD_VAR 0 1
17721: PUSH
17722: LD_INT 1
17724: PPUSH
17725: LD_VAR 0 1
17729: PPUSH
17730: CALL_OW 12
17734: ARRAY
17735: PPUSH
17736: LD_INT 200
17738: PPUSH
17739: CALL_OW 234
// end ;
17743: PPOPN 1
17745: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
17746: LD_EXP 32
17750: PUSH
17751: LD_EXP 61
17755: AND
17756: IFFALSE 17835
17758: GO 17760
17760: DISABLE
17761: LD_INT 0
17763: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
17764: LD_ADDR_VAR 0 1
17768: PUSH
17769: LD_INT 22
17771: PUSH
17772: LD_OWVAR 2
17776: PUSH
17777: EMPTY
17778: LIST
17779: LIST
17780: PUSH
17781: LD_INT 21
17783: PUSH
17784: LD_INT 2
17786: PUSH
17787: EMPTY
17788: LIST
17789: LIST
17790: PUSH
17791: EMPTY
17792: LIST
17793: LIST
17794: PPUSH
17795: CALL_OW 69
17799: ST_TO_ADDR
// if not tmp then
17800: LD_VAR 0 1
17804: NOT
17805: IFFALSE 17809
// exit ;
17807: GO 17835
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
17809: LD_VAR 0 1
17813: PUSH
17814: LD_INT 1
17816: PPUSH
17817: LD_VAR 0 1
17821: PPUSH
17822: CALL_OW 12
17826: ARRAY
17827: PPUSH
17828: LD_INT 60
17830: PPUSH
17831: CALL_OW 234
// end ;
17835: PPOPN 1
17837: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
17838: LD_EXP 32
17842: PUSH
17843: LD_EXP 62
17847: AND
17848: IFFALSE 17947
17850: GO 17852
17852: DISABLE
17853: LD_INT 0
17855: PPUSH
17856: PPUSH
// begin enable ;
17857: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
17858: LD_ADDR_VAR 0 1
17862: PUSH
17863: LD_INT 22
17865: PUSH
17866: LD_OWVAR 2
17870: PUSH
17871: EMPTY
17872: LIST
17873: LIST
17874: PUSH
17875: LD_INT 61
17877: PUSH
17878: EMPTY
17879: LIST
17880: PUSH
17881: LD_INT 33
17883: PUSH
17884: LD_INT 2
17886: PUSH
17887: EMPTY
17888: LIST
17889: LIST
17890: PUSH
17891: EMPTY
17892: LIST
17893: LIST
17894: LIST
17895: PPUSH
17896: CALL_OW 69
17900: ST_TO_ADDR
// if not tmp then
17901: LD_VAR 0 1
17905: NOT
17906: IFFALSE 17910
// exit ;
17908: GO 17947
// for i in tmp do
17910: LD_ADDR_VAR 0 2
17914: PUSH
17915: LD_VAR 0 1
17919: PUSH
17920: FOR_IN
17921: IFFALSE 17945
// if IsControledBy ( i ) then
17923: LD_VAR 0 2
17927: PPUSH
17928: CALL_OW 312
17932: IFFALSE 17943
// ComUnlink ( i ) ;
17934: LD_VAR 0 2
17938: PPUSH
17939: CALL_OW 136
17943: GO 17920
17945: POP
17946: POP
// end ;
17947: PPOPN 2
17949: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
17950: LD_EXP 32
17954: PUSH
17955: LD_EXP 63
17959: AND
17960: IFFALSE 18100
17962: GO 17964
17964: DISABLE
17965: LD_INT 0
17967: PPUSH
17968: PPUSH
// begin ToLua ( displayPowell(); ) ;
17969: LD_STRING displayPowell();
17971: PPUSH
17972: CALL_OW 559
// uc_side := 0 ;
17976: LD_ADDR_OWVAR 20
17980: PUSH
17981: LD_INT 0
17983: ST_TO_ADDR
// uc_nation := 2 ;
17984: LD_ADDR_OWVAR 21
17988: PUSH
17989: LD_INT 2
17991: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
17992: LD_ADDR_OWVAR 37
17996: PUSH
17997: LD_INT 14
17999: ST_TO_ADDR
// vc_engine := engine_siberite ;
18000: LD_ADDR_OWVAR 39
18004: PUSH
18005: LD_INT 3
18007: ST_TO_ADDR
// vc_control := control_apeman ;
18008: LD_ADDR_OWVAR 38
18012: PUSH
18013: LD_INT 5
18015: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
18016: LD_ADDR_OWVAR 40
18020: PUSH
18021: LD_INT 29
18023: ST_TO_ADDR
// un := CreateVehicle ;
18024: LD_ADDR_VAR 0 2
18028: PUSH
18029: CALL_OW 45
18033: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
18034: LD_VAR 0 2
18038: PPUSH
18039: LD_INT 1
18041: PPUSH
18042: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
18046: LD_INT 35
18048: PPUSH
18049: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
18053: LD_VAR 0 2
18057: PPUSH
18058: LD_INT 22
18060: PUSH
18061: LD_OWVAR 2
18065: PUSH
18066: EMPTY
18067: LIST
18068: LIST
18069: PPUSH
18070: CALL_OW 69
18074: PPUSH
18075: LD_VAR 0 2
18079: PPUSH
18080: CALL_OW 74
18084: PPUSH
18085: CALL_OW 115
// until IsDead ( un ) ;
18089: LD_VAR 0 2
18093: PPUSH
18094: CALL_OW 301
18098: IFFALSE 18046
// end ;
18100: PPOPN 2
18102: END
// every 0 0$1 trigger StreamModeActive and sStu do
18103: LD_EXP 32
18107: PUSH
18108: LD_EXP 71
18112: AND
18113: IFFALSE 18129
18115: GO 18117
18117: DISABLE
// begin ToLua ( displayStucuk(); ) ;
18118: LD_STRING displayStucuk();
18120: PPUSH
18121: CALL_OW 559
// ResetFog ;
18125: CALL_OW 335
// end ;
18129: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
18130: LD_EXP 32
18134: PUSH
18135: LD_EXP 64
18139: AND
18140: IFFALSE 18281
18142: GO 18144
18144: DISABLE
18145: LD_INT 0
18147: PPUSH
18148: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
18149: LD_ADDR_VAR 0 2
18153: PUSH
18154: LD_INT 22
18156: PUSH
18157: LD_OWVAR 2
18161: PUSH
18162: EMPTY
18163: LIST
18164: LIST
18165: PUSH
18166: LD_INT 21
18168: PUSH
18169: LD_INT 1
18171: PUSH
18172: EMPTY
18173: LIST
18174: LIST
18175: PUSH
18176: EMPTY
18177: LIST
18178: LIST
18179: PPUSH
18180: CALL_OW 69
18184: ST_TO_ADDR
// if not tmp then
18185: LD_VAR 0 2
18189: NOT
18190: IFFALSE 18194
// exit ;
18192: GO 18281
// un := tmp [ rand ( 1 , tmp ) ] ;
18194: LD_ADDR_VAR 0 1
18198: PUSH
18199: LD_VAR 0 2
18203: PUSH
18204: LD_INT 1
18206: PPUSH
18207: LD_VAR 0 2
18211: PPUSH
18212: CALL_OW 12
18216: ARRAY
18217: ST_TO_ADDR
// SetSide ( un , 0 ) ;
18218: LD_VAR 0 1
18222: PPUSH
18223: LD_INT 0
18225: PPUSH
18226: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
18230: LD_VAR 0 1
18234: PPUSH
18235: LD_OWVAR 3
18239: PUSH
18240: LD_VAR 0 1
18244: DIFF
18245: PPUSH
18246: LD_VAR 0 1
18250: PPUSH
18251: CALL_OW 74
18255: PPUSH
18256: CALL_OW 115
// wait ( 0 0$20 ) ;
18260: LD_INT 700
18262: PPUSH
18263: CALL_OW 67
// SetSide ( un , your_side ) ;
18267: LD_VAR 0 1
18271: PPUSH
18272: LD_OWVAR 2
18276: PPUSH
18277: CALL_OW 235
// end ;
18281: PPOPN 2
18283: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
18284: LD_EXP 32
18288: PUSH
18289: LD_EXP 65
18293: AND
18294: IFFALSE 18400
18296: GO 18298
18298: DISABLE
18299: LD_INT 0
18301: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18302: LD_ADDR_VAR 0 1
18306: PUSH
18307: LD_INT 22
18309: PUSH
18310: LD_OWVAR 2
18314: PUSH
18315: EMPTY
18316: LIST
18317: LIST
18318: PUSH
18319: LD_INT 2
18321: PUSH
18322: LD_INT 30
18324: PUSH
18325: LD_INT 0
18327: PUSH
18328: EMPTY
18329: LIST
18330: LIST
18331: PUSH
18332: LD_INT 30
18334: PUSH
18335: LD_INT 1
18337: PUSH
18338: EMPTY
18339: LIST
18340: LIST
18341: PUSH
18342: EMPTY
18343: LIST
18344: LIST
18345: LIST
18346: PUSH
18347: EMPTY
18348: LIST
18349: LIST
18350: PPUSH
18351: CALL_OW 69
18355: ST_TO_ADDR
// if not depot then
18356: LD_VAR 0 1
18360: NOT
18361: IFFALSE 18365
// exit ;
18363: GO 18400
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
18365: LD_VAR 0 1
18369: PUSH
18370: LD_INT 1
18372: ARRAY
18373: PPUSH
18374: CALL_OW 250
18378: PPUSH
18379: LD_VAR 0 1
18383: PUSH
18384: LD_INT 1
18386: ARRAY
18387: PPUSH
18388: CALL_OW 251
18392: PPUSH
18393: LD_INT 70
18395: PPUSH
18396: CALL_OW 495
// end ;
18400: PPOPN 1
18402: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
18403: LD_EXP 32
18407: PUSH
18408: LD_EXP 66
18412: AND
18413: IFFALSE 18624
18415: GO 18417
18417: DISABLE
18418: LD_INT 0
18420: PPUSH
18421: PPUSH
18422: PPUSH
18423: PPUSH
18424: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
18425: LD_ADDR_VAR 0 5
18429: PUSH
18430: LD_INT 22
18432: PUSH
18433: LD_OWVAR 2
18437: PUSH
18438: EMPTY
18439: LIST
18440: LIST
18441: PUSH
18442: LD_INT 21
18444: PUSH
18445: LD_INT 1
18447: PUSH
18448: EMPTY
18449: LIST
18450: LIST
18451: PUSH
18452: EMPTY
18453: LIST
18454: LIST
18455: PPUSH
18456: CALL_OW 69
18460: ST_TO_ADDR
// if not tmp then
18461: LD_VAR 0 5
18465: NOT
18466: IFFALSE 18470
// exit ;
18468: GO 18624
// for i in tmp do
18470: LD_ADDR_VAR 0 1
18474: PUSH
18475: LD_VAR 0 5
18479: PUSH
18480: FOR_IN
18481: IFFALSE 18622
// begin d := rand ( 0 , 5 ) ;
18483: LD_ADDR_VAR 0 4
18487: PUSH
18488: LD_INT 0
18490: PPUSH
18491: LD_INT 5
18493: PPUSH
18494: CALL_OW 12
18498: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
18499: LD_ADDR_VAR 0 2
18503: PUSH
18504: LD_VAR 0 1
18508: PPUSH
18509: CALL_OW 250
18513: PPUSH
18514: LD_VAR 0 4
18518: PPUSH
18519: LD_INT 3
18521: PPUSH
18522: LD_INT 12
18524: PPUSH
18525: CALL_OW 12
18529: PPUSH
18530: CALL_OW 272
18534: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
18535: LD_ADDR_VAR 0 3
18539: PUSH
18540: LD_VAR 0 1
18544: PPUSH
18545: CALL_OW 251
18549: PPUSH
18550: LD_VAR 0 4
18554: PPUSH
18555: LD_INT 3
18557: PPUSH
18558: LD_INT 12
18560: PPUSH
18561: CALL_OW 12
18565: PPUSH
18566: CALL_OW 273
18570: ST_TO_ADDR
// if ValidHex ( x , y ) then
18571: LD_VAR 0 2
18575: PPUSH
18576: LD_VAR 0 3
18580: PPUSH
18581: CALL_OW 488
18585: IFFALSE 18620
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
18587: LD_VAR 0 1
18591: PPUSH
18592: LD_VAR 0 2
18596: PPUSH
18597: LD_VAR 0 3
18601: PPUSH
18602: LD_INT 3
18604: PPUSH
18605: LD_INT 6
18607: PPUSH
18608: CALL_OW 12
18612: PPUSH
18613: LD_INT 1
18615: PPUSH
18616: CALL_OW 483
// end ;
18620: GO 18480
18622: POP
18623: POP
// end ;
18624: PPOPN 5
18626: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
18627: LD_EXP 32
18631: PUSH
18632: LD_EXP 67
18636: AND
18637: IFFALSE 18731
18639: GO 18641
18641: DISABLE
18642: LD_INT 0
18644: PPUSH
18645: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
18646: LD_ADDR_VAR 0 2
18650: PUSH
18651: LD_INT 22
18653: PUSH
18654: LD_OWVAR 2
18658: PUSH
18659: EMPTY
18660: LIST
18661: LIST
18662: PUSH
18663: LD_INT 32
18665: PUSH
18666: LD_INT 1
18668: PUSH
18669: EMPTY
18670: LIST
18671: LIST
18672: PUSH
18673: LD_INT 21
18675: PUSH
18676: LD_INT 2
18678: PUSH
18679: EMPTY
18680: LIST
18681: LIST
18682: PUSH
18683: EMPTY
18684: LIST
18685: LIST
18686: LIST
18687: PPUSH
18688: CALL_OW 69
18692: ST_TO_ADDR
// if not tmp then
18693: LD_VAR 0 2
18697: NOT
18698: IFFALSE 18702
// exit ;
18700: GO 18731
// for i in tmp do
18702: LD_ADDR_VAR 0 1
18706: PUSH
18707: LD_VAR 0 2
18711: PUSH
18712: FOR_IN
18713: IFFALSE 18729
// SetFuel ( i , 0 ) ;
18715: LD_VAR 0 1
18719: PPUSH
18720: LD_INT 0
18722: PPUSH
18723: CALL_OW 240
18727: GO 18712
18729: POP
18730: POP
// end ;
18731: PPOPN 2
18733: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
18734: LD_EXP 32
18738: PUSH
18739: LD_EXP 68
18743: AND
18744: IFFALSE 18810
18746: GO 18748
18748: DISABLE
18749: LD_INT 0
18751: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
18752: LD_ADDR_VAR 0 1
18756: PUSH
18757: LD_INT 22
18759: PUSH
18760: LD_OWVAR 2
18764: PUSH
18765: EMPTY
18766: LIST
18767: LIST
18768: PUSH
18769: LD_INT 30
18771: PUSH
18772: LD_INT 29
18774: PUSH
18775: EMPTY
18776: LIST
18777: LIST
18778: PUSH
18779: EMPTY
18780: LIST
18781: LIST
18782: PPUSH
18783: CALL_OW 69
18787: ST_TO_ADDR
// if not tmp then
18788: LD_VAR 0 1
18792: NOT
18793: IFFALSE 18797
// exit ;
18795: GO 18810
// DestroyUnit ( tmp [ 1 ] ) ;
18797: LD_VAR 0 1
18801: PUSH
18802: LD_INT 1
18804: ARRAY
18805: PPUSH
18806: CALL_OW 65
// end ;
18810: PPOPN 1
18812: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
18813: LD_EXP 32
18817: PUSH
18818: LD_EXP 70
18822: AND
18823: IFFALSE 18952
18825: GO 18827
18827: DISABLE
18828: LD_INT 0
18830: PPUSH
// begin uc_side := 0 ;
18831: LD_ADDR_OWVAR 20
18835: PUSH
18836: LD_INT 0
18838: ST_TO_ADDR
// uc_nation := nation_arabian ;
18839: LD_ADDR_OWVAR 21
18843: PUSH
18844: LD_INT 2
18846: ST_TO_ADDR
// hc_gallery :=  ;
18847: LD_ADDR_OWVAR 33
18851: PUSH
18852: LD_STRING 
18854: ST_TO_ADDR
// hc_name :=  ;
18855: LD_ADDR_OWVAR 26
18859: PUSH
18860: LD_STRING 
18862: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
18863: LD_INT 1
18865: PPUSH
18866: LD_INT 11
18868: PPUSH
18869: LD_INT 10
18871: PPUSH
18872: CALL_OW 380
// un := CreateHuman ;
18876: LD_ADDR_VAR 0 1
18880: PUSH
18881: CALL_OW 44
18885: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
18886: LD_VAR 0 1
18890: PPUSH
18891: LD_INT 1
18893: PPUSH
18894: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
18898: LD_INT 35
18900: PPUSH
18901: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
18905: LD_VAR 0 1
18909: PPUSH
18910: LD_INT 22
18912: PUSH
18913: LD_OWVAR 2
18917: PUSH
18918: EMPTY
18919: LIST
18920: LIST
18921: PPUSH
18922: CALL_OW 69
18926: PPUSH
18927: LD_VAR 0 1
18931: PPUSH
18932: CALL_OW 74
18936: PPUSH
18937: CALL_OW 115
// until IsDead ( un ) ;
18941: LD_VAR 0 1
18945: PPUSH
18946: CALL_OW 301
18950: IFFALSE 18898
// end ;
18952: PPOPN 1
18954: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
18955: LD_EXP 32
18959: PUSH
18960: LD_EXP 72
18964: AND
18965: IFFALSE 18977
18967: GO 18969
18969: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
18970: LD_STRING earthquake(getX(game), 0, 32)
18972: PPUSH
18973: CALL_OW 559
18977: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
18978: LD_EXP 32
18982: PUSH
18983: LD_EXP 73
18987: AND
18988: IFFALSE 19079
18990: GO 18992
18992: DISABLE
18993: LD_INT 0
18995: PPUSH
// begin enable ;
18996: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
18997: LD_ADDR_VAR 0 1
19001: PUSH
19002: LD_INT 22
19004: PUSH
19005: LD_OWVAR 2
19009: PUSH
19010: EMPTY
19011: LIST
19012: LIST
19013: PUSH
19014: LD_INT 21
19016: PUSH
19017: LD_INT 2
19019: PUSH
19020: EMPTY
19021: LIST
19022: LIST
19023: PUSH
19024: LD_INT 33
19026: PUSH
19027: LD_INT 3
19029: PUSH
19030: EMPTY
19031: LIST
19032: LIST
19033: PUSH
19034: EMPTY
19035: LIST
19036: LIST
19037: LIST
19038: PPUSH
19039: CALL_OW 69
19043: ST_TO_ADDR
// if not tmp then
19044: LD_VAR 0 1
19048: NOT
19049: IFFALSE 19053
// exit ;
19051: GO 19079
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
19053: LD_VAR 0 1
19057: PUSH
19058: LD_INT 1
19060: PPUSH
19061: LD_VAR 0 1
19065: PPUSH
19066: CALL_OW 12
19070: ARRAY
19071: PPUSH
19072: LD_INT 1
19074: PPUSH
19075: CALL_OW 234
// end ;
19079: PPOPN 1
19081: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
19082: LD_EXP 32
19086: PUSH
19087: LD_EXP 74
19091: AND
19092: IFFALSE 19233
19094: GO 19096
19096: DISABLE
19097: LD_INT 0
19099: PPUSH
19100: PPUSH
19101: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
19102: LD_ADDR_VAR 0 3
19106: PUSH
19107: LD_INT 22
19109: PUSH
19110: LD_OWVAR 2
19114: PUSH
19115: EMPTY
19116: LIST
19117: LIST
19118: PUSH
19119: LD_INT 25
19121: PUSH
19122: LD_INT 1
19124: PUSH
19125: EMPTY
19126: LIST
19127: LIST
19128: PUSH
19129: EMPTY
19130: LIST
19131: LIST
19132: PPUSH
19133: CALL_OW 69
19137: ST_TO_ADDR
// if not tmp then
19138: LD_VAR 0 3
19142: NOT
19143: IFFALSE 19147
// exit ;
19145: GO 19233
// un := tmp [ rand ( 1 , tmp ) ] ;
19147: LD_ADDR_VAR 0 2
19151: PUSH
19152: LD_VAR 0 3
19156: PUSH
19157: LD_INT 1
19159: PPUSH
19160: LD_VAR 0 3
19164: PPUSH
19165: CALL_OW 12
19169: ARRAY
19170: ST_TO_ADDR
// if Crawls ( un ) then
19171: LD_VAR 0 2
19175: PPUSH
19176: CALL_OW 318
19180: IFFALSE 19191
// ComWalk ( un ) ;
19182: LD_VAR 0 2
19186: PPUSH
19187: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
19191: LD_VAR 0 2
19195: PPUSH
19196: LD_INT 9
19198: PPUSH
19199: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
19203: LD_INT 28
19205: PPUSH
19206: LD_OWVAR 2
19210: PPUSH
19211: LD_INT 2
19213: PPUSH
19214: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
19218: LD_INT 29
19220: PPUSH
19221: LD_OWVAR 2
19225: PPUSH
19226: LD_INT 2
19228: PPUSH
19229: CALL_OW 322
// end ;
19233: PPOPN 3
19235: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
19236: LD_EXP 32
19240: PUSH
19241: LD_EXP 75
19245: AND
19246: IFFALSE 19357
19248: GO 19250
19250: DISABLE
19251: LD_INT 0
19253: PPUSH
19254: PPUSH
19255: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
19256: LD_ADDR_VAR 0 3
19260: PUSH
19261: LD_INT 22
19263: PUSH
19264: LD_OWVAR 2
19268: PUSH
19269: EMPTY
19270: LIST
19271: LIST
19272: PUSH
19273: LD_INT 25
19275: PUSH
19276: LD_INT 1
19278: PUSH
19279: EMPTY
19280: LIST
19281: LIST
19282: PUSH
19283: EMPTY
19284: LIST
19285: LIST
19286: PPUSH
19287: CALL_OW 69
19291: ST_TO_ADDR
// if not tmp then
19292: LD_VAR 0 3
19296: NOT
19297: IFFALSE 19301
// exit ;
19299: GO 19357
// un := tmp [ rand ( 1 , tmp ) ] ;
19301: LD_ADDR_VAR 0 2
19305: PUSH
19306: LD_VAR 0 3
19310: PUSH
19311: LD_INT 1
19313: PPUSH
19314: LD_VAR 0 3
19318: PPUSH
19319: CALL_OW 12
19323: ARRAY
19324: ST_TO_ADDR
// if Crawls ( un ) then
19325: LD_VAR 0 2
19329: PPUSH
19330: CALL_OW 318
19334: IFFALSE 19345
// ComWalk ( un ) ;
19336: LD_VAR 0 2
19340: PPUSH
19341: CALL_OW 138
// SetClass ( un , class_mortar ) ;
19345: LD_VAR 0 2
19349: PPUSH
19350: LD_INT 8
19352: PPUSH
19353: CALL_OW 336
// end ;
19357: PPOPN 3
19359: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
19360: LD_EXP 32
19364: PUSH
19365: LD_EXP 76
19369: AND
19370: IFFALSE 19514
19372: GO 19374
19374: DISABLE
19375: LD_INT 0
19377: PPUSH
19378: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
19379: LD_ADDR_VAR 0 2
19383: PUSH
19384: LD_INT 22
19386: PUSH
19387: LD_OWVAR 2
19391: PUSH
19392: EMPTY
19393: LIST
19394: LIST
19395: PUSH
19396: LD_INT 21
19398: PUSH
19399: LD_INT 2
19401: PUSH
19402: EMPTY
19403: LIST
19404: LIST
19405: PUSH
19406: LD_INT 2
19408: PUSH
19409: LD_INT 34
19411: PUSH
19412: LD_INT 12
19414: PUSH
19415: EMPTY
19416: LIST
19417: LIST
19418: PUSH
19419: LD_INT 34
19421: PUSH
19422: LD_INT 51
19424: PUSH
19425: EMPTY
19426: LIST
19427: LIST
19428: PUSH
19429: LD_INT 34
19431: PUSH
19432: LD_INT 32
19434: PUSH
19435: EMPTY
19436: LIST
19437: LIST
19438: PUSH
19439: EMPTY
19440: LIST
19441: LIST
19442: LIST
19443: LIST
19444: PUSH
19445: EMPTY
19446: LIST
19447: LIST
19448: LIST
19449: PPUSH
19450: CALL_OW 69
19454: ST_TO_ADDR
// if not tmp then
19455: LD_VAR 0 2
19459: NOT
19460: IFFALSE 19464
// exit ;
19462: GO 19514
// for i in tmp do
19464: LD_ADDR_VAR 0 1
19468: PUSH
19469: LD_VAR 0 2
19473: PUSH
19474: FOR_IN
19475: IFFALSE 19512
// if GetCargo ( i , mat_artifact ) = 0 then
19477: LD_VAR 0 1
19481: PPUSH
19482: LD_INT 4
19484: PPUSH
19485: CALL_OW 289
19489: PUSH
19490: LD_INT 0
19492: EQUAL
19493: IFFALSE 19510
// SetCargo ( i , mat_siberit , 100 ) ;
19495: LD_VAR 0 1
19499: PPUSH
19500: LD_INT 3
19502: PPUSH
19503: LD_INT 100
19505: PPUSH
19506: CALL_OW 290
19510: GO 19474
19512: POP
19513: POP
// end ;
19514: PPOPN 2
19516: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
19517: LD_EXP 32
19521: PUSH
19522: LD_EXP 77
19526: AND
19527: IFFALSE 19710
19529: GO 19531
19531: DISABLE
19532: LD_INT 0
19534: PPUSH
19535: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
19536: LD_ADDR_VAR 0 2
19540: PUSH
19541: LD_INT 22
19543: PUSH
19544: LD_OWVAR 2
19548: PUSH
19549: EMPTY
19550: LIST
19551: LIST
19552: PPUSH
19553: CALL_OW 69
19557: ST_TO_ADDR
// if not tmp then
19558: LD_VAR 0 2
19562: NOT
19563: IFFALSE 19567
// exit ;
19565: GO 19710
// for i := 1 to 2 do
19567: LD_ADDR_VAR 0 1
19571: PUSH
19572: DOUBLE
19573: LD_INT 1
19575: DEC
19576: ST_TO_ADDR
19577: LD_INT 2
19579: PUSH
19580: FOR_TO
19581: IFFALSE 19708
// begin uc_side := your_side ;
19583: LD_ADDR_OWVAR 20
19587: PUSH
19588: LD_OWVAR 2
19592: ST_TO_ADDR
// uc_nation := nation_american ;
19593: LD_ADDR_OWVAR 21
19597: PUSH
19598: LD_INT 1
19600: ST_TO_ADDR
// vc_chassis := us_morphling ;
19601: LD_ADDR_OWVAR 37
19605: PUSH
19606: LD_INT 5
19608: ST_TO_ADDR
// vc_engine := engine_siberite ;
19609: LD_ADDR_OWVAR 39
19613: PUSH
19614: LD_INT 3
19616: ST_TO_ADDR
// vc_control := control_computer ;
19617: LD_ADDR_OWVAR 38
19621: PUSH
19622: LD_INT 3
19624: ST_TO_ADDR
// vc_weapon := us_double_laser ;
19625: LD_ADDR_OWVAR 40
19629: PUSH
19630: LD_INT 10
19632: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
19633: LD_VAR 0 2
19637: PUSH
19638: LD_INT 1
19640: ARRAY
19641: PPUSH
19642: CALL_OW 310
19646: NOT
19647: IFFALSE 19694
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
19649: CALL_OW 45
19653: PPUSH
19654: LD_VAR 0 2
19658: PUSH
19659: LD_INT 1
19661: ARRAY
19662: PPUSH
19663: CALL_OW 250
19667: PPUSH
19668: LD_VAR 0 2
19672: PUSH
19673: LD_INT 1
19675: ARRAY
19676: PPUSH
19677: CALL_OW 251
19681: PPUSH
19682: LD_INT 12
19684: PPUSH
19685: LD_INT 1
19687: PPUSH
19688: CALL_OW 50
19692: GO 19706
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
19694: CALL_OW 45
19698: PPUSH
19699: LD_INT 1
19701: PPUSH
19702: CALL_OW 51
// end ;
19706: GO 19580
19708: POP
19709: POP
// end ;
19710: PPOPN 2
19712: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
19713: LD_EXP 32
19717: PUSH
19718: LD_EXP 78
19722: AND
19723: IFFALSE 19945
19725: GO 19727
19727: DISABLE
19728: LD_INT 0
19730: PPUSH
19731: PPUSH
19732: PPUSH
19733: PPUSH
19734: PPUSH
19735: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
19736: LD_ADDR_VAR 0 6
19740: PUSH
19741: LD_INT 22
19743: PUSH
19744: LD_OWVAR 2
19748: PUSH
19749: EMPTY
19750: LIST
19751: LIST
19752: PUSH
19753: LD_INT 21
19755: PUSH
19756: LD_INT 1
19758: PUSH
19759: EMPTY
19760: LIST
19761: LIST
19762: PUSH
19763: LD_INT 3
19765: PUSH
19766: LD_INT 23
19768: PUSH
19769: LD_INT 0
19771: PUSH
19772: EMPTY
19773: LIST
19774: LIST
19775: PUSH
19776: EMPTY
19777: LIST
19778: LIST
19779: PUSH
19780: EMPTY
19781: LIST
19782: LIST
19783: LIST
19784: PPUSH
19785: CALL_OW 69
19789: ST_TO_ADDR
// if not tmp then
19790: LD_VAR 0 6
19794: NOT
19795: IFFALSE 19799
// exit ;
19797: GO 19945
// s1 := rand ( 1 , 4 ) ;
19799: LD_ADDR_VAR 0 2
19803: PUSH
19804: LD_INT 1
19806: PPUSH
19807: LD_INT 4
19809: PPUSH
19810: CALL_OW 12
19814: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
19815: LD_ADDR_VAR 0 4
19819: PUSH
19820: LD_VAR 0 6
19824: PUSH
19825: LD_INT 1
19827: ARRAY
19828: PPUSH
19829: LD_VAR 0 2
19833: PPUSH
19834: CALL_OW 259
19838: ST_TO_ADDR
// if s1 = 1 then
19839: LD_VAR 0 2
19843: PUSH
19844: LD_INT 1
19846: EQUAL
19847: IFFALSE 19867
// s2 := rand ( 2 , 4 ) else
19849: LD_ADDR_VAR 0 3
19853: PUSH
19854: LD_INT 2
19856: PPUSH
19857: LD_INT 4
19859: PPUSH
19860: CALL_OW 12
19864: ST_TO_ADDR
19865: GO 19875
// s2 := 1 ;
19867: LD_ADDR_VAR 0 3
19871: PUSH
19872: LD_INT 1
19874: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
19875: LD_ADDR_VAR 0 5
19879: PUSH
19880: LD_VAR 0 6
19884: PUSH
19885: LD_INT 1
19887: ARRAY
19888: PPUSH
19889: LD_VAR 0 3
19893: PPUSH
19894: CALL_OW 259
19898: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
19899: LD_VAR 0 6
19903: PUSH
19904: LD_INT 1
19906: ARRAY
19907: PPUSH
19908: LD_VAR 0 2
19912: PPUSH
19913: LD_VAR 0 5
19917: PPUSH
19918: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
19922: LD_VAR 0 6
19926: PUSH
19927: LD_INT 1
19929: ARRAY
19930: PPUSH
19931: LD_VAR 0 3
19935: PPUSH
19936: LD_VAR 0 4
19940: PPUSH
19941: CALL_OW 237
// end ;
19945: PPOPN 6
19947: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
19948: LD_EXP 32
19952: PUSH
19953: LD_EXP 79
19957: AND
19958: IFFALSE 20037
19960: GO 19962
19962: DISABLE
19963: LD_INT 0
19965: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
19966: LD_ADDR_VAR 0 1
19970: PUSH
19971: LD_INT 22
19973: PUSH
19974: LD_OWVAR 2
19978: PUSH
19979: EMPTY
19980: LIST
19981: LIST
19982: PUSH
19983: LD_INT 30
19985: PUSH
19986: LD_INT 3
19988: PUSH
19989: EMPTY
19990: LIST
19991: LIST
19992: PUSH
19993: EMPTY
19994: LIST
19995: LIST
19996: PPUSH
19997: CALL_OW 69
20001: ST_TO_ADDR
// if not tmp then
20002: LD_VAR 0 1
20006: NOT
20007: IFFALSE 20011
// exit ;
20009: GO 20037
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
20011: LD_VAR 0 1
20015: PUSH
20016: LD_INT 1
20018: PPUSH
20019: LD_VAR 0 1
20023: PPUSH
20024: CALL_OW 12
20028: ARRAY
20029: PPUSH
20030: LD_INT 1
20032: PPUSH
20033: CALL_OW 234
// end ;
20037: PPOPN 1
20039: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
20040: LD_EXP 32
20044: PUSH
20045: LD_EXP 80
20049: AND
20050: IFFALSE 20162
20052: GO 20054
20054: DISABLE
20055: LD_INT 0
20057: PPUSH
20058: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
20059: LD_ADDR_VAR 0 2
20063: PUSH
20064: LD_INT 22
20066: PUSH
20067: LD_OWVAR 2
20071: PUSH
20072: EMPTY
20073: LIST
20074: LIST
20075: PUSH
20076: LD_INT 2
20078: PUSH
20079: LD_INT 30
20081: PUSH
20082: LD_INT 27
20084: PUSH
20085: EMPTY
20086: LIST
20087: LIST
20088: PUSH
20089: LD_INT 30
20091: PUSH
20092: LD_INT 26
20094: PUSH
20095: EMPTY
20096: LIST
20097: LIST
20098: PUSH
20099: LD_INT 30
20101: PUSH
20102: LD_INT 28
20104: PUSH
20105: EMPTY
20106: LIST
20107: LIST
20108: PUSH
20109: EMPTY
20110: LIST
20111: LIST
20112: LIST
20113: LIST
20114: PUSH
20115: EMPTY
20116: LIST
20117: LIST
20118: PPUSH
20119: CALL_OW 69
20123: ST_TO_ADDR
// if not tmp then
20124: LD_VAR 0 2
20128: NOT
20129: IFFALSE 20133
// exit ;
20131: GO 20162
// for i in tmp do
20133: LD_ADDR_VAR 0 1
20137: PUSH
20138: LD_VAR 0 2
20142: PUSH
20143: FOR_IN
20144: IFFALSE 20160
// SetLives ( i , 1 ) ;
20146: LD_VAR 0 1
20150: PPUSH
20151: LD_INT 1
20153: PPUSH
20154: CALL_OW 234
20158: GO 20143
20160: POP
20161: POP
// end ;
20162: PPOPN 2
20164: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
20165: LD_EXP 32
20169: PUSH
20170: LD_EXP 81
20174: AND
20175: IFFALSE 20462
20177: GO 20179
20179: DISABLE
20180: LD_INT 0
20182: PPUSH
20183: PPUSH
20184: PPUSH
// begin i := rand ( 1 , 7 ) ;
20185: LD_ADDR_VAR 0 1
20189: PUSH
20190: LD_INT 1
20192: PPUSH
20193: LD_INT 7
20195: PPUSH
20196: CALL_OW 12
20200: ST_TO_ADDR
// case i of 1 :
20201: LD_VAR 0 1
20205: PUSH
20206: LD_INT 1
20208: DOUBLE
20209: EQUAL
20210: IFTRUE 20214
20212: GO 20224
20214: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
20215: LD_STRING earthquake(getX(game), 0, 32)
20217: PPUSH
20218: CALL_OW 559
20222: GO 20462
20224: LD_INT 2
20226: DOUBLE
20227: EQUAL
20228: IFTRUE 20232
20230: GO 20246
20232: POP
// begin ToLua ( displayStucuk(); ) ;
20233: LD_STRING displayStucuk();
20235: PPUSH
20236: CALL_OW 559
// ResetFog ;
20240: CALL_OW 335
// end ; 3 :
20244: GO 20462
20246: LD_INT 3
20248: DOUBLE
20249: EQUAL
20250: IFTRUE 20254
20252: GO 20358
20254: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
20255: LD_ADDR_VAR 0 2
20259: PUSH
20260: LD_INT 22
20262: PUSH
20263: LD_OWVAR 2
20267: PUSH
20268: EMPTY
20269: LIST
20270: LIST
20271: PUSH
20272: LD_INT 25
20274: PUSH
20275: LD_INT 1
20277: PUSH
20278: EMPTY
20279: LIST
20280: LIST
20281: PUSH
20282: EMPTY
20283: LIST
20284: LIST
20285: PPUSH
20286: CALL_OW 69
20290: ST_TO_ADDR
// if not tmp then
20291: LD_VAR 0 2
20295: NOT
20296: IFFALSE 20300
// exit ;
20298: GO 20462
// un := tmp [ rand ( 1 , tmp ) ] ;
20300: LD_ADDR_VAR 0 3
20304: PUSH
20305: LD_VAR 0 2
20309: PUSH
20310: LD_INT 1
20312: PPUSH
20313: LD_VAR 0 2
20317: PPUSH
20318: CALL_OW 12
20322: ARRAY
20323: ST_TO_ADDR
// if Crawls ( un ) then
20324: LD_VAR 0 3
20328: PPUSH
20329: CALL_OW 318
20333: IFFALSE 20344
// ComWalk ( un ) ;
20335: LD_VAR 0 3
20339: PPUSH
20340: CALL_OW 138
// SetClass ( un , class_mortar ) ;
20344: LD_VAR 0 3
20348: PPUSH
20349: LD_INT 8
20351: PPUSH
20352: CALL_OW 336
// end ; 4 :
20356: GO 20462
20358: LD_INT 4
20360: DOUBLE
20361: EQUAL
20362: IFTRUE 20366
20364: GO 20440
20366: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
20367: LD_ADDR_VAR 0 2
20371: PUSH
20372: LD_INT 22
20374: PUSH
20375: LD_OWVAR 2
20379: PUSH
20380: EMPTY
20381: LIST
20382: LIST
20383: PUSH
20384: LD_INT 30
20386: PUSH
20387: LD_INT 29
20389: PUSH
20390: EMPTY
20391: LIST
20392: LIST
20393: PUSH
20394: EMPTY
20395: LIST
20396: LIST
20397: PPUSH
20398: CALL_OW 69
20402: ST_TO_ADDR
// if not tmp then
20403: LD_VAR 0 2
20407: NOT
20408: IFFALSE 20412
// exit ;
20410: GO 20462
// CenterNowOnUnits ( tmp [ 1 ] ) ;
20412: LD_VAR 0 2
20416: PUSH
20417: LD_INT 1
20419: ARRAY
20420: PPUSH
20421: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
20425: LD_VAR 0 2
20429: PUSH
20430: LD_INT 1
20432: ARRAY
20433: PPUSH
20434: CALL_OW 65
// end ; 5 .. 7 :
20438: GO 20462
20440: LD_INT 5
20442: DOUBLE
20443: GREATEREQUAL
20444: IFFALSE 20452
20446: LD_INT 7
20448: DOUBLE
20449: LESSEQUAL
20450: IFTRUE 20454
20452: GO 20461
20454: POP
// StreamSibBomb ; end ;
20455: CALL 16699 0 0
20459: GO 20462
20461: POP
// end ;
20462: PPOPN 3
20464: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
20465: LD_EXP 32
20469: PUSH
20470: LD_EXP 82
20474: AND
20475: IFFALSE 20631
20477: GO 20479
20479: DISABLE
20480: LD_INT 0
20482: PPUSH
20483: PPUSH
20484: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
20485: LD_ADDR_VAR 0 2
20489: PUSH
20490: LD_INT 81
20492: PUSH
20493: LD_OWVAR 2
20497: PUSH
20498: EMPTY
20499: LIST
20500: LIST
20501: PUSH
20502: LD_INT 2
20504: PUSH
20505: LD_INT 21
20507: PUSH
20508: LD_INT 1
20510: PUSH
20511: EMPTY
20512: LIST
20513: LIST
20514: PUSH
20515: LD_INT 21
20517: PUSH
20518: LD_INT 2
20520: PUSH
20521: EMPTY
20522: LIST
20523: LIST
20524: PUSH
20525: EMPTY
20526: LIST
20527: LIST
20528: LIST
20529: PUSH
20530: EMPTY
20531: LIST
20532: LIST
20533: PPUSH
20534: CALL_OW 69
20538: ST_TO_ADDR
// if not tmp then
20539: LD_VAR 0 2
20543: NOT
20544: IFFALSE 20548
// exit ;
20546: GO 20631
// p := 0 ;
20548: LD_ADDR_VAR 0 3
20552: PUSH
20553: LD_INT 0
20555: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
20556: LD_INT 35
20558: PPUSH
20559: CALL_OW 67
// p := p + 1 ;
20563: LD_ADDR_VAR 0 3
20567: PUSH
20568: LD_VAR 0 3
20572: PUSH
20573: LD_INT 1
20575: PLUS
20576: ST_TO_ADDR
// for i in tmp do
20577: LD_ADDR_VAR 0 1
20581: PUSH
20582: LD_VAR 0 2
20586: PUSH
20587: FOR_IN
20588: IFFALSE 20619
// if GetLives ( i ) < 1000 then
20590: LD_VAR 0 1
20594: PPUSH
20595: CALL_OW 256
20599: PUSH
20600: LD_INT 1000
20602: LESS
20603: IFFALSE 20617
// SetLives ( i , 1000 ) ;
20605: LD_VAR 0 1
20609: PPUSH
20610: LD_INT 1000
20612: PPUSH
20613: CALL_OW 234
20617: GO 20587
20619: POP
20620: POP
// until p > 20 ;
20621: LD_VAR 0 3
20625: PUSH
20626: LD_INT 20
20628: GREATER
20629: IFFALSE 20556
// end ;
20631: PPOPN 3
20633: END
// every 0 0$1 trigger StreamModeActive and sTime do
20634: LD_EXP 32
20638: PUSH
20639: LD_EXP 83
20643: AND
20644: IFFALSE 20679
20646: GO 20648
20648: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
20649: LD_INT 28
20651: PPUSH
20652: LD_OWVAR 2
20656: PPUSH
20657: LD_INT 2
20659: PPUSH
20660: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
20664: LD_INT 30
20666: PPUSH
20667: LD_OWVAR 2
20671: PPUSH
20672: LD_INT 2
20674: PPUSH
20675: CALL_OW 322
// end ;
20679: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
20680: LD_EXP 32
20684: PUSH
20685: LD_EXP 84
20689: AND
20690: IFFALSE 20811
20692: GO 20694
20694: DISABLE
20695: LD_INT 0
20697: PPUSH
20698: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
20699: LD_ADDR_VAR 0 2
20703: PUSH
20704: LD_INT 22
20706: PUSH
20707: LD_OWVAR 2
20711: PUSH
20712: EMPTY
20713: LIST
20714: LIST
20715: PUSH
20716: LD_INT 21
20718: PUSH
20719: LD_INT 1
20721: PUSH
20722: EMPTY
20723: LIST
20724: LIST
20725: PUSH
20726: LD_INT 3
20728: PUSH
20729: LD_INT 23
20731: PUSH
20732: LD_INT 0
20734: PUSH
20735: EMPTY
20736: LIST
20737: LIST
20738: PUSH
20739: EMPTY
20740: LIST
20741: LIST
20742: PUSH
20743: EMPTY
20744: LIST
20745: LIST
20746: LIST
20747: PPUSH
20748: CALL_OW 69
20752: ST_TO_ADDR
// if not tmp then
20753: LD_VAR 0 2
20757: NOT
20758: IFFALSE 20762
// exit ;
20760: GO 20811
// for i in tmp do
20762: LD_ADDR_VAR 0 1
20766: PUSH
20767: LD_VAR 0 2
20771: PUSH
20772: FOR_IN
20773: IFFALSE 20809
// begin if Crawls ( i ) then
20775: LD_VAR 0 1
20779: PPUSH
20780: CALL_OW 318
20784: IFFALSE 20795
// ComWalk ( i ) ;
20786: LD_VAR 0 1
20790: PPUSH
20791: CALL_OW 138
// SetClass ( i , 2 ) ;
20795: LD_VAR 0 1
20799: PPUSH
20800: LD_INT 2
20802: PPUSH
20803: CALL_OW 336
// end ;
20807: GO 20772
20809: POP
20810: POP
// end ;
20811: PPOPN 2
20813: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
20814: LD_EXP 32
20818: PUSH
20819: LD_EXP 85
20823: AND
20824: IFFALSE 21112
20826: GO 20828
20828: DISABLE
20829: LD_INT 0
20831: PPUSH
20832: PPUSH
20833: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
20834: LD_OWVAR 2
20838: PPUSH
20839: LD_INT 9
20841: PPUSH
20842: LD_INT 1
20844: PPUSH
20845: LD_INT 1
20847: PPUSH
20848: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
20852: LD_INT 9
20854: PPUSH
20855: LD_OWVAR 2
20859: PPUSH
20860: CALL_OW 343
// uc_side := 9 ;
20864: LD_ADDR_OWVAR 20
20868: PUSH
20869: LD_INT 9
20871: ST_TO_ADDR
// uc_nation := 2 ;
20872: LD_ADDR_OWVAR 21
20876: PUSH
20877: LD_INT 2
20879: ST_TO_ADDR
// hc_name := Dark Warrior ;
20880: LD_ADDR_OWVAR 26
20884: PUSH
20885: LD_STRING Dark Warrior
20887: ST_TO_ADDR
// hc_gallery :=  ;
20888: LD_ADDR_OWVAR 33
20892: PUSH
20893: LD_STRING 
20895: ST_TO_ADDR
// hc_noskilllimit := true ;
20896: LD_ADDR_OWVAR 76
20900: PUSH
20901: LD_INT 1
20903: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
20904: LD_ADDR_OWVAR 31
20908: PUSH
20909: LD_INT 30
20911: PUSH
20912: LD_INT 30
20914: PUSH
20915: LD_INT 30
20917: PUSH
20918: LD_INT 30
20920: PUSH
20921: EMPTY
20922: LIST
20923: LIST
20924: LIST
20925: LIST
20926: ST_TO_ADDR
// un := CreateHuman ;
20927: LD_ADDR_VAR 0 3
20931: PUSH
20932: CALL_OW 44
20936: ST_TO_ADDR
// hc_noskilllimit := false ;
20937: LD_ADDR_OWVAR 76
20941: PUSH
20942: LD_INT 0
20944: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
20945: LD_VAR 0 3
20949: PPUSH
20950: LD_INT 1
20952: PPUSH
20953: CALL_OW 51
// ToLua ( playRanger() ) ;
20957: LD_STRING playRanger()
20959: PPUSH
20960: CALL_OW 559
// p := 0 ;
20964: LD_ADDR_VAR 0 2
20968: PUSH
20969: LD_INT 0
20971: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
20972: LD_INT 35
20974: PPUSH
20975: CALL_OW 67
// p := p + 1 ;
20979: LD_ADDR_VAR 0 2
20983: PUSH
20984: LD_VAR 0 2
20988: PUSH
20989: LD_INT 1
20991: PLUS
20992: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
20993: LD_VAR 0 3
20997: PPUSH
20998: CALL_OW 256
21002: PUSH
21003: LD_INT 1000
21005: LESS
21006: IFFALSE 21020
// SetLives ( un , 1000 ) ;
21008: LD_VAR 0 3
21012: PPUSH
21013: LD_INT 1000
21015: PPUSH
21016: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
21020: LD_VAR 0 3
21024: PPUSH
21025: LD_INT 81
21027: PUSH
21028: LD_OWVAR 2
21032: PUSH
21033: EMPTY
21034: LIST
21035: LIST
21036: PUSH
21037: LD_INT 91
21039: PUSH
21040: LD_VAR 0 3
21044: PUSH
21045: LD_INT 30
21047: PUSH
21048: EMPTY
21049: LIST
21050: LIST
21051: LIST
21052: PUSH
21053: EMPTY
21054: LIST
21055: LIST
21056: PPUSH
21057: CALL_OW 69
21061: PPUSH
21062: LD_VAR 0 3
21066: PPUSH
21067: CALL_OW 74
21071: PPUSH
21072: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
21076: LD_VAR 0 2
21080: PUSH
21081: LD_INT 80
21083: GREATER
21084: PUSH
21085: LD_VAR 0 3
21089: PPUSH
21090: CALL_OW 301
21094: OR
21095: IFFALSE 20972
// if un then
21097: LD_VAR 0 3
21101: IFFALSE 21112
// RemoveUnit ( un ) ;
21103: LD_VAR 0 3
21107: PPUSH
21108: CALL_OW 64
// end ;
21112: PPOPN 3
21114: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
21115: LD_EXP 86
21119: IFFALSE 21235
21121: GO 21123
21123: DISABLE
21124: LD_INT 0
21126: PPUSH
21127: PPUSH
21128: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
21129: LD_ADDR_VAR 0 2
21133: PUSH
21134: LD_INT 81
21136: PUSH
21137: LD_OWVAR 2
21141: PUSH
21142: EMPTY
21143: LIST
21144: LIST
21145: PUSH
21146: LD_INT 21
21148: PUSH
21149: LD_INT 1
21151: PUSH
21152: EMPTY
21153: LIST
21154: LIST
21155: PUSH
21156: EMPTY
21157: LIST
21158: LIST
21159: PPUSH
21160: CALL_OW 69
21164: ST_TO_ADDR
// ToLua ( playComputer() ) ;
21165: LD_STRING playComputer()
21167: PPUSH
21168: CALL_OW 559
// if not tmp then
21172: LD_VAR 0 2
21176: NOT
21177: IFFALSE 21181
// exit ;
21179: GO 21235
// for i in tmp do
21181: LD_ADDR_VAR 0 1
21185: PUSH
21186: LD_VAR 0 2
21190: PUSH
21191: FOR_IN
21192: IFFALSE 21233
// for j := 1 to 4 do
21194: LD_ADDR_VAR 0 3
21198: PUSH
21199: DOUBLE
21200: LD_INT 1
21202: DEC
21203: ST_TO_ADDR
21204: LD_INT 4
21206: PUSH
21207: FOR_TO
21208: IFFALSE 21229
// SetSkill ( i , j , 10 ) ;
21210: LD_VAR 0 1
21214: PPUSH
21215: LD_VAR 0 3
21219: PPUSH
21220: LD_INT 10
21222: PPUSH
21223: CALL_OW 237
21227: GO 21207
21229: POP
21230: POP
21231: GO 21191
21233: POP
21234: POP
// end ;
21235: PPOPN 3
21237: END
// every 0 0$1 trigger s30 do var i , tmp ;
21238: LD_EXP 87
21242: IFFALSE 21311
21244: GO 21246
21246: DISABLE
21247: LD_INT 0
21249: PPUSH
21250: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
21251: LD_ADDR_VAR 0 2
21255: PUSH
21256: LD_INT 22
21258: PUSH
21259: LD_OWVAR 2
21263: PUSH
21264: EMPTY
21265: LIST
21266: LIST
21267: PPUSH
21268: CALL_OW 69
21272: ST_TO_ADDR
// if not tmp then
21273: LD_VAR 0 2
21277: NOT
21278: IFFALSE 21282
// exit ;
21280: GO 21311
// for i in tmp do
21282: LD_ADDR_VAR 0 1
21286: PUSH
21287: LD_VAR 0 2
21291: PUSH
21292: FOR_IN
21293: IFFALSE 21309
// SetLives ( i , 300 ) ;
21295: LD_VAR 0 1
21299: PPUSH
21300: LD_INT 300
21302: PPUSH
21303: CALL_OW 234
21307: GO 21292
21309: POP
21310: POP
// end ;
21311: PPOPN 2
21313: END
// every 0 0$1 trigger s60 do var i , tmp ;
21314: LD_EXP 88
21318: IFFALSE 21387
21320: GO 21322
21322: DISABLE
21323: LD_INT 0
21325: PPUSH
21326: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
21327: LD_ADDR_VAR 0 2
21331: PUSH
21332: LD_INT 22
21334: PUSH
21335: LD_OWVAR 2
21339: PUSH
21340: EMPTY
21341: LIST
21342: LIST
21343: PPUSH
21344: CALL_OW 69
21348: ST_TO_ADDR
// if not tmp then
21349: LD_VAR 0 2
21353: NOT
21354: IFFALSE 21358
// exit ;
21356: GO 21387
// for i in tmp do
21358: LD_ADDR_VAR 0 1
21362: PUSH
21363: LD_VAR 0 2
21367: PUSH
21368: FOR_IN
21369: IFFALSE 21385
// SetLives ( i , 600 ) ;
21371: LD_VAR 0 1
21375: PPUSH
21376: LD_INT 600
21378: PPUSH
21379: CALL_OW 234
21383: GO 21368
21385: POP
21386: POP
// end ;
21387: PPOPN 2
21389: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
21390: LD_INT 0
21392: PPUSH
// case cmd of 301 :
21393: LD_VAR 0 1
21397: PUSH
21398: LD_INT 301
21400: DOUBLE
21401: EQUAL
21402: IFTRUE 21406
21404: GO 21438
21406: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
21407: LD_VAR 0 6
21411: PPUSH
21412: LD_VAR 0 7
21416: PPUSH
21417: LD_VAR 0 8
21421: PPUSH
21422: LD_VAR 0 4
21426: PPUSH
21427: LD_VAR 0 5
21431: PPUSH
21432: CALL 22647 0 5
21436: GO 21559
21438: LD_INT 302
21440: DOUBLE
21441: EQUAL
21442: IFTRUE 21446
21444: GO 21483
21446: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
21447: LD_VAR 0 6
21451: PPUSH
21452: LD_VAR 0 7
21456: PPUSH
21457: LD_VAR 0 8
21461: PPUSH
21462: LD_VAR 0 9
21466: PPUSH
21467: LD_VAR 0 4
21471: PPUSH
21472: LD_VAR 0 5
21476: PPUSH
21477: CALL 22738 0 6
21481: GO 21559
21483: LD_INT 303
21485: DOUBLE
21486: EQUAL
21487: IFTRUE 21491
21489: GO 21528
21491: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
21492: LD_VAR 0 6
21496: PPUSH
21497: LD_VAR 0 7
21501: PPUSH
21502: LD_VAR 0 8
21506: PPUSH
21507: LD_VAR 0 9
21511: PPUSH
21512: LD_VAR 0 4
21516: PPUSH
21517: LD_VAR 0 5
21521: PPUSH
21522: CALL 21564 0 6
21526: GO 21559
21528: LD_INT 304
21530: DOUBLE
21531: EQUAL
21532: IFTRUE 21536
21534: GO 21558
21536: POP
// hHackTeleport ( unit , x , y ) ; end ;
21537: LD_VAR 0 2
21541: PPUSH
21542: LD_VAR 0 4
21546: PPUSH
21547: LD_VAR 0 5
21551: PPUSH
21552: CALL 23331 0 3
21556: GO 21559
21558: POP
// end ;
21559: LD_VAR 0 12
21563: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
21564: LD_INT 0
21566: PPUSH
21567: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
21568: LD_VAR 0 1
21572: PUSH
21573: LD_INT 1
21575: LESS
21576: PUSH
21577: LD_VAR 0 1
21581: PUSH
21582: LD_INT 3
21584: GREATER
21585: OR
21586: PUSH
21587: LD_VAR 0 5
21591: PPUSH
21592: LD_VAR 0 6
21596: PPUSH
21597: CALL_OW 428
21601: OR
21602: IFFALSE 21606
// exit ;
21604: GO 22334
// uc_side := your_side ;
21606: LD_ADDR_OWVAR 20
21610: PUSH
21611: LD_OWVAR 2
21615: ST_TO_ADDR
// uc_nation := nation ;
21616: LD_ADDR_OWVAR 21
21620: PUSH
21621: LD_VAR 0 1
21625: ST_TO_ADDR
// bc_level = 1 ;
21626: LD_ADDR_OWVAR 43
21630: PUSH
21631: LD_INT 1
21633: ST_TO_ADDR
// case btype of 1 :
21634: LD_VAR 0 2
21638: PUSH
21639: LD_INT 1
21641: DOUBLE
21642: EQUAL
21643: IFTRUE 21647
21645: GO 21658
21647: POP
// bc_type := b_depot ; 2 :
21648: LD_ADDR_OWVAR 42
21652: PUSH
21653: LD_INT 0
21655: ST_TO_ADDR
21656: GO 22278
21658: LD_INT 2
21660: DOUBLE
21661: EQUAL
21662: IFTRUE 21666
21664: GO 21677
21666: POP
// bc_type := b_warehouse ; 3 :
21667: LD_ADDR_OWVAR 42
21671: PUSH
21672: LD_INT 1
21674: ST_TO_ADDR
21675: GO 22278
21677: LD_INT 3
21679: DOUBLE
21680: EQUAL
21681: IFTRUE 21685
21683: GO 21696
21685: POP
// bc_type := b_lab ; 4 .. 9 :
21686: LD_ADDR_OWVAR 42
21690: PUSH
21691: LD_INT 6
21693: ST_TO_ADDR
21694: GO 22278
21696: LD_INT 4
21698: DOUBLE
21699: GREATEREQUAL
21700: IFFALSE 21708
21702: LD_INT 9
21704: DOUBLE
21705: LESSEQUAL
21706: IFTRUE 21710
21708: GO 21770
21710: POP
// begin bc_type := b_lab_half ;
21711: LD_ADDR_OWVAR 42
21715: PUSH
21716: LD_INT 7
21718: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
21719: LD_ADDR_OWVAR 44
21723: PUSH
21724: LD_INT 10
21726: PUSH
21727: LD_INT 11
21729: PUSH
21730: LD_INT 12
21732: PUSH
21733: LD_INT 15
21735: PUSH
21736: LD_INT 14
21738: PUSH
21739: LD_INT 13
21741: PUSH
21742: EMPTY
21743: LIST
21744: LIST
21745: LIST
21746: LIST
21747: LIST
21748: LIST
21749: PUSH
21750: LD_VAR 0 2
21754: PUSH
21755: LD_INT 3
21757: MINUS
21758: ARRAY
21759: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
21760: LD_ADDR_OWVAR 45
21764: PUSH
21765: LD_INT 9
21767: ST_TO_ADDR
// end ; 10 .. 13 :
21768: GO 22278
21770: LD_INT 10
21772: DOUBLE
21773: GREATEREQUAL
21774: IFFALSE 21782
21776: LD_INT 13
21778: DOUBLE
21779: LESSEQUAL
21780: IFTRUE 21784
21782: GO 21861
21784: POP
// begin bc_type := b_lab_full ;
21785: LD_ADDR_OWVAR 42
21789: PUSH
21790: LD_INT 8
21792: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
21793: LD_ADDR_OWVAR 44
21797: PUSH
21798: LD_INT 10
21800: PUSH
21801: LD_INT 12
21803: PUSH
21804: LD_INT 14
21806: PUSH
21807: LD_INT 13
21809: PUSH
21810: EMPTY
21811: LIST
21812: LIST
21813: LIST
21814: LIST
21815: PUSH
21816: LD_VAR 0 2
21820: PUSH
21821: LD_INT 9
21823: MINUS
21824: ARRAY
21825: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
21826: LD_ADDR_OWVAR 45
21830: PUSH
21831: LD_INT 11
21833: PUSH
21834: LD_INT 15
21836: PUSH
21837: LD_INT 12
21839: PUSH
21840: LD_INT 15
21842: PUSH
21843: EMPTY
21844: LIST
21845: LIST
21846: LIST
21847: LIST
21848: PUSH
21849: LD_VAR 0 2
21853: PUSH
21854: LD_INT 9
21856: MINUS
21857: ARRAY
21858: ST_TO_ADDR
// end ; 14 :
21859: GO 22278
21861: LD_INT 14
21863: DOUBLE
21864: EQUAL
21865: IFTRUE 21869
21867: GO 21880
21869: POP
// bc_type := b_workshop ; 15 :
21870: LD_ADDR_OWVAR 42
21874: PUSH
21875: LD_INT 2
21877: ST_TO_ADDR
21878: GO 22278
21880: LD_INT 15
21882: DOUBLE
21883: EQUAL
21884: IFTRUE 21888
21886: GO 21899
21888: POP
// bc_type := b_factory ; 16 :
21889: LD_ADDR_OWVAR 42
21893: PUSH
21894: LD_INT 3
21896: ST_TO_ADDR
21897: GO 22278
21899: LD_INT 16
21901: DOUBLE
21902: EQUAL
21903: IFTRUE 21907
21905: GO 21918
21907: POP
// bc_type := b_ext_gun ; 17 :
21908: LD_ADDR_OWVAR 42
21912: PUSH
21913: LD_INT 17
21915: ST_TO_ADDR
21916: GO 22278
21918: LD_INT 17
21920: DOUBLE
21921: EQUAL
21922: IFTRUE 21926
21924: GO 21954
21926: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
21927: LD_ADDR_OWVAR 42
21931: PUSH
21932: LD_INT 19
21934: PUSH
21935: LD_INT 23
21937: PUSH
21938: LD_INT 19
21940: PUSH
21941: EMPTY
21942: LIST
21943: LIST
21944: LIST
21945: PUSH
21946: LD_VAR 0 1
21950: ARRAY
21951: ST_TO_ADDR
21952: GO 22278
21954: LD_INT 18
21956: DOUBLE
21957: EQUAL
21958: IFTRUE 21962
21960: GO 21973
21962: POP
// bc_type := b_ext_radar ; 19 :
21963: LD_ADDR_OWVAR 42
21967: PUSH
21968: LD_INT 20
21970: ST_TO_ADDR
21971: GO 22278
21973: LD_INT 19
21975: DOUBLE
21976: EQUAL
21977: IFTRUE 21981
21979: GO 21992
21981: POP
// bc_type := b_ext_radio ; 20 :
21982: LD_ADDR_OWVAR 42
21986: PUSH
21987: LD_INT 22
21989: ST_TO_ADDR
21990: GO 22278
21992: LD_INT 20
21994: DOUBLE
21995: EQUAL
21996: IFTRUE 22000
21998: GO 22011
22000: POP
// bc_type := b_ext_siberium ; 21 :
22001: LD_ADDR_OWVAR 42
22005: PUSH
22006: LD_INT 21
22008: ST_TO_ADDR
22009: GO 22278
22011: LD_INT 21
22013: DOUBLE
22014: EQUAL
22015: IFTRUE 22019
22017: GO 22030
22019: POP
// bc_type := b_ext_computer ; 22 :
22020: LD_ADDR_OWVAR 42
22024: PUSH
22025: LD_INT 24
22027: ST_TO_ADDR
22028: GO 22278
22030: LD_INT 22
22032: DOUBLE
22033: EQUAL
22034: IFTRUE 22038
22036: GO 22049
22038: POP
// bc_type := b_ext_track ; 23 :
22039: LD_ADDR_OWVAR 42
22043: PUSH
22044: LD_INT 16
22046: ST_TO_ADDR
22047: GO 22278
22049: LD_INT 23
22051: DOUBLE
22052: EQUAL
22053: IFTRUE 22057
22055: GO 22068
22057: POP
// bc_type := b_ext_laser ; 24 :
22058: LD_ADDR_OWVAR 42
22062: PUSH
22063: LD_INT 25
22065: ST_TO_ADDR
22066: GO 22278
22068: LD_INT 24
22070: DOUBLE
22071: EQUAL
22072: IFTRUE 22076
22074: GO 22087
22076: POP
// bc_type := b_control_tower ; 25 :
22077: LD_ADDR_OWVAR 42
22081: PUSH
22082: LD_INT 36
22084: ST_TO_ADDR
22085: GO 22278
22087: LD_INT 25
22089: DOUBLE
22090: EQUAL
22091: IFTRUE 22095
22093: GO 22106
22095: POP
// bc_type := b_breastwork ; 26 :
22096: LD_ADDR_OWVAR 42
22100: PUSH
22101: LD_INT 31
22103: ST_TO_ADDR
22104: GO 22278
22106: LD_INT 26
22108: DOUBLE
22109: EQUAL
22110: IFTRUE 22114
22112: GO 22125
22114: POP
// bc_type := b_bunker ; 27 :
22115: LD_ADDR_OWVAR 42
22119: PUSH
22120: LD_INT 32
22122: ST_TO_ADDR
22123: GO 22278
22125: LD_INT 27
22127: DOUBLE
22128: EQUAL
22129: IFTRUE 22133
22131: GO 22144
22133: POP
// bc_type := b_turret ; 28 :
22134: LD_ADDR_OWVAR 42
22138: PUSH
22139: LD_INT 33
22141: ST_TO_ADDR
22142: GO 22278
22144: LD_INT 28
22146: DOUBLE
22147: EQUAL
22148: IFTRUE 22152
22150: GO 22163
22152: POP
// bc_type := b_armoury ; 29 :
22153: LD_ADDR_OWVAR 42
22157: PUSH
22158: LD_INT 4
22160: ST_TO_ADDR
22161: GO 22278
22163: LD_INT 29
22165: DOUBLE
22166: EQUAL
22167: IFTRUE 22171
22169: GO 22182
22171: POP
// bc_type := b_barracks ; 30 :
22172: LD_ADDR_OWVAR 42
22176: PUSH
22177: LD_INT 5
22179: ST_TO_ADDR
22180: GO 22278
22182: LD_INT 30
22184: DOUBLE
22185: EQUAL
22186: IFTRUE 22190
22188: GO 22201
22190: POP
// bc_type := b_solar_power ; 31 :
22191: LD_ADDR_OWVAR 42
22195: PUSH
22196: LD_INT 27
22198: ST_TO_ADDR
22199: GO 22278
22201: LD_INT 31
22203: DOUBLE
22204: EQUAL
22205: IFTRUE 22209
22207: GO 22220
22209: POP
// bc_type := b_oil_power ; 32 :
22210: LD_ADDR_OWVAR 42
22214: PUSH
22215: LD_INT 26
22217: ST_TO_ADDR
22218: GO 22278
22220: LD_INT 32
22222: DOUBLE
22223: EQUAL
22224: IFTRUE 22228
22226: GO 22239
22228: POP
// bc_type := b_siberite_power ; 33 :
22229: LD_ADDR_OWVAR 42
22233: PUSH
22234: LD_INT 28
22236: ST_TO_ADDR
22237: GO 22278
22239: LD_INT 33
22241: DOUBLE
22242: EQUAL
22243: IFTRUE 22247
22245: GO 22258
22247: POP
// bc_type := b_oil_mine ; 34 :
22248: LD_ADDR_OWVAR 42
22252: PUSH
22253: LD_INT 29
22255: ST_TO_ADDR
22256: GO 22278
22258: LD_INT 34
22260: DOUBLE
22261: EQUAL
22262: IFTRUE 22266
22264: GO 22277
22266: POP
// bc_type := b_siberite_mine ; end ;
22267: LD_ADDR_OWVAR 42
22271: PUSH
22272: LD_INT 30
22274: ST_TO_ADDR
22275: GO 22278
22277: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
22278: LD_ADDR_VAR 0 8
22282: PUSH
22283: LD_VAR 0 5
22287: PPUSH
22288: LD_VAR 0 6
22292: PPUSH
22293: LD_VAR 0 3
22297: PPUSH
22298: CALL_OW 47
22302: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
22303: LD_OWVAR 42
22307: PUSH
22308: LD_INT 32
22310: PUSH
22311: LD_INT 33
22313: PUSH
22314: EMPTY
22315: LIST
22316: LIST
22317: IN
22318: IFFALSE 22334
// PlaceWeaponTurret ( b , weapon ) ;
22320: LD_VAR 0 8
22324: PPUSH
22325: LD_VAR 0 4
22329: PPUSH
22330: CALL_OW 431
// end ;
22334: LD_VAR 0 7
22338: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
22339: LD_INT 0
22341: PPUSH
22342: PPUSH
22343: PPUSH
22344: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
22345: LD_ADDR_VAR 0 4
22349: PUSH
22350: LD_INT 22
22352: PUSH
22353: LD_OWVAR 2
22357: PUSH
22358: EMPTY
22359: LIST
22360: LIST
22361: PUSH
22362: LD_INT 2
22364: PUSH
22365: LD_INT 30
22367: PUSH
22368: LD_INT 0
22370: PUSH
22371: EMPTY
22372: LIST
22373: LIST
22374: PUSH
22375: LD_INT 30
22377: PUSH
22378: LD_INT 1
22380: PUSH
22381: EMPTY
22382: LIST
22383: LIST
22384: PUSH
22385: EMPTY
22386: LIST
22387: LIST
22388: LIST
22389: PUSH
22390: EMPTY
22391: LIST
22392: LIST
22393: PPUSH
22394: CALL_OW 69
22398: ST_TO_ADDR
// if not tmp then
22399: LD_VAR 0 4
22403: NOT
22404: IFFALSE 22408
// exit ;
22406: GO 22467
// for i in tmp do
22408: LD_ADDR_VAR 0 2
22412: PUSH
22413: LD_VAR 0 4
22417: PUSH
22418: FOR_IN
22419: IFFALSE 22465
// for j = 1 to 3 do
22421: LD_ADDR_VAR 0 3
22425: PUSH
22426: DOUBLE
22427: LD_INT 1
22429: DEC
22430: ST_TO_ADDR
22431: LD_INT 3
22433: PUSH
22434: FOR_TO
22435: IFFALSE 22461
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
22437: LD_VAR 0 2
22441: PPUSH
22442: CALL_OW 274
22446: PPUSH
22447: LD_VAR 0 3
22451: PPUSH
22452: LD_INT 99999
22454: PPUSH
22455: CALL_OW 277
22459: GO 22434
22461: POP
22462: POP
22463: GO 22418
22465: POP
22466: POP
// end ;
22467: LD_VAR 0 1
22471: RET
// export function hHackSetLevel10 ; var i , j ; begin
22472: LD_INT 0
22474: PPUSH
22475: PPUSH
22476: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
22477: LD_ADDR_VAR 0 2
22481: PUSH
22482: LD_INT 21
22484: PUSH
22485: LD_INT 1
22487: PUSH
22488: EMPTY
22489: LIST
22490: LIST
22491: PPUSH
22492: CALL_OW 69
22496: PUSH
22497: FOR_IN
22498: IFFALSE 22550
// if IsSelected ( i ) then
22500: LD_VAR 0 2
22504: PPUSH
22505: CALL_OW 306
22509: IFFALSE 22548
// begin for j := 1 to 4 do
22511: LD_ADDR_VAR 0 3
22515: PUSH
22516: DOUBLE
22517: LD_INT 1
22519: DEC
22520: ST_TO_ADDR
22521: LD_INT 4
22523: PUSH
22524: FOR_TO
22525: IFFALSE 22546
// SetSkill ( i , j , 10 ) ;
22527: LD_VAR 0 2
22531: PPUSH
22532: LD_VAR 0 3
22536: PPUSH
22537: LD_INT 10
22539: PPUSH
22540: CALL_OW 237
22544: GO 22524
22546: POP
22547: POP
// end ;
22548: GO 22497
22550: POP
22551: POP
// end ;
22552: LD_VAR 0 1
22556: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
22557: LD_INT 0
22559: PPUSH
22560: PPUSH
22561: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
22562: LD_ADDR_VAR 0 2
22566: PUSH
22567: LD_INT 22
22569: PUSH
22570: LD_OWVAR 2
22574: PUSH
22575: EMPTY
22576: LIST
22577: LIST
22578: PUSH
22579: LD_INT 21
22581: PUSH
22582: LD_INT 1
22584: PUSH
22585: EMPTY
22586: LIST
22587: LIST
22588: PUSH
22589: EMPTY
22590: LIST
22591: LIST
22592: PPUSH
22593: CALL_OW 69
22597: PUSH
22598: FOR_IN
22599: IFFALSE 22640
// begin for j := 1 to 4 do
22601: LD_ADDR_VAR 0 3
22605: PUSH
22606: DOUBLE
22607: LD_INT 1
22609: DEC
22610: ST_TO_ADDR
22611: LD_INT 4
22613: PUSH
22614: FOR_TO
22615: IFFALSE 22636
// SetSkill ( i , j , 10 ) ;
22617: LD_VAR 0 2
22621: PPUSH
22622: LD_VAR 0 3
22626: PPUSH
22627: LD_INT 10
22629: PPUSH
22630: CALL_OW 237
22634: GO 22614
22636: POP
22637: POP
// end ;
22638: GO 22598
22640: POP
22641: POP
// end ;
22642: LD_VAR 0 1
22646: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
22647: LD_INT 0
22649: PPUSH
// uc_side := your_side ;
22650: LD_ADDR_OWVAR 20
22654: PUSH
22655: LD_OWVAR 2
22659: ST_TO_ADDR
// uc_nation := nation ;
22660: LD_ADDR_OWVAR 21
22664: PUSH
22665: LD_VAR 0 1
22669: ST_TO_ADDR
// InitHc ;
22670: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
22674: LD_INT 0
22676: PPUSH
22677: LD_VAR 0 2
22681: PPUSH
22682: LD_VAR 0 3
22686: PPUSH
22687: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
22691: LD_VAR 0 4
22695: PPUSH
22696: LD_VAR 0 5
22700: PPUSH
22701: CALL_OW 428
22705: PUSH
22706: LD_INT 0
22708: EQUAL
22709: IFFALSE 22733
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
22711: CALL_OW 44
22715: PPUSH
22716: LD_VAR 0 4
22720: PPUSH
22721: LD_VAR 0 5
22725: PPUSH
22726: LD_INT 1
22728: PPUSH
22729: CALL_OW 48
// end ;
22733: LD_VAR 0 6
22737: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
22738: LD_INT 0
22740: PPUSH
22741: PPUSH
// uc_side := your_side ;
22742: LD_ADDR_OWVAR 20
22746: PUSH
22747: LD_OWVAR 2
22751: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
22752: LD_VAR 0 1
22756: PUSH
22757: LD_INT 1
22759: PUSH
22760: LD_INT 2
22762: PUSH
22763: LD_INT 3
22765: PUSH
22766: LD_INT 4
22768: PUSH
22769: LD_INT 5
22771: PUSH
22772: EMPTY
22773: LIST
22774: LIST
22775: LIST
22776: LIST
22777: LIST
22778: IN
22779: IFFALSE 22791
// uc_nation := nation_american else
22781: LD_ADDR_OWVAR 21
22785: PUSH
22786: LD_INT 1
22788: ST_TO_ADDR
22789: GO 22834
// if chassis in [ 11 , 12 , 13 , 14 ] then
22791: LD_VAR 0 1
22795: PUSH
22796: LD_INT 11
22798: PUSH
22799: LD_INT 12
22801: PUSH
22802: LD_INT 13
22804: PUSH
22805: LD_INT 14
22807: PUSH
22808: EMPTY
22809: LIST
22810: LIST
22811: LIST
22812: LIST
22813: IN
22814: IFFALSE 22826
// uc_nation := nation_arabian else
22816: LD_ADDR_OWVAR 21
22820: PUSH
22821: LD_INT 2
22823: ST_TO_ADDR
22824: GO 22834
// uc_nation := nation_russian ;
22826: LD_ADDR_OWVAR 21
22830: PUSH
22831: LD_INT 3
22833: ST_TO_ADDR
// vc_chassis := chassis ;
22834: LD_ADDR_OWVAR 37
22838: PUSH
22839: LD_VAR 0 1
22843: ST_TO_ADDR
// vc_engine := engine ;
22844: LD_ADDR_OWVAR 39
22848: PUSH
22849: LD_VAR 0 2
22853: ST_TO_ADDR
// vc_control := control ;
22854: LD_ADDR_OWVAR 38
22858: PUSH
22859: LD_VAR 0 3
22863: ST_TO_ADDR
// vc_weapon := weapon ;
22864: LD_ADDR_OWVAR 40
22868: PUSH
22869: LD_VAR 0 4
22873: ST_TO_ADDR
// un := CreateVehicle ;
22874: LD_ADDR_VAR 0 8
22878: PUSH
22879: CALL_OW 45
22883: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
22884: LD_VAR 0 8
22888: PPUSH
22889: LD_INT 0
22891: PPUSH
22892: LD_INT 5
22894: PPUSH
22895: CALL_OW 12
22899: PPUSH
22900: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
22904: LD_VAR 0 8
22908: PPUSH
22909: LD_VAR 0 5
22913: PPUSH
22914: LD_VAR 0 6
22918: PPUSH
22919: LD_INT 1
22921: PPUSH
22922: CALL_OW 48
// end ;
22926: LD_VAR 0 7
22930: RET
// export hInvincible ; every 1 do
22931: GO 22933
22933: DISABLE
// hInvincible := [ ] ;
22934: LD_ADDR_EXP 89
22938: PUSH
22939: EMPTY
22940: ST_TO_ADDR
22941: END
// every 10 do var i ;
22942: GO 22944
22944: DISABLE
22945: LD_INT 0
22947: PPUSH
// begin enable ;
22948: ENABLE
// if not hInvincible then
22949: LD_EXP 89
22953: NOT
22954: IFFALSE 22958
// exit ;
22956: GO 23002
// for i in hInvincible do
22958: LD_ADDR_VAR 0 1
22962: PUSH
22963: LD_EXP 89
22967: PUSH
22968: FOR_IN
22969: IFFALSE 23000
// if GetLives ( i ) < 1000 then
22971: LD_VAR 0 1
22975: PPUSH
22976: CALL_OW 256
22980: PUSH
22981: LD_INT 1000
22983: LESS
22984: IFFALSE 22998
// SetLives ( i , 1000 ) ;
22986: LD_VAR 0 1
22990: PPUSH
22991: LD_INT 1000
22993: PPUSH
22994: CALL_OW 234
22998: GO 22968
23000: POP
23001: POP
// end ;
23002: PPOPN 1
23004: END
// export function hHackInvincible ; var i ; begin
23005: LD_INT 0
23007: PPUSH
23008: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
23009: LD_ADDR_VAR 0 2
23013: PUSH
23014: LD_INT 2
23016: PUSH
23017: LD_INT 21
23019: PUSH
23020: LD_INT 1
23022: PUSH
23023: EMPTY
23024: LIST
23025: LIST
23026: PUSH
23027: LD_INT 21
23029: PUSH
23030: LD_INT 2
23032: PUSH
23033: EMPTY
23034: LIST
23035: LIST
23036: PUSH
23037: EMPTY
23038: LIST
23039: LIST
23040: LIST
23041: PPUSH
23042: CALL_OW 69
23046: PUSH
23047: FOR_IN
23048: IFFALSE 23109
// if IsSelected ( i ) then
23050: LD_VAR 0 2
23054: PPUSH
23055: CALL_OW 306
23059: IFFALSE 23107
// begin if i in hInvincible then
23061: LD_VAR 0 2
23065: PUSH
23066: LD_EXP 89
23070: IN
23071: IFFALSE 23091
// hInvincible := hInvincible diff i else
23073: LD_ADDR_EXP 89
23077: PUSH
23078: LD_EXP 89
23082: PUSH
23083: LD_VAR 0 2
23087: DIFF
23088: ST_TO_ADDR
23089: GO 23107
// hInvincible := hInvincible union i ;
23091: LD_ADDR_EXP 89
23095: PUSH
23096: LD_EXP 89
23100: PUSH
23101: LD_VAR 0 2
23105: UNION
23106: ST_TO_ADDR
// end ;
23107: GO 23047
23109: POP
23110: POP
// end ;
23111: LD_VAR 0 1
23115: RET
// export function hHackInvisible ; var i , j ; begin
23116: LD_INT 0
23118: PPUSH
23119: PPUSH
23120: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
23121: LD_ADDR_VAR 0 2
23125: PUSH
23126: LD_INT 21
23128: PUSH
23129: LD_INT 1
23131: PUSH
23132: EMPTY
23133: LIST
23134: LIST
23135: PPUSH
23136: CALL_OW 69
23140: PUSH
23141: FOR_IN
23142: IFFALSE 23166
// if IsSelected ( i ) then
23144: LD_VAR 0 2
23148: PPUSH
23149: CALL_OW 306
23153: IFFALSE 23164
// ComForceInvisible ( i ) ;
23155: LD_VAR 0 2
23159: PPUSH
23160: CALL_OW 496
23164: GO 23141
23166: POP
23167: POP
// end ;
23168: LD_VAR 0 1
23172: RET
// export function hHackChangeYourSide ; begin
23173: LD_INT 0
23175: PPUSH
// if your_side = 8 then
23176: LD_OWVAR 2
23180: PUSH
23181: LD_INT 8
23183: EQUAL
23184: IFFALSE 23196
// your_side := 0 else
23186: LD_ADDR_OWVAR 2
23190: PUSH
23191: LD_INT 0
23193: ST_TO_ADDR
23194: GO 23210
// your_side := your_side + 1 ;
23196: LD_ADDR_OWVAR 2
23200: PUSH
23201: LD_OWVAR 2
23205: PUSH
23206: LD_INT 1
23208: PLUS
23209: ST_TO_ADDR
// end ;
23210: LD_VAR 0 1
23214: RET
// export function hHackChangeUnitSide ; var i , j ; begin
23215: LD_INT 0
23217: PPUSH
23218: PPUSH
23219: PPUSH
// for i in all_units do
23220: LD_ADDR_VAR 0 2
23224: PUSH
23225: LD_OWVAR 3
23229: PUSH
23230: FOR_IN
23231: IFFALSE 23309
// if IsSelected ( i ) then
23233: LD_VAR 0 2
23237: PPUSH
23238: CALL_OW 306
23242: IFFALSE 23307
// begin j := GetSide ( i ) ;
23244: LD_ADDR_VAR 0 3
23248: PUSH
23249: LD_VAR 0 2
23253: PPUSH
23254: CALL_OW 255
23258: ST_TO_ADDR
// if j = 8 then
23259: LD_VAR 0 3
23263: PUSH
23264: LD_INT 8
23266: EQUAL
23267: IFFALSE 23279
// j := 0 else
23269: LD_ADDR_VAR 0 3
23273: PUSH
23274: LD_INT 0
23276: ST_TO_ADDR
23277: GO 23293
// j := j + 1 ;
23279: LD_ADDR_VAR 0 3
23283: PUSH
23284: LD_VAR 0 3
23288: PUSH
23289: LD_INT 1
23291: PLUS
23292: ST_TO_ADDR
// SetSide ( i , j ) ;
23293: LD_VAR 0 2
23297: PPUSH
23298: LD_VAR 0 3
23302: PPUSH
23303: CALL_OW 235
// end ;
23307: GO 23230
23309: POP
23310: POP
// end ;
23311: LD_VAR 0 1
23315: RET
// export function hHackFog ; begin
23316: LD_INT 0
23318: PPUSH
// FogOff ( true ) ;
23319: LD_INT 1
23321: PPUSH
23322: CALL_OW 344
// end ;
23326: LD_VAR 0 1
23330: RET
// export function hHackTeleport ( unit , x , y ) ; begin
23331: LD_INT 0
23333: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
23334: LD_VAR 0 1
23338: PPUSH
23339: LD_VAR 0 2
23343: PPUSH
23344: LD_VAR 0 3
23348: PPUSH
23349: LD_INT 1
23351: PPUSH
23352: LD_INT 1
23354: PPUSH
23355: CALL_OW 483
// CenterOnXY ( x , y ) ;
23359: LD_VAR 0 2
23363: PPUSH
23364: LD_VAR 0 3
23368: PPUSH
23369: CALL_OW 84
// end ;
23373: LD_VAR 0 4
23377: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
23378: LD_INT 0
23380: PPUSH
23381: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
23382: LD_VAR 0 1
23386: NOT
23387: PUSH
23388: LD_VAR 0 2
23392: PPUSH
23393: LD_VAR 0 3
23397: PPUSH
23398: CALL_OW 488
23402: NOT
23403: OR
23404: PUSH
23405: LD_VAR 0 1
23409: PPUSH
23410: CALL_OW 266
23414: PUSH
23415: LD_INT 3
23417: NONEQUAL
23418: PUSH
23419: LD_VAR 0 1
23423: PPUSH
23424: CALL_OW 247
23428: PUSH
23429: LD_INT 1
23431: EQUAL
23432: NOT
23433: AND
23434: OR
23435: IFFALSE 23439
// exit ;
23437: GO 23721
// if GetType ( factory ) = unit_human then
23439: LD_VAR 0 1
23443: PPUSH
23444: CALL_OW 247
23448: PUSH
23449: LD_INT 1
23451: EQUAL
23452: IFFALSE 23469
// factory := IsInUnit ( factory ) ;
23454: LD_ADDR_VAR 0 1
23458: PUSH
23459: LD_VAR 0 1
23463: PPUSH
23464: CALL_OW 310
23468: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
23469: LD_VAR 0 1
23473: PPUSH
23474: CALL_OW 266
23478: PUSH
23479: LD_INT 3
23481: NONEQUAL
23482: IFFALSE 23486
// exit ;
23484: GO 23721
// for i := 1 to Count ( factoryWaypoints ) do
23486: LD_ADDR_VAR 0 5
23490: PUSH
23491: DOUBLE
23492: LD_INT 1
23494: DEC
23495: ST_TO_ADDR
23496: LD_EXP 90
23500: PPUSH
23501: CALL 32224 0 1
23505: PUSH
23506: FOR_TO
23507: IFFALSE 23669
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
23509: LD_VAR 0 2
23513: PPUSH
23514: LD_VAR 0 3
23518: PPUSH
23519: CALL_OW 428
23523: PUSH
23524: LD_EXP 90
23528: PUSH
23529: LD_VAR 0 5
23533: ARRAY
23534: PUSH
23535: LD_INT 2
23537: ARRAY
23538: EQUAL
23539: IFFALSE 23571
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
23541: LD_ADDR_EXP 90
23545: PUSH
23546: LD_EXP 90
23550: PPUSH
23551: LD_VAR 0 5
23555: PPUSH
23556: CALL_OW 3
23560: ST_TO_ADDR
// UpdateFactoryWaypoints ;
23561: CALL 23726 0 0
// exit ;
23565: POP
23566: POP
23567: GO 23721
// end else
23569: GO 23667
// if factory = factoryWaypoints [ i ] [ 2 ] then
23571: LD_VAR 0 1
23575: PUSH
23576: LD_EXP 90
23580: PUSH
23581: LD_VAR 0 5
23585: ARRAY
23586: PUSH
23587: LD_INT 2
23589: ARRAY
23590: EQUAL
23591: IFFALSE 23667
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
23593: LD_ADDR_EXP 90
23597: PUSH
23598: LD_EXP 90
23602: PPUSH
23603: LD_VAR 0 5
23607: PPUSH
23608: CALL_OW 3
23612: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
23613: LD_ADDR_EXP 90
23617: PUSH
23618: LD_EXP 90
23622: PPUSH
23623: LD_VAR 0 1
23627: PPUSH
23628: CALL_OW 255
23632: PUSH
23633: LD_VAR 0 1
23637: PUSH
23638: LD_VAR 0 2
23642: PUSH
23643: LD_VAR 0 3
23647: PUSH
23648: EMPTY
23649: LIST
23650: LIST
23651: LIST
23652: LIST
23653: PPUSH
23654: CALL 67833 0 2
23658: ST_TO_ADDR
// UpdateFactoryWaypoints ;
23659: CALL 23726 0 0
// exit ;
23663: POP
23664: POP
23665: GO 23721
// end ; end ;
23667: GO 23506
23669: POP
23670: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
23671: LD_ADDR_EXP 90
23675: PUSH
23676: LD_EXP 90
23680: PPUSH
23681: LD_VAR 0 1
23685: PPUSH
23686: CALL_OW 255
23690: PUSH
23691: LD_VAR 0 1
23695: PUSH
23696: LD_VAR 0 2
23700: PUSH
23701: LD_VAR 0 3
23705: PUSH
23706: EMPTY
23707: LIST
23708: LIST
23709: LIST
23710: LIST
23711: PPUSH
23712: CALL 67833 0 2
23716: ST_TO_ADDR
// UpdateFactoryWaypoints ;
23717: CALL 23726 0 0
// end ;
23721: LD_VAR 0 4
23725: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
23726: LD_INT 0
23728: PPUSH
23729: PPUSH
23730: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
23731: LD_STRING resetFactoryWaypoint();
23733: PPUSH
23734: CALL_OW 559
// if factoryWaypoints then
23738: LD_EXP 90
23742: IFFALSE 23863
// begin list := factoryWaypoints ;
23744: LD_ADDR_VAR 0 3
23748: PUSH
23749: LD_EXP 90
23753: ST_TO_ADDR
// for i := 1 to list do
23754: LD_ADDR_VAR 0 2
23758: PUSH
23759: DOUBLE
23760: LD_INT 1
23762: DEC
23763: ST_TO_ADDR
23764: LD_VAR 0 3
23768: PUSH
23769: FOR_TO
23770: IFFALSE 23861
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
23772: LD_STRING setFactoryWaypointXY(
23774: PUSH
23775: LD_VAR 0 3
23779: PUSH
23780: LD_VAR 0 2
23784: ARRAY
23785: PUSH
23786: LD_INT 1
23788: ARRAY
23789: STR
23790: PUSH
23791: LD_STRING ,
23793: STR
23794: PUSH
23795: LD_VAR 0 3
23799: PUSH
23800: LD_VAR 0 2
23804: ARRAY
23805: PUSH
23806: LD_INT 2
23808: ARRAY
23809: STR
23810: PUSH
23811: LD_STRING ,
23813: STR
23814: PUSH
23815: LD_VAR 0 3
23819: PUSH
23820: LD_VAR 0 2
23824: ARRAY
23825: PUSH
23826: LD_INT 3
23828: ARRAY
23829: STR
23830: PUSH
23831: LD_STRING ,
23833: STR
23834: PUSH
23835: LD_VAR 0 3
23839: PUSH
23840: LD_VAR 0 2
23844: ARRAY
23845: PUSH
23846: LD_INT 4
23848: ARRAY
23849: STR
23850: PUSH
23851: LD_STRING )
23853: STR
23854: PPUSH
23855: CALL_OW 559
23859: GO 23769
23861: POP
23862: POP
// end ; end ;
23863: LD_VAR 0 1
23867: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
23868: LD_INT 0
23870: PPUSH
// if HexInfo ( x , y ) = warehouse then
23871: LD_VAR 0 2
23875: PPUSH
23876: LD_VAR 0 3
23880: PPUSH
23881: CALL_OW 428
23885: PUSH
23886: LD_VAR 0 1
23890: EQUAL
23891: IFFALSE 23918
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
23893: LD_ADDR_EXP 91
23897: PUSH
23898: LD_EXP 91
23902: PPUSH
23903: LD_VAR 0 1
23907: PPUSH
23908: LD_INT 0
23910: PPUSH
23911: CALL_OW 1
23915: ST_TO_ADDR
23916: GO 23969
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
23918: LD_ADDR_EXP 91
23922: PUSH
23923: LD_EXP 91
23927: PPUSH
23928: LD_VAR 0 1
23932: PPUSH
23933: LD_VAR 0 1
23937: PPUSH
23938: CALL_OW 255
23942: PUSH
23943: LD_VAR 0 1
23947: PUSH
23948: LD_VAR 0 2
23952: PUSH
23953: LD_VAR 0 3
23957: PUSH
23958: EMPTY
23959: LIST
23960: LIST
23961: LIST
23962: LIST
23963: PPUSH
23964: CALL_OW 1
23968: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
23969: CALL 23978 0 0
// end ;
23973: LD_VAR 0 4
23977: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
23978: LD_INT 0
23980: PPUSH
23981: PPUSH
23982: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
23983: LD_STRING resetWarehouseGatheringPoints();
23985: PPUSH
23986: CALL_OW 559
// if warehouseGatheringPoints then
23990: LD_EXP 91
23994: IFFALSE 24120
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
23996: LD_ADDR_VAR 0 3
24000: PUSH
24001: LD_EXP 91
24005: PPUSH
24006: CALL 71595 0 1
24010: ST_TO_ADDR
// for i := 1 to list do
24011: LD_ADDR_VAR 0 2
24015: PUSH
24016: DOUBLE
24017: LD_INT 1
24019: DEC
24020: ST_TO_ADDR
24021: LD_VAR 0 3
24025: PUSH
24026: FOR_TO
24027: IFFALSE 24118
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
24029: LD_STRING setWarehouseGatheringPointXY(
24031: PUSH
24032: LD_VAR 0 3
24036: PUSH
24037: LD_VAR 0 2
24041: ARRAY
24042: PUSH
24043: LD_INT 1
24045: ARRAY
24046: STR
24047: PUSH
24048: LD_STRING ,
24050: STR
24051: PUSH
24052: LD_VAR 0 3
24056: PUSH
24057: LD_VAR 0 2
24061: ARRAY
24062: PUSH
24063: LD_INT 2
24065: ARRAY
24066: STR
24067: PUSH
24068: LD_STRING ,
24070: STR
24071: PUSH
24072: LD_VAR 0 3
24076: PUSH
24077: LD_VAR 0 2
24081: ARRAY
24082: PUSH
24083: LD_INT 3
24085: ARRAY
24086: STR
24087: PUSH
24088: LD_STRING ,
24090: STR
24091: PUSH
24092: LD_VAR 0 3
24096: PUSH
24097: LD_VAR 0 2
24101: ARRAY
24102: PUSH
24103: LD_INT 4
24105: ARRAY
24106: STR
24107: PUSH
24108: LD_STRING )
24110: STR
24111: PPUSH
24112: CALL_OW 559
24116: GO 24026
24118: POP
24119: POP
// end ; end ;
24120: LD_VAR 0 1
24124: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
24125: LD_EXP 91
24129: IFFALSE 24814
24131: GO 24133
24133: DISABLE
24134: LD_INT 0
24136: PPUSH
24137: PPUSH
24138: PPUSH
24139: PPUSH
24140: PPUSH
24141: PPUSH
24142: PPUSH
24143: PPUSH
24144: PPUSH
// begin enable ;
24145: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
24146: LD_ADDR_VAR 0 3
24150: PUSH
24151: LD_EXP 91
24155: PPUSH
24156: CALL 71595 0 1
24160: ST_TO_ADDR
// if not list then
24161: LD_VAR 0 3
24165: NOT
24166: IFFALSE 24170
// exit ;
24168: GO 24814
// for i := 1 to list do
24170: LD_ADDR_VAR 0 1
24174: PUSH
24175: DOUBLE
24176: LD_INT 1
24178: DEC
24179: ST_TO_ADDR
24180: LD_VAR 0 3
24184: PUSH
24185: FOR_TO
24186: IFFALSE 24812
// begin depot := list [ i ] [ 2 ] ;
24188: LD_ADDR_VAR 0 8
24192: PUSH
24193: LD_VAR 0 3
24197: PUSH
24198: LD_VAR 0 1
24202: ARRAY
24203: PUSH
24204: LD_INT 2
24206: ARRAY
24207: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
24208: LD_ADDR_VAR 0 5
24212: PUSH
24213: LD_VAR 0 3
24217: PUSH
24218: LD_VAR 0 1
24222: ARRAY
24223: PUSH
24224: LD_INT 1
24226: ARRAY
24227: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
24228: LD_VAR 0 8
24232: PPUSH
24233: CALL_OW 301
24237: PUSH
24238: LD_VAR 0 5
24242: PUSH
24243: LD_VAR 0 8
24247: PPUSH
24248: CALL_OW 255
24252: NONEQUAL
24253: OR
24254: IFFALSE 24283
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
24256: LD_ADDR_EXP 91
24260: PUSH
24261: LD_EXP 91
24265: PPUSH
24266: LD_VAR 0 8
24270: PPUSH
24271: LD_INT 0
24273: PPUSH
24274: CALL_OW 1
24278: ST_TO_ADDR
// exit ;
24279: POP
24280: POP
24281: GO 24814
// end ; x := list [ i ] [ 3 ] ;
24283: LD_ADDR_VAR 0 6
24287: PUSH
24288: LD_VAR 0 3
24292: PUSH
24293: LD_VAR 0 1
24297: ARRAY
24298: PUSH
24299: LD_INT 3
24301: ARRAY
24302: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
24303: LD_ADDR_VAR 0 7
24307: PUSH
24308: LD_VAR 0 3
24312: PUSH
24313: LD_VAR 0 1
24317: ARRAY
24318: PUSH
24319: LD_INT 4
24321: ARRAY
24322: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
24323: LD_ADDR_VAR 0 9
24327: PUSH
24328: LD_VAR 0 6
24332: PPUSH
24333: LD_VAR 0 7
24337: PPUSH
24338: LD_INT 16
24340: PPUSH
24341: CALL 70179 0 3
24345: ST_TO_ADDR
// if not cratesNearbyPoint then
24346: LD_VAR 0 9
24350: NOT
24351: IFFALSE 24357
// exit ;
24353: POP
24354: POP
24355: GO 24814
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
24357: LD_ADDR_VAR 0 4
24361: PUSH
24362: LD_INT 22
24364: PUSH
24365: LD_VAR 0 5
24369: PUSH
24370: EMPTY
24371: LIST
24372: LIST
24373: PUSH
24374: LD_INT 3
24376: PUSH
24377: LD_INT 60
24379: PUSH
24380: EMPTY
24381: LIST
24382: PUSH
24383: EMPTY
24384: LIST
24385: LIST
24386: PUSH
24387: LD_INT 91
24389: PUSH
24390: LD_VAR 0 8
24394: PUSH
24395: LD_INT 6
24397: PUSH
24398: EMPTY
24399: LIST
24400: LIST
24401: LIST
24402: PUSH
24403: LD_INT 2
24405: PUSH
24406: LD_INT 25
24408: PUSH
24409: LD_INT 2
24411: PUSH
24412: EMPTY
24413: LIST
24414: LIST
24415: PUSH
24416: LD_INT 25
24418: PUSH
24419: LD_INT 16
24421: PUSH
24422: EMPTY
24423: LIST
24424: LIST
24425: PUSH
24426: EMPTY
24427: LIST
24428: LIST
24429: LIST
24430: PUSH
24431: EMPTY
24432: LIST
24433: LIST
24434: LIST
24435: LIST
24436: PPUSH
24437: CALL_OW 69
24441: PUSH
24442: LD_VAR 0 8
24446: PPUSH
24447: CALL_OW 313
24451: PPUSH
24452: LD_INT 3
24454: PUSH
24455: LD_INT 60
24457: PUSH
24458: EMPTY
24459: LIST
24460: PUSH
24461: EMPTY
24462: LIST
24463: LIST
24464: PUSH
24465: LD_INT 2
24467: PUSH
24468: LD_INT 25
24470: PUSH
24471: LD_INT 2
24473: PUSH
24474: EMPTY
24475: LIST
24476: LIST
24477: PUSH
24478: LD_INT 25
24480: PUSH
24481: LD_INT 16
24483: PUSH
24484: EMPTY
24485: LIST
24486: LIST
24487: PUSH
24488: EMPTY
24489: LIST
24490: LIST
24491: LIST
24492: PUSH
24493: EMPTY
24494: LIST
24495: LIST
24496: PPUSH
24497: CALL_OW 72
24501: UNION
24502: ST_TO_ADDR
// if tmp then
24503: LD_VAR 0 4
24507: IFFALSE 24587
// begin tmp := ShrinkArray ( tmp , 3 ) ;
24509: LD_ADDR_VAR 0 4
24513: PUSH
24514: LD_VAR 0 4
24518: PPUSH
24519: LD_INT 3
24521: PPUSH
24522: CALL 68148 0 2
24526: ST_TO_ADDR
// for j in tmp do
24527: LD_ADDR_VAR 0 2
24531: PUSH
24532: LD_VAR 0 4
24536: PUSH
24537: FOR_IN
24538: IFFALSE 24581
// begin if IsInUnit ( j ) then
24540: LD_VAR 0 2
24544: PPUSH
24545: CALL_OW 310
24549: IFFALSE 24560
// ComExit ( j ) ;
24551: LD_VAR 0 2
24555: PPUSH
24556: CALL 68231 0 1
// AddComCollect ( j , x , y ) ;
24560: LD_VAR 0 2
24564: PPUSH
24565: LD_VAR 0 6
24569: PPUSH
24570: LD_VAR 0 7
24574: PPUSH
24575: CALL_OW 177
// end ;
24579: GO 24537
24581: POP
24582: POP
// exit ;
24583: POP
24584: POP
24585: GO 24814
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
24587: LD_ADDR_VAR 0 4
24591: PUSH
24592: LD_INT 22
24594: PUSH
24595: LD_VAR 0 5
24599: PUSH
24600: EMPTY
24601: LIST
24602: LIST
24603: PUSH
24604: LD_INT 91
24606: PUSH
24607: LD_VAR 0 8
24611: PUSH
24612: LD_INT 8
24614: PUSH
24615: EMPTY
24616: LIST
24617: LIST
24618: LIST
24619: PUSH
24620: LD_INT 2
24622: PUSH
24623: LD_INT 34
24625: PUSH
24626: LD_INT 12
24628: PUSH
24629: EMPTY
24630: LIST
24631: LIST
24632: PUSH
24633: LD_INT 34
24635: PUSH
24636: LD_INT 51
24638: PUSH
24639: EMPTY
24640: LIST
24641: LIST
24642: PUSH
24643: LD_INT 34
24645: PUSH
24646: LD_INT 32
24648: PUSH
24649: EMPTY
24650: LIST
24651: LIST
24652: PUSH
24653: LD_INT 34
24655: PUSH
24656: LD_INT 89
24658: PUSH
24659: EMPTY
24660: LIST
24661: LIST
24662: PUSH
24663: EMPTY
24664: LIST
24665: LIST
24666: LIST
24667: LIST
24668: LIST
24669: PUSH
24670: EMPTY
24671: LIST
24672: LIST
24673: LIST
24674: PPUSH
24675: CALL_OW 69
24679: ST_TO_ADDR
// if tmp then
24680: LD_VAR 0 4
24684: IFFALSE 24810
// begin for j in tmp do
24686: LD_ADDR_VAR 0 2
24690: PUSH
24691: LD_VAR 0 4
24695: PUSH
24696: FOR_IN
24697: IFFALSE 24808
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
24699: LD_VAR 0 2
24703: PPUSH
24704: CALL_OW 262
24708: PUSH
24709: LD_INT 3
24711: EQUAL
24712: PUSH
24713: LD_VAR 0 2
24717: PPUSH
24718: CALL_OW 261
24722: PUSH
24723: LD_INT 20
24725: GREATER
24726: OR
24727: PUSH
24728: LD_VAR 0 2
24732: PPUSH
24733: CALL_OW 314
24737: NOT
24738: AND
24739: PUSH
24740: LD_VAR 0 2
24744: PPUSH
24745: CALL_OW 263
24749: PUSH
24750: LD_INT 1
24752: NONEQUAL
24753: PUSH
24754: LD_VAR 0 2
24758: PPUSH
24759: CALL_OW 311
24763: OR
24764: AND
24765: IFFALSE 24806
// begin ComCollect ( j , x , y ) ;
24767: LD_VAR 0 2
24771: PPUSH
24772: LD_VAR 0 6
24776: PPUSH
24777: LD_VAR 0 7
24781: PPUSH
24782: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
24786: LD_VAR 0 2
24790: PPUSH
24791: LD_VAR 0 8
24795: PPUSH
24796: CALL_OW 172
// exit ;
24800: POP
24801: POP
24802: POP
24803: POP
24804: GO 24814
// end ;
24806: GO 24696
24808: POP
24809: POP
// end ; end ;
24810: GO 24185
24812: POP
24813: POP
// end ; end_of_file
24814: PPOPN 9
24816: END
// export function SOS_UnitDestroyed ( un ) ; begin
24817: LD_INT 0
24819: PPUSH
// ComRadiation ( un ) ;
24820: LD_VAR 0 1
24824: PPUSH
24825: CALL 25806 0 1
// end ;
24829: LD_VAR 0 2
24833: RET
// export function SOS_UnitKamikazed ( un ) ; begin
24834: LD_INT 0
24836: PPUSH
// ComRadiation ( un ) ;
24837: LD_VAR 0 1
24841: PPUSH
24842: CALL 25806 0 1
// end ;
24846: LD_VAR 0 2
24850: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
24851: LD_INT 0
24853: PPUSH
// end ;
24854: LD_VAR 0 4
24858: RET
// export function SOS_Command ( cmd ) ; begin
24859: LD_INT 0
24861: PPUSH
// end ;
24862: LD_VAR 0 2
24866: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
24867: LD_INT 0
24869: PPUSH
// end ;
24870: LD_VAR 0 6
24874: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , tag , driver , hex ; begin
24875: LD_INT 0
24877: PPUSH
24878: PPUSH
24879: PPUSH
24880: PPUSH
24881: PPUSH
// if not vehicle or not factory then
24882: LD_VAR 0 1
24886: NOT
24887: PUSH
24888: LD_VAR 0 2
24892: NOT
24893: OR
24894: IFFALSE 24898
// exit ;
24896: GO 25397
// if not factoryWaypoints then
24898: LD_EXP 90
24902: NOT
24903: IFFALSE 24907
// exit ;
24905: GO 25397
// for i := 1 to Count ( factoryWaypoints ) do
24907: LD_ADDR_VAR 0 4
24911: PUSH
24912: DOUBLE
24913: LD_INT 1
24915: DEC
24916: ST_TO_ADDR
24917: LD_EXP 90
24921: PPUSH
24922: CALL 32224 0 1
24926: PUSH
24927: FOR_TO
24928: IFFALSE 25395
// if factoryWaypoints [ i ] [ 2 ] = factory then
24930: LD_EXP 90
24934: PUSH
24935: LD_VAR 0 4
24939: ARRAY
24940: PUSH
24941: LD_INT 2
24943: ARRAY
24944: PUSH
24945: LD_VAR 0 2
24949: EQUAL
24950: IFFALSE 25393
// begin if GetControl ( vehicle ) = control_manual then
24952: LD_VAR 0 1
24956: PPUSH
24957: CALL_OW 263
24961: PUSH
24962: LD_INT 1
24964: EQUAL
24965: IFFALSE 25276
// begin driver := IsDrivenBy ( vehicle ) ;
24967: LD_ADDR_VAR 0 6
24971: PUSH
24972: LD_VAR 0 1
24976: PPUSH
24977: CALL_OW 311
24981: ST_TO_ADDR
// tag := GetTag ( driver ) ;
24982: LD_ADDR_VAR 0 5
24986: PUSH
24987: LD_VAR 0 6
24991: PPUSH
24992: CALL_OW 110
24996: ST_TO_ADDR
// if tag = tDriver or GetTag ( vehicle ) = tDriver then
24997: LD_VAR 0 5
25001: PUSH
25002: LD_INT 501
25004: EQUAL
25005: PUSH
25006: LD_VAR 0 1
25010: PPUSH
25011: CALL_OW 110
25015: PUSH
25016: LD_INT 501
25018: EQUAL
25019: OR
25020: IFFALSE 25026
// exit ;
25022: POP
25023: POP
25024: GO 25397
// if not HasTask ( driver ) then
25026: LD_VAR 0 6
25030: PPUSH
25031: CALL_OW 314
25035: NOT
25036: IFFALSE 25274
// begin SetTag ( driver , tDriver ) ;
25038: LD_VAR 0 6
25042: PPUSH
25043: LD_INT 501
25045: PPUSH
25046: CALL_OW 109
// SetTag ( vehicle , tDriver ) ;
25050: LD_VAR 0 1
25054: PPUSH
25055: LD_INT 501
25057: PPUSH
25058: CALL_OW 109
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
25062: LD_ADDR_VAR 0 7
25066: PUSH
25067: LD_EXP 90
25071: PUSH
25072: LD_VAR 0 4
25076: ARRAY
25077: PUSH
25078: LD_INT 3
25080: ARRAY
25081: PPUSH
25082: LD_EXP 90
25086: PUSH
25087: LD_VAR 0 4
25091: ARRAY
25092: PUSH
25093: LD_INT 4
25095: ARRAY
25096: PPUSH
25097: CALL_OW 428
25101: ST_TO_ADDR
// if hex then
25102: LD_VAR 0 7
25106: IFFALSE 25124
// ComMoveUnit ( driver , hex ) else
25108: LD_VAR 0 6
25112: PPUSH
25113: LD_VAR 0 7
25117: PPUSH
25118: CALL_OW 112
25122: GO 25163
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
25124: LD_VAR 0 6
25128: PPUSH
25129: LD_EXP 90
25133: PUSH
25134: LD_VAR 0 4
25138: ARRAY
25139: PUSH
25140: LD_INT 3
25142: ARRAY
25143: PPUSH
25144: LD_EXP 90
25148: PUSH
25149: LD_VAR 0 4
25153: ARRAY
25154: PUSH
25155: LD_INT 4
25157: ARRAY
25158: PPUSH
25159: CALL_OW 111
// AddComExitVehicle ( driver ) ;
25163: LD_VAR 0 6
25167: PPUSH
25168: CALL_OW 181
// if Multiplayer then
25172: LD_OWVAR 4
25176: IFFALSE 25225
// begin repeat wait ( 10 ) ;
25178: LD_INT 10
25180: PPUSH
25181: CALL_OW 67
// until not IsInUnit ( driver ) ;
25185: LD_VAR 0 6
25189: PPUSH
25190: CALL_OW 310
25194: NOT
25195: IFFALSE 25178
// if not HasTask ( driver ) then
25197: LD_VAR 0 6
25201: PPUSH
25202: CALL_OW 314
25206: NOT
25207: IFFALSE 25223
// ComEnterUnit ( driver , factory ) ;
25209: LD_VAR 0 6
25213: PPUSH
25214: LD_VAR 0 2
25218: PPUSH
25219: CALL_OW 120
// end else
25223: GO 25239
// AddComEnterUnit ( driver , factory ) ;
25225: LD_VAR 0 6
25229: PPUSH
25230: LD_VAR 0 2
25234: PPUSH
25235: CALL_OW 180
// wait ( 0 0$1 ) ;
25239: LD_INT 35
25241: PPUSH
25242: CALL_OW 67
// SetTag ( driver , tag ) ;
25246: LD_VAR 0 6
25250: PPUSH
25251: LD_VAR 0 5
25255: PPUSH
25256: CALL_OW 109
// SetTag ( vehicle , 0 ) ;
25260: LD_VAR 0 1
25264: PPUSH
25265: LD_INT 0
25267: PPUSH
25268: CALL_OW 109
// break ;
25272: GO 25395
// end ; end else
25274: GO 25393
// if GetControl ( vehicle ) = control_remote then
25276: LD_VAR 0 1
25280: PPUSH
25281: CALL_OW 263
25285: PUSH
25286: LD_INT 2
25288: EQUAL
25289: IFFALSE 25352
// begin wait ( 0 0$2 ) ;
25291: LD_INT 70
25293: PPUSH
25294: CALL_OW 67
// if Connect ( vehicle ) then
25298: LD_VAR 0 1
25302: PPUSH
25303: CALL 38430 0 1
25307: IFFALSE 25348
// AddComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
25309: LD_VAR 0 1
25313: PPUSH
25314: LD_EXP 90
25318: PUSH
25319: LD_VAR 0 4
25323: ARRAY
25324: PUSH
25325: LD_INT 3
25327: ARRAY
25328: PPUSH
25329: LD_EXP 90
25333: PUSH
25334: LD_VAR 0 4
25338: ARRAY
25339: PUSH
25340: LD_INT 4
25342: ARRAY
25343: PPUSH
25344: CALL_OW 171
// break ;
25348: GO 25395
// end else
25350: GO 25393
// begin AddComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
25352: LD_VAR 0 1
25356: PPUSH
25357: LD_EXP 90
25361: PUSH
25362: LD_VAR 0 4
25366: ARRAY
25367: PUSH
25368: LD_INT 3
25370: ARRAY
25371: PPUSH
25372: LD_EXP 90
25376: PUSH
25377: LD_VAR 0 4
25381: ARRAY
25382: PUSH
25383: LD_INT 4
25385: ARRAY
25386: PPUSH
25387: CALL_OW 171
// break ;
25391: GO 25395
// end ; end ;
25393: GO 24927
25395: POP
25396: POP
// end ;
25397: LD_VAR 0 3
25401: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
25402: LD_INT 0
25404: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
25405: LD_VAR 0 1
25409: PUSH
25410: LD_INT 250
25412: EQUAL
25413: PUSH
25414: LD_VAR 0 2
25418: PPUSH
25419: CALL_OW 264
25423: PUSH
25424: LD_INT 81
25426: EQUAL
25427: AND
25428: IFFALSE 25449
// MinerPlaceMine ( unit , x , y ) ;
25430: LD_VAR 0 2
25434: PPUSH
25435: LD_VAR 0 4
25439: PPUSH
25440: LD_VAR 0 5
25444: PPUSH
25445: CALL 28541 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
25449: LD_VAR 0 1
25453: PUSH
25454: LD_INT 251
25456: EQUAL
25457: PUSH
25458: LD_VAR 0 2
25462: PPUSH
25463: CALL_OW 264
25467: PUSH
25468: LD_INT 81
25470: EQUAL
25471: AND
25472: IFFALSE 25493
// MinerDetonateMine ( unit , x , y ) ;
25474: LD_VAR 0 2
25478: PPUSH
25479: LD_VAR 0 4
25483: PPUSH
25484: LD_VAR 0 5
25488: PPUSH
25489: CALL 28816 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
25493: LD_VAR 0 1
25497: PUSH
25498: LD_INT 252
25500: EQUAL
25501: PUSH
25502: LD_VAR 0 2
25506: PPUSH
25507: CALL_OW 264
25511: PUSH
25512: LD_INT 81
25514: EQUAL
25515: AND
25516: IFFALSE 25537
// MinerCreateMinefield ( unit , x , y ) ;
25518: LD_VAR 0 2
25522: PPUSH
25523: LD_VAR 0 4
25527: PPUSH
25528: LD_VAR 0 5
25532: PPUSH
25533: CALL 29233 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
25537: LD_VAR 0 1
25541: PUSH
25542: LD_INT 253
25544: EQUAL
25545: PUSH
25546: LD_VAR 0 2
25550: PPUSH
25551: CALL_OW 257
25555: PUSH
25556: LD_INT 5
25558: EQUAL
25559: AND
25560: IFFALSE 25581
// ComBinocular ( unit , x , y ) ;
25562: LD_VAR 0 2
25566: PPUSH
25567: LD_VAR 0 4
25571: PPUSH
25572: LD_VAR 0 5
25576: PPUSH
25577: CALL 29602 0 3
// if selectedUnit then
25581: LD_VAR 0 3
25585: IFFALSE 25641
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
25587: LD_VAR 0 1
25591: PUSH
25592: LD_INT 254
25594: EQUAL
25595: PUSH
25596: LD_VAR 0 2
25600: PPUSH
25601: CALL_OW 264
25605: PUSH
25606: LD_INT 99
25608: EQUAL
25609: AND
25610: PUSH
25611: LD_VAR 0 3
25615: PPUSH
25616: CALL_OW 263
25620: PUSH
25621: LD_INT 3
25623: EQUAL
25624: AND
25625: IFFALSE 25641
// HackDestroyVehicle ( unit , selectedUnit ) ;
25627: LD_VAR 0 2
25631: PPUSH
25632: LD_VAR 0 3
25636: PPUSH
25637: CALL 27905 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
25641: LD_VAR 0 1
25645: PUSH
25646: LD_INT 255
25648: EQUAL
25649: PUSH
25650: LD_VAR 0 2
25654: PPUSH
25655: CALL_OW 264
25659: PUSH
25660: LD_INT 14
25662: PUSH
25663: LD_INT 53
25665: PUSH
25666: EMPTY
25667: LIST
25668: LIST
25669: IN
25670: AND
25671: PUSH
25672: LD_VAR 0 4
25676: PPUSH
25677: LD_VAR 0 5
25681: PPUSH
25682: CALL_OW 488
25686: AND
25687: IFFALSE 25711
// CutTreeXYR ( unit , x , y , 12 ) ;
25689: LD_VAR 0 2
25693: PPUSH
25694: LD_VAR 0 4
25698: PPUSH
25699: LD_VAR 0 5
25703: PPUSH
25704: LD_INT 12
25706: PPUSH
25707: CALL 25902 0 4
// if cmd = 256 then
25711: LD_VAR 0 1
25715: PUSH
25716: LD_INT 256
25718: EQUAL
25719: IFFALSE 25740
// SetFactoryWaypoint ( unit , x , y ) ;
25721: LD_VAR 0 2
25725: PPUSH
25726: LD_VAR 0 4
25730: PPUSH
25731: LD_VAR 0 5
25735: PPUSH
25736: CALL 23378 0 3
// if cmd = 257 then
25740: LD_VAR 0 1
25744: PUSH
25745: LD_INT 257
25747: EQUAL
25748: IFFALSE 25769
// SetWarehouseGatheringPoint ( unit , x , y ) ;
25750: LD_VAR 0 2
25754: PPUSH
25755: LD_VAR 0 4
25759: PPUSH
25760: LD_VAR 0 5
25764: PPUSH
25765: CALL 23868 0 3
// if cmd = 258 then
25769: LD_VAR 0 1
25773: PUSH
25774: LD_INT 258
25776: EQUAL
25777: IFFALSE 25801
// BurnTreeXYR ( unit , x , y , 8 ) ;
25779: LD_VAR 0 2
25783: PPUSH
25784: LD_VAR 0 4
25788: PPUSH
25789: LD_VAR 0 5
25793: PPUSH
25794: LD_INT 8
25796: PPUSH
25797: CALL 26296 0 4
// end ;
25801: LD_VAR 0 6
25805: RET
// export function ComRadiation ( un ) ; var eff ; begin
25806: LD_INT 0
25808: PPUSH
25809: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
25810: LD_VAR 0 1
25814: PPUSH
25815: CALL_OW 264
25819: PUSH
25820: LD_INT 91
25822: NONEQUAL
25823: IFFALSE 25827
// exit ;
25825: GO 25897
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
25827: LD_INT 68
25829: PPUSH
25830: LD_VAR 0 1
25834: PPUSH
25835: CALL_OW 255
25839: PPUSH
25840: CALL_OW 321
25844: PUSH
25845: LD_INT 2
25847: EQUAL
25848: IFFALSE 25860
// eff := 70 else
25850: LD_ADDR_VAR 0 3
25854: PUSH
25855: LD_INT 70
25857: ST_TO_ADDR
25858: GO 25868
// eff := 30 ;
25860: LD_ADDR_VAR 0 3
25864: PUSH
25865: LD_INT 30
25867: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
25868: LD_VAR 0 1
25872: PPUSH
25873: CALL_OW 250
25877: PPUSH
25878: LD_VAR 0 1
25882: PPUSH
25883: CALL_OW 251
25887: PPUSH
25888: LD_VAR 0 3
25892: PPUSH
25893: CALL_OW 495
// end ;
25897: LD_VAR 0 2
25901: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
25902: LD_INT 0
25904: PPUSH
25905: PPUSH
25906: PPUSH
25907: PPUSH
25908: PPUSH
25909: PPUSH
25910: PPUSH
25911: PPUSH
25912: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
25913: LD_VAR 0 1
25917: PPUSH
25918: CALL_OW 302
25922: NOT
25923: PUSH
25924: LD_VAR 0 2
25928: PPUSH
25929: LD_VAR 0 3
25933: PPUSH
25934: CALL_OW 488
25938: NOT
25939: OR
25940: PUSH
25941: LD_VAR 0 4
25945: NOT
25946: OR
25947: IFFALSE 25951
// exit ;
25949: GO 26291
// list := [ ] ;
25951: LD_ADDR_VAR 0 13
25955: PUSH
25956: EMPTY
25957: ST_TO_ADDR
// if x - r < 0 then
25958: LD_VAR 0 2
25962: PUSH
25963: LD_VAR 0 4
25967: MINUS
25968: PUSH
25969: LD_INT 0
25971: LESS
25972: IFFALSE 25984
// min_x := 0 else
25974: LD_ADDR_VAR 0 7
25978: PUSH
25979: LD_INT 0
25981: ST_TO_ADDR
25982: GO 26000
// min_x := x - r ;
25984: LD_ADDR_VAR 0 7
25988: PUSH
25989: LD_VAR 0 2
25993: PUSH
25994: LD_VAR 0 4
25998: MINUS
25999: ST_TO_ADDR
// if y - r < 0 then
26000: LD_VAR 0 3
26004: PUSH
26005: LD_VAR 0 4
26009: MINUS
26010: PUSH
26011: LD_INT 0
26013: LESS
26014: IFFALSE 26026
// min_y := 0 else
26016: LD_ADDR_VAR 0 8
26020: PUSH
26021: LD_INT 0
26023: ST_TO_ADDR
26024: GO 26042
// min_y := y - r ;
26026: LD_ADDR_VAR 0 8
26030: PUSH
26031: LD_VAR 0 3
26035: PUSH
26036: LD_VAR 0 4
26040: MINUS
26041: ST_TO_ADDR
// max_x := x + r ;
26042: LD_ADDR_VAR 0 9
26046: PUSH
26047: LD_VAR 0 2
26051: PUSH
26052: LD_VAR 0 4
26056: PLUS
26057: ST_TO_ADDR
// max_y := y + r ;
26058: LD_ADDR_VAR 0 10
26062: PUSH
26063: LD_VAR 0 3
26067: PUSH
26068: LD_VAR 0 4
26072: PLUS
26073: ST_TO_ADDR
// for _x = min_x to max_x do
26074: LD_ADDR_VAR 0 11
26078: PUSH
26079: DOUBLE
26080: LD_VAR 0 7
26084: DEC
26085: ST_TO_ADDR
26086: LD_VAR 0 9
26090: PUSH
26091: FOR_TO
26092: IFFALSE 26209
// for _y = min_y to max_y do
26094: LD_ADDR_VAR 0 12
26098: PUSH
26099: DOUBLE
26100: LD_VAR 0 8
26104: DEC
26105: ST_TO_ADDR
26106: LD_VAR 0 10
26110: PUSH
26111: FOR_TO
26112: IFFALSE 26205
// begin if not ValidHex ( _x , _y ) then
26114: LD_VAR 0 11
26118: PPUSH
26119: LD_VAR 0 12
26123: PPUSH
26124: CALL_OW 488
26128: NOT
26129: IFFALSE 26133
// continue ;
26131: GO 26111
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
26133: LD_VAR 0 11
26137: PPUSH
26138: LD_VAR 0 12
26142: PPUSH
26143: CALL_OW 351
26147: PUSH
26148: LD_VAR 0 11
26152: PPUSH
26153: LD_VAR 0 12
26157: PPUSH
26158: CALL_OW 554
26162: AND
26163: IFFALSE 26203
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
26165: LD_ADDR_VAR 0 13
26169: PUSH
26170: LD_VAR 0 13
26174: PPUSH
26175: LD_VAR 0 13
26179: PUSH
26180: LD_INT 1
26182: PLUS
26183: PPUSH
26184: LD_VAR 0 11
26188: PUSH
26189: LD_VAR 0 12
26193: PUSH
26194: EMPTY
26195: LIST
26196: LIST
26197: PPUSH
26198: CALL_OW 2
26202: ST_TO_ADDR
// end ;
26203: GO 26111
26205: POP
26206: POP
26207: GO 26091
26209: POP
26210: POP
// if not list then
26211: LD_VAR 0 13
26215: NOT
26216: IFFALSE 26220
// exit ;
26218: GO 26291
// for i in list do
26220: LD_ADDR_VAR 0 6
26224: PUSH
26225: LD_VAR 0 13
26229: PUSH
26230: FOR_IN
26231: IFFALSE 26289
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
26233: LD_VAR 0 1
26237: PPUSH
26238: LD_STRING M
26240: PUSH
26241: LD_VAR 0 6
26245: PUSH
26246: LD_INT 1
26248: ARRAY
26249: PUSH
26250: LD_VAR 0 6
26254: PUSH
26255: LD_INT 2
26257: ARRAY
26258: PUSH
26259: LD_INT 0
26261: PUSH
26262: LD_INT 0
26264: PUSH
26265: LD_INT 0
26267: PUSH
26268: LD_INT 0
26270: PUSH
26271: EMPTY
26272: LIST
26273: LIST
26274: LIST
26275: LIST
26276: LIST
26277: LIST
26278: LIST
26279: PUSH
26280: EMPTY
26281: LIST
26282: PPUSH
26283: CALL_OW 447
26287: GO 26230
26289: POP
26290: POP
// end ;
26291: LD_VAR 0 5
26295: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
26296: LD_INT 0
26298: PPUSH
26299: PPUSH
26300: PPUSH
26301: PPUSH
26302: PPUSH
26303: PPUSH
26304: PPUSH
26305: PPUSH
26306: PPUSH
26307: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
26308: LD_VAR 0 1
26312: PPUSH
26313: CALL_OW 302
26317: NOT
26318: PUSH
26319: LD_VAR 0 2
26323: PPUSH
26324: LD_VAR 0 3
26328: PPUSH
26329: CALL_OW 488
26333: NOT
26334: OR
26335: PUSH
26336: LD_VAR 0 4
26340: NOT
26341: OR
26342: IFFALSE 26346
// exit ;
26344: GO 26859
// list := [ ] ;
26346: LD_ADDR_VAR 0 13
26350: PUSH
26351: EMPTY
26352: ST_TO_ADDR
// if x - r < 0 then
26353: LD_VAR 0 2
26357: PUSH
26358: LD_VAR 0 4
26362: MINUS
26363: PUSH
26364: LD_INT 0
26366: LESS
26367: IFFALSE 26379
// min_x := 0 else
26369: LD_ADDR_VAR 0 7
26373: PUSH
26374: LD_INT 0
26376: ST_TO_ADDR
26377: GO 26395
// min_x := x - r ;
26379: LD_ADDR_VAR 0 7
26383: PUSH
26384: LD_VAR 0 2
26388: PUSH
26389: LD_VAR 0 4
26393: MINUS
26394: ST_TO_ADDR
// if y - r < 0 then
26395: LD_VAR 0 3
26399: PUSH
26400: LD_VAR 0 4
26404: MINUS
26405: PUSH
26406: LD_INT 0
26408: LESS
26409: IFFALSE 26421
// min_y := 0 else
26411: LD_ADDR_VAR 0 8
26415: PUSH
26416: LD_INT 0
26418: ST_TO_ADDR
26419: GO 26437
// min_y := y - r ;
26421: LD_ADDR_VAR 0 8
26425: PUSH
26426: LD_VAR 0 3
26430: PUSH
26431: LD_VAR 0 4
26435: MINUS
26436: ST_TO_ADDR
// max_x := x + r ;
26437: LD_ADDR_VAR 0 9
26441: PUSH
26442: LD_VAR 0 2
26446: PUSH
26447: LD_VAR 0 4
26451: PLUS
26452: ST_TO_ADDR
// max_y := y + r ;
26453: LD_ADDR_VAR 0 10
26457: PUSH
26458: LD_VAR 0 3
26462: PUSH
26463: LD_VAR 0 4
26467: PLUS
26468: ST_TO_ADDR
// for _x = min_x to max_x do
26469: LD_ADDR_VAR 0 11
26473: PUSH
26474: DOUBLE
26475: LD_VAR 0 7
26479: DEC
26480: ST_TO_ADDR
26481: LD_VAR 0 9
26485: PUSH
26486: FOR_TO
26487: IFFALSE 26604
// for _y = min_y to max_y do
26489: LD_ADDR_VAR 0 12
26493: PUSH
26494: DOUBLE
26495: LD_VAR 0 8
26499: DEC
26500: ST_TO_ADDR
26501: LD_VAR 0 10
26505: PUSH
26506: FOR_TO
26507: IFFALSE 26600
// begin if not ValidHex ( _x , _y ) then
26509: LD_VAR 0 11
26513: PPUSH
26514: LD_VAR 0 12
26518: PPUSH
26519: CALL_OW 488
26523: NOT
26524: IFFALSE 26528
// continue ;
26526: GO 26506
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
26528: LD_VAR 0 11
26532: PPUSH
26533: LD_VAR 0 12
26537: PPUSH
26538: CALL_OW 351
26542: PUSH
26543: LD_VAR 0 11
26547: PPUSH
26548: LD_VAR 0 12
26552: PPUSH
26553: CALL_OW 554
26557: AND
26558: IFFALSE 26598
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
26560: LD_ADDR_VAR 0 13
26564: PUSH
26565: LD_VAR 0 13
26569: PPUSH
26570: LD_VAR 0 13
26574: PUSH
26575: LD_INT 1
26577: PLUS
26578: PPUSH
26579: LD_VAR 0 11
26583: PUSH
26584: LD_VAR 0 12
26588: PUSH
26589: EMPTY
26590: LIST
26591: LIST
26592: PPUSH
26593: CALL_OW 2
26597: ST_TO_ADDR
// end ;
26598: GO 26506
26600: POP
26601: POP
26602: GO 26486
26604: POP
26605: POP
// if not list then
26606: LD_VAR 0 13
26610: NOT
26611: IFFALSE 26615
// exit ;
26613: GO 26859
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
26615: LD_ADDR_VAR 0 13
26619: PUSH
26620: LD_VAR 0 1
26624: PPUSH
26625: LD_VAR 0 13
26629: PPUSH
26630: LD_INT 1
26632: PPUSH
26633: LD_INT 1
26635: PPUSH
26636: CALL 35572 0 4
26640: ST_TO_ADDR
// ComStop ( flame ) ;
26641: LD_VAR 0 1
26645: PPUSH
26646: CALL_OW 141
// for i in list do
26650: LD_ADDR_VAR 0 6
26654: PUSH
26655: LD_VAR 0 13
26659: PUSH
26660: FOR_IN
26661: IFFALSE 26692
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
26663: LD_VAR 0 1
26667: PPUSH
26668: LD_VAR 0 6
26672: PUSH
26673: LD_INT 1
26675: ARRAY
26676: PPUSH
26677: LD_VAR 0 6
26681: PUSH
26682: LD_INT 2
26684: ARRAY
26685: PPUSH
26686: CALL_OW 176
26690: GO 26660
26692: POP
26693: POP
// repeat wait ( 0 0$1 ) ;
26694: LD_INT 35
26696: PPUSH
26697: CALL_OW 67
// task := GetTaskList ( flame ) ;
26701: LD_ADDR_VAR 0 14
26705: PUSH
26706: LD_VAR 0 1
26710: PPUSH
26711: CALL_OW 437
26715: ST_TO_ADDR
// if not task then
26716: LD_VAR 0 14
26720: NOT
26721: IFFALSE 26725
// exit ;
26723: GO 26859
// if task [ 1 ] [ 1 ] <> | then
26725: LD_VAR 0 14
26729: PUSH
26730: LD_INT 1
26732: ARRAY
26733: PUSH
26734: LD_INT 1
26736: ARRAY
26737: PUSH
26738: LD_STRING |
26740: NONEQUAL
26741: IFFALSE 26745
// exit ;
26743: GO 26859
// _x := task [ 1 ] [ 2 ] ;
26745: LD_ADDR_VAR 0 11
26749: PUSH
26750: LD_VAR 0 14
26754: PUSH
26755: LD_INT 1
26757: ARRAY
26758: PUSH
26759: LD_INT 2
26761: ARRAY
26762: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
26763: LD_ADDR_VAR 0 12
26767: PUSH
26768: LD_VAR 0 14
26772: PUSH
26773: LD_INT 1
26775: ARRAY
26776: PUSH
26777: LD_INT 3
26779: ARRAY
26780: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
26781: LD_VAR 0 11
26785: PPUSH
26786: LD_VAR 0 12
26790: PPUSH
26791: CALL_OW 351
26795: NOT
26796: PUSH
26797: LD_VAR 0 11
26801: PPUSH
26802: LD_VAR 0 12
26806: PPUSH
26807: CALL_OW 554
26811: NOT
26812: OR
26813: IFFALSE 26847
// begin task := Delete ( task , 1 ) ;
26815: LD_ADDR_VAR 0 14
26819: PUSH
26820: LD_VAR 0 14
26824: PPUSH
26825: LD_INT 1
26827: PPUSH
26828: CALL_OW 3
26832: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
26833: LD_VAR 0 1
26837: PPUSH
26838: LD_VAR 0 14
26842: PPUSH
26843: CALL_OW 446
// end ; until not HasTask ( flame ) ;
26847: LD_VAR 0 1
26851: PPUSH
26852: CALL_OW 314
26856: NOT
26857: IFFALSE 26694
// end ;
26859: LD_VAR 0 5
26863: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
26864: LD_EXP 93
26868: NOT
26869: IFFALSE 26919
26871: GO 26873
26873: DISABLE
// begin initHack := true ;
26874: LD_ADDR_EXP 93
26878: PUSH
26879: LD_INT 1
26881: ST_TO_ADDR
// hackTanks := [ ] ;
26882: LD_ADDR_EXP 94
26886: PUSH
26887: EMPTY
26888: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
26889: LD_ADDR_EXP 95
26893: PUSH
26894: EMPTY
26895: ST_TO_ADDR
// hackLimit := 3 ;
26896: LD_ADDR_EXP 96
26900: PUSH
26901: LD_INT 3
26903: ST_TO_ADDR
// hackDist := 12 ;
26904: LD_ADDR_EXP 97
26908: PUSH
26909: LD_INT 12
26911: ST_TO_ADDR
// hackCounter := [ ] ;
26912: LD_ADDR_EXP 98
26916: PUSH
26917: EMPTY
26918: ST_TO_ADDR
// end ;
26919: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
26920: LD_EXP 93
26924: PUSH
26925: LD_INT 34
26927: PUSH
26928: LD_INT 99
26930: PUSH
26931: EMPTY
26932: LIST
26933: LIST
26934: PPUSH
26935: CALL_OW 69
26939: AND
26940: IFFALSE 27193
26942: GO 26944
26944: DISABLE
26945: LD_INT 0
26947: PPUSH
26948: PPUSH
// begin enable ;
26949: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
26950: LD_ADDR_VAR 0 1
26954: PUSH
26955: LD_INT 34
26957: PUSH
26958: LD_INT 99
26960: PUSH
26961: EMPTY
26962: LIST
26963: LIST
26964: PPUSH
26965: CALL_OW 69
26969: PUSH
26970: FOR_IN
26971: IFFALSE 27191
// begin if not i in hackTanks then
26973: LD_VAR 0 1
26977: PUSH
26978: LD_EXP 94
26982: IN
26983: NOT
26984: IFFALSE 27067
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
26986: LD_ADDR_EXP 94
26990: PUSH
26991: LD_EXP 94
26995: PPUSH
26996: LD_EXP 94
27000: PUSH
27001: LD_INT 1
27003: PLUS
27004: PPUSH
27005: LD_VAR 0 1
27009: PPUSH
27010: CALL_OW 1
27014: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
27015: LD_ADDR_EXP 95
27019: PUSH
27020: LD_EXP 95
27024: PPUSH
27025: LD_EXP 95
27029: PUSH
27030: LD_INT 1
27032: PLUS
27033: PPUSH
27034: EMPTY
27035: PPUSH
27036: CALL_OW 1
27040: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
27041: LD_ADDR_EXP 98
27045: PUSH
27046: LD_EXP 98
27050: PPUSH
27051: LD_EXP 98
27055: PUSH
27056: LD_INT 1
27058: PLUS
27059: PPUSH
27060: EMPTY
27061: PPUSH
27062: CALL_OW 1
27066: ST_TO_ADDR
// end ; if not IsOk ( i ) then
27067: LD_VAR 0 1
27071: PPUSH
27072: CALL_OW 302
27076: NOT
27077: IFFALSE 27090
// begin HackUnlinkAll ( i ) ;
27079: LD_VAR 0 1
27083: PPUSH
27084: CALL 27196 0 1
// continue ;
27088: GO 26970
// end ; HackCheckCapturedStatus ( i ) ;
27090: LD_VAR 0 1
27094: PPUSH
27095: CALL 27639 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
27099: LD_ADDR_VAR 0 2
27103: PUSH
27104: LD_INT 81
27106: PUSH
27107: LD_VAR 0 1
27111: PPUSH
27112: CALL_OW 255
27116: PUSH
27117: EMPTY
27118: LIST
27119: LIST
27120: PUSH
27121: LD_INT 33
27123: PUSH
27124: LD_INT 3
27126: PUSH
27127: EMPTY
27128: LIST
27129: LIST
27130: PUSH
27131: LD_INT 91
27133: PUSH
27134: LD_VAR 0 1
27138: PUSH
27139: LD_EXP 97
27143: PUSH
27144: EMPTY
27145: LIST
27146: LIST
27147: LIST
27148: PUSH
27149: LD_INT 50
27151: PUSH
27152: EMPTY
27153: LIST
27154: PUSH
27155: EMPTY
27156: LIST
27157: LIST
27158: LIST
27159: LIST
27160: PPUSH
27161: CALL_OW 69
27165: ST_TO_ADDR
// if not tmp then
27166: LD_VAR 0 2
27170: NOT
27171: IFFALSE 27175
// continue ;
27173: GO 26970
// HackLink ( i , tmp ) ;
27175: LD_VAR 0 1
27179: PPUSH
27180: LD_VAR 0 2
27184: PPUSH
27185: CALL 27332 0 2
// end ;
27189: GO 26970
27191: POP
27192: POP
// end ;
27193: PPOPN 2
27195: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
27196: LD_INT 0
27198: PPUSH
27199: PPUSH
27200: PPUSH
// if not hack in hackTanks then
27201: LD_VAR 0 1
27205: PUSH
27206: LD_EXP 94
27210: IN
27211: NOT
27212: IFFALSE 27216
// exit ;
27214: GO 27327
// index := GetElementIndex ( hackTanks , hack ) ;
27216: LD_ADDR_VAR 0 4
27220: PUSH
27221: LD_EXP 94
27225: PPUSH
27226: LD_VAR 0 1
27230: PPUSH
27231: CALL 34869 0 2
27235: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
27236: LD_EXP 95
27240: PUSH
27241: LD_VAR 0 4
27245: ARRAY
27246: IFFALSE 27327
// begin for i in hackTanksCaptured [ index ] do
27248: LD_ADDR_VAR 0 3
27252: PUSH
27253: LD_EXP 95
27257: PUSH
27258: LD_VAR 0 4
27262: ARRAY
27263: PUSH
27264: FOR_IN
27265: IFFALSE 27291
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
27267: LD_VAR 0 3
27271: PUSH
27272: LD_INT 1
27274: ARRAY
27275: PPUSH
27276: LD_VAR 0 3
27280: PUSH
27281: LD_INT 2
27283: ARRAY
27284: PPUSH
27285: CALL_OW 235
27289: GO 27264
27291: POP
27292: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
27293: LD_ADDR_EXP 95
27297: PUSH
27298: LD_EXP 95
27302: PPUSH
27303: LD_VAR 0 4
27307: PPUSH
27308: EMPTY
27309: PPUSH
27310: CALL_OW 1
27314: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
27315: LD_VAR 0 1
27319: PPUSH
27320: LD_INT 0
27322: PPUSH
27323: CALL_OW 505
// end ; end ;
27327: LD_VAR 0 2
27331: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
27332: LD_INT 0
27334: PPUSH
27335: PPUSH
27336: PPUSH
// if not hack in hackTanks or not vehicles then
27337: LD_VAR 0 1
27341: PUSH
27342: LD_EXP 94
27346: IN
27347: NOT
27348: PUSH
27349: LD_VAR 0 2
27353: NOT
27354: OR
27355: IFFALSE 27359
// exit ;
27357: GO 27634
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
27359: LD_ADDR_VAR 0 2
27363: PUSH
27364: LD_VAR 0 1
27368: PPUSH
27369: LD_VAR 0 2
27373: PPUSH
27374: LD_INT 1
27376: PPUSH
27377: LD_INT 1
27379: PPUSH
27380: CALL 35519 0 4
27384: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
27385: LD_ADDR_VAR 0 5
27389: PUSH
27390: LD_EXP 94
27394: PPUSH
27395: LD_VAR 0 1
27399: PPUSH
27400: CALL 34869 0 2
27404: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
27405: LD_EXP 95
27409: PUSH
27410: LD_VAR 0 5
27414: ARRAY
27415: PUSH
27416: LD_EXP 96
27420: LESS
27421: IFFALSE 27610
// begin for i := 1 to vehicles do
27423: LD_ADDR_VAR 0 4
27427: PUSH
27428: DOUBLE
27429: LD_INT 1
27431: DEC
27432: ST_TO_ADDR
27433: LD_VAR 0 2
27437: PUSH
27438: FOR_TO
27439: IFFALSE 27608
// begin if hackTanksCaptured [ index ] = hackLimit then
27441: LD_EXP 95
27445: PUSH
27446: LD_VAR 0 5
27450: ARRAY
27451: PUSH
27452: LD_EXP 96
27456: EQUAL
27457: IFFALSE 27461
// break ;
27459: GO 27608
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
27461: LD_ADDR_EXP 98
27465: PUSH
27466: LD_EXP 98
27470: PPUSH
27471: LD_VAR 0 5
27475: PPUSH
27476: LD_EXP 98
27480: PUSH
27481: LD_VAR 0 5
27485: ARRAY
27486: PUSH
27487: LD_INT 1
27489: PLUS
27490: PPUSH
27491: CALL_OW 1
27495: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
27496: LD_ADDR_EXP 95
27500: PUSH
27501: LD_EXP 95
27505: PPUSH
27506: LD_VAR 0 5
27510: PUSH
27511: LD_EXP 95
27515: PUSH
27516: LD_VAR 0 5
27520: ARRAY
27521: PUSH
27522: LD_INT 1
27524: PLUS
27525: PUSH
27526: EMPTY
27527: LIST
27528: LIST
27529: PPUSH
27530: LD_VAR 0 2
27534: PUSH
27535: LD_VAR 0 4
27539: ARRAY
27540: PUSH
27541: LD_VAR 0 2
27545: PUSH
27546: LD_VAR 0 4
27550: ARRAY
27551: PPUSH
27552: CALL_OW 255
27556: PUSH
27557: EMPTY
27558: LIST
27559: LIST
27560: PPUSH
27561: CALL 35084 0 3
27565: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
27566: LD_VAR 0 2
27570: PUSH
27571: LD_VAR 0 4
27575: ARRAY
27576: PPUSH
27577: LD_VAR 0 1
27581: PPUSH
27582: CALL_OW 255
27586: PPUSH
27587: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
27591: LD_VAR 0 2
27595: PUSH
27596: LD_VAR 0 4
27600: ARRAY
27601: PPUSH
27602: CALL_OW 141
// end ;
27606: GO 27438
27608: POP
27609: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
27610: LD_VAR 0 1
27614: PPUSH
27615: LD_EXP 95
27619: PUSH
27620: LD_VAR 0 5
27624: ARRAY
27625: PUSH
27626: LD_INT 0
27628: PLUS
27629: PPUSH
27630: CALL_OW 505
// end ;
27634: LD_VAR 0 3
27638: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
27639: LD_INT 0
27641: PPUSH
27642: PPUSH
27643: PPUSH
27644: PPUSH
// if not hack in hackTanks then
27645: LD_VAR 0 1
27649: PUSH
27650: LD_EXP 94
27654: IN
27655: NOT
27656: IFFALSE 27660
// exit ;
27658: GO 27900
// index := GetElementIndex ( hackTanks , hack ) ;
27660: LD_ADDR_VAR 0 4
27664: PUSH
27665: LD_EXP 94
27669: PPUSH
27670: LD_VAR 0 1
27674: PPUSH
27675: CALL 34869 0 2
27679: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
27680: LD_ADDR_VAR 0 3
27684: PUSH
27685: DOUBLE
27686: LD_EXP 95
27690: PUSH
27691: LD_VAR 0 4
27695: ARRAY
27696: INC
27697: ST_TO_ADDR
27698: LD_INT 1
27700: PUSH
27701: FOR_DOWNTO
27702: IFFALSE 27874
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
27704: LD_ADDR_VAR 0 5
27708: PUSH
27709: LD_EXP 95
27713: PUSH
27714: LD_VAR 0 4
27718: ARRAY
27719: PUSH
27720: LD_VAR 0 3
27724: ARRAY
27725: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
27726: LD_VAR 0 5
27730: PUSH
27731: LD_INT 1
27733: ARRAY
27734: PPUSH
27735: CALL_OW 302
27739: NOT
27740: PUSH
27741: LD_VAR 0 5
27745: PUSH
27746: LD_INT 1
27748: ARRAY
27749: PPUSH
27750: CALL_OW 255
27754: PUSH
27755: LD_VAR 0 1
27759: PPUSH
27760: CALL_OW 255
27764: NONEQUAL
27765: OR
27766: IFFALSE 27872
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
27768: LD_VAR 0 5
27772: PUSH
27773: LD_INT 1
27775: ARRAY
27776: PPUSH
27777: CALL_OW 305
27781: PUSH
27782: LD_VAR 0 5
27786: PUSH
27787: LD_INT 1
27789: ARRAY
27790: PPUSH
27791: CALL_OW 255
27795: PUSH
27796: LD_VAR 0 1
27800: PPUSH
27801: CALL_OW 255
27805: EQUAL
27806: AND
27807: IFFALSE 27831
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
27809: LD_VAR 0 5
27813: PUSH
27814: LD_INT 1
27816: ARRAY
27817: PPUSH
27818: LD_VAR 0 5
27822: PUSH
27823: LD_INT 2
27825: ARRAY
27826: PPUSH
27827: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
27831: LD_ADDR_EXP 95
27835: PUSH
27836: LD_EXP 95
27840: PPUSH
27841: LD_VAR 0 4
27845: PPUSH
27846: LD_EXP 95
27850: PUSH
27851: LD_VAR 0 4
27855: ARRAY
27856: PPUSH
27857: LD_VAR 0 3
27861: PPUSH
27862: CALL_OW 3
27866: PPUSH
27867: CALL_OW 1
27871: ST_TO_ADDR
// end ; end ;
27872: GO 27701
27874: POP
27875: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
27876: LD_VAR 0 1
27880: PPUSH
27881: LD_EXP 95
27885: PUSH
27886: LD_VAR 0 4
27890: ARRAY
27891: PUSH
27892: LD_INT 0
27894: PLUS
27895: PPUSH
27896: CALL_OW 505
// end ;
27900: LD_VAR 0 2
27904: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
27905: LD_INT 0
27907: PPUSH
27908: PPUSH
27909: PPUSH
27910: PPUSH
// if not hack in hackTanks then
27911: LD_VAR 0 1
27915: PUSH
27916: LD_EXP 94
27920: IN
27921: NOT
27922: IFFALSE 27926
// exit ;
27924: GO 28011
// index := GetElementIndex ( hackTanks , hack ) ;
27926: LD_ADDR_VAR 0 5
27930: PUSH
27931: LD_EXP 94
27935: PPUSH
27936: LD_VAR 0 1
27940: PPUSH
27941: CALL 34869 0 2
27945: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
27946: LD_ADDR_VAR 0 4
27950: PUSH
27951: DOUBLE
27952: LD_INT 1
27954: DEC
27955: ST_TO_ADDR
27956: LD_EXP 95
27960: PUSH
27961: LD_VAR 0 5
27965: ARRAY
27966: PUSH
27967: FOR_TO
27968: IFFALSE 28009
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
27970: LD_EXP 95
27974: PUSH
27975: LD_VAR 0 5
27979: ARRAY
27980: PUSH
27981: LD_VAR 0 4
27985: ARRAY
27986: PUSH
27987: LD_INT 1
27989: ARRAY
27990: PUSH
27991: LD_VAR 0 2
27995: EQUAL
27996: IFFALSE 28007
// KillUnit ( vehicle ) ;
27998: LD_VAR 0 2
28002: PPUSH
28003: CALL_OW 66
28007: GO 27967
28009: POP
28010: POP
// end ;
28011: LD_VAR 0 3
28015: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
28016: LD_EXP 99
28020: NOT
28021: IFFALSE 28056
28023: GO 28025
28025: DISABLE
// begin initMiner := true ;
28026: LD_ADDR_EXP 99
28030: PUSH
28031: LD_INT 1
28033: ST_TO_ADDR
// minersList := [ ] ;
28034: LD_ADDR_EXP 100
28038: PUSH
28039: EMPTY
28040: ST_TO_ADDR
// minerMinesList := [ ] ;
28041: LD_ADDR_EXP 101
28045: PUSH
28046: EMPTY
28047: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
28048: LD_ADDR_EXP 102
28052: PUSH
28053: LD_INT 5
28055: ST_TO_ADDR
// end ;
28056: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
28057: LD_EXP 99
28061: PUSH
28062: LD_INT 34
28064: PUSH
28065: LD_INT 81
28067: PUSH
28068: EMPTY
28069: LIST
28070: LIST
28071: PPUSH
28072: CALL_OW 69
28076: AND
28077: IFFALSE 28538
28079: GO 28081
28081: DISABLE
28082: LD_INT 0
28084: PPUSH
28085: PPUSH
28086: PPUSH
28087: PPUSH
// begin enable ;
28088: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
28089: LD_ADDR_VAR 0 1
28093: PUSH
28094: LD_INT 34
28096: PUSH
28097: LD_INT 81
28099: PUSH
28100: EMPTY
28101: LIST
28102: LIST
28103: PPUSH
28104: CALL_OW 69
28108: PUSH
28109: FOR_IN
28110: IFFALSE 28182
// begin if not i in minersList then
28112: LD_VAR 0 1
28116: PUSH
28117: LD_EXP 100
28121: IN
28122: NOT
28123: IFFALSE 28180
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
28125: LD_ADDR_EXP 100
28129: PUSH
28130: LD_EXP 100
28134: PPUSH
28135: LD_EXP 100
28139: PUSH
28140: LD_INT 1
28142: PLUS
28143: PPUSH
28144: LD_VAR 0 1
28148: PPUSH
28149: CALL_OW 1
28153: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
28154: LD_ADDR_EXP 101
28158: PUSH
28159: LD_EXP 101
28163: PPUSH
28164: LD_EXP 101
28168: PUSH
28169: LD_INT 1
28171: PLUS
28172: PPUSH
28173: EMPTY
28174: PPUSH
28175: CALL_OW 1
28179: ST_TO_ADDR
// end end ;
28180: GO 28109
28182: POP
28183: POP
// for i := minerMinesList downto 1 do
28184: LD_ADDR_VAR 0 1
28188: PUSH
28189: DOUBLE
28190: LD_EXP 101
28194: INC
28195: ST_TO_ADDR
28196: LD_INT 1
28198: PUSH
28199: FOR_DOWNTO
28200: IFFALSE 28536
// begin if IsLive ( minersList [ i ] ) then
28202: LD_EXP 100
28206: PUSH
28207: LD_VAR 0 1
28211: ARRAY
28212: PPUSH
28213: CALL_OW 300
28217: IFFALSE 28245
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
28219: LD_EXP 100
28223: PUSH
28224: LD_VAR 0 1
28228: ARRAY
28229: PPUSH
28230: LD_EXP 101
28234: PUSH
28235: LD_VAR 0 1
28239: ARRAY
28240: PPUSH
28241: CALL_OW 505
// if not minerMinesList [ i ] then
28245: LD_EXP 101
28249: PUSH
28250: LD_VAR 0 1
28254: ARRAY
28255: NOT
28256: IFFALSE 28260
// continue ;
28258: GO 28199
// for j := minerMinesList [ i ] downto 1 do
28260: LD_ADDR_VAR 0 2
28264: PUSH
28265: DOUBLE
28266: LD_EXP 101
28270: PUSH
28271: LD_VAR 0 1
28275: ARRAY
28276: INC
28277: ST_TO_ADDR
28278: LD_INT 1
28280: PUSH
28281: FOR_DOWNTO
28282: IFFALSE 28532
// begin side := GetSide ( minersList [ i ] ) ;
28284: LD_ADDR_VAR 0 3
28288: PUSH
28289: LD_EXP 100
28293: PUSH
28294: LD_VAR 0 1
28298: ARRAY
28299: PPUSH
28300: CALL_OW 255
28304: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
28305: LD_ADDR_VAR 0 4
28309: PUSH
28310: LD_EXP 101
28314: PUSH
28315: LD_VAR 0 1
28319: ARRAY
28320: PUSH
28321: LD_VAR 0 2
28325: ARRAY
28326: PUSH
28327: LD_INT 1
28329: ARRAY
28330: PPUSH
28331: LD_EXP 101
28335: PUSH
28336: LD_VAR 0 1
28340: ARRAY
28341: PUSH
28342: LD_VAR 0 2
28346: ARRAY
28347: PUSH
28348: LD_INT 2
28350: ARRAY
28351: PPUSH
28352: CALL_OW 428
28356: ST_TO_ADDR
// if not tmp then
28357: LD_VAR 0 4
28361: NOT
28362: IFFALSE 28366
// continue ;
28364: GO 28281
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
28366: LD_VAR 0 4
28370: PUSH
28371: LD_INT 81
28373: PUSH
28374: LD_VAR 0 3
28378: PUSH
28379: EMPTY
28380: LIST
28381: LIST
28382: PPUSH
28383: CALL_OW 69
28387: IN
28388: PUSH
28389: LD_EXP 101
28393: PUSH
28394: LD_VAR 0 1
28398: ARRAY
28399: PUSH
28400: LD_VAR 0 2
28404: ARRAY
28405: PUSH
28406: LD_INT 1
28408: ARRAY
28409: PPUSH
28410: LD_EXP 101
28414: PUSH
28415: LD_VAR 0 1
28419: ARRAY
28420: PUSH
28421: LD_VAR 0 2
28425: ARRAY
28426: PUSH
28427: LD_INT 2
28429: ARRAY
28430: PPUSH
28431: CALL_OW 458
28435: AND
28436: IFFALSE 28530
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
28438: LD_EXP 101
28442: PUSH
28443: LD_VAR 0 1
28447: ARRAY
28448: PUSH
28449: LD_VAR 0 2
28453: ARRAY
28454: PUSH
28455: LD_INT 1
28457: ARRAY
28458: PPUSH
28459: LD_EXP 101
28463: PUSH
28464: LD_VAR 0 1
28468: ARRAY
28469: PUSH
28470: LD_VAR 0 2
28474: ARRAY
28475: PUSH
28476: LD_INT 2
28478: ARRAY
28479: PPUSH
28480: LD_VAR 0 3
28484: PPUSH
28485: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
28489: LD_ADDR_EXP 101
28493: PUSH
28494: LD_EXP 101
28498: PPUSH
28499: LD_VAR 0 1
28503: PPUSH
28504: LD_EXP 101
28508: PUSH
28509: LD_VAR 0 1
28513: ARRAY
28514: PPUSH
28515: LD_VAR 0 2
28519: PPUSH
28520: CALL_OW 3
28524: PPUSH
28525: CALL_OW 1
28529: ST_TO_ADDR
// end ; end ;
28530: GO 28281
28532: POP
28533: POP
// end ;
28534: GO 28199
28536: POP
28537: POP
// end ;
28538: PPOPN 4
28540: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
28541: LD_INT 0
28543: PPUSH
28544: PPUSH
// result := false ;
28545: LD_ADDR_VAR 0 4
28549: PUSH
28550: LD_INT 0
28552: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
28553: LD_VAR 0 1
28557: PPUSH
28558: CALL_OW 264
28562: PUSH
28563: LD_INT 81
28565: EQUAL
28566: NOT
28567: IFFALSE 28571
// exit ;
28569: GO 28811
// index := GetElementIndex ( minersList , unit ) ;
28571: LD_ADDR_VAR 0 5
28575: PUSH
28576: LD_EXP 100
28580: PPUSH
28581: LD_VAR 0 1
28585: PPUSH
28586: CALL 34869 0 2
28590: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
28591: LD_EXP 101
28595: PUSH
28596: LD_VAR 0 5
28600: ARRAY
28601: PUSH
28602: LD_EXP 102
28606: GREATEREQUAL
28607: IFFALSE 28611
// exit ;
28609: GO 28811
// ComMoveXY ( unit , x , y ) ;
28611: LD_VAR 0 1
28615: PPUSH
28616: LD_VAR 0 2
28620: PPUSH
28621: LD_VAR 0 3
28625: PPUSH
28626: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
28630: LD_INT 35
28632: PPUSH
28633: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
28637: LD_VAR 0 1
28641: PPUSH
28642: LD_VAR 0 2
28646: PPUSH
28647: LD_VAR 0 3
28651: PPUSH
28652: CALL 66630 0 3
28656: NOT
28657: PUSH
28658: LD_VAR 0 1
28662: PPUSH
28663: CALL_OW 314
28667: AND
28668: IFFALSE 28672
// exit ;
28670: GO 28811
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
28672: LD_VAR 0 2
28676: PPUSH
28677: LD_VAR 0 3
28681: PPUSH
28682: CALL_OW 428
28686: PUSH
28687: LD_VAR 0 1
28691: EQUAL
28692: PUSH
28693: LD_VAR 0 1
28697: PPUSH
28698: CALL_OW 314
28702: NOT
28703: AND
28704: IFFALSE 28630
// PlaySoundXY ( x , y , PlantMine ) ;
28706: LD_VAR 0 2
28710: PPUSH
28711: LD_VAR 0 3
28715: PPUSH
28716: LD_STRING PlantMine
28718: PPUSH
28719: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
28723: LD_VAR 0 2
28727: PPUSH
28728: LD_VAR 0 3
28732: PPUSH
28733: LD_VAR 0 1
28737: PPUSH
28738: CALL_OW 255
28742: PPUSH
28743: LD_INT 0
28745: PPUSH
28746: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
28750: LD_ADDR_EXP 101
28754: PUSH
28755: LD_EXP 101
28759: PPUSH
28760: LD_VAR 0 5
28764: PUSH
28765: LD_EXP 101
28769: PUSH
28770: LD_VAR 0 5
28774: ARRAY
28775: PUSH
28776: LD_INT 1
28778: PLUS
28779: PUSH
28780: EMPTY
28781: LIST
28782: LIST
28783: PPUSH
28784: LD_VAR 0 2
28788: PUSH
28789: LD_VAR 0 3
28793: PUSH
28794: EMPTY
28795: LIST
28796: LIST
28797: PPUSH
28798: CALL 35084 0 3
28802: ST_TO_ADDR
// result := true ;
28803: LD_ADDR_VAR 0 4
28807: PUSH
28808: LD_INT 1
28810: ST_TO_ADDR
// end ;
28811: LD_VAR 0 4
28815: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
28816: LD_INT 0
28818: PPUSH
28819: PPUSH
28820: PPUSH
// if not unit in minersList then
28821: LD_VAR 0 1
28825: PUSH
28826: LD_EXP 100
28830: IN
28831: NOT
28832: IFFALSE 28836
// exit ;
28834: GO 29228
// index := GetElementIndex ( minersList , unit ) ;
28836: LD_ADDR_VAR 0 6
28840: PUSH
28841: LD_EXP 100
28845: PPUSH
28846: LD_VAR 0 1
28850: PPUSH
28851: CALL 34869 0 2
28855: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
28856: LD_ADDR_VAR 0 5
28860: PUSH
28861: DOUBLE
28862: LD_EXP 101
28866: PUSH
28867: LD_VAR 0 6
28871: ARRAY
28872: INC
28873: ST_TO_ADDR
28874: LD_INT 1
28876: PUSH
28877: FOR_DOWNTO
28878: IFFALSE 29039
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
28880: LD_EXP 101
28884: PUSH
28885: LD_VAR 0 6
28889: ARRAY
28890: PUSH
28891: LD_VAR 0 5
28895: ARRAY
28896: PUSH
28897: LD_INT 1
28899: ARRAY
28900: PUSH
28901: LD_VAR 0 2
28905: EQUAL
28906: PUSH
28907: LD_EXP 101
28911: PUSH
28912: LD_VAR 0 6
28916: ARRAY
28917: PUSH
28918: LD_VAR 0 5
28922: ARRAY
28923: PUSH
28924: LD_INT 2
28926: ARRAY
28927: PUSH
28928: LD_VAR 0 3
28932: EQUAL
28933: AND
28934: IFFALSE 29037
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
28936: LD_EXP 101
28940: PUSH
28941: LD_VAR 0 6
28945: ARRAY
28946: PUSH
28947: LD_VAR 0 5
28951: ARRAY
28952: PUSH
28953: LD_INT 1
28955: ARRAY
28956: PPUSH
28957: LD_EXP 101
28961: PUSH
28962: LD_VAR 0 6
28966: ARRAY
28967: PUSH
28968: LD_VAR 0 5
28972: ARRAY
28973: PUSH
28974: LD_INT 2
28976: ARRAY
28977: PPUSH
28978: LD_VAR 0 1
28982: PPUSH
28983: CALL_OW 255
28987: PPUSH
28988: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
28992: LD_ADDR_EXP 101
28996: PUSH
28997: LD_EXP 101
29001: PPUSH
29002: LD_VAR 0 6
29006: PPUSH
29007: LD_EXP 101
29011: PUSH
29012: LD_VAR 0 6
29016: ARRAY
29017: PPUSH
29018: LD_VAR 0 5
29022: PPUSH
29023: CALL_OW 3
29027: PPUSH
29028: CALL_OW 1
29032: ST_TO_ADDR
// exit ;
29033: POP
29034: POP
29035: GO 29228
// end ; end ;
29037: GO 28877
29039: POP
29040: POP
// for i := minerMinesList [ index ] downto 1 do
29041: LD_ADDR_VAR 0 5
29045: PUSH
29046: DOUBLE
29047: LD_EXP 101
29051: PUSH
29052: LD_VAR 0 6
29056: ARRAY
29057: INC
29058: ST_TO_ADDR
29059: LD_INT 1
29061: PUSH
29062: FOR_DOWNTO
29063: IFFALSE 29226
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
29065: LD_EXP 101
29069: PUSH
29070: LD_VAR 0 6
29074: ARRAY
29075: PUSH
29076: LD_VAR 0 5
29080: ARRAY
29081: PUSH
29082: LD_INT 1
29084: ARRAY
29085: PPUSH
29086: LD_EXP 101
29090: PUSH
29091: LD_VAR 0 6
29095: ARRAY
29096: PUSH
29097: LD_VAR 0 5
29101: ARRAY
29102: PUSH
29103: LD_INT 2
29105: ARRAY
29106: PPUSH
29107: LD_VAR 0 2
29111: PPUSH
29112: LD_VAR 0 3
29116: PPUSH
29117: CALL_OW 298
29121: PUSH
29122: LD_INT 6
29124: LESS
29125: IFFALSE 29224
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
29127: LD_EXP 101
29131: PUSH
29132: LD_VAR 0 6
29136: ARRAY
29137: PUSH
29138: LD_VAR 0 5
29142: ARRAY
29143: PUSH
29144: LD_INT 1
29146: ARRAY
29147: PPUSH
29148: LD_EXP 101
29152: PUSH
29153: LD_VAR 0 6
29157: ARRAY
29158: PUSH
29159: LD_VAR 0 5
29163: ARRAY
29164: PUSH
29165: LD_INT 2
29167: ARRAY
29168: PPUSH
29169: LD_VAR 0 1
29173: PPUSH
29174: CALL_OW 255
29178: PPUSH
29179: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
29183: LD_ADDR_EXP 101
29187: PUSH
29188: LD_EXP 101
29192: PPUSH
29193: LD_VAR 0 6
29197: PPUSH
29198: LD_EXP 101
29202: PUSH
29203: LD_VAR 0 6
29207: ARRAY
29208: PPUSH
29209: LD_VAR 0 5
29213: PPUSH
29214: CALL_OW 3
29218: PPUSH
29219: CALL_OW 1
29223: ST_TO_ADDR
// end ; end ;
29224: GO 29062
29226: POP
29227: POP
// end ;
29228: LD_VAR 0 4
29232: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
29233: LD_INT 0
29235: PPUSH
29236: PPUSH
29237: PPUSH
29238: PPUSH
29239: PPUSH
29240: PPUSH
29241: PPUSH
29242: PPUSH
29243: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
29244: LD_VAR 0 1
29248: PPUSH
29249: CALL_OW 264
29253: PUSH
29254: LD_INT 81
29256: EQUAL
29257: NOT
29258: PUSH
29259: LD_VAR 0 1
29263: PUSH
29264: LD_EXP 100
29268: IN
29269: NOT
29270: OR
29271: IFFALSE 29275
// exit ;
29273: GO 29597
// index := GetElementIndex ( minersList , unit ) ;
29275: LD_ADDR_VAR 0 6
29279: PUSH
29280: LD_EXP 100
29284: PPUSH
29285: LD_VAR 0 1
29289: PPUSH
29290: CALL 34869 0 2
29294: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
29295: LD_ADDR_VAR 0 8
29299: PUSH
29300: LD_EXP 102
29304: PUSH
29305: LD_EXP 101
29309: PUSH
29310: LD_VAR 0 6
29314: ARRAY
29315: MINUS
29316: ST_TO_ADDR
// if not minesFreeAmount then
29317: LD_VAR 0 8
29321: NOT
29322: IFFALSE 29326
// exit ;
29324: GO 29597
// tmp := [ ] ;
29326: LD_ADDR_VAR 0 7
29330: PUSH
29331: EMPTY
29332: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
29333: LD_ADDR_VAR 0 5
29337: PUSH
29338: DOUBLE
29339: LD_INT 1
29341: DEC
29342: ST_TO_ADDR
29343: LD_VAR 0 8
29347: PUSH
29348: FOR_TO
29349: IFFALSE 29544
// begin _d := rand ( 0 , 5 ) ;
29351: LD_ADDR_VAR 0 11
29355: PUSH
29356: LD_INT 0
29358: PPUSH
29359: LD_INT 5
29361: PPUSH
29362: CALL_OW 12
29366: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
29367: LD_ADDR_VAR 0 12
29371: PUSH
29372: LD_INT 2
29374: PPUSH
29375: LD_INT 6
29377: PPUSH
29378: CALL_OW 12
29382: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
29383: LD_ADDR_VAR 0 9
29387: PUSH
29388: LD_VAR 0 2
29392: PPUSH
29393: LD_VAR 0 11
29397: PPUSH
29398: LD_VAR 0 12
29402: PPUSH
29403: CALL_OW 272
29407: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
29408: LD_ADDR_VAR 0 10
29412: PUSH
29413: LD_VAR 0 3
29417: PPUSH
29418: LD_VAR 0 11
29422: PPUSH
29423: LD_VAR 0 12
29427: PPUSH
29428: CALL_OW 273
29432: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
29433: LD_VAR 0 9
29437: PPUSH
29438: LD_VAR 0 10
29442: PPUSH
29443: CALL_OW 488
29447: PUSH
29448: LD_VAR 0 9
29452: PUSH
29453: LD_VAR 0 10
29457: PUSH
29458: EMPTY
29459: LIST
29460: LIST
29461: PUSH
29462: LD_VAR 0 7
29466: IN
29467: NOT
29468: AND
29469: PUSH
29470: LD_VAR 0 9
29474: PPUSH
29475: LD_VAR 0 10
29479: PPUSH
29480: CALL_OW 458
29484: NOT
29485: AND
29486: IFFALSE 29528
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
29488: LD_ADDR_VAR 0 7
29492: PUSH
29493: LD_VAR 0 7
29497: PPUSH
29498: LD_VAR 0 7
29502: PUSH
29503: LD_INT 1
29505: PLUS
29506: PPUSH
29507: LD_VAR 0 9
29511: PUSH
29512: LD_VAR 0 10
29516: PUSH
29517: EMPTY
29518: LIST
29519: LIST
29520: PPUSH
29521: CALL_OW 1
29525: ST_TO_ADDR
29526: GO 29542
// i := i - 1 ;
29528: LD_ADDR_VAR 0 5
29532: PUSH
29533: LD_VAR 0 5
29537: PUSH
29538: LD_INT 1
29540: MINUS
29541: ST_TO_ADDR
// end ;
29542: GO 29348
29544: POP
29545: POP
// for i in tmp do
29546: LD_ADDR_VAR 0 5
29550: PUSH
29551: LD_VAR 0 7
29555: PUSH
29556: FOR_IN
29557: IFFALSE 29595
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
29559: LD_VAR 0 1
29563: PPUSH
29564: LD_VAR 0 5
29568: PUSH
29569: LD_INT 1
29571: ARRAY
29572: PPUSH
29573: LD_VAR 0 5
29577: PUSH
29578: LD_INT 2
29580: ARRAY
29581: PPUSH
29582: CALL 28541 0 3
29586: NOT
29587: IFFALSE 29593
// exit ;
29589: POP
29590: POP
29591: GO 29597
29593: GO 29556
29595: POP
29596: POP
// end ;
29597: LD_VAR 0 4
29601: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
29602: LD_INT 0
29604: PPUSH
29605: PPUSH
29606: PPUSH
29607: PPUSH
29608: PPUSH
29609: PPUSH
29610: PPUSH
29611: PPUSH
29612: PPUSH
// if GetClass ( unit ) <> class_sniper then
29613: LD_VAR 0 1
29617: PPUSH
29618: CALL_OW 257
29622: PUSH
29623: LD_INT 5
29625: NONEQUAL
29626: IFFALSE 29630
// exit ;
29628: GO 30096
// dist := 8 ;
29630: LD_ADDR_VAR 0 5
29634: PUSH
29635: LD_INT 8
29637: ST_TO_ADDR
// viewRange := 12 ;
29638: LD_ADDR_VAR 0 8
29642: PUSH
29643: LD_INT 12
29645: ST_TO_ADDR
// side := GetSide ( unit ) ;
29646: LD_ADDR_VAR 0 6
29650: PUSH
29651: LD_VAR 0 1
29655: PPUSH
29656: CALL_OW 255
29660: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
29661: LD_INT 61
29663: PPUSH
29664: LD_VAR 0 6
29668: PPUSH
29669: CALL_OW 321
29673: PUSH
29674: LD_INT 2
29676: EQUAL
29677: IFFALSE 29687
// viewRange := 16 ;
29679: LD_ADDR_VAR 0 8
29683: PUSH
29684: LD_INT 16
29686: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
29687: LD_VAR 0 1
29691: PPUSH
29692: LD_VAR 0 2
29696: PPUSH
29697: LD_VAR 0 3
29701: PPUSH
29702: CALL_OW 297
29706: PUSH
29707: LD_VAR 0 5
29711: GREATER
29712: IFFALSE 29791
// begin ComMoveXY ( unit , x , y ) ;
29714: LD_VAR 0 1
29718: PPUSH
29719: LD_VAR 0 2
29723: PPUSH
29724: LD_VAR 0 3
29728: PPUSH
29729: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
29733: LD_INT 35
29735: PPUSH
29736: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
29740: LD_VAR 0 1
29744: PPUSH
29745: LD_VAR 0 2
29749: PPUSH
29750: LD_VAR 0 3
29754: PPUSH
29755: CALL 66630 0 3
29759: NOT
29760: IFFALSE 29764
// exit ;
29762: GO 30096
// until GetDistUnitXY ( unit , x , y ) < dist ;
29764: LD_VAR 0 1
29768: PPUSH
29769: LD_VAR 0 2
29773: PPUSH
29774: LD_VAR 0 3
29778: PPUSH
29779: CALL_OW 297
29783: PUSH
29784: LD_VAR 0 5
29788: LESS
29789: IFFALSE 29733
// end ; ComTurnXY ( unit , x , y ) ;
29791: LD_VAR 0 1
29795: PPUSH
29796: LD_VAR 0 2
29800: PPUSH
29801: LD_VAR 0 3
29805: PPUSH
29806: CALL_OW 118
// repeat if Multiplayer then
29810: LD_OWVAR 4
29814: IFFALSE 29825
// wait ( 35 ) else
29816: LD_INT 35
29818: PPUSH
29819: CALL_OW 67
29823: GO 29832
// wait ( 5 ) ;
29825: LD_INT 5
29827: PPUSH
29828: CALL_OW 67
// _d := GetDir ( unit ) ;
29832: LD_ADDR_VAR 0 11
29836: PUSH
29837: LD_VAR 0 1
29841: PPUSH
29842: CALL_OW 254
29846: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
29847: LD_ADDR_VAR 0 7
29851: PUSH
29852: LD_VAR 0 1
29856: PPUSH
29857: CALL_OW 250
29861: PPUSH
29862: LD_VAR 0 1
29866: PPUSH
29867: CALL_OW 251
29871: PPUSH
29872: LD_VAR 0 2
29876: PPUSH
29877: LD_VAR 0 3
29881: PPUSH
29882: CALL 69238 0 4
29886: ST_TO_ADDR
// until dir = _d ;
29887: LD_VAR 0 7
29891: PUSH
29892: LD_VAR 0 11
29896: EQUAL
29897: IFFALSE 29810
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
29899: LD_ADDR_VAR 0 9
29903: PUSH
29904: LD_VAR 0 1
29908: PPUSH
29909: CALL_OW 250
29913: PPUSH
29914: LD_VAR 0 7
29918: PPUSH
29919: LD_VAR 0 5
29923: PPUSH
29924: CALL_OW 272
29928: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
29929: LD_ADDR_VAR 0 10
29933: PUSH
29934: LD_VAR 0 1
29938: PPUSH
29939: CALL_OW 251
29943: PPUSH
29944: LD_VAR 0 7
29948: PPUSH
29949: LD_VAR 0 5
29953: PPUSH
29954: CALL_OW 273
29958: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
29959: LD_VAR 0 9
29963: PPUSH
29964: LD_VAR 0 10
29968: PPUSH
29969: CALL_OW 488
29973: NOT
29974: IFFALSE 29978
// exit ;
29976: GO 30096
// ComAnimCustom ( unit , 1 ) ;
29978: LD_VAR 0 1
29982: PPUSH
29983: LD_INT 1
29985: PPUSH
29986: CALL_OW 592
// p := 0 ;
29990: LD_ADDR_VAR 0 12
29994: PUSH
29995: LD_INT 0
29997: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
29998: LD_VAR 0 9
30002: PPUSH
30003: LD_VAR 0 10
30007: PPUSH
30008: LD_VAR 0 6
30012: PPUSH
30013: LD_VAR 0 8
30017: PPUSH
30018: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
30022: LD_INT 35
30024: PPUSH
30025: CALL_OW 67
// p := Inc ( p ) ;
30029: LD_ADDR_VAR 0 12
30033: PUSH
30034: LD_VAR 0 12
30038: PPUSH
30039: CALL 69194 0 1
30043: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
30044: LD_VAR 0 12
30048: PUSH
30049: LD_INT 3
30051: EQUAL
30052: PUSH
30053: LD_VAR 0 1
30057: PPUSH
30058: CALL_OW 302
30062: NOT
30063: OR
30064: PUSH
30065: LD_VAR 0 1
30069: PPUSH
30070: CALL_OW 301
30074: OR
30075: IFFALSE 30022
// RemoveSeeing ( _x , _y , side ) ;
30077: LD_VAR 0 9
30081: PPUSH
30082: LD_VAR 0 10
30086: PPUSH
30087: LD_VAR 0 6
30091: PPUSH
30092: CALL_OW 331
// end ; end_of_file
30096: LD_VAR 0 4
30100: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
30101: LD_INT 0
30103: PPUSH
30104: PPUSH
// if exist_mode then
30105: LD_VAR 0 2
30109: IFFALSE 30155
// begin unit := CreateCharacter ( prefix & ident ) ;
30111: LD_ADDR_VAR 0 5
30115: PUSH
30116: LD_VAR 0 3
30120: PUSH
30121: LD_VAR 0 1
30125: STR
30126: PPUSH
30127: CALL_OW 34
30131: ST_TO_ADDR
// if unit then
30132: LD_VAR 0 5
30136: IFFALSE 30153
// DeleteCharacters ( prefix & ident ) ;
30138: LD_VAR 0 3
30142: PUSH
30143: LD_VAR 0 1
30147: STR
30148: PPUSH
30149: CALL_OW 40
// end else
30153: GO 30170
// unit := NewCharacter ( ident ) ;
30155: LD_ADDR_VAR 0 5
30159: PUSH
30160: LD_VAR 0 1
30164: PPUSH
30165: CALL_OW 25
30169: ST_TO_ADDR
// result := unit ;
30170: LD_ADDR_VAR 0 4
30174: PUSH
30175: LD_VAR 0 5
30179: ST_TO_ADDR
// end ;
30180: LD_VAR 0 4
30184: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
30185: LD_INT 0
30187: PPUSH
30188: PPUSH
// if not side or not nation then
30189: LD_VAR 0 1
30193: NOT
30194: PUSH
30195: LD_VAR 0 2
30199: NOT
30200: OR
30201: IFFALSE 30205
// exit ;
30203: GO 30973
// case nation of nation_american :
30205: LD_VAR 0 2
30209: PUSH
30210: LD_INT 1
30212: DOUBLE
30213: EQUAL
30214: IFTRUE 30218
30216: GO 30432
30218: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
30219: LD_ADDR_VAR 0 4
30223: PUSH
30224: LD_INT 35
30226: PUSH
30227: LD_INT 45
30229: PUSH
30230: LD_INT 46
30232: PUSH
30233: LD_INT 47
30235: PUSH
30236: LD_INT 82
30238: PUSH
30239: LD_INT 83
30241: PUSH
30242: LD_INT 84
30244: PUSH
30245: LD_INT 85
30247: PUSH
30248: LD_INT 86
30250: PUSH
30251: LD_INT 1
30253: PUSH
30254: LD_INT 2
30256: PUSH
30257: LD_INT 6
30259: PUSH
30260: LD_INT 15
30262: PUSH
30263: LD_INT 16
30265: PUSH
30266: LD_INT 7
30268: PUSH
30269: LD_INT 12
30271: PUSH
30272: LD_INT 13
30274: PUSH
30275: LD_INT 10
30277: PUSH
30278: LD_INT 14
30280: PUSH
30281: LD_INT 20
30283: PUSH
30284: LD_INT 21
30286: PUSH
30287: LD_INT 22
30289: PUSH
30290: LD_INT 25
30292: PUSH
30293: LD_INT 32
30295: PUSH
30296: LD_INT 27
30298: PUSH
30299: LD_INT 36
30301: PUSH
30302: LD_INT 69
30304: PUSH
30305: LD_INT 39
30307: PUSH
30308: LD_INT 34
30310: PUSH
30311: LD_INT 40
30313: PUSH
30314: LD_INT 48
30316: PUSH
30317: LD_INT 49
30319: PUSH
30320: LD_INT 50
30322: PUSH
30323: LD_INT 51
30325: PUSH
30326: LD_INT 52
30328: PUSH
30329: LD_INT 53
30331: PUSH
30332: LD_INT 54
30334: PUSH
30335: LD_INT 55
30337: PUSH
30338: LD_INT 56
30340: PUSH
30341: LD_INT 57
30343: PUSH
30344: LD_INT 58
30346: PUSH
30347: LD_INT 59
30349: PUSH
30350: LD_INT 60
30352: PUSH
30353: LD_INT 61
30355: PUSH
30356: LD_INT 62
30358: PUSH
30359: LD_INT 80
30361: PUSH
30362: LD_INT 82
30364: PUSH
30365: LD_INT 83
30367: PUSH
30368: LD_INT 84
30370: PUSH
30371: LD_INT 85
30373: PUSH
30374: LD_INT 86
30376: PUSH
30377: EMPTY
30378: LIST
30379: LIST
30380: LIST
30381: LIST
30382: LIST
30383: LIST
30384: LIST
30385: LIST
30386: LIST
30387: LIST
30388: LIST
30389: LIST
30390: LIST
30391: LIST
30392: LIST
30393: LIST
30394: LIST
30395: LIST
30396: LIST
30397: LIST
30398: LIST
30399: LIST
30400: LIST
30401: LIST
30402: LIST
30403: LIST
30404: LIST
30405: LIST
30406: LIST
30407: LIST
30408: LIST
30409: LIST
30410: LIST
30411: LIST
30412: LIST
30413: LIST
30414: LIST
30415: LIST
30416: LIST
30417: LIST
30418: LIST
30419: LIST
30420: LIST
30421: LIST
30422: LIST
30423: LIST
30424: LIST
30425: LIST
30426: LIST
30427: LIST
30428: LIST
30429: ST_TO_ADDR
30430: GO 30897
30432: LD_INT 2
30434: DOUBLE
30435: EQUAL
30436: IFTRUE 30440
30438: GO 30666
30440: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
30441: LD_ADDR_VAR 0 4
30445: PUSH
30446: LD_INT 35
30448: PUSH
30449: LD_INT 45
30451: PUSH
30452: LD_INT 46
30454: PUSH
30455: LD_INT 47
30457: PUSH
30458: LD_INT 82
30460: PUSH
30461: LD_INT 83
30463: PUSH
30464: LD_INT 84
30466: PUSH
30467: LD_INT 85
30469: PUSH
30470: LD_INT 87
30472: PUSH
30473: LD_INT 70
30475: PUSH
30476: LD_INT 1
30478: PUSH
30479: LD_INT 11
30481: PUSH
30482: LD_INT 3
30484: PUSH
30485: LD_INT 4
30487: PUSH
30488: LD_INT 5
30490: PUSH
30491: LD_INT 6
30493: PUSH
30494: LD_INT 15
30496: PUSH
30497: LD_INT 18
30499: PUSH
30500: LD_INT 7
30502: PUSH
30503: LD_INT 17
30505: PUSH
30506: LD_INT 8
30508: PUSH
30509: LD_INT 20
30511: PUSH
30512: LD_INT 21
30514: PUSH
30515: LD_INT 22
30517: PUSH
30518: LD_INT 72
30520: PUSH
30521: LD_INT 26
30523: PUSH
30524: LD_INT 69
30526: PUSH
30527: LD_INT 39
30529: PUSH
30530: LD_INT 40
30532: PUSH
30533: LD_INT 41
30535: PUSH
30536: LD_INT 42
30538: PUSH
30539: LD_INT 43
30541: PUSH
30542: LD_INT 48
30544: PUSH
30545: LD_INT 49
30547: PUSH
30548: LD_INT 50
30550: PUSH
30551: LD_INT 51
30553: PUSH
30554: LD_INT 52
30556: PUSH
30557: LD_INT 53
30559: PUSH
30560: LD_INT 54
30562: PUSH
30563: LD_INT 55
30565: PUSH
30566: LD_INT 56
30568: PUSH
30569: LD_INT 60
30571: PUSH
30572: LD_INT 61
30574: PUSH
30575: LD_INT 62
30577: PUSH
30578: LD_INT 66
30580: PUSH
30581: LD_INT 67
30583: PUSH
30584: LD_INT 68
30586: PUSH
30587: LD_INT 81
30589: PUSH
30590: LD_INT 82
30592: PUSH
30593: LD_INT 83
30595: PUSH
30596: LD_INT 84
30598: PUSH
30599: LD_INT 85
30601: PUSH
30602: LD_INT 87
30604: PUSH
30605: LD_INT 88
30607: PUSH
30608: EMPTY
30609: LIST
30610: LIST
30611: LIST
30612: LIST
30613: LIST
30614: LIST
30615: LIST
30616: LIST
30617: LIST
30618: LIST
30619: LIST
30620: LIST
30621: LIST
30622: LIST
30623: LIST
30624: LIST
30625: LIST
30626: LIST
30627: LIST
30628: LIST
30629: LIST
30630: LIST
30631: LIST
30632: LIST
30633: LIST
30634: LIST
30635: LIST
30636: LIST
30637: LIST
30638: LIST
30639: LIST
30640: LIST
30641: LIST
30642: LIST
30643: LIST
30644: LIST
30645: LIST
30646: LIST
30647: LIST
30648: LIST
30649: LIST
30650: LIST
30651: LIST
30652: LIST
30653: LIST
30654: LIST
30655: LIST
30656: LIST
30657: LIST
30658: LIST
30659: LIST
30660: LIST
30661: LIST
30662: LIST
30663: ST_TO_ADDR
30664: GO 30897
30666: LD_INT 3
30668: DOUBLE
30669: EQUAL
30670: IFTRUE 30674
30672: GO 30896
30674: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
30675: LD_ADDR_VAR 0 4
30679: PUSH
30680: LD_INT 46
30682: PUSH
30683: LD_INT 47
30685: PUSH
30686: LD_INT 1
30688: PUSH
30689: LD_INT 2
30691: PUSH
30692: LD_INT 82
30694: PUSH
30695: LD_INT 83
30697: PUSH
30698: LD_INT 84
30700: PUSH
30701: LD_INT 85
30703: PUSH
30704: LD_INT 86
30706: PUSH
30707: LD_INT 11
30709: PUSH
30710: LD_INT 9
30712: PUSH
30713: LD_INT 20
30715: PUSH
30716: LD_INT 19
30718: PUSH
30719: LD_INT 21
30721: PUSH
30722: LD_INT 24
30724: PUSH
30725: LD_INT 22
30727: PUSH
30728: LD_INT 25
30730: PUSH
30731: LD_INT 28
30733: PUSH
30734: LD_INT 29
30736: PUSH
30737: LD_INT 30
30739: PUSH
30740: LD_INT 31
30742: PUSH
30743: LD_INT 37
30745: PUSH
30746: LD_INT 38
30748: PUSH
30749: LD_INT 32
30751: PUSH
30752: LD_INT 27
30754: PUSH
30755: LD_INT 33
30757: PUSH
30758: LD_INT 69
30760: PUSH
30761: LD_INT 39
30763: PUSH
30764: LD_INT 34
30766: PUSH
30767: LD_INT 40
30769: PUSH
30770: LD_INT 71
30772: PUSH
30773: LD_INT 23
30775: PUSH
30776: LD_INT 44
30778: PUSH
30779: LD_INT 48
30781: PUSH
30782: LD_INT 49
30784: PUSH
30785: LD_INT 50
30787: PUSH
30788: LD_INT 51
30790: PUSH
30791: LD_INT 52
30793: PUSH
30794: LD_INT 53
30796: PUSH
30797: LD_INT 54
30799: PUSH
30800: LD_INT 55
30802: PUSH
30803: LD_INT 56
30805: PUSH
30806: LD_INT 57
30808: PUSH
30809: LD_INT 58
30811: PUSH
30812: LD_INT 59
30814: PUSH
30815: LD_INT 63
30817: PUSH
30818: LD_INT 64
30820: PUSH
30821: LD_INT 65
30823: PUSH
30824: LD_INT 82
30826: PUSH
30827: LD_INT 83
30829: PUSH
30830: LD_INT 84
30832: PUSH
30833: LD_INT 85
30835: PUSH
30836: LD_INT 86
30838: PUSH
30839: EMPTY
30840: LIST
30841: LIST
30842: LIST
30843: LIST
30844: LIST
30845: LIST
30846: LIST
30847: LIST
30848: LIST
30849: LIST
30850: LIST
30851: LIST
30852: LIST
30853: LIST
30854: LIST
30855: LIST
30856: LIST
30857: LIST
30858: LIST
30859: LIST
30860: LIST
30861: LIST
30862: LIST
30863: LIST
30864: LIST
30865: LIST
30866: LIST
30867: LIST
30868: LIST
30869: LIST
30870: LIST
30871: LIST
30872: LIST
30873: LIST
30874: LIST
30875: LIST
30876: LIST
30877: LIST
30878: LIST
30879: LIST
30880: LIST
30881: LIST
30882: LIST
30883: LIST
30884: LIST
30885: LIST
30886: LIST
30887: LIST
30888: LIST
30889: LIST
30890: LIST
30891: LIST
30892: LIST
30893: ST_TO_ADDR
30894: GO 30897
30896: POP
// if state > - 1 and state < 3 then
30897: LD_VAR 0 3
30901: PUSH
30902: LD_INT 1
30904: NEG
30905: GREATER
30906: PUSH
30907: LD_VAR 0 3
30911: PUSH
30912: LD_INT 3
30914: LESS
30915: AND
30916: IFFALSE 30973
// for i in result do
30918: LD_ADDR_VAR 0 5
30922: PUSH
30923: LD_VAR 0 4
30927: PUSH
30928: FOR_IN
30929: IFFALSE 30971
// if GetTech ( i , side ) <> state then
30931: LD_VAR 0 5
30935: PPUSH
30936: LD_VAR 0 1
30940: PPUSH
30941: CALL_OW 321
30945: PUSH
30946: LD_VAR 0 3
30950: NONEQUAL
30951: IFFALSE 30969
// result := result diff i ;
30953: LD_ADDR_VAR 0 4
30957: PUSH
30958: LD_VAR 0 4
30962: PUSH
30963: LD_VAR 0 5
30967: DIFF
30968: ST_TO_ADDR
30969: GO 30928
30971: POP
30972: POP
// end ;
30973: LD_VAR 0 4
30977: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
30978: LD_INT 0
30980: PPUSH
30981: PPUSH
30982: PPUSH
// result := true ;
30983: LD_ADDR_VAR 0 3
30987: PUSH
30988: LD_INT 1
30990: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
30991: LD_ADDR_VAR 0 5
30995: PUSH
30996: LD_VAR 0 2
31000: PPUSH
31001: CALL_OW 480
31005: ST_TO_ADDR
// if not tmp then
31006: LD_VAR 0 5
31010: NOT
31011: IFFALSE 31015
// exit ;
31013: GO 31064
// for i in tmp do
31015: LD_ADDR_VAR 0 4
31019: PUSH
31020: LD_VAR 0 5
31024: PUSH
31025: FOR_IN
31026: IFFALSE 31062
// if GetTech ( i , side ) <> state_researched then
31028: LD_VAR 0 4
31032: PPUSH
31033: LD_VAR 0 1
31037: PPUSH
31038: CALL_OW 321
31042: PUSH
31043: LD_INT 2
31045: NONEQUAL
31046: IFFALSE 31060
// begin result := false ;
31048: LD_ADDR_VAR 0 3
31052: PUSH
31053: LD_INT 0
31055: ST_TO_ADDR
// exit ;
31056: POP
31057: POP
31058: GO 31064
// end ;
31060: GO 31025
31062: POP
31063: POP
// end ;
31064: LD_VAR 0 3
31068: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
31069: LD_INT 0
31071: PPUSH
31072: PPUSH
31073: PPUSH
31074: PPUSH
31075: PPUSH
31076: PPUSH
31077: PPUSH
31078: PPUSH
31079: PPUSH
31080: PPUSH
31081: PPUSH
31082: PPUSH
31083: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
31084: LD_VAR 0 1
31088: NOT
31089: PUSH
31090: LD_VAR 0 1
31094: PPUSH
31095: CALL_OW 257
31099: PUSH
31100: LD_INT 9
31102: NONEQUAL
31103: OR
31104: IFFALSE 31108
// exit ;
31106: GO 31681
// side := GetSide ( unit ) ;
31108: LD_ADDR_VAR 0 9
31112: PUSH
31113: LD_VAR 0 1
31117: PPUSH
31118: CALL_OW 255
31122: ST_TO_ADDR
// tech_space := tech_spacanom ;
31123: LD_ADDR_VAR 0 12
31127: PUSH
31128: LD_INT 29
31130: ST_TO_ADDR
// tech_time := tech_taurad ;
31131: LD_ADDR_VAR 0 13
31135: PUSH
31136: LD_INT 28
31138: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
31139: LD_ADDR_VAR 0 11
31143: PUSH
31144: LD_VAR 0 1
31148: PPUSH
31149: CALL_OW 310
31153: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
31154: LD_VAR 0 11
31158: PPUSH
31159: CALL_OW 247
31163: PUSH
31164: LD_INT 2
31166: EQUAL
31167: IFFALSE 31171
// exit ;
31169: GO 31681
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
31171: LD_ADDR_VAR 0 8
31175: PUSH
31176: LD_INT 81
31178: PUSH
31179: LD_VAR 0 9
31183: PUSH
31184: EMPTY
31185: LIST
31186: LIST
31187: PUSH
31188: LD_INT 3
31190: PUSH
31191: LD_INT 21
31193: PUSH
31194: LD_INT 3
31196: PUSH
31197: EMPTY
31198: LIST
31199: LIST
31200: PUSH
31201: EMPTY
31202: LIST
31203: LIST
31204: PUSH
31205: EMPTY
31206: LIST
31207: LIST
31208: PPUSH
31209: CALL_OW 69
31213: ST_TO_ADDR
// if not tmp then
31214: LD_VAR 0 8
31218: NOT
31219: IFFALSE 31223
// exit ;
31221: GO 31681
// if in_unit then
31223: LD_VAR 0 11
31227: IFFALSE 31251
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
31229: LD_ADDR_VAR 0 10
31233: PUSH
31234: LD_VAR 0 8
31238: PPUSH
31239: LD_VAR 0 11
31243: PPUSH
31244: CALL_OW 74
31248: ST_TO_ADDR
31249: GO 31271
// enemy := NearestUnitToUnit ( tmp , unit ) ;
31251: LD_ADDR_VAR 0 10
31255: PUSH
31256: LD_VAR 0 8
31260: PPUSH
31261: LD_VAR 0 1
31265: PPUSH
31266: CALL_OW 74
31270: ST_TO_ADDR
// if not enemy then
31271: LD_VAR 0 10
31275: NOT
31276: IFFALSE 31280
// exit ;
31278: GO 31681
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
31280: LD_VAR 0 11
31284: PUSH
31285: LD_VAR 0 11
31289: PPUSH
31290: LD_VAR 0 10
31294: PPUSH
31295: CALL_OW 296
31299: PUSH
31300: LD_INT 13
31302: GREATER
31303: AND
31304: PUSH
31305: LD_VAR 0 1
31309: PPUSH
31310: LD_VAR 0 10
31314: PPUSH
31315: CALL_OW 296
31319: PUSH
31320: LD_INT 12
31322: GREATER
31323: OR
31324: IFFALSE 31328
// exit ;
31326: GO 31681
// missile := [ 1 ] ;
31328: LD_ADDR_VAR 0 14
31332: PUSH
31333: LD_INT 1
31335: PUSH
31336: EMPTY
31337: LIST
31338: ST_TO_ADDR
// if Researched ( side , tech_space ) then
31339: LD_VAR 0 9
31343: PPUSH
31344: LD_VAR 0 12
31348: PPUSH
31349: CALL_OW 325
31353: IFFALSE 31382
// missile := Replace ( missile , missile + 1 , 2 ) ;
31355: LD_ADDR_VAR 0 14
31359: PUSH
31360: LD_VAR 0 14
31364: PPUSH
31365: LD_VAR 0 14
31369: PUSH
31370: LD_INT 1
31372: PLUS
31373: PPUSH
31374: LD_INT 2
31376: PPUSH
31377: CALL_OW 1
31381: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
31382: LD_VAR 0 9
31386: PPUSH
31387: LD_VAR 0 13
31391: PPUSH
31392: CALL_OW 325
31396: PUSH
31397: LD_VAR 0 10
31401: PPUSH
31402: CALL_OW 255
31406: PPUSH
31407: LD_VAR 0 13
31411: PPUSH
31412: CALL_OW 325
31416: NOT
31417: AND
31418: IFFALSE 31447
// missile := Replace ( missile , missile + 1 , 3 ) ;
31420: LD_ADDR_VAR 0 14
31424: PUSH
31425: LD_VAR 0 14
31429: PPUSH
31430: LD_VAR 0 14
31434: PUSH
31435: LD_INT 1
31437: PLUS
31438: PPUSH
31439: LD_INT 3
31441: PPUSH
31442: CALL_OW 1
31446: ST_TO_ADDR
// if missile < 2 then
31447: LD_VAR 0 14
31451: PUSH
31452: LD_INT 2
31454: LESS
31455: IFFALSE 31459
// exit ;
31457: GO 31681
// x := GetX ( enemy ) ;
31459: LD_ADDR_VAR 0 4
31463: PUSH
31464: LD_VAR 0 10
31468: PPUSH
31469: CALL_OW 250
31473: ST_TO_ADDR
// y := GetY ( enemy ) ;
31474: LD_ADDR_VAR 0 5
31478: PUSH
31479: LD_VAR 0 10
31483: PPUSH
31484: CALL_OW 251
31488: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
31489: LD_ADDR_VAR 0 6
31493: PUSH
31494: LD_VAR 0 4
31498: PUSH
31499: LD_INT 1
31501: NEG
31502: PPUSH
31503: LD_INT 1
31505: PPUSH
31506: CALL_OW 12
31510: PLUS
31511: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
31512: LD_ADDR_VAR 0 7
31516: PUSH
31517: LD_VAR 0 5
31521: PUSH
31522: LD_INT 1
31524: NEG
31525: PPUSH
31526: LD_INT 1
31528: PPUSH
31529: CALL_OW 12
31533: PLUS
31534: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
31535: LD_VAR 0 6
31539: PPUSH
31540: LD_VAR 0 7
31544: PPUSH
31545: CALL_OW 488
31549: NOT
31550: IFFALSE 31572
// begin _x := x ;
31552: LD_ADDR_VAR 0 6
31556: PUSH
31557: LD_VAR 0 4
31561: ST_TO_ADDR
// _y := y ;
31562: LD_ADDR_VAR 0 7
31566: PUSH
31567: LD_VAR 0 5
31571: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
31572: LD_ADDR_VAR 0 3
31576: PUSH
31577: LD_INT 1
31579: PPUSH
31580: LD_VAR 0 14
31584: PPUSH
31585: CALL_OW 12
31589: ST_TO_ADDR
// case i of 1 :
31590: LD_VAR 0 3
31594: PUSH
31595: LD_INT 1
31597: DOUBLE
31598: EQUAL
31599: IFTRUE 31603
31601: GO 31620
31603: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
31604: LD_VAR 0 1
31608: PPUSH
31609: LD_VAR 0 10
31613: PPUSH
31614: CALL_OW 115
31618: GO 31681
31620: LD_INT 2
31622: DOUBLE
31623: EQUAL
31624: IFTRUE 31628
31626: GO 31650
31628: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
31629: LD_VAR 0 1
31633: PPUSH
31634: LD_VAR 0 6
31638: PPUSH
31639: LD_VAR 0 7
31643: PPUSH
31644: CALL_OW 153
31648: GO 31681
31650: LD_INT 3
31652: DOUBLE
31653: EQUAL
31654: IFTRUE 31658
31656: GO 31680
31658: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
31659: LD_VAR 0 1
31663: PPUSH
31664: LD_VAR 0 6
31668: PPUSH
31669: LD_VAR 0 7
31673: PPUSH
31674: CALL_OW 154
31678: GO 31681
31680: POP
// end ;
31681: LD_VAR 0 2
31685: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
31686: LD_INT 0
31688: PPUSH
31689: PPUSH
31690: PPUSH
31691: PPUSH
31692: PPUSH
31693: PPUSH
// if not unit or not building then
31694: LD_VAR 0 1
31698: NOT
31699: PUSH
31700: LD_VAR 0 2
31704: NOT
31705: OR
31706: IFFALSE 31710
// exit ;
31708: GO 31868
// x := GetX ( building ) ;
31710: LD_ADDR_VAR 0 5
31714: PUSH
31715: LD_VAR 0 2
31719: PPUSH
31720: CALL_OW 250
31724: ST_TO_ADDR
// y := GetY ( building ) ;
31725: LD_ADDR_VAR 0 6
31729: PUSH
31730: LD_VAR 0 2
31734: PPUSH
31735: CALL_OW 251
31739: ST_TO_ADDR
// for i = 0 to 5 do
31740: LD_ADDR_VAR 0 4
31744: PUSH
31745: DOUBLE
31746: LD_INT 0
31748: DEC
31749: ST_TO_ADDR
31750: LD_INT 5
31752: PUSH
31753: FOR_TO
31754: IFFALSE 31866
// begin _x := ShiftX ( x , i , 3 ) ;
31756: LD_ADDR_VAR 0 7
31760: PUSH
31761: LD_VAR 0 5
31765: PPUSH
31766: LD_VAR 0 4
31770: PPUSH
31771: LD_INT 3
31773: PPUSH
31774: CALL_OW 272
31778: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
31779: LD_ADDR_VAR 0 8
31783: PUSH
31784: LD_VAR 0 6
31788: PPUSH
31789: LD_VAR 0 4
31793: PPUSH
31794: LD_INT 3
31796: PPUSH
31797: CALL_OW 273
31801: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
31802: LD_VAR 0 7
31806: PPUSH
31807: LD_VAR 0 8
31811: PPUSH
31812: CALL_OW 488
31816: NOT
31817: IFFALSE 31821
// continue ;
31819: GO 31753
// if HexInfo ( _x , _y ) = 0 then
31821: LD_VAR 0 7
31825: PPUSH
31826: LD_VAR 0 8
31830: PPUSH
31831: CALL_OW 428
31835: PUSH
31836: LD_INT 0
31838: EQUAL
31839: IFFALSE 31864
// begin ComMoveXY ( unit , _x , _y ) ;
31841: LD_VAR 0 1
31845: PPUSH
31846: LD_VAR 0 7
31850: PPUSH
31851: LD_VAR 0 8
31855: PPUSH
31856: CALL_OW 111
// exit ;
31860: POP
31861: POP
31862: GO 31868
// end ; end ;
31864: GO 31753
31866: POP
31867: POP
// end ;
31868: LD_VAR 0 3
31872: RET
// export function ScanBase ( side , base_area ) ; begin
31873: LD_INT 0
31875: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
31876: LD_ADDR_VAR 0 3
31880: PUSH
31881: LD_VAR 0 2
31885: PPUSH
31886: LD_INT 81
31888: PUSH
31889: LD_VAR 0 1
31893: PUSH
31894: EMPTY
31895: LIST
31896: LIST
31897: PPUSH
31898: CALL_OW 70
31902: ST_TO_ADDR
// end ;
31903: LD_VAR 0 3
31907: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
31908: LD_INT 0
31910: PPUSH
31911: PPUSH
31912: PPUSH
31913: PPUSH
// result := false ;
31914: LD_ADDR_VAR 0 2
31918: PUSH
31919: LD_INT 0
31921: ST_TO_ADDR
// side := GetSide ( unit ) ;
31922: LD_ADDR_VAR 0 3
31926: PUSH
31927: LD_VAR 0 1
31931: PPUSH
31932: CALL_OW 255
31936: ST_TO_ADDR
// nat := GetNation ( unit ) ;
31937: LD_ADDR_VAR 0 4
31941: PUSH
31942: LD_VAR 0 1
31946: PPUSH
31947: CALL_OW 248
31951: ST_TO_ADDR
// case nat of 1 :
31952: LD_VAR 0 4
31956: PUSH
31957: LD_INT 1
31959: DOUBLE
31960: EQUAL
31961: IFTRUE 31965
31963: GO 31976
31965: POP
// tech := tech_lassight ; 2 :
31966: LD_ADDR_VAR 0 5
31970: PUSH
31971: LD_INT 12
31973: ST_TO_ADDR
31974: GO 32015
31976: LD_INT 2
31978: DOUBLE
31979: EQUAL
31980: IFTRUE 31984
31982: GO 31995
31984: POP
// tech := tech_mortar ; 3 :
31985: LD_ADDR_VAR 0 5
31989: PUSH
31990: LD_INT 41
31992: ST_TO_ADDR
31993: GO 32015
31995: LD_INT 3
31997: DOUBLE
31998: EQUAL
31999: IFTRUE 32003
32001: GO 32014
32003: POP
// tech := tech_bazooka ; end ;
32004: LD_ADDR_VAR 0 5
32008: PUSH
32009: LD_INT 44
32011: ST_TO_ADDR
32012: GO 32015
32014: POP
// if Researched ( side , tech ) then
32015: LD_VAR 0 3
32019: PPUSH
32020: LD_VAR 0 5
32024: PPUSH
32025: CALL_OW 325
32029: IFFALSE 32056
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
32031: LD_ADDR_VAR 0 2
32035: PUSH
32036: LD_INT 5
32038: PUSH
32039: LD_INT 8
32041: PUSH
32042: LD_INT 9
32044: PUSH
32045: EMPTY
32046: LIST
32047: LIST
32048: LIST
32049: PUSH
32050: LD_VAR 0 4
32054: ARRAY
32055: ST_TO_ADDR
// end ;
32056: LD_VAR 0 2
32060: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
32061: LD_INT 0
32063: PPUSH
32064: PPUSH
32065: PPUSH
// if not mines then
32066: LD_VAR 0 2
32070: NOT
32071: IFFALSE 32075
// exit ;
32073: GO 32219
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
32075: LD_ADDR_VAR 0 5
32079: PUSH
32080: LD_INT 81
32082: PUSH
32083: LD_VAR 0 1
32087: PUSH
32088: EMPTY
32089: LIST
32090: LIST
32091: PUSH
32092: LD_INT 3
32094: PUSH
32095: LD_INT 21
32097: PUSH
32098: LD_INT 3
32100: PUSH
32101: EMPTY
32102: LIST
32103: LIST
32104: PUSH
32105: EMPTY
32106: LIST
32107: LIST
32108: PUSH
32109: EMPTY
32110: LIST
32111: LIST
32112: PPUSH
32113: CALL_OW 69
32117: ST_TO_ADDR
// for i in mines do
32118: LD_ADDR_VAR 0 4
32122: PUSH
32123: LD_VAR 0 2
32127: PUSH
32128: FOR_IN
32129: IFFALSE 32217
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
32131: LD_VAR 0 4
32135: PUSH
32136: LD_INT 1
32138: ARRAY
32139: PPUSH
32140: LD_VAR 0 4
32144: PUSH
32145: LD_INT 2
32147: ARRAY
32148: PPUSH
32149: CALL_OW 458
32153: NOT
32154: IFFALSE 32158
// continue ;
32156: GO 32128
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
32158: LD_VAR 0 4
32162: PUSH
32163: LD_INT 1
32165: ARRAY
32166: PPUSH
32167: LD_VAR 0 4
32171: PUSH
32172: LD_INT 2
32174: ARRAY
32175: PPUSH
32176: CALL_OW 428
32180: PUSH
32181: LD_VAR 0 5
32185: IN
32186: IFFALSE 32215
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
32188: LD_VAR 0 4
32192: PUSH
32193: LD_INT 1
32195: ARRAY
32196: PPUSH
32197: LD_VAR 0 4
32201: PUSH
32202: LD_INT 2
32204: ARRAY
32205: PPUSH
32206: LD_VAR 0 1
32210: PPUSH
32211: CALL_OW 456
// end ;
32215: GO 32128
32217: POP
32218: POP
// end ;
32219: LD_VAR 0 3
32223: RET
// export function Count ( array ) ; begin
32224: LD_INT 0
32226: PPUSH
// result := array + 0 ;
32227: LD_ADDR_VAR 0 2
32231: PUSH
32232: LD_VAR 0 1
32236: PUSH
32237: LD_INT 0
32239: PLUS
32240: ST_TO_ADDR
// end ;
32241: LD_VAR 0 2
32245: RET
// export function IsEmpty ( building ) ; begin
32246: LD_INT 0
32248: PPUSH
// if not building then
32249: LD_VAR 0 1
32253: NOT
32254: IFFALSE 32258
// exit ;
32256: GO 32301
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
32258: LD_ADDR_VAR 0 2
32262: PUSH
32263: LD_VAR 0 1
32267: PUSH
32268: LD_INT 22
32270: PUSH
32271: LD_VAR 0 1
32275: PPUSH
32276: CALL_OW 255
32280: PUSH
32281: EMPTY
32282: LIST
32283: LIST
32284: PUSH
32285: LD_INT 58
32287: PUSH
32288: EMPTY
32289: LIST
32290: PUSH
32291: EMPTY
32292: LIST
32293: LIST
32294: PPUSH
32295: CALL_OW 69
32299: IN
32300: ST_TO_ADDR
// end ;
32301: LD_VAR 0 2
32305: RET
// export function IsNotFull ( building ) ; var places ; begin
32306: LD_INT 0
32308: PPUSH
32309: PPUSH
// if not building then
32310: LD_VAR 0 1
32314: NOT
32315: IFFALSE 32319
// exit ;
32317: GO 32347
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
32319: LD_ADDR_VAR 0 2
32323: PUSH
32324: LD_VAR 0 1
32328: PPUSH
32329: LD_INT 3
32331: PUSH
32332: LD_INT 62
32334: PUSH
32335: EMPTY
32336: LIST
32337: PUSH
32338: EMPTY
32339: LIST
32340: LIST
32341: PPUSH
32342: CALL_OW 72
32346: ST_TO_ADDR
// end ;
32347: LD_VAR 0 2
32351: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
32352: LD_INT 0
32354: PPUSH
32355: PPUSH
32356: PPUSH
32357: PPUSH
// tmp := [ ] ;
32358: LD_ADDR_VAR 0 3
32362: PUSH
32363: EMPTY
32364: ST_TO_ADDR
// list := [ ] ;
32365: LD_ADDR_VAR 0 5
32369: PUSH
32370: EMPTY
32371: ST_TO_ADDR
// for i = 16 to 25 do
32372: LD_ADDR_VAR 0 4
32376: PUSH
32377: DOUBLE
32378: LD_INT 16
32380: DEC
32381: ST_TO_ADDR
32382: LD_INT 25
32384: PUSH
32385: FOR_TO
32386: IFFALSE 32459
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
32388: LD_ADDR_VAR 0 3
32392: PUSH
32393: LD_VAR 0 3
32397: PUSH
32398: LD_INT 22
32400: PUSH
32401: LD_VAR 0 1
32405: PPUSH
32406: CALL_OW 255
32410: PUSH
32411: EMPTY
32412: LIST
32413: LIST
32414: PUSH
32415: LD_INT 91
32417: PUSH
32418: LD_VAR 0 1
32422: PUSH
32423: LD_INT 6
32425: PUSH
32426: EMPTY
32427: LIST
32428: LIST
32429: LIST
32430: PUSH
32431: LD_INT 30
32433: PUSH
32434: LD_VAR 0 4
32438: PUSH
32439: EMPTY
32440: LIST
32441: LIST
32442: PUSH
32443: EMPTY
32444: LIST
32445: LIST
32446: LIST
32447: PUSH
32448: EMPTY
32449: LIST
32450: PPUSH
32451: CALL_OW 69
32455: ADD
32456: ST_TO_ADDR
32457: GO 32385
32459: POP
32460: POP
// for i = 1 to tmp do
32461: LD_ADDR_VAR 0 4
32465: PUSH
32466: DOUBLE
32467: LD_INT 1
32469: DEC
32470: ST_TO_ADDR
32471: LD_VAR 0 3
32475: PUSH
32476: FOR_TO
32477: IFFALSE 32565
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
32479: LD_ADDR_VAR 0 5
32483: PUSH
32484: LD_VAR 0 5
32488: PUSH
32489: LD_VAR 0 3
32493: PUSH
32494: LD_VAR 0 4
32498: ARRAY
32499: PPUSH
32500: CALL_OW 266
32504: PUSH
32505: LD_VAR 0 3
32509: PUSH
32510: LD_VAR 0 4
32514: ARRAY
32515: PPUSH
32516: CALL_OW 250
32520: PUSH
32521: LD_VAR 0 3
32525: PUSH
32526: LD_VAR 0 4
32530: ARRAY
32531: PPUSH
32532: CALL_OW 251
32536: PUSH
32537: LD_VAR 0 3
32541: PUSH
32542: LD_VAR 0 4
32546: ARRAY
32547: PPUSH
32548: CALL_OW 254
32552: PUSH
32553: EMPTY
32554: LIST
32555: LIST
32556: LIST
32557: LIST
32558: PUSH
32559: EMPTY
32560: LIST
32561: ADD
32562: ST_TO_ADDR
32563: GO 32476
32565: POP
32566: POP
// result := list ;
32567: LD_ADDR_VAR 0 2
32571: PUSH
32572: LD_VAR 0 5
32576: ST_TO_ADDR
// end ;
32577: LD_VAR 0 2
32581: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
32582: LD_INT 0
32584: PPUSH
32585: PPUSH
32586: PPUSH
32587: PPUSH
32588: PPUSH
32589: PPUSH
32590: PPUSH
// if not factory then
32591: LD_VAR 0 1
32595: NOT
32596: IFFALSE 32600
// exit ;
32598: GO 33193
// if control = control_apeman then
32600: LD_VAR 0 4
32604: PUSH
32605: LD_INT 5
32607: EQUAL
32608: IFFALSE 32717
// begin tmp := UnitsInside ( factory ) ;
32610: LD_ADDR_VAR 0 8
32614: PUSH
32615: LD_VAR 0 1
32619: PPUSH
32620: CALL_OW 313
32624: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
32625: LD_VAR 0 8
32629: PPUSH
32630: LD_INT 25
32632: PUSH
32633: LD_INT 12
32635: PUSH
32636: EMPTY
32637: LIST
32638: LIST
32639: PPUSH
32640: CALL_OW 72
32644: NOT
32645: IFFALSE 32655
// control := control_manual ;
32647: LD_ADDR_VAR 0 4
32651: PUSH
32652: LD_INT 1
32654: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
32655: LD_ADDR_VAR 0 8
32659: PUSH
32660: LD_VAR 0 1
32664: PPUSH
32665: CALL 32352 0 1
32669: ST_TO_ADDR
// if tmp then
32670: LD_VAR 0 8
32674: IFFALSE 32717
// begin for i in tmp do
32676: LD_ADDR_VAR 0 7
32680: PUSH
32681: LD_VAR 0 8
32685: PUSH
32686: FOR_IN
32687: IFFALSE 32715
// if i [ 1 ] = b_ext_radio then
32689: LD_VAR 0 7
32693: PUSH
32694: LD_INT 1
32696: ARRAY
32697: PUSH
32698: LD_INT 22
32700: EQUAL
32701: IFFALSE 32713
// begin control := control_remote ;
32703: LD_ADDR_VAR 0 4
32707: PUSH
32708: LD_INT 2
32710: ST_TO_ADDR
// break ;
32711: GO 32715
// end ;
32713: GO 32686
32715: POP
32716: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
32717: LD_VAR 0 1
32721: PPUSH
32722: LD_VAR 0 2
32726: PPUSH
32727: LD_VAR 0 3
32731: PPUSH
32732: LD_VAR 0 4
32736: PPUSH
32737: LD_VAR 0 5
32741: PPUSH
32742: CALL_OW 448
32746: IFFALSE 32781
// begin result := [ chassis , engine , control , weapon ] ;
32748: LD_ADDR_VAR 0 6
32752: PUSH
32753: LD_VAR 0 2
32757: PUSH
32758: LD_VAR 0 3
32762: PUSH
32763: LD_VAR 0 4
32767: PUSH
32768: LD_VAR 0 5
32772: PUSH
32773: EMPTY
32774: LIST
32775: LIST
32776: LIST
32777: LIST
32778: ST_TO_ADDR
// exit ;
32779: GO 33193
// end ; _chassis := AvailableChassisList ( factory ) ;
32781: LD_ADDR_VAR 0 9
32785: PUSH
32786: LD_VAR 0 1
32790: PPUSH
32791: CALL_OW 475
32795: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
32796: LD_ADDR_VAR 0 11
32800: PUSH
32801: LD_VAR 0 1
32805: PPUSH
32806: CALL_OW 476
32810: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
32811: LD_ADDR_VAR 0 12
32815: PUSH
32816: LD_VAR 0 1
32820: PPUSH
32821: CALL_OW 477
32825: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
32826: LD_ADDR_VAR 0 10
32830: PUSH
32831: LD_VAR 0 1
32835: PPUSH
32836: CALL_OW 478
32840: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
32841: LD_VAR 0 9
32845: NOT
32846: PUSH
32847: LD_VAR 0 11
32851: NOT
32852: OR
32853: PUSH
32854: LD_VAR 0 12
32858: NOT
32859: OR
32860: PUSH
32861: LD_VAR 0 10
32865: NOT
32866: OR
32867: IFFALSE 32902
// begin result := [ chassis , engine , control , weapon ] ;
32869: LD_ADDR_VAR 0 6
32873: PUSH
32874: LD_VAR 0 2
32878: PUSH
32879: LD_VAR 0 3
32883: PUSH
32884: LD_VAR 0 4
32888: PUSH
32889: LD_VAR 0 5
32893: PUSH
32894: EMPTY
32895: LIST
32896: LIST
32897: LIST
32898: LIST
32899: ST_TO_ADDR
// exit ;
32900: GO 33193
// end ; if not chassis in _chassis then
32902: LD_VAR 0 2
32906: PUSH
32907: LD_VAR 0 9
32911: IN
32912: NOT
32913: IFFALSE 32939
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
32915: LD_ADDR_VAR 0 2
32919: PUSH
32920: LD_VAR 0 9
32924: PUSH
32925: LD_INT 1
32927: PPUSH
32928: LD_VAR 0 9
32932: PPUSH
32933: CALL_OW 12
32937: ARRAY
32938: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
32939: LD_VAR 0 2
32943: PPUSH
32944: LD_VAR 0 3
32948: PPUSH
32949: CALL 33198 0 2
32953: NOT
32954: IFFALSE 33013
// repeat engine := _engine [ 1 ] ;
32956: LD_ADDR_VAR 0 3
32960: PUSH
32961: LD_VAR 0 11
32965: PUSH
32966: LD_INT 1
32968: ARRAY
32969: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
32970: LD_ADDR_VAR 0 11
32974: PUSH
32975: LD_VAR 0 11
32979: PPUSH
32980: LD_INT 1
32982: PPUSH
32983: CALL_OW 3
32987: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
32988: LD_VAR 0 2
32992: PPUSH
32993: LD_VAR 0 3
32997: PPUSH
32998: CALL 33198 0 2
33002: PUSH
33003: LD_VAR 0 11
33007: PUSH
33008: EMPTY
33009: EQUAL
33010: OR
33011: IFFALSE 32956
// if not control in _control then
33013: LD_VAR 0 4
33017: PUSH
33018: LD_VAR 0 12
33022: IN
33023: NOT
33024: IFFALSE 33050
// control := _control [ rand ( 1 , _control ) ] ;
33026: LD_ADDR_VAR 0 4
33030: PUSH
33031: LD_VAR 0 12
33035: PUSH
33036: LD_INT 1
33038: PPUSH
33039: LD_VAR 0 12
33043: PPUSH
33044: CALL_OW 12
33048: ARRAY
33049: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
33050: LD_VAR 0 2
33054: PPUSH
33055: LD_VAR 0 5
33059: PPUSH
33060: CALL 33418 0 2
33064: NOT
33065: IFFALSE 33124
// repeat weapon := _weapon [ 1 ] ;
33067: LD_ADDR_VAR 0 5
33071: PUSH
33072: LD_VAR 0 10
33076: PUSH
33077: LD_INT 1
33079: ARRAY
33080: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
33081: LD_ADDR_VAR 0 10
33085: PUSH
33086: LD_VAR 0 10
33090: PPUSH
33091: LD_INT 1
33093: PPUSH
33094: CALL_OW 3
33098: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
33099: LD_VAR 0 2
33103: PPUSH
33104: LD_VAR 0 5
33108: PPUSH
33109: CALL 33418 0 2
33113: PUSH
33114: LD_VAR 0 10
33118: PUSH
33119: EMPTY
33120: EQUAL
33121: OR
33122: IFFALSE 33067
// result := [ ] ;
33124: LD_ADDR_VAR 0 6
33128: PUSH
33129: EMPTY
33130: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
33131: LD_VAR 0 1
33135: PPUSH
33136: LD_VAR 0 2
33140: PPUSH
33141: LD_VAR 0 3
33145: PPUSH
33146: LD_VAR 0 4
33150: PPUSH
33151: LD_VAR 0 5
33155: PPUSH
33156: CALL_OW 448
33160: IFFALSE 33193
// result := [ chassis , engine , control , weapon ] ;
33162: LD_ADDR_VAR 0 6
33166: PUSH
33167: LD_VAR 0 2
33171: PUSH
33172: LD_VAR 0 3
33176: PUSH
33177: LD_VAR 0 4
33181: PUSH
33182: LD_VAR 0 5
33186: PUSH
33187: EMPTY
33188: LIST
33189: LIST
33190: LIST
33191: LIST
33192: ST_TO_ADDR
// end ;
33193: LD_VAR 0 6
33197: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
33198: LD_INT 0
33200: PPUSH
// if not chassis or not engine then
33201: LD_VAR 0 1
33205: NOT
33206: PUSH
33207: LD_VAR 0 2
33211: NOT
33212: OR
33213: IFFALSE 33217
// exit ;
33215: GO 33413
// case engine of engine_solar :
33217: LD_VAR 0 2
33221: PUSH
33222: LD_INT 2
33224: DOUBLE
33225: EQUAL
33226: IFTRUE 33230
33228: GO 33268
33230: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
33231: LD_ADDR_VAR 0 3
33235: PUSH
33236: LD_INT 11
33238: PUSH
33239: LD_INT 12
33241: PUSH
33242: LD_INT 13
33244: PUSH
33245: LD_INT 14
33247: PUSH
33248: LD_INT 1
33250: PUSH
33251: LD_INT 2
33253: PUSH
33254: LD_INT 3
33256: PUSH
33257: EMPTY
33258: LIST
33259: LIST
33260: LIST
33261: LIST
33262: LIST
33263: LIST
33264: LIST
33265: ST_TO_ADDR
33266: GO 33397
33268: LD_INT 1
33270: DOUBLE
33271: EQUAL
33272: IFTRUE 33276
33274: GO 33338
33276: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
33277: LD_ADDR_VAR 0 3
33281: PUSH
33282: LD_INT 11
33284: PUSH
33285: LD_INT 12
33287: PUSH
33288: LD_INT 13
33290: PUSH
33291: LD_INT 14
33293: PUSH
33294: LD_INT 1
33296: PUSH
33297: LD_INT 2
33299: PUSH
33300: LD_INT 3
33302: PUSH
33303: LD_INT 4
33305: PUSH
33306: LD_INT 5
33308: PUSH
33309: LD_INT 21
33311: PUSH
33312: LD_INT 23
33314: PUSH
33315: LD_INT 22
33317: PUSH
33318: LD_INT 24
33320: PUSH
33321: EMPTY
33322: LIST
33323: LIST
33324: LIST
33325: LIST
33326: LIST
33327: LIST
33328: LIST
33329: LIST
33330: LIST
33331: LIST
33332: LIST
33333: LIST
33334: LIST
33335: ST_TO_ADDR
33336: GO 33397
33338: LD_INT 3
33340: DOUBLE
33341: EQUAL
33342: IFTRUE 33346
33344: GO 33396
33346: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
33347: LD_ADDR_VAR 0 3
33351: PUSH
33352: LD_INT 13
33354: PUSH
33355: LD_INT 14
33357: PUSH
33358: LD_INT 2
33360: PUSH
33361: LD_INT 3
33363: PUSH
33364: LD_INT 4
33366: PUSH
33367: LD_INT 5
33369: PUSH
33370: LD_INT 21
33372: PUSH
33373: LD_INT 22
33375: PUSH
33376: LD_INT 23
33378: PUSH
33379: LD_INT 24
33381: PUSH
33382: EMPTY
33383: LIST
33384: LIST
33385: LIST
33386: LIST
33387: LIST
33388: LIST
33389: LIST
33390: LIST
33391: LIST
33392: LIST
33393: ST_TO_ADDR
33394: GO 33397
33396: POP
// result := ( chassis in result ) ;
33397: LD_ADDR_VAR 0 3
33401: PUSH
33402: LD_VAR 0 1
33406: PUSH
33407: LD_VAR 0 3
33411: IN
33412: ST_TO_ADDR
// end ;
33413: LD_VAR 0 3
33417: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
33418: LD_INT 0
33420: PPUSH
// if not chassis or not weapon then
33421: LD_VAR 0 1
33425: NOT
33426: PUSH
33427: LD_VAR 0 2
33431: NOT
33432: OR
33433: IFFALSE 33437
// exit ;
33435: GO 34497
// case weapon of us_machine_gun :
33437: LD_VAR 0 2
33441: PUSH
33442: LD_INT 2
33444: DOUBLE
33445: EQUAL
33446: IFTRUE 33450
33448: GO 33480
33450: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
33451: LD_ADDR_VAR 0 3
33455: PUSH
33456: LD_INT 1
33458: PUSH
33459: LD_INT 2
33461: PUSH
33462: LD_INT 3
33464: PUSH
33465: LD_INT 4
33467: PUSH
33468: LD_INT 5
33470: PUSH
33471: EMPTY
33472: LIST
33473: LIST
33474: LIST
33475: LIST
33476: LIST
33477: ST_TO_ADDR
33478: GO 34481
33480: LD_INT 3
33482: DOUBLE
33483: EQUAL
33484: IFTRUE 33488
33486: GO 33518
33488: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
33489: LD_ADDR_VAR 0 3
33493: PUSH
33494: LD_INT 1
33496: PUSH
33497: LD_INT 2
33499: PUSH
33500: LD_INT 3
33502: PUSH
33503: LD_INT 4
33505: PUSH
33506: LD_INT 5
33508: PUSH
33509: EMPTY
33510: LIST
33511: LIST
33512: LIST
33513: LIST
33514: LIST
33515: ST_TO_ADDR
33516: GO 34481
33518: LD_INT 11
33520: DOUBLE
33521: EQUAL
33522: IFTRUE 33526
33524: GO 33556
33526: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
33527: LD_ADDR_VAR 0 3
33531: PUSH
33532: LD_INT 1
33534: PUSH
33535: LD_INT 2
33537: PUSH
33538: LD_INT 3
33540: PUSH
33541: LD_INT 4
33543: PUSH
33544: LD_INT 5
33546: PUSH
33547: EMPTY
33548: LIST
33549: LIST
33550: LIST
33551: LIST
33552: LIST
33553: ST_TO_ADDR
33554: GO 34481
33556: LD_INT 4
33558: DOUBLE
33559: EQUAL
33560: IFTRUE 33564
33562: GO 33590
33564: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
33565: LD_ADDR_VAR 0 3
33569: PUSH
33570: LD_INT 2
33572: PUSH
33573: LD_INT 3
33575: PUSH
33576: LD_INT 4
33578: PUSH
33579: LD_INT 5
33581: PUSH
33582: EMPTY
33583: LIST
33584: LIST
33585: LIST
33586: LIST
33587: ST_TO_ADDR
33588: GO 34481
33590: LD_INT 5
33592: DOUBLE
33593: EQUAL
33594: IFTRUE 33598
33596: GO 33624
33598: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
33599: LD_ADDR_VAR 0 3
33603: PUSH
33604: LD_INT 2
33606: PUSH
33607: LD_INT 3
33609: PUSH
33610: LD_INT 4
33612: PUSH
33613: LD_INT 5
33615: PUSH
33616: EMPTY
33617: LIST
33618: LIST
33619: LIST
33620: LIST
33621: ST_TO_ADDR
33622: GO 34481
33624: LD_INT 9
33626: DOUBLE
33627: EQUAL
33628: IFTRUE 33632
33630: GO 33658
33632: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
33633: LD_ADDR_VAR 0 3
33637: PUSH
33638: LD_INT 2
33640: PUSH
33641: LD_INT 3
33643: PUSH
33644: LD_INT 4
33646: PUSH
33647: LD_INT 5
33649: PUSH
33650: EMPTY
33651: LIST
33652: LIST
33653: LIST
33654: LIST
33655: ST_TO_ADDR
33656: GO 34481
33658: LD_INT 7
33660: DOUBLE
33661: EQUAL
33662: IFTRUE 33666
33664: GO 33692
33666: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
33667: LD_ADDR_VAR 0 3
33671: PUSH
33672: LD_INT 2
33674: PUSH
33675: LD_INT 3
33677: PUSH
33678: LD_INT 4
33680: PUSH
33681: LD_INT 5
33683: PUSH
33684: EMPTY
33685: LIST
33686: LIST
33687: LIST
33688: LIST
33689: ST_TO_ADDR
33690: GO 34481
33692: LD_INT 12
33694: DOUBLE
33695: EQUAL
33696: IFTRUE 33700
33698: GO 33726
33700: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
33701: LD_ADDR_VAR 0 3
33705: PUSH
33706: LD_INT 2
33708: PUSH
33709: LD_INT 3
33711: PUSH
33712: LD_INT 4
33714: PUSH
33715: LD_INT 5
33717: PUSH
33718: EMPTY
33719: LIST
33720: LIST
33721: LIST
33722: LIST
33723: ST_TO_ADDR
33724: GO 34481
33726: LD_INT 13
33728: DOUBLE
33729: EQUAL
33730: IFTRUE 33734
33732: GO 33760
33734: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
33735: LD_ADDR_VAR 0 3
33739: PUSH
33740: LD_INT 2
33742: PUSH
33743: LD_INT 3
33745: PUSH
33746: LD_INT 4
33748: PUSH
33749: LD_INT 5
33751: PUSH
33752: EMPTY
33753: LIST
33754: LIST
33755: LIST
33756: LIST
33757: ST_TO_ADDR
33758: GO 34481
33760: LD_INT 14
33762: DOUBLE
33763: EQUAL
33764: IFTRUE 33768
33766: GO 33786
33768: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
33769: LD_ADDR_VAR 0 3
33773: PUSH
33774: LD_INT 4
33776: PUSH
33777: LD_INT 5
33779: PUSH
33780: EMPTY
33781: LIST
33782: LIST
33783: ST_TO_ADDR
33784: GO 34481
33786: LD_INT 6
33788: DOUBLE
33789: EQUAL
33790: IFTRUE 33794
33792: GO 33812
33794: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
33795: LD_ADDR_VAR 0 3
33799: PUSH
33800: LD_INT 4
33802: PUSH
33803: LD_INT 5
33805: PUSH
33806: EMPTY
33807: LIST
33808: LIST
33809: ST_TO_ADDR
33810: GO 34481
33812: LD_INT 10
33814: DOUBLE
33815: EQUAL
33816: IFTRUE 33820
33818: GO 33838
33820: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
33821: LD_ADDR_VAR 0 3
33825: PUSH
33826: LD_INT 4
33828: PUSH
33829: LD_INT 5
33831: PUSH
33832: EMPTY
33833: LIST
33834: LIST
33835: ST_TO_ADDR
33836: GO 34481
33838: LD_INT 22
33840: DOUBLE
33841: EQUAL
33842: IFTRUE 33846
33844: GO 33872
33846: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
33847: LD_ADDR_VAR 0 3
33851: PUSH
33852: LD_INT 11
33854: PUSH
33855: LD_INT 12
33857: PUSH
33858: LD_INT 13
33860: PUSH
33861: LD_INT 14
33863: PUSH
33864: EMPTY
33865: LIST
33866: LIST
33867: LIST
33868: LIST
33869: ST_TO_ADDR
33870: GO 34481
33872: LD_INT 23
33874: DOUBLE
33875: EQUAL
33876: IFTRUE 33880
33878: GO 33906
33880: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
33881: LD_ADDR_VAR 0 3
33885: PUSH
33886: LD_INT 11
33888: PUSH
33889: LD_INT 12
33891: PUSH
33892: LD_INT 13
33894: PUSH
33895: LD_INT 14
33897: PUSH
33898: EMPTY
33899: LIST
33900: LIST
33901: LIST
33902: LIST
33903: ST_TO_ADDR
33904: GO 34481
33906: LD_INT 24
33908: DOUBLE
33909: EQUAL
33910: IFTRUE 33914
33912: GO 33940
33914: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
33915: LD_ADDR_VAR 0 3
33919: PUSH
33920: LD_INT 11
33922: PUSH
33923: LD_INT 12
33925: PUSH
33926: LD_INT 13
33928: PUSH
33929: LD_INT 14
33931: PUSH
33932: EMPTY
33933: LIST
33934: LIST
33935: LIST
33936: LIST
33937: ST_TO_ADDR
33938: GO 34481
33940: LD_INT 30
33942: DOUBLE
33943: EQUAL
33944: IFTRUE 33948
33946: GO 33974
33948: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
33949: LD_ADDR_VAR 0 3
33953: PUSH
33954: LD_INT 11
33956: PUSH
33957: LD_INT 12
33959: PUSH
33960: LD_INT 13
33962: PUSH
33963: LD_INT 14
33965: PUSH
33966: EMPTY
33967: LIST
33968: LIST
33969: LIST
33970: LIST
33971: ST_TO_ADDR
33972: GO 34481
33974: LD_INT 25
33976: DOUBLE
33977: EQUAL
33978: IFTRUE 33982
33980: GO 34000
33982: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
33983: LD_ADDR_VAR 0 3
33987: PUSH
33988: LD_INT 13
33990: PUSH
33991: LD_INT 14
33993: PUSH
33994: EMPTY
33995: LIST
33996: LIST
33997: ST_TO_ADDR
33998: GO 34481
34000: LD_INT 27
34002: DOUBLE
34003: EQUAL
34004: IFTRUE 34008
34006: GO 34026
34008: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
34009: LD_ADDR_VAR 0 3
34013: PUSH
34014: LD_INT 13
34016: PUSH
34017: LD_INT 14
34019: PUSH
34020: EMPTY
34021: LIST
34022: LIST
34023: ST_TO_ADDR
34024: GO 34481
34026: LD_INT 92
34028: DOUBLE
34029: EQUAL
34030: IFTRUE 34034
34032: GO 34060
34034: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
34035: LD_ADDR_VAR 0 3
34039: PUSH
34040: LD_INT 11
34042: PUSH
34043: LD_INT 12
34045: PUSH
34046: LD_INT 13
34048: PUSH
34049: LD_INT 14
34051: PUSH
34052: EMPTY
34053: LIST
34054: LIST
34055: LIST
34056: LIST
34057: ST_TO_ADDR
34058: GO 34481
34060: LD_INT 28
34062: DOUBLE
34063: EQUAL
34064: IFTRUE 34068
34066: GO 34086
34068: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
34069: LD_ADDR_VAR 0 3
34073: PUSH
34074: LD_INT 13
34076: PUSH
34077: LD_INT 14
34079: PUSH
34080: EMPTY
34081: LIST
34082: LIST
34083: ST_TO_ADDR
34084: GO 34481
34086: LD_INT 29
34088: DOUBLE
34089: EQUAL
34090: IFTRUE 34094
34092: GO 34112
34094: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
34095: LD_ADDR_VAR 0 3
34099: PUSH
34100: LD_INT 13
34102: PUSH
34103: LD_INT 14
34105: PUSH
34106: EMPTY
34107: LIST
34108: LIST
34109: ST_TO_ADDR
34110: GO 34481
34112: LD_INT 31
34114: DOUBLE
34115: EQUAL
34116: IFTRUE 34120
34118: GO 34138
34120: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
34121: LD_ADDR_VAR 0 3
34125: PUSH
34126: LD_INT 13
34128: PUSH
34129: LD_INT 14
34131: PUSH
34132: EMPTY
34133: LIST
34134: LIST
34135: ST_TO_ADDR
34136: GO 34481
34138: LD_INT 26
34140: DOUBLE
34141: EQUAL
34142: IFTRUE 34146
34144: GO 34164
34146: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
34147: LD_ADDR_VAR 0 3
34151: PUSH
34152: LD_INT 13
34154: PUSH
34155: LD_INT 14
34157: PUSH
34158: EMPTY
34159: LIST
34160: LIST
34161: ST_TO_ADDR
34162: GO 34481
34164: LD_INT 42
34166: DOUBLE
34167: EQUAL
34168: IFTRUE 34172
34170: GO 34198
34172: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
34173: LD_ADDR_VAR 0 3
34177: PUSH
34178: LD_INT 21
34180: PUSH
34181: LD_INT 22
34183: PUSH
34184: LD_INT 23
34186: PUSH
34187: LD_INT 24
34189: PUSH
34190: EMPTY
34191: LIST
34192: LIST
34193: LIST
34194: LIST
34195: ST_TO_ADDR
34196: GO 34481
34198: LD_INT 43
34200: DOUBLE
34201: EQUAL
34202: IFTRUE 34206
34204: GO 34232
34206: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
34207: LD_ADDR_VAR 0 3
34211: PUSH
34212: LD_INT 21
34214: PUSH
34215: LD_INT 22
34217: PUSH
34218: LD_INT 23
34220: PUSH
34221: LD_INT 24
34223: PUSH
34224: EMPTY
34225: LIST
34226: LIST
34227: LIST
34228: LIST
34229: ST_TO_ADDR
34230: GO 34481
34232: LD_INT 44
34234: DOUBLE
34235: EQUAL
34236: IFTRUE 34240
34238: GO 34266
34240: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
34241: LD_ADDR_VAR 0 3
34245: PUSH
34246: LD_INT 21
34248: PUSH
34249: LD_INT 22
34251: PUSH
34252: LD_INT 23
34254: PUSH
34255: LD_INT 24
34257: PUSH
34258: EMPTY
34259: LIST
34260: LIST
34261: LIST
34262: LIST
34263: ST_TO_ADDR
34264: GO 34481
34266: LD_INT 45
34268: DOUBLE
34269: EQUAL
34270: IFTRUE 34274
34272: GO 34300
34274: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
34275: LD_ADDR_VAR 0 3
34279: PUSH
34280: LD_INT 21
34282: PUSH
34283: LD_INT 22
34285: PUSH
34286: LD_INT 23
34288: PUSH
34289: LD_INT 24
34291: PUSH
34292: EMPTY
34293: LIST
34294: LIST
34295: LIST
34296: LIST
34297: ST_TO_ADDR
34298: GO 34481
34300: LD_INT 49
34302: DOUBLE
34303: EQUAL
34304: IFTRUE 34308
34306: GO 34334
34308: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
34309: LD_ADDR_VAR 0 3
34313: PUSH
34314: LD_INT 21
34316: PUSH
34317: LD_INT 22
34319: PUSH
34320: LD_INT 23
34322: PUSH
34323: LD_INT 24
34325: PUSH
34326: EMPTY
34327: LIST
34328: LIST
34329: LIST
34330: LIST
34331: ST_TO_ADDR
34332: GO 34481
34334: LD_INT 51
34336: DOUBLE
34337: EQUAL
34338: IFTRUE 34342
34340: GO 34368
34342: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
34343: LD_ADDR_VAR 0 3
34347: PUSH
34348: LD_INT 21
34350: PUSH
34351: LD_INT 22
34353: PUSH
34354: LD_INT 23
34356: PUSH
34357: LD_INT 24
34359: PUSH
34360: EMPTY
34361: LIST
34362: LIST
34363: LIST
34364: LIST
34365: ST_TO_ADDR
34366: GO 34481
34368: LD_INT 52
34370: DOUBLE
34371: EQUAL
34372: IFTRUE 34376
34374: GO 34402
34376: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
34377: LD_ADDR_VAR 0 3
34381: PUSH
34382: LD_INT 21
34384: PUSH
34385: LD_INT 22
34387: PUSH
34388: LD_INT 23
34390: PUSH
34391: LD_INT 24
34393: PUSH
34394: EMPTY
34395: LIST
34396: LIST
34397: LIST
34398: LIST
34399: ST_TO_ADDR
34400: GO 34481
34402: LD_INT 53
34404: DOUBLE
34405: EQUAL
34406: IFTRUE 34410
34408: GO 34428
34410: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
34411: LD_ADDR_VAR 0 3
34415: PUSH
34416: LD_INT 23
34418: PUSH
34419: LD_INT 24
34421: PUSH
34422: EMPTY
34423: LIST
34424: LIST
34425: ST_TO_ADDR
34426: GO 34481
34428: LD_INT 46
34430: DOUBLE
34431: EQUAL
34432: IFTRUE 34436
34434: GO 34454
34436: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
34437: LD_ADDR_VAR 0 3
34441: PUSH
34442: LD_INT 23
34444: PUSH
34445: LD_INT 24
34447: PUSH
34448: EMPTY
34449: LIST
34450: LIST
34451: ST_TO_ADDR
34452: GO 34481
34454: LD_INT 47
34456: DOUBLE
34457: EQUAL
34458: IFTRUE 34462
34460: GO 34480
34462: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
34463: LD_ADDR_VAR 0 3
34467: PUSH
34468: LD_INT 23
34470: PUSH
34471: LD_INT 24
34473: PUSH
34474: EMPTY
34475: LIST
34476: LIST
34477: ST_TO_ADDR
34478: GO 34481
34480: POP
// result := ( chassis in result ) ;
34481: LD_ADDR_VAR 0 3
34485: PUSH
34486: LD_VAR 0 1
34490: PUSH
34491: LD_VAR 0 3
34495: IN
34496: ST_TO_ADDR
// end ;
34497: LD_VAR 0 3
34501: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
34502: LD_INT 0
34504: PPUSH
34505: PPUSH
34506: PPUSH
34507: PPUSH
34508: PPUSH
34509: PPUSH
34510: PPUSH
// result := array ;
34511: LD_ADDR_VAR 0 5
34515: PUSH
34516: LD_VAR 0 1
34520: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
34521: LD_VAR 0 1
34525: NOT
34526: PUSH
34527: LD_VAR 0 2
34531: NOT
34532: OR
34533: PUSH
34534: LD_VAR 0 3
34538: NOT
34539: OR
34540: PUSH
34541: LD_VAR 0 2
34545: PUSH
34546: LD_VAR 0 1
34550: GREATER
34551: OR
34552: PUSH
34553: LD_VAR 0 3
34557: PUSH
34558: LD_VAR 0 1
34562: GREATER
34563: OR
34564: IFFALSE 34568
// exit ;
34566: GO 34864
// if direction then
34568: LD_VAR 0 4
34572: IFFALSE 34636
// begin d := 1 ;
34574: LD_ADDR_VAR 0 9
34578: PUSH
34579: LD_INT 1
34581: ST_TO_ADDR
// if i_from > i_to then
34582: LD_VAR 0 2
34586: PUSH
34587: LD_VAR 0 3
34591: GREATER
34592: IFFALSE 34618
// length := ( array - i_from ) + i_to else
34594: LD_ADDR_VAR 0 11
34598: PUSH
34599: LD_VAR 0 1
34603: PUSH
34604: LD_VAR 0 2
34608: MINUS
34609: PUSH
34610: LD_VAR 0 3
34614: PLUS
34615: ST_TO_ADDR
34616: GO 34634
// length := i_to - i_from ;
34618: LD_ADDR_VAR 0 11
34622: PUSH
34623: LD_VAR 0 3
34627: PUSH
34628: LD_VAR 0 2
34632: MINUS
34633: ST_TO_ADDR
// end else
34634: GO 34697
// begin d := - 1 ;
34636: LD_ADDR_VAR 0 9
34640: PUSH
34641: LD_INT 1
34643: NEG
34644: ST_TO_ADDR
// if i_from > i_to then
34645: LD_VAR 0 2
34649: PUSH
34650: LD_VAR 0 3
34654: GREATER
34655: IFFALSE 34675
// length := i_from - i_to else
34657: LD_ADDR_VAR 0 11
34661: PUSH
34662: LD_VAR 0 2
34666: PUSH
34667: LD_VAR 0 3
34671: MINUS
34672: ST_TO_ADDR
34673: GO 34697
// length := ( array - i_to ) + i_from ;
34675: LD_ADDR_VAR 0 11
34679: PUSH
34680: LD_VAR 0 1
34684: PUSH
34685: LD_VAR 0 3
34689: MINUS
34690: PUSH
34691: LD_VAR 0 2
34695: PLUS
34696: ST_TO_ADDR
// end ; if not length then
34697: LD_VAR 0 11
34701: NOT
34702: IFFALSE 34706
// exit ;
34704: GO 34864
// tmp := array ;
34706: LD_ADDR_VAR 0 10
34710: PUSH
34711: LD_VAR 0 1
34715: ST_TO_ADDR
// for i = 1 to length do
34716: LD_ADDR_VAR 0 6
34720: PUSH
34721: DOUBLE
34722: LD_INT 1
34724: DEC
34725: ST_TO_ADDR
34726: LD_VAR 0 11
34730: PUSH
34731: FOR_TO
34732: IFFALSE 34852
// begin for j = 1 to array do
34734: LD_ADDR_VAR 0 7
34738: PUSH
34739: DOUBLE
34740: LD_INT 1
34742: DEC
34743: ST_TO_ADDR
34744: LD_VAR 0 1
34748: PUSH
34749: FOR_TO
34750: IFFALSE 34838
// begin k := j + d ;
34752: LD_ADDR_VAR 0 8
34756: PUSH
34757: LD_VAR 0 7
34761: PUSH
34762: LD_VAR 0 9
34766: PLUS
34767: ST_TO_ADDR
// if k > array then
34768: LD_VAR 0 8
34772: PUSH
34773: LD_VAR 0 1
34777: GREATER
34778: IFFALSE 34788
// k := 1 ;
34780: LD_ADDR_VAR 0 8
34784: PUSH
34785: LD_INT 1
34787: ST_TO_ADDR
// if not k then
34788: LD_VAR 0 8
34792: NOT
34793: IFFALSE 34805
// k := array ;
34795: LD_ADDR_VAR 0 8
34799: PUSH
34800: LD_VAR 0 1
34804: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
34805: LD_ADDR_VAR 0 10
34809: PUSH
34810: LD_VAR 0 10
34814: PPUSH
34815: LD_VAR 0 8
34819: PPUSH
34820: LD_VAR 0 1
34824: PUSH
34825: LD_VAR 0 7
34829: ARRAY
34830: PPUSH
34831: CALL_OW 1
34835: ST_TO_ADDR
// end ;
34836: GO 34749
34838: POP
34839: POP
// array := tmp ;
34840: LD_ADDR_VAR 0 1
34844: PUSH
34845: LD_VAR 0 10
34849: ST_TO_ADDR
// end ;
34850: GO 34731
34852: POP
34853: POP
// result := array ;
34854: LD_ADDR_VAR 0 5
34858: PUSH
34859: LD_VAR 0 1
34863: ST_TO_ADDR
// end ;
34864: LD_VAR 0 5
34868: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
34869: LD_INT 0
34871: PPUSH
34872: PPUSH
// result := 0 ;
34873: LD_ADDR_VAR 0 3
34877: PUSH
34878: LD_INT 0
34880: ST_TO_ADDR
// if not array or not value in array then
34881: LD_VAR 0 1
34885: NOT
34886: PUSH
34887: LD_VAR 0 2
34891: PUSH
34892: LD_VAR 0 1
34896: IN
34897: NOT
34898: OR
34899: IFFALSE 34903
// exit ;
34901: GO 34957
// for i = 1 to array do
34903: LD_ADDR_VAR 0 4
34907: PUSH
34908: DOUBLE
34909: LD_INT 1
34911: DEC
34912: ST_TO_ADDR
34913: LD_VAR 0 1
34917: PUSH
34918: FOR_TO
34919: IFFALSE 34955
// if value = array [ i ] then
34921: LD_VAR 0 2
34925: PUSH
34926: LD_VAR 0 1
34930: PUSH
34931: LD_VAR 0 4
34935: ARRAY
34936: EQUAL
34937: IFFALSE 34953
// begin result := i ;
34939: LD_ADDR_VAR 0 3
34943: PUSH
34944: LD_VAR 0 4
34948: ST_TO_ADDR
// exit ;
34949: POP
34950: POP
34951: GO 34957
// end ;
34953: GO 34918
34955: POP
34956: POP
// end ;
34957: LD_VAR 0 3
34961: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
34962: LD_INT 0
34964: PPUSH
// vc_chassis := chassis ;
34965: LD_ADDR_OWVAR 37
34969: PUSH
34970: LD_VAR 0 1
34974: ST_TO_ADDR
// vc_engine := engine ;
34975: LD_ADDR_OWVAR 39
34979: PUSH
34980: LD_VAR 0 2
34984: ST_TO_ADDR
// vc_control := control ;
34985: LD_ADDR_OWVAR 38
34989: PUSH
34990: LD_VAR 0 3
34994: ST_TO_ADDR
// vc_weapon := weapon ;
34995: LD_ADDR_OWVAR 40
34999: PUSH
35000: LD_VAR 0 4
35004: ST_TO_ADDR
// vc_fuel_battery := fuel ;
35005: LD_ADDR_OWVAR 41
35009: PUSH
35010: LD_VAR 0 5
35014: ST_TO_ADDR
// end ;
35015: LD_VAR 0 6
35019: RET
// export function WantPlant ( unit ) ; var task ; begin
35020: LD_INT 0
35022: PPUSH
35023: PPUSH
// result := false ;
35024: LD_ADDR_VAR 0 2
35028: PUSH
35029: LD_INT 0
35031: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
35032: LD_ADDR_VAR 0 3
35036: PUSH
35037: LD_VAR 0 1
35041: PPUSH
35042: CALL_OW 437
35046: ST_TO_ADDR
// if task then
35047: LD_VAR 0 3
35051: IFFALSE 35079
// if task [ 1 ] [ 1 ] = p then
35053: LD_VAR 0 3
35057: PUSH
35058: LD_INT 1
35060: ARRAY
35061: PUSH
35062: LD_INT 1
35064: ARRAY
35065: PUSH
35066: LD_STRING p
35068: EQUAL
35069: IFFALSE 35079
// result := true ;
35071: LD_ADDR_VAR 0 2
35075: PUSH
35076: LD_INT 1
35078: ST_TO_ADDR
// end ;
35079: LD_VAR 0 2
35083: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
35084: LD_INT 0
35086: PPUSH
35087: PPUSH
35088: PPUSH
35089: PPUSH
// if pos < 1 then
35090: LD_VAR 0 2
35094: PUSH
35095: LD_INT 1
35097: LESS
35098: IFFALSE 35102
// exit ;
35100: GO 35405
// if pos = 1 then
35102: LD_VAR 0 2
35106: PUSH
35107: LD_INT 1
35109: EQUAL
35110: IFFALSE 35143
// result := Replace ( arr , pos [ 1 ] , value ) else
35112: LD_ADDR_VAR 0 4
35116: PUSH
35117: LD_VAR 0 1
35121: PPUSH
35122: LD_VAR 0 2
35126: PUSH
35127: LD_INT 1
35129: ARRAY
35130: PPUSH
35131: LD_VAR 0 3
35135: PPUSH
35136: CALL_OW 1
35140: ST_TO_ADDR
35141: GO 35405
// begin tmp := arr ;
35143: LD_ADDR_VAR 0 6
35147: PUSH
35148: LD_VAR 0 1
35152: ST_TO_ADDR
// s_arr := [ tmp ] ;
35153: LD_ADDR_VAR 0 7
35157: PUSH
35158: LD_VAR 0 6
35162: PUSH
35163: EMPTY
35164: LIST
35165: ST_TO_ADDR
// for i = 1 to pos - 1 do
35166: LD_ADDR_VAR 0 5
35170: PUSH
35171: DOUBLE
35172: LD_INT 1
35174: DEC
35175: ST_TO_ADDR
35176: LD_VAR 0 2
35180: PUSH
35181: LD_INT 1
35183: MINUS
35184: PUSH
35185: FOR_TO
35186: IFFALSE 35231
// begin tmp := tmp [ pos [ i ] ] ;
35188: LD_ADDR_VAR 0 6
35192: PUSH
35193: LD_VAR 0 6
35197: PUSH
35198: LD_VAR 0 2
35202: PUSH
35203: LD_VAR 0 5
35207: ARRAY
35208: ARRAY
35209: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
35210: LD_ADDR_VAR 0 7
35214: PUSH
35215: LD_VAR 0 7
35219: PUSH
35220: LD_VAR 0 6
35224: PUSH
35225: EMPTY
35226: LIST
35227: ADD
35228: ST_TO_ADDR
// end ;
35229: GO 35185
35231: POP
35232: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
35233: LD_ADDR_VAR 0 6
35237: PUSH
35238: LD_VAR 0 6
35242: PPUSH
35243: LD_VAR 0 2
35247: PUSH
35248: LD_VAR 0 2
35252: ARRAY
35253: PPUSH
35254: LD_VAR 0 3
35258: PPUSH
35259: CALL_OW 1
35263: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
35264: LD_ADDR_VAR 0 7
35268: PUSH
35269: LD_VAR 0 7
35273: PPUSH
35274: LD_VAR 0 7
35278: PPUSH
35279: LD_VAR 0 6
35283: PPUSH
35284: CALL_OW 1
35288: ST_TO_ADDR
// for i = s_arr downto 2 do
35289: LD_ADDR_VAR 0 5
35293: PUSH
35294: DOUBLE
35295: LD_VAR 0 7
35299: INC
35300: ST_TO_ADDR
35301: LD_INT 2
35303: PUSH
35304: FOR_DOWNTO
35305: IFFALSE 35389
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
35307: LD_ADDR_VAR 0 6
35311: PUSH
35312: LD_VAR 0 7
35316: PUSH
35317: LD_VAR 0 5
35321: PUSH
35322: LD_INT 1
35324: MINUS
35325: ARRAY
35326: PPUSH
35327: LD_VAR 0 2
35331: PUSH
35332: LD_VAR 0 5
35336: PUSH
35337: LD_INT 1
35339: MINUS
35340: ARRAY
35341: PPUSH
35342: LD_VAR 0 7
35346: PUSH
35347: LD_VAR 0 5
35351: ARRAY
35352: PPUSH
35353: CALL_OW 1
35357: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
35358: LD_ADDR_VAR 0 7
35362: PUSH
35363: LD_VAR 0 7
35367: PPUSH
35368: LD_VAR 0 5
35372: PUSH
35373: LD_INT 1
35375: MINUS
35376: PPUSH
35377: LD_VAR 0 6
35381: PPUSH
35382: CALL_OW 1
35386: ST_TO_ADDR
// end ;
35387: GO 35304
35389: POP
35390: POP
// result := s_arr [ 1 ] ;
35391: LD_ADDR_VAR 0 4
35395: PUSH
35396: LD_VAR 0 7
35400: PUSH
35401: LD_INT 1
35403: ARRAY
35404: ST_TO_ADDR
// end ; end ;
35405: LD_VAR 0 4
35409: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
35410: LD_INT 0
35412: PPUSH
35413: PPUSH
// if not list then
35414: LD_VAR 0 1
35418: NOT
35419: IFFALSE 35423
// exit ;
35421: GO 35514
// i := list [ pos1 ] ;
35423: LD_ADDR_VAR 0 5
35427: PUSH
35428: LD_VAR 0 1
35432: PUSH
35433: LD_VAR 0 2
35437: ARRAY
35438: ST_TO_ADDR
// if not i then
35439: LD_VAR 0 5
35443: NOT
35444: IFFALSE 35448
// exit ;
35446: GO 35514
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
35448: LD_ADDR_VAR 0 1
35452: PUSH
35453: LD_VAR 0 1
35457: PPUSH
35458: LD_VAR 0 2
35462: PPUSH
35463: LD_VAR 0 1
35467: PUSH
35468: LD_VAR 0 3
35472: ARRAY
35473: PPUSH
35474: CALL_OW 1
35478: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
35479: LD_ADDR_VAR 0 1
35483: PUSH
35484: LD_VAR 0 1
35488: PPUSH
35489: LD_VAR 0 3
35493: PPUSH
35494: LD_VAR 0 5
35498: PPUSH
35499: CALL_OW 1
35503: ST_TO_ADDR
// result := list ;
35504: LD_ADDR_VAR 0 4
35508: PUSH
35509: LD_VAR 0 1
35513: ST_TO_ADDR
// end ;
35514: LD_VAR 0 4
35518: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
35519: LD_INT 0
35521: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
35522: LD_ADDR_VAR 0 5
35526: PUSH
35527: LD_VAR 0 1
35531: PPUSH
35532: CALL_OW 250
35536: PPUSH
35537: LD_VAR 0 1
35541: PPUSH
35542: CALL_OW 251
35546: PPUSH
35547: LD_VAR 0 2
35551: PPUSH
35552: LD_VAR 0 3
35556: PPUSH
35557: LD_VAR 0 4
35561: PPUSH
35562: CALL 35940 0 5
35566: ST_TO_ADDR
// end ;
35567: LD_VAR 0 5
35571: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
35572: LD_INT 0
35574: PPUSH
35575: PPUSH
35576: PPUSH
35577: PPUSH
// if not list or not unit then
35578: LD_VAR 0 2
35582: NOT
35583: PUSH
35584: LD_VAR 0 1
35588: NOT
35589: OR
35590: IFFALSE 35594
// exit ;
35592: GO 35935
// result := [ ] ;
35594: LD_ADDR_VAR 0 5
35598: PUSH
35599: EMPTY
35600: ST_TO_ADDR
// for i in list do
35601: LD_ADDR_VAR 0 6
35605: PUSH
35606: LD_VAR 0 2
35610: PUSH
35611: FOR_IN
35612: IFFALSE 35830
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
35614: LD_ADDR_VAR 0 8
35618: PUSH
35619: LD_VAR 0 1
35623: PPUSH
35624: LD_VAR 0 6
35628: PUSH
35629: LD_INT 1
35631: ARRAY
35632: PPUSH
35633: LD_VAR 0 6
35637: PUSH
35638: LD_INT 2
35640: ARRAY
35641: PPUSH
35642: CALL_OW 297
35646: ST_TO_ADDR
// if not Count ( result ) then
35647: LD_VAR 0 5
35651: PPUSH
35652: CALL 32224 0 1
35656: NOT
35657: IFFALSE 35690
// begin result := Join ( result , [ i , tmp ] ) ;
35659: LD_ADDR_VAR 0 5
35663: PUSH
35664: LD_VAR 0 5
35668: PPUSH
35669: LD_VAR 0 6
35673: PUSH
35674: LD_VAR 0 8
35678: PUSH
35679: EMPTY
35680: LIST
35681: LIST
35682: PPUSH
35683: CALL 67833 0 2
35687: ST_TO_ADDR
// continue ;
35688: GO 35611
// end ; if result [ result ] [ 2 ] <= tmp then
35690: LD_VAR 0 5
35694: PUSH
35695: LD_VAR 0 5
35699: ARRAY
35700: PUSH
35701: LD_INT 2
35703: ARRAY
35704: PUSH
35705: LD_VAR 0 8
35709: LESSEQUAL
35710: IFFALSE 35743
// result := Join ( result , [ i , tmp ] ) else
35712: LD_ADDR_VAR 0 5
35716: PUSH
35717: LD_VAR 0 5
35721: PPUSH
35722: LD_VAR 0 6
35726: PUSH
35727: LD_VAR 0 8
35731: PUSH
35732: EMPTY
35733: LIST
35734: LIST
35735: PPUSH
35736: CALL 67833 0 2
35740: ST_TO_ADDR
35741: GO 35828
// begin for j := 1 to Count ( result ) do
35743: LD_ADDR_VAR 0 7
35747: PUSH
35748: DOUBLE
35749: LD_INT 1
35751: DEC
35752: ST_TO_ADDR
35753: LD_VAR 0 5
35757: PPUSH
35758: CALL 32224 0 1
35762: PUSH
35763: FOR_TO
35764: IFFALSE 35826
// begin if tmp < result [ j ] [ 2 ] then
35766: LD_VAR 0 8
35770: PUSH
35771: LD_VAR 0 5
35775: PUSH
35776: LD_VAR 0 7
35780: ARRAY
35781: PUSH
35782: LD_INT 2
35784: ARRAY
35785: LESS
35786: IFFALSE 35824
// begin result := Insert ( result , j , [ i , tmp ] ) ;
35788: LD_ADDR_VAR 0 5
35792: PUSH
35793: LD_VAR 0 5
35797: PPUSH
35798: LD_VAR 0 7
35802: PPUSH
35803: LD_VAR 0 6
35807: PUSH
35808: LD_VAR 0 8
35812: PUSH
35813: EMPTY
35814: LIST
35815: LIST
35816: PPUSH
35817: CALL_OW 2
35821: ST_TO_ADDR
// break ;
35822: GO 35826
// end ; end ;
35824: GO 35763
35826: POP
35827: POP
// end ; end ;
35828: GO 35611
35830: POP
35831: POP
// if result and not asc then
35832: LD_VAR 0 5
35836: PUSH
35837: LD_VAR 0 3
35841: NOT
35842: AND
35843: IFFALSE 35860
// result := ReverseArray ( result ) ;
35845: LD_ADDR_VAR 0 5
35849: PUSH
35850: LD_VAR 0 5
35854: PPUSH
35855: CALL 63100 0 1
35859: ST_TO_ADDR
// tmp := [ ] ;
35860: LD_ADDR_VAR 0 8
35864: PUSH
35865: EMPTY
35866: ST_TO_ADDR
// if mode then
35867: LD_VAR 0 4
35871: IFFALSE 35935
// begin for i := 1 to result do
35873: LD_ADDR_VAR 0 6
35877: PUSH
35878: DOUBLE
35879: LD_INT 1
35881: DEC
35882: ST_TO_ADDR
35883: LD_VAR 0 5
35887: PUSH
35888: FOR_TO
35889: IFFALSE 35923
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
35891: LD_ADDR_VAR 0 8
35895: PUSH
35896: LD_VAR 0 8
35900: PPUSH
35901: LD_VAR 0 5
35905: PUSH
35906: LD_VAR 0 6
35910: ARRAY
35911: PUSH
35912: LD_INT 1
35914: ARRAY
35915: PPUSH
35916: CALL 67833 0 2
35920: ST_TO_ADDR
35921: GO 35888
35923: POP
35924: POP
// result := tmp ;
35925: LD_ADDR_VAR 0 5
35929: PUSH
35930: LD_VAR 0 8
35934: ST_TO_ADDR
// end ; end ;
35935: LD_VAR 0 5
35939: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
35940: LD_INT 0
35942: PPUSH
35943: PPUSH
35944: PPUSH
35945: PPUSH
// if not list then
35946: LD_VAR 0 3
35950: NOT
35951: IFFALSE 35955
// exit ;
35953: GO 36343
// result := [ ] ;
35955: LD_ADDR_VAR 0 6
35959: PUSH
35960: EMPTY
35961: ST_TO_ADDR
// for i in list do
35962: LD_ADDR_VAR 0 7
35966: PUSH
35967: LD_VAR 0 3
35971: PUSH
35972: FOR_IN
35973: IFFALSE 36175
// begin tmp := GetDistUnitXY ( i , x , y ) ;
35975: LD_ADDR_VAR 0 9
35979: PUSH
35980: LD_VAR 0 7
35984: PPUSH
35985: LD_VAR 0 1
35989: PPUSH
35990: LD_VAR 0 2
35994: PPUSH
35995: CALL_OW 297
35999: ST_TO_ADDR
// if not result then
36000: LD_VAR 0 6
36004: NOT
36005: IFFALSE 36031
// result := [ [ i , tmp ] ] else
36007: LD_ADDR_VAR 0 6
36011: PUSH
36012: LD_VAR 0 7
36016: PUSH
36017: LD_VAR 0 9
36021: PUSH
36022: EMPTY
36023: LIST
36024: LIST
36025: PUSH
36026: EMPTY
36027: LIST
36028: ST_TO_ADDR
36029: GO 36173
// begin if result [ result ] [ 2 ] <= tmp then
36031: LD_VAR 0 6
36035: PUSH
36036: LD_VAR 0 6
36040: ARRAY
36041: PUSH
36042: LD_INT 2
36044: ARRAY
36045: PUSH
36046: LD_VAR 0 9
36050: LESSEQUAL
36051: IFFALSE 36093
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
36053: LD_ADDR_VAR 0 6
36057: PUSH
36058: LD_VAR 0 6
36062: PPUSH
36063: LD_VAR 0 6
36067: PUSH
36068: LD_INT 1
36070: PLUS
36071: PPUSH
36072: LD_VAR 0 7
36076: PUSH
36077: LD_VAR 0 9
36081: PUSH
36082: EMPTY
36083: LIST
36084: LIST
36085: PPUSH
36086: CALL_OW 2
36090: ST_TO_ADDR
36091: GO 36173
// for j := 1 to result do
36093: LD_ADDR_VAR 0 8
36097: PUSH
36098: DOUBLE
36099: LD_INT 1
36101: DEC
36102: ST_TO_ADDR
36103: LD_VAR 0 6
36107: PUSH
36108: FOR_TO
36109: IFFALSE 36171
// begin if tmp < result [ j ] [ 2 ] then
36111: LD_VAR 0 9
36115: PUSH
36116: LD_VAR 0 6
36120: PUSH
36121: LD_VAR 0 8
36125: ARRAY
36126: PUSH
36127: LD_INT 2
36129: ARRAY
36130: LESS
36131: IFFALSE 36169
// begin result := Insert ( result , j , [ i , tmp ] ) ;
36133: LD_ADDR_VAR 0 6
36137: PUSH
36138: LD_VAR 0 6
36142: PPUSH
36143: LD_VAR 0 8
36147: PPUSH
36148: LD_VAR 0 7
36152: PUSH
36153: LD_VAR 0 9
36157: PUSH
36158: EMPTY
36159: LIST
36160: LIST
36161: PPUSH
36162: CALL_OW 2
36166: ST_TO_ADDR
// break ;
36167: GO 36171
// end ; end ;
36169: GO 36108
36171: POP
36172: POP
// end ; end ;
36173: GO 35972
36175: POP
36176: POP
// if result and not asc then
36177: LD_VAR 0 6
36181: PUSH
36182: LD_VAR 0 4
36186: NOT
36187: AND
36188: IFFALSE 36263
// begin tmp := result ;
36190: LD_ADDR_VAR 0 9
36194: PUSH
36195: LD_VAR 0 6
36199: ST_TO_ADDR
// for i = tmp downto 1 do
36200: LD_ADDR_VAR 0 7
36204: PUSH
36205: DOUBLE
36206: LD_VAR 0 9
36210: INC
36211: ST_TO_ADDR
36212: LD_INT 1
36214: PUSH
36215: FOR_DOWNTO
36216: IFFALSE 36261
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
36218: LD_ADDR_VAR 0 6
36222: PUSH
36223: LD_VAR 0 6
36227: PPUSH
36228: LD_VAR 0 9
36232: PUSH
36233: LD_VAR 0 7
36237: MINUS
36238: PUSH
36239: LD_INT 1
36241: PLUS
36242: PPUSH
36243: LD_VAR 0 9
36247: PUSH
36248: LD_VAR 0 7
36252: ARRAY
36253: PPUSH
36254: CALL_OW 1
36258: ST_TO_ADDR
36259: GO 36215
36261: POP
36262: POP
// end ; tmp := [ ] ;
36263: LD_ADDR_VAR 0 9
36267: PUSH
36268: EMPTY
36269: ST_TO_ADDR
// if mode then
36270: LD_VAR 0 5
36274: IFFALSE 36343
// begin for i = 1 to result do
36276: LD_ADDR_VAR 0 7
36280: PUSH
36281: DOUBLE
36282: LD_INT 1
36284: DEC
36285: ST_TO_ADDR
36286: LD_VAR 0 6
36290: PUSH
36291: FOR_TO
36292: IFFALSE 36331
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
36294: LD_ADDR_VAR 0 9
36298: PUSH
36299: LD_VAR 0 9
36303: PPUSH
36304: LD_VAR 0 7
36308: PPUSH
36309: LD_VAR 0 6
36313: PUSH
36314: LD_VAR 0 7
36318: ARRAY
36319: PUSH
36320: LD_INT 1
36322: ARRAY
36323: PPUSH
36324: CALL_OW 1
36328: ST_TO_ADDR
36329: GO 36291
36331: POP
36332: POP
// result := tmp ;
36333: LD_ADDR_VAR 0 6
36337: PUSH
36338: LD_VAR 0 9
36342: ST_TO_ADDR
// end ; end ;
36343: LD_VAR 0 6
36347: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
36348: LD_INT 0
36350: PPUSH
36351: PPUSH
36352: PPUSH
36353: PPUSH
36354: PPUSH
36355: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
36356: LD_ADDR_VAR 0 5
36360: PUSH
36361: LD_INT 0
36363: PUSH
36364: LD_INT 0
36366: PUSH
36367: LD_INT 0
36369: PUSH
36370: EMPTY
36371: PUSH
36372: EMPTY
36373: LIST
36374: LIST
36375: LIST
36376: LIST
36377: ST_TO_ADDR
// if not x or not y then
36378: LD_VAR 0 2
36382: NOT
36383: PUSH
36384: LD_VAR 0 3
36388: NOT
36389: OR
36390: IFFALSE 36394
// exit ;
36392: GO 38044
// if not range then
36394: LD_VAR 0 4
36398: NOT
36399: IFFALSE 36409
// range := 10 ;
36401: LD_ADDR_VAR 0 4
36405: PUSH
36406: LD_INT 10
36408: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
36409: LD_ADDR_VAR 0 8
36413: PUSH
36414: LD_INT 81
36416: PUSH
36417: LD_VAR 0 1
36421: PUSH
36422: EMPTY
36423: LIST
36424: LIST
36425: PUSH
36426: LD_INT 92
36428: PUSH
36429: LD_VAR 0 2
36433: PUSH
36434: LD_VAR 0 3
36438: PUSH
36439: LD_VAR 0 4
36443: PUSH
36444: EMPTY
36445: LIST
36446: LIST
36447: LIST
36448: LIST
36449: PUSH
36450: LD_INT 3
36452: PUSH
36453: LD_INT 21
36455: PUSH
36456: LD_INT 3
36458: PUSH
36459: EMPTY
36460: LIST
36461: LIST
36462: PUSH
36463: EMPTY
36464: LIST
36465: LIST
36466: PUSH
36467: EMPTY
36468: LIST
36469: LIST
36470: LIST
36471: PPUSH
36472: CALL_OW 69
36476: ST_TO_ADDR
// if not tmp then
36477: LD_VAR 0 8
36481: NOT
36482: IFFALSE 36486
// exit ;
36484: GO 38044
// for i in tmp do
36486: LD_ADDR_VAR 0 6
36490: PUSH
36491: LD_VAR 0 8
36495: PUSH
36496: FOR_IN
36497: IFFALSE 38019
// begin points := [ 0 , 0 , 0 ] ;
36499: LD_ADDR_VAR 0 9
36503: PUSH
36504: LD_INT 0
36506: PUSH
36507: LD_INT 0
36509: PUSH
36510: LD_INT 0
36512: PUSH
36513: EMPTY
36514: LIST
36515: LIST
36516: LIST
36517: ST_TO_ADDR
// bpoints := 1 ;
36518: LD_ADDR_VAR 0 10
36522: PUSH
36523: LD_INT 1
36525: ST_TO_ADDR
// case GetType ( i ) of unit_human :
36526: LD_VAR 0 6
36530: PPUSH
36531: CALL_OW 247
36535: PUSH
36536: LD_INT 1
36538: DOUBLE
36539: EQUAL
36540: IFTRUE 36544
36542: GO 37122
36544: POP
// begin if GetClass ( i ) = 1 then
36545: LD_VAR 0 6
36549: PPUSH
36550: CALL_OW 257
36554: PUSH
36555: LD_INT 1
36557: EQUAL
36558: IFFALSE 36579
// points := [ 10 , 5 , 3 ] ;
36560: LD_ADDR_VAR 0 9
36564: PUSH
36565: LD_INT 10
36567: PUSH
36568: LD_INT 5
36570: PUSH
36571: LD_INT 3
36573: PUSH
36574: EMPTY
36575: LIST
36576: LIST
36577: LIST
36578: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
36579: LD_VAR 0 6
36583: PPUSH
36584: CALL_OW 257
36588: PUSH
36589: LD_INT 2
36591: PUSH
36592: LD_INT 3
36594: PUSH
36595: LD_INT 4
36597: PUSH
36598: EMPTY
36599: LIST
36600: LIST
36601: LIST
36602: IN
36603: IFFALSE 36624
// points := [ 3 , 2 , 1 ] ;
36605: LD_ADDR_VAR 0 9
36609: PUSH
36610: LD_INT 3
36612: PUSH
36613: LD_INT 2
36615: PUSH
36616: LD_INT 1
36618: PUSH
36619: EMPTY
36620: LIST
36621: LIST
36622: LIST
36623: ST_TO_ADDR
// if GetClass ( i ) = 5 then
36624: LD_VAR 0 6
36628: PPUSH
36629: CALL_OW 257
36633: PUSH
36634: LD_INT 5
36636: EQUAL
36637: IFFALSE 36658
// points := [ 130 , 5 , 2 ] ;
36639: LD_ADDR_VAR 0 9
36643: PUSH
36644: LD_INT 130
36646: PUSH
36647: LD_INT 5
36649: PUSH
36650: LD_INT 2
36652: PUSH
36653: EMPTY
36654: LIST
36655: LIST
36656: LIST
36657: ST_TO_ADDR
// if GetClass ( i ) = 8 then
36658: LD_VAR 0 6
36662: PPUSH
36663: CALL_OW 257
36667: PUSH
36668: LD_INT 8
36670: EQUAL
36671: IFFALSE 36692
// points := [ 35 , 35 , 30 ] ;
36673: LD_ADDR_VAR 0 9
36677: PUSH
36678: LD_INT 35
36680: PUSH
36681: LD_INT 35
36683: PUSH
36684: LD_INT 30
36686: PUSH
36687: EMPTY
36688: LIST
36689: LIST
36690: LIST
36691: ST_TO_ADDR
// if GetClass ( i ) = 9 then
36692: LD_VAR 0 6
36696: PPUSH
36697: CALL_OW 257
36701: PUSH
36702: LD_INT 9
36704: EQUAL
36705: IFFALSE 36726
// points := [ 20 , 55 , 40 ] ;
36707: LD_ADDR_VAR 0 9
36711: PUSH
36712: LD_INT 20
36714: PUSH
36715: LD_INT 55
36717: PUSH
36718: LD_INT 40
36720: PUSH
36721: EMPTY
36722: LIST
36723: LIST
36724: LIST
36725: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
36726: LD_VAR 0 6
36730: PPUSH
36731: CALL_OW 257
36735: PUSH
36736: LD_INT 12
36738: PUSH
36739: LD_INT 16
36741: PUSH
36742: EMPTY
36743: LIST
36744: LIST
36745: IN
36746: IFFALSE 36767
// points := [ 5 , 3 , 2 ] ;
36748: LD_ADDR_VAR 0 9
36752: PUSH
36753: LD_INT 5
36755: PUSH
36756: LD_INT 3
36758: PUSH
36759: LD_INT 2
36761: PUSH
36762: EMPTY
36763: LIST
36764: LIST
36765: LIST
36766: ST_TO_ADDR
// if GetClass ( i ) = 17 then
36767: LD_VAR 0 6
36771: PPUSH
36772: CALL_OW 257
36776: PUSH
36777: LD_INT 17
36779: EQUAL
36780: IFFALSE 36801
// points := [ 100 , 50 , 75 ] ;
36782: LD_ADDR_VAR 0 9
36786: PUSH
36787: LD_INT 100
36789: PUSH
36790: LD_INT 50
36792: PUSH
36793: LD_INT 75
36795: PUSH
36796: EMPTY
36797: LIST
36798: LIST
36799: LIST
36800: ST_TO_ADDR
// if GetClass ( i ) = 15 then
36801: LD_VAR 0 6
36805: PPUSH
36806: CALL_OW 257
36810: PUSH
36811: LD_INT 15
36813: EQUAL
36814: IFFALSE 36835
// points := [ 10 , 5 , 3 ] ;
36816: LD_ADDR_VAR 0 9
36820: PUSH
36821: LD_INT 10
36823: PUSH
36824: LD_INT 5
36826: PUSH
36827: LD_INT 3
36829: PUSH
36830: EMPTY
36831: LIST
36832: LIST
36833: LIST
36834: ST_TO_ADDR
// if GetClass ( i ) = 14 then
36835: LD_VAR 0 6
36839: PPUSH
36840: CALL_OW 257
36844: PUSH
36845: LD_INT 14
36847: EQUAL
36848: IFFALSE 36869
// points := [ 10 , 0 , 0 ] ;
36850: LD_ADDR_VAR 0 9
36854: PUSH
36855: LD_INT 10
36857: PUSH
36858: LD_INT 0
36860: PUSH
36861: LD_INT 0
36863: PUSH
36864: EMPTY
36865: LIST
36866: LIST
36867: LIST
36868: ST_TO_ADDR
// if GetClass ( i ) = 11 then
36869: LD_VAR 0 6
36873: PPUSH
36874: CALL_OW 257
36878: PUSH
36879: LD_INT 11
36881: EQUAL
36882: IFFALSE 36903
// points := [ 30 , 10 , 5 ] ;
36884: LD_ADDR_VAR 0 9
36888: PUSH
36889: LD_INT 30
36891: PUSH
36892: LD_INT 10
36894: PUSH
36895: LD_INT 5
36897: PUSH
36898: EMPTY
36899: LIST
36900: LIST
36901: LIST
36902: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
36903: LD_VAR 0 1
36907: PPUSH
36908: LD_INT 5
36910: PPUSH
36911: CALL_OW 321
36915: PUSH
36916: LD_INT 2
36918: EQUAL
36919: IFFALSE 36936
// bpoints := bpoints * 1.8 ;
36921: LD_ADDR_VAR 0 10
36925: PUSH
36926: LD_VAR 0 10
36930: PUSH
36931: LD_REAL  1.80000000000000E+0000
36934: MUL
36935: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
36936: LD_VAR 0 6
36940: PPUSH
36941: CALL_OW 257
36945: PUSH
36946: LD_INT 1
36948: PUSH
36949: LD_INT 2
36951: PUSH
36952: LD_INT 3
36954: PUSH
36955: LD_INT 4
36957: PUSH
36958: EMPTY
36959: LIST
36960: LIST
36961: LIST
36962: LIST
36963: IN
36964: PUSH
36965: LD_VAR 0 1
36969: PPUSH
36970: LD_INT 51
36972: PPUSH
36973: CALL_OW 321
36977: PUSH
36978: LD_INT 2
36980: EQUAL
36981: AND
36982: IFFALSE 36999
// bpoints := bpoints * 1.2 ;
36984: LD_ADDR_VAR 0 10
36988: PUSH
36989: LD_VAR 0 10
36993: PUSH
36994: LD_REAL  1.20000000000000E+0000
36997: MUL
36998: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
36999: LD_VAR 0 6
37003: PPUSH
37004: CALL_OW 257
37008: PUSH
37009: LD_INT 5
37011: PUSH
37012: LD_INT 7
37014: PUSH
37015: LD_INT 9
37017: PUSH
37018: EMPTY
37019: LIST
37020: LIST
37021: LIST
37022: IN
37023: PUSH
37024: LD_VAR 0 1
37028: PPUSH
37029: LD_INT 52
37031: PPUSH
37032: CALL_OW 321
37036: PUSH
37037: LD_INT 2
37039: EQUAL
37040: AND
37041: IFFALSE 37058
// bpoints := bpoints * 1.5 ;
37043: LD_ADDR_VAR 0 10
37047: PUSH
37048: LD_VAR 0 10
37052: PUSH
37053: LD_REAL  1.50000000000000E+0000
37056: MUL
37057: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
37058: LD_VAR 0 1
37062: PPUSH
37063: LD_INT 66
37065: PPUSH
37066: CALL_OW 321
37070: PUSH
37071: LD_INT 2
37073: EQUAL
37074: IFFALSE 37091
// bpoints := bpoints * 1.1 ;
37076: LD_ADDR_VAR 0 10
37080: PUSH
37081: LD_VAR 0 10
37085: PUSH
37086: LD_REAL  1.10000000000000E+0000
37089: MUL
37090: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
37091: LD_ADDR_VAR 0 10
37095: PUSH
37096: LD_VAR 0 10
37100: PUSH
37101: LD_VAR 0 6
37105: PPUSH
37106: LD_INT 1
37108: PPUSH
37109: CALL_OW 259
37113: PUSH
37114: LD_REAL  1.15000000000000E+0000
37117: MUL
37118: MUL
37119: ST_TO_ADDR
// end ; unit_vehicle :
37120: GO 37948
37122: LD_INT 2
37124: DOUBLE
37125: EQUAL
37126: IFTRUE 37130
37128: GO 37936
37130: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
37131: LD_VAR 0 6
37135: PPUSH
37136: CALL_OW 264
37140: PUSH
37141: LD_INT 2
37143: PUSH
37144: LD_INT 42
37146: PUSH
37147: LD_INT 24
37149: PUSH
37150: EMPTY
37151: LIST
37152: LIST
37153: LIST
37154: IN
37155: IFFALSE 37176
// points := [ 25 , 5 , 3 ] ;
37157: LD_ADDR_VAR 0 9
37161: PUSH
37162: LD_INT 25
37164: PUSH
37165: LD_INT 5
37167: PUSH
37168: LD_INT 3
37170: PUSH
37171: EMPTY
37172: LIST
37173: LIST
37174: LIST
37175: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
37176: LD_VAR 0 6
37180: PPUSH
37181: CALL_OW 264
37185: PUSH
37186: LD_INT 4
37188: PUSH
37189: LD_INT 43
37191: PUSH
37192: LD_INT 25
37194: PUSH
37195: EMPTY
37196: LIST
37197: LIST
37198: LIST
37199: IN
37200: IFFALSE 37221
// points := [ 40 , 15 , 5 ] ;
37202: LD_ADDR_VAR 0 9
37206: PUSH
37207: LD_INT 40
37209: PUSH
37210: LD_INT 15
37212: PUSH
37213: LD_INT 5
37215: PUSH
37216: EMPTY
37217: LIST
37218: LIST
37219: LIST
37220: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
37221: LD_VAR 0 6
37225: PPUSH
37226: CALL_OW 264
37230: PUSH
37231: LD_INT 3
37233: PUSH
37234: LD_INT 23
37236: PUSH
37237: EMPTY
37238: LIST
37239: LIST
37240: IN
37241: IFFALSE 37262
// points := [ 7 , 25 , 8 ] ;
37243: LD_ADDR_VAR 0 9
37247: PUSH
37248: LD_INT 7
37250: PUSH
37251: LD_INT 25
37253: PUSH
37254: LD_INT 8
37256: PUSH
37257: EMPTY
37258: LIST
37259: LIST
37260: LIST
37261: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
37262: LD_VAR 0 6
37266: PPUSH
37267: CALL_OW 264
37271: PUSH
37272: LD_INT 5
37274: PUSH
37275: LD_INT 27
37277: PUSH
37278: LD_INT 44
37280: PUSH
37281: EMPTY
37282: LIST
37283: LIST
37284: LIST
37285: IN
37286: IFFALSE 37307
// points := [ 14 , 50 , 16 ] ;
37288: LD_ADDR_VAR 0 9
37292: PUSH
37293: LD_INT 14
37295: PUSH
37296: LD_INT 50
37298: PUSH
37299: LD_INT 16
37301: PUSH
37302: EMPTY
37303: LIST
37304: LIST
37305: LIST
37306: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
37307: LD_VAR 0 6
37311: PPUSH
37312: CALL_OW 264
37316: PUSH
37317: LD_INT 6
37319: PUSH
37320: LD_INT 46
37322: PUSH
37323: EMPTY
37324: LIST
37325: LIST
37326: IN
37327: IFFALSE 37348
// points := [ 32 , 120 , 70 ] ;
37329: LD_ADDR_VAR 0 9
37333: PUSH
37334: LD_INT 32
37336: PUSH
37337: LD_INT 120
37339: PUSH
37340: LD_INT 70
37342: PUSH
37343: EMPTY
37344: LIST
37345: LIST
37346: LIST
37347: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
37348: LD_VAR 0 6
37352: PPUSH
37353: CALL_OW 264
37357: PUSH
37358: LD_INT 7
37360: PUSH
37361: LD_INT 28
37363: PUSH
37364: LD_INT 45
37366: PUSH
37367: LD_INT 92
37369: PUSH
37370: EMPTY
37371: LIST
37372: LIST
37373: LIST
37374: LIST
37375: IN
37376: IFFALSE 37397
// points := [ 35 , 20 , 45 ] ;
37378: LD_ADDR_VAR 0 9
37382: PUSH
37383: LD_INT 35
37385: PUSH
37386: LD_INT 20
37388: PUSH
37389: LD_INT 45
37391: PUSH
37392: EMPTY
37393: LIST
37394: LIST
37395: LIST
37396: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
37397: LD_VAR 0 6
37401: PPUSH
37402: CALL_OW 264
37406: PUSH
37407: LD_INT 47
37409: PUSH
37410: EMPTY
37411: LIST
37412: IN
37413: IFFALSE 37434
// points := [ 67 , 45 , 75 ] ;
37415: LD_ADDR_VAR 0 9
37419: PUSH
37420: LD_INT 67
37422: PUSH
37423: LD_INT 45
37425: PUSH
37426: LD_INT 75
37428: PUSH
37429: EMPTY
37430: LIST
37431: LIST
37432: LIST
37433: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
37434: LD_VAR 0 6
37438: PPUSH
37439: CALL_OW 264
37443: PUSH
37444: LD_INT 26
37446: PUSH
37447: EMPTY
37448: LIST
37449: IN
37450: IFFALSE 37471
// points := [ 120 , 30 , 80 ] ;
37452: LD_ADDR_VAR 0 9
37456: PUSH
37457: LD_INT 120
37459: PUSH
37460: LD_INT 30
37462: PUSH
37463: LD_INT 80
37465: PUSH
37466: EMPTY
37467: LIST
37468: LIST
37469: LIST
37470: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
37471: LD_VAR 0 6
37475: PPUSH
37476: CALL_OW 264
37480: PUSH
37481: LD_INT 22
37483: PUSH
37484: EMPTY
37485: LIST
37486: IN
37487: IFFALSE 37508
// points := [ 40 , 1 , 1 ] ;
37489: LD_ADDR_VAR 0 9
37493: PUSH
37494: LD_INT 40
37496: PUSH
37497: LD_INT 1
37499: PUSH
37500: LD_INT 1
37502: PUSH
37503: EMPTY
37504: LIST
37505: LIST
37506: LIST
37507: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
37508: LD_VAR 0 6
37512: PPUSH
37513: CALL_OW 264
37517: PUSH
37518: LD_INT 29
37520: PUSH
37521: EMPTY
37522: LIST
37523: IN
37524: IFFALSE 37545
// points := [ 70 , 200 , 400 ] ;
37526: LD_ADDR_VAR 0 9
37530: PUSH
37531: LD_INT 70
37533: PUSH
37534: LD_INT 200
37536: PUSH
37537: LD_INT 400
37539: PUSH
37540: EMPTY
37541: LIST
37542: LIST
37543: LIST
37544: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
37545: LD_VAR 0 6
37549: PPUSH
37550: CALL_OW 264
37554: PUSH
37555: LD_INT 14
37557: PUSH
37558: LD_INT 53
37560: PUSH
37561: EMPTY
37562: LIST
37563: LIST
37564: IN
37565: IFFALSE 37586
// points := [ 40 , 10 , 20 ] ;
37567: LD_ADDR_VAR 0 9
37571: PUSH
37572: LD_INT 40
37574: PUSH
37575: LD_INT 10
37577: PUSH
37578: LD_INT 20
37580: PUSH
37581: EMPTY
37582: LIST
37583: LIST
37584: LIST
37585: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
37586: LD_VAR 0 6
37590: PPUSH
37591: CALL_OW 264
37595: PUSH
37596: LD_INT 9
37598: PUSH
37599: EMPTY
37600: LIST
37601: IN
37602: IFFALSE 37623
// points := [ 5 , 70 , 20 ] ;
37604: LD_ADDR_VAR 0 9
37608: PUSH
37609: LD_INT 5
37611: PUSH
37612: LD_INT 70
37614: PUSH
37615: LD_INT 20
37617: PUSH
37618: EMPTY
37619: LIST
37620: LIST
37621: LIST
37622: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
37623: LD_VAR 0 6
37627: PPUSH
37628: CALL_OW 264
37632: PUSH
37633: LD_INT 10
37635: PUSH
37636: EMPTY
37637: LIST
37638: IN
37639: IFFALSE 37660
// points := [ 35 , 110 , 70 ] ;
37641: LD_ADDR_VAR 0 9
37645: PUSH
37646: LD_INT 35
37648: PUSH
37649: LD_INT 110
37651: PUSH
37652: LD_INT 70
37654: PUSH
37655: EMPTY
37656: LIST
37657: LIST
37658: LIST
37659: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
37660: LD_VAR 0 6
37664: PPUSH
37665: CALL_OW 265
37669: PUSH
37670: LD_INT 25
37672: EQUAL
37673: IFFALSE 37694
// points := [ 80 , 65 , 100 ] ;
37675: LD_ADDR_VAR 0 9
37679: PUSH
37680: LD_INT 80
37682: PUSH
37683: LD_INT 65
37685: PUSH
37686: LD_INT 100
37688: PUSH
37689: EMPTY
37690: LIST
37691: LIST
37692: LIST
37693: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
37694: LD_VAR 0 6
37698: PPUSH
37699: CALL_OW 263
37703: PUSH
37704: LD_INT 1
37706: EQUAL
37707: IFFALSE 37742
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
37709: LD_ADDR_VAR 0 10
37713: PUSH
37714: LD_VAR 0 10
37718: PUSH
37719: LD_VAR 0 6
37723: PPUSH
37724: CALL_OW 311
37728: PPUSH
37729: LD_INT 3
37731: PPUSH
37732: CALL_OW 259
37736: PUSH
37737: LD_INT 4
37739: MUL
37740: MUL
37741: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
37742: LD_VAR 0 6
37746: PPUSH
37747: CALL_OW 263
37751: PUSH
37752: LD_INT 2
37754: EQUAL
37755: IFFALSE 37806
// begin j := IsControledBy ( i ) ;
37757: LD_ADDR_VAR 0 7
37761: PUSH
37762: LD_VAR 0 6
37766: PPUSH
37767: CALL_OW 312
37771: ST_TO_ADDR
// if j then
37772: LD_VAR 0 7
37776: IFFALSE 37806
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
37778: LD_ADDR_VAR 0 10
37782: PUSH
37783: LD_VAR 0 10
37787: PUSH
37788: LD_VAR 0 7
37792: PPUSH
37793: LD_INT 3
37795: PPUSH
37796: CALL_OW 259
37800: PUSH
37801: LD_INT 3
37803: MUL
37804: MUL
37805: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
37806: LD_VAR 0 6
37810: PPUSH
37811: CALL_OW 264
37815: PUSH
37816: LD_INT 5
37818: PUSH
37819: LD_INT 6
37821: PUSH
37822: LD_INT 46
37824: PUSH
37825: LD_INT 44
37827: PUSH
37828: LD_INT 47
37830: PUSH
37831: LD_INT 45
37833: PUSH
37834: LD_INT 28
37836: PUSH
37837: LD_INT 7
37839: PUSH
37840: LD_INT 27
37842: PUSH
37843: LD_INT 29
37845: PUSH
37846: EMPTY
37847: LIST
37848: LIST
37849: LIST
37850: LIST
37851: LIST
37852: LIST
37853: LIST
37854: LIST
37855: LIST
37856: LIST
37857: IN
37858: PUSH
37859: LD_VAR 0 1
37863: PPUSH
37864: LD_INT 52
37866: PPUSH
37867: CALL_OW 321
37871: PUSH
37872: LD_INT 2
37874: EQUAL
37875: AND
37876: IFFALSE 37893
// bpoints := bpoints * 1.2 ;
37878: LD_ADDR_VAR 0 10
37882: PUSH
37883: LD_VAR 0 10
37887: PUSH
37888: LD_REAL  1.20000000000000E+0000
37891: MUL
37892: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
37893: LD_VAR 0 6
37897: PPUSH
37898: CALL_OW 264
37902: PUSH
37903: LD_INT 6
37905: PUSH
37906: LD_INT 46
37908: PUSH
37909: LD_INT 47
37911: PUSH
37912: EMPTY
37913: LIST
37914: LIST
37915: LIST
37916: IN
37917: IFFALSE 37934
// bpoints := bpoints * 1.2 ;
37919: LD_ADDR_VAR 0 10
37923: PUSH
37924: LD_VAR 0 10
37928: PUSH
37929: LD_REAL  1.20000000000000E+0000
37932: MUL
37933: ST_TO_ADDR
// end ; unit_building :
37934: GO 37948
37936: LD_INT 3
37938: DOUBLE
37939: EQUAL
37940: IFTRUE 37944
37942: GO 37947
37944: POP
// ; end ;
37945: GO 37948
37947: POP
// for j = 1 to 3 do
37948: LD_ADDR_VAR 0 7
37952: PUSH
37953: DOUBLE
37954: LD_INT 1
37956: DEC
37957: ST_TO_ADDR
37958: LD_INT 3
37960: PUSH
37961: FOR_TO
37962: IFFALSE 38015
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
37964: LD_ADDR_VAR 0 5
37968: PUSH
37969: LD_VAR 0 5
37973: PPUSH
37974: LD_VAR 0 7
37978: PPUSH
37979: LD_VAR 0 5
37983: PUSH
37984: LD_VAR 0 7
37988: ARRAY
37989: PUSH
37990: LD_VAR 0 9
37994: PUSH
37995: LD_VAR 0 7
37999: ARRAY
38000: PUSH
38001: LD_VAR 0 10
38005: MUL
38006: PLUS
38007: PPUSH
38008: CALL_OW 1
38012: ST_TO_ADDR
38013: GO 37961
38015: POP
38016: POP
// end ;
38017: GO 36496
38019: POP
38020: POP
// result := Replace ( result , 4 , tmp ) ;
38021: LD_ADDR_VAR 0 5
38025: PUSH
38026: LD_VAR 0 5
38030: PPUSH
38031: LD_INT 4
38033: PPUSH
38034: LD_VAR 0 8
38038: PPUSH
38039: CALL_OW 1
38043: ST_TO_ADDR
// end ;
38044: LD_VAR 0 5
38048: RET
// export function DangerAtRange ( unit , range ) ; begin
38049: LD_INT 0
38051: PPUSH
// if not unit then
38052: LD_VAR 0 1
38056: NOT
38057: IFFALSE 38061
// exit ;
38059: GO 38106
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
38061: LD_ADDR_VAR 0 3
38065: PUSH
38066: LD_VAR 0 1
38070: PPUSH
38071: CALL_OW 255
38075: PPUSH
38076: LD_VAR 0 1
38080: PPUSH
38081: CALL_OW 250
38085: PPUSH
38086: LD_VAR 0 1
38090: PPUSH
38091: CALL_OW 251
38095: PPUSH
38096: LD_VAR 0 2
38100: PPUSH
38101: CALL 36348 0 4
38105: ST_TO_ADDR
// end ;
38106: LD_VAR 0 3
38110: RET
// export function DangerInArea ( side , area ) ; begin
38111: LD_INT 0
38113: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
38114: LD_ADDR_VAR 0 3
38118: PUSH
38119: LD_VAR 0 2
38123: PPUSH
38124: LD_INT 81
38126: PUSH
38127: LD_VAR 0 1
38131: PUSH
38132: EMPTY
38133: LIST
38134: LIST
38135: PPUSH
38136: CALL_OW 70
38140: ST_TO_ADDR
// end ;
38141: LD_VAR 0 3
38145: RET
// export function IsExtension ( b ) ; begin
38146: LD_INT 0
38148: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
38149: LD_ADDR_VAR 0 2
38153: PUSH
38154: LD_VAR 0 1
38158: PUSH
38159: LD_INT 23
38161: PUSH
38162: LD_INT 20
38164: PUSH
38165: LD_INT 22
38167: PUSH
38168: LD_INT 17
38170: PUSH
38171: LD_INT 24
38173: PUSH
38174: LD_INT 21
38176: PUSH
38177: LD_INT 19
38179: PUSH
38180: LD_INT 16
38182: PUSH
38183: LD_INT 25
38185: PUSH
38186: LD_INT 18
38188: PUSH
38189: EMPTY
38190: LIST
38191: LIST
38192: LIST
38193: LIST
38194: LIST
38195: LIST
38196: LIST
38197: LIST
38198: LIST
38199: LIST
38200: IN
38201: ST_TO_ADDR
// end ;
38202: LD_VAR 0 2
38206: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
38207: LD_INT 0
38209: PPUSH
38210: PPUSH
38211: PPUSH
// result := [ ] ;
38212: LD_ADDR_VAR 0 4
38216: PUSH
38217: EMPTY
38218: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
38219: LD_ADDR_VAR 0 5
38223: PUSH
38224: LD_VAR 0 2
38228: PPUSH
38229: LD_INT 21
38231: PUSH
38232: LD_INT 3
38234: PUSH
38235: EMPTY
38236: LIST
38237: LIST
38238: PPUSH
38239: CALL_OW 70
38243: ST_TO_ADDR
// if not tmp then
38244: LD_VAR 0 5
38248: NOT
38249: IFFALSE 38253
// exit ;
38251: GO 38317
// if checkLink then
38253: LD_VAR 0 3
38257: IFFALSE 38307
// begin for i in tmp do
38259: LD_ADDR_VAR 0 6
38263: PUSH
38264: LD_VAR 0 5
38268: PUSH
38269: FOR_IN
38270: IFFALSE 38305
// if GetBase ( i ) <> base then
38272: LD_VAR 0 6
38276: PPUSH
38277: CALL_OW 274
38281: PUSH
38282: LD_VAR 0 1
38286: NONEQUAL
38287: IFFALSE 38303
// ComLinkToBase ( base , i ) ;
38289: LD_VAR 0 1
38293: PPUSH
38294: LD_VAR 0 6
38298: PPUSH
38299: CALL_OW 169
38303: GO 38269
38305: POP
38306: POP
// end ; result := tmp ;
38307: LD_ADDR_VAR 0 4
38311: PUSH
38312: LD_VAR 0 5
38316: ST_TO_ADDR
// end ;
38317: LD_VAR 0 4
38321: RET
// export function ComComplete ( units , b ) ; var i ; begin
38322: LD_INT 0
38324: PPUSH
38325: PPUSH
// if not units then
38326: LD_VAR 0 1
38330: NOT
38331: IFFALSE 38335
// exit ;
38333: GO 38425
// for i in units do
38335: LD_ADDR_VAR 0 4
38339: PUSH
38340: LD_VAR 0 1
38344: PUSH
38345: FOR_IN
38346: IFFALSE 38423
// if BuildingStatus ( b ) = bs_build then
38348: LD_VAR 0 2
38352: PPUSH
38353: CALL_OW 461
38357: PUSH
38358: LD_INT 1
38360: EQUAL
38361: IFFALSE 38421
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
38363: LD_VAR 0 4
38367: PPUSH
38368: LD_STRING h
38370: PUSH
38371: LD_VAR 0 2
38375: PPUSH
38376: CALL_OW 250
38380: PUSH
38381: LD_VAR 0 2
38385: PPUSH
38386: CALL_OW 251
38390: PUSH
38391: LD_VAR 0 2
38395: PUSH
38396: LD_INT 0
38398: PUSH
38399: LD_INT 0
38401: PUSH
38402: LD_INT 0
38404: PUSH
38405: EMPTY
38406: LIST
38407: LIST
38408: LIST
38409: LIST
38410: LIST
38411: LIST
38412: LIST
38413: PUSH
38414: EMPTY
38415: LIST
38416: PPUSH
38417: CALL_OW 446
38421: GO 38345
38423: POP
38424: POP
// end ;
38425: LD_VAR 0 3
38429: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
38430: LD_INT 0
38432: PPUSH
38433: PPUSH
38434: PPUSH
38435: PPUSH
38436: PPUSH
38437: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
38438: LD_VAR 0 1
38442: NOT
38443: PUSH
38444: LD_VAR 0 1
38448: PPUSH
38449: CALL_OW 263
38453: PUSH
38454: LD_INT 2
38456: NONEQUAL
38457: OR
38458: IFFALSE 38462
// exit ;
38460: GO 38778
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
38462: LD_ADDR_VAR 0 6
38466: PUSH
38467: LD_INT 22
38469: PUSH
38470: LD_VAR 0 1
38474: PPUSH
38475: CALL_OW 255
38479: PUSH
38480: EMPTY
38481: LIST
38482: LIST
38483: PUSH
38484: LD_INT 2
38486: PUSH
38487: LD_INT 30
38489: PUSH
38490: LD_INT 36
38492: PUSH
38493: EMPTY
38494: LIST
38495: LIST
38496: PUSH
38497: LD_INT 34
38499: PUSH
38500: LD_INT 31
38502: PUSH
38503: EMPTY
38504: LIST
38505: LIST
38506: PUSH
38507: EMPTY
38508: LIST
38509: LIST
38510: LIST
38511: PUSH
38512: EMPTY
38513: LIST
38514: LIST
38515: PPUSH
38516: CALL_OW 69
38520: ST_TO_ADDR
// if not tmp then
38521: LD_VAR 0 6
38525: NOT
38526: IFFALSE 38530
// exit ;
38528: GO 38778
// result := [ ] ;
38530: LD_ADDR_VAR 0 2
38534: PUSH
38535: EMPTY
38536: ST_TO_ADDR
// for i in tmp do
38537: LD_ADDR_VAR 0 3
38541: PUSH
38542: LD_VAR 0 6
38546: PUSH
38547: FOR_IN
38548: IFFALSE 38619
// begin t := UnitsInside ( i ) ;
38550: LD_ADDR_VAR 0 4
38554: PUSH
38555: LD_VAR 0 3
38559: PPUSH
38560: CALL_OW 313
38564: ST_TO_ADDR
// if t then
38565: LD_VAR 0 4
38569: IFFALSE 38617
// for j in t do
38571: LD_ADDR_VAR 0 7
38575: PUSH
38576: LD_VAR 0 4
38580: PUSH
38581: FOR_IN
38582: IFFALSE 38615
// result := Replace ( result , result + 1 , j ) ;
38584: LD_ADDR_VAR 0 2
38588: PUSH
38589: LD_VAR 0 2
38593: PPUSH
38594: LD_VAR 0 2
38598: PUSH
38599: LD_INT 1
38601: PLUS
38602: PPUSH
38603: LD_VAR 0 7
38607: PPUSH
38608: CALL_OW 1
38612: ST_TO_ADDR
38613: GO 38581
38615: POP
38616: POP
// end ;
38617: GO 38547
38619: POP
38620: POP
// if not result then
38621: LD_VAR 0 2
38625: NOT
38626: IFFALSE 38630
// exit ;
38628: GO 38778
// mech := result [ 1 ] ;
38630: LD_ADDR_VAR 0 5
38634: PUSH
38635: LD_VAR 0 2
38639: PUSH
38640: LD_INT 1
38642: ARRAY
38643: ST_TO_ADDR
// if result > 1 then
38644: LD_VAR 0 2
38648: PUSH
38649: LD_INT 1
38651: GREATER
38652: IFFALSE 38764
// begin for i = 2 to result do
38654: LD_ADDR_VAR 0 3
38658: PUSH
38659: DOUBLE
38660: LD_INT 2
38662: DEC
38663: ST_TO_ADDR
38664: LD_VAR 0 2
38668: PUSH
38669: FOR_TO
38670: IFFALSE 38762
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
38672: LD_ADDR_VAR 0 4
38676: PUSH
38677: LD_VAR 0 2
38681: PUSH
38682: LD_VAR 0 3
38686: ARRAY
38687: PPUSH
38688: LD_INT 3
38690: PPUSH
38691: CALL_OW 259
38695: PUSH
38696: LD_VAR 0 2
38700: PUSH
38701: LD_VAR 0 3
38705: ARRAY
38706: PPUSH
38707: CALL_OW 432
38711: MINUS
38712: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
38713: LD_VAR 0 4
38717: PUSH
38718: LD_VAR 0 5
38722: PPUSH
38723: LD_INT 3
38725: PPUSH
38726: CALL_OW 259
38730: PUSH
38731: LD_VAR 0 5
38735: PPUSH
38736: CALL_OW 432
38740: MINUS
38741: GREATEREQUAL
38742: IFFALSE 38760
// mech := result [ i ] ;
38744: LD_ADDR_VAR 0 5
38748: PUSH
38749: LD_VAR 0 2
38753: PUSH
38754: LD_VAR 0 3
38758: ARRAY
38759: ST_TO_ADDR
// end ;
38760: GO 38669
38762: POP
38763: POP
// end ; ComLinkTo ( vehicle , mech ) ;
38764: LD_VAR 0 1
38768: PPUSH
38769: LD_VAR 0 5
38773: PPUSH
38774: CALL_OW 135
// end ;
38778: LD_VAR 0 2
38782: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
38783: LD_INT 0
38785: PPUSH
38786: PPUSH
38787: PPUSH
38788: PPUSH
38789: PPUSH
38790: PPUSH
38791: PPUSH
38792: PPUSH
38793: PPUSH
38794: PPUSH
38795: PPUSH
38796: PPUSH
38797: PPUSH
// result := [ ] ;
38798: LD_ADDR_VAR 0 7
38802: PUSH
38803: EMPTY
38804: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
38805: LD_VAR 0 1
38809: PPUSH
38810: CALL_OW 266
38814: PUSH
38815: LD_INT 0
38817: PUSH
38818: LD_INT 1
38820: PUSH
38821: EMPTY
38822: LIST
38823: LIST
38824: IN
38825: NOT
38826: IFFALSE 38830
// exit ;
38828: GO 40464
// if name then
38830: LD_VAR 0 3
38834: IFFALSE 38850
// SetBName ( base_dep , name ) ;
38836: LD_VAR 0 1
38840: PPUSH
38841: LD_VAR 0 3
38845: PPUSH
38846: CALL_OW 500
// base := GetBase ( base_dep ) ;
38850: LD_ADDR_VAR 0 15
38854: PUSH
38855: LD_VAR 0 1
38859: PPUSH
38860: CALL_OW 274
38864: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
38865: LD_ADDR_VAR 0 16
38869: PUSH
38870: LD_VAR 0 1
38874: PPUSH
38875: CALL_OW 255
38879: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
38880: LD_ADDR_VAR 0 17
38884: PUSH
38885: LD_VAR 0 1
38889: PPUSH
38890: CALL_OW 248
38894: ST_TO_ADDR
// if sources then
38895: LD_VAR 0 5
38899: IFFALSE 38946
// for i = 1 to 3 do
38901: LD_ADDR_VAR 0 8
38905: PUSH
38906: DOUBLE
38907: LD_INT 1
38909: DEC
38910: ST_TO_ADDR
38911: LD_INT 3
38913: PUSH
38914: FOR_TO
38915: IFFALSE 38944
// AddResourceType ( base , i , sources [ i ] ) ;
38917: LD_VAR 0 15
38921: PPUSH
38922: LD_VAR 0 8
38926: PPUSH
38927: LD_VAR 0 5
38931: PUSH
38932: LD_VAR 0 8
38936: ARRAY
38937: PPUSH
38938: CALL_OW 276
38942: GO 38914
38944: POP
38945: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
38946: LD_ADDR_VAR 0 18
38950: PUSH
38951: LD_VAR 0 15
38955: PPUSH
38956: LD_VAR 0 2
38960: PPUSH
38961: LD_INT 1
38963: PPUSH
38964: CALL 38207 0 3
38968: ST_TO_ADDR
// InitHc ;
38969: CALL_OW 19
// InitUc ;
38973: CALL_OW 18
// uc_side := side ;
38977: LD_ADDR_OWVAR 20
38981: PUSH
38982: LD_VAR 0 16
38986: ST_TO_ADDR
// uc_nation := nation ;
38987: LD_ADDR_OWVAR 21
38991: PUSH
38992: LD_VAR 0 17
38996: ST_TO_ADDR
// if buildings then
38997: LD_VAR 0 18
39001: IFFALSE 40323
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
39003: LD_ADDR_VAR 0 19
39007: PUSH
39008: LD_VAR 0 18
39012: PPUSH
39013: LD_INT 2
39015: PUSH
39016: LD_INT 30
39018: PUSH
39019: LD_INT 29
39021: PUSH
39022: EMPTY
39023: LIST
39024: LIST
39025: PUSH
39026: LD_INT 30
39028: PUSH
39029: LD_INT 30
39031: PUSH
39032: EMPTY
39033: LIST
39034: LIST
39035: PUSH
39036: EMPTY
39037: LIST
39038: LIST
39039: LIST
39040: PPUSH
39041: CALL_OW 72
39045: ST_TO_ADDR
// if tmp then
39046: LD_VAR 0 19
39050: IFFALSE 39098
// for i in tmp do
39052: LD_ADDR_VAR 0 8
39056: PUSH
39057: LD_VAR 0 19
39061: PUSH
39062: FOR_IN
39063: IFFALSE 39096
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
39065: LD_VAR 0 8
39069: PPUSH
39070: CALL_OW 250
39074: PPUSH
39075: LD_VAR 0 8
39079: PPUSH
39080: CALL_OW 251
39084: PPUSH
39085: LD_VAR 0 16
39089: PPUSH
39090: CALL_OW 441
39094: GO 39062
39096: POP
39097: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
39098: LD_VAR 0 18
39102: PPUSH
39103: LD_INT 2
39105: PUSH
39106: LD_INT 30
39108: PUSH
39109: LD_INT 32
39111: PUSH
39112: EMPTY
39113: LIST
39114: LIST
39115: PUSH
39116: LD_INT 30
39118: PUSH
39119: LD_INT 33
39121: PUSH
39122: EMPTY
39123: LIST
39124: LIST
39125: PUSH
39126: EMPTY
39127: LIST
39128: LIST
39129: LIST
39130: PPUSH
39131: CALL_OW 72
39135: IFFALSE 39223
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
39137: LD_ADDR_VAR 0 8
39141: PUSH
39142: LD_VAR 0 18
39146: PPUSH
39147: LD_INT 2
39149: PUSH
39150: LD_INT 30
39152: PUSH
39153: LD_INT 32
39155: PUSH
39156: EMPTY
39157: LIST
39158: LIST
39159: PUSH
39160: LD_INT 30
39162: PUSH
39163: LD_INT 33
39165: PUSH
39166: EMPTY
39167: LIST
39168: LIST
39169: PUSH
39170: EMPTY
39171: LIST
39172: LIST
39173: LIST
39174: PPUSH
39175: CALL_OW 72
39179: PUSH
39180: FOR_IN
39181: IFFALSE 39221
// begin if not GetBWeapon ( i ) then
39183: LD_VAR 0 8
39187: PPUSH
39188: CALL_OW 269
39192: NOT
39193: IFFALSE 39219
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
39195: LD_VAR 0 8
39199: PPUSH
39200: LD_VAR 0 8
39204: PPUSH
39205: LD_VAR 0 2
39209: PPUSH
39210: CALL 40469 0 2
39214: PPUSH
39215: CALL_OW 431
// end ;
39219: GO 39180
39221: POP
39222: POP
// end ; for i = 1 to personel do
39223: LD_ADDR_VAR 0 8
39227: PUSH
39228: DOUBLE
39229: LD_INT 1
39231: DEC
39232: ST_TO_ADDR
39233: LD_VAR 0 6
39237: PUSH
39238: FOR_TO
39239: IFFALSE 40303
// begin if i > 4 then
39241: LD_VAR 0 8
39245: PUSH
39246: LD_INT 4
39248: GREATER
39249: IFFALSE 39253
// break ;
39251: GO 40303
// case i of 1 :
39253: LD_VAR 0 8
39257: PUSH
39258: LD_INT 1
39260: DOUBLE
39261: EQUAL
39262: IFTRUE 39266
39264: GO 39346
39266: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
39267: LD_ADDR_VAR 0 12
39271: PUSH
39272: LD_VAR 0 18
39276: PPUSH
39277: LD_INT 22
39279: PUSH
39280: LD_VAR 0 16
39284: PUSH
39285: EMPTY
39286: LIST
39287: LIST
39288: PUSH
39289: LD_INT 58
39291: PUSH
39292: EMPTY
39293: LIST
39294: PUSH
39295: LD_INT 2
39297: PUSH
39298: LD_INT 30
39300: PUSH
39301: LD_INT 32
39303: PUSH
39304: EMPTY
39305: LIST
39306: LIST
39307: PUSH
39308: LD_INT 30
39310: PUSH
39311: LD_INT 4
39313: PUSH
39314: EMPTY
39315: LIST
39316: LIST
39317: PUSH
39318: LD_INT 30
39320: PUSH
39321: LD_INT 5
39323: PUSH
39324: EMPTY
39325: LIST
39326: LIST
39327: PUSH
39328: EMPTY
39329: LIST
39330: LIST
39331: LIST
39332: LIST
39333: PUSH
39334: EMPTY
39335: LIST
39336: LIST
39337: LIST
39338: PPUSH
39339: CALL_OW 72
39343: ST_TO_ADDR
39344: GO 39568
39346: LD_INT 2
39348: DOUBLE
39349: EQUAL
39350: IFTRUE 39354
39352: GO 39416
39354: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
39355: LD_ADDR_VAR 0 12
39359: PUSH
39360: LD_VAR 0 18
39364: PPUSH
39365: LD_INT 22
39367: PUSH
39368: LD_VAR 0 16
39372: PUSH
39373: EMPTY
39374: LIST
39375: LIST
39376: PUSH
39377: LD_INT 2
39379: PUSH
39380: LD_INT 30
39382: PUSH
39383: LD_INT 0
39385: PUSH
39386: EMPTY
39387: LIST
39388: LIST
39389: PUSH
39390: LD_INT 30
39392: PUSH
39393: LD_INT 1
39395: PUSH
39396: EMPTY
39397: LIST
39398: LIST
39399: PUSH
39400: EMPTY
39401: LIST
39402: LIST
39403: LIST
39404: PUSH
39405: EMPTY
39406: LIST
39407: LIST
39408: PPUSH
39409: CALL_OW 72
39413: ST_TO_ADDR
39414: GO 39568
39416: LD_INT 3
39418: DOUBLE
39419: EQUAL
39420: IFTRUE 39424
39422: GO 39486
39424: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
39425: LD_ADDR_VAR 0 12
39429: PUSH
39430: LD_VAR 0 18
39434: PPUSH
39435: LD_INT 22
39437: PUSH
39438: LD_VAR 0 16
39442: PUSH
39443: EMPTY
39444: LIST
39445: LIST
39446: PUSH
39447: LD_INT 2
39449: PUSH
39450: LD_INT 30
39452: PUSH
39453: LD_INT 2
39455: PUSH
39456: EMPTY
39457: LIST
39458: LIST
39459: PUSH
39460: LD_INT 30
39462: PUSH
39463: LD_INT 3
39465: PUSH
39466: EMPTY
39467: LIST
39468: LIST
39469: PUSH
39470: EMPTY
39471: LIST
39472: LIST
39473: LIST
39474: PUSH
39475: EMPTY
39476: LIST
39477: LIST
39478: PPUSH
39479: CALL_OW 72
39483: ST_TO_ADDR
39484: GO 39568
39486: LD_INT 4
39488: DOUBLE
39489: EQUAL
39490: IFTRUE 39494
39492: GO 39567
39494: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
39495: LD_ADDR_VAR 0 12
39499: PUSH
39500: LD_VAR 0 18
39504: PPUSH
39505: LD_INT 22
39507: PUSH
39508: LD_VAR 0 16
39512: PUSH
39513: EMPTY
39514: LIST
39515: LIST
39516: PUSH
39517: LD_INT 2
39519: PUSH
39520: LD_INT 30
39522: PUSH
39523: LD_INT 6
39525: PUSH
39526: EMPTY
39527: LIST
39528: LIST
39529: PUSH
39530: LD_INT 30
39532: PUSH
39533: LD_INT 7
39535: PUSH
39536: EMPTY
39537: LIST
39538: LIST
39539: PUSH
39540: LD_INT 30
39542: PUSH
39543: LD_INT 8
39545: PUSH
39546: EMPTY
39547: LIST
39548: LIST
39549: PUSH
39550: EMPTY
39551: LIST
39552: LIST
39553: LIST
39554: LIST
39555: PUSH
39556: EMPTY
39557: LIST
39558: LIST
39559: PPUSH
39560: CALL_OW 72
39564: ST_TO_ADDR
39565: GO 39568
39567: POP
// if i = 1 then
39568: LD_VAR 0 8
39572: PUSH
39573: LD_INT 1
39575: EQUAL
39576: IFFALSE 39687
// begin tmp := [ ] ;
39578: LD_ADDR_VAR 0 19
39582: PUSH
39583: EMPTY
39584: ST_TO_ADDR
// for j in f do
39585: LD_ADDR_VAR 0 9
39589: PUSH
39590: LD_VAR 0 12
39594: PUSH
39595: FOR_IN
39596: IFFALSE 39669
// if GetBType ( j ) = b_bunker then
39598: LD_VAR 0 9
39602: PPUSH
39603: CALL_OW 266
39607: PUSH
39608: LD_INT 32
39610: EQUAL
39611: IFFALSE 39638
// tmp := Insert ( tmp , 1 , j ) else
39613: LD_ADDR_VAR 0 19
39617: PUSH
39618: LD_VAR 0 19
39622: PPUSH
39623: LD_INT 1
39625: PPUSH
39626: LD_VAR 0 9
39630: PPUSH
39631: CALL_OW 2
39635: ST_TO_ADDR
39636: GO 39667
// tmp := Insert ( tmp , tmp + 1 , j ) ;
39638: LD_ADDR_VAR 0 19
39642: PUSH
39643: LD_VAR 0 19
39647: PPUSH
39648: LD_VAR 0 19
39652: PUSH
39653: LD_INT 1
39655: PLUS
39656: PPUSH
39657: LD_VAR 0 9
39661: PPUSH
39662: CALL_OW 2
39666: ST_TO_ADDR
39667: GO 39595
39669: POP
39670: POP
// if tmp then
39671: LD_VAR 0 19
39675: IFFALSE 39687
// f := tmp ;
39677: LD_ADDR_VAR 0 12
39681: PUSH
39682: LD_VAR 0 19
39686: ST_TO_ADDR
// end ; x := personel [ i ] ;
39687: LD_ADDR_VAR 0 13
39691: PUSH
39692: LD_VAR 0 6
39696: PUSH
39697: LD_VAR 0 8
39701: ARRAY
39702: ST_TO_ADDR
// if x = - 1 then
39703: LD_VAR 0 13
39707: PUSH
39708: LD_INT 1
39710: NEG
39711: EQUAL
39712: IFFALSE 39921
// begin for j in f do
39714: LD_ADDR_VAR 0 9
39718: PUSH
39719: LD_VAR 0 12
39723: PUSH
39724: FOR_IN
39725: IFFALSE 39917
// repeat InitHc ;
39727: CALL_OW 19
// if GetBType ( j ) = b_barracks then
39731: LD_VAR 0 9
39735: PPUSH
39736: CALL_OW 266
39740: PUSH
39741: LD_INT 5
39743: EQUAL
39744: IFFALSE 39814
// begin if UnitsInside ( j ) < 3 then
39746: LD_VAR 0 9
39750: PPUSH
39751: CALL_OW 313
39755: PUSH
39756: LD_INT 3
39758: LESS
39759: IFFALSE 39795
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
39761: LD_INT 0
39763: PPUSH
39764: LD_INT 5
39766: PUSH
39767: LD_INT 8
39769: PUSH
39770: LD_INT 9
39772: PUSH
39773: EMPTY
39774: LIST
39775: LIST
39776: LIST
39777: PUSH
39778: LD_VAR 0 17
39782: ARRAY
39783: PPUSH
39784: LD_VAR 0 4
39788: PPUSH
39789: CALL_OW 380
39793: GO 39812
// PrepareHuman ( false , i , skill ) ;
39795: LD_INT 0
39797: PPUSH
39798: LD_VAR 0 8
39802: PPUSH
39803: LD_VAR 0 4
39807: PPUSH
39808: CALL_OW 380
// end else
39812: GO 39831
// PrepareHuman ( false , i , skill ) ;
39814: LD_INT 0
39816: PPUSH
39817: LD_VAR 0 8
39821: PPUSH
39822: LD_VAR 0 4
39826: PPUSH
39827: CALL_OW 380
// un := CreateHuman ;
39831: LD_ADDR_VAR 0 14
39835: PUSH
39836: CALL_OW 44
39840: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39841: LD_ADDR_VAR 0 7
39845: PUSH
39846: LD_VAR 0 7
39850: PPUSH
39851: LD_INT 1
39853: PPUSH
39854: LD_VAR 0 14
39858: PPUSH
39859: CALL_OW 2
39863: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
39864: LD_VAR 0 14
39868: PPUSH
39869: LD_VAR 0 9
39873: PPUSH
39874: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
39878: LD_VAR 0 9
39882: PPUSH
39883: CALL_OW 313
39887: PUSH
39888: LD_INT 6
39890: EQUAL
39891: PUSH
39892: LD_VAR 0 9
39896: PPUSH
39897: CALL_OW 266
39901: PUSH
39902: LD_INT 32
39904: PUSH
39905: LD_INT 31
39907: PUSH
39908: EMPTY
39909: LIST
39910: LIST
39911: IN
39912: OR
39913: IFFALSE 39727
39915: GO 39724
39917: POP
39918: POP
// end else
39919: GO 40301
// for j = 1 to x do
39921: LD_ADDR_VAR 0 9
39925: PUSH
39926: DOUBLE
39927: LD_INT 1
39929: DEC
39930: ST_TO_ADDR
39931: LD_VAR 0 13
39935: PUSH
39936: FOR_TO
39937: IFFALSE 40299
// begin InitHc ;
39939: CALL_OW 19
// if not f then
39943: LD_VAR 0 12
39947: NOT
39948: IFFALSE 40037
// begin PrepareHuman ( false , i , skill ) ;
39950: LD_INT 0
39952: PPUSH
39953: LD_VAR 0 8
39957: PPUSH
39958: LD_VAR 0 4
39962: PPUSH
39963: CALL_OW 380
// un := CreateHuman ;
39967: LD_ADDR_VAR 0 14
39971: PUSH
39972: CALL_OW 44
39976: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39977: LD_ADDR_VAR 0 7
39981: PUSH
39982: LD_VAR 0 7
39986: PPUSH
39987: LD_INT 1
39989: PPUSH
39990: LD_VAR 0 14
39994: PPUSH
39995: CALL_OW 2
39999: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
40000: LD_VAR 0 14
40004: PPUSH
40005: LD_VAR 0 1
40009: PPUSH
40010: CALL_OW 250
40014: PPUSH
40015: LD_VAR 0 1
40019: PPUSH
40020: CALL_OW 251
40024: PPUSH
40025: LD_INT 10
40027: PPUSH
40028: LD_INT 0
40030: PPUSH
40031: CALL_OW 50
// continue ;
40035: GO 39936
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
40037: LD_VAR 0 12
40041: PUSH
40042: LD_INT 1
40044: ARRAY
40045: PPUSH
40046: CALL_OW 313
40050: PUSH
40051: LD_VAR 0 12
40055: PUSH
40056: LD_INT 1
40058: ARRAY
40059: PPUSH
40060: CALL_OW 266
40064: PUSH
40065: LD_INT 32
40067: PUSH
40068: LD_INT 31
40070: PUSH
40071: EMPTY
40072: LIST
40073: LIST
40074: IN
40075: AND
40076: PUSH
40077: LD_VAR 0 12
40081: PUSH
40082: LD_INT 1
40084: ARRAY
40085: PPUSH
40086: CALL_OW 313
40090: PUSH
40091: LD_INT 6
40093: EQUAL
40094: OR
40095: IFFALSE 40115
// f := Delete ( f , 1 ) ;
40097: LD_ADDR_VAR 0 12
40101: PUSH
40102: LD_VAR 0 12
40106: PPUSH
40107: LD_INT 1
40109: PPUSH
40110: CALL_OW 3
40114: ST_TO_ADDR
// if not f then
40115: LD_VAR 0 12
40119: NOT
40120: IFFALSE 40138
// begin x := x + 2 ;
40122: LD_ADDR_VAR 0 13
40126: PUSH
40127: LD_VAR 0 13
40131: PUSH
40132: LD_INT 2
40134: PLUS
40135: ST_TO_ADDR
// continue ;
40136: GO 39936
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
40138: LD_VAR 0 12
40142: PUSH
40143: LD_INT 1
40145: ARRAY
40146: PPUSH
40147: CALL_OW 266
40151: PUSH
40152: LD_INT 5
40154: EQUAL
40155: IFFALSE 40229
// begin if UnitsInside ( f [ 1 ] ) < 3 then
40157: LD_VAR 0 12
40161: PUSH
40162: LD_INT 1
40164: ARRAY
40165: PPUSH
40166: CALL_OW 313
40170: PUSH
40171: LD_INT 3
40173: LESS
40174: IFFALSE 40210
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
40176: LD_INT 0
40178: PPUSH
40179: LD_INT 5
40181: PUSH
40182: LD_INT 8
40184: PUSH
40185: LD_INT 9
40187: PUSH
40188: EMPTY
40189: LIST
40190: LIST
40191: LIST
40192: PUSH
40193: LD_VAR 0 17
40197: ARRAY
40198: PPUSH
40199: LD_VAR 0 4
40203: PPUSH
40204: CALL_OW 380
40208: GO 40227
// PrepareHuman ( false , i , skill ) ;
40210: LD_INT 0
40212: PPUSH
40213: LD_VAR 0 8
40217: PPUSH
40218: LD_VAR 0 4
40222: PPUSH
40223: CALL_OW 380
// end else
40227: GO 40246
// PrepareHuman ( false , i , skill ) ;
40229: LD_INT 0
40231: PPUSH
40232: LD_VAR 0 8
40236: PPUSH
40237: LD_VAR 0 4
40241: PPUSH
40242: CALL_OW 380
// un := CreateHuman ;
40246: LD_ADDR_VAR 0 14
40250: PUSH
40251: CALL_OW 44
40255: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
40256: LD_ADDR_VAR 0 7
40260: PUSH
40261: LD_VAR 0 7
40265: PPUSH
40266: LD_INT 1
40268: PPUSH
40269: LD_VAR 0 14
40273: PPUSH
40274: CALL_OW 2
40278: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
40279: LD_VAR 0 14
40283: PPUSH
40284: LD_VAR 0 12
40288: PUSH
40289: LD_INT 1
40291: ARRAY
40292: PPUSH
40293: CALL_OW 52
// end ;
40297: GO 39936
40299: POP
40300: POP
// end ;
40301: GO 39238
40303: POP
40304: POP
// result := result ^ buildings ;
40305: LD_ADDR_VAR 0 7
40309: PUSH
40310: LD_VAR 0 7
40314: PUSH
40315: LD_VAR 0 18
40319: ADD
40320: ST_TO_ADDR
// end else
40321: GO 40464
// begin for i = 1 to personel do
40323: LD_ADDR_VAR 0 8
40327: PUSH
40328: DOUBLE
40329: LD_INT 1
40331: DEC
40332: ST_TO_ADDR
40333: LD_VAR 0 6
40337: PUSH
40338: FOR_TO
40339: IFFALSE 40462
// begin if i > 4 then
40341: LD_VAR 0 8
40345: PUSH
40346: LD_INT 4
40348: GREATER
40349: IFFALSE 40353
// break ;
40351: GO 40462
// x := personel [ i ] ;
40353: LD_ADDR_VAR 0 13
40357: PUSH
40358: LD_VAR 0 6
40362: PUSH
40363: LD_VAR 0 8
40367: ARRAY
40368: ST_TO_ADDR
// if x = - 1 then
40369: LD_VAR 0 13
40373: PUSH
40374: LD_INT 1
40376: NEG
40377: EQUAL
40378: IFFALSE 40382
// continue ;
40380: GO 40338
// PrepareHuman ( false , i , skill ) ;
40382: LD_INT 0
40384: PPUSH
40385: LD_VAR 0 8
40389: PPUSH
40390: LD_VAR 0 4
40394: PPUSH
40395: CALL_OW 380
// un := CreateHuman ;
40399: LD_ADDR_VAR 0 14
40403: PUSH
40404: CALL_OW 44
40408: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
40409: LD_VAR 0 14
40413: PPUSH
40414: LD_VAR 0 1
40418: PPUSH
40419: CALL_OW 250
40423: PPUSH
40424: LD_VAR 0 1
40428: PPUSH
40429: CALL_OW 251
40433: PPUSH
40434: LD_INT 10
40436: PPUSH
40437: LD_INT 0
40439: PPUSH
40440: CALL_OW 50
// result := result ^ un ;
40444: LD_ADDR_VAR 0 7
40448: PUSH
40449: LD_VAR 0 7
40453: PUSH
40454: LD_VAR 0 14
40458: ADD
40459: ST_TO_ADDR
// end ;
40460: GO 40338
40462: POP
40463: POP
// end ; end ;
40464: LD_VAR 0 7
40468: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
40469: LD_INT 0
40471: PPUSH
40472: PPUSH
40473: PPUSH
40474: PPUSH
40475: PPUSH
40476: PPUSH
40477: PPUSH
40478: PPUSH
40479: PPUSH
40480: PPUSH
40481: PPUSH
40482: PPUSH
40483: PPUSH
40484: PPUSH
40485: PPUSH
40486: PPUSH
// result := false ;
40487: LD_ADDR_VAR 0 3
40491: PUSH
40492: LD_INT 0
40494: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
40495: LD_VAR 0 1
40499: NOT
40500: PUSH
40501: LD_VAR 0 1
40505: PPUSH
40506: CALL_OW 266
40510: PUSH
40511: LD_INT 32
40513: PUSH
40514: LD_INT 33
40516: PUSH
40517: EMPTY
40518: LIST
40519: LIST
40520: IN
40521: NOT
40522: OR
40523: IFFALSE 40527
// exit ;
40525: GO 41636
// nat := GetNation ( tower ) ;
40527: LD_ADDR_VAR 0 12
40531: PUSH
40532: LD_VAR 0 1
40536: PPUSH
40537: CALL_OW 248
40541: ST_TO_ADDR
// side := GetSide ( tower ) ;
40542: LD_ADDR_VAR 0 16
40546: PUSH
40547: LD_VAR 0 1
40551: PPUSH
40552: CALL_OW 255
40556: ST_TO_ADDR
// x := GetX ( tower ) ;
40557: LD_ADDR_VAR 0 10
40561: PUSH
40562: LD_VAR 0 1
40566: PPUSH
40567: CALL_OW 250
40571: ST_TO_ADDR
// y := GetY ( tower ) ;
40572: LD_ADDR_VAR 0 11
40576: PUSH
40577: LD_VAR 0 1
40581: PPUSH
40582: CALL_OW 251
40586: ST_TO_ADDR
// if not x or not y then
40587: LD_VAR 0 10
40591: NOT
40592: PUSH
40593: LD_VAR 0 11
40597: NOT
40598: OR
40599: IFFALSE 40603
// exit ;
40601: GO 41636
// weapon := 0 ;
40603: LD_ADDR_VAR 0 18
40607: PUSH
40608: LD_INT 0
40610: ST_TO_ADDR
// fac_list := [ ] ;
40611: LD_ADDR_VAR 0 17
40615: PUSH
40616: EMPTY
40617: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
40618: LD_ADDR_VAR 0 6
40622: PUSH
40623: LD_VAR 0 1
40627: PPUSH
40628: CALL_OW 274
40632: PPUSH
40633: LD_VAR 0 2
40637: PPUSH
40638: LD_INT 0
40640: PPUSH
40641: CALL 38207 0 3
40645: PPUSH
40646: LD_INT 30
40648: PUSH
40649: LD_INT 3
40651: PUSH
40652: EMPTY
40653: LIST
40654: LIST
40655: PPUSH
40656: CALL_OW 72
40660: ST_TO_ADDR
// if not factories then
40661: LD_VAR 0 6
40665: NOT
40666: IFFALSE 40670
// exit ;
40668: GO 41636
// for i in factories do
40670: LD_ADDR_VAR 0 8
40674: PUSH
40675: LD_VAR 0 6
40679: PUSH
40680: FOR_IN
40681: IFFALSE 40706
// fac_list := fac_list union AvailableWeaponList ( i ) ;
40683: LD_ADDR_VAR 0 17
40687: PUSH
40688: LD_VAR 0 17
40692: PUSH
40693: LD_VAR 0 8
40697: PPUSH
40698: CALL_OW 478
40702: UNION
40703: ST_TO_ADDR
40704: GO 40680
40706: POP
40707: POP
// if not fac_list then
40708: LD_VAR 0 17
40712: NOT
40713: IFFALSE 40717
// exit ;
40715: GO 41636
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
40717: LD_ADDR_VAR 0 5
40721: PUSH
40722: LD_INT 4
40724: PUSH
40725: LD_INT 5
40727: PUSH
40728: LD_INT 9
40730: PUSH
40731: LD_INT 10
40733: PUSH
40734: LD_INT 6
40736: PUSH
40737: LD_INT 7
40739: PUSH
40740: LD_INT 11
40742: PUSH
40743: EMPTY
40744: LIST
40745: LIST
40746: LIST
40747: LIST
40748: LIST
40749: LIST
40750: LIST
40751: PUSH
40752: LD_INT 27
40754: PUSH
40755: LD_INT 28
40757: PUSH
40758: LD_INT 26
40760: PUSH
40761: LD_INT 30
40763: PUSH
40764: EMPTY
40765: LIST
40766: LIST
40767: LIST
40768: LIST
40769: PUSH
40770: LD_INT 43
40772: PUSH
40773: LD_INT 44
40775: PUSH
40776: LD_INT 46
40778: PUSH
40779: LD_INT 45
40781: PUSH
40782: LD_INT 47
40784: PUSH
40785: LD_INT 49
40787: PUSH
40788: EMPTY
40789: LIST
40790: LIST
40791: LIST
40792: LIST
40793: LIST
40794: LIST
40795: PUSH
40796: EMPTY
40797: LIST
40798: LIST
40799: LIST
40800: PUSH
40801: LD_VAR 0 12
40805: ARRAY
40806: ST_TO_ADDR
// list := list isect fac_list ;
40807: LD_ADDR_VAR 0 5
40811: PUSH
40812: LD_VAR 0 5
40816: PUSH
40817: LD_VAR 0 17
40821: ISECT
40822: ST_TO_ADDR
// if not list then
40823: LD_VAR 0 5
40827: NOT
40828: IFFALSE 40832
// exit ;
40830: GO 41636
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
40832: LD_VAR 0 12
40836: PUSH
40837: LD_INT 3
40839: EQUAL
40840: PUSH
40841: LD_INT 49
40843: PUSH
40844: LD_VAR 0 5
40848: IN
40849: AND
40850: PUSH
40851: LD_INT 31
40853: PPUSH
40854: LD_VAR 0 16
40858: PPUSH
40859: CALL_OW 321
40863: PUSH
40864: LD_INT 2
40866: EQUAL
40867: AND
40868: IFFALSE 40928
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
40870: LD_INT 22
40872: PUSH
40873: LD_VAR 0 16
40877: PUSH
40878: EMPTY
40879: LIST
40880: LIST
40881: PUSH
40882: LD_INT 35
40884: PUSH
40885: LD_INT 49
40887: PUSH
40888: EMPTY
40889: LIST
40890: LIST
40891: PUSH
40892: LD_INT 91
40894: PUSH
40895: LD_VAR 0 1
40899: PUSH
40900: LD_INT 10
40902: PUSH
40903: EMPTY
40904: LIST
40905: LIST
40906: LIST
40907: PUSH
40908: EMPTY
40909: LIST
40910: LIST
40911: LIST
40912: PPUSH
40913: CALL_OW 69
40917: NOT
40918: IFFALSE 40928
// weapon := ru_time_lapser ;
40920: LD_ADDR_VAR 0 18
40924: PUSH
40925: LD_INT 49
40927: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
40928: LD_VAR 0 12
40932: PUSH
40933: LD_INT 1
40935: PUSH
40936: LD_INT 2
40938: PUSH
40939: EMPTY
40940: LIST
40941: LIST
40942: IN
40943: PUSH
40944: LD_INT 11
40946: PUSH
40947: LD_VAR 0 5
40951: IN
40952: PUSH
40953: LD_INT 30
40955: PUSH
40956: LD_VAR 0 5
40960: IN
40961: OR
40962: AND
40963: PUSH
40964: LD_INT 6
40966: PPUSH
40967: LD_VAR 0 16
40971: PPUSH
40972: CALL_OW 321
40976: PUSH
40977: LD_INT 2
40979: EQUAL
40980: AND
40981: IFFALSE 41146
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
40983: LD_INT 22
40985: PUSH
40986: LD_VAR 0 16
40990: PUSH
40991: EMPTY
40992: LIST
40993: LIST
40994: PUSH
40995: LD_INT 2
40997: PUSH
40998: LD_INT 35
41000: PUSH
41001: LD_INT 11
41003: PUSH
41004: EMPTY
41005: LIST
41006: LIST
41007: PUSH
41008: LD_INT 35
41010: PUSH
41011: LD_INT 30
41013: PUSH
41014: EMPTY
41015: LIST
41016: LIST
41017: PUSH
41018: EMPTY
41019: LIST
41020: LIST
41021: LIST
41022: PUSH
41023: LD_INT 91
41025: PUSH
41026: LD_VAR 0 1
41030: PUSH
41031: LD_INT 18
41033: PUSH
41034: EMPTY
41035: LIST
41036: LIST
41037: LIST
41038: PUSH
41039: EMPTY
41040: LIST
41041: LIST
41042: LIST
41043: PPUSH
41044: CALL_OW 69
41048: NOT
41049: PUSH
41050: LD_INT 22
41052: PUSH
41053: LD_VAR 0 16
41057: PUSH
41058: EMPTY
41059: LIST
41060: LIST
41061: PUSH
41062: LD_INT 2
41064: PUSH
41065: LD_INT 30
41067: PUSH
41068: LD_INT 32
41070: PUSH
41071: EMPTY
41072: LIST
41073: LIST
41074: PUSH
41075: LD_INT 30
41077: PUSH
41078: LD_INT 33
41080: PUSH
41081: EMPTY
41082: LIST
41083: LIST
41084: PUSH
41085: EMPTY
41086: LIST
41087: LIST
41088: LIST
41089: PUSH
41090: LD_INT 91
41092: PUSH
41093: LD_VAR 0 1
41097: PUSH
41098: LD_INT 12
41100: PUSH
41101: EMPTY
41102: LIST
41103: LIST
41104: LIST
41105: PUSH
41106: EMPTY
41107: LIST
41108: LIST
41109: LIST
41110: PUSH
41111: EMPTY
41112: LIST
41113: PPUSH
41114: CALL_OW 69
41118: PUSH
41119: LD_INT 2
41121: GREATER
41122: AND
41123: IFFALSE 41146
// weapon := [ us_radar , ar_radar ] [ nat ] ;
41125: LD_ADDR_VAR 0 18
41129: PUSH
41130: LD_INT 11
41132: PUSH
41133: LD_INT 30
41135: PUSH
41136: EMPTY
41137: LIST
41138: LIST
41139: PUSH
41140: LD_VAR 0 12
41144: ARRAY
41145: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
41146: LD_VAR 0 18
41150: NOT
41151: PUSH
41152: LD_INT 40
41154: PPUSH
41155: LD_VAR 0 16
41159: PPUSH
41160: CALL_OW 321
41164: PUSH
41165: LD_INT 2
41167: EQUAL
41168: AND
41169: PUSH
41170: LD_INT 7
41172: PUSH
41173: LD_VAR 0 5
41177: IN
41178: PUSH
41179: LD_INT 28
41181: PUSH
41182: LD_VAR 0 5
41186: IN
41187: OR
41188: PUSH
41189: LD_INT 45
41191: PUSH
41192: LD_VAR 0 5
41196: IN
41197: OR
41198: AND
41199: IFFALSE 41453
// begin hex := GetHexInfo ( x , y ) ;
41201: LD_ADDR_VAR 0 4
41205: PUSH
41206: LD_VAR 0 10
41210: PPUSH
41211: LD_VAR 0 11
41215: PPUSH
41216: CALL_OW 546
41220: ST_TO_ADDR
// if hex [ 1 ] then
41221: LD_VAR 0 4
41225: PUSH
41226: LD_INT 1
41228: ARRAY
41229: IFFALSE 41233
// exit ;
41231: GO 41636
// height := hex [ 2 ] ;
41233: LD_ADDR_VAR 0 15
41237: PUSH
41238: LD_VAR 0 4
41242: PUSH
41243: LD_INT 2
41245: ARRAY
41246: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
41247: LD_ADDR_VAR 0 14
41251: PUSH
41252: LD_INT 0
41254: PUSH
41255: LD_INT 2
41257: PUSH
41258: LD_INT 3
41260: PUSH
41261: LD_INT 5
41263: PUSH
41264: EMPTY
41265: LIST
41266: LIST
41267: LIST
41268: LIST
41269: ST_TO_ADDR
// for i in tmp do
41270: LD_ADDR_VAR 0 8
41274: PUSH
41275: LD_VAR 0 14
41279: PUSH
41280: FOR_IN
41281: IFFALSE 41451
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
41283: LD_ADDR_VAR 0 9
41287: PUSH
41288: LD_VAR 0 10
41292: PPUSH
41293: LD_VAR 0 8
41297: PPUSH
41298: LD_INT 5
41300: PPUSH
41301: CALL_OW 272
41305: PUSH
41306: LD_VAR 0 11
41310: PPUSH
41311: LD_VAR 0 8
41315: PPUSH
41316: LD_INT 5
41318: PPUSH
41319: CALL_OW 273
41323: PUSH
41324: EMPTY
41325: LIST
41326: LIST
41327: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
41328: LD_VAR 0 9
41332: PUSH
41333: LD_INT 1
41335: ARRAY
41336: PPUSH
41337: LD_VAR 0 9
41341: PUSH
41342: LD_INT 2
41344: ARRAY
41345: PPUSH
41346: CALL_OW 488
41350: IFFALSE 41449
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
41352: LD_ADDR_VAR 0 4
41356: PUSH
41357: LD_VAR 0 9
41361: PUSH
41362: LD_INT 1
41364: ARRAY
41365: PPUSH
41366: LD_VAR 0 9
41370: PUSH
41371: LD_INT 2
41373: ARRAY
41374: PPUSH
41375: CALL_OW 546
41379: ST_TO_ADDR
// if hex [ 1 ] then
41380: LD_VAR 0 4
41384: PUSH
41385: LD_INT 1
41387: ARRAY
41388: IFFALSE 41392
// continue ;
41390: GO 41280
// h := hex [ 2 ] ;
41392: LD_ADDR_VAR 0 13
41396: PUSH
41397: LD_VAR 0 4
41401: PUSH
41402: LD_INT 2
41404: ARRAY
41405: ST_TO_ADDR
// if h + 7 < height then
41406: LD_VAR 0 13
41410: PUSH
41411: LD_INT 7
41413: PLUS
41414: PUSH
41415: LD_VAR 0 15
41419: LESS
41420: IFFALSE 41449
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
41422: LD_ADDR_VAR 0 18
41426: PUSH
41427: LD_INT 7
41429: PUSH
41430: LD_INT 28
41432: PUSH
41433: LD_INT 45
41435: PUSH
41436: EMPTY
41437: LIST
41438: LIST
41439: LIST
41440: PUSH
41441: LD_VAR 0 12
41445: ARRAY
41446: ST_TO_ADDR
// break ;
41447: GO 41451
// end ; end ; end ;
41449: GO 41280
41451: POP
41452: POP
// end ; if not weapon then
41453: LD_VAR 0 18
41457: NOT
41458: IFFALSE 41518
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
41460: LD_ADDR_VAR 0 5
41464: PUSH
41465: LD_VAR 0 5
41469: PUSH
41470: LD_INT 11
41472: PUSH
41473: LD_INT 30
41475: PUSH
41476: LD_INT 49
41478: PUSH
41479: EMPTY
41480: LIST
41481: LIST
41482: LIST
41483: DIFF
41484: ST_TO_ADDR
// if not list then
41485: LD_VAR 0 5
41489: NOT
41490: IFFALSE 41494
// exit ;
41492: GO 41636
// weapon := list [ rand ( 1 , list ) ] ;
41494: LD_ADDR_VAR 0 18
41498: PUSH
41499: LD_VAR 0 5
41503: PUSH
41504: LD_INT 1
41506: PPUSH
41507: LD_VAR 0 5
41511: PPUSH
41512: CALL_OW 12
41516: ARRAY
41517: ST_TO_ADDR
// end ; if weapon then
41518: LD_VAR 0 18
41522: IFFALSE 41636
// begin tmp := CostOfWeapon ( weapon ) ;
41524: LD_ADDR_VAR 0 14
41528: PUSH
41529: LD_VAR 0 18
41533: PPUSH
41534: CALL_OW 451
41538: ST_TO_ADDR
// j := GetBase ( tower ) ;
41539: LD_ADDR_VAR 0 9
41543: PUSH
41544: LD_VAR 0 1
41548: PPUSH
41549: CALL_OW 274
41553: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
41554: LD_VAR 0 9
41558: PPUSH
41559: LD_INT 1
41561: PPUSH
41562: CALL_OW 275
41566: PUSH
41567: LD_VAR 0 14
41571: PUSH
41572: LD_INT 1
41574: ARRAY
41575: GREATEREQUAL
41576: PUSH
41577: LD_VAR 0 9
41581: PPUSH
41582: LD_INT 2
41584: PPUSH
41585: CALL_OW 275
41589: PUSH
41590: LD_VAR 0 14
41594: PUSH
41595: LD_INT 2
41597: ARRAY
41598: GREATEREQUAL
41599: AND
41600: PUSH
41601: LD_VAR 0 9
41605: PPUSH
41606: LD_INT 3
41608: PPUSH
41609: CALL_OW 275
41613: PUSH
41614: LD_VAR 0 14
41618: PUSH
41619: LD_INT 3
41621: ARRAY
41622: GREATEREQUAL
41623: AND
41624: IFFALSE 41636
// result := weapon ;
41626: LD_ADDR_VAR 0 3
41630: PUSH
41631: LD_VAR 0 18
41635: ST_TO_ADDR
// end ; end ;
41636: LD_VAR 0 3
41640: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
41641: LD_INT 0
41643: PPUSH
41644: PPUSH
// result := true ;
41645: LD_ADDR_VAR 0 3
41649: PUSH
41650: LD_INT 1
41652: ST_TO_ADDR
// if array1 = array2 then
41653: LD_VAR 0 1
41657: PUSH
41658: LD_VAR 0 2
41662: EQUAL
41663: IFFALSE 41723
// begin for i = 1 to array1 do
41665: LD_ADDR_VAR 0 4
41669: PUSH
41670: DOUBLE
41671: LD_INT 1
41673: DEC
41674: ST_TO_ADDR
41675: LD_VAR 0 1
41679: PUSH
41680: FOR_TO
41681: IFFALSE 41719
// if array1 [ i ] <> array2 [ i ] then
41683: LD_VAR 0 1
41687: PUSH
41688: LD_VAR 0 4
41692: ARRAY
41693: PUSH
41694: LD_VAR 0 2
41698: PUSH
41699: LD_VAR 0 4
41703: ARRAY
41704: NONEQUAL
41705: IFFALSE 41717
// begin result := false ;
41707: LD_ADDR_VAR 0 3
41711: PUSH
41712: LD_INT 0
41714: ST_TO_ADDR
// break ;
41715: GO 41719
// end ;
41717: GO 41680
41719: POP
41720: POP
// end else
41721: GO 41731
// result := false ;
41723: LD_ADDR_VAR 0 3
41727: PUSH
41728: LD_INT 0
41730: ST_TO_ADDR
// end ;
41731: LD_VAR 0 3
41735: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
41736: LD_INT 0
41738: PPUSH
41739: PPUSH
// if not array1 or not array2 then
41740: LD_VAR 0 1
41744: NOT
41745: PUSH
41746: LD_VAR 0 2
41750: NOT
41751: OR
41752: IFFALSE 41756
// exit ;
41754: GO 41820
// result := true ;
41756: LD_ADDR_VAR 0 3
41760: PUSH
41761: LD_INT 1
41763: ST_TO_ADDR
// for i = 1 to array1 do
41764: LD_ADDR_VAR 0 4
41768: PUSH
41769: DOUBLE
41770: LD_INT 1
41772: DEC
41773: ST_TO_ADDR
41774: LD_VAR 0 1
41778: PUSH
41779: FOR_TO
41780: IFFALSE 41818
// if array1 [ i ] <> array2 [ i ] then
41782: LD_VAR 0 1
41786: PUSH
41787: LD_VAR 0 4
41791: ARRAY
41792: PUSH
41793: LD_VAR 0 2
41797: PUSH
41798: LD_VAR 0 4
41802: ARRAY
41803: NONEQUAL
41804: IFFALSE 41816
// begin result := false ;
41806: LD_ADDR_VAR 0 3
41810: PUSH
41811: LD_INT 0
41813: ST_TO_ADDR
// break ;
41814: GO 41818
// end ;
41816: GO 41779
41818: POP
41819: POP
// end ;
41820: LD_VAR 0 3
41824: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
41825: LD_INT 0
41827: PPUSH
41828: PPUSH
41829: PPUSH
// pom := GetBase ( fac ) ;
41830: LD_ADDR_VAR 0 5
41834: PUSH
41835: LD_VAR 0 1
41839: PPUSH
41840: CALL_OW 274
41844: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
41845: LD_ADDR_VAR 0 4
41849: PUSH
41850: LD_VAR 0 2
41854: PUSH
41855: LD_INT 1
41857: ARRAY
41858: PPUSH
41859: LD_VAR 0 2
41863: PUSH
41864: LD_INT 2
41866: ARRAY
41867: PPUSH
41868: LD_VAR 0 2
41872: PUSH
41873: LD_INT 3
41875: ARRAY
41876: PPUSH
41877: LD_VAR 0 2
41881: PUSH
41882: LD_INT 4
41884: ARRAY
41885: PPUSH
41886: CALL_OW 449
41890: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41891: LD_ADDR_VAR 0 3
41895: PUSH
41896: LD_VAR 0 5
41900: PPUSH
41901: LD_INT 1
41903: PPUSH
41904: CALL_OW 275
41908: PUSH
41909: LD_VAR 0 4
41913: PUSH
41914: LD_INT 1
41916: ARRAY
41917: GREATEREQUAL
41918: PUSH
41919: LD_VAR 0 5
41923: PPUSH
41924: LD_INT 2
41926: PPUSH
41927: CALL_OW 275
41931: PUSH
41932: LD_VAR 0 4
41936: PUSH
41937: LD_INT 2
41939: ARRAY
41940: GREATEREQUAL
41941: AND
41942: PUSH
41943: LD_VAR 0 5
41947: PPUSH
41948: LD_INT 3
41950: PPUSH
41951: CALL_OW 275
41955: PUSH
41956: LD_VAR 0 4
41960: PUSH
41961: LD_INT 3
41963: ARRAY
41964: GREATEREQUAL
41965: AND
41966: ST_TO_ADDR
// end ;
41967: LD_VAR 0 3
41971: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
41972: LD_INT 0
41974: PPUSH
41975: PPUSH
41976: PPUSH
41977: PPUSH
// pom := GetBase ( building ) ;
41978: LD_ADDR_VAR 0 3
41982: PUSH
41983: LD_VAR 0 1
41987: PPUSH
41988: CALL_OW 274
41992: ST_TO_ADDR
// if not pom then
41993: LD_VAR 0 3
41997: NOT
41998: IFFALSE 42002
// exit ;
42000: GO 42172
// btype := GetBType ( building ) ;
42002: LD_ADDR_VAR 0 5
42006: PUSH
42007: LD_VAR 0 1
42011: PPUSH
42012: CALL_OW 266
42016: ST_TO_ADDR
// if btype = b_armoury then
42017: LD_VAR 0 5
42021: PUSH
42022: LD_INT 4
42024: EQUAL
42025: IFFALSE 42035
// btype := b_barracks ;
42027: LD_ADDR_VAR 0 5
42031: PUSH
42032: LD_INT 5
42034: ST_TO_ADDR
// if btype = b_depot then
42035: LD_VAR 0 5
42039: PUSH
42040: LD_INT 0
42042: EQUAL
42043: IFFALSE 42053
// btype := b_warehouse ;
42045: LD_ADDR_VAR 0 5
42049: PUSH
42050: LD_INT 1
42052: ST_TO_ADDR
// if btype = b_workshop then
42053: LD_VAR 0 5
42057: PUSH
42058: LD_INT 2
42060: EQUAL
42061: IFFALSE 42071
// btype := b_factory ;
42063: LD_ADDR_VAR 0 5
42067: PUSH
42068: LD_INT 3
42070: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
42071: LD_ADDR_VAR 0 4
42075: PUSH
42076: LD_VAR 0 5
42080: PPUSH
42081: LD_VAR 0 1
42085: PPUSH
42086: CALL_OW 248
42090: PPUSH
42091: CALL_OW 450
42095: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
42096: LD_ADDR_VAR 0 2
42100: PUSH
42101: LD_VAR 0 3
42105: PPUSH
42106: LD_INT 1
42108: PPUSH
42109: CALL_OW 275
42113: PUSH
42114: LD_VAR 0 4
42118: PUSH
42119: LD_INT 1
42121: ARRAY
42122: GREATEREQUAL
42123: PUSH
42124: LD_VAR 0 3
42128: PPUSH
42129: LD_INT 2
42131: PPUSH
42132: CALL_OW 275
42136: PUSH
42137: LD_VAR 0 4
42141: PUSH
42142: LD_INT 2
42144: ARRAY
42145: GREATEREQUAL
42146: AND
42147: PUSH
42148: LD_VAR 0 3
42152: PPUSH
42153: LD_INT 3
42155: PPUSH
42156: CALL_OW 275
42160: PUSH
42161: LD_VAR 0 4
42165: PUSH
42166: LD_INT 3
42168: ARRAY
42169: GREATEREQUAL
42170: AND
42171: ST_TO_ADDR
// end ;
42172: LD_VAR 0 2
42176: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
42177: LD_INT 0
42179: PPUSH
42180: PPUSH
42181: PPUSH
// pom := GetBase ( building ) ;
42182: LD_ADDR_VAR 0 4
42186: PUSH
42187: LD_VAR 0 1
42191: PPUSH
42192: CALL_OW 274
42196: ST_TO_ADDR
// if not pom then
42197: LD_VAR 0 4
42201: NOT
42202: IFFALSE 42206
// exit ;
42204: GO 42307
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
42206: LD_ADDR_VAR 0 5
42210: PUSH
42211: LD_VAR 0 2
42215: PPUSH
42216: LD_VAR 0 1
42220: PPUSH
42221: CALL_OW 248
42225: PPUSH
42226: CALL_OW 450
42230: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
42231: LD_ADDR_VAR 0 3
42235: PUSH
42236: LD_VAR 0 4
42240: PPUSH
42241: LD_INT 1
42243: PPUSH
42244: CALL_OW 275
42248: PUSH
42249: LD_VAR 0 5
42253: PUSH
42254: LD_INT 1
42256: ARRAY
42257: GREATEREQUAL
42258: PUSH
42259: LD_VAR 0 4
42263: PPUSH
42264: LD_INT 2
42266: PPUSH
42267: CALL_OW 275
42271: PUSH
42272: LD_VAR 0 5
42276: PUSH
42277: LD_INT 2
42279: ARRAY
42280: GREATEREQUAL
42281: AND
42282: PUSH
42283: LD_VAR 0 4
42287: PPUSH
42288: LD_INT 3
42290: PPUSH
42291: CALL_OW 275
42295: PUSH
42296: LD_VAR 0 5
42300: PUSH
42301: LD_INT 3
42303: ARRAY
42304: GREATEREQUAL
42305: AND
42306: ST_TO_ADDR
// end ;
42307: LD_VAR 0 3
42311: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
42312: LD_INT 0
42314: PPUSH
42315: PPUSH
42316: PPUSH
42317: PPUSH
42318: PPUSH
42319: PPUSH
42320: PPUSH
42321: PPUSH
42322: PPUSH
42323: PPUSH
42324: PPUSH
// result := false ;
42325: LD_ADDR_VAR 0 8
42329: PUSH
42330: LD_INT 0
42332: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
42333: LD_VAR 0 5
42337: NOT
42338: PUSH
42339: LD_VAR 0 1
42343: NOT
42344: OR
42345: PUSH
42346: LD_VAR 0 2
42350: NOT
42351: OR
42352: PUSH
42353: LD_VAR 0 3
42357: NOT
42358: OR
42359: IFFALSE 42363
// exit ;
42361: GO 43177
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
42363: LD_ADDR_VAR 0 14
42367: PUSH
42368: LD_VAR 0 1
42372: PPUSH
42373: LD_VAR 0 2
42377: PPUSH
42378: LD_VAR 0 3
42382: PPUSH
42383: LD_VAR 0 4
42387: PPUSH
42388: LD_VAR 0 5
42392: PUSH
42393: LD_INT 1
42395: ARRAY
42396: PPUSH
42397: CALL_OW 248
42401: PPUSH
42402: LD_INT 0
42404: PPUSH
42405: CALL 44430 0 6
42409: ST_TO_ADDR
// if not hexes then
42410: LD_VAR 0 14
42414: NOT
42415: IFFALSE 42419
// exit ;
42417: GO 43177
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
42419: LD_ADDR_VAR 0 17
42423: PUSH
42424: LD_VAR 0 5
42428: PPUSH
42429: LD_INT 22
42431: PUSH
42432: LD_VAR 0 13
42436: PPUSH
42437: CALL_OW 255
42441: PUSH
42442: EMPTY
42443: LIST
42444: LIST
42445: PUSH
42446: LD_INT 2
42448: PUSH
42449: LD_INT 30
42451: PUSH
42452: LD_INT 0
42454: PUSH
42455: EMPTY
42456: LIST
42457: LIST
42458: PUSH
42459: LD_INT 30
42461: PUSH
42462: LD_INT 1
42464: PUSH
42465: EMPTY
42466: LIST
42467: LIST
42468: PUSH
42469: EMPTY
42470: LIST
42471: LIST
42472: LIST
42473: PUSH
42474: EMPTY
42475: LIST
42476: LIST
42477: PPUSH
42478: CALL_OW 72
42482: ST_TO_ADDR
// for i = 1 to hexes do
42483: LD_ADDR_VAR 0 9
42487: PUSH
42488: DOUBLE
42489: LD_INT 1
42491: DEC
42492: ST_TO_ADDR
42493: LD_VAR 0 14
42497: PUSH
42498: FOR_TO
42499: IFFALSE 43175
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
42501: LD_ADDR_VAR 0 13
42505: PUSH
42506: LD_VAR 0 14
42510: PUSH
42511: LD_VAR 0 9
42515: ARRAY
42516: PUSH
42517: LD_INT 1
42519: ARRAY
42520: PPUSH
42521: LD_VAR 0 14
42525: PUSH
42526: LD_VAR 0 9
42530: ARRAY
42531: PUSH
42532: LD_INT 2
42534: ARRAY
42535: PPUSH
42536: CALL_OW 428
42540: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
42541: LD_VAR 0 14
42545: PUSH
42546: LD_VAR 0 9
42550: ARRAY
42551: PUSH
42552: LD_INT 1
42554: ARRAY
42555: PPUSH
42556: LD_VAR 0 14
42560: PUSH
42561: LD_VAR 0 9
42565: ARRAY
42566: PUSH
42567: LD_INT 2
42569: ARRAY
42570: PPUSH
42571: CALL_OW 351
42575: PUSH
42576: LD_VAR 0 14
42580: PUSH
42581: LD_VAR 0 9
42585: ARRAY
42586: PUSH
42587: LD_INT 1
42589: ARRAY
42590: PPUSH
42591: LD_VAR 0 14
42595: PUSH
42596: LD_VAR 0 9
42600: ARRAY
42601: PUSH
42602: LD_INT 2
42604: ARRAY
42605: PPUSH
42606: CALL_OW 488
42610: NOT
42611: OR
42612: PUSH
42613: LD_VAR 0 13
42617: PPUSH
42618: CALL_OW 247
42622: PUSH
42623: LD_INT 3
42625: EQUAL
42626: OR
42627: IFFALSE 42633
// exit ;
42629: POP
42630: POP
42631: GO 43177
// if not tmp then
42633: LD_VAR 0 13
42637: NOT
42638: IFFALSE 42642
// continue ;
42640: GO 42498
// result := true ;
42642: LD_ADDR_VAR 0 8
42646: PUSH
42647: LD_INT 1
42649: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
42650: LD_VAR 0 6
42654: PUSH
42655: LD_VAR 0 13
42659: PPUSH
42660: CALL_OW 247
42664: PUSH
42665: LD_INT 2
42667: EQUAL
42668: AND
42669: PUSH
42670: LD_VAR 0 13
42674: PPUSH
42675: CALL_OW 263
42679: PUSH
42680: LD_INT 1
42682: EQUAL
42683: AND
42684: IFFALSE 42848
// begin if IsDrivenBy ( tmp ) then
42686: LD_VAR 0 13
42690: PPUSH
42691: CALL_OW 311
42695: IFFALSE 42699
// continue ;
42697: GO 42498
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
42699: LD_VAR 0 6
42703: PPUSH
42704: LD_INT 3
42706: PUSH
42707: LD_INT 60
42709: PUSH
42710: EMPTY
42711: LIST
42712: PUSH
42713: EMPTY
42714: LIST
42715: LIST
42716: PUSH
42717: LD_INT 3
42719: PUSH
42720: LD_INT 55
42722: PUSH
42723: EMPTY
42724: LIST
42725: PUSH
42726: EMPTY
42727: LIST
42728: LIST
42729: PUSH
42730: EMPTY
42731: LIST
42732: LIST
42733: PPUSH
42734: CALL_OW 72
42738: IFFALSE 42846
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
42740: LD_ADDR_VAR 0 18
42744: PUSH
42745: LD_VAR 0 6
42749: PPUSH
42750: LD_INT 3
42752: PUSH
42753: LD_INT 60
42755: PUSH
42756: EMPTY
42757: LIST
42758: PUSH
42759: EMPTY
42760: LIST
42761: LIST
42762: PUSH
42763: LD_INT 3
42765: PUSH
42766: LD_INT 55
42768: PUSH
42769: EMPTY
42770: LIST
42771: PUSH
42772: EMPTY
42773: LIST
42774: LIST
42775: PUSH
42776: EMPTY
42777: LIST
42778: LIST
42779: PPUSH
42780: CALL_OW 72
42784: PUSH
42785: LD_INT 1
42787: ARRAY
42788: ST_TO_ADDR
// if IsInUnit ( driver ) then
42789: LD_VAR 0 18
42793: PPUSH
42794: CALL_OW 310
42798: IFFALSE 42809
// ComExit ( driver ) ;
42800: LD_VAR 0 18
42804: PPUSH
42805: CALL 68231 0 1
// AddComEnterUnit ( driver , tmp ) ;
42809: LD_VAR 0 18
42813: PPUSH
42814: LD_VAR 0 13
42818: PPUSH
42819: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
42823: LD_VAR 0 18
42827: PPUSH
42828: LD_VAR 0 7
42832: PPUSH
42833: CALL_OW 173
// AddComExitVehicle ( driver ) ;
42837: LD_VAR 0 18
42841: PPUSH
42842: CALL_OW 181
// end ; continue ;
42846: GO 42498
// end ; if not cleaners or not tmp in cleaners then
42848: LD_VAR 0 6
42852: NOT
42853: PUSH
42854: LD_VAR 0 13
42858: PUSH
42859: LD_VAR 0 6
42863: IN
42864: NOT
42865: OR
42866: IFFALSE 43173
// begin if dep then
42868: LD_VAR 0 17
42872: IFFALSE 43008
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
42874: LD_ADDR_VAR 0 16
42878: PUSH
42879: LD_VAR 0 17
42883: PUSH
42884: LD_INT 1
42886: ARRAY
42887: PPUSH
42888: CALL_OW 250
42892: PPUSH
42893: LD_VAR 0 17
42897: PUSH
42898: LD_INT 1
42900: ARRAY
42901: PPUSH
42902: CALL_OW 254
42906: PPUSH
42907: LD_INT 5
42909: PPUSH
42910: CALL_OW 272
42914: PUSH
42915: LD_VAR 0 17
42919: PUSH
42920: LD_INT 1
42922: ARRAY
42923: PPUSH
42924: CALL_OW 251
42928: PPUSH
42929: LD_VAR 0 17
42933: PUSH
42934: LD_INT 1
42936: ARRAY
42937: PPUSH
42938: CALL_OW 254
42942: PPUSH
42943: LD_INT 5
42945: PPUSH
42946: CALL_OW 273
42950: PUSH
42951: EMPTY
42952: LIST
42953: LIST
42954: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
42955: LD_VAR 0 16
42959: PUSH
42960: LD_INT 1
42962: ARRAY
42963: PPUSH
42964: LD_VAR 0 16
42968: PUSH
42969: LD_INT 2
42971: ARRAY
42972: PPUSH
42973: CALL_OW 488
42977: IFFALSE 43008
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
42979: LD_VAR 0 13
42983: PPUSH
42984: LD_VAR 0 16
42988: PUSH
42989: LD_INT 1
42991: ARRAY
42992: PPUSH
42993: LD_VAR 0 16
42997: PUSH
42998: LD_INT 2
43000: ARRAY
43001: PPUSH
43002: CALL_OW 111
// continue ;
43006: GO 42498
// end ; end ; r := GetDir ( tmp ) ;
43008: LD_ADDR_VAR 0 15
43012: PUSH
43013: LD_VAR 0 13
43017: PPUSH
43018: CALL_OW 254
43022: ST_TO_ADDR
// if r = 5 then
43023: LD_VAR 0 15
43027: PUSH
43028: LD_INT 5
43030: EQUAL
43031: IFFALSE 43041
// r := 0 ;
43033: LD_ADDR_VAR 0 15
43037: PUSH
43038: LD_INT 0
43040: ST_TO_ADDR
// for j = r to 5 do
43041: LD_ADDR_VAR 0 10
43045: PUSH
43046: DOUBLE
43047: LD_VAR 0 15
43051: DEC
43052: ST_TO_ADDR
43053: LD_INT 5
43055: PUSH
43056: FOR_TO
43057: IFFALSE 43171
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
43059: LD_ADDR_VAR 0 11
43063: PUSH
43064: LD_VAR 0 13
43068: PPUSH
43069: CALL_OW 250
43073: PPUSH
43074: LD_VAR 0 10
43078: PPUSH
43079: LD_INT 2
43081: PPUSH
43082: CALL_OW 272
43086: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
43087: LD_ADDR_VAR 0 12
43091: PUSH
43092: LD_VAR 0 13
43096: PPUSH
43097: CALL_OW 251
43101: PPUSH
43102: LD_VAR 0 10
43106: PPUSH
43107: LD_INT 2
43109: PPUSH
43110: CALL_OW 273
43114: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
43115: LD_VAR 0 11
43119: PPUSH
43120: LD_VAR 0 12
43124: PPUSH
43125: CALL_OW 488
43129: PUSH
43130: LD_VAR 0 11
43134: PPUSH
43135: LD_VAR 0 12
43139: PPUSH
43140: CALL_OW 428
43144: NOT
43145: AND
43146: IFFALSE 43169
// begin ComMoveXY ( tmp , _x , _y ) ;
43148: LD_VAR 0 13
43152: PPUSH
43153: LD_VAR 0 11
43157: PPUSH
43158: LD_VAR 0 12
43162: PPUSH
43163: CALL_OW 111
// break ;
43167: GO 43171
// end ; end ;
43169: GO 43056
43171: POP
43172: POP
// end ; end ;
43173: GO 42498
43175: POP
43176: POP
// end ;
43177: LD_VAR 0 8
43181: RET
// export function BuildingTechInvented ( side , btype ) ; begin
43182: LD_INT 0
43184: PPUSH
// result := true ;
43185: LD_ADDR_VAR 0 3
43189: PUSH
43190: LD_INT 1
43192: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
43193: LD_VAR 0 2
43197: PUSH
43198: LD_INT 24
43200: DOUBLE
43201: EQUAL
43202: IFTRUE 43212
43204: LD_INT 33
43206: DOUBLE
43207: EQUAL
43208: IFTRUE 43212
43210: GO 43237
43212: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
43213: LD_ADDR_VAR 0 3
43217: PUSH
43218: LD_INT 32
43220: PPUSH
43221: LD_VAR 0 1
43225: PPUSH
43226: CALL_OW 321
43230: PUSH
43231: LD_INT 2
43233: EQUAL
43234: ST_TO_ADDR
43235: GO 43553
43237: LD_INT 20
43239: DOUBLE
43240: EQUAL
43241: IFTRUE 43245
43243: GO 43270
43245: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
43246: LD_ADDR_VAR 0 3
43250: PUSH
43251: LD_INT 6
43253: PPUSH
43254: LD_VAR 0 1
43258: PPUSH
43259: CALL_OW 321
43263: PUSH
43264: LD_INT 2
43266: EQUAL
43267: ST_TO_ADDR
43268: GO 43553
43270: LD_INT 22
43272: DOUBLE
43273: EQUAL
43274: IFTRUE 43284
43276: LD_INT 36
43278: DOUBLE
43279: EQUAL
43280: IFTRUE 43284
43282: GO 43309
43284: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
43285: LD_ADDR_VAR 0 3
43289: PUSH
43290: LD_INT 15
43292: PPUSH
43293: LD_VAR 0 1
43297: PPUSH
43298: CALL_OW 321
43302: PUSH
43303: LD_INT 2
43305: EQUAL
43306: ST_TO_ADDR
43307: GO 43553
43309: LD_INT 30
43311: DOUBLE
43312: EQUAL
43313: IFTRUE 43317
43315: GO 43342
43317: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
43318: LD_ADDR_VAR 0 3
43322: PUSH
43323: LD_INT 20
43325: PPUSH
43326: LD_VAR 0 1
43330: PPUSH
43331: CALL_OW 321
43335: PUSH
43336: LD_INT 2
43338: EQUAL
43339: ST_TO_ADDR
43340: GO 43553
43342: LD_INT 28
43344: DOUBLE
43345: EQUAL
43346: IFTRUE 43356
43348: LD_INT 21
43350: DOUBLE
43351: EQUAL
43352: IFTRUE 43356
43354: GO 43381
43356: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
43357: LD_ADDR_VAR 0 3
43361: PUSH
43362: LD_INT 21
43364: PPUSH
43365: LD_VAR 0 1
43369: PPUSH
43370: CALL_OW 321
43374: PUSH
43375: LD_INT 2
43377: EQUAL
43378: ST_TO_ADDR
43379: GO 43553
43381: LD_INT 16
43383: DOUBLE
43384: EQUAL
43385: IFTRUE 43389
43387: GO 43414
43389: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
43390: LD_ADDR_VAR 0 3
43394: PUSH
43395: LD_INT 84
43397: PPUSH
43398: LD_VAR 0 1
43402: PPUSH
43403: CALL_OW 321
43407: PUSH
43408: LD_INT 2
43410: EQUAL
43411: ST_TO_ADDR
43412: GO 43553
43414: LD_INT 19
43416: DOUBLE
43417: EQUAL
43418: IFTRUE 43428
43420: LD_INT 23
43422: DOUBLE
43423: EQUAL
43424: IFTRUE 43428
43426: GO 43453
43428: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
43429: LD_ADDR_VAR 0 3
43433: PUSH
43434: LD_INT 83
43436: PPUSH
43437: LD_VAR 0 1
43441: PPUSH
43442: CALL_OW 321
43446: PUSH
43447: LD_INT 2
43449: EQUAL
43450: ST_TO_ADDR
43451: GO 43553
43453: LD_INT 17
43455: DOUBLE
43456: EQUAL
43457: IFTRUE 43461
43459: GO 43486
43461: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
43462: LD_ADDR_VAR 0 3
43466: PUSH
43467: LD_INT 39
43469: PPUSH
43470: LD_VAR 0 1
43474: PPUSH
43475: CALL_OW 321
43479: PUSH
43480: LD_INT 2
43482: EQUAL
43483: ST_TO_ADDR
43484: GO 43553
43486: LD_INT 18
43488: DOUBLE
43489: EQUAL
43490: IFTRUE 43494
43492: GO 43519
43494: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
43495: LD_ADDR_VAR 0 3
43499: PUSH
43500: LD_INT 40
43502: PPUSH
43503: LD_VAR 0 1
43507: PPUSH
43508: CALL_OW 321
43512: PUSH
43513: LD_INT 2
43515: EQUAL
43516: ST_TO_ADDR
43517: GO 43553
43519: LD_INT 27
43521: DOUBLE
43522: EQUAL
43523: IFTRUE 43527
43525: GO 43552
43527: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
43528: LD_ADDR_VAR 0 3
43532: PUSH
43533: LD_INT 35
43535: PPUSH
43536: LD_VAR 0 1
43540: PPUSH
43541: CALL_OW 321
43545: PUSH
43546: LD_INT 2
43548: EQUAL
43549: ST_TO_ADDR
43550: GO 43553
43552: POP
// end ;
43553: LD_VAR 0 3
43557: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
43558: LD_INT 0
43560: PPUSH
43561: PPUSH
43562: PPUSH
43563: PPUSH
43564: PPUSH
43565: PPUSH
43566: PPUSH
43567: PPUSH
43568: PPUSH
43569: PPUSH
43570: PPUSH
// result := false ;
43571: LD_ADDR_VAR 0 6
43575: PUSH
43576: LD_INT 0
43578: ST_TO_ADDR
// if btype = b_depot then
43579: LD_VAR 0 2
43583: PUSH
43584: LD_INT 0
43586: EQUAL
43587: IFFALSE 43599
// begin result := true ;
43589: LD_ADDR_VAR 0 6
43593: PUSH
43594: LD_INT 1
43596: ST_TO_ADDR
// exit ;
43597: GO 44425
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
43599: LD_VAR 0 1
43603: NOT
43604: PUSH
43605: LD_VAR 0 1
43609: PPUSH
43610: CALL_OW 266
43614: PUSH
43615: LD_INT 0
43617: PUSH
43618: LD_INT 1
43620: PUSH
43621: EMPTY
43622: LIST
43623: LIST
43624: IN
43625: NOT
43626: OR
43627: PUSH
43628: LD_VAR 0 2
43632: NOT
43633: OR
43634: PUSH
43635: LD_VAR 0 5
43639: PUSH
43640: LD_INT 0
43642: PUSH
43643: LD_INT 1
43645: PUSH
43646: LD_INT 2
43648: PUSH
43649: LD_INT 3
43651: PUSH
43652: LD_INT 4
43654: PUSH
43655: LD_INT 5
43657: PUSH
43658: EMPTY
43659: LIST
43660: LIST
43661: LIST
43662: LIST
43663: LIST
43664: LIST
43665: IN
43666: NOT
43667: OR
43668: PUSH
43669: LD_VAR 0 3
43673: PPUSH
43674: LD_VAR 0 4
43678: PPUSH
43679: CALL_OW 488
43683: NOT
43684: OR
43685: IFFALSE 43689
// exit ;
43687: GO 44425
// side := GetSide ( depot ) ;
43689: LD_ADDR_VAR 0 9
43693: PUSH
43694: LD_VAR 0 1
43698: PPUSH
43699: CALL_OW 255
43703: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
43704: LD_VAR 0 9
43708: PPUSH
43709: LD_VAR 0 2
43713: PPUSH
43714: CALL 43182 0 2
43718: NOT
43719: IFFALSE 43723
// exit ;
43721: GO 44425
// pom := GetBase ( depot ) ;
43723: LD_ADDR_VAR 0 10
43727: PUSH
43728: LD_VAR 0 1
43732: PPUSH
43733: CALL_OW 274
43737: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
43738: LD_ADDR_VAR 0 11
43742: PUSH
43743: LD_VAR 0 2
43747: PPUSH
43748: LD_VAR 0 1
43752: PPUSH
43753: CALL_OW 248
43757: PPUSH
43758: CALL_OW 450
43762: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
43763: LD_VAR 0 10
43767: PPUSH
43768: LD_INT 1
43770: PPUSH
43771: CALL_OW 275
43775: PUSH
43776: LD_VAR 0 11
43780: PUSH
43781: LD_INT 1
43783: ARRAY
43784: GREATEREQUAL
43785: PUSH
43786: LD_VAR 0 10
43790: PPUSH
43791: LD_INT 2
43793: PPUSH
43794: CALL_OW 275
43798: PUSH
43799: LD_VAR 0 11
43803: PUSH
43804: LD_INT 2
43806: ARRAY
43807: GREATEREQUAL
43808: AND
43809: PUSH
43810: LD_VAR 0 10
43814: PPUSH
43815: LD_INT 3
43817: PPUSH
43818: CALL_OW 275
43822: PUSH
43823: LD_VAR 0 11
43827: PUSH
43828: LD_INT 3
43830: ARRAY
43831: GREATEREQUAL
43832: AND
43833: NOT
43834: IFFALSE 43838
// exit ;
43836: GO 44425
// if GetBType ( depot ) = b_depot then
43838: LD_VAR 0 1
43842: PPUSH
43843: CALL_OW 266
43847: PUSH
43848: LD_INT 0
43850: EQUAL
43851: IFFALSE 43863
// dist := 28 else
43853: LD_ADDR_VAR 0 14
43857: PUSH
43858: LD_INT 28
43860: ST_TO_ADDR
43861: GO 43871
// dist := 36 ;
43863: LD_ADDR_VAR 0 14
43867: PUSH
43868: LD_INT 36
43870: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
43871: LD_VAR 0 1
43875: PPUSH
43876: LD_VAR 0 3
43880: PPUSH
43881: LD_VAR 0 4
43885: PPUSH
43886: CALL_OW 297
43890: PUSH
43891: LD_VAR 0 14
43895: GREATER
43896: IFFALSE 43900
// exit ;
43898: GO 44425
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
43900: LD_ADDR_VAR 0 12
43904: PUSH
43905: LD_VAR 0 2
43909: PPUSH
43910: LD_VAR 0 3
43914: PPUSH
43915: LD_VAR 0 4
43919: PPUSH
43920: LD_VAR 0 5
43924: PPUSH
43925: LD_VAR 0 1
43929: PPUSH
43930: CALL_OW 248
43934: PPUSH
43935: LD_INT 0
43937: PPUSH
43938: CALL 44430 0 6
43942: ST_TO_ADDR
// if not hexes then
43943: LD_VAR 0 12
43947: NOT
43948: IFFALSE 43952
// exit ;
43950: GO 44425
// hex := GetHexInfo ( x , y ) ;
43952: LD_ADDR_VAR 0 15
43956: PUSH
43957: LD_VAR 0 3
43961: PPUSH
43962: LD_VAR 0 4
43966: PPUSH
43967: CALL_OW 546
43971: ST_TO_ADDR
// if hex [ 1 ] then
43972: LD_VAR 0 15
43976: PUSH
43977: LD_INT 1
43979: ARRAY
43980: IFFALSE 43984
// exit ;
43982: GO 44425
// height := hex [ 2 ] ;
43984: LD_ADDR_VAR 0 13
43988: PUSH
43989: LD_VAR 0 15
43993: PUSH
43994: LD_INT 2
43996: ARRAY
43997: ST_TO_ADDR
// for i = 1 to hexes do
43998: LD_ADDR_VAR 0 7
44002: PUSH
44003: DOUBLE
44004: LD_INT 1
44006: DEC
44007: ST_TO_ADDR
44008: LD_VAR 0 12
44012: PUSH
44013: FOR_TO
44014: IFFALSE 44344
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
44016: LD_VAR 0 12
44020: PUSH
44021: LD_VAR 0 7
44025: ARRAY
44026: PUSH
44027: LD_INT 1
44029: ARRAY
44030: PPUSH
44031: LD_VAR 0 12
44035: PUSH
44036: LD_VAR 0 7
44040: ARRAY
44041: PUSH
44042: LD_INT 2
44044: ARRAY
44045: PPUSH
44046: CALL_OW 488
44050: NOT
44051: PUSH
44052: LD_VAR 0 12
44056: PUSH
44057: LD_VAR 0 7
44061: ARRAY
44062: PUSH
44063: LD_INT 1
44065: ARRAY
44066: PPUSH
44067: LD_VAR 0 12
44071: PUSH
44072: LD_VAR 0 7
44076: ARRAY
44077: PUSH
44078: LD_INT 2
44080: ARRAY
44081: PPUSH
44082: CALL_OW 428
44086: PUSH
44087: LD_INT 0
44089: GREATER
44090: OR
44091: PUSH
44092: LD_VAR 0 12
44096: PUSH
44097: LD_VAR 0 7
44101: ARRAY
44102: PUSH
44103: LD_INT 1
44105: ARRAY
44106: PPUSH
44107: LD_VAR 0 12
44111: PUSH
44112: LD_VAR 0 7
44116: ARRAY
44117: PUSH
44118: LD_INT 2
44120: ARRAY
44121: PPUSH
44122: CALL_OW 351
44126: OR
44127: IFFALSE 44133
// exit ;
44129: POP
44130: POP
44131: GO 44425
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
44133: LD_ADDR_VAR 0 8
44137: PUSH
44138: LD_VAR 0 12
44142: PUSH
44143: LD_VAR 0 7
44147: ARRAY
44148: PUSH
44149: LD_INT 1
44151: ARRAY
44152: PPUSH
44153: LD_VAR 0 12
44157: PUSH
44158: LD_VAR 0 7
44162: ARRAY
44163: PUSH
44164: LD_INT 2
44166: ARRAY
44167: PPUSH
44168: CALL_OW 546
44172: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
44173: LD_VAR 0 8
44177: PUSH
44178: LD_INT 1
44180: ARRAY
44181: PUSH
44182: LD_VAR 0 8
44186: PUSH
44187: LD_INT 2
44189: ARRAY
44190: PUSH
44191: LD_VAR 0 13
44195: PUSH
44196: LD_INT 2
44198: PLUS
44199: GREATER
44200: OR
44201: PUSH
44202: LD_VAR 0 8
44206: PUSH
44207: LD_INT 2
44209: ARRAY
44210: PUSH
44211: LD_VAR 0 13
44215: PUSH
44216: LD_INT 2
44218: MINUS
44219: LESS
44220: OR
44221: PUSH
44222: LD_VAR 0 8
44226: PUSH
44227: LD_INT 3
44229: ARRAY
44230: PUSH
44231: LD_INT 0
44233: PUSH
44234: LD_INT 8
44236: PUSH
44237: LD_INT 9
44239: PUSH
44240: LD_INT 10
44242: PUSH
44243: LD_INT 11
44245: PUSH
44246: LD_INT 12
44248: PUSH
44249: LD_INT 13
44251: PUSH
44252: LD_INT 16
44254: PUSH
44255: LD_INT 17
44257: PUSH
44258: LD_INT 18
44260: PUSH
44261: LD_INT 19
44263: PUSH
44264: LD_INT 20
44266: PUSH
44267: LD_INT 21
44269: PUSH
44270: EMPTY
44271: LIST
44272: LIST
44273: LIST
44274: LIST
44275: LIST
44276: LIST
44277: LIST
44278: LIST
44279: LIST
44280: LIST
44281: LIST
44282: LIST
44283: LIST
44284: IN
44285: NOT
44286: OR
44287: PUSH
44288: LD_VAR 0 8
44292: PUSH
44293: LD_INT 5
44295: ARRAY
44296: NOT
44297: OR
44298: PUSH
44299: LD_VAR 0 8
44303: PUSH
44304: LD_INT 6
44306: ARRAY
44307: PUSH
44308: LD_INT 1
44310: PUSH
44311: LD_INT 2
44313: PUSH
44314: LD_INT 7
44316: PUSH
44317: LD_INT 9
44319: PUSH
44320: LD_INT 10
44322: PUSH
44323: LD_INT 11
44325: PUSH
44326: EMPTY
44327: LIST
44328: LIST
44329: LIST
44330: LIST
44331: LIST
44332: LIST
44333: IN
44334: NOT
44335: OR
44336: IFFALSE 44342
// exit ;
44338: POP
44339: POP
44340: GO 44425
// end ;
44342: GO 44013
44344: POP
44345: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
44346: LD_VAR 0 9
44350: PPUSH
44351: LD_VAR 0 3
44355: PPUSH
44356: LD_VAR 0 4
44360: PPUSH
44361: LD_INT 20
44363: PPUSH
44364: CALL 36348 0 4
44368: PUSH
44369: LD_INT 4
44371: ARRAY
44372: IFFALSE 44376
// exit ;
44374: GO 44425
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
44376: LD_VAR 0 2
44380: PUSH
44381: LD_INT 29
44383: PUSH
44384: LD_INT 30
44386: PUSH
44387: EMPTY
44388: LIST
44389: LIST
44390: IN
44391: PUSH
44392: LD_VAR 0 3
44396: PPUSH
44397: LD_VAR 0 4
44401: PPUSH
44402: LD_VAR 0 9
44406: PPUSH
44407: CALL_OW 440
44411: NOT
44412: AND
44413: IFFALSE 44417
// exit ;
44415: GO 44425
// result := true ;
44417: LD_ADDR_VAR 0 6
44421: PUSH
44422: LD_INT 1
44424: ST_TO_ADDR
// end ;
44425: LD_VAR 0 6
44429: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
44430: LD_INT 0
44432: PPUSH
44433: PPUSH
44434: PPUSH
44435: PPUSH
44436: PPUSH
44437: PPUSH
44438: PPUSH
44439: PPUSH
44440: PPUSH
44441: PPUSH
44442: PPUSH
44443: PPUSH
44444: PPUSH
44445: PPUSH
44446: PPUSH
44447: PPUSH
44448: PPUSH
44449: PPUSH
44450: PPUSH
44451: PPUSH
44452: PPUSH
44453: PPUSH
44454: PPUSH
44455: PPUSH
44456: PPUSH
44457: PPUSH
44458: PPUSH
44459: PPUSH
44460: PPUSH
44461: PPUSH
44462: PPUSH
44463: PPUSH
44464: PPUSH
44465: PPUSH
44466: PPUSH
44467: PPUSH
44468: PPUSH
44469: PPUSH
44470: PPUSH
44471: PPUSH
44472: PPUSH
44473: PPUSH
44474: PPUSH
44475: PPUSH
44476: PPUSH
44477: PPUSH
44478: PPUSH
44479: PPUSH
44480: PPUSH
44481: PPUSH
44482: PPUSH
44483: PPUSH
44484: PPUSH
44485: PPUSH
44486: PPUSH
44487: PPUSH
44488: PPUSH
44489: PPUSH
// result = [ ] ;
44490: LD_ADDR_VAR 0 7
44494: PUSH
44495: EMPTY
44496: ST_TO_ADDR
// temp_list = [ ] ;
44497: LD_ADDR_VAR 0 9
44501: PUSH
44502: EMPTY
44503: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
44504: LD_VAR 0 4
44508: PUSH
44509: LD_INT 0
44511: PUSH
44512: LD_INT 1
44514: PUSH
44515: LD_INT 2
44517: PUSH
44518: LD_INT 3
44520: PUSH
44521: LD_INT 4
44523: PUSH
44524: LD_INT 5
44526: PUSH
44527: EMPTY
44528: LIST
44529: LIST
44530: LIST
44531: LIST
44532: LIST
44533: LIST
44534: IN
44535: NOT
44536: PUSH
44537: LD_VAR 0 1
44541: PUSH
44542: LD_INT 0
44544: PUSH
44545: LD_INT 1
44547: PUSH
44548: EMPTY
44549: LIST
44550: LIST
44551: IN
44552: PUSH
44553: LD_VAR 0 5
44557: PUSH
44558: LD_INT 1
44560: PUSH
44561: LD_INT 2
44563: PUSH
44564: LD_INT 3
44566: PUSH
44567: EMPTY
44568: LIST
44569: LIST
44570: LIST
44571: IN
44572: NOT
44573: AND
44574: OR
44575: IFFALSE 44579
// exit ;
44577: GO 62970
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
44579: LD_VAR 0 1
44583: PUSH
44584: LD_INT 6
44586: PUSH
44587: LD_INT 7
44589: PUSH
44590: LD_INT 8
44592: PUSH
44593: LD_INT 13
44595: PUSH
44596: LD_INT 12
44598: PUSH
44599: LD_INT 15
44601: PUSH
44602: LD_INT 11
44604: PUSH
44605: LD_INT 14
44607: PUSH
44608: LD_INT 10
44610: PUSH
44611: EMPTY
44612: LIST
44613: LIST
44614: LIST
44615: LIST
44616: LIST
44617: LIST
44618: LIST
44619: LIST
44620: LIST
44621: IN
44622: IFFALSE 44632
// btype = b_lab ;
44624: LD_ADDR_VAR 0 1
44628: PUSH
44629: LD_INT 6
44631: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
44632: LD_VAR 0 6
44636: PUSH
44637: LD_INT 0
44639: PUSH
44640: LD_INT 1
44642: PUSH
44643: LD_INT 2
44645: PUSH
44646: EMPTY
44647: LIST
44648: LIST
44649: LIST
44650: IN
44651: NOT
44652: PUSH
44653: LD_VAR 0 1
44657: PUSH
44658: LD_INT 0
44660: PUSH
44661: LD_INT 1
44663: PUSH
44664: LD_INT 2
44666: PUSH
44667: LD_INT 3
44669: PUSH
44670: LD_INT 6
44672: PUSH
44673: LD_INT 36
44675: PUSH
44676: LD_INT 4
44678: PUSH
44679: LD_INT 5
44681: PUSH
44682: LD_INT 31
44684: PUSH
44685: LD_INT 32
44687: PUSH
44688: LD_INT 33
44690: PUSH
44691: EMPTY
44692: LIST
44693: LIST
44694: LIST
44695: LIST
44696: LIST
44697: LIST
44698: LIST
44699: LIST
44700: LIST
44701: LIST
44702: LIST
44703: IN
44704: NOT
44705: PUSH
44706: LD_VAR 0 6
44710: PUSH
44711: LD_INT 1
44713: EQUAL
44714: AND
44715: OR
44716: PUSH
44717: LD_VAR 0 1
44721: PUSH
44722: LD_INT 2
44724: PUSH
44725: LD_INT 3
44727: PUSH
44728: EMPTY
44729: LIST
44730: LIST
44731: IN
44732: NOT
44733: PUSH
44734: LD_VAR 0 6
44738: PUSH
44739: LD_INT 2
44741: EQUAL
44742: AND
44743: OR
44744: IFFALSE 44754
// mode = 0 ;
44746: LD_ADDR_VAR 0 6
44750: PUSH
44751: LD_INT 0
44753: ST_TO_ADDR
// case mode of 0 :
44754: LD_VAR 0 6
44758: PUSH
44759: LD_INT 0
44761: DOUBLE
44762: EQUAL
44763: IFTRUE 44767
44765: GO 56220
44767: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
44768: LD_ADDR_VAR 0 11
44772: PUSH
44773: LD_INT 0
44775: PUSH
44776: LD_INT 0
44778: PUSH
44779: EMPTY
44780: LIST
44781: LIST
44782: PUSH
44783: LD_INT 0
44785: PUSH
44786: LD_INT 1
44788: NEG
44789: PUSH
44790: EMPTY
44791: LIST
44792: LIST
44793: PUSH
44794: LD_INT 1
44796: PUSH
44797: LD_INT 0
44799: PUSH
44800: EMPTY
44801: LIST
44802: LIST
44803: PUSH
44804: LD_INT 1
44806: PUSH
44807: LD_INT 1
44809: PUSH
44810: EMPTY
44811: LIST
44812: LIST
44813: PUSH
44814: LD_INT 0
44816: PUSH
44817: LD_INT 1
44819: PUSH
44820: EMPTY
44821: LIST
44822: LIST
44823: PUSH
44824: LD_INT 1
44826: NEG
44827: PUSH
44828: LD_INT 0
44830: PUSH
44831: EMPTY
44832: LIST
44833: LIST
44834: PUSH
44835: LD_INT 1
44837: NEG
44838: PUSH
44839: LD_INT 1
44841: NEG
44842: PUSH
44843: EMPTY
44844: LIST
44845: LIST
44846: PUSH
44847: LD_INT 1
44849: NEG
44850: PUSH
44851: LD_INT 2
44853: NEG
44854: PUSH
44855: EMPTY
44856: LIST
44857: LIST
44858: PUSH
44859: LD_INT 0
44861: PUSH
44862: LD_INT 2
44864: NEG
44865: PUSH
44866: EMPTY
44867: LIST
44868: LIST
44869: PUSH
44870: LD_INT 1
44872: PUSH
44873: LD_INT 1
44875: NEG
44876: PUSH
44877: EMPTY
44878: LIST
44879: LIST
44880: PUSH
44881: LD_INT 1
44883: PUSH
44884: LD_INT 2
44886: PUSH
44887: EMPTY
44888: LIST
44889: LIST
44890: PUSH
44891: LD_INT 0
44893: PUSH
44894: LD_INT 2
44896: PUSH
44897: EMPTY
44898: LIST
44899: LIST
44900: PUSH
44901: LD_INT 1
44903: NEG
44904: PUSH
44905: LD_INT 1
44907: PUSH
44908: EMPTY
44909: LIST
44910: LIST
44911: PUSH
44912: LD_INT 1
44914: PUSH
44915: LD_INT 3
44917: PUSH
44918: EMPTY
44919: LIST
44920: LIST
44921: PUSH
44922: LD_INT 0
44924: PUSH
44925: LD_INT 3
44927: PUSH
44928: EMPTY
44929: LIST
44930: LIST
44931: PUSH
44932: LD_INT 1
44934: NEG
44935: PUSH
44936: LD_INT 2
44938: PUSH
44939: EMPTY
44940: LIST
44941: LIST
44942: PUSH
44943: EMPTY
44944: LIST
44945: LIST
44946: LIST
44947: LIST
44948: LIST
44949: LIST
44950: LIST
44951: LIST
44952: LIST
44953: LIST
44954: LIST
44955: LIST
44956: LIST
44957: LIST
44958: LIST
44959: LIST
44960: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44961: LD_ADDR_VAR 0 12
44965: PUSH
44966: LD_INT 0
44968: PUSH
44969: LD_INT 0
44971: PUSH
44972: EMPTY
44973: LIST
44974: LIST
44975: PUSH
44976: LD_INT 0
44978: PUSH
44979: LD_INT 1
44981: NEG
44982: PUSH
44983: EMPTY
44984: LIST
44985: LIST
44986: PUSH
44987: LD_INT 1
44989: PUSH
44990: LD_INT 0
44992: PUSH
44993: EMPTY
44994: LIST
44995: LIST
44996: PUSH
44997: LD_INT 1
44999: PUSH
45000: LD_INT 1
45002: PUSH
45003: EMPTY
45004: LIST
45005: LIST
45006: PUSH
45007: LD_INT 0
45009: PUSH
45010: LD_INT 1
45012: PUSH
45013: EMPTY
45014: LIST
45015: LIST
45016: PUSH
45017: LD_INT 1
45019: NEG
45020: PUSH
45021: LD_INT 0
45023: PUSH
45024: EMPTY
45025: LIST
45026: LIST
45027: PUSH
45028: LD_INT 1
45030: NEG
45031: PUSH
45032: LD_INT 1
45034: NEG
45035: PUSH
45036: EMPTY
45037: LIST
45038: LIST
45039: PUSH
45040: LD_INT 1
45042: PUSH
45043: LD_INT 1
45045: NEG
45046: PUSH
45047: EMPTY
45048: LIST
45049: LIST
45050: PUSH
45051: LD_INT 2
45053: PUSH
45054: LD_INT 0
45056: PUSH
45057: EMPTY
45058: LIST
45059: LIST
45060: PUSH
45061: LD_INT 2
45063: PUSH
45064: LD_INT 1
45066: PUSH
45067: EMPTY
45068: LIST
45069: LIST
45070: PUSH
45071: LD_INT 1
45073: NEG
45074: PUSH
45075: LD_INT 1
45077: PUSH
45078: EMPTY
45079: LIST
45080: LIST
45081: PUSH
45082: LD_INT 2
45084: NEG
45085: PUSH
45086: LD_INT 0
45088: PUSH
45089: EMPTY
45090: LIST
45091: LIST
45092: PUSH
45093: LD_INT 2
45095: NEG
45096: PUSH
45097: LD_INT 1
45099: NEG
45100: PUSH
45101: EMPTY
45102: LIST
45103: LIST
45104: PUSH
45105: LD_INT 2
45107: NEG
45108: PUSH
45109: LD_INT 1
45111: PUSH
45112: EMPTY
45113: LIST
45114: LIST
45115: PUSH
45116: LD_INT 3
45118: NEG
45119: PUSH
45120: LD_INT 0
45122: PUSH
45123: EMPTY
45124: LIST
45125: LIST
45126: PUSH
45127: LD_INT 3
45129: NEG
45130: PUSH
45131: LD_INT 1
45133: NEG
45134: PUSH
45135: EMPTY
45136: LIST
45137: LIST
45138: PUSH
45139: EMPTY
45140: LIST
45141: LIST
45142: LIST
45143: LIST
45144: LIST
45145: LIST
45146: LIST
45147: LIST
45148: LIST
45149: LIST
45150: LIST
45151: LIST
45152: LIST
45153: LIST
45154: LIST
45155: LIST
45156: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45157: LD_ADDR_VAR 0 13
45161: PUSH
45162: LD_INT 0
45164: PUSH
45165: LD_INT 0
45167: PUSH
45168: EMPTY
45169: LIST
45170: LIST
45171: PUSH
45172: LD_INT 0
45174: PUSH
45175: LD_INT 1
45177: NEG
45178: PUSH
45179: EMPTY
45180: LIST
45181: LIST
45182: PUSH
45183: LD_INT 1
45185: PUSH
45186: LD_INT 0
45188: PUSH
45189: EMPTY
45190: LIST
45191: LIST
45192: PUSH
45193: LD_INT 1
45195: PUSH
45196: LD_INT 1
45198: PUSH
45199: EMPTY
45200: LIST
45201: LIST
45202: PUSH
45203: LD_INT 0
45205: PUSH
45206: LD_INT 1
45208: PUSH
45209: EMPTY
45210: LIST
45211: LIST
45212: PUSH
45213: LD_INT 1
45215: NEG
45216: PUSH
45217: LD_INT 0
45219: PUSH
45220: EMPTY
45221: LIST
45222: LIST
45223: PUSH
45224: LD_INT 1
45226: NEG
45227: PUSH
45228: LD_INT 1
45230: NEG
45231: PUSH
45232: EMPTY
45233: LIST
45234: LIST
45235: PUSH
45236: LD_INT 1
45238: NEG
45239: PUSH
45240: LD_INT 2
45242: NEG
45243: PUSH
45244: EMPTY
45245: LIST
45246: LIST
45247: PUSH
45248: LD_INT 2
45250: PUSH
45251: LD_INT 1
45253: PUSH
45254: EMPTY
45255: LIST
45256: LIST
45257: PUSH
45258: LD_INT 2
45260: PUSH
45261: LD_INT 2
45263: PUSH
45264: EMPTY
45265: LIST
45266: LIST
45267: PUSH
45268: LD_INT 1
45270: PUSH
45271: LD_INT 2
45273: PUSH
45274: EMPTY
45275: LIST
45276: LIST
45277: PUSH
45278: LD_INT 2
45280: NEG
45281: PUSH
45282: LD_INT 1
45284: NEG
45285: PUSH
45286: EMPTY
45287: LIST
45288: LIST
45289: PUSH
45290: LD_INT 2
45292: NEG
45293: PUSH
45294: LD_INT 2
45296: NEG
45297: PUSH
45298: EMPTY
45299: LIST
45300: LIST
45301: PUSH
45302: LD_INT 2
45304: NEG
45305: PUSH
45306: LD_INT 3
45308: NEG
45309: PUSH
45310: EMPTY
45311: LIST
45312: LIST
45313: PUSH
45314: LD_INT 3
45316: NEG
45317: PUSH
45318: LD_INT 2
45320: NEG
45321: PUSH
45322: EMPTY
45323: LIST
45324: LIST
45325: PUSH
45326: LD_INT 3
45328: NEG
45329: PUSH
45330: LD_INT 3
45332: NEG
45333: PUSH
45334: EMPTY
45335: LIST
45336: LIST
45337: PUSH
45338: EMPTY
45339: LIST
45340: LIST
45341: LIST
45342: LIST
45343: LIST
45344: LIST
45345: LIST
45346: LIST
45347: LIST
45348: LIST
45349: LIST
45350: LIST
45351: LIST
45352: LIST
45353: LIST
45354: LIST
45355: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
45356: LD_ADDR_VAR 0 14
45360: PUSH
45361: LD_INT 0
45363: PUSH
45364: LD_INT 0
45366: PUSH
45367: EMPTY
45368: LIST
45369: LIST
45370: PUSH
45371: LD_INT 0
45373: PUSH
45374: LD_INT 1
45376: NEG
45377: PUSH
45378: EMPTY
45379: LIST
45380: LIST
45381: PUSH
45382: LD_INT 1
45384: PUSH
45385: LD_INT 0
45387: PUSH
45388: EMPTY
45389: LIST
45390: LIST
45391: PUSH
45392: LD_INT 1
45394: PUSH
45395: LD_INT 1
45397: PUSH
45398: EMPTY
45399: LIST
45400: LIST
45401: PUSH
45402: LD_INT 0
45404: PUSH
45405: LD_INT 1
45407: PUSH
45408: EMPTY
45409: LIST
45410: LIST
45411: PUSH
45412: LD_INT 1
45414: NEG
45415: PUSH
45416: LD_INT 0
45418: PUSH
45419: EMPTY
45420: LIST
45421: LIST
45422: PUSH
45423: LD_INT 1
45425: NEG
45426: PUSH
45427: LD_INT 1
45429: NEG
45430: PUSH
45431: EMPTY
45432: LIST
45433: LIST
45434: PUSH
45435: LD_INT 1
45437: NEG
45438: PUSH
45439: LD_INT 2
45441: NEG
45442: PUSH
45443: EMPTY
45444: LIST
45445: LIST
45446: PUSH
45447: LD_INT 0
45449: PUSH
45450: LD_INT 2
45452: NEG
45453: PUSH
45454: EMPTY
45455: LIST
45456: LIST
45457: PUSH
45458: LD_INT 1
45460: PUSH
45461: LD_INT 1
45463: NEG
45464: PUSH
45465: EMPTY
45466: LIST
45467: LIST
45468: PUSH
45469: LD_INT 1
45471: PUSH
45472: LD_INT 2
45474: PUSH
45475: EMPTY
45476: LIST
45477: LIST
45478: PUSH
45479: LD_INT 0
45481: PUSH
45482: LD_INT 2
45484: PUSH
45485: EMPTY
45486: LIST
45487: LIST
45488: PUSH
45489: LD_INT 1
45491: NEG
45492: PUSH
45493: LD_INT 1
45495: PUSH
45496: EMPTY
45497: LIST
45498: LIST
45499: PUSH
45500: LD_INT 1
45502: NEG
45503: PUSH
45504: LD_INT 3
45506: NEG
45507: PUSH
45508: EMPTY
45509: LIST
45510: LIST
45511: PUSH
45512: LD_INT 0
45514: PUSH
45515: LD_INT 3
45517: NEG
45518: PUSH
45519: EMPTY
45520: LIST
45521: LIST
45522: PUSH
45523: LD_INT 1
45525: PUSH
45526: LD_INT 2
45528: NEG
45529: PUSH
45530: EMPTY
45531: LIST
45532: LIST
45533: PUSH
45534: EMPTY
45535: LIST
45536: LIST
45537: LIST
45538: LIST
45539: LIST
45540: LIST
45541: LIST
45542: LIST
45543: LIST
45544: LIST
45545: LIST
45546: LIST
45547: LIST
45548: LIST
45549: LIST
45550: LIST
45551: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
45552: LD_ADDR_VAR 0 15
45556: PUSH
45557: LD_INT 0
45559: PUSH
45560: LD_INT 0
45562: PUSH
45563: EMPTY
45564: LIST
45565: LIST
45566: PUSH
45567: LD_INT 0
45569: PUSH
45570: LD_INT 1
45572: NEG
45573: PUSH
45574: EMPTY
45575: LIST
45576: LIST
45577: PUSH
45578: LD_INT 1
45580: PUSH
45581: LD_INT 0
45583: PUSH
45584: EMPTY
45585: LIST
45586: LIST
45587: PUSH
45588: LD_INT 1
45590: PUSH
45591: LD_INT 1
45593: PUSH
45594: EMPTY
45595: LIST
45596: LIST
45597: PUSH
45598: LD_INT 0
45600: PUSH
45601: LD_INT 1
45603: PUSH
45604: EMPTY
45605: LIST
45606: LIST
45607: PUSH
45608: LD_INT 1
45610: NEG
45611: PUSH
45612: LD_INT 0
45614: PUSH
45615: EMPTY
45616: LIST
45617: LIST
45618: PUSH
45619: LD_INT 1
45621: NEG
45622: PUSH
45623: LD_INT 1
45625: NEG
45626: PUSH
45627: EMPTY
45628: LIST
45629: LIST
45630: PUSH
45631: LD_INT 1
45633: PUSH
45634: LD_INT 1
45636: NEG
45637: PUSH
45638: EMPTY
45639: LIST
45640: LIST
45641: PUSH
45642: LD_INT 2
45644: PUSH
45645: LD_INT 0
45647: PUSH
45648: EMPTY
45649: LIST
45650: LIST
45651: PUSH
45652: LD_INT 2
45654: PUSH
45655: LD_INT 1
45657: PUSH
45658: EMPTY
45659: LIST
45660: LIST
45661: PUSH
45662: LD_INT 1
45664: NEG
45665: PUSH
45666: LD_INT 1
45668: PUSH
45669: EMPTY
45670: LIST
45671: LIST
45672: PUSH
45673: LD_INT 2
45675: NEG
45676: PUSH
45677: LD_INT 0
45679: PUSH
45680: EMPTY
45681: LIST
45682: LIST
45683: PUSH
45684: LD_INT 2
45686: NEG
45687: PUSH
45688: LD_INT 1
45690: NEG
45691: PUSH
45692: EMPTY
45693: LIST
45694: LIST
45695: PUSH
45696: LD_INT 2
45698: PUSH
45699: LD_INT 1
45701: NEG
45702: PUSH
45703: EMPTY
45704: LIST
45705: LIST
45706: PUSH
45707: LD_INT 3
45709: PUSH
45710: LD_INT 0
45712: PUSH
45713: EMPTY
45714: LIST
45715: LIST
45716: PUSH
45717: LD_INT 3
45719: PUSH
45720: LD_INT 1
45722: PUSH
45723: EMPTY
45724: LIST
45725: LIST
45726: PUSH
45727: EMPTY
45728: LIST
45729: LIST
45730: LIST
45731: LIST
45732: LIST
45733: LIST
45734: LIST
45735: LIST
45736: LIST
45737: LIST
45738: LIST
45739: LIST
45740: LIST
45741: LIST
45742: LIST
45743: LIST
45744: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
45745: LD_ADDR_VAR 0 16
45749: PUSH
45750: LD_INT 0
45752: PUSH
45753: LD_INT 0
45755: PUSH
45756: EMPTY
45757: LIST
45758: LIST
45759: PUSH
45760: LD_INT 0
45762: PUSH
45763: LD_INT 1
45765: NEG
45766: PUSH
45767: EMPTY
45768: LIST
45769: LIST
45770: PUSH
45771: LD_INT 1
45773: PUSH
45774: LD_INT 0
45776: PUSH
45777: EMPTY
45778: LIST
45779: LIST
45780: PUSH
45781: LD_INT 1
45783: PUSH
45784: LD_INT 1
45786: PUSH
45787: EMPTY
45788: LIST
45789: LIST
45790: PUSH
45791: LD_INT 0
45793: PUSH
45794: LD_INT 1
45796: PUSH
45797: EMPTY
45798: LIST
45799: LIST
45800: PUSH
45801: LD_INT 1
45803: NEG
45804: PUSH
45805: LD_INT 0
45807: PUSH
45808: EMPTY
45809: LIST
45810: LIST
45811: PUSH
45812: LD_INT 1
45814: NEG
45815: PUSH
45816: LD_INT 1
45818: NEG
45819: PUSH
45820: EMPTY
45821: LIST
45822: LIST
45823: PUSH
45824: LD_INT 1
45826: NEG
45827: PUSH
45828: LD_INT 2
45830: NEG
45831: PUSH
45832: EMPTY
45833: LIST
45834: LIST
45835: PUSH
45836: LD_INT 2
45838: PUSH
45839: LD_INT 1
45841: PUSH
45842: EMPTY
45843: LIST
45844: LIST
45845: PUSH
45846: LD_INT 2
45848: PUSH
45849: LD_INT 2
45851: PUSH
45852: EMPTY
45853: LIST
45854: LIST
45855: PUSH
45856: LD_INT 1
45858: PUSH
45859: LD_INT 2
45861: PUSH
45862: EMPTY
45863: LIST
45864: LIST
45865: PUSH
45866: LD_INT 2
45868: NEG
45869: PUSH
45870: LD_INT 1
45872: NEG
45873: PUSH
45874: EMPTY
45875: LIST
45876: LIST
45877: PUSH
45878: LD_INT 2
45880: NEG
45881: PUSH
45882: LD_INT 2
45884: NEG
45885: PUSH
45886: EMPTY
45887: LIST
45888: LIST
45889: PUSH
45890: LD_INT 3
45892: PUSH
45893: LD_INT 2
45895: PUSH
45896: EMPTY
45897: LIST
45898: LIST
45899: PUSH
45900: LD_INT 3
45902: PUSH
45903: LD_INT 3
45905: PUSH
45906: EMPTY
45907: LIST
45908: LIST
45909: PUSH
45910: LD_INT 2
45912: PUSH
45913: LD_INT 3
45915: PUSH
45916: EMPTY
45917: LIST
45918: LIST
45919: PUSH
45920: EMPTY
45921: LIST
45922: LIST
45923: LIST
45924: LIST
45925: LIST
45926: LIST
45927: LIST
45928: LIST
45929: LIST
45930: LIST
45931: LIST
45932: LIST
45933: LIST
45934: LIST
45935: LIST
45936: LIST
45937: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45938: LD_ADDR_VAR 0 17
45942: PUSH
45943: LD_INT 0
45945: PUSH
45946: LD_INT 0
45948: PUSH
45949: EMPTY
45950: LIST
45951: LIST
45952: PUSH
45953: LD_INT 0
45955: PUSH
45956: LD_INT 1
45958: NEG
45959: PUSH
45960: EMPTY
45961: LIST
45962: LIST
45963: PUSH
45964: LD_INT 1
45966: PUSH
45967: LD_INT 0
45969: PUSH
45970: EMPTY
45971: LIST
45972: LIST
45973: PUSH
45974: LD_INT 1
45976: PUSH
45977: LD_INT 1
45979: PUSH
45980: EMPTY
45981: LIST
45982: LIST
45983: PUSH
45984: LD_INT 0
45986: PUSH
45987: LD_INT 1
45989: PUSH
45990: EMPTY
45991: LIST
45992: LIST
45993: PUSH
45994: LD_INT 1
45996: NEG
45997: PUSH
45998: LD_INT 0
46000: PUSH
46001: EMPTY
46002: LIST
46003: LIST
46004: PUSH
46005: LD_INT 1
46007: NEG
46008: PUSH
46009: LD_INT 1
46011: NEG
46012: PUSH
46013: EMPTY
46014: LIST
46015: LIST
46016: PUSH
46017: LD_INT 1
46019: NEG
46020: PUSH
46021: LD_INT 2
46023: NEG
46024: PUSH
46025: EMPTY
46026: LIST
46027: LIST
46028: PUSH
46029: LD_INT 0
46031: PUSH
46032: LD_INT 2
46034: NEG
46035: PUSH
46036: EMPTY
46037: LIST
46038: LIST
46039: PUSH
46040: LD_INT 1
46042: PUSH
46043: LD_INT 1
46045: NEG
46046: PUSH
46047: EMPTY
46048: LIST
46049: LIST
46050: PUSH
46051: LD_INT 2
46053: PUSH
46054: LD_INT 0
46056: PUSH
46057: EMPTY
46058: LIST
46059: LIST
46060: PUSH
46061: LD_INT 2
46063: PUSH
46064: LD_INT 1
46066: PUSH
46067: EMPTY
46068: LIST
46069: LIST
46070: PUSH
46071: LD_INT 2
46073: PUSH
46074: LD_INT 2
46076: PUSH
46077: EMPTY
46078: LIST
46079: LIST
46080: PUSH
46081: LD_INT 1
46083: PUSH
46084: LD_INT 2
46086: PUSH
46087: EMPTY
46088: LIST
46089: LIST
46090: PUSH
46091: LD_INT 0
46093: PUSH
46094: LD_INT 2
46096: PUSH
46097: EMPTY
46098: LIST
46099: LIST
46100: PUSH
46101: LD_INT 1
46103: NEG
46104: PUSH
46105: LD_INT 1
46107: PUSH
46108: EMPTY
46109: LIST
46110: LIST
46111: PUSH
46112: LD_INT 2
46114: NEG
46115: PUSH
46116: LD_INT 0
46118: PUSH
46119: EMPTY
46120: LIST
46121: LIST
46122: PUSH
46123: LD_INT 2
46125: NEG
46126: PUSH
46127: LD_INT 1
46129: NEG
46130: PUSH
46131: EMPTY
46132: LIST
46133: LIST
46134: PUSH
46135: LD_INT 2
46137: NEG
46138: PUSH
46139: LD_INT 2
46141: NEG
46142: PUSH
46143: EMPTY
46144: LIST
46145: LIST
46146: PUSH
46147: EMPTY
46148: LIST
46149: LIST
46150: LIST
46151: LIST
46152: LIST
46153: LIST
46154: LIST
46155: LIST
46156: LIST
46157: LIST
46158: LIST
46159: LIST
46160: LIST
46161: LIST
46162: LIST
46163: LIST
46164: LIST
46165: LIST
46166: LIST
46167: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46168: LD_ADDR_VAR 0 18
46172: PUSH
46173: LD_INT 0
46175: PUSH
46176: LD_INT 0
46178: PUSH
46179: EMPTY
46180: LIST
46181: LIST
46182: PUSH
46183: LD_INT 0
46185: PUSH
46186: LD_INT 1
46188: NEG
46189: PUSH
46190: EMPTY
46191: LIST
46192: LIST
46193: PUSH
46194: LD_INT 1
46196: PUSH
46197: LD_INT 0
46199: PUSH
46200: EMPTY
46201: LIST
46202: LIST
46203: PUSH
46204: LD_INT 1
46206: PUSH
46207: LD_INT 1
46209: PUSH
46210: EMPTY
46211: LIST
46212: LIST
46213: PUSH
46214: LD_INT 0
46216: PUSH
46217: LD_INT 1
46219: PUSH
46220: EMPTY
46221: LIST
46222: LIST
46223: PUSH
46224: LD_INT 1
46226: NEG
46227: PUSH
46228: LD_INT 0
46230: PUSH
46231: EMPTY
46232: LIST
46233: LIST
46234: PUSH
46235: LD_INT 1
46237: NEG
46238: PUSH
46239: LD_INT 1
46241: NEG
46242: PUSH
46243: EMPTY
46244: LIST
46245: LIST
46246: PUSH
46247: LD_INT 1
46249: NEG
46250: PUSH
46251: LD_INT 2
46253: NEG
46254: PUSH
46255: EMPTY
46256: LIST
46257: LIST
46258: PUSH
46259: LD_INT 0
46261: PUSH
46262: LD_INT 2
46264: NEG
46265: PUSH
46266: EMPTY
46267: LIST
46268: LIST
46269: PUSH
46270: LD_INT 1
46272: PUSH
46273: LD_INT 1
46275: NEG
46276: PUSH
46277: EMPTY
46278: LIST
46279: LIST
46280: PUSH
46281: LD_INT 2
46283: PUSH
46284: LD_INT 0
46286: PUSH
46287: EMPTY
46288: LIST
46289: LIST
46290: PUSH
46291: LD_INT 2
46293: PUSH
46294: LD_INT 1
46296: PUSH
46297: EMPTY
46298: LIST
46299: LIST
46300: PUSH
46301: LD_INT 2
46303: PUSH
46304: LD_INT 2
46306: PUSH
46307: EMPTY
46308: LIST
46309: LIST
46310: PUSH
46311: LD_INT 1
46313: PUSH
46314: LD_INT 2
46316: PUSH
46317: EMPTY
46318: LIST
46319: LIST
46320: PUSH
46321: LD_INT 0
46323: PUSH
46324: LD_INT 2
46326: PUSH
46327: EMPTY
46328: LIST
46329: LIST
46330: PUSH
46331: LD_INT 1
46333: NEG
46334: PUSH
46335: LD_INT 1
46337: PUSH
46338: EMPTY
46339: LIST
46340: LIST
46341: PUSH
46342: LD_INT 2
46344: NEG
46345: PUSH
46346: LD_INT 0
46348: PUSH
46349: EMPTY
46350: LIST
46351: LIST
46352: PUSH
46353: LD_INT 2
46355: NEG
46356: PUSH
46357: LD_INT 1
46359: NEG
46360: PUSH
46361: EMPTY
46362: LIST
46363: LIST
46364: PUSH
46365: LD_INT 2
46367: NEG
46368: PUSH
46369: LD_INT 2
46371: NEG
46372: PUSH
46373: EMPTY
46374: LIST
46375: LIST
46376: PUSH
46377: EMPTY
46378: LIST
46379: LIST
46380: LIST
46381: LIST
46382: LIST
46383: LIST
46384: LIST
46385: LIST
46386: LIST
46387: LIST
46388: LIST
46389: LIST
46390: LIST
46391: LIST
46392: LIST
46393: LIST
46394: LIST
46395: LIST
46396: LIST
46397: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46398: LD_ADDR_VAR 0 19
46402: PUSH
46403: LD_INT 0
46405: PUSH
46406: LD_INT 0
46408: PUSH
46409: EMPTY
46410: LIST
46411: LIST
46412: PUSH
46413: LD_INT 0
46415: PUSH
46416: LD_INT 1
46418: NEG
46419: PUSH
46420: EMPTY
46421: LIST
46422: LIST
46423: PUSH
46424: LD_INT 1
46426: PUSH
46427: LD_INT 0
46429: PUSH
46430: EMPTY
46431: LIST
46432: LIST
46433: PUSH
46434: LD_INT 1
46436: PUSH
46437: LD_INT 1
46439: PUSH
46440: EMPTY
46441: LIST
46442: LIST
46443: PUSH
46444: LD_INT 0
46446: PUSH
46447: LD_INT 1
46449: PUSH
46450: EMPTY
46451: LIST
46452: LIST
46453: PUSH
46454: LD_INT 1
46456: NEG
46457: PUSH
46458: LD_INT 0
46460: PUSH
46461: EMPTY
46462: LIST
46463: LIST
46464: PUSH
46465: LD_INT 1
46467: NEG
46468: PUSH
46469: LD_INT 1
46471: NEG
46472: PUSH
46473: EMPTY
46474: LIST
46475: LIST
46476: PUSH
46477: LD_INT 1
46479: NEG
46480: PUSH
46481: LD_INT 2
46483: NEG
46484: PUSH
46485: EMPTY
46486: LIST
46487: LIST
46488: PUSH
46489: LD_INT 0
46491: PUSH
46492: LD_INT 2
46494: NEG
46495: PUSH
46496: EMPTY
46497: LIST
46498: LIST
46499: PUSH
46500: LD_INT 1
46502: PUSH
46503: LD_INT 1
46505: NEG
46506: PUSH
46507: EMPTY
46508: LIST
46509: LIST
46510: PUSH
46511: LD_INT 2
46513: PUSH
46514: LD_INT 0
46516: PUSH
46517: EMPTY
46518: LIST
46519: LIST
46520: PUSH
46521: LD_INT 2
46523: PUSH
46524: LD_INT 1
46526: PUSH
46527: EMPTY
46528: LIST
46529: LIST
46530: PUSH
46531: LD_INT 2
46533: PUSH
46534: LD_INT 2
46536: PUSH
46537: EMPTY
46538: LIST
46539: LIST
46540: PUSH
46541: LD_INT 1
46543: PUSH
46544: LD_INT 2
46546: PUSH
46547: EMPTY
46548: LIST
46549: LIST
46550: PUSH
46551: LD_INT 0
46553: PUSH
46554: LD_INT 2
46556: PUSH
46557: EMPTY
46558: LIST
46559: LIST
46560: PUSH
46561: LD_INT 1
46563: NEG
46564: PUSH
46565: LD_INT 1
46567: PUSH
46568: EMPTY
46569: LIST
46570: LIST
46571: PUSH
46572: LD_INT 2
46574: NEG
46575: PUSH
46576: LD_INT 0
46578: PUSH
46579: EMPTY
46580: LIST
46581: LIST
46582: PUSH
46583: LD_INT 2
46585: NEG
46586: PUSH
46587: LD_INT 1
46589: NEG
46590: PUSH
46591: EMPTY
46592: LIST
46593: LIST
46594: PUSH
46595: LD_INT 2
46597: NEG
46598: PUSH
46599: LD_INT 2
46601: NEG
46602: PUSH
46603: EMPTY
46604: LIST
46605: LIST
46606: PUSH
46607: EMPTY
46608: LIST
46609: LIST
46610: LIST
46611: LIST
46612: LIST
46613: LIST
46614: LIST
46615: LIST
46616: LIST
46617: LIST
46618: LIST
46619: LIST
46620: LIST
46621: LIST
46622: LIST
46623: LIST
46624: LIST
46625: LIST
46626: LIST
46627: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46628: LD_ADDR_VAR 0 20
46632: PUSH
46633: LD_INT 0
46635: PUSH
46636: LD_INT 0
46638: PUSH
46639: EMPTY
46640: LIST
46641: LIST
46642: PUSH
46643: LD_INT 0
46645: PUSH
46646: LD_INT 1
46648: NEG
46649: PUSH
46650: EMPTY
46651: LIST
46652: LIST
46653: PUSH
46654: LD_INT 1
46656: PUSH
46657: LD_INT 0
46659: PUSH
46660: EMPTY
46661: LIST
46662: LIST
46663: PUSH
46664: LD_INT 1
46666: PUSH
46667: LD_INT 1
46669: PUSH
46670: EMPTY
46671: LIST
46672: LIST
46673: PUSH
46674: LD_INT 0
46676: PUSH
46677: LD_INT 1
46679: PUSH
46680: EMPTY
46681: LIST
46682: LIST
46683: PUSH
46684: LD_INT 1
46686: NEG
46687: PUSH
46688: LD_INT 0
46690: PUSH
46691: EMPTY
46692: LIST
46693: LIST
46694: PUSH
46695: LD_INT 1
46697: NEG
46698: PUSH
46699: LD_INT 1
46701: NEG
46702: PUSH
46703: EMPTY
46704: LIST
46705: LIST
46706: PUSH
46707: LD_INT 1
46709: NEG
46710: PUSH
46711: LD_INT 2
46713: NEG
46714: PUSH
46715: EMPTY
46716: LIST
46717: LIST
46718: PUSH
46719: LD_INT 0
46721: PUSH
46722: LD_INT 2
46724: NEG
46725: PUSH
46726: EMPTY
46727: LIST
46728: LIST
46729: PUSH
46730: LD_INT 1
46732: PUSH
46733: LD_INT 1
46735: NEG
46736: PUSH
46737: EMPTY
46738: LIST
46739: LIST
46740: PUSH
46741: LD_INT 2
46743: PUSH
46744: LD_INT 0
46746: PUSH
46747: EMPTY
46748: LIST
46749: LIST
46750: PUSH
46751: LD_INT 2
46753: PUSH
46754: LD_INT 1
46756: PUSH
46757: EMPTY
46758: LIST
46759: LIST
46760: PUSH
46761: LD_INT 2
46763: PUSH
46764: LD_INT 2
46766: PUSH
46767: EMPTY
46768: LIST
46769: LIST
46770: PUSH
46771: LD_INT 1
46773: PUSH
46774: LD_INT 2
46776: PUSH
46777: EMPTY
46778: LIST
46779: LIST
46780: PUSH
46781: LD_INT 0
46783: PUSH
46784: LD_INT 2
46786: PUSH
46787: EMPTY
46788: LIST
46789: LIST
46790: PUSH
46791: LD_INT 1
46793: NEG
46794: PUSH
46795: LD_INT 1
46797: PUSH
46798: EMPTY
46799: LIST
46800: LIST
46801: PUSH
46802: LD_INT 2
46804: NEG
46805: PUSH
46806: LD_INT 0
46808: PUSH
46809: EMPTY
46810: LIST
46811: LIST
46812: PUSH
46813: LD_INT 2
46815: NEG
46816: PUSH
46817: LD_INT 1
46819: NEG
46820: PUSH
46821: EMPTY
46822: LIST
46823: LIST
46824: PUSH
46825: LD_INT 2
46827: NEG
46828: PUSH
46829: LD_INT 2
46831: NEG
46832: PUSH
46833: EMPTY
46834: LIST
46835: LIST
46836: PUSH
46837: EMPTY
46838: LIST
46839: LIST
46840: LIST
46841: LIST
46842: LIST
46843: LIST
46844: LIST
46845: LIST
46846: LIST
46847: LIST
46848: LIST
46849: LIST
46850: LIST
46851: LIST
46852: LIST
46853: LIST
46854: LIST
46855: LIST
46856: LIST
46857: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46858: LD_ADDR_VAR 0 21
46862: PUSH
46863: LD_INT 0
46865: PUSH
46866: LD_INT 0
46868: PUSH
46869: EMPTY
46870: LIST
46871: LIST
46872: PUSH
46873: LD_INT 0
46875: PUSH
46876: LD_INT 1
46878: NEG
46879: PUSH
46880: EMPTY
46881: LIST
46882: LIST
46883: PUSH
46884: LD_INT 1
46886: PUSH
46887: LD_INT 0
46889: PUSH
46890: EMPTY
46891: LIST
46892: LIST
46893: PUSH
46894: LD_INT 1
46896: PUSH
46897: LD_INT 1
46899: PUSH
46900: EMPTY
46901: LIST
46902: LIST
46903: PUSH
46904: LD_INT 0
46906: PUSH
46907: LD_INT 1
46909: PUSH
46910: EMPTY
46911: LIST
46912: LIST
46913: PUSH
46914: LD_INT 1
46916: NEG
46917: PUSH
46918: LD_INT 0
46920: PUSH
46921: EMPTY
46922: LIST
46923: LIST
46924: PUSH
46925: LD_INT 1
46927: NEG
46928: PUSH
46929: LD_INT 1
46931: NEG
46932: PUSH
46933: EMPTY
46934: LIST
46935: LIST
46936: PUSH
46937: LD_INT 1
46939: NEG
46940: PUSH
46941: LD_INT 2
46943: NEG
46944: PUSH
46945: EMPTY
46946: LIST
46947: LIST
46948: PUSH
46949: LD_INT 0
46951: PUSH
46952: LD_INT 2
46954: NEG
46955: PUSH
46956: EMPTY
46957: LIST
46958: LIST
46959: PUSH
46960: LD_INT 1
46962: PUSH
46963: LD_INT 1
46965: NEG
46966: PUSH
46967: EMPTY
46968: LIST
46969: LIST
46970: PUSH
46971: LD_INT 2
46973: PUSH
46974: LD_INT 0
46976: PUSH
46977: EMPTY
46978: LIST
46979: LIST
46980: PUSH
46981: LD_INT 2
46983: PUSH
46984: LD_INT 1
46986: PUSH
46987: EMPTY
46988: LIST
46989: LIST
46990: PUSH
46991: LD_INT 2
46993: PUSH
46994: LD_INT 2
46996: PUSH
46997: EMPTY
46998: LIST
46999: LIST
47000: PUSH
47001: LD_INT 1
47003: PUSH
47004: LD_INT 2
47006: PUSH
47007: EMPTY
47008: LIST
47009: LIST
47010: PUSH
47011: LD_INT 0
47013: PUSH
47014: LD_INT 2
47016: PUSH
47017: EMPTY
47018: LIST
47019: LIST
47020: PUSH
47021: LD_INT 1
47023: NEG
47024: PUSH
47025: LD_INT 1
47027: PUSH
47028: EMPTY
47029: LIST
47030: LIST
47031: PUSH
47032: LD_INT 2
47034: NEG
47035: PUSH
47036: LD_INT 0
47038: PUSH
47039: EMPTY
47040: LIST
47041: LIST
47042: PUSH
47043: LD_INT 2
47045: NEG
47046: PUSH
47047: LD_INT 1
47049: NEG
47050: PUSH
47051: EMPTY
47052: LIST
47053: LIST
47054: PUSH
47055: LD_INT 2
47057: NEG
47058: PUSH
47059: LD_INT 2
47061: NEG
47062: PUSH
47063: EMPTY
47064: LIST
47065: LIST
47066: PUSH
47067: EMPTY
47068: LIST
47069: LIST
47070: LIST
47071: LIST
47072: LIST
47073: LIST
47074: LIST
47075: LIST
47076: LIST
47077: LIST
47078: LIST
47079: LIST
47080: LIST
47081: LIST
47082: LIST
47083: LIST
47084: LIST
47085: LIST
47086: LIST
47087: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47088: LD_ADDR_VAR 0 22
47092: PUSH
47093: LD_INT 0
47095: PUSH
47096: LD_INT 0
47098: PUSH
47099: EMPTY
47100: LIST
47101: LIST
47102: PUSH
47103: LD_INT 0
47105: PUSH
47106: LD_INT 1
47108: NEG
47109: PUSH
47110: EMPTY
47111: LIST
47112: LIST
47113: PUSH
47114: LD_INT 1
47116: PUSH
47117: LD_INT 0
47119: PUSH
47120: EMPTY
47121: LIST
47122: LIST
47123: PUSH
47124: LD_INT 1
47126: PUSH
47127: LD_INT 1
47129: PUSH
47130: EMPTY
47131: LIST
47132: LIST
47133: PUSH
47134: LD_INT 0
47136: PUSH
47137: LD_INT 1
47139: PUSH
47140: EMPTY
47141: LIST
47142: LIST
47143: PUSH
47144: LD_INT 1
47146: NEG
47147: PUSH
47148: LD_INT 0
47150: PUSH
47151: EMPTY
47152: LIST
47153: LIST
47154: PUSH
47155: LD_INT 1
47157: NEG
47158: PUSH
47159: LD_INT 1
47161: NEG
47162: PUSH
47163: EMPTY
47164: LIST
47165: LIST
47166: PUSH
47167: LD_INT 1
47169: NEG
47170: PUSH
47171: LD_INT 2
47173: NEG
47174: PUSH
47175: EMPTY
47176: LIST
47177: LIST
47178: PUSH
47179: LD_INT 0
47181: PUSH
47182: LD_INT 2
47184: NEG
47185: PUSH
47186: EMPTY
47187: LIST
47188: LIST
47189: PUSH
47190: LD_INT 1
47192: PUSH
47193: LD_INT 1
47195: NEG
47196: PUSH
47197: EMPTY
47198: LIST
47199: LIST
47200: PUSH
47201: LD_INT 2
47203: PUSH
47204: LD_INT 0
47206: PUSH
47207: EMPTY
47208: LIST
47209: LIST
47210: PUSH
47211: LD_INT 2
47213: PUSH
47214: LD_INT 1
47216: PUSH
47217: EMPTY
47218: LIST
47219: LIST
47220: PUSH
47221: LD_INT 2
47223: PUSH
47224: LD_INT 2
47226: PUSH
47227: EMPTY
47228: LIST
47229: LIST
47230: PUSH
47231: LD_INT 1
47233: PUSH
47234: LD_INT 2
47236: PUSH
47237: EMPTY
47238: LIST
47239: LIST
47240: PUSH
47241: LD_INT 0
47243: PUSH
47244: LD_INT 2
47246: PUSH
47247: EMPTY
47248: LIST
47249: LIST
47250: PUSH
47251: LD_INT 1
47253: NEG
47254: PUSH
47255: LD_INT 1
47257: PUSH
47258: EMPTY
47259: LIST
47260: LIST
47261: PUSH
47262: LD_INT 2
47264: NEG
47265: PUSH
47266: LD_INT 0
47268: PUSH
47269: EMPTY
47270: LIST
47271: LIST
47272: PUSH
47273: LD_INT 2
47275: NEG
47276: PUSH
47277: LD_INT 1
47279: NEG
47280: PUSH
47281: EMPTY
47282: LIST
47283: LIST
47284: PUSH
47285: LD_INT 2
47287: NEG
47288: PUSH
47289: LD_INT 2
47291: NEG
47292: PUSH
47293: EMPTY
47294: LIST
47295: LIST
47296: PUSH
47297: EMPTY
47298: LIST
47299: LIST
47300: LIST
47301: LIST
47302: LIST
47303: LIST
47304: LIST
47305: LIST
47306: LIST
47307: LIST
47308: LIST
47309: LIST
47310: LIST
47311: LIST
47312: LIST
47313: LIST
47314: LIST
47315: LIST
47316: LIST
47317: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
47318: LD_ADDR_VAR 0 23
47322: PUSH
47323: LD_INT 0
47325: PUSH
47326: LD_INT 0
47328: PUSH
47329: EMPTY
47330: LIST
47331: LIST
47332: PUSH
47333: LD_INT 0
47335: PUSH
47336: LD_INT 1
47338: NEG
47339: PUSH
47340: EMPTY
47341: LIST
47342: LIST
47343: PUSH
47344: LD_INT 1
47346: PUSH
47347: LD_INT 0
47349: PUSH
47350: EMPTY
47351: LIST
47352: LIST
47353: PUSH
47354: LD_INT 1
47356: PUSH
47357: LD_INT 1
47359: PUSH
47360: EMPTY
47361: LIST
47362: LIST
47363: PUSH
47364: LD_INT 0
47366: PUSH
47367: LD_INT 1
47369: PUSH
47370: EMPTY
47371: LIST
47372: LIST
47373: PUSH
47374: LD_INT 1
47376: NEG
47377: PUSH
47378: LD_INT 0
47380: PUSH
47381: EMPTY
47382: LIST
47383: LIST
47384: PUSH
47385: LD_INT 1
47387: NEG
47388: PUSH
47389: LD_INT 1
47391: NEG
47392: PUSH
47393: EMPTY
47394: LIST
47395: LIST
47396: PUSH
47397: LD_INT 1
47399: NEG
47400: PUSH
47401: LD_INT 2
47403: NEG
47404: PUSH
47405: EMPTY
47406: LIST
47407: LIST
47408: PUSH
47409: LD_INT 0
47411: PUSH
47412: LD_INT 2
47414: NEG
47415: PUSH
47416: EMPTY
47417: LIST
47418: LIST
47419: PUSH
47420: LD_INT 1
47422: PUSH
47423: LD_INT 1
47425: NEG
47426: PUSH
47427: EMPTY
47428: LIST
47429: LIST
47430: PUSH
47431: LD_INT 2
47433: PUSH
47434: LD_INT 0
47436: PUSH
47437: EMPTY
47438: LIST
47439: LIST
47440: PUSH
47441: LD_INT 2
47443: PUSH
47444: LD_INT 1
47446: PUSH
47447: EMPTY
47448: LIST
47449: LIST
47450: PUSH
47451: LD_INT 2
47453: PUSH
47454: LD_INT 2
47456: PUSH
47457: EMPTY
47458: LIST
47459: LIST
47460: PUSH
47461: LD_INT 1
47463: PUSH
47464: LD_INT 2
47466: PUSH
47467: EMPTY
47468: LIST
47469: LIST
47470: PUSH
47471: LD_INT 0
47473: PUSH
47474: LD_INT 2
47476: PUSH
47477: EMPTY
47478: LIST
47479: LIST
47480: PUSH
47481: LD_INT 1
47483: NEG
47484: PUSH
47485: LD_INT 1
47487: PUSH
47488: EMPTY
47489: LIST
47490: LIST
47491: PUSH
47492: LD_INT 2
47494: NEG
47495: PUSH
47496: LD_INT 0
47498: PUSH
47499: EMPTY
47500: LIST
47501: LIST
47502: PUSH
47503: LD_INT 2
47505: NEG
47506: PUSH
47507: LD_INT 1
47509: NEG
47510: PUSH
47511: EMPTY
47512: LIST
47513: LIST
47514: PUSH
47515: LD_INT 2
47517: NEG
47518: PUSH
47519: LD_INT 2
47521: NEG
47522: PUSH
47523: EMPTY
47524: LIST
47525: LIST
47526: PUSH
47527: LD_INT 2
47529: NEG
47530: PUSH
47531: LD_INT 3
47533: NEG
47534: PUSH
47535: EMPTY
47536: LIST
47537: LIST
47538: PUSH
47539: LD_INT 1
47541: NEG
47542: PUSH
47543: LD_INT 3
47545: NEG
47546: PUSH
47547: EMPTY
47548: LIST
47549: LIST
47550: PUSH
47551: LD_INT 1
47553: PUSH
47554: LD_INT 2
47556: NEG
47557: PUSH
47558: EMPTY
47559: LIST
47560: LIST
47561: PUSH
47562: LD_INT 2
47564: PUSH
47565: LD_INT 1
47567: NEG
47568: PUSH
47569: EMPTY
47570: LIST
47571: LIST
47572: PUSH
47573: EMPTY
47574: LIST
47575: LIST
47576: LIST
47577: LIST
47578: LIST
47579: LIST
47580: LIST
47581: LIST
47582: LIST
47583: LIST
47584: LIST
47585: LIST
47586: LIST
47587: LIST
47588: LIST
47589: LIST
47590: LIST
47591: LIST
47592: LIST
47593: LIST
47594: LIST
47595: LIST
47596: LIST
47597: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
47598: LD_ADDR_VAR 0 24
47602: PUSH
47603: LD_INT 0
47605: PUSH
47606: LD_INT 0
47608: PUSH
47609: EMPTY
47610: LIST
47611: LIST
47612: PUSH
47613: LD_INT 0
47615: PUSH
47616: LD_INT 1
47618: NEG
47619: PUSH
47620: EMPTY
47621: LIST
47622: LIST
47623: PUSH
47624: LD_INT 1
47626: PUSH
47627: LD_INT 0
47629: PUSH
47630: EMPTY
47631: LIST
47632: LIST
47633: PUSH
47634: LD_INT 1
47636: PUSH
47637: LD_INT 1
47639: PUSH
47640: EMPTY
47641: LIST
47642: LIST
47643: PUSH
47644: LD_INT 0
47646: PUSH
47647: LD_INT 1
47649: PUSH
47650: EMPTY
47651: LIST
47652: LIST
47653: PUSH
47654: LD_INT 1
47656: NEG
47657: PUSH
47658: LD_INT 0
47660: PUSH
47661: EMPTY
47662: LIST
47663: LIST
47664: PUSH
47665: LD_INT 1
47667: NEG
47668: PUSH
47669: LD_INT 1
47671: NEG
47672: PUSH
47673: EMPTY
47674: LIST
47675: LIST
47676: PUSH
47677: LD_INT 1
47679: NEG
47680: PUSH
47681: LD_INT 2
47683: NEG
47684: PUSH
47685: EMPTY
47686: LIST
47687: LIST
47688: PUSH
47689: LD_INT 0
47691: PUSH
47692: LD_INT 2
47694: NEG
47695: PUSH
47696: EMPTY
47697: LIST
47698: LIST
47699: PUSH
47700: LD_INT 1
47702: PUSH
47703: LD_INT 1
47705: NEG
47706: PUSH
47707: EMPTY
47708: LIST
47709: LIST
47710: PUSH
47711: LD_INT 2
47713: PUSH
47714: LD_INT 0
47716: PUSH
47717: EMPTY
47718: LIST
47719: LIST
47720: PUSH
47721: LD_INT 2
47723: PUSH
47724: LD_INT 1
47726: PUSH
47727: EMPTY
47728: LIST
47729: LIST
47730: PUSH
47731: LD_INT 2
47733: PUSH
47734: LD_INT 2
47736: PUSH
47737: EMPTY
47738: LIST
47739: LIST
47740: PUSH
47741: LD_INT 1
47743: PUSH
47744: LD_INT 2
47746: PUSH
47747: EMPTY
47748: LIST
47749: LIST
47750: PUSH
47751: LD_INT 0
47753: PUSH
47754: LD_INT 2
47756: PUSH
47757: EMPTY
47758: LIST
47759: LIST
47760: PUSH
47761: LD_INT 1
47763: NEG
47764: PUSH
47765: LD_INT 1
47767: PUSH
47768: EMPTY
47769: LIST
47770: LIST
47771: PUSH
47772: LD_INT 2
47774: NEG
47775: PUSH
47776: LD_INT 0
47778: PUSH
47779: EMPTY
47780: LIST
47781: LIST
47782: PUSH
47783: LD_INT 2
47785: NEG
47786: PUSH
47787: LD_INT 1
47789: NEG
47790: PUSH
47791: EMPTY
47792: LIST
47793: LIST
47794: PUSH
47795: LD_INT 2
47797: NEG
47798: PUSH
47799: LD_INT 2
47801: NEG
47802: PUSH
47803: EMPTY
47804: LIST
47805: LIST
47806: PUSH
47807: LD_INT 1
47809: PUSH
47810: LD_INT 2
47812: NEG
47813: PUSH
47814: EMPTY
47815: LIST
47816: LIST
47817: PUSH
47818: LD_INT 2
47820: PUSH
47821: LD_INT 1
47823: NEG
47824: PUSH
47825: EMPTY
47826: LIST
47827: LIST
47828: PUSH
47829: LD_INT 3
47831: PUSH
47832: LD_INT 1
47834: PUSH
47835: EMPTY
47836: LIST
47837: LIST
47838: PUSH
47839: LD_INT 3
47841: PUSH
47842: LD_INT 2
47844: PUSH
47845: EMPTY
47846: LIST
47847: LIST
47848: PUSH
47849: EMPTY
47850: LIST
47851: LIST
47852: LIST
47853: LIST
47854: LIST
47855: LIST
47856: LIST
47857: LIST
47858: LIST
47859: LIST
47860: LIST
47861: LIST
47862: LIST
47863: LIST
47864: LIST
47865: LIST
47866: LIST
47867: LIST
47868: LIST
47869: LIST
47870: LIST
47871: LIST
47872: LIST
47873: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
47874: LD_ADDR_VAR 0 25
47878: PUSH
47879: LD_INT 0
47881: PUSH
47882: LD_INT 0
47884: PUSH
47885: EMPTY
47886: LIST
47887: LIST
47888: PUSH
47889: LD_INT 0
47891: PUSH
47892: LD_INT 1
47894: NEG
47895: PUSH
47896: EMPTY
47897: LIST
47898: LIST
47899: PUSH
47900: LD_INT 1
47902: PUSH
47903: LD_INT 0
47905: PUSH
47906: EMPTY
47907: LIST
47908: LIST
47909: PUSH
47910: LD_INT 1
47912: PUSH
47913: LD_INT 1
47915: PUSH
47916: EMPTY
47917: LIST
47918: LIST
47919: PUSH
47920: LD_INT 0
47922: PUSH
47923: LD_INT 1
47925: PUSH
47926: EMPTY
47927: LIST
47928: LIST
47929: PUSH
47930: LD_INT 1
47932: NEG
47933: PUSH
47934: LD_INT 0
47936: PUSH
47937: EMPTY
47938: LIST
47939: LIST
47940: PUSH
47941: LD_INT 1
47943: NEG
47944: PUSH
47945: LD_INT 1
47947: NEG
47948: PUSH
47949: EMPTY
47950: LIST
47951: LIST
47952: PUSH
47953: LD_INT 1
47955: NEG
47956: PUSH
47957: LD_INT 2
47959: NEG
47960: PUSH
47961: EMPTY
47962: LIST
47963: LIST
47964: PUSH
47965: LD_INT 0
47967: PUSH
47968: LD_INT 2
47970: NEG
47971: PUSH
47972: EMPTY
47973: LIST
47974: LIST
47975: PUSH
47976: LD_INT 1
47978: PUSH
47979: LD_INT 1
47981: NEG
47982: PUSH
47983: EMPTY
47984: LIST
47985: LIST
47986: PUSH
47987: LD_INT 2
47989: PUSH
47990: LD_INT 0
47992: PUSH
47993: EMPTY
47994: LIST
47995: LIST
47996: PUSH
47997: LD_INT 2
47999: PUSH
48000: LD_INT 1
48002: PUSH
48003: EMPTY
48004: LIST
48005: LIST
48006: PUSH
48007: LD_INT 2
48009: PUSH
48010: LD_INT 2
48012: PUSH
48013: EMPTY
48014: LIST
48015: LIST
48016: PUSH
48017: LD_INT 1
48019: PUSH
48020: LD_INT 2
48022: PUSH
48023: EMPTY
48024: LIST
48025: LIST
48026: PUSH
48027: LD_INT 0
48029: PUSH
48030: LD_INT 2
48032: PUSH
48033: EMPTY
48034: LIST
48035: LIST
48036: PUSH
48037: LD_INT 1
48039: NEG
48040: PUSH
48041: LD_INT 1
48043: PUSH
48044: EMPTY
48045: LIST
48046: LIST
48047: PUSH
48048: LD_INT 2
48050: NEG
48051: PUSH
48052: LD_INT 0
48054: PUSH
48055: EMPTY
48056: LIST
48057: LIST
48058: PUSH
48059: LD_INT 2
48061: NEG
48062: PUSH
48063: LD_INT 1
48065: NEG
48066: PUSH
48067: EMPTY
48068: LIST
48069: LIST
48070: PUSH
48071: LD_INT 2
48073: NEG
48074: PUSH
48075: LD_INT 2
48077: NEG
48078: PUSH
48079: EMPTY
48080: LIST
48081: LIST
48082: PUSH
48083: LD_INT 3
48085: PUSH
48086: LD_INT 1
48088: PUSH
48089: EMPTY
48090: LIST
48091: LIST
48092: PUSH
48093: LD_INT 3
48095: PUSH
48096: LD_INT 2
48098: PUSH
48099: EMPTY
48100: LIST
48101: LIST
48102: PUSH
48103: LD_INT 2
48105: PUSH
48106: LD_INT 3
48108: PUSH
48109: EMPTY
48110: LIST
48111: LIST
48112: PUSH
48113: LD_INT 1
48115: PUSH
48116: LD_INT 3
48118: PUSH
48119: EMPTY
48120: LIST
48121: LIST
48122: PUSH
48123: EMPTY
48124: LIST
48125: LIST
48126: LIST
48127: LIST
48128: LIST
48129: LIST
48130: LIST
48131: LIST
48132: LIST
48133: LIST
48134: LIST
48135: LIST
48136: LIST
48137: LIST
48138: LIST
48139: LIST
48140: LIST
48141: LIST
48142: LIST
48143: LIST
48144: LIST
48145: LIST
48146: LIST
48147: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
48148: LD_ADDR_VAR 0 26
48152: PUSH
48153: LD_INT 0
48155: PUSH
48156: LD_INT 0
48158: PUSH
48159: EMPTY
48160: LIST
48161: LIST
48162: PUSH
48163: LD_INT 0
48165: PUSH
48166: LD_INT 1
48168: NEG
48169: PUSH
48170: EMPTY
48171: LIST
48172: LIST
48173: PUSH
48174: LD_INT 1
48176: PUSH
48177: LD_INT 0
48179: PUSH
48180: EMPTY
48181: LIST
48182: LIST
48183: PUSH
48184: LD_INT 1
48186: PUSH
48187: LD_INT 1
48189: PUSH
48190: EMPTY
48191: LIST
48192: LIST
48193: PUSH
48194: LD_INT 0
48196: PUSH
48197: LD_INT 1
48199: PUSH
48200: EMPTY
48201: LIST
48202: LIST
48203: PUSH
48204: LD_INT 1
48206: NEG
48207: PUSH
48208: LD_INT 0
48210: PUSH
48211: EMPTY
48212: LIST
48213: LIST
48214: PUSH
48215: LD_INT 1
48217: NEG
48218: PUSH
48219: LD_INT 1
48221: NEG
48222: PUSH
48223: EMPTY
48224: LIST
48225: LIST
48226: PUSH
48227: LD_INT 1
48229: NEG
48230: PUSH
48231: LD_INT 2
48233: NEG
48234: PUSH
48235: EMPTY
48236: LIST
48237: LIST
48238: PUSH
48239: LD_INT 0
48241: PUSH
48242: LD_INT 2
48244: NEG
48245: PUSH
48246: EMPTY
48247: LIST
48248: LIST
48249: PUSH
48250: LD_INT 1
48252: PUSH
48253: LD_INT 1
48255: NEG
48256: PUSH
48257: EMPTY
48258: LIST
48259: LIST
48260: PUSH
48261: LD_INT 2
48263: PUSH
48264: LD_INT 0
48266: PUSH
48267: EMPTY
48268: LIST
48269: LIST
48270: PUSH
48271: LD_INT 2
48273: PUSH
48274: LD_INT 1
48276: PUSH
48277: EMPTY
48278: LIST
48279: LIST
48280: PUSH
48281: LD_INT 2
48283: PUSH
48284: LD_INT 2
48286: PUSH
48287: EMPTY
48288: LIST
48289: LIST
48290: PUSH
48291: LD_INT 1
48293: PUSH
48294: LD_INT 2
48296: PUSH
48297: EMPTY
48298: LIST
48299: LIST
48300: PUSH
48301: LD_INT 0
48303: PUSH
48304: LD_INT 2
48306: PUSH
48307: EMPTY
48308: LIST
48309: LIST
48310: PUSH
48311: LD_INT 1
48313: NEG
48314: PUSH
48315: LD_INT 1
48317: PUSH
48318: EMPTY
48319: LIST
48320: LIST
48321: PUSH
48322: LD_INT 2
48324: NEG
48325: PUSH
48326: LD_INT 0
48328: PUSH
48329: EMPTY
48330: LIST
48331: LIST
48332: PUSH
48333: LD_INT 2
48335: NEG
48336: PUSH
48337: LD_INT 1
48339: NEG
48340: PUSH
48341: EMPTY
48342: LIST
48343: LIST
48344: PUSH
48345: LD_INT 2
48347: NEG
48348: PUSH
48349: LD_INT 2
48351: NEG
48352: PUSH
48353: EMPTY
48354: LIST
48355: LIST
48356: PUSH
48357: LD_INT 2
48359: PUSH
48360: LD_INT 3
48362: PUSH
48363: EMPTY
48364: LIST
48365: LIST
48366: PUSH
48367: LD_INT 1
48369: PUSH
48370: LD_INT 3
48372: PUSH
48373: EMPTY
48374: LIST
48375: LIST
48376: PUSH
48377: LD_INT 1
48379: NEG
48380: PUSH
48381: LD_INT 2
48383: PUSH
48384: EMPTY
48385: LIST
48386: LIST
48387: PUSH
48388: LD_INT 2
48390: NEG
48391: PUSH
48392: LD_INT 1
48394: PUSH
48395: EMPTY
48396: LIST
48397: LIST
48398: PUSH
48399: EMPTY
48400: LIST
48401: LIST
48402: LIST
48403: LIST
48404: LIST
48405: LIST
48406: LIST
48407: LIST
48408: LIST
48409: LIST
48410: LIST
48411: LIST
48412: LIST
48413: LIST
48414: LIST
48415: LIST
48416: LIST
48417: LIST
48418: LIST
48419: LIST
48420: LIST
48421: LIST
48422: LIST
48423: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
48424: LD_ADDR_VAR 0 27
48428: PUSH
48429: LD_INT 0
48431: PUSH
48432: LD_INT 0
48434: PUSH
48435: EMPTY
48436: LIST
48437: LIST
48438: PUSH
48439: LD_INT 0
48441: PUSH
48442: LD_INT 1
48444: NEG
48445: PUSH
48446: EMPTY
48447: LIST
48448: LIST
48449: PUSH
48450: LD_INT 1
48452: PUSH
48453: LD_INT 0
48455: PUSH
48456: EMPTY
48457: LIST
48458: LIST
48459: PUSH
48460: LD_INT 1
48462: PUSH
48463: LD_INT 1
48465: PUSH
48466: EMPTY
48467: LIST
48468: LIST
48469: PUSH
48470: LD_INT 0
48472: PUSH
48473: LD_INT 1
48475: PUSH
48476: EMPTY
48477: LIST
48478: LIST
48479: PUSH
48480: LD_INT 1
48482: NEG
48483: PUSH
48484: LD_INT 0
48486: PUSH
48487: EMPTY
48488: LIST
48489: LIST
48490: PUSH
48491: LD_INT 1
48493: NEG
48494: PUSH
48495: LD_INT 1
48497: NEG
48498: PUSH
48499: EMPTY
48500: LIST
48501: LIST
48502: PUSH
48503: LD_INT 1
48505: NEG
48506: PUSH
48507: LD_INT 2
48509: NEG
48510: PUSH
48511: EMPTY
48512: LIST
48513: LIST
48514: PUSH
48515: LD_INT 0
48517: PUSH
48518: LD_INT 2
48520: NEG
48521: PUSH
48522: EMPTY
48523: LIST
48524: LIST
48525: PUSH
48526: LD_INT 1
48528: PUSH
48529: LD_INT 1
48531: NEG
48532: PUSH
48533: EMPTY
48534: LIST
48535: LIST
48536: PUSH
48537: LD_INT 2
48539: PUSH
48540: LD_INT 0
48542: PUSH
48543: EMPTY
48544: LIST
48545: LIST
48546: PUSH
48547: LD_INT 2
48549: PUSH
48550: LD_INT 1
48552: PUSH
48553: EMPTY
48554: LIST
48555: LIST
48556: PUSH
48557: LD_INT 2
48559: PUSH
48560: LD_INT 2
48562: PUSH
48563: EMPTY
48564: LIST
48565: LIST
48566: PUSH
48567: LD_INT 1
48569: PUSH
48570: LD_INT 2
48572: PUSH
48573: EMPTY
48574: LIST
48575: LIST
48576: PUSH
48577: LD_INT 0
48579: PUSH
48580: LD_INT 2
48582: PUSH
48583: EMPTY
48584: LIST
48585: LIST
48586: PUSH
48587: LD_INT 1
48589: NEG
48590: PUSH
48591: LD_INT 1
48593: PUSH
48594: EMPTY
48595: LIST
48596: LIST
48597: PUSH
48598: LD_INT 2
48600: NEG
48601: PUSH
48602: LD_INT 0
48604: PUSH
48605: EMPTY
48606: LIST
48607: LIST
48608: PUSH
48609: LD_INT 2
48611: NEG
48612: PUSH
48613: LD_INT 1
48615: NEG
48616: PUSH
48617: EMPTY
48618: LIST
48619: LIST
48620: PUSH
48621: LD_INT 2
48623: NEG
48624: PUSH
48625: LD_INT 2
48627: NEG
48628: PUSH
48629: EMPTY
48630: LIST
48631: LIST
48632: PUSH
48633: LD_INT 1
48635: NEG
48636: PUSH
48637: LD_INT 2
48639: PUSH
48640: EMPTY
48641: LIST
48642: LIST
48643: PUSH
48644: LD_INT 2
48646: NEG
48647: PUSH
48648: LD_INT 1
48650: PUSH
48651: EMPTY
48652: LIST
48653: LIST
48654: PUSH
48655: LD_INT 3
48657: NEG
48658: PUSH
48659: LD_INT 1
48661: NEG
48662: PUSH
48663: EMPTY
48664: LIST
48665: LIST
48666: PUSH
48667: LD_INT 3
48669: NEG
48670: PUSH
48671: LD_INT 2
48673: NEG
48674: PUSH
48675: EMPTY
48676: LIST
48677: LIST
48678: PUSH
48679: EMPTY
48680: LIST
48681: LIST
48682: LIST
48683: LIST
48684: LIST
48685: LIST
48686: LIST
48687: LIST
48688: LIST
48689: LIST
48690: LIST
48691: LIST
48692: LIST
48693: LIST
48694: LIST
48695: LIST
48696: LIST
48697: LIST
48698: LIST
48699: LIST
48700: LIST
48701: LIST
48702: LIST
48703: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
48704: LD_ADDR_VAR 0 28
48708: PUSH
48709: LD_INT 0
48711: PUSH
48712: LD_INT 0
48714: PUSH
48715: EMPTY
48716: LIST
48717: LIST
48718: PUSH
48719: LD_INT 0
48721: PUSH
48722: LD_INT 1
48724: NEG
48725: PUSH
48726: EMPTY
48727: LIST
48728: LIST
48729: PUSH
48730: LD_INT 1
48732: PUSH
48733: LD_INT 0
48735: PUSH
48736: EMPTY
48737: LIST
48738: LIST
48739: PUSH
48740: LD_INT 1
48742: PUSH
48743: LD_INT 1
48745: PUSH
48746: EMPTY
48747: LIST
48748: LIST
48749: PUSH
48750: LD_INT 0
48752: PUSH
48753: LD_INT 1
48755: PUSH
48756: EMPTY
48757: LIST
48758: LIST
48759: PUSH
48760: LD_INT 1
48762: NEG
48763: PUSH
48764: LD_INT 0
48766: PUSH
48767: EMPTY
48768: LIST
48769: LIST
48770: PUSH
48771: LD_INT 1
48773: NEG
48774: PUSH
48775: LD_INT 1
48777: NEG
48778: PUSH
48779: EMPTY
48780: LIST
48781: LIST
48782: PUSH
48783: LD_INT 1
48785: NEG
48786: PUSH
48787: LD_INT 2
48789: NEG
48790: PUSH
48791: EMPTY
48792: LIST
48793: LIST
48794: PUSH
48795: LD_INT 0
48797: PUSH
48798: LD_INT 2
48800: NEG
48801: PUSH
48802: EMPTY
48803: LIST
48804: LIST
48805: PUSH
48806: LD_INT 1
48808: PUSH
48809: LD_INT 1
48811: NEG
48812: PUSH
48813: EMPTY
48814: LIST
48815: LIST
48816: PUSH
48817: LD_INT 2
48819: PUSH
48820: LD_INT 0
48822: PUSH
48823: EMPTY
48824: LIST
48825: LIST
48826: PUSH
48827: LD_INT 2
48829: PUSH
48830: LD_INT 1
48832: PUSH
48833: EMPTY
48834: LIST
48835: LIST
48836: PUSH
48837: LD_INT 2
48839: PUSH
48840: LD_INT 2
48842: PUSH
48843: EMPTY
48844: LIST
48845: LIST
48846: PUSH
48847: LD_INT 1
48849: PUSH
48850: LD_INT 2
48852: PUSH
48853: EMPTY
48854: LIST
48855: LIST
48856: PUSH
48857: LD_INT 0
48859: PUSH
48860: LD_INT 2
48862: PUSH
48863: EMPTY
48864: LIST
48865: LIST
48866: PUSH
48867: LD_INT 1
48869: NEG
48870: PUSH
48871: LD_INT 1
48873: PUSH
48874: EMPTY
48875: LIST
48876: LIST
48877: PUSH
48878: LD_INT 2
48880: NEG
48881: PUSH
48882: LD_INT 0
48884: PUSH
48885: EMPTY
48886: LIST
48887: LIST
48888: PUSH
48889: LD_INT 2
48891: NEG
48892: PUSH
48893: LD_INT 1
48895: NEG
48896: PUSH
48897: EMPTY
48898: LIST
48899: LIST
48900: PUSH
48901: LD_INT 2
48903: NEG
48904: PUSH
48905: LD_INT 2
48907: NEG
48908: PUSH
48909: EMPTY
48910: LIST
48911: LIST
48912: PUSH
48913: LD_INT 2
48915: NEG
48916: PUSH
48917: LD_INT 3
48919: NEG
48920: PUSH
48921: EMPTY
48922: LIST
48923: LIST
48924: PUSH
48925: LD_INT 1
48927: NEG
48928: PUSH
48929: LD_INT 3
48931: NEG
48932: PUSH
48933: EMPTY
48934: LIST
48935: LIST
48936: PUSH
48937: LD_INT 3
48939: NEG
48940: PUSH
48941: LD_INT 1
48943: NEG
48944: PUSH
48945: EMPTY
48946: LIST
48947: LIST
48948: PUSH
48949: LD_INT 3
48951: NEG
48952: PUSH
48953: LD_INT 2
48955: NEG
48956: PUSH
48957: EMPTY
48958: LIST
48959: LIST
48960: PUSH
48961: EMPTY
48962: LIST
48963: LIST
48964: LIST
48965: LIST
48966: LIST
48967: LIST
48968: LIST
48969: LIST
48970: LIST
48971: LIST
48972: LIST
48973: LIST
48974: LIST
48975: LIST
48976: LIST
48977: LIST
48978: LIST
48979: LIST
48980: LIST
48981: LIST
48982: LIST
48983: LIST
48984: LIST
48985: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
48986: LD_ADDR_VAR 0 29
48990: PUSH
48991: LD_INT 0
48993: PUSH
48994: LD_INT 0
48996: PUSH
48997: EMPTY
48998: LIST
48999: LIST
49000: PUSH
49001: LD_INT 0
49003: PUSH
49004: LD_INT 1
49006: NEG
49007: PUSH
49008: EMPTY
49009: LIST
49010: LIST
49011: PUSH
49012: LD_INT 1
49014: PUSH
49015: LD_INT 0
49017: PUSH
49018: EMPTY
49019: LIST
49020: LIST
49021: PUSH
49022: LD_INT 1
49024: PUSH
49025: LD_INT 1
49027: PUSH
49028: EMPTY
49029: LIST
49030: LIST
49031: PUSH
49032: LD_INT 0
49034: PUSH
49035: LD_INT 1
49037: PUSH
49038: EMPTY
49039: LIST
49040: LIST
49041: PUSH
49042: LD_INT 1
49044: NEG
49045: PUSH
49046: LD_INT 0
49048: PUSH
49049: EMPTY
49050: LIST
49051: LIST
49052: PUSH
49053: LD_INT 1
49055: NEG
49056: PUSH
49057: LD_INT 1
49059: NEG
49060: PUSH
49061: EMPTY
49062: LIST
49063: LIST
49064: PUSH
49065: LD_INT 1
49067: NEG
49068: PUSH
49069: LD_INT 2
49071: NEG
49072: PUSH
49073: EMPTY
49074: LIST
49075: LIST
49076: PUSH
49077: LD_INT 0
49079: PUSH
49080: LD_INT 2
49082: NEG
49083: PUSH
49084: EMPTY
49085: LIST
49086: LIST
49087: PUSH
49088: LD_INT 1
49090: PUSH
49091: LD_INT 1
49093: NEG
49094: PUSH
49095: EMPTY
49096: LIST
49097: LIST
49098: PUSH
49099: LD_INT 2
49101: PUSH
49102: LD_INT 0
49104: PUSH
49105: EMPTY
49106: LIST
49107: LIST
49108: PUSH
49109: LD_INT 2
49111: PUSH
49112: LD_INT 1
49114: PUSH
49115: EMPTY
49116: LIST
49117: LIST
49118: PUSH
49119: LD_INT 1
49121: PUSH
49122: LD_INT 2
49124: PUSH
49125: EMPTY
49126: LIST
49127: LIST
49128: PUSH
49129: LD_INT 0
49131: PUSH
49132: LD_INT 2
49134: PUSH
49135: EMPTY
49136: LIST
49137: LIST
49138: PUSH
49139: LD_INT 1
49141: NEG
49142: PUSH
49143: LD_INT 1
49145: PUSH
49146: EMPTY
49147: LIST
49148: LIST
49149: PUSH
49150: LD_INT 2
49152: NEG
49153: PUSH
49154: LD_INT 1
49156: NEG
49157: PUSH
49158: EMPTY
49159: LIST
49160: LIST
49161: PUSH
49162: LD_INT 2
49164: NEG
49165: PUSH
49166: LD_INT 2
49168: NEG
49169: PUSH
49170: EMPTY
49171: LIST
49172: LIST
49173: PUSH
49174: LD_INT 2
49176: NEG
49177: PUSH
49178: LD_INT 3
49180: NEG
49181: PUSH
49182: EMPTY
49183: LIST
49184: LIST
49185: PUSH
49186: LD_INT 2
49188: PUSH
49189: LD_INT 1
49191: NEG
49192: PUSH
49193: EMPTY
49194: LIST
49195: LIST
49196: PUSH
49197: LD_INT 3
49199: PUSH
49200: LD_INT 1
49202: PUSH
49203: EMPTY
49204: LIST
49205: LIST
49206: PUSH
49207: LD_INT 1
49209: PUSH
49210: LD_INT 3
49212: PUSH
49213: EMPTY
49214: LIST
49215: LIST
49216: PUSH
49217: LD_INT 1
49219: NEG
49220: PUSH
49221: LD_INT 2
49223: PUSH
49224: EMPTY
49225: LIST
49226: LIST
49227: PUSH
49228: LD_INT 3
49230: NEG
49231: PUSH
49232: LD_INT 2
49234: NEG
49235: PUSH
49236: EMPTY
49237: LIST
49238: LIST
49239: PUSH
49240: EMPTY
49241: LIST
49242: LIST
49243: LIST
49244: LIST
49245: LIST
49246: LIST
49247: LIST
49248: LIST
49249: LIST
49250: LIST
49251: LIST
49252: LIST
49253: LIST
49254: LIST
49255: LIST
49256: LIST
49257: LIST
49258: LIST
49259: LIST
49260: LIST
49261: LIST
49262: LIST
49263: LIST
49264: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49265: LD_ADDR_VAR 0 30
49269: PUSH
49270: LD_INT 0
49272: PUSH
49273: LD_INT 0
49275: PUSH
49276: EMPTY
49277: LIST
49278: LIST
49279: PUSH
49280: LD_INT 0
49282: PUSH
49283: LD_INT 1
49285: NEG
49286: PUSH
49287: EMPTY
49288: LIST
49289: LIST
49290: PUSH
49291: LD_INT 1
49293: PUSH
49294: LD_INT 0
49296: PUSH
49297: EMPTY
49298: LIST
49299: LIST
49300: PUSH
49301: LD_INT 1
49303: PUSH
49304: LD_INT 1
49306: PUSH
49307: EMPTY
49308: LIST
49309: LIST
49310: PUSH
49311: LD_INT 0
49313: PUSH
49314: LD_INT 1
49316: PUSH
49317: EMPTY
49318: LIST
49319: LIST
49320: PUSH
49321: LD_INT 1
49323: NEG
49324: PUSH
49325: LD_INT 0
49327: PUSH
49328: EMPTY
49329: LIST
49330: LIST
49331: PUSH
49332: LD_INT 1
49334: NEG
49335: PUSH
49336: LD_INT 1
49338: NEG
49339: PUSH
49340: EMPTY
49341: LIST
49342: LIST
49343: PUSH
49344: LD_INT 1
49346: NEG
49347: PUSH
49348: LD_INT 2
49350: NEG
49351: PUSH
49352: EMPTY
49353: LIST
49354: LIST
49355: PUSH
49356: LD_INT 0
49358: PUSH
49359: LD_INT 2
49361: NEG
49362: PUSH
49363: EMPTY
49364: LIST
49365: LIST
49366: PUSH
49367: LD_INT 1
49369: PUSH
49370: LD_INT 1
49372: NEG
49373: PUSH
49374: EMPTY
49375: LIST
49376: LIST
49377: PUSH
49378: LD_INT 2
49380: PUSH
49381: LD_INT 0
49383: PUSH
49384: EMPTY
49385: LIST
49386: LIST
49387: PUSH
49388: LD_INT 2
49390: PUSH
49391: LD_INT 1
49393: PUSH
49394: EMPTY
49395: LIST
49396: LIST
49397: PUSH
49398: LD_INT 2
49400: PUSH
49401: LD_INT 2
49403: PUSH
49404: EMPTY
49405: LIST
49406: LIST
49407: PUSH
49408: LD_INT 1
49410: PUSH
49411: LD_INT 2
49413: PUSH
49414: EMPTY
49415: LIST
49416: LIST
49417: PUSH
49418: LD_INT 1
49420: NEG
49421: PUSH
49422: LD_INT 1
49424: PUSH
49425: EMPTY
49426: LIST
49427: LIST
49428: PUSH
49429: LD_INT 2
49431: NEG
49432: PUSH
49433: LD_INT 0
49435: PUSH
49436: EMPTY
49437: LIST
49438: LIST
49439: PUSH
49440: LD_INT 2
49442: NEG
49443: PUSH
49444: LD_INT 1
49446: NEG
49447: PUSH
49448: EMPTY
49449: LIST
49450: LIST
49451: PUSH
49452: LD_INT 1
49454: NEG
49455: PUSH
49456: LD_INT 3
49458: NEG
49459: PUSH
49460: EMPTY
49461: LIST
49462: LIST
49463: PUSH
49464: LD_INT 1
49466: PUSH
49467: LD_INT 2
49469: NEG
49470: PUSH
49471: EMPTY
49472: LIST
49473: LIST
49474: PUSH
49475: LD_INT 3
49477: PUSH
49478: LD_INT 2
49480: PUSH
49481: EMPTY
49482: LIST
49483: LIST
49484: PUSH
49485: LD_INT 2
49487: PUSH
49488: LD_INT 3
49490: PUSH
49491: EMPTY
49492: LIST
49493: LIST
49494: PUSH
49495: LD_INT 2
49497: NEG
49498: PUSH
49499: LD_INT 1
49501: PUSH
49502: EMPTY
49503: LIST
49504: LIST
49505: PUSH
49506: LD_INT 3
49508: NEG
49509: PUSH
49510: LD_INT 1
49512: NEG
49513: PUSH
49514: EMPTY
49515: LIST
49516: LIST
49517: PUSH
49518: EMPTY
49519: LIST
49520: LIST
49521: LIST
49522: LIST
49523: LIST
49524: LIST
49525: LIST
49526: LIST
49527: LIST
49528: LIST
49529: LIST
49530: LIST
49531: LIST
49532: LIST
49533: LIST
49534: LIST
49535: LIST
49536: LIST
49537: LIST
49538: LIST
49539: LIST
49540: LIST
49541: LIST
49542: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49543: LD_ADDR_VAR 0 31
49547: PUSH
49548: LD_INT 0
49550: PUSH
49551: LD_INT 0
49553: PUSH
49554: EMPTY
49555: LIST
49556: LIST
49557: PUSH
49558: LD_INT 0
49560: PUSH
49561: LD_INT 1
49563: NEG
49564: PUSH
49565: EMPTY
49566: LIST
49567: LIST
49568: PUSH
49569: LD_INT 1
49571: PUSH
49572: LD_INT 0
49574: PUSH
49575: EMPTY
49576: LIST
49577: LIST
49578: PUSH
49579: LD_INT 1
49581: PUSH
49582: LD_INT 1
49584: PUSH
49585: EMPTY
49586: LIST
49587: LIST
49588: PUSH
49589: LD_INT 0
49591: PUSH
49592: LD_INT 1
49594: PUSH
49595: EMPTY
49596: LIST
49597: LIST
49598: PUSH
49599: LD_INT 1
49601: NEG
49602: PUSH
49603: LD_INT 0
49605: PUSH
49606: EMPTY
49607: LIST
49608: LIST
49609: PUSH
49610: LD_INT 1
49612: NEG
49613: PUSH
49614: LD_INT 1
49616: NEG
49617: PUSH
49618: EMPTY
49619: LIST
49620: LIST
49621: PUSH
49622: LD_INT 1
49624: NEG
49625: PUSH
49626: LD_INT 2
49628: NEG
49629: PUSH
49630: EMPTY
49631: LIST
49632: LIST
49633: PUSH
49634: LD_INT 1
49636: PUSH
49637: LD_INT 1
49639: NEG
49640: PUSH
49641: EMPTY
49642: LIST
49643: LIST
49644: PUSH
49645: LD_INT 2
49647: PUSH
49648: LD_INT 0
49650: PUSH
49651: EMPTY
49652: LIST
49653: LIST
49654: PUSH
49655: LD_INT 2
49657: PUSH
49658: LD_INT 1
49660: PUSH
49661: EMPTY
49662: LIST
49663: LIST
49664: PUSH
49665: LD_INT 2
49667: PUSH
49668: LD_INT 2
49670: PUSH
49671: EMPTY
49672: LIST
49673: LIST
49674: PUSH
49675: LD_INT 1
49677: PUSH
49678: LD_INT 2
49680: PUSH
49681: EMPTY
49682: LIST
49683: LIST
49684: PUSH
49685: LD_INT 0
49687: PUSH
49688: LD_INT 2
49690: PUSH
49691: EMPTY
49692: LIST
49693: LIST
49694: PUSH
49695: LD_INT 1
49697: NEG
49698: PUSH
49699: LD_INT 1
49701: PUSH
49702: EMPTY
49703: LIST
49704: LIST
49705: PUSH
49706: LD_INT 2
49708: NEG
49709: PUSH
49710: LD_INT 1
49712: NEG
49713: PUSH
49714: EMPTY
49715: LIST
49716: LIST
49717: PUSH
49718: LD_INT 2
49720: NEG
49721: PUSH
49722: LD_INT 2
49724: NEG
49725: PUSH
49726: EMPTY
49727: LIST
49728: LIST
49729: PUSH
49730: LD_INT 2
49732: NEG
49733: PUSH
49734: LD_INT 3
49736: NEG
49737: PUSH
49738: EMPTY
49739: LIST
49740: LIST
49741: PUSH
49742: LD_INT 2
49744: PUSH
49745: LD_INT 1
49747: NEG
49748: PUSH
49749: EMPTY
49750: LIST
49751: LIST
49752: PUSH
49753: LD_INT 3
49755: PUSH
49756: LD_INT 1
49758: PUSH
49759: EMPTY
49760: LIST
49761: LIST
49762: PUSH
49763: LD_INT 1
49765: PUSH
49766: LD_INT 3
49768: PUSH
49769: EMPTY
49770: LIST
49771: LIST
49772: PUSH
49773: LD_INT 1
49775: NEG
49776: PUSH
49777: LD_INT 2
49779: PUSH
49780: EMPTY
49781: LIST
49782: LIST
49783: PUSH
49784: LD_INT 3
49786: NEG
49787: PUSH
49788: LD_INT 2
49790: NEG
49791: PUSH
49792: EMPTY
49793: LIST
49794: LIST
49795: PUSH
49796: EMPTY
49797: LIST
49798: LIST
49799: LIST
49800: LIST
49801: LIST
49802: LIST
49803: LIST
49804: LIST
49805: LIST
49806: LIST
49807: LIST
49808: LIST
49809: LIST
49810: LIST
49811: LIST
49812: LIST
49813: LIST
49814: LIST
49815: LIST
49816: LIST
49817: LIST
49818: LIST
49819: LIST
49820: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49821: LD_ADDR_VAR 0 32
49825: PUSH
49826: LD_INT 0
49828: PUSH
49829: LD_INT 0
49831: PUSH
49832: EMPTY
49833: LIST
49834: LIST
49835: PUSH
49836: LD_INT 0
49838: PUSH
49839: LD_INT 1
49841: NEG
49842: PUSH
49843: EMPTY
49844: LIST
49845: LIST
49846: PUSH
49847: LD_INT 1
49849: PUSH
49850: LD_INT 0
49852: PUSH
49853: EMPTY
49854: LIST
49855: LIST
49856: PUSH
49857: LD_INT 1
49859: PUSH
49860: LD_INT 1
49862: PUSH
49863: EMPTY
49864: LIST
49865: LIST
49866: PUSH
49867: LD_INT 0
49869: PUSH
49870: LD_INT 1
49872: PUSH
49873: EMPTY
49874: LIST
49875: LIST
49876: PUSH
49877: LD_INT 1
49879: NEG
49880: PUSH
49881: LD_INT 0
49883: PUSH
49884: EMPTY
49885: LIST
49886: LIST
49887: PUSH
49888: LD_INT 1
49890: NEG
49891: PUSH
49892: LD_INT 1
49894: NEG
49895: PUSH
49896: EMPTY
49897: LIST
49898: LIST
49899: PUSH
49900: LD_INT 1
49902: NEG
49903: PUSH
49904: LD_INT 2
49906: NEG
49907: PUSH
49908: EMPTY
49909: LIST
49910: LIST
49911: PUSH
49912: LD_INT 0
49914: PUSH
49915: LD_INT 2
49917: NEG
49918: PUSH
49919: EMPTY
49920: LIST
49921: LIST
49922: PUSH
49923: LD_INT 1
49925: PUSH
49926: LD_INT 1
49928: NEG
49929: PUSH
49930: EMPTY
49931: LIST
49932: LIST
49933: PUSH
49934: LD_INT 2
49936: PUSH
49937: LD_INT 1
49939: PUSH
49940: EMPTY
49941: LIST
49942: LIST
49943: PUSH
49944: LD_INT 2
49946: PUSH
49947: LD_INT 2
49949: PUSH
49950: EMPTY
49951: LIST
49952: LIST
49953: PUSH
49954: LD_INT 1
49956: PUSH
49957: LD_INT 2
49959: PUSH
49960: EMPTY
49961: LIST
49962: LIST
49963: PUSH
49964: LD_INT 0
49966: PUSH
49967: LD_INT 2
49969: PUSH
49970: EMPTY
49971: LIST
49972: LIST
49973: PUSH
49974: LD_INT 1
49976: NEG
49977: PUSH
49978: LD_INT 1
49980: PUSH
49981: EMPTY
49982: LIST
49983: LIST
49984: PUSH
49985: LD_INT 2
49987: NEG
49988: PUSH
49989: LD_INT 0
49991: PUSH
49992: EMPTY
49993: LIST
49994: LIST
49995: PUSH
49996: LD_INT 2
49998: NEG
49999: PUSH
50000: LD_INT 1
50002: NEG
50003: PUSH
50004: EMPTY
50005: LIST
50006: LIST
50007: PUSH
50008: LD_INT 1
50010: NEG
50011: PUSH
50012: LD_INT 3
50014: NEG
50015: PUSH
50016: EMPTY
50017: LIST
50018: LIST
50019: PUSH
50020: LD_INT 1
50022: PUSH
50023: LD_INT 2
50025: NEG
50026: PUSH
50027: EMPTY
50028: LIST
50029: LIST
50030: PUSH
50031: LD_INT 3
50033: PUSH
50034: LD_INT 2
50036: PUSH
50037: EMPTY
50038: LIST
50039: LIST
50040: PUSH
50041: LD_INT 2
50043: PUSH
50044: LD_INT 3
50046: PUSH
50047: EMPTY
50048: LIST
50049: LIST
50050: PUSH
50051: LD_INT 2
50053: NEG
50054: PUSH
50055: LD_INT 1
50057: PUSH
50058: EMPTY
50059: LIST
50060: LIST
50061: PUSH
50062: LD_INT 3
50064: NEG
50065: PUSH
50066: LD_INT 1
50068: NEG
50069: PUSH
50070: EMPTY
50071: LIST
50072: LIST
50073: PUSH
50074: EMPTY
50075: LIST
50076: LIST
50077: LIST
50078: LIST
50079: LIST
50080: LIST
50081: LIST
50082: LIST
50083: LIST
50084: LIST
50085: LIST
50086: LIST
50087: LIST
50088: LIST
50089: LIST
50090: LIST
50091: LIST
50092: LIST
50093: LIST
50094: LIST
50095: LIST
50096: LIST
50097: LIST
50098: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
50099: LD_ADDR_VAR 0 33
50103: PUSH
50104: LD_INT 0
50106: PUSH
50107: LD_INT 0
50109: PUSH
50110: EMPTY
50111: LIST
50112: LIST
50113: PUSH
50114: LD_INT 0
50116: PUSH
50117: LD_INT 1
50119: NEG
50120: PUSH
50121: EMPTY
50122: LIST
50123: LIST
50124: PUSH
50125: LD_INT 1
50127: PUSH
50128: LD_INT 0
50130: PUSH
50131: EMPTY
50132: LIST
50133: LIST
50134: PUSH
50135: LD_INT 1
50137: PUSH
50138: LD_INT 1
50140: PUSH
50141: EMPTY
50142: LIST
50143: LIST
50144: PUSH
50145: LD_INT 0
50147: PUSH
50148: LD_INT 1
50150: PUSH
50151: EMPTY
50152: LIST
50153: LIST
50154: PUSH
50155: LD_INT 1
50157: NEG
50158: PUSH
50159: LD_INT 0
50161: PUSH
50162: EMPTY
50163: LIST
50164: LIST
50165: PUSH
50166: LD_INT 1
50168: NEG
50169: PUSH
50170: LD_INT 1
50172: NEG
50173: PUSH
50174: EMPTY
50175: LIST
50176: LIST
50177: PUSH
50178: LD_INT 1
50180: NEG
50181: PUSH
50182: LD_INT 2
50184: NEG
50185: PUSH
50186: EMPTY
50187: LIST
50188: LIST
50189: PUSH
50190: LD_INT 1
50192: PUSH
50193: LD_INT 1
50195: NEG
50196: PUSH
50197: EMPTY
50198: LIST
50199: LIST
50200: PUSH
50201: LD_INT 2
50203: PUSH
50204: LD_INT 0
50206: PUSH
50207: EMPTY
50208: LIST
50209: LIST
50210: PUSH
50211: LD_INT 2
50213: PUSH
50214: LD_INT 1
50216: PUSH
50217: EMPTY
50218: LIST
50219: LIST
50220: PUSH
50221: LD_INT 1
50223: PUSH
50224: LD_INT 2
50226: PUSH
50227: EMPTY
50228: LIST
50229: LIST
50230: PUSH
50231: LD_INT 0
50233: PUSH
50234: LD_INT 2
50236: PUSH
50237: EMPTY
50238: LIST
50239: LIST
50240: PUSH
50241: LD_INT 1
50243: NEG
50244: PUSH
50245: LD_INT 1
50247: PUSH
50248: EMPTY
50249: LIST
50250: LIST
50251: PUSH
50252: LD_INT 2
50254: NEG
50255: PUSH
50256: LD_INT 0
50258: PUSH
50259: EMPTY
50260: LIST
50261: LIST
50262: PUSH
50263: LD_INT 2
50265: NEG
50266: PUSH
50267: LD_INT 1
50269: NEG
50270: PUSH
50271: EMPTY
50272: LIST
50273: LIST
50274: PUSH
50275: LD_INT 2
50277: NEG
50278: PUSH
50279: LD_INT 2
50281: NEG
50282: PUSH
50283: EMPTY
50284: LIST
50285: LIST
50286: PUSH
50287: LD_INT 2
50289: NEG
50290: PUSH
50291: LD_INT 3
50293: NEG
50294: PUSH
50295: EMPTY
50296: LIST
50297: LIST
50298: PUSH
50299: LD_INT 2
50301: PUSH
50302: LD_INT 1
50304: NEG
50305: PUSH
50306: EMPTY
50307: LIST
50308: LIST
50309: PUSH
50310: LD_INT 3
50312: PUSH
50313: LD_INT 1
50315: PUSH
50316: EMPTY
50317: LIST
50318: LIST
50319: PUSH
50320: LD_INT 1
50322: PUSH
50323: LD_INT 3
50325: PUSH
50326: EMPTY
50327: LIST
50328: LIST
50329: PUSH
50330: LD_INT 1
50332: NEG
50333: PUSH
50334: LD_INT 2
50336: PUSH
50337: EMPTY
50338: LIST
50339: LIST
50340: PUSH
50341: LD_INT 3
50343: NEG
50344: PUSH
50345: LD_INT 2
50347: NEG
50348: PUSH
50349: EMPTY
50350: LIST
50351: LIST
50352: PUSH
50353: EMPTY
50354: LIST
50355: LIST
50356: LIST
50357: LIST
50358: LIST
50359: LIST
50360: LIST
50361: LIST
50362: LIST
50363: LIST
50364: LIST
50365: LIST
50366: LIST
50367: LIST
50368: LIST
50369: LIST
50370: LIST
50371: LIST
50372: LIST
50373: LIST
50374: LIST
50375: LIST
50376: LIST
50377: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50378: LD_ADDR_VAR 0 34
50382: PUSH
50383: LD_INT 0
50385: PUSH
50386: LD_INT 0
50388: PUSH
50389: EMPTY
50390: LIST
50391: LIST
50392: PUSH
50393: LD_INT 0
50395: PUSH
50396: LD_INT 1
50398: NEG
50399: PUSH
50400: EMPTY
50401: LIST
50402: LIST
50403: PUSH
50404: LD_INT 1
50406: PUSH
50407: LD_INT 0
50409: PUSH
50410: EMPTY
50411: LIST
50412: LIST
50413: PUSH
50414: LD_INT 1
50416: PUSH
50417: LD_INT 1
50419: PUSH
50420: EMPTY
50421: LIST
50422: LIST
50423: PUSH
50424: LD_INT 0
50426: PUSH
50427: LD_INT 1
50429: PUSH
50430: EMPTY
50431: LIST
50432: LIST
50433: PUSH
50434: LD_INT 1
50436: NEG
50437: PUSH
50438: LD_INT 0
50440: PUSH
50441: EMPTY
50442: LIST
50443: LIST
50444: PUSH
50445: LD_INT 1
50447: NEG
50448: PUSH
50449: LD_INT 1
50451: NEG
50452: PUSH
50453: EMPTY
50454: LIST
50455: LIST
50456: PUSH
50457: LD_INT 1
50459: NEG
50460: PUSH
50461: LD_INT 2
50463: NEG
50464: PUSH
50465: EMPTY
50466: LIST
50467: LIST
50468: PUSH
50469: LD_INT 0
50471: PUSH
50472: LD_INT 2
50474: NEG
50475: PUSH
50476: EMPTY
50477: LIST
50478: LIST
50479: PUSH
50480: LD_INT 1
50482: PUSH
50483: LD_INT 1
50485: NEG
50486: PUSH
50487: EMPTY
50488: LIST
50489: LIST
50490: PUSH
50491: LD_INT 2
50493: PUSH
50494: LD_INT 1
50496: PUSH
50497: EMPTY
50498: LIST
50499: LIST
50500: PUSH
50501: LD_INT 2
50503: PUSH
50504: LD_INT 2
50506: PUSH
50507: EMPTY
50508: LIST
50509: LIST
50510: PUSH
50511: LD_INT 1
50513: PUSH
50514: LD_INT 2
50516: PUSH
50517: EMPTY
50518: LIST
50519: LIST
50520: PUSH
50521: LD_INT 1
50523: NEG
50524: PUSH
50525: LD_INT 1
50527: PUSH
50528: EMPTY
50529: LIST
50530: LIST
50531: PUSH
50532: LD_INT 2
50534: NEG
50535: PUSH
50536: LD_INT 0
50538: PUSH
50539: EMPTY
50540: LIST
50541: LIST
50542: PUSH
50543: LD_INT 2
50545: NEG
50546: PUSH
50547: LD_INT 1
50549: NEG
50550: PUSH
50551: EMPTY
50552: LIST
50553: LIST
50554: PUSH
50555: LD_INT 2
50557: NEG
50558: PUSH
50559: LD_INT 2
50561: NEG
50562: PUSH
50563: EMPTY
50564: LIST
50565: LIST
50566: PUSH
50567: LD_INT 1
50569: NEG
50570: PUSH
50571: LD_INT 3
50573: NEG
50574: PUSH
50575: EMPTY
50576: LIST
50577: LIST
50578: PUSH
50579: LD_INT 1
50581: PUSH
50582: LD_INT 2
50584: NEG
50585: PUSH
50586: EMPTY
50587: LIST
50588: LIST
50589: PUSH
50590: LD_INT 3
50592: PUSH
50593: LD_INT 2
50595: PUSH
50596: EMPTY
50597: LIST
50598: LIST
50599: PUSH
50600: LD_INT 2
50602: PUSH
50603: LD_INT 3
50605: PUSH
50606: EMPTY
50607: LIST
50608: LIST
50609: PUSH
50610: LD_INT 2
50612: NEG
50613: PUSH
50614: LD_INT 1
50616: PUSH
50617: EMPTY
50618: LIST
50619: LIST
50620: PUSH
50621: LD_INT 3
50623: NEG
50624: PUSH
50625: LD_INT 1
50627: NEG
50628: PUSH
50629: EMPTY
50630: LIST
50631: LIST
50632: PUSH
50633: EMPTY
50634: LIST
50635: LIST
50636: LIST
50637: LIST
50638: LIST
50639: LIST
50640: LIST
50641: LIST
50642: LIST
50643: LIST
50644: LIST
50645: LIST
50646: LIST
50647: LIST
50648: LIST
50649: LIST
50650: LIST
50651: LIST
50652: LIST
50653: LIST
50654: LIST
50655: LIST
50656: LIST
50657: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
50658: LD_ADDR_VAR 0 35
50662: PUSH
50663: LD_INT 0
50665: PUSH
50666: LD_INT 0
50668: PUSH
50669: EMPTY
50670: LIST
50671: LIST
50672: PUSH
50673: LD_INT 0
50675: PUSH
50676: LD_INT 1
50678: NEG
50679: PUSH
50680: EMPTY
50681: LIST
50682: LIST
50683: PUSH
50684: LD_INT 1
50686: PUSH
50687: LD_INT 0
50689: PUSH
50690: EMPTY
50691: LIST
50692: LIST
50693: PUSH
50694: LD_INT 1
50696: PUSH
50697: LD_INT 1
50699: PUSH
50700: EMPTY
50701: LIST
50702: LIST
50703: PUSH
50704: LD_INT 0
50706: PUSH
50707: LD_INT 1
50709: PUSH
50710: EMPTY
50711: LIST
50712: LIST
50713: PUSH
50714: LD_INT 1
50716: NEG
50717: PUSH
50718: LD_INT 0
50720: PUSH
50721: EMPTY
50722: LIST
50723: LIST
50724: PUSH
50725: LD_INT 1
50727: NEG
50728: PUSH
50729: LD_INT 1
50731: NEG
50732: PUSH
50733: EMPTY
50734: LIST
50735: LIST
50736: PUSH
50737: LD_INT 2
50739: PUSH
50740: LD_INT 1
50742: PUSH
50743: EMPTY
50744: LIST
50745: LIST
50746: PUSH
50747: LD_INT 2
50749: NEG
50750: PUSH
50751: LD_INT 1
50753: NEG
50754: PUSH
50755: EMPTY
50756: LIST
50757: LIST
50758: PUSH
50759: EMPTY
50760: LIST
50761: LIST
50762: LIST
50763: LIST
50764: LIST
50765: LIST
50766: LIST
50767: LIST
50768: LIST
50769: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
50770: LD_ADDR_VAR 0 36
50774: PUSH
50775: LD_INT 0
50777: PUSH
50778: LD_INT 0
50780: PUSH
50781: EMPTY
50782: LIST
50783: LIST
50784: PUSH
50785: LD_INT 0
50787: PUSH
50788: LD_INT 1
50790: NEG
50791: PUSH
50792: EMPTY
50793: LIST
50794: LIST
50795: PUSH
50796: LD_INT 1
50798: PUSH
50799: LD_INT 0
50801: PUSH
50802: EMPTY
50803: LIST
50804: LIST
50805: PUSH
50806: LD_INT 1
50808: PUSH
50809: LD_INT 1
50811: PUSH
50812: EMPTY
50813: LIST
50814: LIST
50815: PUSH
50816: LD_INT 0
50818: PUSH
50819: LD_INT 1
50821: PUSH
50822: EMPTY
50823: LIST
50824: LIST
50825: PUSH
50826: LD_INT 1
50828: NEG
50829: PUSH
50830: LD_INT 0
50832: PUSH
50833: EMPTY
50834: LIST
50835: LIST
50836: PUSH
50837: LD_INT 1
50839: NEG
50840: PUSH
50841: LD_INT 1
50843: NEG
50844: PUSH
50845: EMPTY
50846: LIST
50847: LIST
50848: PUSH
50849: LD_INT 1
50851: NEG
50852: PUSH
50853: LD_INT 2
50855: NEG
50856: PUSH
50857: EMPTY
50858: LIST
50859: LIST
50860: PUSH
50861: LD_INT 1
50863: PUSH
50864: LD_INT 2
50866: PUSH
50867: EMPTY
50868: LIST
50869: LIST
50870: PUSH
50871: EMPTY
50872: LIST
50873: LIST
50874: LIST
50875: LIST
50876: LIST
50877: LIST
50878: LIST
50879: LIST
50880: LIST
50881: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
50882: LD_ADDR_VAR 0 37
50886: PUSH
50887: LD_INT 0
50889: PUSH
50890: LD_INT 0
50892: PUSH
50893: EMPTY
50894: LIST
50895: LIST
50896: PUSH
50897: LD_INT 0
50899: PUSH
50900: LD_INT 1
50902: NEG
50903: PUSH
50904: EMPTY
50905: LIST
50906: LIST
50907: PUSH
50908: LD_INT 1
50910: PUSH
50911: LD_INT 0
50913: PUSH
50914: EMPTY
50915: LIST
50916: LIST
50917: PUSH
50918: LD_INT 1
50920: PUSH
50921: LD_INT 1
50923: PUSH
50924: EMPTY
50925: LIST
50926: LIST
50927: PUSH
50928: LD_INT 0
50930: PUSH
50931: LD_INT 1
50933: PUSH
50934: EMPTY
50935: LIST
50936: LIST
50937: PUSH
50938: LD_INT 1
50940: NEG
50941: PUSH
50942: LD_INT 0
50944: PUSH
50945: EMPTY
50946: LIST
50947: LIST
50948: PUSH
50949: LD_INT 1
50951: NEG
50952: PUSH
50953: LD_INT 1
50955: NEG
50956: PUSH
50957: EMPTY
50958: LIST
50959: LIST
50960: PUSH
50961: LD_INT 1
50963: PUSH
50964: LD_INT 1
50966: NEG
50967: PUSH
50968: EMPTY
50969: LIST
50970: LIST
50971: PUSH
50972: LD_INT 1
50974: NEG
50975: PUSH
50976: LD_INT 1
50978: PUSH
50979: EMPTY
50980: LIST
50981: LIST
50982: PUSH
50983: EMPTY
50984: LIST
50985: LIST
50986: LIST
50987: LIST
50988: LIST
50989: LIST
50990: LIST
50991: LIST
50992: LIST
50993: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
50994: LD_ADDR_VAR 0 38
50998: PUSH
50999: LD_INT 0
51001: PUSH
51002: LD_INT 0
51004: PUSH
51005: EMPTY
51006: LIST
51007: LIST
51008: PUSH
51009: LD_INT 0
51011: PUSH
51012: LD_INT 1
51014: NEG
51015: PUSH
51016: EMPTY
51017: LIST
51018: LIST
51019: PUSH
51020: LD_INT 1
51022: PUSH
51023: LD_INT 0
51025: PUSH
51026: EMPTY
51027: LIST
51028: LIST
51029: PUSH
51030: LD_INT 1
51032: PUSH
51033: LD_INT 1
51035: PUSH
51036: EMPTY
51037: LIST
51038: LIST
51039: PUSH
51040: LD_INT 0
51042: PUSH
51043: LD_INT 1
51045: PUSH
51046: EMPTY
51047: LIST
51048: LIST
51049: PUSH
51050: LD_INT 1
51052: NEG
51053: PUSH
51054: LD_INT 0
51056: PUSH
51057: EMPTY
51058: LIST
51059: LIST
51060: PUSH
51061: LD_INT 1
51063: NEG
51064: PUSH
51065: LD_INT 1
51067: NEG
51068: PUSH
51069: EMPTY
51070: LIST
51071: LIST
51072: PUSH
51073: LD_INT 2
51075: PUSH
51076: LD_INT 1
51078: PUSH
51079: EMPTY
51080: LIST
51081: LIST
51082: PUSH
51083: LD_INT 2
51085: NEG
51086: PUSH
51087: LD_INT 1
51089: NEG
51090: PUSH
51091: EMPTY
51092: LIST
51093: LIST
51094: PUSH
51095: EMPTY
51096: LIST
51097: LIST
51098: LIST
51099: LIST
51100: LIST
51101: LIST
51102: LIST
51103: LIST
51104: LIST
51105: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
51106: LD_ADDR_VAR 0 39
51110: PUSH
51111: LD_INT 0
51113: PUSH
51114: LD_INT 0
51116: PUSH
51117: EMPTY
51118: LIST
51119: LIST
51120: PUSH
51121: LD_INT 0
51123: PUSH
51124: LD_INT 1
51126: NEG
51127: PUSH
51128: EMPTY
51129: LIST
51130: LIST
51131: PUSH
51132: LD_INT 1
51134: PUSH
51135: LD_INT 0
51137: PUSH
51138: EMPTY
51139: LIST
51140: LIST
51141: PUSH
51142: LD_INT 1
51144: PUSH
51145: LD_INT 1
51147: PUSH
51148: EMPTY
51149: LIST
51150: LIST
51151: PUSH
51152: LD_INT 0
51154: PUSH
51155: LD_INT 1
51157: PUSH
51158: EMPTY
51159: LIST
51160: LIST
51161: PUSH
51162: LD_INT 1
51164: NEG
51165: PUSH
51166: LD_INT 0
51168: PUSH
51169: EMPTY
51170: LIST
51171: LIST
51172: PUSH
51173: LD_INT 1
51175: NEG
51176: PUSH
51177: LD_INT 1
51179: NEG
51180: PUSH
51181: EMPTY
51182: LIST
51183: LIST
51184: PUSH
51185: LD_INT 1
51187: NEG
51188: PUSH
51189: LD_INT 2
51191: NEG
51192: PUSH
51193: EMPTY
51194: LIST
51195: LIST
51196: PUSH
51197: LD_INT 1
51199: PUSH
51200: LD_INT 2
51202: PUSH
51203: EMPTY
51204: LIST
51205: LIST
51206: PUSH
51207: EMPTY
51208: LIST
51209: LIST
51210: LIST
51211: LIST
51212: LIST
51213: LIST
51214: LIST
51215: LIST
51216: LIST
51217: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
51218: LD_ADDR_VAR 0 40
51222: PUSH
51223: LD_INT 0
51225: PUSH
51226: LD_INT 0
51228: PUSH
51229: EMPTY
51230: LIST
51231: LIST
51232: PUSH
51233: LD_INT 0
51235: PUSH
51236: LD_INT 1
51238: NEG
51239: PUSH
51240: EMPTY
51241: LIST
51242: LIST
51243: PUSH
51244: LD_INT 1
51246: PUSH
51247: LD_INT 0
51249: PUSH
51250: EMPTY
51251: LIST
51252: LIST
51253: PUSH
51254: LD_INT 1
51256: PUSH
51257: LD_INT 1
51259: PUSH
51260: EMPTY
51261: LIST
51262: LIST
51263: PUSH
51264: LD_INT 0
51266: PUSH
51267: LD_INT 1
51269: PUSH
51270: EMPTY
51271: LIST
51272: LIST
51273: PUSH
51274: LD_INT 1
51276: NEG
51277: PUSH
51278: LD_INT 0
51280: PUSH
51281: EMPTY
51282: LIST
51283: LIST
51284: PUSH
51285: LD_INT 1
51287: NEG
51288: PUSH
51289: LD_INT 1
51291: NEG
51292: PUSH
51293: EMPTY
51294: LIST
51295: LIST
51296: PUSH
51297: LD_INT 1
51299: PUSH
51300: LD_INT 1
51302: NEG
51303: PUSH
51304: EMPTY
51305: LIST
51306: LIST
51307: PUSH
51308: LD_INT 1
51310: NEG
51311: PUSH
51312: LD_INT 1
51314: PUSH
51315: EMPTY
51316: LIST
51317: LIST
51318: PUSH
51319: EMPTY
51320: LIST
51321: LIST
51322: LIST
51323: LIST
51324: LIST
51325: LIST
51326: LIST
51327: LIST
51328: LIST
51329: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51330: LD_ADDR_VAR 0 41
51334: PUSH
51335: LD_INT 0
51337: PUSH
51338: LD_INT 0
51340: PUSH
51341: EMPTY
51342: LIST
51343: LIST
51344: PUSH
51345: LD_INT 0
51347: PUSH
51348: LD_INT 1
51350: NEG
51351: PUSH
51352: EMPTY
51353: LIST
51354: LIST
51355: PUSH
51356: LD_INT 1
51358: PUSH
51359: LD_INT 0
51361: PUSH
51362: EMPTY
51363: LIST
51364: LIST
51365: PUSH
51366: LD_INT 1
51368: PUSH
51369: LD_INT 1
51371: PUSH
51372: EMPTY
51373: LIST
51374: LIST
51375: PUSH
51376: LD_INT 0
51378: PUSH
51379: LD_INT 1
51381: PUSH
51382: EMPTY
51383: LIST
51384: LIST
51385: PUSH
51386: LD_INT 1
51388: NEG
51389: PUSH
51390: LD_INT 0
51392: PUSH
51393: EMPTY
51394: LIST
51395: LIST
51396: PUSH
51397: LD_INT 1
51399: NEG
51400: PUSH
51401: LD_INT 1
51403: NEG
51404: PUSH
51405: EMPTY
51406: LIST
51407: LIST
51408: PUSH
51409: LD_INT 1
51411: NEG
51412: PUSH
51413: LD_INT 2
51415: NEG
51416: PUSH
51417: EMPTY
51418: LIST
51419: LIST
51420: PUSH
51421: LD_INT 1
51423: PUSH
51424: LD_INT 1
51426: NEG
51427: PUSH
51428: EMPTY
51429: LIST
51430: LIST
51431: PUSH
51432: LD_INT 2
51434: PUSH
51435: LD_INT 0
51437: PUSH
51438: EMPTY
51439: LIST
51440: LIST
51441: PUSH
51442: LD_INT 2
51444: PUSH
51445: LD_INT 1
51447: PUSH
51448: EMPTY
51449: LIST
51450: LIST
51451: PUSH
51452: LD_INT 2
51454: PUSH
51455: LD_INT 2
51457: PUSH
51458: EMPTY
51459: LIST
51460: LIST
51461: PUSH
51462: LD_INT 1
51464: PUSH
51465: LD_INT 2
51467: PUSH
51468: EMPTY
51469: LIST
51470: LIST
51471: PUSH
51472: LD_INT 1
51474: NEG
51475: PUSH
51476: LD_INT 1
51478: PUSH
51479: EMPTY
51480: LIST
51481: LIST
51482: PUSH
51483: LD_INT 2
51485: NEG
51486: PUSH
51487: LD_INT 0
51489: PUSH
51490: EMPTY
51491: LIST
51492: LIST
51493: PUSH
51494: LD_INT 2
51496: NEG
51497: PUSH
51498: LD_INT 1
51500: NEG
51501: PUSH
51502: EMPTY
51503: LIST
51504: LIST
51505: PUSH
51506: LD_INT 2
51508: NEG
51509: PUSH
51510: LD_INT 2
51512: NEG
51513: PUSH
51514: EMPTY
51515: LIST
51516: LIST
51517: PUSH
51518: LD_INT 2
51520: NEG
51521: PUSH
51522: LD_INT 3
51524: NEG
51525: PUSH
51526: EMPTY
51527: LIST
51528: LIST
51529: PUSH
51530: LD_INT 2
51532: PUSH
51533: LD_INT 1
51535: NEG
51536: PUSH
51537: EMPTY
51538: LIST
51539: LIST
51540: PUSH
51541: LD_INT 3
51543: PUSH
51544: LD_INT 0
51546: PUSH
51547: EMPTY
51548: LIST
51549: LIST
51550: PUSH
51551: LD_INT 3
51553: PUSH
51554: LD_INT 1
51556: PUSH
51557: EMPTY
51558: LIST
51559: LIST
51560: PUSH
51561: LD_INT 3
51563: PUSH
51564: LD_INT 2
51566: PUSH
51567: EMPTY
51568: LIST
51569: LIST
51570: PUSH
51571: LD_INT 3
51573: PUSH
51574: LD_INT 3
51576: PUSH
51577: EMPTY
51578: LIST
51579: LIST
51580: PUSH
51581: LD_INT 2
51583: PUSH
51584: LD_INT 3
51586: PUSH
51587: EMPTY
51588: LIST
51589: LIST
51590: PUSH
51591: LD_INT 2
51593: NEG
51594: PUSH
51595: LD_INT 1
51597: PUSH
51598: EMPTY
51599: LIST
51600: LIST
51601: PUSH
51602: LD_INT 3
51604: NEG
51605: PUSH
51606: LD_INT 0
51608: PUSH
51609: EMPTY
51610: LIST
51611: LIST
51612: PUSH
51613: LD_INT 3
51615: NEG
51616: PUSH
51617: LD_INT 1
51619: NEG
51620: PUSH
51621: EMPTY
51622: LIST
51623: LIST
51624: PUSH
51625: LD_INT 3
51627: NEG
51628: PUSH
51629: LD_INT 2
51631: NEG
51632: PUSH
51633: EMPTY
51634: LIST
51635: LIST
51636: PUSH
51637: LD_INT 3
51639: NEG
51640: PUSH
51641: LD_INT 3
51643: NEG
51644: PUSH
51645: EMPTY
51646: LIST
51647: LIST
51648: PUSH
51649: EMPTY
51650: LIST
51651: LIST
51652: LIST
51653: LIST
51654: LIST
51655: LIST
51656: LIST
51657: LIST
51658: LIST
51659: LIST
51660: LIST
51661: LIST
51662: LIST
51663: LIST
51664: LIST
51665: LIST
51666: LIST
51667: LIST
51668: LIST
51669: LIST
51670: LIST
51671: LIST
51672: LIST
51673: LIST
51674: LIST
51675: LIST
51676: LIST
51677: LIST
51678: LIST
51679: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51680: LD_ADDR_VAR 0 42
51684: PUSH
51685: LD_INT 0
51687: PUSH
51688: LD_INT 0
51690: PUSH
51691: EMPTY
51692: LIST
51693: LIST
51694: PUSH
51695: LD_INT 0
51697: PUSH
51698: LD_INT 1
51700: NEG
51701: PUSH
51702: EMPTY
51703: LIST
51704: LIST
51705: PUSH
51706: LD_INT 1
51708: PUSH
51709: LD_INT 0
51711: PUSH
51712: EMPTY
51713: LIST
51714: LIST
51715: PUSH
51716: LD_INT 1
51718: PUSH
51719: LD_INT 1
51721: PUSH
51722: EMPTY
51723: LIST
51724: LIST
51725: PUSH
51726: LD_INT 0
51728: PUSH
51729: LD_INT 1
51731: PUSH
51732: EMPTY
51733: LIST
51734: LIST
51735: PUSH
51736: LD_INT 1
51738: NEG
51739: PUSH
51740: LD_INT 0
51742: PUSH
51743: EMPTY
51744: LIST
51745: LIST
51746: PUSH
51747: LD_INT 1
51749: NEG
51750: PUSH
51751: LD_INT 1
51753: NEG
51754: PUSH
51755: EMPTY
51756: LIST
51757: LIST
51758: PUSH
51759: LD_INT 1
51761: NEG
51762: PUSH
51763: LD_INT 2
51765: NEG
51766: PUSH
51767: EMPTY
51768: LIST
51769: LIST
51770: PUSH
51771: LD_INT 0
51773: PUSH
51774: LD_INT 2
51776: NEG
51777: PUSH
51778: EMPTY
51779: LIST
51780: LIST
51781: PUSH
51782: LD_INT 1
51784: PUSH
51785: LD_INT 1
51787: NEG
51788: PUSH
51789: EMPTY
51790: LIST
51791: LIST
51792: PUSH
51793: LD_INT 2
51795: PUSH
51796: LD_INT 1
51798: PUSH
51799: EMPTY
51800: LIST
51801: LIST
51802: PUSH
51803: LD_INT 2
51805: PUSH
51806: LD_INT 2
51808: PUSH
51809: EMPTY
51810: LIST
51811: LIST
51812: PUSH
51813: LD_INT 1
51815: PUSH
51816: LD_INT 2
51818: PUSH
51819: EMPTY
51820: LIST
51821: LIST
51822: PUSH
51823: LD_INT 0
51825: PUSH
51826: LD_INT 2
51828: PUSH
51829: EMPTY
51830: LIST
51831: LIST
51832: PUSH
51833: LD_INT 1
51835: NEG
51836: PUSH
51837: LD_INT 1
51839: PUSH
51840: EMPTY
51841: LIST
51842: LIST
51843: PUSH
51844: LD_INT 2
51846: NEG
51847: PUSH
51848: LD_INT 1
51850: NEG
51851: PUSH
51852: EMPTY
51853: LIST
51854: LIST
51855: PUSH
51856: LD_INT 2
51858: NEG
51859: PUSH
51860: LD_INT 2
51862: NEG
51863: PUSH
51864: EMPTY
51865: LIST
51866: LIST
51867: PUSH
51868: LD_INT 2
51870: NEG
51871: PUSH
51872: LD_INT 3
51874: NEG
51875: PUSH
51876: EMPTY
51877: LIST
51878: LIST
51879: PUSH
51880: LD_INT 1
51882: NEG
51883: PUSH
51884: LD_INT 3
51886: NEG
51887: PUSH
51888: EMPTY
51889: LIST
51890: LIST
51891: PUSH
51892: LD_INT 0
51894: PUSH
51895: LD_INT 3
51897: NEG
51898: PUSH
51899: EMPTY
51900: LIST
51901: LIST
51902: PUSH
51903: LD_INT 1
51905: PUSH
51906: LD_INT 2
51908: NEG
51909: PUSH
51910: EMPTY
51911: LIST
51912: LIST
51913: PUSH
51914: LD_INT 3
51916: PUSH
51917: LD_INT 2
51919: PUSH
51920: EMPTY
51921: LIST
51922: LIST
51923: PUSH
51924: LD_INT 3
51926: PUSH
51927: LD_INT 3
51929: PUSH
51930: EMPTY
51931: LIST
51932: LIST
51933: PUSH
51934: LD_INT 2
51936: PUSH
51937: LD_INT 3
51939: PUSH
51940: EMPTY
51941: LIST
51942: LIST
51943: PUSH
51944: LD_INT 1
51946: PUSH
51947: LD_INT 3
51949: PUSH
51950: EMPTY
51951: LIST
51952: LIST
51953: PUSH
51954: LD_INT 0
51956: PUSH
51957: LD_INT 3
51959: PUSH
51960: EMPTY
51961: LIST
51962: LIST
51963: PUSH
51964: LD_INT 1
51966: NEG
51967: PUSH
51968: LD_INT 2
51970: PUSH
51971: EMPTY
51972: LIST
51973: LIST
51974: PUSH
51975: LD_INT 3
51977: NEG
51978: PUSH
51979: LD_INT 2
51981: NEG
51982: PUSH
51983: EMPTY
51984: LIST
51985: LIST
51986: PUSH
51987: LD_INT 3
51989: NEG
51990: PUSH
51991: LD_INT 3
51993: NEG
51994: PUSH
51995: EMPTY
51996: LIST
51997: LIST
51998: PUSH
51999: EMPTY
52000: LIST
52001: LIST
52002: LIST
52003: LIST
52004: LIST
52005: LIST
52006: LIST
52007: LIST
52008: LIST
52009: LIST
52010: LIST
52011: LIST
52012: LIST
52013: LIST
52014: LIST
52015: LIST
52016: LIST
52017: LIST
52018: LIST
52019: LIST
52020: LIST
52021: LIST
52022: LIST
52023: LIST
52024: LIST
52025: LIST
52026: LIST
52027: LIST
52028: LIST
52029: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52030: LD_ADDR_VAR 0 43
52034: PUSH
52035: LD_INT 0
52037: PUSH
52038: LD_INT 0
52040: PUSH
52041: EMPTY
52042: LIST
52043: LIST
52044: PUSH
52045: LD_INT 0
52047: PUSH
52048: LD_INT 1
52050: NEG
52051: PUSH
52052: EMPTY
52053: LIST
52054: LIST
52055: PUSH
52056: LD_INT 1
52058: PUSH
52059: LD_INT 0
52061: PUSH
52062: EMPTY
52063: LIST
52064: LIST
52065: PUSH
52066: LD_INT 1
52068: PUSH
52069: LD_INT 1
52071: PUSH
52072: EMPTY
52073: LIST
52074: LIST
52075: PUSH
52076: LD_INT 0
52078: PUSH
52079: LD_INT 1
52081: PUSH
52082: EMPTY
52083: LIST
52084: LIST
52085: PUSH
52086: LD_INT 1
52088: NEG
52089: PUSH
52090: LD_INT 0
52092: PUSH
52093: EMPTY
52094: LIST
52095: LIST
52096: PUSH
52097: LD_INT 1
52099: NEG
52100: PUSH
52101: LD_INT 1
52103: NEG
52104: PUSH
52105: EMPTY
52106: LIST
52107: LIST
52108: PUSH
52109: LD_INT 1
52111: NEG
52112: PUSH
52113: LD_INT 2
52115: NEG
52116: PUSH
52117: EMPTY
52118: LIST
52119: LIST
52120: PUSH
52121: LD_INT 0
52123: PUSH
52124: LD_INT 2
52126: NEG
52127: PUSH
52128: EMPTY
52129: LIST
52130: LIST
52131: PUSH
52132: LD_INT 1
52134: PUSH
52135: LD_INT 1
52137: NEG
52138: PUSH
52139: EMPTY
52140: LIST
52141: LIST
52142: PUSH
52143: LD_INT 2
52145: PUSH
52146: LD_INT 0
52148: PUSH
52149: EMPTY
52150: LIST
52151: LIST
52152: PUSH
52153: LD_INT 2
52155: PUSH
52156: LD_INT 1
52158: PUSH
52159: EMPTY
52160: LIST
52161: LIST
52162: PUSH
52163: LD_INT 1
52165: PUSH
52166: LD_INT 2
52168: PUSH
52169: EMPTY
52170: LIST
52171: LIST
52172: PUSH
52173: LD_INT 0
52175: PUSH
52176: LD_INT 2
52178: PUSH
52179: EMPTY
52180: LIST
52181: LIST
52182: PUSH
52183: LD_INT 1
52185: NEG
52186: PUSH
52187: LD_INT 1
52189: PUSH
52190: EMPTY
52191: LIST
52192: LIST
52193: PUSH
52194: LD_INT 2
52196: NEG
52197: PUSH
52198: LD_INT 0
52200: PUSH
52201: EMPTY
52202: LIST
52203: LIST
52204: PUSH
52205: LD_INT 2
52207: NEG
52208: PUSH
52209: LD_INT 1
52211: NEG
52212: PUSH
52213: EMPTY
52214: LIST
52215: LIST
52216: PUSH
52217: LD_INT 1
52219: NEG
52220: PUSH
52221: LD_INT 3
52223: NEG
52224: PUSH
52225: EMPTY
52226: LIST
52227: LIST
52228: PUSH
52229: LD_INT 0
52231: PUSH
52232: LD_INT 3
52234: NEG
52235: PUSH
52236: EMPTY
52237: LIST
52238: LIST
52239: PUSH
52240: LD_INT 1
52242: PUSH
52243: LD_INT 2
52245: NEG
52246: PUSH
52247: EMPTY
52248: LIST
52249: LIST
52250: PUSH
52251: LD_INT 2
52253: PUSH
52254: LD_INT 1
52256: NEG
52257: PUSH
52258: EMPTY
52259: LIST
52260: LIST
52261: PUSH
52262: LD_INT 3
52264: PUSH
52265: LD_INT 0
52267: PUSH
52268: EMPTY
52269: LIST
52270: LIST
52271: PUSH
52272: LD_INT 3
52274: PUSH
52275: LD_INT 1
52277: PUSH
52278: EMPTY
52279: LIST
52280: LIST
52281: PUSH
52282: LD_INT 1
52284: PUSH
52285: LD_INT 3
52287: PUSH
52288: EMPTY
52289: LIST
52290: LIST
52291: PUSH
52292: LD_INT 0
52294: PUSH
52295: LD_INT 3
52297: PUSH
52298: EMPTY
52299: LIST
52300: LIST
52301: PUSH
52302: LD_INT 1
52304: NEG
52305: PUSH
52306: LD_INT 2
52308: PUSH
52309: EMPTY
52310: LIST
52311: LIST
52312: PUSH
52313: LD_INT 2
52315: NEG
52316: PUSH
52317: LD_INT 1
52319: PUSH
52320: EMPTY
52321: LIST
52322: LIST
52323: PUSH
52324: LD_INT 3
52326: NEG
52327: PUSH
52328: LD_INT 0
52330: PUSH
52331: EMPTY
52332: LIST
52333: LIST
52334: PUSH
52335: LD_INT 3
52337: NEG
52338: PUSH
52339: LD_INT 1
52341: NEG
52342: PUSH
52343: EMPTY
52344: LIST
52345: LIST
52346: PUSH
52347: EMPTY
52348: LIST
52349: LIST
52350: LIST
52351: LIST
52352: LIST
52353: LIST
52354: LIST
52355: LIST
52356: LIST
52357: LIST
52358: LIST
52359: LIST
52360: LIST
52361: LIST
52362: LIST
52363: LIST
52364: LIST
52365: LIST
52366: LIST
52367: LIST
52368: LIST
52369: LIST
52370: LIST
52371: LIST
52372: LIST
52373: LIST
52374: LIST
52375: LIST
52376: LIST
52377: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52378: LD_ADDR_VAR 0 44
52382: PUSH
52383: LD_INT 0
52385: PUSH
52386: LD_INT 0
52388: PUSH
52389: EMPTY
52390: LIST
52391: LIST
52392: PUSH
52393: LD_INT 0
52395: PUSH
52396: LD_INT 1
52398: NEG
52399: PUSH
52400: EMPTY
52401: LIST
52402: LIST
52403: PUSH
52404: LD_INT 1
52406: PUSH
52407: LD_INT 0
52409: PUSH
52410: EMPTY
52411: LIST
52412: LIST
52413: PUSH
52414: LD_INT 1
52416: PUSH
52417: LD_INT 1
52419: PUSH
52420: EMPTY
52421: LIST
52422: LIST
52423: PUSH
52424: LD_INT 0
52426: PUSH
52427: LD_INT 1
52429: PUSH
52430: EMPTY
52431: LIST
52432: LIST
52433: PUSH
52434: LD_INT 1
52436: NEG
52437: PUSH
52438: LD_INT 0
52440: PUSH
52441: EMPTY
52442: LIST
52443: LIST
52444: PUSH
52445: LD_INT 1
52447: NEG
52448: PUSH
52449: LD_INT 1
52451: NEG
52452: PUSH
52453: EMPTY
52454: LIST
52455: LIST
52456: PUSH
52457: LD_INT 1
52459: NEG
52460: PUSH
52461: LD_INT 2
52463: NEG
52464: PUSH
52465: EMPTY
52466: LIST
52467: LIST
52468: PUSH
52469: LD_INT 1
52471: PUSH
52472: LD_INT 1
52474: NEG
52475: PUSH
52476: EMPTY
52477: LIST
52478: LIST
52479: PUSH
52480: LD_INT 2
52482: PUSH
52483: LD_INT 0
52485: PUSH
52486: EMPTY
52487: LIST
52488: LIST
52489: PUSH
52490: LD_INT 2
52492: PUSH
52493: LD_INT 1
52495: PUSH
52496: EMPTY
52497: LIST
52498: LIST
52499: PUSH
52500: LD_INT 2
52502: PUSH
52503: LD_INT 2
52505: PUSH
52506: EMPTY
52507: LIST
52508: LIST
52509: PUSH
52510: LD_INT 1
52512: PUSH
52513: LD_INT 2
52515: PUSH
52516: EMPTY
52517: LIST
52518: LIST
52519: PUSH
52520: LD_INT 1
52522: NEG
52523: PUSH
52524: LD_INT 1
52526: PUSH
52527: EMPTY
52528: LIST
52529: LIST
52530: PUSH
52531: LD_INT 2
52533: NEG
52534: PUSH
52535: LD_INT 0
52537: PUSH
52538: EMPTY
52539: LIST
52540: LIST
52541: PUSH
52542: LD_INT 2
52544: NEG
52545: PUSH
52546: LD_INT 1
52548: NEG
52549: PUSH
52550: EMPTY
52551: LIST
52552: LIST
52553: PUSH
52554: LD_INT 2
52556: NEG
52557: PUSH
52558: LD_INT 2
52560: NEG
52561: PUSH
52562: EMPTY
52563: LIST
52564: LIST
52565: PUSH
52566: LD_INT 2
52568: NEG
52569: PUSH
52570: LD_INT 3
52572: NEG
52573: PUSH
52574: EMPTY
52575: LIST
52576: LIST
52577: PUSH
52578: LD_INT 2
52580: PUSH
52581: LD_INT 1
52583: NEG
52584: PUSH
52585: EMPTY
52586: LIST
52587: LIST
52588: PUSH
52589: LD_INT 3
52591: PUSH
52592: LD_INT 0
52594: PUSH
52595: EMPTY
52596: LIST
52597: LIST
52598: PUSH
52599: LD_INT 3
52601: PUSH
52602: LD_INT 1
52604: PUSH
52605: EMPTY
52606: LIST
52607: LIST
52608: PUSH
52609: LD_INT 3
52611: PUSH
52612: LD_INT 2
52614: PUSH
52615: EMPTY
52616: LIST
52617: LIST
52618: PUSH
52619: LD_INT 3
52621: PUSH
52622: LD_INT 3
52624: PUSH
52625: EMPTY
52626: LIST
52627: LIST
52628: PUSH
52629: LD_INT 2
52631: PUSH
52632: LD_INT 3
52634: PUSH
52635: EMPTY
52636: LIST
52637: LIST
52638: PUSH
52639: LD_INT 2
52641: NEG
52642: PUSH
52643: LD_INT 1
52645: PUSH
52646: EMPTY
52647: LIST
52648: LIST
52649: PUSH
52650: LD_INT 3
52652: NEG
52653: PUSH
52654: LD_INT 0
52656: PUSH
52657: EMPTY
52658: LIST
52659: LIST
52660: PUSH
52661: LD_INT 3
52663: NEG
52664: PUSH
52665: LD_INT 1
52667: NEG
52668: PUSH
52669: EMPTY
52670: LIST
52671: LIST
52672: PUSH
52673: LD_INT 3
52675: NEG
52676: PUSH
52677: LD_INT 2
52679: NEG
52680: PUSH
52681: EMPTY
52682: LIST
52683: LIST
52684: PUSH
52685: LD_INT 3
52687: NEG
52688: PUSH
52689: LD_INT 3
52691: NEG
52692: PUSH
52693: EMPTY
52694: LIST
52695: LIST
52696: PUSH
52697: EMPTY
52698: LIST
52699: LIST
52700: LIST
52701: LIST
52702: LIST
52703: LIST
52704: LIST
52705: LIST
52706: LIST
52707: LIST
52708: LIST
52709: LIST
52710: LIST
52711: LIST
52712: LIST
52713: LIST
52714: LIST
52715: LIST
52716: LIST
52717: LIST
52718: LIST
52719: LIST
52720: LIST
52721: LIST
52722: LIST
52723: LIST
52724: LIST
52725: LIST
52726: LIST
52727: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52728: LD_ADDR_VAR 0 45
52732: PUSH
52733: LD_INT 0
52735: PUSH
52736: LD_INT 0
52738: PUSH
52739: EMPTY
52740: LIST
52741: LIST
52742: PUSH
52743: LD_INT 0
52745: PUSH
52746: LD_INT 1
52748: NEG
52749: PUSH
52750: EMPTY
52751: LIST
52752: LIST
52753: PUSH
52754: LD_INT 1
52756: PUSH
52757: LD_INT 0
52759: PUSH
52760: EMPTY
52761: LIST
52762: LIST
52763: PUSH
52764: LD_INT 1
52766: PUSH
52767: LD_INT 1
52769: PUSH
52770: EMPTY
52771: LIST
52772: LIST
52773: PUSH
52774: LD_INT 0
52776: PUSH
52777: LD_INT 1
52779: PUSH
52780: EMPTY
52781: LIST
52782: LIST
52783: PUSH
52784: LD_INT 1
52786: NEG
52787: PUSH
52788: LD_INT 0
52790: PUSH
52791: EMPTY
52792: LIST
52793: LIST
52794: PUSH
52795: LD_INT 1
52797: NEG
52798: PUSH
52799: LD_INT 1
52801: NEG
52802: PUSH
52803: EMPTY
52804: LIST
52805: LIST
52806: PUSH
52807: LD_INT 1
52809: NEG
52810: PUSH
52811: LD_INT 2
52813: NEG
52814: PUSH
52815: EMPTY
52816: LIST
52817: LIST
52818: PUSH
52819: LD_INT 0
52821: PUSH
52822: LD_INT 2
52824: NEG
52825: PUSH
52826: EMPTY
52827: LIST
52828: LIST
52829: PUSH
52830: LD_INT 1
52832: PUSH
52833: LD_INT 1
52835: NEG
52836: PUSH
52837: EMPTY
52838: LIST
52839: LIST
52840: PUSH
52841: LD_INT 2
52843: PUSH
52844: LD_INT 1
52846: PUSH
52847: EMPTY
52848: LIST
52849: LIST
52850: PUSH
52851: LD_INT 2
52853: PUSH
52854: LD_INT 2
52856: PUSH
52857: EMPTY
52858: LIST
52859: LIST
52860: PUSH
52861: LD_INT 1
52863: PUSH
52864: LD_INT 2
52866: PUSH
52867: EMPTY
52868: LIST
52869: LIST
52870: PUSH
52871: LD_INT 0
52873: PUSH
52874: LD_INT 2
52876: PUSH
52877: EMPTY
52878: LIST
52879: LIST
52880: PUSH
52881: LD_INT 1
52883: NEG
52884: PUSH
52885: LD_INT 1
52887: PUSH
52888: EMPTY
52889: LIST
52890: LIST
52891: PUSH
52892: LD_INT 2
52894: NEG
52895: PUSH
52896: LD_INT 1
52898: NEG
52899: PUSH
52900: EMPTY
52901: LIST
52902: LIST
52903: PUSH
52904: LD_INT 2
52906: NEG
52907: PUSH
52908: LD_INT 2
52910: NEG
52911: PUSH
52912: EMPTY
52913: LIST
52914: LIST
52915: PUSH
52916: LD_INT 2
52918: NEG
52919: PUSH
52920: LD_INT 3
52922: NEG
52923: PUSH
52924: EMPTY
52925: LIST
52926: LIST
52927: PUSH
52928: LD_INT 1
52930: NEG
52931: PUSH
52932: LD_INT 3
52934: NEG
52935: PUSH
52936: EMPTY
52937: LIST
52938: LIST
52939: PUSH
52940: LD_INT 0
52942: PUSH
52943: LD_INT 3
52945: NEG
52946: PUSH
52947: EMPTY
52948: LIST
52949: LIST
52950: PUSH
52951: LD_INT 1
52953: PUSH
52954: LD_INT 2
52956: NEG
52957: PUSH
52958: EMPTY
52959: LIST
52960: LIST
52961: PUSH
52962: LD_INT 3
52964: PUSH
52965: LD_INT 2
52967: PUSH
52968: EMPTY
52969: LIST
52970: LIST
52971: PUSH
52972: LD_INT 3
52974: PUSH
52975: LD_INT 3
52977: PUSH
52978: EMPTY
52979: LIST
52980: LIST
52981: PUSH
52982: LD_INT 2
52984: PUSH
52985: LD_INT 3
52987: PUSH
52988: EMPTY
52989: LIST
52990: LIST
52991: PUSH
52992: LD_INT 1
52994: PUSH
52995: LD_INT 3
52997: PUSH
52998: EMPTY
52999: LIST
53000: LIST
53001: PUSH
53002: LD_INT 0
53004: PUSH
53005: LD_INT 3
53007: PUSH
53008: EMPTY
53009: LIST
53010: LIST
53011: PUSH
53012: LD_INT 1
53014: NEG
53015: PUSH
53016: LD_INT 2
53018: PUSH
53019: EMPTY
53020: LIST
53021: LIST
53022: PUSH
53023: LD_INT 3
53025: NEG
53026: PUSH
53027: LD_INT 2
53029: NEG
53030: PUSH
53031: EMPTY
53032: LIST
53033: LIST
53034: PUSH
53035: LD_INT 3
53037: NEG
53038: PUSH
53039: LD_INT 3
53041: NEG
53042: PUSH
53043: EMPTY
53044: LIST
53045: LIST
53046: PUSH
53047: EMPTY
53048: LIST
53049: LIST
53050: LIST
53051: LIST
53052: LIST
53053: LIST
53054: LIST
53055: LIST
53056: LIST
53057: LIST
53058: LIST
53059: LIST
53060: LIST
53061: LIST
53062: LIST
53063: LIST
53064: LIST
53065: LIST
53066: LIST
53067: LIST
53068: LIST
53069: LIST
53070: LIST
53071: LIST
53072: LIST
53073: LIST
53074: LIST
53075: LIST
53076: LIST
53077: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53078: LD_ADDR_VAR 0 46
53082: PUSH
53083: LD_INT 0
53085: PUSH
53086: LD_INT 0
53088: PUSH
53089: EMPTY
53090: LIST
53091: LIST
53092: PUSH
53093: LD_INT 0
53095: PUSH
53096: LD_INT 1
53098: NEG
53099: PUSH
53100: EMPTY
53101: LIST
53102: LIST
53103: PUSH
53104: LD_INT 1
53106: PUSH
53107: LD_INT 0
53109: PUSH
53110: EMPTY
53111: LIST
53112: LIST
53113: PUSH
53114: LD_INT 1
53116: PUSH
53117: LD_INT 1
53119: PUSH
53120: EMPTY
53121: LIST
53122: LIST
53123: PUSH
53124: LD_INT 0
53126: PUSH
53127: LD_INT 1
53129: PUSH
53130: EMPTY
53131: LIST
53132: LIST
53133: PUSH
53134: LD_INT 1
53136: NEG
53137: PUSH
53138: LD_INT 0
53140: PUSH
53141: EMPTY
53142: LIST
53143: LIST
53144: PUSH
53145: LD_INT 1
53147: NEG
53148: PUSH
53149: LD_INT 1
53151: NEG
53152: PUSH
53153: EMPTY
53154: LIST
53155: LIST
53156: PUSH
53157: LD_INT 1
53159: NEG
53160: PUSH
53161: LD_INT 2
53163: NEG
53164: PUSH
53165: EMPTY
53166: LIST
53167: LIST
53168: PUSH
53169: LD_INT 0
53171: PUSH
53172: LD_INT 2
53174: NEG
53175: PUSH
53176: EMPTY
53177: LIST
53178: LIST
53179: PUSH
53180: LD_INT 1
53182: PUSH
53183: LD_INT 1
53185: NEG
53186: PUSH
53187: EMPTY
53188: LIST
53189: LIST
53190: PUSH
53191: LD_INT 2
53193: PUSH
53194: LD_INT 0
53196: PUSH
53197: EMPTY
53198: LIST
53199: LIST
53200: PUSH
53201: LD_INT 2
53203: PUSH
53204: LD_INT 1
53206: PUSH
53207: EMPTY
53208: LIST
53209: LIST
53210: PUSH
53211: LD_INT 1
53213: PUSH
53214: LD_INT 2
53216: PUSH
53217: EMPTY
53218: LIST
53219: LIST
53220: PUSH
53221: LD_INT 0
53223: PUSH
53224: LD_INT 2
53226: PUSH
53227: EMPTY
53228: LIST
53229: LIST
53230: PUSH
53231: LD_INT 1
53233: NEG
53234: PUSH
53235: LD_INT 1
53237: PUSH
53238: EMPTY
53239: LIST
53240: LIST
53241: PUSH
53242: LD_INT 2
53244: NEG
53245: PUSH
53246: LD_INT 0
53248: PUSH
53249: EMPTY
53250: LIST
53251: LIST
53252: PUSH
53253: LD_INT 2
53255: NEG
53256: PUSH
53257: LD_INT 1
53259: NEG
53260: PUSH
53261: EMPTY
53262: LIST
53263: LIST
53264: PUSH
53265: LD_INT 1
53267: NEG
53268: PUSH
53269: LD_INT 3
53271: NEG
53272: PUSH
53273: EMPTY
53274: LIST
53275: LIST
53276: PUSH
53277: LD_INT 0
53279: PUSH
53280: LD_INT 3
53282: NEG
53283: PUSH
53284: EMPTY
53285: LIST
53286: LIST
53287: PUSH
53288: LD_INT 1
53290: PUSH
53291: LD_INT 2
53293: NEG
53294: PUSH
53295: EMPTY
53296: LIST
53297: LIST
53298: PUSH
53299: LD_INT 2
53301: PUSH
53302: LD_INT 1
53304: NEG
53305: PUSH
53306: EMPTY
53307: LIST
53308: LIST
53309: PUSH
53310: LD_INT 3
53312: PUSH
53313: LD_INT 0
53315: PUSH
53316: EMPTY
53317: LIST
53318: LIST
53319: PUSH
53320: LD_INT 3
53322: PUSH
53323: LD_INT 1
53325: PUSH
53326: EMPTY
53327: LIST
53328: LIST
53329: PUSH
53330: LD_INT 1
53332: PUSH
53333: LD_INT 3
53335: PUSH
53336: EMPTY
53337: LIST
53338: LIST
53339: PUSH
53340: LD_INT 0
53342: PUSH
53343: LD_INT 3
53345: PUSH
53346: EMPTY
53347: LIST
53348: LIST
53349: PUSH
53350: LD_INT 1
53352: NEG
53353: PUSH
53354: LD_INT 2
53356: PUSH
53357: EMPTY
53358: LIST
53359: LIST
53360: PUSH
53361: LD_INT 2
53363: NEG
53364: PUSH
53365: LD_INT 1
53367: PUSH
53368: EMPTY
53369: LIST
53370: LIST
53371: PUSH
53372: LD_INT 3
53374: NEG
53375: PUSH
53376: LD_INT 0
53378: PUSH
53379: EMPTY
53380: LIST
53381: LIST
53382: PUSH
53383: LD_INT 3
53385: NEG
53386: PUSH
53387: LD_INT 1
53389: NEG
53390: PUSH
53391: EMPTY
53392: LIST
53393: LIST
53394: PUSH
53395: EMPTY
53396: LIST
53397: LIST
53398: LIST
53399: LIST
53400: LIST
53401: LIST
53402: LIST
53403: LIST
53404: LIST
53405: LIST
53406: LIST
53407: LIST
53408: LIST
53409: LIST
53410: LIST
53411: LIST
53412: LIST
53413: LIST
53414: LIST
53415: LIST
53416: LIST
53417: LIST
53418: LIST
53419: LIST
53420: LIST
53421: LIST
53422: LIST
53423: LIST
53424: LIST
53425: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53426: LD_ADDR_VAR 0 47
53430: PUSH
53431: LD_INT 0
53433: PUSH
53434: LD_INT 0
53436: PUSH
53437: EMPTY
53438: LIST
53439: LIST
53440: PUSH
53441: LD_INT 0
53443: PUSH
53444: LD_INT 1
53446: NEG
53447: PUSH
53448: EMPTY
53449: LIST
53450: LIST
53451: PUSH
53452: LD_INT 1
53454: PUSH
53455: LD_INT 0
53457: PUSH
53458: EMPTY
53459: LIST
53460: LIST
53461: PUSH
53462: LD_INT 1
53464: PUSH
53465: LD_INT 1
53467: PUSH
53468: EMPTY
53469: LIST
53470: LIST
53471: PUSH
53472: LD_INT 0
53474: PUSH
53475: LD_INT 1
53477: PUSH
53478: EMPTY
53479: LIST
53480: LIST
53481: PUSH
53482: LD_INT 1
53484: NEG
53485: PUSH
53486: LD_INT 0
53488: PUSH
53489: EMPTY
53490: LIST
53491: LIST
53492: PUSH
53493: LD_INT 1
53495: NEG
53496: PUSH
53497: LD_INT 1
53499: NEG
53500: PUSH
53501: EMPTY
53502: LIST
53503: LIST
53504: PUSH
53505: LD_INT 1
53507: NEG
53508: PUSH
53509: LD_INT 2
53511: NEG
53512: PUSH
53513: EMPTY
53514: LIST
53515: LIST
53516: PUSH
53517: LD_INT 0
53519: PUSH
53520: LD_INT 2
53522: NEG
53523: PUSH
53524: EMPTY
53525: LIST
53526: LIST
53527: PUSH
53528: LD_INT 1
53530: PUSH
53531: LD_INT 1
53533: NEG
53534: PUSH
53535: EMPTY
53536: LIST
53537: LIST
53538: PUSH
53539: LD_INT 2
53541: NEG
53542: PUSH
53543: LD_INT 1
53545: NEG
53546: PUSH
53547: EMPTY
53548: LIST
53549: LIST
53550: PUSH
53551: LD_INT 2
53553: NEG
53554: PUSH
53555: LD_INT 2
53557: NEG
53558: PUSH
53559: EMPTY
53560: LIST
53561: LIST
53562: PUSH
53563: EMPTY
53564: LIST
53565: LIST
53566: LIST
53567: LIST
53568: LIST
53569: LIST
53570: LIST
53571: LIST
53572: LIST
53573: LIST
53574: LIST
53575: LIST
53576: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
53577: LD_ADDR_VAR 0 48
53581: PUSH
53582: LD_INT 0
53584: PUSH
53585: LD_INT 0
53587: PUSH
53588: EMPTY
53589: LIST
53590: LIST
53591: PUSH
53592: LD_INT 0
53594: PUSH
53595: LD_INT 1
53597: NEG
53598: PUSH
53599: EMPTY
53600: LIST
53601: LIST
53602: PUSH
53603: LD_INT 1
53605: PUSH
53606: LD_INT 0
53608: PUSH
53609: EMPTY
53610: LIST
53611: LIST
53612: PUSH
53613: LD_INT 1
53615: PUSH
53616: LD_INT 1
53618: PUSH
53619: EMPTY
53620: LIST
53621: LIST
53622: PUSH
53623: LD_INT 0
53625: PUSH
53626: LD_INT 1
53628: PUSH
53629: EMPTY
53630: LIST
53631: LIST
53632: PUSH
53633: LD_INT 1
53635: NEG
53636: PUSH
53637: LD_INT 0
53639: PUSH
53640: EMPTY
53641: LIST
53642: LIST
53643: PUSH
53644: LD_INT 1
53646: NEG
53647: PUSH
53648: LD_INT 1
53650: NEG
53651: PUSH
53652: EMPTY
53653: LIST
53654: LIST
53655: PUSH
53656: LD_INT 1
53658: NEG
53659: PUSH
53660: LD_INT 2
53662: NEG
53663: PUSH
53664: EMPTY
53665: LIST
53666: LIST
53667: PUSH
53668: LD_INT 0
53670: PUSH
53671: LD_INT 2
53673: NEG
53674: PUSH
53675: EMPTY
53676: LIST
53677: LIST
53678: PUSH
53679: LD_INT 1
53681: PUSH
53682: LD_INT 1
53684: NEG
53685: PUSH
53686: EMPTY
53687: LIST
53688: LIST
53689: PUSH
53690: LD_INT 2
53692: PUSH
53693: LD_INT 0
53695: PUSH
53696: EMPTY
53697: LIST
53698: LIST
53699: PUSH
53700: LD_INT 2
53702: PUSH
53703: LD_INT 1
53705: PUSH
53706: EMPTY
53707: LIST
53708: LIST
53709: PUSH
53710: EMPTY
53711: LIST
53712: LIST
53713: LIST
53714: LIST
53715: LIST
53716: LIST
53717: LIST
53718: LIST
53719: LIST
53720: LIST
53721: LIST
53722: LIST
53723: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
53724: LD_ADDR_VAR 0 49
53728: PUSH
53729: LD_INT 0
53731: PUSH
53732: LD_INT 0
53734: PUSH
53735: EMPTY
53736: LIST
53737: LIST
53738: PUSH
53739: LD_INT 0
53741: PUSH
53742: LD_INT 1
53744: NEG
53745: PUSH
53746: EMPTY
53747: LIST
53748: LIST
53749: PUSH
53750: LD_INT 1
53752: PUSH
53753: LD_INT 0
53755: PUSH
53756: EMPTY
53757: LIST
53758: LIST
53759: PUSH
53760: LD_INT 1
53762: PUSH
53763: LD_INT 1
53765: PUSH
53766: EMPTY
53767: LIST
53768: LIST
53769: PUSH
53770: LD_INT 0
53772: PUSH
53773: LD_INT 1
53775: PUSH
53776: EMPTY
53777: LIST
53778: LIST
53779: PUSH
53780: LD_INT 1
53782: NEG
53783: PUSH
53784: LD_INT 0
53786: PUSH
53787: EMPTY
53788: LIST
53789: LIST
53790: PUSH
53791: LD_INT 1
53793: NEG
53794: PUSH
53795: LD_INT 1
53797: NEG
53798: PUSH
53799: EMPTY
53800: LIST
53801: LIST
53802: PUSH
53803: LD_INT 1
53805: PUSH
53806: LD_INT 1
53808: NEG
53809: PUSH
53810: EMPTY
53811: LIST
53812: LIST
53813: PUSH
53814: LD_INT 2
53816: PUSH
53817: LD_INT 0
53819: PUSH
53820: EMPTY
53821: LIST
53822: LIST
53823: PUSH
53824: LD_INT 2
53826: PUSH
53827: LD_INT 1
53829: PUSH
53830: EMPTY
53831: LIST
53832: LIST
53833: PUSH
53834: LD_INT 2
53836: PUSH
53837: LD_INT 2
53839: PUSH
53840: EMPTY
53841: LIST
53842: LIST
53843: PUSH
53844: LD_INT 1
53846: PUSH
53847: LD_INT 2
53849: PUSH
53850: EMPTY
53851: LIST
53852: LIST
53853: PUSH
53854: EMPTY
53855: LIST
53856: LIST
53857: LIST
53858: LIST
53859: LIST
53860: LIST
53861: LIST
53862: LIST
53863: LIST
53864: LIST
53865: LIST
53866: LIST
53867: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
53868: LD_ADDR_VAR 0 50
53872: PUSH
53873: LD_INT 0
53875: PUSH
53876: LD_INT 0
53878: PUSH
53879: EMPTY
53880: LIST
53881: LIST
53882: PUSH
53883: LD_INT 0
53885: PUSH
53886: LD_INT 1
53888: NEG
53889: PUSH
53890: EMPTY
53891: LIST
53892: LIST
53893: PUSH
53894: LD_INT 1
53896: PUSH
53897: LD_INT 0
53899: PUSH
53900: EMPTY
53901: LIST
53902: LIST
53903: PUSH
53904: LD_INT 1
53906: PUSH
53907: LD_INT 1
53909: PUSH
53910: EMPTY
53911: LIST
53912: LIST
53913: PUSH
53914: LD_INT 0
53916: PUSH
53917: LD_INT 1
53919: PUSH
53920: EMPTY
53921: LIST
53922: LIST
53923: PUSH
53924: LD_INT 1
53926: NEG
53927: PUSH
53928: LD_INT 0
53930: PUSH
53931: EMPTY
53932: LIST
53933: LIST
53934: PUSH
53935: LD_INT 1
53937: NEG
53938: PUSH
53939: LD_INT 1
53941: NEG
53942: PUSH
53943: EMPTY
53944: LIST
53945: LIST
53946: PUSH
53947: LD_INT 2
53949: PUSH
53950: LD_INT 1
53952: PUSH
53953: EMPTY
53954: LIST
53955: LIST
53956: PUSH
53957: LD_INT 2
53959: PUSH
53960: LD_INT 2
53962: PUSH
53963: EMPTY
53964: LIST
53965: LIST
53966: PUSH
53967: LD_INT 1
53969: PUSH
53970: LD_INT 2
53972: PUSH
53973: EMPTY
53974: LIST
53975: LIST
53976: PUSH
53977: LD_INT 0
53979: PUSH
53980: LD_INT 2
53982: PUSH
53983: EMPTY
53984: LIST
53985: LIST
53986: PUSH
53987: LD_INT 1
53989: NEG
53990: PUSH
53991: LD_INT 1
53993: PUSH
53994: EMPTY
53995: LIST
53996: LIST
53997: PUSH
53998: EMPTY
53999: LIST
54000: LIST
54001: LIST
54002: LIST
54003: LIST
54004: LIST
54005: LIST
54006: LIST
54007: LIST
54008: LIST
54009: LIST
54010: LIST
54011: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
54012: LD_ADDR_VAR 0 51
54016: PUSH
54017: LD_INT 0
54019: PUSH
54020: LD_INT 0
54022: PUSH
54023: EMPTY
54024: LIST
54025: LIST
54026: PUSH
54027: LD_INT 0
54029: PUSH
54030: LD_INT 1
54032: NEG
54033: PUSH
54034: EMPTY
54035: LIST
54036: LIST
54037: PUSH
54038: LD_INT 1
54040: PUSH
54041: LD_INT 0
54043: PUSH
54044: EMPTY
54045: LIST
54046: LIST
54047: PUSH
54048: LD_INT 1
54050: PUSH
54051: LD_INT 1
54053: PUSH
54054: EMPTY
54055: LIST
54056: LIST
54057: PUSH
54058: LD_INT 0
54060: PUSH
54061: LD_INT 1
54063: PUSH
54064: EMPTY
54065: LIST
54066: LIST
54067: PUSH
54068: LD_INT 1
54070: NEG
54071: PUSH
54072: LD_INT 0
54074: PUSH
54075: EMPTY
54076: LIST
54077: LIST
54078: PUSH
54079: LD_INT 1
54081: NEG
54082: PUSH
54083: LD_INT 1
54085: NEG
54086: PUSH
54087: EMPTY
54088: LIST
54089: LIST
54090: PUSH
54091: LD_INT 1
54093: PUSH
54094: LD_INT 2
54096: PUSH
54097: EMPTY
54098: LIST
54099: LIST
54100: PUSH
54101: LD_INT 0
54103: PUSH
54104: LD_INT 2
54106: PUSH
54107: EMPTY
54108: LIST
54109: LIST
54110: PUSH
54111: LD_INT 1
54113: NEG
54114: PUSH
54115: LD_INT 1
54117: PUSH
54118: EMPTY
54119: LIST
54120: LIST
54121: PUSH
54122: LD_INT 2
54124: NEG
54125: PUSH
54126: LD_INT 0
54128: PUSH
54129: EMPTY
54130: LIST
54131: LIST
54132: PUSH
54133: LD_INT 2
54135: NEG
54136: PUSH
54137: LD_INT 1
54139: NEG
54140: PUSH
54141: EMPTY
54142: LIST
54143: LIST
54144: PUSH
54145: EMPTY
54146: LIST
54147: LIST
54148: LIST
54149: LIST
54150: LIST
54151: LIST
54152: LIST
54153: LIST
54154: LIST
54155: LIST
54156: LIST
54157: LIST
54158: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54159: LD_ADDR_VAR 0 52
54163: PUSH
54164: LD_INT 0
54166: PUSH
54167: LD_INT 0
54169: PUSH
54170: EMPTY
54171: LIST
54172: LIST
54173: PUSH
54174: LD_INT 0
54176: PUSH
54177: LD_INT 1
54179: NEG
54180: PUSH
54181: EMPTY
54182: LIST
54183: LIST
54184: PUSH
54185: LD_INT 1
54187: PUSH
54188: LD_INT 0
54190: PUSH
54191: EMPTY
54192: LIST
54193: LIST
54194: PUSH
54195: LD_INT 1
54197: PUSH
54198: LD_INT 1
54200: PUSH
54201: EMPTY
54202: LIST
54203: LIST
54204: PUSH
54205: LD_INT 0
54207: PUSH
54208: LD_INT 1
54210: PUSH
54211: EMPTY
54212: LIST
54213: LIST
54214: PUSH
54215: LD_INT 1
54217: NEG
54218: PUSH
54219: LD_INT 0
54221: PUSH
54222: EMPTY
54223: LIST
54224: LIST
54225: PUSH
54226: LD_INT 1
54228: NEG
54229: PUSH
54230: LD_INT 1
54232: NEG
54233: PUSH
54234: EMPTY
54235: LIST
54236: LIST
54237: PUSH
54238: LD_INT 1
54240: NEG
54241: PUSH
54242: LD_INT 2
54244: NEG
54245: PUSH
54246: EMPTY
54247: LIST
54248: LIST
54249: PUSH
54250: LD_INT 1
54252: NEG
54253: PUSH
54254: LD_INT 1
54256: PUSH
54257: EMPTY
54258: LIST
54259: LIST
54260: PUSH
54261: LD_INT 2
54263: NEG
54264: PUSH
54265: LD_INT 0
54267: PUSH
54268: EMPTY
54269: LIST
54270: LIST
54271: PUSH
54272: LD_INT 2
54274: NEG
54275: PUSH
54276: LD_INT 1
54278: NEG
54279: PUSH
54280: EMPTY
54281: LIST
54282: LIST
54283: PUSH
54284: LD_INT 2
54286: NEG
54287: PUSH
54288: LD_INT 2
54290: NEG
54291: PUSH
54292: EMPTY
54293: LIST
54294: LIST
54295: PUSH
54296: EMPTY
54297: LIST
54298: LIST
54299: LIST
54300: LIST
54301: LIST
54302: LIST
54303: LIST
54304: LIST
54305: LIST
54306: LIST
54307: LIST
54308: LIST
54309: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54310: LD_ADDR_VAR 0 53
54314: PUSH
54315: LD_INT 0
54317: PUSH
54318: LD_INT 0
54320: PUSH
54321: EMPTY
54322: LIST
54323: LIST
54324: PUSH
54325: LD_INT 0
54327: PUSH
54328: LD_INT 1
54330: NEG
54331: PUSH
54332: EMPTY
54333: LIST
54334: LIST
54335: PUSH
54336: LD_INT 1
54338: PUSH
54339: LD_INT 0
54341: PUSH
54342: EMPTY
54343: LIST
54344: LIST
54345: PUSH
54346: LD_INT 1
54348: PUSH
54349: LD_INT 1
54351: PUSH
54352: EMPTY
54353: LIST
54354: LIST
54355: PUSH
54356: LD_INT 0
54358: PUSH
54359: LD_INT 1
54361: PUSH
54362: EMPTY
54363: LIST
54364: LIST
54365: PUSH
54366: LD_INT 1
54368: NEG
54369: PUSH
54370: LD_INT 0
54372: PUSH
54373: EMPTY
54374: LIST
54375: LIST
54376: PUSH
54377: LD_INT 1
54379: NEG
54380: PUSH
54381: LD_INT 1
54383: NEG
54384: PUSH
54385: EMPTY
54386: LIST
54387: LIST
54388: PUSH
54389: LD_INT 1
54391: NEG
54392: PUSH
54393: LD_INT 2
54395: NEG
54396: PUSH
54397: EMPTY
54398: LIST
54399: LIST
54400: PUSH
54401: LD_INT 0
54403: PUSH
54404: LD_INT 2
54406: NEG
54407: PUSH
54408: EMPTY
54409: LIST
54410: LIST
54411: PUSH
54412: LD_INT 1
54414: PUSH
54415: LD_INT 1
54417: NEG
54418: PUSH
54419: EMPTY
54420: LIST
54421: LIST
54422: PUSH
54423: LD_INT 2
54425: PUSH
54426: LD_INT 0
54428: PUSH
54429: EMPTY
54430: LIST
54431: LIST
54432: PUSH
54433: LD_INT 2
54435: PUSH
54436: LD_INT 1
54438: PUSH
54439: EMPTY
54440: LIST
54441: LIST
54442: PUSH
54443: LD_INT 2
54445: PUSH
54446: LD_INT 2
54448: PUSH
54449: EMPTY
54450: LIST
54451: LIST
54452: PUSH
54453: LD_INT 1
54455: PUSH
54456: LD_INT 2
54458: PUSH
54459: EMPTY
54460: LIST
54461: LIST
54462: PUSH
54463: LD_INT 0
54465: PUSH
54466: LD_INT 2
54468: PUSH
54469: EMPTY
54470: LIST
54471: LIST
54472: PUSH
54473: LD_INT 1
54475: NEG
54476: PUSH
54477: LD_INT 1
54479: PUSH
54480: EMPTY
54481: LIST
54482: LIST
54483: PUSH
54484: LD_INT 2
54486: NEG
54487: PUSH
54488: LD_INT 0
54490: PUSH
54491: EMPTY
54492: LIST
54493: LIST
54494: PUSH
54495: LD_INT 2
54497: NEG
54498: PUSH
54499: LD_INT 1
54501: NEG
54502: PUSH
54503: EMPTY
54504: LIST
54505: LIST
54506: PUSH
54507: LD_INT 2
54509: NEG
54510: PUSH
54511: LD_INT 2
54513: NEG
54514: PUSH
54515: EMPTY
54516: LIST
54517: LIST
54518: PUSH
54519: EMPTY
54520: LIST
54521: LIST
54522: LIST
54523: LIST
54524: LIST
54525: LIST
54526: LIST
54527: LIST
54528: LIST
54529: LIST
54530: LIST
54531: LIST
54532: LIST
54533: LIST
54534: LIST
54535: LIST
54536: LIST
54537: LIST
54538: LIST
54539: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54540: LD_ADDR_VAR 0 54
54544: PUSH
54545: LD_INT 0
54547: PUSH
54548: LD_INT 0
54550: PUSH
54551: EMPTY
54552: LIST
54553: LIST
54554: PUSH
54555: LD_INT 0
54557: PUSH
54558: LD_INT 1
54560: NEG
54561: PUSH
54562: EMPTY
54563: LIST
54564: LIST
54565: PUSH
54566: LD_INT 1
54568: PUSH
54569: LD_INT 0
54571: PUSH
54572: EMPTY
54573: LIST
54574: LIST
54575: PUSH
54576: LD_INT 1
54578: PUSH
54579: LD_INT 1
54581: PUSH
54582: EMPTY
54583: LIST
54584: LIST
54585: PUSH
54586: LD_INT 0
54588: PUSH
54589: LD_INT 1
54591: PUSH
54592: EMPTY
54593: LIST
54594: LIST
54595: PUSH
54596: LD_INT 1
54598: NEG
54599: PUSH
54600: LD_INT 0
54602: PUSH
54603: EMPTY
54604: LIST
54605: LIST
54606: PUSH
54607: LD_INT 1
54609: NEG
54610: PUSH
54611: LD_INT 1
54613: NEG
54614: PUSH
54615: EMPTY
54616: LIST
54617: LIST
54618: PUSH
54619: LD_INT 1
54621: NEG
54622: PUSH
54623: LD_INT 2
54625: NEG
54626: PUSH
54627: EMPTY
54628: LIST
54629: LIST
54630: PUSH
54631: LD_INT 0
54633: PUSH
54634: LD_INT 2
54636: NEG
54637: PUSH
54638: EMPTY
54639: LIST
54640: LIST
54641: PUSH
54642: LD_INT 1
54644: PUSH
54645: LD_INT 1
54647: NEG
54648: PUSH
54649: EMPTY
54650: LIST
54651: LIST
54652: PUSH
54653: LD_INT 2
54655: PUSH
54656: LD_INT 0
54658: PUSH
54659: EMPTY
54660: LIST
54661: LIST
54662: PUSH
54663: LD_INT 2
54665: PUSH
54666: LD_INT 1
54668: PUSH
54669: EMPTY
54670: LIST
54671: LIST
54672: PUSH
54673: LD_INT 2
54675: PUSH
54676: LD_INT 2
54678: PUSH
54679: EMPTY
54680: LIST
54681: LIST
54682: PUSH
54683: LD_INT 1
54685: PUSH
54686: LD_INT 2
54688: PUSH
54689: EMPTY
54690: LIST
54691: LIST
54692: PUSH
54693: LD_INT 0
54695: PUSH
54696: LD_INT 2
54698: PUSH
54699: EMPTY
54700: LIST
54701: LIST
54702: PUSH
54703: LD_INT 1
54705: NEG
54706: PUSH
54707: LD_INT 1
54709: PUSH
54710: EMPTY
54711: LIST
54712: LIST
54713: PUSH
54714: LD_INT 2
54716: NEG
54717: PUSH
54718: LD_INT 0
54720: PUSH
54721: EMPTY
54722: LIST
54723: LIST
54724: PUSH
54725: LD_INT 2
54727: NEG
54728: PUSH
54729: LD_INT 1
54731: NEG
54732: PUSH
54733: EMPTY
54734: LIST
54735: LIST
54736: PUSH
54737: LD_INT 2
54739: NEG
54740: PUSH
54741: LD_INT 2
54743: NEG
54744: PUSH
54745: EMPTY
54746: LIST
54747: LIST
54748: PUSH
54749: EMPTY
54750: LIST
54751: LIST
54752: LIST
54753: LIST
54754: LIST
54755: LIST
54756: LIST
54757: LIST
54758: LIST
54759: LIST
54760: LIST
54761: LIST
54762: LIST
54763: LIST
54764: LIST
54765: LIST
54766: LIST
54767: LIST
54768: LIST
54769: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54770: LD_ADDR_VAR 0 55
54774: PUSH
54775: LD_INT 0
54777: PUSH
54778: LD_INT 0
54780: PUSH
54781: EMPTY
54782: LIST
54783: LIST
54784: PUSH
54785: LD_INT 0
54787: PUSH
54788: LD_INT 1
54790: NEG
54791: PUSH
54792: EMPTY
54793: LIST
54794: LIST
54795: PUSH
54796: LD_INT 1
54798: PUSH
54799: LD_INT 0
54801: PUSH
54802: EMPTY
54803: LIST
54804: LIST
54805: PUSH
54806: LD_INT 1
54808: PUSH
54809: LD_INT 1
54811: PUSH
54812: EMPTY
54813: LIST
54814: LIST
54815: PUSH
54816: LD_INT 0
54818: PUSH
54819: LD_INT 1
54821: PUSH
54822: EMPTY
54823: LIST
54824: LIST
54825: PUSH
54826: LD_INT 1
54828: NEG
54829: PUSH
54830: LD_INT 0
54832: PUSH
54833: EMPTY
54834: LIST
54835: LIST
54836: PUSH
54837: LD_INT 1
54839: NEG
54840: PUSH
54841: LD_INT 1
54843: NEG
54844: PUSH
54845: EMPTY
54846: LIST
54847: LIST
54848: PUSH
54849: LD_INT 1
54851: NEG
54852: PUSH
54853: LD_INT 2
54855: NEG
54856: PUSH
54857: EMPTY
54858: LIST
54859: LIST
54860: PUSH
54861: LD_INT 0
54863: PUSH
54864: LD_INT 2
54866: NEG
54867: PUSH
54868: EMPTY
54869: LIST
54870: LIST
54871: PUSH
54872: LD_INT 1
54874: PUSH
54875: LD_INT 1
54877: NEG
54878: PUSH
54879: EMPTY
54880: LIST
54881: LIST
54882: PUSH
54883: LD_INT 2
54885: PUSH
54886: LD_INT 0
54888: PUSH
54889: EMPTY
54890: LIST
54891: LIST
54892: PUSH
54893: LD_INT 2
54895: PUSH
54896: LD_INT 1
54898: PUSH
54899: EMPTY
54900: LIST
54901: LIST
54902: PUSH
54903: LD_INT 2
54905: PUSH
54906: LD_INT 2
54908: PUSH
54909: EMPTY
54910: LIST
54911: LIST
54912: PUSH
54913: LD_INT 1
54915: PUSH
54916: LD_INT 2
54918: PUSH
54919: EMPTY
54920: LIST
54921: LIST
54922: PUSH
54923: LD_INT 0
54925: PUSH
54926: LD_INT 2
54928: PUSH
54929: EMPTY
54930: LIST
54931: LIST
54932: PUSH
54933: LD_INT 1
54935: NEG
54936: PUSH
54937: LD_INT 1
54939: PUSH
54940: EMPTY
54941: LIST
54942: LIST
54943: PUSH
54944: LD_INT 2
54946: NEG
54947: PUSH
54948: LD_INT 0
54950: PUSH
54951: EMPTY
54952: LIST
54953: LIST
54954: PUSH
54955: LD_INT 2
54957: NEG
54958: PUSH
54959: LD_INT 1
54961: NEG
54962: PUSH
54963: EMPTY
54964: LIST
54965: LIST
54966: PUSH
54967: LD_INT 2
54969: NEG
54970: PUSH
54971: LD_INT 2
54973: NEG
54974: PUSH
54975: EMPTY
54976: LIST
54977: LIST
54978: PUSH
54979: EMPTY
54980: LIST
54981: LIST
54982: LIST
54983: LIST
54984: LIST
54985: LIST
54986: LIST
54987: LIST
54988: LIST
54989: LIST
54990: LIST
54991: LIST
54992: LIST
54993: LIST
54994: LIST
54995: LIST
54996: LIST
54997: LIST
54998: LIST
54999: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55000: LD_ADDR_VAR 0 56
55004: PUSH
55005: LD_INT 0
55007: PUSH
55008: LD_INT 0
55010: PUSH
55011: EMPTY
55012: LIST
55013: LIST
55014: PUSH
55015: LD_INT 0
55017: PUSH
55018: LD_INT 1
55020: NEG
55021: PUSH
55022: EMPTY
55023: LIST
55024: LIST
55025: PUSH
55026: LD_INT 1
55028: PUSH
55029: LD_INT 0
55031: PUSH
55032: EMPTY
55033: LIST
55034: LIST
55035: PUSH
55036: LD_INT 1
55038: PUSH
55039: LD_INT 1
55041: PUSH
55042: EMPTY
55043: LIST
55044: LIST
55045: PUSH
55046: LD_INT 0
55048: PUSH
55049: LD_INT 1
55051: PUSH
55052: EMPTY
55053: LIST
55054: LIST
55055: PUSH
55056: LD_INT 1
55058: NEG
55059: PUSH
55060: LD_INT 0
55062: PUSH
55063: EMPTY
55064: LIST
55065: LIST
55066: PUSH
55067: LD_INT 1
55069: NEG
55070: PUSH
55071: LD_INT 1
55073: NEG
55074: PUSH
55075: EMPTY
55076: LIST
55077: LIST
55078: PUSH
55079: LD_INT 1
55081: NEG
55082: PUSH
55083: LD_INT 2
55085: NEG
55086: PUSH
55087: EMPTY
55088: LIST
55089: LIST
55090: PUSH
55091: LD_INT 0
55093: PUSH
55094: LD_INT 2
55096: NEG
55097: PUSH
55098: EMPTY
55099: LIST
55100: LIST
55101: PUSH
55102: LD_INT 1
55104: PUSH
55105: LD_INT 1
55107: NEG
55108: PUSH
55109: EMPTY
55110: LIST
55111: LIST
55112: PUSH
55113: LD_INT 2
55115: PUSH
55116: LD_INT 0
55118: PUSH
55119: EMPTY
55120: LIST
55121: LIST
55122: PUSH
55123: LD_INT 2
55125: PUSH
55126: LD_INT 1
55128: PUSH
55129: EMPTY
55130: LIST
55131: LIST
55132: PUSH
55133: LD_INT 2
55135: PUSH
55136: LD_INT 2
55138: PUSH
55139: EMPTY
55140: LIST
55141: LIST
55142: PUSH
55143: LD_INT 1
55145: PUSH
55146: LD_INT 2
55148: PUSH
55149: EMPTY
55150: LIST
55151: LIST
55152: PUSH
55153: LD_INT 0
55155: PUSH
55156: LD_INT 2
55158: PUSH
55159: EMPTY
55160: LIST
55161: LIST
55162: PUSH
55163: LD_INT 1
55165: NEG
55166: PUSH
55167: LD_INT 1
55169: PUSH
55170: EMPTY
55171: LIST
55172: LIST
55173: PUSH
55174: LD_INT 2
55176: NEG
55177: PUSH
55178: LD_INT 0
55180: PUSH
55181: EMPTY
55182: LIST
55183: LIST
55184: PUSH
55185: LD_INT 2
55187: NEG
55188: PUSH
55189: LD_INT 1
55191: NEG
55192: PUSH
55193: EMPTY
55194: LIST
55195: LIST
55196: PUSH
55197: LD_INT 2
55199: NEG
55200: PUSH
55201: LD_INT 2
55203: NEG
55204: PUSH
55205: EMPTY
55206: LIST
55207: LIST
55208: PUSH
55209: EMPTY
55210: LIST
55211: LIST
55212: LIST
55213: LIST
55214: LIST
55215: LIST
55216: LIST
55217: LIST
55218: LIST
55219: LIST
55220: LIST
55221: LIST
55222: LIST
55223: LIST
55224: LIST
55225: LIST
55226: LIST
55227: LIST
55228: LIST
55229: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55230: LD_ADDR_VAR 0 57
55234: PUSH
55235: LD_INT 0
55237: PUSH
55238: LD_INT 0
55240: PUSH
55241: EMPTY
55242: LIST
55243: LIST
55244: PUSH
55245: LD_INT 0
55247: PUSH
55248: LD_INT 1
55250: NEG
55251: PUSH
55252: EMPTY
55253: LIST
55254: LIST
55255: PUSH
55256: LD_INT 1
55258: PUSH
55259: LD_INT 0
55261: PUSH
55262: EMPTY
55263: LIST
55264: LIST
55265: PUSH
55266: LD_INT 1
55268: PUSH
55269: LD_INT 1
55271: PUSH
55272: EMPTY
55273: LIST
55274: LIST
55275: PUSH
55276: LD_INT 0
55278: PUSH
55279: LD_INT 1
55281: PUSH
55282: EMPTY
55283: LIST
55284: LIST
55285: PUSH
55286: LD_INT 1
55288: NEG
55289: PUSH
55290: LD_INT 0
55292: PUSH
55293: EMPTY
55294: LIST
55295: LIST
55296: PUSH
55297: LD_INT 1
55299: NEG
55300: PUSH
55301: LD_INT 1
55303: NEG
55304: PUSH
55305: EMPTY
55306: LIST
55307: LIST
55308: PUSH
55309: LD_INT 1
55311: NEG
55312: PUSH
55313: LD_INT 2
55315: NEG
55316: PUSH
55317: EMPTY
55318: LIST
55319: LIST
55320: PUSH
55321: LD_INT 0
55323: PUSH
55324: LD_INT 2
55326: NEG
55327: PUSH
55328: EMPTY
55329: LIST
55330: LIST
55331: PUSH
55332: LD_INT 1
55334: PUSH
55335: LD_INT 1
55337: NEG
55338: PUSH
55339: EMPTY
55340: LIST
55341: LIST
55342: PUSH
55343: LD_INT 2
55345: PUSH
55346: LD_INT 0
55348: PUSH
55349: EMPTY
55350: LIST
55351: LIST
55352: PUSH
55353: LD_INT 2
55355: PUSH
55356: LD_INT 1
55358: PUSH
55359: EMPTY
55360: LIST
55361: LIST
55362: PUSH
55363: LD_INT 2
55365: PUSH
55366: LD_INT 2
55368: PUSH
55369: EMPTY
55370: LIST
55371: LIST
55372: PUSH
55373: LD_INT 1
55375: PUSH
55376: LD_INT 2
55378: PUSH
55379: EMPTY
55380: LIST
55381: LIST
55382: PUSH
55383: LD_INT 0
55385: PUSH
55386: LD_INT 2
55388: PUSH
55389: EMPTY
55390: LIST
55391: LIST
55392: PUSH
55393: LD_INT 1
55395: NEG
55396: PUSH
55397: LD_INT 1
55399: PUSH
55400: EMPTY
55401: LIST
55402: LIST
55403: PUSH
55404: LD_INT 2
55406: NEG
55407: PUSH
55408: LD_INT 0
55410: PUSH
55411: EMPTY
55412: LIST
55413: LIST
55414: PUSH
55415: LD_INT 2
55417: NEG
55418: PUSH
55419: LD_INT 1
55421: NEG
55422: PUSH
55423: EMPTY
55424: LIST
55425: LIST
55426: PUSH
55427: LD_INT 2
55429: NEG
55430: PUSH
55431: LD_INT 2
55433: NEG
55434: PUSH
55435: EMPTY
55436: LIST
55437: LIST
55438: PUSH
55439: EMPTY
55440: LIST
55441: LIST
55442: LIST
55443: LIST
55444: LIST
55445: LIST
55446: LIST
55447: LIST
55448: LIST
55449: LIST
55450: LIST
55451: LIST
55452: LIST
55453: LIST
55454: LIST
55455: LIST
55456: LIST
55457: LIST
55458: LIST
55459: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55460: LD_ADDR_VAR 0 58
55464: PUSH
55465: LD_INT 0
55467: PUSH
55468: LD_INT 0
55470: PUSH
55471: EMPTY
55472: LIST
55473: LIST
55474: PUSH
55475: LD_INT 0
55477: PUSH
55478: LD_INT 1
55480: NEG
55481: PUSH
55482: EMPTY
55483: LIST
55484: LIST
55485: PUSH
55486: LD_INT 1
55488: PUSH
55489: LD_INT 0
55491: PUSH
55492: EMPTY
55493: LIST
55494: LIST
55495: PUSH
55496: LD_INT 1
55498: PUSH
55499: LD_INT 1
55501: PUSH
55502: EMPTY
55503: LIST
55504: LIST
55505: PUSH
55506: LD_INT 0
55508: PUSH
55509: LD_INT 1
55511: PUSH
55512: EMPTY
55513: LIST
55514: LIST
55515: PUSH
55516: LD_INT 1
55518: NEG
55519: PUSH
55520: LD_INT 0
55522: PUSH
55523: EMPTY
55524: LIST
55525: LIST
55526: PUSH
55527: LD_INT 1
55529: NEG
55530: PUSH
55531: LD_INT 1
55533: NEG
55534: PUSH
55535: EMPTY
55536: LIST
55537: LIST
55538: PUSH
55539: LD_INT 1
55541: NEG
55542: PUSH
55543: LD_INT 2
55545: NEG
55546: PUSH
55547: EMPTY
55548: LIST
55549: LIST
55550: PUSH
55551: LD_INT 0
55553: PUSH
55554: LD_INT 2
55556: NEG
55557: PUSH
55558: EMPTY
55559: LIST
55560: LIST
55561: PUSH
55562: LD_INT 1
55564: PUSH
55565: LD_INT 1
55567: NEG
55568: PUSH
55569: EMPTY
55570: LIST
55571: LIST
55572: PUSH
55573: LD_INT 2
55575: PUSH
55576: LD_INT 0
55578: PUSH
55579: EMPTY
55580: LIST
55581: LIST
55582: PUSH
55583: LD_INT 2
55585: PUSH
55586: LD_INT 1
55588: PUSH
55589: EMPTY
55590: LIST
55591: LIST
55592: PUSH
55593: LD_INT 2
55595: PUSH
55596: LD_INT 2
55598: PUSH
55599: EMPTY
55600: LIST
55601: LIST
55602: PUSH
55603: LD_INT 1
55605: PUSH
55606: LD_INT 2
55608: PUSH
55609: EMPTY
55610: LIST
55611: LIST
55612: PUSH
55613: LD_INT 0
55615: PUSH
55616: LD_INT 2
55618: PUSH
55619: EMPTY
55620: LIST
55621: LIST
55622: PUSH
55623: LD_INT 1
55625: NEG
55626: PUSH
55627: LD_INT 1
55629: PUSH
55630: EMPTY
55631: LIST
55632: LIST
55633: PUSH
55634: LD_INT 2
55636: NEG
55637: PUSH
55638: LD_INT 0
55640: PUSH
55641: EMPTY
55642: LIST
55643: LIST
55644: PUSH
55645: LD_INT 2
55647: NEG
55648: PUSH
55649: LD_INT 1
55651: NEG
55652: PUSH
55653: EMPTY
55654: LIST
55655: LIST
55656: PUSH
55657: LD_INT 2
55659: NEG
55660: PUSH
55661: LD_INT 2
55663: NEG
55664: PUSH
55665: EMPTY
55666: LIST
55667: LIST
55668: PUSH
55669: EMPTY
55670: LIST
55671: LIST
55672: LIST
55673: LIST
55674: LIST
55675: LIST
55676: LIST
55677: LIST
55678: LIST
55679: LIST
55680: LIST
55681: LIST
55682: LIST
55683: LIST
55684: LIST
55685: LIST
55686: LIST
55687: LIST
55688: LIST
55689: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55690: LD_ADDR_VAR 0 59
55694: PUSH
55695: LD_INT 0
55697: PUSH
55698: LD_INT 0
55700: PUSH
55701: EMPTY
55702: LIST
55703: LIST
55704: PUSH
55705: LD_INT 0
55707: PUSH
55708: LD_INT 1
55710: NEG
55711: PUSH
55712: EMPTY
55713: LIST
55714: LIST
55715: PUSH
55716: LD_INT 1
55718: PUSH
55719: LD_INT 0
55721: PUSH
55722: EMPTY
55723: LIST
55724: LIST
55725: PUSH
55726: LD_INT 1
55728: PUSH
55729: LD_INT 1
55731: PUSH
55732: EMPTY
55733: LIST
55734: LIST
55735: PUSH
55736: LD_INT 0
55738: PUSH
55739: LD_INT 1
55741: PUSH
55742: EMPTY
55743: LIST
55744: LIST
55745: PUSH
55746: LD_INT 1
55748: NEG
55749: PUSH
55750: LD_INT 0
55752: PUSH
55753: EMPTY
55754: LIST
55755: LIST
55756: PUSH
55757: LD_INT 1
55759: NEG
55760: PUSH
55761: LD_INT 1
55763: NEG
55764: PUSH
55765: EMPTY
55766: LIST
55767: LIST
55768: PUSH
55769: EMPTY
55770: LIST
55771: LIST
55772: LIST
55773: LIST
55774: LIST
55775: LIST
55776: LIST
55777: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55778: LD_ADDR_VAR 0 60
55782: PUSH
55783: LD_INT 0
55785: PUSH
55786: LD_INT 0
55788: PUSH
55789: EMPTY
55790: LIST
55791: LIST
55792: PUSH
55793: LD_INT 0
55795: PUSH
55796: LD_INT 1
55798: NEG
55799: PUSH
55800: EMPTY
55801: LIST
55802: LIST
55803: PUSH
55804: LD_INT 1
55806: PUSH
55807: LD_INT 0
55809: PUSH
55810: EMPTY
55811: LIST
55812: LIST
55813: PUSH
55814: LD_INT 1
55816: PUSH
55817: LD_INT 1
55819: PUSH
55820: EMPTY
55821: LIST
55822: LIST
55823: PUSH
55824: LD_INT 0
55826: PUSH
55827: LD_INT 1
55829: PUSH
55830: EMPTY
55831: LIST
55832: LIST
55833: PUSH
55834: LD_INT 1
55836: NEG
55837: PUSH
55838: LD_INT 0
55840: PUSH
55841: EMPTY
55842: LIST
55843: LIST
55844: PUSH
55845: LD_INT 1
55847: NEG
55848: PUSH
55849: LD_INT 1
55851: NEG
55852: PUSH
55853: EMPTY
55854: LIST
55855: LIST
55856: PUSH
55857: EMPTY
55858: LIST
55859: LIST
55860: LIST
55861: LIST
55862: LIST
55863: LIST
55864: LIST
55865: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55866: LD_ADDR_VAR 0 61
55870: PUSH
55871: LD_INT 0
55873: PUSH
55874: LD_INT 0
55876: PUSH
55877: EMPTY
55878: LIST
55879: LIST
55880: PUSH
55881: LD_INT 0
55883: PUSH
55884: LD_INT 1
55886: NEG
55887: PUSH
55888: EMPTY
55889: LIST
55890: LIST
55891: PUSH
55892: LD_INT 1
55894: PUSH
55895: LD_INT 0
55897: PUSH
55898: EMPTY
55899: LIST
55900: LIST
55901: PUSH
55902: LD_INT 1
55904: PUSH
55905: LD_INT 1
55907: PUSH
55908: EMPTY
55909: LIST
55910: LIST
55911: PUSH
55912: LD_INT 0
55914: PUSH
55915: LD_INT 1
55917: PUSH
55918: EMPTY
55919: LIST
55920: LIST
55921: PUSH
55922: LD_INT 1
55924: NEG
55925: PUSH
55926: LD_INT 0
55928: PUSH
55929: EMPTY
55930: LIST
55931: LIST
55932: PUSH
55933: LD_INT 1
55935: NEG
55936: PUSH
55937: LD_INT 1
55939: NEG
55940: PUSH
55941: EMPTY
55942: LIST
55943: LIST
55944: PUSH
55945: EMPTY
55946: LIST
55947: LIST
55948: LIST
55949: LIST
55950: LIST
55951: LIST
55952: LIST
55953: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55954: LD_ADDR_VAR 0 62
55958: PUSH
55959: LD_INT 0
55961: PUSH
55962: LD_INT 0
55964: PUSH
55965: EMPTY
55966: LIST
55967: LIST
55968: PUSH
55969: LD_INT 0
55971: PUSH
55972: LD_INT 1
55974: NEG
55975: PUSH
55976: EMPTY
55977: LIST
55978: LIST
55979: PUSH
55980: LD_INT 1
55982: PUSH
55983: LD_INT 0
55985: PUSH
55986: EMPTY
55987: LIST
55988: LIST
55989: PUSH
55990: LD_INT 1
55992: PUSH
55993: LD_INT 1
55995: PUSH
55996: EMPTY
55997: LIST
55998: LIST
55999: PUSH
56000: LD_INT 0
56002: PUSH
56003: LD_INT 1
56005: PUSH
56006: EMPTY
56007: LIST
56008: LIST
56009: PUSH
56010: LD_INT 1
56012: NEG
56013: PUSH
56014: LD_INT 0
56016: PUSH
56017: EMPTY
56018: LIST
56019: LIST
56020: PUSH
56021: LD_INT 1
56023: NEG
56024: PUSH
56025: LD_INT 1
56027: NEG
56028: PUSH
56029: EMPTY
56030: LIST
56031: LIST
56032: PUSH
56033: EMPTY
56034: LIST
56035: LIST
56036: LIST
56037: LIST
56038: LIST
56039: LIST
56040: LIST
56041: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56042: LD_ADDR_VAR 0 63
56046: PUSH
56047: LD_INT 0
56049: PUSH
56050: LD_INT 0
56052: PUSH
56053: EMPTY
56054: LIST
56055: LIST
56056: PUSH
56057: LD_INT 0
56059: PUSH
56060: LD_INT 1
56062: NEG
56063: PUSH
56064: EMPTY
56065: LIST
56066: LIST
56067: PUSH
56068: LD_INT 1
56070: PUSH
56071: LD_INT 0
56073: PUSH
56074: EMPTY
56075: LIST
56076: LIST
56077: PUSH
56078: LD_INT 1
56080: PUSH
56081: LD_INT 1
56083: PUSH
56084: EMPTY
56085: LIST
56086: LIST
56087: PUSH
56088: LD_INT 0
56090: PUSH
56091: LD_INT 1
56093: PUSH
56094: EMPTY
56095: LIST
56096: LIST
56097: PUSH
56098: LD_INT 1
56100: NEG
56101: PUSH
56102: LD_INT 0
56104: PUSH
56105: EMPTY
56106: LIST
56107: LIST
56108: PUSH
56109: LD_INT 1
56111: NEG
56112: PUSH
56113: LD_INT 1
56115: NEG
56116: PUSH
56117: EMPTY
56118: LIST
56119: LIST
56120: PUSH
56121: EMPTY
56122: LIST
56123: LIST
56124: LIST
56125: LIST
56126: LIST
56127: LIST
56128: LIST
56129: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56130: LD_ADDR_VAR 0 64
56134: PUSH
56135: LD_INT 0
56137: PUSH
56138: LD_INT 0
56140: PUSH
56141: EMPTY
56142: LIST
56143: LIST
56144: PUSH
56145: LD_INT 0
56147: PUSH
56148: LD_INT 1
56150: NEG
56151: PUSH
56152: EMPTY
56153: LIST
56154: LIST
56155: PUSH
56156: LD_INT 1
56158: PUSH
56159: LD_INT 0
56161: PUSH
56162: EMPTY
56163: LIST
56164: LIST
56165: PUSH
56166: LD_INT 1
56168: PUSH
56169: LD_INT 1
56171: PUSH
56172: EMPTY
56173: LIST
56174: LIST
56175: PUSH
56176: LD_INT 0
56178: PUSH
56179: LD_INT 1
56181: PUSH
56182: EMPTY
56183: LIST
56184: LIST
56185: PUSH
56186: LD_INT 1
56188: NEG
56189: PUSH
56190: LD_INT 0
56192: PUSH
56193: EMPTY
56194: LIST
56195: LIST
56196: PUSH
56197: LD_INT 1
56199: NEG
56200: PUSH
56201: LD_INT 1
56203: NEG
56204: PUSH
56205: EMPTY
56206: LIST
56207: LIST
56208: PUSH
56209: EMPTY
56210: LIST
56211: LIST
56212: LIST
56213: LIST
56214: LIST
56215: LIST
56216: LIST
56217: ST_TO_ADDR
// end ; 1 :
56218: GO 62115
56220: LD_INT 1
56222: DOUBLE
56223: EQUAL
56224: IFTRUE 56228
56226: GO 58851
56228: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56229: LD_ADDR_VAR 0 11
56233: PUSH
56234: LD_INT 1
56236: NEG
56237: PUSH
56238: LD_INT 3
56240: NEG
56241: PUSH
56242: EMPTY
56243: LIST
56244: LIST
56245: PUSH
56246: LD_INT 0
56248: PUSH
56249: LD_INT 3
56251: NEG
56252: PUSH
56253: EMPTY
56254: LIST
56255: LIST
56256: PUSH
56257: LD_INT 1
56259: PUSH
56260: LD_INT 2
56262: NEG
56263: PUSH
56264: EMPTY
56265: LIST
56266: LIST
56267: PUSH
56268: EMPTY
56269: LIST
56270: LIST
56271: LIST
56272: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56273: LD_ADDR_VAR 0 12
56277: PUSH
56278: LD_INT 2
56280: PUSH
56281: LD_INT 1
56283: NEG
56284: PUSH
56285: EMPTY
56286: LIST
56287: LIST
56288: PUSH
56289: LD_INT 3
56291: PUSH
56292: LD_INT 0
56294: PUSH
56295: EMPTY
56296: LIST
56297: LIST
56298: PUSH
56299: LD_INT 3
56301: PUSH
56302: LD_INT 1
56304: PUSH
56305: EMPTY
56306: LIST
56307: LIST
56308: PUSH
56309: EMPTY
56310: LIST
56311: LIST
56312: LIST
56313: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56314: LD_ADDR_VAR 0 13
56318: PUSH
56319: LD_INT 3
56321: PUSH
56322: LD_INT 2
56324: PUSH
56325: EMPTY
56326: LIST
56327: LIST
56328: PUSH
56329: LD_INT 3
56331: PUSH
56332: LD_INT 3
56334: PUSH
56335: EMPTY
56336: LIST
56337: LIST
56338: PUSH
56339: LD_INT 2
56341: PUSH
56342: LD_INT 3
56344: PUSH
56345: EMPTY
56346: LIST
56347: LIST
56348: PUSH
56349: EMPTY
56350: LIST
56351: LIST
56352: LIST
56353: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56354: LD_ADDR_VAR 0 14
56358: PUSH
56359: LD_INT 1
56361: PUSH
56362: LD_INT 3
56364: PUSH
56365: EMPTY
56366: LIST
56367: LIST
56368: PUSH
56369: LD_INT 0
56371: PUSH
56372: LD_INT 3
56374: PUSH
56375: EMPTY
56376: LIST
56377: LIST
56378: PUSH
56379: LD_INT 1
56381: NEG
56382: PUSH
56383: LD_INT 2
56385: PUSH
56386: EMPTY
56387: LIST
56388: LIST
56389: PUSH
56390: EMPTY
56391: LIST
56392: LIST
56393: LIST
56394: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56395: LD_ADDR_VAR 0 15
56399: PUSH
56400: LD_INT 2
56402: NEG
56403: PUSH
56404: LD_INT 1
56406: PUSH
56407: EMPTY
56408: LIST
56409: LIST
56410: PUSH
56411: LD_INT 3
56413: NEG
56414: PUSH
56415: LD_INT 0
56417: PUSH
56418: EMPTY
56419: LIST
56420: LIST
56421: PUSH
56422: LD_INT 3
56424: NEG
56425: PUSH
56426: LD_INT 1
56428: NEG
56429: PUSH
56430: EMPTY
56431: LIST
56432: LIST
56433: PUSH
56434: EMPTY
56435: LIST
56436: LIST
56437: LIST
56438: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56439: LD_ADDR_VAR 0 16
56443: PUSH
56444: LD_INT 2
56446: NEG
56447: PUSH
56448: LD_INT 3
56450: NEG
56451: PUSH
56452: EMPTY
56453: LIST
56454: LIST
56455: PUSH
56456: LD_INT 3
56458: NEG
56459: PUSH
56460: LD_INT 2
56462: NEG
56463: PUSH
56464: EMPTY
56465: LIST
56466: LIST
56467: PUSH
56468: LD_INT 3
56470: NEG
56471: PUSH
56472: LD_INT 3
56474: NEG
56475: PUSH
56476: EMPTY
56477: LIST
56478: LIST
56479: PUSH
56480: EMPTY
56481: LIST
56482: LIST
56483: LIST
56484: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56485: LD_ADDR_VAR 0 17
56489: PUSH
56490: LD_INT 1
56492: NEG
56493: PUSH
56494: LD_INT 3
56496: NEG
56497: PUSH
56498: EMPTY
56499: LIST
56500: LIST
56501: PUSH
56502: LD_INT 0
56504: PUSH
56505: LD_INT 3
56507: NEG
56508: PUSH
56509: EMPTY
56510: LIST
56511: LIST
56512: PUSH
56513: LD_INT 1
56515: PUSH
56516: LD_INT 2
56518: NEG
56519: PUSH
56520: EMPTY
56521: LIST
56522: LIST
56523: PUSH
56524: EMPTY
56525: LIST
56526: LIST
56527: LIST
56528: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56529: LD_ADDR_VAR 0 18
56533: PUSH
56534: LD_INT 2
56536: PUSH
56537: LD_INT 1
56539: NEG
56540: PUSH
56541: EMPTY
56542: LIST
56543: LIST
56544: PUSH
56545: LD_INT 3
56547: PUSH
56548: LD_INT 0
56550: PUSH
56551: EMPTY
56552: LIST
56553: LIST
56554: PUSH
56555: LD_INT 3
56557: PUSH
56558: LD_INT 1
56560: PUSH
56561: EMPTY
56562: LIST
56563: LIST
56564: PUSH
56565: EMPTY
56566: LIST
56567: LIST
56568: LIST
56569: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56570: LD_ADDR_VAR 0 19
56574: PUSH
56575: LD_INT 3
56577: PUSH
56578: LD_INT 2
56580: PUSH
56581: EMPTY
56582: LIST
56583: LIST
56584: PUSH
56585: LD_INT 3
56587: PUSH
56588: LD_INT 3
56590: PUSH
56591: EMPTY
56592: LIST
56593: LIST
56594: PUSH
56595: LD_INT 2
56597: PUSH
56598: LD_INT 3
56600: PUSH
56601: EMPTY
56602: LIST
56603: LIST
56604: PUSH
56605: EMPTY
56606: LIST
56607: LIST
56608: LIST
56609: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56610: LD_ADDR_VAR 0 20
56614: PUSH
56615: LD_INT 1
56617: PUSH
56618: LD_INT 3
56620: PUSH
56621: EMPTY
56622: LIST
56623: LIST
56624: PUSH
56625: LD_INT 0
56627: PUSH
56628: LD_INT 3
56630: PUSH
56631: EMPTY
56632: LIST
56633: LIST
56634: PUSH
56635: LD_INT 1
56637: NEG
56638: PUSH
56639: LD_INT 2
56641: PUSH
56642: EMPTY
56643: LIST
56644: LIST
56645: PUSH
56646: EMPTY
56647: LIST
56648: LIST
56649: LIST
56650: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56651: LD_ADDR_VAR 0 21
56655: PUSH
56656: LD_INT 2
56658: NEG
56659: PUSH
56660: LD_INT 1
56662: PUSH
56663: EMPTY
56664: LIST
56665: LIST
56666: PUSH
56667: LD_INT 3
56669: NEG
56670: PUSH
56671: LD_INT 0
56673: PUSH
56674: EMPTY
56675: LIST
56676: LIST
56677: PUSH
56678: LD_INT 3
56680: NEG
56681: PUSH
56682: LD_INT 1
56684: NEG
56685: PUSH
56686: EMPTY
56687: LIST
56688: LIST
56689: PUSH
56690: EMPTY
56691: LIST
56692: LIST
56693: LIST
56694: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56695: LD_ADDR_VAR 0 22
56699: PUSH
56700: LD_INT 2
56702: NEG
56703: PUSH
56704: LD_INT 3
56706: NEG
56707: PUSH
56708: EMPTY
56709: LIST
56710: LIST
56711: PUSH
56712: LD_INT 3
56714: NEG
56715: PUSH
56716: LD_INT 2
56718: NEG
56719: PUSH
56720: EMPTY
56721: LIST
56722: LIST
56723: PUSH
56724: LD_INT 3
56726: NEG
56727: PUSH
56728: LD_INT 3
56730: NEG
56731: PUSH
56732: EMPTY
56733: LIST
56734: LIST
56735: PUSH
56736: EMPTY
56737: LIST
56738: LIST
56739: LIST
56740: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
56741: LD_ADDR_VAR 0 23
56745: PUSH
56746: LD_INT 0
56748: PUSH
56749: LD_INT 3
56751: NEG
56752: PUSH
56753: EMPTY
56754: LIST
56755: LIST
56756: PUSH
56757: LD_INT 1
56759: NEG
56760: PUSH
56761: LD_INT 4
56763: NEG
56764: PUSH
56765: EMPTY
56766: LIST
56767: LIST
56768: PUSH
56769: LD_INT 1
56771: PUSH
56772: LD_INT 3
56774: NEG
56775: PUSH
56776: EMPTY
56777: LIST
56778: LIST
56779: PUSH
56780: EMPTY
56781: LIST
56782: LIST
56783: LIST
56784: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
56785: LD_ADDR_VAR 0 24
56789: PUSH
56790: LD_INT 3
56792: PUSH
56793: LD_INT 0
56795: PUSH
56796: EMPTY
56797: LIST
56798: LIST
56799: PUSH
56800: LD_INT 3
56802: PUSH
56803: LD_INT 1
56805: NEG
56806: PUSH
56807: EMPTY
56808: LIST
56809: LIST
56810: PUSH
56811: LD_INT 4
56813: PUSH
56814: LD_INT 1
56816: PUSH
56817: EMPTY
56818: LIST
56819: LIST
56820: PUSH
56821: EMPTY
56822: LIST
56823: LIST
56824: LIST
56825: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
56826: LD_ADDR_VAR 0 25
56830: PUSH
56831: LD_INT 3
56833: PUSH
56834: LD_INT 3
56836: PUSH
56837: EMPTY
56838: LIST
56839: LIST
56840: PUSH
56841: LD_INT 4
56843: PUSH
56844: LD_INT 3
56846: PUSH
56847: EMPTY
56848: LIST
56849: LIST
56850: PUSH
56851: LD_INT 3
56853: PUSH
56854: LD_INT 4
56856: PUSH
56857: EMPTY
56858: LIST
56859: LIST
56860: PUSH
56861: EMPTY
56862: LIST
56863: LIST
56864: LIST
56865: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
56866: LD_ADDR_VAR 0 26
56870: PUSH
56871: LD_INT 0
56873: PUSH
56874: LD_INT 3
56876: PUSH
56877: EMPTY
56878: LIST
56879: LIST
56880: PUSH
56881: LD_INT 1
56883: PUSH
56884: LD_INT 4
56886: PUSH
56887: EMPTY
56888: LIST
56889: LIST
56890: PUSH
56891: LD_INT 1
56893: NEG
56894: PUSH
56895: LD_INT 3
56897: PUSH
56898: EMPTY
56899: LIST
56900: LIST
56901: PUSH
56902: EMPTY
56903: LIST
56904: LIST
56905: LIST
56906: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
56907: LD_ADDR_VAR 0 27
56911: PUSH
56912: LD_INT 3
56914: NEG
56915: PUSH
56916: LD_INT 0
56918: PUSH
56919: EMPTY
56920: LIST
56921: LIST
56922: PUSH
56923: LD_INT 3
56925: NEG
56926: PUSH
56927: LD_INT 1
56929: PUSH
56930: EMPTY
56931: LIST
56932: LIST
56933: PUSH
56934: LD_INT 4
56936: NEG
56937: PUSH
56938: LD_INT 1
56940: NEG
56941: PUSH
56942: EMPTY
56943: LIST
56944: LIST
56945: PUSH
56946: EMPTY
56947: LIST
56948: LIST
56949: LIST
56950: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
56951: LD_ADDR_VAR 0 28
56955: PUSH
56956: LD_INT 3
56958: NEG
56959: PUSH
56960: LD_INT 3
56962: NEG
56963: PUSH
56964: EMPTY
56965: LIST
56966: LIST
56967: PUSH
56968: LD_INT 3
56970: NEG
56971: PUSH
56972: LD_INT 4
56974: NEG
56975: PUSH
56976: EMPTY
56977: LIST
56978: LIST
56979: PUSH
56980: LD_INT 4
56982: NEG
56983: PUSH
56984: LD_INT 3
56986: NEG
56987: PUSH
56988: EMPTY
56989: LIST
56990: LIST
56991: PUSH
56992: EMPTY
56993: LIST
56994: LIST
56995: LIST
56996: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
56997: LD_ADDR_VAR 0 29
57001: PUSH
57002: LD_INT 1
57004: NEG
57005: PUSH
57006: LD_INT 3
57008: NEG
57009: PUSH
57010: EMPTY
57011: LIST
57012: LIST
57013: PUSH
57014: LD_INT 0
57016: PUSH
57017: LD_INT 3
57019: NEG
57020: PUSH
57021: EMPTY
57022: LIST
57023: LIST
57024: PUSH
57025: LD_INT 1
57027: PUSH
57028: LD_INT 2
57030: NEG
57031: PUSH
57032: EMPTY
57033: LIST
57034: LIST
57035: PUSH
57036: LD_INT 1
57038: NEG
57039: PUSH
57040: LD_INT 4
57042: NEG
57043: PUSH
57044: EMPTY
57045: LIST
57046: LIST
57047: PUSH
57048: LD_INT 0
57050: PUSH
57051: LD_INT 4
57053: NEG
57054: PUSH
57055: EMPTY
57056: LIST
57057: LIST
57058: PUSH
57059: LD_INT 1
57061: PUSH
57062: LD_INT 3
57064: NEG
57065: PUSH
57066: EMPTY
57067: LIST
57068: LIST
57069: PUSH
57070: LD_INT 1
57072: NEG
57073: PUSH
57074: LD_INT 5
57076: NEG
57077: PUSH
57078: EMPTY
57079: LIST
57080: LIST
57081: PUSH
57082: LD_INT 0
57084: PUSH
57085: LD_INT 5
57087: NEG
57088: PUSH
57089: EMPTY
57090: LIST
57091: LIST
57092: PUSH
57093: LD_INT 1
57095: PUSH
57096: LD_INT 4
57098: NEG
57099: PUSH
57100: EMPTY
57101: LIST
57102: LIST
57103: PUSH
57104: LD_INT 1
57106: NEG
57107: PUSH
57108: LD_INT 6
57110: NEG
57111: PUSH
57112: EMPTY
57113: LIST
57114: LIST
57115: PUSH
57116: LD_INT 0
57118: PUSH
57119: LD_INT 6
57121: NEG
57122: PUSH
57123: EMPTY
57124: LIST
57125: LIST
57126: PUSH
57127: LD_INT 1
57129: PUSH
57130: LD_INT 5
57132: NEG
57133: PUSH
57134: EMPTY
57135: LIST
57136: LIST
57137: PUSH
57138: EMPTY
57139: LIST
57140: LIST
57141: LIST
57142: LIST
57143: LIST
57144: LIST
57145: LIST
57146: LIST
57147: LIST
57148: LIST
57149: LIST
57150: LIST
57151: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
57152: LD_ADDR_VAR 0 30
57156: PUSH
57157: LD_INT 2
57159: PUSH
57160: LD_INT 1
57162: NEG
57163: PUSH
57164: EMPTY
57165: LIST
57166: LIST
57167: PUSH
57168: LD_INT 3
57170: PUSH
57171: LD_INT 0
57173: PUSH
57174: EMPTY
57175: LIST
57176: LIST
57177: PUSH
57178: LD_INT 3
57180: PUSH
57181: LD_INT 1
57183: PUSH
57184: EMPTY
57185: LIST
57186: LIST
57187: PUSH
57188: LD_INT 3
57190: PUSH
57191: LD_INT 1
57193: NEG
57194: PUSH
57195: EMPTY
57196: LIST
57197: LIST
57198: PUSH
57199: LD_INT 4
57201: PUSH
57202: LD_INT 0
57204: PUSH
57205: EMPTY
57206: LIST
57207: LIST
57208: PUSH
57209: LD_INT 4
57211: PUSH
57212: LD_INT 1
57214: PUSH
57215: EMPTY
57216: LIST
57217: LIST
57218: PUSH
57219: LD_INT 4
57221: PUSH
57222: LD_INT 1
57224: NEG
57225: PUSH
57226: EMPTY
57227: LIST
57228: LIST
57229: PUSH
57230: LD_INT 5
57232: PUSH
57233: LD_INT 0
57235: PUSH
57236: EMPTY
57237: LIST
57238: LIST
57239: PUSH
57240: LD_INT 5
57242: PUSH
57243: LD_INT 1
57245: PUSH
57246: EMPTY
57247: LIST
57248: LIST
57249: PUSH
57250: LD_INT 5
57252: PUSH
57253: LD_INT 1
57255: NEG
57256: PUSH
57257: EMPTY
57258: LIST
57259: LIST
57260: PUSH
57261: LD_INT 6
57263: PUSH
57264: LD_INT 0
57266: PUSH
57267: EMPTY
57268: LIST
57269: LIST
57270: PUSH
57271: LD_INT 6
57273: PUSH
57274: LD_INT 1
57276: PUSH
57277: EMPTY
57278: LIST
57279: LIST
57280: PUSH
57281: EMPTY
57282: LIST
57283: LIST
57284: LIST
57285: LIST
57286: LIST
57287: LIST
57288: LIST
57289: LIST
57290: LIST
57291: LIST
57292: LIST
57293: LIST
57294: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
57295: LD_ADDR_VAR 0 31
57299: PUSH
57300: LD_INT 3
57302: PUSH
57303: LD_INT 2
57305: PUSH
57306: EMPTY
57307: LIST
57308: LIST
57309: PUSH
57310: LD_INT 3
57312: PUSH
57313: LD_INT 3
57315: PUSH
57316: EMPTY
57317: LIST
57318: LIST
57319: PUSH
57320: LD_INT 2
57322: PUSH
57323: LD_INT 3
57325: PUSH
57326: EMPTY
57327: LIST
57328: LIST
57329: PUSH
57330: LD_INT 4
57332: PUSH
57333: LD_INT 3
57335: PUSH
57336: EMPTY
57337: LIST
57338: LIST
57339: PUSH
57340: LD_INT 4
57342: PUSH
57343: LD_INT 4
57345: PUSH
57346: EMPTY
57347: LIST
57348: LIST
57349: PUSH
57350: LD_INT 3
57352: PUSH
57353: LD_INT 4
57355: PUSH
57356: EMPTY
57357: LIST
57358: LIST
57359: PUSH
57360: LD_INT 5
57362: PUSH
57363: LD_INT 4
57365: PUSH
57366: EMPTY
57367: LIST
57368: LIST
57369: PUSH
57370: LD_INT 5
57372: PUSH
57373: LD_INT 5
57375: PUSH
57376: EMPTY
57377: LIST
57378: LIST
57379: PUSH
57380: LD_INT 4
57382: PUSH
57383: LD_INT 5
57385: PUSH
57386: EMPTY
57387: LIST
57388: LIST
57389: PUSH
57390: LD_INT 6
57392: PUSH
57393: LD_INT 5
57395: PUSH
57396: EMPTY
57397: LIST
57398: LIST
57399: PUSH
57400: LD_INT 6
57402: PUSH
57403: LD_INT 6
57405: PUSH
57406: EMPTY
57407: LIST
57408: LIST
57409: PUSH
57410: LD_INT 5
57412: PUSH
57413: LD_INT 6
57415: PUSH
57416: EMPTY
57417: LIST
57418: LIST
57419: PUSH
57420: EMPTY
57421: LIST
57422: LIST
57423: LIST
57424: LIST
57425: LIST
57426: LIST
57427: LIST
57428: LIST
57429: LIST
57430: LIST
57431: LIST
57432: LIST
57433: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
57434: LD_ADDR_VAR 0 32
57438: PUSH
57439: LD_INT 1
57441: PUSH
57442: LD_INT 3
57444: PUSH
57445: EMPTY
57446: LIST
57447: LIST
57448: PUSH
57449: LD_INT 0
57451: PUSH
57452: LD_INT 3
57454: PUSH
57455: EMPTY
57456: LIST
57457: LIST
57458: PUSH
57459: LD_INT 1
57461: NEG
57462: PUSH
57463: LD_INT 2
57465: PUSH
57466: EMPTY
57467: LIST
57468: LIST
57469: PUSH
57470: LD_INT 1
57472: PUSH
57473: LD_INT 4
57475: PUSH
57476: EMPTY
57477: LIST
57478: LIST
57479: PUSH
57480: LD_INT 0
57482: PUSH
57483: LD_INT 4
57485: PUSH
57486: EMPTY
57487: LIST
57488: LIST
57489: PUSH
57490: LD_INT 1
57492: NEG
57493: PUSH
57494: LD_INT 3
57496: PUSH
57497: EMPTY
57498: LIST
57499: LIST
57500: PUSH
57501: LD_INT 1
57503: PUSH
57504: LD_INT 5
57506: PUSH
57507: EMPTY
57508: LIST
57509: LIST
57510: PUSH
57511: LD_INT 0
57513: PUSH
57514: LD_INT 5
57516: PUSH
57517: EMPTY
57518: LIST
57519: LIST
57520: PUSH
57521: LD_INT 1
57523: NEG
57524: PUSH
57525: LD_INT 4
57527: PUSH
57528: EMPTY
57529: LIST
57530: LIST
57531: PUSH
57532: LD_INT 1
57534: PUSH
57535: LD_INT 6
57537: PUSH
57538: EMPTY
57539: LIST
57540: LIST
57541: PUSH
57542: LD_INT 0
57544: PUSH
57545: LD_INT 6
57547: PUSH
57548: EMPTY
57549: LIST
57550: LIST
57551: PUSH
57552: LD_INT 1
57554: NEG
57555: PUSH
57556: LD_INT 5
57558: PUSH
57559: EMPTY
57560: LIST
57561: LIST
57562: PUSH
57563: EMPTY
57564: LIST
57565: LIST
57566: LIST
57567: LIST
57568: LIST
57569: LIST
57570: LIST
57571: LIST
57572: LIST
57573: LIST
57574: LIST
57575: LIST
57576: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
57577: LD_ADDR_VAR 0 33
57581: PUSH
57582: LD_INT 2
57584: NEG
57585: PUSH
57586: LD_INT 1
57588: PUSH
57589: EMPTY
57590: LIST
57591: LIST
57592: PUSH
57593: LD_INT 3
57595: NEG
57596: PUSH
57597: LD_INT 0
57599: PUSH
57600: EMPTY
57601: LIST
57602: LIST
57603: PUSH
57604: LD_INT 3
57606: NEG
57607: PUSH
57608: LD_INT 1
57610: NEG
57611: PUSH
57612: EMPTY
57613: LIST
57614: LIST
57615: PUSH
57616: LD_INT 3
57618: NEG
57619: PUSH
57620: LD_INT 1
57622: PUSH
57623: EMPTY
57624: LIST
57625: LIST
57626: PUSH
57627: LD_INT 4
57629: NEG
57630: PUSH
57631: LD_INT 0
57633: PUSH
57634: EMPTY
57635: LIST
57636: LIST
57637: PUSH
57638: LD_INT 4
57640: NEG
57641: PUSH
57642: LD_INT 1
57644: NEG
57645: PUSH
57646: EMPTY
57647: LIST
57648: LIST
57649: PUSH
57650: LD_INT 4
57652: NEG
57653: PUSH
57654: LD_INT 1
57656: PUSH
57657: EMPTY
57658: LIST
57659: LIST
57660: PUSH
57661: LD_INT 5
57663: NEG
57664: PUSH
57665: LD_INT 0
57667: PUSH
57668: EMPTY
57669: LIST
57670: LIST
57671: PUSH
57672: LD_INT 5
57674: NEG
57675: PUSH
57676: LD_INT 1
57678: NEG
57679: PUSH
57680: EMPTY
57681: LIST
57682: LIST
57683: PUSH
57684: LD_INT 5
57686: NEG
57687: PUSH
57688: LD_INT 1
57690: PUSH
57691: EMPTY
57692: LIST
57693: LIST
57694: PUSH
57695: LD_INT 6
57697: NEG
57698: PUSH
57699: LD_INT 0
57701: PUSH
57702: EMPTY
57703: LIST
57704: LIST
57705: PUSH
57706: LD_INT 6
57708: NEG
57709: PUSH
57710: LD_INT 1
57712: NEG
57713: PUSH
57714: EMPTY
57715: LIST
57716: LIST
57717: PUSH
57718: EMPTY
57719: LIST
57720: LIST
57721: LIST
57722: LIST
57723: LIST
57724: LIST
57725: LIST
57726: LIST
57727: LIST
57728: LIST
57729: LIST
57730: LIST
57731: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
57732: LD_ADDR_VAR 0 34
57736: PUSH
57737: LD_INT 2
57739: NEG
57740: PUSH
57741: LD_INT 3
57743: NEG
57744: PUSH
57745: EMPTY
57746: LIST
57747: LIST
57748: PUSH
57749: LD_INT 3
57751: NEG
57752: PUSH
57753: LD_INT 2
57755: NEG
57756: PUSH
57757: EMPTY
57758: LIST
57759: LIST
57760: PUSH
57761: LD_INT 3
57763: NEG
57764: PUSH
57765: LD_INT 3
57767: NEG
57768: PUSH
57769: EMPTY
57770: LIST
57771: LIST
57772: PUSH
57773: LD_INT 3
57775: NEG
57776: PUSH
57777: LD_INT 4
57779: NEG
57780: PUSH
57781: EMPTY
57782: LIST
57783: LIST
57784: PUSH
57785: LD_INT 4
57787: NEG
57788: PUSH
57789: LD_INT 3
57791: NEG
57792: PUSH
57793: EMPTY
57794: LIST
57795: LIST
57796: PUSH
57797: LD_INT 4
57799: NEG
57800: PUSH
57801: LD_INT 4
57803: NEG
57804: PUSH
57805: EMPTY
57806: LIST
57807: LIST
57808: PUSH
57809: LD_INT 4
57811: NEG
57812: PUSH
57813: LD_INT 5
57815: NEG
57816: PUSH
57817: EMPTY
57818: LIST
57819: LIST
57820: PUSH
57821: LD_INT 5
57823: NEG
57824: PUSH
57825: LD_INT 4
57827: NEG
57828: PUSH
57829: EMPTY
57830: LIST
57831: LIST
57832: PUSH
57833: LD_INT 5
57835: NEG
57836: PUSH
57837: LD_INT 5
57839: NEG
57840: PUSH
57841: EMPTY
57842: LIST
57843: LIST
57844: PUSH
57845: LD_INT 5
57847: NEG
57848: PUSH
57849: LD_INT 6
57851: NEG
57852: PUSH
57853: EMPTY
57854: LIST
57855: LIST
57856: PUSH
57857: LD_INT 6
57859: NEG
57860: PUSH
57861: LD_INT 5
57863: NEG
57864: PUSH
57865: EMPTY
57866: LIST
57867: LIST
57868: PUSH
57869: LD_INT 6
57871: NEG
57872: PUSH
57873: LD_INT 6
57875: NEG
57876: PUSH
57877: EMPTY
57878: LIST
57879: LIST
57880: PUSH
57881: EMPTY
57882: LIST
57883: LIST
57884: LIST
57885: LIST
57886: LIST
57887: LIST
57888: LIST
57889: LIST
57890: LIST
57891: LIST
57892: LIST
57893: LIST
57894: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
57895: LD_ADDR_VAR 0 41
57899: PUSH
57900: LD_INT 0
57902: PUSH
57903: LD_INT 2
57905: NEG
57906: PUSH
57907: EMPTY
57908: LIST
57909: LIST
57910: PUSH
57911: LD_INT 1
57913: NEG
57914: PUSH
57915: LD_INT 3
57917: NEG
57918: PUSH
57919: EMPTY
57920: LIST
57921: LIST
57922: PUSH
57923: LD_INT 1
57925: PUSH
57926: LD_INT 2
57928: NEG
57929: PUSH
57930: EMPTY
57931: LIST
57932: LIST
57933: PUSH
57934: EMPTY
57935: LIST
57936: LIST
57937: LIST
57938: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
57939: LD_ADDR_VAR 0 42
57943: PUSH
57944: LD_INT 2
57946: PUSH
57947: LD_INT 0
57949: PUSH
57950: EMPTY
57951: LIST
57952: LIST
57953: PUSH
57954: LD_INT 2
57956: PUSH
57957: LD_INT 1
57959: NEG
57960: PUSH
57961: EMPTY
57962: LIST
57963: LIST
57964: PUSH
57965: LD_INT 3
57967: PUSH
57968: LD_INT 1
57970: PUSH
57971: EMPTY
57972: LIST
57973: LIST
57974: PUSH
57975: EMPTY
57976: LIST
57977: LIST
57978: LIST
57979: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
57980: LD_ADDR_VAR 0 43
57984: PUSH
57985: LD_INT 2
57987: PUSH
57988: LD_INT 2
57990: PUSH
57991: EMPTY
57992: LIST
57993: LIST
57994: PUSH
57995: LD_INT 3
57997: PUSH
57998: LD_INT 2
58000: PUSH
58001: EMPTY
58002: LIST
58003: LIST
58004: PUSH
58005: LD_INT 2
58007: PUSH
58008: LD_INT 3
58010: PUSH
58011: EMPTY
58012: LIST
58013: LIST
58014: PUSH
58015: EMPTY
58016: LIST
58017: LIST
58018: LIST
58019: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
58020: LD_ADDR_VAR 0 44
58024: PUSH
58025: LD_INT 0
58027: PUSH
58028: LD_INT 2
58030: PUSH
58031: EMPTY
58032: LIST
58033: LIST
58034: PUSH
58035: LD_INT 1
58037: PUSH
58038: LD_INT 3
58040: PUSH
58041: EMPTY
58042: LIST
58043: LIST
58044: PUSH
58045: LD_INT 1
58047: NEG
58048: PUSH
58049: LD_INT 2
58051: PUSH
58052: EMPTY
58053: LIST
58054: LIST
58055: PUSH
58056: EMPTY
58057: LIST
58058: LIST
58059: LIST
58060: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58061: LD_ADDR_VAR 0 45
58065: PUSH
58066: LD_INT 2
58068: NEG
58069: PUSH
58070: LD_INT 0
58072: PUSH
58073: EMPTY
58074: LIST
58075: LIST
58076: PUSH
58077: LD_INT 2
58079: NEG
58080: PUSH
58081: LD_INT 1
58083: PUSH
58084: EMPTY
58085: LIST
58086: LIST
58087: PUSH
58088: LD_INT 3
58090: NEG
58091: PUSH
58092: LD_INT 1
58094: NEG
58095: PUSH
58096: EMPTY
58097: LIST
58098: LIST
58099: PUSH
58100: EMPTY
58101: LIST
58102: LIST
58103: LIST
58104: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
58105: LD_ADDR_VAR 0 46
58109: PUSH
58110: LD_INT 2
58112: NEG
58113: PUSH
58114: LD_INT 2
58116: NEG
58117: PUSH
58118: EMPTY
58119: LIST
58120: LIST
58121: PUSH
58122: LD_INT 2
58124: NEG
58125: PUSH
58126: LD_INT 3
58128: NEG
58129: PUSH
58130: EMPTY
58131: LIST
58132: LIST
58133: PUSH
58134: LD_INT 3
58136: NEG
58137: PUSH
58138: LD_INT 2
58140: NEG
58141: PUSH
58142: EMPTY
58143: LIST
58144: LIST
58145: PUSH
58146: EMPTY
58147: LIST
58148: LIST
58149: LIST
58150: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
58151: LD_ADDR_VAR 0 47
58155: PUSH
58156: LD_INT 2
58158: NEG
58159: PUSH
58160: LD_INT 3
58162: NEG
58163: PUSH
58164: EMPTY
58165: LIST
58166: LIST
58167: PUSH
58168: LD_INT 1
58170: NEG
58171: PUSH
58172: LD_INT 3
58174: NEG
58175: PUSH
58176: EMPTY
58177: LIST
58178: LIST
58179: PUSH
58180: EMPTY
58181: LIST
58182: LIST
58183: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
58184: LD_ADDR_VAR 0 48
58188: PUSH
58189: LD_INT 1
58191: PUSH
58192: LD_INT 2
58194: NEG
58195: PUSH
58196: EMPTY
58197: LIST
58198: LIST
58199: PUSH
58200: LD_INT 2
58202: PUSH
58203: LD_INT 1
58205: NEG
58206: PUSH
58207: EMPTY
58208: LIST
58209: LIST
58210: PUSH
58211: EMPTY
58212: LIST
58213: LIST
58214: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
58215: LD_ADDR_VAR 0 49
58219: PUSH
58220: LD_INT 3
58222: PUSH
58223: LD_INT 1
58225: PUSH
58226: EMPTY
58227: LIST
58228: LIST
58229: PUSH
58230: LD_INT 3
58232: PUSH
58233: LD_INT 2
58235: PUSH
58236: EMPTY
58237: LIST
58238: LIST
58239: PUSH
58240: EMPTY
58241: LIST
58242: LIST
58243: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
58244: LD_ADDR_VAR 0 50
58248: PUSH
58249: LD_INT 2
58251: PUSH
58252: LD_INT 3
58254: PUSH
58255: EMPTY
58256: LIST
58257: LIST
58258: PUSH
58259: LD_INT 1
58261: PUSH
58262: LD_INT 3
58264: PUSH
58265: EMPTY
58266: LIST
58267: LIST
58268: PUSH
58269: EMPTY
58270: LIST
58271: LIST
58272: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
58273: LD_ADDR_VAR 0 51
58277: PUSH
58278: LD_INT 1
58280: NEG
58281: PUSH
58282: LD_INT 2
58284: PUSH
58285: EMPTY
58286: LIST
58287: LIST
58288: PUSH
58289: LD_INT 2
58291: NEG
58292: PUSH
58293: LD_INT 1
58295: PUSH
58296: EMPTY
58297: LIST
58298: LIST
58299: PUSH
58300: EMPTY
58301: LIST
58302: LIST
58303: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
58304: LD_ADDR_VAR 0 52
58308: PUSH
58309: LD_INT 3
58311: NEG
58312: PUSH
58313: LD_INT 1
58315: NEG
58316: PUSH
58317: EMPTY
58318: LIST
58319: LIST
58320: PUSH
58321: LD_INT 3
58323: NEG
58324: PUSH
58325: LD_INT 2
58327: NEG
58328: PUSH
58329: EMPTY
58330: LIST
58331: LIST
58332: PUSH
58333: EMPTY
58334: LIST
58335: LIST
58336: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
58337: LD_ADDR_VAR 0 53
58341: PUSH
58342: LD_INT 1
58344: NEG
58345: PUSH
58346: LD_INT 3
58348: NEG
58349: PUSH
58350: EMPTY
58351: LIST
58352: LIST
58353: PUSH
58354: LD_INT 0
58356: PUSH
58357: LD_INT 3
58359: NEG
58360: PUSH
58361: EMPTY
58362: LIST
58363: LIST
58364: PUSH
58365: LD_INT 1
58367: PUSH
58368: LD_INT 2
58370: NEG
58371: PUSH
58372: EMPTY
58373: LIST
58374: LIST
58375: PUSH
58376: EMPTY
58377: LIST
58378: LIST
58379: LIST
58380: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
58381: LD_ADDR_VAR 0 54
58385: PUSH
58386: LD_INT 2
58388: PUSH
58389: LD_INT 1
58391: NEG
58392: PUSH
58393: EMPTY
58394: LIST
58395: LIST
58396: PUSH
58397: LD_INT 3
58399: PUSH
58400: LD_INT 0
58402: PUSH
58403: EMPTY
58404: LIST
58405: LIST
58406: PUSH
58407: LD_INT 3
58409: PUSH
58410: LD_INT 1
58412: PUSH
58413: EMPTY
58414: LIST
58415: LIST
58416: PUSH
58417: EMPTY
58418: LIST
58419: LIST
58420: LIST
58421: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
58422: LD_ADDR_VAR 0 55
58426: PUSH
58427: LD_INT 3
58429: PUSH
58430: LD_INT 2
58432: PUSH
58433: EMPTY
58434: LIST
58435: LIST
58436: PUSH
58437: LD_INT 3
58439: PUSH
58440: LD_INT 3
58442: PUSH
58443: EMPTY
58444: LIST
58445: LIST
58446: PUSH
58447: LD_INT 2
58449: PUSH
58450: LD_INT 3
58452: PUSH
58453: EMPTY
58454: LIST
58455: LIST
58456: PUSH
58457: EMPTY
58458: LIST
58459: LIST
58460: LIST
58461: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
58462: LD_ADDR_VAR 0 56
58466: PUSH
58467: LD_INT 1
58469: PUSH
58470: LD_INT 3
58472: PUSH
58473: EMPTY
58474: LIST
58475: LIST
58476: PUSH
58477: LD_INT 0
58479: PUSH
58480: LD_INT 3
58482: PUSH
58483: EMPTY
58484: LIST
58485: LIST
58486: PUSH
58487: LD_INT 1
58489: NEG
58490: PUSH
58491: LD_INT 2
58493: PUSH
58494: EMPTY
58495: LIST
58496: LIST
58497: PUSH
58498: EMPTY
58499: LIST
58500: LIST
58501: LIST
58502: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58503: LD_ADDR_VAR 0 57
58507: PUSH
58508: LD_INT 2
58510: NEG
58511: PUSH
58512: LD_INT 1
58514: PUSH
58515: EMPTY
58516: LIST
58517: LIST
58518: PUSH
58519: LD_INT 3
58521: NEG
58522: PUSH
58523: LD_INT 0
58525: PUSH
58526: EMPTY
58527: LIST
58528: LIST
58529: PUSH
58530: LD_INT 3
58532: NEG
58533: PUSH
58534: LD_INT 1
58536: NEG
58537: PUSH
58538: EMPTY
58539: LIST
58540: LIST
58541: PUSH
58542: EMPTY
58543: LIST
58544: LIST
58545: LIST
58546: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58547: LD_ADDR_VAR 0 58
58551: PUSH
58552: LD_INT 2
58554: NEG
58555: PUSH
58556: LD_INT 3
58558: NEG
58559: PUSH
58560: EMPTY
58561: LIST
58562: LIST
58563: PUSH
58564: LD_INT 3
58566: NEG
58567: PUSH
58568: LD_INT 2
58570: NEG
58571: PUSH
58572: EMPTY
58573: LIST
58574: LIST
58575: PUSH
58576: LD_INT 3
58578: NEG
58579: PUSH
58580: LD_INT 3
58582: NEG
58583: PUSH
58584: EMPTY
58585: LIST
58586: LIST
58587: PUSH
58588: EMPTY
58589: LIST
58590: LIST
58591: LIST
58592: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
58593: LD_ADDR_VAR 0 59
58597: PUSH
58598: LD_INT 1
58600: NEG
58601: PUSH
58602: LD_INT 2
58604: NEG
58605: PUSH
58606: EMPTY
58607: LIST
58608: LIST
58609: PUSH
58610: LD_INT 0
58612: PUSH
58613: LD_INT 2
58615: NEG
58616: PUSH
58617: EMPTY
58618: LIST
58619: LIST
58620: PUSH
58621: LD_INT 1
58623: PUSH
58624: LD_INT 1
58626: NEG
58627: PUSH
58628: EMPTY
58629: LIST
58630: LIST
58631: PUSH
58632: EMPTY
58633: LIST
58634: LIST
58635: LIST
58636: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
58637: LD_ADDR_VAR 0 60
58641: PUSH
58642: LD_INT 1
58644: PUSH
58645: LD_INT 1
58647: NEG
58648: PUSH
58649: EMPTY
58650: LIST
58651: LIST
58652: PUSH
58653: LD_INT 2
58655: PUSH
58656: LD_INT 0
58658: PUSH
58659: EMPTY
58660: LIST
58661: LIST
58662: PUSH
58663: LD_INT 2
58665: PUSH
58666: LD_INT 1
58668: PUSH
58669: EMPTY
58670: LIST
58671: LIST
58672: PUSH
58673: EMPTY
58674: LIST
58675: LIST
58676: LIST
58677: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
58678: LD_ADDR_VAR 0 61
58682: PUSH
58683: LD_INT 2
58685: PUSH
58686: LD_INT 1
58688: PUSH
58689: EMPTY
58690: LIST
58691: LIST
58692: PUSH
58693: LD_INT 2
58695: PUSH
58696: LD_INT 2
58698: PUSH
58699: EMPTY
58700: LIST
58701: LIST
58702: PUSH
58703: LD_INT 1
58705: PUSH
58706: LD_INT 2
58708: PUSH
58709: EMPTY
58710: LIST
58711: LIST
58712: PUSH
58713: EMPTY
58714: LIST
58715: LIST
58716: LIST
58717: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
58718: LD_ADDR_VAR 0 62
58722: PUSH
58723: LD_INT 1
58725: PUSH
58726: LD_INT 2
58728: PUSH
58729: EMPTY
58730: LIST
58731: LIST
58732: PUSH
58733: LD_INT 0
58735: PUSH
58736: LD_INT 2
58738: PUSH
58739: EMPTY
58740: LIST
58741: LIST
58742: PUSH
58743: LD_INT 1
58745: NEG
58746: PUSH
58747: LD_INT 1
58749: PUSH
58750: EMPTY
58751: LIST
58752: LIST
58753: PUSH
58754: EMPTY
58755: LIST
58756: LIST
58757: LIST
58758: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
58759: LD_ADDR_VAR 0 63
58763: PUSH
58764: LD_INT 1
58766: NEG
58767: PUSH
58768: LD_INT 1
58770: PUSH
58771: EMPTY
58772: LIST
58773: LIST
58774: PUSH
58775: LD_INT 2
58777: NEG
58778: PUSH
58779: LD_INT 0
58781: PUSH
58782: EMPTY
58783: LIST
58784: LIST
58785: PUSH
58786: LD_INT 2
58788: NEG
58789: PUSH
58790: LD_INT 1
58792: NEG
58793: PUSH
58794: EMPTY
58795: LIST
58796: LIST
58797: PUSH
58798: EMPTY
58799: LIST
58800: LIST
58801: LIST
58802: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58803: LD_ADDR_VAR 0 64
58807: PUSH
58808: LD_INT 1
58810: NEG
58811: PUSH
58812: LD_INT 2
58814: NEG
58815: PUSH
58816: EMPTY
58817: LIST
58818: LIST
58819: PUSH
58820: LD_INT 2
58822: NEG
58823: PUSH
58824: LD_INT 1
58826: NEG
58827: PUSH
58828: EMPTY
58829: LIST
58830: LIST
58831: PUSH
58832: LD_INT 2
58834: NEG
58835: PUSH
58836: LD_INT 2
58838: NEG
58839: PUSH
58840: EMPTY
58841: LIST
58842: LIST
58843: PUSH
58844: EMPTY
58845: LIST
58846: LIST
58847: LIST
58848: ST_TO_ADDR
// end ; 2 :
58849: GO 62115
58851: LD_INT 2
58853: DOUBLE
58854: EQUAL
58855: IFTRUE 58859
58857: GO 62114
58859: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
58860: LD_ADDR_VAR 0 29
58864: PUSH
58865: LD_INT 4
58867: PUSH
58868: LD_INT 0
58870: PUSH
58871: EMPTY
58872: LIST
58873: LIST
58874: PUSH
58875: LD_INT 4
58877: PUSH
58878: LD_INT 1
58880: NEG
58881: PUSH
58882: EMPTY
58883: LIST
58884: LIST
58885: PUSH
58886: LD_INT 5
58888: PUSH
58889: LD_INT 0
58891: PUSH
58892: EMPTY
58893: LIST
58894: LIST
58895: PUSH
58896: LD_INT 5
58898: PUSH
58899: LD_INT 1
58901: PUSH
58902: EMPTY
58903: LIST
58904: LIST
58905: PUSH
58906: LD_INT 4
58908: PUSH
58909: LD_INT 1
58911: PUSH
58912: EMPTY
58913: LIST
58914: LIST
58915: PUSH
58916: LD_INT 3
58918: PUSH
58919: LD_INT 0
58921: PUSH
58922: EMPTY
58923: LIST
58924: LIST
58925: PUSH
58926: LD_INT 3
58928: PUSH
58929: LD_INT 1
58931: NEG
58932: PUSH
58933: EMPTY
58934: LIST
58935: LIST
58936: PUSH
58937: LD_INT 3
58939: PUSH
58940: LD_INT 2
58942: NEG
58943: PUSH
58944: EMPTY
58945: LIST
58946: LIST
58947: PUSH
58948: LD_INT 5
58950: PUSH
58951: LD_INT 2
58953: PUSH
58954: EMPTY
58955: LIST
58956: LIST
58957: PUSH
58958: LD_INT 3
58960: PUSH
58961: LD_INT 3
58963: PUSH
58964: EMPTY
58965: LIST
58966: LIST
58967: PUSH
58968: LD_INT 3
58970: PUSH
58971: LD_INT 2
58973: PUSH
58974: EMPTY
58975: LIST
58976: LIST
58977: PUSH
58978: LD_INT 4
58980: PUSH
58981: LD_INT 3
58983: PUSH
58984: EMPTY
58985: LIST
58986: LIST
58987: PUSH
58988: LD_INT 4
58990: PUSH
58991: LD_INT 4
58993: PUSH
58994: EMPTY
58995: LIST
58996: LIST
58997: PUSH
58998: LD_INT 3
59000: PUSH
59001: LD_INT 4
59003: PUSH
59004: EMPTY
59005: LIST
59006: LIST
59007: PUSH
59008: LD_INT 2
59010: PUSH
59011: LD_INT 3
59013: PUSH
59014: EMPTY
59015: LIST
59016: LIST
59017: PUSH
59018: LD_INT 2
59020: PUSH
59021: LD_INT 2
59023: PUSH
59024: EMPTY
59025: LIST
59026: LIST
59027: PUSH
59028: LD_INT 4
59030: PUSH
59031: LD_INT 2
59033: PUSH
59034: EMPTY
59035: LIST
59036: LIST
59037: PUSH
59038: LD_INT 2
59040: PUSH
59041: LD_INT 4
59043: PUSH
59044: EMPTY
59045: LIST
59046: LIST
59047: PUSH
59048: LD_INT 0
59050: PUSH
59051: LD_INT 4
59053: PUSH
59054: EMPTY
59055: LIST
59056: LIST
59057: PUSH
59058: LD_INT 0
59060: PUSH
59061: LD_INT 3
59063: PUSH
59064: EMPTY
59065: LIST
59066: LIST
59067: PUSH
59068: LD_INT 1
59070: PUSH
59071: LD_INT 4
59073: PUSH
59074: EMPTY
59075: LIST
59076: LIST
59077: PUSH
59078: LD_INT 1
59080: PUSH
59081: LD_INT 5
59083: PUSH
59084: EMPTY
59085: LIST
59086: LIST
59087: PUSH
59088: LD_INT 0
59090: PUSH
59091: LD_INT 5
59093: PUSH
59094: EMPTY
59095: LIST
59096: LIST
59097: PUSH
59098: LD_INT 1
59100: NEG
59101: PUSH
59102: LD_INT 4
59104: PUSH
59105: EMPTY
59106: LIST
59107: LIST
59108: PUSH
59109: LD_INT 1
59111: NEG
59112: PUSH
59113: LD_INT 3
59115: PUSH
59116: EMPTY
59117: LIST
59118: LIST
59119: PUSH
59120: LD_INT 2
59122: PUSH
59123: LD_INT 5
59125: PUSH
59126: EMPTY
59127: LIST
59128: LIST
59129: PUSH
59130: LD_INT 2
59132: NEG
59133: PUSH
59134: LD_INT 3
59136: PUSH
59137: EMPTY
59138: LIST
59139: LIST
59140: PUSH
59141: LD_INT 3
59143: NEG
59144: PUSH
59145: LD_INT 0
59147: PUSH
59148: EMPTY
59149: LIST
59150: LIST
59151: PUSH
59152: LD_INT 3
59154: NEG
59155: PUSH
59156: LD_INT 1
59158: NEG
59159: PUSH
59160: EMPTY
59161: LIST
59162: LIST
59163: PUSH
59164: LD_INT 2
59166: NEG
59167: PUSH
59168: LD_INT 0
59170: PUSH
59171: EMPTY
59172: LIST
59173: LIST
59174: PUSH
59175: LD_INT 2
59177: NEG
59178: PUSH
59179: LD_INT 1
59181: PUSH
59182: EMPTY
59183: LIST
59184: LIST
59185: PUSH
59186: LD_INT 3
59188: NEG
59189: PUSH
59190: LD_INT 1
59192: PUSH
59193: EMPTY
59194: LIST
59195: LIST
59196: PUSH
59197: LD_INT 4
59199: NEG
59200: PUSH
59201: LD_INT 0
59203: PUSH
59204: EMPTY
59205: LIST
59206: LIST
59207: PUSH
59208: LD_INT 4
59210: NEG
59211: PUSH
59212: LD_INT 1
59214: NEG
59215: PUSH
59216: EMPTY
59217: LIST
59218: LIST
59219: PUSH
59220: LD_INT 4
59222: NEG
59223: PUSH
59224: LD_INT 2
59226: NEG
59227: PUSH
59228: EMPTY
59229: LIST
59230: LIST
59231: PUSH
59232: LD_INT 2
59234: NEG
59235: PUSH
59236: LD_INT 2
59238: PUSH
59239: EMPTY
59240: LIST
59241: LIST
59242: PUSH
59243: LD_INT 4
59245: NEG
59246: PUSH
59247: LD_INT 4
59249: NEG
59250: PUSH
59251: EMPTY
59252: LIST
59253: LIST
59254: PUSH
59255: LD_INT 4
59257: NEG
59258: PUSH
59259: LD_INT 5
59261: NEG
59262: PUSH
59263: EMPTY
59264: LIST
59265: LIST
59266: PUSH
59267: LD_INT 3
59269: NEG
59270: PUSH
59271: LD_INT 4
59273: NEG
59274: PUSH
59275: EMPTY
59276: LIST
59277: LIST
59278: PUSH
59279: LD_INT 3
59281: NEG
59282: PUSH
59283: LD_INT 3
59285: NEG
59286: PUSH
59287: EMPTY
59288: LIST
59289: LIST
59290: PUSH
59291: LD_INT 4
59293: NEG
59294: PUSH
59295: LD_INT 3
59297: NEG
59298: PUSH
59299: EMPTY
59300: LIST
59301: LIST
59302: PUSH
59303: LD_INT 5
59305: NEG
59306: PUSH
59307: LD_INT 4
59309: NEG
59310: PUSH
59311: EMPTY
59312: LIST
59313: LIST
59314: PUSH
59315: LD_INT 5
59317: NEG
59318: PUSH
59319: LD_INT 5
59321: NEG
59322: PUSH
59323: EMPTY
59324: LIST
59325: LIST
59326: PUSH
59327: LD_INT 3
59329: NEG
59330: PUSH
59331: LD_INT 5
59333: NEG
59334: PUSH
59335: EMPTY
59336: LIST
59337: LIST
59338: PUSH
59339: LD_INT 5
59341: NEG
59342: PUSH
59343: LD_INT 3
59345: NEG
59346: PUSH
59347: EMPTY
59348: LIST
59349: LIST
59350: PUSH
59351: EMPTY
59352: LIST
59353: LIST
59354: LIST
59355: LIST
59356: LIST
59357: LIST
59358: LIST
59359: LIST
59360: LIST
59361: LIST
59362: LIST
59363: LIST
59364: LIST
59365: LIST
59366: LIST
59367: LIST
59368: LIST
59369: LIST
59370: LIST
59371: LIST
59372: LIST
59373: LIST
59374: LIST
59375: LIST
59376: LIST
59377: LIST
59378: LIST
59379: LIST
59380: LIST
59381: LIST
59382: LIST
59383: LIST
59384: LIST
59385: LIST
59386: LIST
59387: LIST
59388: LIST
59389: LIST
59390: LIST
59391: LIST
59392: LIST
59393: LIST
59394: LIST
59395: LIST
59396: LIST
59397: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
59398: LD_ADDR_VAR 0 30
59402: PUSH
59403: LD_INT 4
59405: PUSH
59406: LD_INT 4
59408: PUSH
59409: EMPTY
59410: LIST
59411: LIST
59412: PUSH
59413: LD_INT 4
59415: PUSH
59416: LD_INT 3
59418: PUSH
59419: EMPTY
59420: LIST
59421: LIST
59422: PUSH
59423: LD_INT 5
59425: PUSH
59426: LD_INT 4
59428: PUSH
59429: EMPTY
59430: LIST
59431: LIST
59432: PUSH
59433: LD_INT 5
59435: PUSH
59436: LD_INT 5
59438: PUSH
59439: EMPTY
59440: LIST
59441: LIST
59442: PUSH
59443: LD_INT 4
59445: PUSH
59446: LD_INT 5
59448: PUSH
59449: EMPTY
59450: LIST
59451: LIST
59452: PUSH
59453: LD_INT 3
59455: PUSH
59456: LD_INT 4
59458: PUSH
59459: EMPTY
59460: LIST
59461: LIST
59462: PUSH
59463: LD_INT 3
59465: PUSH
59466: LD_INT 3
59468: PUSH
59469: EMPTY
59470: LIST
59471: LIST
59472: PUSH
59473: LD_INT 5
59475: PUSH
59476: LD_INT 3
59478: PUSH
59479: EMPTY
59480: LIST
59481: LIST
59482: PUSH
59483: LD_INT 3
59485: PUSH
59486: LD_INT 5
59488: PUSH
59489: EMPTY
59490: LIST
59491: LIST
59492: PUSH
59493: LD_INT 0
59495: PUSH
59496: LD_INT 3
59498: PUSH
59499: EMPTY
59500: LIST
59501: LIST
59502: PUSH
59503: LD_INT 0
59505: PUSH
59506: LD_INT 2
59508: PUSH
59509: EMPTY
59510: LIST
59511: LIST
59512: PUSH
59513: LD_INT 1
59515: PUSH
59516: LD_INT 3
59518: PUSH
59519: EMPTY
59520: LIST
59521: LIST
59522: PUSH
59523: LD_INT 1
59525: PUSH
59526: LD_INT 4
59528: PUSH
59529: EMPTY
59530: LIST
59531: LIST
59532: PUSH
59533: LD_INT 0
59535: PUSH
59536: LD_INT 4
59538: PUSH
59539: EMPTY
59540: LIST
59541: LIST
59542: PUSH
59543: LD_INT 1
59545: NEG
59546: PUSH
59547: LD_INT 3
59549: PUSH
59550: EMPTY
59551: LIST
59552: LIST
59553: PUSH
59554: LD_INT 1
59556: NEG
59557: PUSH
59558: LD_INT 2
59560: PUSH
59561: EMPTY
59562: LIST
59563: LIST
59564: PUSH
59565: LD_INT 2
59567: PUSH
59568: LD_INT 4
59570: PUSH
59571: EMPTY
59572: LIST
59573: LIST
59574: PUSH
59575: LD_INT 2
59577: NEG
59578: PUSH
59579: LD_INT 2
59581: PUSH
59582: EMPTY
59583: LIST
59584: LIST
59585: PUSH
59586: LD_INT 4
59588: NEG
59589: PUSH
59590: LD_INT 0
59592: PUSH
59593: EMPTY
59594: LIST
59595: LIST
59596: PUSH
59597: LD_INT 4
59599: NEG
59600: PUSH
59601: LD_INT 1
59603: NEG
59604: PUSH
59605: EMPTY
59606: LIST
59607: LIST
59608: PUSH
59609: LD_INT 3
59611: NEG
59612: PUSH
59613: LD_INT 0
59615: PUSH
59616: EMPTY
59617: LIST
59618: LIST
59619: PUSH
59620: LD_INT 3
59622: NEG
59623: PUSH
59624: LD_INT 1
59626: PUSH
59627: EMPTY
59628: LIST
59629: LIST
59630: PUSH
59631: LD_INT 4
59633: NEG
59634: PUSH
59635: LD_INT 1
59637: PUSH
59638: EMPTY
59639: LIST
59640: LIST
59641: PUSH
59642: LD_INT 5
59644: NEG
59645: PUSH
59646: LD_INT 0
59648: PUSH
59649: EMPTY
59650: LIST
59651: LIST
59652: PUSH
59653: LD_INT 5
59655: NEG
59656: PUSH
59657: LD_INT 1
59659: NEG
59660: PUSH
59661: EMPTY
59662: LIST
59663: LIST
59664: PUSH
59665: LD_INT 5
59667: NEG
59668: PUSH
59669: LD_INT 2
59671: NEG
59672: PUSH
59673: EMPTY
59674: LIST
59675: LIST
59676: PUSH
59677: LD_INT 3
59679: NEG
59680: PUSH
59681: LD_INT 2
59683: PUSH
59684: EMPTY
59685: LIST
59686: LIST
59687: PUSH
59688: LD_INT 3
59690: NEG
59691: PUSH
59692: LD_INT 3
59694: NEG
59695: PUSH
59696: EMPTY
59697: LIST
59698: LIST
59699: PUSH
59700: LD_INT 3
59702: NEG
59703: PUSH
59704: LD_INT 4
59706: NEG
59707: PUSH
59708: EMPTY
59709: LIST
59710: LIST
59711: PUSH
59712: LD_INT 2
59714: NEG
59715: PUSH
59716: LD_INT 3
59718: NEG
59719: PUSH
59720: EMPTY
59721: LIST
59722: LIST
59723: PUSH
59724: LD_INT 2
59726: NEG
59727: PUSH
59728: LD_INT 2
59730: NEG
59731: PUSH
59732: EMPTY
59733: LIST
59734: LIST
59735: PUSH
59736: LD_INT 3
59738: NEG
59739: PUSH
59740: LD_INT 2
59742: NEG
59743: PUSH
59744: EMPTY
59745: LIST
59746: LIST
59747: PUSH
59748: LD_INT 4
59750: NEG
59751: PUSH
59752: LD_INT 3
59754: NEG
59755: PUSH
59756: EMPTY
59757: LIST
59758: LIST
59759: PUSH
59760: LD_INT 4
59762: NEG
59763: PUSH
59764: LD_INT 4
59766: NEG
59767: PUSH
59768: EMPTY
59769: LIST
59770: LIST
59771: PUSH
59772: LD_INT 2
59774: NEG
59775: PUSH
59776: LD_INT 4
59778: NEG
59779: PUSH
59780: EMPTY
59781: LIST
59782: LIST
59783: PUSH
59784: LD_INT 4
59786: NEG
59787: PUSH
59788: LD_INT 2
59790: NEG
59791: PUSH
59792: EMPTY
59793: LIST
59794: LIST
59795: PUSH
59796: LD_INT 0
59798: PUSH
59799: LD_INT 4
59801: NEG
59802: PUSH
59803: EMPTY
59804: LIST
59805: LIST
59806: PUSH
59807: LD_INT 0
59809: PUSH
59810: LD_INT 5
59812: NEG
59813: PUSH
59814: EMPTY
59815: LIST
59816: LIST
59817: PUSH
59818: LD_INT 1
59820: PUSH
59821: LD_INT 4
59823: NEG
59824: PUSH
59825: EMPTY
59826: LIST
59827: LIST
59828: PUSH
59829: LD_INT 1
59831: PUSH
59832: LD_INT 3
59834: NEG
59835: PUSH
59836: EMPTY
59837: LIST
59838: LIST
59839: PUSH
59840: LD_INT 0
59842: PUSH
59843: LD_INT 3
59845: NEG
59846: PUSH
59847: EMPTY
59848: LIST
59849: LIST
59850: PUSH
59851: LD_INT 1
59853: NEG
59854: PUSH
59855: LD_INT 4
59857: NEG
59858: PUSH
59859: EMPTY
59860: LIST
59861: LIST
59862: PUSH
59863: LD_INT 1
59865: NEG
59866: PUSH
59867: LD_INT 5
59869: NEG
59870: PUSH
59871: EMPTY
59872: LIST
59873: LIST
59874: PUSH
59875: LD_INT 2
59877: PUSH
59878: LD_INT 3
59880: NEG
59881: PUSH
59882: EMPTY
59883: LIST
59884: LIST
59885: PUSH
59886: LD_INT 2
59888: NEG
59889: PUSH
59890: LD_INT 5
59892: NEG
59893: PUSH
59894: EMPTY
59895: LIST
59896: LIST
59897: PUSH
59898: EMPTY
59899: LIST
59900: LIST
59901: LIST
59902: LIST
59903: LIST
59904: LIST
59905: LIST
59906: LIST
59907: LIST
59908: LIST
59909: LIST
59910: LIST
59911: LIST
59912: LIST
59913: LIST
59914: LIST
59915: LIST
59916: LIST
59917: LIST
59918: LIST
59919: LIST
59920: LIST
59921: LIST
59922: LIST
59923: LIST
59924: LIST
59925: LIST
59926: LIST
59927: LIST
59928: LIST
59929: LIST
59930: LIST
59931: LIST
59932: LIST
59933: LIST
59934: LIST
59935: LIST
59936: LIST
59937: LIST
59938: LIST
59939: LIST
59940: LIST
59941: LIST
59942: LIST
59943: LIST
59944: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
59945: LD_ADDR_VAR 0 31
59949: PUSH
59950: LD_INT 0
59952: PUSH
59953: LD_INT 4
59955: PUSH
59956: EMPTY
59957: LIST
59958: LIST
59959: PUSH
59960: LD_INT 0
59962: PUSH
59963: LD_INT 3
59965: PUSH
59966: EMPTY
59967: LIST
59968: LIST
59969: PUSH
59970: LD_INT 1
59972: PUSH
59973: LD_INT 4
59975: PUSH
59976: EMPTY
59977: LIST
59978: LIST
59979: PUSH
59980: LD_INT 1
59982: PUSH
59983: LD_INT 5
59985: PUSH
59986: EMPTY
59987: LIST
59988: LIST
59989: PUSH
59990: LD_INT 0
59992: PUSH
59993: LD_INT 5
59995: PUSH
59996: EMPTY
59997: LIST
59998: LIST
59999: PUSH
60000: LD_INT 1
60002: NEG
60003: PUSH
60004: LD_INT 4
60006: PUSH
60007: EMPTY
60008: LIST
60009: LIST
60010: PUSH
60011: LD_INT 1
60013: NEG
60014: PUSH
60015: LD_INT 3
60017: PUSH
60018: EMPTY
60019: LIST
60020: LIST
60021: PUSH
60022: LD_INT 2
60024: PUSH
60025: LD_INT 5
60027: PUSH
60028: EMPTY
60029: LIST
60030: LIST
60031: PUSH
60032: LD_INT 2
60034: NEG
60035: PUSH
60036: LD_INT 3
60038: PUSH
60039: EMPTY
60040: LIST
60041: LIST
60042: PUSH
60043: LD_INT 3
60045: NEG
60046: PUSH
60047: LD_INT 0
60049: PUSH
60050: EMPTY
60051: LIST
60052: LIST
60053: PUSH
60054: LD_INT 3
60056: NEG
60057: PUSH
60058: LD_INT 1
60060: NEG
60061: PUSH
60062: EMPTY
60063: LIST
60064: LIST
60065: PUSH
60066: LD_INT 2
60068: NEG
60069: PUSH
60070: LD_INT 0
60072: PUSH
60073: EMPTY
60074: LIST
60075: LIST
60076: PUSH
60077: LD_INT 2
60079: NEG
60080: PUSH
60081: LD_INT 1
60083: PUSH
60084: EMPTY
60085: LIST
60086: LIST
60087: PUSH
60088: LD_INT 3
60090: NEG
60091: PUSH
60092: LD_INT 1
60094: PUSH
60095: EMPTY
60096: LIST
60097: LIST
60098: PUSH
60099: LD_INT 4
60101: NEG
60102: PUSH
60103: LD_INT 0
60105: PUSH
60106: EMPTY
60107: LIST
60108: LIST
60109: PUSH
60110: LD_INT 4
60112: NEG
60113: PUSH
60114: LD_INT 1
60116: NEG
60117: PUSH
60118: EMPTY
60119: LIST
60120: LIST
60121: PUSH
60122: LD_INT 4
60124: NEG
60125: PUSH
60126: LD_INT 2
60128: NEG
60129: PUSH
60130: EMPTY
60131: LIST
60132: LIST
60133: PUSH
60134: LD_INT 2
60136: NEG
60137: PUSH
60138: LD_INT 2
60140: PUSH
60141: EMPTY
60142: LIST
60143: LIST
60144: PUSH
60145: LD_INT 4
60147: NEG
60148: PUSH
60149: LD_INT 4
60151: NEG
60152: PUSH
60153: EMPTY
60154: LIST
60155: LIST
60156: PUSH
60157: LD_INT 4
60159: NEG
60160: PUSH
60161: LD_INT 5
60163: NEG
60164: PUSH
60165: EMPTY
60166: LIST
60167: LIST
60168: PUSH
60169: LD_INT 3
60171: NEG
60172: PUSH
60173: LD_INT 4
60175: NEG
60176: PUSH
60177: EMPTY
60178: LIST
60179: LIST
60180: PUSH
60181: LD_INT 3
60183: NEG
60184: PUSH
60185: LD_INT 3
60187: NEG
60188: PUSH
60189: EMPTY
60190: LIST
60191: LIST
60192: PUSH
60193: LD_INT 4
60195: NEG
60196: PUSH
60197: LD_INT 3
60199: NEG
60200: PUSH
60201: EMPTY
60202: LIST
60203: LIST
60204: PUSH
60205: LD_INT 5
60207: NEG
60208: PUSH
60209: LD_INT 4
60211: NEG
60212: PUSH
60213: EMPTY
60214: LIST
60215: LIST
60216: PUSH
60217: LD_INT 5
60219: NEG
60220: PUSH
60221: LD_INT 5
60223: NEG
60224: PUSH
60225: EMPTY
60226: LIST
60227: LIST
60228: PUSH
60229: LD_INT 3
60231: NEG
60232: PUSH
60233: LD_INT 5
60235: NEG
60236: PUSH
60237: EMPTY
60238: LIST
60239: LIST
60240: PUSH
60241: LD_INT 5
60243: NEG
60244: PUSH
60245: LD_INT 3
60247: NEG
60248: PUSH
60249: EMPTY
60250: LIST
60251: LIST
60252: PUSH
60253: LD_INT 0
60255: PUSH
60256: LD_INT 3
60258: NEG
60259: PUSH
60260: EMPTY
60261: LIST
60262: LIST
60263: PUSH
60264: LD_INT 0
60266: PUSH
60267: LD_INT 4
60269: NEG
60270: PUSH
60271: EMPTY
60272: LIST
60273: LIST
60274: PUSH
60275: LD_INT 1
60277: PUSH
60278: LD_INT 3
60280: NEG
60281: PUSH
60282: EMPTY
60283: LIST
60284: LIST
60285: PUSH
60286: LD_INT 1
60288: PUSH
60289: LD_INT 2
60291: NEG
60292: PUSH
60293: EMPTY
60294: LIST
60295: LIST
60296: PUSH
60297: LD_INT 0
60299: PUSH
60300: LD_INT 2
60302: NEG
60303: PUSH
60304: EMPTY
60305: LIST
60306: LIST
60307: PUSH
60308: LD_INT 1
60310: NEG
60311: PUSH
60312: LD_INT 3
60314: NEG
60315: PUSH
60316: EMPTY
60317: LIST
60318: LIST
60319: PUSH
60320: LD_INT 1
60322: NEG
60323: PUSH
60324: LD_INT 4
60326: NEG
60327: PUSH
60328: EMPTY
60329: LIST
60330: LIST
60331: PUSH
60332: LD_INT 2
60334: PUSH
60335: LD_INT 2
60337: NEG
60338: PUSH
60339: EMPTY
60340: LIST
60341: LIST
60342: PUSH
60343: LD_INT 2
60345: NEG
60346: PUSH
60347: LD_INT 4
60349: NEG
60350: PUSH
60351: EMPTY
60352: LIST
60353: LIST
60354: PUSH
60355: LD_INT 4
60357: PUSH
60358: LD_INT 0
60360: PUSH
60361: EMPTY
60362: LIST
60363: LIST
60364: PUSH
60365: LD_INT 4
60367: PUSH
60368: LD_INT 1
60370: NEG
60371: PUSH
60372: EMPTY
60373: LIST
60374: LIST
60375: PUSH
60376: LD_INT 5
60378: PUSH
60379: LD_INT 0
60381: PUSH
60382: EMPTY
60383: LIST
60384: LIST
60385: PUSH
60386: LD_INT 5
60388: PUSH
60389: LD_INT 1
60391: PUSH
60392: EMPTY
60393: LIST
60394: LIST
60395: PUSH
60396: LD_INT 4
60398: PUSH
60399: LD_INT 1
60401: PUSH
60402: EMPTY
60403: LIST
60404: LIST
60405: PUSH
60406: LD_INT 3
60408: PUSH
60409: LD_INT 0
60411: PUSH
60412: EMPTY
60413: LIST
60414: LIST
60415: PUSH
60416: LD_INT 3
60418: PUSH
60419: LD_INT 1
60421: NEG
60422: PUSH
60423: EMPTY
60424: LIST
60425: LIST
60426: PUSH
60427: LD_INT 3
60429: PUSH
60430: LD_INT 2
60432: NEG
60433: PUSH
60434: EMPTY
60435: LIST
60436: LIST
60437: PUSH
60438: LD_INT 5
60440: PUSH
60441: LD_INT 2
60443: PUSH
60444: EMPTY
60445: LIST
60446: LIST
60447: PUSH
60448: EMPTY
60449: LIST
60450: LIST
60451: LIST
60452: LIST
60453: LIST
60454: LIST
60455: LIST
60456: LIST
60457: LIST
60458: LIST
60459: LIST
60460: LIST
60461: LIST
60462: LIST
60463: LIST
60464: LIST
60465: LIST
60466: LIST
60467: LIST
60468: LIST
60469: LIST
60470: LIST
60471: LIST
60472: LIST
60473: LIST
60474: LIST
60475: LIST
60476: LIST
60477: LIST
60478: LIST
60479: LIST
60480: LIST
60481: LIST
60482: LIST
60483: LIST
60484: LIST
60485: LIST
60486: LIST
60487: LIST
60488: LIST
60489: LIST
60490: LIST
60491: LIST
60492: LIST
60493: LIST
60494: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
60495: LD_ADDR_VAR 0 32
60499: PUSH
60500: LD_INT 4
60502: NEG
60503: PUSH
60504: LD_INT 0
60506: PUSH
60507: EMPTY
60508: LIST
60509: LIST
60510: PUSH
60511: LD_INT 4
60513: NEG
60514: PUSH
60515: LD_INT 1
60517: NEG
60518: PUSH
60519: EMPTY
60520: LIST
60521: LIST
60522: PUSH
60523: LD_INT 3
60525: NEG
60526: PUSH
60527: LD_INT 0
60529: PUSH
60530: EMPTY
60531: LIST
60532: LIST
60533: PUSH
60534: LD_INT 3
60536: NEG
60537: PUSH
60538: LD_INT 1
60540: PUSH
60541: EMPTY
60542: LIST
60543: LIST
60544: PUSH
60545: LD_INT 4
60547: NEG
60548: PUSH
60549: LD_INT 1
60551: PUSH
60552: EMPTY
60553: LIST
60554: LIST
60555: PUSH
60556: LD_INT 5
60558: NEG
60559: PUSH
60560: LD_INT 0
60562: PUSH
60563: EMPTY
60564: LIST
60565: LIST
60566: PUSH
60567: LD_INT 5
60569: NEG
60570: PUSH
60571: LD_INT 1
60573: NEG
60574: PUSH
60575: EMPTY
60576: LIST
60577: LIST
60578: PUSH
60579: LD_INT 5
60581: NEG
60582: PUSH
60583: LD_INT 2
60585: NEG
60586: PUSH
60587: EMPTY
60588: LIST
60589: LIST
60590: PUSH
60591: LD_INT 3
60593: NEG
60594: PUSH
60595: LD_INT 2
60597: PUSH
60598: EMPTY
60599: LIST
60600: LIST
60601: PUSH
60602: LD_INT 3
60604: NEG
60605: PUSH
60606: LD_INT 3
60608: NEG
60609: PUSH
60610: EMPTY
60611: LIST
60612: LIST
60613: PUSH
60614: LD_INT 3
60616: NEG
60617: PUSH
60618: LD_INT 4
60620: NEG
60621: PUSH
60622: EMPTY
60623: LIST
60624: LIST
60625: PUSH
60626: LD_INT 2
60628: NEG
60629: PUSH
60630: LD_INT 3
60632: NEG
60633: PUSH
60634: EMPTY
60635: LIST
60636: LIST
60637: PUSH
60638: LD_INT 2
60640: NEG
60641: PUSH
60642: LD_INT 2
60644: NEG
60645: PUSH
60646: EMPTY
60647: LIST
60648: LIST
60649: PUSH
60650: LD_INT 3
60652: NEG
60653: PUSH
60654: LD_INT 2
60656: NEG
60657: PUSH
60658: EMPTY
60659: LIST
60660: LIST
60661: PUSH
60662: LD_INT 4
60664: NEG
60665: PUSH
60666: LD_INT 3
60668: NEG
60669: PUSH
60670: EMPTY
60671: LIST
60672: LIST
60673: PUSH
60674: LD_INT 4
60676: NEG
60677: PUSH
60678: LD_INT 4
60680: NEG
60681: PUSH
60682: EMPTY
60683: LIST
60684: LIST
60685: PUSH
60686: LD_INT 2
60688: NEG
60689: PUSH
60690: LD_INT 4
60692: NEG
60693: PUSH
60694: EMPTY
60695: LIST
60696: LIST
60697: PUSH
60698: LD_INT 4
60700: NEG
60701: PUSH
60702: LD_INT 2
60704: NEG
60705: PUSH
60706: EMPTY
60707: LIST
60708: LIST
60709: PUSH
60710: LD_INT 0
60712: PUSH
60713: LD_INT 4
60715: NEG
60716: PUSH
60717: EMPTY
60718: LIST
60719: LIST
60720: PUSH
60721: LD_INT 0
60723: PUSH
60724: LD_INT 5
60726: NEG
60727: PUSH
60728: EMPTY
60729: LIST
60730: LIST
60731: PUSH
60732: LD_INT 1
60734: PUSH
60735: LD_INT 4
60737: NEG
60738: PUSH
60739: EMPTY
60740: LIST
60741: LIST
60742: PUSH
60743: LD_INT 1
60745: PUSH
60746: LD_INT 3
60748: NEG
60749: PUSH
60750: EMPTY
60751: LIST
60752: LIST
60753: PUSH
60754: LD_INT 0
60756: PUSH
60757: LD_INT 3
60759: NEG
60760: PUSH
60761: EMPTY
60762: LIST
60763: LIST
60764: PUSH
60765: LD_INT 1
60767: NEG
60768: PUSH
60769: LD_INT 4
60771: NEG
60772: PUSH
60773: EMPTY
60774: LIST
60775: LIST
60776: PUSH
60777: LD_INT 1
60779: NEG
60780: PUSH
60781: LD_INT 5
60783: NEG
60784: PUSH
60785: EMPTY
60786: LIST
60787: LIST
60788: PUSH
60789: LD_INT 2
60791: PUSH
60792: LD_INT 3
60794: NEG
60795: PUSH
60796: EMPTY
60797: LIST
60798: LIST
60799: PUSH
60800: LD_INT 2
60802: NEG
60803: PUSH
60804: LD_INT 5
60806: NEG
60807: PUSH
60808: EMPTY
60809: LIST
60810: LIST
60811: PUSH
60812: LD_INT 3
60814: PUSH
60815: LD_INT 0
60817: PUSH
60818: EMPTY
60819: LIST
60820: LIST
60821: PUSH
60822: LD_INT 3
60824: PUSH
60825: LD_INT 1
60827: NEG
60828: PUSH
60829: EMPTY
60830: LIST
60831: LIST
60832: PUSH
60833: LD_INT 4
60835: PUSH
60836: LD_INT 0
60838: PUSH
60839: EMPTY
60840: LIST
60841: LIST
60842: PUSH
60843: LD_INT 4
60845: PUSH
60846: LD_INT 1
60848: PUSH
60849: EMPTY
60850: LIST
60851: LIST
60852: PUSH
60853: LD_INT 3
60855: PUSH
60856: LD_INT 1
60858: PUSH
60859: EMPTY
60860: LIST
60861: LIST
60862: PUSH
60863: LD_INT 2
60865: PUSH
60866: LD_INT 0
60868: PUSH
60869: EMPTY
60870: LIST
60871: LIST
60872: PUSH
60873: LD_INT 2
60875: PUSH
60876: LD_INT 1
60878: NEG
60879: PUSH
60880: EMPTY
60881: LIST
60882: LIST
60883: PUSH
60884: LD_INT 2
60886: PUSH
60887: LD_INT 2
60889: NEG
60890: PUSH
60891: EMPTY
60892: LIST
60893: LIST
60894: PUSH
60895: LD_INT 4
60897: PUSH
60898: LD_INT 2
60900: PUSH
60901: EMPTY
60902: LIST
60903: LIST
60904: PUSH
60905: LD_INT 4
60907: PUSH
60908: LD_INT 4
60910: PUSH
60911: EMPTY
60912: LIST
60913: LIST
60914: PUSH
60915: LD_INT 4
60917: PUSH
60918: LD_INT 3
60920: PUSH
60921: EMPTY
60922: LIST
60923: LIST
60924: PUSH
60925: LD_INT 5
60927: PUSH
60928: LD_INT 4
60930: PUSH
60931: EMPTY
60932: LIST
60933: LIST
60934: PUSH
60935: LD_INT 5
60937: PUSH
60938: LD_INT 5
60940: PUSH
60941: EMPTY
60942: LIST
60943: LIST
60944: PUSH
60945: LD_INT 4
60947: PUSH
60948: LD_INT 5
60950: PUSH
60951: EMPTY
60952: LIST
60953: LIST
60954: PUSH
60955: LD_INT 3
60957: PUSH
60958: LD_INT 4
60960: PUSH
60961: EMPTY
60962: LIST
60963: LIST
60964: PUSH
60965: LD_INT 3
60967: PUSH
60968: LD_INT 3
60970: PUSH
60971: EMPTY
60972: LIST
60973: LIST
60974: PUSH
60975: LD_INT 5
60977: PUSH
60978: LD_INT 3
60980: PUSH
60981: EMPTY
60982: LIST
60983: LIST
60984: PUSH
60985: LD_INT 3
60987: PUSH
60988: LD_INT 5
60990: PUSH
60991: EMPTY
60992: LIST
60993: LIST
60994: PUSH
60995: EMPTY
60996: LIST
60997: LIST
60998: LIST
60999: LIST
61000: LIST
61001: LIST
61002: LIST
61003: LIST
61004: LIST
61005: LIST
61006: LIST
61007: LIST
61008: LIST
61009: LIST
61010: LIST
61011: LIST
61012: LIST
61013: LIST
61014: LIST
61015: LIST
61016: LIST
61017: LIST
61018: LIST
61019: LIST
61020: LIST
61021: LIST
61022: LIST
61023: LIST
61024: LIST
61025: LIST
61026: LIST
61027: LIST
61028: LIST
61029: LIST
61030: LIST
61031: LIST
61032: LIST
61033: LIST
61034: LIST
61035: LIST
61036: LIST
61037: LIST
61038: LIST
61039: LIST
61040: LIST
61041: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
61042: LD_ADDR_VAR 0 33
61046: PUSH
61047: LD_INT 4
61049: NEG
61050: PUSH
61051: LD_INT 4
61053: NEG
61054: PUSH
61055: EMPTY
61056: LIST
61057: LIST
61058: PUSH
61059: LD_INT 4
61061: NEG
61062: PUSH
61063: LD_INT 5
61065: NEG
61066: PUSH
61067: EMPTY
61068: LIST
61069: LIST
61070: PUSH
61071: LD_INT 3
61073: NEG
61074: PUSH
61075: LD_INT 4
61077: NEG
61078: PUSH
61079: EMPTY
61080: LIST
61081: LIST
61082: PUSH
61083: LD_INT 3
61085: NEG
61086: PUSH
61087: LD_INT 3
61089: NEG
61090: PUSH
61091: EMPTY
61092: LIST
61093: LIST
61094: PUSH
61095: LD_INT 4
61097: NEG
61098: PUSH
61099: LD_INT 3
61101: NEG
61102: PUSH
61103: EMPTY
61104: LIST
61105: LIST
61106: PUSH
61107: LD_INT 5
61109: NEG
61110: PUSH
61111: LD_INT 4
61113: NEG
61114: PUSH
61115: EMPTY
61116: LIST
61117: LIST
61118: PUSH
61119: LD_INT 5
61121: NEG
61122: PUSH
61123: LD_INT 5
61125: NEG
61126: PUSH
61127: EMPTY
61128: LIST
61129: LIST
61130: PUSH
61131: LD_INT 3
61133: NEG
61134: PUSH
61135: LD_INT 5
61137: NEG
61138: PUSH
61139: EMPTY
61140: LIST
61141: LIST
61142: PUSH
61143: LD_INT 5
61145: NEG
61146: PUSH
61147: LD_INT 3
61149: NEG
61150: PUSH
61151: EMPTY
61152: LIST
61153: LIST
61154: PUSH
61155: LD_INT 0
61157: PUSH
61158: LD_INT 3
61160: NEG
61161: PUSH
61162: EMPTY
61163: LIST
61164: LIST
61165: PUSH
61166: LD_INT 0
61168: PUSH
61169: LD_INT 4
61171: NEG
61172: PUSH
61173: EMPTY
61174: LIST
61175: LIST
61176: PUSH
61177: LD_INT 1
61179: PUSH
61180: LD_INT 3
61182: NEG
61183: PUSH
61184: EMPTY
61185: LIST
61186: LIST
61187: PUSH
61188: LD_INT 1
61190: PUSH
61191: LD_INT 2
61193: NEG
61194: PUSH
61195: EMPTY
61196: LIST
61197: LIST
61198: PUSH
61199: LD_INT 0
61201: PUSH
61202: LD_INT 2
61204: NEG
61205: PUSH
61206: EMPTY
61207: LIST
61208: LIST
61209: PUSH
61210: LD_INT 1
61212: NEG
61213: PUSH
61214: LD_INT 3
61216: NEG
61217: PUSH
61218: EMPTY
61219: LIST
61220: LIST
61221: PUSH
61222: LD_INT 1
61224: NEG
61225: PUSH
61226: LD_INT 4
61228: NEG
61229: PUSH
61230: EMPTY
61231: LIST
61232: LIST
61233: PUSH
61234: LD_INT 2
61236: PUSH
61237: LD_INT 2
61239: NEG
61240: PUSH
61241: EMPTY
61242: LIST
61243: LIST
61244: PUSH
61245: LD_INT 2
61247: NEG
61248: PUSH
61249: LD_INT 4
61251: NEG
61252: PUSH
61253: EMPTY
61254: LIST
61255: LIST
61256: PUSH
61257: LD_INT 4
61259: PUSH
61260: LD_INT 0
61262: PUSH
61263: EMPTY
61264: LIST
61265: LIST
61266: PUSH
61267: LD_INT 4
61269: PUSH
61270: LD_INT 1
61272: NEG
61273: PUSH
61274: EMPTY
61275: LIST
61276: LIST
61277: PUSH
61278: LD_INT 5
61280: PUSH
61281: LD_INT 0
61283: PUSH
61284: EMPTY
61285: LIST
61286: LIST
61287: PUSH
61288: LD_INT 5
61290: PUSH
61291: LD_INT 1
61293: PUSH
61294: EMPTY
61295: LIST
61296: LIST
61297: PUSH
61298: LD_INT 4
61300: PUSH
61301: LD_INT 1
61303: PUSH
61304: EMPTY
61305: LIST
61306: LIST
61307: PUSH
61308: LD_INT 3
61310: PUSH
61311: LD_INT 0
61313: PUSH
61314: EMPTY
61315: LIST
61316: LIST
61317: PUSH
61318: LD_INT 3
61320: PUSH
61321: LD_INT 1
61323: NEG
61324: PUSH
61325: EMPTY
61326: LIST
61327: LIST
61328: PUSH
61329: LD_INT 3
61331: PUSH
61332: LD_INT 2
61334: NEG
61335: PUSH
61336: EMPTY
61337: LIST
61338: LIST
61339: PUSH
61340: LD_INT 5
61342: PUSH
61343: LD_INT 2
61345: PUSH
61346: EMPTY
61347: LIST
61348: LIST
61349: PUSH
61350: LD_INT 3
61352: PUSH
61353: LD_INT 3
61355: PUSH
61356: EMPTY
61357: LIST
61358: LIST
61359: PUSH
61360: LD_INT 3
61362: PUSH
61363: LD_INT 2
61365: PUSH
61366: EMPTY
61367: LIST
61368: LIST
61369: PUSH
61370: LD_INT 4
61372: PUSH
61373: LD_INT 3
61375: PUSH
61376: EMPTY
61377: LIST
61378: LIST
61379: PUSH
61380: LD_INT 4
61382: PUSH
61383: LD_INT 4
61385: PUSH
61386: EMPTY
61387: LIST
61388: LIST
61389: PUSH
61390: LD_INT 3
61392: PUSH
61393: LD_INT 4
61395: PUSH
61396: EMPTY
61397: LIST
61398: LIST
61399: PUSH
61400: LD_INT 2
61402: PUSH
61403: LD_INT 3
61405: PUSH
61406: EMPTY
61407: LIST
61408: LIST
61409: PUSH
61410: LD_INT 2
61412: PUSH
61413: LD_INT 2
61415: PUSH
61416: EMPTY
61417: LIST
61418: LIST
61419: PUSH
61420: LD_INT 4
61422: PUSH
61423: LD_INT 2
61425: PUSH
61426: EMPTY
61427: LIST
61428: LIST
61429: PUSH
61430: LD_INT 2
61432: PUSH
61433: LD_INT 4
61435: PUSH
61436: EMPTY
61437: LIST
61438: LIST
61439: PUSH
61440: LD_INT 0
61442: PUSH
61443: LD_INT 4
61445: PUSH
61446: EMPTY
61447: LIST
61448: LIST
61449: PUSH
61450: LD_INT 0
61452: PUSH
61453: LD_INT 3
61455: PUSH
61456: EMPTY
61457: LIST
61458: LIST
61459: PUSH
61460: LD_INT 1
61462: PUSH
61463: LD_INT 4
61465: PUSH
61466: EMPTY
61467: LIST
61468: LIST
61469: PUSH
61470: LD_INT 1
61472: PUSH
61473: LD_INT 5
61475: PUSH
61476: EMPTY
61477: LIST
61478: LIST
61479: PUSH
61480: LD_INT 0
61482: PUSH
61483: LD_INT 5
61485: PUSH
61486: EMPTY
61487: LIST
61488: LIST
61489: PUSH
61490: LD_INT 1
61492: NEG
61493: PUSH
61494: LD_INT 4
61496: PUSH
61497: EMPTY
61498: LIST
61499: LIST
61500: PUSH
61501: LD_INT 1
61503: NEG
61504: PUSH
61505: LD_INT 3
61507: PUSH
61508: EMPTY
61509: LIST
61510: LIST
61511: PUSH
61512: LD_INT 2
61514: PUSH
61515: LD_INT 5
61517: PUSH
61518: EMPTY
61519: LIST
61520: LIST
61521: PUSH
61522: LD_INT 2
61524: NEG
61525: PUSH
61526: LD_INT 3
61528: PUSH
61529: EMPTY
61530: LIST
61531: LIST
61532: PUSH
61533: EMPTY
61534: LIST
61535: LIST
61536: LIST
61537: LIST
61538: LIST
61539: LIST
61540: LIST
61541: LIST
61542: LIST
61543: LIST
61544: LIST
61545: LIST
61546: LIST
61547: LIST
61548: LIST
61549: LIST
61550: LIST
61551: LIST
61552: LIST
61553: LIST
61554: LIST
61555: LIST
61556: LIST
61557: LIST
61558: LIST
61559: LIST
61560: LIST
61561: LIST
61562: LIST
61563: LIST
61564: LIST
61565: LIST
61566: LIST
61567: LIST
61568: LIST
61569: LIST
61570: LIST
61571: LIST
61572: LIST
61573: LIST
61574: LIST
61575: LIST
61576: LIST
61577: LIST
61578: LIST
61579: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
61580: LD_ADDR_VAR 0 34
61584: PUSH
61585: LD_INT 0
61587: PUSH
61588: LD_INT 4
61590: NEG
61591: PUSH
61592: EMPTY
61593: LIST
61594: LIST
61595: PUSH
61596: LD_INT 0
61598: PUSH
61599: LD_INT 5
61601: NEG
61602: PUSH
61603: EMPTY
61604: LIST
61605: LIST
61606: PUSH
61607: LD_INT 1
61609: PUSH
61610: LD_INT 4
61612: NEG
61613: PUSH
61614: EMPTY
61615: LIST
61616: LIST
61617: PUSH
61618: LD_INT 1
61620: PUSH
61621: LD_INT 3
61623: NEG
61624: PUSH
61625: EMPTY
61626: LIST
61627: LIST
61628: PUSH
61629: LD_INT 0
61631: PUSH
61632: LD_INT 3
61634: NEG
61635: PUSH
61636: EMPTY
61637: LIST
61638: LIST
61639: PUSH
61640: LD_INT 1
61642: NEG
61643: PUSH
61644: LD_INT 4
61646: NEG
61647: PUSH
61648: EMPTY
61649: LIST
61650: LIST
61651: PUSH
61652: LD_INT 1
61654: NEG
61655: PUSH
61656: LD_INT 5
61658: NEG
61659: PUSH
61660: EMPTY
61661: LIST
61662: LIST
61663: PUSH
61664: LD_INT 2
61666: PUSH
61667: LD_INT 3
61669: NEG
61670: PUSH
61671: EMPTY
61672: LIST
61673: LIST
61674: PUSH
61675: LD_INT 2
61677: NEG
61678: PUSH
61679: LD_INT 5
61681: NEG
61682: PUSH
61683: EMPTY
61684: LIST
61685: LIST
61686: PUSH
61687: LD_INT 3
61689: PUSH
61690: LD_INT 0
61692: PUSH
61693: EMPTY
61694: LIST
61695: LIST
61696: PUSH
61697: LD_INT 3
61699: PUSH
61700: LD_INT 1
61702: NEG
61703: PUSH
61704: EMPTY
61705: LIST
61706: LIST
61707: PUSH
61708: LD_INT 4
61710: PUSH
61711: LD_INT 0
61713: PUSH
61714: EMPTY
61715: LIST
61716: LIST
61717: PUSH
61718: LD_INT 4
61720: PUSH
61721: LD_INT 1
61723: PUSH
61724: EMPTY
61725: LIST
61726: LIST
61727: PUSH
61728: LD_INT 3
61730: PUSH
61731: LD_INT 1
61733: PUSH
61734: EMPTY
61735: LIST
61736: LIST
61737: PUSH
61738: LD_INT 2
61740: PUSH
61741: LD_INT 0
61743: PUSH
61744: EMPTY
61745: LIST
61746: LIST
61747: PUSH
61748: LD_INT 2
61750: PUSH
61751: LD_INT 1
61753: NEG
61754: PUSH
61755: EMPTY
61756: LIST
61757: LIST
61758: PUSH
61759: LD_INT 2
61761: PUSH
61762: LD_INT 2
61764: NEG
61765: PUSH
61766: EMPTY
61767: LIST
61768: LIST
61769: PUSH
61770: LD_INT 4
61772: PUSH
61773: LD_INT 2
61775: PUSH
61776: EMPTY
61777: LIST
61778: LIST
61779: PUSH
61780: LD_INT 4
61782: PUSH
61783: LD_INT 4
61785: PUSH
61786: EMPTY
61787: LIST
61788: LIST
61789: PUSH
61790: LD_INT 4
61792: PUSH
61793: LD_INT 3
61795: PUSH
61796: EMPTY
61797: LIST
61798: LIST
61799: PUSH
61800: LD_INT 5
61802: PUSH
61803: LD_INT 4
61805: PUSH
61806: EMPTY
61807: LIST
61808: LIST
61809: PUSH
61810: LD_INT 5
61812: PUSH
61813: LD_INT 5
61815: PUSH
61816: EMPTY
61817: LIST
61818: LIST
61819: PUSH
61820: LD_INT 4
61822: PUSH
61823: LD_INT 5
61825: PUSH
61826: EMPTY
61827: LIST
61828: LIST
61829: PUSH
61830: LD_INT 3
61832: PUSH
61833: LD_INT 4
61835: PUSH
61836: EMPTY
61837: LIST
61838: LIST
61839: PUSH
61840: LD_INT 3
61842: PUSH
61843: LD_INT 3
61845: PUSH
61846: EMPTY
61847: LIST
61848: LIST
61849: PUSH
61850: LD_INT 5
61852: PUSH
61853: LD_INT 3
61855: PUSH
61856: EMPTY
61857: LIST
61858: LIST
61859: PUSH
61860: LD_INT 3
61862: PUSH
61863: LD_INT 5
61865: PUSH
61866: EMPTY
61867: LIST
61868: LIST
61869: PUSH
61870: LD_INT 0
61872: PUSH
61873: LD_INT 3
61875: PUSH
61876: EMPTY
61877: LIST
61878: LIST
61879: PUSH
61880: LD_INT 0
61882: PUSH
61883: LD_INT 2
61885: PUSH
61886: EMPTY
61887: LIST
61888: LIST
61889: PUSH
61890: LD_INT 1
61892: PUSH
61893: LD_INT 3
61895: PUSH
61896: EMPTY
61897: LIST
61898: LIST
61899: PUSH
61900: LD_INT 1
61902: PUSH
61903: LD_INT 4
61905: PUSH
61906: EMPTY
61907: LIST
61908: LIST
61909: PUSH
61910: LD_INT 0
61912: PUSH
61913: LD_INT 4
61915: PUSH
61916: EMPTY
61917: LIST
61918: LIST
61919: PUSH
61920: LD_INT 1
61922: NEG
61923: PUSH
61924: LD_INT 3
61926: PUSH
61927: EMPTY
61928: LIST
61929: LIST
61930: PUSH
61931: LD_INT 1
61933: NEG
61934: PUSH
61935: LD_INT 2
61937: PUSH
61938: EMPTY
61939: LIST
61940: LIST
61941: PUSH
61942: LD_INT 2
61944: PUSH
61945: LD_INT 4
61947: PUSH
61948: EMPTY
61949: LIST
61950: LIST
61951: PUSH
61952: LD_INT 2
61954: NEG
61955: PUSH
61956: LD_INT 2
61958: PUSH
61959: EMPTY
61960: LIST
61961: LIST
61962: PUSH
61963: LD_INT 4
61965: NEG
61966: PUSH
61967: LD_INT 0
61969: PUSH
61970: EMPTY
61971: LIST
61972: LIST
61973: PUSH
61974: LD_INT 4
61976: NEG
61977: PUSH
61978: LD_INT 1
61980: NEG
61981: PUSH
61982: EMPTY
61983: LIST
61984: LIST
61985: PUSH
61986: LD_INT 3
61988: NEG
61989: PUSH
61990: LD_INT 0
61992: PUSH
61993: EMPTY
61994: LIST
61995: LIST
61996: PUSH
61997: LD_INT 3
61999: NEG
62000: PUSH
62001: LD_INT 1
62003: PUSH
62004: EMPTY
62005: LIST
62006: LIST
62007: PUSH
62008: LD_INT 4
62010: NEG
62011: PUSH
62012: LD_INT 1
62014: PUSH
62015: EMPTY
62016: LIST
62017: LIST
62018: PUSH
62019: LD_INT 5
62021: NEG
62022: PUSH
62023: LD_INT 0
62025: PUSH
62026: EMPTY
62027: LIST
62028: LIST
62029: PUSH
62030: LD_INT 5
62032: NEG
62033: PUSH
62034: LD_INT 1
62036: NEG
62037: PUSH
62038: EMPTY
62039: LIST
62040: LIST
62041: PUSH
62042: LD_INT 5
62044: NEG
62045: PUSH
62046: LD_INT 2
62048: NEG
62049: PUSH
62050: EMPTY
62051: LIST
62052: LIST
62053: PUSH
62054: LD_INT 3
62056: NEG
62057: PUSH
62058: LD_INT 2
62060: PUSH
62061: EMPTY
62062: LIST
62063: LIST
62064: PUSH
62065: EMPTY
62066: LIST
62067: LIST
62068: LIST
62069: LIST
62070: LIST
62071: LIST
62072: LIST
62073: LIST
62074: LIST
62075: LIST
62076: LIST
62077: LIST
62078: LIST
62079: LIST
62080: LIST
62081: LIST
62082: LIST
62083: LIST
62084: LIST
62085: LIST
62086: LIST
62087: LIST
62088: LIST
62089: LIST
62090: LIST
62091: LIST
62092: LIST
62093: LIST
62094: LIST
62095: LIST
62096: LIST
62097: LIST
62098: LIST
62099: LIST
62100: LIST
62101: LIST
62102: LIST
62103: LIST
62104: LIST
62105: LIST
62106: LIST
62107: LIST
62108: LIST
62109: LIST
62110: LIST
62111: ST_TO_ADDR
// end ; end ;
62112: GO 62115
62114: POP
// case btype of b_depot , b_warehouse :
62115: LD_VAR 0 1
62119: PUSH
62120: LD_INT 0
62122: DOUBLE
62123: EQUAL
62124: IFTRUE 62134
62126: LD_INT 1
62128: DOUBLE
62129: EQUAL
62130: IFTRUE 62134
62132: GO 62335
62134: POP
// case nation of nation_american :
62135: LD_VAR 0 5
62139: PUSH
62140: LD_INT 1
62142: DOUBLE
62143: EQUAL
62144: IFTRUE 62148
62146: GO 62204
62148: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
62149: LD_ADDR_VAR 0 9
62153: PUSH
62154: LD_VAR 0 11
62158: PUSH
62159: LD_VAR 0 12
62163: PUSH
62164: LD_VAR 0 13
62168: PUSH
62169: LD_VAR 0 14
62173: PUSH
62174: LD_VAR 0 15
62178: PUSH
62179: LD_VAR 0 16
62183: PUSH
62184: EMPTY
62185: LIST
62186: LIST
62187: LIST
62188: LIST
62189: LIST
62190: LIST
62191: PUSH
62192: LD_VAR 0 4
62196: PUSH
62197: LD_INT 1
62199: PLUS
62200: ARRAY
62201: ST_TO_ADDR
62202: GO 62333
62204: LD_INT 2
62206: DOUBLE
62207: EQUAL
62208: IFTRUE 62212
62210: GO 62268
62212: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
62213: LD_ADDR_VAR 0 9
62217: PUSH
62218: LD_VAR 0 17
62222: PUSH
62223: LD_VAR 0 18
62227: PUSH
62228: LD_VAR 0 19
62232: PUSH
62233: LD_VAR 0 20
62237: PUSH
62238: LD_VAR 0 21
62242: PUSH
62243: LD_VAR 0 22
62247: PUSH
62248: EMPTY
62249: LIST
62250: LIST
62251: LIST
62252: LIST
62253: LIST
62254: LIST
62255: PUSH
62256: LD_VAR 0 4
62260: PUSH
62261: LD_INT 1
62263: PLUS
62264: ARRAY
62265: ST_TO_ADDR
62266: GO 62333
62268: LD_INT 3
62270: DOUBLE
62271: EQUAL
62272: IFTRUE 62276
62274: GO 62332
62276: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
62277: LD_ADDR_VAR 0 9
62281: PUSH
62282: LD_VAR 0 23
62286: PUSH
62287: LD_VAR 0 24
62291: PUSH
62292: LD_VAR 0 25
62296: PUSH
62297: LD_VAR 0 26
62301: PUSH
62302: LD_VAR 0 27
62306: PUSH
62307: LD_VAR 0 28
62311: PUSH
62312: EMPTY
62313: LIST
62314: LIST
62315: LIST
62316: LIST
62317: LIST
62318: LIST
62319: PUSH
62320: LD_VAR 0 4
62324: PUSH
62325: LD_INT 1
62327: PLUS
62328: ARRAY
62329: ST_TO_ADDR
62330: GO 62333
62332: POP
62333: GO 62888
62335: LD_INT 2
62337: DOUBLE
62338: EQUAL
62339: IFTRUE 62349
62341: LD_INT 3
62343: DOUBLE
62344: EQUAL
62345: IFTRUE 62349
62347: GO 62405
62349: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
62350: LD_ADDR_VAR 0 9
62354: PUSH
62355: LD_VAR 0 29
62359: PUSH
62360: LD_VAR 0 30
62364: PUSH
62365: LD_VAR 0 31
62369: PUSH
62370: LD_VAR 0 32
62374: PUSH
62375: LD_VAR 0 33
62379: PUSH
62380: LD_VAR 0 34
62384: PUSH
62385: EMPTY
62386: LIST
62387: LIST
62388: LIST
62389: LIST
62390: LIST
62391: LIST
62392: PUSH
62393: LD_VAR 0 4
62397: PUSH
62398: LD_INT 1
62400: PLUS
62401: ARRAY
62402: ST_TO_ADDR
62403: GO 62888
62405: LD_INT 16
62407: DOUBLE
62408: EQUAL
62409: IFTRUE 62467
62411: LD_INT 17
62413: DOUBLE
62414: EQUAL
62415: IFTRUE 62467
62417: LD_INT 18
62419: DOUBLE
62420: EQUAL
62421: IFTRUE 62467
62423: LD_INT 19
62425: DOUBLE
62426: EQUAL
62427: IFTRUE 62467
62429: LD_INT 22
62431: DOUBLE
62432: EQUAL
62433: IFTRUE 62467
62435: LD_INT 20
62437: DOUBLE
62438: EQUAL
62439: IFTRUE 62467
62441: LD_INT 21
62443: DOUBLE
62444: EQUAL
62445: IFTRUE 62467
62447: LD_INT 23
62449: DOUBLE
62450: EQUAL
62451: IFTRUE 62467
62453: LD_INT 24
62455: DOUBLE
62456: EQUAL
62457: IFTRUE 62467
62459: LD_INT 25
62461: DOUBLE
62462: EQUAL
62463: IFTRUE 62467
62465: GO 62523
62467: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
62468: LD_ADDR_VAR 0 9
62472: PUSH
62473: LD_VAR 0 35
62477: PUSH
62478: LD_VAR 0 36
62482: PUSH
62483: LD_VAR 0 37
62487: PUSH
62488: LD_VAR 0 38
62492: PUSH
62493: LD_VAR 0 39
62497: PUSH
62498: LD_VAR 0 40
62502: PUSH
62503: EMPTY
62504: LIST
62505: LIST
62506: LIST
62507: LIST
62508: LIST
62509: LIST
62510: PUSH
62511: LD_VAR 0 4
62515: PUSH
62516: LD_INT 1
62518: PLUS
62519: ARRAY
62520: ST_TO_ADDR
62521: GO 62888
62523: LD_INT 6
62525: DOUBLE
62526: EQUAL
62527: IFTRUE 62579
62529: LD_INT 7
62531: DOUBLE
62532: EQUAL
62533: IFTRUE 62579
62535: LD_INT 8
62537: DOUBLE
62538: EQUAL
62539: IFTRUE 62579
62541: LD_INT 13
62543: DOUBLE
62544: EQUAL
62545: IFTRUE 62579
62547: LD_INT 12
62549: DOUBLE
62550: EQUAL
62551: IFTRUE 62579
62553: LD_INT 15
62555: DOUBLE
62556: EQUAL
62557: IFTRUE 62579
62559: LD_INT 11
62561: DOUBLE
62562: EQUAL
62563: IFTRUE 62579
62565: LD_INT 14
62567: DOUBLE
62568: EQUAL
62569: IFTRUE 62579
62571: LD_INT 10
62573: DOUBLE
62574: EQUAL
62575: IFTRUE 62579
62577: GO 62635
62579: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
62580: LD_ADDR_VAR 0 9
62584: PUSH
62585: LD_VAR 0 41
62589: PUSH
62590: LD_VAR 0 42
62594: PUSH
62595: LD_VAR 0 43
62599: PUSH
62600: LD_VAR 0 44
62604: PUSH
62605: LD_VAR 0 45
62609: PUSH
62610: LD_VAR 0 46
62614: PUSH
62615: EMPTY
62616: LIST
62617: LIST
62618: LIST
62619: LIST
62620: LIST
62621: LIST
62622: PUSH
62623: LD_VAR 0 4
62627: PUSH
62628: LD_INT 1
62630: PLUS
62631: ARRAY
62632: ST_TO_ADDR
62633: GO 62888
62635: LD_INT 36
62637: DOUBLE
62638: EQUAL
62639: IFTRUE 62643
62641: GO 62699
62643: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
62644: LD_ADDR_VAR 0 9
62648: PUSH
62649: LD_VAR 0 47
62653: PUSH
62654: LD_VAR 0 48
62658: PUSH
62659: LD_VAR 0 49
62663: PUSH
62664: LD_VAR 0 50
62668: PUSH
62669: LD_VAR 0 51
62673: PUSH
62674: LD_VAR 0 52
62678: PUSH
62679: EMPTY
62680: LIST
62681: LIST
62682: LIST
62683: LIST
62684: LIST
62685: LIST
62686: PUSH
62687: LD_VAR 0 4
62691: PUSH
62692: LD_INT 1
62694: PLUS
62695: ARRAY
62696: ST_TO_ADDR
62697: GO 62888
62699: LD_INT 4
62701: DOUBLE
62702: EQUAL
62703: IFTRUE 62725
62705: LD_INT 5
62707: DOUBLE
62708: EQUAL
62709: IFTRUE 62725
62711: LD_INT 34
62713: DOUBLE
62714: EQUAL
62715: IFTRUE 62725
62717: LD_INT 37
62719: DOUBLE
62720: EQUAL
62721: IFTRUE 62725
62723: GO 62781
62725: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
62726: LD_ADDR_VAR 0 9
62730: PUSH
62731: LD_VAR 0 53
62735: PUSH
62736: LD_VAR 0 54
62740: PUSH
62741: LD_VAR 0 55
62745: PUSH
62746: LD_VAR 0 56
62750: PUSH
62751: LD_VAR 0 57
62755: PUSH
62756: LD_VAR 0 58
62760: PUSH
62761: EMPTY
62762: LIST
62763: LIST
62764: LIST
62765: LIST
62766: LIST
62767: LIST
62768: PUSH
62769: LD_VAR 0 4
62773: PUSH
62774: LD_INT 1
62776: PLUS
62777: ARRAY
62778: ST_TO_ADDR
62779: GO 62888
62781: LD_INT 31
62783: DOUBLE
62784: EQUAL
62785: IFTRUE 62831
62787: LD_INT 32
62789: DOUBLE
62790: EQUAL
62791: IFTRUE 62831
62793: LD_INT 33
62795: DOUBLE
62796: EQUAL
62797: IFTRUE 62831
62799: LD_INT 27
62801: DOUBLE
62802: EQUAL
62803: IFTRUE 62831
62805: LD_INT 26
62807: DOUBLE
62808: EQUAL
62809: IFTRUE 62831
62811: LD_INT 28
62813: DOUBLE
62814: EQUAL
62815: IFTRUE 62831
62817: LD_INT 29
62819: DOUBLE
62820: EQUAL
62821: IFTRUE 62831
62823: LD_INT 30
62825: DOUBLE
62826: EQUAL
62827: IFTRUE 62831
62829: GO 62887
62831: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
62832: LD_ADDR_VAR 0 9
62836: PUSH
62837: LD_VAR 0 59
62841: PUSH
62842: LD_VAR 0 60
62846: PUSH
62847: LD_VAR 0 61
62851: PUSH
62852: LD_VAR 0 62
62856: PUSH
62857: LD_VAR 0 63
62861: PUSH
62862: LD_VAR 0 64
62866: PUSH
62867: EMPTY
62868: LIST
62869: LIST
62870: LIST
62871: LIST
62872: LIST
62873: LIST
62874: PUSH
62875: LD_VAR 0 4
62879: PUSH
62880: LD_INT 1
62882: PLUS
62883: ARRAY
62884: ST_TO_ADDR
62885: GO 62888
62887: POP
// temp_list2 = [ ] ;
62888: LD_ADDR_VAR 0 10
62892: PUSH
62893: EMPTY
62894: ST_TO_ADDR
// for i in temp_list do
62895: LD_ADDR_VAR 0 8
62899: PUSH
62900: LD_VAR 0 9
62904: PUSH
62905: FOR_IN
62906: IFFALSE 62958
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
62908: LD_ADDR_VAR 0 10
62912: PUSH
62913: LD_VAR 0 10
62917: PUSH
62918: LD_VAR 0 8
62922: PUSH
62923: LD_INT 1
62925: ARRAY
62926: PUSH
62927: LD_VAR 0 2
62931: PLUS
62932: PUSH
62933: LD_VAR 0 8
62937: PUSH
62938: LD_INT 2
62940: ARRAY
62941: PUSH
62942: LD_VAR 0 3
62946: PLUS
62947: PUSH
62948: EMPTY
62949: LIST
62950: LIST
62951: PUSH
62952: EMPTY
62953: LIST
62954: ADD
62955: ST_TO_ADDR
62956: GO 62905
62958: POP
62959: POP
// result = temp_list2 ;
62960: LD_ADDR_VAR 0 7
62964: PUSH
62965: LD_VAR 0 10
62969: ST_TO_ADDR
// end ;
62970: LD_VAR 0 7
62974: RET
// export function EnemyInRange ( unit , dist ) ; begin
62975: LD_INT 0
62977: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
62978: LD_ADDR_VAR 0 3
62982: PUSH
62983: LD_VAR 0 1
62987: PPUSH
62988: CALL_OW 255
62992: PPUSH
62993: LD_VAR 0 1
62997: PPUSH
62998: CALL_OW 250
63002: PPUSH
63003: LD_VAR 0 1
63007: PPUSH
63008: CALL_OW 251
63012: PPUSH
63013: LD_VAR 0 2
63017: PPUSH
63018: CALL 36348 0 4
63022: PUSH
63023: LD_INT 4
63025: ARRAY
63026: ST_TO_ADDR
// end ;
63027: LD_VAR 0 3
63031: RET
// export function PlayerSeeMe ( unit ) ; begin
63032: LD_INT 0
63034: PPUSH
// result := See ( your_side , unit ) ;
63035: LD_ADDR_VAR 0 2
63039: PUSH
63040: LD_OWVAR 2
63044: PPUSH
63045: LD_VAR 0 1
63049: PPUSH
63050: CALL_OW 292
63054: ST_TO_ADDR
// end ;
63055: LD_VAR 0 2
63059: RET
// export function ReverseDir ( unit ) ; begin
63060: LD_INT 0
63062: PPUSH
// if not unit then
63063: LD_VAR 0 1
63067: NOT
63068: IFFALSE 63072
// exit ;
63070: GO 63095
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
63072: LD_ADDR_VAR 0 2
63076: PUSH
63077: LD_VAR 0 1
63081: PPUSH
63082: CALL_OW 254
63086: PUSH
63087: LD_INT 3
63089: PLUS
63090: PUSH
63091: LD_INT 6
63093: MOD
63094: ST_TO_ADDR
// end ;
63095: LD_VAR 0 2
63099: RET
// export function ReverseArray ( array ) ; var i ; begin
63100: LD_INT 0
63102: PPUSH
63103: PPUSH
// if not array then
63104: LD_VAR 0 1
63108: NOT
63109: IFFALSE 63113
// exit ;
63111: GO 63168
// result := [ ] ;
63113: LD_ADDR_VAR 0 2
63117: PUSH
63118: EMPTY
63119: ST_TO_ADDR
// for i := array downto 1 do
63120: LD_ADDR_VAR 0 3
63124: PUSH
63125: DOUBLE
63126: LD_VAR 0 1
63130: INC
63131: ST_TO_ADDR
63132: LD_INT 1
63134: PUSH
63135: FOR_DOWNTO
63136: IFFALSE 63166
// result := Join ( result , array [ i ] ) ;
63138: LD_ADDR_VAR 0 2
63142: PUSH
63143: LD_VAR 0 2
63147: PPUSH
63148: LD_VAR 0 1
63152: PUSH
63153: LD_VAR 0 3
63157: ARRAY
63158: PPUSH
63159: CALL 67833 0 2
63163: ST_TO_ADDR
63164: GO 63135
63166: POP
63167: POP
// end ;
63168: LD_VAR 0 2
63172: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
63173: LD_INT 0
63175: PPUSH
63176: PPUSH
63177: PPUSH
63178: PPUSH
63179: PPUSH
63180: PPUSH
// if not unit or not hexes then
63181: LD_VAR 0 1
63185: NOT
63186: PUSH
63187: LD_VAR 0 2
63191: NOT
63192: OR
63193: IFFALSE 63197
// exit ;
63195: GO 63320
// dist := 9999 ;
63197: LD_ADDR_VAR 0 5
63201: PUSH
63202: LD_INT 9999
63204: ST_TO_ADDR
// for i = 1 to hexes do
63205: LD_ADDR_VAR 0 4
63209: PUSH
63210: DOUBLE
63211: LD_INT 1
63213: DEC
63214: ST_TO_ADDR
63215: LD_VAR 0 2
63219: PUSH
63220: FOR_TO
63221: IFFALSE 63308
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
63223: LD_ADDR_VAR 0 6
63227: PUSH
63228: LD_VAR 0 1
63232: PPUSH
63233: LD_VAR 0 2
63237: PUSH
63238: LD_VAR 0 4
63242: ARRAY
63243: PUSH
63244: LD_INT 1
63246: ARRAY
63247: PPUSH
63248: LD_VAR 0 2
63252: PUSH
63253: LD_VAR 0 4
63257: ARRAY
63258: PUSH
63259: LD_INT 2
63261: ARRAY
63262: PPUSH
63263: CALL_OW 297
63267: ST_TO_ADDR
// if tdist < dist then
63268: LD_VAR 0 6
63272: PUSH
63273: LD_VAR 0 5
63277: LESS
63278: IFFALSE 63306
// begin hex := hexes [ i ] ;
63280: LD_ADDR_VAR 0 8
63284: PUSH
63285: LD_VAR 0 2
63289: PUSH
63290: LD_VAR 0 4
63294: ARRAY
63295: ST_TO_ADDR
// dist := tdist ;
63296: LD_ADDR_VAR 0 5
63300: PUSH
63301: LD_VAR 0 6
63305: ST_TO_ADDR
// end ; end ;
63306: GO 63220
63308: POP
63309: POP
// result := hex ;
63310: LD_ADDR_VAR 0 3
63314: PUSH
63315: LD_VAR 0 8
63319: ST_TO_ADDR
// end ;
63320: LD_VAR 0 3
63324: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
63325: LD_INT 0
63327: PPUSH
63328: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
63329: LD_VAR 0 1
63333: NOT
63334: PUSH
63335: LD_VAR 0 1
63339: PUSH
63340: LD_INT 21
63342: PUSH
63343: LD_INT 2
63345: PUSH
63346: EMPTY
63347: LIST
63348: LIST
63349: PUSH
63350: LD_INT 23
63352: PUSH
63353: LD_INT 2
63355: PUSH
63356: EMPTY
63357: LIST
63358: LIST
63359: PUSH
63360: EMPTY
63361: LIST
63362: LIST
63363: PPUSH
63364: CALL_OW 69
63368: IN
63369: NOT
63370: OR
63371: IFFALSE 63375
// exit ;
63373: GO 63422
// for i = 1 to 3 do
63375: LD_ADDR_VAR 0 3
63379: PUSH
63380: DOUBLE
63381: LD_INT 1
63383: DEC
63384: ST_TO_ADDR
63385: LD_INT 3
63387: PUSH
63388: FOR_TO
63389: IFFALSE 63420
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
63391: LD_VAR 0 1
63395: PPUSH
63396: CALL_OW 250
63400: PPUSH
63401: LD_VAR 0 1
63405: PPUSH
63406: CALL_OW 251
63410: PPUSH
63411: LD_INT 1
63413: PPUSH
63414: CALL_OW 453
63418: GO 63388
63420: POP
63421: POP
// end ;
63422: LD_VAR 0 2
63426: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
63427: LD_INT 0
63429: PPUSH
63430: PPUSH
63431: PPUSH
63432: PPUSH
63433: PPUSH
63434: PPUSH
// if not unit or not enemy_unit then
63435: LD_VAR 0 1
63439: NOT
63440: PUSH
63441: LD_VAR 0 2
63445: NOT
63446: OR
63447: IFFALSE 63451
// exit ;
63449: GO 63918
// if GetLives ( i ) < 250 then
63451: LD_VAR 0 4
63455: PPUSH
63456: CALL_OW 256
63460: PUSH
63461: LD_INT 250
63463: LESS
63464: IFFALSE 63477
// begin ComAutodestruct ( i ) ;
63466: LD_VAR 0 4
63470: PPUSH
63471: CALL 63325 0 1
// exit ;
63475: GO 63918
// end ; x := GetX ( enemy_unit ) ;
63477: LD_ADDR_VAR 0 7
63481: PUSH
63482: LD_VAR 0 2
63486: PPUSH
63487: CALL_OW 250
63491: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
63492: LD_ADDR_VAR 0 8
63496: PUSH
63497: LD_VAR 0 2
63501: PPUSH
63502: CALL_OW 251
63506: ST_TO_ADDR
// if not x or not y then
63507: LD_VAR 0 7
63511: NOT
63512: PUSH
63513: LD_VAR 0 8
63517: NOT
63518: OR
63519: IFFALSE 63523
// exit ;
63521: GO 63918
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
63523: LD_ADDR_VAR 0 6
63527: PUSH
63528: LD_VAR 0 7
63532: PPUSH
63533: LD_INT 0
63535: PPUSH
63536: LD_INT 4
63538: PPUSH
63539: CALL_OW 272
63543: PUSH
63544: LD_VAR 0 8
63548: PPUSH
63549: LD_INT 0
63551: PPUSH
63552: LD_INT 4
63554: PPUSH
63555: CALL_OW 273
63559: PUSH
63560: EMPTY
63561: LIST
63562: LIST
63563: PUSH
63564: LD_VAR 0 7
63568: PPUSH
63569: LD_INT 1
63571: PPUSH
63572: LD_INT 4
63574: PPUSH
63575: CALL_OW 272
63579: PUSH
63580: LD_VAR 0 8
63584: PPUSH
63585: LD_INT 1
63587: PPUSH
63588: LD_INT 4
63590: PPUSH
63591: CALL_OW 273
63595: PUSH
63596: EMPTY
63597: LIST
63598: LIST
63599: PUSH
63600: LD_VAR 0 7
63604: PPUSH
63605: LD_INT 2
63607: PPUSH
63608: LD_INT 4
63610: PPUSH
63611: CALL_OW 272
63615: PUSH
63616: LD_VAR 0 8
63620: PPUSH
63621: LD_INT 2
63623: PPUSH
63624: LD_INT 4
63626: PPUSH
63627: CALL_OW 273
63631: PUSH
63632: EMPTY
63633: LIST
63634: LIST
63635: PUSH
63636: LD_VAR 0 7
63640: PPUSH
63641: LD_INT 3
63643: PPUSH
63644: LD_INT 4
63646: PPUSH
63647: CALL_OW 272
63651: PUSH
63652: LD_VAR 0 8
63656: PPUSH
63657: LD_INT 3
63659: PPUSH
63660: LD_INT 4
63662: PPUSH
63663: CALL_OW 273
63667: PUSH
63668: EMPTY
63669: LIST
63670: LIST
63671: PUSH
63672: LD_VAR 0 7
63676: PPUSH
63677: LD_INT 4
63679: PPUSH
63680: LD_INT 4
63682: PPUSH
63683: CALL_OW 272
63687: PUSH
63688: LD_VAR 0 8
63692: PPUSH
63693: LD_INT 4
63695: PPUSH
63696: LD_INT 4
63698: PPUSH
63699: CALL_OW 273
63703: PUSH
63704: EMPTY
63705: LIST
63706: LIST
63707: PUSH
63708: LD_VAR 0 7
63712: PPUSH
63713: LD_INT 5
63715: PPUSH
63716: LD_INT 4
63718: PPUSH
63719: CALL_OW 272
63723: PUSH
63724: LD_VAR 0 8
63728: PPUSH
63729: LD_INT 5
63731: PPUSH
63732: LD_INT 4
63734: PPUSH
63735: CALL_OW 273
63739: PUSH
63740: EMPTY
63741: LIST
63742: LIST
63743: PUSH
63744: EMPTY
63745: LIST
63746: LIST
63747: LIST
63748: LIST
63749: LIST
63750: LIST
63751: ST_TO_ADDR
// for i = tmp downto 1 do
63752: LD_ADDR_VAR 0 4
63756: PUSH
63757: DOUBLE
63758: LD_VAR 0 6
63762: INC
63763: ST_TO_ADDR
63764: LD_INT 1
63766: PUSH
63767: FOR_DOWNTO
63768: IFFALSE 63869
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
63770: LD_VAR 0 6
63774: PUSH
63775: LD_VAR 0 4
63779: ARRAY
63780: PUSH
63781: LD_INT 1
63783: ARRAY
63784: PPUSH
63785: LD_VAR 0 6
63789: PUSH
63790: LD_VAR 0 4
63794: ARRAY
63795: PUSH
63796: LD_INT 2
63798: ARRAY
63799: PPUSH
63800: CALL_OW 488
63804: NOT
63805: PUSH
63806: LD_VAR 0 6
63810: PUSH
63811: LD_VAR 0 4
63815: ARRAY
63816: PUSH
63817: LD_INT 1
63819: ARRAY
63820: PPUSH
63821: LD_VAR 0 6
63825: PUSH
63826: LD_VAR 0 4
63830: ARRAY
63831: PUSH
63832: LD_INT 2
63834: ARRAY
63835: PPUSH
63836: CALL_OW 428
63840: PUSH
63841: LD_INT 0
63843: NONEQUAL
63844: OR
63845: IFFALSE 63867
// tmp := Delete ( tmp , i ) ;
63847: LD_ADDR_VAR 0 6
63851: PUSH
63852: LD_VAR 0 6
63856: PPUSH
63857: LD_VAR 0 4
63861: PPUSH
63862: CALL_OW 3
63866: ST_TO_ADDR
63867: GO 63767
63869: POP
63870: POP
// j := GetClosestHex ( unit , tmp ) ;
63871: LD_ADDR_VAR 0 5
63875: PUSH
63876: LD_VAR 0 1
63880: PPUSH
63881: LD_VAR 0 6
63885: PPUSH
63886: CALL 63173 0 2
63890: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
63891: LD_VAR 0 1
63895: PPUSH
63896: LD_VAR 0 5
63900: PUSH
63901: LD_INT 1
63903: ARRAY
63904: PPUSH
63905: LD_VAR 0 5
63909: PUSH
63910: LD_INT 2
63912: ARRAY
63913: PPUSH
63914: CALL_OW 111
// end ;
63918: LD_VAR 0 3
63922: RET
// export function PrepareApemanSoldier ( ) ; begin
63923: LD_INT 0
63925: PPUSH
// uc_nation := 0 ;
63926: LD_ADDR_OWVAR 21
63930: PUSH
63931: LD_INT 0
63933: ST_TO_ADDR
// hc_sex := sex_male ;
63934: LD_ADDR_OWVAR 27
63938: PUSH
63939: LD_INT 1
63941: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
63942: LD_ADDR_OWVAR 28
63946: PUSH
63947: LD_INT 15
63949: ST_TO_ADDR
// hc_gallery :=  ;
63950: LD_ADDR_OWVAR 33
63954: PUSH
63955: LD_STRING 
63957: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
63958: LD_ADDR_OWVAR 31
63962: PUSH
63963: LD_INT 0
63965: PPUSH
63966: LD_INT 3
63968: PPUSH
63969: CALL_OW 12
63973: PUSH
63974: LD_INT 0
63976: PPUSH
63977: LD_INT 3
63979: PPUSH
63980: CALL_OW 12
63984: PUSH
63985: LD_INT 0
63987: PUSH
63988: LD_INT 0
63990: PUSH
63991: EMPTY
63992: LIST
63993: LIST
63994: LIST
63995: LIST
63996: ST_TO_ADDR
// end ;
63997: LD_VAR 0 1
64001: RET
// export function PrepareApemanEngineer ( ) ; begin
64002: LD_INT 0
64004: PPUSH
// uc_nation := 0 ;
64005: LD_ADDR_OWVAR 21
64009: PUSH
64010: LD_INT 0
64012: ST_TO_ADDR
// hc_sex := sex_male ;
64013: LD_ADDR_OWVAR 27
64017: PUSH
64018: LD_INT 1
64020: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
64021: LD_ADDR_OWVAR 28
64025: PUSH
64026: LD_INT 16
64028: ST_TO_ADDR
// hc_gallery :=  ;
64029: LD_ADDR_OWVAR 33
64033: PUSH
64034: LD_STRING 
64036: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
64037: LD_ADDR_OWVAR 31
64041: PUSH
64042: LD_INT 0
64044: PPUSH
64045: LD_INT 3
64047: PPUSH
64048: CALL_OW 12
64052: PUSH
64053: LD_INT 0
64055: PPUSH
64056: LD_INT 3
64058: PPUSH
64059: CALL_OW 12
64063: PUSH
64064: LD_INT 0
64066: PUSH
64067: LD_INT 0
64069: PUSH
64070: EMPTY
64071: LIST
64072: LIST
64073: LIST
64074: LIST
64075: ST_TO_ADDR
// end ;
64076: LD_VAR 0 1
64080: RET
// export function PrepareApeman ( agressivity ) ; begin
64081: LD_INT 0
64083: PPUSH
// uc_side := 0 ;
64084: LD_ADDR_OWVAR 20
64088: PUSH
64089: LD_INT 0
64091: ST_TO_ADDR
// uc_nation := 0 ;
64092: LD_ADDR_OWVAR 21
64096: PUSH
64097: LD_INT 0
64099: ST_TO_ADDR
// hc_sex := sex_male ;
64100: LD_ADDR_OWVAR 27
64104: PUSH
64105: LD_INT 1
64107: ST_TO_ADDR
// hc_class := class_apeman ;
64108: LD_ADDR_OWVAR 28
64112: PUSH
64113: LD_INT 12
64115: ST_TO_ADDR
// hc_gallery :=  ;
64116: LD_ADDR_OWVAR 33
64120: PUSH
64121: LD_STRING 
64123: ST_TO_ADDR
// if agressivity = 0 then
64124: LD_VAR 0 1
64128: PUSH
64129: LD_INT 0
64131: EQUAL
64132: IFFALSE 64144
// hc_agressivity := 0 else
64134: LD_ADDR_OWVAR 35
64138: PUSH
64139: LD_INT 0
64141: ST_TO_ADDR
64142: GO 64165
// hc_agressivity := rand ( - agressivity , agressivity ) ;
64144: LD_ADDR_OWVAR 35
64148: PUSH
64149: LD_VAR 0 1
64153: NEG
64154: PPUSH
64155: LD_VAR 0 1
64159: PPUSH
64160: CALL_OW 12
64164: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
64165: LD_ADDR_OWVAR 31
64169: PUSH
64170: LD_INT 0
64172: PPUSH
64173: LD_INT 3
64175: PPUSH
64176: CALL_OW 12
64180: PUSH
64181: LD_INT 0
64183: PPUSH
64184: LD_INT 3
64186: PPUSH
64187: CALL_OW 12
64191: PUSH
64192: LD_INT 0
64194: PUSH
64195: LD_INT 0
64197: PUSH
64198: EMPTY
64199: LIST
64200: LIST
64201: LIST
64202: LIST
64203: ST_TO_ADDR
// end ;
64204: LD_VAR 0 2
64208: RET
// export function PrepareTiger ( agressivity ) ; begin
64209: LD_INT 0
64211: PPUSH
// uc_side := 0 ;
64212: LD_ADDR_OWVAR 20
64216: PUSH
64217: LD_INT 0
64219: ST_TO_ADDR
// uc_nation := 0 ;
64220: LD_ADDR_OWVAR 21
64224: PUSH
64225: LD_INT 0
64227: ST_TO_ADDR
// hc_class := class_tiger ;
64228: LD_ADDR_OWVAR 28
64232: PUSH
64233: LD_INT 14
64235: ST_TO_ADDR
// hc_gallery :=  ;
64236: LD_ADDR_OWVAR 33
64240: PUSH
64241: LD_STRING 
64243: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
64244: LD_ADDR_OWVAR 35
64248: PUSH
64249: LD_VAR 0 1
64253: NEG
64254: PPUSH
64255: LD_VAR 0 1
64259: PPUSH
64260: CALL_OW 12
64264: ST_TO_ADDR
// end ;
64265: LD_VAR 0 2
64269: RET
// export function PrepareEnchidna ( ) ; begin
64270: LD_INT 0
64272: PPUSH
// uc_side := 0 ;
64273: LD_ADDR_OWVAR 20
64277: PUSH
64278: LD_INT 0
64280: ST_TO_ADDR
// uc_nation := 0 ;
64281: LD_ADDR_OWVAR 21
64285: PUSH
64286: LD_INT 0
64288: ST_TO_ADDR
// hc_class := class_baggie ;
64289: LD_ADDR_OWVAR 28
64293: PUSH
64294: LD_INT 13
64296: ST_TO_ADDR
// hc_gallery :=  ;
64297: LD_ADDR_OWVAR 33
64301: PUSH
64302: LD_STRING 
64304: ST_TO_ADDR
// end ;
64305: LD_VAR 0 1
64309: RET
// export function PrepareFrog ( ) ; begin
64310: LD_INT 0
64312: PPUSH
// uc_side := 0 ;
64313: LD_ADDR_OWVAR 20
64317: PUSH
64318: LD_INT 0
64320: ST_TO_ADDR
// uc_nation := 0 ;
64321: LD_ADDR_OWVAR 21
64325: PUSH
64326: LD_INT 0
64328: ST_TO_ADDR
// hc_class := class_frog ;
64329: LD_ADDR_OWVAR 28
64333: PUSH
64334: LD_INT 19
64336: ST_TO_ADDR
// hc_gallery :=  ;
64337: LD_ADDR_OWVAR 33
64341: PUSH
64342: LD_STRING 
64344: ST_TO_ADDR
// end ;
64345: LD_VAR 0 1
64349: RET
// export function PrepareFish ( ) ; begin
64350: LD_INT 0
64352: PPUSH
// uc_side := 0 ;
64353: LD_ADDR_OWVAR 20
64357: PUSH
64358: LD_INT 0
64360: ST_TO_ADDR
// uc_nation := 0 ;
64361: LD_ADDR_OWVAR 21
64365: PUSH
64366: LD_INT 0
64368: ST_TO_ADDR
// hc_class := class_fish ;
64369: LD_ADDR_OWVAR 28
64373: PUSH
64374: LD_INT 20
64376: ST_TO_ADDR
// hc_gallery :=  ;
64377: LD_ADDR_OWVAR 33
64381: PUSH
64382: LD_STRING 
64384: ST_TO_ADDR
// end ;
64385: LD_VAR 0 1
64389: RET
// export function PrepareBird ( ) ; begin
64390: LD_INT 0
64392: PPUSH
// uc_side := 0 ;
64393: LD_ADDR_OWVAR 20
64397: PUSH
64398: LD_INT 0
64400: ST_TO_ADDR
// uc_nation := 0 ;
64401: LD_ADDR_OWVAR 21
64405: PUSH
64406: LD_INT 0
64408: ST_TO_ADDR
// hc_class := class_phororhacos ;
64409: LD_ADDR_OWVAR 28
64413: PUSH
64414: LD_INT 18
64416: ST_TO_ADDR
// hc_gallery :=  ;
64417: LD_ADDR_OWVAR 33
64421: PUSH
64422: LD_STRING 
64424: ST_TO_ADDR
// end ;
64425: LD_VAR 0 1
64429: RET
// export function PrepareHorse ( ) ; begin
64430: LD_INT 0
64432: PPUSH
// uc_side := 0 ;
64433: LD_ADDR_OWVAR 20
64437: PUSH
64438: LD_INT 0
64440: ST_TO_ADDR
// uc_nation := 0 ;
64441: LD_ADDR_OWVAR 21
64445: PUSH
64446: LD_INT 0
64448: ST_TO_ADDR
// hc_class := class_horse ;
64449: LD_ADDR_OWVAR 28
64453: PUSH
64454: LD_INT 21
64456: ST_TO_ADDR
// hc_gallery :=  ;
64457: LD_ADDR_OWVAR 33
64461: PUSH
64462: LD_STRING 
64464: ST_TO_ADDR
// end ;
64465: LD_VAR 0 1
64469: RET
// export function PrepareMastodont ( ) ; begin
64470: LD_INT 0
64472: PPUSH
// uc_side := 0 ;
64473: LD_ADDR_OWVAR 20
64477: PUSH
64478: LD_INT 0
64480: ST_TO_ADDR
// uc_nation := 0 ;
64481: LD_ADDR_OWVAR 21
64485: PUSH
64486: LD_INT 0
64488: ST_TO_ADDR
// vc_chassis := class_mastodont ;
64489: LD_ADDR_OWVAR 37
64493: PUSH
64494: LD_INT 31
64496: ST_TO_ADDR
// vc_control := control_rider ;
64497: LD_ADDR_OWVAR 38
64501: PUSH
64502: LD_INT 4
64504: ST_TO_ADDR
// end ;
64505: LD_VAR 0 1
64509: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
64510: LD_INT 0
64512: PPUSH
64513: PPUSH
64514: PPUSH
// uc_side = 0 ;
64515: LD_ADDR_OWVAR 20
64519: PUSH
64520: LD_INT 0
64522: ST_TO_ADDR
// uc_nation = 0 ;
64523: LD_ADDR_OWVAR 21
64527: PUSH
64528: LD_INT 0
64530: ST_TO_ADDR
// InitHc_All ( ) ;
64531: CALL_OW 584
// InitVc ;
64535: CALL_OW 20
// if mastodonts then
64539: LD_VAR 0 6
64543: IFFALSE 64610
// for i = 1 to mastodonts do
64545: LD_ADDR_VAR 0 11
64549: PUSH
64550: DOUBLE
64551: LD_INT 1
64553: DEC
64554: ST_TO_ADDR
64555: LD_VAR 0 6
64559: PUSH
64560: FOR_TO
64561: IFFALSE 64608
// begin vc_chassis := 31 ;
64563: LD_ADDR_OWVAR 37
64567: PUSH
64568: LD_INT 31
64570: ST_TO_ADDR
// vc_control := control_rider ;
64571: LD_ADDR_OWVAR 38
64575: PUSH
64576: LD_INT 4
64578: ST_TO_ADDR
// animal := CreateVehicle ;
64579: LD_ADDR_VAR 0 12
64583: PUSH
64584: CALL_OW 45
64588: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64589: LD_VAR 0 12
64593: PPUSH
64594: LD_VAR 0 8
64598: PPUSH
64599: LD_INT 0
64601: PPUSH
64602: CALL 66738 0 3
// end ;
64606: GO 64560
64608: POP
64609: POP
// if horses then
64610: LD_VAR 0 5
64614: IFFALSE 64681
// for i = 1 to horses do
64616: LD_ADDR_VAR 0 11
64620: PUSH
64621: DOUBLE
64622: LD_INT 1
64624: DEC
64625: ST_TO_ADDR
64626: LD_VAR 0 5
64630: PUSH
64631: FOR_TO
64632: IFFALSE 64679
// begin hc_class := 21 ;
64634: LD_ADDR_OWVAR 28
64638: PUSH
64639: LD_INT 21
64641: ST_TO_ADDR
// hc_gallery :=  ;
64642: LD_ADDR_OWVAR 33
64646: PUSH
64647: LD_STRING 
64649: ST_TO_ADDR
// animal := CreateHuman ;
64650: LD_ADDR_VAR 0 12
64654: PUSH
64655: CALL_OW 44
64659: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64660: LD_VAR 0 12
64664: PPUSH
64665: LD_VAR 0 8
64669: PPUSH
64670: LD_INT 0
64672: PPUSH
64673: CALL 66738 0 3
// end ;
64677: GO 64631
64679: POP
64680: POP
// if birds then
64681: LD_VAR 0 1
64685: IFFALSE 64752
// for i = 1 to birds do
64687: LD_ADDR_VAR 0 11
64691: PUSH
64692: DOUBLE
64693: LD_INT 1
64695: DEC
64696: ST_TO_ADDR
64697: LD_VAR 0 1
64701: PUSH
64702: FOR_TO
64703: IFFALSE 64750
// begin hc_class := 18 ;
64705: LD_ADDR_OWVAR 28
64709: PUSH
64710: LD_INT 18
64712: ST_TO_ADDR
// hc_gallery =  ;
64713: LD_ADDR_OWVAR 33
64717: PUSH
64718: LD_STRING 
64720: ST_TO_ADDR
// animal := CreateHuman ;
64721: LD_ADDR_VAR 0 12
64725: PUSH
64726: CALL_OW 44
64730: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64731: LD_VAR 0 12
64735: PPUSH
64736: LD_VAR 0 8
64740: PPUSH
64741: LD_INT 0
64743: PPUSH
64744: CALL 66738 0 3
// end ;
64748: GO 64702
64750: POP
64751: POP
// if tigers then
64752: LD_VAR 0 2
64756: IFFALSE 64840
// for i = 1 to tigers do
64758: LD_ADDR_VAR 0 11
64762: PUSH
64763: DOUBLE
64764: LD_INT 1
64766: DEC
64767: ST_TO_ADDR
64768: LD_VAR 0 2
64772: PUSH
64773: FOR_TO
64774: IFFALSE 64838
// begin hc_class = class_tiger ;
64776: LD_ADDR_OWVAR 28
64780: PUSH
64781: LD_INT 14
64783: ST_TO_ADDR
// hc_gallery =  ;
64784: LD_ADDR_OWVAR 33
64788: PUSH
64789: LD_STRING 
64791: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
64792: LD_ADDR_OWVAR 35
64796: PUSH
64797: LD_INT 7
64799: NEG
64800: PPUSH
64801: LD_INT 7
64803: PPUSH
64804: CALL_OW 12
64808: ST_TO_ADDR
// animal := CreateHuman ;
64809: LD_ADDR_VAR 0 12
64813: PUSH
64814: CALL_OW 44
64818: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64819: LD_VAR 0 12
64823: PPUSH
64824: LD_VAR 0 8
64828: PPUSH
64829: LD_INT 0
64831: PPUSH
64832: CALL 66738 0 3
// end ;
64836: GO 64773
64838: POP
64839: POP
// if apemans then
64840: LD_VAR 0 3
64844: IFFALSE 64967
// for i = 1 to apemans do
64846: LD_ADDR_VAR 0 11
64850: PUSH
64851: DOUBLE
64852: LD_INT 1
64854: DEC
64855: ST_TO_ADDR
64856: LD_VAR 0 3
64860: PUSH
64861: FOR_TO
64862: IFFALSE 64965
// begin hc_class = class_apeman ;
64864: LD_ADDR_OWVAR 28
64868: PUSH
64869: LD_INT 12
64871: ST_TO_ADDR
// hc_gallery =  ;
64872: LD_ADDR_OWVAR 33
64876: PUSH
64877: LD_STRING 
64879: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
64880: LD_ADDR_OWVAR 35
64884: PUSH
64885: LD_INT 2
64887: NEG
64888: PPUSH
64889: LD_INT 2
64891: PPUSH
64892: CALL_OW 12
64896: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
64897: LD_ADDR_OWVAR 31
64901: PUSH
64902: LD_INT 1
64904: PPUSH
64905: LD_INT 3
64907: PPUSH
64908: CALL_OW 12
64912: PUSH
64913: LD_INT 1
64915: PPUSH
64916: LD_INT 3
64918: PPUSH
64919: CALL_OW 12
64923: PUSH
64924: LD_INT 0
64926: PUSH
64927: LD_INT 0
64929: PUSH
64930: EMPTY
64931: LIST
64932: LIST
64933: LIST
64934: LIST
64935: ST_TO_ADDR
// animal := CreateHuman ;
64936: LD_ADDR_VAR 0 12
64940: PUSH
64941: CALL_OW 44
64945: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64946: LD_VAR 0 12
64950: PPUSH
64951: LD_VAR 0 8
64955: PPUSH
64956: LD_INT 0
64958: PPUSH
64959: CALL 66738 0 3
// end ;
64963: GO 64861
64965: POP
64966: POP
// if enchidnas then
64967: LD_VAR 0 4
64971: IFFALSE 65038
// for i = 1 to enchidnas do
64973: LD_ADDR_VAR 0 11
64977: PUSH
64978: DOUBLE
64979: LD_INT 1
64981: DEC
64982: ST_TO_ADDR
64983: LD_VAR 0 4
64987: PUSH
64988: FOR_TO
64989: IFFALSE 65036
// begin hc_class = 13 ;
64991: LD_ADDR_OWVAR 28
64995: PUSH
64996: LD_INT 13
64998: ST_TO_ADDR
// hc_gallery =  ;
64999: LD_ADDR_OWVAR 33
65003: PUSH
65004: LD_STRING 
65006: ST_TO_ADDR
// animal := CreateHuman ;
65007: LD_ADDR_VAR 0 12
65011: PUSH
65012: CALL_OW 44
65016: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65017: LD_VAR 0 12
65021: PPUSH
65022: LD_VAR 0 8
65026: PPUSH
65027: LD_INT 0
65029: PPUSH
65030: CALL 66738 0 3
// end ;
65034: GO 64988
65036: POP
65037: POP
// if fishes then
65038: LD_VAR 0 7
65042: IFFALSE 65109
// for i = 1 to fishes do
65044: LD_ADDR_VAR 0 11
65048: PUSH
65049: DOUBLE
65050: LD_INT 1
65052: DEC
65053: ST_TO_ADDR
65054: LD_VAR 0 7
65058: PUSH
65059: FOR_TO
65060: IFFALSE 65107
// begin hc_class = 20 ;
65062: LD_ADDR_OWVAR 28
65066: PUSH
65067: LD_INT 20
65069: ST_TO_ADDR
// hc_gallery =  ;
65070: LD_ADDR_OWVAR 33
65074: PUSH
65075: LD_STRING 
65077: ST_TO_ADDR
// animal := CreateHuman ;
65078: LD_ADDR_VAR 0 12
65082: PUSH
65083: CALL_OW 44
65087: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
65088: LD_VAR 0 12
65092: PPUSH
65093: LD_VAR 0 9
65097: PPUSH
65098: LD_INT 0
65100: PPUSH
65101: CALL 66738 0 3
// end ;
65105: GO 65059
65107: POP
65108: POP
// end ;
65109: LD_VAR 0 10
65113: RET
// export function WantHeal ( sci , unit ) ; begin
65114: LD_INT 0
65116: PPUSH
// if GetTaskList ( sci ) > 0 then
65117: LD_VAR 0 1
65121: PPUSH
65122: CALL_OW 437
65126: PUSH
65127: LD_INT 0
65129: GREATER
65130: IFFALSE 65200
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
65132: LD_VAR 0 1
65136: PPUSH
65137: CALL_OW 437
65141: PUSH
65142: LD_INT 1
65144: ARRAY
65145: PUSH
65146: LD_INT 1
65148: ARRAY
65149: PUSH
65150: LD_STRING l
65152: EQUAL
65153: PUSH
65154: LD_VAR 0 1
65158: PPUSH
65159: CALL_OW 437
65163: PUSH
65164: LD_INT 1
65166: ARRAY
65167: PUSH
65168: LD_INT 4
65170: ARRAY
65171: PUSH
65172: LD_VAR 0 2
65176: EQUAL
65177: AND
65178: IFFALSE 65190
// result := true else
65180: LD_ADDR_VAR 0 3
65184: PUSH
65185: LD_INT 1
65187: ST_TO_ADDR
65188: GO 65198
// result := false ;
65190: LD_ADDR_VAR 0 3
65194: PUSH
65195: LD_INT 0
65197: ST_TO_ADDR
// end else
65198: GO 65208
// result := false ;
65200: LD_ADDR_VAR 0 3
65204: PUSH
65205: LD_INT 0
65207: ST_TO_ADDR
// end ;
65208: LD_VAR 0 3
65212: RET
// export function HealTarget ( sci ) ; begin
65213: LD_INT 0
65215: PPUSH
// if not sci then
65216: LD_VAR 0 1
65220: NOT
65221: IFFALSE 65225
// exit ;
65223: GO 65290
// result := 0 ;
65225: LD_ADDR_VAR 0 2
65229: PUSH
65230: LD_INT 0
65232: ST_TO_ADDR
// if GetTaskList ( sci ) then
65233: LD_VAR 0 1
65237: PPUSH
65238: CALL_OW 437
65242: IFFALSE 65290
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
65244: LD_VAR 0 1
65248: PPUSH
65249: CALL_OW 437
65253: PUSH
65254: LD_INT 1
65256: ARRAY
65257: PUSH
65258: LD_INT 1
65260: ARRAY
65261: PUSH
65262: LD_STRING l
65264: EQUAL
65265: IFFALSE 65290
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
65267: LD_ADDR_VAR 0 2
65271: PUSH
65272: LD_VAR 0 1
65276: PPUSH
65277: CALL_OW 437
65281: PUSH
65282: LD_INT 1
65284: ARRAY
65285: PUSH
65286: LD_INT 4
65288: ARRAY
65289: ST_TO_ADDR
// end ;
65290: LD_VAR 0 2
65294: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
65295: LD_INT 0
65297: PPUSH
65298: PPUSH
65299: PPUSH
65300: PPUSH
// if not base_units then
65301: LD_VAR 0 1
65305: NOT
65306: IFFALSE 65310
// exit ;
65308: GO 65397
// result := false ;
65310: LD_ADDR_VAR 0 2
65314: PUSH
65315: LD_INT 0
65317: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
65318: LD_ADDR_VAR 0 5
65322: PUSH
65323: LD_VAR 0 1
65327: PPUSH
65328: LD_INT 21
65330: PUSH
65331: LD_INT 3
65333: PUSH
65334: EMPTY
65335: LIST
65336: LIST
65337: PPUSH
65338: CALL_OW 72
65342: ST_TO_ADDR
// if not tmp then
65343: LD_VAR 0 5
65347: NOT
65348: IFFALSE 65352
// exit ;
65350: GO 65397
// for i in tmp do
65352: LD_ADDR_VAR 0 3
65356: PUSH
65357: LD_VAR 0 5
65361: PUSH
65362: FOR_IN
65363: IFFALSE 65395
// begin result := EnemyInRange ( i , 22 ) ;
65365: LD_ADDR_VAR 0 2
65369: PUSH
65370: LD_VAR 0 3
65374: PPUSH
65375: LD_INT 22
65377: PPUSH
65378: CALL 62975 0 2
65382: ST_TO_ADDR
// if result then
65383: LD_VAR 0 2
65387: IFFALSE 65393
// exit ;
65389: POP
65390: POP
65391: GO 65397
// end ;
65393: GO 65362
65395: POP
65396: POP
// end ;
65397: LD_VAR 0 2
65401: RET
// export function FilterByTag ( units , tag ) ; begin
65402: LD_INT 0
65404: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
65405: LD_ADDR_VAR 0 3
65409: PUSH
65410: LD_VAR 0 1
65414: PPUSH
65415: LD_INT 120
65417: PUSH
65418: LD_VAR 0 2
65422: PUSH
65423: EMPTY
65424: LIST
65425: LIST
65426: PPUSH
65427: CALL_OW 72
65431: ST_TO_ADDR
// end ;
65432: LD_VAR 0 3
65436: RET
// export function IsDriver ( un ) ; begin
65437: LD_INT 0
65439: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
65440: LD_ADDR_VAR 0 2
65444: PUSH
65445: LD_VAR 0 1
65449: PUSH
65450: LD_INT 55
65452: PUSH
65453: EMPTY
65454: LIST
65455: PPUSH
65456: CALL_OW 69
65460: IN
65461: ST_TO_ADDR
// end ;
65462: LD_VAR 0 2
65466: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
65467: LD_INT 0
65469: PPUSH
65470: PPUSH
// list := [ ] ;
65471: LD_ADDR_VAR 0 5
65475: PUSH
65476: EMPTY
65477: ST_TO_ADDR
// case d of 0 :
65478: LD_VAR 0 3
65482: PUSH
65483: LD_INT 0
65485: DOUBLE
65486: EQUAL
65487: IFTRUE 65491
65489: GO 65624
65491: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
65492: LD_ADDR_VAR 0 5
65496: PUSH
65497: LD_VAR 0 1
65501: PUSH
65502: LD_INT 4
65504: MINUS
65505: PUSH
65506: LD_VAR 0 2
65510: PUSH
65511: LD_INT 4
65513: MINUS
65514: PUSH
65515: LD_INT 2
65517: PUSH
65518: EMPTY
65519: LIST
65520: LIST
65521: LIST
65522: PUSH
65523: LD_VAR 0 1
65527: PUSH
65528: LD_INT 3
65530: MINUS
65531: PUSH
65532: LD_VAR 0 2
65536: PUSH
65537: LD_INT 1
65539: PUSH
65540: EMPTY
65541: LIST
65542: LIST
65543: LIST
65544: PUSH
65545: LD_VAR 0 1
65549: PUSH
65550: LD_INT 4
65552: PLUS
65553: PUSH
65554: LD_VAR 0 2
65558: PUSH
65559: LD_INT 4
65561: PUSH
65562: EMPTY
65563: LIST
65564: LIST
65565: LIST
65566: PUSH
65567: LD_VAR 0 1
65571: PUSH
65572: LD_INT 3
65574: PLUS
65575: PUSH
65576: LD_VAR 0 2
65580: PUSH
65581: LD_INT 3
65583: PLUS
65584: PUSH
65585: LD_INT 5
65587: PUSH
65588: EMPTY
65589: LIST
65590: LIST
65591: LIST
65592: PUSH
65593: LD_VAR 0 1
65597: PUSH
65598: LD_VAR 0 2
65602: PUSH
65603: LD_INT 4
65605: PLUS
65606: PUSH
65607: LD_INT 0
65609: PUSH
65610: EMPTY
65611: LIST
65612: LIST
65613: LIST
65614: PUSH
65615: EMPTY
65616: LIST
65617: LIST
65618: LIST
65619: LIST
65620: LIST
65621: ST_TO_ADDR
// end ; 1 :
65622: GO 66322
65624: LD_INT 1
65626: DOUBLE
65627: EQUAL
65628: IFTRUE 65632
65630: GO 65765
65632: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
65633: LD_ADDR_VAR 0 5
65637: PUSH
65638: LD_VAR 0 1
65642: PUSH
65643: LD_VAR 0 2
65647: PUSH
65648: LD_INT 4
65650: MINUS
65651: PUSH
65652: LD_INT 3
65654: PUSH
65655: EMPTY
65656: LIST
65657: LIST
65658: LIST
65659: PUSH
65660: LD_VAR 0 1
65664: PUSH
65665: LD_INT 3
65667: MINUS
65668: PUSH
65669: LD_VAR 0 2
65673: PUSH
65674: LD_INT 3
65676: MINUS
65677: PUSH
65678: LD_INT 2
65680: PUSH
65681: EMPTY
65682: LIST
65683: LIST
65684: LIST
65685: PUSH
65686: LD_VAR 0 1
65690: PUSH
65691: LD_INT 4
65693: MINUS
65694: PUSH
65695: LD_VAR 0 2
65699: PUSH
65700: LD_INT 1
65702: PUSH
65703: EMPTY
65704: LIST
65705: LIST
65706: LIST
65707: PUSH
65708: LD_VAR 0 1
65712: PUSH
65713: LD_VAR 0 2
65717: PUSH
65718: LD_INT 3
65720: PLUS
65721: PUSH
65722: LD_INT 0
65724: PUSH
65725: EMPTY
65726: LIST
65727: LIST
65728: LIST
65729: PUSH
65730: LD_VAR 0 1
65734: PUSH
65735: LD_INT 4
65737: PLUS
65738: PUSH
65739: LD_VAR 0 2
65743: PUSH
65744: LD_INT 4
65746: PLUS
65747: PUSH
65748: LD_INT 5
65750: PUSH
65751: EMPTY
65752: LIST
65753: LIST
65754: LIST
65755: PUSH
65756: EMPTY
65757: LIST
65758: LIST
65759: LIST
65760: LIST
65761: LIST
65762: ST_TO_ADDR
// end ; 2 :
65763: GO 66322
65765: LD_INT 2
65767: DOUBLE
65768: EQUAL
65769: IFTRUE 65773
65771: GO 65902
65773: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
65774: LD_ADDR_VAR 0 5
65778: PUSH
65779: LD_VAR 0 1
65783: PUSH
65784: LD_VAR 0 2
65788: PUSH
65789: LD_INT 3
65791: MINUS
65792: PUSH
65793: LD_INT 3
65795: PUSH
65796: EMPTY
65797: LIST
65798: LIST
65799: LIST
65800: PUSH
65801: LD_VAR 0 1
65805: PUSH
65806: LD_INT 4
65808: PLUS
65809: PUSH
65810: LD_VAR 0 2
65814: PUSH
65815: LD_INT 4
65817: PUSH
65818: EMPTY
65819: LIST
65820: LIST
65821: LIST
65822: PUSH
65823: LD_VAR 0 1
65827: PUSH
65828: LD_VAR 0 2
65832: PUSH
65833: LD_INT 4
65835: PLUS
65836: PUSH
65837: LD_INT 0
65839: PUSH
65840: EMPTY
65841: LIST
65842: LIST
65843: LIST
65844: PUSH
65845: LD_VAR 0 1
65849: PUSH
65850: LD_INT 3
65852: MINUS
65853: PUSH
65854: LD_VAR 0 2
65858: PUSH
65859: LD_INT 1
65861: PUSH
65862: EMPTY
65863: LIST
65864: LIST
65865: LIST
65866: PUSH
65867: LD_VAR 0 1
65871: PUSH
65872: LD_INT 4
65874: MINUS
65875: PUSH
65876: LD_VAR 0 2
65880: PUSH
65881: LD_INT 4
65883: MINUS
65884: PUSH
65885: LD_INT 2
65887: PUSH
65888: EMPTY
65889: LIST
65890: LIST
65891: LIST
65892: PUSH
65893: EMPTY
65894: LIST
65895: LIST
65896: LIST
65897: LIST
65898: LIST
65899: ST_TO_ADDR
// end ; 3 :
65900: GO 66322
65902: LD_INT 3
65904: DOUBLE
65905: EQUAL
65906: IFTRUE 65910
65908: GO 66043
65910: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
65911: LD_ADDR_VAR 0 5
65915: PUSH
65916: LD_VAR 0 1
65920: PUSH
65921: LD_INT 3
65923: PLUS
65924: PUSH
65925: LD_VAR 0 2
65929: PUSH
65930: LD_INT 4
65932: PUSH
65933: EMPTY
65934: LIST
65935: LIST
65936: LIST
65937: PUSH
65938: LD_VAR 0 1
65942: PUSH
65943: LD_INT 4
65945: PLUS
65946: PUSH
65947: LD_VAR 0 2
65951: PUSH
65952: LD_INT 4
65954: PLUS
65955: PUSH
65956: LD_INT 5
65958: PUSH
65959: EMPTY
65960: LIST
65961: LIST
65962: LIST
65963: PUSH
65964: LD_VAR 0 1
65968: PUSH
65969: LD_INT 4
65971: MINUS
65972: PUSH
65973: LD_VAR 0 2
65977: PUSH
65978: LD_INT 1
65980: PUSH
65981: EMPTY
65982: LIST
65983: LIST
65984: LIST
65985: PUSH
65986: LD_VAR 0 1
65990: PUSH
65991: LD_VAR 0 2
65995: PUSH
65996: LD_INT 4
65998: MINUS
65999: PUSH
66000: LD_INT 3
66002: PUSH
66003: EMPTY
66004: LIST
66005: LIST
66006: LIST
66007: PUSH
66008: LD_VAR 0 1
66012: PUSH
66013: LD_INT 3
66015: MINUS
66016: PUSH
66017: LD_VAR 0 2
66021: PUSH
66022: LD_INT 3
66024: MINUS
66025: PUSH
66026: LD_INT 2
66028: PUSH
66029: EMPTY
66030: LIST
66031: LIST
66032: LIST
66033: PUSH
66034: EMPTY
66035: LIST
66036: LIST
66037: LIST
66038: LIST
66039: LIST
66040: ST_TO_ADDR
// end ; 4 :
66041: GO 66322
66043: LD_INT 4
66045: DOUBLE
66046: EQUAL
66047: IFTRUE 66051
66049: GO 66184
66051: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
66052: LD_ADDR_VAR 0 5
66056: PUSH
66057: LD_VAR 0 1
66061: PUSH
66062: LD_VAR 0 2
66066: PUSH
66067: LD_INT 4
66069: PLUS
66070: PUSH
66071: LD_INT 0
66073: PUSH
66074: EMPTY
66075: LIST
66076: LIST
66077: LIST
66078: PUSH
66079: LD_VAR 0 1
66083: PUSH
66084: LD_INT 3
66086: PLUS
66087: PUSH
66088: LD_VAR 0 2
66092: PUSH
66093: LD_INT 3
66095: PLUS
66096: PUSH
66097: LD_INT 5
66099: PUSH
66100: EMPTY
66101: LIST
66102: LIST
66103: LIST
66104: PUSH
66105: LD_VAR 0 1
66109: PUSH
66110: LD_INT 4
66112: PLUS
66113: PUSH
66114: LD_VAR 0 2
66118: PUSH
66119: LD_INT 4
66121: PUSH
66122: EMPTY
66123: LIST
66124: LIST
66125: LIST
66126: PUSH
66127: LD_VAR 0 1
66131: PUSH
66132: LD_VAR 0 2
66136: PUSH
66137: LD_INT 3
66139: MINUS
66140: PUSH
66141: LD_INT 3
66143: PUSH
66144: EMPTY
66145: LIST
66146: LIST
66147: LIST
66148: PUSH
66149: LD_VAR 0 1
66153: PUSH
66154: LD_INT 4
66156: MINUS
66157: PUSH
66158: LD_VAR 0 2
66162: PUSH
66163: LD_INT 4
66165: MINUS
66166: PUSH
66167: LD_INT 2
66169: PUSH
66170: EMPTY
66171: LIST
66172: LIST
66173: LIST
66174: PUSH
66175: EMPTY
66176: LIST
66177: LIST
66178: LIST
66179: LIST
66180: LIST
66181: ST_TO_ADDR
// end ; 5 :
66182: GO 66322
66184: LD_INT 5
66186: DOUBLE
66187: EQUAL
66188: IFTRUE 66192
66190: GO 66321
66192: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
66193: LD_ADDR_VAR 0 5
66197: PUSH
66198: LD_VAR 0 1
66202: PUSH
66203: LD_INT 4
66205: MINUS
66206: PUSH
66207: LD_VAR 0 2
66211: PUSH
66212: LD_INT 1
66214: PUSH
66215: EMPTY
66216: LIST
66217: LIST
66218: LIST
66219: PUSH
66220: LD_VAR 0 1
66224: PUSH
66225: LD_VAR 0 2
66229: PUSH
66230: LD_INT 4
66232: MINUS
66233: PUSH
66234: LD_INT 3
66236: PUSH
66237: EMPTY
66238: LIST
66239: LIST
66240: LIST
66241: PUSH
66242: LD_VAR 0 1
66246: PUSH
66247: LD_INT 4
66249: PLUS
66250: PUSH
66251: LD_VAR 0 2
66255: PUSH
66256: LD_INT 4
66258: PLUS
66259: PUSH
66260: LD_INT 5
66262: PUSH
66263: EMPTY
66264: LIST
66265: LIST
66266: LIST
66267: PUSH
66268: LD_VAR 0 1
66272: PUSH
66273: LD_INT 3
66275: PLUS
66276: PUSH
66277: LD_VAR 0 2
66281: PUSH
66282: LD_INT 4
66284: PUSH
66285: EMPTY
66286: LIST
66287: LIST
66288: LIST
66289: PUSH
66290: LD_VAR 0 1
66294: PUSH
66295: LD_VAR 0 2
66299: PUSH
66300: LD_INT 3
66302: PLUS
66303: PUSH
66304: LD_INT 0
66306: PUSH
66307: EMPTY
66308: LIST
66309: LIST
66310: LIST
66311: PUSH
66312: EMPTY
66313: LIST
66314: LIST
66315: LIST
66316: LIST
66317: LIST
66318: ST_TO_ADDR
// end ; end ;
66319: GO 66322
66321: POP
// result := list ;
66322: LD_ADDR_VAR 0 4
66326: PUSH
66327: LD_VAR 0 5
66331: ST_TO_ADDR
// end ;
66332: LD_VAR 0 4
66336: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
66337: LD_INT 0
66339: PPUSH
66340: PPUSH
66341: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
66342: LD_VAR 0 1
66346: NOT
66347: PUSH
66348: LD_VAR 0 2
66352: PUSH
66353: LD_INT 1
66355: PUSH
66356: LD_INT 2
66358: PUSH
66359: LD_INT 3
66361: PUSH
66362: LD_INT 4
66364: PUSH
66365: EMPTY
66366: LIST
66367: LIST
66368: LIST
66369: LIST
66370: IN
66371: NOT
66372: OR
66373: IFFALSE 66377
// exit ;
66375: GO 66460
// tmp := [ ] ;
66377: LD_ADDR_VAR 0 5
66381: PUSH
66382: EMPTY
66383: ST_TO_ADDR
// for i in units do
66384: LD_ADDR_VAR 0 4
66388: PUSH
66389: LD_VAR 0 1
66393: PUSH
66394: FOR_IN
66395: IFFALSE 66429
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
66397: LD_ADDR_VAR 0 5
66401: PUSH
66402: LD_VAR 0 5
66406: PPUSH
66407: LD_VAR 0 4
66411: PPUSH
66412: LD_VAR 0 2
66416: PPUSH
66417: CALL_OW 259
66421: PPUSH
66422: CALL 67833 0 2
66426: ST_TO_ADDR
66427: GO 66394
66429: POP
66430: POP
// if not tmp then
66431: LD_VAR 0 5
66435: NOT
66436: IFFALSE 66440
// exit ;
66438: GO 66460
// result := SortListByListDesc ( units , tmp ) ;
66440: LD_ADDR_VAR 0 3
66444: PUSH
66445: LD_VAR 0 1
66449: PPUSH
66450: LD_VAR 0 5
66454: PPUSH
66455: CALL_OW 77
66459: ST_TO_ADDR
// end ;
66460: LD_VAR 0 3
66464: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
66465: LD_INT 0
66467: PPUSH
66468: PPUSH
66469: PPUSH
// result := false ;
66470: LD_ADDR_VAR 0 3
66474: PUSH
66475: LD_INT 0
66477: ST_TO_ADDR
// if not building then
66478: LD_VAR 0 2
66482: NOT
66483: IFFALSE 66487
// exit ;
66485: GO 66625
// x := GetX ( building ) ;
66487: LD_ADDR_VAR 0 4
66491: PUSH
66492: LD_VAR 0 2
66496: PPUSH
66497: CALL_OW 250
66501: ST_TO_ADDR
// y := GetY ( building ) ;
66502: LD_ADDR_VAR 0 5
66506: PUSH
66507: LD_VAR 0 2
66511: PPUSH
66512: CALL_OW 251
66516: ST_TO_ADDR
// if not x or not y then
66517: LD_VAR 0 4
66521: NOT
66522: PUSH
66523: LD_VAR 0 5
66527: NOT
66528: OR
66529: IFFALSE 66533
// exit ;
66531: GO 66625
// if GetTaskList ( unit ) then
66533: LD_VAR 0 1
66537: PPUSH
66538: CALL_OW 437
66542: IFFALSE 66625
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
66544: LD_STRING e
66546: PUSH
66547: LD_VAR 0 1
66551: PPUSH
66552: CALL_OW 437
66556: PUSH
66557: LD_INT 1
66559: ARRAY
66560: PUSH
66561: LD_INT 1
66563: ARRAY
66564: EQUAL
66565: PUSH
66566: LD_VAR 0 4
66570: PUSH
66571: LD_VAR 0 1
66575: PPUSH
66576: CALL_OW 437
66580: PUSH
66581: LD_INT 1
66583: ARRAY
66584: PUSH
66585: LD_INT 2
66587: ARRAY
66588: EQUAL
66589: AND
66590: PUSH
66591: LD_VAR 0 5
66595: PUSH
66596: LD_VAR 0 1
66600: PPUSH
66601: CALL_OW 437
66605: PUSH
66606: LD_INT 1
66608: ARRAY
66609: PUSH
66610: LD_INT 3
66612: ARRAY
66613: EQUAL
66614: AND
66615: IFFALSE 66625
// result := true end ;
66617: LD_ADDR_VAR 0 3
66621: PUSH
66622: LD_INT 1
66624: ST_TO_ADDR
// end ;
66625: LD_VAR 0 3
66629: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
66630: LD_INT 0
66632: PPUSH
// result := false ;
66633: LD_ADDR_VAR 0 4
66637: PUSH
66638: LD_INT 0
66640: ST_TO_ADDR
// if GetTaskList ( unit ) then
66641: LD_VAR 0 1
66645: PPUSH
66646: CALL_OW 437
66650: IFFALSE 66733
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
66652: LD_STRING M
66654: PUSH
66655: LD_VAR 0 1
66659: PPUSH
66660: CALL_OW 437
66664: PUSH
66665: LD_INT 1
66667: ARRAY
66668: PUSH
66669: LD_INT 1
66671: ARRAY
66672: EQUAL
66673: PUSH
66674: LD_VAR 0 2
66678: PUSH
66679: LD_VAR 0 1
66683: PPUSH
66684: CALL_OW 437
66688: PUSH
66689: LD_INT 1
66691: ARRAY
66692: PUSH
66693: LD_INT 2
66695: ARRAY
66696: EQUAL
66697: AND
66698: PUSH
66699: LD_VAR 0 3
66703: PUSH
66704: LD_VAR 0 1
66708: PPUSH
66709: CALL_OW 437
66713: PUSH
66714: LD_INT 1
66716: ARRAY
66717: PUSH
66718: LD_INT 3
66720: ARRAY
66721: EQUAL
66722: AND
66723: IFFALSE 66733
// result := true ;
66725: LD_ADDR_VAR 0 4
66729: PUSH
66730: LD_INT 1
66732: ST_TO_ADDR
// end ; end ;
66733: LD_VAR 0 4
66737: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
66738: LD_INT 0
66740: PPUSH
66741: PPUSH
66742: PPUSH
66743: PPUSH
// if not unit or not area then
66744: LD_VAR 0 1
66748: NOT
66749: PUSH
66750: LD_VAR 0 2
66754: NOT
66755: OR
66756: IFFALSE 66760
// exit ;
66758: GO 66936
// tmp := AreaToList ( area , i ) ;
66760: LD_ADDR_VAR 0 6
66764: PUSH
66765: LD_VAR 0 2
66769: PPUSH
66770: LD_VAR 0 5
66774: PPUSH
66775: CALL_OW 517
66779: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
66780: LD_ADDR_VAR 0 5
66784: PUSH
66785: DOUBLE
66786: LD_INT 1
66788: DEC
66789: ST_TO_ADDR
66790: LD_VAR 0 6
66794: PUSH
66795: LD_INT 1
66797: ARRAY
66798: PUSH
66799: FOR_TO
66800: IFFALSE 66934
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
66802: LD_ADDR_VAR 0 7
66806: PUSH
66807: LD_VAR 0 6
66811: PUSH
66812: LD_INT 1
66814: ARRAY
66815: PUSH
66816: LD_VAR 0 5
66820: ARRAY
66821: PUSH
66822: LD_VAR 0 6
66826: PUSH
66827: LD_INT 2
66829: ARRAY
66830: PUSH
66831: LD_VAR 0 5
66835: ARRAY
66836: PUSH
66837: EMPTY
66838: LIST
66839: LIST
66840: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
66841: LD_INT 92
66843: PUSH
66844: LD_VAR 0 7
66848: PUSH
66849: LD_INT 1
66851: ARRAY
66852: PUSH
66853: LD_VAR 0 7
66857: PUSH
66858: LD_INT 2
66860: ARRAY
66861: PUSH
66862: LD_INT 2
66864: PUSH
66865: EMPTY
66866: LIST
66867: LIST
66868: LIST
66869: LIST
66870: PPUSH
66871: CALL_OW 69
66875: PUSH
66876: LD_INT 0
66878: EQUAL
66879: IFFALSE 66932
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
66881: LD_VAR 0 1
66885: PPUSH
66886: LD_VAR 0 7
66890: PUSH
66891: LD_INT 1
66893: ARRAY
66894: PPUSH
66895: LD_VAR 0 7
66899: PUSH
66900: LD_INT 2
66902: ARRAY
66903: PPUSH
66904: LD_VAR 0 3
66908: PPUSH
66909: CALL_OW 48
// result := IsPlaced ( unit ) ;
66913: LD_ADDR_VAR 0 4
66917: PUSH
66918: LD_VAR 0 1
66922: PPUSH
66923: CALL_OW 305
66927: ST_TO_ADDR
// exit ;
66928: POP
66929: POP
66930: GO 66936
// end ; end ;
66932: GO 66799
66934: POP
66935: POP
// end ;
66936: LD_VAR 0 4
66940: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
66941: LD_INT 0
66943: PPUSH
66944: PPUSH
66945: PPUSH
// if not side or side > 8 then
66946: LD_VAR 0 1
66950: NOT
66951: PUSH
66952: LD_VAR 0 1
66956: PUSH
66957: LD_INT 8
66959: GREATER
66960: OR
66961: IFFALSE 66965
// exit ;
66963: GO 67152
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
66965: LD_ADDR_VAR 0 4
66969: PUSH
66970: LD_INT 22
66972: PUSH
66973: LD_VAR 0 1
66977: PUSH
66978: EMPTY
66979: LIST
66980: LIST
66981: PUSH
66982: LD_INT 21
66984: PUSH
66985: LD_INT 3
66987: PUSH
66988: EMPTY
66989: LIST
66990: LIST
66991: PUSH
66992: EMPTY
66993: LIST
66994: LIST
66995: PPUSH
66996: CALL_OW 69
67000: ST_TO_ADDR
// if not tmp then
67001: LD_VAR 0 4
67005: NOT
67006: IFFALSE 67010
// exit ;
67008: GO 67152
// enable_addtolog := true ;
67010: LD_ADDR_OWVAR 81
67014: PUSH
67015: LD_INT 1
67017: ST_TO_ADDR
// AddToLog ( [ ) ;
67018: LD_STRING [
67020: PPUSH
67021: CALL_OW 561
// for i in tmp do
67025: LD_ADDR_VAR 0 3
67029: PUSH
67030: LD_VAR 0 4
67034: PUSH
67035: FOR_IN
67036: IFFALSE 67143
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
67038: LD_STRING [
67040: PUSH
67041: LD_VAR 0 3
67045: PPUSH
67046: CALL_OW 266
67050: STR
67051: PUSH
67052: LD_STRING , 
67054: STR
67055: PUSH
67056: LD_VAR 0 3
67060: PPUSH
67061: CALL_OW 250
67065: STR
67066: PUSH
67067: LD_STRING , 
67069: STR
67070: PUSH
67071: LD_VAR 0 3
67075: PPUSH
67076: CALL_OW 251
67080: STR
67081: PUSH
67082: LD_STRING , 
67084: STR
67085: PUSH
67086: LD_VAR 0 3
67090: PPUSH
67091: CALL_OW 254
67095: STR
67096: PUSH
67097: LD_STRING , 
67099: STR
67100: PUSH
67101: LD_VAR 0 3
67105: PPUSH
67106: LD_INT 1
67108: PPUSH
67109: CALL_OW 268
67113: STR
67114: PUSH
67115: LD_STRING , 
67117: STR
67118: PUSH
67119: LD_VAR 0 3
67123: PPUSH
67124: LD_INT 2
67126: PPUSH
67127: CALL_OW 268
67131: STR
67132: PUSH
67133: LD_STRING ],
67135: STR
67136: PPUSH
67137: CALL_OW 561
// end ;
67141: GO 67035
67143: POP
67144: POP
// AddToLog ( ]; ) ;
67145: LD_STRING ];
67147: PPUSH
67148: CALL_OW 561
// end ;
67152: LD_VAR 0 2
67156: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
67157: LD_INT 0
67159: PPUSH
67160: PPUSH
67161: PPUSH
67162: PPUSH
67163: PPUSH
// if not area or not rate or not max then
67164: LD_VAR 0 1
67168: NOT
67169: PUSH
67170: LD_VAR 0 2
67174: NOT
67175: OR
67176: PUSH
67177: LD_VAR 0 4
67181: NOT
67182: OR
67183: IFFALSE 67187
// exit ;
67185: GO 67376
// while 1 do
67187: LD_INT 1
67189: IFFALSE 67376
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
67191: LD_ADDR_VAR 0 9
67195: PUSH
67196: LD_VAR 0 1
67200: PPUSH
67201: LD_INT 1
67203: PPUSH
67204: CALL_OW 287
67208: PUSH
67209: LD_INT 10
67211: MUL
67212: ST_TO_ADDR
// r := rate / 10 ;
67213: LD_ADDR_VAR 0 7
67217: PUSH
67218: LD_VAR 0 2
67222: PUSH
67223: LD_INT 10
67225: DIVREAL
67226: ST_TO_ADDR
// time := 1 1$00 ;
67227: LD_ADDR_VAR 0 8
67231: PUSH
67232: LD_INT 2100
67234: ST_TO_ADDR
// if amount < min then
67235: LD_VAR 0 9
67239: PUSH
67240: LD_VAR 0 3
67244: LESS
67245: IFFALSE 67263
// r := r * 2 else
67247: LD_ADDR_VAR 0 7
67251: PUSH
67252: LD_VAR 0 7
67256: PUSH
67257: LD_INT 2
67259: MUL
67260: ST_TO_ADDR
67261: GO 67289
// if amount > max then
67263: LD_VAR 0 9
67267: PUSH
67268: LD_VAR 0 4
67272: GREATER
67273: IFFALSE 67289
// r := r / 2 ;
67275: LD_ADDR_VAR 0 7
67279: PUSH
67280: LD_VAR 0 7
67284: PUSH
67285: LD_INT 2
67287: DIVREAL
67288: ST_TO_ADDR
// time := time / r ;
67289: LD_ADDR_VAR 0 8
67293: PUSH
67294: LD_VAR 0 8
67298: PUSH
67299: LD_VAR 0 7
67303: DIVREAL
67304: ST_TO_ADDR
// if time < 0 then
67305: LD_VAR 0 8
67309: PUSH
67310: LD_INT 0
67312: LESS
67313: IFFALSE 67330
// time := time * - 1 ;
67315: LD_ADDR_VAR 0 8
67319: PUSH
67320: LD_VAR 0 8
67324: PUSH
67325: LD_INT 1
67327: NEG
67328: MUL
67329: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
67330: LD_VAR 0 8
67334: PUSH
67335: LD_INT 35
67337: PPUSH
67338: LD_INT 875
67340: PPUSH
67341: CALL_OW 12
67345: PLUS
67346: PPUSH
67347: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
67351: LD_INT 1
67353: PPUSH
67354: LD_INT 5
67356: PPUSH
67357: CALL_OW 12
67361: PPUSH
67362: LD_VAR 0 1
67366: PPUSH
67367: LD_INT 1
67369: PPUSH
67370: CALL_OW 55
// end ;
67374: GO 67187
// end ;
67376: LD_VAR 0 5
67380: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
67381: LD_INT 0
67383: PPUSH
67384: PPUSH
67385: PPUSH
67386: PPUSH
67387: PPUSH
67388: PPUSH
67389: PPUSH
67390: PPUSH
// if not turrets or not factories then
67391: LD_VAR 0 1
67395: NOT
67396: PUSH
67397: LD_VAR 0 2
67401: NOT
67402: OR
67403: IFFALSE 67407
// exit ;
67405: GO 67714
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
67407: LD_ADDR_VAR 0 10
67411: PUSH
67412: LD_INT 5
67414: PUSH
67415: LD_INT 6
67417: PUSH
67418: EMPTY
67419: LIST
67420: LIST
67421: PUSH
67422: LD_INT 2
67424: PUSH
67425: LD_INT 4
67427: PUSH
67428: EMPTY
67429: LIST
67430: LIST
67431: PUSH
67432: LD_INT 3
67434: PUSH
67435: LD_INT 5
67437: PUSH
67438: EMPTY
67439: LIST
67440: LIST
67441: PUSH
67442: EMPTY
67443: LIST
67444: LIST
67445: LIST
67446: PUSH
67447: LD_INT 24
67449: PUSH
67450: LD_INT 25
67452: PUSH
67453: EMPTY
67454: LIST
67455: LIST
67456: PUSH
67457: LD_INT 23
67459: PUSH
67460: LD_INT 27
67462: PUSH
67463: EMPTY
67464: LIST
67465: LIST
67466: PUSH
67467: EMPTY
67468: LIST
67469: LIST
67470: PUSH
67471: LD_INT 42
67473: PUSH
67474: LD_INT 43
67476: PUSH
67477: EMPTY
67478: LIST
67479: LIST
67480: PUSH
67481: LD_INT 44
67483: PUSH
67484: LD_INT 46
67486: PUSH
67487: EMPTY
67488: LIST
67489: LIST
67490: PUSH
67491: LD_INT 45
67493: PUSH
67494: LD_INT 47
67496: PUSH
67497: EMPTY
67498: LIST
67499: LIST
67500: PUSH
67501: EMPTY
67502: LIST
67503: LIST
67504: LIST
67505: PUSH
67506: EMPTY
67507: LIST
67508: LIST
67509: LIST
67510: ST_TO_ADDR
// result := [ ] ;
67511: LD_ADDR_VAR 0 3
67515: PUSH
67516: EMPTY
67517: ST_TO_ADDR
// for i in turrets do
67518: LD_ADDR_VAR 0 4
67522: PUSH
67523: LD_VAR 0 1
67527: PUSH
67528: FOR_IN
67529: IFFALSE 67712
// begin nat := GetNation ( i ) ;
67531: LD_ADDR_VAR 0 7
67535: PUSH
67536: LD_VAR 0 4
67540: PPUSH
67541: CALL_OW 248
67545: ST_TO_ADDR
// weapon := 0 ;
67546: LD_ADDR_VAR 0 8
67550: PUSH
67551: LD_INT 0
67553: ST_TO_ADDR
// if not nat then
67554: LD_VAR 0 7
67558: NOT
67559: IFFALSE 67563
// continue ;
67561: GO 67528
// for j in list [ nat ] do
67563: LD_ADDR_VAR 0 5
67567: PUSH
67568: LD_VAR 0 10
67572: PUSH
67573: LD_VAR 0 7
67577: ARRAY
67578: PUSH
67579: FOR_IN
67580: IFFALSE 67621
// if GetBWeapon ( i ) = j [ 1 ] then
67582: LD_VAR 0 4
67586: PPUSH
67587: CALL_OW 269
67591: PUSH
67592: LD_VAR 0 5
67596: PUSH
67597: LD_INT 1
67599: ARRAY
67600: EQUAL
67601: IFFALSE 67619
// begin weapon := j [ 2 ] ;
67603: LD_ADDR_VAR 0 8
67607: PUSH
67608: LD_VAR 0 5
67612: PUSH
67613: LD_INT 2
67615: ARRAY
67616: ST_TO_ADDR
// break ;
67617: GO 67621
// end ;
67619: GO 67579
67621: POP
67622: POP
// if not weapon then
67623: LD_VAR 0 8
67627: NOT
67628: IFFALSE 67632
// continue ;
67630: GO 67528
// for k in factories do
67632: LD_ADDR_VAR 0 6
67636: PUSH
67637: LD_VAR 0 2
67641: PUSH
67642: FOR_IN
67643: IFFALSE 67708
// begin weapons := AvailableWeaponList ( k ) ;
67645: LD_ADDR_VAR 0 9
67649: PUSH
67650: LD_VAR 0 6
67654: PPUSH
67655: CALL_OW 478
67659: ST_TO_ADDR
// if not weapons then
67660: LD_VAR 0 9
67664: NOT
67665: IFFALSE 67669
// continue ;
67667: GO 67642
// if weapon in weapons then
67669: LD_VAR 0 8
67673: PUSH
67674: LD_VAR 0 9
67678: IN
67679: IFFALSE 67706
// begin result := [ i , weapon ] ;
67681: LD_ADDR_VAR 0 3
67685: PUSH
67686: LD_VAR 0 4
67690: PUSH
67691: LD_VAR 0 8
67695: PUSH
67696: EMPTY
67697: LIST
67698: LIST
67699: ST_TO_ADDR
// exit ;
67700: POP
67701: POP
67702: POP
67703: POP
67704: GO 67714
// end ; end ;
67706: GO 67642
67708: POP
67709: POP
// end ;
67710: GO 67528
67712: POP
67713: POP
// end ;
67714: LD_VAR 0 3
67718: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
67719: LD_INT 0
67721: PPUSH
// if not side or side > 8 then
67722: LD_VAR 0 3
67726: NOT
67727: PUSH
67728: LD_VAR 0 3
67732: PUSH
67733: LD_INT 8
67735: GREATER
67736: OR
67737: IFFALSE 67741
// exit ;
67739: GO 67800
// if not range then
67741: LD_VAR 0 4
67745: NOT
67746: IFFALSE 67757
// range := - 12 ;
67748: LD_ADDR_VAR 0 4
67752: PUSH
67753: LD_INT 12
67755: NEG
67756: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
67757: LD_VAR 0 1
67761: PPUSH
67762: LD_VAR 0 2
67766: PPUSH
67767: LD_VAR 0 3
67771: PPUSH
67772: LD_VAR 0 4
67776: PPUSH
67777: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
67781: LD_VAR 0 1
67785: PPUSH
67786: LD_VAR 0 2
67790: PPUSH
67791: LD_VAR 0 3
67795: PPUSH
67796: CALL_OW 331
// end ;
67800: LD_VAR 0 5
67804: RET
// export function Video ( mode ) ; begin
67805: LD_INT 0
67807: PPUSH
// ingame_video = mode ;
67808: LD_ADDR_OWVAR 52
67812: PUSH
67813: LD_VAR 0 1
67817: ST_TO_ADDR
// interface_hidden = mode ;
67818: LD_ADDR_OWVAR 54
67822: PUSH
67823: LD_VAR 0 1
67827: ST_TO_ADDR
// end ;
67828: LD_VAR 0 2
67832: RET
// export function Join ( array , element ) ; begin
67833: LD_INT 0
67835: PPUSH
// result := Replace ( array , array + 1 , element ) ;
67836: LD_ADDR_VAR 0 3
67840: PUSH
67841: LD_VAR 0 1
67845: PPUSH
67846: LD_VAR 0 1
67850: PUSH
67851: LD_INT 1
67853: PLUS
67854: PPUSH
67855: LD_VAR 0 2
67859: PPUSH
67860: CALL_OW 1
67864: ST_TO_ADDR
// end ;
67865: LD_VAR 0 3
67869: RET
// export function JoinUnion ( array , element ) ; begin
67870: LD_INT 0
67872: PPUSH
// result := array union element ;
67873: LD_ADDR_VAR 0 3
67877: PUSH
67878: LD_VAR 0 1
67882: PUSH
67883: LD_VAR 0 2
67887: UNION
67888: ST_TO_ADDR
// end ;
67889: LD_VAR 0 3
67893: RET
// export function GetBehemoths ( side ) ; begin
67894: LD_INT 0
67896: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
67897: LD_ADDR_VAR 0 2
67901: PUSH
67902: LD_INT 22
67904: PUSH
67905: LD_VAR 0 1
67909: PUSH
67910: EMPTY
67911: LIST
67912: LIST
67913: PUSH
67914: LD_INT 31
67916: PUSH
67917: LD_INT 25
67919: PUSH
67920: EMPTY
67921: LIST
67922: LIST
67923: PUSH
67924: EMPTY
67925: LIST
67926: LIST
67927: PPUSH
67928: CALL_OW 69
67932: ST_TO_ADDR
// end ;
67933: LD_VAR 0 2
67937: RET
// export function Shuffle ( array ) ; var i , index ; begin
67938: LD_INT 0
67940: PPUSH
67941: PPUSH
67942: PPUSH
// result := [ ] ;
67943: LD_ADDR_VAR 0 2
67947: PUSH
67948: EMPTY
67949: ST_TO_ADDR
// if not array then
67950: LD_VAR 0 1
67954: NOT
67955: IFFALSE 67959
// exit ;
67957: GO 68058
// Randomize ;
67959: CALL_OW 10
// for i = array downto 1 do
67963: LD_ADDR_VAR 0 3
67967: PUSH
67968: DOUBLE
67969: LD_VAR 0 1
67973: INC
67974: ST_TO_ADDR
67975: LD_INT 1
67977: PUSH
67978: FOR_DOWNTO
67979: IFFALSE 68056
// begin index := rand ( 1 , array ) ;
67981: LD_ADDR_VAR 0 4
67985: PUSH
67986: LD_INT 1
67988: PPUSH
67989: LD_VAR 0 1
67993: PPUSH
67994: CALL_OW 12
67998: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
67999: LD_ADDR_VAR 0 2
68003: PUSH
68004: LD_VAR 0 2
68008: PPUSH
68009: LD_VAR 0 2
68013: PUSH
68014: LD_INT 1
68016: PLUS
68017: PPUSH
68018: LD_VAR 0 1
68022: PUSH
68023: LD_VAR 0 4
68027: ARRAY
68028: PPUSH
68029: CALL_OW 2
68033: ST_TO_ADDR
// array := Delete ( array , index ) ;
68034: LD_ADDR_VAR 0 1
68038: PUSH
68039: LD_VAR 0 1
68043: PPUSH
68044: LD_VAR 0 4
68048: PPUSH
68049: CALL_OW 3
68053: ST_TO_ADDR
// end ;
68054: GO 67978
68056: POP
68057: POP
// end ;
68058: LD_VAR 0 2
68062: RET
// export function GetBaseMaterials ( base ) ; begin
68063: LD_INT 0
68065: PPUSH
// result := [ 0 , 0 , 0 ] ;
68066: LD_ADDR_VAR 0 2
68070: PUSH
68071: LD_INT 0
68073: PUSH
68074: LD_INT 0
68076: PUSH
68077: LD_INT 0
68079: PUSH
68080: EMPTY
68081: LIST
68082: LIST
68083: LIST
68084: ST_TO_ADDR
// if not base then
68085: LD_VAR 0 1
68089: NOT
68090: IFFALSE 68094
// exit ;
68092: GO 68143
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
68094: LD_ADDR_VAR 0 2
68098: PUSH
68099: LD_VAR 0 1
68103: PPUSH
68104: LD_INT 1
68106: PPUSH
68107: CALL_OW 275
68111: PUSH
68112: LD_VAR 0 1
68116: PPUSH
68117: LD_INT 2
68119: PPUSH
68120: CALL_OW 275
68124: PUSH
68125: LD_VAR 0 1
68129: PPUSH
68130: LD_INT 3
68132: PPUSH
68133: CALL_OW 275
68137: PUSH
68138: EMPTY
68139: LIST
68140: LIST
68141: LIST
68142: ST_TO_ADDR
// end ;
68143: LD_VAR 0 2
68147: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
68148: LD_INT 0
68150: PPUSH
68151: PPUSH
// result := array ;
68152: LD_ADDR_VAR 0 3
68156: PUSH
68157: LD_VAR 0 1
68161: ST_TO_ADDR
// if size >= result then
68162: LD_VAR 0 2
68166: PUSH
68167: LD_VAR 0 3
68171: GREATEREQUAL
68172: IFFALSE 68176
// exit ;
68174: GO 68226
// if size then
68176: LD_VAR 0 2
68180: IFFALSE 68226
// for i := array downto size do
68182: LD_ADDR_VAR 0 4
68186: PUSH
68187: DOUBLE
68188: LD_VAR 0 1
68192: INC
68193: ST_TO_ADDR
68194: LD_VAR 0 2
68198: PUSH
68199: FOR_DOWNTO
68200: IFFALSE 68224
// result := Delete ( result , result ) ;
68202: LD_ADDR_VAR 0 3
68206: PUSH
68207: LD_VAR 0 3
68211: PPUSH
68212: LD_VAR 0 3
68216: PPUSH
68217: CALL_OW 3
68221: ST_TO_ADDR
68222: GO 68199
68224: POP
68225: POP
// end ;
68226: LD_VAR 0 3
68230: RET
// export function ComExit ( unit ) ; var tmp ; begin
68231: LD_INT 0
68233: PPUSH
68234: PPUSH
// if not IsInUnit ( unit ) then
68235: LD_VAR 0 1
68239: PPUSH
68240: CALL_OW 310
68244: NOT
68245: IFFALSE 68249
// exit ;
68247: GO 68309
// tmp := IsInUnit ( unit ) ;
68249: LD_ADDR_VAR 0 3
68253: PUSH
68254: LD_VAR 0 1
68258: PPUSH
68259: CALL_OW 310
68263: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
68264: LD_VAR 0 3
68268: PPUSH
68269: CALL_OW 247
68273: PUSH
68274: LD_INT 2
68276: EQUAL
68277: IFFALSE 68290
// ComExitVehicle ( unit ) else
68279: LD_VAR 0 1
68283: PPUSH
68284: CALL_OW 121
68288: GO 68299
// ComExitBuilding ( unit ) ;
68290: LD_VAR 0 1
68294: PPUSH
68295: CALL_OW 122
// result := tmp ;
68299: LD_ADDR_VAR 0 2
68303: PUSH
68304: LD_VAR 0 3
68308: ST_TO_ADDR
// end ;
68309: LD_VAR 0 2
68313: RET
// export function ComExitAll ( units ) ; var i ; begin
68314: LD_INT 0
68316: PPUSH
68317: PPUSH
// if not units then
68318: LD_VAR 0 1
68322: NOT
68323: IFFALSE 68327
// exit ;
68325: GO 68353
// for i in units do
68327: LD_ADDR_VAR 0 3
68331: PUSH
68332: LD_VAR 0 1
68336: PUSH
68337: FOR_IN
68338: IFFALSE 68351
// ComExit ( i ) ;
68340: LD_VAR 0 3
68344: PPUSH
68345: CALL 68231 0 1
68349: GO 68337
68351: POP
68352: POP
// end ;
68353: LD_VAR 0 2
68357: RET
// export function ResetHc ; begin
68358: LD_INT 0
68360: PPUSH
// InitHc ;
68361: CALL_OW 19
// hc_importance := 0 ;
68365: LD_ADDR_OWVAR 32
68369: PUSH
68370: LD_INT 0
68372: ST_TO_ADDR
// end ;
68373: LD_VAR 0 1
68377: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
68378: LD_INT 0
68380: PPUSH
68381: PPUSH
68382: PPUSH
// _x := ( x1 + x2 ) div 2 ;
68383: LD_ADDR_VAR 0 6
68387: PUSH
68388: LD_VAR 0 1
68392: PUSH
68393: LD_VAR 0 3
68397: PLUS
68398: PUSH
68399: LD_INT 2
68401: DIV
68402: ST_TO_ADDR
// if _x < 0 then
68403: LD_VAR 0 6
68407: PUSH
68408: LD_INT 0
68410: LESS
68411: IFFALSE 68428
// _x := _x * - 1 ;
68413: LD_ADDR_VAR 0 6
68417: PUSH
68418: LD_VAR 0 6
68422: PUSH
68423: LD_INT 1
68425: NEG
68426: MUL
68427: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
68428: LD_ADDR_VAR 0 7
68432: PUSH
68433: LD_VAR 0 2
68437: PUSH
68438: LD_VAR 0 4
68442: PLUS
68443: PUSH
68444: LD_INT 2
68446: DIV
68447: ST_TO_ADDR
// if _y < 0 then
68448: LD_VAR 0 7
68452: PUSH
68453: LD_INT 0
68455: LESS
68456: IFFALSE 68473
// _y := _y * - 1 ;
68458: LD_ADDR_VAR 0 7
68462: PUSH
68463: LD_VAR 0 7
68467: PUSH
68468: LD_INT 1
68470: NEG
68471: MUL
68472: ST_TO_ADDR
// result := [ _x , _y ] ;
68473: LD_ADDR_VAR 0 5
68477: PUSH
68478: LD_VAR 0 6
68482: PUSH
68483: LD_VAR 0 7
68487: PUSH
68488: EMPTY
68489: LIST
68490: LIST
68491: ST_TO_ADDR
// end ;
68492: LD_VAR 0 5
68496: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
68497: LD_INT 0
68499: PPUSH
68500: PPUSH
68501: PPUSH
68502: PPUSH
// task := GetTaskList ( unit ) ;
68503: LD_ADDR_VAR 0 7
68507: PUSH
68508: LD_VAR 0 1
68512: PPUSH
68513: CALL_OW 437
68517: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
68518: LD_VAR 0 7
68522: NOT
68523: PUSH
68524: LD_VAR 0 1
68528: PPUSH
68529: LD_VAR 0 2
68533: PPUSH
68534: CALL_OW 308
68538: NOT
68539: AND
68540: IFFALSE 68544
// exit ;
68542: GO 68662
// if IsInArea ( unit , area ) then
68544: LD_VAR 0 1
68548: PPUSH
68549: LD_VAR 0 2
68553: PPUSH
68554: CALL_OW 308
68558: IFFALSE 68576
// begin ComMoveToArea ( unit , goAway ) ;
68560: LD_VAR 0 1
68564: PPUSH
68565: LD_VAR 0 3
68569: PPUSH
68570: CALL_OW 113
// exit ;
68574: GO 68662
// end ; if task [ 1 ] [ 1 ] <> M then
68576: LD_VAR 0 7
68580: PUSH
68581: LD_INT 1
68583: ARRAY
68584: PUSH
68585: LD_INT 1
68587: ARRAY
68588: PUSH
68589: LD_STRING M
68591: NONEQUAL
68592: IFFALSE 68596
// exit ;
68594: GO 68662
// x := task [ 1 ] [ 2 ] ;
68596: LD_ADDR_VAR 0 5
68600: PUSH
68601: LD_VAR 0 7
68605: PUSH
68606: LD_INT 1
68608: ARRAY
68609: PUSH
68610: LD_INT 2
68612: ARRAY
68613: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
68614: LD_ADDR_VAR 0 6
68618: PUSH
68619: LD_VAR 0 7
68623: PUSH
68624: LD_INT 1
68626: ARRAY
68627: PUSH
68628: LD_INT 3
68630: ARRAY
68631: ST_TO_ADDR
// if InArea ( x , y , area ) then
68632: LD_VAR 0 5
68636: PPUSH
68637: LD_VAR 0 6
68641: PPUSH
68642: LD_VAR 0 2
68646: PPUSH
68647: CALL_OW 309
68651: IFFALSE 68662
// ComStop ( unit ) ;
68653: LD_VAR 0 1
68657: PPUSH
68658: CALL_OW 141
// end ;
68662: LD_VAR 0 4
68666: RET
// export function Abs ( value ) ; begin
68667: LD_INT 0
68669: PPUSH
// result := value ;
68670: LD_ADDR_VAR 0 2
68674: PUSH
68675: LD_VAR 0 1
68679: ST_TO_ADDR
// if value < 0 then
68680: LD_VAR 0 1
68684: PUSH
68685: LD_INT 0
68687: LESS
68688: IFFALSE 68705
// result := value * - 1 ;
68690: LD_ADDR_VAR 0 2
68694: PUSH
68695: LD_VAR 0 1
68699: PUSH
68700: LD_INT 1
68702: NEG
68703: MUL
68704: ST_TO_ADDR
// end ;
68705: LD_VAR 0 2
68709: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
68710: LD_INT 0
68712: PPUSH
68713: PPUSH
68714: PPUSH
68715: PPUSH
68716: PPUSH
68717: PPUSH
68718: PPUSH
68719: PPUSH
// if not unit or not building then
68720: LD_VAR 0 1
68724: NOT
68725: PUSH
68726: LD_VAR 0 2
68730: NOT
68731: OR
68732: IFFALSE 68736
// exit ;
68734: GO 68962
// x := GetX ( building ) ;
68736: LD_ADDR_VAR 0 4
68740: PUSH
68741: LD_VAR 0 2
68745: PPUSH
68746: CALL_OW 250
68750: ST_TO_ADDR
// y := GetY ( building ) ;
68751: LD_ADDR_VAR 0 6
68755: PUSH
68756: LD_VAR 0 2
68760: PPUSH
68761: CALL_OW 251
68765: ST_TO_ADDR
// d := GetDir ( building ) ;
68766: LD_ADDR_VAR 0 8
68770: PUSH
68771: LD_VAR 0 2
68775: PPUSH
68776: CALL_OW 254
68780: ST_TO_ADDR
// r := 4 ;
68781: LD_ADDR_VAR 0 9
68785: PUSH
68786: LD_INT 4
68788: ST_TO_ADDR
// for i := 1 to 5 do
68789: LD_ADDR_VAR 0 10
68793: PUSH
68794: DOUBLE
68795: LD_INT 1
68797: DEC
68798: ST_TO_ADDR
68799: LD_INT 5
68801: PUSH
68802: FOR_TO
68803: IFFALSE 68960
// begin _x := ShiftX ( x , d , r + i ) ;
68805: LD_ADDR_VAR 0 5
68809: PUSH
68810: LD_VAR 0 4
68814: PPUSH
68815: LD_VAR 0 8
68819: PPUSH
68820: LD_VAR 0 9
68824: PUSH
68825: LD_VAR 0 10
68829: PLUS
68830: PPUSH
68831: CALL_OW 272
68835: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
68836: LD_ADDR_VAR 0 7
68840: PUSH
68841: LD_VAR 0 6
68845: PPUSH
68846: LD_VAR 0 8
68850: PPUSH
68851: LD_VAR 0 9
68855: PUSH
68856: LD_VAR 0 10
68860: PLUS
68861: PPUSH
68862: CALL_OW 273
68866: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
68867: LD_VAR 0 5
68871: PPUSH
68872: LD_VAR 0 7
68876: PPUSH
68877: CALL_OW 488
68881: PUSH
68882: LD_VAR 0 5
68886: PPUSH
68887: LD_VAR 0 7
68891: PPUSH
68892: CALL_OW 428
68896: PPUSH
68897: CALL_OW 247
68901: PUSH
68902: LD_INT 3
68904: PUSH
68905: LD_INT 2
68907: PUSH
68908: EMPTY
68909: LIST
68910: LIST
68911: IN
68912: NOT
68913: AND
68914: IFFALSE 68958
// begin ComMoveXY ( unit , _x , _y ) ;
68916: LD_VAR 0 1
68920: PPUSH
68921: LD_VAR 0 5
68925: PPUSH
68926: LD_VAR 0 7
68930: PPUSH
68931: CALL_OW 111
// result := [ _x , _y ] ;
68935: LD_ADDR_VAR 0 3
68939: PUSH
68940: LD_VAR 0 5
68944: PUSH
68945: LD_VAR 0 7
68949: PUSH
68950: EMPTY
68951: LIST
68952: LIST
68953: ST_TO_ADDR
// exit ;
68954: POP
68955: POP
68956: GO 68962
// end ; end ;
68958: GO 68802
68960: POP
68961: POP
// end ;
68962: LD_VAR 0 3
68966: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
68967: LD_INT 0
68969: PPUSH
68970: PPUSH
68971: PPUSH
// result := 0 ;
68972: LD_ADDR_VAR 0 3
68976: PUSH
68977: LD_INT 0
68979: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
68980: LD_VAR 0 1
68984: PUSH
68985: LD_INT 0
68987: LESS
68988: PUSH
68989: LD_VAR 0 1
68993: PUSH
68994: LD_INT 8
68996: GREATER
68997: OR
68998: PUSH
68999: LD_VAR 0 2
69003: PUSH
69004: LD_INT 0
69006: LESS
69007: OR
69008: PUSH
69009: LD_VAR 0 2
69013: PUSH
69014: LD_INT 8
69016: GREATER
69017: OR
69018: IFFALSE 69022
// exit ;
69020: GO 69097
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
69022: LD_ADDR_VAR 0 4
69026: PUSH
69027: LD_INT 22
69029: PUSH
69030: LD_VAR 0 2
69034: PUSH
69035: EMPTY
69036: LIST
69037: LIST
69038: PPUSH
69039: CALL_OW 69
69043: PUSH
69044: FOR_IN
69045: IFFALSE 69095
// begin un := UnitShoot ( i ) ;
69047: LD_ADDR_VAR 0 5
69051: PUSH
69052: LD_VAR 0 4
69056: PPUSH
69057: CALL_OW 504
69061: ST_TO_ADDR
// if GetSide ( un ) = side1 then
69062: LD_VAR 0 5
69066: PPUSH
69067: CALL_OW 255
69071: PUSH
69072: LD_VAR 0 1
69076: EQUAL
69077: IFFALSE 69093
// begin result := un ;
69079: LD_ADDR_VAR 0 3
69083: PUSH
69084: LD_VAR 0 5
69088: ST_TO_ADDR
// exit ;
69089: POP
69090: POP
69091: GO 69097
// end ; end ;
69093: GO 69044
69095: POP
69096: POP
// end ;
69097: LD_VAR 0 3
69101: RET
// export function GetCargoBay ( units ) ; begin
69102: LD_INT 0
69104: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
69105: LD_ADDR_VAR 0 2
69109: PUSH
69110: LD_VAR 0 1
69114: PPUSH
69115: LD_INT 2
69117: PUSH
69118: LD_INT 34
69120: PUSH
69121: LD_INT 12
69123: PUSH
69124: EMPTY
69125: LIST
69126: LIST
69127: PUSH
69128: LD_INT 34
69130: PUSH
69131: LD_INT 51
69133: PUSH
69134: EMPTY
69135: LIST
69136: LIST
69137: PUSH
69138: LD_INT 34
69140: PUSH
69141: LD_INT 32
69143: PUSH
69144: EMPTY
69145: LIST
69146: LIST
69147: PUSH
69148: LD_INT 34
69150: PUSH
69151: LD_INT 89
69153: PUSH
69154: EMPTY
69155: LIST
69156: LIST
69157: PUSH
69158: EMPTY
69159: LIST
69160: LIST
69161: LIST
69162: LIST
69163: LIST
69164: PPUSH
69165: CALL_OW 72
69169: ST_TO_ADDR
// end ;
69170: LD_VAR 0 2
69174: RET
// export function Negate ( value ) ; begin
69175: LD_INT 0
69177: PPUSH
// result := not value ;
69178: LD_ADDR_VAR 0 2
69182: PUSH
69183: LD_VAR 0 1
69187: NOT
69188: ST_TO_ADDR
// end ;
69189: LD_VAR 0 2
69193: RET
// export function Inc ( value ) ; begin
69194: LD_INT 0
69196: PPUSH
// result := value + 1 ;
69197: LD_ADDR_VAR 0 2
69201: PUSH
69202: LD_VAR 0 1
69206: PUSH
69207: LD_INT 1
69209: PLUS
69210: ST_TO_ADDR
// end ;
69211: LD_VAR 0 2
69215: RET
// export function Dec ( value ) ; begin
69216: LD_INT 0
69218: PPUSH
// result := value - 1 ;
69219: LD_ADDR_VAR 0 2
69223: PUSH
69224: LD_VAR 0 1
69228: PUSH
69229: LD_INT 1
69231: MINUS
69232: ST_TO_ADDR
// end ;
69233: LD_VAR 0 2
69237: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
69238: LD_INT 0
69240: PPUSH
69241: PPUSH
69242: PPUSH
69243: PPUSH
69244: PPUSH
69245: PPUSH
69246: PPUSH
69247: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
69248: LD_VAR 0 1
69252: PPUSH
69253: LD_VAR 0 2
69257: PPUSH
69258: CALL_OW 488
69262: NOT
69263: PUSH
69264: LD_VAR 0 3
69268: PPUSH
69269: LD_VAR 0 4
69273: PPUSH
69274: CALL_OW 488
69278: NOT
69279: OR
69280: IFFALSE 69293
// begin result := - 1 ;
69282: LD_ADDR_VAR 0 5
69286: PUSH
69287: LD_INT 1
69289: NEG
69290: ST_TO_ADDR
// exit ;
69291: GO 69528
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
69293: LD_ADDR_VAR 0 12
69297: PUSH
69298: LD_VAR 0 1
69302: PPUSH
69303: LD_VAR 0 2
69307: PPUSH
69308: LD_VAR 0 3
69312: PPUSH
69313: LD_VAR 0 4
69317: PPUSH
69318: CALL 68378 0 4
69322: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
69323: LD_ADDR_VAR 0 11
69327: PUSH
69328: LD_VAR 0 1
69332: PPUSH
69333: LD_VAR 0 2
69337: PPUSH
69338: LD_VAR 0 12
69342: PUSH
69343: LD_INT 1
69345: ARRAY
69346: PPUSH
69347: LD_VAR 0 12
69351: PUSH
69352: LD_INT 2
69354: ARRAY
69355: PPUSH
69356: CALL_OW 298
69360: ST_TO_ADDR
// distance := 9999 ;
69361: LD_ADDR_VAR 0 10
69365: PUSH
69366: LD_INT 9999
69368: ST_TO_ADDR
// for i := 0 to 5 do
69369: LD_ADDR_VAR 0 6
69373: PUSH
69374: DOUBLE
69375: LD_INT 0
69377: DEC
69378: ST_TO_ADDR
69379: LD_INT 5
69381: PUSH
69382: FOR_TO
69383: IFFALSE 69526
// begin _x := ShiftX ( x1 , i , centerDist ) ;
69385: LD_ADDR_VAR 0 7
69389: PUSH
69390: LD_VAR 0 1
69394: PPUSH
69395: LD_VAR 0 6
69399: PPUSH
69400: LD_VAR 0 11
69404: PPUSH
69405: CALL_OW 272
69409: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
69410: LD_ADDR_VAR 0 8
69414: PUSH
69415: LD_VAR 0 2
69419: PPUSH
69420: LD_VAR 0 6
69424: PPUSH
69425: LD_VAR 0 11
69429: PPUSH
69430: CALL_OW 273
69434: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
69435: LD_VAR 0 7
69439: PPUSH
69440: LD_VAR 0 8
69444: PPUSH
69445: CALL_OW 488
69449: NOT
69450: IFFALSE 69454
// continue ;
69452: GO 69382
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
69454: LD_ADDR_VAR 0 9
69458: PUSH
69459: LD_VAR 0 12
69463: PUSH
69464: LD_INT 1
69466: ARRAY
69467: PPUSH
69468: LD_VAR 0 12
69472: PUSH
69473: LD_INT 2
69475: ARRAY
69476: PPUSH
69477: LD_VAR 0 7
69481: PPUSH
69482: LD_VAR 0 8
69486: PPUSH
69487: CALL_OW 298
69491: ST_TO_ADDR
// if tmp < distance then
69492: LD_VAR 0 9
69496: PUSH
69497: LD_VAR 0 10
69501: LESS
69502: IFFALSE 69524
// begin result := i ;
69504: LD_ADDR_VAR 0 5
69508: PUSH
69509: LD_VAR 0 6
69513: ST_TO_ADDR
// distance := tmp ;
69514: LD_ADDR_VAR 0 10
69518: PUSH
69519: LD_VAR 0 9
69523: ST_TO_ADDR
// end ; end ;
69524: GO 69382
69526: POP
69527: POP
// end ;
69528: LD_VAR 0 5
69532: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
69533: LD_INT 0
69535: PPUSH
69536: PPUSH
// if not driver or not IsInUnit ( driver ) then
69537: LD_VAR 0 1
69541: NOT
69542: PUSH
69543: LD_VAR 0 1
69547: PPUSH
69548: CALL_OW 310
69552: NOT
69553: OR
69554: IFFALSE 69558
// exit ;
69556: GO 69648
// vehicle := IsInUnit ( driver ) ;
69558: LD_ADDR_VAR 0 3
69562: PUSH
69563: LD_VAR 0 1
69567: PPUSH
69568: CALL_OW 310
69572: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
69573: LD_VAR 0 1
69577: PPUSH
69578: LD_STRING \
69580: PUSH
69581: LD_INT 0
69583: PUSH
69584: LD_INT 0
69586: PUSH
69587: LD_INT 0
69589: PUSH
69590: LD_INT 0
69592: PUSH
69593: LD_INT 0
69595: PUSH
69596: LD_INT 0
69598: PUSH
69599: EMPTY
69600: LIST
69601: LIST
69602: LIST
69603: LIST
69604: LIST
69605: LIST
69606: LIST
69607: PUSH
69608: LD_STRING E
69610: PUSH
69611: LD_INT 0
69613: PUSH
69614: LD_INT 0
69616: PUSH
69617: LD_VAR 0 3
69621: PUSH
69622: LD_INT 0
69624: PUSH
69625: LD_INT 0
69627: PUSH
69628: LD_INT 0
69630: PUSH
69631: EMPTY
69632: LIST
69633: LIST
69634: LIST
69635: LIST
69636: LIST
69637: LIST
69638: LIST
69639: PUSH
69640: EMPTY
69641: LIST
69642: LIST
69643: PPUSH
69644: CALL_OW 446
// end ;
69648: LD_VAR 0 2
69652: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
69653: LD_INT 0
69655: PPUSH
69656: PPUSH
// if not driver or not IsInUnit ( driver ) then
69657: LD_VAR 0 1
69661: NOT
69662: PUSH
69663: LD_VAR 0 1
69667: PPUSH
69668: CALL_OW 310
69672: NOT
69673: OR
69674: IFFALSE 69678
// exit ;
69676: GO 69768
// vehicle := IsInUnit ( driver ) ;
69678: LD_ADDR_VAR 0 3
69682: PUSH
69683: LD_VAR 0 1
69687: PPUSH
69688: CALL_OW 310
69692: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
69693: LD_VAR 0 1
69697: PPUSH
69698: LD_STRING \
69700: PUSH
69701: LD_INT 0
69703: PUSH
69704: LD_INT 0
69706: PUSH
69707: LD_INT 0
69709: PUSH
69710: LD_INT 0
69712: PUSH
69713: LD_INT 0
69715: PUSH
69716: LD_INT 0
69718: PUSH
69719: EMPTY
69720: LIST
69721: LIST
69722: LIST
69723: LIST
69724: LIST
69725: LIST
69726: LIST
69727: PUSH
69728: LD_STRING E
69730: PUSH
69731: LD_INT 0
69733: PUSH
69734: LD_INT 0
69736: PUSH
69737: LD_VAR 0 3
69741: PUSH
69742: LD_INT 0
69744: PUSH
69745: LD_INT 0
69747: PUSH
69748: LD_INT 0
69750: PUSH
69751: EMPTY
69752: LIST
69753: LIST
69754: LIST
69755: LIST
69756: LIST
69757: LIST
69758: LIST
69759: PUSH
69760: EMPTY
69761: LIST
69762: LIST
69763: PPUSH
69764: CALL_OW 447
// end ;
69768: LD_VAR 0 2
69772: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
69773: LD_INT 0
69775: PPUSH
69776: PPUSH
69777: PPUSH
// tmp := [ ] ;
69778: LD_ADDR_VAR 0 5
69782: PUSH
69783: EMPTY
69784: ST_TO_ADDR
// for i in units do
69785: LD_ADDR_VAR 0 4
69789: PUSH
69790: LD_VAR 0 1
69794: PUSH
69795: FOR_IN
69796: IFFALSE 69834
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
69798: LD_ADDR_VAR 0 5
69802: PUSH
69803: LD_VAR 0 5
69807: PPUSH
69808: LD_VAR 0 5
69812: PUSH
69813: LD_INT 1
69815: PLUS
69816: PPUSH
69817: LD_VAR 0 4
69821: PPUSH
69822: CALL_OW 256
69826: PPUSH
69827: CALL_OW 2
69831: ST_TO_ADDR
69832: GO 69795
69834: POP
69835: POP
// if not tmp then
69836: LD_VAR 0 5
69840: NOT
69841: IFFALSE 69845
// exit ;
69843: GO 69893
// if asc then
69845: LD_VAR 0 2
69849: IFFALSE 69873
// result := SortListByListAsc ( units , tmp ) else
69851: LD_ADDR_VAR 0 3
69855: PUSH
69856: LD_VAR 0 1
69860: PPUSH
69861: LD_VAR 0 5
69865: PPUSH
69866: CALL_OW 76
69870: ST_TO_ADDR
69871: GO 69893
// result := SortListByListDesc ( units , tmp ) ;
69873: LD_ADDR_VAR 0 3
69877: PUSH
69878: LD_VAR 0 1
69882: PPUSH
69883: LD_VAR 0 5
69887: PPUSH
69888: CALL_OW 77
69892: ST_TO_ADDR
// end ;
69893: LD_VAR 0 3
69897: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
69898: LD_INT 0
69900: PPUSH
69901: PPUSH
// task := GetTaskList ( mech ) ;
69902: LD_ADDR_VAR 0 4
69906: PUSH
69907: LD_VAR 0 1
69911: PPUSH
69912: CALL_OW 437
69916: ST_TO_ADDR
// if not task then
69917: LD_VAR 0 4
69921: NOT
69922: IFFALSE 69926
// exit ;
69924: GO 69968
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
69926: LD_ADDR_VAR 0 3
69930: PUSH
69931: LD_VAR 0 4
69935: PUSH
69936: LD_INT 1
69938: ARRAY
69939: PUSH
69940: LD_INT 1
69942: ARRAY
69943: PUSH
69944: LD_STRING r
69946: EQUAL
69947: PUSH
69948: LD_VAR 0 4
69952: PUSH
69953: LD_INT 1
69955: ARRAY
69956: PUSH
69957: LD_INT 4
69959: ARRAY
69960: PUSH
69961: LD_VAR 0 2
69965: EQUAL
69966: AND
69967: ST_TO_ADDR
// end ;
69968: LD_VAR 0 3
69972: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
69973: LD_INT 0
69975: PPUSH
// SetDir ( unit , d ) ;
69976: LD_VAR 0 1
69980: PPUSH
69981: LD_VAR 0 4
69985: PPUSH
69986: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
69990: LD_VAR 0 1
69994: PPUSH
69995: LD_VAR 0 2
69999: PPUSH
70000: LD_VAR 0 3
70004: PPUSH
70005: LD_VAR 0 5
70009: PPUSH
70010: CALL_OW 48
// end ;
70014: LD_VAR 0 6
70018: RET
// export function ToNaturalNumber ( number ) ; begin
70019: LD_INT 0
70021: PPUSH
// result := number div 1 ;
70022: LD_ADDR_VAR 0 2
70026: PUSH
70027: LD_VAR 0 1
70031: PUSH
70032: LD_INT 1
70034: DIV
70035: ST_TO_ADDR
// if number < 0 then
70036: LD_VAR 0 1
70040: PUSH
70041: LD_INT 0
70043: LESS
70044: IFFALSE 70054
// result := 0 ;
70046: LD_ADDR_VAR 0 2
70050: PUSH
70051: LD_INT 0
70053: ST_TO_ADDR
// end ;
70054: LD_VAR 0 2
70058: RET
// export function SortByClass ( units , class ) ; var un ; begin
70059: LD_INT 0
70061: PPUSH
70062: PPUSH
// if not units or not class then
70063: LD_VAR 0 1
70067: NOT
70068: PUSH
70069: LD_VAR 0 2
70073: NOT
70074: OR
70075: IFFALSE 70079
// exit ;
70077: GO 70174
// result := [ ] ;
70079: LD_ADDR_VAR 0 3
70083: PUSH
70084: EMPTY
70085: ST_TO_ADDR
// for un in units do
70086: LD_ADDR_VAR 0 4
70090: PUSH
70091: LD_VAR 0 1
70095: PUSH
70096: FOR_IN
70097: IFFALSE 70172
// if GetClass ( un ) = class then
70099: LD_VAR 0 4
70103: PPUSH
70104: CALL_OW 257
70108: PUSH
70109: LD_VAR 0 2
70113: EQUAL
70114: IFFALSE 70141
// result := Insert ( result , 1 , un ) else
70116: LD_ADDR_VAR 0 3
70120: PUSH
70121: LD_VAR 0 3
70125: PPUSH
70126: LD_INT 1
70128: PPUSH
70129: LD_VAR 0 4
70133: PPUSH
70134: CALL_OW 2
70138: ST_TO_ADDR
70139: GO 70170
// result := Replace ( result , result + 1 , un ) ;
70141: LD_ADDR_VAR 0 3
70145: PUSH
70146: LD_VAR 0 3
70150: PPUSH
70151: LD_VAR 0 3
70155: PUSH
70156: LD_INT 1
70158: PLUS
70159: PPUSH
70160: LD_VAR 0 4
70164: PPUSH
70165: CALL_OW 1
70169: ST_TO_ADDR
70170: GO 70096
70172: POP
70173: POP
// end ;
70174: LD_VAR 0 3
70178: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
70179: LD_INT 0
70181: PPUSH
70182: PPUSH
70183: PPUSH
70184: PPUSH
70185: PPUSH
70186: PPUSH
70187: PPUSH
// result := [ ] ;
70188: LD_ADDR_VAR 0 4
70192: PUSH
70193: EMPTY
70194: ST_TO_ADDR
// if x - r < 0 then
70195: LD_VAR 0 1
70199: PUSH
70200: LD_VAR 0 3
70204: MINUS
70205: PUSH
70206: LD_INT 0
70208: LESS
70209: IFFALSE 70221
// min_x := 0 else
70211: LD_ADDR_VAR 0 8
70215: PUSH
70216: LD_INT 0
70218: ST_TO_ADDR
70219: GO 70237
// min_x := x - r ;
70221: LD_ADDR_VAR 0 8
70225: PUSH
70226: LD_VAR 0 1
70230: PUSH
70231: LD_VAR 0 3
70235: MINUS
70236: ST_TO_ADDR
// if y - r < 0 then
70237: LD_VAR 0 2
70241: PUSH
70242: LD_VAR 0 3
70246: MINUS
70247: PUSH
70248: LD_INT 0
70250: LESS
70251: IFFALSE 70263
// min_y := 0 else
70253: LD_ADDR_VAR 0 7
70257: PUSH
70258: LD_INT 0
70260: ST_TO_ADDR
70261: GO 70279
// min_y := y - r ;
70263: LD_ADDR_VAR 0 7
70267: PUSH
70268: LD_VAR 0 2
70272: PUSH
70273: LD_VAR 0 3
70277: MINUS
70278: ST_TO_ADDR
// max_x := x + r ;
70279: LD_ADDR_VAR 0 9
70283: PUSH
70284: LD_VAR 0 1
70288: PUSH
70289: LD_VAR 0 3
70293: PLUS
70294: ST_TO_ADDR
// max_y := y + r ;
70295: LD_ADDR_VAR 0 10
70299: PUSH
70300: LD_VAR 0 2
70304: PUSH
70305: LD_VAR 0 3
70309: PLUS
70310: ST_TO_ADDR
// for _x = min_x to max_x do
70311: LD_ADDR_VAR 0 5
70315: PUSH
70316: DOUBLE
70317: LD_VAR 0 8
70321: DEC
70322: ST_TO_ADDR
70323: LD_VAR 0 9
70327: PUSH
70328: FOR_TO
70329: IFFALSE 70430
// for _y = min_y to max_y do
70331: LD_ADDR_VAR 0 6
70335: PUSH
70336: DOUBLE
70337: LD_VAR 0 7
70341: DEC
70342: ST_TO_ADDR
70343: LD_VAR 0 10
70347: PUSH
70348: FOR_TO
70349: IFFALSE 70426
// begin if not ValidHex ( _x , _y ) then
70351: LD_VAR 0 5
70355: PPUSH
70356: LD_VAR 0 6
70360: PPUSH
70361: CALL_OW 488
70365: NOT
70366: IFFALSE 70370
// continue ;
70368: GO 70348
// if GetResourceTypeXY ( _x , _y ) then
70370: LD_VAR 0 5
70374: PPUSH
70375: LD_VAR 0 6
70379: PPUSH
70380: CALL_OW 283
70384: IFFALSE 70424
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
70386: LD_ADDR_VAR 0 4
70390: PUSH
70391: LD_VAR 0 4
70395: PPUSH
70396: LD_VAR 0 4
70400: PUSH
70401: LD_INT 1
70403: PLUS
70404: PPUSH
70405: LD_VAR 0 5
70409: PUSH
70410: LD_VAR 0 6
70414: PUSH
70415: EMPTY
70416: LIST
70417: LIST
70418: PPUSH
70419: CALL_OW 1
70423: ST_TO_ADDR
// end ;
70424: GO 70348
70426: POP
70427: POP
70428: GO 70328
70430: POP
70431: POP
// end ;
70432: LD_VAR 0 4
70436: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
70437: LD_INT 0
70439: PPUSH
70440: PPUSH
70441: PPUSH
70442: PPUSH
70443: PPUSH
70444: PPUSH
70445: PPUSH
70446: PPUSH
// if not units then
70447: LD_VAR 0 1
70451: NOT
70452: IFFALSE 70456
// exit ;
70454: GO 70984
// result := UnitFilter ( units , [ f_ok ] ) ;
70456: LD_ADDR_VAR 0 3
70460: PUSH
70461: LD_VAR 0 1
70465: PPUSH
70466: LD_INT 50
70468: PUSH
70469: EMPTY
70470: LIST
70471: PPUSH
70472: CALL_OW 72
70476: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
70477: LD_ADDR_VAR 0 8
70481: PUSH
70482: LD_VAR 0 1
70486: PUSH
70487: LD_INT 1
70489: ARRAY
70490: PPUSH
70491: CALL_OW 255
70495: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
70496: LD_ADDR_VAR 0 10
70500: PUSH
70501: LD_INT 29
70503: PUSH
70504: LD_INT 91
70506: PUSH
70507: LD_INT 49
70509: PUSH
70510: EMPTY
70511: LIST
70512: LIST
70513: LIST
70514: ST_TO_ADDR
// if not result then
70515: LD_VAR 0 3
70519: NOT
70520: IFFALSE 70524
// exit ;
70522: GO 70984
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
70524: LD_ADDR_VAR 0 5
70528: PUSH
70529: LD_INT 81
70531: PUSH
70532: LD_VAR 0 8
70536: PUSH
70537: EMPTY
70538: LIST
70539: LIST
70540: PPUSH
70541: CALL_OW 69
70545: ST_TO_ADDR
// for i in result do
70546: LD_ADDR_VAR 0 4
70550: PUSH
70551: LD_VAR 0 3
70555: PUSH
70556: FOR_IN
70557: IFFALSE 70982
// begin tag := GetTag ( i ) + 1 ;
70559: LD_ADDR_VAR 0 9
70563: PUSH
70564: LD_VAR 0 4
70568: PPUSH
70569: CALL_OW 110
70573: PUSH
70574: LD_INT 1
70576: PLUS
70577: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
70578: LD_ADDR_VAR 0 7
70582: PUSH
70583: LD_VAR 0 4
70587: PPUSH
70588: CALL_OW 250
70592: PPUSH
70593: LD_VAR 0 4
70597: PPUSH
70598: CALL_OW 251
70602: PPUSH
70603: LD_INT 4
70605: PPUSH
70606: CALL 70179 0 3
70610: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
70611: LD_VAR 0 4
70615: PPUSH
70616: CALL_OW 247
70620: PUSH
70621: LD_INT 2
70623: EQUAL
70624: PUSH
70625: LD_VAR 0 7
70629: PUSH
70630: LD_INT 2
70632: GREATER
70633: AND
70634: PUSH
70635: LD_VAR 0 4
70639: PPUSH
70640: CALL_OW 264
70644: PUSH
70645: LD_VAR 0 10
70649: IN
70650: NOT
70651: AND
70652: IFFALSE 70691
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
70654: LD_VAR 0 4
70658: PPUSH
70659: LD_VAR 0 7
70663: PUSH
70664: LD_INT 1
70666: ARRAY
70667: PUSH
70668: LD_INT 1
70670: ARRAY
70671: PPUSH
70672: LD_VAR 0 7
70676: PUSH
70677: LD_INT 1
70679: ARRAY
70680: PUSH
70681: LD_INT 2
70683: ARRAY
70684: PPUSH
70685: CALL_OW 116
70689: GO 70980
// if path > tag then
70691: LD_VAR 0 2
70695: PUSH
70696: LD_VAR 0 9
70700: GREATER
70701: IFFALSE 70909
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
70703: LD_ADDR_VAR 0 6
70707: PUSH
70708: LD_VAR 0 5
70712: PPUSH
70713: LD_INT 91
70715: PUSH
70716: LD_VAR 0 4
70720: PUSH
70721: LD_INT 8
70723: PUSH
70724: EMPTY
70725: LIST
70726: LIST
70727: LIST
70728: PPUSH
70729: CALL_OW 72
70733: ST_TO_ADDR
// if nearEnemy then
70734: LD_VAR 0 6
70738: IFFALSE 70807
// begin if GetWeapon ( i ) = ru_time_lapser then
70740: LD_VAR 0 4
70744: PPUSH
70745: CALL_OW 264
70749: PUSH
70750: LD_INT 49
70752: EQUAL
70753: IFFALSE 70781
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
70755: LD_VAR 0 4
70759: PPUSH
70760: LD_VAR 0 6
70764: PPUSH
70765: LD_VAR 0 4
70769: PPUSH
70770: CALL_OW 74
70774: PPUSH
70775: CALL_OW 112
70779: GO 70805
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
70781: LD_VAR 0 4
70785: PPUSH
70786: LD_VAR 0 6
70790: PPUSH
70791: LD_VAR 0 4
70795: PPUSH
70796: CALL_OW 74
70800: PPUSH
70801: CALL 72055 0 2
// end else
70805: GO 70907
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
70807: LD_VAR 0 4
70811: PPUSH
70812: LD_VAR 0 2
70816: PUSH
70817: LD_VAR 0 9
70821: ARRAY
70822: PUSH
70823: LD_INT 1
70825: ARRAY
70826: PPUSH
70827: LD_VAR 0 2
70831: PUSH
70832: LD_VAR 0 9
70836: ARRAY
70837: PUSH
70838: LD_INT 2
70840: ARRAY
70841: PPUSH
70842: CALL_OW 297
70846: PUSH
70847: LD_INT 6
70849: GREATER
70850: IFFALSE 70893
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
70852: LD_VAR 0 4
70856: PPUSH
70857: LD_VAR 0 2
70861: PUSH
70862: LD_VAR 0 9
70866: ARRAY
70867: PUSH
70868: LD_INT 1
70870: ARRAY
70871: PPUSH
70872: LD_VAR 0 2
70876: PUSH
70877: LD_VAR 0 9
70881: ARRAY
70882: PUSH
70883: LD_INT 2
70885: ARRAY
70886: PPUSH
70887: CALL_OW 114
70891: GO 70907
// SetTag ( i , tag ) ;
70893: LD_VAR 0 4
70897: PPUSH
70898: LD_VAR 0 9
70902: PPUSH
70903: CALL_OW 109
// end else
70907: GO 70980
// if enemy then
70909: LD_VAR 0 5
70913: IFFALSE 70980
// begin if GetWeapon ( i ) = ru_time_lapser then
70915: LD_VAR 0 4
70919: PPUSH
70920: CALL_OW 264
70924: PUSH
70925: LD_INT 49
70927: EQUAL
70928: IFFALSE 70956
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
70930: LD_VAR 0 4
70934: PPUSH
70935: LD_VAR 0 5
70939: PPUSH
70940: LD_VAR 0 4
70944: PPUSH
70945: CALL_OW 74
70949: PPUSH
70950: CALL_OW 112
70954: GO 70980
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
70956: LD_VAR 0 4
70960: PPUSH
70961: LD_VAR 0 5
70965: PPUSH
70966: LD_VAR 0 4
70970: PPUSH
70971: CALL_OW 74
70975: PPUSH
70976: CALL 72055 0 2
// end ; end ;
70980: GO 70556
70982: POP
70983: POP
// end ;
70984: LD_VAR 0 3
70988: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
70989: LD_INT 0
70991: PPUSH
70992: PPUSH
70993: PPUSH
// if not unit or IsInUnit ( unit ) then
70994: LD_VAR 0 1
70998: NOT
70999: PUSH
71000: LD_VAR 0 1
71004: PPUSH
71005: CALL_OW 310
71009: OR
71010: IFFALSE 71014
// exit ;
71012: GO 71105
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
71014: LD_ADDR_VAR 0 4
71018: PUSH
71019: LD_VAR 0 1
71023: PPUSH
71024: CALL_OW 250
71028: PPUSH
71029: LD_VAR 0 2
71033: PPUSH
71034: LD_INT 1
71036: PPUSH
71037: CALL_OW 272
71041: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
71042: LD_ADDR_VAR 0 5
71046: PUSH
71047: LD_VAR 0 1
71051: PPUSH
71052: CALL_OW 251
71056: PPUSH
71057: LD_VAR 0 2
71061: PPUSH
71062: LD_INT 1
71064: PPUSH
71065: CALL_OW 273
71069: ST_TO_ADDR
// if ValidHex ( x , y ) then
71070: LD_VAR 0 4
71074: PPUSH
71075: LD_VAR 0 5
71079: PPUSH
71080: CALL_OW 488
71084: IFFALSE 71105
// ComTurnXY ( unit , x , y ) ;
71086: LD_VAR 0 1
71090: PPUSH
71091: LD_VAR 0 4
71095: PPUSH
71096: LD_VAR 0 5
71100: PPUSH
71101: CALL_OW 118
// end ;
71105: LD_VAR 0 3
71109: RET
// export function SeeUnits ( side , units ) ; var i ; begin
71110: LD_INT 0
71112: PPUSH
71113: PPUSH
// result := false ;
71114: LD_ADDR_VAR 0 3
71118: PUSH
71119: LD_INT 0
71121: ST_TO_ADDR
// if not units then
71122: LD_VAR 0 2
71126: NOT
71127: IFFALSE 71131
// exit ;
71129: GO 71176
// for i in units do
71131: LD_ADDR_VAR 0 4
71135: PUSH
71136: LD_VAR 0 2
71140: PUSH
71141: FOR_IN
71142: IFFALSE 71174
// if See ( side , i ) then
71144: LD_VAR 0 1
71148: PPUSH
71149: LD_VAR 0 4
71153: PPUSH
71154: CALL_OW 292
71158: IFFALSE 71172
// begin result := true ;
71160: LD_ADDR_VAR 0 3
71164: PUSH
71165: LD_INT 1
71167: ST_TO_ADDR
// exit ;
71168: POP
71169: POP
71170: GO 71176
// end ;
71172: GO 71141
71174: POP
71175: POP
// end ;
71176: LD_VAR 0 3
71180: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
71181: LD_INT 0
71183: PPUSH
71184: PPUSH
71185: PPUSH
71186: PPUSH
// if not unit or not points then
71187: LD_VAR 0 1
71191: NOT
71192: PUSH
71193: LD_VAR 0 2
71197: NOT
71198: OR
71199: IFFALSE 71203
// exit ;
71201: GO 71293
// dist := 99999 ;
71203: LD_ADDR_VAR 0 5
71207: PUSH
71208: LD_INT 99999
71210: ST_TO_ADDR
// for i in points do
71211: LD_ADDR_VAR 0 4
71215: PUSH
71216: LD_VAR 0 2
71220: PUSH
71221: FOR_IN
71222: IFFALSE 71291
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
71224: LD_ADDR_VAR 0 6
71228: PUSH
71229: LD_VAR 0 1
71233: PPUSH
71234: LD_VAR 0 4
71238: PUSH
71239: LD_INT 1
71241: ARRAY
71242: PPUSH
71243: LD_VAR 0 4
71247: PUSH
71248: LD_INT 2
71250: ARRAY
71251: PPUSH
71252: CALL_OW 297
71256: ST_TO_ADDR
// if tmpDist < dist then
71257: LD_VAR 0 6
71261: PUSH
71262: LD_VAR 0 5
71266: LESS
71267: IFFALSE 71289
// begin result := i ;
71269: LD_ADDR_VAR 0 3
71273: PUSH
71274: LD_VAR 0 4
71278: ST_TO_ADDR
// dist := tmpDist ;
71279: LD_ADDR_VAR 0 5
71283: PUSH
71284: LD_VAR 0 6
71288: ST_TO_ADDR
// end ; end ;
71289: GO 71221
71291: POP
71292: POP
// end ;
71293: LD_VAR 0 3
71297: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
71298: LD_INT 0
71300: PPUSH
// uc_side := side ;
71301: LD_ADDR_OWVAR 20
71305: PUSH
71306: LD_VAR 0 1
71310: ST_TO_ADDR
// uc_nation := 3 ;
71311: LD_ADDR_OWVAR 21
71315: PUSH
71316: LD_INT 3
71318: ST_TO_ADDR
// vc_chassis := 25 ;
71319: LD_ADDR_OWVAR 37
71323: PUSH
71324: LD_INT 25
71326: ST_TO_ADDR
// vc_engine := engine_siberite ;
71327: LD_ADDR_OWVAR 39
71331: PUSH
71332: LD_INT 3
71334: ST_TO_ADDR
// vc_control := control_computer ;
71335: LD_ADDR_OWVAR 38
71339: PUSH
71340: LD_INT 3
71342: ST_TO_ADDR
// vc_weapon := 59 ;
71343: LD_ADDR_OWVAR 40
71347: PUSH
71348: LD_INT 59
71350: ST_TO_ADDR
// result := CreateVehicle ;
71351: LD_ADDR_VAR 0 5
71355: PUSH
71356: CALL_OW 45
71360: ST_TO_ADDR
// SetDir ( result , d ) ;
71361: LD_VAR 0 5
71365: PPUSH
71366: LD_VAR 0 4
71370: PPUSH
71371: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
71375: LD_VAR 0 5
71379: PPUSH
71380: LD_VAR 0 2
71384: PPUSH
71385: LD_VAR 0 3
71389: PPUSH
71390: LD_INT 0
71392: PPUSH
71393: CALL_OW 48
// end ;
71397: LD_VAR 0 5
71401: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
71402: LD_INT 0
71404: PPUSH
71405: PPUSH
71406: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
71407: LD_ADDR_VAR 0 2
71411: PUSH
71412: LD_INT 0
71414: PUSH
71415: LD_INT 0
71417: PUSH
71418: LD_INT 0
71420: PUSH
71421: LD_INT 0
71423: PUSH
71424: EMPTY
71425: LIST
71426: LIST
71427: LIST
71428: LIST
71429: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
71430: LD_VAR 0 1
71434: NOT
71435: PUSH
71436: LD_VAR 0 1
71440: PPUSH
71441: CALL_OW 264
71445: PUSH
71446: LD_INT 12
71448: PUSH
71449: LD_INT 51
71451: PUSH
71452: LD_INT 32
71454: PUSH
71455: LD_INT 89
71457: PUSH
71458: EMPTY
71459: LIST
71460: LIST
71461: LIST
71462: LIST
71463: IN
71464: NOT
71465: OR
71466: IFFALSE 71470
// exit ;
71468: GO 71568
// for i := 1 to 3 do
71470: LD_ADDR_VAR 0 3
71474: PUSH
71475: DOUBLE
71476: LD_INT 1
71478: DEC
71479: ST_TO_ADDR
71480: LD_INT 3
71482: PUSH
71483: FOR_TO
71484: IFFALSE 71566
// begin tmp := GetCargo ( cargo , i ) ;
71486: LD_ADDR_VAR 0 4
71490: PUSH
71491: LD_VAR 0 1
71495: PPUSH
71496: LD_VAR 0 3
71500: PPUSH
71501: CALL_OW 289
71505: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
71506: LD_ADDR_VAR 0 2
71510: PUSH
71511: LD_VAR 0 2
71515: PPUSH
71516: LD_VAR 0 3
71520: PPUSH
71521: LD_VAR 0 4
71525: PPUSH
71526: CALL_OW 1
71530: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
71531: LD_ADDR_VAR 0 2
71535: PUSH
71536: LD_VAR 0 2
71540: PPUSH
71541: LD_INT 4
71543: PPUSH
71544: LD_VAR 0 2
71548: PUSH
71549: LD_INT 4
71551: ARRAY
71552: PUSH
71553: LD_VAR 0 4
71557: PLUS
71558: PPUSH
71559: CALL_OW 1
71563: ST_TO_ADDR
// end ;
71564: GO 71483
71566: POP
71567: POP
// end ;
71568: LD_VAR 0 2
71572: RET
// export function Length ( array ) ; begin
71573: LD_INT 0
71575: PPUSH
// result := array + 0 ;
71576: LD_ADDR_VAR 0 2
71580: PUSH
71581: LD_VAR 0 1
71585: PUSH
71586: LD_INT 0
71588: PLUS
71589: ST_TO_ADDR
// end ;
71590: LD_VAR 0 2
71594: RET
// export function PrepareArray ( array ) ; begin
71595: LD_INT 0
71597: PPUSH
// result := array diff 0 ;
71598: LD_ADDR_VAR 0 2
71602: PUSH
71603: LD_VAR 0 1
71607: PUSH
71608: LD_INT 0
71610: DIFF
71611: ST_TO_ADDR
// if not result [ 1 ] then
71612: LD_VAR 0 2
71616: PUSH
71617: LD_INT 1
71619: ARRAY
71620: NOT
71621: IFFALSE 71641
// result := Delete ( result , 1 ) ;
71623: LD_ADDR_VAR 0 2
71627: PUSH
71628: LD_VAR 0 2
71632: PPUSH
71633: LD_INT 1
71635: PPUSH
71636: CALL_OW 3
71640: ST_TO_ADDR
// end ;
71641: LD_VAR 0 2
71645: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
71646: LD_INT 0
71648: PPUSH
71649: PPUSH
71650: PPUSH
71651: PPUSH
// sibRocketRange := 25 ;
71652: LD_ADDR_VAR 0 6
71656: PUSH
71657: LD_INT 25
71659: ST_TO_ADDR
// result := false ;
71660: LD_ADDR_VAR 0 4
71664: PUSH
71665: LD_INT 0
71667: ST_TO_ADDR
// for i := 0 to 5 do
71668: LD_ADDR_VAR 0 5
71672: PUSH
71673: DOUBLE
71674: LD_INT 0
71676: DEC
71677: ST_TO_ADDR
71678: LD_INT 5
71680: PUSH
71681: FOR_TO
71682: IFFALSE 71749
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
71684: LD_VAR 0 1
71688: PPUSH
71689: LD_VAR 0 5
71693: PPUSH
71694: LD_VAR 0 6
71698: PPUSH
71699: CALL_OW 272
71703: PPUSH
71704: LD_VAR 0 2
71708: PPUSH
71709: LD_VAR 0 5
71713: PPUSH
71714: LD_VAR 0 6
71718: PPUSH
71719: CALL_OW 273
71723: PPUSH
71724: LD_VAR 0 3
71728: PPUSH
71729: CALL_OW 309
71733: IFFALSE 71747
// begin result := true ;
71735: LD_ADDR_VAR 0 4
71739: PUSH
71740: LD_INT 1
71742: ST_TO_ADDR
// exit ;
71743: POP
71744: POP
71745: GO 71751
// end ;
71747: GO 71681
71749: POP
71750: POP
// end ;
71751: LD_VAR 0 4
71755: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
71756: LD_INT 0
71758: PPUSH
71759: PPUSH
71760: PPUSH
// if btype = b_depot then
71761: LD_VAR 0 2
71765: PUSH
71766: LD_INT 0
71768: EQUAL
71769: IFFALSE 71781
// begin result := true ;
71771: LD_ADDR_VAR 0 3
71775: PUSH
71776: LD_INT 1
71778: ST_TO_ADDR
// exit ;
71779: GO 71897
// end ; pom := GetBase ( depot ) ;
71781: LD_ADDR_VAR 0 4
71785: PUSH
71786: LD_VAR 0 1
71790: PPUSH
71791: CALL_OW 274
71795: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
71796: LD_ADDR_VAR 0 5
71800: PUSH
71801: LD_VAR 0 2
71805: PPUSH
71806: LD_VAR 0 1
71810: PPUSH
71811: CALL_OW 248
71815: PPUSH
71816: CALL_OW 450
71820: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
71821: LD_ADDR_VAR 0 3
71825: PUSH
71826: LD_VAR 0 4
71830: PPUSH
71831: LD_INT 1
71833: PPUSH
71834: CALL_OW 275
71838: PUSH
71839: LD_VAR 0 5
71843: PUSH
71844: LD_INT 1
71846: ARRAY
71847: GREATEREQUAL
71848: PUSH
71849: LD_VAR 0 4
71853: PPUSH
71854: LD_INT 2
71856: PPUSH
71857: CALL_OW 275
71861: PUSH
71862: LD_VAR 0 5
71866: PUSH
71867: LD_INT 2
71869: ARRAY
71870: GREATEREQUAL
71871: AND
71872: PUSH
71873: LD_VAR 0 4
71877: PPUSH
71878: LD_INT 3
71880: PPUSH
71881: CALL_OW 275
71885: PUSH
71886: LD_VAR 0 5
71890: PUSH
71891: LD_INT 3
71893: ARRAY
71894: GREATEREQUAL
71895: AND
71896: ST_TO_ADDR
// end ;
71897: LD_VAR 0 3
71901: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
71902: LD_INT 0
71904: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
71905: LD_VAR 0 1
71909: PPUSH
71910: LD_VAR 0 2
71914: PPUSH
71915: LD_INT 0
71917: PPUSH
71918: LD_INT 0
71920: PPUSH
71921: LD_INT 1
71923: PPUSH
71924: LD_INT 0
71926: PPUSH
71927: CALL_OW 587
// end ;
71931: LD_VAR 0 3
71935: RET
// export function CenterOnNow ( unit ) ; begin
71936: LD_INT 0
71938: PPUSH
// result := IsInUnit ( unit ) ;
71939: LD_ADDR_VAR 0 2
71943: PUSH
71944: LD_VAR 0 1
71948: PPUSH
71949: CALL_OW 310
71953: ST_TO_ADDR
// if not result then
71954: LD_VAR 0 2
71958: NOT
71959: IFFALSE 71971
// result := unit ;
71961: LD_ADDR_VAR 0 2
71965: PUSH
71966: LD_VAR 0 1
71970: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
71971: LD_VAR 0 1
71975: PPUSH
71976: CALL_OW 87
// end ;
71980: LD_VAR 0 2
71984: RET
// export function ComMoveHex ( unit , hex ) ; begin
71985: LD_INT 0
71987: PPUSH
// if not hex then
71988: LD_VAR 0 2
71992: NOT
71993: IFFALSE 71997
// exit ;
71995: GO 72050
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
71997: LD_VAR 0 2
72001: PUSH
72002: LD_INT 1
72004: ARRAY
72005: PPUSH
72006: LD_VAR 0 2
72010: PUSH
72011: LD_INT 2
72013: ARRAY
72014: PPUSH
72015: CALL_OW 428
72019: IFFALSE 72023
// exit ;
72021: GO 72050
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
72023: LD_VAR 0 1
72027: PPUSH
72028: LD_VAR 0 2
72032: PUSH
72033: LD_INT 1
72035: ARRAY
72036: PPUSH
72037: LD_VAR 0 2
72041: PUSH
72042: LD_INT 2
72044: ARRAY
72045: PPUSH
72046: CALL_OW 111
// end ;
72050: LD_VAR 0 3
72054: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
72055: LD_INT 0
72057: PPUSH
72058: PPUSH
72059: PPUSH
// if not unit or not enemy then
72060: LD_VAR 0 1
72064: NOT
72065: PUSH
72066: LD_VAR 0 2
72070: NOT
72071: OR
72072: IFFALSE 72076
// exit ;
72074: GO 72200
// x := GetX ( enemy ) ;
72076: LD_ADDR_VAR 0 4
72080: PUSH
72081: LD_VAR 0 2
72085: PPUSH
72086: CALL_OW 250
72090: ST_TO_ADDR
// y := GetY ( enemy ) ;
72091: LD_ADDR_VAR 0 5
72095: PUSH
72096: LD_VAR 0 2
72100: PPUSH
72101: CALL_OW 251
72105: ST_TO_ADDR
// if ValidHex ( x , y ) then
72106: LD_VAR 0 4
72110: PPUSH
72111: LD_VAR 0 5
72115: PPUSH
72116: CALL_OW 488
72120: IFFALSE 72200
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
72122: LD_VAR 0 2
72126: PPUSH
72127: CALL_OW 247
72131: PUSH
72132: LD_INT 3
72134: PUSH
72135: LD_INT 2
72137: PUSH
72138: EMPTY
72139: LIST
72140: LIST
72141: IN
72142: PUSH
72143: LD_VAR 0 1
72147: PPUSH
72148: CALL_OW 255
72152: PPUSH
72153: LD_VAR 0 2
72157: PPUSH
72158: CALL_OW 292
72162: OR
72163: IFFALSE 72181
// ComAttackUnit ( unit , enemy ) else
72165: LD_VAR 0 1
72169: PPUSH
72170: LD_VAR 0 2
72174: PPUSH
72175: CALL_OW 115
72179: GO 72200
// ComAgressiveMove ( unit , x , y ) ;
72181: LD_VAR 0 1
72185: PPUSH
72186: LD_VAR 0 4
72190: PPUSH
72191: LD_VAR 0 5
72195: PPUSH
72196: CALL_OW 114
// end ;
72200: LD_VAR 0 3
72204: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
72205: LD_INT 0
72207: PPUSH
72208: PPUSH
72209: PPUSH
// list := AreaToList ( area , 0 ) ;
72210: LD_ADDR_VAR 0 5
72214: PUSH
72215: LD_VAR 0 1
72219: PPUSH
72220: LD_INT 0
72222: PPUSH
72223: CALL_OW 517
72227: ST_TO_ADDR
// if not list then
72228: LD_VAR 0 5
72232: NOT
72233: IFFALSE 72237
// exit ;
72235: GO 72367
// if all then
72237: LD_VAR 0 2
72241: IFFALSE 72329
// begin for i := 1 to list [ 1 ] do
72243: LD_ADDR_VAR 0 4
72247: PUSH
72248: DOUBLE
72249: LD_INT 1
72251: DEC
72252: ST_TO_ADDR
72253: LD_VAR 0 5
72257: PUSH
72258: LD_INT 1
72260: ARRAY
72261: PUSH
72262: FOR_TO
72263: IFFALSE 72325
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
72265: LD_ADDR_VAR 0 3
72269: PUSH
72270: LD_VAR 0 3
72274: PPUSH
72275: LD_VAR 0 3
72279: PUSH
72280: LD_INT 1
72282: PLUS
72283: PPUSH
72284: LD_VAR 0 5
72288: PUSH
72289: LD_INT 1
72291: ARRAY
72292: PUSH
72293: LD_VAR 0 4
72297: ARRAY
72298: PUSH
72299: LD_VAR 0 5
72303: PUSH
72304: LD_INT 2
72306: ARRAY
72307: PUSH
72308: LD_VAR 0 4
72312: ARRAY
72313: PUSH
72314: EMPTY
72315: LIST
72316: LIST
72317: PPUSH
72318: CALL_OW 1
72322: ST_TO_ADDR
72323: GO 72262
72325: POP
72326: POP
// exit ;
72327: GO 72367
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
72329: LD_ADDR_VAR 0 3
72333: PUSH
72334: LD_VAR 0 5
72338: PUSH
72339: LD_INT 1
72341: ARRAY
72342: PUSH
72343: LD_INT 1
72345: ARRAY
72346: PUSH
72347: LD_VAR 0 5
72351: PUSH
72352: LD_INT 2
72354: ARRAY
72355: PUSH
72356: LD_INT 1
72358: ARRAY
72359: PUSH
72360: EMPTY
72361: LIST
72362: LIST
72363: PUSH
72364: EMPTY
72365: LIST
72366: ST_TO_ADDR
// end ;
72367: LD_VAR 0 3
72371: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
72372: LD_INT 0
72374: PPUSH
72375: PPUSH
// list := AreaToList ( area , 0 ) ;
72376: LD_ADDR_VAR 0 4
72380: PUSH
72381: LD_VAR 0 1
72385: PPUSH
72386: LD_INT 0
72388: PPUSH
72389: CALL_OW 517
72393: ST_TO_ADDR
// if not list then
72394: LD_VAR 0 4
72398: NOT
72399: IFFALSE 72403
// exit ;
72401: GO 72444
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
72403: LD_ADDR_VAR 0 3
72407: PUSH
72408: LD_VAR 0 4
72412: PUSH
72413: LD_INT 1
72415: ARRAY
72416: PUSH
72417: LD_INT 1
72419: ARRAY
72420: PUSH
72421: LD_VAR 0 4
72425: PUSH
72426: LD_INT 2
72428: ARRAY
72429: PUSH
72430: LD_INT 1
72432: ARRAY
72433: PUSH
72434: LD_VAR 0 2
72438: PUSH
72439: EMPTY
72440: LIST
72441: LIST
72442: LIST
72443: ST_TO_ADDR
// end ;
72444: LD_VAR 0 3
72448: RET
// export function First ( array ) ; begin
72449: LD_INT 0
72451: PPUSH
// if not array then
72452: LD_VAR 0 1
72456: NOT
72457: IFFALSE 72461
// exit ;
72459: GO 72475
// result := array [ 1 ] ;
72461: LD_ADDR_VAR 0 2
72465: PUSH
72466: LD_VAR 0 1
72470: PUSH
72471: LD_INT 1
72473: ARRAY
72474: ST_TO_ADDR
// end ;
72475: LD_VAR 0 2
72479: RET
// export function Last ( array ) ; begin
72480: LD_INT 0
72482: PPUSH
// if not array then
72483: LD_VAR 0 1
72487: NOT
72488: IFFALSE 72492
// exit ;
72490: GO 72508
// result := array [ array ] ;
72492: LD_ADDR_VAR 0 2
72496: PUSH
72497: LD_VAR 0 1
72501: PUSH
72502: LD_VAR 0 1
72506: ARRAY
72507: ST_TO_ADDR
// end ;
72508: LD_VAR 0 2
72512: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
72513: LD_INT 0
72515: PPUSH
72516: PPUSH
// result := [ ] ;
72517: LD_ADDR_VAR 0 5
72521: PUSH
72522: EMPTY
72523: ST_TO_ADDR
// if not array then
72524: LD_VAR 0 1
72528: NOT
72529: IFFALSE 72533
// exit ;
72531: GO 72645
// for i := 1 to array do
72533: LD_ADDR_VAR 0 6
72537: PUSH
72538: DOUBLE
72539: LD_INT 1
72541: DEC
72542: ST_TO_ADDR
72543: LD_VAR 0 1
72547: PUSH
72548: FOR_TO
72549: IFFALSE 72643
// if array [ i ] [ index ] = value then
72551: LD_VAR 0 1
72555: PUSH
72556: LD_VAR 0 6
72560: ARRAY
72561: PUSH
72562: LD_VAR 0 2
72566: ARRAY
72567: PUSH
72568: LD_VAR 0 3
72572: EQUAL
72573: IFFALSE 72641
// begin if indexColumn then
72575: LD_VAR 0 4
72579: IFFALSE 72615
// result := Join ( result , array [ i ] [ indexColumn ] ) else
72581: LD_ADDR_VAR 0 5
72585: PUSH
72586: LD_VAR 0 5
72590: PPUSH
72591: LD_VAR 0 1
72595: PUSH
72596: LD_VAR 0 6
72600: ARRAY
72601: PUSH
72602: LD_VAR 0 4
72606: ARRAY
72607: PPUSH
72608: CALL 67833 0 2
72612: ST_TO_ADDR
72613: GO 72641
// result := Join ( result , array [ i ] ) ;
72615: LD_ADDR_VAR 0 5
72619: PUSH
72620: LD_VAR 0 5
72624: PPUSH
72625: LD_VAR 0 1
72629: PUSH
72630: LD_VAR 0 6
72634: ARRAY
72635: PPUSH
72636: CALL 67833 0 2
72640: ST_TO_ADDR
// end ;
72641: GO 72548
72643: POP
72644: POP
// end ;
72645: LD_VAR 0 5
72649: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
72650: LD_INT 0
72652: PPUSH
// if not vehicles or not parkingPoint then
72653: LD_VAR 0 1
72657: NOT
72658: PUSH
72659: LD_VAR 0 2
72663: NOT
72664: OR
72665: IFFALSE 72669
// exit ;
72667: GO 72767
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
72669: LD_ADDR_VAR 0 1
72673: PUSH
72674: LD_VAR 0 1
72678: PPUSH
72679: LD_INT 50
72681: PUSH
72682: EMPTY
72683: LIST
72684: PUSH
72685: LD_INT 3
72687: PUSH
72688: LD_INT 92
72690: PUSH
72691: LD_VAR 0 2
72695: PUSH
72696: LD_INT 1
72698: ARRAY
72699: PUSH
72700: LD_VAR 0 2
72704: PUSH
72705: LD_INT 2
72707: ARRAY
72708: PUSH
72709: LD_INT 8
72711: PUSH
72712: EMPTY
72713: LIST
72714: LIST
72715: LIST
72716: LIST
72717: PUSH
72718: EMPTY
72719: LIST
72720: LIST
72721: PUSH
72722: EMPTY
72723: LIST
72724: LIST
72725: PPUSH
72726: CALL_OW 72
72730: ST_TO_ADDR
// if not vehicles then
72731: LD_VAR 0 1
72735: NOT
72736: IFFALSE 72740
// exit ;
72738: GO 72767
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
72740: LD_VAR 0 1
72744: PPUSH
72745: LD_VAR 0 2
72749: PUSH
72750: LD_INT 1
72752: ARRAY
72753: PPUSH
72754: LD_VAR 0 2
72758: PUSH
72759: LD_INT 2
72761: ARRAY
72762: PPUSH
72763: CALL_OW 111
// end ;
72767: LD_VAR 0 3
72771: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
72772: LD_INT 0
72774: PPUSH
72775: PPUSH
72776: PPUSH
// if not side or not area then
72777: LD_VAR 0 1
72781: NOT
72782: PUSH
72783: LD_VAR 0 2
72787: NOT
72788: OR
72789: IFFALSE 72793
// exit ;
72791: GO 72912
// tmp := AreaToList ( area , 0 ) ;
72793: LD_ADDR_VAR 0 5
72797: PUSH
72798: LD_VAR 0 2
72802: PPUSH
72803: LD_INT 0
72805: PPUSH
72806: CALL_OW 517
72810: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
72811: LD_ADDR_VAR 0 4
72815: PUSH
72816: DOUBLE
72817: LD_INT 1
72819: DEC
72820: ST_TO_ADDR
72821: LD_VAR 0 5
72825: PUSH
72826: LD_INT 1
72828: ARRAY
72829: PUSH
72830: FOR_TO
72831: IFFALSE 72910
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
72833: LD_VAR 0 5
72837: PUSH
72838: LD_INT 1
72840: ARRAY
72841: PUSH
72842: LD_VAR 0 4
72846: ARRAY
72847: PPUSH
72848: LD_VAR 0 5
72852: PUSH
72853: LD_INT 2
72855: ARRAY
72856: PUSH
72857: LD_VAR 0 4
72861: ARRAY
72862: PPUSH
72863: CALL_OW 351
72867: IFFALSE 72908
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
72869: LD_VAR 0 5
72873: PUSH
72874: LD_INT 1
72876: ARRAY
72877: PUSH
72878: LD_VAR 0 4
72882: ARRAY
72883: PPUSH
72884: LD_VAR 0 5
72888: PUSH
72889: LD_INT 2
72891: ARRAY
72892: PUSH
72893: LD_VAR 0 4
72897: ARRAY
72898: PPUSH
72899: LD_VAR 0 1
72903: PPUSH
72904: CALL_OW 244
// end ;
72908: GO 72830
72910: POP
72911: POP
// end ; end_of_file
72912: LD_VAR 0 3
72916: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
72917: LD_VAR 0 1
72921: PUSH
72922: LD_INT 200
72924: DOUBLE
72925: GREATEREQUAL
72926: IFFALSE 72934
72928: LD_INT 299
72930: DOUBLE
72931: LESSEQUAL
72932: IFTRUE 72936
72934: GO 72968
72936: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
72937: LD_VAR 0 1
72941: PPUSH
72942: LD_VAR 0 2
72946: PPUSH
72947: LD_VAR 0 3
72951: PPUSH
72952: LD_VAR 0 4
72956: PPUSH
72957: LD_VAR 0 5
72961: PPUSH
72962: CALL 25402 0 5
72966: GO 73045
72968: LD_INT 300
72970: DOUBLE
72971: GREATEREQUAL
72972: IFFALSE 72980
72974: LD_INT 399
72976: DOUBLE
72977: LESSEQUAL
72978: IFTRUE 72982
72980: GO 73044
72982: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
72983: LD_VAR 0 1
72987: PPUSH
72988: LD_VAR 0 2
72992: PPUSH
72993: LD_VAR 0 3
72997: PPUSH
72998: LD_VAR 0 4
73002: PPUSH
73003: LD_VAR 0 5
73007: PPUSH
73008: LD_VAR 0 6
73012: PPUSH
73013: LD_VAR 0 7
73017: PPUSH
73018: LD_VAR 0 8
73022: PPUSH
73023: LD_VAR 0 9
73027: PPUSH
73028: LD_VAR 0 10
73032: PPUSH
73033: LD_VAR 0 11
73037: PPUSH
73038: CALL 21390 0 11
73042: GO 73045
73044: POP
// end ;
73045: PPOPN 11
73047: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
73048: LD_VAR 0 1
73052: PPUSH
73053: LD_VAR 0 2
73057: PPUSH
73058: LD_VAR 0 3
73062: PPUSH
73063: LD_VAR 0 4
73067: PPUSH
73068: LD_VAR 0 5
73072: PPUSH
73073: CALL 24867 0 5
// end ; end_of_file
73077: PPOPN 5
73079: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
73080: LD_VAR 0 1
73084: PPUSH
73085: LD_VAR 0 2
73089: PPUSH
73090: LD_VAR 0 3
73094: PPUSH
73095: LD_VAR 0 4
73099: PPUSH
73100: LD_VAR 0 5
73104: PPUSH
73105: LD_VAR 0 6
73109: PPUSH
73110: CALL 9042 0 6
// end ;
73114: PPOPN 6
73116: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
73117: LD_INT 0
73119: PPUSH
// begin if not units then
73120: LD_VAR 0 1
73124: NOT
73125: IFFALSE 73129
// exit ;
73127: GO 73129
// end ;
73129: PPOPN 7
73131: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
73132: CALL 8929 0 0
// end ;
73136: PPOPN 1
73138: END
