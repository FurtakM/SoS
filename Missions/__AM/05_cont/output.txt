// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RandomizeAll ;
  11: CALL_OW 11
// Init ;
  15: CALL 83 0 0
// InitRestrictions ;
  19: CALL 211 0 0
// if debug then
  23: LD_EXP 1
  27: IFFALSE 33
// DebugMode ;
  29: CALL 292 0 0
// SpawnApeman ( apemanStartArea , 2 ) ;
  33: LD_INT 12
  35: PPUSH
  36: LD_INT 2
  38: PPUSH
  39: CALL 599 0 2
// SpawnApeman ( apemanArea , [ 10 , 8 , 7 , 6 ] [ Difficulty ] ) ;
  43: LD_INT 11
  45: PPUSH
  46: LD_INT 10
  48: PUSH
  49: LD_INT 8
  51: PUSH
  52: LD_INT 7
  54: PUSH
  55: LD_INT 6
  57: PUSH
  58: EMPTY
  59: LIST
  60: LIST
  61: LIST
  62: LIST
  63: PUSH
  64: LD_OWVAR 67
  68: ARRAY
  69: PPUSH
  70: CALL 599 0 2
// PrepareAmericans ;
  74: CALL 1198 0 0
// Action ;
  78: CALL 2134 0 0
// end ;
  82: END
// export debug ; export mission_prefix , mission_prefix_prev ; export deltaBuilded , denisArrives , Delta , radar_allowed , first_apeman_tamed , apeman_army , radar_researched , radar_builded ; export apeman_counter , arab_spotted , end_mission , apeKillCounter ; function Init ; begin
  83: LD_INT 0
  85: PPUSH
// debug := false ;
  86: LD_ADDR_EXP 1
  90: PUSH
  91: LD_INT 0
  93: ST_TO_ADDR
// mission_prefix := 05_ ;
  94: LD_ADDR_EXP 2
  98: PUSH
  99: LD_STRING 05_
 101: ST_TO_ADDR
// mission_prefix_prev := 05a_ ;
 102: LD_ADDR_EXP 3
 106: PUSH
 107: LD_STRING 05a_
 109: ST_TO_ADDR
// deltaBuilded := false ;
 110: LD_ADDR_EXP 4
 114: PUSH
 115: LD_INT 0
 117: ST_TO_ADDR
// denisArrives := false ;
 118: LD_ADDR_EXP 5
 122: PUSH
 123: LD_INT 0
 125: ST_TO_ADDR
// radar_allowed := false ;
 126: LD_ADDR_EXP 7
 130: PUSH
 131: LD_INT 0
 133: ST_TO_ADDR
// first_apeman_tamed := false ;
 134: LD_ADDR_EXP 8
 138: PUSH
 139: LD_INT 0
 141: ST_TO_ADDR
// arab_spotted := false ;
 142: LD_ADDR_EXP 13
 146: PUSH
 147: LD_INT 0
 149: ST_TO_ADDR
// end_mission := false ;
 150: LD_ADDR_EXP 14
 154: PUSH
 155: LD_INT 0
 157: ST_TO_ADDR
// apeman_army := false ;
 158: LD_ADDR_EXP 9
 162: PUSH
 163: LD_INT 0
 165: ST_TO_ADDR
// radar_researched := false ;
 166: LD_ADDR_EXP 10
 170: PUSH
 171: LD_INT 0
 173: ST_TO_ADDR
// radar_builded := false ;
 174: LD_ADDR_EXP 11
 178: PUSH
 179: LD_INT 0
 181: ST_TO_ADDR
// apeman_counter := 0 ;
 182: LD_ADDR_EXP 12
 186: PUSH
 187: LD_INT 0
 189: ST_TO_ADDR
// Delta := 0 ;
 190: LD_ADDR_EXP 6
 194: PUSH
 195: LD_INT 0
 197: ST_TO_ADDR
// apeKillCounter := 0 ;
 198: LD_ADDR_EXP 15
 202: PUSH
 203: LD_INT 0
 205: ST_TO_ADDR
// end ;
 206: LD_VAR 0 1
 210: RET
// function InitRestrictions ; begin
 211: LD_INT 0
 213: PPUSH
// SetRestrict ( b_lab_half , 1 , state_enabled ) ;
 214: LD_INT 7
 216: PPUSH
 217: LD_INT 1
 219: PPUSH
 220: LD_INT 1
 222: PPUSH
 223: CALL_OW 324
// SetRestrict ( b_lab_full , 1 , state_enabled ) ;
 227: LD_INT 8
 229: PPUSH
 230: LD_INT 1
 232: PPUSH
 233: LD_INT 1
 235: PPUSH
 236: CALL_OW 324
// SetRestrict ( b_lab_weapon , 1 , state_enabled ) ;
 240: LD_INT 10
 242: PPUSH
 243: LD_INT 1
 245: PPUSH
 246: LD_INT 1
 248: PPUSH
 249: CALL_OW 324
// SetTech ( tech_gatling , 1 , LoadVariable ( GatlingInGamma , 1 ) ) ;
 253: LD_INT 69
 255: PPUSH
 256: LD_INT 1
 258: PPUSH
 259: LD_STRING GatlingInGamma
 261: PPUSH
 262: LD_INT 1
 264: PPUSH
 265: CALL_OW 30
 269: PPUSH
 270: CALL_OW 322
// SetTech ( tech_weap1 , 1 , state_enabled ) ;
 274: LD_INT 51
 276: PPUSH
 277: LD_INT 1
 279: PPUSH
 280: LD_INT 1
 282: PPUSH
 283: CALL_OW 322
// end ;
 287: LD_VAR 0 1
 291: RET
// function DebugMode ; begin
 292: LD_INT 0
 294: PPUSH
// FogOff ( 1 ) ;
 295: LD_INT 1
 297: PPUSH
 298: CALL_OW 344
// Difficulty := 2 ;
 302: LD_ADDR_OWVAR 67
 306: PUSH
 307: LD_INT 2
 309: ST_TO_ADDR
// end ;
 310: LD_VAR 0 1
 314: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 0 ] ] ) >= 7 do
 315: LD_INT 22
 317: PUSH
 318: LD_INT 1
 320: PUSH
 321: EMPTY
 322: LIST
 323: LIST
 324: PUSH
 325: LD_INT 23
 327: PUSH
 328: LD_INT 0
 330: PUSH
 331: EMPTY
 332: LIST
 333: LIST
 334: PUSH
 335: EMPTY
 336: LIST
 337: LIST
 338: PPUSH
 339: CALL_OW 69
 343: PUSH
 344: LD_INT 7
 346: GREATEREQUAL
 347: IFFALSE 359
 349: GO 351
 351: DISABLE
// SetAchievement ( ACH_TAME ) ;
 352: LD_STRING ACH_TAME
 354: PPUSH
 355: CALL_OW 543
 359: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_bweapon , us_radar ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_radar ] ] ) do
 360: LD_INT 22
 362: PUSH
 363: LD_INT 1
 365: PUSH
 366: EMPTY
 367: LIST
 368: LIST
 369: PUSH
 370: LD_INT 35
 372: PUSH
 373: LD_INT 11
 375: PUSH
 376: EMPTY
 377: LIST
 378: LIST
 379: PUSH
 380: EMPTY
 381: LIST
 382: LIST
 383: PPUSH
 384: CALL_OW 69
 388: PUSH
 389: LD_INT 22
 391: PUSH
 392: LD_INT 1
 394: PUSH
 395: EMPTY
 396: LIST
 397: LIST
 398: PUSH
 399: LD_INT 34
 401: PUSH
 402: LD_INT 11
 404: PUSH
 405: EMPTY
 406: LIST
 407: LIST
 408: PUSH
 409: EMPTY
 410: LIST
 411: LIST
 412: PPUSH
 413: CALL_OW 69
 417: AND
 418: IFFALSE 430
 420: GO 422
 422: DISABLE
// SetAchievement ( ACH_RADAR ) ; end_of_file
 423: LD_STRING ACH_RADAR
 425: PPUSH
 426: CALL_OW 543
 430: END
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 431: LD_INT 0
 433: PPUSH
// uc_side := side ;
 434: LD_ADDR_OWVAR 20
 438: PUSH
 439: LD_VAR 0 1
 443: ST_TO_ADDR
// uc_nation := nation ;
 444: LD_ADDR_OWVAR 21
 448: PUSH
 449: LD_VAR 0 2
 453: ST_TO_ADDR
// vc_chassis := chassis ;
 454: LD_ADDR_OWVAR 37
 458: PUSH
 459: LD_VAR 0 3
 463: ST_TO_ADDR
// vc_engine := engine ;
 464: LD_ADDR_OWVAR 39
 468: PUSH
 469: LD_VAR 0 4
 473: ST_TO_ADDR
// vc_control := control ;
 474: LD_ADDR_OWVAR 38
 478: PUSH
 479: LD_VAR 0 5
 483: ST_TO_ADDR
// vc_weapon := weapon ;
 484: LD_ADDR_OWVAR 40
 488: PUSH
 489: LD_VAR 0 6
 493: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 494: LD_ADDR_OWVAR 41
 498: PUSH
 499: LD_VAR 0 7
 503: ST_TO_ADDR
// result := CreateVehicle ;
 504: LD_ADDR_VAR 0 8
 508: PUSH
 509: CALL_OW 45
 513: ST_TO_ADDR
// end ;
 514: LD_VAR 0 8
 518: RET
// export function SayX ( units , ident ) ; var i ; begin
 519: LD_INT 0
 521: PPUSH
 522: PPUSH
// result := false ;
 523: LD_ADDR_VAR 0 3
 527: PUSH
 528: LD_INT 0
 530: ST_TO_ADDR
// if not units then
 531: LD_VAR 0 1
 535: NOT
 536: IFFALSE 540
// exit ;
 538: GO 594
// for i in units do
 540: LD_ADDR_VAR 0 4
 544: PUSH
 545: LD_VAR 0 1
 549: PUSH
 550: FOR_IN
 551: IFFALSE 592
// if IsOk ( i ) then
 553: LD_VAR 0 4
 557: PPUSH
 558: CALL_OW 302
 562: IFFALSE 590
// begin Say ( i , ident ) ;
 564: LD_VAR 0 4
 568: PPUSH
 569: LD_VAR 0 2
 573: PPUSH
 574: CALL_OW 88
// result := i ;
 578: LD_ADDR_VAR 0 3
 582: PUSH
 583: LD_VAR 0 4
 587: ST_TO_ADDR
// break ;
 588: GO 592
// end ;
 590: GO 550
 592: POP
 593: POP
// end ;
 594: LD_VAR 0 3
 598: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 599: LD_INT 0
 601: PPUSH
 602: PPUSH
// InitUc ;
 603: CALL_OW 18
// InitHc ;
 607: CALL_OW 19
// uc_side := 0 ;
 611: LD_ADDR_OWVAR 20
 615: PUSH
 616: LD_INT 0
 618: ST_TO_ADDR
// uc_nation := 0 ;
 619: LD_ADDR_OWVAR 21
 623: PUSH
 624: LD_INT 0
 626: ST_TO_ADDR
// for i = 1 to amount do
 627: LD_ADDR_VAR 0 4
 631: PUSH
 632: DOUBLE
 633: LD_INT 1
 635: DEC
 636: ST_TO_ADDR
 637: LD_VAR 0 2
 641: PUSH
 642: FOR_TO
 643: IFFALSE 725
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 645: LD_ADDR_OWVAR 29
 649: PUSH
 650: LD_INT 9
 652: PPUSH
 653: LD_INT 12
 655: PPUSH
 656: CALL_OW 12
 660: PUSH
 661: LD_INT 9
 663: PPUSH
 664: LD_INT 12
 666: PPUSH
 667: CALL_OW 12
 671: PUSH
 672: EMPTY
 673: LIST
 674: LIST
 675: ST_TO_ADDR
// hc_agressivity := rand ( - 5 , 5 ) ;
 676: LD_ADDR_OWVAR 35
 680: PUSH
 681: LD_INT 5
 683: NEG
 684: PPUSH
 685: LD_INT 5
 687: PPUSH
 688: CALL_OW 12
 692: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 693: LD_INT 0
 695: PPUSH
 696: LD_INT 12
 698: PPUSH
 699: LD_INT 1
 701: PPUSH
 702: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 706: CALL_OW 44
 710: PPUSH
 711: LD_VAR 0 1
 715: PPUSH
 716: LD_INT 0
 718: PPUSH
 719: CALL_OW 49
// end ;
 723: GO 642
 725: POP
 726: POP
// InitHc ;
 727: CALL_OW 19
// end ;
 731: LD_VAR 0 3
 735: RET
// export function Attack ( unit , enemy_list ) ; var target , targets_list ; begin
 736: LD_INT 0
 738: PPUSH
 739: PPUSH
 740: PPUSH
// if not unit then
 741: LD_VAR 0 1
 745: NOT
 746: IFFALSE 750
// exit ;
 748: GO 1193
// if IsInUnit ( unit ) then
 750: LD_VAR 0 1
 754: PPUSH
 755: CALL_OW 310
 759: IFFALSE 776
// unit := IsDrivenBy ( unit ) ;
 761: LD_ADDR_VAR 0 1
 765: PUSH
 766: LD_VAR 0 1
 770: PPUSH
 771: CALL_OW 311
 775: ST_TO_ADDR
// targets_list := [ ] ;
 776: LD_ADDR_VAR 0 5
 780: PUSH
 781: EMPTY
 782: ST_TO_ADDR
// target := UnitFilter ( enemy_list , [ [ f_lives , 250 ] , [ f_not , [ f_weapon , us_cargo_bay ] ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 783: LD_ADDR_VAR 0 4
 787: PUSH
 788: LD_VAR 0 2
 792: PPUSH
 793: LD_INT 24
 795: PUSH
 796: LD_INT 250
 798: PUSH
 799: EMPTY
 800: LIST
 801: LIST
 802: PUSH
 803: LD_INT 3
 805: PUSH
 806: LD_INT 34
 808: PUSH
 809: LD_INT 12
 811: PUSH
 812: EMPTY
 813: LIST
 814: LIST
 815: PUSH
 816: EMPTY
 817: LIST
 818: LIST
 819: PUSH
 820: LD_INT 21
 822: PUSH
 823: LD_INT 2
 825: PUSH
 826: EMPTY
 827: LIST
 828: LIST
 829: PUSH
 830: LD_INT 58
 832: PUSH
 833: EMPTY
 834: LIST
 835: PUSH
 836: EMPTY
 837: LIST
 838: LIST
 839: LIST
 840: LIST
 841: PPUSH
 842: CALL_OW 72
 846: ST_TO_ADDR
// if GetDistUnits ( NearestUnitToUnit ( target , unit ) , unit ) < 11 and not IsInUnit ( unit ) then
 847: LD_VAR 0 4
 851: PPUSH
 852: LD_VAR 0 1
 856: PPUSH
 857: CALL_OW 74
 861: PPUSH
 862: LD_VAR 0 1
 866: PPUSH
 867: CALL_OW 296
 871: PUSH
 872: LD_INT 11
 874: LESS
 875: PUSH
 876: LD_VAR 0 1
 880: PPUSH
 881: CALL_OW 310
 885: NOT
 886: AND
 887: IFFALSE 915
// begin ComEnterUnit ( unit , NearestUnitToUnit ( target , unit ) ) ;
 889: LD_VAR 0 1
 893: PPUSH
 894: LD_VAR 0 4
 898: PPUSH
 899: LD_VAR 0 1
 903: PPUSH
 904: CALL_OW 74
 908: PPUSH
 909: CALL_OW 120
// exit ;
 913: GO 1193
// end ; targets_list := [ UnitFilter ( enemy_list , [ [ f_type , unit_human ] , [ f_not , [ f_inside ] ] ] ) , UnitFilter ( enemy_list , [ f_type , unit_vehicle ] ) , UnitFilter ( enemy_list , [ [ f_type , unit_building ] , [ f_not , [ f_empty ] ] ] ) , enemy_list ] ;
 915: LD_ADDR_VAR 0 5
 919: PUSH
 920: LD_VAR 0 2
 924: PPUSH
 925: LD_INT 21
 927: PUSH
 928: LD_INT 1
 930: PUSH
 931: EMPTY
 932: LIST
 933: LIST
 934: PUSH
 935: LD_INT 3
 937: PUSH
 938: LD_INT 54
 940: PUSH
 941: EMPTY
 942: LIST
 943: PUSH
 944: EMPTY
 945: LIST
 946: LIST
 947: PUSH
 948: EMPTY
 949: LIST
 950: LIST
 951: PPUSH
 952: CALL_OW 72
 956: PUSH
 957: LD_VAR 0 2
 961: PPUSH
 962: LD_INT 21
 964: PUSH
 965: LD_INT 2
 967: PUSH
 968: EMPTY
 969: LIST
 970: LIST
 971: PPUSH
 972: CALL_OW 72
 976: PUSH
 977: LD_VAR 0 2
 981: PPUSH
 982: LD_INT 21
 984: PUSH
 985: LD_INT 3
 987: PUSH
 988: EMPTY
 989: LIST
 990: LIST
 991: PUSH
 992: LD_INT 3
 994: PUSH
 995: LD_INT 58
 997: PUSH
 998: EMPTY
 999: LIST
1000: PUSH
1001: EMPTY
1002: LIST
1003: LIST
1004: PUSH
1005: EMPTY
1006: LIST
1007: LIST
1008: PPUSH
1009: CALL_OW 72
1013: PUSH
1014: LD_VAR 0 2
1018: PUSH
1019: EMPTY
1020: LIST
1021: LIST
1022: LIST
1023: LIST
1024: ST_TO_ADDR
// for target in targets_list do
1025: LD_ADDR_VAR 0 4
1029: PUSH
1030: LD_VAR 0 5
1034: PUSH
1035: FOR_IN
1036: IFFALSE 1191
// begin if target then
1038: LD_VAR 0 4
1042: IFFALSE 1189
// if GetTag ( unit ) = 11 and ( GetType ( NearestUnitToUnit ( target , unit ) ) = unit_building or GetWeapon ( NearestUnitToUnit ( target , unit ) ) = us_cargo_bay ) then
1044: LD_VAR 0 1
1048: PPUSH
1049: CALL_OW 110
1053: PUSH
1054: LD_INT 11
1056: EQUAL
1057: PUSH
1058: LD_VAR 0 4
1062: PPUSH
1063: LD_VAR 0 1
1067: PPUSH
1068: CALL_OW 74
1072: PPUSH
1073: CALL_OW 247
1077: PUSH
1078: LD_INT 3
1080: EQUAL
1081: PUSH
1082: LD_VAR 0 4
1086: PPUSH
1087: LD_VAR 0 1
1091: PPUSH
1092: CALL_OW 74
1096: PPUSH
1097: CALL_OW 264
1101: PUSH
1102: LD_INT 12
1104: EQUAL
1105: OR
1106: AND
1107: IFFALSE 1153
// begin ComPlaceDelayedCharge ( unit , 0 , 0 , NearestUnitToUnit ( target , unit ) ) ;
1109: LD_VAR 0 1
1113: PPUSH
1114: LD_INT 0
1116: PPUSH
1117: LD_INT 0
1119: PPUSH
1120: LD_VAR 0 4
1124: PPUSH
1125: LD_VAR 0 1
1129: PPUSH
1130: CALL_OW 74
1134: PPUSH
1135: CALL_OW 132
// SetTag ( unit , 0 ) ;
1139: LD_VAR 0 1
1143: PPUSH
1144: LD_INT 0
1146: PPUSH
1147: CALL_OW 109
// end else
1151: GO 1189
// if not HasTask ( unit ) then
1153: LD_VAR 0 1
1157: PPUSH
1158: CALL_OW 314
1162: NOT
1163: IFFALSE 1189
// ComAttackUnit ( unit , NearestUnitToUnit ( target , unit ) ) ;
1165: LD_VAR 0 1
1169: PPUSH
1170: LD_VAR 0 4
1174: PPUSH
1175: LD_VAR 0 1
1179: PPUSH
1180: CALL_OW 74
1184: PPUSH
1185: CALL_OW 115
// end ;
1189: GO 1035
1191: POP
1192: POP
// end ; end_of_file
1193: LD_VAR 0 3
1197: RET
// export JMM , Gladstone , Harrison , Denis , Brown , Donaldson , Lisa , Frank , Bobby , Cyrus ; export others ; export function PrepareAmericans ; var i , points , veh , tmp ; begin
1198: LD_INT 0
1200: PPUSH
1201: PPUSH
1202: PPUSH
1203: PPUSH
1204: PPUSH
// uc_nation := 1 ;
1205: LD_ADDR_OWVAR 21
1209: PUSH
1210: LD_INT 1
1212: ST_TO_ADDR
// uc_side := 4 ;
1213: LD_ADDR_OWVAR 20
1217: PUSH
1218: LD_INT 4
1220: ST_TO_ADDR
// Denis := PrepareUnit ( Denis , false ,  ) ;
1221: LD_ADDR_EXP 19
1225: PUSH
1226: LD_STRING Denis
1228: PPUSH
1229: LD_INT 0
1231: PPUSH
1232: LD_STRING 
1234: PPUSH
1235: CALL 25234 0 3
1239: ST_TO_ADDR
// Harrison := PrepareUnit ( Harisson , false ,  ) ;
1240: LD_ADDR_EXP 18
1244: PUSH
1245: LD_STRING Harisson
1247: PPUSH
1248: LD_INT 0
1250: PPUSH
1251: LD_STRING 
1253: PPUSH
1254: CALL 25234 0 3
1258: ST_TO_ADDR
// uc_side := 1 ;
1259: LD_ADDR_OWVAR 20
1263: PUSH
1264: LD_INT 1
1266: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debug ) , mission_prefix_prev ) ;
1267: LD_ADDR_EXP 16
1271: PUSH
1272: LD_STRING JMM
1274: PPUSH
1275: LD_EXP 1
1279: NOT
1280: PPUSH
1281: LD_EXP 3
1285: PPUSH
1286: CALL 25234 0 3
1290: ST_TO_ADDR
// Gladstone := PrepareUnit ( Gladstone , false , mission_prefix_prev ) ;
1291: LD_ADDR_EXP 17
1295: PUSH
1296: LD_STRING Gladstone
1298: PPUSH
1299: LD_INT 0
1301: PPUSH
1302: LD_EXP 3
1306: PPUSH
1307: CALL 25234 0 3
1311: ST_TO_ADDR
// if LoadVariable ( BrownInDelta , debug ) then
1312: LD_STRING BrownInDelta
1314: PPUSH
1315: LD_EXP 1
1319: PPUSH
1320: CALL_OW 30
1324: IFFALSE 1366
// begin Brown := PrepareUnit ( Brown , ( not debug ) , mission_prefix_prev ) ;
1326: LD_ADDR_EXP 20
1330: PUSH
1331: LD_STRING Brown
1333: PPUSH
1334: LD_EXP 1
1338: NOT
1339: PPUSH
1340: LD_EXP 3
1344: PPUSH
1345: CALL 25234 0 3
1349: ST_TO_ADDR
// tmp := tmp ^ Brown ;
1350: LD_ADDR_VAR 0 5
1354: PUSH
1355: LD_VAR 0 5
1359: PUSH
1360: LD_EXP 20
1364: ADD
1365: ST_TO_ADDR
// end ; if LoadVariable ( DonaldsonInDelta , debug ) then
1366: LD_STRING DonaldsonInDelta
1368: PPUSH
1369: LD_EXP 1
1373: PPUSH
1374: CALL_OW 30
1378: IFFALSE 1420
// begin Donaldson := PrepareUnit ( Donaldson , ( not debug ) , mission_prefix_prev ) ;
1380: LD_ADDR_EXP 21
1384: PUSH
1385: LD_STRING Donaldson
1387: PPUSH
1388: LD_EXP 1
1392: NOT
1393: PPUSH
1394: LD_EXP 3
1398: PPUSH
1399: CALL 25234 0 3
1403: ST_TO_ADDR
// tmp := tmp ^ Donaldson ;
1404: LD_ADDR_VAR 0 5
1408: PUSH
1409: LD_VAR 0 5
1413: PUSH
1414: LD_EXP 21
1418: ADD
1419: ST_TO_ADDR
// end ; if LoadVariable ( LisaInDelta , debug ) then
1420: LD_STRING LisaInDelta
1422: PPUSH
1423: LD_EXP 1
1427: PPUSH
1428: CALL_OW 30
1432: IFFALSE 1474
// begin Lisa := PrepareUnit ( Lisa , ( not debug ) , mission_prefix_prev ) ;
1434: LD_ADDR_EXP 22
1438: PUSH
1439: LD_STRING Lisa
1441: PPUSH
1442: LD_EXP 1
1446: NOT
1447: PPUSH
1448: LD_EXP 3
1452: PPUSH
1453: CALL 25234 0 3
1457: ST_TO_ADDR
// tmp := tmp ^ Lisa ;
1458: LD_ADDR_VAR 0 5
1462: PUSH
1463: LD_VAR 0 5
1467: PUSH
1468: LD_EXP 22
1472: ADD
1473: ST_TO_ADDR
// end ; if LoadVariable ( FrankInDelta , debug ) then
1474: LD_STRING FrankInDelta
1476: PPUSH
1477: LD_EXP 1
1481: PPUSH
1482: CALL_OW 30
1486: IFFALSE 1528
// begin Frank := PrepareUnit ( Frank , ( not debug ) , mission_prefix_prev ) ;
1488: LD_ADDR_EXP 23
1492: PUSH
1493: LD_STRING Frank
1495: PPUSH
1496: LD_EXP 1
1500: NOT
1501: PPUSH
1502: LD_EXP 3
1506: PPUSH
1507: CALL 25234 0 3
1511: ST_TO_ADDR
// tmp := tmp ^ Frank ;
1512: LD_ADDR_VAR 0 5
1516: PUSH
1517: LD_VAR 0 5
1521: PUSH
1522: LD_EXP 23
1526: ADD
1527: ST_TO_ADDR
// end ; if LoadVariable ( BobbyInDelta , 0 ) then
1528: LD_STRING BobbyInDelta
1530: PPUSH
1531: LD_INT 0
1533: PPUSH
1534: CALL_OW 30
1538: IFFALSE 1580
// begin Bobby := PrepareUnit ( Bobby , ( not debug ) , mission_prefix_prev ) ;
1540: LD_ADDR_EXP 24
1544: PUSH
1545: LD_STRING Bobby
1547: PPUSH
1548: LD_EXP 1
1552: NOT
1553: PPUSH
1554: LD_EXP 3
1558: PPUSH
1559: CALL 25234 0 3
1563: ST_TO_ADDR
// tmp := tmp ^ Bobby ;
1564: LD_ADDR_VAR 0 5
1568: PUSH
1569: LD_VAR 0 5
1573: PUSH
1574: LD_EXP 24
1578: ADD
1579: ST_TO_ADDR
// end ; if LoadVariable ( CyrusInDelta , 0 ) then
1580: LD_STRING CyrusInDelta
1582: PPUSH
1583: LD_INT 0
1585: PPUSH
1586: CALL_OW 30
1590: IFFALSE 1632
// begin Cyrus := PrepareUnit ( Cyrus , ( not debug ) , mission_prefix_prev ) ;
1592: LD_ADDR_EXP 25
1596: PUSH
1597: LD_STRING Cyrus
1599: PPUSH
1600: LD_EXP 1
1604: NOT
1605: PPUSH
1606: LD_EXP 3
1610: PPUSH
1611: CALL 25234 0 3
1615: ST_TO_ADDR
// tmp := tmp ^ Cyrus ;
1616: LD_ADDR_VAR 0 5
1620: PUSH
1621: LD_VAR 0 5
1625: PUSH
1626: LD_EXP 25
1630: ADD
1631: ST_TO_ADDR
// end ; others := CreateCharacterSet ( othersDelta ) ;
1632: LD_ADDR_EXP 26
1636: PUSH
1637: LD_STRING othersDelta
1639: PPUSH
1640: CALL_OW 31
1644: ST_TO_ADDR
// if not others and debug then
1645: LD_EXP 26
1649: NOT
1650: PUSH
1651: LD_EXP 1
1655: AND
1656: IFFALSE 1721
// begin InitHc ;
1658: CALL_OW 19
// for i = 1 to 2 do
1662: LD_ADDR_VAR 0 2
1666: PUSH
1667: DOUBLE
1668: LD_INT 1
1670: DEC
1671: ST_TO_ADDR
1672: LD_INT 2
1674: PUSH
1675: FOR_TO
1676: IFFALSE 1719
// begin PrepareHuman ( false , i mod 4 + 1 , 3 ) ;
1678: LD_INT 0
1680: PPUSH
1681: LD_VAR 0 2
1685: PUSH
1686: LD_INT 4
1688: MOD
1689: PUSH
1690: LD_INT 1
1692: PLUS
1693: PPUSH
1694: LD_INT 3
1696: PPUSH
1697: CALL_OW 380
// others := others ^ CreateHuman ;
1701: LD_ADDR_EXP 26
1705: PUSH
1706: LD_EXP 26
1710: PUSH
1711: CALL_OW 44
1715: ADD
1716: ST_TO_ADDR
// end ;
1717: GO 1675
1719: POP
1720: POP
// end ; if others then
1721: LD_EXP 26
1725: IFFALSE 1743
// tmp := tmp ^ others ;
1727: LD_ADDR_VAR 0 5
1731: PUSH
1732: LD_VAR 0 5
1736: PUSH
1737: LD_EXP 26
1741: ADD
1742: ST_TO_ADDR
// points := [ [ 28 , 49 ] , [ 33 , 54 ] , [ 38 , 56 ] ] ;
1743: LD_ADDR_VAR 0 3
1747: PUSH
1748: LD_INT 28
1750: PUSH
1751: LD_INT 49
1753: PUSH
1754: EMPTY
1755: LIST
1756: LIST
1757: PUSH
1758: LD_INT 33
1760: PUSH
1761: LD_INT 54
1763: PUSH
1764: EMPTY
1765: LIST
1766: LIST
1767: PUSH
1768: LD_INT 38
1770: PUSH
1771: LD_INT 56
1773: PUSH
1774: EMPTY
1775: LIST
1776: LIST
1777: PUSH
1778: EMPTY
1779: LIST
1780: LIST
1781: LIST
1782: ST_TO_ADDR
// veh := PrepareTank ( 1 , 1 , us_medium_wheeled , engine_solar , control_manual , us_cargo_bay , 80 ) ;
1783: LD_ADDR_VAR 0 4
1787: PUSH
1788: LD_INT 1
1790: PPUSH
1791: LD_INT 1
1793: PPUSH
1794: LD_INT 2
1796: PPUSH
1797: LD_INT 2
1799: PPUSH
1800: LD_INT 1
1802: PPUSH
1803: LD_INT 12
1805: PPUSH
1806: LD_INT 80
1808: PPUSH
1809: CALL 431 0 7
1813: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
1814: LD_VAR 0 4
1818: PPUSH
1819: LD_INT 1
1821: PPUSH
1822: CALL_OW 233
// PlaceUnitXY ( veh , points [ 1 ] [ 1 ] , points [ 1 ] [ 2 ] , false ) ;
1826: LD_VAR 0 4
1830: PPUSH
1831: LD_VAR 0 3
1835: PUSH
1836: LD_INT 1
1838: ARRAY
1839: PUSH
1840: LD_INT 1
1842: ARRAY
1843: PPUSH
1844: LD_VAR 0 3
1848: PUSH
1849: LD_INT 1
1851: ARRAY
1852: PUSH
1853: LD_INT 2
1855: ARRAY
1856: PPUSH
1857: LD_INT 0
1859: PPUSH
1860: CALL_OW 48
// SetCargo ( veh , mat_cans , 100 ) ;
1864: LD_VAR 0 4
1868: PPUSH
1869: LD_INT 1
1871: PPUSH
1872: LD_INT 100
1874: PPUSH
1875: CALL_OW 290
// PlaceHumanInUnit ( others [ 1 ] , veh ) ;
1879: LD_EXP 26
1883: PUSH
1884: LD_INT 1
1886: ARRAY
1887: PPUSH
1888: LD_VAR 0 4
1892: PPUSH
1893: CALL_OW 52
// veh := PrepareTank ( 1 , 1 , us_light_wheeled , engine_solar , control_manual , us_machine_gun , 80 ) ;
1897: LD_ADDR_VAR 0 4
1901: PUSH
1902: LD_INT 1
1904: PPUSH
1905: LD_INT 1
1907: PPUSH
1908: LD_INT 1
1910: PPUSH
1911: LD_INT 2
1913: PPUSH
1914: LD_INT 1
1916: PPUSH
1917: LD_INT 2
1919: PPUSH
1920: LD_INT 80
1922: PPUSH
1923: CALL 431 0 7
1927: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
1928: LD_VAR 0 4
1932: PPUSH
1933: LD_INT 1
1935: PPUSH
1936: CALL_OW 233
// PlaceUnitXY ( veh , points [ 2 ] [ 1 ] , points [ 2 ] [ 2 ] , false ) ;
1940: LD_VAR 0 4
1944: PPUSH
1945: LD_VAR 0 3
1949: PUSH
1950: LD_INT 2
1952: ARRAY
1953: PUSH
1954: LD_INT 1
1956: ARRAY
1957: PPUSH
1958: LD_VAR 0 3
1962: PUSH
1963: LD_INT 2
1965: ARRAY
1966: PUSH
1967: LD_INT 2
1969: ARRAY
1970: PPUSH
1971: LD_INT 0
1973: PPUSH
1974: CALL_OW 48
// PlaceHumanInUnit ( Gladstone , veh ) ;
1978: LD_EXP 17
1982: PPUSH
1983: LD_VAR 0 4
1987: PPUSH
1988: CALL_OW 52
// veh := PrepareTank ( 1 , 1 , us_light_wheeled , engine_solar , control_manual , us_light_gun , 80 ) ;
1992: LD_ADDR_VAR 0 4
1996: PUSH
1997: LD_INT 1
1999: PPUSH
2000: LD_INT 1
2002: PPUSH
2003: LD_INT 1
2005: PPUSH
2006: LD_INT 2
2008: PPUSH
2009: LD_INT 1
2011: PPUSH
2012: LD_INT 3
2014: PPUSH
2015: LD_INT 80
2017: PPUSH
2018: CALL 431 0 7
2022: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
2023: LD_VAR 0 4
2027: PPUSH
2028: LD_INT 1
2030: PPUSH
2031: CALL_OW 233
// PlaceUnitXY ( veh , points [ 3 ] [ 1 ] , points [ 3 ] [ 2 ] , false ) ;
2035: LD_VAR 0 4
2039: PPUSH
2040: LD_VAR 0 3
2044: PUSH
2045: LD_INT 3
2047: ARRAY
2048: PUSH
2049: LD_INT 1
2051: ARRAY
2052: PPUSH
2053: LD_VAR 0 3
2057: PUSH
2058: LD_INT 3
2060: ARRAY
2061: PUSH
2062: LD_INT 2
2064: ARRAY
2065: PPUSH
2066: LD_INT 0
2068: PPUSH
2069: CALL_OW 48
// PlaceHumanInUnit ( JMM , veh ) ;
2073: LD_EXP 16
2077: PPUSH
2078: LD_VAR 0 4
2082: PPUSH
2083: CALL_OW 52
// for i in tmp diff others [ 1 ] do
2087: LD_ADDR_VAR 0 2
2091: PUSH
2092: LD_VAR 0 5
2096: PUSH
2097: LD_EXP 26
2101: PUSH
2102: LD_INT 1
2104: ARRAY
2105: DIFF
2106: PUSH
2107: FOR_IN
2108: IFFALSE 2127
// PlaceUnitArea ( i , startArea , false ) ;
2110: LD_VAR 0 2
2114: PPUSH
2115: LD_INT 5
2117: PPUSH
2118: LD_INT 0
2120: PPUSH
2121: CALL_OW 49
2125: GO 2107
2127: POP
2128: POP
// end ; end_of_file
2129: LD_VAR 0 1
2133: RET
// export function Action ; var m ; begin
2134: LD_INT 0
2136: PPUSH
2137: PPUSH
// InGameOn ;
2138: CALL_OW 8
// CenterNowOnXY ( 28 , 51 ) ;
2142: LD_INT 28
2144: PPUSH
2145: LD_INT 51
2147: PPUSH
2148: CALL_OW 86
// Wait ( 3 ) ;
2152: LD_INT 3
2154: PPUSH
2155: CALL_OW 67
// Say ( JMM , D1d-JMM-1a ) ;
2159: LD_EXP 16
2163: PPUSH
2164: LD_STRING D1d-JMM-1a
2166: PPUSH
2167: CALL_OW 88
// SayRadio ( Harrison , D1d-Har-1 ) ;
2171: LD_EXP 18
2175: PPUSH
2176: LD_STRING D1d-Har-1
2178: PPUSH
2179: CALL_OW 94
// InGameOff ;
2183: CALL_OW 9
// SaveForQuickRestart ;
2187: CALL_OW 22
// ChangeMissionObjectives ( M1 ) ;
2191: LD_STRING M1
2193: PPUSH
2194: CALL_OW 337
// Wait ( 0 0$2 ) ;
2198: LD_INT 70
2200: PPUSH
2201: CALL_OW 67
// Say ( JMM , D2-JMM-1 ) ;
2205: LD_EXP 16
2209: PPUSH
2210: LD_STRING D2-JMM-1
2212: PPUSH
2213: CALL_OW 88
// Say ( Gladstone , D2-Glad-1 ) ;
2217: LD_EXP 17
2221: PPUSH
2222: LD_STRING D2-Glad-1
2224: PPUSH
2225: CALL_OW 88
// Say ( JMM , D2-JMM-2 ) ;
2229: LD_EXP 16
2233: PPUSH
2234: LD_STRING D2-JMM-2
2236: PPUSH
2237: CALL_OW 88
// Say ( Gladstone , D2-Glad-2 ) ;
2241: LD_EXP 17
2245: PPUSH
2246: LD_STRING D2-Glad-2
2248: PPUSH
2249: CALL_OW 88
// Say ( JMM , D2-JMM-3 ) ;
2253: LD_EXP 16
2257: PPUSH
2258: LD_STRING D2-JMM-3
2260: PPUSH
2261: CALL_OW 88
// Wait ( rand ( 0 0$30 , 1 1$00 ) ) ;
2265: LD_INT 1050
2267: PPUSH
2268: LD_INT 2100
2270: PPUSH
2271: CALL_OW 12
2275: PPUSH
2276: CALL_OW 67
// SetWeather ( 1 , 570 , 350 ) ;
2280: LD_INT 1
2282: PPUSH
2283: LD_INT 570
2285: PPUSH
2286: LD_INT 350
2288: PPUSH
2289: CALL_OW 550
// Wait ( rand ( 3 3$00 , 5 5$00 ) ) ;
2293: LD_INT 6300
2295: PPUSH
2296: LD_INT 10500
2298: PPUSH
2299: CALL_OW 12
2303: PPUSH
2304: CALL_OW 67
// SetWeather ( 0 , 570 , 350 ) ;
2308: LD_INT 0
2310: PPUSH
2311: LD_INT 570
2313: PPUSH
2314: LD_INT 350
2316: PPUSH
2317: CALL_OW 550
// end ;
2321: LD_VAR 0 1
2325: RET
// every 0 0$01 trigger FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_not , [ f_constructed ] ] , [ f_btype , b_depot ] ] ] ) and not deltaBuilded do
2326: LD_INT 22
2328: PUSH
2329: LD_INT 1
2331: PUSH
2332: EMPTY
2333: LIST
2334: LIST
2335: PUSH
2336: LD_INT 3
2338: PUSH
2339: LD_INT 57
2341: PUSH
2342: EMPTY
2343: LIST
2344: PUSH
2345: EMPTY
2346: LIST
2347: LIST
2348: PUSH
2349: LD_INT 30
2351: PUSH
2352: LD_INT 0
2354: PUSH
2355: EMPTY
2356: LIST
2357: LIST
2358: PUSH
2359: EMPTY
2360: LIST
2361: LIST
2362: LIST
2363: PUSH
2364: EMPTY
2365: LIST
2366: PPUSH
2367: CALL_OW 69
2371: PUSH
2372: LD_EXP 4
2376: NOT
2377: AND
2378: IFFALSE 2391
2380: GO 2382
2382: DISABLE
// begin deltaBuilded := true ;
2383: LD_ADDR_EXP 4
2387: PUSH
2388: LD_INT 1
2390: ST_TO_ADDR
// end ;
2391: END
// every 0 0$01 trigger not Delta and deltaBuilded and FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_not , [ f_constructed ] ] , [ f_btype , b_depot ] ] ] ) do
2392: LD_EXP 6
2396: NOT
2397: PUSH
2398: LD_EXP 4
2402: AND
2403: PUSH
2404: LD_INT 22
2406: PUSH
2407: LD_INT 1
2409: PUSH
2410: EMPTY
2411: LIST
2412: LIST
2413: PUSH
2414: LD_INT 3
2416: PUSH
2417: LD_INT 57
2419: PUSH
2420: EMPTY
2421: LIST
2422: PUSH
2423: EMPTY
2424: LIST
2425: LIST
2426: PUSH
2427: LD_INT 30
2429: PUSH
2430: LD_INT 0
2432: PUSH
2433: EMPTY
2434: LIST
2435: LIST
2436: PUSH
2437: EMPTY
2438: LIST
2439: LIST
2440: LIST
2441: PUSH
2442: EMPTY
2443: LIST
2444: PPUSH
2445: CALL_OW 69
2449: AND
2450: IFFALSE 2536
2452: GO 2454
2454: DISABLE
// begin enable ;
2455: ENABLE
// SetRestrict ( b_depot , 1 , state_disabled ) ;
2456: LD_INT 0
2458: PPUSH
2459: LD_INT 1
2461: PPUSH
2462: LD_INT 0
2464: PPUSH
2465: CALL_OW 324
// Delta := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_not , [ f_constructed ] ] , [ f_btype , b_depot ] ] ] ) [ 1 ] ;
2469: LD_ADDR_EXP 6
2473: PUSH
2474: LD_INT 22
2476: PUSH
2477: LD_INT 1
2479: PUSH
2480: EMPTY
2481: LIST
2482: LIST
2483: PUSH
2484: LD_INT 3
2486: PUSH
2487: LD_INT 57
2489: PUSH
2490: EMPTY
2491: LIST
2492: PUSH
2493: EMPTY
2494: LIST
2495: LIST
2496: PUSH
2497: LD_INT 30
2499: PUSH
2500: LD_INT 0
2502: PUSH
2503: EMPTY
2504: LIST
2505: LIST
2506: PUSH
2507: EMPTY
2508: LIST
2509: LIST
2510: LIST
2511: PUSH
2512: EMPTY
2513: LIST
2514: PPUSH
2515: CALL_OW 69
2519: PUSH
2520: LD_INT 1
2522: ARRAY
2523: ST_TO_ADDR
// SetBName ( Delta , Delta ) ;
2524: LD_EXP 6
2528: PPUSH
2529: LD_STRING Delta
2531: PPUSH
2532: CALL_OW 500
// end ;
2536: END
// every 0 0$2 trigger GetTech ( tech_ApeLang , 1 ) = state_researched and IsOk ( Gladstone ) do
2537: LD_INT 1
2539: PPUSH
2540: LD_INT 1
2542: PPUSH
2543: CALL_OW 321
2547: PUSH
2548: LD_INT 2
2550: EQUAL
2551: PUSH
2552: LD_EXP 17
2556: PPUSH
2557: CALL_OW 302
2561: AND
2562: IFFALSE 2623
2564: GO 2566
2566: DISABLE
// begin DialogueOn ;
2567: CALL_OW 6
// Say ( Gladstone , D3-Glad-1 ) ;
2571: LD_EXP 17
2575: PPUSH
2576: LD_STRING D3-Glad-1
2578: PPUSH
2579: CALL_OW 88
// Say ( JMM , D3-JMM-1 ) ;
2583: LD_EXP 16
2587: PPUSH
2588: LD_STRING D3-JMM-1
2590: PPUSH
2591: CALL_OW 88
// Say ( Gladstone , D3-Glad-2 ) ;
2595: LD_EXP 17
2599: PPUSH
2600: LD_STRING D3-Glad-2
2602: PPUSH
2603: CALL_OW 88
// Say ( JMM , D3-JMM-2 ) ;
2607: LD_EXP 16
2611: PPUSH
2612: LD_STRING D3-JMM-2
2614: PPUSH
2615: CALL_OW 88
// DialogueOff ;
2619: CALL_OW 7
// end ;
2623: END
// every 0 0$1 trigger GetTech ( tech_ApePsych , 1 ) = state_researched do var sol ;
2624: LD_INT 2
2626: PPUSH
2627: LD_INT 1
2629: PPUSH
2630: CALL_OW 321
2634: PUSH
2635: LD_INT 2
2637: EQUAL
2638: IFFALSE 2815
2640: GO 2642
2642: DISABLE
2643: LD_INT 0
2645: PPUSH
// begin DialogueOn ;
2646: CALL_OW 6
// if Frank then
2650: LD_EXP 23
2654: IFFALSE 2668
// Say ( Frank , D8a-Frank-1 ) ;
2656: LD_EXP 23
2660: PPUSH
2661: LD_STRING D8a-Frank-1
2663: PPUSH
2664: CALL_OW 88
// sol := SayX ( UnitFilter ( others , [ f_sex , sex_male ] ) , D8a-Sol1-1 ) ;
2668: LD_ADDR_VAR 0 1
2672: PUSH
2673: LD_EXP 26
2677: PPUSH
2678: LD_INT 26
2680: PUSH
2681: LD_INT 1
2683: PUSH
2684: EMPTY
2685: LIST
2686: LIST
2687: PPUSH
2688: CALL_OW 72
2692: PPUSH
2693: LD_STRING D8a-Sol1-1
2695: PPUSH
2696: CALL 519 0 2
2700: ST_TO_ADDR
// if Denis and GetSide ( Denis ) = 1 then
2701: LD_EXP 19
2705: PUSH
2706: LD_EXP 19
2710: PPUSH
2711: CALL_OW 255
2715: PUSH
2716: LD_INT 1
2718: EQUAL
2719: AND
2720: IFFALSE 2734
// Say ( Denis , D8a-Den-1 ) ;
2722: LD_EXP 19
2726: PPUSH
2727: LD_STRING D8a-Den-1
2729: PPUSH
2730: CALL_OW 88
// if sol or Denis or Frank then
2734: LD_VAR 0 1
2738: PUSH
2739: LD_EXP 19
2743: OR
2744: PUSH
2745: LD_EXP 23
2749: OR
2750: IFFALSE 2811
// begin SayX ( UnitFilter ( others , [ [ f_class , 4 ] , [ f_sex , sex_male ] ] ) diff sol , D8a-Sci1-1 ) ;
2752: LD_EXP 26
2756: PPUSH
2757: LD_INT 25
2759: PUSH
2760: LD_INT 4
2762: PUSH
2763: EMPTY
2764: LIST
2765: LIST
2766: PUSH
2767: LD_INT 26
2769: PUSH
2770: LD_INT 1
2772: PUSH
2773: EMPTY
2774: LIST
2775: LIST
2776: PUSH
2777: EMPTY
2778: LIST
2779: LIST
2780: PPUSH
2781: CALL_OW 72
2785: PUSH
2786: LD_VAR 0 1
2790: DIFF
2791: PPUSH
2792: LD_STRING D8a-Sci1-1
2794: PPUSH
2795: CALL 519 0 2
// Say ( JMM , D8a-JMM-1 ) ;
2799: LD_EXP 16
2803: PPUSH
2804: LD_STRING D8a-JMM-1
2806: PPUSH
2807: CALL_OW 88
// end ; DialogueOff ;
2811: CALL_OW 7
// end ;
2815: PPOPN 1
2817: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_apeman_engineer ] ] ) do
2818: LD_INT 22
2820: PUSH
2821: LD_INT 1
2823: PUSH
2824: EMPTY
2825: LIST
2826: LIST
2827: PUSH
2828: LD_INT 25
2830: PUSH
2831: LD_INT 16
2833: PUSH
2834: EMPTY
2835: LIST
2836: LIST
2837: PUSH
2838: EMPTY
2839: LIST
2840: LIST
2841: PPUSH
2842: CALL_OW 69
2846: IFFALSE 2905
2848: GO 2850
2850: DISABLE
// begin ChangeMissionObjectives ( M1a ) ;
2851: LD_STRING M1a
2853: PPUSH
2854: CALL_OW 337
// case Query ( Q2 ) of 1 :
2858: LD_STRING Q2
2860: PPUSH
2861: CALL_OW 97
2865: PUSH
2866: LD_INT 1
2868: DOUBLE
2869: EQUAL
2870: IFTRUE 2874
2872: GO 2885
2874: POP
// end_mission := true ; 2 :
2875: LD_ADDR_EXP 14
2879: PUSH
2880: LD_INT 1
2882: ST_TO_ADDR
2883: GO 2905
2885: LD_INT 2
2887: DOUBLE
2888: EQUAL
2889: IFTRUE 2893
2891: GO 2904
2893: POP
// end_the_mission_allowed := true ; end ;
2894: LD_ADDR_OWVAR 57
2898: PUSH
2899: LD_INT 1
2901: ST_TO_ADDR
2902: GO 2905
2904: POP
// end ;
2905: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) and Delta do
2906: LD_INT 22
2908: PUSH
2909: LD_INT 1
2911: PUSH
2912: EMPTY
2913: LIST
2914: LIST
2915: PUSH
2916: LD_INT 2
2918: PUSH
2919: LD_INT 30
2921: PUSH
2922: LD_INT 6
2924: PUSH
2925: EMPTY
2926: LIST
2927: LIST
2928: PUSH
2929: LD_INT 30
2931: PUSH
2932: LD_INT 7
2934: PUSH
2935: EMPTY
2936: LIST
2937: LIST
2938: PUSH
2939: EMPTY
2940: LIST
2941: LIST
2942: LIST
2943: PUSH
2944: EMPTY
2945: LIST
2946: LIST
2947: PPUSH
2948: CALL_OW 69
2952: PUSH
2953: LD_INT 22
2955: PUSH
2956: LD_INT 1
2958: PUSH
2959: EMPTY
2960: LIST
2961: LIST
2962: PUSH
2963: LD_INT 2
2965: PUSH
2966: LD_INT 30
2968: PUSH
2969: LD_INT 2
2971: PUSH
2972: EMPTY
2973: LIST
2974: LIST
2975: PUSH
2976: LD_INT 30
2978: PUSH
2979: LD_INT 3
2981: PUSH
2982: EMPTY
2983: LIST
2984: LIST
2985: PUSH
2986: EMPTY
2987: LIST
2988: LIST
2989: LIST
2990: PUSH
2991: EMPTY
2992: LIST
2993: LIST
2994: PPUSH
2995: CALL_OW 69
2999: AND
3000: PUSH
3001: LD_EXP 6
3005: AND
3006: IFFALSE 3521
3008: GO 3010
3010: DISABLE
// begin Wait ( rand ( 0 0$30 , 0 0$50 ) ) ;
3011: LD_INT 1050
3013: PPUSH
3014: LD_INT 1750
3016: PPUSH
3017: CALL_OW 12
3021: PPUSH
3022: CALL_OW 67
// PlaceUnitArea ( Denis , [ denisArea1 , denisArea2 , denisArea3 , denisArea4 ] [ Difficulty ] , false ) ;
3026: LD_EXP 19
3030: PPUSH
3031: LD_INT 6
3033: PUSH
3034: LD_INT 9
3036: PUSH
3037: LD_INT 10
3039: PUSH
3040: LD_INT 16
3042: PUSH
3043: EMPTY
3044: LIST
3045: LIST
3046: LIST
3047: LIST
3048: PUSH
3049: LD_OWVAR 67
3053: ARRAY
3054: PPUSH
3055: LD_INT 0
3057: PPUSH
3058: CALL_OW 49
// ComHold ( Denis ) ;
3062: LD_EXP 19
3066: PPUSH
3067: CALL_OW 140
// InGameOn ;
3071: CALL_OW 8
// DialogueOn ;
3075: CALL_OW 6
// if Delta then
3079: LD_EXP 6
3083: IFFALSE 3096
// CenterNowOnUnits ( Delta ) else
3085: LD_EXP 6
3089: PPUSH
3090: CALL_OW 87
3094: GO 3105
// CenterNowOnUnits ( JMM ) ;
3096: LD_EXP 16
3100: PPUSH
3101: CALL_OW 87
// SayRadio ( Denis , DD-Den-1 ) ;
3105: LD_EXP 19
3109: PPUSH
3110: LD_STRING DD-Den-1
3112: PPUSH
3113: CALL_OW 94
// Say ( JMM , DD-JMM-1 ) ;
3117: LD_EXP 16
3121: PPUSH
3122: LD_STRING DD-JMM-1
3124: PPUSH
3125: CALL_OW 88
// SayRadio ( Denis , DD-Den-2 ) ;
3129: LD_EXP 19
3133: PPUSH
3134: LD_STRING DD-Den-2
3136: PPUSH
3137: CALL_OW 94
// Wait ( 3 ) ;
3141: LD_INT 3
3143: PPUSH
3144: CALL_OW 67
// DialogueOff ;
3148: CALL_OW 7
// InGameOff ;
3152: CALL_OW 9
// if Difficulty = 1 then
3156: LD_OWVAR 67
3160: PUSH
3161: LD_INT 1
3163: EQUAL
3164: IFFALSE 3240
// begin PlaceSeeing ( GetX ( Denis ) , GetY ( Denis ) , 1 , - 12 ) ;
3166: LD_EXP 19
3170: PPUSH
3171: CALL_OW 250
3175: PPUSH
3176: LD_EXP 19
3180: PPUSH
3181: CALL_OW 251
3185: PPUSH
3186: LD_INT 1
3188: PPUSH
3189: LD_INT 12
3191: NEG
3192: PPUSH
3193: CALL_OW 330
// CenterNowOnUnits ( Denis ) ;
3197: LD_EXP 19
3201: PPUSH
3202: CALL_OW 87
// wait ( 0 0$5 ) ;
3206: LD_INT 175
3208: PPUSH
3209: CALL_OW 67
// RemoveSeeing ( GetX ( Denis ) , GetY ( Denis ) , 1 ) ;
3213: LD_EXP 19
3217: PPUSH
3218: CALL_OW 250
3222: PPUSH
3223: LD_EXP 19
3227: PPUSH
3228: CALL_OW 251
3232: PPUSH
3233: LD_INT 1
3235: PPUSH
3236: CALL_OW 331
// end ; repeat wait ( 0 0$01 ) ;
3240: LD_INT 35
3242: PPUSH
3243: CALL_OW 67
// until See ( 1 , Denis ) or IsDead ( Denis ) ;
3247: LD_INT 1
3249: PPUSH
3250: LD_EXP 19
3254: PPUSH
3255: CALL_OW 292
3259: PUSH
3260: LD_EXP 19
3264: PPUSH
3265: CALL_OW 301
3269: OR
3270: IFFALSE 3240
// if IsDead ( Denis ) then
3272: LD_EXP 19
3276: PPUSH
3277: CALL_OW 301
3281: IFFALSE 3285
// exit ;
3283: GO 3521
// SetSide ( Denis , 1 ) ;
3285: LD_EXP 19
3289: PPUSH
3290: LD_INT 1
3292: PPUSH
3293: CALL_OW 235
// Say ( Denis , DD-Den-2a ) ;
3297: LD_EXP 19
3301: PPUSH
3302: LD_STRING DD-Den-2a
3304: PPUSH
3305: CALL_OW 88
// repeat wait ( 0 0$01 ) ;
3309: LD_INT 35
3311: PPUSH
3312: CALL_OW 67
// until GetBType ( IsInUnit ( Denis ) ) in [ b_lab , b_lab_half , b_lab_full ] or IsDead ( Denis ) ;
3316: LD_EXP 19
3320: PPUSH
3321: CALL_OW 310
3325: PPUSH
3326: CALL_OW 266
3330: PUSH
3331: LD_INT 6
3333: PUSH
3334: LD_INT 7
3336: PUSH
3337: LD_INT 8
3339: PUSH
3340: EMPTY
3341: LIST
3342: LIST
3343: LIST
3344: IN
3345: PUSH
3346: LD_EXP 19
3350: PPUSH
3351: CALL_OW 301
3355: OR
3356: IFFALSE 3309
// if IsDead ( Denis ) then
3358: LD_EXP 19
3362: PPUSH
3363: CALL_OW 301
3367: IFFALSE 3371
// exit ;
3369: GO 3521
// Say ( Denis , DD-Den-2b ) ;
3371: LD_EXP 19
3375: PPUSH
3376: LD_STRING DD-Den-2b
3378: PPUSH
3379: CALL_OW 88
// ComChangeProfession ( Denis , 4 ) ;
3383: LD_EXP 19
3387: PPUSH
3388: LD_INT 4
3390: PPUSH
3391: CALL_OW 123
// Wait ( 0 0$02 ) ;
3395: LD_INT 70
3397: PPUSH
3398: CALL_OW 67
// DialogueOn ;
3402: CALL_OW 6
// CenterNowOnUnits ( Denis ) ;
3406: LD_EXP 19
3410: PPUSH
3411: CALL_OW 87
// Say ( JMM , D4-JMM-1 ) ;
3415: LD_EXP 16
3419: PPUSH
3420: LD_STRING D4-JMM-1
3422: PPUSH
3423: CALL_OW 88
// Say ( Denis , D4-Den-1 ) ;
3427: LD_EXP 19
3431: PPUSH
3432: LD_STRING D4-Den-1
3434: PPUSH
3435: CALL_OW 88
// Say ( JMM , D4-JMM-2 ) ;
3439: LD_EXP 16
3443: PPUSH
3444: LD_STRING D4-JMM-2
3446: PPUSH
3447: CALL_OW 88
// Say ( Denis , D4-Den-2 ) ;
3451: LD_EXP 19
3455: PPUSH
3456: LD_STRING D4-Den-2
3458: PPUSH
3459: CALL_OW 88
// DialogueOff ;
3463: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
3467: LD_STRING M2
3469: PPUSH
3470: CALL_OW 337
// radar_allowed := true ;
3474: LD_ADDR_EXP 7
3478: PUSH
3479: LD_INT 1
3481: ST_TO_ADDR
// SetTech ( tech_radar , 1 , state_enabled ) ;
3482: LD_INT 6
3484: PPUSH
3485: LD_INT 1
3487: PPUSH
3488: LD_INT 1
3490: PPUSH
3491: CALL_OW 322
// SetRestrict ( b_lab_opto , 1 , state_enabled ) ;
3495: LD_INT 15
3497: PPUSH
3498: LD_INT 1
3500: PPUSH
3501: LD_INT 1
3503: PPUSH
3504: CALL_OW 324
// SetRestrict ( b_ext_radar , 1 , state_enabled ) ;
3508: LD_INT 20
3510: PPUSH
3511: LD_INT 1
3513: PPUSH
3514: LD_INT 1
3516: PPUSH
3517: CALL_OW 324
// end ;
3521: END
// every 0 0$1 trigger arab_spotted do var sol , sol2 ;
3522: LD_EXP 13
3526: IFFALSE 4149
3528: GO 3530
3530: DISABLE
3531: LD_INT 0
3533: PPUSH
3534: PPUSH
// begin sol := SayX ( UnitFilter ( others , [ f_sex , sex_male ] ) , D5-Sol1-1 ) ;
3535: LD_ADDR_VAR 0 1
3539: PUSH
3540: LD_EXP 26
3544: PPUSH
3545: LD_INT 26
3547: PUSH
3548: LD_INT 1
3550: PUSH
3551: EMPTY
3552: LIST
3553: LIST
3554: PPUSH
3555: CALL_OW 72
3559: PPUSH
3560: LD_STRING D5-Sol1-1
3562: PPUSH
3563: CALL 519 0 2
3567: ST_TO_ADDR
// if not sol then
3568: LD_VAR 0 1
3572: NOT
3573: IFFALSE 3577
// exit ;
3575: GO 4149
// repeat wait ( 0 0$01 ) ;
3577: LD_INT 35
3579: PPUSH
3580: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) = 0 ;
3584: LD_INT 22
3586: PUSH
3587: LD_INT 2
3589: PUSH
3590: EMPTY
3591: LIST
3592: LIST
3593: PUSH
3594: LD_INT 21
3596: PUSH
3597: LD_INT 1
3599: PUSH
3600: EMPTY
3601: LIST
3602: LIST
3603: PUSH
3604: EMPTY
3605: LIST
3606: LIST
3607: PPUSH
3608: CALL_OW 69
3612: PUSH
3613: LD_INT 0
3615: EQUAL
3616: IFFALSE 3577
// if IsOk ( sol ) then
3618: LD_VAR 0 1
3622: PPUSH
3623: CALL_OW 302
3627: IFFALSE 3647
// begin sol2 := others diff sol ;
3629: LD_ADDR_VAR 0 2
3633: PUSH
3634: LD_EXP 26
3638: PUSH
3639: LD_VAR 0 1
3643: DIFF
3644: ST_TO_ADDR
// end else
3645: GO 3649
// exit ;
3647: GO 4149
// if not Lisa and not sol2 then
3649: LD_EXP 22
3653: NOT
3654: PUSH
3655: LD_VAR 0 2
3659: NOT
3660: AND
3661: IFFALSE 3665
// exit ;
3663: GO 4149
// DialogueOn ;
3665: CALL_OW 6
// if Lisa then
3669: LD_EXP 22
3673: IFFALSE 3689
// Say ( Lisa , D5a-Lisa-1 ) else
3675: LD_EXP 22
3679: PPUSH
3680: LD_STRING D5a-Lisa-1
3682: PPUSH
3683: CALL_OW 88
3687: GO 3764
// if sol2 then
3689: LD_VAR 0 2
3693: IFFALSE 3764
// case GetSex ( sol2 [ 1 ] ) of sex_male :
3695: LD_VAR 0 2
3699: PUSH
3700: LD_INT 1
3702: ARRAY
3703: PPUSH
3704: CALL_OW 258
3708: PUSH
3709: LD_INT 1
3711: DOUBLE
3712: EQUAL
3713: IFTRUE 3717
3715: GO 3736
3717: POP
// Say ( sol2 [ 1 ] , D5-Sol2-1 ) ; sex_female :
3718: LD_VAR 0 2
3722: PUSH
3723: LD_INT 1
3725: ARRAY
3726: PPUSH
3727: LD_STRING D5-Sol2-1
3729: PPUSH
3730: CALL_OW 88
3734: GO 3764
3736: LD_INT 2
3738: DOUBLE
3739: EQUAL
3740: IFTRUE 3744
3742: GO 3763
3744: POP
// Say ( sol2 [ 1 ] , D5-FSol2-1 ) ; end ;
3745: LD_VAR 0 2
3749: PUSH
3750: LD_INT 1
3752: ARRAY
3753: PPUSH
3754: LD_STRING D5-FSol2-1
3756: PPUSH
3757: CALL_OW 88
3761: GO 3764
3763: POP
// Say ( sol , D5-Sol1-2 ) ;
3764: LD_VAR 0 1
3768: PPUSH
3769: LD_STRING D5-Sol1-2
3771: PPUSH
3772: CALL_OW 88
// if Lisa then
3776: LD_EXP 22
3780: IFFALSE 3796
// Say ( Lisa , D5a-Lisa-2 ) else
3782: LD_EXP 22
3786: PPUSH
3787: LD_STRING D5a-Lisa-2
3789: PPUSH
3790: CALL_OW 88
3794: GO 3871
// if sol2 then
3796: LD_VAR 0 2
3800: IFFALSE 3871
// case GetSex ( sol2 [ 1 ] ) of sex_male :
3802: LD_VAR 0 2
3806: PUSH
3807: LD_INT 1
3809: ARRAY
3810: PPUSH
3811: CALL_OW 258
3815: PUSH
3816: LD_INT 1
3818: DOUBLE
3819: EQUAL
3820: IFTRUE 3824
3822: GO 3843
3824: POP
// Say ( sol2 [ 1 ] , D5-Sol2-2 ) ; sex_female :
3825: LD_VAR 0 2
3829: PUSH
3830: LD_INT 1
3832: ARRAY
3833: PPUSH
3834: LD_STRING D5-Sol2-2
3836: PPUSH
3837: CALL_OW 88
3841: GO 3871
3843: LD_INT 2
3845: DOUBLE
3846: EQUAL
3847: IFTRUE 3851
3849: GO 3870
3851: POP
// Say ( sol2 [ 1 ] , D5-FSol2-2 ) ; end ;
3852: LD_VAR 0 2
3856: PUSH
3857: LD_INT 1
3859: ARRAY
3860: PPUSH
3861: LD_STRING D5-FSol2-2
3863: PPUSH
3864: CALL_OW 88
3868: GO 3871
3870: POP
// Say ( sol , D5a-Sol1-3 ) ;
3871: LD_VAR 0 1
3875: PPUSH
3876: LD_STRING D5a-Sol1-3
3878: PPUSH
3879: CALL_OW 88
// if Lisa then
3883: LD_EXP 22
3887: IFFALSE 3901
// Say ( Lisa , D5a-Lisa-3 ) ;
3889: LD_EXP 22
3893: PPUSH
3894: LD_STRING D5a-Lisa-3
3896: PPUSH
3897: CALL_OW 88
// if not sol2 then
3901: LD_VAR 0 2
3905: NOT
3906: IFFALSE 3914
// begin DialogueOff ;
3908: CALL_OW 7
// exit ;
3912: GO 4149
// end ; case GetSex ( sol2 [ 1 ] ) of sex_male :
3914: LD_VAR 0 2
3918: PUSH
3919: LD_INT 1
3921: ARRAY
3922: PPUSH
3923: CALL_OW 258
3927: PUSH
3928: LD_INT 1
3930: DOUBLE
3931: EQUAL
3932: IFTRUE 3936
3934: GO 3955
3936: POP
// Say ( sol2 [ 1 ] , D5-Sol2-3 ) ; sex_female :
3937: LD_VAR 0 2
3941: PUSH
3942: LD_INT 1
3944: ARRAY
3945: PPUSH
3946: LD_STRING D5-Sol2-3
3948: PPUSH
3949: CALL_OW 88
3953: GO 3983
3955: LD_INT 2
3957: DOUBLE
3958: EQUAL
3959: IFTRUE 3963
3961: GO 3982
3963: POP
// Say ( sol2 [ 1 ] , D5-FSol2-3 ) ; end ;
3964: LD_VAR 0 2
3968: PUSH
3969: LD_INT 1
3971: ARRAY
3972: PPUSH
3973: LD_STRING D5-FSol2-3
3975: PPUSH
3976: CALL_OW 88
3980: GO 3983
3982: POP
// Say ( sol , D5-Sol1-4 ) ;
3983: LD_VAR 0 1
3987: PPUSH
3988: LD_STRING D5-Sol1-4
3990: PPUSH
3991: CALL_OW 88
// case GetSex ( sol2 [ 1 ] ) of sex_male :
3995: LD_VAR 0 2
3999: PUSH
4000: LD_INT 1
4002: ARRAY
4003: PPUSH
4004: CALL_OW 258
4008: PUSH
4009: LD_INT 1
4011: DOUBLE
4012: EQUAL
4013: IFTRUE 4017
4015: GO 4036
4017: POP
// Say ( sol2 [ 1 ] , D5-Sol2-4 ) ; sex_female :
4018: LD_VAR 0 2
4022: PUSH
4023: LD_INT 1
4025: ARRAY
4026: PPUSH
4027: LD_STRING D5-Sol2-4
4029: PPUSH
4030: CALL_OW 88
4034: GO 4064
4036: LD_INT 2
4038: DOUBLE
4039: EQUAL
4040: IFTRUE 4044
4042: GO 4063
4044: POP
// Say ( sol2 [ 1 ] , D5-FSol2-4 ) ; end ;
4045: LD_VAR 0 2
4049: PUSH
4050: LD_INT 1
4052: ARRAY
4053: PPUSH
4054: LD_STRING D5-FSol2-4
4056: PPUSH
4057: CALL_OW 88
4061: GO 4064
4063: POP
// Say ( sol , D5-Sol1-5 ) ;
4064: LD_VAR 0 1
4068: PPUSH
4069: LD_STRING D5-Sol1-5
4071: PPUSH
4072: CALL_OW 88
// case GetSex ( sol2 [ 1 ] ) of sex_male :
4076: LD_VAR 0 2
4080: PUSH
4081: LD_INT 1
4083: ARRAY
4084: PPUSH
4085: CALL_OW 258
4089: PUSH
4090: LD_INT 1
4092: DOUBLE
4093: EQUAL
4094: IFTRUE 4098
4096: GO 4117
4098: POP
// Say ( sol2 [ 1 ] , D5-Sol2-5 ) ; sex_female :
4099: LD_VAR 0 2
4103: PUSH
4104: LD_INT 1
4106: ARRAY
4107: PPUSH
4108: LD_STRING D5-Sol2-5
4110: PPUSH
4111: CALL_OW 88
4115: GO 4145
4117: LD_INT 2
4119: DOUBLE
4120: EQUAL
4121: IFTRUE 4125
4123: GO 4144
4125: POP
// Say ( sol2 [ 1 ] , D5-FSol2-5 ) ; end ;
4126: LD_VAR 0 2
4130: PUSH
4131: LD_INT 1
4133: ARRAY
4134: PPUSH
4135: LD_STRING D5-FSol2-5
4137: PPUSH
4138: CALL_OW 88
4142: GO 4145
4144: POP
// DialogueOff ;
4145: CALL_OW 7
// end ;
4149: PPOPN 2
4151: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_apeman_engineer ] ] ) >= 5 do
4152: LD_INT 22
4154: PUSH
4155: LD_INT 1
4157: PUSH
4158: EMPTY
4159: LIST
4160: LIST
4161: PUSH
4162: LD_INT 25
4164: PUSH
4165: LD_INT 16
4167: PUSH
4168: EMPTY
4169: LIST
4170: LIST
4171: PUSH
4172: EMPTY
4173: LIST
4174: LIST
4175: PPUSH
4176: CALL_OW 69
4180: PUSH
4181: LD_INT 5
4183: GREATEREQUAL
4184: IFFALSE 4204
4186: GO 4188
4188: DISABLE
// begin ChangeMissionObjectives ( M1b ) ;
4189: LD_STRING M1b
4191: PPUSH
4192: CALL_OW 337
// apeman_army := true ;
4196: LD_ADDR_EXP 9
4200: PUSH
4201: LD_INT 1
4203: ST_TO_ADDR
// end ;
4204: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] , [ f_constructed ] ] ) do
4205: LD_INT 22
4207: PUSH
4208: LD_INT 1
4210: PUSH
4211: EMPTY
4212: LIST
4213: LIST
4214: PUSH
4215: LD_INT 30
4217: PUSH
4218: LD_INT 3
4220: PUSH
4221: EMPTY
4222: LIST
4223: LIST
4224: PUSH
4225: LD_INT 57
4227: PUSH
4228: EMPTY
4229: LIST
4230: PUSH
4231: EMPTY
4232: LIST
4233: LIST
4234: LIST
4235: PPUSH
4236: CALL_OW 69
4240: IFFALSE 4252
4242: GO 4244
4244: DISABLE
// ChangeMissionObjectives ( M1c ) ;
4245: LD_STRING M1c
4247: PPUSH
4248: CALL_OW 337
4252: END
// every 0 0$1 trigger GetTech ( tech_radar , 1 ) = state_researched do
4253: LD_INT 6
4255: PPUSH
4256: LD_INT 1
4258: PPUSH
4259: CALL_OW 321
4263: PUSH
4264: LD_INT 2
4266: EQUAL
4267: IFFALSE 4287
4269: GO 4271
4271: DISABLE
// begin ChangeMissionObjectives ( M2a ) ;
4272: LD_STRING M2a
4274: PPUSH
4275: CALL_OW 337
// radar_researched := true ;
4279: LD_ADDR_EXP 10
4283: PUSH
4284: LD_INT 1
4286: ST_TO_ADDR
// end ;
4287: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_weapon , us_radar ] , [ f_bweapon , us_radar ] ] ] ) do
4288: LD_INT 22
4290: PUSH
4291: LD_INT 1
4293: PUSH
4294: EMPTY
4295: LIST
4296: LIST
4297: PUSH
4298: LD_INT 2
4300: PUSH
4301: LD_INT 34
4303: PUSH
4304: LD_INT 11
4306: PUSH
4307: EMPTY
4308: LIST
4309: LIST
4310: PUSH
4311: LD_INT 35
4313: PUSH
4314: LD_INT 11
4316: PUSH
4317: EMPTY
4318: LIST
4319: LIST
4320: PUSH
4321: EMPTY
4322: LIST
4323: LIST
4324: LIST
4325: PUSH
4326: EMPTY
4327: LIST
4328: LIST
4329: PPUSH
4330: CALL_OW 69
4334: IFFALSE 4354
4336: GO 4338
4338: DISABLE
// begin ChangeMissionObjectives ( M2b ) ;
4339: LD_STRING M2b
4341: PPUSH
4342: CALL_OW 337
// radar_builded := true ;
4346: LD_ADDR_EXP 11
4350: PUSH
4351: LD_INT 1
4353: ST_TO_ADDR
// end ;
4354: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) = 0 and not first_apeman_tamed do
4355: LD_INT 22
4357: PUSH
4358: LD_INT 0
4360: PUSH
4361: EMPTY
4362: LIST
4363: LIST
4364: PUSH
4365: LD_INT 25
4367: PUSH
4368: LD_INT 12
4370: PUSH
4371: EMPTY
4372: LIST
4373: LIST
4374: PUSH
4375: EMPTY
4376: LIST
4377: LIST
4378: PPUSH
4379: CALL_OW 69
4383: PUSH
4384: LD_INT 0
4386: EQUAL
4387: PUSH
4388: LD_EXP 8
4392: NOT
4393: AND
4394: IFFALSE 4406
4396: GO 4398
4398: DISABLE
// YouLost ( Apeman ) ;
4399: LD_STRING Apeman
4401: PPUSH
4402: CALL_OW 104
4406: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_apeman_engineer ] ] ) >= 7 do var i , filter ;
4407: LD_INT 22
4409: PUSH
4410: LD_INT 1
4412: PUSH
4413: EMPTY
4414: LIST
4415: LIST
4416: PUSH
4417: LD_INT 25
4419: PUSH
4420: LD_INT 16
4422: PUSH
4423: EMPTY
4424: LIST
4425: LIST
4426: PUSH
4427: EMPTY
4428: LIST
4429: LIST
4430: PPUSH
4431: CALL_OW 69
4435: PUSH
4436: LD_INT 7
4438: GREATEREQUAL
4439: IFFALSE 4537
4441: GO 4443
4443: DISABLE
4444: LD_INT 0
4446: PPUSH
4447: PPUSH
// begin filter := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 4 ] ] ) ^ JMM ;
4448: LD_ADDR_VAR 0 2
4452: PUSH
4453: LD_INT 22
4455: PUSH
4456: LD_INT 1
4458: PUSH
4459: EMPTY
4460: LIST
4461: LIST
4462: PUSH
4463: LD_INT 21
4465: PUSH
4466: LD_INT 1
4468: PUSH
4469: EMPTY
4470: LIST
4471: LIST
4472: PUSH
4473: LD_INT 25
4475: PUSH
4476: LD_INT 4
4478: PUSH
4479: EMPTY
4480: LIST
4481: LIST
4482: PUSH
4483: EMPTY
4484: LIST
4485: LIST
4486: LIST
4487: PPUSH
4488: CALL_OW 69
4492: PUSH
4493: LD_EXP 16
4497: ADD
4498: ST_TO_ADDR
// if filter then
4499: LD_VAR 0 2
4503: IFFALSE 4537
// for i in filter do
4505: LD_ADDR_VAR 0 1
4509: PUSH
4510: LD_VAR 0 2
4514: PUSH
4515: FOR_IN
4516: IFFALSE 4535
// AddExperience ( i , 4 , 3500 ) ;
4518: LD_VAR 0 1
4522: PPUSH
4523: LD_INT 4
4525: PPUSH
4526: LD_INT 3500
4528: PPUSH
4529: CALL_OW 492
4533: GO 4515
4535: POP
4536: POP
// end ;
4537: PPOPN 2
4539: END
// every 0 0$1 trigger end_mission do var i , tmp , m1 , m2 , m3 ;
4540: LD_EXP 14
4544: IFFALSE 5678
4546: GO 4548
4548: DISABLE
4549: LD_INT 0
4551: PPUSH
4552: PPUSH
4553: PPUSH
4554: PPUSH
4555: PPUSH
// begin if apeKillCounter = 0 then
4556: LD_EXP 15
4560: PUSH
4561: LD_INT 0
4563: EQUAL
4564: IFFALSE 4573
// SetAchievement ( ACH_APEKILLER ) ;
4566: LD_STRING ACH_APEKILLER
4568: PPUSH
4569: CALL_OW 543
// if FilterAllUnits ( [ f_side , 2 ] ) then
4573: LD_INT 22
4575: PUSH
4576: LD_INT 2
4578: PUSH
4579: EMPTY
4580: LIST
4581: LIST
4582: PPUSH
4583: CALL_OW 69
4587: IFFALSE 4625
// for i in FilterAllUnits ( [ f_side , 2 ] ) do
4589: LD_ADDR_VAR 0 1
4593: PUSH
4594: LD_INT 22
4596: PUSH
4597: LD_INT 2
4599: PUSH
4600: EMPTY
4601: LIST
4602: LIST
4603: PPUSH
4604: CALL_OW 69
4608: PUSH
4609: FOR_IN
4610: IFFALSE 4623
// RemoveUnit ( i ) ;
4612: LD_VAR 0 1
4616: PPUSH
4617: CALL_OW 64
4621: GO 4609
4623: POP
4624: POP
// m1 := false ;
4625: LD_ADDR_VAR 0 3
4629: PUSH
4630: LD_INT 0
4632: ST_TO_ADDR
// m2 := false ;
4633: LD_ADDR_VAR 0 4
4637: PUSH
4638: LD_INT 0
4640: ST_TO_ADDR
// m3 := false ;
4641: LD_ADDR_VAR 0 5
4645: PUSH
4646: LD_INT 0
4648: ST_TO_ADDR
// if apeman_army then
4649: LD_EXP 9
4653: IFFALSE 4675
// begin AddMedal ( Tame , 1 ) ;
4655: LD_STRING Tame
4657: PPUSH
4658: LD_INT 1
4660: PPUSH
4661: CALL_OW 101
// m1 := true ;
4665: LD_ADDR_VAR 0 3
4669: PUSH
4670: LD_INT 1
4672: ST_TO_ADDR
// end else
4673: GO 4686
// AddMedal ( Tame , - 1 ) ;
4675: LD_STRING Tame
4677: PPUSH
4678: LD_INT 1
4680: NEG
4681: PPUSH
4682: CALL_OW 101
// if radar_researched then
4686: LD_EXP 10
4690: IFFALSE 4722
// begin SaveVariable ( true , radarResInDelta ) ;
4692: LD_INT 1
4694: PPUSH
4695: LD_STRING radarResInDelta
4697: PPUSH
4698: CALL_OW 39
// AddMedal ( Radar , 1 ) ;
4702: LD_STRING Radar
4704: PPUSH
4705: LD_INT 1
4707: PPUSH
4708: CALL_OW 101
// m2 := true ;
4712: LD_ADDR_VAR 0 4
4716: PUSH
4717: LD_INT 1
4719: ST_TO_ADDR
// end else
4720: GO 4752
// if radar_allowed then
4722: LD_EXP 7
4726: IFFALSE 4741
// AddMedal ( Radar , - 2 ) else
4728: LD_STRING Radar
4730: PPUSH
4731: LD_INT 2
4733: NEG
4734: PPUSH
4735: CALL_OW 101
4739: GO 4752
// AddMedal ( Radar , - 1 ) ;
4741: LD_STRING Radar
4743: PPUSH
4744: LD_INT 1
4746: NEG
4747: PPUSH
4748: CALL_OW 101
// if radar_builded then
4752: LD_EXP 11
4756: IFFALSE 4778
// begin AddMedal ( BuildRadar , 1 ) ;
4758: LD_STRING BuildRadar
4760: PPUSH
4761: LD_INT 1
4763: PPUSH
4764: CALL_OW 101
// m3 := true ;
4768: LD_ADDR_VAR 0 5
4772: PUSH
4773: LD_INT 1
4775: ST_TO_ADDR
// end else
4776: GO 4789
// AddMedal ( BuildRadar , - 1 ) ;
4778: LD_STRING BuildRadar
4780: PPUSH
4781: LD_INT 1
4783: NEG
4784: PPUSH
4785: CALL_OW 101
// if tick <= 7 7$00 then
4789: LD_OWVAR 1
4793: PUSH
4794: LD_INT 14700
4796: LESSEQUAL
4797: IFFALSE 4806
// SetAchievement ( ACH_ASPEED_5 ) ;
4799: LD_STRING ACH_ASPEED_5
4801: PPUSH
4802: CALL_OW 543
// if m1 and m2 and m3 and Difficulty >= 3 then
4806: LD_VAR 0 3
4810: PUSH
4811: LD_VAR 0 4
4815: AND
4816: PUSH
4817: LD_VAR 0 5
4821: AND
4822: PUSH
4823: LD_OWVAR 67
4827: PUSH
4828: LD_INT 3
4830: GREATEREQUAL
4831: AND
4832: IFFALSE 4844
// SetAchievementEX ( ACH_AMER , 5 ) ;
4834: LD_STRING ACH_AMER
4836: PPUSH
4837: LD_INT 5
4839: PPUSH
4840: CALL_OW 564
// GiveMedals ( MAIN ) ;
4844: LD_STRING MAIN
4846: PPUSH
4847: CALL_OW 102
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ;
4851: LD_ADDR_VAR 0 2
4855: PUSH
4856: LD_INT 22
4858: PUSH
4859: LD_INT 1
4861: PUSH
4862: EMPTY
4863: LIST
4864: LIST
4865: PUSH
4866: LD_INT 21
4868: PUSH
4869: LD_INT 1
4871: PUSH
4872: EMPTY
4873: LIST
4874: LIST
4875: PUSH
4876: LD_INT 2
4878: PUSH
4879: LD_INT 25
4881: PUSH
4882: LD_INT 1
4884: PUSH
4885: EMPTY
4886: LIST
4887: LIST
4888: PUSH
4889: LD_INT 25
4891: PUSH
4892: LD_INT 2
4894: PUSH
4895: EMPTY
4896: LIST
4897: LIST
4898: PUSH
4899: LD_INT 25
4901: PUSH
4902: LD_INT 3
4904: PUSH
4905: EMPTY
4906: LIST
4907: LIST
4908: PUSH
4909: LD_INT 25
4911: PUSH
4912: LD_INT 4
4914: PUSH
4915: EMPTY
4916: LIST
4917: LIST
4918: PUSH
4919: EMPTY
4920: LIST
4921: LIST
4922: LIST
4923: LIST
4924: LIST
4925: PUSH
4926: EMPTY
4927: LIST
4928: LIST
4929: LIST
4930: PPUSH
4931: CALL_OW 69
4935: ST_TO_ADDR
// RewardPeople ( tmp ) ;
4936: LD_VAR 0 2
4940: PPUSH
4941: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
4945: LD_EXP 16
4949: PPUSH
4950: LD_EXP 2
4954: PUSH
4955: LD_STRING JMM
4957: STR
4958: PPUSH
4959: CALL_OW 38
// if IsOk ( Gladstone ) then
4963: LD_EXP 17
4967: PPUSH
4968: CALL_OW 302
4972: IFFALSE 4992
// begin SaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
4974: LD_EXP 17
4978: PPUSH
4979: LD_EXP 2
4983: PUSH
4984: LD_STRING Gladstone
4986: STR
4987: PPUSH
4988: CALL_OW 38
// end ; if IsOk ( Denis ) and GetSide ( Denis ) = 1 then
4992: LD_EXP 19
4996: PPUSH
4997: CALL_OW 302
5001: PUSH
5002: LD_EXP 19
5006: PPUSH
5007: CALL_OW 255
5011: PUSH
5012: LD_INT 1
5014: EQUAL
5015: AND
5016: IFFALSE 5046
// begin SaveCharacters ( Denis , mission_prefix & Denis ) ;
5018: LD_EXP 19
5022: PPUSH
5023: LD_EXP 2
5027: PUSH
5028: LD_STRING Denis
5030: STR
5031: PPUSH
5032: CALL_OW 38
// SaveVariable ( true , DenisInDelta ) ;
5036: LD_INT 1
5038: PPUSH
5039: LD_STRING DenisInDelta
5041: PPUSH
5042: CALL_OW 39
// end ; if IsOk ( Lisa ) then
5046: LD_EXP 22
5050: PPUSH
5051: CALL_OW 302
5055: IFFALSE 5075
// begin SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
5057: LD_EXP 22
5061: PPUSH
5062: LD_EXP 2
5066: PUSH
5067: LD_STRING Lisa
5069: STR
5070: PPUSH
5071: CALL_OW 38
// end ; if IsOk ( Frank ) then
5075: LD_EXP 23
5079: PPUSH
5080: CALL_OW 302
5084: IFFALSE 5104
// begin SaveCharacters ( Frank , mission_prefix & Frank ) ;
5086: LD_EXP 23
5090: PPUSH
5091: LD_EXP 2
5095: PUSH
5096: LD_STRING Frank
5098: STR
5099: PPUSH
5100: CALL_OW 38
// end ; if IsOk ( Bobby ) then
5104: LD_EXP 24
5108: PPUSH
5109: CALL_OW 302
5113: IFFALSE 5133
// begin SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
5115: LD_EXP 24
5119: PPUSH
5120: LD_EXP 2
5124: PUSH
5125: LD_STRING Bobby
5127: STR
5128: PPUSH
5129: CALL_OW 38
// end ; if IsOk ( Cyrus ) then
5133: LD_EXP 25
5137: PPUSH
5138: CALL_OW 302
5142: IFFALSE 5162
// begin SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
5144: LD_EXP 25
5148: PPUSH
5149: LD_EXP 2
5153: PUSH
5154: LD_STRING Cyrus
5156: STR
5157: PPUSH
5158: CALL_OW 38
// end ; if IsOk ( Brown ) then
5162: LD_EXP 20
5166: PPUSH
5167: CALL_OW 302
5171: IFFALSE 5191
// begin SaveCharacters ( Brown , mission_prefix & Brown ) ;
5173: LD_EXP 20
5177: PPUSH
5178: LD_EXP 2
5182: PUSH
5183: LD_STRING Brown
5185: STR
5186: PPUSH
5187: CALL_OW 38
// end ; if IsOk ( Donaldson ) then
5191: LD_EXP 21
5195: PPUSH
5196: CALL_OW 302
5200: IFFALSE 5220
// begin SaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
5202: LD_EXP 21
5206: PPUSH
5207: LD_EXP 2
5211: PUSH
5212: LD_STRING Donaldson
5214: STR
5215: PPUSH
5216: CALL_OW 38
// end ; if others then
5220: LD_EXP 26
5224: IFFALSE 5238
// SaveCharacters ( others , othersInDelta ) ;
5226: LD_EXP 26
5230: PPUSH
5231: LD_STRING othersInDelta
5233: PPUSH
5234: CALL_OW 38
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_apeman_engineer ] ] ) then
5238: LD_INT 22
5240: PUSH
5241: LD_INT 1
5243: PUSH
5244: EMPTY
5245: LIST
5246: LIST
5247: PUSH
5248: LD_INT 25
5250: PUSH
5251: LD_INT 16
5253: PUSH
5254: EMPTY
5255: LIST
5256: LIST
5257: PUSH
5258: EMPTY
5259: LIST
5260: LIST
5261: PPUSH
5262: CALL_OW 69
5266: IFFALSE 5304
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_apeman_engineer ] ] ) , apeInDelta ) ;
5268: LD_INT 22
5270: PUSH
5271: LD_INT 1
5273: PUSH
5274: EMPTY
5275: LIST
5276: LIST
5277: PUSH
5278: LD_INT 25
5280: PUSH
5281: LD_INT 16
5283: PUSH
5284: EMPTY
5285: LIST
5286: LIST
5287: PUSH
5288: EMPTY
5289: LIST
5290: LIST
5291: PPUSH
5292: CALL_OW 69
5296: PPUSH
5297: LD_STRING apeInDelta
5299: PPUSH
5300: CALL_OW 38
// tmp := [ ] ;
5304: LD_ADDR_VAR 0 2
5308: PUSH
5309: EMPTY
5310: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) then
5311: LD_INT 22
5313: PUSH
5314: LD_INT 1
5316: PUSH
5317: EMPTY
5318: LIST
5319: LIST
5320: PUSH
5321: LD_INT 21
5323: PUSH
5324: LD_INT 2
5326: PUSH
5327: EMPTY
5328: LIST
5329: LIST
5330: PUSH
5331: EMPTY
5332: LIST
5333: LIST
5334: PPUSH
5335: CALL_OW 69
5339: IFFALSE 5450
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) do
5341: LD_ADDR_VAR 0 1
5345: PUSH
5346: LD_INT 22
5348: PUSH
5349: LD_INT 1
5351: PUSH
5352: EMPTY
5353: LIST
5354: LIST
5355: PUSH
5356: LD_INT 21
5358: PUSH
5359: LD_INT 2
5361: PUSH
5362: EMPTY
5363: LIST
5364: LIST
5365: PUSH
5366: EMPTY
5367: LIST
5368: LIST
5369: PPUSH
5370: CALL_OW 69
5374: PUSH
5375: FOR_IN
5376: IFFALSE 5448
// tmp := tmp ^ [ GetNation ( i ) , GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) ] ;
5378: LD_ADDR_VAR 0 2
5382: PUSH
5383: LD_VAR 0 2
5387: PUSH
5388: LD_VAR 0 1
5392: PPUSH
5393: CALL_OW 248
5397: PUSH
5398: LD_VAR 0 1
5402: PPUSH
5403: CALL_OW 265
5407: PUSH
5408: LD_VAR 0 1
5412: PPUSH
5413: CALL_OW 262
5417: PUSH
5418: LD_VAR 0 1
5422: PPUSH
5423: CALL_OW 263
5427: PUSH
5428: LD_VAR 0 1
5432: PPUSH
5433: CALL_OW 264
5437: PUSH
5438: EMPTY
5439: LIST
5440: LIST
5441: LIST
5442: LIST
5443: LIST
5444: ADD
5445: ST_TO_ADDR
5446: GO 5375
5448: POP
5449: POP
// if tmp then
5450: LD_VAR 0 2
5454: IFFALSE 5468
// SaveVariable ( tmp , vehiclesInDelta ) ;
5456: LD_VAR 0 2
5460: PPUSH
5461: LD_STRING vehiclesInDelta
5463: PPUSH
5464: CALL_OW 39
// tmp := [ ] ;
5468: LD_ADDR_VAR 0 2
5472: PUSH
5473: EMPTY
5474: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) then
5475: LD_INT 22
5477: PUSH
5478: LD_INT 1
5480: PUSH
5481: EMPTY
5482: LIST
5483: LIST
5484: PUSH
5485: LD_INT 21
5487: PUSH
5488: LD_INT 3
5490: PUSH
5491: EMPTY
5492: LIST
5493: LIST
5494: PUSH
5495: EMPTY
5496: LIST
5497: LIST
5498: PPUSH
5499: CALL_OW 69
5503: IFFALSE 5656
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) do
5505: LD_ADDR_VAR 0 1
5509: PUSH
5510: LD_INT 22
5512: PUSH
5513: LD_INT 1
5515: PUSH
5516: EMPTY
5517: LIST
5518: LIST
5519: PUSH
5520: LD_INT 21
5522: PUSH
5523: LD_INT 3
5525: PUSH
5526: EMPTY
5527: LIST
5528: LIST
5529: PUSH
5530: EMPTY
5531: LIST
5532: LIST
5533: PPUSH
5534: CALL_OW 69
5538: PUSH
5539: FOR_IN
5540: IFFALSE 5654
// tmp := tmp ^ [ [ GetBType ( i ) , GetBLevel ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) , GetBWeapon ( i ) ] ] ;
5542: LD_ADDR_VAR 0 2
5546: PUSH
5547: LD_VAR 0 2
5551: PUSH
5552: LD_VAR 0 1
5556: PPUSH
5557: CALL_OW 266
5561: PUSH
5562: LD_VAR 0 1
5566: PPUSH
5567: CALL_OW 267
5571: PUSH
5572: LD_VAR 0 1
5576: PPUSH
5577: CALL_OW 250
5581: PUSH
5582: LD_VAR 0 1
5586: PPUSH
5587: CALL_OW 251
5591: PUSH
5592: LD_VAR 0 1
5596: PPUSH
5597: CALL_OW 254
5601: PUSH
5602: LD_VAR 0 1
5606: PPUSH
5607: LD_INT 1
5609: PPUSH
5610: CALL_OW 268
5614: PUSH
5615: LD_VAR 0 1
5619: PPUSH
5620: LD_INT 2
5622: PPUSH
5623: CALL_OW 268
5627: PUSH
5628: LD_VAR 0 1
5632: PPUSH
5633: CALL_OW 269
5637: PUSH
5638: EMPTY
5639: LIST
5640: LIST
5641: LIST
5642: LIST
5643: LIST
5644: LIST
5645: LIST
5646: LIST
5647: PUSH
5648: EMPTY
5649: LIST
5650: ADD
5651: ST_TO_ADDR
5652: GO 5539
5654: POP
5655: POP
// if tmp then
5656: LD_VAR 0 2
5660: IFFALSE 5674
// SaveVariable ( tmp , buildingsInDelta ) ;
5662: LD_VAR 0 2
5666: PPUSH
5667: LD_STRING buildingsInDelta
5669: PPUSH
5670: CALL_OW 39
// YouWin ;
5674: CALL_OW 103
// end ; end_of_file
5678: PPOPN 5
5680: END
// export function PrepareArabianTroops ( amount , skill , area ) ; var i , un , tmp ; begin
5681: LD_INT 0
5683: PPUSH
5684: PPUSH
5685: PPUSH
5686: PPUSH
// InitHc ;
5687: CALL_OW 19
// InitUc ;
5691: CALL_OW 18
// uc_side := 2 ;
5695: LD_ADDR_OWVAR 20
5699: PUSH
5700: LD_INT 2
5702: ST_TO_ADDR
// uc_nation := 2 ;
5703: LD_ADDR_OWVAR 21
5707: PUSH
5708: LD_INT 2
5710: ST_TO_ADDR
// if not amount then
5711: LD_VAR 0 1
5715: NOT
5716: IFFALSE 5720
// exit ;
5718: GO 5843
// for i = 1 to amount do
5720: LD_ADDR_VAR 0 5
5724: PUSH
5725: DOUBLE
5726: LD_INT 1
5728: DEC
5729: ST_TO_ADDR
5730: LD_VAR 0 1
5734: PUSH
5735: FOR_TO
5736: IFFALSE 5831
// begin PrepareHuman ( false , 1 , skill ) ;
5738: LD_INT 0
5740: PPUSH
5741: LD_INT 1
5743: PPUSH
5744: LD_VAR 0 2
5748: PPUSH
5749: CALL_OW 380
// un := CreateHuman ;
5753: LD_ADDR_VAR 0 6
5757: PUSH
5758: CALL_OW 44
5762: ST_TO_ADDR
// tmp := Insert ( tmp , 1 , un ) ;
5763: LD_ADDR_VAR 0 7
5767: PUSH
5768: LD_VAR 0 7
5772: PPUSH
5773: LD_INT 1
5775: PPUSH
5776: LD_VAR 0 6
5780: PPUSH
5781: CALL_OW 2
5785: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
5786: LD_VAR 0 6
5790: PPUSH
5791: LD_VAR 0 3
5795: PPUSH
5796: LD_INT 0
5798: PPUSH
5799: CALL_OW 49
// if i mod 2 = 0 then
5803: LD_VAR 0 5
5807: PUSH
5808: LD_INT 2
5810: MOD
5811: PUSH
5812: LD_INT 0
5814: EQUAL
5815: IFFALSE 5829
// SetTag ( un , 11 ) ;
5817: LD_VAR 0 6
5821: PPUSH
5822: LD_INT 11
5824: PPUSH
5825: CALL_OW 109
// end ;
5829: GO 5735
5831: POP
5832: POP
// result := tmp ;
5833: LD_ADDR_VAR 0 4
5837: PUSH
5838: LD_VAR 0 7
5842: ST_TO_ADDR
// end ;
5843: LD_VAR 0 4
5847: RET
// export ar_forces , ap_killers ; every 0 0$1 trigger Delta do var i , timer , more_troops , skill , eng , un , veh , force ;
5848: LD_EXP 6
5852: IFFALSE 6755
5854: GO 5856
5856: DISABLE
5857: LD_INT 0
5859: PPUSH
5860: PPUSH
5861: PPUSH
5862: PPUSH
5863: PPUSH
5864: PPUSH
5865: PPUSH
5866: PPUSH
// begin more_troops := false ;
5867: LD_ADDR_VAR 0 3
5871: PUSH
5872: LD_INT 0
5874: ST_TO_ADDR
// skill := [ 3 , 4 , 5 , 5 ] [ Difficulty ] ;
5875: LD_ADDR_VAR 0 4
5879: PUSH
5880: LD_INT 3
5882: PUSH
5883: LD_INT 4
5885: PUSH
5886: LD_INT 5
5888: PUSH
5889: LD_INT 5
5891: PUSH
5892: EMPTY
5893: LIST
5894: LIST
5895: LIST
5896: LIST
5897: PUSH
5898: LD_OWVAR 67
5902: ARRAY
5903: ST_TO_ADDR
// timer := [ 5 5$00 , 4 4$00 , 3 3$00 , 2 2$30 ] [ Difficulty ] ;
5904: LD_ADDR_VAR 0 2
5908: PUSH
5909: LD_INT 10500
5911: PUSH
5912: LD_INT 8400
5914: PUSH
5915: LD_INT 6300
5917: PUSH
5918: LD_INT 5250
5920: PUSH
5921: EMPTY
5922: LIST
5923: LIST
5924: LIST
5925: LIST
5926: PUSH
5927: LD_OWVAR 67
5931: ARRAY
5932: ST_TO_ADDR
// force := [ ] ;
5933: LD_ADDR_VAR 0 8
5937: PUSH
5938: EMPTY
5939: ST_TO_ADDR
// ar_forces := [ ] ;
5940: LD_ADDR_EXP 27
5944: PUSH
5945: EMPTY
5946: ST_TO_ADDR
// ap_killers := [ ] ;
5947: LD_ADDR_EXP 28
5951: PUSH
5952: EMPTY
5953: ST_TO_ADDR
// Wait ( timer ) ;
5954: LD_VAR 0 2
5958: PPUSH
5959: CALL_OW 67
// if Denis and GetSide ( Denis ) = 4 then
5963: LD_EXP 19
5967: PUSH
5968: LD_EXP 19
5972: PPUSH
5973: CALL_OW 255
5977: PUSH
5978: LD_INT 4
5980: EQUAL
5981: AND
5982: IFFALSE 5991
// Wait ( 0 0$45 ) ;
5984: LD_INT 1575
5986: PPUSH
5987: CALL_OW 67
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_armoury ] ] ) then
5991: LD_INT 22
5993: PUSH
5994: LD_INT 1
5996: PUSH
5997: EMPTY
5998: LIST
5999: LIST
6000: PUSH
6001: LD_INT 30
6003: PUSH
6004: LD_INT 4
6006: PUSH
6007: EMPTY
6008: LIST
6009: LIST
6010: PUSH
6011: EMPTY
6012: LIST
6013: LIST
6014: PPUSH
6015: CALL_OW 69
6019: IFFALSE 6036
// begin Wait ( 1 1$25 ) ;
6021: LD_INT 2975
6023: PPUSH
6024: CALL_OW 67
// more_troops := true ;
6028: LD_ADDR_VAR 0 3
6032: PUSH
6033: LD_INT 1
6035: ST_TO_ADDR
// end ; if more_troops then
6036: LD_VAR 0 3
6040: IFFALSE 6236
// begin force := PrepareArabianTroops ( [ 4 , 5 , 6 , 7 ] [ Difficulty ] , skill , arArea2 ) ;
6042: LD_ADDR_VAR 0 8
6046: PUSH
6047: LD_INT 4
6049: PUSH
6050: LD_INT 5
6052: PUSH
6053: LD_INT 6
6055: PUSH
6056: LD_INT 7
6058: PUSH
6059: EMPTY
6060: LIST
6061: LIST
6062: LIST
6063: LIST
6064: PUSH
6065: LD_OWVAR 67
6069: ARRAY
6070: PPUSH
6071: LD_VAR 0 4
6075: PPUSH
6076: LD_INT 14
6078: PPUSH
6079: CALL 5681 0 3
6083: ST_TO_ADDR
// veh := PrepareTank ( 2 , 3 , ru_medium_tracked , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_heavy_machine_gun , ru_gatling_gun , ru_gun ] [ Difficulty ] , 90 ) ;
6084: LD_ADDR_VAR 0 7
6088: PUSH
6089: LD_INT 2
6091: PPUSH
6092: LD_INT 3
6094: PPUSH
6095: LD_INT 22
6097: PPUSH
6098: LD_INT 1
6100: PPUSH
6101: LD_INT 1
6103: PPUSH
6104: LD_INT 42
6106: PUSH
6107: LD_INT 42
6109: PUSH
6110: LD_INT 43
6112: PUSH
6113: LD_INT 44
6115: PUSH
6116: EMPTY
6117: LIST
6118: LIST
6119: LIST
6120: LIST
6121: PUSH
6122: LD_OWVAR 67
6126: ARRAY
6127: PPUSH
6128: LD_INT 90
6130: PPUSH
6131: CALL 431 0 7
6135: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
6136: LD_VAR 0 7
6140: PPUSH
6141: LD_INT 4
6143: PPUSH
6144: CALL_OW 233
// PlaceUnitArea ( veh , arArea1 , false ) ;
6148: LD_VAR 0 7
6152: PPUSH
6153: LD_INT 13
6155: PPUSH
6156: LD_INT 0
6158: PPUSH
6159: CALL_OW 49
// uc_side := 2 ;
6163: LD_ADDR_OWVAR 20
6167: PUSH
6168: LD_INT 2
6170: ST_TO_ADDR
// uc_nation := 2 ;
6171: LD_ADDR_OWVAR 21
6175: PUSH
6176: LD_INT 2
6178: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
6179: LD_INT 0
6181: PPUSH
6182: LD_INT 1
6184: PPUSH
6185: LD_VAR 0 4
6189: PPUSH
6190: CALL_OW 380
// un := CreateHuman ;
6194: LD_ADDR_VAR 0 6
6198: PUSH
6199: CALL_OW 44
6203: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6204: LD_VAR 0 6
6208: PPUSH
6209: LD_VAR 0 7
6213: PPUSH
6214: CALL_OW 52
// force := force ^ un ;
6218: LD_ADDR_VAR 0 8
6222: PUSH
6223: LD_VAR 0 8
6227: PUSH
6228: LD_VAR 0 6
6232: ADD
6233: ST_TO_ADDR
// end else
6234: GO 6278
// begin force := PrepareArabianTroops ( [ 3 , 4 , 5 , 6 ] [ Difficulty ] , skill , arArea2 ) ;
6236: LD_ADDR_VAR 0 8
6240: PUSH
6241: LD_INT 3
6243: PUSH
6244: LD_INT 4
6246: PUSH
6247: LD_INT 5
6249: PUSH
6250: LD_INT 6
6252: PUSH
6253: EMPTY
6254: LIST
6255: LIST
6256: LIST
6257: LIST
6258: PUSH
6259: LD_OWVAR 67
6263: ARRAY
6264: PPUSH
6265: LD_VAR 0 4
6269: PPUSH
6270: LD_INT 14
6272: PPUSH
6273: CALL 5681 0 3
6277: ST_TO_ADDR
// end ; if force then
6278: LD_VAR 0 8
6282: IFFALSE 6294
// ar_forces := force ;
6284: LD_ADDR_EXP 27
6288: PUSH
6289: LD_VAR 0 8
6293: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
6294: LD_INT 35
6296: PPUSH
6297: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) = 0 ;
6301: LD_INT 22
6303: PUSH
6304: LD_INT 2
6306: PUSH
6307: EMPTY
6308: LIST
6309: LIST
6310: PUSH
6311: LD_INT 21
6313: PUSH
6314: LD_INT 1
6316: PUSH
6317: EMPTY
6318: LIST
6319: LIST
6320: PUSH
6321: EMPTY
6322: LIST
6323: LIST
6324: PPUSH
6325: CALL_OW 69
6329: PUSH
6330: LD_INT 0
6332: EQUAL
6333: IFFALSE 6294
// Wait ( timer ) ;
6335: LD_VAR 0 2
6339: PPUSH
6340: CALL_OW 67
// force := PrepareArabianTroops ( [ 4 , 5 , 6 , 7 ] [ Difficulty ] , skill , [ arArea1 , arArea2 ] [ rand ( 1 , 2 ) ] ) ;
6344: LD_ADDR_VAR 0 8
6348: PUSH
6349: LD_INT 4
6351: PUSH
6352: LD_INT 5
6354: PUSH
6355: LD_INT 6
6357: PUSH
6358: LD_INT 7
6360: PUSH
6361: EMPTY
6362: LIST
6363: LIST
6364: LIST
6365: LIST
6366: PUSH
6367: LD_OWVAR 67
6371: ARRAY
6372: PPUSH
6373: LD_VAR 0 4
6377: PPUSH
6378: LD_INT 13
6380: PUSH
6381: LD_INT 14
6383: PUSH
6384: EMPTY
6385: LIST
6386: LIST
6387: PUSH
6388: LD_INT 1
6390: PPUSH
6391: LD_INT 2
6393: PPUSH
6394: CALL_OW 12
6398: ARRAY
6399: PPUSH
6400: CALL 5681 0 3
6404: ST_TO_ADDR
// if Difficulty > 1 and Delta then
6405: LD_OWVAR 67
6409: PUSH
6410: LD_INT 1
6412: GREATER
6413: PUSH
6414: LD_EXP 6
6418: AND
6419: IFFALSE 6498
// begin uc_side := 2 ;
6421: LD_ADDR_OWVAR 20
6425: PUSH
6426: LD_INT 2
6428: ST_TO_ADDR
// uc_nation := 2 ;
6429: LD_ADDR_OWVAR 21
6433: PUSH
6434: LD_INT 2
6436: ST_TO_ADDR
// PrepareHuman ( false , 2 , skill ) ;
6437: LD_INT 0
6439: PPUSH
6440: LD_INT 2
6442: PPUSH
6443: LD_VAR 0 4
6447: PPUSH
6448: CALL_OW 380
// eng := CreateHuman ;
6452: LD_ADDR_VAR 0 5
6456: PUSH
6457: CALL_OW 44
6461: ST_TO_ADDR
// PlaceUnitArea ( eng , arArea1 , false ) ;
6462: LD_VAR 0 5
6466: PPUSH
6467: LD_INT 13
6469: PPUSH
6470: LD_INT 0
6472: PPUSH
6473: CALL_OW 49
// Wait ( 3 ) ;
6477: LD_INT 3
6479: PPUSH
6480: CALL_OW 67
// AddComEnterUnit ( eng , Delta ) ;
6484: LD_VAR 0 5
6488: PPUSH
6489: LD_EXP 6
6493: PPUSH
6494: CALL_OW 180
// end ; if force then
6498: LD_VAR 0 8
6502: IFFALSE 6514
// ar_forces := force ;
6504: LD_ADDR_EXP 27
6508: PUSH
6509: LD_VAR 0 8
6513: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
6514: LD_INT 35
6516: PPUSH
6517: CALL_OW 67
// if eng then
6521: LD_VAR 0 5
6525: IFFALSE 6579
// if GetSide ( Delta ) = 2 and IsOk ( eng ) and not IsInUnit ( eng ) then
6527: LD_EXP 6
6531: PPUSH
6532: CALL_OW 255
6536: PUSH
6537: LD_INT 2
6539: EQUAL
6540: PUSH
6541: LD_VAR 0 5
6545: PPUSH
6546: CALL_OW 302
6550: AND
6551: PUSH
6552: LD_VAR 0 5
6556: PPUSH
6557: CALL_OW 310
6561: NOT
6562: AND
6563: IFFALSE 6579
// ComEnterUnit ( eng , Delta ) ;
6565: LD_VAR 0 5
6569: PPUSH
6570: LD_EXP 6
6574: PPUSH
6575: CALL_OW 120
// until FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) = 0 ;
6579: LD_INT 22
6581: PUSH
6582: LD_INT 2
6584: PUSH
6585: EMPTY
6586: LIST
6587: LIST
6588: PUSH
6589: LD_INT 21
6591: PUSH
6592: LD_INT 1
6594: PUSH
6595: EMPTY
6596: LIST
6597: LIST
6598: PUSH
6599: EMPTY
6600: LIST
6601: LIST
6602: PPUSH
6603: CALL_OW 69
6607: PUSH
6608: LD_INT 0
6610: EQUAL
6611: IFFALSE 6514
// Wait ( 2 2$00 ) ;
6613: LD_INT 4200
6615: PPUSH
6616: CALL_OW 67
// ap_killers := PrepareArabianTroops ( [ 1 , 2 , 2 , 2 ] [ Difficulty ] , skill , arArea1 ) ;
6620: LD_ADDR_EXP 28
6624: PUSH
6625: LD_INT 1
6627: PUSH
6628: LD_INT 2
6630: PUSH
6631: LD_INT 2
6633: PUSH
6634: LD_INT 2
6636: PUSH
6637: EMPTY
6638: LIST
6639: LIST
6640: LIST
6641: LIST
6642: PUSH
6643: LD_OWVAR 67
6647: ARRAY
6648: PPUSH
6649: LD_VAR 0 4
6653: PPUSH
6654: LD_INT 13
6656: PPUSH
6657: CALL 5681 0 3
6661: ST_TO_ADDR
// Wait ( timer * 2 ) ;
6662: LD_VAR 0 2
6666: PUSH
6667: LD_INT 2
6669: MUL
6670: PPUSH
6671: CALL_OW 67
// ar_forces := PrepareArabianTroops ( [ 5 , 6 , 7 , 8 ] [ Difficulty ] , skill , arArea1 ) ^ PrepareArabianTroops ( [ 3 , 4 , 4 , 4 ] [ Difficulty ] , skill , arArea2 ) ;
6675: LD_ADDR_EXP 27
6679: PUSH
6680: LD_INT 5
6682: PUSH
6683: LD_INT 6
6685: PUSH
6686: LD_INT 7
6688: PUSH
6689: LD_INT 8
6691: PUSH
6692: EMPTY
6693: LIST
6694: LIST
6695: LIST
6696: LIST
6697: PUSH
6698: LD_OWVAR 67
6702: ARRAY
6703: PPUSH
6704: LD_VAR 0 4
6708: PPUSH
6709: LD_INT 13
6711: PPUSH
6712: CALL 5681 0 3
6716: PUSH
6717: LD_INT 3
6719: PUSH
6720: LD_INT 4
6722: PUSH
6723: LD_INT 4
6725: PUSH
6726: LD_INT 4
6728: PUSH
6729: EMPTY
6730: LIST
6731: LIST
6732: LIST
6733: LIST
6734: PUSH
6735: LD_OWVAR 67
6739: ARRAY
6740: PPUSH
6741: LD_VAR 0 4
6745: PPUSH
6746: LD_INT 14
6748: PPUSH
6749: CALL 5681 0 3
6753: ADD
6754: ST_TO_ADDR
// end ;
6755: PPOPN 8
6757: END
// every 0 0$03 trigger ar_forces do var i , target ;
6758: LD_EXP 27
6762: IFFALSE 6960
6764: GO 6766
6766: DISABLE
6767: LD_INT 0
6769: PPUSH
6770: PPUSH
// begin enable ;
6771: ENABLE
// if not ar_forces then
6772: LD_EXP 27
6776: NOT
6777: IFFALSE 6781
// exit ;
6779: GO 6960
// if Delta then
6781: LD_EXP 6
6785: IFFALSE 6799
// target := Delta else
6787: LD_ADDR_VAR 0 2
6791: PUSH
6792: LD_EXP 6
6796: ST_TO_ADDR
6797: GO 6809
// target := JMM ;
6799: LD_ADDR_VAR 0 2
6803: PUSH
6804: LD_EXP 16
6808: ST_TO_ADDR
// for i in ar_forces do
6809: LD_ADDR_VAR 0 1
6813: PUSH
6814: LD_EXP 27
6818: PUSH
6819: FOR_IN
6820: IFFALSE 6958
// begin if i in FilterAllUnits ( [ f_driving ] ) then
6822: LD_VAR 0 1
6826: PUSH
6827: LD_INT 55
6829: PUSH
6830: EMPTY
6831: LIST
6832: PPUSH
6833: CALL_OW 69
6837: IN
6838: IFFALSE 6881
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , IsInUnit ( i ) ) ) else
6840: LD_VAR 0 1
6844: PPUSH
6845: LD_INT 22
6847: PUSH
6848: LD_INT 1
6850: PUSH
6851: EMPTY
6852: LIST
6853: LIST
6854: PPUSH
6855: CALL_OW 69
6859: PPUSH
6860: LD_VAR 0 1
6864: PPUSH
6865: CALL_OW 310
6869: PPUSH
6870: CALL_OW 74
6874: PPUSH
6875: CALL_OW 115
6879: GO 6956
// if GetDistUnits ( i , target ) > 30 then
6881: LD_VAR 0 1
6885: PPUSH
6886: LD_VAR 0 2
6890: PPUSH
6891: CALL_OW 296
6895: PUSH
6896: LD_INT 30
6898: GREATER
6899: IFFALSE 6932
// ComAgressiveMove ( i , GetX ( target ) , GetY ( target ) ) else
6901: LD_VAR 0 1
6905: PPUSH
6906: LD_VAR 0 2
6910: PPUSH
6911: CALL_OW 250
6915: PPUSH
6916: LD_VAR 0 2
6920: PPUSH
6921: CALL_OW 251
6925: PPUSH
6926: CALL_OW 114
6930: GO 6956
// Attack ( i , FilterAllUnits ( [ f_enemy , 2 ] ) ) ;
6932: LD_VAR 0 1
6936: PPUSH
6937: LD_INT 81
6939: PUSH
6940: LD_INT 2
6942: PUSH
6943: EMPTY
6944: LIST
6945: LIST
6946: PPUSH
6947: CALL_OW 69
6951: PPUSH
6952: CALL 736 0 2
// end ;
6956: GO 6819
6958: POP
6959: POP
// end ;
6960: PPOPN 2
6962: END
// every 0 0$01 trigger ap_killers do var filter , i , target ;
6963: LD_EXP 28
6967: IFFALSE 7127
6969: GO 6971
6971: DISABLE
6972: LD_INT 0
6974: PPUSH
6975: PPUSH
6976: PPUSH
// begin enable ;
6977: ENABLE
// filter := FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) ;
6978: LD_ADDR_VAR 0 1
6982: PUSH
6983: LD_INT 22
6985: PUSH
6986: LD_INT 0
6988: PUSH
6989: EMPTY
6990: LIST
6991: LIST
6992: PUSH
6993: LD_INT 25
6995: PUSH
6996: LD_INT 12
6998: PUSH
6999: EMPTY
7000: LIST
7001: LIST
7002: PUSH
7003: EMPTY
7004: LIST
7005: LIST
7006: PPUSH
7007: CALL_OW 69
7011: ST_TO_ADDR
// if not filter then
7012: LD_VAR 0 1
7016: NOT
7017: IFFALSE 7044
// begin ar_forces := ar_forces ^ ap_killers ;
7019: LD_ADDR_EXP 27
7023: PUSH
7024: LD_EXP 27
7028: PUSH
7029: LD_EXP 28
7033: ADD
7034: ST_TO_ADDR
// ap_killers := [ ] ;
7035: LD_ADDR_EXP 28
7039: PUSH
7040: EMPTY
7041: ST_TO_ADDR
// exit ;
7042: GO 7127
// end ; for i in ap_killers do
7044: LD_ADDR_VAR 0 2
7048: PUSH
7049: LD_EXP 28
7053: PUSH
7054: FOR_IN
7055: IFFALSE 7125
// begin if not IsOk ( i ) then
7057: LD_VAR 0 2
7061: PPUSH
7062: CALL_OW 302
7066: NOT
7067: IFFALSE 7071
// continue ;
7069: GO 7054
// if not HasTask ( i ) then
7071: LD_VAR 0 2
7075: PPUSH
7076: CALL_OW 314
7080: NOT
7081: IFFALSE 7103
// target := NearestUnitToUnit ( filter , i ) ;
7083: LD_ADDR_VAR 0 3
7087: PUSH
7088: LD_VAR 0 1
7092: PPUSH
7093: LD_VAR 0 2
7097: PPUSH
7098: CALL_OW 74
7102: ST_TO_ADDR
// if target then
7103: LD_VAR 0 3
7107: IFFALSE 7123
// ComAttackUnit ( i , target ) ;
7109: LD_VAR 0 2
7113: PPUSH
7114: LD_VAR 0 3
7118: PPUSH
7119: CALL_OW 115
// end ;
7123: GO 7054
7125: POP
7126: POP
// end ; end_of_file
7127: PPOPN 3
7129: END
// every 0 0$40 + 0 0$2 trigger Delta do var i , counter , cr ;
7130: LD_EXP 6
7134: IFFALSE 7270
7136: GO 7138
7138: DISABLE
7139: LD_INT 0
7141: PPUSH
7142: PPUSH
7143: PPUSH
// begin counter := [ 300 , 250 , 220 , 210 ] [ Difficulty ] ;
7144: LD_ADDR_VAR 0 2
7148: PUSH
7149: LD_INT 300
7151: PUSH
7152: LD_INT 250
7154: PUSH
7155: LD_INT 220
7157: PUSH
7158: LD_INT 210
7160: PUSH
7161: EMPTY
7162: LIST
7163: LIST
7164: LIST
7165: LIST
7166: PUSH
7167: LD_OWVAR 67
7171: ARRAY
7172: ST_TO_ADDR
// CreateCratesArea ( Rand ( 1 , 3 ) , cratesArea , true ) ;
7173: LD_INT 1
7175: PPUSH
7176: LD_INT 3
7178: PPUSH
7179: CALL_OW 12
7183: PPUSH
7184: LD_INT 7
7186: PPUSH
7187: LD_INT 1
7189: PPUSH
7190: CALL_OW 55
// repeat wait ( rand ( 1 1$30 , 2 2$20 ) ) ;
7194: LD_INT 3150
7196: PPUSH
7197: LD_INT 4900
7199: PPUSH
7200: CALL_OW 12
7204: PPUSH
7205: CALL_OW 67
// cr := rand ( 1 , 5 ) ;
7209: LD_ADDR_VAR 0 3
7213: PUSH
7214: LD_INT 1
7216: PPUSH
7217: LD_INT 5
7219: PPUSH
7220: CALL_OW 12
7224: ST_TO_ADDR
// CreateCratesArea ( cr , cratesArea , true ) ;
7225: LD_VAR 0 3
7229: PPUSH
7230: LD_INT 7
7232: PPUSH
7233: LD_INT 1
7235: PPUSH
7236: CALL_OW 55
// counter := counter - cr * 10 ;
7240: LD_ADDR_VAR 0 2
7244: PUSH
7245: LD_VAR 0 2
7249: PUSH
7250: LD_VAR 0 3
7254: PUSH
7255: LD_INT 10
7257: MUL
7258: MINUS
7259: ST_TO_ADDR
// until counter <= 0 ;
7260: LD_VAR 0 2
7264: PUSH
7265: LD_INT 0
7267: LESSEQUAL
7268: IFFALSE 7194
// end ;
7270: PPOPN 3
7272: END
// every 0 0$03 trigger not Delta do var i ;
7273: LD_EXP 6
7277: NOT
7278: IFFALSE 7348
7280: GO 7282
7282: DISABLE
7283: LD_INT 0
7285: PPUSH
// begin for i = 1 to 5 - Difficulty do
7286: LD_ADDR_VAR 0 1
7290: PUSH
7291: DOUBLE
7292: LD_INT 1
7294: DEC
7295: ST_TO_ADDR
7296: LD_INT 5
7298: PUSH
7299: LD_OWVAR 67
7303: MINUS
7304: PUSH
7305: FOR_TO
7306: IFFALSE 7346
// begin CreateCratesArea ( rand ( 2 , 5 ) , deltaMainArea , true ) ;
7308: LD_INT 2
7310: PPUSH
7311: LD_INT 5
7313: PPUSH
7314: CALL_OW 12
7318: PPUSH
7319: LD_INT 8
7321: PPUSH
7322: LD_INT 1
7324: PPUSH
7325: CALL_OW 55
// Wait ( rand ( 0 0$16 , 0 0$39 ) ) ;
7329: LD_INT 560
7331: PPUSH
7332: LD_INT 1365
7334: PPUSH
7335: CALL_OW 12
7339: PPUSH
7340: CALL_OW 67
// end ;
7344: GO 7305
7346: POP
7347: POP
// end ;
7348: PPOPN 1
7350: END
// every 3 3$00 trigger tick < 15 15$00 do
7351: LD_OWVAR 1
7355: PUSH
7356: LD_INT 31500
7358: LESS
7359: IFFALSE 7419
7361: GO 7363
7363: DISABLE
// begin enable ;
7364: ENABLE
// CreateCratesAnyWhere ( rand ( 1 , 3 ) , true ) ;
7365: LD_INT 1
7367: PPUSH
7368: LD_INT 3
7370: PPUSH
7371: CALL_OW 12
7375: PPUSH
7376: LD_INT 1
7378: PPUSH
7379: CALL_OW 57
// Wait ( rand ( 0 0$38 , 0 0$59 ) ) ;
7383: LD_INT 1330
7385: PPUSH
7386: LD_INT 2065
7388: PPUSH
7389: CALL_OW 12
7393: PPUSH
7394: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 4 ) , riverArea , true ) ;
7398: LD_INT 1
7400: PPUSH
7401: LD_INT 4
7403: PPUSH
7404: CALL_OW 12
7408: PPUSH
7409: LD_INT 15
7411: PPUSH
7412: LD_INT 1
7414: PPUSH
7415: CALL_OW 55
// end ; end_of_file
7419: END
// on UnitDestroyed ( un ) do begin if un = JMM then
7420: LD_VAR 0 1
7424: PUSH
7425: LD_EXP 16
7429: EQUAL
7430: IFFALSE 7439
// YouLost ( JMM ) ;
7432: LD_STRING JMM
7434: PPUSH
7435: CALL_OW 104
// if un = Delta then
7439: LD_VAR 0 1
7443: PUSH
7444: LD_EXP 6
7448: EQUAL
7449: IFFALSE 7472
// begin Delta := 0 ;
7451: LD_ADDR_EXP 6
7455: PUSH
7456: LD_INT 0
7458: ST_TO_ADDR
// SetRestrict ( b_depot , 1 , true ) ;
7459: LD_INT 0
7461: PPUSH
7462: LD_INT 1
7464: PPUSH
7465: LD_INT 1
7467: PPUSH
7468: CALL_OW 324
// end ; if un in ar_forces then
7472: LD_VAR 0 1
7476: PUSH
7477: LD_EXP 27
7481: IN
7482: IFFALSE 7500
// ar_forces := ar_forces diff un ;
7484: LD_ADDR_EXP 27
7488: PUSH
7489: LD_EXP 27
7493: PUSH
7494: LD_VAR 0 1
7498: DIFF
7499: ST_TO_ADDR
// if un in ap_killers then
7500: LD_VAR 0 1
7504: PUSH
7505: LD_EXP 28
7509: IN
7510: IFFALSE 7528
// ap_killers := ap_killers diff un ;
7512: LD_ADDR_EXP 28
7516: PUSH
7517: LD_EXP 28
7521: PUSH
7522: LD_VAR 0 1
7526: DIFF
7527: ST_TO_ADDR
// if un in FilterAllUnits ( [ f_or , [ f_class , class_apeman ] , [ f_class , class_apeman_engineer ] ] ) then
7528: LD_VAR 0 1
7532: PUSH
7533: LD_INT 2
7535: PUSH
7536: LD_INT 25
7538: PUSH
7539: LD_INT 12
7541: PUSH
7542: EMPTY
7543: LIST
7544: LIST
7545: PUSH
7546: LD_INT 25
7548: PUSH
7549: LD_INT 16
7551: PUSH
7552: EMPTY
7553: LIST
7554: LIST
7555: PUSH
7556: EMPTY
7557: LIST
7558: LIST
7559: LIST
7560: PPUSH
7561: CALL_OW 69
7565: IN
7566: IFFALSE 7582
// apeKillCounter := apeKillCounter + 1 ;
7568: LD_ADDR_EXP 15
7572: PUSH
7573: LD_EXP 15
7577: PUSH
7578: LD_INT 1
7580: PLUS
7581: ST_TO_ADDR
// end ;
7582: PPOPN 1
7584: END
// on Contact ( s1 , s2 ) do if s1 = 1 and s2 = 2 and not arab_spotted then
7585: LD_VAR 0 1
7589: PUSH
7590: LD_INT 1
7592: EQUAL
7593: PUSH
7594: LD_VAR 0 2
7598: PUSH
7599: LD_INT 2
7601: EQUAL
7602: AND
7603: PUSH
7604: LD_EXP 13
7608: NOT
7609: AND
7610: IFFALSE 7620
// arab_spotted := true ;
7612: LD_ADDR_EXP 13
7616: PUSH
7617: LD_INT 1
7619: ST_TO_ADDR
7620: PPOPN 2
7622: END
// on EndTheMissionRaised ( p ) do begin end_the_mission_allowed := false ;
7623: LD_ADDR_OWVAR 57
7627: PUSH
7628: LD_INT 0
7630: ST_TO_ADDR
// end_mission := true ;
7631: LD_ADDR_EXP 14
7635: PUSH
7636: LD_INT 1
7638: ST_TO_ADDR
// end ;
7639: PPOPN 1
7641: END
// on ApemanTamed ( apeman , sci ) do begin if GetSide ( sci ) = 1 then
7642: LD_VAR 0 2
7646: PPUSH
7647: CALL_OW 255
7651: PUSH
7652: LD_INT 1
7654: EQUAL
7655: IFFALSE 7671
// apeman_counter := apeman_counter + 1 ;
7657: LD_ADDR_EXP 12
7661: PUSH
7662: LD_EXP 12
7666: PUSH
7667: LD_INT 1
7669: PLUS
7670: ST_TO_ADDR
// if not first_apeman_tamed then
7671: LD_EXP 8
7675: NOT
7676: IFFALSE 7876
// begin first_apeman_tamed := true ;
7678: LD_ADDR_EXP 8
7682: PUSH
7683: LD_INT 1
7685: ST_TO_ADDR
// if sci = Gladstone then
7686: LD_VAR 0 2
7690: PUSH
7691: LD_EXP 17
7695: EQUAL
7696: IFFALSE 7710
// Say ( Gladstone , D7b-Glad-1 ) ;
7698: LD_EXP 17
7702: PPUSH
7703: LD_STRING D7b-Glad-1
7705: PPUSH
7706: CALL_OW 88
// if sci = Denis then
7710: LD_VAR 0 2
7714: PUSH
7715: LD_EXP 19
7719: EQUAL
7720: IFFALSE 7734
// Say ( Denis , D7a-Den-1 ) ;
7722: LD_EXP 19
7726: PPUSH
7727: LD_STRING D7a-Den-1
7729: PPUSH
7730: CALL_OW 88
// if not sci in [ JMM , Gladstone , Denis , Lisa , Frank , Bobby , Cyrus , Donaldson ] then
7734: LD_VAR 0 2
7738: PUSH
7739: LD_EXP 16
7743: PUSH
7744: LD_EXP 17
7748: PUSH
7749: LD_EXP 19
7753: PUSH
7754: LD_EXP 22
7758: PUSH
7759: LD_EXP 23
7763: PUSH
7764: LD_EXP 24
7768: PUSH
7769: LD_EXP 25
7773: PUSH
7774: LD_EXP 21
7778: PUSH
7779: EMPTY
7780: LIST
7781: LIST
7782: LIST
7783: LIST
7784: LIST
7785: LIST
7786: LIST
7787: LIST
7788: IN
7789: NOT
7790: IFFALSE 7833
// begin if GetSex ( sci ) = sex_male then
7792: LD_VAR 0 2
7796: PPUSH
7797: CALL_OW 258
7801: PUSH
7802: LD_INT 1
7804: EQUAL
7805: IFFALSE 7821
// Say ( sci , D7c-Sci1-1 ) else
7807: LD_VAR 0 2
7811: PPUSH
7812: LD_STRING D7c-Sci1-1
7814: PPUSH
7815: CALL_OW 88
7819: GO 7833
// Say ( sci , D7c-FSci1-1 ) ;
7821: LD_VAR 0 2
7825: PPUSH
7826: LD_STRING D7c-FSci1-1
7828: PPUSH
7829: CALL_OW 88
// end ; if not sci = Gladstone then
7833: LD_VAR 0 2
7837: PUSH
7838: LD_EXP 17
7842: EQUAL
7843: NOT
7844: IFFALSE 7858
// Say ( Gladstone , D7c-Glad-1 ) ;
7846: LD_EXP 17
7850: PPUSH
7851: LD_STRING D7c-Glad-1
7853: PPUSH
7854: CALL_OW 88
// if Lisa then
7858: LD_EXP 22
7862: IFFALSE 7876
// Say ( Lisa , D8-Lisa-1 ) ;
7864: LD_EXP 22
7868: PPUSH
7869: LD_STRING D8-Lisa-1
7871: PPUSH
7872: CALL_OW 88
// end ; end ; end_of_file
7876: PPOPN 2
7878: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
7879: LD_INT 0
7881: PPUSH
// ar_miner := 81 ;
7882: LD_ADDR_EXP 36
7886: PUSH
7887: LD_INT 81
7889: ST_TO_ADDR
// ar_crane := 88 ;
7890: LD_ADDR_EXP 35
7894: PUSH
7895: LD_INT 88
7897: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
7898: LD_ADDR_EXP 30
7902: PUSH
7903: LD_INT 89
7905: ST_TO_ADDR
// us_hack := 99 ;
7906: LD_ADDR_EXP 31
7910: PUSH
7911: LD_INT 99
7913: ST_TO_ADDR
// us_artillery := 97 ;
7914: LD_ADDR_EXP 32
7918: PUSH
7919: LD_INT 97
7921: ST_TO_ADDR
// ar_bio_bomb := 91 ;
7922: LD_ADDR_EXP 33
7926: PUSH
7927: LD_INT 91
7929: ST_TO_ADDR
// ar_mortar := 92 ;
7930: LD_ADDR_EXP 34
7934: PUSH
7935: LD_INT 92
7937: ST_TO_ADDR
// ru_radar := 98 ;
7938: LD_ADDR_EXP 29
7942: PUSH
7943: LD_INT 98
7945: ST_TO_ADDR
// tech_Artillery := 80 ;
7946: LD_ADDR_EXP 37
7950: PUSH
7951: LD_INT 80
7953: ST_TO_ADDR
// tech_RadMat := 81 ;
7954: LD_ADDR_EXP 38
7958: PUSH
7959: LD_INT 81
7961: ST_TO_ADDR
// tech_BasicTools := 82 ;
7962: LD_ADDR_EXP 39
7966: PUSH
7967: LD_INT 82
7969: ST_TO_ADDR
// tech_Cargo := 83 ;
7970: LD_ADDR_EXP 40
7974: PUSH
7975: LD_INT 83
7977: ST_TO_ADDR
// tech_Track := 84 ;
7978: LD_ADDR_EXP 41
7982: PUSH
7983: LD_INT 84
7985: ST_TO_ADDR
// tech_Crane := 85 ;
7986: LD_ADDR_EXP 42
7990: PUSH
7991: LD_INT 85
7993: ST_TO_ADDR
// tech_Bulldozer := 86 ;
7994: LD_ADDR_EXP 43
7998: PUSH
7999: LD_INT 86
8001: ST_TO_ADDR
// tech_Hovercraft := 87 ;
8002: LD_ADDR_EXP 44
8006: PUSH
8007: LD_INT 87
8009: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
8010: LD_ADDR_EXP 45
8014: PUSH
8015: LD_INT 88
8017: ST_TO_ADDR
// class_mastodont := 31 ;
8018: LD_ADDR_EXP 46
8022: PUSH
8023: LD_INT 31
8025: ST_TO_ADDR
// class_horse := 21 ;
8026: LD_ADDR_EXP 47
8030: PUSH
8031: LD_INT 21
8033: ST_TO_ADDR
// end ;
8034: LD_VAR 0 1
8038: RET
// every 1 do
8039: GO 8041
8041: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
8042: CALL 7879 0 0
8046: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
8047: LD_INT 0
8049: PPUSH
// if p2 = 100 then
8050: LD_VAR 0 2
8054: PUSH
8055: LD_INT 100
8057: EQUAL
8058: IFFALSE 9007
// begin if not StreamModeActive then
8060: LD_EXP 48
8064: NOT
8065: IFFALSE 8075
// StreamModeActive := true ;
8067: LD_ADDR_EXP 48
8071: PUSH
8072: LD_INT 1
8074: ST_TO_ADDR
// if p3 = 0 then
8075: LD_VAR 0 3
8079: PUSH
8080: LD_INT 0
8082: EQUAL
8083: IFFALSE 8089
// InitStreamMode ;
8085: CALL 9167 0 0
// if p3 = 1 then
8089: LD_VAR 0 3
8093: PUSH
8094: LD_INT 1
8096: EQUAL
8097: IFFALSE 8107
// sRocket := true ;
8099: LD_ADDR_EXP 53
8103: PUSH
8104: LD_INT 1
8106: ST_TO_ADDR
// if p3 = 2 then
8107: LD_VAR 0 3
8111: PUSH
8112: LD_INT 2
8114: EQUAL
8115: IFFALSE 8125
// sSpeed := true ;
8117: LD_ADDR_EXP 52
8121: PUSH
8122: LD_INT 1
8124: ST_TO_ADDR
// if p3 = 3 then
8125: LD_VAR 0 3
8129: PUSH
8130: LD_INT 3
8132: EQUAL
8133: IFFALSE 8143
// sEngine := true ;
8135: LD_ADDR_EXP 54
8139: PUSH
8140: LD_INT 1
8142: ST_TO_ADDR
// if p3 = 4 then
8143: LD_VAR 0 3
8147: PUSH
8148: LD_INT 4
8150: EQUAL
8151: IFFALSE 8161
// sSpec := true ;
8153: LD_ADDR_EXP 51
8157: PUSH
8158: LD_INT 1
8160: ST_TO_ADDR
// if p3 = 5 then
8161: LD_VAR 0 3
8165: PUSH
8166: LD_INT 5
8168: EQUAL
8169: IFFALSE 8179
// sLevel := true ;
8171: LD_ADDR_EXP 55
8175: PUSH
8176: LD_INT 1
8178: ST_TO_ADDR
// if p3 = 6 then
8179: LD_VAR 0 3
8183: PUSH
8184: LD_INT 6
8186: EQUAL
8187: IFFALSE 8197
// sArmoury := true ;
8189: LD_ADDR_EXP 56
8193: PUSH
8194: LD_INT 1
8196: ST_TO_ADDR
// if p3 = 7 then
8197: LD_VAR 0 3
8201: PUSH
8202: LD_INT 7
8204: EQUAL
8205: IFFALSE 8215
// sRadar := true ;
8207: LD_ADDR_EXP 57
8211: PUSH
8212: LD_INT 1
8214: ST_TO_ADDR
// if p3 = 8 then
8215: LD_VAR 0 3
8219: PUSH
8220: LD_INT 8
8222: EQUAL
8223: IFFALSE 8233
// sBunker := true ;
8225: LD_ADDR_EXP 58
8229: PUSH
8230: LD_INT 1
8232: ST_TO_ADDR
// if p3 = 9 then
8233: LD_VAR 0 3
8237: PUSH
8238: LD_INT 9
8240: EQUAL
8241: IFFALSE 8251
// sHack := true ;
8243: LD_ADDR_EXP 59
8247: PUSH
8248: LD_INT 1
8250: ST_TO_ADDR
// if p3 = 10 then
8251: LD_VAR 0 3
8255: PUSH
8256: LD_INT 10
8258: EQUAL
8259: IFFALSE 8269
// sFire := true ;
8261: LD_ADDR_EXP 60
8265: PUSH
8266: LD_INT 1
8268: ST_TO_ADDR
// if p3 = 11 then
8269: LD_VAR 0 3
8273: PUSH
8274: LD_INT 11
8276: EQUAL
8277: IFFALSE 8287
// sRefresh := true ;
8279: LD_ADDR_EXP 61
8283: PUSH
8284: LD_INT 1
8286: ST_TO_ADDR
// if p3 = 12 then
8287: LD_VAR 0 3
8291: PUSH
8292: LD_INT 12
8294: EQUAL
8295: IFFALSE 8305
// sExp := true ;
8297: LD_ADDR_EXP 62
8301: PUSH
8302: LD_INT 1
8304: ST_TO_ADDR
// if p3 = 13 then
8305: LD_VAR 0 3
8309: PUSH
8310: LD_INT 13
8312: EQUAL
8313: IFFALSE 8323
// sDepot := true ;
8315: LD_ADDR_EXP 63
8319: PUSH
8320: LD_INT 1
8322: ST_TO_ADDR
// if p3 = 14 then
8323: LD_VAR 0 3
8327: PUSH
8328: LD_INT 14
8330: EQUAL
8331: IFFALSE 8341
// sFlag := true ;
8333: LD_ADDR_EXP 64
8337: PUSH
8338: LD_INT 1
8340: ST_TO_ADDR
// if p3 = 15 then
8341: LD_VAR 0 3
8345: PUSH
8346: LD_INT 15
8348: EQUAL
8349: IFFALSE 8359
// sKamikadze := true ;
8351: LD_ADDR_EXP 72
8355: PUSH
8356: LD_INT 1
8358: ST_TO_ADDR
// if p3 = 16 then
8359: LD_VAR 0 3
8363: PUSH
8364: LD_INT 16
8366: EQUAL
8367: IFFALSE 8377
// sTroll := true ;
8369: LD_ADDR_EXP 73
8373: PUSH
8374: LD_INT 1
8376: ST_TO_ADDR
// if p3 = 17 then
8377: LD_VAR 0 3
8381: PUSH
8382: LD_INT 17
8384: EQUAL
8385: IFFALSE 8395
// sSlow := true ;
8387: LD_ADDR_EXP 74
8391: PUSH
8392: LD_INT 1
8394: ST_TO_ADDR
// if p3 = 18 then
8395: LD_VAR 0 3
8399: PUSH
8400: LD_INT 18
8402: EQUAL
8403: IFFALSE 8413
// sLack := true ;
8405: LD_ADDR_EXP 75
8409: PUSH
8410: LD_INT 1
8412: ST_TO_ADDR
// if p3 = 19 then
8413: LD_VAR 0 3
8417: PUSH
8418: LD_INT 19
8420: EQUAL
8421: IFFALSE 8431
// sTank := true ;
8423: LD_ADDR_EXP 77
8427: PUSH
8428: LD_INT 1
8430: ST_TO_ADDR
// if p3 = 20 then
8431: LD_VAR 0 3
8435: PUSH
8436: LD_INT 20
8438: EQUAL
8439: IFFALSE 8449
// sRemote := true ;
8441: LD_ADDR_EXP 78
8445: PUSH
8446: LD_INT 1
8448: ST_TO_ADDR
// if p3 = 21 then
8449: LD_VAR 0 3
8453: PUSH
8454: LD_INT 21
8456: EQUAL
8457: IFFALSE 8467
// sPowell := true ;
8459: LD_ADDR_EXP 79
8463: PUSH
8464: LD_INT 1
8466: ST_TO_ADDR
// if p3 = 22 then
8467: LD_VAR 0 3
8471: PUSH
8472: LD_INT 22
8474: EQUAL
8475: IFFALSE 8485
// sTeleport := true ;
8477: LD_ADDR_EXP 82
8481: PUSH
8482: LD_INT 1
8484: ST_TO_ADDR
// if p3 = 23 then
8485: LD_VAR 0 3
8489: PUSH
8490: LD_INT 23
8492: EQUAL
8493: IFFALSE 8503
// sOilTower := true ;
8495: LD_ADDR_EXP 84
8499: PUSH
8500: LD_INT 1
8502: ST_TO_ADDR
// if p3 = 24 then
8503: LD_VAR 0 3
8507: PUSH
8508: LD_INT 24
8510: EQUAL
8511: IFFALSE 8521
// sShovel := true ;
8513: LD_ADDR_EXP 85
8517: PUSH
8518: LD_INT 1
8520: ST_TO_ADDR
// if p3 = 25 then
8521: LD_VAR 0 3
8525: PUSH
8526: LD_INT 25
8528: EQUAL
8529: IFFALSE 8539
// sSheik := true ;
8531: LD_ADDR_EXP 86
8535: PUSH
8536: LD_INT 1
8538: ST_TO_ADDR
// if p3 = 26 then
8539: LD_VAR 0 3
8543: PUSH
8544: LD_INT 26
8546: EQUAL
8547: IFFALSE 8557
// sEarthquake := true ;
8549: LD_ADDR_EXP 88
8553: PUSH
8554: LD_INT 1
8556: ST_TO_ADDR
// if p3 = 27 then
8557: LD_VAR 0 3
8561: PUSH
8562: LD_INT 27
8564: EQUAL
8565: IFFALSE 8575
// sAI := true ;
8567: LD_ADDR_EXP 89
8571: PUSH
8572: LD_INT 1
8574: ST_TO_ADDR
// if p3 = 28 then
8575: LD_VAR 0 3
8579: PUSH
8580: LD_INT 28
8582: EQUAL
8583: IFFALSE 8593
// sCargo := true ;
8585: LD_ADDR_EXP 92
8589: PUSH
8590: LD_INT 1
8592: ST_TO_ADDR
// if p3 = 29 then
8593: LD_VAR 0 3
8597: PUSH
8598: LD_INT 29
8600: EQUAL
8601: IFFALSE 8611
// sDLaser := true ;
8603: LD_ADDR_EXP 93
8607: PUSH
8608: LD_INT 1
8610: ST_TO_ADDR
// if p3 = 30 then
8611: LD_VAR 0 3
8615: PUSH
8616: LD_INT 30
8618: EQUAL
8619: IFFALSE 8629
// sExchange := true ;
8621: LD_ADDR_EXP 94
8625: PUSH
8626: LD_INT 1
8628: ST_TO_ADDR
// if p3 = 31 then
8629: LD_VAR 0 3
8633: PUSH
8634: LD_INT 31
8636: EQUAL
8637: IFFALSE 8647
// sFac := true ;
8639: LD_ADDR_EXP 95
8643: PUSH
8644: LD_INT 1
8646: ST_TO_ADDR
// if p3 = 32 then
8647: LD_VAR 0 3
8651: PUSH
8652: LD_INT 32
8654: EQUAL
8655: IFFALSE 8665
// sPower := true ;
8657: LD_ADDR_EXP 96
8661: PUSH
8662: LD_INT 1
8664: ST_TO_ADDR
// if p3 = 33 then
8665: LD_VAR 0 3
8669: PUSH
8670: LD_INT 33
8672: EQUAL
8673: IFFALSE 8683
// sRandom := true ;
8675: LD_ADDR_EXP 97
8679: PUSH
8680: LD_INT 1
8682: ST_TO_ADDR
// if p3 = 34 then
8683: LD_VAR 0 3
8687: PUSH
8688: LD_INT 34
8690: EQUAL
8691: IFFALSE 8701
// sShield := true ;
8693: LD_ADDR_EXP 98
8697: PUSH
8698: LD_INT 1
8700: ST_TO_ADDR
// if p3 = 35 then
8701: LD_VAR 0 3
8705: PUSH
8706: LD_INT 35
8708: EQUAL
8709: IFFALSE 8719
// sTime := true ;
8711: LD_ADDR_EXP 99
8715: PUSH
8716: LD_INT 1
8718: ST_TO_ADDR
// if p3 = 36 then
8719: LD_VAR 0 3
8723: PUSH
8724: LD_INT 36
8726: EQUAL
8727: IFFALSE 8737
// sTools := true ;
8729: LD_ADDR_EXP 100
8733: PUSH
8734: LD_INT 1
8736: ST_TO_ADDR
// if p3 = 101 then
8737: LD_VAR 0 3
8741: PUSH
8742: LD_INT 101
8744: EQUAL
8745: IFFALSE 8755
// sSold := true ;
8747: LD_ADDR_EXP 65
8751: PUSH
8752: LD_INT 1
8754: ST_TO_ADDR
// if p3 = 102 then
8755: LD_VAR 0 3
8759: PUSH
8760: LD_INT 102
8762: EQUAL
8763: IFFALSE 8773
// sDiff := true ;
8765: LD_ADDR_EXP 66
8769: PUSH
8770: LD_INT 1
8772: ST_TO_ADDR
// if p3 = 103 then
8773: LD_VAR 0 3
8777: PUSH
8778: LD_INT 103
8780: EQUAL
8781: IFFALSE 8791
// sFog := true ;
8783: LD_ADDR_EXP 69
8787: PUSH
8788: LD_INT 1
8790: ST_TO_ADDR
// if p3 = 104 then
8791: LD_VAR 0 3
8795: PUSH
8796: LD_INT 104
8798: EQUAL
8799: IFFALSE 8809
// sReset := true ;
8801: LD_ADDR_EXP 70
8805: PUSH
8806: LD_INT 1
8808: ST_TO_ADDR
// if p3 = 105 then
8809: LD_VAR 0 3
8813: PUSH
8814: LD_INT 105
8816: EQUAL
8817: IFFALSE 8827
// sSun := true ;
8819: LD_ADDR_EXP 71
8823: PUSH
8824: LD_INT 1
8826: ST_TO_ADDR
// if p3 = 106 then
8827: LD_VAR 0 3
8831: PUSH
8832: LD_INT 106
8834: EQUAL
8835: IFFALSE 8845
// sTiger := true ;
8837: LD_ADDR_EXP 67
8841: PUSH
8842: LD_INT 1
8844: ST_TO_ADDR
// if p3 = 107 then
8845: LD_VAR 0 3
8849: PUSH
8850: LD_INT 107
8852: EQUAL
8853: IFFALSE 8863
// sBomb := true ;
8855: LD_ADDR_EXP 68
8859: PUSH
8860: LD_INT 1
8862: ST_TO_ADDR
// if p3 = 108 then
8863: LD_VAR 0 3
8867: PUSH
8868: LD_INT 108
8870: EQUAL
8871: IFFALSE 8881
// sWound := true ;
8873: LD_ADDR_EXP 76
8877: PUSH
8878: LD_INT 1
8880: ST_TO_ADDR
// if p3 = 109 then
8881: LD_VAR 0 3
8885: PUSH
8886: LD_INT 109
8888: EQUAL
8889: IFFALSE 8899
// sBetray := true ;
8891: LD_ADDR_EXP 80
8895: PUSH
8896: LD_INT 1
8898: ST_TO_ADDR
// if p3 = 110 then
8899: LD_VAR 0 3
8903: PUSH
8904: LD_INT 110
8906: EQUAL
8907: IFFALSE 8917
// sContamin := true ;
8909: LD_ADDR_EXP 81
8913: PUSH
8914: LD_INT 1
8916: ST_TO_ADDR
// if p3 = 111 then
8917: LD_VAR 0 3
8921: PUSH
8922: LD_INT 111
8924: EQUAL
8925: IFFALSE 8935
// sOil := true ;
8927: LD_ADDR_EXP 83
8931: PUSH
8932: LD_INT 1
8934: ST_TO_ADDR
// if p3 = 112 then
8935: LD_VAR 0 3
8939: PUSH
8940: LD_INT 112
8942: EQUAL
8943: IFFALSE 8953
// sStu := true ;
8945: LD_ADDR_EXP 87
8949: PUSH
8950: LD_INT 1
8952: ST_TO_ADDR
// if p3 = 113 then
8953: LD_VAR 0 3
8957: PUSH
8958: LD_INT 113
8960: EQUAL
8961: IFFALSE 8971
// sBazooka := true ;
8963: LD_ADDR_EXP 90
8967: PUSH
8968: LD_INT 1
8970: ST_TO_ADDR
// if p3 = 114 then
8971: LD_VAR 0 3
8975: PUSH
8976: LD_INT 114
8978: EQUAL
8979: IFFALSE 8989
// sMortar := true ;
8981: LD_ADDR_EXP 91
8985: PUSH
8986: LD_INT 1
8988: ST_TO_ADDR
// if p3 = 115 then
8989: LD_VAR 0 3
8993: PUSH
8994: LD_INT 115
8996: EQUAL
8997: IFFALSE 9007
// sRanger := true ;
8999: LD_ADDR_EXP 101
9003: PUSH
9004: LD_INT 1
9006: ST_TO_ADDR
// end ; if p2 = 101 then
9007: LD_VAR 0 2
9011: PUSH
9012: LD_INT 101
9014: EQUAL
9015: IFFALSE 9143
// begin case p3 of 1 :
9017: LD_VAR 0 3
9021: PUSH
9022: LD_INT 1
9024: DOUBLE
9025: EQUAL
9026: IFTRUE 9030
9028: GO 9037
9030: POP
// hHackUnlimitedResources ; 2 :
9031: CALL 20180 0 0
9035: GO 9143
9037: LD_INT 2
9039: DOUBLE
9040: EQUAL
9041: IFTRUE 9045
9043: GO 9052
9045: POP
// hHackSetLevel10 ; 3 :
9046: CALL 20313 0 0
9050: GO 9143
9052: LD_INT 3
9054: DOUBLE
9055: EQUAL
9056: IFTRUE 9060
9058: GO 9067
9060: POP
// hHackSetLevel10YourUnits ; 4 :
9061: CALL 20398 0 0
9065: GO 9143
9067: LD_INT 4
9069: DOUBLE
9070: EQUAL
9071: IFTRUE 9075
9073: GO 9082
9075: POP
// hHackInvincible ; 5 :
9076: CALL 20846 0 0
9080: GO 9143
9082: LD_INT 5
9084: DOUBLE
9085: EQUAL
9086: IFTRUE 9090
9088: GO 9097
9090: POP
// hHackInvisible ; 6 :
9091: CALL 20957 0 0
9095: GO 9143
9097: LD_INT 6
9099: DOUBLE
9100: EQUAL
9101: IFTRUE 9105
9103: GO 9112
9105: POP
// hHackChangeYourSide ; 7 :
9106: CALL 21014 0 0
9110: GO 9143
9112: LD_INT 7
9114: DOUBLE
9115: EQUAL
9116: IFTRUE 9120
9118: GO 9127
9120: POP
// hHackChangeUnitSide ; 8 :
9121: CALL 21056 0 0
9125: GO 9143
9127: LD_INT 8
9129: DOUBLE
9130: EQUAL
9131: IFTRUE 9135
9133: GO 9142
9135: POP
// hHackFog ; end ;
9136: CALL 21157 0 0
9140: GO 9143
9142: POP
// end ; end ;
9143: LD_VAR 0 7
9147: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
9148: GO 9150
9150: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
9151: LD_STRING initStreamRollete();
9153: PPUSH
9154: CALL_OW 559
// InitStreamMode ;
9158: CALL 9167 0 0
// DefineStreamItems ( ) ;
9162: CALL 9607 0 0
// end ;
9166: END
// function InitStreamMode ; begin
9167: LD_INT 0
9169: PPUSH
// streamModeActive := false ;
9170: LD_ADDR_EXP 48
9174: PUSH
9175: LD_INT 0
9177: ST_TO_ADDR
// normalCounter := 36 ;
9178: LD_ADDR_EXP 49
9182: PUSH
9183: LD_INT 36
9185: ST_TO_ADDR
// hardcoreCounter := 16 ;
9186: LD_ADDR_EXP 50
9190: PUSH
9191: LD_INT 16
9193: ST_TO_ADDR
// sRocket := false ;
9194: LD_ADDR_EXP 53
9198: PUSH
9199: LD_INT 0
9201: ST_TO_ADDR
// sSpeed := false ;
9202: LD_ADDR_EXP 52
9206: PUSH
9207: LD_INT 0
9209: ST_TO_ADDR
// sEngine := false ;
9210: LD_ADDR_EXP 54
9214: PUSH
9215: LD_INT 0
9217: ST_TO_ADDR
// sSpec := false ;
9218: LD_ADDR_EXP 51
9222: PUSH
9223: LD_INT 0
9225: ST_TO_ADDR
// sLevel := false ;
9226: LD_ADDR_EXP 55
9230: PUSH
9231: LD_INT 0
9233: ST_TO_ADDR
// sArmoury := false ;
9234: LD_ADDR_EXP 56
9238: PUSH
9239: LD_INT 0
9241: ST_TO_ADDR
// sRadar := false ;
9242: LD_ADDR_EXP 57
9246: PUSH
9247: LD_INT 0
9249: ST_TO_ADDR
// sBunker := false ;
9250: LD_ADDR_EXP 58
9254: PUSH
9255: LD_INT 0
9257: ST_TO_ADDR
// sHack := false ;
9258: LD_ADDR_EXP 59
9262: PUSH
9263: LD_INT 0
9265: ST_TO_ADDR
// sFire := false ;
9266: LD_ADDR_EXP 60
9270: PUSH
9271: LD_INT 0
9273: ST_TO_ADDR
// sRefresh := false ;
9274: LD_ADDR_EXP 61
9278: PUSH
9279: LD_INT 0
9281: ST_TO_ADDR
// sExp := false ;
9282: LD_ADDR_EXP 62
9286: PUSH
9287: LD_INT 0
9289: ST_TO_ADDR
// sDepot := false ;
9290: LD_ADDR_EXP 63
9294: PUSH
9295: LD_INT 0
9297: ST_TO_ADDR
// sFlag := false ;
9298: LD_ADDR_EXP 64
9302: PUSH
9303: LD_INT 0
9305: ST_TO_ADDR
// sKamikadze := false ;
9306: LD_ADDR_EXP 72
9310: PUSH
9311: LD_INT 0
9313: ST_TO_ADDR
// sTroll := false ;
9314: LD_ADDR_EXP 73
9318: PUSH
9319: LD_INT 0
9321: ST_TO_ADDR
// sSlow := false ;
9322: LD_ADDR_EXP 74
9326: PUSH
9327: LD_INT 0
9329: ST_TO_ADDR
// sLack := false ;
9330: LD_ADDR_EXP 75
9334: PUSH
9335: LD_INT 0
9337: ST_TO_ADDR
// sTank := false ;
9338: LD_ADDR_EXP 77
9342: PUSH
9343: LD_INT 0
9345: ST_TO_ADDR
// sRemote := false ;
9346: LD_ADDR_EXP 78
9350: PUSH
9351: LD_INT 0
9353: ST_TO_ADDR
// sPowell := false ;
9354: LD_ADDR_EXP 79
9358: PUSH
9359: LD_INT 0
9361: ST_TO_ADDR
// sTeleport := false ;
9362: LD_ADDR_EXP 82
9366: PUSH
9367: LD_INT 0
9369: ST_TO_ADDR
// sOilTower := false ;
9370: LD_ADDR_EXP 84
9374: PUSH
9375: LD_INT 0
9377: ST_TO_ADDR
// sShovel := false ;
9378: LD_ADDR_EXP 85
9382: PUSH
9383: LD_INT 0
9385: ST_TO_ADDR
// sSheik := false ;
9386: LD_ADDR_EXP 86
9390: PUSH
9391: LD_INT 0
9393: ST_TO_ADDR
// sEarthquake := false ;
9394: LD_ADDR_EXP 88
9398: PUSH
9399: LD_INT 0
9401: ST_TO_ADDR
// sAI := false ;
9402: LD_ADDR_EXP 89
9406: PUSH
9407: LD_INT 0
9409: ST_TO_ADDR
// sCargo := false ;
9410: LD_ADDR_EXP 92
9414: PUSH
9415: LD_INT 0
9417: ST_TO_ADDR
// sDLaser := false ;
9418: LD_ADDR_EXP 93
9422: PUSH
9423: LD_INT 0
9425: ST_TO_ADDR
// sExchange := false ;
9426: LD_ADDR_EXP 94
9430: PUSH
9431: LD_INT 0
9433: ST_TO_ADDR
// sFac := false ;
9434: LD_ADDR_EXP 95
9438: PUSH
9439: LD_INT 0
9441: ST_TO_ADDR
// sPower := false ;
9442: LD_ADDR_EXP 96
9446: PUSH
9447: LD_INT 0
9449: ST_TO_ADDR
// sRandom := false ;
9450: LD_ADDR_EXP 97
9454: PUSH
9455: LD_INT 0
9457: ST_TO_ADDR
// sShield := false ;
9458: LD_ADDR_EXP 98
9462: PUSH
9463: LD_INT 0
9465: ST_TO_ADDR
// sTime := false ;
9466: LD_ADDR_EXP 99
9470: PUSH
9471: LD_INT 0
9473: ST_TO_ADDR
// sTools := false ;
9474: LD_ADDR_EXP 100
9478: PUSH
9479: LD_INT 0
9481: ST_TO_ADDR
// sSold := false ;
9482: LD_ADDR_EXP 65
9486: PUSH
9487: LD_INT 0
9489: ST_TO_ADDR
// sDiff := false ;
9490: LD_ADDR_EXP 66
9494: PUSH
9495: LD_INT 0
9497: ST_TO_ADDR
// sFog := false ;
9498: LD_ADDR_EXP 69
9502: PUSH
9503: LD_INT 0
9505: ST_TO_ADDR
// sReset := false ;
9506: LD_ADDR_EXP 70
9510: PUSH
9511: LD_INT 0
9513: ST_TO_ADDR
// sSun := false ;
9514: LD_ADDR_EXP 71
9518: PUSH
9519: LD_INT 0
9521: ST_TO_ADDR
// sTiger := false ;
9522: LD_ADDR_EXP 67
9526: PUSH
9527: LD_INT 0
9529: ST_TO_ADDR
// sBomb := false ;
9530: LD_ADDR_EXP 68
9534: PUSH
9535: LD_INT 0
9537: ST_TO_ADDR
// sWound := false ;
9538: LD_ADDR_EXP 76
9542: PUSH
9543: LD_INT 0
9545: ST_TO_ADDR
// sBetray := false ;
9546: LD_ADDR_EXP 80
9550: PUSH
9551: LD_INT 0
9553: ST_TO_ADDR
// sContamin := false ;
9554: LD_ADDR_EXP 81
9558: PUSH
9559: LD_INT 0
9561: ST_TO_ADDR
// sOil := false ;
9562: LD_ADDR_EXP 83
9566: PUSH
9567: LD_INT 0
9569: ST_TO_ADDR
// sStu := false ;
9570: LD_ADDR_EXP 87
9574: PUSH
9575: LD_INT 0
9577: ST_TO_ADDR
// sBazooka := false ;
9578: LD_ADDR_EXP 90
9582: PUSH
9583: LD_INT 0
9585: ST_TO_ADDR
// sMortar := false ;
9586: LD_ADDR_EXP 91
9590: PUSH
9591: LD_INT 0
9593: ST_TO_ADDR
// sRanger := false ;
9594: LD_ADDR_EXP 101
9598: PUSH
9599: LD_INT 0
9601: ST_TO_ADDR
// end ;
9602: LD_VAR 0 1
9606: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
9607: LD_INT 0
9609: PPUSH
9610: PPUSH
9611: PPUSH
9612: PPUSH
9613: PPUSH
// result := [ ] ;
9614: LD_ADDR_VAR 0 1
9618: PUSH
9619: EMPTY
9620: ST_TO_ADDR
// if campaign_id = 1 then
9621: LD_OWVAR 69
9625: PUSH
9626: LD_INT 1
9628: EQUAL
9629: IFFALSE 12567
// begin case mission_number of 1 :
9631: LD_OWVAR 70
9635: PUSH
9636: LD_INT 1
9638: DOUBLE
9639: EQUAL
9640: IFTRUE 9644
9642: GO 9708
9644: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
9645: LD_ADDR_VAR 0 1
9649: PUSH
9650: LD_INT 2
9652: PUSH
9653: LD_INT 4
9655: PUSH
9656: LD_INT 11
9658: PUSH
9659: LD_INT 12
9661: PUSH
9662: LD_INT 15
9664: PUSH
9665: LD_INT 16
9667: PUSH
9668: LD_INT 22
9670: PUSH
9671: LD_INT 23
9673: PUSH
9674: LD_INT 26
9676: PUSH
9677: EMPTY
9678: LIST
9679: LIST
9680: LIST
9681: LIST
9682: LIST
9683: LIST
9684: LIST
9685: LIST
9686: LIST
9687: PUSH
9688: LD_INT 101
9690: PUSH
9691: LD_INT 102
9693: PUSH
9694: LD_INT 106
9696: PUSH
9697: EMPTY
9698: LIST
9699: LIST
9700: LIST
9701: PUSH
9702: EMPTY
9703: LIST
9704: LIST
9705: ST_TO_ADDR
9706: GO 12565
9708: LD_INT 2
9710: DOUBLE
9711: EQUAL
9712: IFTRUE 9716
9714: GO 9788
9716: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
9717: LD_ADDR_VAR 0 1
9721: PUSH
9722: LD_INT 2
9724: PUSH
9725: LD_INT 4
9727: PUSH
9728: LD_INT 11
9730: PUSH
9731: LD_INT 12
9733: PUSH
9734: LD_INT 15
9736: PUSH
9737: LD_INT 16
9739: PUSH
9740: LD_INT 22
9742: PUSH
9743: LD_INT 23
9745: PUSH
9746: LD_INT 26
9748: PUSH
9749: EMPTY
9750: LIST
9751: LIST
9752: LIST
9753: LIST
9754: LIST
9755: LIST
9756: LIST
9757: LIST
9758: LIST
9759: PUSH
9760: LD_INT 101
9762: PUSH
9763: LD_INT 102
9765: PUSH
9766: LD_INT 105
9768: PUSH
9769: LD_INT 106
9771: PUSH
9772: LD_INT 108
9774: PUSH
9775: EMPTY
9776: LIST
9777: LIST
9778: LIST
9779: LIST
9780: LIST
9781: PUSH
9782: EMPTY
9783: LIST
9784: LIST
9785: ST_TO_ADDR
9786: GO 12565
9788: LD_INT 3
9790: DOUBLE
9791: EQUAL
9792: IFTRUE 9796
9794: GO 9872
9796: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
9797: LD_ADDR_VAR 0 1
9801: PUSH
9802: LD_INT 2
9804: PUSH
9805: LD_INT 4
9807: PUSH
9808: LD_INT 5
9810: PUSH
9811: LD_INT 11
9813: PUSH
9814: LD_INT 12
9816: PUSH
9817: LD_INT 15
9819: PUSH
9820: LD_INT 16
9822: PUSH
9823: LD_INT 22
9825: PUSH
9826: LD_INT 26
9828: PUSH
9829: LD_INT 36
9831: PUSH
9832: EMPTY
9833: LIST
9834: LIST
9835: LIST
9836: LIST
9837: LIST
9838: LIST
9839: LIST
9840: LIST
9841: LIST
9842: LIST
9843: PUSH
9844: LD_INT 101
9846: PUSH
9847: LD_INT 102
9849: PUSH
9850: LD_INT 105
9852: PUSH
9853: LD_INT 106
9855: PUSH
9856: LD_INT 108
9858: PUSH
9859: EMPTY
9860: LIST
9861: LIST
9862: LIST
9863: LIST
9864: LIST
9865: PUSH
9866: EMPTY
9867: LIST
9868: LIST
9869: ST_TO_ADDR
9870: GO 12565
9872: LD_INT 4
9874: DOUBLE
9875: EQUAL
9876: IFTRUE 9880
9878: GO 9964
9880: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
9881: LD_ADDR_VAR 0 1
9885: PUSH
9886: LD_INT 2
9888: PUSH
9889: LD_INT 4
9891: PUSH
9892: LD_INT 5
9894: PUSH
9895: LD_INT 8
9897: PUSH
9898: LD_INT 11
9900: PUSH
9901: LD_INT 12
9903: PUSH
9904: LD_INT 15
9906: PUSH
9907: LD_INT 16
9909: PUSH
9910: LD_INT 22
9912: PUSH
9913: LD_INT 23
9915: PUSH
9916: LD_INT 26
9918: PUSH
9919: LD_INT 36
9921: PUSH
9922: EMPTY
9923: LIST
9924: LIST
9925: LIST
9926: LIST
9927: LIST
9928: LIST
9929: LIST
9930: LIST
9931: LIST
9932: LIST
9933: LIST
9934: LIST
9935: PUSH
9936: LD_INT 101
9938: PUSH
9939: LD_INT 102
9941: PUSH
9942: LD_INT 105
9944: PUSH
9945: LD_INT 106
9947: PUSH
9948: LD_INT 108
9950: PUSH
9951: EMPTY
9952: LIST
9953: LIST
9954: LIST
9955: LIST
9956: LIST
9957: PUSH
9958: EMPTY
9959: LIST
9960: LIST
9961: ST_TO_ADDR
9962: GO 12565
9964: LD_INT 5
9966: DOUBLE
9967: EQUAL
9968: IFTRUE 9972
9970: GO 10072
9972: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
9973: LD_ADDR_VAR 0 1
9977: PUSH
9978: LD_INT 2
9980: PUSH
9981: LD_INT 4
9983: PUSH
9984: LD_INT 5
9986: PUSH
9987: LD_INT 6
9989: PUSH
9990: LD_INT 8
9992: PUSH
9993: LD_INT 11
9995: PUSH
9996: LD_INT 12
9998: PUSH
9999: LD_INT 15
10001: PUSH
10002: LD_INT 16
10004: PUSH
10005: LD_INT 22
10007: PUSH
10008: LD_INT 23
10010: PUSH
10011: LD_INT 25
10013: PUSH
10014: LD_INT 26
10016: PUSH
10017: LD_INT 36
10019: PUSH
10020: EMPTY
10021: LIST
10022: LIST
10023: LIST
10024: LIST
10025: LIST
10026: LIST
10027: LIST
10028: LIST
10029: LIST
10030: LIST
10031: LIST
10032: LIST
10033: LIST
10034: LIST
10035: PUSH
10036: LD_INT 101
10038: PUSH
10039: LD_INT 102
10041: PUSH
10042: LD_INT 105
10044: PUSH
10045: LD_INT 106
10047: PUSH
10048: LD_INT 108
10050: PUSH
10051: LD_INT 109
10053: PUSH
10054: LD_INT 112
10056: PUSH
10057: EMPTY
10058: LIST
10059: LIST
10060: LIST
10061: LIST
10062: LIST
10063: LIST
10064: LIST
10065: PUSH
10066: EMPTY
10067: LIST
10068: LIST
10069: ST_TO_ADDR
10070: GO 12565
10072: LD_INT 6
10074: DOUBLE
10075: EQUAL
10076: IFTRUE 10080
10078: GO 10200
10080: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
10081: LD_ADDR_VAR 0 1
10085: PUSH
10086: LD_INT 2
10088: PUSH
10089: LD_INT 4
10091: PUSH
10092: LD_INT 5
10094: PUSH
10095: LD_INT 6
10097: PUSH
10098: LD_INT 8
10100: PUSH
10101: LD_INT 11
10103: PUSH
10104: LD_INT 12
10106: PUSH
10107: LD_INT 15
10109: PUSH
10110: LD_INT 16
10112: PUSH
10113: LD_INT 20
10115: PUSH
10116: LD_INT 21
10118: PUSH
10119: LD_INT 22
10121: PUSH
10122: LD_INT 23
10124: PUSH
10125: LD_INT 25
10127: PUSH
10128: LD_INT 26
10130: PUSH
10131: LD_INT 30
10133: PUSH
10134: LD_INT 31
10136: PUSH
10137: LD_INT 32
10139: PUSH
10140: LD_INT 36
10142: PUSH
10143: EMPTY
10144: LIST
10145: LIST
10146: LIST
10147: LIST
10148: LIST
10149: LIST
10150: LIST
10151: LIST
10152: LIST
10153: LIST
10154: LIST
10155: LIST
10156: LIST
10157: LIST
10158: LIST
10159: LIST
10160: LIST
10161: LIST
10162: LIST
10163: PUSH
10164: LD_INT 101
10166: PUSH
10167: LD_INT 102
10169: PUSH
10170: LD_INT 105
10172: PUSH
10173: LD_INT 106
10175: PUSH
10176: LD_INT 108
10178: PUSH
10179: LD_INT 109
10181: PUSH
10182: LD_INT 112
10184: PUSH
10185: EMPTY
10186: LIST
10187: LIST
10188: LIST
10189: LIST
10190: LIST
10191: LIST
10192: LIST
10193: PUSH
10194: EMPTY
10195: LIST
10196: LIST
10197: ST_TO_ADDR
10198: GO 12565
10200: LD_INT 7
10202: DOUBLE
10203: EQUAL
10204: IFTRUE 10208
10206: GO 10308
10208: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
10209: LD_ADDR_VAR 0 1
10213: PUSH
10214: LD_INT 2
10216: PUSH
10217: LD_INT 4
10219: PUSH
10220: LD_INT 5
10222: PUSH
10223: LD_INT 7
10225: PUSH
10226: LD_INT 11
10228: PUSH
10229: LD_INT 12
10231: PUSH
10232: LD_INT 15
10234: PUSH
10235: LD_INT 16
10237: PUSH
10238: LD_INT 20
10240: PUSH
10241: LD_INT 21
10243: PUSH
10244: LD_INT 22
10246: PUSH
10247: LD_INT 23
10249: PUSH
10250: LD_INT 25
10252: PUSH
10253: LD_INT 26
10255: PUSH
10256: EMPTY
10257: LIST
10258: LIST
10259: LIST
10260: LIST
10261: LIST
10262: LIST
10263: LIST
10264: LIST
10265: LIST
10266: LIST
10267: LIST
10268: LIST
10269: LIST
10270: LIST
10271: PUSH
10272: LD_INT 101
10274: PUSH
10275: LD_INT 102
10277: PUSH
10278: LD_INT 103
10280: PUSH
10281: LD_INT 105
10283: PUSH
10284: LD_INT 106
10286: PUSH
10287: LD_INT 108
10289: PUSH
10290: LD_INT 112
10292: PUSH
10293: EMPTY
10294: LIST
10295: LIST
10296: LIST
10297: LIST
10298: LIST
10299: LIST
10300: LIST
10301: PUSH
10302: EMPTY
10303: LIST
10304: LIST
10305: ST_TO_ADDR
10306: GO 12565
10308: LD_INT 8
10310: DOUBLE
10311: EQUAL
10312: IFTRUE 10316
10314: GO 10444
10316: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
10317: LD_ADDR_VAR 0 1
10321: PUSH
10322: LD_INT 2
10324: PUSH
10325: LD_INT 4
10327: PUSH
10328: LD_INT 5
10330: PUSH
10331: LD_INT 6
10333: PUSH
10334: LD_INT 7
10336: PUSH
10337: LD_INT 8
10339: PUSH
10340: LD_INT 11
10342: PUSH
10343: LD_INT 12
10345: PUSH
10346: LD_INT 15
10348: PUSH
10349: LD_INT 16
10351: PUSH
10352: LD_INT 20
10354: PUSH
10355: LD_INT 21
10357: PUSH
10358: LD_INT 22
10360: PUSH
10361: LD_INT 23
10363: PUSH
10364: LD_INT 25
10366: PUSH
10367: LD_INT 26
10369: PUSH
10370: LD_INT 30
10372: PUSH
10373: LD_INT 31
10375: PUSH
10376: LD_INT 32
10378: PUSH
10379: LD_INT 36
10381: PUSH
10382: EMPTY
10383: LIST
10384: LIST
10385: LIST
10386: LIST
10387: LIST
10388: LIST
10389: LIST
10390: LIST
10391: LIST
10392: LIST
10393: LIST
10394: LIST
10395: LIST
10396: LIST
10397: LIST
10398: LIST
10399: LIST
10400: LIST
10401: LIST
10402: LIST
10403: PUSH
10404: LD_INT 101
10406: PUSH
10407: LD_INT 102
10409: PUSH
10410: LD_INT 103
10412: PUSH
10413: LD_INT 105
10415: PUSH
10416: LD_INT 106
10418: PUSH
10419: LD_INT 108
10421: PUSH
10422: LD_INT 109
10424: PUSH
10425: LD_INT 112
10427: PUSH
10428: EMPTY
10429: LIST
10430: LIST
10431: LIST
10432: LIST
10433: LIST
10434: LIST
10435: LIST
10436: LIST
10437: PUSH
10438: EMPTY
10439: LIST
10440: LIST
10441: ST_TO_ADDR
10442: GO 12565
10444: LD_INT 9
10446: DOUBLE
10447: EQUAL
10448: IFTRUE 10452
10450: GO 10588
10452: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
10453: LD_ADDR_VAR 0 1
10457: PUSH
10458: LD_INT 2
10460: PUSH
10461: LD_INT 4
10463: PUSH
10464: LD_INT 5
10466: PUSH
10467: LD_INT 6
10469: PUSH
10470: LD_INT 7
10472: PUSH
10473: LD_INT 8
10475: PUSH
10476: LD_INT 11
10478: PUSH
10479: LD_INT 12
10481: PUSH
10482: LD_INT 15
10484: PUSH
10485: LD_INT 16
10487: PUSH
10488: LD_INT 20
10490: PUSH
10491: LD_INT 21
10493: PUSH
10494: LD_INT 22
10496: PUSH
10497: LD_INT 23
10499: PUSH
10500: LD_INT 25
10502: PUSH
10503: LD_INT 26
10505: PUSH
10506: LD_INT 28
10508: PUSH
10509: LD_INT 30
10511: PUSH
10512: LD_INT 31
10514: PUSH
10515: LD_INT 32
10517: PUSH
10518: LD_INT 36
10520: PUSH
10521: EMPTY
10522: LIST
10523: LIST
10524: LIST
10525: LIST
10526: LIST
10527: LIST
10528: LIST
10529: LIST
10530: LIST
10531: LIST
10532: LIST
10533: LIST
10534: LIST
10535: LIST
10536: LIST
10537: LIST
10538: LIST
10539: LIST
10540: LIST
10541: LIST
10542: LIST
10543: PUSH
10544: LD_INT 101
10546: PUSH
10547: LD_INT 102
10549: PUSH
10550: LD_INT 103
10552: PUSH
10553: LD_INT 105
10555: PUSH
10556: LD_INT 106
10558: PUSH
10559: LD_INT 108
10561: PUSH
10562: LD_INT 109
10564: PUSH
10565: LD_INT 112
10567: PUSH
10568: LD_INT 114
10570: PUSH
10571: EMPTY
10572: LIST
10573: LIST
10574: LIST
10575: LIST
10576: LIST
10577: LIST
10578: LIST
10579: LIST
10580: LIST
10581: PUSH
10582: EMPTY
10583: LIST
10584: LIST
10585: ST_TO_ADDR
10586: GO 12565
10588: LD_INT 10
10590: DOUBLE
10591: EQUAL
10592: IFTRUE 10596
10594: GO 10780
10596: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
10597: LD_ADDR_VAR 0 1
10601: PUSH
10602: LD_INT 2
10604: PUSH
10605: LD_INT 4
10607: PUSH
10608: LD_INT 5
10610: PUSH
10611: LD_INT 6
10613: PUSH
10614: LD_INT 7
10616: PUSH
10617: LD_INT 8
10619: PUSH
10620: LD_INT 9
10622: PUSH
10623: LD_INT 10
10625: PUSH
10626: LD_INT 11
10628: PUSH
10629: LD_INT 12
10631: PUSH
10632: LD_INT 13
10634: PUSH
10635: LD_INT 14
10637: PUSH
10638: LD_INT 15
10640: PUSH
10641: LD_INT 16
10643: PUSH
10644: LD_INT 17
10646: PUSH
10647: LD_INT 18
10649: PUSH
10650: LD_INT 19
10652: PUSH
10653: LD_INT 20
10655: PUSH
10656: LD_INT 21
10658: PUSH
10659: LD_INT 22
10661: PUSH
10662: LD_INT 23
10664: PUSH
10665: LD_INT 24
10667: PUSH
10668: LD_INT 25
10670: PUSH
10671: LD_INT 26
10673: PUSH
10674: LD_INT 28
10676: PUSH
10677: LD_INT 30
10679: PUSH
10680: LD_INT 31
10682: PUSH
10683: LD_INT 32
10685: PUSH
10686: LD_INT 36
10688: PUSH
10689: EMPTY
10690: LIST
10691: LIST
10692: LIST
10693: LIST
10694: LIST
10695: LIST
10696: LIST
10697: LIST
10698: LIST
10699: LIST
10700: LIST
10701: LIST
10702: LIST
10703: LIST
10704: LIST
10705: LIST
10706: LIST
10707: LIST
10708: LIST
10709: LIST
10710: LIST
10711: LIST
10712: LIST
10713: LIST
10714: LIST
10715: LIST
10716: LIST
10717: LIST
10718: LIST
10719: PUSH
10720: LD_INT 101
10722: PUSH
10723: LD_INT 102
10725: PUSH
10726: LD_INT 103
10728: PUSH
10729: LD_INT 104
10731: PUSH
10732: LD_INT 105
10734: PUSH
10735: LD_INT 106
10737: PUSH
10738: LD_INT 107
10740: PUSH
10741: LD_INT 108
10743: PUSH
10744: LD_INT 109
10746: PUSH
10747: LD_INT 110
10749: PUSH
10750: LD_INT 111
10752: PUSH
10753: LD_INT 112
10755: PUSH
10756: LD_INT 114
10758: PUSH
10759: EMPTY
10760: LIST
10761: LIST
10762: LIST
10763: LIST
10764: LIST
10765: LIST
10766: LIST
10767: LIST
10768: LIST
10769: LIST
10770: LIST
10771: LIST
10772: LIST
10773: PUSH
10774: EMPTY
10775: LIST
10776: LIST
10777: ST_TO_ADDR
10778: GO 12565
10780: LD_INT 11
10782: DOUBLE
10783: EQUAL
10784: IFTRUE 10788
10786: GO 10980
10788: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
10789: LD_ADDR_VAR 0 1
10793: PUSH
10794: LD_INT 2
10796: PUSH
10797: LD_INT 3
10799: PUSH
10800: LD_INT 4
10802: PUSH
10803: LD_INT 5
10805: PUSH
10806: LD_INT 6
10808: PUSH
10809: LD_INT 7
10811: PUSH
10812: LD_INT 8
10814: PUSH
10815: LD_INT 9
10817: PUSH
10818: LD_INT 10
10820: PUSH
10821: LD_INT 11
10823: PUSH
10824: LD_INT 12
10826: PUSH
10827: LD_INT 13
10829: PUSH
10830: LD_INT 14
10832: PUSH
10833: LD_INT 15
10835: PUSH
10836: LD_INT 16
10838: PUSH
10839: LD_INT 17
10841: PUSH
10842: LD_INT 18
10844: PUSH
10845: LD_INT 19
10847: PUSH
10848: LD_INT 20
10850: PUSH
10851: LD_INT 21
10853: PUSH
10854: LD_INT 22
10856: PUSH
10857: LD_INT 23
10859: PUSH
10860: LD_INT 24
10862: PUSH
10863: LD_INT 25
10865: PUSH
10866: LD_INT 26
10868: PUSH
10869: LD_INT 28
10871: PUSH
10872: LD_INT 30
10874: PUSH
10875: LD_INT 31
10877: PUSH
10878: LD_INT 32
10880: PUSH
10881: LD_INT 34
10883: PUSH
10884: LD_INT 36
10886: PUSH
10887: EMPTY
10888: LIST
10889: LIST
10890: LIST
10891: LIST
10892: LIST
10893: LIST
10894: LIST
10895: LIST
10896: LIST
10897: LIST
10898: LIST
10899: LIST
10900: LIST
10901: LIST
10902: LIST
10903: LIST
10904: LIST
10905: LIST
10906: LIST
10907: LIST
10908: LIST
10909: LIST
10910: LIST
10911: LIST
10912: LIST
10913: LIST
10914: LIST
10915: LIST
10916: LIST
10917: LIST
10918: LIST
10919: PUSH
10920: LD_INT 101
10922: PUSH
10923: LD_INT 102
10925: PUSH
10926: LD_INT 103
10928: PUSH
10929: LD_INT 104
10931: PUSH
10932: LD_INT 105
10934: PUSH
10935: LD_INT 106
10937: PUSH
10938: LD_INT 107
10940: PUSH
10941: LD_INT 108
10943: PUSH
10944: LD_INT 109
10946: PUSH
10947: LD_INT 110
10949: PUSH
10950: LD_INT 111
10952: PUSH
10953: LD_INT 112
10955: PUSH
10956: LD_INT 114
10958: PUSH
10959: EMPTY
10960: LIST
10961: LIST
10962: LIST
10963: LIST
10964: LIST
10965: LIST
10966: LIST
10967: LIST
10968: LIST
10969: LIST
10970: LIST
10971: LIST
10972: LIST
10973: PUSH
10974: EMPTY
10975: LIST
10976: LIST
10977: ST_TO_ADDR
10978: GO 12565
10980: LD_INT 12
10982: DOUBLE
10983: EQUAL
10984: IFTRUE 10988
10986: GO 11196
10988: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
10989: LD_ADDR_VAR 0 1
10993: PUSH
10994: LD_INT 1
10996: PUSH
10997: LD_INT 2
10999: PUSH
11000: LD_INT 3
11002: PUSH
11003: LD_INT 4
11005: PUSH
11006: LD_INT 5
11008: PUSH
11009: LD_INT 6
11011: PUSH
11012: LD_INT 7
11014: PUSH
11015: LD_INT 8
11017: PUSH
11018: LD_INT 9
11020: PUSH
11021: LD_INT 10
11023: PUSH
11024: LD_INT 11
11026: PUSH
11027: LD_INT 12
11029: PUSH
11030: LD_INT 13
11032: PUSH
11033: LD_INT 14
11035: PUSH
11036: LD_INT 15
11038: PUSH
11039: LD_INT 16
11041: PUSH
11042: LD_INT 17
11044: PUSH
11045: LD_INT 18
11047: PUSH
11048: LD_INT 19
11050: PUSH
11051: LD_INT 20
11053: PUSH
11054: LD_INT 21
11056: PUSH
11057: LD_INT 22
11059: PUSH
11060: LD_INT 23
11062: PUSH
11063: LD_INT 24
11065: PUSH
11066: LD_INT 25
11068: PUSH
11069: LD_INT 26
11071: PUSH
11072: LD_INT 27
11074: PUSH
11075: LD_INT 28
11077: PUSH
11078: LD_INT 30
11080: PUSH
11081: LD_INT 31
11083: PUSH
11084: LD_INT 32
11086: PUSH
11087: LD_INT 33
11089: PUSH
11090: LD_INT 34
11092: PUSH
11093: LD_INT 36
11095: PUSH
11096: EMPTY
11097: LIST
11098: LIST
11099: LIST
11100: LIST
11101: LIST
11102: LIST
11103: LIST
11104: LIST
11105: LIST
11106: LIST
11107: LIST
11108: LIST
11109: LIST
11110: LIST
11111: LIST
11112: LIST
11113: LIST
11114: LIST
11115: LIST
11116: LIST
11117: LIST
11118: LIST
11119: LIST
11120: LIST
11121: LIST
11122: LIST
11123: LIST
11124: LIST
11125: LIST
11126: LIST
11127: LIST
11128: LIST
11129: LIST
11130: LIST
11131: PUSH
11132: LD_INT 101
11134: PUSH
11135: LD_INT 102
11137: PUSH
11138: LD_INT 103
11140: PUSH
11141: LD_INT 104
11143: PUSH
11144: LD_INT 105
11146: PUSH
11147: LD_INT 106
11149: PUSH
11150: LD_INT 107
11152: PUSH
11153: LD_INT 108
11155: PUSH
11156: LD_INT 109
11158: PUSH
11159: LD_INT 110
11161: PUSH
11162: LD_INT 111
11164: PUSH
11165: LD_INT 112
11167: PUSH
11168: LD_INT 113
11170: PUSH
11171: LD_INT 114
11173: PUSH
11174: EMPTY
11175: LIST
11176: LIST
11177: LIST
11178: LIST
11179: LIST
11180: LIST
11181: LIST
11182: LIST
11183: LIST
11184: LIST
11185: LIST
11186: LIST
11187: LIST
11188: LIST
11189: PUSH
11190: EMPTY
11191: LIST
11192: LIST
11193: ST_TO_ADDR
11194: GO 12565
11196: LD_INT 13
11198: DOUBLE
11199: EQUAL
11200: IFTRUE 11204
11202: GO 11400
11204: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
11205: LD_ADDR_VAR 0 1
11209: PUSH
11210: LD_INT 1
11212: PUSH
11213: LD_INT 2
11215: PUSH
11216: LD_INT 3
11218: PUSH
11219: LD_INT 4
11221: PUSH
11222: LD_INT 5
11224: PUSH
11225: LD_INT 8
11227: PUSH
11228: LD_INT 9
11230: PUSH
11231: LD_INT 10
11233: PUSH
11234: LD_INT 11
11236: PUSH
11237: LD_INT 12
11239: PUSH
11240: LD_INT 14
11242: PUSH
11243: LD_INT 15
11245: PUSH
11246: LD_INT 16
11248: PUSH
11249: LD_INT 17
11251: PUSH
11252: LD_INT 18
11254: PUSH
11255: LD_INT 19
11257: PUSH
11258: LD_INT 20
11260: PUSH
11261: LD_INT 21
11263: PUSH
11264: LD_INT 22
11266: PUSH
11267: LD_INT 23
11269: PUSH
11270: LD_INT 24
11272: PUSH
11273: LD_INT 25
11275: PUSH
11276: LD_INT 26
11278: PUSH
11279: LD_INT 27
11281: PUSH
11282: LD_INT 28
11284: PUSH
11285: LD_INT 30
11287: PUSH
11288: LD_INT 31
11290: PUSH
11291: LD_INT 32
11293: PUSH
11294: LD_INT 33
11296: PUSH
11297: LD_INT 34
11299: PUSH
11300: LD_INT 36
11302: PUSH
11303: EMPTY
11304: LIST
11305: LIST
11306: LIST
11307: LIST
11308: LIST
11309: LIST
11310: LIST
11311: LIST
11312: LIST
11313: LIST
11314: LIST
11315: LIST
11316: LIST
11317: LIST
11318: LIST
11319: LIST
11320: LIST
11321: LIST
11322: LIST
11323: LIST
11324: LIST
11325: LIST
11326: LIST
11327: LIST
11328: LIST
11329: LIST
11330: LIST
11331: LIST
11332: LIST
11333: LIST
11334: LIST
11335: PUSH
11336: LD_INT 101
11338: PUSH
11339: LD_INT 102
11341: PUSH
11342: LD_INT 103
11344: PUSH
11345: LD_INT 104
11347: PUSH
11348: LD_INT 105
11350: PUSH
11351: LD_INT 106
11353: PUSH
11354: LD_INT 107
11356: PUSH
11357: LD_INT 108
11359: PUSH
11360: LD_INT 109
11362: PUSH
11363: LD_INT 110
11365: PUSH
11366: LD_INT 111
11368: PUSH
11369: LD_INT 112
11371: PUSH
11372: LD_INT 113
11374: PUSH
11375: LD_INT 114
11377: PUSH
11378: EMPTY
11379: LIST
11380: LIST
11381: LIST
11382: LIST
11383: LIST
11384: LIST
11385: LIST
11386: LIST
11387: LIST
11388: LIST
11389: LIST
11390: LIST
11391: LIST
11392: LIST
11393: PUSH
11394: EMPTY
11395: LIST
11396: LIST
11397: ST_TO_ADDR
11398: GO 12565
11400: LD_INT 14
11402: DOUBLE
11403: EQUAL
11404: IFTRUE 11408
11406: GO 11620
11408: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
11409: LD_ADDR_VAR 0 1
11413: PUSH
11414: LD_INT 1
11416: PUSH
11417: LD_INT 2
11419: PUSH
11420: LD_INT 3
11422: PUSH
11423: LD_INT 4
11425: PUSH
11426: LD_INT 5
11428: PUSH
11429: LD_INT 6
11431: PUSH
11432: LD_INT 7
11434: PUSH
11435: LD_INT 8
11437: PUSH
11438: LD_INT 9
11440: PUSH
11441: LD_INT 10
11443: PUSH
11444: LD_INT 11
11446: PUSH
11447: LD_INT 12
11449: PUSH
11450: LD_INT 13
11452: PUSH
11453: LD_INT 14
11455: PUSH
11456: LD_INT 15
11458: PUSH
11459: LD_INT 16
11461: PUSH
11462: LD_INT 17
11464: PUSH
11465: LD_INT 18
11467: PUSH
11468: LD_INT 19
11470: PUSH
11471: LD_INT 20
11473: PUSH
11474: LD_INT 21
11476: PUSH
11477: LD_INT 22
11479: PUSH
11480: LD_INT 23
11482: PUSH
11483: LD_INT 24
11485: PUSH
11486: LD_INT 25
11488: PUSH
11489: LD_INT 26
11491: PUSH
11492: LD_INT 27
11494: PUSH
11495: LD_INT 28
11497: PUSH
11498: LD_INT 29
11500: PUSH
11501: LD_INT 30
11503: PUSH
11504: LD_INT 31
11506: PUSH
11507: LD_INT 32
11509: PUSH
11510: LD_INT 33
11512: PUSH
11513: LD_INT 34
11515: PUSH
11516: LD_INT 36
11518: PUSH
11519: EMPTY
11520: LIST
11521: LIST
11522: LIST
11523: LIST
11524: LIST
11525: LIST
11526: LIST
11527: LIST
11528: LIST
11529: LIST
11530: LIST
11531: LIST
11532: LIST
11533: LIST
11534: LIST
11535: LIST
11536: LIST
11537: LIST
11538: LIST
11539: LIST
11540: LIST
11541: LIST
11542: LIST
11543: LIST
11544: LIST
11545: LIST
11546: LIST
11547: LIST
11548: LIST
11549: LIST
11550: LIST
11551: LIST
11552: LIST
11553: LIST
11554: LIST
11555: PUSH
11556: LD_INT 101
11558: PUSH
11559: LD_INT 102
11561: PUSH
11562: LD_INT 103
11564: PUSH
11565: LD_INT 104
11567: PUSH
11568: LD_INT 105
11570: PUSH
11571: LD_INT 106
11573: PUSH
11574: LD_INT 107
11576: PUSH
11577: LD_INT 108
11579: PUSH
11580: LD_INT 109
11582: PUSH
11583: LD_INT 110
11585: PUSH
11586: LD_INT 111
11588: PUSH
11589: LD_INT 112
11591: PUSH
11592: LD_INT 113
11594: PUSH
11595: LD_INT 114
11597: PUSH
11598: EMPTY
11599: LIST
11600: LIST
11601: LIST
11602: LIST
11603: LIST
11604: LIST
11605: LIST
11606: LIST
11607: LIST
11608: LIST
11609: LIST
11610: LIST
11611: LIST
11612: LIST
11613: PUSH
11614: EMPTY
11615: LIST
11616: LIST
11617: ST_TO_ADDR
11618: GO 12565
11620: LD_INT 15
11622: DOUBLE
11623: EQUAL
11624: IFTRUE 11628
11626: GO 11840
11628: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
11629: LD_ADDR_VAR 0 1
11633: PUSH
11634: LD_INT 1
11636: PUSH
11637: LD_INT 2
11639: PUSH
11640: LD_INT 3
11642: PUSH
11643: LD_INT 4
11645: PUSH
11646: LD_INT 5
11648: PUSH
11649: LD_INT 6
11651: PUSH
11652: LD_INT 7
11654: PUSH
11655: LD_INT 8
11657: PUSH
11658: LD_INT 9
11660: PUSH
11661: LD_INT 10
11663: PUSH
11664: LD_INT 11
11666: PUSH
11667: LD_INT 12
11669: PUSH
11670: LD_INT 13
11672: PUSH
11673: LD_INT 14
11675: PUSH
11676: LD_INT 15
11678: PUSH
11679: LD_INT 16
11681: PUSH
11682: LD_INT 17
11684: PUSH
11685: LD_INT 18
11687: PUSH
11688: LD_INT 19
11690: PUSH
11691: LD_INT 20
11693: PUSH
11694: LD_INT 21
11696: PUSH
11697: LD_INT 22
11699: PUSH
11700: LD_INT 23
11702: PUSH
11703: LD_INT 24
11705: PUSH
11706: LD_INT 25
11708: PUSH
11709: LD_INT 26
11711: PUSH
11712: LD_INT 27
11714: PUSH
11715: LD_INT 28
11717: PUSH
11718: LD_INT 29
11720: PUSH
11721: LD_INT 30
11723: PUSH
11724: LD_INT 31
11726: PUSH
11727: LD_INT 32
11729: PUSH
11730: LD_INT 33
11732: PUSH
11733: LD_INT 34
11735: PUSH
11736: LD_INT 36
11738: PUSH
11739: EMPTY
11740: LIST
11741: LIST
11742: LIST
11743: LIST
11744: LIST
11745: LIST
11746: LIST
11747: LIST
11748: LIST
11749: LIST
11750: LIST
11751: LIST
11752: LIST
11753: LIST
11754: LIST
11755: LIST
11756: LIST
11757: LIST
11758: LIST
11759: LIST
11760: LIST
11761: LIST
11762: LIST
11763: LIST
11764: LIST
11765: LIST
11766: LIST
11767: LIST
11768: LIST
11769: LIST
11770: LIST
11771: LIST
11772: LIST
11773: LIST
11774: LIST
11775: PUSH
11776: LD_INT 101
11778: PUSH
11779: LD_INT 102
11781: PUSH
11782: LD_INT 103
11784: PUSH
11785: LD_INT 104
11787: PUSH
11788: LD_INT 105
11790: PUSH
11791: LD_INT 106
11793: PUSH
11794: LD_INT 107
11796: PUSH
11797: LD_INT 108
11799: PUSH
11800: LD_INT 109
11802: PUSH
11803: LD_INT 110
11805: PUSH
11806: LD_INT 111
11808: PUSH
11809: LD_INT 112
11811: PUSH
11812: LD_INT 113
11814: PUSH
11815: LD_INT 114
11817: PUSH
11818: EMPTY
11819: LIST
11820: LIST
11821: LIST
11822: LIST
11823: LIST
11824: LIST
11825: LIST
11826: LIST
11827: LIST
11828: LIST
11829: LIST
11830: LIST
11831: LIST
11832: LIST
11833: PUSH
11834: EMPTY
11835: LIST
11836: LIST
11837: ST_TO_ADDR
11838: GO 12565
11840: LD_INT 16
11842: DOUBLE
11843: EQUAL
11844: IFTRUE 11848
11846: GO 11972
11848: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
11849: LD_ADDR_VAR 0 1
11853: PUSH
11854: LD_INT 2
11856: PUSH
11857: LD_INT 4
11859: PUSH
11860: LD_INT 5
11862: PUSH
11863: LD_INT 7
11865: PUSH
11866: LD_INT 11
11868: PUSH
11869: LD_INT 12
11871: PUSH
11872: LD_INT 15
11874: PUSH
11875: LD_INT 16
11877: PUSH
11878: LD_INT 20
11880: PUSH
11881: LD_INT 21
11883: PUSH
11884: LD_INT 22
11886: PUSH
11887: LD_INT 23
11889: PUSH
11890: LD_INT 25
11892: PUSH
11893: LD_INT 26
11895: PUSH
11896: LD_INT 30
11898: PUSH
11899: LD_INT 31
11901: PUSH
11902: LD_INT 32
11904: PUSH
11905: LD_INT 33
11907: PUSH
11908: LD_INT 34
11910: PUSH
11911: EMPTY
11912: LIST
11913: LIST
11914: LIST
11915: LIST
11916: LIST
11917: LIST
11918: LIST
11919: LIST
11920: LIST
11921: LIST
11922: LIST
11923: LIST
11924: LIST
11925: LIST
11926: LIST
11927: LIST
11928: LIST
11929: LIST
11930: LIST
11931: PUSH
11932: LD_INT 101
11934: PUSH
11935: LD_INT 102
11937: PUSH
11938: LD_INT 103
11940: PUSH
11941: LD_INT 106
11943: PUSH
11944: LD_INT 108
11946: PUSH
11947: LD_INT 112
11949: PUSH
11950: LD_INT 113
11952: PUSH
11953: LD_INT 114
11955: PUSH
11956: EMPTY
11957: LIST
11958: LIST
11959: LIST
11960: LIST
11961: LIST
11962: LIST
11963: LIST
11964: LIST
11965: PUSH
11966: EMPTY
11967: LIST
11968: LIST
11969: ST_TO_ADDR
11970: GO 12565
11972: LD_INT 17
11974: DOUBLE
11975: EQUAL
11976: IFTRUE 11980
11978: GO 12192
11980: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
11981: LD_ADDR_VAR 0 1
11985: PUSH
11986: LD_INT 1
11988: PUSH
11989: LD_INT 2
11991: PUSH
11992: LD_INT 3
11994: PUSH
11995: LD_INT 4
11997: PUSH
11998: LD_INT 5
12000: PUSH
12001: LD_INT 6
12003: PUSH
12004: LD_INT 7
12006: PUSH
12007: LD_INT 8
12009: PUSH
12010: LD_INT 9
12012: PUSH
12013: LD_INT 10
12015: PUSH
12016: LD_INT 11
12018: PUSH
12019: LD_INT 12
12021: PUSH
12022: LD_INT 13
12024: PUSH
12025: LD_INT 14
12027: PUSH
12028: LD_INT 15
12030: PUSH
12031: LD_INT 16
12033: PUSH
12034: LD_INT 17
12036: PUSH
12037: LD_INT 18
12039: PUSH
12040: LD_INT 19
12042: PUSH
12043: LD_INT 20
12045: PUSH
12046: LD_INT 21
12048: PUSH
12049: LD_INT 22
12051: PUSH
12052: LD_INT 23
12054: PUSH
12055: LD_INT 24
12057: PUSH
12058: LD_INT 25
12060: PUSH
12061: LD_INT 26
12063: PUSH
12064: LD_INT 27
12066: PUSH
12067: LD_INT 28
12069: PUSH
12070: LD_INT 29
12072: PUSH
12073: LD_INT 30
12075: PUSH
12076: LD_INT 31
12078: PUSH
12079: LD_INT 32
12081: PUSH
12082: LD_INT 33
12084: PUSH
12085: LD_INT 34
12087: PUSH
12088: LD_INT 36
12090: PUSH
12091: EMPTY
12092: LIST
12093: LIST
12094: LIST
12095: LIST
12096: LIST
12097: LIST
12098: LIST
12099: LIST
12100: LIST
12101: LIST
12102: LIST
12103: LIST
12104: LIST
12105: LIST
12106: LIST
12107: LIST
12108: LIST
12109: LIST
12110: LIST
12111: LIST
12112: LIST
12113: LIST
12114: LIST
12115: LIST
12116: LIST
12117: LIST
12118: LIST
12119: LIST
12120: LIST
12121: LIST
12122: LIST
12123: LIST
12124: LIST
12125: LIST
12126: LIST
12127: PUSH
12128: LD_INT 101
12130: PUSH
12131: LD_INT 102
12133: PUSH
12134: LD_INT 103
12136: PUSH
12137: LD_INT 104
12139: PUSH
12140: LD_INT 105
12142: PUSH
12143: LD_INT 106
12145: PUSH
12146: LD_INT 107
12148: PUSH
12149: LD_INT 108
12151: PUSH
12152: LD_INT 109
12154: PUSH
12155: LD_INT 110
12157: PUSH
12158: LD_INT 111
12160: PUSH
12161: LD_INT 112
12163: PUSH
12164: LD_INT 113
12166: PUSH
12167: LD_INT 114
12169: PUSH
12170: EMPTY
12171: LIST
12172: LIST
12173: LIST
12174: LIST
12175: LIST
12176: LIST
12177: LIST
12178: LIST
12179: LIST
12180: LIST
12181: LIST
12182: LIST
12183: LIST
12184: LIST
12185: PUSH
12186: EMPTY
12187: LIST
12188: LIST
12189: ST_TO_ADDR
12190: GO 12565
12192: LD_INT 18
12194: DOUBLE
12195: EQUAL
12196: IFTRUE 12200
12198: GO 12336
12200: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
12201: LD_ADDR_VAR 0 1
12205: PUSH
12206: LD_INT 2
12208: PUSH
12209: LD_INT 4
12211: PUSH
12212: LD_INT 5
12214: PUSH
12215: LD_INT 7
12217: PUSH
12218: LD_INT 11
12220: PUSH
12221: LD_INT 12
12223: PUSH
12224: LD_INT 15
12226: PUSH
12227: LD_INT 16
12229: PUSH
12230: LD_INT 20
12232: PUSH
12233: LD_INT 21
12235: PUSH
12236: LD_INT 22
12238: PUSH
12239: LD_INT 23
12241: PUSH
12242: LD_INT 25
12244: PUSH
12245: LD_INT 26
12247: PUSH
12248: LD_INT 30
12250: PUSH
12251: LD_INT 31
12253: PUSH
12254: LD_INT 32
12256: PUSH
12257: LD_INT 33
12259: PUSH
12260: LD_INT 34
12262: PUSH
12263: LD_INT 35
12265: PUSH
12266: LD_INT 36
12268: PUSH
12269: EMPTY
12270: LIST
12271: LIST
12272: LIST
12273: LIST
12274: LIST
12275: LIST
12276: LIST
12277: LIST
12278: LIST
12279: LIST
12280: LIST
12281: LIST
12282: LIST
12283: LIST
12284: LIST
12285: LIST
12286: LIST
12287: LIST
12288: LIST
12289: LIST
12290: LIST
12291: PUSH
12292: LD_INT 101
12294: PUSH
12295: LD_INT 102
12297: PUSH
12298: LD_INT 103
12300: PUSH
12301: LD_INT 106
12303: PUSH
12304: LD_INT 108
12306: PUSH
12307: LD_INT 112
12309: PUSH
12310: LD_INT 113
12312: PUSH
12313: LD_INT 114
12315: PUSH
12316: LD_INT 115
12318: PUSH
12319: EMPTY
12320: LIST
12321: LIST
12322: LIST
12323: LIST
12324: LIST
12325: LIST
12326: LIST
12327: LIST
12328: LIST
12329: PUSH
12330: EMPTY
12331: LIST
12332: LIST
12333: ST_TO_ADDR
12334: GO 12565
12336: LD_INT 19
12338: DOUBLE
12339: EQUAL
12340: IFTRUE 12344
12342: GO 12564
12344: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
12345: LD_ADDR_VAR 0 1
12349: PUSH
12350: LD_INT 1
12352: PUSH
12353: LD_INT 2
12355: PUSH
12356: LD_INT 3
12358: PUSH
12359: LD_INT 4
12361: PUSH
12362: LD_INT 5
12364: PUSH
12365: LD_INT 6
12367: PUSH
12368: LD_INT 7
12370: PUSH
12371: LD_INT 8
12373: PUSH
12374: LD_INT 9
12376: PUSH
12377: LD_INT 10
12379: PUSH
12380: LD_INT 11
12382: PUSH
12383: LD_INT 12
12385: PUSH
12386: LD_INT 13
12388: PUSH
12389: LD_INT 14
12391: PUSH
12392: LD_INT 15
12394: PUSH
12395: LD_INT 16
12397: PUSH
12398: LD_INT 17
12400: PUSH
12401: LD_INT 18
12403: PUSH
12404: LD_INT 19
12406: PUSH
12407: LD_INT 20
12409: PUSH
12410: LD_INT 21
12412: PUSH
12413: LD_INT 22
12415: PUSH
12416: LD_INT 23
12418: PUSH
12419: LD_INT 24
12421: PUSH
12422: LD_INT 25
12424: PUSH
12425: LD_INT 26
12427: PUSH
12428: LD_INT 27
12430: PUSH
12431: LD_INT 28
12433: PUSH
12434: LD_INT 29
12436: PUSH
12437: LD_INT 30
12439: PUSH
12440: LD_INT 31
12442: PUSH
12443: LD_INT 32
12445: PUSH
12446: LD_INT 33
12448: PUSH
12449: LD_INT 34
12451: PUSH
12452: LD_INT 35
12454: PUSH
12455: LD_INT 36
12457: PUSH
12458: EMPTY
12459: LIST
12460: LIST
12461: LIST
12462: LIST
12463: LIST
12464: LIST
12465: LIST
12466: LIST
12467: LIST
12468: LIST
12469: LIST
12470: LIST
12471: LIST
12472: LIST
12473: LIST
12474: LIST
12475: LIST
12476: LIST
12477: LIST
12478: LIST
12479: LIST
12480: LIST
12481: LIST
12482: LIST
12483: LIST
12484: LIST
12485: LIST
12486: LIST
12487: LIST
12488: LIST
12489: LIST
12490: LIST
12491: LIST
12492: LIST
12493: LIST
12494: LIST
12495: PUSH
12496: LD_INT 101
12498: PUSH
12499: LD_INT 102
12501: PUSH
12502: LD_INT 103
12504: PUSH
12505: LD_INT 104
12507: PUSH
12508: LD_INT 105
12510: PUSH
12511: LD_INT 106
12513: PUSH
12514: LD_INT 107
12516: PUSH
12517: LD_INT 108
12519: PUSH
12520: LD_INT 109
12522: PUSH
12523: LD_INT 110
12525: PUSH
12526: LD_INT 111
12528: PUSH
12529: LD_INT 112
12531: PUSH
12532: LD_INT 113
12534: PUSH
12535: LD_INT 114
12537: PUSH
12538: LD_INT 115
12540: PUSH
12541: EMPTY
12542: LIST
12543: LIST
12544: LIST
12545: LIST
12546: LIST
12547: LIST
12548: LIST
12549: LIST
12550: LIST
12551: LIST
12552: LIST
12553: LIST
12554: LIST
12555: LIST
12556: LIST
12557: PUSH
12558: EMPTY
12559: LIST
12560: LIST
12561: ST_TO_ADDR
12562: GO 12565
12564: POP
// end else
12565: GO 12784
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
12567: LD_ADDR_VAR 0 1
12571: PUSH
12572: LD_INT 1
12574: PUSH
12575: LD_INT 2
12577: PUSH
12578: LD_INT 3
12580: PUSH
12581: LD_INT 4
12583: PUSH
12584: LD_INT 5
12586: PUSH
12587: LD_INT 6
12589: PUSH
12590: LD_INT 7
12592: PUSH
12593: LD_INT 8
12595: PUSH
12596: LD_INT 9
12598: PUSH
12599: LD_INT 10
12601: PUSH
12602: LD_INT 11
12604: PUSH
12605: LD_INT 12
12607: PUSH
12608: LD_INT 13
12610: PUSH
12611: LD_INT 14
12613: PUSH
12614: LD_INT 15
12616: PUSH
12617: LD_INT 16
12619: PUSH
12620: LD_INT 17
12622: PUSH
12623: LD_INT 18
12625: PUSH
12626: LD_INT 19
12628: PUSH
12629: LD_INT 20
12631: PUSH
12632: LD_INT 21
12634: PUSH
12635: LD_INT 22
12637: PUSH
12638: LD_INT 23
12640: PUSH
12641: LD_INT 24
12643: PUSH
12644: LD_INT 25
12646: PUSH
12647: LD_INT 26
12649: PUSH
12650: LD_INT 27
12652: PUSH
12653: LD_INT 28
12655: PUSH
12656: LD_INT 29
12658: PUSH
12659: LD_INT 30
12661: PUSH
12662: LD_INT 31
12664: PUSH
12665: LD_INT 32
12667: PUSH
12668: LD_INT 33
12670: PUSH
12671: LD_INT 34
12673: PUSH
12674: LD_INT 35
12676: PUSH
12677: LD_INT 36
12679: PUSH
12680: EMPTY
12681: LIST
12682: LIST
12683: LIST
12684: LIST
12685: LIST
12686: LIST
12687: LIST
12688: LIST
12689: LIST
12690: LIST
12691: LIST
12692: LIST
12693: LIST
12694: LIST
12695: LIST
12696: LIST
12697: LIST
12698: LIST
12699: LIST
12700: LIST
12701: LIST
12702: LIST
12703: LIST
12704: LIST
12705: LIST
12706: LIST
12707: LIST
12708: LIST
12709: LIST
12710: LIST
12711: LIST
12712: LIST
12713: LIST
12714: LIST
12715: LIST
12716: LIST
12717: PUSH
12718: LD_INT 101
12720: PUSH
12721: LD_INT 102
12723: PUSH
12724: LD_INT 103
12726: PUSH
12727: LD_INT 104
12729: PUSH
12730: LD_INT 105
12732: PUSH
12733: LD_INT 106
12735: PUSH
12736: LD_INT 107
12738: PUSH
12739: LD_INT 108
12741: PUSH
12742: LD_INT 109
12744: PUSH
12745: LD_INT 110
12747: PUSH
12748: LD_INT 111
12750: PUSH
12751: LD_INT 112
12753: PUSH
12754: LD_INT 113
12756: PUSH
12757: LD_INT 114
12759: PUSH
12760: LD_INT 115
12762: PUSH
12763: EMPTY
12764: LIST
12765: LIST
12766: LIST
12767: LIST
12768: LIST
12769: LIST
12770: LIST
12771: LIST
12772: LIST
12773: LIST
12774: LIST
12775: LIST
12776: LIST
12777: LIST
12778: LIST
12779: PUSH
12780: EMPTY
12781: LIST
12782: LIST
12783: ST_TO_ADDR
// if result then
12784: LD_VAR 0 1
12788: IFFALSE 13077
// begin normal :=  ;
12790: LD_ADDR_VAR 0 3
12794: PUSH
12795: LD_STRING 
12797: ST_TO_ADDR
// hardcore :=  ;
12798: LD_ADDR_VAR 0 4
12802: PUSH
12803: LD_STRING 
12805: ST_TO_ADDR
// for i = 1 to normalCounter do
12806: LD_ADDR_VAR 0 5
12810: PUSH
12811: DOUBLE
12812: LD_INT 1
12814: DEC
12815: ST_TO_ADDR
12816: LD_EXP 49
12820: PUSH
12821: FOR_TO
12822: IFFALSE 12923
// begin tmp := 0 ;
12824: LD_ADDR_VAR 0 2
12828: PUSH
12829: LD_STRING 0
12831: ST_TO_ADDR
// if result [ 1 ] then
12832: LD_VAR 0 1
12836: PUSH
12837: LD_INT 1
12839: ARRAY
12840: IFFALSE 12905
// if result [ 1 ] [ 1 ] = i then
12842: LD_VAR 0 1
12846: PUSH
12847: LD_INT 1
12849: ARRAY
12850: PUSH
12851: LD_INT 1
12853: ARRAY
12854: PUSH
12855: LD_VAR 0 5
12859: EQUAL
12860: IFFALSE 12905
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
12862: LD_ADDR_VAR 0 1
12866: PUSH
12867: LD_VAR 0 1
12871: PPUSH
12872: LD_INT 1
12874: PPUSH
12875: LD_VAR 0 1
12879: PUSH
12880: LD_INT 1
12882: ARRAY
12883: PPUSH
12884: LD_INT 1
12886: PPUSH
12887: CALL_OW 3
12891: PPUSH
12892: CALL_OW 1
12896: ST_TO_ADDR
// tmp := 1 ;
12897: LD_ADDR_VAR 0 2
12901: PUSH
12902: LD_STRING 1
12904: ST_TO_ADDR
// end ; normal := normal & tmp ;
12905: LD_ADDR_VAR 0 3
12909: PUSH
12910: LD_VAR 0 3
12914: PUSH
12915: LD_VAR 0 2
12919: STR
12920: ST_TO_ADDR
// end ;
12921: GO 12821
12923: POP
12924: POP
// for i = 1 to hardcoreCounter do
12925: LD_ADDR_VAR 0 5
12929: PUSH
12930: DOUBLE
12931: LD_INT 1
12933: DEC
12934: ST_TO_ADDR
12935: LD_EXP 50
12939: PUSH
12940: FOR_TO
12941: IFFALSE 13046
// begin tmp := 0 ;
12943: LD_ADDR_VAR 0 2
12947: PUSH
12948: LD_STRING 0
12950: ST_TO_ADDR
// if result [ 2 ] then
12951: LD_VAR 0 1
12955: PUSH
12956: LD_INT 2
12958: ARRAY
12959: IFFALSE 13028
// if result [ 2 ] [ 1 ] = 100 + i then
12961: LD_VAR 0 1
12965: PUSH
12966: LD_INT 2
12968: ARRAY
12969: PUSH
12970: LD_INT 1
12972: ARRAY
12973: PUSH
12974: LD_INT 100
12976: PUSH
12977: LD_VAR 0 5
12981: PLUS
12982: EQUAL
12983: IFFALSE 13028
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
12985: LD_ADDR_VAR 0 1
12989: PUSH
12990: LD_VAR 0 1
12994: PPUSH
12995: LD_INT 2
12997: PPUSH
12998: LD_VAR 0 1
13002: PUSH
13003: LD_INT 2
13005: ARRAY
13006: PPUSH
13007: LD_INT 1
13009: PPUSH
13010: CALL_OW 3
13014: PPUSH
13015: CALL_OW 1
13019: ST_TO_ADDR
// tmp := 1 ;
13020: LD_ADDR_VAR 0 2
13024: PUSH
13025: LD_STRING 1
13027: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
13028: LD_ADDR_VAR 0 4
13032: PUSH
13033: LD_VAR 0 4
13037: PUSH
13038: LD_VAR 0 2
13042: STR
13043: ST_TO_ADDR
// end ;
13044: GO 12940
13046: POP
13047: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
13048: LD_STRING getStreamItemsFromMission("
13050: PUSH
13051: LD_VAR 0 3
13055: STR
13056: PUSH
13057: LD_STRING ","
13059: STR
13060: PUSH
13061: LD_VAR 0 4
13065: STR
13066: PUSH
13067: LD_STRING ")
13069: STR
13070: PPUSH
13071: CALL_OW 559
// end else
13075: GO 13084
// ToLua ( getStreamItemsFromMission("","") ) ;
13077: LD_STRING getStreamItemsFromMission("","")
13079: PPUSH
13080: CALL_OW 559
// end ;
13084: LD_VAR 0 1
13088: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
13089: LD_EXP 48
13093: PUSH
13094: LD_EXP 53
13098: AND
13099: IFFALSE 13223
13101: GO 13103
13103: DISABLE
13104: LD_INT 0
13106: PPUSH
13107: PPUSH
// begin enable ;
13108: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
13109: LD_ADDR_VAR 0 2
13113: PUSH
13114: LD_INT 22
13116: PUSH
13117: LD_OWVAR 2
13121: PUSH
13122: EMPTY
13123: LIST
13124: LIST
13125: PUSH
13126: LD_INT 2
13128: PUSH
13129: LD_INT 34
13131: PUSH
13132: LD_INT 7
13134: PUSH
13135: EMPTY
13136: LIST
13137: LIST
13138: PUSH
13139: LD_INT 34
13141: PUSH
13142: LD_INT 45
13144: PUSH
13145: EMPTY
13146: LIST
13147: LIST
13148: PUSH
13149: LD_INT 34
13151: PUSH
13152: LD_INT 28
13154: PUSH
13155: EMPTY
13156: LIST
13157: LIST
13158: PUSH
13159: LD_INT 34
13161: PUSH
13162: LD_INT 47
13164: PUSH
13165: EMPTY
13166: LIST
13167: LIST
13168: PUSH
13169: EMPTY
13170: LIST
13171: LIST
13172: LIST
13173: LIST
13174: LIST
13175: PUSH
13176: EMPTY
13177: LIST
13178: LIST
13179: PPUSH
13180: CALL_OW 69
13184: ST_TO_ADDR
// if not tmp then
13185: LD_VAR 0 2
13189: NOT
13190: IFFALSE 13194
// exit ;
13192: GO 13223
// for i in tmp do
13194: LD_ADDR_VAR 0 1
13198: PUSH
13199: LD_VAR 0 2
13203: PUSH
13204: FOR_IN
13205: IFFALSE 13221
// begin SetLives ( i , 0 ) ;
13207: LD_VAR 0 1
13211: PPUSH
13212: LD_INT 0
13214: PPUSH
13215: CALL_OW 234
// end ;
13219: GO 13204
13221: POP
13222: POP
// end ;
13223: PPOPN 2
13225: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
13226: LD_EXP 48
13230: PUSH
13231: LD_EXP 54
13235: AND
13236: IFFALSE 13320
13238: GO 13240
13240: DISABLE
13241: LD_INT 0
13243: PPUSH
13244: PPUSH
// begin enable ;
13245: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
13246: LD_ADDR_VAR 0 2
13250: PUSH
13251: LD_INT 22
13253: PUSH
13254: LD_OWVAR 2
13258: PUSH
13259: EMPTY
13260: LIST
13261: LIST
13262: PUSH
13263: LD_INT 32
13265: PUSH
13266: LD_INT 3
13268: PUSH
13269: EMPTY
13270: LIST
13271: LIST
13272: PUSH
13273: EMPTY
13274: LIST
13275: LIST
13276: PPUSH
13277: CALL_OW 69
13281: ST_TO_ADDR
// if not tmp then
13282: LD_VAR 0 2
13286: NOT
13287: IFFALSE 13291
// exit ;
13289: GO 13320
// for i in tmp do
13291: LD_ADDR_VAR 0 1
13295: PUSH
13296: LD_VAR 0 2
13300: PUSH
13301: FOR_IN
13302: IFFALSE 13318
// begin SetLives ( i , 0 ) ;
13304: LD_VAR 0 1
13308: PPUSH
13309: LD_INT 0
13311: PPUSH
13312: CALL_OW 234
// end ;
13316: GO 13301
13318: POP
13319: POP
// end ;
13320: PPOPN 2
13322: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
13323: LD_EXP 48
13327: PUSH
13328: LD_EXP 51
13332: AND
13333: IFFALSE 13426
13335: GO 13337
13337: DISABLE
13338: LD_INT 0
13340: PPUSH
// begin enable ;
13341: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
13342: LD_ADDR_VAR 0 1
13346: PUSH
13347: LD_INT 22
13349: PUSH
13350: LD_OWVAR 2
13354: PUSH
13355: EMPTY
13356: LIST
13357: LIST
13358: PUSH
13359: LD_INT 2
13361: PUSH
13362: LD_INT 25
13364: PUSH
13365: LD_INT 5
13367: PUSH
13368: EMPTY
13369: LIST
13370: LIST
13371: PUSH
13372: LD_INT 25
13374: PUSH
13375: LD_INT 9
13377: PUSH
13378: EMPTY
13379: LIST
13380: LIST
13381: PUSH
13382: LD_INT 25
13384: PUSH
13385: LD_INT 8
13387: PUSH
13388: EMPTY
13389: LIST
13390: LIST
13391: PUSH
13392: EMPTY
13393: LIST
13394: LIST
13395: LIST
13396: LIST
13397: PUSH
13398: EMPTY
13399: LIST
13400: LIST
13401: PPUSH
13402: CALL_OW 69
13406: PUSH
13407: FOR_IN
13408: IFFALSE 13424
// begin SetClass ( i , 1 ) ;
13410: LD_VAR 0 1
13414: PPUSH
13415: LD_INT 1
13417: PPUSH
13418: CALL_OW 336
// end ;
13422: GO 13407
13424: POP
13425: POP
// end ;
13426: PPOPN 1
13428: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
13429: LD_EXP 48
13433: PUSH
13434: LD_EXP 52
13438: AND
13439: PUSH
13440: LD_OWVAR 65
13444: PUSH
13445: LD_INT 7
13447: LESS
13448: AND
13449: IFFALSE 13463
13451: GO 13453
13453: DISABLE
// begin enable ;
13454: ENABLE
// game_speed := 7 ;
13455: LD_ADDR_OWVAR 65
13459: PUSH
13460: LD_INT 7
13462: ST_TO_ADDR
// end ;
13463: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
13464: LD_EXP 48
13468: PUSH
13469: LD_EXP 55
13473: AND
13474: IFFALSE 13676
13476: GO 13478
13478: DISABLE
13479: LD_INT 0
13481: PPUSH
13482: PPUSH
13483: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
13484: LD_ADDR_VAR 0 3
13488: PUSH
13489: LD_INT 81
13491: PUSH
13492: LD_OWVAR 2
13496: PUSH
13497: EMPTY
13498: LIST
13499: LIST
13500: PUSH
13501: LD_INT 21
13503: PUSH
13504: LD_INT 1
13506: PUSH
13507: EMPTY
13508: LIST
13509: LIST
13510: PUSH
13511: EMPTY
13512: LIST
13513: LIST
13514: PPUSH
13515: CALL_OW 69
13519: ST_TO_ADDR
// if not tmp then
13520: LD_VAR 0 3
13524: NOT
13525: IFFALSE 13529
// exit ;
13527: GO 13676
// if tmp > 5 then
13529: LD_VAR 0 3
13533: PUSH
13534: LD_INT 5
13536: GREATER
13537: IFFALSE 13549
// k := 5 else
13539: LD_ADDR_VAR 0 2
13543: PUSH
13544: LD_INT 5
13546: ST_TO_ADDR
13547: GO 13559
// k := tmp ;
13549: LD_ADDR_VAR 0 2
13553: PUSH
13554: LD_VAR 0 3
13558: ST_TO_ADDR
// for i := 1 to k do
13559: LD_ADDR_VAR 0 1
13563: PUSH
13564: DOUBLE
13565: LD_INT 1
13567: DEC
13568: ST_TO_ADDR
13569: LD_VAR 0 2
13573: PUSH
13574: FOR_TO
13575: IFFALSE 13674
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
13577: LD_VAR 0 3
13581: PUSH
13582: LD_VAR 0 1
13586: ARRAY
13587: PPUSH
13588: LD_VAR 0 1
13592: PUSH
13593: LD_INT 4
13595: MOD
13596: PUSH
13597: LD_INT 1
13599: PLUS
13600: PPUSH
13601: CALL_OW 259
13605: PUSH
13606: LD_INT 10
13608: LESS
13609: IFFALSE 13672
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
13611: LD_VAR 0 3
13615: PUSH
13616: LD_VAR 0 1
13620: ARRAY
13621: PPUSH
13622: LD_VAR 0 1
13626: PUSH
13627: LD_INT 4
13629: MOD
13630: PUSH
13631: LD_INT 1
13633: PLUS
13634: PPUSH
13635: LD_VAR 0 3
13639: PUSH
13640: LD_VAR 0 1
13644: ARRAY
13645: PPUSH
13646: LD_VAR 0 1
13650: PUSH
13651: LD_INT 4
13653: MOD
13654: PUSH
13655: LD_INT 1
13657: PLUS
13658: PPUSH
13659: CALL_OW 259
13663: PUSH
13664: LD_INT 1
13666: PLUS
13667: PPUSH
13668: CALL_OW 237
13672: GO 13574
13674: POP
13675: POP
// end ;
13676: PPOPN 3
13678: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
13679: LD_EXP 48
13683: PUSH
13684: LD_EXP 56
13688: AND
13689: IFFALSE 13709
13691: GO 13693
13693: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
13694: LD_INT 4
13696: PPUSH
13697: LD_OWVAR 2
13701: PPUSH
13702: LD_INT 0
13704: PPUSH
13705: CALL_OW 324
13709: END
// every 0 0$1 trigger StreamModeActive and sShovel do
13710: LD_EXP 48
13714: PUSH
13715: LD_EXP 85
13719: AND
13720: IFFALSE 13740
13722: GO 13724
13724: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
13725: LD_INT 19
13727: PPUSH
13728: LD_OWVAR 2
13732: PPUSH
13733: LD_INT 0
13735: PPUSH
13736: CALL_OW 324
13740: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
13741: LD_EXP 48
13745: PUSH
13746: LD_EXP 57
13750: AND
13751: IFFALSE 13853
13753: GO 13755
13755: DISABLE
13756: LD_INT 0
13758: PPUSH
13759: PPUSH
// begin enable ;
13760: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
13761: LD_ADDR_VAR 0 2
13765: PUSH
13766: LD_INT 22
13768: PUSH
13769: LD_OWVAR 2
13773: PUSH
13774: EMPTY
13775: LIST
13776: LIST
13777: PUSH
13778: LD_INT 2
13780: PUSH
13781: LD_INT 34
13783: PUSH
13784: LD_INT 11
13786: PUSH
13787: EMPTY
13788: LIST
13789: LIST
13790: PUSH
13791: LD_INT 34
13793: PUSH
13794: LD_INT 30
13796: PUSH
13797: EMPTY
13798: LIST
13799: LIST
13800: PUSH
13801: EMPTY
13802: LIST
13803: LIST
13804: LIST
13805: PUSH
13806: EMPTY
13807: LIST
13808: LIST
13809: PPUSH
13810: CALL_OW 69
13814: ST_TO_ADDR
// if not tmp then
13815: LD_VAR 0 2
13819: NOT
13820: IFFALSE 13824
// exit ;
13822: GO 13853
// for i in tmp do
13824: LD_ADDR_VAR 0 1
13828: PUSH
13829: LD_VAR 0 2
13833: PUSH
13834: FOR_IN
13835: IFFALSE 13851
// begin SetLives ( i , 0 ) ;
13837: LD_VAR 0 1
13841: PPUSH
13842: LD_INT 0
13844: PPUSH
13845: CALL_OW 234
// end ;
13849: GO 13834
13851: POP
13852: POP
// end ;
13853: PPOPN 2
13855: END
// every 0 0$1 trigger StreamModeActive and sBunker do
13856: LD_EXP 48
13860: PUSH
13861: LD_EXP 58
13865: AND
13866: IFFALSE 13886
13868: GO 13870
13870: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
13871: LD_INT 32
13873: PPUSH
13874: LD_OWVAR 2
13878: PPUSH
13879: LD_INT 0
13881: PPUSH
13882: CALL_OW 324
13886: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
13887: LD_EXP 48
13891: PUSH
13892: LD_EXP 59
13896: AND
13897: IFFALSE 14078
13899: GO 13901
13901: DISABLE
13902: LD_INT 0
13904: PPUSH
13905: PPUSH
13906: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
13907: LD_ADDR_VAR 0 2
13911: PUSH
13912: LD_INT 22
13914: PUSH
13915: LD_OWVAR 2
13919: PUSH
13920: EMPTY
13921: LIST
13922: LIST
13923: PUSH
13924: LD_INT 33
13926: PUSH
13927: LD_INT 3
13929: PUSH
13930: EMPTY
13931: LIST
13932: LIST
13933: PUSH
13934: EMPTY
13935: LIST
13936: LIST
13937: PPUSH
13938: CALL_OW 69
13942: ST_TO_ADDR
// if not tmp then
13943: LD_VAR 0 2
13947: NOT
13948: IFFALSE 13952
// exit ;
13950: GO 14078
// side := 0 ;
13952: LD_ADDR_VAR 0 3
13956: PUSH
13957: LD_INT 0
13959: ST_TO_ADDR
// for i := 1 to 8 do
13960: LD_ADDR_VAR 0 1
13964: PUSH
13965: DOUBLE
13966: LD_INT 1
13968: DEC
13969: ST_TO_ADDR
13970: LD_INT 8
13972: PUSH
13973: FOR_TO
13974: IFFALSE 14022
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
13976: LD_OWVAR 2
13980: PUSH
13981: LD_VAR 0 1
13985: NONEQUAL
13986: PUSH
13987: LD_OWVAR 2
13991: PPUSH
13992: LD_VAR 0 1
13996: PPUSH
13997: CALL_OW 81
14001: PUSH
14002: LD_INT 2
14004: EQUAL
14005: AND
14006: IFFALSE 14020
// begin side := i ;
14008: LD_ADDR_VAR 0 3
14012: PUSH
14013: LD_VAR 0 1
14017: ST_TO_ADDR
// break ;
14018: GO 14022
// end ;
14020: GO 13973
14022: POP
14023: POP
// if not side then
14024: LD_VAR 0 3
14028: NOT
14029: IFFALSE 14033
// exit ;
14031: GO 14078
// for i := 1 to tmp do
14033: LD_ADDR_VAR 0 1
14037: PUSH
14038: DOUBLE
14039: LD_INT 1
14041: DEC
14042: ST_TO_ADDR
14043: LD_VAR 0 2
14047: PUSH
14048: FOR_TO
14049: IFFALSE 14076
// if Prob ( 60 ) then
14051: LD_INT 60
14053: PPUSH
14054: CALL_OW 13
14058: IFFALSE 14074
// SetSide ( i , side ) ;
14060: LD_VAR 0 1
14064: PPUSH
14065: LD_VAR 0 3
14069: PPUSH
14070: CALL_OW 235
14074: GO 14048
14076: POP
14077: POP
// end ;
14078: PPOPN 3
14080: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
14081: LD_EXP 48
14085: PUSH
14086: LD_EXP 61
14090: AND
14091: IFFALSE 14210
14093: GO 14095
14095: DISABLE
14096: LD_INT 0
14098: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
14099: LD_ADDR_VAR 0 1
14103: PUSH
14104: LD_INT 22
14106: PUSH
14107: LD_OWVAR 2
14111: PUSH
14112: EMPTY
14113: LIST
14114: LIST
14115: PUSH
14116: LD_INT 21
14118: PUSH
14119: LD_INT 1
14121: PUSH
14122: EMPTY
14123: LIST
14124: LIST
14125: PUSH
14126: LD_INT 3
14128: PUSH
14129: LD_INT 23
14131: PUSH
14132: LD_INT 0
14134: PUSH
14135: EMPTY
14136: LIST
14137: LIST
14138: PUSH
14139: EMPTY
14140: LIST
14141: LIST
14142: PUSH
14143: EMPTY
14144: LIST
14145: LIST
14146: LIST
14147: PPUSH
14148: CALL_OW 69
14152: PUSH
14153: FOR_IN
14154: IFFALSE 14208
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
14156: LD_VAR 0 1
14160: PPUSH
14161: CALL_OW 257
14165: PUSH
14166: LD_INT 1
14168: PUSH
14169: LD_INT 2
14171: PUSH
14172: LD_INT 3
14174: PUSH
14175: LD_INT 4
14177: PUSH
14178: EMPTY
14179: LIST
14180: LIST
14181: LIST
14182: LIST
14183: IN
14184: IFFALSE 14206
// SetClass ( un , rand ( 1 , 4 ) ) ;
14186: LD_VAR 0 1
14190: PPUSH
14191: LD_INT 1
14193: PPUSH
14194: LD_INT 4
14196: PPUSH
14197: CALL_OW 12
14201: PPUSH
14202: CALL_OW 336
14206: GO 14153
14208: POP
14209: POP
// end ;
14210: PPOPN 1
14212: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
14213: LD_EXP 48
14217: PUSH
14218: LD_EXP 60
14222: AND
14223: IFFALSE 14302
14225: GO 14227
14227: DISABLE
14228: LD_INT 0
14230: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
14231: LD_ADDR_VAR 0 1
14235: PUSH
14236: LD_INT 22
14238: PUSH
14239: LD_OWVAR 2
14243: PUSH
14244: EMPTY
14245: LIST
14246: LIST
14247: PUSH
14248: LD_INT 21
14250: PUSH
14251: LD_INT 3
14253: PUSH
14254: EMPTY
14255: LIST
14256: LIST
14257: PUSH
14258: EMPTY
14259: LIST
14260: LIST
14261: PPUSH
14262: CALL_OW 69
14266: ST_TO_ADDR
// if not tmp then
14267: LD_VAR 0 1
14271: NOT
14272: IFFALSE 14276
// exit ;
14274: GO 14302
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
14276: LD_VAR 0 1
14280: PUSH
14281: LD_INT 1
14283: PPUSH
14284: LD_VAR 0 1
14288: PPUSH
14289: CALL_OW 12
14293: ARRAY
14294: PPUSH
14295: LD_INT 100
14297: PPUSH
14298: CALL_OW 234
// end ;
14302: PPOPN 1
14304: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
14305: LD_EXP 48
14309: PUSH
14310: LD_EXP 62
14314: AND
14315: IFFALSE 14413
14317: GO 14319
14319: DISABLE
14320: LD_INT 0
14322: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
14323: LD_ADDR_VAR 0 1
14327: PUSH
14328: LD_INT 22
14330: PUSH
14331: LD_OWVAR 2
14335: PUSH
14336: EMPTY
14337: LIST
14338: LIST
14339: PUSH
14340: LD_INT 21
14342: PUSH
14343: LD_INT 1
14345: PUSH
14346: EMPTY
14347: LIST
14348: LIST
14349: PUSH
14350: EMPTY
14351: LIST
14352: LIST
14353: PPUSH
14354: CALL_OW 69
14358: ST_TO_ADDR
// if not tmp then
14359: LD_VAR 0 1
14363: NOT
14364: IFFALSE 14368
// exit ;
14366: GO 14413
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
14368: LD_VAR 0 1
14372: PUSH
14373: LD_INT 1
14375: PPUSH
14376: LD_VAR 0 1
14380: PPUSH
14381: CALL_OW 12
14385: ARRAY
14386: PPUSH
14387: LD_INT 1
14389: PPUSH
14390: LD_INT 4
14392: PPUSH
14393: CALL_OW 12
14397: PPUSH
14398: LD_INT 3000
14400: PPUSH
14401: LD_INT 9000
14403: PPUSH
14404: CALL_OW 12
14408: PPUSH
14409: CALL_OW 492
// end ;
14413: PPOPN 1
14415: END
// every 0 0$1 trigger StreamModeActive and sDepot do
14416: LD_EXP 48
14420: PUSH
14421: LD_EXP 63
14425: AND
14426: IFFALSE 14446
14428: GO 14430
14430: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
14431: LD_INT 1
14433: PPUSH
14434: LD_OWVAR 2
14438: PPUSH
14439: LD_INT 0
14441: PPUSH
14442: CALL_OW 324
14446: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
14447: LD_EXP 48
14451: PUSH
14452: LD_EXP 64
14456: AND
14457: IFFALSE 14540
14459: GO 14461
14461: DISABLE
14462: LD_INT 0
14464: PPUSH
14465: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
14466: LD_ADDR_VAR 0 2
14470: PUSH
14471: LD_INT 22
14473: PUSH
14474: LD_OWVAR 2
14478: PUSH
14479: EMPTY
14480: LIST
14481: LIST
14482: PUSH
14483: LD_INT 21
14485: PUSH
14486: LD_INT 3
14488: PUSH
14489: EMPTY
14490: LIST
14491: LIST
14492: PUSH
14493: EMPTY
14494: LIST
14495: LIST
14496: PPUSH
14497: CALL_OW 69
14501: ST_TO_ADDR
// if not tmp then
14502: LD_VAR 0 2
14506: NOT
14507: IFFALSE 14511
// exit ;
14509: GO 14540
// for i in tmp do
14511: LD_ADDR_VAR 0 1
14515: PUSH
14516: LD_VAR 0 2
14520: PUSH
14521: FOR_IN
14522: IFFALSE 14538
// SetBLevel ( i , 10 ) ;
14524: LD_VAR 0 1
14528: PPUSH
14529: LD_INT 10
14531: PPUSH
14532: CALL_OW 241
14536: GO 14521
14538: POP
14539: POP
// end ;
14540: PPOPN 2
14542: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
14543: LD_EXP 48
14547: PUSH
14548: LD_EXP 65
14552: AND
14553: IFFALSE 14664
14555: GO 14557
14557: DISABLE
14558: LD_INT 0
14560: PPUSH
14561: PPUSH
14562: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
14563: LD_ADDR_VAR 0 3
14567: PUSH
14568: LD_INT 22
14570: PUSH
14571: LD_OWVAR 2
14575: PUSH
14576: EMPTY
14577: LIST
14578: LIST
14579: PUSH
14580: LD_INT 25
14582: PUSH
14583: LD_INT 1
14585: PUSH
14586: EMPTY
14587: LIST
14588: LIST
14589: PUSH
14590: EMPTY
14591: LIST
14592: LIST
14593: PPUSH
14594: CALL_OW 69
14598: ST_TO_ADDR
// if not tmp then
14599: LD_VAR 0 3
14603: NOT
14604: IFFALSE 14608
// exit ;
14606: GO 14664
// un := tmp [ rand ( 1 , tmp ) ] ;
14608: LD_ADDR_VAR 0 2
14612: PUSH
14613: LD_VAR 0 3
14617: PUSH
14618: LD_INT 1
14620: PPUSH
14621: LD_VAR 0 3
14625: PPUSH
14626: CALL_OW 12
14630: ARRAY
14631: ST_TO_ADDR
// if Crawls ( un ) then
14632: LD_VAR 0 2
14636: PPUSH
14637: CALL_OW 318
14641: IFFALSE 14652
// ComWalk ( un ) ;
14643: LD_VAR 0 2
14647: PPUSH
14648: CALL_OW 138
// SetClass ( un , class_sniper ) ;
14652: LD_VAR 0 2
14656: PPUSH
14657: LD_INT 5
14659: PPUSH
14660: CALL_OW 336
// end ;
14664: PPOPN 3
14666: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
14667: LD_EXP 48
14671: PUSH
14672: LD_EXP 66
14676: AND
14677: PUSH
14678: LD_OWVAR 67
14682: PUSH
14683: LD_INT 3
14685: LESS
14686: AND
14687: IFFALSE 14706
14689: GO 14691
14691: DISABLE
// Difficulty := Difficulty + 1 ;
14692: LD_ADDR_OWVAR 67
14696: PUSH
14697: LD_OWVAR 67
14701: PUSH
14702: LD_INT 1
14704: PLUS
14705: ST_TO_ADDR
14706: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
14707: LD_EXP 48
14711: PUSH
14712: LD_EXP 67
14716: AND
14717: IFFALSE 14820
14719: GO 14721
14721: DISABLE
14722: LD_INT 0
14724: PPUSH
// begin for i := 1 to 5 do
14725: LD_ADDR_VAR 0 1
14729: PUSH
14730: DOUBLE
14731: LD_INT 1
14733: DEC
14734: ST_TO_ADDR
14735: LD_INT 5
14737: PUSH
14738: FOR_TO
14739: IFFALSE 14818
// begin uc_nation := nation_nature ;
14741: LD_ADDR_OWVAR 21
14745: PUSH
14746: LD_INT 0
14748: ST_TO_ADDR
// uc_side := 0 ;
14749: LD_ADDR_OWVAR 20
14753: PUSH
14754: LD_INT 0
14756: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
14757: LD_ADDR_OWVAR 29
14761: PUSH
14762: LD_INT 12
14764: PUSH
14765: LD_INT 12
14767: PUSH
14768: EMPTY
14769: LIST
14770: LIST
14771: ST_TO_ADDR
// hc_agressivity := 20 ;
14772: LD_ADDR_OWVAR 35
14776: PUSH
14777: LD_INT 20
14779: ST_TO_ADDR
// hc_class := class_tiger ;
14780: LD_ADDR_OWVAR 28
14784: PUSH
14785: LD_INT 14
14787: ST_TO_ADDR
// hc_gallery :=  ;
14788: LD_ADDR_OWVAR 33
14792: PUSH
14793: LD_STRING 
14795: ST_TO_ADDR
// hc_name :=  ;
14796: LD_ADDR_OWVAR 26
14800: PUSH
14801: LD_STRING 
14803: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
14804: CALL_OW 44
14808: PPUSH
14809: LD_INT 0
14811: PPUSH
14812: CALL_OW 51
// end ;
14816: GO 14738
14818: POP
14819: POP
// end ;
14820: PPOPN 1
14822: END
// every 0 0$1 trigger StreamModeActive and sBomb do
14823: LD_EXP 48
14827: PUSH
14828: LD_EXP 68
14832: AND
14833: IFFALSE 14842
14835: GO 14837
14837: DISABLE
// StreamSibBomb ;
14838: CALL 14843 0 0
14842: END
// export function StreamSibBomb ; var i , x , y ; begin
14843: LD_INT 0
14845: PPUSH
14846: PPUSH
14847: PPUSH
14848: PPUSH
// result := false ;
14849: LD_ADDR_VAR 0 1
14853: PUSH
14854: LD_INT 0
14856: ST_TO_ADDR
// for i := 1 to 16 do
14857: LD_ADDR_VAR 0 2
14861: PUSH
14862: DOUBLE
14863: LD_INT 1
14865: DEC
14866: ST_TO_ADDR
14867: LD_INT 16
14869: PUSH
14870: FOR_TO
14871: IFFALSE 15070
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
14873: LD_ADDR_VAR 0 3
14877: PUSH
14878: LD_INT 10
14880: PUSH
14881: LD_INT 20
14883: PUSH
14884: LD_INT 30
14886: PUSH
14887: LD_INT 40
14889: PUSH
14890: LD_INT 50
14892: PUSH
14893: LD_INT 60
14895: PUSH
14896: LD_INT 70
14898: PUSH
14899: LD_INT 80
14901: PUSH
14902: LD_INT 90
14904: PUSH
14905: LD_INT 100
14907: PUSH
14908: LD_INT 110
14910: PUSH
14911: LD_INT 120
14913: PUSH
14914: LD_INT 130
14916: PUSH
14917: LD_INT 140
14919: PUSH
14920: LD_INT 150
14922: PUSH
14923: EMPTY
14924: LIST
14925: LIST
14926: LIST
14927: LIST
14928: LIST
14929: LIST
14930: LIST
14931: LIST
14932: LIST
14933: LIST
14934: LIST
14935: LIST
14936: LIST
14937: LIST
14938: LIST
14939: PUSH
14940: LD_INT 1
14942: PPUSH
14943: LD_INT 15
14945: PPUSH
14946: CALL_OW 12
14950: ARRAY
14951: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
14952: LD_ADDR_VAR 0 4
14956: PUSH
14957: LD_INT 10
14959: PUSH
14960: LD_INT 20
14962: PUSH
14963: LD_INT 30
14965: PUSH
14966: LD_INT 40
14968: PUSH
14969: LD_INT 50
14971: PUSH
14972: LD_INT 60
14974: PUSH
14975: LD_INT 70
14977: PUSH
14978: LD_INT 80
14980: PUSH
14981: LD_INT 90
14983: PUSH
14984: LD_INT 100
14986: PUSH
14987: LD_INT 110
14989: PUSH
14990: LD_INT 120
14992: PUSH
14993: LD_INT 130
14995: PUSH
14996: LD_INT 140
14998: PUSH
14999: LD_INT 150
15001: PUSH
15002: EMPTY
15003: LIST
15004: LIST
15005: LIST
15006: LIST
15007: LIST
15008: LIST
15009: LIST
15010: LIST
15011: LIST
15012: LIST
15013: LIST
15014: LIST
15015: LIST
15016: LIST
15017: LIST
15018: PUSH
15019: LD_INT 1
15021: PPUSH
15022: LD_INT 15
15024: PPUSH
15025: CALL_OW 12
15029: ARRAY
15030: ST_TO_ADDR
// if ValidHex ( x , y ) then
15031: LD_VAR 0 3
15035: PPUSH
15036: LD_VAR 0 4
15040: PPUSH
15041: CALL_OW 488
15045: IFFALSE 15068
// begin result := [ x , y ] ;
15047: LD_ADDR_VAR 0 1
15051: PUSH
15052: LD_VAR 0 3
15056: PUSH
15057: LD_VAR 0 4
15061: PUSH
15062: EMPTY
15063: LIST
15064: LIST
15065: ST_TO_ADDR
// break ;
15066: GO 15070
// end ; end ;
15068: GO 14870
15070: POP
15071: POP
// if result then
15072: LD_VAR 0 1
15076: IFFALSE 15136
// begin ToLua ( playSibBomb() ) ;
15078: LD_STRING playSibBomb()
15080: PPUSH
15081: CALL_OW 559
// wait ( 0 0$14 ) ;
15085: LD_INT 490
15087: PPUSH
15088: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
15092: LD_VAR 0 1
15096: PUSH
15097: LD_INT 1
15099: ARRAY
15100: PPUSH
15101: LD_VAR 0 1
15105: PUSH
15106: LD_INT 2
15108: ARRAY
15109: PPUSH
15110: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
15114: LD_VAR 0 1
15118: PUSH
15119: LD_INT 1
15121: ARRAY
15122: PPUSH
15123: LD_VAR 0 1
15127: PUSH
15128: LD_INT 2
15130: ARRAY
15131: PPUSH
15132: CALL_OW 429
// end ; end ;
15136: LD_VAR 0 1
15140: RET
// every 0 0$1 trigger StreamModeActive and sReset do
15141: LD_EXP 48
15145: PUSH
15146: LD_EXP 70
15150: AND
15151: IFFALSE 15163
15153: GO 15155
15155: DISABLE
// YouLost (  ) ;
15156: LD_STRING 
15158: PPUSH
15159: CALL_OW 104
15163: END
// every 0 0$1 trigger StreamModeActive and sFog do
15164: LD_EXP 48
15168: PUSH
15169: LD_EXP 69
15173: AND
15174: IFFALSE 15188
15176: GO 15178
15178: DISABLE
// FogOff ( your_side ) ;
15179: LD_OWVAR 2
15183: PPUSH
15184: CALL_OW 344
15188: END
// every 0 0$1 trigger StreamModeActive and sSun do
15189: LD_EXP 48
15193: PUSH
15194: LD_EXP 71
15198: AND
15199: IFFALSE 15227
15201: GO 15203
15203: DISABLE
// begin solar_recharge_percent := 0 ;
15204: LD_ADDR_OWVAR 79
15208: PUSH
15209: LD_INT 0
15211: ST_TO_ADDR
// wait ( 5 5$00 ) ;
15212: LD_INT 10500
15214: PPUSH
15215: CALL_OW 67
// solar_recharge_percent := 100 ;
15219: LD_ADDR_OWVAR 79
15223: PUSH
15224: LD_INT 100
15226: ST_TO_ADDR
// end ;
15227: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
15228: LD_EXP 48
15232: PUSH
15233: LD_EXP 72
15237: AND
15238: IFFALSE 15477
15240: GO 15242
15242: DISABLE
15243: LD_INT 0
15245: PPUSH
15246: PPUSH
15247: PPUSH
// begin tmp := [ ] ;
15248: LD_ADDR_VAR 0 3
15252: PUSH
15253: EMPTY
15254: ST_TO_ADDR
// for i := 1 to 6 do
15255: LD_ADDR_VAR 0 1
15259: PUSH
15260: DOUBLE
15261: LD_INT 1
15263: DEC
15264: ST_TO_ADDR
15265: LD_INT 6
15267: PUSH
15268: FOR_TO
15269: IFFALSE 15374
// begin uc_nation := nation_nature ;
15271: LD_ADDR_OWVAR 21
15275: PUSH
15276: LD_INT 0
15278: ST_TO_ADDR
// uc_side := 0 ;
15279: LD_ADDR_OWVAR 20
15283: PUSH
15284: LD_INT 0
15286: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
15287: LD_ADDR_OWVAR 29
15291: PUSH
15292: LD_INT 12
15294: PUSH
15295: LD_INT 12
15297: PUSH
15298: EMPTY
15299: LIST
15300: LIST
15301: ST_TO_ADDR
// hc_agressivity := 20 ;
15302: LD_ADDR_OWVAR 35
15306: PUSH
15307: LD_INT 20
15309: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
15310: LD_ADDR_OWVAR 28
15314: PUSH
15315: LD_INT 17
15317: ST_TO_ADDR
// hc_gallery :=  ;
15318: LD_ADDR_OWVAR 33
15322: PUSH
15323: LD_STRING 
15325: ST_TO_ADDR
// hc_name :=  ;
15326: LD_ADDR_OWVAR 26
15330: PUSH
15331: LD_STRING 
15333: ST_TO_ADDR
// un := CreateHuman ;
15334: LD_ADDR_VAR 0 2
15338: PUSH
15339: CALL_OW 44
15343: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
15344: LD_VAR 0 2
15348: PPUSH
15349: LD_INT 1
15351: PPUSH
15352: CALL_OW 51
// tmp := tmp ^ un ;
15356: LD_ADDR_VAR 0 3
15360: PUSH
15361: LD_VAR 0 3
15365: PUSH
15366: LD_VAR 0 2
15370: ADD
15371: ST_TO_ADDR
// end ;
15372: GO 15268
15374: POP
15375: POP
// repeat wait ( 0 0$1 ) ;
15376: LD_INT 35
15378: PPUSH
15379: CALL_OW 67
// for un in tmp do
15383: LD_ADDR_VAR 0 2
15387: PUSH
15388: LD_VAR 0 3
15392: PUSH
15393: FOR_IN
15394: IFFALSE 15468
// begin if IsDead ( un ) then
15396: LD_VAR 0 2
15400: PPUSH
15401: CALL_OW 301
15405: IFFALSE 15425
// begin tmp := tmp diff un ;
15407: LD_ADDR_VAR 0 3
15411: PUSH
15412: LD_VAR 0 3
15416: PUSH
15417: LD_VAR 0 2
15421: DIFF
15422: ST_TO_ADDR
// continue ;
15423: GO 15393
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
15425: LD_VAR 0 2
15429: PPUSH
15430: LD_INT 3
15432: PUSH
15433: LD_INT 22
15435: PUSH
15436: LD_INT 0
15438: PUSH
15439: EMPTY
15440: LIST
15441: LIST
15442: PUSH
15443: EMPTY
15444: LIST
15445: LIST
15446: PPUSH
15447: CALL_OW 69
15451: PPUSH
15452: LD_VAR 0 2
15456: PPUSH
15457: CALL_OW 74
15461: PPUSH
15462: CALL_OW 115
// end ;
15466: GO 15393
15468: POP
15469: POP
// until not tmp ;
15470: LD_VAR 0 3
15474: NOT
15475: IFFALSE 15376
// end ;
15477: PPOPN 3
15479: END
// every 0 0$1 trigger StreamModeActive and sTroll do
15480: LD_EXP 48
15484: PUSH
15485: LD_EXP 73
15489: AND
15490: IFFALSE 15544
15492: GO 15494
15494: DISABLE
// begin ToLua ( displayTroll(); ) ;
15495: LD_STRING displayTroll();
15497: PPUSH
15498: CALL_OW 559
// wait ( 3 3$00 ) ;
15502: LD_INT 6300
15504: PPUSH
15505: CALL_OW 67
// ToLua ( hideTroll(); ) ;
15509: LD_STRING hideTroll();
15511: PPUSH
15512: CALL_OW 559
// wait ( 1 1$00 ) ;
15516: LD_INT 2100
15518: PPUSH
15519: CALL_OW 67
// ToLua ( displayTroll(); ) ;
15523: LD_STRING displayTroll();
15525: PPUSH
15526: CALL_OW 559
// wait ( 1 1$00 ) ;
15530: LD_INT 2100
15532: PPUSH
15533: CALL_OW 67
// ToLua ( hideTroll(); ) ;
15537: LD_STRING hideTroll();
15539: PPUSH
15540: CALL_OW 559
// end ;
15544: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
15545: LD_EXP 48
15549: PUSH
15550: LD_EXP 74
15554: AND
15555: IFFALSE 15618
15557: GO 15559
15559: DISABLE
15560: LD_INT 0
15562: PPUSH
// begin p := 0 ;
15563: LD_ADDR_VAR 0 1
15567: PUSH
15568: LD_INT 0
15570: ST_TO_ADDR
// repeat game_speed := 1 ;
15571: LD_ADDR_OWVAR 65
15575: PUSH
15576: LD_INT 1
15578: ST_TO_ADDR
// wait ( 0 0$1 ) ;
15579: LD_INT 35
15581: PPUSH
15582: CALL_OW 67
// p := p + 1 ;
15586: LD_ADDR_VAR 0 1
15590: PUSH
15591: LD_VAR 0 1
15595: PUSH
15596: LD_INT 1
15598: PLUS
15599: ST_TO_ADDR
// until p >= 60 ;
15600: LD_VAR 0 1
15604: PUSH
15605: LD_INT 60
15607: GREATEREQUAL
15608: IFFALSE 15571
// game_speed := 4 ;
15610: LD_ADDR_OWVAR 65
15614: PUSH
15615: LD_INT 4
15617: ST_TO_ADDR
// end ;
15618: PPOPN 1
15620: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
15621: LD_EXP 48
15625: PUSH
15626: LD_EXP 75
15630: AND
15631: IFFALSE 15777
15633: GO 15635
15635: DISABLE
15636: LD_INT 0
15638: PPUSH
15639: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15640: LD_ADDR_VAR 0 1
15644: PUSH
15645: LD_INT 22
15647: PUSH
15648: LD_OWVAR 2
15652: PUSH
15653: EMPTY
15654: LIST
15655: LIST
15656: PUSH
15657: LD_INT 2
15659: PUSH
15660: LD_INT 30
15662: PUSH
15663: LD_INT 0
15665: PUSH
15666: EMPTY
15667: LIST
15668: LIST
15669: PUSH
15670: LD_INT 30
15672: PUSH
15673: LD_INT 1
15675: PUSH
15676: EMPTY
15677: LIST
15678: LIST
15679: PUSH
15680: EMPTY
15681: LIST
15682: LIST
15683: LIST
15684: PUSH
15685: EMPTY
15686: LIST
15687: LIST
15688: PPUSH
15689: CALL_OW 69
15693: ST_TO_ADDR
// if not depot then
15694: LD_VAR 0 1
15698: NOT
15699: IFFALSE 15703
// exit ;
15701: GO 15777
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
15703: LD_ADDR_VAR 0 2
15707: PUSH
15708: LD_VAR 0 1
15712: PUSH
15713: LD_INT 1
15715: PPUSH
15716: LD_VAR 0 1
15720: PPUSH
15721: CALL_OW 12
15725: ARRAY
15726: PPUSH
15727: CALL_OW 274
15731: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
15732: LD_VAR 0 2
15736: PPUSH
15737: LD_INT 1
15739: PPUSH
15740: LD_INT 0
15742: PPUSH
15743: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
15747: LD_VAR 0 2
15751: PPUSH
15752: LD_INT 2
15754: PPUSH
15755: LD_INT 0
15757: PPUSH
15758: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
15762: LD_VAR 0 2
15766: PPUSH
15767: LD_INT 3
15769: PPUSH
15770: LD_INT 0
15772: PPUSH
15773: CALL_OW 277
// end ;
15777: PPOPN 2
15779: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
15780: LD_EXP 48
15784: PUSH
15785: LD_EXP 76
15789: AND
15790: IFFALSE 15887
15792: GO 15794
15794: DISABLE
15795: LD_INT 0
15797: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
15798: LD_ADDR_VAR 0 1
15802: PUSH
15803: LD_INT 22
15805: PUSH
15806: LD_OWVAR 2
15810: PUSH
15811: EMPTY
15812: LIST
15813: LIST
15814: PUSH
15815: LD_INT 21
15817: PUSH
15818: LD_INT 1
15820: PUSH
15821: EMPTY
15822: LIST
15823: LIST
15824: PUSH
15825: LD_INT 3
15827: PUSH
15828: LD_INT 23
15830: PUSH
15831: LD_INT 0
15833: PUSH
15834: EMPTY
15835: LIST
15836: LIST
15837: PUSH
15838: EMPTY
15839: LIST
15840: LIST
15841: PUSH
15842: EMPTY
15843: LIST
15844: LIST
15845: LIST
15846: PPUSH
15847: CALL_OW 69
15851: ST_TO_ADDR
// if not tmp then
15852: LD_VAR 0 1
15856: NOT
15857: IFFALSE 15861
// exit ;
15859: GO 15887
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
15861: LD_VAR 0 1
15865: PUSH
15866: LD_INT 1
15868: PPUSH
15869: LD_VAR 0 1
15873: PPUSH
15874: CALL_OW 12
15878: ARRAY
15879: PPUSH
15880: LD_INT 200
15882: PPUSH
15883: CALL_OW 234
// end ;
15887: PPOPN 1
15889: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
15890: LD_EXP 48
15894: PUSH
15895: LD_EXP 77
15899: AND
15900: IFFALSE 15979
15902: GO 15904
15904: DISABLE
15905: LD_INT 0
15907: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
15908: LD_ADDR_VAR 0 1
15912: PUSH
15913: LD_INT 22
15915: PUSH
15916: LD_OWVAR 2
15920: PUSH
15921: EMPTY
15922: LIST
15923: LIST
15924: PUSH
15925: LD_INT 21
15927: PUSH
15928: LD_INT 2
15930: PUSH
15931: EMPTY
15932: LIST
15933: LIST
15934: PUSH
15935: EMPTY
15936: LIST
15937: LIST
15938: PPUSH
15939: CALL_OW 69
15943: ST_TO_ADDR
// if not tmp then
15944: LD_VAR 0 1
15948: NOT
15949: IFFALSE 15953
// exit ;
15951: GO 15979
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
15953: LD_VAR 0 1
15957: PUSH
15958: LD_INT 1
15960: PPUSH
15961: LD_VAR 0 1
15965: PPUSH
15966: CALL_OW 12
15970: ARRAY
15971: PPUSH
15972: LD_INT 60
15974: PPUSH
15975: CALL_OW 234
// end ;
15979: PPOPN 1
15981: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
15982: LD_EXP 48
15986: PUSH
15987: LD_EXP 78
15991: AND
15992: IFFALSE 16091
15994: GO 15996
15996: DISABLE
15997: LD_INT 0
15999: PPUSH
16000: PPUSH
// begin enable ;
16001: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
16002: LD_ADDR_VAR 0 1
16006: PUSH
16007: LD_INT 22
16009: PUSH
16010: LD_OWVAR 2
16014: PUSH
16015: EMPTY
16016: LIST
16017: LIST
16018: PUSH
16019: LD_INT 61
16021: PUSH
16022: EMPTY
16023: LIST
16024: PUSH
16025: LD_INT 33
16027: PUSH
16028: LD_INT 2
16030: PUSH
16031: EMPTY
16032: LIST
16033: LIST
16034: PUSH
16035: EMPTY
16036: LIST
16037: LIST
16038: LIST
16039: PPUSH
16040: CALL_OW 69
16044: ST_TO_ADDR
// if not tmp then
16045: LD_VAR 0 1
16049: NOT
16050: IFFALSE 16054
// exit ;
16052: GO 16091
// for i in tmp do
16054: LD_ADDR_VAR 0 2
16058: PUSH
16059: LD_VAR 0 1
16063: PUSH
16064: FOR_IN
16065: IFFALSE 16089
// if IsControledBy ( i ) then
16067: LD_VAR 0 2
16071: PPUSH
16072: CALL_OW 312
16076: IFFALSE 16087
// ComUnlink ( i ) ;
16078: LD_VAR 0 2
16082: PPUSH
16083: CALL_OW 136
16087: GO 16064
16089: POP
16090: POP
// end ;
16091: PPOPN 2
16093: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
16094: LD_EXP 48
16098: PUSH
16099: LD_EXP 79
16103: AND
16104: IFFALSE 16244
16106: GO 16108
16108: DISABLE
16109: LD_INT 0
16111: PPUSH
16112: PPUSH
// begin ToLua ( displayPowell(); ) ;
16113: LD_STRING displayPowell();
16115: PPUSH
16116: CALL_OW 559
// uc_side := 0 ;
16120: LD_ADDR_OWVAR 20
16124: PUSH
16125: LD_INT 0
16127: ST_TO_ADDR
// uc_nation := 2 ;
16128: LD_ADDR_OWVAR 21
16132: PUSH
16133: LD_INT 2
16135: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
16136: LD_ADDR_OWVAR 37
16140: PUSH
16141: LD_INT 14
16143: ST_TO_ADDR
// vc_engine := engine_siberite ;
16144: LD_ADDR_OWVAR 39
16148: PUSH
16149: LD_INT 3
16151: ST_TO_ADDR
// vc_control := control_apeman ;
16152: LD_ADDR_OWVAR 38
16156: PUSH
16157: LD_INT 5
16159: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
16160: LD_ADDR_OWVAR 40
16164: PUSH
16165: LD_INT 29
16167: ST_TO_ADDR
// un := CreateVehicle ;
16168: LD_ADDR_VAR 0 2
16172: PUSH
16173: CALL_OW 45
16177: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
16178: LD_VAR 0 2
16182: PPUSH
16183: LD_INT 1
16185: PPUSH
16186: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
16190: LD_INT 35
16192: PPUSH
16193: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
16197: LD_VAR 0 2
16201: PPUSH
16202: LD_INT 22
16204: PUSH
16205: LD_OWVAR 2
16209: PUSH
16210: EMPTY
16211: LIST
16212: LIST
16213: PPUSH
16214: CALL_OW 69
16218: PPUSH
16219: LD_VAR 0 2
16223: PPUSH
16224: CALL_OW 74
16228: PPUSH
16229: CALL_OW 115
// until IsDead ( un ) ;
16233: LD_VAR 0 2
16237: PPUSH
16238: CALL_OW 301
16242: IFFALSE 16190
// end ;
16244: PPOPN 2
16246: END
// every 0 0$1 trigger StreamModeActive and sStu do
16247: LD_EXP 48
16251: PUSH
16252: LD_EXP 87
16256: AND
16257: IFFALSE 16273
16259: GO 16261
16261: DISABLE
// begin ToLua ( displayStucuk(); ) ;
16262: LD_STRING displayStucuk();
16264: PPUSH
16265: CALL_OW 559
// ResetFog ;
16269: CALL_OW 335
// end ;
16273: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
16274: LD_EXP 48
16278: PUSH
16279: LD_EXP 80
16283: AND
16284: IFFALSE 16425
16286: GO 16288
16288: DISABLE
16289: LD_INT 0
16291: PPUSH
16292: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
16293: LD_ADDR_VAR 0 2
16297: PUSH
16298: LD_INT 22
16300: PUSH
16301: LD_OWVAR 2
16305: PUSH
16306: EMPTY
16307: LIST
16308: LIST
16309: PUSH
16310: LD_INT 21
16312: PUSH
16313: LD_INT 1
16315: PUSH
16316: EMPTY
16317: LIST
16318: LIST
16319: PUSH
16320: EMPTY
16321: LIST
16322: LIST
16323: PPUSH
16324: CALL_OW 69
16328: ST_TO_ADDR
// if not tmp then
16329: LD_VAR 0 2
16333: NOT
16334: IFFALSE 16338
// exit ;
16336: GO 16425
// un := tmp [ rand ( 1 , tmp ) ] ;
16338: LD_ADDR_VAR 0 1
16342: PUSH
16343: LD_VAR 0 2
16347: PUSH
16348: LD_INT 1
16350: PPUSH
16351: LD_VAR 0 2
16355: PPUSH
16356: CALL_OW 12
16360: ARRAY
16361: ST_TO_ADDR
// SetSide ( un , 0 ) ;
16362: LD_VAR 0 1
16366: PPUSH
16367: LD_INT 0
16369: PPUSH
16370: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
16374: LD_VAR 0 1
16378: PPUSH
16379: LD_OWVAR 3
16383: PUSH
16384: LD_VAR 0 1
16388: DIFF
16389: PPUSH
16390: LD_VAR 0 1
16394: PPUSH
16395: CALL_OW 74
16399: PPUSH
16400: CALL_OW 115
// wait ( 0 0$20 ) ;
16404: LD_INT 700
16406: PPUSH
16407: CALL_OW 67
// SetSide ( un , your_side ) ;
16411: LD_VAR 0 1
16415: PPUSH
16416: LD_OWVAR 2
16420: PPUSH
16421: CALL_OW 235
// end ;
16425: PPOPN 2
16427: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
16428: LD_EXP 48
16432: PUSH
16433: LD_EXP 81
16437: AND
16438: IFFALSE 16544
16440: GO 16442
16442: DISABLE
16443: LD_INT 0
16445: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
16446: LD_ADDR_VAR 0 1
16450: PUSH
16451: LD_INT 22
16453: PUSH
16454: LD_OWVAR 2
16458: PUSH
16459: EMPTY
16460: LIST
16461: LIST
16462: PUSH
16463: LD_INT 2
16465: PUSH
16466: LD_INT 30
16468: PUSH
16469: LD_INT 0
16471: PUSH
16472: EMPTY
16473: LIST
16474: LIST
16475: PUSH
16476: LD_INT 30
16478: PUSH
16479: LD_INT 1
16481: PUSH
16482: EMPTY
16483: LIST
16484: LIST
16485: PUSH
16486: EMPTY
16487: LIST
16488: LIST
16489: LIST
16490: PUSH
16491: EMPTY
16492: LIST
16493: LIST
16494: PPUSH
16495: CALL_OW 69
16499: ST_TO_ADDR
// if not depot then
16500: LD_VAR 0 1
16504: NOT
16505: IFFALSE 16509
// exit ;
16507: GO 16544
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
16509: LD_VAR 0 1
16513: PUSH
16514: LD_INT 1
16516: ARRAY
16517: PPUSH
16518: CALL_OW 250
16522: PPUSH
16523: LD_VAR 0 1
16527: PUSH
16528: LD_INT 1
16530: ARRAY
16531: PPUSH
16532: CALL_OW 251
16536: PPUSH
16537: LD_INT 70
16539: PPUSH
16540: CALL_OW 495
// end ;
16544: PPOPN 1
16546: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
16547: LD_EXP 48
16551: PUSH
16552: LD_EXP 82
16556: AND
16557: IFFALSE 16768
16559: GO 16561
16561: DISABLE
16562: LD_INT 0
16564: PPUSH
16565: PPUSH
16566: PPUSH
16567: PPUSH
16568: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
16569: LD_ADDR_VAR 0 5
16573: PUSH
16574: LD_INT 22
16576: PUSH
16577: LD_OWVAR 2
16581: PUSH
16582: EMPTY
16583: LIST
16584: LIST
16585: PUSH
16586: LD_INT 21
16588: PUSH
16589: LD_INT 1
16591: PUSH
16592: EMPTY
16593: LIST
16594: LIST
16595: PUSH
16596: EMPTY
16597: LIST
16598: LIST
16599: PPUSH
16600: CALL_OW 69
16604: ST_TO_ADDR
// if not tmp then
16605: LD_VAR 0 5
16609: NOT
16610: IFFALSE 16614
// exit ;
16612: GO 16768
// for i in tmp do
16614: LD_ADDR_VAR 0 1
16618: PUSH
16619: LD_VAR 0 5
16623: PUSH
16624: FOR_IN
16625: IFFALSE 16766
// begin d := rand ( 0 , 5 ) ;
16627: LD_ADDR_VAR 0 4
16631: PUSH
16632: LD_INT 0
16634: PPUSH
16635: LD_INT 5
16637: PPUSH
16638: CALL_OW 12
16642: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
16643: LD_ADDR_VAR 0 2
16647: PUSH
16648: LD_VAR 0 1
16652: PPUSH
16653: CALL_OW 250
16657: PPUSH
16658: LD_VAR 0 4
16662: PPUSH
16663: LD_INT 3
16665: PPUSH
16666: LD_INT 12
16668: PPUSH
16669: CALL_OW 12
16673: PPUSH
16674: CALL_OW 272
16678: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
16679: LD_ADDR_VAR 0 3
16683: PUSH
16684: LD_VAR 0 1
16688: PPUSH
16689: CALL_OW 251
16693: PPUSH
16694: LD_VAR 0 4
16698: PPUSH
16699: LD_INT 3
16701: PPUSH
16702: LD_INT 12
16704: PPUSH
16705: CALL_OW 12
16709: PPUSH
16710: CALL_OW 273
16714: ST_TO_ADDR
// if ValidHex ( x , y ) then
16715: LD_VAR 0 2
16719: PPUSH
16720: LD_VAR 0 3
16724: PPUSH
16725: CALL_OW 488
16729: IFFALSE 16764
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
16731: LD_VAR 0 1
16735: PPUSH
16736: LD_VAR 0 2
16740: PPUSH
16741: LD_VAR 0 3
16745: PPUSH
16746: LD_INT 3
16748: PPUSH
16749: LD_INT 6
16751: PPUSH
16752: CALL_OW 12
16756: PPUSH
16757: LD_INT 1
16759: PPUSH
16760: CALL_OW 483
// end ;
16764: GO 16624
16766: POP
16767: POP
// end ;
16768: PPOPN 5
16770: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
16771: LD_EXP 48
16775: PUSH
16776: LD_EXP 83
16780: AND
16781: IFFALSE 16875
16783: GO 16785
16785: DISABLE
16786: LD_INT 0
16788: PPUSH
16789: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
16790: LD_ADDR_VAR 0 2
16794: PUSH
16795: LD_INT 22
16797: PUSH
16798: LD_OWVAR 2
16802: PUSH
16803: EMPTY
16804: LIST
16805: LIST
16806: PUSH
16807: LD_INT 32
16809: PUSH
16810: LD_INT 1
16812: PUSH
16813: EMPTY
16814: LIST
16815: LIST
16816: PUSH
16817: LD_INT 21
16819: PUSH
16820: LD_INT 2
16822: PUSH
16823: EMPTY
16824: LIST
16825: LIST
16826: PUSH
16827: EMPTY
16828: LIST
16829: LIST
16830: LIST
16831: PPUSH
16832: CALL_OW 69
16836: ST_TO_ADDR
// if not tmp then
16837: LD_VAR 0 2
16841: NOT
16842: IFFALSE 16846
// exit ;
16844: GO 16875
// for i in tmp do
16846: LD_ADDR_VAR 0 1
16850: PUSH
16851: LD_VAR 0 2
16855: PUSH
16856: FOR_IN
16857: IFFALSE 16873
// SetFuel ( i , 0 ) ;
16859: LD_VAR 0 1
16863: PPUSH
16864: LD_INT 0
16866: PPUSH
16867: CALL_OW 240
16871: GO 16856
16873: POP
16874: POP
// end ;
16875: PPOPN 2
16877: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
16878: LD_EXP 48
16882: PUSH
16883: LD_EXP 84
16887: AND
16888: IFFALSE 16954
16890: GO 16892
16892: DISABLE
16893: LD_INT 0
16895: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
16896: LD_ADDR_VAR 0 1
16900: PUSH
16901: LD_INT 22
16903: PUSH
16904: LD_OWVAR 2
16908: PUSH
16909: EMPTY
16910: LIST
16911: LIST
16912: PUSH
16913: LD_INT 30
16915: PUSH
16916: LD_INT 29
16918: PUSH
16919: EMPTY
16920: LIST
16921: LIST
16922: PUSH
16923: EMPTY
16924: LIST
16925: LIST
16926: PPUSH
16927: CALL_OW 69
16931: ST_TO_ADDR
// if not tmp then
16932: LD_VAR 0 1
16936: NOT
16937: IFFALSE 16941
// exit ;
16939: GO 16954
// DestroyUnit ( tmp [ 1 ] ) ;
16941: LD_VAR 0 1
16945: PUSH
16946: LD_INT 1
16948: ARRAY
16949: PPUSH
16950: CALL_OW 65
// end ;
16954: PPOPN 1
16956: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
16957: LD_EXP 48
16961: PUSH
16962: LD_EXP 86
16966: AND
16967: IFFALSE 17096
16969: GO 16971
16971: DISABLE
16972: LD_INT 0
16974: PPUSH
// begin uc_side := 0 ;
16975: LD_ADDR_OWVAR 20
16979: PUSH
16980: LD_INT 0
16982: ST_TO_ADDR
// uc_nation := nation_arabian ;
16983: LD_ADDR_OWVAR 21
16987: PUSH
16988: LD_INT 2
16990: ST_TO_ADDR
// hc_gallery :=  ;
16991: LD_ADDR_OWVAR 33
16995: PUSH
16996: LD_STRING 
16998: ST_TO_ADDR
// hc_name :=  ;
16999: LD_ADDR_OWVAR 26
17003: PUSH
17004: LD_STRING 
17006: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
17007: LD_INT 1
17009: PPUSH
17010: LD_INT 11
17012: PPUSH
17013: LD_INT 10
17015: PPUSH
17016: CALL_OW 380
// un := CreateHuman ;
17020: LD_ADDR_VAR 0 1
17024: PUSH
17025: CALL_OW 44
17029: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
17030: LD_VAR 0 1
17034: PPUSH
17035: LD_INT 1
17037: PPUSH
17038: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
17042: LD_INT 35
17044: PPUSH
17045: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
17049: LD_VAR 0 1
17053: PPUSH
17054: LD_INT 22
17056: PUSH
17057: LD_OWVAR 2
17061: PUSH
17062: EMPTY
17063: LIST
17064: LIST
17065: PPUSH
17066: CALL_OW 69
17070: PPUSH
17071: LD_VAR 0 1
17075: PPUSH
17076: CALL_OW 74
17080: PPUSH
17081: CALL_OW 115
// until IsDead ( un ) ;
17085: LD_VAR 0 1
17089: PPUSH
17090: CALL_OW 301
17094: IFFALSE 17042
// end ;
17096: PPOPN 1
17098: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
17099: LD_EXP 48
17103: PUSH
17104: LD_EXP 88
17108: AND
17109: IFFALSE 17121
17111: GO 17113
17113: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
17114: LD_STRING earthquake(getX(game), 0, 32)
17116: PPUSH
17117: CALL_OW 559
17121: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
17122: LD_EXP 48
17126: PUSH
17127: LD_EXP 89
17131: AND
17132: IFFALSE 17223
17134: GO 17136
17136: DISABLE
17137: LD_INT 0
17139: PPUSH
// begin enable ;
17140: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
17141: LD_ADDR_VAR 0 1
17145: PUSH
17146: LD_INT 22
17148: PUSH
17149: LD_OWVAR 2
17153: PUSH
17154: EMPTY
17155: LIST
17156: LIST
17157: PUSH
17158: LD_INT 21
17160: PUSH
17161: LD_INT 2
17163: PUSH
17164: EMPTY
17165: LIST
17166: LIST
17167: PUSH
17168: LD_INT 33
17170: PUSH
17171: LD_INT 3
17173: PUSH
17174: EMPTY
17175: LIST
17176: LIST
17177: PUSH
17178: EMPTY
17179: LIST
17180: LIST
17181: LIST
17182: PPUSH
17183: CALL_OW 69
17187: ST_TO_ADDR
// if not tmp then
17188: LD_VAR 0 1
17192: NOT
17193: IFFALSE 17197
// exit ;
17195: GO 17223
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
17197: LD_VAR 0 1
17201: PUSH
17202: LD_INT 1
17204: PPUSH
17205: LD_VAR 0 1
17209: PPUSH
17210: CALL_OW 12
17214: ARRAY
17215: PPUSH
17216: LD_INT 1
17218: PPUSH
17219: CALL_OW 234
// end ;
17223: PPOPN 1
17225: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
17226: LD_EXP 48
17230: PUSH
17231: LD_EXP 90
17235: AND
17236: IFFALSE 17377
17238: GO 17240
17240: DISABLE
17241: LD_INT 0
17243: PPUSH
17244: PPUSH
17245: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17246: LD_ADDR_VAR 0 3
17250: PUSH
17251: LD_INT 22
17253: PUSH
17254: LD_OWVAR 2
17258: PUSH
17259: EMPTY
17260: LIST
17261: LIST
17262: PUSH
17263: LD_INT 25
17265: PUSH
17266: LD_INT 1
17268: PUSH
17269: EMPTY
17270: LIST
17271: LIST
17272: PUSH
17273: EMPTY
17274: LIST
17275: LIST
17276: PPUSH
17277: CALL_OW 69
17281: ST_TO_ADDR
// if not tmp then
17282: LD_VAR 0 3
17286: NOT
17287: IFFALSE 17291
// exit ;
17289: GO 17377
// un := tmp [ rand ( 1 , tmp ) ] ;
17291: LD_ADDR_VAR 0 2
17295: PUSH
17296: LD_VAR 0 3
17300: PUSH
17301: LD_INT 1
17303: PPUSH
17304: LD_VAR 0 3
17308: PPUSH
17309: CALL_OW 12
17313: ARRAY
17314: ST_TO_ADDR
// if Crawls ( un ) then
17315: LD_VAR 0 2
17319: PPUSH
17320: CALL_OW 318
17324: IFFALSE 17335
// ComWalk ( un ) ;
17326: LD_VAR 0 2
17330: PPUSH
17331: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
17335: LD_VAR 0 2
17339: PPUSH
17340: LD_INT 9
17342: PPUSH
17343: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
17347: LD_INT 28
17349: PPUSH
17350: LD_OWVAR 2
17354: PPUSH
17355: LD_INT 2
17357: PPUSH
17358: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
17362: LD_INT 29
17364: PPUSH
17365: LD_OWVAR 2
17369: PPUSH
17370: LD_INT 2
17372: PPUSH
17373: CALL_OW 322
// end ;
17377: PPOPN 3
17379: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
17380: LD_EXP 48
17384: PUSH
17385: LD_EXP 91
17389: AND
17390: IFFALSE 17501
17392: GO 17394
17394: DISABLE
17395: LD_INT 0
17397: PPUSH
17398: PPUSH
17399: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17400: LD_ADDR_VAR 0 3
17404: PUSH
17405: LD_INT 22
17407: PUSH
17408: LD_OWVAR 2
17412: PUSH
17413: EMPTY
17414: LIST
17415: LIST
17416: PUSH
17417: LD_INT 25
17419: PUSH
17420: LD_INT 1
17422: PUSH
17423: EMPTY
17424: LIST
17425: LIST
17426: PUSH
17427: EMPTY
17428: LIST
17429: LIST
17430: PPUSH
17431: CALL_OW 69
17435: ST_TO_ADDR
// if not tmp then
17436: LD_VAR 0 3
17440: NOT
17441: IFFALSE 17445
// exit ;
17443: GO 17501
// un := tmp [ rand ( 1 , tmp ) ] ;
17445: LD_ADDR_VAR 0 2
17449: PUSH
17450: LD_VAR 0 3
17454: PUSH
17455: LD_INT 1
17457: PPUSH
17458: LD_VAR 0 3
17462: PPUSH
17463: CALL_OW 12
17467: ARRAY
17468: ST_TO_ADDR
// if Crawls ( un ) then
17469: LD_VAR 0 2
17473: PPUSH
17474: CALL_OW 318
17478: IFFALSE 17489
// ComWalk ( un ) ;
17480: LD_VAR 0 2
17484: PPUSH
17485: CALL_OW 138
// SetClass ( un , class_mortar ) ;
17489: LD_VAR 0 2
17493: PPUSH
17494: LD_INT 8
17496: PPUSH
17497: CALL_OW 336
// end ;
17501: PPOPN 3
17503: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
17504: LD_EXP 48
17508: PUSH
17509: LD_EXP 92
17513: AND
17514: IFFALSE 17658
17516: GO 17518
17518: DISABLE
17519: LD_INT 0
17521: PPUSH
17522: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
17523: LD_ADDR_VAR 0 2
17527: PUSH
17528: LD_INT 22
17530: PUSH
17531: LD_OWVAR 2
17535: PUSH
17536: EMPTY
17537: LIST
17538: LIST
17539: PUSH
17540: LD_INT 21
17542: PUSH
17543: LD_INT 2
17545: PUSH
17546: EMPTY
17547: LIST
17548: LIST
17549: PUSH
17550: LD_INT 2
17552: PUSH
17553: LD_INT 34
17555: PUSH
17556: LD_INT 12
17558: PUSH
17559: EMPTY
17560: LIST
17561: LIST
17562: PUSH
17563: LD_INT 34
17565: PUSH
17566: LD_INT 51
17568: PUSH
17569: EMPTY
17570: LIST
17571: LIST
17572: PUSH
17573: LD_INT 34
17575: PUSH
17576: LD_INT 32
17578: PUSH
17579: EMPTY
17580: LIST
17581: LIST
17582: PUSH
17583: EMPTY
17584: LIST
17585: LIST
17586: LIST
17587: LIST
17588: PUSH
17589: EMPTY
17590: LIST
17591: LIST
17592: LIST
17593: PPUSH
17594: CALL_OW 69
17598: ST_TO_ADDR
// if not tmp then
17599: LD_VAR 0 2
17603: NOT
17604: IFFALSE 17608
// exit ;
17606: GO 17658
// for i in tmp do
17608: LD_ADDR_VAR 0 1
17612: PUSH
17613: LD_VAR 0 2
17617: PUSH
17618: FOR_IN
17619: IFFALSE 17656
// if GetCargo ( i , mat_artifact ) = 0 then
17621: LD_VAR 0 1
17625: PPUSH
17626: LD_INT 4
17628: PPUSH
17629: CALL_OW 289
17633: PUSH
17634: LD_INT 0
17636: EQUAL
17637: IFFALSE 17654
// SetCargo ( i , mat_siberit , 100 ) ;
17639: LD_VAR 0 1
17643: PPUSH
17644: LD_INT 3
17646: PPUSH
17647: LD_INT 100
17649: PPUSH
17650: CALL_OW 290
17654: GO 17618
17656: POP
17657: POP
// end ;
17658: PPOPN 2
17660: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
17661: LD_EXP 48
17665: PUSH
17666: LD_EXP 93
17670: AND
17671: IFFALSE 17854
17673: GO 17675
17675: DISABLE
17676: LD_INT 0
17678: PPUSH
17679: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
17680: LD_ADDR_VAR 0 2
17684: PUSH
17685: LD_INT 22
17687: PUSH
17688: LD_OWVAR 2
17692: PUSH
17693: EMPTY
17694: LIST
17695: LIST
17696: PPUSH
17697: CALL_OW 69
17701: ST_TO_ADDR
// if not tmp then
17702: LD_VAR 0 2
17706: NOT
17707: IFFALSE 17711
// exit ;
17709: GO 17854
// for i := 1 to 2 do
17711: LD_ADDR_VAR 0 1
17715: PUSH
17716: DOUBLE
17717: LD_INT 1
17719: DEC
17720: ST_TO_ADDR
17721: LD_INT 2
17723: PUSH
17724: FOR_TO
17725: IFFALSE 17852
// begin uc_side := your_side ;
17727: LD_ADDR_OWVAR 20
17731: PUSH
17732: LD_OWVAR 2
17736: ST_TO_ADDR
// uc_nation := nation_american ;
17737: LD_ADDR_OWVAR 21
17741: PUSH
17742: LD_INT 1
17744: ST_TO_ADDR
// vc_chassis := us_morphling ;
17745: LD_ADDR_OWVAR 37
17749: PUSH
17750: LD_INT 5
17752: ST_TO_ADDR
// vc_engine := engine_siberite ;
17753: LD_ADDR_OWVAR 39
17757: PUSH
17758: LD_INT 3
17760: ST_TO_ADDR
// vc_control := control_computer ;
17761: LD_ADDR_OWVAR 38
17765: PUSH
17766: LD_INT 3
17768: ST_TO_ADDR
// vc_weapon := us_double_laser ;
17769: LD_ADDR_OWVAR 40
17773: PUSH
17774: LD_INT 10
17776: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
17777: LD_VAR 0 2
17781: PUSH
17782: LD_INT 1
17784: ARRAY
17785: PPUSH
17786: CALL_OW 310
17790: NOT
17791: IFFALSE 17838
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
17793: CALL_OW 45
17797: PPUSH
17798: LD_VAR 0 2
17802: PUSH
17803: LD_INT 1
17805: ARRAY
17806: PPUSH
17807: CALL_OW 250
17811: PPUSH
17812: LD_VAR 0 2
17816: PUSH
17817: LD_INT 1
17819: ARRAY
17820: PPUSH
17821: CALL_OW 251
17825: PPUSH
17826: LD_INT 12
17828: PPUSH
17829: LD_INT 1
17831: PPUSH
17832: CALL_OW 50
17836: GO 17850
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
17838: CALL_OW 45
17842: PPUSH
17843: LD_INT 1
17845: PPUSH
17846: CALL_OW 51
// end ;
17850: GO 17724
17852: POP
17853: POP
// end ;
17854: PPOPN 2
17856: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
17857: LD_EXP 48
17861: PUSH
17862: LD_EXP 94
17866: AND
17867: IFFALSE 18089
17869: GO 17871
17871: DISABLE
17872: LD_INT 0
17874: PPUSH
17875: PPUSH
17876: PPUSH
17877: PPUSH
17878: PPUSH
17879: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
17880: LD_ADDR_VAR 0 6
17884: PUSH
17885: LD_INT 22
17887: PUSH
17888: LD_OWVAR 2
17892: PUSH
17893: EMPTY
17894: LIST
17895: LIST
17896: PUSH
17897: LD_INT 21
17899: PUSH
17900: LD_INT 1
17902: PUSH
17903: EMPTY
17904: LIST
17905: LIST
17906: PUSH
17907: LD_INT 3
17909: PUSH
17910: LD_INT 23
17912: PUSH
17913: LD_INT 0
17915: PUSH
17916: EMPTY
17917: LIST
17918: LIST
17919: PUSH
17920: EMPTY
17921: LIST
17922: LIST
17923: PUSH
17924: EMPTY
17925: LIST
17926: LIST
17927: LIST
17928: PPUSH
17929: CALL_OW 69
17933: ST_TO_ADDR
// if not tmp then
17934: LD_VAR 0 6
17938: NOT
17939: IFFALSE 17943
// exit ;
17941: GO 18089
// s1 := rand ( 1 , 4 ) ;
17943: LD_ADDR_VAR 0 2
17947: PUSH
17948: LD_INT 1
17950: PPUSH
17951: LD_INT 4
17953: PPUSH
17954: CALL_OW 12
17958: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
17959: LD_ADDR_VAR 0 4
17963: PUSH
17964: LD_VAR 0 6
17968: PUSH
17969: LD_INT 1
17971: ARRAY
17972: PPUSH
17973: LD_VAR 0 2
17977: PPUSH
17978: CALL_OW 259
17982: ST_TO_ADDR
// if s1 = 1 then
17983: LD_VAR 0 2
17987: PUSH
17988: LD_INT 1
17990: EQUAL
17991: IFFALSE 18011
// s2 := rand ( 2 , 4 ) else
17993: LD_ADDR_VAR 0 3
17997: PUSH
17998: LD_INT 2
18000: PPUSH
18001: LD_INT 4
18003: PPUSH
18004: CALL_OW 12
18008: ST_TO_ADDR
18009: GO 18019
// s2 := 1 ;
18011: LD_ADDR_VAR 0 3
18015: PUSH
18016: LD_INT 1
18018: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
18019: LD_ADDR_VAR 0 5
18023: PUSH
18024: LD_VAR 0 6
18028: PUSH
18029: LD_INT 1
18031: ARRAY
18032: PPUSH
18033: LD_VAR 0 3
18037: PPUSH
18038: CALL_OW 259
18042: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
18043: LD_VAR 0 6
18047: PUSH
18048: LD_INT 1
18050: ARRAY
18051: PPUSH
18052: LD_VAR 0 2
18056: PPUSH
18057: LD_VAR 0 5
18061: PPUSH
18062: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
18066: LD_VAR 0 6
18070: PUSH
18071: LD_INT 1
18073: ARRAY
18074: PPUSH
18075: LD_VAR 0 3
18079: PPUSH
18080: LD_VAR 0 4
18084: PPUSH
18085: CALL_OW 237
// end ;
18089: PPOPN 6
18091: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
18092: LD_EXP 48
18096: PUSH
18097: LD_EXP 95
18101: AND
18102: IFFALSE 18181
18104: GO 18106
18106: DISABLE
18107: LD_INT 0
18109: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
18110: LD_ADDR_VAR 0 1
18114: PUSH
18115: LD_INT 22
18117: PUSH
18118: LD_OWVAR 2
18122: PUSH
18123: EMPTY
18124: LIST
18125: LIST
18126: PUSH
18127: LD_INT 30
18129: PUSH
18130: LD_INT 3
18132: PUSH
18133: EMPTY
18134: LIST
18135: LIST
18136: PUSH
18137: EMPTY
18138: LIST
18139: LIST
18140: PPUSH
18141: CALL_OW 69
18145: ST_TO_ADDR
// if not tmp then
18146: LD_VAR 0 1
18150: NOT
18151: IFFALSE 18155
// exit ;
18153: GO 18181
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
18155: LD_VAR 0 1
18159: PUSH
18160: LD_INT 1
18162: PPUSH
18163: LD_VAR 0 1
18167: PPUSH
18168: CALL_OW 12
18172: ARRAY
18173: PPUSH
18174: LD_INT 1
18176: PPUSH
18177: CALL_OW 234
// end ;
18181: PPOPN 1
18183: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
18184: LD_EXP 48
18188: PUSH
18189: LD_EXP 96
18193: AND
18194: IFFALSE 18306
18196: GO 18198
18198: DISABLE
18199: LD_INT 0
18201: PPUSH
18202: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
18203: LD_ADDR_VAR 0 2
18207: PUSH
18208: LD_INT 22
18210: PUSH
18211: LD_OWVAR 2
18215: PUSH
18216: EMPTY
18217: LIST
18218: LIST
18219: PUSH
18220: LD_INT 2
18222: PUSH
18223: LD_INT 30
18225: PUSH
18226: LD_INT 27
18228: PUSH
18229: EMPTY
18230: LIST
18231: LIST
18232: PUSH
18233: LD_INT 30
18235: PUSH
18236: LD_INT 26
18238: PUSH
18239: EMPTY
18240: LIST
18241: LIST
18242: PUSH
18243: LD_INT 30
18245: PUSH
18246: LD_INT 28
18248: PUSH
18249: EMPTY
18250: LIST
18251: LIST
18252: PUSH
18253: EMPTY
18254: LIST
18255: LIST
18256: LIST
18257: LIST
18258: PUSH
18259: EMPTY
18260: LIST
18261: LIST
18262: PPUSH
18263: CALL_OW 69
18267: ST_TO_ADDR
// if not tmp then
18268: LD_VAR 0 2
18272: NOT
18273: IFFALSE 18277
// exit ;
18275: GO 18306
// for i in tmp do
18277: LD_ADDR_VAR 0 1
18281: PUSH
18282: LD_VAR 0 2
18286: PUSH
18287: FOR_IN
18288: IFFALSE 18304
// SetLives ( i , 1 ) ;
18290: LD_VAR 0 1
18294: PPUSH
18295: LD_INT 1
18297: PPUSH
18298: CALL_OW 234
18302: GO 18287
18304: POP
18305: POP
// end ;
18306: PPOPN 2
18308: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
18309: LD_EXP 48
18313: PUSH
18314: LD_EXP 97
18318: AND
18319: IFFALSE 18593
18321: GO 18323
18323: DISABLE
18324: LD_INT 0
18326: PPUSH
18327: PPUSH
18328: PPUSH
// begin i := rand ( 1 , 7 ) ;
18329: LD_ADDR_VAR 0 1
18333: PUSH
18334: LD_INT 1
18336: PPUSH
18337: LD_INT 7
18339: PPUSH
18340: CALL_OW 12
18344: ST_TO_ADDR
// case i of 1 :
18345: LD_VAR 0 1
18349: PUSH
18350: LD_INT 1
18352: DOUBLE
18353: EQUAL
18354: IFTRUE 18358
18356: GO 18368
18358: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
18359: LD_STRING earthquake(getX(game), 0, 32)
18361: PPUSH
18362: CALL_OW 559
18366: GO 18593
18368: LD_INT 2
18370: DOUBLE
18371: EQUAL
18372: IFTRUE 18376
18374: GO 18390
18376: POP
// begin ToLua ( displayStucuk(); ) ;
18377: LD_STRING displayStucuk();
18379: PPUSH
18380: CALL_OW 559
// ResetFog ;
18384: CALL_OW 335
// end ; 3 :
18388: GO 18593
18390: LD_INT 3
18392: DOUBLE
18393: EQUAL
18394: IFTRUE 18398
18396: GO 18502
18398: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18399: LD_ADDR_VAR 0 2
18403: PUSH
18404: LD_INT 22
18406: PUSH
18407: LD_OWVAR 2
18411: PUSH
18412: EMPTY
18413: LIST
18414: LIST
18415: PUSH
18416: LD_INT 25
18418: PUSH
18419: LD_INT 1
18421: PUSH
18422: EMPTY
18423: LIST
18424: LIST
18425: PUSH
18426: EMPTY
18427: LIST
18428: LIST
18429: PPUSH
18430: CALL_OW 69
18434: ST_TO_ADDR
// if not tmp then
18435: LD_VAR 0 2
18439: NOT
18440: IFFALSE 18444
// exit ;
18442: GO 18593
// un := tmp [ rand ( 1 , tmp ) ] ;
18444: LD_ADDR_VAR 0 3
18448: PUSH
18449: LD_VAR 0 2
18453: PUSH
18454: LD_INT 1
18456: PPUSH
18457: LD_VAR 0 2
18461: PPUSH
18462: CALL_OW 12
18466: ARRAY
18467: ST_TO_ADDR
// if Crawls ( un ) then
18468: LD_VAR 0 3
18472: PPUSH
18473: CALL_OW 318
18477: IFFALSE 18488
// ComWalk ( un ) ;
18479: LD_VAR 0 3
18483: PPUSH
18484: CALL_OW 138
// SetClass ( un , class_mortar ) ;
18488: LD_VAR 0 3
18492: PPUSH
18493: LD_INT 8
18495: PPUSH
18496: CALL_OW 336
// end ; 4 :
18500: GO 18593
18502: LD_INT 4
18504: DOUBLE
18505: EQUAL
18506: IFTRUE 18510
18508: GO 18571
18510: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
18511: LD_ADDR_VAR 0 2
18515: PUSH
18516: LD_INT 22
18518: PUSH
18519: LD_OWVAR 2
18523: PUSH
18524: EMPTY
18525: LIST
18526: LIST
18527: PUSH
18528: LD_INT 30
18530: PUSH
18531: LD_INT 29
18533: PUSH
18534: EMPTY
18535: LIST
18536: LIST
18537: PUSH
18538: EMPTY
18539: LIST
18540: LIST
18541: PPUSH
18542: CALL_OW 69
18546: ST_TO_ADDR
// if not tmp then
18547: LD_VAR 0 2
18551: NOT
18552: IFFALSE 18556
// exit ;
18554: GO 18593
// DestroyUnit ( tmp [ 1 ] ) ;
18556: LD_VAR 0 2
18560: PUSH
18561: LD_INT 1
18563: ARRAY
18564: PPUSH
18565: CALL_OW 65
// end ; 5 .. 7 :
18569: GO 18593
18571: LD_INT 5
18573: DOUBLE
18574: GREATEREQUAL
18575: IFFALSE 18583
18577: LD_INT 7
18579: DOUBLE
18580: LESSEQUAL
18581: IFTRUE 18585
18583: GO 18592
18585: POP
// StreamSibBomb ; end ;
18586: CALL 14843 0 0
18590: GO 18593
18592: POP
// end ;
18593: PPOPN 3
18595: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
18596: LD_EXP 48
18600: PUSH
18601: LD_EXP 98
18605: AND
18606: IFFALSE 18762
18608: GO 18610
18610: DISABLE
18611: LD_INT 0
18613: PPUSH
18614: PPUSH
18615: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
18616: LD_ADDR_VAR 0 2
18620: PUSH
18621: LD_INT 81
18623: PUSH
18624: LD_OWVAR 2
18628: PUSH
18629: EMPTY
18630: LIST
18631: LIST
18632: PUSH
18633: LD_INT 2
18635: PUSH
18636: LD_INT 21
18638: PUSH
18639: LD_INT 1
18641: PUSH
18642: EMPTY
18643: LIST
18644: LIST
18645: PUSH
18646: LD_INT 21
18648: PUSH
18649: LD_INT 2
18651: PUSH
18652: EMPTY
18653: LIST
18654: LIST
18655: PUSH
18656: EMPTY
18657: LIST
18658: LIST
18659: LIST
18660: PUSH
18661: EMPTY
18662: LIST
18663: LIST
18664: PPUSH
18665: CALL_OW 69
18669: ST_TO_ADDR
// if not tmp then
18670: LD_VAR 0 2
18674: NOT
18675: IFFALSE 18679
// exit ;
18677: GO 18762
// p := 0 ;
18679: LD_ADDR_VAR 0 3
18683: PUSH
18684: LD_INT 0
18686: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
18687: LD_INT 35
18689: PPUSH
18690: CALL_OW 67
// p := p + 1 ;
18694: LD_ADDR_VAR 0 3
18698: PUSH
18699: LD_VAR 0 3
18703: PUSH
18704: LD_INT 1
18706: PLUS
18707: ST_TO_ADDR
// for i in tmp do
18708: LD_ADDR_VAR 0 1
18712: PUSH
18713: LD_VAR 0 2
18717: PUSH
18718: FOR_IN
18719: IFFALSE 18750
// if GetLives ( i ) < 1000 then
18721: LD_VAR 0 1
18725: PPUSH
18726: CALL_OW 256
18730: PUSH
18731: LD_INT 1000
18733: LESS
18734: IFFALSE 18748
// SetLives ( i , 1000 ) ;
18736: LD_VAR 0 1
18740: PPUSH
18741: LD_INT 1000
18743: PPUSH
18744: CALL_OW 234
18748: GO 18718
18750: POP
18751: POP
// until p > 20 ;
18752: LD_VAR 0 3
18756: PUSH
18757: LD_INT 20
18759: GREATER
18760: IFFALSE 18687
// end ;
18762: PPOPN 3
18764: END
// every 0 0$1 trigger StreamModeActive and sTime do
18765: LD_EXP 48
18769: PUSH
18770: LD_EXP 99
18774: AND
18775: IFFALSE 18810
18777: GO 18779
18779: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
18780: LD_INT 28
18782: PPUSH
18783: LD_OWVAR 2
18787: PPUSH
18788: LD_INT 2
18790: PPUSH
18791: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
18795: LD_INT 30
18797: PPUSH
18798: LD_OWVAR 2
18802: PPUSH
18803: LD_INT 2
18805: PPUSH
18806: CALL_OW 322
// end ;
18810: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
18811: LD_EXP 48
18815: PUSH
18816: LD_EXP 100
18820: AND
18821: IFFALSE 18942
18823: GO 18825
18825: DISABLE
18826: LD_INT 0
18828: PPUSH
18829: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
18830: LD_ADDR_VAR 0 2
18834: PUSH
18835: LD_INT 22
18837: PUSH
18838: LD_OWVAR 2
18842: PUSH
18843: EMPTY
18844: LIST
18845: LIST
18846: PUSH
18847: LD_INT 21
18849: PUSH
18850: LD_INT 1
18852: PUSH
18853: EMPTY
18854: LIST
18855: LIST
18856: PUSH
18857: LD_INT 3
18859: PUSH
18860: LD_INT 23
18862: PUSH
18863: LD_INT 0
18865: PUSH
18866: EMPTY
18867: LIST
18868: LIST
18869: PUSH
18870: EMPTY
18871: LIST
18872: LIST
18873: PUSH
18874: EMPTY
18875: LIST
18876: LIST
18877: LIST
18878: PPUSH
18879: CALL_OW 69
18883: ST_TO_ADDR
// if not tmp then
18884: LD_VAR 0 2
18888: NOT
18889: IFFALSE 18893
// exit ;
18891: GO 18942
// for i in tmp do
18893: LD_ADDR_VAR 0 1
18897: PUSH
18898: LD_VAR 0 2
18902: PUSH
18903: FOR_IN
18904: IFFALSE 18940
// begin if Crawls ( i ) then
18906: LD_VAR 0 1
18910: PPUSH
18911: CALL_OW 318
18915: IFFALSE 18926
// ComWalk ( i ) ;
18917: LD_VAR 0 1
18921: PPUSH
18922: CALL_OW 138
// SetClass ( i , 2 ) ;
18926: LD_VAR 0 1
18930: PPUSH
18931: LD_INT 2
18933: PPUSH
18934: CALL_OW 336
// end ;
18938: GO 18903
18940: POP
18941: POP
// end ;
18942: PPOPN 2
18944: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
18945: LD_EXP 48
18949: PUSH
18950: LD_EXP 101
18954: AND
18955: IFFALSE 19236
18957: GO 18959
18959: DISABLE
18960: LD_INT 0
18962: PPUSH
18963: PPUSH
18964: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
18965: LD_OWVAR 2
18969: PPUSH
18970: LD_INT 9
18972: PPUSH
18973: LD_INT 1
18975: PPUSH
18976: LD_INT 1
18978: PPUSH
18979: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
18983: LD_INT 9
18985: PPUSH
18986: LD_OWVAR 2
18990: PPUSH
18991: CALL_OW 343
// uc_side := 9 ;
18995: LD_ADDR_OWVAR 20
18999: PUSH
19000: LD_INT 9
19002: ST_TO_ADDR
// uc_nation := 2 ;
19003: LD_ADDR_OWVAR 21
19007: PUSH
19008: LD_INT 2
19010: ST_TO_ADDR
// hc_name := Dark Warrior ;
19011: LD_ADDR_OWVAR 26
19015: PUSH
19016: LD_STRING Dark Warrior
19018: ST_TO_ADDR
// hc_gallery :=  ;
19019: LD_ADDR_OWVAR 33
19023: PUSH
19024: LD_STRING 
19026: ST_TO_ADDR
// hc_noskilllimit := true ;
19027: LD_ADDR_OWVAR 76
19031: PUSH
19032: LD_INT 1
19034: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
19035: LD_ADDR_OWVAR 31
19039: PUSH
19040: LD_INT 30
19042: PUSH
19043: LD_INT 30
19045: PUSH
19046: LD_INT 30
19048: PUSH
19049: LD_INT 30
19051: PUSH
19052: EMPTY
19053: LIST
19054: LIST
19055: LIST
19056: LIST
19057: ST_TO_ADDR
// un := CreateHuman ;
19058: LD_ADDR_VAR 0 3
19062: PUSH
19063: CALL_OW 44
19067: ST_TO_ADDR
// hc_noskilllimit := false ;
19068: LD_ADDR_OWVAR 76
19072: PUSH
19073: LD_INT 0
19075: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
19076: LD_VAR 0 3
19080: PPUSH
19081: LD_INT 1
19083: PPUSH
19084: CALL_OW 51
// p := 0 ;
19088: LD_ADDR_VAR 0 2
19092: PUSH
19093: LD_INT 0
19095: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
19096: LD_INT 35
19098: PPUSH
19099: CALL_OW 67
// p := p + 1 ;
19103: LD_ADDR_VAR 0 2
19107: PUSH
19108: LD_VAR 0 2
19112: PUSH
19113: LD_INT 1
19115: PLUS
19116: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
19117: LD_VAR 0 3
19121: PPUSH
19122: CALL_OW 256
19126: PUSH
19127: LD_INT 1000
19129: LESS
19130: IFFALSE 19144
// SetLives ( un , 1000 ) ;
19132: LD_VAR 0 3
19136: PPUSH
19137: LD_INT 1000
19139: PPUSH
19140: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
19144: LD_VAR 0 3
19148: PPUSH
19149: LD_INT 81
19151: PUSH
19152: LD_OWVAR 2
19156: PUSH
19157: EMPTY
19158: LIST
19159: LIST
19160: PUSH
19161: LD_INT 91
19163: PUSH
19164: LD_VAR 0 3
19168: PUSH
19169: LD_INT 30
19171: PUSH
19172: EMPTY
19173: LIST
19174: LIST
19175: LIST
19176: PUSH
19177: EMPTY
19178: LIST
19179: LIST
19180: PPUSH
19181: CALL_OW 69
19185: PPUSH
19186: LD_VAR 0 3
19190: PPUSH
19191: CALL_OW 74
19195: PPUSH
19196: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
19200: LD_VAR 0 2
19204: PUSH
19205: LD_INT 60
19207: GREATER
19208: PUSH
19209: LD_VAR 0 3
19213: PPUSH
19214: CALL_OW 301
19218: OR
19219: IFFALSE 19096
// if un then
19221: LD_VAR 0 3
19225: IFFALSE 19236
// RemoveUnit ( un ) ;
19227: LD_VAR 0 3
19231: PPUSH
19232: CALL_OW 64
// end ;
19236: PPOPN 3
19238: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
19239: LD_INT 0
19241: PPUSH
// case cmd of 301 :
19242: LD_VAR 0 1
19246: PUSH
19247: LD_INT 301
19249: DOUBLE
19250: EQUAL
19251: IFTRUE 19255
19253: GO 19287
19255: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
19256: LD_VAR 0 6
19260: PPUSH
19261: LD_VAR 0 7
19265: PPUSH
19266: LD_VAR 0 8
19270: PPUSH
19271: LD_VAR 0 4
19275: PPUSH
19276: LD_VAR 0 5
19280: PPUSH
19281: CALL 20488 0 5
19285: GO 19408
19287: LD_INT 302
19289: DOUBLE
19290: EQUAL
19291: IFTRUE 19295
19293: GO 19332
19295: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
19296: LD_VAR 0 6
19300: PPUSH
19301: LD_VAR 0 7
19305: PPUSH
19306: LD_VAR 0 8
19310: PPUSH
19311: LD_VAR 0 9
19315: PPUSH
19316: LD_VAR 0 4
19320: PPUSH
19321: LD_VAR 0 5
19325: PPUSH
19326: CALL 20579 0 6
19330: GO 19408
19332: LD_INT 303
19334: DOUBLE
19335: EQUAL
19336: IFTRUE 19340
19338: GO 19377
19340: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
19341: LD_VAR 0 6
19345: PPUSH
19346: LD_VAR 0 7
19350: PPUSH
19351: LD_VAR 0 8
19355: PPUSH
19356: LD_VAR 0 9
19360: PPUSH
19361: LD_VAR 0 4
19365: PPUSH
19366: LD_VAR 0 5
19370: PPUSH
19371: CALL 19413 0 6
19375: GO 19408
19377: LD_INT 304
19379: DOUBLE
19380: EQUAL
19381: IFTRUE 19385
19383: GO 19407
19385: POP
// hHackTeleport ( unit , x , y ) ; end ;
19386: LD_VAR 0 2
19390: PPUSH
19391: LD_VAR 0 4
19395: PPUSH
19396: LD_VAR 0 5
19400: PPUSH
19401: CALL 21172 0 3
19405: GO 19408
19407: POP
// end ;
19408: LD_VAR 0 12
19412: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
19413: LD_INT 0
19415: PPUSH
19416: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
19417: LD_VAR 0 1
19421: PUSH
19422: LD_INT 1
19424: LESS
19425: PUSH
19426: LD_VAR 0 1
19430: PUSH
19431: LD_INT 3
19433: GREATER
19434: OR
19435: PUSH
19436: LD_VAR 0 5
19440: PPUSH
19441: LD_VAR 0 6
19445: PPUSH
19446: CALL_OW 428
19450: OR
19451: IFFALSE 19455
// exit ;
19453: GO 20175
// uc_side := your_side ;
19455: LD_ADDR_OWVAR 20
19459: PUSH
19460: LD_OWVAR 2
19464: ST_TO_ADDR
// uc_nation := nation ;
19465: LD_ADDR_OWVAR 21
19469: PUSH
19470: LD_VAR 0 1
19474: ST_TO_ADDR
// bc_level = 1 ;
19475: LD_ADDR_OWVAR 43
19479: PUSH
19480: LD_INT 1
19482: ST_TO_ADDR
// case btype of 1 :
19483: LD_VAR 0 2
19487: PUSH
19488: LD_INT 1
19490: DOUBLE
19491: EQUAL
19492: IFTRUE 19496
19494: GO 19507
19496: POP
// bc_type := b_depot ; 2 :
19497: LD_ADDR_OWVAR 42
19501: PUSH
19502: LD_INT 0
19504: ST_TO_ADDR
19505: GO 20119
19507: LD_INT 2
19509: DOUBLE
19510: EQUAL
19511: IFTRUE 19515
19513: GO 19526
19515: POP
// bc_type := b_warehouse ; 3 :
19516: LD_ADDR_OWVAR 42
19520: PUSH
19521: LD_INT 1
19523: ST_TO_ADDR
19524: GO 20119
19526: LD_INT 3
19528: DOUBLE
19529: EQUAL
19530: IFTRUE 19534
19532: GO 19545
19534: POP
// bc_type := b_lab ; 4 .. 9 :
19535: LD_ADDR_OWVAR 42
19539: PUSH
19540: LD_INT 6
19542: ST_TO_ADDR
19543: GO 20119
19545: LD_INT 4
19547: DOUBLE
19548: GREATEREQUAL
19549: IFFALSE 19557
19551: LD_INT 9
19553: DOUBLE
19554: LESSEQUAL
19555: IFTRUE 19559
19557: GO 19611
19559: POP
// begin bc_type := b_lab_half ;
19560: LD_ADDR_OWVAR 42
19564: PUSH
19565: LD_INT 7
19567: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
19568: LD_ADDR_OWVAR 44
19572: PUSH
19573: LD_INT 10
19575: PUSH
19576: LD_INT 11
19578: PUSH
19579: LD_INT 12
19581: PUSH
19582: LD_INT 15
19584: PUSH
19585: LD_INT 14
19587: PUSH
19588: LD_INT 13
19590: PUSH
19591: EMPTY
19592: LIST
19593: LIST
19594: LIST
19595: LIST
19596: LIST
19597: LIST
19598: PUSH
19599: LD_VAR 0 2
19603: PUSH
19604: LD_INT 3
19606: MINUS
19607: ARRAY
19608: ST_TO_ADDR
// end ; 10 .. 13 :
19609: GO 20119
19611: LD_INT 10
19613: DOUBLE
19614: GREATEREQUAL
19615: IFFALSE 19623
19617: LD_INT 13
19619: DOUBLE
19620: LESSEQUAL
19621: IFTRUE 19625
19623: GO 19702
19625: POP
// begin bc_type := b_lab_full ;
19626: LD_ADDR_OWVAR 42
19630: PUSH
19631: LD_INT 8
19633: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
19634: LD_ADDR_OWVAR 44
19638: PUSH
19639: LD_INT 10
19641: PUSH
19642: LD_INT 12
19644: PUSH
19645: LD_INT 14
19647: PUSH
19648: LD_INT 13
19650: PUSH
19651: EMPTY
19652: LIST
19653: LIST
19654: LIST
19655: LIST
19656: PUSH
19657: LD_VAR 0 2
19661: PUSH
19662: LD_INT 9
19664: MINUS
19665: ARRAY
19666: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
19667: LD_ADDR_OWVAR 45
19671: PUSH
19672: LD_INT 11
19674: PUSH
19675: LD_INT 15
19677: PUSH
19678: LD_INT 12
19680: PUSH
19681: LD_INT 15
19683: PUSH
19684: EMPTY
19685: LIST
19686: LIST
19687: LIST
19688: LIST
19689: PUSH
19690: LD_VAR 0 2
19694: PUSH
19695: LD_INT 9
19697: MINUS
19698: ARRAY
19699: ST_TO_ADDR
// end ; 14 :
19700: GO 20119
19702: LD_INT 14
19704: DOUBLE
19705: EQUAL
19706: IFTRUE 19710
19708: GO 19721
19710: POP
// bc_type := b_workshop ; 15 :
19711: LD_ADDR_OWVAR 42
19715: PUSH
19716: LD_INT 2
19718: ST_TO_ADDR
19719: GO 20119
19721: LD_INT 15
19723: DOUBLE
19724: EQUAL
19725: IFTRUE 19729
19727: GO 19740
19729: POP
// bc_type := b_factory ; 16 :
19730: LD_ADDR_OWVAR 42
19734: PUSH
19735: LD_INT 3
19737: ST_TO_ADDR
19738: GO 20119
19740: LD_INT 16
19742: DOUBLE
19743: EQUAL
19744: IFTRUE 19748
19746: GO 19759
19748: POP
// bc_type := b_ext_gun ; 17 :
19749: LD_ADDR_OWVAR 42
19753: PUSH
19754: LD_INT 17
19756: ST_TO_ADDR
19757: GO 20119
19759: LD_INT 17
19761: DOUBLE
19762: EQUAL
19763: IFTRUE 19767
19765: GO 19795
19767: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
19768: LD_ADDR_OWVAR 42
19772: PUSH
19773: LD_INT 19
19775: PUSH
19776: LD_INT 23
19778: PUSH
19779: LD_INT 19
19781: PUSH
19782: EMPTY
19783: LIST
19784: LIST
19785: LIST
19786: PUSH
19787: LD_VAR 0 1
19791: ARRAY
19792: ST_TO_ADDR
19793: GO 20119
19795: LD_INT 18
19797: DOUBLE
19798: EQUAL
19799: IFTRUE 19803
19801: GO 19814
19803: POP
// bc_type := b_ext_radar ; 19 :
19804: LD_ADDR_OWVAR 42
19808: PUSH
19809: LD_INT 20
19811: ST_TO_ADDR
19812: GO 20119
19814: LD_INT 19
19816: DOUBLE
19817: EQUAL
19818: IFTRUE 19822
19820: GO 19833
19822: POP
// bc_type := b_ext_radio ; 20 :
19823: LD_ADDR_OWVAR 42
19827: PUSH
19828: LD_INT 22
19830: ST_TO_ADDR
19831: GO 20119
19833: LD_INT 20
19835: DOUBLE
19836: EQUAL
19837: IFTRUE 19841
19839: GO 19852
19841: POP
// bc_type := b_ext_siberium ; 21 :
19842: LD_ADDR_OWVAR 42
19846: PUSH
19847: LD_INT 21
19849: ST_TO_ADDR
19850: GO 20119
19852: LD_INT 21
19854: DOUBLE
19855: EQUAL
19856: IFTRUE 19860
19858: GO 19871
19860: POP
// bc_type := b_ext_computer ; 22 :
19861: LD_ADDR_OWVAR 42
19865: PUSH
19866: LD_INT 24
19868: ST_TO_ADDR
19869: GO 20119
19871: LD_INT 22
19873: DOUBLE
19874: EQUAL
19875: IFTRUE 19879
19877: GO 19890
19879: POP
// bc_type := b_ext_track ; 23 :
19880: LD_ADDR_OWVAR 42
19884: PUSH
19885: LD_INT 16
19887: ST_TO_ADDR
19888: GO 20119
19890: LD_INT 23
19892: DOUBLE
19893: EQUAL
19894: IFTRUE 19898
19896: GO 19909
19898: POP
// bc_type := b_ext_laser ; 24 :
19899: LD_ADDR_OWVAR 42
19903: PUSH
19904: LD_INT 25
19906: ST_TO_ADDR
19907: GO 20119
19909: LD_INT 24
19911: DOUBLE
19912: EQUAL
19913: IFTRUE 19917
19915: GO 19928
19917: POP
// bc_type := b_control_tower ; 25 :
19918: LD_ADDR_OWVAR 42
19922: PUSH
19923: LD_INT 36
19925: ST_TO_ADDR
19926: GO 20119
19928: LD_INT 25
19930: DOUBLE
19931: EQUAL
19932: IFTRUE 19936
19934: GO 19947
19936: POP
// bc_type := b_breastwork ; 26 :
19937: LD_ADDR_OWVAR 42
19941: PUSH
19942: LD_INT 31
19944: ST_TO_ADDR
19945: GO 20119
19947: LD_INT 26
19949: DOUBLE
19950: EQUAL
19951: IFTRUE 19955
19953: GO 19966
19955: POP
// bc_type := b_bunker ; 27 :
19956: LD_ADDR_OWVAR 42
19960: PUSH
19961: LD_INT 32
19963: ST_TO_ADDR
19964: GO 20119
19966: LD_INT 27
19968: DOUBLE
19969: EQUAL
19970: IFTRUE 19974
19972: GO 19985
19974: POP
// bc_type := b_turret ; 28 :
19975: LD_ADDR_OWVAR 42
19979: PUSH
19980: LD_INT 33
19982: ST_TO_ADDR
19983: GO 20119
19985: LD_INT 28
19987: DOUBLE
19988: EQUAL
19989: IFTRUE 19993
19991: GO 20004
19993: POP
// bc_type := b_armoury ; 29 :
19994: LD_ADDR_OWVAR 42
19998: PUSH
19999: LD_INT 4
20001: ST_TO_ADDR
20002: GO 20119
20004: LD_INT 29
20006: DOUBLE
20007: EQUAL
20008: IFTRUE 20012
20010: GO 20023
20012: POP
// bc_type := b_barracks ; 30 :
20013: LD_ADDR_OWVAR 42
20017: PUSH
20018: LD_INT 5
20020: ST_TO_ADDR
20021: GO 20119
20023: LD_INT 30
20025: DOUBLE
20026: EQUAL
20027: IFTRUE 20031
20029: GO 20042
20031: POP
// bc_type := b_solar_power ; 31 :
20032: LD_ADDR_OWVAR 42
20036: PUSH
20037: LD_INT 27
20039: ST_TO_ADDR
20040: GO 20119
20042: LD_INT 31
20044: DOUBLE
20045: EQUAL
20046: IFTRUE 20050
20048: GO 20061
20050: POP
// bc_type := b_oil_power ; 32 :
20051: LD_ADDR_OWVAR 42
20055: PUSH
20056: LD_INT 26
20058: ST_TO_ADDR
20059: GO 20119
20061: LD_INT 32
20063: DOUBLE
20064: EQUAL
20065: IFTRUE 20069
20067: GO 20080
20069: POP
// bc_type := b_siberite_power ; 33 :
20070: LD_ADDR_OWVAR 42
20074: PUSH
20075: LD_INT 28
20077: ST_TO_ADDR
20078: GO 20119
20080: LD_INT 33
20082: DOUBLE
20083: EQUAL
20084: IFTRUE 20088
20086: GO 20099
20088: POP
// bc_type := b_oil_mine ; 34 :
20089: LD_ADDR_OWVAR 42
20093: PUSH
20094: LD_INT 29
20096: ST_TO_ADDR
20097: GO 20119
20099: LD_INT 34
20101: DOUBLE
20102: EQUAL
20103: IFTRUE 20107
20105: GO 20118
20107: POP
// bc_type := b_siberite_mine ; end ;
20108: LD_ADDR_OWVAR 42
20112: PUSH
20113: LD_INT 30
20115: ST_TO_ADDR
20116: GO 20119
20118: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
20119: LD_ADDR_VAR 0 8
20123: PUSH
20124: LD_VAR 0 5
20128: PPUSH
20129: LD_VAR 0 6
20133: PPUSH
20134: LD_VAR 0 3
20138: PPUSH
20139: CALL_OW 47
20143: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
20144: LD_OWVAR 42
20148: PUSH
20149: LD_INT 32
20151: PUSH
20152: LD_INT 33
20154: PUSH
20155: EMPTY
20156: LIST
20157: LIST
20158: IN
20159: IFFALSE 20175
// PlaceWeaponTurret ( b , weapon ) ;
20161: LD_VAR 0 8
20165: PPUSH
20166: LD_VAR 0 4
20170: PPUSH
20171: CALL_OW 431
// end ;
20175: LD_VAR 0 7
20179: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
20180: LD_INT 0
20182: PPUSH
20183: PPUSH
20184: PPUSH
20185: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20186: LD_ADDR_VAR 0 4
20190: PUSH
20191: LD_INT 22
20193: PUSH
20194: LD_OWVAR 2
20198: PUSH
20199: EMPTY
20200: LIST
20201: LIST
20202: PUSH
20203: LD_INT 2
20205: PUSH
20206: LD_INT 30
20208: PUSH
20209: LD_INT 0
20211: PUSH
20212: EMPTY
20213: LIST
20214: LIST
20215: PUSH
20216: LD_INT 30
20218: PUSH
20219: LD_INT 1
20221: PUSH
20222: EMPTY
20223: LIST
20224: LIST
20225: PUSH
20226: EMPTY
20227: LIST
20228: LIST
20229: LIST
20230: PUSH
20231: EMPTY
20232: LIST
20233: LIST
20234: PPUSH
20235: CALL_OW 69
20239: ST_TO_ADDR
// if not tmp then
20240: LD_VAR 0 4
20244: NOT
20245: IFFALSE 20249
// exit ;
20247: GO 20308
// for i in tmp do
20249: LD_ADDR_VAR 0 2
20253: PUSH
20254: LD_VAR 0 4
20258: PUSH
20259: FOR_IN
20260: IFFALSE 20306
// for j = 1 to 3 do
20262: LD_ADDR_VAR 0 3
20266: PUSH
20267: DOUBLE
20268: LD_INT 1
20270: DEC
20271: ST_TO_ADDR
20272: LD_INT 3
20274: PUSH
20275: FOR_TO
20276: IFFALSE 20302
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
20278: LD_VAR 0 2
20282: PPUSH
20283: CALL_OW 274
20287: PPUSH
20288: LD_VAR 0 3
20292: PPUSH
20293: LD_INT 99999
20295: PPUSH
20296: CALL_OW 277
20300: GO 20275
20302: POP
20303: POP
20304: GO 20259
20306: POP
20307: POP
// end ;
20308: LD_VAR 0 1
20312: RET
// export function hHackSetLevel10 ; var i , j ; begin
20313: LD_INT 0
20315: PPUSH
20316: PPUSH
20317: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
20318: LD_ADDR_VAR 0 2
20322: PUSH
20323: LD_INT 21
20325: PUSH
20326: LD_INT 1
20328: PUSH
20329: EMPTY
20330: LIST
20331: LIST
20332: PPUSH
20333: CALL_OW 69
20337: PUSH
20338: FOR_IN
20339: IFFALSE 20391
// if IsSelected ( i ) then
20341: LD_VAR 0 2
20345: PPUSH
20346: CALL_OW 306
20350: IFFALSE 20389
// begin for j := 1 to 4 do
20352: LD_ADDR_VAR 0 3
20356: PUSH
20357: DOUBLE
20358: LD_INT 1
20360: DEC
20361: ST_TO_ADDR
20362: LD_INT 4
20364: PUSH
20365: FOR_TO
20366: IFFALSE 20387
// SetSkill ( i , j , 10 ) ;
20368: LD_VAR 0 2
20372: PPUSH
20373: LD_VAR 0 3
20377: PPUSH
20378: LD_INT 10
20380: PPUSH
20381: CALL_OW 237
20385: GO 20365
20387: POP
20388: POP
// end ;
20389: GO 20338
20391: POP
20392: POP
// end ;
20393: LD_VAR 0 1
20397: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
20398: LD_INT 0
20400: PPUSH
20401: PPUSH
20402: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
20403: LD_ADDR_VAR 0 2
20407: PUSH
20408: LD_INT 22
20410: PUSH
20411: LD_OWVAR 2
20415: PUSH
20416: EMPTY
20417: LIST
20418: LIST
20419: PUSH
20420: LD_INT 21
20422: PUSH
20423: LD_INT 1
20425: PUSH
20426: EMPTY
20427: LIST
20428: LIST
20429: PUSH
20430: EMPTY
20431: LIST
20432: LIST
20433: PPUSH
20434: CALL_OW 69
20438: PUSH
20439: FOR_IN
20440: IFFALSE 20481
// begin for j := 1 to 4 do
20442: LD_ADDR_VAR 0 3
20446: PUSH
20447: DOUBLE
20448: LD_INT 1
20450: DEC
20451: ST_TO_ADDR
20452: LD_INT 4
20454: PUSH
20455: FOR_TO
20456: IFFALSE 20477
// SetSkill ( i , j , 10 ) ;
20458: LD_VAR 0 2
20462: PPUSH
20463: LD_VAR 0 3
20467: PPUSH
20468: LD_INT 10
20470: PPUSH
20471: CALL_OW 237
20475: GO 20455
20477: POP
20478: POP
// end ;
20479: GO 20439
20481: POP
20482: POP
// end ;
20483: LD_VAR 0 1
20487: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
20488: LD_INT 0
20490: PPUSH
// uc_side := your_side ;
20491: LD_ADDR_OWVAR 20
20495: PUSH
20496: LD_OWVAR 2
20500: ST_TO_ADDR
// uc_nation := nation ;
20501: LD_ADDR_OWVAR 21
20505: PUSH
20506: LD_VAR 0 1
20510: ST_TO_ADDR
// InitHc ;
20511: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
20515: LD_INT 0
20517: PPUSH
20518: LD_VAR 0 2
20522: PPUSH
20523: LD_VAR 0 3
20527: PPUSH
20528: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
20532: LD_VAR 0 4
20536: PPUSH
20537: LD_VAR 0 5
20541: PPUSH
20542: CALL_OW 428
20546: PUSH
20547: LD_INT 0
20549: EQUAL
20550: IFFALSE 20574
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
20552: CALL_OW 44
20556: PPUSH
20557: LD_VAR 0 4
20561: PPUSH
20562: LD_VAR 0 5
20566: PPUSH
20567: LD_INT 1
20569: PPUSH
20570: CALL_OW 48
// end ;
20574: LD_VAR 0 6
20578: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
20579: LD_INT 0
20581: PPUSH
20582: PPUSH
// uc_side := your_side ;
20583: LD_ADDR_OWVAR 20
20587: PUSH
20588: LD_OWVAR 2
20592: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
20593: LD_VAR 0 1
20597: PUSH
20598: LD_INT 1
20600: PUSH
20601: LD_INT 2
20603: PUSH
20604: LD_INT 3
20606: PUSH
20607: LD_INT 4
20609: PUSH
20610: LD_INT 5
20612: PUSH
20613: EMPTY
20614: LIST
20615: LIST
20616: LIST
20617: LIST
20618: LIST
20619: IN
20620: IFFALSE 20632
// uc_nation := nation_american else
20622: LD_ADDR_OWVAR 21
20626: PUSH
20627: LD_INT 1
20629: ST_TO_ADDR
20630: GO 20675
// if chassis in [ 11 , 12 , 13 , 14 ] then
20632: LD_VAR 0 1
20636: PUSH
20637: LD_INT 11
20639: PUSH
20640: LD_INT 12
20642: PUSH
20643: LD_INT 13
20645: PUSH
20646: LD_INT 14
20648: PUSH
20649: EMPTY
20650: LIST
20651: LIST
20652: LIST
20653: LIST
20654: IN
20655: IFFALSE 20667
// uc_nation := nation_arabian else
20657: LD_ADDR_OWVAR 21
20661: PUSH
20662: LD_INT 2
20664: ST_TO_ADDR
20665: GO 20675
// uc_nation := nation_russian ;
20667: LD_ADDR_OWVAR 21
20671: PUSH
20672: LD_INT 3
20674: ST_TO_ADDR
// vc_chassis := chassis ;
20675: LD_ADDR_OWVAR 37
20679: PUSH
20680: LD_VAR 0 1
20684: ST_TO_ADDR
// vc_engine := engine ;
20685: LD_ADDR_OWVAR 39
20689: PUSH
20690: LD_VAR 0 2
20694: ST_TO_ADDR
// vc_control := control ;
20695: LD_ADDR_OWVAR 38
20699: PUSH
20700: LD_VAR 0 3
20704: ST_TO_ADDR
// vc_weapon := weapon ;
20705: LD_ADDR_OWVAR 40
20709: PUSH
20710: LD_VAR 0 4
20714: ST_TO_ADDR
// un := CreateVehicle ;
20715: LD_ADDR_VAR 0 8
20719: PUSH
20720: CALL_OW 45
20724: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
20725: LD_VAR 0 8
20729: PPUSH
20730: LD_INT 0
20732: PPUSH
20733: LD_INT 5
20735: PPUSH
20736: CALL_OW 12
20740: PPUSH
20741: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
20745: LD_VAR 0 8
20749: PPUSH
20750: LD_VAR 0 5
20754: PPUSH
20755: LD_VAR 0 6
20759: PPUSH
20760: LD_INT 1
20762: PPUSH
20763: CALL_OW 48
// end ;
20767: LD_VAR 0 7
20771: RET
// export hInvincible ; every 1 do
20772: GO 20774
20774: DISABLE
// hInvincible := [ ] ;
20775: LD_ADDR_EXP 102
20779: PUSH
20780: EMPTY
20781: ST_TO_ADDR
20782: END
// every 10 do var i ;
20783: GO 20785
20785: DISABLE
20786: LD_INT 0
20788: PPUSH
// begin enable ;
20789: ENABLE
// if not hInvincible then
20790: LD_EXP 102
20794: NOT
20795: IFFALSE 20799
// exit ;
20797: GO 20843
// for i in hInvincible do
20799: LD_ADDR_VAR 0 1
20803: PUSH
20804: LD_EXP 102
20808: PUSH
20809: FOR_IN
20810: IFFALSE 20841
// if GetLives ( i ) < 1000 then
20812: LD_VAR 0 1
20816: PPUSH
20817: CALL_OW 256
20821: PUSH
20822: LD_INT 1000
20824: LESS
20825: IFFALSE 20839
// SetLives ( i , 1000 ) ;
20827: LD_VAR 0 1
20831: PPUSH
20832: LD_INT 1000
20834: PPUSH
20835: CALL_OW 234
20839: GO 20809
20841: POP
20842: POP
// end ;
20843: PPOPN 1
20845: END
// export function hHackInvincible ; var i ; begin
20846: LD_INT 0
20848: PPUSH
20849: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
20850: LD_ADDR_VAR 0 2
20854: PUSH
20855: LD_INT 2
20857: PUSH
20858: LD_INT 21
20860: PUSH
20861: LD_INT 1
20863: PUSH
20864: EMPTY
20865: LIST
20866: LIST
20867: PUSH
20868: LD_INT 21
20870: PUSH
20871: LD_INT 2
20873: PUSH
20874: EMPTY
20875: LIST
20876: LIST
20877: PUSH
20878: EMPTY
20879: LIST
20880: LIST
20881: LIST
20882: PPUSH
20883: CALL_OW 69
20887: PUSH
20888: FOR_IN
20889: IFFALSE 20950
// if IsSelected ( i ) then
20891: LD_VAR 0 2
20895: PPUSH
20896: CALL_OW 306
20900: IFFALSE 20948
// begin if i in hInvincible then
20902: LD_VAR 0 2
20906: PUSH
20907: LD_EXP 102
20911: IN
20912: IFFALSE 20932
// hInvincible := hInvincible diff i else
20914: LD_ADDR_EXP 102
20918: PUSH
20919: LD_EXP 102
20923: PUSH
20924: LD_VAR 0 2
20928: DIFF
20929: ST_TO_ADDR
20930: GO 20948
// hInvincible := hInvincible union i ;
20932: LD_ADDR_EXP 102
20936: PUSH
20937: LD_EXP 102
20941: PUSH
20942: LD_VAR 0 2
20946: UNION
20947: ST_TO_ADDR
// end ;
20948: GO 20888
20950: POP
20951: POP
// end ;
20952: LD_VAR 0 1
20956: RET
// export function hHackInvisible ; var i , j ; begin
20957: LD_INT 0
20959: PPUSH
20960: PPUSH
20961: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
20962: LD_ADDR_VAR 0 2
20966: PUSH
20967: LD_INT 21
20969: PUSH
20970: LD_INT 1
20972: PUSH
20973: EMPTY
20974: LIST
20975: LIST
20976: PPUSH
20977: CALL_OW 69
20981: PUSH
20982: FOR_IN
20983: IFFALSE 21007
// if IsSelected ( i ) then
20985: LD_VAR 0 2
20989: PPUSH
20990: CALL_OW 306
20994: IFFALSE 21005
// ComForceInvisible ( i ) ;
20996: LD_VAR 0 2
21000: PPUSH
21001: CALL_OW 496
21005: GO 20982
21007: POP
21008: POP
// end ;
21009: LD_VAR 0 1
21013: RET
// export function hHackChangeYourSide ; begin
21014: LD_INT 0
21016: PPUSH
// if your_side = 8 then
21017: LD_OWVAR 2
21021: PUSH
21022: LD_INT 8
21024: EQUAL
21025: IFFALSE 21037
// your_side := 0 else
21027: LD_ADDR_OWVAR 2
21031: PUSH
21032: LD_INT 0
21034: ST_TO_ADDR
21035: GO 21051
// your_side := your_side + 1 ;
21037: LD_ADDR_OWVAR 2
21041: PUSH
21042: LD_OWVAR 2
21046: PUSH
21047: LD_INT 1
21049: PLUS
21050: ST_TO_ADDR
// end ;
21051: LD_VAR 0 1
21055: RET
// export function hHackChangeUnitSide ; var i , j ; begin
21056: LD_INT 0
21058: PPUSH
21059: PPUSH
21060: PPUSH
// for i in all_units do
21061: LD_ADDR_VAR 0 2
21065: PUSH
21066: LD_OWVAR 3
21070: PUSH
21071: FOR_IN
21072: IFFALSE 21150
// if IsSelected ( i ) then
21074: LD_VAR 0 2
21078: PPUSH
21079: CALL_OW 306
21083: IFFALSE 21148
// begin j := GetSide ( i ) ;
21085: LD_ADDR_VAR 0 3
21089: PUSH
21090: LD_VAR 0 2
21094: PPUSH
21095: CALL_OW 255
21099: ST_TO_ADDR
// if j = 8 then
21100: LD_VAR 0 3
21104: PUSH
21105: LD_INT 8
21107: EQUAL
21108: IFFALSE 21120
// j := 0 else
21110: LD_ADDR_VAR 0 3
21114: PUSH
21115: LD_INT 0
21117: ST_TO_ADDR
21118: GO 21134
// j := j + 1 ;
21120: LD_ADDR_VAR 0 3
21124: PUSH
21125: LD_VAR 0 3
21129: PUSH
21130: LD_INT 1
21132: PLUS
21133: ST_TO_ADDR
// SetSide ( i , j ) ;
21134: LD_VAR 0 2
21138: PPUSH
21139: LD_VAR 0 3
21143: PPUSH
21144: CALL_OW 235
// end ;
21148: GO 21071
21150: POP
21151: POP
// end ;
21152: LD_VAR 0 1
21156: RET
// export function hHackFog ; begin
21157: LD_INT 0
21159: PPUSH
// FogOff ( true ) ;
21160: LD_INT 1
21162: PPUSH
21163: CALL_OW 344
// end ;
21167: LD_VAR 0 1
21171: RET
// export function hHackTeleport ( unit , x , y ) ; begin
21172: LD_INT 0
21174: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
21175: LD_VAR 0 1
21179: PPUSH
21180: LD_VAR 0 2
21184: PPUSH
21185: LD_VAR 0 3
21189: PPUSH
21190: LD_INT 1
21192: PPUSH
21193: LD_INT 1
21195: PPUSH
21196: CALL_OW 483
// CenterOnXY ( x , y ) ;
21200: LD_VAR 0 2
21204: PPUSH
21205: LD_VAR 0 3
21209: PPUSH
21210: CALL_OW 84
// end ; end_of_file
21214: LD_VAR 0 4
21218: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
21219: LD_INT 0
21221: PPUSH
21222: PPUSH
21223: PPUSH
21224: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
21225: LD_VAR 0 1
21229: PPUSH
21230: CALL_OW 264
21234: PUSH
21235: LD_EXP 33
21239: EQUAL
21240: IFFALSE 21312
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
21242: LD_INT 68
21244: PPUSH
21245: LD_VAR 0 1
21249: PPUSH
21250: CALL_OW 255
21254: PPUSH
21255: CALL_OW 321
21259: PUSH
21260: LD_INT 2
21262: EQUAL
21263: IFFALSE 21275
// eff := 70 else
21265: LD_ADDR_VAR 0 4
21269: PUSH
21270: LD_INT 70
21272: ST_TO_ADDR
21273: GO 21283
// eff := 30 ;
21275: LD_ADDR_VAR 0 4
21279: PUSH
21280: LD_INT 30
21282: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
21283: LD_VAR 0 1
21287: PPUSH
21288: CALL_OW 250
21292: PPUSH
21293: LD_VAR 0 1
21297: PPUSH
21298: CALL_OW 251
21302: PPUSH
21303: LD_VAR 0 4
21307: PPUSH
21308: CALL_OW 495
// end ; end ;
21312: LD_VAR 0 2
21316: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
21317: LD_INT 0
21319: PPUSH
// end ;
21320: LD_VAR 0 4
21324: RET
// export function SOS_Command ( cmd ) ; begin
21325: LD_INT 0
21327: PPUSH
// end ;
21328: LD_VAR 0 2
21332: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
21333: LD_INT 0
21335: PPUSH
// if cmd = 121 then
21336: LD_VAR 0 1
21340: PUSH
21341: LD_INT 121
21343: EQUAL
21344: IFFALSE 21346
// end ;
21346: LD_VAR 0 6
21350: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
21351: LD_INT 0
21353: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
21354: LD_VAR 0 1
21358: PUSH
21359: LD_INT 250
21361: EQUAL
21362: PUSH
21363: LD_VAR 0 2
21367: PPUSH
21368: CALL_OW 264
21372: PUSH
21373: LD_EXP 36
21377: EQUAL
21378: AND
21379: IFFALSE 21400
// MinerPlaceMine ( unit , x , y ) ;
21381: LD_VAR 0 2
21385: PPUSH
21386: LD_VAR 0 4
21390: PPUSH
21391: LD_VAR 0 5
21395: PPUSH
21396: CALL 23749 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
21400: LD_VAR 0 1
21404: PUSH
21405: LD_INT 251
21407: EQUAL
21408: PUSH
21409: LD_VAR 0 2
21413: PPUSH
21414: CALL_OW 264
21418: PUSH
21419: LD_EXP 36
21423: EQUAL
21424: AND
21425: IFFALSE 21446
// MinerDetonateMine ( unit , x , y ) ;
21427: LD_VAR 0 2
21431: PPUSH
21432: LD_VAR 0 4
21436: PPUSH
21437: LD_VAR 0 5
21441: PPUSH
21442: CALL 24026 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
21446: LD_VAR 0 1
21450: PUSH
21451: LD_INT 252
21453: EQUAL
21454: PUSH
21455: LD_VAR 0 2
21459: PPUSH
21460: CALL_OW 264
21464: PUSH
21465: LD_EXP 36
21469: EQUAL
21470: AND
21471: IFFALSE 21492
// MinerCreateMinefield ( unit , x , y ) ;
21473: LD_VAR 0 2
21477: PPUSH
21478: LD_VAR 0 4
21482: PPUSH
21483: LD_VAR 0 5
21487: PPUSH
21488: CALL 24443 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
21492: LD_VAR 0 1
21496: PUSH
21497: LD_INT 253
21499: EQUAL
21500: PUSH
21501: LD_VAR 0 2
21505: PPUSH
21506: CALL_OW 257
21510: PUSH
21511: LD_INT 5
21513: EQUAL
21514: AND
21515: IFFALSE 21536
// ComBinocular ( unit , x , y ) ;
21517: LD_VAR 0 2
21521: PPUSH
21522: LD_VAR 0 4
21526: PPUSH
21527: LD_VAR 0 5
21531: PPUSH
21532: CALL 24814 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
21536: LD_VAR 0 1
21540: PUSH
21541: LD_INT 254
21543: EQUAL
21544: PUSH
21545: LD_VAR 0 2
21549: PPUSH
21550: CALL_OW 264
21554: PUSH
21555: LD_EXP 31
21559: EQUAL
21560: AND
21561: PUSH
21562: LD_VAR 0 3
21566: PPUSH
21567: CALL_OW 263
21571: PUSH
21572: LD_INT 3
21574: EQUAL
21575: AND
21576: IFFALSE 21592
// HackDestroyVehicle ( unit , selectedUnit ) ;
21578: LD_VAR 0 2
21582: PPUSH
21583: LD_VAR 0 3
21587: PPUSH
21588: CALL 23109 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
21592: LD_VAR 0 1
21596: PUSH
21597: LD_INT 255
21599: EQUAL
21600: PUSH
21601: LD_VAR 0 2
21605: PPUSH
21606: CALL_OW 264
21610: PUSH
21611: LD_INT 14
21613: PUSH
21614: LD_INT 53
21616: PUSH
21617: EMPTY
21618: LIST
21619: LIST
21620: IN
21621: AND
21622: PUSH
21623: LD_VAR 0 4
21627: PPUSH
21628: LD_VAR 0 5
21632: PPUSH
21633: CALL_OW 488
21637: AND
21638: IFFALSE 21662
// CutTreeXYR ( unit , x , y , 12 ) ;
21640: LD_VAR 0 2
21644: PPUSH
21645: LD_VAR 0 4
21649: PPUSH
21650: LD_VAR 0 5
21654: PPUSH
21655: LD_INT 12
21657: PPUSH
21658: CALL 21675 0 4
// end ;
21662: LD_VAR 0 6
21666: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
21667: LD_INT 0
21669: PPUSH
// end ;
21670: LD_VAR 0 4
21674: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
21675: LD_INT 0
21677: PPUSH
21678: PPUSH
21679: PPUSH
21680: PPUSH
21681: PPUSH
21682: PPUSH
21683: PPUSH
21684: PPUSH
21685: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
21686: LD_VAR 0 1
21690: NOT
21691: PUSH
21692: LD_VAR 0 2
21696: PPUSH
21697: LD_VAR 0 3
21701: PPUSH
21702: CALL_OW 488
21706: NOT
21707: OR
21708: PUSH
21709: LD_VAR 0 4
21713: NOT
21714: OR
21715: IFFALSE 21719
// exit ;
21717: GO 22059
// list := [ ] ;
21719: LD_ADDR_VAR 0 13
21723: PUSH
21724: EMPTY
21725: ST_TO_ADDR
// if x - r < 0 then
21726: LD_VAR 0 2
21730: PUSH
21731: LD_VAR 0 4
21735: MINUS
21736: PUSH
21737: LD_INT 0
21739: LESS
21740: IFFALSE 21752
// min_x := 0 else
21742: LD_ADDR_VAR 0 7
21746: PUSH
21747: LD_INT 0
21749: ST_TO_ADDR
21750: GO 21768
// min_x := x - r ;
21752: LD_ADDR_VAR 0 7
21756: PUSH
21757: LD_VAR 0 2
21761: PUSH
21762: LD_VAR 0 4
21766: MINUS
21767: ST_TO_ADDR
// if y - r < 0 then
21768: LD_VAR 0 3
21772: PUSH
21773: LD_VAR 0 4
21777: MINUS
21778: PUSH
21779: LD_INT 0
21781: LESS
21782: IFFALSE 21794
// min_y := 0 else
21784: LD_ADDR_VAR 0 8
21788: PUSH
21789: LD_INT 0
21791: ST_TO_ADDR
21792: GO 21810
// min_y := y - r ;
21794: LD_ADDR_VAR 0 8
21798: PUSH
21799: LD_VAR 0 3
21803: PUSH
21804: LD_VAR 0 4
21808: MINUS
21809: ST_TO_ADDR
// max_x := x + r ;
21810: LD_ADDR_VAR 0 9
21814: PUSH
21815: LD_VAR 0 2
21819: PUSH
21820: LD_VAR 0 4
21824: PLUS
21825: ST_TO_ADDR
// max_y := y + r ;
21826: LD_ADDR_VAR 0 10
21830: PUSH
21831: LD_VAR 0 3
21835: PUSH
21836: LD_VAR 0 4
21840: PLUS
21841: ST_TO_ADDR
// for _x = min_x to max_x do
21842: LD_ADDR_VAR 0 11
21846: PUSH
21847: DOUBLE
21848: LD_VAR 0 7
21852: DEC
21853: ST_TO_ADDR
21854: LD_VAR 0 9
21858: PUSH
21859: FOR_TO
21860: IFFALSE 21977
// for _y = min_y to max_y do
21862: LD_ADDR_VAR 0 12
21866: PUSH
21867: DOUBLE
21868: LD_VAR 0 8
21872: DEC
21873: ST_TO_ADDR
21874: LD_VAR 0 10
21878: PUSH
21879: FOR_TO
21880: IFFALSE 21973
// begin if not ValidHex ( _x , _y ) then
21882: LD_VAR 0 11
21886: PPUSH
21887: LD_VAR 0 12
21891: PPUSH
21892: CALL_OW 488
21896: NOT
21897: IFFALSE 21901
// continue ;
21899: GO 21879
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
21901: LD_VAR 0 11
21905: PPUSH
21906: LD_VAR 0 12
21910: PPUSH
21911: CALL_OW 351
21915: PUSH
21916: LD_VAR 0 11
21920: PPUSH
21921: LD_VAR 0 12
21925: PPUSH
21926: CALL_OW 554
21930: AND
21931: IFFALSE 21971
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
21933: LD_ADDR_VAR 0 13
21937: PUSH
21938: LD_VAR 0 13
21942: PPUSH
21943: LD_VAR 0 13
21947: PUSH
21948: LD_INT 1
21950: PLUS
21951: PPUSH
21952: LD_VAR 0 11
21956: PUSH
21957: LD_VAR 0 12
21961: PUSH
21962: EMPTY
21963: LIST
21964: LIST
21965: PPUSH
21966: CALL_OW 2
21970: ST_TO_ADDR
// end ;
21971: GO 21879
21973: POP
21974: POP
21975: GO 21859
21977: POP
21978: POP
// if not list then
21979: LD_VAR 0 13
21983: NOT
21984: IFFALSE 21988
// exit ;
21986: GO 22059
// for i in list do
21988: LD_ADDR_VAR 0 6
21992: PUSH
21993: LD_VAR 0 13
21997: PUSH
21998: FOR_IN
21999: IFFALSE 22057
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
22001: LD_VAR 0 1
22005: PPUSH
22006: LD_STRING M
22008: PUSH
22009: LD_VAR 0 6
22013: PUSH
22014: LD_INT 1
22016: ARRAY
22017: PUSH
22018: LD_VAR 0 6
22022: PUSH
22023: LD_INT 2
22025: ARRAY
22026: PUSH
22027: LD_INT 0
22029: PUSH
22030: LD_INT 0
22032: PUSH
22033: LD_INT 0
22035: PUSH
22036: LD_INT 0
22038: PUSH
22039: EMPTY
22040: LIST
22041: LIST
22042: LIST
22043: LIST
22044: LIST
22045: LIST
22046: LIST
22047: PUSH
22048: EMPTY
22049: LIST
22050: PPUSH
22051: CALL_OW 447
22055: GO 21998
22057: POP
22058: POP
// end ;
22059: LD_VAR 0 5
22063: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
22064: LD_EXP 105
22068: NOT
22069: IFFALSE 22119
22071: GO 22073
22073: DISABLE
// begin initHack := true ;
22074: LD_ADDR_EXP 105
22078: PUSH
22079: LD_INT 1
22081: ST_TO_ADDR
// hackTanks := [ ] ;
22082: LD_ADDR_EXP 106
22086: PUSH
22087: EMPTY
22088: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
22089: LD_ADDR_EXP 107
22093: PUSH
22094: EMPTY
22095: ST_TO_ADDR
// hackLimit := 3 ;
22096: LD_ADDR_EXP 108
22100: PUSH
22101: LD_INT 3
22103: ST_TO_ADDR
// hackDist := 12 ;
22104: LD_ADDR_EXP 109
22108: PUSH
22109: LD_INT 12
22111: ST_TO_ADDR
// hackCounter := [ ] ;
22112: LD_ADDR_EXP 110
22116: PUSH
22117: EMPTY
22118: ST_TO_ADDR
// end ;
22119: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
22120: LD_EXP 105
22124: PUSH
22125: LD_INT 34
22127: PUSH
22128: LD_EXP 31
22132: PUSH
22133: EMPTY
22134: LIST
22135: LIST
22136: PPUSH
22137: CALL_OW 69
22141: AND
22142: IFFALSE 22397
22144: GO 22146
22146: DISABLE
22147: LD_INT 0
22149: PPUSH
22150: PPUSH
// begin enable ;
22151: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
22152: LD_ADDR_VAR 0 1
22156: PUSH
22157: LD_INT 34
22159: PUSH
22160: LD_EXP 31
22164: PUSH
22165: EMPTY
22166: LIST
22167: LIST
22168: PPUSH
22169: CALL_OW 69
22173: PUSH
22174: FOR_IN
22175: IFFALSE 22395
// begin if not i in hackTanks then
22177: LD_VAR 0 1
22181: PUSH
22182: LD_EXP 106
22186: IN
22187: NOT
22188: IFFALSE 22271
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
22190: LD_ADDR_EXP 106
22194: PUSH
22195: LD_EXP 106
22199: PPUSH
22200: LD_EXP 106
22204: PUSH
22205: LD_INT 1
22207: PLUS
22208: PPUSH
22209: LD_VAR 0 1
22213: PPUSH
22214: CALL_OW 1
22218: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
22219: LD_ADDR_EXP 107
22223: PUSH
22224: LD_EXP 107
22228: PPUSH
22229: LD_EXP 107
22233: PUSH
22234: LD_INT 1
22236: PLUS
22237: PPUSH
22238: EMPTY
22239: PPUSH
22240: CALL_OW 1
22244: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
22245: LD_ADDR_EXP 110
22249: PUSH
22250: LD_EXP 110
22254: PPUSH
22255: LD_EXP 110
22259: PUSH
22260: LD_INT 1
22262: PLUS
22263: PPUSH
22264: EMPTY
22265: PPUSH
22266: CALL_OW 1
22270: ST_TO_ADDR
// end ; if not IsOk ( i ) then
22271: LD_VAR 0 1
22275: PPUSH
22276: CALL_OW 302
22280: NOT
22281: IFFALSE 22294
// begin HackUnlinkAll ( i ) ;
22283: LD_VAR 0 1
22287: PPUSH
22288: CALL 22400 0 1
// continue ;
22292: GO 22174
// end ; HackCheckCapturedStatus ( i ) ;
22294: LD_VAR 0 1
22298: PPUSH
22299: CALL 22843 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
22303: LD_ADDR_VAR 0 2
22307: PUSH
22308: LD_INT 81
22310: PUSH
22311: LD_VAR 0 1
22315: PPUSH
22316: CALL_OW 255
22320: PUSH
22321: EMPTY
22322: LIST
22323: LIST
22324: PUSH
22325: LD_INT 33
22327: PUSH
22328: LD_INT 3
22330: PUSH
22331: EMPTY
22332: LIST
22333: LIST
22334: PUSH
22335: LD_INT 91
22337: PUSH
22338: LD_VAR 0 1
22342: PUSH
22343: LD_EXP 109
22347: PUSH
22348: EMPTY
22349: LIST
22350: LIST
22351: LIST
22352: PUSH
22353: LD_INT 50
22355: PUSH
22356: EMPTY
22357: LIST
22358: PUSH
22359: EMPTY
22360: LIST
22361: LIST
22362: LIST
22363: LIST
22364: PPUSH
22365: CALL_OW 69
22369: ST_TO_ADDR
// if not tmp then
22370: LD_VAR 0 2
22374: NOT
22375: IFFALSE 22379
// continue ;
22377: GO 22174
// HackLink ( i , tmp ) ;
22379: LD_VAR 0 1
22383: PPUSH
22384: LD_VAR 0 2
22388: PPUSH
22389: CALL 22536 0 2
// end ;
22393: GO 22174
22395: POP
22396: POP
// end ;
22397: PPOPN 2
22399: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
22400: LD_INT 0
22402: PPUSH
22403: PPUSH
22404: PPUSH
// if not hack in hackTanks then
22405: LD_VAR 0 1
22409: PUSH
22410: LD_EXP 106
22414: IN
22415: NOT
22416: IFFALSE 22420
// exit ;
22418: GO 22531
// index := GetElementIndex ( hackTanks , hack ) ;
22420: LD_ADDR_VAR 0 4
22424: PUSH
22425: LD_EXP 106
22429: PPUSH
22430: LD_VAR 0 1
22434: PPUSH
22435: CALL 30005 0 2
22439: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
22440: LD_EXP 107
22444: PUSH
22445: LD_VAR 0 4
22449: ARRAY
22450: IFFALSE 22531
// begin for i in hackTanksCaptured [ index ] do
22452: LD_ADDR_VAR 0 3
22456: PUSH
22457: LD_EXP 107
22461: PUSH
22462: LD_VAR 0 4
22466: ARRAY
22467: PUSH
22468: FOR_IN
22469: IFFALSE 22495
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
22471: LD_VAR 0 3
22475: PUSH
22476: LD_INT 1
22478: ARRAY
22479: PPUSH
22480: LD_VAR 0 3
22484: PUSH
22485: LD_INT 2
22487: ARRAY
22488: PPUSH
22489: CALL_OW 235
22493: GO 22468
22495: POP
22496: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
22497: LD_ADDR_EXP 107
22501: PUSH
22502: LD_EXP 107
22506: PPUSH
22507: LD_VAR 0 4
22511: PPUSH
22512: EMPTY
22513: PPUSH
22514: CALL_OW 1
22518: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
22519: LD_VAR 0 1
22523: PPUSH
22524: LD_INT 0
22526: PPUSH
22527: CALL_OW 505
// end ; end ;
22531: LD_VAR 0 2
22535: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
22536: LD_INT 0
22538: PPUSH
22539: PPUSH
22540: PPUSH
// if not hack in hackTanks or not vehicles then
22541: LD_VAR 0 1
22545: PUSH
22546: LD_EXP 106
22550: IN
22551: NOT
22552: PUSH
22553: LD_VAR 0 2
22557: NOT
22558: OR
22559: IFFALSE 22563
// exit ;
22561: GO 22838
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
22563: LD_ADDR_VAR 0 2
22567: PUSH
22568: LD_VAR 0 1
22572: PPUSH
22573: LD_VAR 0 2
22577: PPUSH
22578: LD_INT 1
22580: PPUSH
22581: LD_INT 1
22583: PPUSH
22584: CALL 30655 0 4
22588: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
22589: LD_ADDR_VAR 0 5
22593: PUSH
22594: LD_EXP 106
22598: PPUSH
22599: LD_VAR 0 1
22603: PPUSH
22604: CALL 30005 0 2
22608: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
22609: LD_EXP 107
22613: PUSH
22614: LD_VAR 0 5
22618: ARRAY
22619: PUSH
22620: LD_EXP 108
22624: LESS
22625: IFFALSE 22814
// begin for i := 1 to vehicles do
22627: LD_ADDR_VAR 0 4
22631: PUSH
22632: DOUBLE
22633: LD_INT 1
22635: DEC
22636: ST_TO_ADDR
22637: LD_VAR 0 2
22641: PUSH
22642: FOR_TO
22643: IFFALSE 22812
// begin if hackTanksCaptured [ index ] = hackLimit then
22645: LD_EXP 107
22649: PUSH
22650: LD_VAR 0 5
22654: ARRAY
22655: PUSH
22656: LD_EXP 108
22660: EQUAL
22661: IFFALSE 22665
// break ;
22663: GO 22812
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
22665: LD_ADDR_EXP 110
22669: PUSH
22670: LD_EXP 110
22674: PPUSH
22675: LD_VAR 0 5
22679: PPUSH
22680: LD_EXP 110
22684: PUSH
22685: LD_VAR 0 5
22689: ARRAY
22690: PUSH
22691: LD_INT 1
22693: PLUS
22694: PPUSH
22695: CALL_OW 1
22699: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
22700: LD_ADDR_EXP 107
22704: PUSH
22705: LD_EXP 107
22709: PPUSH
22710: LD_VAR 0 5
22714: PUSH
22715: LD_EXP 107
22719: PUSH
22720: LD_VAR 0 5
22724: ARRAY
22725: PUSH
22726: LD_INT 1
22728: PLUS
22729: PUSH
22730: EMPTY
22731: LIST
22732: LIST
22733: PPUSH
22734: LD_VAR 0 2
22738: PUSH
22739: LD_VAR 0 4
22743: ARRAY
22744: PUSH
22745: LD_VAR 0 2
22749: PUSH
22750: LD_VAR 0 4
22754: ARRAY
22755: PPUSH
22756: CALL_OW 255
22760: PUSH
22761: EMPTY
22762: LIST
22763: LIST
22764: PPUSH
22765: CALL 30220 0 3
22769: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
22770: LD_VAR 0 2
22774: PUSH
22775: LD_VAR 0 4
22779: ARRAY
22780: PPUSH
22781: LD_VAR 0 1
22785: PPUSH
22786: CALL_OW 255
22790: PPUSH
22791: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
22795: LD_VAR 0 2
22799: PUSH
22800: LD_VAR 0 4
22804: ARRAY
22805: PPUSH
22806: CALL_OW 141
// end ;
22810: GO 22642
22812: POP
22813: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
22814: LD_VAR 0 1
22818: PPUSH
22819: LD_EXP 107
22823: PUSH
22824: LD_VAR 0 5
22828: ARRAY
22829: PUSH
22830: LD_INT 0
22832: PLUS
22833: PPUSH
22834: CALL_OW 505
// end ;
22838: LD_VAR 0 3
22842: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
22843: LD_INT 0
22845: PPUSH
22846: PPUSH
22847: PPUSH
22848: PPUSH
// if not hack in hackTanks then
22849: LD_VAR 0 1
22853: PUSH
22854: LD_EXP 106
22858: IN
22859: NOT
22860: IFFALSE 22864
// exit ;
22862: GO 23104
// index := GetElementIndex ( hackTanks , hack ) ;
22864: LD_ADDR_VAR 0 4
22868: PUSH
22869: LD_EXP 106
22873: PPUSH
22874: LD_VAR 0 1
22878: PPUSH
22879: CALL 30005 0 2
22883: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
22884: LD_ADDR_VAR 0 3
22888: PUSH
22889: DOUBLE
22890: LD_EXP 107
22894: PUSH
22895: LD_VAR 0 4
22899: ARRAY
22900: INC
22901: ST_TO_ADDR
22902: LD_INT 1
22904: PUSH
22905: FOR_DOWNTO
22906: IFFALSE 23078
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
22908: LD_ADDR_VAR 0 5
22912: PUSH
22913: LD_EXP 107
22917: PUSH
22918: LD_VAR 0 4
22922: ARRAY
22923: PUSH
22924: LD_VAR 0 3
22928: ARRAY
22929: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
22930: LD_VAR 0 5
22934: PUSH
22935: LD_INT 1
22937: ARRAY
22938: PPUSH
22939: CALL_OW 302
22943: NOT
22944: PUSH
22945: LD_VAR 0 5
22949: PUSH
22950: LD_INT 1
22952: ARRAY
22953: PPUSH
22954: CALL_OW 255
22958: PUSH
22959: LD_VAR 0 1
22963: PPUSH
22964: CALL_OW 255
22968: NONEQUAL
22969: OR
22970: IFFALSE 23076
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
22972: LD_VAR 0 5
22976: PUSH
22977: LD_INT 1
22979: ARRAY
22980: PPUSH
22981: CALL_OW 305
22985: PUSH
22986: LD_VAR 0 5
22990: PUSH
22991: LD_INT 1
22993: ARRAY
22994: PPUSH
22995: CALL_OW 255
22999: PUSH
23000: LD_VAR 0 1
23004: PPUSH
23005: CALL_OW 255
23009: EQUAL
23010: AND
23011: IFFALSE 23035
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
23013: LD_VAR 0 5
23017: PUSH
23018: LD_INT 1
23020: ARRAY
23021: PPUSH
23022: LD_VAR 0 5
23026: PUSH
23027: LD_INT 2
23029: ARRAY
23030: PPUSH
23031: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
23035: LD_ADDR_EXP 107
23039: PUSH
23040: LD_EXP 107
23044: PPUSH
23045: LD_VAR 0 4
23049: PPUSH
23050: LD_EXP 107
23054: PUSH
23055: LD_VAR 0 4
23059: ARRAY
23060: PPUSH
23061: LD_VAR 0 3
23065: PPUSH
23066: CALL_OW 3
23070: PPUSH
23071: CALL_OW 1
23075: ST_TO_ADDR
// end ; end ;
23076: GO 22905
23078: POP
23079: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
23080: LD_VAR 0 1
23084: PPUSH
23085: LD_EXP 107
23089: PUSH
23090: LD_VAR 0 4
23094: ARRAY
23095: PUSH
23096: LD_INT 0
23098: PLUS
23099: PPUSH
23100: CALL_OW 505
// end ;
23104: LD_VAR 0 2
23108: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
23109: LD_INT 0
23111: PPUSH
23112: PPUSH
23113: PPUSH
23114: PPUSH
// if not hack in hackTanks then
23115: LD_VAR 0 1
23119: PUSH
23120: LD_EXP 106
23124: IN
23125: NOT
23126: IFFALSE 23130
// exit ;
23128: GO 23215
// index := GetElementIndex ( hackTanks , hack ) ;
23130: LD_ADDR_VAR 0 5
23134: PUSH
23135: LD_EXP 106
23139: PPUSH
23140: LD_VAR 0 1
23144: PPUSH
23145: CALL 30005 0 2
23149: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
23150: LD_ADDR_VAR 0 4
23154: PUSH
23155: DOUBLE
23156: LD_INT 1
23158: DEC
23159: ST_TO_ADDR
23160: LD_EXP 107
23164: PUSH
23165: LD_VAR 0 5
23169: ARRAY
23170: PUSH
23171: FOR_TO
23172: IFFALSE 23213
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
23174: LD_EXP 107
23178: PUSH
23179: LD_VAR 0 5
23183: ARRAY
23184: PUSH
23185: LD_VAR 0 4
23189: ARRAY
23190: PUSH
23191: LD_INT 1
23193: ARRAY
23194: PUSH
23195: LD_VAR 0 2
23199: EQUAL
23200: IFFALSE 23211
// KillUnit ( vehicle ) ;
23202: LD_VAR 0 2
23206: PPUSH
23207: CALL_OW 66
23211: GO 23171
23213: POP
23214: POP
// end ;
23215: LD_VAR 0 3
23219: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
23220: LD_EXP 111
23224: NOT
23225: IFFALSE 23260
23227: GO 23229
23229: DISABLE
// begin initMiner := true ;
23230: LD_ADDR_EXP 111
23234: PUSH
23235: LD_INT 1
23237: ST_TO_ADDR
// minersList := [ ] ;
23238: LD_ADDR_EXP 112
23242: PUSH
23243: EMPTY
23244: ST_TO_ADDR
// minerMinesList := [ ] ;
23245: LD_ADDR_EXP 113
23249: PUSH
23250: EMPTY
23251: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
23252: LD_ADDR_EXP 114
23256: PUSH
23257: LD_INT 5
23259: ST_TO_ADDR
// end ;
23260: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
23261: LD_EXP 111
23265: PUSH
23266: LD_INT 34
23268: PUSH
23269: LD_EXP 36
23273: PUSH
23274: EMPTY
23275: LIST
23276: LIST
23277: PPUSH
23278: CALL_OW 69
23282: AND
23283: IFFALSE 23746
23285: GO 23287
23287: DISABLE
23288: LD_INT 0
23290: PPUSH
23291: PPUSH
23292: PPUSH
23293: PPUSH
// begin enable ;
23294: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
23295: LD_ADDR_VAR 0 1
23299: PUSH
23300: LD_INT 34
23302: PUSH
23303: LD_EXP 36
23307: PUSH
23308: EMPTY
23309: LIST
23310: LIST
23311: PPUSH
23312: CALL_OW 69
23316: PUSH
23317: FOR_IN
23318: IFFALSE 23390
// begin if not i in minersList then
23320: LD_VAR 0 1
23324: PUSH
23325: LD_EXP 112
23329: IN
23330: NOT
23331: IFFALSE 23388
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
23333: LD_ADDR_EXP 112
23337: PUSH
23338: LD_EXP 112
23342: PPUSH
23343: LD_EXP 112
23347: PUSH
23348: LD_INT 1
23350: PLUS
23351: PPUSH
23352: LD_VAR 0 1
23356: PPUSH
23357: CALL_OW 1
23361: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
23362: LD_ADDR_EXP 113
23366: PUSH
23367: LD_EXP 113
23371: PPUSH
23372: LD_EXP 113
23376: PUSH
23377: LD_INT 1
23379: PLUS
23380: PPUSH
23381: EMPTY
23382: PPUSH
23383: CALL_OW 1
23387: ST_TO_ADDR
// end end ;
23388: GO 23317
23390: POP
23391: POP
// for i := minerMinesList downto 1 do
23392: LD_ADDR_VAR 0 1
23396: PUSH
23397: DOUBLE
23398: LD_EXP 113
23402: INC
23403: ST_TO_ADDR
23404: LD_INT 1
23406: PUSH
23407: FOR_DOWNTO
23408: IFFALSE 23744
// begin if IsLive ( minersList [ i ] ) then
23410: LD_EXP 112
23414: PUSH
23415: LD_VAR 0 1
23419: ARRAY
23420: PPUSH
23421: CALL_OW 300
23425: IFFALSE 23453
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
23427: LD_EXP 112
23431: PUSH
23432: LD_VAR 0 1
23436: ARRAY
23437: PPUSH
23438: LD_EXP 113
23442: PUSH
23443: LD_VAR 0 1
23447: ARRAY
23448: PPUSH
23449: CALL_OW 505
// if not minerMinesList [ i ] then
23453: LD_EXP 113
23457: PUSH
23458: LD_VAR 0 1
23462: ARRAY
23463: NOT
23464: IFFALSE 23468
// continue ;
23466: GO 23407
// for j := minerMinesList [ i ] downto 1 do
23468: LD_ADDR_VAR 0 2
23472: PUSH
23473: DOUBLE
23474: LD_EXP 113
23478: PUSH
23479: LD_VAR 0 1
23483: ARRAY
23484: INC
23485: ST_TO_ADDR
23486: LD_INT 1
23488: PUSH
23489: FOR_DOWNTO
23490: IFFALSE 23740
// begin side := GetSide ( minersList [ i ] ) ;
23492: LD_ADDR_VAR 0 3
23496: PUSH
23497: LD_EXP 112
23501: PUSH
23502: LD_VAR 0 1
23506: ARRAY
23507: PPUSH
23508: CALL_OW 255
23512: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
23513: LD_ADDR_VAR 0 4
23517: PUSH
23518: LD_EXP 113
23522: PUSH
23523: LD_VAR 0 1
23527: ARRAY
23528: PUSH
23529: LD_VAR 0 2
23533: ARRAY
23534: PUSH
23535: LD_INT 1
23537: ARRAY
23538: PPUSH
23539: LD_EXP 113
23543: PUSH
23544: LD_VAR 0 1
23548: ARRAY
23549: PUSH
23550: LD_VAR 0 2
23554: ARRAY
23555: PUSH
23556: LD_INT 2
23558: ARRAY
23559: PPUSH
23560: CALL_OW 428
23564: ST_TO_ADDR
// if not tmp then
23565: LD_VAR 0 4
23569: NOT
23570: IFFALSE 23574
// continue ;
23572: GO 23489
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
23574: LD_VAR 0 4
23578: PUSH
23579: LD_INT 81
23581: PUSH
23582: LD_VAR 0 3
23586: PUSH
23587: EMPTY
23588: LIST
23589: LIST
23590: PPUSH
23591: CALL_OW 69
23595: IN
23596: PUSH
23597: LD_EXP 113
23601: PUSH
23602: LD_VAR 0 1
23606: ARRAY
23607: PUSH
23608: LD_VAR 0 2
23612: ARRAY
23613: PUSH
23614: LD_INT 1
23616: ARRAY
23617: PPUSH
23618: LD_EXP 113
23622: PUSH
23623: LD_VAR 0 1
23627: ARRAY
23628: PUSH
23629: LD_VAR 0 2
23633: ARRAY
23634: PUSH
23635: LD_INT 2
23637: ARRAY
23638: PPUSH
23639: CALL_OW 458
23643: AND
23644: IFFALSE 23738
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
23646: LD_EXP 113
23650: PUSH
23651: LD_VAR 0 1
23655: ARRAY
23656: PUSH
23657: LD_VAR 0 2
23661: ARRAY
23662: PUSH
23663: LD_INT 1
23665: ARRAY
23666: PPUSH
23667: LD_EXP 113
23671: PUSH
23672: LD_VAR 0 1
23676: ARRAY
23677: PUSH
23678: LD_VAR 0 2
23682: ARRAY
23683: PUSH
23684: LD_INT 2
23686: ARRAY
23687: PPUSH
23688: LD_VAR 0 3
23692: PPUSH
23693: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
23697: LD_ADDR_EXP 113
23701: PUSH
23702: LD_EXP 113
23706: PPUSH
23707: LD_VAR 0 1
23711: PPUSH
23712: LD_EXP 113
23716: PUSH
23717: LD_VAR 0 1
23721: ARRAY
23722: PPUSH
23723: LD_VAR 0 2
23727: PPUSH
23728: CALL_OW 3
23732: PPUSH
23733: CALL_OW 1
23737: ST_TO_ADDR
// end ; end ;
23738: GO 23489
23740: POP
23741: POP
// end ;
23742: GO 23407
23744: POP
23745: POP
// end ;
23746: PPOPN 4
23748: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
23749: LD_INT 0
23751: PPUSH
23752: PPUSH
// result := false ;
23753: LD_ADDR_VAR 0 4
23757: PUSH
23758: LD_INT 0
23760: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
23761: LD_VAR 0 1
23765: PPUSH
23766: CALL_OW 264
23770: PUSH
23771: LD_EXP 36
23775: EQUAL
23776: NOT
23777: IFFALSE 23781
// exit ;
23779: GO 24021
// index := GetElementIndex ( minersList , unit ) ;
23781: LD_ADDR_VAR 0 5
23785: PUSH
23786: LD_EXP 112
23790: PPUSH
23791: LD_VAR 0 1
23795: PPUSH
23796: CALL 30005 0 2
23800: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
23801: LD_EXP 113
23805: PUSH
23806: LD_VAR 0 5
23810: ARRAY
23811: PUSH
23812: LD_EXP 114
23816: GREATEREQUAL
23817: IFFALSE 23821
// exit ;
23819: GO 24021
// ComMoveXY ( unit , x , y ) ;
23821: LD_VAR 0 1
23825: PPUSH
23826: LD_VAR 0 2
23830: PPUSH
23831: LD_VAR 0 3
23835: PPUSH
23836: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
23840: LD_INT 35
23842: PPUSH
23843: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
23847: LD_VAR 0 1
23851: PPUSH
23852: LD_VAR 0 2
23856: PPUSH
23857: LD_VAR 0 3
23861: PPUSH
23862: CALL 60777 0 3
23866: NOT
23867: PUSH
23868: LD_VAR 0 1
23872: PPUSH
23873: CALL_OW 314
23877: AND
23878: IFFALSE 23882
// exit ;
23880: GO 24021
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
23882: LD_VAR 0 2
23886: PPUSH
23887: LD_VAR 0 3
23891: PPUSH
23892: CALL_OW 428
23896: PUSH
23897: LD_VAR 0 1
23901: EQUAL
23902: PUSH
23903: LD_VAR 0 1
23907: PPUSH
23908: CALL_OW 314
23912: NOT
23913: AND
23914: IFFALSE 23840
// PlaySoundXY ( x , y , PlantMine ) ;
23916: LD_VAR 0 2
23920: PPUSH
23921: LD_VAR 0 3
23925: PPUSH
23926: LD_STRING PlantMine
23928: PPUSH
23929: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
23933: LD_VAR 0 2
23937: PPUSH
23938: LD_VAR 0 3
23942: PPUSH
23943: LD_VAR 0 1
23947: PPUSH
23948: CALL_OW 255
23952: PPUSH
23953: LD_INT 0
23955: PPUSH
23956: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
23960: LD_ADDR_EXP 113
23964: PUSH
23965: LD_EXP 113
23969: PPUSH
23970: LD_VAR 0 5
23974: PUSH
23975: LD_EXP 113
23979: PUSH
23980: LD_VAR 0 5
23984: ARRAY
23985: PUSH
23986: LD_INT 1
23988: PLUS
23989: PUSH
23990: EMPTY
23991: LIST
23992: LIST
23993: PPUSH
23994: LD_VAR 0 2
23998: PUSH
23999: LD_VAR 0 3
24003: PUSH
24004: EMPTY
24005: LIST
24006: LIST
24007: PPUSH
24008: CALL 30220 0 3
24012: ST_TO_ADDR
// result := true ;
24013: LD_ADDR_VAR 0 4
24017: PUSH
24018: LD_INT 1
24020: ST_TO_ADDR
// end ;
24021: LD_VAR 0 4
24025: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
24026: LD_INT 0
24028: PPUSH
24029: PPUSH
24030: PPUSH
// if not unit in minersList then
24031: LD_VAR 0 1
24035: PUSH
24036: LD_EXP 112
24040: IN
24041: NOT
24042: IFFALSE 24046
// exit ;
24044: GO 24438
// index := GetElementIndex ( minersList , unit ) ;
24046: LD_ADDR_VAR 0 6
24050: PUSH
24051: LD_EXP 112
24055: PPUSH
24056: LD_VAR 0 1
24060: PPUSH
24061: CALL 30005 0 2
24065: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
24066: LD_ADDR_VAR 0 5
24070: PUSH
24071: DOUBLE
24072: LD_EXP 113
24076: PUSH
24077: LD_VAR 0 6
24081: ARRAY
24082: INC
24083: ST_TO_ADDR
24084: LD_INT 1
24086: PUSH
24087: FOR_DOWNTO
24088: IFFALSE 24249
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
24090: LD_EXP 113
24094: PUSH
24095: LD_VAR 0 6
24099: ARRAY
24100: PUSH
24101: LD_VAR 0 5
24105: ARRAY
24106: PUSH
24107: LD_INT 1
24109: ARRAY
24110: PUSH
24111: LD_VAR 0 2
24115: EQUAL
24116: PUSH
24117: LD_EXP 113
24121: PUSH
24122: LD_VAR 0 6
24126: ARRAY
24127: PUSH
24128: LD_VAR 0 5
24132: ARRAY
24133: PUSH
24134: LD_INT 2
24136: ARRAY
24137: PUSH
24138: LD_VAR 0 3
24142: EQUAL
24143: AND
24144: IFFALSE 24247
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
24146: LD_EXP 113
24150: PUSH
24151: LD_VAR 0 6
24155: ARRAY
24156: PUSH
24157: LD_VAR 0 5
24161: ARRAY
24162: PUSH
24163: LD_INT 1
24165: ARRAY
24166: PPUSH
24167: LD_EXP 113
24171: PUSH
24172: LD_VAR 0 6
24176: ARRAY
24177: PUSH
24178: LD_VAR 0 5
24182: ARRAY
24183: PUSH
24184: LD_INT 2
24186: ARRAY
24187: PPUSH
24188: LD_VAR 0 1
24192: PPUSH
24193: CALL_OW 255
24197: PPUSH
24198: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
24202: LD_ADDR_EXP 113
24206: PUSH
24207: LD_EXP 113
24211: PPUSH
24212: LD_VAR 0 6
24216: PPUSH
24217: LD_EXP 113
24221: PUSH
24222: LD_VAR 0 6
24226: ARRAY
24227: PPUSH
24228: LD_VAR 0 5
24232: PPUSH
24233: CALL_OW 3
24237: PPUSH
24238: CALL_OW 1
24242: ST_TO_ADDR
// exit ;
24243: POP
24244: POP
24245: GO 24438
// end ; end ;
24247: GO 24087
24249: POP
24250: POP
// for i := minerMinesList [ index ] downto 1 do
24251: LD_ADDR_VAR 0 5
24255: PUSH
24256: DOUBLE
24257: LD_EXP 113
24261: PUSH
24262: LD_VAR 0 6
24266: ARRAY
24267: INC
24268: ST_TO_ADDR
24269: LD_INT 1
24271: PUSH
24272: FOR_DOWNTO
24273: IFFALSE 24436
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
24275: LD_EXP 113
24279: PUSH
24280: LD_VAR 0 6
24284: ARRAY
24285: PUSH
24286: LD_VAR 0 5
24290: ARRAY
24291: PUSH
24292: LD_INT 1
24294: ARRAY
24295: PPUSH
24296: LD_EXP 113
24300: PUSH
24301: LD_VAR 0 6
24305: ARRAY
24306: PUSH
24307: LD_VAR 0 5
24311: ARRAY
24312: PUSH
24313: LD_INT 2
24315: ARRAY
24316: PPUSH
24317: LD_VAR 0 2
24321: PPUSH
24322: LD_VAR 0 3
24326: PPUSH
24327: CALL_OW 298
24331: PUSH
24332: LD_INT 6
24334: LESS
24335: IFFALSE 24434
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
24337: LD_EXP 113
24341: PUSH
24342: LD_VAR 0 6
24346: ARRAY
24347: PUSH
24348: LD_VAR 0 5
24352: ARRAY
24353: PUSH
24354: LD_INT 1
24356: ARRAY
24357: PPUSH
24358: LD_EXP 113
24362: PUSH
24363: LD_VAR 0 6
24367: ARRAY
24368: PUSH
24369: LD_VAR 0 5
24373: ARRAY
24374: PUSH
24375: LD_INT 2
24377: ARRAY
24378: PPUSH
24379: LD_VAR 0 1
24383: PPUSH
24384: CALL_OW 255
24388: PPUSH
24389: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
24393: LD_ADDR_EXP 113
24397: PUSH
24398: LD_EXP 113
24402: PPUSH
24403: LD_VAR 0 6
24407: PPUSH
24408: LD_EXP 113
24412: PUSH
24413: LD_VAR 0 6
24417: ARRAY
24418: PPUSH
24419: LD_VAR 0 5
24423: PPUSH
24424: CALL_OW 3
24428: PPUSH
24429: CALL_OW 1
24433: ST_TO_ADDR
// end ; end ;
24434: GO 24272
24436: POP
24437: POP
// end ;
24438: LD_VAR 0 4
24442: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
24443: LD_INT 0
24445: PPUSH
24446: PPUSH
24447: PPUSH
24448: PPUSH
24449: PPUSH
24450: PPUSH
24451: PPUSH
24452: PPUSH
24453: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
24454: LD_VAR 0 1
24458: PPUSH
24459: CALL_OW 264
24463: PUSH
24464: LD_EXP 36
24468: EQUAL
24469: NOT
24470: PUSH
24471: LD_VAR 0 1
24475: PUSH
24476: LD_EXP 112
24480: IN
24481: NOT
24482: OR
24483: IFFALSE 24487
// exit ;
24485: GO 24809
// index := GetElementIndex ( minersList , unit ) ;
24487: LD_ADDR_VAR 0 6
24491: PUSH
24492: LD_EXP 112
24496: PPUSH
24497: LD_VAR 0 1
24501: PPUSH
24502: CALL 30005 0 2
24506: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
24507: LD_ADDR_VAR 0 8
24511: PUSH
24512: LD_EXP 114
24516: PUSH
24517: LD_EXP 113
24521: PUSH
24522: LD_VAR 0 6
24526: ARRAY
24527: MINUS
24528: ST_TO_ADDR
// if not minesFreeAmount then
24529: LD_VAR 0 8
24533: NOT
24534: IFFALSE 24538
// exit ;
24536: GO 24809
// tmp := [ ] ;
24538: LD_ADDR_VAR 0 7
24542: PUSH
24543: EMPTY
24544: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
24545: LD_ADDR_VAR 0 5
24549: PUSH
24550: DOUBLE
24551: LD_INT 1
24553: DEC
24554: ST_TO_ADDR
24555: LD_VAR 0 8
24559: PUSH
24560: FOR_TO
24561: IFFALSE 24756
// begin _d := rand ( 0 , 5 ) ;
24563: LD_ADDR_VAR 0 11
24567: PUSH
24568: LD_INT 0
24570: PPUSH
24571: LD_INT 5
24573: PPUSH
24574: CALL_OW 12
24578: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
24579: LD_ADDR_VAR 0 12
24583: PUSH
24584: LD_INT 2
24586: PPUSH
24587: LD_INT 6
24589: PPUSH
24590: CALL_OW 12
24594: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
24595: LD_ADDR_VAR 0 9
24599: PUSH
24600: LD_VAR 0 2
24604: PPUSH
24605: LD_VAR 0 11
24609: PPUSH
24610: LD_VAR 0 12
24614: PPUSH
24615: CALL_OW 272
24619: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
24620: LD_ADDR_VAR 0 10
24624: PUSH
24625: LD_VAR 0 3
24629: PPUSH
24630: LD_VAR 0 11
24634: PPUSH
24635: LD_VAR 0 12
24639: PPUSH
24640: CALL_OW 273
24644: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
24645: LD_VAR 0 9
24649: PPUSH
24650: LD_VAR 0 10
24654: PPUSH
24655: CALL_OW 488
24659: PUSH
24660: LD_VAR 0 9
24664: PUSH
24665: LD_VAR 0 10
24669: PUSH
24670: EMPTY
24671: LIST
24672: LIST
24673: PUSH
24674: LD_VAR 0 7
24678: IN
24679: NOT
24680: AND
24681: PUSH
24682: LD_VAR 0 9
24686: PPUSH
24687: LD_VAR 0 10
24691: PPUSH
24692: CALL_OW 458
24696: NOT
24697: AND
24698: IFFALSE 24740
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
24700: LD_ADDR_VAR 0 7
24704: PUSH
24705: LD_VAR 0 7
24709: PPUSH
24710: LD_VAR 0 7
24714: PUSH
24715: LD_INT 1
24717: PLUS
24718: PPUSH
24719: LD_VAR 0 9
24723: PUSH
24724: LD_VAR 0 10
24728: PUSH
24729: EMPTY
24730: LIST
24731: LIST
24732: PPUSH
24733: CALL_OW 1
24737: ST_TO_ADDR
24738: GO 24754
// i := i - 1 ;
24740: LD_ADDR_VAR 0 5
24744: PUSH
24745: LD_VAR 0 5
24749: PUSH
24750: LD_INT 1
24752: MINUS
24753: ST_TO_ADDR
// end ;
24754: GO 24560
24756: POP
24757: POP
// for i in tmp do
24758: LD_ADDR_VAR 0 5
24762: PUSH
24763: LD_VAR 0 7
24767: PUSH
24768: FOR_IN
24769: IFFALSE 24807
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
24771: LD_VAR 0 1
24775: PPUSH
24776: LD_VAR 0 5
24780: PUSH
24781: LD_INT 1
24783: ARRAY
24784: PPUSH
24785: LD_VAR 0 5
24789: PUSH
24790: LD_INT 2
24792: ARRAY
24793: PPUSH
24794: CALL 23749 0 3
24798: NOT
24799: IFFALSE 24805
// exit ;
24801: POP
24802: POP
24803: GO 24809
24805: GO 24768
24807: POP
24808: POP
// end ;
24809: LD_VAR 0 4
24813: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
24814: LD_INT 0
24816: PPUSH
24817: PPUSH
24818: PPUSH
24819: PPUSH
24820: PPUSH
24821: PPUSH
24822: PPUSH
// if not GetClass ( unit ) = class_sniper then
24823: LD_VAR 0 1
24827: PPUSH
24828: CALL_OW 257
24832: PUSH
24833: LD_INT 5
24835: EQUAL
24836: NOT
24837: IFFALSE 24841
// exit ;
24839: GO 25229
// dist := 8 ;
24841: LD_ADDR_VAR 0 5
24845: PUSH
24846: LD_INT 8
24848: ST_TO_ADDR
// viewRange := 12 ;
24849: LD_ADDR_VAR 0 7
24853: PUSH
24854: LD_INT 12
24856: ST_TO_ADDR
// side := GetSide ( unit ) ;
24857: LD_ADDR_VAR 0 6
24861: PUSH
24862: LD_VAR 0 1
24866: PPUSH
24867: CALL_OW 255
24871: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
24872: LD_INT 61
24874: PPUSH
24875: LD_VAR 0 6
24879: PPUSH
24880: CALL_OW 321
24884: PUSH
24885: LD_INT 2
24887: EQUAL
24888: IFFALSE 24898
// viewRange := 16 ;
24890: LD_ADDR_VAR 0 7
24894: PUSH
24895: LD_INT 16
24897: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
24898: LD_VAR 0 1
24902: PPUSH
24903: LD_VAR 0 2
24907: PPUSH
24908: LD_VAR 0 3
24912: PPUSH
24913: CALL_OW 297
24917: PUSH
24918: LD_VAR 0 5
24922: GREATER
24923: IFFALSE 25002
// begin ComMoveXY ( unit , x , y ) ;
24925: LD_VAR 0 1
24929: PPUSH
24930: LD_VAR 0 2
24934: PPUSH
24935: LD_VAR 0 3
24939: PPUSH
24940: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
24944: LD_INT 35
24946: PPUSH
24947: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
24951: LD_VAR 0 1
24955: PPUSH
24956: LD_VAR 0 2
24960: PPUSH
24961: LD_VAR 0 3
24965: PPUSH
24966: CALL 60777 0 3
24970: NOT
24971: IFFALSE 24975
// exit ;
24973: GO 25229
// until GetDistUnitXY ( unit , x , y ) < dist ;
24975: LD_VAR 0 1
24979: PPUSH
24980: LD_VAR 0 2
24984: PPUSH
24985: LD_VAR 0 3
24989: PPUSH
24990: CALL_OW 297
24994: PUSH
24995: LD_VAR 0 5
24999: LESS
25000: IFFALSE 24944
// end ; ComTurnXY ( unit , x , y ) ;
25002: LD_VAR 0 1
25006: PPUSH
25007: LD_VAR 0 2
25011: PPUSH
25012: LD_VAR 0 3
25016: PPUSH
25017: CALL_OW 118
// wait ( 5 ) ;
25021: LD_INT 5
25023: PPUSH
25024: CALL_OW 67
// _d := GetDir ( unit ) ;
25028: LD_ADDR_VAR 0 10
25032: PUSH
25033: LD_VAR 0 1
25037: PPUSH
25038: CALL_OW 254
25042: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
25043: LD_ADDR_VAR 0 8
25047: PUSH
25048: LD_VAR 0 1
25052: PPUSH
25053: CALL_OW 250
25057: PPUSH
25058: LD_VAR 0 10
25062: PPUSH
25063: LD_VAR 0 5
25067: PPUSH
25068: CALL_OW 272
25072: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
25073: LD_ADDR_VAR 0 9
25077: PUSH
25078: LD_VAR 0 1
25082: PPUSH
25083: CALL_OW 251
25087: PPUSH
25088: LD_VAR 0 10
25092: PPUSH
25093: LD_VAR 0 5
25097: PPUSH
25098: CALL_OW 273
25102: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
25103: LD_VAR 0 8
25107: PPUSH
25108: LD_VAR 0 9
25112: PPUSH
25113: CALL_OW 488
25117: NOT
25118: IFFALSE 25122
// exit ;
25120: GO 25229
// ComAnimCustom ( unit , 1 ) ;
25122: LD_VAR 0 1
25126: PPUSH
25127: LD_INT 1
25129: PPUSH
25130: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
25134: LD_VAR 0 8
25138: PPUSH
25139: LD_VAR 0 9
25143: PPUSH
25144: LD_VAR 0 6
25148: PPUSH
25149: LD_VAR 0 7
25153: PPUSH
25154: CALL_OW 330
// repeat wait ( 1 ) ;
25158: LD_INT 1
25160: PPUSH
25161: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
25165: LD_VAR 0 1
25169: PPUSH
25170: CALL_OW 316
25174: PUSH
25175: LD_VAR 0 1
25179: PPUSH
25180: CALL_OW 314
25184: OR
25185: PUSH
25186: LD_VAR 0 1
25190: PPUSH
25191: CALL_OW 302
25195: NOT
25196: OR
25197: PUSH
25198: LD_VAR 0 1
25202: PPUSH
25203: CALL_OW 301
25207: OR
25208: IFFALSE 25158
// RemoveSeeing ( _x , _y , side ) ;
25210: LD_VAR 0 8
25214: PPUSH
25215: LD_VAR 0 9
25219: PPUSH
25220: LD_VAR 0 6
25224: PPUSH
25225: CALL_OW 331
// end ; end_of_file
25229: LD_VAR 0 4
25233: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
25234: LD_INT 0
25236: PPUSH
25237: PPUSH
// if exist_mode then
25238: LD_VAR 0 2
25242: IFFALSE 25267
// unit := CreateCharacter ( prefix & ident ) else
25244: LD_ADDR_VAR 0 5
25248: PUSH
25249: LD_VAR 0 3
25253: PUSH
25254: LD_VAR 0 1
25258: STR
25259: PPUSH
25260: CALL_OW 34
25264: ST_TO_ADDR
25265: GO 25282
// unit := NewCharacter ( ident ) ;
25267: LD_ADDR_VAR 0 5
25271: PUSH
25272: LD_VAR 0 1
25276: PPUSH
25277: CALL_OW 25
25281: ST_TO_ADDR
// result := unit ;
25282: LD_ADDR_VAR 0 4
25286: PUSH
25287: LD_VAR 0 5
25291: ST_TO_ADDR
// end ;
25292: LD_VAR 0 4
25296: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
25297: LD_INT 0
25299: PPUSH
25300: PPUSH
// if not side or not nation then
25301: LD_VAR 0 1
25305: NOT
25306: PUSH
25307: LD_VAR 0 2
25311: NOT
25312: OR
25313: IFFALSE 25317
// exit ;
25315: GO 26085
// case nation of nation_american :
25317: LD_VAR 0 2
25321: PUSH
25322: LD_INT 1
25324: DOUBLE
25325: EQUAL
25326: IFTRUE 25330
25328: GO 25544
25330: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
25331: LD_ADDR_VAR 0 4
25335: PUSH
25336: LD_INT 35
25338: PUSH
25339: LD_INT 45
25341: PUSH
25342: LD_INT 46
25344: PUSH
25345: LD_INT 47
25347: PUSH
25348: LD_INT 82
25350: PUSH
25351: LD_INT 83
25353: PUSH
25354: LD_INT 84
25356: PUSH
25357: LD_INT 85
25359: PUSH
25360: LD_INT 86
25362: PUSH
25363: LD_INT 1
25365: PUSH
25366: LD_INT 2
25368: PUSH
25369: LD_INT 6
25371: PUSH
25372: LD_INT 15
25374: PUSH
25375: LD_INT 16
25377: PUSH
25378: LD_INT 7
25380: PUSH
25381: LD_INT 12
25383: PUSH
25384: LD_INT 13
25386: PUSH
25387: LD_INT 10
25389: PUSH
25390: LD_INT 14
25392: PUSH
25393: LD_INT 20
25395: PUSH
25396: LD_INT 21
25398: PUSH
25399: LD_INT 22
25401: PUSH
25402: LD_INT 25
25404: PUSH
25405: LD_INT 32
25407: PUSH
25408: LD_INT 27
25410: PUSH
25411: LD_INT 36
25413: PUSH
25414: LD_INT 69
25416: PUSH
25417: LD_INT 39
25419: PUSH
25420: LD_INT 34
25422: PUSH
25423: LD_INT 40
25425: PUSH
25426: LD_INT 48
25428: PUSH
25429: LD_INT 49
25431: PUSH
25432: LD_INT 50
25434: PUSH
25435: LD_INT 51
25437: PUSH
25438: LD_INT 52
25440: PUSH
25441: LD_INT 53
25443: PUSH
25444: LD_INT 54
25446: PUSH
25447: LD_INT 55
25449: PUSH
25450: LD_INT 56
25452: PUSH
25453: LD_INT 57
25455: PUSH
25456: LD_INT 58
25458: PUSH
25459: LD_INT 59
25461: PUSH
25462: LD_INT 60
25464: PUSH
25465: LD_INT 61
25467: PUSH
25468: LD_INT 62
25470: PUSH
25471: LD_INT 80
25473: PUSH
25474: LD_INT 82
25476: PUSH
25477: LD_INT 83
25479: PUSH
25480: LD_INT 84
25482: PUSH
25483: LD_INT 85
25485: PUSH
25486: LD_INT 86
25488: PUSH
25489: EMPTY
25490: LIST
25491: LIST
25492: LIST
25493: LIST
25494: LIST
25495: LIST
25496: LIST
25497: LIST
25498: LIST
25499: LIST
25500: LIST
25501: LIST
25502: LIST
25503: LIST
25504: LIST
25505: LIST
25506: LIST
25507: LIST
25508: LIST
25509: LIST
25510: LIST
25511: LIST
25512: LIST
25513: LIST
25514: LIST
25515: LIST
25516: LIST
25517: LIST
25518: LIST
25519: LIST
25520: LIST
25521: LIST
25522: LIST
25523: LIST
25524: LIST
25525: LIST
25526: LIST
25527: LIST
25528: LIST
25529: LIST
25530: LIST
25531: LIST
25532: LIST
25533: LIST
25534: LIST
25535: LIST
25536: LIST
25537: LIST
25538: LIST
25539: LIST
25540: LIST
25541: ST_TO_ADDR
25542: GO 26009
25544: LD_INT 2
25546: DOUBLE
25547: EQUAL
25548: IFTRUE 25552
25550: GO 25778
25552: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
25553: LD_ADDR_VAR 0 4
25557: PUSH
25558: LD_INT 35
25560: PUSH
25561: LD_INT 45
25563: PUSH
25564: LD_INT 46
25566: PUSH
25567: LD_INT 47
25569: PUSH
25570: LD_INT 82
25572: PUSH
25573: LD_INT 83
25575: PUSH
25576: LD_INT 84
25578: PUSH
25579: LD_INT 85
25581: PUSH
25582: LD_INT 87
25584: PUSH
25585: LD_INT 70
25587: PUSH
25588: LD_INT 1
25590: PUSH
25591: LD_INT 11
25593: PUSH
25594: LD_INT 3
25596: PUSH
25597: LD_INT 4
25599: PUSH
25600: LD_INT 5
25602: PUSH
25603: LD_INT 6
25605: PUSH
25606: LD_INT 15
25608: PUSH
25609: LD_INT 18
25611: PUSH
25612: LD_INT 7
25614: PUSH
25615: LD_INT 17
25617: PUSH
25618: LD_INT 8
25620: PUSH
25621: LD_INT 20
25623: PUSH
25624: LD_INT 21
25626: PUSH
25627: LD_INT 22
25629: PUSH
25630: LD_INT 72
25632: PUSH
25633: LD_INT 26
25635: PUSH
25636: LD_INT 69
25638: PUSH
25639: LD_INT 39
25641: PUSH
25642: LD_INT 40
25644: PUSH
25645: LD_INT 41
25647: PUSH
25648: LD_INT 42
25650: PUSH
25651: LD_INT 43
25653: PUSH
25654: LD_INT 48
25656: PUSH
25657: LD_INT 49
25659: PUSH
25660: LD_INT 50
25662: PUSH
25663: LD_INT 51
25665: PUSH
25666: LD_INT 52
25668: PUSH
25669: LD_INT 53
25671: PUSH
25672: LD_INT 54
25674: PUSH
25675: LD_INT 55
25677: PUSH
25678: LD_INT 56
25680: PUSH
25681: LD_INT 60
25683: PUSH
25684: LD_INT 61
25686: PUSH
25687: LD_INT 62
25689: PUSH
25690: LD_INT 66
25692: PUSH
25693: LD_INT 67
25695: PUSH
25696: LD_INT 68
25698: PUSH
25699: LD_INT 81
25701: PUSH
25702: LD_INT 82
25704: PUSH
25705: LD_INT 83
25707: PUSH
25708: LD_INT 84
25710: PUSH
25711: LD_INT 85
25713: PUSH
25714: LD_INT 87
25716: PUSH
25717: LD_INT 88
25719: PUSH
25720: EMPTY
25721: LIST
25722: LIST
25723: LIST
25724: LIST
25725: LIST
25726: LIST
25727: LIST
25728: LIST
25729: LIST
25730: LIST
25731: LIST
25732: LIST
25733: LIST
25734: LIST
25735: LIST
25736: LIST
25737: LIST
25738: LIST
25739: LIST
25740: LIST
25741: LIST
25742: LIST
25743: LIST
25744: LIST
25745: LIST
25746: LIST
25747: LIST
25748: LIST
25749: LIST
25750: LIST
25751: LIST
25752: LIST
25753: LIST
25754: LIST
25755: LIST
25756: LIST
25757: LIST
25758: LIST
25759: LIST
25760: LIST
25761: LIST
25762: LIST
25763: LIST
25764: LIST
25765: LIST
25766: LIST
25767: LIST
25768: LIST
25769: LIST
25770: LIST
25771: LIST
25772: LIST
25773: LIST
25774: LIST
25775: ST_TO_ADDR
25776: GO 26009
25778: LD_INT 3
25780: DOUBLE
25781: EQUAL
25782: IFTRUE 25786
25784: GO 26008
25786: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
25787: LD_ADDR_VAR 0 4
25791: PUSH
25792: LD_INT 46
25794: PUSH
25795: LD_INT 47
25797: PUSH
25798: LD_INT 1
25800: PUSH
25801: LD_INT 2
25803: PUSH
25804: LD_INT 82
25806: PUSH
25807: LD_INT 83
25809: PUSH
25810: LD_INT 84
25812: PUSH
25813: LD_INT 85
25815: PUSH
25816: LD_INT 86
25818: PUSH
25819: LD_INT 11
25821: PUSH
25822: LD_INT 9
25824: PUSH
25825: LD_INT 20
25827: PUSH
25828: LD_INT 19
25830: PUSH
25831: LD_INT 21
25833: PUSH
25834: LD_INT 24
25836: PUSH
25837: LD_INT 22
25839: PUSH
25840: LD_INT 25
25842: PUSH
25843: LD_INT 28
25845: PUSH
25846: LD_INT 29
25848: PUSH
25849: LD_INT 30
25851: PUSH
25852: LD_INT 31
25854: PUSH
25855: LD_INT 37
25857: PUSH
25858: LD_INT 38
25860: PUSH
25861: LD_INT 32
25863: PUSH
25864: LD_INT 27
25866: PUSH
25867: LD_INT 33
25869: PUSH
25870: LD_INT 69
25872: PUSH
25873: LD_INT 39
25875: PUSH
25876: LD_INT 34
25878: PUSH
25879: LD_INT 40
25881: PUSH
25882: LD_INT 71
25884: PUSH
25885: LD_INT 23
25887: PUSH
25888: LD_INT 44
25890: PUSH
25891: LD_INT 48
25893: PUSH
25894: LD_INT 49
25896: PUSH
25897: LD_INT 50
25899: PUSH
25900: LD_INT 51
25902: PUSH
25903: LD_INT 52
25905: PUSH
25906: LD_INT 53
25908: PUSH
25909: LD_INT 54
25911: PUSH
25912: LD_INT 55
25914: PUSH
25915: LD_INT 56
25917: PUSH
25918: LD_INT 57
25920: PUSH
25921: LD_INT 58
25923: PUSH
25924: LD_INT 59
25926: PUSH
25927: LD_INT 63
25929: PUSH
25930: LD_INT 64
25932: PUSH
25933: LD_INT 65
25935: PUSH
25936: LD_INT 82
25938: PUSH
25939: LD_INT 83
25941: PUSH
25942: LD_INT 84
25944: PUSH
25945: LD_INT 85
25947: PUSH
25948: LD_INT 86
25950: PUSH
25951: EMPTY
25952: LIST
25953: LIST
25954: LIST
25955: LIST
25956: LIST
25957: LIST
25958: LIST
25959: LIST
25960: LIST
25961: LIST
25962: LIST
25963: LIST
25964: LIST
25965: LIST
25966: LIST
25967: LIST
25968: LIST
25969: LIST
25970: LIST
25971: LIST
25972: LIST
25973: LIST
25974: LIST
25975: LIST
25976: LIST
25977: LIST
25978: LIST
25979: LIST
25980: LIST
25981: LIST
25982: LIST
25983: LIST
25984: LIST
25985: LIST
25986: LIST
25987: LIST
25988: LIST
25989: LIST
25990: LIST
25991: LIST
25992: LIST
25993: LIST
25994: LIST
25995: LIST
25996: LIST
25997: LIST
25998: LIST
25999: LIST
26000: LIST
26001: LIST
26002: LIST
26003: LIST
26004: LIST
26005: ST_TO_ADDR
26006: GO 26009
26008: POP
// if state > - 1 and state < 3 then
26009: LD_VAR 0 3
26013: PUSH
26014: LD_INT 1
26016: NEG
26017: GREATER
26018: PUSH
26019: LD_VAR 0 3
26023: PUSH
26024: LD_INT 3
26026: LESS
26027: AND
26028: IFFALSE 26085
// for i in result do
26030: LD_ADDR_VAR 0 5
26034: PUSH
26035: LD_VAR 0 4
26039: PUSH
26040: FOR_IN
26041: IFFALSE 26083
// if GetTech ( i , side ) <> state then
26043: LD_VAR 0 5
26047: PPUSH
26048: LD_VAR 0 1
26052: PPUSH
26053: CALL_OW 321
26057: PUSH
26058: LD_VAR 0 3
26062: NONEQUAL
26063: IFFALSE 26081
// result := result diff i ;
26065: LD_ADDR_VAR 0 4
26069: PUSH
26070: LD_VAR 0 4
26074: PUSH
26075: LD_VAR 0 5
26079: DIFF
26080: ST_TO_ADDR
26081: GO 26040
26083: POP
26084: POP
// end ;
26085: LD_VAR 0 4
26089: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
26090: LD_INT 0
26092: PPUSH
26093: PPUSH
26094: PPUSH
// result := true ;
26095: LD_ADDR_VAR 0 3
26099: PUSH
26100: LD_INT 1
26102: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
26103: LD_ADDR_VAR 0 5
26107: PUSH
26108: LD_VAR 0 2
26112: PPUSH
26113: CALL_OW 480
26117: ST_TO_ADDR
// if not tmp then
26118: LD_VAR 0 5
26122: NOT
26123: IFFALSE 26127
// exit ;
26125: GO 26176
// for i in tmp do
26127: LD_ADDR_VAR 0 4
26131: PUSH
26132: LD_VAR 0 5
26136: PUSH
26137: FOR_IN
26138: IFFALSE 26174
// if GetTech ( i , side ) <> state_researched then
26140: LD_VAR 0 4
26144: PPUSH
26145: LD_VAR 0 1
26149: PPUSH
26150: CALL_OW 321
26154: PUSH
26155: LD_INT 2
26157: NONEQUAL
26158: IFFALSE 26172
// begin result := false ;
26160: LD_ADDR_VAR 0 3
26164: PUSH
26165: LD_INT 0
26167: ST_TO_ADDR
// exit ;
26168: POP
26169: POP
26170: GO 26176
// end ;
26172: GO 26137
26174: POP
26175: POP
// end ;
26176: LD_VAR 0 3
26180: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
26181: LD_INT 0
26183: PPUSH
26184: PPUSH
26185: PPUSH
26186: PPUSH
26187: PPUSH
26188: PPUSH
26189: PPUSH
26190: PPUSH
26191: PPUSH
26192: PPUSH
26193: PPUSH
26194: PPUSH
26195: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
26196: LD_VAR 0 1
26200: NOT
26201: PUSH
26202: LD_VAR 0 1
26206: PPUSH
26207: CALL_OW 257
26211: PUSH
26212: LD_INT 9
26214: NONEQUAL
26215: OR
26216: IFFALSE 26220
// exit ;
26218: GO 26793
// side := GetSide ( unit ) ;
26220: LD_ADDR_VAR 0 9
26224: PUSH
26225: LD_VAR 0 1
26229: PPUSH
26230: CALL_OW 255
26234: ST_TO_ADDR
// tech_space := tech_spacanom ;
26235: LD_ADDR_VAR 0 12
26239: PUSH
26240: LD_INT 29
26242: ST_TO_ADDR
// tech_time := tech_taurad ;
26243: LD_ADDR_VAR 0 13
26247: PUSH
26248: LD_INT 28
26250: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
26251: LD_ADDR_VAR 0 11
26255: PUSH
26256: LD_VAR 0 1
26260: PPUSH
26261: CALL_OW 310
26265: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
26266: LD_VAR 0 11
26270: PPUSH
26271: CALL_OW 247
26275: PUSH
26276: LD_INT 2
26278: EQUAL
26279: IFFALSE 26283
// exit ;
26281: GO 26793
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
26283: LD_ADDR_VAR 0 8
26287: PUSH
26288: LD_INT 81
26290: PUSH
26291: LD_VAR 0 9
26295: PUSH
26296: EMPTY
26297: LIST
26298: LIST
26299: PUSH
26300: LD_INT 3
26302: PUSH
26303: LD_INT 21
26305: PUSH
26306: LD_INT 3
26308: PUSH
26309: EMPTY
26310: LIST
26311: LIST
26312: PUSH
26313: EMPTY
26314: LIST
26315: LIST
26316: PUSH
26317: EMPTY
26318: LIST
26319: LIST
26320: PPUSH
26321: CALL_OW 69
26325: ST_TO_ADDR
// if not tmp then
26326: LD_VAR 0 8
26330: NOT
26331: IFFALSE 26335
// exit ;
26333: GO 26793
// if in_unit then
26335: LD_VAR 0 11
26339: IFFALSE 26363
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
26341: LD_ADDR_VAR 0 10
26345: PUSH
26346: LD_VAR 0 8
26350: PPUSH
26351: LD_VAR 0 11
26355: PPUSH
26356: CALL_OW 74
26360: ST_TO_ADDR
26361: GO 26383
// enemy := NearestUnitToUnit ( tmp , unit ) ;
26363: LD_ADDR_VAR 0 10
26367: PUSH
26368: LD_VAR 0 8
26372: PPUSH
26373: LD_VAR 0 1
26377: PPUSH
26378: CALL_OW 74
26382: ST_TO_ADDR
// if not enemy then
26383: LD_VAR 0 10
26387: NOT
26388: IFFALSE 26392
// exit ;
26390: GO 26793
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
26392: LD_VAR 0 11
26396: PUSH
26397: LD_VAR 0 11
26401: PPUSH
26402: LD_VAR 0 10
26406: PPUSH
26407: CALL_OW 296
26411: PUSH
26412: LD_INT 13
26414: GREATER
26415: AND
26416: PUSH
26417: LD_VAR 0 1
26421: PPUSH
26422: LD_VAR 0 10
26426: PPUSH
26427: CALL_OW 296
26431: PUSH
26432: LD_INT 12
26434: GREATER
26435: OR
26436: IFFALSE 26440
// exit ;
26438: GO 26793
// missile := [ 1 ] ;
26440: LD_ADDR_VAR 0 14
26444: PUSH
26445: LD_INT 1
26447: PUSH
26448: EMPTY
26449: LIST
26450: ST_TO_ADDR
// if Researched ( side , tech_space ) then
26451: LD_VAR 0 9
26455: PPUSH
26456: LD_VAR 0 12
26460: PPUSH
26461: CALL_OW 325
26465: IFFALSE 26494
// missile := Insert ( missile , missile + 1 , 2 ) ;
26467: LD_ADDR_VAR 0 14
26471: PUSH
26472: LD_VAR 0 14
26476: PPUSH
26477: LD_VAR 0 14
26481: PUSH
26482: LD_INT 1
26484: PLUS
26485: PPUSH
26486: LD_INT 2
26488: PPUSH
26489: CALL_OW 2
26493: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
26494: LD_VAR 0 9
26498: PPUSH
26499: LD_VAR 0 13
26503: PPUSH
26504: CALL_OW 325
26508: PUSH
26509: LD_VAR 0 10
26513: PPUSH
26514: CALL_OW 255
26518: PPUSH
26519: LD_VAR 0 13
26523: PPUSH
26524: CALL_OW 325
26528: NOT
26529: AND
26530: IFFALSE 26559
// missile := Insert ( missile , missile + 1 , 3 ) ;
26532: LD_ADDR_VAR 0 14
26536: PUSH
26537: LD_VAR 0 14
26541: PPUSH
26542: LD_VAR 0 14
26546: PUSH
26547: LD_INT 1
26549: PLUS
26550: PPUSH
26551: LD_INT 3
26553: PPUSH
26554: CALL_OW 2
26558: ST_TO_ADDR
// if missile < 2 then
26559: LD_VAR 0 14
26563: PUSH
26564: LD_INT 2
26566: LESS
26567: IFFALSE 26571
// exit ;
26569: GO 26793
// x := GetX ( enemy ) ;
26571: LD_ADDR_VAR 0 4
26575: PUSH
26576: LD_VAR 0 10
26580: PPUSH
26581: CALL_OW 250
26585: ST_TO_ADDR
// y := GetY ( enemy ) ;
26586: LD_ADDR_VAR 0 5
26590: PUSH
26591: LD_VAR 0 10
26595: PPUSH
26596: CALL_OW 251
26600: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
26601: LD_ADDR_VAR 0 6
26605: PUSH
26606: LD_VAR 0 4
26610: PUSH
26611: LD_INT 1
26613: NEG
26614: PPUSH
26615: LD_INT 1
26617: PPUSH
26618: CALL_OW 12
26622: PLUS
26623: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
26624: LD_ADDR_VAR 0 7
26628: PUSH
26629: LD_VAR 0 5
26633: PUSH
26634: LD_INT 1
26636: NEG
26637: PPUSH
26638: LD_INT 1
26640: PPUSH
26641: CALL_OW 12
26645: PLUS
26646: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
26647: LD_VAR 0 6
26651: PPUSH
26652: LD_VAR 0 7
26656: PPUSH
26657: CALL_OW 488
26661: NOT
26662: IFFALSE 26684
// begin _x := x ;
26664: LD_ADDR_VAR 0 6
26668: PUSH
26669: LD_VAR 0 4
26673: ST_TO_ADDR
// _y := y ;
26674: LD_ADDR_VAR 0 7
26678: PUSH
26679: LD_VAR 0 5
26683: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
26684: LD_ADDR_VAR 0 3
26688: PUSH
26689: LD_INT 1
26691: PPUSH
26692: LD_VAR 0 14
26696: PPUSH
26697: CALL_OW 12
26701: ST_TO_ADDR
// case i of 1 :
26702: LD_VAR 0 3
26706: PUSH
26707: LD_INT 1
26709: DOUBLE
26710: EQUAL
26711: IFTRUE 26715
26713: GO 26732
26715: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
26716: LD_VAR 0 1
26720: PPUSH
26721: LD_VAR 0 10
26725: PPUSH
26726: CALL_OW 115
26730: GO 26793
26732: LD_INT 2
26734: DOUBLE
26735: EQUAL
26736: IFTRUE 26740
26738: GO 26762
26740: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
26741: LD_VAR 0 1
26745: PPUSH
26746: LD_VAR 0 6
26750: PPUSH
26751: LD_VAR 0 7
26755: PPUSH
26756: CALL_OW 153
26760: GO 26793
26762: LD_INT 3
26764: DOUBLE
26765: EQUAL
26766: IFTRUE 26770
26768: GO 26792
26770: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
26771: LD_VAR 0 1
26775: PPUSH
26776: LD_VAR 0 6
26780: PPUSH
26781: LD_VAR 0 7
26785: PPUSH
26786: CALL_OW 154
26790: GO 26793
26792: POP
// end ;
26793: LD_VAR 0 2
26797: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
26798: LD_INT 0
26800: PPUSH
26801: PPUSH
26802: PPUSH
26803: PPUSH
26804: PPUSH
26805: PPUSH
// if not unit or not building then
26806: LD_VAR 0 1
26810: NOT
26811: PUSH
26812: LD_VAR 0 2
26816: NOT
26817: OR
26818: IFFALSE 26822
// exit ;
26820: GO 26980
// x := GetX ( building ) ;
26822: LD_ADDR_VAR 0 5
26826: PUSH
26827: LD_VAR 0 2
26831: PPUSH
26832: CALL_OW 250
26836: ST_TO_ADDR
// y := GetY ( building ) ;
26837: LD_ADDR_VAR 0 6
26841: PUSH
26842: LD_VAR 0 2
26846: PPUSH
26847: CALL_OW 251
26851: ST_TO_ADDR
// for i = 0 to 5 do
26852: LD_ADDR_VAR 0 4
26856: PUSH
26857: DOUBLE
26858: LD_INT 0
26860: DEC
26861: ST_TO_ADDR
26862: LD_INT 5
26864: PUSH
26865: FOR_TO
26866: IFFALSE 26978
// begin _x := ShiftX ( x , i , 3 ) ;
26868: LD_ADDR_VAR 0 7
26872: PUSH
26873: LD_VAR 0 5
26877: PPUSH
26878: LD_VAR 0 4
26882: PPUSH
26883: LD_INT 3
26885: PPUSH
26886: CALL_OW 272
26890: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
26891: LD_ADDR_VAR 0 8
26895: PUSH
26896: LD_VAR 0 6
26900: PPUSH
26901: LD_VAR 0 4
26905: PPUSH
26906: LD_INT 3
26908: PPUSH
26909: CALL_OW 273
26913: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
26914: LD_VAR 0 7
26918: PPUSH
26919: LD_VAR 0 8
26923: PPUSH
26924: CALL_OW 488
26928: NOT
26929: IFFALSE 26933
// continue ;
26931: GO 26865
// if HexInfo ( _x , _y ) = 0 then
26933: LD_VAR 0 7
26937: PPUSH
26938: LD_VAR 0 8
26942: PPUSH
26943: CALL_OW 428
26947: PUSH
26948: LD_INT 0
26950: EQUAL
26951: IFFALSE 26976
// begin ComMoveXY ( unit , _x , _y ) ;
26953: LD_VAR 0 1
26957: PPUSH
26958: LD_VAR 0 7
26962: PPUSH
26963: LD_VAR 0 8
26967: PPUSH
26968: CALL_OW 111
// exit ;
26972: POP
26973: POP
26974: GO 26980
// end ; end ;
26976: GO 26865
26978: POP
26979: POP
// end ;
26980: LD_VAR 0 3
26984: RET
// export function ScanBase ( side , base_area ) ; begin
26985: LD_INT 0
26987: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
26988: LD_ADDR_VAR 0 3
26992: PUSH
26993: LD_VAR 0 2
26997: PPUSH
26998: LD_INT 81
27000: PUSH
27001: LD_VAR 0 1
27005: PUSH
27006: EMPTY
27007: LIST
27008: LIST
27009: PPUSH
27010: CALL_OW 70
27014: ST_TO_ADDR
// end ;
27015: LD_VAR 0 3
27019: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
27020: LD_INT 0
27022: PPUSH
27023: PPUSH
27024: PPUSH
27025: PPUSH
// result := false ;
27026: LD_ADDR_VAR 0 2
27030: PUSH
27031: LD_INT 0
27033: ST_TO_ADDR
// side := GetSide ( unit ) ;
27034: LD_ADDR_VAR 0 3
27038: PUSH
27039: LD_VAR 0 1
27043: PPUSH
27044: CALL_OW 255
27048: ST_TO_ADDR
// nat := GetNation ( unit ) ;
27049: LD_ADDR_VAR 0 4
27053: PUSH
27054: LD_VAR 0 1
27058: PPUSH
27059: CALL_OW 248
27063: ST_TO_ADDR
// case nat of 1 :
27064: LD_VAR 0 4
27068: PUSH
27069: LD_INT 1
27071: DOUBLE
27072: EQUAL
27073: IFTRUE 27077
27075: GO 27088
27077: POP
// tech := tech_lassight ; 2 :
27078: LD_ADDR_VAR 0 5
27082: PUSH
27083: LD_INT 12
27085: ST_TO_ADDR
27086: GO 27127
27088: LD_INT 2
27090: DOUBLE
27091: EQUAL
27092: IFTRUE 27096
27094: GO 27107
27096: POP
// tech := tech_mortar ; 3 :
27097: LD_ADDR_VAR 0 5
27101: PUSH
27102: LD_INT 41
27104: ST_TO_ADDR
27105: GO 27127
27107: LD_INT 3
27109: DOUBLE
27110: EQUAL
27111: IFTRUE 27115
27113: GO 27126
27115: POP
// tech := tech_bazooka ; end ;
27116: LD_ADDR_VAR 0 5
27120: PUSH
27121: LD_INT 44
27123: ST_TO_ADDR
27124: GO 27127
27126: POP
// if Researched ( side , tech ) then
27127: LD_VAR 0 3
27131: PPUSH
27132: LD_VAR 0 5
27136: PPUSH
27137: CALL_OW 325
27141: IFFALSE 27168
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
27143: LD_ADDR_VAR 0 2
27147: PUSH
27148: LD_INT 5
27150: PUSH
27151: LD_INT 8
27153: PUSH
27154: LD_INT 9
27156: PUSH
27157: EMPTY
27158: LIST
27159: LIST
27160: LIST
27161: PUSH
27162: LD_VAR 0 4
27166: ARRAY
27167: ST_TO_ADDR
// end ;
27168: LD_VAR 0 2
27172: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
27173: LD_INT 0
27175: PPUSH
27176: PPUSH
27177: PPUSH
// if not mines then
27178: LD_VAR 0 2
27182: NOT
27183: IFFALSE 27187
// exit ;
27185: GO 27331
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
27187: LD_ADDR_VAR 0 5
27191: PUSH
27192: LD_INT 81
27194: PUSH
27195: LD_VAR 0 1
27199: PUSH
27200: EMPTY
27201: LIST
27202: LIST
27203: PUSH
27204: LD_INT 3
27206: PUSH
27207: LD_INT 21
27209: PUSH
27210: LD_INT 3
27212: PUSH
27213: EMPTY
27214: LIST
27215: LIST
27216: PUSH
27217: EMPTY
27218: LIST
27219: LIST
27220: PUSH
27221: EMPTY
27222: LIST
27223: LIST
27224: PPUSH
27225: CALL_OW 69
27229: ST_TO_ADDR
// for i in mines do
27230: LD_ADDR_VAR 0 4
27234: PUSH
27235: LD_VAR 0 2
27239: PUSH
27240: FOR_IN
27241: IFFALSE 27329
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
27243: LD_VAR 0 4
27247: PUSH
27248: LD_INT 1
27250: ARRAY
27251: PPUSH
27252: LD_VAR 0 4
27256: PUSH
27257: LD_INT 2
27259: ARRAY
27260: PPUSH
27261: CALL_OW 458
27265: NOT
27266: IFFALSE 27270
// continue ;
27268: GO 27240
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
27270: LD_VAR 0 4
27274: PUSH
27275: LD_INT 1
27277: ARRAY
27278: PPUSH
27279: LD_VAR 0 4
27283: PUSH
27284: LD_INT 2
27286: ARRAY
27287: PPUSH
27288: CALL_OW 428
27292: PUSH
27293: LD_VAR 0 5
27297: IN
27298: IFFALSE 27327
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
27300: LD_VAR 0 4
27304: PUSH
27305: LD_INT 1
27307: ARRAY
27308: PPUSH
27309: LD_VAR 0 4
27313: PUSH
27314: LD_INT 2
27316: ARRAY
27317: PPUSH
27318: LD_VAR 0 1
27322: PPUSH
27323: CALL_OW 456
// end ;
27327: GO 27240
27329: POP
27330: POP
// end ;
27331: LD_VAR 0 3
27335: RET
// export function Count ( array ) ; var i ; begin
27336: LD_INT 0
27338: PPUSH
27339: PPUSH
// result := 0 ;
27340: LD_ADDR_VAR 0 2
27344: PUSH
27345: LD_INT 0
27347: ST_TO_ADDR
// for i in array do
27348: LD_ADDR_VAR 0 3
27352: PUSH
27353: LD_VAR 0 1
27357: PUSH
27358: FOR_IN
27359: IFFALSE 27383
// if i then
27361: LD_VAR 0 3
27365: IFFALSE 27381
// result := result + 1 ;
27367: LD_ADDR_VAR 0 2
27371: PUSH
27372: LD_VAR 0 2
27376: PUSH
27377: LD_INT 1
27379: PLUS
27380: ST_TO_ADDR
27381: GO 27358
27383: POP
27384: POP
// end ;
27385: LD_VAR 0 2
27389: RET
// export function IsEmpty ( building ) ; begin
27390: LD_INT 0
27392: PPUSH
// if not building then
27393: LD_VAR 0 1
27397: NOT
27398: IFFALSE 27402
// exit ;
27400: GO 27445
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
27402: LD_ADDR_VAR 0 2
27406: PUSH
27407: LD_VAR 0 1
27411: PUSH
27412: LD_INT 22
27414: PUSH
27415: LD_VAR 0 1
27419: PPUSH
27420: CALL_OW 255
27424: PUSH
27425: EMPTY
27426: LIST
27427: LIST
27428: PUSH
27429: LD_INT 58
27431: PUSH
27432: EMPTY
27433: LIST
27434: PUSH
27435: EMPTY
27436: LIST
27437: LIST
27438: PPUSH
27439: CALL_OW 69
27443: IN
27444: ST_TO_ADDR
// end ;
27445: LD_VAR 0 2
27449: RET
// export function IsNotFull ( building ) ; begin
27450: LD_INT 0
27452: PPUSH
// if not building then
27453: LD_VAR 0 1
27457: NOT
27458: IFFALSE 27462
// exit ;
27460: GO 27481
// result := UnitsInside ( building ) < 6 ;
27462: LD_ADDR_VAR 0 2
27466: PUSH
27467: LD_VAR 0 1
27471: PPUSH
27472: CALL_OW 313
27476: PUSH
27477: LD_INT 6
27479: LESS
27480: ST_TO_ADDR
// end ;
27481: LD_VAR 0 2
27485: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
27486: LD_INT 0
27488: PPUSH
27489: PPUSH
27490: PPUSH
27491: PPUSH
// tmp := [ ] ;
27492: LD_ADDR_VAR 0 3
27496: PUSH
27497: EMPTY
27498: ST_TO_ADDR
// list := [ ] ;
27499: LD_ADDR_VAR 0 5
27503: PUSH
27504: EMPTY
27505: ST_TO_ADDR
// for i = 16 to 25 do
27506: LD_ADDR_VAR 0 4
27510: PUSH
27511: DOUBLE
27512: LD_INT 16
27514: DEC
27515: ST_TO_ADDR
27516: LD_INT 25
27518: PUSH
27519: FOR_TO
27520: IFFALSE 27593
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
27522: LD_ADDR_VAR 0 3
27526: PUSH
27527: LD_VAR 0 3
27531: PUSH
27532: LD_INT 22
27534: PUSH
27535: LD_VAR 0 1
27539: PPUSH
27540: CALL_OW 255
27544: PUSH
27545: EMPTY
27546: LIST
27547: LIST
27548: PUSH
27549: LD_INT 91
27551: PUSH
27552: LD_VAR 0 1
27556: PUSH
27557: LD_INT 6
27559: PUSH
27560: EMPTY
27561: LIST
27562: LIST
27563: LIST
27564: PUSH
27565: LD_INT 30
27567: PUSH
27568: LD_VAR 0 4
27572: PUSH
27573: EMPTY
27574: LIST
27575: LIST
27576: PUSH
27577: EMPTY
27578: LIST
27579: LIST
27580: LIST
27581: PUSH
27582: EMPTY
27583: LIST
27584: PPUSH
27585: CALL_OW 69
27589: ADD
27590: ST_TO_ADDR
27591: GO 27519
27593: POP
27594: POP
// for i = 1 to tmp do
27595: LD_ADDR_VAR 0 4
27599: PUSH
27600: DOUBLE
27601: LD_INT 1
27603: DEC
27604: ST_TO_ADDR
27605: LD_VAR 0 3
27609: PUSH
27610: FOR_TO
27611: IFFALSE 27699
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
27613: LD_ADDR_VAR 0 5
27617: PUSH
27618: LD_VAR 0 5
27622: PUSH
27623: LD_VAR 0 3
27627: PUSH
27628: LD_VAR 0 4
27632: ARRAY
27633: PPUSH
27634: CALL_OW 266
27638: PUSH
27639: LD_VAR 0 3
27643: PUSH
27644: LD_VAR 0 4
27648: ARRAY
27649: PPUSH
27650: CALL_OW 250
27654: PUSH
27655: LD_VAR 0 3
27659: PUSH
27660: LD_VAR 0 4
27664: ARRAY
27665: PPUSH
27666: CALL_OW 251
27670: PUSH
27671: LD_VAR 0 3
27675: PUSH
27676: LD_VAR 0 4
27680: ARRAY
27681: PPUSH
27682: CALL_OW 254
27686: PUSH
27687: EMPTY
27688: LIST
27689: LIST
27690: LIST
27691: LIST
27692: PUSH
27693: EMPTY
27694: LIST
27695: ADD
27696: ST_TO_ADDR
27697: GO 27610
27699: POP
27700: POP
// result := list ;
27701: LD_ADDR_VAR 0 2
27705: PUSH
27706: LD_VAR 0 5
27710: ST_TO_ADDR
// end ;
27711: LD_VAR 0 2
27715: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
27716: LD_INT 0
27718: PPUSH
27719: PPUSH
27720: PPUSH
27721: PPUSH
27722: PPUSH
27723: PPUSH
27724: PPUSH
// if not factory then
27725: LD_VAR 0 1
27729: NOT
27730: IFFALSE 27734
// exit ;
27732: GO 28327
// if control = control_apeman then
27734: LD_VAR 0 4
27738: PUSH
27739: LD_INT 5
27741: EQUAL
27742: IFFALSE 27851
// begin tmp := UnitsInside ( factory ) ;
27744: LD_ADDR_VAR 0 8
27748: PUSH
27749: LD_VAR 0 1
27753: PPUSH
27754: CALL_OW 313
27758: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
27759: LD_VAR 0 8
27763: PPUSH
27764: LD_INT 25
27766: PUSH
27767: LD_INT 12
27769: PUSH
27770: EMPTY
27771: LIST
27772: LIST
27773: PPUSH
27774: CALL_OW 72
27778: NOT
27779: IFFALSE 27789
// control := control_manual ;
27781: LD_ADDR_VAR 0 4
27785: PUSH
27786: LD_INT 1
27788: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
27789: LD_ADDR_VAR 0 8
27793: PUSH
27794: LD_VAR 0 1
27798: PPUSH
27799: CALL 27486 0 1
27803: ST_TO_ADDR
// if tmp then
27804: LD_VAR 0 8
27808: IFFALSE 27851
// begin for i in tmp do
27810: LD_ADDR_VAR 0 7
27814: PUSH
27815: LD_VAR 0 8
27819: PUSH
27820: FOR_IN
27821: IFFALSE 27849
// if i [ 1 ] = b_ext_radio then
27823: LD_VAR 0 7
27827: PUSH
27828: LD_INT 1
27830: ARRAY
27831: PUSH
27832: LD_INT 22
27834: EQUAL
27835: IFFALSE 27847
// begin control := control_remote ;
27837: LD_ADDR_VAR 0 4
27841: PUSH
27842: LD_INT 2
27844: ST_TO_ADDR
// break ;
27845: GO 27849
// end ;
27847: GO 27820
27849: POP
27850: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
27851: LD_VAR 0 1
27855: PPUSH
27856: LD_VAR 0 2
27860: PPUSH
27861: LD_VAR 0 3
27865: PPUSH
27866: LD_VAR 0 4
27870: PPUSH
27871: LD_VAR 0 5
27875: PPUSH
27876: CALL_OW 448
27880: IFFALSE 27915
// begin result := [ chassis , engine , control , weapon ] ;
27882: LD_ADDR_VAR 0 6
27886: PUSH
27887: LD_VAR 0 2
27891: PUSH
27892: LD_VAR 0 3
27896: PUSH
27897: LD_VAR 0 4
27901: PUSH
27902: LD_VAR 0 5
27906: PUSH
27907: EMPTY
27908: LIST
27909: LIST
27910: LIST
27911: LIST
27912: ST_TO_ADDR
// exit ;
27913: GO 28327
// end ; _chassis := AvailableChassisList ( factory ) ;
27915: LD_ADDR_VAR 0 9
27919: PUSH
27920: LD_VAR 0 1
27924: PPUSH
27925: CALL_OW 475
27929: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
27930: LD_ADDR_VAR 0 11
27934: PUSH
27935: LD_VAR 0 1
27939: PPUSH
27940: CALL_OW 476
27944: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
27945: LD_ADDR_VAR 0 12
27949: PUSH
27950: LD_VAR 0 1
27954: PPUSH
27955: CALL_OW 477
27959: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
27960: LD_ADDR_VAR 0 10
27964: PUSH
27965: LD_VAR 0 1
27969: PPUSH
27970: CALL_OW 478
27974: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
27975: LD_VAR 0 9
27979: NOT
27980: PUSH
27981: LD_VAR 0 11
27985: NOT
27986: OR
27987: PUSH
27988: LD_VAR 0 12
27992: NOT
27993: OR
27994: PUSH
27995: LD_VAR 0 10
27999: NOT
28000: OR
28001: IFFALSE 28036
// begin result := [ chassis , engine , control , weapon ] ;
28003: LD_ADDR_VAR 0 6
28007: PUSH
28008: LD_VAR 0 2
28012: PUSH
28013: LD_VAR 0 3
28017: PUSH
28018: LD_VAR 0 4
28022: PUSH
28023: LD_VAR 0 5
28027: PUSH
28028: EMPTY
28029: LIST
28030: LIST
28031: LIST
28032: LIST
28033: ST_TO_ADDR
// exit ;
28034: GO 28327
// end ; if not chassis in _chassis then
28036: LD_VAR 0 2
28040: PUSH
28041: LD_VAR 0 9
28045: IN
28046: NOT
28047: IFFALSE 28073
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
28049: LD_ADDR_VAR 0 2
28053: PUSH
28054: LD_VAR 0 9
28058: PUSH
28059: LD_INT 1
28061: PPUSH
28062: LD_VAR 0 9
28066: PPUSH
28067: CALL_OW 12
28071: ARRAY
28072: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
28073: LD_VAR 0 2
28077: PPUSH
28078: LD_VAR 0 3
28082: PPUSH
28083: CALL 28332 0 2
28087: NOT
28088: IFFALSE 28147
// repeat engine := _engine [ 1 ] ;
28090: LD_ADDR_VAR 0 3
28094: PUSH
28095: LD_VAR 0 11
28099: PUSH
28100: LD_INT 1
28102: ARRAY
28103: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
28104: LD_ADDR_VAR 0 11
28108: PUSH
28109: LD_VAR 0 11
28113: PPUSH
28114: LD_INT 1
28116: PPUSH
28117: CALL_OW 3
28121: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
28122: LD_VAR 0 2
28126: PPUSH
28127: LD_VAR 0 3
28131: PPUSH
28132: CALL 28332 0 2
28136: PUSH
28137: LD_VAR 0 11
28141: PUSH
28142: EMPTY
28143: EQUAL
28144: OR
28145: IFFALSE 28090
// if not control in _control then
28147: LD_VAR 0 4
28151: PUSH
28152: LD_VAR 0 12
28156: IN
28157: NOT
28158: IFFALSE 28184
// control := _control [ rand ( 1 , _control ) ] ;
28160: LD_ADDR_VAR 0 4
28164: PUSH
28165: LD_VAR 0 12
28169: PUSH
28170: LD_INT 1
28172: PPUSH
28173: LD_VAR 0 12
28177: PPUSH
28178: CALL_OW 12
28182: ARRAY
28183: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
28184: LD_VAR 0 2
28188: PPUSH
28189: LD_VAR 0 5
28193: PPUSH
28194: CALL 28552 0 2
28198: NOT
28199: IFFALSE 28258
// repeat weapon := _weapon [ 1 ] ;
28201: LD_ADDR_VAR 0 5
28205: PUSH
28206: LD_VAR 0 10
28210: PUSH
28211: LD_INT 1
28213: ARRAY
28214: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
28215: LD_ADDR_VAR 0 10
28219: PUSH
28220: LD_VAR 0 10
28224: PPUSH
28225: LD_INT 1
28227: PPUSH
28228: CALL_OW 3
28232: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
28233: LD_VAR 0 2
28237: PPUSH
28238: LD_VAR 0 5
28242: PPUSH
28243: CALL 28552 0 2
28247: PUSH
28248: LD_VAR 0 10
28252: PUSH
28253: EMPTY
28254: EQUAL
28255: OR
28256: IFFALSE 28201
// result := [ ] ;
28258: LD_ADDR_VAR 0 6
28262: PUSH
28263: EMPTY
28264: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
28265: LD_VAR 0 1
28269: PPUSH
28270: LD_VAR 0 2
28274: PPUSH
28275: LD_VAR 0 3
28279: PPUSH
28280: LD_VAR 0 4
28284: PPUSH
28285: LD_VAR 0 5
28289: PPUSH
28290: CALL_OW 448
28294: IFFALSE 28327
// result := [ chassis , engine , control , weapon ] ;
28296: LD_ADDR_VAR 0 6
28300: PUSH
28301: LD_VAR 0 2
28305: PUSH
28306: LD_VAR 0 3
28310: PUSH
28311: LD_VAR 0 4
28315: PUSH
28316: LD_VAR 0 5
28320: PUSH
28321: EMPTY
28322: LIST
28323: LIST
28324: LIST
28325: LIST
28326: ST_TO_ADDR
// end ;
28327: LD_VAR 0 6
28331: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
28332: LD_INT 0
28334: PPUSH
// if not chassis or not engine then
28335: LD_VAR 0 1
28339: NOT
28340: PUSH
28341: LD_VAR 0 2
28345: NOT
28346: OR
28347: IFFALSE 28351
// exit ;
28349: GO 28547
// case engine of engine_solar :
28351: LD_VAR 0 2
28355: PUSH
28356: LD_INT 2
28358: DOUBLE
28359: EQUAL
28360: IFTRUE 28364
28362: GO 28402
28364: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
28365: LD_ADDR_VAR 0 3
28369: PUSH
28370: LD_INT 11
28372: PUSH
28373: LD_INT 12
28375: PUSH
28376: LD_INT 13
28378: PUSH
28379: LD_INT 14
28381: PUSH
28382: LD_INT 1
28384: PUSH
28385: LD_INT 2
28387: PUSH
28388: LD_INT 3
28390: PUSH
28391: EMPTY
28392: LIST
28393: LIST
28394: LIST
28395: LIST
28396: LIST
28397: LIST
28398: LIST
28399: ST_TO_ADDR
28400: GO 28531
28402: LD_INT 1
28404: DOUBLE
28405: EQUAL
28406: IFTRUE 28410
28408: GO 28472
28410: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
28411: LD_ADDR_VAR 0 3
28415: PUSH
28416: LD_INT 11
28418: PUSH
28419: LD_INT 12
28421: PUSH
28422: LD_INT 13
28424: PUSH
28425: LD_INT 14
28427: PUSH
28428: LD_INT 1
28430: PUSH
28431: LD_INT 2
28433: PUSH
28434: LD_INT 3
28436: PUSH
28437: LD_INT 4
28439: PUSH
28440: LD_INT 5
28442: PUSH
28443: LD_INT 21
28445: PUSH
28446: LD_INT 23
28448: PUSH
28449: LD_INT 22
28451: PUSH
28452: LD_INT 24
28454: PUSH
28455: EMPTY
28456: LIST
28457: LIST
28458: LIST
28459: LIST
28460: LIST
28461: LIST
28462: LIST
28463: LIST
28464: LIST
28465: LIST
28466: LIST
28467: LIST
28468: LIST
28469: ST_TO_ADDR
28470: GO 28531
28472: LD_INT 3
28474: DOUBLE
28475: EQUAL
28476: IFTRUE 28480
28478: GO 28530
28480: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
28481: LD_ADDR_VAR 0 3
28485: PUSH
28486: LD_INT 13
28488: PUSH
28489: LD_INT 14
28491: PUSH
28492: LD_INT 2
28494: PUSH
28495: LD_INT 3
28497: PUSH
28498: LD_INT 4
28500: PUSH
28501: LD_INT 5
28503: PUSH
28504: LD_INT 21
28506: PUSH
28507: LD_INT 22
28509: PUSH
28510: LD_INT 23
28512: PUSH
28513: LD_INT 24
28515: PUSH
28516: EMPTY
28517: LIST
28518: LIST
28519: LIST
28520: LIST
28521: LIST
28522: LIST
28523: LIST
28524: LIST
28525: LIST
28526: LIST
28527: ST_TO_ADDR
28528: GO 28531
28530: POP
// result := ( chassis in result ) ;
28531: LD_ADDR_VAR 0 3
28535: PUSH
28536: LD_VAR 0 1
28540: PUSH
28541: LD_VAR 0 3
28545: IN
28546: ST_TO_ADDR
// end ;
28547: LD_VAR 0 3
28551: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
28552: LD_INT 0
28554: PPUSH
// if not chassis or not weapon then
28555: LD_VAR 0 1
28559: NOT
28560: PUSH
28561: LD_VAR 0 2
28565: NOT
28566: OR
28567: IFFALSE 28571
// exit ;
28569: GO 29633
// case weapon of us_machine_gun :
28571: LD_VAR 0 2
28575: PUSH
28576: LD_INT 2
28578: DOUBLE
28579: EQUAL
28580: IFTRUE 28584
28582: GO 28614
28584: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
28585: LD_ADDR_VAR 0 3
28589: PUSH
28590: LD_INT 1
28592: PUSH
28593: LD_INT 2
28595: PUSH
28596: LD_INT 3
28598: PUSH
28599: LD_INT 4
28601: PUSH
28602: LD_INT 5
28604: PUSH
28605: EMPTY
28606: LIST
28607: LIST
28608: LIST
28609: LIST
28610: LIST
28611: ST_TO_ADDR
28612: GO 29617
28614: LD_INT 3
28616: DOUBLE
28617: EQUAL
28618: IFTRUE 28622
28620: GO 28652
28622: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
28623: LD_ADDR_VAR 0 3
28627: PUSH
28628: LD_INT 1
28630: PUSH
28631: LD_INT 2
28633: PUSH
28634: LD_INT 3
28636: PUSH
28637: LD_INT 4
28639: PUSH
28640: LD_INT 5
28642: PUSH
28643: EMPTY
28644: LIST
28645: LIST
28646: LIST
28647: LIST
28648: LIST
28649: ST_TO_ADDR
28650: GO 29617
28652: LD_INT 11
28654: DOUBLE
28655: EQUAL
28656: IFTRUE 28660
28658: GO 28690
28660: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
28661: LD_ADDR_VAR 0 3
28665: PUSH
28666: LD_INT 1
28668: PUSH
28669: LD_INT 2
28671: PUSH
28672: LD_INT 3
28674: PUSH
28675: LD_INT 4
28677: PUSH
28678: LD_INT 5
28680: PUSH
28681: EMPTY
28682: LIST
28683: LIST
28684: LIST
28685: LIST
28686: LIST
28687: ST_TO_ADDR
28688: GO 29617
28690: LD_INT 4
28692: DOUBLE
28693: EQUAL
28694: IFTRUE 28698
28696: GO 28724
28698: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
28699: LD_ADDR_VAR 0 3
28703: PUSH
28704: LD_INT 2
28706: PUSH
28707: LD_INT 3
28709: PUSH
28710: LD_INT 4
28712: PUSH
28713: LD_INT 5
28715: PUSH
28716: EMPTY
28717: LIST
28718: LIST
28719: LIST
28720: LIST
28721: ST_TO_ADDR
28722: GO 29617
28724: LD_INT 5
28726: DOUBLE
28727: EQUAL
28728: IFTRUE 28732
28730: GO 28758
28732: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
28733: LD_ADDR_VAR 0 3
28737: PUSH
28738: LD_INT 2
28740: PUSH
28741: LD_INT 3
28743: PUSH
28744: LD_INT 4
28746: PUSH
28747: LD_INT 5
28749: PUSH
28750: EMPTY
28751: LIST
28752: LIST
28753: LIST
28754: LIST
28755: ST_TO_ADDR
28756: GO 29617
28758: LD_INT 9
28760: DOUBLE
28761: EQUAL
28762: IFTRUE 28766
28764: GO 28792
28766: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
28767: LD_ADDR_VAR 0 3
28771: PUSH
28772: LD_INT 2
28774: PUSH
28775: LD_INT 3
28777: PUSH
28778: LD_INT 4
28780: PUSH
28781: LD_INT 5
28783: PUSH
28784: EMPTY
28785: LIST
28786: LIST
28787: LIST
28788: LIST
28789: ST_TO_ADDR
28790: GO 29617
28792: LD_INT 7
28794: DOUBLE
28795: EQUAL
28796: IFTRUE 28800
28798: GO 28826
28800: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
28801: LD_ADDR_VAR 0 3
28805: PUSH
28806: LD_INT 2
28808: PUSH
28809: LD_INT 3
28811: PUSH
28812: LD_INT 4
28814: PUSH
28815: LD_INT 5
28817: PUSH
28818: EMPTY
28819: LIST
28820: LIST
28821: LIST
28822: LIST
28823: ST_TO_ADDR
28824: GO 29617
28826: LD_INT 12
28828: DOUBLE
28829: EQUAL
28830: IFTRUE 28834
28832: GO 28860
28834: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
28835: LD_ADDR_VAR 0 3
28839: PUSH
28840: LD_INT 2
28842: PUSH
28843: LD_INT 3
28845: PUSH
28846: LD_INT 4
28848: PUSH
28849: LD_INT 5
28851: PUSH
28852: EMPTY
28853: LIST
28854: LIST
28855: LIST
28856: LIST
28857: ST_TO_ADDR
28858: GO 29617
28860: LD_INT 13
28862: DOUBLE
28863: EQUAL
28864: IFTRUE 28868
28866: GO 28894
28868: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
28869: LD_ADDR_VAR 0 3
28873: PUSH
28874: LD_INT 2
28876: PUSH
28877: LD_INT 3
28879: PUSH
28880: LD_INT 4
28882: PUSH
28883: LD_INT 5
28885: PUSH
28886: EMPTY
28887: LIST
28888: LIST
28889: LIST
28890: LIST
28891: ST_TO_ADDR
28892: GO 29617
28894: LD_INT 14
28896: DOUBLE
28897: EQUAL
28898: IFTRUE 28902
28900: GO 28920
28902: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
28903: LD_ADDR_VAR 0 3
28907: PUSH
28908: LD_INT 4
28910: PUSH
28911: LD_INT 5
28913: PUSH
28914: EMPTY
28915: LIST
28916: LIST
28917: ST_TO_ADDR
28918: GO 29617
28920: LD_INT 6
28922: DOUBLE
28923: EQUAL
28924: IFTRUE 28928
28926: GO 28946
28928: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
28929: LD_ADDR_VAR 0 3
28933: PUSH
28934: LD_INT 4
28936: PUSH
28937: LD_INT 5
28939: PUSH
28940: EMPTY
28941: LIST
28942: LIST
28943: ST_TO_ADDR
28944: GO 29617
28946: LD_INT 10
28948: DOUBLE
28949: EQUAL
28950: IFTRUE 28954
28952: GO 28972
28954: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
28955: LD_ADDR_VAR 0 3
28959: PUSH
28960: LD_INT 4
28962: PUSH
28963: LD_INT 5
28965: PUSH
28966: EMPTY
28967: LIST
28968: LIST
28969: ST_TO_ADDR
28970: GO 29617
28972: LD_INT 22
28974: DOUBLE
28975: EQUAL
28976: IFTRUE 28980
28978: GO 29006
28980: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
28981: LD_ADDR_VAR 0 3
28985: PUSH
28986: LD_INT 11
28988: PUSH
28989: LD_INT 12
28991: PUSH
28992: LD_INT 13
28994: PUSH
28995: LD_INT 14
28997: PUSH
28998: EMPTY
28999: LIST
29000: LIST
29001: LIST
29002: LIST
29003: ST_TO_ADDR
29004: GO 29617
29006: LD_INT 23
29008: DOUBLE
29009: EQUAL
29010: IFTRUE 29014
29012: GO 29040
29014: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
29015: LD_ADDR_VAR 0 3
29019: PUSH
29020: LD_INT 11
29022: PUSH
29023: LD_INT 12
29025: PUSH
29026: LD_INT 13
29028: PUSH
29029: LD_INT 14
29031: PUSH
29032: EMPTY
29033: LIST
29034: LIST
29035: LIST
29036: LIST
29037: ST_TO_ADDR
29038: GO 29617
29040: LD_INT 24
29042: DOUBLE
29043: EQUAL
29044: IFTRUE 29048
29046: GO 29074
29048: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
29049: LD_ADDR_VAR 0 3
29053: PUSH
29054: LD_INT 11
29056: PUSH
29057: LD_INT 12
29059: PUSH
29060: LD_INT 13
29062: PUSH
29063: LD_INT 14
29065: PUSH
29066: EMPTY
29067: LIST
29068: LIST
29069: LIST
29070: LIST
29071: ST_TO_ADDR
29072: GO 29617
29074: LD_INT 30
29076: DOUBLE
29077: EQUAL
29078: IFTRUE 29082
29080: GO 29108
29082: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
29083: LD_ADDR_VAR 0 3
29087: PUSH
29088: LD_INT 11
29090: PUSH
29091: LD_INT 12
29093: PUSH
29094: LD_INT 13
29096: PUSH
29097: LD_INT 14
29099: PUSH
29100: EMPTY
29101: LIST
29102: LIST
29103: LIST
29104: LIST
29105: ST_TO_ADDR
29106: GO 29617
29108: LD_INT 25
29110: DOUBLE
29111: EQUAL
29112: IFTRUE 29116
29114: GO 29134
29116: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
29117: LD_ADDR_VAR 0 3
29121: PUSH
29122: LD_INT 13
29124: PUSH
29125: LD_INT 14
29127: PUSH
29128: EMPTY
29129: LIST
29130: LIST
29131: ST_TO_ADDR
29132: GO 29617
29134: LD_INT 27
29136: DOUBLE
29137: EQUAL
29138: IFTRUE 29142
29140: GO 29160
29142: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
29143: LD_ADDR_VAR 0 3
29147: PUSH
29148: LD_INT 13
29150: PUSH
29151: LD_INT 14
29153: PUSH
29154: EMPTY
29155: LIST
29156: LIST
29157: ST_TO_ADDR
29158: GO 29617
29160: LD_EXP 34
29164: DOUBLE
29165: EQUAL
29166: IFTRUE 29170
29168: GO 29196
29170: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
29171: LD_ADDR_VAR 0 3
29175: PUSH
29176: LD_INT 11
29178: PUSH
29179: LD_INT 12
29181: PUSH
29182: LD_INT 13
29184: PUSH
29185: LD_INT 14
29187: PUSH
29188: EMPTY
29189: LIST
29190: LIST
29191: LIST
29192: LIST
29193: ST_TO_ADDR
29194: GO 29617
29196: LD_INT 28
29198: DOUBLE
29199: EQUAL
29200: IFTRUE 29204
29202: GO 29222
29204: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
29205: LD_ADDR_VAR 0 3
29209: PUSH
29210: LD_INT 13
29212: PUSH
29213: LD_INT 14
29215: PUSH
29216: EMPTY
29217: LIST
29218: LIST
29219: ST_TO_ADDR
29220: GO 29617
29222: LD_INT 29
29224: DOUBLE
29225: EQUAL
29226: IFTRUE 29230
29228: GO 29248
29230: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
29231: LD_ADDR_VAR 0 3
29235: PUSH
29236: LD_INT 13
29238: PUSH
29239: LD_INT 14
29241: PUSH
29242: EMPTY
29243: LIST
29244: LIST
29245: ST_TO_ADDR
29246: GO 29617
29248: LD_INT 31
29250: DOUBLE
29251: EQUAL
29252: IFTRUE 29256
29254: GO 29274
29256: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
29257: LD_ADDR_VAR 0 3
29261: PUSH
29262: LD_INT 13
29264: PUSH
29265: LD_INT 14
29267: PUSH
29268: EMPTY
29269: LIST
29270: LIST
29271: ST_TO_ADDR
29272: GO 29617
29274: LD_INT 26
29276: DOUBLE
29277: EQUAL
29278: IFTRUE 29282
29280: GO 29300
29282: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
29283: LD_ADDR_VAR 0 3
29287: PUSH
29288: LD_INT 13
29290: PUSH
29291: LD_INT 14
29293: PUSH
29294: EMPTY
29295: LIST
29296: LIST
29297: ST_TO_ADDR
29298: GO 29617
29300: LD_INT 42
29302: DOUBLE
29303: EQUAL
29304: IFTRUE 29308
29306: GO 29334
29308: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
29309: LD_ADDR_VAR 0 3
29313: PUSH
29314: LD_INT 21
29316: PUSH
29317: LD_INT 22
29319: PUSH
29320: LD_INT 23
29322: PUSH
29323: LD_INT 24
29325: PUSH
29326: EMPTY
29327: LIST
29328: LIST
29329: LIST
29330: LIST
29331: ST_TO_ADDR
29332: GO 29617
29334: LD_INT 43
29336: DOUBLE
29337: EQUAL
29338: IFTRUE 29342
29340: GO 29368
29342: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
29343: LD_ADDR_VAR 0 3
29347: PUSH
29348: LD_INT 21
29350: PUSH
29351: LD_INT 22
29353: PUSH
29354: LD_INT 23
29356: PUSH
29357: LD_INT 24
29359: PUSH
29360: EMPTY
29361: LIST
29362: LIST
29363: LIST
29364: LIST
29365: ST_TO_ADDR
29366: GO 29617
29368: LD_INT 44
29370: DOUBLE
29371: EQUAL
29372: IFTRUE 29376
29374: GO 29402
29376: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
29377: LD_ADDR_VAR 0 3
29381: PUSH
29382: LD_INT 21
29384: PUSH
29385: LD_INT 22
29387: PUSH
29388: LD_INT 23
29390: PUSH
29391: LD_INT 24
29393: PUSH
29394: EMPTY
29395: LIST
29396: LIST
29397: LIST
29398: LIST
29399: ST_TO_ADDR
29400: GO 29617
29402: LD_INT 45
29404: DOUBLE
29405: EQUAL
29406: IFTRUE 29410
29408: GO 29436
29410: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
29411: LD_ADDR_VAR 0 3
29415: PUSH
29416: LD_INT 21
29418: PUSH
29419: LD_INT 22
29421: PUSH
29422: LD_INT 23
29424: PUSH
29425: LD_INT 24
29427: PUSH
29428: EMPTY
29429: LIST
29430: LIST
29431: LIST
29432: LIST
29433: ST_TO_ADDR
29434: GO 29617
29436: LD_INT 49
29438: DOUBLE
29439: EQUAL
29440: IFTRUE 29444
29442: GO 29470
29444: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
29445: LD_ADDR_VAR 0 3
29449: PUSH
29450: LD_INT 21
29452: PUSH
29453: LD_INT 22
29455: PUSH
29456: LD_INT 23
29458: PUSH
29459: LD_INT 24
29461: PUSH
29462: EMPTY
29463: LIST
29464: LIST
29465: LIST
29466: LIST
29467: ST_TO_ADDR
29468: GO 29617
29470: LD_INT 51
29472: DOUBLE
29473: EQUAL
29474: IFTRUE 29478
29476: GO 29504
29478: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
29479: LD_ADDR_VAR 0 3
29483: PUSH
29484: LD_INT 21
29486: PUSH
29487: LD_INT 22
29489: PUSH
29490: LD_INT 23
29492: PUSH
29493: LD_INT 24
29495: PUSH
29496: EMPTY
29497: LIST
29498: LIST
29499: LIST
29500: LIST
29501: ST_TO_ADDR
29502: GO 29617
29504: LD_INT 52
29506: DOUBLE
29507: EQUAL
29508: IFTRUE 29512
29510: GO 29538
29512: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
29513: LD_ADDR_VAR 0 3
29517: PUSH
29518: LD_INT 21
29520: PUSH
29521: LD_INT 22
29523: PUSH
29524: LD_INT 23
29526: PUSH
29527: LD_INT 24
29529: PUSH
29530: EMPTY
29531: LIST
29532: LIST
29533: LIST
29534: LIST
29535: ST_TO_ADDR
29536: GO 29617
29538: LD_INT 53
29540: DOUBLE
29541: EQUAL
29542: IFTRUE 29546
29544: GO 29564
29546: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
29547: LD_ADDR_VAR 0 3
29551: PUSH
29552: LD_INT 23
29554: PUSH
29555: LD_INT 24
29557: PUSH
29558: EMPTY
29559: LIST
29560: LIST
29561: ST_TO_ADDR
29562: GO 29617
29564: LD_INT 46
29566: DOUBLE
29567: EQUAL
29568: IFTRUE 29572
29570: GO 29590
29572: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
29573: LD_ADDR_VAR 0 3
29577: PUSH
29578: LD_INT 23
29580: PUSH
29581: LD_INT 24
29583: PUSH
29584: EMPTY
29585: LIST
29586: LIST
29587: ST_TO_ADDR
29588: GO 29617
29590: LD_INT 47
29592: DOUBLE
29593: EQUAL
29594: IFTRUE 29598
29596: GO 29616
29598: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
29599: LD_ADDR_VAR 0 3
29603: PUSH
29604: LD_INT 23
29606: PUSH
29607: LD_INT 24
29609: PUSH
29610: EMPTY
29611: LIST
29612: LIST
29613: ST_TO_ADDR
29614: GO 29617
29616: POP
// result := ( chassis in result ) ;
29617: LD_ADDR_VAR 0 3
29621: PUSH
29622: LD_VAR 0 1
29626: PUSH
29627: LD_VAR 0 3
29631: IN
29632: ST_TO_ADDR
// end ;
29633: LD_VAR 0 3
29637: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
29638: LD_INT 0
29640: PPUSH
29641: PPUSH
29642: PPUSH
29643: PPUSH
29644: PPUSH
29645: PPUSH
29646: PPUSH
// result := array ;
29647: LD_ADDR_VAR 0 5
29651: PUSH
29652: LD_VAR 0 1
29656: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
29657: LD_VAR 0 1
29661: NOT
29662: PUSH
29663: LD_VAR 0 2
29667: NOT
29668: OR
29669: PUSH
29670: LD_VAR 0 3
29674: NOT
29675: OR
29676: PUSH
29677: LD_VAR 0 2
29681: PUSH
29682: LD_VAR 0 1
29686: GREATER
29687: OR
29688: PUSH
29689: LD_VAR 0 3
29693: PUSH
29694: LD_VAR 0 1
29698: GREATER
29699: OR
29700: IFFALSE 29704
// exit ;
29702: GO 30000
// if direction then
29704: LD_VAR 0 4
29708: IFFALSE 29772
// begin d := 1 ;
29710: LD_ADDR_VAR 0 9
29714: PUSH
29715: LD_INT 1
29717: ST_TO_ADDR
// if i_from > i_to then
29718: LD_VAR 0 2
29722: PUSH
29723: LD_VAR 0 3
29727: GREATER
29728: IFFALSE 29754
// length := ( array - i_from ) + i_to else
29730: LD_ADDR_VAR 0 11
29734: PUSH
29735: LD_VAR 0 1
29739: PUSH
29740: LD_VAR 0 2
29744: MINUS
29745: PUSH
29746: LD_VAR 0 3
29750: PLUS
29751: ST_TO_ADDR
29752: GO 29770
// length := i_to - i_from ;
29754: LD_ADDR_VAR 0 11
29758: PUSH
29759: LD_VAR 0 3
29763: PUSH
29764: LD_VAR 0 2
29768: MINUS
29769: ST_TO_ADDR
// end else
29770: GO 29833
// begin d := - 1 ;
29772: LD_ADDR_VAR 0 9
29776: PUSH
29777: LD_INT 1
29779: NEG
29780: ST_TO_ADDR
// if i_from > i_to then
29781: LD_VAR 0 2
29785: PUSH
29786: LD_VAR 0 3
29790: GREATER
29791: IFFALSE 29811
// length := i_from - i_to else
29793: LD_ADDR_VAR 0 11
29797: PUSH
29798: LD_VAR 0 2
29802: PUSH
29803: LD_VAR 0 3
29807: MINUS
29808: ST_TO_ADDR
29809: GO 29833
// length := ( array - i_to ) + i_from ;
29811: LD_ADDR_VAR 0 11
29815: PUSH
29816: LD_VAR 0 1
29820: PUSH
29821: LD_VAR 0 3
29825: MINUS
29826: PUSH
29827: LD_VAR 0 2
29831: PLUS
29832: ST_TO_ADDR
// end ; if not length then
29833: LD_VAR 0 11
29837: NOT
29838: IFFALSE 29842
// exit ;
29840: GO 30000
// tmp := array ;
29842: LD_ADDR_VAR 0 10
29846: PUSH
29847: LD_VAR 0 1
29851: ST_TO_ADDR
// for i = 1 to length do
29852: LD_ADDR_VAR 0 6
29856: PUSH
29857: DOUBLE
29858: LD_INT 1
29860: DEC
29861: ST_TO_ADDR
29862: LD_VAR 0 11
29866: PUSH
29867: FOR_TO
29868: IFFALSE 29988
// begin for j = 1 to array do
29870: LD_ADDR_VAR 0 7
29874: PUSH
29875: DOUBLE
29876: LD_INT 1
29878: DEC
29879: ST_TO_ADDR
29880: LD_VAR 0 1
29884: PUSH
29885: FOR_TO
29886: IFFALSE 29974
// begin k := j + d ;
29888: LD_ADDR_VAR 0 8
29892: PUSH
29893: LD_VAR 0 7
29897: PUSH
29898: LD_VAR 0 9
29902: PLUS
29903: ST_TO_ADDR
// if k > array then
29904: LD_VAR 0 8
29908: PUSH
29909: LD_VAR 0 1
29913: GREATER
29914: IFFALSE 29924
// k := 1 ;
29916: LD_ADDR_VAR 0 8
29920: PUSH
29921: LD_INT 1
29923: ST_TO_ADDR
// if not k then
29924: LD_VAR 0 8
29928: NOT
29929: IFFALSE 29941
// k := array ;
29931: LD_ADDR_VAR 0 8
29935: PUSH
29936: LD_VAR 0 1
29940: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
29941: LD_ADDR_VAR 0 10
29945: PUSH
29946: LD_VAR 0 10
29950: PPUSH
29951: LD_VAR 0 8
29955: PPUSH
29956: LD_VAR 0 1
29960: PUSH
29961: LD_VAR 0 7
29965: ARRAY
29966: PPUSH
29967: CALL_OW 1
29971: ST_TO_ADDR
// end ;
29972: GO 29885
29974: POP
29975: POP
// array := tmp ;
29976: LD_ADDR_VAR 0 1
29980: PUSH
29981: LD_VAR 0 10
29985: ST_TO_ADDR
// end ;
29986: GO 29867
29988: POP
29989: POP
// result := array ;
29990: LD_ADDR_VAR 0 5
29994: PUSH
29995: LD_VAR 0 1
29999: ST_TO_ADDR
// end ;
30000: LD_VAR 0 5
30004: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
30005: LD_INT 0
30007: PPUSH
30008: PPUSH
// result := 0 ;
30009: LD_ADDR_VAR 0 3
30013: PUSH
30014: LD_INT 0
30016: ST_TO_ADDR
// if not array or not value in array then
30017: LD_VAR 0 1
30021: NOT
30022: PUSH
30023: LD_VAR 0 2
30027: PUSH
30028: LD_VAR 0 1
30032: IN
30033: NOT
30034: OR
30035: IFFALSE 30039
// exit ;
30037: GO 30093
// for i = 1 to array do
30039: LD_ADDR_VAR 0 4
30043: PUSH
30044: DOUBLE
30045: LD_INT 1
30047: DEC
30048: ST_TO_ADDR
30049: LD_VAR 0 1
30053: PUSH
30054: FOR_TO
30055: IFFALSE 30091
// if value = array [ i ] then
30057: LD_VAR 0 2
30061: PUSH
30062: LD_VAR 0 1
30066: PUSH
30067: LD_VAR 0 4
30071: ARRAY
30072: EQUAL
30073: IFFALSE 30089
// begin result := i ;
30075: LD_ADDR_VAR 0 3
30079: PUSH
30080: LD_VAR 0 4
30084: ST_TO_ADDR
// exit ;
30085: POP
30086: POP
30087: GO 30093
// end ;
30089: GO 30054
30091: POP
30092: POP
// end ;
30093: LD_VAR 0 3
30097: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
30098: LD_INT 0
30100: PPUSH
// vc_chassis := chassis ;
30101: LD_ADDR_OWVAR 37
30105: PUSH
30106: LD_VAR 0 1
30110: ST_TO_ADDR
// vc_engine := engine ;
30111: LD_ADDR_OWVAR 39
30115: PUSH
30116: LD_VAR 0 2
30120: ST_TO_ADDR
// vc_control := control ;
30121: LD_ADDR_OWVAR 38
30125: PUSH
30126: LD_VAR 0 3
30130: ST_TO_ADDR
// vc_weapon := weapon ;
30131: LD_ADDR_OWVAR 40
30135: PUSH
30136: LD_VAR 0 4
30140: ST_TO_ADDR
// vc_fuel_battery := fuel ;
30141: LD_ADDR_OWVAR 41
30145: PUSH
30146: LD_VAR 0 5
30150: ST_TO_ADDR
// end ;
30151: LD_VAR 0 6
30155: RET
// export function WantPlant ( unit ) ; var task ; begin
30156: LD_INT 0
30158: PPUSH
30159: PPUSH
// result := false ;
30160: LD_ADDR_VAR 0 2
30164: PUSH
30165: LD_INT 0
30167: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
30168: LD_ADDR_VAR 0 3
30172: PUSH
30173: LD_VAR 0 1
30177: PPUSH
30178: CALL_OW 437
30182: ST_TO_ADDR
// if task then
30183: LD_VAR 0 3
30187: IFFALSE 30215
// if task [ 1 ] [ 1 ] = p then
30189: LD_VAR 0 3
30193: PUSH
30194: LD_INT 1
30196: ARRAY
30197: PUSH
30198: LD_INT 1
30200: ARRAY
30201: PUSH
30202: LD_STRING p
30204: EQUAL
30205: IFFALSE 30215
// result := true ;
30207: LD_ADDR_VAR 0 2
30211: PUSH
30212: LD_INT 1
30214: ST_TO_ADDR
// end ;
30215: LD_VAR 0 2
30219: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
30220: LD_INT 0
30222: PPUSH
30223: PPUSH
30224: PPUSH
30225: PPUSH
// if pos < 1 then
30226: LD_VAR 0 2
30230: PUSH
30231: LD_INT 1
30233: LESS
30234: IFFALSE 30238
// exit ;
30236: GO 30541
// if pos = 1 then
30238: LD_VAR 0 2
30242: PUSH
30243: LD_INT 1
30245: EQUAL
30246: IFFALSE 30279
// result := Replace ( arr , pos [ 1 ] , value ) else
30248: LD_ADDR_VAR 0 4
30252: PUSH
30253: LD_VAR 0 1
30257: PPUSH
30258: LD_VAR 0 2
30262: PUSH
30263: LD_INT 1
30265: ARRAY
30266: PPUSH
30267: LD_VAR 0 3
30271: PPUSH
30272: CALL_OW 1
30276: ST_TO_ADDR
30277: GO 30541
// begin tmp := arr ;
30279: LD_ADDR_VAR 0 6
30283: PUSH
30284: LD_VAR 0 1
30288: ST_TO_ADDR
// s_arr := [ tmp ] ;
30289: LD_ADDR_VAR 0 7
30293: PUSH
30294: LD_VAR 0 6
30298: PUSH
30299: EMPTY
30300: LIST
30301: ST_TO_ADDR
// for i = 1 to pos - 1 do
30302: LD_ADDR_VAR 0 5
30306: PUSH
30307: DOUBLE
30308: LD_INT 1
30310: DEC
30311: ST_TO_ADDR
30312: LD_VAR 0 2
30316: PUSH
30317: LD_INT 1
30319: MINUS
30320: PUSH
30321: FOR_TO
30322: IFFALSE 30367
// begin tmp := tmp [ pos [ i ] ] ;
30324: LD_ADDR_VAR 0 6
30328: PUSH
30329: LD_VAR 0 6
30333: PUSH
30334: LD_VAR 0 2
30338: PUSH
30339: LD_VAR 0 5
30343: ARRAY
30344: ARRAY
30345: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
30346: LD_ADDR_VAR 0 7
30350: PUSH
30351: LD_VAR 0 7
30355: PUSH
30356: LD_VAR 0 6
30360: PUSH
30361: EMPTY
30362: LIST
30363: ADD
30364: ST_TO_ADDR
// end ;
30365: GO 30321
30367: POP
30368: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
30369: LD_ADDR_VAR 0 6
30373: PUSH
30374: LD_VAR 0 6
30378: PPUSH
30379: LD_VAR 0 2
30383: PUSH
30384: LD_VAR 0 2
30388: ARRAY
30389: PPUSH
30390: LD_VAR 0 3
30394: PPUSH
30395: CALL_OW 1
30399: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
30400: LD_ADDR_VAR 0 7
30404: PUSH
30405: LD_VAR 0 7
30409: PPUSH
30410: LD_VAR 0 7
30414: PPUSH
30415: LD_VAR 0 6
30419: PPUSH
30420: CALL_OW 1
30424: ST_TO_ADDR
// for i = s_arr downto 2 do
30425: LD_ADDR_VAR 0 5
30429: PUSH
30430: DOUBLE
30431: LD_VAR 0 7
30435: INC
30436: ST_TO_ADDR
30437: LD_INT 2
30439: PUSH
30440: FOR_DOWNTO
30441: IFFALSE 30525
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
30443: LD_ADDR_VAR 0 6
30447: PUSH
30448: LD_VAR 0 7
30452: PUSH
30453: LD_VAR 0 5
30457: PUSH
30458: LD_INT 1
30460: MINUS
30461: ARRAY
30462: PPUSH
30463: LD_VAR 0 2
30467: PUSH
30468: LD_VAR 0 5
30472: PUSH
30473: LD_INT 1
30475: MINUS
30476: ARRAY
30477: PPUSH
30478: LD_VAR 0 7
30482: PUSH
30483: LD_VAR 0 5
30487: ARRAY
30488: PPUSH
30489: CALL_OW 1
30493: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
30494: LD_ADDR_VAR 0 7
30498: PUSH
30499: LD_VAR 0 7
30503: PPUSH
30504: LD_VAR 0 5
30508: PUSH
30509: LD_INT 1
30511: MINUS
30512: PPUSH
30513: LD_VAR 0 6
30517: PPUSH
30518: CALL_OW 1
30522: ST_TO_ADDR
// end ;
30523: GO 30440
30525: POP
30526: POP
// result := s_arr [ 1 ] ;
30527: LD_ADDR_VAR 0 4
30531: PUSH
30532: LD_VAR 0 7
30536: PUSH
30537: LD_INT 1
30539: ARRAY
30540: ST_TO_ADDR
// end ; end ;
30541: LD_VAR 0 4
30545: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
30546: LD_INT 0
30548: PPUSH
30549: PPUSH
// if not list then
30550: LD_VAR 0 1
30554: NOT
30555: IFFALSE 30559
// exit ;
30557: GO 30650
// i := list [ pos1 ] ;
30559: LD_ADDR_VAR 0 5
30563: PUSH
30564: LD_VAR 0 1
30568: PUSH
30569: LD_VAR 0 2
30573: ARRAY
30574: ST_TO_ADDR
// if not i then
30575: LD_VAR 0 5
30579: NOT
30580: IFFALSE 30584
// exit ;
30582: GO 30650
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
30584: LD_ADDR_VAR 0 1
30588: PUSH
30589: LD_VAR 0 1
30593: PPUSH
30594: LD_VAR 0 2
30598: PPUSH
30599: LD_VAR 0 1
30603: PUSH
30604: LD_VAR 0 3
30608: ARRAY
30609: PPUSH
30610: CALL_OW 1
30614: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
30615: LD_ADDR_VAR 0 1
30619: PUSH
30620: LD_VAR 0 1
30624: PPUSH
30625: LD_VAR 0 3
30629: PPUSH
30630: LD_VAR 0 5
30634: PPUSH
30635: CALL_OW 1
30639: ST_TO_ADDR
// result := list ;
30640: LD_ADDR_VAR 0 4
30644: PUSH
30645: LD_VAR 0 1
30649: ST_TO_ADDR
// end ;
30650: LD_VAR 0 4
30654: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
30655: LD_INT 0
30657: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
30658: LD_ADDR_VAR 0 5
30662: PUSH
30663: LD_VAR 0 1
30667: PPUSH
30668: CALL_OW 250
30672: PPUSH
30673: LD_VAR 0 1
30677: PPUSH
30678: CALL_OW 251
30682: PPUSH
30683: LD_VAR 0 2
30687: PPUSH
30688: LD_VAR 0 3
30692: PPUSH
30693: LD_VAR 0 4
30697: PPUSH
30698: CALL 30708 0 5
30702: ST_TO_ADDR
// end ;
30703: LD_VAR 0 5
30707: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
30708: LD_INT 0
30710: PPUSH
30711: PPUSH
30712: PPUSH
30713: PPUSH
// if not list then
30714: LD_VAR 0 3
30718: NOT
30719: IFFALSE 30723
// exit ;
30721: GO 31111
// result := [ ] ;
30723: LD_ADDR_VAR 0 6
30727: PUSH
30728: EMPTY
30729: ST_TO_ADDR
// for i in list do
30730: LD_ADDR_VAR 0 7
30734: PUSH
30735: LD_VAR 0 3
30739: PUSH
30740: FOR_IN
30741: IFFALSE 30943
// begin tmp := GetDistUnitXY ( i , x , y ) ;
30743: LD_ADDR_VAR 0 9
30747: PUSH
30748: LD_VAR 0 7
30752: PPUSH
30753: LD_VAR 0 1
30757: PPUSH
30758: LD_VAR 0 2
30762: PPUSH
30763: CALL_OW 297
30767: ST_TO_ADDR
// if not result then
30768: LD_VAR 0 6
30772: NOT
30773: IFFALSE 30799
// result := [ [ i , tmp ] ] else
30775: LD_ADDR_VAR 0 6
30779: PUSH
30780: LD_VAR 0 7
30784: PUSH
30785: LD_VAR 0 9
30789: PUSH
30790: EMPTY
30791: LIST
30792: LIST
30793: PUSH
30794: EMPTY
30795: LIST
30796: ST_TO_ADDR
30797: GO 30941
// begin if result [ result ] [ 2 ] < tmp then
30799: LD_VAR 0 6
30803: PUSH
30804: LD_VAR 0 6
30808: ARRAY
30809: PUSH
30810: LD_INT 2
30812: ARRAY
30813: PUSH
30814: LD_VAR 0 9
30818: LESS
30819: IFFALSE 30861
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
30821: LD_ADDR_VAR 0 6
30825: PUSH
30826: LD_VAR 0 6
30830: PPUSH
30831: LD_VAR 0 6
30835: PUSH
30836: LD_INT 1
30838: PLUS
30839: PPUSH
30840: LD_VAR 0 7
30844: PUSH
30845: LD_VAR 0 9
30849: PUSH
30850: EMPTY
30851: LIST
30852: LIST
30853: PPUSH
30854: CALL_OW 2
30858: ST_TO_ADDR
30859: GO 30941
// for j = 1 to result do
30861: LD_ADDR_VAR 0 8
30865: PUSH
30866: DOUBLE
30867: LD_INT 1
30869: DEC
30870: ST_TO_ADDR
30871: LD_VAR 0 6
30875: PUSH
30876: FOR_TO
30877: IFFALSE 30939
// begin if tmp < result [ j ] [ 2 ] then
30879: LD_VAR 0 9
30883: PUSH
30884: LD_VAR 0 6
30888: PUSH
30889: LD_VAR 0 8
30893: ARRAY
30894: PUSH
30895: LD_INT 2
30897: ARRAY
30898: LESS
30899: IFFALSE 30937
// begin result := Insert ( result , j , [ i , tmp ] ) ;
30901: LD_ADDR_VAR 0 6
30905: PUSH
30906: LD_VAR 0 6
30910: PPUSH
30911: LD_VAR 0 8
30915: PPUSH
30916: LD_VAR 0 7
30920: PUSH
30921: LD_VAR 0 9
30925: PUSH
30926: EMPTY
30927: LIST
30928: LIST
30929: PPUSH
30930: CALL_OW 2
30934: ST_TO_ADDR
// break ;
30935: GO 30939
// end ; end ;
30937: GO 30876
30939: POP
30940: POP
// end ; end ;
30941: GO 30740
30943: POP
30944: POP
// if result and not asc then
30945: LD_VAR 0 6
30949: PUSH
30950: LD_VAR 0 4
30954: NOT
30955: AND
30956: IFFALSE 31031
// begin tmp := result ;
30958: LD_ADDR_VAR 0 9
30962: PUSH
30963: LD_VAR 0 6
30967: ST_TO_ADDR
// for i = tmp downto 1 do
30968: LD_ADDR_VAR 0 7
30972: PUSH
30973: DOUBLE
30974: LD_VAR 0 9
30978: INC
30979: ST_TO_ADDR
30980: LD_INT 1
30982: PUSH
30983: FOR_DOWNTO
30984: IFFALSE 31029
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
30986: LD_ADDR_VAR 0 6
30990: PUSH
30991: LD_VAR 0 6
30995: PPUSH
30996: LD_VAR 0 9
31000: PUSH
31001: LD_VAR 0 7
31005: MINUS
31006: PUSH
31007: LD_INT 1
31009: PLUS
31010: PPUSH
31011: LD_VAR 0 9
31015: PUSH
31016: LD_VAR 0 7
31020: ARRAY
31021: PPUSH
31022: CALL_OW 1
31026: ST_TO_ADDR
31027: GO 30983
31029: POP
31030: POP
// end ; tmp := [ ] ;
31031: LD_ADDR_VAR 0 9
31035: PUSH
31036: EMPTY
31037: ST_TO_ADDR
// if mode then
31038: LD_VAR 0 5
31042: IFFALSE 31111
// begin for i = 1 to result do
31044: LD_ADDR_VAR 0 7
31048: PUSH
31049: DOUBLE
31050: LD_INT 1
31052: DEC
31053: ST_TO_ADDR
31054: LD_VAR 0 6
31058: PUSH
31059: FOR_TO
31060: IFFALSE 31099
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
31062: LD_ADDR_VAR 0 9
31066: PUSH
31067: LD_VAR 0 9
31071: PPUSH
31072: LD_VAR 0 7
31076: PPUSH
31077: LD_VAR 0 6
31081: PUSH
31082: LD_VAR 0 7
31086: ARRAY
31087: PUSH
31088: LD_INT 1
31090: ARRAY
31091: PPUSH
31092: CALL_OW 1
31096: ST_TO_ADDR
31097: GO 31059
31099: POP
31100: POP
// result := tmp ;
31101: LD_ADDR_VAR 0 6
31105: PUSH
31106: LD_VAR 0 9
31110: ST_TO_ADDR
// end ; end ;
31111: LD_VAR 0 6
31115: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
31116: LD_INT 0
31118: PPUSH
31119: PPUSH
31120: PPUSH
31121: PPUSH
31122: PPUSH
31123: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
31124: LD_ADDR_VAR 0 5
31128: PUSH
31129: LD_INT 0
31131: PUSH
31132: LD_INT 0
31134: PUSH
31135: LD_INT 0
31137: PUSH
31138: EMPTY
31139: PUSH
31140: EMPTY
31141: LIST
31142: LIST
31143: LIST
31144: LIST
31145: ST_TO_ADDR
// if not x or not y then
31146: LD_VAR 0 2
31150: NOT
31151: PUSH
31152: LD_VAR 0 3
31156: NOT
31157: OR
31158: IFFALSE 31162
// exit ;
31160: GO 32814
// if not range then
31162: LD_VAR 0 4
31166: NOT
31167: IFFALSE 31177
// range := 10 ;
31169: LD_ADDR_VAR 0 4
31173: PUSH
31174: LD_INT 10
31176: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
31177: LD_ADDR_VAR 0 8
31181: PUSH
31182: LD_INT 81
31184: PUSH
31185: LD_VAR 0 1
31189: PUSH
31190: EMPTY
31191: LIST
31192: LIST
31193: PUSH
31194: LD_INT 92
31196: PUSH
31197: LD_VAR 0 2
31201: PUSH
31202: LD_VAR 0 3
31206: PUSH
31207: LD_VAR 0 4
31211: PUSH
31212: EMPTY
31213: LIST
31214: LIST
31215: LIST
31216: LIST
31217: PUSH
31218: LD_INT 3
31220: PUSH
31221: LD_INT 21
31223: PUSH
31224: LD_INT 3
31226: PUSH
31227: EMPTY
31228: LIST
31229: LIST
31230: PUSH
31231: EMPTY
31232: LIST
31233: LIST
31234: PUSH
31235: EMPTY
31236: LIST
31237: LIST
31238: LIST
31239: PPUSH
31240: CALL_OW 69
31244: ST_TO_ADDR
// if not tmp then
31245: LD_VAR 0 8
31249: NOT
31250: IFFALSE 31254
// exit ;
31252: GO 32814
// for i in tmp do
31254: LD_ADDR_VAR 0 6
31258: PUSH
31259: LD_VAR 0 8
31263: PUSH
31264: FOR_IN
31265: IFFALSE 32789
// begin points := [ 0 , 0 , 0 ] ;
31267: LD_ADDR_VAR 0 9
31271: PUSH
31272: LD_INT 0
31274: PUSH
31275: LD_INT 0
31277: PUSH
31278: LD_INT 0
31280: PUSH
31281: EMPTY
31282: LIST
31283: LIST
31284: LIST
31285: ST_TO_ADDR
// bpoints := 1 ;
31286: LD_ADDR_VAR 0 10
31290: PUSH
31291: LD_INT 1
31293: ST_TO_ADDR
// case GetType ( i ) of unit_human :
31294: LD_VAR 0 6
31298: PPUSH
31299: CALL_OW 247
31303: PUSH
31304: LD_INT 1
31306: DOUBLE
31307: EQUAL
31308: IFTRUE 31312
31310: GO 31890
31312: POP
// begin if GetClass ( i ) = 1 then
31313: LD_VAR 0 6
31317: PPUSH
31318: CALL_OW 257
31322: PUSH
31323: LD_INT 1
31325: EQUAL
31326: IFFALSE 31347
// points := [ 10 , 5 , 3 ] ;
31328: LD_ADDR_VAR 0 9
31332: PUSH
31333: LD_INT 10
31335: PUSH
31336: LD_INT 5
31338: PUSH
31339: LD_INT 3
31341: PUSH
31342: EMPTY
31343: LIST
31344: LIST
31345: LIST
31346: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
31347: LD_VAR 0 6
31351: PPUSH
31352: CALL_OW 257
31356: PUSH
31357: LD_INT 2
31359: PUSH
31360: LD_INT 3
31362: PUSH
31363: LD_INT 4
31365: PUSH
31366: EMPTY
31367: LIST
31368: LIST
31369: LIST
31370: IN
31371: IFFALSE 31392
// points := [ 3 , 2 , 1 ] ;
31373: LD_ADDR_VAR 0 9
31377: PUSH
31378: LD_INT 3
31380: PUSH
31381: LD_INT 2
31383: PUSH
31384: LD_INT 1
31386: PUSH
31387: EMPTY
31388: LIST
31389: LIST
31390: LIST
31391: ST_TO_ADDR
// if GetClass ( i ) = 5 then
31392: LD_VAR 0 6
31396: PPUSH
31397: CALL_OW 257
31401: PUSH
31402: LD_INT 5
31404: EQUAL
31405: IFFALSE 31426
// points := [ 130 , 5 , 2 ] ;
31407: LD_ADDR_VAR 0 9
31411: PUSH
31412: LD_INT 130
31414: PUSH
31415: LD_INT 5
31417: PUSH
31418: LD_INT 2
31420: PUSH
31421: EMPTY
31422: LIST
31423: LIST
31424: LIST
31425: ST_TO_ADDR
// if GetClass ( i ) = 8 then
31426: LD_VAR 0 6
31430: PPUSH
31431: CALL_OW 257
31435: PUSH
31436: LD_INT 8
31438: EQUAL
31439: IFFALSE 31460
// points := [ 35 , 35 , 30 ] ;
31441: LD_ADDR_VAR 0 9
31445: PUSH
31446: LD_INT 35
31448: PUSH
31449: LD_INT 35
31451: PUSH
31452: LD_INT 30
31454: PUSH
31455: EMPTY
31456: LIST
31457: LIST
31458: LIST
31459: ST_TO_ADDR
// if GetClass ( i ) = 9 then
31460: LD_VAR 0 6
31464: PPUSH
31465: CALL_OW 257
31469: PUSH
31470: LD_INT 9
31472: EQUAL
31473: IFFALSE 31494
// points := [ 20 , 55 , 40 ] ;
31475: LD_ADDR_VAR 0 9
31479: PUSH
31480: LD_INT 20
31482: PUSH
31483: LD_INT 55
31485: PUSH
31486: LD_INT 40
31488: PUSH
31489: EMPTY
31490: LIST
31491: LIST
31492: LIST
31493: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
31494: LD_VAR 0 6
31498: PPUSH
31499: CALL_OW 257
31503: PUSH
31504: LD_INT 12
31506: PUSH
31507: LD_INT 16
31509: PUSH
31510: EMPTY
31511: LIST
31512: LIST
31513: IN
31514: IFFALSE 31535
// points := [ 5 , 3 , 2 ] ;
31516: LD_ADDR_VAR 0 9
31520: PUSH
31521: LD_INT 5
31523: PUSH
31524: LD_INT 3
31526: PUSH
31527: LD_INT 2
31529: PUSH
31530: EMPTY
31531: LIST
31532: LIST
31533: LIST
31534: ST_TO_ADDR
// if GetClass ( i ) = 17 then
31535: LD_VAR 0 6
31539: PPUSH
31540: CALL_OW 257
31544: PUSH
31545: LD_INT 17
31547: EQUAL
31548: IFFALSE 31569
// points := [ 100 , 50 , 75 ] ;
31550: LD_ADDR_VAR 0 9
31554: PUSH
31555: LD_INT 100
31557: PUSH
31558: LD_INT 50
31560: PUSH
31561: LD_INT 75
31563: PUSH
31564: EMPTY
31565: LIST
31566: LIST
31567: LIST
31568: ST_TO_ADDR
// if GetClass ( i ) = 15 then
31569: LD_VAR 0 6
31573: PPUSH
31574: CALL_OW 257
31578: PUSH
31579: LD_INT 15
31581: EQUAL
31582: IFFALSE 31603
// points := [ 10 , 5 , 3 ] ;
31584: LD_ADDR_VAR 0 9
31588: PUSH
31589: LD_INT 10
31591: PUSH
31592: LD_INT 5
31594: PUSH
31595: LD_INT 3
31597: PUSH
31598: EMPTY
31599: LIST
31600: LIST
31601: LIST
31602: ST_TO_ADDR
// if GetClass ( i ) = 14 then
31603: LD_VAR 0 6
31607: PPUSH
31608: CALL_OW 257
31612: PUSH
31613: LD_INT 14
31615: EQUAL
31616: IFFALSE 31637
// points := [ 10 , 0 , 0 ] ;
31618: LD_ADDR_VAR 0 9
31622: PUSH
31623: LD_INT 10
31625: PUSH
31626: LD_INT 0
31628: PUSH
31629: LD_INT 0
31631: PUSH
31632: EMPTY
31633: LIST
31634: LIST
31635: LIST
31636: ST_TO_ADDR
// if GetClass ( i ) = 11 then
31637: LD_VAR 0 6
31641: PPUSH
31642: CALL_OW 257
31646: PUSH
31647: LD_INT 11
31649: EQUAL
31650: IFFALSE 31671
// points := [ 30 , 10 , 5 ] ;
31652: LD_ADDR_VAR 0 9
31656: PUSH
31657: LD_INT 30
31659: PUSH
31660: LD_INT 10
31662: PUSH
31663: LD_INT 5
31665: PUSH
31666: EMPTY
31667: LIST
31668: LIST
31669: LIST
31670: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
31671: LD_VAR 0 1
31675: PPUSH
31676: LD_INT 5
31678: PPUSH
31679: CALL_OW 321
31683: PUSH
31684: LD_INT 2
31686: EQUAL
31687: IFFALSE 31704
// bpoints := bpoints * 1.8 ;
31689: LD_ADDR_VAR 0 10
31693: PUSH
31694: LD_VAR 0 10
31698: PUSH
31699: LD_REAL  1.80000000000000E+0000
31702: MUL
31703: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
31704: LD_VAR 0 6
31708: PPUSH
31709: CALL_OW 257
31713: PUSH
31714: LD_INT 1
31716: PUSH
31717: LD_INT 2
31719: PUSH
31720: LD_INT 3
31722: PUSH
31723: LD_INT 4
31725: PUSH
31726: EMPTY
31727: LIST
31728: LIST
31729: LIST
31730: LIST
31731: IN
31732: PUSH
31733: LD_VAR 0 1
31737: PPUSH
31738: LD_INT 51
31740: PPUSH
31741: CALL_OW 321
31745: PUSH
31746: LD_INT 2
31748: EQUAL
31749: AND
31750: IFFALSE 31767
// bpoints := bpoints * 1.2 ;
31752: LD_ADDR_VAR 0 10
31756: PUSH
31757: LD_VAR 0 10
31761: PUSH
31762: LD_REAL  1.20000000000000E+0000
31765: MUL
31766: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
31767: LD_VAR 0 6
31771: PPUSH
31772: CALL_OW 257
31776: PUSH
31777: LD_INT 5
31779: PUSH
31780: LD_INT 7
31782: PUSH
31783: LD_INT 9
31785: PUSH
31786: EMPTY
31787: LIST
31788: LIST
31789: LIST
31790: IN
31791: PUSH
31792: LD_VAR 0 1
31796: PPUSH
31797: LD_INT 52
31799: PPUSH
31800: CALL_OW 321
31804: PUSH
31805: LD_INT 2
31807: EQUAL
31808: AND
31809: IFFALSE 31826
// bpoints := bpoints * 1.5 ;
31811: LD_ADDR_VAR 0 10
31815: PUSH
31816: LD_VAR 0 10
31820: PUSH
31821: LD_REAL  1.50000000000000E+0000
31824: MUL
31825: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
31826: LD_VAR 0 1
31830: PPUSH
31831: LD_INT 66
31833: PPUSH
31834: CALL_OW 321
31838: PUSH
31839: LD_INT 2
31841: EQUAL
31842: IFFALSE 31859
// bpoints := bpoints * 1.1 ;
31844: LD_ADDR_VAR 0 10
31848: PUSH
31849: LD_VAR 0 10
31853: PUSH
31854: LD_REAL  1.10000000000000E+0000
31857: MUL
31858: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
31859: LD_ADDR_VAR 0 10
31863: PUSH
31864: LD_VAR 0 10
31868: PUSH
31869: LD_VAR 0 6
31873: PPUSH
31874: LD_INT 1
31876: PPUSH
31877: CALL_OW 259
31881: PUSH
31882: LD_REAL  1.15000000000000E+0000
31885: MUL
31886: MUL
31887: ST_TO_ADDR
// end ; unit_vehicle :
31888: GO 32718
31890: LD_INT 2
31892: DOUBLE
31893: EQUAL
31894: IFTRUE 31898
31896: GO 32706
31898: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
31899: LD_VAR 0 6
31903: PPUSH
31904: CALL_OW 264
31908: PUSH
31909: LD_INT 2
31911: PUSH
31912: LD_INT 42
31914: PUSH
31915: LD_INT 24
31917: PUSH
31918: EMPTY
31919: LIST
31920: LIST
31921: LIST
31922: IN
31923: IFFALSE 31944
// points := [ 25 , 5 , 3 ] ;
31925: LD_ADDR_VAR 0 9
31929: PUSH
31930: LD_INT 25
31932: PUSH
31933: LD_INT 5
31935: PUSH
31936: LD_INT 3
31938: PUSH
31939: EMPTY
31940: LIST
31941: LIST
31942: LIST
31943: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
31944: LD_VAR 0 6
31948: PPUSH
31949: CALL_OW 264
31953: PUSH
31954: LD_INT 4
31956: PUSH
31957: LD_INT 43
31959: PUSH
31960: LD_INT 25
31962: PUSH
31963: EMPTY
31964: LIST
31965: LIST
31966: LIST
31967: IN
31968: IFFALSE 31989
// points := [ 40 , 15 , 5 ] ;
31970: LD_ADDR_VAR 0 9
31974: PUSH
31975: LD_INT 40
31977: PUSH
31978: LD_INT 15
31980: PUSH
31981: LD_INT 5
31983: PUSH
31984: EMPTY
31985: LIST
31986: LIST
31987: LIST
31988: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
31989: LD_VAR 0 6
31993: PPUSH
31994: CALL_OW 264
31998: PUSH
31999: LD_INT 3
32001: PUSH
32002: LD_INT 23
32004: PUSH
32005: EMPTY
32006: LIST
32007: LIST
32008: IN
32009: IFFALSE 32030
// points := [ 7 , 25 , 8 ] ;
32011: LD_ADDR_VAR 0 9
32015: PUSH
32016: LD_INT 7
32018: PUSH
32019: LD_INT 25
32021: PUSH
32022: LD_INT 8
32024: PUSH
32025: EMPTY
32026: LIST
32027: LIST
32028: LIST
32029: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
32030: LD_VAR 0 6
32034: PPUSH
32035: CALL_OW 264
32039: PUSH
32040: LD_INT 5
32042: PUSH
32043: LD_INT 27
32045: PUSH
32046: LD_INT 44
32048: PUSH
32049: EMPTY
32050: LIST
32051: LIST
32052: LIST
32053: IN
32054: IFFALSE 32075
// points := [ 14 , 50 , 16 ] ;
32056: LD_ADDR_VAR 0 9
32060: PUSH
32061: LD_INT 14
32063: PUSH
32064: LD_INT 50
32066: PUSH
32067: LD_INT 16
32069: PUSH
32070: EMPTY
32071: LIST
32072: LIST
32073: LIST
32074: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
32075: LD_VAR 0 6
32079: PPUSH
32080: CALL_OW 264
32084: PUSH
32085: LD_INT 6
32087: PUSH
32088: LD_INT 46
32090: PUSH
32091: EMPTY
32092: LIST
32093: LIST
32094: IN
32095: IFFALSE 32116
// points := [ 32 , 120 , 70 ] ;
32097: LD_ADDR_VAR 0 9
32101: PUSH
32102: LD_INT 32
32104: PUSH
32105: LD_INT 120
32107: PUSH
32108: LD_INT 70
32110: PUSH
32111: EMPTY
32112: LIST
32113: LIST
32114: LIST
32115: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
32116: LD_VAR 0 6
32120: PPUSH
32121: CALL_OW 264
32125: PUSH
32126: LD_INT 7
32128: PUSH
32129: LD_INT 28
32131: PUSH
32132: LD_INT 45
32134: PUSH
32135: LD_EXP 34
32139: PUSH
32140: EMPTY
32141: LIST
32142: LIST
32143: LIST
32144: LIST
32145: IN
32146: IFFALSE 32167
// points := [ 35 , 20 , 45 ] ;
32148: LD_ADDR_VAR 0 9
32152: PUSH
32153: LD_INT 35
32155: PUSH
32156: LD_INT 20
32158: PUSH
32159: LD_INT 45
32161: PUSH
32162: EMPTY
32163: LIST
32164: LIST
32165: LIST
32166: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
32167: LD_VAR 0 6
32171: PPUSH
32172: CALL_OW 264
32176: PUSH
32177: LD_INT 47
32179: PUSH
32180: EMPTY
32181: LIST
32182: IN
32183: IFFALSE 32204
// points := [ 67 , 45 , 75 ] ;
32185: LD_ADDR_VAR 0 9
32189: PUSH
32190: LD_INT 67
32192: PUSH
32193: LD_INT 45
32195: PUSH
32196: LD_INT 75
32198: PUSH
32199: EMPTY
32200: LIST
32201: LIST
32202: LIST
32203: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
32204: LD_VAR 0 6
32208: PPUSH
32209: CALL_OW 264
32213: PUSH
32214: LD_INT 26
32216: PUSH
32217: EMPTY
32218: LIST
32219: IN
32220: IFFALSE 32241
// points := [ 120 , 30 , 80 ] ;
32222: LD_ADDR_VAR 0 9
32226: PUSH
32227: LD_INT 120
32229: PUSH
32230: LD_INT 30
32232: PUSH
32233: LD_INT 80
32235: PUSH
32236: EMPTY
32237: LIST
32238: LIST
32239: LIST
32240: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
32241: LD_VAR 0 6
32245: PPUSH
32246: CALL_OW 264
32250: PUSH
32251: LD_INT 22
32253: PUSH
32254: EMPTY
32255: LIST
32256: IN
32257: IFFALSE 32278
// points := [ 40 , 1 , 1 ] ;
32259: LD_ADDR_VAR 0 9
32263: PUSH
32264: LD_INT 40
32266: PUSH
32267: LD_INT 1
32269: PUSH
32270: LD_INT 1
32272: PUSH
32273: EMPTY
32274: LIST
32275: LIST
32276: LIST
32277: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
32278: LD_VAR 0 6
32282: PPUSH
32283: CALL_OW 264
32287: PUSH
32288: LD_INT 29
32290: PUSH
32291: EMPTY
32292: LIST
32293: IN
32294: IFFALSE 32315
// points := [ 70 , 200 , 400 ] ;
32296: LD_ADDR_VAR 0 9
32300: PUSH
32301: LD_INT 70
32303: PUSH
32304: LD_INT 200
32306: PUSH
32307: LD_INT 400
32309: PUSH
32310: EMPTY
32311: LIST
32312: LIST
32313: LIST
32314: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
32315: LD_VAR 0 6
32319: PPUSH
32320: CALL_OW 264
32324: PUSH
32325: LD_INT 14
32327: PUSH
32328: LD_INT 53
32330: PUSH
32331: EMPTY
32332: LIST
32333: LIST
32334: IN
32335: IFFALSE 32356
// points := [ 40 , 10 , 20 ] ;
32337: LD_ADDR_VAR 0 9
32341: PUSH
32342: LD_INT 40
32344: PUSH
32345: LD_INT 10
32347: PUSH
32348: LD_INT 20
32350: PUSH
32351: EMPTY
32352: LIST
32353: LIST
32354: LIST
32355: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
32356: LD_VAR 0 6
32360: PPUSH
32361: CALL_OW 264
32365: PUSH
32366: LD_INT 9
32368: PUSH
32369: EMPTY
32370: LIST
32371: IN
32372: IFFALSE 32393
// points := [ 5 , 70 , 20 ] ;
32374: LD_ADDR_VAR 0 9
32378: PUSH
32379: LD_INT 5
32381: PUSH
32382: LD_INT 70
32384: PUSH
32385: LD_INT 20
32387: PUSH
32388: EMPTY
32389: LIST
32390: LIST
32391: LIST
32392: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
32393: LD_VAR 0 6
32397: PPUSH
32398: CALL_OW 264
32402: PUSH
32403: LD_INT 10
32405: PUSH
32406: EMPTY
32407: LIST
32408: IN
32409: IFFALSE 32430
// points := [ 35 , 110 , 70 ] ;
32411: LD_ADDR_VAR 0 9
32415: PUSH
32416: LD_INT 35
32418: PUSH
32419: LD_INT 110
32421: PUSH
32422: LD_INT 70
32424: PUSH
32425: EMPTY
32426: LIST
32427: LIST
32428: LIST
32429: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
32430: LD_VAR 0 6
32434: PPUSH
32435: CALL_OW 265
32439: PUSH
32440: LD_INT 25
32442: EQUAL
32443: IFFALSE 32464
// points := [ 80 , 65 , 100 ] ;
32445: LD_ADDR_VAR 0 9
32449: PUSH
32450: LD_INT 80
32452: PUSH
32453: LD_INT 65
32455: PUSH
32456: LD_INT 100
32458: PUSH
32459: EMPTY
32460: LIST
32461: LIST
32462: LIST
32463: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
32464: LD_VAR 0 6
32468: PPUSH
32469: CALL_OW 263
32473: PUSH
32474: LD_INT 1
32476: EQUAL
32477: IFFALSE 32512
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
32479: LD_ADDR_VAR 0 10
32483: PUSH
32484: LD_VAR 0 10
32488: PUSH
32489: LD_VAR 0 6
32493: PPUSH
32494: CALL_OW 311
32498: PPUSH
32499: LD_INT 3
32501: PPUSH
32502: CALL_OW 259
32506: PUSH
32507: LD_INT 4
32509: MUL
32510: MUL
32511: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
32512: LD_VAR 0 6
32516: PPUSH
32517: CALL_OW 263
32521: PUSH
32522: LD_INT 2
32524: EQUAL
32525: IFFALSE 32576
// begin j := IsControledBy ( i ) ;
32527: LD_ADDR_VAR 0 7
32531: PUSH
32532: LD_VAR 0 6
32536: PPUSH
32537: CALL_OW 312
32541: ST_TO_ADDR
// if j then
32542: LD_VAR 0 7
32546: IFFALSE 32576
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
32548: LD_ADDR_VAR 0 10
32552: PUSH
32553: LD_VAR 0 10
32557: PUSH
32558: LD_VAR 0 7
32562: PPUSH
32563: LD_INT 3
32565: PPUSH
32566: CALL_OW 259
32570: PUSH
32571: LD_INT 3
32573: MUL
32574: MUL
32575: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
32576: LD_VAR 0 6
32580: PPUSH
32581: CALL_OW 264
32585: PUSH
32586: LD_INT 5
32588: PUSH
32589: LD_INT 6
32591: PUSH
32592: LD_INT 46
32594: PUSH
32595: LD_INT 44
32597: PUSH
32598: LD_INT 47
32600: PUSH
32601: LD_INT 45
32603: PUSH
32604: LD_INT 28
32606: PUSH
32607: LD_INT 7
32609: PUSH
32610: LD_INT 27
32612: PUSH
32613: LD_INT 29
32615: PUSH
32616: EMPTY
32617: LIST
32618: LIST
32619: LIST
32620: LIST
32621: LIST
32622: LIST
32623: LIST
32624: LIST
32625: LIST
32626: LIST
32627: IN
32628: PUSH
32629: LD_VAR 0 1
32633: PPUSH
32634: LD_INT 52
32636: PPUSH
32637: CALL_OW 321
32641: PUSH
32642: LD_INT 2
32644: EQUAL
32645: AND
32646: IFFALSE 32663
// bpoints := bpoints * 1.2 ;
32648: LD_ADDR_VAR 0 10
32652: PUSH
32653: LD_VAR 0 10
32657: PUSH
32658: LD_REAL  1.20000000000000E+0000
32661: MUL
32662: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
32663: LD_VAR 0 6
32667: PPUSH
32668: CALL_OW 264
32672: PUSH
32673: LD_INT 6
32675: PUSH
32676: LD_INT 46
32678: PUSH
32679: LD_INT 47
32681: PUSH
32682: EMPTY
32683: LIST
32684: LIST
32685: LIST
32686: IN
32687: IFFALSE 32704
// bpoints := bpoints * 1.2 ;
32689: LD_ADDR_VAR 0 10
32693: PUSH
32694: LD_VAR 0 10
32698: PUSH
32699: LD_REAL  1.20000000000000E+0000
32702: MUL
32703: ST_TO_ADDR
// end ; unit_building :
32704: GO 32718
32706: LD_INT 3
32708: DOUBLE
32709: EQUAL
32710: IFTRUE 32714
32712: GO 32717
32714: POP
// ; end ;
32715: GO 32718
32717: POP
// for j = 1 to 3 do
32718: LD_ADDR_VAR 0 7
32722: PUSH
32723: DOUBLE
32724: LD_INT 1
32726: DEC
32727: ST_TO_ADDR
32728: LD_INT 3
32730: PUSH
32731: FOR_TO
32732: IFFALSE 32785
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
32734: LD_ADDR_VAR 0 5
32738: PUSH
32739: LD_VAR 0 5
32743: PPUSH
32744: LD_VAR 0 7
32748: PPUSH
32749: LD_VAR 0 5
32753: PUSH
32754: LD_VAR 0 7
32758: ARRAY
32759: PUSH
32760: LD_VAR 0 9
32764: PUSH
32765: LD_VAR 0 7
32769: ARRAY
32770: PUSH
32771: LD_VAR 0 10
32775: MUL
32776: PLUS
32777: PPUSH
32778: CALL_OW 1
32782: ST_TO_ADDR
32783: GO 32731
32785: POP
32786: POP
// end ;
32787: GO 31264
32789: POP
32790: POP
// result := Replace ( result , 4 , tmp ) ;
32791: LD_ADDR_VAR 0 5
32795: PUSH
32796: LD_VAR 0 5
32800: PPUSH
32801: LD_INT 4
32803: PPUSH
32804: LD_VAR 0 8
32808: PPUSH
32809: CALL_OW 1
32813: ST_TO_ADDR
// end ;
32814: LD_VAR 0 5
32818: RET
// export function DangerAtRange ( unit , range ) ; begin
32819: LD_INT 0
32821: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
32822: LD_ADDR_VAR 0 3
32826: PUSH
32827: LD_VAR 0 1
32831: PPUSH
32832: CALL_OW 255
32836: PPUSH
32837: LD_VAR 0 1
32841: PPUSH
32842: CALL_OW 250
32846: PPUSH
32847: LD_VAR 0 1
32851: PPUSH
32852: CALL_OW 251
32856: PPUSH
32857: LD_VAR 0 2
32861: PPUSH
32862: CALL 31116 0 4
32866: ST_TO_ADDR
// end ;
32867: LD_VAR 0 3
32871: RET
// export function DangerInArea ( side , area ) ; begin
32872: LD_INT 0
32874: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
32875: LD_ADDR_VAR 0 3
32879: PUSH
32880: LD_VAR 0 2
32884: PPUSH
32885: LD_INT 81
32887: PUSH
32888: LD_VAR 0 1
32892: PUSH
32893: EMPTY
32894: LIST
32895: LIST
32896: PPUSH
32897: CALL_OW 70
32901: ST_TO_ADDR
// end ;
32902: LD_VAR 0 3
32906: RET
// export function IsExtension ( b ) ; begin
32907: LD_INT 0
32909: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
32910: LD_ADDR_VAR 0 2
32914: PUSH
32915: LD_VAR 0 1
32919: PUSH
32920: LD_INT 23
32922: PUSH
32923: LD_INT 20
32925: PUSH
32926: LD_INT 22
32928: PUSH
32929: LD_INT 17
32931: PUSH
32932: LD_INT 24
32934: PUSH
32935: LD_INT 21
32937: PUSH
32938: LD_INT 19
32940: PUSH
32941: LD_INT 16
32943: PUSH
32944: LD_INT 25
32946: PUSH
32947: LD_INT 18
32949: PUSH
32950: EMPTY
32951: LIST
32952: LIST
32953: LIST
32954: LIST
32955: LIST
32956: LIST
32957: LIST
32958: LIST
32959: LIST
32960: LIST
32961: IN
32962: ST_TO_ADDR
// end ;
32963: LD_VAR 0 2
32967: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
32968: LD_INT 0
32970: PPUSH
32971: PPUSH
32972: PPUSH
// result := [ ] ;
32973: LD_ADDR_VAR 0 4
32977: PUSH
32978: EMPTY
32979: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
32980: LD_ADDR_VAR 0 5
32984: PUSH
32985: LD_VAR 0 2
32989: PPUSH
32990: LD_INT 21
32992: PUSH
32993: LD_INT 3
32995: PUSH
32996: EMPTY
32997: LIST
32998: LIST
32999: PPUSH
33000: CALL_OW 70
33004: ST_TO_ADDR
// if not tmp then
33005: LD_VAR 0 5
33009: NOT
33010: IFFALSE 33014
// exit ;
33012: GO 33078
// if checkLink then
33014: LD_VAR 0 3
33018: IFFALSE 33068
// begin for i in tmp do
33020: LD_ADDR_VAR 0 6
33024: PUSH
33025: LD_VAR 0 5
33029: PUSH
33030: FOR_IN
33031: IFFALSE 33066
// if GetBase ( i ) <> base then
33033: LD_VAR 0 6
33037: PPUSH
33038: CALL_OW 274
33042: PUSH
33043: LD_VAR 0 1
33047: NONEQUAL
33048: IFFALSE 33064
// ComLinkToBase ( base , i ) ;
33050: LD_VAR 0 1
33054: PPUSH
33055: LD_VAR 0 6
33059: PPUSH
33060: CALL_OW 169
33064: GO 33030
33066: POP
33067: POP
// end ; result := tmp ;
33068: LD_ADDR_VAR 0 4
33072: PUSH
33073: LD_VAR 0 5
33077: ST_TO_ADDR
// end ;
33078: LD_VAR 0 4
33082: RET
// export function ComComplete ( units , b ) ; var i ; begin
33083: LD_INT 0
33085: PPUSH
33086: PPUSH
// if not units then
33087: LD_VAR 0 1
33091: NOT
33092: IFFALSE 33096
// exit ;
33094: GO 33186
// for i in units do
33096: LD_ADDR_VAR 0 4
33100: PUSH
33101: LD_VAR 0 1
33105: PUSH
33106: FOR_IN
33107: IFFALSE 33184
// if BuildingStatus ( b ) = bs_build then
33109: LD_VAR 0 2
33113: PPUSH
33114: CALL_OW 461
33118: PUSH
33119: LD_INT 1
33121: EQUAL
33122: IFFALSE 33182
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
33124: LD_VAR 0 4
33128: PPUSH
33129: LD_STRING h
33131: PUSH
33132: LD_VAR 0 2
33136: PPUSH
33137: CALL_OW 250
33141: PUSH
33142: LD_VAR 0 2
33146: PPUSH
33147: CALL_OW 251
33151: PUSH
33152: LD_VAR 0 2
33156: PUSH
33157: LD_INT 0
33159: PUSH
33160: LD_INT 0
33162: PUSH
33163: LD_INT 0
33165: PUSH
33166: EMPTY
33167: LIST
33168: LIST
33169: LIST
33170: LIST
33171: LIST
33172: LIST
33173: LIST
33174: PUSH
33175: EMPTY
33176: LIST
33177: PPUSH
33178: CALL_OW 446
33182: GO 33106
33184: POP
33185: POP
// end ;
33186: LD_VAR 0 3
33190: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
33191: LD_INT 0
33193: PPUSH
33194: PPUSH
33195: PPUSH
33196: PPUSH
33197: PPUSH
33198: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
33199: LD_VAR 0 1
33203: NOT
33204: PUSH
33205: LD_VAR 0 1
33209: PPUSH
33210: CALL_OW 263
33214: PUSH
33215: LD_INT 2
33217: NONEQUAL
33218: OR
33219: IFFALSE 33223
// exit ;
33221: GO 33539
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
33223: LD_ADDR_VAR 0 6
33227: PUSH
33228: LD_INT 22
33230: PUSH
33231: LD_VAR 0 1
33235: PPUSH
33236: CALL_OW 255
33240: PUSH
33241: EMPTY
33242: LIST
33243: LIST
33244: PUSH
33245: LD_INT 2
33247: PUSH
33248: LD_INT 30
33250: PUSH
33251: LD_INT 36
33253: PUSH
33254: EMPTY
33255: LIST
33256: LIST
33257: PUSH
33258: LD_INT 34
33260: PUSH
33261: LD_INT 31
33263: PUSH
33264: EMPTY
33265: LIST
33266: LIST
33267: PUSH
33268: EMPTY
33269: LIST
33270: LIST
33271: LIST
33272: PUSH
33273: EMPTY
33274: LIST
33275: LIST
33276: PPUSH
33277: CALL_OW 69
33281: ST_TO_ADDR
// if not tmp then
33282: LD_VAR 0 6
33286: NOT
33287: IFFALSE 33291
// exit ;
33289: GO 33539
// result := [ ] ;
33291: LD_ADDR_VAR 0 2
33295: PUSH
33296: EMPTY
33297: ST_TO_ADDR
// for i in tmp do
33298: LD_ADDR_VAR 0 3
33302: PUSH
33303: LD_VAR 0 6
33307: PUSH
33308: FOR_IN
33309: IFFALSE 33380
// begin t := UnitsInside ( i ) ;
33311: LD_ADDR_VAR 0 4
33315: PUSH
33316: LD_VAR 0 3
33320: PPUSH
33321: CALL_OW 313
33325: ST_TO_ADDR
// if t then
33326: LD_VAR 0 4
33330: IFFALSE 33378
// for j in t do
33332: LD_ADDR_VAR 0 7
33336: PUSH
33337: LD_VAR 0 4
33341: PUSH
33342: FOR_IN
33343: IFFALSE 33376
// result := Replace ( result , result + 1 , j ) ;
33345: LD_ADDR_VAR 0 2
33349: PUSH
33350: LD_VAR 0 2
33354: PPUSH
33355: LD_VAR 0 2
33359: PUSH
33360: LD_INT 1
33362: PLUS
33363: PPUSH
33364: LD_VAR 0 7
33368: PPUSH
33369: CALL_OW 1
33373: ST_TO_ADDR
33374: GO 33342
33376: POP
33377: POP
// end ;
33378: GO 33308
33380: POP
33381: POP
// if not result then
33382: LD_VAR 0 2
33386: NOT
33387: IFFALSE 33391
// exit ;
33389: GO 33539
// mech := result [ 1 ] ;
33391: LD_ADDR_VAR 0 5
33395: PUSH
33396: LD_VAR 0 2
33400: PUSH
33401: LD_INT 1
33403: ARRAY
33404: ST_TO_ADDR
// if result > 1 then
33405: LD_VAR 0 2
33409: PUSH
33410: LD_INT 1
33412: GREATER
33413: IFFALSE 33525
// begin for i = 2 to result do
33415: LD_ADDR_VAR 0 3
33419: PUSH
33420: DOUBLE
33421: LD_INT 2
33423: DEC
33424: ST_TO_ADDR
33425: LD_VAR 0 2
33429: PUSH
33430: FOR_TO
33431: IFFALSE 33523
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
33433: LD_ADDR_VAR 0 4
33437: PUSH
33438: LD_VAR 0 2
33442: PUSH
33443: LD_VAR 0 3
33447: ARRAY
33448: PPUSH
33449: LD_INT 3
33451: PPUSH
33452: CALL_OW 259
33456: PUSH
33457: LD_VAR 0 2
33461: PUSH
33462: LD_VAR 0 3
33466: ARRAY
33467: PPUSH
33468: CALL_OW 432
33472: MINUS
33473: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
33474: LD_VAR 0 4
33478: PUSH
33479: LD_VAR 0 5
33483: PPUSH
33484: LD_INT 3
33486: PPUSH
33487: CALL_OW 259
33491: PUSH
33492: LD_VAR 0 5
33496: PPUSH
33497: CALL_OW 432
33501: MINUS
33502: GREATEREQUAL
33503: IFFALSE 33521
// mech := result [ i ] ;
33505: LD_ADDR_VAR 0 5
33509: PUSH
33510: LD_VAR 0 2
33514: PUSH
33515: LD_VAR 0 3
33519: ARRAY
33520: ST_TO_ADDR
// end ;
33521: GO 33430
33523: POP
33524: POP
// end ; ComLinkTo ( vehicle , mech ) ;
33525: LD_VAR 0 1
33529: PPUSH
33530: LD_VAR 0 5
33534: PPUSH
33535: CALL_OW 135
// end ;
33539: LD_VAR 0 2
33543: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
33544: LD_INT 0
33546: PPUSH
33547: PPUSH
33548: PPUSH
33549: PPUSH
33550: PPUSH
33551: PPUSH
33552: PPUSH
33553: PPUSH
33554: PPUSH
33555: PPUSH
33556: PPUSH
33557: PPUSH
33558: PPUSH
// result := [ ] ;
33559: LD_ADDR_VAR 0 7
33563: PUSH
33564: EMPTY
33565: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
33566: LD_VAR 0 1
33570: PPUSH
33571: CALL_OW 266
33575: PUSH
33576: LD_INT 0
33578: PUSH
33579: LD_INT 1
33581: PUSH
33582: EMPTY
33583: LIST
33584: LIST
33585: IN
33586: NOT
33587: IFFALSE 33591
// exit ;
33589: GO 35225
// if name then
33591: LD_VAR 0 3
33595: IFFALSE 33611
// SetBName ( base_dep , name ) ;
33597: LD_VAR 0 1
33601: PPUSH
33602: LD_VAR 0 3
33606: PPUSH
33607: CALL_OW 500
// base := GetBase ( base_dep ) ;
33611: LD_ADDR_VAR 0 15
33615: PUSH
33616: LD_VAR 0 1
33620: PPUSH
33621: CALL_OW 274
33625: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
33626: LD_ADDR_VAR 0 16
33630: PUSH
33631: LD_VAR 0 1
33635: PPUSH
33636: CALL_OW 255
33640: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
33641: LD_ADDR_VAR 0 17
33645: PUSH
33646: LD_VAR 0 1
33650: PPUSH
33651: CALL_OW 248
33655: ST_TO_ADDR
// if sources then
33656: LD_VAR 0 5
33660: IFFALSE 33707
// for i = 1 to 3 do
33662: LD_ADDR_VAR 0 8
33666: PUSH
33667: DOUBLE
33668: LD_INT 1
33670: DEC
33671: ST_TO_ADDR
33672: LD_INT 3
33674: PUSH
33675: FOR_TO
33676: IFFALSE 33705
// AddResourceType ( base , i , sources [ i ] ) ;
33678: LD_VAR 0 15
33682: PPUSH
33683: LD_VAR 0 8
33687: PPUSH
33688: LD_VAR 0 5
33692: PUSH
33693: LD_VAR 0 8
33697: ARRAY
33698: PPUSH
33699: CALL_OW 276
33703: GO 33675
33705: POP
33706: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
33707: LD_ADDR_VAR 0 18
33711: PUSH
33712: LD_VAR 0 15
33716: PPUSH
33717: LD_VAR 0 2
33721: PPUSH
33722: LD_INT 1
33724: PPUSH
33725: CALL 32968 0 3
33729: ST_TO_ADDR
// InitHc ;
33730: CALL_OW 19
// InitUc ;
33734: CALL_OW 18
// uc_side := side ;
33738: LD_ADDR_OWVAR 20
33742: PUSH
33743: LD_VAR 0 16
33747: ST_TO_ADDR
// uc_nation := nation ;
33748: LD_ADDR_OWVAR 21
33752: PUSH
33753: LD_VAR 0 17
33757: ST_TO_ADDR
// if buildings then
33758: LD_VAR 0 18
33762: IFFALSE 35084
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
33764: LD_ADDR_VAR 0 19
33768: PUSH
33769: LD_VAR 0 18
33773: PPUSH
33774: LD_INT 2
33776: PUSH
33777: LD_INT 30
33779: PUSH
33780: LD_INT 29
33782: PUSH
33783: EMPTY
33784: LIST
33785: LIST
33786: PUSH
33787: LD_INT 30
33789: PUSH
33790: LD_INT 30
33792: PUSH
33793: EMPTY
33794: LIST
33795: LIST
33796: PUSH
33797: EMPTY
33798: LIST
33799: LIST
33800: LIST
33801: PPUSH
33802: CALL_OW 72
33806: ST_TO_ADDR
// if tmp then
33807: LD_VAR 0 19
33811: IFFALSE 33859
// for i in tmp do
33813: LD_ADDR_VAR 0 8
33817: PUSH
33818: LD_VAR 0 19
33822: PUSH
33823: FOR_IN
33824: IFFALSE 33857
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
33826: LD_VAR 0 8
33830: PPUSH
33831: CALL_OW 250
33835: PPUSH
33836: LD_VAR 0 8
33840: PPUSH
33841: CALL_OW 251
33845: PPUSH
33846: LD_VAR 0 16
33850: PPUSH
33851: CALL_OW 441
33855: GO 33823
33857: POP
33858: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
33859: LD_VAR 0 18
33863: PPUSH
33864: LD_INT 2
33866: PUSH
33867: LD_INT 30
33869: PUSH
33870: LD_INT 32
33872: PUSH
33873: EMPTY
33874: LIST
33875: LIST
33876: PUSH
33877: LD_INT 30
33879: PUSH
33880: LD_INT 33
33882: PUSH
33883: EMPTY
33884: LIST
33885: LIST
33886: PUSH
33887: EMPTY
33888: LIST
33889: LIST
33890: LIST
33891: PPUSH
33892: CALL_OW 72
33896: IFFALSE 33984
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
33898: LD_ADDR_VAR 0 8
33902: PUSH
33903: LD_VAR 0 18
33907: PPUSH
33908: LD_INT 2
33910: PUSH
33911: LD_INT 30
33913: PUSH
33914: LD_INT 32
33916: PUSH
33917: EMPTY
33918: LIST
33919: LIST
33920: PUSH
33921: LD_INT 30
33923: PUSH
33924: LD_INT 33
33926: PUSH
33927: EMPTY
33928: LIST
33929: LIST
33930: PUSH
33931: EMPTY
33932: LIST
33933: LIST
33934: LIST
33935: PPUSH
33936: CALL_OW 72
33940: PUSH
33941: FOR_IN
33942: IFFALSE 33982
// begin if not GetBWeapon ( i ) then
33944: LD_VAR 0 8
33948: PPUSH
33949: CALL_OW 269
33953: NOT
33954: IFFALSE 33980
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
33956: LD_VAR 0 8
33960: PPUSH
33961: LD_VAR 0 8
33965: PPUSH
33966: LD_VAR 0 2
33970: PPUSH
33971: CALL 35230 0 2
33975: PPUSH
33976: CALL_OW 431
// end ;
33980: GO 33941
33982: POP
33983: POP
// end ; for i = 1 to personel do
33984: LD_ADDR_VAR 0 8
33988: PUSH
33989: DOUBLE
33990: LD_INT 1
33992: DEC
33993: ST_TO_ADDR
33994: LD_VAR 0 6
33998: PUSH
33999: FOR_TO
34000: IFFALSE 35064
// begin if i > 4 then
34002: LD_VAR 0 8
34006: PUSH
34007: LD_INT 4
34009: GREATER
34010: IFFALSE 34014
// break ;
34012: GO 35064
// case i of 1 :
34014: LD_VAR 0 8
34018: PUSH
34019: LD_INT 1
34021: DOUBLE
34022: EQUAL
34023: IFTRUE 34027
34025: GO 34107
34027: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
34028: LD_ADDR_VAR 0 12
34032: PUSH
34033: LD_VAR 0 18
34037: PPUSH
34038: LD_INT 22
34040: PUSH
34041: LD_VAR 0 16
34045: PUSH
34046: EMPTY
34047: LIST
34048: LIST
34049: PUSH
34050: LD_INT 58
34052: PUSH
34053: EMPTY
34054: LIST
34055: PUSH
34056: LD_INT 2
34058: PUSH
34059: LD_INT 30
34061: PUSH
34062: LD_INT 32
34064: PUSH
34065: EMPTY
34066: LIST
34067: LIST
34068: PUSH
34069: LD_INT 30
34071: PUSH
34072: LD_INT 4
34074: PUSH
34075: EMPTY
34076: LIST
34077: LIST
34078: PUSH
34079: LD_INT 30
34081: PUSH
34082: LD_INT 5
34084: PUSH
34085: EMPTY
34086: LIST
34087: LIST
34088: PUSH
34089: EMPTY
34090: LIST
34091: LIST
34092: LIST
34093: LIST
34094: PUSH
34095: EMPTY
34096: LIST
34097: LIST
34098: LIST
34099: PPUSH
34100: CALL_OW 72
34104: ST_TO_ADDR
34105: GO 34329
34107: LD_INT 2
34109: DOUBLE
34110: EQUAL
34111: IFTRUE 34115
34113: GO 34177
34115: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
34116: LD_ADDR_VAR 0 12
34120: PUSH
34121: LD_VAR 0 18
34125: PPUSH
34126: LD_INT 22
34128: PUSH
34129: LD_VAR 0 16
34133: PUSH
34134: EMPTY
34135: LIST
34136: LIST
34137: PUSH
34138: LD_INT 2
34140: PUSH
34141: LD_INT 30
34143: PUSH
34144: LD_INT 0
34146: PUSH
34147: EMPTY
34148: LIST
34149: LIST
34150: PUSH
34151: LD_INT 30
34153: PUSH
34154: LD_INT 1
34156: PUSH
34157: EMPTY
34158: LIST
34159: LIST
34160: PUSH
34161: EMPTY
34162: LIST
34163: LIST
34164: LIST
34165: PUSH
34166: EMPTY
34167: LIST
34168: LIST
34169: PPUSH
34170: CALL_OW 72
34174: ST_TO_ADDR
34175: GO 34329
34177: LD_INT 3
34179: DOUBLE
34180: EQUAL
34181: IFTRUE 34185
34183: GO 34247
34185: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
34186: LD_ADDR_VAR 0 12
34190: PUSH
34191: LD_VAR 0 18
34195: PPUSH
34196: LD_INT 22
34198: PUSH
34199: LD_VAR 0 16
34203: PUSH
34204: EMPTY
34205: LIST
34206: LIST
34207: PUSH
34208: LD_INT 2
34210: PUSH
34211: LD_INT 30
34213: PUSH
34214: LD_INT 2
34216: PUSH
34217: EMPTY
34218: LIST
34219: LIST
34220: PUSH
34221: LD_INT 30
34223: PUSH
34224: LD_INT 3
34226: PUSH
34227: EMPTY
34228: LIST
34229: LIST
34230: PUSH
34231: EMPTY
34232: LIST
34233: LIST
34234: LIST
34235: PUSH
34236: EMPTY
34237: LIST
34238: LIST
34239: PPUSH
34240: CALL_OW 72
34244: ST_TO_ADDR
34245: GO 34329
34247: LD_INT 4
34249: DOUBLE
34250: EQUAL
34251: IFTRUE 34255
34253: GO 34328
34255: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
34256: LD_ADDR_VAR 0 12
34260: PUSH
34261: LD_VAR 0 18
34265: PPUSH
34266: LD_INT 22
34268: PUSH
34269: LD_VAR 0 16
34273: PUSH
34274: EMPTY
34275: LIST
34276: LIST
34277: PUSH
34278: LD_INT 2
34280: PUSH
34281: LD_INT 30
34283: PUSH
34284: LD_INT 6
34286: PUSH
34287: EMPTY
34288: LIST
34289: LIST
34290: PUSH
34291: LD_INT 30
34293: PUSH
34294: LD_INT 7
34296: PUSH
34297: EMPTY
34298: LIST
34299: LIST
34300: PUSH
34301: LD_INT 30
34303: PUSH
34304: LD_INT 8
34306: PUSH
34307: EMPTY
34308: LIST
34309: LIST
34310: PUSH
34311: EMPTY
34312: LIST
34313: LIST
34314: LIST
34315: LIST
34316: PUSH
34317: EMPTY
34318: LIST
34319: LIST
34320: PPUSH
34321: CALL_OW 72
34325: ST_TO_ADDR
34326: GO 34329
34328: POP
// if i = 1 then
34329: LD_VAR 0 8
34333: PUSH
34334: LD_INT 1
34336: EQUAL
34337: IFFALSE 34448
// begin tmp := [ ] ;
34339: LD_ADDR_VAR 0 19
34343: PUSH
34344: EMPTY
34345: ST_TO_ADDR
// for j in f do
34346: LD_ADDR_VAR 0 9
34350: PUSH
34351: LD_VAR 0 12
34355: PUSH
34356: FOR_IN
34357: IFFALSE 34430
// if GetBType ( j ) = b_bunker then
34359: LD_VAR 0 9
34363: PPUSH
34364: CALL_OW 266
34368: PUSH
34369: LD_INT 32
34371: EQUAL
34372: IFFALSE 34399
// tmp := Insert ( tmp , 1 , j ) else
34374: LD_ADDR_VAR 0 19
34378: PUSH
34379: LD_VAR 0 19
34383: PPUSH
34384: LD_INT 1
34386: PPUSH
34387: LD_VAR 0 9
34391: PPUSH
34392: CALL_OW 2
34396: ST_TO_ADDR
34397: GO 34428
// tmp := Insert ( tmp , tmp + 1 , j ) ;
34399: LD_ADDR_VAR 0 19
34403: PUSH
34404: LD_VAR 0 19
34408: PPUSH
34409: LD_VAR 0 19
34413: PUSH
34414: LD_INT 1
34416: PLUS
34417: PPUSH
34418: LD_VAR 0 9
34422: PPUSH
34423: CALL_OW 2
34427: ST_TO_ADDR
34428: GO 34356
34430: POP
34431: POP
// if tmp then
34432: LD_VAR 0 19
34436: IFFALSE 34448
// f := tmp ;
34438: LD_ADDR_VAR 0 12
34442: PUSH
34443: LD_VAR 0 19
34447: ST_TO_ADDR
// end ; x := personel [ i ] ;
34448: LD_ADDR_VAR 0 13
34452: PUSH
34453: LD_VAR 0 6
34457: PUSH
34458: LD_VAR 0 8
34462: ARRAY
34463: ST_TO_ADDR
// if x = - 1 then
34464: LD_VAR 0 13
34468: PUSH
34469: LD_INT 1
34471: NEG
34472: EQUAL
34473: IFFALSE 34682
// begin for j in f do
34475: LD_ADDR_VAR 0 9
34479: PUSH
34480: LD_VAR 0 12
34484: PUSH
34485: FOR_IN
34486: IFFALSE 34678
// repeat InitHc ;
34488: CALL_OW 19
// if GetBType ( j ) = b_barracks then
34492: LD_VAR 0 9
34496: PPUSH
34497: CALL_OW 266
34501: PUSH
34502: LD_INT 5
34504: EQUAL
34505: IFFALSE 34575
// begin if UnitsInside ( j ) < 3 then
34507: LD_VAR 0 9
34511: PPUSH
34512: CALL_OW 313
34516: PUSH
34517: LD_INT 3
34519: LESS
34520: IFFALSE 34556
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
34522: LD_INT 0
34524: PPUSH
34525: LD_INT 5
34527: PUSH
34528: LD_INT 8
34530: PUSH
34531: LD_INT 9
34533: PUSH
34534: EMPTY
34535: LIST
34536: LIST
34537: LIST
34538: PUSH
34539: LD_VAR 0 17
34543: ARRAY
34544: PPUSH
34545: LD_VAR 0 4
34549: PPUSH
34550: CALL_OW 380
34554: GO 34573
// PrepareHuman ( false , i , skill ) ;
34556: LD_INT 0
34558: PPUSH
34559: LD_VAR 0 8
34563: PPUSH
34564: LD_VAR 0 4
34568: PPUSH
34569: CALL_OW 380
// end else
34573: GO 34592
// PrepareHuman ( false , i , skill ) ;
34575: LD_INT 0
34577: PPUSH
34578: LD_VAR 0 8
34582: PPUSH
34583: LD_VAR 0 4
34587: PPUSH
34588: CALL_OW 380
// un := CreateHuman ;
34592: LD_ADDR_VAR 0 14
34596: PUSH
34597: CALL_OW 44
34601: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
34602: LD_ADDR_VAR 0 7
34606: PUSH
34607: LD_VAR 0 7
34611: PPUSH
34612: LD_INT 1
34614: PPUSH
34615: LD_VAR 0 14
34619: PPUSH
34620: CALL_OW 2
34624: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
34625: LD_VAR 0 14
34629: PPUSH
34630: LD_VAR 0 9
34634: PPUSH
34635: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
34639: LD_VAR 0 9
34643: PPUSH
34644: CALL_OW 313
34648: PUSH
34649: LD_INT 6
34651: EQUAL
34652: PUSH
34653: LD_VAR 0 9
34657: PPUSH
34658: CALL_OW 266
34662: PUSH
34663: LD_INT 32
34665: PUSH
34666: LD_INT 31
34668: PUSH
34669: EMPTY
34670: LIST
34671: LIST
34672: IN
34673: OR
34674: IFFALSE 34488
34676: GO 34485
34678: POP
34679: POP
// end else
34680: GO 35062
// for j = 1 to x do
34682: LD_ADDR_VAR 0 9
34686: PUSH
34687: DOUBLE
34688: LD_INT 1
34690: DEC
34691: ST_TO_ADDR
34692: LD_VAR 0 13
34696: PUSH
34697: FOR_TO
34698: IFFALSE 35060
// begin InitHc ;
34700: CALL_OW 19
// if not f then
34704: LD_VAR 0 12
34708: NOT
34709: IFFALSE 34798
// begin PrepareHuman ( false , i , skill ) ;
34711: LD_INT 0
34713: PPUSH
34714: LD_VAR 0 8
34718: PPUSH
34719: LD_VAR 0 4
34723: PPUSH
34724: CALL_OW 380
// un := CreateHuman ;
34728: LD_ADDR_VAR 0 14
34732: PUSH
34733: CALL_OW 44
34737: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
34738: LD_ADDR_VAR 0 7
34742: PUSH
34743: LD_VAR 0 7
34747: PPUSH
34748: LD_INT 1
34750: PPUSH
34751: LD_VAR 0 14
34755: PPUSH
34756: CALL_OW 2
34760: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
34761: LD_VAR 0 14
34765: PPUSH
34766: LD_VAR 0 1
34770: PPUSH
34771: CALL_OW 250
34775: PPUSH
34776: LD_VAR 0 1
34780: PPUSH
34781: CALL_OW 251
34785: PPUSH
34786: LD_INT 10
34788: PPUSH
34789: LD_INT 0
34791: PPUSH
34792: CALL_OW 50
// continue ;
34796: GO 34697
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
34798: LD_VAR 0 12
34802: PUSH
34803: LD_INT 1
34805: ARRAY
34806: PPUSH
34807: CALL_OW 313
34811: PUSH
34812: LD_VAR 0 12
34816: PUSH
34817: LD_INT 1
34819: ARRAY
34820: PPUSH
34821: CALL_OW 266
34825: PUSH
34826: LD_INT 32
34828: PUSH
34829: LD_INT 31
34831: PUSH
34832: EMPTY
34833: LIST
34834: LIST
34835: IN
34836: AND
34837: PUSH
34838: LD_VAR 0 12
34842: PUSH
34843: LD_INT 1
34845: ARRAY
34846: PPUSH
34847: CALL_OW 313
34851: PUSH
34852: LD_INT 6
34854: EQUAL
34855: OR
34856: IFFALSE 34876
// f := Delete ( f , 1 ) ;
34858: LD_ADDR_VAR 0 12
34862: PUSH
34863: LD_VAR 0 12
34867: PPUSH
34868: LD_INT 1
34870: PPUSH
34871: CALL_OW 3
34875: ST_TO_ADDR
// if not f then
34876: LD_VAR 0 12
34880: NOT
34881: IFFALSE 34899
// begin x := x + 2 ;
34883: LD_ADDR_VAR 0 13
34887: PUSH
34888: LD_VAR 0 13
34892: PUSH
34893: LD_INT 2
34895: PLUS
34896: ST_TO_ADDR
// continue ;
34897: GO 34697
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
34899: LD_VAR 0 12
34903: PUSH
34904: LD_INT 1
34906: ARRAY
34907: PPUSH
34908: CALL_OW 266
34912: PUSH
34913: LD_INT 5
34915: EQUAL
34916: IFFALSE 34990
// begin if UnitsInside ( f [ 1 ] ) < 3 then
34918: LD_VAR 0 12
34922: PUSH
34923: LD_INT 1
34925: ARRAY
34926: PPUSH
34927: CALL_OW 313
34931: PUSH
34932: LD_INT 3
34934: LESS
34935: IFFALSE 34971
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
34937: LD_INT 0
34939: PPUSH
34940: LD_INT 5
34942: PUSH
34943: LD_INT 8
34945: PUSH
34946: LD_INT 9
34948: PUSH
34949: EMPTY
34950: LIST
34951: LIST
34952: LIST
34953: PUSH
34954: LD_VAR 0 17
34958: ARRAY
34959: PPUSH
34960: LD_VAR 0 4
34964: PPUSH
34965: CALL_OW 380
34969: GO 34988
// PrepareHuman ( false , i , skill ) ;
34971: LD_INT 0
34973: PPUSH
34974: LD_VAR 0 8
34978: PPUSH
34979: LD_VAR 0 4
34983: PPUSH
34984: CALL_OW 380
// end else
34988: GO 35007
// PrepareHuman ( false , i , skill ) ;
34990: LD_INT 0
34992: PPUSH
34993: LD_VAR 0 8
34997: PPUSH
34998: LD_VAR 0 4
35002: PPUSH
35003: CALL_OW 380
// un := CreateHuman ;
35007: LD_ADDR_VAR 0 14
35011: PUSH
35012: CALL_OW 44
35016: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
35017: LD_ADDR_VAR 0 7
35021: PUSH
35022: LD_VAR 0 7
35026: PPUSH
35027: LD_INT 1
35029: PPUSH
35030: LD_VAR 0 14
35034: PPUSH
35035: CALL_OW 2
35039: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
35040: LD_VAR 0 14
35044: PPUSH
35045: LD_VAR 0 12
35049: PUSH
35050: LD_INT 1
35052: ARRAY
35053: PPUSH
35054: CALL_OW 52
// end ;
35058: GO 34697
35060: POP
35061: POP
// end ;
35062: GO 33999
35064: POP
35065: POP
// result := result ^ buildings ;
35066: LD_ADDR_VAR 0 7
35070: PUSH
35071: LD_VAR 0 7
35075: PUSH
35076: LD_VAR 0 18
35080: ADD
35081: ST_TO_ADDR
// end else
35082: GO 35225
// begin for i = 1 to personel do
35084: LD_ADDR_VAR 0 8
35088: PUSH
35089: DOUBLE
35090: LD_INT 1
35092: DEC
35093: ST_TO_ADDR
35094: LD_VAR 0 6
35098: PUSH
35099: FOR_TO
35100: IFFALSE 35223
// begin if i > 4 then
35102: LD_VAR 0 8
35106: PUSH
35107: LD_INT 4
35109: GREATER
35110: IFFALSE 35114
// break ;
35112: GO 35223
// x := personel [ i ] ;
35114: LD_ADDR_VAR 0 13
35118: PUSH
35119: LD_VAR 0 6
35123: PUSH
35124: LD_VAR 0 8
35128: ARRAY
35129: ST_TO_ADDR
// if x = - 1 then
35130: LD_VAR 0 13
35134: PUSH
35135: LD_INT 1
35137: NEG
35138: EQUAL
35139: IFFALSE 35143
// continue ;
35141: GO 35099
// PrepareHuman ( false , i , skill ) ;
35143: LD_INT 0
35145: PPUSH
35146: LD_VAR 0 8
35150: PPUSH
35151: LD_VAR 0 4
35155: PPUSH
35156: CALL_OW 380
// un := CreateHuman ;
35160: LD_ADDR_VAR 0 14
35164: PUSH
35165: CALL_OW 44
35169: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
35170: LD_VAR 0 14
35174: PPUSH
35175: LD_VAR 0 1
35179: PPUSH
35180: CALL_OW 250
35184: PPUSH
35185: LD_VAR 0 1
35189: PPUSH
35190: CALL_OW 251
35194: PPUSH
35195: LD_INT 10
35197: PPUSH
35198: LD_INT 0
35200: PPUSH
35201: CALL_OW 50
// result := result ^ un ;
35205: LD_ADDR_VAR 0 7
35209: PUSH
35210: LD_VAR 0 7
35214: PUSH
35215: LD_VAR 0 14
35219: ADD
35220: ST_TO_ADDR
// end ;
35221: GO 35099
35223: POP
35224: POP
// end ; end ;
35225: LD_VAR 0 7
35229: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
35230: LD_INT 0
35232: PPUSH
35233: PPUSH
35234: PPUSH
35235: PPUSH
35236: PPUSH
35237: PPUSH
35238: PPUSH
35239: PPUSH
35240: PPUSH
35241: PPUSH
35242: PPUSH
35243: PPUSH
35244: PPUSH
35245: PPUSH
35246: PPUSH
35247: PPUSH
// result := false ;
35248: LD_ADDR_VAR 0 3
35252: PUSH
35253: LD_INT 0
35255: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
35256: LD_VAR 0 1
35260: NOT
35261: PUSH
35262: LD_VAR 0 1
35266: PPUSH
35267: CALL_OW 266
35271: PUSH
35272: LD_INT 32
35274: PUSH
35275: LD_INT 33
35277: PUSH
35278: EMPTY
35279: LIST
35280: LIST
35281: IN
35282: NOT
35283: OR
35284: IFFALSE 35288
// exit ;
35286: GO 36397
// nat := GetNation ( tower ) ;
35288: LD_ADDR_VAR 0 12
35292: PUSH
35293: LD_VAR 0 1
35297: PPUSH
35298: CALL_OW 248
35302: ST_TO_ADDR
// side := GetSide ( tower ) ;
35303: LD_ADDR_VAR 0 16
35307: PUSH
35308: LD_VAR 0 1
35312: PPUSH
35313: CALL_OW 255
35317: ST_TO_ADDR
// x := GetX ( tower ) ;
35318: LD_ADDR_VAR 0 10
35322: PUSH
35323: LD_VAR 0 1
35327: PPUSH
35328: CALL_OW 250
35332: ST_TO_ADDR
// y := GetY ( tower ) ;
35333: LD_ADDR_VAR 0 11
35337: PUSH
35338: LD_VAR 0 1
35342: PPUSH
35343: CALL_OW 251
35347: ST_TO_ADDR
// if not x or not y then
35348: LD_VAR 0 10
35352: NOT
35353: PUSH
35354: LD_VAR 0 11
35358: NOT
35359: OR
35360: IFFALSE 35364
// exit ;
35362: GO 36397
// weapon := 0 ;
35364: LD_ADDR_VAR 0 18
35368: PUSH
35369: LD_INT 0
35371: ST_TO_ADDR
// fac_list := [ ] ;
35372: LD_ADDR_VAR 0 17
35376: PUSH
35377: EMPTY
35378: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
35379: LD_ADDR_VAR 0 6
35383: PUSH
35384: LD_VAR 0 1
35388: PPUSH
35389: CALL_OW 274
35393: PPUSH
35394: LD_VAR 0 2
35398: PPUSH
35399: LD_INT 0
35401: PPUSH
35402: CALL 32968 0 3
35406: PPUSH
35407: LD_INT 30
35409: PUSH
35410: LD_INT 3
35412: PUSH
35413: EMPTY
35414: LIST
35415: LIST
35416: PPUSH
35417: CALL_OW 72
35421: ST_TO_ADDR
// if not factories then
35422: LD_VAR 0 6
35426: NOT
35427: IFFALSE 35431
// exit ;
35429: GO 36397
// for i in factories do
35431: LD_ADDR_VAR 0 8
35435: PUSH
35436: LD_VAR 0 6
35440: PUSH
35441: FOR_IN
35442: IFFALSE 35467
// fac_list := fac_list union AvailableWeaponList ( i ) ;
35444: LD_ADDR_VAR 0 17
35448: PUSH
35449: LD_VAR 0 17
35453: PUSH
35454: LD_VAR 0 8
35458: PPUSH
35459: CALL_OW 478
35463: UNION
35464: ST_TO_ADDR
35465: GO 35441
35467: POP
35468: POP
// if not fac_list then
35469: LD_VAR 0 17
35473: NOT
35474: IFFALSE 35478
// exit ;
35476: GO 36397
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
35478: LD_ADDR_VAR 0 5
35482: PUSH
35483: LD_INT 4
35485: PUSH
35486: LD_INT 5
35488: PUSH
35489: LD_INT 9
35491: PUSH
35492: LD_INT 10
35494: PUSH
35495: LD_INT 6
35497: PUSH
35498: LD_INT 7
35500: PUSH
35501: LD_INT 11
35503: PUSH
35504: EMPTY
35505: LIST
35506: LIST
35507: LIST
35508: LIST
35509: LIST
35510: LIST
35511: LIST
35512: PUSH
35513: LD_INT 27
35515: PUSH
35516: LD_INT 28
35518: PUSH
35519: LD_INT 26
35521: PUSH
35522: LD_INT 30
35524: PUSH
35525: EMPTY
35526: LIST
35527: LIST
35528: LIST
35529: LIST
35530: PUSH
35531: LD_INT 43
35533: PUSH
35534: LD_INT 44
35536: PUSH
35537: LD_INT 46
35539: PUSH
35540: LD_INT 45
35542: PUSH
35543: LD_INT 47
35545: PUSH
35546: LD_INT 49
35548: PUSH
35549: EMPTY
35550: LIST
35551: LIST
35552: LIST
35553: LIST
35554: LIST
35555: LIST
35556: PUSH
35557: EMPTY
35558: LIST
35559: LIST
35560: LIST
35561: PUSH
35562: LD_VAR 0 12
35566: ARRAY
35567: ST_TO_ADDR
// list := list isect fac_list ;
35568: LD_ADDR_VAR 0 5
35572: PUSH
35573: LD_VAR 0 5
35577: PUSH
35578: LD_VAR 0 17
35582: ISECT
35583: ST_TO_ADDR
// if not list then
35584: LD_VAR 0 5
35588: NOT
35589: IFFALSE 35593
// exit ;
35591: GO 36397
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
35593: LD_VAR 0 12
35597: PUSH
35598: LD_INT 3
35600: EQUAL
35601: PUSH
35602: LD_INT 49
35604: PUSH
35605: LD_VAR 0 5
35609: IN
35610: AND
35611: PUSH
35612: LD_INT 31
35614: PPUSH
35615: LD_VAR 0 16
35619: PPUSH
35620: CALL_OW 321
35624: PUSH
35625: LD_INT 2
35627: EQUAL
35628: AND
35629: IFFALSE 35689
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
35631: LD_INT 22
35633: PUSH
35634: LD_VAR 0 16
35638: PUSH
35639: EMPTY
35640: LIST
35641: LIST
35642: PUSH
35643: LD_INT 35
35645: PUSH
35646: LD_INT 49
35648: PUSH
35649: EMPTY
35650: LIST
35651: LIST
35652: PUSH
35653: LD_INT 91
35655: PUSH
35656: LD_VAR 0 1
35660: PUSH
35661: LD_INT 10
35663: PUSH
35664: EMPTY
35665: LIST
35666: LIST
35667: LIST
35668: PUSH
35669: EMPTY
35670: LIST
35671: LIST
35672: LIST
35673: PPUSH
35674: CALL_OW 69
35678: NOT
35679: IFFALSE 35689
// weapon := ru_time_lapser ;
35681: LD_ADDR_VAR 0 18
35685: PUSH
35686: LD_INT 49
35688: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
35689: LD_VAR 0 12
35693: PUSH
35694: LD_INT 1
35696: PUSH
35697: LD_INT 2
35699: PUSH
35700: EMPTY
35701: LIST
35702: LIST
35703: IN
35704: PUSH
35705: LD_INT 11
35707: PUSH
35708: LD_VAR 0 5
35712: IN
35713: PUSH
35714: LD_INT 30
35716: PUSH
35717: LD_VAR 0 5
35721: IN
35722: OR
35723: AND
35724: PUSH
35725: LD_INT 6
35727: PPUSH
35728: LD_VAR 0 16
35732: PPUSH
35733: CALL_OW 321
35737: PUSH
35738: LD_INT 2
35740: EQUAL
35741: AND
35742: IFFALSE 35907
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
35744: LD_INT 22
35746: PUSH
35747: LD_VAR 0 16
35751: PUSH
35752: EMPTY
35753: LIST
35754: LIST
35755: PUSH
35756: LD_INT 2
35758: PUSH
35759: LD_INT 35
35761: PUSH
35762: LD_INT 11
35764: PUSH
35765: EMPTY
35766: LIST
35767: LIST
35768: PUSH
35769: LD_INT 35
35771: PUSH
35772: LD_INT 30
35774: PUSH
35775: EMPTY
35776: LIST
35777: LIST
35778: PUSH
35779: EMPTY
35780: LIST
35781: LIST
35782: LIST
35783: PUSH
35784: LD_INT 91
35786: PUSH
35787: LD_VAR 0 1
35791: PUSH
35792: LD_INT 18
35794: PUSH
35795: EMPTY
35796: LIST
35797: LIST
35798: LIST
35799: PUSH
35800: EMPTY
35801: LIST
35802: LIST
35803: LIST
35804: PPUSH
35805: CALL_OW 69
35809: NOT
35810: PUSH
35811: LD_INT 22
35813: PUSH
35814: LD_VAR 0 16
35818: PUSH
35819: EMPTY
35820: LIST
35821: LIST
35822: PUSH
35823: LD_INT 2
35825: PUSH
35826: LD_INT 30
35828: PUSH
35829: LD_INT 32
35831: PUSH
35832: EMPTY
35833: LIST
35834: LIST
35835: PUSH
35836: LD_INT 30
35838: PUSH
35839: LD_INT 33
35841: PUSH
35842: EMPTY
35843: LIST
35844: LIST
35845: PUSH
35846: EMPTY
35847: LIST
35848: LIST
35849: LIST
35850: PUSH
35851: LD_INT 91
35853: PUSH
35854: LD_VAR 0 1
35858: PUSH
35859: LD_INT 12
35861: PUSH
35862: EMPTY
35863: LIST
35864: LIST
35865: LIST
35866: PUSH
35867: EMPTY
35868: LIST
35869: LIST
35870: LIST
35871: PUSH
35872: EMPTY
35873: LIST
35874: PPUSH
35875: CALL_OW 69
35879: PUSH
35880: LD_INT 2
35882: GREATER
35883: AND
35884: IFFALSE 35907
// weapon := [ us_radar , ar_radar ] [ nat ] ;
35886: LD_ADDR_VAR 0 18
35890: PUSH
35891: LD_INT 11
35893: PUSH
35894: LD_INT 30
35896: PUSH
35897: EMPTY
35898: LIST
35899: LIST
35900: PUSH
35901: LD_VAR 0 12
35905: ARRAY
35906: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
35907: LD_VAR 0 18
35911: NOT
35912: PUSH
35913: LD_INT 40
35915: PPUSH
35916: LD_VAR 0 16
35920: PPUSH
35921: CALL_OW 321
35925: PUSH
35926: LD_INT 2
35928: EQUAL
35929: AND
35930: PUSH
35931: LD_INT 7
35933: PUSH
35934: LD_VAR 0 5
35938: IN
35939: PUSH
35940: LD_INT 28
35942: PUSH
35943: LD_VAR 0 5
35947: IN
35948: OR
35949: PUSH
35950: LD_INT 45
35952: PUSH
35953: LD_VAR 0 5
35957: IN
35958: OR
35959: AND
35960: IFFALSE 36214
// begin hex := GetHexInfo ( x , y ) ;
35962: LD_ADDR_VAR 0 4
35966: PUSH
35967: LD_VAR 0 10
35971: PPUSH
35972: LD_VAR 0 11
35976: PPUSH
35977: CALL_OW 546
35981: ST_TO_ADDR
// if hex [ 1 ] then
35982: LD_VAR 0 4
35986: PUSH
35987: LD_INT 1
35989: ARRAY
35990: IFFALSE 35994
// exit ;
35992: GO 36397
// height := hex [ 2 ] ;
35994: LD_ADDR_VAR 0 15
35998: PUSH
35999: LD_VAR 0 4
36003: PUSH
36004: LD_INT 2
36006: ARRAY
36007: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
36008: LD_ADDR_VAR 0 14
36012: PUSH
36013: LD_INT 0
36015: PUSH
36016: LD_INT 2
36018: PUSH
36019: LD_INT 3
36021: PUSH
36022: LD_INT 5
36024: PUSH
36025: EMPTY
36026: LIST
36027: LIST
36028: LIST
36029: LIST
36030: ST_TO_ADDR
// for i in tmp do
36031: LD_ADDR_VAR 0 8
36035: PUSH
36036: LD_VAR 0 14
36040: PUSH
36041: FOR_IN
36042: IFFALSE 36212
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
36044: LD_ADDR_VAR 0 9
36048: PUSH
36049: LD_VAR 0 10
36053: PPUSH
36054: LD_VAR 0 8
36058: PPUSH
36059: LD_INT 5
36061: PPUSH
36062: CALL_OW 272
36066: PUSH
36067: LD_VAR 0 11
36071: PPUSH
36072: LD_VAR 0 8
36076: PPUSH
36077: LD_INT 5
36079: PPUSH
36080: CALL_OW 273
36084: PUSH
36085: EMPTY
36086: LIST
36087: LIST
36088: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
36089: LD_VAR 0 9
36093: PUSH
36094: LD_INT 1
36096: ARRAY
36097: PPUSH
36098: LD_VAR 0 9
36102: PUSH
36103: LD_INT 2
36105: ARRAY
36106: PPUSH
36107: CALL_OW 488
36111: IFFALSE 36210
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
36113: LD_ADDR_VAR 0 4
36117: PUSH
36118: LD_VAR 0 9
36122: PUSH
36123: LD_INT 1
36125: ARRAY
36126: PPUSH
36127: LD_VAR 0 9
36131: PUSH
36132: LD_INT 2
36134: ARRAY
36135: PPUSH
36136: CALL_OW 546
36140: ST_TO_ADDR
// if hex [ 1 ] then
36141: LD_VAR 0 4
36145: PUSH
36146: LD_INT 1
36148: ARRAY
36149: IFFALSE 36153
// continue ;
36151: GO 36041
// h := hex [ 2 ] ;
36153: LD_ADDR_VAR 0 13
36157: PUSH
36158: LD_VAR 0 4
36162: PUSH
36163: LD_INT 2
36165: ARRAY
36166: ST_TO_ADDR
// if h + 7 < height then
36167: LD_VAR 0 13
36171: PUSH
36172: LD_INT 7
36174: PLUS
36175: PUSH
36176: LD_VAR 0 15
36180: LESS
36181: IFFALSE 36210
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
36183: LD_ADDR_VAR 0 18
36187: PUSH
36188: LD_INT 7
36190: PUSH
36191: LD_INT 28
36193: PUSH
36194: LD_INT 45
36196: PUSH
36197: EMPTY
36198: LIST
36199: LIST
36200: LIST
36201: PUSH
36202: LD_VAR 0 12
36206: ARRAY
36207: ST_TO_ADDR
// break ;
36208: GO 36212
// end ; end ; end ;
36210: GO 36041
36212: POP
36213: POP
// end ; if not weapon then
36214: LD_VAR 0 18
36218: NOT
36219: IFFALSE 36279
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
36221: LD_ADDR_VAR 0 5
36225: PUSH
36226: LD_VAR 0 5
36230: PUSH
36231: LD_INT 11
36233: PUSH
36234: LD_INT 30
36236: PUSH
36237: LD_INT 49
36239: PUSH
36240: EMPTY
36241: LIST
36242: LIST
36243: LIST
36244: DIFF
36245: ST_TO_ADDR
// if not list then
36246: LD_VAR 0 5
36250: NOT
36251: IFFALSE 36255
// exit ;
36253: GO 36397
// weapon := list [ rand ( 1 , list ) ] ;
36255: LD_ADDR_VAR 0 18
36259: PUSH
36260: LD_VAR 0 5
36264: PUSH
36265: LD_INT 1
36267: PPUSH
36268: LD_VAR 0 5
36272: PPUSH
36273: CALL_OW 12
36277: ARRAY
36278: ST_TO_ADDR
// end ; if weapon then
36279: LD_VAR 0 18
36283: IFFALSE 36397
// begin tmp := CostOfWeapon ( weapon ) ;
36285: LD_ADDR_VAR 0 14
36289: PUSH
36290: LD_VAR 0 18
36294: PPUSH
36295: CALL_OW 451
36299: ST_TO_ADDR
// j := GetBase ( tower ) ;
36300: LD_ADDR_VAR 0 9
36304: PUSH
36305: LD_VAR 0 1
36309: PPUSH
36310: CALL_OW 274
36314: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
36315: LD_VAR 0 9
36319: PPUSH
36320: LD_INT 1
36322: PPUSH
36323: CALL_OW 275
36327: PUSH
36328: LD_VAR 0 14
36332: PUSH
36333: LD_INT 1
36335: ARRAY
36336: GREATEREQUAL
36337: PUSH
36338: LD_VAR 0 9
36342: PPUSH
36343: LD_INT 2
36345: PPUSH
36346: CALL_OW 275
36350: PUSH
36351: LD_VAR 0 14
36355: PUSH
36356: LD_INT 2
36358: ARRAY
36359: GREATEREQUAL
36360: AND
36361: PUSH
36362: LD_VAR 0 9
36366: PPUSH
36367: LD_INT 3
36369: PPUSH
36370: CALL_OW 275
36374: PUSH
36375: LD_VAR 0 14
36379: PUSH
36380: LD_INT 3
36382: ARRAY
36383: GREATEREQUAL
36384: AND
36385: IFFALSE 36397
// result := weapon ;
36387: LD_ADDR_VAR 0 3
36391: PUSH
36392: LD_VAR 0 18
36396: ST_TO_ADDR
// end ; end ;
36397: LD_VAR 0 3
36401: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
36402: LD_INT 0
36404: PPUSH
36405: PPUSH
// result := true ;
36406: LD_ADDR_VAR 0 3
36410: PUSH
36411: LD_INT 1
36413: ST_TO_ADDR
// if array1 = array2 then
36414: LD_VAR 0 1
36418: PUSH
36419: LD_VAR 0 2
36423: EQUAL
36424: IFFALSE 36484
// begin for i = 1 to array1 do
36426: LD_ADDR_VAR 0 4
36430: PUSH
36431: DOUBLE
36432: LD_INT 1
36434: DEC
36435: ST_TO_ADDR
36436: LD_VAR 0 1
36440: PUSH
36441: FOR_TO
36442: IFFALSE 36480
// if array1 [ i ] <> array2 [ i ] then
36444: LD_VAR 0 1
36448: PUSH
36449: LD_VAR 0 4
36453: ARRAY
36454: PUSH
36455: LD_VAR 0 2
36459: PUSH
36460: LD_VAR 0 4
36464: ARRAY
36465: NONEQUAL
36466: IFFALSE 36478
// begin result := false ;
36468: LD_ADDR_VAR 0 3
36472: PUSH
36473: LD_INT 0
36475: ST_TO_ADDR
// break ;
36476: GO 36480
// end ;
36478: GO 36441
36480: POP
36481: POP
// end else
36482: GO 36492
// result := false ;
36484: LD_ADDR_VAR 0 3
36488: PUSH
36489: LD_INT 0
36491: ST_TO_ADDR
// end ;
36492: LD_VAR 0 3
36496: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
36497: LD_INT 0
36499: PPUSH
36500: PPUSH
// if not array1 or not array2 then
36501: LD_VAR 0 1
36505: NOT
36506: PUSH
36507: LD_VAR 0 2
36511: NOT
36512: OR
36513: IFFALSE 36517
// exit ;
36515: GO 36581
// result := true ;
36517: LD_ADDR_VAR 0 3
36521: PUSH
36522: LD_INT 1
36524: ST_TO_ADDR
// for i = 1 to array1 do
36525: LD_ADDR_VAR 0 4
36529: PUSH
36530: DOUBLE
36531: LD_INT 1
36533: DEC
36534: ST_TO_ADDR
36535: LD_VAR 0 1
36539: PUSH
36540: FOR_TO
36541: IFFALSE 36579
// if array1 [ i ] <> array2 [ i ] then
36543: LD_VAR 0 1
36547: PUSH
36548: LD_VAR 0 4
36552: ARRAY
36553: PUSH
36554: LD_VAR 0 2
36558: PUSH
36559: LD_VAR 0 4
36563: ARRAY
36564: NONEQUAL
36565: IFFALSE 36577
// begin result := false ;
36567: LD_ADDR_VAR 0 3
36571: PUSH
36572: LD_INT 0
36574: ST_TO_ADDR
// break ;
36575: GO 36579
// end ;
36577: GO 36540
36579: POP
36580: POP
// end ;
36581: LD_VAR 0 3
36585: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
36586: LD_INT 0
36588: PPUSH
36589: PPUSH
36590: PPUSH
// pom := GetBase ( fac ) ;
36591: LD_ADDR_VAR 0 5
36595: PUSH
36596: LD_VAR 0 1
36600: PPUSH
36601: CALL_OW 274
36605: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
36606: LD_ADDR_VAR 0 4
36610: PUSH
36611: LD_VAR 0 2
36615: PUSH
36616: LD_INT 1
36618: ARRAY
36619: PPUSH
36620: LD_VAR 0 2
36624: PUSH
36625: LD_INT 2
36627: ARRAY
36628: PPUSH
36629: LD_VAR 0 2
36633: PUSH
36634: LD_INT 3
36636: ARRAY
36637: PPUSH
36638: LD_VAR 0 2
36642: PUSH
36643: LD_INT 4
36645: ARRAY
36646: PPUSH
36647: CALL_OW 449
36651: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
36652: LD_ADDR_VAR 0 3
36656: PUSH
36657: LD_VAR 0 5
36661: PPUSH
36662: LD_INT 1
36664: PPUSH
36665: CALL_OW 275
36669: PUSH
36670: LD_VAR 0 4
36674: PUSH
36675: LD_INT 1
36677: ARRAY
36678: GREATEREQUAL
36679: PUSH
36680: LD_VAR 0 5
36684: PPUSH
36685: LD_INT 2
36687: PPUSH
36688: CALL_OW 275
36692: PUSH
36693: LD_VAR 0 4
36697: PUSH
36698: LD_INT 2
36700: ARRAY
36701: GREATEREQUAL
36702: AND
36703: PUSH
36704: LD_VAR 0 5
36708: PPUSH
36709: LD_INT 3
36711: PPUSH
36712: CALL_OW 275
36716: PUSH
36717: LD_VAR 0 4
36721: PUSH
36722: LD_INT 3
36724: ARRAY
36725: GREATEREQUAL
36726: AND
36727: ST_TO_ADDR
// end ;
36728: LD_VAR 0 3
36732: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
36733: LD_INT 0
36735: PPUSH
36736: PPUSH
36737: PPUSH
36738: PPUSH
// pom := GetBase ( building ) ;
36739: LD_ADDR_VAR 0 3
36743: PUSH
36744: LD_VAR 0 1
36748: PPUSH
36749: CALL_OW 274
36753: ST_TO_ADDR
// if not pom then
36754: LD_VAR 0 3
36758: NOT
36759: IFFALSE 36763
// exit ;
36761: GO 36933
// btype := GetBType ( building ) ;
36763: LD_ADDR_VAR 0 5
36767: PUSH
36768: LD_VAR 0 1
36772: PPUSH
36773: CALL_OW 266
36777: ST_TO_ADDR
// if btype = b_armoury then
36778: LD_VAR 0 5
36782: PUSH
36783: LD_INT 4
36785: EQUAL
36786: IFFALSE 36796
// btype := b_barracks ;
36788: LD_ADDR_VAR 0 5
36792: PUSH
36793: LD_INT 5
36795: ST_TO_ADDR
// if btype = b_depot then
36796: LD_VAR 0 5
36800: PUSH
36801: LD_INT 0
36803: EQUAL
36804: IFFALSE 36814
// btype := b_warehouse ;
36806: LD_ADDR_VAR 0 5
36810: PUSH
36811: LD_INT 1
36813: ST_TO_ADDR
// if btype = b_workshop then
36814: LD_VAR 0 5
36818: PUSH
36819: LD_INT 2
36821: EQUAL
36822: IFFALSE 36832
// btype := b_factory ;
36824: LD_ADDR_VAR 0 5
36828: PUSH
36829: LD_INT 3
36831: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
36832: LD_ADDR_VAR 0 4
36836: PUSH
36837: LD_VAR 0 5
36841: PPUSH
36842: LD_VAR 0 1
36846: PPUSH
36847: CALL_OW 248
36851: PPUSH
36852: CALL_OW 450
36856: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
36857: LD_ADDR_VAR 0 2
36861: PUSH
36862: LD_VAR 0 3
36866: PPUSH
36867: LD_INT 1
36869: PPUSH
36870: CALL_OW 275
36874: PUSH
36875: LD_VAR 0 4
36879: PUSH
36880: LD_INT 1
36882: ARRAY
36883: GREATEREQUAL
36884: PUSH
36885: LD_VAR 0 3
36889: PPUSH
36890: LD_INT 2
36892: PPUSH
36893: CALL_OW 275
36897: PUSH
36898: LD_VAR 0 4
36902: PUSH
36903: LD_INT 2
36905: ARRAY
36906: GREATEREQUAL
36907: AND
36908: PUSH
36909: LD_VAR 0 3
36913: PPUSH
36914: LD_INT 3
36916: PPUSH
36917: CALL_OW 275
36921: PUSH
36922: LD_VAR 0 4
36926: PUSH
36927: LD_INT 3
36929: ARRAY
36930: GREATEREQUAL
36931: AND
36932: ST_TO_ADDR
// end ;
36933: LD_VAR 0 2
36937: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
36938: LD_INT 0
36940: PPUSH
36941: PPUSH
36942: PPUSH
// pom := GetBase ( building ) ;
36943: LD_ADDR_VAR 0 4
36947: PUSH
36948: LD_VAR 0 1
36952: PPUSH
36953: CALL_OW 274
36957: ST_TO_ADDR
// if not pom then
36958: LD_VAR 0 4
36962: NOT
36963: IFFALSE 36967
// exit ;
36965: GO 37068
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
36967: LD_ADDR_VAR 0 5
36971: PUSH
36972: LD_VAR 0 2
36976: PPUSH
36977: LD_VAR 0 1
36981: PPUSH
36982: CALL_OW 248
36986: PPUSH
36987: CALL_OW 450
36991: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
36992: LD_ADDR_VAR 0 3
36996: PUSH
36997: LD_VAR 0 4
37001: PPUSH
37002: LD_INT 1
37004: PPUSH
37005: CALL_OW 275
37009: PUSH
37010: LD_VAR 0 5
37014: PUSH
37015: LD_INT 1
37017: ARRAY
37018: GREATEREQUAL
37019: PUSH
37020: LD_VAR 0 4
37024: PPUSH
37025: LD_INT 2
37027: PPUSH
37028: CALL_OW 275
37032: PUSH
37033: LD_VAR 0 5
37037: PUSH
37038: LD_INT 2
37040: ARRAY
37041: GREATEREQUAL
37042: AND
37043: PUSH
37044: LD_VAR 0 4
37048: PPUSH
37049: LD_INT 3
37051: PPUSH
37052: CALL_OW 275
37056: PUSH
37057: LD_VAR 0 5
37061: PUSH
37062: LD_INT 3
37064: ARRAY
37065: GREATEREQUAL
37066: AND
37067: ST_TO_ADDR
// end ;
37068: LD_VAR 0 3
37072: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
37073: LD_INT 0
37075: PPUSH
37076: PPUSH
37077: PPUSH
37078: PPUSH
37079: PPUSH
37080: PPUSH
37081: PPUSH
37082: PPUSH
37083: PPUSH
37084: PPUSH
37085: PPUSH
// result := false ;
37086: LD_ADDR_VAR 0 8
37090: PUSH
37091: LD_INT 0
37093: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
37094: LD_VAR 0 5
37098: NOT
37099: PUSH
37100: LD_VAR 0 1
37104: NOT
37105: OR
37106: PUSH
37107: LD_VAR 0 2
37111: NOT
37112: OR
37113: PUSH
37114: LD_VAR 0 3
37118: NOT
37119: OR
37120: IFFALSE 37124
// exit ;
37122: GO 37938
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
37124: LD_ADDR_VAR 0 14
37128: PUSH
37129: LD_VAR 0 1
37133: PPUSH
37134: LD_VAR 0 2
37138: PPUSH
37139: LD_VAR 0 3
37143: PPUSH
37144: LD_VAR 0 4
37148: PPUSH
37149: LD_VAR 0 5
37153: PUSH
37154: LD_INT 1
37156: ARRAY
37157: PPUSH
37158: CALL_OW 248
37162: PPUSH
37163: LD_INT 0
37165: PPUSH
37166: CALL 39175 0 6
37170: ST_TO_ADDR
// if not hexes then
37171: LD_VAR 0 14
37175: NOT
37176: IFFALSE 37180
// exit ;
37178: GO 37938
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
37180: LD_ADDR_VAR 0 17
37184: PUSH
37185: LD_VAR 0 5
37189: PPUSH
37190: LD_INT 22
37192: PUSH
37193: LD_VAR 0 13
37197: PPUSH
37198: CALL_OW 255
37202: PUSH
37203: EMPTY
37204: LIST
37205: LIST
37206: PUSH
37207: LD_INT 2
37209: PUSH
37210: LD_INT 30
37212: PUSH
37213: LD_INT 0
37215: PUSH
37216: EMPTY
37217: LIST
37218: LIST
37219: PUSH
37220: LD_INT 30
37222: PUSH
37223: LD_INT 1
37225: PUSH
37226: EMPTY
37227: LIST
37228: LIST
37229: PUSH
37230: EMPTY
37231: LIST
37232: LIST
37233: LIST
37234: PUSH
37235: EMPTY
37236: LIST
37237: LIST
37238: PPUSH
37239: CALL_OW 72
37243: ST_TO_ADDR
// for i = 1 to hexes do
37244: LD_ADDR_VAR 0 9
37248: PUSH
37249: DOUBLE
37250: LD_INT 1
37252: DEC
37253: ST_TO_ADDR
37254: LD_VAR 0 14
37258: PUSH
37259: FOR_TO
37260: IFFALSE 37936
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
37262: LD_ADDR_VAR 0 13
37266: PUSH
37267: LD_VAR 0 14
37271: PUSH
37272: LD_VAR 0 9
37276: ARRAY
37277: PUSH
37278: LD_INT 1
37280: ARRAY
37281: PPUSH
37282: LD_VAR 0 14
37286: PUSH
37287: LD_VAR 0 9
37291: ARRAY
37292: PUSH
37293: LD_INT 2
37295: ARRAY
37296: PPUSH
37297: CALL_OW 428
37301: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
37302: LD_VAR 0 14
37306: PUSH
37307: LD_VAR 0 9
37311: ARRAY
37312: PUSH
37313: LD_INT 1
37315: ARRAY
37316: PPUSH
37317: LD_VAR 0 14
37321: PUSH
37322: LD_VAR 0 9
37326: ARRAY
37327: PUSH
37328: LD_INT 2
37330: ARRAY
37331: PPUSH
37332: CALL_OW 351
37336: PUSH
37337: LD_VAR 0 14
37341: PUSH
37342: LD_VAR 0 9
37346: ARRAY
37347: PUSH
37348: LD_INT 1
37350: ARRAY
37351: PPUSH
37352: LD_VAR 0 14
37356: PUSH
37357: LD_VAR 0 9
37361: ARRAY
37362: PUSH
37363: LD_INT 2
37365: ARRAY
37366: PPUSH
37367: CALL_OW 488
37371: NOT
37372: OR
37373: PUSH
37374: LD_VAR 0 13
37378: PPUSH
37379: CALL_OW 247
37383: PUSH
37384: LD_INT 3
37386: EQUAL
37387: OR
37388: IFFALSE 37394
// exit ;
37390: POP
37391: POP
37392: GO 37938
// if not tmp then
37394: LD_VAR 0 13
37398: NOT
37399: IFFALSE 37403
// continue ;
37401: GO 37259
// result := true ;
37403: LD_ADDR_VAR 0 8
37407: PUSH
37408: LD_INT 1
37410: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
37411: LD_VAR 0 6
37415: PUSH
37416: LD_VAR 0 13
37420: PPUSH
37421: CALL_OW 247
37425: PUSH
37426: LD_INT 2
37428: EQUAL
37429: AND
37430: PUSH
37431: LD_VAR 0 13
37435: PPUSH
37436: CALL_OW 263
37440: PUSH
37441: LD_INT 1
37443: EQUAL
37444: AND
37445: IFFALSE 37609
// begin if IsDrivenBy ( tmp ) then
37447: LD_VAR 0 13
37451: PPUSH
37452: CALL_OW 311
37456: IFFALSE 37460
// continue ;
37458: GO 37259
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
37460: LD_VAR 0 6
37464: PPUSH
37465: LD_INT 3
37467: PUSH
37468: LD_INT 60
37470: PUSH
37471: EMPTY
37472: LIST
37473: PUSH
37474: EMPTY
37475: LIST
37476: LIST
37477: PUSH
37478: LD_INT 3
37480: PUSH
37481: LD_INT 55
37483: PUSH
37484: EMPTY
37485: LIST
37486: PUSH
37487: EMPTY
37488: LIST
37489: LIST
37490: PUSH
37491: EMPTY
37492: LIST
37493: LIST
37494: PPUSH
37495: CALL_OW 72
37499: IFFALSE 37607
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
37501: LD_ADDR_VAR 0 18
37505: PUSH
37506: LD_VAR 0 6
37510: PPUSH
37511: LD_INT 3
37513: PUSH
37514: LD_INT 60
37516: PUSH
37517: EMPTY
37518: LIST
37519: PUSH
37520: EMPTY
37521: LIST
37522: LIST
37523: PUSH
37524: LD_INT 3
37526: PUSH
37527: LD_INT 55
37529: PUSH
37530: EMPTY
37531: LIST
37532: PUSH
37533: EMPTY
37534: LIST
37535: LIST
37536: PUSH
37537: EMPTY
37538: LIST
37539: LIST
37540: PPUSH
37541: CALL_OW 72
37545: PUSH
37546: LD_INT 1
37548: ARRAY
37549: ST_TO_ADDR
// if IsInUnit ( driver ) then
37550: LD_VAR 0 18
37554: PPUSH
37555: CALL_OW 310
37559: IFFALSE 37570
// ComExit ( driver ) ;
37561: LD_VAR 0 18
37565: PPUSH
37566: CALL 62359 0 1
// AddComEnterUnit ( driver , tmp ) ;
37570: LD_VAR 0 18
37574: PPUSH
37575: LD_VAR 0 13
37579: PPUSH
37580: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
37584: LD_VAR 0 18
37588: PPUSH
37589: LD_VAR 0 7
37593: PPUSH
37594: CALL_OW 173
// AddComExitVehicle ( driver ) ;
37598: LD_VAR 0 18
37602: PPUSH
37603: CALL_OW 181
// end ; continue ;
37607: GO 37259
// end ; if not cleaners or not tmp in cleaners then
37609: LD_VAR 0 6
37613: NOT
37614: PUSH
37615: LD_VAR 0 13
37619: PUSH
37620: LD_VAR 0 6
37624: IN
37625: NOT
37626: OR
37627: IFFALSE 37934
// begin if dep then
37629: LD_VAR 0 17
37633: IFFALSE 37769
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
37635: LD_ADDR_VAR 0 16
37639: PUSH
37640: LD_VAR 0 17
37644: PUSH
37645: LD_INT 1
37647: ARRAY
37648: PPUSH
37649: CALL_OW 250
37653: PPUSH
37654: LD_VAR 0 17
37658: PUSH
37659: LD_INT 1
37661: ARRAY
37662: PPUSH
37663: CALL_OW 254
37667: PPUSH
37668: LD_INT 5
37670: PPUSH
37671: CALL_OW 272
37675: PUSH
37676: LD_VAR 0 17
37680: PUSH
37681: LD_INT 1
37683: ARRAY
37684: PPUSH
37685: CALL_OW 251
37689: PPUSH
37690: LD_VAR 0 17
37694: PUSH
37695: LD_INT 1
37697: ARRAY
37698: PPUSH
37699: CALL_OW 254
37703: PPUSH
37704: LD_INT 5
37706: PPUSH
37707: CALL_OW 273
37711: PUSH
37712: EMPTY
37713: LIST
37714: LIST
37715: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
37716: LD_VAR 0 16
37720: PUSH
37721: LD_INT 1
37723: ARRAY
37724: PPUSH
37725: LD_VAR 0 16
37729: PUSH
37730: LD_INT 2
37732: ARRAY
37733: PPUSH
37734: CALL_OW 488
37738: IFFALSE 37769
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
37740: LD_VAR 0 13
37744: PPUSH
37745: LD_VAR 0 16
37749: PUSH
37750: LD_INT 1
37752: ARRAY
37753: PPUSH
37754: LD_VAR 0 16
37758: PUSH
37759: LD_INT 2
37761: ARRAY
37762: PPUSH
37763: CALL_OW 111
// continue ;
37767: GO 37259
// end ; end ; r := GetDir ( tmp ) ;
37769: LD_ADDR_VAR 0 15
37773: PUSH
37774: LD_VAR 0 13
37778: PPUSH
37779: CALL_OW 254
37783: ST_TO_ADDR
// if r = 5 then
37784: LD_VAR 0 15
37788: PUSH
37789: LD_INT 5
37791: EQUAL
37792: IFFALSE 37802
// r := 0 ;
37794: LD_ADDR_VAR 0 15
37798: PUSH
37799: LD_INT 0
37801: ST_TO_ADDR
// for j = r to 5 do
37802: LD_ADDR_VAR 0 10
37806: PUSH
37807: DOUBLE
37808: LD_VAR 0 15
37812: DEC
37813: ST_TO_ADDR
37814: LD_INT 5
37816: PUSH
37817: FOR_TO
37818: IFFALSE 37932
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
37820: LD_ADDR_VAR 0 11
37824: PUSH
37825: LD_VAR 0 13
37829: PPUSH
37830: CALL_OW 250
37834: PPUSH
37835: LD_VAR 0 10
37839: PPUSH
37840: LD_INT 2
37842: PPUSH
37843: CALL_OW 272
37847: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
37848: LD_ADDR_VAR 0 12
37852: PUSH
37853: LD_VAR 0 13
37857: PPUSH
37858: CALL_OW 251
37862: PPUSH
37863: LD_VAR 0 10
37867: PPUSH
37868: LD_INT 2
37870: PPUSH
37871: CALL_OW 273
37875: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
37876: LD_VAR 0 11
37880: PPUSH
37881: LD_VAR 0 12
37885: PPUSH
37886: CALL_OW 488
37890: PUSH
37891: LD_VAR 0 11
37895: PPUSH
37896: LD_VAR 0 12
37900: PPUSH
37901: CALL_OW 428
37905: NOT
37906: AND
37907: IFFALSE 37930
// begin ComMoveXY ( tmp , _x , _y ) ;
37909: LD_VAR 0 13
37913: PPUSH
37914: LD_VAR 0 11
37918: PPUSH
37919: LD_VAR 0 12
37923: PPUSH
37924: CALL_OW 111
// break ;
37928: GO 37932
// end ; end ;
37930: GO 37817
37932: POP
37933: POP
// end ; end ;
37934: GO 37259
37936: POP
37937: POP
// end ;
37938: LD_VAR 0 8
37942: RET
// export function BuildingTechInvented ( side , btype ) ; begin
37943: LD_INT 0
37945: PPUSH
// result := true ;
37946: LD_ADDR_VAR 0 3
37950: PUSH
37951: LD_INT 1
37953: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
37954: LD_VAR 0 2
37958: PUSH
37959: LD_INT 24
37961: DOUBLE
37962: EQUAL
37963: IFTRUE 37973
37965: LD_INT 33
37967: DOUBLE
37968: EQUAL
37969: IFTRUE 37973
37971: GO 37998
37973: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
37974: LD_ADDR_VAR 0 3
37978: PUSH
37979: LD_INT 32
37981: PPUSH
37982: LD_VAR 0 1
37986: PPUSH
37987: CALL_OW 321
37991: PUSH
37992: LD_INT 2
37994: EQUAL
37995: ST_TO_ADDR
37996: GO 38318
37998: LD_INT 20
38000: DOUBLE
38001: EQUAL
38002: IFTRUE 38006
38004: GO 38031
38006: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
38007: LD_ADDR_VAR 0 3
38011: PUSH
38012: LD_INT 6
38014: PPUSH
38015: LD_VAR 0 1
38019: PPUSH
38020: CALL_OW 321
38024: PUSH
38025: LD_INT 2
38027: EQUAL
38028: ST_TO_ADDR
38029: GO 38318
38031: LD_INT 22
38033: DOUBLE
38034: EQUAL
38035: IFTRUE 38045
38037: LD_INT 36
38039: DOUBLE
38040: EQUAL
38041: IFTRUE 38045
38043: GO 38070
38045: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
38046: LD_ADDR_VAR 0 3
38050: PUSH
38051: LD_INT 15
38053: PPUSH
38054: LD_VAR 0 1
38058: PPUSH
38059: CALL_OW 321
38063: PUSH
38064: LD_INT 2
38066: EQUAL
38067: ST_TO_ADDR
38068: GO 38318
38070: LD_INT 30
38072: DOUBLE
38073: EQUAL
38074: IFTRUE 38078
38076: GO 38103
38078: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
38079: LD_ADDR_VAR 0 3
38083: PUSH
38084: LD_INT 20
38086: PPUSH
38087: LD_VAR 0 1
38091: PPUSH
38092: CALL_OW 321
38096: PUSH
38097: LD_INT 2
38099: EQUAL
38100: ST_TO_ADDR
38101: GO 38318
38103: LD_INT 28
38105: DOUBLE
38106: EQUAL
38107: IFTRUE 38117
38109: LD_INT 21
38111: DOUBLE
38112: EQUAL
38113: IFTRUE 38117
38115: GO 38142
38117: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
38118: LD_ADDR_VAR 0 3
38122: PUSH
38123: LD_INT 21
38125: PPUSH
38126: LD_VAR 0 1
38130: PPUSH
38131: CALL_OW 321
38135: PUSH
38136: LD_INT 2
38138: EQUAL
38139: ST_TO_ADDR
38140: GO 38318
38142: LD_INT 16
38144: DOUBLE
38145: EQUAL
38146: IFTRUE 38150
38148: GO 38177
38150: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
38151: LD_ADDR_VAR 0 3
38155: PUSH
38156: LD_EXP 41
38160: PPUSH
38161: LD_VAR 0 1
38165: PPUSH
38166: CALL_OW 321
38170: PUSH
38171: LD_INT 2
38173: EQUAL
38174: ST_TO_ADDR
38175: GO 38318
38177: LD_INT 19
38179: DOUBLE
38180: EQUAL
38181: IFTRUE 38191
38183: LD_INT 23
38185: DOUBLE
38186: EQUAL
38187: IFTRUE 38191
38189: GO 38218
38191: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
38192: LD_ADDR_VAR 0 3
38196: PUSH
38197: LD_EXP 40
38201: PPUSH
38202: LD_VAR 0 1
38206: PPUSH
38207: CALL_OW 321
38211: PUSH
38212: LD_INT 2
38214: EQUAL
38215: ST_TO_ADDR
38216: GO 38318
38218: LD_INT 17
38220: DOUBLE
38221: EQUAL
38222: IFTRUE 38226
38224: GO 38251
38226: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
38227: LD_ADDR_VAR 0 3
38231: PUSH
38232: LD_INT 39
38234: PPUSH
38235: LD_VAR 0 1
38239: PPUSH
38240: CALL_OW 321
38244: PUSH
38245: LD_INT 2
38247: EQUAL
38248: ST_TO_ADDR
38249: GO 38318
38251: LD_INT 18
38253: DOUBLE
38254: EQUAL
38255: IFTRUE 38259
38257: GO 38284
38259: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
38260: LD_ADDR_VAR 0 3
38264: PUSH
38265: LD_INT 40
38267: PPUSH
38268: LD_VAR 0 1
38272: PPUSH
38273: CALL_OW 321
38277: PUSH
38278: LD_INT 2
38280: EQUAL
38281: ST_TO_ADDR
38282: GO 38318
38284: LD_INT 27
38286: DOUBLE
38287: EQUAL
38288: IFTRUE 38292
38290: GO 38317
38292: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
38293: LD_ADDR_VAR 0 3
38297: PUSH
38298: LD_INT 35
38300: PPUSH
38301: LD_VAR 0 1
38305: PPUSH
38306: CALL_OW 321
38310: PUSH
38311: LD_INT 2
38313: EQUAL
38314: ST_TO_ADDR
38315: GO 38318
38317: POP
// end ;
38318: LD_VAR 0 3
38322: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
38323: LD_INT 0
38325: PPUSH
38326: PPUSH
38327: PPUSH
38328: PPUSH
38329: PPUSH
38330: PPUSH
38331: PPUSH
38332: PPUSH
38333: PPUSH
38334: PPUSH
38335: PPUSH
// result := false ;
38336: LD_ADDR_VAR 0 6
38340: PUSH
38341: LD_INT 0
38343: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
38344: LD_VAR 0 1
38348: NOT
38349: PUSH
38350: LD_VAR 0 1
38354: PPUSH
38355: CALL_OW 266
38359: PUSH
38360: LD_INT 0
38362: PUSH
38363: LD_INT 1
38365: PUSH
38366: EMPTY
38367: LIST
38368: LIST
38369: IN
38370: NOT
38371: OR
38372: PUSH
38373: LD_VAR 0 2
38377: NOT
38378: OR
38379: PUSH
38380: LD_VAR 0 5
38384: PUSH
38385: LD_INT 0
38387: PUSH
38388: LD_INT 1
38390: PUSH
38391: LD_INT 2
38393: PUSH
38394: LD_INT 3
38396: PUSH
38397: LD_INT 4
38399: PUSH
38400: LD_INT 5
38402: PUSH
38403: EMPTY
38404: LIST
38405: LIST
38406: LIST
38407: LIST
38408: LIST
38409: LIST
38410: IN
38411: NOT
38412: OR
38413: PUSH
38414: LD_VAR 0 3
38418: PPUSH
38419: LD_VAR 0 4
38423: PPUSH
38424: CALL_OW 488
38428: NOT
38429: OR
38430: IFFALSE 38434
// exit ;
38432: GO 39170
// side := GetSide ( depot ) ;
38434: LD_ADDR_VAR 0 9
38438: PUSH
38439: LD_VAR 0 1
38443: PPUSH
38444: CALL_OW 255
38448: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
38449: LD_VAR 0 9
38453: PPUSH
38454: LD_VAR 0 2
38458: PPUSH
38459: CALL 37943 0 2
38463: NOT
38464: IFFALSE 38468
// exit ;
38466: GO 39170
// pom := GetBase ( depot ) ;
38468: LD_ADDR_VAR 0 10
38472: PUSH
38473: LD_VAR 0 1
38477: PPUSH
38478: CALL_OW 274
38482: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
38483: LD_ADDR_VAR 0 11
38487: PUSH
38488: LD_VAR 0 2
38492: PPUSH
38493: LD_VAR 0 1
38497: PPUSH
38498: CALL_OW 248
38502: PPUSH
38503: CALL_OW 450
38507: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
38508: LD_VAR 0 10
38512: PPUSH
38513: LD_INT 1
38515: PPUSH
38516: CALL_OW 275
38520: PUSH
38521: LD_VAR 0 11
38525: PUSH
38526: LD_INT 1
38528: ARRAY
38529: GREATEREQUAL
38530: PUSH
38531: LD_VAR 0 10
38535: PPUSH
38536: LD_INT 2
38538: PPUSH
38539: CALL_OW 275
38543: PUSH
38544: LD_VAR 0 11
38548: PUSH
38549: LD_INT 2
38551: ARRAY
38552: GREATEREQUAL
38553: AND
38554: PUSH
38555: LD_VAR 0 10
38559: PPUSH
38560: LD_INT 3
38562: PPUSH
38563: CALL_OW 275
38567: PUSH
38568: LD_VAR 0 11
38572: PUSH
38573: LD_INT 3
38575: ARRAY
38576: GREATEREQUAL
38577: AND
38578: NOT
38579: IFFALSE 38583
// exit ;
38581: GO 39170
// if GetBType ( depot ) = b_depot then
38583: LD_VAR 0 1
38587: PPUSH
38588: CALL_OW 266
38592: PUSH
38593: LD_INT 0
38595: EQUAL
38596: IFFALSE 38608
// dist := 28 else
38598: LD_ADDR_VAR 0 14
38602: PUSH
38603: LD_INT 28
38605: ST_TO_ADDR
38606: GO 38616
// dist := 36 ;
38608: LD_ADDR_VAR 0 14
38612: PUSH
38613: LD_INT 36
38615: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
38616: LD_VAR 0 1
38620: PPUSH
38621: LD_VAR 0 3
38625: PPUSH
38626: LD_VAR 0 4
38630: PPUSH
38631: CALL_OW 297
38635: PUSH
38636: LD_VAR 0 14
38640: GREATER
38641: IFFALSE 38645
// exit ;
38643: GO 39170
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
38645: LD_ADDR_VAR 0 12
38649: PUSH
38650: LD_VAR 0 2
38654: PPUSH
38655: LD_VAR 0 3
38659: PPUSH
38660: LD_VAR 0 4
38664: PPUSH
38665: LD_VAR 0 5
38669: PPUSH
38670: LD_VAR 0 1
38674: PPUSH
38675: CALL_OW 248
38679: PPUSH
38680: LD_INT 0
38682: PPUSH
38683: CALL 39175 0 6
38687: ST_TO_ADDR
// if not hexes then
38688: LD_VAR 0 12
38692: NOT
38693: IFFALSE 38697
// exit ;
38695: GO 39170
// hex := GetHexInfo ( x , y ) ;
38697: LD_ADDR_VAR 0 15
38701: PUSH
38702: LD_VAR 0 3
38706: PPUSH
38707: LD_VAR 0 4
38711: PPUSH
38712: CALL_OW 546
38716: ST_TO_ADDR
// if hex [ 1 ] then
38717: LD_VAR 0 15
38721: PUSH
38722: LD_INT 1
38724: ARRAY
38725: IFFALSE 38729
// exit ;
38727: GO 39170
// height := hex [ 2 ] ;
38729: LD_ADDR_VAR 0 13
38733: PUSH
38734: LD_VAR 0 15
38738: PUSH
38739: LD_INT 2
38741: ARRAY
38742: ST_TO_ADDR
// for i = 1 to hexes do
38743: LD_ADDR_VAR 0 7
38747: PUSH
38748: DOUBLE
38749: LD_INT 1
38751: DEC
38752: ST_TO_ADDR
38753: LD_VAR 0 12
38757: PUSH
38758: FOR_TO
38759: IFFALSE 39089
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
38761: LD_VAR 0 12
38765: PUSH
38766: LD_VAR 0 7
38770: ARRAY
38771: PUSH
38772: LD_INT 1
38774: ARRAY
38775: PPUSH
38776: LD_VAR 0 12
38780: PUSH
38781: LD_VAR 0 7
38785: ARRAY
38786: PUSH
38787: LD_INT 2
38789: ARRAY
38790: PPUSH
38791: CALL_OW 488
38795: NOT
38796: PUSH
38797: LD_VAR 0 12
38801: PUSH
38802: LD_VAR 0 7
38806: ARRAY
38807: PUSH
38808: LD_INT 1
38810: ARRAY
38811: PPUSH
38812: LD_VAR 0 12
38816: PUSH
38817: LD_VAR 0 7
38821: ARRAY
38822: PUSH
38823: LD_INT 2
38825: ARRAY
38826: PPUSH
38827: CALL_OW 428
38831: PUSH
38832: LD_INT 0
38834: GREATER
38835: OR
38836: PUSH
38837: LD_VAR 0 12
38841: PUSH
38842: LD_VAR 0 7
38846: ARRAY
38847: PUSH
38848: LD_INT 1
38850: ARRAY
38851: PPUSH
38852: LD_VAR 0 12
38856: PUSH
38857: LD_VAR 0 7
38861: ARRAY
38862: PUSH
38863: LD_INT 2
38865: ARRAY
38866: PPUSH
38867: CALL_OW 351
38871: OR
38872: IFFALSE 38878
// exit ;
38874: POP
38875: POP
38876: GO 39170
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
38878: LD_ADDR_VAR 0 8
38882: PUSH
38883: LD_VAR 0 12
38887: PUSH
38888: LD_VAR 0 7
38892: ARRAY
38893: PUSH
38894: LD_INT 1
38896: ARRAY
38897: PPUSH
38898: LD_VAR 0 12
38902: PUSH
38903: LD_VAR 0 7
38907: ARRAY
38908: PUSH
38909: LD_INT 2
38911: ARRAY
38912: PPUSH
38913: CALL_OW 546
38917: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
38918: LD_VAR 0 8
38922: PUSH
38923: LD_INT 1
38925: ARRAY
38926: PUSH
38927: LD_VAR 0 8
38931: PUSH
38932: LD_INT 2
38934: ARRAY
38935: PUSH
38936: LD_VAR 0 13
38940: PUSH
38941: LD_INT 2
38943: PLUS
38944: GREATER
38945: OR
38946: PUSH
38947: LD_VAR 0 8
38951: PUSH
38952: LD_INT 2
38954: ARRAY
38955: PUSH
38956: LD_VAR 0 13
38960: PUSH
38961: LD_INT 2
38963: MINUS
38964: LESS
38965: OR
38966: PUSH
38967: LD_VAR 0 8
38971: PUSH
38972: LD_INT 3
38974: ARRAY
38975: PUSH
38976: LD_INT 0
38978: PUSH
38979: LD_INT 8
38981: PUSH
38982: LD_INT 9
38984: PUSH
38985: LD_INT 10
38987: PUSH
38988: LD_INT 11
38990: PUSH
38991: LD_INT 12
38993: PUSH
38994: LD_INT 13
38996: PUSH
38997: LD_INT 16
38999: PUSH
39000: LD_INT 17
39002: PUSH
39003: LD_INT 18
39005: PUSH
39006: LD_INT 19
39008: PUSH
39009: LD_INT 20
39011: PUSH
39012: LD_INT 21
39014: PUSH
39015: EMPTY
39016: LIST
39017: LIST
39018: LIST
39019: LIST
39020: LIST
39021: LIST
39022: LIST
39023: LIST
39024: LIST
39025: LIST
39026: LIST
39027: LIST
39028: LIST
39029: IN
39030: NOT
39031: OR
39032: PUSH
39033: LD_VAR 0 8
39037: PUSH
39038: LD_INT 5
39040: ARRAY
39041: NOT
39042: OR
39043: PUSH
39044: LD_VAR 0 8
39048: PUSH
39049: LD_INT 6
39051: ARRAY
39052: PUSH
39053: LD_INT 1
39055: PUSH
39056: LD_INT 2
39058: PUSH
39059: LD_INT 7
39061: PUSH
39062: LD_INT 9
39064: PUSH
39065: LD_INT 10
39067: PUSH
39068: LD_INT 11
39070: PUSH
39071: EMPTY
39072: LIST
39073: LIST
39074: LIST
39075: LIST
39076: LIST
39077: LIST
39078: IN
39079: NOT
39080: OR
39081: IFFALSE 39087
// exit ;
39083: POP
39084: POP
39085: GO 39170
// end ;
39087: GO 38758
39089: POP
39090: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
39091: LD_VAR 0 9
39095: PPUSH
39096: LD_VAR 0 3
39100: PPUSH
39101: LD_VAR 0 4
39105: PPUSH
39106: LD_INT 20
39108: PPUSH
39109: CALL 31116 0 4
39113: PUSH
39114: LD_INT 4
39116: ARRAY
39117: IFFALSE 39121
// exit ;
39119: GO 39170
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
39121: LD_VAR 0 2
39125: PUSH
39126: LD_INT 29
39128: PUSH
39129: LD_INT 30
39131: PUSH
39132: EMPTY
39133: LIST
39134: LIST
39135: IN
39136: PUSH
39137: LD_VAR 0 3
39141: PPUSH
39142: LD_VAR 0 4
39146: PPUSH
39147: LD_VAR 0 9
39151: PPUSH
39152: CALL_OW 440
39156: NOT
39157: AND
39158: IFFALSE 39162
// exit ;
39160: GO 39170
// result := true ;
39162: LD_ADDR_VAR 0 6
39166: PUSH
39167: LD_INT 1
39169: ST_TO_ADDR
// end ;
39170: LD_VAR 0 6
39174: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
39175: LD_INT 0
39177: PPUSH
39178: PPUSH
39179: PPUSH
39180: PPUSH
39181: PPUSH
39182: PPUSH
39183: PPUSH
39184: PPUSH
39185: PPUSH
39186: PPUSH
39187: PPUSH
39188: PPUSH
39189: PPUSH
39190: PPUSH
39191: PPUSH
39192: PPUSH
39193: PPUSH
39194: PPUSH
39195: PPUSH
39196: PPUSH
39197: PPUSH
39198: PPUSH
39199: PPUSH
39200: PPUSH
39201: PPUSH
39202: PPUSH
39203: PPUSH
39204: PPUSH
39205: PPUSH
39206: PPUSH
39207: PPUSH
39208: PPUSH
39209: PPUSH
39210: PPUSH
39211: PPUSH
39212: PPUSH
39213: PPUSH
39214: PPUSH
39215: PPUSH
39216: PPUSH
39217: PPUSH
39218: PPUSH
39219: PPUSH
39220: PPUSH
39221: PPUSH
39222: PPUSH
39223: PPUSH
39224: PPUSH
39225: PPUSH
39226: PPUSH
39227: PPUSH
39228: PPUSH
39229: PPUSH
39230: PPUSH
39231: PPUSH
39232: PPUSH
39233: PPUSH
39234: PPUSH
// result = [ ] ;
39235: LD_ADDR_VAR 0 7
39239: PUSH
39240: EMPTY
39241: ST_TO_ADDR
// temp_list = [ ] ;
39242: LD_ADDR_VAR 0 9
39246: PUSH
39247: EMPTY
39248: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
39249: LD_VAR 0 4
39253: PUSH
39254: LD_INT 0
39256: PUSH
39257: LD_INT 1
39259: PUSH
39260: LD_INT 2
39262: PUSH
39263: LD_INT 3
39265: PUSH
39266: LD_INT 4
39268: PUSH
39269: LD_INT 5
39271: PUSH
39272: EMPTY
39273: LIST
39274: LIST
39275: LIST
39276: LIST
39277: LIST
39278: LIST
39279: IN
39280: NOT
39281: PUSH
39282: LD_VAR 0 1
39286: PUSH
39287: LD_INT 0
39289: PUSH
39290: LD_INT 1
39292: PUSH
39293: EMPTY
39294: LIST
39295: LIST
39296: IN
39297: PUSH
39298: LD_VAR 0 5
39302: PUSH
39303: LD_INT 1
39305: PUSH
39306: LD_INT 2
39308: PUSH
39309: LD_INT 3
39311: PUSH
39312: EMPTY
39313: LIST
39314: LIST
39315: LIST
39316: IN
39317: NOT
39318: AND
39319: OR
39320: IFFALSE 39324
// exit ;
39322: GO 57715
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
39324: LD_VAR 0 1
39328: PUSH
39329: LD_INT 6
39331: PUSH
39332: LD_INT 7
39334: PUSH
39335: LD_INT 8
39337: PUSH
39338: LD_INT 13
39340: PUSH
39341: LD_INT 12
39343: PUSH
39344: LD_INT 15
39346: PUSH
39347: LD_INT 11
39349: PUSH
39350: LD_INT 14
39352: PUSH
39353: LD_INT 10
39355: PUSH
39356: EMPTY
39357: LIST
39358: LIST
39359: LIST
39360: LIST
39361: LIST
39362: LIST
39363: LIST
39364: LIST
39365: LIST
39366: IN
39367: IFFALSE 39377
// btype = b_lab ;
39369: LD_ADDR_VAR 0 1
39373: PUSH
39374: LD_INT 6
39376: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
39377: LD_VAR 0 6
39381: PUSH
39382: LD_INT 0
39384: PUSH
39385: LD_INT 1
39387: PUSH
39388: LD_INT 2
39390: PUSH
39391: EMPTY
39392: LIST
39393: LIST
39394: LIST
39395: IN
39396: NOT
39397: PUSH
39398: LD_VAR 0 1
39402: PUSH
39403: LD_INT 0
39405: PUSH
39406: LD_INT 1
39408: PUSH
39409: LD_INT 2
39411: PUSH
39412: LD_INT 3
39414: PUSH
39415: LD_INT 6
39417: PUSH
39418: LD_INT 36
39420: PUSH
39421: LD_INT 4
39423: PUSH
39424: LD_INT 5
39426: PUSH
39427: LD_INT 31
39429: PUSH
39430: LD_INT 32
39432: PUSH
39433: LD_INT 33
39435: PUSH
39436: EMPTY
39437: LIST
39438: LIST
39439: LIST
39440: LIST
39441: LIST
39442: LIST
39443: LIST
39444: LIST
39445: LIST
39446: LIST
39447: LIST
39448: IN
39449: NOT
39450: PUSH
39451: LD_VAR 0 6
39455: PUSH
39456: LD_INT 1
39458: EQUAL
39459: AND
39460: OR
39461: PUSH
39462: LD_VAR 0 1
39466: PUSH
39467: LD_INT 2
39469: PUSH
39470: LD_INT 3
39472: PUSH
39473: EMPTY
39474: LIST
39475: LIST
39476: IN
39477: NOT
39478: PUSH
39479: LD_VAR 0 6
39483: PUSH
39484: LD_INT 2
39486: EQUAL
39487: AND
39488: OR
39489: IFFALSE 39499
// mode = 0 ;
39491: LD_ADDR_VAR 0 6
39495: PUSH
39496: LD_INT 0
39498: ST_TO_ADDR
// case mode of 0 :
39499: LD_VAR 0 6
39503: PUSH
39504: LD_INT 0
39506: DOUBLE
39507: EQUAL
39508: IFTRUE 39512
39510: GO 50965
39512: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
39513: LD_ADDR_VAR 0 11
39517: PUSH
39518: LD_INT 0
39520: PUSH
39521: LD_INT 0
39523: PUSH
39524: EMPTY
39525: LIST
39526: LIST
39527: PUSH
39528: LD_INT 0
39530: PUSH
39531: LD_INT 1
39533: NEG
39534: PUSH
39535: EMPTY
39536: LIST
39537: LIST
39538: PUSH
39539: LD_INT 1
39541: PUSH
39542: LD_INT 0
39544: PUSH
39545: EMPTY
39546: LIST
39547: LIST
39548: PUSH
39549: LD_INT 1
39551: PUSH
39552: LD_INT 1
39554: PUSH
39555: EMPTY
39556: LIST
39557: LIST
39558: PUSH
39559: LD_INT 0
39561: PUSH
39562: LD_INT 1
39564: PUSH
39565: EMPTY
39566: LIST
39567: LIST
39568: PUSH
39569: LD_INT 1
39571: NEG
39572: PUSH
39573: LD_INT 0
39575: PUSH
39576: EMPTY
39577: LIST
39578: LIST
39579: PUSH
39580: LD_INT 1
39582: NEG
39583: PUSH
39584: LD_INT 1
39586: NEG
39587: PUSH
39588: EMPTY
39589: LIST
39590: LIST
39591: PUSH
39592: LD_INT 1
39594: NEG
39595: PUSH
39596: LD_INT 2
39598: NEG
39599: PUSH
39600: EMPTY
39601: LIST
39602: LIST
39603: PUSH
39604: LD_INT 0
39606: PUSH
39607: LD_INT 2
39609: NEG
39610: PUSH
39611: EMPTY
39612: LIST
39613: LIST
39614: PUSH
39615: LD_INT 1
39617: PUSH
39618: LD_INT 1
39620: NEG
39621: PUSH
39622: EMPTY
39623: LIST
39624: LIST
39625: PUSH
39626: LD_INT 1
39628: PUSH
39629: LD_INT 2
39631: PUSH
39632: EMPTY
39633: LIST
39634: LIST
39635: PUSH
39636: LD_INT 0
39638: PUSH
39639: LD_INT 2
39641: PUSH
39642: EMPTY
39643: LIST
39644: LIST
39645: PUSH
39646: LD_INT 1
39648: NEG
39649: PUSH
39650: LD_INT 1
39652: PUSH
39653: EMPTY
39654: LIST
39655: LIST
39656: PUSH
39657: LD_INT 1
39659: PUSH
39660: LD_INT 3
39662: PUSH
39663: EMPTY
39664: LIST
39665: LIST
39666: PUSH
39667: LD_INT 0
39669: PUSH
39670: LD_INT 3
39672: PUSH
39673: EMPTY
39674: LIST
39675: LIST
39676: PUSH
39677: LD_INT 1
39679: NEG
39680: PUSH
39681: LD_INT 2
39683: PUSH
39684: EMPTY
39685: LIST
39686: LIST
39687: PUSH
39688: EMPTY
39689: LIST
39690: LIST
39691: LIST
39692: LIST
39693: LIST
39694: LIST
39695: LIST
39696: LIST
39697: LIST
39698: LIST
39699: LIST
39700: LIST
39701: LIST
39702: LIST
39703: LIST
39704: LIST
39705: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
39706: LD_ADDR_VAR 0 12
39710: PUSH
39711: LD_INT 0
39713: PUSH
39714: LD_INT 0
39716: PUSH
39717: EMPTY
39718: LIST
39719: LIST
39720: PUSH
39721: LD_INT 0
39723: PUSH
39724: LD_INT 1
39726: NEG
39727: PUSH
39728: EMPTY
39729: LIST
39730: LIST
39731: PUSH
39732: LD_INT 1
39734: PUSH
39735: LD_INT 0
39737: PUSH
39738: EMPTY
39739: LIST
39740: LIST
39741: PUSH
39742: LD_INT 1
39744: PUSH
39745: LD_INT 1
39747: PUSH
39748: EMPTY
39749: LIST
39750: LIST
39751: PUSH
39752: LD_INT 0
39754: PUSH
39755: LD_INT 1
39757: PUSH
39758: EMPTY
39759: LIST
39760: LIST
39761: PUSH
39762: LD_INT 1
39764: NEG
39765: PUSH
39766: LD_INT 0
39768: PUSH
39769: EMPTY
39770: LIST
39771: LIST
39772: PUSH
39773: LD_INT 1
39775: NEG
39776: PUSH
39777: LD_INT 1
39779: NEG
39780: PUSH
39781: EMPTY
39782: LIST
39783: LIST
39784: PUSH
39785: LD_INT 1
39787: PUSH
39788: LD_INT 1
39790: NEG
39791: PUSH
39792: EMPTY
39793: LIST
39794: LIST
39795: PUSH
39796: LD_INT 2
39798: PUSH
39799: LD_INT 0
39801: PUSH
39802: EMPTY
39803: LIST
39804: LIST
39805: PUSH
39806: LD_INT 2
39808: PUSH
39809: LD_INT 1
39811: PUSH
39812: EMPTY
39813: LIST
39814: LIST
39815: PUSH
39816: LD_INT 1
39818: NEG
39819: PUSH
39820: LD_INT 1
39822: PUSH
39823: EMPTY
39824: LIST
39825: LIST
39826: PUSH
39827: LD_INT 2
39829: NEG
39830: PUSH
39831: LD_INT 0
39833: PUSH
39834: EMPTY
39835: LIST
39836: LIST
39837: PUSH
39838: LD_INT 2
39840: NEG
39841: PUSH
39842: LD_INT 1
39844: NEG
39845: PUSH
39846: EMPTY
39847: LIST
39848: LIST
39849: PUSH
39850: LD_INT 2
39852: NEG
39853: PUSH
39854: LD_INT 1
39856: PUSH
39857: EMPTY
39858: LIST
39859: LIST
39860: PUSH
39861: LD_INT 3
39863: NEG
39864: PUSH
39865: LD_INT 0
39867: PUSH
39868: EMPTY
39869: LIST
39870: LIST
39871: PUSH
39872: LD_INT 3
39874: NEG
39875: PUSH
39876: LD_INT 1
39878: NEG
39879: PUSH
39880: EMPTY
39881: LIST
39882: LIST
39883: PUSH
39884: EMPTY
39885: LIST
39886: LIST
39887: LIST
39888: LIST
39889: LIST
39890: LIST
39891: LIST
39892: LIST
39893: LIST
39894: LIST
39895: LIST
39896: LIST
39897: LIST
39898: LIST
39899: LIST
39900: LIST
39901: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
39902: LD_ADDR_VAR 0 13
39906: PUSH
39907: LD_INT 0
39909: PUSH
39910: LD_INT 0
39912: PUSH
39913: EMPTY
39914: LIST
39915: LIST
39916: PUSH
39917: LD_INT 0
39919: PUSH
39920: LD_INT 1
39922: NEG
39923: PUSH
39924: EMPTY
39925: LIST
39926: LIST
39927: PUSH
39928: LD_INT 1
39930: PUSH
39931: LD_INT 0
39933: PUSH
39934: EMPTY
39935: LIST
39936: LIST
39937: PUSH
39938: LD_INT 1
39940: PUSH
39941: LD_INT 1
39943: PUSH
39944: EMPTY
39945: LIST
39946: LIST
39947: PUSH
39948: LD_INT 0
39950: PUSH
39951: LD_INT 1
39953: PUSH
39954: EMPTY
39955: LIST
39956: LIST
39957: PUSH
39958: LD_INT 1
39960: NEG
39961: PUSH
39962: LD_INT 0
39964: PUSH
39965: EMPTY
39966: LIST
39967: LIST
39968: PUSH
39969: LD_INT 1
39971: NEG
39972: PUSH
39973: LD_INT 1
39975: NEG
39976: PUSH
39977: EMPTY
39978: LIST
39979: LIST
39980: PUSH
39981: LD_INT 1
39983: NEG
39984: PUSH
39985: LD_INT 2
39987: NEG
39988: PUSH
39989: EMPTY
39990: LIST
39991: LIST
39992: PUSH
39993: LD_INT 2
39995: PUSH
39996: LD_INT 1
39998: PUSH
39999: EMPTY
40000: LIST
40001: LIST
40002: PUSH
40003: LD_INT 2
40005: PUSH
40006: LD_INT 2
40008: PUSH
40009: EMPTY
40010: LIST
40011: LIST
40012: PUSH
40013: LD_INT 1
40015: PUSH
40016: LD_INT 2
40018: PUSH
40019: EMPTY
40020: LIST
40021: LIST
40022: PUSH
40023: LD_INT 2
40025: NEG
40026: PUSH
40027: LD_INT 1
40029: NEG
40030: PUSH
40031: EMPTY
40032: LIST
40033: LIST
40034: PUSH
40035: LD_INT 2
40037: NEG
40038: PUSH
40039: LD_INT 2
40041: NEG
40042: PUSH
40043: EMPTY
40044: LIST
40045: LIST
40046: PUSH
40047: LD_INT 2
40049: NEG
40050: PUSH
40051: LD_INT 3
40053: NEG
40054: PUSH
40055: EMPTY
40056: LIST
40057: LIST
40058: PUSH
40059: LD_INT 3
40061: NEG
40062: PUSH
40063: LD_INT 2
40065: NEG
40066: PUSH
40067: EMPTY
40068: LIST
40069: LIST
40070: PUSH
40071: LD_INT 3
40073: NEG
40074: PUSH
40075: LD_INT 3
40077: NEG
40078: PUSH
40079: EMPTY
40080: LIST
40081: LIST
40082: PUSH
40083: EMPTY
40084: LIST
40085: LIST
40086: LIST
40087: LIST
40088: LIST
40089: LIST
40090: LIST
40091: LIST
40092: LIST
40093: LIST
40094: LIST
40095: LIST
40096: LIST
40097: LIST
40098: LIST
40099: LIST
40100: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
40101: LD_ADDR_VAR 0 14
40105: PUSH
40106: LD_INT 0
40108: PUSH
40109: LD_INT 0
40111: PUSH
40112: EMPTY
40113: LIST
40114: LIST
40115: PUSH
40116: LD_INT 0
40118: PUSH
40119: LD_INT 1
40121: NEG
40122: PUSH
40123: EMPTY
40124: LIST
40125: LIST
40126: PUSH
40127: LD_INT 1
40129: PUSH
40130: LD_INT 0
40132: PUSH
40133: EMPTY
40134: LIST
40135: LIST
40136: PUSH
40137: LD_INT 1
40139: PUSH
40140: LD_INT 1
40142: PUSH
40143: EMPTY
40144: LIST
40145: LIST
40146: PUSH
40147: LD_INT 0
40149: PUSH
40150: LD_INT 1
40152: PUSH
40153: EMPTY
40154: LIST
40155: LIST
40156: PUSH
40157: LD_INT 1
40159: NEG
40160: PUSH
40161: LD_INT 0
40163: PUSH
40164: EMPTY
40165: LIST
40166: LIST
40167: PUSH
40168: LD_INT 1
40170: NEG
40171: PUSH
40172: LD_INT 1
40174: NEG
40175: PUSH
40176: EMPTY
40177: LIST
40178: LIST
40179: PUSH
40180: LD_INT 1
40182: NEG
40183: PUSH
40184: LD_INT 2
40186: NEG
40187: PUSH
40188: EMPTY
40189: LIST
40190: LIST
40191: PUSH
40192: LD_INT 0
40194: PUSH
40195: LD_INT 2
40197: NEG
40198: PUSH
40199: EMPTY
40200: LIST
40201: LIST
40202: PUSH
40203: LD_INT 1
40205: PUSH
40206: LD_INT 1
40208: NEG
40209: PUSH
40210: EMPTY
40211: LIST
40212: LIST
40213: PUSH
40214: LD_INT 1
40216: PUSH
40217: LD_INT 2
40219: PUSH
40220: EMPTY
40221: LIST
40222: LIST
40223: PUSH
40224: LD_INT 0
40226: PUSH
40227: LD_INT 2
40229: PUSH
40230: EMPTY
40231: LIST
40232: LIST
40233: PUSH
40234: LD_INT 1
40236: NEG
40237: PUSH
40238: LD_INT 1
40240: PUSH
40241: EMPTY
40242: LIST
40243: LIST
40244: PUSH
40245: LD_INT 1
40247: NEG
40248: PUSH
40249: LD_INT 3
40251: NEG
40252: PUSH
40253: EMPTY
40254: LIST
40255: LIST
40256: PUSH
40257: LD_INT 0
40259: PUSH
40260: LD_INT 3
40262: NEG
40263: PUSH
40264: EMPTY
40265: LIST
40266: LIST
40267: PUSH
40268: LD_INT 1
40270: PUSH
40271: LD_INT 2
40273: NEG
40274: PUSH
40275: EMPTY
40276: LIST
40277: LIST
40278: PUSH
40279: EMPTY
40280: LIST
40281: LIST
40282: LIST
40283: LIST
40284: LIST
40285: LIST
40286: LIST
40287: LIST
40288: LIST
40289: LIST
40290: LIST
40291: LIST
40292: LIST
40293: LIST
40294: LIST
40295: LIST
40296: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
40297: LD_ADDR_VAR 0 15
40301: PUSH
40302: LD_INT 0
40304: PUSH
40305: LD_INT 0
40307: PUSH
40308: EMPTY
40309: LIST
40310: LIST
40311: PUSH
40312: LD_INT 0
40314: PUSH
40315: LD_INT 1
40317: NEG
40318: PUSH
40319: EMPTY
40320: LIST
40321: LIST
40322: PUSH
40323: LD_INT 1
40325: PUSH
40326: LD_INT 0
40328: PUSH
40329: EMPTY
40330: LIST
40331: LIST
40332: PUSH
40333: LD_INT 1
40335: PUSH
40336: LD_INT 1
40338: PUSH
40339: EMPTY
40340: LIST
40341: LIST
40342: PUSH
40343: LD_INT 0
40345: PUSH
40346: LD_INT 1
40348: PUSH
40349: EMPTY
40350: LIST
40351: LIST
40352: PUSH
40353: LD_INT 1
40355: NEG
40356: PUSH
40357: LD_INT 0
40359: PUSH
40360: EMPTY
40361: LIST
40362: LIST
40363: PUSH
40364: LD_INT 1
40366: NEG
40367: PUSH
40368: LD_INT 1
40370: NEG
40371: PUSH
40372: EMPTY
40373: LIST
40374: LIST
40375: PUSH
40376: LD_INT 1
40378: PUSH
40379: LD_INT 1
40381: NEG
40382: PUSH
40383: EMPTY
40384: LIST
40385: LIST
40386: PUSH
40387: LD_INT 2
40389: PUSH
40390: LD_INT 0
40392: PUSH
40393: EMPTY
40394: LIST
40395: LIST
40396: PUSH
40397: LD_INT 2
40399: PUSH
40400: LD_INT 1
40402: PUSH
40403: EMPTY
40404: LIST
40405: LIST
40406: PUSH
40407: LD_INT 1
40409: NEG
40410: PUSH
40411: LD_INT 1
40413: PUSH
40414: EMPTY
40415: LIST
40416: LIST
40417: PUSH
40418: LD_INT 2
40420: NEG
40421: PUSH
40422: LD_INT 0
40424: PUSH
40425: EMPTY
40426: LIST
40427: LIST
40428: PUSH
40429: LD_INT 2
40431: NEG
40432: PUSH
40433: LD_INT 1
40435: NEG
40436: PUSH
40437: EMPTY
40438: LIST
40439: LIST
40440: PUSH
40441: LD_INT 2
40443: PUSH
40444: LD_INT 1
40446: NEG
40447: PUSH
40448: EMPTY
40449: LIST
40450: LIST
40451: PUSH
40452: LD_INT 3
40454: PUSH
40455: LD_INT 0
40457: PUSH
40458: EMPTY
40459: LIST
40460: LIST
40461: PUSH
40462: LD_INT 3
40464: PUSH
40465: LD_INT 1
40467: PUSH
40468: EMPTY
40469: LIST
40470: LIST
40471: PUSH
40472: EMPTY
40473: LIST
40474: LIST
40475: LIST
40476: LIST
40477: LIST
40478: LIST
40479: LIST
40480: LIST
40481: LIST
40482: LIST
40483: LIST
40484: LIST
40485: LIST
40486: LIST
40487: LIST
40488: LIST
40489: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
40490: LD_ADDR_VAR 0 16
40494: PUSH
40495: LD_INT 0
40497: PUSH
40498: LD_INT 0
40500: PUSH
40501: EMPTY
40502: LIST
40503: LIST
40504: PUSH
40505: LD_INT 0
40507: PUSH
40508: LD_INT 1
40510: NEG
40511: PUSH
40512: EMPTY
40513: LIST
40514: LIST
40515: PUSH
40516: LD_INT 1
40518: PUSH
40519: LD_INT 0
40521: PUSH
40522: EMPTY
40523: LIST
40524: LIST
40525: PUSH
40526: LD_INT 1
40528: PUSH
40529: LD_INT 1
40531: PUSH
40532: EMPTY
40533: LIST
40534: LIST
40535: PUSH
40536: LD_INT 0
40538: PUSH
40539: LD_INT 1
40541: PUSH
40542: EMPTY
40543: LIST
40544: LIST
40545: PUSH
40546: LD_INT 1
40548: NEG
40549: PUSH
40550: LD_INT 0
40552: PUSH
40553: EMPTY
40554: LIST
40555: LIST
40556: PUSH
40557: LD_INT 1
40559: NEG
40560: PUSH
40561: LD_INT 1
40563: NEG
40564: PUSH
40565: EMPTY
40566: LIST
40567: LIST
40568: PUSH
40569: LD_INT 1
40571: NEG
40572: PUSH
40573: LD_INT 2
40575: NEG
40576: PUSH
40577: EMPTY
40578: LIST
40579: LIST
40580: PUSH
40581: LD_INT 2
40583: PUSH
40584: LD_INT 1
40586: PUSH
40587: EMPTY
40588: LIST
40589: LIST
40590: PUSH
40591: LD_INT 2
40593: PUSH
40594: LD_INT 2
40596: PUSH
40597: EMPTY
40598: LIST
40599: LIST
40600: PUSH
40601: LD_INT 1
40603: PUSH
40604: LD_INT 2
40606: PUSH
40607: EMPTY
40608: LIST
40609: LIST
40610: PUSH
40611: LD_INT 2
40613: NEG
40614: PUSH
40615: LD_INT 1
40617: NEG
40618: PUSH
40619: EMPTY
40620: LIST
40621: LIST
40622: PUSH
40623: LD_INT 2
40625: NEG
40626: PUSH
40627: LD_INT 2
40629: NEG
40630: PUSH
40631: EMPTY
40632: LIST
40633: LIST
40634: PUSH
40635: LD_INT 3
40637: PUSH
40638: LD_INT 2
40640: PUSH
40641: EMPTY
40642: LIST
40643: LIST
40644: PUSH
40645: LD_INT 3
40647: PUSH
40648: LD_INT 3
40650: PUSH
40651: EMPTY
40652: LIST
40653: LIST
40654: PUSH
40655: LD_INT 2
40657: PUSH
40658: LD_INT 3
40660: PUSH
40661: EMPTY
40662: LIST
40663: LIST
40664: PUSH
40665: EMPTY
40666: LIST
40667: LIST
40668: LIST
40669: LIST
40670: LIST
40671: LIST
40672: LIST
40673: LIST
40674: LIST
40675: LIST
40676: LIST
40677: LIST
40678: LIST
40679: LIST
40680: LIST
40681: LIST
40682: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40683: LD_ADDR_VAR 0 17
40687: PUSH
40688: LD_INT 0
40690: PUSH
40691: LD_INT 0
40693: PUSH
40694: EMPTY
40695: LIST
40696: LIST
40697: PUSH
40698: LD_INT 0
40700: PUSH
40701: LD_INT 1
40703: NEG
40704: PUSH
40705: EMPTY
40706: LIST
40707: LIST
40708: PUSH
40709: LD_INT 1
40711: PUSH
40712: LD_INT 0
40714: PUSH
40715: EMPTY
40716: LIST
40717: LIST
40718: PUSH
40719: LD_INT 1
40721: PUSH
40722: LD_INT 1
40724: PUSH
40725: EMPTY
40726: LIST
40727: LIST
40728: PUSH
40729: LD_INT 0
40731: PUSH
40732: LD_INT 1
40734: PUSH
40735: EMPTY
40736: LIST
40737: LIST
40738: PUSH
40739: LD_INT 1
40741: NEG
40742: PUSH
40743: LD_INT 0
40745: PUSH
40746: EMPTY
40747: LIST
40748: LIST
40749: PUSH
40750: LD_INT 1
40752: NEG
40753: PUSH
40754: LD_INT 1
40756: NEG
40757: PUSH
40758: EMPTY
40759: LIST
40760: LIST
40761: PUSH
40762: LD_INT 1
40764: NEG
40765: PUSH
40766: LD_INT 2
40768: NEG
40769: PUSH
40770: EMPTY
40771: LIST
40772: LIST
40773: PUSH
40774: LD_INT 0
40776: PUSH
40777: LD_INT 2
40779: NEG
40780: PUSH
40781: EMPTY
40782: LIST
40783: LIST
40784: PUSH
40785: LD_INT 1
40787: PUSH
40788: LD_INT 1
40790: NEG
40791: PUSH
40792: EMPTY
40793: LIST
40794: LIST
40795: PUSH
40796: LD_INT 2
40798: PUSH
40799: LD_INT 0
40801: PUSH
40802: EMPTY
40803: LIST
40804: LIST
40805: PUSH
40806: LD_INT 2
40808: PUSH
40809: LD_INT 1
40811: PUSH
40812: EMPTY
40813: LIST
40814: LIST
40815: PUSH
40816: LD_INT 2
40818: PUSH
40819: LD_INT 2
40821: PUSH
40822: EMPTY
40823: LIST
40824: LIST
40825: PUSH
40826: LD_INT 1
40828: PUSH
40829: LD_INT 2
40831: PUSH
40832: EMPTY
40833: LIST
40834: LIST
40835: PUSH
40836: LD_INT 0
40838: PUSH
40839: LD_INT 2
40841: PUSH
40842: EMPTY
40843: LIST
40844: LIST
40845: PUSH
40846: LD_INT 1
40848: NEG
40849: PUSH
40850: LD_INT 1
40852: PUSH
40853: EMPTY
40854: LIST
40855: LIST
40856: PUSH
40857: LD_INT 2
40859: NEG
40860: PUSH
40861: LD_INT 0
40863: PUSH
40864: EMPTY
40865: LIST
40866: LIST
40867: PUSH
40868: LD_INT 2
40870: NEG
40871: PUSH
40872: LD_INT 1
40874: NEG
40875: PUSH
40876: EMPTY
40877: LIST
40878: LIST
40879: PUSH
40880: LD_INT 2
40882: NEG
40883: PUSH
40884: LD_INT 2
40886: NEG
40887: PUSH
40888: EMPTY
40889: LIST
40890: LIST
40891: PUSH
40892: EMPTY
40893: LIST
40894: LIST
40895: LIST
40896: LIST
40897: LIST
40898: LIST
40899: LIST
40900: LIST
40901: LIST
40902: LIST
40903: LIST
40904: LIST
40905: LIST
40906: LIST
40907: LIST
40908: LIST
40909: LIST
40910: LIST
40911: LIST
40912: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40913: LD_ADDR_VAR 0 18
40917: PUSH
40918: LD_INT 0
40920: PUSH
40921: LD_INT 0
40923: PUSH
40924: EMPTY
40925: LIST
40926: LIST
40927: PUSH
40928: LD_INT 0
40930: PUSH
40931: LD_INT 1
40933: NEG
40934: PUSH
40935: EMPTY
40936: LIST
40937: LIST
40938: PUSH
40939: LD_INT 1
40941: PUSH
40942: LD_INT 0
40944: PUSH
40945: EMPTY
40946: LIST
40947: LIST
40948: PUSH
40949: LD_INT 1
40951: PUSH
40952: LD_INT 1
40954: PUSH
40955: EMPTY
40956: LIST
40957: LIST
40958: PUSH
40959: LD_INT 0
40961: PUSH
40962: LD_INT 1
40964: PUSH
40965: EMPTY
40966: LIST
40967: LIST
40968: PUSH
40969: LD_INT 1
40971: NEG
40972: PUSH
40973: LD_INT 0
40975: PUSH
40976: EMPTY
40977: LIST
40978: LIST
40979: PUSH
40980: LD_INT 1
40982: NEG
40983: PUSH
40984: LD_INT 1
40986: NEG
40987: PUSH
40988: EMPTY
40989: LIST
40990: LIST
40991: PUSH
40992: LD_INT 1
40994: NEG
40995: PUSH
40996: LD_INT 2
40998: NEG
40999: PUSH
41000: EMPTY
41001: LIST
41002: LIST
41003: PUSH
41004: LD_INT 0
41006: PUSH
41007: LD_INT 2
41009: NEG
41010: PUSH
41011: EMPTY
41012: LIST
41013: LIST
41014: PUSH
41015: LD_INT 1
41017: PUSH
41018: LD_INT 1
41020: NEG
41021: PUSH
41022: EMPTY
41023: LIST
41024: LIST
41025: PUSH
41026: LD_INT 2
41028: PUSH
41029: LD_INT 0
41031: PUSH
41032: EMPTY
41033: LIST
41034: LIST
41035: PUSH
41036: LD_INT 2
41038: PUSH
41039: LD_INT 1
41041: PUSH
41042: EMPTY
41043: LIST
41044: LIST
41045: PUSH
41046: LD_INT 2
41048: PUSH
41049: LD_INT 2
41051: PUSH
41052: EMPTY
41053: LIST
41054: LIST
41055: PUSH
41056: LD_INT 1
41058: PUSH
41059: LD_INT 2
41061: PUSH
41062: EMPTY
41063: LIST
41064: LIST
41065: PUSH
41066: LD_INT 0
41068: PUSH
41069: LD_INT 2
41071: PUSH
41072: EMPTY
41073: LIST
41074: LIST
41075: PUSH
41076: LD_INT 1
41078: NEG
41079: PUSH
41080: LD_INT 1
41082: PUSH
41083: EMPTY
41084: LIST
41085: LIST
41086: PUSH
41087: LD_INT 2
41089: NEG
41090: PUSH
41091: LD_INT 0
41093: PUSH
41094: EMPTY
41095: LIST
41096: LIST
41097: PUSH
41098: LD_INT 2
41100: NEG
41101: PUSH
41102: LD_INT 1
41104: NEG
41105: PUSH
41106: EMPTY
41107: LIST
41108: LIST
41109: PUSH
41110: LD_INT 2
41112: NEG
41113: PUSH
41114: LD_INT 2
41116: NEG
41117: PUSH
41118: EMPTY
41119: LIST
41120: LIST
41121: PUSH
41122: EMPTY
41123: LIST
41124: LIST
41125: LIST
41126: LIST
41127: LIST
41128: LIST
41129: LIST
41130: LIST
41131: LIST
41132: LIST
41133: LIST
41134: LIST
41135: LIST
41136: LIST
41137: LIST
41138: LIST
41139: LIST
41140: LIST
41141: LIST
41142: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41143: LD_ADDR_VAR 0 19
41147: PUSH
41148: LD_INT 0
41150: PUSH
41151: LD_INT 0
41153: PUSH
41154: EMPTY
41155: LIST
41156: LIST
41157: PUSH
41158: LD_INT 0
41160: PUSH
41161: LD_INT 1
41163: NEG
41164: PUSH
41165: EMPTY
41166: LIST
41167: LIST
41168: PUSH
41169: LD_INT 1
41171: PUSH
41172: LD_INT 0
41174: PUSH
41175: EMPTY
41176: LIST
41177: LIST
41178: PUSH
41179: LD_INT 1
41181: PUSH
41182: LD_INT 1
41184: PUSH
41185: EMPTY
41186: LIST
41187: LIST
41188: PUSH
41189: LD_INT 0
41191: PUSH
41192: LD_INT 1
41194: PUSH
41195: EMPTY
41196: LIST
41197: LIST
41198: PUSH
41199: LD_INT 1
41201: NEG
41202: PUSH
41203: LD_INT 0
41205: PUSH
41206: EMPTY
41207: LIST
41208: LIST
41209: PUSH
41210: LD_INT 1
41212: NEG
41213: PUSH
41214: LD_INT 1
41216: NEG
41217: PUSH
41218: EMPTY
41219: LIST
41220: LIST
41221: PUSH
41222: LD_INT 1
41224: NEG
41225: PUSH
41226: LD_INT 2
41228: NEG
41229: PUSH
41230: EMPTY
41231: LIST
41232: LIST
41233: PUSH
41234: LD_INT 0
41236: PUSH
41237: LD_INT 2
41239: NEG
41240: PUSH
41241: EMPTY
41242: LIST
41243: LIST
41244: PUSH
41245: LD_INT 1
41247: PUSH
41248: LD_INT 1
41250: NEG
41251: PUSH
41252: EMPTY
41253: LIST
41254: LIST
41255: PUSH
41256: LD_INT 2
41258: PUSH
41259: LD_INT 0
41261: PUSH
41262: EMPTY
41263: LIST
41264: LIST
41265: PUSH
41266: LD_INT 2
41268: PUSH
41269: LD_INT 1
41271: PUSH
41272: EMPTY
41273: LIST
41274: LIST
41275: PUSH
41276: LD_INT 2
41278: PUSH
41279: LD_INT 2
41281: PUSH
41282: EMPTY
41283: LIST
41284: LIST
41285: PUSH
41286: LD_INT 1
41288: PUSH
41289: LD_INT 2
41291: PUSH
41292: EMPTY
41293: LIST
41294: LIST
41295: PUSH
41296: LD_INT 0
41298: PUSH
41299: LD_INT 2
41301: PUSH
41302: EMPTY
41303: LIST
41304: LIST
41305: PUSH
41306: LD_INT 1
41308: NEG
41309: PUSH
41310: LD_INT 1
41312: PUSH
41313: EMPTY
41314: LIST
41315: LIST
41316: PUSH
41317: LD_INT 2
41319: NEG
41320: PUSH
41321: LD_INT 0
41323: PUSH
41324: EMPTY
41325: LIST
41326: LIST
41327: PUSH
41328: LD_INT 2
41330: NEG
41331: PUSH
41332: LD_INT 1
41334: NEG
41335: PUSH
41336: EMPTY
41337: LIST
41338: LIST
41339: PUSH
41340: LD_INT 2
41342: NEG
41343: PUSH
41344: LD_INT 2
41346: NEG
41347: PUSH
41348: EMPTY
41349: LIST
41350: LIST
41351: PUSH
41352: EMPTY
41353: LIST
41354: LIST
41355: LIST
41356: LIST
41357: LIST
41358: LIST
41359: LIST
41360: LIST
41361: LIST
41362: LIST
41363: LIST
41364: LIST
41365: LIST
41366: LIST
41367: LIST
41368: LIST
41369: LIST
41370: LIST
41371: LIST
41372: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41373: LD_ADDR_VAR 0 20
41377: PUSH
41378: LD_INT 0
41380: PUSH
41381: LD_INT 0
41383: PUSH
41384: EMPTY
41385: LIST
41386: LIST
41387: PUSH
41388: LD_INT 0
41390: PUSH
41391: LD_INT 1
41393: NEG
41394: PUSH
41395: EMPTY
41396: LIST
41397: LIST
41398: PUSH
41399: LD_INT 1
41401: PUSH
41402: LD_INT 0
41404: PUSH
41405: EMPTY
41406: LIST
41407: LIST
41408: PUSH
41409: LD_INT 1
41411: PUSH
41412: LD_INT 1
41414: PUSH
41415: EMPTY
41416: LIST
41417: LIST
41418: PUSH
41419: LD_INT 0
41421: PUSH
41422: LD_INT 1
41424: PUSH
41425: EMPTY
41426: LIST
41427: LIST
41428: PUSH
41429: LD_INT 1
41431: NEG
41432: PUSH
41433: LD_INT 0
41435: PUSH
41436: EMPTY
41437: LIST
41438: LIST
41439: PUSH
41440: LD_INT 1
41442: NEG
41443: PUSH
41444: LD_INT 1
41446: NEG
41447: PUSH
41448: EMPTY
41449: LIST
41450: LIST
41451: PUSH
41452: LD_INT 1
41454: NEG
41455: PUSH
41456: LD_INT 2
41458: NEG
41459: PUSH
41460: EMPTY
41461: LIST
41462: LIST
41463: PUSH
41464: LD_INT 0
41466: PUSH
41467: LD_INT 2
41469: NEG
41470: PUSH
41471: EMPTY
41472: LIST
41473: LIST
41474: PUSH
41475: LD_INT 1
41477: PUSH
41478: LD_INT 1
41480: NEG
41481: PUSH
41482: EMPTY
41483: LIST
41484: LIST
41485: PUSH
41486: LD_INT 2
41488: PUSH
41489: LD_INT 0
41491: PUSH
41492: EMPTY
41493: LIST
41494: LIST
41495: PUSH
41496: LD_INT 2
41498: PUSH
41499: LD_INT 1
41501: PUSH
41502: EMPTY
41503: LIST
41504: LIST
41505: PUSH
41506: LD_INT 2
41508: PUSH
41509: LD_INT 2
41511: PUSH
41512: EMPTY
41513: LIST
41514: LIST
41515: PUSH
41516: LD_INT 1
41518: PUSH
41519: LD_INT 2
41521: PUSH
41522: EMPTY
41523: LIST
41524: LIST
41525: PUSH
41526: LD_INT 0
41528: PUSH
41529: LD_INT 2
41531: PUSH
41532: EMPTY
41533: LIST
41534: LIST
41535: PUSH
41536: LD_INT 1
41538: NEG
41539: PUSH
41540: LD_INT 1
41542: PUSH
41543: EMPTY
41544: LIST
41545: LIST
41546: PUSH
41547: LD_INT 2
41549: NEG
41550: PUSH
41551: LD_INT 0
41553: PUSH
41554: EMPTY
41555: LIST
41556: LIST
41557: PUSH
41558: LD_INT 2
41560: NEG
41561: PUSH
41562: LD_INT 1
41564: NEG
41565: PUSH
41566: EMPTY
41567: LIST
41568: LIST
41569: PUSH
41570: LD_INT 2
41572: NEG
41573: PUSH
41574: LD_INT 2
41576: NEG
41577: PUSH
41578: EMPTY
41579: LIST
41580: LIST
41581: PUSH
41582: EMPTY
41583: LIST
41584: LIST
41585: LIST
41586: LIST
41587: LIST
41588: LIST
41589: LIST
41590: LIST
41591: LIST
41592: LIST
41593: LIST
41594: LIST
41595: LIST
41596: LIST
41597: LIST
41598: LIST
41599: LIST
41600: LIST
41601: LIST
41602: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41603: LD_ADDR_VAR 0 21
41607: PUSH
41608: LD_INT 0
41610: PUSH
41611: LD_INT 0
41613: PUSH
41614: EMPTY
41615: LIST
41616: LIST
41617: PUSH
41618: LD_INT 0
41620: PUSH
41621: LD_INT 1
41623: NEG
41624: PUSH
41625: EMPTY
41626: LIST
41627: LIST
41628: PUSH
41629: LD_INT 1
41631: PUSH
41632: LD_INT 0
41634: PUSH
41635: EMPTY
41636: LIST
41637: LIST
41638: PUSH
41639: LD_INT 1
41641: PUSH
41642: LD_INT 1
41644: PUSH
41645: EMPTY
41646: LIST
41647: LIST
41648: PUSH
41649: LD_INT 0
41651: PUSH
41652: LD_INT 1
41654: PUSH
41655: EMPTY
41656: LIST
41657: LIST
41658: PUSH
41659: LD_INT 1
41661: NEG
41662: PUSH
41663: LD_INT 0
41665: PUSH
41666: EMPTY
41667: LIST
41668: LIST
41669: PUSH
41670: LD_INT 1
41672: NEG
41673: PUSH
41674: LD_INT 1
41676: NEG
41677: PUSH
41678: EMPTY
41679: LIST
41680: LIST
41681: PUSH
41682: LD_INT 1
41684: NEG
41685: PUSH
41686: LD_INT 2
41688: NEG
41689: PUSH
41690: EMPTY
41691: LIST
41692: LIST
41693: PUSH
41694: LD_INT 0
41696: PUSH
41697: LD_INT 2
41699: NEG
41700: PUSH
41701: EMPTY
41702: LIST
41703: LIST
41704: PUSH
41705: LD_INT 1
41707: PUSH
41708: LD_INT 1
41710: NEG
41711: PUSH
41712: EMPTY
41713: LIST
41714: LIST
41715: PUSH
41716: LD_INT 2
41718: PUSH
41719: LD_INT 0
41721: PUSH
41722: EMPTY
41723: LIST
41724: LIST
41725: PUSH
41726: LD_INT 2
41728: PUSH
41729: LD_INT 1
41731: PUSH
41732: EMPTY
41733: LIST
41734: LIST
41735: PUSH
41736: LD_INT 2
41738: PUSH
41739: LD_INT 2
41741: PUSH
41742: EMPTY
41743: LIST
41744: LIST
41745: PUSH
41746: LD_INT 1
41748: PUSH
41749: LD_INT 2
41751: PUSH
41752: EMPTY
41753: LIST
41754: LIST
41755: PUSH
41756: LD_INT 0
41758: PUSH
41759: LD_INT 2
41761: PUSH
41762: EMPTY
41763: LIST
41764: LIST
41765: PUSH
41766: LD_INT 1
41768: NEG
41769: PUSH
41770: LD_INT 1
41772: PUSH
41773: EMPTY
41774: LIST
41775: LIST
41776: PUSH
41777: LD_INT 2
41779: NEG
41780: PUSH
41781: LD_INT 0
41783: PUSH
41784: EMPTY
41785: LIST
41786: LIST
41787: PUSH
41788: LD_INT 2
41790: NEG
41791: PUSH
41792: LD_INT 1
41794: NEG
41795: PUSH
41796: EMPTY
41797: LIST
41798: LIST
41799: PUSH
41800: LD_INT 2
41802: NEG
41803: PUSH
41804: LD_INT 2
41806: NEG
41807: PUSH
41808: EMPTY
41809: LIST
41810: LIST
41811: PUSH
41812: EMPTY
41813: LIST
41814: LIST
41815: LIST
41816: LIST
41817: LIST
41818: LIST
41819: LIST
41820: LIST
41821: LIST
41822: LIST
41823: LIST
41824: LIST
41825: LIST
41826: LIST
41827: LIST
41828: LIST
41829: LIST
41830: LIST
41831: LIST
41832: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41833: LD_ADDR_VAR 0 22
41837: PUSH
41838: LD_INT 0
41840: PUSH
41841: LD_INT 0
41843: PUSH
41844: EMPTY
41845: LIST
41846: LIST
41847: PUSH
41848: LD_INT 0
41850: PUSH
41851: LD_INT 1
41853: NEG
41854: PUSH
41855: EMPTY
41856: LIST
41857: LIST
41858: PUSH
41859: LD_INT 1
41861: PUSH
41862: LD_INT 0
41864: PUSH
41865: EMPTY
41866: LIST
41867: LIST
41868: PUSH
41869: LD_INT 1
41871: PUSH
41872: LD_INT 1
41874: PUSH
41875: EMPTY
41876: LIST
41877: LIST
41878: PUSH
41879: LD_INT 0
41881: PUSH
41882: LD_INT 1
41884: PUSH
41885: EMPTY
41886: LIST
41887: LIST
41888: PUSH
41889: LD_INT 1
41891: NEG
41892: PUSH
41893: LD_INT 0
41895: PUSH
41896: EMPTY
41897: LIST
41898: LIST
41899: PUSH
41900: LD_INT 1
41902: NEG
41903: PUSH
41904: LD_INT 1
41906: NEG
41907: PUSH
41908: EMPTY
41909: LIST
41910: LIST
41911: PUSH
41912: LD_INT 1
41914: NEG
41915: PUSH
41916: LD_INT 2
41918: NEG
41919: PUSH
41920: EMPTY
41921: LIST
41922: LIST
41923: PUSH
41924: LD_INT 0
41926: PUSH
41927: LD_INT 2
41929: NEG
41930: PUSH
41931: EMPTY
41932: LIST
41933: LIST
41934: PUSH
41935: LD_INT 1
41937: PUSH
41938: LD_INT 1
41940: NEG
41941: PUSH
41942: EMPTY
41943: LIST
41944: LIST
41945: PUSH
41946: LD_INT 2
41948: PUSH
41949: LD_INT 0
41951: PUSH
41952: EMPTY
41953: LIST
41954: LIST
41955: PUSH
41956: LD_INT 2
41958: PUSH
41959: LD_INT 1
41961: PUSH
41962: EMPTY
41963: LIST
41964: LIST
41965: PUSH
41966: LD_INT 2
41968: PUSH
41969: LD_INT 2
41971: PUSH
41972: EMPTY
41973: LIST
41974: LIST
41975: PUSH
41976: LD_INT 1
41978: PUSH
41979: LD_INT 2
41981: PUSH
41982: EMPTY
41983: LIST
41984: LIST
41985: PUSH
41986: LD_INT 0
41988: PUSH
41989: LD_INT 2
41991: PUSH
41992: EMPTY
41993: LIST
41994: LIST
41995: PUSH
41996: LD_INT 1
41998: NEG
41999: PUSH
42000: LD_INT 1
42002: PUSH
42003: EMPTY
42004: LIST
42005: LIST
42006: PUSH
42007: LD_INT 2
42009: NEG
42010: PUSH
42011: LD_INT 0
42013: PUSH
42014: EMPTY
42015: LIST
42016: LIST
42017: PUSH
42018: LD_INT 2
42020: NEG
42021: PUSH
42022: LD_INT 1
42024: NEG
42025: PUSH
42026: EMPTY
42027: LIST
42028: LIST
42029: PUSH
42030: LD_INT 2
42032: NEG
42033: PUSH
42034: LD_INT 2
42036: NEG
42037: PUSH
42038: EMPTY
42039: LIST
42040: LIST
42041: PUSH
42042: EMPTY
42043: LIST
42044: LIST
42045: LIST
42046: LIST
42047: LIST
42048: LIST
42049: LIST
42050: LIST
42051: LIST
42052: LIST
42053: LIST
42054: LIST
42055: LIST
42056: LIST
42057: LIST
42058: LIST
42059: LIST
42060: LIST
42061: LIST
42062: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
42063: LD_ADDR_VAR 0 23
42067: PUSH
42068: LD_INT 0
42070: PUSH
42071: LD_INT 0
42073: PUSH
42074: EMPTY
42075: LIST
42076: LIST
42077: PUSH
42078: LD_INT 0
42080: PUSH
42081: LD_INT 1
42083: NEG
42084: PUSH
42085: EMPTY
42086: LIST
42087: LIST
42088: PUSH
42089: LD_INT 1
42091: PUSH
42092: LD_INT 0
42094: PUSH
42095: EMPTY
42096: LIST
42097: LIST
42098: PUSH
42099: LD_INT 1
42101: PUSH
42102: LD_INT 1
42104: PUSH
42105: EMPTY
42106: LIST
42107: LIST
42108: PUSH
42109: LD_INT 0
42111: PUSH
42112: LD_INT 1
42114: PUSH
42115: EMPTY
42116: LIST
42117: LIST
42118: PUSH
42119: LD_INT 1
42121: NEG
42122: PUSH
42123: LD_INT 0
42125: PUSH
42126: EMPTY
42127: LIST
42128: LIST
42129: PUSH
42130: LD_INT 1
42132: NEG
42133: PUSH
42134: LD_INT 1
42136: NEG
42137: PUSH
42138: EMPTY
42139: LIST
42140: LIST
42141: PUSH
42142: LD_INT 1
42144: NEG
42145: PUSH
42146: LD_INT 2
42148: NEG
42149: PUSH
42150: EMPTY
42151: LIST
42152: LIST
42153: PUSH
42154: LD_INT 0
42156: PUSH
42157: LD_INT 2
42159: NEG
42160: PUSH
42161: EMPTY
42162: LIST
42163: LIST
42164: PUSH
42165: LD_INT 1
42167: PUSH
42168: LD_INT 1
42170: NEG
42171: PUSH
42172: EMPTY
42173: LIST
42174: LIST
42175: PUSH
42176: LD_INT 2
42178: PUSH
42179: LD_INT 0
42181: PUSH
42182: EMPTY
42183: LIST
42184: LIST
42185: PUSH
42186: LD_INT 2
42188: PUSH
42189: LD_INT 1
42191: PUSH
42192: EMPTY
42193: LIST
42194: LIST
42195: PUSH
42196: LD_INT 2
42198: PUSH
42199: LD_INT 2
42201: PUSH
42202: EMPTY
42203: LIST
42204: LIST
42205: PUSH
42206: LD_INT 1
42208: PUSH
42209: LD_INT 2
42211: PUSH
42212: EMPTY
42213: LIST
42214: LIST
42215: PUSH
42216: LD_INT 0
42218: PUSH
42219: LD_INT 2
42221: PUSH
42222: EMPTY
42223: LIST
42224: LIST
42225: PUSH
42226: LD_INT 1
42228: NEG
42229: PUSH
42230: LD_INT 1
42232: PUSH
42233: EMPTY
42234: LIST
42235: LIST
42236: PUSH
42237: LD_INT 2
42239: NEG
42240: PUSH
42241: LD_INT 0
42243: PUSH
42244: EMPTY
42245: LIST
42246: LIST
42247: PUSH
42248: LD_INT 2
42250: NEG
42251: PUSH
42252: LD_INT 1
42254: NEG
42255: PUSH
42256: EMPTY
42257: LIST
42258: LIST
42259: PUSH
42260: LD_INT 2
42262: NEG
42263: PUSH
42264: LD_INT 2
42266: NEG
42267: PUSH
42268: EMPTY
42269: LIST
42270: LIST
42271: PUSH
42272: LD_INT 2
42274: NEG
42275: PUSH
42276: LD_INT 3
42278: NEG
42279: PUSH
42280: EMPTY
42281: LIST
42282: LIST
42283: PUSH
42284: LD_INT 1
42286: NEG
42287: PUSH
42288: LD_INT 3
42290: NEG
42291: PUSH
42292: EMPTY
42293: LIST
42294: LIST
42295: PUSH
42296: LD_INT 1
42298: PUSH
42299: LD_INT 2
42301: NEG
42302: PUSH
42303: EMPTY
42304: LIST
42305: LIST
42306: PUSH
42307: LD_INT 2
42309: PUSH
42310: LD_INT 1
42312: NEG
42313: PUSH
42314: EMPTY
42315: LIST
42316: LIST
42317: PUSH
42318: EMPTY
42319: LIST
42320: LIST
42321: LIST
42322: LIST
42323: LIST
42324: LIST
42325: LIST
42326: LIST
42327: LIST
42328: LIST
42329: LIST
42330: LIST
42331: LIST
42332: LIST
42333: LIST
42334: LIST
42335: LIST
42336: LIST
42337: LIST
42338: LIST
42339: LIST
42340: LIST
42341: LIST
42342: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
42343: LD_ADDR_VAR 0 24
42347: PUSH
42348: LD_INT 0
42350: PUSH
42351: LD_INT 0
42353: PUSH
42354: EMPTY
42355: LIST
42356: LIST
42357: PUSH
42358: LD_INT 0
42360: PUSH
42361: LD_INT 1
42363: NEG
42364: PUSH
42365: EMPTY
42366: LIST
42367: LIST
42368: PUSH
42369: LD_INT 1
42371: PUSH
42372: LD_INT 0
42374: PUSH
42375: EMPTY
42376: LIST
42377: LIST
42378: PUSH
42379: LD_INT 1
42381: PUSH
42382: LD_INT 1
42384: PUSH
42385: EMPTY
42386: LIST
42387: LIST
42388: PUSH
42389: LD_INT 0
42391: PUSH
42392: LD_INT 1
42394: PUSH
42395: EMPTY
42396: LIST
42397: LIST
42398: PUSH
42399: LD_INT 1
42401: NEG
42402: PUSH
42403: LD_INT 0
42405: PUSH
42406: EMPTY
42407: LIST
42408: LIST
42409: PUSH
42410: LD_INT 1
42412: NEG
42413: PUSH
42414: LD_INT 1
42416: NEG
42417: PUSH
42418: EMPTY
42419: LIST
42420: LIST
42421: PUSH
42422: LD_INT 1
42424: NEG
42425: PUSH
42426: LD_INT 2
42428: NEG
42429: PUSH
42430: EMPTY
42431: LIST
42432: LIST
42433: PUSH
42434: LD_INT 0
42436: PUSH
42437: LD_INT 2
42439: NEG
42440: PUSH
42441: EMPTY
42442: LIST
42443: LIST
42444: PUSH
42445: LD_INT 1
42447: PUSH
42448: LD_INT 1
42450: NEG
42451: PUSH
42452: EMPTY
42453: LIST
42454: LIST
42455: PUSH
42456: LD_INT 2
42458: PUSH
42459: LD_INT 0
42461: PUSH
42462: EMPTY
42463: LIST
42464: LIST
42465: PUSH
42466: LD_INT 2
42468: PUSH
42469: LD_INT 1
42471: PUSH
42472: EMPTY
42473: LIST
42474: LIST
42475: PUSH
42476: LD_INT 2
42478: PUSH
42479: LD_INT 2
42481: PUSH
42482: EMPTY
42483: LIST
42484: LIST
42485: PUSH
42486: LD_INT 1
42488: PUSH
42489: LD_INT 2
42491: PUSH
42492: EMPTY
42493: LIST
42494: LIST
42495: PUSH
42496: LD_INT 0
42498: PUSH
42499: LD_INT 2
42501: PUSH
42502: EMPTY
42503: LIST
42504: LIST
42505: PUSH
42506: LD_INT 1
42508: NEG
42509: PUSH
42510: LD_INT 1
42512: PUSH
42513: EMPTY
42514: LIST
42515: LIST
42516: PUSH
42517: LD_INT 2
42519: NEG
42520: PUSH
42521: LD_INT 0
42523: PUSH
42524: EMPTY
42525: LIST
42526: LIST
42527: PUSH
42528: LD_INT 2
42530: NEG
42531: PUSH
42532: LD_INT 1
42534: NEG
42535: PUSH
42536: EMPTY
42537: LIST
42538: LIST
42539: PUSH
42540: LD_INT 2
42542: NEG
42543: PUSH
42544: LD_INT 2
42546: NEG
42547: PUSH
42548: EMPTY
42549: LIST
42550: LIST
42551: PUSH
42552: LD_INT 1
42554: PUSH
42555: LD_INT 2
42557: NEG
42558: PUSH
42559: EMPTY
42560: LIST
42561: LIST
42562: PUSH
42563: LD_INT 2
42565: PUSH
42566: LD_INT 1
42568: NEG
42569: PUSH
42570: EMPTY
42571: LIST
42572: LIST
42573: PUSH
42574: LD_INT 3
42576: PUSH
42577: LD_INT 1
42579: PUSH
42580: EMPTY
42581: LIST
42582: LIST
42583: PUSH
42584: LD_INT 3
42586: PUSH
42587: LD_INT 2
42589: PUSH
42590: EMPTY
42591: LIST
42592: LIST
42593: PUSH
42594: EMPTY
42595: LIST
42596: LIST
42597: LIST
42598: LIST
42599: LIST
42600: LIST
42601: LIST
42602: LIST
42603: LIST
42604: LIST
42605: LIST
42606: LIST
42607: LIST
42608: LIST
42609: LIST
42610: LIST
42611: LIST
42612: LIST
42613: LIST
42614: LIST
42615: LIST
42616: LIST
42617: LIST
42618: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
42619: LD_ADDR_VAR 0 25
42623: PUSH
42624: LD_INT 0
42626: PUSH
42627: LD_INT 0
42629: PUSH
42630: EMPTY
42631: LIST
42632: LIST
42633: PUSH
42634: LD_INT 0
42636: PUSH
42637: LD_INT 1
42639: NEG
42640: PUSH
42641: EMPTY
42642: LIST
42643: LIST
42644: PUSH
42645: LD_INT 1
42647: PUSH
42648: LD_INT 0
42650: PUSH
42651: EMPTY
42652: LIST
42653: LIST
42654: PUSH
42655: LD_INT 1
42657: PUSH
42658: LD_INT 1
42660: PUSH
42661: EMPTY
42662: LIST
42663: LIST
42664: PUSH
42665: LD_INT 0
42667: PUSH
42668: LD_INT 1
42670: PUSH
42671: EMPTY
42672: LIST
42673: LIST
42674: PUSH
42675: LD_INT 1
42677: NEG
42678: PUSH
42679: LD_INT 0
42681: PUSH
42682: EMPTY
42683: LIST
42684: LIST
42685: PUSH
42686: LD_INT 1
42688: NEG
42689: PUSH
42690: LD_INT 1
42692: NEG
42693: PUSH
42694: EMPTY
42695: LIST
42696: LIST
42697: PUSH
42698: LD_INT 1
42700: NEG
42701: PUSH
42702: LD_INT 2
42704: NEG
42705: PUSH
42706: EMPTY
42707: LIST
42708: LIST
42709: PUSH
42710: LD_INT 0
42712: PUSH
42713: LD_INT 2
42715: NEG
42716: PUSH
42717: EMPTY
42718: LIST
42719: LIST
42720: PUSH
42721: LD_INT 1
42723: PUSH
42724: LD_INT 1
42726: NEG
42727: PUSH
42728: EMPTY
42729: LIST
42730: LIST
42731: PUSH
42732: LD_INT 2
42734: PUSH
42735: LD_INT 0
42737: PUSH
42738: EMPTY
42739: LIST
42740: LIST
42741: PUSH
42742: LD_INT 2
42744: PUSH
42745: LD_INT 1
42747: PUSH
42748: EMPTY
42749: LIST
42750: LIST
42751: PUSH
42752: LD_INT 2
42754: PUSH
42755: LD_INT 2
42757: PUSH
42758: EMPTY
42759: LIST
42760: LIST
42761: PUSH
42762: LD_INT 1
42764: PUSH
42765: LD_INT 2
42767: PUSH
42768: EMPTY
42769: LIST
42770: LIST
42771: PUSH
42772: LD_INT 0
42774: PUSH
42775: LD_INT 2
42777: PUSH
42778: EMPTY
42779: LIST
42780: LIST
42781: PUSH
42782: LD_INT 1
42784: NEG
42785: PUSH
42786: LD_INT 1
42788: PUSH
42789: EMPTY
42790: LIST
42791: LIST
42792: PUSH
42793: LD_INT 2
42795: NEG
42796: PUSH
42797: LD_INT 0
42799: PUSH
42800: EMPTY
42801: LIST
42802: LIST
42803: PUSH
42804: LD_INT 2
42806: NEG
42807: PUSH
42808: LD_INT 1
42810: NEG
42811: PUSH
42812: EMPTY
42813: LIST
42814: LIST
42815: PUSH
42816: LD_INT 2
42818: NEG
42819: PUSH
42820: LD_INT 2
42822: NEG
42823: PUSH
42824: EMPTY
42825: LIST
42826: LIST
42827: PUSH
42828: LD_INT 3
42830: PUSH
42831: LD_INT 1
42833: PUSH
42834: EMPTY
42835: LIST
42836: LIST
42837: PUSH
42838: LD_INT 3
42840: PUSH
42841: LD_INT 2
42843: PUSH
42844: EMPTY
42845: LIST
42846: LIST
42847: PUSH
42848: LD_INT 2
42850: PUSH
42851: LD_INT 3
42853: PUSH
42854: EMPTY
42855: LIST
42856: LIST
42857: PUSH
42858: LD_INT 1
42860: PUSH
42861: LD_INT 3
42863: PUSH
42864: EMPTY
42865: LIST
42866: LIST
42867: PUSH
42868: EMPTY
42869: LIST
42870: LIST
42871: LIST
42872: LIST
42873: LIST
42874: LIST
42875: LIST
42876: LIST
42877: LIST
42878: LIST
42879: LIST
42880: LIST
42881: LIST
42882: LIST
42883: LIST
42884: LIST
42885: LIST
42886: LIST
42887: LIST
42888: LIST
42889: LIST
42890: LIST
42891: LIST
42892: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
42893: LD_ADDR_VAR 0 26
42897: PUSH
42898: LD_INT 0
42900: PUSH
42901: LD_INT 0
42903: PUSH
42904: EMPTY
42905: LIST
42906: LIST
42907: PUSH
42908: LD_INT 0
42910: PUSH
42911: LD_INT 1
42913: NEG
42914: PUSH
42915: EMPTY
42916: LIST
42917: LIST
42918: PUSH
42919: LD_INT 1
42921: PUSH
42922: LD_INT 0
42924: PUSH
42925: EMPTY
42926: LIST
42927: LIST
42928: PUSH
42929: LD_INT 1
42931: PUSH
42932: LD_INT 1
42934: PUSH
42935: EMPTY
42936: LIST
42937: LIST
42938: PUSH
42939: LD_INT 0
42941: PUSH
42942: LD_INT 1
42944: PUSH
42945: EMPTY
42946: LIST
42947: LIST
42948: PUSH
42949: LD_INT 1
42951: NEG
42952: PUSH
42953: LD_INT 0
42955: PUSH
42956: EMPTY
42957: LIST
42958: LIST
42959: PUSH
42960: LD_INT 1
42962: NEG
42963: PUSH
42964: LD_INT 1
42966: NEG
42967: PUSH
42968: EMPTY
42969: LIST
42970: LIST
42971: PUSH
42972: LD_INT 1
42974: NEG
42975: PUSH
42976: LD_INT 2
42978: NEG
42979: PUSH
42980: EMPTY
42981: LIST
42982: LIST
42983: PUSH
42984: LD_INT 0
42986: PUSH
42987: LD_INT 2
42989: NEG
42990: PUSH
42991: EMPTY
42992: LIST
42993: LIST
42994: PUSH
42995: LD_INT 1
42997: PUSH
42998: LD_INT 1
43000: NEG
43001: PUSH
43002: EMPTY
43003: LIST
43004: LIST
43005: PUSH
43006: LD_INT 2
43008: PUSH
43009: LD_INT 0
43011: PUSH
43012: EMPTY
43013: LIST
43014: LIST
43015: PUSH
43016: LD_INT 2
43018: PUSH
43019: LD_INT 1
43021: PUSH
43022: EMPTY
43023: LIST
43024: LIST
43025: PUSH
43026: LD_INT 2
43028: PUSH
43029: LD_INT 2
43031: PUSH
43032: EMPTY
43033: LIST
43034: LIST
43035: PUSH
43036: LD_INT 1
43038: PUSH
43039: LD_INT 2
43041: PUSH
43042: EMPTY
43043: LIST
43044: LIST
43045: PUSH
43046: LD_INT 0
43048: PUSH
43049: LD_INT 2
43051: PUSH
43052: EMPTY
43053: LIST
43054: LIST
43055: PUSH
43056: LD_INT 1
43058: NEG
43059: PUSH
43060: LD_INT 1
43062: PUSH
43063: EMPTY
43064: LIST
43065: LIST
43066: PUSH
43067: LD_INT 2
43069: NEG
43070: PUSH
43071: LD_INT 0
43073: PUSH
43074: EMPTY
43075: LIST
43076: LIST
43077: PUSH
43078: LD_INT 2
43080: NEG
43081: PUSH
43082: LD_INT 1
43084: NEG
43085: PUSH
43086: EMPTY
43087: LIST
43088: LIST
43089: PUSH
43090: LD_INT 2
43092: NEG
43093: PUSH
43094: LD_INT 2
43096: NEG
43097: PUSH
43098: EMPTY
43099: LIST
43100: LIST
43101: PUSH
43102: LD_INT 2
43104: PUSH
43105: LD_INT 3
43107: PUSH
43108: EMPTY
43109: LIST
43110: LIST
43111: PUSH
43112: LD_INT 1
43114: PUSH
43115: LD_INT 3
43117: PUSH
43118: EMPTY
43119: LIST
43120: LIST
43121: PUSH
43122: LD_INT 1
43124: NEG
43125: PUSH
43126: LD_INT 2
43128: PUSH
43129: EMPTY
43130: LIST
43131: LIST
43132: PUSH
43133: LD_INT 2
43135: NEG
43136: PUSH
43137: LD_INT 1
43139: PUSH
43140: EMPTY
43141: LIST
43142: LIST
43143: PUSH
43144: EMPTY
43145: LIST
43146: LIST
43147: LIST
43148: LIST
43149: LIST
43150: LIST
43151: LIST
43152: LIST
43153: LIST
43154: LIST
43155: LIST
43156: LIST
43157: LIST
43158: LIST
43159: LIST
43160: LIST
43161: LIST
43162: LIST
43163: LIST
43164: LIST
43165: LIST
43166: LIST
43167: LIST
43168: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
43169: LD_ADDR_VAR 0 27
43173: PUSH
43174: LD_INT 0
43176: PUSH
43177: LD_INT 0
43179: PUSH
43180: EMPTY
43181: LIST
43182: LIST
43183: PUSH
43184: LD_INT 0
43186: PUSH
43187: LD_INT 1
43189: NEG
43190: PUSH
43191: EMPTY
43192: LIST
43193: LIST
43194: PUSH
43195: LD_INT 1
43197: PUSH
43198: LD_INT 0
43200: PUSH
43201: EMPTY
43202: LIST
43203: LIST
43204: PUSH
43205: LD_INT 1
43207: PUSH
43208: LD_INT 1
43210: PUSH
43211: EMPTY
43212: LIST
43213: LIST
43214: PUSH
43215: LD_INT 0
43217: PUSH
43218: LD_INT 1
43220: PUSH
43221: EMPTY
43222: LIST
43223: LIST
43224: PUSH
43225: LD_INT 1
43227: NEG
43228: PUSH
43229: LD_INT 0
43231: PUSH
43232: EMPTY
43233: LIST
43234: LIST
43235: PUSH
43236: LD_INT 1
43238: NEG
43239: PUSH
43240: LD_INT 1
43242: NEG
43243: PUSH
43244: EMPTY
43245: LIST
43246: LIST
43247: PUSH
43248: LD_INT 1
43250: NEG
43251: PUSH
43252: LD_INT 2
43254: NEG
43255: PUSH
43256: EMPTY
43257: LIST
43258: LIST
43259: PUSH
43260: LD_INT 0
43262: PUSH
43263: LD_INT 2
43265: NEG
43266: PUSH
43267: EMPTY
43268: LIST
43269: LIST
43270: PUSH
43271: LD_INT 1
43273: PUSH
43274: LD_INT 1
43276: NEG
43277: PUSH
43278: EMPTY
43279: LIST
43280: LIST
43281: PUSH
43282: LD_INT 2
43284: PUSH
43285: LD_INT 0
43287: PUSH
43288: EMPTY
43289: LIST
43290: LIST
43291: PUSH
43292: LD_INT 2
43294: PUSH
43295: LD_INT 1
43297: PUSH
43298: EMPTY
43299: LIST
43300: LIST
43301: PUSH
43302: LD_INT 2
43304: PUSH
43305: LD_INT 2
43307: PUSH
43308: EMPTY
43309: LIST
43310: LIST
43311: PUSH
43312: LD_INT 1
43314: PUSH
43315: LD_INT 2
43317: PUSH
43318: EMPTY
43319: LIST
43320: LIST
43321: PUSH
43322: LD_INT 0
43324: PUSH
43325: LD_INT 2
43327: PUSH
43328: EMPTY
43329: LIST
43330: LIST
43331: PUSH
43332: LD_INT 1
43334: NEG
43335: PUSH
43336: LD_INT 1
43338: PUSH
43339: EMPTY
43340: LIST
43341: LIST
43342: PUSH
43343: LD_INT 2
43345: NEG
43346: PUSH
43347: LD_INT 0
43349: PUSH
43350: EMPTY
43351: LIST
43352: LIST
43353: PUSH
43354: LD_INT 2
43356: NEG
43357: PUSH
43358: LD_INT 1
43360: NEG
43361: PUSH
43362: EMPTY
43363: LIST
43364: LIST
43365: PUSH
43366: LD_INT 2
43368: NEG
43369: PUSH
43370: LD_INT 2
43372: NEG
43373: PUSH
43374: EMPTY
43375: LIST
43376: LIST
43377: PUSH
43378: LD_INT 1
43380: NEG
43381: PUSH
43382: LD_INT 2
43384: PUSH
43385: EMPTY
43386: LIST
43387: LIST
43388: PUSH
43389: LD_INT 2
43391: NEG
43392: PUSH
43393: LD_INT 1
43395: PUSH
43396: EMPTY
43397: LIST
43398: LIST
43399: PUSH
43400: LD_INT 3
43402: NEG
43403: PUSH
43404: LD_INT 1
43406: NEG
43407: PUSH
43408: EMPTY
43409: LIST
43410: LIST
43411: PUSH
43412: LD_INT 3
43414: NEG
43415: PUSH
43416: LD_INT 2
43418: NEG
43419: PUSH
43420: EMPTY
43421: LIST
43422: LIST
43423: PUSH
43424: EMPTY
43425: LIST
43426: LIST
43427: LIST
43428: LIST
43429: LIST
43430: LIST
43431: LIST
43432: LIST
43433: LIST
43434: LIST
43435: LIST
43436: LIST
43437: LIST
43438: LIST
43439: LIST
43440: LIST
43441: LIST
43442: LIST
43443: LIST
43444: LIST
43445: LIST
43446: LIST
43447: LIST
43448: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
43449: LD_ADDR_VAR 0 28
43453: PUSH
43454: LD_INT 0
43456: PUSH
43457: LD_INT 0
43459: PUSH
43460: EMPTY
43461: LIST
43462: LIST
43463: PUSH
43464: LD_INT 0
43466: PUSH
43467: LD_INT 1
43469: NEG
43470: PUSH
43471: EMPTY
43472: LIST
43473: LIST
43474: PUSH
43475: LD_INT 1
43477: PUSH
43478: LD_INT 0
43480: PUSH
43481: EMPTY
43482: LIST
43483: LIST
43484: PUSH
43485: LD_INT 1
43487: PUSH
43488: LD_INT 1
43490: PUSH
43491: EMPTY
43492: LIST
43493: LIST
43494: PUSH
43495: LD_INT 0
43497: PUSH
43498: LD_INT 1
43500: PUSH
43501: EMPTY
43502: LIST
43503: LIST
43504: PUSH
43505: LD_INT 1
43507: NEG
43508: PUSH
43509: LD_INT 0
43511: PUSH
43512: EMPTY
43513: LIST
43514: LIST
43515: PUSH
43516: LD_INT 1
43518: NEG
43519: PUSH
43520: LD_INT 1
43522: NEG
43523: PUSH
43524: EMPTY
43525: LIST
43526: LIST
43527: PUSH
43528: LD_INT 1
43530: NEG
43531: PUSH
43532: LD_INT 2
43534: NEG
43535: PUSH
43536: EMPTY
43537: LIST
43538: LIST
43539: PUSH
43540: LD_INT 0
43542: PUSH
43543: LD_INT 2
43545: NEG
43546: PUSH
43547: EMPTY
43548: LIST
43549: LIST
43550: PUSH
43551: LD_INT 1
43553: PUSH
43554: LD_INT 1
43556: NEG
43557: PUSH
43558: EMPTY
43559: LIST
43560: LIST
43561: PUSH
43562: LD_INT 2
43564: PUSH
43565: LD_INT 0
43567: PUSH
43568: EMPTY
43569: LIST
43570: LIST
43571: PUSH
43572: LD_INT 2
43574: PUSH
43575: LD_INT 1
43577: PUSH
43578: EMPTY
43579: LIST
43580: LIST
43581: PUSH
43582: LD_INT 2
43584: PUSH
43585: LD_INT 2
43587: PUSH
43588: EMPTY
43589: LIST
43590: LIST
43591: PUSH
43592: LD_INT 1
43594: PUSH
43595: LD_INT 2
43597: PUSH
43598: EMPTY
43599: LIST
43600: LIST
43601: PUSH
43602: LD_INT 0
43604: PUSH
43605: LD_INT 2
43607: PUSH
43608: EMPTY
43609: LIST
43610: LIST
43611: PUSH
43612: LD_INT 1
43614: NEG
43615: PUSH
43616: LD_INT 1
43618: PUSH
43619: EMPTY
43620: LIST
43621: LIST
43622: PUSH
43623: LD_INT 2
43625: NEG
43626: PUSH
43627: LD_INT 0
43629: PUSH
43630: EMPTY
43631: LIST
43632: LIST
43633: PUSH
43634: LD_INT 2
43636: NEG
43637: PUSH
43638: LD_INT 1
43640: NEG
43641: PUSH
43642: EMPTY
43643: LIST
43644: LIST
43645: PUSH
43646: LD_INT 2
43648: NEG
43649: PUSH
43650: LD_INT 2
43652: NEG
43653: PUSH
43654: EMPTY
43655: LIST
43656: LIST
43657: PUSH
43658: LD_INT 2
43660: NEG
43661: PUSH
43662: LD_INT 3
43664: NEG
43665: PUSH
43666: EMPTY
43667: LIST
43668: LIST
43669: PUSH
43670: LD_INT 1
43672: NEG
43673: PUSH
43674: LD_INT 3
43676: NEG
43677: PUSH
43678: EMPTY
43679: LIST
43680: LIST
43681: PUSH
43682: LD_INT 3
43684: NEG
43685: PUSH
43686: LD_INT 1
43688: NEG
43689: PUSH
43690: EMPTY
43691: LIST
43692: LIST
43693: PUSH
43694: LD_INT 3
43696: NEG
43697: PUSH
43698: LD_INT 2
43700: NEG
43701: PUSH
43702: EMPTY
43703: LIST
43704: LIST
43705: PUSH
43706: EMPTY
43707: LIST
43708: LIST
43709: LIST
43710: LIST
43711: LIST
43712: LIST
43713: LIST
43714: LIST
43715: LIST
43716: LIST
43717: LIST
43718: LIST
43719: LIST
43720: LIST
43721: LIST
43722: LIST
43723: LIST
43724: LIST
43725: LIST
43726: LIST
43727: LIST
43728: LIST
43729: LIST
43730: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
43731: LD_ADDR_VAR 0 29
43735: PUSH
43736: LD_INT 0
43738: PUSH
43739: LD_INT 0
43741: PUSH
43742: EMPTY
43743: LIST
43744: LIST
43745: PUSH
43746: LD_INT 0
43748: PUSH
43749: LD_INT 1
43751: NEG
43752: PUSH
43753: EMPTY
43754: LIST
43755: LIST
43756: PUSH
43757: LD_INT 1
43759: PUSH
43760: LD_INT 0
43762: PUSH
43763: EMPTY
43764: LIST
43765: LIST
43766: PUSH
43767: LD_INT 1
43769: PUSH
43770: LD_INT 1
43772: PUSH
43773: EMPTY
43774: LIST
43775: LIST
43776: PUSH
43777: LD_INT 0
43779: PUSH
43780: LD_INT 1
43782: PUSH
43783: EMPTY
43784: LIST
43785: LIST
43786: PUSH
43787: LD_INT 1
43789: NEG
43790: PUSH
43791: LD_INT 0
43793: PUSH
43794: EMPTY
43795: LIST
43796: LIST
43797: PUSH
43798: LD_INT 1
43800: NEG
43801: PUSH
43802: LD_INT 1
43804: NEG
43805: PUSH
43806: EMPTY
43807: LIST
43808: LIST
43809: PUSH
43810: LD_INT 1
43812: NEG
43813: PUSH
43814: LD_INT 2
43816: NEG
43817: PUSH
43818: EMPTY
43819: LIST
43820: LIST
43821: PUSH
43822: LD_INT 0
43824: PUSH
43825: LD_INT 2
43827: NEG
43828: PUSH
43829: EMPTY
43830: LIST
43831: LIST
43832: PUSH
43833: LD_INT 1
43835: PUSH
43836: LD_INT 1
43838: NEG
43839: PUSH
43840: EMPTY
43841: LIST
43842: LIST
43843: PUSH
43844: LD_INT 2
43846: PUSH
43847: LD_INT 0
43849: PUSH
43850: EMPTY
43851: LIST
43852: LIST
43853: PUSH
43854: LD_INT 2
43856: PUSH
43857: LD_INT 1
43859: PUSH
43860: EMPTY
43861: LIST
43862: LIST
43863: PUSH
43864: LD_INT 1
43866: PUSH
43867: LD_INT 2
43869: PUSH
43870: EMPTY
43871: LIST
43872: LIST
43873: PUSH
43874: LD_INT 0
43876: PUSH
43877: LD_INT 2
43879: PUSH
43880: EMPTY
43881: LIST
43882: LIST
43883: PUSH
43884: LD_INT 1
43886: NEG
43887: PUSH
43888: LD_INT 1
43890: PUSH
43891: EMPTY
43892: LIST
43893: LIST
43894: PUSH
43895: LD_INT 2
43897: NEG
43898: PUSH
43899: LD_INT 1
43901: NEG
43902: PUSH
43903: EMPTY
43904: LIST
43905: LIST
43906: PUSH
43907: LD_INT 2
43909: NEG
43910: PUSH
43911: LD_INT 2
43913: NEG
43914: PUSH
43915: EMPTY
43916: LIST
43917: LIST
43918: PUSH
43919: LD_INT 2
43921: NEG
43922: PUSH
43923: LD_INT 3
43925: NEG
43926: PUSH
43927: EMPTY
43928: LIST
43929: LIST
43930: PUSH
43931: LD_INT 2
43933: PUSH
43934: LD_INT 1
43936: NEG
43937: PUSH
43938: EMPTY
43939: LIST
43940: LIST
43941: PUSH
43942: LD_INT 3
43944: PUSH
43945: LD_INT 1
43947: PUSH
43948: EMPTY
43949: LIST
43950: LIST
43951: PUSH
43952: LD_INT 1
43954: PUSH
43955: LD_INT 3
43957: PUSH
43958: EMPTY
43959: LIST
43960: LIST
43961: PUSH
43962: LD_INT 1
43964: NEG
43965: PUSH
43966: LD_INT 2
43968: PUSH
43969: EMPTY
43970: LIST
43971: LIST
43972: PUSH
43973: LD_INT 3
43975: NEG
43976: PUSH
43977: LD_INT 2
43979: NEG
43980: PUSH
43981: EMPTY
43982: LIST
43983: LIST
43984: PUSH
43985: EMPTY
43986: LIST
43987: LIST
43988: LIST
43989: LIST
43990: LIST
43991: LIST
43992: LIST
43993: LIST
43994: LIST
43995: LIST
43996: LIST
43997: LIST
43998: LIST
43999: LIST
44000: LIST
44001: LIST
44002: LIST
44003: LIST
44004: LIST
44005: LIST
44006: LIST
44007: LIST
44008: LIST
44009: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
44010: LD_ADDR_VAR 0 30
44014: PUSH
44015: LD_INT 0
44017: PUSH
44018: LD_INT 0
44020: PUSH
44021: EMPTY
44022: LIST
44023: LIST
44024: PUSH
44025: LD_INT 0
44027: PUSH
44028: LD_INT 1
44030: NEG
44031: PUSH
44032: EMPTY
44033: LIST
44034: LIST
44035: PUSH
44036: LD_INT 1
44038: PUSH
44039: LD_INT 0
44041: PUSH
44042: EMPTY
44043: LIST
44044: LIST
44045: PUSH
44046: LD_INT 1
44048: PUSH
44049: LD_INT 1
44051: PUSH
44052: EMPTY
44053: LIST
44054: LIST
44055: PUSH
44056: LD_INT 0
44058: PUSH
44059: LD_INT 1
44061: PUSH
44062: EMPTY
44063: LIST
44064: LIST
44065: PUSH
44066: LD_INT 1
44068: NEG
44069: PUSH
44070: LD_INT 0
44072: PUSH
44073: EMPTY
44074: LIST
44075: LIST
44076: PUSH
44077: LD_INT 1
44079: NEG
44080: PUSH
44081: LD_INT 1
44083: NEG
44084: PUSH
44085: EMPTY
44086: LIST
44087: LIST
44088: PUSH
44089: LD_INT 1
44091: NEG
44092: PUSH
44093: LD_INT 2
44095: NEG
44096: PUSH
44097: EMPTY
44098: LIST
44099: LIST
44100: PUSH
44101: LD_INT 0
44103: PUSH
44104: LD_INT 2
44106: NEG
44107: PUSH
44108: EMPTY
44109: LIST
44110: LIST
44111: PUSH
44112: LD_INT 1
44114: PUSH
44115: LD_INT 1
44117: NEG
44118: PUSH
44119: EMPTY
44120: LIST
44121: LIST
44122: PUSH
44123: LD_INT 2
44125: PUSH
44126: LD_INT 0
44128: PUSH
44129: EMPTY
44130: LIST
44131: LIST
44132: PUSH
44133: LD_INT 2
44135: PUSH
44136: LD_INT 1
44138: PUSH
44139: EMPTY
44140: LIST
44141: LIST
44142: PUSH
44143: LD_INT 2
44145: PUSH
44146: LD_INT 2
44148: PUSH
44149: EMPTY
44150: LIST
44151: LIST
44152: PUSH
44153: LD_INT 1
44155: PUSH
44156: LD_INT 2
44158: PUSH
44159: EMPTY
44160: LIST
44161: LIST
44162: PUSH
44163: LD_INT 1
44165: NEG
44166: PUSH
44167: LD_INT 1
44169: PUSH
44170: EMPTY
44171: LIST
44172: LIST
44173: PUSH
44174: LD_INT 2
44176: NEG
44177: PUSH
44178: LD_INT 0
44180: PUSH
44181: EMPTY
44182: LIST
44183: LIST
44184: PUSH
44185: LD_INT 2
44187: NEG
44188: PUSH
44189: LD_INT 1
44191: NEG
44192: PUSH
44193: EMPTY
44194: LIST
44195: LIST
44196: PUSH
44197: LD_INT 1
44199: NEG
44200: PUSH
44201: LD_INT 3
44203: NEG
44204: PUSH
44205: EMPTY
44206: LIST
44207: LIST
44208: PUSH
44209: LD_INT 1
44211: PUSH
44212: LD_INT 2
44214: NEG
44215: PUSH
44216: EMPTY
44217: LIST
44218: LIST
44219: PUSH
44220: LD_INT 3
44222: PUSH
44223: LD_INT 2
44225: PUSH
44226: EMPTY
44227: LIST
44228: LIST
44229: PUSH
44230: LD_INT 2
44232: PUSH
44233: LD_INT 3
44235: PUSH
44236: EMPTY
44237: LIST
44238: LIST
44239: PUSH
44240: LD_INT 2
44242: NEG
44243: PUSH
44244: LD_INT 1
44246: PUSH
44247: EMPTY
44248: LIST
44249: LIST
44250: PUSH
44251: LD_INT 3
44253: NEG
44254: PUSH
44255: LD_INT 1
44257: NEG
44258: PUSH
44259: EMPTY
44260: LIST
44261: LIST
44262: PUSH
44263: EMPTY
44264: LIST
44265: LIST
44266: LIST
44267: LIST
44268: LIST
44269: LIST
44270: LIST
44271: LIST
44272: LIST
44273: LIST
44274: LIST
44275: LIST
44276: LIST
44277: LIST
44278: LIST
44279: LIST
44280: LIST
44281: LIST
44282: LIST
44283: LIST
44284: LIST
44285: LIST
44286: LIST
44287: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
44288: LD_ADDR_VAR 0 31
44292: PUSH
44293: LD_INT 0
44295: PUSH
44296: LD_INT 0
44298: PUSH
44299: EMPTY
44300: LIST
44301: LIST
44302: PUSH
44303: LD_INT 0
44305: PUSH
44306: LD_INT 1
44308: NEG
44309: PUSH
44310: EMPTY
44311: LIST
44312: LIST
44313: PUSH
44314: LD_INT 1
44316: PUSH
44317: LD_INT 0
44319: PUSH
44320: EMPTY
44321: LIST
44322: LIST
44323: PUSH
44324: LD_INT 1
44326: PUSH
44327: LD_INT 1
44329: PUSH
44330: EMPTY
44331: LIST
44332: LIST
44333: PUSH
44334: LD_INT 0
44336: PUSH
44337: LD_INT 1
44339: PUSH
44340: EMPTY
44341: LIST
44342: LIST
44343: PUSH
44344: LD_INT 1
44346: NEG
44347: PUSH
44348: LD_INT 0
44350: PUSH
44351: EMPTY
44352: LIST
44353: LIST
44354: PUSH
44355: LD_INT 1
44357: NEG
44358: PUSH
44359: LD_INT 1
44361: NEG
44362: PUSH
44363: EMPTY
44364: LIST
44365: LIST
44366: PUSH
44367: LD_INT 1
44369: NEG
44370: PUSH
44371: LD_INT 2
44373: NEG
44374: PUSH
44375: EMPTY
44376: LIST
44377: LIST
44378: PUSH
44379: LD_INT 1
44381: PUSH
44382: LD_INT 1
44384: NEG
44385: PUSH
44386: EMPTY
44387: LIST
44388: LIST
44389: PUSH
44390: LD_INT 2
44392: PUSH
44393: LD_INT 0
44395: PUSH
44396: EMPTY
44397: LIST
44398: LIST
44399: PUSH
44400: LD_INT 2
44402: PUSH
44403: LD_INT 1
44405: PUSH
44406: EMPTY
44407: LIST
44408: LIST
44409: PUSH
44410: LD_INT 2
44412: PUSH
44413: LD_INT 2
44415: PUSH
44416: EMPTY
44417: LIST
44418: LIST
44419: PUSH
44420: LD_INT 1
44422: PUSH
44423: LD_INT 2
44425: PUSH
44426: EMPTY
44427: LIST
44428: LIST
44429: PUSH
44430: LD_INT 0
44432: PUSH
44433: LD_INT 2
44435: PUSH
44436: EMPTY
44437: LIST
44438: LIST
44439: PUSH
44440: LD_INT 1
44442: NEG
44443: PUSH
44444: LD_INT 1
44446: PUSH
44447: EMPTY
44448: LIST
44449: LIST
44450: PUSH
44451: LD_INT 2
44453: NEG
44454: PUSH
44455: LD_INT 1
44457: NEG
44458: PUSH
44459: EMPTY
44460: LIST
44461: LIST
44462: PUSH
44463: LD_INT 2
44465: NEG
44466: PUSH
44467: LD_INT 2
44469: NEG
44470: PUSH
44471: EMPTY
44472: LIST
44473: LIST
44474: PUSH
44475: LD_INT 2
44477: NEG
44478: PUSH
44479: LD_INT 3
44481: NEG
44482: PUSH
44483: EMPTY
44484: LIST
44485: LIST
44486: PUSH
44487: LD_INT 2
44489: PUSH
44490: LD_INT 1
44492: NEG
44493: PUSH
44494: EMPTY
44495: LIST
44496: LIST
44497: PUSH
44498: LD_INT 3
44500: PUSH
44501: LD_INT 1
44503: PUSH
44504: EMPTY
44505: LIST
44506: LIST
44507: PUSH
44508: LD_INT 1
44510: PUSH
44511: LD_INT 3
44513: PUSH
44514: EMPTY
44515: LIST
44516: LIST
44517: PUSH
44518: LD_INT 1
44520: NEG
44521: PUSH
44522: LD_INT 2
44524: PUSH
44525: EMPTY
44526: LIST
44527: LIST
44528: PUSH
44529: LD_INT 3
44531: NEG
44532: PUSH
44533: LD_INT 2
44535: NEG
44536: PUSH
44537: EMPTY
44538: LIST
44539: LIST
44540: PUSH
44541: EMPTY
44542: LIST
44543: LIST
44544: LIST
44545: LIST
44546: LIST
44547: LIST
44548: LIST
44549: LIST
44550: LIST
44551: LIST
44552: LIST
44553: LIST
44554: LIST
44555: LIST
44556: LIST
44557: LIST
44558: LIST
44559: LIST
44560: LIST
44561: LIST
44562: LIST
44563: LIST
44564: LIST
44565: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
44566: LD_ADDR_VAR 0 32
44570: PUSH
44571: LD_INT 0
44573: PUSH
44574: LD_INT 0
44576: PUSH
44577: EMPTY
44578: LIST
44579: LIST
44580: PUSH
44581: LD_INT 0
44583: PUSH
44584: LD_INT 1
44586: NEG
44587: PUSH
44588: EMPTY
44589: LIST
44590: LIST
44591: PUSH
44592: LD_INT 1
44594: PUSH
44595: LD_INT 0
44597: PUSH
44598: EMPTY
44599: LIST
44600: LIST
44601: PUSH
44602: LD_INT 1
44604: PUSH
44605: LD_INT 1
44607: PUSH
44608: EMPTY
44609: LIST
44610: LIST
44611: PUSH
44612: LD_INT 0
44614: PUSH
44615: LD_INT 1
44617: PUSH
44618: EMPTY
44619: LIST
44620: LIST
44621: PUSH
44622: LD_INT 1
44624: NEG
44625: PUSH
44626: LD_INT 0
44628: PUSH
44629: EMPTY
44630: LIST
44631: LIST
44632: PUSH
44633: LD_INT 1
44635: NEG
44636: PUSH
44637: LD_INT 1
44639: NEG
44640: PUSH
44641: EMPTY
44642: LIST
44643: LIST
44644: PUSH
44645: LD_INT 1
44647: NEG
44648: PUSH
44649: LD_INT 2
44651: NEG
44652: PUSH
44653: EMPTY
44654: LIST
44655: LIST
44656: PUSH
44657: LD_INT 0
44659: PUSH
44660: LD_INT 2
44662: NEG
44663: PUSH
44664: EMPTY
44665: LIST
44666: LIST
44667: PUSH
44668: LD_INT 1
44670: PUSH
44671: LD_INT 1
44673: NEG
44674: PUSH
44675: EMPTY
44676: LIST
44677: LIST
44678: PUSH
44679: LD_INT 2
44681: PUSH
44682: LD_INT 1
44684: PUSH
44685: EMPTY
44686: LIST
44687: LIST
44688: PUSH
44689: LD_INT 2
44691: PUSH
44692: LD_INT 2
44694: PUSH
44695: EMPTY
44696: LIST
44697: LIST
44698: PUSH
44699: LD_INT 1
44701: PUSH
44702: LD_INT 2
44704: PUSH
44705: EMPTY
44706: LIST
44707: LIST
44708: PUSH
44709: LD_INT 0
44711: PUSH
44712: LD_INT 2
44714: PUSH
44715: EMPTY
44716: LIST
44717: LIST
44718: PUSH
44719: LD_INT 1
44721: NEG
44722: PUSH
44723: LD_INT 1
44725: PUSH
44726: EMPTY
44727: LIST
44728: LIST
44729: PUSH
44730: LD_INT 2
44732: NEG
44733: PUSH
44734: LD_INT 0
44736: PUSH
44737: EMPTY
44738: LIST
44739: LIST
44740: PUSH
44741: LD_INT 2
44743: NEG
44744: PUSH
44745: LD_INT 1
44747: NEG
44748: PUSH
44749: EMPTY
44750: LIST
44751: LIST
44752: PUSH
44753: LD_INT 1
44755: NEG
44756: PUSH
44757: LD_INT 3
44759: NEG
44760: PUSH
44761: EMPTY
44762: LIST
44763: LIST
44764: PUSH
44765: LD_INT 1
44767: PUSH
44768: LD_INT 2
44770: NEG
44771: PUSH
44772: EMPTY
44773: LIST
44774: LIST
44775: PUSH
44776: LD_INT 3
44778: PUSH
44779: LD_INT 2
44781: PUSH
44782: EMPTY
44783: LIST
44784: LIST
44785: PUSH
44786: LD_INT 2
44788: PUSH
44789: LD_INT 3
44791: PUSH
44792: EMPTY
44793: LIST
44794: LIST
44795: PUSH
44796: LD_INT 2
44798: NEG
44799: PUSH
44800: LD_INT 1
44802: PUSH
44803: EMPTY
44804: LIST
44805: LIST
44806: PUSH
44807: LD_INT 3
44809: NEG
44810: PUSH
44811: LD_INT 1
44813: NEG
44814: PUSH
44815: EMPTY
44816: LIST
44817: LIST
44818: PUSH
44819: EMPTY
44820: LIST
44821: LIST
44822: LIST
44823: LIST
44824: LIST
44825: LIST
44826: LIST
44827: LIST
44828: LIST
44829: LIST
44830: LIST
44831: LIST
44832: LIST
44833: LIST
44834: LIST
44835: LIST
44836: LIST
44837: LIST
44838: LIST
44839: LIST
44840: LIST
44841: LIST
44842: LIST
44843: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
44844: LD_ADDR_VAR 0 33
44848: PUSH
44849: LD_INT 0
44851: PUSH
44852: LD_INT 0
44854: PUSH
44855: EMPTY
44856: LIST
44857: LIST
44858: PUSH
44859: LD_INT 0
44861: PUSH
44862: LD_INT 1
44864: NEG
44865: PUSH
44866: EMPTY
44867: LIST
44868: LIST
44869: PUSH
44870: LD_INT 1
44872: PUSH
44873: LD_INT 0
44875: PUSH
44876: EMPTY
44877: LIST
44878: LIST
44879: PUSH
44880: LD_INT 1
44882: PUSH
44883: LD_INT 1
44885: PUSH
44886: EMPTY
44887: LIST
44888: LIST
44889: PUSH
44890: LD_INT 0
44892: PUSH
44893: LD_INT 1
44895: PUSH
44896: EMPTY
44897: LIST
44898: LIST
44899: PUSH
44900: LD_INT 1
44902: NEG
44903: PUSH
44904: LD_INT 0
44906: PUSH
44907: EMPTY
44908: LIST
44909: LIST
44910: PUSH
44911: LD_INT 1
44913: NEG
44914: PUSH
44915: LD_INT 1
44917: NEG
44918: PUSH
44919: EMPTY
44920: LIST
44921: LIST
44922: PUSH
44923: LD_INT 1
44925: NEG
44926: PUSH
44927: LD_INT 2
44929: NEG
44930: PUSH
44931: EMPTY
44932: LIST
44933: LIST
44934: PUSH
44935: LD_INT 1
44937: PUSH
44938: LD_INT 1
44940: NEG
44941: PUSH
44942: EMPTY
44943: LIST
44944: LIST
44945: PUSH
44946: LD_INT 2
44948: PUSH
44949: LD_INT 0
44951: PUSH
44952: EMPTY
44953: LIST
44954: LIST
44955: PUSH
44956: LD_INT 2
44958: PUSH
44959: LD_INT 1
44961: PUSH
44962: EMPTY
44963: LIST
44964: LIST
44965: PUSH
44966: LD_INT 1
44968: PUSH
44969: LD_INT 2
44971: PUSH
44972: EMPTY
44973: LIST
44974: LIST
44975: PUSH
44976: LD_INT 0
44978: PUSH
44979: LD_INT 2
44981: PUSH
44982: EMPTY
44983: LIST
44984: LIST
44985: PUSH
44986: LD_INT 1
44988: NEG
44989: PUSH
44990: LD_INT 1
44992: PUSH
44993: EMPTY
44994: LIST
44995: LIST
44996: PUSH
44997: LD_INT 2
44999: NEG
45000: PUSH
45001: LD_INT 0
45003: PUSH
45004: EMPTY
45005: LIST
45006: LIST
45007: PUSH
45008: LD_INT 2
45010: NEG
45011: PUSH
45012: LD_INT 1
45014: NEG
45015: PUSH
45016: EMPTY
45017: LIST
45018: LIST
45019: PUSH
45020: LD_INT 2
45022: NEG
45023: PUSH
45024: LD_INT 2
45026: NEG
45027: PUSH
45028: EMPTY
45029: LIST
45030: LIST
45031: PUSH
45032: LD_INT 2
45034: NEG
45035: PUSH
45036: LD_INT 3
45038: NEG
45039: PUSH
45040: EMPTY
45041: LIST
45042: LIST
45043: PUSH
45044: LD_INT 2
45046: PUSH
45047: LD_INT 1
45049: NEG
45050: PUSH
45051: EMPTY
45052: LIST
45053: LIST
45054: PUSH
45055: LD_INT 3
45057: PUSH
45058: LD_INT 1
45060: PUSH
45061: EMPTY
45062: LIST
45063: LIST
45064: PUSH
45065: LD_INT 1
45067: PUSH
45068: LD_INT 3
45070: PUSH
45071: EMPTY
45072: LIST
45073: LIST
45074: PUSH
45075: LD_INT 1
45077: NEG
45078: PUSH
45079: LD_INT 2
45081: PUSH
45082: EMPTY
45083: LIST
45084: LIST
45085: PUSH
45086: LD_INT 3
45088: NEG
45089: PUSH
45090: LD_INT 2
45092: NEG
45093: PUSH
45094: EMPTY
45095: LIST
45096: LIST
45097: PUSH
45098: EMPTY
45099: LIST
45100: LIST
45101: LIST
45102: LIST
45103: LIST
45104: LIST
45105: LIST
45106: LIST
45107: LIST
45108: LIST
45109: LIST
45110: LIST
45111: LIST
45112: LIST
45113: LIST
45114: LIST
45115: LIST
45116: LIST
45117: LIST
45118: LIST
45119: LIST
45120: LIST
45121: LIST
45122: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
45123: LD_ADDR_VAR 0 34
45127: PUSH
45128: LD_INT 0
45130: PUSH
45131: LD_INT 0
45133: PUSH
45134: EMPTY
45135: LIST
45136: LIST
45137: PUSH
45138: LD_INT 0
45140: PUSH
45141: LD_INT 1
45143: NEG
45144: PUSH
45145: EMPTY
45146: LIST
45147: LIST
45148: PUSH
45149: LD_INT 1
45151: PUSH
45152: LD_INT 0
45154: PUSH
45155: EMPTY
45156: LIST
45157: LIST
45158: PUSH
45159: LD_INT 1
45161: PUSH
45162: LD_INT 1
45164: PUSH
45165: EMPTY
45166: LIST
45167: LIST
45168: PUSH
45169: LD_INT 0
45171: PUSH
45172: LD_INT 1
45174: PUSH
45175: EMPTY
45176: LIST
45177: LIST
45178: PUSH
45179: LD_INT 1
45181: NEG
45182: PUSH
45183: LD_INT 0
45185: PUSH
45186: EMPTY
45187: LIST
45188: LIST
45189: PUSH
45190: LD_INT 1
45192: NEG
45193: PUSH
45194: LD_INT 1
45196: NEG
45197: PUSH
45198: EMPTY
45199: LIST
45200: LIST
45201: PUSH
45202: LD_INT 1
45204: NEG
45205: PUSH
45206: LD_INT 2
45208: NEG
45209: PUSH
45210: EMPTY
45211: LIST
45212: LIST
45213: PUSH
45214: LD_INT 0
45216: PUSH
45217: LD_INT 2
45219: NEG
45220: PUSH
45221: EMPTY
45222: LIST
45223: LIST
45224: PUSH
45225: LD_INT 1
45227: PUSH
45228: LD_INT 1
45230: NEG
45231: PUSH
45232: EMPTY
45233: LIST
45234: LIST
45235: PUSH
45236: LD_INT 2
45238: PUSH
45239: LD_INT 1
45241: PUSH
45242: EMPTY
45243: LIST
45244: LIST
45245: PUSH
45246: LD_INT 2
45248: PUSH
45249: LD_INT 2
45251: PUSH
45252: EMPTY
45253: LIST
45254: LIST
45255: PUSH
45256: LD_INT 1
45258: PUSH
45259: LD_INT 2
45261: PUSH
45262: EMPTY
45263: LIST
45264: LIST
45265: PUSH
45266: LD_INT 1
45268: NEG
45269: PUSH
45270: LD_INT 1
45272: PUSH
45273: EMPTY
45274: LIST
45275: LIST
45276: PUSH
45277: LD_INT 2
45279: NEG
45280: PUSH
45281: LD_INT 0
45283: PUSH
45284: EMPTY
45285: LIST
45286: LIST
45287: PUSH
45288: LD_INT 2
45290: NEG
45291: PUSH
45292: LD_INT 1
45294: NEG
45295: PUSH
45296: EMPTY
45297: LIST
45298: LIST
45299: PUSH
45300: LD_INT 2
45302: NEG
45303: PUSH
45304: LD_INT 2
45306: NEG
45307: PUSH
45308: EMPTY
45309: LIST
45310: LIST
45311: PUSH
45312: LD_INT 1
45314: NEG
45315: PUSH
45316: LD_INT 3
45318: NEG
45319: PUSH
45320: EMPTY
45321: LIST
45322: LIST
45323: PUSH
45324: LD_INT 1
45326: PUSH
45327: LD_INT 2
45329: NEG
45330: PUSH
45331: EMPTY
45332: LIST
45333: LIST
45334: PUSH
45335: LD_INT 3
45337: PUSH
45338: LD_INT 2
45340: PUSH
45341: EMPTY
45342: LIST
45343: LIST
45344: PUSH
45345: LD_INT 2
45347: PUSH
45348: LD_INT 3
45350: PUSH
45351: EMPTY
45352: LIST
45353: LIST
45354: PUSH
45355: LD_INT 2
45357: NEG
45358: PUSH
45359: LD_INT 1
45361: PUSH
45362: EMPTY
45363: LIST
45364: LIST
45365: PUSH
45366: LD_INT 3
45368: NEG
45369: PUSH
45370: LD_INT 1
45372: NEG
45373: PUSH
45374: EMPTY
45375: LIST
45376: LIST
45377: PUSH
45378: EMPTY
45379: LIST
45380: LIST
45381: LIST
45382: LIST
45383: LIST
45384: LIST
45385: LIST
45386: LIST
45387: LIST
45388: LIST
45389: LIST
45390: LIST
45391: LIST
45392: LIST
45393: LIST
45394: LIST
45395: LIST
45396: LIST
45397: LIST
45398: LIST
45399: LIST
45400: LIST
45401: LIST
45402: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
45403: LD_ADDR_VAR 0 35
45407: PUSH
45408: LD_INT 0
45410: PUSH
45411: LD_INT 0
45413: PUSH
45414: EMPTY
45415: LIST
45416: LIST
45417: PUSH
45418: LD_INT 0
45420: PUSH
45421: LD_INT 1
45423: NEG
45424: PUSH
45425: EMPTY
45426: LIST
45427: LIST
45428: PUSH
45429: LD_INT 1
45431: PUSH
45432: LD_INT 0
45434: PUSH
45435: EMPTY
45436: LIST
45437: LIST
45438: PUSH
45439: LD_INT 1
45441: PUSH
45442: LD_INT 1
45444: PUSH
45445: EMPTY
45446: LIST
45447: LIST
45448: PUSH
45449: LD_INT 0
45451: PUSH
45452: LD_INT 1
45454: PUSH
45455: EMPTY
45456: LIST
45457: LIST
45458: PUSH
45459: LD_INT 1
45461: NEG
45462: PUSH
45463: LD_INT 0
45465: PUSH
45466: EMPTY
45467: LIST
45468: LIST
45469: PUSH
45470: LD_INT 1
45472: NEG
45473: PUSH
45474: LD_INT 1
45476: NEG
45477: PUSH
45478: EMPTY
45479: LIST
45480: LIST
45481: PUSH
45482: LD_INT 2
45484: PUSH
45485: LD_INT 1
45487: PUSH
45488: EMPTY
45489: LIST
45490: LIST
45491: PUSH
45492: LD_INT 2
45494: NEG
45495: PUSH
45496: LD_INT 1
45498: NEG
45499: PUSH
45500: EMPTY
45501: LIST
45502: LIST
45503: PUSH
45504: EMPTY
45505: LIST
45506: LIST
45507: LIST
45508: LIST
45509: LIST
45510: LIST
45511: LIST
45512: LIST
45513: LIST
45514: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
45515: LD_ADDR_VAR 0 36
45519: PUSH
45520: LD_INT 0
45522: PUSH
45523: LD_INT 0
45525: PUSH
45526: EMPTY
45527: LIST
45528: LIST
45529: PUSH
45530: LD_INT 0
45532: PUSH
45533: LD_INT 1
45535: NEG
45536: PUSH
45537: EMPTY
45538: LIST
45539: LIST
45540: PUSH
45541: LD_INT 1
45543: PUSH
45544: LD_INT 0
45546: PUSH
45547: EMPTY
45548: LIST
45549: LIST
45550: PUSH
45551: LD_INT 1
45553: PUSH
45554: LD_INT 1
45556: PUSH
45557: EMPTY
45558: LIST
45559: LIST
45560: PUSH
45561: LD_INT 0
45563: PUSH
45564: LD_INT 1
45566: PUSH
45567: EMPTY
45568: LIST
45569: LIST
45570: PUSH
45571: LD_INT 1
45573: NEG
45574: PUSH
45575: LD_INT 0
45577: PUSH
45578: EMPTY
45579: LIST
45580: LIST
45581: PUSH
45582: LD_INT 1
45584: NEG
45585: PUSH
45586: LD_INT 1
45588: NEG
45589: PUSH
45590: EMPTY
45591: LIST
45592: LIST
45593: PUSH
45594: LD_INT 1
45596: NEG
45597: PUSH
45598: LD_INT 2
45600: NEG
45601: PUSH
45602: EMPTY
45603: LIST
45604: LIST
45605: PUSH
45606: LD_INT 1
45608: PUSH
45609: LD_INT 2
45611: PUSH
45612: EMPTY
45613: LIST
45614: LIST
45615: PUSH
45616: EMPTY
45617: LIST
45618: LIST
45619: LIST
45620: LIST
45621: LIST
45622: LIST
45623: LIST
45624: LIST
45625: LIST
45626: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
45627: LD_ADDR_VAR 0 37
45631: PUSH
45632: LD_INT 0
45634: PUSH
45635: LD_INT 0
45637: PUSH
45638: EMPTY
45639: LIST
45640: LIST
45641: PUSH
45642: LD_INT 0
45644: PUSH
45645: LD_INT 1
45647: NEG
45648: PUSH
45649: EMPTY
45650: LIST
45651: LIST
45652: PUSH
45653: LD_INT 1
45655: PUSH
45656: LD_INT 0
45658: PUSH
45659: EMPTY
45660: LIST
45661: LIST
45662: PUSH
45663: LD_INT 1
45665: PUSH
45666: LD_INT 1
45668: PUSH
45669: EMPTY
45670: LIST
45671: LIST
45672: PUSH
45673: LD_INT 0
45675: PUSH
45676: LD_INT 1
45678: PUSH
45679: EMPTY
45680: LIST
45681: LIST
45682: PUSH
45683: LD_INT 1
45685: NEG
45686: PUSH
45687: LD_INT 0
45689: PUSH
45690: EMPTY
45691: LIST
45692: LIST
45693: PUSH
45694: LD_INT 1
45696: NEG
45697: PUSH
45698: LD_INT 1
45700: NEG
45701: PUSH
45702: EMPTY
45703: LIST
45704: LIST
45705: PUSH
45706: LD_INT 1
45708: PUSH
45709: LD_INT 1
45711: NEG
45712: PUSH
45713: EMPTY
45714: LIST
45715: LIST
45716: PUSH
45717: LD_INT 1
45719: NEG
45720: PUSH
45721: LD_INT 1
45723: PUSH
45724: EMPTY
45725: LIST
45726: LIST
45727: PUSH
45728: EMPTY
45729: LIST
45730: LIST
45731: LIST
45732: LIST
45733: LIST
45734: LIST
45735: LIST
45736: LIST
45737: LIST
45738: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
45739: LD_ADDR_VAR 0 38
45743: PUSH
45744: LD_INT 0
45746: PUSH
45747: LD_INT 0
45749: PUSH
45750: EMPTY
45751: LIST
45752: LIST
45753: PUSH
45754: LD_INT 0
45756: PUSH
45757: LD_INT 1
45759: NEG
45760: PUSH
45761: EMPTY
45762: LIST
45763: LIST
45764: PUSH
45765: LD_INT 1
45767: PUSH
45768: LD_INT 0
45770: PUSH
45771: EMPTY
45772: LIST
45773: LIST
45774: PUSH
45775: LD_INT 1
45777: PUSH
45778: LD_INT 1
45780: PUSH
45781: EMPTY
45782: LIST
45783: LIST
45784: PUSH
45785: LD_INT 0
45787: PUSH
45788: LD_INT 1
45790: PUSH
45791: EMPTY
45792: LIST
45793: LIST
45794: PUSH
45795: LD_INT 1
45797: NEG
45798: PUSH
45799: LD_INT 0
45801: PUSH
45802: EMPTY
45803: LIST
45804: LIST
45805: PUSH
45806: LD_INT 1
45808: NEG
45809: PUSH
45810: LD_INT 1
45812: NEG
45813: PUSH
45814: EMPTY
45815: LIST
45816: LIST
45817: PUSH
45818: LD_INT 2
45820: PUSH
45821: LD_INT 1
45823: PUSH
45824: EMPTY
45825: LIST
45826: LIST
45827: PUSH
45828: LD_INT 2
45830: NEG
45831: PUSH
45832: LD_INT 1
45834: NEG
45835: PUSH
45836: EMPTY
45837: LIST
45838: LIST
45839: PUSH
45840: EMPTY
45841: LIST
45842: LIST
45843: LIST
45844: LIST
45845: LIST
45846: LIST
45847: LIST
45848: LIST
45849: LIST
45850: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
45851: LD_ADDR_VAR 0 39
45855: PUSH
45856: LD_INT 0
45858: PUSH
45859: LD_INT 0
45861: PUSH
45862: EMPTY
45863: LIST
45864: LIST
45865: PUSH
45866: LD_INT 0
45868: PUSH
45869: LD_INT 1
45871: NEG
45872: PUSH
45873: EMPTY
45874: LIST
45875: LIST
45876: PUSH
45877: LD_INT 1
45879: PUSH
45880: LD_INT 0
45882: PUSH
45883: EMPTY
45884: LIST
45885: LIST
45886: PUSH
45887: LD_INT 1
45889: PUSH
45890: LD_INT 1
45892: PUSH
45893: EMPTY
45894: LIST
45895: LIST
45896: PUSH
45897: LD_INT 0
45899: PUSH
45900: LD_INT 1
45902: PUSH
45903: EMPTY
45904: LIST
45905: LIST
45906: PUSH
45907: LD_INT 1
45909: NEG
45910: PUSH
45911: LD_INT 0
45913: PUSH
45914: EMPTY
45915: LIST
45916: LIST
45917: PUSH
45918: LD_INT 1
45920: NEG
45921: PUSH
45922: LD_INT 1
45924: NEG
45925: PUSH
45926: EMPTY
45927: LIST
45928: LIST
45929: PUSH
45930: LD_INT 1
45932: NEG
45933: PUSH
45934: LD_INT 2
45936: NEG
45937: PUSH
45938: EMPTY
45939: LIST
45940: LIST
45941: PUSH
45942: LD_INT 1
45944: PUSH
45945: LD_INT 2
45947: PUSH
45948: EMPTY
45949: LIST
45950: LIST
45951: PUSH
45952: EMPTY
45953: LIST
45954: LIST
45955: LIST
45956: LIST
45957: LIST
45958: LIST
45959: LIST
45960: LIST
45961: LIST
45962: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
45963: LD_ADDR_VAR 0 40
45967: PUSH
45968: LD_INT 0
45970: PUSH
45971: LD_INT 0
45973: PUSH
45974: EMPTY
45975: LIST
45976: LIST
45977: PUSH
45978: LD_INT 0
45980: PUSH
45981: LD_INT 1
45983: NEG
45984: PUSH
45985: EMPTY
45986: LIST
45987: LIST
45988: PUSH
45989: LD_INT 1
45991: PUSH
45992: LD_INT 0
45994: PUSH
45995: EMPTY
45996: LIST
45997: LIST
45998: PUSH
45999: LD_INT 1
46001: PUSH
46002: LD_INT 1
46004: PUSH
46005: EMPTY
46006: LIST
46007: LIST
46008: PUSH
46009: LD_INT 0
46011: PUSH
46012: LD_INT 1
46014: PUSH
46015: EMPTY
46016: LIST
46017: LIST
46018: PUSH
46019: LD_INT 1
46021: NEG
46022: PUSH
46023: LD_INT 0
46025: PUSH
46026: EMPTY
46027: LIST
46028: LIST
46029: PUSH
46030: LD_INT 1
46032: NEG
46033: PUSH
46034: LD_INT 1
46036: NEG
46037: PUSH
46038: EMPTY
46039: LIST
46040: LIST
46041: PUSH
46042: LD_INT 1
46044: PUSH
46045: LD_INT 1
46047: NEG
46048: PUSH
46049: EMPTY
46050: LIST
46051: LIST
46052: PUSH
46053: LD_INT 1
46055: NEG
46056: PUSH
46057: LD_INT 1
46059: PUSH
46060: EMPTY
46061: LIST
46062: LIST
46063: PUSH
46064: EMPTY
46065: LIST
46066: LIST
46067: LIST
46068: LIST
46069: LIST
46070: LIST
46071: LIST
46072: LIST
46073: LIST
46074: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46075: LD_ADDR_VAR 0 41
46079: PUSH
46080: LD_INT 0
46082: PUSH
46083: LD_INT 0
46085: PUSH
46086: EMPTY
46087: LIST
46088: LIST
46089: PUSH
46090: LD_INT 0
46092: PUSH
46093: LD_INT 1
46095: NEG
46096: PUSH
46097: EMPTY
46098: LIST
46099: LIST
46100: PUSH
46101: LD_INT 1
46103: PUSH
46104: LD_INT 0
46106: PUSH
46107: EMPTY
46108: LIST
46109: LIST
46110: PUSH
46111: LD_INT 1
46113: PUSH
46114: LD_INT 1
46116: PUSH
46117: EMPTY
46118: LIST
46119: LIST
46120: PUSH
46121: LD_INT 0
46123: PUSH
46124: LD_INT 1
46126: PUSH
46127: EMPTY
46128: LIST
46129: LIST
46130: PUSH
46131: LD_INT 1
46133: NEG
46134: PUSH
46135: LD_INT 0
46137: PUSH
46138: EMPTY
46139: LIST
46140: LIST
46141: PUSH
46142: LD_INT 1
46144: NEG
46145: PUSH
46146: LD_INT 1
46148: NEG
46149: PUSH
46150: EMPTY
46151: LIST
46152: LIST
46153: PUSH
46154: LD_INT 1
46156: NEG
46157: PUSH
46158: LD_INT 2
46160: NEG
46161: PUSH
46162: EMPTY
46163: LIST
46164: LIST
46165: PUSH
46166: LD_INT 1
46168: PUSH
46169: LD_INT 1
46171: NEG
46172: PUSH
46173: EMPTY
46174: LIST
46175: LIST
46176: PUSH
46177: LD_INT 2
46179: PUSH
46180: LD_INT 0
46182: PUSH
46183: EMPTY
46184: LIST
46185: LIST
46186: PUSH
46187: LD_INT 2
46189: PUSH
46190: LD_INT 1
46192: PUSH
46193: EMPTY
46194: LIST
46195: LIST
46196: PUSH
46197: LD_INT 2
46199: PUSH
46200: LD_INT 2
46202: PUSH
46203: EMPTY
46204: LIST
46205: LIST
46206: PUSH
46207: LD_INT 1
46209: PUSH
46210: LD_INT 2
46212: PUSH
46213: EMPTY
46214: LIST
46215: LIST
46216: PUSH
46217: LD_INT 1
46219: NEG
46220: PUSH
46221: LD_INT 1
46223: PUSH
46224: EMPTY
46225: LIST
46226: LIST
46227: PUSH
46228: LD_INT 2
46230: NEG
46231: PUSH
46232: LD_INT 0
46234: PUSH
46235: EMPTY
46236: LIST
46237: LIST
46238: PUSH
46239: LD_INT 2
46241: NEG
46242: PUSH
46243: LD_INT 1
46245: NEG
46246: PUSH
46247: EMPTY
46248: LIST
46249: LIST
46250: PUSH
46251: LD_INT 2
46253: NEG
46254: PUSH
46255: LD_INT 2
46257: NEG
46258: PUSH
46259: EMPTY
46260: LIST
46261: LIST
46262: PUSH
46263: LD_INT 2
46265: NEG
46266: PUSH
46267: LD_INT 3
46269: NEG
46270: PUSH
46271: EMPTY
46272: LIST
46273: LIST
46274: PUSH
46275: LD_INT 2
46277: PUSH
46278: LD_INT 1
46280: NEG
46281: PUSH
46282: EMPTY
46283: LIST
46284: LIST
46285: PUSH
46286: LD_INT 3
46288: PUSH
46289: LD_INT 0
46291: PUSH
46292: EMPTY
46293: LIST
46294: LIST
46295: PUSH
46296: LD_INT 3
46298: PUSH
46299: LD_INT 1
46301: PUSH
46302: EMPTY
46303: LIST
46304: LIST
46305: PUSH
46306: LD_INT 3
46308: PUSH
46309: LD_INT 2
46311: PUSH
46312: EMPTY
46313: LIST
46314: LIST
46315: PUSH
46316: LD_INT 3
46318: PUSH
46319: LD_INT 3
46321: PUSH
46322: EMPTY
46323: LIST
46324: LIST
46325: PUSH
46326: LD_INT 2
46328: PUSH
46329: LD_INT 3
46331: PUSH
46332: EMPTY
46333: LIST
46334: LIST
46335: PUSH
46336: LD_INT 2
46338: NEG
46339: PUSH
46340: LD_INT 1
46342: PUSH
46343: EMPTY
46344: LIST
46345: LIST
46346: PUSH
46347: LD_INT 3
46349: NEG
46350: PUSH
46351: LD_INT 0
46353: PUSH
46354: EMPTY
46355: LIST
46356: LIST
46357: PUSH
46358: LD_INT 3
46360: NEG
46361: PUSH
46362: LD_INT 1
46364: NEG
46365: PUSH
46366: EMPTY
46367: LIST
46368: LIST
46369: PUSH
46370: LD_INT 3
46372: NEG
46373: PUSH
46374: LD_INT 2
46376: NEG
46377: PUSH
46378: EMPTY
46379: LIST
46380: LIST
46381: PUSH
46382: LD_INT 3
46384: NEG
46385: PUSH
46386: LD_INT 3
46388: NEG
46389: PUSH
46390: EMPTY
46391: LIST
46392: LIST
46393: PUSH
46394: EMPTY
46395: LIST
46396: LIST
46397: LIST
46398: LIST
46399: LIST
46400: LIST
46401: LIST
46402: LIST
46403: LIST
46404: LIST
46405: LIST
46406: LIST
46407: LIST
46408: LIST
46409: LIST
46410: LIST
46411: LIST
46412: LIST
46413: LIST
46414: LIST
46415: LIST
46416: LIST
46417: LIST
46418: LIST
46419: LIST
46420: LIST
46421: LIST
46422: LIST
46423: LIST
46424: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46425: LD_ADDR_VAR 0 42
46429: PUSH
46430: LD_INT 0
46432: PUSH
46433: LD_INT 0
46435: PUSH
46436: EMPTY
46437: LIST
46438: LIST
46439: PUSH
46440: LD_INT 0
46442: PUSH
46443: LD_INT 1
46445: NEG
46446: PUSH
46447: EMPTY
46448: LIST
46449: LIST
46450: PUSH
46451: LD_INT 1
46453: PUSH
46454: LD_INT 0
46456: PUSH
46457: EMPTY
46458: LIST
46459: LIST
46460: PUSH
46461: LD_INT 1
46463: PUSH
46464: LD_INT 1
46466: PUSH
46467: EMPTY
46468: LIST
46469: LIST
46470: PUSH
46471: LD_INT 0
46473: PUSH
46474: LD_INT 1
46476: PUSH
46477: EMPTY
46478: LIST
46479: LIST
46480: PUSH
46481: LD_INT 1
46483: NEG
46484: PUSH
46485: LD_INT 0
46487: PUSH
46488: EMPTY
46489: LIST
46490: LIST
46491: PUSH
46492: LD_INT 1
46494: NEG
46495: PUSH
46496: LD_INT 1
46498: NEG
46499: PUSH
46500: EMPTY
46501: LIST
46502: LIST
46503: PUSH
46504: LD_INT 1
46506: NEG
46507: PUSH
46508: LD_INT 2
46510: NEG
46511: PUSH
46512: EMPTY
46513: LIST
46514: LIST
46515: PUSH
46516: LD_INT 0
46518: PUSH
46519: LD_INT 2
46521: NEG
46522: PUSH
46523: EMPTY
46524: LIST
46525: LIST
46526: PUSH
46527: LD_INT 1
46529: PUSH
46530: LD_INT 1
46532: NEG
46533: PUSH
46534: EMPTY
46535: LIST
46536: LIST
46537: PUSH
46538: LD_INT 2
46540: PUSH
46541: LD_INT 1
46543: PUSH
46544: EMPTY
46545: LIST
46546: LIST
46547: PUSH
46548: LD_INT 2
46550: PUSH
46551: LD_INT 2
46553: PUSH
46554: EMPTY
46555: LIST
46556: LIST
46557: PUSH
46558: LD_INT 1
46560: PUSH
46561: LD_INT 2
46563: PUSH
46564: EMPTY
46565: LIST
46566: LIST
46567: PUSH
46568: LD_INT 0
46570: PUSH
46571: LD_INT 2
46573: PUSH
46574: EMPTY
46575: LIST
46576: LIST
46577: PUSH
46578: LD_INT 1
46580: NEG
46581: PUSH
46582: LD_INT 1
46584: PUSH
46585: EMPTY
46586: LIST
46587: LIST
46588: PUSH
46589: LD_INT 2
46591: NEG
46592: PUSH
46593: LD_INT 1
46595: NEG
46596: PUSH
46597: EMPTY
46598: LIST
46599: LIST
46600: PUSH
46601: LD_INT 2
46603: NEG
46604: PUSH
46605: LD_INT 2
46607: NEG
46608: PUSH
46609: EMPTY
46610: LIST
46611: LIST
46612: PUSH
46613: LD_INT 2
46615: NEG
46616: PUSH
46617: LD_INT 3
46619: NEG
46620: PUSH
46621: EMPTY
46622: LIST
46623: LIST
46624: PUSH
46625: LD_INT 1
46627: NEG
46628: PUSH
46629: LD_INT 3
46631: NEG
46632: PUSH
46633: EMPTY
46634: LIST
46635: LIST
46636: PUSH
46637: LD_INT 0
46639: PUSH
46640: LD_INT 3
46642: NEG
46643: PUSH
46644: EMPTY
46645: LIST
46646: LIST
46647: PUSH
46648: LD_INT 1
46650: PUSH
46651: LD_INT 2
46653: NEG
46654: PUSH
46655: EMPTY
46656: LIST
46657: LIST
46658: PUSH
46659: LD_INT 3
46661: PUSH
46662: LD_INT 2
46664: PUSH
46665: EMPTY
46666: LIST
46667: LIST
46668: PUSH
46669: LD_INT 3
46671: PUSH
46672: LD_INT 3
46674: PUSH
46675: EMPTY
46676: LIST
46677: LIST
46678: PUSH
46679: LD_INT 2
46681: PUSH
46682: LD_INT 3
46684: PUSH
46685: EMPTY
46686: LIST
46687: LIST
46688: PUSH
46689: LD_INT 1
46691: PUSH
46692: LD_INT 3
46694: PUSH
46695: EMPTY
46696: LIST
46697: LIST
46698: PUSH
46699: LD_INT 0
46701: PUSH
46702: LD_INT 3
46704: PUSH
46705: EMPTY
46706: LIST
46707: LIST
46708: PUSH
46709: LD_INT 1
46711: NEG
46712: PUSH
46713: LD_INT 2
46715: PUSH
46716: EMPTY
46717: LIST
46718: LIST
46719: PUSH
46720: LD_INT 3
46722: NEG
46723: PUSH
46724: LD_INT 2
46726: NEG
46727: PUSH
46728: EMPTY
46729: LIST
46730: LIST
46731: PUSH
46732: LD_INT 3
46734: NEG
46735: PUSH
46736: LD_INT 3
46738: NEG
46739: PUSH
46740: EMPTY
46741: LIST
46742: LIST
46743: PUSH
46744: EMPTY
46745: LIST
46746: LIST
46747: LIST
46748: LIST
46749: LIST
46750: LIST
46751: LIST
46752: LIST
46753: LIST
46754: LIST
46755: LIST
46756: LIST
46757: LIST
46758: LIST
46759: LIST
46760: LIST
46761: LIST
46762: LIST
46763: LIST
46764: LIST
46765: LIST
46766: LIST
46767: LIST
46768: LIST
46769: LIST
46770: LIST
46771: LIST
46772: LIST
46773: LIST
46774: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46775: LD_ADDR_VAR 0 43
46779: PUSH
46780: LD_INT 0
46782: PUSH
46783: LD_INT 0
46785: PUSH
46786: EMPTY
46787: LIST
46788: LIST
46789: PUSH
46790: LD_INT 0
46792: PUSH
46793: LD_INT 1
46795: NEG
46796: PUSH
46797: EMPTY
46798: LIST
46799: LIST
46800: PUSH
46801: LD_INT 1
46803: PUSH
46804: LD_INT 0
46806: PUSH
46807: EMPTY
46808: LIST
46809: LIST
46810: PUSH
46811: LD_INT 1
46813: PUSH
46814: LD_INT 1
46816: PUSH
46817: EMPTY
46818: LIST
46819: LIST
46820: PUSH
46821: LD_INT 0
46823: PUSH
46824: LD_INT 1
46826: PUSH
46827: EMPTY
46828: LIST
46829: LIST
46830: PUSH
46831: LD_INT 1
46833: NEG
46834: PUSH
46835: LD_INT 0
46837: PUSH
46838: EMPTY
46839: LIST
46840: LIST
46841: PUSH
46842: LD_INT 1
46844: NEG
46845: PUSH
46846: LD_INT 1
46848: NEG
46849: PUSH
46850: EMPTY
46851: LIST
46852: LIST
46853: PUSH
46854: LD_INT 1
46856: NEG
46857: PUSH
46858: LD_INT 2
46860: NEG
46861: PUSH
46862: EMPTY
46863: LIST
46864: LIST
46865: PUSH
46866: LD_INT 0
46868: PUSH
46869: LD_INT 2
46871: NEG
46872: PUSH
46873: EMPTY
46874: LIST
46875: LIST
46876: PUSH
46877: LD_INT 1
46879: PUSH
46880: LD_INT 1
46882: NEG
46883: PUSH
46884: EMPTY
46885: LIST
46886: LIST
46887: PUSH
46888: LD_INT 2
46890: PUSH
46891: LD_INT 0
46893: PUSH
46894: EMPTY
46895: LIST
46896: LIST
46897: PUSH
46898: LD_INT 2
46900: PUSH
46901: LD_INT 1
46903: PUSH
46904: EMPTY
46905: LIST
46906: LIST
46907: PUSH
46908: LD_INT 1
46910: PUSH
46911: LD_INT 2
46913: PUSH
46914: EMPTY
46915: LIST
46916: LIST
46917: PUSH
46918: LD_INT 0
46920: PUSH
46921: LD_INT 2
46923: PUSH
46924: EMPTY
46925: LIST
46926: LIST
46927: PUSH
46928: LD_INT 1
46930: NEG
46931: PUSH
46932: LD_INT 1
46934: PUSH
46935: EMPTY
46936: LIST
46937: LIST
46938: PUSH
46939: LD_INT 2
46941: NEG
46942: PUSH
46943: LD_INT 0
46945: PUSH
46946: EMPTY
46947: LIST
46948: LIST
46949: PUSH
46950: LD_INT 2
46952: NEG
46953: PUSH
46954: LD_INT 1
46956: NEG
46957: PUSH
46958: EMPTY
46959: LIST
46960: LIST
46961: PUSH
46962: LD_INT 1
46964: NEG
46965: PUSH
46966: LD_INT 3
46968: NEG
46969: PUSH
46970: EMPTY
46971: LIST
46972: LIST
46973: PUSH
46974: LD_INT 0
46976: PUSH
46977: LD_INT 3
46979: NEG
46980: PUSH
46981: EMPTY
46982: LIST
46983: LIST
46984: PUSH
46985: LD_INT 1
46987: PUSH
46988: LD_INT 2
46990: NEG
46991: PUSH
46992: EMPTY
46993: LIST
46994: LIST
46995: PUSH
46996: LD_INT 2
46998: PUSH
46999: LD_INT 1
47001: NEG
47002: PUSH
47003: EMPTY
47004: LIST
47005: LIST
47006: PUSH
47007: LD_INT 3
47009: PUSH
47010: LD_INT 0
47012: PUSH
47013: EMPTY
47014: LIST
47015: LIST
47016: PUSH
47017: LD_INT 3
47019: PUSH
47020: LD_INT 1
47022: PUSH
47023: EMPTY
47024: LIST
47025: LIST
47026: PUSH
47027: LD_INT 1
47029: PUSH
47030: LD_INT 3
47032: PUSH
47033: EMPTY
47034: LIST
47035: LIST
47036: PUSH
47037: LD_INT 0
47039: PUSH
47040: LD_INT 3
47042: PUSH
47043: EMPTY
47044: LIST
47045: LIST
47046: PUSH
47047: LD_INT 1
47049: NEG
47050: PUSH
47051: LD_INT 2
47053: PUSH
47054: EMPTY
47055: LIST
47056: LIST
47057: PUSH
47058: LD_INT 2
47060: NEG
47061: PUSH
47062: LD_INT 1
47064: PUSH
47065: EMPTY
47066: LIST
47067: LIST
47068: PUSH
47069: LD_INT 3
47071: NEG
47072: PUSH
47073: LD_INT 0
47075: PUSH
47076: EMPTY
47077: LIST
47078: LIST
47079: PUSH
47080: LD_INT 3
47082: NEG
47083: PUSH
47084: LD_INT 1
47086: NEG
47087: PUSH
47088: EMPTY
47089: LIST
47090: LIST
47091: PUSH
47092: EMPTY
47093: LIST
47094: LIST
47095: LIST
47096: LIST
47097: LIST
47098: LIST
47099: LIST
47100: LIST
47101: LIST
47102: LIST
47103: LIST
47104: LIST
47105: LIST
47106: LIST
47107: LIST
47108: LIST
47109: LIST
47110: LIST
47111: LIST
47112: LIST
47113: LIST
47114: LIST
47115: LIST
47116: LIST
47117: LIST
47118: LIST
47119: LIST
47120: LIST
47121: LIST
47122: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47123: LD_ADDR_VAR 0 44
47127: PUSH
47128: LD_INT 0
47130: PUSH
47131: LD_INT 0
47133: PUSH
47134: EMPTY
47135: LIST
47136: LIST
47137: PUSH
47138: LD_INT 0
47140: PUSH
47141: LD_INT 1
47143: NEG
47144: PUSH
47145: EMPTY
47146: LIST
47147: LIST
47148: PUSH
47149: LD_INT 1
47151: PUSH
47152: LD_INT 0
47154: PUSH
47155: EMPTY
47156: LIST
47157: LIST
47158: PUSH
47159: LD_INT 1
47161: PUSH
47162: LD_INT 1
47164: PUSH
47165: EMPTY
47166: LIST
47167: LIST
47168: PUSH
47169: LD_INT 0
47171: PUSH
47172: LD_INT 1
47174: PUSH
47175: EMPTY
47176: LIST
47177: LIST
47178: PUSH
47179: LD_INT 1
47181: NEG
47182: PUSH
47183: LD_INT 0
47185: PUSH
47186: EMPTY
47187: LIST
47188: LIST
47189: PUSH
47190: LD_INT 1
47192: NEG
47193: PUSH
47194: LD_INT 1
47196: NEG
47197: PUSH
47198: EMPTY
47199: LIST
47200: LIST
47201: PUSH
47202: LD_INT 1
47204: NEG
47205: PUSH
47206: LD_INT 2
47208: NEG
47209: PUSH
47210: EMPTY
47211: LIST
47212: LIST
47213: PUSH
47214: LD_INT 1
47216: PUSH
47217: LD_INT 1
47219: NEG
47220: PUSH
47221: EMPTY
47222: LIST
47223: LIST
47224: PUSH
47225: LD_INT 2
47227: PUSH
47228: LD_INT 0
47230: PUSH
47231: EMPTY
47232: LIST
47233: LIST
47234: PUSH
47235: LD_INT 2
47237: PUSH
47238: LD_INT 1
47240: PUSH
47241: EMPTY
47242: LIST
47243: LIST
47244: PUSH
47245: LD_INT 2
47247: PUSH
47248: LD_INT 2
47250: PUSH
47251: EMPTY
47252: LIST
47253: LIST
47254: PUSH
47255: LD_INT 1
47257: PUSH
47258: LD_INT 2
47260: PUSH
47261: EMPTY
47262: LIST
47263: LIST
47264: PUSH
47265: LD_INT 1
47267: NEG
47268: PUSH
47269: LD_INT 1
47271: PUSH
47272: EMPTY
47273: LIST
47274: LIST
47275: PUSH
47276: LD_INT 2
47278: NEG
47279: PUSH
47280: LD_INT 0
47282: PUSH
47283: EMPTY
47284: LIST
47285: LIST
47286: PUSH
47287: LD_INT 2
47289: NEG
47290: PUSH
47291: LD_INT 1
47293: NEG
47294: PUSH
47295: EMPTY
47296: LIST
47297: LIST
47298: PUSH
47299: LD_INT 2
47301: NEG
47302: PUSH
47303: LD_INT 2
47305: NEG
47306: PUSH
47307: EMPTY
47308: LIST
47309: LIST
47310: PUSH
47311: LD_INT 2
47313: NEG
47314: PUSH
47315: LD_INT 3
47317: NEG
47318: PUSH
47319: EMPTY
47320: LIST
47321: LIST
47322: PUSH
47323: LD_INT 2
47325: PUSH
47326: LD_INT 1
47328: NEG
47329: PUSH
47330: EMPTY
47331: LIST
47332: LIST
47333: PUSH
47334: LD_INT 3
47336: PUSH
47337: LD_INT 0
47339: PUSH
47340: EMPTY
47341: LIST
47342: LIST
47343: PUSH
47344: LD_INT 3
47346: PUSH
47347: LD_INT 1
47349: PUSH
47350: EMPTY
47351: LIST
47352: LIST
47353: PUSH
47354: LD_INT 3
47356: PUSH
47357: LD_INT 2
47359: PUSH
47360: EMPTY
47361: LIST
47362: LIST
47363: PUSH
47364: LD_INT 3
47366: PUSH
47367: LD_INT 3
47369: PUSH
47370: EMPTY
47371: LIST
47372: LIST
47373: PUSH
47374: LD_INT 2
47376: PUSH
47377: LD_INT 3
47379: PUSH
47380: EMPTY
47381: LIST
47382: LIST
47383: PUSH
47384: LD_INT 2
47386: NEG
47387: PUSH
47388: LD_INT 1
47390: PUSH
47391: EMPTY
47392: LIST
47393: LIST
47394: PUSH
47395: LD_INT 3
47397: NEG
47398: PUSH
47399: LD_INT 0
47401: PUSH
47402: EMPTY
47403: LIST
47404: LIST
47405: PUSH
47406: LD_INT 3
47408: NEG
47409: PUSH
47410: LD_INT 1
47412: NEG
47413: PUSH
47414: EMPTY
47415: LIST
47416: LIST
47417: PUSH
47418: LD_INT 3
47420: NEG
47421: PUSH
47422: LD_INT 2
47424: NEG
47425: PUSH
47426: EMPTY
47427: LIST
47428: LIST
47429: PUSH
47430: LD_INT 3
47432: NEG
47433: PUSH
47434: LD_INT 3
47436: NEG
47437: PUSH
47438: EMPTY
47439: LIST
47440: LIST
47441: PUSH
47442: EMPTY
47443: LIST
47444: LIST
47445: LIST
47446: LIST
47447: LIST
47448: LIST
47449: LIST
47450: LIST
47451: LIST
47452: LIST
47453: LIST
47454: LIST
47455: LIST
47456: LIST
47457: LIST
47458: LIST
47459: LIST
47460: LIST
47461: LIST
47462: LIST
47463: LIST
47464: LIST
47465: LIST
47466: LIST
47467: LIST
47468: LIST
47469: LIST
47470: LIST
47471: LIST
47472: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47473: LD_ADDR_VAR 0 45
47477: PUSH
47478: LD_INT 0
47480: PUSH
47481: LD_INT 0
47483: PUSH
47484: EMPTY
47485: LIST
47486: LIST
47487: PUSH
47488: LD_INT 0
47490: PUSH
47491: LD_INT 1
47493: NEG
47494: PUSH
47495: EMPTY
47496: LIST
47497: LIST
47498: PUSH
47499: LD_INT 1
47501: PUSH
47502: LD_INT 0
47504: PUSH
47505: EMPTY
47506: LIST
47507: LIST
47508: PUSH
47509: LD_INT 1
47511: PUSH
47512: LD_INT 1
47514: PUSH
47515: EMPTY
47516: LIST
47517: LIST
47518: PUSH
47519: LD_INT 0
47521: PUSH
47522: LD_INT 1
47524: PUSH
47525: EMPTY
47526: LIST
47527: LIST
47528: PUSH
47529: LD_INT 1
47531: NEG
47532: PUSH
47533: LD_INT 0
47535: PUSH
47536: EMPTY
47537: LIST
47538: LIST
47539: PUSH
47540: LD_INT 1
47542: NEG
47543: PUSH
47544: LD_INT 1
47546: NEG
47547: PUSH
47548: EMPTY
47549: LIST
47550: LIST
47551: PUSH
47552: LD_INT 1
47554: NEG
47555: PUSH
47556: LD_INT 2
47558: NEG
47559: PUSH
47560: EMPTY
47561: LIST
47562: LIST
47563: PUSH
47564: LD_INT 0
47566: PUSH
47567: LD_INT 2
47569: NEG
47570: PUSH
47571: EMPTY
47572: LIST
47573: LIST
47574: PUSH
47575: LD_INT 1
47577: PUSH
47578: LD_INT 1
47580: NEG
47581: PUSH
47582: EMPTY
47583: LIST
47584: LIST
47585: PUSH
47586: LD_INT 2
47588: PUSH
47589: LD_INT 1
47591: PUSH
47592: EMPTY
47593: LIST
47594: LIST
47595: PUSH
47596: LD_INT 2
47598: PUSH
47599: LD_INT 2
47601: PUSH
47602: EMPTY
47603: LIST
47604: LIST
47605: PUSH
47606: LD_INT 1
47608: PUSH
47609: LD_INT 2
47611: PUSH
47612: EMPTY
47613: LIST
47614: LIST
47615: PUSH
47616: LD_INT 0
47618: PUSH
47619: LD_INT 2
47621: PUSH
47622: EMPTY
47623: LIST
47624: LIST
47625: PUSH
47626: LD_INT 1
47628: NEG
47629: PUSH
47630: LD_INT 1
47632: PUSH
47633: EMPTY
47634: LIST
47635: LIST
47636: PUSH
47637: LD_INT 2
47639: NEG
47640: PUSH
47641: LD_INT 1
47643: NEG
47644: PUSH
47645: EMPTY
47646: LIST
47647: LIST
47648: PUSH
47649: LD_INT 2
47651: NEG
47652: PUSH
47653: LD_INT 2
47655: NEG
47656: PUSH
47657: EMPTY
47658: LIST
47659: LIST
47660: PUSH
47661: LD_INT 2
47663: NEG
47664: PUSH
47665: LD_INT 3
47667: NEG
47668: PUSH
47669: EMPTY
47670: LIST
47671: LIST
47672: PUSH
47673: LD_INT 1
47675: NEG
47676: PUSH
47677: LD_INT 3
47679: NEG
47680: PUSH
47681: EMPTY
47682: LIST
47683: LIST
47684: PUSH
47685: LD_INT 0
47687: PUSH
47688: LD_INT 3
47690: NEG
47691: PUSH
47692: EMPTY
47693: LIST
47694: LIST
47695: PUSH
47696: LD_INT 1
47698: PUSH
47699: LD_INT 2
47701: NEG
47702: PUSH
47703: EMPTY
47704: LIST
47705: LIST
47706: PUSH
47707: LD_INT 3
47709: PUSH
47710: LD_INT 2
47712: PUSH
47713: EMPTY
47714: LIST
47715: LIST
47716: PUSH
47717: LD_INT 3
47719: PUSH
47720: LD_INT 3
47722: PUSH
47723: EMPTY
47724: LIST
47725: LIST
47726: PUSH
47727: LD_INT 2
47729: PUSH
47730: LD_INT 3
47732: PUSH
47733: EMPTY
47734: LIST
47735: LIST
47736: PUSH
47737: LD_INT 1
47739: PUSH
47740: LD_INT 3
47742: PUSH
47743: EMPTY
47744: LIST
47745: LIST
47746: PUSH
47747: LD_INT 0
47749: PUSH
47750: LD_INT 3
47752: PUSH
47753: EMPTY
47754: LIST
47755: LIST
47756: PUSH
47757: LD_INT 1
47759: NEG
47760: PUSH
47761: LD_INT 2
47763: PUSH
47764: EMPTY
47765: LIST
47766: LIST
47767: PUSH
47768: LD_INT 3
47770: NEG
47771: PUSH
47772: LD_INT 2
47774: NEG
47775: PUSH
47776: EMPTY
47777: LIST
47778: LIST
47779: PUSH
47780: LD_INT 3
47782: NEG
47783: PUSH
47784: LD_INT 3
47786: NEG
47787: PUSH
47788: EMPTY
47789: LIST
47790: LIST
47791: PUSH
47792: EMPTY
47793: LIST
47794: LIST
47795: LIST
47796: LIST
47797: LIST
47798: LIST
47799: LIST
47800: LIST
47801: LIST
47802: LIST
47803: LIST
47804: LIST
47805: LIST
47806: LIST
47807: LIST
47808: LIST
47809: LIST
47810: LIST
47811: LIST
47812: LIST
47813: LIST
47814: LIST
47815: LIST
47816: LIST
47817: LIST
47818: LIST
47819: LIST
47820: LIST
47821: LIST
47822: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47823: LD_ADDR_VAR 0 46
47827: PUSH
47828: LD_INT 0
47830: PUSH
47831: LD_INT 0
47833: PUSH
47834: EMPTY
47835: LIST
47836: LIST
47837: PUSH
47838: LD_INT 0
47840: PUSH
47841: LD_INT 1
47843: NEG
47844: PUSH
47845: EMPTY
47846: LIST
47847: LIST
47848: PUSH
47849: LD_INT 1
47851: PUSH
47852: LD_INT 0
47854: PUSH
47855: EMPTY
47856: LIST
47857: LIST
47858: PUSH
47859: LD_INT 1
47861: PUSH
47862: LD_INT 1
47864: PUSH
47865: EMPTY
47866: LIST
47867: LIST
47868: PUSH
47869: LD_INT 0
47871: PUSH
47872: LD_INT 1
47874: PUSH
47875: EMPTY
47876: LIST
47877: LIST
47878: PUSH
47879: LD_INT 1
47881: NEG
47882: PUSH
47883: LD_INT 0
47885: PUSH
47886: EMPTY
47887: LIST
47888: LIST
47889: PUSH
47890: LD_INT 1
47892: NEG
47893: PUSH
47894: LD_INT 1
47896: NEG
47897: PUSH
47898: EMPTY
47899: LIST
47900: LIST
47901: PUSH
47902: LD_INT 1
47904: NEG
47905: PUSH
47906: LD_INT 2
47908: NEG
47909: PUSH
47910: EMPTY
47911: LIST
47912: LIST
47913: PUSH
47914: LD_INT 0
47916: PUSH
47917: LD_INT 2
47919: NEG
47920: PUSH
47921: EMPTY
47922: LIST
47923: LIST
47924: PUSH
47925: LD_INT 1
47927: PUSH
47928: LD_INT 1
47930: NEG
47931: PUSH
47932: EMPTY
47933: LIST
47934: LIST
47935: PUSH
47936: LD_INT 2
47938: PUSH
47939: LD_INT 0
47941: PUSH
47942: EMPTY
47943: LIST
47944: LIST
47945: PUSH
47946: LD_INT 2
47948: PUSH
47949: LD_INT 1
47951: PUSH
47952: EMPTY
47953: LIST
47954: LIST
47955: PUSH
47956: LD_INT 1
47958: PUSH
47959: LD_INT 2
47961: PUSH
47962: EMPTY
47963: LIST
47964: LIST
47965: PUSH
47966: LD_INT 0
47968: PUSH
47969: LD_INT 2
47971: PUSH
47972: EMPTY
47973: LIST
47974: LIST
47975: PUSH
47976: LD_INT 1
47978: NEG
47979: PUSH
47980: LD_INT 1
47982: PUSH
47983: EMPTY
47984: LIST
47985: LIST
47986: PUSH
47987: LD_INT 2
47989: NEG
47990: PUSH
47991: LD_INT 0
47993: PUSH
47994: EMPTY
47995: LIST
47996: LIST
47997: PUSH
47998: LD_INT 2
48000: NEG
48001: PUSH
48002: LD_INT 1
48004: NEG
48005: PUSH
48006: EMPTY
48007: LIST
48008: LIST
48009: PUSH
48010: LD_INT 1
48012: NEG
48013: PUSH
48014: LD_INT 3
48016: NEG
48017: PUSH
48018: EMPTY
48019: LIST
48020: LIST
48021: PUSH
48022: LD_INT 0
48024: PUSH
48025: LD_INT 3
48027: NEG
48028: PUSH
48029: EMPTY
48030: LIST
48031: LIST
48032: PUSH
48033: LD_INT 1
48035: PUSH
48036: LD_INT 2
48038: NEG
48039: PUSH
48040: EMPTY
48041: LIST
48042: LIST
48043: PUSH
48044: LD_INT 2
48046: PUSH
48047: LD_INT 1
48049: NEG
48050: PUSH
48051: EMPTY
48052: LIST
48053: LIST
48054: PUSH
48055: LD_INT 3
48057: PUSH
48058: LD_INT 0
48060: PUSH
48061: EMPTY
48062: LIST
48063: LIST
48064: PUSH
48065: LD_INT 3
48067: PUSH
48068: LD_INT 1
48070: PUSH
48071: EMPTY
48072: LIST
48073: LIST
48074: PUSH
48075: LD_INT 1
48077: PUSH
48078: LD_INT 3
48080: PUSH
48081: EMPTY
48082: LIST
48083: LIST
48084: PUSH
48085: LD_INT 0
48087: PUSH
48088: LD_INT 3
48090: PUSH
48091: EMPTY
48092: LIST
48093: LIST
48094: PUSH
48095: LD_INT 1
48097: NEG
48098: PUSH
48099: LD_INT 2
48101: PUSH
48102: EMPTY
48103: LIST
48104: LIST
48105: PUSH
48106: LD_INT 2
48108: NEG
48109: PUSH
48110: LD_INT 1
48112: PUSH
48113: EMPTY
48114: LIST
48115: LIST
48116: PUSH
48117: LD_INT 3
48119: NEG
48120: PUSH
48121: LD_INT 0
48123: PUSH
48124: EMPTY
48125: LIST
48126: LIST
48127: PUSH
48128: LD_INT 3
48130: NEG
48131: PUSH
48132: LD_INT 1
48134: NEG
48135: PUSH
48136: EMPTY
48137: LIST
48138: LIST
48139: PUSH
48140: EMPTY
48141: LIST
48142: LIST
48143: LIST
48144: LIST
48145: LIST
48146: LIST
48147: LIST
48148: LIST
48149: LIST
48150: LIST
48151: LIST
48152: LIST
48153: LIST
48154: LIST
48155: LIST
48156: LIST
48157: LIST
48158: LIST
48159: LIST
48160: LIST
48161: LIST
48162: LIST
48163: LIST
48164: LIST
48165: LIST
48166: LIST
48167: LIST
48168: LIST
48169: LIST
48170: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48171: LD_ADDR_VAR 0 47
48175: PUSH
48176: LD_INT 0
48178: PUSH
48179: LD_INT 0
48181: PUSH
48182: EMPTY
48183: LIST
48184: LIST
48185: PUSH
48186: LD_INT 0
48188: PUSH
48189: LD_INT 1
48191: NEG
48192: PUSH
48193: EMPTY
48194: LIST
48195: LIST
48196: PUSH
48197: LD_INT 1
48199: PUSH
48200: LD_INT 0
48202: PUSH
48203: EMPTY
48204: LIST
48205: LIST
48206: PUSH
48207: LD_INT 1
48209: PUSH
48210: LD_INT 1
48212: PUSH
48213: EMPTY
48214: LIST
48215: LIST
48216: PUSH
48217: LD_INT 0
48219: PUSH
48220: LD_INT 1
48222: PUSH
48223: EMPTY
48224: LIST
48225: LIST
48226: PUSH
48227: LD_INT 1
48229: NEG
48230: PUSH
48231: LD_INT 0
48233: PUSH
48234: EMPTY
48235: LIST
48236: LIST
48237: PUSH
48238: LD_INT 1
48240: NEG
48241: PUSH
48242: LD_INT 1
48244: NEG
48245: PUSH
48246: EMPTY
48247: LIST
48248: LIST
48249: PUSH
48250: LD_INT 1
48252: NEG
48253: PUSH
48254: LD_INT 2
48256: NEG
48257: PUSH
48258: EMPTY
48259: LIST
48260: LIST
48261: PUSH
48262: LD_INT 0
48264: PUSH
48265: LD_INT 2
48267: NEG
48268: PUSH
48269: EMPTY
48270: LIST
48271: LIST
48272: PUSH
48273: LD_INT 1
48275: PUSH
48276: LD_INT 1
48278: NEG
48279: PUSH
48280: EMPTY
48281: LIST
48282: LIST
48283: PUSH
48284: LD_INT 2
48286: NEG
48287: PUSH
48288: LD_INT 1
48290: NEG
48291: PUSH
48292: EMPTY
48293: LIST
48294: LIST
48295: PUSH
48296: LD_INT 2
48298: NEG
48299: PUSH
48300: LD_INT 2
48302: NEG
48303: PUSH
48304: EMPTY
48305: LIST
48306: LIST
48307: PUSH
48308: EMPTY
48309: LIST
48310: LIST
48311: LIST
48312: LIST
48313: LIST
48314: LIST
48315: LIST
48316: LIST
48317: LIST
48318: LIST
48319: LIST
48320: LIST
48321: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
48322: LD_ADDR_VAR 0 48
48326: PUSH
48327: LD_INT 0
48329: PUSH
48330: LD_INT 0
48332: PUSH
48333: EMPTY
48334: LIST
48335: LIST
48336: PUSH
48337: LD_INT 0
48339: PUSH
48340: LD_INT 1
48342: NEG
48343: PUSH
48344: EMPTY
48345: LIST
48346: LIST
48347: PUSH
48348: LD_INT 1
48350: PUSH
48351: LD_INT 0
48353: PUSH
48354: EMPTY
48355: LIST
48356: LIST
48357: PUSH
48358: LD_INT 1
48360: PUSH
48361: LD_INT 1
48363: PUSH
48364: EMPTY
48365: LIST
48366: LIST
48367: PUSH
48368: LD_INT 0
48370: PUSH
48371: LD_INT 1
48373: PUSH
48374: EMPTY
48375: LIST
48376: LIST
48377: PUSH
48378: LD_INT 1
48380: NEG
48381: PUSH
48382: LD_INT 0
48384: PUSH
48385: EMPTY
48386: LIST
48387: LIST
48388: PUSH
48389: LD_INT 1
48391: NEG
48392: PUSH
48393: LD_INT 1
48395: NEG
48396: PUSH
48397: EMPTY
48398: LIST
48399: LIST
48400: PUSH
48401: LD_INT 1
48403: NEG
48404: PUSH
48405: LD_INT 2
48407: NEG
48408: PUSH
48409: EMPTY
48410: LIST
48411: LIST
48412: PUSH
48413: LD_INT 0
48415: PUSH
48416: LD_INT 2
48418: NEG
48419: PUSH
48420: EMPTY
48421: LIST
48422: LIST
48423: PUSH
48424: LD_INT 1
48426: PUSH
48427: LD_INT 1
48429: NEG
48430: PUSH
48431: EMPTY
48432: LIST
48433: LIST
48434: PUSH
48435: LD_INT 2
48437: PUSH
48438: LD_INT 0
48440: PUSH
48441: EMPTY
48442: LIST
48443: LIST
48444: PUSH
48445: LD_INT 2
48447: PUSH
48448: LD_INT 1
48450: PUSH
48451: EMPTY
48452: LIST
48453: LIST
48454: PUSH
48455: EMPTY
48456: LIST
48457: LIST
48458: LIST
48459: LIST
48460: LIST
48461: LIST
48462: LIST
48463: LIST
48464: LIST
48465: LIST
48466: LIST
48467: LIST
48468: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
48469: LD_ADDR_VAR 0 49
48473: PUSH
48474: LD_INT 0
48476: PUSH
48477: LD_INT 0
48479: PUSH
48480: EMPTY
48481: LIST
48482: LIST
48483: PUSH
48484: LD_INT 0
48486: PUSH
48487: LD_INT 1
48489: NEG
48490: PUSH
48491: EMPTY
48492: LIST
48493: LIST
48494: PUSH
48495: LD_INT 1
48497: PUSH
48498: LD_INT 0
48500: PUSH
48501: EMPTY
48502: LIST
48503: LIST
48504: PUSH
48505: LD_INT 1
48507: PUSH
48508: LD_INT 1
48510: PUSH
48511: EMPTY
48512: LIST
48513: LIST
48514: PUSH
48515: LD_INT 0
48517: PUSH
48518: LD_INT 1
48520: PUSH
48521: EMPTY
48522: LIST
48523: LIST
48524: PUSH
48525: LD_INT 1
48527: NEG
48528: PUSH
48529: LD_INT 0
48531: PUSH
48532: EMPTY
48533: LIST
48534: LIST
48535: PUSH
48536: LD_INT 1
48538: NEG
48539: PUSH
48540: LD_INT 1
48542: NEG
48543: PUSH
48544: EMPTY
48545: LIST
48546: LIST
48547: PUSH
48548: LD_INT 1
48550: PUSH
48551: LD_INT 1
48553: NEG
48554: PUSH
48555: EMPTY
48556: LIST
48557: LIST
48558: PUSH
48559: LD_INT 2
48561: PUSH
48562: LD_INT 0
48564: PUSH
48565: EMPTY
48566: LIST
48567: LIST
48568: PUSH
48569: LD_INT 2
48571: PUSH
48572: LD_INT 1
48574: PUSH
48575: EMPTY
48576: LIST
48577: LIST
48578: PUSH
48579: LD_INT 2
48581: PUSH
48582: LD_INT 2
48584: PUSH
48585: EMPTY
48586: LIST
48587: LIST
48588: PUSH
48589: LD_INT 1
48591: PUSH
48592: LD_INT 2
48594: PUSH
48595: EMPTY
48596: LIST
48597: LIST
48598: PUSH
48599: EMPTY
48600: LIST
48601: LIST
48602: LIST
48603: LIST
48604: LIST
48605: LIST
48606: LIST
48607: LIST
48608: LIST
48609: LIST
48610: LIST
48611: LIST
48612: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
48613: LD_ADDR_VAR 0 50
48617: PUSH
48618: LD_INT 0
48620: PUSH
48621: LD_INT 0
48623: PUSH
48624: EMPTY
48625: LIST
48626: LIST
48627: PUSH
48628: LD_INT 0
48630: PUSH
48631: LD_INT 1
48633: NEG
48634: PUSH
48635: EMPTY
48636: LIST
48637: LIST
48638: PUSH
48639: LD_INT 1
48641: PUSH
48642: LD_INT 0
48644: PUSH
48645: EMPTY
48646: LIST
48647: LIST
48648: PUSH
48649: LD_INT 1
48651: PUSH
48652: LD_INT 1
48654: PUSH
48655: EMPTY
48656: LIST
48657: LIST
48658: PUSH
48659: LD_INT 0
48661: PUSH
48662: LD_INT 1
48664: PUSH
48665: EMPTY
48666: LIST
48667: LIST
48668: PUSH
48669: LD_INT 1
48671: NEG
48672: PUSH
48673: LD_INT 0
48675: PUSH
48676: EMPTY
48677: LIST
48678: LIST
48679: PUSH
48680: LD_INT 1
48682: NEG
48683: PUSH
48684: LD_INT 1
48686: NEG
48687: PUSH
48688: EMPTY
48689: LIST
48690: LIST
48691: PUSH
48692: LD_INT 2
48694: PUSH
48695: LD_INT 1
48697: PUSH
48698: EMPTY
48699: LIST
48700: LIST
48701: PUSH
48702: LD_INT 2
48704: PUSH
48705: LD_INT 2
48707: PUSH
48708: EMPTY
48709: LIST
48710: LIST
48711: PUSH
48712: LD_INT 1
48714: PUSH
48715: LD_INT 2
48717: PUSH
48718: EMPTY
48719: LIST
48720: LIST
48721: PUSH
48722: LD_INT 0
48724: PUSH
48725: LD_INT 2
48727: PUSH
48728: EMPTY
48729: LIST
48730: LIST
48731: PUSH
48732: LD_INT 1
48734: NEG
48735: PUSH
48736: LD_INT 1
48738: PUSH
48739: EMPTY
48740: LIST
48741: LIST
48742: PUSH
48743: EMPTY
48744: LIST
48745: LIST
48746: LIST
48747: LIST
48748: LIST
48749: LIST
48750: LIST
48751: LIST
48752: LIST
48753: LIST
48754: LIST
48755: LIST
48756: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
48757: LD_ADDR_VAR 0 51
48761: PUSH
48762: LD_INT 0
48764: PUSH
48765: LD_INT 0
48767: PUSH
48768: EMPTY
48769: LIST
48770: LIST
48771: PUSH
48772: LD_INT 0
48774: PUSH
48775: LD_INT 1
48777: NEG
48778: PUSH
48779: EMPTY
48780: LIST
48781: LIST
48782: PUSH
48783: LD_INT 1
48785: PUSH
48786: LD_INT 0
48788: PUSH
48789: EMPTY
48790: LIST
48791: LIST
48792: PUSH
48793: LD_INT 1
48795: PUSH
48796: LD_INT 1
48798: PUSH
48799: EMPTY
48800: LIST
48801: LIST
48802: PUSH
48803: LD_INT 0
48805: PUSH
48806: LD_INT 1
48808: PUSH
48809: EMPTY
48810: LIST
48811: LIST
48812: PUSH
48813: LD_INT 1
48815: NEG
48816: PUSH
48817: LD_INT 0
48819: PUSH
48820: EMPTY
48821: LIST
48822: LIST
48823: PUSH
48824: LD_INT 1
48826: NEG
48827: PUSH
48828: LD_INT 1
48830: NEG
48831: PUSH
48832: EMPTY
48833: LIST
48834: LIST
48835: PUSH
48836: LD_INT 1
48838: PUSH
48839: LD_INT 2
48841: PUSH
48842: EMPTY
48843: LIST
48844: LIST
48845: PUSH
48846: LD_INT 0
48848: PUSH
48849: LD_INT 2
48851: PUSH
48852: EMPTY
48853: LIST
48854: LIST
48855: PUSH
48856: LD_INT 1
48858: NEG
48859: PUSH
48860: LD_INT 1
48862: PUSH
48863: EMPTY
48864: LIST
48865: LIST
48866: PUSH
48867: LD_INT 2
48869: NEG
48870: PUSH
48871: LD_INT 0
48873: PUSH
48874: EMPTY
48875: LIST
48876: LIST
48877: PUSH
48878: LD_INT 2
48880: NEG
48881: PUSH
48882: LD_INT 1
48884: NEG
48885: PUSH
48886: EMPTY
48887: LIST
48888: LIST
48889: PUSH
48890: EMPTY
48891: LIST
48892: LIST
48893: LIST
48894: LIST
48895: LIST
48896: LIST
48897: LIST
48898: LIST
48899: LIST
48900: LIST
48901: LIST
48902: LIST
48903: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48904: LD_ADDR_VAR 0 52
48908: PUSH
48909: LD_INT 0
48911: PUSH
48912: LD_INT 0
48914: PUSH
48915: EMPTY
48916: LIST
48917: LIST
48918: PUSH
48919: LD_INT 0
48921: PUSH
48922: LD_INT 1
48924: NEG
48925: PUSH
48926: EMPTY
48927: LIST
48928: LIST
48929: PUSH
48930: LD_INT 1
48932: PUSH
48933: LD_INT 0
48935: PUSH
48936: EMPTY
48937: LIST
48938: LIST
48939: PUSH
48940: LD_INT 1
48942: PUSH
48943: LD_INT 1
48945: PUSH
48946: EMPTY
48947: LIST
48948: LIST
48949: PUSH
48950: LD_INT 0
48952: PUSH
48953: LD_INT 1
48955: PUSH
48956: EMPTY
48957: LIST
48958: LIST
48959: PUSH
48960: LD_INT 1
48962: NEG
48963: PUSH
48964: LD_INT 0
48966: PUSH
48967: EMPTY
48968: LIST
48969: LIST
48970: PUSH
48971: LD_INT 1
48973: NEG
48974: PUSH
48975: LD_INT 1
48977: NEG
48978: PUSH
48979: EMPTY
48980: LIST
48981: LIST
48982: PUSH
48983: LD_INT 1
48985: NEG
48986: PUSH
48987: LD_INT 2
48989: NEG
48990: PUSH
48991: EMPTY
48992: LIST
48993: LIST
48994: PUSH
48995: LD_INT 1
48997: NEG
48998: PUSH
48999: LD_INT 1
49001: PUSH
49002: EMPTY
49003: LIST
49004: LIST
49005: PUSH
49006: LD_INT 2
49008: NEG
49009: PUSH
49010: LD_INT 0
49012: PUSH
49013: EMPTY
49014: LIST
49015: LIST
49016: PUSH
49017: LD_INT 2
49019: NEG
49020: PUSH
49021: LD_INT 1
49023: NEG
49024: PUSH
49025: EMPTY
49026: LIST
49027: LIST
49028: PUSH
49029: LD_INT 2
49031: NEG
49032: PUSH
49033: LD_INT 2
49035: NEG
49036: PUSH
49037: EMPTY
49038: LIST
49039: LIST
49040: PUSH
49041: EMPTY
49042: LIST
49043: LIST
49044: LIST
49045: LIST
49046: LIST
49047: LIST
49048: LIST
49049: LIST
49050: LIST
49051: LIST
49052: LIST
49053: LIST
49054: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49055: LD_ADDR_VAR 0 53
49059: PUSH
49060: LD_INT 0
49062: PUSH
49063: LD_INT 0
49065: PUSH
49066: EMPTY
49067: LIST
49068: LIST
49069: PUSH
49070: LD_INT 0
49072: PUSH
49073: LD_INT 1
49075: NEG
49076: PUSH
49077: EMPTY
49078: LIST
49079: LIST
49080: PUSH
49081: LD_INT 1
49083: PUSH
49084: LD_INT 0
49086: PUSH
49087: EMPTY
49088: LIST
49089: LIST
49090: PUSH
49091: LD_INT 1
49093: PUSH
49094: LD_INT 1
49096: PUSH
49097: EMPTY
49098: LIST
49099: LIST
49100: PUSH
49101: LD_INT 0
49103: PUSH
49104: LD_INT 1
49106: PUSH
49107: EMPTY
49108: LIST
49109: LIST
49110: PUSH
49111: LD_INT 1
49113: NEG
49114: PUSH
49115: LD_INT 0
49117: PUSH
49118: EMPTY
49119: LIST
49120: LIST
49121: PUSH
49122: LD_INT 1
49124: NEG
49125: PUSH
49126: LD_INT 1
49128: NEG
49129: PUSH
49130: EMPTY
49131: LIST
49132: LIST
49133: PUSH
49134: LD_INT 1
49136: NEG
49137: PUSH
49138: LD_INT 2
49140: NEG
49141: PUSH
49142: EMPTY
49143: LIST
49144: LIST
49145: PUSH
49146: LD_INT 0
49148: PUSH
49149: LD_INT 2
49151: NEG
49152: PUSH
49153: EMPTY
49154: LIST
49155: LIST
49156: PUSH
49157: LD_INT 1
49159: PUSH
49160: LD_INT 1
49162: NEG
49163: PUSH
49164: EMPTY
49165: LIST
49166: LIST
49167: PUSH
49168: LD_INT 2
49170: PUSH
49171: LD_INT 0
49173: PUSH
49174: EMPTY
49175: LIST
49176: LIST
49177: PUSH
49178: LD_INT 2
49180: PUSH
49181: LD_INT 1
49183: PUSH
49184: EMPTY
49185: LIST
49186: LIST
49187: PUSH
49188: LD_INT 2
49190: PUSH
49191: LD_INT 2
49193: PUSH
49194: EMPTY
49195: LIST
49196: LIST
49197: PUSH
49198: LD_INT 1
49200: PUSH
49201: LD_INT 2
49203: PUSH
49204: EMPTY
49205: LIST
49206: LIST
49207: PUSH
49208: LD_INT 0
49210: PUSH
49211: LD_INT 2
49213: PUSH
49214: EMPTY
49215: LIST
49216: LIST
49217: PUSH
49218: LD_INT 1
49220: NEG
49221: PUSH
49222: LD_INT 1
49224: PUSH
49225: EMPTY
49226: LIST
49227: LIST
49228: PUSH
49229: LD_INT 2
49231: NEG
49232: PUSH
49233: LD_INT 0
49235: PUSH
49236: EMPTY
49237: LIST
49238: LIST
49239: PUSH
49240: LD_INT 2
49242: NEG
49243: PUSH
49244: LD_INT 1
49246: NEG
49247: PUSH
49248: EMPTY
49249: LIST
49250: LIST
49251: PUSH
49252: LD_INT 2
49254: NEG
49255: PUSH
49256: LD_INT 2
49258: NEG
49259: PUSH
49260: EMPTY
49261: LIST
49262: LIST
49263: PUSH
49264: EMPTY
49265: LIST
49266: LIST
49267: LIST
49268: LIST
49269: LIST
49270: LIST
49271: LIST
49272: LIST
49273: LIST
49274: LIST
49275: LIST
49276: LIST
49277: LIST
49278: LIST
49279: LIST
49280: LIST
49281: LIST
49282: LIST
49283: LIST
49284: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49285: LD_ADDR_VAR 0 54
49289: PUSH
49290: LD_INT 0
49292: PUSH
49293: LD_INT 0
49295: PUSH
49296: EMPTY
49297: LIST
49298: LIST
49299: PUSH
49300: LD_INT 0
49302: PUSH
49303: LD_INT 1
49305: NEG
49306: PUSH
49307: EMPTY
49308: LIST
49309: LIST
49310: PUSH
49311: LD_INT 1
49313: PUSH
49314: LD_INT 0
49316: PUSH
49317: EMPTY
49318: LIST
49319: LIST
49320: PUSH
49321: LD_INT 1
49323: PUSH
49324: LD_INT 1
49326: PUSH
49327: EMPTY
49328: LIST
49329: LIST
49330: PUSH
49331: LD_INT 0
49333: PUSH
49334: LD_INT 1
49336: PUSH
49337: EMPTY
49338: LIST
49339: LIST
49340: PUSH
49341: LD_INT 1
49343: NEG
49344: PUSH
49345: LD_INT 0
49347: PUSH
49348: EMPTY
49349: LIST
49350: LIST
49351: PUSH
49352: LD_INT 1
49354: NEG
49355: PUSH
49356: LD_INT 1
49358: NEG
49359: PUSH
49360: EMPTY
49361: LIST
49362: LIST
49363: PUSH
49364: LD_INT 1
49366: NEG
49367: PUSH
49368: LD_INT 2
49370: NEG
49371: PUSH
49372: EMPTY
49373: LIST
49374: LIST
49375: PUSH
49376: LD_INT 0
49378: PUSH
49379: LD_INT 2
49381: NEG
49382: PUSH
49383: EMPTY
49384: LIST
49385: LIST
49386: PUSH
49387: LD_INT 1
49389: PUSH
49390: LD_INT 1
49392: NEG
49393: PUSH
49394: EMPTY
49395: LIST
49396: LIST
49397: PUSH
49398: LD_INT 2
49400: PUSH
49401: LD_INT 0
49403: PUSH
49404: EMPTY
49405: LIST
49406: LIST
49407: PUSH
49408: LD_INT 2
49410: PUSH
49411: LD_INT 1
49413: PUSH
49414: EMPTY
49415: LIST
49416: LIST
49417: PUSH
49418: LD_INT 2
49420: PUSH
49421: LD_INT 2
49423: PUSH
49424: EMPTY
49425: LIST
49426: LIST
49427: PUSH
49428: LD_INT 1
49430: PUSH
49431: LD_INT 2
49433: PUSH
49434: EMPTY
49435: LIST
49436: LIST
49437: PUSH
49438: LD_INT 0
49440: PUSH
49441: LD_INT 2
49443: PUSH
49444: EMPTY
49445: LIST
49446: LIST
49447: PUSH
49448: LD_INT 1
49450: NEG
49451: PUSH
49452: LD_INT 1
49454: PUSH
49455: EMPTY
49456: LIST
49457: LIST
49458: PUSH
49459: LD_INT 2
49461: NEG
49462: PUSH
49463: LD_INT 0
49465: PUSH
49466: EMPTY
49467: LIST
49468: LIST
49469: PUSH
49470: LD_INT 2
49472: NEG
49473: PUSH
49474: LD_INT 1
49476: NEG
49477: PUSH
49478: EMPTY
49479: LIST
49480: LIST
49481: PUSH
49482: LD_INT 2
49484: NEG
49485: PUSH
49486: LD_INT 2
49488: NEG
49489: PUSH
49490: EMPTY
49491: LIST
49492: LIST
49493: PUSH
49494: EMPTY
49495: LIST
49496: LIST
49497: LIST
49498: LIST
49499: LIST
49500: LIST
49501: LIST
49502: LIST
49503: LIST
49504: LIST
49505: LIST
49506: LIST
49507: LIST
49508: LIST
49509: LIST
49510: LIST
49511: LIST
49512: LIST
49513: LIST
49514: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49515: LD_ADDR_VAR 0 55
49519: PUSH
49520: LD_INT 0
49522: PUSH
49523: LD_INT 0
49525: PUSH
49526: EMPTY
49527: LIST
49528: LIST
49529: PUSH
49530: LD_INT 0
49532: PUSH
49533: LD_INT 1
49535: NEG
49536: PUSH
49537: EMPTY
49538: LIST
49539: LIST
49540: PUSH
49541: LD_INT 1
49543: PUSH
49544: LD_INT 0
49546: PUSH
49547: EMPTY
49548: LIST
49549: LIST
49550: PUSH
49551: LD_INT 1
49553: PUSH
49554: LD_INT 1
49556: PUSH
49557: EMPTY
49558: LIST
49559: LIST
49560: PUSH
49561: LD_INT 0
49563: PUSH
49564: LD_INT 1
49566: PUSH
49567: EMPTY
49568: LIST
49569: LIST
49570: PUSH
49571: LD_INT 1
49573: NEG
49574: PUSH
49575: LD_INT 0
49577: PUSH
49578: EMPTY
49579: LIST
49580: LIST
49581: PUSH
49582: LD_INT 1
49584: NEG
49585: PUSH
49586: LD_INT 1
49588: NEG
49589: PUSH
49590: EMPTY
49591: LIST
49592: LIST
49593: PUSH
49594: LD_INT 1
49596: NEG
49597: PUSH
49598: LD_INT 2
49600: NEG
49601: PUSH
49602: EMPTY
49603: LIST
49604: LIST
49605: PUSH
49606: LD_INT 0
49608: PUSH
49609: LD_INT 2
49611: NEG
49612: PUSH
49613: EMPTY
49614: LIST
49615: LIST
49616: PUSH
49617: LD_INT 1
49619: PUSH
49620: LD_INT 1
49622: NEG
49623: PUSH
49624: EMPTY
49625: LIST
49626: LIST
49627: PUSH
49628: LD_INT 2
49630: PUSH
49631: LD_INT 0
49633: PUSH
49634: EMPTY
49635: LIST
49636: LIST
49637: PUSH
49638: LD_INT 2
49640: PUSH
49641: LD_INT 1
49643: PUSH
49644: EMPTY
49645: LIST
49646: LIST
49647: PUSH
49648: LD_INT 2
49650: PUSH
49651: LD_INT 2
49653: PUSH
49654: EMPTY
49655: LIST
49656: LIST
49657: PUSH
49658: LD_INT 1
49660: PUSH
49661: LD_INT 2
49663: PUSH
49664: EMPTY
49665: LIST
49666: LIST
49667: PUSH
49668: LD_INT 0
49670: PUSH
49671: LD_INT 2
49673: PUSH
49674: EMPTY
49675: LIST
49676: LIST
49677: PUSH
49678: LD_INT 1
49680: NEG
49681: PUSH
49682: LD_INT 1
49684: PUSH
49685: EMPTY
49686: LIST
49687: LIST
49688: PUSH
49689: LD_INT 2
49691: NEG
49692: PUSH
49693: LD_INT 0
49695: PUSH
49696: EMPTY
49697: LIST
49698: LIST
49699: PUSH
49700: LD_INT 2
49702: NEG
49703: PUSH
49704: LD_INT 1
49706: NEG
49707: PUSH
49708: EMPTY
49709: LIST
49710: LIST
49711: PUSH
49712: LD_INT 2
49714: NEG
49715: PUSH
49716: LD_INT 2
49718: NEG
49719: PUSH
49720: EMPTY
49721: LIST
49722: LIST
49723: PUSH
49724: EMPTY
49725: LIST
49726: LIST
49727: LIST
49728: LIST
49729: LIST
49730: LIST
49731: LIST
49732: LIST
49733: LIST
49734: LIST
49735: LIST
49736: LIST
49737: LIST
49738: LIST
49739: LIST
49740: LIST
49741: LIST
49742: LIST
49743: LIST
49744: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49745: LD_ADDR_VAR 0 56
49749: PUSH
49750: LD_INT 0
49752: PUSH
49753: LD_INT 0
49755: PUSH
49756: EMPTY
49757: LIST
49758: LIST
49759: PUSH
49760: LD_INT 0
49762: PUSH
49763: LD_INT 1
49765: NEG
49766: PUSH
49767: EMPTY
49768: LIST
49769: LIST
49770: PUSH
49771: LD_INT 1
49773: PUSH
49774: LD_INT 0
49776: PUSH
49777: EMPTY
49778: LIST
49779: LIST
49780: PUSH
49781: LD_INT 1
49783: PUSH
49784: LD_INT 1
49786: PUSH
49787: EMPTY
49788: LIST
49789: LIST
49790: PUSH
49791: LD_INT 0
49793: PUSH
49794: LD_INT 1
49796: PUSH
49797: EMPTY
49798: LIST
49799: LIST
49800: PUSH
49801: LD_INT 1
49803: NEG
49804: PUSH
49805: LD_INT 0
49807: PUSH
49808: EMPTY
49809: LIST
49810: LIST
49811: PUSH
49812: LD_INT 1
49814: NEG
49815: PUSH
49816: LD_INT 1
49818: NEG
49819: PUSH
49820: EMPTY
49821: LIST
49822: LIST
49823: PUSH
49824: LD_INT 1
49826: NEG
49827: PUSH
49828: LD_INT 2
49830: NEG
49831: PUSH
49832: EMPTY
49833: LIST
49834: LIST
49835: PUSH
49836: LD_INT 0
49838: PUSH
49839: LD_INT 2
49841: NEG
49842: PUSH
49843: EMPTY
49844: LIST
49845: LIST
49846: PUSH
49847: LD_INT 1
49849: PUSH
49850: LD_INT 1
49852: NEG
49853: PUSH
49854: EMPTY
49855: LIST
49856: LIST
49857: PUSH
49858: LD_INT 2
49860: PUSH
49861: LD_INT 0
49863: PUSH
49864: EMPTY
49865: LIST
49866: LIST
49867: PUSH
49868: LD_INT 2
49870: PUSH
49871: LD_INT 1
49873: PUSH
49874: EMPTY
49875: LIST
49876: LIST
49877: PUSH
49878: LD_INT 2
49880: PUSH
49881: LD_INT 2
49883: PUSH
49884: EMPTY
49885: LIST
49886: LIST
49887: PUSH
49888: LD_INT 1
49890: PUSH
49891: LD_INT 2
49893: PUSH
49894: EMPTY
49895: LIST
49896: LIST
49897: PUSH
49898: LD_INT 0
49900: PUSH
49901: LD_INT 2
49903: PUSH
49904: EMPTY
49905: LIST
49906: LIST
49907: PUSH
49908: LD_INT 1
49910: NEG
49911: PUSH
49912: LD_INT 1
49914: PUSH
49915: EMPTY
49916: LIST
49917: LIST
49918: PUSH
49919: LD_INT 2
49921: NEG
49922: PUSH
49923: LD_INT 0
49925: PUSH
49926: EMPTY
49927: LIST
49928: LIST
49929: PUSH
49930: LD_INT 2
49932: NEG
49933: PUSH
49934: LD_INT 1
49936: NEG
49937: PUSH
49938: EMPTY
49939: LIST
49940: LIST
49941: PUSH
49942: LD_INT 2
49944: NEG
49945: PUSH
49946: LD_INT 2
49948: NEG
49949: PUSH
49950: EMPTY
49951: LIST
49952: LIST
49953: PUSH
49954: EMPTY
49955: LIST
49956: LIST
49957: LIST
49958: LIST
49959: LIST
49960: LIST
49961: LIST
49962: LIST
49963: LIST
49964: LIST
49965: LIST
49966: LIST
49967: LIST
49968: LIST
49969: LIST
49970: LIST
49971: LIST
49972: LIST
49973: LIST
49974: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49975: LD_ADDR_VAR 0 57
49979: PUSH
49980: LD_INT 0
49982: PUSH
49983: LD_INT 0
49985: PUSH
49986: EMPTY
49987: LIST
49988: LIST
49989: PUSH
49990: LD_INT 0
49992: PUSH
49993: LD_INT 1
49995: NEG
49996: PUSH
49997: EMPTY
49998: LIST
49999: LIST
50000: PUSH
50001: LD_INT 1
50003: PUSH
50004: LD_INT 0
50006: PUSH
50007: EMPTY
50008: LIST
50009: LIST
50010: PUSH
50011: LD_INT 1
50013: PUSH
50014: LD_INT 1
50016: PUSH
50017: EMPTY
50018: LIST
50019: LIST
50020: PUSH
50021: LD_INT 0
50023: PUSH
50024: LD_INT 1
50026: PUSH
50027: EMPTY
50028: LIST
50029: LIST
50030: PUSH
50031: LD_INT 1
50033: NEG
50034: PUSH
50035: LD_INT 0
50037: PUSH
50038: EMPTY
50039: LIST
50040: LIST
50041: PUSH
50042: LD_INT 1
50044: NEG
50045: PUSH
50046: LD_INT 1
50048: NEG
50049: PUSH
50050: EMPTY
50051: LIST
50052: LIST
50053: PUSH
50054: LD_INT 1
50056: NEG
50057: PUSH
50058: LD_INT 2
50060: NEG
50061: PUSH
50062: EMPTY
50063: LIST
50064: LIST
50065: PUSH
50066: LD_INT 0
50068: PUSH
50069: LD_INT 2
50071: NEG
50072: PUSH
50073: EMPTY
50074: LIST
50075: LIST
50076: PUSH
50077: LD_INT 1
50079: PUSH
50080: LD_INT 1
50082: NEG
50083: PUSH
50084: EMPTY
50085: LIST
50086: LIST
50087: PUSH
50088: LD_INT 2
50090: PUSH
50091: LD_INT 0
50093: PUSH
50094: EMPTY
50095: LIST
50096: LIST
50097: PUSH
50098: LD_INT 2
50100: PUSH
50101: LD_INT 1
50103: PUSH
50104: EMPTY
50105: LIST
50106: LIST
50107: PUSH
50108: LD_INT 2
50110: PUSH
50111: LD_INT 2
50113: PUSH
50114: EMPTY
50115: LIST
50116: LIST
50117: PUSH
50118: LD_INT 1
50120: PUSH
50121: LD_INT 2
50123: PUSH
50124: EMPTY
50125: LIST
50126: LIST
50127: PUSH
50128: LD_INT 0
50130: PUSH
50131: LD_INT 2
50133: PUSH
50134: EMPTY
50135: LIST
50136: LIST
50137: PUSH
50138: LD_INT 1
50140: NEG
50141: PUSH
50142: LD_INT 1
50144: PUSH
50145: EMPTY
50146: LIST
50147: LIST
50148: PUSH
50149: LD_INT 2
50151: NEG
50152: PUSH
50153: LD_INT 0
50155: PUSH
50156: EMPTY
50157: LIST
50158: LIST
50159: PUSH
50160: LD_INT 2
50162: NEG
50163: PUSH
50164: LD_INT 1
50166: NEG
50167: PUSH
50168: EMPTY
50169: LIST
50170: LIST
50171: PUSH
50172: LD_INT 2
50174: NEG
50175: PUSH
50176: LD_INT 2
50178: NEG
50179: PUSH
50180: EMPTY
50181: LIST
50182: LIST
50183: PUSH
50184: EMPTY
50185: LIST
50186: LIST
50187: LIST
50188: LIST
50189: LIST
50190: LIST
50191: LIST
50192: LIST
50193: LIST
50194: LIST
50195: LIST
50196: LIST
50197: LIST
50198: LIST
50199: LIST
50200: LIST
50201: LIST
50202: LIST
50203: LIST
50204: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50205: LD_ADDR_VAR 0 58
50209: PUSH
50210: LD_INT 0
50212: PUSH
50213: LD_INT 0
50215: PUSH
50216: EMPTY
50217: LIST
50218: LIST
50219: PUSH
50220: LD_INT 0
50222: PUSH
50223: LD_INT 1
50225: NEG
50226: PUSH
50227: EMPTY
50228: LIST
50229: LIST
50230: PUSH
50231: LD_INT 1
50233: PUSH
50234: LD_INT 0
50236: PUSH
50237: EMPTY
50238: LIST
50239: LIST
50240: PUSH
50241: LD_INT 1
50243: PUSH
50244: LD_INT 1
50246: PUSH
50247: EMPTY
50248: LIST
50249: LIST
50250: PUSH
50251: LD_INT 0
50253: PUSH
50254: LD_INT 1
50256: PUSH
50257: EMPTY
50258: LIST
50259: LIST
50260: PUSH
50261: LD_INT 1
50263: NEG
50264: PUSH
50265: LD_INT 0
50267: PUSH
50268: EMPTY
50269: LIST
50270: LIST
50271: PUSH
50272: LD_INT 1
50274: NEG
50275: PUSH
50276: LD_INT 1
50278: NEG
50279: PUSH
50280: EMPTY
50281: LIST
50282: LIST
50283: PUSH
50284: LD_INT 1
50286: NEG
50287: PUSH
50288: LD_INT 2
50290: NEG
50291: PUSH
50292: EMPTY
50293: LIST
50294: LIST
50295: PUSH
50296: LD_INT 0
50298: PUSH
50299: LD_INT 2
50301: NEG
50302: PUSH
50303: EMPTY
50304: LIST
50305: LIST
50306: PUSH
50307: LD_INT 1
50309: PUSH
50310: LD_INT 1
50312: NEG
50313: PUSH
50314: EMPTY
50315: LIST
50316: LIST
50317: PUSH
50318: LD_INT 2
50320: PUSH
50321: LD_INT 0
50323: PUSH
50324: EMPTY
50325: LIST
50326: LIST
50327: PUSH
50328: LD_INT 2
50330: PUSH
50331: LD_INT 1
50333: PUSH
50334: EMPTY
50335: LIST
50336: LIST
50337: PUSH
50338: LD_INT 2
50340: PUSH
50341: LD_INT 2
50343: PUSH
50344: EMPTY
50345: LIST
50346: LIST
50347: PUSH
50348: LD_INT 1
50350: PUSH
50351: LD_INT 2
50353: PUSH
50354: EMPTY
50355: LIST
50356: LIST
50357: PUSH
50358: LD_INT 0
50360: PUSH
50361: LD_INT 2
50363: PUSH
50364: EMPTY
50365: LIST
50366: LIST
50367: PUSH
50368: LD_INT 1
50370: NEG
50371: PUSH
50372: LD_INT 1
50374: PUSH
50375: EMPTY
50376: LIST
50377: LIST
50378: PUSH
50379: LD_INT 2
50381: NEG
50382: PUSH
50383: LD_INT 0
50385: PUSH
50386: EMPTY
50387: LIST
50388: LIST
50389: PUSH
50390: LD_INT 2
50392: NEG
50393: PUSH
50394: LD_INT 1
50396: NEG
50397: PUSH
50398: EMPTY
50399: LIST
50400: LIST
50401: PUSH
50402: LD_INT 2
50404: NEG
50405: PUSH
50406: LD_INT 2
50408: NEG
50409: PUSH
50410: EMPTY
50411: LIST
50412: LIST
50413: PUSH
50414: EMPTY
50415: LIST
50416: LIST
50417: LIST
50418: LIST
50419: LIST
50420: LIST
50421: LIST
50422: LIST
50423: LIST
50424: LIST
50425: LIST
50426: LIST
50427: LIST
50428: LIST
50429: LIST
50430: LIST
50431: LIST
50432: LIST
50433: LIST
50434: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50435: LD_ADDR_VAR 0 59
50439: PUSH
50440: LD_INT 0
50442: PUSH
50443: LD_INT 0
50445: PUSH
50446: EMPTY
50447: LIST
50448: LIST
50449: PUSH
50450: LD_INT 0
50452: PUSH
50453: LD_INT 1
50455: NEG
50456: PUSH
50457: EMPTY
50458: LIST
50459: LIST
50460: PUSH
50461: LD_INT 1
50463: PUSH
50464: LD_INT 0
50466: PUSH
50467: EMPTY
50468: LIST
50469: LIST
50470: PUSH
50471: LD_INT 1
50473: PUSH
50474: LD_INT 1
50476: PUSH
50477: EMPTY
50478: LIST
50479: LIST
50480: PUSH
50481: LD_INT 0
50483: PUSH
50484: LD_INT 1
50486: PUSH
50487: EMPTY
50488: LIST
50489: LIST
50490: PUSH
50491: LD_INT 1
50493: NEG
50494: PUSH
50495: LD_INT 0
50497: PUSH
50498: EMPTY
50499: LIST
50500: LIST
50501: PUSH
50502: LD_INT 1
50504: NEG
50505: PUSH
50506: LD_INT 1
50508: NEG
50509: PUSH
50510: EMPTY
50511: LIST
50512: LIST
50513: PUSH
50514: EMPTY
50515: LIST
50516: LIST
50517: LIST
50518: LIST
50519: LIST
50520: LIST
50521: LIST
50522: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50523: LD_ADDR_VAR 0 60
50527: PUSH
50528: LD_INT 0
50530: PUSH
50531: LD_INT 0
50533: PUSH
50534: EMPTY
50535: LIST
50536: LIST
50537: PUSH
50538: LD_INT 0
50540: PUSH
50541: LD_INT 1
50543: NEG
50544: PUSH
50545: EMPTY
50546: LIST
50547: LIST
50548: PUSH
50549: LD_INT 1
50551: PUSH
50552: LD_INT 0
50554: PUSH
50555: EMPTY
50556: LIST
50557: LIST
50558: PUSH
50559: LD_INT 1
50561: PUSH
50562: LD_INT 1
50564: PUSH
50565: EMPTY
50566: LIST
50567: LIST
50568: PUSH
50569: LD_INT 0
50571: PUSH
50572: LD_INT 1
50574: PUSH
50575: EMPTY
50576: LIST
50577: LIST
50578: PUSH
50579: LD_INT 1
50581: NEG
50582: PUSH
50583: LD_INT 0
50585: PUSH
50586: EMPTY
50587: LIST
50588: LIST
50589: PUSH
50590: LD_INT 1
50592: NEG
50593: PUSH
50594: LD_INT 1
50596: NEG
50597: PUSH
50598: EMPTY
50599: LIST
50600: LIST
50601: PUSH
50602: EMPTY
50603: LIST
50604: LIST
50605: LIST
50606: LIST
50607: LIST
50608: LIST
50609: LIST
50610: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50611: LD_ADDR_VAR 0 61
50615: PUSH
50616: LD_INT 0
50618: PUSH
50619: LD_INT 0
50621: PUSH
50622: EMPTY
50623: LIST
50624: LIST
50625: PUSH
50626: LD_INT 0
50628: PUSH
50629: LD_INT 1
50631: NEG
50632: PUSH
50633: EMPTY
50634: LIST
50635: LIST
50636: PUSH
50637: LD_INT 1
50639: PUSH
50640: LD_INT 0
50642: PUSH
50643: EMPTY
50644: LIST
50645: LIST
50646: PUSH
50647: LD_INT 1
50649: PUSH
50650: LD_INT 1
50652: PUSH
50653: EMPTY
50654: LIST
50655: LIST
50656: PUSH
50657: LD_INT 0
50659: PUSH
50660: LD_INT 1
50662: PUSH
50663: EMPTY
50664: LIST
50665: LIST
50666: PUSH
50667: LD_INT 1
50669: NEG
50670: PUSH
50671: LD_INT 0
50673: PUSH
50674: EMPTY
50675: LIST
50676: LIST
50677: PUSH
50678: LD_INT 1
50680: NEG
50681: PUSH
50682: LD_INT 1
50684: NEG
50685: PUSH
50686: EMPTY
50687: LIST
50688: LIST
50689: PUSH
50690: EMPTY
50691: LIST
50692: LIST
50693: LIST
50694: LIST
50695: LIST
50696: LIST
50697: LIST
50698: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50699: LD_ADDR_VAR 0 62
50703: PUSH
50704: LD_INT 0
50706: PUSH
50707: LD_INT 0
50709: PUSH
50710: EMPTY
50711: LIST
50712: LIST
50713: PUSH
50714: LD_INT 0
50716: PUSH
50717: LD_INT 1
50719: NEG
50720: PUSH
50721: EMPTY
50722: LIST
50723: LIST
50724: PUSH
50725: LD_INT 1
50727: PUSH
50728: LD_INT 0
50730: PUSH
50731: EMPTY
50732: LIST
50733: LIST
50734: PUSH
50735: LD_INT 1
50737: PUSH
50738: LD_INT 1
50740: PUSH
50741: EMPTY
50742: LIST
50743: LIST
50744: PUSH
50745: LD_INT 0
50747: PUSH
50748: LD_INT 1
50750: PUSH
50751: EMPTY
50752: LIST
50753: LIST
50754: PUSH
50755: LD_INT 1
50757: NEG
50758: PUSH
50759: LD_INT 0
50761: PUSH
50762: EMPTY
50763: LIST
50764: LIST
50765: PUSH
50766: LD_INT 1
50768: NEG
50769: PUSH
50770: LD_INT 1
50772: NEG
50773: PUSH
50774: EMPTY
50775: LIST
50776: LIST
50777: PUSH
50778: EMPTY
50779: LIST
50780: LIST
50781: LIST
50782: LIST
50783: LIST
50784: LIST
50785: LIST
50786: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50787: LD_ADDR_VAR 0 63
50791: PUSH
50792: LD_INT 0
50794: PUSH
50795: LD_INT 0
50797: PUSH
50798: EMPTY
50799: LIST
50800: LIST
50801: PUSH
50802: LD_INT 0
50804: PUSH
50805: LD_INT 1
50807: NEG
50808: PUSH
50809: EMPTY
50810: LIST
50811: LIST
50812: PUSH
50813: LD_INT 1
50815: PUSH
50816: LD_INT 0
50818: PUSH
50819: EMPTY
50820: LIST
50821: LIST
50822: PUSH
50823: LD_INT 1
50825: PUSH
50826: LD_INT 1
50828: PUSH
50829: EMPTY
50830: LIST
50831: LIST
50832: PUSH
50833: LD_INT 0
50835: PUSH
50836: LD_INT 1
50838: PUSH
50839: EMPTY
50840: LIST
50841: LIST
50842: PUSH
50843: LD_INT 1
50845: NEG
50846: PUSH
50847: LD_INT 0
50849: PUSH
50850: EMPTY
50851: LIST
50852: LIST
50853: PUSH
50854: LD_INT 1
50856: NEG
50857: PUSH
50858: LD_INT 1
50860: NEG
50861: PUSH
50862: EMPTY
50863: LIST
50864: LIST
50865: PUSH
50866: EMPTY
50867: LIST
50868: LIST
50869: LIST
50870: LIST
50871: LIST
50872: LIST
50873: LIST
50874: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50875: LD_ADDR_VAR 0 64
50879: PUSH
50880: LD_INT 0
50882: PUSH
50883: LD_INT 0
50885: PUSH
50886: EMPTY
50887: LIST
50888: LIST
50889: PUSH
50890: LD_INT 0
50892: PUSH
50893: LD_INT 1
50895: NEG
50896: PUSH
50897: EMPTY
50898: LIST
50899: LIST
50900: PUSH
50901: LD_INT 1
50903: PUSH
50904: LD_INT 0
50906: PUSH
50907: EMPTY
50908: LIST
50909: LIST
50910: PUSH
50911: LD_INT 1
50913: PUSH
50914: LD_INT 1
50916: PUSH
50917: EMPTY
50918: LIST
50919: LIST
50920: PUSH
50921: LD_INT 0
50923: PUSH
50924: LD_INT 1
50926: PUSH
50927: EMPTY
50928: LIST
50929: LIST
50930: PUSH
50931: LD_INT 1
50933: NEG
50934: PUSH
50935: LD_INT 0
50937: PUSH
50938: EMPTY
50939: LIST
50940: LIST
50941: PUSH
50942: LD_INT 1
50944: NEG
50945: PUSH
50946: LD_INT 1
50948: NEG
50949: PUSH
50950: EMPTY
50951: LIST
50952: LIST
50953: PUSH
50954: EMPTY
50955: LIST
50956: LIST
50957: LIST
50958: LIST
50959: LIST
50960: LIST
50961: LIST
50962: ST_TO_ADDR
// end ; 1 :
50963: GO 56860
50965: LD_INT 1
50967: DOUBLE
50968: EQUAL
50969: IFTRUE 50973
50971: GO 53596
50973: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
50974: LD_ADDR_VAR 0 11
50978: PUSH
50979: LD_INT 1
50981: NEG
50982: PUSH
50983: LD_INT 3
50985: NEG
50986: PUSH
50987: EMPTY
50988: LIST
50989: LIST
50990: PUSH
50991: LD_INT 0
50993: PUSH
50994: LD_INT 3
50996: NEG
50997: PUSH
50998: EMPTY
50999: LIST
51000: LIST
51001: PUSH
51002: LD_INT 1
51004: PUSH
51005: LD_INT 2
51007: NEG
51008: PUSH
51009: EMPTY
51010: LIST
51011: LIST
51012: PUSH
51013: EMPTY
51014: LIST
51015: LIST
51016: LIST
51017: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
51018: LD_ADDR_VAR 0 12
51022: PUSH
51023: LD_INT 2
51025: PUSH
51026: LD_INT 1
51028: NEG
51029: PUSH
51030: EMPTY
51031: LIST
51032: LIST
51033: PUSH
51034: LD_INT 3
51036: PUSH
51037: LD_INT 0
51039: PUSH
51040: EMPTY
51041: LIST
51042: LIST
51043: PUSH
51044: LD_INT 3
51046: PUSH
51047: LD_INT 1
51049: PUSH
51050: EMPTY
51051: LIST
51052: LIST
51053: PUSH
51054: EMPTY
51055: LIST
51056: LIST
51057: LIST
51058: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
51059: LD_ADDR_VAR 0 13
51063: PUSH
51064: LD_INT 3
51066: PUSH
51067: LD_INT 2
51069: PUSH
51070: EMPTY
51071: LIST
51072: LIST
51073: PUSH
51074: LD_INT 3
51076: PUSH
51077: LD_INT 3
51079: PUSH
51080: EMPTY
51081: LIST
51082: LIST
51083: PUSH
51084: LD_INT 2
51086: PUSH
51087: LD_INT 3
51089: PUSH
51090: EMPTY
51091: LIST
51092: LIST
51093: PUSH
51094: EMPTY
51095: LIST
51096: LIST
51097: LIST
51098: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
51099: LD_ADDR_VAR 0 14
51103: PUSH
51104: LD_INT 1
51106: PUSH
51107: LD_INT 3
51109: PUSH
51110: EMPTY
51111: LIST
51112: LIST
51113: PUSH
51114: LD_INT 0
51116: PUSH
51117: LD_INT 3
51119: PUSH
51120: EMPTY
51121: LIST
51122: LIST
51123: PUSH
51124: LD_INT 1
51126: NEG
51127: PUSH
51128: LD_INT 2
51130: PUSH
51131: EMPTY
51132: LIST
51133: LIST
51134: PUSH
51135: EMPTY
51136: LIST
51137: LIST
51138: LIST
51139: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51140: LD_ADDR_VAR 0 15
51144: PUSH
51145: LD_INT 2
51147: NEG
51148: PUSH
51149: LD_INT 1
51151: PUSH
51152: EMPTY
51153: LIST
51154: LIST
51155: PUSH
51156: LD_INT 3
51158: NEG
51159: PUSH
51160: LD_INT 0
51162: PUSH
51163: EMPTY
51164: LIST
51165: LIST
51166: PUSH
51167: LD_INT 3
51169: NEG
51170: PUSH
51171: LD_INT 1
51173: NEG
51174: PUSH
51175: EMPTY
51176: LIST
51177: LIST
51178: PUSH
51179: EMPTY
51180: LIST
51181: LIST
51182: LIST
51183: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51184: LD_ADDR_VAR 0 16
51188: PUSH
51189: LD_INT 2
51191: NEG
51192: PUSH
51193: LD_INT 3
51195: NEG
51196: PUSH
51197: EMPTY
51198: LIST
51199: LIST
51200: PUSH
51201: LD_INT 3
51203: NEG
51204: PUSH
51205: LD_INT 2
51207: NEG
51208: PUSH
51209: EMPTY
51210: LIST
51211: LIST
51212: PUSH
51213: LD_INT 3
51215: NEG
51216: PUSH
51217: LD_INT 3
51219: NEG
51220: PUSH
51221: EMPTY
51222: LIST
51223: LIST
51224: PUSH
51225: EMPTY
51226: LIST
51227: LIST
51228: LIST
51229: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
51230: LD_ADDR_VAR 0 17
51234: PUSH
51235: LD_INT 1
51237: NEG
51238: PUSH
51239: LD_INT 3
51241: NEG
51242: PUSH
51243: EMPTY
51244: LIST
51245: LIST
51246: PUSH
51247: LD_INT 0
51249: PUSH
51250: LD_INT 3
51252: NEG
51253: PUSH
51254: EMPTY
51255: LIST
51256: LIST
51257: PUSH
51258: LD_INT 1
51260: PUSH
51261: LD_INT 2
51263: NEG
51264: PUSH
51265: EMPTY
51266: LIST
51267: LIST
51268: PUSH
51269: EMPTY
51270: LIST
51271: LIST
51272: LIST
51273: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
51274: LD_ADDR_VAR 0 18
51278: PUSH
51279: LD_INT 2
51281: PUSH
51282: LD_INT 1
51284: NEG
51285: PUSH
51286: EMPTY
51287: LIST
51288: LIST
51289: PUSH
51290: LD_INT 3
51292: PUSH
51293: LD_INT 0
51295: PUSH
51296: EMPTY
51297: LIST
51298: LIST
51299: PUSH
51300: LD_INT 3
51302: PUSH
51303: LD_INT 1
51305: PUSH
51306: EMPTY
51307: LIST
51308: LIST
51309: PUSH
51310: EMPTY
51311: LIST
51312: LIST
51313: LIST
51314: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
51315: LD_ADDR_VAR 0 19
51319: PUSH
51320: LD_INT 3
51322: PUSH
51323: LD_INT 2
51325: PUSH
51326: EMPTY
51327: LIST
51328: LIST
51329: PUSH
51330: LD_INT 3
51332: PUSH
51333: LD_INT 3
51335: PUSH
51336: EMPTY
51337: LIST
51338: LIST
51339: PUSH
51340: LD_INT 2
51342: PUSH
51343: LD_INT 3
51345: PUSH
51346: EMPTY
51347: LIST
51348: LIST
51349: PUSH
51350: EMPTY
51351: LIST
51352: LIST
51353: LIST
51354: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
51355: LD_ADDR_VAR 0 20
51359: PUSH
51360: LD_INT 1
51362: PUSH
51363: LD_INT 3
51365: PUSH
51366: EMPTY
51367: LIST
51368: LIST
51369: PUSH
51370: LD_INT 0
51372: PUSH
51373: LD_INT 3
51375: PUSH
51376: EMPTY
51377: LIST
51378: LIST
51379: PUSH
51380: LD_INT 1
51382: NEG
51383: PUSH
51384: LD_INT 2
51386: PUSH
51387: EMPTY
51388: LIST
51389: LIST
51390: PUSH
51391: EMPTY
51392: LIST
51393: LIST
51394: LIST
51395: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51396: LD_ADDR_VAR 0 21
51400: PUSH
51401: LD_INT 2
51403: NEG
51404: PUSH
51405: LD_INT 1
51407: PUSH
51408: EMPTY
51409: LIST
51410: LIST
51411: PUSH
51412: LD_INT 3
51414: NEG
51415: PUSH
51416: LD_INT 0
51418: PUSH
51419: EMPTY
51420: LIST
51421: LIST
51422: PUSH
51423: LD_INT 3
51425: NEG
51426: PUSH
51427: LD_INT 1
51429: NEG
51430: PUSH
51431: EMPTY
51432: LIST
51433: LIST
51434: PUSH
51435: EMPTY
51436: LIST
51437: LIST
51438: LIST
51439: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51440: LD_ADDR_VAR 0 22
51444: PUSH
51445: LD_INT 2
51447: NEG
51448: PUSH
51449: LD_INT 3
51451: NEG
51452: PUSH
51453: EMPTY
51454: LIST
51455: LIST
51456: PUSH
51457: LD_INT 3
51459: NEG
51460: PUSH
51461: LD_INT 2
51463: NEG
51464: PUSH
51465: EMPTY
51466: LIST
51467: LIST
51468: PUSH
51469: LD_INT 3
51471: NEG
51472: PUSH
51473: LD_INT 3
51475: NEG
51476: PUSH
51477: EMPTY
51478: LIST
51479: LIST
51480: PUSH
51481: EMPTY
51482: LIST
51483: LIST
51484: LIST
51485: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
51486: LD_ADDR_VAR 0 23
51490: PUSH
51491: LD_INT 0
51493: PUSH
51494: LD_INT 3
51496: NEG
51497: PUSH
51498: EMPTY
51499: LIST
51500: LIST
51501: PUSH
51502: LD_INT 1
51504: NEG
51505: PUSH
51506: LD_INT 4
51508: NEG
51509: PUSH
51510: EMPTY
51511: LIST
51512: LIST
51513: PUSH
51514: LD_INT 1
51516: PUSH
51517: LD_INT 3
51519: NEG
51520: PUSH
51521: EMPTY
51522: LIST
51523: LIST
51524: PUSH
51525: EMPTY
51526: LIST
51527: LIST
51528: LIST
51529: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
51530: LD_ADDR_VAR 0 24
51534: PUSH
51535: LD_INT 3
51537: PUSH
51538: LD_INT 0
51540: PUSH
51541: EMPTY
51542: LIST
51543: LIST
51544: PUSH
51545: LD_INT 3
51547: PUSH
51548: LD_INT 1
51550: NEG
51551: PUSH
51552: EMPTY
51553: LIST
51554: LIST
51555: PUSH
51556: LD_INT 4
51558: PUSH
51559: LD_INT 1
51561: PUSH
51562: EMPTY
51563: LIST
51564: LIST
51565: PUSH
51566: EMPTY
51567: LIST
51568: LIST
51569: LIST
51570: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
51571: LD_ADDR_VAR 0 25
51575: PUSH
51576: LD_INT 3
51578: PUSH
51579: LD_INT 3
51581: PUSH
51582: EMPTY
51583: LIST
51584: LIST
51585: PUSH
51586: LD_INT 4
51588: PUSH
51589: LD_INT 3
51591: PUSH
51592: EMPTY
51593: LIST
51594: LIST
51595: PUSH
51596: LD_INT 3
51598: PUSH
51599: LD_INT 4
51601: PUSH
51602: EMPTY
51603: LIST
51604: LIST
51605: PUSH
51606: EMPTY
51607: LIST
51608: LIST
51609: LIST
51610: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
51611: LD_ADDR_VAR 0 26
51615: PUSH
51616: LD_INT 0
51618: PUSH
51619: LD_INT 3
51621: PUSH
51622: EMPTY
51623: LIST
51624: LIST
51625: PUSH
51626: LD_INT 1
51628: PUSH
51629: LD_INT 4
51631: PUSH
51632: EMPTY
51633: LIST
51634: LIST
51635: PUSH
51636: LD_INT 1
51638: NEG
51639: PUSH
51640: LD_INT 3
51642: PUSH
51643: EMPTY
51644: LIST
51645: LIST
51646: PUSH
51647: EMPTY
51648: LIST
51649: LIST
51650: LIST
51651: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
51652: LD_ADDR_VAR 0 27
51656: PUSH
51657: LD_INT 3
51659: NEG
51660: PUSH
51661: LD_INT 0
51663: PUSH
51664: EMPTY
51665: LIST
51666: LIST
51667: PUSH
51668: LD_INT 3
51670: NEG
51671: PUSH
51672: LD_INT 1
51674: PUSH
51675: EMPTY
51676: LIST
51677: LIST
51678: PUSH
51679: LD_INT 4
51681: NEG
51682: PUSH
51683: LD_INT 1
51685: NEG
51686: PUSH
51687: EMPTY
51688: LIST
51689: LIST
51690: PUSH
51691: EMPTY
51692: LIST
51693: LIST
51694: LIST
51695: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
51696: LD_ADDR_VAR 0 28
51700: PUSH
51701: LD_INT 3
51703: NEG
51704: PUSH
51705: LD_INT 3
51707: NEG
51708: PUSH
51709: EMPTY
51710: LIST
51711: LIST
51712: PUSH
51713: LD_INT 3
51715: NEG
51716: PUSH
51717: LD_INT 4
51719: NEG
51720: PUSH
51721: EMPTY
51722: LIST
51723: LIST
51724: PUSH
51725: LD_INT 4
51727: NEG
51728: PUSH
51729: LD_INT 3
51731: NEG
51732: PUSH
51733: EMPTY
51734: LIST
51735: LIST
51736: PUSH
51737: EMPTY
51738: LIST
51739: LIST
51740: LIST
51741: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
51742: LD_ADDR_VAR 0 29
51746: PUSH
51747: LD_INT 1
51749: NEG
51750: PUSH
51751: LD_INT 3
51753: NEG
51754: PUSH
51755: EMPTY
51756: LIST
51757: LIST
51758: PUSH
51759: LD_INT 0
51761: PUSH
51762: LD_INT 3
51764: NEG
51765: PUSH
51766: EMPTY
51767: LIST
51768: LIST
51769: PUSH
51770: LD_INT 1
51772: PUSH
51773: LD_INT 2
51775: NEG
51776: PUSH
51777: EMPTY
51778: LIST
51779: LIST
51780: PUSH
51781: LD_INT 1
51783: NEG
51784: PUSH
51785: LD_INT 4
51787: NEG
51788: PUSH
51789: EMPTY
51790: LIST
51791: LIST
51792: PUSH
51793: LD_INT 0
51795: PUSH
51796: LD_INT 4
51798: NEG
51799: PUSH
51800: EMPTY
51801: LIST
51802: LIST
51803: PUSH
51804: LD_INT 1
51806: PUSH
51807: LD_INT 3
51809: NEG
51810: PUSH
51811: EMPTY
51812: LIST
51813: LIST
51814: PUSH
51815: LD_INT 1
51817: NEG
51818: PUSH
51819: LD_INT 5
51821: NEG
51822: PUSH
51823: EMPTY
51824: LIST
51825: LIST
51826: PUSH
51827: LD_INT 0
51829: PUSH
51830: LD_INT 5
51832: NEG
51833: PUSH
51834: EMPTY
51835: LIST
51836: LIST
51837: PUSH
51838: LD_INT 1
51840: PUSH
51841: LD_INT 4
51843: NEG
51844: PUSH
51845: EMPTY
51846: LIST
51847: LIST
51848: PUSH
51849: LD_INT 1
51851: NEG
51852: PUSH
51853: LD_INT 6
51855: NEG
51856: PUSH
51857: EMPTY
51858: LIST
51859: LIST
51860: PUSH
51861: LD_INT 0
51863: PUSH
51864: LD_INT 6
51866: NEG
51867: PUSH
51868: EMPTY
51869: LIST
51870: LIST
51871: PUSH
51872: LD_INT 1
51874: PUSH
51875: LD_INT 5
51877: NEG
51878: PUSH
51879: EMPTY
51880: LIST
51881: LIST
51882: PUSH
51883: EMPTY
51884: LIST
51885: LIST
51886: LIST
51887: LIST
51888: LIST
51889: LIST
51890: LIST
51891: LIST
51892: LIST
51893: LIST
51894: LIST
51895: LIST
51896: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
51897: LD_ADDR_VAR 0 30
51901: PUSH
51902: LD_INT 2
51904: PUSH
51905: LD_INT 1
51907: NEG
51908: PUSH
51909: EMPTY
51910: LIST
51911: LIST
51912: PUSH
51913: LD_INT 3
51915: PUSH
51916: LD_INT 0
51918: PUSH
51919: EMPTY
51920: LIST
51921: LIST
51922: PUSH
51923: LD_INT 3
51925: PUSH
51926: LD_INT 1
51928: PUSH
51929: EMPTY
51930: LIST
51931: LIST
51932: PUSH
51933: LD_INT 3
51935: PUSH
51936: LD_INT 1
51938: NEG
51939: PUSH
51940: EMPTY
51941: LIST
51942: LIST
51943: PUSH
51944: LD_INT 4
51946: PUSH
51947: LD_INT 0
51949: PUSH
51950: EMPTY
51951: LIST
51952: LIST
51953: PUSH
51954: LD_INT 4
51956: PUSH
51957: LD_INT 1
51959: PUSH
51960: EMPTY
51961: LIST
51962: LIST
51963: PUSH
51964: LD_INT 4
51966: PUSH
51967: LD_INT 1
51969: NEG
51970: PUSH
51971: EMPTY
51972: LIST
51973: LIST
51974: PUSH
51975: LD_INT 5
51977: PUSH
51978: LD_INT 0
51980: PUSH
51981: EMPTY
51982: LIST
51983: LIST
51984: PUSH
51985: LD_INT 5
51987: PUSH
51988: LD_INT 1
51990: PUSH
51991: EMPTY
51992: LIST
51993: LIST
51994: PUSH
51995: LD_INT 5
51997: PUSH
51998: LD_INT 1
52000: NEG
52001: PUSH
52002: EMPTY
52003: LIST
52004: LIST
52005: PUSH
52006: LD_INT 6
52008: PUSH
52009: LD_INT 0
52011: PUSH
52012: EMPTY
52013: LIST
52014: LIST
52015: PUSH
52016: LD_INT 6
52018: PUSH
52019: LD_INT 1
52021: PUSH
52022: EMPTY
52023: LIST
52024: LIST
52025: PUSH
52026: EMPTY
52027: LIST
52028: LIST
52029: LIST
52030: LIST
52031: LIST
52032: LIST
52033: LIST
52034: LIST
52035: LIST
52036: LIST
52037: LIST
52038: LIST
52039: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
52040: LD_ADDR_VAR 0 31
52044: PUSH
52045: LD_INT 3
52047: PUSH
52048: LD_INT 2
52050: PUSH
52051: EMPTY
52052: LIST
52053: LIST
52054: PUSH
52055: LD_INT 3
52057: PUSH
52058: LD_INT 3
52060: PUSH
52061: EMPTY
52062: LIST
52063: LIST
52064: PUSH
52065: LD_INT 2
52067: PUSH
52068: LD_INT 3
52070: PUSH
52071: EMPTY
52072: LIST
52073: LIST
52074: PUSH
52075: LD_INT 4
52077: PUSH
52078: LD_INT 3
52080: PUSH
52081: EMPTY
52082: LIST
52083: LIST
52084: PUSH
52085: LD_INT 4
52087: PUSH
52088: LD_INT 4
52090: PUSH
52091: EMPTY
52092: LIST
52093: LIST
52094: PUSH
52095: LD_INT 3
52097: PUSH
52098: LD_INT 4
52100: PUSH
52101: EMPTY
52102: LIST
52103: LIST
52104: PUSH
52105: LD_INT 5
52107: PUSH
52108: LD_INT 4
52110: PUSH
52111: EMPTY
52112: LIST
52113: LIST
52114: PUSH
52115: LD_INT 5
52117: PUSH
52118: LD_INT 5
52120: PUSH
52121: EMPTY
52122: LIST
52123: LIST
52124: PUSH
52125: LD_INT 4
52127: PUSH
52128: LD_INT 5
52130: PUSH
52131: EMPTY
52132: LIST
52133: LIST
52134: PUSH
52135: LD_INT 6
52137: PUSH
52138: LD_INT 5
52140: PUSH
52141: EMPTY
52142: LIST
52143: LIST
52144: PUSH
52145: LD_INT 6
52147: PUSH
52148: LD_INT 6
52150: PUSH
52151: EMPTY
52152: LIST
52153: LIST
52154: PUSH
52155: LD_INT 5
52157: PUSH
52158: LD_INT 6
52160: PUSH
52161: EMPTY
52162: LIST
52163: LIST
52164: PUSH
52165: EMPTY
52166: LIST
52167: LIST
52168: LIST
52169: LIST
52170: LIST
52171: LIST
52172: LIST
52173: LIST
52174: LIST
52175: LIST
52176: LIST
52177: LIST
52178: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
52179: LD_ADDR_VAR 0 32
52183: PUSH
52184: LD_INT 1
52186: PUSH
52187: LD_INT 3
52189: PUSH
52190: EMPTY
52191: LIST
52192: LIST
52193: PUSH
52194: LD_INT 0
52196: PUSH
52197: LD_INT 3
52199: PUSH
52200: EMPTY
52201: LIST
52202: LIST
52203: PUSH
52204: LD_INT 1
52206: NEG
52207: PUSH
52208: LD_INT 2
52210: PUSH
52211: EMPTY
52212: LIST
52213: LIST
52214: PUSH
52215: LD_INT 1
52217: PUSH
52218: LD_INT 4
52220: PUSH
52221: EMPTY
52222: LIST
52223: LIST
52224: PUSH
52225: LD_INT 0
52227: PUSH
52228: LD_INT 4
52230: PUSH
52231: EMPTY
52232: LIST
52233: LIST
52234: PUSH
52235: LD_INT 1
52237: NEG
52238: PUSH
52239: LD_INT 3
52241: PUSH
52242: EMPTY
52243: LIST
52244: LIST
52245: PUSH
52246: LD_INT 1
52248: PUSH
52249: LD_INT 5
52251: PUSH
52252: EMPTY
52253: LIST
52254: LIST
52255: PUSH
52256: LD_INT 0
52258: PUSH
52259: LD_INT 5
52261: PUSH
52262: EMPTY
52263: LIST
52264: LIST
52265: PUSH
52266: LD_INT 1
52268: NEG
52269: PUSH
52270: LD_INT 4
52272: PUSH
52273: EMPTY
52274: LIST
52275: LIST
52276: PUSH
52277: LD_INT 1
52279: PUSH
52280: LD_INT 6
52282: PUSH
52283: EMPTY
52284: LIST
52285: LIST
52286: PUSH
52287: LD_INT 0
52289: PUSH
52290: LD_INT 6
52292: PUSH
52293: EMPTY
52294: LIST
52295: LIST
52296: PUSH
52297: LD_INT 1
52299: NEG
52300: PUSH
52301: LD_INT 5
52303: PUSH
52304: EMPTY
52305: LIST
52306: LIST
52307: PUSH
52308: EMPTY
52309: LIST
52310: LIST
52311: LIST
52312: LIST
52313: LIST
52314: LIST
52315: LIST
52316: LIST
52317: LIST
52318: LIST
52319: LIST
52320: LIST
52321: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
52322: LD_ADDR_VAR 0 33
52326: PUSH
52327: LD_INT 2
52329: NEG
52330: PUSH
52331: LD_INT 1
52333: PUSH
52334: EMPTY
52335: LIST
52336: LIST
52337: PUSH
52338: LD_INT 3
52340: NEG
52341: PUSH
52342: LD_INT 0
52344: PUSH
52345: EMPTY
52346: LIST
52347: LIST
52348: PUSH
52349: LD_INT 3
52351: NEG
52352: PUSH
52353: LD_INT 1
52355: NEG
52356: PUSH
52357: EMPTY
52358: LIST
52359: LIST
52360: PUSH
52361: LD_INT 3
52363: NEG
52364: PUSH
52365: LD_INT 1
52367: PUSH
52368: EMPTY
52369: LIST
52370: LIST
52371: PUSH
52372: LD_INT 4
52374: NEG
52375: PUSH
52376: LD_INT 0
52378: PUSH
52379: EMPTY
52380: LIST
52381: LIST
52382: PUSH
52383: LD_INT 4
52385: NEG
52386: PUSH
52387: LD_INT 1
52389: NEG
52390: PUSH
52391: EMPTY
52392: LIST
52393: LIST
52394: PUSH
52395: LD_INT 4
52397: NEG
52398: PUSH
52399: LD_INT 1
52401: PUSH
52402: EMPTY
52403: LIST
52404: LIST
52405: PUSH
52406: LD_INT 5
52408: NEG
52409: PUSH
52410: LD_INT 0
52412: PUSH
52413: EMPTY
52414: LIST
52415: LIST
52416: PUSH
52417: LD_INT 5
52419: NEG
52420: PUSH
52421: LD_INT 1
52423: NEG
52424: PUSH
52425: EMPTY
52426: LIST
52427: LIST
52428: PUSH
52429: LD_INT 5
52431: NEG
52432: PUSH
52433: LD_INT 1
52435: PUSH
52436: EMPTY
52437: LIST
52438: LIST
52439: PUSH
52440: LD_INT 6
52442: NEG
52443: PUSH
52444: LD_INT 0
52446: PUSH
52447: EMPTY
52448: LIST
52449: LIST
52450: PUSH
52451: LD_INT 6
52453: NEG
52454: PUSH
52455: LD_INT 1
52457: NEG
52458: PUSH
52459: EMPTY
52460: LIST
52461: LIST
52462: PUSH
52463: EMPTY
52464: LIST
52465: LIST
52466: LIST
52467: LIST
52468: LIST
52469: LIST
52470: LIST
52471: LIST
52472: LIST
52473: LIST
52474: LIST
52475: LIST
52476: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
52477: LD_ADDR_VAR 0 34
52481: PUSH
52482: LD_INT 2
52484: NEG
52485: PUSH
52486: LD_INT 3
52488: NEG
52489: PUSH
52490: EMPTY
52491: LIST
52492: LIST
52493: PUSH
52494: LD_INT 3
52496: NEG
52497: PUSH
52498: LD_INT 2
52500: NEG
52501: PUSH
52502: EMPTY
52503: LIST
52504: LIST
52505: PUSH
52506: LD_INT 3
52508: NEG
52509: PUSH
52510: LD_INT 3
52512: NEG
52513: PUSH
52514: EMPTY
52515: LIST
52516: LIST
52517: PUSH
52518: LD_INT 3
52520: NEG
52521: PUSH
52522: LD_INT 4
52524: NEG
52525: PUSH
52526: EMPTY
52527: LIST
52528: LIST
52529: PUSH
52530: LD_INT 4
52532: NEG
52533: PUSH
52534: LD_INT 3
52536: NEG
52537: PUSH
52538: EMPTY
52539: LIST
52540: LIST
52541: PUSH
52542: LD_INT 4
52544: NEG
52545: PUSH
52546: LD_INT 4
52548: NEG
52549: PUSH
52550: EMPTY
52551: LIST
52552: LIST
52553: PUSH
52554: LD_INT 4
52556: NEG
52557: PUSH
52558: LD_INT 5
52560: NEG
52561: PUSH
52562: EMPTY
52563: LIST
52564: LIST
52565: PUSH
52566: LD_INT 5
52568: NEG
52569: PUSH
52570: LD_INT 4
52572: NEG
52573: PUSH
52574: EMPTY
52575: LIST
52576: LIST
52577: PUSH
52578: LD_INT 5
52580: NEG
52581: PUSH
52582: LD_INT 5
52584: NEG
52585: PUSH
52586: EMPTY
52587: LIST
52588: LIST
52589: PUSH
52590: LD_INT 5
52592: NEG
52593: PUSH
52594: LD_INT 6
52596: NEG
52597: PUSH
52598: EMPTY
52599: LIST
52600: LIST
52601: PUSH
52602: LD_INT 6
52604: NEG
52605: PUSH
52606: LD_INT 5
52608: NEG
52609: PUSH
52610: EMPTY
52611: LIST
52612: LIST
52613: PUSH
52614: LD_INT 6
52616: NEG
52617: PUSH
52618: LD_INT 6
52620: NEG
52621: PUSH
52622: EMPTY
52623: LIST
52624: LIST
52625: PUSH
52626: EMPTY
52627: LIST
52628: LIST
52629: LIST
52630: LIST
52631: LIST
52632: LIST
52633: LIST
52634: LIST
52635: LIST
52636: LIST
52637: LIST
52638: LIST
52639: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
52640: LD_ADDR_VAR 0 41
52644: PUSH
52645: LD_INT 0
52647: PUSH
52648: LD_INT 2
52650: NEG
52651: PUSH
52652: EMPTY
52653: LIST
52654: LIST
52655: PUSH
52656: LD_INT 1
52658: NEG
52659: PUSH
52660: LD_INT 3
52662: NEG
52663: PUSH
52664: EMPTY
52665: LIST
52666: LIST
52667: PUSH
52668: LD_INT 1
52670: PUSH
52671: LD_INT 2
52673: NEG
52674: PUSH
52675: EMPTY
52676: LIST
52677: LIST
52678: PUSH
52679: EMPTY
52680: LIST
52681: LIST
52682: LIST
52683: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
52684: LD_ADDR_VAR 0 42
52688: PUSH
52689: LD_INT 2
52691: PUSH
52692: LD_INT 0
52694: PUSH
52695: EMPTY
52696: LIST
52697: LIST
52698: PUSH
52699: LD_INT 2
52701: PUSH
52702: LD_INT 1
52704: NEG
52705: PUSH
52706: EMPTY
52707: LIST
52708: LIST
52709: PUSH
52710: LD_INT 3
52712: PUSH
52713: LD_INT 1
52715: PUSH
52716: EMPTY
52717: LIST
52718: LIST
52719: PUSH
52720: EMPTY
52721: LIST
52722: LIST
52723: LIST
52724: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
52725: LD_ADDR_VAR 0 43
52729: PUSH
52730: LD_INT 2
52732: PUSH
52733: LD_INT 2
52735: PUSH
52736: EMPTY
52737: LIST
52738: LIST
52739: PUSH
52740: LD_INT 3
52742: PUSH
52743: LD_INT 2
52745: PUSH
52746: EMPTY
52747: LIST
52748: LIST
52749: PUSH
52750: LD_INT 2
52752: PUSH
52753: LD_INT 3
52755: PUSH
52756: EMPTY
52757: LIST
52758: LIST
52759: PUSH
52760: EMPTY
52761: LIST
52762: LIST
52763: LIST
52764: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
52765: LD_ADDR_VAR 0 44
52769: PUSH
52770: LD_INT 0
52772: PUSH
52773: LD_INT 2
52775: PUSH
52776: EMPTY
52777: LIST
52778: LIST
52779: PUSH
52780: LD_INT 1
52782: PUSH
52783: LD_INT 3
52785: PUSH
52786: EMPTY
52787: LIST
52788: LIST
52789: PUSH
52790: LD_INT 1
52792: NEG
52793: PUSH
52794: LD_INT 2
52796: PUSH
52797: EMPTY
52798: LIST
52799: LIST
52800: PUSH
52801: EMPTY
52802: LIST
52803: LIST
52804: LIST
52805: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
52806: LD_ADDR_VAR 0 45
52810: PUSH
52811: LD_INT 2
52813: NEG
52814: PUSH
52815: LD_INT 0
52817: PUSH
52818: EMPTY
52819: LIST
52820: LIST
52821: PUSH
52822: LD_INT 2
52824: NEG
52825: PUSH
52826: LD_INT 1
52828: PUSH
52829: EMPTY
52830: LIST
52831: LIST
52832: PUSH
52833: LD_INT 3
52835: NEG
52836: PUSH
52837: LD_INT 1
52839: NEG
52840: PUSH
52841: EMPTY
52842: LIST
52843: LIST
52844: PUSH
52845: EMPTY
52846: LIST
52847: LIST
52848: LIST
52849: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
52850: LD_ADDR_VAR 0 46
52854: PUSH
52855: LD_INT 2
52857: NEG
52858: PUSH
52859: LD_INT 2
52861: NEG
52862: PUSH
52863: EMPTY
52864: LIST
52865: LIST
52866: PUSH
52867: LD_INT 2
52869: NEG
52870: PUSH
52871: LD_INT 3
52873: NEG
52874: PUSH
52875: EMPTY
52876: LIST
52877: LIST
52878: PUSH
52879: LD_INT 3
52881: NEG
52882: PUSH
52883: LD_INT 2
52885: NEG
52886: PUSH
52887: EMPTY
52888: LIST
52889: LIST
52890: PUSH
52891: EMPTY
52892: LIST
52893: LIST
52894: LIST
52895: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
52896: LD_ADDR_VAR 0 47
52900: PUSH
52901: LD_INT 2
52903: NEG
52904: PUSH
52905: LD_INT 3
52907: NEG
52908: PUSH
52909: EMPTY
52910: LIST
52911: LIST
52912: PUSH
52913: LD_INT 1
52915: NEG
52916: PUSH
52917: LD_INT 3
52919: NEG
52920: PUSH
52921: EMPTY
52922: LIST
52923: LIST
52924: PUSH
52925: EMPTY
52926: LIST
52927: LIST
52928: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
52929: LD_ADDR_VAR 0 48
52933: PUSH
52934: LD_INT 1
52936: PUSH
52937: LD_INT 2
52939: NEG
52940: PUSH
52941: EMPTY
52942: LIST
52943: LIST
52944: PUSH
52945: LD_INT 2
52947: PUSH
52948: LD_INT 1
52950: NEG
52951: PUSH
52952: EMPTY
52953: LIST
52954: LIST
52955: PUSH
52956: EMPTY
52957: LIST
52958: LIST
52959: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
52960: LD_ADDR_VAR 0 49
52964: PUSH
52965: LD_INT 3
52967: PUSH
52968: LD_INT 1
52970: PUSH
52971: EMPTY
52972: LIST
52973: LIST
52974: PUSH
52975: LD_INT 3
52977: PUSH
52978: LD_INT 2
52980: PUSH
52981: EMPTY
52982: LIST
52983: LIST
52984: PUSH
52985: EMPTY
52986: LIST
52987: LIST
52988: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
52989: LD_ADDR_VAR 0 50
52993: PUSH
52994: LD_INT 2
52996: PUSH
52997: LD_INT 3
52999: PUSH
53000: EMPTY
53001: LIST
53002: LIST
53003: PUSH
53004: LD_INT 1
53006: PUSH
53007: LD_INT 3
53009: PUSH
53010: EMPTY
53011: LIST
53012: LIST
53013: PUSH
53014: EMPTY
53015: LIST
53016: LIST
53017: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
53018: LD_ADDR_VAR 0 51
53022: PUSH
53023: LD_INT 1
53025: NEG
53026: PUSH
53027: LD_INT 2
53029: PUSH
53030: EMPTY
53031: LIST
53032: LIST
53033: PUSH
53034: LD_INT 2
53036: NEG
53037: PUSH
53038: LD_INT 1
53040: PUSH
53041: EMPTY
53042: LIST
53043: LIST
53044: PUSH
53045: EMPTY
53046: LIST
53047: LIST
53048: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
53049: LD_ADDR_VAR 0 52
53053: PUSH
53054: LD_INT 3
53056: NEG
53057: PUSH
53058: LD_INT 1
53060: NEG
53061: PUSH
53062: EMPTY
53063: LIST
53064: LIST
53065: PUSH
53066: LD_INT 3
53068: NEG
53069: PUSH
53070: LD_INT 2
53072: NEG
53073: PUSH
53074: EMPTY
53075: LIST
53076: LIST
53077: PUSH
53078: EMPTY
53079: LIST
53080: LIST
53081: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53082: LD_ADDR_VAR 0 53
53086: PUSH
53087: LD_INT 1
53089: NEG
53090: PUSH
53091: LD_INT 3
53093: NEG
53094: PUSH
53095: EMPTY
53096: LIST
53097: LIST
53098: PUSH
53099: LD_INT 0
53101: PUSH
53102: LD_INT 3
53104: NEG
53105: PUSH
53106: EMPTY
53107: LIST
53108: LIST
53109: PUSH
53110: LD_INT 1
53112: PUSH
53113: LD_INT 2
53115: NEG
53116: PUSH
53117: EMPTY
53118: LIST
53119: LIST
53120: PUSH
53121: EMPTY
53122: LIST
53123: LIST
53124: LIST
53125: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53126: LD_ADDR_VAR 0 54
53130: PUSH
53131: LD_INT 2
53133: PUSH
53134: LD_INT 1
53136: NEG
53137: PUSH
53138: EMPTY
53139: LIST
53140: LIST
53141: PUSH
53142: LD_INT 3
53144: PUSH
53145: LD_INT 0
53147: PUSH
53148: EMPTY
53149: LIST
53150: LIST
53151: PUSH
53152: LD_INT 3
53154: PUSH
53155: LD_INT 1
53157: PUSH
53158: EMPTY
53159: LIST
53160: LIST
53161: PUSH
53162: EMPTY
53163: LIST
53164: LIST
53165: LIST
53166: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53167: LD_ADDR_VAR 0 55
53171: PUSH
53172: LD_INT 3
53174: PUSH
53175: LD_INT 2
53177: PUSH
53178: EMPTY
53179: LIST
53180: LIST
53181: PUSH
53182: LD_INT 3
53184: PUSH
53185: LD_INT 3
53187: PUSH
53188: EMPTY
53189: LIST
53190: LIST
53191: PUSH
53192: LD_INT 2
53194: PUSH
53195: LD_INT 3
53197: PUSH
53198: EMPTY
53199: LIST
53200: LIST
53201: PUSH
53202: EMPTY
53203: LIST
53204: LIST
53205: LIST
53206: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53207: LD_ADDR_VAR 0 56
53211: PUSH
53212: LD_INT 1
53214: PUSH
53215: LD_INT 3
53217: PUSH
53218: EMPTY
53219: LIST
53220: LIST
53221: PUSH
53222: LD_INT 0
53224: PUSH
53225: LD_INT 3
53227: PUSH
53228: EMPTY
53229: LIST
53230: LIST
53231: PUSH
53232: LD_INT 1
53234: NEG
53235: PUSH
53236: LD_INT 2
53238: PUSH
53239: EMPTY
53240: LIST
53241: LIST
53242: PUSH
53243: EMPTY
53244: LIST
53245: LIST
53246: LIST
53247: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53248: LD_ADDR_VAR 0 57
53252: PUSH
53253: LD_INT 2
53255: NEG
53256: PUSH
53257: LD_INT 1
53259: PUSH
53260: EMPTY
53261: LIST
53262: LIST
53263: PUSH
53264: LD_INT 3
53266: NEG
53267: PUSH
53268: LD_INT 0
53270: PUSH
53271: EMPTY
53272: LIST
53273: LIST
53274: PUSH
53275: LD_INT 3
53277: NEG
53278: PUSH
53279: LD_INT 1
53281: NEG
53282: PUSH
53283: EMPTY
53284: LIST
53285: LIST
53286: PUSH
53287: EMPTY
53288: LIST
53289: LIST
53290: LIST
53291: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53292: LD_ADDR_VAR 0 58
53296: PUSH
53297: LD_INT 2
53299: NEG
53300: PUSH
53301: LD_INT 3
53303: NEG
53304: PUSH
53305: EMPTY
53306: LIST
53307: LIST
53308: PUSH
53309: LD_INT 3
53311: NEG
53312: PUSH
53313: LD_INT 2
53315: NEG
53316: PUSH
53317: EMPTY
53318: LIST
53319: LIST
53320: PUSH
53321: LD_INT 3
53323: NEG
53324: PUSH
53325: LD_INT 3
53327: NEG
53328: PUSH
53329: EMPTY
53330: LIST
53331: LIST
53332: PUSH
53333: EMPTY
53334: LIST
53335: LIST
53336: LIST
53337: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
53338: LD_ADDR_VAR 0 59
53342: PUSH
53343: LD_INT 1
53345: NEG
53346: PUSH
53347: LD_INT 2
53349: NEG
53350: PUSH
53351: EMPTY
53352: LIST
53353: LIST
53354: PUSH
53355: LD_INT 0
53357: PUSH
53358: LD_INT 2
53360: NEG
53361: PUSH
53362: EMPTY
53363: LIST
53364: LIST
53365: PUSH
53366: LD_INT 1
53368: PUSH
53369: LD_INT 1
53371: NEG
53372: PUSH
53373: EMPTY
53374: LIST
53375: LIST
53376: PUSH
53377: EMPTY
53378: LIST
53379: LIST
53380: LIST
53381: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
53382: LD_ADDR_VAR 0 60
53386: PUSH
53387: LD_INT 1
53389: PUSH
53390: LD_INT 1
53392: NEG
53393: PUSH
53394: EMPTY
53395: LIST
53396: LIST
53397: PUSH
53398: LD_INT 2
53400: PUSH
53401: LD_INT 0
53403: PUSH
53404: EMPTY
53405: LIST
53406: LIST
53407: PUSH
53408: LD_INT 2
53410: PUSH
53411: LD_INT 1
53413: PUSH
53414: EMPTY
53415: LIST
53416: LIST
53417: PUSH
53418: EMPTY
53419: LIST
53420: LIST
53421: LIST
53422: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
53423: LD_ADDR_VAR 0 61
53427: PUSH
53428: LD_INT 2
53430: PUSH
53431: LD_INT 1
53433: PUSH
53434: EMPTY
53435: LIST
53436: LIST
53437: PUSH
53438: LD_INT 2
53440: PUSH
53441: LD_INT 2
53443: PUSH
53444: EMPTY
53445: LIST
53446: LIST
53447: PUSH
53448: LD_INT 1
53450: PUSH
53451: LD_INT 2
53453: PUSH
53454: EMPTY
53455: LIST
53456: LIST
53457: PUSH
53458: EMPTY
53459: LIST
53460: LIST
53461: LIST
53462: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
53463: LD_ADDR_VAR 0 62
53467: PUSH
53468: LD_INT 1
53470: PUSH
53471: LD_INT 2
53473: PUSH
53474: EMPTY
53475: LIST
53476: LIST
53477: PUSH
53478: LD_INT 0
53480: PUSH
53481: LD_INT 2
53483: PUSH
53484: EMPTY
53485: LIST
53486: LIST
53487: PUSH
53488: LD_INT 1
53490: NEG
53491: PUSH
53492: LD_INT 1
53494: PUSH
53495: EMPTY
53496: LIST
53497: LIST
53498: PUSH
53499: EMPTY
53500: LIST
53501: LIST
53502: LIST
53503: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
53504: LD_ADDR_VAR 0 63
53508: PUSH
53509: LD_INT 1
53511: NEG
53512: PUSH
53513: LD_INT 1
53515: PUSH
53516: EMPTY
53517: LIST
53518: LIST
53519: PUSH
53520: LD_INT 2
53522: NEG
53523: PUSH
53524: LD_INT 0
53526: PUSH
53527: EMPTY
53528: LIST
53529: LIST
53530: PUSH
53531: LD_INT 2
53533: NEG
53534: PUSH
53535: LD_INT 1
53537: NEG
53538: PUSH
53539: EMPTY
53540: LIST
53541: LIST
53542: PUSH
53543: EMPTY
53544: LIST
53545: LIST
53546: LIST
53547: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53548: LD_ADDR_VAR 0 64
53552: PUSH
53553: LD_INT 1
53555: NEG
53556: PUSH
53557: LD_INT 2
53559: NEG
53560: PUSH
53561: EMPTY
53562: LIST
53563: LIST
53564: PUSH
53565: LD_INT 2
53567: NEG
53568: PUSH
53569: LD_INT 1
53571: NEG
53572: PUSH
53573: EMPTY
53574: LIST
53575: LIST
53576: PUSH
53577: LD_INT 2
53579: NEG
53580: PUSH
53581: LD_INT 2
53583: NEG
53584: PUSH
53585: EMPTY
53586: LIST
53587: LIST
53588: PUSH
53589: EMPTY
53590: LIST
53591: LIST
53592: LIST
53593: ST_TO_ADDR
// end ; 2 :
53594: GO 56860
53596: LD_INT 2
53598: DOUBLE
53599: EQUAL
53600: IFTRUE 53604
53602: GO 56859
53604: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
53605: LD_ADDR_VAR 0 29
53609: PUSH
53610: LD_INT 4
53612: PUSH
53613: LD_INT 0
53615: PUSH
53616: EMPTY
53617: LIST
53618: LIST
53619: PUSH
53620: LD_INT 4
53622: PUSH
53623: LD_INT 1
53625: NEG
53626: PUSH
53627: EMPTY
53628: LIST
53629: LIST
53630: PUSH
53631: LD_INT 5
53633: PUSH
53634: LD_INT 0
53636: PUSH
53637: EMPTY
53638: LIST
53639: LIST
53640: PUSH
53641: LD_INT 5
53643: PUSH
53644: LD_INT 1
53646: PUSH
53647: EMPTY
53648: LIST
53649: LIST
53650: PUSH
53651: LD_INT 4
53653: PUSH
53654: LD_INT 1
53656: PUSH
53657: EMPTY
53658: LIST
53659: LIST
53660: PUSH
53661: LD_INT 3
53663: PUSH
53664: LD_INT 0
53666: PUSH
53667: EMPTY
53668: LIST
53669: LIST
53670: PUSH
53671: LD_INT 3
53673: PUSH
53674: LD_INT 1
53676: NEG
53677: PUSH
53678: EMPTY
53679: LIST
53680: LIST
53681: PUSH
53682: LD_INT 3
53684: PUSH
53685: LD_INT 2
53687: NEG
53688: PUSH
53689: EMPTY
53690: LIST
53691: LIST
53692: PUSH
53693: LD_INT 5
53695: PUSH
53696: LD_INT 2
53698: PUSH
53699: EMPTY
53700: LIST
53701: LIST
53702: PUSH
53703: LD_INT 3
53705: PUSH
53706: LD_INT 3
53708: PUSH
53709: EMPTY
53710: LIST
53711: LIST
53712: PUSH
53713: LD_INT 3
53715: PUSH
53716: LD_INT 2
53718: PUSH
53719: EMPTY
53720: LIST
53721: LIST
53722: PUSH
53723: LD_INT 4
53725: PUSH
53726: LD_INT 3
53728: PUSH
53729: EMPTY
53730: LIST
53731: LIST
53732: PUSH
53733: LD_INT 4
53735: PUSH
53736: LD_INT 4
53738: PUSH
53739: EMPTY
53740: LIST
53741: LIST
53742: PUSH
53743: LD_INT 3
53745: PUSH
53746: LD_INT 4
53748: PUSH
53749: EMPTY
53750: LIST
53751: LIST
53752: PUSH
53753: LD_INT 2
53755: PUSH
53756: LD_INT 3
53758: PUSH
53759: EMPTY
53760: LIST
53761: LIST
53762: PUSH
53763: LD_INT 2
53765: PUSH
53766: LD_INT 2
53768: PUSH
53769: EMPTY
53770: LIST
53771: LIST
53772: PUSH
53773: LD_INT 4
53775: PUSH
53776: LD_INT 2
53778: PUSH
53779: EMPTY
53780: LIST
53781: LIST
53782: PUSH
53783: LD_INT 2
53785: PUSH
53786: LD_INT 4
53788: PUSH
53789: EMPTY
53790: LIST
53791: LIST
53792: PUSH
53793: LD_INT 0
53795: PUSH
53796: LD_INT 4
53798: PUSH
53799: EMPTY
53800: LIST
53801: LIST
53802: PUSH
53803: LD_INT 0
53805: PUSH
53806: LD_INT 3
53808: PUSH
53809: EMPTY
53810: LIST
53811: LIST
53812: PUSH
53813: LD_INT 1
53815: PUSH
53816: LD_INT 4
53818: PUSH
53819: EMPTY
53820: LIST
53821: LIST
53822: PUSH
53823: LD_INT 1
53825: PUSH
53826: LD_INT 5
53828: PUSH
53829: EMPTY
53830: LIST
53831: LIST
53832: PUSH
53833: LD_INT 0
53835: PUSH
53836: LD_INT 5
53838: PUSH
53839: EMPTY
53840: LIST
53841: LIST
53842: PUSH
53843: LD_INT 1
53845: NEG
53846: PUSH
53847: LD_INT 4
53849: PUSH
53850: EMPTY
53851: LIST
53852: LIST
53853: PUSH
53854: LD_INT 1
53856: NEG
53857: PUSH
53858: LD_INT 3
53860: PUSH
53861: EMPTY
53862: LIST
53863: LIST
53864: PUSH
53865: LD_INT 2
53867: PUSH
53868: LD_INT 5
53870: PUSH
53871: EMPTY
53872: LIST
53873: LIST
53874: PUSH
53875: LD_INT 2
53877: NEG
53878: PUSH
53879: LD_INT 3
53881: PUSH
53882: EMPTY
53883: LIST
53884: LIST
53885: PUSH
53886: LD_INT 3
53888: NEG
53889: PUSH
53890: LD_INT 0
53892: PUSH
53893: EMPTY
53894: LIST
53895: LIST
53896: PUSH
53897: LD_INT 3
53899: NEG
53900: PUSH
53901: LD_INT 1
53903: NEG
53904: PUSH
53905: EMPTY
53906: LIST
53907: LIST
53908: PUSH
53909: LD_INT 2
53911: NEG
53912: PUSH
53913: LD_INT 0
53915: PUSH
53916: EMPTY
53917: LIST
53918: LIST
53919: PUSH
53920: LD_INT 2
53922: NEG
53923: PUSH
53924: LD_INT 1
53926: PUSH
53927: EMPTY
53928: LIST
53929: LIST
53930: PUSH
53931: LD_INT 3
53933: NEG
53934: PUSH
53935: LD_INT 1
53937: PUSH
53938: EMPTY
53939: LIST
53940: LIST
53941: PUSH
53942: LD_INT 4
53944: NEG
53945: PUSH
53946: LD_INT 0
53948: PUSH
53949: EMPTY
53950: LIST
53951: LIST
53952: PUSH
53953: LD_INT 4
53955: NEG
53956: PUSH
53957: LD_INT 1
53959: NEG
53960: PUSH
53961: EMPTY
53962: LIST
53963: LIST
53964: PUSH
53965: LD_INT 4
53967: NEG
53968: PUSH
53969: LD_INT 2
53971: NEG
53972: PUSH
53973: EMPTY
53974: LIST
53975: LIST
53976: PUSH
53977: LD_INT 2
53979: NEG
53980: PUSH
53981: LD_INT 2
53983: PUSH
53984: EMPTY
53985: LIST
53986: LIST
53987: PUSH
53988: LD_INT 4
53990: NEG
53991: PUSH
53992: LD_INT 4
53994: NEG
53995: PUSH
53996: EMPTY
53997: LIST
53998: LIST
53999: PUSH
54000: LD_INT 4
54002: NEG
54003: PUSH
54004: LD_INT 5
54006: NEG
54007: PUSH
54008: EMPTY
54009: LIST
54010: LIST
54011: PUSH
54012: LD_INT 3
54014: NEG
54015: PUSH
54016: LD_INT 4
54018: NEG
54019: PUSH
54020: EMPTY
54021: LIST
54022: LIST
54023: PUSH
54024: LD_INT 3
54026: NEG
54027: PUSH
54028: LD_INT 3
54030: NEG
54031: PUSH
54032: EMPTY
54033: LIST
54034: LIST
54035: PUSH
54036: LD_INT 4
54038: NEG
54039: PUSH
54040: LD_INT 3
54042: NEG
54043: PUSH
54044: EMPTY
54045: LIST
54046: LIST
54047: PUSH
54048: LD_INT 5
54050: NEG
54051: PUSH
54052: LD_INT 4
54054: NEG
54055: PUSH
54056: EMPTY
54057: LIST
54058: LIST
54059: PUSH
54060: LD_INT 5
54062: NEG
54063: PUSH
54064: LD_INT 5
54066: NEG
54067: PUSH
54068: EMPTY
54069: LIST
54070: LIST
54071: PUSH
54072: LD_INT 3
54074: NEG
54075: PUSH
54076: LD_INT 5
54078: NEG
54079: PUSH
54080: EMPTY
54081: LIST
54082: LIST
54083: PUSH
54084: LD_INT 5
54086: NEG
54087: PUSH
54088: LD_INT 3
54090: NEG
54091: PUSH
54092: EMPTY
54093: LIST
54094: LIST
54095: PUSH
54096: EMPTY
54097: LIST
54098: LIST
54099: LIST
54100: LIST
54101: LIST
54102: LIST
54103: LIST
54104: LIST
54105: LIST
54106: LIST
54107: LIST
54108: LIST
54109: LIST
54110: LIST
54111: LIST
54112: LIST
54113: LIST
54114: LIST
54115: LIST
54116: LIST
54117: LIST
54118: LIST
54119: LIST
54120: LIST
54121: LIST
54122: LIST
54123: LIST
54124: LIST
54125: LIST
54126: LIST
54127: LIST
54128: LIST
54129: LIST
54130: LIST
54131: LIST
54132: LIST
54133: LIST
54134: LIST
54135: LIST
54136: LIST
54137: LIST
54138: LIST
54139: LIST
54140: LIST
54141: LIST
54142: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
54143: LD_ADDR_VAR 0 30
54147: PUSH
54148: LD_INT 4
54150: PUSH
54151: LD_INT 4
54153: PUSH
54154: EMPTY
54155: LIST
54156: LIST
54157: PUSH
54158: LD_INT 4
54160: PUSH
54161: LD_INT 3
54163: PUSH
54164: EMPTY
54165: LIST
54166: LIST
54167: PUSH
54168: LD_INT 5
54170: PUSH
54171: LD_INT 4
54173: PUSH
54174: EMPTY
54175: LIST
54176: LIST
54177: PUSH
54178: LD_INT 5
54180: PUSH
54181: LD_INT 5
54183: PUSH
54184: EMPTY
54185: LIST
54186: LIST
54187: PUSH
54188: LD_INT 4
54190: PUSH
54191: LD_INT 5
54193: PUSH
54194: EMPTY
54195: LIST
54196: LIST
54197: PUSH
54198: LD_INT 3
54200: PUSH
54201: LD_INT 4
54203: PUSH
54204: EMPTY
54205: LIST
54206: LIST
54207: PUSH
54208: LD_INT 3
54210: PUSH
54211: LD_INT 3
54213: PUSH
54214: EMPTY
54215: LIST
54216: LIST
54217: PUSH
54218: LD_INT 5
54220: PUSH
54221: LD_INT 3
54223: PUSH
54224: EMPTY
54225: LIST
54226: LIST
54227: PUSH
54228: LD_INT 3
54230: PUSH
54231: LD_INT 5
54233: PUSH
54234: EMPTY
54235: LIST
54236: LIST
54237: PUSH
54238: LD_INT 0
54240: PUSH
54241: LD_INT 3
54243: PUSH
54244: EMPTY
54245: LIST
54246: LIST
54247: PUSH
54248: LD_INT 0
54250: PUSH
54251: LD_INT 2
54253: PUSH
54254: EMPTY
54255: LIST
54256: LIST
54257: PUSH
54258: LD_INT 1
54260: PUSH
54261: LD_INT 3
54263: PUSH
54264: EMPTY
54265: LIST
54266: LIST
54267: PUSH
54268: LD_INT 1
54270: PUSH
54271: LD_INT 4
54273: PUSH
54274: EMPTY
54275: LIST
54276: LIST
54277: PUSH
54278: LD_INT 0
54280: PUSH
54281: LD_INT 4
54283: PUSH
54284: EMPTY
54285: LIST
54286: LIST
54287: PUSH
54288: LD_INT 1
54290: NEG
54291: PUSH
54292: LD_INT 3
54294: PUSH
54295: EMPTY
54296: LIST
54297: LIST
54298: PUSH
54299: LD_INT 1
54301: NEG
54302: PUSH
54303: LD_INT 2
54305: PUSH
54306: EMPTY
54307: LIST
54308: LIST
54309: PUSH
54310: LD_INT 2
54312: PUSH
54313: LD_INT 4
54315: PUSH
54316: EMPTY
54317: LIST
54318: LIST
54319: PUSH
54320: LD_INT 2
54322: NEG
54323: PUSH
54324: LD_INT 2
54326: PUSH
54327: EMPTY
54328: LIST
54329: LIST
54330: PUSH
54331: LD_INT 4
54333: NEG
54334: PUSH
54335: LD_INT 0
54337: PUSH
54338: EMPTY
54339: LIST
54340: LIST
54341: PUSH
54342: LD_INT 4
54344: NEG
54345: PUSH
54346: LD_INT 1
54348: NEG
54349: PUSH
54350: EMPTY
54351: LIST
54352: LIST
54353: PUSH
54354: LD_INT 3
54356: NEG
54357: PUSH
54358: LD_INT 0
54360: PUSH
54361: EMPTY
54362: LIST
54363: LIST
54364: PUSH
54365: LD_INT 3
54367: NEG
54368: PUSH
54369: LD_INT 1
54371: PUSH
54372: EMPTY
54373: LIST
54374: LIST
54375: PUSH
54376: LD_INT 4
54378: NEG
54379: PUSH
54380: LD_INT 1
54382: PUSH
54383: EMPTY
54384: LIST
54385: LIST
54386: PUSH
54387: LD_INT 5
54389: NEG
54390: PUSH
54391: LD_INT 0
54393: PUSH
54394: EMPTY
54395: LIST
54396: LIST
54397: PUSH
54398: LD_INT 5
54400: NEG
54401: PUSH
54402: LD_INT 1
54404: NEG
54405: PUSH
54406: EMPTY
54407: LIST
54408: LIST
54409: PUSH
54410: LD_INT 5
54412: NEG
54413: PUSH
54414: LD_INT 2
54416: NEG
54417: PUSH
54418: EMPTY
54419: LIST
54420: LIST
54421: PUSH
54422: LD_INT 3
54424: NEG
54425: PUSH
54426: LD_INT 2
54428: PUSH
54429: EMPTY
54430: LIST
54431: LIST
54432: PUSH
54433: LD_INT 3
54435: NEG
54436: PUSH
54437: LD_INT 3
54439: NEG
54440: PUSH
54441: EMPTY
54442: LIST
54443: LIST
54444: PUSH
54445: LD_INT 3
54447: NEG
54448: PUSH
54449: LD_INT 4
54451: NEG
54452: PUSH
54453: EMPTY
54454: LIST
54455: LIST
54456: PUSH
54457: LD_INT 2
54459: NEG
54460: PUSH
54461: LD_INT 3
54463: NEG
54464: PUSH
54465: EMPTY
54466: LIST
54467: LIST
54468: PUSH
54469: LD_INT 2
54471: NEG
54472: PUSH
54473: LD_INT 2
54475: NEG
54476: PUSH
54477: EMPTY
54478: LIST
54479: LIST
54480: PUSH
54481: LD_INT 3
54483: NEG
54484: PUSH
54485: LD_INT 2
54487: NEG
54488: PUSH
54489: EMPTY
54490: LIST
54491: LIST
54492: PUSH
54493: LD_INT 4
54495: NEG
54496: PUSH
54497: LD_INT 3
54499: NEG
54500: PUSH
54501: EMPTY
54502: LIST
54503: LIST
54504: PUSH
54505: LD_INT 4
54507: NEG
54508: PUSH
54509: LD_INT 4
54511: NEG
54512: PUSH
54513: EMPTY
54514: LIST
54515: LIST
54516: PUSH
54517: LD_INT 2
54519: NEG
54520: PUSH
54521: LD_INT 4
54523: NEG
54524: PUSH
54525: EMPTY
54526: LIST
54527: LIST
54528: PUSH
54529: LD_INT 4
54531: NEG
54532: PUSH
54533: LD_INT 2
54535: NEG
54536: PUSH
54537: EMPTY
54538: LIST
54539: LIST
54540: PUSH
54541: LD_INT 0
54543: PUSH
54544: LD_INT 4
54546: NEG
54547: PUSH
54548: EMPTY
54549: LIST
54550: LIST
54551: PUSH
54552: LD_INT 0
54554: PUSH
54555: LD_INT 5
54557: NEG
54558: PUSH
54559: EMPTY
54560: LIST
54561: LIST
54562: PUSH
54563: LD_INT 1
54565: PUSH
54566: LD_INT 4
54568: NEG
54569: PUSH
54570: EMPTY
54571: LIST
54572: LIST
54573: PUSH
54574: LD_INT 1
54576: PUSH
54577: LD_INT 3
54579: NEG
54580: PUSH
54581: EMPTY
54582: LIST
54583: LIST
54584: PUSH
54585: LD_INT 0
54587: PUSH
54588: LD_INT 3
54590: NEG
54591: PUSH
54592: EMPTY
54593: LIST
54594: LIST
54595: PUSH
54596: LD_INT 1
54598: NEG
54599: PUSH
54600: LD_INT 4
54602: NEG
54603: PUSH
54604: EMPTY
54605: LIST
54606: LIST
54607: PUSH
54608: LD_INT 1
54610: NEG
54611: PUSH
54612: LD_INT 5
54614: NEG
54615: PUSH
54616: EMPTY
54617: LIST
54618: LIST
54619: PUSH
54620: LD_INT 2
54622: PUSH
54623: LD_INT 3
54625: NEG
54626: PUSH
54627: EMPTY
54628: LIST
54629: LIST
54630: PUSH
54631: LD_INT 2
54633: NEG
54634: PUSH
54635: LD_INT 5
54637: NEG
54638: PUSH
54639: EMPTY
54640: LIST
54641: LIST
54642: PUSH
54643: EMPTY
54644: LIST
54645: LIST
54646: LIST
54647: LIST
54648: LIST
54649: LIST
54650: LIST
54651: LIST
54652: LIST
54653: LIST
54654: LIST
54655: LIST
54656: LIST
54657: LIST
54658: LIST
54659: LIST
54660: LIST
54661: LIST
54662: LIST
54663: LIST
54664: LIST
54665: LIST
54666: LIST
54667: LIST
54668: LIST
54669: LIST
54670: LIST
54671: LIST
54672: LIST
54673: LIST
54674: LIST
54675: LIST
54676: LIST
54677: LIST
54678: LIST
54679: LIST
54680: LIST
54681: LIST
54682: LIST
54683: LIST
54684: LIST
54685: LIST
54686: LIST
54687: LIST
54688: LIST
54689: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
54690: LD_ADDR_VAR 0 31
54694: PUSH
54695: LD_INT 0
54697: PUSH
54698: LD_INT 4
54700: PUSH
54701: EMPTY
54702: LIST
54703: LIST
54704: PUSH
54705: LD_INT 0
54707: PUSH
54708: LD_INT 3
54710: PUSH
54711: EMPTY
54712: LIST
54713: LIST
54714: PUSH
54715: LD_INT 1
54717: PUSH
54718: LD_INT 4
54720: PUSH
54721: EMPTY
54722: LIST
54723: LIST
54724: PUSH
54725: LD_INT 1
54727: PUSH
54728: LD_INT 5
54730: PUSH
54731: EMPTY
54732: LIST
54733: LIST
54734: PUSH
54735: LD_INT 0
54737: PUSH
54738: LD_INT 5
54740: PUSH
54741: EMPTY
54742: LIST
54743: LIST
54744: PUSH
54745: LD_INT 1
54747: NEG
54748: PUSH
54749: LD_INT 4
54751: PUSH
54752: EMPTY
54753: LIST
54754: LIST
54755: PUSH
54756: LD_INT 1
54758: NEG
54759: PUSH
54760: LD_INT 3
54762: PUSH
54763: EMPTY
54764: LIST
54765: LIST
54766: PUSH
54767: LD_INT 2
54769: PUSH
54770: LD_INT 5
54772: PUSH
54773: EMPTY
54774: LIST
54775: LIST
54776: PUSH
54777: LD_INT 2
54779: NEG
54780: PUSH
54781: LD_INT 3
54783: PUSH
54784: EMPTY
54785: LIST
54786: LIST
54787: PUSH
54788: LD_INT 3
54790: NEG
54791: PUSH
54792: LD_INT 0
54794: PUSH
54795: EMPTY
54796: LIST
54797: LIST
54798: PUSH
54799: LD_INT 3
54801: NEG
54802: PUSH
54803: LD_INT 1
54805: NEG
54806: PUSH
54807: EMPTY
54808: LIST
54809: LIST
54810: PUSH
54811: LD_INT 2
54813: NEG
54814: PUSH
54815: LD_INT 0
54817: PUSH
54818: EMPTY
54819: LIST
54820: LIST
54821: PUSH
54822: LD_INT 2
54824: NEG
54825: PUSH
54826: LD_INT 1
54828: PUSH
54829: EMPTY
54830: LIST
54831: LIST
54832: PUSH
54833: LD_INT 3
54835: NEG
54836: PUSH
54837: LD_INT 1
54839: PUSH
54840: EMPTY
54841: LIST
54842: LIST
54843: PUSH
54844: LD_INT 4
54846: NEG
54847: PUSH
54848: LD_INT 0
54850: PUSH
54851: EMPTY
54852: LIST
54853: LIST
54854: PUSH
54855: LD_INT 4
54857: NEG
54858: PUSH
54859: LD_INT 1
54861: NEG
54862: PUSH
54863: EMPTY
54864: LIST
54865: LIST
54866: PUSH
54867: LD_INT 4
54869: NEG
54870: PUSH
54871: LD_INT 2
54873: NEG
54874: PUSH
54875: EMPTY
54876: LIST
54877: LIST
54878: PUSH
54879: LD_INT 2
54881: NEG
54882: PUSH
54883: LD_INT 2
54885: PUSH
54886: EMPTY
54887: LIST
54888: LIST
54889: PUSH
54890: LD_INT 4
54892: NEG
54893: PUSH
54894: LD_INT 4
54896: NEG
54897: PUSH
54898: EMPTY
54899: LIST
54900: LIST
54901: PUSH
54902: LD_INT 4
54904: NEG
54905: PUSH
54906: LD_INT 5
54908: NEG
54909: PUSH
54910: EMPTY
54911: LIST
54912: LIST
54913: PUSH
54914: LD_INT 3
54916: NEG
54917: PUSH
54918: LD_INT 4
54920: NEG
54921: PUSH
54922: EMPTY
54923: LIST
54924: LIST
54925: PUSH
54926: LD_INT 3
54928: NEG
54929: PUSH
54930: LD_INT 3
54932: NEG
54933: PUSH
54934: EMPTY
54935: LIST
54936: LIST
54937: PUSH
54938: LD_INT 4
54940: NEG
54941: PUSH
54942: LD_INT 3
54944: NEG
54945: PUSH
54946: EMPTY
54947: LIST
54948: LIST
54949: PUSH
54950: LD_INT 5
54952: NEG
54953: PUSH
54954: LD_INT 4
54956: NEG
54957: PUSH
54958: EMPTY
54959: LIST
54960: LIST
54961: PUSH
54962: LD_INT 5
54964: NEG
54965: PUSH
54966: LD_INT 5
54968: NEG
54969: PUSH
54970: EMPTY
54971: LIST
54972: LIST
54973: PUSH
54974: LD_INT 3
54976: NEG
54977: PUSH
54978: LD_INT 5
54980: NEG
54981: PUSH
54982: EMPTY
54983: LIST
54984: LIST
54985: PUSH
54986: LD_INT 5
54988: NEG
54989: PUSH
54990: LD_INT 3
54992: NEG
54993: PUSH
54994: EMPTY
54995: LIST
54996: LIST
54997: PUSH
54998: LD_INT 0
55000: PUSH
55001: LD_INT 3
55003: NEG
55004: PUSH
55005: EMPTY
55006: LIST
55007: LIST
55008: PUSH
55009: LD_INT 0
55011: PUSH
55012: LD_INT 4
55014: NEG
55015: PUSH
55016: EMPTY
55017: LIST
55018: LIST
55019: PUSH
55020: LD_INT 1
55022: PUSH
55023: LD_INT 3
55025: NEG
55026: PUSH
55027: EMPTY
55028: LIST
55029: LIST
55030: PUSH
55031: LD_INT 1
55033: PUSH
55034: LD_INT 2
55036: NEG
55037: PUSH
55038: EMPTY
55039: LIST
55040: LIST
55041: PUSH
55042: LD_INT 0
55044: PUSH
55045: LD_INT 2
55047: NEG
55048: PUSH
55049: EMPTY
55050: LIST
55051: LIST
55052: PUSH
55053: LD_INT 1
55055: NEG
55056: PUSH
55057: LD_INT 3
55059: NEG
55060: PUSH
55061: EMPTY
55062: LIST
55063: LIST
55064: PUSH
55065: LD_INT 1
55067: NEG
55068: PUSH
55069: LD_INT 4
55071: NEG
55072: PUSH
55073: EMPTY
55074: LIST
55075: LIST
55076: PUSH
55077: LD_INT 2
55079: PUSH
55080: LD_INT 2
55082: NEG
55083: PUSH
55084: EMPTY
55085: LIST
55086: LIST
55087: PUSH
55088: LD_INT 2
55090: NEG
55091: PUSH
55092: LD_INT 4
55094: NEG
55095: PUSH
55096: EMPTY
55097: LIST
55098: LIST
55099: PUSH
55100: LD_INT 4
55102: PUSH
55103: LD_INT 0
55105: PUSH
55106: EMPTY
55107: LIST
55108: LIST
55109: PUSH
55110: LD_INT 4
55112: PUSH
55113: LD_INT 1
55115: NEG
55116: PUSH
55117: EMPTY
55118: LIST
55119: LIST
55120: PUSH
55121: LD_INT 5
55123: PUSH
55124: LD_INT 0
55126: PUSH
55127: EMPTY
55128: LIST
55129: LIST
55130: PUSH
55131: LD_INT 5
55133: PUSH
55134: LD_INT 1
55136: PUSH
55137: EMPTY
55138: LIST
55139: LIST
55140: PUSH
55141: LD_INT 4
55143: PUSH
55144: LD_INT 1
55146: PUSH
55147: EMPTY
55148: LIST
55149: LIST
55150: PUSH
55151: LD_INT 3
55153: PUSH
55154: LD_INT 0
55156: PUSH
55157: EMPTY
55158: LIST
55159: LIST
55160: PUSH
55161: LD_INT 3
55163: PUSH
55164: LD_INT 1
55166: NEG
55167: PUSH
55168: EMPTY
55169: LIST
55170: LIST
55171: PUSH
55172: LD_INT 3
55174: PUSH
55175: LD_INT 2
55177: NEG
55178: PUSH
55179: EMPTY
55180: LIST
55181: LIST
55182: PUSH
55183: LD_INT 5
55185: PUSH
55186: LD_INT 2
55188: PUSH
55189: EMPTY
55190: LIST
55191: LIST
55192: PUSH
55193: EMPTY
55194: LIST
55195: LIST
55196: LIST
55197: LIST
55198: LIST
55199: LIST
55200: LIST
55201: LIST
55202: LIST
55203: LIST
55204: LIST
55205: LIST
55206: LIST
55207: LIST
55208: LIST
55209: LIST
55210: LIST
55211: LIST
55212: LIST
55213: LIST
55214: LIST
55215: LIST
55216: LIST
55217: LIST
55218: LIST
55219: LIST
55220: LIST
55221: LIST
55222: LIST
55223: LIST
55224: LIST
55225: LIST
55226: LIST
55227: LIST
55228: LIST
55229: LIST
55230: LIST
55231: LIST
55232: LIST
55233: LIST
55234: LIST
55235: LIST
55236: LIST
55237: LIST
55238: LIST
55239: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
55240: LD_ADDR_VAR 0 32
55244: PUSH
55245: LD_INT 4
55247: NEG
55248: PUSH
55249: LD_INT 0
55251: PUSH
55252: EMPTY
55253: LIST
55254: LIST
55255: PUSH
55256: LD_INT 4
55258: NEG
55259: PUSH
55260: LD_INT 1
55262: NEG
55263: PUSH
55264: EMPTY
55265: LIST
55266: LIST
55267: PUSH
55268: LD_INT 3
55270: NEG
55271: PUSH
55272: LD_INT 0
55274: PUSH
55275: EMPTY
55276: LIST
55277: LIST
55278: PUSH
55279: LD_INT 3
55281: NEG
55282: PUSH
55283: LD_INT 1
55285: PUSH
55286: EMPTY
55287: LIST
55288: LIST
55289: PUSH
55290: LD_INT 4
55292: NEG
55293: PUSH
55294: LD_INT 1
55296: PUSH
55297: EMPTY
55298: LIST
55299: LIST
55300: PUSH
55301: LD_INT 5
55303: NEG
55304: PUSH
55305: LD_INT 0
55307: PUSH
55308: EMPTY
55309: LIST
55310: LIST
55311: PUSH
55312: LD_INT 5
55314: NEG
55315: PUSH
55316: LD_INT 1
55318: NEG
55319: PUSH
55320: EMPTY
55321: LIST
55322: LIST
55323: PUSH
55324: LD_INT 5
55326: NEG
55327: PUSH
55328: LD_INT 2
55330: NEG
55331: PUSH
55332: EMPTY
55333: LIST
55334: LIST
55335: PUSH
55336: LD_INT 3
55338: NEG
55339: PUSH
55340: LD_INT 2
55342: PUSH
55343: EMPTY
55344: LIST
55345: LIST
55346: PUSH
55347: LD_INT 3
55349: NEG
55350: PUSH
55351: LD_INT 3
55353: NEG
55354: PUSH
55355: EMPTY
55356: LIST
55357: LIST
55358: PUSH
55359: LD_INT 3
55361: NEG
55362: PUSH
55363: LD_INT 4
55365: NEG
55366: PUSH
55367: EMPTY
55368: LIST
55369: LIST
55370: PUSH
55371: LD_INT 2
55373: NEG
55374: PUSH
55375: LD_INT 3
55377: NEG
55378: PUSH
55379: EMPTY
55380: LIST
55381: LIST
55382: PUSH
55383: LD_INT 2
55385: NEG
55386: PUSH
55387: LD_INT 2
55389: NEG
55390: PUSH
55391: EMPTY
55392: LIST
55393: LIST
55394: PUSH
55395: LD_INT 3
55397: NEG
55398: PUSH
55399: LD_INT 2
55401: NEG
55402: PUSH
55403: EMPTY
55404: LIST
55405: LIST
55406: PUSH
55407: LD_INT 4
55409: NEG
55410: PUSH
55411: LD_INT 3
55413: NEG
55414: PUSH
55415: EMPTY
55416: LIST
55417: LIST
55418: PUSH
55419: LD_INT 4
55421: NEG
55422: PUSH
55423: LD_INT 4
55425: NEG
55426: PUSH
55427: EMPTY
55428: LIST
55429: LIST
55430: PUSH
55431: LD_INT 2
55433: NEG
55434: PUSH
55435: LD_INT 4
55437: NEG
55438: PUSH
55439: EMPTY
55440: LIST
55441: LIST
55442: PUSH
55443: LD_INT 4
55445: NEG
55446: PUSH
55447: LD_INT 2
55449: NEG
55450: PUSH
55451: EMPTY
55452: LIST
55453: LIST
55454: PUSH
55455: LD_INT 0
55457: PUSH
55458: LD_INT 4
55460: NEG
55461: PUSH
55462: EMPTY
55463: LIST
55464: LIST
55465: PUSH
55466: LD_INT 0
55468: PUSH
55469: LD_INT 5
55471: NEG
55472: PUSH
55473: EMPTY
55474: LIST
55475: LIST
55476: PUSH
55477: LD_INT 1
55479: PUSH
55480: LD_INT 4
55482: NEG
55483: PUSH
55484: EMPTY
55485: LIST
55486: LIST
55487: PUSH
55488: LD_INT 1
55490: PUSH
55491: LD_INT 3
55493: NEG
55494: PUSH
55495: EMPTY
55496: LIST
55497: LIST
55498: PUSH
55499: LD_INT 0
55501: PUSH
55502: LD_INT 3
55504: NEG
55505: PUSH
55506: EMPTY
55507: LIST
55508: LIST
55509: PUSH
55510: LD_INT 1
55512: NEG
55513: PUSH
55514: LD_INT 4
55516: NEG
55517: PUSH
55518: EMPTY
55519: LIST
55520: LIST
55521: PUSH
55522: LD_INT 1
55524: NEG
55525: PUSH
55526: LD_INT 5
55528: NEG
55529: PUSH
55530: EMPTY
55531: LIST
55532: LIST
55533: PUSH
55534: LD_INT 2
55536: PUSH
55537: LD_INT 3
55539: NEG
55540: PUSH
55541: EMPTY
55542: LIST
55543: LIST
55544: PUSH
55545: LD_INT 2
55547: NEG
55548: PUSH
55549: LD_INT 5
55551: NEG
55552: PUSH
55553: EMPTY
55554: LIST
55555: LIST
55556: PUSH
55557: LD_INT 3
55559: PUSH
55560: LD_INT 0
55562: PUSH
55563: EMPTY
55564: LIST
55565: LIST
55566: PUSH
55567: LD_INT 3
55569: PUSH
55570: LD_INT 1
55572: NEG
55573: PUSH
55574: EMPTY
55575: LIST
55576: LIST
55577: PUSH
55578: LD_INT 4
55580: PUSH
55581: LD_INT 0
55583: PUSH
55584: EMPTY
55585: LIST
55586: LIST
55587: PUSH
55588: LD_INT 4
55590: PUSH
55591: LD_INT 1
55593: PUSH
55594: EMPTY
55595: LIST
55596: LIST
55597: PUSH
55598: LD_INT 3
55600: PUSH
55601: LD_INT 1
55603: PUSH
55604: EMPTY
55605: LIST
55606: LIST
55607: PUSH
55608: LD_INT 2
55610: PUSH
55611: LD_INT 0
55613: PUSH
55614: EMPTY
55615: LIST
55616: LIST
55617: PUSH
55618: LD_INT 2
55620: PUSH
55621: LD_INT 1
55623: NEG
55624: PUSH
55625: EMPTY
55626: LIST
55627: LIST
55628: PUSH
55629: LD_INT 2
55631: PUSH
55632: LD_INT 2
55634: NEG
55635: PUSH
55636: EMPTY
55637: LIST
55638: LIST
55639: PUSH
55640: LD_INT 4
55642: PUSH
55643: LD_INT 2
55645: PUSH
55646: EMPTY
55647: LIST
55648: LIST
55649: PUSH
55650: LD_INT 4
55652: PUSH
55653: LD_INT 4
55655: PUSH
55656: EMPTY
55657: LIST
55658: LIST
55659: PUSH
55660: LD_INT 4
55662: PUSH
55663: LD_INT 3
55665: PUSH
55666: EMPTY
55667: LIST
55668: LIST
55669: PUSH
55670: LD_INT 5
55672: PUSH
55673: LD_INT 4
55675: PUSH
55676: EMPTY
55677: LIST
55678: LIST
55679: PUSH
55680: LD_INT 5
55682: PUSH
55683: LD_INT 5
55685: PUSH
55686: EMPTY
55687: LIST
55688: LIST
55689: PUSH
55690: LD_INT 4
55692: PUSH
55693: LD_INT 5
55695: PUSH
55696: EMPTY
55697: LIST
55698: LIST
55699: PUSH
55700: LD_INT 3
55702: PUSH
55703: LD_INT 4
55705: PUSH
55706: EMPTY
55707: LIST
55708: LIST
55709: PUSH
55710: LD_INT 3
55712: PUSH
55713: LD_INT 3
55715: PUSH
55716: EMPTY
55717: LIST
55718: LIST
55719: PUSH
55720: LD_INT 5
55722: PUSH
55723: LD_INT 3
55725: PUSH
55726: EMPTY
55727: LIST
55728: LIST
55729: PUSH
55730: LD_INT 3
55732: PUSH
55733: LD_INT 5
55735: PUSH
55736: EMPTY
55737: LIST
55738: LIST
55739: PUSH
55740: EMPTY
55741: LIST
55742: LIST
55743: LIST
55744: LIST
55745: LIST
55746: LIST
55747: LIST
55748: LIST
55749: LIST
55750: LIST
55751: LIST
55752: LIST
55753: LIST
55754: LIST
55755: LIST
55756: LIST
55757: LIST
55758: LIST
55759: LIST
55760: LIST
55761: LIST
55762: LIST
55763: LIST
55764: LIST
55765: LIST
55766: LIST
55767: LIST
55768: LIST
55769: LIST
55770: LIST
55771: LIST
55772: LIST
55773: LIST
55774: LIST
55775: LIST
55776: LIST
55777: LIST
55778: LIST
55779: LIST
55780: LIST
55781: LIST
55782: LIST
55783: LIST
55784: LIST
55785: LIST
55786: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
55787: LD_ADDR_VAR 0 33
55791: PUSH
55792: LD_INT 4
55794: NEG
55795: PUSH
55796: LD_INT 4
55798: NEG
55799: PUSH
55800: EMPTY
55801: LIST
55802: LIST
55803: PUSH
55804: LD_INT 4
55806: NEG
55807: PUSH
55808: LD_INT 5
55810: NEG
55811: PUSH
55812: EMPTY
55813: LIST
55814: LIST
55815: PUSH
55816: LD_INT 3
55818: NEG
55819: PUSH
55820: LD_INT 4
55822: NEG
55823: PUSH
55824: EMPTY
55825: LIST
55826: LIST
55827: PUSH
55828: LD_INT 3
55830: NEG
55831: PUSH
55832: LD_INT 3
55834: NEG
55835: PUSH
55836: EMPTY
55837: LIST
55838: LIST
55839: PUSH
55840: LD_INT 4
55842: NEG
55843: PUSH
55844: LD_INT 3
55846: NEG
55847: PUSH
55848: EMPTY
55849: LIST
55850: LIST
55851: PUSH
55852: LD_INT 5
55854: NEG
55855: PUSH
55856: LD_INT 4
55858: NEG
55859: PUSH
55860: EMPTY
55861: LIST
55862: LIST
55863: PUSH
55864: LD_INT 5
55866: NEG
55867: PUSH
55868: LD_INT 5
55870: NEG
55871: PUSH
55872: EMPTY
55873: LIST
55874: LIST
55875: PUSH
55876: LD_INT 3
55878: NEG
55879: PUSH
55880: LD_INT 5
55882: NEG
55883: PUSH
55884: EMPTY
55885: LIST
55886: LIST
55887: PUSH
55888: LD_INT 5
55890: NEG
55891: PUSH
55892: LD_INT 3
55894: NEG
55895: PUSH
55896: EMPTY
55897: LIST
55898: LIST
55899: PUSH
55900: LD_INT 0
55902: PUSH
55903: LD_INT 3
55905: NEG
55906: PUSH
55907: EMPTY
55908: LIST
55909: LIST
55910: PUSH
55911: LD_INT 0
55913: PUSH
55914: LD_INT 4
55916: NEG
55917: PUSH
55918: EMPTY
55919: LIST
55920: LIST
55921: PUSH
55922: LD_INT 1
55924: PUSH
55925: LD_INT 3
55927: NEG
55928: PUSH
55929: EMPTY
55930: LIST
55931: LIST
55932: PUSH
55933: LD_INT 1
55935: PUSH
55936: LD_INT 2
55938: NEG
55939: PUSH
55940: EMPTY
55941: LIST
55942: LIST
55943: PUSH
55944: LD_INT 0
55946: PUSH
55947: LD_INT 2
55949: NEG
55950: PUSH
55951: EMPTY
55952: LIST
55953: LIST
55954: PUSH
55955: LD_INT 1
55957: NEG
55958: PUSH
55959: LD_INT 3
55961: NEG
55962: PUSH
55963: EMPTY
55964: LIST
55965: LIST
55966: PUSH
55967: LD_INT 1
55969: NEG
55970: PUSH
55971: LD_INT 4
55973: NEG
55974: PUSH
55975: EMPTY
55976: LIST
55977: LIST
55978: PUSH
55979: LD_INT 2
55981: PUSH
55982: LD_INT 2
55984: NEG
55985: PUSH
55986: EMPTY
55987: LIST
55988: LIST
55989: PUSH
55990: LD_INT 2
55992: NEG
55993: PUSH
55994: LD_INT 4
55996: NEG
55997: PUSH
55998: EMPTY
55999: LIST
56000: LIST
56001: PUSH
56002: LD_INT 4
56004: PUSH
56005: LD_INT 0
56007: PUSH
56008: EMPTY
56009: LIST
56010: LIST
56011: PUSH
56012: LD_INT 4
56014: PUSH
56015: LD_INT 1
56017: NEG
56018: PUSH
56019: EMPTY
56020: LIST
56021: LIST
56022: PUSH
56023: LD_INT 5
56025: PUSH
56026: LD_INT 0
56028: PUSH
56029: EMPTY
56030: LIST
56031: LIST
56032: PUSH
56033: LD_INT 5
56035: PUSH
56036: LD_INT 1
56038: PUSH
56039: EMPTY
56040: LIST
56041: LIST
56042: PUSH
56043: LD_INT 4
56045: PUSH
56046: LD_INT 1
56048: PUSH
56049: EMPTY
56050: LIST
56051: LIST
56052: PUSH
56053: LD_INT 3
56055: PUSH
56056: LD_INT 0
56058: PUSH
56059: EMPTY
56060: LIST
56061: LIST
56062: PUSH
56063: LD_INT 3
56065: PUSH
56066: LD_INT 1
56068: NEG
56069: PUSH
56070: EMPTY
56071: LIST
56072: LIST
56073: PUSH
56074: LD_INT 3
56076: PUSH
56077: LD_INT 2
56079: NEG
56080: PUSH
56081: EMPTY
56082: LIST
56083: LIST
56084: PUSH
56085: LD_INT 5
56087: PUSH
56088: LD_INT 2
56090: PUSH
56091: EMPTY
56092: LIST
56093: LIST
56094: PUSH
56095: LD_INT 3
56097: PUSH
56098: LD_INT 3
56100: PUSH
56101: EMPTY
56102: LIST
56103: LIST
56104: PUSH
56105: LD_INT 3
56107: PUSH
56108: LD_INT 2
56110: PUSH
56111: EMPTY
56112: LIST
56113: LIST
56114: PUSH
56115: LD_INT 4
56117: PUSH
56118: LD_INT 3
56120: PUSH
56121: EMPTY
56122: LIST
56123: LIST
56124: PUSH
56125: LD_INT 4
56127: PUSH
56128: LD_INT 4
56130: PUSH
56131: EMPTY
56132: LIST
56133: LIST
56134: PUSH
56135: LD_INT 3
56137: PUSH
56138: LD_INT 4
56140: PUSH
56141: EMPTY
56142: LIST
56143: LIST
56144: PUSH
56145: LD_INT 2
56147: PUSH
56148: LD_INT 3
56150: PUSH
56151: EMPTY
56152: LIST
56153: LIST
56154: PUSH
56155: LD_INT 2
56157: PUSH
56158: LD_INT 2
56160: PUSH
56161: EMPTY
56162: LIST
56163: LIST
56164: PUSH
56165: LD_INT 4
56167: PUSH
56168: LD_INT 2
56170: PUSH
56171: EMPTY
56172: LIST
56173: LIST
56174: PUSH
56175: LD_INT 2
56177: PUSH
56178: LD_INT 4
56180: PUSH
56181: EMPTY
56182: LIST
56183: LIST
56184: PUSH
56185: LD_INT 0
56187: PUSH
56188: LD_INT 4
56190: PUSH
56191: EMPTY
56192: LIST
56193: LIST
56194: PUSH
56195: LD_INT 0
56197: PUSH
56198: LD_INT 3
56200: PUSH
56201: EMPTY
56202: LIST
56203: LIST
56204: PUSH
56205: LD_INT 1
56207: PUSH
56208: LD_INT 4
56210: PUSH
56211: EMPTY
56212: LIST
56213: LIST
56214: PUSH
56215: LD_INT 1
56217: PUSH
56218: LD_INT 5
56220: PUSH
56221: EMPTY
56222: LIST
56223: LIST
56224: PUSH
56225: LD_INT 0
56227: PUSH
56228: LD_INT 5
56230: PUSH
56231: EMPTY
56232: LIST
56233: LIST
56234: PUSH
56235: LD_INT 1
56237: NEG
56238: PUSH
56239: LD_INT 4
56241: PUSH
56242: EMPTY
56243: LIST
56244: LIST
56245: PUSH
56246: LD_INT 1
56248: NEG
56249: PUSH
56250: LD_INT 3
56252: PUSH
56253: EMPTY
56254: LIST
56255: LIST
56256: PUSH
56257: LD_INT 2
56259: PUSH
56260: LD_INT 5
56262: PUSH
56263: EMPTY
56264: LIST
56265: LIST
56266: PUSH
56267: LD_INT 2
56269: NEG
56270: PUSH
56271: LD_INT 3
56273: PUSH
56274: EMPTY
56275: LIST
56276: LIST
56277: PUSH
56278: EMPTY
56279: LIST
56280: LIST
56281: LIST
56282: LIST
56283: LIST
56284: LIST
56285: LIST
56286: LIST
56287: LIST
56288: LIST
56289: LIST
56290: LIST
56291: LIST
56292: LIST
56293: LIST
56294: LIST
56295: LIST
56296: LIST
56297: LIST
56298: LIST
56299: LIST
56300: LIST
56301: LIST
56302: LIST
56303: LIST
56304: LIST
56305: LIST
56306: LIST
56307: LIST
56308: LIST
56309: LIST
56310: LIST
56311: LIST
56312: LIST
56313: LIST
56314: LIST
56315: LIST
56316: LIST
56317: LIST
56318: LIST
56319: LIST
56320: LIST
56321: LIST
56322: LIST
56323: LIST
56324: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
56325: LD_ADDR_VAR 0 34
56329: PUSH
56330: LD_INT 0
56332: PUSH
56333: LD_INT 4
56335: NEG
56336: PUSH
56337: EMPTY
56338: LIST
56339: LIST
56340: PUSH
56341: LD_INT 0
56343: PUSH
56344: LD_INT 5
56346: NEG
56347: PUSH
56348: EMPTY
56349: LIST
56350: LIST
56351: PUSH
56352: LD_INT 1
56354: PUSH
56355: LD_INT 4
56357: NEG
56358: PUSH
56359: EMPTY
56360: LIST
56361: LIST
56362: PUSH
56363: LD_INT 1
56365: PUSH
56366: LD_INT 3
56368: NEG
56369: PUSH
56370: EMPTY
56371: LIST
56372: LIST
56373: PUSH
56374: LD_INT 0
56376: PUSH
56377: LD_INT 3
56379: NEG
56380: PUSH
56381: EMPTY
56382: LIST
56383: LIST
56384: PUSH
56385: LD_INT 1
56387: NEG
56388: PUSH
56389: LD_INT 4
56391: NEG
56392: PUSH
56393: EMPTY
56394: LIST
56395: LIST
56396: PUSH
56397: LD_INT 1
56399: NEG
56400: PUSH
56401: LD_INT 5
56403: NEG
56404: PUSH
56405: EMPTY
56406: LIST
56407: LIST
56408: PUSH
56409: LD_INT 2
56411: PUSH
56412: LD_INT 3
56414: NEG
56415: PUSH
56416: EMPTY
56417: LIST
56418: LIST
56419: PUSH
56420: LD_INT 2
56422: NEG
56423: PUSH
56424: LD_INT 5
56426: NEG
56427: PUSH
56428: EMPTY
56429: LIST
56430: LIST
56431: PUSH
56432: LD_INT 3
56434: PUSH
56435: LD_INT 0
56437: PUSH
56438: EMPTY
56439: LIST
56440: LIST
56441: PUSH
56442: LD_INT 3
56444: PUSH
56445: LD_INT 1
56447: NEG
56448: PUSH
56449: EMPTY
56450: LIST
56451: LIST
56452: PUSH
56453: LD_INT 4
56455: PUSH
56456: LD_INT 0
56458: PUSH
56459: EMPTY
56460: LIST
56461: LIST
56462: PUSH
56463: LD_INT 4
56465: PUSH
56466: LD_INT 1
56468: PUSH
56469: EMPTY
56470: LIST
56471: LIST
56472: PUSH
56473: LD_INT 3
56475: PUSH
56476: LD_INT 1
56478: PUSH
56479: EMPTY
56480: LIST
56481: LIST
56482: PUSH
56483: LD_INT 2
56485: PUSH
56486: LD_INT 0
56488: PUSH
56489: EMPTY
56490: LIST
56491: LIST
56492: PUSH
56493: LD_INT 2
56495: PUSH
56496: LD_INT 1
56498: NEG
56499: PUSH
56500: EMPTY
56501: LIST
56502: LIST
56503: PUSH
56504: LD_INT 2
56506: PUSH
56507: LD_INT 2
56509: NEG
56510: PUSH
56511: EMPTY
56512: LIST
56513: LIST
56514: PUSH
56515: LD_INT 4
56517: PUSH
56518: LD_INT 2
56520: PUSH
56521: EMPTY
56522: LIST
56523: LIST
56524: PUSH
56525: LD_INT 4
56527: PUSH
56528: LD_INT 4
56530: PUSH
56531: EMPTY
56532: LIST
56533: LIST
56534: PUSH
56535: LD_INT 4
56537: PUSH
56538: LD_INT 3
56540: PUSH
56541: EMPTY
56542: LIST
56543: LIST
56544: PUSH
56545: LD_INT 5
56547: PUSH
56548: LD_INT 4
56550: PUSH
56551: EMPTY
56552: LIST
56553: LIST
56554: PUSH
56555: LD_INT 5
56557: PUSH
56558: LD_INT 5
56560: PUSH
56561: EMPTY
56562: LIST
56563: LIST
56564: PUSH
56565: LD_INT 4
56567: PUSH
56568: LD_INT 5
56570: PUSH
56571: EMPTY
56572: LIST
56573: LIST
56574: PUSH
56575: LD_INT 3
56577: PUSH
56578: LD_INT 4
56580: PUSH
56581: EMPTY
56582: LIST
56583: LIST
56584: PUSH
56585: LD_INT 3
56587: PUSH
56588: LD_INT 3
56590: PUSH
56591: EMPTY
56592: LIST
56593: LIST
56594: PUSH
56595: LD_INT 5
56597: PUSH
56598: LD_INT 3
56600: PUSH
56601: EMPTY
56602: LIST
56603: LIST
56604: PUSH
56605: LD_INT 3
56607: PUSH
56608: LD_INT 5
56610: PUSH
56611: EMPTY
56612: LIST
56613: LIST
56614: PUSH
56615: LD_INT 0
56617: PUSH
56618: LD_INT 3
56620: PUSH
56621: EMPTY
56622: LIST
56623: LIST
56624: PUSH
56625: LD_INT 0
56627: PUSH
56628: LD_INT 2
56630: PUSH
56631: EMPTY
56632: LIST
56633: LIST
56634: PUSH
56635: LD_INT 1
56637: PUSH
56638: LD_INT 3
56640: PUSH
56641: EMPTY
56642: LIST
56643: LIST
56644: PUSH
56645: LD_INT 1
56647: PUSH
56648: LD_INT 4
56650: PUSH
56651: EMPTY
56652: LIST
56653: LIST
56654: PUSH
56655: LD_INT 0
56657: PUSH
56658: LD_INT 4
56660: PUSH
56661: EMPTY
56662: LIST
56663: LIST
56664: PUSH
56665: LD_INT 1
56667: NEG
56668: PUSH
56669: LD_INT 3
56671: PUSH
56672: EMPTY
56673: LIST
56674: LIST
56675: PUSH
56676: LD_INT 1
56678: NEG
56679: PUSH
56680: LD_INT 2
56682: PUSH
56683: EMPTY
56684: LIST
56685: LIST
56686: PUSH
56687: LD_INT 2
56689: PUSH
56690: LD_INT 4
56692: PUSH
56693: EMPTY
56694: LIST
56695: LIST
56696: PUSH
56697: LD_INT 2
56699: NEG
56700: PUSH
56701: LD_INT 2
56703: PUSH
56704: EMPTY
56705: LIST
56706: LIST
56707: PUSH
56708: LD_INT 4
56710: NEG
56711: PUSH
56712: LD_INT 0
56714: PUSH
56715: EMPTY
56716: LIST
56717: LIST
56718: PUSH
56719: LD_INT 4
56721: NEG
56722: PUSH
56723: LD_INT 1
56725: NEG
56726: PUSH
56727: EMPTY
56728: LIST
56729: LIST
56730: PUSH
56731: LD_INT 3
56733: NEG
56734: PUSH
56735: LD_INT 0
56737: PUSH
56738: EMPTY
56739: LIST
56740: LIST
56741: PUSH
56742: LD_INT 3
56744: NEG
56745: PUSH
56746: LD_INT 1
56748: PUSH
56749: EMPTY
56750: LIST
56751: LIST
56752: PUSH
56753: LD_INT 4
56755: NEG
56756: PUSH
56757: LD_INT 1
56759: PUSH
56760: EMPTY
56761: LIST
56762: LIST
56763: PUSH
56764: LD_INT 5
56766: NEG
56767: PUSH
56768: LD_INT 0
56770: PUSH
56771: EMPTY
56772: LIST
56773: LIST
56774: PUSH
56775: LD_INT 5
56777: NEG
56778: PUSH
56779: LD_INT 1
56781: NEG
56782: PUSH
56783: EMPTY
56784: LIST
56785: LIST
56786: PUSH
56787: LD_INT 5
56789: NEG
56790: PUSH
56791: LD_INT 2
56793: NEG
56794: PUSH
56795: EMPTY
56796: LIST
56797: LIST
56798: PUSH
56799: LD_INT 3
56801: NEG
56802: PUSH
56803: LD_INT 2
56805: PUSH
56806: EMPTY
56807: LIST
56808: LIST
56809: PUSH
56810: EMPTY
56811: LIST
56812: LIST
56813: LIST
56814: LIST
56815: LIST
56816: LIST
56817: LIST
56818: LIST
56819: LIST
56820: LIST
56821: LIST
56822: LIST
56823: LIST
56824: LIST
56825: LIST
56826: LIST
56827: LIST
56828: LIST
56829: LIST
56830: LIST
56831: LIST
56832: LIST
56833: LIST
56834: LIST
56835: LIST
56836: LIST
56837: LIST
56838: LIST
56839: LIST
56840: LIST
56841: LIST
56842: LIST
56843: LIST
56844: LIST
56845: LIST
56846: LIST
56847: LIST
56848: LIST
56849: LIST
56850: LIST
56851: LIST
56852: LIST
56853: LIST
56854: LIST
56855: LIST
56856: ST_TO_ADDR
// end ; end ;
56857: GO 56860
56859: POP
// case btype of b_depot , b_warehouse :
56860: LD_VAR 0 1
56864: PUSH
56865: LD_INT 0
56867: DOUBLE
56868: EQUAL
56869: IFTRUE 56879
56871: LD_INT 1
56873: DOUBLE
56874: EQUAL
56875: IFTRUE 56879
56877: GO 57080
56879: POP
// case nation of nation_american :
56880: LD_VAR 0 5
56884: PUSH
56885: LD_INT 1
56887: DOUBLE
56888: EQUAL
56889: IFTRUE 56893
56891: GO 56949
56893: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
56894: LD_ADDR_VAR 0 9
56898: PUSH
56899: LD_VAR 0 11
56903: PUSH
56904: LD_VAR 0 12
56908: PUSH
56909: LD_VAR 0 13
56913: PUSH
56914: LD_VAR 0 14
56918: PUSH
56919: LD_VAR 0 15
56923: PUSH
56924: LD_VAR 0 16
56928: PUSH
56929: EMPTY
56930: LIST
56931: LIST
56932: LIST
56933: LIST
56934: LIST
56935: LIST
56936: PUSH
56937: LD_VAR 0 4
56941: PUSH
56942: LD_INT 1
56944: PLUS
56945: ARRAY
56946: ST_TO_ADDR
56947: GO 57078
56949: LD_INT 2
56951: DOUBLE
56952: EQUAL
56953: IFTRUE 56957
56955: GO 57013
56957: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
56958: LD_ADDR_VAR 0 9
56962: PUSH
56963: LD_VAR 0 17
56967: PUSH
56968: LD_VAR 0 18
56972: PUSH
56973: LD_VAR 0 19
56977: PUSH
56978: LD_VAR 0 20
56982: PUSH
56983: LD_VAR 0 21
56987: PUSH
56988: LD_VAR 0 22
56992: PUSH
56993: EMPTY
56994: LIST
56995: LIST
56996: LIST
56997: LIST
56998: LIST
56999: LIST
57000: PUSH
57001: LD_VAR 0 4
57005: PUSH
57006: LD_INT 1
57008: PLUS
57009: ARRAY
57010: ST_TO_ADDR
57011: GO 57078
57013: LD_INT 3
57015: DOUBLE
57016: EQUAL
57017: IFTRUE 57021
57019: GO 57077
57021: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
57022: LD_ADDR_VAR 0 9
57026: PUSH
57027: LD_VAR 0 23
57031: PUSH
57032: LD_VAR 0 24
57036: PUSH
57037: LD_VAR 0 25
57041: PUSH
57042: LD_VAR 0 26
57046: PUSH
57047: LD_VAR 0 27
57051: PUSH
57052: LD_VAR 0 28
57056: PUSH
57057: EMPTY
57058: LIST
57059: LIST
57060: LIST
57061: LIST
57062: LIST
57063: LIST
57064: PUSH
57065: LD_VAR 0 4
57069: PUSH
57070: LD_INT 1
57072: PLUS
57073: ARRAY
57074: ST_TO_ADDR
57075: GO 57078
57077: POP
57078: GO 57633
57080: LD_INT 2
57082: DOUBLE
57083: EQUAL
57084: IFTRUE 57094
57086: LD_INT 3
57088: DOUBLE
57089: EQUAL
57090: IFTRUE 57094
57092: GO 57150
57094: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
57095: LD_ADDR_VAR 0 9
57099: PUSH
57100: LD_VAR 0 29
57104: PUSH
57105: LD_VAR 0 30
57109: PUSH
57110: LD_VAR 0 31
57114: PUSH
57115: LD_VAR 0 32
57119: PUSH
57120: LD_VAR 0 33
57124: PUSH
57125: LD_VAR 0 34
57129: PUSH
57130: EMPTY
57131: LIST
57132: LIST
57133: LIST
57134: LIST
57135: LIST
57136: LIST
57137: PUSH
57138: LD_VAR 0 4
57142: PUSH
57143: LD_INT 1
57145: PLUS
57146: ARRAY
57147: ST_TO_ADDR
57148: GO 57633
57150: LD_INT 16
57152: DOUBLE
57153: EQUAL
57154: IFTRUE 57212
57156: LD_INT 17
57158: DOUBLE
57159: EQUAL
57160: IFTRUE 57212
57162: LD_INT 18
57164: DOUBLE
57165: EQUAL
57166: IFTRUE 57212
57168: LD_INT 19
57170: DOUBLE
57171: EQUAL
57172: IFTRUE 57212
57174: LD_INT 22
57176: DOUBLE
57177: EQUAL
57178: IFTRUE 57212
57180: LD_INT 20
57182: DOUBLE
57183: EQUAL
57184: IFTRUE 57212
57186: LD_INT 21
57188: DOUBLE
57189: EQUAL
57190: IFTRUE 57212
57192: LD_INT 23
57194: DOUBLE
57195: EQUAL
57196: IFTRUE 57212
57198: LD_INT 24
57200: DOUBLE
57201: EQUAL
57202: IFTRUE 57212
57204: LD_INT 25
57206: DOUBLE
57207: EQUAL
57208: IFTRUE 57212
57210: GO 57268
57212: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
57213: LD_ADDR_VAR 0 9
57217: PUSH
57218: LD_VAR 0 35
57222: PUSH
57223: LD_VAR 0 36
57227: PUSH
57228: LD_VAR 0 37
57232: PUSH
57233: LD_VAR 0 38
57237: PUSH
57238: LD_VAR 0 39
57242: PUSH
57243: LD_VAR 0 40
57247: PUSH
57248: EMPTY
57249: LIST
57250: LIST
57251: LIST
57252: LIST
57253: LIST
57254: LIST
57255: PUSH
57256: LD_VAR 0 4
57260: PUSH
57261: LD_INT 1
57263: PLUS
57264: ARRAY
57265: ST_TO_ADDR
57266: GO 57633
57268: LD_INT 6
57270: DOUBLE
57271: EQUAL
57272: IFTRUE 57324
57274: LD_INT 7
57276: DOUBLE
57277: EQUAL
57278: IFTRUE 57324
57280: LD_INT 8
57282: DOUBLE
57283: EQUAL
57284: IFTRUE 57324
57286: LD_INT 13
57288: DOUBLE
57289: EQUAL
57290: IFTRUE 57324
57292: LD_INT 12
57294: DOUBLE
57295: EQUAL
57296: IFTRUE 57324
57298: LD_INT 15
57300: DOUBLE
57301: EQUAL
57302: IFTRUE 57324
57304: LD_INT 11
57306: DOUBLE
57307: EQUAL
57308: IFTRUE 57324
57310: LD_INT 14
57312: DOUBLE
57313: EQUAL
57314: IFTRUE 57324
57316: LD_INT 10
57318: DOUBLE
57319: EQUAL
57320: IFTRUE 57324
57322: GO 57380
57324: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
57325: LD_ADDR_VAR 0 9
57329: PUSH
57330: LD_VAR 0 41
57334: PUSH
57335: LD_VAR 0 42
57339: PUSH
57340: LD_VAR 0 43
57344: PUSH
57345: LD_VAR 0 44
57349: PUSH
57350: LD_VAR 0 45
57354: PUSH
57355: LD_VAR 0 46
57359: PUSH
57360: EMPTY
57361: LIST
57362: LIST
57363: LIST
57364: LIST
57365: LIST
57366: LIST
57367: PUSH
57368: LD_VAR 0 4
57372: PUSH
57373: LD_INT 1
57375: PLUS
57376: ARRAY
57377: ST_TO_ADDR
57378: GO 57633
57380: LD_INT 36
57382: DOUBLE
57383: EQUAL
57384: IFTRUE 57388
57386: GO 57444
57388: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
57389: LD_ADDR_VAR 0 9
57393: PUSH
57394: LD_VAR 0 47
57398: PUSH
57399: LD_VAR 0 48
57403: PUSH
57404: LD_VAR 0 49
57408: PUSH
57409: LD_VAR 0 50
57413: PUSH
57414: LD_VAR 0 51
57418: PUSH
57419: LD_VAR 0 52
57423: PUSH
57424: EMPTY
57425: LIST
57426: LIST
57427: LIST
57428: LIST
57429: LIST
57430: LIST
57431: PUSH
57432: LD_VAR 0 4
57436: PUSH
57437: LD_INT 1
57439: PLUS
57440: ARRAY
57441: ST_TO_ADDR
57442: GO 57633
57444: LD_INT 4
57446: DOUBLE
57447: EQUAL
57448: IFTRUE 57470
57450: LD_INT 5
57452: DOUBLE
57453: EQUAL
57454: IFTRUE 57470
57456: LD_INT 34
57458: DOUBLE
57459: EQUAL
57460: IFTRUE 57470
57462: LD_INT 37
57464: DOUBLE
57465: EQUAL
57466: IFTRUE 57470
57468: GO 57526
57470: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
57471: LD_ADDR_VAR 0 9
57475: PUSH
57476: LD_VAR 0 53
57480: PUSH
57481: LD_VAR 0 54
57485: PUSH
57486: LD_VAR 0 55
57490: PUSH
57491: LD_VAR 0 56
57495: PUSH
57496: LD_VAR 0 57
57500: PUSH
57501: LD_VAR 0 58
57505: PUSH
57506: EMPTY
57507: LIST
57508: LIST
57509: LIST
57510: LIST
57511: LIST
57512: LIST
57513: PUSH
57514: LD_VAR 0 4
57518: PUSH
57519: LD_INT 1
57521: PLUS
57522: ARRAY
57523: ST_TO_ADDR
57524: GO 57633
57526: LD_INT 31
57528: DOUBLE
57529: EQUAL
57530: IFTRUE 57576
57532: LD_INT 32
57534: DOUBLE
57535: EQUAL
57536: IFTRUE 57576
57538: LD_INT 33
57540: DOUBLE
57541: EQUAL
57542: IFTRUE 57576
57544: LD_INT 27
57546: DOUBLE
57547: EQUAL
57548: IFTRUE 57576
57550: LD_INT 26
57552: DOUBLE
57553: EQUAL
57554: IFTRUE 57576
57556: LD_INT 28
57558: DOUBLE
57559: EQUAL
57560: IFTRUE 57576
57562: LD_INT 29
57564: DOUBLE
57565: EQUAL
57566: IFTRUE 57576
57568: LD_INT 30
57570: DOUBLE
57571: EQUAL
57572: IFTRUE 57576
57574: GO 57632
57576: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
57577: LD_ADDR_VAR 0 9
57581: PUSH
57582: LD_VAR 0 59
57586: PUSH
57587: LD_VAR 0 60
57591: PUSH
57592: LD_VAR 0 61
57596: PUSH
57597: LD_VAR 0 62
57601: PUSH
57602: LD_VAR 0 63
57606: PUSH
57607: LD_VAR 0 64
57611: PUSH
57612: EMPTY
57613: LIST
57614: LIST
57615: LIST
57616: LIST
57617: LIST
57618: LIST
57619: PUSH
57620: LD_VAR 0 4
57624: PUSH
57625: LD_INT 1
57627: PLUS
57628: ARRAY
57629: ST_TO_ADDR
57630: GO 57633
57632: POP
// temp_list2 = [ ] ;
57633: LD_ADDR_VAR 0 10
57637: PUSH
57638: EMPTY
57639: ST_TO_ADDR
// for i in temp_list do
57640: LD_ADDR_VAR 0 8
57644: PUSH
57645: LD_VAR 0 9
57649: PUSH
57650: FOR_IN
57651: IFFALSE 57703
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
57653: LD_ADDR_VAR 0 10
57657: PUSH
57658: LD_VAR 0 10
57662: PUSH
57663: LD_VAR 0 8
57667: PUSH
57668: LD_INT 1
57670: ARRAY
57671: PUSH
57672: LD_VAR 0 2
57676: PLUS
57677: PUSH
57678: LD_VAR 0 8
57682: PUSH
57683: LD_INT 2
57685: ARRAY
57686: PUSH
57687: LD_VAR 0 3
57691: PLUS
57692: PUSH
57693: EMPTY
57694: LIST
57695: LIST
57696: PUSH
57697: EMPTY
57698: LIST
57699: ADD
57700: ST_TO_ADDR
57701: GO 57650
57703: POP
57704: POP
// result = temp_list2 ;
57705: LD_ADDR_VAR 0 7
57709: PUSH
57710: LD_VAR 0 10
57714: ST_TO_ADDR
// end ;
57715: LD_VAR 0 7
57719: RET
// export function EnemyInRange ( unit , dist ) ; begin
57720: LD_INT 0
57722: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
57723: LD_ADDR_VAR 0 3
57727: PUSH
57728: LD_VAR 0 1
57732: PPUSH
57733: CALL_OW 255
57737: PPUSH
57738: LD_VAR 0 1
57742: PPUSH
57743: CALL_OW 250
57747: PPUSH
57748: LD_VAR 0 1
57752: PPUSH
57753: CALL_OW 251
57757: PPUSH
57758: LD_VAR 0 2
57762: PPUSH
57763: CALL 31116 0 4
57767: PUSH
57768: LD_INT 4
57770: ARRAY
57771: ST_TO_ADDR
// end ;
57772: LD_VAR 0 3
57776: RET
// export function PlayerSeeMe ( unit ) ; begin
57777: LD_INT 0
57779: PPUSH
// result := See ( your_side , unit ) ;
57780: LD_ADDR_VAR 0 2
57784: PUSH
57785: LD_OWVAR 2
57789: PPUSH
57790: LD_VAR 0 1
57794: PPUSH
57795: CALL_OW 292
57799: ST_TO_ADDR
// end ;
57800: LD_VAR 0 2
57804: RET
// export function ReverseDir ( unit ) ; begin
57805: LD_INT 0
57807: PPUSH
// if not unit then
57808: LD_VAR 0 1
57812: NOT
57813: IFFALSE 57817
// exit ;
57815: GO 57840
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
57817: LD_ADDR_VAR 0 2
57821: PUSH
57822: LD_VAR 0 1
57826: PPUSH
57827: CALL_OW 254
57831: PUSH
57832: LD_INT 3
57834: PLUS
57835: PUSH
57836: LD_INT 6
57838: MOD
57839: ST_TO_ADDR
// end ;
57840: LD_VAR 0 2
57844: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
57845: LD_INT 0
57847: PPUSH
57848: PPUSH
57849: PPUSH
57850: PPUSH
57851: PPUSH
// if not hexes then
57852: LD_VAR 0 2
57856: NOT
57857: IFFALSE 57861
// exit ;
57859: GO 58009
// dist := 9999 ;
57861: LD_ADDR_VAR 0 5
57865: PUSH
57866: LD_INT 9999
57868: ST_TO_ADDR
// for i = 1 to hexes do
57869: LD_ADDR_VAR 0 4
57873: PUSH
57874: DOUBLE
57875: LD_INT 1
57877: DEC
57878: ST_TO_ADDR
57879: LD_VAR 0 2
57883: PUSH
57884: FOR_TO
57885: IFFALSE 57997
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
57887: LD_VAR 0 1
57891: PPUSH
57892: LD_VAR 0 2
57896: PUSH
57897: LD_VAR 0 4
57901: ARRAY
57902: PUSH
57903: LD_INT 1
57905: ARRAY
57906: PPUSH
57907: LD_VAR 0 2
57911: PUSH
57912: LD_VAR 0 4
57916: ARRAY
57917: PUSH
57918: LD_INT 2
57920: ARRAY
57921: PPUSH
57922: CALL_OW 297
57926: PUSH
57927: LD_VAR 0 5
57931: LESS
57932: IFFALSE 57995
// begin hex := hexes [ i ] ;
57934: LD_ADDR_VAR 0 7
57938: PUSH
57939: LD_VAR 0 2
57943: PUSH
57944: LD_VAR 0 4
57948: ARRAY
57949: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
57950: LD_ADDR_VAR 0 5
57954: PUSH
57955: LD_VAR 0 1
57959: PPUSH
57960: LD_VAR 0 2
57964: PUSH
57965: LD_VAR 0 4
57969: ARRAY
57970: PUSH
57971: LD_INT 1
57973: ARRAY
57974: PPUSH
57975: LD_VAR 0 2
57979: PUSH
57980: LD_VAR 0 4
57984: ARRAY
57985: PUSH
57986: LD_INT 2
57988: ARRAY
57989: PPUSH
57990: CALL_OW 297
57994: ST_TO_ADDR
// end ; end ;
57995: GO 57884
57997: POP
57998: POP
// result := hex ;
57999: LD_ADDR_VAR 0 3
58003: PUSH
58004: LD_VAR 0 7
58008: ST_TO_ADDR
// end ;
58009: LD_VAR 0 3
58013: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
58014: LD_INT 0
58016: PPUSH
58017: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
58018: LD_VAR 0 1
58022: NOT
58023: PUSH
58024: LD_VAR 0 1
58028: PUSH
58029: LD_INT 21
58031: PUSH
58032: LD_INT 2
58034: PUSH
58035: EMPTY
58036: LIST
58037: LIST
58038: PUSH
58039: LD_INT 23
58041: PUSH
58042: LD_INT 2
58044: PUSH
58045: EMPTY
58046: LIST
58047: LIST
58048: PUSH
58049: EMPTY
58050: LIST
58051: LIST
58052: PPUSH
58053: CALL_OW 69
58057: IN
58058: NOT
58059: OR
58060: IFFALSE 58064
// exit ;
58062: GO 58111
// for i = 1 to 3 do
58064: LD_ADDR_VAR 0 3
58068: PUSH
58069: DOUBLE
58070: LD_INT 1
58072: DEC
58073: ST_TO_ADDR
58074: LD_INT 3
58076: PUSH
58077: FOR_TO
58078: IFFALSE 58109
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
58080: LD_VAR 0 1
58084: PPUSH
58085: CALL_OW 250
58089: PPUSH
58090: LD_VAR 0 1
58094: PPUSH
58095: CALL_OW 251
58099: PPUSH
58100: LD_INT 1
58102: PPUSH
58103: CALL_OW 453
58107: GO 58077
58109: POP
58110: POP
// end ;
58111: LD_VAR 0 2
58115: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
58116: LD_INT 0
58118: PPUSH
58119: PPUSH
58120: PPUSH
58121: PPUSH
58122: PPUSH
58123: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
58124: LD_VAR 0 1
58128: NOT
58129: PUSH
58130: LD_VAR 0 2
58134: NOT
58135: OR
58136: PUSH
58137: LD_VAR 0 1
58141: PPUSH
58142: CALL_OW 314
58146: OR
58147: IFFALSE 58151
// exit ;
58149: GO 58592
// x := GetX ( enemy_unit ) ;
58151: LD_ADDR_VAR 0 7
58155: PUSH
58156: LD_VAR 0 2
58160: PPUSH
58161: CALL_OW 250
58165: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
58166: LD_ADDR_VAR 0 8
58170: PUSH
58171: LD_VAR 0 2
58175: PPUSH
58176: CALL_OW 251
58180: ST_TO_ADDR
// if not x or not y then
58181: LD_VAR 0 7
58185: NOT
58186: PUSH
58187: LD_VAR 0 8
58191: NOT
58192: OR
58193: IFFALSE 58197
// exit ;
58195: GO 58592
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
58197: LD_ADDR_VAR 0 6
58201: PUSH
58202: LD_VAR 0 7
58206: PPUSH
58207: LD_INT 0
58209: PPUSH
58210: LD_INT 4
58212: PPUSH
58213: CALL_OW 272
58217: PUSH
58218: LD_VAR 0 8
58222: PPUSH
58223: LD_INT 0
58225: PPUSH
58226: LD_INT 4
58228: PPUSH
58229: CALL_OW 273
58233: PUSH
58234: EMPTY
58235: LIST
58236: LIST
58237: PUSH
58238: LD_VAR 0 7
58242: PPUSH
58243: LD_INT 1
58245: PPUSH
58246: LD_INT 4
58248: PPUSH
58249: CALL_OW 272
58253: PUSH
58254: LD_VAR 0 8
58258: PPUSH
58259: LD_INT 1
58261: PPUSH
58262: LD_INT 4
58264: PPUSH
58265: CALL_OW 273
58269: PUSH
58270: EMPTY
58271: LIST
58272: LIST
58273: PUSH
58274: LD_VAR 0 7
58278: PPUSH
58279: LD_INT 2
58281: PPUSH
58282: LD_INT 4
58284: PPUSH
58285: CALL_OW 272
58289: PUSH
58290: LD_VAR 0 8
58294: PPUSH
58295: LD_INT 2
58297: PPUSH
58298: LD_INT 4
58300: PPUSH
58301: CALL_OW 273
58305: PUSH
58306: EMPTY
58307: LIST
58308: LIST
58309: PUSH
58310: LD_VAR 0 7
58314: PPUSH
58315: LD_INT 3
58317: PPUSH
58318: LD_INT 4
58320: PPUSH
58321: CALL_OW 272
58325: PUSH
58326: LD_VAR 0 8
58330: PPUSH
58331: LD_INT 3
58333: PPUSH
58334: LD_INT 4
58336: PPUSH
58337: CALL_OW 273
58341: PUSH
58342: EMPTY
58343: LIST
58344: LIST
58345: PUSH
58346: LD_VAR 0 7
58350: PPUSH
58351: LD_INT 4
58353: PPUSH
58354: LD_INT 4
58356: PPUSH
58357: CALL_OW 272
58361: PUSH
58362: LD_VAR 0 8
58366: PPUSH
58367: LD_INT 4
58369: PPUSH
58370: LD_INT 4
58372: PPUSH
58373: CALL_OW 273
58377: PUSH
58378: EMPTY
58379: LIST
58380: LIST
58381: PUSH
58382: LD_VAR 0 7
58386: PPUSH
58387: LD_INT 5
58389: PPUSH
58390: LD_INT 4
58392: PPUSH
58393: CALL_OW 272
58397: PUSH
58398: LD_VAR 0 8
58402: PPUSH
58403: LD_INT 5
58405: PPUSH
58406: LD_INT 4
58408: PPUSH
58409: CALL_OW 273
58413: PUSH
58414: EMPTY
58415: LIST
58416: LIST
58417: PUSH
58418: EMPTY
58419: LIST
58420: LIST
58421: LIST
58422: LIST
58423: LIST
58424: LIST
58425: ST_TO_ADDR
// for i = tmp downto 1 do
58426: LD_ADDR_VAR 0 4
58430: PUSH
58431: DOUBLE
58432: LD_VAR 0 6
58436: INC
58437: ST_TO_ADDR
58438: LD_INT 1
58440: PUSH
58441: FOR_DOWNTO
58442: IFFALSE 58543
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
58444: LD_VAR 0 6
58448: PUSH
58449: LD_VAR 0 4
58453: ARRAY
58454: PUSH
58455: LD_INT 1
58457: ARRAY
58458: PPUSH
58459: LD_VAR 0 6
58463: PUSH
58464: LD_VAR 0 4
58468: ARRAY
58469: PUSH
58470: LD_INT 2
58472: ARRAY
58473: PPUSH
58474: CALL_OW 488
58478: NOT
58479: PUSH
58480: LD_VAR 0 6
58484: PUSH
58485: LD_VAR 0 4
58489: ARRAY
58490: PUSH
58491: LD_INT 1
58493: ARRAY
58494: PPUSH
58495: LD_VAR 0 6
58499: PUSH
58500: LD_VAR 0 4
58504: ARRAY
58505: PUSH
58506: LD_INT 2
58508: ARRAY
58509: PPUSH
58510: CALL_OW 428
58514: PUSH
58515: LD_INT 0
58517: NONEQUAL
58518: OR
58519: IFFALSE 58541
// tmp := Delete ( tmp , i ) ;
58521: LD_ADDR_VAR 0 6
58525: PUSH
58526: LD_VAR 0 6
58530: PPUSH
58531: LD_VAR 0 4
58535: PPUSH
58536: CALL_OW 3
58540: ST_TO_ADDR
58541: GO 58441
58543: POP
58544: POP
// j := GetClosestHex ( unit , tmp ) ;
58545: LD_ADDR_VAR 0 5
58549: PUSH
58550: LD_VAR 0 1
58554: PPUSH
58555: LD_VAR 0 6
58559: PPUSH
58560: CALL 57845 0 2
58564: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
58565: LD_VAR 0 1
58569: PPUSH
58570: LD_VAR 0 5
58574: PUSH
58575: LD_INT 1
58577: ARRAY
58578: PPUSH
58579: LD_VAR 0 5
58583: PUSH
58584: LD_INT 2
58586: ARRAY
58587: PPUSH
58588: CALL_OW 111
// end ;
58592: LD_VAR 0 3
58596: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
58597: LD_INT 0
58599: PPUSH
58600: PPUSH
58601: PPUSH
// uc_side = 0 ;
58602: LD_ADDR_OWVAR 20
58606: PUSH
58607: LD_INT 0
58609: ST_TO_ADDR
// uc_nation = 0 ;
58610: LD_ADDR_OWVAR 21
58614: PUSH
58615: LD_INT 0
58617: ST_TO_ADDR
// InitHc_All ( ) ;
58618: CALL_OW 584
// InitVc ;
58622: CALL_OW 20
// if mastodonts then
58626: LD_VAR 0 6
58630: IFFALSE 58697
// for i = 1 to mastodonts do
58632: LD_ADDR_VAR 0 11
58636: PUSH
58637: DOUBLE
58638: LD_INT 1
58640: DEC
58641: ST_TO_ADDR
58642: LD_VAR 0 6
58646: PUSH
58647: FOR_TO
58648: IFFALSE 58695
// begin vc_chassis := 31 ;
58650: LD_ADDR_OWVAR 37
58654: PUSH
58655: LD_INT 31
58657: ST_TO_ADDR
// vc_control := control_rider ;
58658: LD_ADDR_OWVAR 38
58662: PUSH
58663: LD_INT 4
58665: ST_TO_ADDR
// animal := CreateVehicle ;
58666: LD_ADDR_VAR 0 12
58670: PUSH
58671: CALL_OW 45
58675: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58676: LD_VAR 0 12
58680: PPUSH
58681: LD_VAR 0 8
58685: PPUSH
58686: LD_INT 0
58688: PPUSH
58689: CALL 60885 0 3
// end ;
58693: GO 58647
58695: POP
58696: POP
// if horses then
58697: LD_VAR 0 5
58701: IFFALSE 58768
// for i = 1 to horses do
58703: LD_ADDR_VAR 0 11
58707: PUSH
58708: DOUBLE
58709: LD_INT 1
58711: DEC
58712: ST_TO_ADDR
58713: LD_VAR 0 5
58717: PUSH
58718: FOR_TO
58719: IFFALSE 58766
// begin hc_class := 21 ;
58721: LD_ADDR_OWVAR 28
58725: PUSH
58726: LD_INT 21
58728: ST_TO_ADDR
// hc_gallery :=  ;
58729: LD_ADDR_OWVAR 33
58733: PUSH
58734: LD_STRING 
58736: ST_TO_ADDR
// animal := CreateHuman ;
58737: LD_ADDR_VAR 0 12
58741: PUSH
58742: CALL_OW 44
58746: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58747: LD_VAR 0 12
58751: PPUSH
58752: LD_VAR 0 8
58756: PPUSH
58757: LD_INT 0
58759: PPUSH
58760: CALL 60885 0 3
// end ;
58764: GO 58718
58766: POP
58767: POP
// if birds then
58768: LD_VAR 0 1
58772: IFFALSE 58839
// for i = 1 to birds do
58774: LD_ADDR_VAR 0 11
58778: PUSH
58779: DOUBLE
58780: LD_INT 1
58782: DEC
58783: ST_TO_ADDR
58784: LD_VAR 0 1
58788: PUSH
58789: FOR_TO
58790: IFFALSE 58837
// begin hc_class = 18 ;
58792: LD_ADDR_OWVAR 28
58796: PUSH
58797: LD_INT 18
58799: ST_TO_ADDR
// hc_gallery =  ;
58800: LD_ADDR_OWVAR 33
58804: PUSH
58805: LD_STRING 
58807: ST_TO_ADDR
// animal := CreateHuman ;
58808: LD_ADDR_VAR 0 12
58812: PUSH
58813: CALL_OW 44
58817: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58818: LD_VAR 0 12
58822: PPUSH
58823: LD_VAR 0 8
58827: PPUSH
58828: LD_INT 0
58830: PPUSH
58831: CALL 60885 0 3
// end ;
58835: GO 58789
58837: POP
58838: POP
// if tigers then
58839: LD_VAR 0 2
58843: IFFALSE 58927
// for i = 1 to tigers do
58845: LD_ADDR_VAR 0 11
58849: PUSH
58850: DOUBLE
58851: LD_INT 1
58853: DEC
58854: ST_TO_ADDR
58855: LD_VAR 0 2
58859: PUSH
58860: FOR_TO
58861: IFFALSE 58925
// begin hc_class = class_tiger ;
58863: LD_ADDR_OWVAR 28
58867: PUSH
58868: LD_INT 14
58870: ST_TO_ADDR
// hc_gallery =  ;
58871: LD_ADDR_OWVAR 33
58875: PUSH
58876: LD_STRING 
58878: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
58879: LD_ADDR_OWVAR 35
58883: PUSH
58884: LD_INT 7
58886: NEG
58887: PPUSH
58888: LD_INT 7
58890: PPUSH
58891: CALL_OW 12
58895: ST_TO_ADDR
// animal := CreateHuman ;
58896: LD_ADDR_VAR 0 12
58900: PUSH
58901: CALL_OW 44
58905: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58906: LD_VAR 0 12
58910: PPUSH
58911: LD_VAR 0 8
58915: PPUSH
58916: LD_INT 0
58918: PPUSH
58919: CALL 60885 0 3
// end ;
58923: GO 58860
58925: POP
58926: POP
// if apemans then
58927: LD_VAR 0 3
58931: IFFALSE 59054
// for i = 1 to apemans do
58933: LD_ADDR_VAR 0 11
58937: PUSH
58938: DOUBLE
58939: LD_INT 1
58941: DEC
58942: ST_TO_ADDR
58943: LD_VAR 0 3
58947: PUSH
58948: FOR_TO
58949: IFFALSE 59052
// begin hc_class = class_apeman ;
58951: LD_ADDR_OWVAR 28
58955: PUSH
58956: LD_INT 12
58958: ST_TO_ADDR
// hc_gallery =  ;
58959: LD_ADDR_OWVAR 33
58963: PUSH
58964: LD_STRING 
58966: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
58967: LD_ADDR_OWVAR 35
58971: PUSH
58972: LD_INT 2
58974: NEG
58975: PPUSH
58976: LD_INT 2
58978: PPUSH
58979: CALL_OW 12
58983: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
58984: LD_ADDR_OWVAR 31
58988: PUSH
58989: LD_INT 1
58991: PPUSH
58992: LD_INT 3
58994: PPUSH
58995: CALL_OW 12
58999: PUSH
59000: LD_INT 1
59002: PPUSH
59003: LD_INT 3
59005: PPUSH
59006: CALL_OW 12
59010: PUSH
59011: LD_INT 0
59013: PUSH
59014: LD_INT 0
59016: PUSH
59017: EMPTY
59018: LIST
59019: LIST
59020: LIST
59021: LIST
59022: ST_TO_ADDR
// animal := CreateHuman ;
59023: LD_ADDR_VAR 0 12
59027: PUSH
59028: CALL_OW 44
59032: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59033: LD_VAR 0 12
59037: PPUSH
59038: LD_VAR 0 8
59042: PPUSH
59043: LD_INT 0
59045: PPUSH
59046: CALL 60885 0 3
// end ;
59050: GO 58948
59052: POP
59053: POP
// if enchidnas then
59054: LD_VAR 0 4
59058: IFFALSE 59125
// for i = 1 to enchidnas do
59060: LD_ADDR_VAR 0 11
59064: PUSH
59065: DOUBLE
59066: LD_INT 1
59068: DEC
59069: ST_TO_ADDR
59070: LD_VAR 0 4
59074: PUSH
59075: FOR_TO
59076: IFFALSE 59123
// begin hc_class = 13 ;
59078: LD_ADDR_OWVAR 28
59082: PUSH
59083: LD_INT 13
59085: ST_TO_ADDR
// hc_gallery =  ;
59086: LD_ADDR_OWVAR 33
59090: PUSH
59091: LD_STRING 
59093: ST_TO_ADDR
// animal := CreateHuman ;
59094: LD_ADDR_VAR 0 12
59098: PUSH
59099: CALL_OW 44
59103: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59104: LD_VAR 0 12
59108: PPUSH
59109: LD_VAR 0 8
59113: PPUSH
59114: LD_INT 0
59116: PPUSH
59117: CALL 60885 0 3
// end ;
59121: GO 59075
59123: POP
59124: POP
// if fishes then
59125: LD_VAR 0 7
59129: IFFALSE 59196
// for i = 1 to fishes do
59131: LD_ADDR_VAR 0 11
59135: PUSH
59136: DOUBLE
59137: LD_INT 1
59139: DEC
59140: ST_TO_ADDR
59141: LD_VAR 0 7
59145: PUSH
59146: FOR_TO
59147: IFFALSE 59194
// begin hc_class = 20 ;
59149: LD_ADDR_OWVAR 28
59153: PUSH
59154: LD_INT 20
59156: ST_TO_ADDR
// hc_gallery =  ;
59157: LD_ADDR_OWVAR 33
59161: PUSH
59162: LD_STRING 
59164: ST_TO_ADDR
// animal := CreateHuman ;
59165: LD_ADDR_VAR 0 12
59169: PUSH
59170: CALL_OW 44
59174: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
59175: LD_VAR 0 12
59179: PPUSH
59180: LD_VAR 0 9
59184: PPUSH
59185: LD_INT 0
59187: PPUSH
59188: CALL 60885 0 3
// end ;
59192: GO 59146
59194: POP
59195: POP
// end ;
59196: LD_VAR 0 10
59200: RET
// export function WantHeal ( sci , unit ) ; begin
59201: LD_INT 0
59203: PPUSH
// if GetTaskList ( sci ) > 0 then
59204: LD_VAR 0 1
59208: PPUSH
59209: CALL_OW 437
59213: PUSH
59214: LD_INT 0
59216: GREATER
59217: IFFALSE 59287
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
59219: LD_VAR 0 1
59223: PPUSH
59224: CALL_OW 437
59228: PUSH
59229: LD_INT 1
59231: ARRAY
59232: PUSH
59233: LD_INT 1
59235: ARRAY
59236: PUSH
59237: LD_STRING l
59239: EQUAL
59240: PUSH
59241: LD_VAR 0 1
59245: PPUSH
59246: CALL_OW 437
59250: PUSH
59251: LD_INT 1
59253: ARRAY
59254: PUSH
59255: LD_INT 4
59257: ARRAY
59258: PUSH
59259: LD_VAR 0 2
59263: EQUAL
59264: AND
59265: IFFALSE 59277
// result := true else
59267: LD_ADDR_VAR 0 3
59271: PUSH
59272: LD_INT 1
59274: ST_TO_ADDR
59275: GO 59285
// result := false ;
59277: LD_ADDR_VAR 0 3
59281: PUSH
59282: LD_INT 0
59284: ST_TO_ADDR
// end else
59285: GO 59295
// result := false ;
59287: LD_ADDR_VAR 0 3
59291: PUSH
59292: LD_INT 0
59294: ST_TO_ADDR
// end ;
59295: LD_VAR 0 3
59299: RET
// export function HealTarget ( sci ) ; begin
59300: LD_INT 0
59302: PPUSH
// if not sci then
59303: LD_VAR 0 1
59307: NOT
59308: IFFALSE 59312
// exit ;
59310: GO 59377
// result := 0 ;
59312: LD_ADDR_VAR 0 2
59316: PUSH
59317: LD_INT 0
59319: ST_TO_ADDR
// if GetTaskList ( sci ) then
59320: LD_VAR 0 1
59324: PPUSH
59325: CALL_OW 437
59329: IFFALSE 59377
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
59331: LD_VAR 0 1
59335: PPUSH
59336: CALL_OW 437
59340: PUSH
59341: LD_INT 1
59343: ARRAY
59344: PUSH
59345: LD_INT 1
59347: ARRAY
59348: PUSH
59349: LD_STRING l
59351: EQUAL
59352: IFFALSE 59377
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
59354: LD_ADDR_VAR 0 2
59358: PUSH
59359: LD_VAR 0 1
59363: PPUSH
59364: CALL_OW 437
59368: PUSH
59369: LD_INT 1
59371: ARRAY
59372: PUSH
59373: LD_INT 4
59375: ARRAY
59376: ST_TO_ADDR
// end ;
59377: LD_VAR 0 2
59381: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
59382: LD_INT 0
59384: PPUSH
59385: PPUSH
59386: PPUSH
59387: PPUSH
// if not base_units then
59388: LD_VAR 0 1
59392: NOT
59393: IFFALSE 59397
// exit ;
59395: GO 59484
// result := false ;
59397: LD_ADDR_VAR 0 2
59401: PUSH
59402: LD_INT 0
59404: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
59405: LD_ADDR_VAR 0 5
59409: PUSH
59410: LD_VAR 0 1
59414: PPUSH
59415: LD_INT 21
59417: PUSH
59418: LD_INT 3
59420: PUSH
59421: EMPTY
59422: LIST
59423: LIST
59424: PPUSH
59425: CALL_OW 72
59429: ST_TO_ADDR
// if not tmp then
59430: LD_VAR 0 5
59434: NOT
59435: IFFALSE 59439
// exit ;
59437: GO 59484
// for i in tmp do
59439: LD_ADDR_VAR 0 3
59443: PUSH
59444: LD_VAR 0 5
59448: PUSH
59449: FOR_IN
59450: IFFALSE 59482
// begin result := EnemyInRange ( i , 22 ) ;
59452: LD_ADDR_VAR 0 2
59456: PUSH
59457: LD_VAR 0 3
59461: PPUSH
59462: LD_INT 22
59464: PPUSH
59465: CALL 57720 0 2
59469: ST_TO_ADDR
// if result then
59470: LD_VAR 0 2
59474: IFFALSE 59480
// exit ;
59476: POP
59477: POP
59478: GO 59484
// end ;
59480: GO 59449
59482: POP
59483: POP
// end ;
59484: LD_VAR 0 2
59488: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
59489: LD_INT 0
59491: PPUSH
59492: PPUSH
// if not units then
59493: LD_VAR 0 1
59497: NOT
59498: IFFALSE 59502
// exit ;
59500: GO 59572
// result := [ ] ;
59502: LD_ADDR_VAR 0 3
59506: PUSH
59507: EMPTY
59508: ST_TO_ADDR
// for i in units do
59509: LD_ADDR_VAR 0 4
59513: PUSH
59514: LD_VAR 0 1
59518: PUSH
59519: FOR_IN
59520: IFFALSE 59570
// if GetTag ( i ) = tag then
59522: LD_VAR 0 4
59526: PPUSH
59527: CALL_OW 110
59531: PUSH
59532: LD_VAR 0 2
59536: EQUAL
59537: IFFALSE 59568
// result := Insert ( result , result + 1 , i ) ;
59539: LD_ADDR_VAR 0 3
59543: PUSH
59544: LD_VAR 0 3
59548: PPUSH
59549: LD_VAR 0 3
59553: PUSH
59554: LD_INT 1
59556: PLUS
59557: PPUSH
59558: LD_VAR 0 4
59562: PPUSH
59563: CALL_OW 2
59567: ST_TO_ADDR
59568: GO 59519
59570: POP
59571: POP
// end ;
59572: LD_VAR 0 3
59576: RET
// export function IsDriver ( un ) ; begin
59577: LD_INT 0
59579: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
59580: LD_ADDR_VAR 0 2
59584: PUSH
59585: LD_VAR 0 1
59589: PUSH
59590: LD_INT 55
59592: PUSH
59593: EMPTY
59594: LIST
59595: PPUSH
59596: CALL_OW 69
59600: IN
59601: ST_TO_ADDR
// end ;
59602: LD_VAR 0 2
59606: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
59607: LD_INT 0
59609: PPUSH
59610: PPUSH
// list := [ ] ;
59611: LD_ADDR_VAR 0 5
59615: PUSH
59616: EMPTY
59617: ST_TO_ADDR
// case d of 0 :
59618: LD_VAR 0 3
59622: PUSH
59623: LD_INT 0
59625: DOUBLE
59626: EQUAL
59627: IFTRUE 59631
59629: GO 59764
59631: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
59632: LD_ADDR_VAR 0 5
59636: PUSH
59637: LD_VAR 0 1
59641: PUSH
59642: LD_INT 4
59644: MINUS
59645: PUSH
59646: LD_VAR 0 2
59650: PUSH
59651: LD_INT 4
59653: MINUS
59654: PUSH
59655: LD_INT 2
59657: PUSH
59658: EMPTY
59659: LIST
59660: LIST
59661: LIST
59662: PUSH
59663: LD_VAR 0 1
59667: PUSH
59668: LD_INT 3
59670: MINUS
59671: PUSH
59672: LD_VAR 0 2
59676: PUSH
59677: LD_INT 1
59679: PUSH
59680: EMPTY
59681: LIST
59682: LIST
59683: LIST
59684: PUSH
59685: LD_VAR 0 1
59689: PUSH
59690: LD_INT 4
59692: PLUS
59693: PUSH
59694: LD_VAR 0 2
59698: PUSH
59699: LD_INT 4
59701: PUSH
59702: EMPTY
59703: LIST
59704: LIST
59705: LIST
59706: PUSH
59707: LD_VAR 0 1
59711: PUSH
59712: LD_INT 3
59714: PLUS
59715: PUSH
59716: LD_VAR 0 2
59720: PUSH
59721: LD_INT 3
59723: PLUS
59724: PUSH
59725: LD_INT 5
59727: PUSH
59728: EMPTY
59729: LIST
59730: LIST
59731: LIST
59732: PUSH
59733: LD_VAR 0 1
59737: PUSH
59738: LD_VAR 0 2
59742: PUSH
59743: LD_INT 4
59745: PLUS
59746: PUSH
59747: LD_INT 0
59749: PUSH
59750: EMPTY
59751: LIST
59752: LIST
59753: LIST
59754: PUSH
59755: EMPTY
59756: LIST
59757: LIST
59758: LIST
59759: LIST
59760: LIST
59761: ST_TO_ADDR
// end ; 1 :
59762: GO 60462
59764: LD_INT 1
59766: DOUBLE
59767: EQUAL
59768: IFTRUE 59772
59770: GO 59905
59772: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
59773: LD_ADDR_VAR 0 5
59777: PUSH
59778: LD_VAR 0 1
59782: PUSH
59783: LD_VAR 0 2
59787: PUSH
59788: LD_INT 4
59790: MINUS
59791: PUSH
59792: LD_INT 3
59794: PUSH
59795: EMPTY
59796: LIST
59797: LIST
59798: LIST
59799: PUSH
59800: LD_VAR 0 1
59804: PUSH
59805: LD_INT 3
59807: MINUS
59808: PUSH
59809: LD_VAR 0 2
59813: PUSH
59814: LD_INT 3
59816: MINUS
59817: PUSH
59818: LD_INT 2
59820: PUSH
59821: EMPTY
59822: LIST
59823: LIST
59824: LIST
59825: PUSH
59826: LD_VAR 0 1
59830: PUSH
59831: LD_INT 4
59833: MINUS
59834: PUSH
59835: LD_VAR 0 2
59839: PUSH
59840: LD_INT 1
59842: PUSH
59843: EMPTY
59844: LIST
59845: LIST
59846: LIST
59847: PUSH
59848: LD_VAR 0 1
59852: PUSH
59853: LD_VAR 0 2
59857: PUSH
59858: LD_INT 3
59860: PLUS
59861: PUSH
59862: LD_INT 0
59864: PUSH
59865: EMPTY
59866: LIST
59867: LIST
59868: LIST
59869: PUSH
59870: LD_VAR 0 1
59874: PUSH
59875: LD_INT 4
59877: PLUS
59878: PUSH
59879: LD_VAR 0 2
59883: PUSH
59884: LD_INT 4
59886: PLUS
59887: PUSH
59888: LD_INT 5
59890: PUSH
59891: EMPTY
59892: LIST
59893: LIST
59894: LIST
59895: PUSH
59896: EMPTY
59897: LIST
59898: LIST
59899: LIST
59900: LIST
59901: LIST
59902: ST_TO_ADDR
// end ; 2 :
59903: GO 60462
59905: LD_INT 2
59907: DOUBLE
59908: EQUAL
59909: IFTRUE 59913
59911: GO 60042
59913: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
59914: LD_ADDR_VAR 0 5
59918: PUSH
59919: LD_VAR 0 1
59923: PUSH
59924: LD_VAR 0 2
59928: PUSH
59929: LD_INT 3
59931: MINUS
59932: PUSH
59933: LD_INT 3
59935: PUSH
59936: EMPTY
59937: LIST
59938: LIST
59939: LIST
59940: PUSH
59941: LD_VAR 0 1
59945: PUSH
59946: LD_INT 4
59948: PLUS
59949: PUSH
59950: LD_VAR 0 2
59954: PUSH
59955: LD_INT 4
59957: PUSH
59958: EMPTY
59959: LIST
59960: LIST
59961: LIST
59962: PUSH
59963: LD_VAR 0 1
59967: PUSH
59968: LD_VAR 0 2
59972: PUSH
59973: LD_INT 4
59975: PLUS
59976: PUSH
59977: LD_INT 0
59979: PUSH
59980: EMPTY
59981: LIST
59982: LIST
59983: LIST
59984: PUSH
59985: LD_VAR 0 1
59989: PUSH
59990: LD_INT 3
59992: MINUS
59993: PUSH
59994: LD_VAR 0 2
59998: PUSH
59999: LD_INT 1
60001: PUSH
60002: EMPTY
60003: LIST
60004: LIST
60005: LIST
60006: PUSH
60007: LD_VAR 0 1
60011: PUSH
60012: LD_INT 4
60014: MINUS
60015: PUSH
60016: LD_VAR 0 2
60020: PUSH
60021: LD_INT 4
60023: MINUS
60024: PUSH
60025: LD_INT 2
60027: PUSH
60028: EMPTY
60029: LIST
60030: LIST
60031: LIST
60032: PUSH
60033: EMPTY
60034: LIST
60035: LIST
60036: LIST
60037: LIST
60038: LIST
60039: ST_TO_ADDR
// end ; 3 :
60040: GO 60462
60042: LD_INT 3
60044: DOUBLE
60045: EQUAL
60046: IFTRUE 60050
60048: GO 60183
60050: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
60051: LD_ADDR_VAR 0 5
60055: PUSH
60056: LD_VAR 0 1
60060: PUSH
60061: LD_INT 3
60063: PLUS
60064: PUSH
60065: LD_VAR 0 2
60069: PUSH
60070: LD_INT 4
60072: PUSH
60073: EMPTY
60074: LIST
60075: LIST
60076: LIST
60077: PUSH
60078: LD_VAR 0 1
60082: PUSH
60083: LD_INT 4
60085: PLUS
60086: PUSH
60087: LD_VAR 0 2
60091: PUSH
60092: LD_INT 4
60094: PLUS
60095: PUSH
60096: LD_INT 5
60098: PUSH
60099: EMPTY
60100: LIST
60101: LIST
60102: LIST
60103: PUSH
60104: LD_VAR 0 1
60108: PUSH
60109: LD_INT 4
60111: MINUS
60112: PUSH
60113: LD_VAR 0 2
60117: PUSH
60118: LD_INT 1
60120: PUSH
60121: EMPTY
60122: LIST
60123: LIST
60124: LIST
60125: PUSH
60126: LD_VAR 0 1
60130: PUSH
60131: LD_VAR 0 2
60135: PUSH
60136: LD_INT 4
60138: MINUS
60139: PUSH
60140: LD_INT 3
60142: PUSH
60143: EMPTY
60144: LIST
60145: LIST
60146: LIST
60147: PUSH
60148: LD_VAR 0 1
60152: PUSH
60153: LD_INT 3
60155: MINUS
60156: PUSH
60157: LD_VAR 0 2
60161: PUSH
60162: LD_INT 3
60164: MINUS
60165: PUSH
60166: LD_INT 2
60168: PUSH
60169: EMPTY
60170: LIST
60171: LIST
60172: LIST
60173: PUSH
60174: EMPTY
60175: LIST
60176: LIST
60177: LIST
60178: LIST
60179: LIST
60180: ST_TO_ADDR
// end ; 4 :
60181: GO 60462
60183: LD_INT 4
60185: DOUBLE
60186: EQUAL
60187: IFTRUE 60191
60189: GO 60324
60191: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
60192: LD_ADDR_VAR 0 5
60196: PUSH
60197: LD_VAR 0 1
60201: PUSH
60202: LD_VAR 0 2
60206: PUSH
60207: LD_INT 4
60209: PLUS
60210: PUSH
60211: LD_INT 0
60213: PUSH
60214: EMPTY
60215: LIST
60216: LIST
60217: LIST
60218: PUSH
60219: LD_VAR 0 1
60223: PUSH
60224: LD_INT 3
60226: PLUS
60227: PUSH
60228: LD_VAR 0 2
60232: PUSH
60233: LD_INT 3
60235: PLUS
60236: PUSH
60237: LD_INT 5
60239: PUSH
60240: EMPTY
60241: LIST
60242: LIST
60243: LIST
60244: PUSH
60245: LD_VAR 0 1
60249: PUSH
60250: LD_INT 4
60252: PLUS
60253: PUSH
60254: LD_VAR 0 2
60258: PUSH
60259: LD_INT 4
60261: PUSH
60262: EMPTY
60263: LIST
60264: LIST
60265: LIST
60266: PUSH
60267: LD_VAR 0 1
60271: PUSH
60272: LD_VAR 0 2
60276: PUSH
60277: LD_INT 3
60279: MINUS
60280: PUSH
60281: LD_INT 3
60283: PUSH
60284: EMPTY
60285: LIST
60286: LIST
60287: LIST
60288: PUSH
60289: LD_VAR 0 1
60293: PUSH
60294: LD_INT 4
60296: MINUS
60297: PUSH
60298: LD_VAR 0 2
60302: PUSH
60303: LD_INT 4
60305: MINUS
60306: PUSH
60307: LD_INT 2
60309: PUSH
60310: EMPTY
60311: LIST
60312: LIST
60313: LIST
60314: PUSH
60315: EMPTY
60316: LIST
60317: LIST
60318: LIST
60319: LIST
60320: LIST
60321: ST_TO_ADDR
// end ; 5 :
60322: GO 60462
60324: LD_INT 5
60326: DOUBLE
60327: EQUAL
60328: IFTRUE 60332
60330: GO 60461
60332: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
60333: LD_ADDR_VAR 0 5
60337: PUSH
60338: LD_VAR 0 1
60342: PUSH
60343: LD_INT 4
60345: MINUS
60346: PUSH
60347: LD_VAR 0 2
60351: PUSH
60352: LD_INT 1
60354: PUSH
60355: EMPTY
60356: LIST
60357: LIST
60358: LIST
60359: PUSH
60360: LD_VAR 0 1
60364: PUSH
60365: LD_VAR 0 2
60369: PUSH
60370: LD_INT 4
60372: MINUS
60373: PUSH
60374: LD_INT 3
60376: PUSH
60377: EMPTY
60378: LIST
60379: LIST
60380: LIST
60381: PUSH
60382: LD_VAR 0 1
60386: PUSH
60387: LD_INT 4
60389: PLUS
60390: PUSH
60391: LD_VAR 0 2
60395: PUSH
60396: LD_INT 4
60398: PLUS
60399: PUSH
60400: LD_INT 5
60402: PUSH
60403: EMPTY
60404: LIST
60405: LIST
60406: LIST
60407: PUSH
60408: LD_VAR 0 1
60412: PUSH
60413: LD_INT 3
60415: PLUS
60416: PUSH
60417: LD_VAR 0 2
60421: PUSH
60422: LD_INT 4
60424: PUSH
60425: EMPTY
60426: LIST
60427: LIST
60428: LIST
60429: PUSH
60430: LD_VAR 0 1
60434: PUSH
60435: LD_VAR 0 2
60439: PUSH
60440: LD_INT 3
60442: PLUS
60443: PUSH
60444: LD_INT 0
60446: PUSH
60447: EMPTY
60448: LIST
60449: LIST
60450: LIST
60451: PUSH
60452: EMPTY
60453: LIST
60454: LIST
60455: LIST
60456: LIST
60457: LIST
60458: ST_TO_ADDR
// end ; end ;
60459: GO 60462
60461: POP
// result := list ;
60462: LD_ADDR_VAR 0 4
60466: PUSH
60467: LD_VAR 0 5
60471: ST_TO_ADDR
// end ;
60472: LD_VAR 0 4
60476: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
60477: LD_INT 0
60479: PPUSH
60480: PPUSH
60481: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
60482: LD_VAR 0 1
60486: NOT
60487: PUSH
60488: LD_VAR 0 2
60492: PUSH
60493: LD_INT 1
60495: PUSH
60496: LD_INT 2
60498: PUSH
60499: LD_INT 3
60501: PUSH
60502: LD_INT 4
60504: PUSH
60505: EMPTY
60506: LIST
60507: LIST
60508: LIST
60509: LIST
60510: IN
60511: NOT
60512: OR
60513: IFFALSE 60517
// exit ;
60515: GO 60609
// tmp := [ ] ;
60517: LD_ADDR_VAR 0 5
60521: PUSH
60522: EMPTY
60523: ST_TO_ADDR
// for i in units do
60524: LD_ADDR_VAR 0 4
60528: PUSH
60529: LD_VAR 0 1
60533: PUSH
60534: FOR_IN
60535: IFFALSE 60578
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
60537: LD_ADDR_VAR 0 5
60541: PUSH
60542: LD_VAR 0 5
60546: PPUSH
60547: LD_VAR 0 5
60551: PUSH
60552: LD_INT 1
60554: PLUS
60555: PPUSH
60556: LD_VAR 0 4
60560: PPUSH
60561: LD_VAR 0 2
60565: PPUSH
60566: CALL_OW 259
60570: PPUSH
60571: CALL_OW 2
60575: ST_TO_ADDR
60576: GO 60534
60578: POP
60579: POP
// if not tmp then
60580: LD_VAR 0 5
60584: NOT
60585: IFFALSE 60589
// exit ;
60587: GO 60609
// result := SortListByListDesc ( units , tmp ) ;
60589: LD_ADDR_VAR 0 3
60593: PUSH
60594: LD_VAR 0 1
60598: PPUSH
60599: LD_VAR 0 5
60603: PPUSH
60604: CALL_OW 77
60608: ST_TO_ADDR
// end ;
60609: LD_VAR 0 3
60613: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
60614: LD_INT 0
60616: PPUSH
60617: PPUSH
60618: PPUSH
// result := false ;
60619: LD_ADDR_VAR 0 3
60623: PUSH
60624: LD_INT 0
60626: ST_TO_ADDR
// x := GetX ( building ) ;
60627: LD_ADDR_VAR 0 4
60631: PUSH
60632: LD_VAR 0 2
60636: PPUSH
60637: CALL_OW 250
60641: ST_TO_ADDR
// y := GetY ( building ) ;
60642: LD_ADDR_VAR 0 5
60646: PUSH
60647: LD_VAR 0 2
60651: PPUSH
60652: CALL_OW 251
60656: ST_TO_ADDR
// if not building or not x or not y then
60657: LD_VAR 0 2
60661: NOT
60662: PUSH
60663: LD_VAR 0 4
60667: NOT
60668: OR
60669: PUSH
60670: LD_VAR 0 5
60674: NOT
60675: OR
60676: IFFALSE 60680
// exit ;
60678: GO 60772
// if GetTaskList ( unit ) then
60680: LD_VAR 0 1
60684: PPUSH
60685: CALL_OW 437
60689: IFFALSE 60772
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
60691: LD_STRING e
60693: PUSH
60694: LD_VAR 0 1
60698: PPUSH
60699: CALL_OW 437
60703: PUSH
60704: LD_INT 1
60706: ARRAY
60707: PUSH
60708: LD_INT 1
60710: ARRAY
60711: EQUAL
60712: PUSH
60713: LD_VAR 0 4
60717: PUSH
60718: LD_VAR 0 1
60722: PPUSH
60723: CALL_OW 437
60727: PUSH
60728: LD_INT 1
60730: ARRAY
60731: PUSH
60732: LD_INT 2
60734: ARRAY
60735: EQUAL
60736: AND
60737: PUSH
60738: LD_VAR 0 5
60742: PUSH
60743: LD_VAR 0 1
60747: PPUSH
60748: CALL_OW 437
60752: PUSH
60753: LD_INT 1
60755: ARRAY
60756: PUSH
60757: LD_INT 3
60759: ARRAY
60760: EQUAL
60761: AND
60762: IFFALSE 60772
// result := true end ;
60764: LD_ADDR_VAR 0 3
60768: PUSH
60769: LD_INT 1
60771: ST_TO_ADDR
// end ;
60772: LD_VAR 0 3
60776: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
60777: LD_INT 0
60779: PPUSH
// result := false ;
60780: LD_ADDR_VAR 0 4
60784: PUSH
60785: LD_INT 0
60787: ST_TO_ADDR
// if GetTaskList ( unit ) then
60788: LD_VAR 0 1
60792: PPUSH
60793: CALL_OW 437
60797: IFFALSE 60880
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
60799: LD_STRING M
60801: PUSH
60802: LD_VAR 0 1
60806: PPUSH
60807: CALL_OW 437
60811: PUSH
60812: LD_INT 1
60814: ARRAY
60815: PUSH
60816: LD_INT 1
60818: ARRAY
60819: EQUAL
60820: PUSH
60821: LD_VAR 0 2
60825: PUSH
60826: LD_VAR 0 1
60830: PPUSH
60831: CALL_OW 437
60835: PUSH
60836: LD_INT 1
60838: ARRAY
60839: PUSH
60840: LD_INT 2
60842: ARRAY
60843: EQUAL
60844: AND
60845: PUSH
60846: LD_VAR 0 3
60850: PUSH
60851: LD_VAR 0 1
60855: PPUSH
60856: CALL_OW 437
60860: PUSH
60861: LD_INT 1
60863: ARRAY
60864: PUSH
60865: LD_INT 3
60867: ARRAY
60868: EQUAL
60869: AND
60870: IFFALSE 60880
// result := true ;
60872: LD_ADDR_VAR 0 4
60876: PUSH
60877: LD_INT 1
60879: ST_TO_ADDR
// end ; end ;
60880: LD_VAR 0 4
60884: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
60885: LD_INT 0
60887: PPUSH
60888: PPUSH
60889: PPUSH
60890: PPUSH
// if not unit or not area then
60891: LD_VAR 0 1
60895: NOT
60896: PUSH
60897: LD_VAR 0 2
60901: NOT
60902: OR
60903: IFFALSE 60907
// exit ;
60905: GO 61071
// tmp := AreaToList ( area , i ) ;
60907: LD_ADDR_VAR 0 6
60911: PUSH
60912: LD_VAR 0 2
60916: PPUSH
60917: LD_VAR 0 5
60921: PPUSH
60922: CALL_OW 517
60926: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
60927: LD_ADDR_VAR 0 5
60931: PUSH
60932: DOUBLE
60933: LD_INT 1
60935: DEC
60936: ST_TO_ADDR
60937: LD_VAR 0 6
60941: PUSH
60942: LD_INT 1
60944: ARRAY
60945: PUSH
60946: FOR_TO
60947: IFFALSE 61069
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
60949: LD_ADDR_VAR 0 7
60953: PUSH
60954: LD_VAR 0 6
60958: PUSH
60959: LD_INT 1
60961: ARRAY
60962: PUSH
60963: LD_VAR 0 5
60967: ARRAY
60968: PUSH
60969: LD_VAR 0 6
60973: PUSH
60974: LD_INT 2
60976: ARRAY
60977: PUSH
60978: LD_VAR 0 5
60982: ARRAY
60983: PUSH
60984: EMPTY
60985: LIST
60986: LIST
60987: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
60988: LD_VAR 0 7
60992: PUSH
60993: LD_INT 1
60995: ARRAY
60996: PPUSH
60997: LD_VAR 0 7
61001: PUSH
61002: LD_INT 2
61004: ARRAY
61005: PPUSH
61006: CALL_OW 428
61010: PUSH
61011: LD_INT 0
61013: EQUAL
61014: IFFALSE 61067
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
61016: LD_VAR 0 1
61020: PPUSH
61021: LD_VAR 0 7
61025: PUSH
61026: LD_INT 1
61028: ARRAY
61029: PPUSH
61030: LD_VAR 0 7
61034: PUSH
61035: LD_INT 2
61037: ARRAY
61038: PPUSH
61039: LD_VAR 0 3
61043: PPUSH
61044: CALL_OW 48
// result := IsPlaced ( unit ) ;
61048: LD_ADDR_VAR 0 4
61052: PUSH
61053: LD_VAR 0 1
61057: PPUSH
61058: CALL_OW 305
61062: ST_TO_ADDR
// exit ;
61063: POP
61064: POP
61065: GO 61071
// end ; end ;
61067: GO 60946
61069: POP
61070: POP
// end ;
61071: LD_VAR 0 4
61075: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
61076: LD_INT 0
61078: PPUSH
61079: PPUSH
61080: PPUSH
// if not side or side > 8 then
61081: LD_VAR 0 1
61085: NOT
61086: PUSH
61087: LD_VAR 0 1
61091: PUSH
61092: LD_INT 8
61094: GREATER
61095: OR
61096: IFFALSE 61100
// exit ;
61098: GO 61287
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
61100: LD_ADDR_VAR 0 4
61104: PUSH
61105: LD_INT 22
61107: PUSH
61108: LD_VAR 0 1
61112: PUSH
61113: EMPTY
61114: LIST
61115: LIST
61116: PUSH
61117: LD_INT 21
61119: PUSH
61120: LD_INT 3
61122: PUSH
61123: EMPTY
61124: LIST
61125: LIST
61126: PUSH
61127: EMPTY
61128: LIST
61129: LIST
61130: PPUSH
61131: CALL_OW 69
61135: ST_TO_ADDR
// if not tmp then
61136: LD_VAR 0 4
61140: NOT
61141: IFFALSE 61145
// exit ;
61143: GO 61287
// enable_addtolog := true ;
61145: LD_ADDR_OWVAR 81
61149: PUSH
61150: LD_INT 1
61152: ST_TO_ADDR
// AddToLog ( [ ) ;
61153: LD_STRING [
61155: PPUSH
61156: CALL_OW 561
// for i in tmp do
61160: LD_ADDR_VAR 0 3
61164: PUSH
61165: LD_VAR 0 4
61169: PUSH
61170: FOR_IN
61171: IFFALSE 61278
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
61173: LD_STRING [
61175: PUSH
61176: LD_VAR 0 3
61180: PPUSH
61181: CALL_OW 266
61185: STR
61186: PUSH
61187: LD_STRING , 
61189: STR
61190: PUSH
61191: LD_VAR 0 3
61195: PPUSH
61196: CALL_OW 250
61200: STR
61201: PUSH
61202: LD_STRING , 
61204: STR
61205: PUSH
61206: LD_VAR 0 3
61210: PPUSH
61211: CALL_OW 251
61215: STR
61216: PUSH
61217: LD_STRING , 
61219: STR
61220: PUSH
61221: LD_VAR 0 3
61225: PPUSH
61226: CALL_OW 254
61230: STR
61231: PUSH
61232: LD_STRING , 
61234: STR
61235: PUSH
61236: LD_VAR 0 3
61240: PPUSH
61241: LD_INT 1
61243: PPUSH
61244: CALL_OW 268
61248: STR
61249: PUSH
61250: LD_STRING , 
61252: STR
61253: PUSH
61254: LD_VAR 0 3
61258: PPUSH
61259: LD_INT 2
61261: PPUSH
61262: CALL_OW 268
61266: STR
61267: PUSH
61268: LD_STRING ],
61270: STR
61271: PPUSH
61272: CALL_OW 561
// end ;
61276: GO 61170
61278: POP
61279: POP
// AddToLog ( ]; ) ;
61280: LD_STRING ];
61282: PPUSH
61283: CALL_OW 561
// end ;
61287: LD_VAR 0 2
61291: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
61292: LD_INT 0
61294: PPUSH
61295: PPUSH
61296: PPUSH
61297: PPUSH
61298: PPUSH
// if not area or not rate or not max then
61299: LD_VAR 0 1
61303: NOT
61304: PUSH
61305: LD_VAR 0 2
61309: NOT
61310: OR
61311: PUSH
61312: LD_VAR 0 4
61316: NOT
61317: OR
61318: IFFALSE 61322
// exit ;
61320: GO 61514
// while 1 do
61322: LD_INT 1
61324: IFFALSE 61514
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
61326: LD_ADDR_VAR 0 9
61330: PUSH
61331: LD_VAR 0 1
61335: PPUSH
61336: LD_INT 1
61338: PPUSH
61339: CALL_OW 287
61343: PUSH
61344: LD_INT 10
61346: MUL
61347: ST_TO_ADDR
// r := rate / 10 ;
61348: LD_ADDR_VAR 0 7
61352: PUSH
61353: LD_VAR 0 2
61357: PUSH
61358: LD_INT 10
61360: DIVREAL
61361: ST_TO_ADDR
// time := 1 1$00 ;
61362: LD_ADDR_VAR 0 8
61366: PUSH
61367: LD_INT 2100
61369: ST_TO_ADDR
// if amount < min then
61370: LD_VAR 0 9
61374: PUSH
61375: LD_VAR 0 3
61379: LESS
61380: IFFALSE 61398
// r := r * 2 else
61382: LD_ADDR_VAR 0 7
61386: PUSH
61387: LD_VAR 0 7
61391: PUSH
61392: LD_INT 2
61394: MUL
61395: ST_TO_ADDR
61396: GO 61424
// if amount > max then
61398: LD_VAR 0 9
61402: PUSH
61403: LD_VAR 0 4
61407: GREATER
61408: IFFALSE 61424
// r := r / 2 ;
61410: LD_ADDR_VAR 0 7
61414: PUSH
61415: LD_VAR 0 7
61419: PUSH
61420: LD_INT 2
61422: DIVREAL
61423: ST_TO_ADDR
// time := time / r ;
61424: LD_ADDR_VAR 0 8
61428: PUSH
61429: LD_VAR 0 8
61433: PUSH
61434: LD_VAR 0 7
61438: DIVREAL
61439: ST_TO_ADDR
// if time < 0 then
61440: LD_VAR 0 8
61444: PUSH
61445: LD_INT 0
61447: LESS
61448: IFFALSE 61465
// time := time * - 1 ;
61450: LD_ADDR_VAR 0 8
61454: PUSH
61455: LD_VAR 0 8
61459: PUSH
61460: LD_INT 1
61462: NEG
61463: MUL
61464: ST_TO_ADDR
// wait ( time ) ;
61465: LD_VAR 0 8
61469: PPUSH
61470: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
61474: LD_INT 35
61476: PPUSH
61477: LD_INT 875
61479: PPUSH
61480: CALL_OW 12
61484: PPUSH
61485: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
61489: LD_INT 1
61491: PPUSH
61492: LD_INT 5
61494: PPUSH
61495: CALL_OW 12
61499: PPUSH
61500: LD_VAR 0 1
61504: PPUSH
61505: LD_INT 1
61507: PPUSH
61508: CALL_OW 55
// end ;
61512: GO 61322
// end ;
61514: LD_VAR 0 5
61518: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
61519: LD_INT 0
61521: PPUSH
61522: PPUSH
61523: PPUSH
61524: PPUSH
61525: PPUSH
61526: PPUSH
61527: PPUSH
61528: PPUSH
// if not turrets or not factories then
61529: LD_VAR 0 1
61533: NOT
61534: PUSH
61535: LD_VAR 0 2
61539: NOT
61540: OR
61541: IFFALSE 61545
// exit ;
61543: GO 61852
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
61545: LD_ADDR_VAR 0 10
61549: PUSH
61550: LD_INT 5
61552: PUSH
61553: LD_INT 6
61555: PUSH
61556: EMPTY
61557: LIST
61558: LIST
61559: PUSH
61560: LD_INT 2
61562: PUSH
61563: LD_INT 4
61565: PUSH
61566: EMPTY
61567: LIST
61568: LIST
61569: PUSH
61570: LD_INT 3
61572: PUSH
61573: LD_INT 5
61575: PUSH
61576: EMPTY
61577: LIST
61578: LIST
61579: PUSH
61580: EMPTY
61581: LIST
61582: LIST
61583: LIST
61584: PUSH
61585: LD_INT 24
61587: PUSH
61588: LD_INT 25
61590: PUSH
61591: EMPTY
61592: LIST
61593: LIST
61594: PUSH
61595: LD_INT 23
61597: PUSH
61598: LD_INT 27
61600: PUSH
61601: EMPTY
61602: LIST
61603: LIST
61604: PUSH
61605: EMPTY
61606: LIST
61607: LIST
61608: PUSH
61609: LD_INT 42
61611: PUSH
61612: LD_INT 43
61614: PUSH
61615: EMPTY
61616: LIST
61617: LIST
61618: PUSH
61619: LD_INT 44
61621: PUSH
61622: LD_INT 46
61624: PUSH
61625: EMPTY
61626: LIST
61627: LIST
61628: PUSH
61629: LD_INT 45
61631: PUSH
61632: LD_INT 47
61634: PUSH
61635: EMPTY
61636: LIST
61637: LIST
61638: PUSH
61639: EMPTY
61640: LIST
61641: LIST
61642: LIST
61643: PUSH
61644: EMPTY
61645: LIST
61646: LIST
61647: LIST
61648: ST_TO_ADDR
// result := [ ] ;
61649: LD_ADDR_VAR 0 3
61653: PUSH
61654: EMPTY
61655: ST_TO_ADDR
// for i in turrets do
61656: LD_ADDR_VAR 0 4
61660: PUSH
61661: LD_VAR 0 1
61665: PUSH
61666: FOR_IN
61667: IFFALSE 61850
// begin nat := GetNation ( i ) ;
61669: LD_ADDR_VAR 0 7
61673: PUSH
61674: LD_VAR 0 4
61678: PPUSH
61679: CALL_OW 248
61683: ST_TO_ADDR
// weapon := 0 ;
61684: LD_ADDR_VAR 0 8
61688: PUSH
61689: LD_INT 0
61691: ST_TO_ADDR
// if not nat then
61692: LD_VAR 0 7
61696: NOT
61697: IFFALSE 61701
// continue ;
61699: GO 61666
// for j in list [ nat ] do
61701: LD_ADDR_VAR 0 5
61705: PUSH
61706: LD_VAR 0 10
61710: PUSH
61711: LD_VAR 0 7
61715: ARRAY
61716: PUSH
61717: FOR_IN
61718: IFFALSE 61759
// if GetBWeapon ( i ) = j [ 1 ] then
61720: LD_VAR 0 4
61724: PPUSH
61725: CALL_OW 269
61729: PUSH
61730: LD_VAR 0 5
61734: PUSH
61735: LD_INT 1
61737: ARRAY
61738: EQUAL
61739: IFFALSE 61757
// begin weapon := j [ 2 ] ;
61741: LD_ADDR_VAR 0 8
61745: PUSH
61746: LD_VAR 0 5
61750: PUSH
61751: LD_INT 2
61753: ARRAY
61754: ST_TO_ADDR
// break ;
61755: GO 61759
// end ;
61757: GO 61717
61759: POP
61760: POP
// if not weapon then
61761: LD_VAR 0 8
61765: NOT
61766: IFFALSE 61770
// continue ;
61768: GO 61666
// for k in factories do
61770: LD_ADDR_VAR 0 6
61774: PUSH
61775: LD_VAR 0 2
61779: PUSH
61780: FOR_IN
61781: IFFALSE 61846
// begin weapons := AvailableWeaponList ( k ) ;
61783: LD_ADDR_VAR 0 9
61787: PUSH
61788: LD_VAR 0 6
61792: PPUSH
61793: CALL_OW 478
61797: ST_TO_ADDR
// if not weapons then
61798: LD_VAR 0 9
61802: NOT
61803: IFFALSE 61807
// continue ;
61805: GO 61780
// if weapon in weapons then
61807: LD_VAR 0 8
61811: PUSH
61812: LD_VAR 0 9
61816: IN
61817: IFFALSE 61844
// begin result := [ i , weapon ] ;
61819: LD_ADDR_VAR 0 3
61823: PUSH
61824: LD_VAR 0 4
61828: PUSH
61829: LD_VAR 0 8
61833: PUSH
61834: EMPTY
61835: LIST
61836: LIST
61837: ST_TO_ADDR
// exit ;
61838: POP
61839: POP
61840: POP
61841: POP
61842: GO 61852
// end ; end ;
61844: GO 61780
61846: POP
61847: POP
// end ;
61848: GO 61666
61850: POP
61851: POP
// end ;
61852: LD_VAR 0 3
61856: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
61857: LD_INT 0
61859: PPUSH
// if not side or side > 8 then
61860: LD_VAR 0 3
61864: NOT
61865: PUSH
61866: LD_VAR 0 3
61870: PUSH
61871: LD_INT 8
61873: GREATER
61874: OR
61875: IFFALSE 61879
// exit ;
61877: GO 61938
// if not range then
61879: LD_VAR 0 4
61883: NOT
61884: IFFALSE 61895
// range := - 12 ;
61886: LD_ADDR_VAR 0 4
61890: PUSH
61891: LD_INT 12
61893: NEG
61894: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
61895: LD_VAR 0 1
61899: PPUSH
61900: LD_VAR 0 2
61904: PPUSH
61905: LD_VAR 0 3
61909: PPUSH
61910: LD_VAR 0 4
61914: PPUSH
61915: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
61919: LD_VAR 0 1
61923: PPUSH
61924: LD_VAR 0 2
61928: PPUSH
61929: LD_VAR 0 3
61933: PPUSH
61934: CALL_OW 331
// end ;
61938: LD_VAR 0 5
61942: RET
// export function Video ( mode ) ; begin
61943: LD_INT 0
61945: PPUSH
// ingame_video = mode ;
61946: LD_ADDR_OWVAR 52
61950: PUSH
61951: LD_VAR 0 1
61955: ST_TO_ADDR
// interface_hidden = mode ;
61956: LD_ADDR_OWVAR 54
61960: PUSH
61961: LD_VAR 0 1
61965: ST_TO_ADDR
// end ;
61966: LD_VAR 0 2
61970: RET
// export function Join ( array , element ) ; begin
61971: LD_INT 0
61973: PPUSH
// result := Replace ( array , array + 1 , element ) ;
61974: LD_ADDR_VAR 0 3
61978: PUSH
61979: LD_VAR 0 1
61983: PPUSH
61984: LD_VAR 0 1
61988: PUSH
61989: LD_INT 1
61991: PLUS
61992: PPUSH
61993: LD_VAR 0 2
61997: PPUSH
61998: CALL_OW 1
62002: ST_TO_ADDR
// end ;
62003: LD_VAR 0 3
62007: RET
// export function JoinUnion ( array , element ) ; begin
62008: LD_INT 0
62010: PPUSH
// result := array union element ;
62011: LD_ADDR_VAR 0 3
62015: PUSH
62016: LD_VAR 0 1
62020: PUSH
62021: LD_VAR 0 2
62025: UNION
62026: ST_TO_ADDR
// end ;
62027: LD_VAR 0 3
62031: RET
// export function GetBehemoths ( side ) ; begin
62032: LD_INT 0
62034: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
62035: LD_ADDR_VAR 0 2
62039: PUSH
62040: LD_INT 22
62042: PUSH
62043: LD_VAR 0 1
62047: PUSH
62048: EMPTY
62049: LIST
62050: LIST
62051: PUSH
62052: LD_INT 31
62054: PUSH
62055: LD_INT 25
62057: PUSH
62058: EMPTY
62059: LIST
62060: LIST
62061: PUSH
62062: EMPTY
62063: LIST
62064: LIST
62065: PPUSH
62066: CALL_OW 69
62070: ST_TO_ADDR
// end ;
62071: LD_VAR 0 2
62075: RET
// export function Shuffle ( array ) ; var i , index ; begin
62076: LD_INT 0
62078: PPUSH
62079: PPUSH
62080: PPUSH
// result := [ ] ;
62081: LD_ADDR_VAR 0 2
62085: PUSH
62086: EMPTY
62087: ST_TO_ADDR
// if not array then
62088: LD_VAR 0 1
62092: NOT
62093: IFFALSE 62097
// exit ;
62095: GO 62196
// Randomize ;
62097: CALL_OW 10
// for i = array downto 1 do
62101: LD_ADDR_VAR 0 3
62105: PUSH
62106: DOUBLE
62107: LD_VAR 0 1
62111: INC
62112: ST_TO_ADDR
62113: LD_INT 1
62115: PUSH
62116: FOR_DOWNTO
62117: IFFALSE 62194
// begin index := rand ( 1 , array ) ;
62119: LD_ADDR_VAR 0 4
62123: PUSH
62124: LD_INT 1
62126: PPUSH
62127: LD_VAR 0 1
62131: PPUSH
62132: CALL_OW 12
62136: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
62137: LD_ADDR_VAR 0 2
62141: PUSH
62142: LD_VAR 0 2
62146: PPUSH
62147: LD_VAR 0 2
62151: PUSH
62152: LD_INT 1
62154: PLUS
62155: PPUSH
62156: LD_VAR 0 1
62160: PUSH
62161: LD_VAR 0 4
62165: ARRAY
62166: PPUSH
62167: CALL_OW 2
62171: ST_TO_ADDR
// array := Delete ( array , index ) ;
62172: LD_ADDR_VAR 0 1
62176: PUSH
62177: LD_VAR 0 1
62181: PPUSH
62182: LD_VAR 0 4
62186: PPUSH
62187: CALL_OW 3
62191: ST_TO_ADDR
// end ;
62192: GO 62116
62194: POP
62195: POP
// end ;
62196: LD_VAR 0 2
62200: RET
// export function GetBaseMaterials ( base ) ; begin
62201: LD_INT 0
62203: PPUSH
// result := [ 0 , 0 , 0 ] ;
62204: LD_ADDR_VAR 0 2
62208: PUSH
62209: LD_INT 0
62211: PUSH
62212: LD_INT 0
62214: PUSH
62215: LD_INT 0
62217: PUSH
62218: EMPTY
62219: LIST
62220: LIST
62221: LIST
62222: ST_TO_ADDR
// if not base then
62223: LD_VAR 0 1
62227: NOT
62228: IFFALSE 62232
// exit ;
62230: GO 62281
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
62232: LD_ADDR_VAR 0 2
62236: PUSH
62237: LD_VAR 0 1
62241: PPUSH
62242: LD_INT 1
62244: PPUSH
62245: CALL_OW 275
62249: PUSH
62250: LD_VAR 0 1
62254: PPUSH
62255: LD_INT 2
62257: PPUSH
62258: CALL_OW 275
62262: PUSH
62263: LD_VAR 0 1
62267: PPUSH
62268: LD_INT 3
62270: PPUSH
62271: CALL_OW 275
62275: PUSH
62276: EMPTY
62277: LIST
62278: LIST
62279: LIST
62280: ST_TO_ADDR
// end ;
62281: LD_VAR 0 2
62285: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
62286: LD_INT 0
62288: PPUSH
62289: PPUSH
// result := array ;
62290: LD_ADDR_VAR 0 3
62294: PUSH
62295: LD_VAR 0 1
62299: ST_TO_ADDR
// if size > 0 then
62300: LD_VAR 0 2
62304: PUSH
62305: LD_INT 0
62307: GREATER
62308: IFFALSE 62354
// for i := array downto size do
62310: LD_ADDR_VAR 0 4
62314: PUSH
62315: DOUBLE
62316: LD_VAR 0 1
62320: INC
62321: ST_TO_ADDR
62322: LD_VAR 0 2
62326: PUSH
62327: FOR_DOWNTO
62328: IFFALSE 62352
// result := Delete ( result , result ) ;
62330: LD_ADDR_VAR 0 3
62334: PUSH
62335: LD_VAR 0 3
62339: PPUSH
62340: LD_VAR 0 3
62344: PPUSH
62345: CALL_OW 3
62349: ST_TO_ADDR
62350: GO 62327
62352: POP
62353: POP
// end ;
62354: LD_VAR 0 3
62358: RET
// export function ComExit ( unit ) ; var tmp ; begin
62359: LD_INT 0
62361: PPUSH
62362: PPUSH
// if not IsInUnit ( unit ) then
62363: LD_VAR 0 1
62367: PPUSH
62368: CALL_OW 310
62372: NOT
62373: IFFALSE 62377
// exit ;
62375: GO 62437
// tmp := IsInUnit ( unit ) ;
62377: LD_ADDR_VAR 0 3
62381: PUSH
62382: LD_VAR 0 1
62386: PPUSH
62387: CALL_OW 310
62391: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
62392: LD_VAR 0 3
62396: PPUSH
62397: CALL_OW 247
62401: PUSH
62402: LD_INT 2
62404: EQUAL
62405: IFFALSE 62418
// ComExitVehicle ( unit ) else
62407: LD_VAR 0 1
62411: PPUSH
62412: CALL_OW 121
62416: GO 62427
// ComExitBuilding ( unit ) ;
62418: LD_VAR 0 1
62422: PPUSH
62423: CALL_OW 122
// result := tmp ;
62427: LD_ADDR_VAR 0 2
62431: PUSH
62432: LD_VAR 0 3
62436: ST_TO_ADDR
// end ;
62437: LD_VAR 0 2
62441: RET
// export function ComExitAll ( units ) ; var i ; begin
62442: LD_INT 0
62444: PPUSH
62445: PPUSH
// if not units then
62446: LD_VAR 0 1
62450: NOT
62451: IFFALSE 62455
// exit ;
62453: GO 62481
// for i in units do
62455: LD_ADDR_VAR 0 3
62459: PUSH
62460: LD_VAR 0 1
62464: PUSH
62465: FOR_IN
62466: IFFALSE 62479
// ComExit ( i ) ;
62468: LD_VAR 0 3
62472: PPUSH
62473: CALL 62359 0 1
62477: GO 62465
62479: POP
62480: POP
// end ;
62481: LD_VAR 0 2
62485: RET
// export function ResetHc ; begin
62486: LD_INT 0
62488: PPUSH
// InitHc ;
62489: CALL_OW 19
// hc_importance := 0 ;
62493: LD_ADDR_OWVAR 32
62497: PUSH
62498: LD_INT 0
62500: ST_TO_ADDR
// end ;
62501: LD_VAR 0 1
62505: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
62506: LD_INT 0
62508: PPUSH
62509: PPUSH
62510: PPUSH
// _x := ( x1 + x2 ) div 2 ;
62511: LD_ADDR_VAR 0 6
62515: PUSH
62516: LD_VAR 0 1
62520: PUSH
62521: LD_VAR 0 3
62525: PLUS
62526: PUSH
62527: LD_INT 2
62529: DIV
62530: ST_TO_ADDR
// if _x < 0 then
62531: LD_VAR 0 6
62535: PUSH
62536: LD_INT 0
62538: LESS
62539: IFFALSE 62556
// _x := _x * - 1 ;
62541: LD_ADDR_VAR 0 6
62545: PUSH
62546: LD_VAR 0 6
62550: PUSH
62551: LD_INT 1
62553: NEG
62554: MUL
62555: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
62556: LD_ADDR_VAR 0 7
62560: PUSH
62561: LD_VAR 0 2
62565: PUSH
62566: LD_VAR 0 4
62570: PLUS
62571: PUSH
62572: LD_INT 2
62574: DIV
62575: ST_TO_ADDR
// if _y < 0 then
62576: LD_VAR 0 7
62580: PUSH
62581: LD_INT 0
62583: LESS
62584: IFFALSE 62601
// _y := _y * - 1 ;
62586: LD_ADDR_VAR 0 7
62590: PUSH
62591: LD_VAR 0 7
62595: PUSH
62596: LD_INT 1
62598: NEG
62599: MUL
62600: ST_TO_ADDR
// result := [ _x , _y ] ;
62601: LD_ADDR_VAR 0 5
62605: PUSH
62606: LD_VAR 0 6
62610: PUSH
62611: LD_VAR 0 7
62615: PUSH
62616: EMPTY
62617: LIST
62618: LIST
62619: ST_TO_ADDR
// end ;
62620: LD_VAR 0 5
62624: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
62625: LD_INT 0
62627: PPUSH
62628: PPUSH
62629: PPUSH
62630: PPUSH
// task := GetTaskList ( unit ) ;
62631: LD_ADDR_VAR 0 7
62635: PUSH
62636: LD_VAR 0 1
62640: PPUSH
62641: CALL_OW 437
62645: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
62646: LD_VAR 0 7
62650: NOT
62651: PUSH
62652: LD_VAR 0 1
62656: PPUSH
62657: LD_VAR 0 2
62661: PPUSH
62662: CALL_OW 308
62666: NOT
62667: AND
62668: IFFALSE 62672
// exit ;
62670: GO 62790
// if IsInArea ( unit , area ) then
62672: LD_VAR 0 1
62676: PPUSH
62677: LD_VAR 0 2
62681: PPUSH
62682: CALL_OW 308
62686: IFFALSE 62704
// begin ComMoveToArea ( unit , goAway ) ;
62688: LD_VAR 0 1
62692: PPUSH
62693: LD_VAR 0 3
62697: PPUSH
62698: CALL_OW 113
// exit ;
62702: GO 62790
// end ; if task [ 1 ] [ 1 ] <> M then
62704: LD_VAR 0 7
62708: PUSH
62709: LD_INT 1
62711: ARRAY
62712: PUSH
62713: LD_INT 1
62715: ARRAY
62716: PUSH
62717: LD_STRING M
62719: NONEQUAL
62720: IFFALSE 62724
// exit ;
62722: GO 62790
// x := task [ 1 ] [ 2 ] ;
62724: LD_ADDR_VAR 0 5
62728: PUSH
62729: LD_VAR 0 7
62733: PUSH
62734: LD_INT 1
62736: ARRAY
62737: PUSH
62738: LD_INT 2
62740: ARRAY
62741: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
62742: LD_ADDR_VAR 0 6
62746: PUSH
62747: LD_VAR 0 7
62751: PUSH
62752: LD_INT 1
62754: ARRAY
62755: PUSH
62756: LD_INT 3
62758: ARRAY
62759: ST_TO_ADDR
// if InArea ( x , y , area ) then
62760: LD_VAR 0 5
62764: PPUSH
62765: LD_VAR 0 6
62769: PPUSH
62770: LD_VAR 0 2
62774: PPUSH
62775: CALL_OW 309
62779: IFFALSE 62790
// ComStop ( unit ) ;
62781: LD_VAR 0 1
62785: PPUSH
62786: CALL_OW 141
// end ;
62790: LD_VAR 0 4
62794: RET
// export function Abs ( value ) ; begin
62795: LD_INT 0
62797: PPUSH
// result := value ;
62798: LD_ADDR_VAR 0 2
62802: PUSH
62803: LD_VAR 0 1
62807: ST_TO_ADDR
// if value < 0 then
62808: LD_VAR 0 1
62812: PUSH
62813: LD_INT 0
62815: LESS
62816: IFFALSE 62833
// result := value * - 1 ;
62818: LD_ADDR_VAR 0 2
62822: PUSH
62823: LD_VAR 0 1
62827: PUSH
62828: LD_INT 1
62830: NEG
62831: MUL
62832: ST_TO_ADDR
// end ;
62833: LD_VAR 0 2
62837: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
62838: LD_INT 0
62840: PPUSH
62841: PPUSH
62842: PPUSH
62843: PPUSH
62844: PPUSH
62845: PPUSH
62846: PPUSH
62847: PPUSH
// if not unit or not building then
62848: LD_VAR 0 1
62852: NOT
62853: PUSH
62854: LD_VAR 0 2
62858: NOT
62859: OR
62860: IFFALSE 62864
// exit ;
62862: GO 63090
// x := GetX ( building ) ;
62864: LD_ADDR_VAR 0 4
62868: PUSH
62869: LD_VAR 0 2
62873: PPUSH
62874: CALL_OW 250
62878: ST_TO_ADDR
// y := GetY ( building ) ;
62879: LD_ADDR_VAR 0 6
62883: PUSH
62884: LD_VAR 0 2
62888: PPUSH
62889: CALL_OW 251
62893: ST_TO_ADDR
// d := GetDir ( building ) ;
62894: LD_ADDR_VAR 0 8
62898: PUSH
62899: LD_VAR 0 2
62903: PPUSH
62904: CALL_OW 254
62908: ST_TO_ADDR
// r := 4 ;
62909: LD_ADDR_VAR 0 9
62913: PUSH
62914: LD_INT 4
62916: ST_TO_ADDR
// for i := 1 to 5 do
62917: LD_ADDR_VAR 0 10
62921: PUSH
62922: DOUBLE
62923: LD_INT 1
62925: DEC
62926: ST_TO_ADDR
62927: LD_INT 5
62929: PUSH
62930: FOR_TO
62931: IFFALSE 63088
// begin _x := ShiftX ( x , d , r + i ) ;
62933: LD_ADDR_VAR 0 5
62937: PUSH
62938: LD_VAR 0 4
62942: PPUSH
62943: LD_VAR 0 8
62947: PPUSH
62948: LD_VAR 0 9
62952: PUSH
62953: LD_VAR 0 10
62957: PLUS
62958: PPUSH
62959: CALL_OW 272
62963: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
62964: LD_ADDR_VAR 0 7
62968: PUSH
62969: LD_VAR 0 6
62973: PPUSH
62974: LD_VAR 0 8
62978: PPUSH
62979: LD_VAR 0 9
62983: PUSH
62984: LD_VAR 0 10
62988: PLUS
62989: PPUSH
62990: CALL_OW 273
62994: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
62995: LD_VAR 0 5
62999: PPUSH
63000: LD_VAR 0 7
63004: PPUSH
63005: CALL_OW 488
63009: PUSH
63010: LD_VAR 0 5
63014: PPUSH
63015: LD_VAR 0 7
63019: PPUSH
63020: CALL_OW 428
63024: PPUSH
63025: CALL_OW 247
63029: PUSH
63030: LD_INT 3
63032: PUSH
63033: LD_INT 2
63035: PUSH
63036: EMPTY
63037: LIST
63038: LIST
63039: IN
63040: NOT
63041: AND
63042: IFFALSE 63086
// begin ComMoveXY ( unit , _x , _y ) ;
63044: LD_VAR 0 1
63048: PPUSH
63049: LD_VAR 0 5
63053: PPUSH
63054: LD_VAR 0 7
63058: PPUSH
63059: CALL_OW 111
// result := [ _x , _y ] ;
63063: LD_ADDR_VAR 0 3
63067: PUSH
63068: LD_VAR 0 5
63072: PUSH
63073: LD_VAR 0 7
63077: PUSH
63078: EMPTY
63079: LIST
63080: LIST
63081: ST_TO_ADDR
// exit ;
63082: POP
63083: POP
63084: GO 63090
// end ; end ;
63086: GO 62930
63088: POP
63089: POP
// end ;
63090: LD_VAR 0 3
63094: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
63095: LD_INT 0
63097: PPUSH
63098: PPUSH
63099: PPUSH
// result := 0 ;
63100: LD_ADDR_VAR 0 3
63104: PUSH
63105: LD_INT 0
63107: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
63108: LD_VAR 0 1
63112: PUSH
63113: LD_INT 0
63115: LESS
63116: PUSH
63117: LD_VAR 0 1
63121: PUSH
63122: LD_INT 8
63124: GREATER
63125: OR
63126: PUSH
63127: LD_VAR 0 2
63131: PUSH
63132: LD_INT 0
63134: LESS
63135: OR
63136: PUSH
63137: LD_VAR 0 2
63141: PUSH
63142: LD_INT 8
63144: GREATER
63145: OR
63146: IFFALSE 63150
// exit ;
63148: GO 63225
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
63150: LD_ADDR_VAR 0 4
63154: PUSH
63155: LD_INT 22
63157: PUSH
63158: LD_VAR 0 2
63162: PUSH
63163: EMPTY
63164: LIST
63165: LIST
63166: PPUSH
63167: CALL_OW 69
63171: PUSH
63172: FOR_IN
63173: IFFALSE 63223
// begin un := UnitShoot ( i ) ;
63175: LD_ADDR_VAR 0 5
63179: PUSH
63180: LD_VAR 0 4
63184: PPUSH
63185: CALL_OW 504
63189: ST_TO_ADDR
// if GetSide ( un ) = side1 then
63190: LD_VAR 0 5
63194: PPUSH
63195: CALL_OW 255
63199: PUSH
63200: LD_VAR 0 1
63204: EQUAL
63205: IFFALSE 63221
// begin result := un ;
63207: LD_ADDR_VAR 0 3
63211: PUSH
63212: LD_VAR 0 5
63216: ST_TO_ADDR
// exit ;
63217: POP
63218: POP
63219: GO 63225
// end ; end ;
63221: GO 63172
63223: POP
63224: POP
// end ;
63225: LD_VAR 0 3
63229: RET
// export function GetCargoBay ( units ) ; begin
63230: LD_INT 0
63232: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
63233: LD_ADDR_VAR 0 2
63237: PUSH
63238: LD_VAR 0 1
63242: PPUSH
63243: LD_INT 2
63245: PUSH
63246: LD_INT 34
63248: PUSH
63249: LD_INT 12
63251: PUSH
63252: EMPTY
63253: LIST
63254: LIST
63255: PUSH
63256: LD_INT 34
63258: PUSH
63259: LD_INT 51
63261: PUSH
63262: EMPTY
63263: LIST
63264: LIST
63265: PUSH
63266: LD_INT 34
63268: PUSH
63269: LD_INT 32
63271: PUSH
63272: EMPTY
63273: LIST
63274: LIST
63275: PUSH
63276: LD_INT 34
63278: PUSH
63279: LD_EXP 30
63283: PUSH
63284: EMPTY
63285: LIST
63286: LIST
63287: PUSH
63288: EMPTY
63289: LIST
63290: LIST
63291: LIST
63292: LIST
63293: LIST
63294: PPUSH
63295: CALL_OW 72
63299: ST_TO_ADDR
// end ;
63300: LD_VAR 0 2
63304: RET
// export function Negate ( value ) ; begin
63305: LD_INT 0
63307: PPUSH
// result := not value ;
63308: LD_ADDR_VAR 0 2
63312: PUSH
63313: LD_VAR 0 1
63317: NOT
63318: ST_TO_ADDR
// end ;
63319: LD_VAR 0 2
63323: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; begin
63324: LD_INT 0
63326: PPUSH
// if x1 = x2 then
63327: LD_VAR 0 1
63331: PUSH
63332: LD_VAR 0 3
63336: EQUAL
63337: IFFALSE 63371
// begin if y1 > y2 then
63339: LD_VAR 0 2
63343: PUSH
63344: LD_VAR 0 4
63348: GREATER
63349: IFFALSE 63361
// result := 0 else
63351: LD_ADDR_VAR 0 5
63355: PUSH
63356: LD_INT 0
63358: ST_TO_ADDR
63359: GO 63369
// result := 3 ;
63361: LD_ADDR_VAR 0 5
63365: PUSH
63366: LD_INT 3
63368: ST_TO_ADDR
// exit ;
63369: GO 63457
// end ; if y1 = y2 then
63371: LD_VAR 0 2
63375: PUSH
63376: LD_VAR 0 4
63380: EQUAL
63381: IFFALSE 63415
// begin if x1 > x2 then
63383: LD_VAR 0 1
63387: PUSH
63388: LD_VAR 0 3
63392: GREATER
63393: IFFALSE 63405
// result := 1 else
63395: LD_ADDR_VAR 0 5
63399: PUSH
63400: LD_INT 1
63402: ST_TO_ADDR
63403: GO 63413
// result := 4 ;
63405: LD_ADDR_VAR 0 5
63409: PUSH
63410: LD_INT 4
63412: ST_TO_ADDR
// exit ;
63413: GO 63457
// end ; if x1 > x2 and y1 > y2 then
63415: LD_VAR 0 1
63419: PUSH
63420: LD_VAR 0 3
63424: GREATER
63425: PUSH
63426: LD_VAR 0 2
63430: PUSH
63431: LD_VAR 0 4
63435: GREATER
63436: AND
63437: IFFALSE 63449
// result := 2 else
63439: LD_ADDR_VAR 0 5
63443: PUSH
63444: LD_INT 2
63446: ST_TO_ADDR
63447: GO 63457
// result := 5 ;
63449: LD_ADDR_VAR 0 5
63453: PUSH
63454: LD_INT 5
63456: ST_TO_ADDR
// end ;
63457: LD_VAR 0 5
63461: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
63462: LD_INT 0
63464: PPUSH
63465: PPUSH
// if not driver or not IsInUnit ( driver ) then
63466: LD_VAR 0 1
63470: NOT
63471: PUSH
63472: LD_VAR 0 1
63476: PPUSH
63477: CALL_OW 310
63481: NOT
63482: OR
63483: IFFALSE 63487
// exit ;
63485: GO 63577
// vehicle := IsInUnit ( driver ) ;
63487: LD_ADDR_VAR 0 3
63491: PUSH
63492: LD_VAR 0 1
63496: PPUSH
63497: CALL_OW 310
63501: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
63502: LD_VAR 0 1
63506: PPUSH
63507: LD_STRING \
63509: PUSH
63510: LD_INT 0
63512: PUSH
63513: LD_INT 0
63515: PUSH
63516: LD_INT 0
63518: PUSH
63519: LD_INT 0
63521: PUSH
63522: LD_INT 0
63524: PUSH
63525: LD_INT 0
63527: PUSH
63528: EMPTY
63529: LIST
63530: LIST
63531: LIST
63532: LIST
63533: LIST
63534: LIST
63535: LIST
63536: PUSH
63537: LD_STRING E
63539: PUSH
63540: LD_INT 0
63542: PUSH
63543: LD_INT 0
63545: PUSH
63546: LD_VAR 0 3
63550: PUSH
63551: LD_INT 0
63553: PUSH
63554: LD_INT 0
63556: PUSH
63557: LD_INT 0
63559: PUSH
63560: EMPTY
63561: LIST
63562: LIST
63563: LIST
63564: LIST
63565: LIST
63566: LIST
63567: LIST
63568: PUSH
63569: EMPTY
63570: LIST
63571: LIST
63572: PPUSH
63573: CALL_OW 446
// end ;
63577: LD_VAR 0 2
63581: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
63582: LD_INT 0
63584: PPUSH
63585: PPUSH
// if not driver or not IsInUnit ( driver ) then
63586: LD_VAR 0 1
63590: NOT
63591: PUSH
63592: LD_VAR 0 1
63596: PPUSH
63597: CALL_OW 310
63601: NOT
63602: OR
63603: IFFALSE 63607
// exit ;
63605: GO 63721
// vehicle := IsInUnit ( driver ) ;
63607: LD_ADDR_VAR 0 3
63611: PUSH
63612: LD_VAR 0 1
63616: PPUSH
63617: CALL_OW 310
63621: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
63622: LD_VAR 0 1
63626: PPUSH
63627: LD_STRING \
63629: PUSH
63630: LD_INT 0
63632: PUSH
63633: LD_INT 0
63635: PUSH
63636: LD_INT 0
63638: PUSH
63639: LD_INT 0
63641: PUSH
63642: LD_INT 0
63644: PUSH
63645: LD_INT 0
63647: PUSH
63648: EMPTY
63649: LIST
63650: LIST
63651: LIST
63652: LIST
63653: LIST
63654: LIST
63655: LIST
63656: PUSH
63657: LD_STRING E
63659: PUSH
63660: LD_INT 0
63662: PUSH
63663: LD_INT 0
63665: PUSH
63666: LD_VAR 0 3
63670: PUSH
63671: LD_INT 0
63673: PUSH
63674: LD_INT 0
63676: PUSH
63677: LD_INT 0
63679: PUSH
63680: EMPTY
63681: LIST
63682: LIST
63683: LIST
63684: LIST
63685: LIST
63686: LIST
63687: LIST
63688: PUSH
63689: EMPTY
63690: LIST
63691: LIST
63692: PPUSH
63693: CALL_OW 447
// display_strings := [ driver , GetTaskList ( driver ) ] ;
63697: LD_ADDR_OWVAR 47
63701: PUSH
63702: LD_VAR 0 1
63706: PUSH
63707: LD_VAR 0 1
63711: PPUSH
63712: CALL_OW 437
63716: PUSH
63717: EMPTY
63718: LIST
63719: LIST
63720: ST_TO_ADDR
// end ;
63721: LD_VAR 0 2
63725: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
63726: LD_INT 0
63728: PPUSH
63729: PPUSH
63730: PPUSH
// tmp := [ ] ;
63731: LD_ADDR_VAR 0 5
63735: PUSH
63736: EMPTY
63737: ST_TO_ADDR
// for i in units do
63738: LD_ADDR_VAR 0 4
63742: PUSH
63743: LD_VAR 0 1
63747: PUSH
63748: FOR_IN
63749: IFFALSE 63787
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
63751: LD_ADDR_VAR 0 5
63755: PUSH
63756: LD_VAR 0 5
63760: PPUSH
63761: LD_VAR 0 5
63765: PUSH
63766: LD_INT 1
63768: PLUS
63769: PPUSH
63770: LD_VAR 0 4
63774: PPUSH
63775: CALL_OW 256
63779: PPUSH
63780: CALL_OW 2
63784: ST_TO_ADDR
63785: GO 63748
63787: POP
63788: POP
// if not tmp then
63789: LD_VAR 0 5
63793: NOT
63794: IFFALSE 63798
// exit ;
63796: GO 63846
// if asc then
63798: LD_VAR 0 2
63802: IFFALSE 63826
// result := SortListByListAsc ( units , tmp ) else
63804: LD_ADDR_VAR 0 3
63808: PUSH
63809: LD_VAR 0 1
63813: PPUSH
63814: LD_VAR 0 5
63818: PPUSH
63819: CALL_OW 76
63823: ST_TO_ADDR
63824: GO 63846
// result := SortListByListDesc ( units , tmp ) ;
63826: LD_ADDR_VAR 0 3
63830: PUSH
63831: LD_VAR 0 1
63835: PPUSH
63836: LD_VAR 0 5
63840: PPUSH
63841: CALL_OW 77
63845: ST_TO_ADDR
// end ;
63846: LD_VAR 0 3
63850: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
63851: LD_INT 0
63853: PPUSH
63854: PPUSH
// task := GetTaskList ( mech ) ;
63855: LD_ADDR_VAR 0 4
63859: PUSH
63860: LD_VAR 0 1
63864: PPUSH
63865: CALL_OW 437
63869: ST_TO_ADDR
// if not task then
63870: LD_VAR 0 4
63874: NOT
63875: IFFALSE 63879
// exit ;
63877: GO 63921
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
63879: LD_ADDR_VAR 0 3
63883: PUSH
63884: LD_VAR 0 4
63888: PUSH
63889: LD_INT 1
63891: ARRAY
63892: PUSH
63893: LD_INT 1
63895: ARRAY
63896: PUSH
63897: LD_STRING r
63899: EQUAL
63900: PUSH
63901: LD_VAR 0 4
63905: PUSH
63906: LD_INT 1
63908: ARRAY
63909: PUSH
63910: LD_INT 4
63912: ARRAY
63913: PUSH
63914: LD_VAR 0 2
63918: EQUAL
63919: AND
63920: ST_TO_ADDR
// end ;
63921: LD_VAR 0 3
63925: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
63926: LD_INT 0
63928: PPUSH
// SetDir ( unit , d ) ;
63929: LD_VAR 0 1
63933: PPUSH
63934: LD_VAR 0 4
63938: PPUSH
63939: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
63943: LD_VAR 0 1
63947: PPUSH
63948: LD_VAR 0 2
63952: PPUSH
63953: LD_VAR 0 3
63957: PPUSH
63958: LD_VAR 0 5
63962: PPUSH
63963: CALL_OW 48
// end ;
63967: LD_VAR 0 6
63971: RET
// export function ToNaturalNumber ( number ) ; begin
63972: LD_INT 0
63974: PPUSH
// result := number div 1 ;
63975: LD_ADDR_VAR 0 2
63979: PUSH
63980: LD_VAR 0 1
63984: PUSH
63985: LD_INT 1
63987: DIV
63988: ST_TO_ADDR
// if number < 0 then
63989: LD_VAR 0 1
63993: PUSH
63994: LD_INT 0
63996: LESS
63997: IFFALSE 64007
// result := 0 ;
63999: LD_ADDR_VAR 0 2
64003: PUSH
64004: LD_INT 0
64006: ST_TO_ADDR
// end ;
64007: LD_VAR 0 2
64011: RET
// export function SortByClass ( units , class ) ; var un ; begin
64012: LD_INT 0
64014: PPUSH
64015: PPUSH
// if not units or not class then
64016: LD_VAR 0 1
64020: NOT
64021: PUSH
64022: LD_VAR 0 2
64026: NOT
64027: OR
64028: IFFALSE 64032
// exit ;
64030: GO 64127
// result := [ ] ;
64032: LD_ADDR_VAR 0 3
64036: PUSH
64037: EMPTY
64038: ST_TO_ADDR
// for un in units do
64039: LD_ADDR_VAR 0 4
64043: PUSH
64044: LD_VAR 0 1
64048: PUSH
64049: FOR_IN
64050: IFFALSE 64125
// if GetClass ( un ) = class then
64052: LD_VAR 0 4
64056: PPUSH
64057: CALL_OW 257
64061: PUSH
64062: LD_VAR 0 2
64066: EQUAL
64067: IFFALSE 64094
// result := Insert ( result , 1 , un ) else
64069: LD_ADDR_VAR 0 3
64073: PUSH
64074: LD_VAR 0 3
64078: PPUSH
64079: LD_INT 1
64081: PPUSH
64082: LD_VAR 0 4
64086: PPUSH
64087: CALL_OW 2
64091: ST_TO_ADDR
64092: GO 64123
// result := Replace ( result , result + 1 , un ) ;
64094: LD_ADDR_VAR 0 3
64098: PUSH
64099: LD_VAR 0 3
64103: PPUSH
64104: LD_VAR 0 3
64108: PUSH
64109: LD_INT 1
64111: PLUS
64112: PPUSH
64113: LD_VAR 0 4
64117: PPUSH
64118: CALL_OW 1
64122: ST_TO_ADDR
64123: GO 64049
64125: POP
64126: POP
// end ; end_of_file
64127: LD_VAR 0 3
64131: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
64132: LD_VAR 0 1
64136: PUSH
64137: LD_INT 200
64139: DOUBLE
64140: GREATEREQUAL
64141: IFFALSE 64149
64143: LD_INT 299
64145: DOUBLE
64146: LESSEQUAL
64147: IFTRUE 64151
64149: GO 64183
64151: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
64152: LD_VAR 0 1
64156: PPUSH
64157: LD_VAR 0 2
64161: PPUSH
64162: LD_VAR 0 3
64166: PPUSH
64167: LD_VAR 0 4
64171: PPUSH
64172: LD_VAR 0 5
64176: PPUSH
64177: CALL 21351 0 5
64181: GO 64260
64183: LD_INT 300
64185: DOUBLE
64186: GREATEREQUAL
64187: IFFALSE 64195
64189: LD_INT 399
64191: DOUBLE
64192: LESSEQUAL
64193: IFTRUE 64197
64195: GO 64259
64197: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
64198: LD_VAR 0 1
64202: PPUSH
64203: LD_VAR 0 2
64207: PPUSH
64208: LD_VAR 0 3
64212: PPUSH
64213: LD_VAR 0 4
64217: PPUSH
64218: LD_VAR 0 5
64222: PPUSH
64223: LD_VAR 0 6
64227: PPUSH
64228: LD_VAR 0 7
64232: PPUSH
64233: LD_VAR 0 8
64237: PPUSH
64238: LD_VAR 0 9
64242: PPUSH
64243: LD_VAR 0 10
64247: PPUSH
64248: LD_VAR 0 11
64252: PPUSH
64253: CALL 19239 0 11
64257: GO 64260
64259: POP
// end ;
64260: PPOPN 11
64262: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
64263: LD_VAR 0 1
64267: PPUSH
64268: LD_VAR 0 2
64272: PPUSH
64273: LD_VAR 0 3
64277: PPUSH
64278: LD_VAR 0 4
64282: PPUSH
64283: LD_VAR 0 5
64287: PPUSH
64288: CALL 21333 0 5
// end ; end_of_file
64292: PPOPN 5
64294: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
64295: LD_VAR 0 1
64299: PPUSH
64300: LD_VAR 0 2
64304: PPUSH
64305: LD_VAR 0 3
64309: PPUSH
64310: LD_VAR 0 4
64314: PPUSH
64315: LD_VAR 0 5
64319: PPUSH
64320: LD_VAR 0 6
64324: PPUSH
64325: CALL 8047 0 6
// end ;
64329: PPOPN 6
64331: END
