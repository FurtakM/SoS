// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RandomizeAll ;
  11: CALL_OW 11
// Init ;
  15: CALL 79 0 0
// InitRestrictions ;
  19: CALL 207 0 0
// if debug then
  23: LD_EXP 1
  27: IFFALSE 33
// DebugMode ;
  29: CALL 288 0 0
// SpawnApeman ( apemanStartArea , 2 ) ;
  33: LD_INT 12
  35: PPUSH
  36: LD_INT 2
  38: PPUSH
  39: CALL 595 0 2
// SpawnApeman ( apemanArea , [ 10 , 8 , 7 ] [ Difficulty ] ) ;
  43: LD_INT 11
  45: PPUSH
  46: LD_INT 10
  48: PUSH
  49: LD_INT 8
  51: PUSH
  52: LD_INT 7
  54: PUSH
  55: EMPTY
  56: LIST
  57: LIST
  58: LIST
  59: PUSH
  60: LD_OWVAR 67
  64: ARRAY
  65: PPUSH
  66: CALL 595 0 2
// PrepareAmericans ;
  70: CALL 1194 0 0
// Action ;
  74: CALL 2130 0 0
// end ;
  78: END
// export debug ; export mission_prefix , mission_prefix_prev ; export deltaBuilded , denisArrives , Delta , radar_allowed , first_apeman_tamed , apeman_army , radar_researched , radar_builded ; export apeman_counter , arab_spotted , end_mission , apeKillCounter ; function Init ; begin
  79: LD_INT 0
  81: PPUSH
// debug := false ;
  82: LD_ADDR_EXP 1
  86: PUSH
  87: LD_INT 0
  89: ST_TO_ADDR
// mission_prefix := 05_ ;
  90: LD_ADDR_EXP 2
  94: PUSH
  95: LD_STRING 05_
  97: ST_TO_ADDR
// mission_prefix_prev := 05a_ ;
  98: LD_ADDR_EXP 3
 102: PUSH
 103: LD_STRING 05a_
 105: ST_TO_ADDR
// deltaBuilded := false ;
 106: LD_ADDR_EXP 4
 110: PUSH
 111: LD_INT 0
 113: ST_TO_ADDR
// denisArrives := false ;
 114: LD_ADDR_EXP 5
 118: PUSH
 119: LD_INT 0
 121: ST_TO_ADDR
// radar_allowed := false ;
 122: LD_ADDR_EXP 7
 126: PUSH
 127: LD_INT 0
 129: ST_TO_ADDR
// first_apeman_tamed := false ;
 130: LD_ADDR_EXP 8
 134: PUSH
 135: LD_INT 0
 137: ST_TO_ADDR
// arab_spotted := false ;
 138: LD_ADDR_EXP 13
 142: PUSH
 143: LD_INT 0
 145: ST_TO_ADDR
// end_mission := false ;
 146: LD_ADDR_EXP 14
 150: PUSH
 151: LD_INT 0
 153: ST_TO_ADDR
// apeman_army := false ;
 154: LD_ADDR_EXP 9
 158: PUSH
 159: LD_INT 0
 161: ST_TO_ADDR
// radar_researched := false ;
 162: LD_ADDR_EXP 10
 166: PUSH
 167: LD_INT 0
 169: ST_TO_ADDR
// radar_builded := false ;
 170: LD_ADDR_EXP 11
 174: PUSH
 175: LD_INT 0
 177: ST_TO_ADDR
// apeman_counter := 0 ;
 178: LD_ADDR_EXP 12
 182: PUSH
 183: LD_INT 0
 185: ST_TO_ADDR
// Delta := 0 ;
 186: LD_ADDR_EXP 6
 190: PUSH
 191: LD_INT 0
 193: ST_TO_ADDR
// apeKillCounter := 0 ;
 194: LD_ADDR_EXP 15
 198: PUSH
 199: LD_INT 0
 201: ST_TO_ADDR
// end ;
 202: LD_VAR 0 1
 206: RET
// function InitRestrictions ; begin
 207: LD_INT 0
 209: PPUSH
// SetRestrict ( b_lab_half , 1 , state_enabled ) ;
 210: LD_INT 7
 212: PPUSH
 213: LD_INT 1
 215: PPUSH
 216: LD_INT 1
 218: PPUSH
 219: CALL_OW 324
// SetRestrict ( b_lab_full , 1 , state_enabled ) ;
 223: LD_INT 8
 225: PPUSH
 226: LD_INT 1
 228: PPUSH
 229: LD_INT 1
 231: PPUSH
 232: CALL_OW 324
// SetRestrict ( b_lab_weapon , 1 , state_enabled ) ;
 236: LD_INT 10
 238: PPUSH
 239: LD_INT 1
 241: PPUSH
 242: LD_INT 1
 244: PPUSH
 245: CALL_OW 324
// SetTech ( tech_gatling , 1 , LoadVariable ( GatlingInGamma , 1 ) ) ;
 249: LD_INT 69
 251: PPUSH
 252: LD_INT 1
 254: PPUSH
 255: LD_STRING GatlingInGamma
 257: PPUSH
 258: LD_INT 1
 260: PPUSH
 261: CALL_OW 30
 265: PPUSH
 266: CALL_OW 322
// SetTech ( tech_weap1 , 1 , state_enabled ) ;
 270: LD_INT 51
 272: PPUSH
 273: LD_INT 1
 275: PPUSH
 276: LD_INT 1
 278: PPUSH
 279: CALL_OW 322
// end ;
 283: LD_VAR 0 1
 287: RET
// function DebugMode ; begin
 288: LD_INT 0
 290: PPUSH
// FogOff ( 1 ) ;
 291: LD_INT 1
 293: PPUSH
 294: CALL_OW 344
// Difficulty := 2 ;
 298: LD_ADDR_OWVAR 67
 302: PUSH
 303: LD_INT 2
 305: ST_TO_ADDR
// end ;
 306: LD_VAR 0 1
 310: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 0 ] ] ) >= 7 do
 311: LD_INT 22
 313: PUSH
 314: LD_INT 1
 316: PUSH
 317: EMPTY
 318: LIST
 319: LIST
 320: PUSH
 321: LD_INT 23
 323: PUSH
 324: LD_INT 0
 326: PUSH
 327: EMPTY
 328: LIST
 329: LIST
 330: PUSH
 331: EMPTY
 332: LIST
 333: LIST
 334: PPUSH
 335: CALL_OW 69
 339: PUSH
 340: LD_INT 7
 342: GREATEREQUAL
 343: IFFALSE 355
 345: GO 347
 347: DISABLE
// SetAchievement ( ACH_TAME ) ;
 348: LD_STRING ACH_TAME
 350: PPUSH
 351: CALL_OW 543
 355: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_bweapon , us_radar ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_radar ] ] ) do
 356: LD_INT 22
 358: PUSH
 359: LD_INT 1
 361: PUSH
 362: EMPTY
 363: LIST
 364: LIST
 365: PUSH
 366: LD_INT 35
 368: PUSH
 369: LD_INT 11
 371: PUSH
 372: EMPTY
 373: LIST
 374: LIST
 375: PUSH
 376: EMPTY
 377: LIST
 378: LIST
 379: PPUSH
 380: CALL_OW 69
 384: PUSH
 385: LD_INT 22
 387: PUSH
 388: LD_INT 1
 390: PUSH
 391: EMPTY
 392: LIST
 393: LIST
 394: PUSH
 395: LD_INT 34
 397: PUSH
 398: LD_INT 11
 400: PUSH
 401: EMPTY
 402: LIST
 403: LIST
 404: PUSH
 405: EMPTY
 406: LIST
 407: LIST
 408: PPUSH
 409: CALL_OW 69
 413: AND
 414: IFFALSE 426
 416: GO 418
 418: DISABLE
// SetAchievement ( ACH_RADAR ) ; end_of_file
 419: LD_STRING ACH_RADAR
 421: PPUSH
 422: CALL_OW 543
 426: END
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 427: LD_INT 0
 429: PPUSH
// uc_side := side ;
 430: LD_ADDR_OWVAR 20
 434: PUSH
 435: LD_VAR 0 1
 439: ST_TO_ADDR
// uc_nation := nation ;
 440: LD_ADDR_OWVAR 21
 444: PUSH
 445: LD_VAR 0 2
 449: ST_TO_ADDR
// vc_chassis := chassis ;
 450: LD_ADDR_OWVAR 37
 454: PUSH
 455: LD_VAR 0 3
 459: ST_TO_ADDR
// vc_engine := engine ;
 460: LD_ADDR_OWVAR 39
 464: PUSH
 465: LD_VAR 0 4
 469: ST_TO_ADDR
// vc_control := control ;
 470: LD_ADDR_OWVAR 38
 474: PUSH
 475: LD_VAR 0 5
 479: ST_TO_ADDR
// vc_weapon := weapon ;
 480: LD_ADDR_OWVAR 40
 484: PUSH
 485: LD_VAR 0 6
 489: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 490: LD_ADDR_OWVAR 41
 494: PUSH
 495: LD_VAR 0 7
 499: ST_TO_ADDR
// result := CreateVehicle ;
 500: LD_ADDR_VAR 0 8
 504: PUSH
 505: CALL_OW 45
 509: ST_TO_ADDR
// end ;
 510: LD_VAR 0 8
 514: RET
// export function SayX ( units , ident ) ; var i ; begin
 515: LD_INT 0
 517: PPUSH
 518: PPUSH
// result := false ;
 519: LD_ADDR_VAR 0 3
 523: PUSH
 524: LD_INT 0
 526: ST_TO_ADDR
// if not units then
 527: LD_VAR 0 1
 531: NOT
 532: IFFALSE 536
// exit ;
 534: GO 590
// for i in units do
 536: LD_ADDR_VAR 0 4
 540: PUSH
 541: LD_VAR 0 1
 545: PUSH
 546: FOR_IN
 547: IFFALSE 588
// if IsOk ( i ) then
 549: LD_VAR 0 4
 553: PPUSH
 554: CALL_OW 302
 558: IFFALSE 586
// begin Say ( i , ident ) ;
 560: LD_VAR 0 4
 564: PPUSH
 565: LD_VAR 0 2
 569: PPUSH
 570: CALL_OW 88
// result := i ;
 574: LD_ADDR_VAR 0 3
 578: PUSH
 579: LD_VAR 0 4
 583: ST_TO_ADDR
// break ;
 584: GO 588
// end ;
 586: GO 546
 588: POP
 589: POP
// end ;
 590: LD_VAR 0 3
 594: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 595: LD_INT 0
 597: PPUSH
 598: PPUSH
// InitUc ;
 599: CALL_OW 18
// InitHc ;
 603: CALL_OW 19
// uc_side := 0 ;
 607: LD_ADDR_OWVAR 20
 611: PUSH
 612: LD_INT 0
 614: ST_TO_ADDR
// uc_nation := 0 ;
 615: LD_ADDR_OWVAR 21
 619: PUSH
 620: LD_INT 0
 622: ST_TO_ADDR
// for i = 1 to amount do
 623: LD_ADDR_VAR 0 4
 627: PUSH
 628: DOUBLE
 629: LD_INT 1
 631: DEC
 632: ST_TO_ADDR
 633: LD_VAR 0 2
 637: PUSH
 638: FOR_TO
 639: IFFALSE 721
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 641: LD_ADDR_OWVAR 29
 645: PUSH
 646: LD_INT 9
 648: PPUSH
 649: LD_INT 12
 651: PPUSH
 652: CALL_OW 12
 656: PUSH
 657: LD_INT 9
 659: PPUSH
 660: LD_INT 12
 662: PPUSH
 663: CALL_OW 12
 667: PUSH
 668: EMPTY
 669: LIST
 670: LIST
 671: ST_TO_ADDR
// hc_agressivity := rand ( - 5 , 5 ) ;
 672: LD_ADDR_OWVAR 35
 676: PUSH
 677: LD_INT 5
 679: NEG
 680: PPUSH
 681: LD_INT 5
 683: PPUSH
 684: CALL_OW 12
 688: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 689: LD_INT 0
 691: PPUSH
 692: LD_INT 12
 694: PPUSH
 695: LD_INT 1
 697: PPUSH
 698: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 702: CALL_OW 44
 706: PPUSH
 707: LD_VAR 0 1
 711: PPUSH
 712: LD_INT 0
 714: PPUSH
 715: CALL_OW 49
// end ;
 719: GO 638
 721: POP
 722: POP
// InitHc ;
 723: CALL_OW 19
// end ;
 727: LD_VAR 0 3
 731: RET
// export function Attack ( unit , enemy_list ) ; var target , targets_list ; begin
 732: LD_INT 0
 734: PPUSH
 735: PPUSH
 736: PPUSH
// if not unit then
 737: LD_VAR 0 1
 741: NOT
 742: IFFALSE 746
// exit ;
 744: GO 1189
// if IsInUnit ( unit ) then
 746: LD_VAR 0 1
 750: PPUSH
 751: CALL_OW 310
 755: IFFALSE 772
// unit := IsDrivenBy ( unit ) ;
 757: LD_ADDR_VAR 0 1
 761: PUSH
 762: LD_VAR 0 1
 766: PPUSH
 767: CALL_OW 311
 771: ST_TO_ADDR
// targets_list := [ ] ;
 772: LD_ADDR_VAR 0 5
 776: PUSH
 777: EMPTY
 778: ST_TO_ADDR
// target := UnitFilter ( enemy_list , [ [ f_lives , 250 ] , [ f_not , [ f_weapon , us_cargo_bay ] ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 779: LD_ADDR_VAR 0 4
 783: PUSH
 784: LD_VAR 0 2
 788: PPUSH
 789: LD_INT 24
 791: PUSH
 792: LD_INT 250
 794: PUSH
 795: EMPTY
 796: LIST
 797: LIST
 798: PUSH
 799: LD_INT 3
 801: PUSH
 802: LD_INT 34
 804: PUSH
 805: LD_INT 12
 807: PUSH
 808: EMPTY
 809: LIST
 810: LIST
 811: PUSH
 812: EMPTY
 813: LIST
 814: LIST
 815: PUSH
 816: LD_INT 21
 818: PUSH
 819: LD_INT 2
 821: PUSH
 822: EMPTY
 823: LIST
 824: LIST
 825: PUSH
 826: LD_INT 58
 828: PUSH
 829: EMPTY
 830: LIST
 831: PUSH
 832: EMPTY
 833: LIST
 834: LIST
 835: LIST
 836: LIST
 837: PPUSH
 838: CALL_OW 72
 842: ST_TO_ADDR
// if GetDistUnits ( NearestUnitToUnit ( target , unit ) , unit ) < 11 and not IsInUnit ( unit ) then
 843: LD_VAR 0 4
 847: PPUSH
 848: LD_VAR 0 1
 852: PPUSH
 853: CALL_OW 74
 857: PPUSH
 858: LD_VAR 0 1
 862: PPUSH
 863: CALL_OW 296
 867: PUSH
 868: LD_INT 11
 870: LESS
 871: PUSH
 872: LD_VAR 0 1
 876: PPUSH
 877: CALL_OW 310
 881: NOT
 882: AND
 883: IFFALSE 911
// begin ComEnterUnit ( unit , NearestUnitToUnit ( target , unit ) ) ;
 885: LD_VAR 0 1
 889: PPUSH
 890: LD_VAR 0 4
 894: PPUSH
 895: LD_VAR 0 1
 899: PPUSH
 900: CALL_OW 74
 904: PPUSH
 905: CALL_OW 120
// exit ;
 909: GO 1189
// end ; targets_list := [ UnitFilter ( enemy_list , [ [ f_type , unit_human ] , [ f_not , [ f_inside ] ] ] ) , UnitFilter ( enemy_list , [ f_type , unit_vehicle ] ) , UnitFilter ( enemy_list , [ [ f_type , unit_building ] , [ f_not , [ f_empty ] ] ] ) , enemy_list ] ;
 911: LD_ADDR_VAR 0 5
 915: PUSH
 916: LD_VAR 0 2
 920: PPUSH
 921: LD_INT 21
 923: PUSH
 924: LD_INT 1
 926: PUSH
 927: EMPTY
 928: LIST
 929: LIST
 930: PUSH
 931: LD_INT 3
 933: PUSH
 934: LD_INT 54
 936: PUSH
 937: EMPTY
 938: LIST
 939: PUSH
 940: EMPTY
 941: LIST
 942: LIST
 943: PUSH
 944: EMPTY
 945: LIST
 946: LIST
 947: PPUSH
 948: CALL_OW 72
 952: PUSH
 953: LD_VAR 0 2
 957: PPUSH
 958: LD_INT 21
 960: PUSH
 961: LD_INT 2
 963: PUSH
 964: EMPTY
 965: LIST
 966: LIST
 967: PPUSH
 968: CALL_OW 72
 972: PUSH
 973: LD_VAR 0 2
 977: PPUSH
 978: LD_INT 21
 980: PUSH
 981: LD_INT 3
 983: PUSH
 984: EMPTY
 985: LIST
 986: LIST
 987: PUSH
 988: LD_INT 3
 990: PUSH
 991: LD_INT 58
 993: PUSH
 994: EMPTY
 995: LIST
 996: PUSH
 997: EMPTY
 998: LIST
 999: LIST
1000: PUSH
1001: EMPTY
1002: LIST
1003: LIST
1004: PPUSH
1005: CALL_OW 72
1009: PUSH
1010: LD_VAR 0 2
1014: PUSH
1015: EMPTY
1016: LIST
1017: LIST
1018: LIST
1019: LIST
1020: ST_TO_ADDR
// for target in targets_list do
1021: LD_ADDR_VAR 0 4
1025: PUSH
1026: LD_VAR 0 5
1030: PUSH
1031: FOR_IN
1032: IFFALSE 1187
// begin if target then
1034: LD_VAR 0 4
1038: IFFALSE 1185
// if GetTag ( unit ) = 11 and ( GetType ( NearestUnitToUnit ( target , unit ) ) = unit_building or GetWeapon ( NearestUnitToUnit ( target , unit ) ) = us_cargo_bay ) then
1040: LD_VAR 0 1
1044: PPUSH
1045: CALL_OW 110
1049: PUSH
1050: LD_INT 11
1052: EQUAL
1053: PUSH
1054: LD_VAR 0 4
1058: PPUSH
1059: LD_VAR 0 1
1063: PPUSH
1064: CALL_OW 74
1068: PPUSH
1069: CALL_OW 247
1073: PUSH
1074: LD_INT 3
1076: EQUAL
1077: PUSH
1078: LD_VAR 0 4
1082: PPUSH
1083: LD_VAR 0 1
1087: PPUSH
1088: CALL_OW 74
1092: PPUSH
1093: CALL_OW 264
1097: PUSH
1098: LD_INT 12
1100: EQUAL
1101: OR
1102: AND
1103: IFFALSE 1149
// begin ComPlaceDelayedCharge ( unit , 0 , 0 , NearestUnitToUnit ( target , unit ) ) ;
1105: LD_VAR 0 1
1109: PPUSH
1110: LD_INT 0
1112: PPUSH
1113: LD_INT 0
1115: PPUSH
1116: LD_VAR 0 4
1120: PPUSH
1121: LD_VAR 0 1
1125: PPUSH
1126: CALL_OW 74
1130: PPUSH
1131: CALL_OW 132
// SetTag ( unit , 0 ) ;
1135: LD_VAR 0 1
1139: PPUSH
1140: LD_INT 0
1142: PPUSH
1143: CALL_OW 109
// end else
1147: GO 1185
// if not HasTask ( unit ) then
1149: LD_VAR 0 1
1153: PPUSH
1154: CALL_OW 314
1158: NOT
1159: IFFALSE 1185
// ComAttackUnit ( unit , NearestUnitToUnit ( target , unit ) ) ;
1161: LD_VAR 0 1
1165: PPUSH
1166: LD_VAR 0 4
1170: PPUSH
1171: LD_VAR 0 1
1175: PPUSH
1176: CALL_OW 74
1180: PPUSH
1181: CALL_OW 115
// end ;
1185: GO 1031
1187: POP
1188: POP
// end ; end_of_file
1189: LD_VAR 0 3
1193: RET
// export JMM , Gladstone , Harrison , Denis , Brown , Donaldson , Lisa , Frank , Bobby , Cyrus ; export others ; export function PrepareAmericans ; var i , points , veh , tmp ; begin
1194: LD_INT 0
1196: PPUSH
1197: PPUSH
1198: PPUSH
1199: PPUSH
1200: PPUSH
// uc_nation := 1 ;
1201: LD_ADDR_OWVAR 21
1205: PUSH
1206: LD_INT 1
1208: ST_TO_ADDR
// uc_side := 4 ;
1209: LD_ADDR_OWVAR 20
1213: PUSH
1214: LD_INT 4
1216: ST_TO_ADDR
// Denis := PrepareUnit ( Denis , false ,  ) ;
1217: LD_ADDR_EXP 19
1221: PUSH
1222: LD_STRING Denis
1224: PPUSH
1225: LD_INT 0
1227: PPUSH
1228: LD_STRING 
1230: PPUSH
1231: CALL 25131 0 3
1235: ST_TO_ADDR
// Harrison := PrepareUnit ( Harisson , false ,  ) ;
1236: LD_ADDR_EXP 18
1240: PUSH
1241: LD_STRING Harisson
1243: PPUSH
1244: LD_INT 0
1246: PPUSH
1247: LD_STRING 
1249: PPUSH
1250: CALL 25131 0 3
1254: ST_TO_ADDR
// uc_side := 1 ;
1255: LD_ADDR_OWVAR 20
1259: PUSH
1260: LD_INT 1
1262: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debug ) , mission_prefix_prev ) ;
1263: LD_ADDR_EXP 16
1267: PUSH
1268: LD_STRING JMM
1270: PPUSH
1271: LD_EXP 1
1275: NOT
1276: PPUSH
1277: LD_EXP 3
1281: PPUSH
1282: CALL 25131 0 3
1286: ST_TO_ADDR
// Gladstone := PrepareUnit ( Gladstone , false , mission_prefix_prev ) ;
1287: LD_ADDR_EXP 17
1291: PUSH
1292: LD_STRING Gladstone
1294: PPUSH
1295: LD_INT 0
1297: PPUSH
1298: LD_EXP 3
1302: PPUSH
1303: CALL 25131 0 3
1307: ST_TO_ADDR
// if LoadVariable ( BrownInDelta , debug ) then
1308: LD_STRING BrownInDelta
1310: PPUSH
1311: LD_EXP 1
1315: PPUSH
1316: CALL_OW 30
1320: IFFALSE 1362
// begin Brown := PrepareUnit ( Brown , ( not debug ) , mission_prefix_prev ) ;
1322: LD_ADDR_EXP 20
1326: PUSH
1327: LD_STRING Brown
1329: PPUSH
1330: LD_EXP 1
1334: NOT
1335: PPUSH
1336: LD_EXP 3
1340: PPUSH
1341: CALL 25131 0 3
1345: ST_TO_ADDR
// tmp := tmp ^ Brown ;
1346: LD_ADDR_VAR 0 5
1350: PUSH
1351: LD_VAR 0 5
1355: PUSH
1356: LD_EXP 20
1360: ADD
1361: ST_TO_ADDR
// end ; if LoadVariable ( DonaldsonInDelta , debug ) then
1362: LD_STRING DonaldsonInDelta
1364: PPUSH
1365: LD_EXP 1
1369: PPUSH
1370: CALL_OW 30
1374: IFFALSE 1416
// begin Donaldson := PrepareUnit ( Donaldson , ( not debug ) , mission_prefix_prev ) ;
1376: LD_ADDR_EXP 21
1380: PUSH
1381: LD_STRING Donaldson
1383: PPUSH
1384: LD_EXP 1
1388: NOT
1389: PPUSH
1390: LD_EXP 3
1394: PPUSH
1395: CALL 25131 0 3
1399: ST_TO_ADDR
// tmp := tmp ^ Donaldson ;
1400: LD_ADDR_VAR 0 5
1404: PUSH
1405: LD_VAR 0 5
1409: PUSH
1410: LD_EXP 21
1414: ADD
1415: ST_TO_ADDR
// end ; if LoadVariable ( LisaInDelta , debug ) then
1416: LD_STRING LisaInDelta
1418: PPUSH
1419: LD_EXP 1
1423: PPUSH
1424: CALL_OW 30
1428: IFFALSE 1470
// begin Lisa := PrepareUnit ( Lisa , ( not debug ) , mission_prefix_prev ) ;
1430: LD_ADDR_EXP 22
1434: PUSH
1435: LD_STRING Lisa
1437: PPUSH
1438: LD_EXP 1
1442: NOT
1443: PPUSH
1444: LD_EXP 3
1448: PPUSH
1449: CALL 25131 0 3
1453: ST_TO_ADDR
// tmp := tmp ^ Lisa ;
1454: LD_ADDR_VAR 0 5
1458: PUSH
1459: LD_VAR 0 5
1463: PUSH
1464: LD_EXP 22
1468: ADD
1469: ST_TO_ADDR
// end ; if LoadVariable ( FrankInDelta , debug ) then
1470: LD_STRING FrankInDelta
1472: PPUSH
1473: LD_EXP 1
1477: PPUSH
1478: CALL_OW 30
1482: IFFALSE 1524
// begin Frank := PrepareUnit ( Frank , ( not debug ) , mission_prefix_prev ) ;
1484: LD_ADDR_EXP 23
1488: PUSH
1489: LD_STRING Frank
1491: PPUSH
1492: LD_EXP 1
1496: NOT
1497: PPUSH
1498: LD_EXP 3
1502: PPUSH
1503: CALL 25131 0 3
1507: ST_TO_ADDR
// tmp := tmp ^ Frank ;
1508: LD_ADDR_VAR 0 5
1512: PUSH
1513: LD_VAR 0 5
1517: PUSH
1518: LD_EXP 23
1522: ADD
1523: ST_TO_ADDR
// end ; if LoadVariable ( BobbyInDelta , 0 ) then
1524: LD_STRING BobbyInDelta
1526: PPUSH
1527: LD_INT 0
1529: PPUSH
1530: CALL_OW 30
1534: IFFALSE 1576
// begin Bobby := PrepareUnit ( Bobby , ( not debug ) , mission_prefix_prev ) ;
1536: LD_ADDR_EXP 24
1540: PUSH
1541: LD_STRING Bobby
1543: PPUSH
1544: LD_EXP 1
1548: NOT
1549: PPUSH
1550: LD_EXP 3
1554: PPUSH
1555: CALL 25131 0 3
1559: ST_TO_ADDR
// tmp := tmp ^ Bobby ;
1560: LD_ADDR_VAR 0 5
1564: PUSH
1565: LD_VAR 0 5
1569: PUSH
1570: LD_EXP 24
1574: ADD
1575: ST_TO_ADDR
// end ; if LoadVariable ( CyrusInDelta , 0 ) then
1576: LD_STRING CyrusInDelta
1578: PPUSH
1579: LD_INT 0
1581: PPUSH
1582: CALL_OW 30
1586: IFFALSE 1628
// begin Cyrus := PrepareUnit ( Cyrus , ( not debug ) , mission_prefix_prev ) ;
1588: LD_ADDR_EXP 25
1592: PUSH
1593: LD_STRING Cyrus
1595: PPUSH
1596: LD_EXP 1
1600: NOT
1601: PPUSH
1602: LD_EXP 3
1606: PPUSH
1607: CALL 25131 0 3
1611: ST_TO_ADDR
// tmp := tmp ^ Cyrus ;
1612: LD_ADDR_VAR 0 5
1616: PUSH
1617: LD_VAR 0 5
1621: PUSH
1622: LD_EXP 25
1626: ADD
1627: ST_TO_ADDR
// end ; others := CreateCharacterSet ( othersDelta ) ;
1628: LD_ADDR_EXP 26
1632: PUSH
1633: LD_STRING othersDelta
1635: PPUSH
1636: CALL_OW 31
1640: ST_TO_ADDR
// if not others and debug then
1641: LD_EXP 26
1645: NOT
1646: PUSH
1647: LD_EXP 1
1651: AND
1652: IFFALSE 1717
// begin InitHc ;
1654: CALL_OW 19
// for i = 1 to 2 do
1658: LD_ADDR_VAR 0 2
1662: PUSH
1663: DOUBLE
1664: LD_INT 1
1666: DEC
1667: ST_TO_ADDR
1668: LD_INT 2
1670: PUSH
1671: FOR_TO
1672: IFFALSE 1715
// begin PrepareHuman ( false , i mod 4 + 1 , 3 ) ;
1674: LD_INT 0
1676: PPUSH
1677: LD_VAR 0 2
1681: PUSH
1682: LD_INT 4
1684: MOD
1685: PUSH
1686: LD_INT 1
1688: PLUS
1689: PPUSH
1690: LD_INT 3
1692: PPUSH
1693: CALL_OW 380
// others := others ^ CreateHuman ;
1697: LD_ADDR_EXP 26
1701: PUSH
1702: LD_EXP 26
1706: PUSH
1707: CALL_OW 44
1711: ADD
1712: ST_TO_ADDR
// end ;
1713: GO 1671
1715: POP
1716: POP
// end ; if others then
1717: LD_EXP 26
1721: IFFALSE 1739
// tmp := tmp ^ others ;
1723: LD_ADDR_VAR 0 5
1727: PUSH
1728: LD_VAR 0 5
1732: PUSH
1733: LD_EXP 26
1737: ADD
1738: ST_TO_ADDR
// points := [ [ 28 , 49 ] , [ 33 , 54 ] , [ 38 , 56 ] ] ;
1739: LD_ADDR_VAR 0 3
1743: PUSH
1744: LD_INT 28
1746: PUSH
1747: LD_INT 49
1749: PUSH
1750: EMPTY
1751: LIST
1752: LIST
1753: PUSH
1754: LD_INT 33
1756: PUSH
1757: LD_INT 54
1759: PUSH
1760: EMPTY
1761: LIST
1762: LIST
1763: PUSH
1764: LD_INT 38
1766: PUSH
1767: LD_INT 56
1769: PUSH
1770: EMPTY
1771: LIST
1772: LIST
1773: PUSH
1774: EMPTY
1775: LIST
1776: LIST
1777: LIST
1778: ST_TO_ADDR
// veh := PrepareTank ( 1 , 1 , us_medium_wheeled , engine_solar , control_manual , us_cargo_bay , 80 ) ;
1779: LD_ADDR_VAR 0 4
1783: PUSH
1784: LD_INT 1
1786: PPUSH
1787: LD_INT 1
1789: PPUSH
1790: LD_INT 2
1792: PPUSH
1793: LD_INT 2
1795: PPUSH
1796: LD_INT 1
1798: PPUSH
1799: LD_INT 12
1801: PPUSH
1802: LD_INT 80
1804: PPUSH
1805: CALL 427 0 7
1809: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
1810: LD_VAR 0 4
1814: PPUSH
1815: LD_INT 1
1817: PPUSH
1818: CALL_OW 233
// PlaceUnitXY ( veh , points [ 1 ] [ 1 ] , points [ 1 ] [ 2 ] , false ) ;
1822: LD_VAR 0 4
1826: PPUSH
1827: LD_VAR 0 3
1831: PUSH
1832: LD_INT 1
1834: ARRAY
1835: PUSH
1836: LD_INT 1
1838: ARRAY
1839: PPUSH
1840: LD_VAR 0 3
1844: PUSH
1845: LD_INT 1
1847: ARRAY
1848: PUSH
1849: LD_INT 2
1851: ARRAY
1852: PPUSH
1853: LD_INT 0
1855: PPUSH
1856: CALL_OW 48
// SetCargo ( veh , mat_cans , 100 ) ;
1860: LD_VAR 0 4
1864: PPUSH
1865: LD_INT 1
1867: PPUSH
1868: LD_INT 100
1870: PPUSH
1871: CALL_OW 290
// PlaceHumanInUnit ( others [ 1 ] , veh ) ;
1875: LD_EXP 26
1879: PUSH
1880: LD_INT 1
1882: ARRAY
1883: PPUSH
1884: LD_VAR 0 4
1888: PPUSH
1889: CALL_OW 52
// veh := PrepareTank ( 1 , 1 , us_light_wheeled , engine_solar , control_manual , us_machine_gun , 80 ) ;
1893: LD_ADDR_VAR 0 4
1897: PUSH
1898: LD_INT 1
1900: PPUSH
1901: LD_INT 1
1903: PPUSH
1904: LD_INT 1
1906: PPUSH
1907: LD_INT 2
1909: PPUSH
1910: LD_INT 1
1912: PPUSH
1913: LD_INT 2
1915: PPUSH
1916: LD_INT 80
1918: PPUSH
1919: CALL 427 0 7
1923: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
1924: LD_VAR 0 4
1928: PPUSH
1929: LD_INT 1
1931: PPUSH
1932: CALL_OW 233
// PlaceUnitXY ( veh , points [ 2 ] [ 1 ] , points [ 2 ] [ 2 ] , false ) ;
1936: LD_VAR 0 4
1940: PPUSH
1941: LD_VAR 0 3
1945: PUSH
1946: LD_INT 2
1948: ARRAY
1949: PUSH
1950: LD_INT 1
1952: ARRAY
1953: PPUSH
1954: LD_VAR 0 3
1958: PUSH
1959: LD_INT 2
1961: ARRAY
1962: PUSH
1963: LD_INT 2
1965: ARRAY
1966: PPUSH
1967: LD_INT 0
1969: PPUSH
1970: CALL_OW 48
// PlaceHumanInUnit ( Gladstone , veh ) ;
1974: LD_EXP 17
1978: PPUSH
1979: LD_VAR 0 4
1983: PPUSH
1984: CALL_OW 52
// veh := PrepareTank ( 1 , 1 , us_light_wheeled , engine_solar , control_manual , us_light_gun , 80 ) ;
1988: LD_ADDR_VAR 0 4
1992: PUSH
1993: LD_INT 1
1995: PPUSH
1996: LD_INT 1
1998: PPUSH
1999: LD_INT 1
2001: PPUSH
2002: LD_INT 2
2004: PPUSH
2005: LD_INT 1
2007: PPUSH
2008: LD_INT 3
2010: PPUSH
2011: LD_INT 80
2013: PPUSH
2014: CALL 427 0 7
2018: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
2019: LD_VAR 0 4
2023: PPUSH
2024: LD_INT 1
2026: PPUSH
2027: CALL_OW 233
// PlaceUnitXY ( veh , points [ 3 ] [ 1 ] , points [ 3 ] [ 2 ] , false ) ;
2031: LD_VAR 0 4
2035: PPUSH
2036: LD_VAR 0 3
2040: PUSH
2041: LD_INT 3
2043: ARRAY
2044: PUSH
2045: LD_INT 1
2047: ARRAY
2048: PPUSH
2049: LD_VAR 0 3
2053: PUSH
2054: LD_INT 3
2056: ARRAY
2057: PUSH
2058: LD_INT 2
2060: ARRAY
2061: PPUSH
2062: LD_INT 0
2064: PPUSH
2065: CALL_OW 48
// PlaceHumanInUnit ( JMM , veh ) ;
2069: LD_EXP 16
2073: PPUSH
2074: LD_VAR 0 4
2078: PPUSH
2079: CALL_OW 52
// for i in tmp diff others [ 1 ] do
2083: LD_ADDR_VAR 0 2
2087: PUSH
2088: LD_VAR 0 5
2092: PUSH
2093: LD_EXP 26
2097: PUSH
2098: LD_INT 1
2100: ARRAY
2101: DIFF
2102: PUSH
2103: FOR_IN
2104: IFFALSE 2123
// PlaceUnitArea ( i , startArea , false ) ;
2106: LD_VAR 0 2
2110: PPUSH
2111: LD_INT 5
2113: PPUSH
2114: LD_INT 0
2116: PPUSH
2117: CALL_OW 49
2121: GO 2103
2123: POP
2124: POP
// end ; end_of_file
2125: LD_VAR 0 1
2129: RET
// export function Action ; var m ; begin
2130: LD_INT 0
2132: PPUSH
2133: PPUSH
// InGameOn ;
2134: CALL_OW 8
// CenterNowOnXY ( 28 , 51 ) ;
2138: LD_INT 28
2140: PPUSH
2141: LD_INT 51
2143: PPUSH
2144: CALL_OW 86
// Wait ( 3 ) ;
2148: LD_INT 3
2150: PPUSH
2151: CALL_OW 67
// Say ( JMM , D1d-JMM-1a ) ;
2155: LD_EXP 16
2159: PPUSH
2160: LD_STRING D1d-JMM-1a
2162: PPUSH
2163: CALL_OW 88
// SayRadio ( Harrison , D1d-Har-1 ) ;
2167: LD_EXP 18
2171: PPUSH
2172: LD_STRING D1d-Har-1
2174: PPUSH
2175: CALL_OW 94
// InGameOff ;
2179: CALL_OW 9
// SaveForQuickRestart ;
2183: CALL_OW 22
// ChangeMissionObjectives ( M1 ) ;
2187: LD_STRING M1
2189: PPUSH
2190: CALL_OW 337
// Wait ( 0 0$2 ) ;
2194: LD_INT 70
2196: PPUSH
2197: CALL_OW 67
// Say ( JMM , D2-JMM-1 ) ;
2201: LD_EXP 16
2205: PPUSH
2206: LD_STRING D2-JMM-1
2208: PPUSH
2209: CALL_OW 88
// Say ( Gladstone , D2-Glad-1 ) ;
2213: LD_EXP 17
2217: PPUSH
2218: LD_STRING D2-Glad-1
2220: PPUSH
2221: CALL_OW 88
// Say ( JMM , D2-JMM-2 ) ;
2225: LD_EXP 16
2229: PPUSH
2230: LD_STRING D2-JMM-2
2232: PPUSH
2233: CALL_OW 88
// Say ( Gladstone , D2-Glad-2 ) ;
2237: LD_EXP 17
2241: PPUSH
2242: LD_STRING D2-Glad-2
2244: PPUSH
2245: CALL_OW 88
// Say ( JMM , D2-JMM-3 ) ;
2249: LD_EXP 16
2253: PPUSH
2254: LD_STRING D2-JMM-3
2256: PPUSH
2257: CALL_OW 88
// Wait ( rand ( 0 0$30 , 1 1$00 ) ) ;
2261: LD_INT 1050
2263: PPUSH
2264: LD_INT 2100
2266: PPUSH
2267: CALL_OW 12
2271: PPUSH
2272: CALL_OW 67
// SetWeather ( 1 , 570 , 350 ) ;
2276: LD_INT 1
2278: PPUSH
2279: LD_INT 570
2281: PPUSH
2282: LD_INT 350
2284: PPUSH
2285: CALL_OW 550
// Wait ( rand ( 3 3$00 , 5 5$00 ) ) ;
2289: LD_INT 6300
2291: PPUSH
2292: LD_INT 10500
2294: PPUSH
2295: CALL_OW 12
2299: PPUSH
2300: CALL_OW 67
// SetWeather ( 0 , 570 , 350 ) ;
2304: LD_INT 0
2306: PPUSH
2307: LD_INT 570
2309: PPUSH
2310: LD_INT 350
2312: PPUSH
2313: CALL_OW 550
// end ;
2317: LD_VAR 0 1
2321: RET
// every 0 0$01 trigger FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_not , [ f_constructed ] ] , [ f_btype , b_depot ] ] ] ) and not deltaBuilded do
2322: LD_INT 22
2324: PUSH
2325: LD_INT 1
2327: PUSH
2328: EMPTY
2329: LIST
2330: LIST
2331: PUSH
2332: LD_INT 3
2334: PUSH
2335: LD_INT 57
2337: PUSH
2338: EMPTY
2339: LIST
2340: PUSH
2341: EMPTY
2342: LIST
2343: LIST
2344: PUSH
2345: LD_INT 30
2347: PUSH
2348: LD_INT 0
2350: PUSH
2351: EMPTY
2352: LIST
2353: LIST
2354: PUSH
2355: EMPTY
2356: LIST
2357: LIST
2358: LIST
2359: PUSH
2360: EMPTY
2361: LIST
2362: PPUSH
2363: CALL_OW 69
2367: PUSH
2368: LD_EXP 4
2372: NOT
2373: AND
2374: IFFALSE 2387
2376: GO 2378
2378: DISABLE
// begin deltaBuilded := true ;
2379: LD_ADDR_EXP 4
2383: PUSH
2384: LD_INT 1
2386: ST_TO_ADDR
// end ;
2387: END
// every 0 0$01 trigger not Delta and deltaBuilded and FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_not , [ f_constructed ] ] , [ f_btype , b_depot ] ] ] ) do
2388: LD_EXP 6
2392: NOT
2393: PUSH
2394: LD_EXP 4
2398: AND
2399: PUSH
2400: LD_INT 22
2402: PUSH
2403: LD_INT 1
2405: PUSH
2406: EMPTY
2407: LIST
2408: LIST
2409: PUSH
2410: LD_INT 3
2412: PUSH
2413: LD_INT 57
2415: PUSH
2416: EMPTY
2417: LIST
2418: PUSH
2419: EMPTY
2420: LIST
2421: LIST
2422: PUSH
2423: LD_INT 30
2425: PUSH
2426: LD_INT 0
2428: PUSH
2429: EMPTY
2430: LIST
2431: LIST
2432: PUSH
2433: EMPTY
2434: LIST
2435: LIST
2436: LIST
2437: PUSH
2438: EMPTY
2439: LIST
2440: PPUSH
2441: CALL_OW 69
2445: AND
2446: IFFALSE 2532
2448: GO 2450
2450: DISABLE
// begin enable ;
2451: ENABLE
// SetRestrict ( b_depot , 1 , state_disabled ) ;
2452: LD_INT 0
2454: PPUSH
2455: LD_INT 1
2457: PPUSH
2458: LD_INT 0
2460: PPUSH
2461: CALL_OW 324
// Delta := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_not , [ f_constructed ] ] , [ f_btype , b_depot ] ] ] ) [ 1 ] ;
2465: LD_ADDR_EXP 6
2469: PUSH
2470: LD_INT 22
2472: PUSH
2473: LD_INT 1
2475: PUSH
2476: EMPTY
2477: LIST
2478: LIST
2479: PUSH
2480: LD_INT 3
2482: PUSH
2483: LD_INT 57
2485: PUSH
2486: EMPTY
2487: LIST
2488: PUSH
2489: EMPTY
2490: LIST
2491: LIST
2492: PUSH
2493: LD_INT 30
2495: PUSH
2496: LD_INT 0
2498: PUSH
2499: EMPTY
2500: LIST
2501: LIST
2502: PUSH
2503: EMPTY
2504: LIST
2505: LIST
2506: LIST
2507: PUSH
2508: EMPTY
2509: LIST
2510: PPUSH
2511: CALL_OW 69
2515: PUSH
2516: LD_INT 1
2518: ARRAY
2519: ST_TO_ADDR
// SetBName ( Delta , Delta ) ;
2520: LD_EXP 6
2524: PPUSH
2525: LD_STRING Delta
2527: PPUSH
2528: CALL_OW 500
// end ;
2532: END
// every 0 0$2 trigger GetTech ( tech_ApeLang , 1 ) = state_researched and IsOk ( Gladstone ) do
2533: LD_INT 1
2535: PPUSH
2536: LD_INT 1
2538: PPUSH
2539: CALL_OW 321
2543: PUSH
2544: LD_INT 2
2546: EQUAL
2547: PUSH
2548: LD_EXP 17
2552: PPUSH
2553: CALL_OW 302
2557: AND
2558: IFFALSE 2619
2560: GO 2562
2562: DISABLE
// begin DialogueOn ;
2563: CALL_OW 6
// Say ( Gladstone , D3-Glad-1 ) ;
2567: LD_EXP 17
2571: PPUSH
2572: LD_STRING D3-Glad-1
2574: PPUSH
2575: CALL_OW 88
// Say ( JMM , D3-JMM-1 ) ;
2579: LD_EXP 16
2583: PPUSH
2584: LD_STRING D3-JMM-1
2586: PPUSH
2587: CALL_OW 88
// Say ( Gladstone , D3-Glad-2 ) ;
2591: LD_EXP 17
2595: PPUSH
2596: LD_STRING D3-Glad-2
2598: PPUSH
2599: CALL_OW 88
// Say ( JMM , D3-JMM-2 ) ;
2603: LD_EXP 16
2607: PPUSH
2608: LD_STRING D3-JMM-2
2610: PPUSH
2611: CALL_OW 88
// DialogueOff ;
2615: CALL_OW 7
// end ;
2619: END
// every 0 0$1 trigger GetTech ( tech_ApePsych , 1 ) = state_researched do var sol ;
2620: LD_INT 2
2622: PPUSH
2623: LD_INT 1
2625: PPUSH
2626: CALL_OW 321
2630: PUSH
2631: LD_INT 2
2633: EQUAL
2634: IFFALSE 2811
2636: GO 2638
2638: DISABLE
2639: LD_INT 0
2641: PPUSH
// begin DialogueOn ;
2642: CALL_OW 6
// if Frank then
2646: LD_EXP 23
2650: IFFALSE 2664
// Say ( Frank , D8a-Frank-1 ) ;
2652: LD_EXP 23
2656: PPUSH
2657: LD_STRING D8a-Frank-1
2659: PPUSH
2660: CALL_OW 88
// sol := SayX ( UnitFilter ( others , [ f_sex , sex_male ] ) , D8a-Sol1-1 ) ;
2664: LD_ADDR_VAR 0 1
2668: PUSH
2669: LD_EXP 26
2673: PPUSH
2674: LD_INT 26
2676: PUSH
2677: LD_INT 1
2679: PUSH
2680: EMPTY
2681: LIST
2682: LIST
2683: PPUSH
2684: CALL_OW 72
2688: PPUSH
2689: LD_STRING D8a-Sol1-1
2691: PPUSH
2692: CALL 515 0 2
2696: ST_TO_ADDR
// if Denis and GetSide ( Denis ) = 1 then
2697: LD_EXP 19
2701: PUSH
2702: LD_EXP 19
2706: PPUSH
2707: CALL_OW 255
2711: PUSH
2712: LD_INT 1
2714: EQUAL
2715: AND
2716: IFFALSE 2730
// Say ( Denis , D8a-Den-1 ) ;
2718: LD_EXP 19
2722: PPUSH
2723: LD_STRING D8a-Den-1
2725: PPUSH
2726: CALL_OW 88
// if sol or Denis or Frank then
2730: LD_VAR 0 1
2734: PUSH
2735: LD_EXP 19
2739: OR
2740: PUSH
2741: LD_EXP 23
2745: OR
2746: IFFALSE 2807
// begin SayX ( UnitFilter ( others , [ [ f_class , 4 ] , [ f_sex , sex_male ] ] ) diff sol , D8a-Sci1-1 ) ;
2748: LD_EXP 26
2752: PPUSH
2753: LD_INT 25
2755: PUSH
2756: LD_INT 4
2758: PUSH
2759: EMPTY
2760: LIST
2761: LIST
2762: PUSH
2763: LD_INT 26
2765: PUSH
2766: LD_INT 1
2768: PUSH
2769: EMPTY
2770: LIST
2771: LIST
2772: PUSH
2773: EMPTY
2774: LIST
2775: LIST
2776: PPUSH
2777: CALL_OW 72
2781: PUSH
2782: LD_VAR 0 1
2786: DIFF
2787: PPUSH
2788: LD_STRING D8a-Sci1-1
2790: PPUSH
2791: CALL 515 0 2
// Say ( JMM , D8a-JMM-1 ) ;
2795: LD_EXP 16
2799: PPUSH
2800: LD_STRING D8a-JMM-1
2802: PPUSH
2803: CALL_OW 88
// end ; DialogueOff ;
2807: CALL_OW 7
// end ;
2811: PPOPN 1
2813: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_apeman_engineer ] ] ) do
2814: LD_INT 22
2816: PUSH
2817: LD_INT 1
2819: PUSH
2820: EMPTY
2821: LIST
2822: LIST
2823: PUSH
2824: LD_INT 25
2826: PUSH
2827: LD_INT 16
2829: PUSH
2830: EMPTY
2831: LIST
2832: LIST
2833: PUSH
2834: EMPTY
2835: LIST
2836: LIST
2837: PPUSH
2838: CALL_OW 69
2842: IFFALSE 2901
2844: GO 2846
2846: DISABLE
// begin ChangeMissionObjectives ( M1a ) ;
2847: LD_STRING M1a
2849: PPUSH
2850: CALL_OW 337
// case Query ( Q2 ) of 1 :
2854: LD_STRING Q2
2856: PPUSH
2857: CALL_OW 97
2861: PUSH
2862: LD_INT 1
2864: DOUBLE
2865: EQUAL
2866: IFTRUE 2870
2868: GO 2881
2870: POP
// end_mission := true ; 2 :
2871: LD_ADDR_EXP 14
2875: PUSH
2876: LD_INT 1
2878: ST_TO_ADDR
2879: GO 2901
2881: LD_INT 2
2883: DOUBLE
2884: EQUAL
2885: IFTRUE 2889
2887: GO 2900
2889: POP
// end_the_mission_allowed := true ; end ;
2890: LD_ADDR_OWVAR 57
2894: PUSH
2895: LD_INT 1
2897: ST_TO_ADDR
2898: GO 2901
2900: POP
// end ;
2901: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) and Delta do
2902: LD_INT 22
2904: PUSH
2905: LD_INT 1
2907: PUSH
2908: EMPTY
2909: LIST
2910: LIST
2911: PUSH
2912: LD_INT 2
2914: PUSH
2915: LD_INT 30
2917: PUSH
2918: LD_INT 6
2920: PUSH
2921: EMPTY
2922: LIST
2923: LIST
2924: PUSH
2925: LD_INT 30
2927: PUSH
2928: LD_INT 7
2930: PUSH
2931: EMPTY
2932: LIST
2933: LIST
2934: PUSH
2935: EMPTY
2936: LIST
2937: LIST
2938: LIST
2939: PUSH
2940: EMPTY
2941: LIST
2942: LIST
2943: PPUSH
2944: CALL_OW 69
2948: PUSH
2949: LD_INT 22
2951: PUSH
2952: LD_INT 1
2954: PUSH
2955: EMPTY
2956: LIST
2957: LIST
2958: PUSH
2959: LD_INT 2
2961: PUSH
2962: LD_INT 30
2964: PUSH
2965: LD_INT 2
2967: PUSH
2968: EMPTY
2969: LIST
2970: LIST
2971: PUSH
2972: LD_INT 30
2974: PUSH
2975: LD_INT 3
2977: PUSH
2978: EMPTY
2979: LIST
2980: LIST
2981: PUSH
2982: EMPTY
2983: LIST
2984: LIST
2985: LIST
2986: PUSH
2987: EMPTY
2988: LIST
2989: LIST
2990: PPUSH
2991: CALL_OW 69
2995: AND
2996: PUSH
2997: LD_EXP 6
3001: AND
3002: IFFALSE 3513
3004: GO 3006
3006: DISABLE
// begin Wait ( rand ( 0 0$30 , 0 0$50 ) ) ;
3007: LD_INT 1050
3009: PPUSH
3010: LD_INT 1750
3012: PPUSH
3013: CALL_OW 12
3017: PPUSH
3018: CALL_OW 67
// PlaceUnitArea ( Denis , [ denisArea1 , denisArea2 , denisArea3 ] [ Difficulty ] , false ) ;
3022: LD_EXP 19
3026: PPUSH
3027: LD_INT 6
3029: PUSH
3030: LD_INT 9
3032: PUSH
3033: LD_INT 10
3035: PUSH
3036: EMPTY
3037: LIST
3038: LIST
3039: LIST
3040: PUSH
3041: LD_OWVAR 67
3045: ARRAY
3046: PPUSH
3047: LD_INT 0
3049: PPUSH
3050: CALL_OW 49
// ComHold ( Denis ) ;
3054: LD_EXP 19
3058: PPUSH
3059: CALL_OW 140
// InGameOn ;
3063: CALL_OW 8
// DialogueOn ;
3067: CALL_OW 6
// if Delta then
3071: LD_EXP 6
3075: IFFALSE 3088
// CenterNowOnUnits ( Delta ) else
3077: LD_EXP 6
3081: PPUSH
3082: CALL_OW 87
3086: GO 3097
// CenterNowOnUnits ( JMM ) ;
3088: LD_EXP 16
3092: PPUSH
3093: CALL_OW 87
// SayRadio ( Denis , DD-Den-1 ) ;
3097: LD_EXP 19
3101: PPUSH
3102: LD_STRING DD-Den-1
3104: PPUSH
3105: CALL_OW 94
// Say ( JMM , DD-JMM-1 ) ;
3109: LD_EXP 16
3113: PPUSH
3114: LD_STRING DD-JMM-1
3116: PPUSH
3117: CALL_OW 88
// SayRadio ( Denis , DD-Den-2 ) ;
3121: LD_EXP 19
3125: PPUSH
3126: LD_STRING DD-Den-2
3128: PPUSH
3129: CALL_OW 94
// Wait ( 3 ) ;
3133: LD_INT 3
3135: PPUSH
3136: CALL_OW 67
// DialogueOff ;
3140: CALL_OW 7
// InGameOff ;
3144: CALL_OW 9
// if Difficulty = 1 then
3148: LD_OWVAR 67
3152: PUSH
3153: LD_INT 1
3155: EQUAL
3156: IFFALSE 3232
// begin PlaceSeeing ( GetX ( Denis ) , GetY ( Denis ) , 1 , - 12 ) ;
3158: LD_EXP 19
3162: PPUSH
3163: CALL_OW 250
3167: PPUSH
3168: LD_EXP 19
3172: PPUSH
3173: CALL_OW 251
3177: PPUSH
3178: LD_INT 1
3180: PPUSH
3181: LD_INT 12
3183: NEG
3184: PPUSH
3185: CALL_OW 330
// CenterNowOnUnits ( Denis ) ;
3189: LD_EXP 19
3193: PPUSH
3194: CALL_OW 87
// wait ( 0 0$5 ) ;
3198: LD_INT 175
3200: PPUSH
3201: CALL_OW 67
// RemoveSeeing ( GetX ( Denis ) , GetY ( Denis ) , 1 ) ;
3205: LD_EXP 19
3209: PPUSH
3210: CALL_OW 250
3214: PPUSH
3215: LD_EXP 19
3219: PPUSH
3220: CALL_OW 251
3224: PPUSH
3225: LD_INT 1
3227: PPUSH
3228: CALL_OW 331
// end ; repeat wait ( 0 0$01 ) ;
3232: LD_INT 35
3234: PPUSH
3235: CALL_OW 67
// until See ( 1 , Denis ) or IsDead ( Denis ) ;
3239: LD_INT 1
3241: PPUSH
3242: LD_EXP 19
3246: PPUSH
3247: CALL_OW 292
3251: PUSH
3252: LD_EXP 19
3256: PPUSH
3257: CALL_OW 301
3261: OR
3262: IFFALSE 3232
// if IsDead ( Denis ) then
3264: LD_EXP 19
3268: PPUSH
3269: CALL_OW 301
3273: IFFALSE 3277
// exit ;
3275: GO 3513
// SetSide ( Denis , 1 ) ;
3277: LD_EXP 19
3281: PPUSH
3282: LD_INT 1
3284: PPUSH
3285: CALL_OW 235
// Say ( Denis , DD-Den-2a ) ;
3289: LD_EXP 19
3293: PPUSH
3294: LD_STRING DD-Den-2a
3296: PPUSH
3297: CALL_OW 88
// repeat wait ( 0 0$01 ) ;
3301: LD_INT 35
3303: PPUSH
3304: CALL_OW 67
// until GetBType ( IsInUnit ( Denis ) ) in [ b_lab , b_lab_half , b_lab_full ] or IsDead ( Denis ) ;
3308: LD_EXP 19
3312: PPUSH
3313: CALL_OW 310
3317: PPUSH
3318: CALL_OW 266
3322: PUSH
3323: LD_INT 6
3325: PUSH
3326: LD_INT 7
3328: PUSH
3329: LD_INT 8
3331: PUSH
3332: EMPTY
3333: LIST
3334: LIST
3335: LIST
3336: IN
3337: PUSH
3338: LD_EXP 19
3342: PPUSH
3343: CALL_OW 301
3347: OR
3348: IFFALSE 3301
// if IsDead ( Denis ) then
3350: LD_EXP 19
3354: PPUSH
3355: CALL_OW 301
3359: IFFALSE 3363
// exit ;
3361: GO 3513
// Say ( Denis , DD-Den-2b ) ;
3363: LD_EXP 19
3367: PPUSH
3368: LD_STRING DD-Den-2b
3370: PPUSH
3371: CALL_OW 88
// ComChangeProfession ( Denis , 4 ) ;
3375: LD_EXP 19
3379: PPUSH
3380: LD_INT 4
3382: PPUSH
3383: CALL_OW 123
// Wait ( 0 0$02 ) ;
3387: LD_INT 70
3389: PPUSH
3390: CALL_OW 67
// DialogueOn ;
3394: CALL_OW 6
// CenterNowOnUnits ( Denis ) ;
3398: LD_EXP 19
3402: PPUSH
3403: CALL_OW 87
// Say ( JMM , D4-JMM-1 ) ;
3407: LD_EXP 16
3411: PPUSH
3412: LD_STRING D4-JMM-1
3414: PPUSH
3415: CALL_OW 88
// Say ( Denis , D4-Den-1 ) ;
3419: LD_EXP 19
3423: PPUSH
3424: LD_STRING D4-Den-1
3426: PPUSH
3427: CALL_OW 88
// Say ( JMM , D4-JMM-2 ) ;
3431: LD_EXP 16
3435: PPUSH
3436: LD_STRING D4-JMM-2
3438: PPUSH
3439: CALL_OW 88
// Say ( Denis , D4-Den-2 ) ;
3443: LD_EXP 19
3447: PPUSH
3448: LD_STRING D4-Den-2
3450: PPUSH
3451: CALL_OW 88
// DialogueOff ;
3455: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
3459: LD_STRING M2
3461: PPUSH
3462: CALL_OW 337
// radar_allowed := true ;
3466: LD_ADDR_EXP 7
3470: PUSH
3471: LD_INT 1
3473: ST_TO_ADDR
// SetTech ( tech_radar , 1 , state_enabled ) ;
3474: LD_INT 6
3476: PPUSH
3477: LD_INT 1
3479: PPUSH
3480: LD_INT 1
3482: PPUSH
3483: CALL_OW 322
// SetRestrict ( b_lab_opto , 1 , state_enabled ) ;
3487: LD_INT 15
3489: PPUSH
3490: LD_INT 1
3492: PPUSH
3493: LD_INT 1
3495: PPUSH
3496: CALL_OW 324
// SetRestrict ( b_ext_radar , 1 , state_enabled ) ;
3500: LD_INT 20
3502: PPUSH
3503: LD_INT 1
3505: PPUSH
3506: LD_INT 1
3508: PPUSH
3509: CALL_OW 324
// end ;
3513: END
// every 0 0$1 trigger arab_spotted do var sol , sol2 ;
3514: LD_EXP 13
3518: IFFALSE 4141
3520: GO 3522
3522: DISABLE
3523: LD_INT 0
3525: PPUSH
3526: PPUSH
// begin sol := SayX ( UnitFilter ( others , [ f_sex , sex_male ] ) , D5-Sol1-1 ) ;
3527: LD_ADDR_VAR 0 1
3531: PUSH
3532: LD_EXP 26
3536: PPUSH
3537: LD_INT 26
3539: PUSH
3540: LD_INT 1
3542: PUSH
3543: EMPTY
3544: LIST
3545: LIST
3546: PPUSH
3547: CALL_OW 72
3551: PPUSH
3552: LD_STRING D5-Sol1-1
3554: PPUSH
3555: CALL 515 0 2
3559: ST_TO_ADDR
// if not sol then
3560: LD_VAR 0 1
3564: NOT
3565: IFFALSE 3569
// exit ;
3567: GO 4141
// repeat wait ( 0 0$01 ) ;
3569: LD_INT 35
3571: PPUSH
3572: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) = 0 ;
3576: LD_INT 22
3578: PUSH
3579: LD_INT 2
3581: PUSH
3582: EMPTY
3583: LIST
3584: LIST
3585: PUSH
3586: LD_INT 21
3588: PUSH
3589: LD_INT 1
3591: PUSH
3592: EMPTY
3593: LIST
3594: LIST
3595: PUSH
3596: EMPTY
3597: LIST
3598: LIST
3599: PPUSH
3600: CALL_OW 69
3604: PUSH
3605: LD_INT 0
3607: EQUAL
3608: IFFALSE 3569
// if IsOk ( sol ) then
3610: LD_VAR 0 1
3614: PPUSH
3615: CALL_OW 302
3619: IFFALSE 3639
// begin sol2 := others diff sol ;
3621: LD_ADDR_VAR 0 2
3625: PUSH
3626: LD_EXP 26
3630: PUSH
3631: LD_VAR 0 1
3635: DIFF
3636: ST_TO_ADDR
// end else
3637: GO 3641
// exit ;
3639: GO 4141
// if not Lisa and not sol2 then
3641: LD_EXP 22
3645: NOT
3646: PUSH
3647: LD_VAR 0 2
3651: NOT
3652: AND
3653: IFFALSE 3657
// exit ;
3655: GO 4141
// DialogueOn ;
3657: CALL_OW 6
// if Lisa then
3661: LD_EXP 22
3665: IFFALSE 3681
// Say ( Lisa , D5a-Lisa-1 ) else
3667: LD_EXP 22
3671: PPUSH
3672: LD_STRING D5a-Lisa-1
3674: PPUSH
3675: CALL_OW 88
3679: GO 3756
// if sol2 then
3681: LD_VAR 0 2
3685: IFFALSE 3756
// case GetSex ( sol2 [ 1 ] ) of sex_male :
3687: LD_VAR 0 2
3691: PUSH
3692: LD_INT 1
3694: ARRAY
3695: PPUSH
3696: CALL_OW 258
3700: PUSH
3701: LD_INT 1
3703: DOUBLE
3704: EQUAL
3705: IFTRUE 3709
3707: GO 3728
3709: POP
// Say ( sol2 [ 1 ] , D5-Sol2-1 ) ; sex_female :
3710: LD_VAR 0 2
3714: PUSH
3715: LD_INT 1
3717: ARRAY
3718: PPUSH
3719: LD_STRING D5-Sol2-1
3721: PPUSH
3722: CALL_OW 88
3726: GO 3756
3728: LD_INT 2
3730: DOUBLE
3731: EQUAL
3732: IFTRUE 3736
3734: GO 3755
3736: POP
// Say ( sol2 [ 1 ] , D5-FSol2-1 ) ; end ;
3737: LD_VAR 0 2
3741: PUSH
3742: LD_INT 1
3744: ARRAY
3745: PPUSH
3746: LD_STRING D5-FSol2-1
3748: PPUSH
3749: CALL_OW 88
3753: GO 3756
3755: POP
// Say ( sol , D5-Sol1-2 ) ;
3756: LD_VAR 0 1
3760: PPUSH
3761: LD_STRING D5-Sol1-2
3763: PPUSH
3764: CALL_OW 88
// if Lisa then
3768: LD_EXP 22
3772: IFFALSE 3788
// Say ( Lisa , D5a-Lisa-2 ) else
3774: LD_EXP 22
3778: PPUSH
3779: LD_STRING D5a-Lisa-2
3781: PPUSH
3782: CALL_OW 88
3786: GO 3863
// if sol2 then
3788: LD_VAR 0 2
3792: IFFALSE 3863
// case GetSex ( sol2 [ 1 ] ) of sex_male :
3794: LD_VAR 0 2
3798: PUSH
3799: LD_INT 1
3801: ARRAY
3802: PPUSH
3803: CALL_OW 258
3807: PUSH
3808: LD_INT 1
3810: DOUBLE
3811: EQUAL
3812: IFTRUE 3816
3814: GO 3835
3816: POP
// Say ( sol2 [ 1 ] , D5-Sol2-2 ) ; sex_female :
3817: LD_VAR 0 2
3821: PUSH
3822: LD_INT 1
3824: ARRAY
3825: PPUSH
3826: LD_STRING D5-Sol2-2
3828: PPUSH
3829: CALL_OW 88
3833: GO 3863
3835: LD_INT 2
3837: DOUBLE
3838: EQUAL
3839: IFTRUE 3843
3841: GO 3862
3843: POP
// Say ( sol2 [ 1 ] , D5-FSol2-2 ) ; end ;
3844: LD_VAR 0 2
3848: PUSH
3849: LD_INT 1
3851: ARRAY
3852: PPUSH
3853: LD_STRING D5-FSol2-2
3855: PPUSH
3856: CALL_OW 88
3860: GO 3863
3862: POP
// Say ( sol , D5a-Sol1-3 ) ;
3863: LD_VAR 0 1
3867: PPUSH
3868: LD_STRING D5a-Sol1-3
3870: PPUSH
3871: CALL_OW 88
// if Lisa then
3875: LD_EXP 22
3879: IFFALSE 3893
// Say ( Lisa , D5a-Lisa-3 ) ;
3881: LD_EXP 22
3885: PPUSH
3886: LD_STRING D5a-Lisa-3
3888: PPUSH
3889: CALL_OW 88
// if not sol2 then
3893: LD_VAR 0 2
3897: NOT
3898: IFFALSE 3906
// begin DialogueOff ;
3900: CALL_OW 7
// exit ;
3904: GO 4141
// end ; case GetSex ( sol2 [ 1 ] ) of sex_male :
3906: LD_VAR 0 2
3910: PUSH
3911: LD_INT 1
3913: ARRAY
3914: PPUSH
3915: CALL_OW 258
3919: PUSH
3920: LD_INT 1
3922: DOUBLE
3923: EQUAL
3924: IFTRUE 3928
3926: GO 3947
3928: POP
// Say ( sol2 [ 1 ] , D5-Sol2-3 ) ; sex_female :
3929: LD_VAR 0 2
3933: PUSH
3934: LD_INT 1
3936: ARRAY
3937: PPUSH
3938: LD_STRING D5-Sol2-3
3940: PPUSH
3941: CALL_OW 88
3945: GO 3975
3947: LD_INT 2
3949: DOUBLE
3950: EQUAL
3951: IFTRUE 3955
3953: GO 3974
3955: POP
// Say ( sol2 [ 1 ] , D5-FSol2-3 ) ; end ;
3956: LD_VAR 0 2
3960: PUSH
3961: LD_INT 1
3963: ARRAY
3964: PPUSH
3965: LD_STRING D5-FSol2-3
3967: PPUSH
3968: CALL_OW 88
3972: GO 3975
3974: POP
// Say ( sol , D5-Sol1-4 ) ;
3975: LD_VAR 0 1
3979: PPUSH
3980: LD_STRING D5-Sol1-4
3982: PPUSH
3983: CALL_OW 88
// case GetSex ( sol2 [ 1 ] ) of sex_male :
3987: LD_VAR 0 2
3991: PUSH
3992: LD_INT 1
3994: ARRAY
3995: PPUSH
3996: CALL_OW 258
4000: PUSH
4001: LD_INT 1
4003: DOUBLE
4004: EQUAL
4005: IFTRUE 4009
4007: GO 4028
4009: POP
// Say ( sol2 [ 1 ] , D5-Sol2-4 ) ; sex_female :
4010: LD_VAR 0 2
4014: PUSH
4015: LD_INT 1
4017: ARRAY
4018: PPUSH
4019: LD_STRING D5-Sol2-4
4021: PPUSH
4022: CALL_OW 88
4026: GO 4056
4028: LD_INT 2
4030: DOUBLE
4031: EQUAL
4032: IFTRUE 4036
4034: GO 4055
4036: POP
// Say ( sol2 [ 1 ] , D5-FSol2-4 ) ; end ;
4037: LD_VAR 0 2
4041: PUSH
4042: LD_INT 1
4044: ARRAY
4045: PPUSH
4046: LD_STRING D5-FSol2-4
4048: PPUSH
4049: CALL_OW 88
4053: GO 4056
4055: POP
// Say ( sol , D5-Sol1-5 ) ;
4056: LD_VAR 0 1
4060: PPUSH
4061: LD_STRING D5-Sol1-5
4063: PPUSH
4064: CALL_OW 88
// case GetSex ( sol2 [ 1 ] ) of sex_male :
4068: LD_VAR 0 2
4072: PUSH
4073: LD_INT 1
4075: ARRAY
4076: PPUSH
4077: CALL_OW 258
4081: PUSH
4082: LD_INT 1
4084: DOUBLE
4085: EQUAL
4086: IFTRUE 4090
4088: GO 4109
4090: POP
// Say ( sol2 [ 1 ] , D5-Sol2-5 ) ; sex_female :
4091: LD_VAR 0 2
4095: PUSH
4096: LD_INT 1
4098: ARRAY
4099: PPUSH
4100: LD_STRING D5-Sol2-5
4102: PPUSH
4103: CALL_OW 88
4107: GO 4137
4109: LD_INT 2
4111: DOUBLE
4112: EQUAL
4113: IFTRUE 4117
4115: GO 4136
4117: POP
// Say ( sol2 [ 1 ] , D5-FSol2-5 ) ; end ;
4118: LD_VAR 0 2
4122: PUSH
4123: LD_INT 1
4125: ARRAY
4126: PPUSH
4127: LD_STRING D5-FSol2-5
4129: PPUSH
4130: CALL_OW 88
4134: GO 4137
4136: POP
// DialogueOff ;
4137: CALL_OW 7
// end ;
4141: PPOPN 2
4143: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_apeman_engineer ] ] ) >= 5 do
4144: LD_INT 22
4146: PUSH
4147: LD_INT 1
4149: PUSH
4150: EMPTY
4151: LIST
4152: LIST
4153: PUSH
4154: LD_INT 25
4156: PUSH
4157: LD_INT 16
4159: PUSH
4160: EMPTY
4161: LIST
4162: LIST
4163: PUSH
4164: EMPTY
4165: LIST
4166: LIST
4167: PPUSH
4168: CALL_OW 69
4172: PUSH
4173: LD_INT 5
4175: GREATEREQUAL
4176: IFFALSE 4196
4178: GO 4180
4180: DISABLE
// begin ChangeMissionObjectives ( M1b ) ;
4181: LD_STRING M1b
4183: PPUSH
4184: CALL_OW 337
// apeman_army := true ;
4188: LD_ADDR_EXP 9
4192: PUSH
4193: LD_INT 1
4195: ST_TO_ADDR
// end ;
4196: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] , [ f_constructed ] ] ) do
4197: LD_INT 22
4199: PUSH
4200: LD_INT 1
4202: PUSH
4203: EMPTY
4204: LIST
4205: LIST
4206: PUSH
4207: LD_INT 30
4209: PUSH
4210: LD_INT 3
4212: PUSH
4213: EMPTY
4214: LIST
4215: LIST
4216: PUSH
4217: LD_INT 57
4219: PUSH
4220: EMPTY
4221: LIST
4222: PUSH
4223: EMPTY
4224: LIST
4225: LIST
4226: LIST
4227: PPUSH
4228: CALL_OW 69
4232: IFFALSE 4244
4234: GO 4236
4236: DISABLE
// ChangeMissionObjectives ( M1c ) ;
4237: LD_STRING M1c
4239: PPUSH
4240: CALL_OW 337
4244: END
// every 0 0$1 trigger GetTech ( tech_radar , 1 ) = state_researched do
4245: LD_INT 6
4247: PPUSH
4248: LD_INT 1
4250: PPUSH
4251: CALL_OW 321
4255: PUSH
4256: LD_INT 2
4258: EQUAL
4259: IFFALSE 4279
4261: GO 4263
4263: DISABLE
// begin ChangeMissionObjectives ( M2a ) ;
4264: LD_STRING M2a
4266: PPUSH
4267: CALL_OW 337
// radar_researched := true ;
4271: LD_ADDR_EXP 10
4275: PUSH
4276: LD_INT 1
4278: ST_TO_ADDR
// end ;
4279: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_weapon , us_radar ] , [ f_bweapon , us_radar ] ] ] ) do
4280: LD_INT 22
4282: PUSH
4283: LD_INT 1
4285: PUSH
4286: EMPTY
4287: LIST
4288: LIST
4289: PUSH
4290: LD_INT 2
4292: PUSH
4293: LD_INT 34
4295: PUSH
4296: LD_INT 11
4298: PUSH
4299: EMPTY
4300: LIST
4301: LIST
4302: PUSH
4303: LD_INT 35
4305: PUSH
4306: LD_INT 11
4308: PUSH
4309: EMPTY
4310: LIST
4311: LIST
4312: PUSH
4313: EMPTY
4314: LIST
4315: LIST
4316: LIST
4317: PUSH
4318: EMPTY
4319: LIST
4320: LIST
4321: PPUSH
4322: CALL_OW 69
4326: IFFALSE 4346
4328: GO 4330
4330: DISABLE
// begin ChangeMissionObjectives ( M2b ) ;
4331: LD_STRING M2b
4333: PPUSH
4334: CALL_OW 337
// radar_builded := true ;
4338: LD_ADDR_EXP 11
4342: PUSH
4343: LD_INT 1
4345: ST_TO_ADDR
// end ;
4346: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) = 0 and not first_apeman_tamed do
4347: LD_INT 22
4349: PUSH
4350: LD_INT 0
4352: PUSH
4353: EMPTY
4354: LIST
4355: LIST
4356: PUSH
4357: LD_INT 25
4359: PUSH
4360: LD_INT 12
4362: PUSH
4363: EMPTY
4364: LIST
4365: LIST
4366: PUSH
4367: EMPTY
4368: LIST
4369: LIST
4370: PPUSH
4371: CALL_OW 69
4375: PUSH
4376: LD_INT 0
4378: EQUAL
4379: PUSH
4380: LD_EXP 8
4384: NOT
4385: AND
4386: IFFALSE 4398
4388: GO 4390
4390: DISABLE
// YouLost ( Apeman ) ;
4391: LD_STRING Apeman
4393: PPUSH
4394: CALL_OW 104
4398: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_apeman_engineer ] ] ) >= 7 do var i , filter ;
4399: LD_INT 22
4401: PUSH
4402: LD_INT 1
4404: PUSH
4405: EMPTY
4406: LIST
4407: LIST
4408: PUSH
4409: LD_INT 25
4411: PUSH
4412: LD_INT 16
4414: PUSH
4415: EMPTY
4416: LIST
4417: LIST
4418: PUSH
4419: EMPTY
4420: LIST
4421: LIST
4422: PPUSH
4423: CALL_OW 69
4427: PUSH
4428: LD_INT 7
4430: GREATEREQUAL
4431: IFFALSE 4529
4433: GO 4435
4435: DISABLE
4436: LD_INT 0
4438: PPUSH
4439: PPUSH
// begin filter := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 4 ] ] ) ^ JMM ;
4440: LD_ADDR_VAR 0 2
4444: PUSH
4445: LD_INT 22
4447: PUSH
4448: LD_INT 1
4450: PUSH
4451: EMPTY
4452: LIST
4453: LIST
4454: PUSH
4455: LD_INT 21
4457: PUSH
4458: LD_INT 1
4460: PUSH
4461: EMPTY
4462: LIST
4463: LIST
4464: PUSH
4465: LD_INT 25
4467: PUSH
4468: LD_INT 4
4470: PUSH
4471: EMPTY
4472: LIST
4473: LIST
4474: PUSH
4475: EMPTY
4476: LIST
4477: LIST
4478: LIST
4479: PPUSH
4480: CALL_OW 69
4484: PUSH
4485: LD_EXP 16
4489: ADD
4490: ST_TO_ADDR
// if filter then
4491: LD_VAR 0 2
4495: IFFALSE 4529
// for i in filter do
4497: LD_ADDR_VAR 0 1
4501: PUSH
4502: LD_VAR 0 2
4506: PUSH
4507: FOR_IN
4508: IFFALSE 4527
// AddExperience ( i , 4 , 3500 ) ;
4510: LD_VAR 0 1
4514: PPUSH
4515: LD_INT 4
4517: PPUSH
4518: LD_INT 3500
4520: PPUSH
4521: CALL_OW 492
4525: GO 4507
4527: POP
4528: POP
// end ;
4529: PPOPN 2
4531: END
// every 0 0$1 trigger end_mission do var i , tmp , m1 , m2 , m3 ;
4532: LD_EXP 14
4536: IFFALSE 5670
4538: GO 4540
4540: DISABLE
4541: LD_INT 0
4543: PPUSH
4544: PPUSH
4545: PPUSH
4546: PPUSH
4547: PPUSH
// begin if apeKillCounter = 0 then
4548: LD_EXP 15
4552: PUSH
4553: LD_INT 0
4555: EQUAL
4556: IFFALSE 4565
// SetAchievement ( ACH_APEKILLER ) ;
4558: LD_STRING ACH_APEKILLER
4560: PPUSH
4561: CALL_OW 543
// if FilterAllUnits ( [ f_side , 2 ] ) then
4565: LD_INT 22
4567: PUSH
4568: LD_INT 2
4570: PUSH
4571: EMPTY
4572: LIST
4573: LIST
4574: PPUSH
4575: CALL_OW 69
4579: IFFALSE 4617
// for i in FilterAllUnits ( [ f_side , 2 ] ) do
4581: LD_ADDR_VAR 0 1
4585: PUSH
4586: LD_INT 22
4588: PUSH
4589: LD_INT 2
4591: PUSH
4592: EMPTY
4593: LIST
4594: LIST
4595: PPUSH
4596: CALL_OW 69
4600: PUSH
4601: FOR_IN
4602: IFFALSE 4615
// RemoveUnit ( i ) ;
4604: LD_VAR 0 1
4608: PPUSH
4609: CALL_OW 64
4613: GO 4601
4615: POP
4616: POP
// m1 := false ;
4617: LD_ADDR_VAR 0 3
4621: PUSH
4622: LD_INT 0
4624: ST_TO_ADDR
// m2 := false ;
4625: LD_ADDR_VAR 0 4
4629: PUSH
4630: LD_INT 0
4632: ST_TO_ADDR
// m3 := false ;
4633: LD_ADDR_VAR 0 5
4637: PUSH
4638: LD_INT 0
4640: ST_TO_ADDR
// if apeman_army then
4641: LD_EXP 9
4645: IFFALSE 4667
// begin AddMedal ( Tame , 1 ) ;
4647: LD_STRING Tame
4649: PPUSH
4650: LD_INT 1
4652: PPUSH
4653: CALL_OW 101
// m1 := true ;
4657: LD_ADDR_VAR 0 3
4661: PUSH
4662: LD_INT 1
4664: ST_TO_ADDR
// end else
4665: GO 4678
// AddMedal ( Tame , - 1 ) ;
4667: LD_STRING Tame
4669: PPUSH
4670: LD_INT 1
4672: NEG
4673: PPUSH
4674: CALL_OW 101
// if radar_researched then
4678: LD_EXP 10
4682: IFFALSE 4714
// begin SaveVariable ( true , radarResInDelta ) ;
4684: LD_INT 1
4686: PPUSH
4687: LD_STRING radarResInDelta
4689: PPUSH
4690: CALL_OW 39
// AddMedal ( Radar , 1 ) ;
4694: LD_STRING Radar
4696: PPUSH
4697: LD_INT 1
4699: PPUSH
4700: CALL_OW 101
// m2 := true ;
4704: LD_ADDR_VAR 0 4
4708: PUSH
4709: LD_INT 1
4711: ST_TO_ADDR
// end else
4712: GO 4744
// if radar_allowed then
4714: LD_EXP 7
4718: IFFALSE 4733
// AddMedal ( Radar , - 2 ) else
4720: LD_STRING Radar
4722: PPUSH
4723: LD_INT 2
4725: NEG
4726: PPUSH
4727: CALL_OW 101
4731: GO 4744
// AddMedal ( Radar , - 1 ) ;
4733: LD_STRING Radar
4735: PPUSH
4736: LD_INT 1
4738: NEG
4739: PPUSH
4740: CALL_OW 101
// if radar_builded then
4744: LD_EXP 11
4748: IFFALSE 4770
// begin AddMedal ( BuildRadar , 1 ) ;
4750: LD_STRING BuildRadar
4752: PPUSH
4753: LD_INT 1
4755: PPUSH
4756: CALL_OW 101
// m3 := true ;
4760: LD_ADDR_VAR 0 5
4764: PUSH
4765: LD_INT 1
4767: ST_TO_ADDR
// end else
4768: GO 4781
// AddMedal ( BuildRadar , - 1 ) ;
4770: LD_STRING BuildRadar
4772: PPUSH
4773: LD_INT 1
4775: NEG
4776: PPUSH
4777: CALL_OW 101
// if tick <= 7 7$00 then
4781: LD_OWVAR 1
4785: PUSH
4786: LD_INT 14700
4788: LESSEQUAL
4789: IFFALSE 4798
// SetAchievement ( ACH_ASPEED_5 ) ;
4791: LD_STRING ACH_ASPEED_5
4793: PPUSH
4794: CALL_OW 543
// if m1 and m2 and m3 and Difficulty = 3 then
4798: LD_VAR 0 3
4802: PUSH
4803: LD_VAR 0 4
4807: AND
4808: PUSH
4809: LD_VAR 0 5
4813: AND
4814: PUSH
4815: LD_OWVAR 67
4819: PUSH
4820: LD_INT 3
4822: EQUAL
4823: AND
4824: IFFALSE 4836
// SetAchievementEX ( ACH_AMER , 5 ) ;
4826: LD_STRING ACH_AMER
4828: PPUSH
4829: LD_INT 5
4831: PPUSH
4832: CALL_OW 564
// GiveMedals ( MAIN ) ;
4836: LD_STRING MAIN
4838: PPUSH
4839: CALL_OW 102
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ;
4843: LD_ADDR_VAR 0 2
4847: PUSH
4848: LD_INT 22
4850: PUSH
4851: LD_INT 1
4853: PUSH
4854: EMPTY
4855: LIST
4856: LIST
4857: PUSH
4858: LD_INT 21
4860: PUSH
4861: LD_INT 1
4863: PUSH
4864: EMPTY
4865: LIST
4866: LIST
4867: PUSH
4868: LD_INT 2
4870: PUSH
4871: LD_INT 25
4873: PUSH
4874: LD_INT 1
4876: PUSH
4877: EMPTY
4878: LIST
4879: LIST
4880: PUSH
4881: LD_INT 25
4883: PUSH
4884: LD_INT 2
4886: PUSH
4887: EMPTY
4888: LIST
4889: LIST
4890: PUSH
4891: LD_INT 25
4893: PUSH
4894: LD_INT 3
4896: PUSH
4897: EMPTY
4898: LIST
4899: LIST
4900: PUSH
4901: LD_INT 25
4903: PUSH
4904: LD_INT 4
4906: PUSH
4907: EMPTY
4908: LIST
4909: LIST
4910: PUSH
4911: EMPTY
4912: LIST
4913: LIST
4914: LIST
4915: LIST
4916: LIST
4917: PUSH
4918: EMPTY
4919: LIST
4920: LIST
4921: LIST
4922: PPUSH
4923: CALL_OW 69
4927: ST_TO_ADDR
// RewardPeople ( tmp ) ;
4928: LD_VAR 0 2
4932: PPUSH
4933: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
4937: LD_EXP 16
4941: PPUSH
4942: LD_EXP 2
4946: PUSH
4947: LD_STRING JMM
4949: STR
4950: PPUSH
4951: CALL_OW 38
// if IsOk ( Gladstone ) then
4955: LD_EXP 17
4959: PPUSH
4960: CALL_OW 302
4964: IFFALSE 4984
// begin SaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
4966: LD_EXP 17
4970: PPUSH
4971: LD_EXP 2
4975: PUSH
4976: LD_STRING Gladstone
4978: STR
4979: PPUSH
4980: CALL_OW 38
// end ; if IsOk ( Denis ) and GetSide ( Denis ) = 1 then
4984: LD_EXP 19
4988: PPUSH
4989: CALL_OW 302
4993: PUSH
4994: LD_EXP 19
4998: PPUSH
4999: CALL_OW 255
5003: PUSH
5004: LD_INT 1
5006: EQUAL
5007: AND
5008: IFFALSE 5038
// begin SaveCharacters ( Denis , mission_prefix & Denis ) ;
5010: LD_EXP 19
5014: PPUSH
5015: LD_EXP 2
5019: PUSH
5020: LD_STRING Denis
5022: STR
5023: PPUSH
5024: CALL_OW 38
// SaveVariable ( true , DenisInDelta ) ;
5028: LD_INT 1
5030: PPUSH
5031: LD_STRING DenisInDelta
5033: PPUSH
5034: CALL_OW 39
// end ; if IsOk ( Lisa ) then
5038: LD_EXP 22
5042: PPUSH
5043: CALL_OW 302
5047: IFFALSE 5067
// begin SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
5049: LD_EXP 22
5053: PPUSH
5054: LD_EXP 2
5058: PUSH
5059: LD_STRING Lisa
5061: STR
5062: PPUSH
5063: CALL_OW 38
// end ; if IsOk ( Frank ) then
5067: LD_EXP 23
5071: PPUSH
5072: CALL_OW 302
5076: IFFALSE 5096
// begin SaveCharacters ( Frank , mission_prefix & Frank ) ;
5078: LD_EXP 23
5082: PPUSH
5083: LD_EXP 2
5087: PUSH
5088: LD_STRING Frank
5090: STR
5091: PPUSH
5092: CALL_OW 38
// end ; if IsOk ( Bobby ) then
5096: LD_EXP 24
5100: PPUSH
5101: CALL_OW 302
5105: IFFALSE 5125
// begin SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
5107: LD_EXP 24
5111: PPUSH
5112: LD_EXP 2
5116: PUSH
5117: LD_STRING Bobby
5119: STR
5120: PPUSH
5121: CALL_OW 38
// end ; if IsOk ( Cyrus ) then
5125: LD_EXP 25
5129: PPUSH
5130: CALL_OW 302
5134: IFFALSE 5154
// begin SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
5136: LD_EXP 25
5140: PPUSH
5141: LD_EXP 2
5145: PUSH
5146: LD_STRING Cyrus
5148: STR
5149: PPUSH
5150: CALL_OW 38
// end ; if IsOk ( Brown ) then
5154: LD_EXP 20
5158: PPUSH
5159: CALL_OW 302
5163: IFFALSE 5183
// begin SaveCharacters ( Brown , mission_prefix & Brown ) ;
5165: LD_EXP 20
5169: PPUSH
5170: LD_EXP 2
5174: PUSH
5175: LD_STRING Brown
5177: STR
5178: PPUSH
5179: CALL_OW 38
// end ; if IsOk ( Donaldson ) then
5183: LD_EXP 21
5187: PPUSH
5188: CALL_OW 302
5192: IFFALSE 5212
// begin SaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
5194: LD_EXP 21
5198: PPUSH
5199: LD_EXP 2
5203: PUSH
5204: LD_STRING Donaldson
5206: STR
5207: PPUSH
5208: CALL_OW 38
// end ; if others then
5212: LD_EXP 26
5216: IFFALSE 5230
// SaveCharacters ( others , othersInDelta ) ;
5218: LD_EXP 26
5222: PPUSH
5223: LD_STRING othersInDelta
5225: PPUSH
5226: CALL_OW 38
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_apeman_engineer ] ] ) then
5230: LD_INT 22
5232: PUSH
5233: LD_INT 1
5235: PUSH
5236: EMPTY
5237: LIST
5238: LIST
5239: PUSH
5240: LD_INT 25
5242: PUSH
5243: LD_INT 16
5245: PUSH
5246: EMPTY
5247: LIST
5248: LIST
5249: PUSH
5250: EMPTY
5251: LIST
5252: LIST
5253: PPUSH
5254: CALL_OW 69
5258: IFFALSE 5296
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_apeman_engineer ] ] ) , apeInDelta ) ;
5260: LD_INT 22
5262: PUSH
5263: LD_INT 1
5265: PUSH
5266: EMPTY
5267: LIST
5268: LIST
5269: PUSH
5270: LD_INT 25
5272: PUSH
5273: LD_INT 16
5275: PUSH
5276: EMPTY
5277: LIST
5278: LIST
5279: PUSH
5280: EMPTY
5281: LIST
5282: LIST
5283: PPUSH
5284: CALL_OW 69
5288: PPUSH
5289: LD_STRING apeInDelta
5291: PPUSH
5292: CALL_OW 38
// tmp := [ ] ;
5296: LD_ADDR_VAR 0 2
5300: PUSH
5301: EMPTY
5302: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) then
5303: LD_INT 22
5305: PUSH
5306: LD_INT 1
5308: PUSH
5309: EMPTY
5310: LIST
5311: LIST
5312: PUSH
5313: LD_INT 21
5315: PUSH
5316: LD_INT 2
5318: PUSH
5319: EMPTY
5320: LIST
5321: LIST
5322: PUSH
5323: EMPTY
5324: LIST
5325: LIST
5326: PPUSH
5327: CALL_OW 69
5331: IFFALSE 5442
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) do
5333: LD_ADDR_VAR 0 1
5337: PUSH
5338: LD_INT 22
5340: PUSH
5341: LD_INT 1
5343: PUSH
5344: EMPTY
5345: LIST
5346: LIST
5347: PUSH
5348: LD_INT 21
5350: PUSH
5351: LD_INT 2
5353: PUSH
5354: EMPTY
5355: LIST
5356: LIST
5357: PUSH
5358: EMPTY
5359: LIST
5360: LIST
5361: PPUSH
5362: CALL_OW 69
5366: PUSH
5367: FOR_IN
5368: IFFALSE 5440
// tmp := tmp ^ [ GetNation ( i ) , GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) ] ;
5370: LD_ADDR_VAR 0 2
5374: PUSH
5375: LD_VAR 0 2
5379: PUSH
5380: LD_VAR 0 1
5384: PPUSH
5385: CALL_OW 248
5389: PUSH
5390: LD_VAR 0 1
5394: PPUSH
5395: CALL_OW 265
5399: PUSH
5400: LD_VAR 0 1
5404: PPUSH
5405: CALL_OW 262
5409: PUSH
5410: LD_VAR 0 1
5414: PPUSH
5415: CALL_OW 263
5419: PUSH
5420: LD_VAR 0 1
5424: PPUSH
5425: CALL_OW 264
5429: PUSH
5430: EMPTY
5431: LIST
5432: LIST
5433: LIST
5434: LIST
5435: LIST
5436: ADD
5437: ST_TO_ADDR
5438: GO 5367
5440: POP
5441: POP
// if tmp then
5442: LD_VAR 0 2
5446: IFFALSE 5460
// SaveVariable ( tmp , vehiclesInDelta ) ;
5448: LD_VAR 0 2
5452: PPUSH
5453: LD_STRING vehiclesInDelta
5455: PPUSH
5456: CALL_OW 39
// tmp := [ ] ;
5460: LD_ADDR_VAR 0 2
5464: PUSH
5465: EMPTY
5466: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) then
5467: LD_INT 22
5469: PUSH
5470: LD_INT 1
5472: PUSH
5473: EMPTY
5474: LIST
5475: LIST
5476: PUSH
5477: LD_INT 21
5479: PUSH
5480: LD_INT 3
5482: PUSH
5483: EMPTY
5484: LIST
5485: LIST
5486: PUSH
5487: EMPTY
5488: LIST
5489: LIST
5490: PPUSH
5491: CALL_OW 69
5495: IFFALSE 5648
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) do
5497: LD_ADDR_VAR 0 1
5501: PUSH
5502: LD_INT 22
5504: PUSH
5505: LD_INT 1
5507: PUSH
5508: EMPTY
5509: LIST
5510: LIST
5511: PUSH
5512: LD_INT 21
5514: PUSH
5515: LD_INT 3
5517: PUSH
5518: EMPTY
5519: LIST
5520: LIST
5521: PUSH
5522: EMPTY
5523: LIST
5524: LIST
5525: PPUSH
5526: CALL_OW 69
5530: PUSH
5531: FOR_IN
5532: IFFALSE 5646
// tmp := tmp ^ [ [ GetBType ( i ) , GetBLevel ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) , GetBWeapon ( i ) ] ] ;
5534: LD_ADDR_VAR 0 2
5538: PUSH
5539: LD_VAR 0 2
5543: PUSH
5544: LD_VAR 0 1
5548: PPUSH
5549: CALL_OW 266
5553: PUSH
5554: LD_VAR 0 1
5558: PPUSH
5559: CALL_OW 267
5563: PUSH
5564: LD_VAR 0 1
5568: PPUSH
5569: CALL_OW 250
5573: PUSH
5574: LD_VAR 0 1
5578: PPUSH
5579: CALL_OW 251
5583: PUSH
5584: LD_VAR 0 1
5588: PPUSH
5589: CALL_OW 254
5593: PUSH
5594: LD_VAR 0 1
5598: PPUSH
5599: LD_INT 1
5601: PPUSH
5602: CALL_OW 268
5606: PUSH
5607: LD_VAR 0 1
5611: PPUSH
5612: LD_INT 2
5614: PPUSH
5615: CALL_OW 268
5619: PUSH
5620: LD_VAR 0 1
5624: PPUSH
5625: CALL_OW 269
5629: PUSH
5630: EMPTY
5631: LIST
5632: LIST
5633: LIST
5634: LIST
5635: LIST
5636: LIST
5637: LIST
5638: LIST
5639: PUSH
5640: EMPTY
5641: LIST
5642: ADD
5643: ST_TO_ADDR
5644: GO 5531
5646: POP
5647: POP
// if tmp then
5648: LD_VAR 0 2
5652: IFFALSE 5666
// SaveVariable ( tmp , buildingsInDelta ) ;
5654: LD_VAR 0 2
5658: PPUSH
5659: LD_STRING buildingsInDelta
5661: PPUSH
5662: CALL_OW 39
// YouWin ;
5666: CALL_OW 103
// end ; end_of_file
5670: PPOPN 5
5672: END
// export function PrepareArabianTroops ( amount , skill , area ) ; var i , un , tmp ; begin
5673: LD_INT 0
5675: PPUSH
5676: PPUSH
5677: PPUSH
5678: PPUSH
// InitHc ;
5679: CALL_OW 19
// InitUc ;
5683: CALL_OW 18
// uc_side := 2 ;
5687: LD_ADDR_OWVAR 20
5691: PUSH
5692: LD_INT 2
5694: ST_TO_ADDR
// uc_nation := 2 ;
5695: LD_ADDR_OWVAR 21
5699: PUSH
5700: LD_INT 2
5702: ST_TO_ADDR
// if not amount then
5703: LD_VAR 0 1
5707: NOT
5708: IFFALSE 5712
// exit ;
5710: GO 5835
// for i = 1 to amount do
5712: LD_ADDR_VAR 0 5
5716: PUSH
5717: DOUBLE
5718: LD_INT 1
5720: DEC
5721: ST_TO_ADDR
5722: LD_VAR 0 1
5726: PUSH
5727: FOR_TO
5728: IFFALSE 5823
// begin PrepareHuman ( false , 1 , skill ) ;
5730: LD_INT 0
5732: PPUSH
5733: LD_INT 1
5735: PPUSH
5736: LD_VAR 0 2
5740: PPUSH
5741: CALL_OW 380
// un := CreateHuman ;
5745: LD_ADDR_VAR 0 6
5749: PUSH
5750: CALL_OW 44
5754: ST_TO_ADDR
// tmp := Insert ( tmp , 1 , un ) ;
5755: LD_ADDR_VAR 0 7
5759: PUSH
5760: LD_VAR 0 7
5764: PPUSH
5765: LD_INT 1
5767: PPUSH
5768: LD_VAR 0 6
5772: PPUSH
5773: CALL_OW 2
5777: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
5778: LD_VAR 0 6
5782: PPUSH
5783: LD_VAR 0 3
5787: PPUSH
5788: LD_INT 0
5790: PPUSH
5791: CALL_OW 49
// if i mod 2 = 0 then
5795: LD_VAR 0 5
5799: PUSH
5800: LD_INT 2
5802: MOD
5803: PUSH
5804: LD_INT 0
5806: EQUAL
5807: IFFALSE 5821
// SetTag ( un , 11 ) ;
5809: LD_VAR 0 6
5813: PPUSH
5814: LD_INT 11
5816: PPUSH
5817: CALL_OW 109
// end ;
5821: GO 5727
5823: POP
5824: POP
// result := tmp ;
5825: LD_ADDR_VAR 0 4
5829: PUSH
5830: LD_VAR 0 7
5834: ST_TO_ADDR
// end ;
5835: LD_VAR 0 4
5839: RET
// export ar_forces , ap_killers ; every 0 0$1 trigger Delta do var i , timer , more_troops , skill , eng , un , veh , force ;
5840: LD_EXP 6
5844: IFFALSE 6711
5846: GO 5848
5848: DISABLE
5849: LD_INT 0
5851: PPUSH
5852: PPUSH
5853: PPUSH
5854: PPUSH
5855: PPUSH
5856: PPUSH
5857: PPUSH
5858: PPUSH
// begin more_troops := false ;
5859: LD_ADDR_VAR 0 3
5863: PUSH
5864: LD_INT 0
5866: ST_TO_ADDR
// skill := [ 3 , 4 , 5 ] [ Difficulty ] ;
5867: LD_ADDR_VAR 0 4
5871: PUSH
5872: LD_INT 3
5874: PUSH
5875: LD_INT 4
5877: PUSH
5878: LD_INT 5
5880: PUSH
5881: EMPTY
5882: LIST
5883: LIST
5884: LIST
5885: PUSH
5886: LD_OWVAR 67
5890: ARRAY
5891: ST_TO_ADDR
// timer := [ 5 5$00 , 4 4$00 , 3 3$00 ] [ Difficulty ] ;
5892: LD_ADDR_VAR 0 2
5896: PUSH
5897: LD_INT 10500
5899: PUSH
5900: LD_INT 8400
5902: PUSH
5903: LD_INT 6300
5905: PUSH
5906: EMPTY
5907: LIST
5908: LIST
5909: LIST
5910: PUSH
5911: LD_OWVAR 67
5915: ARRAY
5916: ST_TO_ADDR
// force := [ ] ;
5917: LD_ADDR_VAR 0 8
5921: PUSH
5922: EMPTY
5923: ST_TO_ADDR
// ar_forces := [ ] ;
5924: LD_ADDR_EXP 27
5928: PUSH
5929: EMPTY
5930: ST_TO_ADDR
// ap_killers := [ ] ;
5931: LD_ADDR_EXP 28
5935: PUSH
5936: EMPTY
5937: ST_TO_ADDR
// Wait ( timer ) ;
5938: LD_VAR 0 2
5942: PPUSH
5943: CALL_OW 67
// if Denis and GetSide ( Denis ) = 4 then
5947: LD_EXP 19
5951: PUSH
5952: LD_EXP 19
5956: PPUSH
5957: CALL_OW 255
5961: PUSH
5962: LD_INT 4
5964: EQUAL
5965: AND
5966: IFFALSE 5975
// Wait ( 0 0$45 ) ;
5968: LD_INT 1575
5970: PPUSH
5971: CALL_OW 67
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_armoury ] ] ) then
5975: LD_INT 22
5977: PUSH
5978: LD_INT 1
5980: PUSH
5981: EMPTY
5982: LIST
5983: LIST
5984: PUSH
5985: LD_INT 30
5987: PUSH
5988: LD_INT 4
5990: PUSH
5991: EMPTY
5992: LIST
5993: LIST
5994: PUSH
5995: EMPTY
5996: LIST
5997: LIST
5998: PPUSH
5999: CALL_OW 69
6003: IFFALSE 6020
// begin Wait ( 1 1$25 ) ;
6005: LD_INT 2975
6007: PPUSH
6008: CALL_OW 67
// more_troops := true ;
6012: LD_ADDR_VAR 0 3
6016: PUSH
6017: LD_INT 1
6019: ST_TO_ADDR
// end ; if more_troops then
6020: LD_VAR 0 3
6024: IFFALSE 6212
// begin force := PrepareArabianTroops ( [ 4 , 5 , 6 ] [ Difficulty ] , skill , arArea2 ) ;
6026: LD_ADDR_VAR 0 8
6030: PUSH
6031: LD_INT 4
6033: PUSH
6034: LD_INT 5
6036: PUSH
6037: LD_INT 6
6039: PUSH
6040: EMPTY
6041: LIST
6042: LIST
6043: LIST
6044: PUSH
6045: LD_OWVAR 67
6049: ARRAY
6050: PPUSH
6051: LD_VAR 0 4
6055: PPUSH
6056: LD_INT 14
6058: PPUSH
6059: CALL 5673 0 3
6063: ST_TO_ADDR
// veh := PrepareTank ( 2 , 3 , ru_medium_tracked , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_heavy_machine_gun , ru_gatling_gun ] [ Difficulty ] , 90 ) ;
6064: LD_ADDR_VAR 0 7
6068: PUSH
6069: LD_INT 2
6071: PPUSH
6072: LD_INT 3
6074: PPUSH
6075: LD_INT 22
6077: PPUSH
6078: LD_INT 1
6080: PPUSH
6081: LD_INT 1
6083: PPUSH
6084: LD_INT 42
6086: PUSH
6087: LD_INT 42
6089: PUSH
6090: LD_INT 43
6092: PUSH
6093: EMPTY
6094: LIST
6095: LIST
6096: LIST
6097: PUSH
6098: LD_OWVAR 67
6102: ARRAY
6103: PPUSH
6104: LD_INT 90
6106: PPUSH
6107: CALL 427 0 7
6111: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
6112: LD_VAR 0 7
6116: PPUSH
6117: LD_INT 4
6119: PPUSH
6120: CALL_OW 233
// PlaceUnitArea ( veh , arArea1 , false ) ;
6124: LD_VAR 0 7
6128: PPUSH
6129: LD_INT 13
6131: PPUSH
6132: LD_INT 0
6134: PPUSH
6135: CALL_OW 49
// uc_side := 2 ;
6139: LD_ADDR_OWVAR 20
6143: PUSH
6144: LD_INT 2
6146: ST_TO_ADDR
// uc_nation := 2 ;
6147: LD_ADDR_OWVAR 21
6151: PUSH
6152: LD_INT 2
6154: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
6155: LD_INT 0
6157: PPUSH
6158: LD_INT 1
6160: PPUSH
6161: LD_VAR 0 4
6165: PPUSH
6166: CALL_OW 380
// un := CreateHuman ;
6170: LD_ADDR_VAR 0 6
6174: PUSH
6175: CALL_OW 44
6179: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6180: LD_VAR 0 6
6184: PPUSH
6185: LD_VAR 0 7
6189: PPUSH
6190: CALL_OW 52
// force := force ^ un ;
6194: LD_ADDR_VAR 0 8
6198: PUSH
6199: LD_VAR 0 8
6203: PUSH
6204: LD_VAR 0 6
6208: ADD
6209: ST_TO_ADDR
// end else
6210: GO 6250
// begin force := PrepareArabianTroops ( [ 3 , 4 , 5 ] [ Difficulty ] , skill , arArea2 ) ;
6212: LD_ADDR_VAR 0 8
6216: PUSH
6217: LD_INT 3
6219: PUSH
6220: LD_INT 4
6222: PUSH
6223: LD_INT 5
6225: PUSH
6226: EMPTY
6227: LIST
6228: LIST
6229: LIST
6230: PUSH
6231: LD_OWVAR 67
6235: ARRAY
6236: PPUSH
6237: LD_VAR 0 4
6241: PPUSH
6242: LD_INT 14
6244: PPUSH
6245: CALL 5673 0 3
6249: ST_TO_ADDR
// end ; if force then
6250: LD_VAR 0 8
6254: IFFALSE 6266
// ar_forces := force ;
6256: LD_ADDR_EXP 27
6260: PUSH
6261: LD_VAR 0 8
6265: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
6266: LD_INT 35
6268: PPUSH
6269: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) = 0 ;
6273: LD_INT 22
6275: PUSH
6276: LD_INT 2
6278: PUSH
6279: EMPTY
6280: LIST
6281: LIST
6282: PUSH
6283: LD_INT 21
6285: PUSH
6286: LD_INT 1
6288: PUSH
6289: EMPTY
6290: LIST
6291: LIST
6292: PUSH
6293: EMPTY
6294: LIST
6295: LIST
6296: PPUSH
6297: CALL_OW 69
6301: PUSH
6302: LD_INT 0
6304: EQUAL
6305: IFFALSE 6266
// Wait ( timer ) ;
6307: LD_VAR 0 2
6311: PPUSH
6312: CALL_OW 67
// force := PrepareArabianTroops ( [ 4 , 5 , 6 ] [ Difficulty ] , skill , [ arArea1 , arArea2 ] [ rand ( 1 , 2 ) ] ) ;
6316: LD_ADDR_VAR 0 8
6320: PUSH
6321: LD_INT 4
6323: PUSH
6324: LD_INT 5
6326: PUSH
6327: LD_INT 6
6329: PUSH
6330: EMPTY
6331: LIST
6332: LIST
6333: LIST
6334: PUSH
6335: LD_OWVAR 67
6339: ARRAY
6340: PPUSH
6341: LD_VAR 0 4
6345: PPUSH
6346: LD_INT 13
6348: PUSH
6349: LD_INT 14
6351: PUSH
6352: EMPTY
6353: LIST
6354: LIST
6355: PUSH
6356: LD_INT 1
6358: PPUSH
6359: LD_INT 2
6361: PPUSH
6362: CALL_OW 12
6366: ARRAY
6367: PPUSH
6368: CALL 5673 0 3
6372: ST_TO_ADDR
// if Difficulty > 1 and Delta then
6373: LD_OWVAR 67
6377: PUSH
6378: LD_INT 1
6380: GREATER
6381: PUSH
6382: LD_EXP 6
6386: AND
6387: IFFALSE 6466
// begin uc_side := 2 ;
6389: LD_ADDR_OWVAR 20
6393: PUSH
6394: LD_INT 2
6396: ST_TO_ADDR
// uc_nation := 2 ;
6397: LD_ADDR_OWVAR 21
6401: PUSH
6402: LD_INT 2
6404: ST_TO_ADDR
// PrepareHuman ( false , 2 , skill ) ;
6405: LD_INT 0
6407: PPUSH
6408: LD_INT 2
6410: PPUSH
6411: LD_VAR 0 4
6415: PPUSH
6416: CALL_OW 380
// eng := CreateHuman ;
6420: LD_ADDR_VAR 0 5
6424: PUSH
6425: CALL_OW 44
6429: ST_TO_ADDR
// PlaceUnitArea ( eng , arArea1 , false ) ;
6430: LD_VAR 0 5
6434: PPUSH
6435: LD_INT 13
6437: PPUSH
6438: LD_INT 0
6440: PPUSH
6441: CALL_OW 49
// Wait ( 3 ) ;
6445: LD_INT 3
6447: PPUSH
6448: CALL_OW 67
// AddComEnterUnit ( eng , Delta ) ;
6452: LD_VAR 0 5
6456: PPUSH
6457: LD_EXP 6
6461: PPUSH
6462: CALL_OW 180
// end ; if force then
6466: LD_VAR 0 8
6470: IFFALSE 6482
// ar_forces := force ;
6472: LD_ADDR_EXP 27
6476: PUSH
6477: LD_VAR 0 8
6481: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
6482: LD_INT 35
6484: PPUSH
6485: CALL_OW 67
// if eng then
6489: LD_VAR 0 5
6493: IFFALSE 6547
// if GetSide ( Delta ) = 2 and IsOk ( eng ) and not IsInUnit ( eng ) then
6495: LD_EXP 6
6499: PPUSH
6500: CALL_OW 255
6504: PUSH
6505: LD_INT 2
6507: EQUAL
6508: PUSH
6509: LD_VAR 0 5
6513: PPUSH
6514: CALL_OW 302
6518: AND
6519: PUSH
6520: LD_VAR 0 5
6524: PPUSH
6525: CALL_OW 310
6529: NOT
6530: AND
6531: IFFALSE 6547
// ComEnterUnit ( eng , Delta ) ;
6533: LD_VAR 0 5
6537: PPUSH
6538: LD_EXP 6
6542: PPUSH
6543: CALL_OW 120
// until FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) = 0 ;
6547: LD_INT 22
6549: PUSH
6550: LD_INT 2
6552: PUSH
6553: EMPTY
6554: LIST
6555: LIST
6556: PUSH
6557: LD_INT 21
6559: PUSH
6560: LD_INT 1
6562: PUSH
6563: EMPTY
6564: LIST
6565: LIST
6566: PUSH
6567: EMPTY
6568: LIST
6569: LIST
6570: PPUSH
6571: CALL_OW 69
6575: PUSH
6576: LD_INT 0
6578: EQUAL
6579: IFFALSE 6482
// Wait ( 2 2$00 ) ;
6581: LD_INT 4200
6583: PPUSH
6584: CALL_OW 67
// ap_killers := PrepareArabianTroops ( [ 1 , 2 , 2 ] [ Difficulty ] , skill , arArea1 ) ;
6588: LD_ADDR_EXP 28
6592: PUSH
6593: LD_INT 1
6595: PUSH
6596: LD_INT 2
6598: PUSH
6599: LD_INT 2
6601: PUSH
6602: EMPTY
6603: LIST
6604: LIST
6605: LIST
6606: PUSH
6607: LD_OWVAR 67
6611: ARRAY
6612: PPUSH
6613: LD_VAR 0 4
6617: PPUSH
6618: LD_INT 13
6620: PPUSH
6621: CALL 5673 0 3
6625: ST_TO_ADDR
// Wait ( timer * 2 ) ;
6626: LD_VAR 0 2
6630: PUSH
6631: LD_INT 2
6633: MUL
6634: PPUSH
6635: CALL_OW 67
// ar_forces := PrepareArabianTroops ( [ 5 , 6 , 7 ] [ Difficulty ] , skill , arArea1 ) ^ PrepareArabianTroops ( [ 3 , 4 , 4 ] [ Difficulty ] , skill , arArea2 ) ;
6639: LD_ADDR_EXP 27
6643: PUSH
6644: LD_INT 5
6646: PUSH
6647: LD_INT 6
6649: PUSH
6650: LD_INT 7
6652: PUSH
6653: EMPTY
6654: LIST
6655: LIST
6656: LIST
6657: PUSH
6658: LD_OWVAR 67
6662: ARRAY
6663: PPUSH
6664: LD_VAR 0 4
6668: PPUSH
6669: LD_INT 13
6671: PPUSH
6672: CALL 5673 0 3
6676: PUSH
6677: LD_INT 3
6679: PUSH
6680: LD_INT 4
6682: PUSH
6683: LD_INT 4
6685: PUSH
6686: EMPTY
6687: LIST
6688: LIST
6689: LIST
6690: PUSH
6691: LD_OWVAR 67
6695: ARRAY
6696: PPUSH
6697: LD_VAR 0 4
6701: PPUSH
6702: LD_INT 14
6704: PPUSH
6705: CALL 5673 0 3
6709: ADD
6710: ST_TO_ADDR
// end ;
6711: PPOPN 8
6713: END
// every 0 0$03 trigger ar_forces do var i , target ;
6714: LD_EXP 27
6718: IFFALSE 6916
6720: GO 6722
6722: DISABLE
6723: LD_INT 0
6725: PPUSH
6726: PPUSH
// begin enable ;
6727: ENABLE
// if not ar_forces then
6728: LD_EXP 27
6732: NOT
6733: IFFALSE 6737
// exit ;
6735: GO 6916
// if Delta then
6737: LD_EXP 6
6741: IFFALSE 6755
// target := Delta else
6743: LD_ADDR_VAR 0 2
6747: PUSH
6748: LD_EXP 6
6752: ST_TO_ADDR
6753: GO 6765
// target := JMM ;
6755: LD_ADDR_VAR 0 2
6759: PUSH
6760: LD_EXP 16
6764: ST_TO_ADDR
// for i in ar_forces do
6765: LD_ADDR_VAR 0 1
6769: PUSH
6770: LD_EXP 27
6774: PUSH
6775: FOR_IN
6776: IFFALSE 6914
// begin if i in FilterAllUnits ( [ f_driving ] ) then
6778: LD_VAR 0 1
6782: PUSH
6783: LD_INT 55
6785: PUSH
6786: EMPTY
6787: LIST
6788: PPUSH
6789: CALL_OW 69
6793: IN
6794: IFFALSE 6837
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , IsInUnit ( i ) ) ) else
6796: LD_VAR 0 1
6800: PPUSH
6801: LD_INT 22
6803: PUSH
6804: LD_INT 1
6806: PUSH
6807: EMPTY
6808: LIST
6809: LIST
6810: PPUSH
6811: CALL_OW 69
6815: PPUSH
6816: LD_VAR 0 1
6820: PPUSH
6821: CALL_OW 310
6825: PPUSH
6826: CALL_OW 74
6830: PPUSH
6831: CALL_OW 115
6835: GO 6912
// if GetDistUnits ( i , target ) > 30 then
6837: LD_VAR 0 1
6841: PPUSH
6842: LD_VAR 0 2
6846: PPUSH
6847: CALL_OW 296
6851: PUSH
6852: LD_INT 30
6854: GREATER
6855: IFFALSE 6888
// ComAgressiveMove ( i , GetX ( target ) , GetY ( target ) ) else
6857: LD_VAR 0 1
6861: PPUSH
6862: LD_VAR 0 2
6866: PPUSH
6867: CALL_OW 250
6871: PPUSH
6872: LD_VAR 0 2
6876: PPUSH
6877: CALL_OW 251
6881: PPUSH
6882: CALL_OW 114
6886: GO 6912
// Attack ( i , FilterAllUnits ( [ f_enemy , 2 ] ) ) ;
6888: LD_VAR 0 1
6892: PPUSH
6893: LD_INT 81
6895: PUSH
6896: LD_INT 2
6898: PUSH
6899: EMPTY
6900: LIST
6901: LIST
6902: PPUSH
6903: CALL_OW 69
6907: PPUSH
6908: CALL 732 0 2
// end ;
6912: GO 6775
6914: POP
6915: POP
// end ;
6916: PPOPN 2
6918: END
// every 0 0$01 trigger ap_killers do var filter , i , target ;
6919: LD_EXP 28
6923: IFFALSE 7083
6925: GO 6927
6927: DISABLE
6928: LD_INT 0
6930: PPUSH
6931: PPUSH
6932: PPUSH
// begin enable ;
6933: ENABLE
// filter := FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) ;
6934: LD_ADDR_VAR 0 1
6938: PUSH
6939: LD_INT 22
6941: PUSH
6942: LD_INT 0
6944: PUSH
6945: EMPTY
6946: LIST
6947: LIST
6948: PUSH
6949: LD_INT 25
6951: PUSH
6952: LD_INT 12
6954: PUSH
6955: EMPTY
6956: LIST
6957: LIST
6958: PUSH
6959: EMPTY
6960: LIST
6961: LIST
6962: PPUSH
6963: CALL_OW 69
6967: ST_TO_ADDR
// if not filter then
6968: LD_VAR 0 1
6972: NOT
6973: IFFALSE 7000
// begin ar_forces := ar_forces ^ ap_killers ;
6975: LD_ADDR_EXP 27
6979: PUSH
6980: LD_EXP 27
6984: PUSH
6985: LD_EXP 28
6989: ADD
6990: ST_TO_ADDR
// ap_killers := [ ] ;
6991: LD_ADDR_EXP 28
6995: PUSH
6996: EMPTY
6997: ST_TO_ADDR
// exit ;
6998: GO 7083
// end ; for i in ap_killers do
7000: LD_ADDR_VAR 0 2
7004: PUSH
7005: LD_EXP 28
7009: PUSH
7010: FOR_IN
7011: IFFALSE 7081
// begin if not IsOk ( i ) then
7013: LD_VAR 0 2
7017: PPUSH
7018: CALL_OW 302
7022: NOT
7023: IFFALSE 7027
// continue ;
7025: GO 7010
// if not HasTask ( i ) then
7027: LD_VAR 0 2
7031: PPUSH
7032: CALL_OW 314
7036: NOT
7037: IFFALSE 7059
// target := NearestUnitToUnit ( filter , i ) ;
7039: LD_ADDR_VAR 0 3
7043: PUSH
7044: LD_VAR 0 1
7048: PPUSH
7049: LD_VAR 0 2
7053: PPUSH
7054: CALL_OW 74
7058: ST_TO_ADDR
// if target then
7059: LD_VAR 0 3
7063: IFFALSE 7079
// ComAttackUnit ( i , target ) ;
7065: LD_VAR 0 2
7069: PPUSH
7070: LD_VAR 0 3
7074: PPUSH
7075: CALL_OW 115
// end ;
7079: GO 7010
7081: POP
7082: POP
// end ; end_of_file
7083: PPOPN 3
7085: END
// every 0 0$40 + 0 0$2 trigger Delta do var i , counter , cr ;
7086: LD_EXP 6
7090: IFFALSE 7222
7092: GO 7094
7094: DISABLE
7095: LD_INT 0
7097: PPUSH
7098: PPUSH
7099: PPUSH
// begin counter := [ 300 , 250 , 220 ] [ Difficulty ] ;
7100: LD_ADDR_VAR 0 2
7104: PUSH
7105: LD_INT 300
7107: PUSH
7108: LD_INT 250
7110: PUSH
7111: LD_INT 220
7113: PUSH
7114: EMPTY
7115: LIST
7116: LIST
7117: LIST
7118: PUSH
7119: LD_OWVAR 67
7123: ARRAY
7124: ST_TO_ADDR
// CreateCratesArea ( Rand ( 1 , 3 ) , cratesArea , true ) ;
7125: LD_INT 1
7127: PPUSH
7128: LD_INT 3
7130: PPUSH
7131: CALL_OW 12
7135: PPUSH
7136: LD_INT 7
7138: PPUSH
7139: LD_INT 1
7141: PPUSH
7142: CALL_OW 55
// repeat wait ( rand ( 1 1$30 , 2 2$20 ) ) ;
7146: LD_INT 3150
7148: PPUSH
7149: LD_INT 4900
7151: PPUSH
7152: CALL_OW 12
7156: PPUSH
7157: CALL_OW 67
// cr := rand ( 1 , 5 ) ;
7161: LD_ADDR_VAR 0 3
7165: PUSH
7166: LD_INT 1
7168: PPUSH
7169: LD_INT 5
7171: PPUSH
7172: CALL_OW 12
7176: ST_TO_ADDR
// CreateCratesArea ( cr , cratesArea , true ) ;
7177: LD_VAR 0 3
7181: PPUSH
7182: LD_INT 7
7184: PPUSH
7185: LD_INT 1
7187: PPUSH
7188: CALL_OW 55
// counter := counter - cr * 10 ;
7192: LD_ADDR_VAR 0 2
7196: PUSH
7197: LD_VAR 0 2
7201: PUSH
7202: LD_VAR 0 3
7206: PUSH
7207: LD_INT 10
7209: MUL
7210: MINUS
7211: ST_TO_ADDR
// until counter <= 0 ;
7212: LD_VAR 0 2
7216: PUSH
7217: LD_INT 0
7219: LESSEQUAL
7220: IFFALSE 7146
// end ;
7222: PPOPN 3
7224: END
// every 0 0$03 trigger not Delta do var i ;
7225: LD_EXP 6
7229: NOT
7230: IFFALSE 7300
7232: GO 7234
7234: DISABLE
7235: LD_INT 0
7237: PPUSH
// begin for i = 1 to 4 - Difficulty do
7238: LD_ADDR_VAR 0 1
7242: PUSH
7243: DOUBLE
7244: LD_INT 1
7246: DEC
7247: ST_TO_ADDR
7248: LD_INT 4
7250: PUSH
7251: LD_OWVAR 67
7255: MINUS
7256: PUSH
7257: FOR_TO
7258: IFFALSE 7298
// begin CreateCratesArea ( rand ( 2 , 5 ) , deltaMainArea , true ) ;
7260: LD_INT 2
7262: PPUSH
7263: LD_INT 5
7265: PPUSH
7266: CALL_OW 12
7270: PPUSH
7271: LD_INT 8
7273: PPUSH
7274: LD_INT 1
7276: PPUSH
7277: CALL_OW 55
// Wait ( rand ( 0 0$16 , 0 0$39 ) ) ;
7281: LD_INT 560
7283: PPUSH
7284: LD_INT 1365
7286: PPUSH
7287: CALL_OW 12
7291: PPUSH
7292: CALL_OW 67
// end ;
7296: GO 7257
7298: POP
7299: POP
// end ;
7300: PPOPN 1
7302: END
// every 3 3$00 trigger tick < 15 15$00 do
7303: LD_OWVAR 1
7307: PUSH
7308: LD_INT 31500
7310: LESS
7311: IFFALSE 7371
7313: GO 7315
7315: DISABLE
// begin enable ;
7316: ENABLE
// CreateCratesAnyWhere ( rand ( 1 , 3 ) , true ) ;
7317: LD_INT 1
7319: PPUSH
7320: LD_INT 3
7322: PPUSH
7323: CALL_OW 12
7327: PPUSH
7328: LD_INT 1
7330: PPUSH
7331: CALL_OW 57
// Wait ( rand ( 0 0$38 , 0 0$59 ) ) ;
7335: LD_INT 1330
7337: PPUSH
7338: LD_INT 2065
7340: PPUSH
7341: CALL_OW 12
7345: PPUSH
7346: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 4 ) , riverArea , true ) ;
7350: LD_INT 1
7352: PPUSH
7353: LD_INT 4
7355: PPUSH
7356: CALL_OW 12
7360: PPUSH
7361: LD_INT 15
7363: PPUSH
7364: LD_INT 1
7366: PPUSH
7367: CALL_OW 55
// end ; end_of_file
7371: END
// on UnitDestroyed ( un ) do begin if un = JMM then
7372: LD_VAR 0 1
7376: PUSH
7377: LD_EXP 16
7381: EQUAL
7382: IFFALSE 7391
// YouLost ( JMM ) ;
7384: LD_STRING JMM
7386: PPUSH
7387: CALL_OW 104
// if un = Delta then
7391: LD_VAR 0 1
7395: PUSH
7396: LD_EXP 6
7400: EQUAL
7401: IFFALSE 7424
// begin Delta := 0 ;
7403: LD_ADDR_EXP 6
7407: PUSH
7408: LD_INT 0
7410: ST_TO_ADDR
// SetRestrict ( b_depot , 1 , true ) ;
7411: LD_INT 0
7413: PPUSH
7414: LD_INT 1
7416: PPUSH
7417: LD_INT 1
7419: PPUSH
7420: CALL_OW 324
// end ; if un in ar_forces then
7424: LD_VAR 0 1
7428: PUSH
7429: LD_EXP 27
7433: IN
7434: IFFALSE 7452
// ar_forces := ar_forces diff un ;
7436: LD_ADDR_EXP 27
7440: PUSH
7441: LD_EXP 27
7445: PUSH
7446: LD_VAR 0 1
7450: DIFF
7451: ST_TO_ADDR
// if un in ap_killers then
7452: LD_VAR 0 1
7456: PUSH
7457: LD_EXP 28
7461: IN
7462: IFFALSE 7480
// ap_killers := ap_killers diff un ;
7464: LD_ADDR_EXP 28
7468: PUSH
7469: LD_EXP 28
7473: PUSH
7474: LD_VAR 0 1
7478: DIFF
7479: ST_TO_ADDR
// if un in FilterAllUnits ( [ f_or , [ f_class , class_apeman ] , [ f_class , class_apeman_engineer ] ] ) then
7480: LD_VAR 0 1
7484: PUSH
7485: LD_INT 2
7487: PUSH
7488: LD_INT 25
7490: PUSH
7491: LD_INT 12
7493: PUSH
7494: EMPTY
7495: LIST
7496: LIST
7497: PUSH
7498: LD_INT 25
7500: PUSH
7501: LD_INT 16
7503: PUSH
7504: EMPTY
7505: LIST
7506: LIST
7507: PUSH
7508: EMPTY
7509: LIST
7510: LIST
7511: LIST
7512: PPUSH
7513: CALL_OW 69
7517: IN
7518: IFFALSE 7534
// apeKillCounter := apeKillCounter + 1 ;
7520: LD_ADDR_EXP 15
7524: PUSH
7525: LD_EXP 15
7529: PUSH
7530: LD_INT 1
7532: PLUS
7533: ST_TO_ADDR
// end ;
7534: PPOPN 1
7536: END
// on Contact ( s1 , s2 ) do if s1 = 1 and s2 = 2 and not arab_spotted then
7537: LD_VAR 0 1
7541: PUSH
7542: LD_INT 1
7544: EQUAL
7545: PUSH
7546: LD_VAR 0 2
7550: PUSH
7551: LD_INT 2
7553: EQUAL
7554: AND
7555: PUSH
7556: LD_EXP 13
7560: NOT
7561: AND
7562: IFFALSE 7572
// arab_spotted := true ;
7564: LD_ADDR_EXP 13
7568: PUSH
7569: LD_INT 1
7571: ST_TO_ADDR
7572: PPOPN 2
7574: END
// on EndTheMissionRaised ( p ) do begin end_the_mission_allowed := false ;
7575: LD_ADDR_OWVAR 57
7579: PUSH
7580: LD_INT 0
7582: ST_TO_ADDR
// end_mission := true ;
7583: LD_ADDR_EXP 14
7587: PUSH
7588: LD_INT 1
7590: ST_TO_ADDR
// end ;
7591: PPOPN 1
7593: END
// on ApemanTamed ( apeman , sci ) do begin if GetSide ( sci ) = 1 then
7594: LD_VAR 0 2
7598: PPUSH
7599: CALL_OW 255
7603: PUSH
7604: LD_INT 1
7606: EQUAL
7607: IFFALSE 7623
// apeman_counter := apeman_counter + 1 ;
7609: LD_ADDR_EXP 12
7613: PUSH
7614: LD_EXP 12
7618: PUSH
7619: LD_INT 1
7621: PLUS
7622: ST_TO_ADDR
// if not first_apeman_tamed then
7623: LD_EXP 8
7627: NOT
7628: IFFALSE 7828
// begin first_apeman_tamed := true ;
7630: LD_ADDR_EXP 8
7634: PUSH
7635: LD_INT 1
7637: ST_TO_ADDR
// if sci = Gladstone then
7638: LD_VAR 0 2
7642: PUSH
7643: LD_EXP 17
7647: EQUAL
7648: IFFALSE 7662
// Say ( Gladstone , D7b-Glad-1 ) ;
7650: LD_EXP 17
7654: PPUSH
7655: LD_STRING D7b-Glad-1
7657: PPUSH
7658: CALL_OW 88
// if sci = Denis then
7662: LD_VAR 0 2
7666: PUSH
7667: LD_EXP 19
7671: EQUAL
7672: IFFALSE 7686
// Say ( Denis , D7a-Den-1 ) ;
7674: LD_EXP 19
7678: PPUSH
7679: LD_STRING D7a-Den-1
7681: PPUSH
7682: CALL_OW 88
// if not sci in [ JMM , Gladstone , Denis , Lisa , Frank , Bobby , Cyrus , Donaldson ] then
7686: LD_VAR 0 2
7690: PUSH
7691: LD_EXP 16
7695: PUSH
7696: LD_EXP 17
7700: PUSH
7701: LD_EXP 19
7705: PUSH
7706: LD_EXP 22
7710: PUSH
7711: LD_EXP 23
7715: PUSH
7716: LD_EXP 24
7720: PUSH
7721: LD_EXP 25
7725: PUSH
7726: LD_EXP 21
7730: PUSH
7731: EMPTY
7732: LIST
7733: LIST
7734: LIST
7735: LIST
7736: LIST
7737: LIST
7738: LIST
7739: LIST
7740: IN
7741: NOT
7742: IFFALSE 7785
// begin if GetSex ( sci ) = sex_male then
7744: LD_VAR 0 2
7748: PPUSH
7749: CALL_OW 258
7753: PUSH
7754: LD_INT 1
7756: EQUAL
7757: IFFALSE 7773
// Say ( sci , D7c-Sci1-1 ) else
7759: LD_VAR 0 2
7763: PPUSH
7764: LD_STRING D7c-Sci1-1
7766: PPUSH
7767: CALL_OW 88
7771: GO 7785
// Say ( sci , D7c-FSci1-1 ) ;
7773: LD_VAR 0 2
7777: PPUSH
7778: LD_STRING D7c-FSci1-1
7780: PPUSH
7781: CALL_OW 88
// end ; if not sci = Gladstone then
7785: LD_VAR 0 2
7789: PUSH
7790: LD_EXP 17
7794: EQUAL
7795: NOT
7796: IFFALSE 7810
// Say ( Gladstone , D7c-Glad-1 ) ;
7798: LD_EXP 17
7802: PPUSH
7803: LD_STRING D7c-Glad-1
7805: PPUSH
7806: CALL_OW 88
// if Lisa then
7810: LD_EXP 22
7814: IFFALSE 7828
// Say ( Lisa , D8-Lisa-1 ) ;
7816: LD_EXP 22
7820: PPUSH
7821: LD_STRING D8-Lisa-1
7823: PPUSH
7824: CALL_OW 88
// end ; end ; end_of_file
7828: PPOPN 2
7830: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export function InitGlobalVariables ; begin
7831: LD_INT 0
7833: PPUSH
// ar_miner := 81 ;
7834: LD_ADDR_EXP 36
7838: PUSH
7839: LD_INT 81
7841: ST_TO_ADDR
// ar_crane := 88 ;
7842: LD_ADDR_EXP 35
7846: PUSH
7847: LD_INT 88
7849: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
7850: LD_ADDR_EXP 30
7854: PUSH
7855: LD_INT 89
7857: ST_TO_ADDR
// us_hack := 99 ;
7858: LD_ADDR_EXP 31
7862: PUSH
7863: LD_INT 99
7865: ST_TO_ADDR
// us_artillery := 97 ;
7866: LD_ADDR_EXP 32
7870: PUSH
7871: LD_INT 97
7873: ST_TO_ADDR
// ar_bio_bomb := 91 ;
7874: LD_ADDR_EXP 33
7878: PUSH
7879: LD_INT 91
7881: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
7882: LD_ADDR_EXP 34
7886: PUSH
7887: LD_INT 92
7889: ST_TO_ADDR
// ru_radar := 98 ;
7890: LD_ADDR_EXP 29
7894: PUSH
7895: LD_INT 98
7897: ST_TO_ADDR
// tech_Artillery := 80 ;
7898: LD_ADDR_EXP 37
7902: PUSH
7903: LD_INT 80
7905: ST_TO_ADDR
// tech_RadMat := 81 ;
7906: LD_ADDR_EXP 38
7910: PUSH
7911: LD_INT 81
7913: ST_TO_ADDR
// tech_BasicTools := 82 ;
7914: LD_ADDR_EXP 39
7918: PUSH
7919: LD_INT 82
7921: ST_TO_ADDR
// tech_Cargo := 83 ;
7922: LD_ADDR_EXP 40
7926: PUSH
7927: LD_INT 83
7929: ST_TO_ADDR
// tech_Track := 84 ;
7930: LD_ADDR_EXP 41
7934: PUSH
7935: LD_INT 84
7937: ST_TO_ADDR
// tech_Crane := 85 ;
7938: LD_ADDR_EXP 42
7942: PUSH
7943: LD_INT 85
7945: ST_TO_ADDR
// tech_Bulldozer := 86 ;
7946: LD_ADDR_EXP 43
7950: PUSH
7951: LD_INT 86
7953: ST_TO_ADDR
// tech_Hovercraft := 87 ;
7954: LD_ADDR_EXP 44
7958: PUSH
7959: LD_INT 87
7961: ST_TO_ADDR
// end ;
7962: LD_VAR 0 1
7966: RET
// every 1 do
7967: GO 7969
7969: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
7970: CALL 7831 0 0
7974: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
7975: LD_VAR 0 2
7979: PUSH
7980: LD_INT 100
7982: EQUAL
7983: IFFALSE 8932
// begin if not StreamModeActive then
7985: LD_EXP 45
7989: NOT
7990: IFFALSE 8000
// StreamModeActive := true ;
7992: LD_ADDR_EXP 45
7996: PUSH
7997: LD_INT 1
7999: ST_TO_ADDR
// if p3 = 0 then
8000: LD_VAR 0 3
8004: PUSH
8005: LD_INT 0
8007: EQUAL
8008: IFFALSE 8014
// InitStreamMode ;
8010: CALL 9090 0 0
// if p3 = 1 then
8014: LD_VAR 0 3
8018: PUSH
8019: LD_INT 1
8021: EQUAL
8022: IFFALSE 8032
// sRocket := true ;
8024: LD_ADDR_EXP 50
8028: PUSH
8029: LD_INT 1
8031: ST_TO_ADDR
// if p3 = 2 then
8032: LD_VAR 0 3
8036: PUSH
8037: LD_INT 2
8039: EQUAL
8040: IFFALSE 8050
// sSpeed := true ;
8042: LD_ADDR_EXP 49
8046: PUSH
8047: LD_INT 1
8049: ST_TO_ADDR
// if p3 = 3 then
8050: LD_VAR 0 3
8054: PUSH
8055: LD_INT 3
8057: EQUAL
8058: IFFALSE 8068
// sEngine := true ;
8060: LD_ADDR_EXP 51
8064: PUSH
8065: LD_INT 1
8067: ST_TO_ADDR
// if p3 = 4 then
8068: LD_VAR 0 3
8072: PUSH
8073: LD_INT 4
8075: EQUAL
8076: IFFALSE 8086
// sSpec := true ;
8078: LD_ADDR_EXP 48
8082: PUSH
8083: LD_INT 1
8085: ST_TO_ADDR
// if p3 = 5 then
8086: LD_VAR 0 3
8090: PUSH
8091: LD_INT 5
8093: EQUAL
8094: IFFALSE 8104
// sLevel := true ;
8096: LD_ADDR_EXP 52
8100: PUSH
8101: LD_INT 1
8103: ST_TO_ADDR
// if p3 = 6 then
8104: LD_VAR 0 3
8108: PUSH
8109: LD_INT 6
8111: EQUAL
8112: IFFALSE 8122
// sArmoury := true ;
8114: LD_ADDR_EXP 53
8118: PUSH
8119: LD_INT 1
8121: ST_TO_ADDR
// if p3 = 7 then
8122: LD_VAR 0 3
8126: PUSH
8127: LD_INT 7
8129: EQUAL
8130: IFFALSE 8140
// sRadar := true ;
8132: LD_ADDR_EXP 54
8136: PUSH
8137: LD_INT 1
8139: ST_TO_ADDR
// if p3 = 8 then
8140: LD_VAR 0 3
8144: PUSH
8145: LD_INT 8
8147: EQUAL
8148: IFFALSE 8158
// sBunker := true ;
8150: LD_ADDR_EXP 55
8154: PUSH
8155: LD_INT 1
8157: ST_TO_ADDR
// if p3 = 9 then
8158: LD_VAR 0 3
8162: PUSH
8163: LD_INT 9
8165: EQUAL
8166: IFFALSE 8176
// sHack := true ;
8168: LD_ADDR_EXP 56
8172: PUSH
8173: LD_INT 1
8175: ST_TO_ADDR
// if p3 = 10 then
8176: LD_VAR 0 3
8180: PUSH
8181: LD_INT 10
8183: EQUAL
8184: IFFALSE 8194
// sFire := true ;
8186: LD_ADDR_EXP 57
8190: PUSH
8191: LD_INT 1
8193: ST_TO_ADDR
// if p3 = 11 then
8194: LD_VAR 0 3
8198: PUSH
8199: LD_INT 11
8201: EQUAL
8202: IFFALSE 8212
// sRefresh := true ;
8204: LD_ADDR_EXP 58
8208: PUSH
8209: LD_INT 1
8211: ST_TO_ADDR
// if p3 = 12 then
8212: LD_VAR 0 3
8216: PUSH
8217: LD_INT 12
8219: EQUAL
8220: IFFALSE 8230
// sExp := true ;
8222: LD_ADDR_EXP 59
8226: PUSH
8227: LD_INT 1
8229: ST_TO_ADDR
// if p3 = 13 then
8230: LD_VAR 0 3
8234: PUSH
8235: LD_INT 13
8237: EQUAL
8238: IFFALSE 8248
// sDepot := true ;
8240: LD_ADDR_EXP 60
8244: PUSH
8245: LD_INT 1
8247: ST_TO_ADDR
// if p3 = 14 then
8248: LD_VAR 0 3
8252: PUSH
8253: LD_INT 14
8255: EQUAL
8256: IFFALSE 8266
// sFlag := true ;
8258: LD_ADDR_EXP 61
8262: PUSH
8263: LD_INT 1
8265: ST_TO_ADDR
// if p3 = 15 then
8266: LD_VAR 0 3
8270: PUSH
8271: LD_INT 15
8273: EQUAL
8274: IFFALSE 8284
// sKamikadze := true ;
8276: LD_ADDR_EXP 69
8280: PUSH
8281: LD_INT 1
8283: ST_TO_ADDR
// if p3 = 16 then
8284: LD_VAR 0 3
8288: PUSH
8289: LD_INT 16
8291: EQUAL
8292: IFFALSE 8302
// sTroll := true ;
8294: LD_ADDR_EXP 70
8298: PUSH
8299: LD_INT 1
8301: ST_TO_ADDR
// if p3 = 17 then
8302: LD_VAR 0 3
8306: PUSH
8307: LD_INT 17
8309: EQUAL
8310: IFFALSE 8320
// sSlow := true ;
8312: LD_ADDR_EXP 71
8316: PUSH
8317: LD_INT 1
8319: ST_TO_ADDR
// if p3 = 18 then
8320: LD_VAR 0 3
8324: PUSH
8325: LD_INT 18
8327: EQUAL
8328: IFFALSE 8338
// sLack := true ;
8330: LD_ADDR_EXP 72
8334: PUSH
8335: LD_INT 1
8337: ST_TO_ADDR
// if p3 = 19 then
8338: LD_VAR 0 3
8342: PUSH
8343: LD_INT 19
8345: EQUAL
8346: IFFALSE 8356
// sTank := true ;
8348: LD_ADDR_EXP 74
8352: PUSH
8353: LD_INT 1
8355: ST_TO_ADDR
// if p3 = 20 then
8356: LD_VAR 0 3
8360: PUSH
8361: LD_INT 20
8363: EQUAL
8364: IFFALSE 8374
// sRemote := true ;
8366: LD_ADDR_EXP 75
8370: PUSH
8371: LD_INT 1
8373: ST_TO_ADDR
// if p3 = 21 then
8374: LD_VAR 0 3
8378: PUSH
8379: LD_INT 21
8381: EQUAL
8382: IFFALSE 8392
// sPowell := true ;
8384: LD_ADDR_EXP 76
8388: PUSH
8389: LD_INT 1
8391: ST_TO_ADDR
// if p3 = 22 then
8392: LD_VAR 0 3
8396: PUSH
8397: LD_INT 22
8399: EQUAL
8400: IFFALSE 8410
// sTeleport := true ;
8402: LD_ADDR_EXP 79
8406: PUSH
8407: LD_INT 1
8409: ST_TO_ADDR
// if p3 = 23 then
8410: LD_VAR 0 3
8414: PUSH
8415: LD_INT 23
8417: EQUAL
8418: IFFALSE 8428
// sOilTower := true ;
8420: LD_ADDR_EXP 81
8424: PUSH
8425: LD_INT 1
8427: ST_TO_ADDR
// if p3 = 24 then
8428: LD_VAR 0 3
8432: PUSH
8433: LD_INT 24
8435: EQUAL
8436: IFFALSE 8446
// sShovel := true ;
8438: LD_ADDR_EXP 82
8442: PUSH
8443: LD_INT 1
8445: ST_TO_ADDR
// if p3 = 25 then
8446: LD_VAR 0 3
8450: PUSH
8451: LD_INT 25
8453: EQUAL
8454: IFFALSE 8464
// sSheik := true ;
8456: LD_ADDR_EXP 83
8460: PUSH
8461: LD_INT 1
8463: ST_TO_ADDR
// if p3 = 26 then
8464: LD_VAR 0 3
8468: PUSH
8469: LD_INT 26
8471: EQUAL
8472: IFFALSE 8482
// sEarthquake := true ;
8474: LD_ADDR_EXP 85
8478: PUSH
8479: LD_INT 1
8481: ST_TO_ADDR
// if p3 = 27 then
8482: LD_VAR 0 3
8486: PUSH
8487: LD_INT 27
8489: EQUAL
8490: IFFALSE 8500
// sAI := true ;
8492: LD_ADDR_EXP 86
8496: PUSH
8497: LD_INT 1
8499: ST_TO_ADDR
// if p3 = 28 then
8500: LD_VAR 0 3
8504: PUSH
8505: LD_INT 28
8507: EQUAL
8508: IFFALSE 8518
// sCargo := true ;
8510: LD_ADDR_EXP 89
8514: PUSH
8515: LD_INT 1
8517: ST_TO_ADDR
// if p3 = 29 then
8518: LD_VAR 0 3
8522: PUSH
8523: LD_INT 29
8525: EQUAL
8526: IFFALSE 8536
// sDLaser := true ;
8528: LD_ADDR_EXP 90
8532: PUSH
8533: LD_INT 1
8535: ST_TO_ADDR
// if p3 = 30 then
8536: LD_VAR 0 3
8540: PUSH
8541: LD_INT 30
8543: EQUAL
8544: IFFALSE 8554
// sExchange := true ;
8546: LD_ADDR_EXP 91
8550: PUSH
8551: LD_INT 1
8553: ST_TO_ADDR
// if p3 = 31 then
8554: LD_VAR 0 3
8558: PUSH
8559: LD_INT 31
8561: EQUAL
8562: IFFALSE 8572
// sFac := true ;
8564: LD_ADDR_EXP 92
8568: PUSH
8569: LD_INT 1
8571: ST_TO_ADDR
// if p3 = 32 then
8572: LD_VAR 0 3
8576: PUSH
8577: LD_INT 32
8579: EQUAL
8580: IFFALSE 8590
// sPower := true ;
8582: LD_ADDR_EXP 93
8586: PUSH
8587: LD_INT 1
8589: ST_TO_ADDR
// if p3 = 33 then
8590: LD_VAR 0 3
8594: PUSH
8595: LD_INT 33
8597: EQUAL
8598: IFFALSE 8608
// sRandom := true ;
8600: LD_ADDR_EXP 94
8604: PUSH
8605: LD_INT 1
8607: ST_TO_ADDR
// if p3 = 34 then
8608: LD_VAR 0 3
8612: PUSH
8613: LD_INT 34
8615: EQUAL
8616: IFFALSE 8626
// sShield := true ;
8618: LD_ADDR_EXP 95
8622: PUSH
8623: LD_INT 1
8625: ST_TO_ADDR
// if p3 = 35 then
8626: LD_VAR 0 3
8630: PUSH
8631: LD_INT 35
8633: EQUAL
8634: IFFALSE 8644
// sTime := true ;
8636: LD_ADDR_EXP 96
8640: PUSH
8641: LD_INT 1
8643: ST_TO_ADDR
// if p3 = 36 then
8644: LD_VAR 0 3
8648: PUSH
8649: LD_INT 36
8651: EQUAL
8652: IFFALSE 8662
// sTools := true ;
8654: LD_ADDR_EXP 97
8658: PUSH
8659: LD_INT 1
8661: ST_TO_ADDR
// if p3 = 101 then
8662: LD_VAR 0 3
8666: PUSH
8667: LD_INT 101
8669: EQUAL
8670: IFFALSE 8680
// sSold := true ;
8672: LD_ADDR_EXP 62
8676: PUSH
8677: LD_INT 1
8679: ST_TO_ADDR
// if p3 = 102 then
8680: LD_VAR 0 3
8684: PUSH
8685: LD_INT 102
8687: EQUAL
8688: IFFALSE 8698
// sDiff := true ;
8690: LD_ADDR_EXP 63
8694: PUSH
8695: LD_INT 1
8697: ST_TO_ADDR
// if p3 = 103 then
8698: LD_VAR 0 3
8702: PUSH
8703: LD_INT 103
8705: EQUAL
8706: IFFALSE 8716
// sFog := true ;
8708: LD_ADDR_EXP 66
8712: PUSH
8713: LD_INT 1
8715: ST_TO_ADDR
// if p3 = 104 then
8716: LD_VAR 0 3
8720: PUSH
8721: LD_INT 104
8723: EQUAL
8724: IFFALSE 8734
// sReset := true ;
8726: LD_ADDR_EXP 67
8730: PUSH
8731: LD_INT 1
8733: ST_TO_ADDR
// if p3 = 105 then
8734: LD_VAR 0 3
8738: PUSH
8739: LD_INT 105
8741: EQUAL
8742: IFFALSE 8752
// sSun := true ;
8744: LD_ADDR_EXP 68
8748: PUSH
8749: LD_INT 1
8751: ST_TO_ADDR
// if p3 = 106 then
8752: LD_VAR 0 3
8756: PUSH
8757: LD_INT 106
8759: EQUAL
8760: IFFALSE 8770
// sTiger := true ;
8762: LD_ADDR_EXP 64
8766: PUSH
8767: LD_INT 1
8769: ST_TO_ADDR
// if p3 = 107 then
8770: LD_VAR 0 3
8774: PUSH
8775: LD_INT 107
8777: EQUAL
8778: IFFALSE 8788
// sBomb := true ;
8780: LD_ADDR_EXP 65
8784: PUSH
8785: LD_INT 1
8787: ST_TO_ADDR
// if p3 = 108 then
8788: LD_VAR 0 3
8792: PUSH
8793: LD_INT 108
8795: EQUAL
8796: IFFALSE 8806
// sWound := true ;
8798: LD_ADDR_EXP 73
8802: PUSH
8803: LD_INT 1
8805: ST_TO_ADDR
// if p3 = 109 then
8806: LD_VAR 0 3
8810: PUSH
8811: LD_INT 109
8813: EQUAL
8814: IFFALSE 8824
// sBetray := true ;
8816: LD_ADDR_EXP 77
8820: PUSH
8821: LD_INT 1
8823: ST_TO_ADDR
// if p3 = 110 then
8824: LD_VAR 0 3
8828: PUSH
8829: LD_INT 110
8831: EQUAL
8832: IFFALSE 8842
// sContamin := true ;
8834: LD_ADDR_EXP 78
8838: PUSH
8839: LD_INT 1
8841: ST_TO_ADDR
// if p3 = 111 then
8842: LD_VAR 0 3
8846: PUSH
8847: LD_INT 111
8849: EQUAL
8850: IFFALSE 8860
// sOil := true ;
8852: LD_ADDR_EXP 80
8856: PUSH
8857: LD_INT 1
8859: ST_TO_ADDR
// if p3 = 112 then
8860: LD_VAR 0 3
8864: PUSH
8865: LD_INT 112
8867: EQUAL
8868: IFFALSE 8878
// sStu := true ;
8870: LD_ADDR_EXP 84
8874: PUSH
8875: LD_INT 1
8877: ST_TO_ADDR
// if p3 = 113 then
8878: LD_VAR 0 3
8882: PUSH
8883: LD_INT 113
8885: EQUAL
8886: IFFALSE 8896
// sBazooka := true ;
8888: LD_ADDR_EXP 87
8892: PUSH
8893: LD_INT 1
8895: ST_TO_ADDR
// if p3 = 114 then
8896: LD_VAR 0 3
8900: PUSH
8901: LD_INT 114
8903: EQUAL
8904: IFFALSE 8914
// sMortar := true ;
8906: LD_ADDR_EXP 88
8910: PUSH
8911: LD_INT 1
8913: ST_TO_ADDR
// if p3 = 115 then
8914: LD_VAR 0 3
8918: PUSH
8919: LD_INT 115
8921: EQUAL
8922: IFFALSE 8932
// sRanger := true ;
8924: LD_ADDR_EXP 98
8928: PUSH
8929: LD_INT 1
8931: ST_TO_ADDR
// end ; if p2 = 101 then
8932: LD_VAR 0 2
8936: PUSH
8937: LD_INT 101
8939: EQUAL
8940: IFFALSE 9068
// begin case p3 of 1 :
8942: LD_VAR 0 3
8946: PUSH
8947: LD_INT 1
8949: DOUBLE
8950: EQUAL
8951: IFTRUE 8955
8953: GO 8962
8955: POP
// hHackUnlimitedResources ; 2 :
8956: CALL 20103 0 0
8960: GO 9068
8962: LD_INT 2
8964: DOUBLE
8965: EQUAL
8966: IFTRUE 8970
8968: GO 8977
8970: POP
// hHackSetLevel10 ; 3 :
8971: CALL 20236 0 0
8975: GO 9068
8977: LD_INT 3
8979: DOUBLE
8980: EQUAL
8981: IFTRUE 8985
8983: GO 8992
8985: POP
// hHackSetLevel10YourUnits ; 4 :
8986: CALL 20321 0 0
8990: GO 9068
8992: LD_INT 4
8994: DOUBLE
8995: EQUAL
8996: IFTRUE 9000
8998: GO 9007
9000: POP
// hHackInvincible ; 5 :
9001: CALL 20769 0 0
9005: GO 9068
9007: LD_INT 5
9009: DOUBLE
9010: EQUAL
9011: IFTRUE 9015
9013: GO 9022
9015: POP
// hHackInvisible ; 6 :
9016: CALL 20880 0 0
9020: GO 9068
9022: LD_INT 6
9024: DOUBLE
9025: EQUAL
9026: IFTRUE 9030
9028: GO 9037
9030: POP
// hHackChangeYourSide ; 7 :
9031: CALL 20937 0 0
9035: GO 9068
9037: LD_INT 7
9039: DOUBLE
9040: EQUAL
9041: IFTRUE 9045
9043: GO 9052
9045: POP
// hHackChangeUnitSide ; 8 :
9046: CALL 20979 0 0
9050: GO 9068
9052: LD_INT 8
9054: DOUBLE
9055: EQUAL
9056: IFTRUE 9060
9058: GO 9067
9060: POP
// hHackFog ; end ;
9061: CALL 21080 0 0
9065: GO 9068
9067: POP
// end ; end ;
9068: PPOPN 6
9070: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
9071: GO 9073
9073: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
9074: LD_STRING initStreamRollete();
9076: PPUSH
9077: CALL_OW 559
// InitStreamMode ;
9081: CALL 9090 0 0
// DefineStreamItems ( ) ;
9085: CALL 9530 0 0
// end ;
9089: END
// function InitStreamMode ; begin
9090: LD_INT 0
9092: PPUSH
// streamModeActive := false ;
9093: LD_ADDR_EXP 45
9097: PUSH
9098: LD_INT 0
9100: ST_TO_ADDR
// normalCounter := 36 ;
9101: LD_ADDR_EXP 46
9105: PUSH
9106: LD_INT 36
9108: ST_TO_ADDR
// hardcoreCounter := 16 ;
9109: LD_ADDR_EXP 47
9113: PUSH
9114: LD_INT 16
9116: ST_TO_ADDR
// sRocket := false ;
9117: LD_ADDR_EXP 50
9121: PUSH
9122: LD_INT 0
9124: ST_TO_ADDR
// sSpeed := false ;
9125: LD_ADDR_EXP 49
9129: PUSH
9130: LD_INT 0
9132: ST_TO_ADDR
// sEngine := false ;
9133: LD_ADDR_EXP 51
9137: PUSH
9138: LD_INT 0
9140: ST_TO_ADDR
// sSpec := false ;
9141: LD_ADDR_EXP 48
9145: PUSH
9146: LD_INT 0
9148: ST_TO_ADDR
// sLevel := false ;
9149: LD_ADDR_EXP 52
9153: PUSH
9154: LD_INT 0
9156: ST_TO_ADDR
// sArmoury := false ;
9157: LD_ADDR_EXP 53
9161: PUSH
9162: LD_INT 0
9164: ST_TO_ADDR
// sRadar := false ;
9165: LD_ADDR_EXP 54
9169: PUSH
9170: LD_INT 0
9172: ST_TO_ADDR
// sBunker := false ;
9173: LD_ADDR_EXP 55
9177: PUSH
9178: LD_INT 0
9180: ST_TO_ADDR
// sHack := false ;
9181: LD_ADDR_EXP 56
9185: PUSH
9186: LD_INT 0
9188: ST_TO_ADDR
// sFire := false ;
9189: LD_ADDR_EXP 57
9193: PUSH
9194: LD_INT 0
9196: ST_TO_ADDR
// sRefresh := false ;
9197: LD_ADDR_EXP 58
9201: PUSH
9202: LD_INT 0
9204: ST_TO_ADDR
// sExp := false ;
9205: LD_ADDR_EXP 59
9209: PUSH
9210: LD_INT 0
9212: ST_TO_ADDR
// sDepot := false ;
9213: LD_ADDR_EXP 60
9217: PUSH
9218: LD_INT 0
9220: ST_TO_ADDR
// sFlag := false ;
9221: LD_ADDR_EXP 61
9225: PUSH
9226: LD_INT 0
9228: ST_TO_ADDR
// sKamikadze := false ;
9229: LD_ADDR_EXP 69
9233: PUSH
9234: LD_INT 0
9236: ST_TO_ADDR
// sTroll := false ;
9237: LD_ADDR_EXP 70
9241: PUSH
9242: LD_INT 0
9244: ST_TO_ADDR
// sSlow := false ;
9245: LD_ADDR_EXP 71
9249: PUSH
9250: LD_INT 0
9252: ST_TO_ADDR
// sLack := false ;
9253: LD_ADDR_EXP 72
9257: PUSH
9258: LD_INT 0
9260: ST_TO_ADDR
// sTank := false ;
9261: LD_ADDR_EXP 74
9265: PUSH
9266: LD_INT 0
9268: ST_TO_ADDR
// sRemote := false ;
9269: LD_ADDR_EXP 75
9273: PUSH
9274: LD_INT 0
9276: ST_TO_ADDR
// sPowell := false ;
9277: LD_ADDR_EXP 76
9281: PUSH
9282: LD_INT 0
9284: ST_TO_ADDR
// sTeleport := false ;
9285: LD_ADDR_EXP 79
9289: PUSH
9290: LD_INT 0
9292: ST_TO_ADDR
// sOilTower := false ;
9293: LD_ADDR_EXP 81
9297: PUSH
9298: LD_INT 0
9300: ST_TO_ADDR
// sShovel := false ;
9301: LD_ADDR_EXP 82
9305: PUSH
9306: LD_INT 0
9308: ST_TO_ADDR
// sSheik := false ;
9309: LD_ADDR_EXP 83
9313: PUSH
9314: LD_INT 0
9316: ST_TO_ADDR
// sEarthquake := false ;
9317: LD_ADDR_EXP 85
9321: PUSH
9322: LD_INT 0
9324: ST_TO_ADDR
// sAI := false ;
9325: LD_ADDR_EXP 86
9329: PUSH
9330: LD_INT 0
9332: ST_TO_ADDR
// sCargo := false ;
9333: LD_ADDR_EXP 89
9337: PUSH
9338: LD_INT 0
9340: ST_TO_ADDR
// sDLaser := false ;
9341: LD_ADDR_EXP 90
9345: PUSH
9346: LD_INT 0
9348: ST_TO_ADDR
// sExchange := false ;
9349: LD_ADDR_EXP 91
9353: PUSH
9354: LD_INT 0
9356: ST_TO_ADDR
// sFac := false ;
9357: LD_ADDR_EXP 92
9361: PUSH
9362: LD_INT 0
9364: ST_TO_ADDR
// sPower := false ;
9365: LD_ADDR_EXP 93
9369: PUSH
9370: LD_INT 0
9372: ST_TO_ADDR
// sRandom := false ;
9373: LD_ADDR_EXP 94
9377: PUSH
9378: LD_INT 0
9380: ST_TO_ADDR
// sShield := false ;
9381: LD_ADDR_EXP 95
9385: PUSH
9386: LD_INT 0
9388: ST_TO_ADDR
// sTime := false ;
9389: LD_ADDR_EXP 96
9393: PUSH
9394: LD_INT 0
9396: ST_TO_ADDR
// sTools := false ;
9397: LD_ADDR_EXP 97
9401: PUSH
9402: LD_INT 0
9404: ST_TO_ADDR
// sSold := false ;
9405: LD_ADDR_EXP 62
9409: PUSH
9410: LD_INT 0
9412: ST_TO_ADDR
// sDiff := false ;
9413: LD_ADDR_EXP 63
9417: PUSH
9418: LD_INT 0
9420: ST_TO_ADDR
// sFog := false ;
9421: LD_ADDR_EXP 66
9425: PUSH
9426: LD_INT 0
9428: ST_TO_ADDR
// sReset := false ;
9429: LD_ADDR_EXP 67
9433: PUSH
9434: LD_INT 0
9436: ST_TO_ADDR
// sSun := false ;
9437: LD_ADDR_EXP 68
9441: PUSH
9442: LD_INT 0
9444: ST_TO_ADDR
// sTiger := false ;
9445: LD_ADDR_EXP 64
9449: PUSH
9450: LD_INT 0
9452: ST_TO_ADDR
// sBomb := false ;
9453: LD_ADDR_EXP 65
9457: PUSH
9458: LD_INT 0
9460: ST_TO_ADDR
// sWound := false ;
9461: LD_ADDR_EXP 73
9465: PUSH
9466: LD_INT 0
9468: ST_TO_ADDR
// sBetray := false ;
9469: LD_ADDR_EXP 77
9473: PUSH
9474: LD_INT 0
9476: ST_TO_ADDR
// sContamin := false ;
9477: LD_ADDR_EXP 78
9481: PUSH
9482: LD_INT 0
9484: ST_TO_ADDR
// sOil := false ;
9485: LD_ADDR_EXP 80
9489: PUSH
9490: LD_INT 0
9492: ST_TO_ADDR
// sStu := false ;
9493: LD_ADDR_EXP 84
9497: PUSH
9498: LD_INT 0
9500: ST_TO_ADDR
// sBazooka := false ;
9501: LD_ADDR_EXP 87
9505: PUSH
9506: LD_INT 0
9508: ST_TO_ADDR
// sMortar := false ;
9509: LD_ADDR_EXP 88
9513: PUSH
9514: LD_INT 0
9516: ST_TO_ADDR
// sRanger := false ;
9517: LD_ADDR_EXP 98
9521: PUSH
9522: LD_INT 0
9524: ST_TO_ADDR
// end ;
9525: LD_VAR 0 1
9529: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
9530: LD_INT 0
9532: PPUSH
9533: PPUSH
9534: PPUSH
9535: PPUSH
9536: PPUSH
// result := [ ] ;
9537: LD_ADDR_VAR 0 1
9541: PUSH
9542: EMPTY
9543: ST_TO_ADDR
// if campaign_id = 1 then
9544: LD_OWVAR 69
9548: PUSH
9549: LD_INT 1
9551: EQUAL
9552: IFFALSE 12490
// begin case mission_number of 1 :
9554: LD_OWVAR 70
9558: PUSH
9559: LD_INT 1
9561: DOUBLE
9562: EQUAL
9563: IFTRUE 9567
9565: GO 9631
9567: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
9568: LD_ADDR_VAR 0 1
9572: PUSH
9573: LD_INT 2
9575: PUSH
9576: LD_INT 4
9578: PUSH
9579: LD_INT 11
9581: PUSH
9582: LD_INT 12
9584: PUSH
9585: LD_INT 15
9587: PUSH
9588: LD_INT 16
9590: PUSH
9591: LD_INT 22
9593: PUSH
9594: LD_INT 23
9596: PUSH
9597: LD_INT 26
9599: PUSH
9600: EMPTY
9601: LIST
9602: LIST
9603: LIST
9604: LIST
9605: LIST
9606: LIST
9607: LIST
9608: LIST
9609: LIST
9610: PUSH
9611: LD_INT 101
9613: PUSH
9614: LD_INT 102
9616: PUSH
9617: LD_INT 106
9619: PUSH
9620: EMPTY
9621: LIST
9622: LIST
9623: LIST
9624: PUSH
9625: EMPTY
9626: LIST
9627: LIST
9628: ST_TO_ADDR
9629: GO 12488
9631: LD_INT 2
9633: DOUBLE
9634: EQUAL
9635: IFTRUE 9639
9637: GO 9711
9639: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
9640: LD_ADDR_VAR 0 1
9644: PUSH
9645: LD_INT 2
9647: PUSH
9648: LD_INT 4
9650: PUSH
9651: LD_INT 11
9653: PUSH
9654: LD_INT 12
9656: PUSH
9657: LD_INT 15
9659: PUSH
9660: LD_INT 16
9662: PUSH
9663: LD_INT 22
9665: PUSH
9666: LD_INT 23
9668: PUSH
9669: LD_INT 26
9671: PUSH
9672: EMPTY
9673: LIST
9674: LIST
9675: LIST
9676: LIST
9677: LIST
9678: LIST
9679: LIST
9680: LIST
9681: LIST
9682: PUSH
9683: LD_INT 101
9685: PUSH
9686: LD_INT 102
9688: PUSH
9689: LD_INT 105
9691: PUSH
9692: LD_INT 106
9694: PUSH
9695: LD_INT 108
9697: PUSH
9698: EMPTY
9699: LIST
9700: LIST
9701: LIST
9702: LIST
9703: LIST
9704: PUSH
9705: EMPTY
9706: LIST
9707: LIST
9708: ST_TO_ADDR
9709: GO 12488
9711: LD_INT 3
9713: DOUBLE
9714: EQUAL
9715: IFTRUE 9719
9717: GO 9795
9719: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
9720: LD_ADDR_VAR 0 1
9724: PUSH
9725: LD_INT 2
9727: PUSH
9728: LD_INT 4
9730: PUSH
9731: LD_INT 5
9733: PUSH
9734: LD_INT 11
9736: PUSH
9737: LD_INT 12
9739: PUSH
9740: LD_INT 15
9742: PUSH
9743: LD_INT 16
9745: PUSH
9746: LD_INT 22
9748: PUSH
9749: LD_INT 26
9751: PUSH
9752: LD_INT 36
9754: PUSH
9755: EMPTY
9756: LIST
9757: LIST
9758: LIST
9759: LIST
9760: LIST
9761: LIST
9762: LIST
9763: LIST
9764: LIST
9765: LIST
9766: PUSH
9767: LD_INT 101
9769: PUSH
9770: LD_INT 102
9772: PUSH
9773: LD_INT 105
9775: PUSH
9776: LD_INT 106
9778: PUSH
9779: LD_INT 108
9781: PUSH
9782: EMPTY
9783: LIST
9784: LIST
9785: LIST
9786: LIST
9787: LIST
9788: PUSH
9789: EMPTY
9790: LIST
9791: LIST
9792: ST_TO_ADDR
9793: GO 12488
9795: LD_INT 4
9797: DOUBLE
9798: EQUAL
9799: IFTRUE 9803
9801: GO 9887
9803: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
9804: LD_ADDR_VAR 0 1
9808: PUSH
9809: LD_INT 2
9811: PUSH
9812: LD_INT 4
9814: PUSH
9815: LD_INT 5
9817: PUSH
9818: LD_INT 8
9820: PUSH
9821: LD_INT 11
9823: PUSH
9824: LD_INT 12
9826: PUSH
9827: LD_INT 15
9829: PUSH
9830: LD_INT 16
9832: PUSH
9833: LD_INT 22
9835: PUSH
9836: LD_INT 23
9838: PUSH
9839: LD_INT 26
9841: PUSH
9842: LD_INT 36
9844: PUSH
9845: EMPTY
9846: LIST
9847: LIST
9848: LIST
9849: LIST
9850: LIST
9851: LIST
9852: LIST
9853: LIST
9854: LIST
9855: LIST
9856: LIST
9857: LIST
9858: PUSH
9859: LD_INT 101
9861: PUSH
9862: LD_INT 102
9864: PUSH
9865: LD_INT 105
9867: PUSH
9868: LD_INT 106
9870: PUSH
9871: LD_INT 108
9873: PUSH
9874: EMPTY
9875: LIST
9876: LIST
9877: LIST
9878: LIST
9879: LIST
9880: PUSH
9881: EMPTY
9882: LIST
9883: LIST
9884: ST_TO_ADDR
9885: GO 12488
9887: LD_INT 5
9889: DOUBLE
9890: EQUAL
9891: IFTRUE 9895
9893: GO 9995
9895: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
9896: LD_ADDR_VAR 0 1
9900: PUSH
9901: LD_INT 2
9903: PUSH
9904: LD_INT 4
9906: PUSH
9907: LD_INT 5
9909: PUSH
9910: LD_INT 6
9912: PUSH
9913: LD_INT 8
9915: PUSH
9916: LD_INT 11
9918: PUSH
9919: LD_INT 12
9921: PUSH
9922: LD_INT 15
9924: PUSH
9925: LD_INT 16
9927: PUSH
9928: LD_INT 22
9930: PUSH
9931: LD_INT 23
9933: PUSH
9934: LD_INT 25
9936: PUSH
9937: LD_INT 26
9939: PUSH
9940: LD_INT 36
9942: PUSH
9943: EMPTY
9944: LIST
9945: LIST
9946: LIST
9947: LIST
9948: LIST
9949: LIST
9950: LIST
9951: LIST
9952: LIST
9953: LIST
9954: LIST
9955: LIST
9956: LIST
9957: LIST
9958: PUSH
9959: LD_INT 101
9961: PUSH
9962: LD_INT 102
9964: PUSH
9965: LD_INT 105
9967: PUSH
9968: LD_INT 106
9970: PUSH
9971: LD_INT 108
9973: PUSH
9974: LD_INT 109
9976: PUSH
9977: LD_INT 112
9979: PUSH
9980: EMPTY
9981: LIST
9982: LIST
9983: LIST
9984: LIST
9985: LIST
9986: LIST
9987: LIST
9988: PUSH
9989: EMPTY
9990: LIST
9991: LIST
9992: ST_TO_ADDR
9993: GO 12488
9995: LD_INT 6
9997: DOUBLE
9998: EQUAL
9999: IFTRUE 10003
10001: GO 10123
10003: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
10004: LD_ADDR_VAR 0 1
10008: PUSH
10009: LD_INT 2
10011: PUSH
10012: LD_INT 4
10014: PUSH
10015: LD_INT 5
10017: PUSH
10018: LD_INT 6
10020: PUSH
10021: LD_INT 8
10023: PUSH
10024: LD_INT 11
10026: PUSH
10027: LD_INT 12
10029: PUSH
10030: LD_INT 15
10032: PUSH
10033: LD_INT 16
10035: PUSH
10036: LD_INT 20
10038: PUSH
10039: LD_INT 21
10041: PUSH
10042: LD_INT 22
10044: PUSH
10045: LD_INT 23
10047: PUSH
10048: LD_INT 25
10050: PUSH
10051: LD_INT 26
10053: PUSH
10054: LD_INT 30
10056: PUSH
10057: LD_INT 31
10059: PUSH
10060: LD_INT 32
10062: PUSH
10063: LD_INT 36
10065: PUSH
10066: EMPTY
10067: LIST
10068: LIST
10069: LIST
10070: LIST
10071: LIST
10072: LIST
10073: LIST
10074: LIST
10075: LIST
10076: LIST
10077: LIST
10078: LIST
10079: LIST
10080: LIST
10081: LIST
10082: LIST
10083: LIST
10084: LIST
10085: LIST
10086: PUSH
10087: LD_INT 101
10089: PUSH
10090: LD_INT 102
10092: PUSH
10093: LD_INT 105
10095: PUSH
10096: LD_INT 106
10098: PUSH
10099: LD_INT 108
10101: PUSH
10102: LD_INT 109
10104: PUSH
10105: LD_INT 112
10107: PUSH
10108: EMPTY
10109: LIST
10110: LIST
10111: LIST
10112: LIST
10113: LIST
10114: LIST
10115: LIST
10116: PUSH
10117: EMPTY
10118: LIST
10119: LIST
10120: ST_TO_ADDR
10121: GO 12488
10123: LD_INT 7
10125: DOUBLE
10126: EQUAL
10127: IFTRUE 10131
10129: GO 10231
10131: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
10132: LD_ADDR_VAR 0 1
10136: PUSH
10137: LD_INT 2
10139: PUSH
10140: LD_INT 4
10142: PUSH
10143: LD_INT 5
10145: PUSH
10146: LD_INT 7
10148: PUSH
10149: LD_INT 11
10151: PUSH
10152: LD_INT 12
10154: PUSH
10155: LD_INT 15
10157: PUSH
10158: LD_INT 16
10160: PUSH
10161: LD_INT 20
10163: PUSH
10164: LD_INT 21
10166: PUSH
10167: LD_INT 22
10169: PUSH
10170: LD_INT 23
10172: PUSH
10173: LD_INT 25
10175: PUSH
10176: LD_INT 26
10178: PUSH
10179: EMPTY
10180: LIST
10181: LIST
10182: LIST
10183: LIST
10184: LIST
10185: LIST
10186: LIST
10187: LIST
10188: LIST
10189: LIST
10190: LIST
10191: LIST
10192: LIST
10193: LIST
10194: PUSH
10195: LD_INT 101
10197: PUSH
10198: LD_INT 102
10200: PUSH
10201: LD_INT 103
10203: PUSH
10204: LD_INT 105
10206: PUSH
10207: LD_INT 106
10209: PUSH
10210: LD_INT 108
10212: PUSH
10213: LD_INT 112
10215: PUSH
10216: EMPTY
10217: LIST
10218: LIST
10219: LIST
10220: LIST
10221: LIST
10222: LIST
10223: LIST
10224: PUSH
10225: EMPTY
10226: LIST
10227: LIST
10228: ST_TO_ADDR
10229: GO 12488
10231: LD_INT 8
10233: DOUBLE
10234: EQUAL
10235: IFTRUE 10239
10237: GO 10367
10239: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
10240: LD_ADDR_VAR 0 1
10244: PUSH
10245: LD_INT 2
10247: PUSH
10248: LD_INT 4
10250: PUSH
10251: LD_INT 5
10253: PUSH
10254: LD_INT 6
10256: PUSH
10257: LD_INT 7
10259: PUSH
10260: LD_INT 8
10262: PUSH
10263: LD_INT 11
10265: PUSH
10266: LD_INT 12
10268: PUSH
10269: LD_INT 15
10271: PUSH
10272: LD_INT 16
10274: PUSH
10275: LD_INT 20
10277: PUSH
10278: LD_INT 21
10280: PUSH
10281: LD_INT 22
10283: PUSH
10284: LD_INT 23
10286: PUSH
10287: LD_INT 25
10289: PUSH
10290: LD_INT 26
10292: PUSH
10293: LD_INT 30
10295: PUSH
10296: LD_INT 31
10298: PUSH
10299: LD_INT 32
10301: PUSH
10302: LD_INT 36
10304: PUSH
10305: EMPTY
10306: LIST
10307: LIST
10308: LIST
10309: LIST
10310: LIST
10311: LIST
10312: LIST
10313: LIST
10314: LIST
10315: LIST
10316: LIST
10317: LIST
10318: LIST
10319: LIST
10320: LIST
10321: LIST
10322: LIST
10323: LIST
10324: LIST
10325: LIST
10326: PUSH
10327: LD_INT 101
10329: PUSH
10330: LD_INT 102
10332: PUSH
10333: LD_INT 103
10335: PUSH
10336: LD_INT 105
10338: PUSH
10339: LD_INT 106
10341: PUSH
10342: LD_INT 108
10344: PUSH
10345: LD_INT 109
10347: PUSH
10348: LD_INT 112
10350: PUSH
10351: EMPTY
10352: LIST
10353: LIST
10354: LIST
10355: LIST
10356: LIST
10357: LIST
10358: LIST
10359: LIST
10360: PUSH
10361: EMPTY
10362: LIST
10363: LIST
10364: ST_TO_ADDR
10365: GO 12488
10367: LD_INT 9
10369: DOUBLE
10370: EQUAL
10371: IFTRUE 10375
10373: GO 10511
10375: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
10376: LD_ADDR_VAR 0 1
10380: PUSH
10381: LD_INT 2
10383: PUSH
10384: LD_INT 4
10386: PUSH
10387: LD_INT 5
10389: PUSH
10390: LD_INT 6
10392: PUSH
10393: LD_INT 7
10395: PUSH
10396: LD_INT 8
10398: PUSH
10399: LD_INT 11
10401: PUSH
10402: LD_INT 12
10404: PUSH
10405: LD_INT 15
10407: PUSH
10408: LD_INT 16
10410: PUSH
10411: LD_INT 20
10413: PUSH
10414: LD_INT 21
10416: PUSH
10417: LD_INT 22
10419: PUSH
10420: LD_INT 23
10422: PUSH
10423: LD_INT 25
10425: PUSH
10426: LD_INT 26
10428: PUSH
10429: LD_INT 28
10431: PUSH
10432: LD_INT 30
10434: PUSH
10435: LD_INT 31
10437: PUSH
10438: LD_INT 32
10440: PUSH
10441: LD_INT 36
10443: PUSH
10444: EMPTY
10445: LIST
10446: LIST
10447: LIST
10448: LIST
10449: LIST
10450: LIST
10451: LIST
10452: LIST
10453: LIST
10454: LIST
10455: LIST
10456: LIST
10457: LIST
10458: LIST
10459: LIST
10460: LIST
10461: LIST
10462: LIST
10463: LIST
10464: LIST
10465: LIST
10466: PUSH
10467: LD_INT 101
10469: PUSH
10470: LD_INT 102
10472: PUSH
10473: LD_INT 103
10475: PUSH
10476: LD_INT 105
10478: PUSH
10479: LD_INT 106
10481: PUSH
10482: LD_INT 108
10484: PUSH
10485: LD_INT 109
10487: PUSH
10488: LD_INT 112
10490: PUSH
10491: LD_INT 114
10493: PUSH
10494: EMPTY
10495: LIST
10496: LIST
10497: LIST
10498: LIST
10499: LIST
10500: LIST
10501: LIST
10502: LIST
10503: LIST
10504: PUSH
10505: EMPTY
10506: LIST
10507: LIST
10508: ST_TO_ADDR
10509: GO 12488
10511: LD_INT 10
10513: DOUBLE
10514: EQUAL
10515: IFTRUE 10519
10517: GO 10703
10519: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
10520: LD_ADDR_VAR 0 1
10524: PUSH
10525: LD_INT 2
10527: PUSH
10528: LD_INT 4
10530: PUSH
10531: LD_INT 5
10533: PUSH
10534: LD_INT 6
10536: PUSH
10537: LD_INT 7
10539: PUSH
10540: LD_INT 8
10542: PUSH
10543: LD_INT 9
10545: PUSH
10546: LD_INT 10
10548: PUSH
10549: LD_INT 11
10551: PUSH
10552: LD_INT 12
10554: PUSH
10555: LD_INT 13
10557: PUSH
10558: LD_INT 14
10560: PUSH
10561: LD_INT 15
10563: PUSH
10564: LD_INT 16
10566: PUSH
10567: LD_INT 17
10569: PUSH
10570: LD_INT 18
10572: PUSH
10573: LD_INT 19
10575: PUSH
10576: LD_INT 20
10578: PUSH
10579: LD_INT 21
10581: PUSH
10582: LD_INT 22
10584: PUSH
10585: LD_INT 23
10587: PUSH
10588: LD_INT 24
10590: PUSH
10591: LD_INT 25
10593: PUSH
10594: LD_INT 26
10596: PUSH
10597: LD_INT 28
10599: PUSH
10600: LD_INT 30
10602: PUSH
10603: LD_INT 31
10605: PUSH
10606: LD_INT 32
10608: PUSH
10609: LD_INT 36
10611: PUSH
10612: EMPTY
10613: LIST
10614: LIST
10615: LIST
10616: LIST
10617: LIST
10618: LIST
10619: LIST
10620: LIST
10621: LIST
10622: LIST
10623: LIST
10624: LIST
10625: LIST
10626: LIST
10627: LIST
10628: LIST
10629: LIST
10630: LIST
10631: LIST
10632: LIST
10633: LIST
10634: LIST
10635: LIST
10636: LIST
10637: LIST
10638: LIST
10639: LIST
10640: LIST
10641: LIST
10642: PUSH
10643: LD_INT 101
10645: PUSH
10646: LD_INT 102
10648: PUSH
10649: LD_INT 103
10651: PUSH
10652: LD_INT 104
10654: PUSH
10655: LD_INT 105
10657: PUSH
10658: LD_INT 106
10660: PUSH
10661: LD_INT 107
10663: PUSH
10664: LD_INT 108
10666: PUSH
10667: LD_INT 109
10669: PUSH
10670: LD_INT 110
10672: PUSH
10673: LD_INT 111
10675: PUSH
10676: LD_INT 112
10678: PUSH
10679: LD_INT 114
10681: PUSH
10682: EMPTY
10683: LIST
10684: LIST
10685: LIST
10686: LIST
10687: LIST
10688: LIST
10689: LIST
10690: LIST
10691: LIST
10692: LIST
10693: LIST
10694: LIST
10695: LIST
10696: PUSH
10697: EMPTY
10698: LIST
10699: LIST
10700: ST_TO_ADDR
10701: GO 12488
10703: LD_INT 11
10705: DOUBLE
10706: EQUAL
10707: IFTRUE 10711
10709: GO 10903
10711: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
10712: LD_ADDR_VAR 0 1
10716: PUSH
10717: LD_INT 2
10719: PUSH
10720: LD_INT 3
10722: PUSH
10723: LD_INT 4
10725: PUSH
10726: LD_INT 5
10728: PUSH
10729: LD_INT 6
10731: PUSH
10732: LD_INT 7
10734: PUSH
10735: LD_INT 8
10737: PUSH
10738: LD_INT 9
10740: PUSH
10741: LD_INT 10
10743: PUSH
10744: LD_INT 11
10746: PUSH
10747: LD_INT 12
10749: PUSH
10750: LD_INT 13
10752: PUSH
10753: LD_INT 14
10755: PUSH
10756: LD_INT 15
10758: PUSH
10759: LD_INT 16
10761: PUSH
10762: LD_INT 17
10764: PUSH
10765: LD_INT 18
10767: PUSH
10768: LD_INT 19
10770: PUSH
10771: LD_INT 20
10773: PUSH
10774: LD_INT 21
10776: PUSH
10777: LD_INT 22
10779: PUSH
10780: LD_INT 23
10782: PUSH
10783: LD_INT 24
10785: PUSH
10786: LD_INT 25
10788: PUSH
10789: LD_INT 26
10791: PUSH
10792: LD_INT 28
10794: PUSH
10795: LD_INT 30
10797: PUSH
10798: LD_INT 31
10800: PUSH
10801: LD_INT 32
10803: PUSH
10804: LD_INT 34
10806: PUSH
10807: LD_INT 36
10809: PUSH
10810: EMPTY
10811: LIST
10812: LIST
10813: LIST
10814: LIST
10815: LIST
10816: LIST
10817: LIST
10818: LIST
10819: LIST
10820: LIST
10821: LIST
10822: LIST
10823: LIST
10824: LIST
10825: LIST
10826: LIST
10827: LIST
10828: LIST
10829: LIST
10830: LIST
10831: LIST
10832: LIST
10833: LIST
10834: LIST
10835: LIST
10836: LIST
10837: LIST
10838: LIST
10839: LIST
10840: LIST
10841: LIST
10842: PUSH
10843: LD_INT 101
10845: PUSH
10846: LD_INT 102
10848: PUSH
10849: LD_INT 103
10851: PUSH
10852: LD_INT 104
10854: PUSH
10855: LD_INT 105
10857: PUSH
10858: LD_INT 106
10860: PUSH
10861: LD_INT 107
10863: PUSH
10864: LD_INT 108
10866: PUSH
10867: LD_INT 109
10869: PUSH
10870: LD_INT 110
10872: PUSH
10873: LD_INT 111
10875: PUSH
10876: LD_INT 112
10878: PUSH
10879: LD_INT 114
10881: PUSH
10882: EMPTY
10883: LIST
10884: LIST
10885: LIST
10886: LIST
10887: LIST
10888: LIST
10889: LIST
10890: LIST
10891: LIST
10892: LIST
10893: LIST
10894: LIST
10895: LIST
10896: PUSH
10897: EMPTY
10898: LIST
10899: LIST
10900: ST_TO_ADDR
10901: GO 12488
10903: LD_INT 12
10905: DOUBLE
10906: EQUAL
10907: IFTRUE 10911
10909: GO 11119
10911: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
10912: LD_ADDR_VAR 0 1
10916: PUSH
10917: LD_INT 1
10919: PUSH
10920: LD_INT 2
10922: PUSH
10923: LD_INT 3
10925: PUSH
10926: LD_INT 4
10928: PUSH
10929: LD_INT 5
10931: PUSH
10932: LD_INT 6
10934: PUSH
10935: LD_INT 7
10937: PUSH
10938: LD_INT 8
10940: PUSH
10941: LD_INT 9
10943: PUSH
10944: LD_INT 10
10946: PUSH
10947: LD_INT 11
10949: PUSH
10950: LD_INT 12
10952: PUSH
10953: LD_INT 13
10955: PUSH
10956: LD_INT 14
10958: PUSH
10959: LD_INT 15
10961: PUSH
10962: LD_INT 16
10964: PUSH
10965: LD_INT 17
10967: PUSH
10968: LD_INT 18
10970: PUSH
10971: LD_INT 19
10973: PUSH
10974: LD_INT 20
10976: PUSH
10977: LD_INT 21
10979: PUSH
10980: LD_INT 22
10982: PUSH
10983: LD_INT 23
10985: PUSH
10986: LD_INT 24
10988: PUSH
10989: LD_INT 25
10991: PUSH
10992: LD_INT 26
10994: PUSH
10995: LD_INT 27
10997: PUSH
10998: LD_INT 28
11000: PUSH
11001: LD_INT 30
11003: PUSH
11004: LD_INT 31
11006: PUSH
11007: LD_INT 32
11009: PUSH
11010: LD_INT 33
11012: PUSH
11013: LD_INT 34
11015: PUSH
11016: LD_INT 36
11018: PUSH
11019: EMPTY
11020: LIST
11021: LIST
11022: LIST
11023: LIST
11024: LIST
11025: LIST
11026: LIST
11027: LIST
11028: LIST
11029: LIST
11030: LIST
11031: LIST
11032: LIST
11033: LIST
11034: LIST
11035: LIST
11036: LIST
11037: LIST
11038: LIST
11039: LIST
11040: LIST
11041: LIST
11042: LIST
11043: LIST
11044: LIST
11045: LIST
11046: LIST
11047: LIST
11048: LIST
11049: LIST
11050: LIST
11051: LIST
11052: LIST
11053: LIST
11054: PUSH
11055: LD_INT 101
11057: PUSH
11058: LD_INT 102
11060: PUSH
11061: LD_INT 103
11063: PUSH
11064: LD_INT 104
11066: PUSH
11067: LD_INT 105
11069: PUSH
11070: LD_INT 106
11072: PUSH
11073: LD_INT 107
11075: PUSH
11076: LD_INT 108
11078: PUSH
11079: LD_INT 109
11081: PUSH
11082: LD_INT 110
11084: PUSH
11085: LD_INT 111
11087: PUSH
11088: LD_INT 112
11090: PUSH
11091: LD_INT 113
11093: PUSH
11094: LD_INT 114
11096: PUSH
11097: EMPTY
11098: LIST
11099: LIST
11100: LIST
11101: LIST
11102: LIST
11103: LIST
11104: LIST
11105: LIST
11106: LIST
11107: LIST
11108: LIST
11109: LIST
11110: LIST
11111: LIST
11112: PUSH
11113: EMPTY
11114: LIST
11115: LIST
11116: ST_TO_ADDR
11117: GO 12488
11119: LD_INT 13
11121: DOUBLE
11122: EQUAL
11123: IFTRUE 11127
11125: GO 11323
11127: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
11128: LD_ADDR_VAR 0 1
11132: PUSH
11133: LD_INT 1
11135: PUSH
11136: LD_INT 2
11138: PUSH
11139: LD_INT 3
11141: PUSH
11142: LD_INT 4
11144: PUSH
11145: LD_INT 5
11147: PUSH
11148: LD_INT 8
11150: PUSH
11151: LD_INT 9
11153: PUSH
11154: LD_INT 10
11156: PUSH
11157: LD_INT 11
11159: PUSH
11160: LD_INT 12
11162: PUSH
11163: LD_INT 14
11165: PUSH
11166: LD_INT 15
11168: PUSH
11169: LD_INT 16
11171: PUSH
11172: LD_INT 17
11174: PUSH
11175: LD_INT 18
11177: PUSH
11178: LD_INT 19
11180: PUSH
11181: LD_INT 20
11183: PUSH
11184: LD_INT 21
11186: PUSH
11187: LD_INT 22
11189: PUSH
11190: LD_INT 23
11192: PUSH
11193: LD_INT 24
11195: PUSH
11196: LD_INT 25
11198: PUSH
11199: LD_INT 26
11201: PUSH
11202: LD_INT 27
11204: PUSH
11205: LD_INT 28
11207: PUSH
11208: LD_INT 30
11210: PUSH
11211: LD_INT 31
11213: PUSH
11214: LD_INT 32
11216: PUSH
11217: LD_INT 33
11219: PUSH
11220: LD_INT 34
11222: PUSH
11223: LD_INT 36
11225: PUSH
11226: EMPTY
11227: LIST
11228: LIST
11229: LIST
11230: LIST
11231: LIST
11232: LIST
11233: LIST
11234: LIST
11235: LIST
11236: LIST
11237: LIST
11238: LIST
11239: LIST
11240: LIST
11241: LIST
11242: LIST
11243: LIST
11244: LIST
11245: LIST
11246: LIST
11247: LIST
11248: LIST
11249: LIST
11250: LIST
11251: LIST
11252: LIST
11253: LIST
11254: LIST
11255: LIST
11256: LIST
11257: LIST
11258: PUSH
11259: LD_INT 101
11261: PUSH
11262: LD_INT 102
11264: PUSH
11265: LD_INT 103
11267: PUSH
11268: LD_INT 104
11270: PUSH
11271: LD_INT 105
11273: PUSH
11274: LD_INT 106
11276: PUSH
11277: LD_INT 107
11279: PUSH
11280: LD_INT 108
11282: PUSH
11283: LD_INT 109
11285: PUSH
11286: LD_INT 110
11288: PUSH
11289: LD_INT 111
11291: PUSH
11292: LD_INT 112
11294: PUSH
11295: LD_INT 113
11297: PUSH
11298: LD_INT 114
11300: PUSH
11301: EMPTY
11302: LIST
11303: LIST
11304: LIST
11305: LIST
11306: LIST
11307: LIST
11308: LIST
11309: LIST
11310: LIST
11311: LIST
11312: LIST
11313: LIST
11314: LIST
11315: LIST
11316: PUSH
11317: EMPTY
11318: LIST
11319: LIST
11320: ST_TO_ADDR
11321: GO 12488
11323: LD_INT 14
11325: DOUBLE
11326: EQUAL
11327: IFTRUE 11331
11329: GO 11543
11331: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
11332: LD_ADDR_VAR 0 1
11336: PUSH
11337: LD_INT 1
11339: PUSH
11340: LD_INT 2
11342: PUSH
11343: LD_INT 3
11345: PUSH
11346: LD_INT 4
11348: PUSH
11349: LD_INT 5
11351: PUSH
11352: LD_INT 6
11354: PUSH
11355: LD_INT 7
11357: PUSH
11358: LD_INT 8
11360: PUSH
11361: LD_INT 9
11363: PUSH
11364: LD_INT 10
11366: PUSH
11367: LD_INT 11
11369: PUSH
11370: LD_INT 12
11372: PUSH
11373: LD_INT 13
11375: PUSH
11376: LD_INT 14
11378: PUSH
11379: LD_INT 15
11381: PUSH
11382: LD_INT 16
11384: PUSH
11385: LD_INT 17
11387: PUSH
11388: LD_INT 18
11390: PUSH
11391: LD_INT 19
11393: PUSH
11394: LD_INT 20
11396: PUSH
11397: LD_INT 21
11399: PUSH
11400: LD_INT 22
11402: PUSH
11403: LD_INT 23
11405: PUSH
11406: LD_INT 24
11408: PUSH
11409: LD_INT 25
11411: PUSH
11412: LD_INT 26
11414: PUSH
11415: LD_INT 27
11417: PUSH
11418: LD_INT 28
11420: PUSH
11421: LD_INT 29
11423: PUSH
11424: LD_INT 30
11426: PUSH
11427: LD_INT 31
11429: PUSH
11430: LD_INT 32
11432: PUSH
11433: LD_INT 33
11435: PUSH
11436: LD_INT 34
11438: PUSH
11439: LD_INT 36
11441: PUSH
11442: EMPTY
11443: LIST
11444: LIST
11445: LIST
11446: LIST
11447: LIST
11448: LIST
11449: LIST
11450: LIST
11451: LIST
11452: LIST
11453: LIST
11454: LIST
11455: LIST
11456: LIST
11457: LIST
11458: LIST
11459: LIST
11460: LIST
11461: LIST
11462: LIST
11463: LIST
11464: LIST
11465: LIST
11466: LIST
11467: LIST
11468: LIST
11469: LIST
11470: LIST
11471: LIST
11472: LIST
11473: LIST
11474: LIST
11475: LIST
11476: LIST
11477: LIST
11478: PUSH
11479: LD_INT 101
11481: PUSH
11482: LD_INT 102
11484: PUSH
11485: LD_INT 103
11487: PUSH
11488: LD_INT 104
11490: PUSH
11491: LD_INT 105
11493: PUSH
11494: LD_INT 106
11496: PUSH
11497: LD_INT 107
11499: PUSH
11500: LD_INT 108
11502: PUSH
11503: LD_INT 109
11505: PUSH
11506: LD_INT 110
11508: PUSH
11509: LD_INT 111
11511: PUSH
11512: LD_INT 112
11514: PUSH
11515: LD_INT 113
11517: PUSH
11518: LD_INT 114
11520: PUSH
11521: EMPTY
11522: LIST
11523: LIST
11524: LIST
11525: LIST
11526: LIST
11527: LIST
11528: LIST
11529: LIST
11530: LIST
11531: LIST
11532: LIST
11533: LIST
11534: LIST
11535: LIST
11536: PUSH
11537: EMPTY
11538: LIST
11539: LIST
11540: ST_TO_ADDR
11541: GO 12488
11543: LD_INT 15
11545: DOUBLE
11546: EQUAL
11547: IFTRUE 11551
11549: GO 11763
11551: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
11552: LD_ADDR_VAR 0 1
11556: PUSH
11557: LD_INT 1
11559: PUSH
11560: LD_INT 2
11562: PUSH
11563: LD_INT 3
11565: PUSH
11566: LD_INT 4
11568: PUSH
11569: LD_INT 5
11571: PUSH
11572: LD_INT 6
11574: PUSH
11575: LD_INT 7
11577: PUSH
11578: LD_INT 8
11580: PUSH
11581: LD_INT 9
11583: PUSH
11584: LD_INT 10
11586: PUSH
11587: LD_INT 11
11589: PUSH
11590: LD_INT 12
11592: PUSH
11593: LD_INT 13
11595: PUSH
11596: LD_INT 14
11598: PUSH
11599: LD_INT 15
11601: PUSH
11602: LD_INT 16
11604: PUSH
11605: LD_INT 17
11607: PUSH
11608: LD_INT 18
11610: PUSH
11611: LD_INT 19
11613: PUSH
11614: LD_INT 20
11616: PUSH
11617: LD_INT 21
11619: PUSH
11620: LD_INT 22
11622: PUSH
11623: LD_INT 23
11625: PUSH
11626: LD_INT 24
11628: PUSH
11629: LD_INT 25
11631: PUSH
11632: LD_INT 26
11634: PUSH
11635: LD_INT 27
11637: PUSH
11638: LD_INT 28
11640: PUSH
11641: LD_INT 29
11643: PUSH
11644: LD_INT 30
11646: PUSH
11647: LD_INT 31
11649: PUSH
11650: LD_INT 32
11652: PUSH
11653: LD_INT 33
11655: PUSH
11656: LD_INT 34
11658: PUSH
11659: LD_INT 36
11661: PUSH
11662: EMPTY
11663: LIST
11664: LIST
11665: LIST
11666: LIST
11667: LIST
11668: LIST
11669: LIST
11670: LIST
11671: LIST
11672: LIST
11673: LIST
11674: LIST
11675: LIST
11676: LIST
11677: LIST
11678: LIST
11679: LIST
11680: LIST
11681: LIST
11682: LIST
11683: LIST
11684: LIST
11685: LIST
11686: LIST
11687: LIST
11688: LIST
11689: LIST
11690: LIST
11691: LIST
11692: LIST
11693: LIST
11694: LIST
11695: LIST
11696: LIST
11697: LIST
11698: PUSH
11699: LD_INT 101
11701: PUSH
11702: LD_INT 102
11704: PUSH
11705: LD_INT 103
11707: PUSH
11708: LD_INT 104
11710: PUSH
11711: LD_INT 105
11713: PUSH
11714: LD_INT 106
11716: PUSH
11717: LD_INT 107
11719: PUSH
11720: LD_INT 108
11722: PUSH
11723: LD_INT 109
11725: PUSH
11726: LD_INT 110
11728: PUSH
11729: LD_INT 111
11731: PUSH
11732: LD_INT 112
11734: PUSH
11735: LD_INT 113
11737: PUSH
11738: LD_INT 114
11740: PUSH
11741: EMPTY
11742: LIST
11743: LIST
11744: LIST
11745: LIST
11746: LIST
11747: LIST
11748: LIST
11749: LIST
11750: LIST
11751: LIST
11752: LIST
11753: LIST
11754: LIST
11755: LIST
11756: PUSH
11757: EMPTY
11758: LIST
11759: LIST
11760: ST_TO_ADDR
11761: GO 12488
11763: LD_INT 16
11765: DOUBLE
11766: EQUAL
11767: IFTRUE 11771
11769: GO 11895
11771: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
11772: LD_ADDR_VAR 0 1
11776: PUSH
11777: LD_INT 2
11779: PUSH
11780: LD_INT 4
11782: PUSH
11783: LD_INT 5
11785: PUSH
11786: LD_INT 7
11788: PUSH
11789: LD_INT 11
11791: PUSH
11792: LD_INT 12
11794: PUSH
11795: LD_INT 15
11797: PUSH
11798: LD_INT 16
11800: PUSH
11801: LD_INT 20
11803: PUSH
11804: LD_INT 21
11806: PUSH
11807: LD_INT 22
11809: PUSH
11810: LD_INT 23
11812: PUSH
11813: LD_INT 25
11815: PUSH
11816: LD_INT 26
11818: PUSH
11819: LD_INT 30
11821: PUSH
11822: LD_INT 31
11824: PUSH
11825: LD_INT 32
11827: PUSH
11828: LD_INT 33
11830: PUSH
11831: LD_INT 34
11833: PUSH
11834: EMPTY
11835: LIST
11836: LIST
11837: LIST
11838: LIST
11839: LIST
11840: LIST
11841: LIST
11842: LIST
11843: LIST
11844: LIST
11845: LIST
11846: LIST
11847: LIST
11848: LIST
11849: LIST
11850: LIST
11851: LIST
11852: LIST
11853: LIST
11854: PUSH
11855: LD_INT 101
11857: PUSH
11858: LD_INT 102
11860: PUSH
11861: LD_INT 103
11863: PUSH
11864: LD_INT 106
11866: PUSH
11867: LD_INT 108
11869: PUSH
11870: LD_INT 112
11872: PUSH
11873: LD_INT 113
11875: PUSH
11876: LD_INT 114
11878: PUSH
11879: EMPTY
11880: LIST
11881: LIST
11882: LIST
11883: LIST
11884: LIST
11885: LIST
11886: LIST
11887: LIST
11888: PUSH
11889: EMPTY
11890: LIST
11891: LIST
11892: ST_TO_ADDR
11893: GO 12488
11895: LD_INT 17
11897: DOUBLE
11898: EQUAL
11899: IFTRUE 11903
11901: GO 12115
11903: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
11904: LD_ADDR_VAR 0 1
11908: PUSH
11909: LD_INT 1
11911: PUSH
11912: LD_INT 2
11914: PUSH
11915: LD_INT 3
11917: PUSH
11918: LD_INT 4
11920: PUSH
11921: LD_INT 5
11923: PUSH
11924: LD_INT 6
11926: PUSH
11927: LD_INT 7
11929: PUSH
11930: LD_INT 8
11932: PUSH
11933: LD_INT 9
11935: PUSH
11936: LD_INT 10
11938: PUSH
11939: LD_INT 11
11941: PUSH
11942: LD_INT 12
11944: PUSH
11945: LD_INT 13
11947: PUSH
11948: LD_INT 14
11950: PUSH
11951: LD_INT 15
11953: PUSH
11954: LD_INT 16
11956: PUSH
11957: LD_INT 17
11959: PUSH
11960: LD_INT 18
11962: PUSH
11963: LD_INT 19
11965: PUSH
11966: LD_INT 20
11968: PUSH
11969: LD_INT 21
11971: PUSH
11972: LD_INT 22
11974: PUSH
11975: LD_INT 23
11977: PUSH
11978: LD_INT 24
11980: PUSH
11981: LD_INT 25
11983: PUSH
11984: LD_INT 26
11986: PUSH
11987: LD_INT 27
11989: PUSH
11990: LD_INT 28
11992: PUSH
11993: LD_INT 29
11995: PUSH
11996: LD_INT 30
11998: PUSH
11999: LD_INT 31
12001: PUSH
12002: LD_INT 32
12004: PUSH
12005: LD_INT 33
12007: PUSH
12008: LD_INT 34
12010: PUSH
12011: LD_INT 36
12013: PUSH
12014: EMPTY
12015: LIST
12016: LIST
12017: LIST
12018: LIST
12019: LIST
12020: LIST
12021: LIST
12022: LIST
12023: LIST
12024: LIST
12025: LIST
12026: LIST
12027: LIST
12028: LIST
12029: LIST
12030: LIST
12031: LIST
12032: LIST
12033: LIST
12034: LIST
12035: LIST
12036: LIST
12037: LIST
12038: LIST
12039: LIST
12040: LIST
12041: LIST
12042: LIST
12043: LIST
12044: LIST
12045: LIST
12046: LIST
12047: LIST
12048: LIST
12049: LIST
12050: PUSH
12051: LD_INT 101
12053: PUSH
12054: LD_INT 102
12056: PUSH
12057: LD_INT 103
12059: PUSH
12060: LD_INT 104
12062: PUSH
12063: LD_INT 105
12065: PUSH
12066: LD_INT 106
12068: PUSH
12069: LD_INT 107
12071: PUSH
12072: LD_INT 108
12074: PUSH
12075: LD_INT 109
12077: PUSH
12078: LD_INT 110
12080: PUSH
12081: LD_INT 111
12083: PUSH
12084: LD_INT 112
12086: PUSH
12087: LD_INT 113
12089: PUSH
12090: LD_INT 114
12092: PUSH
12093: EMPTY
12094: LIST
12095: LIST
12096: LIST
12097: LIST
12098: LIST
12099: LIST
12100: LIST
12101: LIST
12102: LIST
12103: LIST
12104: LIST
12105: LIST
12106: LIST
12107: LIST
12108: PUSH
12109: EMPTY
12110: LIST
12111: LIST
12112: ST_TO_ADDR
12113: GO 12488
12115: LD_INT 18
12117: DOUBLE
12118: EQUAL
12119: IFTRUE 12123
12121: GO 12259
12123: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
12124: LD_ADDR_VAR 0 1
12128: PUSH
12129: LD_INT 2
12131: PUSH
12132: LD_INT 4
12134: PUSH
12135: LD_INT 5
12137: PUSH
12138: LD_INT 7
12140: PUSH
12141: LD_INT 11
12143: PUSH
12144: LD_INT 12
12146: PUSH
12147: LD_INT 15
12149: PUSH
12150: LD_INT 16
12152: PUSH
12153: LD_INT 20
12155: PUSH
12156: LD_INT 21
12158: PUSH
12159: LD_INT 22
12161: PUSH
12162: LD_INT 23
12164: PUSH
12165: LD_INT 25
12167: PUSH
12168: LD_INT 26
12170: PUSH
12171: LD_INT 30
12173: PUSH
12174: LD_INT 31
12176: PUSH
12177: LD_INT 32
12179: PUSH
12180: LD_INT 33
12182: PUSH
12183: LD_INT 34
12185: PUSH
12186: LD_INT 35
12188: PUSH
12189: LD_INT 36
12191: PUSH
12192: EMPTY
12193: LIST
12194: LIST
12195: LIST
12196: LIST
12197: LIST
12198: LIST
12199: LIST
12200: LIST
12201: LIST
12202: LIST
12203: LIST
12204: LIST
12205: LIST
12206: LIST
12207: LIST
12208: LIST
12209: LIST
12210: LIST
12211: LIST
12212: LIST
12213: LIST
12214: PUSH
12215: LD_INT 101
12217: PUSH
12218: LD_INT 102
12220: PUSH
12221: LD_INT 103
12223: PUSH
12224: LD_INT 106
12226: PUSH
12227: LD_INT 108
12229: PUSH
12230: LD_INT 112
12232: PUSH
12233: LD_INT 113
12235: PUSH
12236: LD_INT 114
12238: PUSH
12239: LD_INT 115
12241: PUSH
12242: EMPTY
12243: LIST
12244: LIST
12245: LIST
12246: LIST
12247: LIST
12248: LIST
12249: LIST
12250: LIST
12251: LIST
12252: PUSH
12253: EMPTY
12254: LIST
12255: LIST
12256: ST_TO_ADDR
12257: GO 12488
12259: LD_INT 19
12261: DOUBLE
12262: EQUAL
12263: IFTRUE 12267
12265: GO 12487
12267: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
12268: LD_ADDR_VAR 0 1
12272: PUSH
12273: LD_INT 1
12275: PUSH
12276: LD_INT 2
12278: PUSH
12279: LD_INT 3
12281: PUSH
12282: LD_INT 4
12284: PUSH
12285: LD_INT 5
12287: PUSH
12288: LD_INT 6
12290: PUSH
12291: LD_INT 7
12293: PUSH
12294: LD_INT 8
12296: PUSH
12297: LD_INT 9
12299: PUSH
12300: LD_INT 10
12302: PUSH
12303: LD_INT 11
12305: PUSH
12306: LD_INT 12
12308: PUSH
12309: LD_INT 13
12311: PUSH
12312: LD_INT 14
12314: PUSH
12315: LD_INT 15
12317: PUSH
12318: LD_INT 16
12320: PUSH
12321: LD_INT 17
12323: PUSH
12324: LD_INT 18
12326: PUSH
12327: LD_INT 19
12329: PUSH
12330: LD_INT 20
12332: PUSH
12333: LD_INT 21
12335: PUSH
12336: LD_INT 22
12338: PUSH
12339: LD_INT 23
12341: PUSH
12342: LD_INT 24
12344: PUSH
12345: LD_INT 25
12347: PUSH
12348: LD_INT 26
12350: PUSH
12351: LD_INT 27
12353: PUSH
12354: LD_INT 28
12356: PUSH
12357: LD_INT 29
12359: PUSH
12360: LD_INT 30
12362: PUSH
12363: LD_INT 31
12365: PUSH
12366: LD_INT 32
12368: PUSH
12369: LD_INT 33
12371: PUSH
12372: LD_INT 34
12374: PUSH
12375: LD_INT 35
12377: PUSH
12378: LD_INT 36
12380: PUSH
12381: EMPTY
12382: LIST
12383: LIST
12384: LIST
12385: LIST
12386: LIST
12387: LIST
12388: LIST
12389: LIST
12390: LIST
12391: LIST
12392: LIST
12393: LIST
12394: LIST
12395: LIST
12396: LIST
12397: LIST
12398: LIST
12399: LIST
12400: LIST
12401: LIST
12402: LIST
12403: LIST
12404: LIST
12405: LIST
12406: LIST
12407: LIST
12408: LIST
12409: LIST
12410: LIST
12411: LIST
12412: LIST
12413: LIST
12414: LIST
12415: LIST
12416: LIST
12417: LIST
12418: PUSH
12419: LD_INT 101
12421: PUSH
12422: LD_INT 102
12424: PUSH
12425: LD_INT 103
12427: PUSH
12428: LD_INT 104
12430: PUSH
12431: LD_INT 105
12433: PUSH
12434: LD_INT 106
12436: PUSH
12437: LD_INT 107
12439: PUSH
12440: LD_INT 108
12442: PUSH
12443: LD_INT 109
12445: PUSH
12446: LD_INT 110
12448: PUSH
12449: LD_INT 111
12451: PUSH
12452: LD_INT 112
12454: PUSH
12455: LD_INT 113
12457: PUSH
12458: LD_INT 114
12460: PUSH
12461: LD_INT 115
12463: PUSH
12464: EMPTY
12465: LIST
12466: LIST
12467: LIST
12468: LIST
12469: LIST
12470: LIST
12471: LIST
12472: LIST
12473: LIST
12474: LIST
12475: LIST
12476: LIST
12477: LIST
12478: LIST
12479: LIST
12480: PUSH
12481: EMPTY
12482: LIST
12483: LIST
12484: ST_TO_ADDR
12485: GO 12488
12487: POP
// end else
12488: GO 12707
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
12490: LD_ADDR_VAR 0 1
12494: PUSH
12495: LD_INT 1
12497: PUSH
12498: LD_INT 2
12500: PUSH
12501: LD_INT 3
12503: PUSH
12504: LD_INT 4
12506: PUSH
12507: LD_INT 5
12509: PUSH
12510: LD_INT 6
12512: PUSH
12513: LD_INT 7
12515: PUSH
12516: LD_INT 8
12518: PUSH
12519: LD_INT 9
12521: PUSH
12522: LD_INT 10
12524: PUSH
12525: LD_INT 11
12527: PUSH
12528: LD_INT 12
12530: PUSH
12531: LD_INT 13
12533: PUSH
12534: LD_INT 14
12536: PUSH
12537: LD_INT 15
12539: PUSH
12540: LD_INT 16
12542: PUSH
12543: LD_INT 17
12545: PUSH
12546: LD_INT 18
12548: PUSH
12549: LD_INT 19
12551: PUSH
12552: LD_INT 20
12554: PUSH
12555: LD_INT 21
12557: PUSH
12558: LD_INT 22
12560: PUSH
12561: LD_INT 23
12563: PUSH
12564: LD_INT 24
12566: PUSH
12567: LD_INT 25
12569: PUSH
12570: LD_INT 26
12572: PUSH
12573: LD_INT 27
12575: PUSH
12576: LD_INT 28
12578: PUSH
12579: LD_INT 29
12581: PUSH
12582: LD_INT 30
12584: PUSH
12585: LD_INT 31
12587: PUSH
12588: LD_INT 32
12590: PUSH
12591: LD_INT 33
12593: PUSH
12594: LD_INT 34
12596: PUSH
12597: LD_INT 35
12599: PUSH
12600: LD_INT 36
12602: PUSH
12603: EMPTY
12604: LIST
12605: LIST
12606: LIST
12607: LIST
12608: LIST
12609: LIST
12610: LIST
12611: LIST
12612: LIST
12613: LIST
12614: LIST
12615: LIST
12616: LIST
12617: LIST
12618: LIST
12619: LIST
12620: LIST
12621: LIST
12622: LIST
12623: LIST
12624: LIST
12625: LIST
12626: LIST
12627: LIST
12628: LIST
12629: LIST
12630: LIST
12631: LIST
12632: LIST
12633: LIST
12634: LIST
12635: LIST
12636: LIST
12637: LIST
12638: LIST
12639: LIST
12640: PUSH
12641: LD_INT 101
12643: PUSH
12644: LD_INT 102
12646: PUSH
12647: LD_INT 103
12649: PUSH
12650: LD_INT 104
12652: PUSH
12653: LD_INT 105
12655: PUSH
12656: LD_INT 106
12658: PUSH
12659: LD_INT 107
12661: PUSH
12662: LD_INT 108
12664: PUSH
12665: LD_INT 109
12667: PUSH
12668: LD_INT 110
12670: PUSH
12671: LD_INT 111
12673: PUSH
12674: LD_INT 112
12676: PUSH
12677: LD_INT 113
12679: PUSH
12680: LD_INT 114
12682: PUSH
12683: LD_INT 115
12685: PUSH
12686: EMPTY
12687: LIST
12688: LIST
12689: LIST
12690: LIST
12691: LIST
12692: LIST
12693: LIST
12694: LIST
12695: LIST
12696: LIST
12697: LIST
12698: LIST
12699: LIST
12700: LIST
12701: LIST
12702: PUSH
12703: EMPTY
12704: LIST
12705: LIST
12706: ST_TO_ADDR
// if result then
12707: LD_VAR 0 1
12711: IFFALSE 13000
// begin normal :=  ;
12713: LD_ADDR_VAR 0 3
12717: PUSH
12718: LD_STRING 
12720: ST_TO_ADDR
// hardcore :=  ;
12721: LD_ADDR_VAR 0 4
12725: PUSH
12726: LD_STRING 
12728: ST_TO_ADDR
// for i = 1 to normalCounter do
12729: LD_ADDR_VAR 0 5
12733: PUSH
12734: DOUBLE
12735: LD_INT 1
12737: DEC
12738: ST_TO_ADDR
12739: LD_EXP 46
12743: PUSH
12744: FOR_TO
12745: IFFALSE 12846
// begin tmp := 0 ;
12747: LD_ADDR_VAR 0 2
12751: PUSH
12752: LD_STRING 0
12754: ST_TO_ADDR
// if result [ 1 ] then
12755: LD_VAR 0 1
12759: PUSH
12760: LD_INT 1
12762: ARRAY
12763: IFFALSE 12828
// if result [ 1 ] [ 1 ] = i then
12765: LD_VAR 0 1
12769: PUSH
12770: LD_INT 1
12772: ARRAY
12773: PUSH
12774: LD_INT 1
12776: ARRAY
12777: PUSH
12778: LD_VAR 0 5
12782: EQUAL
12783: IFFALSE 12828
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
12785: LD_ADDR_VAR 0 1
12789: PUSH
12790: LD_VAR 0 1
12794: PPUSH
12795: LD_INT 1
12797: PPUSH
12798: LD_VAR 0 1
12802: PUSH
12803: LD_INT 1
12805: ARRAY
12806: PPUSH
12807: LD_INT 1
12809: PPUSH
12810: CALL_OW 3
12814: PPUSH
12815: CALL_OW 1
12819: ST_TO_ADDR
// tmp := 1 ;
12820: LD_ADDR_VAR 0 2
12824: PUSH
12825: LD_STRING 1
12827: ST_TO_ADDR
// end ; normal := normal & tmp ;
12828: LD_ADDR_VAR 0 3
12832: PUSH
12833: LD_VAR 0 3
12837: PUSH
12838: LD_VAR 0 2
12842: STR
12843: ST_TO_ADDR
// end ;
12844: GO 12744
12846: POP
12847: POP
// for i = 1 to hardcoreCounter do
12848: LD_ADDR_VAR 0 5
12852: PUSH
12853: DOUBLE
12854: LD_INT 1
12856: DEC
12857: ST_TO_ADDR
12858: LD_EXP 47
12862: PUSH
12863: FOR_TO
12864: IFFALSE 12969
// begin tmp := 0 ;
12866: LD_ADDR_VAR 0 2
12870: PUSH
12871: LD_STRING 0
12873: ST_TO_ADDR
// if result [ 2 ] then
12874: LD_VAR 0 1
12878: PUSH
12879: LD_INT 2
12881: ARRAY
12882: IFFALSE 12951
// if result [ 2 ] [ 1 ] = 100 + i then
12884: LD_VAR 0 1
12888: PUSH
12889: LD_INT 2
12891: ARRAY
12892: PUSH
12893: LD_INT 1
12895: ARRAY
12896: PUSH
12897: LD_INT 100
12899: PUSH
12900: LD_VAR 0 5
12904: PLUS
12905: EQUAL
12906: IFFALSE 12951
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
12908: LD_ADDR_VAR 0 1
12912: PUSH
12913: LD_VAR 0 1
12917: PPUSH
12918: LD_INT 2
12920: PPUSH
12921: LD_VAR 0 1
12925: PUSH
12926: LD_INT 2
12928: ARRAY
12929: PPUSH
12930: LD_INT 1
12932: PPUSH
12933: CALL_OW 3
12937: PPUSH
12938: CALL_OW 1
12942: ST_TO_ADDR
// tmp := 1 ;
12943: LD_ADDR_VAR 0 2
12947: PUSH
12948: LD_STRING 1
12950: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
12951: LD_ADDR_VAR 0 4
12955: PUSH
12956: LD_VAR 0 4
12960: PUSH
12961: LD_VAR 0 2
12965: STR
12966: ST_TO_ADDR
// end ;
12967: GO 12863
12969: POP
12970: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
12971: LD_STRING getStreamItemsFromMission("
12973: PUSH
12974: LD_VAR 0 3
12978: STR
12979: PUSH
12980: LD_STRING ","
12982: STR
12983: PUSH
12984: LD_VAR 0 4
12988: STR
12989: PUSH
12990: LD_STRING ")
12992: STR
12993: PPUSH
12994: CALL_OW 559
// end else
12998: GO 13007
// ToLua ( getStreamItemsFromMission("","") ) ;
13000: LD_STRING getStreamItemsFromMission("","")
13002: PPUSH
13003: CALL_OW 559
// end ;
13007: LD_VAR 0 1
13011: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
13012: LD_EXP 45
13016: PUSH
13017: LD_EXP 50
13021: AND
13022: IFFALSE 13146
13024: GO 13026
13026: DISABLE
13027: LD_INT 0
13029: PPUSH
13030: PPUSH
// begin enable ;
13031: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
13032: LD_ADDR_VAR 0 2
13036: PUSH
13037: LD_INT 22
13039: PUSH
13040: LD_OWVAR 2
13044: PUSH
13045: EMPTY
13046: LIST
13047: LIST
13048: PUSH
13049: LD_INT 2
13051: PUSH
13052: LD_INT 34
13054: PUSH
13055: LD_INT 7
13057: PUSH
13058: EMPTY
13059: LIST
13060: LIST
13061: PUSH
13062: LD_INT 34
13064: PUSH
13065: LD_INT 45
13067: PUSH
13068: EMPTY
13069: LIST
13070: LIST
13071: PUSH
13072: LD_INT 34
13074: PUSH
13075: LD_INT 28
13077: PUSH
13078: EMPTY
13079: LIST
13080: LIST
13081: PUSH
13082: LD_INT 34
13084: PUSH
13085: LD_INT 47
13087: PUSH
13088: EMPTY
13089: LIST
13090: LIST
13091: PUSH
13092: EMPTY
13093: LIST
13094: LIST
13095: LIST
13096: LIST
13097: LIST
13098: PUSH
13099: EMPTY
13100: LIST
13101: LIST
13102: PPUSH
13103: CALL_OW 69
13107: ST_TO_ADDR
// if not tmp then
13108: LD_VAR 0 2
13112: NOT
13113: IFFALSE 13117
// exit ;
13115: GO 13146
// for i in tmp do
13117: LD_ADDR_VAR 0 1
13121: PUSH
13122: LD_VAR 0 2
13126: PUSH
13127: FOR_IN
13128: IFFALSE 13144
// begin SetLives ( i , 0 ) ;
13130: LD_VAR 0 1
13134: PPUSH
13135: LD_INT 0
13137: PPUSH
13138: CALL_OW 234
// end ;
13142: GO 13127
13144: POP
13145: POP
// end ;
13146: PPOPN 2
13148: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
13149: LD_EXP 45
13153: PUSH
13154: LD_EXP 51
13158: AND
13159: IFFALSE 13243
13161: GO 13163
13163: DISABLE
13164: LD_INT 0
13166: PPUSH
13167: PPUSH
// begin enable ;
13168: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
13169: LD_ADDR_VAR 0 2
13173: PUSH
13174: LD_INT 22
13176: PUSH
13177: LD_OWVAR 2
13181: PUSH
13182: EMPTY
13183: LIST
13184: LIST
13185: PUSH
13186: LD_INT 32
13188: PUSH
13189: LD_INT 3
13191: PUSH
13192: EMPTY
13193: LIST
13194: LIST
13195: PUSH
13196: EMPTY
13197: LIST
13198: LIST
13199: PPUSH
13200: CALL_OW 69
13204: ST_TO_ADDR
// if not tmp then
13205: LD_VAR 0 2
13209: NOT
13210: IFFALSE 13214
// exit ;
13212: GO 13243
// for i in tmp do
13214: LD_ADDR_VAR 0 1
13218: PUSH
13219: LD_VAR 0 2
13223: PUSH
13224: FOR_IN
13225: IFFALSE 13241
// begin SetLives ( i , 0 ) ;
13227: LD_VAR 0 1
13231: PPUSH
13232: LD_INT 0
13234: PPUSH
13235: CALL_OW 234
// end ;
13239: GO 13224
13241: POP
13242: POP
// end ;
13243: PPOPN 2
13245: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
13246: LD_EXP 45
13250: PUSH
13251: LD_EXP 48
13255: AND
13256: IFFALSE 13349
13258: GO 13260
13260: DISABLE
13261: LD_INT 0
13263: PPUSH
// begin enable ;
13264: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
13265: LD_ADDR_VAR 0 1
13269: PUSH
13270: LD_INT 22
13272: PUSH
13273: LD_OWVAR 2
13277: PUSH
13278: EMPTY
13279: LIST
13280: LIST
13281: PUSH
13282: LD_INT 2
13284: PUSH
13285: LD_INT 25
13287: PUSH
13288: LD_INT 5
13290: PUSH
13291: EMPTY
13292: LIST
13293: LIST
13294: PUSH
13295: LD_INT 25
13297: PUSH
13298: LD_INT 9
13300: PUSH
13301: EMPTY
13302: LIST
13303: LIST
13304: PUSH
13305: LD_INT 25
13307: PUSH
13308: LD_INT 8
13310: PUSH
13311: EMPTY
13312: LIST
13313: LIST
13314: PUSH
13315: EMPTY
13316: LIST
13317: LIST
13318: LIST
13319: LIST
13320: PUSH
13321: EMPTY
13322: LIST
13323: LIST
13324: PPUSH
13325: CALL_OW 69
13329: PUSH
13330: FOR_IN
13331: IFFALSE 13347
// begin SetClass ( i , 1 ) ;
13333: LD_VAR 0 1
13337: PPUSH
13338: LD_INT 1
13340: PPUSH
13341: CALL_OW 336
// end ;
13345: GO 13330
13347: POP
13348: POP
// end ;
13349: PPOPN 1
13351: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
13352: LD_EXP 45
13356: PUSH
13357: LD_EXP 49
13361: AND
13362: PUSH
13363: LD_OWVAR 65
13367: PUSH
13368: LD_INT 7
13370: LESS
13371: AND
13372: IFFALSE 13386
13374: GO 13376
13376: DISABLE
// begin enable ;
13377: ENABLE
// game_speed := 7 ;
13378: LD_ADDR_OWVAR 65
13382: PUSH
13383: LD_INT 7
13385: ST_TO_ADDR
// end ;
13386: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
13387: LD_EXP 45
13391: PUSH
13392: LD_EXP 52
13396: AND
13397: IFFALSE 13599
13399: GO 13401
13401: DISABLE
13402: LD_INT 0
13404: PPUSH
13405: PPUSH
13406: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
13407: LD_ADDR_VAR 0 3
13411: PUSH
13412: LD_INT 81
13414: PUSH
13415: LD_OWVAR 2
13419: PUSH
13420: EMPTY
13421: LIST
13422: LIST
13423: PUSH
13424: LD_INT 21
13426: PUSH
13427: LD_INT 1
13429: PUSH
13430: EMPTY
13431: LIST
13432: LIST
13433: PUSH
13434: EMPTY
13435: LIST
13436: LIST
13437: PPUSH
13438: CALL_OW 69
13442: ST_TO_ADDR
// if not tmp then
13443: LD_VAR 0 3
13447: NOT
13448: IFFALSE 13452
// exit ;
13450: GO 13599
// if tmp > 5 then
13452: LD_VAR 0 3
13456: PUSH
13457: LD_INT 5
13459: GREATER
13460: IFFALSE 13472
// k := 5 else
13462: LD_ADDR_VAR 0 2
13466: PUSH
13467: LD_INT 5
13469: ST_TO_ADDR
13470: GO 13482
// k := tmp ;
13472: LD_ADDR_VAR 0 2
13476: PUSH
13477: LD_VAR 0 3
13481: ST_TO_ADDR
// for i := 1 to k do
13482: LD_ADDR_VAR 0 1
13486: PUSH
13487: DOUBLE
13488: LD_INT 1
13490: DEC
13491: ST_TO_ADDR
13492: LD_VAR 0 2
13496: PUSH
13497: FOR_TO
13498: IFFALSE 13597
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
13500: LD_VAR 0 3
13504: PUSH
13505: LD_VAR 0 1
13509: ARRAY
13510: PPUSH
13511: LD_VAR 0 1
13515: PUSH
13516: LD_INT 4
13518: MOD
13519: PUSH
13520: LD_INT 1
13522: PLUS
13523: PPUSH
13524: CALL_OW 259
13528: PUSH
13529: LD_INT 10
13531: LESS
13532: IFFALSE 13595
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
13534: LD_VAR 0 3
13538: PUSH
13539: LD_VAR 0 1
13543: ARRAY
13544: PPUSH
13545: LD_VAR 0 1
13549: PUSH
13550: LD_INT 4
13552: MOD
13553: PUSH
13554: LD_INT 1
13556: PLUS
13557: PPUSH
13558: LD_VAR 0 3
13562: PUSH
13563: LD_VAR 0 1
13567: ARRAY
13568: PPUSH
13569: LD_VAR 0 1
13573: PUSH
13574: LD_INT 4
13576: MOD
13577: PUSH
13578: LD_INT 1
13580: PLUS
13581: PPUSH
13582: CALL_OW 259
13586: PUSH
13587: LD_INT 1
13589: PLUS
13590: PPUSH
13591: CALL_OW 237
13595: GO 13497
13597: POP
13598: POP
// end ;
13599: PPOPN 3
13601: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
13602: LD_EXP 45
13606: PUSH
13607: LD_EXP 53
13611: AND
13612: IFFALSE 13632
13614: GO 13616
13616: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
13617: LD_INT 4
13619: PPUSH
13620: LD_OWVAR 2
13624: PPUSH
13625: LD_INT 0
13627: PPUSH
13628: CALL_OW 324
13632: END
// every 0 0$1 trigger StreamModeActive and sShovel do
13633: LD_EXP 45
13637: PUSH
13638: LD_EXP 82
13642: AND
13643: IFFALSE 13663
13645: GO 13647
13647: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
13648: LD_INT 19
13650: PPUSH
13651: LD_OWVAR 2
13655: PPUSH
13656: LD_INT 0
13658: PPUSH
13659: CALL_OW 324
13663: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
13664: LD_EXP 45
13668: PUSH
13669: LD_EXP 54
13673: AND
13674: IFFALSE 13776
13676: GO 13678
13678: DISABLE
13679: LD_INT 0
13681: PPUSH
13682: PPUSH
// begin enable ;
13683: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
13684: LD_ADDR_VAR 0 2
13688: PUSH
13689: LD_INT 22
13691: PUSH
13692: LD_OWVAR 2
13696: PUSH
13697: EMPTY
13698: LIST
13699: LIST
13700: PUSH
13701: LD_INT 2
13703: PUSH
13704: LD_INT 34
13706: PUSH
13707: LD_INT 11
13709: PUSH
13710: EMPTY
13711: LIST
13712: LIST
13713: PUSH
13714: LD_INT 34
13716: PUSH
13717: LD_INT 30
13719: PUSH
13720: EMPTY
13721: LIST
13722: LIST
13723: PUSH
13724: EMPTY
13725: LIST
13726: LIST
13727: LIST
13728: PUSH
13729: EMPTY
13730: LIST
13731: LIST
13732: PPUSH
13733: CALL_OW 69
13737: ST_TO_ADDR
// if not tmp then
13738: LD_VAR 0 2
13742: NOT
13743: IFFALSE 13747
// exit ;
13745: GO 13776
// for i in tmp do
13747: LD_ADDR_VAR 0 1
13751: PUSH
13752: LD_VAR 0 2
13756: PUSH
13757: FOR_IN
13758: IFFALSE 13774
// begin SetLives ( i , 0 ) ;
13760: LD_VAR 0 1
13764: PPUSH
13765: LD_INT 0
13767: PPUSH
13768: CALL_OW 234
// end ;
13772: GO 13757
13774: POP
13775: POP
// end ;
13776: PPOPN 2
13778: END
// every 0 0$1 trigger StreamModeActive and sBunker do
13779: LD_EXP 45
13783: PUSH
13784: LD_EXP 55
13788: AND
13789: IFFALSE 13809
13791: GO 13793
13793: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
13794: LD_INT 32
13796: PPUSH
13797: LD_OWVAR 2
13801: PPUSH
13802: LD_INT 0
13804: PPUSH
13805: CALL_OW 324
13809: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
13810: LD_EXP 45
13814: PUSH
13815: LD_EXP 56
13819: AND
13820: IFFALSE 14001
13822: GO 13824
13824: DISABLE
13825: LD_INT 0
13827: PPUSH
13828: PPUSH
13829: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
13830: LD_ADDR_VAR 0 2
13834: PUSH
13835: LD_INT 22
13837: PUSH
13838: LD_OWVAR 2
13842: PUSH
13843: EMPTY
13844: LIST
13845: LIST
13846: PUSH
13847: LD_INT 33
13849: PUSH
13850: LD_INT 3
13852: PUSH
13853: EMPTY
13854: LIST
13855: LIST
13856: PUSH
13857: EMPTY
13858: LIST
13859: LIST
13860: PPUSH
13861: CALL_OW 69
13865: ST_TO_ADDR
// if not tmp then
13866: LD_VAR 0 2
13870: NOT
13871: IFFALSE 13875
// exit ;
13873: GO 14001
// side := 0 ;
13875: LD_ADDR_VAR 0 3
13879: PUSH
13880: LD_INT 0
13882: ST_TO_ADDR
// for i := 1 to 8 do
13883: LD_ADDR_VAR 0 1
13887: PUSH
13888: DOUBLE
13889: LD_INT 1
13891: DEC
13892: ST_TO_ADDR
13893: LD_INT 8
13895: PUSH
13896: FOR_TO
13897: IFFALSE 13945
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
13899: LD_OWVAR 2
13903: PUSH
13904: LD_VAR 0 1
13908: NONEQUAL
13909: PUSH
13910: LD_OWVAR 2
13914: PPUSH
13915: LD_VAR 0 1
13919: PPUSH
13920: CALL_OW 81
13924: PUSH
13925: LD_INT 2
13927: EQUAL
13928: AND
13929: IFFALSE 13943
// begin side := i ;
13931: LD_ADDR_VAR 0 3
13935: PUSH
13936: LD_VAR 0 1
13940: ST_TO_ADDR
// break ;
13941: GO 13945
// end ;
13943: GO 13896
13945: POP
13946: POP
// if not side then
13947: LD_VAR 0 3
13951: NOT
13952: IFFALSE 13956
// exit ;
13954: GO 14001
// for i := 1 to tmp do
13956: LD_ADDR_VAR 0 1
13960: PUSH
13961: DOUBLE
13962: LD_INT 1
13964: DEC
13965: ST_TO_ADDR
13966: LD_VAR 0 2
13970: PUSH
13971: FOR_TO
13972: IFFALSE 13999
// if Prob ( 60 ) then
13974: LD_INT 60
13976: PPUSH
13977: CALL_OW 13
13981: IFFALSE 13997
// SetSide ( i , side ) ;
13983: LD_VAR 0 1
13987: PPUSH
13988: LD_VAR 0 3
13992: PPUSH
13993: CALL_OW 235
13997: GO 13971
13999: POP
14000: POP
// end ;
14001: PPOPN 3
14003: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
14004: LD_EXP 45
14008: PUSH
14009: LD_EXP 58
14013: AND
14014: IFFALSE 14133
14016: GO 14018
14018: DISABLE
14019: LD_INT 0
14021: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
14022: LD_ADDR_VAR 0 1
14026: PUSH
14027: LD_INT 22
14029: PUSH
14030: LD_OWVAR 2
14034: PUSH
14035: EMPTY
14036: LIST
14037: LIST
14038: PUSH
14039: LD_INT 21
14041: PUSH
14042: LD_INT 1
14044: PUSH
14045: EMPTY
14046: LIST
14047: LIST
14048: PUSH
14049: LD_INT 3
14051: PUSH
14052: LD_INT 23
14054: PUSH
14055: LD_INT 0
14057: PUSH
14058: EMPTY
14059: LIST
14060: LIST
14061: PUSH
14062: EMPTY
14063: LIST
14064: LIST
14065: PUSH
14066: EMPTY
14067: LIST
14068: LIST
14069: LIST
14070: PPUSH
14071: CALL_OW 69
14075: PUSH
14076: FOR_IN
14077: IFFALSE 14131
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
14079: LD_VAR 0 1
14083: PPUSH
14084: CALL_OW 257
14088: PUSH
14089: LD_INT 1
14091: PUSH
14092: LD_INT 2
14094: PUSH
14095: LD_INT 3
14097: PUSH
14098: LD_INT 4
14100: PUSH
14101: EMPTY
14102: LIST
14103: LIST
14104: LIST
14105: LIST
14106: IN
14107: IFFALSE 14129
// SetClass ( un , rand ( 1 , 4 ) ) ;
14109: LD_VAR 0 1
14113: PPUSH
14114: LD_INT 1
14116: PPUSH
14117: LD_INT 4
14119: PPUSH
14120: CALL_OW 12
14124: PPUSH
14125: CALL_OW 336
14129: GO 14076
14131: POP
14132: POP
// end ;
14133: PPOPN 1
14135: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
14136: LD_EXP 45
14140: PUSH
14141: LD_EXP 57
14145: AND
14146: IFFALSE 14225
14148: GO 14150
14150: DISABLE
14151: LD_INT 0
14153: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
14154: LD_ADDR_VAR 0 1
14158: PUSH
14159: LD_INT 22
14161: PUSH
14162: LD_OWVAR 2
14166: PUSH
14167: EMPTY
14168: LIST
14169: LIST
14170: PUSH
14171: LD_INT 21
14173: PUSH
14174: LD_INT 3
14176: PUSH
14177: EMPTY
14178: LIST
14179: LIST
14180: PUSH
14181: EMPTY
14182: LIST
14183: LIST
14184: PPUSH
14185: CALL_OW 69
14189: ST_TO_ADDR
// if not tmp then
14190: LD_VAR 0 1
14194: NOT
14195: IFFALSE 14199
// exit ;
14197: GO 14225
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
14199: LD_VAR 0 1
14203: PUSH
14204: LD_INT 1
14206: PPUSH
14207: LD_VAR 0 1
14211: PPUSH
14212: CALL_OW 12
14216: ARRAY
14217: PPUSH
14218: LD_INT 100
14220: PPUSH
14221: CALL_OW 234
// end ;
14225: PPOPN 1
14227: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
14228: LD_EXP 45
14232: PUSH
14233: LD_EXP 59
14237: AND
14238: IFFALSE 14336
14240: GO 14242
14242: DISABLE
14243: LD_INT 0
14245: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
14246: LD_ADDR_VAR 0 1
14250: PUSH
14251: LD_INT 22
14253: PUSH
14254: LD_OWVAR 2
14258: PUSH
14259: EMPTY
14260: LIST
14261: LIST
14262: PUSH
14263: LD_INT 21
14265: PUSH
14266: LD_INT 1
14268: PUSH
14269: EMPTY
14270: LIST
14271: LIST
14272: PUSH
14273: EMPTY
14274: LIST
14275: LIST
14276: PPUSH
14277: CALL_OW 69
14281: ST_TO_ADDR
// if not tmp then
14282: LD_VAR 0 1
14286: NOT
14287: IFFALSE 14291
// exit ;
14289: GO 14336
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
14291: LD_VAR 0 1
14295: PUSH
14296: LD_INT 1
14298: PPUSH
14299: LD_VAR 0 1
14303: PPUSH
14304: CALL_OW 12
14308: ARRAY
14309: PPUSH
14310: LD_INT 1
14312: PPUSH
14313: LD_INT 4
14315: PPUSH
14316: CALL_OW 12
14320: PPUSH
14321: LD_INT 3000
14323: PPUSH
14324: LD_INT 9000
14326: PPUSH
14327: CALL_OW 12
14331: PPUSH
14332: CALL_OW 492
// end ;
14336: PPOPN 1
14338: END
// every 0 0$1 trigger StreamModeActive and sDepot do
14339: LD_EXP 45
14343: PUSH
14344: LD_EXP 60
14348: AND
14349: IFFALSE 14369
14351: GO 14353
14353: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
14354: LD_INT 1
14356: PPUSH
14357: LD_OWVAR 2
14361: PPUSH
14362: LD_INT 0
14364: PPUSH
14365: CALL_OW 324
14369: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
14370: LD_EXP 45
14374: PUSH
14375: LD_EXP 61
14379: AND
14380: IFFALSE 14463
14382: GO 14384
14384: DISABLE
14385: LD_INT 0
14387: PPUSH
14388: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
14389: LD_ADDR_VAR 0 2
14393: PUSH
14394: LD_INT 22
14396: PUSH
14397: LD_OWVAR 2
14401: PUSH
14402: EMPTY
14403: LIST
14404: LIST
14405: PUSH
14406: LD_INT 21
14408: PUSH
14409: LD_INT 3
14411: PUSH
14412: EMPTY
14413: LIST
14414: LIST
14415: PUSH
14416: EMPTY
14417: LIST
14418: LIST
14419: PPUSH
14420: CALL_OW 69
14424: ST_TO_ADDR
// if not tmp then
14425: LD_VAR 0 2
14429: NOT
14430: IFFALSE 14434
// exit ;
14432: GO 14463
// for i in tmp do
14434: LD_ADDR_VAR 0 1
14438: PUSH
14439: LD_VAR 0 2
14443: PUSH
14444: FOR_IN
14445: IFFALSE 14461
// SetBLevel ( i , 10 ) ;
14447: LD_VAR 0 1
14451: PPUSH
14452: LD_INT 10
14454: PPUSH
14455: CALL_OW 241
14459: GO 14444
14461: POP
14462: POP
// end ;
14463: PPOPN 2
14465: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
14466: LD_EXP 45
14470: PUSH
14471: LD_EXP 62
14475: AND
14476: IFFALSE 14587
14478: GO 14480
14480: DISABLE
14481: LD_INT 0
14483: PPUSH
14484: PPUSH
14485: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
14486: LD_ADDR_VAR 0 3
14490: PUSH
14491: LD_INT 22
14493: PUSH
14494: LD_OWVAR 2
14498: PUSH
14499: EMPTY
14500: LIST
14501: LIST
14502: PUSH
14503: LD_INT 25
14505: PUSH
14506: LD_INT 1
14508: PUSH
14509: EMPTY
14510: LIST
14511: LIST
14512: PUSH
14513: EMPTY
14514: LIST
14515: LIST
14516: PPUSH
14517: CALL_OW 69
14521: ST_TO_ADDR
// if not tmp then
14522: LD_VAR 0 3
14526: NOT
14527: IFFALSE 14531
// exit ;
14529: GO 14587
// un := tmp [ rand ( 1 , tmp ) ] ;
14531: LD_ADDR_VAR 0 2
14535: PUSH
14536: LD_VAR 0 3
14540: PUSH
14541: LD_INT 1
14543: PPUSH
14544: LD_VAR 0 3
14548: PPUSH
14549: CALL_OW 12
14553: ARRAY
14554: ST_TO_ADDR
// if Crawls ( un ) then
14555: LD_VAR 0 2
14559: PPUSH
14560: CALL_OW 318
14564: IFFALSE 14575
// ComWalk ( un ) ;
14566: LD_VAR 0 2
14570: PPUSH
14571: CALL_OW 138
// SetClass ( un , class_sniper ) ;
14575: LD_VAR 0 2
14579: PPUSH
14580: LD_INT 5
14582: PPUSH
14583: CALL_OW 336
// end ;
14587: PPOPN 3
14589: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
14590: LD_EXP 45
14594: PUSH
14595: LD_EXP 63
14599: AND
14600: PUSH
14601: LD_OWVAR 67
14605: PUSH
14606: LD_INT 3
14608: LESS
14609: AND
14610: IFFALSE 14629
14612: GO 14614
14614: DISABLE
// Difficulty := Difficulty + 1 ;
14615: LD_ADDR_OWVAR 67
14619: PUSH
14620: LD_OWVAR 67
14624: PUSH
14625: LD_INT 1
14627: PLUS
14628: ST_TO_ADDR
14629: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
14630: LD_EXP 45
14634: PUSH
14635: LD_EXP 64
14639: AND
14640: IFFALSE 14743
14642: GO 14644
14644: DISABLE
14645: LD_INT 0
14647: PPUSH
// begin for i := 1 to 5 do
14648: LD_ADDR_VAR 0 1
14652: PUSH
14653: DOUBLE
14654: LD_INT 1
14656: DEC
14657: ST_TO_ADDR
14658: LD_INT 5
14660: PUSH
14661: FOR_TO
14662: IFFALSE 14741
// begin uc_nation := nation_nature ;
14664: LD_ADDR_OWVAR 21
14668: PUSH
14669: LD_INT 0
14671: ST_TO_ADDR
// uc_side := 0 ;
14672: LD_ADDR_OWVAR 20
14676: PUSH
14677: LD_INT 0
14679: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
14680: LD_ADDR_OWVAR 29
14684: PUSH
14685: LD_INT 12
14687: PUSH
14688: LD_INT 12
14690: PUSH
14691: EMPTY
14692: LIST
14693: LIST
14694: ST_TO_ADDR
// hc_agressivity := 20 ;
14695: LD_ADDR_OWVAR 35
14699: PUSH
14700: LD_INT 20
14702: ST_TO_ADDR
// hc_class := class_tiger ;
14703: LD_ADDR_OWVAR 28
14707: PUSH
14708: LD_INT 14
14710: ST_TO_ADDR
// hc_gallery :=  ;
14711: LD_ADDR_OWVAR 33
14715: PUSH
14716: LD_STRING 
14718: ST_TO_ADDR
// hc_name :=  ;
14719: LD_ADDR_OWVAR 26
14723: PUSH
14724: LD_STRING 
14726: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
14727: CALL_OW 44
14731: PPUSH
14732: LD_INT 0
14734: PPUSH
14735: CALL_OW 51
// end ;
14739: GO 14661
14741: POP
14742: POP
// end ;
14743: PPOPN 1
14745: END
// every 0 0$1 trigger StreamModeActive and sBomb do
14746: LD_EXP 45
14750: PUSH
14751: LD_EXP 65
14755: AND
14756: IFFALSE 14765
14758: GO 14760
14760: DISABLE
// StreamSibBomb ;
14761: CALL 14766 0 0
14765: END
// export function StreamSibBomb ; var i , x , y ; begin
14766: LD_INT 0
14768: PPUSH
14769: PPUSH
14770: PPUSH
14771: PPUSH
// result := false ;
14772: LD_ADDR_VAR 0 1
14776: PUSH
14777: LD_INT 0
14779: ST_TO_ADDR
// for i := 1 to 16 do
14780: LD_ADDR_VAR 0 2
14784: PUSH
14785: DOUBLE
14786: LD_INT 1
14788: DEC
14789: ST_TO_ADDR
14790: LD_INT 16
14792: PUSH
14793: FOR_TO
14794: IFFALSE 14993
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
14796: LD_ADDR_VAR 0 3
14800: PUSH
14801: LD_INT 10
14803: PUSH
14804: LD_INT 20
14806: PUSH
14807: LD_INT 30
14809: PUSH
14810: LD_INT 40
14812: PUSH
14813: LD_INT 50
14815: PUSH
14816: LD_INT 60
14818: PUSH
14819: LD_INT 70
14821: PUSH
14822: LD_INT 80
14824: PUSH
14825: LD_INT 90
14827: PUSH
14828: LD_INT 100
14830: PUSH
14831: LD_INT 110
14833: PUSH
14834: LD_INT 120
14836: PUSH
14837: LD_INT 130
14839: PUSH
14840: LD_INT 140
14842: PUSH
14843: LD_INT 150
14845: PUSH
14846: EMPTY
14847: LIST
14848: LIST
14849: LIST
14850: LIST
14851: LIST
14852: LIST
14853: LIST
14854: LIST
14855: LIST
14856: LIST
14857: LIST
14858: LIST
14859: LIST
14860: LIST
14861: LIST
14862: PUSH
14863: LD_INT 1
14865: PPUSH
14866: LD_INT 15
14868: PPUSH
14869: CALL_OW 12
14873: ARRAY
14874: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
14875: LD_ADDR_VAR 0 4
14879: PUSH
14880: LD_INT 10
14882: PUSH
14883: LD_INT 20
14885: PUSH
14886: LD_INT 30
14888: PUSH
14889: LD_INT 40
14891: PUSH
14892: LD_INT 50
14894: PUSH
14895: LD_INT 60
14897: PUSH
14898: LD_INT 70
14900: PUSH
14901: LD_INT 80
14903: PUSH
14904: LD_INT 90
14906: PUSH
14907: LD_INT 100
14909: PUSH
14910: LD_INT 110
14912: PUSH
14913: LD_INT 120
14915: PUSH
14916: LD_INT 130
14918: PUSH
14919: LD_INT 140
14921: PUSH
14922: LD_INT 150
14924: PUSH
14925: EMPTY
14926: LIST
14927: LIST
14928: LIST
14929: LIST
14930: LIST
14931: LIST
14932: LIST
14933: LIST
14934: LIST
14935: LIST
14936: LIST
14937: LIST
14938: LIST
14939: LIST
14940: LIST
14941: PUSH
14942: LD_INT 1
14944: PPUSH
14945: LD_INT 15
14947: PPUSH
14948: CALL_OW 12
14952: ARRAY
14953: ST_TO_ADDR
// if ValidHex ( x , y ) then
14954: LD_VAR 0 3
14958: PPUSH
14959: LD_VAR 0 4
14963: PPUSH
14964: CALL_OW 488
14968: IFFALSE 14991
// begin result := [ x , y ] ;
14970: LD_ADDR_VAR 0 1
14974: PUSH
14975: LD_VAR 0 3
14979: PUSH
14980: LD_VAR 0 4
14984: PUSH
14985: EMPTY
14986: LIST
14987: LIST
14988: ST_TO_ADDR
// break ;
14989: GO 14993
// end ; end ;
14991: GO 14793
14993: POP
14994: POP
// if result then
14995: LD_VAR 0 1
14999: IFFALSE 15059
// begin ToLua ( playSibBomb() ) ;
15001: LD_STRING playSibBomb()
15003: PPUSH
15004: CALL_OW 559
// wait ( 0 0$14 ) ;
15008: LD_INT 490
15010: PPUSH
15011: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
15015: LD_VAR 0 1
15019: PUSH
15020: LD_INT 1
15022: ARRAY
15023: PPUSH
15024: LD_VAR 0 1
15028: PUSH
15029: LD_INT 2
15031: ARRAY
15032: PPUSH
15033: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
15037: LD_VAR 0 1
15041: PUSH
15042: LD_INT 1
15044: ARRAY
15045: PPUSH
15046: LD_VAR 0 1
15050: PUSH
15051: LD_INT 2
15053: ARRAY
15054: PPUSH
15055: CALL_OW 429
// end ; end ;
15059: LD_VAR 0 1
15063: RET
// every 0 0$1 trigger StreamModeActive and sReset do
15064: LD_EXP 45
15068: PUSH
15069: LD_EXP 67
15073: AND
15074: IFFALSE 15086
15076: GO 15078
15078: DISABLE
// YouLost (  ) ;
15079: LD_STRING 
15081: PPUSH
15082: CALL_OW 104
15086: END
// every 0 0$1 trigger StreamModeActive and sFog do
15087: LD_EXP 45
15091: PUSH
15092: LD_EXP 66
15096: AND
15097: IFFALSE 15111
15099: GO 15101
15101: DISABLE
// FogOff ( your_side ) ;
15102: LD_OWVAR 2
15106: PPUSH
15107: CALL_OW 344
15111: END
// every 0 0$1 trigger StreamModeActive and sSun do
15112: LD_EXP 45
15116: PUSH
15117: LD_EXP 68
15121: AND
15122: IFFALSE 15150
15124: GO 15126
15126: DISABLE
// begin solar_recharge_percent := 0 ;
15127: LD_ADDR_OWVAR 79
15131: PUSH
15132: LD_INT 0
15134: ST_TO_ADDR
// wait ( 5 5$00 ) ;
15135: LD_INT 10500
15137: PPUSH
15138: CALL_OW 67
// solar_recharge_percent := 100 ;
15142: LD_ADDR_OWVAR 79
15146: PUSH
15147: LD_INT 100
15149: ST_TO_ADDR
// end ;
15150: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
15151: LD_EXP 45
15155: PUSH
15156: LD_EXP 69
15160: AND
15161: IFFALSE 15400
15163: GO 15165
15165: DISABLE
15166: LD_INT 0
15168: PPUSH
15169: PPUSH
15170: PPUSH
// begin tmp := [ ] ;
15171: LD_ADDR_VAR 0 3
15175: PUSH
15176: EMPTY
15177: ST_TO_ADDR
// for i := 1 to 6 do
15178: LD_ADDR_VAR 0 1
15182: PUSH
15183: DOUBLE
15184: LD_INT 1
15186: DEC
15187: ST_TO_ADDR
15188: LD_INT 6
15190: PUSH
15191: FOR_TO
15192: IFFALSE 15297
// begin uc_nation := nation_nature ;
15194: LD_ADDR_OWVAR 21
15198: PUSH
15199: LD_INT 0
15201: ST_TO_ADDR
// uc_side := 0 ;
15202: LD_ADDR_OWVAR 20
15206: PUSH
15207: LD_INT 0
15209: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
15210: LD_ADDR_OWVAR 29
15214: PUSH
15215: LD_INT 12
15217: PUSH
15218: LD_INT 12
15220: PUSH
15221: EMPTY
15222: LIST
15223: LIST
15224: ST_TO_ADDR
// hc_agressivity := 20 ;
15225: LD_ADDR_OWVAR 35
15229: PUSH
15230: LD_INT 20
15232: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
15233: LD_ADDR_OWVAR 28
15237: PUSH
15238: LD_INT 17
15240: ST_TO_ADDR
// hc_gallery :=  ;
15241: LD_ADDR_OWVAR 33
15245: PUSH
15246: LD_STRING 
15248: ST_TO_ADDR
// hc_name :=  ;
15249: LD_ADDR_OWVAR 26
15253: PUSH
15254: LD_STRING 
15256: ST_TO_ADDR
// un := CreateHuman ;
15257: LD_ADDR_VAR 0 2
15261: PUSH
15262: CALL_OW 44
15266: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
15267: LD_VAR 0 2
15271: PPUSH
15272: LD_INT 1
15274: PPUSH
15275: CALL_OW 51
// tmp := tmp ^ un ;
15279: LD_ADDR_VAR 0 3
15283: PUSH
15284: LD_VAR 0 3
15288: PUSH
15289: LD_VAR 0 2
15293: ADD
15294: ST_TO_ADDR
// end ;
15295: GO 15191
15297: POP
15298: POP
// repeat wait ( 0 0$1 ) ;
15299: LD_INT 35
15301: PPUSH
15302: CALL_OW 67
// for un in tmp do
15306: LD_ADDR_VAR 0 2
15310: PUSH
15311: LD_VAR 0 3
15315: PUSH
15316: FOR_IN
15317: IFFALSE 15391
// begin if IsDead ( un ) then
15319: LD_VAR 0 2
15323: PPUSH
15324: CALL_OW 301
15328: IFFALSE 15348
// begin tmp := tmp diff un ;
15330: LD_ADDR_VAR 0 3
15334: PUSH
15335: LD_VAR 0 3
15339: PUSH
15340: LD_VAR 0 2
15344: DIFF
15345: ST_TO_ADDR
// continue ;
15346: GO 15316
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
15348: LD_VAR 0 2
15352: PPUSH
15353: LD_INT 3
15355: PUSH
15356: LD_INT 22
15358: PUSH
15359: LD_INT 0
15361: PUSH
15362: EMPTY
15363: LIST
15364: LIST
15365: PUSH
15366: EMPTY
15367: LIST
15368: LIST
15369: PPUSH
15370: CALL_OW 69
15374: PPUSH
15375: LD_VAR 0 2
15379: PPUSH
15380: CALL_OW 74
15384: PPUSH
15385: CALL_OW 115
// end ;
15389: GO 15316
15391: POP
15392: POP
// until not tmp ;
15393: LD_VAR 0 3
15397: NOT
15398: IFFALSE 15299
// end ;
15400: PPOPN 3
15402: END
// every 0 0$1 trigger StreamModeActive and sTroll do
15403: LD_EXP 45
15407: PUSH
15408: LD_EXP 70
15412: AND
15413: IFFALSE 15467
15415: GO 15417
15417: DISABLE
// begin ToLua ( displayTroll(); ) ;
15418: LD_STRING displayTroll();
15420: PPUSH
15421: CALL_OW 559
// wait ( 3 3$00 ) ;
15425: LD_INT 6300
15427: PPUSH
15428: CALL_OW 67
// ToLua ( hideTroll(); ) ;
15432: LD_STRING hideTroll();
15434: PPUSH
15435: CALL_OW 559
// wait ( 1 1$00 ) ;
15439: LD_INT 2100
15441: PPUSH
15442: CALL_OW 67
// ToLua ( displayTroll(); ) ;
15446: LD_STRING displayTroll();
15448: PPUSH
15449: CALL_OW 559
// wait ( 1 1$00 ) ;
15453: LD_INT 2100
15455: PPUSH
15456: CALL_OW 67
// ToLua ( hideTroll(); ) ;
15460: LD_STRING hideTroll();
15462: PPUSH
15463: CALL_OW 559
// end ;
15467: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
15468: LD_EXP 45
15472: PUSH
15473: LD_EXP 71
15477: AND
15478: IFFALSE 15541
15480: GO 15482
15482: DISABLE
15483: LD_INT 0
15485: PPUSH
// begin p := 0 ;
15486: LD_ADDR_VAR 0 1
15490: PUSH
15491: LD_INT 0
15493: ST_TO_ADDR
// repeat game_speed := 1 ;
15494: LD_ADDR_OWVAR 65
15498: PUSH
15499: LD_INT 1
15501: ST_TO_ADDR
// wait ( 0 0$1 ) ;
15502: LD_INT 35
15504: PPUSH
15505: CALL_OW 67
// p := p + 1 ;
15509: LD_ADDR_VAR 0 1
15513: PUSH
15514: LD_VAR 0 1
15518: PUSH
15519: LD_INT 1
15521: PLUS
15522: ST_TO_ADDR
// until p >= 60 ;
15523: LD_VAR 0 1
15527: PUSH
15528: LD_INT 60
15530: GREATEREQUAL
15531: IFFALSE 15494
// game_speed := 4 ;
15533: LD_ADDR_OWVAR 65
15537: PUSH
15538: LD_INT 4
15540: ST_TO_ADDR
// end ;
15541: PPOPN 1
15543: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
15544: LD_EXP 45
15548: PUSH
15549: LD_EXP 72
15553: AND
15554: IFFALSE 15700
15556: GO 15558
15558: DISABLE
15559: LD_INT 0
15561: PPUSH
15562: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15563: LD_ADDR_VAR 0 1
15567: PUSH
15568: LD_INT 22
15570: PUSH
15571: LD_OWVAR 2
15575: PUSH
15576: EMPTY
15577: LIST
15578: LIST
15579: PUSH
15580: LD_INT 2
15582: PUSH
15583: LD_INT 30
15585: PUSH
15586: LD_INT 0
15588: PUSH
15589: EMPTY
15590: LIST
15591: LIST
15592: PUSH
15593: LD_INT 30
15595: PUSH
15596: LD_INT 1
15598: PUSH
15599: EMPTY
15600: LIST
15601: LIST
15602: PUSH
15603: EMPTY
15604: LIST
15605: LIST
15606: LIST
15607: PUSH
15608: EMPTY
15609: LIST
15610: LIST
15611: PPUSH
15612: CALL_OW 69
15616: ST_TO_ADDR
// if not depot then
15617: LD_VAR 0 1
15621: NOT
15622: IFFALSE 15626
// exit ;
15624: GO 15700
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
15626: LD_ADDR_VAR 0 2
15630: PUSH
15631: LD_VAR 0 1
15635: PUSH
15636: LD_INT 1
15638: PPUSH
15639: LD_VAR 0 1
15643: PPUSH
15644: CALL_OW 12
15648: ARRAY
15649: PPUSH
15650: CALL_OW 274
15654: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
15655: LD_VAR 0 2
15659: PPUSH
15660: LD_INT 1
15662: PPUSH
15663: LD_INT 0
15665: PPUSH
15666: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
15670: LD_VAR 0 2
15674: PPUSH
15675: LD_INT 2
15677: PPUSH
15678: LD_INT 0
15680: PPUSH
15681: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
15685: LD_VAR 0 2
15689: PPUSH
15690: LD_INT 3
15692: PPUSH
15693: LD_INT 0
15695: PPUSH
15696: CALL_OW 277
// end ;
15700: PPOPN 2
15702: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
15703: LD_EXP 45
15707: PUSH
15708: LD_EXP 73
15712: AND
15713: IFFALSE 15810
15715: GO 15717
15717: DISABLE
15718: LD_INT 0
15720: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
15721: LD_ADDR_VAR 0 1
15725: PUSH
15726: LD_INT 22
15728: PUSH
15729: LD_OWVAR 2
15733: PUSH
15734: EMPTY
15735: LIST
15736: LIST
15737: PUSH
15738: LD_INT 21
15740: PUSH
15741: LD_INT 1
15743: PUSH
15744: EMPTY
15745: LIST
15746: LIST
15747: PUSH
15748: LD_INT 3
15750: PUSH
15751: LD_INT 23
15753: PUSH
15754: LD_INT 0
15756: PUSH
15757: EMPTY
15758: LIST
15759: LIST
15760: PUSH
15761: EMPTY
15762: LIST
15763: LIST
15764: PUSH
15765: EMPTY
15766: LIST
15767: LIST
15768: LIST
15769: PPUSH
15770: CALL_OW 69
15774: ST_TO_ADDR
// if not tmp then
15775: LD_VAR 0 1
15779: NOT
15780: IFFALSE 15784
// exit ;
15782: GO 15810
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
15784: LD_VAR 0 1
15788: PUSH
15789: LD_INT 1
15791: PPUSH
15792: LD_VAR 0 1
15796: PPUSH
15797: CALL_OW 12
15801: ARRAY
15802: PPUSH
15803: LD_INT 200
15805: PPUSH
15806: CALL_OW 234
// end ;
15810: PPOPN 1
15812: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
15813: LD_EXP 45
15817: PUSH
15818: LD_EXP 74
15822: AND
15823: IFFALSE 15902
15825: GO 15827
15827: DISABLE
15828: LD_INT 0
15830: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
15831: LD_ADDR_VAR 0 1
15835: PUSH
15836: LD_INT 22
15838: PUSH
15839: LD_OWVAR 2
15843: PUSH
15844: EMPTY
15845: LIST
15846: LIST
15847: PUSH
15848: LD_INT 21
15850: PUSH
15851: LD_INT 2
15853: PUSH
15854: EMPTY
15855: LIST
15856: LIST
15857: PUSH
15858: EMPTY
15859: LIST
15860: LIST
15861: PPUSH
15862: CALL_OW 69
15866: ST_TO_ADDR
// if not tmp then
15867: LD_VAR 0 1
15871: NOT
15872: IFFALSE 15876
// exit ;
15874: GO 15902
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
15876: LD_VAR 0 1
15880: PUSH
15881: LD_INT 1
15883: PPUSH
15884: LD_VAR 0 1
15888: PPUSH
15889: CALL_OW 12
15893: ARRAY
15894: PPUSH
15895: LD_INT 60
15897: PPUSH
15898: CALL_OW 234
// end ;
15902: PPOPN 1
15904: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
15905: LD_EXP 45
15909: PUSH
15910: LD_EXP 75
15914: AND
15915: IFFALSE 16014
15917: GO 15919
15919: DISABLE
15920: LD_INT 0
15922: PPUSH
15923: PPUSH
// begin enable ;
15924: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
15925: LD_ADDR_VAR 0 1
15929: PUSH
15930: LD_INT 22
15932: PUSH
15933: LD_OWVAR 2
15937: PUSH
15938: EMPTY
15939: LIST
15940: LIST
15941: PUSH
15942: LD_INT 61
15944: PUSH
15945: EMPTY
15946: LIST
15947: PUSH
15948: LD_INT 33
15950: PUSH
15951: LD_INT 2
15953: PUSH
15954: EMPTY
15955: LIST
15956: LIST
15957: PUSH
15958: EMPTY
15959: LIST
15960: LIST
15961: LIST
15962: PPUSH
15963: CALL_OW 69
15967: ST_TO_ADDR
// if not tmp then
15968: LD_VAR 0 1
15972: NOT
15973: IFFALSE 15977
// exit ;
15975: GO 16014
// for i in tmp do
15977: LD_ADDR_VAR 0 2
15981: PUSH
15982: LD_VAR 0 1
15986: PUSH
15987: FOR_IN
15988: IFFALSE 16012
// if IsControledBy ( i ) then
15990: LD_VAR 0 2
15994: PPUSH
15995: CALL_OW 312
15999: IFFALSE 16010
// ComUnlink ( i ) ;
16001: LD_VAR 0 2
16005: PPUSH
16006: CALL_OW 136
16010: GO 15987
16012: POP
16013: POP
// end ;
16014: PPOPN 2
16016: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
16017: LD_EXP 45
16021: PUSH
16022: LD_EXP 76
16026: AND
16027: IFFALSE 16167
16029: GO 16031
16031: DISABLE
16032: LD_INT 0
16034: PPUSH
16035: PPUSH
// begin ToLua ( displayPowell(); ) ;
16036: LD_STRING displayPowell();
16038: PPUSH
16039: CALL_OW 559
// uc_side := 0 ;
16043: LD_ADDR_OWVAR 20
16047: PUSH
16048: LD_INT 0
16050: ST_TO_ADDR
// uc_nation := 2 ;
16051: LD_ADDR_OWVAR 21
16055: PUSH
16056: LD_INT 2
16058: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
16059: LD_ADDR_OWVAR 37
16063: PUSH
16064: LD_INT 14
16066: ST_TO_ADDR
// vc_engine := engine_siberite ;
16067: LD_ADDR_OWVAR 39
16071: PUSH
16072: LD_INT 3
16074: ST_TO_ADDR
// vc_control := control_apeman ;
16075: LD_ADDR_OWVAR 38
16079: PUSH
16080: LD_INT 5
16082: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
16083: LD_ADDR_OWVAR 40
16087: PUSH
16088: LD_INT 29
16090: ST_TO_ADDR
// un := CreateVehicle ;
16091: LD_ADDR_VAR 0 2
16095: PUSH
16096: CALL_OW 45
16100: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
16101: LD_VAR 0 2
16105: PPUSH
16106: LD_INT 1
16108: PPUSH
16109: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
16113: LD_INT 35
16115: PPUSH
16116: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
16120: LD_VAR 0 2
16124: PPUSH
16125: LD_INT 22
16127: PUSH
16128: LD_OWVAR 2
16132: PUSH
16133: EMPTY
16134: LIST
16135: LIST
16136: PPUSH
16137: CALL_OW 69
16141: PPUSH
16142: LD_VAR 0 2
16146: PPUSH
16147: CALL_OW 74
16151: PPUSH
16152: CALL_OW 115
// until IsDead ( un ) ;
16156: LD_VAR 0 2
16160: PPUSH
16161: CALL_OW 301
16165: IFFALSE 16113
// end ;
16167: PPOPN 2
16169: END
// every 0 0$1 trigger StreamModeActive and sStu do
16170: LD_EXP 45
16174: PUSH
16175: LD_EXP 84
16179: AND
16180: IFFALSE 16196
16182: GO 16184
16184: DISABLE
// begin ToLua ( displayStucuk(); ) ;
16185: LD_STRING displayStucuk();
16187: PPUSH
16188: CALL_OW 559
// ResetFog ;
16192: CALL_OW 335
// end ;
16196: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
16197: LD_EXP 45
16201: PUSH
16202: LD_EXP 77
16206: AND
16207: IFFALSE 16348
16209: GO 16211
16211: DISABLE
16212: LD_INT 0
16214: PPUSH
16215: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
16216: LD_ADDR_VAR 0 2
16220: PUSH
16221: LD_INT 22
16223: PUSH
16224: LD_OWVAR 2
16228: PUSH
16229: EMPTY
16230: LIST
16231: LIST
16232: PUSH
16233: LD_INT 21
16235: PUSH
16236: LD_INT 1
16238: PUSH
16239: EMPTY
16240: LIST
16241: LIST
16242: PUSH
16243: EMPTY
16244: LIST
16245: LIST
16246: PPUSH
16247: CALL_OW 69
16251: ST_TO_ADDR
// if not tmp then
16252: LD_VAR 0 2
16256: NOT
16257: IFFALSE 16261
// exit ;
16259: GO 16348
// un := tmp [ rand ( 1 , tmp ) ] ;
16261: LD_ADDR_VAR 0 1
16265: PUSH
16266: LD_VAR 0 2
16270: PUSH
16271: LD_INT 1
16273: PPUSH
16274: LD_VAR 0 2
16278: PPUSH
16279: CALL_OW 12
16283: ARRAY
16284: ST_TO_ADDR
// SetSide ( un , 0 ) ;
16285: LD_VAR 0 1
16289: PPUSH
16290: LD_INT 0
16292: PPUSH
16293: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
16297: LD_VAR 0 1
16301: PPUSH
16302: LD_OWVAR 3
16306: PUSH
16307: LD_VAR 0 1
16311: DIFF
16312: PPUSH
16313: LD_VAR 0 1
16317: PPUSH
16318: CALL_OW 74
16322: PPUSH
16323: CALL_OW 115
// wait ( 0 0$20 ) ;
16327: LD_INT 700
16329: PPUSH
16330: CALL_OW 67
// SetSide ( un , your_side ) ;
16334: LD_VAR 0 1
16338: PPUSH
16339: LD_OWVAR 2
16343: PPUSH
16344: CALL_OW 235
// end ;
16348: PPOPN 2
16350: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
16351: LD_EXP 45
16355: PUSH
16356: LD_EXP 78
16360: AND
16361: IFFALSE 16467
16363: GO 16365
16365: DISABLE
16366: LD_INT 0
16368: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
16369: LD_ADDR_VAR 0 1
16373: PUSH
16374: LD_INT 22
16376: PUSH
16377: LD_OWVAR 2
16381: PUSH
16382: EMPTY
16383: LIST
16384: LIST
16385: PUSH
16386: LD_INT 2
16388: PUSH
16389: LD_INT 30
16391: PUSH
16392: LD_INT 0
16394: PUSH
16395: EMPTY
16396: LIST
16397: LIST
16398: PUSH
16399: LD_INT 30
16401: PUSH
16402: LD_INT 1
16404: PUSH
16405: EMPTY
16406: LIST
16407: LIST
16408: PUSH
16409: EMPTY
16410: LIST
16411: LIST
16412: LIST
16413: PUSH
16414: EMPTY
16415: LIST
16416: LIST
16417: PPUSH
16418: CALL_OW 69
16422: ST_TO_ADDR
// if not depot then
16423: LD_VAR 0 1
16427: NOT
16428: IFFALSE 16432
// exit ;
16430: GO 16467
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
16432: LD_VAR 0 1
16436: PUSH
16437: LD_INT 1
16439: ARRAY
16440: PPUSH
16441: CALL_OW 250
16445: PPUSH
16446: LD_VAR 0 1
16450: PUSH
16451: LD_INT 1
16453: ARRAY
16454: PPUSH
16455: CALL_OW 251
16459: PPUSH
16460: LD_INT 70
16462: PPUSH
16463: CALL_OW 495
// end ;
16467: PPOPN 1
16469: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
16470: LD_EXP 45
16474: PUSH
16475: LD_EXP 79
16479: AND
16480: IFFALSE 16691
16482: GO 16484
16484: DISABLE
16485: LD_INT 0
16487: PPUSH
16488: PPUSH
16489: PPUSH
16490: PPUSH
16491: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
16492: LD_ADDR_VAR 0 5
16496: PUSH
16497: LD_INT 22
16499: PUSH
16500: LD_OWVAR 2
16504: PUSH
16505: EMPTY
16506: LIST
16507: LIST
16508: PUSH
16509: LD_INT 21
16511: PUSH
16512: LD_INT 1
16514: PUSH
16515: EMPTY
16516: LIST
16517: LIST
16518: PUSH
16519: EMPTY
16520: LIST
16521: LIST
16522: PPUSH
16523: CALL_OW 69
16527: ST_TO_ADDR
// if not tmp then
16528: LD_VAR 0 5
16532: NOT
16533: IFFALSE 16537
// exit ;
16535: GO 16691
// for i in tmp do
16537: LD_ADDR_VAR 0 1
16541: PUSH
16542: LD_VAR 0 5
16546: PUSH
16547: FOR_IN
16548: IFFALSE 16689
// begin d := rand ( 0 , 5 ) ;
16550: LD_ADDR_VAR 0 4
16554: PUSH
16555: LD_INT 0
16557: PPUSH
16558: LD_INT 5
16560: PPUSH
16561: CALL_OW 12
16565: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
16566: LD_ADDR_VAR 0 2
16570: PUSH
16571: LD_VAR 0 1
16575: PPUSH
16576: CALL_OW 250
16580: PPUSH
16581: LD_VAR 0 4
16585: PPUSH
16586: LD_INT 3
16588: PPUSH
16589: LD_INT 12
16591: PPUSH
16592: CALL_OW 12
16596: PPUSH
16597: CALL_OW 272
16601: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
16602: LD_ADDR_VAR 0 3
16606: PUSH
16607: LD_VAR 0 1
16611: PPUSH
16612: CALL_OW 251
16616: PPUSH
16617: LD_VAR 0 4
16621: PPUSH
16622: LD_INT 3
16624: PPUSH
16625: LD_INT 12
16627: PPUSH
16628: CALL_OW 12
16632: PPUSH
16633: CALL_OW 273
16637: ST_TO_ADDR
// if ValidHex ( x , y ) then
16638: LD_VAR 0 2
16642: PPUSH
16643: LD_VAR 0 3
16647: PPUSH
16648: CALL_OW 488
16652: IFFALSE 16687
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
16654: LD_VAR 0 1
16658: PPUSH
16659: LD_VAR 0 2
16663: PPUSH
16664: LD_VAR 0 3
16668: PPUSH
16669: LD_INT 3
16671: PPUSH
16672: LD_INT 6
16674: PPUSH
16675: CALL_OW 12
16679: PPUSH
16680: LD_INT 1
16682: PPUSH
16683: CALL_OW 483
// end ;
16687: GO 16547
16689: POP
16690: POP
// end ;
16691: PPOPN 5
16693: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
16694: LD_EXP 45
16698: PUSH
16699: LD_EXP 80
16703: AND
16704: IFFALSE 16798
16706: GO 16708
16708: DISABLE
16709: LD_INT 0
16711: PPUSH
16712: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
16713: LD_ADDR_VAR 0 2
16717: PUSH
16718: LD_INT 22
16720: PUSH
16721: LD_OWVAR 2
16725: PUSH
16726: EMPTY
16727: LIST
16728: LIST
16729: PUSH
16730: LD_INT 32
16732: PUSH
16733: LD_INT 1
16735: PUSH
16736: EMPTY
16737: LIST
16738: LIST
16739: PUSH
16740: LD_INT 21
16742: PUSH
16743: LD_INT 2
16745: PUSH
16746: EMPTY
16747: LIST
16748: LIST
16749: PUSH
16750: EMPTY
16751: LIST
16752: LIST
16753: LIST
16754: PPUSH
16755: CALL_OW 69
16759: ST_TO_ADDR
// if not tmp then
16760: LD_VAR 0 2
16764: NOT
16765: IFFALSE 16769
// exit ;
16767: GO 16798
// for i in tmp do
16769: LD_ADDR_VAR 0 1
16773: PUSH
16774: LD_VAR 0 2
16778: PUSH
16779: FOR_IN
16780: IFFALSE 16796
// SetFuel ( i , 0 ) ;
16782: LD_VAR 0 1
16786: PPUSH
16787: LD_INT 0
16789: PPUSH
16790: CALL_OW 240
16794: GO 16779
16796: POP
16797: POP
// end ;
16798: PPOPN 2
16800: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
16801: LD_EXP 45
16805: PUSH
16806: LD_EXP 81
16810: AND
16811: IFFALSE 16877
16813: GO 16815
16815: DISABLE
16816: LD_INT 0
16818: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
16819: LD_ADDR_VAR 0 1
16823: PUSH
16824: LD_INT 22
16826: PUSH
16827: LD_OWVAR 2
16831: PUSH
16832: EMPTY
16833: LIST
16834: LIST
16835: PUSH
16836: LD_INT 30
16838: PUSH
16839: LD_INT 29
16841: PUSH
16842: EMPTY
16843: LIST
16844: LIST
16845: PUSH
16846: EMPTY
16847: LIST
16848: LIST
16849: PPUSH
16850: CALL_OW 69
16854: ST_TO_ADDR
// if not tmp then
16855: LD_VAR 0 1
16859: NOT
16860: IFFALSE 16864
// exit ;
16862: GO 16877
// DestroyUnit ( tmp [ 1 ] ) ;
16864: LD_VAR 0 1
16868: PUSH
16869: LD_INT 1
16871: ARRAY
16872: PPUSH
16873: CALL_OW 65
// end ;
16877: PPOPN 1
16879: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
16880: LD_EXP 45
16884: PUSH
16885: LD_EXP 83
16889: AND
16890: IFFALSE 17019
16892: GO 16894
16894: DISABLE
16895: LD_INT 0
16897: PPUSH
// begin uc_side := 0 ;
16898: LD_ADDR_OWVAR 20
16902: PUSH
16903: LD_INT 0
16905: ST_TO_ADDR
// uc_nation := nation_arabian ;
16906: LD_ADDR_OWVAR 21
16910: PUSH
16911: LD_INT 2
16913: ST_TO_ADDR
// hc_gallery :=  ;
16914: LD_ADDR_OWVAR 33
16918: PUSH
16919: LD_STRING 
16921: ST_TO_ADDR
// hc_name :=  ;
16922: LD_ADDR_OWVAR 26
16926: PUSH
16927: LD_STRING 
16929: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
16930: LD_INT 1
16932: PPUSH
16933: LD_INT 11
16935: PPUSH
16936: LD_INT 10
16938: PPUSH
16939: CALL_OW 380
// un := CreateHuman ;
16943: LD_ADDR_VAR 0 1
16947: PUSH
16948: CALL_OW 44
16952: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
16953: LD_VAR 0 1
16957: PPUSH
16958: LD_INT 1
16960: PPUSH
16961: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
16965: LD_INT 35
16967: PPUSH
16968: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
16972: LD_VAR 0 1
16976: PPUSH
16977: LD_INT 22
16979: PUSH
16980: LD_OWVAR 2
16984: PUSH
16985: EMPTY
16986: LIST
16987: LIST
16988: PPUSH
16989: CALL_OW 69
16993: PPUSH
16994: LD_VAR 0 1
16998: PPUSH
16999: CALL_OW 74
17003: PPUSH
17004: CALL_OW 115
// until IsDead ( un ) ;
17008: LD_VAR 0 1
17012: PPUSH
17013: CALL_OW 301
17017: IFFALSE 16965
// end ;
17019: PPOPN 1
17021: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
17022: LD_EXP 45
17026: PUSH
17027: LD_EXP 85
17031: AND
17032: IFFALSE 17044
17034: GO 17036
17036: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
17037: LD_STRING earthquake(getX(game), 0, 32)
17039: PPUSH
17040: CALL_OW 559
17044: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
17045: LD_EXP 45
17049: PUSH
17050: LD_EXP 86
17054: AND
17055: IFFALSE 17146
17057: GO 17059
17059: DISABLE
17060: LD_INT 0
17062: PPUSH
// begin enable ;
17063: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
17064: LD_ADDR_VAR 0 1
17068: PUSH
17069: LD_INT 22
17071: PUSH
17072: LD_OWVAR 2
17076: PUSH
17077: EMPTY
17078: LIST
17079: LIST
17080: PUSH
17081: LD_INT 21
17083: PUSH
17084: LD_INT 2
17086: PUSH
17087: EMPTY
17088: LIST
17089: LIST
17090: PUSH
17091: LD_INT 33
17093: PUSH
17094: LD_INT 3
17096: PUSH
17097: EMPTY
17098: LIST
17099: LIST
17100: PUSH
17101: EMPTY
17102: LIST
17103: LIST
17104: LIST
17105: PPUSH
17106: CALL_OW 69
17110: ST_TO_ADDR
// if not tmp then
17111: LD_VAR 0 1
17115: NOT
17116: IFFALSE 17120
// exit ;
17118: GO 17146
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
17120: LD_VAR 0 1
17124: PUSH
17125: LD_INT 1
17127: PPUSH
17128: LD_VAR 0 1
17132: PPUSH
17133: CALL_OW 12
17137: ARRAY
17138: PPUSH
17139: LD_INT 1
17141: PPUSH
17142: CALL_OW 234
// end ;
17146: PPOPN 1
17148: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
17149: LD_EXP 45
17153: PUSH
17154: LD_EXP 87
17158: AND
17159: IFFALSE 17300
17161: GO 17163
17163: DISABLE
17164: LD_INT 0
17166: PPUSH
17167: PPUSH
17168: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17169: LD_ADDR_VAR 0 3
17173: PUSH
17174: LD_INT 22
17176: PUSH
17177: LD_OWVAR 2
17181: PUSH
17182: EMPTY
17183: LIST
17184: LIST
17185: PUSH
17186: LD_INT 25
17188: PUSH
17189: LD_INT 1
17191: PUSH
17192: EMPTY
17193: LIST
17194: LIST
17195: PUSH
17196: EMPTY
17197: LIST
17198: LIST
17199: PPUSH
17200: CALL_OW 69
17204: ST_TO_ADDR
// if not tmp then
17205: LD_VAR 0 3
17209: NOT
17210: IFFALSE 17214
// exit ;
17212: GO 17300
// un := tmp [ rand ( 1 , tmp ) ] ;
17214: LD_ADDR_VAR 0 2
17218: PUSH
17219: LD_VAR 0 3
17223: PUSH
17224: LD_INT 1
17226: PPUSH
17227: LD_VAR 0 3
17231: PPUSH
17232: CALL_OW 12
17236: ARRAY
17237: ST_TO_ADDR
// if Crawls ( un ) then
17238: LD_VAR 0 2
17242: PPUSH
17243: CALL_OW 318
17247: IFFALSE 17258
// ComWalk ( un ) ;
17249: LD_VAR 0 2
17253: PPUSH
17254: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
17258: LD_VAR 0 2
17262: PPUSH
17263: LD_INT 9
17265: PPUSH
17266: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
17270: LD_INT 28
17272: PPUSH
17273: LD_OWVAR 2
17277: PPUSH
17278: LD_INT 2
17280: PPUSH
17281: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
17285: LD_INT 29
17287: PPUSH
17288: LD_OWVAR 2
17292: PPUSH
17293: LD_INT 2
17295: PPUSH
17296: CALL_OW 322
// end ;
17300: PPOPN 3
17302: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
17303: LD_EXP 45
17307: PUSH
17308: LD_EXP 88
17312: AND
17313: IFFALSE 17424
17315: GO 17317
17317: DISABLE
17318: LD_INT 0
17320: PPUSH
17321: PPUSH
17322: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17323: LD_ADDR_VAR 0 3
17327: PUSH
17328: LD_INT 22
17330: PUSH
17331: LD_OWVAR 2
17335: PUSH
17336: EMPTY
17337: LIST
17338: LIST
17339: PUSH
17340: LD_INT 25
17342: PUSH
17343: LD_INT 1
17345: PUSH
17346: EMPTY
17347: LIST
17348: LIST
17349: PUSH
17350: EMPTY
17351: LIST
17352: LIST
17353: PPUSH
17354: CALL_OW 69
17358: ST_TO_ADDR
// if not tmp then
17359: LD_VAR 0 3
17363: NOT
17364: IFFALSE 17368
// exit ;
17366: GO 17424
// un := tmp [ rand ( 1 , tmp ) ] ;
17368: LD_ADDR_VAR 0 2
17372: PUSH
17373: LD_VAR 0 3
17377: PUSH
17378: LD_INT 1
17380: PPUSH
17381: LD_VAR 0 3
17385: PPUSH
17386: CALL_OW 12
17390: ARRAY
17391: ST_TO_ADDR
// if Crawls ( un ) then
17392: LD_VAR 0 2
17396: PPUSH
17397: CALL_OW 318
17401: IFFALSE 17412
// ComWalk ( un ) ;
17403: LD_VAR 0 2
17407: PPUSH
17408: CALL_OW 138
// SetClass ( un , class_mortar ) ;
17412: LD_VAR 0 2
17416: PPUSH
17417: LD_INT 8
17419: PPUSH
17420: CALL_OW 336
// end ;
17424: PPOPN 3
17426: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
17427: LD_EXP 45
17431: PUSH
17432: LD_EXP 89
17436: AND
17437: IFFALSE 17581
17439: GO 17441
17441: DISABLE
17442: LD_INT 0
17444: PPUSH
17445: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
17446: LD_ADDR_VAR 0 2
17450: PUSH
17451: LD_INT 22
17453: PUSH
17454: LD_OWVAR 2
17458: PUSH
17459: EMPTY
17460: LIST
17461: LIST
17462: PUSH
17463: LD_INT 21
17465: PUSH
17466: LD_INT 2
17468: PUSH
17469: EMPTY
17470: LIST
17471: LIST
17472: PUSH
17473: LD_INT 2
17475: PUSH
17476: LD_INT 34
17478: PUSH
17479: LD_INT 12
17481: PUSH
17482: EMPTY
17483: LIST
17484: LIST
17485: PUSH
17486: LD_INT 34
17488: PUSH
17489: LD_INT 51
17491: PUSH
17492: EMPTY
17493: LIST
17494: LIST
17495: PUSH
17496: LD_INT 34
17498: PUSH
17499: LD_INT 32
17501: PUSH
17502: EMPTY
17503: LIST
17504: LIST
17505: PUSH
17506: EMPTY
17507: LIST
17508: LIST
17509: LIST
17510: LIST
17511: PUSH
17512: EMPTY
17513: LIST
17514: LIST
17515: LIST
17516: PPUSH
17517: CALL_OW 69
17521: ST_TO_ADDR
// if not tmp then
17522: LD_VAR 0 2
17526: NOT
17527: IFFALSE 17531
// exit ;
17529: GO 17581
// for i in tmp do
17531: LD_ADDR_VAR 0 1
17535: PUSH
17536: LD_VAR 0 2
17540: PUSH
17541: FOR_IN
17542: IFFALSE 17579
// if GetCargo ( i , mat_artifact ) = 0 then
17544: LD_VAR 0 1
17548: PPUSH
17549: LD_INT 4
17551: PPUSH
17552: CALL_OW 289
17556: PUSH
17557: LD_INT 0
17559: EQUAL
17560: IFFALSE 17577
// SetCargo ( i , mat_siberit , 100 ) ;
17562: LD_VAR 0 1
17566: PPUSH
17567: LD_INT 3
17569: PPUSH
17570: LD_INT 100
17572: PPUSH
17573: CALL_OW 290
17577: GO 17541
17579: POP
17580: POP
// end ;
17581: PPOPN 2
17583: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
17584: LD_EXP 45
17588: PUSH
17589: LD_EXP 90
17593: AND
17594: IFFALSE 17777
17596: GO 17598
17598: DISABLE
17599: LD_INT 0
17601: PPUSH
17602: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
17603: LD_ADDR_VAR 0 2
17607: PUSH
17608: LD_INT 22
17610: PUSH
17611: LD_OWVAR 2
17615: PUSH
17616: EMPTY
17617: LIST
17618: LIST
17619: PPUSH
17620: CALL_OW 69
17624: ST_TO_ADDR
// if not tmp then
17625: LD_VAR 0 2
17629: NOT
17630: IFFALSE 17634
// exit ;
17632: GO 17777
// for i := 1 to 2 do
17634: LD_ADDR_VAR 0 1
17638: PUSH
17639: DOUBLE
17640: LD_INT 1
17642: DEC
17643: ST_TO_ADDR
17644: LD_INT 2
17646: PUSH
17647: FOR_TO
17648: IFFALSE 17775
// begin uc_side := your_side ;
17650: LD_ADDR_OWVAR 20
17654: PUSH
17655: LD_OWVAR 2
17659: ST_TO_ADDR
// uc_nation := nation_american ;
17660: LD_ADDR_OWVAR 21
17664: PUSH
17665: LD_INT 1
17667: ST_TO_ADDR
// vc_chassis := us_morphling ;
17668: LD_ADDR_OWVAR 37
17672: PUSH
17673: LD_INT 5
17675: ST_TO_ADDR
// vc_engine := engine_siberite ;
17676: LD_ADDR_OWVAR 39
17680: PUSH
17681: LD_INT 3
17683: ST_TO_ADDR
// vc_control := control_computer ;
17684: LD_ADDR_OWVAR 38
17688: PUSH
17689: LD_INT 3
17691: ST_TO_ADDR
// vc_weapon := us_double_laser ;
17692: LD_ADDR_OWVAR 40
17696: PUSH
17697: LD_INT 10
17699: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
17700: LD_VAR 0 2
17704: PUSH
17705: LD_INT 1
17707: ARRAY
17708: PPUSH
17709: CALL_OW 310
17713: NOT
17714: IFFALSE 17761
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
17716: CALL_OW 45
17720: PPUSH
17721: LD_VAR 0 2
17725: PUSH
17726: LD_INT 1
17728: ARRAY
17729: PPUSH
17730: CALL_OW 250
17734: PPUSH
17735: LD_VAR 0 2
17739: PUSH
17740: LD_INT 1
17742: ARRAY
17743: PPUSH
17744: CALL_OW 251
17748: PPUSH
17749: LD_INT 12
17751: PPUSH
17752: LD_INT 1
17754: PPUSH
17755: CALL_OW 50
17759: GO 17773
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
17761: CALL_OW 45
17765: PPUSH
17766: LD_INT 1
17768: PPUSH
17769: CALL_OW 51
// end ;
17773: GO 17647
17775: POP
17776: POP
// end ;
17777: PPOPN 2
17779: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
17780: LD_EXP 45
17784: PUSH
17785: LD_EXP 91
17789: AND
17790: IFFALSE 18012
17792: GO 17794
17794: DISABLE
17795: LD_INT 0
17797: PPUSH
17798: PPUSH
17799: PPUSH
17800: PPUSH
17801: PPUSH
17802: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
17803: LD_ADDR_VAR 0 6
17807: PUSH
17808: LD_INT 22
17810: PUSH
17811: LD_OWVAR 2
17815: PUSH
17816: EMPTY
17817: LIST
17818: LIST
17819: PUSH
17820: LD_INT 21
17822: PUSH
17823: LD_INT 1
17825: PUSH
17826: EMPTY
17827: LIST
17828: LIST
17829: PUSH
17830: LD_INT 3
17832: PUSH
17833: LD_INT 23
17835: PUSH
17836: LD_INT 0
17838: PUSH
17839: EMPTY
17840: LIST
17841: LIST
17842: PUSH
17843: EMPTY
17844: LIST
17845: LIST
17846: PUSH
17847: EMPTY
17848: LIST
17849: LIST
17850: LIST
17851: PPUSH
17852: CALL_OW 69
17856: ST_TO_ADDR
// if not tmp then
17857: LD_VAR 0 6
17861: NOT
17862: IFFALSE 17866
// exit ;
17864: GO 18012
// s1 := rand ( 1 , 4 ) ;
17866: LD_ADDR_VAR 0 2
17870: PUSH
17871: LD_INT 1
17873: PPUSH
17874: LD_INT 4
17876: PPUSH
17877: CALL_OW 12
17881: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
17882: LD_ADDR_VAR 0 4
17886: PUSH
17887: LD_VAR 0 6
17891: PUSH
17892: LD_INT 1
17894: ARRAY
17895: PPUSH
17896: LD_VAR 0 2
17900: PPUSH
17901: CALL_OW 259
17905: ST_TO_ADDR
// if s1 = 1 then
17906: LD_VAR 0 2
17910: PUSH
17911: LD_INT 1
17913: EQUAL
17914: IFFALSE 17934
// s2 := rand ( 2 , 4 ) else
17916: LD_ADDR_VAR 0 3
17920: PUSH
17921: LD_INT 2
17923: PPUSH
17924: LD_INT 4
17926: PPUSH
17927: CALL_OW 12
17931: ST_TO_ADDR
17932: GO 17942
// s2 := 1 ;
17934: LD_ADDR_VAR 0 3
17938: PUSH
17939: LD_INT 1
17941: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
17942: LD_ADDR_VAR 0 5
17946: PUSH
17947: LD_VAR 0 6
17951: PUSH
17952: LD_INT 1
17954: ARRAY
17955: PPUSH
17956: LD_VAR 0 3
17960: PPUSH
17961: CALL_OW 259
17965: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
17966: LD_VAR 0 6
17970: PUSH
17971: LD_INT 1
17973: ARRAY
17974: PPUSH
17975: LD_VAR 0 2
17979: PPUSH
17980: LD_VAR 0 5
17984: PPUSH
17985: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
17989: LD_VAR 0 6
17993: PUSH
17994: LD_INT 1
17996: ARRAY
17997: PPUSH
17998: LD_VAR 0 3
18002: PPUSH
18003: LD_VAR 0 4
18007: PPUSH
18008: CALL_OW 237
// end ;
18012: PPOPN 6
18014: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
18015: LD_EXP 45
18019: PUSH
18020: LD_EXP 92
18024: AND
18025: IFFALSE 18104
18027: GO 18029
18029: DISABLE
18030: LD_INT 0
18032: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
18033: LD_ADDR_VAR 0 1
18037: PUSH
18038: LD_INT 22
18040: PUSH
18041: LD_OWVAR 2
18045: PUSH
18046: EMPTY
18047: LIST
18048: LIST
18049: PUSH
18050: LD_INT 30
18052: PUSH
18053: LD_INT 3
18055: PUSH
18056: EMPTY
18057: LIST
18058: LIST
18059: PUSH
18060: EMPTY
18061: LIST
18062: LIST
18063: PPUSH
18064: CALL_OW 69
18068: ST_TO_ADDR
// if not tmp then
18069: LD_VAR 0 1
18073: NOT
18074: IFFALSE 18078
// exit ;
18076: GO 18104
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
18078: LD_VAR 0 1
18082: PUSH
18083: LD_INT 1
18085: PPUSH
18086: LD_VAR 0 1
18090: PPUSH
18091: CALL_OW 12
18095: ARRAY
18096: PPUSH
18097: LD_INT 1
18099: PPUSH
18100: CALL_OW 234
// end ;
18104: PPOPN 1
18106: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
18107: LD_EXP 45
18111: PUSH
18112: LD_EXP 93
18116: AND
18117: IFFALSE 18229
18119: GO 18121
18121: DISABLE
18122: LD_INT 0
18124: PPUSH
18125: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
18126: LD_ADDR_VAR 0 2
18130: PUSH
18131: LD_INT 22
18133: PUSH
18134: LD_OWVAR 2
18138: PUSH
18139: EMPTY
18140: LIST
18141: LIST
18142: PUSH
18143: LD_INT 2
18145: PUSH
18146: LD_INT 30
18148: PUSH
18149: LD_INT 27
18151: PUSH
18152: EMPTY
18153: LIST
18154: LIST
18155: PUSH
18156: LD_INT 30
18158: PUSH
18159: LD_INT 26
18161: PUSH
18162: EMPTY
18163: LIST
18164: LIST
18165: PUSH
18166: LD_INT 30
18168: PUSH
18169: LD_INT 28
18171: PUSH
18172: EMPTY
18173: LIST
18174: LIST
18175: PUSH
18176: EMPTY
18177: LIST
18178: LIST
18179: LIST
18180: LIST
18181: PUSH
18182: EMPTY
18183: LIST
18184: LIST
18185: PPUSH
18186: CALL_OW 69
18190: ST_TO_ADDR
// if not tmp then
18191: LD_VAR 0 2
18195: NOT
18196: IFFALSE 18200
// exit ;
18198: GO 18229
// for i in tmp do
18200: LD_ADDR_VAR 0 1
18204: PUSH
18205: LD_VAR 0 2
18209: PUSH
18210: FOR_IN
18211: IFFALSE 18227
// SetLives ( i , 1 ) ;
18213: LD_VAR 0 1
18217: PPUSH
18218: LD_INT 1
18220: PPUSH
18221: CALL_OW 234
18225: GO 18210
18227: POP
18228: POP
// end ;
18229: PPOPN 2
18231: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
18232: LD_EXP 45
18236: PUSH
18237: LD_EXP 94
18241: AND
18242: IFFALSE 18516
18244: GO 18246
18246: DISABLE
18247: LD_INT 0
18249: PPUSH
18250: PPUSH
18251: PPUSH
// begin i := rand ( 1 , 7 ) ;
18252: LD_ADDR_VAR 0 1
18256: PUSH
18257: LD_INT 1
18259: PPUSH
18260: LD_INT 7
18262: PPUSH
18263: CALL_OW 12
18267: ST_TO_ADDR
// case i of 1 :
18268: LD_VAR 0 1
18272: PUSH
18273: LD_INT 1
18275: DOUBLE
18276: EQUAL
18277: IFTRUE 18281
18279: GO 18291
18281: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
18282: LD_STRING earthquake(getX(game), 0, 32)
18284: PPUSH
18285: CALL_OW 559
18289: GO 18516
18291: LD_INT 2
18293: DOUBLE
18294: EQUAL
18295: IFTRUE 18299
18297: GO 18313
18299: POP
// begin ToLua ( displayStucuk(); ) ;
18300: LD_STRING displayStucuk();
18302: PPUSH
18303: CALL_OW 559
// ResetFog ;
18307: CALL_OW 335
// end ; 3 :
18311: GO 18516
18313: LD_INT 3
18315: DOUBLE
18316: EQUAL
18317: IFTRUE 18321
18319: GO 18425
18321: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18322: LD_ADDR_VAR 0 2
18326: PUSH
18327: LD_INT 22
18329: PUSH
18330: LD_OWVAR 2
18334: PUSH
18335: EMPTY
18336: LIST
18337: LIST
18338: PUSH
18339: LD_INT 25
18341: PUSH
18342: LD_INT 1
18344: PUSH
18345: EMPTY
18346: LIST
18347: LIST
18348: PUSH
18349: EMPTY
18350: LIST
18351: LIST
18352: PPUSH
18353: CALL_OW 69
18357: ST_TO_ADDR
// if not tmp then
18358: LD_VAR 0 2
18362: NOT
18363: IFFALSE 18367
// exit ;
18365: GO 18516
// un := tmp [ rand ( 1 , tmp ) ] ;
18367: LD_ADDR_VAR 0 3
18371: PUSH
18372: LD_VAR 0 2
18376: PUSH
18377: LD_INT 1
18379: PPUSH
18380: LD_VAR 0 2
18384: PPUSH
18385: CALL_OW 12
18389: ARRAY
18390: ST_TO_ADDR
// if Crawls ( un ) then
18391: LD_VAR 0 3
18395: PPUSH
18396: CALL_OW 318
18400: IFFALSE 18411
// ComWalk ( un ) ;
18402: LD_VAR 0 3
18406: PPUSH
18407: CALL_OW 138
// SetClass ( un , class_mortar ) ;
18411: LD_VAR 0 3
18415: PPUSH
18416: LD_INT 8
18418: PPUSH
18419: CALL_OW 336
// end ; 4 :
18423: GO 18516
18425: LD_INT 4
18427: DOUBLE
18428: EQUAL
18429: IFTRUE 18433
18431: GO 18494
18433: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
18434: LD_ADDR_VAR 0 2
18438: PUSH
18439: LD_INT 22
18441: PUSH
18442: LD_OWVAR 2
18446: PUSH
18447: EMPTY
18448: LIST
18449: LIST
18450: PUSH
18451: LD_INT 30
18453: PUSH
18454: LD_INT 29
18456: PUSH
18457: EMPTY
18458: LIST
18459: LIST
18460: PUSH
18461: EMPTY
18462: LIST
18463: LIST
18464: PPUSH
18465: CALL_OW 69
18469: ST_TO_ADDR
// if not tmp then
18470: LD_VAR 0 2
18474: NOT
18475: IFFALSE 18479
// exit ;
18477: GO 18516
// DestroyUnit ( tmp [ 1 ] ) ;
18479: LD_VAR 0 2
18483: PUSH
18484: LD_INT 1
18486: ARRAY
18487: PPUSH
18488: CALL_OW 65
// end ; 5 .. 7 :
18492: GO 18516
18494: LD_INT 5
18496: DOUBLE
18497: GREATEREQUAL
18498: IFFALSE 18506
18500: LD_INT 7
18502: DOUBLE
18503: LESSEQUAL
18504: IFTRUE 18508
18506: GO 18515
18508: POP
// StreamSibBomb ; end ;
18509: CALL 14766 0 0
18513: GO 18516
18515: POP
// end ;
18516: PPOPN 3
18518: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
18519: LD_EXP 45
18523: PUSH
18524: LD_EXP 95
18528: AND
18529: IFFALSE 18685
18531: GO 18533
18533: DISABLE
18534: LD_INT 0
18536: PPUSH
18537: PPUSH
18538: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
18539: LD_ADDR_VAR 0 2
18543: PUSH
18544: LD_INT 81
18546: PUSH
18547: LD_OWVAR 2
18551: PUSH
18552: EMPTY
18553: LIST
18554: LIST
18555: PUSH
18556: LD_INT 2
18558: PUSH
18559: LD_INT 21
18561: PUSH
18562: LD_INT 1
18564: PUSH
18565: EMPTY
18566: LIST
18567: LIST
18568: PUSH
18569: LD_INT 21
18571: PUSH
18572: LD_INT 2
18574: PUSH
18575: EMPTY
18576: LIST
18577: LIST
18578: PUSH
18579: EMPTY
18580: LIST
18581: LIST
18582: LIST
18583: PUSH
18584: EMPTY
18585: LIST
18586: LIST
18587: PPUSH
18588: CALL_OW 69
18592: ST_TO_ADDR
// if not tmp then
18593: LD_VAR 0 2
18597: NOT
18598: IFFALSE 18602
// exit ;
18600: GO 18685
// p := 0 ;
18602: LD_ADDR_VAR 0 3
18606: PUSH
18607: LD_INT 0
18609: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
18610: LD_INT 35
18612: PPUSH
18613: CALL_OW 67
// p := p + 1 ;
18617: LD_ADDR_VAR 0 3
18621: PUSH
18622: LD_VAR 0 3
18626: PUSH
18627: LD_INT 1
18629: PLUS
18630: ST_TO_ADDR
// for i in tmp do
18631: LD_ADDR_VAR 0 1
18635: PUSH
18636: LD_VAR 0 2
18640: PUSH
18641: FOR_IN
18642: IFFALSE 18673
// if GetLives ( i ) < 1000 then
18644: LD_VAR 0 1
18648: PPUSH
18649: CALL_OW 256
18653: PUSH
18654: LD_INT 1000
18656: LESS
18657: IFFALSE 18671
// SetLives ( i , 1000 ) ;
18659: LD_VAR 0 1
18663: PPUSH
18664: LD_INT 1000
18666: PPUSH
18667: CALL_OW 234
18671: GO 18641
18673: POP
18674: POP
// until p > 20 ;
18675: LD_VAR 0 3
18679: PUSH
18680: LD_INT 20
18682: GREATER
18683: IFFALSE 18610
// end ;
18685: PPOPN 3
18687: END
// every 0 0$1 trigger StreamModeActive and sTime do
18688: LD_EXP 45
18692: PUSH
18693: LD_EXP 96
18697: AND
18698: IFFALSE 18733
18700: GO 18702
18702: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
18703: LD_INT 28
18705: PPUSH
18706: LD_OWVAR 2
18710: PPUSH
18711: LD_INT 2
18713: PPUSH
18714: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
18718: LD_INT 30
18720: PPUSH
18721: LD_OWVAR 2
18725: PPUSH
18726: LD_INT 2
18728: PPUSH
18729: CALL_OW 322
// end ;
18733: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
18734: LD_EXP 45
18738: PUSH
18739: LD_EXP 97
18743: AND
18744: IFFALSE 18865
18746: GO 18748
18748: DISABLE
18749: LD_INT 0
18751: PPUSH
18752: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
18753: LD_ADDR_VAR 0 2
18757: PUSH
18758: LD_INT 22
18760: PUSH
18761: LD_OWVAR 2
18765: PUSH
18766: EMPTY
18767: LIST
18768: LIST
18769: PUSH
18770: LD_INT 21
18772: PUSH
18773: LD_INT 1
18775: PUSH
18776: EMPTY
18777: LIST
18778: LIST
18779: PUSH
18780: LD_INT 3
18782: PUSH
18783: LD_INT 23
18785: PUSH
18786: LD_INT 0
18788: PUSH
18789: EMPTY
18790: LIST
18791: LIST
18792: PUSH
18793: EMPTY
18794: LIST
18795: LIST
18796: PUSH
18797: EMPTY
18798: LIST
18799: LIST
18800: LIST
18801: PPUSH
18802: CALL_OW 69
18806: ST_TO_ADDR
// if not tmp then
18807: LD_VAR 0 2
18811: NOT
18812: IFFALSE 18816
// exit ;
18814: GO 18865
// for i in tmp do
18816: LD_ADDR_VAR 0 1
18820: PUSH
18821: LD_VAR 0 2
18825: PUSH
18826: FOR_IN
18827: IFFALSE 18863
// begin if Crawls ( i ) then
18829: LD_VAR 0 1
18833: PPUSH
18834: CALL_OW 318
18838: IFFALSE 18849
// ComWalk ( i ) ;
18840: LD_VAR 0 1
18844: PPUSH
18845: CALL_OW 138
// SetClass ( i , 2 ) ;
18849: LD_VAR 0 1
18853: PPUSH
18854: LD_INT 2
18856: PPUSH
18857: CALL_OW 336
// end ;
18861: GO 18826
18863: POP
18864: POP
// end ;
18865: PPOPN 2
18867: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
18868: LD_EXP 45
18872: PUSH
18873: LD_EXP 98
18877: AND
18878: IFFALSE 19159
18880: GO 18882
18882: DISABLE
18883: LD_INT 0
18885: PPUSH
18886: PPUSH
18887: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
18888: LD_OWVAR 2
18892: PPUSH
18893: LD_INT 9
18895: PPUSH
18896: LD_INT 1
18898: PPUSH
18899: LD_INT 1
18901: PPUSH
18902: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
18906: LD_INT 9
18908: PPUSH
18909: LD_OWVAR 2
18913: PPUSH
18914: CALL_OW 343
// uc_side := 9 ;
18918: LD_ADDR_OWVAR 20
18922: PUSH
18923: LD_INT 9
18925: ST_TO_ADDR
// uc_nation := 2 ;
18926: LD_ADDR_OWVAR 21
18930: PUSH
18931: LD_INT 2
18933: ST_TO_ADDR
// hc_name := Dark Warrior ;
18934: LD_ADDR_OWVAR 26
18938: PUSH
18939: LD_STRING Dark Warrior
18941: ST_TO_ADDR
// hc_gallery :=  ;
18942: LD_ADDR_OWVAR 33
18946: PUSH
18947: LD_STRING 
18949: ST_TO_ADDR
// hc_noskilllimit := true ;
18950: LD_ADDR_OWVAR 76
18954: PUSH
18955: LD_INT 1
18957: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
18958: LD_ADDR_OWVAR 31
18962: PUSH
18963: LD_INT 30
18965: PUSH
18966: LD_INT 30
18968: PUSH
18969: LD_INT 30
18971: PUSH
18972: LD_INT 30
18974: PUSH
18975: EMPTY
18976: LIST
18977: LIST
18978: LIST
18979: LIST
18980: ST_TO_ADDR
// un := CreateHuman ;
18981: LD_ADDR_VAR 0 3
18985: PUSH
18986: CALL_OW 44
18990: ST_TO_ADDR
// hc_noskilllimit := false ;
18991: LD_ADDR_OWVAR 76
18995: PUSH
18996: LD_INT 0
18998: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
18999: LD_VAR 0 3
19003: PPUSH
19004: LD_INT 1
19006: PPUSH
19007: CALL_OW 51
// p := 0 ;
19011: LD_ADDR_VAR 0 2
19015: PUSH
19016: LD_INT 0
19018: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
19019: LD_INT 35
19021: PPUSH
19022: CALL_OW 67
// p := p + 1 ;
19026: LD_ADDR_VAR 0 2
19030: PUSH
19031: LD_VAR 0 2
19035: PUSH
19036: LD_INT 1
19038: PLUS
19039: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
19040: LD_VAR 0 3
19044: PPUSH
19045: CALL_OW 256
19049: PUSH
19050: LD_INT 1000
19052: LESS
19053: IFFALSE 19067
// SetLives ( un , 1000 ) ;
19055: LD_VAR 0 3
19059: PPUSH
19060: LD_INT 1000
19062: PPUSH
19063: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
19067: LD_VAR 0 3
19071: PPUSH
19072: LD_INT 81
19074: PUSH
19075: LD_OWVAR 2
19079: PUSH
19080: EMPTY
19081: LIST
19082: LIST
19083: PUSH
19084: LD_INT 91
19086: PUSH
19087: LD_VAR 0 3
19091: PUSH
19092: LD_INT 30
19094: PUSH
19095: EMPTY
19096: LIST
19097: LIST
19098: LIST
19099: PUSH
19100: EMPTY
19101: LIST
19102: LIST
19103: PPUSH
19104: CALL_OW 69
19108: PPUSH
19109: LD_VAR 0 3
19113: PPUSH
19114: CALL_OW 74
19118: PPUSH
19119: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
19123: LD_VAR 0 2
19127: PUSH
19128: LD_INT 60
19130: GREATER
19131: PUSH
19132: LD_VAR 0 3
19136: PPUSH
19137: CALL_OW 301
19141: OR
19142: IFFALSE 19019
// if un then
19144: LD_VAR 0 3
19148: IFFALSE 19159
// RemoveUnit ( un ) ;
19150: LD_VAR 0 3
19154: PPUSH
19155: CALL_OW 64
// end ;
19159: PPOPN 3
19161: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
19162: LD_INT 0
19164: PPUSH
// case cmd of 301 :
19165: LD_VAR 0 1
19169: PUSH
19170: LD_INT 301
19172: DOUBLE
19173: EQUAL
19174: IFTRUE 19178
19176: GO 19210
19178: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
19179: LD_VAR 0 6
19183: PPUSH
19184: LD_VAR 0 7
19188: PPUSH
19189: LD_VAR 0 8
19193: PPUSH
19194: LD_VAR 0 4
19198: PPUSH
19199: LD_VAR 0 5
19203: PPUSH
19204: CALL 20411 0 5
19208: GO 19331
19210: LD_INT 302
19212: DOUBLE
19213: EQUAL
19214: IFTRUE 19218
19216: GO 19255
19218: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
19219: LD_VAR 0 6
19223: PPUSH
19224: LD_VAR 0 7
19228: PPUSH
19229: LD_VAR 0 8
19233: PPUSH
19234: LD_VAR 0 9
19238: PPUSH
19239: LD_VAR 0 4
19243: PPUSH
19244: LD_VAR 0 5
19248: PPUSH
19249: CALL 20502 0 6
19253: GO 19331
19255: LD_INT 303
19257: DOUBLE
19258: EQUAL
19259: IFTRUE 19263
19261: GO 19300
19263: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
19264: LD_VAR 0 6
19268: PPUSH
19269: LD_VAR 0 7
19273: PPUSH
19274: LD_VAR 0 8
19278: PPUSH
19279: LD_VAR 0 9
19283: PPUSH
19284: LD_VAR 0 4
19288: PPUSH
19289: LD_VAR 0 5
19293: PPUSH
19294: CALL 19336 0 6
19298: GO 19331
19300: LD_INT 304
19302: DOUBLE
19303: EQUAL
19304: IFTRUE 19308
19306: GO 19330
19308: POP
// hHackTeleport ( unit , x , y ) ; end ;
19309: LD_VAR 0 2
19313: PPUSH
19314: LD_VAR 0 4
19318: PPUSH
19319: LD_VAR 0 5
19323: PPUSH
19324: CALL 21095 0 3
19328: GO 19331
19330: POP
// end ;
19331: LD_VAR 0 12
19335: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
19336: LD_INT 0
19338: PPUSH
19339: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
19340: LD_VAR 0 1
19344: PUSH
19345: LD_INT 1
19347: LESS
19348: PUSH
19349: LD_VAR 0 1
19353: PUSH
19354: LD_INT 3
19356: GREATER
19357: OR
19358: PUSH
19359: LD_VAR 0 5
19363: PPUSH
19364: LD_VAR 0 6
19368: PPUSH
19369: CALL_OW 428
19373: OR
19374: IFFALSE 19378
// exit ;
19376: GO 20098
// uc_side := your_side ;
19378: LD_ADDR_OWVAR 20
19382: PUSH
19383: LD_OWVAR 2
19387: ST_TO_ADDR
// uc_nation := nation ;
19388: LD_ADDR_OWVAR 21
19392: PUSH
19393: LD_VAR 0 1
19397: ST_TO_ADDR
// bc_level = 1 ;
19398: LD_ADDR_OWVAR 43
19402: PUSH
19403: LD_INT 1
19405: ST_TO_ADDR
// case btype of 1 :
19406: LD_VAR 0 2
19410: PUSH
19411: LD_INT 1
19413: DOUBLE
19414: EQUAL
19415: IFTRUE 19419
19417: GO 19430
19419: POP
// bc_type := b_depot ; 2 :
19420: LD_ADDR_OWVAR 42
19424: PUSH
19425: LD_INT 0
19427: ST_TO_ADDR
19428: GO 20042
19430: LD_INT 2
19432: DOUBLE
19433: EQUAL
19434: IFTRUE 19438
19436: GO 19449
19438: POP
// bc_type := b_warehouse ; 3 :
19439: LD_ADDR_OWVAR 42
19443: PUSH
19444: LD_INT 1
19446: ST_TO_ADDR
19447: GO 20042
19449: LD_INT 3
19451: DOUBLE
19452: EQUAL
19453: IFTRUE 19457
19455: GO 19468
19457: POP
// bc_type := b_lab ; 4 .. 9 :
19458: LD_ADDR_OWVAR 42
19462: PUSH
19463: LD_INT 6
19465: ST_TO_ADDR
19466: GO 20042
19468: LD_INT 4
19470: DOUBLE
19471: GREATEREQUAL
19472: IFFALSE 19480
19474: LD_INT 9
19476: DOUBLE
19477: LESSEQUAL
19478: IFTRUE 19482
19480: GO 19534
19482: POP
// begin bc_type := b_lab_half ;
19483: LD_ADDR_OWVAR 42
19487: PUSH
19488: LD_INT 7
19490: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
19491: LD_ADDR_OWVAR 44
19495: PUSH
19496: LD_INT 10
19498: PUSH
19499: LD_INT 11
19501: PUSH
19502: LD_INT 12
19504: PUSH
19505: LD_INT 15
19507: PUSH
19508: LD_INT 14
19510: PUSH
19511: LD_INT 13
19513: PUSH
19514: EMPTY
19515: LIST
19516: LIST
19517: LIST
19518: LIST
19519: LIST
19520: LIST
19521: PUSH
19522: LD_VAR 0 2
19526: PUSH
19527: LD_INT 3
19529: MINUS
19530: ARRAY
19531: ST_TO_ADDR
// end ; 10 .. 13 :
19532: GO 20042
19534: LD_INT 10
19536: DOUBLE
19537: GREATEREQUAL
19538: IFFALSE 19546
19540: LD_INT 13
19542: DOUBLE
19543: LESSEQUAL
19544: IFTRUE 19548
19546: GO 19625
19548: POP
// begin bc_type := b_lab_full ;
19549: LD_ADDR_OWVAR 42
19553: PUSH
19554: LD_INT 8
19556: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
19557: LD_ADDR_OWVAR 44
19561: PUSH
19562: LD_INT 10
19564: PUSH
19565: LD_INT 12
19567: PUSH
19568: LD_INT 14
19570: PUSH
19571: LD_INT 13
19573: PUSH
19574: EMPTY
19575: LIST
19576: LIST
19577: LIST
19578: LIST
19579: PUSH
19580: LD_VAR 0 2
19584: PUSH
19585: LD_INT 9
19587: MINUS
19588: ARRAY
19589: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
19590: LD_ADDR_OWVAR 45
19594: PUSH
19595: LD_INT 11
19597: PUSH
19598: LD_INT 15
19600: PUSH
19601: LD_INT 12
19603: PUSH
19604: LD_INT 15
19606: PUSH
19607: EMPTY
19608: LIST
19609: LIST
19610: LIST
19611: LIST
19612: PUSH
19613: LD_VAR 0 2
19617: PUSH
19618: LD_INT 9
19620: MINUS
19621: ARRAY
19622: ST_TO_ADDR
// end ; 14 :
19623: GO 20042
19625: LD_INT 14
19627: DOUBLE
19628: EQUAL
19629: IFTRUE 19633
19631: GO 19644
19633: POP
// bc_type := b_workshop ; 15 :
19634: LD_ADDR_OWVAR 42
19638: PUSH
19639: LD_INT 2
19641: ST_TO_ADDR
19642: GO 20042
19644: LD_INT 15
19646: DOUBLE
19647: EQUAL
19648: IFTRUE 19652
19650: GO 19663
19652: POP
// bc_type := b_factory ; 16 :
19653: LD_ADDR_OWVAR 42
19657: PUSH
19658: LD_INT 3
19660: ST_TO_ADDR
19661: GO 20042
19663: LD_INT 16
19665: DOUBLE
19666: EQUAL
19667: IFTRUE 19671
19669: GO 19682
19671: POP
// bc_type := b_ext_gun ; 17 :
19672: LD_ADDR_OWVAR 42
19676: PUSH
19677: LD_INT 17
19679: ST_TO_ADDR
19680: GO 20042
19682: LD_INT 17
19684: DOUBLE
19685: EQUAL
19686: IFTRUE 19690
19688: GO 19718
19690: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
19691: LD_ADDR_OWVAR 42
19695: PUSH
19696: LD_INT 19
19698: PUSH
19699: LD_INT 23
19701: PUSH
19702: LD_INT 19
19704: PUSH
19705: EMPTY
19706: LIST
19707: LIST
19708: LIST
19709: PUSH
19710: LD_VAR 0 1
19714: ARRAY
19715: ST_TO_ADDR
19716: GO 20042
19718: LD_INT 18
19720: DOUBLE
19721: EQUAL
19722: IFTRUE 19726
19724: GO 19737
19726: POP
// bc_type := b_ext_radar ; 19 :
19727: LD_ADDR_OWVAR 42
19731: PUSH
19732: LD_INT 20
19734: ST_TO_ADDR
19735: GO 20042
19737: LD_INT 19
19739: DOUBLE
19740: EQUAL
19741: IFTRUE 19745
19743: GO 19756
19745: POP
// bc_type := b_ext_radio ; 20 :
19746: LD_ADDR_OWVAR 42
19750: PUSH
19751: LD_INT 22
19753: ST_TO_ADDR
19754: GO 20042
19756: LD_INT 20
19758: DOUBLE
19759: EQUAL
19760: IFTRUE 19764
19762: GO 19775
19764: POP
// bc_type := b_ext_siberium ; 21 :
19765: LD_ADDR_OWVAR 42
19769: PUSH
19770: LD_INT 21
19772: ST_TO_ADDR
19773: GO 20042
19775: LD_INT 21
19777: DOUBLE
19778: EQUAL
19779: IFTRUE 19783
19781: GO 19794
19783: POP
// bc_type := b_ext_computer ; 22 :
19784: LD_ADDR_OWVAR 42
19788: PUSH
19789: LD_INT 24
19791: ST_TO_ADDR
19792: GO 20042
19794: LD_INT 22
19796: DOUBLE
19797: EQUAL
19798: IFTRUE 19802
19800: GO 19813
19802: POP
// bc_type := b_ext_track ; 23 :
19803: LD_ADDR_OWVAR 42
19807: PUSH
19808: LD_INT 16
19810: ST_TO_ADDR
19811: GO 20042
19813: LD_INT 23
19815: DOUBLE
19816: EQUAL
19817: IFTRUE 19821
19819: GO 19832
19821: POP
// bc_type := b_ext_laser ; 24 :
19822: LD_ADDR_OWVAR 42
19826: PUSH
19827: LD_INT 25
19829: ST_TO_ADDR
19830: GO 20042
19832: LD_INT 24
19834: DOUBLE
19835: EQUAL
19836: IFTRUE 19840
19838: GO 19851
19840: POP
// bc_type := b_control_tower ; 25 :
19841: LD_ADDR_OWVAR 42
19845: PUSH
19846: LD_INT 36
19848: ST_TO_ADDR
19849: GO 20042
19851: LD_INT 25
19853: DOUBLE
19854: EQUAL
19855: IFTRUE 19859
19857: GO 19870
19859: POP
// bc_type := b_breastwork ; 26 :
19860: LD_ADDR_OWVAR 42
19864: PUSH
19865: LD_INT 31
19867: ST_TO_ADDR
19868: GO 20042
19870: LD_INT 26
19872: DOUBLE
19873: EQUAL
19874: IFTRUE 19878
19876: GO 19889
19878: POP
// bc_type := b_bunker ; 27 :
19879: LD_ADDR_OWVAR 42
19883: PUSH
19884: LD_INT 32
19886: ST_TO_ADDR
19887: GO 20042
19889: LD_INT 27
19891: DOUBLE
19892: EQUAL
19893: IFTRUE 19897
19895: GO 19908
19897: POP
// bc_type := b_turret ; 28 :
19898: LD_ADDR_OWVAR 42
19902: PUSH
19903: LD_INT 33
19905: ST_TO_ADDR
19906: GO 20042
19908: LD_INT 28
19910: DOUBLE
19911: EQUAL
19912: IFTRUE 19916
19914: GO 19927
19916: POP
// bc_type := b_armoury ; 29 :
19917: LD_ADDR_OWVAR 42
19921: PUSH
19922: LD_INT 4
19924: ST_TO_ADDR
19925: GO 20042
19927: LD_INT 29
19929: DOUBLE
19930: EQUAL
19931: IFTRUE 19935
19933: GO 19946
19935: POP
// bc_type := b_barracks ; 30 :
19936: LD_ADDR_OWVAR 42
19940: PUSH
19941: LD_INT 5
19943: ST_TO_ADDR
19944: GO 20042
19946: LD_INT 30
19948: DOUBLE
19949: EQUAL
19950: IFTRUE 19954
19952: GO 19965
19954: POP
// bc_type := b_solar_power ; 31 :
19955: LD_ADDR_OWVAR 42
19959: PUSH
19960: LD_INT 27
19962: ST_TO_ADDR
19963: GO 20042
19965: LD_INT 31
19967: DOUBLE
19968: EQUAL
19969: IFTRUE 19973
19971: GO 19984
19973: POP
// bc_type := b_oil_power ; 32 :
19974: LD_ADDR_OWVAR 42
19978: PUSH
19979: LD_INT 26
19981: ST_TO_ADDR
19982: GO 20042
19984: LD_INT 32
19986: DOUBLE
19987: EQUAL
19988: IFTRUE 19992
19990: GO 20003
19992: POP
// bc_type := b_siberite_power ; 33 :
19993: LD_ADDR_OWVAR 42
19997: PUSH
19998: LD_INT 28
20000: ST_TO_ADDR
20001: GO 20042
20003: LD_INT 33
20005: DOUBLE
20006: EQUAL
20007: IFTRUE 20011
20009: GO 20022
20011: POP
// bc_type := b_oil_mine ; 34 :
20012: LD_ADDR_OWVAR 42
20016: PUSH
20017: LD_INT 29
20019: ST_TO_ADDR
20020: GO 20042
20022: LD_INT 34
20024: DOUBLE
20025: EQUAL
20026: IFTRUE 20030
20028: GO 20041
20030: POP
// bc_type := b_siberite_mine ; end ;
20031: LD_ADDR_OWVAR 42
20035: PUSH
20036: LD_INT 30
20038: ST_TO_ADDR
20039: GO 20042
20041: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
20042: LD_ADDR_VAR 0 8
20046: PUSH
20047: LD_VAR 0 5
20051: PPUSH
20052: LD_VAR 0 6
20056: PPUSH
20057: LD_VAR 0 3
20061: PPUSH
20062: CALL_OW 47
20066: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
20067: LD_OWVAR 42
20071: PUSH
20072: LD_INT 32
20074: PUSH
20075: LD_INT 33
20077: PUSH
20078: EMPTY
20079: LIST
20080: LIST
20081: IN
20082: IFFALSE 20098
// PlaceWeaponTurret ( b , weapon ) ;
20084: LD_VAR 0 8
20088: PPUSH
20089: LD_VAR 0 4
20093: PPUSH
20094: CALL_OW 431
// end ;
20098: LD_VAR 0 7
20102: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
20103: LD_INT 0
20105: PPUSH
20106: PPUSH
20107: PPUSH
20108: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20109: LD_ADDR_VAR 0 4
20113: PUSH
20114: LD_INT 22
20116: PUSH
20117: LD_OWVAR 2
20121: PUSH
20122: EMPTY
20123: LIST
20124: LIST
20125: PUSH
20126: LD_INT 2
20128: PUSH
20129: LD_INT 30
20131: PUSH
20132: LD_INT 0
20134: PUSH
20135: EMPTY
20136: LIST
20137: LIST
20138: PUSH
20139: LD_INT 30
20141: PUSH
20142: LD_INT 1
20144: PUSH
20145: EMPTY
20146: LIST
20147: LIST
20148: PUSH
20149: EMPTY
20150: LIST
20151: LIST
20152: LIST
20153: PUSH
20154: EMPTY
20155: LIST
20156: LIST
20157: PPUSH
20158: CALL_OW 69
20162: ST_TO_ADDR
// if not tmp then
20163: LD_VAR 0 4
20167: NOT
20168: IFFALSE 20172
// exit ;
20170: GO 20231
// for i in tmp do
20172: LD_ADDR_VAR 0 2
20176: PUSH
20177: LD_VAR 0 4
20181: PUSH
20182: FOR_IN
20183: IFFALSE 20229
// for j = 1 to 3 do
20185: LD_ADDR_VAR 0 3
20189: PUSH
20190: DOUBLE
20191: LD_INT 1
20193: DEC
20194: ST_TO_ADDR
20195: LD_INT 3
20197: PUSH
20198: FOR_TO
20199: IFFALSE 20225
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
20201: LD_VAR 0 2
20205: PPUSH
20206: CALL_OW 274
20210: PPUSH
20211: LD_VAR 0 3
20215: PPUSH
20216: LD_INT 99999
20218: PPUSH
20219: CALL_OW 277
20223: GO 20198
20225: POP
20226: POP
20227: GO 20182
20229: POP
20230: POP
// end ;
20231: LD_VAR 0 1
20235: RET
// export function hHackSetLevel10 ; var i , j ; begin
20236: LD_INT 0
20238: PPUSH
20239: PPUSH
20240: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
20241: LD_ADDR_VAR 0 2
20245: PUSH
20246: LD_INT 21
20248: PUSH
20249: LD_INT 1
20251: PUSH
20252: EMPTY
20253: LIST
20254: LIST
20255: PPUSH
20256: CALL_OW 69
20260: PUSH
20261: FOR_IN
20262: IFFALSE 20314
// if IsSelected ( i ) then
20264: LD_VAR 0 2
20268: PPUSH
20269: CALL_OW 306
20273: IFFALSE 20312
// begin for j := 1 to 4 do
20275: LD_ADDR_VAR 0 3
20279: PUSH
20280: DOUBLE
20281: LD_INT 1
20283: DEC
20284: ST_TO_ADDR
20285: LD_INT 4
20287: PUSH
20288: FOR_TO
20289: IFFALSE 20310
// SetSkill ( i , j , 10 ) ;
20291: LD_VAR 0 2
20295: PPUSH
20296: LD_VAR 0 3
20300: PPUSH
20301: LD_INT 10
20303: PPUSH
20304: CALL_OW 237
20308: GO 20288
20310: POP
20311: POP
// end ;
20312: GO 20261
20314: POP
20315: POP
// end ;
20316: LD_VAR 0 1
20320: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
20321: LD_INT 0
20323: PPUSH
20324: PPUSH
20325: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
20326: LD_ADDR_VAR 0 2
20330: PUSH
20331: LD_INT 22
20333: PUSH
20334: LD_OWVAR 2
20338: PUSH
20339: EMPTY
20340: LIST
20341: LIST
20342: PUSH
20343: LD_INT 21
20345: PUSH
20346: LD_INT 1
20348: PUSH
20349: EMPTY
20350: LIST
20351: LIST
20352: PUSH
20353: EMPTY
20354: LIST
20355: LIST
20356: PPUSH
20357: CALL_OW 69
20361: PUSH
20362: FOR_IN
20363: IFFALSE 20404
// begin for j := 1 to 4 do
20365: LD_ADDR_VAR 0 3
20369: PUSH
20370: DOUBLE
20371: LD_INT 1
20373: DEC
20374: ST_TO_ADDR
20375: LD_INT 4
20377: PUSH
20378: FOR_TO
20379: IFFALSE 20400
// SetSkill ( i , j , 10 ) ;
20381: LD_VAR 0 2
20385: PPUSH
20386: LD_VAR 0 3
20390: PPUSH
20391: LD_INT 10
20393: PPUSH
20394: CALL_OW 237
20398: GO 20378
20400: POP
20401: POP
// end ;
20402: GO 20362
20404: POP
20405: POP
// end ;
20406: LD_VAR 0 1
20410: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
20411: LD_INT 0
20413: PPUSH
// uc_side := your_side ;
20414: LD_ADDR_OWVAR 20
20418: PUSH
20419: LD_OWVAR 2
20423: ST_TO_ADDR
// uc_nation := nation ;
20424: LD_ADDR_OWVAR 21
20428: PUSH
20429: LD_VAR 0 1
20433: ST_TO_ADDR
// InitHc ;
20434: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
20438: LD_INT 0
20440: PPUSH
20441: LD_VAR 0 2
20445: PPUSH
20446: LD_VAR 0 3
20450: PPUSH
20451: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
20455: LD_VAR 0 4
20459: PPUSH
20460: LD_VAR 0 5
20464: PPUSH
20465: CALL_OW 428
20469: PUSH
20470: LD_INT 0
20472: EQUAL
20473: IFFALSE 20497
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
20475: CALL_OW 44
20479: PPUSH
20480: LD_VAR 0 4
20484: PPUSH
20485: LD_VAR 0 5
20489: PPUSH
20490: LD_INT 1
20492: PPUSH
20493: CALL_OW 48
// end ;
20497: LD_VAR 0 6
20501: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
20502: LD_INT 0
20504: PPUSH
20505: PPUSH
// uc_side := your_side ;
20506: LD_ADDR_OWVAR 20
20510: PUSH
20511: LD_OWVAR 2
20515: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
20516: LD_VAR 0 1
20520: PUSH
20521: LD_INT 1
20523: PUSH
20524: LD_INT 2
20526: PUSH
20527: LD_INT 3
20529: PUSH
20530: LD_INT 4
20532: PUSH
20533: LD_INT 5
20535: PUSH
20536: EMPTY
20537: LIST
20538: LIST
20539: LIST
20540: LIST
20541: LIST
20542: IN
20543: IFFALSE 20555
// uc_nation := nation_american else
20545: LD_ADDR_OWVAR 21
20549: PUSH
20550: LD_INT 1
20552: ST_TO_ADDR
20553: GO 20598
// if chassis in [ 11 , 12 , 13 , 14 ] then
20555: LD_VAR 0 1
20559: PUSH
20560: LD_INT 11
20562: PUSH
20563: LD_INT 12
20565: PUSH
20566: LD_INT 13
20568: PUSH
20569: LD_INT 14
20571: PUSH
20572: EMPTY
20573: LIST
20574: LIST
20575: LIST
20576: LIST
20577: IN
20578: IFFALSE 20590
// uc_nation := nation_arabian else
20580: LD_ADDR_OWVAR 21
20584: PUSH
20585: LD_INT 2
20587: ST_TO_ADDR
20588: GO 20598
// uc_nation := nation_russian ;
20590: LD_ADDR_OWVAR 21
20594: PUSH
20595: LD_INT 3
20597: ST_TO_ADDR
// vc_chassis := chassis ;
20598: LD_ADDR_OWVAR 37
20602: PUSH
20603: LD_VAR 0 1
20607: ST_TO_ADDR
// vc_engine := engine ;
20608: LD_ADDR_OWVAR 39
20612: PUSH
20613: LD_VAR 0 2
20617: ST_TO_ADDR
// vc_control := control ;
20618: LD_ADDR_OWVAR 38
20622: PUSH
20623: LD_VAR 0 3
20627: ST_TO_ADDR
// vc_weapon := weapon ;
20628: LD_ADDR_OWVAR 40
20632: PUSH
20633: LD_VAR 0 4
20637: ST_TO_ADDR
// un := CreateVehicle ;
20638: LD_ADDR_VAR 0 8
20642: PUSH
20643: CALL_OW 45
20647: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
20648: LD_VAR 0 8
20652: PPUSH
20653: LD_INT 0
20655: PPUSH
20656: LD_INT 5
20658: PPUSH
20659: CALL_OW 12
20663: PPUSH
20664: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
20668: LD_VAR 0 8
20672: PPUSH
20673: LD_VAR 0 5
20677: PPUSH
20678: LD_VAR 0 6
20682: PPUSH
20683: LD_INT 1
20685: PPUSH
20686: CALL_OW 48
// end ;
20690: LD_VAR 0 7
20694: RET
// export hInvincible ; every 1 do
20695: GO 20697
20697: DISABLE
// hInvincible := [ ] ;
20698: LD_ADDR_EXP 99
20702: PUSH
20703: EMPTY
20704: ST_TO_ADDR
20705: END
// every 10 do var i ;
20706: GO 20708
20708: DISABLE
20709: LD_INT 0
20711: PPUSH
// begin enable ;
20712: ENABLE
// if not hInvincible then
20713: LD_EXP 99
20717: NOT
20718: IFFALSE 20722
// exit ;
20720: GO 20766
// for i in hInvincible do
20722: LD_ADDR_VAR 0 1
20726: PUSH
20727: LD_EXP 99
20731: PUSH
20732: FOR_IN
20733: IFFALSE 20764
// if GetLives ( i ) < 1000 then
20735: LD_VAR 0 1
20739: PPUSH
20740: CALL_OW 256
20744: PUSH
20745: LD_INT 1000
20747: LESS
20748: IFFALSE 20762
// SetLives ( i , 1000 ) ;
20750: LD_VAR 0 1
20754: PPUSH
20755: LD_INT 1000
20757: PPUSH
20758: CALL_OW 234
20762: GO 20732
20764: POP
20765: POP
// end ;
20766: PPOPN 1
20768: END
// export function hHackInvincible ; var i ; begin
20769: LD_INT 0
20771: PPUSH
20772: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
20773: LD_ADDR_VAR 0 2
20777: PUSH
20778: LD_INT 2
20780: PUSH
20781: LD_INT 21
20783: PUSH
20784: LD_INT 1
20786: PUSH
20787: EMPTY
20788: LIST
20789: LIST
20790: PUSH
20791: LD_INT 21
20793: PUSH
20794: LD_INT 2
20796: PUSH
20797: EMPTY
20798: LIST
20799: LIST
20800: PUSH
20801: EMPTY
20802: LIST
20803: LIST
20804: LIST
20805: PPUSH
20806: CALL_OW 69
20810: PUSH
20811: FOR_IN
20812: IFFALSE 20873
// if IsSelected ( i ) then
20814: LD_VAR 0 2
20818: PPUSH
20819: CALL_OW 306
20823: IFFALSE 20871
// begin if i in hInvincible then
20825: LD_VAR 0 2
20829: PUSH
20830: LD_EXP 99
20834: IN
20835: IFFALSE 20855
// hInvincible := hInvincible diff i else
20837: LD_ADDR_EXP 99
20841: PUSH
20842: LD_EXP 99
20846: PUSH
20847: LD_VAR 0 2
20851: DIFF
20852: ST_TO_ADDR
20853: GO 20871
// hInvincible := hInvincible union i ;
20855: LD_ADDR_EXP 99
20859: PUSH
20860: LD_EXP 99
20864: PUSH
20865: LD_VAR 0 2
20869: UNION
20870: ST_TO_ADDR
// end ;
20871: GO 20811
20873: POP
20874: POP
// end ;
20875: LD_VAR 0 1
20879: RET
// export function hHackInvisible ; var i , j ; begin
20880: LD_INT 0
20882: PPUSH
20883: PPUSH
20884: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
20885: LD_ADDR_VAR 0 2
20889: PUSH
20890: LD_INT 21
20892: PUSH
20893: LD_INT 1
20895: PUSH
20896: EMPTY
20897: LIST
20898: LIST
20899: PPUSH
20900: CALL_OW 69
20904: PUSH
20905: FOR_IN
20906: IFFALSE 20930
// if IsSelected ( i ) then
20908: LD_VAR 0 2
20912: PPUSH
20913: CALL_OW 306
20917: IFFALSE 20928
// ComForceInvisible ( i ) ;
20919: LD_VAR 0 2
20923: PPUSH
20924: CALL_OW 496
20928: GO 20905
20930: POP
20931: POP
// end ;
20932: LD_VAR 0 1
20936: RET
// export function hHackChangeYourSide ; begin
20937: LD_INT 0
20939: PPUSH
// if your_side = 8 then
20940: LD_OWVAR 2
20944: PUSH
20945: LD_INT 8
20947: EQUAL
20948: IFFALSE 20960
// your_side := 0 else
20950: LD_ADDR_OWVAR 2
20954: PUSH
20955: LD_INT 0
20957: ST_TO_ADDR
20958: GO 20974
// your_side := your_side + 1 ;
20960: LD_ADDR_OWVAR 2
20964: PUSH
20965: LD_OWVAR 2
20969: PUSH
20970: LD_INT 1
20972: PLUS
20973: ST_TO_ADDR
// end ;
20974: LD_VAR 0 1
20978: RET
// export function hHackChangeUnitSide ; var i , j ; begin
20979: LD_INT 0
20981: PPUSH
20982: PPUSH
20983: PPUSH
// for i in all_units do
20984: LD_ADDR_VAR 0 2
20988: PUSH
20989: LD_OWVAR 3
20993: PUSH
20994: FOR_IN
20995: IFFALSE 21073
// if IsSelected ( i ) then
20997: LD_VAR 0 2
21001: PPUSH
21002: CALL_OW 306
21006: IFFALSE 21071
// begin j := GetSide ( i ) ;
21008: LD_ADDR_VAR 0 3
21012: PUSH
21013: LD_VAR 0 2
21017: PPUSH
21018: CALL_OW 255
21022: ST_TO_ADDR
// if j = 8 then
21023: LD_VAR 0 3
21027: PUSH
21028: LD_INT 8
21030: EQUAL
21031: IFFALSE 21043
// j := 0 else
21033: LD_ADDR_VAR 0 3
21037: PUSH
21038: LD_INT 0
21040: ST_TO_ADDR
21041: GO 21057
// j := j + 1 ;
21043: LD_ADDR_VAR 0 3
21047: PUSH
21048: LD_VAR 0 3
21052: PUSH
21053: LD_INT 1
21055: PLUS
21056: ST_TO_ADDR
// SetSide ( i , j ) ;
21057: LD_VAR 0 2
21061: PPUSH
21062: LD_VAR 0 3
21066: PPUSH
21067: CALL_OW 235
// end ;
21071: GO 20994
21073: POP
21074: POP
// end ;
21075: LD_VAR 0 1
21079: RET
// export function hHackFog ; begin
21080: LD_INT 0
21082: PPUSH
// FogOff ( true ) ;
21083: LD_INT 1
21085: PPUSH
21086: CALL_OW 344
// end ;
21090: LD_VAR 0 1
21094: RET
// export function hHackTeleport ( unit , x , y ) ; begin
21095: LD_INT 0
21097: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
21098: LD_VAR 0 1
21102: PPUSH
21103: LD_VAR 0 2
21107: PPUSH
21108: LD_VAR 0 3
21112: PPUSH
21113: LD_INT 1
21115: PPUSH
21116: LD_INT 1
21118: PPUSH
21119: CALL_OW 483
// CenterOnXY ( x , y ) ;
21123: LD_VAR 0 2
21127: PPUSH
21128: LD_VAR 0 3
21132: PPUSH
21133: CALL_OW 84
// end ; end_of_file
21137: LD_VAR 0 4
21141: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
21142: LD_INT 0
21144: PPUSH
21145: PPUSH
21146: PPUSH
21147: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
21148: LD_VAR 0 1
21152: PPUSH
21153: CALL_OW 264
21157: PUSH
21158: LD_EXP 33
21162: EQUAL
21163: IFFALSE 21235
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
21165: LD_INT 68
21167: PPUSH
21168: LD_VAR 0 1
21172: PPUSH
21173: CALL_OW 255
21177: PPUSH
21178: CALL_OW 321
21182: PUSH
21183: LD_INT 2
21185: EQUAL
21186: IFFALSE 21198
// eff := 70 else
21188: LD_ADDR_VAR 0 4
21192: PUSH
21193: LD_INT 70
21195: ST_TO_ADDR
21196: GO 21206
// eff := 30 ;
21198: LD_ADDR_VAR 0 4
21202: PUSH
21203: LD_INT 30
21205: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
21206: LD_VAR 0 1
21210: PPUSH
21211: CALL_OW 250
21215: PPUSH
21216: LD_VAR 0 1
21220: PPUSH
21221: CALL_OW 251
21225: PPUSH
21226: LD_VAR 0 4
21230: PPUSH
21231: CALL_OW 495
// end ; end ;
21235: LD_VAR 0 2
21239: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
21240: LD_INT 0
21242: PPUSH
// end ;
21243: LD_VAR 0 4
21247: RET
// export function SOS_Command ( cmd ) ; begin
21248: LD_INT 0
21250: PPUSH
// end ;
21251: LD_VAR 0 2
21255: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
21256: LD_INT 0
21258: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
21259: LD_VAR 0 1
21263: PUSH
21264: LD_INT 250
21266: EQUAL
21267: PUSH
21268: LD_VAR 0 2
21272: PPUSH
21273: CALL_OW 264
21277: PUSH
21278: LD_EXP 36
21282: EQUAL
21283: AND
21284: IFFALSE 21305
// MinerPlaceMine ( unit , x , y ) ;
21286: LD_VAR 0 2
21290: PPUSH
21291: LD_VAR 0 4
21295: PPUSH
21296: LD_VAR 0 5
21300: PPUSH
21301: CALL 23646 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
21305: LD_VAR 0 1
21309: PUSH
21310: LD_INT 251
21312: EQUAL
21313: PUSH
21314: LD_VAR 0 2
21318: PPUSH
21319: CALL_OW 264
21323: PUSH
21324: LD_EXP 36
21328: EQUAL
21329: AND
21330: IFFALSE 21351
// MinerDetonateMine ( unit , x , y ) ;
21332: LD_VAR 0 2
21336: PPUSH
21337: LD_VAR 0 4
21341: PPUSH
21342: LD_VAR 0 5
21346: PPUSH
21347: CALL 23923 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
21351: LD_VAR 0 1
21355: PUSH
21356: LD_INT 252
21358: EQUAL
21359: PUSH
21360: LD_VAR 0 2
21364: PPUSH
21365: CALL_OW 264
21369: PUSH
21370: LD_EXP 36
21374: EQUAL
21375: AND
21376: IFFALSE 21397
// MinerCreateMinefield ( unit , x , y ) ;
21378: LD_VAR 0 2
21382: PPUSH
21383: LD_VAR 0 4
21387: PPUSH
21388: LD_VAR 0 5
21392: PPUSH
21393: CALL 24340 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
21397: LD_VAR 0 1
21401: PUSH
21402: LD_INT 253
21404: EQUAL
21405: PUSH
21406: LD_VAR 0 2
21410: PPUSH
21411: CALL_OW 257
21415: PUSH
21416: LD_INT 5
21418: EQUAL
21419: AND
21420: IFFALSE 21441
// ComBinocular ( unit , x , y ) ;
21422: LD_VAR 0 2
21426: PPUSH
21427: LD_VAR 0 4
21431: PPUSH
21432: LD_VAR 0 5
21436: PPUSH
21437: CALL 24711 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
21441: LD_VAR 0 1
21445: PUSH
21446: LD_INT 254
21448: EQUAL
21449: PUSH
21450: LD_VAR 0 2
21454: PPUSH
21455: CALL_OW 264
21459: PUSH
21460: LD_EXP 31
21464: EQUAL
21465: AND
21466: PUSH
21467: LD_VAR 0 3
21471: PPUSH
21472: CALL_OW 263
21476: PUSH
21477: LD_INT 3
21479: EQUAL
21480: AND
21481: IFFALSE 21497
// HackDestroyVehicle ( unit , selectedUnit ) ;
21483: LD_VAR 0 2
21487: PPUSH
21488: LD_VAR 0 3
21492: PPUSH
21493: CALL 23006 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
21497: LD_VAR 0 1
21501: PUSH
21502: LD_INT 255
21504: EQUAL
21505: PUSH
21506: LD_VAR 0 2
21510: PPUSH
21511: CALL_OW 264
21515: PUSH
21516: LD_INT 14
21518: PUSH
21519: LD_INT 53
21521: PUSH
21522: EMPTY
21523: LIST
21524: LIST
21525: IN
21526: AND
21527: PUSH
21528: LD_VAR 0 4
21532: PPUSH
21533: LD_VAR 0 5
21537: PPUSH
21538: CALL_OW 488
21542: AND
21543: IFFALSE 21567
// CutTreeXYR ( unit , x , y , 12 ) ;
21545: LD_VAR 0 2
21549: PPUSH
21550: LD_VAR 0 4
21554: PPUSH
21555: LD_VAR 0 5
21559: PPUSH
21560: LD_INT 12
21562: PPUSH
21563: CALL 21572 0 4
// end ;
21567: LD_VAR 0 6
21571: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
21572: LD_INT 0
21574: PPUSH
21575: PPUSH
21576: PPUSH
21577: PPUSH
21578: PPUSH
21579: PPUSH
21580: PPUSH
21581: PPUSH
21582: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
21583: LD_VAR 0 1
21587: NOT
21588: PUSH
21589: LD_VAR 0 2
21593: PPUSH
21594: LD_VAR 0 3
21598: PPUSH
21599: CALL_OW 488
21603: NOT
21604: OR
21605: PUSH
21606: LD_VAR 0 4
21610: NOT
21611: OR
21612: IFFALSE 21616
// exit ;
21614: GO 21956
// list := [ ] ;
21616: LD_ADDR_VAR 0 13
21620: PUSH
21621: EMPTY
21622: ST_TO_ADDR
// if x - r < 0 then
21623: LD_VAR 0 2
21627: PUSH
21628: LD_VAR 0 4
21632: MINUS
21633: PUSH
21634: LD_INT 0
21636: LESS
21637: IFFALSE 21649
// min_x := 0 else
21639: LD_ADDR_VAR 0 7
21643: PUSH
21644: LD_INT 0
21646: ST_TO_ADDR
21647: GO 21665
// min_x := x - r ;
21649: LD_ADDR_VAR 0 7
21653: PUSH
21654: LD_VAR 0 2
21658: PUSH
21659: LD_VAR 0 4
21663: MINUS
21664: ST_TO_ADDR
// if y - r < 0 then
21665: LD_VAR 0 3
21669: PUSH
21670: LD_VAR 0 4
21674: MINUS
21675: PUSH
21676: LD_INT 0
21678: LESS
21679: IFFALSE 21691
// min_y := 0 else
21681: LD_ADDR_VAR 0 8
21685: PUSH
21686: LD_INT 0
21688: ST_TO_ADDR
21689: GO 21707
// min_y := y - r ;
21691: LD_ADDR_VAR 0 8
21695: PUSH
21696: LD_VAR 0 3
21700: PUSH
21701: LD_VAR 0 4
21705: MINUS
21706: ST_TO_ADDR
// max_x := x + r ;
21707: LD_ADDR_VAR 0 9
21711: PUSH
21712: LD_VAR 0 2
21716: PUSH
21717: LD_VAR 0 4
21721: PLUS
21722: ST_TO_ADDR
// max_y := y + r ;
21723: LD_ADDR_VAR 0 10
21727: PUSH
21728: LD_VAR 0 3
21732: PUSH
21733: LD_VAR 0 4
21737: PLUS
21738: ST_TO_ADDR
// for _x = min_x to max_x do
21739: LD_ADDR_VAR 0 11
21743: PUSH
21744: DOUBLE
21745: LD_VAR 0 7
21749: DEC
21750: ST_TO_ADDR
21751: LD_VAR 0 9
21755: PUSH
21756: FOR_TO
21757: IFFALSE 21874
// for _y = min_y to max_y do
21759: LD_ADDR_VAR 0 12
21763: PUSH
21764: DOUBLE
21765: LD_VAR 0 8
21769: DEC
21770: ST_TO_ADDR
21771: LD_VAR 0 10
21775: PUSH
21776: FOR_TO
21777: IFFALSE 21870
// begin if not ValidHex ( _x , _y ) then
21779: LD_VAR 0 11
21783: PPUSH
21784: LD_VAR 0 12
21788: PPUSH
21789: CALL_OW 488
21793: NOT
21794: IFFALSE 21798
// continue ;
21796: GO 21776
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
21798: LD_VAR 0 11
21802: PPUSH
21803: LD_VAR 0 12
21807: PPUSH
21808: CALL_OW 351
21812: PUSH
21813: LD_VAR 0 11
21817: PPUSH
21818: LD_VAR 0 12
21822: PPUSH
21823: CALL_OW 554
21827: AND
21828: IFFALSE 21868
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
21830: LD_ADDR_VAR 0 13
21834: PUSH
21835: LD_VAR 0 13
21839: PPUSH
21840: LD_VAR 0 13
21844: PUSH
21845: LD_INT 1
21847: PLUS
21848: PPUSH
21849: LD_VAR 0 11
21853: PUSH
21854: LD_VAR 0 12
21858: PUSH
21859: EMPTY
21860: LIST
21861: LIST
21862: PPUSH
21863: CALL_OW 2
21867: ST_TO_ADDR
// end ;
21868: GO 21776
21870: POP
21871: POP
21872: GO 21756
21874: POP
21875: POP
// if not list then
21876: LD_VAR 0 13
21880: NOT
21881: IFFALSE 21885
// exit ;
21883: GO 21956
// for i in list do
21885: LD_ADDR_VAR 0 6
21889: PUSH
21890: LD_VAR 0 13
21894: PUSH
21895: FOR_IN
21896: IFFALSE 21954
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
21898: LD_VAR 0 1
21902: PPUSH
21903: LD_STRING M
21905: PUSH
21906: LD_VAR 0 6
21910: PUSH
21911: LD_INT 1
21913: ARRAY
21914: PUSH
21915: LD_VAR 0 6
21919: PUSH
21920: LD_INT 2
21922: ARRAY
21923: PUSH
21924: LD_INT 0
21926: PUSH
21927: LD_INT 0
21929: PUSH
21930: LD_INT 0
21932: PUSH
21933: LD_INT 0
21935: PUSH
21936: EMPTY
21937: LIST
21938: LIST
21939: LIST
21940: LIST
21941: LIST
21942: LIST
21943: LIST
21944: PUSH
21945: EMPTY
21946: LIST
21947: PPUSH
21948: CALL_OW 447
21952: GO 21895
21954: POP
21955: POP
// end ;
21956: LD_VAR 0 5
21960: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
21961: LD_EXP 100
21965: NOT
21966: IFFALSE 22016
21968: GO 21970
21970: DISABLE
// begin initHack := true ;
21971: LD_ADDR_EXP 100
21975: PUSH
21976: LD_INT 1
21978: ST_TO_ADDR
// hackTanks := [ ] ;
21979: LD_ADDR_EXP 101
21983: PUSH
21984: EMPTY
21985: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
21986: LD_ADDR_EXP 102
21990: PUSH
21991: EMPTY
21992: ST_TO_ADDR
// hackLimit := 3 ;
21993: LD_ADDR_EXP 103
21997: PUSH
21998: LD_INT 3
22000: ST_TO_ADDR
// hackDist := 12 ;
22001: LD_ADDR_EXP 104
22005: PUSH
22006: LD_INT 12
22008: ST_TO_ADDR
// hackCounter := [ ] ;
22009: LD_ADDR_EXP 105
22013: PUSH
22014: EMPTY
22015: ST_TO_ADDR
// end ;
22016: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
22017: LD_EXP 100
22021: PUSH
22022: LD_INT 34
22024: PUSH
22025: LD_EXP 31
22029: PUSH
22030: EMPTY
22031: LIST
22032: LIST
22033: PPUSH
22034: CALL_OW 69
22038: AND
22039: IFFALSE 22294
22041: GO 22043
22043: DISABLE
22044: LD_INT 0
22046: PPUSH
22047: PPUSH
// begin enable ;
22048: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
22049: LD_ADDR_VAR 0 1
22053: PUSH
22054: LD_INT 34
22056: PUSH
22057: LD_EXP 31
22061: PUSH
22062: EMPTY
22063: LIST
22064: LIST
22065: PPUSH
22066: CALL_OW 69
22070: PUSH
22071: FOR_IN
22072: IFFALSE 22292
// begin if not i in hackTanks then
22074: LD_VAR 0 1
22078: PUSH
22079: LD_EXP 101
22083: IN
22084: NOT
22085: IFFALSE 22168
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
22087: LD_ADDR_EXP 101
22091: PUSH
22092: LD_EXP 101
22096: PPUSH
22097: LD_EXP 101
22101: PUSH
22102: LD_INT 1
22104: PLUS
22105: PPUSH
22106: LD_VAR 0 1
22110: PPUSH
22111: CALL_OW 1
22115: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
22116: LD_ADDR_EXP 102
22120: PUSH
22121: LD_EXP 102
22125: PPUSH
22126: LD_EXP 102
22130: PUSH
22131: LD_INT 1
22133: PLUS
22134: PPUSH
22135: EMPTY
22136: PPUSH
22137: CALL_OW 1
22141: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
22142: LD_ADDR_EXP 105
22146: PUSH
22147: LD_EXP 105
22151: PPUSH
22152: LD_EXP 105
22156: PUSH
22157: LD_INT 1
22159: PLUS
22160: PPUSH
22161: EMPTY
22162: PPUSH
22163: CALL_OW 1
22167: ST_TO_ADDR
// end ; if not IsOk ( i ) then
22168: LD_VAR 0 1
22172: PPUSH
22173: CALL_OW 302
22177: NOT
22178: IFFALSE 22191
// begin HackUnlinkAll ( i ) ;
22180: LD_VAR 0 1
22184: PPUSH
22185: CALL 22297 0 1
// continue ;
22189: GO 22071
// end ; HackCheckCapturedStatus ( i ) ;
22191: LD_VAR 0 1
22195: PPUSH
22196: CALL 22740 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
22200: LD_ADDR_VAR 0 2
22204: PUSH
22205: LD_INT 81
22207: PUSH
22208: LD_VAR 0 1
22212: PPUSH
22213: CALL_OW 255
22217: PUSH
22218: EMPTY
22219: LIST
22220: LIST
22221: PUSH
22222: LD_INT 33
22224: PUSH
22225: LD_INT 3
22227: PUSH
22228: EMPTY
22229: LIST
22230: LIST
22231: PUSH
22232: LD_INT 91
22234: PUSH
22235: LD_VAR 0 1
22239: PUSH
22240: LD_EXP 104
22244: PUSH
22245: EMPTY
22246: LIST
22247: LIST
22248: LIST
22249: PUSH
22250: LD_INT 50
22252: PUSH
22253: EMPTY
22254: LIST
22255: PUSH
22256: EMPTY
22257: LIST
22258: LIST
22259: LIST
22260: LIST
22261: PPUSH
22262: CALL_OW 69
22266: ST_TO_ADDR
// if not tmp then
22267: LD_VAR 0 2
22271: NOT
22272: IFFALSE 22276
// continue ;
22274: GO 22071
// HackLink ( i , tmp ) ;
22276: LD_VAR 0 1
22280: PPUSH
22281: LD_VAR 0 2
22285: PPUSH
22286: CALL 22433 0 2
// end ;
22290: GO 22071
22292: POP
22293: POP
// end ;
22294: PPOPN 2
22296: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
22297: LD_INT 0
22299: PPUSH
22300: PPUSH
22301: PPUSH
// if not hack in hackTanks then
22302: LD_VAR 0 1
22306: PUSH
22307: LD_EXP 101
22311: IN
22312: NOT
22313: IFFALSE 22317
// exit ;
22315: GO 22428
// index := GetElementIndex ( hackTanks , hack ) ;
22317: LD_ADDR_VAR 0 4
22321: PUSH
22322: LD_EXP 101
22326: PPUSH
22327: LD_VAR 0 1
22331: PPUSH
22332: CALL 29862 0 2
22336: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
22337: LD_EXP 102
22341: PUSH
22342: LD_VAR 0 4
22346: ARRAY
22347: IFFALSE 22428
// begin for i in hackTanksCaptured [ index ] do
22349: LD_ADDR_VAR 0 3
22353: PUSH
22354: LD_EXP 102
22358: PUSH
22359: LD_VAR 0 4
22363: ARRAY
22364: PUSH
22365: FOR_IN
22366: IFFALSE 22392
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
22368: LD_VAR 0 3
22372: PUSH
22373: LD_INT 1
22375: ARRAY
22376: PPUSH
22377: LD_VAR 0 3
22381: PUSH
22382: LD_INT 2
22384: ARRAY
22385: PPUSH
22386: CALL_OW 235
22390: GO 22365
22392: POP
22393: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
22394: LD_ADDR_EXP 102
22398: PUSH
22399: LD_EXP 102
22403: PPUSH
22404: LD_VAR 0 4
22408: PPUSH
22409: EMPTY
22410: PPUSH
22411: CALL_OW 1
22415: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
22416: LD_VAR 0 1
22420: PPUSH
22421: LD_INT 0
22423: PPUSH
22424: CALL_OW 505
// end ; end ;
22428: LD_VAR 0 2
22432: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
22433: LD_INT 0
22435: PPUSH
22436: PPUSH
22437: PPUSH
// if not hack in hackTanks or not vehicles then
22438: LD_VAR 0 1
22442: PUSH
22443: LD_EXP 101
22447: IN
22448: NOT
22449: PUSH
22450: LD_VAR 0 2
22454: NOT
22455: OR
22456: IFFALSE 22460
// exit ;
22458: GO 22735
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
22460: LD_ADDR_VAR 0 2
22464: PUSH
22465: LD_VAR 0 1
22469: PPUSH
22470: LD_VAR 0 2
22474: PPUSH
22475: LD_INT 1
22477: PPUSH
22478: LD_INT 1
22480: PPUSH
22481: CALL 30512 0 4
22485: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
22486: LD_ADDR_VAR 0 5
22490: PUSH
22491: LD_EXP 101
22495: PPUSH
22496: LD_VAR 0 1
22500: PPUSH
22501: CALL 29862 0 2
22505: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
22506: LD_EXP 102
22510: PUSH
22511: LD_VAR 0 5
22515: ARRAY
22516: PUSH
22517: LD_EXP 103
22521: LESS
22522: IFFALSE 22711
// begin for i := 1 to vehicles do
22524: LD_ADDR_VAR 0 4
22528: PUSH
22529: DOUBLE
22530: LD_INT 1
22532: DEC
22533: ST_TO_ADDR
22534: LD_VAR 0 2
22538: PUSH
22539: FOR_TO
22540: IFFALSE 22709
// begin if hackTanksCaptured [ index ] = hackLimit then
22542: LD_EXP 102
22546: PUSH
22547: LD_VAR 0 5
22551: ARRAY
22552: PUSH
22553: LD_EXP 103
22557: EQUAL
22558: IFFALSE 22562
// break ;
22560: GO 22709
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
22562: LD_ADDR_EXP 105
22566: PUSH
22567: LD_EXP 105
22571: PPUSH
22572: LD_VAR 0 5
22576: PPUSH
22577: LD_EXP 105
22581: PUSH
22582: LD_VAR 0 5
22586: ARRAY
22587: PUSH
22588: LD_INT 1
22590: PLUS
22591: PPUSH
22592: CALL_OW 1
22596: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
22597: LD_ADDR_EXP 102
22601: PUSH
22602: LD_EXP 102
22606: PPUSH
22607: LD_VAR 0 5
22611: PUSH
22612: LD_EXP 102
22616: PUSH
22617: LD_VAR 0 5
22621: ARRAY
22622: PUSH
22623: LD_INT 1
22625: PLUS
22626: PUSH
22627: EMPTY
22628: LIST
22629: LIST
22630: PPUSH
22631: LD_VAR 0 2
22635: PUSH
22636: LD_VAR 0 4
22640: ARRAY
22641: PUSH
22642: LD_VAR 0 2
22646: PUSH
22647: LD_VAR 0 4
22651: ARRAY
22652: PPUSH
22653: CALL_OW 255
22657: PUSH
22658: EMPTY
22659: LIST
22660: LIST
22661: PPUSH
22662: CALL 30077 0 3
22666: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
22667: LD_VAR 0 2
22671: PUSH
22672: LD_VAR 0 4
22676: ARRAY
22677: PPUSH
22678: LD_VAR 0 1
22682: PPUSH
22683: CALL_OW 255
22687: PPUSH
22688: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
22692: LD_VAR 0 2
22696: PUSH
22697: LD_VAR 0 4
22701: ARRAY
22702: PPUSH
22703: CALL_OW 141
// end ;
22707: GO 22539
22709: POP
22710: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
22711: LD_VAR 0 1
22715: PPUSH
22716: LD_EXP 102
22720: PUSH
22721: LD_VAR 0 5
22725: ARRAY
22726: PUSH
22727: LD_INT 0
22729: PLUS
22730: PPUSH
22731: CALL_OW 505
// end ;
22735: LD_VAR 0 3
22739: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
22740: LD_INT 0
22742: PPUSH
22743: PPUSH
22744: PPUSH
22745: PPUSH
// if not hack in hackTanks then
22746: LD_VAR 0 1
22750: PUSH
22751: LD_EXP 101
22755: IN
22756: NOT
22757: IFFALSE 22761
// exit ;
22759: GO 23001
// index := GetElementIndex ( hackTanks , hack ) ;
22761: LD_ADDR_VAR 0 4
22765: PUSH
22766: LD_EXP 101
22770: PPUSH
22771: LD_VAR 0 1
22775: PPUSH
22776: CALL 29862 0 2
22780: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
22781: LD_ADDR_VAR 0 3
22785: PUSH
22786: DOUBLE
22787: LD_EXP 102
22791: PUSH
22792: LD_VAR 0 4
22796: ARRAY
22797: INC
22798: ST_TO_ADDR
22799: LD_INT 1
22801: PUSH
22802: FOR_DOWNTO
22803: IFFALSE 22975
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
22805: LD_ADDR_VAR 0 5
22809: PUSH
22810: LD_EXP 102
22814: PUSH
22815: LD_VAR 0 4
22819: ARRAY
22820: PUSH
22821: LD_VAR 0 3
22825: ARRAY
22826: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
22827: LD_VAR 0 5
22831: PUSH
22832: LD_INT 1
22834: ARRAY
22835: PPUSH
22836: CALL_OW 302
22840: NOT
22841: PUSH
22842: LD_VAR 0 5
22846: PUSH
22847: LD_INT 1
22849: ARRAY
22850: PPUSH
22851: CALL_OW 255
22855: PUSH
22856: LD_VAR 0 1
22860: PPUSH
22861: CALL_OW 255
22865: NONEQUAL
22866: OR
22867: IFFALSE 22973
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
22869: LD_VAR 0 5
22873: PUSH
22874: LD_INT 1
22876: ARRAY
22877: PPUSH
22878: CALL_OW 305
22882: PUSH
22883: LD_VAR 0 5
22887: PUSH
22888: LD_INT 1
22890: ARRAY
22891: PPUSH
22892: CALL_OW 255
22896: PUSH
22897: LD_VAR 0 1
22901: PPUSH
22902: CALL_OW 255
22906: EQUAL
22907: AND
22908: IFFALSE 22932
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
22910: LD_VAR 0 5
22914: PUSH
22915: LD_INT 1
22917: ARRAY
22918: PPUSH
22919: LD_VAR 0 5
22923: PUSH
22924: LD_INT 2
22926: ARRAY
22927: PPUSH
22928: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
22932: LD_ADDR_EXP 102
22936: PUSH
22937: LD_EXP 102
22941: PPUSH
22942: LD_VAR 0 4
22946: PPUSH
22947: LD_EXP 102
22951: PUSH
22952: LD_VAR 0 4
22956: ARRAY
22957: PPUSH
22958: LD_VAR 0 3
22962: PPUSH
22963: CALL_OW 3
22967: PPUSH
22968: CALL_OW 1
22972: ST_TO_ADDR
// end ; end ;
22973: GO 22802
22975: POP
22976: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
22977: LD_VAR 0 1
22981: PPUSH
22982: LD_EXP 102
22986: PUSH
22987: LD_VAR 0 4
22991: ARRAY
22992: PUSH
22993: LD_INT 0
22995: PLUS
22996: PPUSH
22997: CALL_OW 505
// end ;
23001: LD_VAR 0 2
23005: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
23006: LD_INT 0
23008: PPUSH
23009: PPUSH
23010: PPUSH
23011: PPUSH
// if not hack in hackTanks then
23012: LD_VAR 0 1
23016: PUSH
23017: LD_EXP 101
23021: IN
23022: NOT
23023: IFFALSE 23027
// exit ;
23025: GO 23112
// index := GetElementIndex ( hackTanks , hack ) ;
23027: LD_ADDR_VAR 0 5
23031: PUSH
23032: LD_EXP 101
23036: PPUSH
23037: LD_VAR 0 1
23041: PPUSH
23042: CALL 29862 0 2
23046: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
23047: LD_ADDR_VAR 0 4
23051: PUSH
23052: DOUBLE
23053: LD_INT 1
23055: DEC
23056: ST_TO_ADDR
23057: LD_EXP 102
23061: PUSH
23062: LD_VAR 0 5
23066: ARRAY
23067: PUSH
23068: FOR_TO
23069: IFFALSE 23110
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
23071: LD_EXP 102
23075: PUSH
23076: LD_VAR 0 5
23080: ARRAY
23081: PUSH
23082: LD_VAR 0 4
23086: ARRAY
23087: PUSH
23088: LD_INT 1
23090: ARRAY
23091: PUSH
23092: LD_VAR 0 2
23096: EQUAL
23097: IFFALSE 23108
// KillUnit ( vehicle ) ;
23099: LD_VAR 0 2
23103: PPUSH
23104: CALL_OW 66
23108: GO 23068
23110: POP
23111: POP
// end ;
23112: LD_VAR 0 3
23116: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
23117: LD_EXP 106
23121: NOT
23122: IFFALSE 23157
23124: GO 23126
23126: DISABLE
// begin initMiner := true ;
23127: LD_ADDR_EXP 106
23131: PUSH
23132: LD_INT 1
23134: ST_TO_ADDR
// minersList := [ ] ;
23135: LD_ADDR_EXP 107
23139: PUSH
23140: EMPTY
23141: ST_TO_ADDR
// minerMinesList := [ ] ;
23142: LD_ADDR_EXP 108
23146: PUSH
23147: EMPTY
23148: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
23149: LD_ADDR_EXP 109
23153: PUSH
23154: LD_INT 5
23156: ST_TO_ADDR
// end ;
23157: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
23158: LD_EXP 106
23162: PUSH
23163: LD_INT 34
23165: PUSH
23166: LD_EXP 36
23170: PUSH
23171: EMPTY
23172: LIST
23173: LIST
23174: PPUSH
23175: CALL_OW 69
23179: AND
23180: IFFALSE 23643
23182: GO 23184
23184: DISABLE
23185: LD_INT 0
23187: PPUSH
23188: PPUSH
23189: PPUSH
23190: PPUSH
// begin enable ;
23191: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
23192: LD_ADDR_VAR 0 1
23196: PUSH
23197: LD_INT 34
23199: PUSH
23200: LD_EXP 36
23204: PUSH
23205: EMPTY
23206: LIST
23207: LIST
23208: PPUSH
23209: CALL_OW 69
23213: PUSH
23214: FOR_IN
23215: IFFALSE 23287
// begin if not i in minersList then
23217: LD_VAR 0 1
23221: PUSH
23222: LD_EXP 107
23226: IN
23227: NOT
23228: IFFALSE 23285
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
23230: LD_ADDR_EXP 107
23234: PUSH
23235: LD_EXP 107
23239: PPUSH
23240: LD_EXP 107
23244: PUSH
23245: LD_INT 1
23247: PLUS
23248: PPUSH
23249: LD_VAR 0 1
23253: PPUSH
23254: CALL_OW 1
23258: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
23259: LD_ADDR_EXP 108
23263: PUSH
23264: LD_EXP 108
23268: PPUSH
23269: LD_EXP 108
23273: PUSH
23274: LD_INT 1
23276: PLUS
23277: PPUSH
23278: EMPTY
23279: PPUSH
23280: CALL_OW 1
23284: ST_TO_ADDR
// end end ;
23285: GO 23214
23287: POP
23288: POP
// for i := minerMinesList downto 1 do
23289: LD_ADDR_VAR 0 1
23293: PUSH
23294: DOUBLE
23295: LD_EXP 108
23299: INC
23300: ST_TO_ADDR
23301: LD_INT 1
23303: PUSH
23304: FOR_DOWNTO
23305: IFFALSE 23641
// begin if IsLive ( minersList [ i ] ) then
23307: LD_EXP 107
23311: PUSH
23312: LD_VAR 0 1
23316: ARRAY
23317: PPUSH
23318: CALL_OW 300
23322: IFFALSE 23350
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
23324: LD_EXP 107
23328: PUSH
23329: LD_VAR 0 1
23333: ARRAY
23334: PPUSH
23335: LD_EXP 108
23339: PUSH
23340: LD_VAR 0 1
23344: ARRAY
23345: PPUSH
23346: CALL_OW 505
// if not minerMinesList [ i ] then
23350: LD_EXP 108
23354: PUSH
23355: LD_VAR 0 1
23359: ARRAY
23360: NOT
23361: IFFALSE 23365
// continue ;
23363: GO 23304
// for j := minerMinesList [ i ] downto 1 do
23365: LD_ADDR_VAR 0 2
23369: PUSH
23370: DOUBLE
23371: LD_EXP 108
23375: PUSH
23376: LD_VAR 0 1
23380: ARRAY
23381: INC
23382: ST_TO_ADDR
23383: LD_INT 1
23385: PUSH
23386: FOR_DOWNTO
23387: IFFALSE 23637
// begin side := GetSide ( minersList [ i ] ) ;
23389: LD_ADDR_VAR 0 3
23393: PUSH
23394: LD_EXP 107
23398: PUSH
23399: LD_VAR 0 1
23403: ARRAY
23404: PPUSH
23405: CALL_OW 255
23409: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
23410: LD_ADDR_VAR 0 4
23414: PUSH
23415: LD_EXP 108
23419: PUSH
23420: LD_VAR 0 1
23424: ARRAY
23425: PUSH
23426: LD_VAR 0 2
23430: ARRAY
23431: PUSH
23432: LD_INT 1
23434: ARRAY
23435: PPUSH
23436: LD_EXP 108
23440: PUSH
23441: LD_VAR 0 1
23445: ARRAY
23446: PUSH
23447: LD_VAR 0 2
23451: ARRAY
23452: PUSH
23453: LD_INT 2
23455: ARRAY
23456: PPUSH
23457: CALL_OW 428
23461: ST_TO_ADDR
// if not tmp then
23462: LD_VAR 0 4
23466: NOT
23467: IFFALSE 23471
// continue ;
23469: GO 23386
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
23471: LD_VAR 0 4
23475: PUSH
23476: LD_INT 81
23478: PUSH
23479: LD_VAR 0 3
23483: PUSH
23484: EMPTY
23485: LIST
23486: LIST
23487: PPUSH
23488: CALL_OW 69
23492: IN
23493: PUSH
23494: LD_EXP 108
23498: PUSH
23499: LD_VAR 0 1
23503: ARRAY
23504: PUSH
23505: LD_VAR 0 2
23509: ARRAY
23510: PUSH
23511: LD_INT 1
23513: ARRAY
23514: PPUSH
23515: LD_EXP 108
23519: PUSH
23520: LD_VAR 0 1
23524: ARRAY
23525: PUSH
23526: LD_VAR 0 2
23530: ARRAY
23531: PUSH
23532: LD_INT 2
23534: ARRAY
23535: PPUSH
23536: CALL_OW 458
23540: AND
23541: IFFALSE 23635
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
23543: LD_EXP 108
23547: PUSH
23548: LD_VAR 0 1
23552: ARRAY
23553: PUSH
23554: LD_VAR 0 2
23558: ARRAY
23559: PUSH
23560: LD_INT 1
23562: ARRAY
23563: PPUSH
23564: LD_EXP 108
23568: PUSH
23569: LD_VAR 0 1
23573: ARRAY
23574: PUSH
23575: LD_VAR 0 2
23579: ARRAY
23580: PUSH
23581: LD_INT 2
23583: ARRAY
23584: PPUSH
23585: LD_VAR 0 3
23589: PPUSH
23590: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
23594: LD_ADDR_EXP 108
23598: PUSH
23599: LD_EXP 108
23603: PPUSH
23604: LD_VAR 0 1
23608: PPUSH
23609: LD_EXP 108
23613: PUSH
23614: LD_VAR 0 1
23618: ARRAY
23619: PPUSH
23620: LD_VAR 0 2
23624: PPUSH
23625: CALL_OW 3
23629: PPUSH
23630: CALL_OW 1
23634: ST_TO_ADDR
// end ; end ;
23635: GO 23386
23637: POP
23638: POP
// end ;
23639: GO 23304
23641: POP
23642: POP
// end ;
23643: PPOPN 4
23645: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
23646: LD_INT 0
23648: PPUSH
23649: PPUSH
// result := false ;
23650: LD_ADDR_VAR 0 4
23654: PUSH
23655: LD_INT 0
23657: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
23658: LD_VAR 0 1
23662: PPUSH
23663: CALL_OW 264
23667: PUSH
23668: LD_EXP 36
23672: EQUAL
23673: NOT
23674: IFFALSE 23678
// exit ;
23676: GO 23918
// index := GetElementIndex ( minersList , unit ) ;
23678: LD_ADDR_VAR 0 5
23682: PUSH
23683: LD_EXP 107
23687: PPUSH
23688: LD_VAR 0 1
23692: PPUSH
23693: CALL 29862 0 2
23697: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
23698: LD_EXP 108
23702: PUSH
23703: LD_VAR 0 5
23707: ARRAY
23708: PUSH
23709: LD_EXP 109
23713: GREATEREQUAL
23714: IFFALSE 23718
// exit ;
23716: GO 23918
// ComMoveXY ( unit , x , y ) ;
23718: LD_VAR 0 1
23722: PPUSH
23723: LD_VAR 0 2
23727: PPUSH
23728: LD_VAR 0 3
23732: PPUSH
23733: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
23737: LD_INT 35
23739: PPUSH
23740: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
23744: LD_VAR 0 1
23748: PPUSH
23749: LD_VAR 0 2
23753: PPUSH
23754: LD_VAR 0 3
23758: PPUSH
23759: CALL 59926 0 3
23763: NOT
23764: PUSH
23765: LD_VAR 0 1
23769: PPUSH
23770: CALL_OW 314
23774: AND
23775: IFFALSE 23779
// exit ;
23777: GO 23918
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
23779: LD_VAR 0 2
23783: PPUSH
23784: LD_VAR 0 3
23788: PPUSH
23789: CALL_OW 428
23793: PUSH
23794: LD_VAR 0 1
23798: EQUAL
23799: PUSH
23800: LD_VAR 0 1
23804: PPUSH
23805: CALL_OW 314
23809: NOT
23810: AND
23811: IFFALSE 23737
// PlaySoundXY ( x , y , PlantMine ) ;
23813: LD_VAR 0 2
23817: PPUSH
23818: LD_VAR 0 3
23822: PPUSH
23823: LD_STRING PlantMine
23825: PPUSH
23826: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
23830: LD_VAR 0 2
23834: PPUSH
23835: LD_VAR 0 3
23839: PPUSH
23840: LD_VAR 0 1
23844: PPUSH
23845: CALL_OW 255
23849: PPUSH
23850: LD_INT 0
23852: PPUSH
23853: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
23857: LD_ADDR_EXP 108
23861: PUSH
23862: LD_EXP 108
23866: PPUSH
23867: LD_VAR 0 5
23871: PUSH
23872: LD_EXP 108
23876: PUSH
23877: LD_VAR 0 5
23881: ARRAY
23882: PUSH
23883: LD_INT 1
23885: PLUS
23886: PUSH
23887: EMPTY
23888: LIST
23889: LIST
23890: PPUSH
23891: LD_VAR 0 2
23895: PUSH
23896: LD_VAR 0 3
23900: PUSH
23901: EMPTY
23902: LIST
23903: LIST
23904: PPUSH
23905: CALL 30077 0 3
23909: ST_TO_ADDR
// result := true ;
23910: LD_ADDR_VAR 0 4
23914: PUSH
23915: LD_INT 1
23917: ST_TO_ADDR
// end ;
23918: LD_VAR 0 4
23922: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
23923: LD_INT 0
23925: PPUSH
23926: PPUSH
23927: PPUSH
// if not unit in minersList then
23928: LD_VAR 0 1
23932: PUSH
23933: LD_EXP 107
23937: IN
23938: NOT
23939: IFFALSE 23943
// exit ;
23941: GO 24335
// index := GetElementIndex ( minersList , unit ) ;
23943: LD_ADDR_VAR 0 6
23947: PUSH
23948: LD_EXP 107
23952: PPUSH
23953: LD_VAR 0 1
23957: PPUSH
23958: CALL 29862 0 2
23962: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
23963: LD_ADDR_VAR 0 5
23967: PUSH
23968: DOUBLE
23969: LD_EXP 108
23973: PUSH
23974: LD_VAR 0 6
23978: ARRAY
23979: INC
23980: ST_TO_ADDR
23981: LD_INT 1
23983: PUSH
23984: FOR_DOWNTO
23985: IFFALSE 24146
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
23987: LD_EXP 108
23991: PUSH
23992: LD_VAR 0 6
23996: ARRAY
23997: PUSH
23998: LD_VAR 0 5
24002: ARRAY
24003: PUSH
24004: LD_INT 1
24006: ARRAY
24007: PUSH
24008: LD_VAR 0 2
24012: EQUAL
24013: PUSH
24014: LD_EXP 108
24018: PUSH
24019: LD_VAR 0 6
24023: ARRAY
24024: PUSH
24025: LD_VAR 0 5
24029: ARRAY
24030: PUSH
24031: LD_INT 2
24033: ARRAY
24034: PUSH
24035: LD_VAR 0 3
24039: EQUAL
24040: AND
24041: IFFALSE 24144
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
24043: LD_EXP 108
24047: PUSH
24048: LD_VAR 0 6
24052: ARRAY
24053: PUSH
24054: LD_VAR 0 5
24058: ARRAY
24059: PUSH
24060: LD_INT 1
24062: ARRAY
24063: PPUSH
24064: LD_EXP 108
24068: PUSH
24069: LD_VAR 0 6
24073: ARRAY
24074: PUSH
24075: LD_VAR 0 5
24079: ARRAY
24080: PUSH
24081: LD_INT 2
24083: ARRAY
24084: PPUSH
24085: LD_VAR 0 1
24089: PPUSH
24090: CALL_OW 255
24094: PPUSH
24095: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
24099: LD_ADDR_EXP 108
24103: PUSH
24104: LD_EXP 108
24108: PPUSH
24109: LD_VAR 0 6
24113: PPUSH
24114: LD_EXP 108
24118: PUSH
24119: LD_VAR 0 6
24123: ARRAY
24124: PPUSH
24125: LD_VAR 0 5
24129: PPUSH
24130: CALL_OW 3
24134: PPUSH
24135: CALL_OW 1
24139: ST_TO_ADDR
// exit ;
24140: POP
24141: POP
24142: GO 24335
// end ; end ;
24144: GO 23984
24146: POP
24147: POP
// for i := minerMinesList [ index ] downto 1 do
24148: LD_ADDR_VAR 0 5
24152: PUSH
24153: DOUBLE
24154: LD_EXP 108
24158: PUSH
24159: LD_VAR 0 6
24163: ARRAY
24164: INC
24165: ST_TO_ADDR
24166: LD_INT 1
24168: PUSH
24169: FOR_DOWNTO
24170: IFFALSE 24333
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
24172: LD_EXP 108
24176: PUSH
24177: LD_VAR 0 6
24181: ARRAY
24182: PUSH
24183: LD_VAR 0 5
24187: ARRAY
24188: PUSH
24189: LD_INT 1
24191: ARRAY
24192: PPUSH
24193: LD_EXP 108
24197: PUSH
24198: LD_VAR 0 6
24202: ARRAY
24203: PUSH
24204: LD_VAR 0 5
24208: ARRAY
24209: PUSH
24210: LD_INT 2
24212: ARRAY
24213: PPUSH
24214: LD_VAR 0 2
24218: PPUSH
24219: LD_VAR 0 3
24223: PPUSH
24224: CALL_OW 298
24228: PUSH
24229: LD_INT 6
24231: LESS
24232: IFFALSE 24331
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
24234: LD_EXP 108
24238: PUSH
24239: LD_VAR 0 6
24243: ARRAY
24244: PUSH
24245: LD_VAR 0 5
24249: ARRAY
24250: PUSH
24251: LD_INT 1
24253: ARRAY
24254: PPUSH
24255: LD_EXP 108
24259: PUSH
24260: LD_VAR 0 6
24264: ARRAY
24265: PUSH
24266: LD_VAR 0 5
24270: ARRAY
24271: PUSH
24272: LD_INT 2
24274: ARRAY
24275: PPUSH
24276: LD_VAR 0 1
24280: PPUSH
24281: CALL_OW 255
24285: PPUSH
24286: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
24290: LD_ADDR_EXP 108
24294: PUSH
24295: LD_EXP 108
24299: PPUSH
24300: LD_VAR 0 6
24304: PPUSH
24305: LD_EXP 108
24309: PUSH
24310: LD_VAR 0 6
24314: ARRAY
24315: PPUSH
24316: LD_VAR 0 5
24320: PPUSH
24321: CALL_OW 3
24325: PPUSH
24326: CALL_OW 1
24330: ST_TO_ADDR
// end ; end ;
24331: GO 24169
24333: POP
24334: POP
// end ;
24335: LD_VAR 0 4
24339: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
24340: LD_INT 0
24342: PPUSH
24343: PPUSH
24344: PPUSH
24345: PPUSH
24346: PPUSH
24347: PPUSH
24348: PPUSH
24349: PPUSH
24350: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
24351: LD_VAR 0 1
24355: PPUSH
24356: CALL_OW 264
24360: PUSH
24361: LD_EXP 36
24365: EQUAL
24366: NOT
24367: PUSH
24368: LD_VAR 0 1
24372: PUSH
24373: LD_EXP 107
24377: IN
24378: NOT
24379: OR
24380: IFFALSE 24384
// exit ;
24382: GO 24706
// index := GetElementIndex ( minersList , unit ) ;
24384: LD_ADDR_VAR 0 6
24388: PUSH
24389: LD_EXP 107
24393: PPUSH
24394: LD_VAR 0 1
24398: PPUSH
24399: CALL 29862 0 2
24403: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
24404: LD_ADDR_VAR 0 8
24408: PUSH
24409: LD_EXP 109
24413: PUSH
24414: LD_EXP 108
24418: PUSH
24419: LD_VAR 0 6
24423: ARRAY
24424: MINUS
24425: ST_TO_ADDR
// if not minesFreeAmount then
24426: LD_VAR 0 8
24430: NOT
24431: IFFALSE 24435
// exit ;
24433: GO 24706
// tmp := [ ] ;
24435: LD_ADDR_VAR 0 7
24439: PUSH
24440: EMPTY
24441: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
24442: LD_ADDR_VAR 0 5
24446: PUSH
24447: DOUBLE
24448: LD_INT 1
24450: DEC
24451: ST_TO_ADDR
24452: LD_VAR 0 8
24456: PUSH
24457: FOR_TO
24458: IFFALSE 24653
// begin _d := rand ( 0 , 5 ) ;
24460: LD_ADDR_VAR 0 11
24464: PUSH
24465: LD_INT 0
24467: PPUSH
24468: LD_INT 5
24470: PPUSH
24471: CALL_OW 12
24475: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
24476: LD_ADDR_VAR 0 12
24480: PUSH
24481: LD_INT 2
24483: PPUSH
24484: LD_INT 6
24486: PPUSH
24487: CALL_OW 12
24491: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
24492: LD_ADDR_VAR 0 9
24496: PUSH
24497: LD_VAR 0 2
24501: PPUSH
24502: LD_VAR 0 11
24506: PPUSH
24507: LD_VAR 0 12
24511: PPUSH
24512: CALL_OW 272
24516: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
24517: LD_ADDR_VAR 0 10
24521: PUSH
24522: LD_VAR 0 3
24526: PPUSH
24527: LD_VAR 0 11
24531: PPUSH
24532: LD_VAR 0 12
24536: PPUSH
24537: CALL_OW 273
24541: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
24542: LD_VAR 0 9
24546: PPUSH
24547: LD_VAR 0 10
24551: PPUSH
24552: CALL_OW 488
24556: PUSH
24557: LD_VAR 0 9
24561: PUSH
24562: LD_VAR 0 10
24566: PUSH
24567: EMPTY
24568: LIST
24569: LIST
24570: PUSH
24571: LD_VAR 0 7
24575: IN
24576: NOT
24577: AND
24578: PUSH
24579: LD_VAR 0 9
24583: PPUSH
24584: LD_VAR 0 10
24588: PPUSH
24589: CALL_OW 458
24593: NOT
24594: AND
24595: IFFALSE 24637
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
24597: LD_ADDR_VAR 0 7
24601: PUSH
24602: LD_VAR 0 7
24606: PPUSH
24607: LD_VAR 0 7
24611: PUSH
24612: LD_INT 1
24614: PLUS
24615: PPUSH
24616: LD_VAR 0 9
24620: PUSH
24621: LD_VAR 0 10
24625: PUSH
24626: EMPTY
24627: LIST
24628: LIST
24629: PPUSH
24630: CALL_OW 1
24634: ST_TO_ADDR
24635: GO 24651
// i := i - 1 ;
24637: LD_ADDR_VAR 0 5
24641: PUSH
24642: LD_VAR 0 5
24646: PUSH
24647: LD_INT 1
24649: MINUS
24650: ST_TO_ADDR
// end ;
24651: GO 24457
24653: POP
24654: POP
// for i in tmp do
24655: LD_ADDR_VAR 0 5
24659: PUSH
24660: LD_VAR 0 7
24664: PUSH
24665: FOR_IN
24666: IFFALSE 24704
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
24668: LD_VAR 0 1
24672: PPUSH
24673: LD_VAR 0 5
24677: PUSH
24678: LD_INT 1
24680: ARRAY
24681: PPUSH
24682: LD_VAR 0 5
24686: PUSH
24687: LD_INT 2
24689: ARRAY
24690: PPUSH
24691: CALL 23646 0 3
24695: NOT
24696: IFFALSE 24702
// exit ;
24698: POP
24699: POP
24700: GO 24706
24702: GO 24665
24704: POP
24705: POP
// end ;
24706: LD_VAR 0 4
24710: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
24711: LD_INT 0
24713: PPUSH
24714: PPUSH
24715: PPUSH
24716: PPUSH
24717: PPUSH
24718: PPUSH
24719: PPUSH
// if not GetClass ( unit ) = class_sniper then
24720: LD_VAR 0 1
24724: PPUSH
24725: CALL_OW 257
24729: PUSH
24730: LD_INT 5
24732: EQUAL
24733: NOT
24734: IFFALSE 24738
// exit ;
24736: GO 25126
// dist := 8 ;
24738: LD_ADDR_VAR 0 5
24742: PUSH
24743: LD_INT 8
24745: ST_TO_ADDR
// viewRange := 12 ;
24746: LD_ADDR_VAR 0 7
24750: PUSH
24751: LD_INT 12
24753: ST_TO_ADDR
// side := GetSide ( unit ) ;
24754: LD_ADDR_VAR 0 6
24758: PUSH
24759: LD_VAR 0 1
24763: PPUSH
24764: CALL_OW 255
24768: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
24769: LD_INT 61
24771: PPUSH
24772: LD_VAR 0 6
24776: PPUSH
24777: CALL_OW 321
24781: PUSH
24782: LD_INT 2
24784: EQUAL
24785: IFFALSE 24795
// viewRange := 16 ;
24787: LD_ADDR_VAR 0 7
24791: PUSH
24792: LD_INT 16
24794: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
24795: LD_VAR 0 1
24799: PPUSH
24800: LD_VAR 0 2
24804: PPUSH
24805: LD_VAR 0 3
24809: PPUSH
24810: CALL_OW 297
24814: PUSH
24815: LD_VAR 0 5
24819: GREATER
24820: IFFALSE 24899
// begin ComMoveXY ( unit , x , y ) ;
24822: LD_VAR 0 1
24826: PPUSH
24827: LD_VAR 0 2
24831: PPUSH
24832: LD_VAR 0 3
24836: PPUSH
24837: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
24841: LD_INT 35
24843: PPUSH
24844: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
24848: LD_VAR 0 1
24852: PPUSH
24853: LD_VAR 0 2
24857: PPUSH
24858: LD_VAR 0 3
24862: PPUSH
24863: CALL 59926 0 3
24867: NOT
24868: IFFALSE 24872
// exit ;
24870: GO 25126
// until GetDistUnitXY ( unit , x , y ) < dist ;
24872: LD_VAR 0 1
24876: PPUSH
24877: LD_VAR 0 2
24881: PPUSH
24882: LD_VAR 0 3
24886: PPUSH
24887: CALL_OW 297
24891: PUSH
24892: LD_VAR 0 5
24896: LESS
24897: IFFALSE 24841
// end ; ComTurnXY ( unit , x , y ) ;
24899: LD_VAR 0 1
24903: PPUSH
24904: LD_VAR 0 2
24908: PPUSH
24909: LD_VAR 0 3
24913: PPUSH
24914: CALL_OW 118
// wait ( 5 ) ;
24918: LD_INT 5
24920: PPUSH
24921: CALL_OW 67
// _d := GetDir ( unit ) ;
24925: LD_ADDR_VAR 0 10
24929: PUSH
24930: LD_VAR 0 1
24934: PPUSH
24935: CALL_OW 254
24939: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
24940: LD_ADDR_VAR 0 8
24944: PUSH
24945: LD_VAR 0 1
24949: PPUSH
24950: CALL_OW 250
24954: PPUSH
24955: LD_VAR 0 10
24959: PPUSH
24960: LD_VAR 0 5
24964: PPUSH
24965: CALL_OW 272
24969: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
24970: LD_ADDR_VAR 0 9
24974: PUSH
24975: LD_VAR 0 1
24979: PPUSH
24980: CALL_OW 251
24984: PPUSH
24985: LD_VAR 0 10
24989: PPUSH
24990: LD_VAR 0 5
24994: PPUSH
24995: CALL_OW 273
24999: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
25000: LD_VAR 0 8
25004: PPUSH
25005: LD_VAR 0 9
25009: PPUSH
25010: CALL_OW 488
25014: NOT
25015: IFFALSE 25019
// exit ;
25017: GO 25126
// ComAnimCustom ( unit , 1 ) ;
25019: LD_VAR 0 1
25023: PPUSH
25024: LD_INT 1
25026: PPUSH
25027: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
25031: LD_VAR 0 8
25035: PPUSH
25036: LD_VAR 0 9
25040: PPUSH
25041: LD_VAR 0 6
25045: PPUSH
25046: LD_VAR 0 7
25050: PPUSH
25051: CALL_OW 330
// repeat wait ( 1 ) ;
25055: LD_INT 1
25057: PPUSH
25058: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
25062: LD_VAR 0 1
25066: PPUSH
25067: CALL_OW 316
25071: PUSH
25072: LD_VAR 0 1
25076: PPUSH
25077: CALL_OW 314
25081: OR
25082: PUSH
25083: LD_VAR 0 1
25087: PPUSH
25088: CALL_OW 302
25092: NOT
25093: OR
25094: PUSH
25095: LD_VAR 0 1
25099: PPUSH
25100: CALL_OW 301
25104: OR
25105: IFFALSE 25055
// RemoveSeeing ( _x , _y , side ) ;
25107: LD_VAR 0 8
25111: PPUSH
25112: LD_VAR 0 9
25116: PPUSH
25117: LD_VAR 0 6
25121: PPUSH
25122: CALL_OW 331
// end ; end_of_file
25126: LD_VAR 0 4
25130: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
25131: LD_INT 0
25133: PPUSH
25134: PPUSH
// if exist_mode then
25135: LD_VAR 0 2
25139: IFFALSE 25164
// unit := CreateCharacter ( prefix & ident ) else
25141: LD_ADDR_VAR 0 5
25145: PUSH
25146: LD_VAR 0 3
25150: PUSH
25151: LD_VAR 0 1
25155: STR
25156: PPUSH
25157: CALL_OW 34
25161: ST_TO_ADDR
25162: GO 25179
// unit := NewCharacter ( ident ) ;
25164: LD_ADDR_VAR 0 5
25168: PUSH
25169: LD_VAR 0 1
25173: PPUSH
25174: CALL_OW 25
25178: ST_TO_ADDR
// result := unit ;
25179: LD_ADDR_VAR 0 4
25183: PUSH
25184: LD_VAR 0 5
25188: ST_TO_ADDR
// end ;
25189: LD_VAR 0 4
25193: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
25194: LD_INT 0
25196: PPUSH
25197: PPUSH
// if not side or not nation then
25198: LD_VAR 0 1
25202: NOT
25203: PUSH
25204: LD_VAR 0 2
25208: NOT
25209: OR
25210: IFFALSE 25214
// exit ;
25212: GO 25978
// case nation of nation_american :
25214: LD_VAR 0 2
25218: PUSH
25219: LD_INT 1
25221: DOUBLE
25222: EQUAL
25223: IFTRUE 25227
25225: GO 25441
25227: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
25228: LD_ADDR_VAR 0 4
25232: PUSH
25233: LD_INT 35
25235: PUSH
25236: LD_INT 45
25238: PUSH
25239: LD_INT 46
25241: PUSH
25242: LD_INT 47
25244: PUSH
25245: LD_INT 82
25247: PUSH
25248: LD_INT 83
25250: PUSH
25251: LD_INT 84
25253: PUSH
25254: LD_INT 85
25256: PUSH
25257: LD_INT 86
25259: PUSH
25260: LD_INT 1
25262: PUSH
25263: LD_INT 2
25265: PUSH
25266: LD_INT 6
25268: PUSH
25269: LD_INT 15
25271: PUSH
25272: LD_INT 16
25274: PUSH
25275: LD_INT 7
25277: PUSH
25278: LD_INT 12
25280: PUSH
25281: LD_INT 13
25283: PUSH
25284: LD_INT 10
25286: PUSH
25287: LD_INT 14
25289: PUSH
25290: LD_INT 20
25292: PUSH
25293: LD_INT 21
25295: PUSH
25296: LD_INT 22
25298: PUSH
25299: LD_INT 25
25301: PUSH
25302: LD_INT 32
25304: PUSH
25305: LD_INT 27
25307: PUSH
25308: LD_INT 36
25310: PUSH
25311: LD_INT 69
25313: PUSH
25314: LD_INT 39
25316: PUSH
25317: LD_INT 34
25319: PUSH
25320: LD_INT 40
25322: PUSH
25323: LD_INT 48
25325: PUSH
25326: LD_INT 49
25328: PUSH
25329: LD_INT 50
25331: PUSH
25332: LD_INT 51
25334: PUSH
25335: LD_INT 52
25337: PUSH
25338: LD_INT 53
25340: PUSH
25341: LD_INT 54
25343: PUSH
25344: LD_INT 55
25346: PUSH
25347: LD_INT 56
25349: PUSH
25350: LD_INT 57
25352: PUSH
25353: LD_INT 58
25355: PUSH
25356: LD_INT 59
25358: PUSH
25359: LD_INT 60
25361: PUSH
25362: LD_INT 61
25364: PUSH
25365: LD_INT 62
25367: PUSH
25368: LD_INT 80
25370: PUSH
25371: LD_INT 82
25373: PUSH
25374: LD_INT 83
25376: PUSH
25377: LD_INT 84
25379: PUSH
25380: LD_INT 85
25382: PUSH
25383: LD_INT 86
25385: PUSH
25386: EMPTY
25387: LIST
25388: LIST
25389: LIST
25390: LIST
25391: LIST
25392: LIST
25393: LIST
25394: LIST
25395: LIST
25396: LIST
25397: LIST
25398: LIST
25399: LIST
25400: LIST
25401: LIST
25402: LIST
25403: LIST
25404: LIST
25405: LIST
25406: LIST
25407: LIST
25408: LIST
25409: LIST
25410: LIST
25411: LIST
25412: LIST
25413: LIST
25414: LIST
25415: LIST
25416: LIST
25417: LIST
25418: LIST
25419: LIST
25420: LIST
25421: LIST
25422: LIST
25423: LIST
25424: LIST
25425: LIST
25426: LIST
25427: LIST
25428: LIST
25429: LIST
25430: LIST
25431: LIST
25432: LIST
25433: LIST
25434: LIST
25435: LIST
25436: LIST
25437: LIST
25438: ST_TO_ADDR
25439: GO 25902
25441: LD_INT 2
25443: DOUBLE
25444: EQUAL
25445: IFTRUE 25449
25447: GO 25671
25449: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
25450: LD_ADDR_VAR 0 4
25454: PUSH
25455: LD_INT 35
25457: PUSH
25458: LD_INT 45
25460: PUSH
25461: LD_INT 46
25463: PUSH
25464: LD_INT 47
25466: PUSH
25467: LD_INT 82
25469: PUSH
25470: LD_INT 83
25472: PUSH
25473: LD_INT 84
25475: PUSH
25476: LD_INT 85
25478: PUSH
25479: LD_INT 87
25481: PUSH
25482: LD_INT 70
25484: PUSH
25485: LD_INT 1
25487: PUSH
25488: LD_INT 11
25490: PUSH
25491: LD_INT 3
25493: PUSH
25494: LD_INT 4
25496: PUSH
25497: LD_INT 5
25499: PUSH
25500: LD_INT 6
25502: PUSH
25503: LD_INT 15
25505: PUSH
25506: LD_INT 18
25508: PUSH
25509: LD_INT 7
25511: PUSH
25512: LD_INT 17
25514: PUSH
25515: LD_INT 8
25517: PUSH
25518: LD_INT 20
25520: PUSH
25521: LD_INT 21
25523: PUSH
25524: LD_INT 22
25526: PUSH
25527: LD_INT 72
25529: PUSH
25530: LD_INT 26
25532: PUSH
25533: LD_INT 69
25535: PUSH
25536: LD_INT 39
25538: PUSH
25539: LD_INT 40
25541: PUSH
25542: LD_INT 41
25544: PUSH
25545: LD_INT 42
25547: PUSH
25548: LD_INT 43
25550: PUSH
25551: LD_INT 48
25553: PUSH
25554: LD_INT 49
25556: PUSH
25557: LD_INT 50
25559: PUSH
25560: LD_INT 51
25562: PUSH
25563: LD_INT 52
25565: PUSH
25566: LD_INT 53
25568: PUSH
25569: LD_INT 54
25571: PUSH
25572: LD_INT 55
25574: PUSH
25575: LD_INT 56
25577: PUSH
25578: LD_INT 60
25580: PUSH
25581: LD_INT 61
25583: PUSH
25584: LD_INT 62
25586: PUSH
25587: LD_INT 66
25589: PUSH
25590: LD_INT 67
25592: PUSH
25593: LD_INT 68
25595: PUSH
25596: LD_INT 81
25598: PUSH
25599: LD_INT 82
25601: PUSH
25602: LD_INT 83
25604: PUSH
25605: LD_INT 84
25607: PUSH
25608: LD_INT 85
25610: PUSH
25611: LD_INT 87
25613: PUSH
25614: EMPTY
25615: LIST
25616: LIST
25617: LIST
25618: LIST
25619: LIST
25620: LIST
25621: LIST
25622: LIST
25623: LIST
25624: LIST
25625: LIST
25626: LIST
25627: LIST
25628: LIST
25629: LIST
25630: LIST
25631: LIST
25632: LIST
25633: LIST
25634: LIST
25635: LIST
25636: LIST
25637: LIST
25638: LIST
25639: LIST
25640: LIST
25641: LIST
25642: LIST
25643: LIST
25644: LIST
25645: LIST
25646: LIST
25647: LIST
25648: LIST
25649: LIST
25650: LIST
25651: LIST
25652: LIST
25653: LIST
25654: LIST
25655: LIST
25656: LIST
25657: LIST
25658: LIST
25659: LIST
25660: LIST
25661: LIST
25662: LIST
25663: LIST
25664: LIST
25665: LIST
25666: LIST
25667: LIST
25668: ST_TO_ADDR
25669: GO 25902
25671: LD_INT 3
25673: DOUBLE
25674: EQUAL
25675: IFTRUE 25679
25677: GO 25901
25679: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
25680: LD_ADDR_VAR 0 4
25684: PUSH
25685: LD_INT 46
25687: PUSH
25688: LD_INT 47
25690: PUSH
25691: LD_INT 1
25693: PUSH
25694: LD_INT 2
25696: PUSH
25697: LD_INT 82
25699: PUSH
25700: LD_INT 83
25702: PUSH
25703: LD_INT 84
25705: PUSH
25706: LD_INT 85
25708: PUSH
25709: LD_INT 86
25711: PUSH
25712: LD_INT 11
25714: PUSH
25715: LD_INT 9
25717: PUSH
25718: LD_INT 20
25720: PUSH
25721: LD_INT 19
25723: PUSH
25724: LD_INT 21
25726: PUSH
25727: LD_INT 24
25729: PUSH
25730: LD_INT 22
25732: PUSH
25733: LD_INT 25
25735: PUSH
25736: LD_INT 28
25738: PUSH
25739: LD_INT 29
25741: PUSH
25742: LD_INT 30
25744: PUSH
25745: LD_INT 31
25747: PUSH
25748: LD_INT 37
25750: PUSH
25751: LD_INT 38
25753: PUSH
25754: LD_INT 32
25756: PUSH
25757: LD_INT 27
25759: PUSH
25760: LD_INT 33
25762: PUSH
25763: LD_INT 69
25765: PUSH
25766: LD_INT 39
25768: PUSH
25769: LD_INT 34
25771: PUSH
25772: LD_INT 40
25774: PUSH
25775: LD_INT 71
25777: PUSH
25778: LD_INT 23
25780: PUSH
25781: LD_INT 44
25783: PUSH
25784: LD_INT 48
25786: PUSH
25787: LD_INT 49
25789: PUSH
25790: LD_INT 50
25792: PUSH
25793: LD_INT 51
25795: PUSH
25796: LD_INT 52
25798: PUSH
25799: LD_INT 53
25801: PUSH
25802: LD_INT 54
25804: PUSH
25805: LD_INT 55
25807: PUSH
25808: LD_INT 56
25810: PUSH
25811: LD_INT 57
25813: PUSH
25814: LD_INT 58
25816: PUSH
25817: LD_INT 59
25819: PUSH
25820: LD_INT 63
25822: PUSH
25823: LD_INT 64
25825: PUSH
25826: LD_INT 65
25828: PUSH
25829: LD_INT 82
25831: PUSH
25832: LD_INT 83
25834: PUSH
25835: LD_INT 84
25837: PUSH
25838: LD_INT 85
25840: PUSH
25841: LD_INT 86
25843: PUSH
25844: EMPTY
25845: LIST
25846: LIST
25847: LIST
25848: LIST
25849: LIST
25850: LIST
25851: LIST
25852: LIST
25853: LIST
25854: LIST
25855: LIST
25856: LIST
25857: LIST
25858: LIST
25859: LIST
25860: LIST
25861: LIST
25862: LIST
25863: LIST
25864: LIST
25865: LIST
25866: LIST
25867: LIST
25868: LIST
25869: LIST
25870: LIST
25871: LIST
25872: LIST
25873: LIST
25874: LIST
25875: LIST
25876: LIST
25877: LIST
25878: LIST
25879: LIST
25880: LIST
25881: LIST
25882: LIST
25883: LIST
25884: LIST
25885: LIST
25886: LIST
25887: LIST
25888: LIST
25889: LIST
25890: LIST
25891: LIST
25892: LIST
25893: LIST
25894: LIST
25895: LIST
25896: LIST
25897: LIST
25898: ST_TO_ADDR
25899: GO 25902
25901: POP
// if state > - 1 and state < 3 then
25902: LD_VAR 0 3
25906: PUSH
25907: LD_INT 1
25909: NEG
25910: GREATER
25911: PUSH
25912: LD_VAR 0 3
25916: PUSH
25917: LD_INT 3
25919: LESS
25920: AND
25921: IFFALSE 25978
// for i in result do
25923: LD_ADDR_VAR 0 5
25927: PUSH
25928: LD_VAR 0 4
25932: PUSH
25933: FOR_IN
25934: IFFALSE 25976
// if GetTech ( i , side ) <> state then
25936: LD_VAR 0 5
25940: PPUSH
25941: LD_VAR 0 1
25945: PPUSH
25946: CALL_OW 321
25950: PUSH
25951: LD_VAR 0 3
25955: NONEQUAL
25956: IFFALSE 25974
// result := result diff i ;
25958: LD_ADDR_VAR 0 4
25962: PUSH
25963: LD_VAR 0 4
25967: PUSH
25968: LD_VAR 0 5
25972: DIFF
25973: ST_TO_ADDR
25974: GO 25933
25976: POP
25977: POP
// end ;
25978: LD_VAR 0 4
25982: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
25983: LD_INT 0
25985: PPUSH
25986: PPUSH
25987: PPUSH
// result := true ;
25988: LD_ADDR_VAR 0 3
25992: PUSH
25993: LD_INT 1
25995: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
25996: LD_ADDR_VAR 0 5
26000: PUSH
26001: LD_VAR 0 2
26005: PPUSH
26006: CALL_OW 480
26010: ST_TO_ADDR
// if not tmp then
26011: LD_VAR 0 5
26015: NOT
26016: IFFALSE 26020
// exit ;
26018: GO 26069
// for i in tmp do
26020: LD_ADDR_VAR 0 4
26024: PUSH
26025: LD_VAR 0 5
26029: PUSH
26030: FOR_IN
26031: IFFALSE 26067
// if GetTech ( i , side ) <> state_researched then
26033: LD_VAR 0 4
26037: PPUSH
26038: LD_VAR 0 1
26042: PPUSH
26043: CALL_OW 321
26047: PUSH
26048: LD_INT 2
26050: NONEQUAL
26051: IFFALSE 26065
// begin result := false ;
26053: LD_ADDR_VAR 0 3
26057: PUSH
26058: LD_INT 0
26060: ST_TO_ADDR
// exit ;
26061: POP
26062: POP
26063: GO 26069
// end ;
26065: GO 26030
26067: POP
26068: POP
// end ;
26069: LD_VAR 0 3
26073: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
26074: LD_INT 0
26076: PPUSH
26077: PPUSH
26078: PPUSH
26079: PPUSH
26080: PPUSH
26081: PPUSH
26082: PPUSH
26083: PPUSH
26084: PPUSH
26085: PPUSH
26086: PPUSH
26087: PPUSH
26088: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
26089: LD_VAR 0 1
26093: NOT
26094: PUSH
26095: LD_VAR 0 1
26099: PPUSH
26100: CALL_OW 257
26104: PUSH
26105: LD_INT 9
26107: NONEQUAL
26108: OR
26109: IFFALSE 26113
// exit ;
26111: GO 26686
// side := GetSide ( unit ) ;
26113: LD_ADDR_VAR 0 9
26117: PUSH
26118: LD_VAR 0 1
26122: PPUSH
26123: CALL_OW 255
26127: ST_TO_ADDR
// tech_space := tech_spacanom ;
26128: LD_ADDR_VAR 0 12
26132: PUSH
26133: LD_INT 29
26135: ST_TO_ADDR
// tech_time := tech_taurad ;
26136: LD_ADDR_VAR 0 13
26140: PUSH
26141: LD_INT 28
26143: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
26144: LD_ADDR_VAR 0 11
26148: PUSH
26149: LD_VAR 0 1
26153: PPUSH
26154: CALL_OW 310
26158: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
26159: LD_VAR 0 11
26163: PPUSH
26164: CALL_OW 247
26168: PUSH
26169: LD_INT 2
26171: EQUAL
26172: IFFALSE 26176
// exit ;
26174: GO 26686
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
26176: LD_ADDR_VAR 0 8
26180: PUSH
26181: LD_INT 81
26183: PUSH
26184: LD_VAR 0 9
26188: PUSH
26189: EMPTY
26190: LIST
26191: LIST
26192: PUSH
26193: LD_INT 3
26195: PUSH
26196: LD_INT 21
26198: PUSH
26199: LD_INT 3
26201: PUSH
26202: EMPTY
26203: LIST
26204: LIST
26205: PUSH
26206: EMPTY
26207: LIST
26208: LIST
26209: PUSH
26210: EMPTY
26211: LIST
26212: LIST
26213: PPUSH
26214: CALL_OW 69
26218: ST_TO_ADDR
// if not tmp then
26219: LD_VAR 0 8
26223: NOT
26224: IFFALSE 26228
// exit ;
26226: GO 26686
// if in_unit then
26228: LD_VAR 0 11
26232: IFFALSE 26256
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
26234: LD_ADDR_VAR 0 10
26238: PUSH
26239: LD_VAR 0 8
26243: PPUSH
26244: LD_VAR 0 11
26248: PPUSH
26249: CALL_OW 74
26253: ST_TO_ADDR
26254: GO 26276
// enemy := NearestUnitToUnit ( tmp , unit ) ;
26256: LD_ADDR_VAR 0 10
26260: PUSH
26261: LD_VAR 0 8
26265: PPUSH
26266: LD_VAR 0 1
26270: PPUSH
26271: CALL_OW 74
26275: ST_TO_ADDR
// if not enemy then
26276: LD_VAR 0 10
26280: NOT
26281: IFFALSE 26285
// exit ;
26283: GO 26686
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
26285: LD_VAR 0 11
26289: PUSH
26290: LD_VAR 0 11
26294: PPUSH
26295: LD_VAR 0 10
26299: PPUSH
26300: CALL_OW 296
26304: PUSH
26305: LD_INT 13
26307: GREATER
26308: AND
26309: PUSH
26310: LD_VAR 0 1
26314: PPUSH
26315: LD_VAR 0 10
26319: PPUSH
26320: CALL_OW 296
26324: PUSH
26325: LD_INT 12
26327: GREATER
26328: OR
26329: IFFALSE 26333
// exit ;
26331: GO 26686
// missile := [ 1 ] ;
26333: LD_ADDR_VAR 0 14
26337: PUSH
26338: LD_INT 1
26340: PUSH
26341: EMPTY
26342: LIST
26343: ST_TO_ADDR
// if Researched ( side , tech_space ) then
26344: LD_VAR 0 9
26348: PPUSH
26349: LD_VAR 0 12
26353: PPUSH
26354: CALL_OW 325
26358: IFFALSE 26387
// missile := Insert ( missile , missile + 1 , 2 ) ;
26360: LD_ADDR_VAR 0 14
26364: PUSH
26365: LD_VAR 0 14
26369: PPUSH
26370: LD_VAR 0 14
26374: PUSH
26375: LD_INT 1
26377: PLUS
26378: PPUSH
26379: LD_INT 2
26381: PPUSH
26382: CALL_OW 2
26386: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
26387: LD_VAR 0 9
26391: PPUSH
26392: LD_VAR 0 13
26396: PPUSH
26397: CALL_OW 325
26401: PUSH
26402: LD_VAR 0 10
26406: PPUSH
26407: CALL_OW 255
26411: PPUSH
26412: LD_VAR 0 13
26416: PPUSH
26417: CALL_OW 325
26421: NOT
26422: AND
26423: IFFALSE 26452
// missile := Insert ( missile , missile + 1 , 3 ) ;
26425: LD_ADDR_VAR 0 14
26429: PUSH
26430: LD_VAR 0 14
26434: PPUSH
26435: LD_VAR 0 14
26439: PUSH
26440: LD_INT 1
26442: PLUS
26443: PPUSH
26444: LD_INT 3
26446: PPUSH
26447: CALL_OW 2
26451: ST_TO_ADDR
// if missile < 2 then
26452: LD_VAR 0 14
26456: PUSH
26457: LD_INT 2
26459: LESS
26460: IFFALSE 26464
// exit ;
26462: GO 26686
// x := GetX ( enemy ) ;
26464: LD_ADDR_VAR 0 4
26468: PUSH
26469: LD_VAR 0 10
26473: PPUSH
26474: CALL_OW 250
26478: ST_TO_ADDR
// y := GetY ( enemy ) ;
26479: LD_ADDR_VAR 0 5
26483: PUSH
26484: LD_VAR 0 10
26488: PPUSH
26489: CALL_OW 251
26493: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
26494: LD_ADDR_VAR 0 6
26498: PUSH
26499: LD_VAR 0 4
26503: PUSH
26504: LD_INT 1
26506: NEG
26507: PPUSH
26508: LD_INT 1
26510: PPUSH
26511: CALL_OW 12
26515: PLUS
26516: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
26517: LD_ADDR_VAR 0 7
26521: PUSH
26522: LD_VAR 0 5
26526: PUSH
26527: LD_INT 1
26529: NEG
26530: PPUSH
26531: LD_INT 1
26533: PPUSH
26534: CALL_OW 12
26538: PLUS
26539: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
26540: LD_VAR 0 6
26544: PPUSH
26545: LD_VAR 0 7
26549: PPUSH
26550: CALL_OW 488
26554: NOT
26555: IFFALSE 26577
// begin _x := x ;
26557: LD_ADDR_VAR 0 6
26561: PUSH
26562: LD_VAR 0 4
26566: ST_TO_ADDR
// _y := y ;
26567: LD_ADDR_VAR 0 7
26571: PUSH
26572: LD_VAR 0 5
26576: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
26577: LD_ADDR_VAR 0 3
26581: PUSH
26582: LD_INT 1
26584: PPUSH
26585: LD_VAR 0 14
26589: PPUSH
26590: CALL_OW 12
26594: ST_TO_ADDR
// case i of 1 :
26595: LD_VAR 0 3
26599: PUSH
26600: LD_INT 1
26602: DOUBLE
26603: EQUAL
26604: IFTRUE 26608
26606: GO 26625
26608: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
26609: LD_VAR 0 1
26613: PPUSH
26614: LD_VAR 0 10
26618: PPUSH
26619: CALL_OW 115
26623: GO 26686
26625: LD_INT 2
26627: DOUBLE
26628: EQUAL
26629: IFTRUE 26633
26631: GO 26655
26633: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
26634: LD_VAR 0 1
26638: PPUSH
26639: LD_VAR 0 6
26643: PPUSH
26644: LD_VAR 0 7
26648: PPUSH
26649: CALL_OW 153
26653: GO 26686
26655: LD_INT 3
26657: DOUBLE
26658: EQUAL
26659: IFTRUE 26663
26661: GO 26685
26663: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
26664: LD_VAR 0 1
26668: PPUSH
26669: LD_VAR 0 6
26673: PPUSH
26674: LD_VAR 0 7
26678: PPUSH
26679: CALL_OW 154
26683: GO 26686
26685: POP
// end ;
26686: LD_VAR 0 2
26690: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
26691: LD_INT 0
26693: PPUSH
26694: PPUSH
26695: PPUSH
26696: PPUSH
26697: PPUSH
26698: PPUSH
// if not unit or not building then
26699: LD_VAR 0 1
26703: NOT
26704: PUSH
26705: LD_VAR 0 2
26709: NOT
26710: OR
26711: IFFALSE 26715
// exit ;
26713: GO 26873
// x := GetX ( building ) ;
26715: LD_ADDR_VAR 0 5
26719: PUSH
26720: LD_VAR 0 2
26724: PPUSH
26725: CALL_OW 250
26729: ST_TO_ADDR
// y := GetY ( building ) ;
26730: LD_ADDR_VAR 0 6
26734: PUSH
26735: LD_VAR 0 2
26739: PPUSH
26740: CALL_OW 251
26744: ST_TO_ADDR
// for i = 0 to 5 do
26745: LD_ADDR_VAR 0 4
26749: PUSH
26750: DOUBLE
26751: LD_INT 0
26753: DEC
26754: ST_TO_ADDR
26755: LD_INT 5
26757: PUSH
26758: FOR_TO
26759: IFFALSE 26871
// begin _x := ShiftX ( x , i , 3 ) ;
26761: LD_ADDR_VAR 0 7
26765: PUSH
26766: LD_VAR 0 5
26770: PPUSH
26771: LD_VAR 0 4
26775: PPUSH
26776: LD_INT 3
26778: PPUSH
26779: CALL_OW 272
26783: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
26784: LD_ADDR_VAR 0 8
26788: PUSH
26789: LD_VAR 0 6
26793: PPUSH
26794: LD_VAR 0 4
26798: PPUSH
26799: LD_INT 3
26801: PPUSH
26802: CALL_OW 273
26806: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
26807: LD_VAR 0 7
26811: PPUSH
26812: LD_VAR 0 8
26816: PPUSH
26817: CALL_OW 488
26821: NOT
26822: IFFALSE 26826
// continue ;
26824: GO 26758
// if HexInfo ( _x , _y ) = 0 then
26826: LD_VAR 0 7
26830: PPUSH
26831: LD_VAR 0 8
26835: PPUSH
26836: CALL_OW 428
26840: PUSH
26841: LD_INT 0
26843: EQUAL
26844: IFFALSE 26869
// begin ComMoveXY ( unit , _x , _y ) ;
26846: LD_VAR 0 1
26850: PPUSH
26851: LD_VAR 0 7
26855: PPUSH
26856: LD_VAR 0 8
26860: PPUSH
26861: CALL_OW 111
// exit ;
26865: POP
26866: POP
26867: GO 26873
// end ; end ;
26869: GO 26758
26871: POP
26872: POP
// end ;
26873: LD_VAR 0 3
26877: RET
// export function ScanBase ( side , base_area ) ; begin
26878: LD_INT 0
26880: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
26881: LD_ADDR_VAR 0 3
26885: PUSH
26886: LD_VAR 0 2
26890: PPUSH
26891: LD_INT 81
26893: PUSH
26894: LD_VAR 0 1
26898: PUSH
26899: EMPTY
26900: LIST
26901: LIST
26902: PPUSH
26903: CALL_OW 70
26907: ST_TO_ADDR
// end ;
26908: LD_VAR 0 3
26912: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
26913: LD_INT 0
26915: PPUSH
26916: PPUSH
26917: PPUSH
26918: PPUSH
// result := false ;
26919: LD_ADDR_VAR 0 2
26923: PUSH
26924: LD_INT 0
26926: ST_TO_ADDR
// side := GetSide ( unit ) ;
26927: LD_ADDR_VAR 0 3
26931: PUSH
26932: LD_VAR 0 1
26936: PPUSH
26937: CALL_OW 255
26941: ST_TO_ADDR
// nat := GetNation ( unit ) ;
26942: LD_ADDR_VAR 0 4
26946: PUSH
26947: LD_VAR 0 1
26951: PPUSH
26952: CALL_OW 248
26956: ST_TO_ADDR
// case nat of 1 :
26957: LD_VAR 0 4
26961: PUSH
26962: LD_INT 1
26964: DOUBLE
26965: EQUAL
26966: IFTRUE 26970
26968: GO 26981
26970: POP
// tech := tech_lassight ; 2 :
26971: LD_ADDR_VAR 0 5
26975: PUSH
26976: LD_INT 12
26978: ST_TO_ADDR
26979: GO 27020
26981: LD_INT 2
26983: DOUBLE
26984: EQUAL
26985: IFTRUE 26989
26987: GO 27000
26989: POP
// tech := tech_mortar ; 3 :
26990: LD_ADDR_VAR 0 5
26994: PUSH
26995: LD_INT 41
26997: ST_TO_ADDR
26998: GO 27020
27000: LD_INT 3
27002: DOUBLE
27003: EQUAL
27004: IFTRUE 27008
27006: GO 27019
27008: POP
// tech := tech_bazooka ; end ;
27009: LD_ADDR_VAR 0 5
27013: PUSH
27014: LD_INT 44
27016: ST_TO_ADDR
27017: GO 27020
27019: POP
// if Researched ( side , tech ) then
27020: LD_VAR 0 3
27024: PPUSH
27025: LD_VAR 0 5
27029: PPUSH
27030: CALL_OW 325
27034: IFFALSE 27061
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
27036: LD_ADDR_VAR 0 2
27040: PUSH
27041: LD_INT 5
27043: PUSH
27044: LD_INT 8
27046: PUSH
27047: LD_INT 9
27049: PUSH
27050: EMPTY
27051: LIST
27052: LIST
27053: LIST
27054: PUSH
27055: LD_VAR 0 4
27059: ARRAY
27060: ST_TO_ADDR
// end ;
27061: LD_VAR 0 2
27065: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
27066: LD_INT 0
27068: PPUSH
27069: PPUSH
27070: PPUSH
// if not mines then
27071: LD_VAR 0 2
27075: NOT
27076: IFFALSE 27080
// exit ;
27078: GO 27224
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
27080: LD_ADDR_VAR 0 5
27084: PUSH
27085: LD_INT 81
27087: PUSH
27088: LD_VAR 0 1
27092: PUSH
27093: EMPTY
27094: LIST
27095: LIST
27096: PUSH
27097: LD_INT 3
27099: PUSH
27100: LD_INT 21
27102: PUSH
27103: LD_INT 3
27105: PUSH
27106: EMPTY
27107: LIST
27108: LIST
27109: PUSH
27110: EMPTY
27111: LIST
27112: LIST
27113: PUSH
27114: EMPTY
27115: LIST
27116: LIST
27117: PPUSH
27118: CALL_OW 69
27122: ST_TO_ADDR
// for i in mines do
27123: LD_ADDR_VAR 0 4
27127: PUSH
27128: LD_VAR 0 2
27132: PUSH
27133: FOR_IN
27134: IFFALSE 27222
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
27136: LD_VAR 0 4
27140: PUSH
27141: LD_INT 1
27143: ARRAY
27144: PPUSH
27145: LD_VAR 0 4
27149: PUSH
27150: LD_INT 2
27152: ARRAY
27153: PPUSH
27154: CALL_OW 458
27158: NOT
27159: IFFALSE 27163
// continue ;
27161: GO 27133
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
27163: LD_VAR 0 4
27167: PUSH
27168: LD_INT 1
27170: ARRAY
27171: PPUSH
27172: LD_VAR 0 4
27176: PUSH
27177: LD_INT 2
27179: ARRAY
27180: PPUSH
27181: CALL_OW 428
27185: PUSH
27186: LD_VAR 0 5
27190: IN
27191: IFFALSE 27220
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
27193: LD_VAR 0 4
27197: PUSH
27198: LD_INT 1
27200: ARRAY
27201: PPUSH
27202: LD_VAR 0 4
27206: PUSH
27207: LD_INT 2
27209: ARRAY
27210: PPUSH
27211: LD_VAR 0 1
27215: PPUSH
27216: CALL_OW 456
// end ;
27220: GO 27133
27222: POP
27223: POP
// end ;
27224: LD_VAR 0 3
27228: RET
// export function Count ( array ) ; var i ; begin
27229: LD_INT 0
27231: PPUSH
27232: PPUSH
// result := 0 ;
27233: LD_ADDR_VAR 0 2
27237: PUSH
27238: LD_INT 0
27240: ST_TO_ADDR
// for i in array do
27241: LD_ADDR_VAR 0 3
27245: PUSH
27246: LD_VAR 0 1
27250: PUSH
27251: FOR_IN
27252: IFFALSE 27276
// if i then
27254: LD_VAR 0 3
27258: IFFALSE 27274
// result := result + 1 ;
27260: LD_ADDR_VAR 0 2
27264: PUSH
27265: LD_VAR 0 2
27269: PUSH
27270: LD_INT 1
27272: PLUS
27273: ST_TO_ADDR
27274: GO 27251
27276: POP
27277: POP
// end ;
27278: LD_VAR 0 2
27282: RET
// export function IsEmpty ( building ) ; begin
27283: LD_INT 0
27285: PPUSH
// if not building then
27286: LD_VAR 0 1
27290: NOT
27291: IFFALSE 27295
// exit ;
27293: GO 27338
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
27295: LD_ADDR_VAR 0 2
27299: PUSH
27300: LD_VAR 0 1
27304: PUSH
27305: LD_INT 22
27307: PUSH
27308: LD_VAR 0 1
27312: PPUSH
27313: CALL_OW 255
27317: PUSH
27318: EMPTY
27319: LIST
27320: LIST
27321: PUSH
27322: LD_INT 58
27324: PUSH
27325: EMPTY
27326: LIST
27327: PUSH
27328: EMPTY
27329: LIST
27330: LIST
27331: PPUSH
27332: CALL_OW 69
27336: IN
27337: ST_TO_ADDR
// end ;
27338: LD_VAR 0 2
27342: RET
// export function IsNotFull ( building ) ; begin
27343: LD_INT 0
27345: PPUSH
// if not building then
27346: LD_VAR 0 1
27350: NOT
27351: IFFALSE 27355
// exit ;
27353: GO 27374
// result := UnitsInside ( building ) < 6 ;
27355: LD_ADDR_VAR 0 2
27359: PUSH
27360: LD_VAR 0 1
27364: PPUSH
27365: CALL_OW 313
27369: PUSH
27370: LD_INT 6
27372: LESS
27373: ST_TO_ADDR
// end ;
27374: LD_VAR 0 2
27378: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
27379: LD_INT 0
27381: PPUSH
27382: PPUSH
27383: PPUSH
27384: PPUSH
// tmp := [ ] ;
27385: LD_ADDR_VAR 0 3
27389: PUSH
27390: EMPTY
27391: ST_TO_ADDR
// list := [ ] ;
27392: LD_ADDR_VAR 0 5
27396: PUSH
27397: EMPTY
27398: ST_TO_ADDR
// for i = 16 to 25 do
27399: LD_ADDR_VAR 0 4
27403: PUSH
27404: DOUBLE
27405: LD_INT 16
27407: DEC
27408: ST_TO_ADDR
27409: LD_INT 25
27411: PUSH
27412: FOR_TO
27413: IFFALSE 27486
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
27415: LD_ADDR_VAR 0 3
27419: PUSH
27420: LD_VAR 0 3
27424: PUSH
27425: LD_INT 22
27427: PUSH
27428: LD_VAR 0 1
27432: PPUSH
27433: CALL_OW 255
27437: PUSH
27438: EMPTY
27439: LIST
27440: LIST
27441: PUSH
27442: LD_INT 91
27444: PUSH
27445: LD_VAR 0 1
27449: PUSH
27450: LD_INT 6
27452: PUSH
27453: EMPTY
27454: LIST
27455: LIST
27456: LIST
27457: PUSH
27458: LD_INT 30
27460: PUSH
27461: LD_VAR 0 4
27465: PUSH
27466: EMPTY
27467: LIST
27468: LIST
27469: PUSH
27470: EMPTY
27471: LIST
27472: LIST
27473: LIST
27474: PUSH
27475: EMPTY
27476: LIST
27477: PPUSH
27478: CALL_OW 69
27482: ADD
27483: ST_TO_ADDR
27484: GO 27412
27486: POP
27487: POP
// for i = 1 to tmp do
27488: LD_ADDR_VAR 0 4
27492: PUSH
27493: DOUBLE
27494: LD_INT 1
27496: DEC
27497: ST_TO_ADDR
27498: LD_VAR 0 3
27502: PUSH
27503: FOR_TO
27504: IFFALSE 27592
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
27506: LD_ADDR_VAR 0 5
27510: PUSH
27511: LD_VAR 0 5
27515: PUSH
27516: LD_VAR 0 3
27520: PUSH
27521: LD_VAR 0 4
27525: ARRAY
27526: PPUSH
27527: CALL_OW 266
27531: PUSH
27532: LD_VAR 0 3
27536: PUSH
27537: LD_VAR 0 4
27541: ARRAY
27542: PPUSH
27543: CALL_OW 250
27547: PUSH
27548: LD_VAR 0 3
27552: PUSH
27553: LD_VAR 0 4
27557: ARRAY
27558: PPUSH
27559: CALL_OW 251
27563: PUSH
27564: LD_VAR 0 3
27568: PUSH
27569: LD_VAR 0 4
27573: ARRAY
27574: PPUSH
27575: CALL_OW 254
27579: PUSH
27580: EMPTY
27581: LIST
27582: LIST
27583: LIST
27584: LIST
27585: PUSH
27586: EMPTY
27587: LIST
27588: ADD
27589: ST_TO_ADDR
27590: GO 27503
27592: POP
27593: POP
// result := list ;
27594: LD_ADDR_VAR 0 2
27598: PUSH
27599: LD_VAR 0 5
27603: ST_TO_ADDR
// end ;
27604: LD_VAR 0 2
27608: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
27609: LD_INT 0
27611: PPUSH
27612: PPUSH
27613: PPUSH
27614: PPUSH
27615: PPUSH
27616: PPUSH
27617: PPUSH
// if not factory then
27618: LD_VAR 0 1
27622: NOT
27623: IFFALSE 27627
// exit ;
27625: GO 28220
// if control = control_apeman then
27627: LD_VAR 0 4
27631: PUSH
27632: LD_INT 5
27634: EQUAL
27635: IFFALSE 27744
// begin tmp := UnitsInside ( factory ) ;
27637: LD_ADDR_VAR 0 8
27641: PUSH
27642: LD_VAR 0 1
27646: PPUSH
27647: CALL_OW 313
27651: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
27652: LD_VAR 0 8
27656: PPUSH
27657: LD_INT 25
27659: PUSH
27660: LD_INT 12
27662: PUSH
27663: EMPTY
27664: LIST
27665: LIST
27666: PPUSH
27667: CALL_OW 72
27671: NOT
27672: IFFALSE 27682
// control := control_manual ;
27674: LD_ADDR_VAR 0 4
27678: PUSH
27679: LD_INT 1
27681: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
27682: LD_ADDR_VAR 0 8
27686: PUSH
27687: LD_VAR 0 1
27691: PPUSH
27692: CALL 27379 0 1
27696: ST_TO_ADDR
// if tmp then
27697: LD_VAR 0 8
27701: IFFALSE 27744
// begin for i in tmp do
27703: LD_ADDR_VAR 0 7
27707: PUSH
27708: LD_VAR 0 8
27712: PUSH
27713: FOR_IN
27714: IFFALSE 27742
// if i [ 1 ] = b_ext_radio then
27716: LD_VAR 0 7
27720: PUSH
27721: LD_INT 1
27723: ARRAY
27724: PUSH
27725: LD_INT 22
27727: EQUAL
27728: IFFALSE 27740
// begin control := control_remote ;
27730: LD_ADDR_VAR 0 4
27734: PUSH
27735: LD_INT 2
27737: ST_TO_ADDR
// break ;
27738: GO 27742
// end ;
27740: GO 27713
27742: POP
27743: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
27744: LD_VAR 0 1
27748: PPUSH
27749: LD_VAR 0 2
27753: PPUSH
27754: LD_VAR 0 3
27758: PPUSH
27759: LD_VAR 0 4
27763: PPUSH
27764: LD_VAR 0 5
27768: PPUSH
27769: CALL_OW 448
27773: IFFALSE 27808
// begin result := [ chassis , engine , control , weapon ] ;
27775: LD_ADDR_VAR 0 6
27779: PUSH
27780: LD_VAR 0 2
27784: PUSH
27785: LD_VAR 0 3
27789: PUSH
27790: LD_VAR 0 4
27794: PUSH
27795: LD_VAR 0 5
27799: PUSH
27800: EMPTY
27801: LIST
27802: LIST
27803: LIST
27804: LIST
27805: ST_TO_ADDR
// exit ;
27806: GO 28220
// end ; _chassis := AvailableChassisList ( factory ) ;
27808: LD_ADDR_VAR 0 9
27812: PUSH
27813: LD_VAR 0 1
27817: PPUSH
27818: CALL_OW 475
27822: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
27823: LD_ADDR_VAR 0 11
27827: PUSH
27828: LD_VAR 0 1
27832: PPUSH
27833: CALL_OW 476
27837: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
27838: LD_ADDR_VAR 0 12
27842: PUSH
27843: LD_VAR 0 1
27847: PPUSH
27848: CALL_OW 477
27852: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
27853: LD_ADDR_VAR 0 10
27857: PUSH
27858: LD_VAR 0 1
27862: PPUSH
27863: CALL_OW 478
27867: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
27868: LD_VAR 0 9
27872: NOT
27873: PUSH
27874: LD_VAR 0 11
27878: NOT
27879: OR
27880: PUSH
27881: LD_VAR 0 12
27885: NOT
27886: OR
27887: PUSH
27888: LD_VAR 0 10
27892: NOT
27893: OR
27894: IFFALSE 27929
// begin result := [ chassis , engine , control , weapon ] ;
27896: LD_ADDR_VAR 0 6
27900: PUSH
27901: LD_VAR 0 2
27905: PUSH
27906: LD_VAR 0 3
27910: PUSH
27911: LD_VAR 0 4
27915: PUSH
27916: LD_VAR 0 5
27920: PUSH
27921: EMPTY
27922: LIST
27923: LIST
27924: LIST
27925: LIST
27926: ST_TO_ADDR
// exit ;
27927: GO 28220
// end ; if not chassis in _chassis then
27929: LD_VAR 0 2
27933: PUSH
27934: LD_VAR 0 9
27938: IN
27939: NOT
27940: IFFALSE 27966
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
27942: LD_ADDR_VAR 0 2
27946: PUSH
27947: LD_VAR 0 9
27951: PUSH
27952: LD_INT 1
27954: PPUSH
27955: LD_VAR 0 9
27959: PPUSH
27960: CALL_OW 12
27964: ARRAY
27965: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
27966: LD_VAR 0 2
27970: PPUSH
27971: LD_VAR 0 3
27975: PPUSH
27976: CALL 28225 0 2
27980: NOT
27981: IFFALSE 28040
// repeat engine := _engine [ 1 ] ;
27983: LD_ADDR_VAR 0 3
27987: PUSH
27988: LD_VAR 0 11
27992: PUSH
27993: LD_INT 1
27995: ARRAY
27996: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
27997: LD_ADDR_VAR 0 11
28001: PUSH
28002: LD_VAR 0 11
28006: PPUSH
28007: LD_INT 1
28009: PPUSH
28010: CALL_OW 3
28014: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
28015: LD_VAR 0 2
28019: PPUSH
28020: LD_VAR 0 3
28024: PPUSH
28025: CALL 28225 0 2
28029: PUSH
28030: LD_VAR 0 11
28034: PUSH
28035: EMPTY
28036: EQUAL
28037: OR
28038: IFFALSE 27983
// if not control in _control then
28040: LD_VAR 0 4
28044: PUSH
28045: LD_VAR 0 12
28049: IN
28050: NOT
28051: IFFALSE 28077
// control := _control [ rand ( 1 , _control ) ] ;
28053: LD_ADDR_VAR 0 4
28057: PUSH
28058: LD_VAR 0 12
28062: PUSH
28063: LD_INT 1
28065: PPUSH
28066: LD_VAR 0 12
28070: PPUSH
28071: CALL_OW 12
28075: ARRAY
28076: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
28077: LD_VAR 0 2
28081: PPUSH
28082: LD_VAR 0 5
28086: PPUSH
28087: CALL 28445 0 2
28091: NOT
28092: IFFALSE 28151
// repeat weapon := _weapon [ 1 ] ;
28094: LD_ADDR_VAR 0 5
28098: PUSH
28099: LD_VAR 0 10
28103: PUSH
28104: LD_INT 1
28106: ARRAY
28107: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
28108: LD_ADDR_VAR 0 10
28112: PUSH
28113: LD_VAR 0 10
28117: PPUSH
28118: LD_INT 1
28120: PPUSH
28121: CALL_OW 3
28125: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
28126: LD_VAR 0 2
28130: PPUSH
28131: LD_VAR 0 5
28135: PPUSH
28136: CALL 28445 0 2
28140: PUSH
28141: LD_VAR 0 10
28145: PUSH
28146: EMPTY
28147: EQUAL
28148: OR
28149: IFFALSE 28094
// result := [ ] ;
28151: LD_ADDR_VAR 0 6
28155: PUSH
28156: EMPTY
28157: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
28158: LD_VAR 0 1
28162: PPUSH
28163: LD_VAR 0 2
28167: PPUSH
28168: LD_VAR 0 3
28172: PPUSH
28173: LD_VAR 0 4
28177: PPUSH
28178: LD_VAR 0 5
28182: PPUSH
28183: CALL_OW 448
28187: IFFALSE 28220
// result := [ chassis , engine , control , weapon ] ;
28189: LD_ADDR_VAR 0 6
28193: PUSH
28194: LD_VAR 0 2
28198: PUSH
28199: LD_VAR 0 3
28203: PUSH
28204: LD_VAR 0 4
28208: PUSH
28209: LD_VAR 0 5
28213: PUSH
28214: EMPTY
28215: LIST
28216: LIST
28217: LIST
28218: LIST
28219: ST_TO_ADDR
// end ;
28220: LD_VAR 0 6
28224: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
28225: LD_INT 0
28227: PPUSH
// if not chassis or not engine then
28228: LD_VAR 0 1
28232: NOT
28233: PUSH
28234: LD_VAR 0 2
28238: NOT
28239: OR
28240: IFFALSE 28244
// exit ;
28242: GO 28440
// case engine of engine_solar :
28244: LD_VAR 0 2
28248: PUSH
28249: LD_INT 2
28251: DOUBLE
28252: EQUAL
28253: IFTRUE 28257
28255: GO 28295
28257: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
28258: LD_ADDR_VAR 0 3
28262: PUSH
28263: LD_INT 11
28265: PUSH
28266: LD_INT 12
28268: PUSH
28269: LD_INT 13
28271: PUSH
28272: LD_INT 14
28274: PUSH
28275: LD_INT 1
28277: PUSH
28278: LD_INT 2
28280: PUSH
28281: LD_INT 3
28283: PUSH
28284: EMPTY
28285: LIST
28286: LIST
28287: LIST
28288: LIST
28289: LIST
28290: LIST
28291: LIST
28292: ST_TO_ADDR
28293: GO 28424
28295: LD_INT 1
28297: DOUBLE
28298: EQUAL
28299: IFTRUE 28303
28301: GO 28365
28303: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
28304: LD_ADDR_VAR 0 3
28308: PUSH
28309: LD_INT 11
28311: PUSH
28312: LD_INT 12
28314: PUSH
28315: LD_INT 13
28317: PUSH
28318: LD_INT 14
28320: PUSH
28321: LD_INT 1
28323: PUSH
28324: LD_INT 2
28326: PUSH
28327: LD_INT 3
28329: PUSH
28330: LD_INT 4
28332: PUSH
28333: LD_INT 5
28335: PUSH
28336: LD_INT 21
28338: PUSH
28339: LD_INT 23
28341: PUSH
28342: LD_INT 22
28344: PUSH
28345: LD_INT 24
28347: PUSH
28348: EMPTY
28349: LIST
28350: LIST
28351: LIST
28352: LIST
28353: LIST
28354: LIST
28355: LIST
28356: LIST
28357: LIST
28358: LIST
28359: LIST
28360: LIST
28361: LIST
28362: ST_TO_ADDR
28363: GO 28424
28365: LD_INT 3
28367: DOUBLE
28368: EQUAL
28369: IFTRUE 28373
28371: GO 28423
28373: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
28374: LD_ADDR_VAR 0 3
28378: PUSH
28379: LD_INT 13
28381: PUSH
28382: LD_INT 14
28384: PUSH
28385: LD_INT 2
28387: PUSH
28388: LD_INT 3
28390: PUSH
28391: LD_INT 4
28393: PUSH
28394: LD_INT 5
28396: PUSH
28397: LD_INT 21
28399: PUSH
28400: LD_INT 22
28402: PUSH
28403: LD_INT 23
28405: PUSH
28406: LD_INT 24
28408: PUSH
28409: EMPTY
28410: LIST
28411: LIST
28412: LIST
28413: LIST
28414: LIST
28415: LIST
28416: LIST
28417: LIST
28418: LIST
28419: LIST
28420: ST_TO_ADDR
28421: GO 28424
28423: POP
// result := ( chassis in result ) ;
28424: LD_ADDR_VAR 0 3
28428: PUSH
28429: LD_VAR 0 1
28433: PUSH
28434: LD_VAR 0 3
28438: IN
28439: ST_TO_ADDR
// end ;
28440: LD_VAR 0 3
28444: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
28445: LD_INT 0
28447: PPUSH
// if not chassis or not weapon then
28448: LD_VAR 0 1
28452: NOT
28453: PUSH
28454: LD_VAR 0 2
28458: NOT
28459: OR
28460: IFFALSE 28464
// exit ;
28462: GO 29490
// case weapon of us_machine_gun :
28464: LD_VAR 0 2
28468: PUSH
28469: LD_INT 2
28471: DOUBLE
28472: EQUAL
28473: IFTRUE 28477
28475: GO 28507
28477: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
28478: LD_ADDR_VAR 0 3
28482: PUSH
28483: LD_INT 1
28485: PUSH
28486: LD_INT 2
28488: PUSH
28489: LD_INT 3
28491: PUSH
28492: LD_INT 4
28494: PUSH
28495: LD_INT 5
28497: PUSH
28498: EMPTY
28499: LIST
28500: LIST
28501: LIST
28502: LIST
28503: LIST
28504: ST_TO_ADDR
28505: GO 29474
28507: LD_INT 3
28509: DOUBLE
28510: EQUAL
28511: IFTRUE 28515
28513: GO 28545
28515: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
28516: LD_ADDR_VAR 0 3
28520: PUSH
28521: LD_INT 1
28523: PUSH
28524: LD_INT 2
28526: PUSH
28527: LD_INT 3
28529: PUSH
28530: LD_INT 4
28532: PUSH
28533: LD_INT 5
28535: PUSH
28536: EMPTY
28537: LIST
28538: LIST
28539: LIST
28540: LIST
28541: LIST
28542: ST_TO_ADDR
28543: GO 29474
28545: LD_INT 11
28547: DOUBLE
28548: EQUAL
28549: IFTRUE 28553
28551: GO 28583
28553: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
28554: LD_ADDR_VAR 0 3
28558: PUSH
28559: LD_INT 1
28561: PUSH
28562: LD_INT 2
28564: PUSH
28565: LD_INT 3
28567: PUSH
28568: LD_INT 4
28570: PUSH
28571: LD_INT 5
28573: PUSH
28574: EMPTY
28575: LIST
28576: LIST
28577: LIST
28578: LIST
28579: LIST
28580: ST_TO_ADDR
28581: GO 29474
28583: LD_INT 4
28585: DOUBLE
28586: EQUAL
28587: IFTRUE 28591
28589: GO 28617
28591: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
28592: LD_ADDR_VAR 0 3
28596: PUSH
28597: LD_INT 2
28599: PUSH
28600: LD_INT 3
28602: PUSH
28603: LD_INT 4
28605: PUSH
28606: LD_INT 5
28608: PUSH
28609: EMPTY
28610: LIST
28611: LIST
28612: LIST
28613: LIST
28614: ST_TO_ADDR
28615: GO 29474
28617: LD_INT 5
28619: DOUBLE
28620: EQUAL
28621: IFTRUE 28625
28623: GO 28651
28625: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
28626: LD_ADDR_VAR 0 3
28630: PUSH
28631: LD_INT 2
28633: PUSH
28634: LD_INT 3
28636: PUSH
28637: LD_INT 4
28639: PUSH
28640: LD_INT 5
28642: PUSH
28643: EMPTY
28644: LIST
28645: LIST
28646: LIST
28647: LIST
28648: ST_TO_ADDR
28649: GO 29474
28651: LD_INT 9
28653: DOUBLE
28654: EQUAL
28655: IFTRUE 28659
28657: GO 28685
28659: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
28660: LD_ADDR_VAR 0 3
28664: PUSH
28665: LD_INT 2
28667: PUSH
28668: LD_INT 3
28670: PUSH
28671: LD_INT 4
28673: PUSH
28674: LD_INT 5
28676: PUSH
28677: EMPTY
28678: LIST
28679: LIST
28680: LIST
28681: LIST
28682: ST_TO_ADDR
28683: GO 29474
28685: LD_INT 7
28687: DOUBLE
28688: EQUAL
28689: IFTRUE 28693
28691: GO 28719
28693: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
28694: LD_ADDR_VAR 0 3
28698: PUSH
28699: LD_INT 2
28701: PUSH
28702: LD_INT 3
28704: PUSH
28705: LD_INT 4
28707: PUSH
28708: LD_INT 5
28710: PUSH
28711: EMPTY
28712: LIST
28713: LIST
28714: LIST
28715: LIST
28716: ST_TO_ADDR
28717: GO 29474
28719: LD_INT 12
28721: DOUBLE
28722: EQUAL
28723: IFTRUE 28727
28725: GO 28753
28727: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
28728: LD_ADDR_VAR 0 3
28732: PUSH
28733: LD_INT 2
28735: PUSH
28736: LD_INT 3
28738: PUSH
28739: LD_INT 4
28741: PUSH
28742: LD_INT 5
28744: PUSH
28745: EMPTY
28746: LIST
28747: LIST
28748: LIST
28749: LIST
28750: ST_TO_ADDR
28751: GO 29474
28753: LD_INT 13
28755: DOUBLE
28756: EQUAL
28757: IFTRUE 28761
28759: GO 28787
28761: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
28762: LD_ADDR_VAR 0 3
28766: PUSH
28767: LD_INT 2
28769: PUSH
28770: LD_INT 3
28772: PUSH
28773: LD_INT 4
28775: PUSH
28776: LD_INT 5
28778: PUSH
28779: EMPTY
28780: LIST
28781: LIST
28782: LIST
28783: LIST
28784: ST_TO_ADDR
28785: GO 29474
28787: LD_INT 14
28789: DOUBLE
28790: EQUAL
28791: IFTRUE 28795
28793: GO 28813
28795: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
28796: LD_ADDR_VAR 0 3
28800: PUSH
28801: LD_INT 4
28803: PUSH
28804: LD_INT 5
28806: PUSH
28807: EMPTY
28808: LIST
28809: LIST
28810: ST_TO_ADDR
28811: GO 29474
28813: LD_INT 6
28815: DOUBLE
28816: EQUAL
28817: IFTRUE 28821
28819: GO 28839
28821: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
28822: LD_ADDR_VAR 0 3
28826: PUSH
28827: LD_INT 4
28829: PUSH
28830: LD_INT 5
28832: PUSH
28833: EMPTY
28834: LIST
28835: LIST
28836: ST_TO_ADDR
28837: GO 29474
28839: LD_INT 10
28841: DOUBLE
28842: EQUAL
28843: IFTRUE 28847
28845: GO 28865
28847: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
28848: LD_ADDR_VAR 0 3
28852: PUSH
28853: LD_INT 4
28855: PUSH
28856: LD_INT 5
28858: PUSH
28859: EMPTY
28860: LIST
28861: LIST
28862: ST_TO_ADDR
28863: GO 29474
28865: LD_INT 22
28867: DOUBLE
28868: EQUAL
28869: IFTRUE 28873
28871: GO 28899
28873: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
28874: LD_ADDR_VAR 0 3
28878: PUSH
28879: LD_INT 11
28881: PUSH
28882: LD_INT 12
28884: PUSH
28885: LD_INT 13
28887: PUSH
28888: LD_INT 14
28890: PUSH
28891: EMPTY
28892: LIST
28893: LIST
28894: LIST
28895: LIST
28896: ST_TO_ADDR
28897: GO 29474
28899: LD_INT 23
28901: DOUBLE
28902: EQUAL
28903: IFTRUE 28907
28905: GO 28933
28907: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
28908: LD_ADDR_VAR 0 3
28912: PUSH
28913: LD_INT 11
28915: PUSH
28916: LD_INT 12
28918: PUSH
28919: LD_INT 13
28921: PUSH
28922: LD_INT 14
28924: PUSH
28925: EMPTY
28926: LIST
28927: LIST
28928: LIST
28929: LIST
28930: ST_TO_ADDR
28931: GO 29474
28933: LD_INT 24
28935: DOUBLE
28936: EQUAL
28937: IFTRUE 28941
28939: GO 28967
28941: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
28942: LD_ADDR_VAR 0 3
28946: PUSH
28947: LD_INT 11
28949: PUSH
28950: LD_INT 12
28952: PUSH
28953: LD_INT 13
28955: PUSH
28956: LD_INT 14
28958: PUSH
28959: EMPTY
28960: LIST
28961: LIST
28962: LIST
28963: LIST
28964: ST_TO_ADDR
28965: GO 29474
28967: LD_INT 30
28969: DOUBLE
28970: EQUAL
28971: IFTRUE 28975
28973: GO 29001
28975: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
28976: LD_ADDR_VAR 0 3
28980: PUSH
28981: LD_INT 11
28983: PUSH
28984: LD_INT 12
28986: PUSH
28987: LD_INT 13
28989: PUSH
28990: LD_INT 14
28992: PUSH
28993: EMPTY
28994: LIST
28995: LIST
28996: LIST
28997: LIST
28998: ST_TO_ADDR
28999: GO 29474
29001: LD_INT 25
29003: DOUBLE
29004: EQUAL
29005: IFTRUE 29009
29007: GO 29027
29009: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
29010: LD_ADDR_VAR 0 3
29014: PUSH
29015: LD_INT 13
29017: PUSH
29018: LD_INT 14
29020: PUSH
29021: EMPTY
29022: LIST
29023: LIST
29024: ST_TO_ADDR
29025: GO 29474
29027: LD_INT 27
29029: DOUBLE
29030: EQUAL
29031: IFTRUE 29035
29033: GO 29053
29035: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
29036: LD_ADDR_VAR 0 3
29040: PUSH
29041: LD_INT 13
29043: PUSH
29044: LD_INT 14
29046: PUSH
29047: EMPTY
29048: LIST
29049: LIST
29050: ST_TO_ADDR
29051: GO 29474
29053: LD_INT 28
29055: DOUBLE
29056: EQUAL
29057: IFTRUE 29061
29059: GO 29079
29061: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
29062: LD_ADDR_VAR 0 3
29066: PUSH
29067: LD_INT 13
29069: PUSH
29070: LD_INT 14
29072: PUSH
29073: EMPTY
29074: LIST
29075: LIST
29076: ST_TO_ADDR
29077: GO 29474
29079: LD_INT 29
29081: DOUBLE
29082: EQUAL
29083: IFTRUE 29087
29085: GO 29105
29087: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
29088: LD_ADDR_VAR 0 3
29092: PUSH
29093: LD_INT 13
29095: PUSH
29096: LD_INT 14
29098: PUSH
29099: EMPTY
29100: LIST
29101: LIST
29102: ST_TO_ADDR
29103: GO 29474
29105: LD_INT 31
29107: DOUBLE
29108: EQUAL
29109: IFTRUE 29113
29111: GO 29131
29113: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
29114: LD_ADDR_VAR 0 3
29118: PUSH
29119: LD_INT 13
29121: PUSH
29122: LD_INT 14
29124: PUSH
29125: EMPTY
29126: LIST
29127: LIST
29128: ST_TO_ADDR
29129: GO 29474
29131: LD_INT 26
29133: DOUBLE
29134: EQUAL
29135: IFTRUE 29139
29137: GO 29157
29139: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
29140: LD_ADDR_VAR 0 3
29144: PUSH
29145: LD_INT 13
29147: PUSH
29148: LD_INT 14
29150: PUSH
29151: EMPTY
29152: LIST
29153: LIST
29154: ST_TO_ADDR
29155: GO 29474
29157: LD_INT 42
29159: DOUBLE
29160: EQUAL
29161: IFTRUE 29165
29163: GO 29191
29165: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
29166: LD_ADDR_VAR 0 3
29170: PUSH
29171: LD_INT 21
29173: PUSH
29174: LD_INT 22
29176: PUSH
29177: LD_INT 23
29179: PUSH
29180: LD_INT 24
29182: PUSH
29183: EMPTY
29184: LIST
29185: LIST
29186: LIST
29187: LIST
29188: ST_TO_ADDR
29189: GO 29474
29191: LD_INT 43
29193: DOUBLE
29194: EQUAL
29195: IFTRUE 29199
29197: GO 29225
29199: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
29200: LD_ADDR_VAR 0 3
29204: PUSH
29205: LD_INT 21
29207: PUSH
29208: LD_INT 22
29210: PUSH
29211: LD_INT 23
29213: PUSH
29214: LD_INT 24
29216: PUSH
29217: EMPTY
29218: LIST
29219: LIST
29220: LIST
29221: LIST
29222: ST_TO_ADDR
29223: GO 29474
29225: LD_INT 44
29227: DOUBLE
29228: EQUAL
29229: IFTRUE 29233
29231: GO 29259
29233: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
29234: LD_ADDR_VAR 0 3
29238: PUSH
29239: LD_INT 21
29241: PUSH
29242: LD_INT 22
29244: PUSH
29245: LD_INT 23
29247: PUSH
29248: LD_INT 24
29250: PUSH
29251: EMPTY
29252: LIST
29253: LIST
29254: LIST
29255: LIST
29256: ST_TO_ADDR
29257: GO 29474
29259: LD_INT 45
29261: DOUBLE
29262: EQUAL
29263: IFTRUE 29267
29265: GO 29293
29267: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
29268: LD_ADDR_VAR 0 3
29272: PUSH
29273: LD_INT 21
29275: PUSH
29276: LD_INT 22
29278: PUSH
29279: LD_INT 23
29281: PUSH
29282: LD_INT 24
29284: PUSH
29285: EMPTY
29286: LIST
29287: LIST
29288: LIST
29289: LIST
29290: ST_TO_ADDR
29291: GO 29474
29293: LD_INT 49
29295: DOUBLE
29296: EQUAL
29297: IFTRUE 29301
29299: GO 29327
29301: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
29302: LD_ADDR_VAR 0 3
29306: PUSH
29307: LD_INT 21
29309: PUSH
29310: LD_INT 22
29312: PUSH
29313: LD_INT 23
29315: PUSH
29316: LD_INT 24
29318: PUSH
29319: EMPTY
29320: LIST
29321: LIST
29322: LIST
29323: LIST
29324: ST_TO_ADDR
29325: GO 29474
29327: LD_INT 51
29329: DOUBLE
29330: EQUAL
29331: IFTRUE 29335
29333: GO 29361
29335: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
29336: LD_ADDR_VAR 0 3
29340: PUSH
29341: LD_INT 21
29343: PUSH
29344: LD_INT 22
29346: PUSH
29347: LD_INT 23
29349: PUSH
29350: LD_INT 24
29352: PUSH
29353: EMPTY
29354: LIST
29355: LIST
29356: LIST
29357: LIST
29358: ST_TO_ADDR
29359: GO 29474
29361: LD_INT 52
29363: DOUBLE
29364: EQUAL
29365: IFTRUE 29369
29367: GO 29395
29369: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
29370: LD_ADDR_VAR 0 3
29374: PUSH
29375: LD_INT 21
29377: PUSH
29378: LD_INT 22
29380: PUSH
29381: LD_INT 23
29383: PUSH
29384: LD_INT 24
29386: PUSH
29387: EMPTY
29388: LIST
29389: LIST
29390: LIST
29391: LIST
29392: ST_TO_ADDR
29393: GO 29474
29395: LD_INT 53
29397: DOUBLE
29398: EQUAL
29399: IFTRUE 29403
29401: GO 29421
29403: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
29404: LD_ADDR_VAR 0 3
29408: PUSH
29409: LD_INT 23
29411: PUSH
29412: LD_INT 24
29414: PUSH
29415: EMPTY
29416: LIST
29417: LIST
29418: ST_TO_ADDR
29419: GO 29474
29421: LD_INT 46
29423: DOUBLE
29424: EQUAL
29425: IFTRUE 29429
29427: GO 29447
29429: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
29430: LD_ADDR_VAR 0 3
29434: PUSH
29435: LD_INT 23
29437: PUSH
29438: LD_INT 24
29440: PUSH
29441: EMPTY
29442: LIST
29443: LIST
29444: ST_TO_ADDR
29445: GO 29474
29447: LD_INT 47
29449: DOUBLE
29450: EQUAL
29451: IFTRUE 29455
29453: GO 29473
29455: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
29456: LD_ADDR_VAR 0 3
29460: PUSH
29461: LD_INT 23
29463: PUSH
29464: LD_INT 24
29466: PUSH
29467: EMPTY
29468: LIST
29469: LIST
29470: ST_TO_ADDR
29471: GO 29474
29473: POP
// result := ( chassis in result ) ;
29474: LD_ADDR_VAR 0 3
29478: PUSH
29479: LD_VAR 0 1
29483: PUSH
29484: LD_VAR 0 3
29488: IN
29489: ST_TO_ADDR
// end ;
29490: LD_VAR 0 3
29494: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
29495: LD_INT 0
29497: PPUSH
29498: PPUSH
29499: PPUSH
29500: PPUSH
29501: PPUSH
29502: PPUSH
29503: PPUSH
// result := array ;
29504: LD_ADDR_VAR 0 5
29508: PUSH
29509: LD_VAR 0 1
29513: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
29514: LD_VAR 0 1
29518: NOT
29519: PUSH
29520: LD_VAR 0 2
29524: NOT
29525: OR
29526: PUSH
29527: LD_VAR 0 3
29531: NOT
29532: OR
29533: PUSH
29534: LD_VAR 0 2
29538: PUSH
29539: LD_VAR 0 1
29543: GREATER
29544: OR
29545: PUSH
29546: LD_VAR 0 3
29550: PUSH
29551: LD_VAR 0 1
29555: GREATER
29556: OR
29557: IFFALSE 29561
// exit ;
29559: GO 29857
// if direction then
29561: LD_VAR 0 4
29565: IFFALSE 29629
// begin d := 1 ;
29567: LD_ADDR_VAR 0 9
29571: PUSH
29572: LD_INT 1
29574: ST_TO_ADDR
// if i_from > i_to then
29575: LD_VAR 0 2
29579: PUSH
29580: LD_VAR 0 3
29584: GREATER
29585: IFFALSE 29611
// length := ( array - i_from ) + i_to else
29587: LD_ADDR_VAR 0 11
29591: PUSH
29592: LD_VAR 0 1
29596: PUSH
29597: LD_VAR 0 2
29601: MINUS
29602: PUSH
29603: LD_VAR 0 3
29607: PLUS
29608: ST_TO_ADDR
29609: GO 29627
// length := i_to - i_from ;
29611: LD_ADDR_VAR 0 11
29615: PUSH
29616: LD_VAR 0 3
29620: PUSH
29621: LD_VAR 0 2
29625: MINUS
29626: ST_TO_ADDR
// end else
29627: GO 29690
// begin d := - 1 ;
29629: LD_ADDR_VAR 0 9
29633: PUSH
29634: LD_INT 1
29636: NEG
29637: ST_TO_ADDR
// if i_from > i_to then
29638: LD_VAR 0 2
29642: PUSH
29643: LD_VAR 0 3
29647: GREATER
29648: IFFALSE 29668
// length := i_from - i_to else
29650: LD_ADDR_VAR 0 11
29654: PUSH
29655: LD_VAR 0 2
29659: PUSH
29660: LD_VAR 0 3
29664: MINUS
29665: ST_TO_ADDR
29666: GO 29690
// length := ( array - i_to ) + i_from ;
29668: LD_ADDR_VAR 0 11
29672: PUSH
29673: LD_VAR 0 1
29677: PUSH
29678: LD_VAR 0 3
29682: MINUS
29683: PUSH
29684: LD_VAR 0 2
29688: PLUS
29689: ST_TO_ADDR
// end ; if not length then
29690: LD_VAR 0 11
29694: NOT
29695: IFFALSE 29699
// exit ;
29697: GO 29857
// tmp := array ;
29699: LD_ADDR_VAR 0 10
29703: PUSH
29704: LD_VAR 0 1
29708: ST_TO_ADDR
// for i = 1 to length do
29709: LD_ADDR_VAR 0 6
29713: PUSH
29714: DOUBLE
29715: LD_INT 1
29717: DEC
29718: ST_TO_ADDR
29719: LD_VAR 0 11
29723: PUSH
29724: FOR_TO
29725: IFFALSE 29845
// begin for j = 1 to array do
29727: LD_ADDR_VAR 0 7
29731: PUSH
29732: DOUBLE
29733: LD_INT 1
29735: DEC
29736: ST_TO_ADDR
29737: LD_VAR 0 1
29741: PUSH
29742: FOR_TO
29743: IFFALSE 29831
// begin k := j + d ;
29745: LD_ADDR_VAR 0 8
29749: PUSH
29750: LD_VAR 0 7
29754: PUSH
29755: LD_VAR 0 9
29759: PLUS
29760: ST_TO_ADDR
// if k > array then
29761: LD_VAR 0 8
29765: PUSH
29766: LD_VAR 0 1
29770: GREATER
29771: IFFALSE 29781
// k := 1 ;
29773: LD_ADDR_VAR 0 8
29777: PUSH
29778: LD_INT 1
29780: ST_TO_ADDR
// if not k then
29781: LD_VAR 0 8
29785: NOT
29786: IFFALSE 29798
// k := array ;
29788: LD_ADDR_VAR 0 8
29792: PUSH
29793: LD_VAR 0 1
29797: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
29798: LD_ADDR_VAR 0 10
29802: PUSH
29803: LD_VAR 0 10
29807: PPUSH
29808: LD_VAR 0 8
29812: PPUSH
29813: LD_VAR 0 1
29817: PUSH
29818: LD_VAR 0 7
29822: ARRAY
29823: PPUSH
29824: CALL_OW 1
29828: ST_TO_ADDR
// end ;
29829: GO 29742
29831: POP
29832: POP
// array := tmp ;
29833: LD_ADDR_VAR 0 1
29837: PUSH
29838: LD_VAR 0 10
29842: ST_TO_ADDR
// end ;
29843: GO 29724
29845: POP
29846: POP
// result := array ;
29847: LD_ADDR_VAR 0 5
29851: PUSH
29852: LD_VAR 0 1
29856: ST_TO_ADDR
// end ;
29857: LD_VAR 0 5
29861: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
29862: LD_INT 0
29864: PPUSH
29865: PPUSH
// result := 0 ;
29866: LD_ADDR_VAR 0 3
29870: PUSH
29871: LD_INT 0
29873: ST_TO_ADDR
// if not array or not value in array then
29874: LD_VAR 0 1
29878: NOT
29879: PUSH
29880: LD_VAR 0 2
29884: PUSH
29885: LD_VAR 0 1
29889: IN
29890: NOT
29891: OR
29892: IFFALSE 29896
// exit ;
29894: GO 29950
// for i = 1 to array do
29896: LD_ADDR_VAR 0 4
29900: PUSH
29901: DOUBLE
29902: LD_INT 1
29904: DEC
29905: ST_TO_ADDR
29906: LD_VAR 0 1
29910: PUSH
29911: FOR_TO
29912: IFFALSE 29948
// if value = array [ i ] then
29914: LD_VAR 0 2
29918: PUSH
29919: LD_VAR 0 1
29923: PUSH
29924: LD_VAR 0 4
29928: ARRAY
29929: EQUAL
29930: IFFALSE 29946
// begin result := i ;
29932: LD_ADDR_VAR 0 3
29936: PUSH
29937: LD_VAR 0 4
29941: ST_TO_ADDR
// exit ;
29942: POP
29943: POP
29944: GO 29950
// end ;
29946: GO 29911
29948: POP
29949: POP
// end ;
29950: LD_VAR 0 3
29954: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
29955: LD_INT 0
29957: PPUSH
// vc_chassis := chassis ;
29958: LD_ADDR_OWVAR 37
29962: PUSH
29963: LD_VAR 0 1
29967: ST_TO_ADDR
// vc_engine := engine ;
29968: LD_ADDR_OWVAR 39
29972: PUSH
29973: LD_VAR 0 2
29977: ST_TO_ADDR
// vc_control := control ;
29978: LD_ADDR_OWVAR 38
29982: PUSH
29983: LD_VAR 0 3
29987: ST_TO_ADDR
// vc_weapon := weapon ;
29988: LD_ADDR_OWVAR 40
29992: PUSH
29993: LD_VAR 0 4
29997: ST_TO_ADDR
// vc_fuel_battery := fuel ;
29998: LD_ADDR_OWVAR 41
30002: PUSH
30003: LD_VAR 0 5
30007: ST_TO_ADDR
// end ;
30008: LD_VAR 0 6
30012: RET
// export function WantPlant ( unit ) ; var task ; begin
30013: LD_INT 0
30015: PPUSH
30016: PPUSH
// result := false ;
30017: LD_ADDR_VAR 0 2
30021: PUSH
30022: LD_INT 0
30024: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
30025: LD_ADDR_VAR 0 3
30029: PUSH
30030: LD_VAR 0 1
30034: PPUSH
30035: CALL_OW 437
30039: ST_TO_ADDR
// if task then
30040: LD_VAR 0 3
30044: IFFALSE 30072
// if task [ 1 ] [ 1 ] = p then
30046: LD_VAR 0 3
30050: PUSH
30051: LD_INT 1
30053: ARRAY
30054: PUSH
30055: LD_INT 1
30057: ARRAY
30058: PUSH
30059: LD_STRING p
30061: EQUAL
30062: IFFALSE 30072
// result := true ;
30064: LD_ADDR_VAR 0 2
30068: PUSH
30069: LD_INT 1
30071: ST_TO_ADDR
// end ;
30072: LD_VAR 0 2
30076: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
30077: LD_INT 0
30079: PPUSH
30080: PPUSH
30081: PPUSH
30082: PPUSH
// if pos < 1 then
30083: LD_VAR 0 2
30087: PUSH
30088: LD_INT 1
30090: LESS
30091: IFFALSE 30095
// exit ;
30093: GO 30398
// if pos = 1 then
30095: LD_VAR 0 2
30099: PUSH
30100: LD_INT 1
30102: EQUAL
30103: IFFALSE 30136
// result := Replace ( arr , pos [ 1 ] , value ) else
30105: LD_ADDR_VAR 0 4
30109: PUSH
30110: LD_VAR 0 1
30114: PPUSH
30115: LD_VAR 0 2
30119: PUSH
30120: LD_INT 1
30122: ARRAY
30123: PPUSH
30124: LD_VAR 0 3
30128: PPUSH
30129: CALL_OW 1
30133: ST_TO_ADDR
30134: GO 30398
// begin tmp := arr ;
30136: LD_ADDR_VAR 0 6
30140: PUSH
30141: LD_VAR 0 1
30145: ST_TO_ADDR
// s_arr := [ tmp ] ;
30146: LD_ADDR_VAR 0 7
30150: PUSH
30151: LD_VAR 0 6
30155: PUSH
30156: EMPTY
30157: LIST
30158: ST_TO_ADDR
// for i = 1 to pos - 1 do
30159: LD_ADDR_VAR 0 5
30163: PUSH
30164: DOUBLE
30165: LD_INT 1
30167: DEC
30168: ST_TO_ADDR
30169: LD_VAR 0 2
30173: PUSH
30174: LD_INT 1
30176: MINUS
30177: PUSH
30178: FOR_TO
30179: IFFALSE 30224
// begin tmp := tmp [ pos [ i ] ] ;
30181: LD_ADDR_VAR 0 6
30185: PUSH
30186: LD_VAR 0 6
30190: PUSH
30191: LD_VAR 0 2
30195: PUSH
30196: LD_VAR 0 5
30200: ARRAY
30201: ARRAY
30202: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
30203: LD_ADDR_VAR 0 7
30207: PUSH
30208: LD_VAR 0 7
30212: PUSH
30213: LD_VAR 0 6
30217: PUSH
30218: EMPTY
30219: LIST
30220: ADD
30221: ST_TO_ADDR
// end ;
30222: GO 30178
30224: POP
30225: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
30226: LD_ADDR_VAR 0 6
30230: PUSH
30231: LD_VAR 0 6
30235: PPUSH
30236: LD_VAR 0 2
30240: PUSH
30241: LD_VAR 0 2
30245: ARRAY
30246: PPUSH
30247: LD_VAR 0 3
30251: PPUSH
30252: CALL_OW 1
30256: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
30257: LD_ADDR_VAR 0 7
30261: PUSH
30262: LD_VAR 0 7
30266: PPUSH
30267: LD_VAR 0 7
30271: PPUSH
30272: LD_VAR 0 6
30276: PPUSH
30277: CALL_OW 1
30281: ST_TO_ADDR
// for i = s_arr downto 2 do
30282: LD_ADDR_VAR 0 5
30286: PUSH
30287: DOUBLE
30288: LD_VAR 0 7
30292: INC
30293: ST_TO_ADDR
30294: LD_INT 2
30296: PUSH
30297: FOR_DOWNTO
30298: IFFALSE 30382
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
30300: LD_ADDR_VAR 0 6
30304: PUSH
30305: LD_VAR 0 7
30309: PUSH
30310: LD_VAR 0 5
30314: PUSH
30315: LD_INT 1
30317: MINUS
30318: ARRAY
30319: PPUSH
30320: LD_VAR 0 2
30324: PUSH
30325: LD_VAR 0 5
30329: PUSH
30330: LD_INT 1
30332: MINUS
30333: ARRAY
30334: PPUSH
30335: LD_VAR 0 7
30339: PUSH
30340: LD_VAR 0 5
30344: ARRAY
30345: PPUSH
30346: CALL_OW 1
30350: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
30351: LD_ADDR_VAR 0 7
30355: PUSH
30356: LD_VAR 0 7
30360: PPUSH
30361: LD_VAR 0 5
30365: PUSH
30366: LD_INT 1
30368: MINUS
30369: PPUSH
30370: LD_VAR 0 6
30374: PPUSH
30375: CALL_OW 1
30379: ST_TO_ADDR
// end ;
30380: GO 30297
30382: POP
30383: POP
// result := s_arr [ 1 ] ;
30384: LD_ADDR_VAR 0 4
30388: PUSH
30389: LD_VAR 0 7
30393: PUSH
30394: LD_INT 1
30396: ARRAY
30397: ST_TO_ADDR
// end ; end ;
30398: LD_VAR 0 4
30402: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
30403: LD_INT 0
30405: PPUSH
30406: PPUSH
// if not list then
30407: LD_VAR 0 1
30411: NOT
30412: IFFALSE 30416
// exit ;
30414: GO 30507
// i := list [ pos1 ] ;
30416: LD_ADDR_VAR 0 5
30420: PUSH
30421: LD_VAR 0 1
30425: PUSH
30426: LD_VAR 0 2
30430: ARRAY
30431: ST_TO_ADDR
// if not i then
30432: LD_VAR 0 5
30436: NOT
30437: IFFALSE 30441
// exit ;
30439: GO 30507
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
30441: LD_ADDR_VAR 0 1
30445: PUSH
30446: LD_VAR 0 1
30450: PPUSH
30451: LD_VAR 0 2
30455: PPUSH
30456: LD_VAR 0 1
30460: PUSH
30461: LD_VAR 0 3
30465: ARRAY
30466: PPUSH
30467: CALL_OW 1
30471: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
30472: LD_ADDR_VAR 0 1
30476: PUSH
30477: LD_VAR 0 1
30481: PPUSH
30482: LD_VAR 0 3
30486: PPUSH
30487: LD_VAR 0 5
30491: PPUSH
30492: CALL_OW 1
30496: ST_TO_ADDR
// result := list ;
30497: LD_ADDR_VAR 0 4
30501: PUSH
30502: LD_VAR 0 1
30506: ST_TO_ADDR
// end ;
30507: LD_VAR 0 4
30511: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
30512: LD_INT 0
30514: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
30515: LD_ADDR_VAR 0 5
30519: PUSH
30520: LD_VAR 0 1
30524: PPUSH
30525: CALL_OW 250
30529: PPUSH
30530: LD_VAR 0 1
30534: PPUSH
30535: CALL_OW 251
30539: PPUSH
30540: LD_VAR 0 2
30544: PPUSH
30545: LD_VAR 0 3
30549: PPUSH
30550: LD_VAR 0 4
30554: PPUSH
30555: CALL 30565 0 5
30559: ST_TO_ADDR
// end ;
30560: LD_VAR 0 5
30564: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
30565: LD_INT 0
30567: PPUSH
30568: PPUSH
30569: PPUSH
30570: PPUSH
// if not list then
30571: LD_VAR 0 3
30575: NOT
30576: IFFALSE 30580
// exit ;
30578: GO 30968
// result := [ ] ;
30580: LD_ADDR_VAR 0 6
30584: PUSH
30585: EMPTY
30586: ST_TO_ADDR
// for i in list do
30587: LD_ADDR_VAR 0 7
30591: PUSH
30592: LD_VAR 0 3
30596: PUSH
30597: FOR_IN
30598: IFFALSE 30800
// begin tmp := GetDistUnitXY ( i , x , y ) ;
30600: LD_ADDR_VAR 0 9
30604: PUSH
30605: LD_VAR 0 7
30609: PPUSH
30610: LD_VAR 0 1
30614: PPUSH
30615: LD_VAR 0 2
30619: PPUSH
30620: CALL_OW 297
30624: ST_TO_ADDR
// if not result then
30625: LD_VAR 0 6
30629: NOT
30630: IFFALSE 30656
// result := [ [ i , tmp ] ] else
30632: LD_ADDR_VAR 0 6
30636: PUSH
30637: LD_VAR 0 7
30641: PUSH
30642: LD_VAR 0 9
30646: PUSH
30647: EMPTY
30648: LIST
30649: LIST
30650: PUSH
30651: EMPTY
30652: LIST
30653: ST_TO_ADDR
30654: GO 30798
// begin if result [ result ] [ 2 ] < tmp then
30656: LD_VAR 0 6
30660: PUSH
30661: LD_VAR 0 6
30665: ARRAY
30666: PUSH
30667: LD_INT 2
30669: ARRAY
30670: PUSH
30671: LD_VAR 0 9
30675: LESS
30676: IFFALSE 30718
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
30678: LD_ADDR_VAR 0 6
30682: PUSH
30683: LD_VAR 0 6
30687: PPUSH
30688: LD_VAR 0 6
30692: PUSH
30693: LD_INT 1
30695: PLUS
30696: PPUSH
30697: LD_VAR 0 7
30701: PUSH
30702: LD_VAR 0 9
30706: PUSH
30707: EMPTY
30708: LIST
30709: LIST
30710: PPUSH
30711: CALL_OW 2
30715: ST_TO_ADDR
30716: GO 30798
// for j = 1 to result do
30718: LD_ADDR_VAR 0 8
30722: PUSH
30723: DOUBLE
30724: LD_INT 1
30726: DEC
30727: ST_TO_ADDR
30728: LD_VAR 0 6
30732: PUSH
30733: FOR_TO
30734: IFFALSE 30796
// begin if tmp < result [ j ] [ 2 ] then
30736: LD_VAR 0 9
30740: PUSH
30741: LD_VAR 0 6
30745: PUSH
30746: LD_VAR 0 8
30750: ARRAY
30751: PUSH
30752: LD_INT 2
30754: ARRAY
30755: LESS
30756: IFFALSE 30794
// begin result := Insert ( result , j , [ i , tmp ] ) ;
30758: LD_ADDR_VAR 0 6
30762: PUSH
30763: LD_VAR 0 6
30767: PPUSH
30768: LD_VAR 0 8
30772: PPUSH
30773: LD_VAR 0 7
30777: PUSH
30778: LD_VAR 0 9
30782: PUSH
30783: EMPTY
30784: LIST
30785: LIST
30786: PPUSH
30787: CALL_OW 2
30791: ST_TO_ADDR
// break ;
30792: GO 30796
// end ; end ;
30794: GO 30733
30796: POP
30797: POP
// end ; end ;
30798: GO 30597
30800: POP
30801: POP
// if result and not asc then
30802: LD_VAR 0 6
30806: PUSH
30807: LD_VAR 0 4
30811: NOT
30812: AND
30813: IFFALSE 30888
// begin tmp := result ;
30815: LD_ADDR_VAR 0 9
30819: PUSH
30820: LD_VAR 0 6
30824: ST_TO_ADDR
// for i = tmp downto 1 do
30825: LD_ADDR_VAR 0 7
30829: PUSH
30830: DOUBLE
30831: LD_VAR 0 9
30835: INC
30836: ST_TO_ADDR
30837: LD_INT 1
30839: PUSH
30840: FOR_DOWNTO
30841: IFFALSE 30886
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
30843: LD_ADDR_VAR 0 6
30847: PUSH
30848: LD_VAR 0 6
30852: PPUSH
30853: LD_VAR 0 9
30857: PUSH
30858: LD_VAR 0 7
30862: MINUS
30863: PUSH
30864: LD_INT 1
30866: PLUS
30867: PPUSH
30868: LD_VAR 0 9
30872: PUSH
30873: LD_VAR 0 7
30877: ARRAY
30878: PPUSH
30879: CALL_OW 1
30883: ST_TO_ADDR
30884: GO 30840
30886: POP
30887: POP
// end ; tmp := [ ] ;
30888: LD_ADDR_VAR 0 9
30892: PUSH
30893: EMPTY
30894: ST_TO_ADDR
// if mode then
30895: LD_VAR 0 5
30899: IFFALSE 30968
// begin for i = 1 to result do
30901: LD_ADDR_VAR 0 7
30905: PUSH
30906: DOUBLE
30907: LD_INT 1
30909: DEC
30910: ST_TO_ADDR
30911: LD_VAR 0 6
30915: PUSH
30916: FOR_TO
30917: IFFALSE 30956
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
30919: LD_ADDR_VAR 0 9
30923: PUSH
30924: LD_VAR 0 9
30928: PPUSH
30929: LD_VAR 0 7
30933: PPUSH
30934: LD_VAR 0 6
30938: PUSH
30939: LD_VAR 0 7
30943: ARRAY
30944: PUSH
30945: LD_INT 1
30947: ARRAY
30948: PPUSH
30949: CALL_OW 1
30953: ST_TO_ADDR
30954: GO 30916
30956: POP
30957: POP
// result := tmp ;
30958: LD_ADDR_VAR 0 6
30962: PUSH
30963: LD_VAR 0 9
30967: ST_TO_ADDR
// end ; end ;
30968: LD_VAR 0 6
30972: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
30973: LD_INT 0
30975: PPUSH
30976: PPUSH
30977: PPUSH
30978: PPUSH
30979: PPUSH
30980: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
30981: LD_ADDR_VAR 0 5
30985: PUSH
30986: LD_INT 0
30988: PUSH
30989: LD_INT 0
30991: PUSH
30992: LD_INT 0
30994: PUSH
30995: EMPTY
30996: PUSH
30997: EMPTY
30998: LIST
30999: LIST
31000: LIST
31001: LIST
31002: ST_TO_ADDR
// if not x or not y then
31003: LD_VAR 0 2
31007: NOT
31008: PUSH
31009: LD_VAR 0 3
31013: NOT
31014: OR
31015: IFFALSE 31019
// exit ;
31017: GO 32665
// if not range then
31019: LD_VAR 0 4
31023: NOT
31024: IFFALSE 31034
// range := 10 ;
31026: LD_ADDR_VAR 0 4
31030: PUSH
31031: LD_INT 10
31033: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
31034: LD_ADDR_VAR 0 8
31038: PUSH
31039: LD_INT 81
31041: PUSH
31042: LD_VAR 0 1
31046: PUSH
31047: EMPTY
31048: LIST
31049: LIST
31050: PUSH
31051: LD_INT 92
31053: PUSH
31054: LD_VAR 0 2
31058: PUSH
31059: LD_VAR 0 3
31063: PUSH
31064: LD_VAR 0 4
31068: PUSH
31069: EMPTY
31070: LIST
31071: LIST
31072: LIST
31073: LIST
31074: PUSH
31075: LD_INT 3
31077: PUSH
31078: LD_INT 21
31080: PUSH
31081: LD_INT 3
31083: PUSH
31084: EMPTY
31085: LIST
31086: LIST
31087: PUSH
31088: EMPTY
31089: LIST
31090: LIST
31091: PUSH
31092: EMPTY
31093: LIST
31094: LIST
31095: LIST
31096: PPUSH
31097: CALL_OW 69
31101: ST_TO_ADDR
// if not tmp then
31102: LD_VAR 0 8
31106: NOT
31107: IFFALSE 31111
// exit ;
31109: GO 32665
// for i in tmp do
31111: LD_ADDR_VAR 0 6
31115: PUSH
31116: LD_VAR 0 8
31120: PUSH
31121: FOR_IN
31122: IFFALSE 32640
// begin points := [ 0 , 0 , 0 ] ;
31124: LD_ADDR_VAR 0 9
31128: PUSH
31129: LD_INT 0
31131: PUSH
31132: LD_INT 0
31134: PUSH
31135: LD_INT 0
31137: PUSH
31138: EMPTY
31139: LIST
31140: LIST
31141: LIST
31142: ST_TO_ADDR
// bpoints := 1 ;
31143: LD_ADDR_VAR 0 10
31147: PUSH
31148: LD_INT 1
31150: ST_TO_ADDR
// case GetType ( i ) of unit_human :
31151: LD_VAR 0 6
31155: PPUSH
31156: CALL_OW 247
31160: PUSH
31161: LD_INT 1
31163: DOUBLE
31164: EQUAL
31165: IFTRUE 31169
31167: GO 31747
31169: POP
// begin if GetClass ( i ) = 1 then
31170: LD_VAR 0 6
31174: PPUSH
31175: CALL_OW 257
31179: PUSH
31180: LD_INT 1
31182: EQUAL
31183: IFFALSE 31204
// points := [ 10 , 5 , 3 ] ;
31185: LD_ADDR_VAR 0 9
31189: PUSH
31190: LD_INT 10
31192: PUSH
31193: LD_INT 5
31195: PUSH
31196: LD_INT 3
31198: PUSH
31199: EMPTY
31200: LIST
31201: LIST
31202: LIST
31203: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
31204: LD_VAR 0 6
31208: PPUSH
31209: CALL_OW 257
31213: PUSH
31214: LD_INT 2
31216: PUSH
31217: LD_INT 3
31219: PUSH
31220: LD_INT 4
31222: PUSH
31223: EMPTY
31224: LIST
31225: LIST
31226: LIST
31227: IN
31228: IFFALSE 31249
// points := [ 3 , 2 , 1 ] ;
31230: LD_ADDR_VAR 0 9
31234: PUSH
31235: LD_INT 3
31237: PUSH
31238: LD_INT 2
31240: PUSH
31241: LD_INT 1
31243: PUSH
31244: EMPTY
31245: LIST
31246: LIST
31247: LIST
31248: ST_TO_ADDR
// if GetClass ( i ) = 5 then
31249: LD_VAR 0 6
31253: PPUSH
31254: CALL_OW 257
31258: PUSH
31259: LD_INT 5
31261: EQUAL
31262: IFFALSE 31283
// points := [ 130 , 5 , 2 ] ;
31264: LD_ADDR_VAR 0 9
31268: PUSH
31269: LD_INT 130
31271: PUSH
31272: LD_INT 5
31274: PUSH
31275: LD_INT 2
31277: PUSH
31278: EMPTY
31279: LIST
31280: LIST
31281: LIST
31282: ST_TO_ADDR
// if GetClass ( i ) = 8 then
31283: LD_VAR 0 6
31287: PPUSH
31288: CALL_OW 257
31292: PUSH
31293: LD_INT 8
31295: EQUAL
31296: IFFALSE 31317
// points := [ 35 , 35 , 30 ] ;
31298: LD_ADDR_VAR 0 9
31302: PUSH
31303: LD_INT 35
31305: PUSH
31306: LD_INT 35
31308: PUSH
31309: LD_INT 30
31311: PUSH
31312: EMPTY
31313: LIST
31314: LIST
31315: LIST
31316: ST_TO_ADDR
// if GetClass ( i ) = 9 then
31317: LD_VAR 0 6
31321: PPUSH
31322: CALL_OW 257
31326: PUSH
31327: LD_INT 9
31329: EQUAL
31330: IFFALSE 31351
// points := [ 20 , 55 , 40 ] ;
31332: LD_ADDR_VAR 0 9
31336: PUSH
31337: LD_INT 20
31339: PUSH
31340: LD_INT 55
31342: PUSH
31343: LD_INT 40
31345: PUSH
31346: EMPTY
31347: LIST
31348: LIST
31349: LIST
31350: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
31351: LD_VAR 0 6
31355: PPUSH
31356: CALL_OW 257
31360: PUSH
31361: LD_INT 12
31363: PUSH
31364: LD_INT 16
31366: PUSH
31367: EMPTY
31368: LIST
31369: LIST
31370: IN
31371: IFFALSE 31392
// points := [ 5 , 3 , 2 ] ;
31373: LD_ADDR_VAR 0 9
31377: PUSH
31378: LD_INT 5
31380: PUSH
31381: LD_INT 3
31383: PUSH
31384: LD_INT 2
31386: PUSH
31387: EMPTY
31388: LIST
31389: LIST
31390: LIST
31391: ST_TO_ADDR
// if GetClass ( i ) = 17 then
31392: LD_VAR 0 6
31396: PPUSH
31397: CALL_OW 257
31401: PUSH
31402: LD_INT 17
31404: EQUAL
31405: IFFALSE 31426
// points := [ 100 , 50 , 75 ] ;
31407: LD_ADDR_VAR 0 9
31411: PUSH
31412: LD_INT 100
31414: PUSH
31415: LD_INT 50
31417: PUSH
31418: LD_INT 75
31420: PUSH
31421: EMPTY
31422: LIST
31423: LIST
31424: LIST
31425: ST_TO_ADDR
// if GetClass ( i ) = 15 then
31426: LD_VAR 0 6
31430: PPUSH
31431: CALL_OW 257
31435: PUSH
31436: LD_INT 15
31438: EQUAL
31439: IFFALSE 31460
// points := [ 10 , 5 , 3 ] ;
31441: LD_ADDR_VAR 0 9
31445: PUSH
31446: LD_INT 10
31448: PUSH
31449: LD_INT 5
31451: PUSH
31452: LD_INT 3
31454: PUSH
31455: EMPTY
31456: LIST
31457: LIST
31458: LIST
31459: ST_TO_ADDR
// if GetClass ( i ) = 14 then
31460: LD_VAR 0 6
31464: PPUSH
31465: CALL_OW 257
31469: PUSH
31470: LD_INT 14
31472: EQUAL
31473: IFFALSE 31494
// points := [ 10 , 0 , 0 ] ;
31475: LD_ADDR_VAR 0 9
31479: PUSH
31480: LD_INT 10
31482: PUSH
31483: LD_INT 0
31485: PUSH
31486: LD_INT 0
31488: PUSH
31489: EMPTY
31490: LIST
31491: LIST
31492: LIST
31493: ST_TO_ADDR
// if GetClass ( i ) = 11 then
31494: LD_VAR 0 6
31498: PPUSH
31499: CALL_OW 257
31503: PUSH
31504: LD_INT 11
31506: EQUAL
31507: IFFALSE 31528
// points := [ 30 , 10 , 5 ] ;
31509: LD_ADDR_VAR 0 9
31513: PUSH
31514: LD_INT 30
31516: PUSH
31517: LD_INT 10
31519: PUSH
31520: LD_INT 5
31522: PUSH
31523: EMPTY
31524: LIST
31525: LIST
31526: LIST
31527: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
31528: LD_VAR 0 1
31532: PPUSH
31533: LD_INT 5
31535: PPUSH
31536: CALL_OW 321
31540: PUSH
31541: LD_INT 2
31543: EQUAL
31544: IFFALSE 31561
// bpoints := bpoints * 1.8 ;
31546: LD_ADDR_VAR 0 10
31550: PUSH
31551: LD_VAR 0 10
31555: PUSH
31556: LD_REAL  1.80000000000000E+0000
31559: MUL
31560: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
31561: LD_VAR 0 6
31565: PPUSH
31566: CALL_OW 257
31570: PUSH
31571: LD_INT 1
31573: PUSH
31574: LD_INT 2
31576: PUSH
31577: LD_INT 3
31579: PUSH
31580: LD_INT 4
31582: PUSH
31583: EMPTY
31584: LIST
31585: LIST
31586: LIST
31587: LIST
31588: IN
31589: PUSH
31590: LD_VAR 0 1
31594: PPUSH
31595: LD_INT 51
31597: PPUSH
31598: CALL_OW 321
31602: PUSH
31603: LD_INT 2
31605: EQUAL
31606: AND
31607: IFFALSE 31624
// bpoints := bpoints * 1.2 ;
31609: LD_ADDR_VAR 0 10
31613: PUSH
31614: LD_VAR 0 10
31618: PUSH
31619: LD_REAL  1.20000000000000E+0000
31622: MUL
31623: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
31624: LD_VAR 0 6
31628: PPUSH
31629: CALL_OW 257
31633: PUSH
31634: LD_INT 5
31636: PUSH
31637: LD_INT 7
31639: PUSH
31640: LD_INT 9
31642: PUSH
31643: EMPTY
31644: LIST
31645: LIST
31646: LIST
31647: IN
31648: PUSH
31649: LD_VAR 0 1
31653: PPUSH
31654: LD_INT 52
31656: PPUSH
31657: CALL_OW 321
31661: PUSH
31662: LD_INT 2
31664: EQUAL
31665: AND
31666: IFFALSE 31683
// bpoints := bpoints * 1.5 ;
31668: LD_ADDR_VAR 0 10
31672: PUSH
31673: LD_VAR 0 10
31677: PUSH
31678: LD_REAL  1.50000000000000E+0000
31681: MUL
31682: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
31683: LD_VAR 0 1
31687: PPUSH
31688: LD_INT 66
31690: PPUSH
31691: CALL_OW 321
31695: PUSH
31696: LD_INT 2
31698: EQUAL
31699: IFFALSE 31716
// bpoints := bpoints * 1.1 ;
31701: LD_ADDR_VAR 0 10
31705: PUSH
31706: LD_VAR 0 10
31710: PUSH
31711: LD_REAL  1.10000000000000E+0000
31714: MUL
31715: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
31716: LD_ADDR_VAR 0 10
31720: PUSH
31721: LD_VAR 0 10
31725: PUSH
31726: LD_VAR 0 6
31730: PPUSH
31731: LD_INT 1
31733: PPUSH
31734: CALL_OW 259
31738: PUSH
31739: LD_REAL  1.15000000000000E+0000
31742: MUL
31743: MUL
31744: ST_TO_ADDR
// end ; unit_vehicle :
31745: GO 32569
31747: LD_INT 2
31749: DOUBLE
31750: EQUAL
31751: IFTRUE 31755
31753: GO 32557
31755: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
31756: LD_VAR 0 6
31760: PPUSH
31761: CALL_OW 264
31765: PUSH
31766: LD_INT 2
31768: PUSH
31769: LD_INT 42
31771: PUSH
31772: LD_INT 24
31774: PUSH
31775: EMPTY
31776: LIST
31777: LIST
31778: LIST
31779: IN
31780: IFFALSE 31801
// points := [ 25 , 5 , 3 ] ;
31782: LD_ADDR_VAR 0 9
31786: PUSH
31787: LD_INT 25
31789: PUSH
31790: LD_INT 5
31792: PUSH
31793: LD_INT 3
31795: PUSH
31796: EMPTY
31797: LIST
31798: LIST
31799: LIST
31800: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
31801: LD_VAR 0 6
31805: PPUSH
31806: CALL_OW 264
31810: PUSH
31811: LD_INT 4
31813: PUSH
31814: LD_INT 43
31816: PUSH
31817: LD_INT 25
31819: PUSH
31820: EMPTY
31821: LIST
31822: LIST
31823: LIST
31824: IN
31825: IFFALSE 31846
// points := [ 40 , 15 , 5 ] ;
31827: LD_ADDR_VAR 0 9
31831: PUSH
31832: LD_INT 40
31834: PUSH
31835: LD_INT 15
31837: PUSH
31838: LD_INT 5
31840: PUSH
31841: EMPTY
31842: LIST
31843: LIST
31844: LIST
31845: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
31846: LD_VAR 0 6
31850: PPUSH
31851: CALL_OW 264
31855: PUSH
31856: LD_INT 3
31858: PUSH
31859: LD_INT 23
31861: PUSH
31862: EMPTY
31863: LIST
31864: LIST
31865: IN
31866: IFFALSE 31887
// points := [ 7 , 25 , 8 ] ;
31868: LD_ADDR_VAR 0 9
31872: PUSH
31873: LD_INT 7
31875: PUSH
31876: LD_INT 25
31878: PUSH
31879: LD_INT 8
31881: PUSH
31882: EMPTY
31883: LIST
31884: LIST
31885: LIST
31886: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
31887: LD_VAR 0 6
31891: PPUSH
31892: CALL_OW 264
31896: PUSH
31897: LD_INT 5
31899: PUSH
31900: LD_INT 27
31902: PUSH
31903: LD_INT 44
31905: PUSH
31906: EMPTY
31907: LIST
31908: LIST
31909: LIST
31910: IN
31911: IFFALSE 31932
// points := [ 14 , 50 , 16 ] ;
31913: LD_ADDR_VAR 0 9
31917: PUSH
31918: LD_INT 14
31920: PUSH
31921: LD_INT 50
31923: PUSH
31924: LD_INT 16
31926: PUSH
31927: EMPTY
31928: LIST
31929: LIST
31930: LIST
31931: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
31932: LD_VAR 0 6
31936: PPUSH
31937: CALL_OW 264
31941: PUSH
31942: LD_INT 6
31944: PUSH
31945: LD_INT 46
31947: PUSH
31948: EMPTY
31949: LIST
31950: LIST
31951: IN
31952: IFFALSE 31973
// points := [ 32 , 120 , 70 ] ;
31954: LD_ADDR_VAR 0 9
31958: PUSH
31959: LD_INT 32
31961: PUSH
31962: LD_INT 120
31964: PUSH
31965: LD_INT 70
31967: PUSH
31968: EMPTY
31969: LIST
31970: LIST
31971: LIST
31972: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
31973: LD_VAR 0 6
31977: PPUSH
31978: CALL_OW 264
31982: PUSH
31983: LD_INT 7
31985: PUSH
31986: LD_INT 28
31988: PUSH
31989: LD_INT 45
31991: PUSH
31992: EMPTY
31993: LIST
31994: LIST
31995: LIST
31996: IN
31997: IFFALSE 32018
// points := [ 35 , 20 , 45 ] ;
31999: LD_ADDR_VAR 0 9
32003: PUSH
32004: LD_INT 35
32006: PUSH
32007: LD_INT 20
32009: PUSH
32010: LD_INT 45
32012: PUSH
32013: EMPTY
32014: LIST
32015: LIST
32016: LIST
32017: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
32018: LD_VAR 0 6
32022: PPUSH
32023: CALL_OW 264
32027: PUSH
32028: LD_INT 47
32030: PUSH
32031: EMPTY
32032: LIST
32033: IN
32034: IFFALSE 32055
// points := [ 67 , 45 , 75 ] ;
32036: LD_ADDR_VAR 0 9
32040: PUSH
32041: LD_INT 67
32043: PUSH
32044: LD_INT 45
32046: PUSH
32047: LD_INT 75
32049: PUSH
32050: EMPTY
32051: LIST
32052: LIST
32053: LIST
32054: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
32055: LD_VAR 0 6
32059: PPUSH
32060: CALL_OW 264
32064: PUSH
32065: LD_INT 26
32067: PUSH
32068: EMPTY
32069: LIST
32070: IN
32071: IFFALSE 32092
// points := [ 120 , 30 , 80 ] ;
32073: LD_ADDR_VAR 0 9
32077: PUSH
32078: LD_INT 120
32080: PUSH
32081: LD_INT 30
32083: PUSH
32084: LD_INT 80
32086: PUSH
32087: EMPTY
32088: LIST
32089: LIST
32090: LIST
32091: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
32092: LD_VAR 0 6
32096: PPUSH
32097: CALL_OW 264
32101: PUSH
32102: LD_INT 22
32104: PUSH
32105: EMPTY
32106: LIST
32107: IN
32108: IFFALSE 32129
// points := [ 40 , 1 , 1 ] ;
32110: LD_ADDR_VAR 0 9
32114: PUSH
32115: LD_INT 40
32117: PUSH
32118: LD_INT 1
32120: PUSH
32121: LD_INT 1
32123: PUSH
32124: EMPTY
32125: LIST
32126: LIST
32127: LIST
32128: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
32129: LD_VAR 0 6
32133: PPUSH
32134: CALL_OW 264
32138: PUSH
32139: LD_INT 29
32141: PUSH
32142: EMPTY
32143: LIST
32144: IN
32145: IFFALSE 32166
// points := [ 70 , 200 , 400 ] ;
32147: LD_ADDR_VAR 0 9
32151: PUSH
32152: LD_INT 70
32154: PUSH
32155: LD_INT 200
32157: PUSH
32158: LD_INT 400
32160: PUSH
32161: EMPTY
32162: LIST
32163: LIST
32164: LIST
32165: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
32166: LD_VAR 0 6
32170: PPUSH
32171: CALL_OW 264
32175: PUSH
32176: LD_INT 14
32178: PUSH
32179: LD_INT 53
32181: PUSH
32182: EMPTY
32183: LIST
32184: LIST
32185: IN
32186: IFFALSE 32207
// points := [ 40 , 10 , 20 ] ;
32188: LD_ADDR_VAR 0 9
32192: PUSH
32193: LD_INT 40
32195: PUSH
32196: LD_INT 10
32198: PUSH
32199: LD_INT 20
32201: PUSH
32202: EMPTY
32203: LIST
32204: LIST
32205: LIST
32206: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
32207: LD_VAR 0 6
32211: PPUSH
32212: CALL_OW 264
32216: PUSH
32217: LD_INT 9
32219: PUSH
32220: EMPTY
32221: LIST
32222: IN
32223: IFFALSE 32244
// points := [ 5 , 70 , 20 ] ;
32225: LD_ADDR_VAR 0 9
32229: PUSH
32230: LD_INT 5
32232: PUSH
32233: LD_INT 70
32235: PUSH
32236: LD_INT 20
32238: PUSH
32239: EMPTY
32240: LIST
32241: LIST
32242: LIST
32243: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
32244: LD_VAR 0 6
32248: PPUSH
32249: CALL_OW 264
32253: PUSH
32254: LD_INT 10
32256: PUSH
32257: EMPTY
32258: LIST
32259: IN
32260: IFFALSE 32281
// points := [ 35 , 110 , 70 ] ;
32262: LD_ADDR_VAR 0 9
32266: PUSH
32267: LD_INT 35
32269: PUSH
32270: LD_INT 110
32272: PUSH
32273: LD_INT 70
32275: PUSH
32276: EMPTY
32277: LIST
32278: LIST
32279: LIST
32280: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
32281: LD_VAR 0 6
32285: PPUSH
32286: CALL_OW 265
32290: PUSH
32291: LD_INT 25
32293: EQUAL
32294: IFFALSE 32315
// points := [ 80 , 65 , 100 ] ;
32296: LD_ADDR_VAR 0 9
32300: PUSH
32301: LD_INT 80
32303: PUSH
32304: LD_INT 65
32306: PUSH
32307: LD_INT 100
32309: PUSH
32310: EMPTY
32311: LIST
32312: LIST
32313: LIST
32314: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
32315: LD_VAR 0 6
32319: PPUSH
32320: CALL_OW 263
32324: PUSH
32325: LD_INT 1
32327: EQUAL
32328: IFFALSE 32363
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
32330: LD_ADDR_VAR 0 10
32334: PUSH
32335: LD_VAR 0 10
32339: PUSH
32340: LD_VAR 0 6
32344: PPUSH
32345: CALL_OW 311
32349: PPUSH
32350: LD_INT 3
32352: PPUSH
32353: CALL_OW 259
32357: PUSH
32358: LD_INT 4
32360: MUL
32361: MUL
32362: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
32363: LD_VAR 0 6
32367: PPUSH
32368: CALL_OW 263
32372: PUSH
32373: LD_INT 2
32375: EQUAL
32376: IFFALSE 32427
// begin j := IsControledBy ( i ) ;
32378: LD_ADDR_VAR 0 7
32382: PUSH
32383: LD_VAR 0 6
32387: PPUSH
32388: CALL_OW 312
32392: ST_TO_ADDR
// if j then
32393: LD_VAR 0 7
32397: IFFALSE 32427
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
32399: LD_ADDR_VAR 0 10
32403: PUSH
32404: LD_VAR 0 10
32408: PUSH
32409: LD_VAR 0 7
32413: PPUSH
32414: LD_INT 3
32416: PPUSH
32417: CALL_OW 259
32421: PUSH
32422: LD_INT 3
32424: MUL
32425: MUL
32426: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
32427: LD_VAR 0 6
32431: PPUSH
32432: CALL_OW 264
32436: PUSH
32437: LD_INT 5
32439: PUSH
32440: LD_INT 6
32442: PUSH
32443: LD_INT 46
32445: PUSH
32446: LD_INT 44
32448: PUSH
32449: LD_INT 47
32451: PUSH
32452: LD_INT 45
32454: PUSH
32455: LD_INT 28
32457: PUSH
32458: LD_INT 7
32460: PUSH
32461: LD_INT 27
32463: PUSH
32464: LD_INT 29
32466: PUSH
32467: EMPTY
32468: LIST
32469: LIST
32470: LIST
32471: LIST
32472: LIST
32473: LIST
32474: LIST
32475: LIST
32476: LIST
32477: LIST
32478: IN
32479: PUSH
32480: LD_VAR 0 1
32484: PPUSH
32485: LD_INT 52
32487: PPUSH
32488: CALL_OW 321
32492: PUSH
32493: LD_INT 2
32495: EQUAL
32496: AND
32497: IFFALSE 32514
// bpoints := bpoints * 1.2 ;
32499: LD_ADDR_VAR 0 10
32503: PUSH
32504: LD_VAR 0 10
32508: PUSH
32509: LD_REAL  1.20000000000000E+0000
32512: MUL
32513: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
32514: LD_VAR 0 6
32518: PPUSH
32519: CALL_OW 264
32523: PUSH
32524: LD_INT 6
32526: PUSH
32527: LD_INT 46
32529: PUSH
32530: LD_INT 47
32532: PUSH
32533: EMPTY
32534: LIST
32535: LIST
32536: LIST
32537: IN
32538: IFFALSE 32555
// bpoints := bpoints * 1.2 ;
32540: LD_ADDR_VAR 0 10
32544: PUSH
32545: LD_VAR 0 10
32549: PUSH
32550: LD_REAL  1.20000000000000E+0000
32553: MUL
32554: ST_TO_ADDR
// end ; unit_building :
32555: GO 32569
32557: LD_INT 3
32559: DOUBLE
32560: EQUAL
32561: IFTRUE 32565
32563: GO 32568
32565: POP
// ; end ;
32566: GO 32569
32568: POP
// for j = 1 to 3 do
32569: LD_ADDR_VAR 0 7
32573: PUSH
32574: DOUBLE
32575: LD_INT 1
32577: DEC
32578: ST_TO_ADDR
32579: LD_INT 3
32581: PUSH
32582: FOR_TO
32583: IFFALSE 32636
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
32585: LD_ADDR_VAR 0 5
32589: PUSH
32590: LD_VAR 0 5
32594: PPUSH
32595: LD_VAR 0 7
32599: PPUSH
32600: LD_VAR 0 5
32604: PUSH
32605: LD_VAR 0 7
32609: ARRAY
32610: PUSH
32611: LD_VAR 0 9
32615: PUSH
32616: LD_VAR 0 7
32620: ARRAY
32621: PUSH
32622: LD_VAR 0 10
32626: MUL
32627: PLUS
32628: PPUSH
32629: CALL_OW 1
32633: ST_TO_ADDR
32634: GO 32582
32636: POP
32637: POP
// end ;
32638: GO 31121
32640: POP
32641: POP
// result := Replace ( result , 4 , tmp ) ;
32642: LD_ADDR_VAR 0 5
32646: PUSH
32647: LD_VAR 0 5
32651: PPUSH
32652: LD_INT 4
32654: PPUSH
32655: LD_VAR 0 8
32659: PPUSH
32660: CALL_OW 1
32664: ST_TO_ADDR
// end ;
32665: LD_VAR 0 5
32669: RET
// export function DangerAtRange ( unit , range ) ; begin
32670: LD_INT 0
32672: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
32673: LD_ADDR_VAR 0 3
32677: PUSH
32678: LD_VAR 0 1
32682: PPUSH
32683: CALL_OW 255
32687: PPUSH
32688: LD_VAR 0 1
32692: PPUSH
32693: CALL_OW 250
32697: PPUSH
32698: LD_VAR 0 1
32702: PPUSH
32703: CALL_OW 251
32707: PPUSH
32708: LD_VAR 0 2
32712: PPUSH
32713: CALL 30973 0 4
32717: ST_TO_ADDR
// end ;
32718: LD_VAR 0 3
32722: RET
// export function DangerInArea ( side , area ) ; begin
32723: LD_INT 0
32725: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
32726: LD_ADDR_VAR 0 3
32730: PUSH
32731: LD_VAR 0 2
32735: PPUSH
32736: LD_INT 81
32738: PUSH
32739: LD_VAR 0 1
32743: PUSH
32744: EMPTY
32745: LIST
32746: LIST
32747: PPUSH
32748: CALL_OW 70
32752: ST_TO_ADDR
// end ;
32753: LD_VAR 0 3
32757: RET
// export function IsExtension ( b ) ; begin
32758: LD_INT 0
32760: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
32761: LD_ADDR_VAR 0 2
32765: PUSH
32766: LD_VAR 0 1
32770: PUSH
32771: LD_INT 23
32773: PUSH
32774: LD_INT 20
32776: PUSH
32777: LD_INT 22
32779: PUSH
32780: LD_INT 17
32782: PUSH
32783: LD_INT 24
32785: PUSH
32786: LD_INT 21
32788: PUSH
32789: LD_INT 19
32791: PUSH
32792: LD_INT 16
32794: PUSH
32795: LD_INT 25
32797: PUSH
32798: LD_INT 18
32800: PUSH
32801: EMPTY
32802: LIST
32803: LIST
32804: LIST
32805: LIST
32806: LIST
32807: LIST
32808: LIST
32809: LIST
32810: LIST
32811: LIST
32812: IN
32813: ST_TO_ADDR
// end ;
32814: LD_VAR 0 2
32818: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
32819: LD_INT 0
32821: PPUSH
32822: PPUSH
32823: PPUSH
// result := [ ] ;
32824: LD_ADDR_VAR 0 3
32828: PUSH
32829: EMPTY
32830: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
32831: LD_ADDR_VAR 0 4
32835: PUSH
32836: LD_VAR 0 2
32840: PPUSH
32841: LD_INT 21
32843: PUSH
32844: LD_INT 3
32846: PUSH
32847: EMPTY
32848: LIST
32849: LIST
32850: PPUSH
32851: CALL_OW 70
32855: ST_TO_ADDR
// if not tmp then
32856: LD_VAR 0 4
32860: NOT
32861: IFFALSE 32865
// exit ;
32863: GO 32923
// for i in tmp do
32865: LD_ADDR_VAR 0 5
32869: PUSH
32870: LD_VAR 0 4
32874: PUSH
32875: FOR_IN
32876: IFFALSE 32911
// if GetBase ( i ) <> base then
32878: LD_VAR 0 5
32882: PPUSH
32883: CALL_OW 274
32887: PUSH
32888: LD_VAR 0 1
32892: NONEQUAL
32893: IFFALSE 32909
// ComLinkToBase ( base , i ) ;
32895: LD_VAR 0 1
32899: PPUSH
32900: LD_VAR 0 5
32904: PPUSH
32905: CALL_OW 169
32909: GO 32875
32911: POP
32912: POP
// result := tmp ;
32913: LD_ADDR_VAR 0 3
32917: PUSH
32918: LD_VAR 0 4
32922: ST_TO_ADDR
// end ;
32923: LD_VAR 0 3
32927: RET
// export function ComComplete ( unit , b ) ; var i ; begin
32928: LD_INT 0
32930: PPUSH
32931: PPUSH
// if BuildingStatus ( b ) = bs_build then
32932: LD_VAR 0 2
32936: PPUSH
32937: CALL_OW 461
32941: PUSH
32942: LD_INT 1
32944: EQUAL
32945: IFFALSE 33005
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
32947: LD_VAR 0 1
32951: PPUSH
32952: LD_STRING h
32954: PUSH
32955: LD_VAR 0 2
32959: PPUSH
32960: CALL_OW 250
32964: PUSH
32965: LD_VAR 0 2
32969: PPUSH
32970: CALL_OW 251
32974: PUSH
32975: LD_VAR 0 2
32979: PUSH
32980: LD_INT 0
32982: PUSH
32983: LD_INT 0
32985: PUSH
32986: LD_INT 0
32988: PUSH
32989: EMPTY
32990: LIST
32991: LIST
32992: LIST
32993: LIST
32994: LIST
32995: LIST
32996: LIST
32997: PUSH
32998: EMPTY
32999: LIST
33000: PPUSH
33001: CALL_OW 446
// end ;
33005: LD_VAR 0 3
33009: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
33010: LD_INT 0
33012: PPUSH
33013: PPUSH
33014: PPUSH
33015: PPUSH
33016: PPUSH
33017: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
33018: LD_VAR 0 1
33022: NOT
33023: PUSH
33024: LD_VAR 0 1
33028: PPUSH
33029: CALL_OW 263
33033: PUSH
33034: LD_INT 2
33036: EQUAL
33037: NOT
33038: OR
33039: IFFALSE 33043
// exit ;
33041: GO 33359
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
33043: LD_ADDR_VAR 0 6
33047: PUSH
33048: LD_INT 22
33050: PUSH
33051: LD_VAR 0 1
33055: PPUSH
33056: CALL_OW 255
33060: PUSH
33061: EMPTY
33062: LIST
33063: LIST
33064: PUSH
33065: LD_INT 2
33067: PUSH
33068: LD_INT 30
33070: PUSH
33071: LD_INT 36
33073: PUSH
33074: EMPTY
33075: LIST
33076: LIST
33077: PUSH
33078: LD_INT 34
33080: PUSH
33081: LD_INT 31
33083: PUSH
33084: EMPTY
33085: LIST
33086: LIST
33087: PUSH
33088: EMPTY
33089: LIST
33090: LIST
33091: LIST
33092: PUSH
33093: EMPTY
33094: LIST
33095: LIST
33096: PPUSH
33097: CALL_OW 69
33101: ST_TO_ADDR
// if not tmp then
33102: LD_VAR 0 6
33106: NOT
33107: IFFALSE 33111
// exit ;
33109: GO 33359
// result := [ ] ;
33111: LD_ADDR_VAR 0 2
33115: PUSH
33116: EMPTY
33117: ST_TO_ADDR
// for i in tmp do
33118: LD_ADDR_VAR 0 3
33122: PUSH
33123: LD_VAR 0 6
33127: PUSH
33128: FOR_IN
33129: IFFALSE 33200
// begin t := UnitsInside ( i ) ;
33131: LD_ADDR_VAR 0 4
33135: PUSH
33136: LD_VAR 0 3
33140: PPUSH
33141: CALL_OW 313
33145: ST_TO_ADDR
// if t then
33146: LD_VAR 0 4
33150: IFFALSE 33198
// for j in t do
33152: LD_ADDR_VAR 0 7
33156: PUSH
33157: LD_VAR 0 4
33161: PUSH
33162: FOR_IN
33163: IFFALSE 33196
// result := Insert ( result , result + 1 , j ) ;
33165: LD_ADDR_VAR 0 2
33169: PUSH
33170: LD_VAR 0 2
33174: PPUSH
33175: LD_VAR 0 2
33179: PUSH
33180: LD_INT 1
33182: PLUS
33183: PPUSH
33184: LD_VAR 0 7
33188: PPUSH
33189: CALL_OW 2
33193: ST_TO_ADDR
33194: GO 33162
33196: POP
33197: POP
// end ;
33198: GO 33128
33200: POP
33201: POP
// if not result then
33202: LD_VAR 0 2
33206: NOT
33207: IFFALSE 33211
// exit ;
33209: GO 33359
// mech := result [ 1 ] ;
33211: LD_ADDR_VAR 0 5
33215: PUSH
33216: LD_VAR 0 2
33220: PUSH
33221: LD_INT 1
33223: ARRAY
33224: ST_TO_ADDR
// if result > 1 then
33225: LD_VAR 0 2
33229: PUSH
33230: LD_INT 1
33232: GREATER
33233: IFFALSE 33345
// for i = 2 to result do
33235: LD_ADDR_VAR 0 3
33239: PUSH
33240: DOUBLE
33241: LD_INT 2
33243: DEC
33244: ST_TO_ADDR
33245: LD_VAR 0 2
33249: PUSH
33250: FOR_TO
33251: IFFALSE 33343
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
33253: LD_ADDR_VAR 0 4
33257: PUSH
33258: LD_VAR 0 2
33262: PUSH
33263: LD_VAR 0 3
33267: ARRAY
33268: PPUSH
33269: LD_INT 3
33271: PPUSH
33272: CALL_OW 259
33276: PUSH
33277: LD_VAR 0 2
33281: PUSH
33282: LD_VAR 0 3
33286: ARRAY
33287: PPUSH
33288: CALL_OW 432
33292: MINUS
33293: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
33294: LD_VAR 0 4
33298: PUSH
33299: LD_VAR 0 5
33303: PPUSH
33304: LD_INT 3
33306: PPUSH
33307: CALL_OW 259
33311: PUSH
33312: LD_VAR 0 5
33316: PPUSH
33317: CALL_OW 432
33321: MINUS
33322: GREATEREQUAL
33323: IFFALSE 33341
// mech := result [ i ] ;
33325: LD_ADDR_VAR 0 5
33329: PUSH
33330: LD_VAR 0 2
33334: PUSH
33335: LD_VAR 0 3
33339: ARRAY
33340: ST_TO_ADDR
// end ;
33341: GO 33250
33343: POP
33344: POP
// ComLinkTo ( vehicle , mech ) ;
33345: LD_VAR 0 1
33349: PPUSH
33350: LD_VAR 0 5
33354: PPUSH
33355: CALL_OW 135
// end ;
33359: LD_VAR 0 2
33363: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
33364: LD_INT 0
33366: PPUSH
33367: PPUSH
33368: PPUSH
33369: PPUSH
33370: PPUSH
33371: PPUSH
33372: PPUSH
33373: PPUSH
33374: PPUSH
33375: PPUSH
33376: PPUSH
33377: PPUSH
33378: PPUSH
// result := [ ] ;
33379: LD_ADDR_VAR 0 7
33383: PUSH
33384: EMPTY
33385: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
33386: LD_VAR 0 1
33390: PPUSH
33391: CALL_OW 266
33395: PUSH
33396: LD_INT 0
33398: PUSH
33399: LD_INT 1
33401: PUSH
33402: EMPTY
33403: LIST
33404: LIST
33405: IN
33406: NOT
33407: IFFALSE 33411
// exit ;
33409: GO 35042
// if name then
33411: LD_VAR 0 3
33415: IFFALSE 33431
// SetBName ( base_dep , name ) ;
33417: LD_VAR 0 1
33421: PPUSH
33422: LD_VAR 0 3
33426: PPUSH
33427: CALL_OW 500
// base := GetBase ( base_dep ) ;
33431: LD_ADDR_VAR 0 15
33435: PUSH
33436: LD_VAR 0 1
33440: PPUSH
33441: CALL_OW 274
33445: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
33446: LD_ADDR_VAR 0 16
33450: PUSH
33451: LD_VAR 0 1
33455: PPUSH
33456: CALL_OW 255
33460: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
33461: LD_ADDR_VAR 0 17
33465: PUSH
33466: LD_VAR 0 1
33470: PPUSH
33471: CALL_OW 248
33475: ST_TO_ADDR
// if sources then
33476: LD_VAR 0 5
33480: IFFALSE 33527
// for i = 1 to 3 do
33482: LD_ADDR_VAR 0 8
33486: PUSH
33487: DOUBLE
33488: LD_INT 1
33490: DEC
33491: ST_TO_ADDR
33492: LD_INT 3
33494: PUSH
33495: FOR_TO
33496: IFFALSE 33525
// AddResourceType ( base , i , sources [ i ] ) ;
33498: LD_VAR 0 15
33502: PPUSH
33503: LD_VAR 0 8
33507: PPUSH
33508: LD_VAR 0 5
33512: PUSH
33513: LD_VAR 0 8
33517: ARRAY
33518: PPUSH
33519: CALL_OW 276
33523: GO 33495
33525: POP
33526: POP
// buildings := GetBaseBuildings ( base , area ) ;
33527: LD_ADDR_VAR 0 18
33531: PUSH
33532: LD_VAR 0 15
33536: PPUSH
33537: LD_VAR 0 2
33541: PPUSH
33542: CALL 32819 0 2
33546: ST_TO_ADDR
// InitHc ;
33547: CALL_OW 19
// InitUc ;
33551: CALL_OW 18
// uc_side := side ;
33555: LD_ADDR_OWVAR 20
33559: PUSH
33560: LD_VAR 0 16
33564: ST_TO_ADDR
// uc_nation := nation ;
33565: LD_ADDR_OWVAR 21
33569: PUSH
33570: LD_VAR 0 17
33574: ST_TO_ADDR
// if buildings then
33575: LD_VAR 0 18
33579: IFFALSE 34901
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
33581: LD_ADDR_VAR 0 19
33585: PUSH
33586: LD_VAR 0 18
33590: PPUSH
33591: LD_INT 2
33593: PUSH
33594: LD_INT 30
33596: PUSH
33597: LD_INT 29
33599: PUSH
33600: EMPTY
33601: LIST
33602: LIST
33603: PUSH
33604: LD_INT 30
33606: PUSH
33607: LD_INT 30
33609: PUSH
33610: EMPTY
33611: LIST
33612: LIST
33613: PUSH
33614: EMPTY
33615: LIST
33616: LIST
33617: LIST
33618: PPUSH
33619: CALL_OW 72
33623: ST_TO_ADDR
// if tmp then
33624: LD_VAR 0 19
33628: IFFALSE 33676
// for i in tmp do
33630: LD_ADDR_VAR 0 8
33634: PUSH
33635: LD_VAR 0 19
33639: PUSH
33640: FOR_IN
33641: IFFALSE 33674
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
33643: LD_VAR 0 8
33647: PPUSH
33648: CALL_OW 250
33652: PPUSH
33653: LD_VAR 0 8
33657: PPUSH
33658: CALL_OW 251
33662: PPUSH
33663: LD_VAR 0 16
33667: PPUSH
33668: CALL_OW 441
33672: GO 33640
33674: POP
33675: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
33676: LD_VAR 0 18
33680: PPUSH
33681: LD_INT 2
33683: PUSH
33684: LD_INT 30
33686: PUSH
33687: LD_INT 32
33689: PUSH
33690: EMPTY
33691: LIST
33692: LIST
33693: PUSH
33694: LD_INT 30
33696: PUSH
33697: LD_INT 33
33699: PUSH
33700: EMPTY
33701: LIST
33702: LIST
33703: PUSH
33704: EMPTY
33705: LIST
33706: LIST
33707: LIST
33708: PPUSH
33709: CALL_OW 72
33713: IFFALSE 33801
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
33715: LD_ADDR_VAR 0 8
33719: PUSH
33720: LD_VAR 0 18
33724: PPUSH
33725: LD_INT 2
33727: PUSH
33728: LD_INT 30
33730: PUSH
33731: LD_INT 32
33733: PUSH
33734: EMPTY
33735: LIST
33736: LIST
33737: PUSH
33738: LD_INT 30
33740: PUSH
33741: LD_INT 33
33743: PUSH
33744: EMPTY
33745: LIST
33746: LIST
33747: PUSH
33748: EMPTY
33749: LIST
33750: LIST
33751: LIST
33752: PPUSH
33753: CALL_OW 72
33757: PUSH
33758: FOR_IN
33759: IFFALSE 33799
// begin if not GetBWeapon ( i ) then
33761: LD_VAR 0 8
33765: PPUSH
33766: CALL_OW 269
33770: NOT
33771: IFFALSE 33797
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
33773: LD_VAR 0 8
33777: PPUSH
33778: LD_VAR 0 8
33782: PPUSH
33783: LD_VAR 0 2
33787: PPUSH
33788: CALL 35047 0 2
33792: PPUSH
33793: CALL_OW 431
// end ;
33797: GO 33758
33799: POP
33800: POP
// end ; for i = 1 to personel do
33801: LD_ADDR_VAR 0 8
33805: PUSH
33806: DOUBLE
33807: LD_INT 1
33809: DEC
33810: ST_TO_ADDR
33811: LD_VAR 0 6
33815: PUSH
33816: FOR_TO
33817: IFFALSE 34881
// begin if i > 4 then
33819: LD_VAR 0 8
33823: PUSH
33824: LD_INT 4
33826: GREATER
33827: IFFALSE 33831
// break ;
33829: GO 34881
// case i of 1 :
33831: LD_VAR 0 8
33835: PUSH
33836: LD_INT 1
33838: DOUBLE
33839: EQUAL
33840: IFTRUE 33844
33842: GO 33924
33844: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
33845: LD_ADDR_VAR 0 12
33849: PUSH
33850: LD_VAR 0 18
33854: PPUSH
33855: LD_INT 22
33857: PUSH
33858: LD_VAR 0 16
33862: PUSH
33863: EMPTY
33864: LIST
33865: LIST
33866: PUSH
33867: LD_INT 58
33869: PUSH
33870: EMPTY
33871: LIST
33872: PUSH
33873: LD_INT 2
33875: PUSH
33876: LD_INT 30
33878: PUSH
33879: LD_INT 32
33881: PUSH
33882: EMPTY
33883: LIST
33884: LIST
33885: PUSH
33886: LD_INT 30
33888: PUSH
33889: LD_INT 4
33891: PUSH
33892: EMPTY
33893: LIST
33894: LIST
33895: PUSH
33896: LD_INT 30
33898: PUSH
33899: LD_INT 5
33901: PUSH
33902: EMPTY
33903: LIST
33904: LIST
33905: PUSH
33906: EMPTY
33907: LIST
33908: LIST
33909: LIST
33910: LIST
33911: PUSH
33912: EMPTY
33913: LIST
33914: LIST
33915: LIST
33916: PPUSH
33917: CALL_OW 72
33921: ST_TO_ADDR
33922: GO 34146
33924: LD_INT 2
33926: DOUBLE
33927: EQUAL
33928: IFTRUE 33932
33930: GO 33994
33932: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
33933: LD_ADDR_VAR 0 12
33937: PUSH
33938: LD_VAR 0 18
33942: PPUSH
33943: LD_INT 22
33945: PUSH
33946: LD_VAR 0 16
33950: PUSH
33951: EMPTY
33952: LIST
33953: LIST
33954: PUSH
33955: LD_INT 2
33957: PUSH
33958: LD_INT 30
33960: PUSH
33961: LD_INT 0
33963: PUSH
33964: EMPTY
33965: LIST
33966: LIST
33967: PUSH
33968: LD_INT 30
33970: PUSH
33971: LD_INT 1
33973: PUSH
33974: EMPTY
33975: LIST
33976: LIST
33977: PUSH
33978: EMPTY
33979: LIST
33980: LIST
33981: LIST
33982: PUSH
33983: EMPTY
33984: LIST
33985: LIST
33986: PPUSH
33987: CALL_OW 72
33991: ST_TO_ADDR
33992: GO 34146
33994: LD_INT 3
33996: DOUBLE
33997: EQUAL
33998: IFTRUE 34002
34000: GO 34064
34002: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
34003: LD_ADDR_VAR 0 12
34007: PUSH
34008: LD_VAR 0 18
34012: PPUSH
34013: LD_INT 22
34015: PUSH
34016: LD_VAR 0 16
34020: PUSH
34021: EMPTY
34022: LIST
34023: LIST
34024: PUSH
34025: LD_INT 2
34027: PUSH
34028: LD_INT 30
34030: PUSH
34031: LD_INT 2
34033: PUSH
34034: EMPTY
34035: LIST
34036: LIST
34037: PUSH
34038: LD_INT 30
34040: PUSH
34041: LD_INT 3
34043: PUSH
34044: EMPTY
34045: LIST
34046: LIST
34047: PUSH
34048: EMPTY
34049: LIST
34050: LIST
34051: LIST
34052: PUSH
34053: EMPTY
34054: LIST
34055: LIST
34056: PPUSH
34057: CALL_OW 72
34061: ST_TO_ADDR
34062: GO 34146
34064: LD_INT 4
34066: DOUBLE
34067: EQUAL
34068: IFTRUE 34072
34070: GO 34145
34072: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
34073: LD_ADDR_VAR 0 12
34077: PUSH
34078: LD_VAR 0 18
34082: PPUSH
34083: LD_INT 22
34085: PUSH
34086: LD_VAR 0 16
34090: PUSH
34091: EMPTY
34092: LIST
34093: LIST
34094: PUSH
34095: LD_INT 2
34097: PUSH
34098: LD_INT 30
34100: PUSH
34101: LD_INT 6
34103: PUSH
34104: EMPTY
34105: LIST
34106: LIST
34107: PUSH
34108: LD_INT 30
34110: PUSH
34111: LD_INT 7
34113: PUSH
34114: EMPTY
34115: LIST
34116: LIST
34117: PUSH
34118: LD_INT 30
34120: PUSH
34121: LD_INT 8
34123: PUSH
34124: EMPTY
34125: LIST
34126: LIST
34127: PUSH
34128: EMPTY
34129: LIST
34130: LIST
34131: LIST
34132: LIST
34133: PUSH
34134: EMPTY
34135: LIST
34136: LIST
34137: PPUSH
34138: CALL_OW 72
34142: ST_TO_ADDR
34143: GO 34146
34145: POP
// if i = 1 then
34146: LD_VAR 0 8
34150: PUSH
34151: LD_INT 1
34153: EQUAL
34154: IFFALSE 34265
// begin tmp := [ ] ;
34156: LD_ADDR_VAR 0 19
34160: PUSH
34161: EMPTY
34162: ST_TO_ADDR
// for j in f do
34163: LD_ADDR_VAR 0 9
34167: PUSH
34168: LD_VAR 0 12
34172: PUSH
34173: FOR_IN
34174: IFFALSE 34247
// if GetBType ( j ) = b_bunker then
34176: LD_VAR 0 9
34180: PPUSH
34181: CALL_OW 266
34185: PUSH
34186: LD_INT 32
34188: EQUAL
34189: IFFALSE 34216
// tmp := Insert ( tmp , 1 , j ) else
34191: LD_ADDR_VAR 0 19
34195: PUSH
34196: LD_VAR 0 19
34200: PPUSH
34201: LD_INT 1
34203: PPUSH
34204: LD_VAR 0 9
34208: PPUSH
34209: CALL_OW 2
34213: ST_TO_ADDR
34214: GO 34245
// tmp := Insert ( tmp , tmp + 1 , j ) ;
34216: LD_ADDR_VAR 0 19
34220: PUSH
34221: LD_VAR 0 19
34225: PPUSH
34226: LD_VAR 0 19
34230: PUSH
34231: LD_INT 1
34233: PLUS
34234: PPUSH
34235: LD_VAR 0 9
34239: PPUSH
34240: CALL_OW 2
34244: ST_TO_ADDR
34245: GO 34173
34247: POP
34248: POP
// if tmp then
34249: LD_VAR 0 19
34253: IFFALSE 34265
// f := tmp ;
34255: LD_ADDR_VAR 0 12
34259: PUSH
34260: LD_VAR 0 19
34264: ST_TO_ADDR
// end ; x := personel [ i ] ;
34265: LD_ADDR_VAR 0 13
34269: PUSH
34270: LD_VAR 0 6
34274: PUSH
34275: LD_VAR 0 8
34279: ARRAY
34280: ST_TO_ADDR
// if x = - 1 then
34281: LD_VAR 0 13
34285: PUSH
34286: LD_INT 1
34288: NEG
34289: EQUAL
34290: IFFALSE 34499
// begin for j in f do
34292: LD_ADDR_VAR 0 9
34296: PUSH
34297: LD_VAR 0 12
34301: PUSH
34302: FOR_IN
34303: IFFALSE 34495
// repeat InitHc ;
34305: CALL_OW 19
// if GetBType ( j ) = b_barracks then
34309: LD_VAR 0 9
34313: PPUSH
34314: CALL_OW 266
34318: PUSH
34319: LD_INT 5
34321: EQUAL
34322: IFFALSE 34392
// begin if UnitsInside ( j ) < 3 then
34324: LD_VAR 0 9
34328: PPUSH
34329: CALL_OW 313
34333: PUSH
34334: LD_INT 3
34336: LESS
34337: IFFALSE 34373
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
34339: LD_INT 0
34341: PPUSH
34342: LD_INT 5
34344: PUSH
34345: LD_INT 8
34347: PUSH
34348: LD_INT 9
34350: PUSH
34351: EMPTY
34352: LIST
34353: LIST
34354: LIST
34355: PUSH
34356: LD_VAR 0 17
34360: ARRAY
34361: PPUSH
34362: LD_VAR 0 4
34366: PPUSH
34367: CALL_OW 380
34371: GO 34390
// PrepareHuman ( false , i , skill ) ;
34373: LD_INT 0
34375: PPUSH
34376: LD_VAR 0 8
34380: PPUSH
34381: LD_VAR 0 4
34385: PPUSH
34386: CALL_OW 380
// end else
34390: GO 34409
// PrepareHuman ( false , i , skill ) ;
34392: LD_INT 0
34394: PPUSH
34395: LD_VAR 0 8
34399: PPUSH
34400: LD_VAR 0 4
34404: PPUSH
34405: CALL_OW 380
// un := CreateHuman ;
34409: LD_ADDR_VAR 0 14
34413: PUSH
34414: CALL_OW 44
34418: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
34419: LD_ADDR_VAR 0 7
34423: PUSH
34424: LD_VAR 0 7
34428: PPUSH
34429: LD_INT 1
34431: PPUSH
34432: LD_VAR 0 14
34436: PPUSH
34437: CALL_OW 2
34441: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
34442: LD_VAR 0 14
34446: PPUSH
34447: LD_VAR 0 9
34451: PPUSH
34452: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
34456: LD_VAR 0 9
34460: PPUSH
34461: CALL_OW 313
34465: PUSH
34466: LD_INT 6
34468: EQUAL
34469: PUSH
34470: LD_VAR 0 9
34474: PPUSH
34475: CALL_OW 266
34479: PUSH
34480: LD_INT 32
34482: PUSH
34483: LD_INT 31
34485: PUSH
34486: EMPTY
34487: LIST
34488: LIST
34489: IN
34490: OR
34491: IFFALSE 34305
34493: GO 34302
34495: POP
34496: POP
// end else
34497: GO 34879
// for j = 1 to x do
34499: LD_ADDR_VAR 0 9
34503: PUSH
34504: DOUBLE
34505: LD_INT 1
34507: DEC
34508: ST_TO_ADDR
34509: LD_VAR 0 13
34513: PUSH
34514: FOR_TO
34515: IFFALSE 34877
// begin InitHc ;
34517: CALL_OW 19
// if not f then
34521: LD_VAR 0 12
34525: NOT
34526: IFFALSE 34615
// begin PrepareHuman ( false , i , skill ) ;
34528: LD_INT 0
34530: PPUSH
34531: LD_VAR 0 8
34535: PPUSH
34536: LD_VAR 0 4
34540: PPUSH
34541: CALL_OW 380
// un := CreateHuman ;
34545: LD_ADDR_VAR 0 14
34549: PUSH
34550: CALL_OW 44
34554: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
34555: LD_ADDR_VAR 0 7
34559: PUSH
34560: LD_VAR 0 7
34564: PPUSH
34565: LD_INT 1
34567: PPUSH
34568: LD_VAR 0 14
34572: PPUSH
34573: CALL_OW 2
34577: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
34578: LD_VAR 0 14
34582: PPUSH
34583: LD_VAR 0 1
34587: PPUSH
34588: CALL_OW 250
34592: PPUSH
34593: LD_VAR 0 1
34597: PPUSH
34598: CALL_OW 251
34602: PPUSH
34603: LD_INT 10
34605: PPUSH
34606: LD_INT 0
34608: PPUSH
34609: CALL_OW 50
// continue ;
34613: GO 34514
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
34615: LD_VAR 0 12
34619: PUSH
34620: LD_INT 1
34622: ARRAY
34623: PPUSH
34624: CALL_OW 313
34628: PUSH
34629: LD_VAR 0 12
34633: PUSH
34634: LD_INT 1
34636: ARRAY
34637: PPUSH
34638: CALL_OW 266
34642: PUSH
34643: LD_INT 32
34645: PUSH
34646: LD_INT 31
34648: PUSH
34649: EMPTY
34650: LIST
34651: LIST
34652: IN
34653: AND
34654: PUSH
34655: LD_VAR 0 12
34659: PUSH
34660: LD_INT 1
34662: ARRAY
34663: PPUSH
34664: CALL_OW 313
34668: PUSH
34669: LD_INT 6
34671: EQUAL
34672: OR
34673: IFFALSE 34693
// f := Delete ( f , 1 ) ;
34675: LD_ADDR_VAR 0 12
34679: PUSH
34680: LD_VAR 0 12
34684: PPUSH
34685: LD_INT 1
34687: PPUSH
34688: CALL_OW 3
34692: ST_TO_ADDR
// if not f then
34693: LD_VAR 0 12
34697: NOT
34698: IFFALSE 34716
// begin x := x + 2 ;
34700: LD_ADDR_VAR 0 13
34704: PUSH
34705: LD_VAR 0 13
34709: PUSH
34710: LD_INT 2
34712: PLUS
34713: ST_TO_ADDR
// continue ;
34714: GO 34514
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
34716: LD_VAR 0 12
34720: PUSH
34721: LD_INT 1
34723: ARRAY
34724: PPUSH
34725: CALL_OW 266
34729: PUSH
34730: LD_INT 5
34732: EQUAL
34733: IFFALSE 34807
// begin if UnitsInside ( f [ 1 ] ) < 3 then
34735: LD_VAR 0 12
34739: PUSH
34740: LD_INT 1
34742: ARRAY
34743: PPUSH
34744: CALL_OW 313
34748: PUSH
34749: LD_INT 3
34751: LESS
34752: IFFALSE 34788
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
34754: LD_INT 0
34756: PPUSH
34757: LD_INT 5
34759: PUSH
34760: LD_INT 8
34762: PUSH
34763: LD_INT 9
34765: PUSH
34766: EMPTY
34767: LIST
34768: LIST
34769: LIST
34770: PUSH
34771: LD_VAR 0 17
34775: ARRAY
34776: PPUSH
34777: LD_VAR 0 4
34781: PPUSH
34782: CALL_OW 380
34786: GO 34805
// PrepareHuman ( false , i , skill ) ;
34788: LD_INT 0
34790: PPUSH
34791: LD_VAR 0 8
34795: PPUSH
34796: LD_VAR 0 4
34800: PPUSH
34801: CALL_OW 380
// end else
34805: GO 34824
// PrepareHuman ( false , i , skill ) ;
34807: LD_INT 0
34809: PPUSH
34810: LD_VAR 0 8
34814: PPUSH
34815: LD_VAR 0 4
34819: PPUSH
34820: CALL_OW 380
// un := CreateHuman ;
34824: LD_ADDR_VAR 0 14
34828: PUSH
34829: CALL_OW 44
34833: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
34834: LD_ADDR_VAR 0 7
34838: PUSH
34839: LD_VAR 0 7
34843: PPUSH
34844: LD_INT 1
34846: PPUSH
34847: LD_VAR 0 14
34851: PPUSH
34852: CALL_OW 2
34856: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
34857: LD_VAR 0 14
34861: PPUSH
34862: LD_VAR 0 12
34866: PUSH
34867: LD_INT 1
34869: ARRAY
34870: PPUSH
34871: CALL_OW 52
// end ;
34875: GO 34514
34877: POP
34878: POP
// end ;
34879: GO 33816
34881: POP
34882: POP
// result := result ^ buildings ;
34883: LD_ADDR_VAR 0 7
34887: PUSH
34888: LD_VAR 0 7
34892: PUSH
34893: LD_VAR 0 18
34897: ADD
34898: ST_TO_ADDR
// end else
34899: GO 35042
// begin for i = 1 to personel do
34901: LD_ADDR_VAR 0 8
34905: PUSH
34906: DOUBLE
34907: LD_INT 1
34909: DEC
34910: ST_TO_ADDR
34911: LD_VAR 0 6
34915: PUSH
34916: FOR_TO
34917: IFFALSE 35040
// begin if i > 4 then
34919: LD_VAR 0 8
34923: PUSH
34924: LD_INT 4
34926: GREATER
34927: IFFALSE 34931
// break ;
34929: GO 35040
// x := personel [ i ] ;
34931: LD_ADDR_VAR 0 13
34935: PUSH
34936: LD_VAR 0 6
34940: PUSH
34941: LD_VAR 0 8
34945: ARRAY
34946: ST_TO_ADDR
// if x = - 1 then
34947: LD_VAR 0 13
34951: PUSH
34952: LD_INT 1
34954: NEG
34955: EQUAL
34956: IFFALSE 34960
// continue ;
34958: GO 34916
// PrepareHuman ( false , i , skill ) ;
34960: LD_INT 0
34962: PPUSH
34963: LD_VAR 0 8
34967: PPUSH
34968: LD_VAR 0 4
34972: PPUSH
34973: CALL_OW 380
// un := CreateHuman ;
34977: LD_ADDR_VAR 0 14
34981: PUSH
34982: CALL_OW 44
34986: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
34987: LD_VAR 0 14
34991: PPUSH
34992: LD_VAR 0 1
34996: PPUSH
34997: CALL_OW 250
35001: PPUSH
35002: LD_VAR 0 1
35006: PPUSH
35007: CALL_OW 251
35011: PPUSH
35012: LD_INT 10
35014: PPUSH
35015: LD_INT 0
35017: PPUSH
35018: CALL_OW 50
// result := result ^ un ;
35022: LD_ADDR_VAR 0 7
35026: PUSH
35027: LD_VAR 0 7
35031: PUSH
35032: LD_VAR 0 14
35036: ADD
35037: ST_TO_ADDR
// end ;
35038: GO 34916
35040: POP
35041: POP
// end ; end ;
35042: LD_VAR 0 7
35046: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
35047: LD_INT 0
35049: PPUSH
35050: PPUSH
35051: PPUSH
35052: PPUSH
35053: PPUSH
35054: PPUSH
35055: PPUSH
35056: PPUSH
35057: PPUSH
35058: PPUSH
35059: PPUSH
35060: PPUSH
35061: PPUSH
35062: PPUSH
35063: PPUSH
35064: PPUSH
// result := false ;
35065: LD_ADDR_VAR 0 3
35069: PUSH
35070: LD_INT 0
35072: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
35073: LD_VAR 0 1
35077: NOT
35078: PUSH
35079: LD_VAR 0 1
35083: PPUSH
35084: CALL_OW 266
35088: PUSH
35089: LD_INT 32
35091: PUSH
35092: LD_INT 33
35094: PUSH
35095: EMPTY
35096: LIST
35097: LIST
35098: IN
35099: NOT
35100: OR
35101: IFFALSE 35105
// exit ;
35103: GO 36241
// nat := GetNation ( tower ) ;
35105: LD_ADDR_VAR 0 12
35109: PUSH
35110: LD_VAR 0 1
35114: PPUSH
35115: CALL_OW 248
35119: ST_TO_ADDR
// side := GetSide ( tower ) ;
35120: LD_ADDR_VAR 0 16
35124: PUSH
35125: LD_VAR 0 1
35129: PPUSH
35130: CALL_OW 255
35134: ST_TO_ADDR
// x := GetX ( tower ) ;
35135: LD_ADDR_VAR 0 10
35139: PUSH
35140: LD_VAR 0 1
35144: PPUSH
35145: CALL_OW 250
35149: ST_TO_ADDR
// y := GetY ( tower ) ;
35150: LD_ADDR_VAR 0 11
35154: PUSH
35155: LD_VAR 0 1
35159: PPUSH
35160: CALL_OW 251
35164: ST_TO_ADDR
// if not x or not y then
35165: LD_VAR 0 10
35169: NOT
35170: PUSH
35171: LD_VAR 0 11
35175: NOT
35176: OR
35177: IFFALSE 35181
// exit ;
35179: GO 36241
// weapon := 0 ;
35181: LD_ADDR_VAR 0 18
35185: PUSH
35186: LD_INT 0
35188: ST_TO_ADDR
// fac_list := [ ] ;
35189: LD_ADDR_VAR 0 17
35193: PUSH
35194: EMPTY
35195: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
35196: LD_ADDR_VAR 0 6
35200: PUSH
35201: LD_VAR 0 1
35205: PPUSH
35206: CALL_OW 274
35210: PPUSH
35211: LD_VAR 0 2
35215: PPUSH
35216: CALL 32819 0 2
35220: PPUSH
35221: LD_INT 30
35223: PUSH
35224: LD_INT 3
35226: PUSH
35227: EMPTY
35228: LIST
35229: LIST
35230: PPUSH
35231: CALL_OW 72
35235: ST_TO_ADDR
// if not factories then
35236: LD_VAR 0 6
35240: NOT
35241: IFFALSE 35245
// exit ;
35243: GO 36241
// for i in factories do
35245: LD_ADDR_VAR 0 8
35249: PUSH
35250: LD_VAR 0 6
35254: PUSH
35255: FOR_IN
35256: IFFALSE 35281
// fac_list := fac_list union AvailableWeaponList ( i ) ;
35258: LD_ADDR_VAR 0 17
35262: PUSH
35263: LD_VAR 0 17
35267: PUSH
35268: LD_VAR 0 8
35272: PPUSH
35273: CALL_OW 478
35277: UNION
35278: ST_TO_ADDR
35279: GO 35255
35281: POP
35282: POP
// if not fac_list then
35283: LD_VAR 0 17
35287: NOT
35288: IFFALSE 35292
// exit ;
35290: GO 36241
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
35292: LD_ADDR_VAR 0 5
35296: PUSH
35297: LD_INT 4
35299: PUSH
35300: LD_INT 5
35302: PUSH
35303: LD_INT 9
35305: PUSH
35306: LD_INT 10
35308: PUSH
35309: LD_INT 6
35311: PUSH
35312: LD_INT 7
35314: PUSH
35315: LD_INT 11
35317: PUSH
35318: EMPTY
35319: LIST
35320: LIST
35321: LIST
35322: LIST
35323: LIST
35324: LIST
35325: LIST
35326: PUSH
35327: LD_INT 27
35329: PUSH
35330: LD_INT 28
35332: PUSH
35333: LD_INT 26
35335: PUSH
35336: LD_INT 30
35338: PUSH
35339: EMPTY
35340: LIST
35341: LIST
35342: LIST
35343: LIST
35344: PUSH
35345: LD_INT 43
35347: PUSH
35348: LD_INT 44
35350: PUSH
35351: LD_INT 46
35353: PUSH
35354: LD_INT 45
35356: PUSH
35357: LD_INT 47
35359: PUSH
35360: LD_INT 49
35362: PUSH
35363: EMPTY
35364: LIST
35365: LIST
35366: LIST
35367: LIST
35368: LIST
35369: LIST
35370: PUSH
35371: EMPTY
35372: LIST
35373: LIST
35374: LIST
35375: PUSH
35376: LD_VAR 0 12
35380: ARRAY
35381: ST_TO_ADDR
// for i in list do
35382: LD_ADDR_VAR 0 8
35386: PUSH
35387: LD_VAR 0 5
35391: PUSH
35392: FOR_IN
35393: IFFALSE 35426
// if not i in fac_list then
35395: LD_VAR 0 8
35399: PUSH
35400: LD_VAR 0 17
35404: IN
35405: NOT
35406: IFFALSE 35424
// list := list diff i ;
35408: LD_ADDR_VAR 0 5
35412: PUSH
35413: LD_VAR 0 5
35417: PUSH
35418: LD_VAR 0 8
35422: DIFF
35423: ST_TO_ADDR
35424: GO 35392
35426: POP
35427: POP
// if not list then
35428: LD_VAR 0 5
35432: NOT
35433: IFFALSE 35437
// exit ;
35435: GO 36241
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
35437: LD_VAR 0 12
35441: PUSH
35442: LD_INT 3
35444: EQUAL
35445: PUSH
35446: LD_INT 49
35448: PUSH
35449: LD_VAR 0 5
35453: IN
35454: AND
35455: PUSH
35456: LD_INT 31
35458: PPUSH
35459: LD_VAR 0 16
35463: PPUSH
35464: CALL_OW 321
35468: PUSH
35469: LD_INT 2
35471: EQUAL
35472: AND
35473: IFFALSE 35533
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
35475: LD_INT 22
35477: PUSH
35478: LD_VAR 0 16
35482: PUSH
35483: EMPTY
35484: LIST
35485: LIST
35486: PUSH
35487: LD_INT 35
35489: PUSH
35490: LD_INT 49
35492: PUSH
35493: EMPTY
35494: LIST
35495: LIST
35496: PUSH
35497: LD_INT 91
35499: PUSH
35500: LD_VAR 0 1
35504: PUSH
35505: LD_INT 10
35507: PUSH
35508: EMPTY
35509: LIST
35510: LIST
35511: LIST
35512: PUSH
35513: EMPTY
35514: LIST
35515: LIST
35516: LIST
35517: PPUSH
35518: CALL_OW 69
35522: NOT
35523: IFFALSE 35533
// weapon := ru_time_lapser ;
35525: LD_ADDR_VAR 0 18
35529: PUSH
35530: LD_INT 49
35532: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
35533: LD_VAR 0 12
35537: PUSH
35538: LD_INT 1
35540: PUSH
35541: LD_INT 2
35543: PUSH
35544: EMPTY
35545: LIST
35546: LIST
35547: IN
35548: PUSH
35549: LD_INT 11
35551: PUSH
35552: LD_VAR 0 5
35556: IN
35557: PUSH
35558: LD_INT 30
35560: PUSH
35561: LD_VAR 0 5
35565: IN
35566: OR
35567: AND
35568: PUSH
35569: LD_INT 6
35571: PPUSH
35572: LD_VAR 0 16
35576: PPUSH
35577: CALL_OW 321
35581: PUSH
35582: LD_INT 2
35584: EQUAL
35585: AND
35586: IFFALSE 35751
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
35588: LD_INT 22
35590: PUSH
35591: LD_VAR 0 16
35595: PUSH
35596: EMPTY
35597: LIST
35598: LIST
35599: PUSH
35600: LD_INT 2
35602: PUSH
35603: LD_INT 35
35605: PUSH
35606: LD_INT 11
35608: PUSH
35609: EMPTY
35610: LIST
35611: LIST
35612: PUSH
35613: LD_INT 35
35615: PUSH
35616: LD_INT 30
35618: PUSH
35619: EMPTY
35620: LIST
35621: LIST
35622: PUSH
35623: EMPTY
35624: LIST
35625: LIST
35626: LIST
35627: PUSH
35628: LD_INT 91
35630: PUSH
35631: LD_VAR 0 1
35635: PUSH
35636: LD_INT 18
35638: PUSH
35639: EMPTY
35640: LIST
35641: LIST
35642: LIST
35643: PUSH
35644: EMPTY
35645: LIST
35646: LIST
35647: LIST
35648: PPUSH
35649: CALL_OW 69
35653: NOT
35654: PUSH
35655: LD_INT 22
35657: PUSH
35658: LD_VAR 0 16
35662: PUSH
35663: EMPTY
35664: LIST
35665: LIST
35666: PUSH
35667: LD_INT 2
35669: PUSH
35670: LD_INT 30
35672: PUSH
35673: LD_INT 32
35675: PUSH
35676: EMPTY
35677: LIST
35678: LIST
35679: PUSH
35680: LD_INT 30
35682: PUSH
35683: LD_INT 33
35685: PUSH
35686: EMPTY
35687: LIST
35688: LIST
35689: PUSH
35690: EMPTY
35691: LIST
35692: LIST
35693: LIST
35694: PUSH
35695: LD_INT 91
35697: PUSH
35698: LD_VAR 0 1
35702: PUSH
35703: LD_INT 12
35705: PUSH
35706: EMPTY
35707: LIST
35708: LIST
35709: LIST
35710: PUSH
35711: EMPTY
35712: LIST
35713: LIST
35714: LIST
35715: PUSH
35716: EMPTY
35717: LIST
35718: PPUSH
35719: CALL_OW 69
35723: PUSH
35724: LD_INT 2
35726: GREATER
35727: AND
35728: IFFALSE 35751
// weapon := [ us_radar , ar_radar ] [ nat ] ;
35730: LD_ADDR_VAR 0 18
35734: PUSH
35735: LD_INT 11
35737: PUSH
35738: LD_INT 30
35740: PUSH
35741: EMPTY
35742: LIST
35743: LIST
35744: PUSH
35745: LD_VAR 0 12
35749: ARRAY
35750: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
35751: LD_VAR 0 18
35755: NOT
35756: PUSH
35757: LD_INT 40
35759: PPUSH
35760: LD_VAR 0 16
35764: PPUSH
35765: CALL_OW 321
35769: PUSH
35770: LD_INT 2
35772: EQUAL
35773: AND
35774: PUSH
35775: LD_INT 7
35777: PUSH
35778: LD_VAR 0 5
35782: IN
35783: PUSH
35784: LD_INT 28
35786: PUSH
35787: LD_VAR 0 5
35791: IN
35792: OR
35793: PUSH
35794: LD_INT 45
35796: PUSH
35797: LD_VAR 0 5
35801: IN
35802: OR
35803: AND
35804: IFFALSE 36058
// begin hex := GetHexInfo ( x , y ) ;
35806: LD_ADDR_VAR 0 4
35810: PUSH
35811: LD_VAR 0 10
35815: PPUSH
35816: LD_VAR 0 11
35820: PPUSH
35821: CALL_OW 546
35825: ST_TO_ADDR
// if hex [ 1 ] then
35826: LD_VAR 0 4
35830: PUSH
35831: LD_INT 1
35833: ARRAY
35834: IFFALSE 35838
// exit ;
35836: GO 36241
// height := hex [ 2 ] ;
35838: LD_ADDR_VAR 0 15
35842: PUSH
35843: LD_VAR 0 4
35847: PUSH
35848: LD_INT 2
35850: ARRAY
35851: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
35852: LD_ADDR_VAR 0 14
35856: PUSH
35857: LD_INT 0
35859: PUSH
35860: LD_INT 2
35862: PUSH
35863: LD_INT 3
35865: PUSH
35866: LD_INT 5
35868: PUSH
35869: EMPTY
35870: LIST
35871: LIST
35872: LIST
35873: LIST
35874: ST_TO_ADDR
// for i in tmp do
35875: LD_ADDR_VAR 0 8
35879: PUSH
35880: LD_VAR 0 14
35884: PUSH
35885: FOR_IN
35886: IFFALSE 36056
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
35888: LD_ADDR_VAR 0 9
35892: PUSH
35893: LD_VAR 0 10
35897: PPUSH
35898: LD_VAR 0 8
35902: PPUSH
35903: LD_INT 5
35905: PPUSH
35906: CALL_OW 272
35910: PUSH
35911: LD_VAR 0 11
35915: PPUSH
35916: LD_VAR 0 8
35920: PPUSH
35921: LD_INT 5
35923: PPUSH
35924: CALL_OW 273
35928: PUSH
35929: EMPTY
35930: LIST
35931: LIST
35932: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
35933: LD_VAR 0 9
35937: PUSH
35938: LD_INT 1
35940: ARRAY
35941: PPUSH
35942: LD_VAR 0 9
35946: PUSH
35947: LD_INT 2
35949: ARRAY
35950: PPUSH
35951: CALL_OW 488
35955: IFFALSE 36054
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
35957: LD_ADDR_VAR 0 4
35961: PUSH
35962: LD_VAR 0 9
35966: PUSH
35967: LD_INT 1
35969: ARRAY
35970: PPUSH
35971: LD_VAR 0 9
35975: PUSH
35976: LD_INT 2
35978: ARRAY
35979: PPUSH
35980: CALL_OW 546
35984: ST_TO_ADDR
// if hex [ 1 ] then
35985: LD_VAR 0 4
35989: PUSH
35990: LD_INT 1
35992: ARRAY
35993: IFFALSE 35997
// continue ;
35995: GO 35885
// h := hex [ 2 ] ;
35997: LD_ADDR_VAR 0 13
36001: PUSH
36002: LD_VAR 0 4
36006: PUSH
36007: LD_INT 2
36009: ARRAY
36010: ST_TO_ADDR
// if h + 7 < height then
36011: LD_VAR 0 13
36015: PUSH
36016: LD_INT 7
36018: PLUS
36019: PUSH
36020: LD_VAR 0 15
36024: LESS
36025: IFFALSE 36054
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
36027: LD_ADDR_VAR 0 18
36031: PUSH
36032: LD_INT 7
36034: PUSH
36035: LD_INT 28
36037: PUSH
36038: LD_INT 45
36040: PUSH
36041: EMPTY
36042: LIST
36043: LIST
36044: LIST
36045: PUSH
36046: LD_VAR 0 12
36050: ARRAY
36051: ST_TO_ADDR
// break ;
36052: GO 36056
// end ; end ; end ;
36054: GO 35885
36056: POP
36057: POP
// end ; if not weapon then
36058: LD_VAR 0 18
36062: NOT
36063: IFFALSE 36123
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
36065: LD_ADDR_VAR 0 5
36069: PUSH
36070: LD_VAR 0 5
36074: PUSH
36075: LD_INT 11
36077: PUSH
36078: LD_INT 30
36080: PUSH
36081: LD_INT 49
36083: PUSH
36084: EMPTY
36085: LIST
36086: LIST
36087: LIST
36088: DIFF
36089: ST_TO_ADDR
// if not list then
36090: LD_VAR 0 5
36094: NOT
36095: IFFALSE 36099
// exit ;
36097: GO 36241
// weapon := list [ rand ( 1 , list ) ] ;
36099: LD_ADDR_VAR 0 18
36103: PUSH
36104: LD_VAR 0 5
36108: PUSH
36109: LD_INT 1
36111: PPUSH
36112: LD_VAR 0 5
36116: PPUSH
36117: CALL_OW 12
36121: ARRAY
36122: ST_TO_ADDR
// end ; if weapon then
36123: LD_VAR 0 18
36127: IFFALSE 36241
// begin tmp := CostOfWeapon ( weapon ) ;
36129: LD_ADDR_VAR 0 14
36133: PUSH
36134: LD_VAR 0 18
36138: PPUSH
36139: CALL_OW 451
36143: ST_TO_ADDR
// j := GetBase ( tower ) ;
36144: LD_ADDR_VAR 0 9
36148: PUSH
36149: LD_VAR 0 1
36153: PPUSH
36154: CALL_OW 274
36158: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
36159: LD_VAR 0 9
36163: PPUSH
36164: LD_INT 1
36166: PPUSH
36167: CALL_OW 275
36171: PUSH
36172: LD_VAR 0 14
36176: PUSH
36177: LD_INT 1
36179: ARRAY
36180: GREATEREQUAL
36181: PUSH
36182: LD_VAR 0 9
36186: PPUSH
36187: LD_INT 2
36189: PPUSH
36190: CALL_OW 275
36194: PUSH
36195: LD_VAR 0 14
36199: PUSH
36200: LD_INT 2
36202: ARRAY
36203: GREATEREQUAL
36204: AND
36205: PUSH
36206: LD_VAR 0 9
36210: PPUSH
36211: LD_INT 3
36213: PPUSH
36214: CALL_OW 275
36218: PUSH
36219: LD_VAR 0 14
36223: PUSH
36224: LD_INT 3
36226: ARRAY
36227: GREATEREQUAL
36228: AND
36229: IFFALSE 36241
// result := weapon ;
36231: LD_ADDR_VAR 0 3
36235: PUSH
36236: LD_VAR 0 18
36240: ST_TO_ADDR
// end ; end ;
36241: LD_VAR 0 3
36245: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
36246: LD_INT 0
36248: PPUSH
36249: PPUSH
// result := true ;
36250: LD_ADDR_VAR 0 3
36254: PUSH
36255: LD_INT 1
36257: ST_TO_ADDR
// if array1 = array2 then
36258: LD_VAR 0 1
36262: PUSH
36263: LD_VAR 0 2
36267: EQUAL
36268: IFFALSE 36328
// begin for i = 1 to array1 do
36270: LD_ADDR_VAR 0 4
36274: PUSH
36275: DOUBLE
36276: LD_INT 1
36278: DEC
36279: ST_TO_ADDR
36280: LD_VAR 0 1
36284: PUSH
36285: FOR_TO
36286: IFFALSE 36324
// if array1 [ i ] <> array2 [ i ] then
36288: LD_VAR 0 1
36292: PUSH
36293: LD_VAR 0 4
36297: ARRAY
36298: PUSH
36299: LD_VAR 0 2
36303: PUSH
36304: LD_VAR 0 4
36308: ARRAY
36309: NONEQUAL
36310: IFFALSE 36322
// begin result := false ;
36312: LD_ADDR_VAR 0 3
36316: PUSH
36317: LD_INT 0
36319: ST_TO_ADDR
// break ;
36320: GO 36324
// end ;
36322: GO 36285
36324: POP
36325: POP
// end else
36326: GO 36336
// result := false ;
36328: LD_ADDR_VAR 0 3
36332: PUSH
36333: LD_INT 0
36335: ST_TO_ADDR
// end ;
36336: LD_VAR 0 3
36340: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
36341: LD_INT 0
36343: PPUSH
36344: PPUSH
36345: PPUSH
// pom := GetBase ( fac ) ;
36346: LD_ADDR_VAR 0 5
36350: PUSH
36351: LD_VAR 0 1
36355: PPUSH
36356: CALL_OW 274
36360: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
36361: LD_ADDR_VAR 0 4
36365: PUSH
36366: LD_VAR 0 2
36370: PUSH
36371: LD_INT 1
36373: ARRAY
36374: PPUSH
36375: LD_VAR 0 2
36379: PUSH
36380: LD_INT 2
36382: ARRAY
36383: PPUSH
36384: LD_VAR 0 2
36388: PUSH
36389: LD_INT 3
36391: ARRAY
36392: PPUSH
36393: LD_VAR 0 2
36397: PUSH
36398: LD_INT 4
36400: ARRAY
36401: PPUSH
36402: CALL_OW 449
36406: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
36407: LD_ADDR_VAR 0 3
36411: PUSH
36412: LD_VAR 0 5
36416: PPUSH
36417: LD_INT 1
36419: PPUSH
36420: CALL_OW 275
36424: PUSH
36425: LD_VAR 0 4
36429: PUSH
36430: LD_INT 1
36432: ARRAY
36433: GREATEREQUAL
36434: PUSH
36435: LD_VAR 0 5
36439: PPUSH
36440: LD_INT 2
36442: PPUSH
36443: CALL_OW 275
36447: PUSH
36448: LD_VAR 0 4
36452: PUSH
36453: LD_INT 2
36455: ARRAY
36456: GREATEREQUAL
36457: AND
36458: PUSH
36459: LD_VAR 0 5
36463: PPUSH
36464: LD_INT 3
36466: PPUSH
36467: CALL_OW 275
36471: PUSH
36472: LD_VAR 0 4
36476: PUSH
36477: LD_INT 3
36479: ARRAY
36480: GREATEREQUAL
36481: AND
36482: ST_TO_ADDR
// end ;
36483: LD_VAR 0 3
36487: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
36488: LD_INT 0
36490: PPUSH
36491: PPUSH
36492: PPUSH
36493: PPUSH
// pom := GetBase ( building ) ;
36494: LD_ADDR_VAR 0 3
36498: PUSH
36499: LD_VAR 0 1
36503: PPUSH
36504: CALL_OW 274
36508: ST_TO_ADDR
// if not pom then
36509: LD_VAR 0 3
36513: NOT
36514: IFFALSE 36518
// exit ;
36516: GO 36688
// btype := GetBType ( building ) ;
36518: LD_ADDR_VAR 0 5
36522: PUSH
36523: LD_VAR 0 1
36527: PPUSH
36528: CALL_OW 266
36532: ST_TO_ADDR
// if btype = b_armoury then
36533: LD_VAR 0 5
36537: PUSH
36538: LD_INT 4
36540: EQUAL
36541: IFFALSE 36551
// btype := b_barracks ;
36543: LD_ADDR_VAR 0 5
36547: PUSH
36548: LD_INT 5
36550: ST_TO_ADDR
// if btype = b_depot then
36551: LD_VAR 0 5
36555: PUSH
36556: LD_INT 0
36558: EQUAL
36559: IFFALSE 36569
// btype := b_warehouse ;
36561: LD_ADDR_VAR 0 5
36565: PUSH
36566: LD_INT 1
36568: ST_TO_ADDR
// if btype = b_workshop then
36569: LD_VAR 0 5
36573: PUSH
36574: LD_INT 2
36576: EQUAL
36577: IFFALSE 36587
// btype := b_factory ;
36579: LD_ADDR_VAR 0 5
36583: PUSH
36584: LD_INT 3
36586: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
36587: LD_ADDR_VAR 0 4
36591: PUSH
36592: LD_VAR 0 5
36596: PPUSH
36597: LD_VAR 0 1
36601: PPUSH
36602: CALL_OW 248
36606: PPUSH
36607: CALL_OW 450
36611: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
36612: LD_ADDR_VAR 0 2
36616: PUSH
36617: LD_VAR 0 3
36621: PPUSH
36622: LD_INT 1
36624: PPUSH
36625: CALL_OW 275
36629: PUSH
36630: LD_VAR 0 4
36634: PUSH
36635: LD_INT 1
36637: ARRAY
36638: GREATEREQUAL
36639: PUSH
36640: LD_VAR 0 3
36644: PPUSH
36645: LD_INT 2
36647: PPUSH
36648: CALL_OW 275
36652: PUSH
36653: LD_VAR 0 4
36657: PUSH
36658: LD_INT 2
36660: ARRAY
36661: GREATEREQUAL
36662: AND
36663: PUSH
36664: LD_VAR 0 3
36668: PPUSH
36669: LD_INT 3
36671: PPUSH
36672: CALL_OW 275
36676: PUSH
36677: LD_VAR 0 4
36681: PUSH
36682: LD_INT 3
36684: ARRAY
36685: GREATEREQUAL
36686: AND
36687: ST_TO_ADDR
// end ;
36688: LD_VAR 0 2
36692: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
36693: LD_INT 0
36695: PPUSH
36696: PPUSH
36697: PPUSH
// pom := GetBase ( building ) ;
36698: LD_ADDR_VAR 0 4
36702: PUSH
36703: LD_VAR 0 1
36707: PPUSH
36708: CALL_OW 274
36712: ST_TO_ADDR
// if not pom then
36713: LD_VAR 0 4
36717: NOT
36718: IFFALSE 36722
// exit ;
36720: GO 36823
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
36722: LD_ADDR_VAR 0 5
36726: PUSH
36727: LD_VAR 0 2
36731: PPUSH
36732: LD_VAR 0 1
36736: PPUSH
36737: CALL_OW 248
36741: PPUSH
36742: CALL_OW 450
36746: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
36747: LD_ADDR_VAR 0 3
36751: PUSH
36752: LD_VAR 0 4
36756: PPUSH
36757: LD_INT 1
36759: PPUSH
36760: CALL_OW 275
36764: PUSH
36765: LD_VAR 0 5
36769: PUSH
36770: LD_INT 1
36772: ARRAY
36773: GREATEREQUAL
36774: PUSH
36775: LD_VAR 0 4
36779: PPUSH
36780: LD_INT 2
36782: PPUSH
36783: CALL_OW 275
36787: PUSH
36788: LD_VAR 0 5
36792: PUSH
36793: LD_INT 2
36795: ARRAY
36796: GREATEREQUAL
36797: AND
36798: PUSH
36799: LD_VAR 0 4
36803: PPUSH
36804: LD_INT 3
36806: PPUSH
36807: CALL_OW 275
36811: PUSH
36812: LD_VAR 0 5
36816: PUSH
36817: LD_INT 3
36819: ARRAY
36820: GREATEREQUAL
36821: AND
36822: ST_TO_ADDR
// end ;
36823: LD_VAR 0 3
36827: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
36828: LD_INT 0
36830: PPUSH
36831: PPUSH
36832: PPUSH
36833: PPUSH
36834: PPUSH
36835: PPUSH
36836: PPUSH
36837: PPUSH
36838: PPUSH
36839: PPUSH
// result := false ;
36840: LD_ADDR_VAR 0 6
36844: PUSH
36845: LD_INT 0
36847: ST_TO_ADDR
// if not base or not btype or not x or not y then
36848: LD_VAR 0 1
36852: NOT
36853: PUSH
36854: LD_VAR 0 2
36858: NOT
36859: OR
36860: PUSH
36861: LD_VAR 0 3
36865: NOT
36866: OR
36867: PUSH
36868: LD_VAR 0 4
36872: NOT
36873: OR
36874: IFFALSE 36878
// exit ;
36876: GO 37487
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
36878: LD_ADDR_VAR 0 12
36882: PUSH
36883: LD_VAR 0 2
36887: PPUSH
36888: LD_VAR 0 3
36892: PPUSH
36893: LD_VAR 0 4
36897: PPUSH
36898: LD_VAR 0 5
36902: PPUSH
36903: LD_VAR 0 1
36907: PUSH
36908: LD_INT 1
36910: ARRAY
36911: PPUSH
36912: CALL_OW 248
36916: PPUSH
36917: LD_INT 0
36919: PPUSH
36920: CALL 38324 0 6
36924: ST_TO_ADDR
// if not hexes then
36925: LD_VAR 0 12
36929: NOT
36930: IFFALSE 36934
// exit ;
36932: GO 37487
// for i = 1 to hexes do
36934: LD_ADDR_VAR 0 7
36938: PUSH
36939: DOUBLE
36940: LD_INT 1
36942: DEC
36943: ST_TO_ADDR
36944: LD_VAR 0 12
36948: PUSH
36949: FOR_TO
36950: IFFALSE 37485
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
36952: LD_ADDR_VAR 0 11
36956: PUSH
36957: LD_VAR 0 12
36961: PUSH
36962: LD_VAR 0 7
36966: ARRAY
36967: PUSH
36968: LD_INT 1
36970: ARRAY
36971: PPUSH
36972: LD_VAR 0 12
36976: PUSH
36977: LD_VAR 0 7
36981: ARRAY
36982: PUSH
36983: LD_INT 2
36985: ARRAY
36986: PPUSH
36987: CALL_OW 428
36991: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
36992: LD_VAR 0 12
36996: PUSH
36997: LD_VAR 0 7
37001: ARRAY
37002: PUSH
37003: LD_INT 1
37005: ARRAY
37006: PPUSH
37007: LD_VAR 0 12
37011: PUSH
37012: LD_VAR 0 7
37016: ARRAY
37017: PUSH
37018: LD_INT 2
37020: ARRAY
37021: PPUSH
37022: CALL_OW 351
37026: PUSH
37027: LD_VAR 0 12
37031: PUSH
37032: LD_VAR 0 7
37036: ARRAY
37037: PUSH
37038: LD_INT 1
37040: ARRAY
37041: PPUSH
37042: LD_VAR 0 12
37046: PUSH
37047: LD_VAR 0 7
37051: ARRAY
37052: PUSH
37053: LD_INT 2
37055: ARRAY
37056: PPUSH
37057: CALL_OW 488
37061: NOT
37062: OR
37063: PUSH
37064: LD_VAR 0 11
37068: PPUSH
37069: CALL_OW 247
37073: PUSH
37074: LD_INT 3
37076: EQUAL
37077: OR
37078: IFFALSE 37084
// exit ;
37080: POP
37081: POP
37082: GO 37487
// if not tmp or not tmp in base then
37084: LD_VAR 0 11
37088: NOT
37089: PUSH
37090: LD_VAR 0 11
37094: PUSH
37095: LD_VAR 0 1
37099: IN
37100: NOT
37101: OR
37102: IFFALSE 37106
// continue ;
37104: GO 36949
// result := true ;
37106: LD_ADDR_VAR 0 6
37110: PUSH
37111: LD_INT 1
37113: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
37114: LD_ADDR_VAR 0 15
37118: PUSH
37119: LD_VAR 0 1
37123: PPUSH
37124: LD_INT 22
37126: PUSH
37127: LD_VAR 0 11
37131: PPUSH
37132: CALL_OW 255
37136: PUSH
37137: EMPTY
37138: LIST
37139: LIST
37140: PUSH
37141: LD_INT 2
37143: PUSH
37144: LD_INT 30
37146: PUSH
37147: LD_INT 0
37149: PUSH
37150: EMPTY
37151: LIST
37152: LIST
37153: PUSH
37154: LD_INT 30
37156: PUSH
37157: LD_INT 1
37159: PUSH
37160: EMPTY
37161: LIST
37162: LIST
37163: PUSH
37164: EMPTY
37165: LIST
37166: LIST
37167: LIST
37168: PUSH
37169: EMPTY
37170: LIST
37171: LIST
37172: PPUSH
37173: CALL_OW 72
37177: ST_TO_ADDR
// if dep then
37178: LD_VAR 0 15
37182: IFFALSE 37318
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
37184: LD_ADDR_VAR 0 14
37188: PUSH
37189: LD_VAR 0 15
37193: PUSH
37194: LD_INT 1
37196: ARRAY
37197: PPUSH
37198: CALL_OW 250
37202: PPUSH
37203: LD_VAR 0 15
37207: PUSH
37208: LD_INT 1
37210: ARRAY
37211: PPUSH
37212: CALL_OW 254
37216: PPUSH
37217: LD_INT 5
37219: PPUSH
37220: CALL_OW 272
37224: PUSH
37225: LD_VAR 0 15
37229: PUSH
37230: LD_INT 1
37232: ARRAY
37233: PPUSH
37234: CALL_OW 251
37238: PPUSH
37239: LD_VAR 0 15
37243: PUSH
37244: LD_INT 1
37246: ARRAY
37247: PPUSH
37248: CALL_OW 254
37252: PPUSH
37253: LD_INT 5
37255: PPUSH
37256: CALL_OW 273
37260: PUSH
37261: EMPTY
37262: LIST
37263: LIST
37264: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
37265: LD_VAR 0 14
37269: PUSH
37270: LD_INT 1
37272: ARRAY
37273: PPUSH
37274: LD_VAR 0 14
37278: PUSH
37279: LD_INT 2
37281: ARRAY
37282: PPUSH
37283: CALL_OW 488
37287: IFFALSE 37318
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
37289: LD_VAR 0 11
37293: PPUSH
37294: LD_VAR 0 14
37298: PUSH
37299: LD_INT 1
37301: ARRAY
37302: PPUSH
37303: LD_VAR 0 14
37307: PUSH
37308: LD_INT 2
37310: ARRAY
37311: PPUSH
37312: CALL_OW 111
// continue ;
37316: GO 36949
// end ; end ; r := GetDir ( tmp ) ;
37318: LD_ADDR_VAR 0 13
37322: PUSH
37323: LD_VAR 0 11
37327: PPUSH
37328: CALL_OW 254
37332: ST_TO_ADDR
// if r = 5 then
37333: LD_VAR 0 13
37337: PUSH
37338: LD_INT 5
37340: EQUAL
37341: IFFALSE 37351
// r := 0 ;
37343: LD_ADDR_VAR 0 13
37347: PUSH
37348: LD_INT 0
37350: ST_TO_ADDR
// for j = r to 5 do
37351: LD_ADDR_VAR 0 8
37355: PUSH
37356: DOUBLE
37357: LD_VAR 0 13
37361: DEC
37362: ST_TO_ADDR
37363: LD_INT 5
37365: PUSH
37366: FOR_TO
37367: IFFALSE 37481
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
37369: LD_ADDR_VAR 0 9
37373: PUSH
37374: LD_VAR 0 11
37378: PPUSH
37379: CALL_OW 250
37383: PPUSH
37384: LD_VAR 0 8
37388: PPUSH
37389: LD_INT 2
37391: PPUSH
37392: CALL_OW 272
37396: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
37397: LD_ADDR_VAR 0 10
37401: PUSH
37402: LD_VAR 0 11
37406: PPUSH
37407: CALL_OW 251
37411: PPUSH
37412: LD_VAR 0 8
37416: PPUSH
37417: LD_INT 2
37419: PPUSH
37420: CALL_OW 273
37424: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
37425: LD_VAR 0 9
37429: PPUSH
37430: LD_VAR 0 10
37434: PPUSH
37435: CALL_OW 488
37439: PUSH
37440: LD_VAR 0 9
37444: PPUSH
37445: LD_VAR 0 10
37449: PPUSH
37450: CALL_OW 428
37454: NOT
37455: AND
37456: IFFALSE 37479
// begin ComMoveXY ( tmp , _x , _y ) ;
37458: LD_VAR 0 11
37462: PPUSH
37463: LD_VAR 0 9
37467: PPUSH
37468: LD_VAR 0 10
37472: PPUSH
37473: CALL_OW 111
// break ;
37477: GO 37481
// end ; end ;
37479: GO 37366
37481: POP
37482: POP
// end ;
37483: GO 36949
37485: POP
37486: POP
// end ;
37487: LD_VAR 0 6
37491: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
37492: LD_INT 0
37494: PPUSH
37495: PPUSH
37496: PPUSH
37497: PPUSH
37498: PPUSH
37499: PPUSH
37500: PPUSH
37501: PPUSH
37502: PPUSH
37503: PPUSH
// result := false ;
37504: LD_ADDR_VAR 0 6
37508: PUSH
37509: LD_INT 0
37511: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
37512: LD_VAR 0 1
37516: NOT
37517: PUSH
37518: LD_VAR 0 1
37522: PPUSH
37523: CALL_OW 266
37527: PUSH
37528: LD_INT 0
37530: PUSH
37531: LD_INT 1
37533: PUSH
37534: EMPTY
37535: LIST
37536: LIST
37537: IN
37538: NOT
37539: OR
37540: PUSH
37541: LD_VAR 0 2
37545: NOT
37546: OR
37547: PUSH
37548: LD_VAR 0 5
37552: PUSH
37553: LD_INT 0
37555: PUSH
37556: LD_INT 1
37558: PUSH
37559: LD_INT 2
37561: PUSH
37562: LD_INT 3
37564: PUSH
37565: LD_INT 4
37567: PUSH
37568: LD_INT 5
37570: PUSH
37571: EMPTY
37572: LIST
37573: LIST
37574: LIST
37575: LIST
37576: LIST
37577: LIST
37578: IN
37579: NOT
37580: OR
37581: PUSH
37582: LD_VAR 0 3
37586: PPUSH
37587: LD_VAR 0 4
37591: PPUSH
37592: CALL_OW 488
37596: NOT
37597: OR
37598: IFFALSE 37602
// exit ;
37600: GO 38319
// pom := GetBase ( depot ) ;
37602: LD_ADDR_VAR 0 10
37606: PUSH
37607: LD_VAR 0 1
37611: PPUSH
37612: CALL_OW 274
37616: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
37617: LD_ADDR_VAR 0 11
37621: PUSH
37622: LD_VAR 0 2
37626: PPUSH
37627: LD_VAR 0 1
37631: PPUSH
37632: CALL_OW 248
37636: PPUSH
37637: CALL_OW 450
37641: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
37642: LD_VAR 0 10
37646: PPUSH
37647: LD_INT 1
37649: PPUSH
37650: CALL_OW 275
37654: PUSH
37655: LD_VAR 0 11
37659: PUSH
37660: LD_INT 1
37662: ARRAY
37663: GREATEREQUAL
37664: PUSH
37665: LD_VAR 0 10
37669: PPUSH
37670: LD_INT 2
37672: PPUSH
37673: CALL_OW 275
37677: PUSH
37678: LD_VAR 0 11
37682: PUSH
37683: LD_INT 2
37685: ARRAY
37686: GREATEREQUAL
37687: AND
37688: PUSH
37689: LD_VAR 0 10
37693: PPUSH
37694: LD_INT 3
37696: PPUSH
37697: CALL_OW 275
37701: PUSH
37702: LD_VAR 0 11
37706: PUSH
37707: LD_INT 3
37709: ARRAY
37710: GREATEREQUAL
37711: AND
37712: NOT
37713: IFFALSE 37717
// exit ;
37715: GO 38319
// if GetBType ( depot ) = b_depot then
37717: LD_VAR 0 1
37721: PPUSH
37722: CALL_OW 266
37726: PUSH
37727: LD_INT 0
37729: EQUAL
37730: IFFALSE 37742
// dist := 28 else
37732: LD_ADDR_VAR 0 14
37736: PUSH
37737: LD_INT 28
37739: ST_TO_ADDR
37740: GO 37750
// dist := 36 ;
37742: LD_ADDR_VAR 0 14
37746: PUSH
37747: LD_INT 36
37749: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
37750: LD_VAR 0 1
37754: PPUSH
37755: LD_VAR 0 3
37759: PPUSH
37760: LD_VAR 0 4
37764: PPUSH
37765: CALL_OW 297
37769: PUSH
37770: LD_VAR 0 14
37774: GREATER
37775: IFFALSE 37779
// exit ;
37777: GO 38319
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
37779: LD_ADDR_VAR 0 12
37783: PUSH
37784: LD_VAR 0 2
37788: PPUSH
37789: LD_VAR 0 3
37793: PPUSH
37794: LD_VAR 0 4
37798: PPUSH
37799: LD_VAR 0 5
37803: PPUSH
37804: LD_VAR 0 1
37808: PPUSH
37809: CALL_OW 248
37813: PPUSH
37814: LD_INT 0
37816: PPUSH
37817: CALL 38324 0 6
37821: ST_TO_ADDR
// if not hexes then
37822: LD_VAR 0 12
37826: NOT
37827: IFFALSE 37831
// exit ;
37829: GO 38319
// hex := GetHexInfo ( x , y ) ;
37831: LD_ADDR_VAR 0 15
37835: PUSH
37836: LD_VAR 0 3
37840: PPUSH
37841: LD_VAR 0 4
37845: PPUSH
37846: CALL_OW 546
37850: ST_TO_ADDR
// if hex [ 1 ] then
37851: LD_VAR 0 15
37855: PUSH
37856: LD_INT 1
37858: ARRAY
37859: IFFALSE 37863
// exit ;
37861: GO 38319
// height := hex [ 2 ] ;
37863: LD_ADDR_VAR 0 13
37867: PUSH
37868: LD_VAR 0 15
37872: PUSH
37873: LD_INT 2
37875: ARRAY
37876: ST_TO_ADDR
// for i = 1 to hexes do
37877: LD_ADDR_VAR 0 7
37881: PUSH
37882: DOUBLE
37883: LD_INT 1
37885: DEC
37886: ST_TO_ADDR
37887: LD_VAR 0 12
37891: PUSH
37892: FOR_TO
37893: IFFALSE 38223
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
37895: LD_VAR 0 12
37899: PUSH
37900: LD_VAR 0 7
37904: ARRAY
37905: PUSH
37906: LD_INT 1
37908: ARRAY
37909: PPUSH
37910: LD_VAR 0 12
37914: PUSH
37915: LD_VAR 0 7
37919: ARRAY
37920: PUSH
37921: LD_INT 2
37923: ARRAY
37924: PPUSH
37925: CALL_OW 488
37929: NOT
37930: PUSH
37931: LD_VAR 0 12
37935: PUSH
37936: LD_VAR 0 7
37940: ARRAY
37941: PUSH
37942: LD_INT 1
37944: ARRAY
37945: PPUSH
37946: LD_VAR 0 12
37950: PUSH
37951: LD_VAR 0 7
37955: ARRAY
37956: PUSH
37957: LD_INT 2
37959: ARRAY
37960: PPUSH
37961: CALL_OW 428
37965: PUSH
37966: LD_INT 0
37968: GREATER
37969: OR
37970: PUSH
37971: LD_VAR 0 12
37975: PUSH
37976: LD_VAR 0 7
37980: ARRAY
37981: PUSH
37982: LD_INT 1
37984: ARRAY
37985: PPUSH
37986: LD_VAR 0 12
37990: PUSH
37991: LD_VAR 0 7
37995: ARRAY
37996: PUSH
37997: LD_INT 2
37999: ARRAY
38000: PPUSH
38001: CALL_OW 351
38005: OR
38006: IFFALSE 38012
// exit ;
38008: POP
38009: POP
38010: GO 38319
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
38012: LD_ADDR_VAR 0 8
38016: PUSH
38017: LD_VAR 0 12
38021: PUSH
38022: LD_VAR 0 7
38026: ARRAY
38027: PUSH
38028: LD_INT 1
38030: ARRAY
38031: PPUSH
38032: LD_VAR 0 12
38036: PUSH
38037: LD_VAR 0 7
38041: ARRAY
38042: PUSH
38043: LD_INT 2
38045: ARRAY
38046: PPUSH
38047: CALL_OW 546
38051: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
38052: LD_VAR 0 8
38056: PUSH
38057: LD_INT 1
38059: ARRAY
38060: PUSH
38061: LD_VAR 0 8
38065: PUSH
38066: LD_INT 2
38068: ARRAY
38069: PUSH
38070: LD_VAR 0 13
38074: PUSH
38075: LD_INT 2
38077: PLUS
38078: GREATER
38079: OR
38080: PUSH
38081: LD_VAR 0 8
38085: PUSH
38086: LD_INT 2
38088: ARRAY
38089: PUSH
38090: LD_VAR 0 13
38094: PUSH
38095: LD_INT 2
38097: MINUS
38098: LESS
38099: OR
38100: PUSH
38101: LD_VAR 0 8
38105: PUSH
38106: LD_INT 3
38108: ARRAY
38109: PUSH
38110: LD_INT 0
38112: PUSH
38113: LD_INT 8
38115: PUSH
38116: LD_INT 9
38118: PUSH
38119: LD_INT 10
38121: PUSH
38122: LD_INT 11
38124: PUSH
38125: LD_INT 12
38127: PUSH
38128: LD_INT 13
38130: PUSH
38131: LD_INT 16
38133: PUSH
38134: LD_INT 17
38136: PUSH
38137: LD_INT 18
38139: PUSH
38140: LD_INT 19
38142: PUSH
38143: LD_INT 20
38145: PUSH
38146: LD_INT 21
38148: PUSH
38149: EMPTY
38150: LIST
38151: LIST
38152: LIST
38153: LIST
38154: LIST
38155: LIST
38156: LIST
38157: LIST
38158: LIST
38159: LIST
38160: LIST
38161: LIST
38162: LIST
38163: IN
38164: NOT
38165: OR
38166: PUSH
38167: LD_VAR 0 8
38171: PUSH
38172: LD_INT 5
38174: ARRAY
38175: NOT
38176: OR
38177: PUSH
38178: LD_VAR 0 8
38182: PUSH
38183: LD_INT 6
38185: ARRAY
38186: PUSH
38187: LD_INT 1
38189: PUSH
38190: LD_INT 2
38192: PUSH
38193: LD_INT 7
38195: PUSH
38196: LD_INT 9
38198: PUSH
38199: LD_INT 10
38201: PUSH
38202: LD_INT 11
38204: PUSH
38205: EMPTY
38206: LIST
38207: LIST
38208: LIST
38209: LIST
38210: LIST
38211: LIST
38212: IN
38213: NOT
38214: OR
38215: IFFALSE 38221
// exit ;
38217: POP
38218: POP
38219: GO 38319
// end ;
38221: GO 37892
38223: POP
38224: POP
// side := GetSide ( depot ) ;
38225: LD_ADDR_VAR 0 9
38229: PUSH
38230: LD_VAR 0 1
38234: PPUSH
38235: CALL_OW 255
38239: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
38240: LD_VAR 0 9
38244: PPUSH
38245: LD_VAR 0 3
38249: PPUSH
38250: LD_VAR 0 4
38254: PPUSH
38255: LD_INT 20
38257: PPUSH
38258: CALL 30973 0 4
38262: PUSH
38263: LD_INT 4
38265: ARRAY
38266: IFFALSE 38270
// exit ;
38268: GO 38319
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
38270: LD_VAR 0 2
38274: PUSH
38275: LD_INT 29
38277: PUSH
38278: LD_INT 30
38280: PUSH
38281: EMPTY
38282: LIST
38283: LIST
38284: IN
38285: PUSH
38286: LD_VAR 0 3
38290: PPUSH
38291: LD_VAR 0 4
38295: PPUSH
38296: LD_VAR 0 9
38300: PPUSH
38301: CALL_OW 440
38305: NOT
38306: AND
38307: IFFALSE 38311
// exit ;
38309: GO 38319
// result := true ;
38311: LD_ADDR_VAR 0 6
38315: PUSH
38316: LD_INT 1
38318: ST_TO_ADDR
// end ;
38319: LD_VAR 0 6
38323: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
38324: LD_INT 0
38326: PPUSH
38327: PPUSH
38328: PPUSH
38329: PPUSH
38330: PPUSH
38331: PPUSH
38332: PPUSH
38333: PPUSH
38334: PPUSH
38335: PPUSH
38336: PPUSH
38337: PPUSH
38338: PPUSH
38339: PPUSH
38340: PPUSH
38341: PPUSH
38342: PPUSH
38343: PPUSH
38344: PPUSH
38345: PPUSH
38346: PPUSH
38347: PPUSH
38348: PPUSH
38349: PPUSH
38350: PPUSH
38351: PPUSH
38352: PPUSH
38353: PPUSH
38354: PPUSH
38355: PPUSH
38356: PPUSH
38357: PPUSH
38358: PPUSH
38359: PPUSH
38360: PPUSH
38361: PPUSH
38362: PPUSH
38363: PPUSH
38364: PPUSH
38365: PPUSH
38366: PPUSH
38367: PPUSH
38368: PPUSH
38369: PPUSH
38370: PPUSH
38371: PPUSH
38372: PPUSH
38373: PPUSH
38374: PPUSH
38375: PPUSH
38376: PPUSH
38377: PPUSH
38378: PPUSH
38379: PPUSH
38380: PPUSH
38381: PPUSH
38382: PPUSH
38383: PPUSH
// result = [ ] ;
38384: LD_ADDR_VAR 0 7
38388: PUSH
38389: EMPTY
38390: ST_TO_ADDR
// temp_list = [ ] ;
38391: LD_ADDR_VAR 0 9
38395: PUSH
38396: EMPTY
38397: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
38398: LD_VAR 0 4
38402: PUSH
38403: LD_INT 0
38405: PUSH
38406: LD_INT 1
38408: PUSH
38409: LD_INT 2
38411: PUSH
38412: LD_INT 3
38414: PUSH
38415: LD_INT 4
38417: PUSH
38418: LD_INT 5
38420: PUSH
38421: EMPTY
38422: LIST
38423: LIST
38424: LIST
38425: LIST
38426: LIST
38427: LIST
38428: IN
38429: NOT
38430: PUSH
38431: LD_VAR 0 1
38435: PUSH
38436: LD_INT 0
38438: PUSH
38439: LD_INT 1
38441: PUSH
38442: EMPTY
38443: LIST
38444: LIST
38445: IN
38446: PUSH
38447: LD_VAR 0 5
38451: PUSH
38452: LD_INT 1
38454: PUSH
38455: LD_INT 2
38457: PUSH
38458: LD_INT 3
38460: PUSH
38461: EMPTY
38462: LIST
38463: LIST
38464: LIST
38465: IN
38466: NOT
38467: AND
38468: OR
38469: IFFALSE 38473
// exit ;
38471: GO 56864
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
38473: LD_VAR 0 1
38477: PUSH
38478: LD_INT 6
38480: PUSH
38481: LD_INT 7
38483: PUSH
38484: LD_INT 8
38486: PUSH
38487: LD_INT 13
38489: PUSH
38490: LD_INT 12
38492: PUSH
38493: LD_INT 15
38495: PUSH
38496: LD_INT 11
38498: PUSH
38499: LD_INT 14
38501: PUSH
38502: LD_INT 10
38504: PUSH
38505: EMPTY
38506: LIST
38507: LIST
38508: LIST
38509: LIST
38510: LIST
38511: LIST
38512: LIST
38513: LIST
38514: LIST
38515: IN
38516: IFFALSE 38526
// btype = b_lab ;
38518: LD_ADDR_VAR 0 1
38522: PUSH
38523: LD_INT 6
38525: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
38526: LD_VAR 0 6
38530: PUSH
38531: LD_INT 0
38533: PUSH
38534: LD_INT 1
38536: PUSH
38537: LD_INT 2
38539: PUSH
38540: EMPTY
38541: LIST
38542: LIST
38543: LIST
38544: IN
38545: NOT
38546: PUSH
38547: LD_VAR 0 1
38551: PUSH
38552: LD_INT 0
38554: PUSH
38555: LD_INT 1
38557: PUSH
38558: LD_INT 2
38560: PUSH
38561: LD_INT 3
38563: PUSH
38564: LD_INT 6
38566: PUSH
38567: LD_INT 36
38569: PUSH
38570: LD_INT 4
38572: PUSH
38573: LD_INT 5
38575: PUSH
38576: LD_INT 31
38578: PUSH
38579: LD_INT 32
38581: PUSH
38582: LD_INT 33
38584: PUSH
38585: EMPTY
38586: LIST
38587: LIST
38588: LIST
38589: LIST
38590: LIST
38591: LIST
38592: LIST
38593: LIST
38594: LIST
38595: LIST
38596: LIST
38597: IN
38598: NOT
38599: PUSH
38600: LD_VAR 0 6
38604: PUSH
38605: LD_INT 1
38607: EQUAL
38608: AND
38609: OR
38610: PUSH
38611: LD_VAR 0 1
38615: PUSH
38616: LD_INT 2
38618: PUSH
38619: LD_INT 3
38621: PUSH
38622: EMPTY
38623: LIST
38624: LIST
38625: IN
38626: NOT
38627: PUSH
38628: LD_VAR 0 6
38632: PUSH
38633: LD_INT 2
38635: EQUAL
38636: AND
38637: OR
38638: IFFALSE 38648
// mode = 0 ;
38640: LD_ADDR_VAR 0 6
38644: PUSH
38645: LD_INT 0
38647: ST_TO_ADDR
// case mode of 0 :
38648: LD_VAR 0 6
38652: PUSH
38653: LD_INT 0
38655: DOUBLE
38656: EQUAL
38657: IFTRUE 38661
38659: GO 50114
38661: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
38662: LD_ADDR_VAR 0 11
38666: PUSH
38667: LD_INT 0
38669: PUSH
38670: LD_INT 0
38672: PUSH
38673: EMPTY
38674: LIST
38675: LIST
38676: PUSH
38677: LD_INT 0
38679: PUSH
38680: LD_INT 1
38682: NEG
38683: PUSH
38684: EMPTY
38685: LIST
38686: LIST
38687: PUSH
38688: LD_INT 1
38690: PUSH
38691: LD_INT 0
38693: PUSH
38694: EMPTY
38695: LIST
38696: LIST
38697: PUSH
38698: LD_INT 1
38700: PUSH
38701: LD_INT 1
38703: PUSH
38704: EMPTY
38705: LIST
38706: LIST
38707: PUSH
38708: LD_INT 0
38710: PUSH
38711: LD_INT 1
38713: PUSH
38714: EMPTY
38715: LIST
38716: LIST
38717: PUSH
38718: LD_INT 1
38720: NEG
38721: PUSH
38722: LD_INT 0
38724: PUSH
38725: EMPTY
38726: LIST
38727: LIST
38728: PUSH
38729: LD_INT 1
38731: NEG
38732: PUSH
38733: LD_INT 1
38735: NEG
38736: PUSH
38737: EMPTY
38738: LIST
38739: LIST
38740: PUSH
38741: LD_INT 1
38743: NEG
38744: PUSH
38745: LD_INT 2
38747: NEG
38748: PUSH
38749: EMPTY
38750: LIST
38751: LIST
38752: PUSH
38753: LD_INT 0
38755: PUSH
38756: LD_INT 2
38758: NEG
38759: PUSH
38760: EMPTY
38761: LIST
38762: LIST
38763: PUSH
38764: LD_INT 1
38766: PUSH
38767: LD_INT 1
38769: NEG
38770: PUSH
38771: EMPTY
38772: LIST
38773: LIST
38774: PUSH
38775: LD_INT 1
38777: PUSH
38778: LD_INT 2
38780: PUSH
38781: EMPTY
38782: LIST
38783: LIST
38784: PUSH
38785: LD_INT 0
38787: PUSH
38788: LD_INT 2
38790: PUSH
38791: EMPTY
38792: LIST
38793: LIST
38794: PUSH
38795: LD_INT 1
38797: NEG
38798: PUSH
38799: LD_INT 1
38801: PUSH
38802: EMPTY
38803: LIST
38804: LIST
38805: PUSH
38806: LD_INT 1
38808: PUSH
38809: LD_INT 3
38811: PUSH
38812: EMPTY
38813: LIST
38814: LIST
38815: PUSH
38816: LD_INT 0
38818: PUSH
38819: LD_INT 3
38821: PUSH
38822: EMPTY
38823: LIST
38824: LIST
38825: PUSH
38826: LD_INT 1
38828: NEG
38829: PUSH
38830: LD_INT 2
38832: PUSH
38833: EMPTY
38834: LIST
38835: LIST
38836: PUSH
38837: EMPTY
38838: LIST
38839: LIST
38840: LIST
38841: LIST
38842: LIST
38843: LIST
38844: LIST
38845: LIST
38846: LIST
38847: LIST
38848: LIST
38849: LIST
38850: LIST
38851: LIST
38852: LIST
38853: LIST
38854: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
38855: LD_ADDR_VAR 0 12
38859: PUSH
38860: LD_INT 0
38862: PUSH
38863: LD_INT 0
38865: PUSH
38866: EMPTY
38867: LIST
38868: LIST
38869: PUSH
38870: LD_INT 0
38872: PUSH
38873: LD_INT 1
38875: NEG
38876: PUSH
38877: EMPTY
38878: LIST
38879: LIST
38880: PUSH
38881: LD_INT 1
38883: PUSH
38884: LD_INT 0
38886: PUSH
38887: EMPTY
38888: LIST
38889: LIST
38890: PUSH
38891: LD_INT 1
38893: PUSH
38894: LD_INT 1
38896: PUSH
38897: EMPTY
38898: LIST
38899: LIST
38900: PUSH
38901: LD_INT 0
38903: PUSH
38904: LD_INT 1
38906: PUSH
38907: EMPTY
38908: LIST
38909: LIST
38910: PUSH
38911: LD_INT 1
38913: NEG
38914: PUSH
38915: LD_INT 0
38917: PUSH
38918: EMPTY
38919: LIST
38920: LIST
38921: PUSH
38922: LD_INT 1
38924: NEG
38925: PUSH
38926: LD_INT 1
38928: NEG
38929: PUSH
38930: EMPTY
38931: LIST
38932: LIST
38933: PUSH
38934: LD_INT 1
38936: PUSH
38937: LD_INT 1
38939: NEG
38940: PUSH
38941: EMPTY
38942: LIST
38943: LIST
38944: PUSH
38945: LD_INT 2
38947: PUSH
38948: LD_INT 0
38950: PUSH
38951: EMPTY
38952: LIST
38953: LIST
38954: PUSH
38955: LD_INT 2
38957: PUSH
38958: LD_INT 1
38960: PUSH
38961: EMPTY
38962: LIST
38963: LIST
38964: PUSH
38965: LD_INT 1
38967: NEG
38968: PUSH
38969: LD_INT 1
38971: PUSH
38972: EMPTY
38973: LIST
38974: LIST
38975: PUSH
38976: LD_INT 2
38978: NEG
38979: PUSH
38980: LD_INT 0
38982: PUSH
38983: EMPTY
38984: LIST
38985: LIST
38986: PUSH
38987: LD_INT 2
38989: NEG
38990: PUSH
38991: LD_INT 1
38993: NEG
38994: PUSH
38995: EMPTY
38996: LIST
38997: LIST
38998: PUSH
38999: LD_INT 2
39001: NEG
39002: PUSH
39003: LD_INT 1
39005: PUSH
39006: EMPTY
39007: LIST
39008: LIST
39009: PUSH
39010: LD_INT 3
39012: NEG
39013: PUSH
39014: LD_INT 0
39016: PUSH
39017: EMPTY
39018: LIST
39019: LIST
39020: PUSH
39021: LD_INT 3
39023: NEG
39024: PUSH
39025: LD_INT 1
39027: NEG
39028: PUSH
39029: EMPTY
39030: LIST
39031: LIST
39032: PUSH
39033: EMPTY
39034: LIST
39035: LIST
39036: LIST
39037: LIST
39038: LIST
39039: LIST
39040: LIST
39041: LIST
39042: LIST
39043: LIST
39044: LIST
39045: LIST
39046: LIST
39047: LIST
39048: LIST
39049: LIST
39050: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
39051: LD_ADDR_VAR 0 13
39055: PUSH
39056: LD_INT 0
39058: PUSH
39059: LD_INT 0
39061: PUSH
39062: EMPTY
39063: LIST
39064: LIST
39065: PUSH
39066: LD_INT 0
39068: PUSH
39069: LD_INT 1
39071: NEG
39072: PUSH
39073: EMPTY
39074: LIST
39075: LIST
39076: PUSH
39077: LD_INT 1
39079: PUSH
39080: LD_INT 0
39082: PUSH
39083: EMPTY
39084: LIST
39085: LIST
39086: PUSH
39087: LD_INT 1
39089: PUSH
39090: LD_INT 1
39092: PUSH
39093: EMPTY
39094: LIST
39095: LIST
39096: PUSH
39097: LD_INT 0
39099: PUSH
39100: LD_INT 1
39102: PUSH
39103: EMPTY
39104: LIST
39105: LIST
39106: PUSH
39107: LD_INT 1
39109: NEG
39110: PUSH
39111: LD_INT 0
39113: PUSH
39114: EMPTY
39115: LIST
39116: LIST
39117: PUSH
39118: LD_INT 1
39120: NEG
39121: PUSH
39122: LD_INT 1
39124: NEG
39125: PUSH
39126: EMPTY
39127: LIST
39128: LIST
39129: PUSH
39130: LD_INT 1
39132: NEG
39133: PUSH
39134: LD_INT 2
39136: NEG
39137: PUSH
39138: EMPTY
39139: LIST
39140: LIST
39141: PUSH
39142: LD_INT 2
39144: PUSH
39145: LD_INT 1
39147: PUSH
39148: EMPTY
39149: LIST
39150: LIST
39151: PUSH
39152: LD_INT 2
39154: PUSH
39155: LD_INT 2
39157: PUSH
39158: EMPTY
39159: LIST
39160: LIST
39161: PUSH
39162: LD_INT 1
39164: PUSH
39165: LD_INT 2
39167: PUSH
39168: EMPTY
39169: LIST
39170: LIST
39171: PUSH
39172: LD_INT 2
39174: NEG
39175: PUSH
39176: LD_INT 1
39178: NEG
39179: PUSH
39180: EMPTY
39181: LIST
39182: LIST
39183: PUSH
39184: LD_INT 2
39186: NEG
39187: PUSH
39188: LD_INT 2
39190: NEG
39191: PUSH
39192: EMPTY
39193: LIST
39194: LIST
39195: PUSH
39196: LD_INT 2
39198: NEG
39199: PUSH
39200: LD_INT 3
39202: NEG
39203: PUSH
39204: EMPTY
39205: LIST
39206: LIST
39207: PUSH
39208: LD_INT 3
39210: NEG
39211: PUSH
39212: LD_INT 2
39214: NEG
39215: PUSH
39216: EMPTY
39217: LIST
39218: LIST
39219: PUSH
39220: LD_INT 3
39222: NEG
39223: PUSH
39224: LD_INT 3
39226: NEG
39227: PUSH
39228: EMPTY
39229: LIST
39230: LIST
39231: PUSH
39232: EMPTY
39233: LIST
39234: LIST
39235: LIST
39236: LIST
39237: LIST
39238: LIST
39239: LIST
39240: LIST
39241: LIST
39242: LIST
39243: LIST
39244: LIST
39245: LIST
39246: LIST
39247: LIST
39248: LIST
39249: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
39250: LD_ADDR_VAR 0 14
39254: PUSH
39255: LD_INT 0
39257: PUSH
39258: LD_INT 0
39260: PUSH
39261: EMPTY
39262: LIST
39263: LIST
39264: PUSH
39265: LD_INT 0
39267: PUSH
39268: LD_INT 1
39270: NEG
39271: PUSH
39272: EMPTY
39273: LIST
39274: LIST
39275: PUSH
39276: LD_INT 1
39278: PUSH
39279: LD_INT 0
39281: PUSH
39282: EMPTY
39283: LIST
39284: LIST
39285: PUSH
39286: LD_INT 1
39288: PUSH
39289: LD_INT 1
39291: PUSH
39292: EMPTY
39293: LIST
39294: LIST
39295: PUSH
39296: LD_INT 0
39298: PUSH
39299: LD_INT 1
39301: PUSH
39302: EMPTY
39303: LIST
39304: LIST
39305: PUSH
39306: LD_INT 1
39308: NEG
39309: PUSH
39310: LD_INT 0
39312: PUSH
39313: EMPTY
39314: LIST
39315: LIST
39316: PUSH
39317: LD_INT 1
39319: NEG
39320: PUSH
39321: LD_INT 1
39323: NEG
39324: PUSH
39325: EMPTY
39326: LIST
39327: LIST
39328: PUSH
39329: LD_INT 1
39331: NEG
39332: PUSH
39333: LD_INT 2
39335: NEG
39336: PUSH
39337: EMPTY
39338: LIST
39339: LIST
39340: PUSH
39341: LD_INT 0
39343: PUSH
39344: LD_INT 2
39346: NEG
39347: PUSH
39348: EMPTY
39349: LIST
39350: LIST
39351: PUSH
39352: LD_INT 1
39354: PUSH
39355: LD_INT 1
39357: NEG
39358: PUSH
39359: EMPTY
39360: LIST
39361: LIST
39362: PUSH
39363: LD_INT 1
39365: PUSH
39366: LD_INT 2
39368: PUSH
39369: EMPTY
39370: LIST
39371: LIST
39372: PUSH
39373: LD_INT 0
39375: PUSH
39376: LD_INT 2
39378: PUSH
39379: EMPTY
39380: LIST
39381: LIST
39382: PUSH
39383: LD_INT 1
39385: NEG
39386: PUSH
39387: LD_INT 1
39389: PUSH
39390: EMPTY
39391: LIST
39392: LIST
39393: PUSH
39394: LD_INT 1
39396: NEG
39397: PUSH
39398: LD_INT 3
39400: NEG
39401: PUSH
39402: EMPTY
39403: LIST
39404: LIST
39405: PUSH
39406: LD_INT 0
39408: PUSH
39409: LD_INT 3
39411: NEG
39412: PUSH
39413: EMPTY
39414: LIST
39415: LIST
39416: PUSH
39417: LD_INT 1
39419: PUSH
39420: LD_INT 2
39422: NEG
39423: PUSH
39424: EMPTY
39425: LIST
39426: LIST
39427: PUSH
39428: EMPTY
39429: LIST
39430: LIST
39431: LIST
39432: LIST
39433: LIST
39434: LIST
39435: LIST
39436: LIST
39437: LIST
39438: LIST
39439: LIST
39440: LIST
39441: LIST
39442: LIST
39443: LIST
39444: LIST
39445: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
39446: LD_ADDR_VAR 0 15
39450: PUSH
39451: LD_INT 0
39453: PUSH
39454: LD_INT 0
39456: PUSH
39457: EMPTY
39458: LIST
39459: LIST
39460: PUSH
39461: LD_INT 0
39463: PUSH
39464: LD_INT 1
39466: NEG
39467: PUSH
39468: EMPTY
39469: LIST
39470: LIST
39471: PUSH
39472: LD_INT 1
39474: PUSH
39475: LD_INT 0
39477: PUSH
39478: EMPTY
39479: LIST
39480: LIST
39481: PUSH
39482: LD_INT 1
39484: PUSH
39485: LD_INT 1
39487: PUSH
39488: EMPTY
39489: LIST
39490: LIST
39491: PUSH
39492: LD_INT 0
39494: PUSH
39495: LD_INT 1
39497: PUSH
39498: EMPTY
39499: LIST
39500: LIST
39501: PUSH
39502: LD_INT 1
39504: NEG
39505: PUSH
39506: LD_INT 0
39508: PUSH
39509: EMPTY
39510: LIST
39511: LIST
39512: PUSH
39513: LD_INT 1
39515: NEG
39516: PUSH
39517: LD_INT 1
39519: NEG
39520: PUSH
39521: EMPTY
39522: LIST
39523: LIST
39524: PUSH
39525: LD_INT 1
39527: PUSH
39528: LD_INT 1
39530: NEG
39531: PUSH
39532: EMPTY
39533: LIST
39534: LIST
39535: PUSH
39536: LD_INT 2
39538: PUSH
39539: LD_INT 0
39541: PUSH
39542: EMPTY
39543: LIST
39544: LIST
39545: PUSH
39546: LD_INT 2
39548: PUSH
39549: LD_INT 1
39551: PUSH
39552: EMPTY
39553: LIST
39554: LIST
39555: PUSH
39556: LD_INT 1
39558: NEG
39559: PUSH
39560: LD_INT 1
39562: PUSH
39563: EMPTY
39564: LIST
39565: LIST
39566: PUSH
39567: LD_INT 2
39569: NEG
39570: PUSH
39571: LD_INT 0
39573: PUSH
39574: EMPTY
39575: LIST
39576: LIST
39577: PUSH
39578: LD_INT 2
39580: NEG
39581: PUSH
39582: LD_INT 1
39584: NEG
39585: PUSH
39586: EMPTY
39587: LIST
39588: LIST
39589: PUSH
39590: LD_INT 2
39592: PUSH
39593: LD_INT 1
39595: NEG
39596: PUSH
39597: EMPTY
39598: LIST
39599: LIST
39600: PUSH
39601: LD_INT 3
39603: PUSH
39604: LD_INT 0
39606: PUSH
39607: EMPTY
39608: LIST
39609: LIST
39610: PUSH
39611: LD_INT 3
39613: PUSH
39614: LD_INT 1
39616: PUSH
39617: EMPTY
39618: LIST
39619: LIST
39620: PUSH
39621: EMPTY
39622: LIST
39623: LIST
39624: LIST
39625: LIST
39626: LIST
39627: LIST
39628: LIST
39629: LIST
39630: LIST
39631: LIST
39632: LIST
39633: LIST
39634: LIST
39635: LIST
39636: LIST
39637: LIST
39638: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
39639: LD_ADDR_VAR 0 16
39643: PUSH
39644: LD_INT 0
39646: PUSH
39647: LD_INT 0
39649: PUSH
39650: EMPTY
39651: LIST
39652: LIST
39653: PUSH
39654: LD_INT 0
39656: PUSH
39657: LD_INT 1
39659: NEG
39660: PUSH
39661: EMPTY
39662: LIST
39663: LIST
39664: PUSH
39665: LD_INT 1
39667: PUSH
39668: LD_INT 0
39670: PUSH
39671: EMPTY
39672: LIST
39673: LIST
39674: PUSH
39675: LD_INT 1
39677: PUSH
39678: LD_INT 1
39680: PUSH
39681: EMPTY
39682: LIST
39683: LIST
39684: PUSH
39685: LD_INT 0
39687: PUSH
39688: LD_INT 1
39690: PUSH
39691: EMPTY
39692: LIST
39693: LIST
39694: PUSH
39695: LD_INT 1
39697: NEG
39698: PUSH
39699: LD_INT 0
39701: PUSH
39702: EMPTY
39703: LIST
39704: LIST
39705: PUSH
39706: LD_INT 1
39708: NEG
39709: PUSH
39710: LD_INT 1
39712: NEG
39713: PUSH
39714: EMPTY
39715: LIST
39716: LIST
39717: PUSH
39718: LD_INT 1
39720: NEG
39721: PUSH
39722: LD_INT 2
39724: NEG
39725: PUSH
39726: EMPTY
39727: LIST
39728: LIST
39729: PUSH
39730: LD_INT 2
39732: PUSH
39733: LD_INT 1
39735: PUSH
39736: EMPTY
39737: LIST
39738: LIST
39739: PUSH
39740: LD_INT 2
39742: PUSH
39743: LD_INT 2
39745: PUSH
39746: EMPTY
39747: LIST
39748: LIST
39749: PUSH
39750: LD_INT 1
39752: PUSH
39753: LD_INT 2
39755: PUSH
39756: EMPTY
39757: LIST
39758: LIST
39759: PUSH
39760: LD_INT 2
39762: NEG
39763: PUSH
39764: LD_INT 1
39766: NEG
39767: PUSH
39768: EMPTY
39769: LIST
39770: LIST
39771: PUSH
39772: LD_INT 2
39774: NEG
39775: PUSH
39776: LD_INT 2
39778: NEG
39779: PUSH
39780: EMPTY
39781: LIST
39782: LIST
39783: PUSH
39784: LD_INT 3
39786: PUSH
39787: LD_INT 2
39789: PUSH
39790: EMPTY
39791: LIST
39792: LIST
39793: PUSH
39794: LD_INT 3
39796: PUSH
39797: LD_INT 3
39799: PUSH
39800: EMPTY
39801: LIST
39802: LIST
39803: PUSH
39804: LD_INT 2
39806: PUSH
39807: LD_INT 3
39809: PUSH
39810: EMPTY
39811: LIST
39812: LIST
39813: PUSH
39814: EMPTY
39815: LIST
39816: LIST
39817: LIST
39818: LIST
39819: LIST
39820: LIST
39821: LIST
39822: LIST
39823: LIST
39824: LIST
39825: LIST
39826: LIST
39827: LIST
39828: LIST
39829: LIST
39830: LIST
39831: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39832: LD_ADDR_VAR 0 17
39836: PUSH
39837: LD_INT 0
39839: PUSH
39840: LD_INT 0
39842: PUSH
39843: EMPTY
39844: LIST
39845: LIST
39846: PUSH
39847: LD_INT 0
39849: PUSH
39850: LD_INT 1
39852: NEG
39853: PUSH
39854: EMPTY
39855: LIST
39856: LIST
39857: PUSH
39858: LD_INT 1
39860: PUSH
39861: LD_INT 0
39863: PUSH
39864: EMPTY
39865: LIST
39866: LIST
39867: PUSH
39868: LD_INT 1
39870: PUSH
39871: LD_INT 1
39873: PUSH
39874: EMPTY
39875: LIST
39876: LIST
39877: PUSH
39878: LD_INT 0
39880: PUSH
39881: LD_INT 1
39883: PUSH
39884: EMPTY
39885: LIST
39886: LIST
39887: PUSH
39888: LD_INT 1
39890: NEG
39891: PUSH
39892: LD_INT 0
39894: PUSH
39895: EMPTY
39896: LIST
39897: LIST
39898: PUSH
39899: LD_INT 1
39901: NEG
39902: PUSH
39903: LD_INT 1
39905: NEG
39906: PUSH
39907: EMPTY
39908: LIST
39909: LIST
39910: PUSH
39911: LD_INT 1
39913: NEG
39914: PUSH
39915: LD_INT 2
39917: NEG
39918: PUSH
39919: EMPTY
39920: LIST
39921: LIST
39922: PUSH
39923: LD_INT 0
39925: PUSH
39926: LD_INT 2
39928: NEG
39929: PUSH
39930: EMPTY
39931: LIST
39932: LIST
39933: PUSH
39934: LD_INT 1
39936: PUSH
39937: LD_INT 1
39939: NEG
39940: PUSH
39941: EMPTY
39942: LIST
39943: LIST
39944: PUSH
39945: LD_INT 2
39947: PUSH
39948: LD_INT 0
39950: PUSH
39951: EMPTY
39952: LIST
39953: LIST
39954: PUSH
39955: LD_INT 2
39957: PUSH
39958: LD_INT 1
39960: PUSH
39961: EMPTY
39962: LIST
39963: LIST
39964: PUSH
39965: LD_INT 2
39967: PUSH
39968: LD_INT 2
39970: PUSH
39971: EMPTY
39972: LIST
39973: LIST
39974: PUSH
39975: LD_INT 1
39977: PUSH
39978: LD_INT 2
39980: PUSH
39981: EMPTY
39982: LIST
39983: LIST
39984: PUSH
39985: LD_INT 0
39987: PUSH
39988: LD_INT 2
39990: PUSH
39991: EMPTY
39992: LIST
39993: LIST
39994: PUSH
39995: LD_INT 1
39997: NEG
39998: PUSH
39999: LD_INT 1
40001: PUSH
40002: EMPTY
40003: LIST
40004: LIST
40005: PUSH
40006: LD_INT 2
40008: NEG
40009: PUSH
40010: LD_INT 0
40012: PUSH
40013: EMPTY
40014: LIST
40015: LIST
40016: PUSH
40017: LD_INT 2
40019: NEG
40020: PUSH
40021: LD_INT 1
40023: NEG
40024: PUSH
40025: EMPTY
40026: LIST
40027: LIST
40028: PUSH
40029: LD_INT 2
40031: NEG
40032: PUSH
40033: LD_INT 2
40035: NEG
40036: PUSH
40037: EMPTY
40038: LIST
40039: LIST
40040: PUSH
40041: EMPTY
40042: LIST
40043: LIST
40044: LIST
40045: LIST
40046: LIST
40047: LIST
40048: LIST
40049: LIST
40050: LIST
40051: LIST
40052: LIST
40053: LIST
40054: LIST
40055: LIST
40056: LIST
40057: LIST
40058: LIST
40059: LIST
40060: LIST
40061: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40062: LD_ADDR_VAR 0 18
40066: PUSH
40067: LD_INT 0
40069: PUSH
40070: LD_INT 0
40072: PUSH
40073: EMPTY
40074: LIST
40075: LIST
40076: PUSH
40077: LD_INT 0
40079: PUSH
40080: LD_INT 1
40082: NEG
40083: PUSH
40084: EMPTY
40085: LIST
40086: LIST
40087: PUSH
40088: LD_INT 1
40090: PUSH
40091: LD_INT 0
40093: PUSH
40094: EMPTY
40095: LIST
40096: LIST
40097: PUSH
40098: LD_INT 1
40100: PUSH
40101: LD_INT 1
40103: PUSH
40104: EMPTY
40105: LIST
40106: LIST
40107: PUSH
40108: LD_INT 0
40110: PUSH
40111: LD_INT 1
40113: PUSH
40114: EMPTY
40115: LIST
40116: LIST
40117: PUSH
40118: LD_INT 1
40120: NEG
40121: PUSH
40122: LD_INT 0
40124: PUSH
40125: EMPTY
40126: LIST
40127: LIST
40128: PUSH
40129: LD_INT 1
40131: NEG
40132: PUSH
40133: LD_INT 1
40135: NEG
40136: PUSH
40137: EMPTY
40138: LIST
40139: LIST
40140: PUSH
40141: LD_INT 1
40143: NEG
40144: PUSH
40145: LD_INT 2
40147: NEG
40148: PUSH
40149: EMPTY
40150: LIST
40151: LIST
40152: PUSH
40153: LD_INT 0
40155: PUSH
40156: LD_INT 2
40158: NEG
40159: PUSH
40160: EMPTY
40161: LIST
40162: LIST
40163: PUSH
40164: LD_INT 1
40166: PUSH
40167: LD_INT 1
40169: NEG
40170: PUSH
40171: EMPTY
40172: LIST
40173: LIST
40174: PUSH
40175: LD_INT 2
40177: PUSH
40178: LD_INT 0
40180: PUSH
40181: EMPTY
40182: LIST
40183: LIST
40184: PUSH
40185: LD_INT 2
40187: PUSH
40188: LD_INT 1
40190: PUSH
40191: EMPTY
40192: LIST
40193: LIST
40194: PUSH
40195: LD_INT 2
40197: PUSH
40198: LD_INT 2
40200: PUSH
40201: EMPTY
40202: LIST
40203: LIST
40204: PUSH
40205: LD_INT 1
40207: PUSH
40208: LD_INT 2
40210: PUSH
40211: EMPTY
40212: LIST
40213: LIST
40214: PUSH
40215: LD_INT 0
40217: PUSH
40218: LD_INT 2
40220: PUSH
40221: EMPTY
40222: LIST
40223: LIST
40224: PUSH
40225: LD_INT 1
40227: NEG
40228: PUSH
40229: LD_INT 1
40231: PUSH
40232: EMPTY
40233: LIST
40234: LIST
40235: PUSH
40236: LD_INT 2
40238: NEG
40239: PUSH
40240: LD_INT 0
40242: PUSH
40243: EMPTY
40244: LIST
40245: LIST
40246: PUSH
40247: LD_INT 2
40249: NEG
40250: PUSH
40251: LD_INT 1
40253: NEG
40254: PUSH
40255: EMPTY
40256: LIST
40257: LIST
40258: PUSH
40259: LD_INT 2
40261: NEG
40262: PUSH
40263: LD_INT 2
40265: NEG
40266: PUSH
40267: EMPTY
40268: LIST
40269: LIST
40270: PUSH
40271: EMPTY
40272: LIST
40273: LIST
40274: LIST
40275: LIST
40276: LIST
40277: LIST
40278: LIST
40279: LIST
40280: LIST
40281: LIST
40282: LIST
40283: LIST
40284: LIST
40285: LIST
40286: LIST
40287: LIST
40288: LIST
40289: LIST
40290: LIST
40291: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40292: LD_ADDR_VAR 0 19
40296: PUSH
40297: LD_INT 0
40299: PUSH
40300: LD_INT 0
40302: PUSH
40303: EMPTY
40304: LIST
40305: LIST
40306: PUSH
40307: LD_INT 0
40309: PUSH
40310: LD_INT 1
40312: NEG
40313: PUSH
40314: EMPTY
40315: LIST
40316: LIST
40317: PUSH
40318: LD_INT 1
40320: PUSH
40321: LD_INT 0
40323: PUSH
40324: EMPTY
40325: LIST
40326: LIST
40327: PUSH
40328: LD_INT 1
40330: PUSH
40331: LD_INT 1
40333: PUSH
40334: EMPTY
40335: LIST
40336: LIST
40337: PUSH
40338: LD_INT 0
40340: PUSH
40341: LD_INT 1
40343: PUSH
40344: EMPTY
40345: LIST
40346: LIST
40347: PUSH
40348: LD_INT 1
40350: NEG
40351: PUSH
40352: LD_INT 0
40354: PUSH
40355: EMPTY
40356: LIST
40357: LIST
40358: PUSH
40359: LD_INT 1
40361: NEG
40362: PUSH
40363: LD_INT 1
40365: NEG
40366: PUSH
40367: EMPTY
40368: LIST
40369: LIST
40370: PUSH
40371: LD_INT 1
40373: NEG
40374: PUSH
40375: LD_INT 2
40377: NEG
40378: PUSH
40379: EMPTY
40380: LIST
40381: LIST
40382: PUSH
40383: LD_INT 0
40385: PUSH
40386: LD_INT 2
40388: NEG
40389: PUSH
40390: EMPTY
40391: LIST
40392: LIST
40393: PUSH
40394: LD_INT 1
40396: PUSH
40397: LD_INT 1
40399: NEG
40400: PUSH
40401: EMPTY
40402: LIST
40403: LIST
40404: PUSH
40405: LD_INT 2
40407: PUSH
40408: LD_INT 0
40410: PUSH
40411: EMPTY
40412: LIST
40413: LIST
40414: PUSH
40415: LD_INT 2
40417: PUSH
40418: LD_INT 1
40420: PUSH
40421: EMPTY
40422: LIST
40423: LIST
40424: PUSH
40425: LD_INT 2
40427: PUSH
40428: LD_INT 2
40430: PUSH
40431: EMPTY
40432: LIST
40433: LIST
40434: PUSH
40435: LD_INT 1
40437: PUSH
40438: LD_INT 2
40440: PUSH
40441: EMPTY
40442: LIST
40443: LIST
40444: PUSH
40445: LD_INT 0
40447: PUSH
40448: LD_INT 2
40450: PUSH
40451: EMPTY
40452: LIST
40453: LIST
40454: PUSH
40455: LD_INT 1
40457: NEG
40458: PUSH
40459: LD_INT 1
40461: PUSH
40462: EMPTY
40463: LIST
40464: LIST
40465: PUSH
40466: LD_INT 2
40468: NEG
40469: PUSH
40470: LD_INT 0
40472: PUSH
40473: EMPTY
40474: LIST
40475: LIST
40476: PUSH
40477: LD_INT 2
40479: NEG
40480: PUSH
40481: LD_INT 1
40483: NEG
40484: PUSH
40485: EMPTY
40486: LIST
40487: LIST
40488: PUSH
40489: LD_INT 2
40491: NEG
40492: PUSH
40493: LD_INT 2
40495: NEG
40496: PUSH
40497: EMPTY
40498: LIST
40499: LIST
40500: PUSH
40501: EMPTY
40502: LIST
40503: LIST
40504: LIST
40505: LIST
40506: LIST
40507: LIST
40508: LIST
40509: LIST
40510: LIST
40511: LIST
40512: LIST
40513: LIST
40514: LIST
40515: LIST
40516: LIST
40517: LIST
40518: LIST
40519: LIST
40520: LIST
40521: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40522: LD_ADDR_VAR 0 20
40526: PUSH
40527: LD_INT 0
40529: PUSH
40530: LD_INT 0
40532: PUSH
40533: EMPTY
40534: LIST
40535: LIST
40536: PUSH
40537: LD_INT 0
40539: PUSH
40540: LD_INT 1
40542: NEG
40543: PUSH
40544: EMPTY
40545: LIST
40546: LIST
40547: PUSH
40548: LD_INT 1
40550: PUSH
40551: LD_INT 0
40553: PUSH
40554: EMPTY
40555: LIST
40556: LIST
40557: PUSH
40558: LD_INT 1
40560: PUSH
40561: LD_INT 1
40563: PUSH
40564: EMPTY
40565: LIST
40566: LIST
40567: PUSH
40568: LD_INT 0
40570: PUSH
40571: LD_INT 1
40573: PUSH
40574: EMPTY
40575: LIST
40576: LIST
40577: PUSH
40578: LD_INT 1
40580: NEG
40581: PUSH
40582: LD_INT 0
40584: PUSH
40585: EMPTY
40586: LIST
40587: LIST
40588: PUSH
40589: LD_INT 1
40591: NEG
40592: PUSH
40593: LD_INT 1
40595: NEG
40596: PUSH
40597: EMPTY
40598: LIST
40599: LIST
40600: PUSH
40601: LD_INT 1
40603: NEG
40604: PUSH
40605: LD_INT 2
40607: NEG
40608: PUSH
40609: EMPTY
40610: LIST
40611: LIST
40612: PUSH
40613: LD_INT 0
40615: PUSH
40616: LD_INT 2
40618: NEG
40619: PUSH
40620: EMPTY
40621: LIST
40622: LIST
40623: PUSH
40624: LD_INT 1
40626: PUSH
40627: LD_INT 1
40629: NEG
40630: PUSH
40631: EMPTY
40632: LIST
40633: LIST
40634: PUSH
40635: LD_INT 2
40637: PUSH
40638: LD_INT 0
40640: PUSH
40641: EMPTY
40642: LIST
40643: LIST
40644: PUSH
40645: LD_INT 2
40647: PUSH
40648: LD_INT 1
40650: PUSH
40651: EMPTY
40652: LIST
40653: LIST
40654: PUSH
40655: LD_INT 2
40657: PUSH
40658: LD_INT 2
40660: PUSH
40661: EMPTY
40662: LIST
40663: LIST
40664: PUSH
40665: LD_INT 1
40667: PUSH
40668: LD_INT 2
40670: PUSH
40671: EMPTY
40672: LIST
40673: LIST
40674: PUSH
40675: LD_INT 0
40677: PUSH
40678: LD_INT 2
40680: PUSH
40681: EMPTY
40682: LIST
40683: LIST
40684: PUSH
40685: LD_INT 1
40687: NEG
40688: PUSH
40689: LD_INT 1
40691: PUSH
40692: EMPTY
40693: LIST
40694: LIST
40695: PUSH
40696: LD_INT 2
40698: NEG
40699: PUSH
40700: LD_INT 0
40702: PUSH
40703: EMPTY
40704: LIST
40705: LIST
40706: PUSH
40707: LD_INT 2
40709: NEG
40710: PUSH
40711: LD_INT 1
40713: NEG
40714: PUSH
40715: EMPTY
40716: LIST
40717: LIST
40718: PUSH
40719: LD_INT 2
40721: NEG
40722: PUSH
40723: LD_INT 2
40725: NEG
40726: PUSH
40727: EMPTY
40728: LIST
40729: LIST
40730: PUSH
40731: EMPTY
40732: LIST
40733: LIST
40734: LIST
40735: LIST
40736: LIST
40737: LIST
40738: LIST
40739: LIST
40740: LIST
40741: LIST
40742: LIST
40743: LIST
40744: LIST
40745: LIST
40746: LIST
40747: LIST
40748: LIST
40749: LIST
40750: LIST
40751: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40752: LD_ADDR_VAR 0 21
40756: PUSH
40757: LD_INT 0
40759: PUSH
40760: LD_INT 0
40762: PUSH
40763: EMPTY
40764: LIST
40765: LIST
40766: PUSH
40767: LD_INT 0
40769: PUSH
40770: LD_INT 1
40772: NEG
40773: PUSH
40774: EMPTY
40775: LIST
40776: LIST
40777: PUSH
40778: LD_INT 1
40780: PUSH
40781: LD_INT 0
40783: PUSH
40784: EMPTY
40785: LIST
40786: LIST
40787: PUSH
40788: LD_INT 1
40790: PUSH
40791: LD_INT 1
40793: PUSH
40794: EMPTY
40795: LIST
40796: LIST
40797: PUSH
40798: LD_INT 0
40800: PUSH
40801: LD_INT 1
40803: PUSH
40804: EMPTY
40805: LIST
40806: LIST
40807: PUSH
40808: LD_INT 1
40810: NEG
40811: PUSH
40812: LD_INT 0
40814: PUSH
40815: EMPTY
40816: LIST
40817: LIST
40818: PUSH
40819: LD_INT 1
40821: NEG
40822: PUSH
40823: LD_INT 1
40825: NEG
40826: PUSH
40827: EMPTY
40828: LIST
40829: LIST
40830: PUSH
40831: LD_INT 1
40833: NEG
40834: PUSH
40835: LD_INT 2
40837: NEG
40838: PUSH
40839: EMPTY
40840: LIST
40841: LIST
40842: PUSH
40843: LD_INT 0
40845: PUSH
40846: LD_INT 2
40848: NEG
40849: PUSH
40850: EMPTY
40851: LIST
40852: LIST
40853: PUSH
40854: LD_INT 1
40856: PUSH
40857: LD_INT 1
40859: NEG
40860: PUSH
40861: EMPTY
40862: LIST
40863: LIST
40864: PUSH
40865: LD_INT 2
40867: PUSH
40868: LD_INT 0
40870: PUSH
40871: EMPTY
40872: LIST
40873: LIST
40874: PUSH
40875: LD_INT 2
40877: PUSH
40878: LD_INT 1
40880: PUSH
40881: EMPTY
40882: LIST
40883: LIST
40884: PUSH
40885: LD_INT 2
40887: PUSH
40888: LD_INT 2
40890: PUSH
40891: EMPTY
40892: LIST
40893: LIST
40894: PUSH
40895: LD_INT 1
40897: PUSH
40898: LD_INT 2
40900: PUSH
40901: EMPTY
40902: LIST
40903: LIST
40904: PUSH
40905: LD_INT 0
40907: PUSH
40908: LD_INT 2
40910: PUSH
40911: EMPTY
40912: LIST
40913: LIST
40914: PUSH
40915: LD_INT 1
40917: NEG
40918: PUSH
40919: LD_INT 1
40921: PUSH
40922: EMPTY
40923: LIST
40924: LIST
40925: PUSH
40926: LD_INT 2
40928: NEG
40929: PUSH
40930: LD_INT 0
40932: PUSH
40933: EMPTY
40934: LIST
40935: LIST
40936: PUSH
40937: LD_INT 2
40939: NEG
40940: PUSH
40941: LD_INT 1
40943: NEG
40944: PUSH
40945: EMPTY
40946: LIST
40947: LIST
40948: PUSH
40949: LD_INT 2
40951: NEG
40952: PUSH
40953: LD_INT 2
40955: NEG
40956: PUSH
40957: EMPTY
40958: LIST
40959: LIST
40960: PUSH
40961: EMPTY
40962: LIST
40963: LIST
40964: LIST
40965: LIST
40966: LIST
40967: LIST
40968: LIST
40969: LIST
40970: LIST
40971: LIST
40972: LIST
40973: LIST
40974: LIST
40975: LIST
40976: LIST
40977: LIST
40978: LIST
40979: LIST
40980: LIST
40981: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40982: LD_ADDR_VAR 0 22
40986: PUSH
40987: LD_INT 0
40989: PUSH
40990: LD_INT 0
40992: PUSH
40993: EMPTY
40994: LIST
40995: LIST
40996: PUSH
40997: LD_INT 0
40999: PUSH
41000: LD_INT 1
41002: NEG
41003: PUSH
41004: EMPTY
41005: LIST
41006: LIST
41007: PUSH
41008: LD_INT 1
41010: PUSH
41011: LD_INT 0
41013: PUSH
41014: EMPTY
41015: LIST
41016: LIST
41017: PUSH
41018: LD_INT 1
41020: PUSH
41021: LD_INT 1
41023: PUSH
41024: EMPTY
41025: LIST
41026: LIST
41027: PUSH
41028: LD_INT 0
41030: PUSH
41031: LD_INT 1
41033: PUSH
41034: EMPTY
41035: LIST
41036: LIST
41037: PUSH
41038: LD_INT 1
41040: NEG
41041: PUSH
41042: LD_INT 0
41044: PUSH
41045: EMPTY
41046: LIST
41047: LIST
41048: PUSH
41049: LD_INT 1
41051: NEG
41052: PUSH
41053: LD_INT 1
41055: NEG
41056: PUSH
41057: EMPTY
41058: LIST
41059: LIST
41060: PUSH
41061: LD_INT 1
41063: NEG
41064: PUSH
41065: LD_INT 2
41067: NEG
41068: PUSH
41069: EMPTY
41070: LIST
41071: LIST
41072: PUSH
41073: LD_INT 0
41075: PUSH
41076: LD_INT 2
41078: NEG
41079: PUSH
41080: EMPTY
41081: LIST
41082: LIST
41083: PUSH
41084: LD_INT 1
41086: PUSH
41087: LD_INT 1
41089: NEG
41090: PUSH
41091: EMPTY
41092: LIST
41093: LIST
41094: PUSH
41095: LD_INT 2
41097: PUSH
41098: LD_INT 0
41100: PUSH
41101: EMPTY
41102: LIST
41103: LIST
41104: PUSH
41105: LD_INT 2
41107: PUSH
41108: LD_INT 1
41110: PUSH
41111: EMPTY
41112: LIST
41113: LIST
41114: PUSH
41115: LD_INT 2
41117: PUSH
41118: LD_INT 2
41120: PUSH
41121: EMPTY
41122: LIST
41123: LIST
41124: PUSH
41125: LD_INT 1
41127: PUSH
41128: LD_INT 2
41130: PUSH
41131: EMPTY
41132: LIST
41133: LIST
41134: PUSH
41135: LD_INT 0
41137: PUSH
41138: LD_INT 2
41140: PUSH
41141: EMPTY
41142: LIST
41143: LIST
41144: PUSH
41145: LD_INT 1
41147: NEG
41148: PUSH
41149: LD_INT 1
41151: PUSH
41152: EMPTY
41153: LIST
41154: LIST
41155: PUSH
41156: LD_INT 2
41158: NEG
41159: PUSH
41160: LD_INT 0
41162: PUSH
41163: EMPTY
41164: LIST
41165: LIST
41166: PUSH
41167: LD_INT 2
41169: NEG
41170: PUSH
41171: LD_INT 1
41173: NEG
41174: PUSH
41175: EMPTY
41176: LIST
41177: LIST
41178: PUSH
41179: LD_INT 2
41181: NEG
41182: PUSH
41183: LD_INT 2
41185: NEG
41186: PUSH
41187: EMPTY
41188: LIST
41189: LIST
41190: PUSH
41191: EMPTY
41192: LIST
41193: LIST
41194: LIST
41195: LIST
41196: LIST
41197: LIST
41198: LIST
41199: LIST
41200: LIST
41201: LIST
41202: LIST
41203: LIST
41204: LIST
41205: LIST
41206: LIST
41207: LIST
41208: LIST
41209: LIST
41210: LIST
41211: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
41212: LD_ADDR_VAR 0 23
41216: PUSH
41217: LD_INT 0
41219: PUSH
41220: LD_INT 0
41222: PUSH
41223: EMPTY
41224: LIST
41225: LIST
41226: PUSH
41227: LD_INT 0
41229: PUSH
41230: LD_INT 1
41232: NEG
41233: PUSH
41234: EMPTY
41235: LIST
41236: LIST
41237: PUSH
41238: LD_INT 1
41240: PUSH
41241: LD_INT 0
41243: PUSH
41244: EMPTY
41245: LIST
41246: LIST
41247: PUSH
41248: LD_INT 1
41250: PUSH
41251: LD_INT 1
41253: PUSH
41254: EMPTY
41255: LIST
41256: LIST
41257: PUSH
41258: LD_INT 0
41260: PUSH
41261: LD_INT 1
41263: PUSH
41264: EMPTY
41265: LIST
41266: LIST
41267: PUSH
41268: LD_INT 1
41270: NEG
41271: PUSH
41272: LD_INT 0
41274: PUSH
41275: EMPTY
41276: LIST
41277: LIST
41278: PUSH
41279: LD_INT 1
41281: NEG
41282: PUSH
41283: LD_INT 1
41285: NEG
41286: PUSH
41287: EMPTY
41288: LIST
41289: LIST
41290: PUSH
41291: LD_INT 1
41293: NEG
41294: PUSH
41295: LD_INT 2
41297: NEG
41298: PUSH
41299: EMPTY
41300: LIST
41301: LIST
41302: PUSH
41303: LD_INT 0
41305: PUSH
41306: LD_INT 2
41308: NEG
41309: PUSH
41310: EMPTY
41311: LIST
41312: LIST
41313: PUSH
41314: LD_INT 1
41316: PUSH
41317: LD_INT 1
41319: NEG
41320: PUSH
41321: EMPTY
41322: LIST
41323: LIST
41324: PUSH
41325: LD_INT 2
41327: PUSH
41328: LD_INT 0
41330: PUSH
41331: EMPTY
41332: LIST
41333: LIST
41334: PUSH
41335: LD_INT 2
41337: PUSH
41338: LD_INT 1
41340: PUSH
41341: EMPTY
41342: LIST
41343: LIST
41344: PUSH
41345: LD_INT 2
41347: PUSH
41348: LD_INT 2
41350: PUSH
41351: EMPTY
41352: LIST
41353: LIST
41354: PUSH
41355: LD_INT 1
41357: PUSH
41358: LD_INT 2
41360: PUSH
41361: EMPTY
41362: LIST
41363: LIST
41364: PUSH
41365: LD_INT 0
41367: PUSH
41368: LD_INT 2
41370: PUSH
41371: EMPTY
41372: LIST
41373: LIST
41374: PUSH
41375: LD_INT 1
41377: NEG
41378: PUSH
41379: LD_INT 1
41381: PUSH
41382: EMPTY
41383: LIST
41384: LIST
41385: PUSH
41386: LD_INT 2
41388: NEG
41389: PUSH
41390: LD_INT 0
41392: PUSH
41393: EMPTY
41394: LIST
41395: LIST
41396: PUSH
41397: LD_INT 2
41399: NEG
41400: PUSH
41401: LD_INT 1
41403: NEG
41404: PUSH
41405: EMPTY
41406: LIST
41407: LIST
41408: PUSH
41409: LD_INT 2
41411: NEG
41412: PUSH
41413: LD_INT 2
41415: NEG
41416: PUSH
41417: EMPTY
41418: LIST
41419: LIST
41420: PUSH
41421: LD_INT 2
41423: NEG
41424: PUSH
41425: LD_INT 3
41427: NEG
41428: PUSH
41429: EMPTY
41430: LIST
41431: LIST
41432: PUSH
41433: LD_INT 1
41435: NEG
41436: PUSH
41437: LD_INT 3
41439: NEG
41440: PUSH
41441: EMPTY
41442: LIST
41443: LIST
41444: PUSH
41445: LD_INT 1
41447: PUSH
41448: LD_INT 2
41450: NEG
41451: PUSH
41452: EMPTY
41453: LIST
41454: LIST
41455: PUSH
41456: LD_INT 2
41458: PUSH
41459: LD_INT 1
41461: NEG
41462: PUSH
41463: EMPTY
41464: LIST
41465: LIST
41466: PUSH
41467: EMPTY
41468: LIST
41469: LIST
41470: LIST
41471: LIST
41472: LIST
41473: LIST
41474: LIST
41475: LIST
41476: LIST
41477: LIST
41478: LIST
41479: LIST
41480: LIST
41481: LIST
41482: LIST
41483: LIST
41484: LIST
41485: LIST
41486: LIST
41487: LIST
41488: LIST
41489: LIST
41490: LIST
41491: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
41492: LD_ADDR_VAR 0 24
41496: PUSH
41497: LD_INT 0
41499: PUSH
41500: LD_INT 0
41502: PUSH
41503: EMPTY
41504: LIST
41505: LIST
41506: PUSH
41507: LD_INT 0
41509: PUSH
41510: LD_INT 1
41512: NEG
41513: PUSH
41514: EMPTY
41515: LIST
41516: LIST
41517: PUSH
41518: LD_INT 1
41520: PUSH
41521: LD_INT 0
41523: PUSH
41524: EMPTY
41525: LIST
41526: LIST
41527: PUSH
41528: LD_INT 1
41530: PUSH
41531: LD_INT 1
41533: PUSH
41534: EMPTY
41535: LIST
41536: LIST
41537: PUSH
41538: LD_INT 0
41540: PUSH
41541: LD_INT 1
41543: PUSH
41544: EMPTY
41545: LIST
41546: LIST
41547: PUSH
41548: LD_INT 1
41550: NEG
41551: PUSH
41552: LD_INT 0
41554: PUSH
41555: EMPTY
41556: LIST
41557: LIST
41558: PUSH
41559: LD_INT 1
41561: NEG
41562: PUSH
41563: LD_INT 1
41565: NEG
41566: PUSH
41567: EMPTY
41568: LIST
41569: LIST
41570: PUSH
41571: LD_INT 1
41573: NEG
41574: PUSH
41575: LD_INT 2
41577: NEG
41578: PUSH
41579: EMPTY
41580: LIST
41581: LIST
41582: PUSH
41583: LD_INT 0
41585: PUSH
41586: LD_INT 2
41588: NEG
41589: PUSH
41590: EMPTY
41591: LIST
41592: LIST
41593: PUSH
41594: LD_INT 1
41596: PUSH
41597: LD_INT 1
41599: NEG
41600: PUSH
41601: EMPTY
41602: LIST
41603: LIST
41604: PUSH
41605: LD_INT 2
41607: PUSH
41608: LD_INT 0
41610: PUSH
41611: EMPTY
41612: LIST
41613: LIST
41614: PUSH
41615: LD_INT 2
41617: PUSH
41618: LD_INT 1
41620: PUSH
41621: EMPTY
41622: LIST
41623: LIST
41624: PUSH
41625: LD_INT 2
41627: PUSH
41628: LD_INT 2
41630: PUSH
41631: EMPTY
41632: LIST
41633: LIST
41634: PUSH
41635: LD_INT 1
41637: PUSH
41638: LD_INT 2
41640: PUSH
41641: EMPTY
41642: LIST
41643: LIST
41644: PUSH
41645: LD_INT 0
41647: PUSH
41648: LD_INT 2
41650: PUSH
41651: EMPTY
41652: LIST
41653: LIST
41654: PUSH
41655: LD_INT 1
41657: NEG
41658: PUSH
41659: LD_INT 1
41661: PUSH
41662: EMPTY
41663: LIST
41664: LIST
41665: PUSH
41666: LD_INT 2
41668: NEG
41669: PUSH
41670: LD_INT 0
41672: PUSH
41673: EMPTY
41674: LIST
41675: LIST
41676: PUSH
41677: LD_INT 2
41679: NEG
41680: PUSH
41681: LD_INT 1
41683: NEG
41684: PUSH
41685: EMPTY
41686: LIST
41687: LIST
41688: PUSH
41689: LD_INT 2
41691: NEG
41692: PUSH
41693: LD_INT 2
41695: NEG
41696: PUSH
41697: EMPTY
41698: LIST
41699: LIST
41700: PUSH
41701: LD_INT 1
41703: PUSH
41704: LD_INT 2
41706: NEG
41707: PUSH
41708: EMPTY
41709: LIST
41710: LIST
41711: PUSH
41712: LD_INT 2
41714: PUSH
41715: LD_INT 1
41717: NEG
41718: PUSH
41719: EMPTY
41720: LIST
41721: LIST
41722: PUSH
41723: LD_INT 3
41725: PUSH
41726: LD_INT 1
41728: PUSH
41729: EMPTY
41730: LIST
41731: LIST
41732: PUSH
41733: LD_INT 3
41735: PUSH
41736: LD_INT 2
41738: PUSH
41739: EMPTY
41740: LIST
41741: LIST
41742: PUSH
41743: EMPTY
41744: LIST
41745: LIST
41746: LIST
41747: LIST
41748: LIST
41749: LIST
41750: LIST
41751: LIST
41752: LIST
41753: LIST
41754: LIST
41755: LIST
41756: LIST
41757: LIST
41758: LIST
41759: LIST
41760: LIST
41761: LIST
41762: LIST
41763: LIST
41764: LIST
41765: LIST
41766: LIST
41767: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
41768: LD_ADDR_VAR 0 25
41772: PUSH
41773: LD_INT 0
41775: PUSH
41776: LD_INT 0
41778: PUSH
41779: EMPTY
41780: LIST
41781: LIST
41782: PUSH
41783: LD_INT 0
41785: PUSH
41786: LD_INT 1
41788: NEG
41789: PUSH
41790: EMPTY
41791: LIST
41792: LIST
41793: PUSH
41794: LD_INT 1
41796: PUSH
41797: LD_INT 0
41799: PUSH
41800: EMPTY
41801: LIST
41802: LIST
41803: PUSH
41804: LD_INT 1
41806: PUSH
41807: LD_INT 1
41809: PUSH
41810: EMPTY
41811: LIST
41812: LIST
41813: PUSH
41814: LD_INT 0
41816: PUSH
41817: LD_INT 1
41819: PUSH
41820: EMPTY
41821: LIST
41822: LIST
41823: PUSH
41824: LD_INT 1
41826: NEG
41827: PUSH
41828: LD_INT 0
41830: PUSH
41831: EMPTY
41832: LIST
41833: LIST
41834: PUSH
41835: LD_INT 1
41837: NEG
41838: PUSH
41839: LD_INT 1
41841: NEG
41842: PUSH
41843: EMPTY
41844: LIST
41845: LIST
41846: PUSH
41847: LD_INT 1
41849: NEG
41850: PUSH
41851: LD_INT 2
41853: NEG
41854: PUSH
41855: EMPTY
41856: LIST
41857: LIST
41858: PUSH
41859: LD_INT 0
41861: PUSH
41862: LD_INT 2
41864: NEG
41865: PUSH
41866: EMPTY
41867: LIST
41868: LIST
41869: PUSH
41870: LD_INT 1
41872: PUSH
41873: LD_INT 1
41875: NEG
41876: PUSH
41877: EMPTY
41878: LIST
41879: LIST
41880: PUSH
41881: LD_INT 2
41883: PUSH
41884: LD_INT 0
41886: PUSH
41887: EMPTY
41888: LIST
41889: LIST
41890: PUSH
41891: LD_INT 2
41893: PUSH
41894: LD_INT 1
41896: PUSH
41897: EMPTY
41898: LIST
41899: LIST
41900: PUSH
41901: LD_INT 2
41903: PUSH
41904: LD_INT 2
41906: PUSH
41907: EMPTY
41908: LIST
41909: LIST
41910: PUSH
41911: LD_INT 1
41913: PUSH
41914: LD_INT 2
41916: PUSH
41917: EMPTY
41918: LIST
41919: LIST
41920: PUSH
41921: LD_INT 0
41923: PUSH
41924: LD_INT 2
41926: PUSH
41927: EMPTY
41928: LIST
41929: LIST
41930: PUSH
41931: LD_INT 1
41933: NEG
41934: PUSH
41935: LD_INT 1
41937: PUSH
41938: EMPTY
41939: LIST
41940: LIST
41941: PUSH
41942: LD_INT 2
41944: NEG
41945: PUSH
41946: LD_INT 0
41948: PUSH
41949: EMPTY
41950: LIST
41951: LIST
41952: PUSH
41953: LD_INT 2
41955: NEG
41956: PUSH
41957: LD_INT 1
41959: NEG
41960: PUSH
41961: EMPTY
41962: LIST
41963: LIST
41964: PUSH
41965: LD_INT 2
41967: NEG
41968: PUSH
41969: LD_INT 2
41971: NEG
41972: PUSH
41973: EMPTY
41974: LIST
41975: LIST
41976: PUSH
41977: LD_INT 3
41979: PUSH
41980: LD_INT 1
41982: PUSH
41983: EMPTY
41984: LIST
41985: LIST
41986: PUSH
41987: LD_INT 3
41989: PUSH
41990: LD_INT 2
41992: PUSH
41993: EMPTY
41994: LIST
41995: LIST
41996: PUSH
41997: LD_INT 2
41999: PUSH
42000: LD_INT 3
42002: PUSH
42003: EMPTY
42004: LIST
42005: LIST
42006: PUSH
42007: LD_INT 1
42009: PUSH
42010: LD_INT 3
42012: PUSH
42013: EMPTY
42014: LIST
42015: LIST
42016: PUSH
42017: EMPTY
42018: LIST
42019: LIST
42020: LIST
42021: LIST
42022: LIST
42023: LIST
42024: LIST
42025: LIST
42026: LIST
42027: LIST
42028: LIST
42029: LIST
42030: LIST
42031: LIST
42032: LIST
42033: LIST
42034: LIST
42035: LIST
42036: LIST
42037: LIST
42038: LIST
42039: LIST
42040: LIST
42041: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
42042: LD_ADDR_VAR 0 26
42046: PUSH
42047: LD_INT 0
42049: PUSH
42050: LD_INT 0
42052: PUSH
42053: EMPTY
42054: LIST
42055: LIST
42056: PUSH
42057: LD_INT 0
42059: PUSH
42060: LD_INT 1
42062: NEG
42063: PUSH
42064: EMPTY
42065: LIST
42066: LIST
42067: PUSH
42068: LD_INT 1
42070: PUSH
42071: LD_INT 0
42073: PUSH
42074: EMPTY
42075: LIST
42076: LIST
42077: PUSH
42078: LD_INT 1
42080: PUSH
42081: LD_INT 1
42083: PUSH
42084: EMPTY
42085: LIST
42086: LIST
42087: PUSH
42088: LD_INT 0
42090: PUSH
42091: LD_INT 1
42093: PUSH
42094: EMPTY
42095: LIST
42096: LIST
42097: PUSH
42098: LD_INT 1
42100: NEG
42101: PUSH
42102: LD_INT 0
42104: PUSH
42105: EMPTY
42106: LIST
42107: LIST
42108: PUSH
42109: LD_INT 1
42111: NEG
42112: PUSH
42113: LD_INT 1
42115: NEG
42116: PUSH
42117: EMPTY
42118: LIST
42119: LIST
42120: PUSH
42121: LD_INT 1
42123: NEG
42124: PUSH
42125: LD_INT 2
42127: NEG
42128: PUSH
42129: EMPTY
42130: LIST
42131: LIST
42132: PUSH
42133: LD_INT 0
42135: PUSH
42136: LD_INT 2
42138: NEG
42139: PUSH
42140: EMPTY
42141: LIST
42142: LIST
42143: PUSH
42144: LD_INT 1
42146: PUSH
42147: LD_INT 1
42149: NEG
42150: PUSH
42151: EMPTY
42152: LIST
42153: LIST
42154: PUSH
42155: LD_INT 2
42157: PUSH
42158: LD_INT 0
42160: PUSH
42161: EMPTY
42162: LIST
42163: LIST
42164: PUSH
42165: LD_INT 2
42167: PUSH
42168: LD_INT 1
42170: PUSH
42171: EMPTY
42172: LIST
42173: LIST
42174: PUSH
42175: LD_INT 2
42177: PUSH
42178: LD_INT 2
42180: PUSH
42181: EMPTY
42182: LIST
42183: LIST
42184: PUSH
42185: LD_INT 1
42187: PUSH
42188: LD_INT 2
42190: PUSH
42191: EMPTY
42192: LIST
42193: LIST
42194: PUSH
42195: LD_INT 0
42197: PUSH
42198: LD_INT 2
42200: PUSH
42201: EMPTY
42202: LIST
42203: LIST
42204: PUSH
42205: LD_INT 1
42207: NEG
42208: PUSH
42209: LD_INT 1
42211: PUSH
42212: EMPTY
42213: LIST
42214: LIST
42215: PUSH
42216: LD_INT 2
42218: NEG
42219: PUSH
42220: LD_INT 0
42222: PUSH
42223: EMPTY
42224: LIST
42225: LIST
42226: PUSH
42227: LD_INT 2
42229: NEG
42230: PUSH
42231: LD_INT 1
42233: NEG
42234: PUSH
42235: EMPTY
42236: LIST
42237: LIST
42238: PUSH
42239: LD_INT 2
42241: NEG
42242: PUSH
42243: LD_INT 2
42245: NEG
42246: PUSH
42247: EMPTY
42248: LIST
42249: LIST
42250: PUSH
42251: LD_INT 2
42253: PUSH
42254: LD_INT 3
42256: PUSH
42257: EMPTY
42258: LIST
42259: LIST
42260: PUSH
42261: LD_INT 1
42263: PUSH
42264: LD_INT 3
42266: PUSH
42267: EMPTY
42268: LIST
42269: LIST
42270: PUSH
42271: LD_INT 1
42273: NEG
42274: PUSH
42275: LD_INT 2
42277: PUSH
42278: EMPTY
42279: LIST
42280: LIST
42281: PUSH
42282: LD_INT 2
42284: NEG
42285: PUSH
42286: LD_INT 1
42288: PUSH
42289: EMPTY
42290: LIST
42291: LIST
42292: PUSH
42293: EMPTY
42294: LIST
42295: LIST
42296: LIST
42297: LIST
42298: LIST
42299: LIST
42300: LIST
42301: LIST
42302: LIST
42303: LIST
42304: LIST
42305: LIST
42306: LIST
42307: LIST
42308: LIST
42309: LIST
42310: LIST
42311: LIST
42312: LIST
42313: LIST
42314: LIST
42315: LIST
42316: LIST
42317: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
42318: LD_ADDR_VAR 0 27
42322: PUSH
42323: LD_INT 0
42325: PUSH
42326: LD_INT 0
42328: PUSH
42329: EMPTY
42330: LIST
42331: LIST
42332: PUSH
42333: LD_INT 0
42335: PUSH
42336: LD_INT 1
42338: NEG
42339: PUSH
42340: EMPTY
42341: LIST
42342: LIST
42343: PUSH
42344: LD_INT 1
42346: PUSH
42347: LD_INT 0
42349: PUSH
42350: EMPTY
42351: LIST
42352: LIST
42353: PUSH
42354: LD_INT 1
42356: PUSH
42357: LD_INT 1
42359: PUSH
42360: EMPTY
42361: LIST
42362: LIST
42363: PUSH
42364: LD_INT 0
42366: PUSH
42367: LD_INT 1
42369: PUSH
42370: EMPTY
42371: LIST
42372: LIST
42373: PUSH
42374: LD_INT 1
42376: NEG
42377: PUSH
42378: LD_INT 0
42380: PUSH
42381: EMPTY
42382: LIST
42383: LIST
42384: PUSH
42385: LD_INT 1
42387: NEG
42388: PUSH
42389: LD_INT 1
42391: NEG
42392: PUSH
42393: EMPTY
42394: LIST
42395: LIST
42396: PUSH
42397: LD_INT 1
42399: NEG
42400: PUSH
42401: LD_INT 2
42403: NEG
42404: PUSH
42405: EMPTY
42406: LIST
42407: LIST
42408: PUSH
42409: LD_INT 0
42411: PUSH
42412: LD_INT 2
42414: NEG
42415: PUSH
42416: EMPTY
42417: LIST
42418: LIST
42419: PUSH
42420: LD_INT 1
42422: PUSH
42423: LD_INT 1
42425: NEG
42426: PUSH
42427: EMPTY
42428: LIST
42429: LIST
42430: PUSH
42431: LD_INT 2
42433: PUSH
42434: LD_INT 0
42436: PUSH
42437: EMPTY
42438: LIST
42439: LIST
42440: PUSH
42441: LD_INT 2
42443: PUSH
42444: LD_INT 1
42446: PUSH
42447: EMPTY
42448: LIST
42449: LIST
42450: PUSH
42451: LD_INT 2
42453: PUSH
42454: LD_INT 2
42456: PUSH
42457: EMPTY
42458: LIST
42459: LIST
42460: PUSH
42461: LD_INT 1
42463: PUSH
42464: LD_INT 2
42466: PUSH
42467: EMPTY
42468: LIST
42469: LIST
42470: PUSH
42471: LD_INT 0
42473: PUSH
42474: LD_INT 2
42476: PUSH
42477: EMPTY
42478: LIST
42479: LIST
42480: PUSH
42481: LD_INT 1
42483: NEG
42484: PUSH
42485: LD_INT 1
42487: PUSH
42488: EMPTY
42489: LIST
42490: LIST
42491: PUSH
42492: LD_INT 2
42494: NEG
42495: PUSH
42496: LD_INT 0
42498: PUSH
42499: EMPTY
42500: LIST
42501: LIST
42502: PUSH
42503: LD_INT 2
42505: NEG
42506: PUSH
42507: LD_INT 1
42509: NEG
42510: PUSH
42511: EMPTY
42512: LIST
42513: LIST
42514: PUSH
42515: LD_INT 2
42517: NEG
42518: PUSH
42519: LD_INT 2
42521: NEG
42522: PUSH
42523: EMPTY
42524: LIST
42525: LIST
42526: PUSH
42527: LD_INT 1
42529: NEG
42530: PUSH
42531: LD_INT 2
42533: PUSH
42534: EMPTY
42535: LIST
42536: LIST
42537: PUSH
42538: LD_INT 2
42540: NEG
42541: PUSH
42542: LD_INT 1
42544: PUSH
42545: EMPTY
42546: LIST
42547: LIST
42548: PUSH
42549: LD_INT 3
42551: NEG
42552: PUSH
42553: LD_INT 1
42555: NEG
42556: PUSH
42557: EMPTY
42558: LIST
42559: LIST
42560: PUSH
42561: LD_INT 3
42563: NEG
42564: PUSH
42565: LD_INT 2
42567: NEG
42568: PUSH
42569: EMPTY
42570: LIST
42571: LIST
42572: PUSH
42573: EMPTY
42574: LIST
42575: LIST
42576: LIST
42577: LIST
42578: LIST
42579: LIST
42580: LIST
42581: LIST
42582: LIST
42583: LIST
42584: LIST
42585: LIST
42586: LIST
42587: LIST
42588: LIST
42589: LIST
42590: LIST
42591: LIST
42592: LIST
42593: LIST
42594: LIST
42595: LIST
42596: LIST
42597: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
42598: LD_ADDR_VAR 0 28
42602: PUSH
42603: LD_INT 0
42605: PUSH
42606: LD_INT 0
42608: PUSH
42609: EMPTY
42610: LIST
42611: LIST
42612: PUSH
42613: LD_INT 0
42615: PUSH
42616: LD_INT 1
42618: NEG
42619: PUSH
42620: EMPTY
42621: LIST
42622: LIST
42623: PUSH
42624: LD_INT 1
42626: PUSH
42627: LD_INT 0
42629: PUSH
42630: EMPTY
42631: LIST
42632: LIST
42633: PUSH
42634: LD_INT 1
42636: PUSH
42637: LD_INT 1
42639: PUSH
42640: EMPTY
42641: LIST
42642: LIST
42643: PUSH
42644: LD_INT 0
42646: PUSH
42647: LD_INT 1
42649: PUSH
42650: EMPTY
42651: LIST
42652: LIST
42653: PUSH
42654: LD_INT 1
42656: NEG
42657: PUSH
42658: LD_INT 0
42660: PUSH
42661: EMPTY
42662: LIST
42663: LIST
42664: PUSH
42665: LD_INT 1
42667: NEG
42668: PUSH
42669: LD_INT 1
42671: NEG
42672: PUSH
42673: EMPTY
42674: LIST
42675: LIST
42676: PUSH
42677: LD_INT 1
42679: NEG
42680: PUSH
42681: LD_INT 2
42683: NEG
42684: PUSH
42685: EMPTY
42686: LIST
42687: LIST
42688: PUSH
42689: LD_INT 0
42691: PUSH
42692: LD_INT 2
42694: NEG
42695: PUSH
42696: EMPTY
42697: LIST
42698: LIST
42699: PUSH
42700: LD_INT 1
42702: PUSH
42703: LD_INT 1
42705: NEG
42706: PUSH
42707: EMPTY
42708: LIST
42709: LIST
42710: PUSH
42711: LD_INT 2
42713: PUSH
42714: LD_INT 0
42716: PUSH
42717: EMPTY
42718: LIST
42719: LIST
42720: PUSH
42721: LD_INT 2
42723: PUSH
42724: LD_INT 1
42726: PUSH
42727: EMPTY
42728: LIST
42729: LIST
42730: PUSH
42731: LD_INT 2
42733: PUSH
42734: LD_INT 2
42736: PUSH
42737: EMPTY
42738: LIST
42739: LIST
42740: PUSH
42741: LD_INT 1
42743: PUSH
42744: LD_INT 2
42746: PUSH
42747: EMPTY
42748: LIST
42749: LIST
42750: PUSH
42751: LD_INT 0
42753: PUSH
42754: LD_INT 2
42756: PUSH
42757: EMPTY
42758: LIST
42759: LIST
42760: PUSH
42761: LD_INT 1
42763: NEG
42764: PUSH
42765: LD_INT 1
42767: PUSH
42768: EMPTY
42769: LIST
42770: LIST
42771: PUSH
42772: LD_INT 2
42774: NEG
42775: PUSH
42776: LD_INT 0
42778: PUSH
42779: EMPTY
42780: LIST
42781: LIST
42782: PUSH
42783: LD_INT 2
42785: NEG
42786: PUSH
42787: LD_INT 1
42789: NEG
42790: PUSH
42791: EMPTY
42792: LIST
42793: LIST
42794: PUSH
42795: LD_INT 2
42797: NEG
42798: PUSH
42799: LD_INT 2
42801: NEG
42802: PUSH
42803: EMPTY
42804: LIST
42805: LIST
42806: PUSH
42807: LD_INT 2
42809: NEG
42810: PUSH
42811: LD_INT 3
42813: NEG
42814: PUSH
42815: EMPTY
42816: LIST
42817: LIST
42818: PUSH
42819: LD_INT 1
42821: NEG
42822: PUSH
42823: LD_INT 3
42825: NEG
42826: PUSH
42827: EMPTY
42828: LIST
42829: LIST
42830: PUSH
42831: LD_INT 3
42833: NEG
42834: PUSH
42835: LD_INT 1
42837: NEG
42838: PUSH
42839: EMPTY
42840: LIST
42841: LIST
42842: PUSH
42843: LD_INT 3
42845: NEG
42846: PUSH
42847: LD_INT 2
42849: NEG
42850: PUSH
42851: EMPTY
42852: LIST
42853: LIST
42854: PUSH
42855: EMPTY
42856: LIST
42857: LIST
42858: LIST
42859: LIST
42860: LIST
42861: LIST
42862: LIST
42863: LIST
42864: LIST
42865: LIST
42866: LIST
42867: LIST
42868: LIST
42869: LIST
42870: LIST
42871: LIST
42872: LIST
42873: LIST
42874: LIST
42875: LIST
42876: LIST
42877: LIST
42878: LIST
42879: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
42880: LD_ADDR_VAR 0 29
42884: PUSH
42885: LD_INT 0
42887: PUSH
42888: LD_INT 0
42890: PUSH
42891: EMPTY
42892: LIST
42893: LIST
42894: PUSH
42895: LD_INT 0
42897: PUSH
42898: LD_INT 1
42900: NEG
42901: PUSH
42902: EMPTY
42903: LIST
42904: LIST
42905: PUSH
42906: LD_INT 1
42908: PUSH
42909: LD_INT 0
42911: PUSH
42912: EMPTY
42913: LIST
42914: LIST
42915: PUSH
42916: LD_INT 1
42918: PUSH
42919: LD_INT 1
42921: PUSH
42922: EMPTY
42923: LIST
42924: LIST
42925: PUSH
42926: LD_INT 0
42928: PUSH
42929: LD_INT 1
42931: PUSH
42932: EMPTY
42933: LIST
42934: LIST
42935: PUSH
42936: LD_INT 1
42938: NEG
42939: PUSH
42940: LD_INT 0
42942: PUSH
42943: EMPTY
42944: LIST
42945: LIST
42946: PUSH
42947: LD_INT 1
42949: NEG
42950: PUSH
42951: LD_INT 1
42953: NEG
42954: PUSH
42955: EMPTY
42956: LIST
42957: LIST
42958: PUSH
42959: LD_INT 1
42961: NEG
42962: PUSH
42963: LD_INT 2
42965: NEG
42966: PUSH
42967: EMPTY
42968: LIST
42969: LIST
42970: PUSH
42971: LD_INT 0
42973: PUSH
42974: LD_INT 2
42976: NEG
42977: PUSH
42978: EMPTY
42979: LIST
42980: LIST
42981: PUSH
42982: LD_INT 1
42984: PUSH
42985: LD_INT 1
42987: NEG
42988: PUSH
42989: EMPTY
42990: LIST
42991: LIST
42992: PUSH
42993: LD_INT 2
42995: PUSH
42996: LD_INT 0
42998: PUSH
42999: EMPTY
43000: LIST
43001: LIST
43002: PUSH
43003: LD_INT 2
43005: PUSH
43006: LD_INT 1
43008: PUSH
43009: EMPTY
43010: LIST
43011: LIST
43012: PUSH
43013: LD_INT 1
43015: PUSH
43016: LD_INT 2
43018: PUSH
43019: EMPTY
43020: LIST
43021: LIST
43022: PUSH
43023: LD_INT 0
43025: PUSH
43026: LD_INT 2
43028: PUSH
43029: EMPTY
43030: LIST
43031: LIST
43032: PUSH
43033: LD_INT 1
43035: NEG
43036: PUSH
43037: LD_INT 1
43039: PUSH
43040: EMPTY
43041: LIST
43042: LIST
43043: PUSH
43044: LD_INT 2
43046: NEG
43047: PUSH
43048: LD_INT 1
43050: NEG
43051: PUSH
43052: EMPTY
43053: LIST
43054: LIST
43055: PUSH
43056: LD_INT 2
43058: NEG
43059: PUSH
43060: LD_INT 2
43062: NEG
43063: PUSH
43064: EMPTY
43065: LIST
43066: LIST
43067: PUSH
43068: LD_INT 2
43070: NEG
43071: PUSH
43072: LD_INT 3
43074: NEG
43075: PUSH
43076: EMPTY
43077: LIST
43078: LIST
43079: PUSH
43080: LD_INT 2
43082: PUSH
43083: LD_INT 1
43085: NEG
43086: PUSH
43087: EMPTY
43088: LIST
43089: LIST
43090: PUSH
43091: LD_INT 3
43093: PUSH
43094: LD_INT 1
43096: PUSH
43097: EMPTY
43098: LIST
43099: LIST
43100: PUSH
43101: LD_INT 1
43103: PUSH
43104: LD_INT 3
43106: PUSH
43107: EMPTY
43108: LIST
43109: LIST
43110: PUSH
43111: LD_INT 1
43113: NEG
43114: PUSH
43115: LD_INT 2
43117: PUSH
43118: EMPTY
43119: LIST
43120: LIST
43121: PUSH
43122: LD_INT 3
43124: NEG
43125: PUSH
43126: LD_INT 2
43128: NEG
43129: PUSH
43130: EMPTY
43131: LIST
43132: LIST
43133: PUSH
43134: EMPTY
43135: LIST
43136: LIST
43137: LIST
43138: LIST
43139: LIST
43140: LIST
43141: LIST
43142: LIST
43143: LIST
43144: LIST
43145: LIST
43146: LIST
43147: LIST
43148: LIST
43149: LIST
43150: LIST
43151: LIST
43152: LIST
43153: LIST
43154: LIST
43155: LIST
43156: LIST
43157: LIST
43158: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
43159: LD_ADDR_VAR 0 30
43163: PUSH
43164: LD_INT 0
43166: PUSH
43167: LD_INT 0
43169: PUSH
43170: EMPTY
43171: LIST
43172: LIST
43173: PUSH
43174: LD_INT 0
43176: PUSH
43177: LD_INT 1
43179: NEG
43180: PUSH
43181: EMPTY
43182: LIST
43183: LIST
43184: PUSH
43185: LD_INT 1
43187: PUSH
43188: LD_INT 0
43190: PUSH
43191: EMPTY
43192: LIST
43193: LIST
43194: PUSH
43195: LD_INT 1
43197: PUSH
43198: LD_INT 1
43200: PUSH
43201: EMPTY
43202: LIST
43203: LIST
43204: PUSH
43205: LD_INT 0
43207: PUSH
43208: LD_INT 1
43210: PUSH
43211: EMPTY
43212: LIST
43213: LIST
43214: PUSH
43215: LD_INT 1
43217: NEG
43218: PUSH
43219: LD_INT 0
43221: PUSH
43222: EMPTY
43223: LIST
43224: LIST
43225: PUSH
43226: LD_INT 1
43228: NEG
43229: PUSH
43230: LD_INT 1
43232: NEG
43233: PUSH
43234: EMPTY
43235: LIST
43236: LIST
43237: PUSH
43238: LD_INT 1
43240: NEG
43241: PUSH
43242: LD_INT 2
43244: NEG
43245: PUSH
43246: EMPTY
43247: LIST
43248: LIST
43249: PUSH
43250: LD_INT 0
43252: PUSH
43253: LD_INT 2
43255: NEG
43256: PUSH
43257: EMPTY
43258: LIST
43259: LIST
43260: PUSH
43261: LD_INT 1
43263: PUSH
43264: LD_INT 1
43266: NEG
43267: PUSH
43268: EMPTY
43269: LIST
43270: LIST
43271: PUSH
43272: LD_INT 2
43274: PUSH
43275: LD_INT 0
43277: PUSH
43278: EMPTY
43279: LIST
43280: LIST
43281: PUSH
43282: LD_INT 2
43284: PUSH
43285: LD_INT 1
43287: PUSH
43288: EMPTY
43289: LIST
43290: LIST
43291: PUSH
43292: LD_INT 2
43294: PUSH
43295: LD_INT 2
43297: PUSH
43298: EMPTY
43299: LIST
43300: LIST
43301: PUSH
43302: LD_INT 1
43304: PUSH
43305: LD_INT 2
43307: PUSH
43308: EMPTY
43309: LIST
43310: LIST
43311: PUSH
43312: LD_INT 1
43314: NEG
43315: PUSH
43316: LD_INT 1
43318: PUSH
43319: EMPTY
43320: LIST
43321: LIST
43322: PUSH
43323: LD_INT 2
43325: NEG
43326: PUSH
43327: LD_INT 0
43329: PUSH
43330: EMPTY
43331: LIST
43332: LIST
43333: PUSH
43334: LD_INT 2
43336: NEG
43337: PUSH
43338: LD_INT 1
43340: NEG
43341: PUSH
43342: EMPTY
43343: LIST
43344: LIST
43345: PUSH
43346: LD_INT 1
43348: NEG
43349: PUSH
43350: LD_INT 3
43352: NEG
43353: PUSH
43354: EMPTY
43355: LIST
43356: LIST
43357: PUSH
43358: LD_INT 1
43360: PUSH
43361: LD_INT 2
43363: NEG
43364: PUSH
43365: EMPTY
43366: LIST
43367: LIST
43368: PUSH
43369: LD_INT 3
43371: PUSH
43372: LD_INT 2
43374: PUSH
43375: EMPTY
43376: LIST
43377: LIST
43378: PUSH
43379: LD_INT 2
43381: PUSH
43382: LD_INT 3
43384: PUSH
43385: EMPTY
43386: LIST
43387: LIST
43388: PUSH
43389: LD_INT 2
43391: NEG
43392: PUSH
43393: LD_INT 1
43395: PUSH
43396: EMPTY
43397: LIST
43398: LIST
43399: PUSH
43400: LD_INT 3
43402: NEG
43403: PUSH
43404: LD_INT 1
43406: NEG
43407: PUSH
43408: EMPTY
43409: LIST
43410: LIST
43411: PUSH
43412: EMPTY
43413: LIST
43414: LIST
43415: LIST
43416: LIST
43417: LIST
43418: LIST
43419: LIST
43420: LIST
43421: LIST
43422: LIST
43423: LIST
43424: LIST
43425: LIST
43426: LIST
43427: LIST
43428: LIST
43429: LIST
43430: LIST
43431: LIST
43432: LIST
43433: LIST
43434: LIST
43435: LIST
43436: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
43437: LD_ADDR_VAR 0 31
43441: PUSH
43442: LD_INT 0
43444: PUSH
43445: LD_INT 0
43447: PUSH
43448: EMPTY
43449: LIST
43450: LIST
43451: PUSH
43452: LD_INT 0
43454: PUSH
43455: LD_INT 1
43457: NEG
43458: PUSH
43459: EMPTY
43460: LIST
43461: LIST
43462: PUSH
43463: LD_INT 1
43465: PUSH
43466: LD_INT 0
43468: PUSH
43469: EMPTY
43470: LIST
43471: LIST
43472: PUSH
43473: LD_INT 1
43475: PUSH
43476: LD_INT 1
43478: PUSH
43479: EMPTY
43480: LIST
43481: LIST
43482: PUSH
43483: LD_INT 0
43485: PUSH
43486: LD_INT 1
43488: PUSH
43489: EMPTY
43490: LIST
43491: LIST
43492: PUSH
43493: LD_INT 1
43495: NEG
43496: PUSH
43497: LD_INT 0
43499: PUSH
43500: EMPTY
43501: LIST
43502: LIST
43503: PUSH
43504: LD_INT 1
43506: NEG
43507: PUSH
43508: LD_INT 1
43510: NEG
43511: PUSH
43512: EMPTY
43513: LIST
43514: LIST
43515: PUSH
43516: LD_INT 1
43518: NEG
43519: PUSH
43520: LD_INT 2
43522: NEG
43523: PUSH
43524: EMPTY
43525: LIST
43526: LIST
43527: PUSH
43528: LD_INT 1
43530: PUSH
43531: LD_INT 1
43533: NEG
43534: PUSH
43535: EMPTY
43536: LIST
43537: LIST
43538: PUSH
43539: LD_INT 2
43541: PUSH
43542: LD_INT 0
43544: PUSH
43545: EMPTY
43546: LIST
43547: LIST
43548: PUSH
43549: LD_INT 2
43551: PUSH
43552: LD_INT 1
43554: PUSH
43555: EMPTY
43556: LIST
43557: LIST
43558: PUSH
43559: LD_INT 2
43561: PUSH
43562: LD_INT 2
43564: PUSH
43565: EMPTY
43566: LIST
43567: LIST
43568: PUSH
43569: LD_INT 1
43571: PUSH
43572: LD_INT 2
43574: PUSH
43575: EMPTY
43576: LIST
43577: LIST
43578: PUSH
43579: LD_INT 0
43581: PUSH
43582: LD_INT 2
43584: PUSH
43585: EMPTY
43586: LIST
43587: LIST
43588: PUSH
43589: LD_INT 1
43591: NEG
43592: PUSH
43593: LD_INT 1
43595: PUSH
43596: EMPTY
43597: LIST
43598: LIST
43599: PUSH
43600: LD_INT 2
43602: NEG
43603: PUSH
43604: LD_INT 1
43606: NEG
43607: PUSH
43608: EMPTY
43609: LIST
43610: LIST
43611: PUSH
43612: LD_INT 2
43614: NEG
43615: PUSH
43616: LD_INT 2
43618: NEG
43619: PUSH
43620: EMPTY
43621: LIST
43622: LIST
43623: PUSH
43624: LD_INT 2
43626: NEG
43627: PUSH
43628: LD_INT 3
43630: NEG
43631: PUSH
43632: EMPTY
43633: LIST
43634: LIST
43635: PUSH
43636: LD_INT 2
43638: PUSH
43639: LD_INT 1
43641: NEG
43642: PUSH
43643: EMPTY
43644: LIST
43645: LIST
43646: PUSH
43647: LD_INT 3
43649: PUSH
43650: LD_INT 1
43652: PUSH
43653: EMPTY
43654: LIST
43655: LIST
43656: PUSH
43657: LD_INT 1
43659: PUSH
43660: LD_INT 3
43662: PUSH
43663: EMPTY
43664: LIST
43665: LIST
43666: PUSH
43667: LD_INT 1
43669: NEG
43670: PUSH
43671: LD_INT 2
43673: PUSH
43674: EMPTY
43675: LIST
43676: LIST
43677: PUSH
43678: LD_INT 3
43680: NEG
43681: PUSH
43682: LD_INT 2
43684: NEG
43685: PUSH
43686: EMPTY
43687: LIST
43688: LIST
43689: PUSH
43690: EMPTY
43691: LIST
43692: LIST
43693: LIST
43694: LIST
43695: LIST
43696: LIST
43697: LIST
43698: LIST
43699: LIST
43700: LIST
43701: LIST
43702: LIST
43703: LIST
43704: LIST
43705: LIST
43706: LIST
43707: LIST
43708: LIST
43709: LIST
43710: LIST
43711: LIST
43712: LIST
43713: LIST
43714: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
43715: LD_ADDR_VAR 0 32
43719: PUSH
43720: LD_INT 0
43722: PUSH
43723: LD_INT 0
43725: PUSH
43726: EMPTY
43727: LIST
43728: LIST
43729: PUSH
43730: LD_INT 0
43732: PUSH
43733: LD_INT 1
43735: NEG
43736: PUSH
43737: EMPTY
43738: LIST
43739: LIST
43740: PUSH
43741: LD_INT 1
43743: PUSH
43744: LD_INT 0
43746: PUSH
43747: EMPTY
43748: LIST
43749: LIST
43750: PUSH
43751: LD_INT 1
43753: PUSH
43754: LD_INT 1
43756: PUSH
43757: EMPTY
43758: LIST
43759: LIST
43760: PUSH
43761: LD_INT 0
43763: PUSH
43764: LD_INT 1
43766: PUSH
43767: EMPTY
43768: LIST
43769: LIST
43770: PUSH
43771: LD_INT 1
43773: NEG
43774: PUSH
43775: LD_INT 0
43777: PUSH
43778: EMPTY
43779: LIST
43780: LIST
43781: PUSH
43782: LD_INT 1
43784: NEG
43785: PUSH
43786: LD_INT 1
43788: NEG
43789: PUSH
43790: EMPTY
43791: LIST
43792: LIST
43793: PUSH
43794: LD_INT 1
43796: NEG
43797: PUSH
43798: LD_INT 2
43800: NEG
43801: PUSH
43802: EMPTY
43803: LIST
43804: LIST
43805: PUSH
43806: LD_INT 0
43808: PUSH
43809: LD_INT 2
43811: NEG
43812: PUSH
43813: EMPTY
43814: LIST
43815: LIST
43816: PUSH
43817: LD_INT 1
43819: PUSH
43820: LD_INT 1
43822: NEG
43823: PUSH
43824: EMPTY
43825: LIST
43826: LIST
43827: PUSH
43828: LD_INT 2
43830: PUSH
43831: LD_INT 1
43833: PUSH
43834: EMPTY
43835: LIST
43836: LIST
43837: PUSH
43838: LD_INT 2
43840: PUSH
43841: LD_INT 2
43843: PUSH
43844: EMPTY
43845: LIST
43846: LIST
43847: PUSH
43848: LD_INT 1
43850: PUSH
43851: LD_INT 2
43853: PUSH
43854: EMPTY
43855: LIST
43856: LIST
43857: PUSH
43858: LD_INT 0
43860: PUSH
43861: LD_INT 2
43863: PUSH
43864: EMPTY
43865: LIST
43866: LIST
43867: PUSH
43868: LD_INT 1
43870: NEG
43871: PUSH
43872: LD_INT 1
43874: PUSH
43875: EMPTY
43876: LIST
43877: LIST
43878: PUSH
43879: LD_INT 2
43881: NEG
43882: PUSH
43883: LD_INT 0
43885: PUSH
43886: EMPTY
43887: LIST
43888: LIST
43889: PUSH
43890: LD_INT 2
43892: NEG
43893: PUSH
43894: LD_INT 1
43896: NEG
43897: PUSH
43898: EMPTY
43899: LIST
43900: LIST
43901: PUSH
43902: LD_INT 1
43904: NEG
43905: PUSH
43906: LD_INT 3
43908: NEG
43909: PUSH
43910: EMPTY
43911: LIST
43912: LIST
43913: PUSH
43914: LD_INT 1
43916: PUSH
43917: LD_INT 2
43919: NEG
43920: PUSH
43921: EMPTY
43922: LIST
43923: LIST
43924: PUSH
43925: LD_INT 3
43927: PUSH
43928: LD_INT 2
43930: PUSH
43931: EMPTY
43932: LIST
43933: LIST
43934: PUSH
43935: LD_INT 2
43937: PUSH
43938: LD_INT 3
43940: PUSH
43941: EMPTY
43942: LIST
43943: LIST
43944: PUSH
43945: LD_INT 2
43947: NEG
43948: PUSH
43949: LD_INT 1
43951: PUSH
43952: EMPTY
43953: LIST
43954: LIST
43955: PUSH
43956: LD_INT 3
43958: NEG
43959: PUSH
43960: LD_INT 1
43962: NEG
43963: PUSH
43964: EMPTY
43965: LIST
43966: LIST
43967: PUSH
43968: EMPTY
43969: LIST
43970: LIST
43971: LIST
43972: LIST
43973: LIST
43974: LIST
43975: LIST
43976: LIST
43977: LIST
43978: LIST
43979: LIST
43980: LIST
43981: LIST
43982: LIST
43983: LIST
43984: LIST
43985: LIST
43986: LIST
43987: LIST
43988: LIST
43989: LIST
43990: LIST
43991: LIST
43992: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
43993: LD_ADDR_VAR 0 33
43997: PUSH
43998: LD_INT 0
44000: PUSH
44001: LD_INT 0
44003: PUSH
44004: EMPTY
44005: LIST
44006: LIST
44007: PUSH
44008: LD_INT 0
44010: PUSH
44011: LD_INT 1
44013: NEG
44014: PUSH
44015: EMPTY
44016: LIST
44017: LIST
44018: PUSH
44019: LD_INT 1
44021: PUSH
44022: LD_INT 0
44024: PUSH
44025: EMPTY
44026: LIST
44027: LIST
44028: PUSH
44029: LD_INT 1
44031: PUSH
44032: LD_INT 1
44034: PUSH
44035: EMPTY
44036: LIST
44037: LIST
44038: PUSH
44039: LD_INT 0
44041: PUSH
44042: LD_INT 1
44044: PUSH
44045: EMPTY
44046: LIST
44047: LIST
44048: PUSH
44049: LD_INT 1
44051: NEG
44052: PUSH
44053: LD_INT 0
44055: PUSH
44056: EMPTY
44057: LIST
44058: LIST
44059: PUSH
44060: LD_INT 1
44062: NEG
44063: PUSH
44064: LD_INT 1
44066: NEG
44067: PUSH
44068: EMPTY
44069: LIST
44070: LIST
44071: PUSH
44072: LD_INT 1
44074: NEG
44075: PUSH
44076: LD_INT 2
44078: NEG
44079: PUSH
44080: EMPTY
44081: LIST
44082: LIST
44083: PUSH
44084: LD_INT 1
44086: PUSH
44087: LD_INT 1
44089: NEG
44090: PUSH
44091: EMPTY
44092: LIST
44093: LIST
44094: PUSH
44095: LD_INT 2
44097: PUSH
44098: LD_INT 0
44100: PUSH
44101: EMPTY
44102: LIST
44103: LIST
44104: PUSH
44105: LD_INT 2
44107: PUSH
44108: LD_INT 1
44110: PUSH
44111: EMPTY
44112: LIST
44113: LIST
44114: PUSH
44115: LD_INT 1
44117: PUSH
44118: LD_INT 2
44120: PUSH
44121: EMPTY
44122: LIST
44123: LIST
44124: PUSH
44125: LD_INT 0
44127: PUSH
44128: LD_INT 2
44130: PUSH
44131: EMPTY
44132: LIST
44133: LIST
44134: PUSH
44135: LD_INT 1
44137: NEG
44138: PUSH
44139: LD_INT 1
44141: PUSH
44142: EMPTY
44143: LIST
44144: LIST
44145: PUSH
44146: LD_INT 2
44148: NEG
44149: PUSH
44150: LD_INT 0
44152: PUSH
44153: EMPTY
44154: LIST
44155: LIST
44156: PUSH
44157: LD_INT 2
44159: NEG
44160: PUSH
44161: LD_INT 1
44163: NEG
44164: PUSH
44165: EMPTY
44166: LIST
44167: LIST
44168: PUSH
44169: LD_INT 2
44171: NEG
44172: PUSH
44173: LD_INT 2
44175: NEG
44176: PUSH
44177: EMPTY
44178: LIST
44179: LIST
44180: PUSH
44181: LD_INT 2
44183: NEG
44184: PUSH
44185: LD_INT 3
44187: NEG
44188: PUSH
44189: EMPTY
44190: LIST
44191: LIST
44192: PUSH
44193: LD_INT 2
44195: PUSH
44196: LD_INT 1
44198: NEG
44199: PUSH
44200: EMPTY
44201: LIST
44202: LIST
44203: PUSH
44204: LD_INT 3
44206: PUSH
44207: LD_INT 1
44209: PUSH
44210: EMPTY
44211: LIST
44212: LIST
44213: PUSH
44214: LD_INT 1
44216: PUSH
44217: LD_INT 3
44219: PUSH
44220: EMPTY
44221: LIST
44222: LIST
44223: PUSH
44224: LD_INT 1
44226: NEG
44227: PUSH
44228: LD_INT 2
44230: PUSH
44231: EMPTY
44232: LIST
44233: LIST
44234: PUSH
44235: LD_INT 3
44237: NEG
44238: PUSH
44239: LD_INT 2
44241: NEG
44242: PUSH
44243: EMPTY
44244: LIST
44245: LIST
44246: PUSH
44247: EMPTY
44248: LIST
44249: LIST
44250: LIST
44251: LIST
44252: LIST
44253: LIST
44254: LIST
44255: LIST
44256: LIST
44257: LIST
44258: LIST
44259: LIST
44260: LIST
44261: LIST
44262: LIST
44263: LIST
44264: LIST
44265: LIST
44266: LIST
44267: LIST
44268: LIST
44269: LIST
44270: LIST
44271: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
44272: LD_ADDR_VAR 0 34
44276: PUSH
44277: LD_INT 0
44279: PUSH
44280: LD_INT 0
44282: PUSH
44283: EMPTY
44284: LIST
44285: LIST
44286: PUSH
44287: LD_INT 0
44289: PUSH
44290: LD_INT 1
44292: NEG
44293: PUSH
44294: EMPTY
44295: LIST
44296: LIST
44297: PUSH
44298: LD_INT 1
44300: PUSH
44301: LD_INT 0
44303: PUSH
44304: EMPTY
44305: LIST
44306: LIST
44307: PUSH
44308: LD_INT 1
44310: PUSH
44311: LD_INT 1
44313: PUSH
44314: EMPTY
44315: LIST
44316: LIST
44317: PUSH
44318: LD_INT 0
44320: PUSH
44321: LD_INT 1
44323: PUSH
44324: EMPTY
44325: LIST
44326: LIST
44327: PUSH
44328: LD_INT 1
44330: NEG
44331: PUSH
44332: LD_INT 0
44334: PUSH
44335: EMPTY
44336: LIST
44337: LIST
44338: PUSH
44339: LD_INT 1
44341: NEG
44342: PUSH
44343: LD_INT 1
44345: NEG
44346: PUSH
44347: EMPTY
44348: LIST
44349: LIST
44350: PUSH
44351: LD_INT 1
44353: NEG
44354: PUSH
44355: LD_INT 2
44357: NEG
44358: PUSH
44359: EMPTY
44360: LIST
44361: LIST
44362: PUSH
44363: LD_INT 0
44365: PUSH
44366: LD_INT 2
44368: NEG
44369: PUSH
44370: EMPTY
44371: LIST
44372: LIST
44373: PUSH
44374: LD_INT 1
44376: PUSH
44377: LD_INT 1
44379: NEG
44380: PUSH
44381: EMPTY
44382: LIST
44383: LIST
44384: PUSH
44385: LD_INT 2
44387: PUSH
44388: LD_INT 1
44390: PUSH
44391: EMPTY
44392: LIST
44393: LIST
44394: PUSH
44395: LD_INT 2
44397: PUSH
44398: LD_INT 2
44400: PUSH
44401: EMPTY
44402: LIST
44403: LIST
44404: PUSH
44405: LD_INT 1
44407: PUSH
44408: LD_INT 2
44410: PUSH
44411: EMPTY
44412: LIST
44413: LIST
44414: PUSH
44415: LD_INT 1
44417: NEG
44418: PUSH
44419: LD_INT 1
44421: PUSH
44422: EMPTY
44423: LIST
44424: LIST
44425: PUSH
44426: LD_INT 2
44428: NEG
44429: PUSH
44430: LD_INT 0
44432: PUSH
44433: EMPTY
44434: LIST
44435: LIST
44436: PUSH
44437: LD_INT 2
44439: NEG
44440: PUSH
44441: LD_INT 1
44443: NEG
44444: PUSH
44445: EMPTY
44446: LIST
44447: LIST
44448: PUSH
44449: LD_INT 2
44451: NEG
44452: PUSH
44453: LD_INT 2
44455: NEG
44456: PUSH
44457: EMPTY
44458: LIST
44459: LIST
44460: PUSH
44461: LD_INT 1
44463: NEG
44464: PUSH
44465: LD_INT 3
44467: NEG
44468: PUSH
44469: EMPTY
44470: LIST
44471: LIST
44472: PUSH
44473: LD_INT 1
44475: PUSH
44476: LD_INT 2
44478: NEG
44479: PUSH
44480: EMPTY
44481: LIST
44482: LIST
44483: PUSH
44484: LD_INT 3
44486: PUSH
44487: LD_INT 2
44489: PUSH
44490: EMPTY
44491: LIST
44492: LIST
44493: PUSH
44494: LD_INT 2
44496: PUSH
44497: LD_INT 3
44499: PUSH
44500: EMPTY
44501: LIST
44502: LIST
44503: PUSH
44504: LD_INT 2
44506: NEG
44507: PUSH
44508: LD_INT 1
44510: PUSH
44511: EMPTY
44512: LIST
44513: LIST
44514: PUSH
44515: LD_INT 3
44517: NEG
44518: PUSH
44519: LD_INT 1
44521: NEG
44522: PUSH
44523: EMPTY
44524: LIST
44525: LIST
44526: PUSH
44527: EMPTY
44528: LIST
44529: LIST
44530: LIST
44531: LIST
44532: LIST
44533: LIST
44534: LIST
44535: LIST
44536: LIST
44537: LIST
44538: LIST
44539: LIST
44540: LIST
44541: LIST
44542: LIST
44543: LIST
44544: LIST
44545: LIST
44546: LIST
44547: LIST
44548: LIST
44549: LIST
44550: LIST
44551: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
44552: LD_ADDR_VAR 0 35
44556: PUSH
44557: LD_INT 0
44559: PUSH
44560: LD_INT 0
44562: PUSH
44563: EMPTY
44564: LIST
44565: LIST
44566: PUSH
44567: LD_INT 0
44569: PUSH
44570: LD_INT 1
44572: NEG
44573: PUSH
44574: EMPTY
44575: LIST
44576: LIST
44577: PUSH
44578: LD_INT 1
44580: PUSH
44581: LD_INT 0
44583: PUSH
44584: EMPTY
44585: LIST
44586: LIST
44587: PUSH
44588: LD_INT 1
44590: PUSH
44591: LD_INT 1
44593: PUSH
44594: EMPTY
44595: LIST
44596: LIST
44597: PUSH
44598: LD_INT 0
44600: PUSH
44601: LD_INT 1
44603: PUSH
44604: EMPTY
44605: LIST
44606: LIST
44607: PUSH
44608: LD_INT 1
44610: NEG
44611: PUSH
44612: LD_INT 0
44614: PUSH
44615: EMPTY
44616: LIST
44617: LIST
44618: PUSH
44619: LD_INT 1
44621: NEG
44622: PUSH
44623: LD_INT 1
44625: NEG
44626: PUSH
44627: EMPTY
44628: LIST
44629: LIST
44630: PUSH
44631: LD_INT 2
44633: PUSH
44634: LD_INT 1
44636: PUSH
44637: EMPTY
44638: LIST
44639: LIST
44640: PUSH
44641: LD_INT 2
44643: NEG
44644: PUSH
44645: LD_INT 1
44647: NEG
44648: PUSH
44649: EMPTY
44650: LIST
44651: LIST
44652: PUSH
44653: EMPTY
44654: LIST
44655: LIST
44656: LIST
44657: LIST
44658: LIST
44659: LIST
44660: LIST
44661: LIST
44662: LIST
44663: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
44664: LD_ADDR_VAR 0 36
44668: PUSH
44669: LD_INT 0
44671: PUSH
44672: LD_INT 0
44674: PUSH
44675: EMPTY
44676: LIST
44677: LIST
44678: PUSH
44679: LD_INT 0
44681: PUSH
44682: LD_INT 1
44684: NEG
44685: PUSH
44686: EMPTY
44687: LIST
44688: LIST
44689: PUSH
44690: LD_INT 1
44692: PUSH
44693: LD_INT 0
44695: PUSH
44696: EMPTY
44697: LIST
44698: LIST
44699: PUSH
44700: LD_INT 1
44702: PUSH
44703: LD_INT 1
44705: PUSH
44706: EMPTY
44707: LIST
44708: LIST
44709: PUSH
44710: LD_INT 0
44712: PUSH
44713: LD_INT 1
44715: PUSH
44716: EMPTY
44717: LIST
44718: LIST
44719: PUSH
44720: LD_INT 1
44722: NEG
44723: PUSH
44724: LD_INT 0
44726: PUSH
44727: EMPTY
44728: LIST
44729: LIST
44730: PUSH
44731: LD_INT 1
44733: NEG
44734: PUSH
44735: LD_INT 1
44737: NEG
44738: PUSH
44739: EMPTY
44740: LIST
44741: LIST
44742: PUSH
44743: LD_INT 1
44745: NEG
44746: PUSH
44747: LD_INT 2
44749: NEG
44750: PUSH
44751: EMPTY
44752: LIST
44753: LIST
44754: PUSH
44755: LD_INT 1
44757: PUSH
44758: LD_INT 2
44760: PUSH
44761: EMPTY
44762: LIST
44763: LIST
44764: PUSH
44765: EMPTY
44766: LIST
44767: LIST
44768: LIST
44769: LIST
44770: LIST
44771: LIST
44772: LIST
44773: LIST
44774: LIST
44775: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
44776: LD_ADDR_VAR 0 37
44780: PUSH
44781: LD_INT 0
44783: PUSH
44784: LD_INT 0
44786: PUSH
44787: EMPTY
44788: LIST
44789: LIST
44790: PUSH
44791: LD_INT 0
44793: PUSH
44794: LD_INT 1
44796: NEG
44797: PUSH
44798: EMPTY
44799: LIST
44800: LIST
44801: PUSH
44802: LD_INT 1
44804: PUSH
44805: LD_INT 0
44807: PUSH
44808: EMPTY
44809: LIST
44810: LIST
44811: PUSH
44812: LD_INT 1
44814: PUSH
44815: LD_INT 1
44817: PUSH
44818: EMPTY
44819: LIST
44820: LIST
44821: PUSH
44822: LD_INT 0
44824: PUSH
44825: LD_INT 1
44827: PUSH
44828: EMPTY
44829: LIST
44830: LIST
44831: PUSH
44832: LD_INT 1
44834: NEG
44835: PUSH
44836: LD_INT 0
44838: PUSH
44839: EMPTY
44840: LIST
44841: LIST
44842: PUSH
44843: LD_INT 1
44845: NEG
44846: PUSH
44847: LD_INT 1
44849: NEG
44850: PUSH
44851: EMPTY
44852: LIST
44853: LIST
44854: PUSH
44855: LD_INT 1
44857: PUSH
44858: LD_INT 1
44860: NEG
44861: PUSH
44862: EMPTY
44863: LIST
44864: LIST
44865: PUSH
44866: LD_INT 1
44868: NEG
44869: PUSH
44870: LD_INT 1
44872: PUSH
44873: EMPTY
44874: LIST
44875: LIST
44876: PUSH
44877: EMPTY
44878: LIST
44879: LIST
44880: LIST
44881: LIST
44882: LIST
44883: LIST
44884: LIST
44885: LIST
44886: LIST
44887: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
44888: LD_ADDR_VAR 0 38
44892: PUSH
44893: LD_INT 0
44895: PUSH
44896: LD_INT 0
44898: PUSH
44899: EMPTY
44900: LIST
44901: LIST
44902: PUSH
44903: LD_INT 0
44905: PUSH
44906: LD_INT 1
44908: NEG
44909: PUSH
44910: EMPTY
44911: LIST
44912: LIST
44913: PUSH
44914: LD_INT 1
44916: PUSH
44917: LD_INT 0
44919: PUSH
44920: EMPTY
44921: LIST
44922: LIST
44923: PUSH
44924: LD_INT 1
44926: PUSH
44927: LD_INT 1
44929: PUSH
44930: EMPTY
44931: LIST
44932: LIST
44933: PUSH
44934: LD_INT 0
44936: PUSH
44937: LD_INT 1
44939: PUSH
44940: EMPTY
44941: LIST
44942: LIST
44943: PUSH
44944: LD_INT 1
44946: NEG
44947: PUSH
44948: LD_INT 0
44950: PUSH
44951: EMPTY
44952: LIST
44953: LIST
44954: PUSH
44955: LD_INT 1
44957: NEG
44958: PUSH
44959: LD_INT 1
44961: NEG
44962: PUSH
44963: EMPTY
44964: LIST
44965: LIST
44966: PUSH
44967: LD_INT 2
44969: PUSH
44970: LD_INT 1
44972: PUSH
44973: EMPTY
44974: LIST
44975: LIST
44976: PUSH
44977: LD_INT 2
44979: NEG
44980: PUSH
44981: LD_INT 1
44983: NEG
44984: PUSH
44985: EMPTY
44986: LIST
44987: LIST
44988: PUSH
44989: EMPTY
44990: LIST
44991: LIST
44992: LIST
44993: LIST
44994: LIST
44995: LIST
44996: LIST
44997: LIST
44998: LIST
44999: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
45000: LD_ADDR_VAR 0 39
45004: PUSH
45005: LD_INT 0
45007: PUSH
45008: LD_INT 0
45010: PUSH
45011: EMPTY
45012: LIST
45013: LIST
45014: PUSH
45015: LD_INT 0
45017: PUSH
45018: LD_INT 1
45020: NEG
45021: PUSH
45022: EMPTY
45023: LIST
45024: LIST
45025: PUSH
45026: LD_INT 1
45028: PUSH
45029: LD_INT 0
45031: PUSH
45032: EMPTY
45033: LIST
45034: LIST
45035: PUSH
45036: LD_INT 1
45038: PUSH
45039: LD_INT 1
45041: PUSH
45042: EMPTY
45043: LIST
45044: LIST
45045: PUSH
45046: LD_INT 0
45048: PUSH
45049: LD_INT 1
45051: PUSH
45052: EMPTY
45053: LIST
45054: LIST
45055: PUSH
45056: LD_INT 1
45058: NEG
45059: PUSH
45060: LD_INT 0
45062: PUSH
45063: EMPTY
45064: LIST
45065: LIST
45066: PUSH
45067: LD_INT 1
45069: NEG
45070: PUSH
45071: LD_INT 1
45073: NEG
45074: PUSH
45075: EMPTY
45076: LIST
45077: LIST
45078: PUSH
45079: LD_INT 1
45081: NEG
45082: PUSH
45083: LD_INT 2
45085: NEG
45086: PUSH
45087: EMPTY
45088: LIST
45089: LIST
45090: PUSH
45091: LD_INT 1
45093: PUSH
45094: LD_INT 2
45096: PUSH
45097: EMPTY
45098: LIST
45099: LIST
45100: PUSH
45101: EMPTY
45102: LIST
45103: LIST
45104: LIST
45105: LIST
45106: LIST
45107: LIST
45108: LIST
45109: LIST
45110: LIST
45111: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
45112: LD_ADDR_VAR 0 40
45116: PUSH
45117: LD_INT 0
45119: PUSH
45120: LD_INT 0
45122: PUSH
45123: EMPTY
45124: LIST
45125: LIST
45126: PUSH
45127: LD_INT 0
45129: PUSH
45130: LD_INT 1
45132: NEG
45133: PUSH
45134: EMPTY
45135: LIST
45136: LIST
45137: PUSH
45138: LD_INT 1
45140: PUSH
45141: LD_INT 0
45143: PUSH
45144: EMPTY
45145: LIST
45146: LIST
45147: PUSH
45148: LD_INT 1
45150: PUSH
45151: LD_INT 1
45153: PUSH
45154: EMPTY
45155: LIST
45156: LIST
45157: PUSH
45158: LD_INT 0
45160: PUSH
45161: LD_INT 1
45163: PUSH
45164: EMPTY
45165: LIST
45166: LIST
45167: PUSH
45168: LD_INT 1
45170: NEG
45171: PUSH
45172: LD_INT 0
45174: PUSH
45175: EMPTY
45176: LIST
45177: LIST
45178: PUSH
45179: LD_INT 1
45181: NEG
45182: PUSH
45183: LD_INT 1
45185: NEG
45186: PUSH
45187: EMPTY
45188: LIST
45189: LIST
45190: PUSH
45191: LD_INT 1
45193: PUSH
45194: LD_INT 1
45196: NEG
45197: PUSH
45198: EMPTY
45199: LIST
45200: LIST
45201: PUSH
45202: LD_INT 1
45204: NEG
45205: PUSH
45206: LD_INT 1
45208: PUSH
45209: EMPTY
45210: LIST
45211: LIST
45212: PUSH
45213: EMPTY
45214: LIST
45215: LIST
45216: LIST
45217: LIST
45218: LIST
45219: LIST
45220: LIST
45221: LIST
45222: LIST
45223: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45224: LD_ADDR_VAR 0 41
45228: PUSH
45229: LD_INT 0
45231: PUSH
45232: LD_INT 0
45234: PUSH
45235: EMPTY
45236: LIST
45237: LIST
45238: PUSH
45239: LD_INT 0
45241: PUSH
45242: LD_INT 1
45244: NEG
45245: PUSH
45246: EMPTY
45247: LIST
45248: LIST
45249: PUSH
45250: LD_INT 1
45252: PUSH
45253: LD_INT 0
45255: PUSH
45256: EMPTY
45257: LIST
45258: LIST
45259: PUSH
45260: LD_INT 1
45262: PUSH
45263: LD_INT 1
45265: PUSH
45266: EMPTY
45267: LIST
45268: LIST
45269: PUSH
45270: LD_INT 0
45272: PUSH
45273: LD_INT 1
45275: PUSH
45276: EMPTY
45277: LIST
45278: LIST
45279: PUSH
45280: LD_INT 1
45282: NEG
45283: PUSH
45284: LD_INT 0
45286: PUSH
45287: EMPTY
45288: LIST
45289: LIST
45290: PUSH
45291: LD_INT 1
45293: NEG
45294: PUSH
45295: LD_INT 1
45297: NEG
45298: PUSH
45299: EMPTY
45300: LIST
45301: LIST
45302: PUSH
45303: LD_INT 1
45305: NEG
45306: PUSH
45307: LD_INT 2
45309: NEG
45310: PUSH
45311: EMPTY
45312: LIST
45313: LIST
45314: PUSH
45315: LD_INT 1
45317: PUSH
45318: LD_INT 1
45320: NEG
45321: PUSH
45322: EMPTY
45323: LIST
45324: LIST
45325: PUSH
45326: LD_INT 2
45328: PUSH
45329: LD_INT 0
45331: PUSH
45332: EMPTY
45333: LIST
45334: LIST
45335: PUSH
45336: LD_INT 2
45338: PUSH
45339: LD_INT 1
45341: PUSH
45342: EMPTY
45343: LIST
45344: LIST
45345: PUSH
45346: LD_INT 2
45348: PUSH
45349: LD_INT 2
45351: PUSH
45352: EMPTY
45353: LIST
45354: LIST
45355: PUSH
45356: LD_INT 1
45358: PUSH
45359: LD_INT 2
45361: PUSH
45362: EMPTY
45363: LIST
45364: LIST
45365: PUSH
45366: LD_INT 1
45368: NEG
45369: PUSH
45370: LD_INT 1
45372: PUSH
45373: EMPTY
45374: LIST
45375: LIST
45376: PUSH
45377: LD_INT 2
45379: NEG
45380: PUSH
45381: LD_INT 0
45383: PUSH
45384: EMPTY
45385: LIST
45386: LIST
45387: PUSH
45388: LD_INT 2
45390: NEG
45391: PUSH
45392: LD_INT 1
45394: NEG
45395: PUSH
45396: EMPTY
45397: LIST
45398: LIST
45399: PUSH
45400: LD_INT 2
45402: NEG
45403: PUSH
45404: LD_INT 2
45406: NEG
45407: PUSH
45408: EMPTY
45409: LIST
45410: LIST
45411: PUSH
45412: LD_INT 2
45414: NEG
45415: PUSH
45416: LD_INT 3
45418: NEG
45419: PUSH
45420: EMPTY
45421: LIST
45422: LIST
45423: PUSH
45424: LD_INT 2
45426: PUSH
45427: LD_INT 1
45429: NEG
45430: PUSH
45431: EMPTY
45432: LIST
45433: LIST
45434: PUSH
45435: LD_INT 3
45437: PUSH
45438: LD_INT 0
45440: PUSH
45441: EMPTY
45442: LIST
45443: LIST
45444: PUSH
45445: LD_INT 3
45447: PUSH
45448: LD_INT 1
45450: PUSH
45451: EMPTY
45452: LIST
45453: LIST
45454: PUSH
45455: LD_INT 3
45457: PUSH
45458: LD_INT 2
45460: PUSH
45461: EMPTY
45462: LIST
45463: LIST
45464: PUSH
45465: LD_INT 3
45467: PUSH
45468: LD_INT 3
45470: PUSH
45471: EMPTY
45472: LIST
45473: LIST
45474: PUSH
45475: LD_INT 2
45477: PUSH
45478: LD_INT 3
45480: PUSH
45481: EMPTY
45482: LIST
45483: LIST
45484: PUSH
45485: LD_INT 2
45487: NEG
45488: PUSH
45489: LD_INT 1
45491: PUSH
45492: EMPTY
45493: LIST
45494: LIST
45495: PUSH
45496: LD_INT 3
45498: NEG
45499: PUSH
45500: LD_INT 0
45502: PUSH
45503: EMPTY
45504: LIST
45505: LIST
45506: PUSH
45507: LD_INT 3
45509: NEG
45510: PUSH
45511: LD_INT 1
45513: NEG
45514: PUSH
45515: EMPTY
45516: LIST
45517: LIST
45518: PUSH
45519: LD_INT 3
45521: NEG
45522: PUSH
45523: LD_INT 2
45525: NEG
45526: PUSH
45527: EMPTY
45528: LIST
45529: LIST
45530: PUSH
45531: LD_INT 3
45533: NEG
45534: PUSH
45535: LD_INT 3
45537: NEG
45538: PUSH
45539: EMPTY
45540: LIST
45541: LIST
45542: PUSH
45543: EMPTY
45544: LIST
45545: LIST
45546: LIST
45547: LIST
45548: LIST
45549: LIST
45550: LIST
45551: LIST
45552: LIST
45553: LIST
45554: LIST
45555: LIST
45556: LIST
45557: LIST
45558: LIST
45559: LIST
45560: LIST
45561: LIST
45562: LIST
45563: LIST
45564: LIST
45565: LIST
45566: LIST
45567: LIST
45568: LIST
45569: LIST
45570: LIST
45571: LIST
45572: LIST
45573: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45574: LD_ADDR_VAR 0 42
45578: PUSH
45579: LD_INT 0
45581: PUSH
45582: LD_INT 0
45584: PUSH
45585: EMPTY
45586: LIST
45587: LIST
45588: PUSH
45589: LD_INT 0
45591: PUSH
45592: LD_INT 1
45594: NEG
45595: PUSH
45596: EMPTY
45597: LIST
45598: LIST
45599: PUSH
45600: LD_INT 1
45602: PUSH
45603: LD_INT 0
45605: PUSH
45606: EMPTY
45607: LIST
45608: LIST
45609: PUSH
45610: LD_INT 1
45612: PUSH
45613: LD_INT 1
45615: PUSH
45616: EMPTY
45617: LIST
45618: LIST
45619: PUSH
45620: LD_INT 0
45622: PUSH
45623: LD_INT 1
45625: PUSH
45626: EMPTY
45627: LIST
45628: LIST
45629: PUSH
45630: LD_INT 1
45632: NEG
45633: PUSH
45634: LD_INT 0
45636: PUSH
45637: EMPTY
45638: LIST
45639: LIST
45640: PUSH
45641: LD_INT 1
45643: NEG
45644: PUSH
45645: LD_INT 1
45647: NEG
45648: PUSH
45649: EMPTY
45650: LIST
45651: LIST
45652: PUSH
45653: LD_INT 1
45655: NEG
45656: PUSH
45657: LD_INT 2
45659: NEG
45660: PUSH
45661: EMPTY
45662: LIST
45663: LIST
45664: PUSH
45665: LD_INT 0
45667: PUSH
45668: LD_INT 2
45670: NEG
45671: PUSH
45672: EMPTY
45673: LIST
45674: LIST
45675: PUSH
45676: LD_INT 1
45678: PUSH
45679: LD_INT 1
45681: NEG
45682: PUSH
45683: EMPTY
45684: LIST
45685: LIST
45686: PUSH
45687: LD_INT 2
45689: PUSH
45690: LD_INT 1
45692: PUSH
45693: EMPTY
45694: LIST
45695: LIST
45696: PUSH
45697: LD_INT 2
45699: PUSH
45700: LD_INT 2
45702: PUSH
45703: EMPTY
45704: LIST
45705: LIST
45706: PUSH
45707: LD_INT 1
45709: PUSH
45710: LD_INT 2
45712: PUSH
45713: EMPTY
45714: LIST
45715: LIST
45716: PUSH
45717: LD_INT 0
45719: PUSH
45720: LD_INT 2
45722: PUSH
45723: EMPTY
45724: LIST
45725: LIST
45726: PUSH
45727: LD_INT 1
45729: NEG
45730: PUSH
45731: LD_INT 1
45733: PUSH
45734: EMPTY
45735: LIST
45736: LIST
45737: PUSH
45738: LD_INT 2
45740: NEG
45741: PUSH
45742: LD_INT 1
45744: NEG
45745: PUSH
45746: EMPTY
45747: LIST
45748: LIST
45749: PUSH
45750: LD_INT 2
45752: NEG
45753: PUSH
45754: LD_INT 2
45756: NEG
45757: PUSH
45758: EMPTY
45759: LIST
45760: LIST
45761: PUSH
45762: LD_INT 2
45764: NEG
45765: PUSH
45766: LD_INT 3
45768: NEG
45769: PUSH
45770: EMPTY
45771: LIST
45772: LIST
45773: PUSH
45774: LD_INT 1
45776: NEG
45777: PUSH
45778: LD_INT 3
45780: NEG
45781: PUSH
45782: EMPTY
45783: LIST
45784: LIST
45785: PUSH
45786: LD_INT 0
45788: PUSH
45789: LD_INT 3
45791: NEG
45792: PUSH
45793: EMPTY
45794: LIST
45795: LIST
45796: PUSH
45797: LD_INT 1
45799: PUSH
45800: LD_INT 2
45802: NEG
45803: PUSH
45804: EMPTY
45805: LIST
45806: LIST
45807: PUSH
45808: LD_INT 3
45810: PUSH
45811: LD_INT 2
45813: PUSH
45814: EMPTY
45815: LIST
45816: LIST
45817: PUSH
45818: LD_INT 3
45820: PUSH
45821: LD_INT 3
45823: PUSH
45824: EMPTY
45825: LIST
45826: LIST
45827: PUSH
45828: LD_INT 2
45830: PUSH
45831: LD_INT 3
45833: PUSH
45834: EMPTY
45835: LIST
45836: LIST
45837: PUSH
45838: LD_INT 1
45840: PUSH
45841: LD_INT 3
45843: PUSH
45844: EMPTY
45845: LIST
45846: LIST
45847: PUSH
45848: LD_INT 0
45850: PUSH
45851: LD_INT 3
45853: PUSH
45854: EMPTY
45855: LIST
45856: LIST
45857: PUSH
45858: LD_INT 1
45860: NEG
45861: PUSH
45862: LD_INT 2
45864: PUSH
45865: EMPTY
45866: LIST
45867: LIST
45868: PUSH
45869: LD_INT 3
45871: NEG
45872: PUSH
45873: LD_INT 2
45875: NEG
45876: PUSH
45877: EMPTY
45878: LIST
45879: LIST
45880: PUSH
45881: LD_INT 3
45883: NEG
45884: PUSH
45885: LD_INT 3
45887: NEG
45888: PUSH
45889: EMPTY
45890: LIST
45891: LIST
45892: PUSH
45893: EMPTY
45894: LIST
45895: LIST
45896: LIST
45897: LIST
45898: LIST
45899: LIST
45900: LIST
45901: LIST
45902: LIST
45903: LIST
45904: LIST
45905: LIST
45906: LIST
45907: LIST
45908: LIST
45909: LIST
45910: LIST
45911: LIST
45912: LIST
45913: LIST
45914: LIST
45915: LIST
45916: LIST
45917: LIST
45918: LIST
45919: LIST
45920: LIST
45921: LIST
45922: LIST
45923: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45924: LD_ADDR_VAR 0 43
45928: PUSH
45929: LD_INT 0
45931: PUSH
45932: LD_INT 0
45934: PUSH
45935: EMPTY
45936: LIST
45937: LIST
45938: PUSH
45939: LD_INT 0
45941: PUSH
45942: LD_INT 1
45944: NEG
45945: PUSH
45946: EMPTY
45947: LIST
45948: LIST
45949: PUSH
45950: LD_INT 1
45952: PUSH
45953: LD_INT 0
45955: PUSH
45956: EMPTY
45957: LIST
45958: LIST
45959: PUSH
45960: LD_INT 1
45962: PUSH
45963: LD_INT 1
45965: PUSH
45966: EMPTY
45967: LIST
45968: LIST
45969: PUSH
45970: LD_INT 0
45972: PUSH
45973: LD_INT 1
45975: PUSH
45976: EMPTY
45977: LIST
45978: LIST
45979: PUSH
45980: LD_INT 1
45982: NEG
45983: PUSH
45984: LD_INT 0
45986: PUSH
45987: EMPTY
45988: LIST
45989: LIST
45990: PUSH
45991: LD_INT 1
45993: NEG
45994: PUSH
45995: LD_INT 1
45997: NEG
45998: PUSH
45999: EMPTY
46000: LIST
46001: LIST
46002: PUSH
46003: LD_INT 1
46005: NEG
46006: PUSH
46007: LD_INT 2
46009: NEG
46010: PUSH
46011: EMPTY
46012: LIST
46013: LIST
46014: PUSH
46015: LD_INT 0
46017: PUSH
46018: LD_INT 2
46020: NEG
46021: PUSH
46022: EMPTY
46023: LIST
46024: LIST
46025: PUSH
46026: LD_INT 1
46028: PUSH
46029: LD_INT 1
46031: NEG
46032: PUSH
46033: EMPTY
46034: LIST
46035: LIST
46036: PUSH
46037: LD_INT 2
46039: PUSH
46040: LD_INT 0
46042: PUSH
46043: EMPTY
46044: LIST
46045: LIST
46046: PUSH
46047: LD_INT 2
46049: PUSH
46050: LD_INT 1
46052: PUSH
46053: EMPTY
46054: LIST
46055: LIST
46056: PUSH
46057: LD_INT 1
46059: PUSH
46060: LD_INT 2
46062: PUSH
46063: EMPTY
46064: LIST
46065: LIST
46066: PUSH
46067: LD_INT 0
46069: PUSH
46070: LD_INT 2
46072: PUSH
46073: EMPTY
46074: LIST
46075: LIST
46076: PUSH
46077: LD_INT 1
46079: NEG
46080: PUSH
46081: LD_INT 1
46083: PUSH
46084: EMPTY
46085: LIST
46086: LIST
46087: PUSH
46088: LD_INT 2
46090: NEG
46091: PUSH
46092: LD_INT 0
46094: PUSH
46095: EMPTY
46096: LIST
46097: LIST
46098: PUSH
46099: LD_INT 2
46101: NEG
46102: PUSH
46103: LD_INT 1
46105: NEG
46106: PUSH
46107: EMPTY
46108: LIST
46109: LIST
46110: PUSH
46111: LD_INT 1
46113: NEG
46114: PUSH
46115: LD_INT 3
46117: NEG
46118: PUSH
46119: EMPTY
46120: LIST
46121: LIST
46122: PUSH
46123: LD_INT 0
46125: PUSH
46126: LD_INT 3
46128: NEG
46129: PUSH
46130: EMPTY
46131: LIST
46132: LIST
46133: PUSH
46134: LD_INT 1
46136: PUSH
46137: LD_INT 2
46139: NEG
46140: PUSH
46141: EMPTY
46142: LIST
46143: LIST
46144: PUSH
46145: LD_INT 2
46147: PUSH
46148: LD_INT 1
46150: NEG
46151: PUSH
46152: EMPTY
46153: LIST
46154: LIST
46155: PUSH
46156: LD_INT 3
46158: PUSH
46159: LD_INT 0
46161: PUSH
46162: EMPTY
46163: LIST
46164: LIST
46165: PUSH
46166: LD_INT 3
46168: PUSH
46169: LD_INT 1
46171: PUSH
46172: EMPTY
46173: LIST
46174: LIST
46175: PUSH
46176: LD_INT 1
46178: PUSH
46179: LD_INT 3
46181: PUSH
46182: EMPTY
46183: LIST
46184: LIST
46185: PUSH
46186: LD_INT 0
46188: PUSH
46189: LD_INT 3
46191: PUSH
46192: EMPTY
46193: LIST
46194: LIST
46195: PUSH
46196: LD_INT 1
46198: NEG
46199: PUSH
46200: LD_INT 2
46202: PUSH
46203: EMPTY
46204: LIST
46205: LIST
46206: PUSH
46207: LD_INT 2
46209: NEG
46210: PUSH
46211: LD_INT 1
46213: PUSH
46214: EMPTY
46215: LIST
46216: LIST
46217: PUSH
46218: LD_INT 3
46220: NEG
46221: PUSH
46222: LD_INT 0
46224: PUSH
46225: EMPTY
46226: LIST
46227: LIST
46228: PUSH
46229: LD_INT 3
46231: NEG
46232: PUSH
46233: LD_INT 1
46235: NEG
46236: PUSH
46237: EMPTY
46238: LIST
46239: LIST
46240: PUSH
46241: EMPTY
46242: LIST
46243: LIST
46244: LIST
46245: LIST
46246: LIST
46247: LIST
46248: LIST
46249: LIST
46250: LIST
46251: LIST
46252: LIST
46253: LIST
46254: LIST
46255: LIST
46256: LIST
46257: LIST
46258: LIST
46259: LIST
46260: LIST
46261: LIST
46262: LIST
46263: LIST
46264: LIST
46265: LIST
46266: LIST
46267: LIST
46268: LIST
46269: LIST
46270: LIST
46271: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46272: LD_ADDR_VAR 0 44
46276: PUSH
46277: LD_INT 0
46279: PUSH
46280: LD_INT 0
46282: PUSH
46283: EMPTY
46284: LIST
46285: LIST
46286: PUSH
46287: LD_INT 0
46289: PUSH
46290: LD_INT 1
46292: NEG
46293: PUSH
46294: EMPTY
46295: LIST
46296: LIST
46297: PUSH
46298: LD_INT 1
46300: PUSH
46301: LD_INT 0
46303: PUSH
46304: EMPTY
46305: LIST
46306: LIST
46307: PUSH
46308: LD_INT 1
46310: PUSH
46311: LD_INT 1
46313: PUSH
46314: EMPTY
46315: LIST
46316: LIST
46317: PUSH
46318: LD_INT 0
46320: PUSH
46321: LD_INT 1
46323: PUSH
46324: EMPTY
46325: LIST
46326: LIST
46327: PUSH
46328: LD_INT 1
46330: NEG
46331: PUSH
46332: LD_INT 0
46334: PUSH
46335: EMPTY
46336: LIST
46337: LIST
46338: PUSH
46339: LD_INT 1
46341: NEG
46342: PUSH
46343: LD_INT 1
46345: NEG
46346: PUSH
46347: EMPTY
46348: LIST
46349: LIST
46350: PUSH
46351: LD_INT 1
46353: NEG
46354: PUSH
46355: LD_INT 2
46357: NEG
46358: PUSH
46359: EMPTY
46360: LIST
46361: LIST
46362: PUSH
46363: LD_INT 1
46365: PUSH
46366: LD_INT 1
46368: NEG
46369: PUSH
46370: EMPTY
46371: LIST
46372: LIST
46373: PUSH
46374: LD_INT 2
46376: PUSH
46377: LD_INT 0
46379: PUSH
46380: EMPTY
46381: LIST
46382: LIST
46383: PUSH
46384: LD_INT 2
46386: PUSH
46387: LD_INT 1
46389: PUSH
46390: EMPTY
46391: LIST
46392: LIST
46393: PUSH
46394: LD_INT 2
46396: PUSH
46397: LD_INT 2
46399: PUSH
46400: EMPTY
46401: LIST
46402: LIST
46403: PUSH
46404: LD_INT 1
46406: PUSH
46407: LD_INT 2
46409: PUSH
46410: EMPTY
46411: LIST
46412: LIST
46413: PUSH
46414: LD_INT 1
46416: NEG
46417: PUSH
46418: LD_INT 1
46420: PUSH
46421: EMPTY
46422: LIST
46423: LIST
46424: PUSH
46425: LD_INT 2
46427: NEG
46428: PUSH
46429: LD_INT 0
46431: PUSH
46432: EMPTY
46433: LIST
46434: LIST
46435: PUSH
46436: LD_INT 2
46438: NEG
46439: PUSH
46440: LD_INT 1
46442: NEG
46443: PUSH
46444: EMPTY
46445: LIST
46446: LIST
46447: PUSH
46448: LD_INT 2
46450: NEG
46451: PUSH
46452: LD_INT 2
46454: NEG
46455: PUSH
46456: EMPTY
46457: LIST
46458: LIST
46459: PUSH
46460: LD_INT 2
46462: NEG
46463: PUSH
46464: LD_INT 3
46466: NEG
46467: PUSH
46468: EMPTY
46469: LIST
46470: LIST
46471: PUSH
46472: LD_INT 2
46474: PUSH
46475: LD_INT 1
46477: NEG
46478: PUSH
46479: EMPTY
46480: LIST
46481: LIST
46482: PUSH
46483: LD_INT 3
46485: PUSH
46486: LD_INT 0
46488: PUSH
46489: EMPTY
46490: LIST
46491: LIST
46492: PUSH
46493: LD_INT 3
46495: PUSH
46496: LD_INT 1
46498: PUSH
46499: EMPTY
46500: LIST
46501: LIST
46502: PUSH
46503: LD_INT 3
46505: PUSH
46506: LD_INT 2
46508: PUSH
46509: EMPTY
46510: LIST
46511: LIST
46512: PUSH
46513: LD_INT 3
46515: PUSH
46516: LD_INT 3
46518: PUSH
46519: EMPTY
46520: LIST
46521: LIST
46522: PUSH
46523: LD_INT 2
46525: PUSH
46526: LD_INT 3
46528: PUSH
46529: EMPTY
46530: LIST
46531: LIST
46532: PUSH
46533: LD_INT 2
46535: NEG
46536: PUSH
46537: LD_INT 1
46539: PUSH
46540: EMPTY
46541: LIST
46542: LIST
46543: PUSH
46544: LD_INT 3
46546: NEG
46547: PUSH
46548: LD_INT 0
46550: PUSH
46551: EMPTY
46552: LIST
46553: LIST
46554: PUSH
46555: LD_INT 3
46557: NEG
46558: PUSH
46559: LD_INT 1
46561: NEG
46562: PUSH
46563: EMPTY
46564: LIST
46565: LIST
46566: PUSH
46567: LD_INT 3
46569: NEG
46570: PUSH
46571: LD_INT 2
46573: NEG
46574: PUSH
46575: EMPTY
46576: LIST
46577: LIST
46578: PUSH
46579: LD_INT 3
46581: NEG
46582: PUSH
46583: LD_INT 3
46585: NEG
46586: PUSH
46587: EMPTY
46588: LIST
46589: LIST
46590: PUSH
46591: EMPTY
46592: LIST
46593: LIST
46594: LIST
46595: LIST
46596: LIST
46597: LIST
46598: LIST
46599: LIST
46600: LIST
46601: LIST
46602: LIST
46603: LIST
46604: LIST
46605: LIST
46606: LIST
46607: LIST
46608: LIST
46609: LIST
46610: LIST
46611: LIST
46612: LIST
46613: LIST
46614: LIST
46615: LIST
46616: LIST
46617: LIST
46618: LIST
46619: LIST
46620: LIST
46621: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46622: LD_ADDR_VAR 0 45
46626: PUSH
46627: LD_INT 0
46629: PUSH
46630: LD_INT 0
46632: PUSH
46633: EMPTY
46634: LIST
46635: LIST
46636: PUSH
46637: LD_INT 0
46639: PUSH
46640: LD_INT 1
46642: NEG
46643: PUSH
46644: EMPTY
46645: LIST
46646: LIST
46647: PUSH
46648: LD_INT 1
46650: PUSH
46651: LD_INT 0
46653: PUSH
46654: EMPTY
46655: LIST
46656: LIST
46657: PUSH
46658: LD_INT 1
46660: PUSH
46661: LD_INT 1
46663: PUSH
46664: EMPTY
46665: LIST
46666: LIST
46667: PUSH
46668: LD_INT 0
46670: PUSH
46671: LD_INT 1
46673: PUSH
46674: EMPTY
46675: LIST
46676: LIST
46677: PUSH
46678: LD_INT 1
46680: NEG
46681: PUSH
46682: LD_INT 0
46684: PUSH
46685: EMPTY
46686: LIST
46687: LIST
46688: PUSH
46689: LD_INT 1
46691: NEG
46692: PUSH
46693: LD_INT 1
46695: NEG
46696: PUSH
46697: EMPTY
46698: LIST
46699: LIST
46700: PUSH
46701: LD_INT 1
46703: NEG
46704: PUSH
46705: LD_INT 2
46707: NEG
46708: PUSH
46709: EMPTY
46710: LIST
46711: LIST
46712: PUSH
46713: LD_INT 0
46715: PUSH
46716: LD_INT 2
46718: NEG
46719: PUSH
46720: EMPTY
46721: LIST
46722: LIST
46723: PUSH
46724: LD_INT 1
46726: PUSH
46727: LD_INT 1
46729: NEG
46730: PUSH
46731: EMPTY
46732: LIST
46733: LIST
46734: PUSH
46735: LD_INT 2
46737: PUSH
46738: LD_INT 1
46740: PUSH
46741: EMPTY
46742: LIST
46743: LIST
46744: PUSH
46745: LD_INT 2
46747: PUSH
46748: LD_INT 2
46750: PUSH
46751: EMPTY
46752: LIST
46753: LIST
46754: PUSH
46755: LD_INT 1
46757: PUSH
46758: LD_INT 2
46760: PUSH
46761: EMPTY
46762: LIST
46763: LIST
46764: PUSH
46765: LD_INT 0
46767: PUSH
46768: LD_INT 2
46770: PUSH
46771: EMPTY
46772: LIST
46773: LIST
46774: PUSH
46775: LD_INT 1
46777: NEG
46778: PUSH
46779: LD_INT 1
46781: PUSH
46782: EMPTY
46783: LIST
46784: LIST
46785: PUSH
46786: LD_INT 2
46788: NEG
46789: PUSH
46790: LD_INT 1
46792: NEG
46793: PUSH
46794: EMPTY
46795: LIST
46796: LIST
46797: PUSH
46798: LD_INT 2
46800: NEG
46801: PUSH
46802: LD_INT 2
46804: NEG
46805: PUSH
46806: EMPTY
46807: LIST
46808: LIST
46809: PUSH
46810: LD_INT 2
46812: NEG
46813: PUSH
46814: LD_INT 3
46816: NEG
46817: PUSH
46818: EMPTY
46819: LIST
46820: LIST
46821: PUSH
46822: LD_INT 1
46824: NEG
46825: PUSH
46826: LD_INT 3
46828: NEG
46829: PUSH
46830: EMPTY
46831: LIST
46832: LIST
46833: PUSH
46834: LD_INT 0
46836: PUSH
46837: LD_INT 3
46839: NEG
46840: PUSH
46841: EMPTY
46842: LIST
46843: LIST
46844: PUSH
46845: LD_INT 1
46847: PUSH
46848: LD_INT 2
46850: NEG
46851: PUSH
46852: EMPTY
46853: LIST
46854: LIST
46855: PUSH
46856: LD_INT 3
46858: PUSH
46859: LD_INT 2
46861: PUSH
46862: EMPTY
46863: LIST
46864: LIST
46865: PUSH
46866: LD_INT 3
46868: PUSH
46869: LD_INT 3
46871: PUSH
46872: EMPTY
46873: LIST
46874: LIST
46875: PUSH
46876: LD_INT 2
46878: PUSH
46879: LD_INT 3
46881: PUSH
46882: EMPTY
46883: LIST
46884: LIST
46885: PUSH
46886: LD_INT 1
46888: PUSH
46889: LD_INT 3
46891: PUSH
46892: EMPTY
46893: LIST
46894: LIST
46895: PUSH
46896: LD_INT 0
46898: PUSH
46899: LD_INT 3
46901: PUSH
46902: EMPTY
46903: LIST
46904: LIST
46905: PUSH
46906: LD_INT 1
46908: NEG
46909: PUSH
46910: LD_INT 2
46912: PUSH
46913: EMPTY
46914: LIST
46915: LIST
46916: PUSH
46917: LD_INT 3
46919: NEG
46920: PUSH
46921: LD_INT 2
46923: NEG
46924: PUSH
46925: EMPTY
46926: LIST
46927: LIST
46928: PUSH
46929: LD_INT 3
46931: NEG
46932: PUSH
46933: LD_INT 3
46935: NEG
46936: PUSH
46937: EMPTY
46938: LIST
46939: LIST
46940: PUSH
46941: EMPTY
46942: LIST
46943: LIST
46944: LIST
46945: LIST
46946: LIST
46947: LIST
46948: LIST
46949: LIST
46950: LIST
46951: LIST
46952: LIST
46953: LIST
46954: LIST
46955: LIST
46956: LIST
46957: LIST
46958: LIST
46959: LIST
46960: LIST
46961: LIST
46962: LIST
46963: LIST
46964: LIST
46965: LIST
46966: LIST
46967: LIST
46968: LIST
46969: LIST
46970: LIST
46971: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46972: LD_ADDR_VAR 0 46
46976: PUSH
46977: LD_INT 0
46979: PUSH
46980: LD_INT 0
46982: PUSH
46983: EMPTY
46984: LIST
46985: LIST
46986: PUSH
46987: LD_INT 0
46989: PUSH
46990: LD_INT 1
46992: NEG
46993: PUSH
46994: EMPTY
46995: LIST
46996: LIST
46997: PUSH
46998: LD_INT 1
47000: PUSH
47001: LD_INT 0
47003: PUSH
47004: EMPTY
47005: LIST
47006: LIST
47007: PUSH
47008: LD_INT 1
47010: PUSH
47011: LD_INT 1
47013: PUSH
47014: EMPTY
47015: LIST
47016: LIST
47017: PUSH
47018: LD_INT 0
47020: PUSH
47021: LD_INT 1
47023: PUSH
47024: EMPTY
47025: LIST
47026: LIST
47027: PUSH
47028: LD_INT 1
47030: NEG
47031: PUSH
47032: LD_INT 0
47034: PUSH
47035: EMPTY
47036: LIST
47037: LIST
47038: PUSH
47039: LD_INT 1
47041: NEG
47042: PUSH
47043: LD_INT 1
47045: NEG
47046: PUSH
47047: EMPTY
47048: LIST
47049: LIST
47050: PUSH
47051: LD_INT 1
47053: NEG
47054: PUSH
47055: LD_INT 2
47057: NEG
47058: PUSH
47059: EMPTY
47060: LIST
47061: LIST
47062: PUSH
47063: LD_INT 0
47065: PUSH
47066: LD_INT 2
47068: NEG
47069: PUSH
47070: EMPTY
47071: LIST
47072: LIST
47073: PUSH
47074: LD_INT 1
47076: PUSH
47077: LD_INT 1
47079: NEG
47080: PUSH
47081: EMPTY
47082: LIST
47083: LIST
47084: PUSH
47085: LD_INT 2
47087: PUSH
47088: LD_INT 0
47090: PUSH
47091: EMPTY
47092: LIST
47093: LIST
47094: PUSH
47095: LD_INT 2
47097: PUSH
47098: LD_INT 1
47100: PUSH
47101: EMPTY
47102: LIST
47103: LIST
47104: PUSH
47105: LD_INT 1
47107: PUSH
47108: LD_INT 2
47110: PUSH
47111: EMPTY
47112: LIST
47113: LIST
47114: PUSH
47115: LD_INT 0
47117: PUSH
47118: LD_INT 2
47120: PUSH
47121: EMPTY
47122: LIST
47123: LIST
47124: PUSH
47125: LD_INT 1
47127: NEG
47128: PUSH
47129: LD_INT 1
47131: PUSH
47132: EMPTY
47133: LIST
47134: LIST
47135: PUSH
47136: LD_INT 2
47138: NEG
47139: PUSH
47140: LD_INT 0
47142: PUSH
47143: EMPTY
47144: LIST
47145: LIST
47146: PUSH
47147: LD_INT 2
47149: NEG
47150: PUSH
47151: LD_INT 1
47153: NEG
47154: PUSH
47155: EMPTY
47156: LIST
47157: LIST
47158: PUSH
47159: LD_INT 1
47161: NEG
47162: PUSH
47163: LD_INT 3
47165: NEG
47166: PUSH
47167: EMPTY
47168: LIST
47169: LIST
47170: PUSH
47171: LD_INT 0
47173: PUSH
47174: LD_INT 3
47176: NEG
47177: PUSH
47178: EMPTY
47179: LIST
47180: LIST
47181: PUSH
47182: LD_INT 1
47184: PUSH
47185: LD_INT 2
47187: NEG
47188: PUSH
47189: EMPTY
47190: LIST
47191: LIST
47192: PUSH
47193: LD_INT 2
47195: PUSH
47196: LD_INT 1
47198: NEG
47199: PUSH
47200: EMPTY
47201: LIST
47202: LIST
47203: PUSH
47204: LD_INT 3
47206: PUSH
47207: LD_INT 0
47209: PUSH
47210: EMPTY
47211: LIST
47212: LIST
47213: PUSH
47214: LD_INT 3
47216: PUSH
47217: LD_INT 1
47219: PUSH
47220: EMPTY
47221: LIST
47222: LIST
47223: PUSH
47224: LD_INT 1
47226: PUSH
47227: LD_INT 3
47229: PUSH
47230: EMPTY
47231: LIST
47232: LIST
47233: PUSH
47234: LD_INT 0
47236: PUSH
47237: LD_INT 3
47239: PUSH
47240: EMPTY
47241: LIST
47242: LIST
47243: PUSH
47244: LD_INT 1
47246: NEG
47247: PUSH
47248: LD_INT 2
47250: PUSH
47251: EMPTY
47252: LIST
47253: LIST
47254: PUSH
47255: LD_INT 2
47257: NEG
47258: PUSH
47259: LD_INT 1
47261: PUSH
47262: EMPTY
47263: LIST
47264: LIST
47265: PUSH
47266: LD_INT 3
47268: NEG
47269: PUSH
47270: LD_INT 0
47272: PUSH
47273: EMPTY
47274: LIST
47275: LIST
47276: PUSH
47277: LD_INT 3
47279: NEG
47280: PUSH
47281: LD_INT 1
47283: NEG
47284: PUSH
47285: EMPTY
47286: LIST
47287: LIST
47288: PUSH
47289: EMPTY
47290: LIST
47291: LIST
47292: LIST
47293: LIST
47294: LIST
47295: LIST
47296: LIST
47297: LIST
47298: LIST
47299: LIST
47300: LIST
47301: LIST
47302: LIST
47303: LIST
47304: LIST
47305: LIST
47306: LIST
47307: LIST
47308: LIST
47309: LIST
47310: LIST
47311: LIST
47312: LIST
47313: LIST
47314: LIST
47315: LIST
47316: LIST
47317: LIST
47318: LIST
47319: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47320: LD_ADDR_VAR 0 47
47324: PUSH
47325: LD_INT 0
47327: PUSH
47328: LD_INT 0
47330: PUSH
47331: EMPTY
47332: LIST
47333: LIST
47334: PUSH
47335: LD_INT 0
47337: PUSH
47338: LD_INT 1
47340: NEG
47341: PUSH
47342: EMPTY
47343: LIST
47344: LIST
47345: PUSH
47346: LD_INT 1
47348: PUSH
47349: LD_INT 0
47351: PUSH
47352: EMPTY
47353: LIST
47354: LIST
47355: PUSH
47356: LD_INT 1
47358: PUSH
47359: LD_INT 1
47361: PUSH
47362: EMPTY
47363: LIST
47364: LIST
47365: PUSH
47366: LD_INT 0
47368: PUSH
47369: LD_INT 1
47371: PUSH
47372: EMPTY
47373: LIST
47374: LIST
47375: PUSH
47376: LD_INT 1
47378: NEG
47379: PUSH
47380: LD_INT 0
47382: PUSH
47383: EMPTY
47384: LIST
47385: LIST
47386: PUSH
47387: LD_INT 1
47389: NEG
47390: PUSH
47391: LD_INT 1
47393: NEG
47394: PUSH
47395: EMPTY
47396: LIST
47397: LIST
47398: PUSH
47399: LD_INT 1
47401: NEG
47402: PUSH
47403: LD_INT 2
47405: NEG
47406: PUSH
47407: EMPTY
47408: LIST
47409: LIST
47410: PUSH
47411: LD_INT 0
47413: PUSH
47414: LD_INT 2
47416: NEG
47417: PUSH
47418: EMPTY
47419: LIST
47420: LIST
47421: PUSH
47422: LD_INT 1
47424: PUSH
47425: LD_INT 1
47427: NEG
47428: PUSH
47429: EMPTY
47430: LIST
47431: LIST
47432: PUSH
47433: LD_INT 2
47435: NEG
47436: PUSH
47437: LD_INT 1
47439: NEG
47440: PUSH
47441: EMPTY
47442: LIST
47443: LIST
47444: PUSH
47445: LD_INT 2
47447: NEG
47448: PUSH
47449: LD_INT 2
47451: NEG
47452: PUSH
47453: EMPTY
47454: LIST
47455: LIST
47456: PUSH
47457: EMPTY
47458: LIST
47459: LIST
47460: LIST
47461: LIST
47462: LIST
47463: LIST
47464: LIST
47465: LIST
47466: LIST
47467: LIST
47468: LIST
47469: LIST
47470: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
47471: LD_ADDR_VAR 0 48
47475: PUSH
47476: LD_INT 0
47478: PUSH
47479: LD_INT 0
47481: PUSH
47482: EMPTY
47483: LIST
47484: LIST
47485: PUSH
47486: LD_INT 0
47488: PUSH
47489: LD_INT 1
47491: NEG
47492: PUSH
47493: EMPTY
47494: LIST
47495: LIST
47496: PUSH
47497: LD_INT 1
47499: PUSH
47500: LD_INT 0
47502: PUSH
47503: EMPTY
47504: LIST
47505: LIST
47506: PUSH
47507: LD_INT 1
47509: PUSH
47510: LD_INT 1
47512: PUSH
47513: EMPTY
47514: LIST
47515: LIST
47516: PUSH
47517: LD_INT 0
47519: PUSH
47520: LD_INT 1
47522: PUSH
47523: EMPTY
47524: LIST
47525: LIST
47526: PUSH
47527: LD_INT 1
47529: NEG
47530: PUSH
47531: LD_INT 0
47533: PUSH
47534: EMPTY
47535: LIST
47536: LIST
47537: PUSH
47538: LD_INT 1
47540: NEG
47541: PUSH
47542: LD_INT 1
47544: NEG
47545: PUSH
47546: EMPTY
47547: LIST
47548: LIST
47549: PUSH
47550: LD_INT 1
47552: NEG
47553: PUSH
47554: LD_INT 2
47556: NEG
47557: PUSH
47558: EMPTY
47559: LIST
47560: LIST
47561: PUSH
47562: LD_INT 0
47564: PUSH
47565: LD_INT 2
47567: NEG
47568: PUSH
47569: EMPTY
47570: LIST
47571: LIST
47572: PUSH
47573: LD_INT 1
47575: PUSH
47576: LD_INT 1
47578: NEG
47579: PUSH
47580: EMPTY
47581: LIST
47582: LIST
47583: PUSH
47584: LD_INT 2
47586: PUSH
47587: LD_INT 0
47589: PUSH
47590: EMPTY
47591: LIST
47592: LIST
47593: PUSH
47594: LD_INT 2
47596: PUSH
47597: LD_INT 1
47599: PUSH
47600: EMPTY
47601: LIST
47602: LIST
47603: PUSH
47604: EMPTY
47605: LIST
47606: LIST
47607: LIST
47608: LIST
47609: LIST
47610: LIST
47611: LIST
47612: LIST
47613: LIST
47614: LIST
47615: LIST
47616: LIST
47617: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
47618: LD_ADDR_VAR 0 49
47622: PUSH
47623: LD_INT 0
47625: PUSH
47626: LD_INT 0
47628: PUSH
47629: EMPTY
47630: LIST
47631: LIST
47632: PUSH
47633: LD_INT 0
47635: PUSH
47636: LD_INT 1
47638: NEG
47639: PUSH
47640: EMPTY
47641: LIST
47642: LIST
47643: PUSH
47644: LD_INT 1
47646: PUSH
47647: LD_INT 0
47649: PUSH
47650: EMPTY
47651: LIST
47652: LIST
47653: PUSH
47654: LD_INT 1
47656: PUSH
47657: LD_INT 1
47659: PUSH
47660: EMPTY
47661: LIST
47662: LIST
47663: PUSH
47664: LD_INT 0
47666: PUSH
47667: LD_INT 1
47669: PUSH
47670: EMPTY
47671: LIST
47672: LIST
47673: PUSH
47674: LD_INT 1
47676: NEG
47677: PUSH
47678: LD_INT 0
47680: PUSH
47681: EMPTY
47682: LIST
47683: LIST
47684: PUSH
47685: LD_INT 1
47687: NEG
47688: PUSH
47689: LD_INT 1
47691: NEG
47692: PUSH
47693: EMPTY
47694: LIST
47695: LIST
47696: PUSH
47697: LD_INT 1
47699: PUSH
47700: LD_INT 1
47702: NEG
47703: PUSH
47704: EMPTY
47705: LIST
47706: LIST
47707: PUSH
47708: LD_INT 2
47710: PUSH
47711: LD_INT 0
47713: PUSH
47714: EMPTY
47715: LIST
47716: LIST
47717: PUSH
47718: LD_INT 2
47720: PUSH
47721: LD_INT 1
47723: PUSH
47724: EMPTY
47725: LIST
47726: LIST
47727: PUSH
47728: LD_INT 2
47730: PUSH
47731: LD_INT 2
47733: PUSH
47734: EMPTY
47735: LIST
47736: LIST
47737: PUSH
47738: LD_INT 1
47740: PUSH
47741: LD_INT 2
47743: PUSH
47744: EMPTY
47745: LIST
47746: LIST
47747: PUSH
47748: EMPTY
47749: LIST
47750: LIST
47751: LIST
47752: LIST
47753: LIST
47754: LIST
47755: LIST
47756: LIST
47757: LIST
47758: LIST
47759: LIST
47760: LIST
47761: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
47762: LD_ADDR_VAR 0 50
47766: PUSH
47767: LD_INT 0
47769: PUSH
47770: LD_INT 0
47772: PUSH
47773: EMPTY
47774: LIST
47775: LIST
47776: PUSH
47777: LD_INT 0
47779: PUSH
47780: LD_INT 1
47782: NEG
47783: PUSH
47784: EMPTY
47785: LIST
47786: LIST
47787: PUSH
47788: LD_INT 1
47790: PUSH
47791: LD_INT 0
47793: PUSH
47794: EMPTY
47795: LIST
47796: LIST
47797: PUSH
47798: LD_INT 1
47800: PUSH
47801: LD_INT 1
47803: PUSH
47804: EMPTY
47805: LIST
47806: LIST
47807: PUSH
47808: LD_INT 0
47810: PUSH
47811: LD_INT 1
47813: PUSH
47814: EMPTY
47815: LIST
47816: LIST
47817: PUSH
47818: LD_INT 1
47820: NEG
47821: PUSH
47822: LD_INT 0
47824: PUSH
47825: EMPTY
47826: LIST
47827: LIST
47828: PUSH
47829: LD_INT 1
47831: NEG
47832: PUSH
47833: LD_INT 1
47835: NEG
47836: PUSH
47837: EMPTY
47838: LIST
47839: LIST
47840: PUSH
47841: LD_INT 2
47843: PUSH
47844: LD_INT 1
47846: PUSH
47847: EMPTY
47848: LIST
47849: LIST
47850: PUSH
47851: LD_INT 2
47853: PUSH
47854: LD_INT 2
47856: PUSH
47857: EMPTY
47858: LIST
47859: LIST
47860: PUSH
47861: LD_INT 1
47863: PUSH
47864: LD_INT 2
47866: PUSH
47867: EMPTY
47868: LIST
47869: LIST
47870: PUSH
47871: LD_INT 0
47873: PUSH
47874: LD_INT 2
47876: PUSH
47877: EMPTY
47878: LIST
47879: LIST
47880: PUSH
47881: LD_INT 1
47883: NEG
47884: PUSH
47885: LD_INT 1
47887: PUSH
47888: EMPTY
47889: LIST
47890: LIST
47891: PUSH
47892: EMPTY
47893: LIST
47894: LIST
47895: LIST
47896: LIST
47897: LIST
47898: LIST
47899: LIST
47900: LIST
47901: LIST
47902: LIST
47903: LIST
47904: LIST
47905: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
47906: LD_ADDR_VAR 0 51
47910: PUSH
47911: LD_INT 0
47913: PUSH
47914: LD_INT 0
47916: PUSH
47917: EMPTY
47918: LIST
47919: LIST
47920: PUSH
47921: LD_INT 0
47923: PUSH
47924: LD_INT 1
47926: NEG
47927: PUSH
47928: EMPTY
47929: LIST
47930: LIST
47931: PUSH
47932: LD_INT 1
47934: PUSH
47935: LD_INT 0
47937: PUSH
47938: EMPTY
47939: LIST
47940: LIST
47941: PUSH
47942: LD_INT 1
47944: PUSH
47945: LD_INT 1
47947: PUSH
47948: EMPTY
47949: LIST
47950: LIST
47951: PUSH
47952: LD_INT 0
47954: PUSH
47955: LD_INT 1
47957: PUSH
47958: EMPTY
47959: LIST
47960: LIST
47961: PUSH
47962: LD_INT 1
47964: NEG
47965: PUSH
47966: LD_INT 0
47968: PUSH
47969: EMPTY
47970: LIST
47971: LIST
47972: PUSH
47973: LD_INT 1
47975: NEG
47976: PUSH
47977: LD_INT 1
47979: NEG
47980: PUSH
47981: EMPTY
47982: LIST
47983: LIST
47984: PUSH
47985: LD_INT 1
47987: PUSH
47988: LD_INT 2
47990: PUSH
47991: EMPTY
47992: LIST
47993: LIST
47994: PUSH
47995: LD_INT 0
47997: PUSH
47998: LD_INT 2
48000: PUSH
48001: EMPTY
48002: LIST
48003: LIST
48004: PUSH
48005: LD_INT 1
48007: NEG
48008: PUSH
48009: LD_INT 1
48011: PUSH
48012: EMPTY
48013: LIST
48014: LIST
48015: PUSH
48016: LD_INT 2
48018: NEG
48019: PUSH
48020: LD_INT 0
48022: PUSH
48023: EMPTY
48024: LIST
48025: LIST
48026: PUSH
48027: LD_INT 2
48029: NEG
48030: PUSH
48031: LD_INT 1
48033: NEG
48034: PUSH
48035: EMPTY
48036: LIST
48037: LIST
48038: PUSH
48039: EMPTY
48040: LIST
48041: LIST
48042: LIST
48043: LIST
48044: LIST
48045: LIST
48046: LIST
48047: LIST
48048: LIST
48049: LIST
48050: LIST
48051: LIST
48052: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48053: LD_ADDR_VAR 0 52
48057: PUSH
48058: LD_INT 0
48060: PUSH
48061: LD_INT 0
48063: PUSH
48064: EMPTY
48065: LIST
48066: LIST
48067: PUSH
48068: LD_INT 0
48070: PUSH
48071: LD_INT 1
48073: NEG
48074: PUSH
48075: EMPTY
48076: LIST
48077: LIST
48078: PUSH
48079: LD_INT 1
48081: PUSH
48082: LD_INT 0
48084: PUSH
48085: EMPTY
48086: LIST
48087: LIST
48088: PUSH
48089: LD_INT 1
48091: PUSH
48092: LD_INT 1
48094: PUSH
48095: EMPTY
48096: LIST
48097: LIST
48098: PUSH
48099: LD_INT 0
48101: PUSH
48102: LD_INT 1
48104: PUSH
48105: EMPTY
48106: LIST
48107: LIST
48108: PUSH
48109: LD_INT 1
48111: NEG
48112: PUSH
48113: LD_INT 0
48115: PUSH
48116: EMPTY
48117: LIST
48118: LIST
48119: PUSH
48120: LD_INT 1
48122: NEG
48123: PUSH
48124: LD_INT 1
48126: NEG
48127: PUSH
48128: EMPTY
48129: LIST
48130: LIST
48131: PUSH
48132: LD_INT 1
48134: NEG
48135: PUSH
48136: LD_INT 2
48138: NEG
48139: PUSH
48140: EMPTY
48141: LIST
48142: LIST
48143: PUSH
48144: LD_INT 1
48146: NEG
48147: PUSH
48148: LD_INT 1
48150: PUSH
48151: EMPTY
48152: LIST
48153: LIST
48154: PUSH
48155: LD_INT 2
48157: NEG
48158: PUSH
48159: LD_INT 0
48161: PUSH
48162: EMPTY
48163: LIST
48164: LIST
48165: PUSH
48166: LD_INT 2
48168: NEG
48169: PUSH
48170: LD_INT 1
48172: NEG
48173: PUSH
48174: EMPTY
48175: LIST
48176: LIST
48177: PUSH
48178: LD_INT 2
48180: NEG
48181: PUSH
48182: LD_INT 2
48184: NEG
48185: PUSH
48186: EMPTY
48187: LIST
48188: LIST
48189: PUSH
48190: EMPTY
48191: LIST
48192: LIST
48193: LIST
48194: LIST
48195: LIST
48196: LIST
48197: LIST
48198: LIST
48199: LIST
48200: LIST
48201: LIST
48202: LIST
48203: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48204: LD_ADDR_VAR 0 53
48208: PUSH
48209: LD_INT 0
48211: PUSH
48212: LD_INT 0
48214: PUSH
48215: EMPTY
48216: LIST
48217: LIST
48218: PUSH
48219: LD_INT 0
48221: PUSH
48222: LD_INT 1
48224: NEG
48225: PUSH
48226: EMPTY
48227: LIST
48228: LIST
48229: PUSH
48230: LD_INT 1
48232: PUSH
48233: LD_INT 0
48235: PUSH
48236: EMPTY
48237: LIST
48238: LIST
48239: PUSH
48240: LD_INT 1
48242: PUSH
48243: LD_INT 1
48245: PUSH
48246: EMPTY
48247: LIST
48248: LIST
48249: PUSH
48250: LD_INT 0
48252: PUSH
48253: LD_INT 1
48255: PUSH
48256: EMPTY
48257: LIST
48258: LIST
48259: PUSH
48260: LD_INT 1
48262: NEG
48263: PUSH
48264: LD_INT 0
48266: PUSH
48267: EMPTY
48268: LIST
48269: LIST
48270: PUSH
48271: LD_INT 1
48273: NEG
48274: PUSH
48275: LD_INT 1
48277: NEG
48278: PUSH
48279: EMPTY
48280: LIST
48281: LIST
48282: PUSH
48283: LD_INT 1
48285: NEG
48286: PUSH
48287: LD_INT 2
48289: NEG
48290: PUSH
48291: EMPTY
48292: LIST
48293: LIST
48294: PUSH
48295: LD_INT 0
48297: PUSH
48298: LD_INT 2
48300: NEG
48301: PUSH
48302: EMPTY
48303: LIST
48304: LIST
48305: PUSH
48306: LD_INT 1
48308: PUSH
48309: LD_INT 1
48311: NEG
48312: PUSH
48313: EMPTY
48314: LIST
48315: LIST
48316: PUSH
48317: LD_INT 2
48319: PUSH
48320: LD_INT 0
48322: PUSH
48323: EMPTY
48324: LIST
48325: LIST
48326: PUSH
48327: LD_INT 2
48329: PUSH
48330: LD_INT 1
48332: PUSH
48333: EMPTY
48334: LIST
48335: LIST
48336: PUSH
48337: LD_INT 2
48339: PUSH
48340: LD_INT 2
48342: PUSH
48343: EMPTY
48344: LIST
48345: LIST
48346: PUSH
48347: LD_INT 1
48349: PUSH
48350: LD_INT 2
48352: PUSH
48353: EMPTY
48354: LIST
48355: LIST
48356: PUSH
48357: LD_INT 0
48359: PUSH
48360: LD_INT 2
48362: PUSH
48363: EMPTY
48364: LIST
48365: LIST
48366: PUSH
48367: LD_INT 1
48369: NEG
48370: PUSH
48371: LD_INT 1
48373: PUSH
48374: EMPTY
48375: LIST
48376: LIST
48377: PUSH
48378: LD_INT 2
48380: NEG
48381: PUSH
48382: LD_INT 0
48384: PUSH
48385: EMPTY
48386: LIST
48387: LIST
48388: PUSH
48389: LD_INT 2
48391: NEG
48392: PUSH
48393: LD_INT 1
48395: NEG
48396: PUSH
48397: EMPTY
48398: LIST
48399: LIST
48400: PUSH
48401: LD_INT 2
48403: NEG
48404: PUSH
48405: LD_INT 2
48407: NEG
48408: PUSH
48409: EMPTY
48410: LIST
48411: LIST
48412: PUSH
48413: EMPTY
48414: LIST
48415: LIST
48416: LIST
48417: LIST
48418: LIST
48419: LIST
48420: LIST
48421: LIST
48422: LIST
48423: LIST
48424: LIST
48425: LIST
48426: LIST
48427: LIST
48428: LIST
48429: LIST
48430: LIST
48431: LIST
48432: LIST
48433: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48434: LD_ADDR_VAR 0 54
48438: PUSH
48439: LD_INT 0
48441: PUSH
48442: LD_INT 0
48444: PUSH
48445: EMPTY
48446: LIST
48447: LIST
48448: PUSH
48449: LD_INT 0
48451: PUSH
48452: LD_INT 1
48454: NEG
48455: PUSH
48456: EMPTY
48457: LIST
48458: LIST
48459: PUSH
48460: LD_INT 1
48462: PUSH
48463: LD_INT 0
48465: PUSH
48466: EMPTY
48467: LIST
48468: LIST
48469: PUSH
48470: LD_INT 1
48472: PUSH
48473: LD_INT 1
48475: PUSH
48476: EMPTY
48477: LIST
48478: LIST
48479: PUSH
48480: LD_INT 0
48482: PUSH
48483: LD_INT 1
48485: PUSH
48486: EMPTY
48487: LIST
48488: LIST
48489: PUSH
48490: LD_INT 1
48492: NEG
48493: PUSH
48494: LD_INT 0
48496: PUSH
48497: EMPTY
48498: LIST
48499: LIST
48500: PUSH
48501: LD_INT 1
48503: NEG
48504: PUSH
48505: LD_INT 1
48507: NEG
48508: PUSH
48509: EMPTY
48510: LIST
48511: LIST
48512: PUSH
48513: LD_INT 1
48515: NEG
48516: PUSH
48517: LD_INT 2
48519: NEG
48520: PUSH
48521: EMPTY
48522: LIST
48523: LIST
48524: PUSH
48525: LD_INT 0
48527: PUSH
48528: LD_INT 2
48530: NEG
48531: PUSH
48532: EMPTY
48533: LIST
48534: LIST
48535: PUSH
48536: LD_INT 1
48538: PUSH
48539: LD_INT 1
48541: NEG
48542: PUSH
48543: EMPTY
48544: LIST
48545: LIST
48546: PUSH
48547: LD_INT 2
48549: PUSH
48550: LD_INT 0
48552: PUSH
48553: EMPTY
48554: LIST
48555: LIST
48556: PUSH
48557: LD_INT 2
48559: PUSH
48560: LD_INT 1
48562: PUSH
48563: EMPTY
48564: LIST
48565: LIST
48566: PUSH
48567: LD_INT 2
48569: PUSH
48570: LD_INT 2
48572: PUSH
48573: EMPTY
48574: LIST
48575: LIST
48576: PUSH
48577: LD_INT 1
48579: PUSH
48580: LD_INT 2
48582: PUSH
48583: EMPTY
48584: LIST
48585: LIST
48586: PUSH
48587: LD_INT 0
48589: PUSH
48590: LD_INT 2
48592: PUSH
48593: EMPTY
48594: LIST
48595: LIST
48596: PUSH
48597: LD_INT 1
48599: NEG
48600: PUSH
48601: LD_INT 1
48603: PUSH
48604: EMPTY
48605: LIST
48606: LIST
48607: PUSH
48608: LD_INT 2
48610: NEG
48611: PUSH
48612: LD_INT 0
48614: PUSH
48615: EMPTY
48616: LIST
48617: LIST
48618: PUSH
48619: LD_INT 2
48621: NEG
48622: PUSH
48623: LD_INT 1
48625: NEG
48626: PUSH
48627: EMPTY
48628: LIST
48629: LIST
48630: PUSH
48631: LD_INT 2
48633: NEG
48634: PUSH
48635: LD_INT 2
48637: NEG
48638: PUSH
48639: EMPTY
48640: LIST
48641: LIST
48642: PUSH
48643: EMPTY
48644: LIST
48645: LIST
48646: LIST
48647: LIST
48648: LIST
48649: LIST
48650: LIST
48651: LIST
48652: LIST
48653: LIST
48654: LIST
48655: LIST
48656: LIST
48657: LIST
48658: LIST
48659: LIST
48660: LIST
48661: LIST
48662: LIST
48663: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48664: LD_ADDR_VAR 0 55
48668: PUSH
48669: LD_INT 0
48671: PUSH
48672: LD_INT 0
48674: PUSH
48675: EMPTY
48676: LIST
48677: LIST
48678: PUSH
48679: LD_INT 0
48681: PUSH
48682: LD_INT 1
48684: NEG
48685: PUSH
48686: EMPTY
48687: LIST
48688: LIST
48689: PUSH
48690: LD_INT 1
48692: PUSH
48693: LD_INT 0
48695: PUSH
48696: EMPTY
48697: LIST
48698: LIST
48699: PUSH
48700: LD_INT 1
48702: PUSH
48703: LD_INT 1
48705: PUSH
48706: EMPTY
48707: LIST
48708: LIST
48709: PUSH
48710: LD_INT 0
48712: PUSH
48713: LD_INT 1
48715: PUSH
48716: EMPTY
48717: LIST
48718: LIST
48719: PUSH
48720: LD_INT 1
48722: NEG
48723: PUSH
48724: LD_INT 0
48726: PUSH
48727: EMPTY
48728: LIST
48729: LIST
48730: PUSH
48731: LD_INT 1
48733: NEG
48734: PUSH
48735: LD_INT 1
48737: NEG
48738: PUSH
48739: EMPTY
48740: LIST
48741: LIST
48742: PUSH
48743: LD_INT 1
48745: NEG
48746: PUSH
48747: LD_INT 2
48749: NEG
48750: PUSH
48751: EMPTY
48752: LIST
48753: LIST
48754: PUSH
48755: LD_INT 0
48757: PUSH
48758: LD_INT 2
48760: NEG
48761: PUSH
48762: EMPTY
48763: LIST
48764: LIST
48765: PUSH
48766: LD_INT 1
48768: PUSH
48769: LD_INT 1
48771: NEG
48772: PUSH
48773: EMPTY
48774: LIST
48775: LIST
48776: PUSH
48777: LD_INT 2
48779: PUSH
48780: LD_INT 0
48782: PUSH
48783: EMPTY
48784: LIST
48785: LIST
48786: PUSH
48787: LD_INT 2
48789: PUSH
48790: LD_INT 1
48792: PUSH
48793: EMPTY
48794: LIST
48795: LIST
48796: PUSH
48797: LD_INT 2
48799: PUSH
48800: LD_INT 2
48802: PUSH
48803: EMPTY
48804: LIST
48805: LIST
48806: PUSH
48807: LD_INT 1
48809: PUSH
48810: LD_INT 2
48812: PUSH
48813: EMPTY
48814: LIST
48815: LIST
48816: PUSH
48817: LD_INT 0
48819: PUSH
48820: LD_INT 2
48822: PUSH
48823: EMPTY
48824: LIST
48825: LIST
48826: PUSH
48827: LD_INT 1
48829: NEG
48830: PUSH
48831: LD_INT 1
48833: PUSH
48834: EMPTY
48835: LIST
48836: LIST
48837: PUSH
48838: LD_INT 2
48840: NEG
48841: PUSH
48842: LD_INT 0
48844: PUSH
48845: EMPTY
48846: LIST
48847: LIST
48848: PUSH
48849: LD_INT 2
48851: NEG
48852: PUSH
48853: LD_INT 1
48855: NEG
48856: PUSH
48857: EMPTY
48858: LIST
48859: LIST
48860: PUSH
48861: LD_INT 2
48863: NEG
48864: PUSH
48865: LD_INT 2
48867: NEG
48868: PUSH
48869: EMPTY
48870: LIST
48871: LIST
48872: PUSH
48873: EMPTY
48874: LIST
48875: LIST
48876: LIST
48877: LIST
48878: LIST
48879: LIST
48880: LIST
48881: LIST
48882: LIST
48883: LIST
48884: LIST
48885: LIST
48886: LIST
48887: LIST
48888: LIST
48889: LIST
48890: LIST
48891: LIST
48892: LIST
48893: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48894: LD_ADDR_VAR 0 56
48898: PUSH
48899: LD_INT 0
48901: PUSH
48902: LD_INT 0
48904: PUSH
48905: EMPTY
48906: LIST
48907: LIST
48908: PUSH
48909: LD_INT 0
48911: PUSH
48912: LD_INT 1
48914: NEG
48915: PUSH
48916: EMPTY
48917: LIST
48918: LIST
48919: PUSH
48920: LD_INT 1
48922: PUSH
48923: LD_INT 0
48925: PUSH
48926: EMPTY
48927: LIST
48928: LIST
48929: PUSH
48930: LD_INT 1
48932: PUSH
48933: LD_INT 1
48935: PUSH
48936: EMPTY
48937: LIST
48938: LIST
48939: PUSH
48940: LD_INT 0
48942: PUSH
48943: LD_INT 1
48945: PUSH
48946: EMPTY
48947: LIST
48948: LIST
48949: PUSH
48950: LD_INT 1
48952: NEG
48953: PUSH
48954: LD_INT 0
48956: PUSH
48957: EMPTY
48958: LIST
48959: LIST
48960: PUSH
48961: LD_INT 1
48963: NEG
48964: PUSH
48965: LD_INT 1
48967: NEG
48968: PUSH
48969: EMPTY
48970: LIST
48971: LIST
48972: PUSH
48973: LD_INT 1
48975: NEG
48976: PUSH
48977: LD_INT 2
48979: NEG
48980: PUSH
48981: EMPTY
48982: LIST
48983: LIST
48984: PUSH
48985: LD_INT 0
48987: PUSH
48988: LD_INT 2
48990: NEG
48991: PUSH
48992: EMPTY
48993: LIST
48994: LIST
48995: PUSH
48996: LD_INT 1
48998: PUSH
48999: LD_INT 1
49001: NEG
49002: PUSH
49003: EMPTY
49004: LIST
49005: LIST
49006: PUSH
49007: LD_INT 2
49009: PUSH
49010: LD_INT 0
49012: PUSH
49013: EMPTY
49014: LIST
49015: LIST
49016: PUSH
49017: LD_INT 2
49019: PUSH
49020: LD_INT 1
49022: PUSH
49023: EMPTY
49024: LIST
49025: LIST
49026: PUSH
49027: LD_INT 2
49029: PUSH
49030: LD_INT 2
49032: PUSH
49033: EMPTY
49034: LIST
49035: LIST
49036: PUSH
49037: LD_INT 1
49039: PUSH
49040: LD_INT 2
49042: PUSH
49043: EMPTY
49044: LIST
49045: LIST
49046: PUSH
49047: LD_INT 0
49049: PUSH
49050: LD_INT 2
49052: PUSH
49053: EMPTY
49054: LIST
49055: LIST
49056: PUSH
49057: LD_INT 1
49059: NEG
49060: PUSH
49061: LD_INT 1
49063: PUSH
49064: EMPTY
49065: LIST
49066: LIST
49067: PUSH
49068: LD_INT 2
49070: NEG
49071: PUSH
49072: LD_INT 0
49074: PUSH
49075: EMPTY
49076: LIST
49077: LIST
49078: PUSH
49079: LD_INT 2
49081: NEG
49082: PUSH
49083: LD_INT 1
49085: NEG
49086: PUSH
49087: EMPTY
49088: LIST
49089: LIST
49090: PUSH
49091: LD_INT 2
49093: NEG
49094: PUSH
49095: LD_INT 2
49097: NEG
49098: PUSH
49099: EMPTY
49100: LIST
49101: LIST
49102: PUSH
49103: EMPTY
49104: LIST
49105: LIST
49106: LIST
49107: LIST
49108: LIST
49109: LIST
49110: LIST
49111: LIST
49112: LIST
49113: LIST
49114: LIST
49115: LIST
49116: LIST
49117: LIST
49118: LIST
49119: LIST
49120: LIST
49121: LIST
49122: LIST
49123: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49124: LD_ADDR_VAR 0 57
49128: PUSH
49129: LD_INT 0
49131: PUSH
49132: LD_INT 0
49134: PUSH
49135: EMPTY
49136: LIST
49137: LIST
49138: PUSH
49139: LD_INT 0
49141: PUSH
49142: LD_INT 1
49144: NEG
49145: PUSH
49146: EMPTY
49147: LIST
49148: LIST
49149: PUSH
49150: LD_INT 1
49152: PUSH
49153: LD_INT 0
49155: PUSH
49156: EMPTY
49157: LIST
49158: LIST
49159: PUSH
49160: LD_INT 1
49162: PUSH
49163: LD_INT 1
49165: PUSH
49166: EMPTY
49167: LIST
49168: LIST
49169: PUSH
49170: LD_INT 0
49172: PUSH
49173: LD_INT 1
49175: PUSH
49176: EMPTY
49177: LIST
49178: LIST
49179: PUSH
49180: LD_INT 1
49182: NEG
49183: PUSH
49184: LD_INT 0
49186: PUSH
49187: EMPTY
49188: LIST
49189: LIST
49190: PUSH
49191: LD_INT 1
49193: NEG
49194: PUSH
49195: LD_INT 1
49197: NEG
49198: PUSH
49199: EMPTY
49200: LIST
49201: LIST
49202: PUSH
49203: LD_INT 1
49205: NEG
49206: PUSH
49207: LD_INT 2
49209: NEG
49210: PUSH
49211: EMPTY
49212: LIST
49213: LIST
49214: PUSH
49215: LD_INT 0
49217: PUSH
49218: LD_INT 2
49220: NEG
49221: PUSH
49222: EMPTY
49223: LIST
49224: LIST
49225: PUSH
49226: LD_INT 1
49228: PUSH
49229: LD_INT 1
49231: NEG
49232: PUSH
49233: EMPTY
49234: LIST
49235: LIST
49236: PUSH
49237: LD_INT 2
49239: PUSH
49240: LD_INT 0
49242: PUSH
49243: EMPTY
49244: LIST
49245: LIST
49246: PUSH
49247: LD_INT 2
49249: PUSH
49250: LD_INT 1
49252: PUSH
49253: EMPTY
49254: LIST
49255: LIST
49256: PUSH
49257: LD_INT 2
49259: PUSH
49260: LD_INT 2
49262: PUSH
49263: EMPTY
49264: LIST
49265: LIST
49266: PUSH
49267: LD_INT 1
49269: PUSH
49270: LD_INT 2
49272: PUSH
49273: EMPTY
49274: LIST
49275: LIST
49276: PUSH
49277: LD_INT 0
49279: PUSH
49280: LD_INT 2
49282: PUSH
49283: EMPTY
49284: LIST
49285: LIST
49286: PUSH
49287: LD_INT 1
49289: NEG
49290: PUSH
49291: LD_INT 1
49293: PUSH
49294: EMPTY
49295: LIST
49296: LIST
49297: PUSH
49298: LD_INT 2
49300: NEG
49301: PUSH
49302: LD_INT 0
49304: PUSH
49305: EMPTY
49306: LIST
49307: LIST
49308: PUSH
49309: LD_INT 2
49311: NEG
49312: PUSH
49313: LD_INT 1
49315: NEG
49316: PUSH
49317: EMPTY
49318: LIST
49319: LIST
49320: PUSH
49321: LD_INT 2
49323: NEG
49324: PUSH
49325: LD_INT 2
49327: NEG
49328: PUSH
49329: EMPTY
49330: LIST
49331: LIST
49332: PUSH
49333: EMPTY
49334: LIST
49335: LIST
49336: LIST
49337: LIST
49338: LIST
49339: LIST
49340: LIST
49341: LIST
49342: LIST
49343: LIST
49344: LIST
49345: LIST
49346: LIST
49347: LIST
49348: LIST
49349: LIST
49350: LIST
49351: LIST
49352: LIST
49353: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49354: LD_ADDR_VAR 0 58
49358: PUSH
49359: LD_INT 0
49361: PUSH
49362: LD_INT 0
49364: PUSH
49365: EMPTY
49366: LIST
49367: LIST
49368: PUSH
49369: LD_INT 0
49371: PUSH
49372: LD_INT 1
49374: NEG
49375: PUSH
49376: EMPTY
49377: LIST
49378: LIST
49379: PUSH
49380: LD_INT 1
49382: PUSH
49383: LD_INT 0
49385: PUSH
49386: EMPTY
49387: LIST
49388: LIST
49389: PUSH
49390: LD_INT 1
49392: PUSH
49393: LD_INT 1
49395: PUSH
49396: EMPTY
49397: LIST
49398: LIST
49399: PUSH
49400: LD_INT 0
49402: PUSH
49403: LD_INT 1
49405: PUSH
49406: EMPTY
49407: LIST
49408: LIST
49409: PUSH
49410: LD_INT 1
49412: NEG
49413: PUSH
49414: LD_INT 0
49416: PUSH
49417: EMPTY
49418: LIST
49419: LIST
49420: PUSH
49421: LD_INT 1
49423: NEG
49424: PUSH
49425: LD_INT 1
49427: NEG
49428: PUSH
49429: EMPTY
49430: LIST
49431: LIST
49432: PUSH
49433: LD_INT 1
49435: NEG
49436: PUSH
49437: LD_INT 2
49439: NEG
49440: PUSH
49441: EMPTY
49442: LIST
49443: LIST
49444: PUSH
49445: LD_INT 0
49447: PUSH
49448: LD_INT 2
49450: NEG
49451: PUSH
49452: EMPTY
49453: LIST
49454: LIST
49455: PUSH
49456: LD_INT 1
49458: PUSH
49459: LD_INT 1
49461: NEG
49462: PUSH
49463: EMPTY
49464: LIST
49465: LIST
49466: PUSH
49467: LD_INT 2
49469: PUSH
49470: LD_INT 0
49472: PUSH
49473: EMPTY
49474: LIST
49475: LIST
49476: PUSH
49477: LD_INT 2
49479: PUSH
49480: LD_INT 1
49482: PUSH
49483: EMPTY
49484: LIST
49485: LIST
49486: PUSH
49487: LD_INT 2
49489: PUSH
49490: LD_INT 2
49492: PUSH
49493: EMPTY
49494: LIST
49495: LIST
49496: PUSH
49497: LD_INT 1
49499: PUSH
49500: LD_INT 2
49502: PUSH
49503: EMPTY
49504: LIST
49505: LIST
49506: PUSH
49507: LD_INT 0
49509: PUSH
49510: LD_INT 2
49512: PUSH
49513: EMPTY
49514: LIST
49515: LIST
49516: PUSH
49517: LD_INT 1
49519: NEG
49520: PUSH
49521: LD_INT 1
49523: PUSH
49524: EMPTY
49525: LIST
49526: LIST
49527: PUSH
49528: LD_INT 2
49530: NEG
49531: PUSH
49532: LD_INT 0
49534: PUSH
49535: EMPTY
49536: LIST
49537: LIST
49538: PUSH
49539: LD_INT 2
49541: NEG
49542: PUSH
49543: LD_INT 1
49545: NEG
49546: PUSH
49547: EMPTY
49548: LIST
49549: LIST
49550: PUSH
49551: LD_INT 2
49553: NEG
49554: PUSH
49555: LD_INT 2
49557: NEG
49558: PUSH
49559: EMPTY
49560: LIST
49561: LIST
49562: PUSH
49563: EMPTY
49564: LIST
49565: LIST
49566: LIST
49567: LIST
49568: LIST
49569: LIST
49570: LIST
49571: LIST
49572: LIST
49573: LIST
49574: LIST
49575: LIST
49576: LIST
49577: LIST
49578: LIST
49579: LIST
49580: LIST
49581: LIST
49582: LIST
49583: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49584: LD_ADDR_VAR 0 59
49588: PUSH
49589: LD_INT 0
49591: PUSH
49592: LD_INT 0
49594: PUSH
49595: EMPTY
49596: LIST
49597: LIST
49598: PUSH
49599: LD_INT 0
49601: PUSH
49602: LD_INT 1
49604: NEG
49605: PUSH
49606: EMPTY
49607: LIST
49608: LIST
49609: PUSH
49610: LD_INT 1
49612: PUSH
49613: LD_INT 0
49615: PUSH
49616: EMPTY
49617: LIST
49618: LIST
49619: PUSH
49620: LD_INT 1
49622: PUSH
49623: LD_INT 1
49625: PUSH
49626: EMPTY
49627: LIST
49628: LIST
49629: PUSH
49630: LD_INT 0
49632: PUSH
49633: LD_INT 1
49635: PUSH
49636: EMPTY
49637: LIST
49638: LIST
49639: PUSH
49640: LD_INT 1
49642: NEG
49643: PUSH
49644: LD_INT 0
49646: PUSH
49647: EMPTY
49648: LIST
49649: LIST
49650: PUSH
49651: LD_INT 1
49653: NEG
49654: PUSH
49655: LD_INT 1
49657: NEG
49658: PUSH
49659: EMPTY
49660: LIST
49661: LIST
49662: PUSH
49663: EMPTY
49664: LIST
49665: LIST
49666: LIST
49667: LIST
49668: LIST
49669: LIST
49670: LIST
49671: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49672: LD_ADDR_VAR 0 60
49676: PUSH
49677: LD_INT 0
49679: PUSH
49680: LD_INT 0
49682: PUSH
49683: EMPTY
49684: LIST
49685: LIST
49686: PUSH
49687: LD_INT 0
49689: PUSH
49690: LD_INT 1
49692: NEG
49693: PUSH
49694: EMPTY
49695: LIST
49696: LIST
49697: PUSH
49698: LD_INT 1
49700: PUSH
49701: LD_INT 0
49703: PUSH
49704: EMPTY
49705: LIST
49706: LIST
49707: PUSH
49708: LD_INT 1
49710: PUSH
49711: LD_INT 1
49713: PUSH
49714: EMPTY
49715: LIST
49716: LIST
49717: PUSH
49718: LD_INT 0
49720: PUSH
49721: LD_INT 1
49723: PUSH
49724: EMPTY
49725: LIST
49726: LIST
49727: PUSH
49728: LD_INT 1
49730: NEG
49731: PUSH
49732: LD_INT 0
49734: PUSH
49735: EMPTY
49736: LIST
49737: LIST
49738: PUSH
49739: LD_INT 1
49741: NEG
49742: PUSH
49743: LD_INT 1
49745: NEG
49746: PUSH
49747: EMPTY
49748: LIST
49749: LIST
49750: PUSH
49751: EMPTY
49752: LIST
49753: LIST
49754: LIST
49755: LIST
49756: LIST
49757: LIST
49758: LIST
49759: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49760: LD_ADDR_VAR 0 61
49764: PUSH
49765: LD_INT 0
49767: PUSH
49768: LD_INT 0
49770: PUSH
49771: EMPTY
49772: LIST
49773: LIST
49774: PUSH
49775: LD_INT 0
49777: PUSH
49778: LD_INT 1
49780: NEG
49781: PUSH
49782: EMPTY
49783: LIST
49784: LIST
49785: PUSH
49786: LD_INT 1
49788: PUSH
49789: LD_INT 0
49791: PUSH
49792: EMPTY
49793: LIST
49794: LIST
49795: PUSH
49796: LD_INT 1
49798: PUSH
49799: LD_INT 1
49801: PUSH
49802: EMPTY
49803: LIST
49804: LIST
49805: PUSH
49806: LD_INT 0
49808: PUSH
49809: LD_INT 1
49811: PUSH
49812: EMPTY
49813: LIST
49814: LIST
49815: PUSH
49816: LD_INT 1
49818: NEG
49819: PUSH
49820: LD_INT 0
49822: PUSH
49823: EMPTY
49824: LIST
49825: LIST
49826: PUSH
49827: LD_INT 1
49829: NEG
49830: PUSH
49831: LD_INT 1
49833: NEG
49834: PUSH
49835: EMPTY
49836: LIST
49837: LIST
49838: PUSH
49839: EMPTY
49840: LIST
49841: LIST
49842: LIST
49843: LIST
49844: LIST
49845: LIST
49846: LIST
49847: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49848: LD_ADDR_VAR 0 62
49852: PUSH
49853: LD_INT 0
49855: PUSH
49856: LD_INT 0
49858: PUSH
49859: EMPTY
49860: LIST
49861: LIST
49862: PUSH
49863: LD_INT 0
49865: PUSH
49866: LD_INT 1
49868: NEG
49869: PUSH
49870: EMPTY
49871: LIST
49872: LIST
49873: PUSH
49874: LD_INT 1
49876: PUSH
49877: LD_INT 0
49879: PUSH
49880: EMPTY
49881: LIST
49882: LIST
49883: PUSH
49884: LD_INT 1
49886: PUSH
49887: LD_INT 1
49889: PUSH
49890: EMPTY
49891: LIST
49892: LIST
49893: PUSH
49894: LD_INT 0
49896: PUSH
49897: LD_INT 1
49899: PUSH
49900: EMPTY
49901: LIST
49902: LIST
49903: PUSH
49904: LD_INT 1
49906: NEG
49907: PUSH
49908: LD_INT 0
49910: PUSH
49911: EMPTY
49912: LIST
49913: LIST
49914: PUSH
49915: LD_INT 1
49917: NEG
49918: PUSH
49919: LD_INT 1
49921: NEG
49922: PUSH
49923: EMPTY
49924: LIST
49925: LIST
49926: PUSH
49927: EMPTY
49928: LIST
49929: LIST
49930: LIST
49931: LIST
49932: LIST
49933: LIST
49934: LIST
49935: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49936: LD_ADDR_VAR 0 63
49940: PUSH
49941: LD_INT 0
49943: PUSH
49944: LD_INT 0
49946: PUSH
49947: EMPTY
49948: LIST
49949: LIST
49950: PUSH
49951: LD_INT 0
49953: PUSH
49954: LD_INT 1
49956: NEG
49957: PUSH
49958: EMPTY
49959: LIST
49960: LIST
49961: PUSH
49962: LD_INT 1
49964: PUSH
49965: LD_INT 0
49967: PUSH
49968: EMPTY
49969: LIST
49970: LIST
49971: PUSH
49972: LD_INT 1
49974: PUSH
49975: LD_INT 1
49977: PUSH
49978: EMPTY
49979: LIST
49980: LIST
49981: PUSH
49982: LD_INT 0
49984: PUSH
49985: LD_INT 1
49987: PUSH
49988: EMPTY
49989: LIST
49990: LIST
49991: PUSH
49992: LD_INT 1
49994: NEG
49995: PUSH
49996: LD_INT 0
49998: PUSH
49999: EMPTY
50000: LIST
50001: LIST
50002: PUSH
50003: LD_INT 1
50005: NEG
50006: PUSH
50007: LD_INT 1
50009: NEG
50010: PUSH
50011: EMPTY
50012: LIST
50013: LIST
50014: PUSH
50015: EMPTY
50016: LIST
50017: LIST
50018: LIST
50019: LIST
50020: LIST
50021: LIST
50022: LIST
50023: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50024: LD_ADDR_VAR 0 64
50028: PUSH
50029: LD_INT 0
50031: PUSH
50032: LD_INT 0
50034: PUSH
50035: EMPTY
50036: LIST
50037: LIST
50038: PUSH
50039: LD_INT 0
50041: PUSH
50042: LD_INT 1
50044: NEG
50045: PUSH
50046: EMPTY
50047: LIST
50048: LIST
50049: PUSH
50050: LD_INT 1
50052: PUSH
50053: LD_INT 0
50055: PUSH
50056: EMPTY
50057: LIST
50058: LIST
50059: PUSH
50060: LD_INT 1
50062: PUSH
50063: LD_INT 1
50065: PUSH
50066: EMPTY
50067: LIST
50068: LIST
50069: PUSH
50070: LD_INT 0
50072: PUSH
50073: LD_INT 1
50075: PUSH
50076: EMPTY
50077: LIST
50078: LIST
50079: PUSH
50080: LD_INT 1
50082: NEG
50083: PUSH
50084: LD_INT 0
50086: PUSH
50087: EMPTY
50088: LIST
50089: LIST
50090: PUSH
50091: LD_INT 1
50093: NEG
50094: PUSH
50095: LD_INT 1
50097: NEG
50098: PUSH
50099: EMPTY
50100: LIST
50101: LIST
50102: PUSH
50103: EMPTY
50104: LIST
50105: LIST
50106: LIST
50107: LIST
50108: LIST
50109: LIST
50110: LIST
50111: ST_TO_ADDR
// end ; 1 :
50112: GO 56009
50114: LD_INT 1
50116: DOUBLE
50117: EQUAL
50118: IFTRUE 50122
50120: GO 52745
50122: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
50123: LD_ADDR_VAR 0 11
50127: PUSH
50128: LD_INT 1
50130: NEG
50131: PUSH
50132: LD_INT 3
50134: NEG
50135: PUSH
50136: EMPTY
50137: LIST
50138: LIST
50139: PUSH
50140: LD_INT 0
50142: PUSH
50143: LD_INT 3
50145: NEG
50146: PUSH
50147: EMPTY
50148: LIST
50149: LIST
50150: PUSH
50151: LD_INT 1
50153: PUSH
50154: LD_INT 2
50156: NEG
50157: PUSH
50158: EMPTY
50159: LIST
50160: LIST
50161: PUSH
50162: EMPTY
50163: LIST
50164: LIST
50165: LIST
50166: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
50167: LD_ADDR_VAR 0 12
50171: PUSH
50172: LD_INT 2
50174: PUSH
50175: LD_INT 1
50177: NEG
50178: PUSH
50179: EMPTY
50180: LIST
50181: LIST
50182: PUSH
50183: LD_INT 3
50185: PUSH
50186: LD_INT 0
50188: PUSH
50189: EMPTY
50190: LIST
50191: LIST
50192: PUSH
50193: LD_INT 3
50195: PUSH
50196: LD_INT 1
50198: PUSH
50199: EMPTY
50200: LIST
50201: LIST
50202: PUSH
50203: EMPTY
50204: LIST
50205: LIST
50206: LIST
50207: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
50208: LD_ADDR_VAR 0 13
50212: PUSH
50213: LD_INT 3
50215: PUSH
50216: LD_INT 2
50218: PUSH
50219: EMPTY
50220: LIST
50221: LIST
50222: PUSH
50223: LD_INT 3
50225: PUSH
50226: LD_INT 3
50228: PUSH
50229: EMPTY
50230: LIST
50231: LIST
50232: PUSH
50233: LD_INT 2
50235: PUSH
50236: LD_INT 3
50238: PUSH
50239: EMPTY
50240: LIST
50241: LIST
50242: PUSH
50243: EMPTY
50244: LIST
50245: LIST
50246: LIST
50247: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
50248: LD_ADDR_VAR 0 14
50252: PUSH
50253: LD_INT 1
50255: PUSH
50256: LD_INT 3
50258: PUSH
50259: EMPTY
50260: LIST
50261: LIST
50262: PUSH
50263: LD_INT 0
50265: PUSH
50266: LD_INT 3
50268: PUSH
50269: EMPTY
50270: LIST
50271: LIST
50272: PUSH
50273: LD_INT 1
50275: NEG
50276: PUSH
50277: LD_INT 2
50279: PUSH
50280: EMPTY
50281: LIST
50282: LIST
50283: PUSH
50284: EMPTY
50285: LIST
50286: LIST
50287: LIST
50288: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50289: LD_ADDR_VAR 0 15
50293: PUSH
50294: LD_INT 2
50296: NEG
50297: PUSH
50298: LD_INT 1
50300: PUSH
50301: EMPTY
50302: LIST
50303: LIST
50304: PUSH
50305: LD_INT 3
50307: NEG
50308: PUSH
50309: LD_INT 0
50311: PUSH
50312: EMPTY
50313: LIST
50314: LIST
50315: PUSH
50316: LD_INT 3
50318: NEG
50319: PUSH
50320: LD_INT 1
50322: NEG
50323: PUSH
50324: EMPTY
50325: LIST
50326: LIST
50327: PUSH
50328: EMPTY
50329: LIST
50330: LIST
50331: LIST
50332: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50333: LD_ADDR_VAR 0 16
50337: PUSH
50338: LD_INT 2
50340: NEG
50341: PUSH
50342: LD_INT 3
50344: NEG
50345: PUSH
50346: EMPTY
50347: LIST
50348: LIST
50349: PUSH
50350: LD_INT 3
50352: NEG
50353: PUSH
50354: LD_INT 2
50356: NEG
50357: PUSH
50358: EMPTY
50359: LIST
50360: LIST
50361: PUSH
50362: LD_INT 3
50364: NEG
50365: PUSH
50366: LD_INT 3
50368: NEG
50369: PUSH
50370: EMPTY
50371: LIST
50372: LIST
50373: PUSH
50374: EMPTY
50375: LIST
50376: LIST
50377: LIST
50378: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
50379: LD_ADDR_VAR 0 17
50383: PUSH
50384: LD_INT 1
50386: NEG
50387: PUSH
50388: LD_INT 3
50390: NEG
50391: PUSH
50392: EMPTY
50393: LIST
50394: LIST
50395: PUSH
50396: LD_INT 0
50398: PUSH
50399: LD_INT 3
50401: NEG
50402: PUSH
50403: EMPTY
50404: LIST
50405: LIST
50406: PUSH
50407: LD_INT 1
50409: PUSH
50410: LD_INT 2
50412: NEG
50413: PUSH
50414: EMPTY
50415: LIST
50416: LIST
50417: PUSH
50418: EMPTY
50419: LIST
50420: LIST
50421: LIST
50422: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
50423: LD_ADDR_VAR 0 18
50427: PUSH
50428: LD_INT 2
50430: PUSH
50431: LD_INT 1
50433: NEG
50434: PUSH
50435: EMPTY
50436: LIST
50437: LIST
50438: PUSH
50439: LD_INT 3
50441: PUSH
50442: LD_INT 0
50444: PUSH
50445: EMPTY
50446: LIST
50447: LIST
50448: PUSH
50449: LD_INT 3
50451: PUSH
50452: LD_INT 1
50454: PUSH
50455: EMPTY
50456: LIST
50457: LIST
50458: PUSH
50459: EMPTY
50460: LIST
50461: LIST
50462: LIST
50463: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
50464: LD_ADDR_VAR 0 19
50468: PUSH
50469: LD_INT 3
50471: PUSH
50472: LD_INT 2
50474: PUSH
50475: EMPTY
50476: LIST
50477: LIST
50478: PUSH
50479: LD_INT 3
50481: PUSH
50482: LD_INT 3
50484: PUSH
50485: EMPTY
50486: LIST
50487: LIST
50488: PUSH
50489: LD_INT 2
50491: PUSH
50492: LD_INT 3
50494: PUSH
50495: EMPTY
50496: LIST
50497: LIST
50498: PUSH
50499: EMPTY
50500: LIST
50501: LIST
50502: LIST
50503: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
50504: LD_ADDR_VAR 0 20
50508: PUSH
50509: LD_INT 1
50511: PUSH
50512: LD_INT 3
50514: PUSH
50515: EMPTY
50516: LIST
50517: LIST
50518: PUSH
50519: LD_INT 0
50521: PUSH
50522: LD_INT 3
50524: PUSH
50525: EMPTY
50526: LIST
50527: LIST
50528: PUSH
50529: LD_INT 1
50531: NEG
50532: PUSH
50533: LD_INT 2
50535: PUSH
50536: EMPTY
50537: LIST
50538: LIST
50539: PUSH
50540: EMPTY
50541: LIST
50542: LIST
50543: LIST
50544: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50545: LD_ADDR_VAR 0 21
50549: PUSH
50550: LD_INT 2
50552: NEG
50553: PUSH
50554: LD_INT 1
50556: PUSH
50557: EMPTY
50558: LIST
50559: LIST
50560: PUSH
50561: LD_INT 3
50563: NEG
50564: PUSH
50565: LD_INT 0
50567: PUSH
50568: EMPTY
50569: LIST
50570: LIST
50571: PUSH
50572: LD_INT 3
50574: NEG
50575: PUSH
50576: LD_INT 1
50578: NEG
50579: PUSH
50580: EMPTY
50581: LIST
50582: LIST
50583: PUSH
50584: EMPTY
50585: LIST
50586: LIST
50587: LIST
50588: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50589: LD_ADDR_VAR 0 22
50593: PUSH
50594: LD_INT 2
50596: NEG
50597: PUSH
50598: LD_INT 3
50600: NEG
50601: PUSH
50602: EMPTY
50603: LIST
50604: LIST
50605: PUSH
50606: LD_INT 3
50608: NEG
50609: PUSH
50610: LD_INT 2
50612: NEG
50613: PUSH
50614: EMPTY
50615: LIST
50616: LIST
50617: PUSH
50618: LD_INT 3
50620: NEG
50621: PUSH
50622: LD_INT 3
50624: NEG
50625: PUSH
50626: EMPTY
50627: LIST
50628: LIST
50629: PUSH
50630: EMPTY
50631: LIST
50632: LIST
50633: LIST
50634: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
50635: LD_ADDR_VAR 0 23
50639: PUSH
50640: LD_INT 0
50642: PUSH
50643: LD_INT 3
50645: NEG
50646: PUSH
50647: EMPTY
50648: LIST
50649: LIST
50650: PUSH
50651: LD_INT 1
50653: NEG
50654: PUSH
50655: LD_INT 4
50657: NEG
50658: PUSH
50659: EMPTY
50660: LIST
50661: LIST
50662: PUSH
50663: LD_INT 1
50665: PUSH
50666: LD_INT 3
50668: NEG
50669: PUSH
50670: EMPTY
50671: LIST
50672: LIST
50673: PUSH
50674: EMPTY
50675: LIST
50676: LIST
50677: LIST
50678: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
50679: LD_ADDR_VAR 0 24
50683: PUSH
50684: LD_INT 3
50686: PUSH
50687: LD_INT 0
50689: PUSH
50690: EMPTY
50691: LIST
50692: LIST
50693: PUSH
50694: LD_INT 3
50696: PUSH
50697: LD_INT 1
50699: NEG
50700: PUSH
50701: EMPTY
50702: LIST
50703: LIST
50704: PUSH
50705: LD_INT 4
50707: PUSH
50708: LD_INT 1
50710: PUSH
50711: EMPTY
50712: LIST
50713: LIST
50714: PUSH
50715: EMPTY
50716: LIST
50717: LIST
50718: LIST
50719: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
50720: LD_ADDR_VAR 0 25
50724: PUSH
50725: LD_INT 3
50727: PUSH
50728: LD_INT 3
50730: PUSH
50731: EMPTY
50732: LIST
50733: LIST
50734: PUSH
50735: LD_INT 4
50737: PUSH
50738: LD_INT 3
50740: PUSH
50741: EMPTY
50742: LIST
50743: LIST
50744: PUSH
50745: LD_INT 3
50747: PUSH
50748: LD_INT 4
50750: PUSH
50751: EMPTY
50752: LIST
50753: LIST
50754: PUSH
50755: EMPTY
50756: LIST
50757: LIST
50758: LIST
50759: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
50760: LD_ADDR_VAR 0 26
50764: PUSH
50765: LD_INT 0
50767: PUSH
50768: LD_INT 3
50770: PUSH
50771: EMPTY
50772: LIST
50773: LIST
50774: PUSH
50775: LD_INT 1
50777: PUSH
50778: LD_INT 4
50780: PUSH
50781: EMPTY
50782: LIST
50783: LIST
50784: PUSH
50785: LD_INT 1
50787: NEG
50788: PUSH
50789: LD_INT 3
50791: PUSH
50792: EMPTY
50793: LIST
50794: LIST
50795: PUSH
50796: EMPTY
50797: LIST
50798: LIST
50799: LIST
50800: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
50801: LD_ADDR_VAR 0 27
50805: PUSH
50806: LD_INT 3
50808: NEG
50809: PUSH
50810: LD_INT 0
50812: PUSH
50813: EMPTY
50814: LIST
50815: LIST
50816: PUSH
50817: LD_INT 3
50819: NEG
50820: PUSH
50821: LD_INT 1
50823: PUSH
50824: EMPTY
50825: LIST
50826: LIST
50827: PUSH
50828: LD_INT 4
50830: NEG
50831: PUSH
50832: LD_INT 1
50834: NEG
50835: PUSH
50836: EMPTY
50837: LIST
50838: LIST
50839: PUSH
50840: EMPTY
50841: LIST
50842: LIST
50843: LIST
50844: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
50845: LD_ADDR_VAR 0 28
50849: PUSH
50850: LD_INT 3
50852: NEG
50853: PUSH
50854: LD_INT 3
50856: NEG
50857: PUSH
50858: EMPTY
50859: LIST
50860: LIST
50861: PUSH
50862: LD_INT 3
50864: NEG
50865: PUSH
50866: LD_INT 4
50868: NEG
50869: PUSH
50870: EMPTY
50871: LIST
50872: LIST
50873: PUSH
50874: LD_INT 4
50876: NEG
50877: PUSH
50878: LD_INT 3
50880: NEG
50881: PUSH
50882: EMPTY
50883: LIST
50884: LIST
50885: PUSH
50886: EMPTY
50887: LIST
50888: LIST
50889: LIST
50890: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
50891: LD_ADDR_VAR 0 29
50895: PUSH
50896: LD_INT 1
50898: NEG
50899: PUSH
50900: LD_INT 3
50902: NEG
50903: PUSH
50904: EMPTY
50905: LIST
50906: LIST
50907: PUSH
50908: LD_INT 0
50910: PUSH
50911: LD_INT 3
50913: NEG
50914: PUSH
50915: EMPTY
50916: LIST
50917: LIST
50918: PUSH
50919: LD_INT 1
50921: PUSH
50922: LD_INT 2
50924: NEG
50925: PUSH
50926: EMPTY
50927: LIST
50928: LIST
50929: PUSH
50930: LD_INT 1
50932: NEG
50933: PUSH
50934: LD_INT 4
50936: NEG
50937: PUSH
50938: EMPTY
50939: LIST
50940: LIST
50941: PUSH
50942: LD_INT 0
50944: PUSH
50945: LD_INT 4
50947: NEG
50948: PUSH
50949: EMPTY
50950: LIST
50951: LIST
50952: PUSH
50953: LD_INT 1
50955: PUSH
50956: LD_INT 3
50958: NEG
50959: PUSH
50960: EMPTY
50961: LIST
50962: LIST
50963: PUSH
50964: LD_INT 1
50966: NEG
50967: PUSH
50968: LD_INT 5
50970: NEG
50971: PUSH
50972: EMPTY
50973: LIST
50974: LIST
50975: PUSH
50976: LD_INT 0
50978: PUSH
50979: LD_INT 5
50981: NEG
50982: PUSH
50983: EMPTY
50984: LIST
50985: LIST
50986: PUSH
50987: LD_INT 1
50989: PUSH
50990: LD_INT 4
50992: NEG
50993: PUSH
50994: EMPTY
50995: LIST
50996: LIST
50997: PUSH
50998: LD_INT 1
51000: NEG
51001: PUSH
51002: LD_INT 6
51004: NEG
51005: PUSH
51006: EMPTY
51007: LIST
51008: LIST
51009: PUSH
51010: LD_INT 0
51012: PUSH
51013: LD_INT 6
51015: NEG
51016: PUSH
51017: EMPTY
51018: LIST
51019: LIST
51020: PUSH
51021: LD_INT 1
51023: PUSH
51024: LD_INT 5
51026: NEG
51027: PUSH
51028: EMPTY
51029: LIST
51030: LIST
51031: PUSH
51032: EMPTY
51033: LIST
51034: LIST
51035: LIST
51036: LIST
51037: LIST
51038: LIST
51039: LIST
51040: LIST
51041: LIST
51042: LIST
51043: LIST
51044: LIST
51045: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
51046: LD_ADDR_VAR 0 30
51050: PUSH
51051: LD_INT 2
51053: PUSH
51054: LD_INT 1
51056: NEG
51057: PUSH
51058: EMPTY
51059: LIST
51060: LIST
51061: PUSH
51062: LD_INT 3
51064: PUSH
51065: LD_INT 0
51067: PUSH
51068: EMPTY
51069: LIST
51070: LIST
51071: PUSH
51072: LD_INT 3
51074: PUSH
51075: LD_INT 1
51077: PUSH
51078: EMPTY
51079: LIST
51080: LIST
51081: PUSH
51082: LD_INT 3
51084: PUSH
51085: LD_INT 1
51087: NEG
51088: PUSH
51089: EMPTY
51090: LIST
51091: LIST
51092: PUSH
51093: LD_INT 4
51095: PUSH
51096: LD_INT 0
51098: PUSH
51099: EMPTY
51100: LIST
51101: LIST
51102: PUSH
51103: LD_INT 4
51105: PUSH
51106: LD_INT 1
51108: PUSH
51109: EMPTY
51110: LIST
51111: LIST
51112: PUSH
51113: LD_INT 4
51115: PUSH
51116: LD_INT 1
51118: NEG
51119: PUSH
51120: EMPTY
51121: LIST
51122: LIST
51123: PUSH
51124: LD_INT 5
51126: PUSH
51127: LD_INT 0
51129: PUSH
51130: EMPTY
51131: LIST
51132: LIST
51133: PUSH
51134: LD_INT 5
51136: PUSH
51137: LD_INT 1
51139: PUSH
51140: EMPTY
51141: LIST
51142: LIST
51143: PUSH
51144: LD_INT 5
51146: PUSH
51147: LD_INT 1
51149: NEG
51150: PUSH
51151: EMPTY
51152: LIST
51153: LIST
51154: PUSH
51155: LD_INT 6
51157: PUSH
51158: LD_INT 0
51160: PUSH
51161: EMPTY
51162: LIST
51163: LIST
51164: PUSH
51165: LD_INT 6
51167: PUSH
51168: LD_INT 1
51170: PUSH
51171: EMPTY
51172: LIST
51173: LIST
51174: PUSH
51175: EMPTY
51176: LIST
51177: LIST
51178: LIST
51179: LIST
51180: LIST
51181: LIST
51182: LIST
51183: LIST
51184: LIST
51185: LIST
51186: LIST
51187: LIST
51188: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
51189: LD_ADDR_VAR 0 31
51193: PUSH
51194: LD_INT 3
51196: PUSH
51197: LD_INT 2
51199: PUSH
51200: EMPTY
51201: LIST
51202: LIST
51203: PUSH
51204: LD_INT 3
51206: PUSH
51207: LD_INT 3
51209: PUSH
51210: EMPTY
51211: LIST
51212: LIST
51213: PUSH
51214: LD_INT 2
51216: PUSH
51217: LD_INT 3
51219: PUSH
51220: EMPTY
51221: LIST
51222: LIST
51223: PUSH
51224: LD_INT 4
51226: PUSH
51227: LD_INT 3
51229: PUSH
51230: EMPTY
51231: LIST
51232: LIST
51233: PUSH
51234: LD_INT 4
51236: PUSH
51237: LD_INT 4
51239: PUSH
51240: EMPTY
51241: LIST
51242: LIST
51243: PUSH
51244: LD_INT 3
51246: PUSH
51247: LD_INT 4
51249: PUSH
51250: EMPTY
51251: LIST
51252: LIST
51253: PUSH
51254: LD_INT 5
51256: PUSH
51257: LD_INT 4
51259: PUSH
51260: EMPTY
51261: LIST
51262: LIST
51263: PUSH
51264: LD_INT 5
51266: PUSH
51267: LD_INT 5
51269: PUSH
51270: EMPTY
51271: LIST
51272: LIST
51273: PUSH
51274: LD_INT 4
51276: PUSH
51277: LD_INT 5
51279: PUSH
51280: EMPTY
51281: LIST
51282: LIST
51283: PUSH
51284: LD_INT 6
51286: PUSH
51287: LD_INT 5
51289: PUSH
51290: EMPTY
51291: LIST
51292: LIST
51293: PUSH
51294: LD_INT 6
51296: PUSH
51297: LD_INT 6
51299: PUSH
51300: EMPTY
51301: LIST
51302: LIST
51303: PUSH
51304: LD_INT 5
51306: PUSH
51307: LD_INT 6
51309: PUSH
51310: EMPTY
51311: LIST
51312: LIST
51313: PUSH
51314: EMPTY
51315: LIST
51316: LIST
51317: LIST
51318: LIST
51319: LIST
51320: LIST
51321: LIST
51322: LIST
51323: LIST
51324: LIST
51325: LIST
51326: LIST
51327: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
51328: LD_ADDR_VAR 0 32
51332: PUSH
51333: LD_INT 1
51335: PUSH
51336: LD_INT 3
51338: PUSH
51339: EMPTY
51340: LIST
51341: LIST
51342: PUSH
51343: LD_INT 0
51345: PUSH
51346: LD_INT 3
51348: PUSH
51349: EMPTY
51350: LIST
51351: LIST
51352: PUSH
51353: LD_INT 1
51355: NEG
51356: PUSH
51357: LD_INT 2
51359: PUSH
51360: EMPTY
51361: LIST
51362: LIST
51363: PUSH
51364: LD_INT 1
51366: PUSH
51367: LD_INT 4
51369: PUSH
51370: EMPTY
51371: LIST
51372: LIST
51373: PUSH
51374: LD_INT 0
51376: PUSH
51377: LD_INT 4
51379: PUSH
51380: EMPTY
51381: LIST
51382: LIST
51383: PUSH
51384: LD_INT 1
51386: NEG
51387: PUSH
51388: LD_INT 3
51390: PUSH
51391: EMPTY
51392: LIST
51393: LIST
51394: PUSH
51395: LD_INT 1
51397: PUSH
51398: LD_INT 5
51400: PUSH
51401: EMPTY
51402: LIST
51403: LIST
51404: PUSH
51405: LD_INT 0
51407: PUSH
51408: LD_INT 5
51410: PUSH
51411: EMPTY
51412: LIST
51413: LIST
51414: PUSH
51415: LD_INT 1
51417: NEG
51418: PUSH
51419: LD_INT 4
51421: PUSH
51422: EMPTY
51423: LIST
51424: LIST
51425: PUSH
51426: LD_INT 1
51428: PUSH
51429: LD_INT 6
51431: PUSH
51432: EMPTY
51433: LIST
51434: LIST
51435: PUSH
51436: LD_INT 0
51438: PUSH
51439: LD_INT 6
51441: PUSH
51442: EMPTY
51443: LIST
51444: LIST
51445: PUSH
51446: LD_INT 1
51448: NEG
51449: PUSH
51450: LD_INT 5
51452: PUSH
51453: EMPTY
51454: LIST
51455: LIST
51456: PUSH
51457: EMPTY
51458: LIST
51459: LIST
51460: LIST
51461: LIST
51462: LIST
51463: LIST
51464: LIST
51465: LIST
51466: LIST
51467: LIST
51468: LIST
51469: LIST
51470: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
51471: LD_ADDR_VAR 0 33
51475: PUSH
51476: LD_INT 2
51478: NEG
51479: PUSH
51480: LD_INT 1
51482: PUSH
51483: EMPTY
51484: LIST
51485: LIST
51486: PUSH
51487: LD_INT 3
51489: NEG
51490: PUSH
51491: LD_INT 0
51493: PUSH
51494: EMPTY
51495: LIST
51496: LIST
51497: PUSH
51498: LD_INT 3
51500: NEG
51501: PUSH
51502: LD_INT 1
51504: NEG
51505: PUSH
51506: EMPTY
51507: LIST
51508: LIST
51509: PUSH
51510: LD_INT 3
51512: NEG
51513: PUSH
51514: LD_INT 1
51516: PUSH
51517: EMPTY
51518: LIST
51519: LIST
51520: PUSH
51521: LD_INT 4
51523: NEG
51524: PUSH
51525: LD_INT 0
51527: PUSH
51528: EMPTY
51529: LIST
51530: LIST
51531: PUSH
51532: LD_INT 4
51534: NEG
51535: PUSH
51536: LD_INT 1
51538: NEG
51539: PUSH
51540: EMPTY
51541: LIST
51542: LIST
51543: PUSH
51544: LD_INT 4
51546: NEG
51547: PUSH
51548: LD_INT 1
51550: PUSH
51551: EMPTY
51552: LIST
51553: LIST
51554: PUSH
51555: LD_INT 5
51557: NEG
51558: PUSH
51559: LD_INT 0
51561: PUSH
51562: EMPTY
51563: LIST
51564: LIST
51565: PUSH
51566: LD_INT 5
51568: NEG
51569: PUSH
51570: LD_INT 1
51572: NEG
51573: PUSH
51574: EMPTY
51575: LIST
51576: LIST
51577: PUSH
51578: LD_INT 5
51580: NEG
51581: PUSH
51582: LD_INT 1
51584: PUSH
51585: EMPTY
51586: LIST
51587: LIST
51588: PUSH
51589: LD_INT 6
51591: NEG
51592: PUSH
51593: LD_INT 0
51595: PUSH
51596: EMPTY
51597: LIST
51598: LIST
51599: PUSH
51600: LD_INT 6
51602: NEG
51603: PUSH
51604: LD_INT 1
51606: NEG
51607: PUSH
51608: EMPTY
51609: LIST
51610: LIST
51611: PUSH
51612: EMPTY
51613: LIST
51614: LIST
51615: LIST
51616: LIST
51617: LIST
51618: LIST
51619: LIST
51620: LIST
51621: LIST
51622: LIST
51623: LIST
51624: LIST
51625: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
51626: LD_ADDR_VAR 0 34
51630: PUSH
51631: LD_INT 2
51633: NEG
51634: PUSH
51635: LD_INT 3
51637: NEG
51638: PUSH
51639: EMPTY
51640: LIST
51641: LIST
51642: PUSH
51643: LD_INT 3
51645: NEG
51646: PUSH
51647: LD_INT 2
51649: NEG
51650: PUSH
51651: EMPTY
51652: LIST
51653: LIST
51654: PUSH
51655: LD_INT 3
51657: NEG
51658: PUSH
51659: LD_INT 3
51661: NEG
51662: PUSH
51663: EMPTY
51664: LIST
51665: LIST
51666: PUSH
51667: LD_INT 3
51669: NEG
51670: PUSH
51671: LD_INT 4
51673: NEG
51674: PUSH
51675: EMPTY
51676: LIST
51677: LIST
51678: PUSH
51679: LD_INT 4
51681: NEG
51682: PUSH
51683: LD_INT 3
51685: NEG
51686: PUSH
51687: EMPTY
51688: LIST
51689: LIST
51690: PUSH
51691: LD_INT 4
51693: NEG
51694: PUSH
51695: LD_INT 4
51697: NEG
51698: PUSH
51699: EMPTY
51700: LIST
51701: LIST
51702: PUSH
51703: LD_INT 4
51705: NEG
51706: PUSH
51707: LD_INT 5
51709: NEG
51710: PUSH
51711: EMPTY
51712: LIST
51713: LIST
51714: PUSH
51715: LD_INT 5
51717: NEG
51718: PUSH
51719: LD_INT 4
51721: NEG
51722: PUSH
51723: EMPTY
51724: LIST
51725: LIST
51726: PUSH
51727: LD_INT 5
51729: NEG
51730: PUSH
51731: LD_INT 5
51733: NEG
51734: PUSH
51735: EMPTY
51736: LIST
51737: LIST
51738: PUSH
51739: LD_INT 5
51741: NEG
51742: PUSH
51743: LD_INT 6
51745: NEG
51746: PUSH
51747: EMPTY
51748: LIST
51749: LIST
51750: PUSH
51751: LD_INT 6
51753: NEG
51754: PUSH
51755: LD_INT 5
51757: NEG
51758: PUSH
51759: EMPTY
51760: LIST
51761: LIST
51762: PUSH
51763: LD_INT 6
51765: NEG
51766: PUSH
51767: LD_INT 6
51769: NEG
51770: PUSH
51771: EMPTY
51772: LIST
51773: LIST
51774: PUSH
51775: EMPTY
51776: LIST
51777: LIST
51778: LIST
51779: LIST
51780: LIST
51781: LIST
51782: LIST
51783: LIST
51784: LIST
51785: LIST
51786: LIST
51787: LIST
51788: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
51789: LD_ADDR_VAR 0 41
51793: PUSH
51794: LD_INT 0
51796: PUSH
51797: LD_INT 2
51799: NEG
51800: PUSH
51801: EMPTY
51802: LIST
51803: LIST
51804: PUSH
51805: LD_INT 1
51807: NEG
51808: PUSH
51809: LD_INT 3
51811: NEG
51812: PUSH
51813: EMPTY
51814: LIST
51815: LIST
51816: PUSH
51817: LD_INT 1
51819: PUSH
51820: LD_INT 2
51822: NEG
51823: PUSH
51824: EMPTY
51825: LIST
51826: LIST
51827: PUSH
51828: EMPTY
51829: LIST
51830: LIST
51831: LIST
51832: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
51833: LD_ADDR_VAR 0 42
51837: PUSH
51838: LD_INT 2
51840: PUSH
51841: LD_INT 0
51843: PUSH
51844: EMPTY
51845: LIST
51846: LIST
51847: PUSH
51848: LD_INT 2
51850: PUSH
51851: LD_INT 1
51853: NEG
51854: PUSH
51855: EMPTY
51856: LIST
51857: LIST
51858: PUSH
51859: LD_INT 3
51861: PUSH
51862: LD_INT 1
51864: PUSH
51865: EMPTY
51866: LIST
51867: LIST
51868: PUSH
51869: EMPTY
51870: LIST
51871: LIST
51872: LIST
51873: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
51874: LD_ADDR_VAR 0 43
51878: PUSH
51879: LD_INT 2
51881: PUSH
51882: LD_INT 2
51884: PUSH
51885: EMPTY
51886: LIST
51887: LIST
51888: PUSH
51889: LD_INT 3
51891: PUSH
51892: LD_INT 2
51894: PUSH
51895: EMPTY
51896: LIST
51897: LIST
51898: PUSH
51899: LD_INT 2
51901: PUSH
51902: LD_INT 3
51904: PUSH
51905: EMPTY
51906: LIST
51907: LIST
51908: PUSH
51909: EMPTY
51910: LIST
51911: LIST
51912: LIST
51913: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
51914: LD_ADDR_VAR 0 44
51918: PUSH
51919: LD_INT 0
51921: PUSH
51922: LD_INT 2
51924: PUSH
51925: EMPTY
51926: LIST
51927: LIST
51928: PUSH
51929: LD_INT 1
51931: PUSH
51932: LD_INT 3
51934: PUSH
51935: EMPTY
51936: LIST
51937: LIST
51938: PUSH
51939: LD_INT 1
51941: NEG
51942: PUSH
51943: LD_INT 2
51945: PUSH
51946: EMPTY
51947: LIST
51948: LIST
51949: PUSH
51950: EMPTY
51951: LIST
51952: LIST
51953: LIST
51954: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
51955: LD_ADDR_VAR 0 45
51959: PUSH
51960: LD_INT 2
51962: NEG
51963: PUSH
51964: LD_INT 0
51966: PUSH
51967: EMPTY
51968: LIST
51969: LIST
51970: PUSH
51971: LD_INT 2
51973: NEG
51974: PUSH
51975: LD_INT 1
51977: PUSH
51978: EMPTY
51979: LIST
51980: LIST
51981: PUSH
51982: LD_INT 3
51984: NEG
51985: PUSH
51986: LD_INT 1
51988: NEG
51989: PUSH
51990: EMPTY
51991: LIST
51992: LIST
51993: PUSH
51994: EMPTY
51995: LIST
51996: LIST
51997: LIST
51998: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
51999: LD_ADDR_VAR 0 46
52003: PUSH
52004: LD_INT 2
52006: NEG
52007: PUSH
52008: LD_INT 2
52010: NEG
52011: PUSH
52012: EMPTY
52013: LIST
52014: LIST
52015: PUSH
52016: LD_INT 2
52018: NEG
52019: PUSH
52020: LD_INT 3
52022: NEG
52023: PUSH
52024: EMPTY
52025: LIST
52026: LIST
52027: PUSH
52028: LD_INT 3
52030: NEG
52031: PUSH
52032: LD_INT 2
52034: NEG
52035: PUSH
52036: EMPTY
52037: LIST
52038: LIST
52039: PUSH
52040: EMPTY
52041: LIST
52042: LIST
52043: LIST
52044: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
52045: LD_ADDR_VAR 0 47
52049: PUSH
52050: LD_INT 2
52052: NEG
52053: PUSH
52054: LD_INT 3
52056: NEG
52057: PUSH
52058: EMPTY
52059: LIST
52060: LIST
52061: PUSH
52062: LD_INT 1
52064: NEG
52065: PUSH
52066: LD_INT 3
52068: NEG
52069: PUSH
52070: EMPTY
52071: LIST
52072: LIST
52073: PUSH
52074: EMPTY
52075: LIST
52076: LIST
52077: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
52078: LD_ADDR_VAR 0 48
52082: PUSH
52083: LD_INT 1
52085: PUSH
52086: LD_INT 2
52088: NEG
52089: PUSH
52090: EMPTY
52091: LIST
52092: LIST
52093: PUSH
52094: LD_INT 2
52096: PUSH
52097: LD_INT 1
52099: NEG
52100: PUSH
52101: EMPTY
52102: LIST
52103: LIST
52104: PUSH
52105: EMPTY
52106: LIST
52107: LIST
52108: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
52109: LD_ADDR_VAR 0 49
52113: PUSH
52114: LD_INT 3
52116: PUSH
52117: LD_INT 1
52119: PUSH
52120: EMPTY
52121: LIST
52122: LIST
52123: PUSH
52124: LD_INT 3
52126: PUSH
52127: LD_INT 2
52129: PUSH
52130: EMPTY
52131: LIST
52132: LIST
52133: PUSH
52134: EMPTY
52135: LIST
52136: LIST
52137: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
52138: LD_ADDR_VAR 0 50
52142: PUSH
52143: LD_INT 2
52145: PUSH
52146: LD_INT 3
52148: PUSH
52149: EMPTY
52150: LIST
52151: LIST
52152: PUSH
52153: LD_INT 1
52155: PUSH
52156: LD_INT 3
52158: PUSH
52159: EMPTY
52160: LIST
52161: LIST
52162: PUSH
52163: EMPTY
52164: LIST
52165: LIST
52166: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
52167: LD_ADDR_VAR 0 51
52171: PUSH
52172: LD_INT 1
52174: NEG
52175: PUSH
52176: LD_INT 2
52178: PUSH
52179: EMPTY
52180: LIST
52181: LIST
52182: PUSH
52183: LD_INT 2
52185: NEG
52186: PUSH
52187: LD_INT 1
52189: PUSH
52190: EMPTY
52191: LIST
52192: LIST
52193: PUSH
52194: EMPTY
52195: LIST
52196: LIST
52197: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
52198: LD_ADDR_VAR 0 52
52202: PUSH
52203: LD_INT 3
52205: NEG
52206: PUSH
52207: LD_INT 1
52209: NEG
52210: PUSH
52211: EMPTY
52212: LIST
52213: LIST
52214: PUSH
52215: LD_INT 3
52217: NEG
52218: PUSH
52219: LD_INT 2
52221: NEG
52222: PUSH
52223: EMPTY
52224: LIST
52225: LIST
52226: PUSH
52227: EMPTY
52228: LIST
52229: LIST
52230: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
52231: LD_ADDR_VAR 0 53
52235: PUSH
52236: LD_INT 1
52238: NEG
52239: PUSH
52240: LD_INT 3
52242: NEG
52243: PUSH
52244: EMPTY
52245: LIST
52246: LIST
52247: PUSH
52248: LD_INT 0
52250: PUSH
52251: LD_INT 3
52253: NEG
52254: PUSH
52255: EMPTY
52256: LIST
52257: LIST
52258: PUSH
52259: LD_INT 1
52261: PUSH
52262: LD_INT 2
52264: NEG
52265: PUSH
52266: EMPTY
52267: LIST
52268: LIST
52269: PUSH
52270: EMPTY
52271: LIST
52272: LIST
52273: LIST
52274: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
52275: LD_ADDR_VAR 0 54
52279: PUSH
52280: LD_INT 2
52282: PUSH
52283: LD_INT 1
52285: NEG
52286: PUSH
52287: EMPTY
52288: LIST
52289: LIST
52290: PUSH
52291: LD_INT 3
52293: PUSH
52294: LD_INT 0
52296: PUSH
52297: EMPTY
52298: LIST
52299: LIST
52300: PUSH
52301: LD_INT 3
52303: PUSH
52304: LD_INT 1
52306: PUSH
52307: EMPTY
52308: LIST
52309: LIST
52310: PUSH
52311: EMPTY
52312: LIST
52313: LIST
52314: LIST
52315: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
52316: LD_ADDR_VAR 0 55
52320: PUSH
52321: LD_INT 3
52323: PUSH
52324: LD_INT 2
52326: PUSH
52327: EMPTY
52328: LIST
52329: LIST
52330: PUSH
52331: LD_INT 3
52333: PUSH
52334: LD_INT 3
52336: PUSH
52337: EMPTY
52338: LIST
52339: LIST
52340: PUSH
52341: LD_INT 2
52343: PUSH
52344: LD_INT 3
52346: PUSH
52347: EMPTY
52348: LIST
52349: LIST
52350: PUSH
52351: EMPTY
52352: LIST
52353: LIST
52354: LIST
52355: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
52356: LD_ADDR_VAR 0 56
52360: PUSH
52361: LD_INT 1
52363: PUSH
52364: LD_INT 3
52366: PUSH
52367: EMPTY
52368: LIST
52369: LIST
52370: PUSH
52371: LD_INT 0
52373: PUSH
52374: LD_INT 3
52376: PUSH
52377: EMPTY
52378: LIST
52379: LIST
52380: PUSH
52381: LD_INT 1
52383: NEG
52384: PUSH
52385: LD_INT 2
52387: PUSH
52388: EMPTY
52389: LIST
52390: LIST
52391: PUSH
52392: EMPTY
52393: LIST
52394: LIST
52395: LIST
52396: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52397: LD_ADDR_VAR 0 57
52401: PUSH
52402: LD_INT 2
52404: NEG
52405: PUSH
52406: LD_INT 1
52408: PUSH
52409: EMPTY
52410: LIST
52411: LIST
52412: PUSH
52413: LD_INT 3
52415: NEG
52416: PUSH
52417: LD_INT 0
52419: PUSH
52420: EMPTY
52421: LIST
52422: LIST
52423: PUSH
52424: LD_INT 3
52426: NEG
52427: PUSH
52428: LD_INT 1
52430: NEG
52431: PUSH
52432: EMPTY
52433: LIST
52434: LIST
52435: PUSH
52436: EMPTY
52437: LIST
52438: LIST
52439: LIST
52440: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52441: LD_ADDR_VAR 0 58
52445: PUSH
52446: LD_INT 2
52448: NEG
52449: PUSH
52450: LD_INT 3
52452: NEG
52453: PUSH
52454: EMPTY
52455: LIST
52456: LIST
52457: PUSH
52458: LD_INT 3
52460: NEG
52461: PUSH
52462: LD_INT 2
52464: NEG
52465: PUSH
52466: EMPTY
52467: LIST
52468: LIST
52469: PUSH
52470: LD_INT 3
52472: NEG
52473: PUSH
52474: LD_INT 3
52476: NEG
52477: PUSH
52478: EMPTY
52479: LIST
52480: LIST
52481: PUSH
52482: EMPTY
52483: LIST
52484: LIST
52485: LIST
52486: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
52487: LD_ADDR_VAR 0 59
52491: PUSH
52492: LD_INT 1
52494: NEG
52495: PUSH
52496: LD_INT 2
52498: NEG
52499: PUSH
52500: EMPTY
52501: LIST
52502: LIST
52503: PUSH
52504: LD_INT 0
52506: PUSH
52507: LD_INT 2
52509: NEG
52510: PUSH
52511: EMPTY
52512: LIST
52513: LIST
52514: PUSH
52515: LD_INT 1
52517: PUSH
52518: LD_INT 1
52520: NEG
52521: PUSH
52522: EMPTY
52523: LIST
52524: LIST
52525: PUSH
52526: EMPTY
52527: LIST
52528: LIST
52529: LIST
52530: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
52531: LD_ADDR_VAR 0 60
52535: PUSH
52536: LD_INT 1
52538: PUSH
52539: LD_INT 1
52541: NEG
52542: PUSH
52543: EMPTY
52544: LIST
52545: LIST
52546: PUSH
52547: LD_INT 2
52549: PUSH
52550: LD_INT 0
52552: PUSH
52553: EMPTY
52554: LIST
52555: LIST
52556: PUSH
52557: LD_INT 2
52559: PUSH
52560: LD_INT 1
52562: PUSH
52563: EMPTY
52564: LIST
52565: LIST
52566: PUSH
52567: EMPTY
52568: LIST
52569: LIST
52570: LIST
52571: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
52572: LD_ADDR_VAR 0 61
52576: PUSH
52577: LD_INT 2
52579: PUSH
52580: LD_INT 1
52582: PUSH
52583: EMPTY
52584: LIST
52585: LIST
52586: PUSH
52587: LD_INT 2
52589: PUSH
52590: LD_INT 2
52592: PUSH
52593: EMPTY
52594: LIST
52595: LIST
52596: PUSH
52597: LD_INT 1
52599: PUSH
52600: LD_INT 2
52602: PUSH
52603: EMPTY
52604: LIST
52605: LIST
52606: PUSH
52607: EMPTY
52608: LIST
52609: LIST
52610: LIST
52611: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
52612: LD_ADDR_VAR 0 62
52616: PUSH
52617: LD_INT 1
52619: PUSH
52620: LD_INT 2
52622: PUSH
52623: EMPTY
52624: LIST
52625: LIST
52626: PUSH
52627: LD_INT 0
52629: PUSH
52630: LD_INT 2
52632: PUSH
52633: EMPTY
52634: LIST
52635: LIST
52636: PUSH
52637: LD_INT 1
52639: NEG
52640: PUSH
52641: LD_INT 1
52643: PUSH
52644: EMPTY
52645: LIST
52646: LIST
52647: PUSH
52648: EMPTY
52649: LIST
52650: LIST
52651: LIST
52652: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
52653: LD_ADDR_VAR 0 63
52657: PUSH
52658: LD_INT 1
52660: NEG
52661: PUSH
52662: LD_INT 1
52664: PUSH
52665: EMPTY
52666: LIST
52667: LIST
52668: PUSH
52669: LD_INT 2
52671: NEG
52672: PUSH
52673: LD_INT 0
52675: PUSH
52676: EMPTY
52677: LIST
52678: LIST
52679: PUSH
52680: LD_INT 2
52682: NEG
52683: PUSH
52684: LD_INT 1
52686: NEG
52687: PUSH
52688: EMPTY
52689: LIST
52690: LIST
52691: PUSH
52692: EMPTY
52693: LIST
52694: LIST
52695: LIST
52696: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52697: LD_ADDR_VAR 0 64
52701: PUSH
52702: LD_INT 1
52704: NEG
52705: PUSH
52706: LD_INT 2
52708: NEG
52709: PUSH
52710: EMPTY
52711: LIST
52712: LIST
52713: PUSH
52714: LD_INT 2
52716: NEG
52717: PUSH
52718: LD_INT 1
52720: NEG
52721: PUSH
52722: EMPTY
52723: LIST
52724: LIST
52725: PUSH
52726: LD_INT 2
52728: NEG
52729: PUSH
52730: LD_INT 2
52732: NEG
52733: PUSH
52734: EMPTY
52735: LIST
52736: LIST
52737: PUSH
52738: EMPTY
52739: LIST
52740: LIST
52741: LIST
52742: ST_TO_ADDR
// end ; 2 :
52743: GO 56009
52745: LD_INT 2
52747: DOUBLE
52748: EQUAL
52749: IFTRUE 52753
52751: GO 56008
52753: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
52754: LD_ADDR_VAR 0 29
52758: PUSH
52759: LD_INT 4
52761: PUSH
52762: LD_INT 0
52764: PUSH
52765: EMPTY
52766: LIST
52767: LIST
52768: PUSH
52769: LD_INT 4
52771: PUSH
52772: LD_INT 1
52774: NEG
52775: PUSH
52776: EMPTY
52777: LIST
52778: LIST
52779: PUSH
52780: LD_INT 5
52782: PUSH
52783: LD_INT 0
52785: PUSH
52786: EMPTY
52787: LIST
52788: LIST
52789: PUSH
52790: LD_INT 5
52792: PUSH
52793: LD_INT 1
52795: PUSH
52796: EMPTY
52797: LIST
52798: LIST
52799: PUSH
52800: LD_INT 4
52802: PUSH
52803: LD_INT 1
52805: PUSH
52806: EMPTY
52807: LIST
52808: LIST
52809: PUSH
52810: LD_INT 3
52812: PUSH
52813: LD_INT 0
52815: PUSH
52816: EMPTY
52817: LIST
52818: LIST
52819: PUSH
52820: LD_INT 3
52822: PUSH
52823: LD_INT 1
52825: NEG
52826: PUSH
52827: EMPTY
52828: LIST
52829: LIST
52830: PUSH
52831: LD_INT 3
52833: PUSH
52834: LD_INT 2
52836: NEG
52837: PUSH
52838: EMPTY
52839: LIST
52840: LIST
52841: PUSH
52842: LD_INT 5
52844: PUSH
52845: LD_INT 2
52847: PUSH
52848: EMPTY
52849: LIST
52850: LIST
52851: PUSH
52852: LD_INT 3
52854: PUSH
52855: LD_INT 3
52857: PUSH
52858: EMPTY
52859: LIST
52860: LIST
52861: PUSH
52862: LD_INT 3
52864: PUSH
52865: LD_INT 2
52867: PUSH
52868: EMPTY
52869: LIST
52870: LIST
52871: PUSH
52872: LD_INT 4
52874: PUSH
52875: LD_INT 3
52877: PUSH
52878: EMPTY
52879: LIST
52880: LIST
52881: PUSH
52882: LD_INT 4
52884: PUSH
52885: LD_INT 4
52887: PUSH
52888: EMPTY
52889: LIST
52890: LIST
52891: PUSH
52892: LD_INT 3
52894: PUSH
52895: LD_INT 4
52897: PUSH
52898: EMPTY
52899: LIST
52900: LIST
52901: PUSH
52902: LD_INT 2
52904: PUSH
52905: LD_INT 3
52907: PUSH
52908: EMPTY
52909: LIST
52910: LIST
52911: PUSH
52912: LD_INT 2
52914: PUSH
52915: LD_INT 2
52917: PUSH
52918: EMPTY
52919: LIST
52920: LIST
52921: PUSH
52922: LD_INT 4
52924: PUSH
52925: LD_INT 2
52927: PUSH
52928: EMPTY
52929: LIST
52930: LIST
52931: PUSH
52932: LD_INT 2
52934: PUSH
52935: LD_INT 4
52937: PUSH
52938: EMPTY
52939: LIST
52940: LIST
52941: PUSH
52942: LD_INT 0
52944: PUSH
52945: LD_INT 4
52947: PUSH
52948: EMPTY
52949: LIST
52950: LIST
52951: PUSH
52952: LD_INT 0
52954: PUSH
52955: LD_INT 3
52957: PUSH
52958: EMPTY
52959: LIST
52960: LIST
52961: PUSH
52962: LD_INT 1
52964: PUSH
52965: LD_INT 4
52967: PUSH
52968: EMPTY
52969: LIST
52970: LIST
52971: PUSH
52972: LD_INT 1
52974: PUSH
52975: LD_INT 5
52977: PUSH
52978: EMPTY
52979: LIST
52980: LIST
52981: PUSH
52982: LD_INT 0
52984: PUSH
52985: LD_INT 5
52987: PUSH
52988: EMPTY
52989: LIST
52990: LIST
52991: PUSH
52992: LD_INT 1
52994: NEG
52995: PUSH
52996: LD_INT 4
52998: PUSH
52999: EMPTY
53000: LIST
53001: LIST
53002: PUSH
53003: LD_INT 1
53005: NEG
53006: PUSH
53007: LD_INT 3
53009: PUSH
53010: EMPTY
53011: LIST
53012: LIST
53013: PUSH
53014: LD_INT 2
53016: PUSH
53017: LD_INT 5
53019: PUSH
53020: EMPTY
53021: LIST
53022: LIST
53023: PUSH
53024: LD_INT 2
53026: NEG
53027: PUSH
53028: LD_INT 3
53030: PUSH
53031: EMPTY
53032: LIST
53033: LIST
53034: PUSH
53035: LD_INT 3
53037: NEG
53038: PUSH
53039: LD_INT 0
53041: PUSH
53042: EMPTY
53043: LIST
53044: LIST
53045: PUSH
53046: LD_INT 3
53048: NEG
53049: PUSH
53050: LD_INT 1
53052: NEG
53053: PUSH
53054: EMPTY
53055: LIST
53056: LIST
53057: PUSH
53058: LD_INT 2
53060: NEG
53061: PUSH
53062: LD_INT 0
53064: PUSH
53065: EMPTY
53066: LIST
53067: LIST
53068: PUSH
53069: LD_INT 2
53071: NEG
53072: PUSH
53073: LD_INT 1
53075: PUSH
53076: EMPTY
53077: LIST
53078: LIST
53079: PUSH
53080: LD_INT 3
53082: NEG
53083: PUSH
53084: LD_INT 1
53086: PUSH
53087: EMPTY
53088: LIST
53089: LIST
53090: PUSH
53091: LD_INT 4
53093: NEG
53094: PUSH
53095: LD_INT 0
53097: PUSH
53098: EMPTY
53099: LIST
53100: LIST
53101: PUSH
53102: LD_INT 4
53104: NEG
53105: PUSH
53106: LD_INT 1
53108: NEG
53109: PUSH
53110: EMPTY
53111: LIST
53112: LIST
53113: PUSH
53114: LD_INT 4
53116: NEG
53117: PUSH
53118: LD_INT 2
53120: NEG
53121: PUSH
53122: EMPTY
53123: LIST
53124: LIST
53125: PUSH
53126: LD_INT 2
53128: NEG
53129: PUSH
53130: LD_INT 2
53132: PUSH
53133: EMPTY
53134: LIST
53135: LIST
53136: PUSH
53137: LD_INT 4
53139: NEG
53140: PUSH
53141: LD_INT 4
53143: NEG
53144: PUSH
53145: EMPTY
53146: LIST
53147: LIST
53148: PUSH
53149: LD_INT 4
53151: NEG
53152: PUSH
53153: LD_INT 5
53155: NEG
53156: PUSH
53157: EMPTY
53158: LIST
53159: LIST
53160: PUSH
53161: LD_INT 3
53163: NEG
53164: PUSH
53165: LD_INT 4
53167: NEG
53168: PUSH
53169: EMPTY
53170: LIST
53171: LIST
53172: PUSH
53173: LD_INT 3
53175: NEG
53176: PUSH
53177: LD_INT 3
53179: NEG
53180: PUSH
53181: EMPTY
53182: LIST
53183: LIST
53184: PUSH
53185: LD_INT 4
53187: NEG
53188: PUSH
53189: LD_INT 3
53191: NEG
53192: PUSH
53193: EMPTY
53194: LIST
53195: LIST
53196: PUSH
53197: LD_INT 5
53199: NEG
53200: PUSH
53201: LD_INT 4
53203: NEG
53204: PUSH
53205: EMPTY
53206: LIST
53207: LIST
53208: PUSH
53209: LD_INT 5
53211: NEG
53212: PUSH
53213: LD_INT 5
53215: NEG
53216: PUSH
53217: EMPTY
53218: LIST
53219: LIST
53220: PUSH
53221: LD_INT 3
53223: NEG
53224: PUSH
53225: LD_INT 5
53227: NEG
53228: PUSH
53229: EMPTY
53230: LIST
53231: LIST
53232: PUSH
53233: LD_INT 5
53235: NEG
53236: PUSH
53237: LD_INT 3
53239: NEG
53240: PUSH
53241: EMPTY
53242: LIST
53243: LIST
53244: PUSH
53245: EMPTY
53246: LIST
53247: LIST
53248: LIST
53249: LIST
53250: LIST
53251: LIST
53252: LIST
53253: LIST
53254: LIST
53255: LIST
53256: LIST
53257: LIST
53258: LIST
53259: LIST
53260: LIST
53261: LIST
53262: LIST
53263: LIST
53264: LIST
53265: LIST
53266: LIST
53267: LIST
53268: LIST
53269: LIST
53270: LIST
53271: LIST
53272: LIST
53273: LIST
53274: LIST
53275: LIST
53276: LIST
53277: LIST
53278: LIST
53279: LIST
53280: LIST
53281: LIST
53282: LIST
53283: LIST
53284: LIST
53285: LIST
53286: LIST
53287: LIST
53288: LIST
53289: LIST
53290: LIST
53291: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
53292: LD_ADDR_VAR 0 30
53296: PUSH
53297: LD_INT 4
53299: PUSH
53300: LD_INT 4
53302: PUSH
53303: EMPTY
53304: LIST
53305: LIST
53306: PUSH
53307: LD_INT 4
53309: PUSH
53310: LD_INT 3
53312: PUSH
53313: EMPTY
53314: LIST
53315: LIST
53316: PUSH
53317: LD_INT 5
53319: PUSH
53320: LD_INT 4
53322: PUSH
53323: EMPTY
53324: LIST
53325: LIST
53326: PUSH
53327: LD_INT 5
53329: PUSH
53330: LD_INT 5
53332: PUSH
53333: EMPTY
53334: LIST
53335: LIST
53336: PUSH
53337: LD_INT 4
53339: PUSH
53340: LD_INT 5
53342: PUSH
53343: EMPTY
53344: LIST
53345: LIST
53346: PUSH
53347: LD_INT 3
53349: PUSH
53350: LD_INT 4
53352: PUSH
53353: EMPTY
53354: LIST
53355: LIST
53356: PUSH
53357: LD_INT 3
53359: PUSH
53360: LD_INT 3
53362: PUSH
53363: EMPTY
53364: LIST
53365: LIST
53366: PUSH
53367: LD_INT 5
53369: PUSH
53370: LD_INT 3
53372: PUSH
53373: EMPTY
53374: LIST
53375: LIST
53376: PUSH
53377: LD_INT 3
53379: PUSH
53380: LD_INT 5
53382: PUSH
53383: EMPTY
53384: LIST
53385: LIST
53386: PUSH
53387: LD_INT 0
53389: PUSH
53390: LD_INT 3
53392: PUSH
53393: EMPTY
53394: LIST
53395: LIST
53396: PUSH
53397: LD_INT 0
53399: PUSH
53400: LD_INT 2
53402: PUSH
53403: EMPTY
53404: LIST
53405: LIST
53406: PUSH
53407: LD_INT 1
53409: PUSH
53410: LD_INT 3
53412: PUSH
53413: EMPTY
53414: LIST
53415: LIST
53416: PUSH
53417: LD_INT 1
53419: PUSH
53420: LD_INT 4
53422: PUSH
53423: EMPTY
53424: LIST
53425: LIST
53426: PUSH
53427: LD_INT 0
53429: PUSH
53430: LD_INT 4
53432: PUSH
53433: EMPTY
53434: LIST
53435: LIST
53436: PUSH
53437: LD_INT 1
53439: NEG
53440: PUSH
53441: LD_INT 3
53443: PUSH
53444: EMPTY
53445: LIST
53446: LIST
53447: PUSH
53448: LD_INT 1
53450: NEG
53451: PUSH
53452: LD_INT 2
53454: PUSH
53455: EMPTY
53456: LIST
53457: LIST
53458: PUSH
53459: LD_INT 2
53461: PUSH
53462: LD_INT 4
53464: PUSH
53465: EMPTY
53466: LIST
53467: LIST
53468: PUSH
53469: LD_INT 2
53471: NEG
53472: PUSH
53473: LD_INT 2
53475: PUSH
53476: EMPTY
53477: LIST
53478: LIST
53479: PUSH
53480: LD_INT 4
53482: NEG
53483: PUSH
53484: LD_INT 0
53486: PUSH
53487: EMPTY
53488: LIST
53489: LIST
53490: PUSH
53491: LD_INT 4
53493: NEG
53494: PUSH
53495: LD_INT 1
53497: NEG
53498: PUSH
53499: EMPTY
53500: LIST
53501: LIST
53502: PUSH
53503: LD_INT 3
53505: NEG
53506: PUSH
53507: LD_INT 0
53509: PUSH
53510: EMPTY
53511: LIST
53512: LIST
53513: PUSH
53514: LD_INT 3
53516: NEG
53517: PUSH
53518: LD_INT 1
53520: PUSH
53521: EMPTY
53522: LIST
53523: LIST
53524: PUSH
53525: LD_INT 4
53527: NEG
53528: PUSH
53529: LD_INT 1
53531: PUSH
53532: EMPTY
53533: LIST
53534: LIST
53535: PUSH
53536: LD_INT 5
53538: NEG
53539: PUSH
53540: LD_INT 0
53542: PUSH
53543: EMPTY
53544: LIST
53545: LIST
53546: PUSH
53547: LD_INT 5
53549: NEG
53550: PUSH
53551: LD_INT 1
53553: NEG
53554: PUSH
53555: EMPTY
53556: LIST
53557: LIST
53558: PUSH
53559: LD_INT 5
53561: NEG
53562: PUSH
53563: LD_INT 2
53565: NEG
53566: PUSH
53567: EMPTY
53568: LIST
53569: LIST
53570: PUSH
53571: LD_INT 3
53573: NEG
53574: PUSH
53575: LD_INT 2
53577: PUSH
53578: EMPTY
53579: LIST
53580: LIST
53581: PUSH
53582: LD_INT 3
53584: NEG
53585: PUSH
53586: LD_INT 3
53588: NEG
53589: PUSH
53590: EMPTY
53591: LIST
53592: LIST
53593: PUSH
53594: LD_INT 3
53596: NEG
53597: PUSH
53598: LD_INT 4
53600: NEG
53601: PUSH
53602: EMPTY
53603: LIST
53604: LIST
53605: PUSH
53606: LD_INT 2
53608: NEG
53609: PUSH
53610: LD_INT 3
53612: NEG
53613: PUSH
53614: EMPTY
53615: LIST
53616: LIST
53617: PUSH
53618: LD_INT 2
53620: NEG
53621: PUSH
53622: LD_INT 2
53624: NEG
53625: PUSH
53626: EMPTY
53627: LIST
53628: LIST
53629: PUSH
53630: LD_INT 3
53632: NEG
53633: PUSH
53634: LD_INT 2
53636: NEG
53637: PUSH
53638: EMPTY
53639: LIST
53640: LIST
53641: PUSH
53642: LD_INT 4
53644: NEG
53645: PUSH
53646: LD_INT 3
53648: NEG
53649: PUSH
53650: EMPTY
53651: LIST
53652: LIST
53653: PUSH
53654: LD_INT 4
53656: NEG
53657: PUSH
53658: LD_INT 4
53660: NEG
53661: PUSH
53662: EMPTY
53663: LIST
53664: LIST
53665: PUSH
53666: LD_INT 2
53668: NEG
53669: PUSH
53670: LD_INT 4
53672: NEG
53673: PUSH
53674: EMPTY
53675: LIST
53676: LIST
53677: PUSH
53678: LD_INT 4
53680: NEG
53681: PUSH
53682: LD_INT 2
53684: NEG
53685: PUSH
53686: EMPTY
53687: LIST
53688: LIST
53689: PUSH
53690: LD_INT 0
53692: PUSH
53693: LD_INT 4
53695: NEG
53696: PUSH
53697: EMPTY
53698: LIST
53699: LIST
53700: PUSH
53701: LD_INT 0
53703: PUSH
53704: LD_INT 5
53706: NEG
53707: PUSH
53708: EMPTY
53709: LIST
53710: LIST
53711: PUSH
53712: LD_INT 1
53714: PUSH
53715: LD_INT 4
53717: NEG
53718: PUSH
53719: EMPTY
53720: LIST
53721: LIST
53722: PUSH
53723: LD_INT 1
53725: PUSH
53726: LD_INT 3
53728: NEG
53729: PUSH
53730: EMPTY
53731: LIST
53732: LIST
53733: PUSH
53734: LD_INT 0
53736: PUSH
53737: LD_INT 3
53739: NEG
53740: PUSH
53741: EMPTY
53742: LIST
53743: LIST
53744: PUSH
53745: LD_INT 1
53747: NEG
53748: PUSH
53749: LD_INT 4
53751: NEG
53752: PUSH
53753: EMPTY
53754: LIST
53755: LIST
53756: PUSH
53757: LD_INT 1
53759: NEG
53760: PUSH
53761: LD_INT 5
53763: NEG
53764: PUSH
53765: EMPTY
53766: LIST
53767: LIST
53768: PUSH
53769: LD_INT 2
53771: PUSH
53772: LD_INT 3
53774: NEG
53775: PUSH
53776: EMPTY
53777: LIST
53778: LIST
53779: PUSH
53780: LD_INT 2
53782: NEG
53783: PUSH
53784: LD_INT 5
53786: NEG
53787: PUSH
53788: EMPTY
53789: LIST
53790: LIST
53791: PUSH
53792: EMPTY
53793: LIST
53794: LIST
53795: LIST
53796: LIST
53797: LIST
53798: LIST
53799: LIST
53800: LIST
53801: LIST
53802: LIST
53803: LIST
53804: LIST
53805: LIST
53806: LIST
53807: LIST
53808: LIST
53809: LIST
53810: LIST
53811: LIST
53812: LIST
53813: LIST
53814: LIST
53815: LIST
53816: LIST
53817: LIST
53818: LIST
53819: LIST
53820: LIST
53821: LIST
53822: LIST
53823: LIST
53824: LIST
53825: LIST
53826: LIST
53827: LIST
53828: LIST
53829: LIST
53830: LIST
53831: LIST
53832: LIST
53833: LIST
53834: LIST
53835: LIST
53836: LIST
53837: LIST
53838: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
53839: LD_ADDR_VAR 0 31
53843: PUSH
53844: LD_INT 0
53846: PUSH
53847: LD_INT 4
53849: PUSH
53850: EMPTY
53851: LIST
53852: LIST
53853: PUSH
53854: LD_INT 0
53856: PUSH
53857: LD_INT 3
53859: PUSH
53860: EMPTY
53861: LIST
53862: LIST
53863: PUSH
53864: LD_INT 1
53866: PUSH
53867: LD_INT 4
53869: PUSH
53870: EMPTY
53871: LIST
53872: LIST
53873: PUSH
53874: LD_INT 1
53876: PUSH
53877: LD_INT 5
53879: PUSH
53880: EMPTY
53881: LIST
53882: LIST
53883: PUSH
53884: LD_INT 0
53886: PUSH
53887: LD_INT 5
53889: PUSH
53890: EMPTY
53891: LIST
53892: LIST
53893: PUSH
53894: LD_INT 1
53896: NEG
53897: PUSH
53898: LD_INT 4
53900: PUSH
53901: EMPTY
53902: LIST
53903: LIST
53904: PUSH
53905: LD_INT 1
53907: NEG
53908: PUSH
53909: LD_INT 3
53911: PUSH
53912: EMPTY
53913: LIST
53914: LIST
53915: PUSH
53916: LD_INT 2
53918: PUSH
53919: LD_INT 5
53921: PUSH
53922: EMPTY
53923: LIST
53924: LIST
53925: PUSH
53926: LD_INT 2
53928: NEG
53929: PUSH
53930: LD_INT 3
53932: PUSH
53933: EMPTY
53934: LIST
53935: LIST
53936: PUSH
53937: LD_INT 3
53939: NEG
53940: PUSH
53941: LD_INT 0
53943: PUSH
53944: EMPTY
53945: LIST
53946: LIST
53947: PUSH
53948: LD_INT 3
53950: NEG
53951: PUSH
53952: LD_INT 1
53954: NEG
53955: PUSH
53956: EMPTY
53957: LIST
53958: LIST
53959: PUSH
53960: LD_INT 2
53962: NEG
53963: PUSH
53964: LD_INT 0
53966: PUSH
53967: EMPTY
53968: LIST
53969: LIST
53970: PUSH
53971: LD_INT 2
53973: NEG
53974: PUSH
53975: LD_INT 1
53977: PUSH
53978: EMPTY
53979: LIST
53980: LIST
53981: PUSH
53982: LD_INT 3
53984: NEG
53985: PUSH
53986: LD_INT 1
53988: PUSH
53989: EMPTY
53990: LIST
53991: LIST
53992: PUSH
53993: LD_INT 4
53995: NEG
53996: PUSH
53997: LD_INT 0
53999: PUSH
54000: EMPTY
54001: LIST
54002: LIST
54003: PUSH
54004: LD_INT 4
54006: NEG
54007: PUSH
54008: LD_INT 1
54010: NEG
54011: PUSH
54012: EMPTY
54013: LIST
54014: LIST
54015: PUSH
54016: LD_INT 4
54018: NEG
54019: PUSH
54020: LD_INT 2
54022: NEG
54023: PUSH
54024: EMPTY
54025: LIST
54026: LIST
54027: PUSH
54028: LD_INT 2
54030: NEG
54031: PUSH
54032: LD_INT 2
54034: PUSH
54035: EMPTY
54036: LIST
54037: LIST
54038: PUSH
54039: LD_INT 4
54041: NEG
54042: PUSH
54043: LD_INT 4
54045: NEG
54046: PUSH
54047: EMPTY
54048: LIST
54049: LIST
54050: PUSH
54051: LD_INT 4
54053: NEG
54054: PUSH
54055: LD_INT 5
54057: NEG
54058: PUSH
54059: EMPTY
54060: LIST
54061: LIST
54062: PUSH
54063: LD_INT 3
54065: NEG
54066: PUSH
54067: LD_INT 4
54069: NEG
54070: PUSH
54071: EMPTY
54072: LIST
54073: LIST
54074: PUSH
54075: LD_INT 3
54077: NEG
54078: PUSH
54079: LD_INT 3
54081: NEG
54082: PUSH
54083: EMPTY
54084: LIST
54085: LIST
54086: PUSH
54087: LD_INT 4
54089: NEG
54090: PUSH
54091: LD_INT 3
54093: NEG
54094: PUSH
54095: EMPTY
54096: LIST
54097: LIST
54098: PUSH
54099: LD_INT 5
54101: NEG
54102: PUSH
54103: LD_INT 4
54105: NEG
54106: PUSH
54107: EMPTY
54108: LIST
54109: LIST
54110: PUSH
54111: LD_INT 5
54113: NEG
54114: PUSH
54115: LD_INT 5
54117: NEG
54118: PUSH
54119: EMPTY
54120: LIST
54121: LIST
54122: PUSH
54123: LD_INT 3
54125: NEG
54126: PUSH
54127: LD_INT 5
54129: NEG
54130: PUSH
54131: EMPTY
54132: LIST
54133: LIST
54134: PUSH
54135: LD_INT 5
54137: NEG
54138: PUSH
54139: LD_INT 3
54141: NEG
54142: PUSH
54143: EMPTY
54144: LIST
54145: LIST
54146: PUSH
54147: LD_INT 0
54149: PUSH
54150: LD_INT 3
54152: NEG
54153: PUSH
54154: EMPTY
54155: LIST
54156: LIST
54157: PUSH
54158: LD_INT 0
54160: PUSH
54161: LD_INT 4
54163: NEG
54164: PUSH
54165: EMPTY
54166: LIST
54167: LIST
54168: PUSH
54169: LD_INT 1
54171: PUSH
54172: LD_INT 3
54174: NEG
54175: PUSH
54176: EMPTY
54177: LIST
54178: LIST
54179: PUSH
54180: LD_INT 1
54182: PUSH
54183: LD_INT 2
54185: NEG
54186: PUSH
54187: EMPTY
54188: LIST
54189: LIST
54190: PUSH
54191: LD_INT 0
54193: PUSH
54194: LD_INT 2
54196: NEG
54197: PUSH
54198: EMPTY
54199: LIST
54200: LIST
54201: PUSH
54202: LD_INT 1
54204: NEG
54205: PUSH
54206: LD_INT 3
54208: NEG
54209: PUSH
54210: EMPTY
54211: LIST
54212: LIST
54213: PUSH
54214: LD_INT 1
54216: NEG
54217: PUSH
54218: LD_INT 4
54220: NEG
54221: PUSH
54222: EMPTY
54223: LIST
54224: LIST
54225: PUSH
54226: LD_INT 2
54228: PUSH
54229: LD_INT 2
54231: NEG
54232: PUSH
54233: EMPTY
54234: LIST
54235: LIST
54236: PUSH
54237: LD_INT 2
54239: NEG
54240: PUSH
54241: LD_INT 4
54243: NEG
54244: PUSH
54245: EMPTY
54246: LIST
54247: LIST
54248: PUSH
54249: LD_INT 4
54251: PUSH
54252: LD_INT 0
54254: PUSH
54255: EMPTY
54256: LIST
54257: LIST
54258: PUSH
54259: LD_INT 4
54261: PUSH
54262: LD_INT 1
54264: NEG
54265: PUSH
54266: EMPTY
54267: LIST
54268: LIST
54269: PUSH
54270: LD_INT 5
54272: PUSH
54273: LD_INT 0
54275: PUSH
54276: EMPTY
54277: LIST
54278: LIST
54279: PUSH
54280: LD_INT 5
54282: PUSH
54283: LD_INT 1
54285: PUSH
54286: EMPTY
54287: LIST
54288: LIST
54289: PUSH
54290: LD_INT 4
54292: PUSH
54293: LD_INT 1
54295: PUSH
54296: EMPTY
54297: LIST
54298: LIST
54299: PUSH
54300: LD_INT 3
54302: PUSH
54303: LD_INT 0
54305: PUSH
54306: EMPTY
54307: LIST
54308: LIST
54309: PUSH
54310: LD_INT 3
54312: PUSH
54313: LD_INT 1
54315: NEG
54316: PUSH
54317: EMPTY
54318: LIST
54319: LIST
54320: PUSH
54321: LD_INT 3
54323: PUSH
54324: LD_INT 2
54326: NEG
54327: PUSH
54328: EMPTY
54329: LIST
54330: LIST
54331: PUSH
54332: LD_INT 5
54334: PUSH
54335: LD_INT 2
54337: PUSH
54338: EMPTY
54339: LIST
54340: LIST
54341: PUSH
54342: EMPTY
54343: LIST
54344: LIST
54345: LIST
54346: LIST
54347: LIST
54348: LIST
54349: LIST
54350: LIST
54351: LIST
54352: LIST
54353: LIST
54354: LIST
54355: LIST
54356: LIST
54357: LIST
54358: LIST
54359: LIST
54360: LIST
54361: LIST
54362: LIST
54363: LIST
54364: LIST
54365: LIST
54366: LIST
54367: LIST
54368: LIST
54369: LIST
54370: LIST
54371: LIST
54372: LIST
54373: LIST
54374: LIST
54375: LIST
54376: LIST
54377: LIST
54378: LIST
54379: LIST
54380: LIST
54381: LIST
54382: LIST
54383: LIST
54384: LIST
54385: LIST
54386: LIST
54387: LIST
54388: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
54389: LD_ADDR_VAR 0 32
54393: PUSH
54394: LD_INT 4
54396: NEG
54397: PUSH
54398: LD_INT 0
54400: PUSH
54401: EMPTY
54402: LIST
54403: LIST
54404: PUSH
54405: LD_INT 4
54407: NEG
54408: PUSH
54409: LD_INT 1
54411: NEG
54412: PUSH
54413: EMPTY
54414: LIST
54415: LIST
54416: PUSH
54417: LD_INT 3
54419: NEG
54420: PUSH
54421: LD_INT 0
54423: PUSH
54424: EMPTY
54425: LIST
54426: LIST
54427: PUSH
54428: LD_INT 3
54430: NEG
54431: PUSH
54432: LD_INT 1
54434: PUSH
54435: EMPTY
54436: LIST
54437: LIST
54438: PUSH
54439: LD_INT 4
54441: NEG
54442: PUSH
54443: LD_INT 1
54445: PUSH
54446: EMPTY
54447: LIST
54448: LIST
54449: PUSH
54450: LD_INT 5
54452: NEG
54453: PUSH
54454: LD_INT 0
54456: PUSH
54457: EMPTY
54458: LIST
54459: LIST
54460: PUSH
54461: LD_INT 5
54463: NEG
54464: PUSH
54465: LD_INT 1
54467: NEG
54468: PUSH
54469: EMPTY
54470: LIST
54471: LIST
54472: PUSH
54473: LD_INT 5
54475: NEG
54476: PUSH
54477: LD_INT 2
54479: NEG
54480: PUSH
54481: EMPTY
54482: LIST
54483: LIST
54484: PUSH
54485: LD_INT 3
54487: NEG
54488: PUSH
54489: LD_INT 2
54491: PUSH
54492: EMPTY
54493: LIST
54494: LIST
54495: PUSH
54496: LD_INT 3
54498: NEG
54499: PUSH
54500: LD_INT 3
54502: NEG
54503: PUSH
54504: EMPTY
54505: LIST
54506: LIST
54507: PUSH
54508: LD_INT 3
54510: NEG
54511: PUSH
54512: LD_INT 4
54514: NEG
54515: PUSH
54516: EMPTY
54517: LIST
54518: LIST
54519: PUSH
54520: LD_INT 2
54522: NEG
54523: PUSH
54524: LD_INT 3
54526: NEG
54527: PUSH
54528: EMPTY
54529: LIST
54530: LIST
54531: PUSH
54532: LD_INT 2
54534: NEG
54535: PUSH
54536: LD_INT 2
54538: NEG
54539: PUSH
54540: EMPTY
54541: LIST
54542: LIST
54543: PUSH
54544: LD_INT 3
54546: NEG
54547: PUSH
54548: LD_INT 2
54550: NEG
54551: PUSH
54552: EMPTY
54553: LIST
54554: LIST
54555: PUSH
54556: LD_INT 4
54558: NEG
54559: PUSH
54560: LD_INT 3
54562: NEG
54563: PUSH
54564: EMPTY
54565: LIST
54566: LIST
54567: PUSH
54568: LD_INT 4
54570: NEG
54571: PUSH
54572: LD_INT 4
54574: NEG
54575: PUSH
54576: EMPTY
54577: LIST
54578: LIST
54579: PUSH
54580: LD_INT 2
54582: NEG
54583: PUSH
54584: LD_INT 4
54586: NEG
54587: PUSH
54588: EMPTY
54589: LIST
54590: LIST
54591: PUSH
54592: LD_INT 4
54594: NEG
54595: PUSH
54596: LD_INT 2
54598: NEG
54599: PUSH
54600: EMPTY
54601: LIST
54602: LIST
54603: PUSH
54604: LD_INT 0
54606: PUSH
54607: LD_INT 4
54609: NEG
54610: PUSH
54611: EMPTY
54612: LIST
54613: LIST
54614: PUSH
54615: LD_INT 0
54617: PUSH
54618: LD_INT 5
54620: NEG
54621: PUSH
54622: EMPTY
54623: LIST
54624: LIST
54625: PUSH
54626: LD_INT 1
54628: PUSH
54629: LD_INT 4
54631: NEG
54632: PUSH
54633: EMPTY
54634: LIST
54635: LIST
54636: PUSH
54637: LD_INT 1
54639: PUSH
54640: LD_INT 3
54642: NEG
54643: PUSH
54644: EMPTY
54645: LIST
54646: LIST
54647: PUSH
54648: LD_INT 0
54650: PUSH
54651: LD_INT 3
54653: NEG
54654: PUSH
54655: EMPTY
54656: LIST
54657: LIST
54658: PUSH
54659: LD_INT 1
54661: NEG
54662: PUSH
54663: LD_INT 4
54665: NEG
54666: PUSH
54667: EMPTY
54668: LIST
54669: LIST
54670: PUSH
54671: LD_INT 1
54673: NEG
54674: PUSH
54675: LD_INT 5
54677: NEG
54678: PUSH
54679: EMPTY
54680: LIST
54681: LIST
54682: PUSH
54683: LD_INT 2
54685: PUSH
54686: LD_INT 3
54688: NEG
54689: PUSH
54690: EMPTY
54691: LIST
54692: LIST
54693: PUSH
54694: LD_INT 2
54696: NEG
54697: PUSH
54698: LD_INT 5
54700: NEG
54701: PUSH
54702: EMPTY
54703: LIST
54704: LIST
54705: PUSH
54706: LD_INT 3
54708: PUSH
54709: LD_INT 0
54711: PUSH
54712: EMPTY
54713: LIST
54714: LIST
54715: PUSH
54716: LD_INT 3
54718: PUSH
54719: LD_INT 1
54721: NEG
54722: PUSH
54723: EMPTY
54724: LIST
54725: LIST
54726: PUSH
54727: LD_INT 4
54729: PUSH
54730: LD_INT 0
54732: PUSH
54733: EMPTY
54734: LIST
54735: LIST
54736: PUSH
54737: LD_INT 4
54739: PUSH
54740: LD_INT 1
54742: PUSH
54743: EMPTY
54744: LIST
54745: LIST
54746: PUSH
54747: LD_INT 3
54749: PUSH
54750: LD_INT 1
54752: PUSH
54753: EMPTY
54754: LIST
54755: LIST
54756: PUSH
54757: LD_INT 2
54759: PUSH
54760: LD_INT 0
54762: PUSH
54763: EMPTY
54764: LIST
54765: LIST
54766: PUSH
54767: LD_INT 2
54769: PUSH
54770: LD_INT 1
54772: NEG
54773: PUSH
54774: EMPTY
54775: LIST
54776: LIST
54777: PUSH
54778: LD_INT 2
54780: PUSH
54781: LD_INT 2
54783: NEG
54784: PUSH
54785: EMPTY
54786: LIST
54787: LIST
54788: PUSH
54789: LD_INT 4
54791: PUSH
54792: LD_INT 2
54794: PUSH
54795: EMPTY
54796: LIST
54797: LIST
54798: PUSH
54799: LD_INT 4
54801: PUSH
54802: LD_INT 4
54804: PUSH
54805: EMPTY
54806: LIST
54807: LIST
54808: PUSH
54809: LD_INT 4
54811: PUSH
54812: LD_INT 3
54814: PUSH
54815: EMPTY
54816: LIST
54817: LIST
54818: PUSH
54819: LD_INT 5
54821: PUSH
54822: LD_INT 4
54824: PUSH
54825: EMPTY
54826: LIST
54827: LIST
54828: PUSH
54829: LD_INT 5
54831: PUSH
54832: LD_INT 5
54834: PUSH
54835: EMPTY
54836: LIST
54837: LIST
54838: PUSH
54839: LD_INT 4
54841: PUSH
54842: LD_INT 5
54844: PUSH
54845: EMPTY
54846: LIST
54847: LIST
54848: PUSH
54849: LD_INT 3
54851: PUSH
54852: LD_INT 4
54854: PUSH
54855: EMPTY
54856: LIST
54857: LIST
54858: PUSH
54859: LD_INT 3
54861: PUSH
54862: LD_INT 3
54864: PUSH
54865: EMPTY
54866: LIST
54867: LIST
54868: PUSH
54869: LD_INT 5
54871: PUSH
54872: LD_INT 3
54874: PUSH
54875: EMPTY
54876: LIST
54877: LIST
54878: PUSH
54879: LD_INT 3
54881: PUSH
54882: LD_INT 5
54884: PUSH
54885: EMPTY
54886: LIST
54887: LIST
54888: PUSH
54889: EMPTY
54890: LIST
54891: LIST
54892: LIST
54893: LIST
54894: LIST
54895: LIST
54896: LIST
54897: LIST
54898: LIST
54899: LIST
54900: LIST
54901: LIST
54902: LIST
54903: LIST
54904: LIST
54905: LIST
54906: LIST
54907: LIST
54908: LIST
54909: LIST
54910: LIST
54911: LIST
54912: LIST
54913: LIST
54914: LIST
54915: LIST
54916: LIST
54917: LIST
54918: LIST
54919: LIST
54920: LIST
54921: LIST
54922: LIST
54923: LIST
54924: LIST
54925: LIST
54926: LIST
54927: LIST
54928: LIST
54929: LIST
54930: LIST
54931: LIST
54932: LIST
54933: LIST
54934: LIST
54935: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
54936: LD_ADDR_VAR 0 33
54940: PUSH
54941: LD_INT 4
54943: NEG
54944: PUSH
54945: LD_INT 4
54947: NEG
54948: PUSH
54949: EMPTY
54950: LIST
54951: LIST
54952: PUSH
54953: LD_INT 4
54955: NEG
54956: PUSH
54957: LD_INT 5
54959: NEG
54960: PUSH
54961: EMPTY
54962: LIST
54963: LIST
54964: PUSH
54965: LD_INT 3
54967: NEG
54968: PUSH
54969: LD_INT 4
54971: NEG
54972: PUSH
54973: EMPTY
54974: LIST
54975: LIST
54976: PUSH
54977: LD_INT 3
54979: NEG
54980: PUSH
54981: LD_INT 3
54983: NEG
54984: PUSH
54985: EMPTY
54986: LIST
54987: LIST
54988: PUSH
54989: LD_INT 4
54991: NEG
54992: PUSH
54993: LD_INT 3
54995: NEG
54996: PUSH
54997: EMPTY
54998: LIST
54999: LIST
55000: PUSH
55001: LD_INT 5
55003: NEG
55004: PUSH
55005: LD_INT 4
55007: NEG
55008: PUSH
55009: EMPTY
55010: LIST
55011: LIST
55012: PUSH
55013: LD_INT 5
55015: NEG
55016: PUSH
55017: LD_INT 5
55019: NEG
55020: PUSH
55021: EMPTY
55022: LIST
55023: LIST
55024: PUSH
55025: LD_INT 3
55027: NEG
55028: PUSH
55029: LD_INT 5
55031: NEG
55032: PUSH
55033: EMPTY
55034: LIST
55035: LIST
55036: PUSH
55037: LD_INT 5
55039: NEG
55040: PUSH
55041: LD_INT 3
55043: NEG
55044: PUSH
55045: EMPTY
55046: LIST
55047: LIST
55048: PUSH
55049: LD_INT 0
55051: PUSH
55052: LD_INT 3
55054: NEG
55055: PUSH
55056: EMPTY
55057: LIST
55058: LIST
55059: PUSH
55060: LD_INT 0
55062: PUSH
55063: LD_INT 4
55065: NEG
55066: PUSH
55067: EMPTY
55068: LIST
55069: LIST
55070: PUSH
55071: LD_INT 1
55073: PUSH
55074: LD_INT 3
55076: NEG
55077: PUSH
55078: EMPTY
55079: LIST
55080: LIST
55081: PUSH
55082: LD_INT 1
55084: PUSH
55085: LD_INT 2
55087: NEG
55088: PUSH
55089: EMPTY
55090: LIST
55091: LIST
55092: PUSH
55093: LD_INT 0
55095: PUSH
55096: LD_INT 2
55098: NEG
55099: PUSH
55100: EMPTY
55101: LIST
55102: LIST
55103: PUSH
55104: LD_INT 1
55106: NEG
55107: PUSH
55108: LD_INT 3
55110: NEG
55111: PUSH
55112: EMPTY
55113: LIST
55114: LIST
55115: PUSH
55116: LD_INT 1
55118: NEG
55119: PUSH
55120: LD_INT 4
55122: NEG
55123: PUSH
55124: EMPTY
55125: LIST
55126: LIST
55127: PUSH
55128: LD_INT 2
55130: PUSH
55131: LD_INT 2
55133: NEG
55134: PUSH
55135: EMPTY
55136: LIST
55137: LIST
55138: PUSH
55139: LD_INT 2
55141: NEG
55142: PUSH
55143: LD_INT 4
55145: NEG
55146: PUSH
55147: EMPTY
55148: LIST
55149: LIST
55150: PUSH
55151: LD_INT 4
55153: PUSH
55154: LD_INT 0
55156: PUSH
55157: EMPTY
55158: LIST
55159: LIST
55160: PUSH
55161: LD_INT 4
55163: PUSH
55164: LD_INT 1
55166: NEG
55167: PUSH
55168: EMPTY
55169: LIST
55170: LIST
55171: PUSH
55172: LD_INT 5
55174: PUSH
55175: LD_INT 0
55177: PUSH
55178: EMPTY
55179: LIST
55180: LIST
55181: PUSH
55182: LD_INT 5
55184: PUSH
55185: LD_INT 1
55187: PUSH
55188: EMPTY
55189: LIST
55190: LIST
55191: PUSH
55192: LD_INT 4
55194: PUSH
55195: LD_INT 1
55197: PUSH
55198: EMPTY
55199: LIST
55200: LIST
55201: PUSH
55202: LD_INT 3
55204: PUSH
55205: LD_INT 0
55207: PUSH
55208: EMPTY
55209: LIST
55210: LIST
55211: PUSH
55212: LD_INT 3
55214: PUSH
55215: LD_INT 1
55217: NEG
55218: PUSH
55219: EMPTY
55220: LIST
55221: LIST
55222: PUSH
55223: LD_INT 3
55225: PUSH
55226: LD_INT 2
55228: NEG
55229: PUSH
55230: EMPTY
55231: LIST
55232: LIST
55233: PUSH
55234: LD_INT 5
55236: PUSH
55237: LD_INT 2
55239: PUSH
55240: EMPTY
55241: LIST
55242: LIST
55243: PUSH
55244: LD_INT 3
55246: PUSH
55247: LD_INT 3
55249: PUSH
55250: EMPTY
55251: LIST
55252: LIST
55253: PUSH
55254: LD_INT 3
55256: PUSH
55257: LD_INT 2
55259: PUSH
55260: EMPTY
55261: LIST
55262: LIST
55263: PUSH
55264: LD_INT 4
55266: PUSH
55267: LD_INT 3
55269: PUSH
55270: EMPTY
55271: LIST
55272: LIST
55273: PUSH
55274: LD_INT 4
55276: PUSH
55277: LD_INT 4
55279: PUSH
55280: EMPTY
55281: LIST
55282: LIST
55283: PUSH
55284: LD_INT 3
55286: PUSH
55287: LD_INT 4
55289: PUSH
55290: EMPTY
55291: LIST
55292: LIST
55293: PUSH
55294: LD_INT 2
55296: PUSH
55297: LD_INT 3
55299: PUSH
55300: EMPTY
55301: LIST
55302: LIST
55303: PUSH
55304: LD_INT 2
55306: PUSH
55307: LD_INT 2
55309: PUSH
55310: EMPTY
55311: LIST
55312: LIST
55313: PUSH
55314: LD_INT 4
55316: PUSH
55317: LD_INT 2
55319: PUSH
55320: EMPTY
55321: LIST
55322: LIST
55323: PUSH
55324: LD_INT 2
55326: PUSH
55327: LD_INT 4
55329: PUSH
55330: EMPTY
55331: LIST
55332: LIST
55333: PUSH
55334: LD_INT 0
55336: PUSH
55337: LD_INT 4
55339: PUSH
55340: EMPTY
55341: LIST
55342: LIST
55343: PUSH
55344: LD_INT 0
55346: PUSH
55347: LD_INT 3
55349: PUSH
55350: EMPTY
55351: LIST
55352: LIST
55353: PUSH
55354: LD_INT 1
55356: PUSH
55357: LD_INT 4
55359: PUSH
55360: EMPTY
55361: LIST
55362: LIST
55363: PUSH
55364: LD_INT 1
55366: PUSH
55367: LD_INT 5
55369: PUSH
55370: EMPTY
55371: LIST
55372: LIST
55373: PUSH
55374: LD_INT 0
55376: PUSH
55377: LD_INT 5
55379: PUSH
55380: EMPTY
55381: LIST
55382: LIST
55383: PUSH
55384: LD_INT 1
55386: NEG
55387: PUSH
55388: LD_INT 4
55390: PUSH
55391: EMPTY
55392: LIST
55393: LIST
55394: PUSH
55395: LD_INT 1
55397: NEG
55398: PUSH
55399: LD_INT 3
55401: PUSH
55402: EMPTY
55403: LIST
55404: LIST
55405: PUSH
55406: LD_INT 2
55408: PUSH
55409: LD_INT 5
55411: PUSH
55412: EMPTY
55413: LIST
55414: LIST
55415: PUSH
55416: LD_INT 2
55418: NEG
55419: PUSH
55420: LD_INT 3
55422: PUSH
55423: EMPTY
55424: LIST
55425: LIST
55426: PUSH
55427: EMPTY
55428: LIST
55429: LIST
55430: LIST
55431: LIST
55432: LIST
55433: LIST
55434: LIST
55435: LIST
55436: LIST
55437: LIST
55438: LIST
55439: LIST
55440: LIST
55441: LIST
55442: LIST
55443: LIST
55444: LIST
55445: LIST
55446: LIST
55447: LIST
55448: LIST
55449: LIST
55450: LIST
55451: LIST
55452: LIST
55453: LIST
55454: LIST
55455: LIST
55456: LIST
55457: LIST
55458: LIST
55459: LIST
55460: LIST
55461: LIST
55462: LIST
55463: LIST
55464: LIST
55465: LIST
55466: LIST
55467: LIST
55468: LIST
55469: LIST
55470: LIST
55471: LIST
55472: LIST
55473: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
55474: LD_ADDR_VAR 0 34
55478: PUSH
55479: LD_INT 0
55481: PUSH
55482: LD_INT 4
55484: NEG
55485: PUSH
55486: EMPTY
55487: LIST
55488: LIST
55489: PUSH
55490: LD_INT 0
55492: PUSH
55493: LD_INT 5
55495: NEG
55496: PUSH
55497: EMPTY
55498: LIST
55499: LIST
55500: PUSH
55501: LD_INT 1
55503: PUSH
55504: LD_INT 4
55506: NEG
55507: PUSH
55508: EMPTY
55509: LIST
55510: LIST
55511: PUSH
55512: LD_INT 1
55514: PUSH
55515: LD_INT 3
55517: NEG
55518: PUSH
55519: EMPTY
55520: LIST
55521: LIST
55522: PUSH
55523: LD_INT 0
55525: PUSH
55526: LD_INT 3
55528: NEG
55529: PUSH
55530: EMPTY
55531: LIST
55532: LIST
55533: PUSH
55534: LD_INT 1
55536: NEG
55537: PUSH
55538: LD_INT 4
55540: NEG
55541: PUSH
55542: EMPTY
55543: LIST
55544: LIST
55545: PUSH
55546: LD_INT 1
55548: NEG
55549: PUSH
55550: LD_INT 5
55552: NEG
55553: PUSH
55554: EMPTY
55555: LIST
55556: LIST
55557: PUSH
55558: LD_INT 2
55560: PUSH
55561: LD_INT 3
55563: NEG
55564: PUSH
55565: EMPTY
55566: LIST
55567: LIST
55568: PUSH
55569: LD_INT 2
55571: NEG
55572: PUSH
55573: LD_INT 5
55575: NEG
55576: PUSH
55577: EMPTY
55578: LIST
55579: LIST
55580: PUSH
55581: LD_INT 3
55583: PUSH
55584: LD_INT 0
55586: PUSH
55587: EMPTY
55588: LIST
55589: LIST
55590: PUSH
55591: LD_INT 3
55593: PUSH
55594: LD_INT 1
55596: NEG
55597: PUSH
55598: EMPTY
55599: LIST
55600: LIST
55601: PUSH
55602: LD_INT 4
55604: PUSH
55605: LD_INT 0
55607: PUSH
55608: EMPTY
55609: LIST
55610: LIST
55611: PUSH
55612: LD_INT 4
55614: PUSH
55615: LD_INT 1
55617: PUSH
55618: EMPTY
55619: LIST
55620: LIST
55621: PUSH
55622: LD_INT 3
55624: PUSH
55625: LD_INT 1
55627: PUSH
55628: EMPTY
55629: LIST
55630: LIST
55631: PUSH
55632: LD_INT 2
55634: PUSH
55635: LD_INT 0
55637: PUSH
55638: EMPTY
55639: LIST
55640: LIST
55641: PUSH
55642: LD_INT 2
55644: PUSH
55645: LD_INT 1
55647: NEG
55648: PUSH
55649: EMPTY
55650: LIST
55651: LIST
55652: PUSH
55653: LD_INT 2
55655: PUSH
55656: LD_INT 2
55658: NEG
55659: PUSH
55660: EMPTY
55661: LIST
55662: LIST
55663: PUSH
55664: LD_INT 4
55666: PUSH
55667: LD_INT 2
55669: PUSH
55670: EMPTY
55671: LIST
55672: LIST
55673: PUSH
55674: LD_INT 4
55676: PUSH
55677: LD_INT 4
55679: PUSH
55680: EMPTY
55681: LIST
55682: LIST
55683: PUSH
55684: LD_INT 4
55686: PUSH
55687: LD_INT 3
55689: PUSH
55690: EMPTY
55691: LIST
55692: LIST
55693: PUSH
55694: LD_INT 5
55696: PUSH
55697: LD_INT 4
55699: PUSH
55700: EMPTY
55701: LIST
55702: LIST
55703: PUSH
55704: LD_INT 5
55706: PUSH
55707: LD_INT 5
55709: PUSH
55710: EMPTY
55711: LIST
55712: LIST
55713: PUSH
55714: LD_INT 4
55716: PUSH
55717: LD_INT 5
55719: PUSH
55720: EMPTY
55721: LIST
55722: LIST
55723: PUSH
55724: LD_INT 3
55726: PUSH
55727: LD_INT 4
55729: PUSH
55730: EMPTY
55731: LIST
55732: LIST
55733: PUSH
55734: LD_INT 3
55736: PUSH
55737: LD_INT 3
55739: PUSH
55740: EMPTY
55741: LIST
55742: LIST
55743: PUSH
55744: LD_INT 5
55746: PUSH
55747: LD_INT 3
55749: PUSH
55750: EMPTY
55751: LIST
55752: LIST
55753: PUSH
55754: LD_INT 3
55756: PUSH
55757: LD_INT 5
55759: PUSH
55760: EMPTY
55761: LIST
55762: LIST
55763: PUSH
55764: LD_INT 0
55766: PUSH
55767: LD_INT 3
55769: PUSH
55770: EMPTY
55771: LIST
55772: LIST
55773: PUSH
55774: LD_INT 0
55776: PUSH
55777: LD_INT 2
55779: PUSH
55780: EMPTY
55781: LIST
55782: LIST
55783: PUSH
55784: LD_INT 1
55786: PUSH
55787: LD_INT 3
55789: PUSH
55790: EMPTY
55791: LIST
55792: LIST
55793: PUSH
55794: LD_INT 1
55796: PUSH
55797: LD_INT 4
55799: PUSH
55800: EMPTY
55801: LIST
55802: LIST
55803: PUSH
55804: LD_INT 0
55806: PUSH
55807: LD_INT 4
55809: PUSH
55810: EMPTY
55811: LIST
55812: LIST
55813: PUSH
55814: LD_INT 1
55816: NEG
55817: PUSH
55818: LD_INT 3
55820: PUSH
55821: EMPTY
55822: LIST
55823: LIST
55824: PUSH
55825: LD_INT 1
55827: NEG
55828: PUSH
55829: LD_INT 2
55831: PUSH
55832: EMPTY
55833: LIST
55834: LIST
55835: PUSH
55836: LD_INT 2
55838: PUSH
55839: LD_INT 4
55841: PUSH
55842: EMPTY
55843: LIST
55844: LIST
55845: PUSH
55846: LD_INT 2
55848: NEG
55849: PUSH
55850: LD_INT 2
55852: PUSH
55853: EMPTY
55854: LIST
55855: LIST
55856: PUSH
55857: LD_INT 4
55859: NEG
55860: PUSH
55861: LD_INT 0
55863: PUSH
55864: EMPTY
55865: LIST
55866: LIST
55867: PUSH
55868: LD_INT 4
55870: NEG
55871: PUSH
55872: LD_INT 1
55874: NEG
55875: PUSH
55876: EMPTY
55877: LIST
55878: LIST
55879: PUSH
55880: LD_INT 3
55882: NEG
55883: PUSH
55884: LD_INT 0
55886: PUSH
55887: EMPTY
55888: LIST
55889: LIST
55890: PUSH
55891: LD_INT 3
55893: NEG
55894: PUSH
55895: LD_INT 1
55897: PUSH
55898: EMPTY
55899: LIST
55900: LIST
55901: PUSH
55902: LD_INT 4
55904: NEG
55905: PUSH
55906: LD_INT 1
55908: PUSH
55909: EMPTY
55910: LIST
55911: LIST
55912: PUSH
55913: LD_INT 5
55915: NEG
55916: PUSH
55917: LD_INT 0
55919: PUSH
55920: EMPTY
55921: LIST
55922: LIST
55923: PUSH
55924: LD_INT 5
55926: NEG
55927: PUSH
55928: LD_INT 1
55930: NEG
55931: PUSH
55932: EMPTY
55933: LIST
55934: LIST
55935: PUSH
55936: LD_INT 5
55938: NEG
55939: PUSH
55940: LD_INT 2
55942: NEG
55943: PUSH
55944: EMPTY
55945: LIST
55946: LIST
55947: PUSH
55948: LD_INT 3
55950: NEG
55951: PUSH
55952: LD_INT 2
55954: PUSH
55955: EMPTY
55956: LIST
55957: LIST
55958: PUSH
55959: EMPTY
55960: LIST
55961: LIST
55962: LIST
55963: LIST
55964: LIST
55965: LIST
55966: LIST
55967: LIST
55968: LIST
55969: LIST
55970: LIST
55971: LIST
55972: LIST
55973: LIST
55974: LIST
55975: LIST
55976: LIST
55977: LIST
55978: LIST
55979: LIST
55980: LIST
55981: LIST
55982: LIST
55983: LIST
55984: LIST
55985: LIST
55986: LIST
55987: LIST
55988: LIST
55989: LIST
55990: LIST
55991: LIST
55992: LIST
55993: LIST
55994: LIST
55995: LIST
55996: LIST
55997: LIST
55998: LIST
55999: LIST
56000: LIST
56001: LIST
56002: LIST
56003: LIST
56004: LIST
56005: ST_TO_ADDR
// end ; end ;
56006: GO 56009
56008: POP
// case btype of b_depot , b_warehouse :
56009: LD_VAR 0 1
56013: PUSH
56014: LD_INT 0
56016: DOUBLE
56017: EQUAL
56018: IFTRUE 56028
56020: LD_INT 1
56022: DOUBLE
56023: EQUAL
56024: IFTRUE 56028
56026: GO 56229
56028: POP
// case nation of nation_american :
56029: LD_VAR 0 5
56033: PUSH
56034: LD_INT 1
56036: DOUBLE
56037: EQUAL
56038: IFTRUE 56042
56040: GO 56098
56042: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
56043: LD_ADDR_VAR 0 9
56047: PUSH
56048: LD_VAR 0 11
56052: PUSH
56053: LD_VAR 0 12
56057: PUSH
56058: LD_VAR 0 13
56062: PUSH
56063: LD_VAR 0 14
56067: PUSH
56068: LD_VAR 0 15
56072: PUSH
56073: LD_VAR 0 16
56077: PUSH
56078: EMPTY
56079: LIST
56080: LIST
56081: LIST
56082: LIST
56083: LIST
56084: LIST
56085: PUSH
56086: LD_VAR 0 4
56090: PUSH
56091: LD_INT 1
56093: PLUS
56094: ARRAY
56095: ST_TO_ADDR
56096: GO 56227
56098: LD_INT 2
56100: DOUBLE
56101: EQUAL
56102: IFTRUE 56106
56104: GO 56162
56106: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
56107: LD_ADDR_VAR 0 9
56111: PUSH
56112: LD_VAR 0 17
56116: PUSH
56117: LD_VAR 0 18
56121: PUSH
56122: LD_VAR 0 19
56126: PUSH
56127: LD_VAR 0 20
56131: PUSH
56132: LD_VAR 0 21
56136: PUSH
56137: LD_VAR 0 22
56141: PUSH
56142: EMPTY
56143: LIST
56144: LIST
56145: LIST
56146: LIST
56147: LIST
56148: LIST
56149: PUSH
56150: LD_VAR 0 4
56154: PUSH
56155: LD_INT 1
56157: PLUS
56158: ARRAY
56159: ST_TO_ADDR
56160: GO 56227
56162: LD_INT 3
56164: DOUBLE
56165: EQUAL
56166: IFTRUE 56170
56168: GO 56226
56170: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
56171: LD_ADDR_VAR 0 9
56175: PUSH
56176: LD_VAR 0 23
56180: PUSH
56181: LD_VAR 0 24
56185: PUSH
56186: LD_VAR 0 25
56190: PUSH
56191: LD_VAR 0 26
56195: PUSH
56196: LD_VAR 0 27
56200: PUSH
56201: LD_VAR 0 28
56205: PUSH
56206: EMPTY
56207: LIST
56208: LIST
56209: LIST
56210: LIST
56211: LIST
56212: LIST
56213: PUSH
56214: LD_VAR 0 4
56218: PUSH
56219: LD_INT 1
56221: PLUS
56222: ARRAY
56223: ST_TO_ADDR
56224: GO 56227
56226: POP
56227: GO 56782
56229: LD_INT 2
56231: DOUBLE
56232: EQUAL
56233: IFTRUE 56243
56235: LD_INT 3
56237: DOUBLE
56238: EQUAL
56239: IFTRUE 56243
56241: GO 56299
56243: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
56244: LD_ADDR_VAR 0 9
56248: PUSH
56249: LD_VAR 0 29
56253: PUSH
56254: LD_VAR 0 30
56258: PUSH
56259: LD_VAR 0 31
56263: PUSH
56264: LD_VAR 0 32
56268: PUSH
56269: LD_VAR 0 33
56273: PUSH
56274: LD_VAR 0 34
56278: PUSH
56279: EMPTY
56280: LIST
56281: LIST
56282: LIST
56283: LIST
56284: LIST
56285: LIST
56286: PUSH
56287: LD_VAR 0 4
56291: PUSH
56292: LD_INT 1
56294: PLUS
56295: ARRAY
56296: ST_TO_ADDR
56297: GO 56782
56299: LD_INT 16
56301: DOUBLE
56302: EQUAL
56303: IFTRUE 56361
56305: LD_INT 17
56307: DOUBLE
56308: EQUAL
56309: IFTRUE 56361
56311: LD_INT 18
56313: DOUBLE
56314: EQUAL
56315: IFTRUE 56361
56317: LD_INT 19
56319: DOUBLE
56320: EQUAL
56321: IFTRUE 56361
56323: LD_INT 22
56325: DOUBLE
56326: EQUAL
56327: IFTRUE 56361
56329: LD_INT 20
56331: DOUBLE
56332: EQUAL
56333: IFTRUE 56361
56335: LD_INT 21
56337: DOUBLE
56338: EQUAL
56339: IFTRUE 56361
56341: LD_INT 23
56343: DOUBLE
56344: EQUAL
56345: IFTRUE 56361
56347: LD_INT 24
56349: DOUBLE
56350: EQUAL
56351: IFTRUE 56361
56353: LD_INT 25
56355: DOUBLE
56356: EQUAL
56357: IFTRUE 56361
56359: GO 56417
56361: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
56362: LD_ADDR_VAR 0 9
56366: PUSH
56367: LD_VAR 0 35
56371: PUSH
56372: LD_VAR 0 36
56376: PUSH
56377: LD_VAR 0 37
56381: PUSH
56382: LD_VAR 0 38
56386: PUSH
56387: LD_VAR 0 39
56391: PUSH
56392: LD_VAR 0 40
56396: PUSH
56397: EMPTY
56398: LIST
56399: LIST
56400: LIST
56401: LIST
56402: LIST
56403: LIST
56404: PUSH
56405: LD_VAR 0 4
56409: PUSH
56410: LD_INT 1
56412: PLUS
56413: ARRAY
56414: ST_TO_ADDR
56415: GO 56782
56417: LD_INT 6
56419: DOUBLE
56420: EQUAL
56421: IFTRUE 56473
56423: LD_INT 7
56425: DOUBLE
56426: EQUAL
56427: IFTRUE 56473
56429: LD_INT 8
56431: DOUBLE
56432: EQUAL
56433: IFTRUE 56473
56435: LD_INT 13
56437: DOUBLE
56438: EQUAL
56439: IFTRUE 56473
56441: LD_INT 12
56443: DOUBLE
56444: EQUAL
56445: IFTRUE 56473
56447: LD_INT 15
56449: DOUBLE
56450: EQUAL
56451: IFTRUE 56473
56453: LD_INT 11
56455: DOUBLE
56456: EQUAL
56457: IFTRUE 56473
56459: LD_INT 14
56461: DOUBLE
56462: EQUAL
56463: IFTRUE 56473
56465: LD_INT 10
56467: DOUBLE
56468: EQUAL
56469: IFTRUE 56473
56471: GO 56529
56473: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
56474: LD_ADDR_VAR 0 9
56478: PUSH
56479: LD_VAR 0 41
56483: PUSH
56484: LD_VAR 0 42
56488: PUSH
56489: LD_VAR 0 43
56493: PUSH
56494: LD_VAR 0 44
56498: PUSH
56499: LD_VAR 0 45
56503: PUSH
56504: LD_VAR 0 46
56508: PUSH
56509: EMPTY
56510: LIST
56511: LIST
56512: LIST
56513: LIST
56514: LIST
56515: LIST
56516: PUSH
56517: LD_VAR 0 4
56521: PUSH
56522: LD_INT 1
56524: PLUS
56525: ARRAY
56526: ST_TO_ADDR
56527: GO 56782
56529: LD_INT 36
56531: DOUBLE
56532: EQUAL
56533: IFTRUE 56537
56535: GO 56593
56537: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
56538: LD_ADDR_VAR 0 9
56542: PUSH
56543: LD_VAR 0 47
56547: PUSH
56548: LD_VAR 0 48
56552: PUSH
56553: LD_VAR 0 49
56557: PUSH
56558: LD_VAR 0 50
56562: PUSH
56563: LD_VAR 0 51
56567: PUSH
56568: LD_VAR 0 52
56572: PUSH
56573: EMPTY
56574: LIST
56575: LIST
56576: LIST
56577: LIST
56578: LIST
56579: LIST
56580: PUSH
56581: LD_VAR 0 4
56585: PUSH
56586: LD_INT 1
56588: PLUS
56589: ARRAY
56590: ST_TO_ADDR
56591: GO 56782
56593: LD_INT 4
56595: DOUBLE
56596: EQUAL
56597: IFTRUE 56619
56599: LD_INT 5
56601: DOUBLE
56602: EQUAL
56603: IFTRUE 56619
56605: LD_INT 34
56607: DOUBLE
56608: EQUAL
56609: IFTRUE 56619
56611: LD_INT 37
56613: DOUBLE
56614: EQUAL
56615: IFTRUE 56619
56617: GO 56675
56619: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
56620: LD_ADDR_VAR 0 9
56624: PUSH
56625: LD_VAR 0 53
56629: PUSH
56630: LD_VAR 0 54
56634: PUSH
56635: LD_VAR 0 55
56639: PUSH
56640: LD_VAR 0 56
56644: PUSH
56645: LD_VAR 0 57
56649: PUSH
56650: LD_VAR 0 58
56654: PUSH
56655: EMPTY
56656: LIST
56657: LIST
56658: LIST
56659: LIST
56660: LIST
56661: LIST
56662: PUSH
56663: LD_VAR 0 4
56667: PUSH
56668: LD_INT 1
56670: PLUS
56671: ARRAY
56672: ST_TO_ADDR
56673: GO 56782
56675: LD_INT 31
56677: DOUBLE
56678: EQUAL
56679: IFTRUE 56725
56681: LD_INT 32
56683: DOUBLE
56684: EQUAL
56685: IFTRUE 56725
56687: LD_INT 33
56689: DOUBLE
56690: EQUAL
56691: IFTRUE 56725
56693: LD_INT 27
56695: DOUBLE
56696: EQUAL
56697: IFTRUE 56725
56699: LD_INT 26
56701: DOUBLE
56702: EQUAL
56703: IFTRUE 56725
56705: LD_INT 28
56707: DOUBLE
56708: EQUAL
56709: IFTRUE 56725
56711: LD_INT 29
56713: DOUBLE
56714: EQUAL
56715: IFTRUE 56725
56717: LD_INT 30
56719: DOUBLE
56720: EQUAL
56721: IFTRUE 56725
56723: GO 56781
56725: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
56726: LD_ADDR_VAR 0 9
56730: PUSH
56731: LD_VAR 0 59
56735: PUSH
56736: LD_VAR 0 60
56740: PUSH
56741: LD_VAR 0 61
56745: PUSH
56746: LD_VAR 0 62
56750: PUSH
56751: LD_VAR 0 63
56755: PUSH
56756: LD_VAR 0 64
56760: PUSH
56761: EMPTY
56762: LIST
56763: LIST
56764: LIST
56765: LIST
56766: LIST
56767: LIST
56768: PUSH
56769: LD_VAR 0 4
56773: PUSH
56774: LD_INT 1
56776: PLUS
56777: ARRAY
56778: ST_TO_ADDR
56779: GO 56782
56781: POP
// temp_list2 = [ ] ;
56782: LD_ADDR_VAR 0 10
56786: PUSH
56787: EMPTY
56788: ST_TO_ADDR
// for i in temp_list do
56789: LD_ADDR_VAR 0 8
56793: PUSH
56794: LD_VAR 0 9
56798: PUSH
56799: FOR_IN
56800: IFFALSE 56852
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
56802: LD_ADDR_VAR 0 10
56806: PUSH
56807: LD_VAR 0 10
56811: PUSH
56812: LD_VAR 0 8
56816: PUSH
56817: LD_INT 1
56819: ARRAY
56820: PUSH
56821: LD_VAR 0 2
56825: PLUS
56826: PUSH
56827: LD_VAR 0 8
56831: PUSH
56832: LD_INT 2
56834: ARRAY
56835: PUSH
56836: LD_VAR 0 3
56840: PLUS
56841: PUSH
56842: EMPTY
56843: LIST
56844: LIST
56845: PUSH
56846: EMPTY
56847: LIST
56848: ADD
56849: ST_TO_ADDR
56850: GO 56799
56852: POP
56853: POP
// result = temp_list2 ;
56854: LD_ADDR_VAR 0 7
56858: PUSH
56859: LD_VAR 0 10
56863: ST_TO_ADDR
// end ;
56864: LD_VAR 0 7
56868: RET
// export function EnemyInRange ( unit , dist ) ; begin
56869: LD_INT 0
56871: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
56872: LD_ADDR_VAR 0 3
56876: PUSH
56877: LD_VAR 0 1
56881: PPUSH
56882: CALL_OW 255
56886: PPUSH
56887: LD_VAR 0 1
56891: PPUSH
56892: CALL_OW 250
56896: PPUSH
56897: LD_VAR 0 1
56901: PPUSH
56902: CALL_OW 251
56906: PPUSH
56907: LD_VAR 0 2
56911: PPUSH
56912: CALL 30973 0 4
56916: PUSH
56917: LD_INT 4
56919: ARRAY
56920: ST_TO_ADDR
// end ;
56921: LD_VAR 0 3
56925: RET
// export function PlayerSeeMe ( unit ) ; begin
56926: LD_INT 0
56928: PPUSH
// result := See ( your_side , unit ) ;
56929: LD_ADDR_VAR 0 2
56933: PUSH
56934: LD_OWVAR 2
56938: PPUSH
56939: LD_VAR 0 1
56943: PPUSH
56944: CALL_OW 292
56948: ST_TO_ADDR
// end ;
56949: LD_VAR 0 2
56953: RET
// export function ReverseDir ( unit ) ; begin
56954: LD_INT 0
56956: PPUSH
// if not unit then
56957: LD_VAR 0 1
56961: NOT
56962: IFFALSE 56966
// exit ;
56964: GO 56989
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
56966: LD_ADDR_VAR 0 2
56970: PUSH
56971: LD_VAR 0 1
56975: PPUSH
56976: CALL_OW 254
56980: PUSH
56981: LD_INT 3
56983: PLUS
56984: PUSH
56985: LD_INT 6
56987: MOD
56988: ST_TO_ADDR
// end ;
56989: LD_VAR 0 2
56993: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
56994: LD_INT 0
56996: PPUSH
56997: PPUSH
56998: PPUSH
56999: PPUSH
57000: PPUSH
// if not hexes then
57001: LD_VAR 0 2
57005: NOT
57006: IFFALSE 57010
// exit ;
57008: GO 57158
// dist := 9999 ;
57010: LD_ADDR_VAR 0 5
57014: PUSH
57015: LD_INT 9999
57017: ST_TO_ADDR
// for i = 1 to hexes do
57018: LD_ADDR_VAR 0 4
57022: PUSH
57023: DOUBLE
57024: LD_INT 1
57026: DEC
57027: ST_TO_ADDR
57028: LD_VAR 0 2
57032: PUSH
57033: FOR_TO
57034: IFFALSE 57146
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
57036: LD_VAR 0 1
57040: PPUSH
57041: LD_VAR 0 2
57045: PUSH
57046: LD_VAR 0 4
57050: ARRAY
57051: PUSH
57052: LD_INT 1
57054: ARRAY
57055: PPUSH
57056: LD_VAR 0 2
57060: PUSH
57061: LD_VAR 0 4
57065: ARRAY
57066: PUSH
57067: LD_INT 2
57069: ARRAY
57070: PPUSH
57071: CALL_OW 297
57075: PUSH
57076: LD_VAR 0 5
57080: LESS
57081: IFFALSE 57144
// begin hex := hexes [ i ] ;
57083: LD_ADDR_VAR 0 7
57087: PUSH
57088: LD_VAR 0 2
57092: PUSH
57093: LD_VAR 0 4
57097: ARRAY
57098: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
57099: LD_ADDR_VAR 0 5
57103: PUSH
57104: LD_VAR 0 1
57108: PPUSH
57109: LD_VAR 0 2
57113: PUSH
57114: LD_VAR 0 4
57118: ARRAY
57119: PUSH
57120: LD_INT 1
57122: ARRAY
57123: PPUSH
57124: LD_VAR 0 2
57128: PUSH
57129: LD_VAR 0 4
57133: ARRAY
57134: PUSH
57135: LD_INT 2
57137: ARRAY
57138: PPUSH
57139: CALL_OW 297
57143: ST_TO_ADDR
// end ; end ;
57144: GO 57033
57146: POP
57147: POP
// result := hex ;
57148: LD_ADDR_VAR 0 3
57152: PUSH
57153: LD_VAR 0 7
57157: ST_TO_ADDR
// end ;
57158: LD_VAR 0 3
57162: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
57163: LD_INT 0
57165: PPUSH
57166: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
57167: LD_VAR 0 1
57171: NOT
57172: PUSH
57173: LD_VAR 0 1
57177: PUSH
57178: LD_INT 21
57180: PUSH
57181: LD_INT 2
57183: PUSH
57184: EMPTY
57185: LIST
57186: LIST
57187: PUSH
57188: LD_INT 23
57190: PUSH
57191: LD_INT 2
57193: PUSH
57194: EMPTY
57195: LIST
57196: LIST
57197: PUSH
57198: EMPTY
57199: LIST
57200: LIST
57201: PPUSH
57202: CALL_OW 69
57206: IN
57207: NOT
57208: OR
57209: IFFALSE 57213
// exit ;
57211: GO 57260
// for i = 1 to 3 do
57213: LD_ADDR_VAR 0 3
57217: PUSH
57218: DOUBLE
57219: LD_INT 1
57221: DEC
57222: ST_TO_ADDR
57223: LD_INT 3
57225: PUSH
57226: FOR_TO
57227: IFFALSE 57258
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
57229: LD_VAR 0 1
57233: PPUSH
57234: CALL_OW 250
57238: PPUSH
57239: LD_VAR 0 1
57243: PPUSH
57244: CALL_OW 251
57248: PPUSH
57249: LD_INT 1
57251: PPUSH
57252: CALL_OW 453
57256: GO 57226
57258: POP
57259: POP
// end ;
57260: LD_VAR 0 2
57264: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
57265: LD_INT 0
57267: PPUSH
57268: PPUSH
57269: PPUSH
57270: PPUSH
57271: PPUSH
57272: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
57273: LD_VAR 0 1
57277: NOT
57278: PUSH
57279: LD_VAR 0 2
57283: NOT
57284: OR
57285: PUSH
57286: LD_VAR 0 1
57290: PPUSH
57291: CALL_OW 314
57295: OR
57296: IFFALSE 57300
// exit ;
57298: GO 57741
// x := GetX ( enemy_unit ) ;
57300: LD_ADDR_VAR 0 7
57304: PUSH
57305: LD_VAR 0 2
57309: PPUSH
57310: CALL_OW 250
57314: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
57315: LD_ADDR_VAR 0 8
57319: PUSH
57320: LD_VAR 0 2
57324: PPUSH
57325: CALL_OW 251
57329: ST_TO_ADDR
// if not x or not y then
57330: LD_VAR 0 7
57334: NOT
57335: PUSH
57336: LD_VAR 0 8
57340: NOT
57341: OR
57342: IFFALSE 57346
// exit ;
57344: GO 57741
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
57346: LD_ADDR_VAR 0 6
57350: PUSH
57351: LD_VAR 0 7
57355: PPUSH
57356: LD_INT 0
57358: PPUSH
57359: LD_INT 4
57361: PPUSH
57362: CALL_OW 272
57366: PUSH
57367: LD_VAR 0 8
57371: PPUSH
57372: LD_INT 0
57374: PPUSH
57375: LD_INT 4
57377: PPUSH
57378: CALL_OW 273
57382: PUSH
57383: EMPTY
57384: LIST
57385: LIST
57386: PUSH
57387: LD_VAR 0 7
57391: PPUSH
57392: LD_INT 1
57394: PPUSH
57395: LD_INT 4
57397: PPUSH
57398: CALL_OW 272
57402: PUSH
57403: LD_VAR 0 8
57407: PPUSH
57408: LD_INT 1
57410: PPUSH
57411: LD_INT 4
57413: PPUSH
57414: CALL_OW 273
57418: PUSH
57419: EMPTY
57420: LIST
57421: LIST
57422: PUSH
57423: LD_VAR 0 7
57427: PPUSH
57428: LD_INT 2
57430: PPUSH
57431: LD_INT 4
57433: PPUSH
57434: CALL_OW 272
57438: PUSH
57439: LD_VAR 0 8
57443: PPUSH
57444: LD_INT 2
57446: PPUSH
57447: LD_INT 4
57449: PPUSH
57450: CALL_OW 273
57454: PUSH
57455: EMPTY
57456: LIST
57457: LIST
57458: PUSH
57459: LD_VAR 0 7
57463: PPUSH
57464: LD_INT 3
57466: PPUSH
57467: LD_INT 4
57469: PPUSH
57470: CALL_OW 272
57474: PUSH
57475: LD_VAR 0 8
57479: PPUSH
57480: LD_INT 3
57482: PPUSH
57483: LD_INT 4
57485: PPUSH
57486: CALL_OW 273
57490: PUSH
57491: EMPTY
57492: LIST
57493: LIST
57494: PUSH
57495: LD_VAR 0 7
57499: PPUSH
57500: LD_INT 4
57502: PPUSH
57503: LD_INT 4
57505: PPUSH
57506: CALL_OW 272
57510: PUSH
57511: LD_VAR 0 8
57515: PPUSH
57516: LD_INT 4
57518: PPUSH
57519: LD_INT 4
57521: PPUSH
57522: CALL_OW 273
57526: PUSH
57527: EMPTY
57528: LIST
57529: LIST
57530: PUSH
57531: LD_VAR 0 7
57535: PPUSH
57536: LD_INT 5
57538: PPUSH
57539: LD_INT 4
57541: PPUSH
57542: CALL_OW 272
57546: PUSH
57547: LD_VAR 0 8
57551: PPUSH
57552: LD_INT 5
57554: PPUSH
57555: LD_INT 4
57557: PPUSH
57558: CALL_OW 273
57562: PUSH
57563: EMPTY
57564: LIST
57565: LIST
57566: PUSH
57567: EMPTY
57568: LIST
57569: LIST
57570: LIST
57571: LIST
57572: LIST
57573: LIST
57574: ST_TO_ADDR
// for i = tmp downto 1 do
57575: LD_ADDR_VAR 0 4
57579: PUSH
57580: DOUBLE
57581: LD_VAR 0 6
57585: INC
57586: ST_TO_ADDR
57587: LD_INT 1
57589: PUSH
57590: FOR_DOWNTO
57591: IFFALSE 57692
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
57593: LD_VAR 0 6
57597: PUSH
57598: LD_VAR 0 4
57602: ARRAY
57603: PUSH
57604: LD_INT 1
57606: ARRAY
57607: PPUSH
57608: LD_VAR 0 6
57612: PUSH
57613: LD_VAR 0 4
57617: ARRAY
57618: PUSH
57619: LD_INT 2
57621: ARRAY
57622: PPUSH
57623: CALL_OW 488
57627: NOT
57628: PUSH
57629: LD_VAR 0 6
57633: PUSH
57634: LD_VAR 0 4
57638: ARRAY
57639: PUSH
57640: LD_INT 1
57642: ARRAY
57643: PPUSH
57644: LD_VAR 0 6
57648: PUSH
57649: LD_VAR 0 4
57653: ARRAY
57654: PUSH
57655: LD_INT 2
57657: ARRAY
57658: PPUSH
57659: CALL_OW 428
57663: PUSH
57664: LD_INT 0
57666: NONEQUAL
57667: OR
57668: IFFALSE 57690
// tmp := Delete ( tmp , i ) ;
57670: LD_ADDR_VAR 0 6
57674: PUSH
57675: LD_VAR 0 6
57679: PPUSH
57680: LD_VAR 0 4
57684: PPUSH
57685: CALL_OW 3
57689: ST_TO_ADDR
57690: GO 57590
57692: POP
57693: POP
// j := GetClosestHex ( unit , tmp ) ;
57694: LD_ADDR_VAR 0 5
57698: PUSH
57699: LD_VAR 0 1
57703: PPUSH
57704: LD_VAR 0 6
57708: PPUSH
57709: CALL 56994 0 2
57713: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
57714: LD_VAR 0 1
57718: PPUSH
57719: LD_VAR 0 5
57723: PUSH
57724: LD_INT 1
57726: ARRAY
57727: PPUSH
57728: LD_VAR 0 5
57732: PUSH
57733: LD_INT 2
57735: ARRAY
57736: PPUSH
57737: CALL_OW 111
// end ;
57741: LD_VAR 0 3
57745: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
57746: LD_INT 0
57748: PPUSH
57749: PPUSH
57750: PPUSH
// uc_side = 0 ;
57751: LD_ADDR_OWVAR 20
57755: PUSH
57756: LD_INT 0
57758: ST_TO_ADDR
// uc_nation = 0 ;
57759: LD_ADDR_OWVAR 21
57763: PUSH
57764: LD_INT 0
57766: ST_TO_ADDR
// InitHc_All ( ) ;
57767: CALL_OW 584
// InitVc ;
57771: CALL_OW 20
// if mastodonts then
57775: LD_VAR 0 6
57779: IFFALSE 57846
// for i = 1 to mastodonts do
57781: LD_ADDR_VAR 0 11
57785: PUSH
57786: DOUBLE
57787: LD_INT 1
57789: DEC
57790: ST_TO_ADDR
57791: LD_VAR 0 6
57795: PUSH
57796: FOR_TO
57797: IFFALSE 57844
// begin vc_chassis := 31 ;
57799: LD_ADDR_OWVAR 37
57803: PUSH
57804: LD_INT 31
57806: ST_TO_ADDR
// vc_control := control_rider ;
57807: LD_ADDR_OWVAR 38
57811: PUSH
57812: LD_INT 4
57814: ST_TO_ADDR
// animal := CreateVehicle ;
57815: LD_ADDR_VAR 0 12
57819: PUSH
57820: CALL_OW 45
57824: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57825: LD_VAR 0 12
57829: PPUSH
57830: LD_VAR 0 8
57834: PPUSH
57835: LD_INT 0
57837: PPUSH
57838: CALL 60034 0 3
// end ;
57842: GO 57796
57844: POP
57845: POP
// if horses then
57846: LD_VAR 0 5
57850: IFFALSE 57917
// for i = 1 to horses do
57852: LD_ADDR_VAR 0 11
57856: PUSH
57857: DOUBLE
57858: LD_INT 1
57860: DEC
57861: ST_TO_ADDR
57862: LD_VAR 0 5
57866: PUSH
57867: FOR_TO
57868: IFFALSE 57915
// begin hc_class := 21 ;
57870: LD_ADDR_OWVAR 28
57874: PUSH
57875: LD_INT 21
57877: ST_TO_ADDR
// hc_gallery :=  ;
57878: LD_ADDR_OWVAR 33
57882: PUSH
57883: LD_STRING 
57885: ST_TO_ADDR
// animal := CreateHuman ;
57886: LD_ADDR_VAR 0 12
57890: PUSH
57891: CALL_OW 44
57895: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57896: LD_VAR 0 12
57900: PPUSH
57901: LD_VAR 0 8
57905: PPUSH
57906: LD_INT 0
57908: PPUSH
57909: CALL 60034 0 3
// end ;
57913: GO 57867
57915: POP
57916: POP
// if birds then
57917: LD_VAR 0 1
57921: IFFALSE 57988
// for i = 1 to birds do
57923: LD_ADDR_VAR 0 11
57927: PUSH
57928: DOUBLE
57929: LD_INT 1
57931: DEC
57932: ST_TO_ADDR
57933: LD_VAR 0 1
57937: PUSH
57938: FOR_TO
57939: IFFALSE 57986
// begin hc_class = 18 ;
57941: LD_ADDR_OWVAR 28
57945: PUSH
57946: LD_INT 18
57948: ST_TO_ADDR
// hc_gallery =  ;
57949: LD_ADDR_OWVAR 33
57953: PUSH
57954: LD_STRING 
57956: ST_TO_ADDR
// animal := CreateHuman ;
57957: LD_ADDR_VAR 0 12
57961: PUSH
57962: CALL_OW 44
57966: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57967: LD_VAR 0 12
57971: PPUSH
57972: LD_VAR 0 8
57976: PPUSH
57977: LD_INT 0
57979: PPUSH
57980: CALL 60034 0 3
// end ;
57984: GO 57938
57986: POP
57987: POP
// if tigers then
57988: LD_VAR 0 2
57992: IFFALSE 58076
// for i = 1 to tigers do
57994: LD_ADDR_VAR 0 11
57998: PUSH
57999: DOUBLE
58000: LD_INT 1
58002: DEC
58003: ST_TO_ADDR
58004: LD_VAR 0 2
58008: PUSH
58009: FOR_TO
58010: IFFALSE 58074
// begin hc_class = class_tiger ;
58012: LD_ADDR_OWVAR 28
58016: PUSH
58017: LD_INT 14
58019: ST_TO_ADDR
// hc_gallery =  ;
58020: LD_ADDR_OWVAR 33
58024: PUSH
58025: LD_STRING 
58027: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
58028: LD_ADDR_OWVAR 35
58032: PUSH
58033: LD_INT 7
58035: NEG
58036: PPUSH
58037: LD_INT 7
58039: PPUSH
58040: CALL_OW 12
58044: ST_TO_ADDR
// animal := CreateHuman ;
58045: LD_ADDR_VAR 0 12
58049: PUSH
58050: CALL_OW 44
58054: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58055: LD_VAR 0 12
58059: PPUSH
58060: LD_VAR 0 8
58064: PPUSH
58065: LD_INT 0
58067: PPUSH
58068: CALL 60034 0 3
// end ;
58072: GO 58009
58074: POP
58075: POP
// if apemans then
58076: LD_VAR 0 3
58080: IFFALSE 58203
// for i = 1 to apemans do
58082: LD_ADDR_VAR 0 11
58086: PUSH
58087: DOUBLE
58088: LD_INT 1
58090: DEC
58091: ST_TO_ADDR
58092: LD_VAR 0 3
58096: PUSH
58097: FOR_TO
58098: IFFALSE 58201
// begin hc_class = class_apeman ;
58100: LD_ADDR_OWVAR 28
58104: PUSH
58105: LD_INT 12
58107: ST_TO_ADDR
// hc_gallery =  ;
58108: LD_ADDR_OWVAR 33
58112: PUSH
58113: LD_STRING 
58115: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
58116: LD_ADDR_OWVAR 35
58120: PUSH
58121: LD_INT 5
58123: NEG
58124: PPUSH
58125: LD_INT 5
58127: PPUSH
58128: CALL_OW 12
58132: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
58133: LD_ADDR_OWVAR 31
58137: PUSH
58138: LD_INT 1
58140: PPUSH
58141: LD_INT 3
58143: PPUSH
58144: CALL_OW 12
58148: PUSH
58149: LD_INT 1
58151: PPUSH
58152: LD_INT 3
58154: PPUSH
58155: CALL_OW 12
58159: PUSH
58160: LD_INT 0
58162: PUSH
58163: LD_INT 0
58165: PUSH
58166: EMPTY
58167: LIST
58168: LIST
58169: LIST
58170: LIST
58171: ST_TO_ADDR
// animal := CreateHuman ;
58172: LD_ADDR_VAR 0 12
58176: PUSH
58177: CALL_OW 44
58181: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58182: LD_VAR 0 12
58186: PPUSH
58187: LD_VAR 0 8
58191: PPUSH
58192: LD_INT 0
58194: PPUSH
58195: CALL 60034 0 3
// end ;
58199: GO 58097
58201: POP
58202: POP
// if enchidnas then
58203: LD_VAR 0 4
58207: IFFALSE 58274
// for i = 1 to enchidnas do
58209: LD_ADDR_VAR 0 11
58213: PUSH
58214: DOUBLE
58215: LD_INT 1
58217: DEC
58218: ST_TO_ADDR
58219: LD_VAR 0 4
58223: PUSH
58224: FOR_TO
58225: IFFALSE 58272
// begin hc_class = 13 ;
58227: LD_ADDR_OWVAR 28
58231: PUSH
58232: LD_INT 13
58234: ST_TO_ADDR
// hc_gallery =  ;
58235: LD_ADDR_OWVAR 33
58239: PUSH
58240: LD_STRING 
58242: ST_TO_ADDR
// animal := CreateHuman ;
58243: LD_ADDR_VAR 0 12
58247: PUSH
58248: CALL_OW 44
58252: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58253: LD_VAR 0 12
58257: PPUSH
58258: LD_VAR 0 8
58262: PPUSH
58263: LD_INT 0
58265: PPUSH
58266: CALL 60034 0 3
// end ;
58270: GO 58224
58272: POP
58273: POP
// if fishes then
58274: LD_VAR 0 7
58278: IFFALSE 58345
// for i = 1 to fishes do
58280: LD_ADDR_VAR 0 11
58284: PUSH
58285: DOUBLE
58286: LD_INT 1
58288: DEC
58289: ST_TO_ADDR
58290: LD_VAR 0 7
58294: PUSH
58295: FOR_TO
58296: IFFALSE 58343
// begin hc_class = 20 ;
58298: LD_ADDR_OWVAR 28
58302: PUSH
58303: LD_INT 20
58305: ST_TO_ADDR
// hc_gallery =  ;
58306: LD_ADDR_OWVAR 33
58310: PUSH
58311: LD_STRING 
58313: ST_TO_ADDR
// animal := CreateHuman ;
58314: LD_ADDR_VAR 0 12
58318: PUSH
58319: CALL_OW 44
58323: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
58324: LD_VAR 0 12
58328: PPUSH
58329: LD_VAR 0 9
58333: PPUSH
58334: LD_INT 0
58336: PPUSH
58337: CALL 60034 0 3
// end ;
58341: GO 58295
58343: POP
58344: POP
// end ;
58345: LD_VAR 0 10
58349: RET
// export function WantHeal ( sci , unit ) ; begin
58350: LD_INT 0
58352: PPUSH
// if GetTaskList ( sci ) > 0 then
58353: LD_VAR 0 1
58357: PPUSH
58358: CALL_OW 437
58362: PUSH
58363: LD_INT 0
58365: GREATER
58366: IFFALSE 58436
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
58368: LD_VAR 0 1
58372: PPUSH
58373: CALL_OW 437
58377: PUSH
58378: LD_INT 1
58380: ARRAY
58381: PUSH
58382: LD_INT 1
58384: ARRAY
58385: PUSH
58386: LD_STRING l
58388: EQUAL
58389: PUSH
58390: LD_VAR 0 1
58394: PPUSH
58395: CALL_OW 437
58399: PUSH
58400: LD_INT 1
58402: ARRAY
58403: PUSH
58404: LD_INT 4
58406: ARRAY
58407: PUSH
58408: LD_VAR 0 2
58412: EQUAL
58413: AND
58414: IFFALSE 58426
// result := true else
58416: LD_ADDR_VAR 0 3
58420: PUSH
58421: LD_INT 1
58423: ST_TO_ADDR
58424: GO 58434
// result := false ;
58426: LD_ADDR_VAR 0 3
58430: PUSH
58431: LD_INT 0
58433: ST_TO_ADDR
// end else
58434: GO 58444
// result := false ;
58436: LD_ADDR_VAR 0 3
58440: PUSH
58441: LD_INT 0
58443: ST_TO_ADDR
// end ;
58444: LD_VAR 0 3
58448: RET
// export function HealTarget ( sci ) ; begin
58449: LD_INT 0
58451: PPUSH
// if not sci then
58452: LD_VAR 0 1
58456: NOT
58457: IFFALSE 58461
// exit ;
58459: GO 58526
// result := 0 ;
58461: LD_ADDR_VAR 0 2
58465: PUSH
58466: LD_INT 0
58468: ST_TO_ADDR
// if GetTaskList ( sci ) then
58469: LD_VAR 0 1
58473: PPUSH
58474: CALL_OW 437
58478: IFFALSE 58526
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
58480: LD_VAR 0 1
58484: PPUSH
58485: CALL_OW 437
58489: PUSH
58490: LD_INT 1
58492: ARRAY
58493: PUSH
58494: LD_INT 1
58496: ARRAY
58497: PUSH
58498: LD_STRING l
58500: EQUAL
58501: IFFALSE 58526
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
58503: LD_ADDR_VAR 0 2
58507: PUSH
58508: LD_VAR 0 1
58512: PPUSH
58513: CALL_OW 437
58517: PUSH
58518: LD_INT 1
58520: ARRAY
58521: PUSH
58522: LD_INT 4
58524: ARRAY
58525: ST_TO_ADDR
// end ;
58526: LD_VAR 0 2
58530: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
58531: LD_INT 0
58533: PPUSH
58534: PPUSH
58535: PPUSH
58536: PPUSH
// if not base_units then
58537: LD_VAR 0 1
58541: NOT
58542: IFFALSE 58546
// exit ;
58544: GO 58633
// result := false ;
58546: LD_ADDR_VAR 0 2
58550: PUSH
58551: LD_INT 0
58553: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
58554: LD_ADDR_VAR 0 5
58558: PUSH
58559: LD_VAR 0 1
58563: PPUSH
58564: LD_INT 21
58566: PUSH
58567: LD_INT 3
58569: PUSH
58570: EMPTY
58571: LIST
58572: LIST
58573: PPUSH
58574: CALL_OW 72
58578: ST_TO_ADDR
// if not tmp then
58579: LD_VAR 0 5
58583: NOT
58584: IFFALSE 58588
// exit ;
58586: GO 58633
// for i in tmp do
58588: LD_ADDR_VAR 0 3
58592: PUSH
58593: LD_VAR 0 5
58597: PUSH
58598: FOR_IN
58599: IFFALSE 58631
// begin result := EnemyInRange ( i , 22 ) ;
58601: LD_ADDR_VAR 0 2
58605: PUSH
58606: LD_VAR 0 3
58610: PPUSH
58611: LD_INT 22
58613: PPUSH
58614: CALL 56869 0 2
58618: ST_TO_ADDR
// if result then
58619: LD_VAR 0 2
58623: IFFALSE 58629
// exit ;
58625: POP
58626: POP
58627: GO 58633
// end ;
58629: GO 58598
58631: POP
58632: POP
// end ;
58633: LD_VAR 0 2
58637: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
58638: LD_INT 0
58640: PPUSH
58641: PPUSH
// if not units then
58642: LD_VAR 0 1
58646: NOT
58647: IFFALSE 58651
// exit ;
58649: GO 58721
// result := [ ] ;
58651: LD_ADDR_VAR 0 3
58655: PUSH
58656: EMPTY
58657: ST_TO_ADDR
// for i in units do
58658: LD_ADDR_VAR 0 4
58662: PUSH
58663: LD_VAR 0 1
58667: PUSH
58668: FOR_IN
58669: IFFALSE 58719
// if GetTag ( i ) = tag then
58671: LD_VAR 0 4
58675: PPUSH
58676: CALL_OW 110
58680: PUSH
58681: LD_VAR 0 2
58685: EQUAL
58686: IFFALSE 58717
// result := Insert ( result , result + 1 , i ) ;
58688: LD_ADDR_VAR 0 3
58692: PUSH
58693: LD_VAR 0 3
58697: PPUSH
58698: LD_VAR 0 3
58702: PUSH
58703: LD_INT 1
58705: PLUS
58706: PPUSH
58707: LD_VAR 0 4
58711: PPUSH
58712: CALL_OW 2
58716: ST_TO_ADDR
58717: GO 58668
58719: POP
58720: POP
// end ;
58721: LD_VAR 0 3
58725: RET
// export function IsDriver ( un ) ; begin
58726: LD_INT 0
58728: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
58729: LD_ADDR_VAR 0 2
58733: PUSH
58734: LD_VAR 0 1
58738: PUSH
58739: LD_INT 55
58741: PUSH
58742: EMPTY
58743: LIST
58744: PPUSH
58745: CALL_OW 69
58749: IN
58750: ST_TO_ADDR
// end ;
58751: LD_VAR 0 2
58755: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
58756: LD_INT 0
58758: PPUSH
58759: PPUSH
// list := [ ] ;
58760: LD_ADDR_VAR 0 5
58764: PUSH
58765: EMPTY
58766: ST_TO_ADDR
// case d of 0 :
58767: LD_VAR 0 3
58771: PUSH
58772: LD_INT 0
58774: DOUBLE
58775: EQUAL
58776: IFTRUE 58780
58778: GO 58913
58780: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
58781: LD_ADDR_VAR 0 5
58785: PUSH
58786: LD_VAR 0 1
58790: PUSH
58791: LD_INT 4
58793: MINUS
58794: PUSH
58795: LD_VAR 0 2
58799: PUSH
58800: LD_INT 4
58802: MINUS
58803: PUSH
58804: LD_INT 2
58806: PUSH
58807: EMPTY
58808: LIST
58809: LIST
58810: LIST
58811: PUSH
58812: LD_VAR 0 1
58816: PUSH
58817: LD_INT 3
58819: MINUS
58820: PUSH
58821: LD_VAR 0 2
58825: PUSH
58826: LD_INT 1
58828: PUSH
58829: EMPTY
58830: LIST
58831: LIST
58832: LIST
58833: PUSH
58834: LD_VAR 0 1
58838: PUSH
58839: LD_INT 4
58841: PLUS
58842: PUSH
58843: LD_VAR 0 2
58847: PUSH
58848: LD_INT 4
58850: PUSH
58851: EMPTY
58852: LIST
58853: LIST
58854: LIST
58855: PUSH
58856: LD_VAR 0 1
58860: PUSH
58861: LD_INT 3
58863: PLUS
58864: PUSH
58865: LD_VAR 0 2
58869: PUSH
58870: LD_INT 3
58872: PLUS
58873: PUSH
58874: LD_INT 5
58876: PUSH
58877: EMPTY
58878: LIST
58879: LIST
58880: LIST
58881: PUSH
58882: LD_VAR 0 1
58886: PUSH
58887: LD_VAR 0 2
58891: PUSH
58892: LD_INT 4
58894: PLUS
58895: PUSH
58896: LD_INT 0
58898: PUSH
58899: EMPTY
58900: LIST
58901: LIST
58902: LIST
58903: PUSH
58904: EMPTY
58905: LIST
58906: LIST
58907: LIST
58908: LIST
58909: LIST
58910: ST_TO_ADDR
// end ; 1 :
58911: GO 59611
58913: LD_INT 1
58915: DOUBLE
58916: EQUAL
58917: IFTRUE 58921
58919: GO 59054
58921: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
58922: LD_ADDR_VAR 0 5
58926: PUSH
58927: LD_VAR 0 1
58931: PUSH
58932: LD_VAR 0 2
58936: PUSH
58937: LD_INT 4
58939: MINUS
58940: PUSH
58941: LD_INT 3
58943: PUSH
58944: EMPTY
58945: LIST
58946: LIST
58947: LIST
58948: PUSH
58949: LD_VAR 0 1
58953: PUSH
58954: LD_INT 3
58956: MINUS
58957: PUSH
58958: LD_VAR 0 2
58962: PUSH
58963: LD_INT 3
58965: MINUS
58966: PUSH
58967: LD_INT 2
58969: PUSH
58970: EMPTY
58971: LIST
58972: LIST
58973: LIST
58974: PUSH
58975: LD_VAR 0 1
58979: PUSH
58980: LD_INT 4
58982: MINUS
58983: PUSH
58984: LD_VAR 0 2
58988: PUSH
58989: LD_INT 1
58991: PUSH
58992: EMPTY
58993: LIST
58994: LIST
58995: LIST
58996: PUSH
58997: LD_VAR 0 1
59001: PUSH
59002: LD_VAR 0 2
59006: PUSH
59007: LD_INT 3
59009: PLUS
59010: PUSH
59011: LD_INT 0
59013: PUSH
59014: EMPTY
59015: LIST
59016: LIST
59017: LIST
59018: PUSH
59019: LD_VAR 0 1
59023: PUSH
59024: LD_INT 4
59026: PLUS
59027: PUSH
59028: LD_VAR 0 2
59032: PUSH
59033: LD_INT 4
59035: PLUS
59036: PUSH
59037: LD_INT 5
59039: PUSH
59040: EMPTY
59041: LIST
59042: LIST
59043: LIST
59044: PUSH
59045: EMPTY
59046: LIST
59047: LIST
59048: LIST
59049: LIST
59050: LIST
59051: ST_TO_ADDR
// end ; 2 :
59052: GO 59611
59054: LD_INT 2
59056: DOUBLE
59057: EQUAL
59058: IFTRUE 59062
59060: GO 59191
59062: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
59063: LD_ADDR_VAR 0 5
59067: PUSH
59068: LD_VAR 0 1
59072: PUSH
59073: LD_VAR 0 2
59077: PUSH
59078: LD_INT 3
59080: MINUS
59081: PUSH
59082: LD_INT 3
59084: PUSH
59085: EMPTY
59086: LIST
59087: LIST
59088: LIST
59089: PUSH
59090: LD_VAR 0 1
59094: PUSH
59095: LD_INT 4
59097: PLUS
59098: PUSH
59099: LD_VAR 0 2
59103: PUSH
59104: LD_INT 4
59106: PUSH
59107: EMPTY
59108: LIST
59109: LIST
59110: LIST
59111: PUSH
59112: LD_VAR 0 1
59116: PUSH
59117: LD_VAR 0 2
59121: PUSH
59122: LD_INT 4
59124: PLUS
59125: PUSH
59126: LD_INT 0
59128: PUSH
59129: EMPTY
59130: LIST
59131: LIST
59132: LIST
59133: PUSH
59134: LD_VAR 0 1
59138: PUSH
59139: LD_INT 3
59141: MINUS
59142: PUSH
59143: LD_VAR 0 2
59147: PUSH
59148: LD_INT 1
59150: PUSH
59151: EMPTY
59152: LIST
59153: LIST
59154: LIST
59155: PUSH
59156: LD_VAR 0 1
59160: PUSH
59161: LD_INT 4
59163: MINUS
59164: PUSH
59165: LD_VAR 0 2
59169: PUSH
59170: LD_INT 4
59172: MINUS
59173: PUSH
59174: LD_INT 2
59176: PUSH
59177: EMPTY
59178: LIST
59179: LIST
59180: LIST
59181: PUSH
59182: EMPTY
59183: LIST
59184: LIST
59185: LIST
59186: LIST
59187: LIST
59188: ST_TO_ADDR
// end ; 3 :
59189: GO 59611
59191: LD_INT 3
59193: DOUBLE
59194: EQUAL
59195: IFTRUE 59199
59197: GO 59332
59199: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
59200: LD_ADDR_VAR 0 5
59204: PUSH
59205: LD_VAR 0 1
59209: PUSH
59210: LD_INT 3
59212: PLUS
59213: PUSH
59214: LD_VAR 0 2
59218: PUSH
59219: LD_INT 4
59221: PUSH
59222: EMPTY
59223: LIST
59224: LIST
59225: LIST
59226: PUSH
59227: LD_VAR 0 1
59231: PUSH
59232: LD_INT 4
59234: PLUS
59235: PUSH
59236: LD_VAR 0 2
59240: PUSH
59241: LD_INT 4
59243: PLUS
59244: PUSH
59245: LD_INT 5
59247: PUSH
59248: EMPTY
59249: LIST
59250: LIST
59251: LIST
59252: PUSH
59253: LD_VAR 0 1
59257: PUSH
59258: LD_INT 4
59260: MINUS
59261: PUSH
59262: LD_VAR 0 2
59266: PUSH
59267: LD_INT 1
59269: PUSH
59270: EMPTY
59271: LIST
59272: LIST
59273: LIST
59274: PUSH
59275: LD_VAR 0 1
59279: PUSH
59280: LD_VAR 0 2
59284: PUSH
59285: LD_INT 4
59287: MINUS
59288: PUSH
59289: LD_INT 3
59291: PUSH
59292: EMPTY
59293: LIST
59294: LIST
59295: LIST
59296: PUSH
59297: LD_VAR 0 1
59301: PUSH
59302: LD_INT 3
59304: MINUS
59305: PUSH
59306: LD_VAR 0 2
59310: PUSH
59311: LD_INT 3
59313: MINUS
59314: PUSH
59315: LD_INT 2
59317: PUSH
59318: EMPTY
59319: LIST
59320: LIST
59321: LIST
59322: PUSH
59323: EMPTY
59324: LIST
59325: LIST
59326: LIST
59327: LIST
59328: LIST
59329: ST_TO_ADDR
// end ; 4 :
59330: GO 59611
59332: LD_INT 4
59334: DOUBLE
59335: EQUAL
59336: IFTRUE 59340
59338: GO 59473
59340: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
59341: LD_ADDR_VAR 0 5
59345: PUSH
59346: LD_VAR 0 1
59350: PUSH
59351: LD_VAR 0 2
59355: PUSH
59356: LD_INT 4
59358: PLUS
59359: PUSH
59360: LD_INT 0
59362: PUSH
59363: EMPTY
59364: LIST
59365: LIST
59366: LIST
59367: PUSH
59368: LD_VAR 0 1
59372: PUSH
59373: LD_INT 3
59375: PLUS
59376: PUSH
59377: LD_VAR 0 2
59381: PUSH
59382: LD_INT 3
59384: PLUS
59385: PUSH
59386: LD_INT 5
59388: PUSH
59389: EMPTY
59390: LIST
59391: LIST
59392: LIST
59393: PUSH
59394: LD_VAR 0 1
59398: PUSH
59399: LD_INT 4
59401: PLUS
59402: PUSH
59403: LD_VAR 0 2
59407: PUSH
59408: LD_INT 4
59410: PUSH
59411: EMPTY
59412: LIST
59413: LIST
59414: LIST
59415: PUSH
59416: LD_VAR 0 1
59420: PUSH
59421: LD_VAR 0 2
59425: PUSH
59426: LD_INT 3
59428: MINUS
59429: PUSH
59430: LD_INT 3
59432: PUSH
59433: EMPTY
59434: LIST
59435: LIST
59436: LIST
59437: PUSH
59438: LD_VAR 0 1
59442: PUSH
59443: LD_INT 4
59445: MINUS
59446: PUSH
59447: LD_VAR 0 2
59451: PUSH
59452: LD_INT 4
59454: MINUS
59455: PUSH
59456: LD_INT 2
59458: PUSH
59459: EMPTY
59460: LIST
59461: LIST
59462: LIST
59463: PUSH
59464: EMPTY
59465: LIST
59466: LIST
59467: LIST
59468: LIST
59469: LIST
59470: ST_TO_ADDR
// end ; 5 :
59471: GO 59611
59473: LD_INT 5
59475: DOUBLE
59476: EQUAL
59477: IFTRUE 59481
59479: GO 59610
59481: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
59482: LD_ADDR_VAR 0 5
59486: PUSH
59487: LD_VAR 0 1
59491: PUSH
59492: LD_INT 4
59494: MINUS
59495: PUSH
59496: LD_VAR 0 2
59500: PUSH
59501: LD_INT 1
59503: PUSH
59504: EMPTY
59505: LIST
59506: LIST
59507: LIST
59508: PUSH
59509: LD_VAR 0 1
59513: PUSH
59514: LD_VAR 0 2
59518: PUSH
59519: LD_INT 4
59521: MINUS
59522: PUSH
59523: LD_INT 3
59525: PUSH
59526: EMPTY
59527: LIST
59528: LIST
59529: LIST
59530: PUSH
59531: LD_VAR 0 1
59535: PUSH
59536: LD_INT 4
59538: PLUS
59539: PUSH
59540: LD_VAR 0 2
59544: PUSH
59545: LD_INT 4
59547: PLUS
59548: PUSH
59549: LD_INT 5
59551: PUSH
59552: EMPTY
59553: LIST
59554: LIST
59555: LIST
59556: PUSH
59557: LD_VAR 0 1
59561: PUSH
59562: LD_INT 3
59564: PLUS
59565: PUSH
59566: LD_VAR 0 2
59570: PUSH
59571: LD_INT 4
59573: PUSH
59574: EMPTY
59575: LIST
59576: LIST
59577: LIST
59578: PUSH
59579: LD_VAR 0 1
59583: PUSH
59584: LD_VAR 0 2
59588: PUSH
59589: LD_INT 3
59591: PLUS
59592: PUSH
59593: LD_INT 0
59595: PUSH
59596: EMPTY
59597: LIST
59598: LIST
59599: LIST
59600: PUSH
59601: EMPTY
59602: LIST
59603: LIST
59604: LIST
59605: LIST
59606: LIST
59607: ST_TO_ADDR
// end ; end ;
59608: GO 59611
59610: POP
// result := list ;
59611: LD_ADDR_VAR 0 4
59615: PUSH
59616: LD_VAR 0 5
59620: ST_TO_ADDR
// end ;
59621: LD_VAR 0 4
59625: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
59626: LD_INT 0
59628: PPUSH
59629: PPUSH
59630: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
59631: LD_VAR 0 1
59635: NOT
59636: PUSH
59637: LD_VAR 0 2
59641: PUSH
59642: LD_INT 1
59644: PUSH
59645: LD_INT 2
59647: PUSH
59648: LD_INT 3
59650: PUSH
59651: LD_INT 4
59653: PUSH
59654: EMPTY
59655: LIST
59656: LIST
59657: LIST
59658: LIST
59659: IN
59660: NOT
59661: OR
59662: IFFALSE 59666
// exit ;
59664: GO 59758
// tmp := [ ] ;
59666: LD_ADDR_VAR 0 5
59670: PUSH
59671: EMPTY
59672: ST_TO_ADDR
// for i in units do
59673: LD_ADDR_VAR 0 4
59677: PUSH
59678: LD_VAR 0 1
59682: PUSH
59683: FOR_IN
59684: IFFALSE 59727
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
59686: LD_ADDR_VAR 0 5
59690: PUSH
59691: LD_VAR 0 5
59695: PPUSH
59696: LD_VAR 0 5
59700: PUSH
59701: LD_INT 1
59703: PLUS
59704: PPUSH
59705: LD_VAR 0 4
59709: PPUSH
59710: LD_VAR 0 2
59714: PPUSH
59715: CALL_OW 259
59719: PPUSH
59720: CALL_OW 2
59724: ST_TO_ADDR
59725: GO 59683
59727: POP
59728: POP
// if not tmp then
59729: LD_VAR 0 5
59733: NOT
59734: IFFALSE 59738
// exit ;
59736: GO 59758
// result := SortListByListDesc ( units , tmp ) ;
59738: LD_ADDR_VAR 0 3
59742: PUSH
59743: LD_VAR 0 1
59747: PPUSH
59748: LD_VAR 0 5
59752: PPUSH
59753: CALL_OW 77
59757: ST_TO_ADDR
// end ;
59758: LD_VAR 0 3
59762: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
59763: LD_INT 0
59765: PPUSH
59766: PPUSH
59767: PPUSH
// result := false ;
59768: LD_ADDR_VAR 0 3
59772: PUSH
59773: LD_INT 0
59775: ST_TO_ADDR
// x := GetX ( building ) ;
59776: LD_ADDR_VAR 0 4
59780: PUSH
59781: LD_VAR 0 2
59785: PPUSH
59786: CALL_OW 250
59790: ST_TO_ADDR
// y := GetY ( building ) ;
59791: LD_ADDR_VAR 0 5
59795: PUSH
59796: LD_VAR 0 2
59800: PPUSH
59801: CALL_OW 251
59805: ST_TO_ADDR
// if not building or not x or not y then
59806: LD_VAR 0 2
59810: NOT
59811: PUSH
59812: LD_VAR 0 4
59816: NOT
59817: OR
59818: PUSH
59819: LD_VAR 0 5
59823: NOT
59824: OR
59825: IFFALSE 59829
// exit ;
59827: GO 59921
// if GetTaskList ( unit ) then
59829: LD_VAR 0 1
59833: PPUSH
59834: CALL_OW 437
59838: IFFALSE 59921
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
59840: LD_STRING e
59842: PUSH
59843: LD_VAR 0 1
59847: PPUSH
59848: CALL_OW 437
59852: PUSH
59853: LD_INT 1
59855: ARRAY
59856: PUSH
59857: LD_INT 1
59859: ARRAY
59860: EQUAL
59861: PUSH
59862: LD_VAR 0 4
59866: PUSH
59867: LD_VAR 0 1
59871: PPUSH
59872: CALL_OW 437
59876: PUSH
59877: LD_INT 1
59879: ARRAY
59880: PUSH
59881: LD_INT 2
59883: ARRAY
59884: EQUAL
59885: AND
59886: PUSH
59887: LD_VAR 0 5
59891: PUSH
59892: LD_VAR 0 1
59896: PPUSH
59897: CALL_OW 437
59901: PUSH
59902: LD_INT 1
59904: ARRAY
59905: PUSH
59906: LD_INT 3
59908: ARRAY
59909: EQUAL
59910: AND
59911: IFFALSE 59921
// result := true end ;
59913: LD_ADDR_VAR 0 3
59917: PUSH
59918: LD_INT 1
59920: ST_TO_ADDR
// end ;
59921: LD_VAR 0 3
59925: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
59926: LD_INT 0
59928: PPUSH
// result := false ;
59929: LD_ADDR_VAR 0 4
59933: PUSH
59934: LD_INT 0
59936: ST_TO_ADDR
// if GetTaskList ( unit ) then
59937: LD_VAR 0 1
59941: PPUSH
59942: CALL_OW 437
59946: IFFALSE 60029
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
59948: LD_STRING M
59950: PUSH
59951: LD_VAR 0 1
59955: PPUSH
59956: CALL_OW 437
59960: PUSH
59961: LD_INT 1
59963: ARRAY
59964: PUSH
59965: LD_INT 1
59967: ARRAY
59968: EQUAL
59969: PUSH
59970: LD_VAR 0 2
59974: PUSH
59975: LD_VAR 0 1
59979: PPUSH
59980: CALL_OW 437
59984: PUSH
59985: LD_INT 1
59987: ARRAY
59988: PUSH
59989: LD_INT 2
59991: ARRAY
59992: EQUAL
59993: AND
59994: PUSH
59995: LD_VAR 0 3
59999: PUSH
60000: LD_VAR 0 1
60004: PPUSH
60005: CALL_OW 437
60009: PUSH
60010: LD_INT 1
60012: ARRAY
60013: PUSH
60014: LD_INT 3
60016: ARRAY
60017: EQUAL
60018: AND
60019: IFFALSE 60029
// result := true ;
60021: LD_ADDR_VAR 0 4
60025: PUSH
60026: LD_INT 1
60028: ST_TO_ADDR
// end ; end ;
60029: LD_VAR 0 4
60033: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
60034: LD_INT 0
60036: PPUSH
60037: PPUSH
60038: PPUSH
60039: PPUSH
// if not unit or not area then
60040: LD_VAR 0 1
60044: NOT
60045: PUSH
60046: LD_VAR 0 2
60050: NOT
60051: OR
60052: IFFALSE 60056
// exit ;
60054: GO 60220
// tmp := AreaToList ( area , i ) ;
60056: LD_ADDR_VAR 0 6
60060: PUSH
60061: LD_VAR 0 2
60065: PPUSH
60066: LD_VAR 0 5
60070: PPUSH
60071: CALL_OW 517
60075: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
60076: LD_ADDR_VAR 0 5
60080: PUSH
60081: DOUBLE
60082: LD_INT 1
60084: DEC
60085: ST_TO_ADDR
60086: LD_VAR 0 6
60090: PUSH
60091: LD_INT 1
60093: ARRAY
60094: PUSH
60095: FOR_TO
60096: IFFALSE 60218
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
60098: LD_ADDR_VAR 0 7
60102: PUSH
60103: LD_VAR 0 6
60107: PUSH
60108: LD_INT 1
60110: ARRAY
60111: PUSH
60112: LD_VAR 0 5
60116: ARRAY
60117: PUSH
60118: LD_VAR 0 6
60122: PUSH
60123: LD_INT 2
60125: ARRAY
60126: PUSH
60127: LD_VAR 0 5
60131: ARRAY
60132: PUSH
60133: EMPTY
60134: LIST
60135: LIST
60136: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
60137: LD_VAR 0 7
60141: PUSH
60142: LD_INT 1
60144: ARRAY
60145: PPUSH
60146: LD_VAR 0 7
60150: PUSH
60151: LD_INT 2
60153: ARRAY
60154: PPUSH
60155: CALL_OW 428
60159: PUSH
60160: LD_INT 0
60162: EQUAL
60163: IFFALSE 60216
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
60165: LD_VAR 0 1
60169: PPUSH
60170: LD_VAR 0 7
60174: PUSH
60175: LD_INT 1
60177: ARRAY
60178: PPUSH
60179: LD_VAR 0 7
60183: PUSH
60184: LD_INT 2
60186: ARRAY
60187: PPUSH
60188: LD_VAR 0 3
60192: PPUSH
60193: CALL_OW 48
// result := IsPlaced ( unit ) ;
60197: LD_ADDR_VAR 0 4
60201: PUSH
60202: LD_VAR 0 1
60206: PPUSH
60207: CALL_OW 305
60211: ST_TO_ADDR
// exit ;
60212: POP
60213: POP
60214: GO 60220
// end ; end ;
60216: GO 60095
60218: POP
60219: POP
// end ;
60220: LD_VAR 0 4
60224: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
60225: LD_INT 0
60227: PPUSH
60228: PPUSH
60229: PPUSH
// if not side or side > 8 then
60230: LD_VAR 0 1
60234: NOT
60235: PUSH
60236: LD_VAR 0 1
60240: PUSH
60241: LD_INT 8
60243: GREATER
60244: OR
60245: IFFALSE 60249
// exit ;
60247: GO 60436
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
60249: LD_ADDR_VAR 0 4
60253: PUSH
60254: LD_INT 22
60256: PUSH
60257: LD_VAR 0 1
60261: PUSH
60262: EMPTY
60263: LIST
60264: LIST
60265: PUSH
60266: LD_INT 21
60268: PUSH
60269: LD_INT 3
60271: PUSH
60272: EMPTY
60273: LIST
60274: LIST
60275: PUSH
60276: EMPTY
60277: LIST
60278: LIST
60279: PPUSH
60280: CALL_OW 69
60284: ST_TO_ADDR
// if not tmp then
60285: LD_VAR 0 4
60289: NOT
60290: IFFALSE 60294
// exit ;
60292: GO 60436
// enable_addtolog := true ;
60294: LD_ADDR_OWVAR 81
60298: PUSH
60299: LD_INT 1
60301: ST_TO_ADDR
// AddToLog ( [ ) ;
60302: LD_STRING [
60304: PPUSH
60305: CALL_OW 561
// for i in tmp do
60309: LD_ADDR_VAR 0 3
60313: PUSH
60314: LD_VAR 0 4
60318: PUSH
60319: FOR_IN
60320: IFFALSE 60427
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
60322: LD_STRING [
60324: PUSH
60325: LD_VAR 0 3
60329: PPUSH
60330: CALL_OW 266
60334: STR
60335: PUSH
60336: LD_STRING , 
60338: STR
60339: PUSH
60340: LD_VAR 0 3
60344: PPUSH
60345: CALL_OW 250
60349: STR
60350: PUSH
60351: LD_STRING , 
60353: STR
60354: PUSH
60355: LD_VAR 0 3
60359: PPUSH
60360: CALL_OW 251
60364: STR
60365: PUSH
60366: LD_STRING , 
60368: STR
60369: PUSH
60370: LD_VAR 0 3
60374: PPUSH
60375: CALL_OW 254
60379: STR
60380: PUSH
60381: LD_STRING , 
60383: STR
60384: PUSH
60385: LD_VAR 0 3
60389: PPUSH
60390: LD_INT 1
60392: PPUSH
60393: CALL_OW 268
60397: STR
60398: PUSH
60399: LD_STRING , 
60401: STR
60402: PUSH
60403: LD_VAR 0 3
60407: PPUSH
60408: LD_INT 2
60410: PPUSH
60411: CALL_OW 268
60415: STR
60416: PUSH
60417: LD_STRING ],
60419: STR
60420: PPUSH
60421: CALL_OW 561
// end ;
60425: GO 60319
60427: POP
60428: POP
// AddToLog ( ]; ) ;
60429: LD_STRING ];
60431: PPUSH
60432: CALL_OW 561
// end ;
60436: LD_VAR 0 2
60440: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
60441: LD_INT 0
60443: PPUSH
60444: PPUSH
60445: PPUSH
60446: PPUSH
60447: PPUSH
// if not area or not rate or not max then
60448: LD_VAR 0 1
60452: NOT
60453: PUSH
60454: LD_VAR 0 2
60458: NOT
60459: OR
60460: PUSH
60461: LD_VAR 0 4
60465: NOT
60466: OR
60467: IFFALSE 60471
// exit ;
60469: GO 60663
// while 1 do
60471: LD_INT 1
60473: IFFALSE 60663
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
60475: LD_ADDR_VAR 0 9
60479: PUSH
60480: LD_VAR 0 1
60484: PPUSH
60485: LD_INT 1
60487: PPUSH
60488: CALL_OW 287
60492: PUSH
60493: LD_INT 10
60495: MUL
60496: ST_TO_ADDR
// r := rate / 10 ;
60497: LD_ADDR_VAR 0 7
60501: PUSH
60502: LD_VAR 0 2
60506: PUSH
60507: LD_INT 10
60509: DIVREAL
60510: ST_TO_ADDR
// time := 1 1$00 ;
60511: LD_ADDR_VAR 0 8
60515: PUSH
60516: LD_INT 2100
60518: ST_TO_ADDR
// if amount < min then
60519: LD_VAR 0 9
60523: PUSH
60524: LD_VAR 0 3
60528: LESS
60529: IFFALSE 60547
// r := r * 2 else
60531: LD_ADDR_VAR 0 7
60535: PUSH
60536: LD_VAR 0 7
60540: PUSH
60541: LD_INT 2
60543: MUL
60544: ST_TO_ADDR
60545: GO 60573
// if amount > max then
60547: LD_VAR 0 9
60551: PUSH
60552: LD_VAR 0 4
60556: GREATER
60557: IFFALSE 60573
// r := r / 2 ;
60559: LD_ADDR_VAR 0 7
60563: PUSH
60564: LD_VAR 0 7
60568: PUSH
60569: LD_INT 2
60571: DIVREAL
60572: ST_TO_ADDR
// time := time / r ;
60573: LD_ADDR_VAR 0 8
60577: PUSH
60578: LD_VAR 0 8
60582: PUSH
60583: LD_VAR 0 7
60587: DIVREAL
60588: ST_TO_ADDR
// if time < 0 then
60589: LD_VAR 0 8
60593: PUSH
60594: LD_INT 0
60596: LESS
60597: IFFALSE 60614
// time := time * - 1 ;
60599: LD_ADDR_VAR 0 8
60603: PUSH
60604: LD_VAR 0 8
60608: PUSH
60609: LD_INT 1
60611: NEG
60612: MUL
60613: ST_TO_ADDR
// wait ( time ) ;
60614: LD_VAR 0 8
60618: PPUSH
60619: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
60623: LD_INT 35
60625: PPUSH
60626: LD_INT 875
60628: PPUSH
60629: CALL_OW 12
60633: PPUSH
60634: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
60638: LD_INT 1
60640: PPUSH
60641: LD_INT 5
60643: PPUSH
60644: CALL_OW 12
60648: PPUSH
60649: LD_VAR 0 1
60653: PPUSH
60654: LD_INT 1
60656: PPUSH
60657: CALL_OW 55
// end ;
60661: GO 60471
// end ;
60663: LD_VAR 0 5
60667: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
60668: LD_INT 0
60670: PPUSH
60671: PPUSH
60672: PPUSH
60673: PPUSH
60674: PPUSH
60675: PPUSH
60676: PPUSH
60677: PPUSH
// if not turrets or not factories then
60678: LD_VAR 0 1
60682: NOT
60683: PUSH
60684: LD_VAR 0 2
60688: NOT
60689: OR
60690: IFFALSE 60694
// exit ;
60692: GO 61001
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
60694: LD_ADDR_VAR 0 10
60698: PUSH
60699: LD_INT 5
60701: PUSH
60702: LD_INT 6
60704: PUSH
60705: EMPTY
60706: LIST
60707: LIST
60708: PUSH
60709: LD_INT 2
60711: PUSH
60712: LD_INT 4
60714: PUSH
60715: EMPTY
60716: LIST
60717: LIST
60718: PUSH
60719: LD_INT 3
60721: PUSH
60722: LD_INT 5
60724: PUSH
60725: EMPTY
60726: LIST
60727: LIST
60728: PUSH
60729: EMPTY
60730: LIST
60731: LIST
60732: LIST
60733: PUSH
60734: LD_INT 24
60736: PUSH
60737: LD_INT 25
60739: PUSH
60740: EMPTY
60741: LIST
60742: LIST
60743: PUSH
60744: LD_INT 23
60746: PUSH
60747: LD_INT 27
60749: PUSH
60750: EMPTY
60751: LIST
60752: LIST
60753: PUSH
60754: EMPTY
60755: LIST
60756: LIST
60757: PUSH
60758: LD_INT 42
60760: PUSH
60761: LD_INT 43
60763: PUSH
60764: EMPTY
60765: LIST
60766: LIST
60767: PUSH
60768: LD_INT 44
60770: PUSH
60771: LD_INT 46
60773: PUSH
60774: EMPTY
60775: LIST
60776: LIST
60777: PUSH
60778: LD_INT 45
60780: PUSH
60781: LD_INT 47
60783: PUSH
60784: EMPTY
60785: LIST
60786: LIST
60787: PUSH
60788: EMPTY
60789: LIST
60790: LIST
60791: LIST
60792: PUSH
60793: EMPTY
60794: LIST
60795: LIST
60796: LIST
60797: ST_TO_ADDR
// result := [ ] ;
60798: LD_ADDR_VAR 0 3
60802: PUSH
60803: EMPTY
60804: ST_TO_ADDR
// for i in turrets do
60805: LD_ADDR_VAR 0 4
60809: PUSH
60810: LD_VAR 0 1
60814: PUSH
60815: FOR_IN
60816: IFFALSE 60999
// begin nat := GetNation ( i ) ;
60818: LD_ADDR_VAR 0 7
60822: PUSH
60823: LD_VAR 0 4
60827: PPUSH
60828: CALL_OW 248
60832: ST_TO_ADDR
// weapon := 0 ;
60833: LD_ADDR_VAR 0 8
60837: PUSH
60838: LD_INT 0
60840: ST_TO_ADDR
// if not nat then
60841: LD_VAR 0 7
60845: NOT
60846: IFFALSE 60850
// continue ;
60848: GO 60815
// for j in list [ nat ] do
60850: LD_ADDR_VAR 0 5
60854: PUSH
60855: LD_VAR 0 10
60859: PUSH
60860: LD_VAR 0 7
60864: ARRAY
60865: PUSH
60866: FOR_IN
60867: IFFALSE 60908
// if GetBWeapon ( i ) = j [ 1 ] then
60869: LD_VAR 0 4
60873: PPUSH
60874: CALL_OW 269
60878: PUSH
60879: LD_VAR 0 5
60883: PUSH
60884: LD_INT 1
60886: ARRAY
60887: EQUAL
60888: IFFALSE 60906
// begin weapon := j [ 2 ] ;
60890: LD_ADDR_VAR 0 8
60894: PUSH
60895: LD_VAR 0 5
60899: PUSH
60900: LD_INT 2
60902: ARRAY
60903: ST_TO_ADDR
// break ;
60904: GO 60908
// end ;
60906: GO 60866
60908: POP
60909: POP
// if not weapon then
60910: LD_VAR 0 8
60914: NOT
60915: IFFALSE 60919
// continue ;
60917: GO 60815
// for k in factories do
60919: LD_ADDR_VAR 0 6
60923: PUSH
60924: LD_VAR 0 2
60928: PUSH
60929: FOR_IN
60930: IFFALSE 60995
// begin weapons := AvailableWeaponList ( k ) ;
60932: LD_ADDR_VAR 0 9
60936: PUSH
60937: LD_VAR 0 6
60941: PPUSH
60942: CALL_OW 478
60946: ST_TO_ADDR
// if not weapons then
60947: LD_VAR 0 9
60951: NOT
60952: IFFALSE 60956
// continue ;
60954: GO 60929
// if weapon in weapons then
60956: LD_VAR 0 8
60960: PUSH
60961: LD_VAR 0 9
60965: IN
60966: IFFALSE 60993
// begin result := [ i , weapon ] ;
60968: LD_ADDR_VAR 0 3
60972: PUSH
60973: LD_VAR 0 4
60977: PUSH
60978: LD_VAR 0 8
60982: PUSH
60983: EMPTY
60984: LIST
60985: LIST
60986: ST_TO_ADDR
// exit ;
60987: POP
60988: POP
60989: POP
60990: POP
60991: GO 61001
// end ; end ;
60993: GO 60929
60995: POP
60996: POP
// end ;
60997: GO 60815
60999: POP
61000: POP
// end ;
61001: LD_VAR 0 3
61005: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
61006: LD_INT 0
61008: PPUSH
// if not side or side > 8 then
61009: LD_VAR 0 3
61013: NOT
61014: PUSH
61015: LD_VAR 0 3
61019: PUSH
61020: LD_INT 8
61022: GREATER
61023: OR
61024: IFFALSE 61028
// exit ;
61026: GO 61087
// if not range then
61028: LD_VAR 0 4
61032: NOT
61033: IFFALSE 61044
// range := - 12 ;
61035: LD_ADDR_VAR 0 4
61039: PUSH
61040: LD_INT 12
61042: NEG
61043: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
61044: LD_VAR 0 1
61048: PPUSH
61049: LD_VAR 0 2
61053: PPUSH
61054: LD_VAR 0 3
61058: PPUSH
61059: LD_VAR 0 4
61063: PPUSH
61064: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
61068: LD_VAR 0 1
61072: PPUSH
61073: LD_VAR 0 2
61077: PPUSH
61078: LD_VAR 0 3
61082: PPUSH
61083: CALL_OW 331
// end ;
61087: LD_VAR 0 5
61091: RET
// export function Video ( mode ) ; begin
61092: LD_INT 0
61094: PPUSH
// ingame_video = mode ;
61095: LD_ADDR_OWVAR 52
61099: PUSH
61100: LD_VAR 0 1
61104: ST_TO_ADDR
// interface_hidden = mode ;
61105: LD_ADDR_OWVAR 54
61109: PUSH
61110: LD_VAR 0 1
61114: ST_TO_ADDR
// end ;
61115: LD_VAR 0 2
61119: RET
// export function Join ( array , element ) ; begin
61120: LD_INT 0
61122: PPUSH
// result := Replace ( array , array + 1 , element ) ;
61123: LD_ADDR_VAR 0 3
61127: PUSH
61128: LD_VAR 0 1
61132: PPUSH
61133: LD_VAR 0 1
61137: PUSH
61138: LD_INT 1
61140: PLUS
61141: PPUSH
61142: LD_VAR 0 2
61146: PPUSH
61147: CALL_OW 1
61151: ST_TO_ADDR
// end ;
61152: LD_VAR 0 3
61156: RET
// export function JoinUnion ( array , element ) ; begin
61157: LD_INT 0
61159: PPUSH
// result := array union element ;
61160: LD_ADDR_VAR 0 3
61164: PUSH
61165: LD_VAR 0 1
61169: PUSH
61170: LD_VAR 0 2
61174: UNION
61175: ST_TO_ADDR
// end ;
61176: LD_VAR 0 3
61180: RET
// export function GetBehemoths ( side ) ; begin
61181: LD_INT 0
61183: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
61184: LD_ADDR_VAR 0 2
61188: PUSH
61189: LD_INT 22
61191: PUSH
61192: LD_VAR 0 1
61196: PUSH
61197: EMPTY
61198: LIST
61199: LIST
61200: PUSH
61201: LD_INT 31
61203: PUSH
61204: LD_INT 25
61206: PUSH
61207: EMPTY
61208: LIST
61209: LIST
61210: PUSH
61211: EMPTY
61212: LIST
61213: LIST
61214: PPUSH
61215: CALL_OW 69
61219: ST_TO_ADDR
// end ;
61220: LD_VAR 0 2
61224: RET
// export function Shuffle ( array ) ; var i , index ; begin
61225: LD_INT 0
61227: PPUSH
61228: PPUSH
61229: PPUSH
// result := [ ] ;
61230: LD_ADDR_VAR 0 2
61234: PUSH
61235: EMPTY
61236: ST_TO_ADDR
// if not array then
61237: LD_VAR 0 1
61241: NOT
61242: IFFALSE 61246
// exit ;
61244: GO 61345
// Randomize ;
61246: CALL_OW 10
// for i = array downto 1 do
61250: LD_ADDR_VAR 0 3
61254: PUSH
61255: DOUBLE
61256: LD_VAR 0 1
61260: INC
61261: ST_TO_ADDR
61262: LD_INT 1
61264: PUSH
61265: FOR_DOWNTO
61266: IFFALSE 61343
// begin index := rand ( 1 , array ) ;
61268: LD_ADDR_VAR 0 4
61272: PUSH
61273: LD_INT 1
61275: PPUSH
61276: LD_VAR 0 1
61280: PPUSH
61281: CALL_OW 12
61285: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
61286: LD_ADDR_VAR 0 2
61290: PUSH
61291: LD_VAR 0 2
61295: PPUSH
61296: LD_VAR 0 2
61300: PUSH
61301: LD_INT 1
61303: PLUS
61304: PPUSH
61305: LD_VAR 0 1
61309: PUSH
61310: LD_VAR 0 4
61314: ARRAY
61315: PPUSH
61316: CALL_OW 2
61320: ST_TO_ADDR
// array := Delete ( array , index ) ;
61321: LD_ADDR_VAR 0 1
61325: PUSH
61326: LD_VAR 0 1
61330: PPUSH
61331: LD_VAR 0 4
61335: PPUSH
61336: CALL_OW 3
61340: ST_TO_ADDR
// end ;
61341: GO 61265
61343: POP
61344: POP
// end ;
61345: LD_VAR 0 2
61349: RET
// export function GetBaseMaterials ( base ) ; begin
61350: LD_INT 0
61352: PPUSH
// result := [ 0 , 0 , 0 ] ;
61353: LD_ADDR_VAR 0 2
61357: PUSH
61358: LD_INT 0
61360: PUSH
61361: LD_INT 0
61363: PUSH
61364: LD_INT 0
61366: PUSH
61367: EMPTY
61368: LIST
61369: LIST
61370: LIST
61371: ST_TO_ADDR
// if not base then
61372: LD_VAR 0 1
61376: NOT
61377: IFFALSE 61381
// exit ;
61379: GO 61430
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
61381: LD_ADDR_VAR 0 2
61385: PUSH
61386: LD_VAR 0 1
61390: PPUSH
61391: LD_INT 1
61393: PPUSH
61394: CALL_OW 275
61398: PUSH
61399: LD_VAR 0 1
61403: PPUSH
61404: LD_INT 2
61406: PPUSH
61407: CALL_OW 275
61411: PUSH
61412: LD_VAR 0 1
61416: PPUSH
61417: LD_INT 3
61419: PPUSH
61420: CALL_OW 275
61424: PUSH
61425: EMPTY
61426: LIST
61427: LIST
61428: LIST
61429: ST_TO_ADDR
// end ;
61430: LD_VAR 0 2
61434: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
61435: LD_INT 0
61437: PPUSH
61438: PPUSH
// result := array ;
61439: LD_ADDR_VAR 0 3
61443: PUSH
61444: LD_VAR 0 1
61448: ST_TO_ADDR
// if size > 0 then
61449: LD_VAR 0 2
61453: PUSH
61454: LD_INT 0
61456: GREATER
61457: IFFALSE 61503
// for i := array downto size do
61459: LD_ADDR_VAR 0 4
61463: PUSH
61464: DOUBLE
61465: LD_VAR 0 1
61469: INC
61470: ST_TO_ADDR
61471: LD_VAR 0 2
61475: PUSH
61476: FOR_DOWNTO
61477: IFFALSE 61501
// result := Delete ( result , result ) ;
61479: LD_ADDR_VAR 0 3
61483: PUSH
61484: LD_VAR 0 3
61488: PPUSH
61489: LD_VAR 0 3
61493: PPUSH
61494: CALL_OW 3
61498: ST_TO_ADDR
61499: GO 61476
61501: POP
61502: POP
// end ;
61503: LD_VAR 0 3
61507: RET
// export function ComExit ( unit ) ; var tmp ; begin
61508: LD_INT 0
61510: PPUSH
61511: PPUSH
// if not IsInUnit ( unit ) then
61512: LD_VAR 0 1
61516: PPUSH
61517: CALL_OW 310
61521: NOT
61522: IFFALSE 61526
// exit ;
61524: GO 61586
// tmp := IsInUnit ( unit ) ;
61526: LD_ADDR_VAR 0 3
61530: PUSH
61531: LD_VAR 0 1
61535: PPUSH
61536: CALL_OW 310
61540: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
61541: LD_VAR 0 3
61545: PPUSH
61546: CALL_OW 247
61550: PUSH
61551: LD_INT 2
61553: EQUAL
61554: IFFALSE 61567
// ComExitVehicle ( unit ) else
61556: LD_VAR 0 1
61560: PPUSH
61561: CALL_OW 121
61565: GO 61576
// ComExitBuilding ( unit ) ;
61567: LD_VAR 0 1
61571: PPUSH
61572: CALL_OW 122
// result := tmp ;
61576: LD_ADDR_VAR 0 2
61580: PUSH
61581: LD_VAR 0 3
61585: ST_TO_ADDR
// end ;
61586: LD_VAR 0 2
61590: RET
// export function ResetHc ; begin
61591: LD_INT 0
61593: PPUSH
// InitHc ;
61594: CALL_OW 19
// hc_importance := 0 ;
61598: LD_ADDR_OWVAR 32
61602: PUSH
61603: LD_INT 0
61605: ST_TO_ADDR
// end ;
61606: LD_VAR 0 1
61610: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
61611: LD_INT 0
61613: PPUSH
61614: PPUSH
61615: PPUSH
// _x := ( x1 + x2 ) div 2 ;
61616: LD_ADDR_VAR 0 6
61620: PUSH
61621: LD_VAR 0 1
61625: PUSH
61626: LD_VAR 0 3
61630: PLUS
61631: PUSH
61632: LD_INT 2
61634: DIV
61635: ST_TO_ADDR
// if _x < 0 then
61636: LD_VAR 0 6
61640: PUSH
61641: LD_INT 0
61643: LESS
61644: IFFALSE 61661
// _x := _x * - 1 ;
61646: LD_ADDR_VAR 0 6
61650: PUSH
61651: LD_VAR 0 6
61655: PUSH
61656: LD_INT 1
61658: NEG
61659: MUL
61660: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
61661: LD_ADDR_VAR 0 7
61665: PUSH
61666: LD_VAR 0 2
61670: PUSH
61671: LD_VAR 0 4
61675: PLUS
61676: PUSH
61677: LD_INT 2
61679: DIV
61680: ST_TO_ADDR
// if _y < 0 then
61681: LD_VAR 0 7
61685: PUSH
61686: LD_INT 0
61688: LESS
61689: IFFALSE 61706
// _y := _y * - 1 ;
61691: LD_ADDR_VAR 0 7
61695: PUSH
61696: LD_VAR 0 7
61700: PUSH
61701: LD_INT 1
61703: NEG
61704: MUL
61705: ST_TO_ADDR
// result := [ _x , _y ] ;
61706: LD_ADDR_VAR 0 5
61710: PUSH
61711: LD_VAR 0 6
61715: PUSH
61716: LD_VAR 0 7
61720: PUSH
61721: EMPTY
61722: LIST
61723: LIST
61724: ST_TO_ADDR
// end ;
61725: LD_VAR 0 5
61729: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
61730: LD_INT 0
61732: PPUSH
61733: PPUSH
61734: PPUSH
61735: PPUSH
// task := GetTaskList ( unit ) ;
61736: LD_ADDR_VAR 0 7
61740: PUSH
61741: LD_VAR 0 1
61745: PPUSH
61746: CALL_OW 437
61750: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
61751: LD_VAR 0 7
61755: NOT
61756: PUSH
61757: LD_VAR 0 1
61761: PPUSH
61762: LD_VAR 0 2
61766: PPUSH
61767: CALL_OW 308
61771: NOT
61772: AND
61773: IFFALSE 61777
// exit ;
61775: GO 61895
// if IsInArea ( unit , area ) then
61777: LD_VAR 0 1
61781: PPUSH
61782: LD_VAR 0 2
61786: PPUSH
61787: CALL_OW 308
61791: IFFALSE 61809
// begin ComMoveToArea ( unit , goAway ) ;
61793: LD_VAR 0 1
61797: PPUSH
61798: LD_VAR 0 3
61802: PPUSH
61803: CALL_OW 113
// exit ;
61807: GO 61895
// end ; if task [ 1 ] [ 1 ] <> M then
61809: LD_VAR 0 7
61813: PUSH
61814: LD_INT 1
61816: ARRAY
61817: PUSH
61818: LD_INT 1
61820: ARRAY
61821: PUSH
61822: LD_STRING M
61824: NONEQUAL
61825: IFFALSE 61829
// exit ;
61827: GO 61895
// x := task [ 1 ] [ 2 ] ;
61829: LD_ADDR_VAR 0 5
61833: PUSH
61834: LD_VAR 0 7
61838: PUSH
61839: LD_INT 1
61841: ARRAY
61842: PUSH
61843: LD_INT 2
61845: ARRAY
61846: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
61847: LD_ADDR_VAR 0 6
61851: PUSH
61852: LD_VAR 0 7
61856: PUSH
61857: LD_INT 1
61859: ARRAY
61860: PUSH
61861: LD_INT 3
61863: ARRAY
61864: ST_TO_ADDR
// if InArea ( x , y , area ) then
61865: LD_VAR 0 5
61869: PPUSH
61870: LD_VAR 0 6
61874: PPUSH
61875: LD_VAR 0 2
61879: PPUSH
61880: CALL_OW 309
61884: IFFALSE 61895
// ComStop ( unit ) ;
61886: LD_VAR 0 1
61890: PPUSH
61891: CALL_OW 141
// end ;
61895: LD_VAR 0 4
61899: RET
// export function Abs ( value ) ; begin
61900: LD_INT 0
61902: PPUSH
// result := value ;
61903: LD_ADDR_VAR 0 2
61907: PUSH
61908: LD_VAR 0 1
61912: ST_TO_ADDR
// if value < 0 then
61913: LD_VAR 0 1
61917: PUSH
61918: LD_INT 0
61920: LESS
61921: IFFALSE 61938
// result := value * - 1 ;
61923: LD_ADDR_VAR 0 2
61927: PUSH
61928: LD_VAR 0 1
61932: PUSH
61933: LD_INT 1
61935: NEG
61936: MUL
61937: ST_TO_ADDR
// end ;
61938: LD_VAR 0 2
61942: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
61943: LD_INT 0
61945: PPUSH
61946: PPUSH
61947: PPUSH
61948: PPUSH
61949: PPUSH
61950: PPUSH
61951: PPUSH
61952: PPUSH
// if not unit or not building then
61953: LD_VAR 0 1
61957: NOT
61958: PUSH
61959: LD_VAR 0 2
61963: NOT
61964: OR
61965: IFFALSE 61969
// exit ;
61967: GO 62195
// x := GetX ( building ) ;
61969: LD_ADDR_VAR 0 4
61973: PUSH
61974: LD_VAR 0 2
61978: PPUSH
61979: CALL_OW 250
61983: ST_TO_ADDR
// y := GetY ( building ) ;
61984: LD_ADDR_VAR 0 6
61988: PUSH
61989: LD_VAR 0 2
61993: PPUSH
61994: CALL_OW 251
61998: ST_TO_ADDR
// d := GetDir ( building ) ;
61999: LD_ADDR_VAR 0 8
62003: PUSH
62004: LD_VAR 0 2
62008: PPUSH
62009: CALL_OW 254
62013: ST_TO_ADDR
// r := 4 ;
62014: LD_ADDR_VAR 0 9
62018: PUSH
62019: LD_INT 4
62021: ST_TO_ADDR
// for i := 1 to 5 do
62022: LD_ADDR_VAR 0 10
62026: PUSH
62027: DOUBLE
62028: LD_INT 1
62030: DEC
62031: ST_TO_ADDR
62032: LD_INT 5
62034: PUSH
62035: FOR_TO
62036: IFFALSE 62193
// begin _x := ShiftX ( x , d , r + i ) ;
62038: LD_ADDR_VAR 0 5
62042: PUSH
62043: LD_VAR 0 4
62047: PPUSH
62048: LD_VAR 0 8
62052: PPUSH
62053: LD_VAR 0 9
62057: PUSH
62058: LD_VAR 0 10
62062: PLUS
62063: PPUSH
62064: CALL_OW 272
62068: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
62069: LD_ADDR_VAR 0 7
62073: PUSH
62074: LD_VAR 0 6
62078: PPUSH
62079: LD_VAR 0 8
62083: PPUSH
62084: LD_VAR 0 9
62088: PUSH
62089: LD_VAR 0 10
62093: PLUS
62094: PPUSH
62095: CALL_OW 273
62099: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
62100: LD_VAR 0 5
62104: PPUSH
62105: LD_VAR 0 7
62109: PPUSH
62110: CALL_OW 488
62114: PUSH
62115: LD_VAR 0 5
62119: PPUSH
62120: LD_VAR 0 7
62124: PPUSH
62125: CALL_OW 428
62129: PPUSH
62130: CALL_OW 247
62134: PUSH
62135: LD_INT 3
62137: PUSH
62138: LD_INT 2
62140: PUSH
62141: EMPTY
62142: LIST
62143: LIST
62144: IN
62145: NOT
62146: AND
62147: IFFALSE 62191
// begin ComMoveXY ( unit , _x , _y ) ;
62149: LD_VAR 0 1
62153: PPUSH
62154: LD_VAR 0 5
62158: PPUSH
62159: LD_VAR 0 7
62163: PPUSH
62164: CALL_OW 111
// result := [ _x , _y ] ;
62168: LD_ADDR_VAR 0 3
62172: PUSH
62173: LD_VAR 0 5
62177: PUSH
62178: LD_VAR 0 7
62182: PUSH
62183: EMPTY
62184: LIST
62185: LIST
62186: ST_TO_ADDR
// exit ;
62187: POP
62188: POP
62189: GO 62195
// end ; end ;
62191: GO 62035
62193: POP
62194: POP
// end ; end_of_file
62195: LD_VAR 0 3
62199: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
62200: LD_VAR 0 1
62204: PUSH
62205: LD_INT 200
62207: DOUBLE
62208: GREATEREQUAL
62209: IFFALSE 62217
62211: LD_INT 299
62213: DOUBLE
62214: LESSEQUAL
62215: IFTRUE 62219
62217: GO 62251
62219: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
62220: LD_VAR 0 1
62224: PPUSH
62225: LD_VAR 0 2
62229: PPUSH
62230: LD_VAR 0 3
62234: PPUSH
62235: LD_VAR 0 4
62239: PPUSH
62240: LD_VAR 0 5
62244: PPUSH
62245: CALL 21256 0 5
62249: GO 62328
62251: LD_INT 300
62253: DOUBLE
62254: GREATEREQUAL
62255: IFFALSE 62263
62257: LD_INT 399
62259: DOUBLE
62260: LESSEQUAL
62261: IFTRUE 62265
62263: GO 62327
62265: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
62266: LD_VAR 0 1
62270: PPUSH
62271: LD_VAR 0 2
62275: PPUSH
62276: LD_VAR 0 3
62280: PPUSH
62281: LD_VAR 0 4
62285: PPUSH
62286: LD_VAR 0 5
62290: PPUSH
62291: LD_VAR 0 6
62295: PPUSH
62296: LD_VAR 0 7
62300: PPUSH
62301: LD_VAR 0 8
62305: PPUSH
62306: LD_VAR 0 9
62310: PPUSH
62311: LD_VAR 0 10
62315: PPUSH
62316: LD_VAR 0 11
62320: PPUSH
62321: CALL 19162 0 11
62325: GO 62328
62327: POP
// end ;
62328: PPOPN 11
62330: END
