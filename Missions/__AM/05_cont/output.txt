// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RandomizeAll ;
  11: CALL_OW 11
// Init ;
  15: CALL 91 0 0
// InitRestrictions ;
  19: CALL 227 0 0
// if debug then
  23: LD_EXP 1
  27: IFFALSE 33
// DebugMode ;
  29: CALL 308 0 0
// SpawnApeman ( apemanStartArea , 2 ) ;
  33: LD_INT 12
  35: PPUSH
  36: LD_INT 2
  38: PPUSH
  39: CALL 804 0 2
// SpawnApeman ( apemanArea , [ 10 , 8 , 7 , 6 ] [ Difficulty ] ) ;
  43: LD_INT 11
  45: PPUSH
  46: LD_INT 10
  48: PUSH
  49: LD_INT 8
  51: PUSH
  52: LD_INT 7
  54: PUSH
  55: LD_INT 6
  57: PUSH
  58: EMPTY
  59: LIST
  60: LIST
  61: LIST
  62: LIST
  63: PUSH
  64: LD_OWVAR 67
  68: ARRAY
  69: PPUSH
  70: CALL 804 0 2
// InGameOn ;
  74: CALL_OW 8
// CreateNature ;
  78: CALL 537 0 0
// PrepareAmericans ;
  82: CALL 1409 0 0
// Action ;
  86: CALL 2496 0 0
// end ;
  90: END
// export debug ; export mission_prefix , mission_prefix_prev ; export deltaBuilded , denisArrives , Delta , radar_allowed , first_apeman_tamed , apeman_army , radar_researched , radar_builded ; export apeman_counter , arab_spotted , end_mission , apeKillCounter , traitor ; function Init ; begin
  91: LD_INT 0
  93: PPUSH
// debug := false ;
  94: LD_ADDR_EXP 1
  98: PUSH
  99: LD_INT 0
 101: ST_TO_ADDR
// mission_prefix := 05_ ;
 102: LD_ADDR_EXP 2
 106: PUSH
 107: LD_STRING 05_
 109: ST_TO_ADDR
// mission_prefix_prev := 05a_ ;
 110: LD_ADDR_EXP 3
 114: PUSH
 115: LD_STRING 05a_
 117: ST_TO_ADDR
// deltaBuilded := false ;
 118: LD_ADDR_EXP 4
 122: PUSH
 123: LD_INT 0
 125: ST_TO_ADDR
// denisArrives := false ;
 126: LD_ADDR_EXP 5
 130: PUSH
 131: LD_INT 0
 133: ST_TO_ADDR
// radar_allowed := false ;
 134: LD_ADDR_EXP 7
 138: PUSH
 139: LD_INT 0
 141: ST_TO_ADDR
// first_apeman_tamed := false ;
 142: LD_ADDR_EXP 8
 146: PUSH
 147: LD_INT 0
 149: ST_TO_ADDR
// arab_spotted := false ;
 150: LD_ADDR_EXP 13
 154: PUSH
 155: LD_INT 0
 157: ST_TO_ADDR
// end_mission := false ;
 158: LD_ADDR_EXP 14
 162: PUSH
 163: LD_INT 0
 165: ST_TO_ADDR
// apeman_army := false ;
 166: LD_ADDR_EXP 9
 170: PUSH
 171: LD_INT 0
 173: ST_TO_ADDR
// radar_researched := false ;
 174: LD_ADDR_EXP 10
 178: PUSH
 179: LD_INT 0
 181: ST_TO_ADDR
// radar_builded := false ;
 182: LD_ADDR_EXP 11
 186: PUSH
 187: LD_INT 0
 189: ST_TO_ADDR
// apeman_counter := 0 ;
 190: LD_ADDR_EXP 12
 194: PUSH
 195: LD_INT 0
 197: ST_TO_ADDR
// Delta := 0 ;
 198: LD_ADDR_EXP 6
 202: PUSH
 203: LD_INT 0
 205: ST_TO_ADDR
// apeKillCounter := 0 ;
 206: LD_ADDR_EXP 15
 210: PUSH
 211: LD_INT 0
 213: ST_TO_ADDR
// traitor := false ;
 214: LD_ADDR_EXP 16
 218: PUSH
 219: LD_INT 0
 221: ST_TO_ADDR
// end ;
 222: LD_VAR 0 1
 226: RET
// function InitRestrictions ; begin
 227: LD_INT 0
 229: PPUSH
// SetRestrict ( b_lab_half , 1 , state_enabled ) ;
 230: LD_INT 7
 232: PPUSH
 233: LD_INT 1
 235: PPUSH
 236: LD_INT 1
 238: PPUSH
 239: CALL_OW 324
// SetRestrict ( b_lab_full , 1 , state_enabled ) ;
 243: LD_INT 8
 245: PPUSH
 246: LD_INT 1
 248: PPUSH
 249: LD_INT 1
 251: PPUSH
 252: CALL_OW 324
// SetRestrict ( b_lab_weapon , 1 , state_enabled ) ;
 256: LD_INT 10
 258: PPUSH
 259: LD_INT 1
 261: PPUSH
 262: LD_INT 1
 264: PPUSH
 265: CALL_OW 324
// SetTech ( tech_gatling , 1 , LoadVariable ( GatlingInGamma , 1 ) ) ;
 269: LD_INT 69
 271: PPUSH
 272: LD_INT 1
 274: PPUSH
 275: LD_STRING GatlingInGamma
 277: PPUSH
 278: LD_INT 1
 280: PPUSH
 281: CALL_OW 30
 285: PPUSH
 286: CALL_OW 322
// SetTech ( tech_weap1 , 1 , state_enabled ) ;
 290: LD_INT 51
 292: PPUSH
 293: LD_INT 1
 295: PPUSH
 296: LD_INT 1
 298: PPUSH
 299: CALL_OW 322
// end ;
 303: LD_VAR 0 1
 307: RET
// function DebugMode ; begin
 308: LD_INT 0
 310: PPUSH
// FogOff ( 1 ) ;
 311: LD_INT 1
 313: PPUSH
 314: CALL_OW 344
// Difficulty := 2 ;
 318: LD_ADDR_OWVAR 67
 322: PUSH
 323: LD_INT 2
 325: ST_TO_ADDR
// end ;
 326: LD_VAR 0 1
 330: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 0 ] ] ) >= 7 do
 331: LD_INT 22
 333: PUSH
 334: LD_INT 1
 336: PUSH
 337: EMPTY
 338: LIST
 339: LIST
 340: PUSH
 341: LD_INT 23
 343: PUSH
 344: LD_INT 0
 346: PUSH
 347: EMPTY
 348: LIST
 349: LIST
 350: PUSH
 351: EMPTY
 352: LIST
 353: LIST
 354: PPUSH
 355: CALL_OW 69
 359: PUSH
 360: LD_INT 7
 362: GREATEREQUAL
 363: IFFALSE 375
 365: GO 367
 367: DISABLE
// SetAchievement ( ACH_TAME ) ;
 368: LD_STRING ACH_TAME
 370: PPUSH
 371: CALL_OW 543
 375: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_bweapon , us_radar ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_radar ] ] ) do
 376: LD_INT 22
 378: PUSH
 379: LD_INT 1
 381: PUSH
 382: EMPTY
 383: LIST
 384: LIST
 385: PUSH
 386: LD_INT 35
 388: PUSH
 389: LD_INT 11
 391: PUSH
 392: EMPTY
 393: LIST
 394: LIST
 395: PUSH
 396: EMPTY
 397: LIST
 398: LIST
 399: PPUSH
 400: CALL_OW 69
 404: IFFALSE 436
 406: PUSH
 407: LD_INT 22
 409: PUSH
 410: LD_INT 1
 412: PUSH
 413: EMPTY
 414: LIST
 415: LIST
 416: PUSH
 417: LD_INT 34
 419: PUSH
 420: LD_INT 11
 422: PUSH
 423: EMPTY
 424: LIST
 425: LIST
 426: PUSH
 427: EMPTY
 428: LIST
 429: LIST
 430: PPUSH
 431: CALL_OW 69
 435: AND
 436: IFFALSE 448
 438: GO 440
 440: DISABLE
// SetAchievement ( ACH_RADAR ) ; end_of_file
 441: LD_STRING ACH_RADAR
 443: PPUSH
 444: CALL_OW 543
 448: END
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 449: LD_INT 0
 451: PPUSH
// uc_side := side ;
 452: LD_ADDR_OWVAR 20
 456: PUSH
 457: LD_VAR 0 1
 461: ST_TO_ADDR
// uc_nation := nation ;
 462: LD_ADDR_OWVAR 21
 466: PUSH
 467: LD_VAR 0 2
 471: ST_TO_ADDR
// vc_chassis := chassis ;
 472: LD_ADDR_OWVAR 37
 476: PUSH
 477: LD_VAR 0 3
 481: ST_TO_ADDR
// vc_engine := engine ;
 482: LD_ADDR_OWVAR 39
 486: PUSH
 487: LD_VAR 0 4
 491: ST_TO_ADDR
// vc_control := control ;
 492: LD_ADDR_OWVAR 38
 496: PUSH
 497: LD_VAR 0 5
 501: ST_TO_ADDR
// vc_weapon := weapon ;
 502: LD_ADDR_OWVAR 40
 506: PUSH
 507: LD_VAR 0 6
 511: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 512: LD_ADDR_OWVAR 41
 516: PUSH
 517: LD_VAR 0 7
 521: ST_TO_ADDR
// result := CreateVehicle ;
 522: LD_ADDR_VAR 0 8
 526: PUSH
 527: CALL_OW 45
 531: ST_TO_ADDR
// end ;
 532: LD_VAR 0 8
 536: RET
// export function CreateNature ; var i ; begin
 537: LD_INT 0
 539: PPUSH
 540: PPUSH
// for i := 1 to 4 do
 541: LD_ADDR_VAR 0 2
 545: PUSH
 546: DOUBLE
 547: LD_INT 1
 549: DEC
 550: ST_TO_ADDR
 551: LD_INT 4
 553: PUSH
 554: FOR_TO
 555: IFFALSE 578
// begin PrepareFrog ( ) ;
 557: CALL 65131 0 0
// PlaceUnitArea ( CreateHuman , swampArea , false ) ;
 561: CALL_OW 44
 565: PPUSH
 566: LD_INT 17
 568: PPUSH
 569: LD_INT 0
 571: PPUSH
 572: CALL_OW 49
// end ;
 576: GO 554
 578: POP
 579: POP
// for i := 1 to 6 do
 580: LD_ADDR_VAR 0 2
 584: PUSH
 585: DOUBLE
 586: LD_INT 1
 588: DEC
 589: ST_TO_ADDR
 590: LD_INT 6
 592: PUSH
 593: FOR_TO
 594: IFFALSE 617
// begin PrepareBird ( ) ;
 596: CALL 65235 0 0
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 600: CALL_OW 44
 604: PPUSH
 605: LD_INT 1
 607: PPUSH
 608: LD_INT 0
 610: PPUSH
 611: CALL_OW 49
// end ;
 615: GO 593
 617: POP
 618: POP
// for i := 1 to 11 do
 619: LD_ADDR_VAR 0 2
 623: PUSH
 624: DOUBLE
 625: LD_INT 1
 627: DEC
 628: ST_TO_ADDR
 629: LD_INT 11
 631: PUSH
 632: FOR_TO
 633: IFFALSE 656
// begin PrepareEnchidna ( ) ;
 635: CALL 65079 0 0
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 639: CALL_OW 44
 643: PPUSH
 644: LD_INT 1
 646: PPUSH
 647: LD_INT 0
 649: PPUSH
 650: CALL_OW 49
// end ;
 654: GO 632
 656: POP
 657: POP
// for i := 1 to 3 do
 658: LD_ADDR_VAR 0 2
 662: PUSH
 663: DOUBLE
 664: LD_INT 1
 666: DEC
 667: ST_TO_ADDR
 668: LD_INT 3
 670: PUSH
 671: FOR_TO
 672: IFFALSE 698
// begin PrepareTiger ( 10 ) ;
 674: LD_INT 10
 676: PPUSH
 677: CALL 65006 0 1
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 681: CALL_OW 44
 685: PPUSH
 686: LD_INT 1
 688: PPUSH
 689: LD_INT 0
 691: PPUSH
 692: CALL_OW 49
// end ;
 696: GO 671
 698: POP
 699: POP
// PrepareMastodont ( ) ;
 700: CALL 65339 0 0
// PlaceUnitArea ( CreateVehicle , mastodontArea , false ) ;
 704: CALL_OW 45
 708: PPUSH
 709: LD_INT 18
 711: PPUSH
 712: LD_INT 0
 714: PPUSH
 715: CALL_OW 49
// end ;
 719: LD_VAR 0 1
 723: RET
// export function SayX ( units , ident ) ; var i ; begin
 724: LD_INT 0
 726: PPUSH
 727: PPUSH
// result := false ;
 728: LD_ADDR_VAR 0 3
 732: PUSH
 733: LD_INT 0
 735: ST_TO_ADDR
// if not units then
 736: LD_VAR 0 1
 740: NOT
 741: IFFALSE 745
// exit ;
 743: GO 799
// for i in units do
 745: LD_ADDR_VAR 0 4
 749: PUSH
 750: LD_VAR 0 1
 754: PUSH
 755: FOR_IN
 756: IFFALSE 797
// if IsOk ( i ) then
 758: LD_VAR 0 4
 762: PPUSH
 763: CALL_OW 302
 767: IFFALSE 795
// begin Say ( i , ident ) ;
 769: LD_VAR 0 4
 773: PPUSH
 774: LD_VAR 0 2
 778: PPUSH
 779: CALL_OW 88
// result := i ;
 783: LD_ADDR_VAR 0 3
 787: PUSH
 788: LD_VAR 0 4
 792: ST_TO_ADDR
// break ;
 793: GO 797
// end ;
 795: GO 755
 797: POP
 798: POP
// end ;
 799: LD_VAR 0 3
 803: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 804: LD_INT 0
 806: PPUSH
 807: PPUSH
// InitUc ;
 808: CALL_OW 18
// InitHc ;
 812: CALL_OW 19
// uc_side := 0 ;
 816: LD_ADDR_OWVAR 20
 820: PUSH
 821: LD_INT 0
 823: ST_TO_ADDR
// uc_nation := 0 ;
 824: LD_ADDR_OWVAR 21
 828: PUSH
 829: LD_INT 0
 831: ST_TO_ADDR
// for i = 1 to amount do
 832: LD_ADDR_VAR 0 4
 836: PUSH
 837: DOUBLE
 838: LD_INT 1
 840: DEC
 841: ST_TO_ADDR
 842: LD_VAR 0 2
 846: PUSH
 847: FOR_TO
 848: IFFALSE 930
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 850: LD_ADDR_OWVAR 29
 854: PUSH
 855: LD_INT 9
 857: PPUSH
 858: LD_INT 12
 860: PPUSH
 861: CALL_OW 12
 865: PUSH
 866: LD_INT 9
 868: PPUSH
 869: LD_INT 12
 871: PPUSH
 872: CALL_OW 12
 876: PUSH
 877: EMPTY
 878: LIST
 879: LIST
 880: ST_TO_ADDR
// hc_agressivity := rand ( - 5 , 5 ) ;
 881: LD_ADDR_OWVAR 35
 885: PUSH
 886: LD_INT 5
 888: NEG
 889: PPUSH
 890: LD_INT 5
 892: PPUSH
 893: CALL_OW 12
 897: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 898: LD_INT 0
 900: PPUSH
 901: LD_INT 12
 903: PPUSH
 904: LD_INT 1
 906: PPUSH
 907: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 911: CALL_OW 44
 915: PPUSH
 916: LD_VAR 0 1
 920: PPUSH
 921: LD_INT 0
 923: PPUSH
 924: CALL_OW 49
// end ;
 928: GO 847
 930: POP
 931: POP
// InitHc ;
 932: CALL_OW 19
// end ;
 936: LD_VAR 0 3
 940: RET
// export function Attack ( unit , enemy_list ) ; var target , targets_list ; begin
 941: LD_INT 0
 943: PPUSH
 944: PPUSH
 945: PPUSH
// if not unit then
 946: LD_VAR 0 1
 950: NOT
 951: IFFALSE 955
// exit ;
 953: GO 1404
// if IsInUnit ( unit ) then
 955: LD_VAR 0 1
 959: PPUSH
 960: CALL_OW 310
 964: IFFALSE 981
// unit := IsDrivenBy ( unit ) ;
 966: LD_ADDR_VAR 0 1
 970: PUSH
 971: LD_VAR 0 1
 975: PPUSH
 976: CALL_OW 311
 980: ST_TO_ADDR
// targets_list := [ ] ;
 981: LD_ADDR_VAR 0 5
 985: PUSH
 986: EMPTY
 987: ST_TO_ADDR
// target := UnitFilter ( enemy_list , [ [ f_lives , 250 ] , [ f_not , [ f_weapon , us_cargo_bay ] ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 988: LD_ADDR_VAR 0 4
 992: PUSH
 993: LD_VAR 0 2
 997: PPUSH
 998: LD_INT 24
1000: PUSH
1001: LD_INT 250
1003: PUSH
1004: EMPTY
1005: LIST
1006: LIST
1007: PUSH
1008: LD_INT 3
1010: PUSH
1011: LD_INT 34
1013: PUSH
1014: LD_INT 12
1016: PUSH
1017: EMPTY
1018: LIST
1019: LIST
1020: PUSH
1021: EMPTY
1022: LIST
1023: LIST
1024: PUSH
1025: LD_INT 21
1027: PUSH
1028: LD_INT 2
1030: PUSH
1031: EMPTY
1032: LIST
1033: LIST
1034: PUSH
1035: LD_INT 58
1037: PUSH
1038: EMPTY
1039: LIST
1040: PUSH
1041: EMPTY
1042: LIST
1043: LIST
1044: LIST
1045: LIST
1046: PPUSH
1047: CALL_OW 72
1051: ST_TO_ADDR
// if GetDistUnits ( NearestUnitToUnit ( target , unit ) , unit ) < 11 and not IsInUnit ( unit ) then
1052: LD_VAR 0 4
1056: PPUSH
1057: LD_VAR 0 1
1061: PPUSH
1062: CALL_OW 74
1066: PPUSH
1067: LD_VAR 0 1
1071: PPUSH
1072: CALL_OW 296
1076: PUSH
1077: LD_INT 11
1079: LESS
1080: IFFALSE 1094
1082: PUSH
1083: LD_VAR 0 1
1087: PPUSH
1088: CALL_OW 310
1092: NOT
1093: AND
1094: IFFALSE 1122
// begin ComEnterUnit ( unit , NearestUnitToUnit ( target , unit ) ) ;
1096: LD_VAR 0 1
1100: PPUSH
1101: LD_VAR 0 4
1105: PPUSH
1106: LD_VAR 0 1
1110: PPUSH
1111: CALL_OW 74
1115: PPUSH
1116: CALL_OW 120
// exit ;
1120: GO 1404
// end ; targets_list := [ UnitFilter ( enemy_list , [ [ f_type , unit_human ] , [ f_not , [ f_inside ] ] ] ) , UnitFilter ( enemy_list , [ f_type , unit_vehicle ] ) , UnitFilter ( enemy_list , [ [ f_type , unit_building ] , [ f_not , [ f_empty ] ] ] ) , enemy_list ] ;
1122: LD_ADDR_VAR 0 5
1126: PUSH
1127: LD_VAR 0 2
1131: PPUSH
1132: LD_INT 21
1134: PUSH
1135: LD_INT 1
1137: PUSH
1138: EMPTY
1139: LIST
1140: LIST
1141: PUSH
1142: LD_INT 3
1144: PUSH
1145: LD_INT 54
1147: PUSH
1148: EMPTY
1149: LIST
1150: PUSH
1151: EMPTY
1152: LIST
1153: LIST
1154: PUSH
1155: EMPTY
1156: LIST
1157: LIST
1158: PPUSH
1159: CALL_OW 72
1163: PUSH
1164: LD_VAR 0 2
1168: PPUSH
1169: LD_INT 21
1171: PUSH
1172: LD_INT 2
1174: PUSH
1175: EMPTY
1176: LIST
1177: LIST
1178: PPUSH
1179: CALL_OW 72
1183: PUSH
1184: LD_VAR 0 2
1188: PPUSH
1189: LD_INT 21
1191: PUSH
1192: LD_INT 3
1194: PUSH
1195: EMPTY
1196: LIST
1197: LIST
1198: PUSH
1199: LD_INT 3
1201: PUSH
1202: LD_INT 58
1204: PUSH
1205: EMPTY
1206: LIST
1207: PUSH
1208: EMPTY
1209: LIST
1210: LIST
1211: PUSH
1212: EMPTY
1213: LIST
1214: LIST
1215: PPUSH
1216: CALL_OW 72
1220: PUSH
1221: LD_VAR 0 2
1225: PUSH
1226: EMPTY
1227: LIST
1228: LIST
1229: LIST
1230: LIST
1231: ST_TO_ADDR
// for target in targets_list do
1232: LD_ADDR_VAR 0 4
1236: PUSH
1237: LD_VAR 0 5
1241: PUSH
1242: FOR_IN
1243: IFFALSE 1402
// begin if target then
1245: LD_VAR 0 4
1249: IFFALSE 1400
// if GetTag ( unit ) = 11 and ( GetType ( NearestUnitToUnit ( target , unit ) ) = unit_building or GetWeapon ( NearestUnitToUnit ( target , unit ) ) = us_cargo_bay ) then
1251: LD_VAR 0 1
1255: PPUSH
1256: CALL_OW 110
1260: PUSH
1261: LD_INT 11
1263: EQUAL
1264: IFFALSE 1318
1266: PUSH
1267: LD_VAR 0 4
1271: PPUSH
1272: LD_VAR 0 1
1276: PPUSH
1277: CALL_OW 74
1281: PPUSH
1282: CALL_OW 247
1286: PUSH
1287: LD_INT 3
1289: EQUAL
1290: IFTRUE 1317
1292: PUSH
1293: LD_VAR 0 4
1297: PPUSH
1298: LD_VAR 0 1
1302: PPUSH
1303: CALL_OW 74
1307: PPUSH
1308: CALL_OW 264
1312: PUSH
1313: LD_INT 12
1315: EQUAL
1316: OR
1317: AND
1318: IFFALSE 1364
// begin ComPlaceDelayedCharge ( unit , 0 , 0 , NearestUnitToUnit ( target , unit ) ) ;
1320: LD_VAR 0 1
1324: PPUSH
1325: LD_INT 0
1327: PPUSH
1328: LD_INT 0
1330: PPUSH
1331: LD_VAR 0 4
1335: PPUSH
1336: LD_VAR 0 1
1340: PPUSH
1341: CALL_OW 74
1345: PPUSH
1346: CALL_OW 132
// SetTag ( unit , 0 ) ;
1350: LD_VAR 0 1
1354: PPUSH
1355: LD_INT 0
1357: PPUSH
1358: CALL_OW 109
// end else
1362: GO 1400
// if not HasTask ( unit ) then
1364: LD_VAR 0 1
1368: PPUSH
1369: CALL_OW 314
1373: NOT
1374: IFFALSE 1400
// ComAttackUnit ( unit , NearestUnitToUnit ( target , unit ) ) ;
1376: LD_VAR 0 1
1380: PPUSH
1381: LD_VAR 0 4
1385: PPUSH
1386: LD_VAR 0 1
1390: PPUSH
1391: CALL_OW 74
1395: PPUSH
1396: CALL_OW 115
// end ;
1400: GO 1242
1402: POP
1403: POP
// end ; end_of_file
1404: LD_VAR 0 3
1408: RET
// export JMM , Gladstone , Harrison , Denis , Brown , Donaldson , Lisa , Frank , Bobby , Cyrus , Mike ; export others ; export function PrepareAmericans ; var i , points , p , xy , veh , tmp ; begin
1409: LD_INT 0
1411: PPUSH
1412: PPUSH
1413: PPUSH
1414: PPUSH
1415: PPUSH
1416: PPUSH
1417: PPUSH
// uc_nation := 1 ;
1418: LD_ADDR_OWVAR 21
1422: PUSH
1423: LD_INT 1
1425: ST_TO_ADDR
// uc_side := 4 ;
1426: LD_ADDR_OWVAR 20
1430: PUSH
1431: LD_INT 4
1433: ST_TO_ADDR
// Denis := PrepareUnit ( Denis , false ,  ) ;
1434: LD_ADDR_EXP 20
1438: PUSH
1439: LD_STRING Denis
1441: PPUSH
1442: LD_INT 0
1444: PPUSH
1445: LD_STRING 
1447: PPUSH
1448: CALL 30596 0 3
1452: ST_TO_ADDR
// Harrison := PrepareUnit ( Harisson , false ,  ) ;
1453: LD_ADDR_EXP 19
1457: PUSH
1458: LD_STRING Harisson
1460: PPUSH
1461: LD_INT 0
1463: PPUSH
1464: LD_STRING 
1466: PPUSH
1467: CALL 30596 0 3
1471: ST_TO_ADDR
// uc_side := 1 ;
1472: LD_ADDR_OWVAR 20
1476: PUSH
1477: LD_INT 1
1479: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debug ) , mission_prefix_prev ) ;
1480: LD_ADDR_EXP 17
1484: PUSH
1485: LD_STRING JMM
1487: PPUSH
1488: LD_EXP 1
1492: NOT
1493: PPUSH
1494: LD_EXP 3
1498: PPUSH
1499: CALL 30596 0 3
1503: ST_TO_ADDR
// Gladstone := PrepareUnit ( Gladstone , false , mission_prefix_prev ) ;
1504: LD_ADDR_EXP 18
1508: PUSH
1509: LD_STRING Gladstone
1511: PPUSH
1512: LD_INT 0
1514: PPUSH
1515: LD_EXP 3
1519: PPUSH
1520: CALL 30596 0 3
1524: ST_TO_ADDR
// if LoadVariable ( BrownInDelta , debug ) then
1525: LD_STRING BrownInDelta
1527: PPUSH
1528: LD_EXP 1
1532: PPUSH
1533: CALL_OW 30
1537: IFFALSE 1579
// begin Brown := PrepareUnit ( Brown , ( not debug ) , mission_prefix_prev ) ;
1539: LD_ADDR_EXP 21
1543: PUSH
1544: LD_STRING Brown
1546: PPUSH
1547: LD_EXP 1
1551: NOT
1552: PPUSH
1553: LD_EXP 3
1557: PPUSH
1558: CALL 30596 0 3
1562: ST_TO_ADDR
// tmp := tmp ^ Brown ;
1563: LD_ADDR_VAR 0 7
1567: PUSH
1568: LD_VAR 0 7
1572: PUSH
1573: LD_EXP 21
1577: ADD
1578: ST_TO_ADDR
// end ; if LoadVariable ( DonaldsonInDelta , debug ) then
1579: LD_STRING DonaldsonInDelta
1581: PPUSH
1582: LD_EXP 1
1586: PPUSH
1587: CALL_OW 30
1591: IFFALSE 1633
// begin Donaldson := PrepareUnit ( Donaldson , ( not debug ) , mission_prefix_prev ) ;
1593: LD_ADDR_EXP 22
1597: PUSH
1598: LD_STRING Donaldson
1600: PPUSH
1601: LD_EXP 1
1605: NOT
1606: PPUSH
1607: LD_EXP 3
1611: PPUSH
1612: CALL 30596 0 3
1616: ST_TO_ADDR
// tmp := tmp ^ Donaldson ;
1617: LD_ADDR_VAR 0 7
1621: PUSH
1622: LD_VAR 0 7
1626: PUSH
1627: LD_EXP 22
1631: ADD
1632: ST_TO_ADDR
// end ; if LoadVariable ( LisaInDelta , debug ) then
1633: LD_STRING LisaInDelta
1635: PPUSH
1636: LD_EXP 1
1640: PPUSH
1641: CALL_OW 30
1645: IFFALSE 1687
// begin Lisa := PrepareUnit ( Lisa , ( not debug ) , mission_prefix_prev ) ;
1647: LD_ADDR_EXP 23
1651: PUSH
1652: LD_STRING Lisa
1654: PPUSH
1655: LD_EXP 1
1659: NOT
1660: PPUSH
1661: LD_EXP 3
1665: PPUSH
1666: CALL 30596 0 3
1670: ST_TO_ADDR
// tmp := tmp ^ Lisa ;
1671: LD_ADDR_VAR 0 7
1675: PUSH
1676: LD_VAR 0 7
1680: PUSH
1681: LD_EXP 23
1685: ADD
1686: ST_TO_ADDR
// end ; if LoadVariable ( FrankInDelta , debug ) then
1687: LD_STRING FrankInDelta
1689: PPUSH
1690: LD_EXP 1
1694: PPUSH
1695: CALL_OW 30
1699: IFFALSE 1741
// begin Frank := PrepareUnit ( Frank , ( not debug ) , mission_prefix_prev ) ;
1701: LD_ADDR_EXP 24
1705: PUSH
1706: LD_STRING Frank
1708: PPUSH
1709: LD_EXP 1
1713: NOT
1714: PPUSH
1715: LD_EXP 3
1719: PPUSH
1720: CALL 30596 0 3
1724: ST_TO_ADDR
// tmp := tmp ^ Frank ;
1725: LD_ADDR_VAR 0 7
1729: PUSH
1730: LD_VAR 0 7
1734: PUSH
1735: LD_EXP 24
1739: ADD
1740: ST_TO_ADDR
// end ; if LoadVariable ( BobbyInDelta , 0 ) then
1741: LD_STRING BobbyInDelta
1743: PPUSH
1744: LD_INT 0
1746: PPUSH
1747: CALL_OW 30
1751: IFFALSE 1793
// begin Bobby := PrepareUnit ( Bobby , ( not debug ) , mission_prefix_prev ) ;
1753: LD_ADDR_EXP 25
1757: PUSH
1758: LD_STRING Bobby
1760: PPUSH
1761: LD_EXP 1
1765: NOT
1766: PPUSH
1767: LD_EXP 3
1771: PPUSH
1772: CALL 30596 0 3
1776: ST_TO_ADDR
// tmp := tmp ^ Bobby ;
1777: LD_ADDR_VAR 0 7
1781: PUSH
1782: LD_VAR 0 7
1786: PUSH
1787: LD_EXP 25
1791: ADD
1792: ST_TO_ADDR
// end ; if LoadVariable ( CyrusInDelta , 0 ) then
1793: LD_STRING CyrusInDelta
1795: PPUSH
1796: LD_INT 0
1798: PPUSH
1799: CALL_OW 30
1803: IFFALSE 1845
// begin Cyrus := PrepareUnit ( Cyrus , ( not debug ) , mission_prefix_prev ) ;
1805: LD_ADDR_EXP 26
1809: PUSH
1810: LD_STRING Cyrus
1812: PPUSH
1813: LD_EXP 1
1817: NOT
1818: PPUSH
1819: LD_EXP 3
1823: PPUSH
1824: CALL 30596 0 3
1828: ST_TO_ADDR
// tmp := tmp ^ Cyrus ;
1829: LD_ADDR_VAR 0 7
1833: PUSH
1834: LD_VAR 0 7
1838: PUSH
1839: LD_EXP 26
1843: ADD
1844: ST_TO_ADDR
// end ; others := CreateCharacterSet ( othersDelta ) ;
1845: LD_ADDR_EXP 28
1849: PUSH
1850: LD_STRING othersDelta
1852: PPUSH
1853: CALL_OW 31
1857: ST_TO_ADDR
// if not others and debug then
1858: LD_EXP 28
1862: NOT
1863: IFFALSE 1871
1865: PUSH
1866: LD_EXP 1
1870: AND
1871: IFFALSE 1936
// begin InitHc ;
1873: CALL_OW 19
// for i = 1 to 2 do
1877: LD_ADDR_VAR 0 2
1881: PUSH
1882: DOUBLE
1883: LD_INT 1
1885: DEC
1886: ST_TO_ADDR
1887: LD_INT 2
1889: PUSH
1890: FOR_TO
1891: IFFALSE 1934
// begin PrepareHuman ( false , i mod 4 + 1 , 3 ) ;
1893: LD_INT 0
1895: PPUSH
1896: LD_VAR 0 2
1900: PUSH
1901: LD_INT 4
1903: MOD
1904: PUSH
1905: LD_INT 1
1907: PLUS
1908: PPUSH
1909: LD_INT 3
1911: PPUSH
1912: CALL_OW 380
// others := others ^ CreateHuman ;
1916: LD_ADDR_EXP 28
1920: PUSH
1921: LD_EXP 28
1925: PUSH
1926: CALL_OW 44
1930: ADD
1931: ST_TO_ADDR
// end ;
1932: GO 1890
1934: POP
1935: POP
// end ; if others then
1936: LD_EXP 28
1940: IFFALSE 1958
// tmp := tmp ^ others ;
1942: LD_ADDR_VAR 0 7
1946: PUSH
1947: LD_VAR 0 7
1951: PUSH
1952: LD_EXP 28
1956: ADD
1957: ST_TO_ADDR
// points := [ [ 28 , 49 ] , [ 33 , 54 ] , [ 38 , 56 ] ] ;
1958: LD_ADDR_VAR 0 3
1962: PUSH
1963: LD_INT 28
1965: PUSH
1966: LD_INT 49
1968: PUSH
1969: EMPTY
1970: LIST
1971: LIST
1972: PUSH
1973: LD_INT 33
1975: PUSH
1976: LD_INT 54
1978: PUSH
1979: EMPTY
1980: LIST
1981: LIST
1982: PUSH
1983: LD_INT 38
1985: PUSH
1986: LD_INT 56
1988: PUSH
1989: EMPTY
1990: LIST
1991: LIST
1992: PUSH
1993: EMPTY
1994: LIST
1995: LIST
1996: LIST
1997: ST_TO_ADDR
// veh := PrepareTank ( 1 , 1 , us_medium_wheeled , engine_solar , control_manual , us_cargo_bay , 80 ) ;
1998: LD_ADDR_VAR 0 6
2002: PUSH
2003: LD_INT 1
2005: PPUSH
2006: LD_INT 1
2008: PPUSH
2009: LD_INT 2
2011: PPUSH
2012: LD_INT 2
2014: PPUSH
2015: LD_INT 1
2017: PPUSH
2018: LD_INT 12
2020: PPUSH
2021: LD_INT 80
2023: PPUSH
2024: CALL 449 0 7
2028: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
2029: LD_VAR 0 6
2033: PPUSH
2034: LD_INT 1
2036: PPUSH
2037: CALL_OW 233
// PlaceUnitXY ( veh , points [ 1 ] [ 1 ] , points [ 1 ] [ 2 ] , false ) ;
2041: LD_VAR 0 6
2045: PPUSH
2046: LD_VAR 0 3
2050: PUSH
2051: LD_INT 1
2053: ARRAY
2054: PUSH
2055: LD_INT 1
2057: ARRAY
2058: PPUSH
2059: LD_VAR 0 3
2063: PUSH
2064: LD_INT 1
2066: ARRAY
2067: PUSH
2068: LD_INT 2
2070: ARRAY
2071: PPUSH
2072: LD_INT 0
2074: PPUSH
2075: CALL_OW 48
// SetCargo ( veh , mat_cans , 100 ) ;
2079: LD_VAR 0 6
2083: PPUSH
2084: LD_INT 1
2086: PPUSH
2087: LD_INT 100
2089: PPUSH
2090: CALL_OW 290
// PlaceHumanInUnit ( others [ 1 ] , veh ) ;
2094: LD_EXP 28
2098: PUSH
2099: LD_INT 1
2101: ARRAY
2102: PPUSH
2103: LD_VAR 0 6
2107: PPUSH
2108: CALL_OW 52
// veh := PrepareTank ( 1 , 1 , us_light_wheeled , engine_solar , control_manual , us_machine_gun , 80 ) ;
2112: LD_ADDR_VAR 0 6
2116: PUSH
2117: LD_INT 1
2119: PPUSH
2120: LD_INT 1
2122: PPUSH
2123: LD_INT 1
2125: PPUSH
2126: LD_INT 2
2128: PPUSH
2129: LD_INT 1
2131: PPUSH
2132: LD_INT 2
2134: PPUSH
2135: LD_INT 80
2137: PPUSH
2138: CALL 449 0 7
2142: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
2143: LD_VAR 0 6
2147: PPUSH
2148: LD_INT 1
2150: PPUSH
2151: CALL_OW 233
// PlaceUnitXY ( veh , points [ 2 ] [ 1 ] , points [ 2 ] [ 2 ] , false ) ;
2155: LD_VAR 0 6
2159: PPUSH
2160: LD_VAR 0 3
2164: PUSH
2165: LD_INT 2
2167: ARRAY
2168: PUSH
2169: LD_INT 1
2171: ARRAY
2172: PPUSH
2173: LD_VAR 0 3
2177: PUSH
2178: LD_INT 2
2180: ARRAY
2181: PUSH
2182: LD_INT 2
2184: ARRAY
2185: PPUSH
2186: LD_INT 0
2188: PPUSH
2189: CALL_OW 48
// PlaceHumanInUnit ( Gladstone , veh ) ;
2193: LD_EXP 18
2197: PPUSH
2198: LD_VAR 0 6
2202: PPUSH
2203: CALL_OW 52
// veh := PrepareTank ( 1 , 1 , us_light_wheeled , engine_solar , control_manual , us_light_gun , 80 ) ;
2207: LD_ADDR_VAR 0 6
2211: PUSH
2212: LD_INT 1
2214: PPUSH
2215: LD_INT 1
2217: PPUSH
2218: LD_INT 1
2220: PPUSH
2221: LD_INT 2
2223: PPUSH
2224: LD_INT 1
2226: PPUSH
2227: LD_INT 3
2229: PPUSH
2230: LD_INT 80
2232: PPUSH
2233: CALL 449 0 7
2237: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
2238: LD_VAR 0 6
2242: PPUSH
2243: LD_INT 1
2245: PPUSH
2246: CALL_OW 233
// PlaceUnitXY ( veh , points [ 3 ] [ 1 ] , points [ 3 ] [ 2 ] , false ) ;
2250: LD_VAR 0 6
2254: PPUSH
2255: LD_VAR 0 3
2259: PUSH
2260: LD_INT 3
2262: ARRAY
2263: PUSH
2264: LD_INT 1
2266: ARRAY
2267: PPUSH
2268: LD_VAR 0 3
2272: PUSH
2273: LD_INT 3
2275: ARRAY
2276: PUSH
2277: LD_INT 2
2279: ARRAY
2280: PPUSH
2281: LD_INT 0
2283: PPUSH
2284: CALL_OW 48
// PlaceHumanInUnit ( JMM , veh ) ;
2288: LD_EXP 17
2292: PPUSH
2293: LD_VAR 0 6
2297: PPUSH
2298: CALL_OW 52
// tmp := tmp diff 0 ;
2302: LD_ADDR_VAR 0 7
2306: PUSH
2307: LD_VAR 0 7
2311: PUSH
2312: LD_INT 0
2314: DIFF
2315: ST_TO_ADDR
// xy := [ [ 45 , 56 ] , [ 47 , 73 ] , [ 37 , 45 ] , [ 52 , 60 ] , [ 48 , 51 ] ] ;
2316: LD_ADDR_VAR 0 5
2320: PUSH
2321: LD_INT 45
2323: PUSH
2324: LD_INT 56
2326: PUSH
2327: EMPTY
2328: LIST
2329: LIST
2330: PUSH
2331: LD_INT 47
2333: PUSH
2334: LD_INT 73
2336: PUSH
2337: EMPTY
2338: LIST
2339: LIST
2340: PUSH
2341: LD_INT 37
2343: PUSH
2344: LD_INT 45
2346: PUSH
2347: EMPTY
2348: LIST
2349: LIST
2350: PUSH
2351: LD_INT 52
2353: PUSH
2354: LD_INT 60
2356: PUSH
2357: EMPTY
2358: LIST
2359: LIST
2360: PUSH
2361: LD_INT 48
2363: PUSH
2364: LD_INT 51
2366: PUSH
2367: EMPTY
2368: LIST
2369: LIST
2370: PUSH
2371: EMPTY
2372: LIST
2373: LIST
2374: LIST
2375: LIST
2376: LIST
2377: ST_TO_ADDR
// p := 1 ;
2378: LD_ADDR_VAR 0 4
2382: PUSH
2383: LD_INT 1
2385: ST_TO_ADDR
// for i in tmp diff others [ 1 ] do
2386: LD_ADDR_VAR 0 2
2390: PUSH
2391: LD_VAR 0 7
2395: PUSH
2396: LD_EXP 28
2400: PUSH
2401: LD_INT 1
2403: ARRAY
2404: DIFF
2405: PUSH
2406: FOR_IN
2407: IFFALSE 2489
// begin repeat wait ( 1 ) ;
2409: LD_INT 1
2411: PPUSH
2412: CALL_OW 67
// until PlaceUnitArea ( i , startArea , false ) ;
2416: LD_VAR 0 2
2420: PPUSH
2421: LD_INT 5
2423: PPUSH
2424: LD_INT 0
2426: PPUSH
2427: CALL_OW 49
2431: IFFALSE 2409
// ComMoveXY ( i , xy [ p ] [ 1 ] , xy [ p ] [ 2 ] ) ;
2433: LD_VAR 0 2
2437: PPUSH
2438: LD_VAR 0 5
2442: PUSH
2443: LD_VAR 0 4
2447: ARRAY
2448: PUSH
2449: LD_INT 1
2451: ARRAY
2452: PPUSH
2453: LD_VAR 0 5
2457: PUSH
2458: LD_VAR 0 4
2462: ARRAY
2463: PUSH
2464: LD_INT 2
2466: ARRAY
2467: PPUSH
2468: CALL_OW 111
// p := Inc ( p ) ;
2472: LD_ADDR_VAR 0 4
2476: PUSH
2477: LD_VAR 0 4
2481: PPUSH
2482: CALL 70101 0 1
2486: ST_TO_ADDR
// end ;
2487: GO 2406
2489: POP
2490: POP
// end ; end_of_file
2491: LD_VAR 0 1
2495: RET
// export function Action ; var m ; begin
2496: LD_INT 0
2498: PPUSH
2499: PPUSH
// InGameOn ;
2500: CALL_OW 8
// CenterNowOnXY ( 28 , 51 ) ;
2504: LD_INT 28
2506: PPUSH
2507: LD_INT 51
2509: PPUSH
2510: CALL_OW 86
// Wait ( 0 0$2 ) ;
2514: LD_INT 70
2516: PPUSH
2517: CALL_OW 67
// Say ( JMM , D1d-JMM-1a ) ;
2521: LD_EXP 17
2525: PPUSH
2526: LD_STRING D1d-JMM-1a
2528: PPUSH
2529: CALL_OW 88
// SayRadio ( Harrison , D1d-Har-1 ) ;
2533: LD_EXP 19
2537: PPUSH
2538: LD_STRING D1d-Har-1
2540: PPUSH
2541: CALL_OW 94
// InGameOff ;
2545: CALL_OW 9
// SaveForQuickRestart ;
2549: CALL_OW 22
// ChangeMissionObjectives ( M1 ) ;
2553: LD_STRING M1
2555: PPUSH
2556: CALL_OW 337
// Wait ( 0 0$2 ) ;
2560: LD_INT 70
2562: PPUSH
2563: CALL_OW 67
// Say ( JMM , D2-JMM-1 ) ;
2567: LD_EXP 17
2571: PPUSH
2572: LD_STRING D2-JMM-1
2574: PPUSH
2575: CALL_OW 88
// Say ( Gladstone , D2-Glad-1 ) ;
2579: LD_EXP 18
2583: PPUSH
2584: LD_STRING D2-Glad-1
2586: PPUSH
2587: CALL_OW 88
// Say ( JMM , D2-JMM-2 ) ;
2591: LD_EXP 17
2595: PPUSH
2596: LD_STRING D2-JMM-2
2598: PPUSH
2599: CALL_OW 88
// Say ( Gladstone , D2-Glad-2 ) ;
2603: LD_EXP 18
2607: PPUSH
2608: LD_STRING D2-Glad-2
2610: PPUSH
2611: CALL_OW 88
// Say ( JMM , D2-JMM-3 ) ;
2615: LD_EXP 17
2619: PPUSH
2620: LD_STRING D2-JMM-3
2622: PPUSH
2623: CALL_OW 88
// Wait ( rand ( 0 0$30 , 1 1$00 ) ) ;
2627: LD_INT 1050
2629: PPUSH
2630: LD_INT 2100
2632: PPUSH
2633: CALL_OW 12
2637: PPUSH
2638: CALL_OW 67
// SetWeather ( 1 , 570 , 350 ) ;
2642: LD_INT 1
2644: PPUSH
2645: LD_INT 570
2647: PPUSH
2648: LD_INT 350
2650: PPUSH
2651: CALL_OW 550
// Wait ( rand ( 3 3$00 , 5 5$00 ) ) ;
2655: LD_INT 6300
2657: PPUSH
2658: LD_INT 10500
2660: PPUSH
2661: CALL_OW 12
2665: PPUSH
2666: CALL_OW 67
// SetWeather ( 0 , 570 , 350 ) ;
2670: LD_INT 0
2672: PPUSH
2673: LD_INT 570
2675: PPUSH
2676: LD_INT 350
2678: PPUSH
2679: CALL_OW 550
// end ;
2683: LD_VAR 0 1
2687: RET
// every 0 0$01 trigger FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_not , [ f_constructed ] ] , [ f_btype , b_depot ] ] ] ) and not deltaBuilded do
2688: LD_INT 22
2690: PUSH
2691: LD_INT 1
2693: PUSH
2694: EMPTY
2695: LIST
2696: LIST
2697: PUSH
2698: LD_INT 3
2700: PUSH
2701: LD_INT 57
2703: PUSH
2704: EMPTY
2705: LIST
2706: PUSH
2707: EMPTY
2708: LIST
2709: LIST
2710: PUSH
2711: LD_INT 30
2713: PUSH
2714: LD_INT 0
2716: PUSH
2717: EMPTY
2718: LIST
2719: LIST
2720: PUSH
2721: EMPTY
2722: LIST
2723: LIST
2724: LIST
2725: PUSH
2726: EMPTY
2727: LIST
2728: PPUSH
2729: CALL_OW 69
2733: IFFALSE 2742
2735: PUSH
2736: LD_EXP 4
2740: NOT
2741: AND
2742: IFFALSE 2755
2744: GO 2746
2746: DISABLE
// begin deltaBuilded := true ;
2747: LD_ADDR_EXP 4
2751: PUSH
2752: LD_INT 1
2754: ST_TO_ADDR
// end ;
2755: END
// every 0 0$01 trigger not Delta and deltaBuilded and FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_not , [ f_constructed ] ] , [ f_btype , b_depot ] ] ] ) do
2756: LD_EXP 6
2760: NOT
2761: IFFALSE 2769
2763: PUSH
2764: LD_EXP 4
2768: AND
2769: IFFALSE 2818
2771: PUSH
2772: LD_INT 22
2774: PUSH
2775: LD_INT 1
2777: PUSH
2778: EMPTY
2779: LIST
2780: LIST
2781: PUSH
2782: LD_INT 3
2784: PUSH
2785: LD_INT 57
2787: PUSH
2788: EMPTY
2789: LIST
2790: PUSH
2791: EMPTY
2792: LIST
2793: LIST
2794: PUSH
2795: LD_INT 30
2797: PUSH
2798: LD_INT 0
2800: PUSH
2801: EMPTY
2802: LIST
2803: LIST
2804: PUSH
2805: EMPTY
2806: LIST
2807: LIST
2808: LIST
2809: PUSH
2810: EMPTY
2811: LIST
2812: PPUSH
2813: CALL_OW 69
2817: AND
2818: IFFALSE 2904
2820: GO 2822
2822: DISABLE
// begin enable ;
2823: ENABLE
// SetRestrict ( b_depot , 1 , state_disabled ) ;
2824: LD_INT 0
2826: PPUSH
2827: LD_INT 1
2829: PPUSH
2830: LD_INT 0
2832: PPUSH
2833: CALL_OW 324
// Delta := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_not , [ f_constructed ] ] , [ f_btype , b_depot ] ] ] ) [ 1 ] ;
2837: LD_ADDR_EXP 6
2841: PUSH
2842: LD_INT 22
2844: PUSH
2845: LD_INT 1
2847: PUSH
2848: EMPTY
2849: LIST
2850: LIST
2851: PUSH
2852: LD_INT 3
2854: PUSH
2855: LD_INT 57
2857: PUSH
2858: EMPTY
2859: LIST
2860: PUSH
2861: EMPTY
2862: LIST
2863: LIST
2864: PUSH
2865: LD_INT 30
2867: PUSH
2868: LD_INT 0
2870: PUSH
2871: EMPTY
2872: LIST
2873: LIST
2874: PUSH
2875: EMPTY
2876: LIST
2877: LIST
2878: LIST
2879: PUSH
2880: EMPTY
2881: LIST
2882: PPUSH
2883: CALL_OW 69
2887: PUSH
2888: LD_INT 1
2890: ARRAY
2891: ST_TO_ADDR
// SetBName ( Delta , Delta ) ;
2892: LD_EXP 6
2896: PPUSH
2897: LD_STRING Delta
2899: PPUSH
2900: CALL_OW 500
// end ;
2904: END
// every 0 0$2 trigger GetTech ( tech_ApeLang , 1 ) = state_researched and IsOk ( Gladstone ) do
2905: LD_INT 1
2907: PPUSH
2908: LD_INT 1
2910: PPUSH
2911: CALL_OW 321
2915: PUSH
2916: LD_INT 2
2918: EQUAL
2919: IFFALSE 2932
2921: PUSH
2922: LD_EXP 18
2926: PPUSH
2927: CALL_OW 302
2931: AND
2932: IFFALSE 2993
2934: GO 2936
2936: DISABLE
// begin DialogueOn ;
2937: CALL_OW 6
// Say ( Gladstone , D3-Glad-1 ) ;
2941: LD_EXP 18
2945: PPUSH
2946: LD_STRING D3-Glad-1
2948: PPUSH
2949: CALL_OW 88
// Say ( JMM , D3-JMM-1 ) ;
2953: LD_EXP 17
2957: PPUSH
2958: LD_STRING D3-JMM-1
2960: PPUSH
2961: CALL_OW 88
// Say ( Gladstone , D3-Glad-2 ) ;
2965: LD_EXP 18
2969: PPUSH
2970: LD_STRING D3-Glad-2
2972: PPUSH
2973: CALL_OW 88
// Say ( JMM , D3-JMM-2 ) ;
2977: LD_EXP 17
2981: PPUSH
2982: LD_STRING D3-JMM-2
2984: PPUSH
2985: CALL_OW 88
// DialogueOff ;
2989: CALL_OW 7
// end ;
2993: END
// every 0 0$1 trigger GetTech ( tech_ApePsych , 1 ) = state_researched and ( IsOk ( Frank ) or ( IsOk ( Denis ) and GetSide ( Denis ) = 1 ) or UnitFilter ( others , [ f_sex , sex_male ] ) ) do var i , sol , ape , b ;
2994: LD_INT 2
2996: PPUSH
2997: LD_INT 1
2999: PPUSH
3000: CALL_OW 321
3004: PUSH
3005: LD_INT 2
3007: EQUAL
3008: IFFALSE 3074
3010: PUSH
3011: LD_EXP 24
3015: PPUSH
3016: CALL_OW 302
3020: IFTRUE 3050
3022: PUSH
3023: LD_EXP 20
3027: PPUSH
3028: CALL_OW 302
3032: IFFALSE 3049
3034: PUSH
3035: LD_EXP 20
3039: PPUSH
3040: CALL_OW 255
3044: PUSH
3045: LD_INT 1
3047: EQUAL
3048: AND
3049: OR
3050: IFTRUE 3073
3052: PUSH
3053: LD_EXP 28
3057: PPUSH
3058: LD_INT 26
3060: PUSH
3061: LD_INT 1
3063: PUSH
3064: EMPTY
3065: LIST
3066: LIST
3067: PPUSH
3068: CALL_OW 72
3072: OR
3073: AND
3074: IFFALSE 3621
3076: GO 3078
3078: DISABLE
3079: LD_INT 0
3081: PPUSH
3082: PPUSH
3083: PPUSH
3084: PPUSH
// begin InGameOn ;
3085: CALL_OW 8
// DialogueOn ;
3089: CALL_OW 6
// if Frank then
3093: LD_EXP 24
3097: IFFALSE 3111
// Say ( Frank , D8a-Frank-1 ) ;
3099: LD_EXP 24
3103: PPUSH
3104: LD_STRING D8a-Frank-1
3106: PPUSH
3107: CALL_OW 88
// sol := SayX ( UnitFilter ( others , [ f_sex , sex_male ] ) , D8a-Sol1-1 ) ;
3111: LD_ADDR_VAR 0 2
3115: PUSH
3116: LD_EXP 28
3120: PPUSH
3121: LD_INT 26
3123: PUSH
3124: LD_INT 1
3126: PUSH
3127: EMPTY
3128: LIST
3129: LIST
3130: PPUSH
3131: CALL_OW 72
3135: PPUSH
3136: LD_STRING D8a-Sol1-1
3138: PPUSH
3139: CALL 724 0 2
3143: ST_TO_ADDR
// if Denis and GetSide ( Denis ) = 1 then
3144: LD_EXP 20
3148: IFFALSE 3165
3150: PUSH
3151: LD_EXP 20
3155: PPUSH
3156: CALL_OW 255
3160: PUSH
3161: LD_INT 1
3163: EQUAL
3164: AND
3165: IFFALSE 3179
// Say ( Denis , D8a-Den-1 ) ;
3167: LD_EXP 20
3171: PPUSH
3172: LD_STRING D8a-Den-1
3174: PPUSH
3175: CALL_OW 88
// if sol or Denis or Frank then
3179: LD_VAR 0 2
3183: IFTRUE 3191
3185: PUSH
3186: LD_EXP 20
3190: OR
3191: IFTRUE 3199
3193: PUSH
3194: LD_EXP 24
3198: OR
3199: IFFALSE 3260
// begin SayX ( UnitFilter ( others , [ [ f_class , 4 ] , [ f_sex , sex_male ] ] ) diff sol , D8a-Sci1-1 ) ;
3201: LD_EXP 28
3205: PPUSH
3206: LD_INT 25
3208: PUSH
3209: LD_INT 4
3211: PUSH
3212: EMPTY
3213: LIST
3214: LIST
3215: PUSH
3216: LD_INT 26
3218: PUSH
3219: LD_INT 1
3221: PUSH
3222: EMPTY
3223: LIST
3224: LIST
3225: PUSH
3226: EMPTY
3227: LIST
3228: LIST
3229: PPUSH
3230: CALL_OW 72
3234: PUSH
3235: LD_VAR 0 2
3239: DIFF
3240: PPUSH
3241: LD_STRING D8a-Sci1-1
3243: PPUSH
3244: CALL 724 0 2
// Say ( JMM , D8a-JMM-1 ) ;
3248: LD_EXP 17
3252: PPUSH
3253: LD_STRING D8a-JMM-1
3255: PPUSH
3256: CALL_OW 88
// end ; ape := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_apeman ] , [ f_inside ] ] ) ;
3260: LD_ADDR_VAR 0 3
3264: PUSH
3265: LD_INT 22
3267: PUSH
3268: LD_INT 1
3270: PUSH
3271: EMPTY
3272: LIST
3273: LIST
3274: PUSH
3275: LD_INT 25
3277: PUSH
3278: LD_INT 12
3280: PUSH
3281: EMPTY
3282: LIST
3283: LIST
3284: PUSH
3285: LD_INT 54
3287: PUSH
3288: EMPTY
3289: LIST
3290: PUSH
3291: EMPTY
3292: LIST
3293: LIST
3294: LIST
3295: PPUSH
3296: CALL_OW 69
3300: ST_TO_ADDR
// b := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) [ 1 ] ;
3301: LD_ADDR_VAR 0 4
3305: PUSH
3306: LD_INT 22
3308: PUSH
3309: LD_INT 1
3311: PUSH
3312: EMPTY
3313: LIST
3314: LIST
3315: PUSH
3316: LD_INT 2
3318: PUSH
3319: LD_INT 30
3321: PUSH
3322: LD_INT 6
3324: PUSH
3325: EMPTY
3326: LIST
3327: LIST
3328: PUSH
3329: LD_INT 30
3331: PUSH
3332: LD_INT 7
3334: PUSH
3335: EMPTY
3336: LIST
3337: LIST
3338: PUSH
3339: LD_INT 30
3341: PUSH
3342: LD_INT 8
3344: PUSH
3345: EMPTY
3346: LIST
3347: LIST
3348: PUSH
3349: EMPTY
3350: LIST
3351: LIST
3352: LIST
3353: LIST
3354: PUSH
3355: EMPTY
3356: LIST
3357: LIST
3358: PPUSH
3359: CALL_OW 69
3363: PUSH
3364: LD_INT 1
3366: ARRAY
3367: ST_TO_ADDR
// for i in ape do
3368: LD_ADDR_VAR 0 1
3372: PUSH
3373: LD_VAR 0 3
3377: PUSH
3378: FOR_IN
3379: IFFALSE 3412
// if i in UnitsInside ( b ) then
3381: LD_VAR 0 1
3385: PUSH
3386: LD_VAR 0 4
3390: PPUSH
3391: CALL_OW 313
3395: IN
3396: IFFALSE 3410
// begin ape := i ;
3398: LD_ADDR_VAR 0 3
3402: PUSH
3403: LD_VAR 0 1
3407: ST_TO_ADDR
// break ;
3408: GO 3412
// end ;
3410: GO 3378
3412: POP
3413: POP
// if not ape then
3414: LD_VAR 0 3
3418: NOT
3419: IFFALSE 3431
// begin DialogueOff ;
3421: CALL_OW 7
// InGameOff ;
3425: CALL_OW 9
// exit ;
3429: GO 3621
// end ; RemoveUnit ( ape ) ;
3431: LD_VAR 0 3
3435: PPUSH
3436: CALL_OW 64
// PrepareApeman ( 0 ) ;
3440: LD_INT 0
3442: PPUSH
3443: CALL 64855 0 1
// uc_side := 1 ;
3447: LD_ADDR_OWVAR 20
3451: PUSH
3452: LD_INT 1
3454: ST_TO_ADDR
// hc_name := Mike  ;
3455: LD_ADDR_OWVAR 26
3459: PUSH
3460: LD_STRING Mike 
3462: ST_TO_ADDR
// hc_gallery := us ;
3463: LD_ADDR_OWVAR 33
3467: PUSH
3468: LD_STRING us
3470: ST_TO_ADDR
// hc_face_number := 30 ;
3471: LD_ADDR_OWVAR 34
3475: PUSH
3476: LD_INT 30
3478: ST_TO_ADDR
// hc_attr := [ GetAttr ( ape , attr_stamina ) , GetAttr ( ape , attr_speed ) ] ;
3479: LD_ADDR_OWVAR 29
3483: PUSH
3484: LD_VAR 0 3
3488: PPUSH
3489: LD_INT 1
3491: PPUSH
3492: CALL_OW 260
3496: PUSH
3497: LD_VAR 0 3
3501: PPUSH
3502: LD_INT 2
3504: PPUSH
3505: CALL_OW 260
3509: PUSH
3510: EMPTY
3511: LIST
3512: LIST
3513: ST_TO_ADDR
// hc_skills := [ GetSkill ( ape , 1 ) , GetSkill ( ape , 2 ) , GetSkill ( ape , 3 ) , GetSkill ( ape , 4 ) ] ;
3514: LD_ADDR_OWVAR 31
3518: PUSH
3519: LD_VAR 0 3
3523: PPUSH
3524: LD_INT 1
3526: PPUSH
3527: CALL_OW 259
3531: PUSH
3532: LD_VAR 0 3
3536: PPUSH
3537: LD_INT 2
3539: PPUSH
3540: CALL_OW 259
3544: PUSH
3545: LD_VAR 0 3
3549: PPUSH
3550: LD_INT 3
3552: PPUSH
3553: CALL_OW 259
3557: PUSH
3558: LD_VAR 0 3
3562: PPUSH
3563: LD_INT 4
3565: PPUSH
3566: CALL_OW 259
3570: PUSH
3571: EMPTY
3572: LIST
3573: LIST
3574: LIST
3575: LIST
3576: ST_TO_ADDR
// hc_sex := sex_male ;
3577: LD_ADDR_OWVAR 27
3581: PUSH
3582: LD_INT 1
3584: ST_TO_ADDR
// Mike := CreateHuman ;
3585: LD_ADDR_EXP 27
3589: PUSH
3590: CALL_OW 44
3594: ST_TO_ADDR
// PlaceHumanInUnit ( Mike , b ) ;
3595: LD_EXP 27
3599: PPUSH
3600: LD_VAR 0 4
3604: PPUSH
3605: CALL_OW 52
// InitHc_All ( ) ;
3609: CALL_OW 584
// DialogueOff ;
3613: CALL_OW 7
// InGameOff ;
3617: CALL_OW 9
// end ;
3621: PPOPN 4
3623: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_apeman_engineer ] ] ) do
3624: LD_INT 22
3626: PUSH
3627: LD_INT 1
3629: PUSH
3630: EMPTY
3631: LIST
3632: LIST
3633: PUSH
3634: LD_INT 25
3636: PUSH
3637: LD_INT 16
3639: PUSH
3640: EMPTY
3641: LIST
3642: LIST
3643: PUSH
3644: EMPTY
3645: LIST
3646: LIST
3647: PPUSH
3648: CALL_OW 69
3652: IFFALSE 3711
3654: GO 3656
3656: DISABLE
// begin ChangeMissionObjectives ( M1a ) ;
3657: LD_STRING M1a
3659: PPUSH
3660: CALL_OW 337
// case Query ( Q2 ) of 1 :
3664: LD_STRING Q2
3666: PPUSH
3667: CALL_OW 97
3671: PUSH
3672: LD_INT 1
3674: DOUBLE
3675: EQUAL
3676: IFTRUE 3680
3678: GO 3691
3680: POP
// end_mission := true ; 2 :
3681: LD_ADDR_EXP 14
3685: PUSH
3686: LD_INT 1
3688: ST_TO_ADDR
3689: GO 3711
3691: LD_INT 2
3693: DOUBLE
3694: EQUAL
3695: IFTRUE 3699
3697: GO 3710
3699: POP
// end_the_mission_allowed := true ; end ;
3700: LD_ADDR_OWVAR 57
3704: PUSH
3705: LD_INT 1
3707: ST_TO_ADDR
3708: GO 3711
3710: POP
// end ;
3711: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) and Delta do
3712: LD_INT 22
3714: PUSH
3715: LD_INT 1
3717: PUSH
3718: EMPTY
3719: LIST
3720: LIST
3721: PUSH
3722: LD_INT 2
3724: PUSH
3725: LD_INT 30
3727: PUSH
3728: LD_INT 6
3730: PUSH
3731: EMPTY
3732: LIST
3733: LIST
3734: PUSH
3735: LD_INT 30
3737: PUSH
3738: LD_INT 7
3740: PUSH
3741: EMPTY
3742: LIST
3743: LIST
3744: PUSH
3745: EMPTY
3746: LIST
3747: LIST
3748: LIST
3749: PUSH
3750: EMPTY
3751: LIST
3752: LIST
3753: PPUSH
3754: CALL_OW 69
3758: IFFALSE 3808
3760: PUSH
3761: LD_INT 22
3763: PUSH
3764: LD_INT 1
3766: PUSH
3767: EMPTY
3768: LIST
3769: LIST
3770: PUSH
3771: LD_INT 2
3773: PUSH
3774: LD_INT 30
3776: PUSH
3777: LD_INT 2
3779: PUSH
3780: EMPTY
3781: LIST
3782: LIST
3783: PUSH
3784: LD_INT 30
3786: PUSH
3787: LD_INT 3
3789: PUSH
3790: EMPTY
3791: LIST
3792: LIST
3793: PUSH
3794: EMPTY
3795: LIST
3796: LIST
3797: LIST
3798: PUSH
3799: EMPTY
3800: LIST
3801: LIST
3802: PPUSH
3803: CALL_OW 69
3807: AND
3808: IFFALSE 3816
3810: PUSH
3811: LD_EXP 6
3815: AND
3816: IFFALSE 4335
3818: GO 3820
3820: DISABLE
// begin Wait ( rand ( 0 0$30 , 0 0$50 ) ) ;
3821: LD_INT 1050
3823: PPUSH
3824: LD_INT 1750
3826: PPUSH
3827: CALL_OW 12
3831: PPUSH
3832: CALL_OW 67
// PlaceUnitArea ( Denis , [ denisArea1 , denisArea2 , denisArea3 , denisArea4 ] [ Difficulty ] , false ) ;
3836: LD_EXP 20
3840: PPUSH
3841: LD_INT 6
3843: PUSH
3844: LD_INT 9
3846: PUSH
3847: LD_INT 10
3849: PUSH
3850: LD_INT 16
3852: PUSH
3853: EMPTY
3854: LIST
3855: LIST
3856: LIST
3857: LIST
3858: PUSH
3859: LD_OWVAR 67
3863: ARRAY
3864: PPUSH
3865: LD_INT 0
3867: PPUSH
3868: CALL_OW 49
// ComHold ( Denis ) ;
3872: LD_EXP 20
3876: PPUSH
3877: CALL_OW 140
// InGameOn ;
3881: CALL_OW 8
// DialogueOn ;
3885: CALL_OW 6
// if Delta then
3889: LD_EXP 6
3893: IFFALSE 3906
// CenterNowOnUnits ( Delta ) else
3895: LD_EXP 6
3899: PPUSH
3900: CALL_OW 87
3904: GO 3915
// CenterNowOnUnits ( JMM ) ;
3906: LD_EXP 17
3910: PPUSH
3911: CALL_OW 87
// SayRadioNoFaceNoName ( Denis , DD-Den-1 ) ;
3915: LD_EXP 20
3919: PPUSH
3920: LD_STRING DD-Den-1
3922: PPUSH
3923: CALL 72973 0 2
// Say ( JMM , DD-JMM-1 ) ;
3927: LD_EXP 17
3931: PPUSH
3932: LD_STRING DD-JMM-1
3934: PPUSH
3935: CALL_OW 88
// SayRadioNoFaceNoName ( Denis , DD-Den-2 ) ;
3939: LD_EXP 20
3943: PPUSH
3944: LD_STRING DD-Den-2
3946: PPUSH
3947: CALL 72973 0 2
// Wait ( 3 ) ;
3951: LD_INT 3
3953: PPUSH
3954: CALL_OW 67
// DialogueOff ;
3958: CALL_OW 7
// InGameOff ;
3962: CALL_OW 9
// if Difficulty = 1 then
3966: LD_OWVAR 67
3970: PUSH
3971: LD_INT 1
3973: EQUAL
3974: IFFALSE 4050
// begin PlaceSeeing ( GetX ( Denis ) , GetY ( Denis ) , 1 , - 12 ) ;
3976: LD_EXP 20
3980: PPUSH
3981: CALL_OW 250
3985: PPUSH
3986: LD_EXP 20
3990: PPUSH
3991: CALL_OW 251
3995: PPUSH
3996: LD_INT 1
3998: PPUSH
3999: LD_INT 12
4001: NEG
4002: PPUSH
4003: CALL_OW 330
// CenterNowOnUnits ( Denis ) ;
4007: LD_EXP 20
4011: PPUSH
4012: CALL_OW 87
// wait ( 0 0$5 ) ;
4016: LD_INT 175
4018: PPUSH
4019: CALL_OW 67
// RemoveSeeing ( GetX ( Denis ) , GetY ( Denis ) , 1 ) ;
4023: LD_EXP 20
4027: PPUSH
4028: CALL_OW 250
4032: PPUSH
4033: LD_EXP 20
4037: PPUSH
4038: CALL_OW 251
4042: PPUSH
4043: LD_INT 1
4045: PPUSH
4046: CALL_OW 331
// end ; repeat wait ( 0 0$01 ) ;
4050: LD_INT 35
4052: PPUSH
4053: CALL_OW 67
// until See ( 1 , Denis ) or IsDead ( Denis ) ;
4057: LD_INT 1
4059: PPUSH
4060: LD_EXP 20
4064: PPUSH
4065: CALL_OW 292
4069: IFTRUE 4082
4071: PUSH
4072: LD_EXP 20
4076: PPUSH
4077: CALL_OW 301
4081: OR
4082: IFFALSE 4050
// if IsDead ( Denis ) then
4084: LD_EXP 20
4088: PPUSH
4089: CALL_OW 301
4093: IFFALSE 4097
// exit ;
4095: GO 4335
// SetSide ( Denis , 1 ) ;
4097: LD_EXP 20
4101: PPUSH
4102: LD_INT 1
4104: PPUSH
4105: CALL_OW 235
// Say ( Denis , DD-Den-2a ) ;
4109: LD_EXP 20
4113: PPUSH
4114: LD_STRING DD-Den-2a
4116: PPUSH
4117: CALL_OW 88
// repeat wait ( 0 0$01 ) ;
4121: LD_INT 35
4123: PPUSH
4124: CALL_OW 67
// until GetBType ( IsInUnit ( Denis ) ) in [ b_lab , b_lab_half , b_lab_full ] or IsDead ( Denis ) ;
4128: LD_EXP 20
4132: PPUSH
4133: CALL_OW 310
4137: PPUSH
4138: CALL_OW 266
4142: PUSH
4143: LD_INT 6
4145: PUSH
4146: LD_INT 7
4148: PUSH
4149: LD_INT 8
4151: PUSH
4152: EMPTY
4153: LIST
4154: LIST
4155: LIST
4156: IN
4157: IFTRUE 4170
4159: PUSH
4160: LD_EXP 20
4164: PPUSH
4165: CALL_OW 301
4169: OR
4170: IFFALSE 4121
// if IsDead ( Denis ) then
4172: LD_EXP 20
4176: PPUSH
4177: CALL_OW 301
4181: IFFALSE 4185
// exit ;
4183: GO 4335
// Say ( Denis , DD-Den-2b ) ;
4185: LD_EXP 20
4189: PPUSH
4190: LD_STRING DD-Den-2b
4192: PPUSH
4193: CALL_OW 88
// ComChangeProfession ( Denis , 4 ) ;
4197: LD_EXP 20
4201: PPUSH
4202: LD_INT 4
4204: PPUSH
4205: CALL_OW 123
// Wait ( 0 0$02 ) ;
4209: LD_INT 70
4211: PPUSH
4212: CALL_OW 67
// DialogueOn ;
4216: CALL_OW 6
// CenterNowOnUnits ( Denis ) ;
4220: LD_EXP 20
4224: PPUSH
4225: CALL_OW 87
// Say ( JMM , D4-JMM-1 ) ;
4229: LD_EXP 17
4233: PPUSH
4234: LD_STRING D4-JMM-1
4236: PPUSH
4237: CALL_OW 88
// Say ( Denis , D4-Den-1 ) ;
4241: LD_EXP 20
4245: PPUSH
4246: LD_STRING D4-Den-1
4248: PPUSH
4249: CALL_OW 88
// Say ( JMM , D4-JMM-2 ) ;
4253: LD_EXP 17
4257: PPUSH
4258: LD_STRING D4-JMM-2
4260: PPUSH
4261: CALL_OW 88
// Say ( Denis , D4-Den-2 ) ;
4265: LD_EXP 20
4269: PPUSH
4270: LD_STRING D4-Den-2
4272: PPUSH
4273: CALL_OW 88
// DialogueOff ;
4277: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
4281: LD_STRING M2
4283: PPUSH
4284: CALL_OW 337
// radar_allowed := true ;
4288: LD_ADDR_EXP 7
4292: PUSH
4293: LD_INT 1
4295: ST_TO_ADDR
// SetTech ( tech_radar , 1 , state_enabled ) ;
4296: LD_INT 6
4298: PPUSH
4299: LD_INT 1
4301: PPUSH
4302: LD_INT 1
4304: PPUSH
4305: CALL_OW 322
// SetRestrict ( b_lab_opto , 1 , state_enabled ) ;
4309: LD_INT 15
4311: PPUSH
4312: LD_INT 1
4314: PPUSH
4315: LD_INT 1
4317: PPUSH
4318: CALL_OW 324
// SetRestrict ( b_ext_radar , 1 , state_enabled ) ;
4322: LD_INT 20
4324: PPUSH
4325: LD_INT 1
4327: PPUSH
4328: LD_INT 1
4330: PPUSH
4331: CALL_OW 324
// end ;
4335: END
// every 0 0$1 trigger arab_spotted do var sol , sol2 ;
4336: LD_EXP 13
4340: IFFALSE 4965
4342: GO 4344
4344: DISABLE
4345: LD_INT 0
4347: PPUSH
4348: PPUSH
// begin sol := SayX ( UnitFilter ( others , [ f_sex , sex_male ] ) , D5-Sol1-1 ) ;
4349: LD_ADDR_VAR 0 1
4353: PUSH
4354: LD_EXP 28
4358: PPUSH
4359: LD_INT 26
4361: PUSH
4362: LD_INT 1
4364: PUSH
4365: EMPTY
4366: LIST
4367: LIST
4368: PPUSH
4369: CALL_OW 72
4373: PPUSH
4374: LD_STRING D5-Sol1-1
4376: PPUSH
4377: CALL 724 0 2
4381: ST_TO_ADDR
// if not sol then
4382: LD_VAR 0 1
4386: NOT
4387: IFFALSE 4391
// exit ;
4389: GO 4965
// repeat wait ( 0 0$01 ) ;
4391: LD_INT 35
4393: PPUSH
4394: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) = 0 ;
4398: LD_INT 22
4400: PUSH
4401: LD_INT 2
4403: PUSH
4404: EMPTY
4405: LIST
4406: LIST
4407: PUSH
4408: LD_INT 21
4410: PUSH
4411: LD_INT 1
4413: PUSH
4414: EMPTY
4415: LIST
4416: LIST
4417: PUSH
4418: EMPTY
4419: LIST
4420: LIST
4421: PPUSH
4422: CALL_OW 69
4426: PUSH
4427: LD_INT 0
4429: EQUAL
4430: IFFALSE 4391
// if IsOk ( sol ) then
4432: LD_VAR 0 1
4436: PPUSH
4437: CALL_OW 302
4441: IFFALSE 4461
// begin sol2 := others diff sol ;
4443: LD_ADDR_VAR 0 2
4447: PUSH
4448: LD_EXP 28
4452: PUSH
4453: LD_VAR 0 1
4457: DIFF
4458: ST_TO_ADDR
// end else
4459: GO 4463
// exit ;
4461: GO 4965
// if not Lisa and not sol2 then
4463: LD_EXP 23
4467: NOT
4468: IFFALSE 4477
4470: PUSH
4471: LD_VAR 0 2
4475: NOT
4476: AND
4477: IFFALSE 4481
// exit ;
4479: GO 4965
// DialogueOn ;
4481: CALL_OW 6
// if Lisa then
4485: LD_EXP 23
4489: IFFALSE 4505
// Say ( Lisa , D5a-Lisa-1 ) else
4491: LD_EXP 23
4495: PPUSH
4496: LD_STRING D5a-Lisa-1
4498: PPUSH
4499: CALL_OW 88
4503: GO 4580
// if sol2 then
4505: LD_VAR 0 2
4509: IFFALSE 4580
// case GetSex ( sol2 [ 1 ] ) of sex_male :
4511: LD_VAR 0 2
4515: PUSH
4516: LD_INT 1
4518: ARRAY
4519: PPUSH
4520: CALL_OW 258
4524: PUSH
4525: LD_INT 1
4527: DOUBLE
4528: EQUAL
4529: IFTRUE 4533
4531: GO 4552
4533: POP
// Say ( sol2 [ 1 ] , D5-Sol2-1 ) ; sex_female :
4534: LD_VAR 0 2
4538: PUSH
4539: LD_INT 1
4541: ARRAY
4542: PPUSH
4543: LD_STRING D5-Sol2-1
4545: PPUSH
4546: CALL_OW 88
4550: GO 4580
4552: LD_INT 2
4554: DOUBLE
4555: EQUAL
4556: IFTRUE 4560
4558: GO 4579
4560: POP
// Say ( sol2 [ 1 ] , D5-FSol2-1 ) ; end ;
4561: LD_VAR 0 2
4565: PUSH
4566: LD_INT 1
4568: ARRAY
4569: PPUSH
4570: LD_STRING D5-FSol2-1
4572: PPUSH
4573: CALL_OW 88
4577: GO 4580
4579: POP
// Say ( sol , D5-Sol1-2 ) ;
4580: LD_VAR 0 1
4584: PPUSH
4585: LD_STRING D5-Sol1-2
4587: PPUSH
4588: CALL_OW 88
// if Lisa then
4592: LD_EXP 23
4596: IFFALSE 4612
// Say ( Lisa , D5a-Lisa-2 ) else
4598: LD_EXP 23
4602: PPUSH
4603: LD_STRING D5a-Lisa-2
4605: PPUSH
4606: CALL_OW 88
4610: GO 4687
// if sol2 then
4612: LD_VAR 0 2
4616: IFFALSE 4687
// case GetSex ( sol2 [ 1 ] ) of sex_male :
4618: LD_VAR 0 2
4622: PUSH
4623: LD_INT 1
4625: ARRAY
4626: PPUSH
4627: CALL_OW 258
4631: PUSH
4632: LD_INT 1
4634: DOUBLE
4635: EQUAL
4636: IFTRUE 4640
4638: GO 4659
4640: POP
// Say ( sol2 [ 1 ] , D5-Sol2-2 ) ; sex_female :
4641: LD_VAR 0 2
4645: PUSH
4646: LD_INT 1
4648: ARRAY
4649: PPUSH
4650: LD_STRING D5-Sol2-2
4652: PPUSH
4653: CALL_OW 88
4657: GO 4687
4659: LD_INT 2
4661: DOUBLE
4662: EQUAL
4663: IFTRUE 4667
4665: GO 4686
4667: POP
// Say ( sol2 [ 1 ] , D5-FSol2-2 ) ; end ;
4668: LD_VAR 0 2
4672: PUSH
4673: LD_INT 1
4675: ARRAY
4676: PPUSH
4677: LD_STRING D5-FSol2-2
4679: PPUSH
4680: CALL_OW 88
4684: GO 4687
4686: POP
// Say ( sol , D5a-Sol1-3 ) ;
4687: LD_VAR 0 1
4691: PPUSH
4692: LD_STRING D5a-Sol1-3
4694: PPUSH
4695: CALL_OW 88
// if Lisa then
4699: LD_EXP 23
4703: IFFALSE 4717
// Say ( Lisa , D5a-Lisa-3 ) ;
4705: LD_EXP 23
4709: PPUSH
4710: LD_STRING D5a-Lisa-3
4712: PPUSH
4713: CALL_OW 88
// if not sol2 then
4717: LD_VAR 0 2
4721: NOT
4722: IFFALSE 4730
// begin DialogueOff ;
4724: CALL_OW 7
// exit ;
4728: GO 4965
// end ; case GetSex ( sol2 [ 1 ] ) of sex_male :
4730: LD_VAR 0 2
4734: PUSH
4735: LD_INT 1
4737: ARRAY
4738: PPUSH
4739: CALL_OW 258
4743: PUSH
4744: LD_INT 1
4746: DOUBLE
4747: EQUAL
4748: IFTRUE 4752
4750: GO 4771
4752: POP
// Say ( sol2 [ 1 ] , D5-Sol2-3 ) ; sex_female :
4753: LD_VAR 0 2
4757: PUSH
4758: LD_INT 1
4760: ARRAY
4761: PPUSH
4762: LD_STRING D5-Sol2-3
4764: PPUSH
4765: CALL_OW 88
4769: GO 4799
4771: LD_INT 2
4773: DOUBLE
4774: EQUAL
4775: IFTRUE 4779
4777: GO 4798
4779: POP
// Say ( sol2 [ 1 ] , D5-FSol2-3 ) ; end ;
4780: LD_VAR 0 2
4784: PUSH
4785: LD_INT 1
4787: ARRAY
4788: PPUSH
4789: LD_STRING D5-FSol2-3
4791: PPUSH
4792: CALL_OW 88
4796: GO 4799
4798: POP
// Say ( sol , D5-Sol1-4 ) ;
4799: LD_VAR 0 1
4803: PPUSH
4804: LD_STRING D5-Sol1-4
4806: PPUSH
4807: CALL_OW 88
// case GetSex ( sol2 [ 1 ] ) of sex_male :
4811: LD_VAR 0 2
4815: PUSH
4816: LD_INT 1
4818: ARRAY
4819: PPUSH
4820: CALL_OW 258
4824: PUSH
4825: LD_INT 1
4827: DOUBLE
4828: EQUAL
4829: IFTRUE 4833
4831: GO 4852
4833: POP
// Say ( sol2 [ 1 ] , D5-Sol2-4 ) ; sex_female :
4834: LD_VAR 0 2
4838: PUSH
4839: LD_INT 1
4841: ARRAY
4842: PPUSH
4843: LD_STRING D5-Sol2-4
4845: PPUSH
4846: CALL_OW 88
4850: GO 4880
4852: LD_INT 2
4854: DOUBLE
4855: EQUAL
4856: IFTRUE 4860
4858: GO 4879
4860: POP
// Say ( sol2 [ 1 ] , D5-FSol2-4 ) ; end ;
4861: LD_VAR 0 2
4865: PUSH
4866: LD_INT 1
4868: ARRAY
4869: PPUSH
4870: LD_STRING D5-FSol2-4
4872: PPUSH
4873: CALL_OW 88
4877: GO 4880
4879: POP
// Say ( sol , D5-Sol1-5 ) ;
4880: LD_VAR 0 1
4884: PPUSH
4885: LD_STRING D5-Sol1-5
4887: PPUSH
4888: CALL_OW 88
// case GetSex ( sol2 [ 1 ] ) of sex_male :
4892: LD_VAR 0 2
4896: PUSH
4897: LD_INT 1
4899: ARRAY
4900: PPUSH
4901: CALL_OW 258
4905: PUSH
4906: LD_INT 1
4908: DOUBLE
4909: EQUAL
4910: IFTRUE 4914
4912: GO 4933
4914: POP
// Say ( sol2 [ 1 ] , D5-Sol2-5 ) ; sex_female :
4915: LD_VAR 0 2
4919: PUSH
4920: LD_INT 1
4922: ARRAY
4923: PPUSH
4924: LD_STRING D5-Sol2-5
4926: PPUSH
4927: CALL_OW 88
4931: GO 4961
4933: LD_INT 2
4935: DOUBLE
4936: EQUAL
4937: IFTRUE 4941
4939: GO 4960
4941: POP
// Say ( sol2 [ 1 ] , D5-FSol2-5 ) ; end ;
4942: LD_VAR 0 2
4946: PUSH
4947: LD_INT 1
4949: ARRAY
4950: PPUSH
4951: LD_STRING D5-FSol2-5
4953: PPUSH
4954: CALL_OW 88
4958: GO 4961
4960: POP
// DialogueOff ;
4961: CALL_OW 7
// end ;
4965: PPOPN 2
4967: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_apeman_engineer ] ] ) >= 5 do
4968: LD_INT 22
4970: PUSH
4971: LD_INT 1
4973: PUSH
4974: EMPTY
4975: LIST
4976: LIST
4977: PUSH
4978: LD_INT 25
4980: PUSH
4981: LD_INT 16
4983: PUSH
4984: EMPTY
4985: LIST
4986: LIST
4987: PUSH
4988: EMPTY
4989: LIST
4990: LIST
4991: PPUSH
4992: CALL_OW 69
4996: PUSH
4997: LD_INT 5
4999: GREATEREQUAL
5000: IFFALSE 5020
5002: GO 5004
5004: DISABLE
// begin ChangeMissionObjectives ( M1b ) ;
5005: LD_STRING M1b
5007: PPUSH
5008: CALL_OW 337
// apeman_army := true ;
5012: LD_ADDR_EXP 9
5016: PUSH
5017: LD_INT 1
5019: ST_TO_ADDR
// end ;
5020: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] , [ f_constructed ] ] ) do
5021: LD_INT 22
5023: PUSH
5024: LD_INT 1
5026: PUSH
5027: EMPTY
5028: LIST
5029: LIST
5030: PUSH
5031: LD_INT 30
5033: PUSH
5034: LD_INT 3
5036: PUSH
5037: EMPTY
5038: LIST
5039: LIST
5040: PUSH
5041: LD_INT 57
5043: PUSH
5044: EMPTY
5045: LIST
5046: PUSH
5047: EMPTY
5048: LIST
5049: LIST
5050: LIST
5051: PPUSH
5052: CALL_OW 69
5056: IFFALSE 5068
5058: GO 5060
5060: DISABLE
// ChangeMissionObjectives ( M1c ) ;
5061: LD_STRING M1c
5063: PPUSH
5064: CALL_OW 337
5068: END
// every 0 0$1 trigger GetTech ( tech_radar , 1 ) = state_researched do
5069: LD_INT 6
5071: PPUSH
5072: LD_INT 1
5074: PPUSH
5075: CALL_OW 321
5079: PUSH
5080: LD_INT 2
5082: EQUAL
5083: IFFALSE 5103
5085: GO 5087
5087: DISABLE
// begin ChangeMissionObjectives ( M2a ) ;
5088: LD_STRING M2a
5090: PPUSH
5091: CALL_OW 337
// radar_researched := true ;
5095: LD_ADDR_EXP 10
5099: PUSH
5100: LD_INT 1
5102: ST_TO_ADDR
// end ;
5103: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_weapon , us_radar ] , [ f_bweapon , us_radar ] ] ] ) do
5104: LD_INT 22
5106: PUSH
5107: LD_INT 1
5109: PUSH
5110: EMPTY
5111: LIST
5112: LIST
5113: PUSH
5114: LD_INT 2
5116: PUSH
5117: LD_INT 34
5119: PUSH
5120: LD_INT 11
5122: PUSH
5123: EMPTY
5124: LIST
5125: LIST
5126: PUSH
5127: LD_INT 35
5129: PUSH
5130: LD_INT 11
5132: PUSH
5133: EMPTY
5134: LIST
5135: LIST
5136: PUSH
5137: EMPTY
5138: LIST
5139: LIST
5140: LIST
5141: PUSH
5142: EMPTY
5143: LIST
5144: LIST
5145: PPUSH
5146: CALL_OW 69
5150: IFFALSE 5170
5152: GO 5154
5154: DISABLE
// begin ChangeMissionObjectives ( M2b ) ;
5155: LD_STRING M2b
5157: PPUSH
5158: CALL_OW 337
// radar_builded := true ;
5162: LD_ADDR_EXP 11
5166: PUSH
5167: LD_INT 1
5169: ST_TO_ADDR
// end ;
5170: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) = 0 and not first_apeman_tamed do
5171: LD_INT 22
5173: PUSH
5174: LD_INT 0
5176: PUSH
5177: EMPTY
5178: LIST
5179: LIST
5180: PUSH
5181: LD_INT 25
5183: PUSH
5184: LD_INT 12
5186: PUSH
5187: EMPTY
5188: LIST
5189: LIST
5190: PUSH
5191: EMPTY
5192: LIST
5193: LIST
5194: PPUSH
5195: CALL_OW 69
5199: PUSH
5200: LD_INT 0
5202: EQUAL
5203: IFFALSE 5212
5205: PUSH
5206: LD_EXP 8
5210: NOT
5211: AND
5212: IFFALSE 5224
5214: GO 5216
5216: DISABLE
// YouLost ( Apeman ) ;
5217: LD_STRING Apeman
5219: PPUSH
5220: CALL_OW 104
5224: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_apeman_engineer ] ] ) >= 7 do var i , filter ;
5225: LD_INT 22
5227: PUSH
5228: LD_INT 1
5230: PUSH
5231: EMPTY
5232: LIST
5233: LIST
5234: PUSH
5235: LD_INT 25
5237: PUSH
5238: LD_INT 16
5240: PUSH
5241: EMPTY
5242: LIST
5243: LIST
5244: PUSH
5245: EMPTY
5246: LIST
5247: LIST
5248: PPUSH
5249: CALL_OW 69
5253: PUSH
5254: LD_INT 7
5256: GREATEREQUAL
5257: IFFALSE 5355
5259: GO 5261
5261: DISABLE
5262: LD_INT 0
5264: PPUSH
5265: PPUSH
// begin filter := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 4 ] ] ) ^ JMM ;
5266: LD_ADDR_VAR 0 2
5270: PUSH
5271: LD_INT 22
5273: PUSH
5274: LD_INT 1
5276: PUSH
5277: EMPTY
5278: LIST
5279: LIST
5280: PUSH
5281: LD_INT 21
5283: PUSH
5284: LD_INT 1
5286: PUSH
5287: EMPTY
5288: LIST
5289: LIST
5290: PUSH
5291: LD_INT 25
5293: PUSH
5294: LD_INT 4
5296: PUSH
5297: EMPTY
5298: LIST
5299: LIST
5300: PUSH
5301: EMPTY
5302: LIST
5303: LIST
5304: LIST
5305: PPUSH
5306: CALL_OW 69
5310: PUSH
5311: LD_EXP 17
5315: ADD
5316: ST_TO_ADDR
// if filter then
5317: LD_VAR 0 2
5321: IFFALSE 5355
// for i in filter do
5323: LD_ADDR_VAR 0 1
5327: PUSH
5328: LD_VAR 0 2
5332: PUSH
5333: FOR_IN
5334: IFFALSE 5353
// AddExperience ( i , 4 , 3500 ) ;
5336: LD_VAR 0 1
5340: PPUSH
5341: LD_INT 4
5343: PPUSH
5344: LD_INT 3500
5346: PPUSH
5347: CALL_OW 492
5351: GO 5333
5353: POP
5354: POP
// end ;
5355: PPOPN 2
5357: END
// every 0 0$1 trigger end_mission do var i , tmp , m1 , m2 , m3 ;
5358: LD_EXP 14
5362: IFFALSE 6553
5364: GO 5366
5366: DISABLE
5367: LD_INT 0
5369: PPUSH
5370: PPUSH
5371: PPUSH
5372: PPUSH
5373: PPUSH
// begin if apeKillCounter = 0 then
5374: LD_EXP 15
5378: PUSH
5379: LD_INT 0
5381: EQUAL
5382: IFFALSE 5391
// SetAchievement ( ACH_APEKILLER ) ;
5384: LD_STRING ACH_APEKILLER
5386: PPUSH
5387: CALL_OW 543
// if FilterAllUnits ( [ f_side , 2 ] ) then
5391: LD_INT 22
5393: PUSH
5394: LD_INT 2
5396: PUSH
5397: EMPTY
5398: LIST
5399: LIST
5400: PPUSH
5401: CALL_OW 69
5405: IFFALSE 5443
// for i in FilterAllUnits ( [ f_side , 2 ] ) do
5407: LD_ADDR_VAR 0 1
5411: PUSH
5412: LD_INT 22
5414: PUSH
5415: LD_INT 2
5417: PUSH
5418: EMPTY
5419: LIST
5420: LIST
5421: PPUSH
5422: CALL_OW 69
5426: PUSH
5427: FOR_IN
5428: IFFALSE 5441
// RemoveUnit ( i ) ;
5430: LD_VAR 0 1
5434: PPUSH
5435: CALL_OW 64
5439: GO 5427
5441: POP
5442: POP
// m1 := false ;
5443: LD_ADDR_VAR 0 3
5447: PUSH
5448: LD_INT 0
5450: ST_TO_ADDR
// m2 := false ;
5451: LD_ADDR_VAR 0 4
5455: PUSH
5456: LD_INT 0
5458: ST_TO_ADDR
// m3 := false ;
5459: LD_ADDR_VAR 0 5
5463: PUSH
5464: LD_INT 0
5466: ST_TO_ADDR
// if apeman_army then
5467: LD_EXP 9
5471: IFFALSE 5493
// begin AddMedal ( Tame , 1 ) ;
5473: LD_STRING Tame
5475: PPUSH
5476: LD_INT 1
5478: PPUSH
5479: CALL_OW 101
// m1 := true ;
5483: LD_ADDR_VAR 0 3
5487: PUSH
5488: LD_INT 1
5490: ST_TO_ADDR
// end else
5491: GO 5504
// AddMedal ( Tame , - 1 ) ;
5493: LD_STRING Tame
5495: PPUSH
5496: LD_INT 1
5498: NEG
5499: PPUSH
5500: CALL_OW 101
// if radar_researched then
5504: LD_EXP 10
5508: IFFALSE 5540
// begin SaveVariable ( true , radarResInDelta ) ;
5510: LD_INT 1
5512: PPUSH
5513: LD_STRING radarResInDelta
5515: PPUSH
5516: CALL_OW 39
// AddMedal ( Radar , 1 ) ;
5520: LD_STRING Radar
5522: PPUSH
5523: LD_INT 1
5525: PPUSH
5526: CALL_OW 101
// m2 := true ;
5530: LD_ADDR_VAR 0 4
5534: PUSH
5535: LD_INT 1
5537: ST_TO_ADDR
// end else
5538: GO 5570
// if radar_allowed then
5540: LD_EXP 7
5544: IFFALSE 5559
// AddMedal ( Radar , - 2 ) else
5546: LD_STRING Radar
5548: PPUSH
5549: LD_INT 2
5551: NEG
5552: PPUSH
5553: CALL_OW 101
5557: GO 5570
// AddMedal ( Radar , - 1 ) ;
5559: LD_STRING Radar
5561: PPUSH
5562: LD_INT 1
5564: NEG
5565: PPUSH
5566: CALL_OW 101
// if radar_builded then
5570: LD_EXP 11
5574: IFFALSE 5596
// begin AddMedal ( BuildRadar , 1 ) ;
5576: LD_STRING BuildRadar
5578: PPUSH
5579: LD_INT 1
5581: PPUSH
5582: CALL_OW 101
// m3 := true ;
5586: LD_ADDR_VAR 0 5
5590: PUSH
5591: LD_INT 1
5593: ST_TO_ADDR
// end else
5594: GO 5607
// AddMedal ( BuildRadar , - 1 ) ;
5596: LD_STRING BuildRadar
5598: PPUSH
5599: LD_INT 1
5601: NEG
5602: PPUSH
5603: CALL_OW 101
// if tick <= 7 7$00 then
5607: LD_OWVAR 1
5611: PUSH
5612: LD_INT 14700
5614: LESSEQUAL
5615: IFFALSE 5624
// SetAchievement ( ACH_ASPEED_5 ) ;
5617: LD_STRING ACH_ASPEED_5
5619: PPUSH
5620: CALL_OW 543
// if m1 and m2 and m3 and Difficulty >= 3 then
5624: LD_VAR 0 3
5628: IFFALSE 5636
5630: PUSH
5631: LD_VAR 0 4
5635: AND
5636: IFFALSE 5644
5638: PUSH
5639: LD_VAR 0 5
5643: AND
5644: IFFALSE 5656
5646: PUSH
5647: LD_OWVAR 67
5651: PUSH
5652: LD_INT 3
5654: GREATEREQUAL
5655: AND
5656: IFFALSE 5668
// SetAchievementEX ( ACH_AMER , 5 ) ;
5658: LD_STRING ACH_AMER
5660: PPUSH
5661: LD_INT 5
5663: PPUSH
5664: CALL_OW 564
// GiveMedals ( MAIN ) ;
5668: LD_STRING MAIN
5670: PPUSH
5671: CALL_OW 102
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ;
5675: LD_ADDR_VAR 0 2
5679: PUSH
5680: LD_INT 22
5682: PUSH
5683: LD_INT 1
5685: PUSH
5686: EMPTY
5687: LIST
5688: LIST
5689: PUSH
5690: LD_INT 21
5692: PUSH
5693: LD_INT 1
5695: PUSH
5696: EMPTY
5697: LIST
5698: LIST
5699: PUSH
5700: LD_INT 2
5702: PUSH
5703: LD_INT 25
5705: PUSH
5706: LD_INT 1
5708: PUSH
5709: EMPTY
5710: LIST
5711: LIST
5712: PUSH
5713: LD_INT 25
5715: PUSH
5716: LD_INT 2
5718: PUSH
5719: EMPTY
5720: LIST
5721: LIST
5722: PUSH
5723: LD_INT 25
5725: PUSH
5726: LD_INT 3
5728: PUSH
5729: EMPTY
5730: LIST
5731: LIST
5732: PUSH
5733: LD_INT 25
5735: PUSH
5736: LD_INT 4
5738: PUSH
5739: EMPTY
5740: LIST
5741: LIST
5742: PUSH
5743: EMPTY
5744: LIST
5745: LIST
5746: LIST
5747: LIST
5748: LIST
5749: PUSH
5750: EMPTY
5751: LIST
5752: LIST
5753: LIST
5754: PPUSH
5755: CALL_OW 69
5759: ST_TO_ADDR
// RewardPeople ( tmp ) ;
5760: LD_VAR 0 2
5764: PPUSH
5765: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
5769: LD_EXP 17
5773: PPUSH
5774: LD_EXP 2
5778: PUSH
5779: LD_STRING JMM
5781: STR
5782: PPUSH
5783: CALL_OW 38
// if IsOk ( Gladstone ) then
5787: LD_EXP 18
5791: PPUSH
5792: CALL_OW 302
5796: IFFALSE 5823
// begin ToLua ( enableBioCharacter(BIO_TIM) ) ;
5798: LD_STRING enableBioCharacter(BIO_TIM)
5800: PPUSH
5801: CALL_OW 559
// SaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
5805: LD_EXP 18
5809: PPUSH
5810: LD_EXP 2
5814: PUSH
5815: LD_STRING Gladstone
5817: STR
5818: PPUSH
5819: CALL_OW 38
// end ; if IsOk ( Denis ) and GetSide ( Denis ) = 1 then
5823: LD_EXP 20
5827: PPUSH
5828: CALL_OW 302
5832: IFFALSE 5849
5834: PUSH
5835: LD_EXP 20
5839: PPUSH
5840: CALL_OW 255
5844: PUSH
5845: LD_INT 1
5847: EQUAL
5848: AND
5849: IFFALSE 5886
// begin ToLua ( enableBioCharacter(BIO_DENIS) ) ;
5851: LD_STRING enableBioCharacter(BIO_DENIS)
5853: PPUSH
5854: CALL_OW 559
// SaveCharacters ( Denis , mission_prefix & Denis ) ;
5858: LD_EXP 20
5862: PPUSH
5863: LD_EXP 2
5867: PUSH
5868: LD_STRING Denis
5870: STR
5871: PPUSH
5872: CALL_OW 38
// SaveVariable ( true , DenisInDelta ) ;
5876: LD_INT 1
5878: PPUSH
5879: LD_STRING DenisInDelta
5881: PPUSH
5882: CALL_OW 39
// end ; if IsOk ( Lisa ) then
5886: LD_EXP 23
5890: PPUSH
5891: CALL_OW 302
5895: IFFALSE 5915
// begin SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
5897: LD_EXP 23
5901: PPUSH
5902: LD_EXP 2
5906: PUSH
5907: LD_STRING Lisa
5909: STR
5910: PPUSH
5911: CALL_OW 38
// end ; if IsOk ( Frank ) then
5915: LD_EXP 24
5919: PPUSH
5920: CALL_OW 302
5924: IFFALSE 5944
// begin SaveCharacters ( Frank , mission_prefix & Frank ) ;
5926: LD_EXP 24
5930: PPUSH
5931: LD_EXP 2
5935: PUSH
5936: LD_STRING Frank
5938: STR
5939: PPUSH
5940: CALL_OW 38
// end ; if IsOk ( Bobby ) then
5944: LD_EXP 25
5948: PPUSH
5949: CALL_OW 302
5953: IFFALSE 5973
// begin SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
5955: LD_EXP 25
5959: PPUSH
5960: LD_EXP 2
5964: PUSH
5965: LD_STRING Bobby
5967: STR
5968: PPUSH
5969: CALL_OW 38
// end ; if IsOk ( Cyrus ) then
5973: LD_EXP 26
5977: PPUSH
5978: CALL_OW 302
5982: IFFALSE 6002
// begin SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
5984: LD_EXP 26
5988: PPUSH
5989: LD_EXP 2
5993: PUSH
5994: LD_STRING Cyrus
5996: STR
5997: PPUSH
5998: CALL_OW 38
// end ; if IsOk ( Brown ) then
6002: LD_EXP 21
6006: PPUSH
6007: CALL_OW 302
6011: IFFALSE 6031
// begin SaveCharacters ( Brown , mission_prefix & Brown ) ;
6013: LD_EXP 21
6017: PPUSH
6018: LD_EXP 2
6022: PUSH
6023: LD_STRING Brown
6025: STR
6026: PPUSH
6027: CALL_OW 38
// end ; if IsOk ( Donaldson ) then
6031: LD_EXP 22
6035: PPUSH
6036: CALL_OW 302
6040: IFFALSE 6060
// begin SaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
6042: LD_EXP 22
6046: PPUSH
6047: LD_EXP 2
6051: PUSH
6052: LD_STRING Donaldson
6054: STR
6055: PPUSH
6056: CALL_OW 38
// end ; if IsOk ( Mike ) then
6060: LD_EXP 27
6064: PPUSH
6065: CALL_OW 302
6069: IFFALSE 6089
// SaveCharacters ( Mike , mission_prefix & Mike ) ;
6071: LD_EXP 27
6075: PPUSH
6076: LD_EXP 2
6080: PUSH
6081: LD_STRING Mike
6083: STR
6084: PPUSH
6085: CALL_OW 38
// if others then
6089: LD_EXP 28
6093: IFFALSE 6107
// SaveCharacters ( others , othersInDelta ) ;
6095: LD_EXP 28
6099: PPUSH
6100: LD_STRING othersInDelta
6102: PPUSH
6103: CALL_OW 38
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_apeman_engineer ] ] ) then
6107: LD_INT 22
6109: PUSH
6110: LD_INT 1
6112: PUSH
6113: EMPTY
6114: LIST
6115: LIST
6116: PUSH
6117: LD_INT 25
6119: PUSH
6120: LD_INT 16
6122: PUSH
6123: EMPTY
6124: LIST
6125: LIST
6126: PUSH
6127: EMPTY
6128: LIST
6129: LIST
6130: PPUSH
6131: CALL_OW 69
6135: IFFALSE 6179
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_apeman_engineer ] ] ) diff Mike , apeInDelta ) ;
6137: LD_INT 22
6139: PUSH
6140: LD_INT 1
6142: PUSH
6143: EMPTY
6144: LIST
6145: LIST
6146: PUSH
6147: LD_INT 25
6149: PUSH
6150: LD_INT 16
6152: PUSH
6153: EMPTY
6154: LIST
6155: LIST
6156: PUSH
6157: EMPTY
6158: LIST
6159: LIST
6160: PPUSH
6161: CALL_OW 69
6165: PUSH
6166: LD_EXP 27
6170: DIFF
6171: PPUSH
6172: LD_STRING apeInDelta
6174: PPUSH
6175: CALL_OW 38
// tmp := [ ] ;
6179: LD_ADDR_VAR 0 2
6183: PUSH
6184: EMPTY
6185: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) then
6186: LD_INT 22
6188: PUSH
6189: LD_INT 1
6191: PUSH
6192: EMPTY
6193: LIST
6194: LIST
6195: PUSH
6196: LD_INT 21
6198: PUSH
6199: LD_INT 2
6201: PUSH
6202: EMPTY
6203: LIST
6204: LIST
6205: PUSH
6206: EMPTY
6207: LIST
6208: LIST
6209: PPUSH
6210: CALL_OW 69
6214: IFFALSE 6325
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) do
6216: LD_ADDR_VAR 0 1
6220: PUSH
6221: LD_INT 22
6223: PUSH
6224: LD_INT 1
6226: PUSH
6227: EMPTY
6228: LIST
6229: LIST
6230: PUSH
6231: LD_INT 21
6233: PUSH
6234: LD_INT 2
6236: PUSH
6237: EMPTY
6238: LIST
6239: LIST
6240: PUSH
6241: EMPTY
6242: LIST
6243: LIST
6244: PPUSH
6245: CALL_OW 69
6249: PUSH
6250: FOR_IN
6251: IFFALSE 6323
// tmp := tmp ^ [ GetNation ( i ) , GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) ] ;
6253: LD_ADDR_VAR 0 2
6257: PUSH
6258: LD_VAR 0 2
6262: PUSH
6263: LD_VAR 0 1
6267: PPUSH
6268: CALL_OW 248
6272: PUSH
6273: LD_VAR 0 1
6277: PPUSH
6278: CALL_OW 265
6282: PUSH
6283: LD_VAR 0 1
6287: PPUSH
6288: CALL_OW 262
6292: PUSH
6293: LD_VAR 0 1
6297: PPUSH
6298: CALL_OW 263
6302: PUSH
6303: LD_VAR 0 1
6307: PPUSH
6308: CALL_OW 264
6312: PUSH
6313: EMPTY
6314: LIST
6315: LIST
6316: LIST
6317: LIST
6318: LIST
6319: ADD
6320: ST_TO_ADDR
6321: GO 6250
6323: POP
6324: POP
// if tmp then
6325: LD_VAR 0 2
6329: IFFALSE 6343
// SaveVariable ( tmp , vehiclesInDelta ) ;
6331: LD_VAR 0 2
6335: PPUSH
6336: LD_STRING vehiclesInDelta
6338: PPUSH
6339: CALL_OW 39
// tmp := [ ] ;
6343: LD_ADDR_VAR 0 2
6347: PUSH
6348: EMPTY
6349: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) then
6350: LD_INT 22
6352: PUSH
6353: LD_INT 1
6355: PUSH
6356: EMPTY
6357: LIST
6358: LIST
6359: PUSH
6360: LD_INT 21
6362: PUSH
6363: LD_INT 3
6365: PUSH
6366: EMPTY
6367: LIST
6368: LIST
6369: PUSH
6370: EMPTY
6371: LIST
6372: LIST
6373: PPUSH
6374: CALL_OW 69
6378: IFFALSE 6531
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) do
6380: LD_ADDR_VAR 0 1
6384: PUSH
6385: LD_INT 22
6387: PUSH
6388: LD_INT 1
6390: PUSH
6391: EMPTY
6392: LIST
6393: LIST
6394: PUSH
6395: LD_INT 21
6397: PUSH
6398: LD_INT 3
6400: PUSH
6401: EMPTY
6402: LIST
6403: LIST
6404: PUSH
6405: EMPTY
6406: LIST
6407: LIST
6408: PPUSH
6409: CALL_OW 69
6413: PUSH
6414: FOR_IN
6415: IFFALSE 6529
// tmp := tmp ^ [ [ GetBType ( i ) , GetBLevel ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) , GetBWeapon ( i ) ] ] ;
6417: LD_ADDR_VAR 0 2
6421: PUSH
6422: LD_VAR 0 2
6426: PUSH
6427: LD_VAR 0 1
6431: PPUSH
6432: CALL_OW 266
6436: PUSH
6437: LD_VAR 0 1
6441: PPUSH
6442: CALL_OW 267
6446: PUSH
6447: LD_VAR 0 1
6451: PPUSH
6452: CALL_OW 250
6456: PUSH
6457: LD_VAR 0 1
6461: PPUSH
6462: CALL_OW 251
6466: PUSH
6467: LD_VAR 0 1
6471: PPUSH
6472: CALL_OW 254
6476: PUSH
6477: LD_VAR 0 1
6481: PPUSH
6482: LD_INT 1
6484: PPUSH
6485: CALL_OW 268
6489: PUSH
6490: LD_VAR 0 1
6494: PPUSH
6495: LD_INT 2
6497: PPUSH
6498: CALL_OW 268
6502: PUSH
6503: LD_VAR 0 1
6507: PPUSH
6508: CALL_OW 269
6512: PUSH
6513: EMPTY
6514: LIST
6515: LIST
6516: LIST
6517: LIST
6518: LIST
6519: LIST
6520: LIST
6521: LIST
6522: PUSH
6523: EMPTY
6524: LIST
6525: ADD
6526: ST_TO_ADDR
6527: GO 6414
6529: POP
6530: POP
// if tmp then
6531: LD_VAR 0 2
6535: IFFALSE 6549
// SaveVariable ( tmp , buildingsInDelta ) ;
6537: LD_VAR 0 2
6541: PPUSH
6542: LD_STRING buildingsInDelta
6544: PPUSH
6545: CALL_OW 39
// YouWin ;
6549: CALL_OW 103
// end ; end_of_file
6553: PPOPN 5
6555: END
// export function PrepareArabianTroops ( amount , skill , area ) ; var i , un , tmp ; begin
6556: LD_INT 0
6558: PPUSH
6559: PPUSH
6560: PPUSH
6561: PPUSH
// InitHc ;
6562: CALL_OW 19
// InitUc ;
6566: CALL_OW 18
// uc_side := 2 ;
6570: LD_ADDR_OWVAR 20
6574: PUSH
6575: LD_INT 2
6577: ST_TO_ADDR
// uc_nation := 2 ;
6578: LD_ADDR_OWVAR 21
6582: PUSH
6583: LD_INT 2
6585: ST_TO_ADDR
// if not amount then
6586: LD_VAR 0 1
6590: NOT
6591: IFFALSE 6595
// exit ;
6593: GO 6718
// for i = 1 to amount do
6595: LD_ADDR_VAR 0 5
6599: PUSH
6600: DOUBLE
6601: LD_INT 1
6603: DEC
6604: ST_TO_ADDR
6605: LD_VAR 0 1
6609: PUSH
6610: FOR_TO
6611: IFFALSE 6706
// begin PrepareHuman ( false , 1 , skill ) ;
6613: LD_INT 0
6615: PPUSH
6616: LD_INT 1
6618: PPUSH
6619: LD_VAR 0 2
6623: PPUSH
6624: CALL_OW 380
// un := CreateHuman ;
6628: LD_ADDR_VAR 0 6
6632: PUSH
6633: CALL_OW 44
6637: ST_TO_ADDR
// tmp := Insert ( tmp , 1 , un ) ;
6638: LD_ADDR_VAR 0 7
6642: PUSH
6643: LD_VAR 0 7
6647: PPUSH
6648: LD_INT 1
6650: PPUSH
6651: LD_VAR 0 6
6655: PPUSH
6656: CALL_OW 2
6660: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
6661: LD_VAR 0 6
6665: PPUSH
6666: LD_VAR 0 3
6670: PPUSH
6671: LD_INT 0
6673: PPUSH
6674: CALL_OW 49
// if i mod 2 = 0 then
6678: LD_VAR 0 5
6682: PUSH
6683: LD_INT 2
6685: MOD
6686: PUSH
6687: LD_INT 0
6689: EQUAL
6690: IFFALSE 6704
// SetTag ( un , 11 ) ;
6692: LD_VAR 0 6
6696: PPUSH
6697: LD_INT 11
6699: PPUSH
6700: CALL_OW 109
// end ;
6704: GO 6610
6706: POP
6707: POP
// result := tmp ;
6708: LD_ADDR_VAR 0 4
6712: PUSH
6713: LD_VAR 0 7
6717: ST_TO_ADDR
// end ;
6718: LD_VAR 0 4
6722: RET
// export ar_forces , ap_killers ; every 0 0$1 trigger Delta do var i , timer , more_troops , skill , eng , un , veh , force ;
6723: LD_EXP 6
6727: IFFALSE 7822
6729: GO 6731
6731: DISABLE
6732: LD_INT 0
6734: PPUSH
6735: PPUSH
6736: PPUSH
6737: PPUSH
6738: PPUSH
6739: PPUSH
6740: PPUSH
6741: PPUSH
// begin more_troops := false ;
6742: LD_ADDR_VAR 0 3
6746: PUSH
6747: LD_INT 0
6749: ST_TO_ADDR
// skill := [ 3 , 4 , 5 , 5 ] [ Difficulty ] ;
6750: LD_ADDR_VAR 0 4
6754: PUSH
6755: LD_INT 3
6757: PUSH
6758: LD_INT 4
6760: PUSH
6761: LD_INT 5
6763: PUSH
6764: LD_INT 5
6766: PUSH
6767: EMPTY
6768: LIST
6769: LIST
6770: LIST
6771: LIST
6772: PUSH
6773: LD_OWVAR 67
6777: ARRAY
6778: ST_TO_ADDR
// timer := [ 5 5$00 , 4 4$00 , 3 3$00 , 2 2$30 ] [ Difficulty ] ;
6779: LD_ADDR_VAR 0 2
6783: PUSH
6784: LD_INT 10500
6786: PUSH
6787: LD_INT 8400
6789: PUSH
6790: LD_INT 6300
6792: PUSH
6793: LD_INT 5250
6795: PUSH
6796: EMPTY
6797: LIST
6798: LIST
6799: LIST
6800: LIST
6801: PUSH
6802: LD_OWVAR 67
6806: ARRAY
6807: ST_TO_ADDR
// force := [ ] ;
6808: LD_ADDR_VAR 0 8
6812: PUSH
6813: EMPTY
6814: ST_TO_ADDR
// ar_forces := [ ] ;
6815: LD_ADDR_EXP 29
6819: PUSH
6820: EMPTY
6821: ST_TO_ADDR
// ap_killers := [ ] ;
6822: LD_ADDR_EXP 30
6826: PUSH
6827: EMPTY
6828: ST_TO_ADDR
// Wait ( timer ) ;
6829: LD_VAR 0 2
6833: PPUSH
6834: CALL_OW 67
// if Denis and GetSide ( Denis ) = 4 then
6838: LD_EXP 20
6842: IFFALSE 6859
6844: PUSH
6845: LD_EXP 20
6849: PPUSH
6850: CALL_OW 255
6854: PUSH
6855: LD_INT 4
6857: EQUAL
6858: AND
6859: IFFALSE 6868
// Wait ( 0 0$45 ) ;
6861: LD_INT 1575
6863: PPUSH
6864: CALL_OW 67
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_armoury ] ] ) then
6868: LD_INT 22
6870: PUSH
6871: LD_INT 1
6873: PUSH
6874: EMPTY
6875: LIST
6876: LIST
6877: PUSH
6878: LD_INT 30
6880: PUSH
6881: LD_INT 4
6883: PUSH
6884: EMPTY
6885: LIST
6886: LIST
6887: PUSH
6888: EMPTY
6889: LIST
6890: LIST
6891: PPUSH
6892: CALL_OW 69
6896: IFFALSE 6913
// begin wait ( 1 1$25 ) ;
6898: LD_INT 2975
6900: PPUSH
6901: CALL_OW 67
// more_troops := true ;
6905: LD_ADDR_VAR 0 3
6909: PUSH
6910: LD_INT 1
6912: ST_TO_ADDR
// end ; if more_troops then
6913: LD_VAR 0 3
6917: IFFALSE 7113
// begin force := PrepareArabianTroops ( [ 4 , 5 , 6 , 7 ] [ Difficulty ] , skill , arArea2 ) ;
6919: LD_ADDR_VAR 0 8
6923: PUSH
6924: LD_INT 4
6926: PUSH
6927: LD_INT 5
6929: PUSH
6930: LD_INT 6
6932: PUSH
6933: LD_INT 7
6935: PUSH
6936: EMPTY
6937: LIST
6938: LIST
6939: LIST
6940: LIST
6941: PUSH
6942: LD_OWVAR 67
6946: ARRAY
6947: PPUSH
6948: LD_VAR 0 4
6952: PPUSH
6953: LD_INT 14
6955: PPUSH
6956: CALL 6556 0 3
6960: ST_TO_ADDR
// veh := PrepareTank ( 2 , 3 , ru_medium_tracked , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_heavy_machine_gun , ru_gatling_gun , ru_gun ] [ Difficulty ] , 90 ) ;
6961: LD_ADDR_VAR 0 7
6965: PUSH
6966: LD_INT 2
6968: PPUSH
6969: LD_INT 3
6971: PPUSH
6972: LD_INT 22
6974: PPUSH
6975: LD_INT 1
6977: PPUSH
6978: LD_INT 1
6980: PPUSH
6981: LD_INT 42
6983: PUSH
6984: LD_INT 42
6986: PUSH
6987: LD_INT 43
6989: PUSH
6990: LD_INT 44
6992: PUSH
6993: EMPTY
6994: LIST
6995: LIST
6996: LIST
6997: LIST
6998: PUSH
6999: LD_OWVAR 67
7003: ARRAY
7004: PPUSH
7005: LD_INT 90
7007: PPUSH
7008: CALL 449 0 7
7012: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
7013: LD_VAR 0 7
7017: PPUSH
7018: LD_INT 4
7020: PPUSH
7021: CALL_OW 233
// PlaceUnitArea ( veh , arArea1 , false ) ;
7025: LD_VAR 0 7
7029: PPUSH
7030: LD_INT 13
7032: PPUSH
7033: LD_INT 0
7035: PPUSH
7036: CALL_OW 49
// uc_side := 2 ;
7040: LD_ADDR_OWVAR 20
7044: PUSH
7045: LD_INT 2
7047: ST_TO_ADDR
// uc_nation := 2 ;
7048: LD_ADDR_OWVAR 21
7052: PUSH
7053: LD_INT 2
7055: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
7056: LD_INT 0
7058: PPUSH
7059: LD_INT 1
7061: PPUSH
7062: LD_VAR 0 4
7066: PPUSH
7067: CALL_OW 380
// un := CreateHuman ;
7071: LD_ADDR_VAR 0 6
7075: PUSH
7076: CALL_OW 44
7080: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
7081: LD_VAR 0 6
7085: PPUSH
7086: LD_VAR 0 7
7090: PPUSH
7091: CALL_OW 52
// force := force ^ un ;
7095: LD_ADDR_VAR 0 8
7099: PUSH
7100: LD_VAR 0 8
7104: PUSH
7105: LD_VAR 0 6
7109: ADD
7110: ST_TO_ADDR
// end else
7111: GO 7155
// begin force := PrepareArabianTroops ( [ 3 , 4 , 5 , 6 ] [ Difficulty ] , skill , arArea2 ) ;
7113: LD_ADDR_VAR 0 8
7117: PUSH
7118: LD_INT 3
7120: PUSH
7121: LD_INT 4
7123: PUSH
7124: LD_INT 5
7126: PUSH
7127: LD_INT 6
7129: PUSH
7130: EMPTY
7131: LIST
7132: LIST
7133: LIST
7134: LIST
7135: PUSH
7136: LD_OWVAR 67
7140: ARRAY
7141: PPUSH
7142: LD_VAR 0 4
7146: PPUSH
7147: LD_INT 14
7149: PPUSH
7150: CALL 6556 0 3
7154: ST_TO_ADDR
// end ; if force then
7155: LD_VAR 0 8
7159: IFFALSE 7171
// ar_forces := force ;
7161: LD_ADDR_EXP 29
7165: PUSH
7166: LD_VAR 0 8
7170: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
7171: LD_INT 35
7173: PPUSH
7174: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) = 0 ;
7178: LD_INT 22
7180: PUSH
7181: LD_INT 2
7183: PUSH
7184: EMPTY
7185: LIST
7186: LIST
7187: PUSH
7188: LD_INT 21
7190: PUSH
7191: LD_INT 1
7193: PUSH
7194: EMPTY
7195: LIST
7196: LIST
7197: PUSH
7198: EMPTY
7199: LIST
7200: LIST
7201: PPUSH
7202: CALL_OW 69
7206: PUSH
7207: LD_INT 0
7209: EQUAL
7210: IFFALSE 7171
// wait ( timer ) ;
7212: LD_VAR 0 2
7216: PPUSH
7217: CALL_OW 67
// force := PrepareArabianTroops ( [ 4 , 5 , 6 , 7 ] [ Difficulty ] , skill , [ arArea1 , arArea2 ] [ rand ( 1 , 2 ) ] ) ;
7221: LD_ADDR_VAR 0 8
7225: PUSH
7226: LD_INT 4
7228: PUSH
7229: LD_INT 5
7231: PUSH
7232: LD_INT 6
7234: PUSH
7235: LD_INT 7
7237: PUSH
7238: EMPTY
7239: LIST
7240: LIST
7241: LIST
7242: LIST
7243: PUSH
7244: LD_OWVAR 67
7248: ARRAY
7249: PPUSH
7250: LD_VAR 0 4
7254: PPUSH
7255: LD_INT 13
7257: PUSH
7258: LD_INT 14
7260: PUSH
7261: EMPTY
7262: LIST
7263: LIST
7264: PUSH
7265: LD_INT 1
7267: PPUSH
7268: LD_INT 2
7270: PPUSH
7271: CALL_OW 12
7275: ARRAY
7276: PPUSH
7277: CALL 6556 0 3
7281: ST_TO_ADDR
// if Difficulty > 1 and Delta then
7282: LD_OWVAR 67
7286: PUSH
7287: LD_INT 1
7289: GREATER
7290: IFFALSE 7298
7292: PUSH
7293: LD_EXP 6
7297: AND
7298: IFFALSE 7377
// begin uc_side := 2 ;
7300: LD_ADDR_OWVAR 20
7304: PUSH
7305: LD_INT 2
7307: ST_TO_ADDR
// uc_nation := 2 ;
7308: LD_ADDR_OWVAR 21
7312: PUSH
7313: LD_INT 2
7315: ST_TO_ADDR
// PrepareHuman ( false , 2 , skill ) ;
7316: LD_INT 0
7318: PPUSH
7319: LD_INT 2
7321: PPUSH
7322: LD_VAR 0 4
7326: PPUSH
7327: CALL_OW 380
// eng := CreateHuman ;
7331: LD_ADDR_VAR 0 5
7335: PUSH
7336: CALL_OW 44
7340: ST_TO_ADDR
// PlaceUnitArea ( eng , arArea1 , false ) ;
7341: LD_VAR 0 5
7345: PPUSH
7346: LD_INT 13
7348: PPUSH
7349: LD_INT 0
7351: PPUSH
7352: CALL_OW 49
// Wait ( 3 ) ;
7356: LD_INT 3
7358: PPUSH
7359: CALL_OW 67
// AddComEnterUnit ( eng , Delta ) ;
7363: LD_VAR 0 5
7367: PPUSH
7368: LD_EXP 6
7372: PPUSH
7373: CALL_OW 180
// end ; if force then
7377: LD_VAR 0 8
7381: IFFALSE 7393
// ar_forces := force ;
7383: LD_ADDR_EXP 29
7387: PUSH
7388: LD_VAR 0 8
7392: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
7393: LD_INT 35
7395: PPUSH
7396: CALL_OW 67
// if eng then
7400: LD_VAR 0 5
7404: IFFALSE 7462
// if GetSide ( Delta ) = 2 and IsOk ( eng ) and not IsInUnit ( eng ) then
7406: LD_EXP 6
7410: PPUSH
7411: CALL_OW 255
7415: PUSH
7416: LD_INT 2
7418: EQUAL
7419: IFFALSE 7432
7421: PUSH
7422: LD_VAR 0 5
7426: PPUSH
7427: CALL_OW 302
7431: AND
7432: IFFALSE 7446
7434: PUSH
7435: LD_VAR 0 5
7439: PPUSH
7440: CALL_OW 310
7444: NOT
7445: AND
7446: IFFALSE 7462
// ComEnterUnit ( eng , Delta ) ;
7448: LD_VAR 0 5
7452: PPUSH
7453: LD_EXP 6
7457: PPUSH
7458: CALL_OW 120
// until FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) = 0 ;
7462: LD_INT 22
7464: PUSH
7465: LD_INT 2
7467: PUSH
7468: EMPTY
7469: LIST
7470: LIST
7471: PUSH
7472: LD_INT 21
7474: PUSH
7475: LD_INT 1
7477: PUSH
7478: EMPTY
7479: LIST
7480: LIST
7481: PUSH
7482: EMPTY
7483: LIST
7484: LIST
7485: PPUSH
7486: CALL_OW 69
7490: PUSH
7491: LD_INT 0
7493: EQUAL
7494: IFFALSE 7393
// Wait ( 2 2$00 ) ;
7496: LD_INT 4200
7498: PPUSH
7499: CALL_OW 67
// ap_killers := PrepareArabianTroops ( [ 1 , 2 , 2 , 2 ] [ Difficulty ] , skill , arArea1 ) ;
7503: LD_ADDR_EXP 30
7507: PUSH
7508: LD_INT 1
7510: PUSH
7511: LD_INT 2
7513: PUSH
7514: LD_INT 2
7516: PUSH
7517: LD_INT 2
7519: PUSH
7520: EMPTY
7521: LIST
7522: LIST
7523: LIST
7524: LIST
7525: PUSH
7526: LD_OWVAR 67
7530: ARRAY
7531: PPUSH
7532: LD_VAR 0 4
7536: PPUSH
7537: LD_INT 13
7539: PPUSH
7540: CALL 6556 0 3
7544: ST_TO_ADDR
// Wait ( timer * 2 ) ;
7545: LD_VAR 0 2
7549: PUSH
7550: LD_INT 2
7552: MUL
7553: PPUSH
7554: CALL_OW 67
// ar_forces := PrepareArabianTroops ( [ 5 , 6 , 7 , 8 ] [ Difficulty ] , skill , arArea1 ) ^ PrepareArabianTroops ( [ 3 , 4 , 4 , 4 ] [ Difficulty ] , skill , arArea2 ) ;
7558: LD_ADDR_EXP 29
7562: PUSH
7563: LD_INT 5
7565: PUSH
7566: LD_INT 6
7568: PUSH
7569: LD_INT 7
7571: PUSH
7572: LD_INT 8
7574: PUSH
7575: EMPTY
7576: LIST
7577: LIST
7578: LIST
7579: LIST
7580: PUSH
7581: LD_OWVAR 67
7585: ARRAY
7586: PPUSH
7587: LD_VAR 0 4
7591: PPUSH
7592: LD_INT 13
7594: PPUSH
7595: CALL 6556 0 3
7599: PUSH
7600: LD_INT 3
7602: PUSH
7603: LD_INT 4
7605: PUSH
7606: LD_INT 4
7608: PUSH
7609: LD_INT 4
7611: PUSH
7612: EMPTY
7613: LIST
7614: LIST
7615: LIST
7616: LIST
7617: PUSH
7618: LD_OWVAR 67
7622: ARRAY
7623: PPUSH
7624: LD_VAR 0 4
7628: PPUSH
7629: LD_INT 14
7631: PPUSH
7632: CALL 6556 0 3
7636: ADD
7637: ST_TO_ADDR
// if Difficulty < 4 and not traitor then
7638: LD_OWVAR 67
7642: PUSH
7643: LD_INT 4
7645: LESS
7646: IFFALSE 7655
7648: PUSH
7649: LD_EXP 16
7653: NOT
7654: AND
7655: IFFALSE 7659
// exit ;
7657: GO 7822
// veh := PrepareTank ( 2 , 3 , ru_medium_tracked , engine_combustion , control_manual , ru_gun , 90 ) ;
7659: LD_ADDR_VAR 0 7
7663: PUSH
7664: LD_INT 2
7666: PPUSH
7667: LD_INT 3
7669: PPUSH
7670: LD_INT 22
7672: PPUSH
7673: LD_INT 1
7675: PPUSH
7676: LD_INT 1
7678: PPUSH
7679: LD_INT 44
7681: PPUSH
7682: LD_INT 90
7684: PPUSH
7685: CALL 449 0 7
7689: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
7690: LD_VAR 0 7
7694: PPUSH
7695: LD_INT 1
7697: PPUSH
7698: CALL_OW 233
// PlaceUnitXY ( veh , 28 , 51 , false ) ;
7702: LD_VAR 0 7
7706: PPUSH
7707: LD_INT 28
7709: PPUSH
7710: LD_INT 51
7712: PPUSH
7713: LD_INT 0
7715: PPUSH
7716: CALL_OW 48
// uc_side := 2 ;
7720: LD_ADDR_OWVAR 20
7724: PUSH
7725: LD_INT 2
7727: ST_TO_ADDR
// uc_nation := 2 ;
7728: LD_ADDR_OWVAR 21
7732: PUSH
7733: LD_INT 2
7735: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
7736: LD_INT 0
7738: PPUSH
7739: LD_INT 1
7741: PPUSH
7742: LD_VAR 0 4
7746: PPUSH
7747: CALL_OW 380
// un := CreateHuman ;
7751: LD_ADDR_VAR 0 6
7755: PUSH
7756: CALL_OW 44
7760: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
7761: LD_VAR 0 6
7765: PPUSH
7766: LD_VAR 0 7
7770: PPUSH
7771: CALL_OW 52
// ar_forces := Join ( ar_forces , un ) ;
7775: LD_ADDR_EXP 29
7779: PUSH
7780: LD_EXP 29
7784: PPUSH
7785: LD_VAR 0 6
7789: PPUSH
7790: CALL 68728 0 2
7794: ST_TO_ADDR
// ar_forces := ar_forces union PrepareArabianTroops ( 4 , skill , arArea3 ) ;
7795: LD_ADDR_EXP 29
7799: PUSH
7800: LD_EXP 29
7804: PUSH
7805: LD_INT 4
7807: PPUSH
7808: LD_VAR 0 4
7812: PPUSH
7813: LD_INT 19
7815: PPUSH
7816: CALL 6556 0 3
7820: UNION
7821: ST_TO_ADDR
// end ;
7822: PPOPN 8
7824: END
// every 0 0$03 trigger ar_forces do var i , target ;
7825: LD_EXP 29
7829: IFFALSE 8027
7831: GO 7833
7833: DISABLE
7834: LD_INT 0
7836: PPUSH
7837: PPUSH
// begin enable ;
7838: ENABLE
// if not ar_forces then
7839: LD_EXP 29
7843: NOT
7844: IFFALSE 7848
// exit ;
7846: GO 8027
// if Delta then
7848: LD_EXP 6
7852: IFFALSE 7866
// target := Delta else
7854: LD_ADDR_VAR 0 2
7858: PUSH
7859: LD_EXP 6
7863: ST_TO_ADDR
7864: GO 7876
// target := JMM ;
7866: LD_ADDR_VAR 0 2
7870: PUSH
7871: LD_EXP 17
7875: ST_TO_ADDR
// for i in ar_forces do
7876: LD_ADDR_VAR 0 1
7880: PUSH
7881: LD_EXP 29
7885: PUSH
7886: FOR_IN
7887: IFFALSE 8025
// begin if i in FilterAllUnits ( [ f_driving ] ) then
7889: LD_VAR 0 1
7893: PUSH
7894: LD_INT 55
7896: PUSH
7897: EMPTY
7898: LIST
7899: PPUSH
7900: CALL_OW 69
7904: IN
7905: IFFALSE 7948
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , IsInUnit ( i ) ) ) else
7907: LD_VAR 0 1
7911: PPUSH
7912: LD_INT 22
7914: PUSH
7915: LD_INT 1
7917: PUSH
7918: EMPTY
7919: LIST
7920: LIST
7921: PPUSH
7922: CALL_OW 69
7926: PPUSH
7927: LD_VAR 0 1
7931: PPUSH
7932: CALL_OW 310
7936: PPUSH
7937: CALL_OW 74
7941: PPUSH
7942: CALL_OW 115
7946: GO 8023
// if GetDistUnits ( i , target ) > 30 then
7948: LD_VAR 0 1
7952: PPUSH
7953: LD_VAR 0 2
7957: PPUSH
7958: CALL_OW 296
7962: PUSH
7963: LD_INT 30
7965: GREATER
7966: IFFALSE 7999
// ComAgressiveMove ( i , GetX ( target ) , GetY ( target ) ) else
7968: LD_VAR 0 1
7972: PPUSH
7973: LD_VAR 0 2
7977: PPUSH
7978: CALL_OW 250
7982: PPUSH
7983: LD_VAR 0 2
7987: PPUSH
7988: CALL_OW 251
7992: PPUSH
7993: CALL_OW 114
7997: GO 8023
// Attack ( i , FilterAllUnits ( [ f_enemy , 2 ] ) ) ;
7999: LD_VAR 0 1
8003: PPUSH
8004: LD_INT 81
8006: PUSH
8007: LD_INT 2
8009: PUSH
8010: EMPTY
8011: LIST
8012: LIST
8013: PPUSH
8014: CALL_OW 69
8018: PPUSH
8019: CALL 941 0 2
// end ;
8023: GO 7886
8025: POP
8026: POP
// end ;
8027: PPOPN 2
8029: END
// every 0 0$01 trigger ap_killers do var filter , i , target ;
8030: LD_EXP 30
8034: IFFALSE 8194
8036: GO 8038
8038: DISABLE
8039: LD_INT 0
8041: PPUSH
8042: PPUSH
8043: PPUSH
// begin enable ;
8044: ENABLE
// filter := FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) ;
8045: LD_ADDR_VAR 0 1
8049: PUSH
8050: LD_INT 22
8052: PUSH
8053: LD_INT 0
8055: PUSH
8056: EMPTY
8057: LIST
8058: LIST
8059: PUSH
8060: LD_INT 25
8062: PUSH
8063: LD_INT 12
8065: PUSH
8066: EMPTY
8067: LIST
8068: LIST
8069: PUSH
8070: EMPTY
8071: LIST
8072: LIST
8073: PPUSH
8074: CALL_OW 69
8078: ST_TO_ADDR
// if not filter then
8079: LD_VAR 0 1
8083: NOT
8084: IFFALSE 8111
// begin ar_forces := ar_forces ^ ap_killers ;
8086: LD_ADDR_EXP 29
8090: PUSH
8091: LD_EXP 29
8095: PUSH
8096: LD_EXP 30
8100: ADD
8101: ST_TO_ADDR
// ap_killers := [ ] ;
8102: LD_ADDR_EXP 30
8106: PUSH
8107: EMPTY
8108: ST_TO_ADDR
// exit ;
8109: GO 8194
// end ; for i in ap_killers do
8111: LD_ADDR_VAR 0 2
8115: PUSH
8116: LD_EXP 30
8120: PUSH
8121: FOR_IN
8122: IFFALSE 8192
// begin if not IsOk ( i ) then
8124: LD_VAR 0 2
8128: PPUSH
8129: CALL_OW 302
8133: NOT
8134: IFFALSE 8138
// continue ;
8136: GO 8121
// if not HasTask ( i ) then
8138: LD_VAR 0 2
8142: PPUSH
8143: CALL_OW 314
8147: NOT
8148: IFFALSE 8170
// target := NearestUnitToUnit ( filter , i ) ;
8150: LD_ADDR_VAR 0 3
8154: PUSH
8155: LD_VAR 0 1
8159: PPUSH
8160: LD_VAR 0 2
8164: PPUSH
8165: CALL_OW 74
8169: ST_TO_ADDR
// if target then
8170: LD_VAR 0 3
8174: IFFALSE 8190
// ComAttackUnit ( i , target ) ;
8176: LD_VAR 0 2
8180: PPUSH
8181: LD_VAR 0 3
8185: PPUSH
8186: CALL_OW 115
// end ;
8190: GO 8121
8192: POP
8193: POP
// end ; end_of_file
8194: PPOPN 3
8196: END
// every 0 0$40 + 0 0$2 trigger Delta do var i , counter , cr ;
8197: LD_EXP 6
8201: IFFALSE 8337
8203: GO 8205
8205: DISABLE
8206: LD_INT 0
8208: PPUSH
8209: PPUSH
8210: PPUSH
// begin counter := [ 300 , 250 , 220 , 210 ] [ Difficulty ] ;
8211: LD_ADDR_VAR 0 2
8215: PUSH
8216: LD_INT 300
8218: PUSH
8219: LD_INT 250
8221: PUSH
8222: LD_INT 220
8224: PUSH
8225: LD_INT 210
8227: PUSH
8228: EMPTY
8229: LIST
8230: LIST
8231: LIST
8232: LIST
8233: PUSH
8234: LD_OWVAR 67
8238: ARRAY
8239: ST_TO_ADDR
// CreateCratesArea ( Rand ( 1 , 3 ) , cratesArea , true ) ;
8240: LD_INT 1
8242: PPUSH
8243: LD_INT 3
8245: PPUSH
8246: CALL_OW 12
8250: PPUSH
8251: LD_INT 7
8253: PPUSH
8254: LD_INT 1
8256: PPUSH
8257: CALL_OW 55
// repeat wait ( rand ( 1 1$30 , 2 2$20 ) ) ;
8261: LD_INT 3150
8263: PPUSH
8264: LD_INT 4900
8266: PPUSH
8267: CALL_OW 12
8271: PPUSH
8272: CALL_OW 67
// cr := rand ( 1 , 5 ) ;
8276: LD_ADDR_VAR 0 3
8280: PUSH
8281: LD_INT 1
8283: PPUSH
8284: LD_INT 5
8286: PPUSH
8287: CALL_OW 12
8291: ST_TO_ADDR
// CreateCratesArea ( cr , cratesArea , true ) ;
8292: LD_VAR 0 3
8296: PPUSH
8297: LD_INT 7
8299: PPUSH
8300: LD_INT 1
8302: PPUSH
8303: CALL_OW 55
// counter := counter - cr * 10 ;
8307: LD_ADDR_VAR 0 2
8311: PUSH
8312: LD_VAR 0 2
8316: PUSH
8317: LD_VAR 0 3
8321: PUSH
8322: LD_INT 10
8324: MUL
8325: MINUS
8326: ST_TO_ADDR
// until counter <= 0 ;
8327: LD_VAR 0 2
8331: PUSH
8332: LD_INT 0
8334: LESSEQUAL
8335: IFFALSE 8261
// end ;
8337: PPOPN 3
8339: END
// every 0 0$03 trigger not Delta do var i ;
8340: LD_EXP 6
8344: NOT
8345: IFFALSE 8415
8347: GO 8349
8349: DISABLE
8350: LD_INT 0
8352: PPUSH
// begin for i = 1 to 5 - Difficulty do
8353: LD_ADDR_VAR 0 1
8357: PUSH
8358: DOUBLE
8359: LD_INT 1
8361: DEC
8362: ST_TO_ADDR
8363: LD_INT 5
8365: PUSH
8366: LD_OWVAR 67
8370: MINUS
8371: PUSH
8372: FOR_TO
8373: IFFALSE 8413
// begin CreateCratesArea ( rand ( 2 , 5 ) , deltaMainArea , true ) ;
8375: LD_INT 2
8377: PPUSH
8378: LD_INT 5
8380: PPUSH
8381: CALL_OW 12
8385: PPUSH
8386: LD_INT 8
8388: PPUSH
8389: LD_INT 1
8391: PPUSH
8392: CALL_OW 55
// Wait ( rand ( 0 0$16 , 0 0$39 ) ) ;
8396: LD_INT 560
8398: PPUSH
8399: LD_INT 1365
8401: PPUSH
8402: CALL_OW 12
8406: PPUSH
8407: CALL_OW 67
// end ;
8411: GO 8372
8413: POP
8414: POP
// end ;
8415: PPOPN 1
8417: END
// every 3 3$00 trigger tick < 15 15$00 do
8418: LD_OWVAR 1
8422: PUSH
8423: LD_INT 31500
8425: LESS
8426: IFFALSE 8486
8428: GO 8430
8430: DISABLE
// begin enable ;
8431: ENABLE
// CreateCratesAnyWhere ( rand ( 1 , 3 ) , true ) ;
8432: LD_INT 1
8434: PPUSH
8435: LD_INT 3
8437: PPUSH
8438: CALL_OW 12
8442: PPUSH
8443: LD_INT 1
8445: PPUSH
8446: CALL_OW 57
// Wait ( rand ( 0 0$38 , 0 0$59 ) ) ;
8450: LD_INT 1330
8452: PPUSH
8453: LD_INT 2065
8455: PPUSH
8456: CALL_OW 12
8460: PPUSH
8461: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 4 ) , riverArea , true ) ;
8465: LD_INT 1
8467: PPUSH
8468: LD_INT 4
8470: PPUSH
8471: CALL_OW 12
8475: PPUSH
8476: LD_INT 15
8478: PPUSH
8479: LD_INT 1
8481: PPUSH
8482: CALL_OW 55
// end ; end_of_file
8486: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
8487: LD_VAR 0 1
8491: PPUSH
8492: CALL 25170 0 1
// if un = JMM then
8496: LD_VAR 0 1
8500: PUSH
8501: LD_EXP 17
8505: EQUAL
8506: IFFALSE 8515
// YouLost ( JMM ) ;
8508: LD_STRING JMM
8510: PPUSH
8511: CALL_OW 104
// if un = Delta then
8515: LD_VAR 0 1
8519: PUSH
8520: LD_EXP 6
8524: EQUAL
8525: IFFALSE 8548
// begin Delta := 0 ;
8527: LD_ADDR_EXP 6
8531: PUSH
8532: LD_INT 0
8534: ST_TO_ADDR
// SetRestrict ( b_depot , 1 , true ) ;
8535: LD_INT 0
8537: PPUSH
8538: LD_INT 1
8540: PPUSH
8541: LD_INT 1
8543: PPUSH
8544: CALL_OW 324
// end ; if un in ar_forces then
8548: LD_VAR 0 1
8552: PUSH
8553: LD_EXP 29
8557: IN
8558: IFFALSE 8576
// ar_forces := ar_forces diff un ;
8560: LD_ADDR_EXP 29
8564: PUSH
8565: LD_EXP 29
8569: PUSH
8570: LD_VAR 0 1
8574: DIFF
8575: ST_TO_ADDR
// if un in ap_killers then
8576: LD_VAR 0 1
8580: PUSH
8581: LD_EXP 30
8585: IN
8586: IFFALSE 8604
// ap_killers := ap_killers diff un ;
8588: LD_ADDR_EXP 30
8592: PUSH
8593: LD_EXP 30
8597: PUSH
8598: LD_VAR 0 1
8602: DIFF
8603: ST_TO_ADDR
// if un in FilterAllUnits ( [ f_or , [ f_class , class_apeman ] , [ f_class , class_apeman_engineer ] ] ) then
8604: LD_VAR 0 1
8608: PUSH
8609: LD_INT 2
8611: PUSH
8612: LD_INT 25
8614: PUSH
8615: LD_INT 12
8617: PUSH
8618: EMPTY
8619: LIST
8620: LIST
8621: PUSH
8622: LD_INT 25
8624: PUSH
8625: LD_INT 16
8627: PUSH
8628: EMPTY
8629: LIST
8630: LIST
8631: PUSH
8632: EMPTY
8633: LIST
8634: LIST
8635: LIST
8636: PPUSH
8637: CALL_OW 69
8641: IN
8642: IFFALSE 8658
// apeKillCounter := apeKillCounter + 1 ;
8644: LD_ADDR_EXP 15
8648: PUSH
8649: LD_EXP 15
8653: PUSH
8654: LD_INT 1
8656: PLUS
8657: ST_TO_ADDR
// end ;
8658: PPOPN 1
8660: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if un in FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) and killerSide = 1 then
8661: LD_VAR 0 1
8665: PUSH
8666: LD_INT 22
8668: PUSH
8669: LD_INT 1
8671: PUSH
8672: EMPTY
8673: LIST
8674: LIST
8675: PUSH
8676: LD_INT 23
8678: PUSH
8679: LD_INT 1
8681: PUSH
8682: EMPTY
8683: LIST
8684: LIST
8685: PUSH
8686: LD_INT 21
8688: PUSH
8689: LD_INT 1
8691: PUSH
8692: EMPTY
8693: LIST
8694: LIST
8695: PUSH
8696: EMPTY
8697: LIST
8698: LIST
8699: LIST
8700: PPUSH
8701: CALL_OW 69
8705: IN
8706: IFFALSE 8718
8708: PUSH
8709: LD_VAR 0 2
8713: PUSH
8714: LD_INT 1
8716: EQUAL
8717: AND
8718: IFFALSE 8728
// traitor := true ;
8720: LD_ADDR_EXP 16
8724: PUSH
8725: LD_INT 1
8727: ST_TO_ADDR
// end ;
8728: PPOPN 3
8730: END
// on VehicleConstructed ( veh , fac ) do begin SOS_VehicleConstructed ( veh , fac ) ;
8731: LD_VAR 0 1
8735: PPUSH
8736: LD_VAR 0 2
8740: PPUSH
8741: CALL 25228 0 2
// end ;
8745: PPOPN 2
8747: END
// on Contact ( s1 , s2 ) do begin if s1 = 1 and s2 = 2 and not arab_spotted then
8748: LD_VAR 0 1
8752: PUSH
8753: LD_INT 1
8755: EQUAL
8756: IFFALSE 8768
8758: PUSH
8759: LD_VAR 0 2
8763: PUSH
8764: LD_INT 2
8766: EQUAL
8767: AND
8768: IFFALSE 8777
8770: PUSH
8771: LD_EXP 13
8775: NOT
8776: AND
8777: IFFALSE 8787
// arab_spotted := true ;
8779: LD_ADDR_EXP 13
8783: PUSH
8784: LD_INT 1
8786: ST_TO_ADDR
// end ;
8787: PPOPN 2
8789: END
// on EndTheMissionRaised ( p ) do begin if FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] , [ f_type , unit_human ] ] ) then
8790: LD_INT 22
8792: PUSH
8793: LD_INT 2
8795: PUSH
8796: EMPTY
8797: LIST
8798: LIST
8799: PUSH
8800: LD_INT 50
8802: PUSH
8803: EMPTY
8804: LIST
8805: PUSH
8806: LD_INT 21
8808: PUSH
8809: LD_INT 1
8811: PUSH
8812: EMPTY
8813: LIST
8814: LIST
8815: PUSH
8816: EMPTY
8817: LIST
8818: LIST
8819: LIST
8820: PPUSH
8821: CALL_OW 69
8825: IFFALSE 8836
// begin Query ( QArabOnMap ) ;
8827: LD_STRING QArabOnMap
8829: PPUSH
8830: CALL_OW 97
// exit ;
8834: GO 8852
// end ; end_the_mission_allowed := false ;
8836: LD_ADDR_OWVAR 57
8840: PUSH
8841: LD_INT 0
8843: ST_TO_ADDR
// end_mission := true ;
8844: LD_ADDR_EXP 14
8848: PUSH
8849: LD_INT 1
8851: ST_TO_ADDR
// end ;
8852: PPOPN 1
8854: END
// on ApemanTamed ( apeman , sci ) do begin if GetSide ( sci ) = 1 then
8855: LD_VAR 0 2
8859: PPUSH
8860: CALL_OW 255
8864: PUSH
8865: LD_INT 1
8867: EQUAL
8868: IFFALSE 8884
// apeman_counter := apeman_counter + 1 ;
8870: LD_ADDR_EXP 12
8874: PUSH
8875: LD_EXP 12
8879: PUSH
8880: LD_INT 1
8882: PLUS
8883: ST_TO_ADDR
// if not first_apeman_tamed then
8884: LD_EXP 8
8888: NOT
8889: IFFALSE 9088
// begin first_apeman_tamed := true ;
8891: LD_ADDR_EXP 8
8895: PUSH
8896: LD_INT 1
8898: ST_TO_ADDR
// if sci = Gladstone then
8899: LD_VAR 0 2
8903: PUSH
8904: LD_EXP 18
8908: EQUAL
8909: IFFALSE 8923
// Say ( Gladstone , D7b-Glad-1 ) ;
8911: LD_EXP 18
8915: PPUSH
8916: LD_STRING D7b-Glad-1
8918: PPUSH
8919: CALL_OW 88
// if sci = Denis then
8923: LD_VAR 0 2
8927: PUSH
8928: LD_EXP 20
8932: EQUAL
8933: IFFALSE 8947
// Say ( Denis , D7a-Den-1 ) ;
8935: LD_EXP 20
8939: PPUSH
8940: LD_STRING D7a-Den-1
8942: PPUSH
8943: CALL_OW 88
// if not sci in [ JMM , Gladstone , Denis , Lisa , Frank , Bobby , Cyrus , Donaldson ] then
8947: LD_VAR 0 2
8951: PUSH
8952: LD_EXP 17
8956: PUSH
8957: LD_EXP 18
8961: PUSH
8962: LD_EXP 20
8966: PUSH
8967: LD_EXP 23
8971: PUSH
8972: LD_EXP 24
8976: PUSH
8977: LD_EXP 25
8981: PUSH
8982: LD_EXP 26
8986: PUSH
8987: LD_EXP 22
8991: PUSH
8992: EMPTY
8993: LIST
8994: LIST
8995: LIST
8996: LIST
8997: LIST
8998: LIST
8999: LIST
9000: LIST
9001: IN
9002: NOT
9003: IFFALSE 9046
// begin if GetSex ( sci ) = sex_male then
9005: LD_VAR 0 2
9009: PPUSH
9010: CALL_OW 258
9014: PUSH
9015: LD_INT 1
9017: EQUAL
9018: IFFALSE 9034
// Say ( sci , D7c-Sci1-1 ) else
9020: LD_VAR 0 2
9024: PPUSH
9025: LD_STRING D7c-Sci1-1
9027: PPUSH
9028: CALL_OW 88
9032: GO 9046
// Say ( sci , D7c-FSci1-1 ) ;
9034: LD_VAR 0 2
9038: PPUSH
9039: LD_STRING D7c-FSci1-1
9041: PPUSH
9042: CALL_OW 88
// end ; if sci <> Gladstone then
9046: LD_VAR 0 2
9050: PUSH
9051: LD_EXP 18
9055: NONEQUAL
9056: IFFALSE 9070
// Say ( Gladstone , D7c-Glad-1 ) ;
9058: LD_EXP 18
9062: PPUSH
9063: LD_STRING D7c-Glad-1
9065: PPUSH
9066: CALL_OW 88
// if Lisa then
9070: LD_EXP 23
9074: IFFALSE 9088
// Say ( Lisa , D8-Lisa-1 ) ;
9076: LD_EXP 23
9080: PPUSH
9081: LD_STRING D8-Lisa-1
9083: PPUSH
9084: CALL_OW 88
// end ; end ; end_of_file end_of_file
9088: PPOPN 2
9090: END
// export globalGameSaveCounter ; every 0 0$1 do
9091: GO 9093
9093: DISABLE
// begin enable ;
9094: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
9095: LD_STRING updateTimer(
9097: PUSH
9098: LD_OWVAR 1
9102: STR
9103: PUSH
9104: LD_STRING );
9106: STR
9107: PPUSH
9108: CALL_OW 559
// end ;
9112: END
// every 0 0$1 do
9113: GO 9115
9115: DISABLE
// begin globalGameSaveCounter := 0 ;
9116: LD_ADDR_EXP 31
9120: PUSH
9121: LD_INT 0
9123: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
9124: LD_STRING setGameSaveCounter(0)
9126: PPUSH
9127: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
9131: LD_STRING initStreamRollete();
9133: PPUSH
9134: CALL_OW 559
// InitStreamMode ;
9138: CALL 10483 0 0
// DefineStreamItems ( false ) ;
9142: LD_INT 0
9144: PPUSH
9145: CALL 10947 0 1
// end ;
9149: END
// export function SOS_MapStart ( ) ; begin
9150: LD_INT 0
9152: PPUSH
// if streamModeActive then
9153: LD_EXP 32
9157: IFFALSE 9166
// DefineStreamItems ( true ) ;
9159: LD_INT 1
9161: PPUSH
9162: CALL 10947 0 1
// UpdateLuaVariables ( ) ;
9166: CALL 9183 0 0
// UpdateFactoryWaypoints ( ) ;
9170: CALL 24069 0 0
// UpdateWarehouseGatheringPoints ( ) ;
9174: CALL 24321 0 0
// end ;
9178: LD_VAR 0 1
9182: RET
// function UpdateLuaVariables ( ) ; begin
9183: LD_INT 0
9185: PPUSH
// if globalGameSaveCounter then
9186: LD_EXP 31
9190: IFFALSE 9224
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
9192: LD_ADDR_EXP 31
9196: PUSH
9197: LD_EXP 31
9201: PPUSH
9202: CALL 70101 0 1
9206: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
9207: LD_STRING setGameSaveCounter(
9209: PUSH
9210: LD_EXP 31
9214: STR
9215: PUSH
9216: LD_STRING )
9218: STR
9219: PPUSH
9220: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
9224: LD_STRING setGameDifficulty(
9226: PUSH
9227: LD_OWVAR 67
9231: STR
9232: PUSH
9233: LD_STRING )
9235: STR
9236: PPUSH
9237: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
9241: LD_STRING displayDifficulty(
9243: PUSH
9244: LD_OWVAR 67
9248: STR
9249: PUSH
9250: LD_STRING )
9252: STR
9253: PPUSH
9254: CALL_OW 559
// end ;
9258: LD_VAR 0 1
9262: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
9263: LD_INT 0
9265: PPUSH
// if p2 = stream_mode then
9266: LD_VAR 0 2
9270: PUSH
9271: LD_INT 100
9273: EQUAL
9274: IFFALSE 10277
// begin if not StreamModeActive then
9276: LD_EXP 32
9280: NOT
9281: IFFALSE 9291
// StreamModeActive := true ;
9283: LD_ADDR_EXP 32
9287: PUSH
9288: LD_INT 1
9290: ST_TO_ADDR
// if p3 = 0 then
9291: LD_VAR 0 3
9295: PUSH
9296: LD_INT 0
9298: EQUAL
9299: IFFALSE 9305
// InitStreamMode ;
9301: CALL 10483 0 0
// if p3 = 1 then
9305: LD_VAR 0 3
9309: PUSH
9310: LD_INT 1
9312: EQUAL
9313: IFFALSE 9323
// sRocket := true ;
9315: LD_ADDR_EXP 37
9319: PUSH
9320: LD_INT 1
9322: ST_TO_ADDR
// if p3 = 2 then
9323: LD_VAR 0 3
9327: PUSH
9328: LD_INT 2
9330: EQUAL
9331: IFFALSE 9341
// sSpeed := true ;
9333: LD_ADDR_EXP 36
9337: PUSH
9338: LD_INT 1
9340: ST_TO_ADDR
// if p3 = 3 then
9341: LD_VAR 0 3
9345: PUSH
9346: LD_INT 3
9348: EQUAL
9349: IFFALSE 9359
// sEngine := true ;
9351: LD_ADDR_EXP 38
9355: PUSH
9356: LD_INT 1
9358: ST_TO_ADDR
// if p3 = 4 then
9359: LD_VAR 0 3
9363: PUSH
9364: LD_INT 4
9366: EQUAL
9367: IFFALSE 9377
// sSpec := true ;
9369: LD_ADDR_EXP 35
9373: PUSH
9374: LD_INT 1
9376: ST_TO_ADDR
// if p3 = 5 then
9377: LD_VAR 0 3
9381: PUSH
9382: LD_INT 5
9384: EQUAL
9385: IFFALSE 9395
// sLevel := true ;
9387: LD_ADDR_EXP 39
9391: PUSH
9392: LD_INT 1
9394: ST_TO_ADDR
// if p3 = 6 then
9395: LD_VAR 0 3
9399: PUSH
9400: LD_INT 6
9402: EQUAL
9403: IFFALSE 9413
// sArmoury := true ;
9405: LD_ADDR_EXP 40
9409: PUSH
9410: LD_INT 1
9412: ST_TO_ADDR
// if p3 = 7 then
9413: LD_VAR 0 3
9417: PUSH
9418: LD_INT 7
9420: EQUAL
9421: IFFALSE 9431
// sRadar := true ;
9423: LD_ADDR_EXP 41
9427: PUSH
9428: LD_INT 1
9430: ST_TO_ADDR
// if p3 = 8 then
9431: LD_VAR 0 3
9435: PUSH
9436: LD_INT 8
9438: EQUAL
9439: IFFALSE 9449
// sBunker := true ;
9441: LD_ADDR_EXP 42
9445: PUSH
9446: LD_INT 1
9448: ST_TO_ADDR
// if p3 = 9 then
9449: LD_VAR 0 3
9453: PUSH
9454: LD_INT 9
9456: EQUAL
9457: IFFALSE 9467
// sHack := true ;
9459: LD_ADDR_EXP 43
9463: PUSH
9464: LD_INT 1
9466: ST_TO_ADDR
// if p3 = 10 then
9467: LD_VAR 0 3
9471: PUSH
9472: LD_INT 10
9474: EQUAL
9475: IFFALSE 9485
// sFire := true ;
9477: LD_ADDR_EXP 44
9481: PUSH
9482: LD_INT 1
9484: ST_TO_ADDR
// if p3 = 11 then
9485: LD_VAR 0 3
9489: PUSH
9490: LD_INT 11
9492: EQUAL
9493: IFFALSE 9503
// sRefresh := true ;
9495: LD_ADDR_EXP 45
9499: PUSH
9500: LD_INT 1
9502: ST_TO_ADDR
// if p3 = 12 then
9503: LD_VAR 0 3
9507: PUSH
9508: LD_INT 12
9510: EQUAL
9511: IFFALSE 9521
// sExp := true ;
9513: LD_ADDR_EXP 46
9517: PUSH
9518: LD_INT 1
9520: ST_TO_ADDR
// if p3 = 13 then
9521: LD_VAR 0 3
9525: PUSH
9526: LD_INT 13
9528: EQUAL
9529: IFFALSE 9539
// sDepot := true ;
9531: LD_ADDR_EXP 47
9535: PUSH
9536: LD_INT 1
9538: ST_TO_ADDR
// if p3 = 14 then
9539: LD_VAR 0 3
9543: PUSH
9544: LD_INT 14
9546: EQUAL
9547: IFFALSE 9557
// sFlag := true ;
9549: LD_ADDR_EXP 48
9553: PUSH
9554: LD_INT 1
9556: ST_TO_ADDR
// if p3 = 15 then
9557: LD_VAR 0 3
9561: PUSH
9562: LD_INT 15
9564: EQUAL
9565: IFFALSE 9575
// sKamikadze := true ;
9567: LD_ADDR_EXP 56
9571: PUSH
9572: LD_INT 1
9574: ST_TO_ADDR
// if p3 = 16 then
9575: LD_VAR 0 3
9579: PUSH
9580: LD_INT 16
9582: EQUAL
9583: IFFALSE 9593
// sTroll := true ;
9585: LD_ADDR_EXP 57
9589: PUSH
9590: LD_INT 1
9592: ST_TO_ADDR
// if p3 = 17 then
9593: LD_VAR 0 3
9597: PUSH
9598: LD_INT 17
9600: EQUAL
9601: IFFALSE 9611
// sSlow := true ;
9603: LD_ADDR_EXP 58
9607: PUSH
9608: LD_INT 1
9610: ST_TO_ADDR
// if p3 = 18 then
9611: LD_VAR 0 3
9615: PUSH
9616: LD_INT 18
9618: EQUAL
9619: IFFALSE 9629
// sLack := true ;
9621: LD_ADDR_EXP 59
9625: PUSH
9626: LD_INT 1
9628: ST_TO_ADDR
// if p3 = 19 then
9629: LD_VAR 0 3
9633: PUSH
9634: LD_INT 19
9636: EQUAL
9637: IFFALSE 9647
// sTank := true ;
9639: LD_ADDR_EXP 61
9643: PUSH
9644: LD_INT 1
9646: ST_TO_ADDR
// if p3 = 20 then
9647: LD_VAR 0 3
9651: PUSH
9652: LD_INT 20
9654: EQUAL
9655: IFFALSE 9665
// sRemote := true ;
9657: LD_ADDR_EXP 62
9661: PUSH
9662: LD_INT 1
9664: ST_TO_ADDR
// if p3 = 21 then
9665: LD_VAR 0 3
9669: PUSH
9670: LD_INT 21
9672: EQUAL
9673: IFFALSE 9683
// sPowell := true ;
9675: LD_ADDR_EXP 63
9679: PUSH
9680: LD_INT 1
9682: ST_TO_ADDR
// if p3 = 22 then
9683: LD_VAR 0 3
9687: PUSH
9688: LD_INT 22
9690: EQUAL
9691: IFFALSE 9701
// sTeleport := true ;
9693: LD_ADDR_EXP 66
9697: PUSH
9698: LD_INT 1
9700: ST_TO_ADDR
// if p3 = 23 then
9701: LD_VAR 0 3
9705: PUSH
9706: LD_INT 23
9708: EQUAL
9709: IFFALSE 9719
// sOilTower := true ;
9711: LD_ADDR_EXP 68
9715: PUSH
9716: LD_INT 1
9718: ST_TO_ADDR
// if p3 = 24 then
9719: LD_VAR 0 3
9723: PUSH
9724: LD_INT 24
9726: EQUAL
9727: IFFALSE 9737
// sShovel := true ;
9729: LD_ADDR_EXP 69
9733: PUSH
9734: LD_INT 1
9736: ST_TO_ADDR
// if p3 = 25 then
9737: LD_VAR 0 3
9741: PUSH
9742: LD_INT 25
9744: EQUAL
9745: IFFALSE 9755
// sSheik := true ;
9747: LD_ADDR_EXP 70
9751: PUSH
9752: LD_INT 1
9754: ST_TO_ADDR
// if p3 = 26 then
9755: LD_VAR 0 3
9759: PUSH
9760: LD_INT 26
9762: EQUAL
9763: IFFALSE 9773
// sEarthquake := true ;
9765: LD_ADDR_EXP 72
9769: PUSH
9770: LD_INT 1
9772: ST_TO_ADDR
// if p3 = 27 then
9773: LD_VAR 0 3
9777: PUSH
9778: LD_INT 27
9780: EQUAL
9781: IFFALSE 9791
// sAI := true ;
9783: LD_ADDR_EXP 73
9787: PUSH
9788: LD_INT 1
9790: ST_TO_ADDR
// if p3 = 28 then
9791: LD_VAR 0 3
9795: PUSH
9796: LD_INT 28
9798: EQUAL
9799: IFFALSE 9809
// sCargo := true ;
9801: LD_ADDR_EXP 76
9805: PUSH
9806: LD_INT 1
9808: ST_TO_ADDR
// if p3 = 29 then
9809: LD_VAR 0 3
9813: PUSH
9814: LD_INT 29
9816: EQUAL
9817: IFFALSE 9827
// sDLaser := true ;
9819: LD_ADDR_EXP 77
9823: PUSH
9824: LD_INT 1
9826: ST_TO_ADDR
// if p3 = 30 then
9827: LD_VAR 0 3
9831: PUSH
9832: LD_INT 30
9834: EQUAL
9835: IFFALSE 9845
// sExchange := true ;
9837: LD_ADDR_EXP 78
9841: PUSH
9842: LD_INT 1
9844: ST_TO_ADDR
// if p3 = 31 then
9845: LD_VAR 0 3
9849: PUSH
9850: LD_INT 31
9852: EQUAL
9853: IFFALSE 9863
// sFac := true ;
9855: LD_ADDR_EXP 79
9859: PUSH
9860: LD_INT 1
9862: ST_TO_ADDR
// if p3 = 32 then
9863: LD_VAR 0 3
9867: PUSH
9868: LD_INT 32
9870: EQUAL
9871: IFFALSE 9881
// sPower := true ;
9873: LD_ADDR_EXP 80
9877: PUSH
9878: LD_INT 1
9880: ST_TO_ADDR
// if p3 = 33 then
9881: LD_VAR 0 3
9885: PUSH
9886: LD_INT 33
9888: EQUAL
9889: IFFALSE 9899
// sRandom := true ;
9891: LD_ADDR_EXP 81
9895: PUSH
9896: LD_INT 1
9898: ST_TO_ADDR
// if p3 = 34 then
9899: LD_VAR 0 3
9903: PUSH
9904: LD_INT 34
9906: EQUAL
9907: IFFALSE 9917
// sShield := true ;
9909: LD_ADDR_EXP 82
9913: PUSH
9914: LD_INT 1
9916: ST_TO_ADDR
// if p3 = 35 then
9917: LD_VAR 0 3
9921: PUSH
9922: LD_INT 35
9924: EQUAL
9925: IFFALSE 9935
// sTime := true ;
9927: LD_ADDR_EXP 83
9931: PUSH
9932: LD_INT 1
9934: ST_TO_ADDR
// if p3 = 36 then
9935: LD_VAR 0 3
9939: PUSH
9940: LD_INT 36
9942: EQUAL
9943: IFFALSE 9953
// sTools := true ;
9945: LD_ADDR_EXP 84
9949: PUSH
9950: LD_INT 1
9952: ST_TO_ADDR
// if p3 = 101 then
9953: LD_VAR 0 3
9957: PUSH
9958: LD_INT 101
9960: EQUAL
9961: IFFALSE 9971
// sSold := true ;
9963: LD_ADDR_EXP 49
9967: PUSH
9968: LD_INT 1
9970: ST_TO_ADDR
// if p3 = 102 then
9971: LD_VAR 0 3
9975: PUSH
9976: LD_INT 102
9978: EQUAL
9979: IFFALSE 9989
// sDiff := true ;
9981: LD_ADDR_EXP 50
9985: PUSH
9986: LD_INT 1
9988: ST_TO_ADDR
// if p3 = 103 then
9989: LD_VAR 0 3
9993: PUSH
9994: LD_INT 103
9996: EQUAL
9997: IFFALSE 10007
// sFog := true ;
9999: LD_ADDR_EXP 53
10003: PUSH
10004: LD_INT 1
10006: ST_TO_ADDR
// if p3 = 104 then
10007: LD_VAR 0 3
10011: PUSH
10012: LD_INT 104
10014: EQUAL
10015: IFFALSE 10025
// sReset := true ;
10017: LD_ADDR_EXP 54
10021: PUSH
10022: LD_INT 1
10024: ST_TO_ADDR
// if p3 = 105 then
10025: LD_VAR 0 3
10029: PUSH
10030: LD_INT 105
10032: EQUAL
10033: IFFALSE 10043
// sSun := true ;
10035: LD_ADDR_EXP 55
10039: PUSH
10040: LD_INT 1
10042: ST_TO_ADDR
// if p3 = 106 then
10043: LD_VAR 0 3
10047: PUSH
10048: LD_INT 106
10050: EQUAL
10051: IFFALSE 10061
// sTiger := true ;
10053: LD_ADDR_EXP 51
10057: PUSH
10058: LD_INT 1
10060: ST_TO_ADDR
// if p3 = 107 then
10061: LD_VAR 0 3
10065: PUSH
10066: LD_INT 107
10068: EQUAL
10069: IFFALSE 10079
// sBomb := true ;
10071: LD_ADDR_EXP 52
10075: PUSH
10076: LD_INT 1
10078: ST_TO_ADDR
// if p3 = 108 then
10079: LD_VAR 0 3
10083: PUSH
10084: LD_INT 108
10086: EQUAL
10087: IFFALSE 10097
// sWound := true ;
10089: LD_ADDR_EXP 60
10093: PUSH
10094: LD_INT 1
10096: ST_TO_ADDR
// if p3 = 109 then
10097: LD_VAR 0 3
10101: PUSH
10102: LD_INT 109
10104: EQUAL
10105: IFFALSE 10115
// sBetray := true ;
10107: LD_ADDR_EXP 64
10111: PUSH
10112: LD_INT 1
10114: ST_TO_ADDR
// if p3 = 110 then
10115: LD_VAR 0 3
10119: PUSH
10120: LD_INT 110
10122: EQUAL
10123: IFFALSE 10133
// sContamin := true ;
10125: LD_ADDR_EXP 65
10129: PUSH
10130: LD_INT 1
10132: ST_TO_ADDR
// if p3 = 111 then
10133: LD_VAR 0 3
10137: PUSH
10138: LD_INT 111
10140: EQUAL
10141: IFFALSE 10151
// sOil := true ;
10143: LD_ADDR_EXP 67
10147: PUSH
10148: LD_INT 1
10150: ST_TO_ADDR
// if p3 = 112 then
10151: LD_VAR 0 3
10155: PUSH
10156: LD_INT 112
10158: EQUAL
10159: IFFALSE 10169
// sStu := true ;
10161: LD_ADDR_EXP 71
10165: PUSH
10166: LD_INT 1
10168: ST_TO_ADDR
// if p3 = 113 then
10169: LD_VAR 0 3
10173: PUSH
10174: LD_INT 113
10176: EQUAL
10177: IFFALSE 10187
// sBazooka := true ;
10179: LD_ADDR_EXP 74
10183: PUSH
10184: LD_INT 1
10186: ST_TO_ADDR
// if p3 = 114 then
10187: LD_VAR 0 3
10191: PUSH
10192: LD_INT 114
10194: EQUAL
10195: IFFALSE 10205
// sMortar := true ;
10197: LD_ADDR_EXP 75
10201: PUSH
10202: LD_INT 1
10204: ST_TO_ADDR
// if p3 = 115 then
10205: LD_VAR 0 3
10209: PUSH
10210: LD_INT 115
10212: EQUAL
10213: IFFALSE 10223
// sRanger := true ;
10215: LD_ADDR_EXP 85
10219: PUSH
10220: LD_INT 1
10222: ST_TO_ADDR
// if p3 = 116 then
10223: LD_VAR 0 3
10227: PUSH
10228: LD_INT 116
10230: EQUAL
10231: IFFALSE 10241
// sComputer := true ;
10233: LD_ADDR_EXP 86
10237: PUSH
10238: LD_INT 1
10240: ST_TO_ADDR
// if p3 = 117 then
10241: LD_VAR 0 3
10245: PUSH
10246: LD_INT 117
10248: EQUAL
10249: IFFALSE 10259
// s30 := true ;
10251: LD_ADDR_EXP 87
10255: PUSH
10256: LD_INT 1
10258: ST_TO_ADDR
// if p3 = 118 then
10259: LD_VAR 0 3
10263: PUSH
10264: LD_INT 118
10266: EQUAL
10267: IFFALSE 10277
// s60 := true ;
10269: LD_ADDR_EXP 88
10273: PUSH
10274: LD_INT 1
10276: ST_TO_ADDR
// end ; if p2 = hack_mode then
10277: LD_VAR 0 2
10281: PUSH
10282: LD_INT 101
10284: EQUAL
10285: IFFALSE 10413
// begin case p3 of 1 :
10287: LD_VAR 0 3
10291: PUSH
10292: LD_INT 1
10294: DOUBLE
10295: EQUAL
10296: IFTRUE 10300
10298: GO 10307
10300: POP
// hHackUnlimitedResources ; 2 :
10301: CALL 22676 0 0
10305: GO 10413
10307: LD_INT 2
10309: DOUBLE
10310: EQUAL
10311: IFTRUE 10315
10313: GO 10322
10315: POP
// hHackSetLevel10 ; 3 :
10316: CALL 22809 0 0
10320: GO 10413
10322: LD_INT 3
10324: DOUBLE
10325: EQUAL
10326: IFTRUE 10330
10328: GO 10337
10330: POP
// hHackSetLevel10YourUnits ; 4 :
10331: CALL 22894 0 0
10335: GO 10413
10337: LD_INT 4
10339: DOUBLE
10340: EQUAL
10341: IFTRUE 10345
10343: GO 10352
10345: POP
// hHackInvincible ; 5 :
10346: CALL 23342 0 0
10350: GO 10413
10352: LD_INT 5
10354: DOUBLE
10355: EQUAL
10356: IFTRUE 10360
10358: GO 10367
10360: POP
// hHackInvisible ; 6 :
10361: CALL 23453 0 0
10365: GO 10413
10367: LD_INT 6
10369: DOUBLE
10370: EQUAL
10371: IFTRUE 10375
10373: GO 10382
10375: POP
// hHackChangeYourSide ; 7 :
10376: CALL 23510 0 0
10380: GO 10413
10382: LD_INT 7
10384: DOUBLE
10385: EQUAL
10386: IFTRUE 10390
10388: GO 10397
10390: POP
// hHackChangeUnitSide ; 8 :
10391: CALL 23552 0 0
10395: GO 10413
10397: LD_INT 8
10399: DOUBLE
10400: EQUAL
10401: IFTRUE 10405
10403: GO 10412
10405: POP
// hHackFog ; end ;
10406: CALL 23653 0 0
10410: GO 10413
10412: POP
// end ; if p2 = game_save_mode then
10413: LD_VAR 0 2
10417: PUSH
10418: LD_INT 102
10420: EQUAL
10421: IFFALSE 10478
// begin if p3 = 1 then
10423: LD_VAR 0 3
10427: PUSH
10428: LD_INT 1
10430: EQUAL
10431: IFFALSE 10443
// globalGameSaveCounter := p4 ;
10433: LD_ADDR_EXP 31
10437: PUSH
10438: LD_VAR 0 4
10442: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
10443: LD_VAR 0 3
10447: PUSH
10448: LD_INT 2
10450: EQUAL
10451: IFFALSE 10459
10453: PUSH
10454: LD_EXP 31
10458: AND
10459: IFFALSE 10478
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
10461: LD_STRING setGameSaveCounter(
10463: PUSH
10464: LD_EXP 31
10468: STR
10469: PUSH
10470: LD_STRING )
10472: STR
10473: PPUSH
10474: CALL_OW 559
// end ; end ;
10478: LD_VAR 0 7
10482: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
10483: LD_INT 0
10485: PPUSH
// streamModeActive := false ;
10486: LD_ADDR_EXP 32
10490: PUSH
10491: LD_INT 0
10493: ST_TO_ADDR
// normalCounter := 36 ;
10494: LD_ADDR_EXP 33
10498: PUSH
10499: LD_INT 36
10501: ST_TO_ADDR
// hardcoreCounter := 18 ;
10502: LD_ADDR_EXP 34
10506: PUSH
10507: LD_INT 18
10509: ST_TO_ADDR
// sRocket := false ;
10510: LD_ADDR_EXP 37
10514: PUSH
10515: LD_INT 0
10517: ST_TO_ADDR
// sSpeed := false ;
10518: LD_ADDR_EXP 36
10522: PUSH
10523: LD_INT 0
10525: ST_TO_ADDR
// sEngine := false ;
10526: LD_ADDR_EXP 38
10530: PUSH
10531: LD_INT 0
10533: ST_TO_ADDR
// sSpec := false ;
10534: LD_ADDR_EXP 35
10538: PUSH
10539: LD_INT 0
10541: ST_TO_ADDR
// sLevel := false ;
10542: LD_ADDR_EXP 39
10546: PUSH
10547: LD_INT 0
10549: ST_TO_ADDR
// sArmoury := false ;
10550: LD_ADDR_EXP 40
10554: PUSH
10555: LD_INT 0
10557: ST_TO_ADDR
// sRadar := false ;
10558: LD_ADDR_EXP 41
10562: PUSH
10563: LD_INT 0
10565: ST_TO_ADDR
// sBunker := false ;
10566: LD_ADDR_EXP 42
10570: PUSH
10571: LD_INT 0
10573: ST_TO_ADDR
// sHack := false ;
10574: LD_ADDR_EXP 43
10578: PUSH
10579: LD_INT 0
10581: ST_TO_ADDR
// sFire := false ;
10582: LD_ADDR_EXP 44
10586: PUSH
10587: LD_INT 0
10589: ST_TO_ADDR
// sRefresh := false ;
10590: LD_ADDR_EXP 45
10594: PUSH
10595: LD_INT 0
10597: ST_TO_ADDR
// sExp := false ;
10598: LD_ADDR_EXP 46
10602: PUSH
10603: LD_INT 0
10605: ST_TO_ADDR
// sDepot := false ;
10606: LD_ADDR_EXP 47
10610: PUSH
10611: LD_INT 0
10613: ST_TO_ADDR
// sFlag := false ;
10614: LD_ADDR_EXP 48
10618: PUSH
10619: LD_INT 0
10621: ST_TO_ADDR
// sKamikadze := false ;
10622: LD_ADDR_EXP 56
10626: PUSH
10627: LD_INT 0
10629: ST_TO_ADDR
// sTroll := false ;
10630: LD_ADDR_EXP 57
10634: PUSH
10635: LD_INT 0
10637: ST_TO_ADDR
// sSlow := false ;
10638: LD_ADDR_EXP 58
10642: PUSH
10643: LD_INT 0
10645: ST_TO_ADDR
// sLack := false ;
10646: LD_ADDR_EXP 59
10650: PUSH
10651: LD_INT 0
10653: ST_TO_ADDR
// sTank := false ;
10654: LD_ADDR_EXP 61
10658: PUSH
10659: LD_INT 0
10661: ST_TO_ADDR
// sRemote := false ;
10662: LD_ADDR_EXP 62
10666: PUSH
10667: LD_INT 0
10669: ST_TO_ADDR
// sPowell := false ;
10670: LD_ADDR_EXP 63
10674: PUSH
10675: LD_INT 0
10677: ST_TO_ADDR
// sTeleport := false ;
10678: LD_ADDR_EXP 66
10682: PUSH
10683: LD_INT 0
10685: ST_TO_ADDR
// sOilTower := false ;
10686: LD_ADDR_EXP 68
10690: PUSH
10691: LD_INT 0
10693: ST_TO_ADDR
// sShovel := false ;
10694: LD_ADDR_EXP 69
10698: PUSH
10699: LD_INT 0
10701: ST_TO_ADDR
// sSheik := false ;
10702: LD_ADDR_EXP 70
10706: PUSH
10707: LD_INT 0
10709: ST_TO_ADDR
// sEarthquake := false ;
10710: LD_ADDR_EXP 72
10714: PUSH
10715: LD_INT 0
10717: ST_TO_ADDR
// sAI := false ;
10718: LD_ADDR_EXP 73
10722: PUSH
10723: LD_INT 0
10725: ST_TO_ADDR
// sCargo := false ;
10726: LD_ADDR_EXP 76
10730: PUSH
10731: LD_INT 0
10733: ST_TO_ADDR
// sDLaser := false ;
10734: LD_ADDR_EXP 77
10738: PUSH
10739: LD_INT 0
10741: ST_TO_ADDR
// sExchange := false ;
10742: LD_ADDR_EXP 78
10746: PUSH
10747: LD_INT 0
10749: ST_TO_ADDR
// sFac := false ;
10750: LD_ADDR_EXP 79
10754: PUSH
10755: LD_INT 0
10757: ST_TO_ADDR
// sPower := false ;
10758: LD_ADDR_EXP 80
10762: PUSH
10763: LD_INT 0
10765: ST_TO_ADDR
// sRandom := false ;
10766: LD_ADDR_EXP 81
10770: PUSH
10771: LD_INT 0
10773: ST_TO_ADDR
// sShield := false ;
10774: LD_ADDR_EXP 82
10778: PUSH
10779: LD_INT 0
10781: ST_TO_ADDR
// sTime := false ;
10782: LD_ADDR_EXP 83
10786: PUSH
10787: LD_INT 0
10789: ST_TO_ADDR
// sTools := false ;
10790: LD_ADDR_EXP 84
10794: PUSH
10795: LD_INT 0
10797: ST_TO_ADDR
// sSold := false ;
10798: LD_ADDR_EXP 49
10802: PUSH
10803: LD_INT 0
10805: ST_TO_ADDR
// sDiff := false ;
10806: LD_ADDR_EXP 50
10810: PUSH
10811: LD_INT 0
10813: ST_TO_ADDR
// sFog := false ;
10814: LD_ADDR_EXP 53
10818: PUSH
10819: LD_INT 0
10821: ST_TO_ADDR
// sReset := false ;
10822: LD_ADDR_EXP 54
10826: PUSH
10827: LD_INT 0
10829: ST_TO_ADDR
// sSun := false ;
10830: LD_ADDR_EXP 55
10834: PUSH
10835: LD_INT 0
10837: ST_TO_ADDR
// sTiger := false ;
10838: LD_ADDR_EXP 51
10842: PUSH
10843: LD_INT 0
10845: ST_TO_ADDR
// sBomb := false ;
10846: LD_ADDR_EXP 52
10850: PUSH
10851: LD_INT 0
10853: ST_TO_ADDR
// sWound := false ;
10854: LD_ADDR_EXP 60
10858: PUSH
10859: LD_INT 0
10861: ST_TO_ADDR
// sBetray := false ;
10862: LD_ADDR_EXP 64
10866: PUSH
10867: LD_INT 0
10869: ST_TO_ADDR
// sContamin := false ;
10870: LD_ADDR_EXP 65
10874: PUSH
10875: LD_INT 0
10877: ST_TO_ADDR
// sOil := false ;
10878: LD_ADDR_EXP 67
10882: PUSH
10883: LD_INT 0
10885: ST_TO_ADDR
// sStu := false ;
10886: LD_ADDR_EXP 71
10890: PUSH
10891: LD_INT 0
10893: ST_TO_ADDR
// sBazooka := false ;
10894: LD_ADDR_EXP 74
10898: PUSH
10899: LD_INT 0
10901: ST_TO_ADDR
// sMortar := false ;
10902: LD_ADDR_EXP 75
10906: PUSH
10907: LD_INT 0
10909: ST_TO_ADDR
// sRanger := false ;
10910: LD_ADDR_EXP 85
10914: PUSH
10915: LD_INT 0
10917: ST_TO_ADDR
// sComputer := false ;
10918: LD_ADDR_EXP 86
10922: PUSH
10923: LD_INT 0
10925: ST_TO_ADDR
// s30 := false ;
10926: LD_ADDR_EXP 87
10930: PUSH
10931: LD_INT 0
10933: ST_TO_ADDR
// s60 := false ;
10934: LD_ADDR_EXP 88
10938: PUSH
10939: LD_INT 0
10941: ST_TO_ADDR
// end ;
10942: LD_VAR 0 1
10946: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
10947: LD_INT 0
10949: PPUSH
10950: PPUSH
10951: PPUSH
10952: PPUSH
10953: PPUSH
10954: PPUSH
10955: PPUSH
// result := [ ] ;
10956: LD_ADDR_VAR 0 2
10960: PUSH
10961: EMPTY
10962: ST_TO_ADDR
// if campaign_id = 1 then
10963: LD_OWVAR 69
10967: PUSH
10968: LD_INT 1
10970: EQUAL
10971: IFFALSE 14137
// begin case mission_number of 1 :
10973: LD_OWVAR 70
10977: PUSH
10978: LD_INT 1
10980: DOUBLE
10981: EQUAL
10982: IFTRUE 10986
10984: GO 11062
10986: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
10987: LD_ADDR_VAR 0 2
10991: PUSH
10992: LD_INT 2
10994: PUSH
10995: LD_INT 4
10997: PUSH
10998: LD_INT 11
11000: PUSH
11001: LD_INT 12
11003: PUSH
11004: LD_INT 15
11006: PUSH
11007: LD_INT 16
11009: PUSH
11010: LD_INT 22
11012: PUSH
11013: LD_INT 23
11015: PUSH
11016: LD_INT 26
11018: PUSH
11019: EMPTY
11020: LIST
11021: LIST
11022: LIST
11023: LIST
11024: LIST
11025: LIST
11026: LIST
11027: LIST
11028: LIST
11029: PUSH
11030: LD_INT 101
11032: PUSH
11033: LD_INT 102
11035: PUSH
11036: LD_INT 106
11038: PUSH
11039: LD_INT 116
11041: PUSH
11042: LD_INT 117
11044: PUSH
11045: LD_INT 118
11047: PUSH
11048: EMPTY
11049: LIST
11050: LIST
11051: LIST
11052: LIST
11053: LIST
11054: LIST
11055: PUSH
11056: EMPTY
11057: LIST
11058: LIST
11059: ST_TO_ADDR
11060: GO 14135
11062: LD_INT 2
11064: DOUBLE
11065: EQUAL
11066: IFTRUE 11070
11068: GO 11154
11070: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
11071: LD_ADDR_VAR 0 2
11075: PUSH
11076: LD_INT 2
11078: PUSH
11079: LD_INT 4
11081: PUSH
11082: LD_INT 11
11084: PUSH
11085: LD_INT 12
11087: PUSH
11088: LD_INT 15
11090: PUSH
11091: LD_INT 16
11093: PUSH
11094: LD_INT 22
11096: PUSH
11097: LD_INT 23
11099: PUSH
11100: LD_INT 26
11102: PUSH
11103: EMPTY
11104: LIST
11105: LIST
11106: LIST
11107: LIST
11108: LIST
11109: LIST
11110: LIST
11111: LIST
11112: LIST
11113: PUSH
11114: LD_INT 101
11116: PUSH
11117: LD_INT 102
11119: PUSH
11120: LD_INT 105
11122: PUSH
11123: LD_INT 106
11125: PUSH
11126: LD_INT 108
11128: PUSH
11129: LD_INT 116
11131: PUSH
11132: LD_INT 117
11134: PUSH
11135: LD_INT 118
11137: PUSH
11138: EMPTY
11139: LIST
11140: LIST
11141: LIST
11142: LIST
11143: LIST
11144: LIST
11145: LIST
11146: LIST
11147: PUSH
11148: EMPTY
11149: LIST
11150: LIST
11151: ST_TO_ADDR
11152: GO 14135
11154: LD_INT 3
11156: DOUBLE
11157: EQUAL
11158: IFTRUE 11162
11160: GO 11250
11162: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
11163: LD_ADDR_VAR 0 2
11167: PUSH
11168: LD_INT 2
11170: PUSH
11171: LD_INT 4
11173: PUSH
11174: LD_INT 5
11176: PUSH
11177: LD_INT 11
11179: PUSH
11180: LD_INT 12
11182: PUSH
11183: LD_INT 15
11185: PUSH
11186: LD_INT 16
11188: PUSH
11189: LD_INT 22
11191: PUSH
11192: LD_INT 26
11194: PUSH
11195: LD_INT 36
11197: PUSH
11198: EMPTY
11199: LIST
11200: LIST
11201: LIST
11202: LIST
11203: LIST
11204: LIST
11205: LIST
11206: LIST
11207: LIST
11208: LIST
11209: PUSH
11210: LD_INT 101
11212: PUSH
11213: LD_INT 102
11215: PUSH
11216: LD_INT 105
11218: PUSH
11219: LD_INT 106
11221: PUSH
11222: LD_INT 108
11224: PUSH
11225: LD_INT 116
11227: PUSH
11228: LD_INT 117
11230: PUSH
11231: LD_INT 118
11233: PUSH
11234: EMPTY
11235: LIST
11236: LIST
11237: LIST
11238: LIST
11239: LIST
11240: LIST
11241: LIST
11242: LIST
11243: PUSH
11244: EMPTY
11245: LIST
11246: LIST
11247: ST_TO_ADDR
11248: GO 14135
11250: LD_INT 4
11252: DOUBLE
11253: EQUAL
11254: IFTRUE 11258
11256: GO 11354
11258: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
11259: LD_ADDR_VAR 0 2
11263: PUSH
11264: LD_INT 2
11266: PUSH
11267: LD_INT 4
11269: PUSH
11270: LD_INT 5
11272: PUSH
11273: LD_INT 8
11275: PUSH
11276: LD_INT 11
11278: PUSH
11279: LD_INT 12
11281: PUSH
11282: LD_INT 15
11284: PUSH
11285: LD_INT 16
11287: PUSH
11288: LD_INT 22
11290: PUSH
11291: LD_INT 23
11293: PUSH
11294: LD_INT 26
11296: PUSH
11297: LD_INT 36
11299: PUSH
11300: EMPTY
11301: LIST
11302: LIST
11303: LIST
11304: LIST
11305: LIST
11306: LIST
11307: LIST
11308: LIST
11309: LIST
11310: LIST
11311: LIST
11312: LIST
11313: PUSH
11314: LD_INT 101
11316: PUSH
11317: LD_INT 102
11319: PUSH
11320: LD_INT 105
11322: PUSH
11323: LD_INT 106
11325: PUSH
11326: LD_INT 108
11328: PUSH
11329: LD_INT 116
11331: PUSH
11332: LD_INT 117
11334: PUSH
11335: LD_INT 118
11337: PUSH
11338: EMPTY
11339: LIST
11340: LIST
11341: LIST
11342: LIST
11343: LIST
11344: LIST
11345: LIST
11346: LIST
11347: PUSH
11348: EMPTY
11349: LIST
11350: LIST
11351: ST_TO_ADDR
11352: GO 14135
11354: LD_INT 5
11356: DOUBLE
11357: EQUAL
11358: IFTRUE 11362
11360: GO 11474
11362: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
11363: LD_ADDR_VAR 0 2
11367: PUSH
11368: LD_INT 2
11370: PUSH
11371: LD_INT 4
11373: PUSH
11374: LD_INT 5
11376: PUSH
11377: LD_INT 6
11379: PUSH
11380: LD_INT 8
11382: PUSH
11383: LD_INT 11
11385: PUSH
11386: LD_INT 12
11388: PUSH
11389: LD_INT 15
11391: PUSH
11392: LD_INT 16
11394: PUSH
11395: LD_INT 22
11397: PUSH
11398: LD_INT 23
11400: PUSH
11401: LD_INT 25
11403: PUSH
11404: LD_INT 26
11406: PUSH
11407: LD_INT 36
11409: PUSH
11410: EMPTY
11411: LIST
11412: LIST
11413: LIST
11414: LIST
11415: LIST
11416: LIST
11417: LIST
11418: LIST
11419: LIST
11420: LIST
11421: LIST
11422: LIST
11423: LIST
11424: LIST
11425: PUSH
11426: LD_INT 101
11428: PUSH
11429: LD_INT 102
11431: PUSH
11432: LD_INT 105
11434: PUSH
11435: LD_INT 106
11437: PUSH
11438: LD_INT 108
11440: PUSH
11441: LD_INT 109
11443: PUSH
11444: LD_INT 112
11446: PUSH
11447: LD_INT 116
11449: PUSH
11450: LD_INT 117
11452: PUSH
11453: LD_INT 118
11455: PUSH
11456: EMPTY
11457: LIST
11458: LIST
11459: LIST
11460: LIST
11461: LIST
11462: LIST
11463: LIST
11464: LIST
11465: LIST
11466: LIST
11467: PUSH
11468: EMPTY
11469: LIST
11470: LIST
11471: ST_TO_ADDR
11472: GO 14135
11474: LD_INT 6
11476: DOUBLE
11477: EQUAL
11478: IFTRUE 11482
11480: GO 11614
11482: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
11483: LD_ADDR_VAR 0 2
11487: PUSH
11488: LD_INT 2
11490: PUSH
11491: LD_INT 4
11493: PUSH
11494: LD_INT 5
11496: PUSH
11497: LD_INT 6
11499: PUSH
11500: LD_INT 8
11502: PUSH
11503: LD_INT 11
11505: PUSH
11506: LD_INT 12
11508: PUSH
11509: LD_INT 15
11511: PUSH
11512: LD_INT 16
11514: PUSH
11515: LD_INT 20
11517: PUSH
11518: LD_INT 21
11520: PUSH
11521: LD_INT 22
11523: PUSH
11524: LD_INT 23
11526: PUSH
11527: LD_INT 25
11529: PUSH
11530: LD_INT 26
11532: PUSH
11533: LD_INT 30
11535: PUSH
11536: LD_INT 31
11538: PUSH
11539: LD_INT 32
11541: PUSH
11542: LD_INT 36
11544: PUSH
11545: EMPTY
11546: LIST
11547: LIST
11548: LIST
11549: LIST
11550: LIST
11551: LIST
11552: LIST
11553: LIST
11554: LIST
11555: LIST
11556: LIST
11557: LIST
11558: LIST
11559: LIST
11560: LIST
11561: LIST
11562: LIST
11563: LIST
11564: LIST
11565: PUSH
11566: LD_INT 101
11568: PUSH
11569: LD_INT 102
11571: PUSH
11572: LD_INT 105
11574: PUSH
11575: LD_INT 106
11577: PUSH
11578: LD_INT 108
11580: PUSH
11581: LD_INT 109
11583: PUSH
11584: LD_INT 112
11586: PUSH
11587: LD_INT 116
11589: PUSH
11590: LD_INT 117
11592: PUSH
11593: LD_INT 118
11595: PUSH
11596: EMPTY
11597: LIST
11598: LIST
11599: LIST
11600: LIST
11601: LIST
11602: LIST
11603: LIST
11604: LIST
11605: LIST
11606: LIST
11607: PUSH
11608: EMPTY
11609: LIST
11610: LIST
11611: ST_TO_ADDR
11612: GO 14135
11614: LD_INT 7
11616: DOUBLE
11617: EQUAL
11618: IFTRUE 11622
11620: GO 11734
11622: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
11623: LD_ADDR_VAR 0 2
11627: PUSH
11628: LD_INT 2
11630: PUSH
11631: LD_INT 4
11633: PUSH
11634: LD_INT 5
11636: PUSH
11637: LD_INT 7
11639: PUSH
11640: LD_INT 11
11642: PUSH
11643: LD_INT 12
11645: PUSH
11646: LD_INT 15
11648: PUSH
11649: LD_INT 16
11651: PUSH
11652: LD_INT 20
11654: PUSH
11655: LD_INT 21
11657: PUSH
11658: LD_INT 22
11660: PUSH
11661: LD_INT 23
11663: PUSH
11664: LD_INT 25
11666: PUSH
11667: LD_INT 26
11669: PUSH
11670: EMPTY
11671: LIST
11672: LIST
11673: LIST
11674: LIST
11675: LIST
11676: LIST
11677: LIST
11678: LIST
11679: LIST
11680: LIST
11681: LIST
11682: LIST
11683: LIST
11684: LIST
11685: PUSH
11686: LD_INT 101
11688: PUSH
11689: LD_INT 102
11691: PUSH
11692: LD_INT 103
11694: PUSH
11695: LD_INT 105
11697: PUSH
11698: LD_INT 106
11700: PUSH
11701: LD_INT 108
11703: PUSH
11704: LD_INT 112
11706: PUSH
11707: LD_INT 116
11709: PUSH
11710: LD_INT 117
11712: PUSH
11713: LD_INT 118
11715: PUSH
11716: EMPTY
11717: LIST
11718: LIST
11719: LIST
11720: LIST
11721: LIST
11722: LIST
11723: LIST
11724: LIST
11725: LIST
11726: LIST
11727: PUSH
11728: EMPTY
11729: LIST
11730: LIST
11731: ST_TO_ADDR
11732: GO 14135
11734: LD_INT 8
11736: DOUBLE
11737: EQUAL
11738: IFTRUE 11742
11740: GO 11882
11742: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
11743: LD_ADDR_VAR 0 2
11747: PUSH
11748: LD_INT 2
11750: PUSH
11751: LD_INT 4
11753: PUSH
11754: LD_INT 5
11756: PUSH
11757: LD_INT 6
11759: PUSH
11760: LD_INT 7
11762: PUSH
11763: LD_INT 8
11765: PUSH
11766: LD_INT 11
11768: PUSH
11769: LD_INT 12
11771: PUSH
11772: LD_INT 15
11774: PUSH
11775: LD_INT 16
11777: PUSH
11778: LD_INT 20
11780: PUSH
11781: LD_INT 21
11783: PUSH
11784: LD_INT 22
11786: PUSH
11787: LD_INT 23
11789: PUSH
11790: LD_INT 25
11792: PUSH
11793: LD_INT 26
11795: PUSH
11796: LD_INT 30
11798: PUSH
11799: LD_INT 31
11801: PUSH
11802: LD_INT 32
11804: PUSH
11805: LD_INT 36
11807: PUSH
11808: EMPTY
11809: LIST
11810: LIST
11811: LIST
11812: LIST
11813: LIST
11814: LIST
11815: LIST
11816: LIST
11817: LIST
11818: LIST
11819: LIST
11820: LIST
11821: LIST
11822: LIST
11823: LIST
11824: LIST
11825: LIST
11826: LIST
11827: LIST
11828: LIST
11829: PUSH
11830: LD_INT 101
11832: PUSH
11833: LD_INT 102
11835: PUSH
11836: LD_INT 103
11838: PUSH
11839: LD_INT 105
11841: PUSH
11842: LD_INT 106
11844: PUSH
11845: LD_INT 108
11847: PUSH
11848: LD_INT 109
11850: PUSH
11851: LD_INT 112
11853: PUSH
11854: LD_INT 116
11856: PUSH
11857: LD_INT 117
11859: PUSH
11860: LD_INT 118
11862: PUSH
11863: EMPTY
11864: LIST
11865: LIST
11866: LIST
11867: LIST
11868: LIST
11869: LIST
11870: LIST
11871: LIST
11872: LIST
11873: LIST
11874: LIST
11875: PUSH
11876: EMPTY
11877: LIST
11878: LIST
11879: ST_TO_ADDR
11880: GO 14135
11882: LD_INT 9
11884: DOUBLE
11885: EQUAL
11886: IFTRUE 11890
11888: GO 12038
11890: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
11891: LD_ADDR_VAR 0 2
11895: PUSH
11896: LD_INT 2
11898: PUSH
11899: LD_INT 4
11901: PUSH
11902: LD_INT 5
11904: PUSH
11905: LD_INT 6
11907: PUSH
11908: LD_INT 7
11910: PUSH
11911: LD_INT 8
11913: PUSH
11914: LD_INT 11
11916: PUSH
11917: LD_INT 12
11919: PUSH
11920: LD_INT 15
11922: PUSH
11923: LD_INT 16
11925: PUSH
11926: LD_INT 20
11928: PUSH
11929: LD_INT 21
11931: PUSH
11932: LD_INT 22
11934: PUSH
11935: LD_INT 23
11937: PUSH
11938: LD_INT 25
11940: PUSH
11941: LD_INT 26
11943: PUSH
11944: LD_INT 28
11946: PUSH
11947: LD_INT 30
11949: PUSH
11950: LD_INT 31
11952: PUSH
11953: LD_INT 32
11955: PUSH
11956: LD_INT 36
11958: PUSH
11959: EMPTY
11960: LIST
11961: LIST
11962: LIST
11963: LIST
11964: LIST
11965: LIST
11966: LIST
11967: LIST
11968: LIST
11969: LIST
11970: LIST
11971: LIST
11972: LIST
11973: LIST
11974: LIST
11975: LIST
11976: LIST
11977: LIST
11978: LIST
11979: LIST
11980: LIST
11981: PUSH
11982: LD_INT 101
11984: PUSH
11985: LD_INT 102
11987: PUSH
11988: LD_INT 103
11990: PUSH
11991: LD_INT 105
11993: PUSH
11994: LD_INT 106
11996: PUSH
11997: LD_INT 108
11999: PUSH
12000: LD_INT 109
12002: PUSH
12003: LD_INT 112
12005: PUSH
12006: LD_INT 114
12008: PUSH
12009: LD_INT 116
12011: PUSH
12012: LD_INT 117
12014: PUSH
12015: LD_INT 118
12017: PUSH
12018: EMPTY
12019: LIST
12020: LIST
12021: LIST
12022: LIST
12023: LIST
12024: LIST
12025: LIST
12026: LIST
12027: LIST
12028: LIST
12029: LIST
12030: LIST
12031: PUSH
12032: EMPTY
12033: LIST
12034: LIST
12035: ST_TO_ADDR
12036: GO 14135
12038: LD_INT 10
12040: DOUBLE
12041: EQUAL
12042: IFTRUE 12046
12044: GO 12242
12046: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
12047: LD_ADDR_VAR 0 2
12051: PUSH
12052: LD_INT 2
12054: PUSH
12055: LD_INT 4
12057: PUSH
12058: LD_INT 5
12060: PUSH
12061: LD_INT 6
12063: PUSH
12064: LD_INT 7
12066: PUSH
12067: LD_INT 8
12069: PUSH
12070: LD_INT 9
12072: PUSH
12073: LD_INT 10
12075: PUSH
12076: LD_INT 11
12078: PUSH
12079: LD_INT 12
12081: PUSH
12082: LD_INT 13
12084: PUSH
12085: LD_INT 14
12087: PUSH
12088: LD_INT 15
12090: PUSH
12091: LD_INT 16
12093: PUSH
12094: LD_INT 17
12096: PUSH
12097: LD_INT 18
12099: PUSH
12100: LD_INT 19
12102: PUSH
12103: LD_INT 20
12105: PUSH
12106: LD_INT 21
12108: PUSH
12109: LD_INT 22
12111: PUSH
12112: LD_INT 23
12114: PUSH
12115: LD_INT 24
12117: PUSH
12118: LD_INT 25
12120: PUSH
12121: LD_INT 26
12123: PUSH
12124: LD_INT 28
12126: PUSH
12127: LD_INT 30
12129: PUSH
12130: LD_INT 31
12132: PUSH
12133: LD_INT 32
12135: PUSH
12136: LD_INT 36
12138: PUSH
12139: EMPTY
12140: LIST
12141: LIST
12142: LIST
12143: LIST
12144: LIST
12145: LIST
12146: LIST
12147: LIST
12148: LIST
12149: LIST
12150: LIST
12151: LIST
12152: LIST
12153: LIST
12154: LIST
12155: LIST
12156: LIST
12157: LIST
12158: LIST
12159: LIST
12160: LIST
12161: LIST
12162: LIST
12163: LIST
12164: LIST
12165: LIST
12166: LIST
12167: LIST
12168: LIST
12169: PUSH
12170: LD_INT 101
12172: PUSH
12173: LD_INT 102
12175: PUSH
12176: LD_INT 103
12178: PUSH
12179: LD_INT 104
12181: PUSH
12182: LD_INT 105
12184: PUSH
12185: LD_INT 106
12187: PUSH
12188: LD_INT 107
12190: PUSH
12191: LD_INT 108
12193: PUSH
12194: LD_INT 109
12196: PUSH
12197: LD_INT 110
12199: PUSH
12200: LD_INT 111
12202: PUSH
12203: LD_INT 112
12205: PUSH
12206: LD_INT 114
12208: PUSH
12209: LD_INT 116
12211: PUSH
12212: LD_INT 117
12214: PUSH
12215: LD_INT 118
12217: PUSH
12218: EMPTY
12219: LIST
12220: LIST
12221: LIST
12222: LIST
12223: LIST
12224: LIST
12225: LIST
12226: LIST
12227: LIST
12228: LIST
12229: LIST
12230: LIST
12231: LIST
12232: LIST
12233: LIST
12234: LIST
12235: PUSH
12236: EMPTY
12237: LIST
12238: LIST
12239: ST_TO_ADDR
12240: GO 14135
12242: LD_INT 11
12244: DOUBLE
12245: EQUAL
12246: IFTRUE 12250
12248: GO 12454
12250: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
12251: LD_ADDR_VAR 0 2
12255: PUSH
12256: LD_INT 2
12258: PUSH
12259: LD_INT 3
12261: PUSH
12262: LD_INT 4
12264: PUSH
12265: LD_INT 5
12267: PUSH
12268: LD_INT 6
12270: PUSH
12271: LD_INT 7
12273: PUSH
12274: LD_INT 8
12276: PUSH
12277: LD_INT 9
12279: PUSH
12280: LD_INT 10
12282: PUSH
12283: LD_INT 11
12285: PUSH
12286: LD_INT 12
12288: PUSH
12289: LD_INT 13
12291: PUSH
12292: LD_INT 14
12294: PUSH
12295: LD_INT 15
12297: PUSH
12298: LD_INT 16
12300: PUSH
12301: LD_INT 17
12303: PUSH
12304: LD_INT 18
12306: PUSH
12307: LD_INT 19
12309: PUSH
12310: LD_INT 20
12312: PUSH
12313: LD_INT 21
12315: PUSH
12316: LD_INT 22
12318: PUSH
12319: LD_INT 23
12321: PUSH
12322: LD_INT 24
12324: PUSH
12325: LD_INT 25
12327: PUSH
12328: LD_INT 26
12330: PUSH
12331: LD_INT 28
12333: PUSH
12334: LD_INT 30
12336: PUSH
12337: LD_INT 31
12339: PUSH
12340: LD_INT 32
12342: PUSH
12343: LD_INT 34
12345: PUSH
12346: LD_INT 36
12348: PUSH
12349: EMPTY
12350: LIST
12351: LIST
12352: LIST
12353: LIST
12354: LIST
12355: LIST
12356: LIST
12357: LIST
12358: LIST
12359: LIST
12360: LIST
12361: LIST
12362: LIST
12363: LIST
12364: LIST
12365: LIST
12366: LIST
12367: LIST
12368: LIST
12369: LIST
12370: LIST
12371: LIST
12372: LIST
12373: LIST
12374: LIST
12375: LIST
12376: LIST
12377: LIST
12378: LIST
12379: LIST
12380: LIST
12381: PUSH
12382: LD_INT 101
12384: PUSH
12385: LD_INT 102
12387: PUSH
12388: LD_INT 103
12390: PUSH
12391: LD_INT 104
12393: PUSH
12394: LD_INT 105
12396: PUSH
12397: LD_INT 106
12399: PUSH
12400: LD_INT 107
12402: PUSH
12403: LD_INT 108
12405: PUSH
12406: LD_INT 109
12408: PUSH
12409: LD_INT 110
12411: PUSH
12412: LD_INT 111
12414: PUSH
12415: LD_INT 112
12417: PUSH
12418: LD_INT 114
12420: PUSH
12421: LD_INT 116
12423: PUSH
12424: LD_INT 117
12426: PUSH
12427: LD_INT 118
12429: PUSH
12430: EMPTY
12431: LIST
12432: LIST
12433: LIST
12434: LIST
12435: LIST
12436: LIST
12437: LIST
12438: LIST
12439: LIST
12440: LIST
12441: LIST
12442: LIST
12443: LIST
12444: LIST
12445: LIST
12446: LIST
12447: PUSH
12448: EMPTY
12449: LIST
12450: LIST
12451: ST_TO_ADDR
12452: GO 14135
12454: LD_INT 12
12456: DOUBLE
12457: EQUAL
12458: IFTRUE 12462
12460: GO 12682
12462: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
12463: LD_ADDR_VAR 0 2
12467: PUSH
12468: LD_INT 1
12470: PUSH
12471: LD_INT 2
12473: PUSH
12474: LD_INT 3
12476: PUSH
12477: LD_INT 4
12479: PUSH
12480: LD_INT 5
12482: PUSH
12483: LD_INT 6
12485: PUSH
12486: LD_INT 7
12488: PUSH
12489: LD_INT 8
12491: PUSH
12492: LD_INT 9
12494: PUSH
12495: LD_INT 10
12497: PUSH
12498: LD_INT 11
12500: PUSH
12501: LD_INT 12
12503: PUSH
12504: LD_INT 13
12506: PUSH
12507: LD_INT 14
12509: PUSH
12510: LD_INT 15
12512: PUSH
12513: LD_INT 16
12515: PUSH
12516: LD_INT 17
12518: PUSH
12519: LD_INT 18
12521: PUSH
12522: LD_INT 19
12524: PUSH
12525: LD_INT 20
12527: PUSH
12528: LD_INT 21
12530: PUSH
12531: LD_INT 22
12533: PUSH
12534: LD_INT 23
12536: PUSH
12537: LD_INT 24
12539: PUSH
12540: LD_INT 25
12542: PUSH
12543: LD_INT 26
12545: PUSH
12546: LD_INT 27
12548: PUSH
12549: LD_INT 28
12551: PUSH
12552: LD_INT 30
12554: PUSH
12555: LD_INT 31
12557: PUSH
12558: LD_INT 32
12560: PUSH
12561: LD_INT 33
12563: PUSH
12564: LD_INT 34
12566: PUSH
12567: LD_INT 36
12569: PUSH
12570: EMPTY
12571: LIST
12572: LIST
12573: LIST
12574: LIST
12575: LIST
12576: LIST
12577: LIST
12578: LIST
12579: LIST
12580: LIST
12581: LIST
12582: LIST
12583: LIST
12584: LIST
12585: LIST
12586: LIST
12587: LIST
12588: LIST
12589: LIST
12590: LIST
12591: LIST
12592: LIST
12593: LIST
12594: LIST
12595: LIST
12596: LIST
12597: LIST
12598: LIST
12599: LIST
12600: LIST
12601: LIST
12602: LIST
12603: LIST
12604: LIST
12605: PUSH
12606: LD_INT 101
12608: PUSH
12609: LD_INT 102
12611: PUSH
12612: LD_INT 103
12614: PUSH
12615: LD_INT 104
12617: PUSH
12618: LD_INT 105
12620: PUSH
12621: LD_INT 106
12623: PUSH
12624: LD_INT 107
12626: PUSH
12627: LD_INT 108
12629: PUSH
12630: LD_INT 109
12632: PUSH
12633: LD_INT 110
12635: PUSH
12636: LD_INT 111
12638: PUSH
12639: LD_INT 112
12641: PUSH
12642: LD_INT 113
12644: PUSH
12645: LD_INT 114
12647: PUSH
12648: LD_INT 116
12650: PUSH
12651: LD_INT 117
12653: PUSH
12654: LD_INT 118
12656: PUSH
12657: EMPTY
12658: LIST
12659: LIST
12660: LIST
12661: LIST
12662: LIST
12663: LIST
12664: LIST
12665: LIST
12666: LIST
12667: LIST
12668: LIST
12669: LIST
12670: LIST
12671: LIST
12672: LIST
12673: LIST
12674: LIST
12675: PUSH
12676: EMPTY
12677: LIST
12678: LIST
12679: ST_TO_ADDR
12680: GO 14135
12682: LD_INT 13
12684: DOUBLE
12685: EQUAL
12686: IFTRUE 12690
12688: GO 12898
12690: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
12691: LD_ADDR_VAR 0 2
12695: PUSH
12696: LD_INT 1
12698: PUSH
12699: LD_INT 2
12701: PUSH
12702: LD_INT 3
12704: PUSH
12705: LD_INT 4
12707: PUSH
12708: LD_INT 5
12710: PUSH
12711: LD_INT 8
12713: PUSH
12714: LD_INT 9
12716: PUSH
12717: LD_INT 10
12719: PUSH
12720: LD_INT 11
12722: PUSH
12723: LD_INT 12
12725: PUSH
12726: LD_INT 14
12728: PUSH
12729: LD_INT 15
12731: PUSH
12732: LD_INT 16
12734: PUSH
12735: LD_INT 17
12737: PUSH
12738: LD_INT 18
12740: PUSH
12741: LD_INT 19
12743: PUSH
12744: LD_INT 20
12746: PUSH
12747: LD_INT 21
12749: PUSH
12750: LD_INT 22
12752: PUSH
12753: LD_INT 23
12755: PUSH
12756: LD_INT 24
12758: PUSH
12759: LD_INT 25
12761: PUSH
12762: LD_INT 26
12764: PUSH
12765: LD_INT 27
12767: PUSH
12768: LD_INT 28
12770: PUSH
12771: LD_INT 30
12773: PUSH
12774: LD_INT 31
12776: PUSH
12777: LD_INT 32
12779: PUSH
12780: LD_INT 33
12782: PUSH
12783: LD_INT 34
12785: PUSH
12786: LD_INT 36
12788: PUSH
12789: EMPTY
12790: LIST
12791: LIST
12792: LIST
12793: LIST
12794: LIST
12795: LIST
12796: LIST
12797: LIST
12798: LIST
12799: LIST
12800: LIST
12801: LIST
12802: LIST
12803: LIST
12804: LIST
12805: LIST
12806: LIST
12807: LIST
12808: LIST
12809: LIST
12810: LIST
12811: LIST
12812: LIST
12813: LIST
12814: LIST
12815: LIST
12816: LIST
12817: LIST
12818: LIST
12819: LIST
12820: LIST
12821: PUSH
12822: LD_INT 101
12824: PUSH
12825: LD_INT 102
12827: PUSH
12828: LD_INT 103
12830: PUSH
12831: LD_INT 104
12833: PUSH
12834: LD_INT 105
12836: PUSH
12837: LD_INT 106
12839: PUSH
12840: LD_INT 107
12842: PUSH
12843: LD_INT 108
12845: PUSH
12846: LD_INT 109
12848: PUSH
12849: LD_INT 110
12851: PUSH
12852: LD_INT 111
12854: PUSH
12855: LD_INT 112
12857: PUSH
12858: LD_INT 113
12860: PUSH
12861: LD_INT 114
12863: PUSH
12864: LD_INT 116
12866: PUSH
12867: LD_INT 117
12869: PUSH
12870: LD_INT 118
12872: PUSH
12873: EMPTY
12874: LIST
12875: LIST
12876: LIST
12877: LIST
12878: LIST
12879: LIST
12880: LIST
12881: LIST
12882: LIST
12883: LIST
12884: LIST
12885: LIST
12886: LIST
12887: LIST
12888: LIST
12889: LIST
12890: LIST
12891: PUSH
12892: EMPTY
12893: LIST
12894: LIST
12895: ST_TO_ADDR
12896: GO 14135
12898: LD_INT 14
12900: DOUBLE
12901: EQUAL
12902: IFTRUE 12906
12904: GO 13130
12906: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
12907: LD_ADDR_VAR 0 2
12911: PUSH
12912: LD_INT 1
12914: PUSH
12915: LD_INT 2
12917: PUSH
12918: LD_INT 3
12920: PUSH
12921: LD_INT 4
12923: PUSH
12924: LD_INT 5
12926: PUSH
12927: LD_INT 6
12929: PUSH
12930: LD_INT 7
12932: PUSH
12933: LD_INT 8
12935: PUSH
12936: LD_INT 9
12938: PUSH
12939: LD_INT 10
12941: PUSH
12942: LD_INT 11
12944: PUSH
12945: LD_INT 12
12947: PUSH
12948: LD_INT 13
12950: PUSH
12951: LD_INT 14
12953: PUSH
12954: LD_INT 15
12956: PUSH
12957: LD_INT 16
12959: PUSH
12960: LD_INT 17
12962: PUSH
12963: LD_INT 18
12965: PUSH
12966: LD_INT 19
12968: PUSH
12969: LD_INT 20
12971: PUSH
12972: LD_INT 21
12974: PUSH
12975: LD_INT 22
12977: PUSH
12978: LD_INT 23
12980: PUSH
12981: LD_INT 24
12983: PUSH
12984: LD_INT 25
12986: PUSH
12987: LD_INT 26
12989: PUSH
12990: LD_INT 27
12992: PUSH
12993: LD_INT 28
12995: PUSH
12996: LD_INT 29
12998: PUSH
12999: LD_INT 30
13001: PUSH
13002: LD_INT 31
13004: PUSH
13005: LD_INT 32
13007: PUSH
13008: LD_INT 33
13010: PUSH
13011: LD_INT 34
13013: PUSH
13014: LD_INT 36
13016: PUSH
13017: EMPTY
13018: LIST
13019: LIST
13020: LIST
13021: LIST
13022: LIST
13023: LIST
13024: LIST
13025: LIST
13026: LIST
13027: LIST
13028: LIST
13029: LIST
13030: LIST
13031: LIST
13032: LIST
13033: LIST
13034: LIST
13035: LIST
13036: LIST
13037: LIST
13038: LIST
13039: LIST
13040: LIST
13041: LIST
13042: LIST
13043: LIST
13044: LIST
13045: LIST
13046: LIST
13047: LIST
13048: LIST
13049: LIST
13050: LIST
13051: LIST
13052: LIST
13053: PUSH
13054: LD_INT 101
13056: PUSH
13057: LD_INT 102
13059: PUSH
13060: LD_INT 103
13062: PUSH
13063: LD_INT 104
13065: PUSH
13066: LD_INT 105
13068: PUSH
13069: LD_INT 106
13071: PUSH
13072: LD_INT 107
13074: PUSH
13075: LD_INT 108
13077: PUSH
13078: LD_INT 109
13080: PUSH
13081: LD_INT 110
13083: PUSH
13084: LD_INT 111
13086: PUSH
13087: LD_INT 112
13089: PUSH
13090: LD_INT 113
13092: PUSH
13093: LD_INT 114
13095: PUSH
13096: LD_INT 116
13098: PUSH
13099: LD_INT 117
13101: PUSH
13102: LD_INT 118
13104: PUSH
13105: EMPTY
13106: LIST
13107: LIST
13108: LIST
13109: LIST
13110: LIST
13111: LIST
13112: LIST
13113: LIST
13114: LIST
13115: LIST
13116: LIST
13117: LIST
13118: LIST
13119: LIST
13120: LIST
13121: LIST
13122: LIST
13123: PUSH
13124: EMPTY
13125: LIST
13126: LIST
13127: ST_TO_ADDR
13128: GO 14135
13130: LD_INT 15
13132: DOUBLE
13133: EQUAL
13134: IFTRUE 13138
13136: GO 13362
13138: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
13139: LD_ADDR_VAR 0 2
13143: PUSH
13144: LD_INT 1
13146: PUSH
13147: LD_INT 2
13149: PUSH
13150: LD_INT 3
13152: PUSH
13153: LD_INT 4
13155: PUSH
13156: LD_INT 5
13158: PUSH
13159: LD_INT 6
13161: PUSH
13162: LD_INT 7
13164: PUSH
13165: LD_INT 8
13167: PUSH
13168: LD_INT 9
13170: PUSH
13171: LD_INT 10
13173: PUSH
13174: LD_INT 11
13176: PUSH
13177: LD_INT 12
13179: PUSH
13180: LD_INT 13
13182: PUSH
13183: LD_INT 14
13185: PUSH
13186: LD_INT 15
13188: PUSH
13189: LD_INT 16
13191: PUSH
13192: LD_INT 17
13194: PUSH
13195: LD_INT 18
13197: PUSH
13198: LD_INT 19
13200: PUSH
13201: LD_INT 20
13203: PUSH
13204: LD_INT 21
13206: PUSH
13207: LD_INT 22
13209: PUSH
13210: LD_INT 23
13212: PUSH
13213: LD_INT 24
13215: PUSH
13216: LD_INT 25
13218: PUSH
13219: LD_INT 26
13221: PUSH
13222: LD_INT 27
13224: PUSH
13225: LD_INT 28
13227: PUSH
13228: LD_INT 29
13230: PUSH
13231: LD_INT 30
13233: PUSH
13234: LD_INT 31
13236: PUSH
13237: LD_INT 32
13239: PUSH
13240: LD_INT 33
13242: PUSH
13243: LD_INT 34
13245: PUSH
13246: LD_INT 36
13248: PUSH
13249: EMPTY
13250: LIST
13251: LIST
13252: LIST
13253: LIST
13254: LIST
13255: LIST
13256: LIST
13257: LIST
13258: LIST
13259: LIST
13260: LIST
13261: LIST
13262: LIST
13263: LIST
13264: LIST
13265: LIST
13266: LIST
13267: LIST
13268: LIST
13269: LIST
13270: LIST
13271: LIST
13272: LIST
13273: LIST
13274: LIST
13275: LIST
13276: LIST
13277: LIST
13278: LIST
13279: LIST
13280: LIST
13281: LIST
13282: LIST
13283: LIST
13284: LIST
13285: PUSH
13286: LD_INT 101
13288: PUSH
13289: LD_INT 102
13291: PUSH
13292: LD_INT 103
13294: PUSH
13295: LD_INT 104
13297: PUSH
13298: LD_INT 105
13300: PUSH
13301: LD_INT 106
13303: PUSH
13304: LD_INT 107
13306: PUSH
13307: LD_INT 108
13309: PUSH
13310: LD_INT 109
13312: PUSH
13313: LD_INT 110
13315: PUSH
13316: LD_INT 111
13318: PUSH
13319: LD_INT 112
13321: PUSH
13322: LD_INT 113
13324: PUSH
13325: LD_INT 114
13327: PUSH
13328: LD_INT 116
13330: PUSH
13331: LD_INT 117
13333: PUSH
13334: LD_INT 118
13336: PUSH
13337: EMPTY
13338: LIST
13339: LIST
13340: LIST
13341: LIST
13342: LIST
13343: LIST
13344: LIST
13345: LIST
13346: LIST
13347: LIST
13348: LIST
13349: LIST
13350: LIST
13351: LIST
13352: LIST
13353: LIST
13354: LIST
13355: PUSH
13356: EMPTY
13357: LIST
13358: LIST
13359: ST_TO_ADDR
13360: GO 14135
13362: LD_INT 16
13364: DOUBLE
13365: EQUAL
13366: IFTRUE 13370
13368: GO 13506
13370: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
13371: LD_ADDR_VAR 0 2
13375: PUSH
13376: LD_INT 2
13378: PUSH
13379: LD_INT 4
13381: PUSH
13382: LD_INT 5
13384: PUSH
13385: LD_INT 7
13387: PUSH
13388: LD_INT 11
13390: PUSH
13391: LD_INT 12
13393: PUSH
13394: LD_INT 15
13396: PUSH
13397: LD_INT 16
13399: PUSH
13400: LD_INT 20
13402: PUSH
13403: LD_INT 21
13405: PUSH
13406: LD_INT 22
13408: PUSH
13409: LD_INT 23
13411: PUSH
13412: LD_INT 25
13414: PUSH
13415: LD_INT 26
13417: PUSH
13418: LD_INT 30
13420: PUSH
13421: LD_INT 31
13423: PUSH
13424: LD_INT 32
13426: PUSH
13427: LD_INT 33
13429: PUSH
13430: LD_INT 34
13432: PUSH
13433: EMPTY
13434: LIST
13435: LIST
13436: LIST
13437: LIST
13438: LIST
13439: LIST
13440: LIST
13441: LIST
13442: LIST
13443: LIST
13444: LIST
13445: LIST
13446: LIST
13447: LIST
13448: LIST
13449: LIST
13450: LIST
13451: LIST
13452: LIST
13453: PUSH
13454: LD_INT 101
13456: PUSH
13457: LD_INT 102
13459: PUSH
13460: LD_INT 103
13462: PUSH
13463: LD_INT 106
13465: PUSH
13466: LD_INT 108
13468: PUSH
13469: LD_INT 112
13471: PUSH
13472: LD_INT 113
13474: PUSH
13475: LD_INT 114
13477: PUSH
13478: LD_INT 116
13480: PUSH
13481: LD_INT 117
13483: PUSH
13484: LD_INT 118
13486: PUSH
13487: EMPTY
13488: LIST
13489: LIST
13490: LIST
13491: LIST
13492: LIST
13493: LIST
13494: LIST
13495: LIST
13496: LIST
13497: LIST
13498: LIST
13499: PUSH
13500: EMPTY
13501: LIST
13502: LIST
13503: ST_TO_ADDR
13504: GO 14135
13506: LD_INT 17
13508: DOUBLE
13509: EQUAL
13510: IFTRUE 13514
13512: GO 13738
13514: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
13515: LD_ADDR_VAR 0 2
13519: PUSH
13520: LD_INT 1
13522: PUSH
13523: LD_INT 2
13525: PUSH
13526: LD_INT 3
13528: PUSH
13529: LD_INT 4
13531: PUSH
13532: LD_INT 5
13534: PUSH
13535: LD_INT 6
13537: PUSH
13538: LD_INT 7
13540: PUSH
13541: LD_INT 8
13543: PUSH
13544: LD_INT 9
13546: PUSH
13547: LD_INT 10
13549: PUSH
13550: LD_INT 11
13552: PUSH
13553: LD_INT 12
13555: PUSH
13556: LD_INT 13
13558: PUSH
13559: LD_INT 14
13561: PUSH
13562: LD_INT 15
13564: PUSH
13565: LD_INT 16
13567: PUSH
13568: LD_INT 17
13570: PUSH
13571: LD_INT 18
13573: PUSH
13574: LD_INT 19
13576: PUSH
13577: LD_INT 20
13579: PUSH
13580: LD_INT 21
13582: PUSH
13583: LD_INT 22
13585: PUSH
13586: LD_INT 23
13588: PUSH
13589: LD_INT 24
13591: PUSH
13592: LD_INT 25
13594: PUSH
13595: LD_INT 26
13597: PUSH
13598: LD_INT 27
13600: PUSH
13601: LD_INT 28
13603: PUSH
13604: LD_INT 29
13606: PUSH
13607: LD_INT 30
13609: PUSH
13610: LD_INT 31
13612: PUSH
13613: LD_INT 32
13615: PUSH
13616: LD_INT 33
13618: PUSH
13619: LD_INT 34
13621: PUSH
13622: LD_INT 36
13624: PUSH
13625: EMPTY
13626: LIST
13627: LIST
13628: LIST
13629: LIST
13630: LIST
13631: LIST
13632: LIST
13633: LIST
13634: LIST
13635: LIST
13636: LIST
13637: LIST
13638: LIST
13639: LIST
13640: LIST
13641: LIST
13642: LIST
13643: LIST
13644: LIST
13645: LIST
13646: LIST
13647: LIST
13648: LIST
13649: LIST
13650: LIST
13651: LIST
13652: LIST
13653: LIST
13654: LIST
13655: LIST
13656: LIST
13657: LIST
13658: LIST
13659: LIST
13660: LIST
13661: PUSH
13662: LD_INT 101
13664: PUSH
13665: LD_INT 102
13667: PUSH
13668: LD_INT 103
13670: PUSH
13671: LD_INT 104
13673: PUSH
13674: LD_INT 105
13676: PUSH
13677: LD_INT 106
13679: PUSH
13680: LD_INT 107
13682: PUSH
13683: LD_INT 108
13685: PUSH
13686: LD_INT 109
13688: PUSH
13689: LD_INT 110
13691: PUSH
13692: LD_INT 111
13694: PUSH
13695: LD_INT 112
13697: PUSH
13698: LD_INT 113
13700: PUSH
13701: LD_INT 114
13703: PUSH
13704: LD_INT 116
13706: PUSH
13707: LD_INT 117
13709: PUSH
13710: LD_INT 118
13712: PUSH
13713: EMPTY
13714: LIST
13715: LIST
13716: LIST
13717: LIST
13718: LIST
13719: LIST
13720: LIST
13721: LIST
13722: LIST
13723: LIST
13724: LIST
13725: LIST
13726: LIST
13727: LIST
13728: LIST
13729: LIST
13730: LIST
13731: PUSH
13732: EMPTY
13733: LIST
13734: LIST
13735: ST_TO_ADDR
13736: GO 14135
13738: LD_INT 18
13740: DOUBLE
13741: EQUAL
13742: IFTRUE 13746
13744: GO 13894
13746: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
13747: LD_ADDR_VAR 0 2
13751: PUSH
13752: LD_INT 2
13754: PUSH
13755: LD_INT 4
13757: PUSH
13758: LD_INT 5
13760: PUSH
13761: LD_INT 7
13763: PUSH
13764: LD_INT 11
13766: PUSH
13767: LD_INT 12
13769: PUSH
13770: LD_INT 15
13772: PUSH
13773: LD_INT 16
13775: PUSH
13776: LD_INT 20
13778: PUSH
13779: LD_INT 21
13781: PUSH
13782: LD_INT 22
13784: PUSH
13785: LD_INT 23
13787: PUSH
13788: LD_INT 25
13790: PUSH
13791: LD_INT 26
13793: PUSH
13794: LD_INT 30
13796: PUSH
13797: LD_INT 31
13799: PUSH
13800: LD_INT 32
13802: PUSH
13803: LD_INT 33
13805: PUSH
13806: LD_INT 34
13808: PUSH
13809: LD_INT 35
13811: PUSH
13812: LD_INT 36
13814: PUSH
13815: EMPTY
13816: LIST
13817: LIST
13818: LIST
13819: LIST
13820: LIST
13821: LIST
13822: LIST
13823: LIST
13824: LIST
13825: LIST
13826: LIST
13827: LIST
13828: LIST
13829: LIST
13830: LIST
13831: LIST
13832: LIST
13833: LIST
13834: LIST
13835: LIST
13836: LIST
13837: PUSH
13838: LD_INT 101
13840: PUSH
13841: LD_INT 102
13843: PUSH
13844: LD_INT 103
13846: PUSH
13847: LD_INT 106
13849: PUSH
13850: LD_INT 108
13852: PUSH
13853: LD_INT 112
13855: PUSH
13856: LD_INT 113
13858: PUSH
13859: LD_INT 114
13861: PUSH
13862: LD_INT 115
13864: PUSH
13865: LD_INT 116
13867: PUSH
13868: LD_INT 117
13870: PUSH
13871: LD_INT 118
13873: PUSH
13874: EMPTY
13875: LIST
13876: LIST
13877: LIST
13878: LIST
13879: LIST
13880: LIST
13881: LIST
13882: LIST
13883: LIST
13884: LIST
13885: LIST
13886: LIST
13887: PUSH
13888: EMPTY
13889: LIST
13890: LIST
13891: ST_TO_ADDR
13892: GO 14135
13894: LD_INT 19
13896: DOUBLE
13897: EQUAL
13898: IFTRUE 13902
13900: GO 14134
13902: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
13903: LD_ADDR_VAR 0 2
13907: PUSH
13908: LD_INT 1
13910: PUSH
13911: LD_INT 2
13913: PUSH
13914: LD_INT 3
13916: PUSH
13917: LD_INT 4
13919: PUSH
13920: LD_INT 5
13922: PUSH
13923: LD_INT 6
13925: PUSH
13926: LD_INT 7
13928: PUSH
13929: LD_INT 8
13931: PUSH
13932: LD_INT 9
13934: PUSH
13935: LD_INT 10
13937: PUSH
13938: LD_INT 11
13940: PUSH
13941: LD_INT 12
13943: PUSH
13944: LD_INT 13
13946: PUSH
13947: LD_INT 14
13949: PUSH
13950: LD_INT 15
13952: PUSH
13953: LD_INT 16
13955: PUSH
13956: LD_INT 17
13958: PUSH
13959: LD_INT 18
13961: PUSH
13962: LD_INT 19
13964: PUSH
13965: LD_INT 20
13967: PUSH
13968: LD_INT 21
13970: PUSH
13971: LD_INT 22
13973: PUSH
13974: LD_INT 23
13976: PUSH
13977: LD_INT 24
13979: PUSH
13980: LD_INT 25
13982: PUSH
13983: LD_INT 26
13985: PUSH
13986: LD_INT 27
13988: PUSH
13989: LD_INT 28
13991: PUSH
13992: LD_INT 29
13994: PUSH
13995: LD_INT 30
13997: PUSH
13998: LD_INT 31
14000: PUSH
14001: LD_INT 32
14003: PUSH
14004: LD_INT 33
14006: PUSH
14007: LD_INT 34
14009: PUSH
14010: LD_INT 35
14012: PUSH
14013: LD_INT 36
14015: PUSH
14016: EMPTY
14017: LIST
14018: LIST
14019: LIST
14020: LIST
14021: LIST
14022: LIST
14023: LIST
14024: LIST
14025: LIST
14026: LIST
14027: LIST
14028: LIST
14029: LIST
14030: LIST
14031: LIST
14032: LIST
14033: LIST
14034: LIST
14035: LIST
14036: LIST
14037: LIST
14038: LIST
14039: LIST
14040: LIST
14041: LIST
14042: LIST
14043: LIST
14044: LIST
14045: LIST
14046: LIST
14047: LIST
14048: LIST
14049: LIST
14050: LIST
14051: LIST
14052: LIST
14053: PUSH
14054: LD_INT 101
14056: PUSH
14057: LD_INT 102
14059: PUSH
14060: LD_INT 103
14062: PUSH
14063: LD_INT 104
14065: PUSH
14066: LD_INT 105
14068: PUSH
14069: LD_INT 106
14071: PUSH
14072: LD_INT 107
14074: PUSH
14075: LD_INT 108
14077: PUSH
14078: LD_INT 109
14080: PUSH
14081: LD_INT 110
14083: PUSH
14084: LD_INT 111
14086: PUSH
14087: LD_INT 112
14089: PUSH
14090: LD_INT 113
14092: PUSH
14093: LD_INT 114
14095: PUSH
14096: LD_INT 115
14098: PUSH
14099: LD_INT 116
14101: PUSH
14102: LD_INT 117
14104: PUSH
14105: LD_INT 118
14107: PUSH
14108: EMPTY
14109: LIST
14110: LIST
14111: LIST
14112: LIST
14113: LIST
14114: LIST
14115: LIST
14116: LIST
14117: LIST
14118: LIST
14119: LIST
14120: LIST
14121: LIST
14122: LIST
14123: LIST
14124: LIST
14125: LIST
14126: LIST
14127: PUSH
14128: EMPTY
14129: LIST
14130: LIST
14131: ST_TO_ADDR
14132: GO 14135
14134: POP
// end else
14135: GO 14366
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
14137: LD_ADDR_VAR 0 2
14141: PUSH
14142: LD_INT 1
14144: PUSH
14145: LD_INT 2
14147: PUSH
14148: LD_INT 3
14150: PUSH
14151: LD_INT 4
14153: PUSH
14154: LD_INT 5
14156: PUSH
14157: LD_INT 6
14159: PUSH
14160: LD_INT 7
14162: PUSH
14163: LD_INT 8
14165: PUSH
14166: LD_INT 9
14168: PUSH
14169: LD_INT 10
14171: PUSH
14172: LD_INT 11
14174: PUSH
14175: LD_INT 12
14177: PUSH
14178: LD_INT 13
14180: PUSH
14181: LD_INT 14
14183: PUSH
14184: LD_INT 15
14186: PUSH
14187: LD_INT 16
14189: PUSH
14190: LD_INT 17
14192: PUSH
14193: LD_INT 18
14195: PUSH
14196: LD_INT 19
14198: PUSH
14199: LD_INT 20
14201: PUSH
14202: LD_INT 21
14204: PUSH
14205: LD_INT 22
14207: PUSH
14208: LD_INT 23
14210: PUSH
14211: LD_INT 24
14213: PUSH
14214: LD_INT 25
14216: PUSH
14217: LD_INT 26
14219: PUSH
14220: LD_INT 27
14222: PUSH
14223: LD_INT 28
14225: PUSH
14226: LD_INT 29
14228: PUSH
14229: LD_INT 30
14231: PUSH
14232: LD_INT 31
14234: PUSH
14235: LD_INT 32
14237: PUSH
14238: LD_INT 33
14240: PUSH
14241: LD_INT 34
14243: PUSH
14244: LD_INT 35
14246: PUSH
14247: LD_INT 36
14249: PUSH
14250: EMPTY
14251: LIST
14252: LIST
14253: LIST
14254: LIST
14255: LIST
14256: LIST
14257: LIST
14258: LIST
14259: LIST
14260: LIST
14261: LIST
14262: LIST
14263: LIST
14264: LIST
14265: LIST
14266: LIST
14267: LIST
14268: LIST
14269: LIST
14270: LIST
14271: LIST
14272: LIST
14273: LIST
14274: LIST
14275: LIST
14276: LIST
14277: LIST
14278: LIST
14279: LIST
14280: LIST
14281: LIST
14282: LIST
14283: LIST
14284: LIST
14285: LIST
14286: LIST
14287: PUSH
14288: LD_INT 101
14290: PUSH
14291: LD_INT 102
14293: PUSH
14294: LD_INT 103
14296: PUSH
14297: LD_INT 104
14299: PUSH
14300: LD_INT 105
14302: PUSH
14303: LD_INT 106
14305: PUSH
14306: LD_INT 107
14308: PUSH
14309: LD_INT 108
14311: PUSH
14312: LD_INT 109
14314: PUSH
14315: LD_INT 110
14317: PUSH
14318: LD_INT 111
14320: PUSH
14321: LD_INT 112
14323: PUSH
14324: LD_INT 113
14326: PUSH
14327: LD_INT 114
14329: PUSH
14330: LD_INT 115
14332: PUSH
14333: LD_INT 116
14335: PUSH
14336: LD_INT 117
14338: PUSH
14339: LD_INT 118
14341: PUSH
14342: EMPTY
14343: LIST
14344: LIST
14345: LIST
14346: LIST
14347: LIST
14348: LIST
14349: LIST
14350: LIST
14351: LIST
14352: LIST
14353: LIST
14354: LIST
14355: LIST
14356: LIST
14357: LIST
14358: LIST
14359: LIST
14360: LIST
14361: PUSH
14362: EMPTY
14363: LIST
14364: LIST
14365: ST_TO_ADDR
// if result then
14366: LD_VAR 0 2
14370: IFFALSE 15156
// begin normal :=  ;
14372: LD_ADDR_VAR 0 5
14376: PUSH
14377: LD_STRING 
14379: ST_TO_ADDR
// hardcore :=  ;
14380: LD_ADDR_VAR 0 6
14384: PUSH
14385: LD_STRING 
14387: ST_TO_ADDR
// active :=  ;
14388: LD_ADDR_VAR 0 7
14392: PUSH
14393: LD_STRING 
14395: ST_TO_ADDR
// for i = 1 to normalCounter do
14396: LD_ADDR_VAR 0 8
14400: PUSH
14401: DOUBLE
14402: LD_INT 1
14404: DEC
14405: ST_TO_ADDR
14406: LD_EXP 33
14410: PUSH
14411: FOR_TO
14412: IFFALSE 14513
// begin tmp := 0 ;
14414: LD_ADDR_VAR 0 3
14418: PUSH
14419: LD_STRING 0
14421: ST_TO_ADDR
// if result [ 1 ] then
14422: LD_VAR 0 2
14426: PUSH
14427: LD_INT 1
14429: ARRAY
14430: IFFALSE 14495
// if result [ 1 ] [ 1 ] = i then
14432: LD_VAR 0 2
14436: PUSH
14437: LD_INT 1
14439: ARRAY
14440: PUSH
14441: LD_INT 1
14443: ARRAY
14444: PUSH
14445: LD_VAR 0 8
14449: EQUAL
14450: IFFALSE 14495
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
14452: LD_ADDR_VAR 0 2
14456: PUSH
14457: LD_VAR 0 2
14461: PPUSH
14462: LD_INT 1
14464: PPUSH
14465: LD_VAR 0 2
14469: PUSH
14470: LD_INT 1
14472: ARRAY
14473: PPUSH
14474: LD_INT 1
14476: PPUSH
14477: CALL_OW 3
14481: PPUSH
14482: CALL_OW 1
14486: ST_TO_ADDR
// tmp := 1 ;
14487: LD_ADDR_VAR 0 3
14491: PUSH
14492: LD_STRING 1
14494: ST_TO_ADDR
// end ; normal := normal & tmp ;
14495: LD_ADDR_VAR 0 5
14499: PUSH
14500: LD_VAR 0 5
14504: PUSH
14505: LD_VAR 0 3
14509: STR
14510: ST_TO_ADDR
// end ;
14511: GO 14411
14513: POP
14514: POP
// for i = 1 to hardcoreCounter do
14515: LD_ADDR_VAR 0 8
14519: PUSH
14520: DOUBLE
14521: LD_INT 1
14523: DEC
14524: ST_TO_ADDR
14525: LD_EXP 34
14529: PUSH
14530: FOR_TO
14531: IFFALSE 14636
// begin tmp := 0 ;
14533: LD_ADDR_VAR 0 3
14537: PUSH
14538: LD_STRING 0
14540: ST_TO_ADDR
// if result [ 2 ] then
14541: LD_VAR 0 2
14545: PUSH
14546: LD_INT 2
14548: ARRAY
14549: IFFALSE 14618
// if result [ 2 ] [ 1 ] = 100 + i then
14551: LD_VAR 0 2
14555: PUSH
14556: LD_INT 2
14558: ARRAY
14559: PUSH
14560: LD_INT 1
14562: ARRAY
14563: PUSH
14564: LD_INT 100
14566: PUSH
14567: LD_VAR 0 8
14571: PLUS
14572: EQUAL
14573: IFFALSE 14618
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
14575: LD_ADDR_VAR 0 2
14579: PUSH
14580: LD_VAR 0 2
14584: PPUSH
14585: LD_INT 2
14587: PPUSH
14588: LD_VAR 0 2
14592: PUSH
14593: LD_INT 2
14595: ARRAY
14596: PPUSH
14597: LD_INT 1
14599: PPUSH
14600: CALL_OW 3
14604: PPUSH
14605: CALL_OW 1
14609: ST_TO_ADDR
// tmp := 1 ;
14610: LD_ADDR_VAR 0 3
14614: PUSH
14615: LD_STRING 1
14617: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
14618: LD_ADDR_VAR 0 6
14622: PUSH
14623: LD_VAR 0 6
14627: PUSH
14628: LD_VAR 0 3
14632: STR
14633: ST_TO_ADDR
// end ;
14634: GO 14530
14636: POP
14637: POP
// if isGameLoad then
14638: LD_VAR 0 1
14642: IFFALSE 15117
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
14644: LD_ADDR_VAR 0 4
14648: PUSH
14649: LD_EXP 37
14653: PUSH
14654: LD_EXP 36
14658: PUSH
14659: LD_EXP 38
14663: PUSH
14664: LD_EXP 35
14668: PUSH
14669: LD_EXP 39
14673: PUSH
14674: LD_EXP 40
14678: PUSH
14679: LD_EXP 41
14683: PUSH
14684: LD_EXP 42
14688: PUSH
14689: LD_EXP 43
14693: PUSH
14694: LD_EXP 44
14698: PUSH
14699: LD_EXP 45
14703: PUSH
14704: LD_EXP 46
14708: PUSH
14709: LD_EXP 47
14713: PUSH
14714: LD_EXP 48
14718: PUSH
14719: LD_EXP 56
14723: PUSH
14724: LD_EXP 57
14728: PUSH
14729: LD_EXP 58
14733: PUSH
14734: LD_EXP 59
14738: PUSH
14739: LD_EXP 61
14743: PUSH
14744: LD_EXP 62
14748: PUSH
14749: LD_EXP 63
14753: PUSH
14754: LD_EXP 66
14758: PUSH
14759: LD_EXP 68
14763: PUSH
14764: LD_EXP 69
14768: PUSH
14769: LD_EXP 70
14773: PUSH
14774: LD_EXP 72
14778: PUSH
14779: LD_EXP 73
14783: PUSH
14784: LD_EXP 76
14788: PUSH
14789: LD_EXP 77
14793: PUSH
14794: LD_EXP 78
14798: PUSH
14799: LD_EXP 79
14803: PUSH
14804: LD_EXP 80
14808: PUSH
14809: LD_EXP 81
14813: PUSH
14814: LD_EXP 82
14818: PUSH
14819: LD_EXP 83
14823: PUSH
14824: LD_EXP 84
14828: PUSH
14829: LD_EXP 49
14833: PUSH
14834: LD_EXP 50
14838: PUSH
14839: LD_EXP 53
14843: PUSH
14844: LD_EXP 54
14848: PUSH
14849: LD_EXP 55
14853: PUSH
14854: LD_EXP 51
14858: PUSH
14859: LD_EXP 52
14863: PUSH
14864: LD_EXP 60
14868: PUSH
14869: LD_EXP 64
14873: PUSH
14874: LD_EXP 65
14878: PUSH
14879: LD_EXP 67
14883: PUSH
14884: LD_EXP 71
14888: PUSH
14889: LD_EXP 74
14893: PUSH
14894: LD_EXP 75
14898: PUSH
14899: LD_EXP 85
14903: PUSH
14904: LD_EXP 86
14908: PUSH
14909: LD_EXP 87
14913: PUSH
14914: LD_EXP 88
14918: PUSH
14919: EMPTY
14920: LIST
14921: LIST
14922: LIST
14923: LIST
14924: LIST
14925: LIST
14926: LIST
14927: LIST
14928: LIST
14929: LIST
14930: LIST
14931: LIST
14932: LIST
14933: LIST
14934: LIST
14935: LIST
14936: LIST
14937: LIST
14938: LIST
14939: LIST
14940: LIST
14941: LIST
14942: LIST
14943: LIST
14944: LIST
14945: LIST
14946: LIST
14947: LIST
14948: LIST
14949: LIST
14950: LIST
14951: LIST
14952: LIST
14953: LIST
14954: LIST
14955: LIST
14956: LIST
14957: LIST
14958: LIST
14959: LIST
14960: LIST
14961: LIST
14962: LIST
14963: LIST
14964: LIST
14965: LIST
14966: LIST
14967: LIST
14968: LIST
14969: LIST
14970: LIST
14971: LIST
14972: LIST
14973: LIST
14974: ST_TO_ADDR
// tmp :=  ;
14975: LD_ADDR_VAR 0 3
14979: PUSH
14980: LD_STRING 
14982: ST_TO_ADDR
// for i = 1 to normalCounter do
14983: LD_ADDR_VAR 0 8
14987: PUSH
14988: DOUBLE
14989: LD_INT 1
14991: DEC
14992: ST_TO_ADDR
14993: LD_EXP 33
14997: PUSH
14998: FOR_TO
14999: IFFALSE 15035
// begin if flags [ i ] then
15001: LD_VAR 0 4
15005: PUSH
15006: LD_VAR 0 8
15010: ARRAY
15011: IFFALSE 15033
// tmp := tmp & i & ; ;
15013: LD_ADDR_VAR 0 3
15017: PUSH
15018: LD_VAR 0 3
15022: PUSH
15023: LD_VAR 0 8
15027: STR
15028: PUSH
15029: LD_STRING ;
15031: STR
15032: ST_TO_ADDR
// end ;
15033: GO 14998
15035: POP
15036: POP
// for i = 1 to hardcoreCounter do
15037: LD_ADDR_VAR 0 8
15041: PUSH
15042: DOUBLE
15043: LD_INT 1
15045: DEC
15046: ST_TO_ADDR
15047: LD_EXP 34
15051: PUSH
15052: FOR_TO
15053: IFFALSE 15099
// begin if flags [ normalCounter + i ] then
15055: LD_VAR 0 4
15059: PUSH
15060: LD_EXP 33
15064: PUSH
15065: LD_VAR 0 8
15069: PLUS
15070: ARRAY
15071: IFFALSE 15097
// tmp := tmp & ( 100 + i ) & ; ;
15073: LD_ADDR_VAR 0 3
15077: PUSH
15078: LD_VAR 0 3
15082: PUSH
15083: LD_INT 100
15085: PUSH
15086: LD_VAR 0 8
15090: PLUS
15091: STR
15092: PUSH
15093: LD_STRING ;
15095: STR
15096: ST_TO_ADDR
// end ;
15097: GO 15052
15099: POP
15100: POP
// if tmp then
15101: LD_VAR 0 3
15105: IFFALSE 15117
// active := tmp ;
15107: LD_ADDR_VAR 0 7
15111: PUSH
15112: LD_VAR 0 3
15116: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
15117: LD_STRING getStreamItemsFromMission("
15119: PUSH
15120: LD_VAR 0 5
15124: STR
15125: PUSH
15126: LD_STRING ","
15128: STR
15129: PUSH
15130: LD_VAR 0 6
15134: STR
15135: PUSH
15136: LD_STRING ","
15138: STR
15139: PUSH
15140: LD_VAR 0 7
15144: STR
15145: PUSH
15146: LD_STRING ")
15148: STR
15149: PPUSH
15150: CALL_OW 559
// end else
15154: GO 15163
// ToLua ( getStreamItemsFromMission("","","") ) ;
15156: LD_STRING getStreamItemsFromMission("","","")
15158: PPUSH
15159: CALL_OW 559
// end ;
15163: LD_VAR 0 2
15167: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
15168: LD_EXP 32
15172: IFFALSE 15180
15174: PUSH
15175: LD_EXP 37
15179: AND
15180: IFFALSE 15304
15182: GO 15184
15184: DISABLE
15185: LD_INT 0
15187: PPUSH
15188: PPUSH
// begin enable ;
15189: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
15190: LD_ADDR_VAR 0 2
15194: PUSH
15195: LD_INT 22
15197: PUSH
15198: LD_OWVAR 2
15202: PUSH
15203: EMPTY
15204: LIST
15205: LIST
15206: PUSH
15207: LD_INT 2
15209: PUSH
15210: LD_INT 34
15212: PUSH
15213: LD_INT 7
15215: PUSH
15216: EMPTY
15217: LIST
15218: LIST
15219: PUSH
15220: LD_INT 34
15222: PUSH
15223: LD_INT 45
15225: PUSH
15226: EMPTY
15227: LIST
15228: LIST
15229: PUSH
15230: LD_INT 34
15232: PUSH
15233: LD_INT 28
15235: PUSH
15236: EMPTY
15237: LIST
15238: LIST
15239: PUSH
15240: LD_INT 34
15242: PUSH
15243: LD_INT 47
15245: PUSH
15246: EMPTY
15247: LIST
15248: LIST
15249: PUSH
15250: EMPTY
15251: LIST
15252: LIST
15253: LIST
15254: LIST
15255: LIST
15256: PUSH
15257: EMPTY
15258: LIST
15259: LIST
15260: PPUSH
15261: CALL_OW 69
15265: ST_TO_ADDR
// if not tmp then
15266: LD_VAR 0 2
15270: NOT
15271: IFFALSE 15275
// exit ;
15273: GO 15304
// for i in tmp do
15275: LD_ADDR_VAR 0 1
15279: PUSH
15280: LD_VAR 0 2
15284: PUSH
15285: FOR_IN
15286: IFFALSE 15302
// begin SetLives ( i , 0 ) ;
15288: LD_VAR 0 1
15292: PPUSH
15293: LD_INT 0
15295: PPUSH
15296: CALL_OW 234
// end ;
15300: GO 15285
15302: POP
15303: POP
// end ;
15304: PPOPN 2
15306: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
15307: LD_EXP 32
15311: IFFALSE 15319
15313: PUSH
15314: LD_EXP 38
15318: AND
15319: IFFALSE 15403
15321: GO 15323
15323: DISABLE
15324: LD_INT 0
15326: PPUSH
15327: PPUSH
// begin enable ;
15328: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
15329: LD_ADDR_VAR 0 2
15333: PUSH
15334: LD_INT 22
15336: PUSH
15337: LD_OWVAR 2
15341: PUSH
15342: EMPTY
15343: LIST
15344: LIST
15345: PUSH
15346: LD_INT 32
15348: PUSH
15349: LD_INT 3
15351: PUSH
15352: EMPTY
15353: LIST
15354: LIST
15355: PUSH
15356: EMPTY
15357: LIST
15358: LIST
15359: PPUSH
15360: CALL_OW 69
15364: ST_TO_ADDR
// if not tmp then
15365: LD_VAR 0 2
15369: NOT
15370: IFFALSE 15374
// exit ;
15372: GO 15403
// for i in tmp do
15374: LD_ADDR_VAR 0 1
15378: PUSH
15379: LD_VAR 0 2
15383: PUSH
15384: FOR_IN
15385: IFFALSE 15401
// begin SetLives ( i , 0 ) ;
15387: LD_VAR 0 1
15391: PPUSH
15392: LD_INT 0
15394: PPUSH
15395: CALL_OW 234
// end ;
15399: GO 15384
15401: POP
15402: POP
// end ;
15403: PPOPN 2
15405: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
15406: LD_EXP 32
15410: IFFALSE 15418
15412: PUSH
15413: LD_EXP 35
15417: AND
15418: IFFALSE 15511
15420: GO 15422
15422: DISABLE
15423: LD_INT 0
15425: PPUSH
// begin enable ;
15426: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
15427: LD_ADDR_VAR 0 1
15431: PUSH
15432: LD_INT 22
15434: PUSH
15435: LD_OWVAR 2
15439: PUSH
15440: EMPTY
15441: LIST
15442: LIST
15443: PUSH
15444: LD_INT 2
15446: PUSH
15447: LD_INT 25
15449: PUSH
15450: LD_INT 5
15452: PUSH
15453: EMPTY
15454: LIST
15455: LIST
15456: PUSH
15457: LD_INT 25
15459: PUSH
15460: LD_INT 9
15462: PUSH
15463: EMPTY
15464: LIST
15465: LIST
15466: PUSH
15467: LD_INT 25
15469: PUSH
15470: LD_INT 8
15472: PUSH
15473: EMPTY
15474: LIST
15475: LIST
15476: PUSH
15477: EMPTY
15478: LIST
15479: LIST
15480: LIST
15481: LIST
15482: PUSH
15483: EMPTY
15484: LIST
15485: LIST
15486: PPUSH
15487: CALL_OW 69
15491: PUSH
15492: FOR_IN
15493: IFFALSE 15509
// begin SetClass ( i , 1 ) ;
15495: LD_VAR 0 1
15499: PPUSH
15500: LD_INT 1
15502: PPUSH
15503: CALL_OW 336
// end ;
15507: GO 15492
15509: POP
15510: POP
// end ;
15511: PPOPN 1
15513: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
15514: LD_EXP 32
15518: IFFALSE 15526
15520: PUSH
15521: LD_EXP 36
15525: AND
15526: IFFALSE 15538
15528: PUSH
15529: LD_OWVAR 65
15533: PUSH
15534: LD_INT 7
15536: LESS
15537: AND
15538: IFFALSE 15552
15540: GO 15542
15542: DISABLE
// begin enable ;
15543: ENABLE
// game_speed := 7 ;
15544: LD_ADDR_OWVAR 65
15548: PUSH
15549: LD_INT 7
15551: ST_TO_ADDR
// end ;
15552: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
15553: LD_EXP 32
15557: IFFALSE 15565
15559: PUSH
15560: LD_EXP 39
15564: AND
15565: IFFALSE 15767
15567: GO 15569
15569: DISABLE
15570: LD_INT 0
15572: PPUSH
15573: PPUSH
15574: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
15575: LD_ADDR_VAR 0 3
15579: PUSH
15580: LD_INT 81
15582: PUSH
15583: LD_OWVAR 2
15587: PUSH
15588: EMPTY
15589: LIST
15590: LIST
15591: PUSH
15592: LD_INT 21
15594: PUSH
15595: LD_INT 1
15597: PUSH
15598: EMPTY
15599: LIST
15600: LIST
15601: PUSH
15602: EMPTY
15603: LIST
15604: LIST
15605: PPUSH
15606: CALL_OW 69
15610: ST_TO_ADDR
// if not tmp then
15611: LD_VAR 0 3
15615: NOT
15616: IFFALSE 15620
// exit ;
15618: GO 15767
// if tmp > 5 then
15620: LD_VAR 0 3
15624: PUSH
15625: LD_INT 5
15627: GREATER
15628: IFFALSE 15640
// k := 5 else
15630: LD_ADDR_VAR 0 2
15634: PUSH
15635: LD_INT 5
15637: ST_TO_ADDR
15638: GO 15650
// k := tmp ;
15640: LD_ADDR_VAR 0 2
15644: PUSH
15645: LD_VAR 0 3
15649: ST_TO_ADDR
// for i := 1 to k do
15650: LD_ADDR_VAR 0 1
15654: PUSH
15655: DOUBLE
15656: LD_INT 1
15658: DEC
15659: ST_TO_ADDR
15660: LD_VAR 0 2
15664: PUSH
15665: FOR_TO
15666: IFFALSE 15765
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
15668: LD_VAR 0 3
15672: PUSH
15673: LD_VAR 0 1
15677: ARRAY
15678: PPUSH
15679: LD_VAR 0 1
15683: PUSH
15684: LD_INT 4
15686: MOD
15687: PUSH
15688: LD_INT 1
15690: PLUS
15691: PPUSH
15692: CALL_OW 259
15696: PUSH
15697: LD_INT 10
15699: LESS
15700: IFFALSE 15763
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
15702: LD_VAR 0 3
15706: PUSH
15707: LD_VAR 0 1
15711: ARRAY
15712: PPUSH
15713: LD_VAR 0 1
15717: PUSH
15718: LD_INT 4
15720: MOD
15721: PUSH
15722: LD_INT 1
15724: PLUS
15725: PPUSH
15726: LD_VAR 0 3
15730: PUSH
15731: LD_VAR 0 1
15735: ARRAY
15736: PPUSH
15737: LD_VAR 0 1
15741: PUSH
15742: LD_INT 4
15744: MOD
15745: PUSH
15746: LD_INT 1
15748: PLUS
15749: PPUSH
15750: CALL_OW 259
15754: PUSH
15755: LD_INT 1
15757: PLUS
15758: PPUSH
15759: CALL_OW 237
15763: GO 15665
15765: POP
15766: POP
// end ;
15767: PPOPN 3
15769: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
15770: LD_EXP 32
15774: IFFALSE 15782
15776: PUSH
15777: LD_EXP 40
15781: AND
15782: IFFALSE 15802
15784: GO 15786
15786: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
15787: LD_INT 4
15789: PPUSH
15790: LD_OWVAR 2
15794: PPUSH
15795: LD_INT 0
15797: PPUSH
15798: CALL_OW 324
15802: END
// every 0 0$1 trigger StreamModeActive and sShovel do
15803: LD_EXP 32
15807: IFFALSE 15815
15809: PUSH
15810: LD_EXP 69
15814: AND
15815: IFFALSE 15835
15817: GO 15819
15819: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
15820: LD_INT 19
15822: PPUSH
15823: LD_OWVAR 2
15827: PPUSH
15828: LD_INT 0
15830: PPUSH
15831: CALL_OW 324
15835: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
15836: LD_EXP 32
15840: IFFALSE 15848
15842: PUSH
15843: LD_EXP 41
15847: AND
15848: IFFALSE 15950
15850: GO 15852
15852: DISABLE
15853: LD_INT 0
15855: PPUSH
15856: PPUSH
// begin enable ;
15857: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
15858: LD_ADDR_VAR 0 2
15862: PUSH
15863: LD_INT 22
15865: PUSH
15866: LD_OWVAR 2
15870: PUSH
15871: EMPTY
15872: LIST
15873: LIST
15874: PUSH
15875: LD_INT 2
15877: PUSH
15878: LD_INT 34
15880: PUSH
15881: LD_INT 11
15883: PUSH
15884: EMPTY
15885: LIST
15886: LIST
15887: PUSH
15888: LD_INT 34
15890: PUSH
15891: LD_INT 30
15893: PUSH
15894: EMPTY
15895: LIST
15896: LIST
15897: PUSH
15898: EMPTY
15899: LIST
15900: LIST
15901: LIST
15902: PUSH
15903: EMPTY
15904: LIST
15905: LIST
15906: PPUSH
15907: CALL_OW 69
15911: ST_TO_ADDR
// if not tmp then
15912: LD_VAR 0 2
15916: NOT
15917: IFFALSE 15921
// exit ;
15919: GO 15950
// for i in tmp do
15921: LD_ADDR_VAR 0 1
15925: PUSH
15926: LD_VAR 0 2
15930: PUSH
15931: FOR_IN
15932: IFFALSE 15948
// begin SetLives ( i , 0 ) ;
15934: LD_VAR 0 1
15938: PPUSH
15939: LD_INT 0
15941: PPUSH
15942: CALL_OW 234
// end ;
15946: GO 15931
15948: POP
15949: POP
// end ;
15950: PPOPN 2
15952: END
// every 0 0$1 trigger StreamModeActive and sBunker do
15953: LD_EXP 32
15957: IFFALSE 15965
15959: PUSH
15960: LD_EXP 42
15964: AND
15965: IFFALSE 15985
15967: GO 15969
15969: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
15970: LD_INT 32
15972: PPUSH
15973: LD_OWVAR 2
15977: PPUSH
15978: LD_INT 0
15980: PPUSH
15981: CALL_OW 324
15985: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
15986: LD_EXP 32
15990: IFFALSE 15998
15992: PUSH
15993: LD_EXP 43
15997: AND
15998: IFFALSE 16181
16000: GO 16002
16002: DISABLE
16003: LD_INT 0
16005: PPUSH
16006: PPUSH
16007: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
16008: LD_ADDR_VAR 0 2
16012: PUSH
16013: LD_INT 22
16015: PUSH
16016: LD_OWVAR 2
16020: PUSH
16021: EMPTY
16022: LIST
16023: LIST
16024: PUSH
16025: LD_INT 33
16027: PUSH
16028: LD_INT 3
16030: PUSH
16031: EMPTY
16032: LIST
16033: LIST
16034: PUSH
16035: EMPTY
16036: LIST
16037: LIST
16038: PPUSH
16039: CALL_OW 69
16043: ST_TO_ADDR
// if not tmp then
16044: LD_VAR 0 2
16048: NOT
16049: IFFALSE 16053
// exit ;
16051: GO 16181
// side := 0 ;
16053: LD_ADDR_VAR 0 3
16057: PUSH
16058: LD_INT 0
16060: ST_TO_ADDR
// for i := 1 to 8 do
16061: LD_ADDR_VAR 0 1
16065: PUSH
16066: DOUBLE
16067: LD_INT 1
16069: DEC
16070: ST_TO_ADDR
16071: LD_INT 8
16073: PUSH
16074: FOR_TO
16075: IFFALSE 16125
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
16077: LD_OWVAR 2
16081: PUSH
16082: LD_VAR 0 1
16086: NONEQUAL
16087: IFFALSE 16109
16089: PUSH
16090: LD_OWVAR 2
16094: PPUSH
16095: LD_VAR 0 1
16099: PPUSH
16100: CALL_OW 81
16104: PUSH
16105: LD_INT 2
16107: EQUAL
16108: AND
16109: IFFALSE 16123
// begin side := i ;
16111: LD_ADDR_VAR 0 3
16115: PUSH
16116: LD_VAR 0 1
16120: ST_TO_ADDR
// break ;
16121: GO 16125
// end ;
16123: GO 16074
16125: POP
16126: POP
// if not side then
16127: LD_VAR 0 3
16131: NOT
16132: IFFALSE 16136
// exit ;
16134: GO 16181
// for i := 1 to tmp do
16136: LD_ADDR_VAR 0 1
16140: PUSH
16141: DOUBLE
16142: LD_INT 1
16144: DEC
16145: ST_TO_ADDR
16146: LD_VAR 0 2
16150: PUSH
16151: FOR_TO
16152: IFFALSE 16179
// if Prob ( 60 ) then
16154: LD_INT 60
16156: PPUSH
16157: CALL_OW 13
16161: IFFALSE 16177
// SetSide ( i , side ) ;
16163: LD_VAR 0 1
16167: PPUSH
16168: LD_VAR 0 3
16172: PPUSH
16173: CALL_OW 235
16177: GO 16151
16179: POP
16180: POP
// end ;
16181: PPOPN 3
16183: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
16184: LD_EXP 32
16188: IFFALSE 16196
16190: PUSH
16191: LD_EXP 45
16195: AND
16196: IFFALSE 16315
16198: GO 16200
16200: DISABLE
16201: LD_INT 0
16203: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
16204: LD_ADDR_VAR 0 1
16208: PUSH
16209: LD_INT 22
16211: PUSH
16212: LD_OWVAR 2
16216: PUSH
16217: EMPTY
16218: LIST
16219: LIST
16220: PUSH
16221: LD_INT 21
16223: PUSH
16224: LD_INT 1
16226: PUSH
16227: EMPTY
16228: LIST
16229: LIST
16230: PUSH
16231: LD_INT 3
16233: PUSH
16234: LD_INT 23
16236: PUSH
16237: LD_INT 0
16239: PUSH
16240: EMPTY
16241: LIST
16242: LIST
16243: PUSH
16244: EMPTY
16245: LIST
16246: LIST
16247: PUSH
16248: EMPTY
16249: LIST
16250: LIST
16251: LIST
16252: PPUSH
16253: CALL_OW 69
16257: PUSH
16258: FOR_IN
16259: IFFALSE 16313
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
16261: LD_VAR 0 1
16265: PPUSH
16266: CALL_OW 257
16270: PUSH
16271: LD_INT 1
16273: PUSH
16274: LD_INT 2
16276: PUSH
16277: LD_INT 3
16279: PUSH
16280: LD_INT 4
16282: PUSH
16283: EMPTY
16284: LIST
16285: LIST
16286: LIST
16287: LIST
16288: IN
16289: IFFALSE 16311
// SetClass ( un , rand ( 1 , 4 ) ) ;
16291: LD_VAR 0 1
16295: PPUSH
16296: LD_INT 1
16298: PPUSH
16299: LD_INT 4
16301: PPUSH
16302: CALL_OW 12
16306: PPUSH
16307: CALL_OW 336
16311: GO 16258
16313: POP
16314: POP
// end ;
16315: PPOPN 1
16317: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
16318: LD_EXP 32
16322: IFFALSE 16330
16324: PUSH
16325: LD_EXP 44
16329: AND
16330: IFFALSE 16409
16332: GO 16334
16334: DISABLE
16335: LD_INT 0
16337: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
16338: LD_ADDR_VAR 0 1
16342: PUSH
16343: LD_INT 22
16345: PUSH
16346: LD_OWVAR 2
16350: PUSH
16351: EMPTY
16352: LIST
16353: LIST
16354: PUSH
16355: LD_INT 21
16357: PUSH
16358: LD_INT 3
16360: PUSH
16361: EMPTY
16362: LIST
16363: LIST
16364: PUSH
16365: EMPTY
16366: LIST
16367: LIST
16368: PPUSH
16369: CALL_OW 69
16373: ST_TO_ADDR
// if not tmp then
16374: LD_VAR 0 1
16378: NOT
16379: IFFALSE 16383
// exit ;
16381: GO 16409
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
16383: LD_VAR 0 1
16387: PUSH
16388: LD_INT 1
16390: PPUSH
16391: LD_VAR 0 1
16395: PPUSH
16396: CALL_OW 12
16400: ARRAY
16401: PPUSH
16402: LD_INT 100
16404: PPUSH
16405: CALL_OW 234
// end ;
16409: PPOPN 1
16411: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
16412: LD_EXP 32
16416: IFFALSE 16424
16418: PUSH
16419: LD_EXP 46
16423: AND
16424: IFFALSE 16522
16426: GO 16428
16428: DISABLE
16429: LD_INT 0
16431: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
16432: LD_ADDR_VAR 0 1
16436: PUSH
16437: LD_INT 22
16439: PUSH
16440: LD_OWVAR 2
16444: PUSH
16445: EMPTY
16446: LIST
16447: LIST
16448: PUSH
16449: LD_INT 21
16451: PUSH
16452: LD_INT 1
16454: PUSH
16455: EMPTY
16456: LIST
16457: LIST
16458: PUSH
16459: EMPTY
16460: LIST
16461: LIST
16462: PPUSH
16463: CALL_OW 69
16467: ST_TO_ADDR
// if not tmp then
16468: LD_VAR 0 1
16472: NOT
16473: IFFALSE 16477
// exit ;
16475: GO 16522
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
16477: LD_VAR 0 1
16481: PUSH
16482: LD_INT 1
16484: PPUSH
16485: LD_VAR 0 1
16489: PPUSH
16490: CALL_OW 12
16494: ARRAY
16495: PPUSH
16496: LD_INT 1
16498: PPUSH
16499: LD_INT 4
16501: PPUSH
16502: CALL_OW 12
16506: PPUSH
16507: LD_INT 3000
16509: PPUSH
16510: LD_INT 9000
16512: PPUSH
16513: CALL_OW 12
16517: PPUSH
16518: CALL_OW 492
// end ;
16522: PPOPN 1
16524: END
// every 0 0$1 trigger StreamModeActive and sDepot do
16525: LD_EXP 32
16529: IFFALSE 16537
16531: PUSH
16532: LD_EXP 47
16536: AND
16537: IFFALSE 16557
16539: GO 16541
16541: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
16542: LD_INT 1
16544: PPUSH
16545: LD_OWVAR 2
16549: PPUSH
16550: LD_INT 0
16552: PPUSH
16553: CALL_OW 324
16557: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
16558: LD_EXP 32
16562: IFFALSE 16570
16564: PUSH
16565: LD_EXP 48
16569: AND
16570: IFFALSE 16653
16572: GO 16574
16574: DISABLE
16575: LD_INT 0
16577: PPUSH
16578: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
16579: LD_ADDR_VAR 0 2
16583: PUSH
16584: LD_INT 22
16586: PUSH
16587: LD_OWVAR 2
16591: PUSH
16592: EMPTY
16593: LIST
16594: LIST
16595: PUSH
16596: LD_INT 21
16598: PUSH
16599: LD_INT 3
16601: PUSH
16602: EMPTY
16603: LIST
16604: LIST
16605: PUSH
16606: EMPTY
16607: LIST
16608: LIST
16609: PPUSH
16610: CALL_OW 69
16614: ST_TO_ADDR
// if not tmp then
16615: LD_VAR 0 2
16619: NOT
16620: IFFALSE 16624
// exit ;
16622: GO 16653
// for i in tmp do
16624: LD_ADDR_VAR 0 1
16628: PUSH
16629: LD_VAR 0 2
16633: PUSH
16634: FOR_IN
16635: IFFALSE 16651
// SetBLevel ( i , 10 ) ;
16637: LD_VAR 0 1
16641: PPUSH
16642: LD_INT 10
16644: PPUSH
16645: CALL_OW 241
16649: GO 16634
16651: POP
16652: POP
// end ;
16653: PPOPN 2
16655: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
16656: LD_EXP 32
16660: IFFALSE 16668
16662: PUSH
16663: LD_EXP 49
16667: AND
16668: IFFALSE 16779
16670: GO 16672
16672: DISABLE
16673: LD_INT 0
16675: PPUSH
16676: PPUSH
16677: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
16678: LD_ADDR_VAR 0 3
16682: PUSH
16683: LD_INT 22
16685: PUSH
16686: LD_OWVAR 2
16690: PUSH
16691: EMPTY
16692: LIST
16693: LIST
16694: PUSH
16695: LD_INT 25
16697: PUSH
16698: LD_INT 1
16700: PUSH
16701: EMPTY
16702: LIST
16703: LIST
16704: PUSH
16705: EMPTY
16706: LIST
16707: LIST
16708: PPUSH
16709: CALL_OW 69
16713: ST_TO_ADDR
// if not tmp then
16714: LD_VAR 0 3
16718: NOT
16719: IFFALSE 16723
// exit ;
16721: GO 16779
// un := tmp [ rand ( 1 , tmp ) ] ;
16723: LD_ADDR_VAR 0 2
16727: PUSH
16728: LD_VAR 0 3
16732: PUSH
16733: LD_INT 1
16735: PPUSH
16736: LD_VAR 0 3
16740: PPUSH
16741: CALL_OW 12
16745: ARRAY
16746: ST_TO_ADDR
// if Crawls ( un ) then
16747: LD_VAR 0 2
16751: PPUSH
16752: CALL_OW 318
16756: IFFALSE 16767
// ComWalk ( un ) ;
16758: LD_VAR 0 2
16762: PPUSH
16763: CALL_OW 138
// SetClass ( un , class_sniper ) ;
16767: LD_VAR 0 2
16771: PPUSH
16772: LD_INT 5
16774: PPUSH
16775: CALL_OW 336
// end ;
16779: PPOPN 3
16781: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
16782: LD_EXP 32
16786: IFFALSE 16794
16788: PUSH
16789: LD_EXP 50
16793: AND
16794: IFFALSE 16806
16796: PUSH
16797: LD_OWVAR 67
16801: PUSH
16802: LD_INT 4
16804: LESS
16805: AND
16806: IFFALSE 16825
16808: GO 16810
16810: DISABLE
// begin Difficulty := Difficulty + 1 ;
16811: LD_ADDR_OWVAR 67
16815: PUSH
16816: LD_OWVAR 67
16820: PUSH
16821: LD_INT 1
16823: PLUS
16824: ST_TO_ADDR
// end ;
16825: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
16826: LD_EXP 32
16830: IFFALSE 16838
16832: PUSH
16833: LD_EXP 51
16837: AND
16838: IFFALSE 16941
16840: GO 16842
16842: DISABLE
16843: LD_INT 0
16845: PPUSH
// begin for i := 1 to 5 do
16846: LD_ADDR_VAR 0 1
16850: PUSH
16851: DOUBLE
16852: LD_INT 1
16854: DEC
16855: ST_TO_ADDR
16856: LD_INT 5
16858: PUSH
16859: FOR_TO
16860: IFFALSE 16939
// begin uc_nation := nation_nature ;
16862: LD_ADDR_OWVAR 21
16866: PUSH
16867: LD_INT 0
16869: ST_TO_ADDR
// uc_side := 0 ;
16870: LD_ADDR_OWVAR 20
16874: PUSH
16875: LD_INT 0
16877: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
16878: LD_ADDR_OWVAR 29
16882: PUSH
16883: LD_INT 12
16885: PUSH
16886: LD_INT 12
16888: PUSH
16889: EMPTY
16890: LIST
16891: LIST
16892: ST_TO_ADDR
// hc_agressivity := 20 ;
16893: LD_ADDR_OWVAR 35
16897: PUSH
16898: LD_INT 20
16900: ST_TO_ADDR
// hc_class := class_tiger ;
16901: LD_ADDR_OWVAR 28
16905: PUSH
16906: LD_INT 14
16908: ST_TO_ADDR
// hc_gallery :=  ;
16909: LD_ADDR_OWVAR 33
16913: PUSH
16914: LD_STRING 
16916: ST_TO_ADDR
// hc_name :=  ;
16917: LD_ADDR_OWVAR 26
16921: PUSH
16922: LD_STRING 
16924: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
16925: CALL_OW 44
16929: PPUSH
16930: LD_INT 0
16932: PPUSH
16933: CALL_OW 51
// end ;
16937: GO 16859
16939: POP
16940: POP
// end ;
16941: PPOPN 1
16943: END
// every 0 0$1 trigger StreamModeActive and sBomb do
16944: LD_EXP 32
16948: IFFALSE 16956
16950: PUSH
16951: LD_EXP 52
16955: AND
16956: IFFALSE 16965
16958: GO 16960
16960: DISABLE
// StreamSibBomb ;
16961: CALL 16966 0 0
16965: END
// export function StreamSibBomb ; var i , x , y ; begin
16966: LD_INT 0
16968: PPUSH
16969: PPUSH
16970: PPUSH
16971: PPUSH
// result := false ;
16972: LD_ADDR_VAR 0 1
16976: PUSH
16977: LD_INT 0
16979: ST_TO_ADDR
// for i := 1 to 16 do
16980: LD_ADDR_VAR 0 2
16984: PUSH
16985: DOUBLE
16986: LD_INT 1
16988: DEC
16989: ST_TO_ADDR
16990: LD_INT 16
16992: PUSH
16993: FOR_TO
16994: IFFALSE 17193
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
16996: LD_ADDR_VAR 0 3
17000: PUSH
17001: LD_INT 10
17003: PUSH
17004: LD_INT 20
17006: PUSH
17007: LD_INT 30
17009: PUSH
17010: LD_INT 40
17012: PUSH
17013: LD_INT 50
17015: PUSH
17016: LD_INT 60
17018: PUSH
17019: LD_INT 70
17021: PUSH
17022: LD_INT 80
17024: PUSH
17025: LD_INT 90
17027: PUSH
17028: LD_INT 100
17030: PUSH
17031: LD_INT 110
17033: PUSH
17034: LD_INT 120
17036: PUSH
17037: LD_INT 130
17039: PUSH
17040: LD_INT 140
17042: PUSH
17043: LD_INT 150
17045: PUSH
17046: EMPTY
17047: LIST
17048: LIST
17049: LIST
17050: LIST
17051: LIST
17052: LIST
17053: LIST
17054: LIST
17055: LIST
17056: LIST
17057: LIST
17058: LIST
17059: LIST
17060: LIST
17061: LIST
17062: PUSH
17063: LD_INT 1
17065: PPUSH
17066: LD_INT 15
17068: PPUSH
17069: CALL_OW 12
17073: ARRAY
17074: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
17075: LD_ADDR_VAR 0 4
17079: PUSH
17080: LD_INT 10
17082: PUSH
17083: LD_INT 20
17085: PUSH
17086: LD_INT 30
17088: PUSH
17089: LD_INT 40
17091: PUSH
17092: LD_INT 50
17094: PUSH
17095: LD_INT 60
17097: PUSH
17098: LD_INT 70
17100: PUSH
17101: LD_INT 80
17103: PUSH
17104: LD_INT 90
17106: PUSH
17107: LD_INT 100
17109: PUSH
17110: LD_INT 110
17112: PUSH
17113: LD_INT 120
17115: PUSH
17116: LD_INT 130
17118: PUSH
17119: LD_INT 140
17121: PUSH
17122: LD_INT 150
17124: PUSH
17125: EMPTY
17126: LIST
17127: LIST
17128: LIST
17129: LIST
17130: LIST
17131: LIST
17132: LIST
17133: LIST
17134: LIST
17135: LIST
17136: LIST
17137: LIST
17138: LIST
17139: LIST
17140: LIST
17141: PUSH
17142: LD_INT 1
17144: PPUSH
17145: LD_INT 15
17147: PPUSH
17148: CALL_OW 12
17152: ARRAY
17153: ST_TO_ADDR
// if ValidHex ( x , y ) then
17154: LD_VAR 0 3
17158: PPUSH
17159: LD_VAR 0 4
17163: PPUSH
17164: CALL_OW 488
17168: IFFALSE 17191
// begin result := [ x , y ] ;
17170: LD_ADDR_VAR 0 1
17174: PUSH
17175: LD_VAR 0 3
17179: PUSH
17180: LD_VAR 0 4
17184: PUSH
17185: EMPTY
17186: LIST
17187: LIST
17188: ST_TO_ADDR
// break ;
17189: GO 17193
// end ; end ;
17191: GO 16993
17193: POP
17194: POP
// if result then
17195: LD_VAR 0 1
17199: IFFALSE 17259
// begin ToLua ( playSibBomb() ) ;
17201: LD_STRING playSibBomb()
17203: PPUSH
17204: CALL_OW 559
// wait ( 0 0$14 ) ;
17208: LD_INT 490
17210: PPUSH
17211: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
17215: LD_VAR 0 1
17219: PUSH
17220: LD_INT 1
17222: ARRAY
17223: PPUSH
17224: LD_VAR 0 1
17228: PUSH
17229: LD_INT 2
17231: ARRAY
17232: PPUSH
17233: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
17237: LD_VAR 0 1
17241: PUSH
17242: LD_INT 1
17244: ARRAY
17245: PPUSH
17246: LD_VAR 0 1
17250: PUSH
17251: LD_INT 2
17253: ARRAY
17254: PPUSH
17255: CALL_OW 429
// end ; end ;
17259: LD_VAR 0 1
17263: RET
// every 0 0$1 trigger StreamModeActive and sReset do
17264: LD_EXP 32
17268: IFFALSE 17276
17270: PUSH
17271: LD_EXP 54
17275: AND
17276: IFFALSE 17288
17278: GO 17280
17280: DISABLE
// YouLost (  ) ;
17281: LD_STRING 
17283: PPUSH
17284: CALL_OW 104
17288: END
// every 0 0$1 trigger StreamModeActive and sFog do
17289: LD_EXP 32
17293: IFFALSE 17301
17295: PUSH
17296: LD_EXP 53
17300: AND
17301: IFFALSE 17315
17303: GO 17305
17305: DISABLE
// FogOff ( your_side ) ;
17306: LD_OWVAR 2
17310: PPUSH
17311: CALL_OW 344
17315: END
// every 0 0$1 trigger StreamModeActive and sSun do
17316: LD_EXP 32
17320: IFFALSE 17328
17322: PUSH
17323: LD_EXP 55
17327: AND
17328: IFFALSE 17356
17330: GO 17332
17332: DISABLE
// begin solar_recharge_percent := 0 ;
17333: LD_ADDR_OWVAR 79
17337: PUSH
17338: LD_INT 0
17340: ST_TO_ADDR
// wait ( 5 5$00 ) ;
17341: LD_INT 10500
17343: PPUSH
17344: CALL_OW 67
// solar_recharge_percent := 100 ;
17348: LD_ADDR_OWVAR 79
17352: PUSH
17353: LD_INT 100
17355: ST_TO_ADDR
// end ;
17356: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
17357: LD_EXP 32
17361: IFFALSE 17369
17363: PUSH
17364: LD_EXP 56
17368: AND
17369: IFFALSE 17608
17371: GO 17373
17373: DISABLE
17374: LD_INT 0
17376: PPUSH
17377: PPUSH
17378: PPUSH
// begin tmp := [ ] ;
17379: LD_ADDR_VAR 0 3
17383: PUSH
17384: EMPTY
17385: ST_TO_ADDR
// for i := 1 to 6 do
17386: LD_ADDR_VAR 0 1
17390: PUSH
17391: DOUBLE
17392: LD_INT 1
17394: DEC
17395: ST_TO_ADDR
17396: LD_INT 6
17398: PUSH
17399: FOR_TO
17400: IFFALSE 17505
// begin uc_nation := nation_nature ;
17402: LD_ADDR_OWVAR 21
17406: PUSH
17407: LD_INT 0
17409: ST_TO_ADDR
// uc_side := 0 ;
17410: LD_ADDR_OWVAR 20
17414: PUSH
17415: LD_INT 0
17417: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
17418: LD_ADDR_OWVAR 29
17422: PUSH
17423: LD_INT 12
17425: PUSH
17426: LD_INT 12
17428: PUSH
17429: EMPTY
17430: LIST
17431: LIST
17432: ST_TO_ADDR
// hc_agressivity := 20 ;
17433: LD_ADDR_OWVAR 35
17437: PUSH
17438: LD_INT 20
17440: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
17441: LD_ADDR_OWVAR 28
17445: PUSH
17446: LD_INT 17
17448: ST_TO_ADDR
// hc_gallery :=  ;
17449: LD_ADDR_OWVAR 33
17453: PUSH
17454: LD_STRING 
17456: ST_TO_ADDR
// hc_name :=  ;
17457: LD_ADDR_OWVAR 26
17461: PUSH
17462: LD_STRING 
17464: ST_TO_ADDR
// un := CreateHuman ;
17465: LD_ADDR_VAR 0 2
17469: PUSH
17470: CALL_OW 44
17474: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
17475: LD_VAR 0 2
17479: PPUSH
17480: LD_INT 1
17482: PPUSH
17483: CALL_OW 51
// tmp := tmp ^ un ;
17487: LD_ADDR_VAR 0 3
17491: PUSH
17492: LD_VAR 0 3
17496: PUSH
17497: LD_VAR 0 2
17501: ADD
17502: ST_TO_ADDR
// end ;
17503: GO 17399
17505: POP
17506: POP
// repeat wait ( 0 0$1 ) ;
17507: LD_INT 35
17509: PPUSH
17510: CALL_OW 67
// for un in tmp do
17514: LD_ADDR_VAR 0 2
17518: PUSH
17519: LD_VAR 0 3
17523: PUSH
17524: FOR_IN
17525: IFFALSE 17599
// begin if IsDead ( un ) then
17527: LD_VAR 0 2
17531: PPUSH
17532: CALL_OW 301
17536: IFFALSE 17556
// begin tmp := tmp diff un ;
17538: LD_ADDR_VAR 0 3
17542: PUSH
17543: LD_VAR 0 3
17547: PUSH
17548: LD_VAR 0 2
17552: DIFF
17553: ST_TO_ADDR
// continue ;
17554: GO 17524
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
17556: LD_VAR 0 2
17560: PPUSH
17561: LD_INT 3
17563: PUSH
17564: LD_INT 22
17566: PUSH
17567: LD_INT 0
17569: PUSH
17570: EMPTY
17571: LIST
17572: LIST
17573: PUSH
17574: EMPTY
17575: LIST
17576: LIST
17577: PPUSH
17578: CALL_OW 69
17582: PPUSH
17583: LD_VAR 0 2
17587: PPUSH
17588: CALL_OW 74
17592: PPUSH
17593: CALL_OW 115
// end ;
17597: GO 17524
17599: POP
17600: POP
// until not tmp ;
17601: LD_VAR 0 3
17605: NOT
17606: IFFALSE 17507
// end ;
17608: PPOPN 3
17610: END
// every 0 0$1 trigger StreamModeActive and sTroll do
17611: LD_EXP 32
17615: IFFALSE 17623
17617: PUSH
17618: LD_EXP 57
17622: AND
17623: IFFALSE 17677
17625: GO 17627
17627: DISABLE
// begin ToLua ( displayTroll(); ) ;
17628: LD_STRING displayTroll();
17630: PPUSH
17631: CALL_OW 559
// wait ( 3 3$00 ) ;
17635: LD_INT 6300
17637: PPUSH
17638: CALL_OW 67
// ToLua ( hideTroll(); ) ;
17642: LD_STRING hideTroll();
17644: PPUSH
17645: CALL_OW 559
// wait ( 1 1$00 ) ;
17649: LD_INT 2100
17651: PPUSH
17652: CALL_OW 67
// ToLua ( displayTroll(); ) ;
17656: LD_STRING displayTroll();
17658: PPUSH
17659: CALL_OW 559
// wait ( 1 1$00 ) ;
17663: LD_INT 2100
17665: PPUSH
17666: CALL_OW 67
// ToLua ( hideTroll(); ) ;
17670: LD_STRING hideTroll();
17672: PPUSH
17673: CALL_OW 559
// end ;
17677: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
17678: LD_EXP 32
17682: IFFALSE 17690
17684: PUSH
17685: LD_EXP 58
17689: AND
17690: IFFALSE 17753
17692: GO 17694
17694: DISABLE
17695: LD_INT 0
17697: PPUSH
// begin p := 0 ;
17698: LD_ADDR_VAR 0 1
17702: PUSH
17703: LD_INT 0
17705: ST_TO_ADDR
// repeat game_speed := 1 ;
17706: LD_ADDR_OWVAR 65
17710: PUSH
17711: LD_INT 1
17713: ST_TO_ADDR
// wait ( 0 0$1 ) ;
17714: LD_INT 35
17716: PPUSH
17717: CALL_OW 67
// p := p + 1 ;
17721: LD_ADDR_VAR 0 1
17725: PUSH
17726: LD_VAR 0 1
17730: PUSH
17731: LD_INT 1
17733: PLUS
17734: ST_TO_ADDR
// until p >= 60 ;
17735: LD_VAR 0 1
17739: PUSH
17740: LD_INT 60
17742: GREATEREQUAL
17743: IFFALSE 17706
// game_speed := 4 ;
17745: LD_ADDR_OWVAR 65
17749: PUSH
17750: LD_INT 4
17752: ST_TO_ADDR
// end ;
17753: PPOPN 1
17755: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
17756: LD_EXP 32
17760: IFFALSE 17768
17762: PUSH
17763: LD_EXP 59
17767: AND
17768: IFFALSE 17914
17770: GO 17772
17772: DISABLE
17773: LD_INT 0
17775: PPUSH
17776: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
17777: LD_ADDR_VAR 0 1
17781: PUSH
17782: LD_INT 22
17784: PUSH
17785: LD_OWVAR 2
17789: PUSH
17790: EMPTY
17791: LIST
17792: LIST
17793: PUSH
17794: LD_INT 2
17796: PUSH
17797: LD_INT 30
17799: PUSH
17800: LD_INT 0
17802: PUSH
17803: EMPTY
17804: LIST
17805: LIST
17806: PUSH
17807: LD_INT 30
17809: PUSH
17810: LD_INT 1
17812: PUSH
17813: EMPTY
17814: LIST
17815: LIST
17816: PUSH
17817: EMPTY
17818: LIST
17819: LIST
17820: LIST
17821: PUSH
17822: EMPTY
17823: LIST
17824: LIST
17825: PPUSH
17826: CALL_OW 69
17830: ST_TO_ADDR
// if not depot then
17831: LD_VAR 0 1
17835: NOT
17836: IFFALSE 17840
// exit ;
17838: GO 17914
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
17840: LD_ADDR_VAR 0 2
17844: PUSH
17845: LD_VAR 0 1
17849: PUSH
17850: LD_INT 1
17852: PPUSH
17853: LD_VAR 0 1
17857: PPUSH
17858: CALL_OW 12
17862: ARRAY
17863: PPUSH
17864: CALL_OW 274
17868: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
17869: LD_VAR 0 2
17873: PPUSH
17874: LD_INT 1
17876: PPUSH
17877: LD_INT 0
17879: PPUSH
17880: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
17884: LD_VAR 0 2
17888: PPUSH
17889: LD_INT 2
17891: PPUSH
17892: LD_INT 0
17894: PPUSH
17895: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
17899: LD_VAR 0 2
17903: PPUSH
17904: LD_INT 3
17906: PPUSH
17907: LD_INT 0
17909: PPUSH
17910: CALL_OW 277
// end ;
17914: PPOPN 2
17916: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
17917: LD_EXP 32
17921: IFFALSE 17929
17923: PUSH
17924: LD_EXP 60
17928: AND
17929: IFFALSE 18026
17931: GO 17933
17933: DISABLE
17934: LD_INT 0
17936: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
17937: LD_ADDR_VAR 0 1
17941: PUSH
17942: LD_INT 22
17944: PUSH
17945: LD_OWVAR 2
17949: PUSH
17950: EMPTY
17951: LIST
17952: LIST
17953: PUSH
17954: LD_INT 21
17956: PUSH
17957: LD_INT 1
17959: PUSH
17960: EMPTY
17961: LIST
17962: LIST
17963: PUSH
17964: LD_INT 3
17966: PUSH
17967: LD_INT 23
17969: PUSH
17970: LD_INT 0
17972: PUSH
17973: EMPTY
17974: LIST
17975: LIST
17976: PUSH
17977: EMPTY
17978: LIST
17979: LIST
17980: PUSH
17981: EMPTY
17982: LIST
17983: LIST
17984: LIST
17985: PPUSH
17986: CALL_OW 69
17990: ST_TO_ADDR
// if not tmp then
17991: LD_VAR 0 1
17995: NOT
17996: IFFALSE 18000
// exit ;
17998: GO 18026
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
18000: LD_VAR 0 1
18004: PUSH
18005: LD_INT 1
18007: PPUSH
18008: LD_VAR 0 1
18012: PPUSH
18013: CALL_OW 12
18017: ARRAY
18018: PPUSH
18019: LD_INT 200
18021: PPUSH
18022: CALL_OW 234
// end ;
18026: PPOPN 1
18028: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
18029: LD_EXP 32
18033: IFFALSE 18041
18035: PUSH
18036: LD_EXP 61
18040: AND
18041: IFFALSE 18120
18043: GO 18045
18045: DISABLE
18046: LD_INT 0
18048: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
18049: LD_ADDR_VAR 0 1
18053: PUSH
18054: LD_INT 22
18056: PUSH
18057: LD_OWVAR 2
18061: PUSH
18062: EMPTY
18063: LIST
18064: LIST
18065: PUSH
18066: LD_INT 21
18068: PUSH
18069: LD_INT 2
18071: PUSH
18072: EMPTY
18073: LIST
18074: LIST
18075: PUSH
18076: EMPTY
18077: LIST
18078: LIST
18079: PPUSH
18080: CALL_OW 69
18084: ST_TO_ADDR
// if not tmp then
18085: LD_VAR 0 1
18089: NOT
18090: IFFALSE 18094
// exit ;
18092: GO 18120
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
18094: LD_VAR 0 1
18098: PUSH
18099: LD_INT 1
18101: PPUSH
18102: LD_VAR 0 1
18106: PPUSH
18107: CALL_OW 12
18111: ARRAY
18112: PPUSH
18113: LD_INT 60
18115: PPUSH
18116: CALL_OW 234
// end ;
18120: PPOPN 1
18122: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
18123: LD_EXP 32
18127: IFFALSE 18135
18129: PUSH
18130: LD_EXP 62
18134: AND
18135: IFFALSE 18234
18137: GO 18139
18139: DISABLE
18140: LD_INT 0
18142: PPUSH
18143: PPUSH
// begin enable ;
18144: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
18145: LD_ADDR_VAR 0 1
18149: PUSH
18150: LD_INT 22
18152: PUSH
18153: LD_OWVAR 2
18157: PUSH
18158: EMPTY
18159: LIST
18160: LIST
18161: PUSH
18162: LD_INT 61
18164: PUSH
18165: EMPTY
18166: LIST
18167: PUSH
18168: LD_INT 33
18170: PUSH
18171: LD_INT 2
18173: PUSH
18174: EMPTY
18175: LIST
18176: LIST
18177: PUSH
18178: EMPTY
18179: LIST
18180: LIST
18181: LIST
18182: PPUSH
18183: CALL_OW 69
18187: ST_TO_ADDR
// if not tmp then
18188: LD_VAR 0 1
18192: NOT
18193: IFFALSE 18197
// exit ;
18195: GO 18234
// for i in tmp do
18197: LD_ADDR_VAR 0 2
18201: PUSH
18202: LD_VAR 0 1
18206: PUSH
18207: FOR_IN
18208: IFFALSE 18232
// if IsControledBy ( i ) then
18210: LD_VAR 0 2
18214: PPUSH
18215: CALL_OW 312
18219: IFFALSE 18230
// ComUnlink ( i ) ;
18221: LD_VAR 0 2
18225: PPUSH
18226: CALL_OW 136
18230: GO 18207
18232: POP
18233: POP
// end ;
18234: PPOPN 2
18236: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
18237: LD_EXP 32
18241: IFFALSE 18249
18243: PUSH
18244: LD_EXP 63
18248: AND
18249: IFFALSE 18389
18251: GO 18253
18253: DISABLE
18254: LD_INT 0
18256: PPUSH
18257: PPUSH
// begin ToLua ( displayPowell(); ) ;
18258: LD_STRING displayPowell();
18260: PPUSH
18261: CALL_OW 559
// uc_side := 0 ;
18265: LD_ADDR_OWVAR 20
18269: PUSH
18270: LD_INT 0
18272: ST_TO_ADDR
// uc_nation := 2 ;
18273: LD_ADDR_OWVAR 21
18277: PUSH
18278: LD_INT 2
18280: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
18281: LD_ADDR_OWVAR 37
18285: PUSH
18286: LD_INT 14
18288: ST_TO_ADDR
// vc_engine := engine_siberite ;
18289: LD_ADDR_OWVAR 39
18293: PUSH
18294: LD_INT 3
18296: ST_TO_ADDR
// vc_control := control_apeman ;
18297: LD_ADDR_OWVAR 38
18301: PUSH
18302: LD_INT 5
18304: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
18305: LD_ADDR_OWVAR 40
18309: PUSH
18310: LD_INT 29
18312: ST_TO_ADDR
// un := CreateVehicle ;
18313: LD_ADDR_VAR 0 2
18317: PUSH
18318: CALL_OW 45
18322: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
18323: LD_VAR 0 2
18327: PPUSH
18328: LD_INT 1
18330: PPUSH
18331: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
18335: LD_INT 35
18337: PPUSH
18338: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
18342: LD_VAR 0 2
18346: PPUSH
18347: LD_INT 22
18349: PUSH
18350: LD_OWVAR 2
18354: PUSH
18355: EMPTY
18356: LIST
18357: LIST
18358: PPUSH
18359: CALL_OW 69
18363: PPUSH
18364: LD_VAR 0 2
18368: PPUSH
18369: CALL_OW 74
18373: PPUSH
18374: CALL_OW 115
// until IsDead ( un ) ;
18378: LD_VAR 0 2
18382: PPUSH
18383: CALL_OW 301
18387: IFFALSE 18335
// end ;
18389: PPOPN 2
18391: END
// every 0 0$1 trigger StreamModeActive and sStu do
18392: LD_EXP 32
18396: IFFALSE 18404
18398: PUSH
18399: LD_EXP 71
18403: AND
18404: IFFALSE 18420
18406: GO 18408
18408: DISABLE
// begin ToLua ( displayStucuk(); ) ;
18409: LD_STRING displayStucuk();
18411: PPUSH
18412: CALL_OW 559
// ResetFog ;
18416: CALL_OW 335
// end ;
18420: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
18421: LD_EXP 32
18425: IFFALSE 18433
18427: PUSH
18428: LD_EXP 64
18432: AND
18433: IFFALSE 18574
18435: GO 18437
18437: DISABLE
18438: LD_INT 0
18440: PPUSH
18441: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
18442: LD_ADDR_VAR 0 2
18446: PUSH
18447: LD_INT 22
18449: PUSH
18450: LD_OWVAR 2
18454: PUSH
18455: EMPTY
18456: LIST
18457: LIST
18458: PUSH
18459: LD_INT 21
18461: PUSH
18462: LD_INT 1
18464: PUSH
18465: EMPTY
18466: LIST
18467: LIST
18468: PUSH
18469: EMPTY
18470: LIST
18471: LIST
18472: PPUSH
18473: CALL_OW 69
18477: ST_TO_ADDR
// if not tmp then
18478: LD_VAR 0 2
18482: NOT
18483: IFFALSE 18487
// exit ;
18485: GO 18574
// un := tmp [ rand ( 1 , tmp ) ] ;
18487: LD_ADDR_VAR 0 1
18491: PUSH
18492: LD_VAR 0 2
18496: PUSH
18497: LD_INT 1
18499: PPUSH
18500: LD_VAR 0 2
18504: PPUSH
18505: CALL_OW 12
18509: ARRAY
18510: ST_TO_ADDR
// SetSide ( un , 0 ) ;
18511: LD_VAR 0 1
18515: PPUSH
18516: LD_INT 0
18518: PPUSH
18519: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
18523: LD_VAR 0 1
18527: PPUSH
18528: LD_OWVAR 3
18532: PUSH
18533: LD_VAR 0 1
18537: DIFF
18538: PPUSH
18539: LD_VAR 0 1
18543: PPUSH
18544: CALL_OW 74
18548: PPUSH
18549: CALL_OW 115
// wait ( 0 0$20 ) ;
18553: LD_INT 700
18555: PPUSH
18556: CALL_OW 67
// SetSide ( un , your_side ) ;
18560: LD_VAR 0 1
18564: PPUSH
18565: LD_OWVAR 2
18569: PPUSH
18570: CALL_OW 235
// end ;
18574: PPOPN 2
18576: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
18577: LD_EXP 32
18581: IFFALSE 18589
18583: PUSH
18584: LD_EXP 65
18588: AND
18589: IFFALSE 18695
18591: GO 18593
18593: DISABLE
18594: LD_INT 0
18596: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18597: LD_ADDR_VAR 0 1
18601: PUSH
18602: LD_INT 22
18604: PUSH
18605: LD_OWVAR 2
18609: PUSH
18610: EMPTY
18611: LIST
18612: LIST
18613: PUSH
18614: LD_INT 2
18616: PUSH
18617: LD_INT 30
18619: PUSH
18620: LD_INT 0
18622: PUSH
18623: EMPTY
18624: LIST
18625: LIST
18626: PUSH
18627: LD_INT 30
18629: PUSH
18630: LD_INT 1
18632: PUSH
18633: EMPTY
18634: LIST
18635: LIST
18636: PUSH
18637: EMPTY
18638: LIST
18639: LIST
18640: LIST
18641: PUSH
18642: EMPTY
18643: LIST
18644: LIST
18645: PPUSH
18646: CALL_OW 69
18650: ST_TO_ADDR
// if not depot then
18651: LD_VAR 0 1
18655: NOT
18656: IFFALSE 18660
// exit ;
18658: GO 18695
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
18660: LD_VAR 0 1
18664: PUSH
18665: LD_INT 1
18667: ARRAY
18668: PPUSH
18669: CALL_OW 250
18673: PPUSH
18674: LD_VAR 0 1
18678: PUSH
18679: LD_INT 1
18681: ARRAY
18682: PPUSH
18683: CALL_OW 251
18687: PPUSH
18688: LD_INT 70
18690: PPUSH
18691: CALL_OW 495
// end ;
18695: PPOPN 1
18697: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
18698: LD_EXP 32
18702: IFFALSE 18710
18704: PUSH
18705: LD_EXP 66
18709: AND
18710: IFFALSE 18921
18712: GO 18714
18714: DISABLE
18715: LD_INT 0
18717: PPUSH
18718: PPUSH
18719: PPUSH
18720: PPUSH
18721: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
18722: LD_ADDR_VAR 0 5
18726: PUSH
18727: LD_INT 22
18729: PUSH
18730: LD_OWVAR 2
18734: PUSH
18735: EMPTY
18736: LIST
18737: LIST
18738: PUSH
18739: LD_INT 21
18741: PUSH
18742: LD_INT 1
18744: PUSH
18745: EMPTY
18746: LIST
18747: LIST
18748: PUSH
18749: EMPTY
18750: LIST
18751: LIST
18752: PPUSH
18753: CALL_OW 69
18757: ST_TO_ADDR
// if not tmp then
18758: LD_VAR 0 5
18762: NOT
18763: IFFALSE 18767
// exit ;
18765: GO 18921
// for i in tmp do
18767: LD_ADDR_VAR 0 1
18771: PUSH
18772: LD_VAR 0 5
18776: PUSH
18777: FOR_IN
18778: IFFALSE 18919
// begin d := rand ( 0 , 5 ) ;
18780: LD_ADDR_VAR 0 4
18784: PUSH
18785: LD_INT 0
18787: PPUSH
18788: LD_INT 5
18790: PPUSH
18791: CALL_OW 12
18795: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
18796: LD_ADDR_VAR 0 2
18800: PUSH
18801: LD_VAR 0 1
18805: PPUSH
18806: CALL_OW 250
18810: PPUSH
18811: LD_VAR 0 4
18815: PPUSH
18816: LD_INT 3
18818: PPUSH
18819: LD_INT 12
18821: PPUSH
18822: CALL_OW 12
18826: PPUSH
18827: CALL_OW 272
18831: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
18832: LD_ADDR_VAR 0 3
18836: PUSH
18837: LD_VAR 0 1
18841: PPUSH
18842: CALL_OW 251
18846: PPUSH
18847: LD_VAR 0 4
18851: PPUSH
18852: LD_INT 3
18854: PPUSH
18855: LD_INT 12
18857: PPUSH
18858: CALL_OW 12
18862: PPUSH
18863: CALL_OW 273
18867: ST_TO_ADDR
// if ValidHex ( x , y ) then
18868: LD_VAR 0 2
18872: PPUSH
18873: LD_VAR 0 3
18877: PPUSH
18878: CALL_OW 488
18882: IFFALSE 18917
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
18884: LD_VAR 0 1
18888: PPUSH
18889: LD_VAR 0 2
18893: PPUSH
18894: LD_VAR 0 3
18898: PPUSH
18899: LD_INT 3
18901: PPUSH
18902: LD_INT 6
18904: PPUSH
18905: CALL_OW 12
18909: PPUSH
18910: LD_INT 1
18912: PPUSH
18913: CALL_OW 483
// end ;
18917: GO 18777
18919: POP
18920: POP
// end ;
18921: PPOPN 5
18923: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
18924: LD_EXP 32
18928: IFFALSE 18936
18930: PUSH
18931: LD_EXP 67
18935: AND
18936: IFFALSE 19030
18938: GO 18940
18940: DISABLE
18941: LD_INT 0
18943: PPUSH
18944: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
18945: LD_ADDR_VAR 0 2
18949: PUSH
18950: LD_INT 22
18952: PUSH
18953: LD_OWVAR 2
18957: PUSH
18958: EMPTY
18959: LIST
18960: LIST
18961: PUSH
18962: LD_INT 32
18964: PUSH
18965: LD_INT 1
18967: PUSH
18968: EMPTY
18969: LIST
18970: LIST
18971: PUSH
18972: LD_INT 21
18974: PUSH
18975: LD_INT 2
18977: PUSH
18978: EMPTY
18979: LIST
18980: LIST
18981: PUSH
18982: EMPTY
18983: LIST
18984: LIST
18985: LIST
18986: PPUSH
18987: CALL_OW 69
18991: ST_TO_ADDR
// if not tmp then
18992: LD_VAR 0 2
18996: NOT
18997: IFFALSE 19001
// exit ;
18999: GO 19030
// for i in tmp do
19001: LD_ADDR_VAR 0 1
19005: PUSH
19006: LD_VAR 0 2
19010: PUSH
19011: FOR_IN
19012: IFFALSE 19028
// SetFuel ( i , 0 ) ;
19014: LD_VAR 0 1
19018: PPUSH
19019: LD_INT 0
19021: PPUSH
19022: CALL_OW 240
19026: GO 19011
19028: POP
19029: POP
// end ;
19030: PPOPN 2
19032: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
19033: LD_EXP 32
19037: IFFALSE 19045
19039: PUSH
19040: LD_EXP 68
19044: AND
19045: IFFALSE 19111
19047: GO 19049
19049: DISABLE
19050: LD_INT 0
19052: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
19053: LD_ADDR_VAR 0 1
19057: PUSH
19058: LD_INT 22
19060: PUSH
19061: LD_OWVAR 2
19065: PUSH
19066: EMPTY
19067: LIST
19068: LIST
19069: PUSH
19070: LD_INT 30
19072: PUSH
19073: LD_INT 29
19075: PUSH
19076: EMPTY
19077: LIST
19078: LIST
19079: PUSH
19080: EMPTY
19081: LIST
19082: LIST
19083: PPUSH
19084: CALL_OW 69
19088: ST_TO_ADDR
// if not tmp then
19089: LD_VAR 0 1
19093: NOT
19094: IFFALSE 19098
// exit ;
19096: GO 19111
// DestroyUnit ( tmp [ 1 ] ) ;
19098: LD_VAR 0 1
19102: PUSH
19103: LD_INT 1
19105: ARRAY
19106: PPUSH
19107: CALL_OW 65
// end ;
19111: PPOPN 1
19113: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
19114: LD_EXP 32
19118: IFFALSE 19126
19120: PUSH
19121: LD_EXP 70
19125: AND
19126: IFFALSE 19255
19128: GO 19130
19130: DISABLE
19131: LD_INT 0
19133: PPUSH
// begin uc_side := 0 ;
19134: LD_ADDR_OWVAR 20
19138: PUSH
19139: LD_INT 0
19141: ST_TO_ADDR
// uc_nation := nation_arabian ;
19142: LD_ADDR_OWVAR 21
19146: PUSH
19147: LD_INT 2
19149: ST_TO_ADDR
// hc_gallery :=  ;
19150: LD_ADDR_OWVAR 33
19154: PUSH
19155: LD_STRING 
19157: ST_TO_ADDR
// hc_name :=  ;
19158: LD_ADDR_OWVAR 26
19162: PUSH
19163: LD_STRING 
19165: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
19166: LD_INT 1
19168: PPUSH
19169: LD_INT 11
19171: PPUSH
19172: LD_INT 10
19174: PPUSH
19175: CALL_OW 380
// un := CreateHuman ;
19179: LD_ADDR_VAR 0 1
19183: PUSH
19184: CALL_OW 44
19188: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
19189: LD_VAR 0 1
19193: PPUSH
19194: LD_INT 1
19196: PPUSH
19197: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
19201: LD_INT 35
19203: PPUSH
19204: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
19208: LD_VAR 0 1
19212: PPUSH
19213: LD_INT 22
19215: PUSH
19216: LD_OWVAR 2
19220: PUSH
19221: EMPTY
19222: LIST
19223: LIST
19224: PPUSH
19225: CALL_OW 69
19229: PPUSH
19230: LD_VAR 0 1
19234: PPUSH
19235: CALL_OW 74
19239: PPUSH
19240: CALL_OW 115
// until IsDead ( un ) ;
19244: LD_VAR 0 1
19248: PPUSH
19249: CALL_OW 301
19253: IFFALSE 19201
// end ;
19255: PPOPN 1
19257: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
19258: LD_EXP 32
19262: IFFALSE 19270
19264: PUSH
19265: LD_EXP 72
19269: AND
19270: IFFALSE 19282
19272: GO 19274
19274: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
19275: LD_STRING earthquake(getX(game), 0, 32)
19277: PPUSH
19278: CALL_OW 559
19282: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
19283: LD_EXP 32
19287: IFFALSE 19295
19289: PUSH
19290: LD_EXP 73
19294: AND
19295: IFFALSE 19386
19297: GO 19299
19299: DISABLE
19300: LD_INT 0
19302: PPUSH
// begin enable ;
19303: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
19304: LD_ADDR_VAR 0 1
19308: PUSH
19309: LD_INT 22
19311: PUSH
19312: LD_OWVAR 2
19316: PUSH
19317: EMPTY
19318: LIST
19319: LIST
19320: PUSH
19321: LD_INT 21
19323: PUSH
19324: LD_INT 2
19326: PUSH
19327: EMPTY
19328: LIST
19329: LIST
19330: PUSH
19331: LD_INT 33
19333: PUSH
19334: LD_INT 3
19336: PUSH
19337: EMPTY
19338: LIST
19339: LIST
19340: PUSH
19341: EMPTY
19342: LIST
19343: LIST
19344: LIST
19345: PPUSH
19346: CALL_OW 69
19350: ST_TO_ADDR
// if not tmp then
19351: LD_VAR 0 1
19355: NOT
19356: IFFALSE 19360
// exit ;
19358: GO 19386
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
19360: LD_VAR 0 1
19364: PUSH
19365: LD_INT 1
19367: PPUSH
19368: LD_VAR 0 1
19372: PPUSH
19373: CALL_OW 12
19377: ARRAY
19378: PPUSH
19379: LD_INT 1
19381: PPUSH
19382: CALL_OW 234
// end ;
19386: PPOPN 1
19388: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
19389: LD_EXP 32
19393: IFFALSE 19401
19395: PUSH
19396: LD_EXP 74
19400: AND
19401: IFFALSE 19542
19403: GO 19405
19405: DISABLE
19406: LD_INT 0
19408: PPUSH
19409: PPUSH
19410: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
19411: LD_ADDR_VAR 0 3
19415: PUSH
19416: LD_INT 22
19418: PUSH
19419: LD_OWVAR 2
19423: PUSH
19424: EMPTY
19425: LIST
19426: LIST
19427: PUSH
19428: LD_INT 25
19430: PUSH
19431: LD_INT 1
19433: PUSH
19434: EMPTY
19435: LIST
19436: LIST
19437: PUSH
19438: EMPTY
19439: LIST
19440: LIST
19441: PPUSH
19442: CALL_OW 69
19446: ST_TO_ADDR
// if not tmp then
19447: LD_VAR 0 3
19451: NOT
19452: IFFALSE 19456
// exit ;
19454: GO 19542
// un := tmp [ rand ( 1 , tmp ) ] ;
19456: LD_ADDR_VAR 0 2
19460: PUSH
19461: LD_VAR 0 3
19465: PUSH
19466: LD_INT 1
19468: PPUSH
19469: LD_VAR 0 3
19473: PPUSH
19474: CALL_OW 12
19478: ARRAY
19479: ST_TO_ADDR
// if Crawls ( un ) then
19480: LD_VAR 0 2
19484: PPUSH
19485: CALL_OW 318
19489: IFFALSE 19500
// ComWalk ( un ) ;
19491: LD_VAR 0 2
19495: PPUSH
19496: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
19500: LD_VAR 0 2
19504: PPUSH
19505: LD_INT 9
19507: PPUSH
19508: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
19512: LD_INT 28
19514: PPUSH
19515: LD_OWVAR 2
19519: PPUSH
19520: LD_INT 2
19522: PPUSH
19523: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
19527: LD_INT 29
19529: PPUSH
19530: LD_OWVAR 2
19534: PPUSH
19535: LD_INT 2
19537: PPUSH
19538: CALL_OW 322
// end ;
19542: PPOPN 3
19544: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
19545: LD_EXP 32
19549: IFFALSE 19557
19551: PUSH
19552: LD_EXP 75
19556: AND
19557: IFFALSE 19668
19559: GO 19561
19561: DISABLE
19562: LD_INT 0
19564: PPUSH
19565: PPUSH
19566: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
19567: LD_ADDR_VAR 0 3
19571: PUSH
19572: LD_INT 22
19574: PUSH
19575: LD_OWVAR 2
19579: PUSH
19580: EMPTY
19581: LIST
19582: LIST
19583: PUSH
19584: LD_INT 25
19586: PUSH
19587: LD_INT 1
19589: PUSH
19590: EMPTY
19591: LIST
19592: LIST
19593: PUSH
19594: EMPTY
19595: LIST
19596: LIST
19597: PPUSH
19598: CALL_OW 69
19602: ST_TO_ADDR
// if not tmp then
19603: LD_VAR 0 3
19607: NOT
19608: IFFALSE 19612
// exit ;
19610: GO 19668
// un := tmp [ rand ( 1 , tmp ) ] ;
19612: LD_ADDR_VAR 0 2
19616: PUSH
19617: LD_VAR 0 3
19621: PUSH
19622: LD_INT 1
19624: PPUSH
19625: LD_VAR 0 3
19629: PPUSH
19630: CALL_OW 12
19634: ARRAY
19635: ST_TO_ADDR
// if Crawls ( un ) then
19636: LD_VAR 0 2
19640: PPUSH
19641: CALL_OW 318
19645: IFFALSE 19656
// ComWalk ( un ) ;
19647: LD_VAR 0 2
19651: PPUSH
19652: CALL_OW 138
// SetClass ( un , class_mortar ) ;
19656: LD_VAR 0 2
19660: PPUSH
19661: LD_INT 8
19663: PPUSH
19664: CALL_OW 336
// end ;
19668: PPOPN 3
19670: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
19671: LD_EXP 32
19675: IFFALSE 19683
19677: PUSH
19678: LD_EXP 76
19682: AND
19683: IFFALSE 19827
19685: GO 19687
19687: DISABLE
19688: LD_INT 0
19690: PPUSH
19691: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
19692: LD_ADDR_VAR 0 2
19696: PUSH
19697: LD_INT 22
19699: PUSH
19700: LD_OWVAR 2
19704: PUSH
19705: EMPTY
19706: LIST
19707: LIST
19708: PUSH
19709: LD_INT 21
19711: PUSH
19712: LD_INT 2
19714: PUSH
19715: EMPTY
19716: LIST
19717: LIST
19718: PUSH
19719: LD_INT 2
19721: PUSH
19722: LD_INT 34
19724: PUSH
19725: LD_INT 12
19727: PUSH
19728: EMPTY
19729: LIST
19730: LIST
19731: PUSH
19732: LD_INT 34
19734: PUSH
19735: LD_INT 51
19737: PUSH
19738: EMPTY
19739: LIST
19740: LIST
19741: PUSH
19742: LD_INT 34
19744: PUSH
19745: LD_INT 32
19747: PUSH
19748: EMPTY
19749: LIST
19750: LIST
19751: PUSH
19752: EMPTY
19753: LIST
19754: LIST
19755: LIST
19756: LIST
19757: PUSH
19758: EMPTY
19759: LIST
19760: LIST
19761: LIST
19762: PPUSH
19763: CALL_OW 69
19767: ST_TO_ADDR
// if not tmp then
19768: LD_VAR 0 2
19772: NOT
19773: IFFALSE 19777
// exit ;
19775: GO 19827
// for i in tmp do
19777: LD_ADDR_VAR 0 1
19781: PUSH
19782: LD_VAR 0 2
19786: PUSH
19787: FOR_IN
19788: IFFALSE 19825
// if GetCargo ( i , mat_artifact ) = 0 then
19790: LD_VAR 0 1
19794: PPUSH
19795: LD_INT 4
19797: PPUSH
19798: CALL_OW 289
19802: PUSH
19803: LD_INT 0
19805: EQUAL
19806: IFFALSE 19823
// SetCargo ( i , mat_siberit , 100 ) ;
19808: LD_VAR 0 1
19812: PPUSH
19813: LD_INT 3
19815: PPUSH
19816: LD_INT 100
19818: PPUSH
19819: CALL_OW 290
19823: GO 19787
19825: POP
19826: POP
// end ;
19827: PPOPN 2
19829: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
19830: LD_EXP 32
19834: IFFALSE 19842
19836: PUSH
19837: LD_EXP 77
19841: AND
19842: IFFALSE 20025
19844: GO 19846
19846: DISABLE
19847: LD_INT 0
19849: PPUSH
19850: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
19851: LD_ADDR_VAR 0 2
19855: PUSH
19856: LD_INT 22
19858: PUSH
19859: LD_OWVAR 2
19863: PUSH
19864: EMPTY
19865: LIST
19866: LIST
19867: PPUSH
19868: CALL_OW 69
19872: ST_TO_ADDR
// if not tmp then
19873: LD_VAR 0 2
19877: NOT
19878: IFFALSE 19882
// exit ;
19880: GO 20025
// for i := 1 to 2 do
19882: LD_ADDR_VAR 0 1
19886: PUSH
19887: DOUBLE
19888: LD_INT 1
19890: DEC
19891: ST_TO_ADDR
19892: LD_INT 2
19894: PUSH
19895: FOR_TO
19896: IFFALSE 20023
// begin uc_side := your_side ;
19898: LD_ADDR_OWVAR 20
19902: PUSH
19903: LD_OWVAR 2
19907: ST_TO_ADDR
// uc_nation := nation_american ;
19908: LD_ADDR_OWVAR 21
19912: PUSH
19913: LD_INT 1
19915: ST_TO_ADDR
// vc_chassis := us_morphling ;
19916: LD_ADDR_OWVAR 37
19920: PUSH
19921: LD_INT 5
19923: ST_TO_ADDR
// vc_engine := engine_siberite ;
19924: LD_ADDR_OWVAR 39
19928: PUSH
19929: LD_INT 3
19931: ST_TO_ADDR
// vc_control := control_computer ;
19932: LD_ADDR_OWVAR 38
19936: PUSH
19937: LD_INT 3
19939: ST_TO_ADDR
// vc_weapon := us_double_laser ;
19940: LD_ADDR_OWVAR 40
19944: PUSH
19945: LD_INT 10
19947: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
19948: LD_VAR 0 2
19952: PUSH
19953: LD_INT 1
19955: ARRAY
19956: PPUSH
19957: CALL_OW 310
19961: NOT
19962: IFFALSE 20009
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
19964: CALL_OW 45
19968: PPUSH
19969: LD_VAR 0 2
19973: PUSH
19974: LD_INT 1
19976: ARRAY
19977: PPUSH
19978: CALL_OW 250
19982: PPUSH
19983: LD_VAR 0 2
19987: PUSH
19988: LD_INT 1
19990: ARRAY
19991: PPUSH
19992: CALL_OW 251
19996: PPUSH
19997: LD_INT 12
19999: PPUSH
20000: LD_INT 1
20002: PPUSH
20003: CALL_OW 50
20007: GO 20021
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
20009: CALL_OW 45
20013: PPUSH
20014: LD_INT 1
20016: PPUSH
20017: CALL_OW 51
// end ;
20021: GO 19895
20023: POP
20024: POP
// end ;
20025: PPOPN 2
20027: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
20028: LD_EXP 32
20032: IFFALSE 20040
20034: PUSH
20035: LD_EXP 78
20039: AND
20040: IFFALSE 20262
20042: GO 20044
20044: DISABLE
20045: LD_INT 0
20047: PPUSH
20048: PPUSH
20049: PPUSH
20050: PPUSH
20051: PPUSH
20052: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
20053: LD_ADDR_VAR 0 6
20057: PUSH
20058: LD_INT 22
20060: PUSH
20061: LD_OWVAR 2
20065: PUSH
20066: EMPTY
20067: LIST
20068: LIST
20069: PUSH
20070: LD_INT 21
20072: PUSH
20073: LD_INT 1
20075: PUSH
20076: EMPTY
20077: LIST
20078: LIST
20079: PUSH
20080: LD_INT 3
20082: PUSH
20083: LD_INT 23
20085: PUSH
20086: LD_INT 0
20088: PUSH
20089: EMPTY
20090: LIST
20091: LIST
20092: PUSH
20093: EMPTY
20094: LIST
20095: LIST
20096: PUSH
20097: EMPTY
20098: LIST
20099: LIST
20100: LIST
20101: PPUSH
20102: CALL_OW 69
20106: ST_TO_ADDR
// if not tmp then
20107: LD_VAR 0 6
20111: NOT
20112: IFFALSE 20116
// exit ;
20114: GO 20262
// s1 := rand ( 1 , 4 ) ;
20116: LD_ADDR_VAR 0 2
20120: PUSH
20121: LD_INT 1
20123: PPUSH
20124: LD_INT 4
20126: PPUSH
20127: CALL_OW 12
20131: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
20132: LD_ADDR_VAR 0 4
20136: PUSH
20137: LD_VAR 0 6
20141: PUSH
20142: LD_INT 1
20144: ARRAY
20145: PPUSH
20146: LD_VAR 0 2
20150: PPUSH
20151: CALL_OW 259
20155: ST_TO_ADDR
// if s1 = 1 then
20156: LD_VAR 0 2
20160: PUSH
20161: LD_INT 1
20163: EQUAL
20164: IFFALSE 20184
// s2 := rand ( 2 , 4 ) else
20166: LD_ADDR_VAR 0 3
20170: PUSH
20171: LD_INT 2
20173: PPUSH
20174: LD_INT 4
20176: PPUSH
20177: CALL_OW 12
20181: ST_TO_ADDR
20182: GO 20192
// s2 := 1 ;
20184: LD_ADDR_VAR 0 3
20188: PUSH
20189: LD_INT 1
20191: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
20192: LD_ADDR_VAR 0 5
20196: PUSH
20197: LD_VAR 0 6
20201: PUSH
20202: LD_INT 1
20204: ARRAY
20205: PPUSH
20206: LD_VAR 0 3
20210: PPUSH
20211: CALL_OW 259
20215: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
20216: LD_VAR 0 6
20220: PUSH
20221: LD_INT 1
20223: ARRAY
20224: PPUSH
20225: LD_VAR 0 2
20229: PPUSH
20230: LD_VAR 0 5
20234: PPUSH
20235: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
20239: LD_VAR 0 6
20243: PUSH
20244: LD_INT 1
20246: ARRAY
20247: PPUSH
20248: LD_VAR 0 3
20252: PPUSH
20253: LD_VAR 0 4
20257: PPUSH
20258: CALL_OW 237
// end ;
20262: PPOPN 6
20264: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
20265: LD_EXP 32
20269: IFFALSE 20277
20271: PUSH
20272: LD_EXP 79
20276: AND
20277: IFFALSE 20356
20279: GO 20281
20281: DISABLE
20282: LD_INT 0
20284: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
20285: LD_ADDR_VAR 0 1
20289: PUSH
20290: LD_INT 22
20292: PUSH
20293: LD_OWVAR 2
20297: PUSH
20298: EMPTY
20299: LIST
20300: LIST
20301: PUSH
20302: LD_INT 30
20304: PUSH
20305: LD_INT 3
20307: PUSH
20308: EMPTY
20309: LIST
20310: LIST
20311: PUSH
20312: EMPTY
20313: LIST
20314: LIST
20315: PPUSH
20316: CALL_OW 69
20320: ST_TO_ADDR
// if not tmp then
20321: LD_VAR 0 1
20325: NOT
20326: IFFALSE 20330
// exit ;
20328: GO 20356
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
20330: LD_VAR 0 1
20334: PUSH
20335: LD_INT 1
20337: PPUSH
20338: LD_VAR 0 1
20342: PPUSH
20343: CALL_OW 12
20347: ARRAY
20348: PPUSH
20349: LD_INT 1
20351: PPUSH
20352: CALL_OW 234
// end ;
20356: PPOPN 1
20358: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
20359: LD_EXP 32
20363: IFFALSE 20371
20365: PUSH
20366: LD_EXP 80
20370: AND
20371: IFFALSE 20483
20373: GO 20375
20375: DISABLE
20376: LD_INT 0
20378: PPUSH
20379: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
20380: LD_ADDR_VAR 0 2
20384: PUSH
20385: LD_INT 22
20387: PUSH
20388: LD_OWVAR 2
20392: PUSH
20393: EMPTY
20394: LIST
20395: LIST
20396: PUSH
20397: LD_INT 2
20399: PUSH
20400: LD_INT 30
20402: PUSH
20403: LD_INT 27
20405: PUSH
20406: EMPTY
20407: LIST
20408: LIST
20409: PUSH
20410: LD_INT 30
20412: PUSH
20413: LD_INT 26
20415: PUSH
20416: EMPTY
20417: LIST
20418: LIST
20419: PUSH
20420: LD_INT 30
20422: PUSH
20423: LD_INT 28
20425: PUSH
20426: EMPTY
20427: LIST
20428: LIST
20429: PUSH
20430: EMPTY
20431: LIST
20432: LIST
20433: LIST
20434: LIST
20435: PUSH
20436: EMPTY
20437: LIST
20438: LIST
20439: PPUSH
20440: CALL_OW 69
20444: ST_TO_ADDR
// if not tmp then
20445: LD_VAR 0 2
20449: NOT
20450: IFFALSE 20454
// exit ;
20452: GO 20483
// for i in tmp do
20454: LD_ADDR_VAR 0 1
20458: PUSH
20459: LD_VAR 0 2
20463: PUSH
20464: FOR_IN
20465: IFFALSE 20481
// SetLives ( i , 1 ) ;
20467: LD_VAR 0 1
20471: PPUSH
20472: LD_INT 1
20474: PPUSH
20475: CALL_OW 234
20479: GO 20464
20481: POP
20482: POP
// end ;
20483: PPOPN 2
20485: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
20486: LD_EXP 32
20490: IFFALSE 20498
20492: PUSH
20493: LD_EXP 81
20497: AND
20498: IFFALSE 20785
20500: GO 20502
20502: DISABLE
20503: LD_INT 0
20505: PPUSH
20506: PPUSH
20507: PPUSH
// begin i := rand ( 1 , 7 ) ;
20508: LD_ADDR_VAR 0 1
20512: PUSH
20513: LD_INT 1
20515: PPUSH
20516: LD_INT 7
20518: PPUSH
20519: CALL_OW 12
20523: ST_TO_ADDR
// case i of 1 :
20524: LD_VAR 0 1
20528: PUSH
20529: LD_INT 1
20531: DOUBLE
20532: EQUAL
20533: IFTRUE 20537
20535: GO 20547
20537: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
20538: LD_STRING earthquake(getX(game), 0, 32)
20540: PPUSH
20541: CALL_OW 559
20545: GO 20785
20547: LD_INT 2
20549: DOUBLE
20550: EQUAL
20551: IFTRUE 20555
20553: GO 20569
20555: POP
// begin ToLua ( displayStucuk(); ) ;
20556: LD_STRING displayStucuk();
20558: PPUSH
20559: CALL_OW 559
// ResetFog ;
20563: CALL_OW 335
// end ; 3 :
20567: GO 20785
20569: LD_INT 3
20571: DOUBLE
20572: EQUAL
20573: IFTRUE 20577
20575: GO 20681
20577: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
20578: LD_ADDR_VAR 0 2
20582: PUSH
20583: LD_INT 22
20585: PUSH
20586: LD_OWVAR 2
20590: PUSH
20591: EMPTY
20592: LIST
20593: LIST
20594: PUSH
20595: LD_INT 25
20597: PUSH
20598: LD_INT 1
20600: PUSH
20601: EMPTY
20602: LIST
20603: LIST
20604: PUSH
20605: EMPTY
20606: LIST
20607: LIST
20608: PPUSH
20609: CALL_OW 69
20613: ST_TO_ADDR
// if not tmp then
20614: LD_VAR 0 2
20618: NOT
20619: IFFALSE 20623
// exit ;
20621: GO 20785
// un := tmp [ rand ( 1 , tmp ) ] ;
20623: LD_ADDR_VAR 0 3
20627: PUSH
20628: LD_VAR 0 2
20632: PUSH
20633: LD_INT 1
20635: PPUSH
20636: LD_VAR 0 2
20640: PPUSH
20641: CALL_OW 12
20645: ARRAY
20646: ST_TO_ADDR
// if Crawls ( un ) then
20647: LD_VAR 0 3
20651: PPUSH
20652: CALL_OW 318
20656: IFFALSE 20667
// ComWalk ( un ) ;
20658: LD_VAR 0 3
20662: PPUSH
20663: CALL_OW 138
// SetClass ( un , class_mortar ) ;
20667: LD_VAR 0 3
20671: PPUSH
20672: LD_INT 8
20674: PPUSH
20675: CALL_OW 336
// end ; 4 :
20679: GO 20785
20681: LD_INT 4
20683: DOUBLE
20684: EQUAL
20685: IFTRUE 20689
20687: GO 20763
20689: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
20690: LD_ADDR_VAR 0 2
20694: PUSH
20695: LD_INT 22
20697: PUSH
20698: LD_OWVAR 2
20702: PUSH
20703: EMPTY
20704: LIST
20705: LIST
20706: PUSH
20707: LD_INT 30
20709: PUSH
20710: LD_INT 29
20712: PUSH
20713: EMPTY
20714: LIST
20715: LIST
20716: PUSH
20717: EMPTY
20718: LIST
20719: LIST
20720: PPUSH
20721: CALL_OW 69
20725: ST_TO_ADDR
// if not tmp then
20726: LD_VAR 0 2
20730: NOT
20731: IFFALSE 20735
// exit ;
20733: GO 20785
// CenterNowOnUnits ( tmp [ 1 ] ) ;
20735: LD_VAR 0 2
20739: PUSH
20740: LD_INT 1
20742: ARRAY
20743: PPUSH
20744: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
20748: LD_VAR 0 2
20752: PUSH
20753: LD_INT 1
20755: ARRAY
20756: PPUSH
20757: CALL_OW 65
// end ; 5 .. 7 :
20761: GO 20785
20763: LD_INT 5
20765: DOUBLE
20766: GREATEREQUAL
20767: IFFALSE 20775
20769: LD_INT 7
20771: DOUBLE
20772: LESSEQUAL
20773: IFTRUE 20777
20775: GO 20784
20777: POP
// StreamSibBomb ; end ;
20778: CALL 16966 0 0
20782: GO 20785
20784: POP
// end ;
20785: PPOPN 3
20787: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
20788: LD_EXP 32
20792: IFFALSE 20800
20794: PUSH
20795: LD_EXP 82
20799: AND
20800: IFFALSE 20956
20802: GO 20804
20804: DISABLE
20805: LD_INT 0
20807: PPUSH
20808: PPUSH
20809: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
20810: LD_ADDR_VAR 0 2
20814: PUSH
20815: LD_INT 81
20817: PUSH
20818: LD_OWVAR 2
20822: PUSH
20823: EMPTY
20824: LIST
20825: LIST
20826: PUSH
20827: LD_INT 2
20829: PUSH
20830: LD_INT 21
20832: PUSH
20833: LD_INT 1
20835: PUSH
20836: EMPTY
20837: LIST
20838: LIST
20839: PUSH
20840: LD_INT 21
20842: PUSH
20843: LD_INT 2
20845: PUSH
20846: EMPTY
20847: LIST
20848: LIST
20849: PUSH
20850: EMPTY
20851: LIST
20852: LIST
20853: LIST
20854: PUSH
20855: EMPTY
20856: LIST
20857: LIST
20858: PPUSH
20859: CALL_OW 69
20863: ST_TO_ADDR
// if not tmp then
20864: LD_VAR 0 2
20868: NOT
20869: IFFALSE 20873
// exit ;
20871: GO 20956
// p := 0 ;
20873: LD_ADDR_VAR 0 3
20877: PUSH
20878: LD_INT 0
20880: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
20881: LD_INT 35
20883: PPUSH
20884: CALL_OW 67
// p := p + 1 ;
20888: LD_ADDR_VAR 0 3
20892: PUSH
20893: LD_VAR 0 3
20897: PUSH
20898: LD_INT 1
20900: PLUS
20901: ST_TO_ADDR
// for i in tmp do
20902: LD_ADDR_VAR 0 1
20906: PUSH
20907: LD_VAR 0 2
20911: PUSH
20912: FOR_IN
20913: IFFALSE 20944
// if GetLives ( i ) < 1000 then
20915: LD_VAR 0 1
20919: PPUSH
20920: CALL_OW 256
20924: PUSH
20925: LD_INT 1000
20927: LESS
20928: IFFALSE 20942
// SetLives ( i , 1000 ) ;
20930: LD_VAR 0 1
20934: PPUSH
20935: LD_INT 1000
20937: PPUSH
20938: CALL_OW 234
20942: GO 20912
20944: POP
20945: POP
// until p > 20 ;
20946: LD_VAR 0 3
20950: PUSH
20951: LD_INT 20
20953: GREATER
20954: IFFALSE 20881
// end ;
20956: PPOPN 3
20958: END
// every 0 0$1 trigger StreamModeActive and sTime do
20959: LD_EXP 32
20963: IFFALSE 20971
20965: PUSH
20966: LD_EXP 83
20970: AND
20971: IFFALSE 21006
20973: GO 20975
20975: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
20976: LD_INT 28
20978: PPUSH
20979: LD_OWVAR 2
20983: PPUSH
20984: LD_INT 2
20986: PPUSH
20987: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
20991: LD_INT 30
20993: PPUSH
20994: LD_OWVAR 2
20998: PPUSH
20999: LD_INT 2
21001: PPUSH
21002: CALL_OW 322
// end ;
21006: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
21007: LD_EXP 32
21011: IFFALSE 21019
21013: PUSH
21014: LD_EXP 84
21018: AND
21019: IFFALSE 21140
21021: GO 21023
21023: DISABLE
21024: LD_INT 0
21026: PPUSH
21027: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
21028: LD_ADDR_VAR 0 2
21032: PUSH
21033: LD_INT 22
21035: PUSH
21036: LD_OWVAR 2
21040: PUSH
21041: EMPTY
21042: LIST
21043: LIST
21044: PUSH
21045: LD_INT 21
21047: PUSH
21048: LD_INT 1
21050: PUSH
21051: EMPTY
21052: LIST
21053: LIST
21054: PUSH
21055: LD_INT 3
21057: PUSH
21058: LD_INT 23
21060: PUSH
21061: LD_INT 0
21063: PUSH
21064: EMPTY
21065: LIST
21066: LIST
21067: PUSH
21068: EMPTY
21069: LIST
21070: LIST
21071: PUSH
21072: EMPTY
21073: LIST
21074: LIST
21075: LIST
21076: PPUSH
21077: CALL_OW 69
21081: ST_TO_ADDR
// if not tmp then
21082: LD_VAR 0 2
21086: NOT
21087: IFFALSE 21091
// exit ;
21089: GO 21140
// for i in tmp do
21091: LD_ADDR_VAR 0 1
21095: PUSH
21096: LD_VAR 0 2
21100: PUSH
21101: FOR_IN
21102: IFFALSE 21138
// begin if Crawls ( i ) then
21104: LD_VAR 0 1
21108: PPUSH
21109: CALL_OW 318
21113: IFFALSE 21124
// ComWalk ( i ) ;
21115: LD_VAR 0 1
21119: PPUSH
21120: CALL_OW 138
// SetClass ( i , 2 ) ;
21124: LD_VAR 0 1
21128: PPUSH
21129: LD_INT 2
21131: PPUSH
21132: CALL_OW 336
// end ;
21136: GO 21101
21138: POP
21139: POP
// end ;
21140: PPOPN 2
21142: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
21143: LD_EXP 32
21147: IFFALSE 21155
21149: PUSH
21150: LD_EXP 85
21154: AND
21155: IFFALSE 21445
21157: GO 21159
21159: DISABLE
21160: LD_INT 0
21162: PPUSH
21163: PPUSH
21164: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
21165: LD_OWVAR 2
21169: PPUSH
21170: LD_INT 9
21172: PPUSH
21173: LD_INT 1
21175: PPUSH
21176: LD_INT 1
21178: PPUSH
21179: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
21183: LD_INT 9
21185: PPUSH
21186: LD_OWVAR 2
21190: PPUSH
21191: CALL_OW 343
// uc_side := 9 ;
21195: LD_ADDR_OWVAR 20
21199: PUSH
21200: LD_INT 9
21202: ST_TO_ADDR
// uc_nation := 2 ;
21203: LD_ADDR_OWVAR 21
21207: PUSH
21208: LD_INT 2
21210: ST_TO_ADDR
// hc_name := Dark Warrior ;
21211: LD_ADDR_OWVAR 26
21215: PUSH
21216: LD_STRING Dark Warrior
21218: ST_TO_ADDR
// hc_gallery :=  ;
21219: LD_ADDR_OWVAR 33
21223: PUSH
21224: LD_STRING 
21226: ST_TO_ADDR
// hc_noskilllimit := true ;
21227: LD_ADDR_OWVAR 76
21231: PUSH
21232: LD_INT 1
21234: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
21235: LD_ADDR_OWVAR 31
21239: PUSH
21240: LD_INT 30
21242: PUSH
21243: LD_INT 30
21245: PUSH
21246: LD_INT 30
21248: PUSH
21249: LD_INT 30
21251: PUSH
21252: EMPTY
21253: LIST
21254: LIST
21255: LIST
21256: LIST
21257: ST_TO_ADDR
// un := CreateHuman ;
21258: LD_ADDR_VAR 0 3
21262: PUSH
21263: CALL_OW 44
21267: ST_TO_ADDR
// hc_noskilllimit := false ;
21268: LD_ADDR_OWVAR 76
21272: PUSH
21273: LD_INT 0
21275: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
21276: LD_VAR 0 3
21280: PPUSH
21281: LD_INT 1
21283: PPUSH
21284: CALL_OW 51
// ToLua ( playRanger() ) ;
21288: LD_STRING playRanger()
21290: PPUSH
21291: CALL_OW 559
// p := 0 ;
21295: LD_ADDR_VAR 0 2
21299: PUSH
21300: LD_INT 0
21302: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
21303: LD_INT 35
21305: PPUSH
21306: CALL_OW 67
// p := p + 1 ;
21310: LD_ADDR_VAR 0 2
21314: PUSH
21315: LD_VAR 0 2
21319: PUSH
21320: LD_INT 1
21322: PLUS
21323: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
21324: LD_VAR 0 3
21328: PPUSH
21329: CALL_OW 256
21333: PUSH
21334: LD_INT 1000
21336: LESS
21337: IFFALSE 21351
// SetLives ( un , 1000 ) ;
21339: LD_VAR 0 3
21343: PPUSH
21344: LD_INT 1000
21346: PPUSH
21347: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
21351: LD_VAR 0 3
21355: PPUSH
21356: LD_INT 81
21358: PUSH
21359: LD_OWVAR 2
21363: PUSH
21364: EMPTY
21365: LIST
21366: LIST
21367: PUSH
21368: LD_INT 91
21370: PUSH
21371: LD_VAR 0 3
21375: PUSH
21376: LD_INT 30
21378: PUSH
21379: EMPTY
21380: LIST
21381: LIST
21382: LIST
21383: PUSH
21384: EMPTY
21385: LIST
21386: LIST
21387: PPUSH
21388: CALL_OW 69
21392: PPUSH
21393: LD_VAR 0 3
21397: PPUSH
21398: CALL_OW 74
21402: PPUSH
21403: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
21407: LD_VAR 0 2
21411: PUSH
21412: LD_INT 80
21414: GREATER
21415: IFTRUE 21428
21417: PUSH
21418: LD_VAR 0 3
21422: PPUSH
21423: CALL_OW 301
21427: OR
21428: IFFALSE 21303
// if un then
21430: LD_VAR 0 3
21434: IFFALSE 21445
// RemoveUnit ( un ) ;
21436: LD_VAR 0 3
21440: PPUSH
21441: CALL_OW 64
// end ;
21445: PPOPN 3
21447: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
21448: LD_EXP 86
21452: IFFALSE 21568
21454: GO 21456
21456: DISABLE
21457: LD_INT 0
21459: PPUSH
21460: PPUSH
21461: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
21462: LD_ADDR_VAR 0 2
21466: PUSH
21467: LD_INT 81
21469: PUSH
21470: LD_OWVAR 2
21474: PUSH
21475: EMPTY
21476: LIST
21477: LIST
21478: PUSH
21479: LD_INT 21
21481: PUSH
21482: LD_INT 1
21484: PUSH
21485: EMPTY
21486: LIST
21487: LIST
21488: PUSH
21489: EMPTY
21490: LIST
21491: LIST
21492: PPUSH
21493: CALL_OW 69
21497: ST_TO_ADDR
// ToLua ( playComputer() ) ;
21498: LD_STRING playComputer()
21500: PPUSH
21501: CALL_OW 559
// if not tmp then
21505: LD_VAR 0 2
21509: NOT
21510: IFFALSE 21514
// exit ;
21512: GO 21568
// for i in tmp do
21514: LD_ADDR_VAR 0 1
21518: PUSH
21519: LD_VAR 0 2
21523: PUSH
21524: FOR_IN
21525: IFFALSE 21566
// for j := 1 to 4 do
21527: LD_ADDR_VAR 0 3
21531: PUSH
21532: DOUBLE
21533: LD_INT 1
21535: DEC
21536: ST_TO_ADDR
21537: LD_INT 4
21539: PUSH
21540: FOR_TO
21541: IFFALSE 21562
// SetSkill ( i , j , 10 ) ;
21543: LD_VAR 0 1
21547: PPUSH
21548: LD_VAR 0 3
21552: PPUSH
21553: LD_INT 10
21555: PPUSH
21556: CALL_OW 237
21560: GO 21540
21562: POP
21563: POP
21564: GO 21524
21566: POP
21567: POP
// end ;
21568: PPOPN 3
21570: END
// every 0 0$1 trigger s30 do var i , tmp ;
21571: LD_EXP 87
21575: IFFALSE 21644
21577: GO 21579
21579: DISABLE
21580: LD_INT 0
21582: PPUSH
21583: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
21584: LD_ADDR_VAR 0 2
21588: PUSH
21589: LD_INT 22
21591: PUSH
21592: LD_OWVAR 2
21596: PUSH
21597: EMPTY
21598: LIST
21599: LIST
21600: PPUSH
21601: CALL_OW 69
21605: ST_TO_ADDR
// if not tmp then
21606: LD_VAR 0 2
21610: NOT
21611: IFFALSE 21615
// exit ;
21613: GO 21644
// for i in tmp do
21615: LD_ADDR_VAR 0 1
21619: PUSH
21620: LD_VAR 0 2
21624: PUSH
21625: FOR_IN
21626: IFFALSE 21642
// SetLives ( i , 300 ) ;
21628: LD_VAR 0 1
21632: PPUSH
21633: LD_INT 300
21635: PPUSH
21636: CALL_OW 234
21640: GO 21625
21642: POP
21643: POP
// end ;
21644: PPOPN 2
21646: END
// every 0 0$1 trigger s60 do var i , tmp ;
21647: LD_EXP 88
21651: IFFALSE 21720
21653: GO 21655
21655: DISABLE
21656: LD_INT 0
21658: PPUSH
21659: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
21660: LD_ADDR_VAR 0 2
21664: PUSH
21665: LD_INT 22
21667: PUSH
21668: LD_OWVAR 2
21672: PUSH
21673: EMPTY
21674: LIST
21675: LIST
21676: PPUSH
21677: CALL_OW 69
21681: ST_TO_ADDR
// if not tmp then
21682: LD_VAR 0 2
21686: NOT
21687: IFFALSE 21691
// exit ;
21689: GO 21720
// for i in tmp do
21691: LD_ADDR_VAR 0 1
21695: PUSH
21696: LD_VAR 0 2
21700: PUSH
21701: FOR_IN
21702: IFFALSE 21718
// SetLives ( i , 600 ) ;
21704: LD_VAR 0 1
21708: PPUSH
21709: LD_INT 600
21711: PPUSH
21712: CALL_OW 234
21716: GO 21701
21718: POP
21719: POP
// end ;
21720: PPOPN 2
21722: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
21723: LD_INT 0
21725: PPUSH
// case cmd of 301 :
21726: LD_VAR 0 1
21730: PUSH
21731: LD_INT 301
21733: DOUBLE
21734: EQUAL
21735: IFTRUE 21739
21737: GO 21771
21739: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
21740: LD_VAR 0 6
21744: PPUSH
21745: LD_VAR 0 7
21749: PPUSH
21750: LD_VAR 0 8
21754: PPUSH
21755: LD_VAR 0 4
21759: PPUSH
21760: LD_VAR 0 5
21764: PPUSH
21765: CALL 22984 0 5
21769: GO 21892
21771: LD_INT 302
21773: DOUBLE
21774: EQUAL
21775: IFTRUE 21779
21777: GO 21816
21779: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
21780: LD_VAR 0 6
21784: PPUSH
21785: LD_VAR 0 7
21789: PPUSH
21790: LD_VAR 0 8
21794: PPUSH
21795: LD_VAR 0 9
21799: PPUSH
21800: LD_VAR 0 4
21804: PPUSH
21805: LD_VAR 0 5
21809: PPUSH
21810: CALL 23075 0 6
21814: GO 21892
21816: LD_INT 303
21818: DOUBLE
21819: EQUAL
21820: IFTRUE 21824
21822: GO 21861
21824: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
21825: LD_VAR 0 6
21829: PPUSH
21830: LD_VAR 0 7
21834: PPUSH
21835: LD_VAR 0 8
21839: PPUSH
21840: LD_VAR 0 9
21844: PPUSH
21845: LD_VAR 0 4
21849: PPUSH
21850: LD_VAR 0 5
21854: PPUSH
21855: CALL 21897 0 6
21859: GO 21892
21861: LD_INT 304
21863: DOUBLE
21864: EQUAL
21865: IFTRUE 21869
21867: GO 21891
21869: POP
// hHackTeleport ( unit , x , y ) ; end ;
21870: LD_VAR 0 2
21874: PPUSH
21875: LD_VAR 0 4
21879: PPUSH
21880: LD_VAR 0 5
21884: PPUSH
21885: CALL 23668 0 3
21889: GO 21892
21891: POP
// end ;
21892: LD_VAR 0 12
21896: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
21897: LD_INT 0
21899: PPUSH
21900: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
21901: LD_VAR 0 1
21905: PUSH
21906: LD_INT 1
21908: LESS
21909: IFTRUE 21921
21911: PUSH
21912: LD_VAR 0 1
21916: PUSH
21917: LD_INT 3
21919: GREATER
21920: OR
21921: IFTRUE 21939
21923: PUSH
21924: LD_VAR 0 5
21928: PPUSH
21929: LD_VAR 0 6
21933: PPUSH
21934: CALL_OW 428
21938: OR
21939: IFFALSE 21943
// exit ;
21941: GO 22671
// uc_side := your_side ;
21943: LD_ADDR_OWVAR 20
21947: PUSH
21948: LD_OWVAR 2
21952: ST_TO_ADDR
// uc_nation := nation ;
21953: LD_ADDR_OWVAR 21
21957: PUSH
21958: LD_VAR 0 1
21962: ST_TO_ADDR
// bc_level = 1 ;
21963: LD_ADDR_OWVAR 43
21967: PUSH
21968: LD_INT 1
21970: ST_TO_ADDR
// case btype of 1 :
21971: LD_VAR 0 2
21975: PUSH
21976: LD_INT 1
21978: DOUBLE
21979: EQUAL
21980: IFTRUE 21984
21982: GO 21995
21984: POP
// bc_type := b_depot ; 2 :
21985: LD_ADDR_OWVAR 42
21989: PUSH
21990: LD_INT 0
21992: ST_TO_ADDR
21993: GO 22615
21995: LD_INT 2
21997: DOUBLE
21998: EQUAL
21999: IFTRUE 22003
22001: GO 22014
22003: POP
// bc_type := b_warehouse ; 3 :
22004: LD_ADDR_OWVAR 42
22008: PUSH
22009: LD_INT 1
22011: ST_TO_ADDR
22012: GO 22615
22014: LD_INT 3
22016: DOUBLE
22017: EQUAL
22018: IFTRUE 22022
22020: GO 22033
22022: POP
// bc_type := b_lab ; 4 .. 9 :
22023: LD_ADDR_OWVAR 42
22027: PUSH
22028: LD_INT 6
22030: ST_TO_ADDR
22031: GO 22615
22033: LD_INT 4
22035: DOUBLE
22036: GREATEREQUAL
22037: IFFALSE 22045
22039: LD_INT 9
22041: DOUBLE
22042: LESSEQUAL
22043: IFTRUE 22047
22045: GO 22107
22047: POP
// begin bc_type := b_lab_half ;
22048: LD_ADDR_OWVAR 42
22052: PUSH
22053: LD_INT 7
22055: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
22056: LD_ADDR_OWVAR 44
22060: PUSH
22061: LD_INT 10
22063: PUSH
22064: LD_INT 11
22066: PUSH
22067: LD_INT 12
22069: PUSH
22070: LD_INT 15
22072: PUSH
22073: LD_INT 14
22075: PUSH
22076: LD_INT 13
22078: PUSH
22079: EMPTY
22080: LIST
22081: LIST
22082: LIST
22083: LIST
22084: LIST
22085: LIST
22086: PUSH
22087: LD_VAR 0 2
22091: PUSH
22092: LD_INT 3
22094: MINUS
22095: ARRAY
22096: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
22097: LD_ADDR_OWVAR 45
22101: PUSH
22102: LD_INT 9
22104: ST_TO_ADDR
// end ; 10 .. 13 :
22105: GO 22615
22107: LD_INT 10
22109: DOUBLE
22110: GREATEREQUAL
22111: IFFALSE 22119
22113: LD_INT 13
22115: DOUBLE
22116: LESSEQUAL
22117: IFTRUE 22121
22119: GO 22198
22121: POP
// begin bc_type := b_lab_full ;
22122: LD_ADDR_OWVAR 42
22126: PUSH
22127: LD_INT 8
22129: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
22130: LD_ADDR_OWVAR 44
22134: PUSH
22135: LD_INT 10
22137: PUSH
22138: LD_INT 12
22140: PUSH
22141: LD_INT 14
22143: PUSH
22144: LD_INT 13
22146: PUSH
22147: EMPTY
22148: LIST
22149: LIST
22150: LIST
22151: LIST
22152: PUSH
22153: LD_VAR 0 2
22157: PUSH
22158: LD_INT 9
22160: MINUS
22161: ARRAY
22162: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
22163: LD_ADDR_OWVAR 45
22167: PUSH
22168: LD_INT 11
22170: PUSH
22171: LD_INT 15
22173: PUSH
22174: LD_INT 12
22176: PUSH
22177: LD_INT 15
22179: PUSH
22180: EMPTY
22181: LIST
22182: LIST
22183: LIST
22184: LIST
22185: PUSH
22186: LD_VAR 0 2
22190: PUSH
22191: LD_INT 9
22193: MINUS
22194: ARRAY
22195: ST_TO_ADDR
// end ; 14 :
22196: GO 22615
22198: LD_INT 14
22200: DOUBLE
22201: EQUAL
22202: IFTRUE 22206
22204: GO 22217
22206: POP
// bc_type := b_workshop ; 15 :
22207: LD_ADDR_OWVAR 42
22211: PUSH
22212: LD_INT 2
22214: ST_TO_ADDR
22215: GO 22615
22217: LD_INT 15
22219: DOUBLE
22220: EQUAL
22221: IFTRUE 22225
22223: GO 22236
22225: POP
// bc_type := b_factory ; 16 :
22226: LD_ADDR_OWVAR 42
22230: PUSH
22231: LD_INT 3
22233: ST_TO_ADDR
22234: GO 22615
22236: LD_INT 16
22238: DOUBLE
22239: EQUAL
22240: IFTRUE 22244
22242: GO 22255
22244: POP
// bc_type := b_ext_gun ; 17 :
22245: LD_ADDR_OWVAR 42
22249: PUSH
22250: LD_INT 17
22252: ST_TO_ADDR
22253: GO 22615
22255: LD_INT 17
22257: DOUBLE
22258: EQUAL
22259: IFTRUE 22263
22261: GO 22291
22263: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
22264: LD_ADDR_OWVAR 42
22268: PUSH
22269: LD_INT 19
22271: PUSH
22272: LD_INT 23
22274: PUSH
22275: LD_INT 19
22277: PUSH
22278: EMPTY
22279: LIST
22280: LIST
22281: LIST
22282: PUSH
22283: LD_VAR 0 1
22287: ARRAY
22288: ST_TO_ADDR
22289: GO 22615
22291: LD_INT 18
22293: DOUBLE
22294: EQUAL
22295: IFTRUE 22299
22297: GO 22310
22299: POP
// bc_type := b_ext_radar ; 19 :
22300: LD_ADDR_OWVAR 42
22304: PUSH
22305: LD_INT 20
22307: ST_TO_ADDR
22308: GO 22615
22310: LD_INT 19
22312: DOUBLE
22313: EQUAL
22314: IFTRUE 22318
22316: GO 22329
22318: POP
// bc_type := b_ext_radio ; 20 :
22319: LD_ADDR_OWVAR 42
22323: PUSH
22324: LD_INT 22
22326: ST_TO_ADDR
22327: GO 22615
22329: LD_INT 20
22331: DOUBLE
22332: EQUAL
22333: IFTRUE 22337
22335: GO 22348
22337: POP
// bc_type := b_ext_siberium ; 21 :
22338: LD_ADDR_OWVAR 42
22342: PUSH
22343: LD_INT 21
22345: ST_TO_ADDR
22346: GO 22615
22348: LD_INT 21
22350: DOUBLE
22351: EQUAL
22352: IFTRUE 22356
22354: GO 22367
22356: POP
// bc_type := b_ext_computer ; 22 :
22357: LD_ADDR_OWVAR 42
22361: PUSH
22362: LD_INT 24
22364: ST_TO_ADDR
22365: GO 22615
22367: LD_INT 22
22369: DOUBLE
22370: EQUAL
22371: IFTRUE 22375
22373: GO 22386
22375: POP
// bc_type := b_ext_track ; 23 :
22376: LD_ADDR_OWVAR 42
22380: PUSH
22381: LD_INT 16
22383: ST_TO_ADDR
22384: GO 22615
22386: LD_INT 23
22388: DOUBLE
22389: EQUAL
22390: IFTRUE 22394
22392: GO 22405
22394: POP
// bc_type := b_ext_laser ; 24 :
22395: LD_ADDR_OWVAR 42
22399: PUSH
22400: LD_INT 25
22402: ST_TO_ADDR
22403: GO 22615
22405: LD_INT 24
22407: DOUBLE
22408: EQUAL
22409: IFTRUE 22413
22411: GO 22424
22413: POP
// bc_type := b_control_tower ; 25 :
22414: LD_ADDR_OWVAR 42
22418: PUSH
22419: LD_INT 36
22421: ST_TO_ADDR
22422: GO 22615
22424: LD_INT 25
22426: DOUBLE
22427: EQUAL
22428: IFTRUE 22432
22430: GO 22443
22432: POP
// bc_type := b_breastwork ; 26 :
22433: LD_ADDR_OWVAR 42
22437: PUSH
22438: LD_INT 31
22440: ST_TO_ADDR
22441: GO 22615
22443: LD_INT 26
22445: DOUBLE
22446: EQUAL
22447: IFTRUE 22451
22449: GO 22462
22451: POP
// bc_type := b_bunker ; 27 :
22452: LD_ADDR_OWVAR 42
22456: PUSH
22457: LD_INT 32
22459: ST_TO_ADDR
22460: GO 22615
22462: LD_INT 27
22464: DOUBLE
22465: EQUAL
22466: IFTRUE 22470
22468: GO 22481
22470: POP
// bc_type := b_turret ; 28 :
22471: LD_ADDR_OWVAR 42
22475: PUSH
22476: LD_INT 33
22478: ST_TO_ADDR
22479: GO 22615
22481: LD_INT 28
22483: DOUBLE
22484: EQUAL
22485: IFTRUE 22489
22487: GO 22500
22489: POP
// bc_type := b_armoury ; 29 :
22490: LD_ADDR_OWVAR 42
22494: PUSH
22495: LD_INT 4
22497: ST_TO_ADDR
22498: GO 22615
22500: LD_INT 29
22502: DOUBLE
22503: EQUAL
22504: IFTRUE 22508
22506: GO 22519
22508: POP
// bc_type := b_barracks ; 30 :
22509: LD_ADDR_OWVAR 42
22513: PUSH
22514: LD_INT 5
22516: ST_TO_ADDR
22517: GO 22615
22519: LD_INT 30
22521: DOUBLE
22522: EQUAL
22523: IFTRUE 22527
22525: GO 22538
22527: POP
// bc_type := b_solar_power ; 31 :
22528: LD_ADDR_OWVAR 42
22532: PUSH
22533: LD_INT 27
22535: ST_TO_ADDR
22536: GO 22615
22538: LD_INT 31
22540: DOUBLE
22541: EQUAL
22542: IFTRUE 22546
22544: GO 22557
22546: POP
// bc_type := b_oil_power ; 32 :
22547: LD_ADDR_OWVAR 42
22551: PUSH
22552: LD_INT 26
22554: ST_TO_ADDR
22555: GO 22615
22557: LD_INT 32
22559: DOUBLE
22560: EQUAL
22561: IFTRUE 22565
22563: GO 22576
22565: POP
// bc_type := b_siberite_power ; 33 :
22566: LD_ADDR_OWVAR 42
22570: PUSH
22571: LD_INT 28
22573: ST_TO_ADDR
22574: GO 22615
22576: LD_INT 33
22578: DOUBLE
22579: EQUAL
22580: IFTRUE 22584
22582: GO 22595
22584: POP
// bc_type := b_oil_mine ; 34 :
22585: LD_ADDR_OWVAR 42
22589: PUSH
22590: LD_INT 29
22592: ST_TO_ADDR
22593: GO 22615
22595: LD_INT 34
22597: DOUBLE
22598: EQUAL
22599: IFTRUE 22603
22601: GO 22614
22603: POP
// bc_type := b_siberite_mine ; end ;
22604: LD_ADDR_OWVAR 42
22608: PUSH
22609: LD_INT 30
22611: ST_TO_ADDR
22612: GO 22615
22614: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
22615: LD_ADDR_VAR 0 8
22619: PUSH
22620: LD_VAR 0 5
22624: PPUSH
22625: LD_VAR 0 6
22629: PPUSH
22630: LD_VAR 0 3
22634: PPUSH
22635: CALL_OW 47
22639: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
22640: LD_OWVAR 42
22644: PUSH
22645: LD_INT 32
22647: PUSH
22648: LD_INT 33
22650: PUSH
22651: EMPTY
22652: LIST
22653: LIST
22654: IN
22655: IFFALSE 22671
// PlaceWeaponTurret ( b , weapon ) ;
22657: LD_VAR 0 8
22661: PPUSH
22662: LD_VAR 0 4
22666: PPUSH
22667: CALL_OW 431
// end ;
22671: LD_VAR 0 7
22675: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
22676: LD_INT 0
22678: PPUSH
22679: PPUSH
22680: PPUSH
22681: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
22682: LD_ADDR_VAR 0 4
22686: PUSH
22687: LD_INT 22
22689: PUSH
22690: LD_OWVAR 2
22694: PUSH
22695: EMPTY
22696: LIST
22697: LIST
22698: PUSH
22699: LD_INT 2
22701: PUSH
22702: LD_INT 30
22704: PUSH
22705: LD_INT 0
22707: PUSH
22708: EMPTY
22709: LIST
22710: LIST
22711: PUSH
22712: LD_INT 30
22714: PUSH
22715: LD_INT 1
22717: PUSH
22718: EMPTY
22719: LIST
22720: LIST
22721: PUSH
22722: EMPTY
22723: LIST
22724: LIST
22725: LIST
22726: PUSH
22727: EMPTY
22728: LIST
22729: LIST
22730: PPUSH
22731: CALL_OW 69
22735: ST_TO_ADDR
// if not tmp then
22736: LD_VAR 0 4
22740: NOT
22741: IFFALSE 22745
// exit ;
22743: GO 22804
// for i in tmp do
22745: LD_ADDR_VAR 0 2
22749: PUSH
22750: LD_VAR 0 4
22754: PUSH
22755: FOR_IN
22756: IFFALSE 22802
// for j = 1 to 3 do
22758: LD_ADDR_VAR 0 3
22762: PUSH
22763: DOUBLE
22764: LD_INT 1
22766: DEC
22767: ST_TO_ADDR
22768: LD_INT 3
22770: PUSH
22771: FOR_TO
22772: IFFALSE 22798
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
22774: LD_VAR 0 2
22778: PPUSH
22779: CALL_OW 274
22783: PPUSH
22784: LD_VAR 0 3
22788: PPUSH
22789: LD_INT 99999
22791: PPUSH
22792: CALL_OW 277
22796: GO 22771
22798: POP
22799: POP
22800: GO 22755
22802: POP
22803: POP
// end ;
22804: LD_VAR 0 1
22808: RET
// export function hHackSetLevel10 ; var i , j ; begin
22809: LD_INT 0
22811: PPUSH
22812: PPUSH
22813: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
22814: LD_ADDR_VAR 0 2
22818: PUSH
22819: LD_INT 21
22821: PUSH
22822: LD_INT 1
22824: PUSH
22825: EMPTY
22826: LIST
22827: LIST
22828: PPUSH
22829: CALL_OW 69
22833: PUSH
22834: FOR_IN
22835: IFFALSE 22887
// if IsSelected ( i ) then
22837: LD_VAR 0 2
22841: PPUSH
22842: CALL_OW 306
22846: IFFALSE 22885
// begin for j := 1 to 4 do
22848: LD_ADDR_VAR 0 3
22852: PUSH
22853: DOUBLE
22854: LD_INT 1
22856: DEC
22857: ST_TO_ADDR
22858: LD_INT 4
22860: PUSH
22861: FOR_TO
22862: IFFALSE 22883
// SetSkill ( i , j , 10 ) ;
22864: LD_VAR 0 2
22868: PPUSH
22869: LD_VAR 0 3
22873: PPUSH
22874: LD_INT 10
22876: PPUSH
22877: CALL_OW 237
22881: GO 22861
22883: POP
22884: POP
// end ;
22885: GO 22834
22887: POP
22888: POP
// end ;
22889: LD_VAR 0 1
22893: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
22894: LD_INT 0
22896: PPUSH
22897: PPUSH
22898: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
22899: LD_ADDR_VAR 0 2
22903: PUSH
22904: LD_INT 22
22906: PUSH
22907: LD_OWVAR 2
22911: PUSH
22912: EMPTY
22913: LIST
22914: LIST
22915: PUSH
22916: LD_INT 21
22918: PUSH
22919: LD_INT 1
22921: PUSH
22922: EMPTY
22923: LIST
22924: LIST
22925: PUSH
22926: EMPTY
22927: LIST
22928: LIST
22929: PPUSH
22930: CALL_OW 69
22934: PUSH
22935: FOR_IN
22936: IFFALSE 22977
// begin for j := 1 to 4 do
22938: LD_ADDR_VAR 0 3
22942: PUSH
22943: DOUBLE
22944: LD_INT 1
22946: DEC
22947: ST_TO_ADDR
22948: LD_INT 4
22950: PUSH
22951: FOR_TO
22952: IFFALSE 22973
// SetSkill ( i , j , 10 ) ;
22954: LD_VAR 0 2
22958: PPUSH
22959: LD_VAR 0 3
22963: PPUSH
22964: LD_INT 10
22966: PPUSH
22967: CALL_OW 237
22971: GO 22951
22973: POP
22974: POP
// end ;
22975: GO 22935
22977: POP
22978: POP
// end ;
22979: LD_VAR 0 1
22983: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
22984: LD_INT 0
22986: PPUSH
// uc_side := your_side ;
22987: LD_ADDR_OWVAR 20
22991: PUSH
22992: LD_OWVAR 2
22996: ST_TO_ADDR
// uc_nation := nation ;
22997: LD_ADDR_OWVAR 21
23001: PUSH
23002: LD_VAR 0 1
23006: ST_TO_ADDR
// InitHc ;
23007: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
23011: LD_INT 0
23013: PPUSH
23014: LD_VAR 0 2
23018: PPUSH
23019: LD_VAR 0 3
23023: PPUSH
23024: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
23028: LD_VAR 0 4
23032: PPUSH
23033: LD_VAR 0 5
23037: PPUSH
23038: CALL_OW 428
23042: PUSH
23043: LD_INT 0
23045: EQUAL
23046: IFFALSE 23070
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
23048: CALL_OW 44
23052: PPUSH
23053: LD_VAR 0 4
23057: PPUSH
23058: LD_VAR 0 5
23062: PPUSH
23063: LD_INT 1
23065: PPUSH
23066: CALL_OW 48
// end ;
23070: LD_VAR 0 6
23074: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
23075: LD_INT 0
23077: PPUSH
23078: PPUSH
// uc_side := your_side ;
23079: LD_ADDR_OWVAR 20
23083: PUSH
23084: LD_OWVAR 2
23088: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
23089: LD_VAR 0 1
23093: PUSH
23094: LD_INT 1
23096: PUSH
23097: LD_INT 2
23099: PUSH
23100: LD_INT 3
23102: PUSH
23103: LD_INT 4
23105: PUSH
23106: LD_INT 5
23108: PUSH
23109: EMPTY
23110: LIST
23111: LIST
23112: LIST
23113: LIST
23114: LIST
23115: IN
23116: IFFALSE 23128
// uc_nation := nation_american else
23118: LD_ADDR_OWVAR 21
23122: PUSH
23123: LD_INT 1
23125: ST_TO_ADDR
23126: GO 23171
// if chassis in [ 11 , 12 , 13 , 14 ] then
23128: LD_VAR 0 1
23132: PUSH
23133: LD_INT 11
23135: PUSH
23136: LD_INT 12
23138: PUSH
23139: LD_INT 13
23141: PUSH
23142: LD_INT 14
23144: PUSH
23145: EMPTY
23146: LIST
23147: LIST
23148: LIST
23149: LIST
23150: IN
23151: IFFALSE 23163
// uc_nation := nation_arabian else
23153: LD_ADDR_OWVAR 21
23157: PUSH
23158: LD_INT 2
23160: ST_TO_ADDR
23161: GO 23171
// uc_nation := nation_russian ;
23163: LD_ADDR_OWVAR 21
23167: PUSH
23168: LD_INT 3
23170: ST_TO_ADDR
// vc_chassis := chassis ;
23171: LD_ADDR_OWVAR 37
23175: PUSH
23176: LD_VAR 0 1
23180: ST_TO_ADDR
// vc_engine := engine ;
23181: LD_ADDR_OWVAR 39
23185: PUSH
23186: LD_VAR 0 2
23190: ST_TO_ADDR
// vc_control := control ;
23191: LD_ADDR_OWVAR 38
23195: PUSH
23196: LD_VAR 0 3
23200: ST_TO_ADDR
// vc_weapon := weapon ;
23201: LD_ADDR_OWVAR 40
23205: PUSH
23206: LD_VAR 0 4
23210: ST_TO_ADDR
// un := CreateVehicle ;
23211: LD_ADDR_VAR 0 8
23215: PUSH
23216: CALL_OW 45
23220: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
23221: LD_VAR 0 8
23225: PPUSH
23226: LD_INT 0
23228: PPUSH
23229: LD_INT 5
23231: PPUSH
23232: CALL_OW 12
23236: PPUSH
23237: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
23241: LD_VAR 0 8
23245: PPUSH
23246: LD_VAR 0 5
23250: PPUSH
23251: LD_VAR 0 6
23255: PPUSH
23256: LD_INT 1
23258: PPUSH
23259: CALL_OW 48
// end ;
23263: LD_VAR 0 7
23267: RET
// export hInvincible ; every 1 do
23268: GO 23270
23270: DISABLE
// hInvincible := [ ] ;
23271: LD_ADDR_EXP 89
23275: PUSH
23276: EMPTY
23277: ST_TO_ADDR
23278: END
// every 10 do var i ;
23279: GO 23281
23281: DISABLE
23282: LD_INT 0
23284: PPUSH
// begin enable ;
23285: ENABLE
// if not hInvincible then
23286: LD_EXP 89
23290: NOT
23291: IFFALSE 23295
// exit ;
23293: GO 23339
// for i in hInvincible do
23295: LD_ADDR_VAR 0 1
23299: PUSH
23300: LD_EXP 89
23304: PUSH
23305: FOR_IN
23306: IFFALSE 23337
// if GetLives ( i ) < 1000 then
23308: LD_VAR 0 1
23312: PPUSH
23313: CALL_OW 256
23317: PUSH
23318: LD_INT 1000
23320: LESS
23321: IFFALSE 23335
// SetLives ( i , 1000 ) ;
23323: LD_VAR 0 1
23327: PPUSH
23328: LD_INT 1000
23330: PPUSH
23331: CALL_OW 234
23335: GO 23305
23337: POP
23338: POP
// end ;
23339: PPOPN 1
23341: END
// export function hHackInvincible ; var i ; begin
23342: LD_INT 0
23344: PPUSH
23345: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
23346: LD_ADDR_VAR 0 2
23350: PUSH
23351: LD_INT 2
23353: PUSH
23354: LD_INT 21
23356: PUSH
23357: LD_INT 1
23359: PUSH
23360: EMPTY
23361: LIST
23362: LIST
23363: PUSH
23364: LD_INT 21
23366: PUSH
23367: LD_INT 2
23369: PUSH
23370: EMPTY
23371: LIST
23372: LIST
23373: PUSH
23374: EMPTY
23375: LIST
23376: LIST
23377: LIST
23378: PPUSH
23379: CALL_OW 69
23383: PUSH
23384: FOR_IN
23385: IFFALSE 23446
// if IsSelected ( i ) then
23387: LD_VAR 0 2
23391: PPUSH
23392: CALL_OW 306
23396: IFFALSE 23444
// begin if i in hInvincible then
23398: LD_VAR 0 2
23402: PUSH
23403: LD_EXP 89
23407: IN
23408: IFFALSE 23428
// hInvincible := hInvincible diff i else
23410: LD_ADDR_EXP 89
23414: PUSH
23415: LD_EXP 89
23419: PUSH
23420: LD_VAR 0 2
23424: DIFF
23425: ST_TO_ADDR
23426: GO 23444
// hInvincible := hInvincible union i ;
23428: LD_ADDR_EXP 89
23432: PUSH
23433: LD_EXP 89
23437: PUSH
23438: LD_VAR 0 2
23442: UNION
23443: ST_TO_ADDR
// end ;
23444: GO 23384
23446: POP
23447: POP
// end ;
23448: LD_VAR 0 1
23452: RET
// export function hHackInvisible ; var i , j ; begin
23453: LD_INT 0
23455: PPUSH
23456: PPUSH
23457: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
23458: LD_ADDR_VAR 0 2
23462: PUSH
23463: LD_INT 21
23465: PUSH
23466: LD_INT 1
23468: PUSH
23469: EMPTY
23470: LIST
23471: LIST
23472: PPUSH
23473: CALL_OW 69
23477: PUSH
23478: FOR_IN
23479: IFFALSE 23503
// if IsSelected ( i ) then
23481: LD_VAR 0 2
23485: PPUSH
23486: CALL_OW 306
23490: IFFALSE 23501
// ComForceInvisible ( i ) ;
23492: LD_VAR 0 2
23496: PPUSH
23497: CALL_OW 496
23501: GO 23478
23503: POP
23504: POP
// end ;
23505: LD_VAR 0 1
23509: RET
// export function hHackChangeYourSide ; begin
23510: LD_INT 0
23512: PPUSH
// if your_side = 8 then
23513: LD_OWVAR 2
23517: PUSH
23518: LD_INT 8
23520: EQUAL
23521: IFFALSE 23533
// your_side := 0 else
23523: LD_ADDR_OWVAR 2
23527: PUSH
23528: LD_INT 0
23530: ST_TO_ADDR
23531: GO 23547
// your_side := your_side + 1 ;
23533: LD_ADDR_OWVAR 2
23537: PUSH
23538: LD_OWVAR 2
23542: PUSH
23543: LD_INT 1
23545: PLUS
23546: ST_TO_ADDR
// end ;
23547: LD_VAR 0 1
23551: RET
// export function hHackChangeUnitSide ; var i , j ; begin
23552: LD_INT 0
23554: PPUSH
23555: PPUSH
23556: PPUSH
// for i in all_units do
23557: LD_ADDR_VAR 0 2
23561: PUSH
23562: LD_OWVAR 3
23566: PUSH
23567: FOR_IN
23568: IFFALSE 23646
// if IsSelected ( i ) then
23570: LD_VAR 0 2
23574: PPUSH
23575: CALL_OW 306
23579: IFFALSE 23644
// begin j := GetSide ( i ) ;
23581: LD_ADDR_VAR 0 3
23585: PUSH
23586: LD_VAR 0 2
23590: PPUSH
23591: CALL_OW 255
23595: ST_TO_ADDR
// if j = 8 then
23596: LD_VAR 0 3
23600: PUSH
23601: LD_INT 8
23603: EQUAL
23604: IFFALSE 23616
// j := 0 else
23606: LD_ADDR_VAR 0 3
23610: PUSH
23611: LD_INT 0
23613: ST_TO_ADDR
23614: GO 23630
// j := j + 1 ;
23616: LD_ADDR_VAR 0 3
23620: PUSH
23621: LD_VAR 0 3
23625: PUSH
23626: LD_INT 1
23628: PLUS
23629: ST_TO_ADDR
// SetSide ( i , j ) ;
23630: LD_VAR 0 2
23634: PPUSH
23635: LD_VAR 0 3
23639: PPUSH
23640: CALL_OW 235
// end ;
23644: GO 23567
23646: POP
23647: POP
// end ;
23648: LD_VAR 0 1
23652: RET
// export function hHackFog ; begin
23653: LD_INT 0
23655: PPUSH
// FogOff ( true ) ;
23656: LD_INT 1
23658: PPUSH
23659: CALL_OW 344
// end ;
23663: LD_VAR 0 1
23667: RET
// export function hHackTeleport ( unit , x , y ) ; begin
23668: LD_INT 0
23670: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
23671: LD_VAR 0 1
23675: PPUSH
23676: LD_VAR 0 2
23680: PPUSH
23681: LD_VAR 0 3
23685: PPUSH
23686: LD_INT 1
23688: PPUSH
23689: LD_INT 1
23691: PPUSH
23692: CALL_OW 483
// CenterOnXY ( x , y ) ;
23696: LD_VAR 0 2
23700: PPUSH
23701: LD_VAR 0 3
23705: PPUSH
23706: CALL_OW 84
// end ;
23710: LD_VAR 0 4
23714: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
23715: LD_INT 0
23717: PPUSH
23718: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
23719: LD_VAR 0 1
23723: NOT
23724: IFTRUE 23743
23726: PUSH
23727: LD_VAR 0 2
23731: PPUSH
23732: LD_VAR 0 3
23736: PPUSH
23737: CALL_OW 488
23741: NOT
23742: OR
23743: IFTRUE 23778
23745: PUSH
23746: LD_VAR 0 1
23750: PPUSH
23751: CALL_OW 266
23755: PUSH
23756: LD_INT 3
23758: NONEQUAL
23759: IFFALSE 23777
23761: PUSH
23762: LD_VAR 0 1
23766: PPUSH
23767: CALL_OW 247
23771: PUSH
23772: LD_INT 1
23774: EQUAL
23775: NOT
23776: AND
23777: OR
23778: IFFALSE 23782
// exit ;
23780: GO 24064
// if GetType ( factory ) = unit_human then
23782: LD_VAR 0 1
23786: PPUSH
23787: CALL_OW 247
23791: PUSH
23792: LD_INT 1
23794: EQUAL
23795: IFFALSE 23812
// factory := IsInUnit ( factory ) ;
23797: LD_ADDR_VAR 0 1
23801: PUSH
23802: LD_VAR 0 1
23806: PPUSH
23807: CALL_OW 310
23811: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
23812: LD_VAR 0 1
23816: PPUSH
23817: CALL_OW 266
23821: PUSH
23822: LD_INT 3
23824: NONEQUAL
23825: IFFALSE 23829
// exit ;
23827: GO 24064
// for i := 1 to Count ( factoryWaypoints ) do
23829: LD_ADDR_VAR 0 5
23833: PUSH
23834: DOUBLE
23835: LD_INT 1
23837: DEC
23838: ST_TO_ADDR
23839: LD_EXP 90
23843: PPUSH
23844: CALL 32796 0 1
23848: PUSH
23849: FOR_TO
23850: IFFALSE 24012
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
23852: LD_VAR 0 2
23856: PPUSH
23857: LD_VAR 0 3
23861: PPUSH
23862: CALL_OW 428
23866: PUSH
23867: LD_EXP 90
23871: PUSH
23872: LD_VAR 0 5
23876: ARRAY
23877: PUSH
23878: LD_INT 2
23880: ARRAY
23881: EQUAL
23882: IFFALSE 23914
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
23884: LD_ADDR_EXP 90
23888: PUSH
23889: LD_EXP 90
23893: PPUSH
23894: LD_VAR 0 5
23898: PPUSH
23899: CALL_OW 3
23903: ST_TO_ADDR
// UpdateFactoryWaypoints ;
23904: CALL 24069 0 0
// exit ;
23908: POP
23909: POP
23910: GO 24064
// end else
23912: GO 24010
// if factory = factoryWaypoints [ i ] [ 2 ] then
23914: LD_VAR 0 1
23918: PUSH
23919: LD_EXP 90
23923: PUSH
23924: LD_VAR 0 5
23928: ARRAY
23929: PUSH
23930: LD_INT 2
23932: ARRAY
23933: EQUAL
23934: IFFALSE 24010
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
23936: LD_ADDR_EXP 90
23940: PUSH
23941: LD_EXP 90
23945: PPUSH
23946: LD_VAR 0 5
23950: PPUSH
23951: CALL_OW 3
23955: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
23956: LD_ADDR_EXP 90
23960: PUSH
23961: LD_EXP 90
23965: PPUSH
23966: LD_VAR 0 1
23970: PPUSH
23971: CALL_OW 255
23975: PUSH
23976: LD_VAR 0 1
23980: PUSH
23981: LD_VAR 0 2
23985: PUSH
23986: LD_VAR 0 3
23990: PUSH
23991: EMPTY
23992: LIST
23993: LIST
23994: LIST
23995: LIST
23996: PPUSH
23997: CALL 68728 0 2
24001: ST_TO_ADDR
// UpdateFactoryWaypoints ;
24002: CALL 24069 0 0
// exit ;
24006: POP
24007: POP
24008: GO 24064
// end ; end ;
24010: GO 23849
24012: POP
24013: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
24014: LD_ADDR_EXP 90
24018: PUSH
24019: LD_EXP 90
24023: PPUSH
24024: LD_VAR 0 1
24028: PPUSH
24029: CALL_OW 255
24033: PUSH
24034: LD_VAR 0 1
24038: PUSH
24039: LD_VAR 0 2
24043: PUSH
24044: LD_VAR 0 3
24048: PUSH
24049: EMPTY
24050: LIST
24051: LIST
24052: LIST
24053: LIST
24054: PPUSH
24055: CALL 68728 0 2
24059: ST_TO_ADDR
// UpdateFactoryWaypoints ;
24060: CALL 24069 0 0
// end ;
24064: LD_VAR 0 4
24068: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
24069: LD_INT 0
24071: PPUSH
24072: PPUSH
24073: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
24074: LD_STRING resetFactoryWaypoint();
24076: PPUSH
24077: CALL_OW 559
// if factoryWaypoints then
24081: LD_EXP 90
24085: IFFALSE 24206
// begin list := factoryWaypoints ;
24087: LD_ADDR_VAR 0 3
24091: PUSH
24092: LD_EXP 90
24096: ST_TO_ADDR
// for i := 1 to list do
24097: LD_ADDR_VAR 0 2
24101: PUSH
24102: DOUBLE
24103: LD_INT 1
24105: DEC
24106: ST_TO_ADDR
24107: LD_VAR 0 3
24111: PUSH
24112: FOR_TO
24113: IFFALSE 24204
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
24115: LD_STRING setFactoryWaypointXY(
24117: PUSH
24118: LD_VAR 0 3
24122: PUSH
24123: LD_VAR 0 2
24127: ARRAY
24128: PUSH
24129: LD_INT 1
24131: ARRAY
24132: STR
24133: PUSH
24134: LD_STRING ,
24136: STR
24137: PUSH
24138: LD_VAR 0 3
24142: PUSH
24143: LD_VAR 0 2
24147: ARRAY
24148: PUSH
24149: LD_INT 2
24151: ARRAY
24152: STR
24153: PUSH
24154: LD_STRING ,
24156: STR
24157: PUSH
24158: LD_VAR 0 3
24162: PUSH
24163: LD_VAR 0 2
24167: ARRAY
24168: PUSH
24169: LD_INT 3
24171: ARRAY
24172: STR
24173: PUSH
24174: LD_STRING ,
24176: STR
24177: PUSH
24178: LD_VAR 0 3
24182: PUSH
24183: LD_VAR 0 2
24187: ARRAY
24188: PUSH
24189: LD_INT 4
24191: ARRAY
24192: STR
24193: PUSH
24194: LD_STRING )
24196: STR
24197: PPUSH
24198: CALL_OW 559
24202: GO 24112
24204: POP
24205: POP
// end ; end ;
24206: LD_VAR 0 1
24210: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
24211: LD_INT 0
24213: PPUSH
// if HexInfo ( x , y ) = warehouse then
24214: LD_VAR 0 2
24218: PPUSH
24219: LD_VAR 0 3
24223: PPUSH
24224: CALL_OW 428
24228: PUSH
24229: LD_VAR 0 1
24233: EQUAL
24234: IFFALSE 24261
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
24236: LD_ADDR_EXP 92
24240: PUSH
24241: LD_EXP 92
24245: PPUSH
24246: LD_VAR 0 1
24250: PPUSH
24251: LD_INT 0
24253: PPUSH
24254: CALL_OW 1
24258: ST_TO_ADDR
24259: GO 24312
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
24261: LD_ADDR_EXP 92
24265: PUSH
24266: LD_EXP 92
24270: PPUSH
24271: LD_VAR 0 1
24275: PPUSH
24276: LD_VAR 0 1
24280: PPUSH
24281: CALL_OW 255
24285: PUSH
24286: LD_VAR 0 1
24290: PUSH
24291: LD_VAR 0 2
24295: PUSH
24296: LD_VAR 0 3
24300: PUSH
24301: EMPTY
24302: LIST
24303: LIST
24304: LIST
24305: LIST
24306: PPUSH
24307: CALL_OW 1
24311: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
24312: CALL 24321 0 0
// end ;
24316: LD_VAR 0 4
24320: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
24321: LD_INT 0
24323: PPUSH
24324: PPUSH
24325: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
24326: LD_STRING resetWarehouseGatheringPoints();
24328: PPUSH
24329: CALL_OW 559
// if warehouseGatheringPoints then
24333: LD_EXP 92
24337: IFFALSE 24463
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
24339: LD_ADDR_VAR 0 3
24343: PUSH
24344: LD_EXP 92
24348: PPUSH
24349: CALL 72662 0 1
24353: ST_TO_ADDR
// for i := 1 to list do
24354: LD_ADDR_VAR 0 2
24358: PUSH
24359: DOUBLE
24360: LD_INT 1
24362: DEC
24363: ST_TO_ADDR
24364: LD_VAR 0 3
24368: PUSH
24369: FOR_TO
24370: IFFALSE 24461
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
24372: LD_STRING setWarehouseGatheringPointXY(
24374: PUSH
24375: LD_VAR 0 3
24379: PUSH
24380: LD_VAR 0 2
24384: ARRAY
24385: PUSH
24386: LD_INT 1
24388: ARRAY
24389: STR
24390: PUSH
24391: LD_STRING ,
24393: STR
24394: PUSH
24395: LD_VAR 0 3
24399: PUSH
24400: LD_VAR 0 2
24404: ARRAY
24405: PUSH
24406: LD_INT 2
24408: ARRAY
24409: STR
24410: PUSH
24411: LD_STRING ,
24413: STR
24414: PUSH
24415: LD_VAR 0 3
24419: PUSH
24420: LD_VAR 0 2
24424: ARRAY
24425: PUSH
24426: LD_INT 3
24428: ARRAY
24429: STR
24430: PUSH
24431: LD_STRING ,
24433: STR
24434: PUSH
24435: LD_VAR 0 3
24439: PUSH
24440: LD_VAR 0 2
24444: ARRAY
24445: PUSH
24446: LD_INT 4
24448: ARRAY
24449: STR
24450: PUSH
24451: LD_STRING )
24453: STR
24454: PPUSH
24455: CALL_OW 559
24459: GO 24369
24461: POP
24462: POP
// end ; end ;
24463: LD_VAR 0 1
24467: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
24468: LD_EXP 92
24472: IFFALSE 25167
24474: GO 24476
24476: DISABLE
24477: LD_INT 0
24479: PPUSH
24480: PPUSH
24481: PPUSH
24482: PPUSH
24483: PPUSH
24484: PPUSH
24485: PPUSH
24486: PPUSH
24487: PPUSH
// begin enable ;
24488: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
24489: LD_ADDR_VAR 0 3
24493: PUSH
24494: LD_EXP 92
24498: PPUSH
24499: CALL 72662 0 1
24503: ST_TO_ADDR
// if not list then
24504: LD_VAR 0 3
24508: NOT
24509: IFFALSE 24513
// exit ;
24511: GO 25167
// for i := 1 to list do
24513: LD_ADDR_VAR 0 1
24517: PUSH
24518: DOUBLE
24519: LD_INT 1
24521: DEC
24522: ST_TO_ADDR
24523: LD_VAR 0 3
24527: PUSH
24528: FOR_TO
24529: IFFALSE 25165
// begin depot := list [ i ] [ 2 ] ;
24531: LD_ADDR_VAR 0 8
24535: PUSH
24536: LD_VAR 0 3
24540: PUSH
24541: LD_VAR 0 1
24545: ARRAY
24546: PUSH
24547: LD_INT 2
24549: ARRAY
24550: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
24551: LD_ADDR_VAR 0 5
24555: PUSH
24556: LD_VAR 0 3
24560: PUSH
24561: LD_VAR 0 1
24565: ARRAY
24566: PUSH
24567: LD_INT 1
24569: ARRAY
24570: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
24571: LD_VAR 0 8
24575: PPUSH
24576: CALL_OW 301
24580: IFTRUE 24599
24582: PUSH
24583: LD_VAR 0 5
24587: PUSH
24588: LD_VAR 0 8
24592: PPUSH
24593: CALL_OW 255
24597: NONEQUAL
24598: OR
24599: IFFALSE 24628
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
24601: LD_ADDR_EXP 92
24605: PUSH
24606: LD_EXP 92
24610: PPUSH
24611: LD_VAR 0 8
24615: PPUSH
24616: LD_INT 0
24618: PPUSH
24619: CALL_OW 1
24623: ST_TO_ADDR
// exit ;
24624: POP
24625: POP
24626: GO 25167
// end ; x := list [ i ] [ 3 ] ;
24628: LD_ADDR_VAR 0 6
24632: PUSH
24633: LD_VAR 0 3
24637: PUSH
24638: LD_VAR 0 1
24642: ARRAY
24643: PUSH
24644: LD_INT 3
24646: ARRAY
24647: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
24648: LD_ADDR_VAR 0 7
24652: PUSH
24653: LD_VAR 0 3
24657: PUSH
24658: LD_VAR 0 1
24662: ARRAY
24663: PUSH
24664: LD_INT 4
24666: ARRAY
24667: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
24668: LD_ADDR_VAR 0 9
24672: PUSH
24673: LD_VAR 0 6
24677: PPUSH
24678: LD_VAR 0 7
24682: PPUSH
24683: LD_INT 16
24685: PPUSH
24686: CALL 71236 0 3
24690: ST_TO_ADDR
// if not cratesNearbyPoint then
24691: LD_VAR 0 9
24695: NOT
24696: IFFALSE 24702
// exit ;
24698: POP
24699: POP
24700: GO 25167
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
24702: LD_ADDR_VAR 0 4
24706: PUSH
24707: LD_INT 22
24709: PUSH
24710: LD_VAR 0 5
24714: PUSH
24715: EMPTY
24716: LIST
24717: LIST
24718: PUSH
24719: LD_INT 3
24721: PUSH
24722: LD_INT 60
24724: PUSH
24725: EMPTY
24726: LIST
24727: PUSH
24728: EMPTY
24729: LIST
24730: LIST
24731: PUSH
24732: LD_INT 91
24734: PUSH
24735: LD_VAR 0 8
24739: PUSH
24740: LD_INT 6
24742: PUSH
24743: EMPTY
24744: LIST
24745: LIST
24746: LIST
24747: PUSH
24748: LD_INT 2
24750: PUSH
24751: LD_INT 25
24753: PUSH
24754: LD_INT 2
24756: PUSH
24757: EMPTY
24758: LIST
24759: LIST
24760: PUSH
24761: LD_INT 25
24763: PUSH
24764: LD_INT 16
24766: PUSH
24767: EMPTY
24768: LIST
24769: LIST
24770: PUSH
24771: EMPTY
24772: LIST
24773: LIST
24774: LIST
24775: PUSH
24776: EMPTY
24777: LIST
24778: LIST
24779: LIST
24780: LIST
24781: PPUSH
24782: CALL_OW 69
24786: PUSH
24787: LD_VAR 0 8
24791: PPUSH
24792: CALL_OW 313
24796: PPUSH
24797: LD_INT 3
24799: PUSH
24800: LD_INT 60
24802: PUSH
24803: EMPTY
24804: LIST
24805: PUSH
24806: EMPTY
24807: LIST
24808: LIST
24809: PUSH
24810: LD_INT 2
24812: PUSH
24813: LD_INT 25
24815: PUSH
24816: LD_INT 2
24818: PUSH
24819: EMPTY
24820: LIST
24821: LIST
24822: PUSH
24823: LD_INT 25
24825: PUSH
24826: LD_INT 16
24828: PUSH
24829: EMPTY
24830: LIST
24831: LIST
24832: PUSH
24833: EMPTY
24834: LIST
24835: LIST
24836: LIST
24837: PUSH
24838: EMPTY
24839: LIST
24840: LIST
24841: PPUSH
24842: CALL_OW 72
24846: UNION
24847: ST_TO_ADDR
// if tmp then
24848: LD_VAR 0 4
24852: IFFALSE 24932
// begin tmp := ShrinkArray ( tmp , 3 ) ;
24854: LD_ADDR_VAR 0 4
24858: PUSH
24859: LD_VAR 0 4
24863: PPUSH
24864: LD_INT 3
24866: PPUSH
24867: CALL 69043 0 2
24871: ST_TO_ADDR
// for j in tmp do
24872: LD_ADDR_VAR 0 2
24876: PUSH
24877: LD_VAR 0 4
24881: PUSH
24882: FOR_IN
24883: IFFALSE 24926
// begin if IsInUnit ( j ) then
24885: LD_VAR 0 2
24889: PPUSH
24890: CALL_OW 310
24894: IFFALSE 24905
// ComExit ( j ) ;
24896: LD_VAR 0 2
24900: PPUSH
24901: CALL 69126 0 1
// AddComCollect ( j , x , y ) ;
24905: LD_VAR 0 2
24909: PPUSH
24910: LD_VAR 0 6
24914: PPUSH
24915: LD_VAR 0 7
24919: PPUSH
24920: CALL_OW 177
// end ;
24924: GO 24882
24926: POP
24927: POP
// exit ;
24928: POP
24929: POP
24930: GO 25167
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
24932: LD_ADDR_VAR 0 4
24936: PUSH
24937: LD_INT 22
24939: PUSH
24940: LD_VAR 0 5
24944: PUSH
24945: EMPTY
24946: LIST
24947: LIST
24948: PUSH
24949: LD_INT 91
24951: PUSH
24952: LD_VAR 0 8
24956: PUSH
24957: LD_INT 8
24959: PUSH
24960: EMPTY
24961: LIST
24962: LIST
24963: LIST
24964: PUSH
24965: LD_INT 2
24967: PUSH
24968: LD_INT 34
24970: PUSH
24971: LD_INT 12
24973: PUSH
24974: EMPTY
24975: LIST
24976: LIST
24977: PUSH
24978: LD_INT 34
24980: PUSH
24981: LD_INT 51
24983: PUSH
24984: EMPTY
24985: LIST
24986: LIST
24987: PUSH
24988: LD_INT 34
24990: PUSH
24991: LD_INT 32
24993: PUSH
24994: EMPTY
24995: LIST
24996: LIST
24997: PUSH
24998: LD_INT 34
25000: PUSH
25001: LD_INT 89
25003: PUSH
25004: EMPTY
25005: LIST
25006: LIST
25007: PUSH
25008: EMPTY
25009: LIST
25010: LIST
25011: LIST
25012: LIST
25013: LIST
25014: PUSH
25015: EMPTY
25016: LIST
25017: LIST
25018: LIST
25019: PPUSH
25020: CALL_OW 69
25024: ST_TO_ADDR
// if tmp then
25025: LD_VAR 0 4
25029: IFFALSE 25163
// begin for j in tmp do
25031: LD_ADDR_VAR 0 2
25035: PUSH
25036: LD_VAR 0 4
25040: PUSH
25041: FOR_IN
25042: IFFALSE 25161
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
25044: LD_VAR 0 2
25048: PPUSH
25049: CALL_OW 262
25053: PUSH
25054: LD_INT 3
25056: EQUAL
25057: IFTRUE 25074
25059: PUSH
25060: LD_VAR 0 2
25064: PPUSH
25065: CALL_OW 261
25069: PUSH
25070: LD_INT 20
25072: GREATER
25073: OR
25074: IFFALSE 25088
25076: PUSH
25077: LD_VAR 0 2
25081: PPUSH
25082: CALL_OW 314
25086: NOT
25087: AND
25088: IFFALSE 25118
25090: PUSH
25091: LD_VAR 0 2
25095: PPUSH
25096: CALL_OW 263
25100: PUSH
25101: LD_INT 1
25103: NONEQUAL
25104: IFTRUE 25117
25106: PUSH
25107: LD_VAR 0 2
25111: PPUSH
25112: CALL_OW 311
25116: OR
25117: AND
25118: IFFALSE 25159
// begin ComCollect ( j , x , y ) ;
25120: LD_VAR 0 2
25124: PPUSH
25125: LD_VAR 0 6
25129: PPUSH
25130: LD_VAR 0 7
25134: PPUSH
25135: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
25139: LD_VAR 0 2
25143: PPUSH
25144: LD_VAR 0 8
25148: PPUSH
25149: CALL_OW 172
// exit ;
25153: POP
25154: POP
25155: POP
25156: POP
25157: GO 25167
// end ;
25159: GO 25041
25161: POP
25162: POP
// end ; end ;
25163: GO 24528
25165: POP
25166: POP
// end ; end_of_file
25167: PPOPN 9
25169: END
// export function SOS_UnitDestroyed ( un ) ; begin
25170: LD_INT 0
25172: PPUSH
// ComRadiation ( un ) ;
25173: LD_VAR 0 1
25177: PPUSH
25178: CALL 26259 0 1
// end ;
25182: LD_VAR 0 2
25186: RET
// export function SOS_UnitKamikazed ( un ) ; begin
25187: LD_INT 0
25189: PPUSH
// ComRadiation ( un ) ;
25190: LD_VAR 0 1
25194: PPUSH
25195: CALL 26259 0 1
// end ;
25199: LD_VAR 0 2
25203: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
25204: LD_INT 0
25206: PPUSH
// end ;
25207: LD_VAR 0 4
25211: RET
// export function SOS_Command ( cmd ) ; begin
25212: LD_INT 0
25214: PPUSH
// end ;
25215: LD_VAR 0 2
25219: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
25220: LD_INT 0
25222: PPUSH
// end ;
25223: LD_VAR 0 6
25227: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex ; begin
25228: LD_INT 0
25230: PPUSH
25231: PPUSH
25232: PPUSH
25233: PPUSH
// if not vehicle or not factory then
25234: LD_VAR 0 1
25238: NOT
25239: IFTRUE 25248
25241: PUSH
25242: LD_VAR 0 2
25246: NOT
25247: OR
25248: IFFALSE 25252
// exit ;
25250: GO 25834
// if not factoryWaypoints then
25252: LD_EXP 90
25256: NOT
25257: IFFALSE 25261
// exit ;
25259: GO 25834
// for i := 1 to Count ( factoryWaypoints ) do
25261: LD_ADDR_VAR 0 4
25265: PUSH
25266: DOUBLE
25267: LD_INT 1
25269: DEC
25270: ST_TO_ADDR
25271: LD_EXP 90
25275: PPUSH
25276: CALL 32796 0 1
25280: PUSH
25281: FOR_TO
25282: IFFALSE 25832
// if factoryWaypoints [ i ] [ 2 ] = factory then
25284: LD_EXP 90
25288: PUSH
25289: LD_VAR 0 4
25293: ARRAY
25294: PUSH
25295: LD_INT 2
25297: ARRAY
25298: PUSH
25299: LD_VAR 0 2
25303: EQUAL
25304: IFFALSE 25830
// begin if GetControl ( vehicle ) = control_manual then
25306: LD_VAR 0 1
25310: PPUSH
25311: CALL_OW 263
25315: PUSH
25316: LD_INT 1
25318: EQUAL
25319: IFFALSE 25683
// begin driver := IsDrivenBy ( vehicle ) ;
25321: LD_ADDR_VAR 0 5
25325: PUSH
25326: LD_VAR 0 1
25330: PPUSH
25331: CALL_OW 311
25335: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
25336: LD_VAR 0 5
25340: PUSH
25341: LD_EXP 91
25345: IN
25346: IFTRUE 25360
25348: PUSH
25349: LD_VAR 0 1
25353: PUSH
25354: LD_EXP 91
25358: IN
25359: OR
25360: IFFALSE 25366
// exit ;
25362: POP
25363: POP
25364: GO 25834
// if not HasTask ( driver ) then
25366: LD_VAR 0 5
25370: PPUSH
25371: CALL_OW 314
25375: NOT
25376: IFFALSE 25681
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
25378: LD_ADDR_EXP 91
25382: PUSH
25383: LD_EXP 91
25387: PPUSH
25388: LD_VAR 0 5
25392: PPUSH
25393: CALL 68728 0 2
25397: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
25398: LD_ADDR_EXP 91
25402: PUSH
25403: LD_EXP 91
25407: PPUSH
25408: LD_VAR 0 1
25412: PPUSH
25413: CALL 68728 0 2
25417: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
25418: LD_ADDR_VAR 0 6
25422: PUSH
25423: LD_EXP 90
25427: PUSH
25428: LD_VAR 0 4
25432: ARRAY
25433: PUSH
25434: LD_INT 3
25436: ARRAY
25437: PPUSH
25438: LD_EXP 90
25442: PUSH
25443: LD_VAR 0 4
25447: ARRAY
25448: PUSH
25449: LD_INT 4
25451: ARRAY
25452: PPUSH
25453: CALL_OW 428
25457: ST_TO_ADDR
// if hex then
25458: LD_VAR 0 6
25462: IFFALSE 25480
// ComMoveUnit ( driver , hex ) else
25464: LD_VAR 0 5
25468: PPUSH
25469: LD_VAR 0 6
25473: PPUSH
25474: CALL_OW 112
25478: GO 25564
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
25480: LD_VAR 0 1
25484: PPUSH
25485: LD_EXP 90
25489: PUSH
25490: LD_VAR 0 4
25494: ARRAY
25495: PUSH
25496: LD_INT 3
25498: ARRAY
25499: PPUSH
25500: LD_EXP 90
25504: PUSH
25505: LD_VAR 0 4
25509: ARRAY
25510: PUSH
25511: LD_INT 4
25513: ARRAY
25514: PPUSH
25515: CALL_OW 297
25519: PUSH
25520: LD_INT 0
25522: GREATER
25523: IFFALSE 25564
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
25525: LD_VAR 0 5
25529: PPUSH
25530: LD_EXP 90
25534: PUSH
25535: LD_VAR 0 4
25539: ARRAY
25540: PUSH
25541: LD_INT 3
25543: ARRAY
25544: PPUSH
25545: LD_EXP 90
25549: PUSH
25550: LD_VAR 0 4
25554: ARRAY
25555: PUSH
25556: LD_INT 4
25558: ARRAY
25559: PPUSH
25560: CALL_OW 111
// AddComExitVehicle ( driver ) ;
25564: LD_VAR 0 5
25568: PPUSH
25569: CALL_OW 181
// if Multiplayer then
25573: LD_OWVAR 4
25577: IFFALSE 25626
// begin repeat wait ( 10 ) ;
25579: LD_INT 10
25581: PPUSH
25582: CALL_OW 67
// until not IsInUnit ( driver ) ;
25586: LD_VAR 0 5
25590: PPUSH
25591: CALL_OW 310
25595: NOT
25596: IFFALSE 25579
// if not HasTask ( driver ) then
25598: LD_VAR 0 5
25602: PPUSH
25603: CALL_OW 314
25607: NOT
25608: IFFALSE 25624
// ComEnterUnit ( driver , factory ) ;
25610: LD_VAR 0 5
25614: PPUSH
25615: LD_VAR 0 2
25619: PPUSH
25620: CALL_OW 120
// end else
25624: GO 25640
// AddComEnterUnit ( driver , factory ) ;
25626: LD_VAR 0 5
25630: PPUSH
25631: LD_VAR 0 2
25635: PPUSH
25636: CALL_OW 180
// wait ( 0 0$1 ) ;
25640: LD_INT 35
25642: PPUSH
25643: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
25647: LD_ADDR_EXP 91
25651: PUSH
25652: LD_EXP 91
25656: PUSH
25657: LD_VAR 0 5
25661: DIFF
25662: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
25663: LD_ADDR_EXP 91
25667: PUSH
25668: LD_EXP 91
25672: PUSH
25673: LD_VAR 0 1
25677: DIFF
25678: ST_TO_ADDR
// break ;
25679: GO 25832
// end ; end else
25681: GO 25830
// if GetControl ( vehicle ) = control_remote then
25683: LD_VAR 0 1
25687: PPUSH
25688: CALL_OW 263
25692: PUSH
25693: LD_INT 2
25695: EQUAL
25696: IFFALSE 25782
// begin wait ( 0 0$2 ) ;
25698: LD_INT 70
25700: PPUSH
25701: CALL_OW 67
// repeat wait ( 10 ) ;
25705: LD_INT 10
25707: PPUSH
25708: CALL_OW 67
// Connect ( vehicle ) ;
25712: LD_VAR 0 1
25716: PPUSH
25717: CALL 39040 0 1
// until IsControledBy ( vehicle ) ;
25721: LD_VAR 0 1
25725: PPUSH
25726: CALL_OW 312
25730: IFFALSE 25705
// wait ( 10 ) ;
25732: LD_INT 10
25734: PPUSH
25735: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
25739: LD_VAR 0 1
25743: PPUSH
25744: LD_EXP 90
25748: PUSH
25749: LD_VAR 0 4
25753: ARRAY
25754: PUSH
25755: LD_INT 3
25757: ARRAY
25758: PPUSH
25759: LD_EXP 90
25763: PUSH
25764: LD_VAR 0 4
25768: ARRAY
25769: PUSH
25770: LD_INT 4
25772: ARRAY
25773: PPUSH
25774: CALL_OW 111
// break ;
25778: GO 25832
// end else
25780: GO 25830
// begin wait ( 0 0$3 ) ;
25782: LD_INT 105
25784: PPUSH
25785: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
25789: LD_VAR 0 1
25793: PPUSH
25794: LD_EXP 90
25798: PUSH
25799: LD_VAR 0 4
25803: ARRAY
25804: PUSH
25805: LD_INT 3
25807: ARRAY
25808: PPUSH
25809: LD_EXP 90
25813: PUSH
25814: LD_VAR 0 4
25818: ARRAY
25819: PUSH
25820: LD_INT 4
25822: ARRAY
25823: PPUSH
25824: CALL_OW 111
// break ;
25828: GO 25832
// end ; end ;
25830: GO 25281
25832: POP
25833: POP
// end ;
25834: LD_VAR 0 3
25838: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
25839: LD_INT 0
25841: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
25842: LD_VAR 0 1
25846: PUSH
25847: LD_INT 250
25849: EQUAL
25850: IFFALSE 25867
25852: PUSH
25853: LD_VAR 0 2
25857: PPUSH
25858: CALL_OW 264
25862: PUSH
25863: LD_INT 81
25865: EQUAL
25866: AND
25867: IFFALSE 25888
// MinerPlaceMine ( unit , x , y ) ;
25869: LD_VAR 0 2
25873: PPUSH
25874: LD_VAR 0 4
25878: PPUSH
25879: LD_VAR 0 5
25883: PPUSH
25884: CALL 29020 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
25888: LD_VAR 0 1
25892: PUSH
25893: LD_INT 251
25895: EQUAL
25896: IFFALSE 25913
25898: PUSH
25899: LD_VAR 0 2
25903: PPUSH
25904: CALL_OW 264
25908: PUSH
25909: LD_INT 81
25911: EQUAL
25912: AND
25913: IFFALSE 25934
// MinerDetonateMine ( unit , x , y ) ;
25915: LD_VAR 0 2
25919: PPUSH
25920: LD_VAR 0 4
25924: PPUSH
25925: LD_VAR 0 5
25929: PPUSH
25930: CALL 29299 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
25934: LD_VAR 0 1
25938: PUSH
25939: LD_INT 252
25941: EQUAL
25942: IFFALSE 25959
25944: PUSH
25945: LD_VAR 0 2
25949: PPUSH
25950: CALL_OW 264
25954: PUSH
25955: LD_INT 81
25957: EQUAL
25958: AND
25959: IFFALSE 25980
// MinerCreateMinefield ( unit , x , y ) ;
25961: LD_VAR 0 2
25965: PPUSH
25966: LD_VAR 0 4
25970: PPUSH
25971: LD_VAR 0 5
25975: PPUSH
25976: CALL 29718 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
25980: LD_VAR 0 1
25984: PUSH
25985: LD_INT 253
25987: EQUAL
25988: IFFALSE 26005
25990: PUSH
25991: LD_VAR 0 2
25995: PPUSH
25996: CALL_OW 257
26000: PUSH
26001: LD_INT 5
26003: EQUAL
26004: AND
26005: IFFALSE 26026
// ComBinocular ( unit , x , y ) ;
26007: LD_VAR 0 2
26011: PPUSH
26012: LD_VAR 0 4
26016: PPUSH
26017: LD_VAR 0 5
26021: PPUSH
26022: CALL 30093 0 3
// if selectedUnit then
26026: LD_VAR 0 3
26030: IFFALSE 26090
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
26032: LD_VAR 0 1
26036: PUSH
26037: LD_INT 254
26039: EQUAL
26040: IFFALSE 26057
26042: PUSH
26043: LD_VAR 0 2
26047: PPUSH
26048: CALL_OW 264
26052: PUSH
26053: LD_INT 99
26055: EQUAL
26056: AND
26057: IFFALSE 26074
26059: PUSH
26060: LD_VAR 0 3
26064: PPUSH
26065: CALL_OW 263
26069: PUSH
26070: LD_INT 3
26072: EQUAL
26073: AND
26074: IFFALSE 26090
// HackDestroyVehicle ( unit , selectedUnit ) ;
26076: LD_VAR 0 2
26080: PPUSH
26081: LD_VAR 0 3
26085: PPUSH
26086: CALL 28380 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
26090: LD_VAR 0 1
26094: PUSH
26095: LD_INT 255
26097: EQUAL
26098: IFFALSE 26122
26100: PUSH
26101: LD_VAR 0 2
26105: PPUSH
26106: CALL_OW 264
26110: PUSH
26111: LD_INT 14
26113: PUSH
26114: LD_INT 53
26116: PUSH
26117: EMPTY
26118: LIST
26119: LIST
26120: IN
26121: AND
26122: IFFALSE 26140
26124: PUSH
26125: LD_VAR 0 4
26129: PPUSH
26130: LD_VAR 0 5
26134: PPUSH
26135: CALL_OW 488
26139: AND
26140: IFFALSE 26164
// CutTreeXYR ( unit , x , y , 12 ) ;
26142: LD_VAR 0 2
26146: PPUSH
26147: LD_VAR 0 4
26151: PPUSH
26152: LD_VAR 0 5
26156: PPUSH
26157: LD_INT 12
26159: PPUSH
26160: CALL 26355 0 4
// if cmd = 256 then
26164: LD_VAR 0 1
26168: PUSH
26169: LD_INT 256
26171: EQUAL
26172: IFFALSE 26193
// SetFactoryWaypoint ( unit , x , y ) ;
26174: LD_VAR 0 2
26178: PPUSH
26179: LD_VAR 0 4
26183: PPUSH
26184: LD_VAR 0 5
26188: PPUSH
26189: CALL 23715 0 3
// if cmd = 257 then
26193: LD_VAR 0 1
26197: PUSH
26198: LD_INT 257
26200: EQUAL
26201: IFFALSE 26222
// SetWarehouseGatheringPoint ( unit , x , y ) ;
26203: LD_VAR 0 2
26207: PPUSH
26208: LD_VAR 0 4
26212: PPUSH
26213: LD_VAR 0 5
26217: PPUSH
26218: CALL 24211 0 3
// if cmd = 258 then
26222: LD_VAR 0 1
26226: PUSH
26227: LD_INT 258
26229: EQUAL
26230: IFFALSE 26254
// BurnTreeXYR ( unit , x , y , 8 ) ;
26232: LD_VAR 0 2
26236: PPUSH
26237: LD_VAR 0 4
26241: PPUSH
26242: LD_VAR 0 5
26246: PPUSH
26247: LD_INT 8
26249: PPUSH
26250: CALL 26755 0 4
// end ;
26254: LD_VAR 0 6
26258: RET
// export function ComRadiation ( un ) ; var eff ; begin
26259: LD_INT 0
26261: PPUSH
26262: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
26263: LD_VAR 0 1
26267: PPUSH
26268: CALL_OW 264
26272: PUSH
26273: LD_INT 91
26275: NONEQUAL
26276: IFFALSE 26280
// exit ;
26278: GO 26350
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
26280: LD_INT 68
26282: PPUSH
26283: LD_VAR 0 1
26287: PPUSH
26288: CALL_OW 255
26292: PPUSH
26293: CALL_OW 321
26297: PUSH
26298: LD_INT 2
26300: EQUAL
26301: IFFALSE 26313
// eff := 50 else
26303: LD_ADDR_VAR 0 3
26307: PUSH
26308: LD_INT 50
26310: ST_TO_ADDR
26311: GO 26321
// eff := 25 ;
26313: LD_ADDR_VAR 0 3
26317: PUSH
26318: LD_INT 25
26320: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
26321: LD_VAR 0 1
26325: PPUSH
26326: CALL_OW 250
26330: PPUSH
26331: LD_VAR 0 1
26335: PPUSH
26336: CALL_OW 251
26340: PPUSH
26341: LD_VAR 0 3
26345: PPUSH
26346: CALL_OW 495
// end ;
26350: LD_VAR 0 2
26354: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
26355: LD_INT 0
26357: PPUSH
26358: PPUSH
26359: PPUSH
26360: PPUSH
26361: PPUSH
26362: PPUSH
26363: PPUSH
26364: PPUSH
26365: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
26366: LD_VAR 0 1
26370: PPUSH
26371: CALL_OW 302
26375: NOT
26376: IFTRUE 26395
26378: PUSH
26379: LD_VAR 0 2
26383: PPUSH
26384: LD_VAR 0 3
26388: PPUSH
26389: CALL_OW 488
26393: NOT
26394: OR
26395: IFTRUE 26404
26397: PUSH
26398: LD_VAR 0 4
26402: NOT
26403: OR
26404: IFFALSE 26408
// exit ;
26406: GO 26750
// list := [ ] ;
26408: LD_ADDR_VAR 0 13
26412: PUSH
26413: EMPTY
26414: ST_TO_ADDR
// if x - r < 0 then
26415: LD_VAR 0 2
26419: PUSH
26420: LD_VAR 0 4
26424: MINUS
26425: PUSH
26426: LD_INT 0
26428: LESS
26429: IFFALSE 26441
// min_x := 0 else
26431: LD_ADDR_VAR 0 7
26435: PUSH
26436: LD_INT 0
26438: ST_TO_ADDR
26439: GO 26457
// min_x := x - r ;
26441: LD_ADDR_VAR 0 7
26445: PUSH
26446: LD_VAR 0 2
26450: PUSH
26451: LD_VAR 0 4
26455: MINUS
26456: ST_TO_ADDR
// if y - r < 0 then
26457: LD_VAR 0 3
26461: PUSH
26462: LD_VAR 0 4
26466: MINUS
26467: PUSH
26468: LD_INT 0
26470: LESS
26471: IFFALSE 26483
// min_y := 0 else
26473: LD_ADDR_VAR 0 8
26477: PUSH
26478: LD_INT 0
26480: ST_TO_ADDR
26481: GO 26499
// min_y := y - r ;
26483: LD_ADDR_VAR 0 8
26487: PUSH
26488: LD_VAR 0 3
26492: PUSH
26493: LD_VAR 0 4
26497: MINUS
26498: ST_TO_ADDR
// max_x := x + r ;
26499: LD_ADDR_VAR 0 9
26503: PUSH
26504: LD_VAR 0 2
26508: PUSH
26509: LD_VAR 0 4
26513: PLUS
26514: ST_TO_ADDR
// max_y := y + r ;
26515: LD_ADDR_VAR 0 10
26519: PUSH
26520: LD_VAR 0 3
26524: PUSH
26525: LD_VAR 0 4
26529: PLUS
26530: ST_TO_ADDR
// for _x = min_x to max_x do
26531: LD_ADDR_VAR 0 11
26535: PUSH
26536: DOUBLE
26537: LD_VAR 0 7
26541: DEC
26542: ST_TO_ADDR
26543: LD_VAR 0 9
26547: PUSH
26548: FOR_TO
26549: IFFALSE 26668
// for _y = min_y to max_y do
26551: LD_ADDR_VAR 0 12
26555: PUSH
26556: DOUBLE
26557: LD_VAR 0 8
26561: DEC
26562: ST_TO_ADDR
26563: LD_VAR 0 10
26567: PUSH
26568: FOR_TO
26569: IFFALSE 26664
// begin if not ValidHex ( _x , _y ) then
26571: LD_VAR 0 11
26575: PPUSH
26576: LD_VAR 0 12
26580: PPUSH
26581: CALL_OW 488
26585: NOT
26586: IFFALSE 26590
// continue ;
26588: GO 26568
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
26590: LD_VAR 0 11
26594: PPUSH
26595: LD_VAR 0 12
26599: PPUSH
26600: CALL_OW 351
26604: IFFALSE 26622
26606: PUSH
26607: LD_VAR 0 11
26611: PPUSH
26612: LD_VAR 0 12
26616: PPUSH
26617: CALL_OW 554
26621: AND
26622: IFFALSE 26662
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
26624: LD_ADDR_VAR 0 13
26628: PUSH
26629: LD_VAR 0 13
26633: PPUSH
26634: LD_VAR 0 13
26638: PUSH
26639: LD_INT 1
26641: PLUS
26642: PPUSH
26643: LD_VAR 0 11
26647: PUSH
26648: LD_VAR 0 12
26652: PUSH
26653: EMPTY
26654: LIST
26655: LIST
26656: PPUSH
26657: CALL_OW 2
26661: ST_TO_ADDR
// end ;
26662: GO 26568
26664: POP
26665: POP
26666: GO 26548
26668: POP
26669: POP
// if not list then
26670: LD_VAR 0 13
26674: NOT
26675: IFFALSE 26679
// exit ;
26677: GO 26750
// for i in list do
26679: LD_ADDR_VAR 0 6
26683: PUSH
26684: LD_VAR 0 13
26688: PUSH
26689: FOR_IN
26690: IFFALSE 26748
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
26692: LD_VAR 0 1
26696: PPUSH
26697: LD_STRING M
26699: PUSH
26700: LD_VAR 0 6
26704: PUSH
26705: LD_INT 1
26707: ARRAY
26708: PUSH
26709: LD_VAR 0 6
26713: PUSH
26714: LD_INT 2
26716: ARRAY
26717: PUSH
26718: LD_INT 0
26720: PUSH
26721: LD_INT 0
26723: PUSH
26724: LD_INT 0
26726: PUSH
26727: LD_INT 0
26729: PUSH
26730: EMPTY
26731: LIST
26732: LIST
26733: LIST
26734: LIST
26735: LIST
26736: LIST
26737: LIST
26738: PUSH
26739: EMPTY
26740: LIST
26741: PPUSH
26742: CALL_OW 447
26746: GO 26689
26748: POP
26749: POP
// end ;
26750: LD_VAR 0 5
26754: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
26755: LD_INT 0
26757: PPUSH
26758: PPUSH
26759: PPUSH
26760: PPUSH
26761: PPUSH
26762: PPUSH
26763: PPUSH
26764: PPUSH
26765: PPUSH
26766: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
26767: LD_VAR 0 1
26771: PPUSH
26772: CALL_OW 302
26776: NOT
26777: IFTRUE 26796
26779: PUSH
26780: LD_VAR 0 2
26784: PPUSH
26785: LD_VAR 0 3
26789: PPUSH
26790: CALL_OW 488
26794: NOT
26795: OR
26796: IFTRUE 26805
26798: PUSH
26799: LD_VAR 0 4
26803: NOT
26804: OR
26805: IFFALSE 26809
// exit ;
26807: GO 27326
// list := [ ] ;
26809: LD_ADDR_VAR 0 13
26813: PUSH
26814: EMPTY
26815: ST_TO_ADDR
// if x - r < 0 then
26816: LD_VAR 0 2
26820: PUSH
26821: LD_VAR 0 4
26825: MINUS
26826: PUSH
26827: LD_INT 0
26829: LESS
26830: IFFALSE 26842
// min_x := 0 else
26832: LD_ADDR_VAR 0 7
26836: PUSH
26837: LD_INT 0
26839: ST_TO_ADDR
26840: GO 26858
// min_x := x - r ;
26842: LD_ADDR_VAR 0 7
26846: PUSH
26847: LD_VAR 0 2
26851: PUSH
26852: LD_VAR 0 4
26856: MINUS
26857: ST_TO_ADDR
// if y - r < 0 then
26858: LD_VAR 0 3
26862: PUSH
26863: LD_VAR 0 4
26867: MINUS
26868: PUSH
26869: LD_INT 0
26871: LESS
26872: IFFALSE 26884
// min_y := 0 else
26874: LD_ADDR_VAR 0 8
26878: PUSH
26879: LD_INT 0
26881: ST_TO_ADDR
26882: GO 26900
// min_y := y - r ;
26884: LD_ADDR_VAR 0 8
26888: PUSH
26889: LD_VAR 0 3
26893: PUSH
26894: LD_VAR 0 4
26898: MINUS
26899: ST_TO_ADDR
// max_x := x + r ;
26900: LD_ADDR_VAR 0 9
26904: PUSH
26905: LD_VAR 0 2
26909: PUSH
26910: LD_VAR 0 4
26914: PLUS
26915: ST_TO_ADDR
// max_y := y + r ;
26916: LD_ADDR_VAR 0 10
26920: PUSH
26921: LD_VAR 0 3
26925: PUSH
26926: LD_VAR 0 4
26930: PLUS
26931: ST_TO_ADDR
// for _x = min_x to max_x do
26932: LD_ADDR_VAR 0 11
26936: PUSH
26937: DOUBLE
26938: LD_VAR 0 7
26942: DEC
26943: ST_TO_ADDR
26944: LD_VAR 0 9
26948: PUSH
26949: FOR_TO
26950: IFFALSE 27069
// for _y = min_y to max_y do
26952: LD_ADDR_VAR 0 12
26956: PUSH
26957: DOUBLE
26958: LD_VAR 0 8
26962: DEC
26963: ST_TO_ADDR
26964: LD_VAR 0 10
26968: PUSH
26969: FOR_TO
26970: IFFALSE 27065
// begin if not ValidHex ( _x , _y ) then
26972: LD_VAR 0 11
26976: PPUSH
26977: LD_VAR 0 12
26981: PPUSH
26982: CALL_OW 488
26986: NOT
26987: IFFALSE 26991
// continue ;
26989: GO 26969
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
26991: LD_VAR 0 11
26995: PPUSH
26996: LD_VAR 0 12
27000: PPUSH
27001: CALL_OW 351
27005: IFFALSE 27023
27007: PUSH
27008: LD_VAR 0 11
27012: PPUSH
27013: LD_VAR 0 12
27017: PPUSH
27018: CALL_OW 554
27022: AND
27023: IFFALSE 27063
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
27025: LD_ADDR_VAR 0 13
27029: PUSH
27030: LD_VAR 0 13
27034: PPUSH
27035: LD_VAR 0 13
27039: PUSH
27040: LD_INT 1
27042: PLUS
27043: PPUSH
27044: LD_VAR 0 11
27048: PUSH
27049: LD_VAR 0 12
27053: PUSH
27054: EMPTY
27055: LIST
27056: LIST
27057: PPUSH
27058: CALL_OW 2
27062: ST_TO_ADDR
// end ;
27063: GO 26969
27065: POP
27066: POP
27067: GO 26949
27069: POP
27070: POP
// if not list then
27071: LD_VAR 0 13
27075: NOT
27076: IFFALSE 27080
// exit ;
27078: GO 27326
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
27080: LD_ADDR_VAR 0 13
27084: PUSH
27085: LD_VAR 0 1
27089: PPUSH
27090: LD_VAR 0 13
27094: PPUSH
27095: LD_INT 1
27097: PPUSH
27098: LD_INT 1
27100: PPUSH
27101: CALL 36168 0 4
27105: ST_TO_ADDR
// ComStop ( flame ) ;
27106: LD_VAR 0 1
27110: PPUSH
27111: CALL_OW 141
// for i in list do
27115: LD_ADDR_VAR 0 6
27119: PUSH
27120: LD_VAR 0 13
27124: PUSH
27125: FOR_IN
27126: IFFALSE 27157
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
27128: LD_VAR 0 1
27132: PPUSH
27133: LD_VAR 0 6
27137: PUSH
27138: LD_INT 1
27140: ARRAY
27141: PPUSH
27142: LD_VAR 0 6
27146: PUSH
27147: LD_INT 2
27149: ARRAY
27150: PPUSH
27151: CALL_OW 176
27155: GO 27125
27157: POP
27158: POP
// repeat wait ( 0 0$1 ) ;
27159: LD_INT 35
27161: PPUSH
27162: CALL_OW 67
// task := GetTaskList ( flame ) ;
27166: LD_ADDR_VAR 0 14
27170: PUSH
27171: LD_VAR 0 1
27175: PPUSH
27176: CALL_OW 437
27180: ST_TO_ADDR
// if not task then
27181: LD_VAR 0 14
27185: NOT
27186: IFFALSE 27190
// exit ;
27188: GO 27326
// if task [ 1 ] [ 1 ] <> | then
27190: LD_VAR 0 14
27194: PUSH
27195: LD_INT 1
27197: ARRAY
27198: PUSH
27199: LD_INT 1
27201: ARRAY
27202: PUSH
27203: LD_STRING |
27205: NONEQUAL
27206: IFFALSE 27210
// exit ;
27208: GO 27326
// _x := task [ 1 ] [ 2 ] ;
27210: LD_ADDR_VAR 0 11
27214: PUSH
27215: LD_VAR 0 14
27219: PUSH
27220: LD_INT 1
27222: ARRAY
27223: PUSH
27224: LD_INT 2
27226: ARRAY
27227: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
27228: LD_ADDR_VAR 0 12
27232: PUSH
27233: LD_VAR 0 14
27237: PUSH
27238: LD_INT 1
27240: ARRAY
27241: PUSH
27242: LD_INT 3
27244: ARRAY
27245: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
27246: LD_VAR 0 11
27250: PPUSH
27251: LD_VAR 0 12
27255: PPUSH
27256: CALL_OW 351
27260: NOT
27261: IFTRUE 27280
27263: PUSH
27264: LD_VAR 0 11
27268: PPUSH
27269: LD_VAR 0 12
27273: PPUSH
27274: CALL_OW 554
27278: NOT
27279: OR
27280: IFFALSE 27314
// begin task := Delete ( task , 1 ) ;
27282: LD_ADDR_VAR 0 14
27286: PUSH
27287: LD_VAR 0 14
27291: PPUSH
27292: LD_INT 1
27294: PPUSH
27295: CALL_OW 3
27299: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
27300: LD_VAR 0 1
27304: PPUSH
27305: LD_VAR 0 14
27309: PPUSH
27310: CALL_OW 446
// end ; until not HasTask ( flame ) ;
27314: LD_VAR 0 1
27318: PPUSH
27319: CALL_OW 314
27323: NOT
27324: IFFALSE 27159
// end ;
27326: LD_VAR 0 5
27330: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
27331: LD_EXP 94
27335: NOT
27336: IFFALSE 27386
27338: GO 27340
27340: DISABLE
// begin initHack := true ;
27341: LD_ADDR_EXP 94
27345: PUSH
27346: LD_INT 1
27348: ST_TO_ADDR
// hackTanks := [ ] ;
27349: LD_ADDR_EXP 95
27353: PUSH
27354: EMPTY
27355: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
27356: LD_ADDR_EXP 96
27360: PUSH
27361: EMPTY
27362: ST_TO_ADDR
// hackLimit := 3 ;
27363: LD_ADDR_EXP 97
27367: PUSH
27368: LD_INT 3
27370: ST_TO_ADDR
// hackDist := 12 ;
27371: LD_ADDR_EXP 98
27375: PUSH
27376: LD_INT 12
27378: ST_TO_ADDR
// hackCounter := [ ] ;
27379: LD_ADDR_EXP 99
27383: PUSH
27384: EMPTY
27385: ST_TO_ADDR
// end ;
27386: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
27387: LD_EXP 94
27391: IFFALSE 27409
27393: PUSH
27394: LD_INT 34
27396: PUSH
27397: LD_INT 99
27399: PUSH
27400: EMPTY
27401: LIST
27402: LIST
27403: PPUSH
27404: CALL_OW 69
27408: AND
27409: IFFALSE 27662
27411: GO 27413
27413: DISABLE
27414: LD_INT 0
27416: PPUSH
27417: PPUSH
// begin enable ;
27418: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
27419: LD_ADDR_VAR 0 1
27423: PUSH
27424: LD_INT 34
27426: PUSH
27427: LD_INT 99
27429: PUSH
27430: EMPTY
27431: LIST
27432: LIST
27433: PPUSH
27434: CALL_OW 69
27438: PUSH
27439: FOR_IN
27440: IFFALSE 27660
// begin if not i in hackTanks then
27442: LD_VAR 0 1
27446: PUSH
27447: LD_EXP 95
27451: IN
27452: NOT
27453: IFFALSE 27536
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
27455: LD_ADDR_EXP 95
27459: PUSH
27460: LD_EXP 95
27464: PPUSH
27465: LD_EXP 95
27469: PUSH
27470: LD_INT 1
27472: PLUS
27473: PPUSH
27474: LD_VAR 0 1
27478: PPUSH
27479: CALL_OW 1
27483: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
27484: LD_ADDR_EXP 96
27488: PUSH
27489: LD_EXP 96
27493: PPUSH
27494: LD_EXP 96
27498: PUSH
27499: LD_INT 1
27501: PLUS
27502: PPUSH
27503: EMPTY
27504: PPUSH
27505: CALL_OW 1
27509: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
27510: LD_ADDR_EXP 99
27514: PUSH
27515: LD_EXP 99
27519: PPUSH
27520: LD_EXP 99
27524: PUSH
27525: LD_INT 1
27527: PLUS
27528: PPUSH
27529: EMPTY
27530: PPUSH
27531: CALL_OW 1
27535: ST_TO_ADDR
// end ; if not IsOk ( i ) then
27536: LD_VAR 0 1
27540: PPUSH
27541: CALL_OW 302
27545: NOT
27546: IFFALSE 27559
// begin HackUnlinkAll ( i ) ;
27548: LD_VAR 0 1
27552: PPUSH
27553: CALL 27665 0 1
// continue ;
27557: GO 27439
// end ; HackCheckCapturedStatus ( i ) ;
27559: LD_VAR 0 1
27563: PPUSH
27564: CALL 28110 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
27568: LD_ADDR_VAR 0 2
27572: PUSH
27573: LD_INT 81
27575: PUSH
27576: LD_VAR 0 1
27580: PPUSH
27581: CALL_OW 255
27585: PUSH
27586: EMPTY
27587: LIST
27588: LIST
27589: PUSH
27590: LD_INT 33
27592: PUSH
27593: LD_INT 3
27595: PUSH
27596: EMPTY
27597: LIST
27598: LIST
27599: PUSH
27600: LD_INT 91
27602: PUSH
27603: LD_VAR 0 1
27607: PUSH
27608: LD_EXP 98
27612: PUSH
27613: EMPTY
27614: LIST
27615: LIST
27616: LIST
27617: PUSH
27618: LD_INT 50
27620: PUSH
27621: EMPTY
27622: LIST
27623: PUSH
27624: EMPTY
27625: LIST
27626: LIST
27627: LIST
27628: LIST
27629: PPUSH
27630: CALL_OW 69
27634: ST_TO_ADDR
// if not tmp then
27635: LD_VAR 0 2
27639: NOT
27640: IFFALSE 27644
// continue ;
27642: GO 27439
// HackLink ( i , tmp ) ;
27644: LD_VAR 0 1
27648: PPUSH
27649: LD_VAR 0 2
27653: PPUSH
27654: CALL 27801 0 2
// end ;
27658: GO 27439
27660: POP
27661: POP
// end ;
27662: PPOPN 2
27664: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
27665: LD_INT 0
27667: PPUSH
27668: PPUSH
27669: PPUSH
// if not hack in hackTanks then
27670: LD_VAR 0 1
27674: PUSH
27675: LD_EXP 95
27679: IN
27680: NOT
27681: IFFALSE 27685
// exit ;
27683: GO 27796
// index := GetElementIndex ( hackTanks , hack ) ;
27685: LD_ADDR_VAR 0 4
27689: PUSH
27690: LD_EXP 95
27694: PPUSH
27695: LD_VAR 0 1
27699: PPUSH
27700: CALL 35463 0 2
27704: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
27705: LD_EXP 96
27709: PUSH
27710: LD_VAR 0 4
27714: ARRAY
27715: IFFALSE 27796
// begin for i in hackTanksCaptured [ index ] do
27717: LD_ADDR_VAR 0 3
27721: PUSH
27722: LD_EXP 96
27726: PUSH
27727: LD_VAR 0 4
27731: ARRAY
27732: PUSH
27733: FOR_IN
27734: IFFALSE 27760
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
27736: LD_VAR 0 3
27740: PUSH
27741: LD_INT 1
27743: ARRAY
27744: PPUSH
27745: LD_VAR 0 3
27749: PUSH
27750: LD_INT 2
27752: ARRAY
27753: PPUSH
27754: CALL_OW 235
27758: GO 27733
27760: POP
27761: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
27762: LD_ADDR_EXP 96
27766: PUSH
27767: LD_EXP 96
27771: PPUSH
27772: LD_VAR 0 4
27776: PPUSH
27777: EMPTY
27778: PPUSH
27779: CALL_OW 1
27783: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
27784: LD_VAR 0 1
27788: PPUSH
27789: LD_INT 0
27791: PPUSH
27792: CALL_OW 505
// end ; end ;
27796: LD_VAR 0 2
27800: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
27801: LD_INT 0
27803: PPUSH
27804: PPUSH
27805: PPUSH
// if not hack in hackTanks or not vehicles then
27806: LD_VAR 0 1
27810: PUSH
27811: LD_EXP 95
27815: IN
27816: NOT
27817: IFTRUE 27826
27819: PUSH
27820: LD_VAR 0 2
27824: NOT
27825: OR
27826: IFFALSE 27830
// exit ;
27828: GO 28105
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
27830: LD_ADDR_VAR 0 2
27834: PUSH
27835: LD_VAR 0 1
27839: PPUSH
27840: LD_VAR 0 2
27844: PPUSH
27845: LD_INT 1
27847: PPUSH
27848: LD_INT 1
27850: PPUSH
27851: CALL 36115 0 4
27855: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
27856: LD_ADDR_VAR 0 5
27860: PUSH
27861: LD_EXP 95
27865: PPUSH
27866: LD_VAR 0 1
27870: PPUSH
27871: CALL 35463 0 2
27875: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
27876: LD_EXP 96
27880: PUSH
27881: LD_VAR 0 5
27885: ARRAY
27886: PUSH
27887: LD_EXP 97
27891: LESS
27892: IFFALSE 28081
// begin for i := 1 to vehicles do
27894: LD_ADDR_VAR 0 4
27898: PUSH
27899: DOUBLE
27900: LD_INT 1
27902: DEC
27903: ST_TO_ADDR
27904: LD_VAR 0 2
27908: PUSH
27909: FOR_TO
27910: IFFALSE 28079
// begin if hackTanksCaptured [ index ] = hackLimit then
27912: LD_EXP 96
27916: PUSH
27917: LD_VAR 0 5
27921: ARRAY
27922: PUSH
27923: LD_EXP 97
27927: EQUAL
27928: IFFALSE 27932
// break ;
27930: GO 28079
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
27932: LD_ADDR_EXP 99
27936: PUSH
27937: LD_EXP 99
27941: PPUSH
27942: LD_VAR 0 5
27946: PPUSH
27947: LD_EXP 99
27951: PUSH
27952: LD_VAR 0 5
27956: ARRAY
27957: PUSH
27958: LD_INT 1
27960: PLUS
27961: PPUSH
27962: CALL_OW 1
27966: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
27967: LD_ADDR_EXP 96
27971: PUSH
27972: LD_EXP 96
27976: PPUSH
27977: LD_VAR 0 5
27981: PUSH
27982: LD_EXP 96
27986: PUSH
27987: LD_VAR 0 5
27991: ARRAY
27992: PUSH
27993: LD_INT 1
27995: PLUS
27996: PUSH
27997: EMPTY
27998: LIST
27999: LIST
28000: PPUSH
28001: LD_VAR 0 2
28005: PUSH
28006: LD_VAR 0 4
28010: ARRAY
28011: PUSH
28012: LD_VAR 0 2
28016: PUSH
28017: LD_VAR 0 4
28021: ARRAY
28022: PPUSH
28023: CALL_OW 255
28027: PUSH
28028: EMPTY
28029: LIST
28030: LIST
28031: PPUSH
28032: CALL 35680 0 3
28036: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
28037: LD_VAR 0 2
28041: PUSH
28042: LD_VAR 0 4
28046: ARRAY
28047: PPUSH
28048: LD_VAR 0 1
28052: PPUSH
28053: CALL_OW 255
28057: PPUSH
28058: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
28062: LD_VAR 0 2
28066: PUSH
28067: LD_VAR 0 4
28071: ARRAY
28072: PPUSH
28073: CALL_OW 141
// end ;
28077: GO 27909
28079: POP
28080: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
28081: LD_VAR 0 1
28085: PPUSH
28086: LD_EXP 96
28090: PUSH
28091: LD_VAR 0 5
28095: ARRAY
28096: PUSH
28097: LD_INT 0
28099: PLUS
28100: PPUSH
28101: CALL_OW 505
// end ;
28105: LD_VAR 0 3
28109: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
28110: LD_INT 0
28112: PPUSH
28113: PPUSH
28114: PPUSH
28115: PPUSH
// if not hack in hackTanks then
28116: LD_VAR 0 1
28120: PUSH
28121: LD_EXP 95
28125: IN
28126: NOT
28127: IFFALSE 28131
// exit ;
28129: GO 28375
// index := GetElementIndex ( hackTanks , hack ) ;
28131: LD_ADDR_VAR 0 4
28135: PUSH
28136: LD_EXP 95
28140: PPUSH
28141: LD_VAR 0 1
28145: PPUSH
28146: CALL 35463 0 2
28150: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
28151: LD_ADDR_VAR 0 3
28155: PUSH
28156: DOUBLE
28157: LD_EXP 96
28161: PUSH
28162: LD_VAR 0 4
28166: ARRAY
28167: INC
28168: ST_TO_ADDR
28169: LD_INT 1
28171: PUSH
28172: FOR_DOWNTO
28173: IFFALSE 28349
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
28175: LD_ADDR_VAR 0 5
28179: PUSH
28180: LD_EXP 96
28184: PUSH
28185: LD_VAR 0 4
28189: ARRAY
28190: PUSH
28191: LD_VAR 0 3
28195: ARRAY
28196: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
28197: LD_VAR 0 5
28201: PUSH
28202: LD_INT 1
28204: ARRAY
28205: PPUSH
28206: CALL_OW 302
28210: NOT
28211: IFTRUE 28239
28213: PUSH
28214: LD_VAR 0 5
28218: PUSH
28219: LD_INT 1
28221: ARRAY
28222: PPUSH
28223: CALL_OW 255
28227: PUSH
28228: LD_VAR 0 1
28232: PPUSH
28233: CALL_OW 255
28237: NONEQUAL
28238: OR
28239: IFFALSE 28347
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
28241: LD_VAR 0 5
28245: PUSH
28246: LD_INT 1
28248: ARRAY
28249: PPUSH
28250: CALL_OW 305
28254: IFFALSE 28282
28256: PUSH
28257: LD_VAR 0 5
28261: PUSH
28262: LD_INT 1
28264: ARRAY
28265: PPUSH
28266: CALL_OW 255
28270: PUSH
28271: LD_VAR 0 1
28275: PPUSH
28276: CALL_OW 255
28280: EQUAL
28281: AND
28282: IFFALSE 28306
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
28284: LD_VAR 0 5
28288: PUSH
28289: LD_INT 1
28291: ARRAY
28292: PPUSH
28293: LD_VAR 0 5
28297: PUSH
28298: LD_INT 2
28300: ARRAY
28301: PPUSH
28302: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
28306: LD_ADDR_EXP 96
28310: PUSH
28311: LD_EXP 96
28315: PPUSH
28316: LD_VAR 0 4
28320: PPUSH
28321: LD_EXP 96
28325: PUSH
28326: LD_VAR 0 4
28330: ARRAY
28331: PPUSH
28332: LD_VAR 0 3
28336: PPUSH
28337: CALL_OW 3
28341: PPUSH
28342: CALL_OW 1
28346: ST_TO_ADDR
// end ; end ;
28347: GO 28172
28349: POP
28350: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
28351: LD_VAR 0 1
28355: PPUSH
28356: LD_EXP 96
28360: PUSH
28361: LD_VAR 0 4
28365: ARRAY
28366: PUSH
28367: LD_INT 0
28369: PLUS
28370: PPUSH
28371: CALL_OW 505
// end ;
28375: LD_VAR 0 2
28379: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
28380: LD_INT 0
28382: PPUSH
28383: PPUSH
28384: PPUSH
28385: PPUSH
// if not hack in hackTanks then
28386: LD_VAR 0 1
28390: PUSH
28391: LD_EXP 95
28395: IN
28396: NOT
28397: IFFALSE 28401
// exit ;
28399: GO 28486
// index := GetElementIndex ( hackTanks , hack ) ;
28401: LD_ADDR_VAR 0 5
28405: PUSH
28406: LD_EXP 95
28410: PPUSH
28411: LD_VAR 0 1
28415: PPUSH
28416: CALL 35463 0 2
28420: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
28421: LD_ADDR_VAR 0 4
28425: PUSH
28426: DOUBLE
28427: LD_INT 1
28429: DEC
28430: ST_TO_ADDR
28431: LD_EXP 96
28435: PUSH
28436: LD_VAR 0 5
28440: ARRAY
28441: PUSH
28442: FOR_TO
28443: IFFALSE 28484
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
28445: LD_EXP 96
28449: PUSH
28450: LD_VAR 0 5
28454: ARRAY
28455: PUSH
28456: LD_VAR 0 4
28460: ARRAY
28461: PUSH
28462: LD_INT 1
28464: ARRAY
28465: PUSH
28466: LD_VAR 0 2
28470: EQUAL
28471: IFFALSE 28482
// KillUnit ( vehicle ) ;
28473: LD_VAR 0 2
28477: PPUSH
28478: CALL_OW 66
28482: GO 28442
28484: POP
28485: POP
// end ;
28486: LD_VAR 0 3
28490: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
28491: LD_EXP 100
28495: NOT
28496: IFFALSE 28531
28498: GO 28500
28500: DISABLE
// begin initMiner := true ;
28501: LD_ADDR_EXP 100
28505: PUSH
28506: LD_INT 1
28508: ST_TO_ADDR
// minersList := [ ] ;
28509: LD_ADDR_EXP 101
28513: PUSH
28514: EMPTY
28515: ST_TO_ADDR
// minerMinesList := [ ] ;
28516: LD_ADDR_EXP 102
28520: PUSH
28521: EMPTY
28522: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
28523: LD_ADDR_EXP 103
28527: PUSH
28528: LD_INT 5
28530: ST_TO_ADDR
// end ;
28531: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
28532: LD_EXP 100
28536: IFFALSE 28554
28538: PUSH
28539: LD_INT 34
28541: PUSH
28542: LD_INT 81
28544: PUSH
28545: EMPTY
28546: LIST
28547: LIST
28548: PPUSH
28549: CALL_OW 69
28553: AND
28554: IFFALSE 29017
28556: GO 28558
28558: DISABLE
28559: LD_INT 0
28561: PPUSH
28562: PPUSH
28563: PPUSH
28564: PPUSH
// begin enable ;
28565: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
28566: LD_ADDR_VAR 0 1
28570: PUSH
28571: LD_INT 34
28573: PUSH
28574: LD_INT 81
28576: PUSH
28577: EMPTY
28578: LIST
28579: LIST
28580: PPUSH
28581: CALL_OW 69
28585: PUSH
28586: FOR_IN
28587: IFFALSE 28659
// begin if not i in minersList then
28589: LD_VAR 0 1
28593: PUSH
28594: LD_EXP 101
28598: IN
28599: NOT
28600: IFFALSE 28657
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
28602: LD_ADDR_EXP 101
28606: PUSH
28607: LD_EXP 101
28611: PPUSH
28612: LD_EXP 101
28616: PUSH
28617: LD_INT 1
28619: PLUS
28620: PPUSH
28621: LD_VAR 0 1
28625: PPUSH
28626: CALL_OW 1
28630: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
28631: LD_ADDR_EXP 102
28635: PUSH
28636: LD_EXP 102
28640: PPUSH
28641: LD_EXP 102
28645: PUSH
28646: LD_INT 1
28648: PLUS
28649: PPUSH
28650: EMPTY
28651: PPUSH
28652: CALL_OW 1
28656: ST_TO_ADDR
// end end ;
28657: GO 28586
28659: POP
28660: POP
// for i := minerMinesList downto 1 do
28661: LD_ADDR_VAR 0 1
28665: PUSH
28666: DOUBLE
28667: LD_EXP 102
28671: INC
28672: ST_TO_ADDR
28673: LD_INT 1
28675: PUSH
28676: FOR_DOWNTO
28677: IFFALSE 29015
// begin if IsLive ( minersList [ i ] ) then
28679: LD_EXP 101
28683: PUSH
28684: LD_VAR 0 1
28688: ARRAY
28689: PPUSH
28690: CALL_OW 300
28694: IFFALSE 28722
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
28696: LD_EXP 101
28700: PUSH
28701: LD_VAR 0 1
28705: ARRAY
28706: PPUSH
28707: LD_EXP 102
28711: PUSH
28712: LD_VAR 0 1
28716: ARRAY
28717: PPUSH
28718: CALL_OW 505
// if not minerMinesList [ i ] then
28722: LD_EXP 102
28726: PUSH
28727: LD_VAR 0 1
28731: ARRAY
28732: NOT
28733: IFFALSE 28737
// continue ;
28735: GO 28676
// for j := minerMinesList [ i ] downto 1 do
28737: LD_ADDR_VAR 0 2
28741: PUSH
28742: DOUBLE
28743: LD_EXP 102
28747: PUSH
28748: LD_VAR 0 1
28752: ARRAY
28753: INC
28754: ST_TO_ADDR
28755: LD_INT 1
28757: PUSH
28758: FOR_DOWNTO
28759: IFFALSE 29011
// begin side := GetSide ( minersList [ i ] ) ;
28761: LD_ADDR_VAR 0 3
28765: PUSH
28766: LD_EXP 101
28770: PUSH
28771: LD_VAR 0 1
28775: ARRAY
28776: PPUSH
28777: CALL_OW 255
28781: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
28782: LD_ADDR_VAR 0 4
28786: PUSH
28787: LD_EXP 102
28791: PUSH
28792: LD_VAR 0 1
28796: ARRAY
28797: PUSH
28798: LD_VAR 0 2
28802: ARRAY
28803: PUSH
28804: LD_INT 1
28806: ARRAY
28807: PPUSH
28808: LD_EXP 102
28812: PUSH
28813: LD_VAR 0 1
28817: ARRAY
28818: PUSH
28819: LD_VAR 0 2
28823: ARRAY
28824: PUSH
28825: LD_INT 2
28827: ARRAY
28828: PPUSH
28829: CALL_OW 428
28833: ST_TO_ADDR
// if not tmp then
28834: LD_VAR 0 4
28838: NOT
28839: IFFALSE 28843
// continue ;
28841: GO 28758
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
28843: LD_VAR 0 4
28847: PUSH
28848: LD_INT 81
28850: PUSH
28851: LD_VAR 0 3
28855: PUSH
28856: EMPTY
28857: LIST
28858: LIST
28859: PPUSH
28860: CALL_OW 69
28864: IN
28865: IFFALSE 28915
28867: PUSH
28868: LD_EXP 102
28872: PUSH
28873: LD_VAR 0 1
28877: ARRAY
28878: PUSH
28879: LD_VAR 0 2
28883: ARRAY
28884: PUSH
28885: LD_INT 1
28887: ARRAY
28888: PPUSH
28889: LD_EXP 102
28893: PUSH
28894: LD_VAR 0 1
28898: ARRAY
28899: PUSH
28900: LD_VAR 0 2
28904: ARRAY
28905: PUSH
28906: LD_INT 2
28908: ARRAY
28909: PPUSH
28910: CALL_OW 458
28914: AND
28915: IFFALSE 29009
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
28917: LD_EXP 102
28921: PUSH
28922: LD_VAR 0 1
28926: ARRAY
28927: PUSH
28928: LD_VAR 0 2
28932: ARRAY
28933: PUSH
28934: LD_INT 1
28936: ARRAY
28937: PPUSH
28938: LD_EXP 102
28942: PUSH
28943: LD_VAR 0 1
28947: ARRAY
28948: PUSH
28949: LD_VAR 0 2
28953: ARRAY
28954: PUSH
28955: LD_INT 2
28957: ARRAY
28958: PPUSH
28959: LD_VAR 0 3
28963: PPUSH
28964: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
28968: LD_ADDR_EXP 102
28972: PUSH
28973: LD_EXP 102
28977: PPUSH
28978: LD_VAR 0 1
28982: PPUSH
28983: LD_EXP 102
28987: PUSH
28988: LD_VAR 0 1
28992: ARRAY
28993: PPUSH
28994: LD_VAR 0 2
28998: PPUSH
28999: CALL_OW 3
29003: PPUSH
29004: CALL_OW 1
29008: ST_TO_ADDR
// end ; end ;
29009: GO 28758
29011: POP
29012: POP
// end ;
29013: GO 28676
29015: POP
29016: POP
// end ;
29017: PPOPN 4
29019: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
29020: LD_INT 0
29022: PPUSH
29023: PPUSH
// result := false ;
29024: LD_ADDR_VAR 0 4
29028: PUSH
29029: LD_INT 0
29031: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
29032: LD_VAR 0 1
29036: PPUSH
29037: CALL_OW 264
29041: PUSH
29042: LD_INT 81
29044: EQUAL
29045: NOT
29046: IFFALSE 29050
// exit ;
29048: GO 29294
// index := GetElementIndex ( minersList , unit ) ;
29050: LD_ADDR_VAR 0 5
29054: PUSH
29055: LD_EXP 101
29059: PPUSH
29060: LD_VAR 0 1
29064: PPUSH
29065: CALL 35463 0 2
29069: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
29070: LD_EXP 102
29074: PUSH
29075: LD_VAR 0 5
29079: ARRAY
29080: PUSH
29081: LD_EXP 103
29085: GREATEREQUAL
29086: IFFALSE 29090
// exit ;
29088: GO 29294
// ComMoveXY ( unit , x , y ) ;
29090: LD_VAR 0 1
29094: PPUSH
29095: LD_VAR 0 2
29099: PPUSH
29100: LD_VAR 0 3
29104: PPUSH
29105: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
29109: LD_INT 35
29111: PPUSH
29112: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
29116: LD_VAR 0 1
29120: PPUSH
29121: LD_VAR 0 2
29125: PPUSH
29126: LD_VAR 0 3
29130: PPUSH
29131: CALL 67509 0 3
29135: NOT
29136: IFFALSE 29149
29138: PUSH
29139: LD_VAR 0 1
29143: PPUSH
29144: CALL_OW 314
29148: AND
29149: IFFALSE 29153
// exit ;
29151: GO 29294
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
29153: LD_VAR 0 2
29157: PPUSH
29158: LD_VAR 0 3
29162: PPUSH
29163: CALL_OW 428
29167: PUSH
29168: LD_VAR 0 1
29172: EQUAL
29173: IFFALSE 29187
29175: PUSH
29176: LD_VAR 0 1
29180: PPUSH
29181: CALL_OW 314
29185: NOT
29186: AND
29187: IFFALSE 29109
// PlaySoundXY ( x , y , PlantMine ) ;
29189: LD_VAR 0 2
29193: PPUSH
29194: LD_VAR 0 3
29198: PPUSH
29199: LD_STRING PlantMine
29201: PPUSH
29202: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
29206: LD_VAR 0 2
29210: PPUSH
29211: LD_VAR 0 3
29215: PPUSH
29216: LD_VAR 0 1
29220: PPUSH
29221: CALL_OW 255
29225: PPUSH
29226: LD_INT 0
29228: PPUSH
29229: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
29233: LD_ADDR_EXP 102
29237: PUSH
29238: LD_EXP 102
29242: PPUSH
29243: LD_VAR 0 5
29247: PUSH
29248: LD_EXP 102
29252: PUSH
29253: LD_VAR 0 5
29257: ARRAY
29258: PUSH
29259: LD_INT 1
29261: PLUS
29262: PUSH
29263: EMPTY
29264: LIST
29265: LIST
29266: PPUSH
29267: LD_VAR 0 2
29271: PUSH
29272: LD_VAR 0 3
29276: PUSH
29277: EMPTY
29278: LIST
29279: LIST
29280: PPUSH
29281: CALL 35680 0 3
29285: ST_TO_ADDR
// result := true ;
29286: LD_ADDR_VAR 0 4
29290: PUSH
29291: LD_INT 1
29293: ST_TO_ADDR
// end ;
29294: LD_VAR 0 4
29298: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
29299: LD_INT 0
29301: PPUSH
29302: PPUSH
29303: PPUSH
// if not unit in minersList then
29304: LD_VAR 0 1
29308: PUSH
29309: LD_EXP 101
29313: IN
29314: NOT
29315: IFFALSE 29319
// exit ;
29317: GO 29713
// index := GetElementIndex ( minersList , unit ) ;
29319: LD_ADDR_VAR 0 6
29323: PUSH
29324: LD_EXP 101
29328: PPUSH
29329: LD_VAR 0 1
29333: PPUSH
29334: CALL 35463 0 2
29338: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
29339: LD_ADDR_VAR 0 5
29343: PUSH
29344: DOUBLE
29345: LD_EXP 102
29349: PUSH
29350: LD_VAR 0 6
29354: ARRAY
29355: INC
29356: ST_TO_ADDR
29357: LD_INT 1
29359: PUSH
29360: FOR_DOWNTO
29361: IFFALSE 29524
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
29363: LD_EXP 102
29367: PUSH
29368: LD_VAR 0 6
29372: ARRAY
29373: PUSH
29374: LD_VAR 0 5
29378: ARRAY
29379: PUSH
29380: LD_INT 1
29382: ARRAY
29383: PUSH
29384: LD_VAR 0 2
29388: EQUAL
29389: IFFALSE 29419
29391: PUSH
29392: LD_EXP 102
29396: PUSH
29397: LD_VAR 0 6
29401: ARRAY
29402: PUSH
29403: LD_VAR 0 5
29407: ARRAY
29408: PUSH
29409: LD_INT 2
29411: ARRAY
29412: PUSH
29413: LD_VAR 0 3
29417: EQUAL
29418: AND
29419: IFFALSE 29522
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
29421: LD_EXP 102
29425: PUSH
29426: LD_VAR 0 6
29430: ARRAY
29431: PUSH
29432: LD_VAR 0 5
29436: ARRAY
29437: PUSH
29438: LD_INT 1
29440: ARRAY
29441: PPUSH
29442: LD_EXP 102
29446: PUSH
29447: LD_VAR 0 6
29451: ARRAY
29452: PUSH
29453: LD_VAR 0 5
29457: ARRAY
29458: PUSH
29459: LD_INT 2
29461: ARRAY
29462: PPUSH
29463: LD_VAR 0 1
29467: PPUSH
29468: CALL_OW 255
29472: PPUSH
29473: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
29477: LD_ADDR_EXP 102
29481: PUSH
29482: LD_EXP 102
29486: PPUSH
29487: LD_VAR 0 6
29491: PPUSH
29492: LD_EXP 102
29496: PUSH
29497: LD_VAR 0 6
29501: ARRAY
29502: PPUSH
29503: LD_VAR 0 5
29507: PPUSH
29508: CALL_OW 3
29512: PPUSH
29513: CALL_OW 1
29517: ST_TO_ADDR
// exit ;
29518: POP
29519: POP
29520: GO 29713
// end ; end ;
29522: GO 29360
29524: POP
29525: POP
// for i := minerMinesList [ index ] downto 1 do
29526: LD_ADDR_VAR 0 5
29530: PUSH
29531: DOUBLE
29532: LD_EXP 102
29536: PUSH
29537: LD_VAR 0 6
29541: ARRAY
29542: INC
29543: ST_TO_ADDR
29544: LD_INT 1
29546: PUSH
29547: FOR_DOWNTO
29548: IFFALSE 29711
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
29550: LD_EXP 102
29554: PUSH
29555: LD_VAR 0 6
29559: ARRAY
29560: PUSH
29561: LD_VAR 0 5
29565: ARRAY
29566: PUSH
29567: LD_INT 1
29569: ARRAY
29570: PPUSH
29571: LD_EXP 102
29575: PUSH
29576: LD_VAR 0 6
29580: ARRAY
29581: PUSH
29582: LD_VAR 0 5
29586: ARRAY
29587: PUSH
29588: LD_INT 2
29590: ARRAY
29591: PPUSH
29592: LD_VAR 0 2
29596: PPUSH
29597: LD_VAR 0 3
29601: PPUSH
29602: CALL_OW 298
29606: PUSH
29607: LD_INT 6
29609: LESS
29610: IFFALSE 29709
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
29612: LD_EXP 102
29616: PUSH
29617: LD_VAR 0 6
29621: ARRAY
29622: PUSH
29623: LD_VAR 0 5
29627: ARRAY
29628: PUSH
29629: LD_INT 1
29631: ARRAY
29632: PPUSH
29633: LD_EXP 102
29637: PUSH
29638: LD_VAR 0 6
29642: ARRAY
29643: PUSH
29644: LD_VAR 0 5
29648: ARRAY
29649: PUSH
29650: LD_INT 2
29652: ARRAY
29653: PPUSH
29654: LD_VAR 0 1
29658: PPUSH
29659: CALL_OW 255
29663: PPUSH
29664: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
29668: LD_ADDR_EXP 102
29672: PUSH
29673: LD_EXP 102
29677: PPUSH
29678: LD_VAR 0 6
29682: PPUSH
29683: LD_EXP 102
29687: PUSH
29688: LD_VAR 0 6
29692: ARRAY
29693: PPUSH
29694: LD_VAR 0 5
29698: PPUSH
29699: CALL_OW 3
29703: PPUSH
29704: CALL_OW 1
29708: ST_TO_ADDR
// end ; end ;
29709: GO 29547
29711: POP
29712: POP
// end ;
29713: LD_VAR 0 4
29717: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
29718: LD_INT 0
29720: PPUSH
29721: PPUSH
29722: PPUSH
29723: PPUSH
29724: PPUSH
29725: PPUSH
29726: PPUSH
29727: PPUSH
29728: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
29729: LD_VAR 0 1
29733: PPUSH
29734: CALL_OW 264
29738: PUSH
29739: LD_INT 81
29741: EQUAL
29742: NOT
29743: IFTRUE 29758
29745: PUSH
29746: LD_VAR 0 1
29750: PUSH
29751: LD_EXP 101
29755: IN
29756: NOT
29757: OR
29758: IFFALSE 29762
// exit ;
29760: GO 30088
// index := GetElementIndex ( minersList , unit ) ;
29762: LD_ADDR_VAR 0 6
29766: PUSH
29767: LD_EXP 101
29771: PPUSH
29772: LD_VAR 0 1
29776: PPUSH
29777: CALL 35463 0 2
29781: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
29782: LD_ADDR_VAR 0 8
29786: PUSH
29787: LD_EXP 103
29791: PUSH
29792: LD_EXP 102
29796: PUSH
29797: LD_VAR 0 6
29801: ARRAY
29802: MINUS
29803: ST_TO_ADDR
// if not minesFreeAmount then
29804: LD_VAR 0 8
29808: NOT
29809: IFFALSE 29813
// exit ;
29811: GO 30088
// tmp := [ ] ;
29813: LD_ADDR_VAR 0 7
29817: PUSH
29818: EMPTY
29819: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
29820: LD_ADDR_VAR 0 5
29824: PUSH
29825: DOUBLE
29826: LD_INT 1
29828: DEC
29829: ST_TO_ADDR
29830: LD_VAR 0 8
29834: PUSH
29835: FOR_TO
29836: IFFALSE 30035
// begin _d := rand ( 0 , 5 ) ;
29838: LD_ADDR_VAR 0 11
29842: PUSH
29843: LD_INT 0
29845: PPUSH
29846: LD_INT 5
29848: PPUSH
29849: CALL_OW 12
29853: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
29854: LD_ADDR_VAR 0 12
29858: PUSH
29859: LD_INT 2
29861: PPUSH
29862: LD_INT 6
29864: PPUSH
29865: CALL_OW 12
29869: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
29870: LD_ADDR_VAR 0 9
29874: PUSH
29875: LD_VAR 0 2
29879: PPUSH
29880: LD_VAR 0 11
29884: PPUSH
29885: LD_VAR 0 12
29889: PPUSH
29890: CALL_OW 272
29894: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
29895: LD_ADDR_VAR 0 10
29899: PUSH
29900: LD_VAR 0 3
29904: PPUSH
29905: LD_VAR 0 11
29909: PPUSH
29910: LD_VAR 0 12
29914: PPUSH
29915: CALL_OW 273
29919: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
29920: LD_VAR 0 9
29924: PPUSH
29925: LD_VAR 0 10
29929: PPUSH
29930: CALL_OW 488
29934: IFFALSE 29958
29936: PUSH
29937: LD_VAR 0 9
29941: PUSH
29942: LD_VAR 0 10
29946: PUSH
29947: EMPTY
29948: LIST
29949: LIST
29950: PUSH
29951: LD_VAR 0 7
29955: IN
29956: NOT
29957: AND
29958: IFFALSE 29977
29960: PUSH
29961: LD_VAR 0 9
29965: PPUSH
29966: LD_VAR 0 10
29970: PPUSH
29971: CALL_OW 458
29975: NOT
29976: AND
29977: IFFALSE 30019
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
29979: LD_ADDR_VAR 0 7
29983: PUSH
29984: LD_VAR 0 7
29988: PPUSH
29989: LD_VAR 0 7
29993: PUSH
29994: LD_INT 1
29996: PLUS
29997: PPUSH
29998: LD_VAR 0 9
30002: PUSH
30003: LD_VAR 0 10
30007: PUSH
30008: EMPTY
30009: LIST
30010: LIST
30011: PPUSH
30012: CALL_OW 1
30016: ST_TO_ADDR
30017: GO 30033
// i := i - 1 ;
30019: LD_ADDR_VAR 0 5
30023: PUSH
30024: LD_VAR 0 5
30028: PUSH
30029: LD_INT 1
30031: MINUS
30032: ST_TO_ADDR
// end ;
30033: GO 29835
30035: POP
30036: POP
// for i in tmp do
30037: LD_ADDR_VAR 0 5
30041: PUSH
30042: LD_VAR 0 7
30046: PUSH
30047: FOR_IN
30048: IFFALSE 30086
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
30050: LD_VAR 0 1
30054: PPUSH
30055: LD_VAR 0 5
30059: PUSH
30060: LD_INT 1
30062: ARRAY
30063: PPUSH
30064: LD_VAR 0 5
30068: PUSH
30069: LD_INT 2
30071: ARRAY
30072: PPUSH
30073: CALL 29020 0 3
30077: NOT
30078: IFFALSE 30084
// exit ;
30080: POP
30081: POP
30082: GO 30088
30084: GO 30047
30086: POP
30087: POP
// end ;
30088: LD_VAR 0 4
30092: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
30093: LD_INT 0
30095: PPUSH
30096: PPUSH
30097: PPUSH
30098: PPUSH
30099: PPUSH
30100: PPUSH
30101: PPUSH
30102: PPUSH
30103: PPUSH
// if GetClass ( unit ) <> class_sniper then
30104: LD_VAR 0 1
30108: PPUSH
30109: CALL_OW 257
30113: PUSH
30114: LD_INT 5
30116: NONEQUAL
30117: IFFALSE 30121
// exit ;
30119: GO 30591
// dist := 8 ;
30121: LD_ADDR_VAR 0 5
30125: PUSH
30126: LD_INT 8
30128: ST_TO_ADDR
// viewRange := 12 ;
30129: LD_ADDR_VAR 0 8
30133: PUSH
30134: LD_INT 12
30136: ST_TO_ADDR
// side := GetSide ( unit ) ;
30137: LD_ADDR_VAR 0 6
30141: PUSH
30142: LD_VAR 0 1
30146: PPUSH
30147: CALL_OW 255
30151: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
30152: LD_INT 61
30154: PPUSH
30155: LD_VAR 0 6
30159: PPUSH
30160: CALL_OW 321
30164: PUSH
30165: LD_INT 2
30167: EQUAL
30168: IFFALSE 30178
// viewRange := 16 ;
30170: LD_ADDR_VAR 0 8
30174: PUSH
30175: LD_INT 16
30177: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
30178: LD_VAR 0 1
30182: PPUSH
30183: LD_VAR 0 2
30187: PPUSH
30188: LD_VAR 0 3
30192: PPUSH
30193: CALL_OW 297
30197: PUSH
30198: LD_VAR 0 5
30202: GREATER
30203: IFFALSE 30282
// begin ComMoveXY ( unit , x , y ) ;
30205: LD_VAR 0 1
30209: PPUSH
30210: LD_VAR 0 2
30214: PPUSH
30215: LD_VAR 0 3
30219: PPUSH
30220: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
30224: LD_INT 35
30226: PPUSH
30227: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
30231: LD_VAR 0 1
30235: PPUSH
30236: LD_VAR 0 2
30240: PPUSH
30241: LD_VAR 0 3
30245: PPUSH
30246: CALL 67509 0 3
30250: NOT
30251: IFFALSE 30255
// exit ;
30253: GO 30591
// until GetDistUnitXY ( unit , x , y ) < dist ;
30255: LD_VAR 0 1
30259: PPUSH
30260: LD_VAR 0 2
30264: PPUSH
30265: LD_VAR 0 3
30269: PPUSH
30270: CALL_OW 297
30274: PUSH
30275: LD_VAR 0 5
30279: LESS
30280: IFFALSE 30224
// end ; ComTurnXY ( unit , x , y ) ;
30282: LD_VAR 0 1
30286: PPUSH
30287: LD_VAR 0 2
30291: PPUSH
30292: LD_VAR 0 3
30296: PPUSH
30297: CALL_OW 118
// repeat if Multiplayer then
30301: LD_OWVAR 4
30305: IFFALSE 30316
// wait ( 35 ) else
30307: LD_INT 35
30309: PPUSH
30310: CALL_OW 67
30314: GO 30323
// wait ( 5 ) ;
30316: LD_INT 5
30318: PPUSH
30319: CALL_OW 67
// _d := GetDir ( unit ) ;
30323: LD_ADDR_VAR 0 11
30327: PUSH
30328: LD_VAR 0 1
30332: PPUSH
30333: CALL_OW 254
30337: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
30338: LD_ADDR_VAR 0 7
30342: PUSH
30343: LD_VAR 0 1
30347: PPUSH
30348: CALL_OW 250
30352: PPUSH
30353: LD_VAR 0 1
30357: PPUSH
30358: CALL_OW 251
30362: PPUSH
30363: LD_VAR 0 2
30367: PPUSH
30368: LD_VAR 0 3
30372: PPUSH
30373: CALL 70145 0 4
30377: ST_TO_ADDR
// until dir = _d ;
30378: LD_VAR 0 7
30382: PUSH
30383: LD_VAR 0 11
30387: EQUAL
30388: IFFALSE 30301
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
30390: LD_ADDR_VAR 0 9
30394: PUSH
30395: LD_VAR 0 1
30399: PPUSH
30400: CALL_OW 250
30404: PPUSH
30405: LD_VAR 0 7
30409: PPUSH
30410: LD_VAR 0 5
30414: PPUSH
30415: CALL_OW 272
30419: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
30420: LD_ADDR_VAR 0 10
30424: PUSH
30425: LD_VAR 0 1
30429: PPUSH
30430: CALL_OW 251
30434: PPUSH
30435: LD_VAR 0 7
30439: PPUSH
30440: LD_VAR 0 5
30444: PPUSH
30445: CALL_OW 273
30449: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
30450: LD_VAR 0 9
30454: PPUSH
30455: LD_VAR 0 10
30459: PPUSH
30460: CALL_OW 488
30464: NOT
30465: IFFALSE 30469
// exit ;
30467: GO 30591
// ComAnimCustom ( unit , 1 ) ;
30469: LD_VAR 0 1
30473: PPUSH
30474: LD_INT 1
30476: PPUSH
30477: CALL_OW 592
// p := 0 ;
30481: LD_ADDR_VAR 0 12
30485: PUSH
30486: LD_INT 0
30488: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
30489: LD_VAR 0 9
30493: PPUSH
30494: LD_VAR 0 10
30498: PPUSH
30499: LD_VAR 0 6
30503: PPUSH
30504: LD_VAR 0 8
30508: PPUSH
30509: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
30513: LD_INT 35
30515: PPUSH
30516: CALL_OW 67
// p := Inc ( p ) ;
30520: LD_ADDR_VAR 0 12
30524: PUSH
30525: LD_VAR 0 12
30529: PPUSH
30530: CALL 70101 0 1
30534: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
30535: LD_VAR 0 12
30539: PUSH
30540: LD_INT 3
30542: EQUAL
30543: IFTRUE 30557
30545: PUSH
30546: LD_VAR 0 1
30550: PPUSH
30551: CALL_OW 302
30555: NOT
30556: OR
30557: IFTRUE 30570
30559: PUSH
30560: LD_VAR 0 1
30564: PPUSH
30565: CALL_OW 301
30569: OR
30570: IFFALSE 30513
// RemoveSeeing ( _x , _y , side ) ;
30572: LD_VAR 0 9
30576: PPUSH
30577: LD_VAR 0 10
30581: PPUSH
30582: LD_VAR 0 6
30586: PPUSH
30587: CALL_OW 331
// end ; end_of_file
30591: LD_VAR 0 4
30595: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
30596: LD_INT 0
30598: PPUSH
30599: PPUSH
// if exist_mode then
30600: LD_VAR 0 2
30604: IFFALSE 30650
// begin unit := CreateCharacter ( prefix & ident ) ;
30606: LD_ADDR_VAR 0 5
30610: PUSH
30611: LD_VAR 0 3
30615: PUSH
30616: LD_VAR 0 1
30620: STR
30621: PPUSH
30622: CALL_OW 34
30626: ST_TO_ADDR
// if unit then
30627: LD_VAR 0 5
30631: IFFALSE 30648
// DeleteCharacters ( prefix & ident ) ;
30633: LD_VAR 0 3
30637: PUSH
30638: LD_VAR 0 1
30642: STR
30643: PPUSH
30644: CALL_OW 40
// end else
30648: GO 30665
// unit := NewCharacter ( ident ) ;
30650: LD_ADDR_VAR 0 5
30654: PUSH
30655: LD_VAR 0 1
30659: PPUSH
30660: CALL_OW 25
30664: ST_TO_ADDR
// result := unit ;
30665: LD_ADDR_VAR 0 4
30669: PUSH
30670: LD_VAR 0 5
30674: ST_TO_ADDR
// end ;
30675: LD_VAR 0 4
30679: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
30680: LD_INT 0
30682: PPUSH
30683: PPUSH
// if exist_mode then
30684: LD_VAR 0 2
30688: IFFALSE 30713
// unit := CreateCharacter ( prefix & ident ) else
30690: LD_ADDR_VAR 0 5
30694: PUSH
30695: LD_VAR 0 3
30699: PUSH
30700: LD_VAR 0 1
30704: STR
30705: PPUSH
30706: CALL_OW 34
30710: ST_TO_ADDR
30711: GO 30728
// unit := NewCharacter ( ident ) ;
30713: LD_ADDR_VAR 0 5
30717: PUSH
30718: LD_VAR 0 1
30722: PPUSH
30723: CALL_OW 25
30727: ST_TO_ADDR
// result := unit ;
30728: LD_ADDR_VAR 0 4
30732: PUSH
30733: LD_VAR 0 5
30737: ST_TO_ADDR
// end ;
30738: LD_VAR 0 4
30742: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
30743: LD_INT 0
30745: PPUSH
30746: PPUSH
// if not side or not nation then
30747: LD_VAR 0 1
30751: NOT
30752: IFTRUE 30761
30754: PUSH
30755: LD_VAR 0 2
30759: NOT
30760: OR
30761: IFFALSE 30765
// exit ;
30763: GO 31535
// case nation of nation_american :
30765: LD_VAR 0 2
30769: PUSH
30770: LD_INT 1
30772: DOUBLE
30773: EQUAL
30774: IFTRUE 30778
30776: GO 30992
30778: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
30779: LD_ADDR_VAR 0 4
30783: PUSH
30784: LD_INT 35
30786: PUSH
30787: LD_INT 45
30789: PUSH
30790: LD_INT 46
30792: PUSH
30793: LD_INT 47
30795: PUSH
30796: LD_INT 82
30798: PUSH
30799: LD_INT 83
30801: PUSH
30802: LD_INT 84
30804: PUSH
30805: LD_INT 85
30807: PUSH
30808: LD_INT 86
30810: PUSH
30811: LD_INT 1
30813: PUSH
30814: LD_INT 2
30816: PUSH
30817: LD_INT 6
30819: PUSH
30820: LD_INT 15
30822: PUSH
30823: LD_INT 16
30825: PUSH
30826: LD_INT 7
30828: PUSH
30829: LD_INT 12
30831: PUSH
30832: LD_INT 13
30834: PUSH
30835: LD_INT 10
30837: PUSH
30838: LD_INT 14
30840: PUSH
30841: LD_INT 20
30843: PUSH
30844: LD_INT 21
30846: PUSH
30847: LD_INT 22
30849: PUSH
30850: LD_INT 25
30852: PUSH
30853: LD_INT 32
30855: PUSH
30856: LD_INT 27
30858: PUSH
30859: LD_INT 36
30861: PUSH
30862: LD_INT 69
30864: PUSH
30865: LD_INT 39
30867: PUSH
30868: LD_INT 34
30870: PUSH
30871: LD_INT 40
30873: PUSH
30874: LD_INT 48
30876: PUSH
30877: LD_INT 49
30879: PUSH
30880: LD_INT 50
30882: PUSH
30883: LD_INT 51
30885: PUSH
30886: LD_INT 52
30888: PUSH
30889: LD_INT 53
30891: PUSH
30892: LD_INT 54
30894: PUSH
30895: LD_INT 55
30897: PUSH
30898: LD_INT 56
30900: PUSH
30901: LD_INT 57
30903: PUSH
30904: LD_INT 58
30906: PUSH
30907: LD_INT 59
30909: PUSH
30910: LD_INT 60
30912: PUSH
30913: LD_INT 61
30915: PUSH
30916: LD_INT 62
30918: PUSH
30919: LD_INT 80
30921: PUSH
30922: LD_INT 82
30924: PUSH
30925: LD_INT 83
30927: PUSH
30928: LD_INT 84
30930: PUSH
30931: LD_INT 85
30933: PUSH
30934: LD_INT 86
30936: PUSH
30937: EMPTY
30938: LIST
30939: LIST
30940: LIST
30941: LIST
30942: LIST
30943: LIST
30944: LIST
30945: LIST
30946: LIST
30947: LIST
30948: LIST
30949: LIST
30950: LIST
30951: LIST
30952: LIST
30953: LIST
30954: LIST
30955: LIST
30956: LIST
30957: LIST
30958: LIST
30959: LIST
30960: LIST
30961: LIST
30962: LIST
30963: LIST
30964: LIST
30965: LIST
30966: LIST
30967: LIST
30968: LIST
30969: LIST
30970: LIST
30971: LIST
30972: LIST
30973: LIST
30974: LIST
30975: LIST
30976: LIST
30977: LIST
30978: LIST
30979: LIST
30980: LIST
30981: LIST
30982: LIST
30983: LIST
30984: LIST
30985: LIST
30986: LIST
30987: LIST
30988: LIST
30989: ST_TO_ADDR
30990: GO 31457
30992: LD_INT 2
30994: DOUBLE
30995: EQUAL
30996: IFTRUE 31000
30998: GO 31226
31000: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
31001: LD_ADDR_VAR 0 4
31005: PUSH
31006: LD_INT 35
31008: PUSH
31009: LD_INT 45
31011: PUSH
31012: LD_INT 46
31014: PUSH
31015: LD_INT 47
31017: PUSH
31018: LD_INT 82
31020: PUSH
31021: LD_INT 83
31023: PUSH
31024: LD_INT 84
31026: PUSH
31027: LD_INT 85
31029: PUSH
31030: LD_INT 87
31032: PUSH
31033: LD_INT 70
31035: PUSH
31036: LD_INT 1
31038: PUSH
31039: LD_INT 11
31041: PUSH
31042: LD_INT 3
31044: PUSH
31045: LD_INT 4
31047: PUSH
31048: LD_INT 5
31050: PUSH
31051: LD_INT 6
31053: PUSH
31054: LD_INT 15
31056: PUSH
31057: LD_INT 18
31059: PUSH
31060: LD_INT 7
31062: PUSH
31063: LD_INT 17
31065: PUSH
31066: LD_INT 8
31068: PUSH
31069: LD_INT 20
31071: PUSH
31072: LD_INT 21
31074: PUSH
31075: LD_INT 22
31077: PUSH
31078: LD_INT 72
31080: PUSH
31081: LD_INT 26
31083: PUSH
31084: LD_INT 69
31086: PUSH
31087: LD_INT 39
31089: PUSH
31090: LD_INT 40
31092: PUSH
31093: LD_INT 41
31095: PUSH
31096: LD_INT 42
31098: PUSH
31099: LD_INT 43
31101: PUSH
31102: LD_INT 48
31104: PUSH
31105: LD_INT 49
31107: PUSH
31108: LD_INT 50
31110: PUSH
31111: LD_INT 51
31113: PUSH
31114: LD_INT 52
31116: PUSH
31117: LD_INT 53
31119: PUSH
31120: LD_INT 54
31122: PUSH
31123: LD_INT 55
31125: PUSH
31126: LD_INT 56
31128: PUSH
31129: LD_INT 60
31131: PUSH
31132: LD_INT 61
31134: PUSH
31135: LD_INT 62
31137: PUSH
31138: LD_INT 66
31140: PUSH
31141: LD_INT 67
31143: PUSH
31144: LD_INT 68
31146: PUSH
31147: LD_INT 81
31149: PUSH
31150: LD_INT 82
31152: PUSH
31153: LD_INT 83
31155: PUSH
31156: LD_INT 84
31158: PUSH
31159: LD_INT 85
31161: PUSH
31162: LD_INT 87
31164: PUSH
31165: LD_INT 88
31167: PUSH
31168: EMPTY
31169: LIST
31170: LIST
31171: LIST
31172: LIST
31173: LIST
31174: LIST
31175: LIST
31176: LIST
31177: LIST
31178: LIST
31179: LIST
31180: LIST
31181: LIST
31182: LIST
31183: LIST
31184: LIST
31185: LIST
31186: LIST
31187: LIST
31188: LIST
31189: LIST
31190: LIST
31191: LIST
31192: LIST
31193: LIST
31194: LIST
31195: LIST
31196: LIST
31197: LIST
31198: LIST
31199: LIST
31200: LIST
31201: LIST
31202: LIST
31203: LIST
31204: LIST
31205: LIST
31206: LIST
31207: LIST
31208: LIST
31209: LIST
31210: LIST
31211: LIST
31212: LIST
31213: LIST
31214: LIST
31215: LIST
31216: LIST
31217: LIST
31218: LIST
31219: LIST
31220: LIST
31221: LIST
31222: LIST
31223: ST_TO_ADDR
31224: GO 31457
31226: LD_INT 3
31228: DOUBLE
31229: EQUAL
31230: IFTRUE 31234
31232: GO 31456
31234: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
31235: LD_ADDR_VAR 0 4
31239: PUSH
31240: LD_INT 46
31242: PUSH
31243: LD_INT 47
31245: PUSH
31246: LD_INT 1
31248: PUSH
31249: LD_INT 2
31251: PUSH
31252: LD_INT 82
31254: PUSH
31255: LD_INT 83
31257: PUSH
31258: LD_INT 84
31260: PUSH
31261: LD_INT 85
31263: PUSH
31264: LD_INT 86
31266: PUSH
31267: LD_INT 11
31269: PUSH
31270: LD_INT 9
31272: PUSH
31273: LD_INT 20
31275: PUSH
31276: LD_INT 19
31278: PUSH
31279: LD_INT 21
31281: PUSH
31282: LD_INT 24
31284: PUSH
31285: LD_INT 22
31287: PUSH
31288: LD_INT 25
31290: PUSH
31291: LD_INT 28
31293: PUSH
31294: LD_INT 29
31296: PUSH
31297: LD_INT 30
31299: PUSH
31300: LD_INT 31
31302: PUSH
31303: LD_INT 37
31305: PUSH
31306: LD_INT 38
31308: PUSH
31309: LD_INT 32
31311: PUSH
31312: LD_INT 27
31314: PUSH
31315: LD_INT 33
31317: PUSH
31318: LD_INT 69
31320: PUSH
31321: LD_INT 39
31323: PUSH
31324: LD_INT 34
31326: PUSH
31327: LD_INT 40
31329: PUSH
31330: LD_INT 71
31332: PUSH
31333: LD_INT 23
31335: PUSH
31336: LD_INT 44
31338: PUSH
31339: LD_INT 48
31341: PUSH
31342: LD_INT 49
31344: PUSH
31345: LD_INT 50
31347: PUSH
31348: LD_INT 51
31350: PUSH
31351: LD_INT 52
31353: PUSH
31354: LD_INT 53
31356: PUSH
31357: LD_INT 54
31359: PUSH
31360: LD_INT 55
31362: PUSH
31363: LD_INT 56
31365: PUSH
31366: LD_INT 57
31368: PUSH
31369: LD_INT 58
31371: PUSH
31372: LD_INT 59
31374: PUSH
31375: LD_INT 63
31377: PUSH
31378: LD_INT 64
31380: PUSH
31381: LD_INT 65
31383: PUSH
31384: LD_INT 82
31386: PUSH
31387: LD_INT 83
31389: PUSH
31390: LD_INT 84
31392: PUSH
31393: LD_INT 85
31395: PUSH
31396: LD_INT 86
31398: PUSH
31399: EMPTY
31400: LIST
31401: LIST
31402: LIST
31403: LIST
31404: LIST
31405: LIST
31406: LIST
31407: LIST
31408: LIST
31409: LIST
31410: LIST
31411: LIST
31412: LIST
31413: LIST
31414: LIST
31415: LIST
31416: LIST
31417: LIST
31418: LIST
31419: LIST
31420: LIST
31421: LIST
31422: LIST
31423: LIST
31424: LIST
31425: LIST
31426: LIST
31427: LIST
31428: LIST
31429: LIST
31430: LIST
31431: LIST
31432: LIST
31433: LIST
31434: LIST
31435: LIST
31436: LIST
31437: LIST
31438: LIST
31439: LIST
31440: LIST
31441: LIST
31442: LIST
31443: LIST
31444: LIST
31445: LIST
31446: LIST
31447: LIST
31448: LIST
31449: LIST
31450: LIST
31451: LIST
31452: LIST
31453: ST_TO_ADDR
31454: GO 31457
31456: POP
// if state > - 1 and state < 3 then
31457: LD_VAR 0 3
31461: PUSH
31462: LD_INT 1
31464: NEG
31465: GREATER
31466: IFFALSE 31478
31468: PUSH
31469: LD_VAR 0 3
31473: PUSH
31474: LD_INT 3
31476: LESS
31477: AND
31478: IFFALSE 31535
// for i in result do
31480: LD_ADDR_VAR 0 5
31484: PUSH
31485: LD_VAR 0 4
31489: PUSH
31490: FOR_IN
31491: IFFALSE 31533
// if GetTech ( i , side ) <> state then
31493: LD_VAR 0 5
31497: PPUSH
31498: LD_VAR 0 1
31502: PPUSH
31503: CALL_OW 321
31507: PUSH
31508: LD_VAR 0 3
31512: NONEQUAL
31513: IFFALSE 31531
// result := result diff i ;
31515: LD_ADDR_VAR 0 4
31519: PUSH
31520: LD_VAR 0 4
31524: PUSH
31525: LD_VAR 0 5
31529: DIFF
31530: ST_TO_ADDR
31531: GO 31490
31533: POP
31534: POP
// end ;
31535: LD_VAR 0 4
31539: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
31540: LD_INT 0
31542: PPUSH
31543: PPUSH
31544: PPUSH
// result := true ;
31545: LD_ADDR_VAR 0 3
31549: PUSH
31550: LD_INT 1
31552: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
31553: LD_ADDR_VAR 0 5
31557: PUSH
31558: LD_VAR 0 2
31562: PPUSH
31563: CALL_OW 480
31567: ST_TO_ADDR
// if not tmp then
31568: LD_VAR 0 5
31572: NOT
31573: IFFALSE 31577
// exit ;
31575: GO 31626
// for i in tmp do
31577: LD_ADDR_VAR 0 4
31581: PUSH
31582: LD_VAR 0 5
31586: PUSH
31587: FOR_IN
31588: IFFALSE 31624
// if GetTech ( i , side ) <> state_researched then
31590: LD_VAR 0 4
31594: PPUSH
31595: LD_VAR 0 1
31599: PPUSH
31600: CALL_OW 321
31604: PUSH
31605: LD_INT 2
31607: NONEQUAL
31608: IFFALSE 31622
// begin result := false ;
31610: LD_ADDR_VAR 0 3
31614: PUSH
31615: LD_INT 0
31617: ST_TO_ADDR
// exit ;
31618: POP
31619: POP
31620: GO 31626
// end ;
31622: GO 31587
31624: POP
31625: POP
// end ;
31626: LD_VAR 0 3
31630: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
31631: LD_INT 0
31633: PPUSH
31634: PPUSH
31635: PPUSH
31636: PPUSH
31637: PPUSH
31638: PPUSH
31639: PPUSH
31640: PPUSH
31641: PPUSH
31642: PPUSH
31643: PPUSH
31644: PPUSH
31645: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
31646: LD_VAR 0 1
31650: NOT
31651: IFTRUE 31668
31653: PUSH
31654: LD_VAR 0 1
31658: PPUSH
31659: CALL_OW 257
31663: PUSH
31664: LD_INT 9
31666: NONEQUAL
31667: OR
31668: IFFALSE 31672
// exit ;
31670: GO 32251
// side := GetSide ( unit ) ;
31672: LD_ADDR_VAR 0 9
31676: PUSH
31677: LD_VAR 0 1
31681: PPUSH
31682: CALL_OW 255
31686: ST_TO_ADDR
// tech_space := tech_spacanom ;
31687: LD_ADDR_VAR 0 12
31691: PUSH
31692: LD_INT 29
31694: ST_TO_ADDR
// tech_time := tech_taurad ;
31695: LD_ADDR_VAR 0 13
31699: PUSH
31700: LD_INT 28
31702: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
31703: LD_ADDR_VAR 0 11
31707: PUSH
31708: LD_VAR 0 1
31712: PPUSH
31713: CALL_OW 310
31717: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
31718: LD_VAR 0 11
31722: PPUSH
31723: CALL_OW 247
31727: PUSH
31728: LD_INT 2
31730: EQUAL
31731: IFFALSE 31735
// exit ;
31733: GO 32251
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
31735: LD_ADDR_VAR 0 8
31739: PUSH
31740: LD_INT 81
31742: PUSH
31743: LD_VAR 0 9
31747: PUSH
31748: EMPTY
31749: LIST
31750: LIST
31751: PUSH
31752: LD_INT 3
31754: PUSH
31755: LD_INT 21
31757: PUSH
31758: LD_INT 3
31760: PUSH
31761: EMPTY
31762: LIST
31763: LIST
31764: PUSH
31765: EMPTY
31766: LIST
31767: LIST
31768: PUSH
31769: EMPTY
31770: LIST
31771: LIST
31772: PPUSH
31773: CALL_OW 69
31777: ST_TO_ADDR
// if not tmp then
31778: LD_VAR 0 8
31782: NOT
31783: IFFALSE 31787
// exit ;
31785: GO 32251
// if in_unit then
31787: LD_VAR 0 11
31791: IFFALSE 31815
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
31793: LD_ADDR_VAR 0 10
31797: PUSH
31798: LD_VAR 0 8
31802: PPUSH
31803: LD_VAR 0 11
31807: PPUSH
31808: CALL_OW 74
31812: ST_TO_ADDR
31813: GO 31835
// enemy := NearestUnitToUnit ( tmp , unit ) ;
31815: LD_ADDR_VAR 0 10
31819: PUSH
31820: LD_VAR 0 8
31824: PPUSH
31825: LD_VAR 0 1
31829: PPUSH
31830: CALL_OW 74
31834: ST_TO_ADDR
// if not enemy then
31835: LD_VAR 0 10
31839: NOT
31840: IFFALSE 31844
// exit ;
31842: GO 32251
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
31844: LD_VAR 0 11
31848: IFFALSE 31870
31850: PUSH
31851: LD_VAR 0 11
31855: PPUSH
31856: LD_VAR 0 10
31860: PPUSH
31861: CALL_OW 296
31865: PUSH
31866: LD_INT 13
31868: GREATER
31869: AND
31870: IFTRUE 31892
31872: PUSH
31873: LD_VAR 0 1
31877: PPUSH
31878: LD_VAR 0 10
31882: PPUSH
31883: CALL_OW 296
31887: PUSH
31888: LD_INT 12
31890: GREATER
31891: OR
31892: IFFALSE 31896
// exit ;
31894: GO 32251
// missile := [ 1 ] ;
31896: LD_ADDR_VAR 0 14
31900: PUSH
31901: LD_INT 1
31903: PUSH
31904: EMPTY
31905: LIST
31906: ST_TO_ADDR
// if Researched ( side , tech_space ) then
31907: LD_VAR 0 9
31911: PPUSH
31912: LD_VAR 0 12
31916: PPUSH
31917: CALL_OW 325
31921: IFFALSE 31950
// missile := Replace ( missile , missile + 1 , 2 ) ;
31923: LD_ADDR_VAR 0 14
31927: PUSH
31928: LD_VAR 0 14
31932: PPUSH
31933: LD_VAR 0 14
31937: PUSH
31938: LD_INT 1
31940: PLUS
31941: PPUSH
31942: LD_INT 2
31944: PPUSH
31945: CALL_OW 1
31949: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
31950: LD_VAR 0 9
31954: PPUSH
31955: LD_VAR 0 13
31959: PPUSH
31960: CALL_OW 325
31964: IFFALSE 31988
31966: PUSH
31967: LD_VAR 0 10
31971: PPUSH
31972: CALL_OW 255
31976: PPUSH
31977: LD_VAR 0 13
31981: PPUSH
31982: CALL_OW 325
31986: NOT
31987: AND
31988: IFFALSE 32017
// missile := Replace ( missile , missile + 1 , 3 ) ;
31990: LD_ADDR_VAR 0 14
31994: PUSH
31995: LD_VAR 0 14
31999: PPUSH
32000: LD_VAR 0 14
32004: PUSH
32005: LD_INT 1
32007: PLUS
32008: PPUSH
32009: LD_INT 3
32011: PPUSH
32012: CALL_OW 1
32016: ST_TO_ADDR
// if missile < 2 then
32017: LD_VAR 0 14
32021: PUSH
32022: LD_INT 2
32024: LESS
32025: IFFALSE 32029
// exit ;
32027: GO 32251
// x := GetX ( enemy ) ;
32029: LD_ADDR_VAR 0 4
32033: PUSH
32034: LD_VAR 0 10
32038: PPUSH
32039: CALL_OW 250
32043: ST_TO_ADDR
// y := GetY ( enemy ) ;
32044: LD_ADDR_VAR 0 5
32048: PUSH
32049: LD_VAR 0 10
32053: PPUSH
32054: CALL_OW 251
32058: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
32059: LD_ADDR_VAR 0 6
32063: PUSH
32064: LD_VAR 0 4
32068: PUSH
32069: LD_INT 1
32071: NEG
32072: PPUSH
32073: LD_INT 1
32075: PPUSH
32076: CALL_OW 12
32080: PLUS
32081: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
32082: LD_ADDR_VAR 0 7
32086: PUSH
32087: LD_VAR 0 5
32091: PUSH
32092: LD_INT 1
32094: NEG
32095: PPUSH
32096: LD_INT 1
32098: PPUSH
32099: CALL_OW 12
32103: PLUS
32104: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
32105: LD_VAR 0 6
32109: PPUSH
32110: LD_VAR 0 7
32114: PPUSH
32115: CALL_OW 488
32119: NOT
32120: IFFALSE 32142
// begin _x := x ;
32122: LD_ADDR_VAR 0 6
32126: PUSH
32127: LD_VAR 0 4
32131: ST_TO_ADDR
// _y := y ;
32132: LD_ADDR_VAR 0 7
32136: PUSH
32137: LD_VAR 0 5
32141: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
32142: LD_ADDR_VAR 0 3
32146: PUSH
32147: LD_INT 1
32149: PPUSH
32150: LD_VAR 0 14
32154: PPUSH
32155: CALL_OW 12
32159: ST_TO_ADDR
// case i of 1 :
32160: LD_VAR 0 3
32164: PUSH
32165: LD_INT 1
32167: DOUBLE
32168: EQUAL
32169: IFTRUE 32173
32171: GO 32190
32173: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
32174: LD_VAR 0 1
32178: PPUSH
32179: LD_VAR 0 10
32183: PPUSH
32184: CALL_OW 115
32188: GO 32251
32190: LD_INT 2
32192: DOUBLE
32193: EQUAL
32194: IFTRUE 32198
32196: GO 32220
32198: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
32199: LD_VAR 0 1
32203: PPUSH
32204: LD_VAR 0 6
32208: PPUSH
32209: LD_VAR 0 7
32213: PPUSH
32214: CALL_OW 153
32218: GO 32251
32220: LD_INT 3
32222: DOUBLE
32223: EQUAL
32224: IFTRUE 32228
32226: GO 32250
32228: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
32229: LD_VAR 0 1
32233: PPUSH
32234: LD_VAR 0 6
32238: PPUSH
32239: LD_VAR 0 7
32243: PPUSH
32244: CALL_OW 154
32248: GO 32251
32250: POP
// end ;
32251: LD_VAR 0 2
32255: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
32256: LD_INT 0
32258: PPUSH
32259: PPUSH
32260: PPUSH
32261: PPUSH
32262: PPUSH
32263: PPUSH
// if not unit or not building then
32264: LD_VAR 0 1
32268: NOT
32269: IFTRUE 32278
32271: PUSH
32272: LD_VAR 0 2
32276: NOT
32277: OR
32278: IFFALSE 32282
// exit ;
32280: GO 32440
// x := GetX ( building ) ;
32282: LD_ADDR_VAR 0 5
32286: PUSH
32287: LD_VAR 0 2
32291: PPUSH
32292: CALL_OW 250
32296: ST_TO_ADDR
// y := GetY ( building ) ;
32297: LD_ADDR_VAR 0 6
32301: PUSH
32302: LD_VAR 0 2
32306: PPUSH
32307: CALL_OW 251
32311: ST_TO_ADDR
// for i := 0 to 5 do
32312: LD_ADDR_VAR 0 4
32316: PUSH
32317: DOUBLE
32318: LD_INT 0
32320: DEC
32321: ST_TO_ADDR
32322: LD_INT 5
32324: PUSH
32325: FOR_TO
32326: IFFALSE 32438
// begin _x := ShiftX ( x , i , 3 ) ;
32328: LD_ADDR_VAR 0 7
32332: PUSH
32333: LD_VAR 0 5
32337: PPUSH
32338: LD_VAR 0 4
32342: PPUSH
32343: LD_INT 3
32345: PPUSH
32346: CALL_OW 272
32350: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
32351: LD_ADDR_VAR 0 8
32355: PUSH
32356: LD_VAR 0 6
32360: PPUSH
32361: LD_VAR 0 4
32365: PPUSH
32366: LD_INT 3
32368: PPUSH
32369: CALL_OW 273
32373: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
32374: LD_VAR 0 7
32378: PPUSH
32379: LD_VAR 0 8
32383: PPUSH
32384: CALL_OW 488
32388: NOT
32389: IFFALSE 32393
// continue ;
32391: GO 32325
// if HexInfo ( _x , _y ) = 0 then
32393: LD_VAR 0 7
32397: PPUSH
32398: LD_VAR 0 8
32402: PPUSH
32403: CALL_OW 428
32407: PUSH
32408: LD_INT 0
32410: EQUAL
32411: IFFALSE 32436
// begin ComMoveXY ( unit , _x , _y ) ;
32413: LD_VAR 0 1
32417: PPUSH
32418: LD_VAR 0 7
32422: PPUSH
32423: LD_VAR 0 8
32427: PPUSH
32428: CALL_OW 111
// exit ;
32432: POP
32433: POP
32434: GO 32440
// end ; end ;
32436: GO 32325
32438: POP
32439: POP
// end ;
32440: LD_VAR 0 3
32444: RET
// export function ScanBase ( side , base_area ) ; begin
32445: LD_INT 0
32447: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
32448: LD_ADDR_VAR 0 3
32452: PUSH
32453: LD_VAR 0 2
32457: PPUSH
32458: LD_INT 81
32460: PUSH
32461: LD_VAR 0 1
32465: PUSH
32466: EMPTY
32467: LIST
32468: LIST
32469: PPUSH
32470: CALL_OW 70
32474: ST_TO_ADDR
// end ;
32475: LD_VAR 0 3
32479: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
32480: LD_INT 0
32482: PPUSH
32483: PPUSH
32484: PPUSH
32485: PPUSH
// result := false ;
32486: LD_ADDR_VAR 0 2
32490: PUSH
32491: LD_INT 0
32493: ST_TO_ADDR
// side := GetSide ( unit ) ;
32494: LD_ADDR_VAR 0 3
32498: PUSH
32499: LD_VAR 0 1
32503: PPUSH
32504: CALL_OW 255
32508: ST_TO_ADDR
// nat := GetNation ( unit ) ;
32509: LD_ADDR_VAR 0 4
32513: PUSH
32514: LD_VAR 0 1
32518: PPUSH
32519: CALL_OW 248
32523: ST_TO_ADDR
// case nat of 1 :
32524: LD_VAR 0 4
32528: PUSH
32529: LD_INT 1
32531: DOUBLE
32532: EQUAL
32533: IFTRUE 32537
32535: GO 32548
32537: POP
// tech := tech_lassight ; 2 :
32538: LD_ADDR_VAR 0 5
32542: PUSH
32543: LD_INT 12
32545: ST_TO_ADDR
32546: GO 32587
32548: LD_INT 2
32550: DOUBLE
32551: EQUAL
32552: IFTRUE 32556
32554: GO 32567
32556: POP
// tech := tech_mortar ; 3 :
32557: LD_ADDR_VAR 0 5
32561: PUSH
32562: LD_INT 41
32564: ST_TO_ADDR
32565: GO 32587
32567: LD_INT 3
32569: DOUBLE
32570: EQUAL
32571: IFTRUE 32575
32573: GO 32586
32575: POP
// tech := tech_bazooka ; end ;
32576: LD_ADDR_VAR 0 5
32580: PUSH
32581: LD_INT 44
32583: ST_TO_ADDR
32584: GO 32587
32586: POP
// if Researched ( side , tech ) then
32587: LD_VAR 0 3
32591: PPUSH
32592: LD_VAR 0 5
32596: PPUSH
32597: CALL_OW 325
32601: IFFALSE 32628
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
32603: LD_ADDR_VAR 0 2
32607: PUSH
32608: LD_INT 5
32610: PUSH
32611: LD_INT 8
32613: PUSH
32614: LD_INT 9
32616: PUSH
32617: EMPTY
32618: LIST
32619: LIST
32620: LIST
32621: PUSH
32622: LD_VAR 0 4
32626: ARRAY
32627: ST_TO_ADDR
// end ;
32628: LD_VAR 0 2
32632: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
32633: LD_INT 0
32635: PPUSH
32636: PPUSH
32637: PPUSH
// if not mines then
32638: LD_VAR 0 2
32642: NOT
32643: IFFALSE 32647
// exit ;
32645: GO 32791
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
32647: LD_ADDR_VAR 0 5
32651: PUSH
32652: LD_INT 81
32654: PUSH
32655: LD_VAR 0 1
32659: PUSH
32660: EMPTY
32661: LIST
32662: LIST
32663: PUSH
32664: LD_INT 3
32666: PUSH
32667: LD_INT 21
32669: PUSH
32670: LD_INT 3
32672: PUSH
32673: EMPTY
32674: LIST
32675: LIST
32676: PUSH
32677: EMPTY
32678: LIST
32679: LIST
32680: PUSH
32681: EMPTY
32682: LIST
32683: LIST
32684: PPUSH
32685: CALL_OW 69
32689: ST_TO_ADDR
// for i in mines do
32690: LD_ADDR_VAR 0 4
32694: PUSH
32695: LD_VAR 0 2
32699: PUSH
32700: FOR_IN
32701: IFFALSE 32789
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
32703: LD_VAR 0 4
32707: PUSH
32708: LD_INT 1
32710: ARRAY
32711: PPUSH
32712: LD_VAR 0 4
32716: PUSH
32717: LD_INT 2
32719: ARRAY
32720: PPUSH
32721: CALL_OW 458
32725: NOT
32726: IFFALSE 32730
// continue ;
32728: GO 32700
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
32730: LD_VAR 0 4
32734: PUSH
32735: LD_INT 1
32737: ARRAY
32738: PPUSH
32739: LD_VAR 0 4
32743: PUSH
32744: LD_INT 2
32746: ARRAY
32747: PPUSH
32748: CALL_OW 428
32752: PUSH
32753: LD_VAR 0 5
32757: IN
32758: IFFALSE 32787
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
32760: LD_VAR 0 4
32764: PUSH
32765: LD_INT 1
32767: ARRAY
32768: PPUSH
32769: LD_VAR 0 4
32773: PUSH
32774: LD_INT 2
32776: ARRAY
32777: PPUSH
32778: LD_VAR 0 1
32782: PPUSH
32783: CALL_OW 456
// end ;
32787: GO 32700
32789: POP
32790: POP
// end ;
32791: LD_VAR 0 3
32795: RET
// export function Count ( array ) ; begin
32796: LD_INT 0
32798: PPUSH
// result := array + 0 ;
32799: LD_ADDR_VAR 0 2
32803: PUSH
32804: LD_VAR 0 1
32808: PUSH
32809: LD_INT 0
32811: PLUS
32812: ST_TO_ADDR
// end ;
32813: LD_VAR 0 2
32817: RET
// export function IsEmpty ( building ) ; begin
32818: LD_INT 0
32820: PPUSH
// if not building then
32821: LD_VAR 0 1
32825: NOT
32826: IFFALSE 32830
// exit ;
32828: GO 32873
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
32830: LD_ADDR_VAR 0 2
32834: PUSH
32835: LD_VAR 0 1
32839: PUSH
32840: LD_INT 22
32842: PUSH
32843: LD_VAR 0 1
32847: PPUSH
32848: CALL_OW 255
32852: PUSH
32853: EMPTY
32854: LIST
32855: LIST
32856: PUSH
32857: LD_INT 58
32859: PUSH
32860: EMPTY
32861: LIST
32862: PUSH
32863: EMPTY
32864: LIST
32865: LIST
32866: PPUSH
32867: CALL_OW 69
32871: IN
32872: ST_TO_ADDR
// end ;
32873: LD_VAR 0 2
32877: RET
// export function IsNotFull ( building ) ; var places ; begin
32878: LD_INT 0
32880: PPUSH
32881: PPUSH
// if not building then
32882: LD_VAR 0 1
32886: NOT
32887: IFFALSE 32891
// exit ;
32889: GO 32919
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
32891: LD_ADDR_VAR 0 2
32895: PUSH
32896: LD_VAR 0 1
32900: PPUSH
32901: LD_INT 3
32903: PUSH
32904: LD_INT 62
32906: PUSH
32907: EMPTY
32908: LIST
32909: PUSH
32910: EMPTY
32911: LIST
32912: LIST
32913: PPUSH
32914: CALL_OW 72
32918: ST_TO_ADDR
// end ;
32919: LD_VAR 0 2
32923: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
32924: LD_INT 0
32926: PPUSH
32927: PPUSH
32928: PPUSH
32929: PPUSH
// tmp := [ ] ;
32930: LD_ADDR_VAR 0 3
32934: PUSH
32935: EMPTY
32936: ST_TO_ADDR
// list := [ ] ;
32937: LD_ADDR_VAR 0 5
32941: PUSH
32942: EMPTY
32943: ST_TO_ADDR
// for i = 16 to 25 do
32944: LD_ADDR_VAR 0 4
32948: PUSH
32949: DOUBLE
32950: LD_INT 16
32952: DEC
32953: ST_TO_ADDR
32954: LD_INT 25
32956: PUSH
32957: FOR_TO
32958: IFFALSE 33031
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
32960: LD_ADDR_VAR 0 3
32964: PUSH
32965: LD_VAR 0 3
32969: PUSH
32970: LD_INT 22
32972: PUSH
32973: LD_VAR 0 1
32977: PPUSH
32978: CALL_OW 255
32982: PUSH
32983: EMPTY
32984: LIST
32985: LIST
32986: PUSH
32987: LD_INT 91
32989: PUSH
32990: LD_VAR 0 1
32994: PUSH
32995: LD_INT 6
32997: PUSH
32998: EMPTY
32999: LIST
33000: LIST
33001: LIST
33002: PUSH
33003: LD_INT 30
33005: PUSH
33006: LD_VAR 0 4
33010: PUSH
33011: EMPTY
33012: LIST
33013: LIST
33014: PUSH
33015: EMPTY
33016: LIST
33017: LIST
33018: LIST
33019: PUSH
33020: EMPTY
33021: LIST
33022: PPUSH
33023: CALL_OW 69
33027: ADD
33028: ST_TO_ADDR
33029: GO 32957
33031: POP
33032: POP
// for i = 1 to tmp do
33033: LD_ADDR_VAR 0 4
33037: PUSH
33038: DOUBLE
33039: LD_INT 1
33041: DEC
33042: ST_TO_ADDR
33043: LD_VAR 0 3
33047: PUSH
33048: FOR_TO
33049: IFFALSE 33137
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
33051: LD_ADDR_VAR 0 5
33055: PUSH
33056: LD_VAR 0 5
33060: PUSH
33061: LD_VAR 0 3
33065: PUSH
33066: LD_VAR 0 4
33070: ARRAY
33071: PPUSH
33072: CALL_OW 266
33076: PUSH
33077: LD_VAR 0 3
33081: PUSH
33082: LD_VAR 0 4
33086: ARRAY
33087: PPUSH
33088: CALL_OW 250
33092: PUSH
33093: LD_VAR 0 3
33097: PUSH
33098: LD_VAR 0 4
33102: ARRAY
33103: PPUSH
33104: CALL_OW 251
33108: PUSH
33109: LD_VAR 0 3
33113: PUSH
33114: LD_VAR 0 4
33118: ARRAY
33119: PPUSH
33120: CALL_OW 254
33124: PUSH
33125: EMPTY
33126: LIST
33127: LIST
33128: LIST
33129: LIST
33130: PUSH
33131: EMPTY
33132: LIST
33133: ADD
33134: ST_TO_ADDR
33135: GO 33048
33137: POP
33138: POP
// result := list ;
33139: LD_ADDR_VAR 0 2
33143: PUSH
33144: LD_VAR 0 5
33148: ST_TO_ADDR
// end ;
33149: LD_VAR 0 2
33153: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
33154: LD_INT 0
33156: PPUSH
33157: PPUSH
33158: PPUSH
33159: PPUSH
33160: PPUSH
33161: PPUSH
33162: PPUSH
// if not factory then
33163: LD_VAR 0 1
33167: NOT
33168: IFFALSE 33172
// exit ;
33170: GO 33775
// if control = control_apeman then
33172: LD_VAR 0 4
33176: PUSH
33177: LD_INT 5
33179: EQUAL
33180: IFFALSE 33289
// begin tmp := UnitsInside ( factory ) ;
33182: LD_ADDR_VAR 0 8
33186: PUSH
33187: LD_VAR 0 1
33191: PPUSH
33192: CALL_OW 313
33196: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
33197: LD_VAR 0 8
33201: PPUSH
33202: LD_INT 25
33204: PUSH
33205: LD_INT 12
33207: PUSH
33208: EMPTY
33209: LIST
33210: LIST
33211: PPUSH
33212: CALL_OW 72
33216: NOT
33217: IFFALSE 33227
// control := control_manual ;
33219: LD_ADDR_VAR 0 4
33223: PUSH
33224: LD_INT 1
33226: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
33227: LD_ADDR_VAR 0 8
33231: PUSH
33232: LD_VAR 0 1
33236: PPUSH
33237: CALL 32924 0 1
33241: ST_TO_ADDR
// if tmp then
33242: LD_VAR 0 8
33246: IFFALSE 33289
// begin for i in tmp do
33248: LD_ADDR_VAR 0 7
33252: PUSH
33253: LD_VAR 0 8
33257: PUSH
33258: FOR_IN
33259: IFFALSE 33287
// if i [ 1 ] = b_ext_radio then
33261: LD_VAR 0 7
33265: PUSH
33266: LD_INT 1
33268: ARRAY
33269: PUSH
33270: LD_INT 22
33272: EQUAL
33273: IFFALSE 33285
// begin control := control_remote ;
33275: LD_ADDR_VAR 0 4
33279: PUSH
33280: LD_INT 2
33282: ST_TO_ADDR
// break ;
33283: GO 33287
// end ;
33285: GO 33258
33287: POP
33288: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
33289: LD_VAR 0 1
33293: PPUSH
33294: LD_VAR 0 2
33298: PPUSH
33299: LD_VAR 0 3
33303: PPUSH
33304: LD_VAR 0 4
33308: PPUSH
33309: LD_VAR 0 5
33313: PPUSH
33314: CALL_OW 448
33318: IFFALSE 33353
// begin result := [ chassis , engine , control , weapon ] ;
33320: LD_ADDR_VAR 0 6
33324: PUSH
33325: LD_VAR 0 2
33329: PUSH
33330: LD_VAR 0 3
33334: PUSH
33335: LD_VAR 0 4
33339: PUSH
33340: LD_VAR 0 5
33344: PUSH
33345: EMPTY
33346: LIST
33347: LIST
33348: LIST
33349: LIST
33350: ST_TO_ADDR
// exit ;
33351: GO 33775
// end ; _chassis := AvailableChassisList ( factory ) ;
33353: LD_ADDR_VAR 0 9
33357: PUSH
33358: LD_VAR 0 1
33362: PPUSH
33363: CALL_OW 475
33367: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
33368: LD_ADDR_VAR 0 11
33372: PUSH
33373: LD_VAR 0 1
33377: PPUSH
33378: CALL_OW 476
33382: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
33383: LD_ADDR_VAR 0 12
33387: PUSH
33388: LD_VAR 0 1
33392: PPUSH
33393: CALL_OW 477
33397: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
33398: LD_ADDR_VAR 0 10
33402: PUSH
33403: LD_VAR 0 1
33407: PPUSH
33408: CALL_OW 478
33412: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
33413: LD_VAR 0 9
33417: NOT
33418: IFTRUE 33427
33420: PUSH
33421: LD_VAR 0 11
33425: NOT
33426: OR
33427: IFTRUE 33436
33429: PUSH
33430: LD_VAR 0 12
33434: NOT
33435: OR
33436: IFTRUE 33445
33438: PUSH
33439: LD_VAR 0 10
33443: NOT
33444: OR
33445: IFFALSE 33480
// begin result := [ chassis , engine , control , weapon ] ;
33447: LD_ADDR_VAR 0 6
33451: PUSH
33452: LD_VAR 0 2
33456: PUSH
33457: LD_VAR 0 3
33461: PUSH
33462: LD_VAR 0 4
33466: PUSH
33467: LD_VAR 0 5
33471: PUSH
33472: EMPTY
33473: LIST
33474: LIST
33475: LIST
33476: LIST
33477: ST_TO_ADDR
// exit ;
33478: GO 33775
// end ; if not chassis in _chassis then
33480: LD_VAR 0 2
33484: PUSH
33485: LD_VAR 0 9
33489: IN
33490: NOT
33491: IFFALSE 33517
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
33493: LD_ADDR_VAR 0 2
33497: PUSH
33498: LD_VAR 0 9
33502: PUSH
33503: LD_INT 1
33505: PPUSH
33506: LD_VAR 0 9
33510: PPUSH
33511: CALL_OW 12
33515: ARRAY
33516: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
33517: LD_VAR 0 2
33521: PPUSH
33522: LD_VAR 0 3
33526: PPUSH
33527: CALL 33780 0 2
33531: NOT
33532: IFFALSE 33593
// repeat engine := _engine [ 1 ] ;
33534: LD_ADDR_VAR 0 3
33538: PUSH
33539: LD_VAR 0 11
33543: PUSH
33544: LD_INT 1
33546: ARRAY
33547: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
33548: LD_ADDR_VAR 0 11
33552: PUSH
33553: LD_VAR 0 11
33557: PPUSH
33558: LD_INT 1
33560: PPUSH
33561: CALL_OW 3
33565: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
33566: LD_VAR 0 2
33570: PPUSH
33571: LD_VAR 0 3
33575: PPUSH
33576: CALL 33780 0 2
33580: IFTRUE 33591
33582: PUSH
33583: LD_VAR 0 11
33587: PUSH
33588: EMPTY
33589: EQUAL
33590: OR
33591: IFFALSE 33534
// if not control in _control then
33593: LD_VAR 0 4
33597: PUSH
33598: LD_VAR 0 12
33602: IN
33603: NOT
33604: IFFALSE 33630
// control := _control [ rand ( 1 , _control ) ] ;
33606: LD_ADDR_VAR 0 4
33610: PUSH
33611: LD_VAR 0 12
33615: PUSH
33616: LD_INT 1
33618: PPUSH
33619: LD_VAR 0 12
33623: PPUSH
33624: CALL_OW 12
33628: ARRAY
33629: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
33630: LD_VAR 0 2
33634: PPUSH
33635: LD_VAR 0 5
33639: PPUSH
33640: CALL 34002 0 2
33644: NOT
33645: IFFALSE 33706
// repeat weapon := _weapon [ 1 ] ;
33647: LD_ADDR_VAR 0 5
33651: PUSH
33652: LD_VAR 0 10
33656: PUSH
33657: LD_INT 1
33659: ARRAY
33660: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
33661: LD_ADDR_VAR 0 10
33665: PUSH
33666: LD_VAR 0 10
33670: PPUSH
33671: LD_INT 1
33673: PPUSH
33674: CALL_OW 3
33678: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
33679: LD_VAR 0 2
33683: PPUSH
33684: LD_VAR 0 5
33688: PPUSH
33689: CALL 34002 0 2
33693: IFTRUE 33704
33695: PUSH
33696: LD_VAR 0 10
33700: PUSH
33701: EMPTY
33702: EQUAL
33703: OR
33704: IFFALSE 33647
// result := [ ] ;
33706: LD_ADDR_VAR 0 6
33710: PUSH
33711: EMPTY
33712: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
33713: LD_VAR 0 1
33717: PPUSH
33718: LD_VAR 0 2
33722: PPUSH
33723: LD_VAR 0 3
33727: PPUSH
33728: LD_VAR 0 4
33732: PPUSH
33733: LD_VAR 0 5
33737: PPUSH
33738: CALL_OW 448
33742: IFFALSE 33775
// result := [ chassis , engine , control , weapon ] ;
33744: LD_ADDR_VAR 0 6
33748: PUSH
33749: LD_VAR 0 2
33753: PUSH
33754: LD_VAR 0 3
33758: PUSH
33759: LD_VAR 0 4
33763: PUSH
33764: LD_VAR 0 5
33768: PUSH
33769: EMPTY
33770: LIST
33771: LIST
33772: LIST
33773: LIST
33774: ST_TO_ADDR
// end ;
33775: LD_VAR 0 6
33779: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
33780: LD_INT 0
33782: PPUSH
// if not chassis or not engine then
33783: LD_VAR 0 1
33787: NOT
33788: IFTRUE 33797
33790: PUSH
33791: LD_VAR 0 2
33795: NOT
33796: OR
33797: IFFALSE 33801
// exit ;
33799: GO 33997
// case engine of engine_solar :
33801: LD_VAR 0 2
33805: PUSH
33806: LD_INT 2
33808: DOUBLE
33809: EQUAL
33810: IFTRUE 33814
33812: GO 33852
33814: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
33815: LD_ADDR_VAR 0 3
33819: PUSH
33820: LD_INT 11
33822: PUSH
33823: LD_INT 12
33825: PUSH
33826: LD_INT 13
33828: PUSH
33829: LD_INT 14
33831: PUSH
33832: LD_INT 1
33834: PUSH
33835: LD_INT 2
33837: PUSH
33838: LD_INT 3
33840: PUSH
33841: EMPTY
33842: LIST
33843: LIST
33844: LIST
33845: LIST
33846: LIST
33847: LIST
33848: LIST
33849: ST_TO_ADDR
33850: GO 33981
33852: LD_INT 1
33854: DOUBLE
33855: EQUAL
33856: IFTRUE 33860
33858: GO 33922
33860: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
33861: LD_ADDR_VAR 0 3
33865: PUSH
33866: LD_INT 11
33868: PUSH
33869: LD_INT 12
33871: PUSH
33872: LD_INT 13
33874: PUSH
33875: LD_INT 14
33877: PUSH
33878: LD_INT 1
33880: PUSH
33881: LD_INT 2
33883: PUSH
33884: LD_INT 3
33886: PUSH
33887: LD_INT 4
33889: PUSH
33890: LD_INT 5
33892: PUSH
33893: LD_INT 21
33895: PUSH
33896: LD_INT 23
33898: PUSH
33899: LD_INT 22
33901: PUSH
33902: LD_INT 24
33904: PUSH
33905: EMPTY
33906: LIST
33907: LIST
33908: LIST
33909: LIST
33910: LIST
33911: LIST
33912: LIST
33913: LIST
33914: LIST
33915: LIST
33916: LIST
33917: LIST
33918: LIST
33919: ST_TO_ADDR
33920: GO 33981
33922: LD_INT 3
33924: DOUBLE
33925: EQUAL
33926: IFTRUE 33930
33928: GO 33980
33930: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
33931: LD_ADDR_VAR 0 3
33935: PUSH
33936: LD_INT 13
33938: PUSH
33939: LD_INT 14
33941: PUSH
33942: LD_INT 2
33944: PUSH
33945: LD_INT 3
33947: PUSH
33948: LD_INT 4
33950: PUSH
33951: LD_INT 5
33953: PUSH
33954: LD_INT 21
33956: PUSH
33957: LD_INT 22
33959: PUSH
33960: LD_INT 23
33962: PUSH
33963: LD_INT 24
33965: PUSH
33966: EMPTY
33967: LIST
33968: LIST
33969: LIST
33970: LIST
33971: LIST
33972: LIST
33973: LIST
33974: LIST
33975: LIST
33976: LIST
33977: ST_TO_ADDR
33978: GO 33981
33980: POP
// result := ( chassis in result ) ;
33981: LD_ADDR_VAR 0 3
33985: PUSH
33986: LD_VAR 0 1
33990: PUSH
33991: LD_VAR 0 3
33995: IN
33996: ST_TO_ADDR
// end ;
33997: LD_VAR 0 3
34001: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
34002: LD_INT 0
34004: PPUSH
// if not chassis or not weapon then
34005: LD_VAR 0 1
34009: NOT
34010: IFTRUE 34019
34012: PUSH
34013: LD_VAR 0 2
34017: NOT
34018: OR
34019: IFFALSE 34023
// exit ;
34021: GO 35083
// case weapon of us_machine_gun :
34023: LD_VAR 0 2
34027: PUSH
34028: LD_INT 2
34030: DOUBLE
34031: EQUAL
34032: IFTRUE 34036
34034: GO 34066
34036: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
34037: LD_ADDR_VAR 0 3
34041: PUSH
34042: LD_INT 1
34044: PUSH
34045: LD_INT 2
34047: PUSH
34048: LD_INT 3
34050: PUSH
34051: LD_INT 4
34053: PUSH
34054: LD_INT 5
34056: PUSH
34057: EMPTY
34058: LIST
34059: LIST
34060: LIST
34061: LIST
34062: LIST
34063: ST_TO_ADDR
34064: GO 35067
34066: LD_INT 3
34068: DOUBLE
34069: EQUAL
34070: IFTRUE 34074
34072: GO 34104
34074: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
34075: LD_ADDR_VAR 0 3
34079: PUSH
34080: LD_INT 1
34082: PUSH
34083: LD_INT 2
34085: PUSH
34086: LD_INT 3
34088: PUSH
34089: LD_INT 4
34091: PUSH
34092: LD_INT 5
34094: PUSH
34095: EMPTY
34096: LIST
34097: LIST
34098: LIST
34099: LIST
34100: LIST
34101: ST_TO_ADDR
34102: GO 35067
34104: LD_INT 11
34106: DOUBLE
34107: EQUAL
34108: IFTRUE 34112
34110: GO 34142
34112: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
34113: LD_ADDR_VAR 0 3
34117: PUSH
34118: LD_INT 1
34120: PUSH
34121: LD_INT 2
34123: PUSH
34124: LD_INT 3
34126: PUSH
34127: LD_INT 4
34129: PUSH
34130: LD_INT 5
34132: PUSH
34133: EMPTY
34134: LIST
34135: LIST
34136: LIST
34137: LIST
34138: LIST
34139: ST_TO_ADDR
34140: GO 35067
34142: LD_INT 4
34144: DOUBLE
34145: EQUAL
34146: IFTRUE 34150
34148: GO 34176
34150: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
34151: LD_ADDR_VAR 0 3
34155: PUSH
34156: LD_INT 2
34158: PUSH
34159: LD_INT 3
34161: PUSH
34162: LD_INT 4
34164: PUSH
34165: LD_INT 5
34167: PUSH
34168: EMPTY
34169: LIST
34170: LIST
34171: LIST
34172: LIST
34173: ST_TO_ADDR
34174: GO 35067
34176: LD_INT 5
34178: DOUBLE
34179: EQUAL
34180: IFTRUE 34184
34182: GO 34210
34184: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
34185: LD_ADDR_VAR 0 3
34189: PUSH
34190: LD_INT 2
34192: PUSH
34193: LD_INT 3
34195: PUSH
34196: LD_INT 4
34198: PUSH
34199: LD_INT 5
34201: PUSH
34202: EMPTY
34203: LIST
34204: LIST
34205: LIST
34206: LIST
34207: ST_TO_ADDR
34208: GO 35067
34210: LD_INT 9
34212: DOUBLE
34213: EQUAL
34214: IFTRUE 34218
34216: GO 34244
34218: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
34219: LD_ADDR_VAR 0 3
34223: PUSH
34224: LD_INT 2
34226: PUSH
34227: LD_INT 3
34229: PUSH
34230: LD_INT 4
34232: PUSH
34233: LD_INT 5
34235: PUSH
34236: EMPTY
34237: LIST
34238: LIST
34239: LIST
34240: LIST
34241: ST_TO_ADDR
34242: GO 35067
34244: LD_INT 7
34246: DOUBLE
34247: EQUAL
34248: IFTRUE 34252
34250: GO 34278
34252: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
34253: LD_ADDR_VAR 0 3
34257: PUSH
34258: LD_INT 2
34260: PUSH
34261: LD_INT 3
34263: PUSH
34264: LD_INT 4
34266: PUSH
34267: LD_INT 5
34269: PUSH
34270: EMPTY
34271: LIST
34272: LIST
34273: LIST
34274: LIST
34275: ST_TO_ADDR
34276: GO 35067
34278: LD_INT 12
34280: DOUBLE
34281: EQUAL
34282: IFTRUE 34286
34284: GO 34312
34286: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
34287: LD_ADDR_VAR 0 3
34291: PUSH
34292: LD_INT 2
34294: PUSH
34295: LD_INT 3
34297: PUSH
34298: LD_INT 4
34300: PUSH
34301: LD_INT 5
34303: PUSH
34304: EMPTY
34305: LIST
34306: LIST
34307: LIST
34308: LIST
34309: ST_TO_ADDR
34310: GO 35067
34312: LD_INT 13
34314: DOUBLE
34315: EQUAL
34316: IFTRUE 34320
34318: GO 34346
34320: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
34321: LD_ADDR_VAR 0 3
34325: PUSH
34326: LD_INT 2
34328: PUSH
34329: LD_INT 3
34331: PUSH
34332: LD_INT 4
34334: PUSH
34335: LD_INT 5
34337: PUSH
34338: EMPTY
34339: LIST
34340: LIST
34341: LIST
34342: LIST
34343: ST_TO_ADDR
34344: GO 35067
34346: LD_INT 14
34348: DOUBLE
34349: EQUAL
34350: IFTRUE 34354
34352: GO 34372
34354: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
34355: LD_ADDR_VAR 0 3
34359: PUSH
34360: LD_INT 4
34362: PUSH
34363: LD_INT 5
34365: PUSH
34366: EMPTY
34367: LIST
34368: LIST
34369: ST_TO_ADDR
34370: GO 35067
34372: LD_INT 6
34374: DOUBLE
34375: EQUAL
34376: IFTRUE 34380
34378: GO 34398
34380: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
34381: LD_ADDR_VAR 0 3
34385: PUSH
34386: LD_INT 4
34388: PUSH
34389: LD_INT 5
34391: PUSH
34392: EMPTY
34393: LIST
34394: LIST
34395: ST_TO_ADDR
34396: GO 35067
34398: LD_INT 10
34400: DOUBLE
34401: EQUAL
34402: IFTRUE 34406
34404: GO 34424
34406: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
34407: LD_ADDR_VAR 0 3
34411: PUSH
34412: LD_INT 4
34414: PUSH
34415: LD_INT 5
34417: PUSH
34418: EMPTY
34419: LIST
34420: LIST
34421: ST_TO_ADDR
34422: GO 35067
34424: LD_INT 22
34426: DOUBLE
34427: EQUAL
34428: IFTRUE 34432
34430: GO 34458
34432: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
34433: LD_ADDR_VAR 0 3
34437: PUSH
34438: LD_INT 11
34440: PUSH
34441: LD_INT 12
34443: PUSH
34444: LD_INT 13
34446: PUSH
34447: LD_INT 14
34449: PUSH
34450: EMPTY
34451: LIST
34452: LIST
34453: LIST
34454: LIST
34455: ST_TO_ADDR
34456: GO 35067
34458: LD_INT 23
34460: DOUBLE
34461: EQUAL
34462: IFTRUE 34466
34464: GO 34492
34466: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
34467: LD_ADDR_VAR 0 3
34471: PUSH
34472: LD_INT 11
34474: PUSH
34475: LD_INT 12
34477: PUSH
34478: LD_INT 13
34480: PUSH
34481: LD_INT 14
34483: PUSH
34484: EMPTY
34485: LIST
34486: LIST
34487: LIST
34488: LIST
34489: ST_TO_ADDR
34490: GO 35067
34492: LD_INT 24
34494: DOUBLE
34495: EQUAL
34496: IFTRUE 34500
34498: GO 34526
34500: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
34501: LD_ADDR_VAR 0 3
34505: PUSH
34506: LD_INT 11
34508: PUSH
34509: LD_INT 12
34511: PUSH
34512: LD_INT 13
34514: PUSH
34515: LD_INT 14
34517: PUSH
34518: EMPTY
34519: LIST
34520: LIST
34521: LIST
34522: LIST
34523: ST_TO_ADDR
34524: GO 35067
34526: LD_INT 30
34528: DOUBLE
34529: EQUAL
34530: IFTRUE 34534
34532: GO 34560
34534: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
34535: LD_ADDR_VAR 0 3
34539: PUSH
34540: LD_INT 11
34542: PUSH
34543: LD_INT 12
34545: PUSH
34546: LD_INT 13
34548: PUSH
34549: LD_INT 14
34551: PUSH
34552: EMPTY
34553: LIST
34554: LIST
34555: LIST
34556: LIST
34557: ST_TO_ADDR
34558: GO 35067
34560: LD_INT 25
34562: DOUBLE
34563: EQUAL
34564: IFTRUE 34568
34566: GO 34586
34568: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
34569: LD_ADDR_VAR 0 3
34573: PUSH
34574: LD_INT 13
34576: PUSH
34577: LD_INT 14
34579: PUSH
34580: EMPTY
34581: LIST
34582: LIST
34583: ST_TO_ADDR
34584: GO 35067
34586: LD_INT 27
34588: DOUBLE
34589: EQUAL
34590: IFTRUE 34594
34592: GO 34612
34594: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
34595: LD_ADDR_VAR 0 3
34599: PUSH
34600: LD_INT 13
34602: PUSH
34603: LD_INT 14
34605: PUSH
34606: EMPTY
34607: LIST
34608: LIST
34609: ST_TO_ADDR
34610: GO 35067
34612: LD_INT 92
34614: DOUBLE
34615: EQUAL
34616: IFTRUE 34620
34618: GO 34646
34620: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
34621: LD_ADDR_VAR 0 3
34625: PUSH
34626: LD_INT 11
34628: PUSH
34629: LD_INT 12
34631: PUSH
34632: LD_INT 13
34634: PUSH
34635: LD_INT 14
34637: PUSH
34638: EMPTY
34639: LIST
34640: LIST
34641: LIST
34642: LIST
34643: ST_TO_ADDR
34644: GO 35067
34646: LD_INT 28
34648: DOUBLE
34649: EQUAL
34650: IFTRUE 34654
34652: GO 34672
34654: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
34655: LD_ADDR_VAR 0 3
34659: PUSH
34660: LD_INT 13
34662: PUSH
34663: LD_INT 14
34665: PUSH
34666: EMPTY
34667: LIST
34668: LIST
34669: ST_TO_ADDR
34670: GO 35067
34672: LD_INT 29
34674: DOUBLE
34675: EQUAL
34676: IFTRUE 34680
34678: GO 34698
34680: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
34681: LD_ADDR_VAR 0 3
34685: PUSH
34686: LD_INT 13
34688: PUSH
34689: LD_INT 14
34691: PUSH
34692: EMPTY
34693: LIST
34694: LIST
34695: ST_TO_ADDR
34696: GO 35067
34698: LD_INT 31
34700: DOUBLE
34701: EQUAL
34702: IFTRUE 34706
34704: GO 34724
34706: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
34707: LD_ADDR_VAR 0 3
34711: PUSH
34712: LD_INT 13
34714: PUSH
34715: LD_INT 14
34717: PUSH
34718: EMPTY
34719: LIST
34720: LIST
34721: ST_TO_ADDR
34722: GO 35067
34724: LD_INT 26
34726: DOUBLE
34727: EQUAL
34728: IFTRUE 34732
34730: GO 34750
34732: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
34733: LD_ADDR_VAR 0 3
34737: PUSH
34738: LD_INT 13
34740: PUSH
34741: LD_INT 14
34743: PUSH
34744: EMPTY
34745: LIST
34746: LIST
34747: ST_TO_ADDR
34748: GO 35067
34750: LD_INT 42
34752: DOUBLE
34753: EQUAL
34754: IFTRUE 34758
34756: GO 34784
34758: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
34759: LD_ADDR_VAR 0 3
34763: PUSH
34764: LD_INT 21
34766: PUSH
34767: LD_INT 22
34769: PUSH
34770: LD_INT 23
34772: PUSH
34773: LD_INT 24
34775: PUSH
34776: EMPTY
34777: LIST
34778: LIST
34779: LIST
34780: LIST
34781: ST_TO_ADDR
34782: GO 35067
34784: LD_INT 43
34786: DOUBLE
34787: EQUAL
34788: IFTRUE 34792
34790: GO 34818
34792: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
34793: LD_ADDR_VAR 0 3
34797: PUSH
34798: LD_INT 21
34800: PUSH
34801: LD_INT 22
34803: PUSH
34804: LD_INT 23
34806: PUSH
34807: LD_INT 24
34809: PUSH
34810: EMPTY
34811: LIST
34812: LIST
34813: LIST
34814: LIST
34815: ST_TO_ADDR
34816: GO 35067
34818: LD_INT 44
34820: DOUBLE
34821: EQUAL
34822: IFTRUE 34826
34824: GO 34852
34826: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
34827: LD_ADDR_VAR 0 3
34831: PUSH
34832: LD_INT 21
34834: PUSH
34835: LD_INT 22
34837: PUSH
34838: LD_INT 23
34840: PUSH
34841: LD_INT 24
34843: PUSH
34844: EMPTY
34845: LIST
34846: LIST
34847: LIST
34848: LIST
34849: ST_TO_ADDR
34850: GO 35067
34852: LD_INT 45
34854: DOUBLE
34855: EQUAL
34856: IFTRUE 34860
34858: GO 34886
34860: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
34861: LD_ADDR_VAR 0 3
34865: PUSH
34866: LD_INT 21
34868: PUSH
34869: LD_INT 22
34871: PUSH
34872: LD_INT 23
34874: PUSH
34875: LD_INT 24
34877: PUSH
34878: EMPTY
34879: LIST
34880: LIST
34881: LIST
34882: LIST
34883: ST_TO_ADDR
34884: GO 35067
34886: LD_INT 49
34888: DOUBLE
34889: EQUAL
34890: IFTRUE 34894
34892: GO 34920
34894: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
34895: LD_ADDR_VAR 0 3
34899: PUSH
34900: LD_INT 21
34902: PUSH
34903: LD_INT 22
34905: PUSH
34906: LD_INT 23
34908: PUSH
34909: LD_INT 24
34911: PUSH
34912: EMPTY
34913: LIST
34914: LIST
34915: LIST
34916: LIST
34917: ST_TO_ADDR
34918: GO 35067
34920: LD_INT 51
34922: DOUBLE
34923: EQUAL
34924: IFTRUE 34928
34926: GO 34954
34928: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
34929: LD_ADDR_VAR 0 3
34933: PUSH
34934: LD_INT 21
34936: PUSH
34937: LD_INT 22
34939: PUSH
34940: LD_INT 23
34942: PUSH
34943: LD_INT 24
34945: PUSH
34946: EMPTY
34947: LIST
34948: LIST
34949: LIST
34950: LIST
34951: ST_TO_ADDR
34952: GO 35067
34954: LD_INT 52
34956: DOUBLE
34957: EQUAL
34958: IFTRUE 34962
34960: GO 34988
34962: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
34963: LD_ADDR_VAR 0 3
34967: PUSH
34968: LD_INT 21
34970: PUSH
34971: LD_INT 22
34973: PUSH
34974: LD_INT 23
34976: PUSH
34977: LD_INT 24
34979: PUSH
34980: EMPTY
34981: LIST
34982: LIST
34983: LIST
34984: LIST
34985: ST_TO_ADDR
34986: GO 35067
34988: LD_INT 53
34990: DOUBLE
34991: EQUAL
34992: IFTRUE 34996
34994: GO 35014
34996: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
34997: LD_ADDR_VAR 0 3
35001: PUSH
35002: LD_INT 23
35004: PUSH
35005: LD_INT 24
35007: PUSH
35008: EMPTY
35009: LIST
35010: LIST
35011: ST_TO_ADDR
35012: GO 35067
35014: LD_INT 46
35016: DOUBLE
35017: EQUAL
35018: IFTRUE 35022
35020: GO 35040
35022: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
35023: LD_ADDR_VAR 0 3
35027: PUSH
35028: LD_INT 23
35030: PUSH
35031: LD_INT 24
35033: PUSH
35034: EMPTY
35035: LIST
35036: LIST
35037: ST_TO_ADDR
35038: GO 35067
35040: LD_INT 47
35042: DOUBLE
35043: EQUAL
35044: IFTRUE 35048
35046: GO 35066
35048: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
35049: LD_ADDR_VAR 0 3
35053: PUSH
35054: LD_INT 23
35056: PUSH
35057: LD_INT 24
35059: PUSH
35060: EMPTY
35061: LIST
35062: LIST
35063: ST_TO_ADDR
35064: GO 35067
35066: POP
// result := ( chassis in result ) ;
35067: LD_ADDR_VAR 0 3
35071: PUSH
35072: LD_VAR 0 1
35076: PUSH
35077: LD_VAR 0 3
35081: IN
35082: ST_TO_ADDR
// end ;
35083: LD_VAR 0 3
35087: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
35088: LD_INT 0
35090: PPUSH
35091: PPUSH
35092: PPUSH
35093: PPUSH
35094: PPUSH
35095: PPUSH
35096: PPUSH
// result := array ;
35097: LD_ADDR_VAR 0 5
35101: PUSH
35102: LD_VAR 0 1
35106: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
35107: LD_VAR 0 1
35111: NOT
35112: IFTRUE 35121
35114: PUSH
35115: LD_VAR 0 2
35119: NOT
35120: OR
35121: IFTRUE 35130
35123: PUSH
35124: LD_VAR 0 3
35128: NOT
35129: OR
35130: IFTRUE 35144
35132: PUSH
35133: LD_VAR 0 2
35137: PUSH
35138: LD_VAR 0 1
35142: GREATER
35143: OR
35144: IFTRUE 35158
35146: PUSH
35147: LD_VAR 0 3
35151: PUSH
35152: LD_VAR 0 1
35156: GREATER
35157: OR
35158: IFFALSE 35162
// exit ;
35160: GO 35458
// if direction then
35162: LD_VAR 0 4
35166: IFFALSE 35230
// begin d := 1 ;
35168: LD_ADDR_VAR 0 9
35172: PUSH
35173: LD_INT 1
35175: ST_TO_ADDR
// if i_from > i_to then
35176: LD_VAR 0 2
35180: PUSH
35181: LD_VAR 0 3
35185: GREATER
35186: IFFALSE 35212
// length := ( array - i_from ) + i_to else
35188: LD_ADDR_VAR 0 11
35192: PUSH
35193: LD_VAR 0 1
35197: PUSH
35198: LD_VAR 0 2
35202: MINUS
35203: PUSH
35204: LD_VAR 0 3
35208: PLUS
35209: ST_TO_ADDR
35210: GO 35228
// length := i_to - i_from ;
35212: LD_ADDR_VAR 0 11
35216: PUSH
35217: LD_VAR 0 3
35221: PUSH
35222: LD_VAR 0 2
35226: MINUS
35227: ST_TO_ADDR
// end else
35228: GO 35291
// begin d := - 1 ;
35230: LD_ADDR_VAR 0 9
35234: PUSH
35235: LD_INT 1
35237: NEG
35238: ST_TO_ADDR
// if i_from > i_to then
35239: LD_VAR 0 2
35243: PUSH
35244: LD_VAR 0 3
35248: GREATER
35249: IFFALSE 35269
// length := i_from - i_to else
35251: LD_ADDR_VAR 0 11
35255: PUSH
35256: LD_VAR 0 2
35260: PUSH
35261: LD_VAR 0 3
35265: MINUS
35266: ST_TO_ADDR
35267: GO 35291
// length := ( array - i_to ) + i_from ;
35269: LD_ADDR_VAR 0 11
35273: PUSH
35274: LD_VAR 0 1
35278: PUSH
35279: LD_VAR 0 3
35283: MINUS
35284: PUSH
35285: LD_VAR 0 2
35289: PLUS
35290: ST_TO_ADDR
// end ; if not length then
35291: LD_VAR 0 11
35295: NOT
35296: IFFALSE 35300
// exit ;
35298: GO 35458
// tmp := array ;
35300: LD_ADDR_VAR 0 10
35304: PUSH
35305: LD_VAR 0 1
35309: ST_TO_ADDR
// for i = 1 to length do
35310: LD_ADDR_VAR 0 6
35314: PUSH
35315: DOUBLE
35316: LD_INT 1
35318: DEC
35319: ST_TO_ADDR
35320: LD_VAR 0 11
35324: PUSH
35325: FOR_TO
35326: IFFALSE 35446
// begin for j = 1 to array do
35328: LD_ADDR_VAR 0 7
35332: PUSH
35333: DOUBLE
35334: LD_INT 1
35336: DEC
35337: ST_TO_ADDR
35338: LD_VAR 0 1
35342: PUSH
35343: FOR_TO
35344: IFFALSE 35432
// begin k := j + d ;
35346: LD_ADDR_VAR 0 8
35350: PUSH
35351: LD_VAR 0 7
35355: PUSH
35356: LD_VAR 0 9
35360: PLUS
35361: ST_TO_ADDR
// if k > array then
35362: LD_VAR 0 8
35366: PUSH
35367: LD_VAR 0 1
35371: GREATER
35372: IFFALSE 35382
// k := 1 ;
35374: LD_ADDR_VAR 0 8
35378: PUSH
35379: LD_INT 1
35381: ST_TO_ADDR
// if not k then
35382: LD_VAR 0 8
35386: NOT
35387: IFFALSE 35399
// k := array ;
35389: LD_ADDR_VAR 0 8
35393: PUSH
35394: LD_VAR 0 1
35398: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
35399: LD_ADDR_VAR 0 10
35403: PUSH
35404: LD_VAR 0 10
35408: PPUSH
35409: LD_VAR 0 8
35413: PPUSH
35414: LD_VAR 0 1
35418: PUSH
35419: LD_VAR 0 7
35423: ARRAY
35424: PPUSH
35425: CALL_OW 1
35429: ST_TO_ADDR
// end ;
35430: GO 35343
35432: POP
35433: POP
// array := tmp ;
35434: LD_ADDR_VAR 0 1
35438: PUSH
35439: LD_VAR 0 10
35443: ST_TO_ADDR
// end ;
35444: GO 35325
35446: POP
35447: POP
// result := array ;
35448: LD_ADDR_VAR 0 5
35452: PUSH
35453: LD_VAR 0 1
35457: ST_TO_ADDR
// end ;
35458: LD_VAR 0 5
35462: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
35463: LD_INT 0
35465: PPUSH
35466: PPUSH
// result := 0 ;
35467: LD_ADDR_VAR 0 3
35471: PUSH
35472: LD_INT 0
35474: ST_TO_ADDR
// if not array or not value in array then
35475: LD_VAR 0 1
35479: NOT
35480: IFTRUE 35495
35482: PUSH
35483: LD_VAR 0 2
35487: PUSH
35488: LD_VAR 0 1
35492: IN
35493: NOT
35494: OR
35495: IFFALSE 35499
// exit ;
35497: GO 35553
// for i = 1 to array do
35499: LD_ADDR_VAR 0 4
35503: PUSH
35504: DOUBLE
35505: LD_INT 1
35507: DEC
35508: ST_TO_ADDR
35509: LD_VAR 0 1
35513: PUSH
35514: FOR_TO
35515: IFFALSE 35551
// if value = array [ i ] then
35517: LD_VAR 0 2
35521: PUSH
35522: LD_VAR 0 1
35526: PUSH
35527: LD_VAR 0 4
35531: ARRAY
35532: EQUAL
35533: IFFALSE 35549
// begin result := i ;
35535: LD_ADDR_VAR 0 3
35539: PUSH
35540: LD_VAR 0 4
35544: ST_TO_ADDR
// exit ;
35545: POP
35546: POP
35547: GO 35553
// end ;
35549: GO 35514
35551: POP
35552: POP
// end ;
35553: LD_VAR 0 3
35557: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
35558: LD_INT 0
35560: PPUSH
// vc_chassis := chassis ;
35561: LD_ADDR_OWVAR 37
35565: PUSH
35566: LD_VAR 0 1
35570: ST_TO_ADDR
// vc_engine := engine ;
35571: LD_ADDR_OWVAR 39
35575: PUSH
35576: LD_VAR 0 2
35580: ST_TO_ADDR
// vc_control := control ;
35581: LD_ADDR_OWVAR 38
35585: PUSH
35586: LD_VAR 0 3
35590: ST_TO_ADDR
// vc_weapon := weapon ;
35591: LD_ADDR_OWVAR 40
35595: PUSH
35596: LD_VAR 0 4
35600: ST_TO_ADDR
// vc_fuel_battery := fuel ;
35601: LD_ADDR_OWVAR 41
35605: PUSH
35606: LD_VAR 0 5
35610: ST_TO_ADDR
// end ;
35611: LD_VAR 0 6
35615: RET
// export function WantPlant ( unit ) ; var task ; begin
35616: LD_INT 0
35618: PPUSH
35619: PPUSH
// result := false ;
35620: LD_ADDR_VAR 0 2
35624: PUSH
35625: LD_INT 0
35627: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
35628: LD_ADDR_VAR 0 3
35632: PUSH
35633: LD_VAR 0 1
35637: PPUSH
35638: CALL_OW 437
35642: ST_TO_ADDR
// if task then
35643: LD_VAR 0 3
35647: IFFALSE 35675
// if task [ 1 ] [ 1 ] = p then
35649: LD_VAR 0 3
35653: PUSH
35654: LD_INT 1
35656: ARRAY
35657: PUSH
35658: LD_INT 1
35660: ARRAY
35661: PUSH
35662: LD_STRING p
35664: EQUAL
35665: IFFALSE 35675
// result := true ;
35667: LD_ADDR_VAR 0 2
35671: PUSH
35672: LD_INT 1
35674: ST_TO_ADDR
// end ;
35675: LD_VAR 0 2
35679: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
35680: LD_INT 0
35682: PPUSH
35683: PPUSH
35684: PPUSH
35685: PPUSH
// if pos < 1 then
35686: LD_VAR 0 2
35690: PUSH
35691: LD_INT 1
35693: LESS
35694: IFFALSE 35698
// exit ;
35696: GO 36001
// if pos = 1 then
35698: LD_VAR 0 2
35702: PUSH
35703: LD_INT 1
35705: EQUAL
35706: IFFALSE 35739
// result := Replace ( arr , pos [ 1 ] , value ) else
35708: LD_ADDR_VAR 0 4
35712: PUSH
35713: LD_VAR 0 1
35717: PPUSH
35718: LD_VAR 0 2
35722: PUSH
35723: LD_INT 1
35725: ARRAY
35726: PPUSH
35727: LD_VAR 0 3
35731: PPUSH
35732: CALL_OW 1
35736: ST_TO_ADDR
35737: GO 36001
// begin tmp := arr ;
35739: LD_ADDR_VAR 0 6
35743: PUSH
35744: LD_VAR 0 1
35748: ST_TO_ADDR
// s_arr := [ tmp ] ;
35749: LD_ADDR_VAR 0 7
35753: PUSH
35754: LD_VAR 0 6
35758: PUSH
35759: EMPTY
35760: LIST
35761: ST_TO_ADDR
// for i = 1 to pos - 1 do
35762: LD_ADDR_VAR 0 5
35766: PUSH
35767: DOUBLE
35768: LD_INT 1
35770: DEC
35771: ST_TO_ADDR
35772: LD_VAR 0 2
35776: PUSH
35777: LD_INT 1
35779: MINUS
35780: PUSH
35781: FOR_TO
35782: IFFALSE 35827
// begin tmp := tmp [ pos [ i ] ] ;
35784: LD_ADDR_VAR 0 6
35788: PUSH
35789: LD_VAR 0 6
35793: PUSH
35794: LD_VAR 0 2
35798: PUSH
35799: LD_VAR 0 5
35803: ARRAY
35804: ARRAY
35805: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
35806: LD_ADDR_VAR 0 7
35810: PUSH
35811: LD_VAR 0 7
35815: PUSH
35816: LD_VAR 0 6
35820: PUSH
35821: EMPTY
35822: LIST
35823: ADD
35824: ST_TO_ADDR
// end ;
35825: GO 35781
35827: POP
35828: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
35829: LD_ADDR_VAR 0 6
35833: PUSH
35834: LD_VAR 0 6
35838: PPUSH
35839: LD_VAR 0 2
35843: PUSH
35844: LD_VAR 0 2
35848: ARRAY
35849: PPUSH
35850: LD_VAR 0 3
35854: PPUSH
35855: CALL_OW 1
35859: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
35860: LD_ADDR_VAR 0 7
35864: PUSH
35865: LD_VAR 0 7
35869: PPUSH
35870: LD_VAR 0 7
35874: PPUSH
35875: LD_VAR 0 6
35879: PPUSH
35880: CALL_OW 1
35884: ST_TO_ADDR
// for i = s_arr downto 2 do
35885: LD_ADDR_VAR 0 5
35889: PUSH
35890: DOUBLE
35891: LD_VAR 0 7
35895: INC
35896: ST_TO_ADDR
35897: LD_INT 2
35899: PUSH
35900: FOR_DOWNTO
35901: IFFALSE 35985
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
35903: LD_ADDR_VAR 0 6
35907: PUSH
35908: LD_VAR 0 7
35912: PUSH
35913: LD_VAR 0 5
35917: PUSH
35918: LD_INT 1
35920: MINUS
35921: ARRAY
35922: PPUSH
35923: LD_VAR 0 2
35927: PUSH
35928: LD_VAR 0 5
35932: PUSH
35933: LD_INT 1
35935: MINUS
35936: ARRAY
35937: PPUSH
35938: LD_VAR 0 7
35942: PUSH
35943: LD_VAR 0 5
35947: ARRAY
35948: PPUSH
35949: CALL_OW 1
35953: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
35954: LD_ADDR_VAR 0 7
35958: PUSH
35959: LD_VAR 0 7
35963: PPUSH
35964: LD_VAR 0 5
35968: PUSH
35969: LD_INT 1
35971: MINUS
35972: PPUSH
35973: LD_VAR 0 6
35977: PPUSH
35978: CALL_OW 1
35982: ST_TO_ADDR
// end ;
35983: GO 35900
35985: POP
35986: POP
// result := s_arr [ 1 ] ;
35987: LD_ADDR_VAR 0 4
35991: PUSH
35992: LD_VAR 0 7
35996: PUSH
35997: LD_INT 1
35999: ARRAY
36000: ST_TO_ADDR
// end ; end ;
36001: LD_VAR 0 4
36005: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
36006: LD_INT 0
36008: PPUSH
36009: PPUSH
// if not list then
36010: LD_VAR 0 1
36014: NOT
36015: IFFALSE 36019
// exit ;
36017: GO 36110
// i := list [ pos1 ] ;
36019: LD_ADDR_VAR 0 5
36023: PUSH
36024: LD_VAR 0 1
36028: PUSH
36029: LD_VAR 0 2
36033: ARRAY
36034: ST_TO_ADDR
// if not i then
36035: LD_VAR 0 5
36039: NOT
36040: IFFALSE 36044
// exit ;
36042: GO 36110
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
36044: LD_ADDR_VAR 0 1
36048: PUSH
36049: LD_VAR 0 1
36053: PPUSH
36054: LD_VAR 0 2
36058: PPUSH
36059: LD_VAR 0 1
36063: PUSH
36064: LD_VAR 0 3
36068: ARRAY
36069: PPUSH
36070: CALL_OW 1
36074: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
36075: LD_ADDR_VAR 0 1
36079: PUSH
36080: LD_VAR 0 1
36084: PPUSH
36085: LD_VAR 0 3
36089: PPUSH
36090: LD_VAR 0 5
36094: PPUSH
36095: CALL_OW 1
36099: ST_TO_ADDR
// result := list ;
36100: LD_ADDR_VAR 0 4
36104: PUSH
36105: LD_VAR 0 1
36109: ST_TO_ADDR
// end ;
36110: LD_VAR 0 4
36114: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
36115: LD_INT 0
36117: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
36118: LD_ADDR_VAR 0 5
36122: PUSH
36123: LD_VAR 0 1
36127: PPUSH
36128: CALL_OW 250
36132: PPUSH
36133: LD_VAR 0 1
36137: PPUSH
36138: CALL_OW 251
36142: PPUSH
36143: LD_VAR 0 2
36147: PPUSH
36148: LD_VAR 0 3
36152: PPUSH
36153: LD_VAR 0 4
36157: PPUSH
36158: CALL 36540 0 5
36162: ST_TO_ADDR
// end ;
36163: LD_VAR 0 5
36167: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
36168: LD_INT 0
36170: PPUSH
36171: PPUSH
36172: PPUSH
36173: PPUSH
// if not list or not unit then
36174: LD_VAR 0 2
36178: NOT
36179: IFTRUE 36188
36181: PUSH
36182: LD_VAR 0 1
36186: NOT
36187: OR
36188: IFFALSE 36192
// exit ;
36190: GO 36535
// result := [ ] ;
36192: LD_ADDR_VAR 0 5
36196: PUSH
36197: EMPTY
36198: ST_TO_ADDR
// for i in list do
36199: LD_ADDR_VAR 0 6
36203: PUSH
36204: LD_VAR 0 2
36208: PUSH
36209: FOR_IN
36210: IFFALSE 36428
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
36212: LD_ADDR_VAR 0 8
36216: PUSH
36217: LD_VAR 0 1
36221: PPUSH
36222: LD_VAR 0 6
36226: PUSH
36227: LD_INT 1
36229: ARRAY
36230: PPUSH
36231: LD_VAR 0 6
36235: PUSH
36236: LD_INT 2
36238: ARRAY
36239: PPUSH
36240: CALL_OW 297
36244: ST_TO_ADDR
// if not Count ( result ) then
36245: LD_VAR 0 5
36249: PPUSH
36250: CALL 32796 0 1
36254: NOT
36255: IFFALSE 36288
// begin result := Join ( result , [ i , tmp ] ) ;
36257: LD_ADDR_VAR 0 5
36261: PUSH
36262: LD_VAR 0 5
36266: PPUSH
36267: LD_VAR 0 6
36271: PUSH
36272: LD_VAR 0 8
36276: PUSH
36277: EMPTY
36278: LIST
36279: LIST
36280: PPUSH
36281: CALL 68728 0 2
36285: ST_TO_ADDR
// continue ;
36286: GO 36209
// end ; if result [ result ] [ 2 ] <= tmp then
36288: LD_VAR 0 5
36292: PUSH
36293: LD_VAR 0 5
36297: ARRAY
36298: PUSH
36299: LD_INT 2
36301: ARRAY
36302: PUSH
36303: LD_VAR 0 8
36307: LESSEQUAL
36308: IFFALSE 36341
// result := Join ( result , [ i , tmp ] ) else
36310: LD_ADDR_VAR 0 5
36314: PUSH
36315: LD_VAR 0 5
36319: PPUSH
36320: LD_VAR 0 6
36324: PUSH
36325: LD_VAR 0 8
36329: PUSH
36330: EMPTY
36331: LIST
36332: LIST
36333: PPUSH
36334: CALL 68728 0 2
36338: ST_TO_ADDR
36339: GO 36426
// begin for j := 1 to Count ( result ) do
36341: LD_ADDR_VAR 0 7
36345: PUSH
36346: DOUBLE
36347: LD_INT 1
36349: DEC
36350: ST_TO_ADDR
36351: LD_VAR 0 5
36355: PPUSH
36356: CALL 32796 0 1
36360: PUSH
36361: FOR_TO
36362: IFFALSE 36424
// begin if tmp < result [ j ] [ 2 ] then
36364: LD_VAR 0 8
36368: PUSH
36369: LD_VAR 0 5
36373: PUSH
36374: LD_VAR 0 7
36378: ARRAY
36379: PUSH
36380: LD_INT 2
36382: ARRAY
36383: LESS
36384: IFFALSE 36422
// begin result := Insert ( result , j , [ i , tmp ] ) ;
36386: LD_ADDR_VAR 0 5
36390: PUSH
36391: LD_VAR 0 5
36395: PPUSH
36396: LD_VAR 0 7
36400: PPUSH
36401: LD_VAR 0 6
36405: PUSH
36406: LD_VAR 0 8
36410: PUSH
36411: EMPTY
36412: LIST
36413: LIST
36414: PPUSH
36415: CALL_OW 2
36419: ST_TO_ADDR
// break ;
36420: GO 36424
// end ; end ;
36422: GO 36361
36424: POP
36425: POP
// end ; end ;
36426: GO 36209
36428: POP
36429: POP
// if result and not asc then
36430: LD_VAR 0 5
36434: IFFALSE 36443
36436: PUSH
36437: LD_VAR 0 3
36441: NOT
36442: AND
36443: IFFALSE 36460
// result := ReverseArray ( result ) ;
36445: LD_ADDR_VAR 0 5
36449: PUSH
36450: LD_VAR 0 5
36454: PPUSH
36455: CALL 63818 0 1
36459: ST_TO_ADDR
// tmp := [ ] ;
36460: LD_ADDR_VAR 0 8
36464: PUSH
36465: EMPTY
36466: ST_TO_ADDR
// if mode then
36467: LD_VAR 0 4
36471: IFFALSE 36535
// begin for i := 1 to result do
36473: LD_ADDR_VAR 0 6
36477: PUSH
36478: DOUBLE
36479: LD_INT 1
36481: DEC
36482: ST_TO_ADDR
36483: LD_VAR 0 5
36487: PUSH
36488: FOR_TO
36489: IFFALSE 36523
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
36491: LD_ADDR_VAR 0 8
36495: PUSH
36496: LD_VAR 0 8
36500: PPUSH
36501: LD_VAR 0 5
36505: PUSH
36506: LD_VAR 0 6
36510: ARRAY
36511: PUSH
36512: LD_INT 1
36514: ARRAY
36515: PPUSH
36516: CALL 68728 0 2
36520: ST_TO_ADDR
36521: GO 36488
36523: POP
36524: POP
// result := tmp ;
36525: LD_ADDR_VAR 0 5
36529: PUSH
36530: LD_VAR 0 8
36534: ST_TO_ADDR
// end ; end ;
36535: LD_VAR 0 5
36539: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
36540: LD_INT 0
36542: PPUSH
36543: PPUSH
36544: PPUSH
36545: PPUSH
// if not list then
36546: LD_VAR 0 3
36550: NOT
36551: IFFALSE 36555
// exit ;
36553: GO 36945
// result := [ ] ;
36555: LD_ADDR_VAR 0 6
36559: PUSH
36560: EMPTY
36561: ST_TO_ADDR
// for i in list do
36562: LD_ADDR_VAR 0 7
36566: PUSH
36567: LD_VAR 0 3
36571: PUSH
36572: FOR_IN
36573: IFFALSE 36775
// begin tmp := GetDistUnitXY ( i , x , y ) ;
36575: LD_ADDR_VAR 0 9
36579: PUSH
36580: LD_VAR 0 7
36584: PPUSH
36585: LD_VAR 0 1
36589: PPUSH
36590: LD_VAR 0 2
36594: PPUSH
36595: CALL_OW 297
36599: ST_TO_ADDR
// if not result then
36600: LD_VAR 0 6
36604: NOT
36605: IFFALSE 36631
// result := [ [ i , tmp ] ] else
36607: LD_ADDR_VAR 0 6
36611: PUSH
36612: LD_VAR 0 7
36616: PUSH
36617: LD_VAR 0 9
36621: PUSH
36622: EMPTY
36623: LIST
36624: LIST
36625: PUSH
36626: EMPTY
36627: LIST
36628: ST_TO_ADDR
36629: GO 36773
// begin if result [ result ] [ 2 ] <= tmp then
36631: LD_VAR 0 6
36635: PUSH
36636: LD_VAR 0 6
36640: ARRAY
36641: PUSH
36642: LD_INT 2
36644: ARRAY
36645: PUSH
36646: LD_VAR 0 9
36650: LESSEQUAL
36651: IFFALSE 36693
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
36653: LD_ADDR_VAR 0 6
36657: PUSH
36658: LD_VAR 0 6
36662: PPUSH
36663: LD_VAR 0 6
36667: PUSH
36668: LD_INT 1
36670: PLUS
36671: PPUSH
36672: LD_VAR 0 7
36676: PUSH
36677: LD_VAR 0 9
36681: PUSH
36682: EMPTY
36683: LIST
36684: LIST
36685: PPUSH
36686: CALL_OW 2
36690: ST_TO_ADDR
36691: GO 36773
// for j := 1 to result do
36693: LD_ADDR_VAR 0 8
36697: PUSH
36698: DOUBLE
36699: LD_INT 1
36701: DEC
36702: ST_TO_ADDR
36703: LD_VAR 0 6
36707: PUSH
36708: FOR_TO
36709: IFFALSE 36771
// begin if tmp < result [ j ] [ 2 ] then
36711: LD_VAR 0 9
36715: PUSH
36716: LD_VAR 0 6
36720: PUSH
36721: LD_VAR 0 8
36725: ARRAY
36726: PUSH
36727: LD_INT 2
36729: ARRAY
36730: LESS
36731: IFFALSE 36769
// begin result := Insert ( result , j , [ i , tmp ] ) ;
36733: LD_ADDR_VAR 0 6
36737: PUSH
36738: LD_VAR 0 6
36742: PPUSH
36743: LD_VAR 0 8
36747: PPUSH
36748: LD_VAR 0 7
36752: PUSH
36753: LD_VAR 0 9
36757: PUSH
36758: EMPTY
36759: LIST
36760: LIST
36761: PPUSH
36762: CALL_OW 2
36766: ST_TO_ADDR
// break ;
36767: GO 36771
// end ; end ;
36769: GO 36708
36771: POP
36772: POP
// end ; end ;
36773: GO 36572
36775: POP
36776: POP
// if result and not asc then
36777: LD_VAR 0 6
36781: IFFALSE 36790
36783: PUSH
36784: LD_VAR 0 4
36788: NOT
36789: AND
36790: IFFALSE 36865
// begin tmp := result ;
36792: LD_ADDR_VAR 0 9
36796: PUSH
36797: LD_VAR 0 6
36801: ST_TO_ADDR
// for i = tmp downto 1 do
36802: LD_ADDR_VAR 0 7
36806: PUSH
36807: DOUBLE
36808: LD_VAR 0 9
36812: INC
36813: ST_TO_ADDR
36814: LD_INT 1
36816: PUSH
36817: FOR_DOWNTO
36818: IFFALSE 36863
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
36820: LD_ADDR_VAR 0 6
36824: PUSH
36825: LD_VAR 0 6
36829: PPUSH
36830: LD_VAR 0 9
36834: PUSH
36835: LD_VAR 0 7
36839: MINUS
36840: PUSH
36841: LD_INT 1
36843: PLUS
36844: PPUSH
36845: LD_VAR 0 9
36849: PUSH
36850: LD_VAR 0 7
36854: ARRAY
36855: PPUSH
36856: CALL_OW 1
36860: ST_TO_ADDR
36861: GO 36817
36863: POP
36864: POP
// end ; tmp := [ ] ;
36865: LD_ADDR_VAR 0 9
36869: PUSH
36870: EMPTY
36871: ST_TO_ADDR
// if mode then
36872: LD_VAR 0 5
36876: IFFALSE 36945
// begin for i = 1 to result do
36878: LD_ADDR_VAR 0 7
36882: PUSH
36883: DOUBLE
36884: LD_INT 1
36886: DEC
36887: ST_TO_ADDR
36888: LD_VAR 0 6
36892: PUSH
36893: FOR_TO
36894: IFFALSE 36933
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
36896: LD_ADDR_VAR 0 9
36900: PUSH
36901: LD_VAR 0 9
36905: PPUSH
36906: LD_VAR 0 7
36910: PPUSH
36911: LD_VAR 0 6
36915: PUSH
36916: LD_VAR 0 7
36920: ARRAY
36921: PUSH
36922: LD_INT 1
36924: ARRAY
36925: PPUSH
36926: CALL_OW 1
36930: ST_TO_ADDR
36931: GO 36893
36933: POP
36934: POP
// result := tmp ;
36935: LD_ADDR_VAR 0 6
36939: PUSH
36940: LD_VAR 0 9
36944: ST_TO_ADDR
// end ; end ;
36945: LD_VAR 0 6
36949: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
36950: LD_INT 0
36952: PPUSH
36953: PPUSH
36954: PPUSH
36955: PPUSH
36956: PPUSH
36957: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
36958: LD_ADDR_VAR 0 5
36962: PUSH
36963: LD_INT 0
36965: PUSH
36966: LD_INT 0
36968: PUSH
36969: LD_INT 0
36971: PUSH
36972: EMPTY
36973: PUSH
36974: EMPTY
36975: LIST
36976: LIST
36977: LIST
36978: LIST
36979: ST_TO_ADDR
// if not x or not y then
36980: LD_VAR 0 2
36984: NOT
36985: IFTRUE 36994
36987: PUSH
36988: LD_VAR 0 3
36992: NOT
36993: OR
36994: IFFALSE 36998
// exit ;
36996: GO 38654
// if not range then
36998: LD_VAR 0 4
37002: NOT
37003: IFFALSE 37013
// range := 10 ;
37005: LD_ADDR_VAR 0 4
37009: PUSH
37010: LD_INT 10
37012: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
37013: LD_ADDR_VAR 0 8
37017: PUSH
37018: LD_INT 81
37020: PUSH
37021: LD_VAR 0 1
37025: PUSH
37026: EMPTY
37027: LIST
37028: LIST
37029: PUSH
37030: LD_INT 92
37032: PUSH
37033: LD_VAR 0 2
37037: PUSH
37038: LD_VAR 0 3
37042: PUSH
37043: LD_VAR 0 4
37047: PUSH
37048: EMPTY
37049: LIST
37050: LIST
37051: LIST
37052: LIST
37053: PUSH
37054: LD_INT 3
37056: PUSH
37057: LD_INT 21
37059: PUSH
37060: LD_INT 3
37062: PUSH
37063: EMPTY
37064: LIST
37065: LIST
37066: PUSH
37067: EMPTY
37068: LIST
37069: LIST
37070: PUSH
37071: EMPTY
37072: LIST
37073: LIST
37074: LIST
37075: PPUSH
37076: CALL_OW 69
37080: ST_TO_ADDR
// if not tmp then
37081: LD_VAR 0 8
37085: NOT
37086: IFFALSE 37090
// exit ;
37088: GO 38654
// for i in tmp do
37090: LD_ADDR_VAR 0 6
37094: PUSH
37095: LD_VAR 0 8
37099: PUSH
37100: FOR_IN
37101: IFFALSE 38629
// begin points := [ 0 , 0 , 0 ] ;
37103: LD_ADDR_VAR 0 9
37107: PUSH
37108: LD_INT 0
37110: PUSH
37111: LD_INT 0
37113: PUSH
37114: LD_INT 0
37116: PUSH
37117: EMPTY
37118: LIST
37119: LIST
37120: LIST
37121: ST_TO_ADDR
// bpoints := 1 ;
37122: LD_ADDR_VAR 0 10
37126: PUSH
37127: LD_INT 1
37129: ST_TO_ADDR
// case GetType ( i ) of unit_human :
37130: LD_VAR 0 6
37134: PPUSH
37135: CALL_OW 247
37139: PUSH
37140: LD_INT 1
37142: DOUBLE
37143: EQUAL
37144: IFTRUE 37148
37146: GO 37730
37148: POP
// begin if GetClass ( i ) = 1 then
37149: LD_VAR 0 6
37153: PPUSH
37154: CALL_OW 257
37158: PUSH
37159: LD_INT 1
37161: EQUAL
37162: IFFALSE 37183
// points := [ 10 , 5 , 3 ] ;
37164: LD_ADDR_VAR 0 9
37168: PUSH
37169: LD_INT 10
37171: PUSH
37172: LD_INT 5
37174: PUSH
37175: LD_INT 3
37177: PUSH
37178: EMPTY
37179: LIST
37180: LIST
37181: LIST
37182: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
37183: LD_VAR 0 6
37187: PPUSH
37188: CALL_OW 257
37192: PUSH
37193: LD_INT 2
37195: PUSH
37196: LD_INT 3
37198: PUSH
37199: LD_INT 4
37201: PUSH
37202: EMPTY
37203: LIST
37204: LIST
37205: LIST
37206: IN
37207: IFFALSE 37228
// points := [ 3 , 2 , 1 ] ;
37209: LD_ADDR_VAR 0 9
37213: PUSH
37214: LD_INT 3
37216: PUSH
37217: LD_INT 2
37219: PUSH
37220: LD_INT 1
37222: PUSH
37223: EMPTY
37224: LIST
37225: LIST
37226: LIST
37227: ST_TO_ADDR
// if GetClass ( i ) = 5 then
37228: LD_VAR 0 6
37232: PPUSH
37233: CALL_OW 257
37237: PUSH
37238: LD_INT 5
37240: EQUAL
37241: IFFALSE 37262
// points := [ 130 , 5 , 2 ] ;
37243: LD_ADDR_VAR 0 9
37247: PUSH
37248: LD_INT 130
37250: PUSH
37251: LD_INT 5
37253: PUSH
37254: LD_INT 2
37256: PUSH
37257: EMPTY
37258: LIST
37259: LIST
37260: LIST
37261: ST_TO_ADDR
// if GetClass ( i ) = 8 then
37262: LD_VAR 0 6
37266: PPUSH
37267: CALL_OW 257
37271: PUSH
37272: LD_INT 8
37274: EQUAL
37275: IFFALSE 37296
// points := [ 35 , 35 , 30 ] ;
37277: LD_ADDR_VAR 0 9
37281: PUSH
37282: LD_INT 35
37284: PUSH
37285: LD_INT 35
37287: PUSH
37288: LD_INT 30
37290: PUSH
37291: EMPTY
37292: LIST
37293: LIST
37294: LIST
37295: ST_TO_ADDR
// if GetClass ( i ) = 9 then
37296: LD_VAR 0 6
37300: PPUSH
37301: CALL_OW 257
37305: PUSH
37306: LD_INT 9
37308: EQUAL
37309: IFFALSE 37330
// points := [ 20 , 55 , 40 ] ;
37311: LD_ADDR_VAR 0 9
37315: PUSH
37316: LD_INT 20
37318: PUSH
37319: LD_INT 55
37321: PUSH
37322: LD_INT 40
37324: PUSH
37325: EMPTY
37326: LIST
37327: LIST
37328: LIST
37329: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
37330: LD_VAR 0 6
37334: PPUSH
37335: CALL_OW 257
37339: PUSH
37340: LD_INT 12
37342: PUSH
37343: LD_INT 16
37345: PUSH
37346: EMPTY
37347: LIST
37348: LIST
37349: IN
37350: IFFALSE 37371
// points := [ 5 , 3 , 2 ] ;
37352: LD_ADDR_VAR 0 9
37356: PUSH
37357: LD_INT 5
37359: PUSH
37360: LD_INT 3
37362: PUSH
37363: LD_INT 2
37365: PUSH
37366: EMPTY
37367: LIST
37368: LIST
37369: LIST
37370: ST_TO_ADDR
// if GetClass ( i ) = 17 then
37371: LD_VAR 0 6
37375: PPUSH
37376: CALL_OW 257
37380: PUSH
37381: LD_INT 17
37383: EQUAL
37384: IFFALSE 37405
// points := [ 100 , 50 , 75 ] ;
37386: LD_ADDR_VAR 0 9
37390: PUSH
37391: LD_INT 100
37393: PUSH
37394: LD_INT 50
37396: PUSH
37397: LD_INT 75
37399: PUSH
37400: EMPTY
37401: LIST
37402: LIST
37403: LIST
37404: ST_TO_ADDR
// if GetClass ( i ) = 15 then
37405: LD_VAR 0 6
37409: PPUSH
37410: CALL_OW 257
37414: PUSH
37415: LD_INT 15
37417: EQUAL
37418: IFFALSE 37439
// points := [ 10 , 5 , 3 ] ;
37420: LD_ADDR_VAR 0 9
37424: PUSH
37425: LD_INT 10
37427: PUSH
37428: LD_INT 5
37430: PUSH
37431: LD_INT 3
37433: PUSH
37434: EMPTY
37435: LIST
37436: LIST
37437: LIST
37438: ST_TO_ADDR
// if GetClass ( i ) = 14 then
37439: LD_VAR 0 6
37443: PPUSH
37444: CALL_OW 257
37448: PUSH
37449: LD_INT 14
37451: EQUAL
37452: IFFALSE 37473
// points := [ 10 , 0 , 0 ] ;
37454: LD_ADDR_VAR 0 9
37458: PUSH
37459: LD_INT 10
37461: PUSH
37462: LD_INT 0
37464: PUSH
37465: LD_INT 0
37467: PUSH
37468: EMPTY
37469: LIST
37470: LIST
37471: LIST
37472: ST_TO_ADDR
// if GetClass ( i ) = 11 then
37473: LD_VAR 0 6
37477: PPUSH
37478: CALL_OW 257
37482: PUSH
37483: LD_INT 11
37485: EQUAL
37486: IFFALSE 37507
// points := [ 30 , 10 , 5 ] ;
37488: LD_ADDR_VAR 0 9
37492: PUSH
37493: LD_INT 30
37495: PUSH
37496: LD_INT 10
37498: PUSH
37499: LD_INT 5
37501: PUSH
37502: EMPTY
37503: LIST
37504: LIST
37505: LIST
37506: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
37507: LD_VAR 0 1
37511: PPUSH
37512: LD_INT 5
37514: PPUSH
37515: CALL_OW 321
37519: PUSH
37520: LD_INT 2
37522: EQUAL
37523: IFFALSE 37540
// bpoints := bpoints * 1.8 ;
37525: LD_ADDR_VAR 0 10
37529: PUSH
37530: LD_VAR 0 10
37534: PUSH
37535: LD_REAL  1.80000000000000E+0000
37538: MUL
37539: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
37540: LD_VAR 0 6
37544: PPUSH
37545: CALL_OW 257
37549: PUSH
37550: LD_INT 1
37552: PUSH
37553: LD_INT 2
37555: PUSH
37556: LD_INT 3
37558: PUSH
37559: LD_INT 4
37561: PUSH
37562: EMPTY
37563: LIST
37564: LIST
37565: LIST
37566: LIST
37567: IN
37568: IFFALSE 37588
37570: PUSH
37571: LD_VAR 0 1
37575: PPUSH
37576: LD_INT 51
37578: PPUSH
37579: CALL_OW 321
37583: PUSH
37584: LD_INT 2
37586: EQUAL
37587: AND
37588: IFFALSE 37605
// bpoints := bpoints * 1.2 ;
37590: LD_ADDR_VAR 0 10
37594: PUSH
37595: LD_VAR 0 10
37599: PUSH
37600: LD_REAL  1.20000000000000E+0000
37603: MUL
37604: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
37605: LD_VAR 0 6
37609: PPUSH
37610: CALL_OW 257
37614: PUSH
37615: LD_INT 5
37617: PUSH
37618: LD_INT 7
37620: PUSH
37621: LD_INT 9
37623: PUSH
37624: EMPTY
37625: LIST
37626: LIST
37627: LIST
37628: IN
37629: IFFALSE 37649
37631: PUSH
37632: LD_VAR 0 1
37636: PPUSH
37637: LD_INT 52
37639: PPUSH
37640: CALL_OW 321
37644: PUSH
37645: LD_INT 2
37647: EQUAL
37648: AND
37649: IFFALSE 37666
// bpoints := bpoints * 1.5 ;
37651: LD_ADDR_VAR 0 10
37655: PUSH
37656: LD_VAR 0 10
37660: PUSH
37661: LD_REAL  1.50000000000000E+0000
37664: MUL
37665: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
37666: LD_VAR 0 1
37670: PPUSH
37671: LD_INT 66
37673: PPUSH
37674: CALL_OW 321
37678: PUSH
37679: LD_INT 2
37681: EQUAL
37682: IFFALSE 37699
// bpoints := bpoints * 1.1 ;
37684: LD_ADDR_VAR 0 10
37688: PUSH
37689: LD_VAR 0 10
37693: PUSH
37694: LD_REAL  1.10000000000000E+0000
37697: MUL
37698: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
37699: LD_ADDR_VAR 0 10
37703: PUSH
37704: LD_VAR 0 10
37708: PUSH
37709: LD_VAR 0 6
37713: PPUSH
37714: LD_INT 1
37716: PPUSH
37717: CALL_OW 259
37721: PUSH
37722: LD_REAL  1.15000000000000E+0000
37725: MUL
37726: MUL
37727: ST_TO_ADDR
// end ; unit_vehicle :
37728: GO 38558
37730: LD_INT 2
37732: DOUBLE
37733: EQUAL
37734: IFTRUE 37738
37736: GO 38546
37738: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
37739: LD_VAR 0 6
37743: PPUSH
37744: CALL_OW 264
37748: PUSH
37749: LD_INT 2
37751: PUSH
37752: LD_INT 42
37754: PUSH
37755: LD_INT 24
37757: PUSH
37758: EMPTY
37759: LIST
37760: LIST
37761: LIST
37762: IN
37763: IFFALSE 37784
// points := [ 25 , 5 , 3 ] ;
37765: LD_ADDR_VAR 0 9
37769: PUSH
37770: LD_INT 25
37772: PUSH
37773: LD_INT 5
37775: PUSH
37776: LD_INT 3
37778: PUSH
37779: EMPTY
37780: LIST
37781: LIST
37782: LIST
37783: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
37784: LD_VAR 0 6
37788: PPUSH
37789: CALL_OW 264
37793: PUSH
37794: LD_INT 4
37796: PUSH
37797: LD_INT 43
37799: PUSH
37800: LD_INT 25
37802: PUSH
37803: EMPTY
37804: LIST
37805: LIST
37806: LIST
37807: IN
37808: IFFALSE 37829
// points := [ 40 , 15 , 5 ] ;
37810: LD_ADDR_VAR 0 9
37814: PUSH
37815: LD_INT 40
37817: PUSH
37818: LD_INT 15
37820: PUSH
37821: LD_INT 5
37823: PUSH
37824: EMPTY
37825: LIST
37826: LIST
37827: LIST
37828: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
37829: LD_VAR 0 6
37833: PPUSH
37834: CALL_OW 264
37838: PUSH
37839: LD_INT 3
37841: PUSH
37842: LD_INT 23
37844: PUSH
37845: EMPTY
37846: LIST
37847: LIST
37848: IN
37849: IFFALSE 37870
// points := [ 7 , 25 , 8 ] ;
37851: LD_ADDR_VAR 0 9
37855: PUSH
37856: LD_INT 7
37858: PUSH
37859: LD_INT 25
37861: PUSH
37862: LD_INT 8
37864: PUSH
37865: EMPTY
37866: LIST
37867: LIST
37868: LIST
37869: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
37870: LD_VAR 0 6
37874: PPUSH
37875: CALL_OW 264
37879: PUSH
37880: LD_INT 5
37882: PUSH
37883: LD_INT 27
37885: PUSH
37886: LD_INT 44
37888: PUSH
37889: EMPTY
37890: LIST
37891: LIST
37892: LIST
37893: IN
37894: IFFALSE 37915
// points := [ 14 , 50 , 16 ] ;
37896: LD_ADDR_VAR 0 9
37900: PUSH
37901: LD_INT 14
37903: PUSH
37904: LD_INT 50
37906: PUSH
37907: LD_INT 16
37909: PUSH
37910: EMPTY
37911: LIST
37912: LIST
37913: LIST
37914: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
37915: LD_VAR 0 6
37919: PPUSH
37920: CALL_OW 264
37924: PUSH
37925: LD_INT 6
37927: PUSH
37928: LD_INT 46
37930: PUSH
37931: EMPTY
37932: LIST
37933: LIST
37934: IN
37935: IFFALSE 37956
// points := [ 32 , 120 , 70 ] ;
37937: LD_ADDR_VAR 0 9
37941: PUSH
37942: LD_INT 32
37944: PUSH
37945: LD_INT 120
37947: PUSH
37948: LD_INT 70
37950: PUSH
37951: EMPTY
37952: LIST
37953: LIST
37954: LIST
37955: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
37956: LD_VAR 0 6
37960: PPUSH
37961: CALL_OW 264
37965: PUSH
37966: LD_INT 7
37968: PUSH
37969: LD_INT 28
37971: PUSH
37972: LD_INT 45
37974: PUSH
37975: LD_INT 92
37977: PUSH
37978: EMPTY
37979: LIST
37980: LIST
37981: LIST
37982: LIST
37983: IN
37984: IFFALSE 38005
// points := [ 35 , 20 , 45 ] ;
37986: LD_ADDR_VAR 0 9
37990: PUSH
37991: LD_INT 35
37993: PUSH
37994: LD_INT 20
37996: PUSH
37997: LD_INT 45
37999: PUSH
38000: EMPTY
38001: LIST
38002: LIST
38003: LIST
38004: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
38005: LD_VAR 0 6
38009: PPUSH
38010: CALL_OW 264
38014: PUSH
38015: LD_INT 47
38017: PUSH
38018: EMPTY
38019: LIST
38020: IN
38021: IFFALSE 38042
// points := [ 67 , 45 , 75 ] ;
38023: LD_ADDR_VAR 0 9
38027: PUSH
38028: LD_INT 67
38030: PUSH
38031: LD_INT 45
38033: PUSH
38034: LD_INT 75
38036: PUSH
38037: EMPTY
38038: LIST
38039: LIST
38040: LIST
38041: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
38042: LD_VAR 0 6
38046: PPUSH
38047: CALL_OW 264
38051: PUSH
38052: LD_INT 26
38054: PUSH
38055: EMPTY
38056: LIST
38057: IN
38058: IFFALSE 38079
// points := [ 120 , 30 , 80 ] ;
38060: LD_ADDR_VAR 0 9
38064: PUSH
38065: LD_INT 120
38067: PUSH
38068: LD_INT 30
38070: PUSH
38071: LD_INT 80
38073: PUSH
38074: EMPTY
38075: LIST
38076: LIST
38077: LIST
38078: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
38079: LD_VAR 0 6
38083: PPUSH
38084: CALL_OW 264
38088: PUSH
38089: LD_INT 22
38091: PUSH
38092: EMPTY
38093: LIST
38094: IN
38095: IFFALSE 38116
// points := [ 40 , 1 , 1 ] ;
38097: LD_ADDR_VAR 0 9
38101: PUSH
38102: LD_INT 40
38104: PUSH
38105: LD_INT 1
38107: PUSH
38108: LD_INT 1
38110: PUSH
38111: EMPTY
38112: LIST
38113: LIST
38114: LIST
38115: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
38116: LD_VAR 0 6
38120: PPUSH
38121: CALL_OW 264
38125: PUSH
38126: LD_INT 29
38128: PUSH
38129: EMPTY
38130: LIST
38131: IN
38132: IFFALSE 38153
// points := [ 70 , 200 , 400 ] ;
38134: LD_ADDR_VAR 0 9
38138: PUSH
38139: LD_INT 70
38141: PUSH
38142: LD_INT 200
38144: PUSH
38145: LD_INT 400
38147: PUSH
38148: EMPTY
38149: LIST
38150: LIST
38151: LIST
38152: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
38153: LD_VAR 0 6
38157: PPUSH
38158: CALL_OW 264
38162: PUSH
38163: LD_INT 14
38165: PUSH
38166: LD_INT 53
38168: PUSH
38169: EMPTY
38170: LIST
38171: LIST
38172: IN
38173: IFFALSE 38194
// points := [ 40 , 10 , 20 ] ;
38175: LD_ADDR_VAR 0 9
38179: PUSH
38180: LD_INT 40
38182: PUSH
38183: LD_INT 10
38185: PUSH
38186: LD_INT 20
38188: PUSH
38189: EMPTY
38190: LIST
38191: LIST
38192: LIST
38193: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
38194: LD_VAR 0 6
38198: PPUSH
38199: CALL_OW 264
38203: PUSH
38204: LD_INT 9
38206: PUSH
38207: EMPTY
38208: LIST
38209: IN
38210: IFFALSE 38231
// points := [ 5 , 70 , 20 ] ;
38212: LD_ADDR_VAR 0 9
38216: PUSH
38217: LD_INT 5
38219: PUSH
38220: LD_INT 70
38222: PUSH
38223: LD_INT 20
38225: PUSH
38226: EMPTY
38227: LIST
38228: LIST
38229: LIST
38230: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
38231: LD_VAR 0 6
38235: PPUSH
38236: CALL_OW 264
38240: PUSH
38241: LD_INT 10
38243: PUSH
38244: EMPTY
38245: LIST
38246: IN
38247: IFFALSE 38268
// points := [ 35 , 110 , 70 ] ;
38249: LD_ADDR_VAR 0 9
38253: PUSH
38254: LD_INT 35
38256: PUSH
38257: LD_INT 110
38259: PUSH
38260: LD_INT 70
38262: PUSH
38263: EMPTY
38264: LIST
38265: LIST
38266: LIST
38267: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
38268: LD_VAR 0 6
38272: PPUSH
38273: CALL_OW 265
38277: PUSH
38278: LD_INT 25
38280: EQUAL
38281: IFFALSE 38302
// points := [ 80 , 65 , 100 ] ;
38283: LD_ADDR_VAR 0 9
38287: PUSH
38288: LD_INT 80
38290: PUSH
38291: LD_INT 65
38293: PUSH
38294: LD_INT 100
38296: PUSH
38297: EMPTY
38298: LIST
38299: LIST
38300: LIST
38301: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
38302: LD_VAR 0 6
38306: PPUSH
38307: CALL_OW 263
38311: PUSH
38312: LD_INT 1
38314: EQUAL
38315: IFFALSE 38350
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
38317: LD_ADDR_VAR 0 10
38321: PUSH
38322: LD_VAR 0 10
38326: PUSH
38327: LD_VAR 0 6
38331: PPUSH
38332: CALL_OW 311
38336: PPUSH
38337: LD_INT 3
38339: PPUSH
38340: CALL_OW 259
38344: PUSH
38345: LD_INT 4
38347: MUL
38348: MUL
38349: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
38350: LD_VAR 0 6
38354: PPUSH
38355: CALL_OW 263
38359: PUSH
38360: LD_INT 2
38362: EQUAL
38363: IFFALSE 38414
// begin j := IsControledBy ( i ) ;
38365: LD_ADDR_VAR 0 7
38369: PUSH
38370: LD_VAR 0 6
38374: PPUSH
38375: CALL_OW 312
38379: ST_TO_ADDR
// if j then
38380: LD_VAR 0 7
38384: IFFALSE 38414
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
38386: LD_ADDR_VAR 0 10
38390: PUSH
38391: LD_VAR 0 10
38395: PUSH
38396: LD_VAR 0 7
38400: PPUSH
38401: LD_INT 3
38403: PPUSH
38404: CALL_OW 259
38408: PUSH
38409: LD_INT 3
38411: MUL
38412: MUL
38413: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
38414: LD_VAR 0 6
38418: PPUSH
38419: CALL_OW 264
38423: PUSH
38424: LD_INT 5
38426: PUSH
38427: LD_INT 6
38429: PUSH
38430: LD_INT 46
38432: PUSH
38433: LD_INT 44
38435: PUSH
38436: LD_INT 47
38438: PUSH
38439: LD_INT 45
38441: PUSH
38442: LD_INT 28
38444: PUSH
38445: LD_INT 7
38447: PUSH
38448: LD_INT 27
38450: PUSH
38451: LD_INT 29
38453: PUSH
38454: EMPTY
38455: LIST
38456: LIST
38457: LIST
38458: LIST
38459: LIST
38460: LIST
38461: LIST
38462: LIST
38463: LIST
38464: LIST
38465: IN
38466: IFFALSE 38486
38468: PUSH
38469: LD_VAR 0 1
38473: PPUSH
38474: LD_INT 52
38476: PPUSH
38477: CALL_OW 321
38481: PUSH
38482: LD_INT 2
38484: EQUAL
38485: AND
38486: IFFALSE 38503
// bpoints := bpoints * 1.2 ;
38488: LD_ADDR_VAR 0 10
38492: PUSH
38493: LD_VAR 0 10
38497: PUSH
38498: LD_REAL  1.20000000000000E+0000
38501: MUL
38502: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
38503: LD_VAR 0 6
38507: PPUSH
38508: CALL_OW 264
38512: PUSH
38513: LD_INT 6
38515: PUSH
38516: LD_INT 46
38518: PUSH
38519: LD_INT 47
38521: PUSH
38522: EMPTY
38523: LIST
38524: LIST
38525: LIST
38526: IN
38527: IFFALSE 38544
// bpoints := bpoints * 1.2 ;
38529: LD_ADDR_VAR 0 10
38533: PUSH
38534: LD_VAR 0 10
38538: PUSH
38539: LD_REAL  1.20000000000000E+0000
38542: MUL
38543: ST_TO_ADDR
// end ; unit_building :
38544: GO 38558
38546: LD_INT 3
38548: DOUBLE
38549: EQUAL
38550: IFTRUE 38554
38552: GO 38557
38554: POP
// ; end ;
38555: GO 38558
38557: POP
// for j = 1 to 3 do
38558: LD_ADDR_VAR 0 7
38562: PUSH
38563: DOUBLE
38564: LD_INT 1
38566: DEC
38567: ST_TO_ADDR
38568: LD_INT 3
38570: PUSH
38571: FOR_TO
38572: IFFALSE 38625
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
38574: LD_ADDR_VAR 0 5
38578: PUSH
38579: LD_VAR 0 5
38583: PPUSH
38584: LD_VAR 0 7
38588: PPUSH
38589: LD_VAR 0 5
38593: PUSH
38594: LD_VAR 0 7
38598: ARRAY
38599: PUSH
38600: LD_VAR 0 9
38604: PUSH
38605: LD_VAR 0 7
38609: ARRAY
38610: PUSH
38611: LD_VAR 0 10
38615: MUL
38616: PLUS
38617: PPUSH
38618: CALL_OW 1
38622: ST_TO_ADDR
38623: GO 38571
38625: POP
38626: POP
// end ;
38627: GO 37100
38629: POP
38630: POP
// result := Replace ( result , 4 , tmp ) ;
38631: LD_ADDR_VAR 0 5
38635: PUSH
38636: LD_VAR 0 5
38640: PPUSH
38641: LD_INT 4
38643: PPUSH
38644: LD_VAR 0 8
38648: PPUSH
38649: CALL_OW 1
38653: ST_TO_ADDR
// end ;
38654: LD_VAR 0 5
38658: RET
// export function DangerAtRange ( unit , range ) ; begin
38659: LD_INT 0
38661: PPUSH
// if not unit then
38662: LD_VAR 0 1
38666: NOT
38667: IFFALSE 38671
// exit ;
38669: GO 38716
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
38671: LD_ADDR_VAR 0 3
38675: PUSH
38676: LD_VAR 0 1
38680: PPUSH
38681: CALL_OW 255
38685: PPUSH
38686: LD_VAR 0 1
38690: PPUSH
38691: CALL_OW 250
38695: PPUSH
38696: LD_VAR 0 1
38700: PPUSH
38701: CALL_OW 251
38705: PPUSH
38706: LD_VAR 0 2
38710: PPUSH
38711: CALL 36950 0 4
38715: ST_TO_ADDR
// end ;
38716: LD_VAR 0 3
38720: RET
// export function DangerInArea ( side , area ) ; begin
38721: LD_INT 0
38723: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
38724: LD_ADDR_VAR 0 3
38728: PUSH
38729: LD_VAR 0 2
38733: PPUSH
38734: LD_INT 81
38736: PUSH
38737: LD_VAR 0 1
38741: PUSH
38742: EMPTY
38743: LIST
38744: LIST
38745: PPUSH
38746: CALL_OW 70
38750: ST_TO_ADDR
// end ;
38751: LD_VAR 0 3
38755: RET
// export function IsExtension ( b ) ; begin
38756: LD_INT 0
38758: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
38759: LD_ADDR_VAR 0 2
38763: PUSH
38764: LD_VAR 0 1
38768: PUSH
38769: LD_INT 23
38771: PUSH
38772: LD_INT 20
38774: PUSH
38775: LD_INT 22
38777: PUSH
38778: LD_INT 17
38780: PUSH
38781: LD_INT 24
38783: PUSH
38784: LD_INT 21
38786: PUSH
38787: LD_INT 19
38789: PUSH
38790: LD_INT 16
38792: PUSH
38793: LD_INT 25
38795: PUSH
38796: LD_INT 18
38798: PUSH
38799: EMPTY
38800: LIST
38801: LIST
38802: LIST
38803: LIST
38804: LIST
38805: LIST
38806: LIST
38807: LIST
38808: LIST
38809: LIST
38810: IN
38811: ST_TO_ADDR
// end ;
38812: LD_VAR 0 2
38816: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
38817: LD_INT 0
38819: PPUSH
38820: PPUSH
38821: PPUSH
// result := [ ] ;
38822: LD_ADDR_VAR 0 4
38826: PUSH
38827: EMPTY
38828: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
38829: LD_ADDR_VAR 0 5
38833: PUSH
38834: LD_VAR 0 2
38838: PPUSH
38839: LD_INT 21
38841: PUSH
38842: LD_INT 3
38844: PUSH
38845: EMPTY
38846: LIST
38847: LIST
38848: PPUSH
38849: CALL_OW 70
38853: ST_TO_ADDR
// if not tmp then
38854: LD_VAR 0 5
38858: NOT
38859: IFFALSE 38863
// exit ;
38861: GO 38927
// if checkLink then
38863: LD_VAR 0 3
38867: IFFALSE 38917
// begin for i in tmp do
38869: LD_ADDR_VAR 0 6
38873: PUSH
38874: LD_VAR 0 5
38878: PUSH
38879: FOR_IN
38880: IFFALSE 38915
// if GetBase ( i ) <> base then
38882: LD_VAR 0 6
38886: PPUSH
38887: CALL_OW 274
38891: PUSH
38892: LD_VAR 0 1
38896: NONEQUAL
38897: IFFALSE 38913
// ComLinkToBase ( base , i ) ;
38899: LD_VAR 0 1
38903: PPUSH
38904: LD_VAR 0 6
38908: PPUSH
38909: CALL_OW 169
38913: GO 38879
38915: POP
38916: POP
// end ; result := tmp ;
38917: LD_ADDR_VAR 0 4
38921: PUSH
38922: LD_VAR 0 5
38926: ST_TO_ADDR
// end ;
38927: LD_VAR 0 4
38931: RET
// export function ComComplete ( units , b ) ; var i ; begin
38932: LD_INT 0
38934: PPUSH
38935: PPUSH
// if not units then
38936: LD_VAR 0 1
38940: NOT
38941: IFFALSE 38945
// exit ;
38943: GO 39035
// for i in units do
38945: LD_ADDR_VAR 0 4
38949: PUSH
38950: LD_VAR 0 1
38954: PUSH
38955: FOR_IN
38956: IFFALSE 39033
// if BuildingStatus ( b ) = bs_build then
38958: LD_VAR 0 2
38962: PPUSH
38963: CALL_OW 461
38967: PUSH
38968: LD_INT 1
38970: EQUAL
38971: IFFALSE 39031
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
38973: LD_VAR 0 4
38977: PPUSH
38978: LD_STRING h
38980: PUSH
38981: LD_VAR 0 2
38985: PPUSH
38986: CALL_OW 250
38990: PUSH
38991: LD_VAR 0 2
38995: PPUSH
38996: CALL_OW 251
39000: PUSH
39001: LD_VAR 0 2
39005: PUSH
39006: LD_INT 0
39008: PUSH
39009: LD_INT 0
39011: PUSH
39012: LD_INT 0
39014: PUSH
39015: EMPTY
39016: LIST
39017: LIST
39018: LIST
39019: LIST
39020: LIST
39021: LIST
39022: LIST
39023: PUSH
39024: EMPTY
39025: LIST
39026: PPUSH
39027: CALL_OW 446
39031: GO 38955
39033: POP
39034: POP
// end ;
39035: LD_VAR 0 3
39039: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
39040: LD_INT 0
39042: PPUSH
39043: PPUSH
39044: PPUSH
39045: PPUSH
39046: PPUSH
39047: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
39048: LD_VAR 0 1
39052: NOT
39053: IFTRUE 39070
39055: PUSH
39056: LD_VAR 0 1
39060: PPUSH
39061: CALL_OW 263
39065: PUSH
39066: LD_INT 2
39068: NONEQUAL
39069: OR
39070: IFFALSE 39074
// exit ;
39072: GO 39390
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
39074: LD_ADDR_VAR 0 6
39078: PUSH
39079: LD_INT 22
39081: PUSH
39082: LD_VAR 0 1
39086: PPUSH
39087: CALL_OW 255
39091: PUSH
39092: EMPTY
39093: LIST
39094: LIST
39095: PUSH
39096: LD_INT 2
39098: PUSH
39099: LD_INT 30
39101: PUSH
39102: LD_INT 36
39104: PUSH
39105: EMPTY
39106: LIST
39107: LIST
39108: PUSH
39109: LD_INT 34
39111: PUSH
39112: LD_INT 31
39114: PUSH
39115: EMPTY
39116: LIST
39117: LIST
39118: PUSH
39119: EMPTY
39120: LIST
39121: LIST
39122: LIST
39123: PUSH
39124: EMPTY
39125: LIST
39126: LIST
39127: PPUSH
39128: CALL_OW 69
39132: ST_TO_ADDR
// if not tmp then
39133: LD_VAR 0 6
39137: NOT
39138: IFFALSE 39142
// exit ;
39140: GO 39390
// result := [ ] ;
39142: LD_ADDR_VAR 0 2
39146: PUSH
39147: EMPTY
39148: ST_TO_ADDR
// for i in tmp do
39149: LD_ADDR_VAR 0 3
39153: PUSH
39154: LD_VAR 0 6
39158: PUSH
39159: FOR_IN
39160: IFFALSE 39231
// begin t := UnitsInside ( i ) ;
39162: LD_ADDR_VAR 0 4
39166: PUSH
39167: LD_VAR 0 3
39171: PPUSH
39172: CALL_OW 313
39176: ST_TO_ADDR
// if t then
39177: LD_VAR 0 4
39181: IFFALSE 39229
// for j in t do
39183: LD_ADDR_VAR 0 7
39187: PUSH
39188: LD_VAR 0 4
39192: PUSH
39193: FOR_IN
39194: IFFALSE 39227
// result := Replace ( result , result + 1 , j ) ;
39196: LD_ADDR_VAR 0 2
39200: PUSH
39201: LD_VAR 0 2
39205: PPUSH
39206: LD_VAR 0 2
39210: PUSH
39211: LD_INT 1
39213: PLUS
39214: PPUSH
39215: LD_VAR 0 7
39219: PPUSH
39220: CALL_OW 1
39224: ST_TO_ADDR
39225: GO 39193
39227: POP
39228: POP
// end ;
39229: GO 39159
39231: POP
39232: POP
// if not result then
39233: LD_VAR 0 2
39237: NOT
39238: IFFALSE 39242
// exit ;
39240: GO 39390
// mech := result [ 1 ] ;
39242: LD_ADDR_VAR 0 5
39246: PUSH
39247: LD_VAR 0 2
39251: PUSH
39252: LD_INT 1
39254: ARRAY
39255: ST_TO_ADDR
// if result > 1 then
39256: LD_VAR 0 2
39260: PUSH
39261: LD_INT 1
39263: GREATER
39264: IFFALSE 39376
// begin for i = 2 to result do
39266: LD_ADDR_VAR 0 3
39270: PUSH
39271: DOUBLE
39272: LD_INT 2
39274: DEC
39275: ST_TO_ADDR
39276: LD_VAR 0 2
39280: PUSH
39281: FOR_TO
39282: IFFALSE 39374
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
39284: LD_ADDR_VAR 0 4
39288: PUSH
39289: LD_VAR 0 2
39293: PUSH
39294: LD_VAR 0 3
39298: ARRAY
39299: PPUSH
39300: LD_INT 3
39302: PPUSH
39303: CALL_OW 259
39307: PUSH
39308: LD_VAR 0 2
39312: PUSH
39313: LD_VAR 0 3
39317: ARRAY
39318: PPUSH
39319: CALL_OW 432
39323: MINUS
39324: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
39325: LD_VAR 0 4
39329: PUSH
39330: LD_VAR 0 5
39334: PPUSH
39335: LD_INT 3
39337: PPUSH
39338: CALL_OW 259
39342: PUSH
39343: LD_VAR 0 5
39347: PPUSH
39348: CALL_OW 432
39352: MINUS
39353: GREATEREQUAL
39354: IFFALSE 39372
// mech := result [ i ] ;
39356: LD_ADDR_VAR 0 5
39360: PUSH
39361: LD_VAR 0 2
39365: PUSH
39366: LD_VAR 0 3
39370: ARRAY
39371: ST_TO_ADDR
// end ;
39372: GO 39281
39374: POP
39375: POP
// end ; ComLinkTo ( vehicle , mech ) ;
39376: LD_VAR 0 1
39380: PPUSH
39381: LD_VAR 0 5
39385: PPUSH
39386: CALL_OW 135
// end ;
39390: LD_VAR 0 2
39394: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
39395: LD_INT 0
39397: PPUSH
39398: PPUSH
39399: PPUSH
39400: PPUSH
39401: PPUSH
39402: PPUSH
39403: PPUSH
39404: PPUSH
39405: PPUSH
39406: PPUSH
39407: PPUSH
39408: PPUSH
39409: PPUSH
// result := [ ] ;
39410: LD_ADDR_VAR 0 7
39414: PUSH
39415: EMPTY
39416: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
39417: LD_VAR 0 1
39421: PPUSH
39422: CALL_OW 266
39426: PUSH
39427: LD_INT 0
39429: PUSH
39430: LD_INT 1
39432: PUSH
39433: EMPTY
39434: LIST
39435: LIST
39436: IN
39437: NOT
39438: IFFALSE 39442
// exit ;
39440: GO 41082
// if name then
39442: LD_VAR 0 3
39446: IFFALSE 39462
// SetBName ( base_dep , name ) ;
39448: LD_VAR 0 1
39452: PPUSH
39453: LD_VAR 0 3
39457: PPUSH
39458: CALL_OW 500
// base := GetBase ( base_dep ) ;
39462: LD_ADDR_VAR 0 15
39466: PUSH
39467: LD_VAR 0 1
39471: PPUSH
39472: CALL_OW 274
39476: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
39477: LD_ADDR_VAR 0 16
39481: PUSH
39482: LD_VAR 0 1
39486: PPUSH
39487: CALL_OW 255
39491: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
39492: LD_ADDR_VAR 0 17
39496: PUSH
39497: LD_VAR 0 1
39501: PPUSH
39502: CALL_OW 248
39506: ST_TO_ADDR
// if sources then
39507: LD_VAR 0 5
39511: IFFALSE 39558
// for i = 1 to 3 do
39513: LD_ADDR_VAR 0 8
39517: PUSH
39518: DOUBLE
39519: LD_INT 1
39521: DEC
39522: ST_TO_ADDR
39523: LD_INT 3
39525: PUSH
39526: FOR_TO
39527: IFFALSE 39556
// AddResourceType ( base , i , sources [ i ] ) ;
39529: LD_VAR 0 15
39533: PPUSH
39534: LD_VAR 0 8
39538: PPUSH
39539: LD_VAR 0 5
39543: PUSH
39544: LD_VAR 0 8
39548: ARRAY
39549: PPUSH
39550: CALL_OW 276
39554: GO 39526
39556: POP
39557: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
39558: LD_ADDR_VAR 0 18
39562: PUSH
39563: LD_VAR 0 15
39567: PPUSH
39568: LD_VAR 0 2
39572: PPUSH
39573: LD_INT 1
39575: PPUSH
39576: CALL 38817 0 3
39580: ST_TO_ADDR
// InitHc ;
39581: CALL_OW 19
// InitUc ;
39585: CALL_OW 18
// uc_side := side ;
39589: LD_ADDR_OWVAR 20
39593: PUSH
39594: LD_VAR 0 16
39598: ST_TO_ADDR
// uc_nation := nation ;
39599: LD_ADDR_OWVAR 21
39603: PUSH
39604: LD_VAR 0 17
39608: ST_TO_ADDR
// if buildings then
39609: LD_VAR 0 18
39613: IFFALSE 40941
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
39615: LD_ADDR_VAR 0 19
39619: PUSH
39620: LD_VAR 0 18
39624: PPUSH
39625: LD_INT 2
39627: PUSH
39628: LD_INT 30
39630: PUSH
39631: LD_INT 29
39633: PUSH
39634: EMPTY
39635: LIST
39636: LIST
39637: PUSH
39638: LD_INT 30
39640: PUSH
39641: LD_INT 30
39643: PUSH
39644: EMPTY
39645: LIST
39646: LIST
39647: PUSH
39648: EMPTY
39649: LIST
39650: LIST
39651: LIST
39652: PPUSH
39653: CALL_OW 72
39657: ST_TO_ADDR
// if tmp then
39658: LD_VAR 0 19
39662: IFFALSE 39710
// for i in tmp do
39664: LD_ADDR_VAR 0 8
39668: PUSH
39669: LD_VAR 0 19
39673: PUSH
39674: FOR_IN
39675: IFFALSE 39708
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
39677: LD_VAR 0 8
39681: PPUSH
39682: CALL_OW 250
39686: PPUSH
39687: LD_VAR 0 8
39691: PPUSH
39692: CALL_OW 251
39696: PPUSH
39697: LD_VAR 0 16
39701: PPUSH
39702: CALL_OW 441
39706: GO 39674
39708: POP
39709: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
39710: LD_VAR 0 18
39714: PPUSH
39715: LD_INT 2
39717: PUSH
39718: LD_INT 30
39720: PUSH
39721: LD_INT 32
39723: PUSH
39724: EMPTY
39725: LIST
39726: LIST
39727: PUSH
39728: LD_INT 30
39730: PUSH
39731: LD_INT 33
39733: PUSH
39734: EMPTY
39735: LIST
39736: LIST
39737: PUSH
39738: EMPTY
39739: LIST
39740: LIST
39741: LIST
39742: PPUSH
39743: CALL_OW 72
39747: IFFALSE 39835
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
39749: LD_ADDR_VAR 0 8
39753: PUSH
39754: LD_VAR 0 18
39758: PPUSH
39759: LD_INT 2
39761: PUSH
39762: LD_INT 30
39764: PUSH
39765: LD_INT 32
39767: PUSH
39768: EMPTY
39769: LIST
39770: LIST
39771: PUSH
39772: LD_INT 30
39774: PUSH
39775: LD_INT 33
39777: PUSH
39778: EMPTY
39779: LIST
39780: LIST
39781: PUSH
39782: EMPTY
39783: LIST
39784: LIST
39785: LIST
39786: PPUSH
39787: CALL_OW 72
39791: PUSH
39792: FOR_IN
39793: IFFALSE 39833
// begin if not GetBWeapon ( i ) then
39795: LD_VAR 0 8
39799: PPUSH
39800: CALL_OW 269
39804: NOT
39805: IFFALSE 39831
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
39807: LD_VAR 0 8
39811: PPUSH
39812: LD_VAR 0 8
39816: PPUSH
39817: LD_VAR 0 2
39821: PPUSH
39822: CALL 41087 0 2
39826: PPUSH
39827: CALL_OW 431
// end ;
39831: GO 39792
39833: POP
39834: POP
// end ; for i = 1 to personel do
39835: LD_ADDR_VAR 0 8
39839: PUSH
39840: DOUBLE
39841: LD_INT 1
39843: DEC
39844: ST_TO_ADDR
39845: LD_VAR 0 6
39849: PUSH
39850: FOR_TO
39851: IFFALSE 40921
// begin if i > 4 then
39853: LD_VAR 0 8
39857: PUSH
39858: LD_INT 4
39860: GREATER
39861: IFFALSE 39865
// break ;
39863: GO 40921
// case i of 1 :
39865: LD_VAR 0 8
39869: PUSH
39870: LD_INT 1
39872: DOUBLE
39873: EQUAL
39874: IFTRUE 39878
39876: GO 39958
39878: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
39879: LD_ADDR_VAR 0 12
39883: PUSH
39884: LD_VAR 0 18
39888: PPUSH
39889: LD_INT 22
39891: PUSH
39892: LD_VAR 0 16
39896: PUSH
39897: EMPTY
39898: LIST
39899: LIST
39900: PUSH
39901: LD_INT 58
39903: PUSH
39904: EMPTY
39905: LIST
39906: PUSH
39907: LD_INT 2
39909: PUSH
39910: LD_INT 30
39912: PUSH
39913: LD_INT 32
39915: PUSH
39916: EMPTY
39917: LIST
39918: LIST
39919: PUSH
39920: LD_INT 30
39922: PUSH
39923: LD_INT 4
39925: PUSH
39926: EMPTY
39927: LIST
39928: LIST
39929: PUSH
39930: LD_INT 30
39932: PUSH
39933: LD_INT 5
39935: PUSH
39936: EMPTY
39937: LIST
39938: LIST
39939: PUSH
39940: EMPTY
39941: LIST
39942: LIST
39943: LIST
39944: LIST
39945: PUSH
39946: EMPTY
39947: LIST
39948: LIST
39949: LIST
39950: PPUSH
39951: CALL_OW 72
39955: ST_TO_ADDR
39956: GO 40180
39958: LD_INT 2
39960: DOUBLE
39961: EQUAL
39962: IFTRUE 39966
39964: GO 40028
39966: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
39967: LD_ADDR_VAR 0 12
39971: PUSH
39972: LD_VAR 0 18
39976: PPUSH
39977: LD_INT 22
39979: PUSH
39980: LD_VAR 0 16
39984: PUSH
39985: EMPTY
39986: LIST
39987: LIST
39988: PUSH
39989: LD_INT 2
39991: PUSH
39992: LD_INT 30
39994: PUSH
39995: LD_INT 0
39997: PUSH
39998: EMPTY
39999: LIST
40000: LIST
40001: PUSH
40002: LD_INT 30
40004: PUSH
40005: LD_INT 1
40007: PUSH
40008: EMPTY
40009: LIST
40010: LIST
40011: PUSH
40012: EMPTY
40013: LIST
40014: LIST
40015: LIST
40016: PUSH
40017: EMPTY
40018: LIST
40019: LIST
40020: PPUSH
40021: CALL_OW 72
40025: ST_TO_ADDR
40026: GO 40180
40028: LD_INT 3
40030: DOUBLE
40031: EQUAL
40032: IFTRUE 40036
40034: GO 40098
40036: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
40037: LD_ADDR_VAR 0 12
40041: PUSH
40042: LD_VAR 0 18
40046: PPUSH
40047: LD_INT 22
40049: PUSH
40050: LD_VAR 0 16
40054: PUSH
40055: EMPTY
40056: LIST
40057: LIST
40058: PUSH
40059: LD_INT 2
40061: PUSH
40062: LD_INT 30
40064: PUSH
40065: LD_INT 2
40067: PUSH
40068: EMPTY
40069: LIST
40070: LIST
40071: PUSH
40072: LD_INT 30
40074: PUSH
40075: LD_INT 3
40077: PUSH
40078: EMPTY
40079: LIST
40080: LIST
40081: PUSH
40082: EMPTY
40083: LIST
40084: LIST
40085: LIST
40086: PUSH
40087: EMPTY
40088: LIST
40089: LIST
40090: PPUSH
40091: CALL_OW 72
40095: ST_TO_ADDR
40096: GO 40180
40098: LD_INT 4
40100: DOUBLE
40101: EQUAL
40102: IFTRUE 40106
40104: GO 40179
40106: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
40107: LD_ADDR_VAR 0 12
40111: PUSH
40112: LD_VAR 0 18
40116: PPUSH
40117: LD_INT 22
40119: PUSH
40120: LD_VAR 0 16
40124: PUSH
40125: EMPTY
40126: LIST
40127: LIST
40128: PUSH
40129: LD_INT 2
40131: PUSH
40132: LD_INT 30
40134: PUSH
40135: LD_INT 6
40137: PUSH
40138: EMPTY
40139: LIST
40140: LIST
40141: PUSH
40142: LD_INT 30
40144: PUSH
40145: LD_INT 7
40147: PUSH
40148: EMPTY
40149: LIST
40150: LIST
40151: PUSH
40152: LD_INT 30
40154: PUSH
40155: LD_INT 8
40157: PUSH
40158: EMPTY
40159: LIST
40160: LIST
40161: PUSH
40162: EMPTY
40163: LIST
40164: LIST
40165: LIST
40166: LIST
40167: PUSH
40168: EMPTY
40169: LIST
40170: LIST
40171: PPUSH
40172: CALL_OW 72
40176: ST_TO_ADDR
40177: GO 40180
40179: POP
// if i = 1 then
40180: LD_VAR 0 8
40184: PUSH
40185: LD_INT 1
40187: EQUAL
40188: IFFALSE 40299
// begin tmp := [ ] ;
40190: LD_ADDR_VAR 0 19
40194: PUSH
40195: EMPTY
40196: ST_TO_ADDR
// for j in f do
40197: LD_ADDR_VAR 0 9
40201: PUSH
40202: LD_VAR 0 12
40206: PUSH
40207: FOR_IN
40208: IFFALSE 40281
// if GetBType ( j ) = b_bunker then
40210: LD_VAR 0 9
40214: PPUSH
40215: CALL_OW 266
40219: PUSH
40220: LD_INT 32
40222: EQUAL
40223: IFFALSE 40250
// tmp := Insert ( tmp , 1 , j ) else
40225: LD_ADDR_VAR 0 19
40229: PUSH
40230: LD_VAR 0 19
40234: PPUSH
40235: LD_INT 1
40237: PPUSH
40238: LD_VAR 0 9
40242: PPUSH
40243: CALL_OW 2
40247: ST_TO_ADDR
40248: GO 40279
// tmp := Insert ( tmp , tmp + 1 , j ) ;
40250: LD_ADDR_VAR 0 19
40254: PUSH
40255: LD_VAR 0 19
40259: PPUSH
40260: LD_VAR 0 19
40264: PUSH
40265: LD_INT 1
40267: PLUS
40268: PPUSH
40269: LD_VAR 0 9
40273: PPUSH
40274: CALL_OW 2
40278: ST_TO_ADDR
40279: GO 40207
40281: POP
40282: POP
// if tmp then
40283: LD_VAR 0 19
40287: IFFALSE 40299
// f := tmp ;
40289: LD_ADDR_VAR 0 12
40293: PUSH
40294: LD_VAR 0 19
40298: ST_TO_ADDR
// end ; x := personel [ i ] ;
40299: LD_ADDR_VAR 0 13
40303: PUSH
40304: LD_VAR 0 6
40308: PUSH
40309: LD_VAR 0 8
40313: ARRAY
40314: ST_TO_ADDR
// if x = - 1 then
40315: LD_VAR 0 13
40319: PUSH
40320: LD_INT 1
40322: NEG
40323: EQUAL
40324: IFFALSE 40535
// begin for j in f do
40326: LD_ADDR_VAR 0 9
40330: PUSH
40331: LD_VAR 0 12
40335: PUSH
40336: FOR_IN
40337: IFFALSE 40531
// repeat InitHc ;
40339: CALL_OW 19
// if GetBType ( j ) = b_barracks then
40343: LD_VAR 0 9
40347: PPUSH
40348: CALL_OW 266
40352: PUSH
40353: LD_INT 5
40355: EQUAL
40356: IFFALSE 40426
// begin if UnitsInside ( j ) < 3 then
40358: LD_VAR 0 9
40362: PPUSH
40363: CALL_OW 313
40367: PUSH
40368: LD_INT 3
40370: LESS
40371: IFFALSE 40407
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
40373: LD_INT 0
40375: PPUSH
40376: LD_INT 5
40378: PUSH
40379: LD_INT 8
40381: PUSH
40382: LD_INT 9
40384: PUSH
40385: EMPTY
40386: LIST
40387: LIST
40388: LIST
40389: PUSH
40390: LD_VAR 0 17
40394: ARRAY
40395: PPUSH
40396: LD_VAR 0 4
40400: PPUSH
40401: CALL_OW 380
40405: GO 40424
// PrepareHuman ( false , i , skill ) ;
40407: LD_INT 0
40409: PPUSH
40410: LD_VAR 0 8
40414: PPUSH
40415: LD_VAR 0 4
40419: PPUSH
40420: CALL_OW 380
// end else
40424: GO 40443
// PrepareHuman ( false , i , skill ) ;
40426: LD_INT 0
40428: PPUSH
40429: LD_VAR 0 8
40433: PPUSH
40434: LD_VAR 0 4
40438: PPUSH
40439: CALL_OW 380
// un := CreateHuman ;
40443: LD_ADDR_VAR 0 14
40447: PUSH
40448: CALL_OW 44
40452: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
40453: LD_ADDR_VAR 0 7
40457: PUSH
40458: LD_VAR 0 7
40462: PPUSH
40463: LD_INT 1
40465: PPUSH
40466: LD_VAR 0 14
40470: PPUSH
40471: CALL_OW 2
40475: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
40476: LD_VAR 0 14
40480: PPUSH
40481: LD_VAR 0 9
40485: PPUSH
40486: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
40490: LD_VAR 0 9
40494: PPUSH
40495: CALL_OW 313
40499: PUSH
40500: LD_INT 6
40502: EQUAL
40503: IFTRUE 40527
40505: PUSH
40506: LD_VAR 0 9
40510: PPUSH
40511: CALL_OW 266
40515: PUSH
40516: LD_INT 32
40518: PUSH
40519: LD_INT 31
40521: PUSH
40522: EMPTY
40523: LIST
40524: LIST
40525: IN
40526: OR
40527: IFFALSE 40339
40529: GO 40336
40531: POP
40532: POP
// end else
40533: GO 40919
// for j = 1 to x do
40535: LD_ADDR_VAR 0 9
40539: PUSH
40540: DOUBLE
40541: LD_INT 1
40543: DEC
40544: ST_TO_ADDR
40545: LD_VAR 0 13
40549: PUSH
40550: FOR_TO
40551: IFFALSE 40917
// begin InitHc ;
40553: CALL_OW 19
// if not f then
40557: LD_VAR 0 12
40561: NOT
40562: IFFALSE 40651
// begin PrepareHuman ( false , i , skill ) ;
40564: LD_INT 0
40566: PPUSH
40567: LD_VAR 0 8
40571: PPUSH
40572: LD_VAR 0 4
40576: PPUSH
40577: CALL_OW 380
// un := CreateHuman ;
40581: LD_ADDR_VAR 0 14
40585: PUSH
40586: CALL_OW 44
40590: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
40591: LD_ADDR_VAR 0 7
40595: PUSH
40596: LD_VAR 0 7
40600: PPUSH
40601: LD_INT 1
40603: PPUSH
40604: LD_VAR 0 14
40608: PPUSH
40609: CALL_OW 2
40613: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
40614: LD_VAR 0 14
40618: PPUSH
40619: LD_VAR 0 1
40623: PPUSH
40624: CALL_OW 250
40628: PPUSH
40629: LD_VAR 0 1
40633: PPUSH
40634: CALL_OW 251
40638: PPUSH
40639: LD_INT 10
40641: PPUSH
40642: LD_INT 0
40644: PPUSH
40645: CALL_OW 50
// continue ;
40649: GO 40550
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
40651: LD_VAR 0 12
40655: PUSH
40656: LD_INT 1
40658: ARRAY
40659: PPUSH
40660: CALL_OW 313
40664: IFFALSE 40692
40666: PUSH
40667: LD_VAR 0 12
40671: PUSH
40672: LD_INT 1
40674: ARRAY
40675: PPUSH
40676: CALL_OW 266
40680: PUSH
40681: LD_INT 32
40683: PUSH
40684: LD_INT 31
40686: PUSH
40687: EMPTY
40688: LIST
40689: LIST
40690: IN
40691: AND
40692: IFTRUE 40713
40694: PUSH
40695: LD_VAR 0 12
40699: PUSH
40700: LD_INT 1
40702: ARRAY
40703: PPUSH
40704: CALL_OW 313
40708: PUSH
40709: LD_INT 6
40711: EQUAL
40712: OR
40713: IFFALSE 40733
// f := Delete ( f , 1 ) ;
40715: LD_ADDR_VAR 0 12
40719: PUSH
40720: LD_VAR 0 12
40724: PPUSH
40725: LD_INT 1
40727: PPUSH
40728: CALL_OW 3
40732: ST_TO_ADDR
// if not f then
40733: LD_VAR 0 12
40737: NOT
40738: IFFALSE 40756
// begin x := x + 2 ;
40740: LD_ADDR_VAR 0 13
40744: PUSH
40745: LD_VAR 0 13
40749: PUSH
40750: LD_INT 2
40752: PLUS
40753: ST_TO_ADDR
// continue ;
40754: GO 40550
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
40756: LD_VAR 0 12
40760: PUSH
40761: LD_INT 1
40763: ARRAY
40764: PPUSH
40765: CALL_OW 266
40769: PUSH
40770: LD_INT 5
40772: EQUAL
40773: IFFALSE 40847
// begin if UnitsInside ( f [ 1 ] ) < 3 then
40775: LD_VAR 0 12
40779: PUSH
40780: LD_INT 1
40782: ARRAY
40783: PPUSH
40784: CALL_OW 313
40788: PUSH
40789: LD_INT 3
40791: LESS
40792: IFFALSE 40828
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
40794: LD_INT 0
40796: PPUSH
40797: LD_INT 5
40799: PUSH
40800: LD_INT 8
40802: PUSH
40803: LD_INT 9
40805: PUSH
40806: EMPTY
40807: LIST
40808: LIST
40809: LIST
40810: PUSH
40811: LD_VAR 0 17
40815: ARRAY
40816: PPUSH
40817: LD_VAR 0 4
40821: PPUSH
40822: CALL_OW 380
40826: GO 40845
// PrepareHuman ( false , i , skill ) ;
40828: LD_INT 0
40830: PPUSH
40831: LD_VAR 0 8
40835: PPUSH
40836: LD_VAR 0 4
40840: PPUSH
40841: CALL_OW 380
// end else
40845: GO 40864
// PrepareHuman ( false , i , skill ) ;
40847: LD_INT 0
40849: PPUSH
40850: LD_VAR 0 8
40854: PPUSH
40855: LD_VAR 0 4
40859: PPUSH
40860: CALL_OW 380
// un := CreateHuman ;
40864: LD_ADDR_VAR 0 14
40868: PUSH
40869: CALL_OW 44
40873: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
40874: LD_ADDR_VAR 0 7
40878: PUSH
40879: LD_VAR 0 7
40883: PPUSH
40884: LD_INT 1
40886: PPUSH
40887: LD_VAR 0 14
40891: PPUSH
40892: CALL_OW 2
40896: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
40897: LD_VAR 0 14
40901: PPUSH
40902: LD_VAR 0 12
40906: PUSH
40907: LD_INT 1
40909: ARRAY
40910: PPUSH
40911: CALL_OW 52
// end ;
40915: GO 40550
40917: POP
40918: POP
// end ;
40919: GO 39850
40921: POP
40922: POP
// result := result ^ buildings ;
40923: LD_ADDR_VAR 0 7
40927: PUSH
40928: LD_VAR 0 7
40932: PUSH
40933: LD_VAR 0 18
40937: ADD
40938: ST_TO_ADDR
// end else
40939: GO 41082
// begin for i = 1 to personel do
40941: LD_ADDR_VAR 0 8
40945: PUSH
40946: DOUBLE
40947: LD_INT 1
40949: DEC
40950: ST_TO_ADDR
40951: LD_VAR 0 6
40955: PUSH
40956: FOR_TO
40957: IFFALSE 41080
// begin if i > 4 then
40959: LD_VAR 0 8
40963: PUSH
40964: LD_INT 4
40966: GREATER
40967: IFFALSE 40971
// break ;
40969: GO 41080
// x := personel [ i ] ;
40971: LD_ADDR_VAR 0 13
40975: PUSH
40976: LD_VAR 0 6
40980: PUSH
40981: LD_VAR 0 8
40985: ARRAY
40986: ST_TO_ADDR
// if x = - 1 then
40987: LD_VAR 0 13
40991: PUSH
40992: LD_INT 1
40994: NEG
40995: EQUAL
40996: IFFALSE 41000
// continue ;
40998: GO 40956
// PrepareHuman ( false , i , skill ) ;
41000: LD_INT 0
41002: PPUSH
41003: LD_VAR 0 8
41007: PPUSH
41008: LD_VAR 0 4
41012: PPUSH
41013: CALL_OW 380
// un := CreateHuman ;
41017: LD_ADDR_VAR 0 14
41021: PUSH
41022: CALL_OW 44
41026: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
41027: LD_VAR 0 14
41031: PPUSH
41032: LD_VAR 0 1
41036: PPUSH
41037: CALL_OW 250
41041: PPUSH
41042: LD_VAR 0 1
41046: PPUSH
41047: CALL_OW 251
41051: PPUSH
41052: LD_INT 10
41054: PPUSH
41055: LD_INT 0
41057: PPUSH
41058: CALL_OW 50
// result := result ^ un ;
41062: LD_ADDR_VAR 0 7
41066: PUSH
41067: LD_VAR 0 7
41071: PUSH
41072: LD_VAR 0 14
41076: ADD
41077: ST_TO_ADDR
// end ;
41078: GO 40956
41080: POP
41081: POP
// end ; end ;
41082: LD_VAR 0 7
41086: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
41087: LD_INT 0
41089: PPUSH
41090: PPUSH
41091: PPUSH
41092: PPUSH
41093: PPUSH
41094: PPUSH
41095: PPUSH
41096: PPUSH
41097: PPUSH
41098: PPUSH
41099: PPUSH
41100: PPUSH
41101: PPUSH
41102: PPUSH
41103: PPUSH
41104: PPUSH
// result := false ;
41105: LD_ADDR_VAR 0 3
41109: PUSH
41110: LD_INT 0
41112: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
41113: LD_VAR 0 1
41117: NOT
41118: IFTRUE 41143
41120: PUSH
41121: LD_VAR 0 1
41125: PPUSH
41126: CALL_OW 266
41130: PUSH
41131: LD_INT 32
41133: PUSH
41134: LD_INT 33
41136: PUSH
41137: EMPTY
41138: LIST
41139: LIST
41140: IN
41141: NOT
41142: OR
41143: IFFALSE 41147
// exit ;
41145: GO 42282
// nat := GetNation ( tower ) ;
41147: LD_ADDR_VAR 0 12
41151: PUSH
41152: LD_VAR 0 1
41156: PPUSH
41157: CALL_OW 248
41161: ST_TO_ADDR
// side := GetSide ( tower ) ;
41162: LD_ADDR_VAR 0 16
41166: PUSH
41167: LD_VAR 0 1
41171: PPUSH
41172: CALL_OW 255
41176: ST_TO_ADDR
// x := GetX ( tower ) ;
41177: LD_ADDR_VAR 0 10
41181: PUSH
41182: LD_VAR 0 1
41186: PPUSH
41187: CALL_OW 250
41191: ST_TO_ADDR
// y := GetY ( tower ) ;
41192: LD_ADDR_VAR 0 11
41196: PUSH
41197: LD_VAR 0 1
41201: PPUSH
41202: CALL_OW 251
41206: ST_TO_ADDR
// if not x or not y then
41207: LD_VAR 0 10
41211: NOT
41212: IFTRUE 41221
41214: PUSH
41215: LD_VAR 0 11
41219: NOT
41220: OR
41221: IFFALSE 41225
// exit ;
41223: GO 42282
// weapon := 0 ;
41225: LD_ADDR_VAR 0 18
41229: PUSH
41230: LD_INT 0
41232: ST_TO_ADDR
// fac_list := [ ] ;
41233: LD_ADDR_VAR 0 17
41237: PUSH
41238: EMPTY
41239: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
41240: LD_ADDR_VAR 0 6
41244: PUSH
41245: LD_VAR 0 1
41249: PPUSH
41250: CALL_OW 274
41254: PPUSH
41255: LD_VAR 0 2
41259: PPUSH
41260: LD_INT 0
41262: PPUSH
41263: CALL 38817 0 3
41267: PPUSH
41268: LD_INT 30
41270: PUSH
41271: LD_INT 3
41273: PUSH
41274: EMPTY
41275: LIST
41276: LIST
41277: PPUSH
41278: CALL_OW 72
41282: ST_TO_ADDR
// if not factories then
41283: LD_VAR 0 6
41287: NOT
41288: IFFALSE 41292
// exit ;
41290: GO 42282
// for i in factories do
41292: LD_ADDR_VAR 0 8
41296: PUSH
41297: LD_VAR 0 6
41301: PUSH
41302: FOR_IN
41303: IFFALSE 41328
// fac_list := fac_list union AvailableWeaponList ( i ) ;
41305: LD_ADDR_VAR 0 17
41309: PUSH
41310: LD_VAR 0 17
41314: PUSH
41315: LD_VAR 0 8
41319: PPUSH
41320: CALL_OW 478
41324: UNION
41325: ST_TO_ADDR
41326: GO 41302
41328: POP
41329: POP
// if not fac_list then
41330: LD_VAR 0 17
41334: NOT
41335: IFFALSE 41339
// exit ;
41337: GO 42282
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
41339: LD_ADDR_VAR 0 5
41343: PUSH
41344: LD_INT 4
41346: PUSH
41347: LD_INT 5
41349: PUSH
41350: LD_INT 9
41352: PUSH
41353: LD_INT 10
41355: PUSH
41356: LD_INT 6
41358: PUSH
41359: LD_INT 7
41361: PUSH
41362: LD_INT 11
41364: PUSH
41365: EMPTY
41366: LIST
41367: LIST
41368: LIST
41369: LIST
41370: LIST
41371: LIST
41372: LIST
41373: PUSH
41374: LD_INT 27
41376: PUSH
41377: LD_INT 28
41379: PUSH
41380: LD_INT 26
41382: PUSH
41383: LD_INT 30
41385: PUSH
41386: EMPTY
41387: LIST
41388: LIST
41389: LIST
41390: LIST
41391: PUSH
41392: LD_INT 43
41394: PUSH
41395: LD_INT 44
41397: PUSH
41398: LD_INT 46
41400: PUSH
41401: LD_INT 45
41403: PUSH
41404: LD_INT 47
41406: PUSH
41407: LD_INT 49
41409: PUSH
41410: EMPTY
41411: LIST
41412: LIST
41413: LIST
41414: LIST
41415: LIST
41416: LIST
41417: PUSH
41418: EMPTY
41419: LIST
41420: LIST
41421: LIST
41422: PUSH
41423: LD_VAR 0 12
41427: ARRAY
41428: ST_TO_ADDR
// list := list isect fac_list ;
41429: LD_ADDR_VAR 0 5
41433: PUSH
41434: LD_VAR 0 5
41438: PUSH
41439: LD_VAR 0 17
41443: ISECT
41444: ST_TO_ADDR
// if not list then
41445: LD_VAR 0 5
41449: NOT
41450: IFFALSE 41454
// exit ;
41452: GO 42282
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
41454: LD_VAR 0 12
41458: PUSH
41459: LD_INT 3
41461: EQUAL
41462: IFFALSE 41474
41464: PUSH
41465: LD_INT 49
41467: PUSH
41468: LD_VAR 0 5
41472: IN
41473: AND
41474: IFFALSE 41494
41476: PUSH
41477: LD_INT 31
41479: PPUSH
41480: LD_VAR 0 16
41484: PPUSH
41485: CALL_OW 321
41489: PUSH
41490: LD_INT 2
41492: EQUAL
41493: AND
41494: IFFALSE 41554
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
41496: LD_INT 22
41498: PUSH
41499: LD_VAR 0 16
41503: PUSH
41504: EMPTY
41505: LIST
41506: LIST
41507: PUSH
41508: LD_INT 35
41510: PUSH
41511: LD_INT 49
41513: PUSH
41514: EMPTY
41515: LIST
41516: LIST
41517: PUSH
41518: LD_INT 91
41520: PUSH
41521: LD_VAR 0 1
41525: PUSH
41526: LD_INT 10
41528: PUSH
41529: EMPTY
41530: LIST
41531: LIST
41532: LIST
41533: PUSH
41534: EMPTY
41535: LIST
41536: LIST
41537: LIST
41538: PPUSH
41539: CALL_OW 69
41543: NOT
41544: IFFALSE 41554
// weapon := ru_time_lapser ;
41546: LD_ADDR_VAR 0 18
41550: PUSH
41551: LD_INT 49
41553: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
41554: LD_VAR 0 12
41558: PUSH
41559: LD_INT 1
41561: PUSH
41562: LD_INT 2
41564: PUSH
41565: EMPTY
41566: LIST
41567: LIST
41568: IN
41569: IFFALSE 41593
41571: PUSH
41572: LD_INT 11
41574: PUSH
41575: LD_VAR 0 5
41579: IN
41580: IFTRUE 41592
41582: PUSH
41583: LD_INT 30
41585: PUSH
41586: LD_VAR 0 5
41590: IN
41591: OR
41592: AND
41593: IFFALSE 41613
41595: PUSH
41596: LD_INT 6
41598: PPUSH
41599: LD_VAR 0 16
41603: PPUSH
41604: CALL_OW 321
41608: PUSH
41609: LD_INT 2
41611: EQUAL
41612: AND
41613: IFFALSE 41780
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
41615: LD_INT 22
41617: PUSH
41618: LD_VAR 0 16
41622: PUSH
41623: EMPTY
41624: LIST
41625: LIST
41626: PUSH
41627: LD_INT 2
41629: PUSH
41630: LD_INT 35
41632: PUSH
41633: LD_INT 11
41635: PUSH
41636: EMPTY
41637: LIST
41638: LIST
41639: PUSH
41640: LD_INT 35
41642: PUSH
41643: LD_INT 30
41645: PUSH
41646: EMPTY
41647: LIST
41648: LIST
41649: PUSH
41650: EMPTY
41651: LIST
41652: LIST
41653: LIST
41654: PUSH
41655: LD_INT 91
41657: PUSH
41658: LD_VAR 0 1
41662: PUSH
41663: LD_INT 18
41665: PUSH
41666: EMPTY
41667: LIST
41668: LIST
41669: LIST
41670: PUSH
41671: EMPTY
41672: LIST
41673: LIST
41674: LIST
41675: PPUSH
41676: CALL_OW 69
41680: NOT
41681: IFFALSE 41757
41683: PUSH
41684: LD_INT 22
41686: PUSH
41687: LD_VAR 0 16
41691: PUSH
41692: EMPTY
41693: LIST
41694: LIST
41695: PUSH
41696: LD_INT 2
41698: PUSH
41699: LD_INT 30
41701: PUSH
41702: LD_INT 32
41704: PUSH
41705: EMPTY
41706: LIST
41707: LIST
41708: PUSH
41709: LD_INT 30
41711: PUSH
41712: LD_INT 33
41714: PUSH
41715: EMPTY
41716: LIST
41717: LIST
41718: PUSH
41719: EMPTY
41720: LIST
41721: LIST
41722: LIST
41723: PUSH
41724: LD_INT 91
41726: PUSH
41727: LD_VAR 0 1
41731: PUSH
41732: LD_INT 12
41734: PUSH
41735: EMPTY
41736: LIST
41737: LIST
41738: LIST
41739: PUSH
41740: EMPTY
41741: LIST
41742: LIST
41743: LIST
41744: PUSH
41745: EMPTY
41746: LIST
41747: PPUSH
41748: CALL_OW 69
41752: PUSH
41753: LD_INT 2
41755: GREATER
41756: AND
41757: IFFALSE 41780
// weapon := [ us_radar , ar_radar ] [ nat ] ;
41759: LD_ADDR_VAR 0 18
41763: PUSH
41764: LD_INT 11
41766: PUSH
41767: LD_INT 30
41769: PUSH
41770: EMPTY
41771: LIST
41772: LIST
41773: PUSH
41774: LD_VAR 0 12
41778: ARRAY
41779: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
41780: LD_VAR 0 18
41784: NOT
41785: IFFALSE 41805
41787: PUSH
41788: LD_INT 40
41790: PPUSH
41791: LD_VAR 0 16
41795: PPUSH
41796: CALL_OW 321
41800: PUSH
41801: LD_INT 2
41803: EQUAL
41804: AND
41805: IFFALSE 41841
41807: PUSH
41808: LD_INT 7
41810: PUSH
41811: LD_VAR 0 5
41815: IN
41816: IFTRUE 41828
41818: PUSH
41819: LD_INT 28
41821: PUSH
41822: LD_VAR 0 5
41826: IN
41827: OR
41828: IFTRUE 41840
41830: PUSH
41831: LD_INT 45
41833: PUSH
41834: LD_VAR 0 5
41838: IN
41839: OR
41840: AND
41841: IFFALSE 42095
// begin hex := GetHexInfo ( x , y ) ;
41843: LD_ADDR_VAR 0 4
41847: PUSH
41848: LD_VAR 0 10
41852: PPUSH
41853: LD_VAR 0 11
41857: PPUSH
41858: CALL_OW 546
41862: ST_TO_ADDR
// if hex [ 1 ] then
41863: LD_VAR 0 4
41867: PUSH
41868: LD_INT 1
41870: ARRAY
41871: IFFALSE 41875
// exit ;
41873: GO 42282
// height := hex [ 2 ] ;
41875: LD_ADDR_VAR 0 15
41879: PUSH
41880: LD_VAR 0 4
41884: PUSH
41885: LD_INT 2
41887: ARRAY
41888: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
41889: LD_ADDR_VAR 0 14
41893: PUSH
41894: LD_INT 0
41896: PUSH
41897: LD_INT 2
41899: PUSH
41900: LD_INT 3
41902: PUSH
41903: LD_INT 5
41905: PUSH
41906: EMPTY
41907: LIST
41908: LIST
41909: LIST
41910: LIST
41911: ST_TO_ADDR
// for i in tmp do
41912: LD_ADDR_VAR 0 8
41916: PUSH
41917: LD_VAR 0 14
41921: PUSH
41922: FOR_IN
41923: IFFALSE 42093
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
41925: LD_ADDR_VAR 0 9
41929: PUSH
41930: LD_VAR 0 10
41934: PPUSH
41935: LD_VAR 0 8
41939: PPUSH
41940: LD_INT 5
41942: PPUSH
41943: CALL_OW 272
41947: PUSH
41948: LD_VAR 0 11
41952: PPUSH
41953: LD_VAR 0 8
41957: PPUSH
41958: LD_INT 5
41960: PPUSH
41961: CALL_OW 273
41965: PUSH
41966: EMPTY
41967: LIST
41968: LIST
41969: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
41970: LD_VAR 0 9
41974: PUSH
41975: LD_INT 1
41977: ARRAY
41978: PPUSH
41979: LD_VAR 0 9
41983: PUSH
41984: LD_INT 2
41986: ARRAY
41987: PPUSH
41988: CALL_OW 488
41992: IFFALSE 42091
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
41994: LD_ADDR_VAR 0 4
41998: PUSH
41999: LD_VAR 0 9
42003: PUSH
42004: LD_INT 1
42006: ARRAY
42007: PPUSH
42008: LD_VAR 0 9
42012: PUSH
42013: LD_INT 2
42015: ARRAY
42016: PPUSH
42017: CALL_OW 546
42021: ST_TO_ADDR
// if hex [ 1 ] then
42022: LD_VAR 0 4
42026: PUSH
42027: LD_INT 1
42029: ARRAY
42030: IFFALSE 42034
// continue ;
42032: GO 41922
// h := hex [ 2 ] ;
42034: LD_ADDR_VAR 0 13
42038: PUSH
42039: LD_VAR 0 4
42043: PUSH
42044: LD_INT 2
42046: ARRAY
42047: ST_TO_ADDR
// if h + 7 < height then
42048: LD_VAR 0 13
42052: PUSH
42053: LD_INT 7
42055: PLUS
42056: PUSH
42057: LD_VAR 0 15
42061: LESS
42062: IFFALSE 42091
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
42064: LD_ADDR_VAR 0 18
42068: PUSH
42069: LD_INT 7
42071: PUSH
42072: LD_INT 28
42074: PUSH
42075: LD_INT 45
42077: PUSH
42078: EMPTY
42079: LIST
42080: LIST
42081: LIST
42082: PUSH
42083: LD_VAR 0 12
42087: ARRAY
42088: ST_TO_ADDR
// break ;
42089: GO 42093
// end ; end ; end ;
42091: GO 41922
42093: POP
42094: POP
// end ; if not weapon then
42095: LD_VAR 0 18
42099: NOT
42100: IFFALSE 42160
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
42102: LD_ADDR_VAR 0 5
42106: PUSH
42107: LD_VAR 0 5
42111: PUSH
42112: LD_INT 11
42114: PUSH
42115: LD_INT 30
42117: PUSH
42118: LD_INT 49
42120: PUSH
42121: EMPTY
42122: LIST
42123: LIST
42124: LIST
42125: DIFF
42126: ST_TO_ADDR
// if not list then
42127: LD_VAR 0 5
42131: NOT
42132: IFFALSE 42136
// exit ;
42134: GO 42282
// weapon := list [ rand ( 1 , list ) ] ;
42136: LD_ADDR_VAR 0 18
42140: PUSH
42141: LD_VAR 0 5
42145: PUSH
42146: LD_INT 1
42148: PPUSH
42149: LD_VAR 0 5
42153: PPUSH
42154: CALL_OW 12
42158: ARRAY
42159: ST_TO_ADDR
// end ; if weapon then
42160: LD_VAR 0 18
42164: IFFALSE 42282
// begin tmp := CostOfWeapon ( weapon ) ;
42166: LD_ADDR_VAR 0 14
42170: PUSH
42171: LD_VAR 0 18
42175: PPUSH
42176: CALL_OW 451
42180: ST_TO_ADDR
// j := GetBase ( tower ) ;
42181: LD_ADDR_VAR 0 9
42185: PUSH
42186: LD_VAR 0 1
42190: PPUSH
42191: CALL_OW 274
42195: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
42196: LD_VAR 0 9
42200: PPUSH
42201: LD_INT 1
42203: PPUSH
42204: CALL_OW 275
42208: PUSH
42209: LD_VAR 0 14
42213: PUSH
42214: LD_INT 1
42216: ARRAY
42217: GREATEREQUAL
42218: IFFALSE 42244
42220: PUSH
42221: LD_VAR 0 9
42225: PPUSH
42226: LD_INT 2
42228: PPUSH
42229: CALL_OW 275
42233: PUSH
42234: LD_VAR 0 14
42238: PUSH
42239: LD_INT 2
42241: ARRAY
42242: GREATEREQUAL
42243: AND
42244: IFFALSE 42270
42246: PUSH
42247: LD_VAR 0 9
42251: PPUSH
42252: LD_INT 3
42254: PPUSH
42255: CALL_OW 275
42259: PUSH
42260: LD_VAR 0 14
42264: PUSH
42265: LD_INT 3
42267: ARRAY
42268: GREATEREQUAL
42269: AND
42270: IFFALSE 42282
// result := weapon ;
42272: LD_ADDR_VAR 0 3
42276: PUSH
42277: LD_VAR 0 18
42281: ST_TO_ADDR
// end ; end ;
42282: LD_VAR 0 3
42286: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
42287: LD_INT 0
42289: PPUSH
42290: PPUSH
// result := true ;
42291: LD_ADDR_VAR 0 3
42295: PUSH
42296: LD_INT 1
42298: ST_TO_ADDR
// if array1 = array2 then
42299: LD_VAR 0 1
42303: PUSH
42304: LD_VAR 0 2
42308: EQUAL
42309: IFFALSE 42369
// begin for i = 1 to array1 do
42311: LD_ADDR_VAR 0 4
42315: PUSH
42316: DOUBLE
42317: LD_INT 1
42319: DEC
42320: ST_TO_ADDR
42321: LD_VAR 0 1
42325: PUSH
42326: FOR_TO
42327: IFFALSE 42365
// if array1 [ i ] <> array2 [ i ] then
42329: LD_VAR 0 1
42333: PUSH
42334: LD_VAR 0 4
42338: ARRAY
42339: PUSH
42340: LD_VAR 0 2
42344: PUSH
42345: LD_VAR 0 4
42349: ARRAY
42350: NONEQUAL
42351: IFFALSE 42363
// begin result := false ;
42353: LD_ADDR_VAR 0 3
42357: PUSH
42358: LD_INT 0
42360: ST_TO_ADDR
// break ;
42361: GO 42365
// end ;
42363: GO 42326
42365: POP
42366: POP
// end else
42367: GO 42377
// result := false ;
42369: LD_ADDR_VAR 0 3
42373: PUSH
42374: LD_INT 0
42376: ST_TO_ADDR
// end ;
42377: LD_VAR 0 3
42381: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
42382: LD_INT 0
42384: PPUSH
42385: PPUSH
// if not array1 or not array2 then
42386: LD_VAR 0 1
42390: NOT
42391: IFTRUE 42400
42393: PUSH
42394: LD_VAR 0 2
42398: NOT
42399: OR
42400: IFFALSE 42404
// exit ;
42402: GO 42468
// result := true ;
42404: LD_ADDR_VAR 0 3
42408: PUSH
42409: LD_INT 1
42411: ST_TO_ADDR
// for i = 1 to array1 do
42412: LD_ADDR_VAR 0 4
42416: PUSH
42417: DOUBLE
42418: LD_INT 1
42420: DEC
42421: ST_TO_ADDR
42422: LD_VAR 0 1
42426: PUSH
42427: FOR_TO
42428: IFFALSE 42466
// if array1 [ i ] <> array2 [ i ] then
42430: LD_VAR 0 1
42434: PUSH
42435: LD_VAR 0 4
42439: ARRAY
42440: PUSH
42441: LD_VAR 0 2
42445: PUSH
42446: LD_VAR 0 4
42450: ARRAY
42451: NONEQUAL
42452: IFFALSE 42464
// begin result := false ;
42454: LD_ADDR_VAR 0 3
42458: PUSH
42459: LD_INT 0
42461: ST_TO_ADDR
// break ;
42462: GO 42466
// end ;
42464: GO 42427
42466: POP
42467: POP
// end ;
42468: LD_VAR 0 3
42472: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
42473: LD_INT 0
42475: PPUSH
42476: PPUSH
42477: PPUSH
// pom := GetBase ( fac ) ;
42478: LD_ADDR_VAR 0 5
42482: PUSH
42483: LD_VAR 0 1
42487: PPUSH
42488: CALL_OW 274
42492: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
42493: LD_ADDR_VAR 0 4
42497: PUSH
42498: LD_VAR 0 2
42502: PUSH
42503: LD_INT 1
42505: ARRAY
42506: PPUSH
42507: LD_VAR 0 2
42511: PUSH
42512: LD_INT 2
42514: ARRAY
42515: PPUSH
42516: LD_VAR 0 2
42520: PUSH
42521: LD_INT 3
42523: ARRAY
42524: PPUSH
42525: LD_VAR 0 2
42529: PUSH
42530: LD_INT 4
42532: ARRAY
42533: PPUSH
42534: CALL_OW 449
42538: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
42539: LD_ADDR_VAR 0 3
42543: PUSH
42544: LD_VAR 0 5
42548: PPUSH
42549: LD_INT 1
42551: PPUSH
42552: CALL_OW 275
42556: PUSH
42557: LD_VAR 0 4
42561: PUSH
42562: LD_INT 1
42564: ARRAY
42565: GREATEREQUAL
42566: IFFALSE 42592
42568: PUSH
42569: LD_VAR 0 5
42573: PPUSH
42574: LD_INT 2
42576: PPUSH
42577: CALL_OW 275
42581: PUSH
42582: LD_VAR 0 4
42586: PUSH
42587: LD_INT 2
42589: ARRAY
42590: GREATEREQUAL
42591: AND
42592: IFFALSE 42618
42594: PUSH
42595: LD_VAR 0 5
42599: PPUSH
42600: LD_INT 3
42602: PPUSH
42603: CALL_OW 275
42607: PUSH
42608: LD_VAR 0 4
42612: PUSH
42613: LD_INT 3
42615: ARRAY
42616: GREATEREQUAL
42617: AND
42618: ST_TO_ADDR
// end ;
42619: LD_VAR 0 3
42623: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
42624: LD_INT 0
42626: PPUSH
42627: PPUSH
42628: PPUSH
42629: PPUSH
// pom := GetBase ( building ) ;
42630: LD_ADDR_VAR 0 3
42634: PUSH
42635: LD_VAR 0 1
42639: PPUSH
42640: CALL_OW 274
42644: ST_TO_ADDR
// if not pom then
42645: LD_VAR 0 3
42649: NOT
42650: IFFALSE 42654
// exit ;
42652: GO 42828
// btype := GetBType ( building ) ;
42654: LD_ADDR_VAR 0 5
42658: PUSH
42659: LD_VAR 0 1
42663: PPUSH
42664: CALL_OW 266
42668: ST_TO_ADDR
// if btype = b_armoury then
42669: LD_VAR 0 5
42673: PUSH
42674: LD_INT 4
42676: EQUAL
42677: IFFALSE 42687
// btype := b_barracks ;
42679: LD_ADDR_VAR 0 5
42683: PUSH
42684: LD_INT 5
42686: ST_TO_ADDR
// if btype = b_depot then
42687: LD_VAR 0 5
42691: PUSH
42692: LD_INT 0
42694: EQUAL
42695: IFFALSE 42705
// btype := b_warehouse ;
42697: LD_ADDR_VAR 0 5
42701: PUSH
42702: LD_INT 1
42704: ST_TO_ADDR
// if btype = b_workshop then
42705: LD_VAR 0 5
42709: PUSH
42710: LD_INT 2
42712: EQUAL
42713: IFFALSE 42723
// btype := b_factory ;
42715: LD_ADDR_VAR 0 5
42719: PUSH
42720: LD_INT 3
42722: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
42723: LD_ADDR_VAR 0 4
42727: PUSH
42728: LD_VAR 0 5
42732: PPUSH
42733: LD_VAR 0 1
42737: PPUSH
42738: CALL_OW 248
42742: PPUSH
42743: CALL_OW 450
42747: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
42748: LD_ADDR_VAR 0 2
42752: PUSH
42753: LD_VAR 0 3
42757: PPUSH
42758: LD_INT 1
42760: PPUSH
42761: CALL_OW 275
42765: PUSH
42766: LD_VAR 0 4
42770: PUSH
42771: LD_INT 1
42773: ARRAY
42774: GREATEREQUAL
42775: IFFALSE 42801
42777: PUSH
42778: LD_VAR 0 3
42782: PPUSH
42783: LD_INT 2
42785: PPUSH
42786: CALL_OW 275
42790: PUSH
42791: LD_VAR 0 4
42795: PUSH
42796: LD_INT 2
42798: ARRAY
42799: GREATEREQUAL
42800: AND
42801: IFFALSE 42827
42803: PUSH
42804: LD_VAR 0 3
42808: PPUSH
42809: LD_INT 3
42811: PPUSH
42812: CALL_OW 275
42816: PUSH
42817: LD_VAR 0 4
42821: PUSH
42822: LD_INT 3
42824: ARRAY
42825: GREATEREQUAL
42826: AND
42827: ST_TO_ADDR
// end ;
42828: LD_VAR 0 2
42832: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
42833: LD_INT 0
42835: PPUSH
42836: PPUSH
42837: PPUSH
// pom := GetBase ( building ) ;
42838: LD_ADDR_VAR 0 4
42842: PUSH
42843: LD_VAR 0 1
42847: PPUSH
42848: CALL_OW 274
42852: ST_TO_ADDR
// if not pom then
42853: LD_VAR 0 4
42857: NOT
42858: IFFALSE 42862
// exit ;
42860: GO 42967
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
42862: LD_ADDR_VAR 0 5
42866: PUSH
42867: LD_VAR 0 2
42871: PPUSH
42872: LD_VAR 0 1
42876: PPUSH
42877: CALL_OW 248
42881: PPUSH
42882: CALL_OW 450
42886: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
42887: LD_ADDR_VAR 0 3
42891: PUSH
42892: LD_VAR 0 4
42896: PPUSH
42897: LD_INT 1
42899: PPUSH
42900: CALL_OW 275
42904: PUSH
42905: LD_VAR 0 5
42909: PUSH
42910: LD_INT 1
42912: ARRAY
42913: GREATEREQUAL
42914: IFFALSE 42940
42916: PUSH
42917: LD_VAR 0 4
42921: PPUSH
42922: LD_INT 2
42924: PPUSH
42925: CALL_OW 275
42929: PUSH
42930: LD_VAR 0 5
42934: PUSH
42935: LD_INT 2
42937: ARRAY
42938: GREATEREQUAL
42939: AND
42940: IFFALSE 42966
42942: PUSH
42943: LD_VAR 0 4
42947: PPUSH
42948: LD_INT 3
42950: PPUSH
42951: CALL_OW 275
42955: PUSH
42956: LD_VAR 0 5
42960: PUSH
42961: LD_INT 3
42963: ARRAY
42964: GREATEREQUAL
42965: AND
42966: ST_TO_ADDR
// end ;
42967: LD_VAR 0 3
42971: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
42972: LD_INT 0
42974: PPUSH
42975: PPUSH
42976: PPUSH
42977: PPUSH
42978: PPUSH
42979: PPUSH
42980: PPUSH
42981: PPUSH
42982: PPUSH
42983: PPUSH
42984: PPUSH
// result := false ;
42985: LD_ADDR_VAR 0 8
42989: PUSH
42990: LD_INT 0
42992: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
42993: LD_VAR 0 5
42997: NOT
42998: IFTRUE 43007
43000: PUSH
43001: LD_VAR 0 1
43005: NOT
43006: OR
43007: IFTRUE 43016
43009: PUSH
43010: LD_VAR 0 2
43014: NOT
43015: OR
43016: IFTRUE 43025
43018: PUSH
43019: LD_VAR 0 3
43023: NOT
43024: OR
43025: IFFALSE 43029
// exit ;
43027: GO 43855
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
43029: LD_ADDR_VAR 0 14
43033: PUSH
43034: LD_VAR 0 1
43038: PPUSH
43039: LD_VAR 0 2
43043: PPUSH
43044: LD_VAR 0 3
43048: PPUSH
43049: LD_VAR 0 4
43053: PPUSH
43054: LD_VAR 0 5
43058: PUSH
43059: LD_INT 1
43061: ARRAY
43062: PPUSH
43063: CALL_OW 248
43067: PPUSH
43068: LD_INT 0
43070: PPUSH
43071: CALL 45136 0 6
43075: ST_TO_ADDR
// if not hexes then
43076: LD_VAR 0 14
43080: NOT
43081: IFFALSE 43085
// exit ;
43083: GO 43855
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
43085: LD_ADDR_VAR 0 17
43089: PUSH
43090: LD_VAR 0 5
43094: PPUSH
43095: LD_INT 22
43097: PUSH
43098: LD_VAR 0 13
43102: PPUSH
43103: CALL_OW 255
43107: PUSH
43108: EMPTY
43109: LIST
43110: LIST
43111: PUSH
43112: LD_INT 2
43114: PUSH
43115: LD_INT 30
43117: PUSH
43118: LD_INT 0
43120: PUSH
43121: EMPTY
43122: LIST
43123: LIST
43124: PUSH
43125: LD_INT 30
43127: PUSH
43128: LD_INT 1
43130: PUSH
43131: EMPTY
43132: LIST
43133: LIST
43134: PUSH
43135: EMPTY
43136: LIST
43137: LIST
43138: LIST
43139: PUSH
43140: EMPTY
43141: LIST
43142: LIST
43143: PPUSH
43144: CALL_OW 72
43148: ST_TO_ADDR
// for i = 1 to hexes do
43149: LD_ADDR_VAR 0 9
43153: PUSH
43154: DOUBLE
43155: LD_INT 1
43157: DEC
43158: ST_TO_ADDR
43159: LD_VAR 0 14
43163: PUSH
43164: FOR_TO
43165: IFFALSE 43853
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
43167: LD_ADDR_VAR 0 13
43171: PUSH
43172: LD_VAR 0 14
43176: PUSH
43177: LD_VAR 0 9
43181: ARRAY
43182: PUSH
43183: LD_INT 1
43185: ARRAY
43186: PPUSH
43187: LD_VAR 0 14
43191: PUSH
43192: LD_VAR 0 9
43196: ARRAY
43197: PUSH
43198: LD_INT 2
43200: ARRAY
43201: PPUSH
43202: CALL_OW 428
43206: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
43207: LD_VAR 0 14
43211: PUSH
43212: LD_VAR 0 9
43216: ARRAY
43217: PUSH
43218: LD_INT 1
43220: ARRAY
43221: PPUSH
43222: LD_VAR 0 14
43226: PUSH
43227: LD_VAR 0 9
43231: ARRAY
43232: PUSH
43233: LD_INT 2
43235: ARRAY
43236: PPUSH
43237: CALL_OW 351
43241: IFTRUE 43280
43243: PUSH
43244: LD_VAR 0 14
43248: PUSH
43249: LD_VAR 0 9
43253: ARRAY
43254: PUSH
43255: LD_INT 1
43257: ARRAY
43258: PPUSH
43259: LD_VAR 0 14
43263: PUSH
43264: LD_VAR 0 9
43268: ARRAY
43269: PUSH
43270: LD_INT 2
43272: ARRAY
43273: PPUSH
43274: CALL_OW 488
43278: NOT
43279: OR
43280: IFTRUE 43297
43282: PUSH
43283: LD_VAR 0 13
43287: PPUSH
43288: CALL_OW 247
43292: PUSH
43293: LD_INT 3
43295: EQUAL
43296: OR
43297: IFFALSE 43303
// exit ;
43299: POP
43300: POP
43301: GO 43855
// if not tmp then
43303: LD_VAR 0 13
43307: NOT
43308: IFFALSE 43312
// continue ;
43310: GO 43164
// result := true ;
43312: LD_ADDR_VAR 0 8
43316: PUSH
43317: LD_INT 1
43319: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
43320: LD_VAR 0 6
43324: IFFALSE 43341
43326: PUSH
43327: LD_VAR 0 13
43331: PPUSH
43332: CALL_OW 247
43336: PUSH
43337: LD_INT 2
43339: EQUAL
43340: AND
43341: IFFALSE 43358
43343: PUSH
43344: LD_VAR 0 13
43348: PPUSH
43349: CALL_OW 263
43353: PUSH
43354: LD_INT 1
43356: EQUAL
43357: AND
43358: IFFALSE 43522
// begin if IsDrivenBy ( tmp ) then
43360: LD_VAR 0 13
43364: PPUSH
43365: CALL_OW 311
43369: IFFALSE 43373
// continue ;
43371: GO 43164
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
43373: LD_VAR 0 6
43377: PPUSH
43378: LD_INT 3
43380: PUSH
43381: LD_INT 60
43383: PUSH
43384: EMPTY
43385: LIST
43386: PUSH
43387: EMPTY
43388: LIST
43389: LIST
43390: PUSH
43391: LD_INT 3
43393: PUSH
43394: LD_INT 55
43396: PUSH
43397: EMPTY
43398: LIST
43399: PUSH
43400: EMPTY
43401: LIST
43402: LIST
43403: PUSH
43404: EMPTY
43405: LIST
43406: LIST
43407: PPUSH
43408: CALL_OW 72
43412: IFFALSE 43520
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
43414: LD_ADDR_VAR 0 18
43418: PUSH
43419: LD_VAR 0 6
43423: PPUSH
43424: LD_INT 3
43426: PUSH
43427: LD_INT 60
43429: PUSH
43430: EMPTY
43431: LIST
43432: PUSH
43433: EMPTY
43434: LIST
43435: LIST
43436: PUSH
43437: LD_INT 3
43439: PUSH
43440: LD_INT 55
43442: PUSH
43443: EMPTY
43444: LIST
43445: PUSH
43446: EMPTY
43447: LIST
43448: LIST
43449: PUSH
43450: EMPTY
43451: LIST
43452: LIST
43453: PPUSH
43454: CALL_OW 72
43458: PUSH
43459: LD_INT 1
43461: ARRAY
43462: ST_TO_ADDR
// if IsInUnit ( driver ) then
43463: LD_VAR 0 18
43467: PPUSH
43468: CALL_OW 310
43472: IFFALSE 43483
// ComExit ( driver ) ;
43474: LD_VAR 0 18
43478: PPUSH
43479: CALL 69126 0 1
// AddComEnterUnit ( driver , tmp ) ;
43483: LD_VAR 0 18
43487: PPUSH
43488: LD_VAR 0 13
43492: PPUSH
43493: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
43497: LD_VAR 0 18
43501: PPUSH
43502: LD_VAR 0 7
43506: PPUSH
43507: CALL_OW 173
// AddComExitVehicle ( driver ) ;
43511: LD_VAR 0 18
43515: PPUSH
43516: CALL_OW 181
// end ; continue ;
43520: GO 43164
// end ; if not cleaners or not tmp in cleaners then
43522: LD_VAR 0 6
43526: NOT
43527: IFTRUE 43542
43529: PUSH
43530: LD_VAR 0 13
43534: PUSH
43535: LD_VAR 0 6
43539: IN
43540: NOT
43541: OR
43542: IFFALSE 43851
// begin if dep then
43544: LD_VAR 0 17
43548: IFFALSE 43684
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
43550: LD_ADDR_VAR 0 16
43554: PUSH
43555: LD_VAR 0 17
43559: PUSH
43560: LD_INT 1
43562: ARRAY
43563: PPUSH
43564: CALL_OW 250
43568: PPUSH
43569: LD_VAR 0 17
43573: PUSH
43574: LD_INT 1
43576: ARRAY
43577: PPUSH
43578: CALL_OW 254
43582: PPUSH
43583: LD_INT 5
43585: PPUSH
43586: CALL_OW 272
43590: PUSH
43591: LD_VAR 0 17
43595: PUSH
43596: LD_INT 1
43598: ARRAY
43599: PPUSH
43600: CALL_OW 251
43604: PPUSH
43605: LD_VAR 0 17
43609: PUSH
43610: LD_INT 1
43612: ARRAY
43613: PPUSH
43614: CALL_OW 254
43618: PPUSH
43619: LD_INT 5
43621: PPUSH
43622: CALL_OW 273
43626: PUSH
43627: EMPTY
43628: LIST
43629: LIST
43630: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
43631: LD_VAR 0 16
43635: PUSH
43636: LD_INT 1
43638: ARRAY
43639: PPUSH
43640: LD_VAR 0 16
43644: PUSH
43645: LD_INT 2
43647: ARRAY
43648: PPUSH
43649: CALL_OW 488
43653: IFFALSE 43684
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
43655: LD_VAR 0 13
43659: PPUSH
43660: LD_VAR 0 16
43664: PUSH
43665: LD_INT 1
43667: ARRAY
43668: PPUSH
43669: LD_VAR 0 16
43673: PUSH
43674: LD_INT 2
43676: ARRAY
43677: PPUSH
43678: CALL_OW 111
// continue ;
43682: GO 43164
// end ; end ; r := GetDir ( tmp ) ;
43684: LD_ADDR_VAR 0 15
43688: PUSH
43689: LD_VAR 0 13
43693: PPUSH
43694: CALL_OW 254
43698: ST_TO_ADDR
// if r = 5 then
43699: LD_VAR 0 15
43703: PUSH
43704: LD_INT 5
43706: EQUAL
43707: IFFALSE 43717
// r := 0 ;
43709: LD_ADDR_VAR 0 15
43713: PUSH
43714: LD_INT 0
43716: ST_TO_ADDR
// for j = r to 5 do
43717: LD_ADDR_VAR 0 10
43721: PUSH
43722: DOUBLE
43723: LD_VAR 0 15
43727: DEC
43728: ST_TO_ADDR
43729: LD_INT 5
43731: PUSH
43732: FOR_TO
43733: IFFALSE 43849
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
43735: LD_ADDR_VAR 0 11
43739: PUSH
43740: LD_VAR 0 13
43744: PPUSH
43745: CALL_OW 250
43749: PPUSH
43750: LD_VAR 0 10
43754: PPUSH
43755: LD_INT 2
43757: PPUSH
43758: CALL_OW 272
43762: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
43763: LD_ADDR_VAR 0 12
43767: PUSH
43768: LD_VAR 0 13
43772: PPUSH
43773: CALL_OW 251
43777: PPUSH
43778: LD_VAR 0 10
43782: PPUSH
43783: LD_INT 2
43785: PPUSH
43786: CALL_OW 273
43790: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
43791: LD_VAR 0 11
43795: PPUSH
43796: LD_VAR 0 12
43800: PPUSH
43801: CALL_OW 488
43805: IFFALSE 43824
43807: PUSH
43808: LD_VAR 0 11
43812: PPUSH
43813: LD_VAR 0 12
43817: PPUSH
43818: CALL_OW 428
43822: NOT
43823: AND
43824: IFFALSE 43847
// begin ComMoveXY ( tmp , _x , _y ) ;
43826: LD_VAR 0 13
43830: PPUSH
43831: LD_VAR 0 11
43835: PPUSH
43836: LD_VAR 0 12
43840: PPUSH
43841: CALL_OW 111
// break ;
43845: GO 43849
// end ; end ;
43847: GO 43732
43849: POP
43850: POP
// end ; end ;
43851: GO 43164
43853: POP
43854: POP
// end ;
43855: LD_VAR 0 8
43859: RET
// export function BuildingTechInvented ( side , btype ) ; begin
43860: LD_INT 0
43862: PPUSH
// result := true ;
43863: LD_ADDR_VAR 0 3
43867: PUSH
43868: LD_INT 1
43870: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
43871: LD_VAR 0 2
43875: PUSH
43876: LD_INT 24
43878: DOUBLE
43879: EQUAL
43880: IFTRUE 43890
43882: LD_INT 33
43884: DOUBLE
43885: EQUAL
43886: IFTRUE 43890
43888: GO 43915
43890: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
43891: LD_ADDR_VAR 0 3
43895: PUSH
43896: LD_INT 32
43898: PPUSH
43899: LD_VAR 0 1
43903: PPUSH
43904: CALL_OW 321
43908: PUSH
43909: LD_INT 2
43911: EQUAL
43912: ST_TO_ADDR
43913: GO 44231
43915: LD_INT 20
43917: DOUBLE
43918: EQUAL
43919: IFTRUE 43923
43921: GO 43948
43923: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
43924: LD_ADDR_VAR 0 3
43928: PUSH
43929: LD_INT 6
43931: PPUSH
43932: LD_VAR 0 1
43936: PPUSH
43937: CALL_OW 321
43941: PUSH
43942: LD_INT 2
43944: EQUAL
43945: ST_TO_ADDR
43946: GO 44231
43948: LD_INT 22
43950: DOUBLE
43951: EQUAL
43952: IFTRUE 43962
43954: LD_INT 36
43956: DOUBLE
43957: EQUAL
43958: IFTRUE 43962
43960: GO 43987
43962: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
43963: LD_ADDR_VAR 0 3
43967: PUSH
43968: LD_INT 15
43970: PPUSH
43971: LD_VAR 0 1
43975: PPUSH
43976: CALL_OW 321
43980: PUSH
43981: LD_INT 2
43983: EQUAL
43984: ST_TO_ADDR
43985: GO 44231
43987: LD_INT 30
43989: DOUBLE
43990: EQUAL
43991: IFTRUE 43995
43993: GO 44020
43995: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
43996: LD_ADDR_VAR 0 3
44000: PUSH
44001: LD_INT 20
44003: PPUSH
44004: LD_VAR 0 1
44008: PPUSH
44009: CALL_OW 321
44013: PUSH
44014: LD_INT 2
44016: EQUAL
44017: ST_TO_ADDR
44018: GO 44231
44020: LD_INT 28
44022: DOUBLE
44023: EQUAL
44024: IFTRUE 44034
44026: LD_INT 21
44028: DOUBLE
44029: EQUAL
44030: IFTRUE 44034
44032: GO 44059
44034: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
44035: LD_ADDR_VAR 0 3
44039: PUSH
44040: LD_INT 21
44042: PPUSH
44043: LD_VAR 0 1
44047: PPUSH
44048: CALL_OW 321
44052: PUSH
44053: LD_INT 2
44055: EQUAL
44056: ST_TO_ADDR
44057: GO 44231
44059: LD_INT 16
44061: DOUBLE
44062: EQUAL
44063: IFTRUE 44067
44065: GO 44092
44067: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
44068: LD_ADDR_VAR 0 3
44072: PUSH
44073: LD_INT 84
44075: PPUSH
44076: LD_VAR 0 1
44080: PPUSH
44081: CALL_OW 321
44085: PUSH
44086: LD_INT 2
44088: EQUAL
44089: ST_TO_ADDR
44090: GO 44231
44092: LD_INT 19
44094: DOUBLE
44095: EQUAL
44096: IFTRUE 44106
44098: LD_INT 23
44100: DOUBLE
44101: EQUAL
44102: IFTRUE 44106
44104: GO 44131
44106: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
44107: LD_ADDR_VAR 0 3
44111: PUSH
44112: LD_INT 83
44114: PPUSH
44115: LD_VAR 0 1
44119: PPUSH
44120: CALL_OW 321
44124: PUSH
44125: LD_INT 2
44127: EQUAL
44128: ST_TO_ADDR
44129: GO 44231
44131: LD_INT 17
44133: DOUBLE
44134: EQUAL
44135: IFTRUE 44139
44137: GO 44164
44139: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
44140: LD_ADDR_VAR 0 3
44144: PUSH
44145: LD_INT 39
44147: PPUSH
44148: LD_VAR 0 1
44152: PPUSH
44153: CALL_OW 321
44157: PUSH
44158: LD_INT 2
44160: EQUAL
44161: ST_TO_ADDR
44162: GO 44231
44164: LD_INT 18
44166: DOUBLE
44167: EQUAL
44168: IFTRUE 44172
44170: GO 44197
44172: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
44173: LD_ADDR_VAR 0 3
44177: PUSH
44178: LD_INT 40
44180: PPUSH
44181: LD_VAR 0 1
44185: PPUSH
44186: CALL_OW 321
44190: PUSH
44191: LD_INT 2
44193: EQUAL
44194: ST_TO_ADDR
44195: GO 44231
44197: LD_INT 27
44199: DOUBLE
44200: EQUAL
44201: IFTRUE 44205
44203: GO 44230
44205: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
44206: LD_ADDR_VAR 0 3
44210: PUSH
44211: LD_INT 35
44213: PPUSH
44214: LD_VAR 0 1
44218: PPUSH
44219: CALL_OW 321
44223: PUSH
44224: LD_INT 2
44226: EQUAL
44227: ST_TO_ADDR
44228: GO 44231
44230: POP
// end ;
44231: LD_VAR 0 3
44235: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
44236: LD_INT 0
44238: PPUSH
44239: PPUSH
44240: PPUSH
44241: PPUSH
44242: PPUSH
44243: PPUSH
44244: PPUSH
44245: PPUSH
44246: PPUSH
44247: PPUSH
44248: PPUSH
// result := false ;
44249: LD_ADDR_VAR 0 6
44253: PUSH
44254: LD_INT 0
44256: ST_TO_ADDR
// if btype = b_depot then
44257: LD_VAR 0 2
44261: PUSH
44262: LD_INT 0
44264: EQUAL
44265: IFFALSE 44277
// begin result := true ;
44267: LD_ADDR_VAR 0 6
44271: PUSH
44272: LD_INT 1
44274: ST_TO_ADDR
// exit ;
44275: GO 45131
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
44277: LD_VAR 0 1
44281: NOT
44282: IFTRUE 44307
44284: PUSH
44285: LD_VAR 0 1
44289: PPUSH
44290: CALL_OW 266
44294: PUSH
44295: LD_INT 0
44297: PUSH
44298: LD_INT 1
44300: PUSH
44301: EMPTY
44302: LIST
44303: LIST
44304: IN
44305: NOT
44306: OR
44307: IFTRUE 44316
44309: PUSH
44310: LD_VAR 0 2
44314: NOT
44315: OR
44316: IFTRUE 44352
44318: PUSH
44319: LD_VAR 0 5
44323: PUSH
44324: LD_INT 0
44326: PUSH
44327: LD_INT 1
44329: PUSH
44330: LD_INT 2
44332: PUSH
44333: LD_INT 3
44335: PUSH
44336: LD_INT 4
44338: PUSH
44339: LD_INT 5
44341: PUSH
44342: EMPTY
44343: LIST
44344: LIST
44345: LIST
44346: LIST
44347: LIST
44348: LIST
44349: IN
44350: NOT
44351: OR
44352: IFTRUE 44371
44354: PUSH
44355: LD_VAR 0 3
44359: PPUSH
44360: LD_VAR 0 4
44364: PPUSH
44365: CALL_OW 488
44369: NOT
44370: OR
44371: IFFALSE 44375
// exit ;
44373: GO 45131
// side := GetSide ( depot ) ;
44375: LD_ADDR_VAR 0 9
44379: PUSH
44380: LD_VAR 0 1
44384: PPUSH
44385: CALL_OW 255
44389: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
44390: LD_VAR 0 9
44394: PPUSH
44395: LD_VAR 0 2
44399: PPUSH
44400: CALL 43860 0 2
44404: NOT
44405: IFFALSE 44409
// exit ;
44407: GO 45131
// pom := GetBase ( depot ) ;
44409: LD_ADDR_VAR 0 10
44413: PUSH
44414: LD_VAR 0 1
44418: PPUSH
44419: CALL_OW 274
44423: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
44424: LD_ADDR_VAR 0 11
44428: PUSH
44429: LD_VAR 0 2
44433: PPUSH
44434: LD_VAR 0 1
44438: PPUSH
44439: CALL_OW 248
44443: PPUSH
44444: CALL_OW 450
44448: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
44449: LD_VAR 0 10
44453: PPUSH
44454: LD_INT 1
44456: PPUSH
44457: CALL_OW 275
44461: PUSH
44462: LD_VAR 0 11
44466: PUSH
44467: LD_INT 1
44469: ARRAY
44470: GREATEREQUAL
44471: IFFALSE 44497
44473: PUSH
44474: LD_VAR 0 10
44478: PPUSH
44479: LD_INT 2
44481: PPUSH
44482: CALL_OW 275
44486: PUSH
44487: LD_VAR 0 11
44491: PUSH
44492: LD_INT 2
44494: ARRAY
44495: GREATEREQUAL
44496: AND
44497: IFFALSE 44523
44499: PUSH
44500: LD_VAR 0 10
44504: PPUSH
44505: LD_INT 3
44507: PPUSH
44508: CALL_OW 275
44512: PUSH
44513: LD_VAR 0 11
44517: PUSH
44518: LD_INT 3
44520: ARRAY
44521: GREATEREQUAL
44522: AND
44523: NOT
44524: IFFALSE 44528
// exit ;
44526: GO 45131
// if GetBType ( depot ) = b_depot then
44528: LD_VAR 0 1
44532: PPUSH
44533: CALL_OW 266
44537: PUSH
44538: LD_INT 0
44540: EQUAL
44541: IFFALSE 44553
// dist := 28 else
44543: LD_ADDR_VAR 0 14
44547: PUSH
44548: LD_INT 28
44550: ST_TO_ADDR
44551: GO 44561
// dist := 36 ;
44553: LD_ADDR_VAR 0 14
44557: PUSH
44558: LD_INT 36
44560: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
44561: LD_VAR 0 1
44565: PPUSH
44566: LD_VAR 0 3
44570: PPUSH
44571: LD_VAR 0 4
44575: PPUSH
44576: CALL_OW 297
44580: PUSH
44581: LD_VAR 0 14
44585: GREATER
44586: IFFALSE 44590
// exit ;
44588: GO 45131
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
44590: LD_ADDR_VAR 0 12
44594: PUSH
44595: LD_VAR 0 2
44599: PPUSH
44600: LD_VAR 0 3
44604: PPUSH
44605: LD_VAR 0 4
44609: PPUSH
44610: LD_VAR 0 5
44614: PPUSH
44615: LD_VAR 0 1
44619: PPUSH
44620: CALL_OW 248
44624: PPUSH
44625: LD_INT 0
44627: PPUSH
44628: CALL 45136 0 6
44632: ST_TO_ADDR
// if not hexes then
44633: LD_VAR 0 12
44637: NOT
44638: IFFALSE 44642
// exit ;
44640: GO 45131
// hex := GetHexInfo ( x , y ) ;
44642: LD_ADDR_VAR 0 15
44646: PUSH
44647: LD_VAR 0 3
44651: PPUSH
44652: LD_VAR 0 4
44656: PPUSH
44657: CALL_OW 546
44661: ST_TO_ADDR
// if hex [ 1 ] then
44662: LD_VAR 0 15
44666: PUSH
44667: LD_INT 1
44669: ARRAY
44670: IFFALSE 44674
// exit ;
44672: GO 45131
// height := hex [ 2 ] ;
44674: LD_ADDR_VAR 0 13
44678: PUSH
44679: LD_VAR 0 15
44683: PUSH
44684: LD_INT 2
44686: ARRAY
44687: ST_TO_ADDR
// for i = 1 to hexes do
44688: LD_ADDR_VAR 0 7
44692: PUSH
44693: DOUBLE
44694: LD_INT 1
44696: DEC
44697: ST_TO_ADDR
44698: LD_VAR 0 12
44702: PUSH
44703: FOR_TO
44704: IFFALSE 45048
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
44706: LD_VAR 0 12
44710: PUSH
44711: LD_VAR 0 7
44715: ARRAY
44716: PUSH
44717: LD_INT 1
44719: ARRAY
44720: PPUSH
44721: LD_VAR 0 12
44725: PUSH
44726: LD_VAR 0 7
44730: ARRAY
44731: PUSH
44732: LD_INT 2
44734: ARRAY
44735: PPUSH
44736: CALL_OW 488
44740: NOT
44741: IFTRUE 44783
44743: PUSH
44744: LD_VAR 0 12
44748: PUSH
44749: LD_VAR 0 7
44753: ARRAY
44754: PUSH
44755: LD_INT 1
44757: ARRAY
44758: PPUSH
44759: LD_VAR 0 12
44763: PUSH
44764: LD_VAR 0 7
44768: ARRAY
44769: PUSH
44770: LD_INT 2
44772: ARRAY
44773: PPUSH
44774: CALL_OW 428
44778: PUSH
44779: LD_INT 0
44781: GREATER
44782: OR
44783: IFTRUE 44821
44785: PUSH
44786: LD_VAR 0 12
44790: PUSH
44791: LD_VAR 0 7
44795: ARRAY
44796: PUSH
44797: LD_INT 1
44799: ARRAY
44800: PPUSH
44801: LD_VAR 0 12
44805: PUSH
44806: LD_VAR 0 7
44810: ARRAY
44811: PUSH
44812: LD_INT 2
44814: ARRAY
44815: PPUSH
44816: CALL_OW 351
44820: OR
44821: IFFALSE 44827
// exit ;
44823: POP
44824: POP
44825: GO 45131
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
44827: LD_ADDR_VAR 0 8
44831: PUSH
44832: LD_VAR 0 12
44836: PUSH
44837: LD_VAR 0 7
44841: ARRAY
44842: PUSH
44843: LD_INT 1
44845: ARRAY
44846: PPUSH
44847: LD_VAR 0 12
44851: PUSH
44852: LD_VAR 0 7
44856: ARRAY
44857: PUSH
44858: LD_INT 2
44860: ARRAY
44861: PPUSH
44862: CALL_OW 546
44866: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
44867: LD_VAR 0 8
44871: PUSH
44872: LD_INT 1
44874: ARRAY
44875: IFTRUE 44897
44877: PUSH
44878: LD_VAR 0 8
44882: PUSH
44883: LD_INT 2
44885: ARRAY
44886: PUSH
44887: LD_VAR 0 13
44891: PUSH
44892: LD_INT 2
44894: PLUS
44895: GREATER
44896: OR
44897: IFTRUE 44919
44899: PUSH
44900: LD_VAR 0 8
44904: PUSH
44905: LD_INT 2
44907: ARRAY
44908: PUSH
44909: LD_VAR 0 13
44913: PUSH
44914: LD_INT 2
44916: MINUS
44917: LESS
44918: OR
44919: IFTRUE 44987
44921: PUSH
44922: LD_VAR 0 8
44926: PUSH
44927: LD_INT 3
44929: ARRAY
44930: PUSH
44931: LD_INT 0
44933: PUSH
44934: LD_INT 8
44936: PUSH
44937: LD_INT 9
44939: PUSH
44940: LD_INT 10
44942: PUSH
44943: LD_INT 11
44945: PUSH
44946: LD_INT 12
44948: PUSH
44949: LD_INT 13
44951: PUSH
44952: LD_INT 16
44954: PUSH
44955: LD_INT 17
44957: PUSH
44958: LD_INT 18
44960: PUSH
44961: LD_INT 19
44963: PUSH
44964: LD_INT 20
44966: PUSH
44967: LD_INT 21
44969: PUSH
44970: EMPTY
44971: LIST
44972: LIST
44973: LIST
44974: LIST
44975: LIST
44976: LIST
44977: LIST
44978: LIST
44979: LIST
44980: LIST
44981: LIST
44982: LIST
44983: LIST
44984: IN
44985: NOT
44986: OR
44987: IFTRUE 45000
44989: PUSH
44990: LD_VAR 0 8
44994: PUSH
44995: LD_INT 5
44997: ARRAY
44998: NOT
44999: OR
45000: IFTRUE 45040
45002: PUSH
45003: LD_VAR 0 8
45007: PUSH
45008: LD_INT 6
45010: ARRAY
45011: PUSH
45012: LD_INT 1
45014: PUSH
45015: LD_INT 2
45017: PUSH
45018: LD_INT 7
45020: PUSH
45021: LD_INT 9
45023: PUSH
45024: LD_INT 10
45026: PUSH
45027: LD_INT 11
45029: PUSH
45030: EMPTY
45031: LIST
45032: LIST
45033: LIST
45034: LIST
45035: LIST
45036: LIST
45037: IN
45038: NOT
45039: OR
45040: IFFALSE 45046
// exit ;
45042: POP
45043: POP
45044: GO 45131
// end ;
45046: GO 44703
45048: POP
45049: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
45050: LD_VAR 0 9
45054: PPUSH
45055: LD_VAR 0 3
45059: PPUSH
45060: LD_VAR 0 4
45064: PPUSH
45065: LD_INT 20
45067: PPUSH
45068: CALL 36950 0 4
45072: PUSH
45073: LD_INT 4
45075: ARRAY
45076: IFFALSE 45080
// exit ;
45078: GO 45131
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
45080: LD_VAR 0 2
45084: PUSH
45085: LD_INT 29
45087: PUSH
45088: LD_INT 30
45090: PUSH
45091: EMPTY
45092: LIST
45093: LIST
45094: IN
45095: IFFALSE 45119
45097: PUSH
45098: LD_VAR 0 3
45102: PPUSH
45103: LD_VAR 0 4
45107: PPUSH
45108: LD_VAR 0 9
45112: PPUSH
45113: CALL_OW 440
45117: NOT
45118: AND
45119: IFFALSE 45123
// exit ;
45121: GO 45131
// result := true ;
45123: LD_ADDR_VAR 0 6
45127: PUSH
45128: LD_INT 1
45130: ST_TO_ADDR
// end ;
45131: LD_VAR 0 6
45135: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
45136: LD_INT 0
45138: PPUSH
45139: PPUSH
45140: PPUSH
45141: PPUSH
45142: PPUSH
45143: PPUSH
45144: PPUSH
45145: PPUSH
45146: PPUSH
45147: PPUSH
45148: PPUSH
45149: PPUSH
45150: PPUSH
45151: PPUSH
45152: PPUSH
45153: PPUSH
45154: PPUSH
45155: PPUSH
45156: PPUSH
45157: PPUSH
45158: PPUSH
45159: PPUSH
45160: PPUSH
45161: PPUSH
45162: PPUSH
45163: PPUSH
45164: PPUSH
45165: PPUSH
45166: PPUSH
45167: PPUSH
45168: PPUSH
45169: PPUSH
45170: PPUSH
45171: PPUSH
45172: PPUSH
45173: PPUSH
45174: PPUSH
45175: PPUSH
45176: PPUSH
45177: PPUSH
45178: PPUSH
45179: PPUSH
45180: PPUSH
45181: PPUSH
45182: PPUSH
45183: PPUSH
45184: PPUSH
45185: PPUSH
45186: PPUSH
45187: PPUSH
45188: PPUSH
45189: PPUSH
45190: PPUSH
45191: PPUSH
45192: PPUSH
45193: PPUSH
45194: PPUSH
45195: PPUSH
// result = [ ] ;
45196: LD_ADDR_VAR 0 7
45200: PUSH
45201: EMPTY
45202: ST_TO_ADDR
// temp_list = [ ] ;
45203: LD_ADDR_VAR 0 9
45207: PUSH
45208: EMPTY
45209: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
45210: LD_VAR 0 4
45214: PUSH
45215: LD_INT 0
45217: PUSH
45218: LD_INT 1
45220: PUSH
45221: LD_INT 2
45223: PUSH
45224: LD_INT 3
45226: PUSH
45227: LD_INT 4
45229: PUSH
45230: LD_INT 5
45232: PUSH
45233: EMPTY
45234: LIST
45235: LIST
45236: LIST
45237: LIST
45238: LIST
45239: LIST
45240: IN
45241: NOT
45242: IFTRUE 45285
45244: PUSH
45245: LD_VAR 0 1
45249: PUSH
45250: LD_INT 0
45252: PUSH
45253: LD_INT 1
45255: PUSH
45256: EMPTY
45257: LIST
45258: LIST
45259: IN
45260: IFFALSE 45284
45262: PUSH
45263: LD_VAR 0 5
45267: PUSH
45268: LD_INT 1
45270: PUSH
45271: LD_INT 2
45273: PUSH
45274: LD_INT 3
45276: PUSH
45277: EMPTY
45278: LIST
45279: LIST
45280: LIST
45281: IN
45282: NOT
45283: AND
45284: OR
45285: IFFALSE 45289
// exit ;
45287: GO 63688
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
45289: LD_VAR 0 1
45293: PUSH
45294: LD_INT 6
45296: PUSH
45297: LD_INT 7
45299: PUSH
45300: LD_INT 8
45302: PUSH
45303: LD_INT 13
45305: PUSH
45306: LD_INT 12
45308: PUSH
45309: LD_INT 15
45311: PUSH
45312: LD_INT 11
45314: PUSH
45315: LD_INT 14
45317: PUSH
45318: LD_INT 10
45320: PUSH
45321: EMPTY
45322: LIST
45323: LIST
45324: LIST
45325: LIST
45326: LIST
45327: LIST
45328: LIST
45329: LIST
45330: LIST
45331: IN
45332: IFFALSE 45342
// btype = b_lab ;
45334: LD_ADDR_VAR 0 1
45338: PUSH
45339: LD_INT 6
45341: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
45342: LD_VAR 0 6
45346: PUSH
45347: LD_INT 0
45349: PUSH
45350: LD_INT 1
45352: PUSH
45353: LD_INT 2
45355: PUSH
45356: EMPTY
45357: LIST
45358: LIST
45359: LIST
45360: IN
45361: NOT
45362: IFTRUE 45430
45364: PUSH
45365: LD_VAR 0 1
45369: PUSH
45370: LD_INT 0
45372: PUSH
45373: LD_INT 1
45375: PUSH
45376: LD_INT 2
45378: PUSH
45379: LD_INT 3
45381: PUSH
45382: LD_INT 6
45384: PUSH
45385: LD_INT 36
45387: PUSH
45388: LD_INT 4
45390: PUSH
45391: LD_INT 5
45393: PUSH
45394: LD_INT 31
45396: PUSH
45397: LD_INT 32
45399: PUSH
45400: LD_INT 33
45402: PUSH
45403: EMPTY
45404: LIST
45405: LIST
45406: LIST
45407: LIST
45408: LIST
45409: LIST
45410: LIST
45411: LIST
45412: LIST
45413: LIST
45414: LIST
45415: IN
45416: NOT
45417: IFFALSE 45429
45419: PUSH
45420: LD_VAR 0 6
45424: PUSH
45425: LD_INT 1
45427: EQUAL
45428: AND
45429: OR
45430: IFTRUE 45462
45432: PUSH
45433: LD_VAR 0 1
45437: PUSH
45438: LD_INT 2
45440: PUSH
45441: LD_INT 3
45443: PUSH
45444: EMPTY
45445: LIST
45446: LIST
45447: IN
45448: NOT
45449: IFFALSE 45461
45451: PUSH
45452: LD_VAR 0 6
45456: PUSH
45457: LD_INT 2
45459: EQUAL
45460: AND
45461: OR
45462: IFFALSE 45472
// mode = 0 ;
45464: LD_ADDR_VAR 0 6
45468: PUSH
45469: LD_INT 0
45471: ST_TO_ADDR
// case mode of 0 :
45472: LD_VAR 0 6
45476: PUSH
45477: LD_INT 0
45479: DOUBLE
45480: EQUAL
45481: IFTRUE 45485
45483: GO 56938
45485: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
45486: LD_ADDR_VAR 0 11
45490: PUSH
45491: LD_INT 0
45493: PUSH
45494: LD_INT 0
45496: PUSH
45497: EMPTY
45498: LIST
45499: LIST
45500: PUSH
45501: LD_INT 0
45503: PUSH
45504: LD_INT 1
45506: NEG
45507: PUSH
45508: EMPTY
45509: LIST
45510: LIST
45511: PUSH
45512: LD_INT 1
45514: PUSH
45515: LD_INT 0
45517: PUSH
45518: EMPTY
45519: LIST
45520: LIST
45521: PUSH
45522: LD_INT 1
45524: PUSH
45525: LD_INT 1
45527: PUSH
45528: EMPTY
45529: LIST
45530: LIST
45531: PUSH
45532: LD_INT 0
45534: PUSH
45535: LD_INT 1
45537: PUSH
45538: EMPTY
45539: LIST
45540: LIST
45541: PUSH
45542: LD_INT 1
45544: NEG
45545: PUSH
45546: LD_INT 0
45548: PUSH
45549: EMPTY
45550: LIST
45551: LIST
45552: PUSH
45553: LD_INT 1
45555: NEG
45556: PUSH
45557: LD_INT 1
45559: NEG
45560: PUSH
45561: EMPTY
45562: LIST
45563: LIST
45564: PUSH
45565: LD_INT 1
45567: NEG
45568: PUSH
45569: LD_INT 2
45571: NEG
45572: PUSH
45573: EMPTY
45574: LIST
45575: LIST
45576: PUSH
45577: LD_INT 0
45579: PUSH
45580: LD_INT 2
45582: NEG
45583: PUSH
45584: EMPTY
45585: LIST
45586: LIST
45587: PUSH
45588: LD_INT 1
45590: PUSH
45591: LD_INT 1
45593: NEG
45594: PUSH
45595: EMPTY
45596: LIST
45597: LIST
45598: PUSH
45599: LD_INT 1
45601: PUSH
45602: LD_INT 2
45604: PUSH
45605: EMPTY
45606: LIST
45607: LIST
45608: PUSH
45609: LD_INT 0
45611: PUSH
45612: LD_INT 2
45614: PUSH
45615: EMPTY
45616: LIST
45617: LIST
45618: PUSH
45619: LD_INT 1
45621: NEG
45622: PUSH
45623: LD_INT 1
45625: PUSH
45626: EMPTY
45627: LIST
45628: LIST
45629: PUSH
45630: LD_INT 1
45632: PUSH
45633: LD_INT 3
45635: PUSH
45636: EMPTY
45637: LIST
45638: LIST
45639: PUSH
45640: LD_INT 0
45642: PUSH
45643: LD_INT 3
45645: PUSH
45646: EMPTY
45647: LIST
45648: LIST
45649: PUSH
45650: LD_INT 1
45652: NEG
45653: PUSH
45654: LD_INT 2
45656: PUSH
45657: EMPTY
45658: LIST
45659: LIST
45660: PUSH
45661: EMPTY
45662: LIST
45663: LIST
45664: LIST
45665: LIST
45666: LIST
45667: LIST
45668: LIST
45669: LIST
45670: LIST
45671: LIST
45672: LIST
45673: LIST
45674: LIST
45675: LIST
45676: LIST
45677: LIST
45678: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45679: LD_ADDR_VAR 0 12
45683: PUSH
45684: LD_INT 0
45686: PUSH
45687: LD_INT 0
45689: PUSH
45690: EMPTY
45691: LIST
45692: LIST
45693: PUSH
45694: LD_INT 0
45696: PUSH
45697: LD_INT 1
45699: NEG
45700: PUSH
45701: EMPTY
45702: LIST
45703: LIST
45704: PUSH
45705: LD_INT 1
45707: PUSH
45708: LD_INT 0
45710: PUSH
45711: EMPTY
45712: LIST
45713: LIST
45714: PUSH
45715: LD_INT 1
45717: PUSH
45718: LD_INT 1
45720: PUSH
45721: EMPTY
45722: LIST
45723: LIST
45724: PUSH
45725: LD_INT 0
45727: PUSH
45728: LD_INT 1
45730: PUSH
45731: EMPTY
45732: LIST
45733: LIST
45734: PUSH
45735: LD_INT 1
45737: NEG
45738: PUSH
45739: LD_INT 0
45741: PUSH
45742: EMPTY
45743: LIST
45744: LIST
45745: PUSH
45746: LD_INT 1
45748: NEG
45749: PUSH
45750: LD_INT 1
45752: NEG
45753: PUSH
45754: EMPTY
45755: LIST
45756: LIST
45757: PUSH
45758: LD_INT 1
45760: PUSH
45761: LD_INT 1
45763: NEG
45764: PUSH
45765: EMPTY
45766: LIST
45767: LIST
45768: PUSH
45769: LD_INT 2
45771: PUSH
45772: LD_INT 0
45774: PUSH
45775: EMPTY
45776: LIST
45777: LIST
45778: PUSH
45779: LD_INT 2
45781: PUSH
45782: LD_INT 1
45784: PUSH
45785: EMPTY
45786: LIST
45787: LIST
45788: PUSH
45789: LD_INT 1
45791: NEG
45792: PUSH
45793: LD_INT 1
45795: PUSH
45796: EMPTY
45797: LIST
45798: LIST
45799: PUSH
45800: LD_INT 2
45802: NEG
45803: PUSH
45804: LD_INT 0
45806: PUSH
45807: EMPTY
45808: LIST
45809: LIST
45810: PUSH
45811: LD_INT 2
45813: NEG
45814: PUSH
45815: LD_INT 1
45817: NEG
45818: PUSH
45819: EMPTY
45820: LIST
45821: LIST
45822: PUSH
45823: LD_INT 2
45825: NEG
45826: PUSH
45827: LD_INT 1
45829: PUSH
45830: EMPTY
45831: LIST
45832: LIST
45833: PUSH
45834: LD_INT 3
45836: NEG
45837: PUSH
45838: LD_INT 0
45840: PUSH
45841: EMPTY
45842: LIST
45843: LIST
45844: PUSH
45845: LD_INT 3
45847: NEG
45848: PUSH
45849: LD_INT 1
45851: NEG
45852: PUSH
45853: EMPTY
45854: LIST
45855: LIST
45856: PUSH
45857: EMPTY
45858: LIST
45859: LIST
45860: LIST
45861: LIST
45862: LIST
45863: LIST
45864: LIST
45865: LIST
45866: LIST
45867: LIST
45868: LIST
45869: LIST
45870: LIST
45871: LIST
45872: LIST
45873: LIST
45874: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45875: LD_ADDR_VAR 0 13
45879: PUSH
45880: LD_INT 0
45882: PUSH
45883: LD_INT 0
45885: PUSH
45886: EMPTY
45887: LIST
45888: LIST
45889: PUSH
45890: LD_INT 0
45892: PUSH
45893: LD_INT 1
45895: NEG
45896: PUSH
45897: EMPTY
45898: LIST
45899: LIST
45900: PUSH
45901: LD_INT 1
45903: PUSH
45904: LD_INT 0
45906: PUSH
45907: EMPTY
45908: LIST
45909: LIST
45910: PUSH
45911: LD_INT 1
45913: PUSH
45914: LD_INT 1
45916: PUSH
45917: EMPTY
45918: LIST
45919: LIST
45920: PUSH
45921: LD_INT 0
45923: PUSH
45924: LD_INT 1
45926: PUSH
45927: EMPTY
45928: LIST
45929: LIST
45930: PUSH
45931: LD_INT 1
45933: NEG
45934: PUSH
45935: LD_INT 0
45937: PUSH
45938: EMPTY
45939: LIST
45940: LIST
45941: PUSH
45942: LD_INT 1
45944: NEG
45945: PUSH
45946: LD_INT 1
45948: NEG
45949: PUSH
45950: EMPTY
45951: LIST
45952: LIST
45953: PUSH
45954: LD_INT 1
45956: NEG
45957: PUSH
45958: LD_INT 2
45960: NEG
45961: PUSH
45962: EMPTY
45963: LIST
45964: LIST
45965: PUSH
45966: LD_INT 2
45968: PUSH
45969: LD_INT 1
45971: PUSH
45972: EMPTY
45973: LIST
45974: LIST
45975: PUSH
45976: LD_INT 2
45978: PUSH
45979: LD_INT 2
45981: PUSH
45982: EMPTY
45983: LIST
45984: LIST
45985: PUSH
45986: LD_INT 1
45988: PUSH
45989: LD_INT 2
45991: PUSH
45992: EMPTY
45993: LIST
45994: LIST
45995: PUSH
45996: LD_INT 2
45998: NEG
45999: PUSH
46000: LD_INT 1
46002: NEG
46003: PUSH
46004: EMPTY
46005: LIST
46006: LIST
46007: PUSH
46008: LD_INT 2
46010: NEG
46011: PUSH
46012: LD_INT 2
46014: NEG
46015: PUSH
46016: EMPTY
46017: LIST
46018: LIST
46019: PUSH
46020: LD_INT 2
46022: NEG
46023: PUSH
46024: LD_INT 3
46026: NEG
46027: PUSH
46028: EMPTY
46029: LIST
46030: LIST
46031: PUSH
46032: LD_INT 3
46034: NEG
46035: PUSH
46036: LD_INT 2
46038: NEG
46039: PUSH
46040: EMPTY
46041: LIST
46042: LIST
46043: PUSH
46044: LD_INT 3
46046: NEG
46047: PUSH
46048: LD_INT 3
46050: NEG
46051: PUSH
46052: EMPTY
46053: LIST
46054: LIST
46055: PUSH
46056: EMPTY
46057: LIST
46058: LIST
46059: LIST
46060: LIST
46061: LIST
46062: LIST
46063: LIST
46064: LIST
46065: LIST
46066: LIST
46067: LIST
46068: LIST
46069: LIST
46070: LIST
46071: LIST
46072: LIST
46073: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
46074: LD_ADDR_VAR 0 14
46078: PUSH
46079: LD_INT 0
46081: PUSH
46082: LD_INT 0
46084: PUSH
46085: EMPTY
46086: LIST
46087: LIST
46088: PUSH
46089: LD_INT 0
46091: PUSH
46092: LD_INT 1
46094: NEG
46095: PUSH
46096: EMPTY
46097: LIST
46098: LIST
46099: PUSH
46100: LD_INT 1
46102: PUSH
46103: LD_INT 0
46105: PUSH
46106: EMPTY
46107: LIST
46108: LIST
46109: PUSH
46110: LD_INT 1
46112: PUSH
46113: LD_INT 1
46115: PUSH
46116: EMPTY
46117: LIST
46118: LIST
46119: PUSH
46120: LD_INT 0
46122: PUSH
46123: LD_INT 1
46125: PUSH
46126: EMPTY
46127: LIST
46128: LIST
46129: PUSH
46130: LD_INT 1
46132: NEG
46133: PUSH
46134: LD_INT 0
46136: PUSH
46137: EMPTY
46138: LIST
46139: LIST
46140: PUSH
46141: LD_INT 1
46143: NEG
46144: PUSH
46145: LD_INT 1
46147: NEG
46148: PUSH
46149: EMPTY
46150: LIST
46151: LIST
46152: PUSH
46153: LD_INT 1
46155: NEG
46156: PUSH
46157: LD_INT 2
46159: NEG
46160: PUSH
46161: EMPTY
46162: LIST
46163: LIST
46164: PUSH
46165: LD_INT 0
46167: PUSH
46168: LD_INT 2
46170: NEG
46171: PUSH
46172: EMPTY
46173: LIST
46174: LIST
46175: PUSH
46176: LD_INT 1
46178: PUSH
46179: LD_INT 1
46181: NEG
46182: PUSH
46183: EMPTY
46184: LIST
46185: LIST
46186: PUSH
46187: LD_INT 1
46189: PUSH
46190: LD_INT 2
46192: PUSH
46193: EMPTY
46194: LIST
46195: LIST
46196: PUSH
46197: LD_INT 0
46199: PUSH
46200: LD_INT 2
46202: PUSH
46203: EMPTY
46204: LIST
46205: LIST
46206: PUSH
46207: LD_INT 1
46209: NEG
46210: PUSH
46211: LD_INT 1
46213: PUSH
46214: EMPTY
46215: LIST
46216: LIST
46217: PUSH
46218: LD_INT 1
46220: NEG
46221: PUSH
46222: LD_INT 3
46224: NEG
46225: PUSH
46226: EMPTY
46227: LIST
46228: LIST
46229: PUSH
46230: LD_INT 0
46232: PUSH
46233: LD_INT 3
46235: NEG
46236: PUSH
46237: EMPTY
46238: LIST
46239: LIST
46240: PUSH
46241: LD_INT 1
46243: PUSH
46244: LD_INT 2
46246: NEG
46247: PUSH
46248: EMPTY
46249: LIST
46250: LIST
46251: PUSH
46252: EMPTY
46253: LIST
46254: LIST
46255: LIST
46256: LIST
46257: LIST
46258: LIST
46259: LIST
46260: LIST
46261: LIST
46262: LIST
46263: LIST
46264: LIST
46265: LIST
46266: LIST
46267: LIST
46268: LIST
46269: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
46270: LD_ADDR_VAR 0 15
46274: PUSH
46275: LD_INT 0
46277: PUSH
46278: LD_INT 0
46280: PUSH
46281: EMPTY
46282: LIST
46283: LIST
46284: PUSH
46285: LD_INT 0
46287: PUSH
46288: LD_INT 1
46290: NEG
46291: PUSH
46292: EMPTY
46293: LIST
46294: LIST
46295: PUSH
46296: LD_INT 1
46298: PUSH
46299: LD_INT 0
46301: PUSH
46302: EMPTY
46303: LIST
46304: LIST
46305: PUSH
46306: LD_INT 1
46308: PUSH
46309: LD_INT 1
46311: PUSH
46312: EMPTY
46313: LIST
46314: LIST
46315: PUSH
46316: LD_INT 0
46318: PUSH
46319: LD_INT 1
46321: PUSH
46322: EMPTY
46323: LIST
46324: LIST
46325: PUSH
46326: LD_INT 1
46328: NEG
46329: PUSH
46330: LD_INT 0
46332: PUSH
46333: EMPTY
46334: LIST
46335: LIST
46336: PUSH
46337: LD_INT 1
46339: NEG
46340: PUSH
46341: LD_INT 1
46343: NEG
46344: PUSH
46345: EMPTY
46346: LIST
46347: LIST
46348: PUSH
46349: LD_INT 1
46351: PUSH
46352: LD_INT 1
46354: NEG
46355: PUSH
46356: EMPTY
46357: LIST
46358: LIST
46359: PUSH
46360: LD_INT 2
46362: PUSH
46363: LD_INT 0
46365: PUSH
46366: EMPTY
46367: LIST
46368: LIST
46369: PUSH
46370: LD_INT 2
46372: PUSH
46373: LD_INT 1
46375: PUSH
46376: EMPTY
46377: LIST
46378: LIST
46379: PUSH
46380: LD_INT 1
46382: NEG
46383: PUSH
46384: LD_INT 1
46386: PUSH
46387: EMPTY
46388: LIST
46389: LIST
46390: PUSH
46391: LD_INT 2
46393: NEG
46394: PUSH
46395: LD_INT 0
46397: PUSH
46398: EMPTY
46399: LIST
46400: LIST
46401: PUSH
46402: LD_INT 2
46404: NEG
46405: PUSH
46406: LD_INT 1
46408: NEG
46409: PUSH
46410: EMPTY
46411: LIST
46412: LIST
46413: PUSH
46414: LD_INT 2
46416: PUSH
46417: LD_INT 1
46419: NEG
46420: PUSH
46421: EMPTY
46422: LIST
46423: LIST
46424: PUSH
46425: LD_INT 3
46427: PUSH
46428: LD_INT 0
46430: PUSH
46431: EMPTY
46432: LIST
46433: LIST
46434: PUSH
46435: LD_INT 3
46437: PUSH
46438: LD_INT 1
46440: PUSH
46441: EMPTY
46442: LIST
46443: LIST
46444: PUSH
46445: EMPTY
46446: LIST
46447: LIST
46448: LIST
46449: LIST
46450: LIST
46451: LIST
46452: LIST
46453: LIST
46454: LIST
46455: LIST
46456: LIST
46457: LIST
46458: LIST
46459: LIST
46460: LIST
46461: LIST
46462: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
46463: LD_ADDR_VAR 0 16
46467: PUSH
46468: LD_INT 0
46470: PUSH
46471: LD_INT 0
46473: PUSH
46474: EMPTY
46475: LIST
46476: LIST
46477: PUSH
46478: LD_INT 0
46480: PUSH
46481: LD_INT 1
46483: NEG
46484: PUSH
46485: EMPTY
46486: LIST
46487: LIST
46488: PUSH
46489: LD_INT 1
46491: PUSH
46492: LD_INT 0
46494: PUSH
46495: EMPTY
46496: LIST
46497: LIST
46498: PUSH
46499: LD_INT 1
46501: PUSH
46502: LD_INT 1
46504: PUSH
46505: EMPTY
46506: LIST
46507: LIST
46508: PUSH
46509: LD_INT 0
46511: PUSH
46512: LD_INT 1
46514: PUSH
46515: EMPTY
46516: LIST
46517: LIST
46518: PUSH
46519: LD_INT 1
46521: NEG
46522: PUSH
46523: LD_INT 0
46525: PUSH
46526: EMPTY
46527: LIST
46528: LIST
46529: PUSH
46530: LD_INT 1
46532: NEG
46533: PUSH
46534: LD_INT 1
46536: NEG
46537: PUSH
46538: EMPTY
46539: LIST
46540: LIST
46541: PUSH
46542: LD_INT 1
46544: NEG
46545: PUSH
46546: LD_INT 2
46548: NEG
46549: PUSH
46550: EMPTY
46551: LIST
46552: LIST
46553: PUSH
46554: LD_INT 2
46556: PUSH
46557: LD_INT 1
46559: PUSH
46560: EMPTY
46561: LIST
46562: LIST
46563: PUSH
46564: LD_INT 2
46566: PUSH
46567: LD_INT 2
46569: PUSH
46570: EMPTY
46571: LIST
46572: LIST
46573: PUSH
46574: LD_INT 1
46576: PUSH
46577: LD_INT 2
46579: PUSH
46580: EMPTY
46581: LIST
46582: LIST
46583: PUSH
46584: LD_INT 2
46586: NEG
46587: PUSH
46588: LD_INT 1
46590: NEG
46591: PUSH
46592: EMPTY
46593: LIST
46594: LIST
46595: PUSH
46596: LD_INT 2
46598: NEG
46599: PUSH
46600: LD_INT 2
46602: NEG
46603: PUSH
46604: EMPTY
46605: LIST
46606: LIST
46607: PUSH
46608: LD_INT 3
46610: PUSH
46611: LD_INT 2
46613: PUSH
46614: EMPTY
46615: LIST
46616: LIST
46617: PUSH
46618: LD_INT 3
46620: PUSH
46621: LD_INT 3
46623: PUSH
46624: EMPTY
46625: LIST
46626: LIST
46627: PUSH
46628: LD_INT 2
46630: PUSH
46631: LD_INT 3
46633: PUSH
46634: EMPTY
46635: LIST
46636: LIST
46637: PUSH
46638: EMPTY
46639: LIST
46640: LIST
46641: LIST
46642: LIST
46643: LIST
46644: LIST
46645: LIST
46646: LIST
46647: LIST
46648: LIST
46649: LIST
46650: LIST
46651: LIST
46652: LIST
46653: LIST
46654: LIST
46655: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46656: LD_ADDR_VAR 0 17
46660: PUSH
46661: LD_INT 0
46663: PUSH
46664: LD_INT 0
46666: PUSH
46667: EMPTY
46668: LIST
46669: LIST
46670: PUSH
46671: LD_INT 0
46673: PUSH
46674: LD_INT 1
46676: NEG
46677: PUSH
46678: EMPTY
46679: LIST
46680: LIST
46681: PUSH
46682: LD_INT 1
46684: PUSH
46685: LD_INT 0
46687: PUSH
46688: EMPTY
46689: LIST
46690: LIST
46691: PUSH
46692: LD_INT 1
46694: PUSH
46695: LD_INT 1
46697: PUSH
46698: EMPTY
46699: LIST
46700: LIST
46701: PUSH
46702: LD_INT 0
46704: PUSH
46705: LD_INT 1
46707: PUSH
46708: EMPTY
46709: LIST
46710: LIST
46711: PUSH
46712: LD_INT 1
46714: NEG
46715: PUSH
46716: LD_INT 0
46718: PUSH
46719: EMPTY
46720: LIST
46721: LIST
46722: PUSH
46723: LD_INT 1
46725: NEG
46726: PUSH
46727: LD_INT 1
46729: NEG
46730: PUSH
46731: EMPTY
46732: LIST
46733: LIST
46734: PUSH
46735: LD_INT 1
46737: NEG
46738: PUSH
46739: LD_INT 2
46741: NEG
46742: PUSH
46743: EMPTY
46744: LIST
46745: LIST
46746: PUSH
46747: LD_INT 0
46749: PUSH
46750: LD_INT 2
46752: NEG
46753: PUSH
46754: EMPTY
46755: LIST
46756: LIST
46757: PUSH
46758: LD_INT 1
46760: PUSH
46761: LD_INT 1
46763: NEG
46764: PUSH
46765: EMPTY
46766: LIST
46767: LIST
46768: PUSH
46769: LD_INT 2
46771: PUSH
46772: LD_INT 0
46774: PUSH
46775: EMPTY
46776: LIST
46777: LIST
46778: PUSH
46779: LD_INT 2
46781: PUSH
46782: LD_INT 1
46784: PUSH
46785: EMPTY
46786: LIST
46787: LIST
46788: PUSH
46789: LD_INT 2
46791: PUSH
46792: LD_INT 2
46794: PUSH
46795: EMPTY
46796: LIST
46797: LIST
46798: PUSH
46799: LD_INT 1
46801: PUSH
46802: LD_INT 2
46804: PUSH
46805: EMPTY
46806: LIST
46807: LIST
46808: PUSH
46809: LD_INT 0
46811: PUSH
46812: LD_INT 2
46814: PUSH
46815: EMPTY
46816: LIST
46817: LIST
46818: PUSH
46819: LD_INT 1
46821: NEG
46822: PUSH
46823: LD_INT 1
46825: PUSH
46826: EMPTY
46827: LIST
46828: LIST
46829: PUSH
46830: LD_INT 2
46832: NEG
46833: PUSH
46834: LD_INT 0
46836: PUSH
46837: EMPTY
46838: LIST
46839: LIST
46840: PUSH
46841: LD_INT 2
46843: NEG
46844: PUSH
46845: LD_INT 1
46847: NEG
46848: PUSH
46849: EMPTY
46850: LIST
46851: LIST
46852: PUSH
46853: LD_INT 2
46855: NEG
46856: PUSH
46857: LD_INT 2
46859: NEG
46860: PUSH
46861: EMPTY
46862: LIST
46863: LIST
46864: PUSH
46865: EMPTY
46866: LIST
46867: LIST
46868: LIST
46869: LIST
46870: LIST
46871: LIST
46872: LIST
46873: LIST
46874: LIST
46875: LIST
46876: LIST
46877: LIST
46878: LIST
46879: LIST
46880: LIST
46881: LIST
46882: LIST
46883: LIST
46884: LIST
46885: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46886: LD_ADDR_VAR 0 18
46890: PUSH
46891: LD_INT 0
46893: PUSH
46894: LD_INT 0
46896: PUSH
46897: EMPTY
46898: LIST
46899: LIST
46900: PUSH
46901: LD_INT 0
46903: PUSH
46904: LD_INT 1
46906: NEG
46907: PUSH
46908: EMPTY
46909: LIST
46910: LIST
46911: PUSH
46912: LD_INT 1
46914: PUSH
46915: LD_INT 0
46917: PUSH
46918: EMPTY
46919: LIST
46920: LIST
46921: PUSH
46922: LD_INT 1
46924: PUSH
46925: LD_INT 1
46927: PUSH
46928: EMPTY
46929: LIST
46930: LIST
46931: PUSH
46932: LD_INT 0
46934: PUSH
46935: LD_INT 1
46937: PUSH
46938: EMPTY
46939: LIST
46940: LIST
46941: PUSH
46942: LD_INT 1
46944: NEG
46945: PUSH
46946: LD_INT 0
46948: PUSH
46949: EMPTY
46950: LIST
46951: LIST
46952: PUSH
46953: LD_INT 1
46955: NEG
46956: PUSH
46957: LD_INT 1
46959: NEG
46960: PUSH
46961: EMPTY
46962: LIST
46963: LIST
46964: PUSH
46965: LD_INT 1
46967: NEG
46968: PUSH
46969: LD_INT 2
46971: NEG
46972: PUSH
46973: EMPTY
46974: LIST
46975: LIST
46976: PUSH
46977: LD_INT 0
46979: PUSH
46980: LD_INT 2
46982: NEG
46983: PUSH
46984: EMPTY
46985: LIST
46986: LIST
46987: PUSH
46988: LD_INT 1
46990: PUSH
46991: LD_INT 1
46993: NEG
46994: PUSH
46995: EMPTY
46996: LIST
46997: LIST
46998: PUSH
46999: LD_INT 2
47001: PUSH
47002: LD_INT 0
47004: PUSH
47005: EMPTY
47006: LIST
47007: LIST
47008: PUSH
47009: LD_INT 2
47011: PUSH
47012: LD_INT 1
47014: PUSH
47015: EMPTY
47016: LIST
47017: LIST
47018: PUSH
47019: LD_INT 2
47021: PUSH
47022: LD_INT 2
47024: PUSH
47025: EMPTY
47026: LIST
47027: LIST
47028: PUSH
47029: LD_INT 1
47031: PUSH
47032: LD_INT 2
47034: PUSH
47035: EMPTY
47036: LIST
47037: LIST
47038: PUSH
47039: LD_INT 0
47041: PUSH
47042: LD_INT 2
47044: PUSH
47045: EMPTY
47046: LIST
47047: LIST
47048: PUSH
47049: LD_INT 1
47051: NEG
47052: PUSH
47053: LD_INT 1
47055: PUSH
47056: EMPTY
47057: LIST
47058: LIST
47059: PUSH
47060: LD_INT 2
47062: NEG
47063: PUSH
47064: LD_INT 0
47066: PUSH
47067: EMPTY
47068: LIST
47069: LIST
47070: PUSH
47071: LD_INT 2
47073: NEG
47074: PUSH
47075: LD_INT 1
47077: NEG
47078: PUSH
47079: EMPTY
47080: LIST
47081: LIST
47082: PUSH
47083: LD_INT 2
47085: NEG
47086: PUSH
47087: LD_INT 2
47089: NEG
47090: PUSH
47091: EMPTY
47092: LIST
47093: LIST
47094: PUSH
47095: EMPTY
47096: LIST
47097: LIST
47098: LIST
47099: LIST
47100: LIST
47101: LIST
47102: LIST
47103: LIST
47104: LIST
47105: LIST
47106: LIST
47107: LIST
47108: LIST
47109: LIST
47110: LIST
47111: LIST
47112: LIST
47113: LIST
47114: LIST
47115: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47116: LD_ADDR_VAR 0 19
47120: PUSH
47121: LD_INT 0
47123: PUSH
47124: LD_INT 0
47126: PUSH
47127: EMPTY
47128: LIST
47129: LIST
47130: PUSH
47131: LD_INT 0
47133: PUSH
47134: LD_INT 1
47136: NEG
47137: PUSH
47138: EMPTY
47139: LIST
47140: LIST
47141: PUSH
47142: LD_INT 1
47144: PUSH
47145: LD_INT 0
47147: PUSH
47148: EMPTY
47149: LIST
47150: LIST
47151: PUSH
47152: LD_INT 1
47154: PUSH
47155: LD_INT 1
47157: PUSH
47158: EMPTY
47159: LIST
47160: LIST
47161: PUSH
47162: LD_INT 0
47164: PUSH
47165: LD_INT 1
47167: PUSH
47168: EMPTY
47169: LIST
47170: LIST
47171: PUSH
47172: LD_INT 1
47174: NEG
47175: PUSH
47176: LD_INT 0
47178: PUSH
47179: EMPTY
47180: LIST
47181: LIST
47182: PUSH
47183: LD_INT 1
47185: NEG
47186: PUSH
47187: LD_INT 1
47189: NEG
47190: PUSH
47191: EMPTY
47192: LIST
47193: LIST
47194: PUSH
47195: LD_INT 1
47197: NEG
47198: PUSH
47199: LD_INT 2
47201: NEG
47202: PUSH
47203: EMPTY
47204: LIST
47205: LIST
47206: PUSH
47207: LD_INT 0
47209: PUSH
47210: LD_INT 2
47212: NEG
47213: PUSH
47214: EMPTY
47215: LIST
47216: LIST
47217: PUSH
47218: LD_INT 1
47220: PUSH
47221: LD_INT 1
47223: NEG
47224: PUSH
47225: EMPTY
47226: LIST
47227: LIST
47228: PUSH
47229: LD_INT 2
47231: PUSH
47232: LD_INT 0
47234: PUSH
47235: EMPTY
47236: LIST
47237: LIST
47238: PUSH
47239: LD_INT 2
47241: PUSH
47242: LD_INT 1
47244: PUSH
47245: EMPTY
47246: LIST
47247: LIST
47248: PUSH
47249: LD_INT 2
47251: PUSH
47252: LD_INT 2
47254: PUSH
47255: EMPTY
47256: LIST
47257: LIST
47258: PUSH
47259: LD_INT 1
47261: PUSH
47262: LD_INT 2
47264: PUSH
47265: EMPTY
47266: LIST
47267: LIST
47268: PUSH
47269: LD_INT 0
47271: PUSH
47272: LD_INT 2
47274: PUSH
47275: EMPTY
47276: LIST
47277: LIST
47278: PUSH
47279: LD_INT 1
47281: NEG
47282: PUSH
47283: LD_INT 1
47285: PUSH
47286: EMPTY
47287: LIST
47288: LIST
47289: PUSH
47290: LD_INT 2
47292: NEG
47293: PUSH
47294: LD_INT 0
47296: PUSH
47297: EMPTY
47298: LIST
47299: LIST
47300: PUSH
47301: LD_INT 2
47303: NEG
47304: PUSH
47305: LD_INT 1
47307: NEG
47308: PUSH
47309: EMPTY
47310: LIST
47311: LIST
47312: PUSH
47313: LD_INT 2
47315: NEG
47316: PUSH
47317: LD_INT 2
47319: NEG
47320: PUSH
47321: EMPTY
47322: LIST
47323: LIST
47324: PUSH
47325: EMPTY
47326: LIST
47327: LIST
47328: LIST
47329: LIST
47330: LIST
47331: LIST
47332: LIST
47333: LIST
47334: LIST
47335: LIST
47336: LIST
47337: LIST
47338: LIST
47339: LIST
47340: LIST
47341: LIST
47342: LIST
47343: LIST
47344: LIST
47345: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47346: LD_ADDR_VAR 0 20
47350: PUSH
47351: LD_INT 0
47353: PUSH
47354: LD_INT 0
47356: PUSH
47357: EMPTY
47358: LIST
47359: LIST
47360: PUSH
47361: LD_INT 0
47363: PUSH
47364: LD_INT 1
47366: NEG
47367: PUSH
47368: EMPTY
47369: LIST
47370: LIST
47371: PUSH
47372: LD_INT 1
47374: PUSH
47375: LD_INT 0
47377: PUSH
47378: EMPTY
47379: LIST
47380: LIST
47381: PUSH
47382: LD_INT 1
47384: PUSH
47385: LD_INT 1
47387: PUSH
47388: EMPTY
47389: LIST
47390: LIST
47391: PUSH
47392: LD_INT 0
47394: PUSH
47395: LD_INT 1
47397: PUSH
47398: EMPTY
47399: LIST
47400: LIST
47401: PUSH
47402: LD_INT 1
47404: NEG
47405: PUSH
47406: LD_INT 0
47408: PUSH
47409: EMPTY
47410: LIST
47411: LIST
47412: PUSH
47413: LD_INT 1
47415: NEG
47416: PUSH
47417: LD_INT 1
47419: NEG
47420: PUSH
47421: EMPTY
47422: LIST
47423: LIST
47424: PUSH
47425: LD_INT 1
47427: NEG
47428: PUSH
47429: LD_INT 2
47431: NEG
47432: PUSH
47433: EMPTY
47434: LIST
47435: LIST
47436: PUSH
47437: LD_INT 0
47439: PUSH
47440: LD_INT 2
47442: NEG
47443: PUSH
47444: EMPTY
47445: LIST
47446: LIST
47447: PUSH
47448: LD_INT 1
47450: PUSH
47451: LD_INT 1
47453: NEG
47454: PUSH
47455: EMPTY
47456: LIST
47457: LIST
47458: PUSH
47459: LD_INT 2
47461: PUSH
47462: LD_INT 0
47464: PUSH
47465: EMPTY
47466: LIST
47467: LIST
47468: PUSH
47469: LD_INT 2
47471: PUSH
47472: LD_INT 1
47474: PUSH
47475: EMPTY
47476: LIST
47477: LIST
47478: PUSH
47479: LD_INT 2
47481: PUSH
47482: LD_INT 2
47484: PUSH
47485: EMPTY
47486: LIST
47487: LIST
47488: PUSH
47489: LD_INT 1
47491: PUSH
47492: LD_INT 2
47494: PUSH
47495: EMPTY
47496: LIST
47497: LIST
47498: PUSH
47499: LD_INT 0
47501: PUSH
47502: LD_INT 2
47504: PUSH
47505: EMPTY
47506: LIST
47507: LIST
47508: PUSH
47509: LD_INT 1
47511: NEG
47512: PUSH
47513: LD_INT 1
47515: PUSH
47516: EMPTY
47517: LIST
47518: LIST
47519: PUSH
47520: LD_INT 2
47522: NEG
47523: PUSH
47524: LD_INT 0
47526: PUSH
47527: EMPTY
47528: LIST
47529: LIST
47530: PUSH
47531: LD_INT 2
47533: NEG
47534: PUSH
47535: LD_INT 1
47537: NEG
47538: PUSH
47539: EMPTY
47540: LIST
47541: LIST
47542: PUSH
47543: LD_INT 2
47545: NEG
47546: PUSH
47547: LD_INT 2
47549: NEG
47550: PUSH
47551: EMPTY
47552: LIST
47553: LIST
47554: PUSH
47555: EMPTY
47556: LIST
47557: LIST
47558: LIST
47559: LIST
47560: LIST
47561: LIST
47562: LIST
47563: LIST
47564: LIST
47565: LIST
47566: LIST
47567: LIST
47568: LIST
47569: LIST
47570: LIST
47571: LIST
47572: LIST
47573: LIST
47574: LIST
47575: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47576: LD_ADDR_VAR 0 21
47580: PUSH
47581: LD_INT 0
47583: PUSH
47584: LD_INT 0
47586: PUSH
47587: EMPTY
47588: LIST
47589: LIST
47590: PUSH
47591: LD_INT 0
47593: PUSH
47594: LD_INT 1
47596: NEG
47597: PUSH
47598: EMPTY
47599: LIST
47600: LIST
47601: PUSH
47602: LD_INT 1
47604: PUSH
47605: LD_INT 0
47607: PUSH
47608: EMPTY
47609: LIST
47610: LIST
47611: PUSH
47612: LD_INT 1
47614: PUSH
47615: LD_INT 1
47617: PUSH
47618: EMPTY
47619: LIST
47620: LIST
47621: PUSH
47622: LD_INT 0
47624: PUSH
47625: LD_INT 1
47627: PUSH
47628: EMPTY
47629: LIST
47630: LIST
47631: PUSH
47632: LD_INT 1
47634: NEG
47635: PUSH
47636: LD_INT 0
47638: PUSH
47639: EMPTY
47640: LIST
47641: LIST
47642: PUSH
47643: LD_INT 1
47645: NEG
47646: PUSH
47647: LD_INT 1
47649: NEG
47650: PUSH
47651: EMPTY
47652: LIST
47653: LIST
47654: PUSH
47655: LD_INT 1
47657: NEG
47658: PUSH
47659: LD_INT 2
47661: NEG
47662: PUSH
47663: EMPTY
47664: LIST
47665: LIST
47666: PUSH
47667: LD_INT 0
47669: PUSH
47670: LD_INT 2
47672: NEG
47673: PUSH
47674: EMPTY
47675: LIST
47676: LIST
47677: PUSH
47678: LD_INT 1
47680: PUSH
47681: LD_INT 1
47683: NEG
47684: PUSH
47685: EMPTY
47686: LIST
47687: LIST
47688: PUSH
47689: LD_INT 2
47691: PUSH
47692: LD_INT 0
47694: PUSH
47695: EMPTY
47696: LIST
47697: LIST
47698: PUSH
47699: LD_INT 2
47701: PUSH
47702: LD_INT 1
47704: PUSH
47705: EMPTY
47706: LIST
47707: LIST
47708: PUSH
47709: LD_INT 2
47711: PUSH
47712: LD_INT 2
47714: PUSH
47715: EMPTY
47716: LIST
47717: LIST
47718: PUSH
47719: LD_INT 1
47721: PUSH
47722: LD_INT 2
47724: PUSH
47725: EMPTY
47726: LIST
47727: LIST
47728: PUSH
47729: LD_INT 0
47731: PUSH
47732: LD_INT 2
47734: PUSH
47735: EMPTY
47736: LIST
47737: LIST
47738: PUSH
47739: LD_INT 1
47741: NEG
47742: PUSH
47743: LD_INT 1
47745: PUSH
47746: EMPTY
47747: LIST
47748: LIST
47749: PUSH
47750: LD_INT 2
47752: NEG
47753: PUSH
47754: LD_INT 0
47756: PUSH
47757: EMPTY
47758: LIST
47759: LIST
47760: PUSH
47761: LD_INT 2
47763: NEG
47764: PUSH
47765: LD_INT 1
47767: NEG
47768: PUSH
47769: EMPTY
47770: LIST
47771: LIST
47772: PUSH
47773: LD_INT 2
47775: NEG
47776: PUSH
47777: LD_INT 2
47779: NEG
47780: PUSH
47781: EMPTY
47782: LIST
47783: LIST
47784: PUSH
47785: EMPTY
47786: LIST
47787: LIST
47788: LIST
47789: LIST
47790: LIST
47791: LIST
47792: LIST
47793: LIST
47794: LIST
47795: LIST
47796: LIST
47797: LIST
47798: LIST
47799: LIST
47800: LIST
47801: LIST
47802: LIST
47803: LIST
47804: LIST
47805: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47806: LD_ADDR_VAR 0 22
47810: PUSH
47811: LD_INT 0
47813: PUSH
47814: LD_INT 0
47816: PUSH
47817: EMPTY
47818: LIST
47819: LIST
47820: PUSH
47821: LD_INT 0
47823: PUSH
47824: LD_INT 1
47826: NEG
47827: PUSH
47828: EMPTY
47829: LIST
47830: LIST
47831: PUSH
47832: LD_INT 1
47834: PUSH
47835: LD_INT 0
47837: PUSH
47838: EMPTY
47839: LIST
47840: LIST
47841: PUSH
47842: LD_INT 1
47844: PUSH
47845: LD_INT 1
47847: PUSH
47848: EMPTY
47849: LIST
47850: LIST
47851: PUSH
47852: LD_INT 0
47854: PUSH
47855: LD_INT 1
47857: PUSH
47858: EMPTY
47859: LIST
47860: LIST
47861: PUSH
47862: LD_INT 1
47864: NEG
47865: PUSH
47866: LD_INT 0
47868: PUSH
47869: EMPTY
47870: LIST
47871: LIST
47872: PUSH
47873: LD_INT 1
47875: NEG
47876: PUSH
47877: LD_INT 1
47879: NEG
47880: PUSH
47881: EMPTY
47882: LIST
47883: LIST
47884: PUSH
47885: LD_INT 1
47887: NEG
47888: PUSH
47889: LD_INT 2
47891: NEG
47892: PUSH
47893: EMPTY
47894: LIST
47895: LIST
47896: PUSH
47897: LD_INT 0
47899: PUSH
47900: LD_INT 2
47902: NEG
47903: PUSH
47904: EMPTY
47905: LIST
47906: LIST
47907: PUSH
47908: LD_INT 1
47910: PUSH
47911: LD_INT 1
47913: NEG
47914: PUSH
47915: EMPTY
47916: LIST
47917: LIST
47918: PUSH
47919: LD_INT 2
47921: PUSH
47922: LD_INT 0
47924: PUSH
47925: EMPTY
47926: LIST
47927: LIST
47928: PUSH
47929: LD_INT 2
47931: PUSH
47932: LD_INT 1
47934: PUSH
47935: EMPTY
47936: LIST
47937: LIST
47938: PUSH
47939: LD_INT 2
47941: PUSH
47942: LD_INT 2
47944: PUSH
47945: EMPTY
47946: LIST
47947: LIST
47948: PUSH
47949: LD_INT 1
47951: PUSH
47952: LD_INT 2
47954: PUSH
47955: EMPTY
47956: LIST
47957: LIST
47958: PUSH
47959: LD_INT 0
47961: PUSH
47962: LD_INT 2
47964: PUSH
47965: EMPTY
47966: LIST
47967: LIST
47968: PUSH
47969: LD_INT 1
47971: NEG
47972: PUSH
47973: LD_INT 1
47975: PUSH
47976: EMPTY
47977: LIST
47978: LIST
47979: PUSH
47980: LD_INT 2
47982: NEG
47983: PUSH
47984: LD_INT 0
47986: PUSH
47987: EMPTY
47988: LIST
47989: LIST
47990: PUSH
47991: LD_INT 2
47993: NEG
47994: PUSH
47995: LD_INT 1
47997: NEG
47998: PUSH
47999: EMPTY
48000: LIST
48001: LIST
48002: PUSH
48003: LD_INT 2
48005: NEG
48006: PUSH
48007: LD_INT 2
48009: NEG
48010: PUSH
48011: EMPTY
48012: LIST
48013: LIST
48014: PUSH
48015: EMPTY
48016: LIST
48017: LIST
48018: LIST
48019: LIST
48020: LIST
48021: LIST
48022: LIST
48023: LIST
48024: LIST
48025: LIST
48026: LIST
48027: LIST
48028: LIST
48029: LIST
48030: LIST
48031: LIST
48032: LIST
48033: LIST
48034: LIST
48035: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
48036: LD_ADDR_VAR 0 23
48040: PUSH
48041: LD_INT 0
48043: PUSH
48044: LD_INT 0
48046: PUSH
48047: EMPTY
48048: LIST
48049: LIST
48050: PUSH
48051: LD_INT 0
48053: PUSH
48054: LD_INT 1
48056: NEG
48057: PUSH
48058: EMPTY
48059: LIST
48060: LIST
48061: PUSH
48062: LD_INT 1
48064: PUSH
48065: LD_INT 0
48067: PUSH
48068: EMPTY
48069: LIST
48070: LIST
48071: PUSH
48072: LD_INT 1
48074: PUSH
48075: LD_INT 1
48077: PUSH
48078: EMPTY
48079: LIST
48080: LIST
48081: PUSH
48082: LD_INT 0
48084: PUSH
48085: LD_INT 1
48087: PUSH
48088: EMPTY
48089: LIST
48090: LIST
48091: PUSH
48092: LD_INT 1
48094: NEG
48095: PUSH
48096: LD_INT 0
48098: PUSH
48099: EMPTY
48100: LIST
48101: LIST
48102: PUSH
48103: LD_INT 1
48105: NEG
48106: PUSH
48107: LD_INT 1
48109: NEG
48110: PUSH
48111: EMPTY
48112: LIST
48113: LIST
48114: PUSH
48115: LD_INT 1
48117: NEG
48118: PUSH
48119: LD_INT 2
48121: NEG
48122: PUSH
48123: EMPTY
48124: LIST
48125: LIST
48126: PUSH
48127: LD_INT 0
48129: PUSH
48130: LD_INT 2
48132: NEG
48133: PUSH
48134: EMPTY
48135: LIST
48136: LIST
48137: PUSH
48138: LD_INT 1
48140: PUSH
48141: LD_INT 1
48143: NEG
48144: PUSH
48145: EMPTY
48146: LIST
48147: LIST
48148: PUSH
48149: LD_INT 2
48151: PUSH
48152: LD_INT 0
48154: PUSH
48155: EMPTY
48156: LIST
48157: LIST
48158: PUSH
48159: LD_INT 2
48161: PUSH
48162: LD_INT 1
48164: PUSH
48165: EMPTY
48166: LIST
48167: LIST
48168: PUSH
48169: LD_INT 2
48171: PUSH
48172: LD_INT 2
48174: PUSH
48175: EMPTY
48176: LIST
48177: LIST
48178: PUSH
48179: LD_INT 1
48181: PUSH
48182: LD_INT 2
48184: PUSH
48185: EMPTY
48186: LIST
48187: LIST
48188: PUSH
48189: LD_INT 0
48191: PUSH
48192: LD_INT 2
48194: PUSH
48195: EMPTY
48196: LIST
48197: LIST
48198: PUSH
48199: LD_INT 1
48201: NEG
48202: PUSH
48203: LD_INT 1
48205: PUSH
48206: EMPTY
48207: LIST
48208: LIST
48209: PUSH
48210: LD_INT 2
48212: NEG
48213: PUSH
48214: LD_INT 0
48216: PUSH
48217: EMPTY
48218: LIST
48219: LIST
48220: PUSH
48221: LD_INT 2
48223: NEG
48224: PUSH
48225: LD_INT 1
48227: NEG
48228: PUSH
48229: EMPTY
48230: LIST
48231: LIST
48232: PUSH
48233: LD_INT 2
48235: NEG
48236: PUSH
48237: LD_INT 2
48239: NEG
48240: PUSH
48241: EMPTY
48242: LIST
48243: LIST
48244: PUSH
48245: LD_INT 2
48247: NEG
48248: PUSH
48249: LD_INT 3
48251: NEG
48252: PUSH
48253: EMPTY
48254: LIST
48255: LIST
48256: PUSH
48257: LD_INT 1
48259: NEG
48260: PUSH
48261: LD_INT 3
48263: NEG
48264: PUSH
48265: EMPTY
48266: LIST
48267: LIST
48268: PUSH
48269: LD_INT 1
48271: PUSH
48272: LD_INT 2
48274: NEG
48275: PUSH
48276: EMPTY
48277: LIST
48278: LIST
48279: PUSH
48280: LD_INT 2
48282: PUSH
48283: LD_INT 1
48285: NEG
48286: PUSH
48287: EMPTY
48288: LIST
48289: LIST
48290: PUSH
48291: EMPTY
48292: LIST
48293: LIST
48294: LIST
48295: LIST
48296: LIST
48297: LIST
48298: LIST
48299: LIST
48300: LIST
48301: LIST
48302: LIST
48303: LIST
48304: LIST
48305: LIST
48306: LIST
48307: LIST
48308: LIST
48309: LIST
48310: LIST
48311: LIST
48312: LIST
48313: LIST
48314: LIST
48315: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
48316: LD_ADDR_VAR 0 24
48320: PUSH
48321: LD_INT 0
48323: PUSH
48324: LD_INT 0
48326: PUSH
48327: EMPTY
48328: LIST
48329: LIST
48330: PUSH
48331: LD_INT 0
48333: PUSH
48334: LD_INT 1
48336: NEG
48337: PUSH
48338: EMPTY
48339: LIST
48340: LIST
48341: PUSH
48342: LD_INT 1
48344: PUSH
48345: LD_INT 0
48347: PUSH
48348: EMPTY
48349: LIST
48350: LIST
48351: PUSH
48352: LD_INT 1
48354: PUSH
48355: LD_INT 1
48357: PUSH
48358: EMPTY
48359: LIST
48360: LIST
48361: PUSH
48362: LD_INT 0
48364: PUSH
48365: LD_INT 1
48367: PUSH
48368: EMPTY
48369: LIST
48370: LIST
48371: PUSH
48372: LD_INT 1
48374: NEG
48375: PUSH
48376: LD_INT 0
48378: PUSH
48379: EMPTY
48380: LIST
48381: LIST
48382: PUSH
48383: LD_INT 1
48385: NEG
48386: PUSH
48387: LD_INT 1
48389: NEG
48390: PUSH
48391: EMPTY
48392: LIST
48393: LIST
48394: PUSH
48395: LD_INT 1
48397: NEG
48398: PUSH
48399: LD_INT 2
48401: NEG
48402: PUSH
48403: EMPTY
48404: LIST
48405: LIST
48406: PUSH
48407: LD_INT 0
48409: PUSH
48410: LD_INT 2
48412: NEG
48413: PUSH
48414: EMPTY
48415: LIST
48416: LIST
48417: PUSH
48418: LD_INT 1
48420: PUSH
48421: LD_INT 1
48423: NEG
48424: PUSH
48425: EMPTY
48426: LIST
48427: LIST
48428: PUSH
48429: LD_INT 2
48431: PUSH
48432: LD_INT 0
48434: PUSH
48435: EMPTY
48436: LIST
48437: LIST
48438: PUSH
48439: LD_INT 2
48441: PUSH
48442: LD_INT 1
48444: PUSH
48445: EMPTY
48446: LIST
48447: LIST
48448: PUSH
48449: LD_INT 2
48451: PUSH
48452: LD_INT 2
48454: PUSH
48455: EMPTY
48456: LIST
48457: LIST
48458: PUSH
48459: LD_INT 1
48461: PUSH
48462: LD_INT 2
48464: PUSH
48465: EMPTY
48466: LIST
48467: LIST
48468: PUSH
48469: LD_INT 0
48471: PUSH
48472: LD_INT 2
48474: PUSH
48475: EMPTY
48476: LIST
48477: LIST
48478: PUSH
48479: LD_INT 1
48481: NEG
48482: PUSH
48483: LD_INT 1
48485: PUSH
48486: EMPTY
48487: LIST
48488: LIST
48489: PUSH
48490: LD_INT 2
48492: NEG
48493: PUSH
48494: LD_INT 0
48496: PUSH
48497: EMPTY
48498: LIST
48499: LIST
48500: PUSH
48501: LD_INT 2
48503: NEG
48504: PUSH
48505: LD_INT 1
48507: NEG
48508: PUSH
48509: EMPTY
48510: LIST
48511: LIST
48512: PUSH
48513: LD_INT 2
48515: NEG
48516: PUSH
48517: LD_INT 2
48519: NEG
48520: PUSH
48521: EMPTY
48522: LIST
48523: LIST
48524: PUSH
48525: LD_INT 1
48527: PUSH
48528: LD_INT 2
48530: NEG
48531: PUSH
48532: EMPTY
48533: LIST
48534: LIST
48535: PUSH
48536: LD_INT 2
48538: PUSH
48539: LD_INT 1
48541: NEG
48542: PUSH
48543: EMPTY
48544: LIST
48545: LIST
48546: PUSH
48547: LD_INT 3
48549: PUSH
48550: LD_INT 1
48552: PUSH
48553: EMPTY
48554: LIST
48555: LIST
48556: PUSH
48557: LD_INT 3
48559: PUSH
48560: LD_INT 2
48562: PUSH
48563: EMPTY
48564: LIST
48565: LIST
48566: PUSH
48567: EMPTY
48568: LIST
48569: LIST
48570: LIST
48571: LIST
48572: LIST
48573: LIST
48574: LIST
48575: LIST
48576: LIST
48577: LIST
48578: LIST
48579: LIST
48580: LIST
48581: LIST
48582: LIST
48583: LIST
48584: LIST
48585: LIST
48586: LIST
48587: LIST
48588: LIST
48589: LIST
48590: LIST
48591: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
48592: LD_ADDR_VAR 0 25
48596: PUSH
48597: LD_INT 0
48599: PUSH
48600: LD_INT 0
48602: PUSH
48603: EMPTY
48604: LIST
48605: LIST
48606: PUSH
48607: LD_INT 0
48609: PUSH
48610: LD_INT 1
48612: NEG
48613: PUSH
48614: EMPTY
48615: LIST
48616: LIST
48617: PUSH
48618: LD_INT 1
48620: PUSH
48621: LD_INT 0
48623: PUSH
48624: EMPTY
48625: LIST
48626: LIST
48627: PUSH
48628: LD_INT 1
48630: PUSH
48631: LD_INT 1
48633: PUSH
48634: EMPTY
48635: LIST
48636: LIST
48637: PUSH
48638: LD_INT 0
48640: PUSH
48641: LD_INT 1
48643: PUSH
48644: EMPTY
48645: LIST
48646: LIST
48647: PUSH
48648: LD_INT 1
48650: NEG
48651: PUSH
48652: LD_INT 0
48654: PUSH
48655: EMPTY
48656: LIST
48657: LIST
48658: PUSH
48659: LD_INT 1
48661: NEG
48662: PUSH
48663: LD_INT 1
48665: NEG
48666: PUSH
48667: EMPTY
48668: LIST
48669: LIST
48670: PUSH
48671: LD_INT 1
48673: NEG
48674: PUSH
48675: LD_INT 2
48677: NEG
48678: PUSH
48679: EMPTY
48680: LIST
48681: LIST
48682: PUSH
48683: LD_INT 0
48685: PUSH
48686: LD_INT 2
48688: NEG
48689: PUSH
48690: EMPTY
48691: LIST
48692: LIST
48693: PUSH
48694: LD_INT 1
48696: PUSH
48697: LD_INT 1
48699: NEG
48700: PUSH
48701: EMPTY
48702: LIST
48703: LIST
48704: PUSH
48705: LD_INT 2
48707: PUSH
48708: LD_INT 0
48710: PUSH
48711: EMPTY
48712: LIST
48713: LIST
48714: PUSH
48715: LD_INT 2
48717: PUSH
48718: LD_INT 1
48720: PUSH
48721: EMPTY
48722: LIST
48723: LIST
48724: PUSH
48725: LD_INT 2
48727: PUSH
48728: LD_INT 2
48730: PUSH
48731: EMPTY
48732: LIST
48733: LIST
48734: PUSH
48735: LD_INT 1
48737: PUSH
48738: LD_INT 2
48740: PUSH
48741: EMPTY
48742: LIST
48743: LIST
48744: PUSH
48745: LD_INT 0
48747: PUSH
48748: LD_INT 2
48750: PUSH
48751: EMPTY
48752: LIST
48753: LIST
48754: PUSH
48755: LD_INT 1
48757: NEG
48758: PUSH
48759: LD_INT 1
48761: PUSH
48762: EMPTY
48763: LIST
48764: LIST
48765: PUSH
48766: LD_INT 2
48768: NEG
48769: PUSH
48770: LD_INT 0
48772: PUSH
48773: EMPTY
48774: LIST
48775: LIST
48776: PUSH
48777: LD_INT 2
48779: NEG
48780: PUSH
48781: LD_INT 1
48783: NEG
48784: PUSH
48785: EMPTY
48786: LIST
48787: LIST
48788: PUSH
48789: LD_INT 2
48791: NEG
48792: PUSH
48793: LD_INT 2
48795: NEG
48796: PUSH
48797: EMPTY
48798: LIST
48799: LIST
48800: PUSH
48801: LD_INT 3
48803: PUSH
48804: LD_INT 1
48806: PUSH
48807: EMPTY
48808: LIST
48809: LIST
48810: PUSH
48811: LD_INT 3
48813: PUSH
48814: LD_INT 2
48816: PUSH
48817: EMPTY
48818: LIST
48819: LIST
48820: PUSH
48821: LD_INT 2
48823: PUSH
48824: LD_INT 3
48826: PUSH
48827: EMPTY
48828: LIST
48829: LIST
48830: PUSH
48831: LD_INT 1
48833: PUSH
48834: LD_INT 3
48836: PUSH
48837: EMPTY
48838: LIST
48839: LIST
48840: PUSH
48841: EMPTY
48842: LIST
48843: LIST
48844: LIST
48845: LIST
48846: LIST
48847: LIST
48848: LIST
48849: LIST
48850: LIST
48851: LIST
48852: LIST
48853: LIST
48854: LIST
48855: LIST
48856: LIST
48857: LIST
48858: LIST
48859: LIST
48860: LIST
48861: LIST
48862: LIST
48863: LIST
48864: LIST
48865: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
48866: LD_ADDR_VAR 0 26
48870: PUSH
48871: LD_INT 0
48873: PUSH
48874: LD_INT 0
48876: PUSH
48877: EMPTY
48878: LIST
48879: LIST
48880: PUSH
48881: LD_INT 0
48883: PUSH
48884: LD_INT 1
48886: NEG
48887: PUSH
48888: EMPTY
48889: LIST
48890: LIST
48891: PUSH
48892: LD_INT 1
48894: PUSH
48895: LD_INT 0
48897: PUSH
48898: EMPTY
48899: LIST
48900: LIST
48901: PUSH
48902: LD_INT 1
48904: PUSH
48905: LD_INT 1
48907: PUSH
48908: EMPTY
48909: LIST
48910: LIST
48911: PUSH
48912: LD_INT 0
48914: PUSH
48915: LD_INT 1
48917: PUSH
48918: EMPTY
48919: LIST
48920: LIST
48921: PUSH
48922: LD_INT 1
48924: NEG
48925: PUSH
48926: LD_INT 0
48928: PUSH
48929: EMPTY
48930: LIST
48931: LIST
48932: PUSH
48933: LD_INT 1
48935: NEG
48936: PUSH
48937: LD_INT 1
48939: NEG
48940: PUSH
48941: EMPTY
48942: LIST
48943: LIST
48944: PUSH
48945: LD_INT 1
48947: NEG
48948: PUSH
48949: LD_INT 2
48951: NEG
48952: PUSH
48953: EMPTY
48954: LIST
48955: LIST
48956: PUSH
48957: LD_INT 0
48959: PUSH
48960: LD_INT 2
48962: NEG
48963: PUSH
48964: EMPTY
48965: LIST
48966: LIST
48967: PUSH
48968: LD_INT 1
48970: PUSH
48971: LD_INT 1
48973: NEG
48974: PUSH
48975: EMPTY
48976: LIST
48977: LIST
48978: PUSH
48979: LD_INT 2
48981: PUSH
48982: LD_INT 0
48984: PUSH
48985: EMPTY
48986: LIST
48987: LIST
48988: PUSH
48989: LD_INT 2
48991: PUSH
48992: LD_INT 1
48994: PUSH
48995: EMPTY
48996: LIST
48997: LIST
48998: PUSH
48999: LD_INT 2
49001: PUSH
49002: LD_INT 2
49004: PUSH
49005: EMPTY
49006: LIST
49007: LIST
49008: PUSH
49009: LD_INT 1
49011: PUSH
49012: LD_INT 2
49014: PUSH
49015: EMPTY
49016: LIST
49017: LIST
49018: PUSH
49019: LD_INT 0
49021: PUSH
49022: LD_INT 2
49024: PUSH
49025: EMPTY
49026: LIST
49027: LIST
49028: PUSH
49029: LD_INT 1
49031: NEG
49032: PUSH
49033: LD_INT 1
49035: PUSH
49036: EMPTY
49037: LIST
49038: LIST
49039: PUSH
49040: LD_INT 2
49042: NEG
49043: PUSH
49044: LD_INT 0
49046: PUSH
49047: EMPTY
49048: LIST
49049: LIST
49050: PUSH
49051: LD_INT 2
49053: NEG
49054: PUSH
49055: LD_INT 1
49057: NEG
49058: PUSH
49059: EMPTY
49060: LIST
49061: LIST
49062: PUSH
49063: LD_INT 2
49065: NEG
49066: PUSH
49067: LD_INT 2
49069: NEG
49070: PUSH
49071: EMPTY
49072: LIST
49073: LIST
49074: PUSH
49075: LD_INT 2
49077: PUSH
49078: LD_INT 3
49080: PUSH
49081: EMPTY
49082: LIST
49083: LIST
49084: PUSH
49085: LD_INT 1
49087: PUSH
49088: LD_INT 3
49090: PUSH
49091: EMPTY
49092: LIST
49093: LIST
49094: PUSH
49095: LD_INT 1
49097: NEG
49098: PUSH
49099: LD_INT 2
49101: PUSH
49102: EMPTY
49103: LIST
49104: LIST
49105: PUSH
49106: LD_INT 2
49108: NEG
49109: PUSH
49110: LD_INT 1
49112: PUSH
49113: EMPTY
49114: LIST
49115: LIST
49116: PUSH
49117: EMPTY
49118: LIST
49119: LIST
49120: LIST
49121: LIST
49122: LIST
49123: LIST
49124: LIST
49125: LIST
49126: LIST
49127: LIST
49128: LIST
49129: LIST
49130: LIST
49131: LIST
49132: LIST
49133: LIST
49134: LIST
49135: LIST
49136: LIST
49137: LIST
49138: LIST
49139: LIST
49140: LIST
49141: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
49142: LD_ADDR_VAR 0 27
49146: PUSH
49147: LD_INT 0
49149: PUSH
49150: LD_INT 0
49152: PUSH
49153: EMPTY
49154: LIST
49155: LIST
49156: PUSH
49157: LD_INT 0
49159: PUSH
49160: LD_INT 1
49162: NEG
49163: PUSH
49164: EMPTY
49165: LIST
49166: LIST
49167: PUSH
49168: LD_INT 1
49170: PUSH
49171: LD_INT 0
49173: PUSH
49174: EMPTY
49175: LIST
49176: LIST
49177: PUSH
49178: LD_INT 1
49180: PUSH
49181: LD_INT 1
49183: PUSH
49184: EMPTY
49185: LIST
49186: LIST
49187: PUSH
49188: LD_INT 0
49190: PUSH
49191: LD_INT 1
49193: PUSH
49194: EMPTY
49195: LIST
49196: LIST
49197: PUSH
49198: LD_INT 1
49200: NEG
49201: PUSH
49202: LD_INT 0
49204: PUSH
49205: EMPTY
49206: LIST
49207: LIST
49208: PUSH
49209: LD_INT 1
49211: NEG
49212: PUSH
49213: LD_INT 1
49215: NEG
49216: PUSH
49217: EMPTY
49218: LIST
49219: LIST
49220: PUSH
49221: LD_INT 1
49223: NEG
49224: PUSH
49225: LD_INT 2
49227: NEG
49228: PUSH
49229: EMPTY
49230: LIST
49231: LIST
49232: PUSH
49233: LD_INT 0
49235: PUSH
49236: LD_INT 2
49238: NEG
49239: PUSH
49240: EMPTY
49241: LIST
49242: LIST
49243: PUSH
49244: LD_INT 1
49246: PUSH
49247: LD_INT 1
49249: NEG
49250: PUSH
49251: EMPTY
49252: LIST
49253: LIST
49254: PUSH
49255: LD_INT 2
49257: PUSH
49258: LD_INT 0
49260: PUSH
49261: EMPTY
49262: LIST
49263: LIST
49264: PUSH
49265: LD_INT 2
49267: PUSH
49268: LD_INT 1
49270: PUSH
49271: EMPTY
49272: LIST
49273: LIST
49274: PUSH
49275: LD_INT 2
49277: PUSH
49278: LD_INT 2
49280: PUSH
49281: EMPTY
49282: LIST
49283: LIST
49284: PUSH
49285: LD_INT 1
49287: PUSH
49288: LD_INT 2
49290: PUSH
49291: EMPTY
49292: LIST
49293: LIST
49294: PUSH
49295: LD_INT 0
49297: PUSH
49298: LD_INT 2
49300: PUSH
49301: EMPTY
49302: LIST
49303: LIST
49304: PUSH
49305: LD_INT 1
49307: NEG
49308: PUSH
49309: LD_INT 1
49311: PUSH
49312: EMPTY
49313: LIST
49314: LIST
49315: PUSH
49316: LD_INT 2
49318: NEG
49319: PUSH
49320: LD_INT 0
49322: PUSH
49323: EMPTY
49324: LIST
49325: LIST
49326: PUSH
49327: LD_INT 2
49329: NEG
49330: PUSH
49331: LD_INT 1
49333: NEG
49334: PUSH
49335: EMPTY
49336: LIST
49337: LIST
49338: PUSH
49339: LD_INT 2
49341: NEG
49342: PUSH
49343: LD_INT 2
49345: NEG
49346: PUSH
49347: EMPTY
49348: LIST
49349: LIST
49350: PUSH
49351: LD_INT 1
49353: NEG
49354: PUSH
49355: LD_INT 2
49357: PUSH
49358: EMPTY
49359: LIST
49360: LIST
49361: PUSH
49362: LD_INT 2
49364: NEG
49365: PUSH
49366: LD_INT 1
49368: PUSH
49369: EMPTY
49370: LIST
49371: LIST
49372: PUSH
49373: LD_INT 3
49375: NEG
49376: PUSH
49377: LD_INT 1
49379: NEG
49380: PUSH
49381: EMPTY
49382: LIST
49383: LIST
49384: PUSH
49385: LD_INT 3
49387: NEG
49388: PUSH
49389: LD_INT 2
49391: NEG
49392: PUSH
49393: EMPTY
49394: LIST
49395: LIST
49396: PUSH
49397: EMPTY
49398: LIST
49399: LIST
49400: LIST
49401: LIST
49402: LIST
49403: LIST
49404: LIST
49405: LIST
49406: LIST
49407: LIST
49408: LIST
49409: LIST
49410: LIST
49411: LIST
49412: LIST
49413: LIST
49414: LIST
49415: LIST
49416: LIST
49417: LIST
49418: LIST
49419: LIST
49420: LIST
49421: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
49422: LD_ADDR_VAR 0 28
49426: PUSH
49427: LD_INT 0
49429: PUSH
49430: LD_INT 0
49432: PUSH
49433: EMPTY
49434: LIST
49435: LIST
49436: PUSH
49437: LD_INT 0
49439: PUSH
49440: LD_INT 1
49442: NEG
49443: PUSH
49444: EMPTY
49445: LIST
49446: LIST
49447: PUSH
49448: LD_INT 1
49450: PUSH
49451: LD_INT 0
49453: PUSH
49454: EMPTY
49455: LIST
49456: LIST
49457: PUSH
49458: LD_INT 1
49460: PUSH
49461: LD_INT 1
49463: PUSH
49464: EMPTY
49465: LIST
49466: LIST
49467: PUSH
49468: LD_INT 0
49470: PUSH
49471: LD_INT 1
49473: PUSH
49474: EMPTY
49475: LIST
49476: LIST
49477: PUSH
49478: LD_INT 1
49480: NEG
49481: PUSH
49482: LD_INT 0
49484: PUSH
49485: EMPTY
49486: LIST
49487: LIST
49488: PUSH
49489: LD_INT 1
49491: NEG
49492: PUSH
49493: LD_INT 1
49495: NEG
49496: PUSH
49497: EMPTY
49498: LIST
49499: LIST
49500: PUSH
49501: LD_INT 1
49503: NEG
49504: PUSH
49505: LD_INT 2
49507: NEG
49508: PUSH
49509: EMPTY
49510: LIST
49511: LIST
49512: PUSH
49513: LD_INT 0
49515: PUSH
49516: LD_INT 2
49518: NEG
49519: PUSH
49520: EMPTY
49521: LIST
49522: LIST
49523: PUSH
49524: LD_INT 1
49526: PUSH
49527: LD_INT 1
49529: NEG
49530: PUSH
49531: EMPTY
49532: LIST
49533: LIST
49534: PUSH
49535: LD_INT 2
49537: PUSH
49538: LD_INT 0
49540: PUSH
49541: EMPTY
49542: LIST
49543: LIST
49544: PUSH
49545: LD_INT 2
49547: PUSH
49548: LD_INT 1
49550: PUSH
49551: EMPTY
49552: LIST
49553: LIST
49554: PUSH
49555: LD_INT 2
49557: PUSH
49558: LD_INT 2
49560: PUSH
49561: EMPTY
49562: LIST
49563: LIST
49564: PUSH
49565: LD_INT 1
49567: PUSH
49568: LD_INT 2
49570: PUSH
49571: EMPTY
49572: LIST
49573: LIST
49574: PUSH
49575: LD_INT 0
49577: PUSH
49578: LD_INT 2
49580: PUSH
49581: EMPTY
49582: LIST
49583: LIST
49584: PUSH
49585: LD_INT 1
49587: NEG
49588: PUSH
49589: LD_INT 1
49591: PUSH
49592: EMPTY
49593: LIST
49594: LIST
49595: PUSH
49596: LD_INT 2
49598: NEG
49599: PUSH
49600: LD_INT 0
49602: PUSH
49603: EMPTY
49604: LIST
49605: LIST
49606: PUSH
49607: LD_INT 2
49609: NEG
49610: PUSH
49611: LD_INT 1
49613: NEG
49614: PUSH
49615: EMPTY
49616: LIST
49617: LIST
49618: PUSH
49619: LD_INT 2
49621: NEG
49622: PUSH
49623: LD_INT 2
49625: NEG
49626: PUSH
49627: EMPTY
49628: LIST
49629: LIST
49630: PUSH
49631: LD_INT 2
49633: NEG
49634: PUSH
49635: LD_INT 3
49637: NEG
49638: PUSH
49639: EMPTY
49640: LIST
49641: LIST
49642: PUSH
49643: LD_INT 1
49645: NEG
49646: PUSH
49647: LD_INT 3
49649: NEG
49650: PUSH
49651: EMPTY
49652: LIST
49653: LIST
49654: PUSH
49655: LD_INT 3
49657: NEG
49658: PUSH
49659: LD_INT 1
49661: NEG
49662: PUSH
49663: EMPTY
49664: LIST
49665: LIST
49666: PUSH
49667: LD_INT 3
49669: NEG
49670: PUSH
49671: LD_INT 2
49673: NEG
49674: PUSH
49675: EMPTY
49676: LIST
49677: LIST
49678: PUSH
49679: EMPTY
49680: LIST
49681: LIST
49682: LIST
49683: LIST
49684: LIST
49685: LIST
49686: LIST
49687: LIST
49688: LIST
49689: LIST
49690: LIST
49691: LIST
49692: LIST
49693: LIST
49694: LIST
49695: LIST
49696: LIST
49697: LIST
49698: LIST
49699: LIST
49700: LIST
49701: LIST
49702: LIST
49703: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49704: LD_ADDR_VAR 0 29
49708: PUSH
49709: LD_INT 0
49711: PUSH
49712: LD_INT 0
49714: PUSH
49715: EMPTY
49716: LIST
49717: LIST
49718: PUSH
49719: LD_INT 0
49721: PUSH
49722: LD_INT 1
49724: NEG
49725: PUSH
49726: EMPTY
49727: LIST
49728: LIST
49729: PUSH
49730: LD_INT 1
49732: PUSH
49733: LD_INT 0
49735: PUSH
49736: EMPTY
49737: LIST
49738: LIST
49739: PUSH
49740: LD_INT 1
49742: PUSH
49743: LD_INT 1
49745: PUSH
49746: EMPTY
49747: LIST
49748: LIST
49749: PUSH
49750: LD_INT 0
49752: PUSH
49753: LD_INT 1
49755: PUSH
49756: EMPTY
49757: LIST
49758: LIST
49759: PUSH
49760: LD_INT 1
49762: NEG
49763: PUSH
49764: LD_INT 0
49766: PUSH
49767: EMPTY
49768: LIST
49769: LIST
49770: PUSH
49771: LD_INT 1
49773: NEG
49774: PUSH
49775: LD_INT 1
49777: NEG
49778: PUSH
49779: EMPTY
49780: LIST
49781: LIST
49782: PUSH
49783: LD_INT 1
49785: NEG
49786: PUSH
49787: LD_INT 2
49789: NEG
49790: PUSH
49791: EMPTY
49792: LIST
49793: LIST
49794: PUSH
49795: LD_INT 0
49797: PUSH
49798: LD_INT 2
49800: NEG
49801: PUSH
49802: EMPTY
49803: LIST
49804: LIST
49805: PUSH
49806: LD_INT 1
49808: PUSH
49809: LD_INT 1
49811: NEG
49812: PUSH
49813: EMPTY
49814: LIST
49815: LIST
49816: PUSH
49817: LD_INT 2
49819: PUSH
49820: LD_INT 0
49822: PUSH
49823: EMPTY
49824: LIST
49825: LIST
49826: PUSH
49827: LD_INT 2
49829: PUSH
49830: LD_INT 1
49832: PUSH
49833: EMPTY
49834: LIST
49835: LIST
49836: PUSH
49837: LD_INT 1
49839: PUSH
49840: LD_INT 2
49842: PUSH
49843: EMPTY
49844: LIST
49845: LIST
49846: PUSH
49847: LD_INT 0
49849: PUSH
49850: LD_INT 2
49852: PUSH
49853: EMPTY
49854: LIST
49855: LIST
49856: PUSH
49857: LD_INT 1
49859: NEG
49860: PUSH
49861: LD_INT 1
49863: PUSH
49864: EMPTY
49865: LIST
49866: LIST
49867: PUSH
49868: LD_INT 2
49870: NEG
49871: PUSH
49872: LD_INT 1
49874: NEG
49875: PUSH
49876: EMPTY
49877: LIST
49878: LIST
49879: PUSH
49880: LD_INT 2
49882: NEG
49883: PUSH
49884: LD_INT 2
49886: NEG
49887: PUSH
49888: EMPTY
49889: LIST
49890: LIST
49891: PUSH
49892: LD_INT 2
49894: NEG
49895: PUSH
49896: LD_INT 3
49898: NEG
49899: PUSH
49900: EMPTY
49901: LIST
49902: LIST
49903: PUSH
49904: LD_INT 2
49906: PUSH
49907: LD_INT 1
49909: NEG
49910: PUSH
49911: EMPTY
49912: LIST
49913: LIST
49914: PUSH
49915: LD_INT 3
49917: PUSH
49918: LD_INT 1
49920: PUSH
49921: EMPTY
49922: LIST
49923: LIST
49924: PUSH
49925: LD_INT 1
49927: PUSH
49928: LD_INT 3
49930: PUSH
49931: EMPTY
49932: LIST
49933: LIST
49934: PUSH
49935: LD_INT 1
49937: NEG
49938: PUSH
49939: LD_INT 2
49941: PUSH
49942: EMPTY
49943: LIST
49944: LIST
49945: PUSH
49946: LD_INT 3
49948: NEG
49949: PUSH
49950: LD_INT 2
49952: NEG
49953: PUSH
49954: EMPTY
49955: LIST
49956: LIST
49957: PUSH
49958: EMPTY
49959: LIST
49960: LIST
49961: LIST
49962: LIST
49963: LIST
49964: LIST
49965: LIST
49966: LIST
49967: LIST
49968: LIST
49969: LIST
49970: LIST
49971: LIST
49972: LIST
49973: LIST
49974: LIST
49975: LIST
49976: LIST
49977: LIST
49978: LIST
49979: LIST
49980: LIST
49981: LIST
49982: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49983: LD_ADDR_VAR 0 30
49987: PUSH
49988: LD_INT 0
49990: PUSH
49991: LD_INT 0
49993: PUSH
49994: EMPTY
49995: LIST
49996: LIST
49997: PUSH
49998: LD_INT 0
50000: PUSH
50001: LD_INT 1
50003: NEG
50004: PUSH
50005: EMPTY
50006: LIST
50007: LIST
50008: PUSH
50009: LD_INT 1
50011: PUSH
50012: LD_INT 0
50014: PUSH
50015: EMPTY
50016: LIST
50017: LIST
50018: PUSH
50019: LD_INT 1
50021: PUSH
50022: LD_INT 1
50024: PUSH
50025: EMPTY
50026: LIST
50027: LIST
50028: PUSH
50029: LD_INT 0
50031: PUSH
50032: LD_INT 1
50034: PUSH
50035: EMPTY
50036: LIST
50037: LIST
50038: PUSH
50039: LD_INT 1
50041: NEG
50042: PUSH
50043: LD_INT 0
50045: PUSH
50046: EMPTY
50047: LIST
50048: LIST
50049: PUSH
50050: LD_INT 1
50052: NEG
50053: PUSH
50054: LD_INT 1
50056: NEG
50057: PUSH
50058: EMPTY
50059: LIST
50060: LIST
50061: PUSH
50062: LD_INT 1
50064: NEG
50065: PUSH
50066: LD_INT 2
50068: NEG
50069: PUSH
50070: EMPTY
50071: LIST
50072: LIST
50073: PUSH
50074: LD_INT 0
50076: PUSH
50077: LD_INT 2
50079: NEG
50080: PUSH
50081: EMPTY
50082: LIST
50083: LIST
50084: PUSH
50085: LD_INT 1
50087: PUSH
50088: LD_INT 1
50090: NEG
50091: PUSH
50092: EMPTY
50093: LIST
50094: LIST
50095: PUSH
50096: LD_INT 2
50098: PUSH
50099: LD_INT 0
50101: PUSH
50102: EMPTY
50103: LIST
50104: LIST
50105: PUSH
50106: LD_INT 2
50108: PUSH
50109: LD_INT 1
50111: PUSH
50112: EMPTY
50113: LIST
50114: LIST
50115: PUSH
50116: LD_INT 2
50118: PUSH
50119: LD_INT 2
50121: PUSH
50122: EMPTY
50123: LIST
50124: LIST
50125: PUSH
50126: LD_INT 1
50128: PUSH
50129: LD_INT 2
50131: PUSH
50132: EMPTY
50133: LIST
50134: LIST
50135: PUSH
50136: LD_INT 1
50138: NEG
50139: PUSH
50140: LD_INT 1
50142: PUSH
50143: EMPTY
50144: LIST
50145: LIST
50146: PUSH
50147: LD_INT 2
50149: NEG
50150: PUSH
50151: LD_INT 0
50153: PUSH
50154: EMPTY
50155: LIST
50156: LIST
50157: PUSH
50158: LD_INT 2
50160: NEG
50161: PUSH
50162: LD_INT 1
50164: NEG
50165: PUSH
50166: EMPTY
50167: LIST
50168: LIST
50169: PUSH
50170: LD_INT 1
50172: NEG
50173: PUSH
50174: LD_INT 3
50176: NEG
50177: PUSH
50178: EMPTY
50179: LIST
50180: LIST
50181: PUSH
50182: LD_INT 1
50184: PUSH
50185: LD_INT 2
50187: NEG
50188: PUSH
50189: EMPTY
50190: LIST
50191: LIST
50192: PUSH
50193: LD_INT 3
50195: PUSH
50196: LD_INT 2
50198: PUSH
50199: EMPTY
50200: LIST
50201: LIST
50202: PUSH
50203: LD_INT 2
50205: PUSH
50206: LD_INT 3
50208: PUSH
50209: EMPTY
50210: LIST
50211: LIST
50212: PUSH
50213: LD_INT 2
50215: NEG
50216: PUSH
50217: LD_INT 1
50219: PUSH
50220: EMPTY
50221: LIST
50222: LIST
50223: PUSH
50224: LD_INT 3
50226: NEG
50227: PUSH
50228: LD_INT 1
50230: NEG
50231: PUSH
50232: EMPTY
50233: LIST
50234: LIST
50235: PUSH
50236: EMPTY
50237: LIST
50238: LIST
50239: LIST
50240: LIST
50241: LIST
50242: LIST
50243: LIST
50244: LIST
50245: LIST
50246: LIST
50247: LIST
50248: LIST
50249: LIST
50250: LIST
50251: LIST
50252: LIST
50253: LIST
50254: LIST
50255: LIST
50256: LIST
50257: LIST
50258: LIST
50259: LIST
50260: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
50261: LD_ADDR_VAR 0 31
50265: PUSH
50266: LD_INT 0
50268: PUSH
50269: LD_INT 0
50271: PUSH
50272: EMPTY
50273: LIST
50274: LIST
50275: PUSH
50276: LD_INT 0
50278: PUSH
50279: LD_INT 1
50281: NEG
50282: PUSH
50283: EMPTY
50284: LIST
50285: LIST
50286: PUSH
50287: LD_INT 1
50289: PUSH
50290: LD_INT 0
50292: PUSH
50293: EMPTY
50294: LIST
50295: LIST
50296: PUSH
50297: LD_INT 1
50299: PUSH
50300: LD_INT 1
50302: PUSH
50303: EMPTY
50304: LIST
50305: LIST
50306: PUSH
50307: LD_INT 0
50309: PUSH
50310: LD_INT 1
50312: PUSH
50313: EMPTY
50314: LIST
50315: LIST
50316: PUSH
50317: LD_INT 1
50319: NEG
50320: PUSH
50321: LD_INT 0
50323: PUSH
50324: EMPTY
50325: LIST
50326: LIST
50327: PUSH
50328: LD_INT 1
50330: NEG
50331: PUSH
50332: LD_INT 1
50334: NEG
50335: PUSH
50336: EMPTY
50337: LIST
50338: LIST
50339: PUSH
50340: LD_INT 1
50342: NEG
50343: PUSH
50344: LD_INT 2
50346: NEG
50347: PUSH
50348: EMPTY
50349: LIST
50350: LIST
50351: PUSH
50352: LD_INT 1
50354: PUSH
50355: LD_INT 1
50357: NEG
50358: PUSH
50359: EMPTY
50360: LIST
50361: LIST
50362: PUSH
50363: LD_INT 2
50365: PUSH
50366: LD_INT 0
50368: PUSH
50369: EMPTY
50370: LIST
50371: LIST
50372: PUSH
50373: LD_INT 2
50375: PUSH
50376: LD_INT 1
50378: PUSH
50379: EMPTY
50380: LIST
50381: LIST
50382: PUSH
50383: LD_INT 2
50385: PUSH
50386: LD_INT 2
50388: PUSH
50389: EMPTY
50390: LIST
50391: LIST
50392: PUSH
50393: LD_INT 1
50395: PUSH
50396: LD_INT 2
50398: PUSH
50399: EMPTY
50400: LIST
50401: LIST
50402: PUSH
50403: LD_INT 0
50405: PUSH
50406: LD_INT 2
50408: PUSH
50409: EMPTY
50410: LIST
50411: LIST
50412: PUSH
50413: LD_INT 1
50415: NEG
50416: PUSH
50417: LD_INT 1
50419: PUSH
50420: EMPTY
50421: LIST
50422: LIST
50423: PUSH
50424: LD_INT 2
50426: NEG
50427: PUSH
50428: LD_INT 1
50430: NEG
50431: PUSH
50432: EMPTY
50433: LIST
50434: LIST
50435: PUSH
50436: LD_INT 2
50438: NEG
50439: PUSH
50440: LD_INT 2
50442: NEG
50443: PUSH
50444: EMPTY
50445: LIST
50446: LIST
50447: PUSH
50448: LD_INT 2
50450: NEG
50451: PUSH
50452: LD_INT 3
50454: NEG
50455: PUSH
50456: EMPTY
50457: LIST
50458: LIST
50459: PUSH
50460: LD_INT 2
50462: PUSH
50463: LD_INT 1
50465: NEG
50466: PUSH
50467: EMPTY
50468: LIST
50469: LIST
50470: PUSH
50471: LD_INT 3
50473: PUSH
50474: LD_INT 1
50476: PUSH
50477: EMPTY
50478: LIST
50479: LIST
50480: PUSH
50481: LD_INT 1
50483: PUSH
50484: LD_INT 3
50486: PUSH
50487: EMPTY
50488: LIST
50489: LIST
50490: PUSH
50491: LD_INT 1
50493: NEG
50494: PUSH
50495: LD_INT 2
50497: PUSH
50498: EMPTY
50499: LIST
50500: LIST
50501: PUSH
50502: LD_INT 3
50504: NEG
50505: PUSH
50506: LD_INT 2
50508: NEG
50509: PUSH
50510: EMPTY
50511: LIST
50512: LIST
50513: PUSH
50514: EMPTY
50515: LIST
50516: LIST
50517: LIST
50518: LIST
50519: LIST
50520: LIST
50521: LIST
50522: LIST
50523: LIST
50524: LIST
50525: LIST
50526: LIST
50527: LIST
50528: LIST
50529: LIST
50530: LIST
50531: LIST
50532: LIST
50533: LIST
50534: LIST
50535: LIST
50536: LIST
50537: LIST
50538: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50539: LD_ADDR_VAR 0 32
50543: PUSH
50544: LD_INT 0
50546: PUSH
50547: LD_INT 0
50549: PUSH
50550: EMPTY
50551: LIST
50552: LIST
50553: PUSH
50554: LD_INT 0
50556: PUSH
50557: LD_INT 1
50559: NEG
50560: PUSH
50561: EMPTY
50562: LIST
50563: LIST
50564: PUSH
50565: LD_INT 1
50567: PUSH
50568: LD_INT 0
50570: PUSH
50571: EMPTY
50572: LIST
50573: LIST
50574: PUSH
50575: LD_INT 1
50577: PUSH
50578: LD_INT 1
50580: PUSH
50581: EMPTY
50582: LIST
50583: LIST
50584: PUSH
50585: LD_INT 0
50587: PUSH
50588: LD_INT 1
50590: PUSH
50591: EMPTY
50592: LIST
50593: LIST
50594: PUSH
50595: LD_INT 1
50597: NEG
50598: PUSH
50599: LD_INT 0
50601: PUSH
50602: EMPTY
50603: LIST
50604: LIST
50605: PUSH
50606: LD_INT 1
50608: NEG
50609: PUSH
50610: LD_INT 1
50612: NEG
50613: PUSH
50614: EMPTY
50615: LIST
50616: LIST
50617: PUSH
50618: LD_INT 1
50620: NEG
50621: PUSH
50622: LD_INT 2
50624: NEG
50625: PUSH
50626: EMPTY
50627: LIST
50628: LIST
50629: PUSH
50630: LD_INT 0
50632: PUSH
50633: LD_INT 2
50635: NEG
50636: PUSH
50637: EMPTY
50638: LIST
50639: LIST
50640: PUSH
50641: LD_INT 1
50643: PUSH
50644: LD_INT 1
50646: NEG
50647: PUSH
50648: EMPTY
50649: LIST
50650: LIST
50651: PUSH
50652: LD_INT 2
50654: PUSH
50655: LD_INT 1
50657: PUSH
50658: EMPTY
50659: LIST
50660: LIST
50661: PUSH
50662: LD_INT 2
50664: PUSH
50665: LD_INT 2
50667: PUSH
50668: EMPTY
50669: LIST
50670: LIST
50671: PUSH
50672: LD_INT 1
50674: PUSH
50675: LD_INT 2
50677: PUSH
50678: EMPTY
50679: LIST
50680: LIST
50681: PUSH
50682: LD_INT 0
50684: PUSH
50685: LD_INT 2
50687: PUSH
50688: EMPTY
50689: LIST
50690: LIST
50691: PUSH
50692: LD_INT 1
50694: NEG
50695: PUSH
50696: LD_INT 1
50698: PUSH
50699: EMPTY
50700: LIST
50701: LIST
50702: PUSH
50703: LD_INT 2
50705: NEG
50706: PUSH
50707: LD_INT 0
50709: PUSH
50710: EMPTY
50711: LIST
50712: LIST
50713: PUSH
50714: LD_INT 2
50716: NEG
50717: PUSH
50718: LD_INT 1
50720: NEG
50721: PUSH
50722: EMPTY
50723: LIST
50724: LIST
50725: PUSH
50726: LD_INT 1
50728: NEG
50729: PUSH
50730: LD_INT 3
50732: NEG
50733: PUSH
50734: EMPTY
50735: LIST
50736: LIST
50737: PUSH
50738: LD_INT 1
50740: PUSH
50741: LD_INT 2
50743: NEG
50744: PUSH
50745: EMPTY
50746: LIST
50747: LIST
50748: PUSH
50749: LD_INT 3
50751: PUSH
50752: LD_INT 2
50754: PUSH
50755: EMPTY
50756: LIST
50757: LIST
50758: PUSH
50759: LD_INT 2
50761: PUSH
50762: LD_INT 3
50764: PUSH
50765: EMPTY
50766: LIST
50767: LIST
50768: PUSH
50769: LD_INT 2
50771: NEG
50772: PUSH
50773: LD_INT 1
50775: PUSH
50776: EMPTY
50777: LIST
50778: LIST
50779: PUSH
50780: LD_INT 3
50782: NEG
50783: PUSH
50784: LD_INT 1
50786: NEG
50787: PUSH
50788: EMPTY
50789: LIST
50790: LIST
50791: PUSH
50792: EMPTY
50793: LIST
50794: LIST
50795: LIST
50796: LIST
50797: LIST
50798: LIST
50799: LIST
50800: LIST
50801: LIST
50802: LIST
50803: LIST
50804: LIST
50805: LIST
50806: LIST
50807: LIST
50808: LIST
50809: LIST
50810: LIST
50811: LIST
50812: LIST
50813: LIST
50814: LIST
50815: LIST
50816: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
50817: LD_ADDR_VAR 0 33
50821: PUSH
50822: LD_INT 0
50824: PUSH
50825: LD_INT 0
50827: PUSH
50828: EMPTY
50829: LIST
50830: LIST
50831: PUSH
50832: LD_INT 0
50834: PUSH
50835: LD_INT 1
50837: NEG
50838: PUSH
50839: EMPTY
50840: LIST
50841: LIST
50842: PUSH
50843: LD_INT 1
50845: PUSH
50846: LD_INT 0
50848: PUSH
50849: EMPTY
50850: LIST
50851: LIST
50852: PUSH
50853: LD_INT 1
50855: PUSH
50856: LD_INT 1
50858: PUSH
50859: EMPTY
50860: LIST
50861: LIST
50862: PUSH
50863: LD_INT 0
50865: PUSH
50866: LD_INT 1
50868: PUSH
50869: EMPTY
50870: LIST
50871: LIST
50872: PUSH
50873: LD_INT 1
50875: NEG
50876: PUSH
50877: LD_INT 0
50879: PUSH
50880: EMPTY
50881: LIST
50882: LIST
50883: PUSH
50884: LD_INT 1
50886: NEG
50887: PUSH
50888: LD_INT 1
50890: NEG
50891: PUSH
50892: EMPTY
50893: LIST
50894: LIST
50895: PUSH
50896: LD_INT 1
50898: NEG
50899: PUSH
50900: LD_INT 2
50902: NEG
50903: PUSH
50904: EMPTY
50905: LIST
50906: LIST
50907: PUSH
50908: LD_INT 1
50910: PUSH
50911: LD_INT 1
50913: NEG
50914: PUSH
50915: EMPTY
50916: LIST
50917: LIST
50918: PUSH
50919: LD_INT 2
50921: PUSH
50922: LD_INT 0
50924: PUSH
50925: EMPTY
50926: LIST
50927: LIST
50928: PUSH
50929: LD_INT 2
50931: PUSH
50932: LD_INT 1
50934: PUSH
50935: EMPTY
50936: LIST
50937: LIST
50938: PUSH
50939: LD_INT 1
50941: PUSH
50942: LD_INT 2
50944: PUSH
50945: EMPTY
50946: LIST
50947: LIST
50948: PUSH
50949: LD_INT 0
50951: PUSH
50952: LD_INT 2
50954: PUSH
50955: EMPTY
50956: LIST
50957: LIST
50958: PUSH
50959: LD_INT 1
50961: NEG
50962: PUSH
50963: LD_INT 1
50965: PUSH
50966: EMPTY
50967: LIST
50968: LIST
50969: PUSH
50970: LD_INT 2
50972: NEG
50973: PUSH
50974: LD_INT 0
50976: PUSH
50977: EMPTY
50978: LIST
50979: LIST
50980: PUSH
50981: LD_INT 2
50983: NEG
50984: PUSH
50985: LD_INT 1
50987: NEG
50988: PUSH
50989: EMPTY
50990: LIST
50991: LIST
50992: PUSH
50993: LD_INT 2
50995: NEG
50996: PUSH
50997: LD_INT 2
50999: NEG
51000: PUSH
51001: EMPTY
51002: LIST
51003: LIST
51004: PUSH
51005: LD_INT 2
51007: NEG
51008: PUSH
51009: LD_INT 3
51011: NEG
51012: PUSH
51013: EMPTY
51014: LIST
51015: LIST
51016: PUSH
51017: LD_INT 2
51019: PUSH
51020: LD_INT 1
51022: NEG
51023: PUSH
51024: EMPTY
51025: LIST
51026: LIST
51027: PUSH
51028: LD_INT 3
51030: PUSH
51031: LD_INT 1
51033: PUSH
51034: EMPTY
51035: LIST
51036: LIST
51037: PUSH
51038: LD_INT 1
51040: PUSH
51041: LD_INT 3
51043: PUSH
51044: EMPTY
51045: LIST
51046: LIST
51047: PUSH
51048: LD_INT 1
51050: NEG
51051: PUSH
51052: LD_INT 2
51054: PUSH
51055: EMPTY
51056: LIST
51057: LIST
51058: PUSH
51059: LD_INT 3
51061: NEG
51062: PUSH
51063: LD_INT 2
51065: NEG
51066: PUSH
51067: EMPTY
51068: LIST
51069: LIST
51070: PUSH
51071: EMPTY
51072: LIST
51073: LIST
51074: LIST
51075: LIST
51076: LIST
51077: LIST
51078: LIST
51079: LIST
51080: LIST
51081: LIST
51082: LIST
51083: LIST
51084: LIST
51085: LIST
51086: LIST
51087: LIST
51088: LIST
51089: LIST
51090: LIST
51091: LIST
51092: LIST
51093: LIST
51094: LIST
51095: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
51096: LD_ADDR_VAR 0 34
51100: PUSH
51101: LD_INT 0
51103: PUSH
51104: LD_INT 0
51106: PUSH
51107: EMPTY
51108: LIST
51109: LIST
51110: PUSH
51111: LD_INT 0
51113: PUSH
51114: LD_INT 1
51116: NEG
51117: PUSH
51118: EMPTY
51119: LIST
51120: LIST
51121: PUSH
51122: LD_INT 1
51124: PUSH
51125: LD_INT 0
51127: PUSH
51128: EMPTY
51129: LIST
51130: LIST
51131: PUSH
51132: LD_INT 1
51134: PUSH
51135: LD_INT 1
51137: PUSH
51138: EMPTY
51139: LIST
51140: LIST
51141: PUSH
51142: LD_INT 0
51144: PUSH
51145: LD_INT 1
51147: PUSH
51148: EMPTY
51149: LIST
51150: LIST
51151: PUSH
51152: LD_INT 1
51154: NEG
51155: PUSH
51156: LD_INT 0
51158: PUSH
51159: EMPTY
51160: LIST
51161: LIST
51162: PUSH
51163: LD_INT 1
51165: NEG
51166: PUSH
51167: LD_INT 1
51169: NEG
51170: PUSH
51171: EMPTY
51172: LIST
51173: LIST
51174: PUSH
51175: LD_INT 1
51177: NEG
51178: PUSH
51179: LD_INT 2
51181: NEG
51182: PUSH
51183: EMPTY
51184: LIST
51185: LIST
51186: PUSH
51187: LD_INT 0
51189: PUSH
51190: LD_INT 2
51192: NEG
51193: PUSH
51194: EMPTY
51195: LIST
51196: LIST
51197: PUSH
51198: LD_INT 1
51200: PUSH
51201: LD_INT 1
51203: NEG
51204: PUSH
51205: EMPTY
51206: LIST
51207: LIST
51208: PUSH
51209: LD_INT 2
51211: PUSH
51212: LD_INT 1
51214: PUSH
51215: EMPTY
51216: LIST
51217: LIST
51218: PUSH
51219: LD_INT 2
51221: PUSH
51222: LD_INT 2
51224: PUSH
51225: EMPTY
51226: LIST
51227: LIST
51228: PUSH
51229: LD_INT 1
51231: PUSH
51232: LD_INT 2
51234: PUSH
51235: EMPTY
51236: LIST
51237: LIST
51238: PUSH
51239: LD_INT 1
51241: NEG
51242: PUSH
51243: LD_INT 1
51245: PUSH
51246: EMPTY
51247: LIST
51248: LIST
51249: PUSH
51250: LD_INT 2
51252: NEG
51253: PUSH
51254: LD_INT 0
51256: PUSH
51257: EMPTY
51258: LIST
51259: LIST
51260: PUSH
51261: LD_INT 2
51263: NEG
51264: PUSH
51265: LD_INT 1
51267: NEG
51268: PUSH
51269: EMPTY
51270: LIST
51271: LIST
51272: PUSH
51273: LD_INT 2
51275: NEG
51276: PUSH
51277: LD_INT 2
51279: NEG
51280: PUSH
51281: EMPTY
51282: LIST
51283: LIST
51284: PUSH
51285: LD_INT 1
51287: NEG
51288: PUSH
51289: LD_INT 3
51291: NEG
51292: PUSH
51293: EMPTY
51294: LIST
51295: LIST
51296: PUSH
51297: LD_INT 1
51299: PUSH
51300: LD_INT 2
51302: NEG
51303: PUSH
51304: EMPTY
51305: LIST
51306: LIST
51307: PUSH
51308: LD_INT 3
51310: PUSH
51311: LD_INT 2
51313: PUSH
51314: EMPTY
51315: LIST
51316: LIST
51317: PUSH
51318: LD_INT 2
51320: PUSH
51321: LD_INT 3
51323: PUSH
51324: EMPTY
51325: LIST
51326: LIST
51327: PUSH
51328: LD_INT 2
51330: NEG
51331: PUSH
51332: LD_INT 1
51334: PUSH
51335: EMPTY
51336: LIST
51337: LIST
51338: PUSH
51339: LD_INT 3
51341: NEG
51342: PUSH
51343: LD_INT 1
51345: NEG
51346: PUSH
51347: EMPTY
51348: LIST
51349: LIST
51350: PUSH
51351: EMPTY
51352: LIST
51353: LIST
51354: LIST
51355: LIST
51356: LIST
51357: LIST
51358: LIST
51359: LIST
51360: LIST
51361: LIST
51362: LIST
51363: LIST
51364: LIST
51365: LIST
51366: LIST
51367: LIST
51368: LIST
51369: LIST
51370: LIST
51371: LIST
51372: LIST
51373: LIST
51374: LIST
51375: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
51376: LD_ADDR_VAR 0 35
51380: PUSH
51381: LD_INT 0
51383: PUSH
51384: LD_INT 0
51386: PUSH
51387: EMPTY
51388: LIST
51389: LIST
51390: PUSH
51391: LD_INT 0
51393: PUSH
51394: LD_INT 1
51396: NEG
51397: PUSH
51398: EMPTY
51399: LIST
51400: LIST
51401: PUSH
51402: LD_INT 1
51404: PUSH
51405: LD_INT 0
51407: PUSH
51408: EMPTY
51409: LIST
51410: LIST
51411: PUSH
51412: LD_INT 1
51414: PUSH
51415: LD_INT 1
51417: PUSH
51418: EMPTY
51419: LIST
51420: LIST
51421: PUSH
51422: LD_INT 0
51424: PUSH
51425: LD_INT 1
51427: PUSH
51428: EMPTY
51429: LIST
51430: LIST
51431: PUSH
51432: LD_INT 1
51434: NEG
51435: PUSH
51436: LD_INT 0
51438: PUSH
51439: EMPTY
51440: LIST
51441: LIST
51442: PUSH
51443: LD_INT 1
51445: NEG
51446: PUSH
51447: LD_INT 1
51449: NEG
51450: PUSH
51451: EMPTY
51452: LIST
51453: LIST
51454: PUSH
51455: LD_INT 2
51457: PUSH
51458: LD_INT 1
51460: PUSH
51461: EMPTY
51462: LIST
51463: LIST
51464: PUSH
51465: LD_INT 2
51467: NEG
51468: PUSH
51469: LD_INT 1
51471: NEG
51472: PUSH
51473: EMPTY
51474: LIST
51475: LIST
51476: PUSH
51477: EMPTY
51478: LIST
51479: LIST
51480: LIST
51481: LIST
51482: LIST
51483: LIST
51484: LIST
51485: LIST
51486: LIST
51487: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
51488: LD_ADDR_VAR 0 36
51492: PUSH
51493: LD_INT 0
51495: PUSH
51496: LD_INT 0
51498: PUSH
51499: EMPTY
51500: LIST
51501: LIST
51502: PUSH
51503: LD_INT 0
51505: PUSH
51506: LD_INT 1
51508: NEG
51509: PUSH
51510: EMPTY
51511: LIST
51512: LIST
51513: PUSH
51514: LD_INT 1
51516: PUSH
51517: LD_INT 0
51519: PUSH
51520: EMPTY
51521: LIST
51522: LIST
51523: PUSH
51524: LD_INT 1
51526: PUSH
51527: LD_INT 1
51529: PUSH
51530: EMPTY
51531: LIST
51532: LIST
51533: PUSH
51534: LD_INT 0
51536: PUSH
51537: LD_INT 1
51539: PUSH
51540: EMPTY
51541: LIST
51542: LIST
51543: PUSH
51544: LD_INT 1
51546: NEG
51547: PUSH
51548: LD_INT 0
51550: PUSH
51551: EMPTY
51552: LIST
51553: LIST
51554: PUSH
51555: LD_INT 1
51557: NEG
51558: PUSH
51559: LD_INT 1
51561: NEG
51562: PUSH
51563: EMPTY
51564: LIST
51565: LIST
51566: PUSH
51567: LD_INT 1
51569: NEG
51570: PUSH
51571: LD_INT 2
51573: NEG
51574: PUSH
51575: EMPTY
51576: LIST
51577: LIST
51578: PUSH
51579: LD_INT 1
51581: PUSH
51582: LD_INT 2
51584: PUSH
51585: EMPTY
51586: LIST
51587: LIST
51588: PUSH
51589: EMPTY
51590: LIST
51591: LIST
51592: LIST
51593: LIST
51594: LIST
51595: LIST
51596: LIST
51597: LIST
51598: LIST
51599: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
51600: LD_ADDR_VAR 0 37
51604: PUSH
51605: LD_INT 0
51607: PUSH
51608: LD_INT 0
51610: PUSH
51611: EMPTY
51612: LIST
51613: LIST
51614: PUSH
51615: LD_INT 0
51617: PUSH
51618: LD_INT 1
51620: NEG
51621: PUSH
51622: EMPTY
51623: LIST
51624: LIST
51625: PUSH
51626: LD_INT 1
51628: PUSH
51629: LD_INT 0
51631: PUSH
51632: EMPTY
51633: LIST
51634: LIST
51635: PUSH
51636: LD_INT 1
51638: PUSH
51639: LD_INT 1
51641: PUSH
51642: EMPTY
51643: LIST
51644: LIST
51645: PUSH
51646: LD_INT 0
51648: PUSH
51649: LD_INT 1
51651: PUSH
51652: EMPTY
51653: LIST
51654: LIST
51655: PUSH
51656: LD_INT 1
51658: NEG
51659: PUSH
51660: LD_INT 0
51662: PUSH
51663: EMPTY
51664: LIST
51665: LIST
51666: PUSH
51667: LD_INT 1
51669: NEG
51670: PUSH
51671: LD_INT 1
51673: NEG
51674: PUSH
51675: EMPTY
51676: LIST
51677: LIST
51678: PUSH
51679: LD_INT 1
51681: PUSH
51682: LD_INT 1
51684: NEG
51685: PUSH
51686: EMPTY
51687: LIST
51688: LIST
51689: PUSH
51690: LD_INT 1
51692: NEG
51693: PUSH
51694: LD_INT 1
51696: PUSH
51697: EMPTY
51698: LIST
51699: LIST
51700: PUSH
51701: EMPTY
51702: LIST
51703: LIST
51704: LIST
51705: LIST
51706: LIST
51707: LIST
51708: LIST
51709: LIST
51710: LIST
51711: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
51712: LD_ADDR_VAR 0 38
51716: PUSH
51717: LD_INT 0
51719: PUSH
51720: LD_INT 0
51722: PUSH
51723: EMPTY
51724: LIST
51725: LIST
51726: PUSH
51727: LD_INT 0
51729: PUSH
51730: LD_INT 1
51732: NEG
51733: PUSH
51734: EMPTY
51735: LIST
51736: LIST
51737: PUSH
51738: LD_INT 1
51740: PUSH
51741: LD_INT 0
51743: PUSH
51744: EMPTY
51745: LIST
51746: LIST
51747: PUSH
51748: LD_INT 1
51750: PUSH
51751: LD_INT 1
51753: PUSH
51754: EMPTY
51755: LIST
51756: LIST
51757: PUSH
51758: LD_INT 0
51760: PUSH
51761: LD_INT 1
51763: PUSH
51764: EMPTY
51765: LIST
51766: LIST
51767: PUSH
51768: LD_INT 1
51770: NEG
51771: PUSH
51772: LD_INT 0
51774: PUSH
51775: EMPTY
51776: LIST
51777: LIST
51778: PUSH
51779: LD_INT 1
51781: NEG
51782: PUSH
51783: LD_INT 1
51785: NEG
51786: PUSH
51787: EMPTY
51788: LIST
51789: LIST
51790: PUSH
51791: LD_INT 2
51793: PUSH
51794: LD_INT 1
51796: PUSH
51797: EMPTY
51798: LIST
51799: LIST
51800: PUSH
51801: LD_INT 2
51803: NEG
51804: PUSH
51805: LD_INT 1
51807: NEG
51808: PUSH
51809: EMPTY
51810: LIST
51811: LIST
51812: PUSH
51813: EMPTY
51814: LIST
51815: LIST
51816: LIST
51817: LIST
51818: LIST
51819: LIST
51820: LIST
51821: LIST
51822: LIST
51823: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
51824: LD_ADDR_VAR 0 39
51828: PUSH
51829: LD_INT 0
51831: PUSH
51832: LD_INT 0
51834: PUSH
51835: EMPTY
51836: LIST
51837: LIST
51838: PUSH
51839: LD_INT 0
51841: PUSH
51842: LD_INT 1
51844: NEG
51845: PUSH
51846: EMPTY
51847: LIST
51848: LIST
51849: PUSH
51850: LD_INT 1
51852: PUSH
51853: LD_INT 0
51855: PUSH
51856: EMPTY
51857: LIST
51858: LIST
51859: PUSH
51860: LD_INT 1
51862: PUSH
51863: LD_INT 1
51865: PUSH
51866: EMPTY
51867: LIST
51868: LIST
51869: PUSH
51870: LD_INT 0
51872: PUSH
51873: LD_INT 1
51875: PUSH
51876: EMPTY
51877: LIST
51878: LIST
51879: PUSH
51880: LD_INT 1
51882: NEG
51883: PUSH
51884: LD_INT 0
51886: PUSH
51887: EMPTY
51888: LIST
51889: LIST
51890: PUSH
51891: LD_INT 1
51893: NEG
51894: PUSH
51895: LD_INT 1
51897: NEG
51898: PUSH
51899: EMPTY
51900: LIST
51901: LIST
51902: PUSH
51903: LD_INT 1
51905: NEG
51906: PUSH
51907: LD_INT 2
51909: NEG
51910: PUSH
51911: EMPTY
51912: LIST
51913: LIST
51914: PUSH
51915: LD_INT 1
51917: PUSH
51918: LD_INT 2
51920: PUSH
51921: EMPTY
51922: LIST
51923: LIST
51924: PUSH
51925: EMPTY
51926: LIST
51927: LIST
51928: LIST
51929: LIST
51930: LIST
51931: LIST
51932: LIST
51933: LIST
51934: LIST
51935: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
51936: LD_ADDR_VAR 0 40
51940: PUSH
51941: LD_INT 0
51943: PUSH
51944: LD_INT 0
51946: PUSH
51947: EMPTY
51948: LIST
51949: LIST
51950: PUSH
51951: LD_INT 0
51953: PUSH
51954: LD_INT 1
51956: NEG
51957: PUSH
51958: EMPTY
51959: LIST
51960: LIST
51961: PUSH
51962: LD_INT 1
51964: PUSH
51965: LD_INT 0
51967: PUSH
51968: EMPTY
51969: LIST
51970: LIST
51971: PUSH
51972: LD_INT 1
51974: PUSH
51975: LD_INT 1
51977: PUSH
51978: EMPTY
51979: LIST
51980: LIST
51981: PUSH
51982: LD_INT 0
51984: PUSH
51985: LD_INT 1
51987: PUSH
51988: EMPTY
51989: LIST
51990: LIST
51991: PUSH
51992: LD_INT 1
51994: NEG
51995: PUSH
51996: LD_INT 0
51998: PUSH
51999: EMPTY
52000: LIST
52001: LIST
52002: PUSH
52003: LD_INT 1
52005: NEG
52006: PUSH
52007: LD_INT 1
52009: NEG
52010: PUSH
52011: EMPTY
52012: LIST
52013: LIST
52014: PUSH
52015: LD_INT 1
52017: PUSH
52018: LD_INT 1
52020: NEG
52021: PUSH
52022: EMPTY
52023: LIST
52024: LIST
52025: PUSH
52026: LD_INT 1
52028: NEG
52029: PUSH
52030: LD_INT 1
52032: PUSH
52033: EMPTY
52034: LIST
52035: LIST
52036: PUSH
52037: EMPTY
52038: LIST
52039: LIST
52040: LIST
52041: LIST
52042: LIST
52043: LIST
52044: LIST
52045: LIST
52046: LIST
52047: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52048: LD_ADDR_VAR 0 41
52052: PUSH
52053: LD_INT 0
52055: PUSH
52056: LD_INT 0
52058: PUSH
52059: EMPTY
52060: LIST
52061: LIST
52062: PUSH
52063: LD_INT 0
52065: PUSH
52066: LD_INT 1
52068: NEG
52069: PUSH
52070: EMPTY
52071: LIST
52072: LIST
52073: PUSH
52074: LD_INT 1
52076: PUSH
52077: LD_INT 0
52079: PUSH
52080: EMPTY
52081: LIST
52082: LIST
52083: PUSH
52084: LD_INT 1
52086: PUSH
52087: LD_INT 1
52089: PUSH
52090: EMPTY
52091: LIST
52092: LIST
52093: PUSH
52094: LD_INT 0
52096: PUSH
52097: LD_INT 1
52099: PUSH
52100: EMPTY
52101: LIST
52102: LIST
52103: PUSH
52104: LD_INT 1
52106: NEG
52107: PUSH
52108: LD_INT 0
52110: PUSH
52111: EMPTY
52112: LIST
52113: LIST
52114: PUSH
52115: LD_INT 1
52117: NEG
52118: PUSH
52119: LD_INT 1
52121: NEG
52122: PUSH
52123: EMPTY
52124: LIST
52125: LIST
52126: PUSH
52127: LD_INT 1
52129: NEG
52130: PUSH
52131: LD_INT 2
52133: NEG
52134: PUSH
52135: EMPTY
52136: LIST
52137: LIST
52138: PUSH
52139: LD_INT 1
52141: PUSH
52142: LD_INT 1
52144: NEG
52145: PUSH
52146: EMPTY
52147: LIST
52148: LIST
52149: PUSH
52150: LD_INT 2
52152: PUSH
52153: LD_INT 0
52155: PUSH
52156: EMPTY
52157: LIST
52158: LIST
52159: PUSH
52160: LD_INT 2
52162: PUSH
52163: LD_INT 1
52165: PUSH
52166: EMPTY
52167: LIST
52168: LIST
52169: PUSH
52170: LD_INT 2
52172: PUSH
52173: LD_INT 2
52175: PUSH
52176: EMPTY
52177: LIST
52178: LIST
52179: PUSH
52180: LD_INT 1
52182: PUSH
52183: LD_INT 2
52185: PUSH
52186: EMPTY
52187: LIST
52188: LIST
52189: PUSH
52190: LD_INT 1
52192: NEG
52193: PUSH
52194: LD_INT 1
52196: PUSH
52197: EMPTY
52198: LIST
52199: LIST
52200: PUSH
52201: LD_INT 2
52203: NEG
52204: PUSH
52205: LD_INT 0
52207: PUSH
52208: EMPTY
52209: LIST
52210: LIST
52211: PUSH
52212: LD_INT 2
52214: NEG
52215: PUSH
52216: LD_INT 1
52218: NEG
52219: PUSH
52220: EMPTY
52221: LIST
52222: LIST
52223: PUSH
52224: LD_INT 2
52226: NEG
52227: PUSH
52228: LD_INT 2
52230: NEG
52231: PUSH
52232: EMPTY
52233: LIST
52234: LIST
52235: PUSH
52236: LD_INT 2
52238: NEG
52239: PUSH
52240: LD_INT 3
52242: NEG
52243: PUSH
52244: EMPTY
52245: LIST
52246: LIST
52247: PUSH
52248: LD_INT 2
52250: PUSH
52251: LD_INT 1
52253: NEG
52254: PUSH
52255: EMPTY
52256: LIST
52257: LIST
52258: PUSH
52259: LD_INT 3
52261: PUSH
52262: LD_INT 0
52264: PUSH
52265: EMPTY
52266: LIST
52267: LIST
52268: PUSH
52269: LD_INT 3
52271: PUSH
52272: LD_INT 1
52274: PUSH
52275: EMPTY
52276: LIST
52277: LIST
52278: PUSH
52279: LD_INT 3
52281: PUSH
52282: LD_INT 2
52284: PUSH
52285: EMPTY
52286: LIST
52287: LIST
52288: PUSH
52289: LD_INT 3
52291: PUSH
52292: LD_INT 3
52294: PUSH
52295: EMPTY
52296: LIST
52297: LIST
52298: PUSH
52299: LD_INT 2
52301: PUSH
52302: LD_INT 3
52304: PUSH
52305: EMPTY
52306: LIST
52307: LIST
52308: PUSH
52309: LD_INT 2
52311: NEG
52312: PUSH
52313: LD_INT 1
52315: PUSH
52316: EMPTY
52317: LIST
52318: LIST
52319: PUSH
52320: LD_INT 3
52322: NEG
52323: PUSH
52324: LD_INT 0
52326: PUSH
52327: EMPTY
52328: LIST
52329: LIST
52330: PUSH
52331: LD_INT 3
52333: NEG
52334: PUSH
52335: LD_INT 1
52337: NEG
52338: PUSH
52339: EMPTY
52340: LIST
52341: LIST
52342: PUSH
52343: LD_INT 3
52345: NEG
52346: PUSH
52347: LD_INT 2
52349: NEG
52350: PUSH
52351: EMPTY
52352: LIST
52353: LIST
52354: PUSH
52355: LD_INT 3
52357: NEG
52358: PUSH
52359: LD_INT 3
52361: NEG
52362: PUSH
52363: EMPTY
52364: LIST
52365: LIST
52366: PUSH
52367: EMPTY
52368: LIST
52369: LIST
52370: LIST
52371: LIST
52372: LIST
52373: LIST
52374: LIST
52375: LIST
52376: LIST
52377: LIST
52378: LIST
52379: LIST
52380: LIST
52381: LIST
52382: LIST
52383: LIST
52384: LIST
52385: LIST
52386: LIST
52387: LIST
52388: LIST
52389: LIST
52390: LIST
52391: LIST
52392: LIST
52393: LIST
52394: LIST
52395: LIST
52396: LIST
52397: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52398: LD_ADDR_VAR 0 42
52402: PUSH
52403: LD_INT 0
52405: PUSH
52406: LD_INT 0
52408: PUSH
52409: EMPTY
52410: LIST
52411: LIST
52412: PUSH
52413: LD_INT 0
52415: PUSH
52416: LD_INT 1
52418: NEG
52419: PUSH
52420: EMPTY
52421: LIST
52422: LIST
52423: PUSH
52424: LD_INT 1
52426: PUSH
52427: LD_INT 0
52429: PUSH
52430: EMPTY
52431: LIST
52432: LIST
52433: PUSH
52434: LD_INT 1
52436: PUSH
52437: LD_INT 1
52439: PUSH
52440: EMPTY
52441: LIST
52442: LIST
52443: PUSH
52444: LD_INT 0
52446: PUSH
52447: LD_INT 1
52449: PUSH
52450: EMPTY
52451: LIST
52452: LIST
52453: PUSH
52454: LD_INT 1
52456: NEG
52457: PUSH
52458: LD_INT 0
52460: PUSH
52461: EMPTY
52462: LIST
52463: LIST
52464: PUSH
52465: LD_INT 1
52467: NEG
52468: PUSH
52469: LD_INT 1
52471: NEG
52472: PUSH
52473: EMPTY
52474: LIST
52475: LIST
52476: PUSH
52477: LD_INT 1
52479: NEG
52480: PUSH
52481: LD_INT 2
52483: NEG
52484: PUSH
52485: EMPTY
52486: LIST
52487: LIST
52488: PUSH
52489: LD_INT 0
52491: PUSH
52492: LD_INT 2
52494: NEG
52495: PUSH
52496: EMPTY
52497: LIST
52498: LIST
52499: PUSH
52500: LD_INT 1
52502: PUSH
52503: LD_INT 1
52505: NEG
52506: PUSH
52507: EMPTY
52508: LIST
52509: LIST
52510: PUSH
52511: LD_INT 2
52513: PUSH
52514: LD_INT 1
52516: PUSH
52517: EMPTY
52518: LIST
52519: LIST
52520: PUSH
52521: LD_INT 2
52523: PUSH
52524: LD_INT 2
52526: PUSH
52527: EMPTY
52528: LIST
52529: LIST
52530: PUSH
52531: LD_INT 1
52533: PUSH
52534: LD_INT 2
52536: PUSH
52537: EMPTY
52538: LIST
52539: LIST
52540: PUSH
52541: LD_INT 0
52543: PUSH
52544: LD_INT 2
52546: PUSH
52547: EMPTY
52548: LIST
52549: LIST
52550: PUSH
52551: LD_INT 1
52553: NEG
52554: PUSH
52555: LD_INT 1
52557: PUSH
52558: EMPTY
52559: LIST
52560: LIST
52561: PUSH
52562: LD_INT 2
52564: NEG
52565: PUSH
52566: LD_INT 1
52568: NEG
52569: PUSH
52570: EMPTY
52571: LIST
52572: LIST
52573: PUSH
52574: LD_INT 2
52576: NEG
52577: PUSH
52578: LD_INT 2
52580: NEG
52581: PUSH
52582: EMPTY
52583: LIST
52584: LIST
52585: PUSH
52586: LD_INT 2
52588: NEG
52589: PUSH
52590: LD_INT 3
52592: NEG
52593: PUSH
52594: EMPTY
52595: LIST
52596: LIST
52597: PUSH
52598: LD_INT 1
52600: NEG
52601: PUSH
52602: LD_INT 3
52604: NEG
52605: PUSH
52606: EMPTY
52607: LIST
52608: LIST
52609: PUSH
52610: LD_INT 0
52612: PUSH
52613: LD_INT 3
52615: NEG
52616: PUSH
52617: EMPTY
52618: LIST
52619: LIST
52620: PUSH
52621: LD_INT 1
52623: PUSH
52624: LD_INT 2
52626: NEG
52627: PUSH
52628: EMPTY
52629: LIST
52630: LIST
52631: PUSH
52632: LD_INT 3
52634: PUSH
52635: LD_INT 2
52637: PUSH
52638: EMPTY
52639: LIST
52640: LIST
52641: PUSH
52642: LD_INT 3
52644: PUSH
52645: LD_INT 3
52647: PUSH
52648: EMPTY
52649: LIST
52650: LIST
52651: PUSH
52652: LD_INT 2
52654: PUSH
52655: LD_INT 3
52657: PUSH
52658: EMPTY
52659: LIST
52660: LIST
52661: PUSH
52662: LD_INT 1
52664: PUSH
52665: LD_INT 3
52667: PUSH
52668: EMPTY
52669: LIST
52670: LIST
52671: PUSH
52672: LD_INT 0
52674: PUSH
52675: LD_INT 3
52677: PUSH
52678: EMPTY
52679: LIST
52680: LIST
52681: PUSH
52682: LD_INT 1
52684: NEG
52685: PUSH
52686: LD_INT 2
52688: PUSH
52689: EMPTY
52690: LIST
52691: LIST
52692: PUSH
52693: LD_INT 3
52695: NEG
52696: PUSH
52697: LD_INT 2
52699: NEG
52700: PUSH
52701: EMPTY
52702: LIST
52703: LIST
52704: PUSH
52705: LD_INT 3
52707: NEG
52708: PUSH
52709: LD_INT 3
52711: NEG
52712: PUSH
52713: EMPTY
52714: LIST
52715: LIST
52716: PUSH
52717: EMPTY
52718: LIST
52719: LIST
52720: LIST
52721: LIST
52722: LIST
52723: LIST
52724: LIST
52725: LIST
52726: LIST
52727: LIST
52728: LIST
52729: LIST
52730: LIST
52731: LIST
52732: LIST
52733: LIST
52734: LIST
52735: LIST
52736: LIST
52737: LIST
52738: LIST
52739: LIST
52740: LIST
52741: LIST
52742: LIST
52743: LIST
52744: LIST
52745: LIST
52746: LIST
52747: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52748: LD_ADDR_VAR 0 43
52752: PUSH
52753: LD_INT 0
52755: PUSH
52756: LD_INT 0
52758: PUSH
52759: EMPTY
52760: LIST
52761: LIST
52762: PUSH
52763: LD_INT 0
52765: PUSH
52766: LD_INT 1
52768: NEG
52769: PUSH
52770: EMPTY
52771: LIST
52772: LIST
52773: PUSH
52774: LD_INT 1
52776: PUSH
52777: LD_INT 0
52779: PUSH
52780: EMPTY
52781: LIST
52782: LIST
52783: PUSH
52784: LD_INT 1
52786: PUSH
52787: LD_INT 1
52789: PUSH
52790: EMPTY
52791: LIST
52792: LIST
52793: PUSH
52794: LD_INT 0
52796: PUSH
52797: LD_INT 1
52799: PUSH
52800: EMPTY
52801: LIST
52802: LIST
52803: PUSH
52804: LD_INT 1
52806: NEG
52807: PUSH
52808: LD_INT 0
52810: PUSH
52811: EMPTY
52812: LIST
52813: LIST
52814: PUSH
52815: LD_INT 1
52817: NEG
52818: PUSH
52819: LD_INT 1
52821: NEG
52822: PUSH
52823: EMPTY
52824: LIST
52825: LIST
52826: PUSH
52827: LD_INT 1
52829: NEG
52830: PUSH
52831: LD_INT 2
52833: NEG
52834: PUSH
52835: EMPTY
52836: LIST
52837: LIST
52838: PUSH
52839: LD_INT 0
52841: PUSH
52842: LD_INT 2
52844: NEG
52845: PUSH
52846: EMPTY
52847: LIST
52848: LIST
52849: PUSH
52850: LD_INT 1
52852: PUSH
52853: LD_INT 1
52855: NEG
52856: PUSH
52857: EMPTY
52858: LIST
52859: LIST
52860: PUSH
52861: LD_INT 2
52863: PUSH
52864: LD_INT 0
52866: PUSH
52867: EMPTY
52868: LIST
52869: LIST
52870: PUSH
52871: LD_INT 2
52873: PUSH
52874: LD_INT 1
52876: PUSH
52877: EMPTY
52878: LIST
52879: LIST
52880: PUSH
52881: LD_INT 1
52883: PUSH
52884: LD_INT 2
52886: PUSH
52887: EMPTY
52888: LIST
52889: LIST
52890: PUSH
52891: LD_INT 0
52893: PUSH
52894: LD_INT 2
52896: PUSH
52897: EMPTY
52898: LIST
52899: LIST
52900: PUSH
52901: LD_INT 1
52903: NEG
52904: PUSH
52905: LD_INT 1
52907: PUSH
52908: EMPTY
52909: LIST
52910: LIST
52911: PUSH
52912: LD_INT 2
52914: NEG
52915: PUSH
52916: LD_INT 0
52918: PUSH
52919: EMPTY
52920: LIST
52921: LIST
52922: PUSH
52923: LD_INT 2
52925: NEG
52926: PUSH
52927: LD_INT 1
52929: NEG
52930: PUSH
52931: EMPTY
52932: LIST
52933: LIST
52934: PUSH
52935: LD_INT 1
52937: NEG
52938: PUSH
52939: LD_INT 3
52941: NEG
52942: PUSH
52943: EMPTY
52944: LIST
52945: LIST
52946: PUSH
52947: LD_INT 0
52949: PUSH
52950: LD_INT 3
52952: NEG
52953: PUSH
52954: EMPTY
52955: LIST
52956: LIST
52957: PUSH
52958: LD_INT 1
52960: PUSH
52961: LD_INT 2
52963: NEG
52964: PUSH
52965: EMPTY
52966: LIST
52967: LIST
52968: PUSH
52969: LD_INT 2
52971: PUSH
52972: LD_INT 1
52974: NEG
52975: PUSH
52976: EMPTY
52977: LIST
52978: LIST
52979: PUSH
52980: LD_INT 3
52982: PUSH
52983: LD_INT 0
52985: PUSH
52986: EMPTY
52987: LIST
52988: LIST
52989: PUSH
52990: LD_INT 3
52992: PUSH
52993: LD_INT 1
52995: PUSH
52996: EMPTY
52997: LIST
52998: LIST
52999: PUSH
53000: LD_INT 1
53002: PUSH
53003: LD_INT 3
53005: PUSH
53006: EMPTY
53007: LIST
53008: LIST
53009: PUSH
53010: LD_INT 0
53012: PUSH
53013: LD_INT 3
53015: PUSH
53016: EMPTY
53017: LIST
53018: LIST
53019: PUSH
53020: LD_INT 1
53022: NEG
53023: PUSH
53024: LD_INT 2
53026: PUSH
53027: EMPTY
53028: LIST
53029: LIST
53030: PUSH
53031: LD_INT 2
53033: NEG
53034: PUSH
53035: LD_INT 1
53037: PUSH
53038: EMPTY
53039: LIST
53040: LIST
53041: PUSH
53042: LD_INT 3
53044: NEG
53045: PUSH
53046: LD_INT 0
53048: PUSH
53049: EMPTY
53050: LIST
53051: LIST
53052: PUSH
53053: LD_INT 3
53055: NEG
53056: PUSH
53057: LD_INT 1
53059: NEG
53060: PUSH
53061: EMPTY
53062: LIST
53063: LIST
53064: PUSH
53065: EMPTY
53066: LIST
53067: LIST
53068: LIST
53069: LIST
53070: LIST
53071: LIST
53072: LIST
53073: LIST
53074: LIST
53075: LIST
53076: LIST
53077: LIST
53078: LIST
53079: LIST
53080: LIST
53081: LIST
53082: LIST
53083: LIST
53084: LIST
53085: LIST
53086: LIST
53087: LIST
53088: LIST
53089: LIST
53090: LIST
53091: LIST
53092: LIST
53093: LIST
53094: LIST
53095: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53096: LD_ADDR_VAR 0 44
53100: PUSH
53101: LD_INT 0
53103: PUSH
53104: LD_INT 0
53106: PUSH
53107: EMPTY
53108: LIST
53109: LIST
53110: PUSH
53111: LD_INT 0
53113: PUSH
53114: LD_INT 1
53116: NEG
53117: PUSH
53118: EMPTY
53119: LIST
53120: LIST
53121: PUSH
53122: LD_INT 1
53124: PUSH
53125: LD_INT 0
53127: PUSH
53128: EMPTY
53129: LIST
53130: LIST
53131: PUSH
53132: LD_INT 1
53134: PUSH
53135: LD_INT 1
53137: PUSH
53138: EMPTY
53139: LIST
53140: LIST
53141: PUSH
53142: LD_INT 0
53144: PUSH
53145: LD_INT 1
53147: PUSH
53148: EMPTY
53149: LIST
53150: LIST
53151: PUSH
53152: LD_INT 1
53154: NEG
53155: PUSH
53156: LD_INT 0
53158: PUSH
53159: EMPTY
53160: LIST
53161: LIST
53162: PUSH
53163: LD_INT 1
53165: NEG
53166: PUSH
53167: LD_INT 1
53169: NEG
53170: PUSH
53171: EMPTY
53172: LIST
53173: LIST
53174: PUSH
53175: LD_INT 1
53177: NEG
53178: PUSH
53179: LD_INT 2
53181: NEG
53182: PUSH
53183: EMPTY
53184: LIST
53185: LIST
53186: PUSH
53187: LD_INT 1
53189: PUSH
53190: LD_INT 1
53192: NEG
53193: PUSH
53194: EMPTY
53195: LIST
53196: LIST
53197: PUSH
53198: LD_INT 2
53200: PUSH
53201: LD_INT 0
53203: PUSH
53204: EMPTY
53205: LIST
53206: LIST
53207: PUSH
53208: LD_INT 2
53210: PUSH
53211: LD_INT 1
53213: PUSH
53214: EMPTY
53215: LIST
53216: LIST
53217: PUSH
53218: LD_INT 2
53220: PUSH
53221: LD_INT 2
53223: PUSH
53224: EMPTY
53225: LIST
53226: LIST
53227: PUSH
53228: LD_INT 1
53230: PUSH
53231: LD_INT 2
53233: PUSH
53234: EMPTY
53235: LIST
53236: LIST
53237: PUSH
53238: LD_INT 1
53240: NEG
53241: PUSH
53242: LD_INT 1
53244: PUSH
53245: EMPTY
53246: LIST
53247: LIST
53248: PUSH
53249: LD_INT 2
53251: NEG
53252: PUSH
53253: LD_INT 0
53255: PUSH
53256: EMPTY
53257: LIST
53258: LIST
53259: PUSH
53260: LD_INT 2
53262: NEG
53263: PUSH
53264: LD_INT 1
53266: NEG
53267: PUSH
53268: EMPTY
53269: LIST
53270: LIST
53271: PUSH
53272: LD_INT 2
53274: NEG
53275: PUSH
53276: LD_INT 2
53278: NEG
53279: PUSH
53280: EMPTY
53281: LIST
53282: LIST
53283: PUSH
53284: LD_INT 2
53286: NEG
53287: PUSH
53288: LD_INT 3
53290: NEG
53291: PUSH
53292: EMPTY
53293: LIST
53294: LIST
53295: PUSH
53296: LD_INT 2
53298: PUSH
53299: LD_INT 1
53301: NEG
53302: PUSH
53303: EMPTY
53304: LIST
53305: LIST
53306: PUSH
53307: LD_INT 3
53309: PUSH
53310: LD_INT 0
53312: PUSH
53313: EMPTY
53314: LIST
53315: LIST
53316: PUSH
53317: LD_INT 3
53319: PUSH
53320: LD_INT 1
53322: PUSH
53323: EMPTY
53324: LIST
53325: LIST
53326: PUSH
53327: LD_INT 3
53329: PUSH
53330: LD_INT 2
53332: PUSH
53333: EMPTY
53334: LIST
53335: LIST
53336: PUSH
53337: LD_INT 3
53339: PUSH
53340: LD_INT 3
53342: PUSH
53343: EMPTY
53344: LIST
53345: LIST
53346: PUSH
53347: LD_INT 2
53349: PUSH
53350: LD_INT 3
53352: PUSH
53353: EMPTY
53354: LIST
53355: LIST
53356: PUSH
53357: LD_INT 2
53359: NEG
53360: PUSH
53361: LD_INT 1
53363: PUSH
53364: EMPTY
53365: LIST
53366: LIST
53367: PUSH
53368: LD_INT 3
53370: NEG
53371: PUSH
53372: LD_INT 0
53374: PUSH
53375: EMPTY
53376: LIST
53377: LIST
53378: PUSH
53379: LD_INT 3
53381: NEG
53382: PUSH
53383: LD_INT 1
53385: NEG
53386: PUSH
53387: EMPTY
53388: LIST
53389: LIST
53390: PUSH
53391: LD_INT 3
53393: NEG
53394: PUSH
53395: LD_INT 2
53397: NEG
53398: PUSH
53399: EMPTY
53400: LIST
53401: LIST
53402: PUSH
53403: LD_INT 3
53405: NEG
53406: PUSH
53407: LD_INT 3
53409: NEG
53410: PUSH
53411: EMPTY
53412: LIST
53413: LIST
53414: PUSH
53415: EMPTY
53416: LIST
53417: LIST
53418: LIST
53419: LIST
53420: LIST
53421: LIST
53422: LIST
53423: LIST
53424: LIST
53425: LIST
53426: LIST
53427: LIST
53428: LIST
53429: LIST
53430: LIST
53431: LIST
53432: LIST
53433: LIST
53434: LIST
53435: LIST
53436: LIST
53437: LIST
53438: LIST
53439: LIST
53440: LIST
53441: LIST
53442: LIST
53443: LIST
53444: LIST
53445: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53446: LD_ADDR_VAR 0 45
53450: PUSH
53451: LD_INT 0
53453: PUSH
53454: LD_INT 0
53456: PUSH
53457: EMPTY
53458: LIST
53459: LIST
53460: PUSH
53461: LD_INT 0
53463: PUSH
53464: LD_INT 1
53466: NEG
53467: PUSH
53468: EMPTY
53469: LIST
53470: LIST
53471: PUSH
53472: LD_INT 1
53474: PUSH
53475: LD_INT 0
53477: PUSH
53478: EMPTY
53479: LIST
53480: LIST
53481: PUSH
53482: LD_INT 1
53484: PUSH
53485: LD_INT 1
53487: PUSH
53488: EMPTY
53489: LIST
53490: LIST
53491: PUSH
53492: LD_INT 0
53494: PUSH
53495: LD_INT 1
53497: PUSH
53498: EMPTY
53499: LIST
53500: LIST
53501: PUSH
53502: LD_INT 1
53504: NEG
53505: PUSH
53506: LD_INT 0
53508: PUSH
53509: EMPTY
53510: LIST
53511: LIST
53512: PUSH
53513: LD_INT 1
53515: NEG
53516: PUSH
53517: LD_INT 1
53519: NEG
53520: PUSH
53521: EMPTY
53522: LIST
53523: LIST
53524: PUSH
53525: LD_INT 1
53527: NEG
53528: PUSH
53529: LD_INT 2
53531: NEG
53532: PUSH
53533: EMPTY
53534: LIST
53535: LIST
53536: PUSH
53537: LD_INT 0
53539: PUSH
53540: LD_INT 2
53542: NEG
53543: PUSH
53544: EMPTY
53545: LIST
53546: LIST
53547: PUSH
53548: LD_INT 1
53550: PUSH
53551: LD_INT 1
53553: NEG
53554: PUSH
53555: EMPTY
53556: LIST
53557: LIST
53558: PUSH
53559: LD_INT 2
53561: PUSH
53562: LD_INT 1
53564: PUSH
53565: EMPTY
53566: LIST
53567: LIST
53568: PUSH
53569: LD_INT 2
53571: PUSH
53572: LD_INT 2
53574: PUSH
53575: EMPTY
53576: LIST
53577: LIST
53578: PUSH
53579: LD_INT 1
53581: PUSH
53582: LD_INT 2
53584: PUSH
53585: EMPTY
53586: LIST
53587: LIST
53588: PUSH
53589: LD_INT 0
53591: PUSH
53592: LD_INT 2
53594: PUSH
53595: EMPTY
53596: LIST
53597: LIST
53598: PUSH
53599: LD_INT 1
53601: NEG
53602: PUSH
53603: LD_INT 1
53605: PUSH
53606: EMPTY
53607: LIST
53608: LIST
53609: PUSH
53610: LD_INT 2
53612: NEG
53613: PUSH
53614: LD_INT 1
53616: NEG
53617: PUSH
53618: EMPTY
53619: LIST
53620: LIST
53621: PUSH
53622: LD_INT 2
53624: NEG
53625: PUSH
53626: LD_INT 2
53628: NEG
53629: PUSH
53630: EMPTY
53631: LIST
53632: LIST
53633: PUSH
53634: LD_INT 2
53636: NEG
53637: PUSH
53638: LD_INT 3
53640: NEG
53641: PUSH
53642: EMPTY
53643: LIST
53644: LIST
53645: PUSH
53646: LD_INT 1
53648: NEG
53649: PUSH
53650: LD_INT 3
53652: NEG
53653: PUSH
53654: EMPTY
53655: LIST
53656: LIST
53657: PUSH
53658: LD_INT 0
53660: PUSH
53661: LD_INT 3
53663: NEG
53664: PUSH
53665: EMPTY
53666: LIST
53667: LIST
53668: PUSH
53669: LD_INT 1
53671: PUSH
53672: LD_INT 2
53674: NEG
53675: PUSH
53676: EMPTY
53677: LIST
53678: LIST
53679: PUSH
53680: LD_INT 3
53682: PUSH
53683: LD_INT 2
53685: PUSH
53686: EMPTY
53687: LIST
53688: LIST
53689: PUSH
53690: LD_INT 3
53692: PUSH
53693: LD_INT 3
53695: PUSH
53696: EMPTY
53697: LIST
53698: LIST
53699: PUSH
53700: LD_INT 2
53702: PUSH
53703: LD_INT 3
53705: PUSH
53706: EMPTY
53707: LIST
53708: LIST
53709: PUSH
53710: LD_INT 1
53712: PUSH
53713: LD_INT 3
53715: PUSH
53716: EMPTY
53717: LIST
53718: LIST
53719: PUSH
53720: LD_INT 0
53722: PUSH
53723: LD_INT 3
53725: PUSH
53726: EMPTY
53727: LIST
53728: LIST
53729: PUSH
53730: LD_INT 1
53732: NEG
53733: PUSH
53734: LD_INT 2
53736: PUSH
53737: EMPTY
53738: LIST
53739: LIST
53740: PUSH
53741: LD_INT 3
53743: NEG
53744: PUSH
53745: LD_INT 2
53747: NEG
53748: PUSH
53749: EMPTY
53750: LIST
53751: LIST
53752: PUSH
53753: LD_INT 3
53755: NEG
53756: PUSH
53757: LD_INT 3
53759: NEG
53760: PUSH
53761: EMPTY
53762: LIST
53763: LIST
53764: PUSH
53765: EMPTY
53766: LIST
53767: LIST
53768: LIST
53769: LIST
53770: LIST
53771: LIST
53772: LIST
53773: LIST
53774: LIST
53775: LIST
53776: LIST
53777: LIST
53778: LIST
53779: LIST
53780: LIST
53781: LIST
53782: LIST
53783: LIST
53784: LIST
53785: LIST
53786: LIST
53787: LIST
53788: LIST
53789: LIST
53790: LIST
53791: LIST
53792: LIST
53793: LIST
53794: LIST
53795: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53796: LD_ADDR_VAR 0 46
53800: PUSH
53801: LD_INT 0
53803: PUSH
53804: LD_INT 0
53806: PUSH
53807: EMPTY
53808: LIST
53809: LIST
53810: PUSH
53811: LD_INT 0
53813: PUSH
53814: LD_INT 1
53816: NEG
53817: PUSH
53818: EMPTY
53819: LIST
53820: LIST
53821: PUSH
53822: LD_INT 1
53824: PUSH
53825: LD_INT 0
53827: PUSH
53828: EMPTY
53829: LIST
53830: LIST
53831: PUSH
53832: LD_INT 1
53834: PUSH
53835: LD_INT 1
53837: PUSH
53838: EMPTY
53839: LIST
53840: LIST
53841: PUSH
53842: LD_INT 0
53844: PUSH
53845: LD_INT 1
53847: PUSH
53848: EMPTY
53849: LIST
53850: LIST
53851: PUSH
53852: LD_INT 1
53854: NEG
53855: PUSH
53856: LD_INT 0
53858: PUSH
53859: EMPTY
53860: LIST
53861: LIST
53862: PUSH
53863: LD_INT 1
53865: NEG
53866: PUSH
53867: LD_INT 1
53869: NEG
53870: PUSH
53871: EMPTY
53872: LIST
53873: LIST
53874: PUSH
53875: LD_INT 1
53877: NEG
53878: PUSH
53879: LD_INT 2
53881: NEG
53882: PUSH
53883: EMPTY
53884: LIST
53885: LIST
53886: PUSH
53887: LD_INT 0
53889: PUSH
53890: LD_INT 2
53892: NEG
53893: PUSH
53894: EMPTY
53895: LIST
53896: LIST
53897: PUSH
53898: LD_INT 1
53900: PUSH
53901: LD_INT 1
53903: NEG
53904: PUSH
53905: EMPTY
53906: LIST
53907: LIST
53908: PUSH
53909: LD_INT 2
53911: PUSH
53912: LD_INT 0
53914: PUSH
53915: EMPTY
53916: LIST
53917: LIST
53918: PUSH
53919: LD_INT 2
53921: PUSH
53922: LD_INT 1
53924: PUSH
53925: EMPTY
53926: LIST
53927: LIST
53928: PUSH
53929: LD_INT 1
53931: PUSH
53932: LD_INT 2
53934: PUSH
53935: EMPTY
53936: LIST
53937: LIST
53938: PUSH
53939: LD_INT 0
53941: PUSH
53942: LD_INT 2
53944: PUSH
53945: EMPTY
53946: LIST
53947: LIST
53948: PUSH
53949: LD_INT 1
53951: NEG
53952: PUSH
53953: LD_INT 1
53955: PUSH
53956: EMPTY
53957: LIST
53958: LIST
53959: PUSH
53960: LD_INT 2
53962: NEG
53963: PUSH
53964: LD_INT 0
53966: PUSH
53967: EMPTY
53968: LIST
53969: LIST
53970: PUSH
53971: LD_INT 2
53973: NEG
53974: PUSH
53975: LD_INT 1
53977: NEG
53978: PUSH
53979: EMPTY
53980: LIST
53981: LIST
53982: PUSH
53983: LD_INT 1
53985: NEG
53986: PUSH
53987: LD_INT 3
53989: NEG
53990: PUSH
53991: EMPTY
53992: LIST
53993: LIST
53994: PUSH
53995: LD_INT 0
53997: PUSH
53998: LD_INT 3
54000: NEG
54001: PUSH
54002: EMPTY
54003: LIST
54004: LIST
54005: PUSH
54006: LD_INT 1
54008: PUSH
54009: LD_INT 2
54011: NEG
54012: PUSH
54013: EMPTY
54014: LIST
54015: LIST
54016: PUSH
54017: LD_INT 2
54019: PUSH
54020: LD_INT 1
54022: NEG
54023: PUSH
54024: EMPTY
54025: LIST
54026: LIST
54027: PUSH
54028: LD_INT 3
54030: PUSH
54031: LD_INT 0
54033: PUSH
54034: EMPTY
54035: LIST
54036: LIST
54037: PUSH
54038: LD_INT 3
54040: PUSH
54041: LD_INT 1
54043: PUSH
54044: EMPTY
54045: LIST
54046: LIST
54047: PUSH
54048: LD_INT 1
54050: PUSH
54051: LD_INT 3
54053: PUSH
54054: EMPTY
54055: LIST
54056: LIST
54057: PUSH
54058: LD_INT 0
54060: PUSH
54061: LD_INT 3
54063: PUSH
54064: EMPTY
54065: LIST
54066: LIST
54067: PUSH
54068: LD_INT 1
54070: NEG
54071: PUSH
54072: LD_INT 2
54074: PUSH
54075: EMPTY
54076: LIST
54077: LIST
54078: PUSH
54079: LD_INT 2
54081: NEG
54082: PUSH
54083: LD_INT 1
54085: PUSH
54086: EMPTY
54087: LIST
54088: LIST
54089: PUSH
54090: LD_INT 3
54092: NEG
54093: PUSH
54094: LD_INT 0
54096: PUSH
54097: EMPTY
54098: LIST
54099: LIST
54100: PUSH
54101: LD_INT 3
54103: NEG
54104: PUSH
54105: LD_INT 1
54107: NEG
54108: PUSH
54109: EMPTY
54110: LIST
54111: LIST
54112: PUSH
54113: EMPTY
54114: LIST
54115: LIST
54116: LIST
54117: LIST
54118: LIST
54119: LIST
54120: LIST
54121: LIST
54122: LIST
54123: LIST
54124: LIST
54125: LIST
54126: LIST
54127: LIST
54128: LIST
54129: LIST
54130: LIST
54131: LIST
54132: LIST
54133: LIST
54134: LIST
54135: LIST
54136: LIST
54137: LIST
54138: LIST
54139: LIST
54140: LIST
54141: LIST
54142: LIST
54143: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54144: LD_ADDR_VAR 0 47
54148: PUSH
54149: LD_INT 0
54151: PUSH
54152: LD_INT 0
54154: PUSH
54155: EMPTY
54156: LIST
54157: LIST
54158: PUSH
54159: LD_INT 0
54161: PUSH
54162: LD_INT 1
54164: NEG
54165: PUSH
54166: EMPTY
54167: LIST
54168: LIST
54169: PUSH
54170: LD_INT 1
54172: PUSH
54173: LD_INT 0
54175: PUSH
54176: EMPTY
54177: LIST
54178: LIST
54179: PUSH
54180: LD_INT 1
54182: PUSH
54183: LD_INT 1
54185: PUSH
54186: EMPTY
54187: LIST
54188: LIST
54189: PUSH
54190: LD_INT 0
54192: PUSH
54193: LD_INT 1
54195: PUSH
54196: EMPTY
54197: LIST
54198: LIST
54199: PUSH
54200: LD_INT 1
54202: NEG
54203: PUSH
54204: LD_INT 0
54206: PUSH
54207: EMPTY
54208: LIST
54209: LIST
54210: PUSH
54211: LD_INT 1
54213: NEG
54214: PUSH
54215: LD_INT 1
54217: NEG
54218: PUSH
54219: EMPTY
54220: LIST
54221: LIST
54222: PUSH
54223: LD_INT 1
54225: NEG
54226: PUSH
54227: LD_INT 2
54229: NEG
54230: PUSH
54231: EMPTY
54232: LIST
54233: LIST
54234: PUSH
54235: LD_INT 0
54237: PUSH
54238: LD_INT 2
54240: NEG
54241: PUSH
54242: EMPTY
54243: LIST
54244: LIST
54245: PUSH
54246: LD_INT 1
54248: PUSH
54249: LD_INT 1
54251: NEG
54252: PUSH
54253: EMPTY
54254: LIST
54255: LIST
54256: PUSH
54257: LD_INT 2
54259: NEG
54260: PUSH
54261: LD_INT 1
54263: NEG
54264: PUSH
54265: EMPTY
54266: LIST
54267: LIST
54268: PUSH
54269: LD_INT 2
54271: NEG
54272: PUSH
54273: LD_INT 2
54275: NEG
54276: PUSH
54277: EMPTY
54278: LIST
54279: LIST
54280: PUSH
54281: EMPTY
54282: LIST
54283: LIST
54284: LIST
54285: LIST
54286: LIST
54287: LIST
54288: LIST
54289: LIST
54290: LIST
54291: LIST
54292: LIST
54293: LIST
54294: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
54295: LD_ADDR_VAR 0 48
54299: PUSH
54300: LD_INT 0
54302: PUSH
54303: LD_INT 0
54305: PUSH
54306: EMPTY
54307: LIST
54308: LIST
54309: PUSH
54310: LD_INT 0
54312: PUSH
54313: LD_INT 1
54315: NEG
54316: PUSH
54317: EMPTY
54318: LIST
54319: LIST
54320: PUSH
54321: LD_INT 1
54323: PUSH
54324: LD_INT 0
54326: PUSH
54327: EMPTY
54328: LIST
54329: LIST
54330: PUSH
54331: LD_INT 1
54333: PUSH
54334: LD_INT 1
54336: PUSH
54337: EMPTY
54338: LIST
54339: LIST
54340: PUSH
54341: LD_INT 0
54343: PUSH
54344: LD_INT 1
54346: PUSH
54347: EMPTY
54348: LIST
54349: LIST
54350: PUSH
54351: LD_INT 1
54353: NEG
54354: PUSH
54355: LD_INT 0
54357: PUSH
54358: EMPTY
54359: LIST
54360: LIST
54361: PUSH
54362: LD_INT 1
54364: NEG
54365: PUSH
54366: LD_INT 1
54368: NEG
54369: PUSH
54370: EMPTY
54371: LIST
54372: LIST
54373: PUSH
54374: LD_INT 1
54376: NEG
54377: PUSH
54378: LD_INT 2
54380: NEG
54381: PUSH
54382: EMPTY
54383: LIST
54384: LIST
54385: PUSH
54386: LD_INT 0
54388: PUSH
54389: LD_INT 2
54391: NEG
54392: PUSH
54393: EMPTY
54394: LIST
54395: LIST
54396: PUSH
54397: LD_INT 1
54399: PUSH
54400: LD_INT 1
54402: NEG
54403: PUSH
54404: EMPTY
54405: LIST
54406: LIST
54407: PUSH
54408: LD_INT 2
54410: PUSH
54411: LD_INT 0
54413: PUSH
54414: EMPTY
54415: LIST
54416: LIST
54417: PUSH
54418: LD_INT 2
54420: PUSH
54421: LD_INT 1
54423: PUSH
54424: EMPTY
54425: LIST
54426: LIST
54427: PUSH
54428: EMPTY
54429: LIST
54430: LIST
54431: LIST
54432: LIST
54433: LIST
54434: LIST
54435: LIST
54436: LIST
54437: LIST
54438: LIST
54439: LIST
54440: LIST
54441: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
54442: LD_ADDR_VAR 0 49
54446: PUSH
54447: LD_INT 0
54449: PUSH
54450: LD_INT 0
54452: PUSH
54453: EMPTY
54454: LIST
54455: LIST
54456: PUSH
54457: LD_INT 0
54459: PUSH
54460: LD_INT 1
54462: NEG
54463: PUSH
54464: EMPTY
54465: LIST
54466: LIST
54467: PUSH
54468: LD_INT 1
54470: PUSH
54471: LD_INT 0
54473: PUSH
54474: EMPTY
54475: LIST
54476: LIST
54477: PUSH
54478: LD_INT 1
54480: PUSH
54481: LD_INT 1
54483: PUSH
54484: EMPTY
54485: LIST
54486: LIST
54487: PUSH
54488: LD_INT 0
54490: PUSH
54491: LD_INT 1
54493: PUSH
54494: EMPTY
54495: LIST
54496: LIST
54497: PUSH
54498: LD_INT 1
54500: NEG
54501: PUSH
54502: LD_INT 0
54504: PUSH
54505: EMPTY
54506: LIST
54507: LIST
54508: PUSH
54509: LD_INT 1
54511: NEG
54512: PUSH
54513: LD_INT 1
54515: NEG
54516: PUSH
54517: EMPTY
54518: LIST
54519: LIST
54520: PUSH
54521: LD_INT 1
54523: PUSH
54524: LD_INT 1
54526: NEG
54527: PUSH
54528: EMPTY
54529: LIST
54530: LIST
54531: PUSH
54532: LD_INT 2
54534: PUSH
54535: LD_INT 0
54537: PUSH
54538: EMPTY
54539: LIST
54540: LIST
54541: PUSH
54542: LD_INT 2
54544: PUSH
54545: LD_INT 1
54547: PUSH
54548: EMPTY
54549: LIST
54550: LIST
54551: PUSH
54552: LD_INT 2
54554: PUSH
54555: LD_INT 2
54557: PUSH
54558: EMPTY
54559: LIST
54560: LIST
54561: PUSH
54562: LD_INT 1
54564: PUSH
54565: LD_INT 2
54567: PUSH
54568: EMPTY
54569: LIST
54570: LIST
54571: PUSH
54572: EMPTY
54573: LIST
54574: LIST
54575: LIST
54576: LIST
54577: LIST
54578: LIST
54579: LIST
54580: LIST
54581: LIST
54582: LIST
54583: LIST
54584: LIST
54585: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
54586: LD_ADDR_VAR 0 50
54590: PUSH
54591: LD_INT 0
54593: PUSH
54594: LD_INT 0
54596: PUSH
54597: EMPTY
54598: LIST
54599: LIST
54600: PUSH
54601: LD_INT 0
54603: PUSH
54604: LD_INT 1
54606: NEG
54607: PUSH
54608: EMPTY
54609: LIST
54610: LIST
54611: PUSH
54612: LD_INT 1
54614: PUSH
54615: LD_INT 0
54617: PUSH
54618: EMPTY
54619: LIST
54620: LIST
54621: PUSH
54622: LD_INT 1
54624: PUSH
54625: LD_INT 1
54627: PUSH
54628: EMPTY
54629: LIST
54630: LIST
54631: PUSH
54632: LD_INT 0
54634: PUSH
54635: LD_INT 1
54637: PUSH
54638: EMPTY
54639: LIST
54640: LIST
54641: PUSH
54642: LD_INT 1
54644: NEG
54645: PUSH
54646: LD_INT 0
54648: PUSH
54649: EMPTY
54650: LIST
54651: LIST
54652: PUSH
54653: LD_INT 1
54655: NEG
54656: PUSH
54657: LD_INT 1
54659: NEG
54660: PUSH
54661: EMPTY
54662: LIST
54663: LIST
54664: PUSH
54665: LD_INT 2
54667: PUSH
54668: LD_INT 1
54670: PUSH
54671: EMPTY
54672: LIST
54673: LIST
54674: PUSH
54675: LD_INT 2
54677: PUSH
54678: LD_INT 2
54680: PUSH
54681: EMPTY
54682: LIST
54683: LIST
54684: PUSH
54685: LD_INT 1
54687: PUSH
54688: LD_INT 2
54690: PUSH
54691: EMPTY
54692: LIST
54693: LIST
54694: PUSH
54695: LD_INT 0
54697: PUSH
54698: LD_INT 2
54700: PUSH
54701: EMPTY
54702: LIST
54703: LIST
54704: PUSH
54705: LD_INT 1
54707: NEG
54708: PUSH
54709: LD_INT 1
54711: PUSH
54712: EMPTY
54713: LIST
54714: LIST
54715: PUSH
54716: EMPTY
54717: LIST
54718: LIST
54719: LIST
54720: LIST
54721: LIST
54722: LIST
54723: LIST
54724: LIST
54725: LIST
54726: LIST
54727: LIST
54728: LIST
54729: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
54730: LD_ADDR_VAR 0 51
54734: PUSH
54735: LD_INT 0
54737: PUSH
54738: LD_INT 0
54740: PUSH
54741: EMPTY
54742: LIST
54743: LIST
54744: PUSH
54745: LD_INT 0
54747: PUSH
54748: LD_INT 1
54750: NEG
54751: PUSH
54752: EMPTY
54753: LIST
54754: LIST
54755: PUSH
54756: LD_INT 1
54758: PUSH
54759: LD_INT 0
54761: PUSH
54762: EMPTY
54763: LIST
54764: LIST
54765: PUSH
54766: LD_INT 1
54768: PUSH
54769: LD_INT 1
54771: PUSH
54772: EMPTY
54773: LIST
54774: LIST
54775: PUSH
54776: LD_INT 0
54778: PUSH
54779: LD_INT 1
54781: PUSH
54782: EMPTY
54783: LIST
54784: LIST
54785: PUSH
54786: LD_INT 1
54788: NEG
54789: PUSH
54790: LD_INT 0
54792: PUSH
54793: EMPTY
54794: LIST
54795: LIST
54796: PUSH
54797: LD_INT 1
54799: NEG
54800: PUSH
54801: LD_INT 1
54803: NEG
54804: PUSH
54805: EMPTY
54806: LIST
54807: LIST
54808: PUSH
54809: LD_INT 1
54811: PUSH
54812: LD_INT 2
54814: PUSH
54815: EMPTY
54816: LIST
54817: LIST
54818: PUSH
54819: LD_INT 0
54821: PUSH
54822: LD_INT 2
54824: PUSH
54825: EMPTY
54826: LIST
54827: LIST
54828: PUSH
54829: LD_INT 1
54831: NEG
54832: PUSH
54833: LD_INT 1
54835: PUSH
54836: EMPTY
54837: LIST
54838: LIST
54839: PUSH
54840: LD_INT 2
54842: NEG
54843: PUSH
54844: LD_INT 0
54846: PUSH
54847: EMPTY
54848: LIST
54849: LIST
54850: PUSH
54851: LD_INT 2
54853: NEG
54854: PUSH
54855: LD_INT 1
54857: NEG
54858: PUSH
54859: EMPTY
54860: LIST
54861: LIST
54862: PUSH
54863: EMPTY
54864: LIST
54865: LIST
54866: LIST
54867: LIST
54868: LIST
54869: LIST
54870: LIST
54871: LIST
54872: LIST
54873: LIST
54874: LIST
54875: LIST
54876: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54877: LD_ADDR_VAR 0 52
54881: PUSH
54882: LD_INT 0
54884: PUSH
54885: LD_INT 0
54887: PUSH
54888: EMPTY
54889: LIST
54890: LIST
54891: PUSH
54892: LD_INT 0
54894: PUSH
54895: LD_INT 1
54897: NEG
54898: PUSH
54899: EMPTY
54900: LIST
54901: LIST
54902: PUSH
54903: LD_INT 1
54905: PUSH
54906: LD_INT 0
54908: PUSH
54909: EMPTY
54910: LIST
54911: LIST
54912: PUSH
54913: LD_INT 1
54915: PUSH
54916: LD_INT 1
54918: PUSH
54919: EMPTY
54920: LIST
54921: LIST
54922: PUSH
54923: LD_INT 0
54925: PUSH
54926: LD_INT 1
54928: PUSH
54929: EMPTY
54930: LIST
54931: LIST
54932: PUSH
54933: LD_INT 1
54935: NEG
54936: PUSH
54937: LD_INT 0
54939: PUSH
54940: EMPTY
54941: LIST
54942: LIST
54943: PUSH
54944: LD_INT 1
54946: NEG
54947: PUSH
54948: LD_INT 1
54950: NEG
54951: PUSH
54952: EMPTY
54953: LIST
54954: LIST
54955: PUSH
54956: LD_INT 1
54958: NEG
54959: PUSH
54960: LD_INT 2
54962: NEG
54963: PUSH
54964: EMPTY
54965: LIST
54966: LIST
54967: PUSH
54968: LD_INT 1
54970: NEG
54971: PUSH
54972: LD_INT 1
54974: PUSH
54975: EMPTY
54976: LIST
54977: LIST
54978: PUSH
54979: LD_INT 2
54981: NEG
54982: PUSH
54983: LD_INT 0
54985: PUSH
54986: EMPTY
54987: LIST
54988: LIST
54989: PUSH
54990: LD_INT 2
54992: NEG
54993: PUSH
54994: LD_INT 1
54996: NEG
54997: PUSH
54998: EMPTY
54999: LIST
55000: LIST
55001: PUSH
55002: LD_INT 2
55004: NEG
55005: PUSH
55006: LD_INT 2
55008: NEG
55009: PUSH
55010: EMPTY
55011: LIST
55012: LIST
55013: PUSH
55014: EMPTY
55015: LIST
55016: LIST
55017: LIST
55018: LIST
55019: LIST
55020: LIST
55021: LIST
55022: LIST
55023: LIST
55024: LIST
55025: LIST
55026: LIST
55027: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55028: LD_ADDR_VAR 0 53
55032: PUSH
55033: LD_INT 0
55035: PUSH
55036: LD_INT 0
55038: PUSH
55039: EMPTY
55040: LIST
55041: LIST
55042: PUSH
55043: LD_INT 0
55045: PUSH
55046: LD_INT 1
55048: NEG
55049: PUSH
55050: EMPTY
55051: LIST
55052: LIST
55053: PUSH
55054: LD_INT 1
55056: PUSH
55057: LD_INT 0
55059: PUSH
55060: EMPTY
55061: LIST
55062: LIST
55063: PUSH
55064: LD_INT 1
55066: PUSH
55067: LD_INT 1
55069: PUSH
55070: EMPTY
55071: LIST
55072: LIST
55073: PUSH
55074: LD_INT 0
55076: PUSH
55077: LD_INT 1
55079: PUSH
55080: EMPTY
55081: LIST
55082: LIST
55083: PUSH
55084: LD_INT 1
55086: NEG
55087: PUSH
55088: LD_INT 0
55090: PUSH
55091: EMPTY
55092: LIST
55093: LIST
55094: PUSH
55095: LD_INT 1
55097: NEG
55098: PUSH
55099: LD_INT 1
55101: NEG
55102: PUSH
55103: EMPTY
55104: LIST
55105: LIST
55106: PUSH
55107: LD_INT 1
55109: NEG
55110: PUSH
55111: LD_INT 2
55113: NEG
55114: PUSH
55115: EMPTY
55116: LIST
55117: LIST
55118: PUSH
55119: LD_INT 0
55121: PUSH
55122: LD_INT 2
55124: NEG
55125: PUSH
55126: EMPTY
55127: LIST
55128: LIST
55129: PUSH
55130: LD_INT 1
55132: PUSH
55133: LD_INT 1
55135: NEG
55136: PUSH
55137: EMPTY
55138: LIST
55139: LIST
55140: PUSH
55141: LD_INT 2
55143: PUSH
55144: LD_INT 0
55146: PUSH
55147: EMPTY
55148: LIST
55149: LIST
55150: PUSH
55151: LD_INT 2
55153: PUSH
55154: LD_INT 1
55156: PUSH
55157: EMPTY
55158: LIST
55159: LIST
55160: PUSH
55161: LD_INT 2
55163: PUSH
55164: LD_INT 2
55166: PUSH
55167: EMPTY
55168: LIST
55169: LIST
55170: PUSH
55171: LD_INT 1
55173: PUSH
55174: LD_INT 2
55176: PUSH
55177: EMPTY
55178: LIST
55179: LIST
55180: PUSH
55181: LD_INT 0
55183: PUSH
55184: LD_INT 2
55186: PUSH
55187: EMPTY
55188: LIST
55189: LIST
55190: PUSH
55191: LD_INT 1
55193: NEG
55194: PUSH
55195: LD_INT 1
55197: PUSH
55198: EMPTY
55199: LIST
55200: LIST
55201: PUSH
55202: LD_INT 2
55204: NEG
55205: PUSH
55206: LD_INT 0
55208: PUSH
55209: EMPTY
55210: LIST
55211: LIST
55212: PUSH
55213: LD_INT 2
55215: NEG
55216: PUSH
55217: LD_INT 1
55219: NEG
55220: PUSH
55221: EMPTY
55222: LIST
55223: LIST
55224: PUSH
55225: LD_INT 2
55227: NEG
55228: PUSH
55229: LD_INT 2
55231: NEG
55232: PUSH
55233: EMPTY
55234: LIST
55235: LIST
55236: PUSH
55237: EMPTY
55238: LIST
55239: LIST
55240: LIST
55241: LIST
55242: LIST
55243: LIST
55244: LIST
55245: LIST
55246: LIST
55247: LIST
55248: LIST
55249: LIST
55250: LIST
55251: LIST
55252: LIST
55253: LIST
55254: LIST
55255: LIST
55256: LIST
55257: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55258: LD_ADDR_VAR 0 54
55262: PUSH
55263: LD_INT 0
55265: PUSH
55266: LD_INT 0
55268: PUSH
55269: EMPTY
55270: LIST
55271: LIST
55272: PUSH
55273: LD_INT 0
55275: PUSH
55276: LD_INT 1
55278: NEG
55279: PUSH
55280: EMPTY
55281: LIST
55282: LIST
55283: PUSH
55284: LD_INT 1
55286: PUSH
55287: LD_INT 0
55289: PUSH
55290: EMPTY
55291: LIST
55292: LIST
55293: PUSH
55294: LD_INT 1
55296: PUSH
55297: LD_INT 1
55299: PUSH
55300: EMPTY
55301: LIST
55302: LIST
55303: PUSH
55304: LD_INT 0
55306: PUSH
55307: LD_INT 1
55309: PUSH
55310: EMPTY
55311: LIST
55312: LIST
55313: PUSH
55314: LD_INT 1
55316: NEG
55317: PUSH
55318: LD_INT 0
55320: PUSH
55321: EMPTY
55322: LIST
55323: LIST
55324: PUSH
55325: LD_INT 1
55327: NEG
55328: PUSH
55329: LD_INT 1
55331: NEG
55332: PUSH
55333: EMPTY
55334: LIST
55335: LIST
55336: PUSH
55337: LD_INT 1
55339: NEG
55340: PUSH
55341: LD_INT 2
55343: NEG
55344: PUSH
55345: EMPTY
55346: LIST
55347: LIST
55348: PUSH
55349: LD_INT 0
55351: PUSH
55352: LD_INT 2
55354: NEG
55355: PUSH
55356: EMPTY
55357: LIST
55358: LIST
55359: PUSH
55360: LD_INT 1
55362: PUSH
55363: LD_INT 1
55365: NEG
55366: PUSH
55367: EMPTY
55368: LIST
55369: LIST
55370: PUSH
55371: LD_INT 2
55373: PUSH
55374: LD_INT 0
55376: PUSH
55377: EMPTY
55378: LIST
55379: LIST
55380: PUSH
55381: LD_INT 2
55383: PUSH
55384: LD_INT 1
55386: PUSH
55387: EMPTY
55388: LIST
55389: LIST
55390: PUSH
55391: LD_INT 2
55393: PUSH
55394: LD_INT 2
55396: PUSH
55397: EMPTY
55398: LIST
55399: LIST
55400: PUSH
55401: LD_INT 1
55403: PUSH
55404: LD_INT 2
55406: PUSH
55407: EMPTY
55408: LIST
55409: LIST
55410: PUSH
55411: LD_INT 0
55413: PUSH
55414: LD_INT 2
55416: PUSH
55417: EMPTY
55418: LIST
55419: LIST
55420: PUSH
55421: LD_INT 1
55423: NEG
55424: PUSH
55425: LD_INT 1
55427: PUSH
55428: EMPTY
55429: LIST
55430: LIST
55431: PUSH
55432: LD_INT 2
55434: NEG
55435: PUSH
55436: LD_INT 0
55438: PUSH
55439: EMPTY
55440: LIST
55441: LIST
55442: PUSH
55443: LD_INT 2
55445: NEG
55446: PUSH
55447: LD_INT 1
55449: NEG
55450: PUSH
55451: EMPTY
55452: LIST
55453: LIST
55454: PUSH
55455: LD_INT 2
55457: NEG
55458: PUSH
55459: LD_INT 2
55461: NEG
55462: PUSH
55463: EMPTY
55464: LIST
55465: LIST
55466: PUSH
55467: EMPTY
55468: LIST
55469: LIST
55470: LIST
55471: LIST
55472: LIST
55473: LIST
55474: LIST
55475: LIST
55476: LIST
55477: LIST
55478: LIST
55479: LIST
55480: LIST
55481: LIST
55482: LIST
55483: LIST
55484: LIST
55485: LIST
55486: LIST
55487: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55488: LD_ADDR_VAR 0 55
55492: PUSH
55493: LD_INT 0
55495: PUSH
55496: LD_INT 0
55498: PUSH
55499: EMPTY
55500: LIST
55501: LIST
55502: PUSH
55503: LD_INT 0
55505: PUSH
55506: LD_INT 1
55508: NEG
55509: PUSH
55510: EMPTY
55511: LIST
55512: LIST
55513: PUSH
55514: LD_INT 1
55516: PUSH
55517: LD_INT 0
55519: PUSH
55520: EMPTY
55521: LIST
55522: LIST
55523: PUSH
55524: LD_INT 1
55526: PUSH
55527: LD_INT 1
55529: PUSH
55530: EMPTY
55531: LIST
55532: LIST
55533: PUSH
55534: LD_INT 0
55536: PUSH
55537: LD_INT 1
55539: PUSH
55540: EMPTY
55541: LIST
55542: LIST
55543: PUSH
55544: LD_INT 1
55546: NEG
55547: PUSH
55548: LD_INT 0
55550: PUSH
55551: EMPTY
55552: LIST
55553: LIST
55554: PUSH
55555: LD_INT 1
55557: NEG
55558: PUSH
55559: LD_INT 1
55561: NEG
55562: PUSH
55563: EMPTY
55564: LIST
55565: LIST
55566: PUSH
55567: LD_INT 1
55569: NEG
55570: PUSH
55571: LD_INT 2
55573: NEG
55574: PUSH
55575: EMPTY
55576: LIST
55577: LIST
55578: PUSH
55579: LD_INT 0
55581: PUSH
55582: LD_INT 2
55584: NEG
55585: PUSH
55586: EMPTY
55587: LIST
55588: LIST
55589: PUSH
55590: LD_INT 1
55592: PUSH
55593: LD_INT 1
55595: NEG
55596: PUSH
55597: EMPTY
55598: LIST
55599: LIST
55600: PUSH
55601: LD_INT 2
55603: PUSH
55604: LD_INT 0
55606: PUSH
55607: EMPTY
55608: LIST
55609: LIST
55610: PUSH
55611: LD_INT 2
55613: PUSH
55614: LD_INT 1
55616: PUSH
55617: EMPTY
55618: LIST
55619: LIST
55620: PUSH
55621: LD_INT 2
55623: PUSH
55624: LD_INT 2
55626: PUSH
55627: EMPTY
55628: LIST
55629: LIST
55630: PUSH
55631: LD_INT 1
55633: PUSH
55634: LD_INT 2
55636: PUSH
55637: EMPTY
55638: LIST
55639: LIST
55640: PUSH
55641: LD_INT 0
55643: PUSH
55644: LD_INT 2
55646: PUSH
55647: EMPTY
55648: LIST
55649: LIST
55650: PUSH
55651: LD_INT 1
55653: NEG
55654: PUSH
55655: LD_INT 1
55657: PUSH
55658: EMPTY
55659: LIST
55660: LIST
55661: PUSH
55662: LD_INT 2
55664: NEG
55665: PUSH
55666: LD_INT 0
55668: PUSH
55669: EMPTY
55670: LIST
55671: LIST
55672: PUSH
55673: LD_INT 2
55675: NEG
55676: PUSH
55677: LD_INT 1
55679: NEG
55680: PUSH
55681: EMPTY
55682: LIST
55683: LIST
55684: PUSH
55685: LD_INT 2
55687: NEG
55688: PUSH
55689: LD_INT 2
55691: NEG
55692: PUSH
55693: EMPTY
55694: LIST
55695: LIST
55696: PUSH
55697: EMPTY
55698: LIST
55699: LIST
55700: LIST
55701: LIST
55702: LIST
55703: LIST
55704: LIST
55705: LIST
55706: LIST
55707: LIST
55708: LIST
55709: LIST
55710: LIST
55711: LIST
55712: LIST
55713: LIST
55714: LIST
55715: LIST
55716: LIST
55717: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55718: LD_ADDR_VAR 0 56
55722: PUSH
55723: LD_INT 0
55725: PUSH
55726: LD_INT 0
55728: PUSH
55729: EMPTY
55730: LIST
55731: LIST
55732: PUSH
55733: LD_INT 0
55735: PUSH
55736: LD_INT 1
55738: NEG
55739: PUSH
55740: EMPTY
55741: LIST
55742: LIST
55743: PUSH
55744: LD_INT 1
55746: PUSH
55747: LD_INT 0
55749: PUSH
55750: EMPTY
55751: LIST
55752: LIST
55753: PUSH
55754: LD_INT 1
55756: PUSH
55757: LD_INT 1
55759: PUSH
55760: EMPTY
55761: LIST
55762: LIST
55763: PUSH
55764: LD_INT 0
55766: PUSH
55767: LD_INT 1
55769: PUSH
55770: EMPTY
55771: LIST
55772: LIST
55773: PUSH
55774: LD_INT 1
55776: NEG
55777: PUSH
55778: LD_INT 0
55780: PUSH
55781: EMPTY
55782: LIST
55783: LIST
55784: PUSH
55785: LD_INT 1
55787: NEG
55788: PUSH
55789: LD_INT 1
55791: NEG
55792: PUSH
55793: EMPTY
55794: LIST
55795: LIST
55796: PUSH
55797: LD_INT 1
55799: NEG
55800: PUSH
55801: LD_INT 2
55803: NEG
55804: PUSH
55805: EMPTY
55806: LIST
55807: LIST
55808: PUSH
55809: LD_INT 0
55811: PUSH
55812: LD_INT 2
55814: NEG
55815: PUSH
55816: EMPTY
55817: LIST
55818: LIST
55819: PUSH
55820: LD_INT 1
55822: PUSH
55823: LD_INT 1
55825: NEG
55826: PUSH
55827: EMPTY
55828: LIST
55829: LIST
55830: PUSH
55831: LD_INT 2
55833: PUSH
55834: LD_INT 0
55836: PUSH
55837: EMPTY
55838: LIST
55839: LIST
55840: PUSH
55841: LD_INT 2
55843: PUSH
55844: LD_INT 1
55846: PUSH
55847: EMPTY
55848: LIST
55849: LIST
55850: PUSH
55851: LD_INT 2
55853: PUSH
55854: LD_INT 2
55856: PUSH
55857: EMPTY
55858: LIST
55859: LIST
55860: PUSH
55861: LD_INT 1
55863: PUSH
55864: LD_INT 2
55866: PUSH
55867: EMPTY
55868: LIST
55869: LIST
55870: PUSH
55871: LD_INT 0
55873: PUSH
55874: LD_INT 2
55876: PUSH
55877: EMPTY
55878: LIST
55879: LIST
55880: PUSH
55881: LD_INT 1
55883: NEG
55884: PUSH
55885: LD_INT 1
55887: PUSH
55888: EMPTY
55889: LIST
55890: LIST
55891: PUSH
55892: LD_INT 2
55894: NEG
55895: PUSH
55896: LD_INT 0
55898: PUSH
55899: EMPTY
55900: LIST
55901: LIST
55902: PUSH
55903: LD_INT 2
55905: NEG
55906: PUSH
55907: LD_INT 1
55909: NEG
55910: PUSH
55911: EMPTY
55912: LIST
55913: LIST
55914: PUSH
55915: LD_INT 2
55917: NEG
55918: PUSH
55919: LD_INT 2
55921: NEG
55922: PUSH
55923: EMPTY
55924: LIST
55925: LIST
55926: PUSH
55927: EMPTY
55928: LIST
55929: LIST
55930: LIST
55931: LIST
55932: LIST
55933: LIST
55934: LIST
55935: LIST
55936: LIST
55937: LIST
55938: LIST
55939: LIST
55940: LIST
55941: LIST
55942: LIST
55943: LIST
55944: LIST
55945: LIST
55946: LIST
55947: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55948: LD_ADDR_VAR 0 57
55952: PUSH
55953: LD_INT 0
55955: PUSH
55956: LD_INT 0
55958: PUSH
55959: EMPTY
55960: LIST
55961: LIST
55962: PUSH
55963: LD_INT 0
55965: PUSH
55966: LD_INT 1
55968: NEG
55969: PUSH
55970: EMPTY
55971: LIST
55972: LIST
55973: PUSH
55974: LD_INT 1
55976: PUSH
55977: LD_INT 0
55979: PUSH
55980: EMPTY
55981: LIST
55982: LIST
55983: PUSH
55984: LD_INT 1
55986: PUSH
55987: LD_INT 1
55989: PUSH
55990: EMPTY
55991: LIST
55992: LIST
55993: PUSH
55994: LD_INT 0
55996: PUSH
55997: LD_INT 1
55999: PUSH
56000: EMPTY
56001: LIST
56002: LIST
56003: PUSH
56004: LD_INT 1
56006: NEG
56007: PUSH
56008: LD_INT 0
56010: PUSH
56011: EMPTY
56012: LIST
56013: LIST
56014: PUSH
56015: LD_INT 1
56017: NEG
56018: PUSH
56019: LD_INT 1
56021: NEG
56022: PUSH
56023: EMPTY
56024: LIST
56025: LIST
56026: PUSH
56027: LD_INT 1
56029: NEG
56030: PUSH
56031: LD_INT 2
56033: NEG
56034: PUSH
56035: EMPTY
56036: LIST
56037: LIST
56038: PUSH
56039: LD_INT 0
56041: PUSH
56042: LD_INT 2
56044: NEG
56045: PUSH
56046: EMPTY
56047: LIST
56048: LIST
56049: PUSH
56050: LD_INT 1
56052: PUSH
56053: LD_INT 1
56055: NEG
56056: PUSH
56057: EMPTY
56058: LIST
56059: LIST
56060: PUSH
56061: LD_INT 2
56063: PUSH
56064: LD_INT 0
56066: PUSH
56067: EMPTY
56068: LIST
56069: LIST
56070: PUSH
56071: LD_INT 2
56073: PUSH
56074: LD_INT 1
56076: PUSH
56077: EMPTY
56078: LIST
56079: LIST
56080: PUSH
56081: LD_INT 2
56083: PUSH
56084: LD_INT 2
56086: PUSH
56087: EMPTY
56088: LIST
56089: LIST
56090: PUSH
56091: LD_INT 1
56093: PUSH
56094: LD_INT 2
56096: PUSH
56097: EMPTY
56098: LIST
56099: LIST
56100: PUSH
56101: LD_INT 0
56103: PUSH
56104: LD_INT 2
56106: PUSH
56107: EMPTY
56108: LIST
56109: LIST
56110: PUSH
56111: LD_INT 1
56113: NEG
56114: PUSH
56115: LD_INT 1
56117: PUSH
56118: EMPTY
56119: LIST
56120: LIST
56121: PUSH
56122: LD_INT 2
56124: NEG
56125: PUSH
56126: LD_INT 0
56128: PUSH
56129: EMPTY
56130: LIST
56131: LIST
56132: PUSH
56133: LD_INT 2
56135: NEG
56136: PUSH
56137: LD_INT 1
56139: NEG
56140: PUSH
56141: EMPTY
56142: LIST
56143: LIST
56144: PUSH
56145: LD_INT 2
56147: NEG
56148: PUSH
56149: LD_INT 2
56151: NEG
56152: PUSH
56153: EMPTY
56154: LIST
56155: LIST
56156: PUSH
56157: EMPTY
56158: LIST
56159: LIST
56160: LIST
56161: LIST
56162: LIST
56163: LIST
56164: LIST
56165: LIST
56166: LIST
56167: LIST
56168: LIST
56169: LIST
56170: LIST
56171: LIST
56172: LIST
56173: LIST
56174: LIST
56175: LIST
56176: LIST
56177: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56178: LD_ADDR_VAR 0 58
56182: PUSH
56183: LD_INT 0
56185: PUSH
56186: LD_INT 0
56188: PUSH
56189: EMPTY
56190: LIST
56191: LIST
56192: PUSH
56193: LD_INT 0
56195: PUSH
56196: LD_INT 1
56198: NEG
56199: PUSH
56200: EMPTY
56201: LIST
56202: LIST
56203: PUSH
56204: LD_INT 1
56206: PUSH
56207: LD_INT 0
56209: PUSH
56210: EMPTY
56211: LIST
56212: LIST
56213: PUSH
56214: LD_INT 1
56216: PUSH
56217: LD_INT 1
56219: PUSH
56220: EMPTY
56221: LIST
56222: LIST
56223: PUSH
56224: LD_INT 0
56226: PUSH
56227: LD_INT 1
56229: PUSH
56230: EMPTY
56231: LIST
56232: LIST
56233: PUSH
56234: LD_INT 1
56236: NEG
56237: PUSH
56238: LD_INT 0
56240: PUSH
56241: EMPTY
56242: LIST
56243: LIST
56244: PUSH
56245: LD_INT 1
56247: NEG
56248: PUSH
56249: LD_INT 1
56251: NEG
56252: PUSH
56253: EMPTY
56254: LIST
56255: LIST
56256: PUSH
56257: LD_INT 1
56259: NEG
56260: PUSH
56261: LD_INT 2
56263: NEG
56264: PUSH
56265: EMPTY
56266: LIST
56267: LIST
56268: PUSH
56269: LD_INT 0
56271: PUSH
56272: LD_INT 2
56274: NEG
56275: PUSH
56276: EMPTY
56277: LIST
56278: LIST
56279: PUSH
56280: LD_INT 1
56282: PUSH
56283: LD_INT 1
56285: NEG
56286: PUSH
56287: EMPTY
56288: LIST
56289: LIST
56290: PUSH
56291: LD_INT 2
56293: PUSH
56294: LD_INT 0
56296: PUSH
56297: EMPTY
56298: LIST
56299: LIST
56300: PUSH
56301: LD_INT 2
56303: PUSH
56304: LD_INT 1
56306: PUSH
56307: EMPTY
56308: LIST
56309: LIST
56310: PUSH
56311: LD_INT 2
56313: PUSH
56314: LD_INT 2
56316: PUSH
56317: EMPTY
56318: LIST
56319: LIST
56320: PUSH
56321: LD_INT 1
56323: PUSH
56324: LD_INT 2
56326: PUSH
56327: EMPTY
56328: LIST
56329: LIST
56330: PUSH
56331: LD_INT 0
56333: PUSH
56334: LD_INT 2
56336: PUSH
56337: EMPTY
56338: LIST
56339: LIST
56340: PUSH
56341: LD_INT 1
56343: NEG
56344: PUSH
56345: LD_INT 1
56347: PUSH
56348: EMPTY
56349: LIST
56350: LIST
56351: PUSH
56352: LD_INT 2
56354: NEG
56355: PUSH
56356: LD_INT 0
56358: PUSH
56359: EMPTY
56360: LIST
56361: LIST
56362: PUSH
56363: LD_INT 2
56365: NEG
56366: PUSH
56367: LD_INT 1
56369: NEG
56370: PUSH
56371: EMPTY
56372: LIST
56373: LIST
56374: PUSH
56375: LD_INT 2
56377: NEG
56378: PUSH
56379: LD_INT 2
56381: NEG
56382: PUSH
56383: EMPTY
56384: LIST
56385: LIST
56386: PUSH
56387: EMPTY
56388: LIST
56389: LIST
56390: LIST
56391: LIST
56392: LIST
56393: LIST
56394: LIST
56395: LIST
56396: LIST
56397: LIST
56398: LIST
56399: LIST
56400: LIST
56401: LIST
56402: LIST
56403: LIST
56404: LIST
56405: LIST
56406: LIST
56407: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56408: LD_ADDR_VAR 0 59
56412: PUSH
56413: LD_INT 0
56415: PUSH
56416: LD_INT 0
56418: PUSH
56419: EMPTY
56420: LIST
56421: LIST
56422: PUSH
56423: LD_INT 0
56425: PUSH
56426: LD_INT 1
56428: NEG
56429: PUSH
56430: EMPTY
56431: LIST
56432: LIST
56433: PUSH
56434: LD_INT 1
56436: PUSH
56437: LD_INT 0
56439: PUSH
56440: EMPTY
56441: LIST
56442: LIST
56443: PUSH
56444: LD_INT 1
56446: PUSH
56447: LD_INT 1
56449: PUSH
56450: EMPTY
56451: LIST
56452: LIST
56453: PUSH
56454: LD_INT 0
56456: PUSH
56457: LD_INT 1
56459: PUSH
56460: EMPTY
56461: LIST
56462: LIST
56463: PUSH
56464: LD_INT 1
56466: NEG
56467: PUSH
56468: LD_INT 0
56470: PUSH
56471: EMPTY
56472: LIST
56473: LIST
56474: PUSH
56475: LD_INT 1
56477: NEG
56478: PUSH
56479: LD_INT 1
56481: NEG
56482: PUSH
56483: EMPTY
56484: LIST
56485: LIST
56486: PUSH
56487: EMPTY
56488: LIST
56489: LIST
56490: LIST
56491: LIST
56492: LIST
56493: LIST
56494: LIST
56495: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56496: LD_ADDR_VAR 0 60
56500: PUSH
56501: LD_INT 0
56503: PUSH
56504: LD_INT 0
56506: PUSH
56507: EMPTY
56508: LIST
56509: LIST
56510: PUSH
56511: LD_INT 0
56513: PUSH
56514: LD_INT 1
56516: NEG
56517: PUSH
56518: EMPTY
56519: LIST
56520: LIST
56521: PUSH
56522: LD_INT 1
56524: PUSH
56525: LD_INT 0
56527: PUSH
56528: EMPTY
56529: LIST
56530: LIST
56531: PUSH
56532: LD_INT 1
56534: PUSH
56535: LD_INT 1
56537: PUSH
56538: EMPTY
56539: LIST
56540: LIST
56541: PUSH
56542: LD_INT 0
56544: PUSH
56545: LD_INT 1
56547: PUSH
56548: EMPTY
56549: LIST
56550: LIST
56551: PUSH
56552: LD_INT 1
56554: NEG
56555: PUSH
56556: LD_INT 0
56558: PUSH
56559: EMPTY
56560: LIST
56561: LIST
56562: PUSH
56563: LD_INT 1
56565: NEG
56566: PUSH
56567: LD_INT 1
56569: NEG
56570: PUSH
56571: EMPTY
56572: LIST
56573: LIST
56574: PUSH
56575: EMPTY
56576: LIST
56577: LIST
56578: LIST
56579: LIST
56580: LIST
56581: LIST
56582: LIST
56583: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56584: LD_ADDR_VAR 0 61
56588: PUSH
56589: LD_INT 0
56591: PUSH
56592: LD_INT 0
56594: PUSH
56595: EMPTY
56596: LIST
56597: LIST
56598: PUSH
56599: LD_INT 0
56601: PUSH
56602: LD_INT 1
56604: NEG
56605: PUSH
56606: EMPTY
56607: LIST
56608: LIST
56609: PUSH
56610: LD_INT 1
56612: PUSH
56613: LD_INT 0
56615: PUSH
56616: EMPTY
56617: LIST
56618: LIST
56619: PUSH
56620: LD_INT 1
56622: PUSH
56623: LD_INT 1
56625: PUSH
56626: EMPTY
56627: LIST
56628: LIST
56629: PUSH
56630: LD_INT 0
56632: PUSH
56633: LD_INT 1
56635: PUSH
56636: EMPTY
56637: LIST
56638: LIST
56639: PUSH
56640: LD_INT 1
56642: NEG
56643: PUSH
56644: LD_INT 0
56646: PUSH
56647: EMPTY
56648: LIST
56649: LIST
56650: PUSH
56651: LD_INT 1
56653: NEG
56654: PUSH
56655: LD_INT 1
56657: NEG
56658: PUSH
56659: EMPTY
56660: LIST
56661: LIST
56662: PUSH
56663: EMPTY
56664: LIST
56665: LIST
56666: LIST
56667: LIST
56668: LIST
56669: LIST
56670: LIST
56671: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56672: LD_ADDR_VAR 0 62
56676: PUSH
56677: LD_INT 0
56679: PUSH
56680: LD_INT 0
56682: PUSH
56683: EMPTY
56684: LIST
56685: LIST
56686: PUSH
56687: LD_INT 0
56689: PUSH
56690: LD_INT 1
56692: NEG
56693: PUSH
56694: EMPTY
56695: LIST
56696: LIST
56697: PUSH
56698: LD_INT 1
56700: PUSH
56701: LD_INT 0
56703: PUSH
56704: EMPTY
56705: LIST
56706: LIST
56707: PUSH
56708: LD_INT 1
56710: PUSH
56711: LD_INT 1
56713: PUSH
56714: EMPTY
56715: LIST
56716: LIST
56717: PUSH
56718: LD_INT 0
56720: PUSH
56721: LD_INT 1
56723: PUSH
56724: EMPTY
56725: LIST
56726: LIST
56727: PUSH
56728: LD_INT 1
56730: NEG
56731: PUSH
56732: LD_INT 0
56734: PUSH
56735: EMPTY
56736: LIST
56737: LIST
56738: PUSH
56739: LD_INT 1
56741: NEG
56742: PUSH
56743: LD_INT 1
56745: NEG
56746: PUSH
56747: EMPTY
56748: LIST
56749: LIST
56750: PUSH
56751: EMPTY
56752: LIST
56753: LIST
56754: LIST
56755: LIST
56756: LIST
56757: LIST
56758: LIST
56759: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56760: LD_ADDR_VAR 0 63
56764: PUSH
56765: LD_INT 0
56767: PUSH
56768: LD_INT 0
56770: PUSH
56771: EMPTY
56772: LIST
56773: LIST
56774: PUSH
56775: LD_INT 0
56777: PUSH
56778: LD_INT 1
56780: NEG
56781: PUSH
56782: EMPTY
56783: LIST
56784: LIST
56785: PUSH
56786: LD_INT 1
56788: PUSH
56789: LD_INT 0
56791: PUSH
56792: EMPTY
56793: LIST
56794: LIST
56795: PUSH
56796: LD_INT 1
56798: PUSH
56799: LD_INT 1
56801: PUSH
56802: EMPTY
56803: LIST
56804: LIST
56805: PUSH
56806: LD_INT 0
56808: PUSH
56809: LD_INT 1
56811: PUSH
56812: EMPTY
56813: LIST
56814: LIST
56815: PUSH
56816: LD_INT 1
56818: NEG
56819: PUSH
56820: LD_INT 0
56822: PUSH
56823: EMPTY
56824: LIST
56825: LIST
56826: PUSH
56827: LD_INT 1
56829: NEG
56830: PUSH
56831: LD_INT 1
56833: NEG
56834: PUSH
56835: EMPTY
56836: LIST
56837: LIST
56838: PUSH
56839: EMPTY
56840: LIST
56841: LIST
56842: LIST
56843: LIST
56844: LIST
56845: LIST
56846: LIST
56847: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56848: LD_ADDR_VAR 0 64
56852: PUSH
56853: LD_INT 0
56855: PUSH
56856: LD_INT 0
56858: PUSH
56859: EMPTY
56860: LIST
56861: LIST
56862: PUSH
56863: LD_INT 0
56865: PUSH
56866: LD_INT 1
56868: NEG
56869: PUSH
56870: EMPTY
56871: LIST
56872: LIST
56873: PUSH
56874: LD_INT 1
56876: PUSH
56877: LD_INT 0
56879: PUSH
56880: EMPTY
56881: LIST
56882: LIST
56883: PUSH
56884: LD_INT 1
56886: PUSH
56887: LD_INT 1
56889: PUSH
56890: EMPTY
56891: LIST
56892: LIST
56893: PUSH
56894: LD_INT 0
56896: PUSH
56897: LD_INT 1
56899: PUSH
56900: EMPTY
56901: LIST
56902: LIST
56903: PUSH
56904: LD_INT 1
56906: NEG
56907: PUSH
56908: LD_INT 0
56910: PUSH
56911: EMPTY
56912: LIST
56913: LIST
56914: PUSH
56915: LD_INT 1
56917: NEG
56918: PUSH
56919: LD_INT 1
56921: NEG
56922: PUSH
56923: EMPTY
56924: LIST
56925: LIST
56926: PUSH
56927: EMPTY
56928: LIST
56929: LIST
56930: LIST
56931: LIST
56932: LIST
56933: LIST
56934: LIST
56935: ST_TO_ADDR
// end ; 1 :
56936: GO 62833
56938: LD_INT 1
56940: DOUBLE
56941: EQUAL
56942: IFTRUE 56946
56944: GO 59569
56946: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56947: LD_ADDR_VAR 0 11
56951: PUSH
56952: LD_INT 1
56954: NEG
56955: PUSH
56956: LD_INT 3
56958: NEG
56959: PUSH
56960: EMPTY
56961: LIST
56962: LIST
56963: PUSH
56964: LD_INT 0
56966: PUSH
56967: LD_INT 3
56969: NEG
56970: PUSH
56971: EMPTY
56972: LIST
56973: LIST
56974: PUSH
56975: LD_INT 1
56977: PUSH
56978: LD_INT 2
56980: NEG
56981: PUSH
56982: EMPTY
56983: LIST
56984: LIST
56985: PUSH
56986: EMPTY
56987: LIST
56988: LIST
56989: LIST
56990: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56991: LD_ADDR_VAR 0 12
56995: PUSH
56996: LD_INT 2
56998: PUSH
56999: LD_INT 1
57001: NEG
57002: PUSH
57003: EMPTY
57004: LIST
57005: LIST
57006: PUSH
57007: LD_INT 3
57009: PUSH
57010: LD_INT 0
57012: PUSH
57013: EMPTY
57014: LIST
57015: LIST
57016: PUSH
57017: LD_INT 3
57019: PUSH
57020: LD_INT 1
57022: PUSH
57023: EMPTY
57024: LIST
57025: LIST
57026: PUSH
57027: EMPTY
57028: LIST
57029: LIST
57030: LIST
57031: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
57032: LD_ADDR_VAR 0 13
57036: PUSH
57037: LD_INT 3
57039: PUSH
57040: LD_INT 2
57042: PUSH
57043: EMPTY
57044: LIST
57045: LIST
57046: PUSH
57047: LD_INT 3
57049: PUSH
57050: LD_INT 3
57052: PUSH
57053: EMPTY
57054: LIST
57055: LIST
57056: PUSH
57057: LD_INT 2
57059: PUSH
57060: LD_INT 3
57062: PUSH
57063: EMPTY
57064: LIST
57065: LIST
57066: PUSH
57067: EMPTY
57068: LIST
57069: LIST
57070: LIST
57071: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
57072: LD_ADDR_VAR 0 14
57076: PUSH
57077: LD_INT 1
57079: PUSH
57080: LD_INT 3
57082: PUSH
57083: EMPTY
57084: LIST
57085: LIST
57086: PUSH
57087: LD_INT 0
57089: PUSH
57090: LD_INT 3
57092: PUSH
57093: EMPTY
57094: LIST
57095: LIST
57096: PUSH
57097: LD_INT 1
57099: NEG
57100: PUSH
57101: LD_INT 2
57103: PUSH
57104: EMPTY
57105: LIST
57106: LIST
57107: PUSH
57108: EMPTY
57109: LIST
57110: LIST
57111: LIST
57112: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57113: LD_ADDR_VAR 0 15
57117: PUSH
57118: LD_INT 2
57120: NEG
57121: PUSH
57122: LD_INT 1
57124: PUSH
57125: EMPTY
57126: LIST
57127: LIST
57128: PUSH
57129: LD_INT 3
57131: NEG
57132: PUSH
57133: LD_INT 0
57135: PUSH
57136: EMPTY
57137: LIST
57138: LIST
57139: PUSH
57140: LD_INT 3
57142: NEG
57143: PUSH
57144: LD_INT 1
57146: NEG
57147: PUSH
57148: EMPTY
57149: LIST
57150: LIST
57151: PUSH
57152: EMPTY
57153: LIST
57154: LIST
57155: LIST
57156: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57157: LD_ADDR_VAR 0 16
57161: PUSH
57162: LD_INT 2
57164: NEG
57165: PUSH
57166: LD_INT 3
57168: NEG
57169: PUSH
57170: EMPTY
57171: LIST
57172: LIST
57173: PUSH
57174: LD_INT 3
57176: NEG
57177: PUSH
57178: LD_INT 2
57180: NEG
57181: PUSH
57182: EMPTY
57183: LIST
57184: LIST
57185: PUSH
57186: LD_INT 3
57188: NEG
57189: PUSH
57190: LD_INT 3
57192: NEG
57193: PUSH
57194: EMPTY
57195: LIST
57196: LIST
57197: PUSH
57198: EMPTY
57199: LIST
57200: LIST
57201: LIST
57202: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
57203: LD_ADDR_VAR 0 17
57207: PUSH
57208: LD_INT 1
57210: NEG
57211: PUSH
57212: LD_INT 3
57214: NEG
57215: PUSH
57216: EMPTY
57217: LIST
57218: LIST
57219: PUSH
57220: LD_INT 0
57222: PUSH
57223: LD_INT 3
57225: NEG
57226: PUSH
57227: EMPTY
57228: LIST
57229: LIST
57230: PUSH
57231: LD_INT 1
57233: PUSH
57234: LD_INT 2
57236: NEG
57237: PUSH
57238: EMPTY
57239: LIST
57240: LIST
57241: PUSH
57242: EMPTY
57243: LIST
57244: LIST
57245: LIST
57246: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
57247: LD_ADDR_VAR 0 18
57251: PUSH
57252: LD_INT 2
57254: PUSH
57255: LD_INT 1
57257: NEG
57258: PUSH
57259: EMPTY
57260: LIST
57261: LIST
57262: PUSH
57263: LD_INT 3
57265: PUSH
57266: LD_INT 0
57268: PUSH
57269: EMPTY
57270: LIST
57271: LIST
57272: PUSH
57273: LD_INT 3
57275: PUSH
57276: LD_INT 1
57278: PUSH
57279: EMPTY
57280: LIST
57281: LIST
57282: PUSH
57283: EMPTY
57284: LIST
57285: LIST
57286: LIST
57287: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
57288: LD_ADDR_VAR 0 19
57292: PUSH
57293: LD_INT 3
57295: PUSH
57296: LD_INT 2
57298: PUSH
57299: EMPTY
57300: LIST
57301: LIST
57302: PUSH
57303: LD_INT 3
57305: PUSH
57306: LD_INT 3
57308: PUSH
57309: EMPTY
57310: LIST
57311: LIST
57312: PUSH
57313: LD_INT 2
57315: PUSH
57316: LD_INT 3
57318: PUSH
57319: EMPTY
57320: LIST
57321: LIST
57322: PUSH
57323: EMPTY
57324: LIST
57325: LIST
57326: LIST
57327: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
57328: LD_ADDR_VAR 0 20
57332: PUSH
57333: LD_INT 1
57335: PUSH
57336: LD_INT 3
57338: PUSH
57339: EMPTY
57340: LIST
57341: LIST
57342: PUSH
57343: LD_INT 0
57345: PUSH
57346: LD_INT 3
57348: PUSH
57349: EMPTY
57350: LIST
57351: LIST
57352: PUSH
57353: LD_INT 1
57355: NEG
57356: PUSH
57357: LD_INT 2
57359: PUSH
57360: EMPTY
57361: LIST
57362: LIST
57363: PUSH
57364: EMPTY
57365: LIST
57366: LIST
57367: LIST
57368: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57369: LD_ADDR_VAR 0 21
57373: PUSH
57374: LD_INT 2
57376: NEG
57377: PUSH
57378: LD_INT 1
57380: PUSH
57381: EMPTY
57382: LIST
57383: LIST
57384: PUSH
57385: LD_INT 3
57387: NEG
57388: PUSH
57389: LD_INT 0
57391: PUSH
57392: EMPTY
57393: LIST
57394: LIST
57395: PUSH
57396: LD_INT 3
57398: NEG
57399: PUSH
57400: LD_INT 1
57402: NEG
57403: PUSH
57404: EMPTY
57405: LIST
57406: LIST
57407: PUSH
57408: EMPTY
57409: LIST
57410: LIST
57411: LIST
57412: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57413: LD_ADDR_VAR 0 22
57417: PUSH
57418: LD_INT 2
57420: NEG
57421: PUSH
57422: LD_INT 3
57424: NEG
57425: PUSH
57426: EMPTY
57427: LIST
57428: LIST
57429: PUSH
57430: LD_INT 3
57432: NEG
57433: PUSH
57434: LD_INT 2
57436: NEG
57437: PUSH
57438: EMPTY
57439: LIST
57440: LIST
57441: PUSH
57442: LD_INT 3
57444: NEG
57445: PUSH
57446: LD_INT 3
57448: NEG
57449: PUSH
57450: EMPTY
57451: LIST
57452: LIST
57453: PUSH
57454: EMPTY
57455: LIST
57456: LIST
57457: LIST
57458: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
57459: LD_ADDR_VAR 0 23
57463: PUSH
57464: LD_INT 0
57466: PUSH
57467: LD_INT 3
57469: NEG
57470: PUSH
57471: EMPTY
57472: LIST
57473: LIST
57474: PUSH
57475: LD_INT 1
57477: NEG
57478: PUSH
57479: LD_INT 4
57481: NEG
57482: PUSH
57483: EMPTY
57484: LIST
57485: LIST
57486: PUSH
57487: LD_INT 1
57489: PUSH
57490: LD_INT 3
57492: NEG
57493: PUSH
57494: EMPTY
57495: LIST
57496: LIST
57497: PUSH
57498: EMPTY
57499: LIST
57500: LIST
57501: LIST
57502: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
57503: LD_ADDR_VAR 0 24
57507: PUSH
57508: LD_INT 3
57510: PUSH
57511: LD_INT 0
57513: PUSH
57514: EMPTY
57515: LIST
57516: LIST
57517: PUSH
57518: LD_INT 3
57520: PUSH
57521: LD_INT 1
57523: NEG
57524: PUSH
57525: EMPTY
57526: LIST
57527: LIST
57528: PUSH
57529: LD_INT 4
57531: PUSH
57532: LD_INT 1
57534: PUSH
57535: EMPTY
57536: LIST
57537: LIST
57538: PUSH
57539: EMPTY
57540: LIST
57541: LIST
57542: LIST
57543: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
57544: LD_ADDR_VAR 0 25
57548: PUSH
57549: LD_INT 3
57551: PUSH
57552: LD_INT 3
57554: PUSH
57555: EMPTY
57556: LIST
57557: LIST
57558: PUSH
57559: LD_INT 4
57561: PUSH
57562: LD_INT 3
57564: PUSH
57565: EMPTY
57566: LIST
57567: LIST
57568: PUSH
57569: LD_INT 3
57571: PUSH
57572: LD_INT 4
57574: PUSH
57575: EMPTY
57576: LIST
57577: LIST
57578: PUSH
57579: EMPTY
57580: LIST
57581: LIST
57582: LIST
57583: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
57584: LD_ADDR_VAR 0 26
57588: PUSH
57589: LD_INT 0
57591: PUSH
57592: LD_INT 3
57594: PUSH
57595: EMPTY
57596: LIST
57597: LIST
57598: PUSH
57599: LD_INT 1
57601: PUSH
57602: LD_INT 4
57604: PUSH
57605: EMPTY
57606: LIST
57607: LIST
57608: PUSH
57609: LD_INT 1
57611: NEG
57612: PUSH
57613: LD_INT 3
57615: PUSH
57616: EMPTY
57617: LIST
57618: LIST
57619: PUSH
57620: EMPTY
57621: LIST
57622: LIST
57623: LIST
57624: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
57625: LD_ADDR_VAR 0 27
57629: PUSH
57630: LD_INT 3
57632: NEG
57633: PUSH
57634: LD_INT 0
57636: PUSH
57637: EMPTY
57638: LIST
57639: LIST
57640: PUSH
57641: LD_INT 3
57643: NEG
57644: PUSH
57645: LD_INT 1
57647: PUSH
57648: EMPTY
57649: LIST
57650: LIST
57651: PUSH
57652: LD_INT 4
57654: NEG
57655: PUSH
57656: LD_INT 1
57658: NEG
57659: PUSH
57660: EMPTY
57661: LIST
57662: LIST
57663: PUSH
57664: EMPTY
57665: LIST
57666: LIST
57667: LIST
57668: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
57669: LD_ADDR_VAR 0 28
57673: PUSH
57674: LD_INT 3
57676: NEG
57677: PUSH
57678: LD_INT 3
57680: NEG
57681: PUSH
57682: EMPTY
57683: LIST
57684: LIST
57685: PUSH
57686: LD_INT 3
57688: NEG
57689: PUSH
57690: LD_INT 4
57692: NEG
57693: PUSH
57694: EMPTY
57695: LIST
57696: LIST
57697: PUSH
57698: LD_INT 4
57700: NEG
57701: PUSH
57702: LD_INT 3
57704: NEG
57705: PUSH
57706: EMPTY
57707: LIST
57708: LIST
57709: PUSH
57710: EMPTY
57711: LIST
57712: LIST
57713: LIST
57714: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
57715: LD_ADDR_VAR 0 29
57719: PUSH
57720: LD_INT 1
57722: NEG
57723: PUSH
57724: LD_INT 3
57726: NEG
57727: PUSH
57728: EMPTY
57729: LIST
57730: LIST
57731: PUSH
57732: LD_INT 0
57734: PUSH
57735: LD_INT 3
57737: NEG
57738: PUSH
57739: EMPTY
57740: LIST
57741: LIST
57742: PUSH
57743: LD_INT 1
57745: PUSH
57746: LD_INT 2
57748: NEG
57749: PUSH
57750: EMPTY
57751: LIST
57752: LIST
57753: PUSH
57754: LD_INT 1
57756: NEG
57757: PUSH
57758: LD_INT 4
57760: NEG
57761: PUSH
57762: EMPTY
57763: LIST
57764: LIST
57765: PUSH
57766: LD_INT 0
57768: PUSH
57769: LD_INT 4
57771: NEG
57772: PUSH
57773: EMPTY
57774: LIST
57775: LIST
57776: PUSH
57777: LD_INT 1
57779: PUSH
57780: LD_INT 3
57782: NEG
57783: PUSH
57784: EMPTY
57785: LIST
57786: LIST
57787: PUSH
57788: LD_INT 1
57790: NEG
57791: PUSH
57792: LD_INT 5
57794: NEG
57795: PUSH
57796: EMPTY
57797: LIST
57798: LIST
57799: PUSH
57800: LD_INT 0
57802: PUSH
57803: LD_INT 5
57805: NEG
57806: PUSH
57807: EMPTY
57808: LIST
57809: LIST
57810: PUSH
57811: LD_INT 1
57813: PUSH
57814: LD_INT 4
57816: NEG
57817: PUSH
57818: EMPTY
57819: LIST
57820: LIST
57821: PUSH
57822: LD_INT 1
57824: NEG
57825: PUSH
57826: LD_INT 6
57828: NEG
57829: PUSH
57830: EMPTY
57831: LIST
57832: LIST
57833: PUSH
57834: LD_INT 0
57836: PUSH
57837: LD_INT 6
57839: NEG
57840: PUSH
57841: EMPTY
57842: LIST
57843: LIST
57844: PUSH
57845: LD_INT 1
57847: PUSH
57848: LD_INT 5
57850: NEG
57851: PUSH
57852: EMPTY
57853: LIST
57854: LIST
57855: PUSH
57856: EMPTY
57857: LIST
57858: LIST
57859: LIST
57860: LIST
57861: LIST
57862: LIST
57863: LIST
57864: LIST
57865: LIST
57866: LIST
57867: LIST
57868: LIST
57869: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
57870: LD_ADDR_VAR 0 30
57874: PUSH
57875: LD_INT 2
57877: PUSH
57878: LD_INT 1
57880: NEG
57881: PUSH
57882: EMPTY
57883: LIST
57884: LIST
57885: PUSH
57886: LD_INT 3
57888: PUSH
57889: LD_INT 0
57891: PUSH
57892: EMPTY
57893: LIST
57894: LIST
57895: PUSH
57896: LD_INT 3
57898: PUSH
57899: LD_INT 1
57901: PUSH
57902: EMPTY
57903: LIST
57904: LIST
57905: PUSH
57906: LD_INT 3
57908: PUSH
57909: LD_INT 1
57911: NEG
57912: PUSH
57913: EMPTY
57914: LIST
57915: LIST
57916: PUSH
57917: LD_INT 4
57919: PUSH
57920: LD_INT 0
57922: PUSH
57923: EMPTY
57924: LIST
57925: LIST
57926: PUSH
57927: LD_INT 4
57929: PUSH
57930: LD_INT 1
57932: PUSH
57933: EMPTY
57934: LIST
57935: LIST
57936: PUSH
57937: LD_INT 4
57939: PUSH
57940: LD_INT 1
57942: NEG
57943: PUSH
57944: EMPTY
57945: LIST
57946: LIST
57947: PUSH
57948: LD_INT 5
57950: PUSH
57951: LD_INT 0
57953: PUSH
57954: EMPTY
57955: LIST
57956: LIST
57957: PUSH
57958: LD_INT 5
57960: PUSH
57961: LD_INT 1
57963: PUSH
57964: EMPTY
57965: LIST
57966: LIST
57967: PUSH
57968: LD_INT 5
57970: PUSH
57971: LD_INT 1
57973: NEG
57974: PUSH
57975: EMPTY
57976: LIST
57977: LIST
57978: PUSH
57979: LD_INT 6
57981: PUSH
57982: LD_INT 0
57984: PUSH
57985: EMPTY
57986: LIST
57987: LIST
57988: PUSH
57989: LD_INT 6
57991: PUSH
57992: LD_INT 1
57994: PUSH
57995: EMPTY
57996: LIST
57997: LIST
57998: PUSH
57999: EMPTY
58000: LIST
58001: LIST
58002: LIST
58003: LIST
58004: LIST
58005: LIST
58006: LIST
58007: LIST
58008: LIST
58009: LIST
58010: LIST
58011: LIST
58012: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
58013: LD_ADDR_VAR 0 31
58017: PUSH
58018: LD_INT 3
58020: PUSH
58021: LD_INT 2
58023: PUSH
58024: EMPTY
58025: LIST
58026: LIST
58027: PUSH
58028: LD_INT 3
58030: PUSH
58031: LD_INT 3
58033: PUSH
58034: EMPTY
58035: LIST
58036: LIST
58037: PUSH
58038: LD_INT 2
58040: PUSH
58041: LD_INT 3
58043: PUSH
58044: EMPTY
58045: LIST
58046: LIST
58047: PUSH
58048: LD_INT 4
58050: PUSH
58051: LD_INT 3
58053: PUSH
58054: EMPTY
58055: LIST
58056: LIST
58057: PUSH
58058: LD_INT 4
58060: PUSH
58061: LD_INT 4
58063: PUSH
58064: EMPTY
58065: LIST
58066: LIST
58067: PUSH
58068: LD_INT 3
58070: PUSH
58071: LD_INT 4
58073: PUSH
58074: EMPTY
58075: LIST
58076: LIST
58077: PUSH
58078: LD_INT 5
58080: PUSH
58081: LD_INT 4
58083: PUSH
58084: EMPTY
58085: LIST
58086: LIST
58087: PUSH
58088: LD_INT 5
58090: PUSH
58091: LD_INT 5
58093: PUSH
58094: EMPTY
58095: LIST
58096: LIST
58097: PUSH
58098: LD_INT 4
58100: PUSH
58101: LD_INT 5
58103: PUSH
58104: EMPTY
58105: LIST
58106: LIST
58107: PUSH
58108: LD_INT 6
58110: PUSH
58111: LD_INT 5
58113: PUSH
58114: EMPTY
58115: LIST
58116: LIST
58117: PUSH
58118: LD_INT 6
58120: PUSH
58121: LD_INT 6
58123: PUSH
58124: EMPTY
58125: LIST
58126: LIST
58127: PUSH
58128: LD_INT 5
58130: PUSH
58131: LD_INT 6
58133: PUSH
58134: EMPTY
58135: LIST
58136: LIST
58137: PUSH
58138: EMPTY
58139: LIST
58140: LIST
58141: LIST
58142: LIST
58143: LIST
58144: LIST
58145: LIST
58146: LIST
58147: LIST
58148: LIST
58149: LIST
58150: LIST
58151: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
58152: LD_ADDR_VAR 0 32
58156: PUSH
58157: LD_INT 1
58159: PUSH
58160: LD_INT 3
58162: PUSH
58163: EMPTY
58164: LIST
58165: LIST
58166: PUSH
58167: LD_INT 0
58169: PUSH
58170: LD_INT 3
58172: PUSH
58173: EMPTY
58174: LIST
58175: LIST
58176: PUSH
58177: LD_INT 1
58179: NEG
58180: PUSH
58181: LD_INT 2
58183: PUSH
58184: EMPTY
58185: LIST
58186: LIST
58187: PUSH
58188: LD_INT 1
58190: PUSH
58191: LD_INT 4
58193: PUSH
58194: EMPTY
58195: LIST
58196: LIST
58197: PUSH
58198: LD_INT 0
58200: PUSH
58201: LD_INT 4
58203: PUSH
58204: EMPTY
58205: LIST
58206: LIST
58207: PUSH
58208: LD_INT 1
58210: NEG
58211: PUSH
58212: LD_INT 3
58214: PUSH
58215: EMPTY
58216: LIST
58217: LIST
58218: PUSH
58219: LD_INT 1
58221: PUSH
58222: LD_INT 5
58224: PUSH
58225: EMPTY
58226: LIST
58227: LIST
58228: PUSH
58229: LD_INT 0
58231: PUSH
58232: LD_INT 5
58234: PUSH
58235: EMPTY
58236: LIST
58237: LIST
58238: PUSH
58239: LD_INT 1
58241: NEG
58242: PUSH
58243: LD_INT 4
58245: PUSH
58246: EMPTY
58247: LIST
58248: LIST
58249: PUSH
58250: LD_INT 1
58252: PUSH
58253: LD_INT 6
58255: PUSH
58256: EMPTY
58257: LIST
58258: LIST
58259: PUSH
58260: LD_INT 0
58262: PUSH
58263: LD_INT 6
58265: PUSH
58266: EMPTY
58267: LIST
58268: LIST
58269: PUSH
58270: LD_INT 1
58272: NEG
58273: PUSH
58274: LD_INT 5
58276: PUSH
58277: EMPTY
58278: LIST
58279: LIST
58280: PUSH
58281: EMPTY
58282: LIST
58283: LIST
58284: LIST
58285: LIST
58286: LIST
58287: LIST
58288: LIST
58289: LIST
58290: LIST
58291: LIST
58292: LIST
58293: LIST
58294: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
58295: LD_ADDR_VAR 0 33
58299: PUSH
58300: LD_INT 2
58302: NEG
58303: PUSH
58304: LD_INT 1
58306: PUSH
58307: EMPTY
58308: LIST
58309: LIST
58310: PUSH
58311: LD_INT 3
58313: NEG
58314: PUSH
58315: LD_INT 0
58317: PUSH
58318: EMPTY
58319: LIST
58320: LIST
58321: PUSH
58322: LD_INT 3
58324: NEG
58325: PUSH
58326: LD_INT 1
58328: NEG
58329: PUSH
58330: EMPTY
58331: LIST
58332: LIST
58333: PUSH
58334: LD_INT 3
58336: NEG
58337: PUSH
58338: LD_INT 1
58340: PUSH
58341: EMPTY
58342: LIST
58343: LIST
58344: PUSH
58345: LD_INT 4
58347: NEG
58348: PUSH
58349: LD_INT 0
58351: PUSH
58352: EMPTY
58353: LIST
58354: LIST
58355: PUSH
58356: LD_INT 4
58358: NEG
58359: PUSH
58360: LD_INT 1
58362: NEG
58363: PUSH
58364: EMPTY
58365: LIST
58366: LIST
58367: PUSH
58368: LD_INT 4
58370: NEG
58371: PUSH
58372: LD_INT 1
58374: PUSH
58375: EMPTY
58376: LIST
58377: LIST
58378: PUSH
58379: LD_INT 5
58381: NEG
58382: PUSH
58383: LD_INT 0
58385: PUSH
58386: EMPTY
58387: LIST
58388: LIST
58389: PUSH
58390: LD_INT 5
58392: NEG
58393: PUSH
58394: LD_INT 1
58396: NEG
58397: PUSH
58398: EMPTY
58399: LIST
58400: LIST
58401: PUSH
58402: LD_INT 5
58404: NEG
58405: PUSH
58406: LD_INT 1
58408: PUSH
58409: EMPTY
58410: LIST
58411: LIST
58412: PUSH
58413: LD_INT 6
58415: NEG
58416: PUSH
58417: LD_INT 0
58419: PUSH
58420: EMPTY
58421: LIST
58422: LIST
58423: PUSH
58424: LD_INT 6
58426: NEG
58427: PUSH
58428: LD_INT 1
58430: NEG
58431: PUSH
58432: EMPTY
58433: LIST
58434: LIST
58435: PUSH
58436: EMPTY
58437: LIST
58438: LIST
58439: LIST
58440: LIST
58441: LIST
58442: LIST
58443: LIST
58444: LIST
58445: LIST
58446: LIST
58447: LIST
58448: LIST
58449: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
58450: LD_ADDR_VAR 0 34
58454: PUSH
58455: LD_INT 2
58457: NEG
58458: PUSH
58459: LD_INT 3
58461: NEG
58462: PUSH
58463: EMPTY
58464: LIST
58465: LIST
58466: PUSH
58467: LD_INT 3
58469: NEG
58470: PUSH
58471: LD_INT 2
58473: NEG
58474: PUSH
58475: EMPTY
58476: LIST
58477: LIST
58478: PUSH
58479: LD_INT 3
58481: NEG
58482: PUSH
58483: LD_INT 3
58485: NEG
58486: PUSH
58487: EMPTY
58488: LIST
58489: LIST
58490: PUSH
58491: LD_INT 3
58493: NEG
58494: PUSH
58495: LD_INT 4
58497: NEG
58498: PUSH
58499: EMPTY
58500: LIST
58501: LIST
58502: PUSH
58503: LD_INT 4
58505: NEG
58506: PUSH
58507: LD_INT 3
58509: NEG
58510: PUSH
58511: EMPTY
58512: LIST
58513: LIST
58514: PUSH
58515: LD_INT 4
58517: NEG
58518: PUSH
58519: LD_INT 4
58521: NEG
58522: PUSH
58523: EMPTY
58524: LIST
58525: LIST
58526: PUSH
58527: LD_INT 4
58529: NEG
58530: PUSH
58531: LD_INT 5
58533: NEG
58534: PUSH
58535: EMPTY
58536: LIST
58537: LIST
58538: PUSH
58539: LD_INT 5
58541: NEG
58542: PUSH
58543: LD_INT 4
58545: NEG
58546: PUSH
58547: EMPTY
58548: LIST
58549: LIST
58550: PUSH
58551: LD_INT 5
58553: NEG
58554: PUSH
58555: LD_INT 5
58557: NEG
58558: PUSH
58559: EMPTY
58560: LIST
58561: LIST
58562: PUSH
58563: LD_INT 5
58565: NEG
58566: PUSH
58567: LD_INT 6
58569: NEG
58570: PUSH
58571: EMPTY
58572: LIST
58573: LIST
58574: PUSH
58575: LD_INT 6
58577: NEG
58578: PUSH
58579: LD_INT 5
58581: NEG
58582: PUSH
58583: EMPTY
58584: LIST
58585: LIST
58586: PUSH
58587: LD_INT 6
58589: NEG
58590: PUSH
58591: LD_INT 6
58593: NEG
58594: PUSH
58595: EMPTY
58596: LIST
58597: LIST
58598: PUSH
58599: EMPTY
58600: LIST
58601: LIST
58602: LIST
58603: LIST
58604: LIST
58605: LIST
58606: LIST
58607: LIST
58608: LIST
58609: LIST
58610: LIST
58611: LIST
58612: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
58613: LD_ADDR_VAR 0 41
58617: PUSH
58618: LD_INT 0
58620: PUSH
58621: LD_INT 2
58623: NEG
58624: PUSH
58625: EMPTY
58626: LIST
58627: LIST
58628: PUSH
58629: LD_INT 1
58631: NEG
58632: PUSH
58633: LD_INT 3
58635: NEG
58636: PUSH
58637: EMPTY
58638: LIST
58639: LIST
58640: PUSH
58641: LD_INT 1
58643: PUSH
58644: LD_INT 2
58646: NEG
58647: PUSH
58648: EMPTY
58649: LIST
58650: LIST
58651: PUSH
58652: EMPTY
58653: LIST
58654: LIST
58655: LIST
58656: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
58657: LD_ADDR_VAR 0 42
58661: PUSH
58662: LD_INT 2
58664: PUSH
58665: LD_INT 0
58667: PUSH
58668: EMPTY
58669: LIST
58670: LIST
58671: PUSH
58672: LD_INT 2
58674: PUSH
58675: LD_INT 1
58677: NEG
58678: PUSH
58679: EMPTY
58680: LIST
58681: LIST
58682: PUSH
58683: LD_INT 3
58685: PUSH
58686: LD_INT 1
58688: PUSH
58689: EMPTY
58690: LIST
58691: LIST
58692: PUSH
58693: EMPTY
58694: LIST
58695: LIST
58696: LIST
58697: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
58698: LD_ADDR_VAR 0 43
58702: PUSH
58703: LD_INT 2
58705: PUSH
58706: LD_INT 2
58708: PUSH
58709: EMPTY
58710: LIST
58711: LIST
58712: PUSH
58713: LD_INT 3
58715: PUSH
58716: LD_INT 2
58718: PUSH
58719: EMPTY
58720: LIST
58721: LIST
58722: PUSH
58723: LD_INT 2
58725: PUSH
58726: LD_INT 3
58728: PUSH
58729: EMPTY
58730: LIST
58731: LIST
58732: PUSH
58733: EMPTY
58734: LIST
58735: LIST
58736: LIST
58737: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
58738: LD_ADDR_VAR 0 44
58742: PUSH
58743: LD_INT 0
58745: PUSH
58746: LD_INT 2
58748: PUSH
58749: EMPTY
58750: LIST
58751: LIST
58752: PUSH
58753: LD_INT 1
58755: PUSH
58756: LD_INT 3
58758: PUSH
58759: EMPTY
58760: LIST
58761: LIST
58762: PUSH
58763: LD_INT 1
58765: NEG
58766: PUSH
58767: LD_INT 2
58769: PUSH
58770: EMPTY
58771: LIST
58772: LIST
58773: PUSH
58774: EMPTY
58775: LIST
58776: LIST
58777: LIST
58778: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58779: LD_ADDR_VAR 0 45
58783: PUSH
58784: LD_INT 2
58786: NEG
58787: PUSH
58788: LD_INT 0
58790: PUSH
58791: EMPTY
58792: LIST
58793: LIST
58794: PUSH
58795: LD_INT 2
58797: NEG
58798: PUSH
58799: LD_INT 1
58801: PUSH
58802: EMPTY
58803: LIST
58804: LIST
58805: PUSH
58806: LD_INT 3
58808: NEG
58809: PUSH
58810: LD_INT 1
58812: NEG
58813: PUSH
58814: EMPTY
58815: LIST
58816: LIST
58817: PUSH
58818: EMPTY
58819: LIST
58820: LIST
58821: LIST
58822: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
58823: LD_ADDR_VAR 0 46
58827: PUSH
58828: LD_INT 2
58830: NEG
58831: PUSH
58832: LD_INT 2
58834: NEG
58835: PUSH
58836: EMPTY
58837: LIST
58838: LIST
58839: PUSH
58840: LD_INT 2
58842: NEG
58843: PUSH
58844: LD_INT 3
58846: NEG
58847: PUSH
58848: EMPTY
58849: LIST
58850: LIST
58851: PUSH
58852: LD_INT 3
58854: NEG
58855: PUSH
58856: LD_INT 2
58858: NEG
58859: PUSH
58860: EMPTY
58861: LIST
58862: LIST
58863: PUSH
58864: EMPTY
58865: LIST
58866: LIST
58867: LIST
58868: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
58869: LD_ADDR_VAR 0 47
58873: PUSH
58874: LD_INT 2
58876: NEG
58877: PUSH
58878: LD_INT 3
58880: NEG
58881: PUSH
58882: EMPTY
58883: LIST
58884: LIST
58885: PUSH
58886: LD_INT 1
58888: NEG
58889: PUSH
58890: LD_INT 3
58892: NEG
58893: PUSH
58894: EMPTY
58895: LIST
58896: LIST
58897: PUSH
58898: EMPTY
58899: LIST
58900: LIST
58901: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
58902: LD_ADDR_VAR 0 48
58906: PUSH
58907: LD_INT 1
58909: PUSH
58910: LD_INT 2
58912: NEG
58913: PUSH
58914: EMPTY
58915: LIST
58916: LIST
58917: PUSH
58918: LD_INT 2
58920: PUSH
58921: LD_INT 1
58923: NEG
58924: PUSH
58925: EMPTY
58926: LIST
58927: LIST
58928: PUSH
58929: EMPTY
58930: LIST
58931: LIST
58932: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
58933: LD_ADDR_VAR 0 49
58937: PUSH
58938: LD_INT 3
58940: PUSH
58941: LD_INT 1
58943: PUSH
58944: EMPTY
58945: LIST
58946: LIST
58947: PUSH
58948: LD_INT 3
58950: PUSH
58951: LD_INT 2
58953: PUSH
58954: EMPTY
58955: LIST
58956: LIST
58957: PUSH
58958: EMPTY
58959: LIST
58960: LIST
58961: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
58962: LD_ADDR_VAR 0 50
58966: PUSH
58967: LD_INT 2
58969: PUSH
58970: LD_INT 3
58972: PUSH
58973: EMPTY
58974: LIST
58975: LIST
58976: PUSH
58977: LD_INT 1
58979: PUSH
58980: LD_INT 3
58982: PUSH
58983: EMPTY
58984: LIST
58985: LIST
58986: PUSH
58987: EMPTY
58988: LIST
58989: LIST
58990: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
58991: LD_ADDR_VAR 0 51
58995: PUSH
58996: LD_INT 1
58998: NEG
58999: PUSH
59000: LD_INT 2
59002: PUSH
59003: EMPTY
59004: LIST
59005: LIST
59006: PUSH
59007: LD_INT 2
59009: NEG
59010: PUSH
59011: LD_INT 1
59013: PUSH
59014: EMPTY
59015: LIST
59016: LIST
59017: PUSH
59018: EMPTY
59019: LIST
59020: LIST
59021: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
59022: LD_ADDR_VAR 0 52
59026: PUSH
59027: LD_INT 3
59029: NEG
59030: PUSH
59031: LD_INT 1
59033: NEG
59034: PUSH
59035: EMPTY
59036: LIST
59037: LIST
59038: PUSH
59039: LD_INT 3
59041: NEG
59042: PUSH
59043: LD_INT 2
59045: NEG
59046: PUSH
59047: EMPTY
59048: LIST
59049: LIST
59050: PUSH
59051: EMPTY
59052: LIST
59053: LIST
59054: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
59055: LD_ADDR_VAR 0 53
59059: PUSH
59060: LD_INT 1
59062: NEG
59063: PUSH
59064: LD_INT 3
59066: NEG
59067: PUSH
59068: EMPTY
59069: LIST
59070: LIST
59071: PUSH
59072: LD_INT 0
59074: PUSH
59075: LD_INT 3
59077: NEG
59078: PUSH
59079: EMPTY
59080: LIST
59081: LIST
59082: PUSH
59083: LD_INT 1
59085: PUSH
59086: LD_INT 2
59088: NEG
59089: PUSH
59090: EMPTY
59091: LIST
59092: LIST
59093: PUSH
59094: EMPTY
59095: LIST
59096: LIST
59097: LIST
59098: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
59099: LD_ADDR_VAR 0 54
59103: PUSH
59104: LD_INT 2
59106: PUSH
59107: LD_INT 1
59109: NEG
59110: PUSH
59111: EMPTY
59112: LIST
59113: LIST
59114: PUSH
59115: LD_INT 3
59117: PUSH
59118: LD_INT 0
59120: PUSH
59121: EMPTY
59122: LIST
59123: LIST
59124: PUSH
59125: LD_INT 3
59127: PUSH
59128: LD_INT 1
59130: PUSH
59131: EMPTY
59132: LIST
59133: LIST
59134: PUSH
59135: EMPTY
59136: LIST
59137: LIST
59138: LIST
59139: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
59140: LD_ADDR_VAR 0 55
59144: PUSH
59145: LD_INT 3
59147: PUSH
59148: LD_INT 2
59150: PUSH
59151: EMPTY
59152: LIST
59153: LIST
59154: PUSH
59155: LD_INT 3
59157: PUSH
59158: LD_INT 3
59160: PUSH
59161: EMPTY
59162: LIST
59163: LIST
59164: PUSH
59165: LD_INT 2
59167: PUSH
59168: LD_INT 3
59170: PUSH
59171: EMPTY
59172: LIST
59173: LIST
59174: PUSH
59175: EMPTY
59176: LIST
59177: LIST
59178: LIST
59179: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
59180: LD_ADDR_VAR 0 56
59184: PUSH
59185: LD_INT 1
59187: PUSH
59188: LD_INT 3
59190: PUSH
59191: EMPTY
59192: LIST
59193: LIST
59194: PUSH
59195: LD_INT 0
59197: PUSH
59198: LD_INT 3
59200: PUSH
59201: EMPTY
59202: LIST
59203: LIST
59204: PUSH
59205: LD_INT 1
59207: NEG
59208: PUSH
59209: LD_INT 2
59211: PUSH
59212: EMPTY
59213: LIST
59214: LIST
59215: PUSH
59216: EMPTY
59217: LIST
59218: LIST
59219: LIST
59220: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
59221: LD_ADDR_VAR 0 57
59225: PUSH
59226: LD_INT 2
59228: NEG
59229: PUSH
59230: LD_INT 1
59232: PUSH
59233: EMPTY
59234: LIST
59235: LIST
59236: PUSH
59237: LD_INT 3
59239: NEG
59240: PUSH
59241: LD_INT 0
59243: PUSH
59244: EMPTY
59245: LIST
59246: LIST
59247: PUSH
59248: LD_INT 3
59250: NEG
59251: PUSH
59252: LD_INT 1
59254: NEG
59255: PUSH
59256: EMPTY
59257: LIST
59258: LIST
59259: PUSH
59260: EMPTY
59261: LIST
59262: LIST
59263: LIST
59264: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59265: LD_ADDR_VAR 0 58
59269: PUSH
59270: LD_INT 2
59272: NEG
59273: PUSH
59274: LD_INT 3
59276: NEG
59277: PUSH
59278: EMPTY
59279: LIST
59280: LIST
59281: PUSH
59282: LD_INT 3
59284: NEG
59285: PUSH
59286: LD_INT 2
59288: NEG
59289: PUSH
59290: EMPTY
59291: LIST
59292: LIST
59293: PUSH
59294: LD_INT 3
59296: NEG
59297: PUSH
59298: LD_INT 3
59300: NEG
59301: PUSH
59302: EMPTY
59303: LIST
59304: LIST
59305: PUSH
59306: EMPTY
59307: LIST
59308: LIST
59309: LIST
59310: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
59311: LD_ADDR_VAR 0 59
59315: PUSH
59316: LD_INT 1
59318: NEG
59319: PUSH
59320: LD_INT 2
59322: NEG
59323: PUSH
59324: EMPTY
59325: LIST
59326: LIST
59327: PUSH
59328: LD_INT 0
59330: PUSH
59331: LD_INT 2
59333: NEG
59334: PUSH
59335: EMPTY
59336: LIST
59337: LIST
59338: PUSH
59339: LD_INT 1
59341: PUSH
59342: LD_INT 1
59344: NEG
59345: PUSH
59346: EMPTY
59347: LIST
59348: LIST
59349: PUSH
59350: EMPTY
59351: LIST
59352: LIST
59353: LIST
59354: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
59355: LD_ADDR_VAR 0 60
59359: PUSH
59360: LD_INT 1
59362: PUSH
59363: LD_INT 1
59365: NEG
59366: PUSH
59367: EMPTY
59368: LIST
59369: LIST
59370: PUSH
59371: LD_INT 2
59373: PUSH
59374: LD_INT 0
59376: PUSH
59377: EMPTY
59378: LIST
59379: LIST
59380: PUSH
59381: LD_INT 2
59383: PUSH
59384: LD_INT 1
59386: PUSH
59387: EMPTY
59388: LIST
59389: LIST
59390: PUSH
59391: EMPTY
59392: LIST
59393: LIST
59394: LIST
59395: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
59396: LD_ADDR_VAR 0 61
59400: PUSH
59401: LD_INT 2
59403: PUSH
59404: LD_INT 1
59406: PUSH
59407: EMPTY
59408: LIST
59409: LIST
59410: PUSH
59411: LD_INT 2
59413: PUSH
59414: LD_INT 2
59416: PUSH
59417: EMPTY
59418: LIST
59419: LIST
59420: PUSH
59421: LD_INT 1
59423: PUSH
59424: LD_INT 2
59426: PUSH
59427: EMPTY
59428: LIST
59429: LIST
59430: PUSH
59431: EMPTY
59432: LIST
59433: LIST
59434: LIST
59435: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
59436: LD_ADDR_VAR 0 62
59440: PUSH
59441: LD_INT 1
59443: PUSH
59444: LD_INT 2
59446: PUSH
59447: EMPTY
59448: LIST
59449: LIST
59450: PUSH
59451: LD_INT 0
59453: PUSH
59454: LD_INT 2
59456: PUSH
59457: EMPTY
59458: LIST
59459: LIST
59460: PUSH
59461: LD_INT 1
59463: NEG
59464: PUSH
59465: LD_INT 1
59467: PUSH
59468: EMPTY
59469: LIST
59470: LIST
59471: PUSH
59472: EMPTY
59473: LIST
59474: LIST
59475: LIST
59476: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
59477: LD_ADDR_VAR 0 63
59481: PUSH
59482: LD_INT 1
59484: NEG
59485: PUSH
59486: LD_INT 1
59488: PUSH
59489: EMPTY
59490: LIST
59491: LIST
59492: PUSH
59493: LD_INT 2
59495: NEG
59496: PUSH
59497: LD_INT 0
59499: PUSH
59500: EMPTY
59501: LIST
59502: LIST
59503: PUSH
59504: LD_INT 2
59506: NEG
59507: PUSH
59508: LD_INT 1
59510: NEG
59511: PUSH
59512: EMPTY
59513: LIST
59514: LIST
59515: PUSH
59516: EMPTY
59517: LIST
59518: LIST
59519: LIST
59520: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59521: LD_ADDR_VAR 0 64
59525: PUSH
59526: LD_INT 1
59528: NEG
59529: PUSH
59530: LD_INT 2
59532: NEG
59533: PUSH
59534: EMPTY
59535: LIST
59536: LIST
59537: PUSH
59538: LD_INT 2
59540: NEG
59541: PUSH
59542: LD_INT 1
59544: NEG
59545: PUSH
59546: EMPTY
59547: LIST
59548: LIST
59549: PUSH
59550: LD_INT 2
59552: NEG
59553: PUSH
59554: LD_INT 2
59556: NEG
59557: PUSH
59558: EMPTY
59559: LIST
59560: LIST
59561: PUSH
59562: EMPTY
59563: LIST
59564: LIST
59565: LIST
59566: ST_TO_ADDR
// end ; 2 :
59567: GO 62833
59569: LD_INT 2
59571: DOUBLE
59572: EQUAL
59573: IFTRUE 59577
59575: GO 62832
59577: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
59578: LD_ADDR_VAR 0 29
59582: PUSH
59583: LD_INT 4
59585: PUSH
59586: LD_INT 0
59588: PUSH
59589: EMPTY
59590: LIST
59591: LIST
59592: PUSH
59593: LD_INT 4
59595: PUSH
59596: LD_INT 1
59598: NEG
59599: PUSH
59600: EMPTY
59601: LIST
59602: LIST
59603: PUSH
59604: LD_INT 5
59606: PUSH
59607: LD_INT 0
59609: PUSH
59610: EMPTY
59611: LIST
59612: LIST
59613: PUSH
59614: LD_INT 5
59616: PUSH
59617: LD_INT 1
59619: PUSH
59620: EMPTY
59621: LIST
59622: LIST
59623: PUSH
59624: LD_INT 4
59626: PUSH
59627: LD_INT 1
59629: PUSH
59630: EMPTY
59631: LIST
59632: LIST
59633: PUSH
59634: LD_INT 3
59636: PUSH
59637: LD_INT 0
59639: PUSH
59640: EMPTY
59641: LIST
59642: LIST
59643: PUSH
59644: LD_INT 3
59646: PUSH
59647: LD_INT 1
59649: NEG
59650: PUSH
59651: EMPTY
59652: LIST
59653: LIST
59654: PUSH
59655: LD_INT 3
59657: PUSH
59658: LD_INT 2
59660: NEG
59661: PUSH
59662: EMPTY
59663: LIST
59664: LIST
59665: PUSH
59666: LD_INT 5
59668: PUSH
59669: LD_INT 2
59671: PUSH
59672: EMPTY
59673: LIST
59674: LIST
59675: PUSH
59676: LD_INT 3
59678: PUSH
59679: LD_INT 3
59681: PUSH
59682: EMPTY
59683: LIST
59684: LIST
59685: PUSH
59686: LD_INT 3
59688: PUSH
59689: LD_INT 2
59691: PUSH
59692: EMPTY
59693: LIST
59694: LIST
59695: PUSH
59696: LD_INT 4
59698: PUSH
59699: LD_INT 3
59701: PUSH
59702: EMPTY
59703: LIST
59704: LIST
59705: PUSH
59706: LD_INT 4
59708: PUSH
59709: LD_INT 4
59711: PUSH
59712: EMPTY
59713: LIST
59714: LIST
59715: PUSH
59716: LD_INT 3
59718: PUSH
59719: LD_INT 4
59721: PUSH
59722: EMPTY
59723: LIST
59724: LIST
59725: PUSH
59726: LD_INT 2
59728: PUSH
59729: LD_INT 3
59731: PUSH
59732: EMPTY
59733: LIST
59734: LIST
59735: PUSH
59736: LD_INT 2
59738: PUSH
59739: LD_INT 2
59741: PUSH
59742: EMPTY
59743: LIST
59744: LIST
59745: PUSH
59746: LD_INT 4
59748: PUSH
59749: LD_INT 2
59751: PUSH
59752: EMPTY
59753: LIST
59754: LIST
59755: PUSH
59756: LD_INT 2
59758: PUSH
59759: LD_INT 4
59761: PUSH
59762: EMPTY
59763: LIST
59764: LIST
59765: PUSH
59766: LD_INT 0
59768: PUSH
59769: LD_INT 4
59771: PUSH
59772: EMPTY
59773: LIST
59774: LIST
59775: PUSH
59776: LD_INT 0
59778: PUSH
59779: LD_INT 3
59781: PUSH
59782: EMPTY
59783: LIST
59784: LIST
59785: PUSH
59786: LD_INT 1
59788: PUSH
59789: LD_INT 4
59791: PUSH
59792: EMPTY
59793: LIST
59794: LIST
59795: PUSH
59796: LD_INT 1
59798: PUSH
59799: LD_INT 5
59801: PUSH
59802: EMPTY
59803: LIST
59804: LIST
59805: PUSH
59806: LD_INT 0
59808: PUSH
59809: LD_INT 5
59811: PUSH
59812: EMPTY
59813: LIST
59814: LIST
59815: PUSH
59816: LD_INT 1
59818: NEG
59819: PUSH
59820: LD_INT 4
59822: PUSH
59823: EMPTY
59824: LIST
59825: LIST
59826: PUSH
59827: LD_INT 1
59829: NEG
59830: PUSH
59831: LD_INT 3
59833: PUSH
59834: EMPTY
59835: LIST
59836: LIST
59837: PUSH
59838: LD_INT 2
59840: PUSH
59841: LD_INT 5
59843: PUSH
59844: EMPTY
59845: LIST
59846: LIST
59847: PUSH
59848: LD_INT 2
59850: NEG
59851: PUSH
59852: LD_INT 3
59854: PUSH
59855: EMPTY
59856: LIST
59857: LIST
59858: PUSH
59859: LD_INT 3
59861: NEG
59862: PUSH
59863: LD_INT 0
59865: PUSH
59866: EMPTY
59867: LIST
59868: LIST
59869: PUSH
59870: LD_INT 3
59872: NEG
59873: PUSH
59874: LD_INT 1
59876: NEG
59877: PUSH
59878: EMPTY
59879: LIST
59880: LIST
59881: PUSH
59882: LD_INT 2
59884: NEG
59885: PUSH
59886: LD_INT 0
59888: PUSH
59889: EMPTY
59890: LIST
59891: LIST
59892: PUSH
59893: LD_INT 2
59895: NEG
59896: PUSH
59897: LD_INT 1
59899: PUSH
59900: EMPTY
59901: LIST
59902: LIST
59903: PUSH
59904: LD_INT 3
59906: NEG
59907: PUSH
59908: LD_INT 1
59910: PUSH
59911: EMPTY
59912: LIST
59913: LIST
59914: PUSH
59915: LD_INT 4
59917: NEG
59918: PUSH
59919: LD_INT 0
59921: PUSH
59922: EMPTY
59923: LIST
59924: LIST
59925: PUSH
59926: LD_INT 4
59928: NEG
59929: PUSH
59930: LD_INT 1
59932: NEG
59933: PUSH
59934: EMPTY
59935: LIST
59936: LIST
59937: PUSH
59938: LD_INT 4
59940: NEG
59941: PUSH
59942: LD_INT 2
59944: NEG
59945: PUSH
59946: EMPTY
59947: LIST
59948: LIST
59949: PUSH
59950: LD_INT 2
59952: NEG
59953: PUSH
59954: LD_INT 2
59956: PUSH
59957: EMPTY
59958: LIST
59959: LIST
59960: PUSH
59961: LD_INT 4
59963: NEG
59964: PUSH
59965: LD_INT 4
59967: NEG
59968: PUSH
59969: EMPTY
59970: LIST
59971: LIST
59972: PUSH
59973: LD_INT 4
59975: NEG
59976: PUSH
59977: LD_INT 5
59979: NEG
59980: PUSH
59981: EMPTY
59982: LIST
59983: LIST
59984: PUSH
59985: LD_INT 3
59987: NEG
59988: PUSH
59989: LD_INT 4
59991: NEG
59992: PUSH
59993: EMPTY
59994: LIST
59995: LIST
59996: PUSH
59997: LD_INT 3
59999: NEG
60000: PUSH
60001: LD_INT 3
60003: NEG
60004: PUSH
60005: EMPTY
60006: LIST
60007: LIST
60008: PUSH
60009: LD_INT 4
60011: NEG
60012: PUSH
60013: LD_INT 3
60015: NEG
60016: PUSH
60017: EMPTY
60018: LIST
60019: LIST
60020: PUSH
60021: LD_INT 5
60023: NEG
60024: PUSH
60025: LD_INT 4
60027: NEG
60028: PUSH
60029: EMPTY
60030: LIST
60031: LIST
60032: PUSH
60033: LD_INT 5
60035: NEG
60036: PUSH
60037: LD_INT 5
60039: NEG
60040: PUSH
60041: EMPTY
60042: LIST
60043: LIST
60044: PUSH
60045: LD_INT 3
60047: NEG
60048: PUSH
60049: LD_INT 5
60051: NEG
60052: PUSH
60053: EMPTY
60054: LIST
60055: LIST
60056: PUSH
60057: LD_INT 5
60059: NEG
60060: PUSH
60061: LD_INT 3
60063: NEG
60064: PUSH
60065: EMPTY
60066: LIST
60067: LIST
60068: PUSH
60069: EMPTY
60070: LIST
60071: LIST
60072: LIST
60073: LIST
60074: LIST
60075: LIST
60076: LIST
60077: LIST
60078: LIST
60079: LIST
60080: LIST
60081: LIST
60082: LIST
60083: LIST
60084: LIST
60085: LIST
60086: LIST
60087: LIST
60088: LIST
60089: LIST
60090: LIST
60091: LIST
60092: LIST
60093: LIST
60094: LIST
60095: LIST
60096: LIST
60097: LIST
60098: LIST
60099: LIST
60100: LIST
60101: LIST
60102: LIST
60103: LIST
60104: LIST
60105: LIST
60106: LIST
60107: LIST
60108: LIST
60109: LIST
60110: LIST
60111: LIST
60112: LIST
60113: LIST
60114: LIST
60115: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
60116: LD_ADDR_VAR 0 30
60120: PUSH
60121: LD_INT 4
60123: PUSH
60124: LD_INT 4
60126: PUSH
60127: EMPTY
60128: LIST
60129: LIST
60130: PUSH
60131: LD_INT 4
60133: PUSH
60134: LD_INT 3
60136: PUSH
60137: EMPTY
60138: LIST
60139: LIST
60140: PUSH
60141: LD_INT 5
60143: PUSH
60144: LD_INT 4
60146: PUSH
60147: EMPTY
60148: LIST
60149: LIST
60150: PUSH
60151: LD_INT 5
60153: PUSH
60154: LD_INT 5
60156: PUSH
60157: EMPTY
60158: LIST
60159: LIST
60160: PUSH
60161: LD_INT 4
60163: PUSH
60164: LD_INT 5
60166: PUSH
60167: EMPTY
60168: LIST
60169: LIST
60170: PUSH
60171: LD_INT 3
60173: PUSH
60174: LD_INT 4
60176: PUSH
60177: EMPTY
60178: LIST
60179: LIST
60180: PUSH
60181: LD_INT 3
60183: PUSH
60184: LD_INT 3
60186: PUSH
60187: EMPTY
60188: LIST
60189: LIST
60190: PUSH
60191: LD_INT 5
60193: PUSH
60194: LD_INT 3
60196: PUSH
60197: EMPTY
60198: LIST
60199: LIST
60200: PUSH
60201: LD_INT 3
60203: PUSH
60204: LD_INT 5
60206: PUSH
60207: EMPTY
60208: LIST
60209: LIST
60210: PUSH
60211: LD_INT 0
60213: PUSH
60214: LD_INT 3
60216: PUSH
60217: EMPTY
60218: LIST
60219: LIST
60220: PUSH
60221: LD_INT 0
60223: PUSH
60224: LD_INT 2
60226: PUSH
60227: EMPTY
60228: LIST
60229: LIST
60230: PUSH
60231: LD_INT 1
60233: PUSH
60234: LD_INT 3
60236: PUSH
60237: EMPTY
60238: LIST
60239: LIST
60240: PUSH
60241: LD_INT 1
60243: PUSH
60244: LD_INT 4
60246: PUSH
60247: EMPTY
60248: LIST
60249: LIST
60250: PUSH
60251: LD_INT 0
60253: PUSH
60254: LD_INT 4
60256: PUSH
60257: EMPTY
60258: LIST
60259: LIST
60260: PUSH
60261: LD_INT 1
60263: NEG
60264: PUSH
60265: LD_INT 3
60267: PUSH
60268: EMPTY
60269: LIST
60270: LIST
60271: PUSH
60272: LD_INT 1
60274: NEG
60275: PUSH
60276: LD_INT 2
60278: PUSH
60279: EMPTY
60280: LIST
60281: LIST
60282: PUSH
60283: LD_INT 2
60285: PUSH
60286: LD_INT 4
60288: PUSH
60289: EMPTY
60290: LIST
60291: LIST
60292: PUSH
60293: LD_INT 2
60295: NEG
60296: PUSH
60297: LD_INT 2
60299: PUSH
60300: EMPTY
60301: LIST
60302: LIST
60303: PUSH
60304: LD_INT 4
60306: NEG
60307: PUSH
60308: LD_INT 0
60310: PUSH
60311: EMPTY
60312: LIST
60313: LIST
60314: PUSH
60315: LD_INT 4
60317: NEG
60318: PUSH
60319: LD_INT 1
60321: NEG
60322: PUSH
60323: EMPTY
60324: LIST
60325: LIST
60326: PUSH
60327: LD_INT 3
60329: NEG
60330: PUSH
60331: LD_INT 0
60333: PUSH
60334: EMPTY
60335: LIST
60336: LIST
60337: PUSH
60338: LD_INT 3
60340: NEG
60341: PUSH
60342: LD_INT 1
60344: PUSH
60345: EMPTY
60346: LIST
60347: LIST
60348: PUSH
60349: LD_INT 4
60351: NEG
60352: PUSH
60353: LD_INT 1
60355: PUSH
60356: EMPTY
60357: LIST
60358: LIST
60359: PUSH
60360: LD_INT 5
60362: NEG
60363: PUSH
60364: LD_INT 0
60366: PUSH
60367: EMPTY
60368: LIST
60369: LIST
60370: PUSH
60371: LD_INT 5
60373: NEG
60374: PUSH
60375: LD_INT 1
60377: NEG
60378: PUSH
60379: EMPTY
60380: LIST
60381: LIST
60382: PUSH
60383: LD_INT 5
60385: NEG
60386: PUSH
60387: LD_INT 2
60389: NEG
60390: PUSH
60391: EMPTY
60392: LIST
60393: LIST
60394: PUSH
60395: LD_INT 3
60397: NEG
60398: PUSH
60399: LD_INT 2
60401: PUSH
60402: EMPTY
60403: LIST
60404: LIST
60405: PUSH
60406: LD_INT 3
60408: NEG
60409: PUSH
60410: LD_INT 3
60412: NEG
60413: PUSH
60414: EMPTY
60415: LIST
60416: LIST
60417: PUSH
60418: LD_INT 3
60420: NEG
60421: PUSH
60422: LD_INT 4
60424: NEG
60425: PUSH
60426: EMPTY
60427: LIST
60428: LIST
60429: PUSH
60430: LD_INT 2
60432: NEG
60433: PUSH
60434: LD_INT 3
60436: NEG
60437: PUSH
60438: EMPTY
60439: LIST
60440: LIST
60441: PUSH
60442: LD_INT 2
60444: NEG
60445: PUSH
60446: LD_INT 2
60448: NEG
60449: PUSH
60450: EMPTY
60451: LIST
60452: LIST
60453: PUSH
60454: LD_INT 3
60456: NEG
60457: PUSH
60458: LD_INT 2
60460: NEG
60461: PUSH
60462: EMPTY
60463: LIST
60464: LIST
60465: PUSH
60466: LD_INT 4
60468: NEG
60469: PUSH
60470: LD_INT 3
60472: NEG
60473: PUSH
60474: EMPTY
60475: LIST
60476: LIST
60477: PUSH
60478: LD_INT 4
60480: NEG
60481: PUSH
60482: LD_INT 4
60484: NEG
60485: PUSH
60486: EMPTY
60487: LIST
60488: LIST
60489: PUSH
60490: LD_INT 2
60492: NEG
60493: PUSH
60494: LD_INT 4
60496: NEG
60497: PUSH
60498: EMPTY
60499: LIST
60500: LIST
60501: PUSH
60502: LD_INT 4
60504: NEG
60505: PUSH
60506: LD_INT 2
60508: NEG
60509: PUSH
60510: EMPTY
60511: LIST
60512: LIST
60513: PUSH
60514: LD_INT 0
60516: PUSH
60517: LD_INT 4
60519: NEG
60520: PUSH
60521: EMPTY
60522: LIST
60523: LIST
60524: PUSH
60525: LD_INT 0
60527: PUSH
60528: LD_INT 5
60530: NEG
60531: PUSH
60532: EMPTY
60533: LIST
60534: LIST
60535: PUSH
60536: LD_INT 1
60538: PUSH
60539: LD_INT 4
60541: NEG
60542: PUSH
60543: EMPTY
60544: LIST
60545: LIST
60546: PUSH
60547: LD_INT 1
60549: PUSH
60550: LD_INT 3
60552: NEG
60553: PUSH
60554: EMPTY
60555: LIST
60556: LIST
60557: PUSH
60558: LD_INT 0
60560: PUSH
60561: LD_INT 3
60563: NEG
60564: PUSH
60565: EMPTY
60566: LIST
60567: LIST
60568: PUSH
60569: LD_INT 1
60571: NEG
60572: PUSH
60573: LD_INT 4
60575: NEG
60576: PUSH
60577: EMPTY
60578: LIST
60579: LIST
60580: PUSH
60581: LD_INT 1
60583: NEG
60584: PUSH
60585: LD_INT 5
60587: NEG
60588: PUSH
60589: EMPTY
60590: LIST
60591: LIST
60592: PUSH
60593: LD_INT 2
60595: PUSH
60596: LD_INT 3
60598: NEG
60599: PUSH
60600: EMPTY
60601: LIST
60602: LIST
60603: PUSH
60604: LD_INT 2
60606: NEG
60607: PUSH
60608: LD_INT 5
60610: NEG
60611: PUSH
60612: EMPTY
60613: LIST
60614: LIST
60615: PUSH
60616: EMPTY
60617: LIST
60618: LIST
60619: LIST
60620: LIST
60621: LIST
60622: LIST
60623: LIST
60624: LIST
60625: LIST
60626: LIST
60627: LIST
60628: LIST
60629: LIST
60630: LIST
60631: LIST
60632: LIST
60633: LIST
60634: LIST
60635: LIST
60636: LIST
60637: LIST
60638: LIST
60639: LIST
60640: LIST
60641: LIST
60642: LIST
60643: LIST
60644: LIST
60645: LIST
60646: LIST
60647: LIST
60648: LIST
60649: LIST
60650: LIST
60651: LIST
60652: LIST
60653: LIST
60654: LIST
60655: LIST
60656: LIST
60657: LIST
60658: LIST
60659: LIST
60660: LIST
60661: LIST
60662: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
60663: LD_ADDR_VAR 0 31
60667: PUSH
60668: LD_INT 0
60670: PUSH
60671: LD_INT 4
60673: PUSH
60674: EMPTY
60675: LIST
60676: LIST
60677: PUSH
60678: LD_INT 0
60680: PUSH
60681: LD_INT 3
60683: PUSH
60684: EMPTY
60685: LIST
60686: LIST
60687: PUSH
60688: LD_INT 1
60690: PUSH
60691: LD_INT 4
60693: PUSH
60694: EMPTY
60695: LIST
60696: LIST
60697: PUSH
60698: LD_INT 1
60700: PUSH
60701: LD_INT 5
60703: PUSH
60704: EMPTY
60705: LIST
60706: LIST
60707: PUSH
60708: LD_INT 0
60710: PUSH
60711: LD_INT 5
60713: PUSH
60714: EMPTY
60715: LIST
60716: LIST
60717: PUSH
60718: LD_INT 1
60720: NEG
60721: PUSH
60722: LD_INT 4
60724: PUSH
60725: EMPTY
60726: LIST
60727: LIST
60728: PUSH
60729: LD_INT 1
60731: NEG
60732: PUSH
60733: LD_INT 3
60735: PUSH
60736: EMPTY
60737: LIST
60738: LIST
60739: PUSH
60740: LD_INT 2
60742: PUSH
60743: LD_INT 5
60745: PUSH
60746: EMPTY
60747: LIST
60748: LIST
60749: PUSH
60750: LD_INT 2
60752: NEG
60753: PUSH
60754: LD_INT 3
60756: PUSH
60757: EMPTY
60758: LIST
60759: LIST
60760: PUSH
60761: LD_INT 3
60763: NEG
60764: PUSH
60765: LD_INT 0
60767: PUSH
60768: EMPTY
60769: LIST
60770: LIST
60771: PUSH
60772: LD_INT 3
60774: NEG
60775: PUSH
60776: LD_INT 1
60778: NEG
60779: PUSH
60780: EMPTY
60781: LIST
60782: LIST
60783: PUSH
60784: LD_INT 2
60786: NEG
60787: PUSH
60788: LD_INT 0
60790: PUSH
60791: EMPTY
60792: LIST
60793: LIST
60794: PUSH
60795: LD_INT 2
60797: NEG
60798: PUSH
60799: LD_INT 1
60801: PUSH
60802: EMPTY
60803: LIST
60804: LIST
60805: PUSH
60806: LD_INT 3
60808: NEG
60809: PUSH
60810: LD_INT 1
60812: PUSH
60813: EMPTY
60814: LIST
60815: LIST
60816: PUSH
60817: LD_INT 4
60819: NEG
60820: PUSH
60821: LD_INT 0
60823: PUSH
60824: EMPTY
60825: LIST
60826: LIST
60827: PUSH
60828: LD_INT 4
60830: NEG
60831: PUSH
60832: LD_INT 1
60834: NEG
60835: PUSH
60836: EMPTY
60837: LIST
60838: LIST
60839: PUSH
60840: LD_INT 4
60842: NEG
60843: PUSH
60844: LD_INT 2
60846: NEG
60847: PUSH
60848: EMPTY
60849: LIST
60850: LIST
60851: PUSH
60852: LD_INT 2
60854: NEG
60855: PUSH
60856: LD_INT 2
60858: PUSH
60859: EMPTY
60860: LIST
60861: LIST
60862: PUSH
60863: LD_INT 4
60865: NEG
60866: PUSH
60867: LD_INT 4
60869: NEG
60870: PUSH
60871: EMPTY
60872: LIST
60873: LIST
60874: PUSH
60875: LD_INT 4
60877: NEG
60878: PUSH
60879: LD_INT 5
60881: NEG
60882: PUSH
60883: EMPTY
60884: LIST
60885: LIST
60886: PUSH
60887: LD_INT 3
60889: NEG
60890: PUSH
60891: LD_INT 4
60893: NEG
60894: PUSH
60895: EMPTY
60896: LIST
60897: LIST
60898: PUSH
60899: LD_INT 3
60901: NEG
60902: PUSH
60903: LD_INT 3
60905: NEG
60906: PUSH
60907: EMPTY
60908: LIST
60909: LIST
60910: PUSH
60911: LD_INT 4
60913: NEG
60914: PUSH
60915: LD_INT 3
60917: NEG
60918: PUSH
60919: EMPTY
60920: LIST
60921: LIST
60922: PUSH
60923: LD_INT 5
60925: NEG
60926: PUSH
60927: LD_INT 4
60929: NEG
60930: PUSH
60931: EMPTY
60932: LIST
60933: LIST
60934: PUSH
60935: LD_INT 5
60937: NEG
60938: PUSH
60939: LD_INT 5
60941: NEG
60942: PUSH
60943: EMPTY
60944: LIST
60945: LIST
60946: PUSH
60947: LD_INT 3
60949: NEG
60950: PUSH
60951: LD_INT 5
60953: NEG
60954: PUSH
60955: EMPTY
60956: LIST
60957: LIST
60958: PUSH
60959: LD_INT 5
60961: NEG
60962: PUSH
60963: LD_INT 3
60965: NEG
60966: PUSH
60967: EMPTY
60968: LIST
60969: LIST
60970: PUSH
60971: LD_INT 0
60973: PUSH
60974: LD_INT 3
60976: NEG
60977: PUSH
60978: EMPTY
60979: LIST
60980: LIST
60981: PUSH
60982: LD_INT 0
60984: PUSH
60985: LD_INT 4
60987: NEG
60988: PUSH
60989: EMPTY
60990: LIST
60991: LIST
60992: PUSH
60993: LD_INT 1
60995: PUSH
60996: LD_INT 3
60998: NEG
60999: PUSH
61000: EMPTY
61001: LIST
61002: LIST
61003: PUSH
61004: LD_INT 1
61006: PUSH
61007: LD_INT 2
61009: NEG
61010: PUSH
61011: EMPTY
61012: LIST
61013: LIST
61014: PUSH
61015: LD_INT 0
61017: PUSH
61018: LD_INT 2
61020: NEG
61021: PUSH
61022: EMPTY
61023: LIST
61024: LIST
61025: PUSH
61026: LD_INT 1
61028: NEG
61029: PUSH
61030: LD_INT 3
61032: NEG
61033: PUSH
61034: EMPTY
61035: LIST
61036: LIST
61037: PUSH
61038: LD_INT 1
61040: NEG
61041: PUSH
61042: LD_INT 4
61044: NEG
61045: PUSH
61046: EMPTY
61047: LIST
61048: LIST
61049: PUSH
61050: LD_INT 2
61052: PUSH
61053: LD_INT 2
61055: NEG
61056: PUSH
61057: EMPTY
61058: LIST
61059: LIST
61060: PUSH
61061: LD_INT 2
61063: NEG
61064: PUSH
61065: LD_INT 4
61067: NEG
61068: PUSH
61069: EMPTY
61070: LIST
61071: LIST
61072: PUSH
61073: LD_INT 4
61075: PUSH
61076: LD_INT 0
61078: PUSH
61079: EMPTY
61080: LIST
61081: LIST
61082: PUSH
61083: LD_INT 4
61085: PUSH
61086: LD_INT 1
61088: NEG
61089: PUSH
61090: EMPTY
61091: LIST
61092: LIST
61093: PUSH
61094: LD_INT 5
61096: PUSH
61097: LD_INT 0
61099: PUSH
61100: EMPTY
61101: LIST
61102: LIST
61103: PUSH
61104: LD_INT 5
61106: PUSH
61107: LD_INT 1
61109: PUSH
61110: EMPTY
61111: LIST
61112: LIST
61113: PUSH
61114: LD_INT 4
61116: PUSH
61117: LD_INT 1
61119: PUSH
61120: EMPTY
61121: LIST
61122: LIST
61123: PUSH
61124: LD_INT 3
61126: PUSH
61127: LD_INT 0
61129: PUSH
61130: EMPTY
61131: LIST
61132: LIST
61133: PUSH
61134: LD_INT 3
61136: PUSH
61137: LD_INT 1
61139: NEG
61140: PUSH
61141: EMPTY
61142: LIST
61143: LIST
61144: PUSH
61145: LD_INT 3
61147: PUSH
61148: LD_INT 2
61150: NEG
61151: PUSH
61152: EMPTY
61153: LIST
61154: LIST
61155: PUSH
61156: LD_INT 5
61158: PUSH
61159: LD_INT 2
61161: PUSH
61162: EMPTY
61163: LIST
61164: LIST
61165: PUSH
61166: EMPTY
61167: LIST
61168: LIST
61169: LIST
61170: LIST
61171: LIST
61172: LIST
61173: LIST
61174: LIST
61175: LIST
61176: LIST
61177: LIST
61178: LIST
61179: LIST
61180: LIST
61181: LIST
61182: LIST
61183: LIST
61184: LIST
61185: LIST
61186: LIST
61187: LIST
61188: LIST
61189: LIST
61190: LIST
61191: LIST
61192: LIST
61193: LIST
61194: LIST
61195: LIST
61196: LIST
61197: LIST
61198: LIST
61199: LIST
61200: LIST
61201: LIST
61202: LIST
61203: LIST
61204: LIST
61205: LIST
61206: LIST
61207: LIST
61208: LIST
61209: LIST
61210: LIST
61211: LIST
61212: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
61213: LD_ADDR_VAR 0 32
61217: PUSH
61218: LD_INT 4
61220: NEG
61221: PUSH
61222: LD_INT 0
61224: PUSH
61225: EMPTY
61226: LIST
61227: LIST
61228: PUSH
61229: LD_INT 4
61231: NEG
61232: PUSH
61233: LD_INT 1
61235: NEG
61236: PUSH
61237: EMPTY
61238: LIST
61239: LIST
61240: PUSH
61241: LD_INT 3
61243: NEG
61244: PUSH
61245: LD_INT 0
61247: PUSH
61248: EMPTY
61249: LIST
61250: LIST
61251: PUSH
61252: LD_INT 3
61254: NEG
61255: PUSH
61256: LD_INT 1
61258: PUSH
61259: EMPTY
61260: LIST
61261: LIST
61262: PUSH
61263: LD_INT 4
61265: NEG
61266: PUSH
61267: LD_INT 1
61269: PUSH
61270: EMPTY
61271: LIST
61272: LIST
61273: PUSH
61274: LD_INT 5
61276: NEG
61277: PUSH
61278: LD_INT 0
61280: PUSH
61281: EMPTY
61282: LIST
61283: LIST
61284: PUSH
61285: LD_INT 5
61287: NEG
61288: PUSH
61289: LD_INT 1
61291: NEG
61292: PUSH
61293: EMPTY
61294: LIST
61295: LIST
61296: PUSH
61297: LD_INT 5
61299: NEG
61300: PUSH
61301: LD_INT 2
61303: NEG
61304: PUSH
61305: EMPTY
61306: LIST
61307: LIST
61308: PUSH
61309: LD_INT 3
61311: NEG
61312: PUSH
61313: LD_INT 2
61315: PUSH
61316: EMPTY
61317: LIST
61318: LIST
61319: PUSH
61320: LD_INT 3
61322: NEG
61323: PUSH
61324: LD_INT 3
61326: NEG
61327: PUSH
61328: EMPTY
61329: LIST
61330: LIST
61331: PUSH
61332: LD_INT 3
61334: NEG
61335: PUSH
61336: LD_INT 4
61338: NEG
61339: PUSH
61340: EMPTY
61341: LIST
61342: LIST
61343: PUSH
61344: LD_INT 2
61346: NEG
61347: PUSH
61348: LD_INT 3
61350: NEG
61351: PUSH
61352: EMPTY
61353: LIST
61354: LIST
61355: PUSH
61356: LD_INT 2
61358: NEG
61359: PUSH
61360: LD_INT 2
61362: NEG
61363: PUSH
61364: EMPTY
61365: LIST
61366: LIST
61367: PUSH
61368: LD_INT 3
61370: NEG
61371: PUSH
61372: LD_INT 2
61374: NEG
61375: PUSH
61376: EMPTY
61377: LIST
61378: LIST
61379: PUSH
61380: LD_INT 4
61382: NEG
61383: PUSH
61384: LD_INT 3
61386: NEG
61387: PUSH
61388: EMPTY
61389: LIST
61390: LIST
61391: PUSH
61392: LD_INT 4
61394: NEG
61395: PUSH
61396: LD_INT 4
61398: NEG
61399: PUSH
61400: EMPTY
61401: LIST
61402: LIST
61403: PUSH
61404: LD_INT 2
61406: NEG
61407: PUSH
61408: LD_INT 4
61410: NEG
61411: PUSH
61412: EMPTY
61413: LIST
61414: LIST
61415: PUSH
61416: LD_INT 4
61418: NEG
61419: PUSH
61420: LD_INT 2
61422: NEG
61423: PUSH
61424: EMPTY
61425: LIST
61426: LIST
61427: PUSH
61428: LD_INT 0
61430: PUSH
61431: LD_INT 4
61433: NEG
61434: PUSH
61435: EMPTY
61436: LIST
61437: LIST
61438: PUSH
61439: LD_INT 0
61441: PUSH
61442: LD_INT 5
61444: NEG
61445: PUSH
61446: EMPTY
61447: LIST
61448: LIST
61449: PUSH
61450: LD_INT 1
61452: PUSH
61453: LD_INT 4
61455: NEG
61456: PUSH
61457: EMPTY
61458: LIST
61459: LIST
61460: PUSH
61461: LD_INT 1
61463: PUSH
61464: LD_INT 3
61466: NEG
61467: PUSH
61468: EMPTY
61469: LIST
61470: LIST
61471: PUSH
61472: LD_INT 0
61474: PUSH
61475: LD_INT 3
61477: NEG
61478: PUSH
61479: EMPTY
61480: LIST
61481: LIST
61482: PUSH
61483: LD_INT 1
61485: NEG
61486: PUSH
61487: LD_INT 4
61489: NEG
61490: PUSH
61491: EMPTY
61492: LIST
61493: LIST
61494: PUSH
61495: LD_INT 1
61497: NEG
61498: PUSH
61499: LD_INT 5
61501: NEG
61502: PUSH
61503: EMPTY
61504: LIST
61505: LIST
61506: PUSH
61507: LD_INT 2
61509: PUSH
61510: LD_INT 3
61512: NEG
61513: PUSH
61514: EMPTY
61515: LIST
61516: LIST
61517: PUSH
61518: LD_INT 2
61520: NEG
61521: PUSH
61522: LD_INT 5
61524: NEG
61525: PUSH
61526: EMPTY
61527: LIST
61528: LIST
61529: PUSH
61530: LD_INT 3
61532: PUSH
61533: LD_INT 0
61535: PUSH
61536: EMPTY
61537: LIST
61538: LIST
61539: PUSH
61540: LD_INT 3
61542: PUSH
61543: LD_INT 1
61545: NEG
61546: PUSH
61547: EMPTY
61548: LIST
61549: LIST
61550: PUSH
61551: LD_INT 4
61553: PUSH
61554: LD_INT 0
61556: PUSH
61557: EMPTY
61558: LIST
61559: LIST
61560: PUSH
61561: LD_INT 4
61563: PUSH
61564: LD_INT 1
61566: PUSH
61567: EMPTY
61568: LIST
61569: LIST
61570: PUSH
61571: LD_INT 3
61573: PUSH
61574: LD_INT 1
61576: PUSH
61577: EMPTY
61578: LIST
61579: LIST
61580: PUSH
61581: LD_INT 2
61583: PUSH
61584: LD_INT 0
61586: PUSH
61587: EMPTY
61588: LIST
61589: LIST
61590: PUSH
61591: LD_INT 2
61593: PUSH
61594: LD_INT 1
61596: NEG
61597: PUSH
61598: EMPTY
61599: LIST
61600: LIST
61601: PUSH
61602: LD_INT 2
61604: PUSH
61605: LD_INT 2
61607: NEG
61608: PUSH
61609: EMPTY
61610: LIST
61611: LIST
61612: PUSH
61613: LD_INT 4
61615: PUSH
61616: LD_INT 2
61618: PUSH
61619: EMPTY
61620: LIST
61621: LIST
61622: PUSH
61623: LD_INT 4
61625: PUSH
61626: LD_INT 4
61628: PUSH
61629: EMPTY
61630: LIST
61631: LIST
61632: PUSH
61633: LD_INT 4
61635: PUSH
61636: LD_INT 3
61638: PUSH
61639: EMPTY
61640: LIST
61641: LIST
61642: PUSH
61643: LD_INT 5
61645: PUSH
61646: LD_INT 4
61648: PUSH
61649: EMPTY
61650: LIST
61651: LIST
61652: PUSH
61653: LD_INT 5
61655: PUSH
61656: LD_INT 5
61658: PUSH
61659: EMPTY
61660: LIST
61661: LIST
61662: PUSH
61663: LD_INT 4
61665: PUSH
61666: LD_INT 5
61668: PUSH
61669: EMPTY
61670: LIST
61671: LIST
61672: PUSH
61673: LD_INT 3
61675: PUSH
61676: LD_INT 4
61678: PUSH
61679: EMPTY
61680: LIST
61681: LIST
61682: PUSH
61683: LD_INT 3
61685: PUSH
61686: LD_INT 3
61688: PUSH
61689: EMPTY
61690: LIST
61691: LIST
61692: PUSH
61693: LD_INT 5
61695: PUSH
61696: LD_INT 3
61698: PUSH
61699: EMPTY
61700: LIST
61701: LIST
61702: PUSH
61703: LD_INT 3
61705: PUSH
61706: LD_INT 5
61708: PUSH
61709: EMPTY
61710: LIST
61711: LIST
61712: PUSH
61713: EMPTY
61714: LIST
61715: LIST
61716: LIST
61717: LIST
61718: LIST
61719: LIST
61720: LIST
61721: LIST
61722: LIST
61723: LIST
61724: LIST
61725: LIST
61726: LIST
61727: LIST
61728: LIST
61729: LIST
61730: LIST
61731: LIST
61732: LIST
61733: LIST
61734: LIST
61735: LIST
61736: LIST
61737: LIST
61738: LIST
61739: LIST
61740: LIST
61741: LIST
61742: LIST
61743: LIST
61744: LIST
61745: LIST
61746: LIST
61747: LIST
61748: LIST
61749: LIST
61750: LIST
61751: LIST
61752: LIST
61753: LIST
61754: LIST
61755: LIST
61756: LIST
61757: LIST
61758: LIST
61759: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
61760: LD_ADDR_VAR 0 33
61764: PUSH
61765: LD_INT 4
61767: NEG
61768: PUSH
61769: LD_INT 4
61771: NEG
61772: PUSH
61773: EMPTY
61774: LIST
61775: LIST
61776: PUSH
61777: LD_INT 4
61779: NEG
61780: PUSH
61781: LD_INT 5
61783: NEG
61784: PUSH
61785: EMPTY
61786: LIST
61787: LIST
61788: PUSH
61789: LD_INT 3
61791: NEG
61792: PUSH
61793: LD_INT 4
61795: NEG
61796: PUSH
61797: EMPTY
61798: LIST
61799: LIST
61800: PUSH
61801: LD_INT 3
61803: NEG
61804: PUSH
61805: LD_INT 3
61807: NEG
61808: PUSH
61809: EMPTY
61810: LIST
61811: LIST
61812: PUSH
61813: LD_INT 4
61815: NEG
61816: PUSH
61817: LD_INT 3
61819: NEG
61820: PUSH
61821: EMPTY
61822: LIST
61823: LIST
61824: PUSH
61825: LD_INT 5
61827: NEG
61828: PUSH
61829: LD_INT 4
61831: NEG
61832: PUSH
61833: EMPTY
61834: LIST
61835: LIST
61836: PUSH
61837: LD_INT 5
61839: NEG
61840: PUSH
61841: LD_INT 5
61843: NEG
61844: PUSH
61845: EMPTY
61846: LIST
61847: LIST
61848: PUSH
61849: LD_INT 3
61851: NEG
61852: PUSH
61853: LD_INT 5
61855: NEG
61856: PUSH
61857: EMPTY
61858: LIST
61859: LIST
61860: PUSH
61861: LD_INT 5
61863: NEG
61864: PUSH
61865: LD_INT 3
61867: NEG
61868: PUSH
61869: EMPTY
61870: LIST
61871: LIST
61872: PUSH
61873: LD_INT 0
61875: PUSH
61876: LD_INT 3
61878: NEG
61879: PUSH
61880: EMPTY
61881: LIST
61882: LIST
61883: PUSH
61884: LD_INT 0
61886: PUSH
61887: LD_INT 4
61889: NEG
61890: PUSH
61891: EMPTY
61892: LIST
61893: LIST
61894: PUSH
61895: LD_INT 1
61897: PUSH
61898: LD_INT 3
61900: NEG
61901: PUSH
61902: EMPTY
61903: LIST
61904: LIST
61905: PUSH
61906: LD_INT 1
61908: PUSH
61909: LD_INT 2
61911: NEG
61912: PUSH
61913: EMPTY
61914: LIST
61915: LIST
61916: PUSH
61917: LD_INT 0
61919: PUSH
61920: LD_INT 2
61922: NEG
61923: PUSH
61924: EMPTY
61925: LIST
61926: LIST
61927: PUSH
61928: LD_INT 1
61930: NEG
61931: PUSH
61932: LD_INT 3
61934: NEG
61935: PUSH
61936: EMPTY
61937: LIST
61938: LIST
61939: PUSH
61940: LD_INT 1
61942: NEG
61943: PUSH
61944: LD_INT 4
61946: NEG
61947: PUSH
61948: EMPTY
61949: LIST
61950: LIST
61951: PUSH
61952: LD_INT 2
61954: PUSH
61955: LD_INT 2
61957: NEG
61958: PUSH
61959: EMPTY
61960: LIST
61961: LIST
61962: PUSH
61963: LD_INT 2
61965: NEG
61966: PUSH
61967: LD_INT 4
61969: NEG
61970: PUSH
61971: EMPTY
61972: LIST
61973: LIST
61974: PUSH
61975: LD_INT 4
61977: PUSH
61978: LD_INT 0
61980: PUSH
61981: EMPTY
61982: LIST
61983: LIST
61984: PUSH
61985: LD_INT 4
61987: PUSH
61988: LD_INT 1
61990: NEG
61991: PUSH
61992: EMPTY
61993: LIST
61994: LIST
61995: PUSH
61996: LD_INT 5
61998: PUSH
61999: LD_INT 0
62001: PUSH
62002: EMPTY
62003: LIST
62004: LIST
62005: PUSH
62006: LD_INT 5
62008: PUSH
62009: LD_INT 1
62011: PUSH
62012: EMPTY
62013: LIST
62014: LIST
62015: PUSH
62016: LD_INT 4
62018: PUSH
62019: LD_INT 1
62021: PUSH
62022: EMPTY
62023: LIST
62024: LIST
62025: PUSH
62026: LD_INT 3
62028: PUSH
62029: LD_INT 0
62031: PUSH
62032: EMPTY
62033: LIST
62034: LIST
62035: PUSH
62036: LD_INT 3
62038: PUSH
62039: LD_INT 1
62041: NEG
62042: PUSH
62043: EMPTY
62044: LIST
62045: LIST
62046: PUSH
62047: LD_INT 3
62049: PUSH
62050: LD_INT 2
62052: NEG
62053: PUSH
62054: EMPTY
62055: LIST
62056: LIST
62057: PUSH
62058: LD_INT 5
62060: PUSH
62061: LD_INT 2
62063: PUSH
62064: EMPTY
62065: LIST
62066: LIST
62067: PUSH
62068: LD_INT 3
62070: PUSH
62071: LD_INT 3
62073: PUSH
62074: EMPTY
62075: LIST
62076: LIST
62077: PUSH
62078: LD_INT 3
62080: PUSH
62081: LD_INT 2
62083: PUSH
62084: EMPTY
62085: LIST
62086: LIST
62087: PUSH
62088: LD_INT 4
62090: PUSH
62091: LD_INT 3
62093: PUSH
62094: EMPTY
62095: LIST
62096: LIST
62097: PUSH
62098: LD_INT 4
62100: PUSH
62101: LD_INT 4
62103: PUSH
62104: EMPTY
62105: LIST
62106: LIST
62107: PUSH
62108: LD_INT 3
62110: PUSH
62111: LD_INT 4
62113: PUSH
62114: EMPTY
62115: LIST
62116: LIST
62117: PUSH
62118: LD_INT 2
62120: PUSH
62121: LD_INT 3
62123: PUSH
62124: EMPTY
62125: LIST
62126: LIST
62127: PUSH
62128: LD_INT 2
62130: PUSH
62131: LD_INT 2
62133: PUSH
62134: EMPTY
62135: LIST
62136: LIST
62137: PUSH
62138: LD_INT 4
62140: PUSH
62141: LD_INT 2
62143: PUSH
62144: EMPTY
62145: LIST
62146: LIST
62147: PUSH
62148: LD_INT 2
62150: PUSH
62151: LD_INT 4
62153: PUSH
62154: EMPTY
62155: LIST
62156: LIST
62157: PUSH
62158: LD_INT 0
62160: PUSH
62161: LD_INT 4
62163: PUSH
62164: EMPTY
62165: LIST
62166: LIST
62167: PUSH
62168: LD_INT 0
62170: PUSH
62171: LD_INT 3
62173: PUSH
62174: EMPTY
62175: LIST
62176: LIST
62177: PUSH
62178: LD_INT 1
62180: PUSH
62181: LD_INT 4
62183: PUSH
62184: EMPTY
62185: LIST
62186: LIST
62187: PUSH
62188: LD_INT 1
62190: PUSH
62191: LD_INT 5
62193: PUSH
62194: EMPTY
62195: LIST
62196: LIST
62197: PUSH
62198: LD_INT 0
62200: PUSH
62201: LD_INT 5
62203: PUSH
62204: EMPTY
62205: LIST
62206: LIST
62207: PUSH
62208: LD_INT 1
62210: NEG
62211: PUSH
62212: LD_INT 4
62214: PUSH
62215: EMPTY
62216: LIST
62217: LIST
62218: PUSH
62219: LD_INT 1
62221: NEG
62222: PUSH
62223: LD_INT 3
62225: PUSH
62226: EMPTY
62227: LIST
62228: LIST
62229: PUSH
62230: LD_INT 2
62232: PUSH
62233: LD_INT 5
62235: PUSH
62236: EMPTY
62237: LIST
62238: LIST
62239: PUSH
62240: LD_INT 2
62242: NEG
62243: PUSH
62244: LD_INT 3
62246: PUSH
62247: EMPTY
62248: LIST
62249: LIST
62250: PUSH
62251: EMPTY
62252: LIST
62253: LIST
62254: LIST
62255: LIST
62256: LIST
62257: LIST
62258: LIST
62259: LIST
62260: LIST
62261: LIST
62262: LIST
62263: LIST
62264: LIST
62265: LIST
62266: LIST
62267: LIST
62268: LIST
62269: LIST
62270: LIST
62271: LIST
62272: LIST
62273: LIST
62274: LIST
62275: LIST
62276: LIST
62277: LIST
62278: LIST
62279: LIST
62280: LIST
62281: LIST
62282: LIST
62283: LIST
62284: LIST
62285: LIST
62286: LIST
62287: LIST
62288: LIST
62289: LIST
62290: LIST
62291: LIST
62292: LIST
62293: LIST
62294: LIST
62295: LIST
62296: LIST
62297: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
62298: LD_ADDR_VAR 0 34
62302: PUSH
62303: LD_INT 0
62305: PUSH
62306: LD_INT 4
62308: NEG
62309: PUSH
62310: EMPTY
62311: LIST
62312: LIST
62313: PUSH
62314: LD_INT 0
62316: PUSH
62317: LD_INT 5
62319: NEG
62320: PUSH
62321: EMPTY
62322: LIST
62323: LIST
62324: PUSH
62325: LD_INT 1
62327: PUSH
62328: LD_INT 4
62330: NEG
62331: PUSH
62332: EMPTY
62333: LIST
62334: LIST
62335: PUSH
62336: LD_INT 1
62338: PUSH
62339: LD_INT 3
62341: NEG
62342: PUSH
62343: EMPTY
62344: LIST
62345: LIST
62346: PUSH
62347: LD_INT 0
62349: PUSH
62350: LD_INT 3
62352: NEG
62353: PUSH
62354: EMPTY
62355: LIST
62356: LIST
62357: PUSH
62358: LD_INT 1
62360: NEG
62361: PUSH
62362: LD_INT 4
62364: NEG
62365: PUSH
62366: EMPTY
62367: LIST
62368: LIST
62369: PUSH
62370: LD_INT 1
62372: NEG
62373: PUSH
62374: LD_INT 5
62376: NEG
62377: PUSH
62378: EMPTY
62379: LIST
62380: LIST
62381: PUSH
62382: LD_INT 2
62384: PUSH
62385: LD_INT 3
62387: NEG
62388: PUSH
62389: EMPTY
62390: LIST
62391: LIST
62392: PUSH
62393: LD_INT 2
62395: NEG
62396: PUSH
62397: LD_INT 5
62399: NEG
62400: PUSH
62401: EMPTY
62402: LIST
62403: LIST
62404: PUSH
62405: LD_INT 3
62407: PUSH
62408: LD_INT 0
62410: PUSH
62411: EMPTY
62412: LIST
62413: LIST
62414: PUSH
62415: LD_INT 3
62417: PUSH
62418: LD_INT 1
62420: NEG
62421: PUSH
62422: EMPTY
62423: LIST
62424: LIST
62425: PUSH
62426: LD_INT 4
62428: PUSH
62429: LD_INT 0
62431: PUSH
62432: EMPTY
62433: LIST
62434: LIST
62435: PUSH
62436: LD_INT 4
62438: PUSH
62439: LD_INT 1
62441: PUSH
62442: EMPTY
62443: LIST
62444: LIST
62445: PUSH
62446: LD_INT 3
62448: PUSH
62449: LD_INT 1
62451: PUSH
62452: EMPTY
62453: LIST
62454: LIST
62455: PUSH
62456: LD_INT 2
62458: PUSH
62459: LD_INT 0
62461: PUSH
62462: EMPTY
62463: LIST
62464: LIST
62465: PUSH
62466: LD_INT 2
62468: PUSH
62469: LD_INT 1
62471: NEG
62472: PUSH
62473: EMPTY
62474: LIST
62475: LIST
62476: PUSH
62477: LD_INT 2
62479: PUSH
62480: LD_INT 2
62482: NEG
62483: PUSH
62484: EMPTY
62485: LIST
62486: LIST
62487: PUSH
62488: LD_INT 4
62490: PUSH
62491: LD_INT 2
62493: PUSH
62494: EMPTY
62495: LIST
62496: LIST
62497: PUSH
62498: LD_INT 4
62500: PUSH
62501: LD_INT 4
62503: PUSH
62504: EMPTY
62505: LIST
62506: LIST
62507: PUSH
62508: LD_INT 4
62510: PUSH
62511: LD_INT 3
62513: PUSH
62514: EMPTY
62515: LIST
62516: LIST
62517: PUSH
62518: LD_INT 5
62520: PUSH
62521: LD_INT 4
62523: PUSH
62524: EMPTY
62525: LIST
62526: LIST
62527: PUSH
62528: LD_INT 5
62530: PUSH
62531: LD_INT 5
62533: PUSH
62534: EMPTY
62535: LIST
62536: LIST
62537: PUSH
62538: LD_INT 4
62540: PUSH
62541: LD_INT 5
62543: PUSH
62544: EMPTY
62545: LIST
62546: LIST
62547: PUSH
62548: LD_INT 3
62550: PUSH
62551: LD_INT 4
62553: PUSH
62554: EMPTY
62555: LIST
62556: LIST
62557: PUSH
62558: LD_INT 3
62560: PUSH
62561: LD_INT 3
62563: PUSH
62564: EMPTY
62565: LIST
62566: LIST
62567: PUSH
62568: LD_INT 5
62570: PUSH
62571: LD_INT 3
62573: PUSH
62574: EMPTY
62575: LIST
62576: LIST
62577: PUSH
62578: LD_INT 3
62580: PUSH
62581: LD_INT 5
62583: PUSH
62584: EMPTY
62585: LIST
62586: LIST
62587: PUSH
62588: LD_INT 0
62590: PUSH
62591: LD_INT 3
62593: PUSH
62594: EMPTY
62595: LIST
62596: LIST
62597: PUSH
62598: LD_INT 0
62600: PUSH
62601: LD_INT 2
62603: PUSH
62604: EMPTY
62605: LIST
62606: LIST
62607: PUSH
62608: LD_INT 1
62610: PUSH
62611: LD_INT 3
62613: PUSH
62614: EMPTY
62615: LIST
62616: LIST
62617: PUSH
62618: LD_INT 1
62620: PUSH
62621: LD_INT 4
62623: PUSH
62624: EMPTY
62625: LIST
62626: LIST
62627: PUSH
62628: LD_INT 0
62630: PUSH
62631: LD_INT 4
62633: PUSH
62634: EMPTY
62635: LIST
62636: LIST
62637: PUSH
62638: LD_INT 1
62640: NEG
62641: PUSH
62642: LD_INT 3
62644: PUSH
62645: EMPTY
62646: LIST
62647: LIST
62648: PUSH
62649: LD_INT 1
62651: NEG
62652: PUSH
62653: LD_INT 2
62655: PUSH
62656: EMPTY
62657: LIST
62658: LIST
62659: PUSH
62660: LD_INT 2
62662: PUSH
62663: LD_INT 4
62665: PUSH
62666: EMPTY
62667: LIST
62668: LIST
62669: PUSH
62670: LD_INT 2
62672: NEG
62673: PUSH
62674: LD_INT 2
62676: PUSH
62677: EMPTY
62678: LIST
62679: LIST
62680: PUSH
62681: LD_INT 4
62683: NEG
62684: PUSH
62685: LD_INT 0
62687: PUSH
62688: EMPTY
62689: LIST
62690: LIST
62691: PUSH
62692: LD_INT 4
62694: NEG
62695: PUSH
62696: LD_INT 1
62698: NEG
62699: PUSH
62700: EMPTY
62701: LIST
62702: LIST
62703: PUSH
62704: LD_INT 3
62706: NEG
62707: PUSH
62708: LD_INT 0
62710: PUSH
62711: EMPTY
62712: LIST
62713: LIST
62714: PUSH
62715: LD_INT 3
62717: NEG
62718: PUSH
62719: LD_INT 1
62721: PUSH
62722: EMPTY
62723: LIST
62724: LIST
62725: PUSH
62726: LD_INT 4
62728: NEG
62729: PUSH
62730: LD_INT 1
62732: PUSH
62733: EMPTY
62734: LIST
62735: LIST
62736: PUSH
62737: LD_INT 5
62739: NEG
62740: PUSH
62741: LD_INT 0
62743: PUSH
62744: EMPTY
62745: LIST
62746: LIST
62747: PUSH
62748: LD_INT 5
62750: NEG
62751: PUSH
62752: LD_INT 1
62754: NEG
62755: PUSH
62756: EMPTY
62757: LIST
62758: LIST
62759: PUSH
62760: LD_INT 5
62762: NEG
62763: PUSH
62764: LD_INT 2
62766: NEG
62767: PUSH
62768: EMPTY
62769: LIST
62770: LIST
62771: PUSH
62772: LD_INT 3
62774: NEG
62775: PUSH
62776: LD_INT 2
62778: PUSH
62779: EMPTY
62780: LIST
62781: LIST
62782: PUSH
62783: EMPTY
62784: LIST
62785: LIST
62786: LIST
62787: LIST
62788: LIST
62789: LIST
62790: LIST
62791: LIST
62792: LIST
62793: LIST
62794: LIST
62795: LIST
62796: LIST
62797: LIST
62798: LIST
62799: LIST
62800: LIST
62801: LIST
62802: LIST
62803: LIST
62804: LIST
62805: LIST
62806: LIST
62807: LIST
62808: LIST
62809: LIST
62810: LIST
62811: LIST
62812: LIST
62813: LIST
62814: LIST
62815: LIST
62816: LIST
62817: LIST
62818: LIST
62819: LIST
62820: LIST
62821: LIST
62822: LIST
62823: LIST
62824: LIST
62825: LIST
62826: LIST
62827: LIST
62828: LIST
62829: ST_TO_ADDR
// end ; end ;
62830: GO 62833
62832: POP
// case btype of b_depot , b_warehouse :
62833: LD_VAR 0 1
62837: PUSH
62838: LD_INT 0
62840: DOUBLE
62841: EQUAL
62842: IFTRUE 62852
62844: LD_INT 1
62846: DOUBLE
62847: EQUAL
62848: IFTRUE 62852
62850: GO 63053
62852: POP
// case nation of nation_american :
62853: LD_VAR 0 5
62857: PUSH
62858: LD_INT 1
62860: DOUBLE
62861: EQUAL
62862: IFTRUE 62866
62864: GO 62922
62866: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
62867: LD_ADDR_VAR 0 9
62871: PUSH
62872: LD_VAR 0 11
62876: PUSH
62877: LD_VAR 0 12
62881: PUSH
62882: LD_VAR 0 13
62886: PUSH
62887: LD_VAR 0 14
62891: PUSH
62892: LD_VAR 0 15
62896: PUSH
62897: LD_VAR 0 16
62901: PUSH
62902: EMPTY
62903: LIST
62904: LIST
62905: LIST
62906: LIST
62907: LIST
62908: LIST
62909: PUSH
62910: LD_VAR 0 4
62914: PUSH
62915: LD_INT 1
62917: PLUS
62918: ARRAY
62919: ST_TO_ADDR
62920: GO 63051
62922: LD_INT 2
62924: DOUBLE
62925: EQUAL
62926: IFTRUE 62930
62928: GO 62986
62930: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
62931: LD_ADDR_VAR 0 9
62935: PUSH
62936: LD_VAR 0 17
62940: PUSH
62941: LD_VAR 0 18
62945: PUSH
62946: LD_VAR 0 19
62950: PUSH
62951: LD_VAR 0 20
62955: PUSH
62956: LD_VAR 0 21
62960: PUSH
62961: LD_VAR 0 22
62965: PUSH
62966: EMPTY
62967: LIST
62968: LIST
62969: LIST
62970: LIST
62971: LIST
62972: LIST
62973: PUSH
62974: LD_VAR 0 4
62978: PUSH
62979: LD_INT 1
62981: PLUS
62982: ARRAY
62983: ST_TO_ADDR
62984: GO 63051
62986: LD_INT 3
62988: DOUBLE
62989: EQUAL
62990: IFTRUE 62994
62992: GO 63050
62994: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
62995: LD_ADDR_VAR 0 9
62999: PUSH
63000: LD_VAR 0 23
63004: PUSH
63005: LD_VAR 0 24
63009: PUSH
63010: LD_VAR 0 25
63014: PUSH
63015: LD_VAR 0 26
63019: PUSH
63020: LD_VAR 0 27
63024: PUSH
63025: LD_VAR 0 28
63029: PUSH
63030: EMPTY
63031: LIST
63032: LIST
63033: LIST
63034: LIST
63035: LIST
63036: LIST
63037: PUSH
63038: LD_VAR 0 4
63042: PUSH
63043: LD_INT 1
63045: PLUS
63046: ARRAY
63047: ST_TO_ADDR
63048: GO 63051
63050: POP
63051: GO 63606
63053: LD_INT 2
63055: DOUBLE
63056: EQUAL
63057: IFTRUE 63067
63059: LD_INT 3
63061: DOUBLE
63062: EQUAL
63063: IFTRUE 63067
63065: GO 63123
63067: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
63068: LD_ADDR_VAR 0 9
63072: PUSH
63073: LD_VAR 0 29
63077: PUSH
63078: LD_VAR 0 30
63082: PUSH
63083: LD_VAR 0 31
63087: PUSH
63088: LD_VAR 0 32
63092: PUSH
63093: LD_VAR 0 33
63097: PUSH
63098: LD_VAR 0 34
63102: PUSH
63103: EMPTY
63104: LIST
63105: LIST
63106: LIST
63107: LIST
63108: LIST
63109: LIST
63110: PUSH
63111: LD_VAR 0 4
63115: PUSH
63116: LD_INT 1
63118: PLUS
63119: ARRAY
63120: ST_TO_ADDR
63121: GO 63606
63123: LD_INT 16
63125: DOUBLE
63126: EQUAL
63127: IFTRUE 63185
63129: LD_INT 17
63131: DOUBLE
63132: EQUAL
63133: IFTRUE 63185
63135: LD_INT 18
63137: DOUBLE
63138: EQUAL
63139: IFTRUE 63185
63141: LD_INT 19
63143: DOUBLE
63144: EQUAL
63145: IFTRUE 63185
63147: LD_INT 22
63149: DOUBLE
63150: EQUAL
63151: IFTRUE 63185
63153: LD_INT 20
63155: DOUBLE
63156: EQUAL
63157: IFTRUE 63185
63159: LD_INT 21
63161: DOUBLE
63162: EQUAL
63163: IFTRUE 63185
63165: LD_INT 23
63167: DOUBLE
63168: EQUAL
63169: IFTRUE 63185
63171: LD_INT 24
63173: DOUBLE
63174: EQUAL
63175: IFTRUE 63185
63177: LD_INT 25
63179: DOUBLE
63180: EQUAL
63181: IFTRUE 63185
63183: GO 63241
63185: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
63186: LD_ADDR_VAR 0 9
63190: PUSH
63191: LD_VAR 0 35
63195: PUSH
63196: LD_VAR 0 36
63200: PUSH
63201: LD_VAR 0 37
63205: PUSH
63206: LD_VAR 0 38
63210: PUSH
63211: LD_VAR 0 39
63215: PUSH
63216: LD_VAR 0 40
63220: PUSH
63221: EMPTY
63222: LIST
63223: LIST
63224: LIST
63225: LIST
63226: LIST
63227: LIST
63228: PUSH
63229: LD_VAR 0 4
63233: PUSH
63234: LD_INT 1
63236: PLUS
63237: ARRAY
63238: ST_TO_ADDR
63239: GO 63606
63241: LD_INT 6
63243: DOUBLE
63244: EQUAL
63245: IFTRUE 63297
63247: LD_INT 7
63249: DOUBLE
63250: EQUAL
63251: IFTRUE 63297
63253: LD_INT 8
63255: DOUBLE
63256: EQUAL
63257: IFTRUE 63297
63259: LD_INT 13
63261: DOUBLE
63262: EQUAL
63263: IFTRUE 63297
63265: LD_INT 12
63267: DOUBLE
63268: EQUAL
63269: IFTRUE 63297
63271: LD_INT 15
63273: DOUBLE
63274: EQUAL
63275: IFTRUE 63297
63277: LD_INT 11
63279: DOUBLE
63280: EQUAL
63281: IFTRUE 63297
63283: LD_INT 14
63285: DOUBLE
63286: EQUAL
63287: IFTRUE 63297
63289: LD_INT 10
63291: DOUBLE
63292: EQUAL
63293: IFTRUE 63297
63295: GO 63353
63297: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
63298: LD_ADDR_VAR 0 9
63302: PUSH
63303: LD_VAR 0 41
63307: PUSH
63308: LD_VAR 0 42
63312: PUSH
63313: LD_VAR 0 43
63317: PUSH
63318: LD_VAR 0 44
63322: PUSH
63323: LD_VAR 0 45
63327: PUSH
63328: LD_VAR 0 46
63332: PUSH
63333: EMPTY
63334: LIST
63335: LIST
63336: LIST
63337: LIST
63338: LIST
63339: LIST
63340: PUSH
63341: LD_VAR 0 4
63345: PUSH
63346: LD_INT 1
63348: PLUS
63349: ARRAY
63350: ST_TO_ADDR
63351: GO 63606
63353: LD_INT 36
63355: DOUBLE
63356: EQUAL
63357: IFTRUE 63361
63359: GO 63417
63361: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
63362: LD_ADDR_VAR 0 9
63366: PUSH
63367: LD_VAR 0 47
63371: PUSH
63372: LD_VAR 0 48
63376: PUSH
63377: LD_VAR 0 49
63381: PUSH
63382: LD_VAR 0 50
63386: PUSH
63387: LD_VAR 0 51
63391: PUSH
63392: LD_VAR 0 52
63396: PUSH
63397: EMPTY
63398: LIST
63399: LIST
63400: LIST
63401: LIST
63402: LIST
63403: LIST
63404: PUSH
63405: LD_VAR 0 4
63409: PUSH
63410: LD_INT 1
63412: PLUS
63413: ARRAY
63414: ST_TO_ADDR
63415: GO 63606
63417: LD_INT 4
63419: DOUBLE
63420: EQUAL
63421: IFTRUE 63443
63423: LD_INT 5
63425: DOUBLE
63426: EQUAL
63427: IFTRUE 63443
63429: LD_INT 34
63431: DOUBLE
63432: EQUAL
63433: IFTRUE 63443
63435: LD_INT 37
63437: DOUBLE
63438: EQUAL
63439: IFTRUE 63443
63441: GO 63499
63443: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
63444: LD_ADDR_VAR 0 9
63448: PUSH
63449: LD_VAR 0 53
63453: PUSH
63454: LD_VAR 0 54
63458: PUSH
63459: LD_VAR 0 55
63463: PUSH
63464: LD_VAR 0 56
63468: PUSH
63469: LD_VAR 0 57
63473: PUSH
63474: LD_VAR 0 58
63478: PUSH
63479: EMPTY
63480: LIST
63481: LIST
63482: LIST
63483: LIST
63484: LIST
63485: LIST
63486: PUSH
63487: LD_VAR 0 4
63491: PUSH
63492: LD_INT 1
63494: PLUS
63495: ARRAY
63496: ST_TO_ADDR
63497: GO 63606
63499: LD_INT 31
63501: DOUBLE
63502: EQUAL
63503: IFTRUE 63549
63505: LD_INT 32
63507: DOUBLE
63508: EQUAL
63509: IFTRUE 63549
63511: LD_INT 33
63513: DOUBLE
63514: EQUAL
63515: IFTRUE 63549
63517: LD_INT 27
63519: DOUBLE
63520: EQUAL
63521: IFTRUE 63549
63523: LD_INT 26
63525: DOUBLE
63526: EQUAL
63527: IFTRUE 63549
63529: LD_INT 28
63531: DOUBLE
63532: EQUAL
63533: IFTRUE 63549
63535: LD_INT 29
63537: DOUBLE
63538: EQUAL
63539: IFTRUE 63549
63541: LD_INT 30
63543: DOUBLE
63544: EQUAL
63545: IFTRUE 63549
63547: GO 63605
63549: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
63550: LD_ADDR_VAR 0 9
63554: PUSH
63555: LD_VAR 0 59
63559: PUSH
63560: LD_VAR 0 60
63564: PUSH
63565: LD_VAR 0 61
63569: PUSH
63570: LD_VAR 0 62
63574: PUSH
63575: LD_VAR 0 63
63579: PUSH
63580: LD_VAR 0 64
63584: PUSH
63585: EMPTY
63586: LIST
63587: LIST
63588: LIST
63589: LIST
63590: LIST
63591: LIST
63592: PUSH
63593: LD_VAR 0 4
63597: PUSH
63598: LD_INT 1
63600: PLUS
63601: ARRAY
63602: ST_TO_ADDR
63603: GO 63606
63605: POP
// temp_list2 = [ ] ;
63606: LD_ADDR_VAR 0 10
63610: PUSH
63611: EMPTY
63612: ST_TO_ADDR
// for i in temp_list do
63613: LD_ADDR_VAR 0 8
63617: PUSH
63618: LD_VAR 0 9
63622: PUSH
63623: FOR_IN
63624: IFFALSE 63676
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
63626: LD_ADDR_VAR 0 10
63630: PUSH
63631: LD_VAR 0 10
63635: PUSH
63636: LD_VAR 0 8
63640: PUSH
63641: LD_INT 1
63643: ARRAY
63644: PUSH
63645: LD_VAR 0 2
63649: PLUS
63650: PUSH
63651: LD_VAR 0 8
63655: PUSH
63656: LD_INT 2
63658: ARRAY
63659: PUSH
63660: LD_VAR 0 3
63664: PLUS
63665: PUSH
63666: EMPTY
63667: LIST
63668: LIST
63669: PUSH
63670: EMPTY
63671: LIST
63672: ADD
63673: ST_TO_ADDR
63674: GO 63623
63676: POP
63677: POP
// result = temp_list2 ;
63678: LD_ADDR_VAR 0 7
63682: PUSH
63683: LD_VAR 0 10
63687: ST_TO_ADDR
// end ;
63688: LD_VAR 0 7
63692: RET
// export function EnemyInRange ( unit , dist ) ; begin
63693: LD_INT 0
63695: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
63696: LD_ADDR_VAR 0 3
63700: PUSH
63701: LD_VAR 0 1
63705: PPUSH
63706: CALL_OW 255
63710: PPUSH
63711: LD_VAR 0 1
63715: PPUSH
63716: CALL_OW 250
63720: PPUSH
63721: LD_VAR 0 1
63725: PPUSH
63726: CALL_OW 251
63730: PPUSH
63731: LD_VAR 0 2
63735: PPUSH
63736: CALL 36950 0 4
63740: PUSH
63741: LD_INT 4
63743: ARRAY
63744: ST_TO_ADDR
// end ;
63745: LD_VAR 0 3
63749: RET
// export function PlayerSeeMe ( unit ) ; begin
63750: LD_INT 0
63752: PPUSH
// result := See ( your_side , unit ) ;
63753: LD_ADDR_VAR 0 2
63757: PUSH
63758: LD_OWVAR 2
63762: PPUSH
63763: LD_VAR 0 1
63767: PPUSH
63768: CALL_OW 292
63772: ST_TO_ADDR
// end ;
63773: LD_VAR 0 2
63777: RET
// export function ReverseDir ( unit ) ; begin
63778: LD_INT 0
63780: PPUSH
// if not unit then
63781: LD_VAR 0 1
63785: NOT
63786: IFFALSE 63790
// exit ;
63788: GO 63813
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
63790: LD_ADDR_VAR 0 2
63794: PUSH
63795: LD_VAR 0 1
63799: PPUSH
63800: CALL_OW 254
63804: PUSH
63805: LD_INT 3
63807: PLUS
63808: PUSH
63809: LD_INT 6
63811: MOD
63812: ST_TO_ADDR
// end ;
63813: LD_VAR 0 2
63817: RET
// export function ReverseArray ( array ) ; var i ; begin
63818: LD_INT 0
63820: PPUSH
63821: PPUSH
// if not array then
63822: LD_VAR 0 1
63826: NOT
63827: IFFALSE 63831
// exit ;
63829: GO 63886
// result := [ ] ;
63831: LD_ADDR_VAR 0 2
63835: PUSH
63836: EMPTY
63837: ST_TO_ADDR
// for i := array downto 1 do
63838: LD_ADDR_VAR 0 3
63842: PUSH
63843: DOUBLE
63844: LD_VAR 0 1
63848: INC
63849: ST_TO_ADDR
63850: LD_INT 1
63852: PUSH
63853: FOR_DOWNTO
63854: IFFALSE 63884
// result := Join ( result , array [ i ] ) ;
63856: LD_ADDR_VAR 0 2
63860: PUSH
63861: LD_VAR 0 2
63865: PPUSH
63866: LD_VAR 0 1
63870: PUSH
63871: LD_VAR 0 3
63875: ARRAY
63876: PPUSH
63877: CALL 68728 0 2
63881: ST_TO_ADDR
63882: GO 63853
63884: POP
63885: POP
// end ;
63886: LD_VAR 0 2
63890: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
63891: LD_INT 0
63893: PPUSH
63894: PPUSH
63895: PPUSH
63896: PPUSH
63897: PPUSH
63898: PPUSH
// if not unit or not hexes then
63899: LD_VAR 0 1
63903: NOT
63904: IFTRUE 63913
63906: PUSH
63907: LD_VAR 0 2
63911: NOT
63912: OR
63913: IFFALSE 63917
// exit ;
63915: GO 64040
// dist := 9999 ;
63917: LD_ADDR_VAR 0 5
63921: PUSH
63922: LD_INT 9999
63924: ST_TO_ADDR
// for i = 1 to hexes do
63925: LD_ADDR_VAR 0 4
63929: PUSH
63930: DOUBLE
63931: LD_INT 1
63933: DEC
63934: ST_TO_ADDR
63935: LD_VAR 0 2
63939: PUSH
63940: FOR_TO
63941: IFFALSE 64028
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
63943: LD_ADDR_VAR 0 6
63947: PUSH
63948: LD_VAR 0 1
63952: PPUSH
63953: LD_VAR 0 2
63957: PUSH
63958: LD_VAR 0 4
63962: ARRAY
63963: PUSH
63964: LD_INT 1
63966: ARRAY
63967: PPUSH
63968: LD_VAR 0 2
63972: PUSH
63973: LD_VAR 0 4
63977: ARRAY
63978: PUSH
63979: LD_INT 2
63981: ARRAY
63982: PPUSH
63983: CALL_OW 297
63987: ST_TO_ADDR
// if tdist < dist then
63988: LD_VAR 0 6
63992: PUSH
63993: LD_VAR 0 5
63997: LESS
63998: IFFALSE 64026
// begin hex := hexes [ i ] ;
64000: LD_ADDR_VAR 0 8
64004: PUSH
64005: LD_VAR 0 2
64009: PUSH
64010: LD_VAR 0 4
64014: ARRAY
64015: ST_TO_ADDR
// dist := tdist ;
64016: LD_ADDR_VAR 0 5
64020: PUSH
64021: LD_VAR 0 6
64025: ST_TO_ADDR
// end ; end ;
64026: GO 63940
64028: POP
64029: POP
// result := hex ;
64030: LD_ADDR_VAR 0 3
64034: PUSH
64035: LD_VAR 0 8
64039: ST_TO_ADDR
// end ;
64040: LD_VAR 0 3
64044: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
64045: LD_INT 0
64047: PPUSH
64048: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
64049: LD_VAR 0 1
64053: NOT
64054: IFTRUE 64093
64056: PUSH
64057: LD_VAR 0 1
64061: PUSH
64062: LD_INT 21
64064: PUSH
64065: LD_INT 2
64067: PUSH
64068: EMPTY
64069: LIST
64070: LIST
64071: PUSH
64072: LD_INT 23
64074: PUSH
64075: LD_INT 2
64077: PUSH
64078: EMPTY
64079: LIST
64080: LIST
64081: PUSH
64082: EMPTY
64083: LIST
64084: LIST
64085: PPUSH
64086: CALL_OW 69
64090: IN
64091: NOT
64092: OR
64093: IFFALSE 64097
// exit ;
64095: GO 64144
// for i = 1 to 3 do
64097: LD_ADDR_VAR 0 3
64101: PUSH
64102: DOUBLE
64103: LD_INT 1
64105: DEC
64106: ST_TO_ADDR
64107: LD_INT 3
64109: PUSH
64110: FOR_TO
64111: IFFALSE 64142
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
64113: LD_VAR 0 1
64117: PPUSH
64118: CALL_OW 250
64122: PPUSH
64123: LD_VAR 0 1
64127: PPUSH
64128: CALL_OW 251
64132: PPUSH
64133: LD_INT 1
64135: PPUSH
64136: CALL_OW 453
64140: GO 64110
64142: POP
64143: POP
// end ;
64144: LD_VAR 0 2
64148: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
64149: LD_INT 0
64151: PPUSH
64152: PPUSH
64153: PPUSH
64154: PPUSH
64155: PPUSH
64156: PPUSH
// if not unit or not enemy_unit then
64157: LD_VAR 0 1
64161: NOT
64162: IFTRUE 64171
64164: PUSH
64165: LD_VAR 0 2
64169: NOT
64170: OR
64171: IFFALSE 64175
// exit ;
64173: GO 64646
// if GetLives ( i ) < 250 then
64175: LD_VAR 0 4
64179: PPUSH
64180: CALL_OW 256
64184: PUSH
64185: LD_INT 250
64187: LESS
64188: IFFALSE 64201
// begin ComAutodestruct ( i ) ;
64190: LD_VAR 0 4
64194: PPUSH
64195: CALL 64045 0 1
// exit ;
64199: GO 64646
// end ; x := GetX ( enemy_unit ) ;
64201: LD_ADDR_VAR 0 7
64205: PUSH
64206: LD_VAR 0 2
64210: PPUSH
64211: CALL_OW 250
64215: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
64216: LD_ADDR_VAR 0 8
64220: PUSH
64221: LD_VAR 0 2
64225: PPUSH
64226: CALL_OW 251
64230: ST_TO_ADDR
// if not x or not y then
64231: LD_VAR 0 7
64235: NOT
64236: IFTRUE 64245
64238: PUSH
64239: LD_VAR 0 8
64243: NOT
64244: OR
64245: IFFALSE 64249
// exit ;
64247: GO 64646
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
64249: LD_ADDR_VAR 0 6
64253: PUSH
64254: LD_VAR 0 7
64258: PPUSH
64259: LD_INT 0
64261: PPUSH
64262: LD_INT 4
64264: PPUSH
64265: CALL_OW 272
64269: PUSH
64270: LD_VAR 0 8
64274: PPUSH
64275: LD_INT 0
64277: PPUSH
64278: LD_INT 4
64280: PPUSH
64281: CALL_OW 273
64285: PUSH
64286: EMPTY
64287: LIST
64288: LIST
64289: PUSH
64290: LD_VAR 0 7
64294: PPUSH
64295: LD_INT 1
64297: PPUSH
64298: LD_INT 4
64300: PPUSH
64301: CALL_OW 272
64305: PUSH
64306: LD_VAR 0 8
64310: PPUSH
64311: LD_INT 1
64313: PPUSH
64314: LD_INT 4
64316: PPUSH
64317: CALL_OW 273
64321: PUSH
64322: EMPTY
64323: LIST
64324: LIST
64325: PUSH
64326: LD_VAR 0 7
64330: PPUSH
64331: LD_INT 2
64333: PPUSH
64334: LD_INT 4
64336: PPUSH
64337: CALL_OW 272
64341: PUSH
64342: LD_VAR 0 8
64346: PPUSH
64347: LD_INT 2
64349: PPUSH
64350: LD_INT 4
64352: PPUSH
64353: CALL_OW 273
64357: PUSH
64358: EMPTY
64359: LIST
64360: LIST
64361: PUSH
64362: LD_VAR 0 7
64366: PPUSH
64367: LD_INT 3
64369: PPUSH
64370: LD_INT 4
64372: PPUSH
64373: CALL_OW 272
64377: PUSH
64378: LD_VAR 0 8
64382: PPUSH
64383: LD_INT 3
64385: PPUSH
64386: LD_INT 4
64388: PPUSH
64389: CALL_OW 273
64393: PUSH
64394: EMPTY
64395: LIST
64396: LIST
64397: PUSH
64398: LD_VAR 0 7
64402: PPUSH
64403: LD_INT 4
64405: PPUSH
64406: LD_INT 4
64408: PPUSH
64409: CALL_OW 272
64413: PUSH
64414: LD_VAR 0 8
64418: PPUSH
64419: LD_INT 4
64421: PPUSH
64422: LD_INT 4
64424: PPUSH
64425: CALL_OW 273
64429: PUSH
64430: EMPTY
64431: LIST
64432: LIST
64433: PUSH
64434: LD_VAR 0 7
64438: PPUSH
64439: LD_INT 5
64441: PPUSH
64442: LD_INT 4
64444: PPUSH
64445: CALL_OW 272
64449: PUSH
64450: LD_VAR 0 8
64454: PPUSH
64455: LD_INT 5
64457: PPUSH
64458: LD_INT 4
64460: PPUSH
64461: CALL_OW 273
64465: PUSH
64466: EMPTY
64467: LIST
64468: LIST
64469: PUSH
64470: EMPTY
64471: LIST
64472: LIST
64473: LIST
64474: LIST
64475: LIST
64476: LIST
64477: ST_TO_ADDR
// for i = tmp downto 1 do
64478: LD_ADDR_VAR 0 4
64482: PUSH
64483: DOUBLE
64484: LD_VAR 0 6
64488: INC
64489: ST_TO_ADDR
64490: LD_INT 1
64492: PUSH
64493: FOR_DOWNTO
64494: IFFALSE 64597
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
64496: LD_VAR 0 6
64500: PUSH
64501: LD_VAR 0 4
64505: ARRAY
64506: PUSH
64507: LD_INT 1
64509: ARRAY
64510: PPUSH
64511: LD_VAR 0 6
64515: PUSH
64516: LD_VAR 0 4
64520: ARRAY
64521: PUSH
64522: LD_INT 2
64524: ARRAY
64525: PPUSH
64526: CALL_OW 488
64530: NOT
64531: IFTRUE 64573
64533: PUSH
64534: LD_VAR 0 6
64538: PUSH
64539: LD_VAR 0 4
64543: ARRAY
64544: PUSH
64545: LD_INT 1
64547: ARRAY
64548: PPUSH
64549: LD_VAR 0 6
64553: PUSH
64554: LD_VAR 0 4
64558: ARRAY
64559: PUSH
64560: LD_INT 2
64562: ARRAY
64563: PPUSH
64564: CALL_OW 428
64568: PUSH
64569: LD_INT 0
64571: NONEQUAL
64572: OR
64573: IFFALSE 64595
// tmp := Delete ( tmp , i ) ;
64575: LD_ADDR_VAR 0 6
64579: PUSH
64580: LD_VAR 0 6
64584: PPUSH
64585: LD_VAR 0 4
64589: PPUSH
64590: CALL_OW 3
64594: ST_TO_ADDR
64595: GO 64493
64597: POP
64598: POP
// j := GetClosestHex ( unit , tmp ) ;
64599: LD_ADDR_VAR 0 5
64603: PUSH
64604: LD_VAR 0 1
64608: PPUSH
64609: LD_VAR 0 6
64613: PPUSH
64614: CALL 63891 0 2
64618: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
64619: LD_VAR 0 1
64623: PPUSH
64624: LD_VAR 0 5
64628: PUSH
64629: LD_INT 1
64631: ARRAY
64632: PPUSH
64633: LD_VAR 0 5
64637: PUSH
64638: LD_INT 2
64640: ARRAY
64641: PPUSH
64642: CALL_OW 111
// end ;
64646: LD_VAR 0 3
64650: RET
// export function PrepareApemanSoldier ( ) ; begin
64651: LD_INT 0
64653: PPUSH
// uc_nation := 0 ;
64654: LD_ADDR_OWVAR 21
64658: PUSH
64659: LD_INT 0
64661: ST_TO_ADDR
// hc_sex := sex_male ;
64662: LD_ADDR_OWVAR 27
64666: PUSH
64667: LD_INT 1
64669: ST_TO_ADDR
// hc_name :=  ;
64670: LD_ADDR_OWVAR 26
64674: PUSH
64675: LD_STRING 
64677: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
64678: LD_ADDR_OWVAR 28
64682: PUSH
64683: LD_INT 15
64685: ST_TO_ADDR
// hc_gallery :=  ;
64686: LD_ADDR_OWVAR 33
64690: PUSH
64691: LD_STRING 
64693: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
64694: LD_ADDR_OWVAR 31
64698: PUSH
64699: LD_INT 0
64701: PPUSH
64702: LD_INT 3
64704: PPUSH
64705: CALL_OW 12
64709: PUSH
64710: LD_INT 0
64712: PPUSH
64713: LD_INT 3
64715: PPUSH
64716: CALL_OW 12
64720: PUSH
64721: LD_INT 0
64723: PUSH
64724: LD_INT 0
64726: PUSH
64727: EMPTY
64728: LIST
64729: LIST
64730: LIST
64731: LIST
64732: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
64733: LD_ADDR_OWVAR 29
64737: PUSH
64738: LD_INT 12
64740: PUSH
64741: LD_INT 12
64743: PUSH
64744: EMPTY
64745: LIST
64746: LIST
64747: ST_TO_ADDR
// end ;
64748: LD_VAR 0 1
64752: RET
// export function PrepareApemanEngineer ( ) ; begin
64753: LD_INT 0
64755: PPUSH
// uc_nation := 0 ;
64756: LD_ADDR_OWVAR 21
64760: PUSH
64761: LD_INT 0
64763: ST_TO_ADDR
// hc_sex := sex_male ;
64764: LD_ADDR_OWVAR 27
64768: PUSH
64769: LD_INT 1
64771: ST_TO_ADDR
// hc_name :=  ;
64772: LD_ADDR_OWVAR 26
64776: PUSH
64777: LD_STRING 
64779: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
64780: LD_ADDR_OWVAR 28
64784: PUSH
64785: LD_INT 16
64787: ST_TO_ADDR
// hc_gallery :=  ;
64788: LD_ADDR_OWVAR 33
64792: PUSH
64793: LD_STRING 
64795: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
64796: LD_ADDR_OWVAR 31
64800: PUSH
64801: LD_INT 0
64803: PPUSH
64804: LD_INT 3
64806: PPUSH
64807: CALL_OW 12
64811: PUSH
64812: LD_INT 0
64814: PPUSH
64815: LD_INT 3
64817: PPUSH
64818: CALL_OW 12
64822: PUSH
64823: LD_INT 0
64825: PUSH
64826: LD_INT 0
64828: PUSH
64829: EMPTY
64830: LIST
64831: LIST
64832: LIST
64833: LIST
64834: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
64835: LD_ADDR_OWVAR 29
64839: PUSH
64840: LD_INT 12
64842: PUSH
64843: LD_INT 12
64845: PUSH
64846: EMPTY
64847: LIST
64848: LIST
64849: ST_TO_ADDR
// end ;
64850: LD_VAR 0 1
64854: RET
// export function PrepareApeman ( agressivity ) ; begin
64855: LD_INT 0
64857: PPUSH
// uc_side := 0 ;
64858: LD_ADDR_OWVAR 20
64862: PUSH
64863: LD_INT 0
64865: ST_TO_ADDR
// uc_nation := 0 ;
64866: LD_ADDR_OWVAR 21
64870: PUSH
64871: LD_INT 0
64873: ST_TO_ADDR
// hc_sex := sex_male ;
64874: LD_ADDR_OWVAR 27
64878: PUSH
64879: LD_INT 1
64881: ST_TO_ADDR
// hc_class := class_apeman ;
64882: LD_ADDR_OWVAR 28
64886: PUSH
64887: LD_INT 12
64889: ST_TO_ADDR
// hc_gallery :=  ;
64890: LD_ADDR_OWVAR 33
64894: PUSH
64895: LD_STRING 
64897: ST_TO_ADDR
// hc_name :=  ;
64898: LD_ADDR_OWVAR 26
64902: PUSH
64903: LD_STRING 
64905: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
64906: LD_ADDR_OWVAR 29
64910: PUSH
64911: LD_INT 12
64913: PUSH
64914: LD_INT 12
64916: PUSH
64917: EMPTY
64918: LIST
64919: LIST
64920: ST_TO_ADDR
// if agressivity = 0 then
64921: LD_VAR 0 1
64925: PUSH
64926: LD_INT 0
64928: EQUAL
64929: IFFALSE 64941
// hc_agressivity := 0 else
64931: LD_ADDR_OWVAR 35
64935: PUSH
64936: LD_INT 0
64938: ST_TO_ADDR
64939: GO 64962
// hc_agressivity := rand ( - agressivity , agressivity ) ;
64941: LD_ADDR_OWVAR 35
64945: PUSH
64946: LD_VAR 0 1
64950: NEG
64951: PPUSH
64952: LD_VAR 0 1
64956: PPUSH
64957: CALL_OW 12
64961: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
64962: LD_ADDR_OWVAR 31
64966: PUSH
64967: LD_INT 0
64969: PPUSH
64970: LD_INT 3
64972: PPUSH
64973: CALL_OW 12
64977: PUSH
64978: LD_INT 0
64980: PPUSH
64981: LD_INT 3
64983: PPUSH
64984: CALL_OW 12
64988: PUSH
64989: LD_INT 0
64991: PUSH
64992: LD_INT 0
64994: PUSH
64995: EMPTY
64996: LIST
64997: LIST
64998: LIST
64999: LIST
65000: ST_TO_ADDR
// end ;
65001: LD_VAR 0 2
65005: RET
// export function PrepareTiger ( agressivity ) ; begin
65006: LD_INT 0
65008: PPUSH
// uc_side := 0 ;
65009: LD_ADDR_OWVAR 20
65013: PUSH
65014: LD_INT 0
65016: ST_TO_ADDR
// uc_nation := 0 ;
65017: LD_ADDR_OWVAR 21
65021: PUSH
65022: LD_INT 0
65024: ST_TO_ADDR
// InitHc ;
65025: CALL_OW 19
// hc_class := class_tiger ;
65029: LD_ADDR_OWVAR 28
65033: PUSH
65034: LD_INT 14
65036: ST_TO_ADDR
// hc_gallery :=  ;
65037: LD_ADDR_OWVAR 33
65041: PUSH
65042: LD_STRING 
65044: ST_TO_ADDR
// hc_name :=  ;
65045: LD_ADDR_OWVAR 26
65049: PUSH
65050: LD_STRING 
65052: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
65053: LD_ADDR_OWVAR 35
65057: PUSH
65058: LD_VAR 0 1
65062: NEG
65063: PPUSH
65064: LD_VAR 0 1
65068: PPUSH
65069: CALL_OW 12
65073: ST_TO_ADDR
// end ;
65074: LD_VAR 0 2
65078: RET
// export function PrepareEnchidna ( ) ; begin
65079: LD_INT 0
65081: PPUSH
// uc_side := 0 ;
65082: LD_ADDR_OWVAR 20
65086: PUSH
65087: LD_INT 0
65089: ST_TO_ADDR
// uc_nation := 0 ;
65090: LD_ADDR_OWVAR 21
65094: PUSH
65095: LD_INT 0
65097: ST_TO_ADDR
// InitHc ;
65098: CALL_OW 19
// hc_class := class_baggie ;
65102: LD_ADDR_OWVAR 28
65106: PUSH
65107: LD_INT 13
65109: ST_TO_ADDR
// hc_gallery :=  ;
65110: LD_ADDR_OWVAR 33
65114: PUSH
65115: LD_STRING 
65117: ST_TO_ADDR
// hc_name :=  ;
65118: LD_ADDR_OWVAR 26
65122: PUSH
65123: LD_STRING 
65125: ST_TO_ADDR
// end ;
65126: LD_VAR 0 1
65130: RET
// export function PrepareFrog ( ) ; begin
65131: LD_INT 0
65133: PPUSH
// uc_side := 0 ;
65134: LD_ADDR_OWVAR 20
65138: PUSH
65139: LD_INT 0
65141: ST_TO_ADDR
// uc_nation := 0 ;
65142: LD_ADDR_OWVAR 21
65146: PUSH
65147: LD_INT 0
65149: ST_TO_ADDR
// InitHc ;
65150: CALL_OW 19
// hc_class := class_frog ;
65154: LD_ADDR_OWVAR 28
65158: PUSH
65159: LD_INT 19
65161: ST_TO_ADDR
// hc_gallery :=  ;
65162: LD_ADDR_OWVAR 33
65166: PUSH
65167: LD_STRING 
65169: ST_TO_ADDR
// hc_name :=  ;
65170: LD_ADDR_OWVAR 26
65174: PUSH
65175: LD_STRING 
65177: ST_TO_ADDR
// end ;
65178: LD_VAR 0 1
65182: RET
// export function PrepareFish ( ) ; begin
65183: LD_INT 0
65185: PPUSH
// uc_side := 0 ;
65186: LD_ADDR_OWVAR 20
65190: PUSH
65191: LD_INT 0
65193: ST_TO_ADDR
// uc_nation := 0 ;
65194: LD_ADDR_OWVAR 21
65198: PUSH
65199: LD_INT 0
65201: ST_TO_ADDR
// InitHc ;
65202: CALL_OW 19
// hc_class := class_fish ;
65206: LD_ADDR_OWVAR 28
65210: PUSH
65211: LD_INT 20
65213: ST_TO_ADDR
// hc_gallery :=  ;
65214: LD_ADDR_OWVAR 33
65218: PUSH
65219: LD_STRING 
65221: ST_TO_ADDR
// hc_name :=  ;
65222: LD_ADDR_OWVAR 26
65226: PUSH
65227: LD_STRING 
65229: ST_TO_ADDR
// end ;
65230: LD_VAR 0 1
65234: RET
// export function PrepareBird ( ) ; begin
65235: LD_INT 0
65237: PPUSH
// uc_side := 0 ;
65238: LD_ADDR_OWVAR 20
65242: PUSH
65243: LD_INT 0
65245: ST_TO_ADDR
// uc_nation := 0 ;
65246: LD_ADDR_OWVAR 21
65250: PUSH
65251: LD_INT 0
65253: ST_TO_ADDR
// InitHc ;
65254: CALL_OW 19
// hc_class := class_phororhacos ;
65258: LD_ADDR_OWVAR 28
65262: PUSH
65263: LD_INT 18
65265: ST_TO_ADDR
// hc_gallery :=  ;
65266: LD_ADDR_OWVAR 33
65270: PUSH
65271: LD_STRING 
65273: ST_TO_ADDR
// hc_name :=  ;
65274: LD_ADDR_OWVAR 26
65278: PUSH
65279: LD_STRING 
65281: ST_TO_ADDR
// end ;
65282: LD_VAR 0 1
65286: RET
// export function PrepareHorse ( ) ; begin
65287: LD_INT 0
65289: PPUSH
// uc_side := 0 ;
65290: LD_ADDR_OWVAR 20
65294: PUSH
65295: LD_INT 0
65297: ST_TO_ADDR
// uc_nation := 0 ;
65298: LD_ADDR_OWVAR 21
65302: PUSH
65303: LD_INT 0
65305: ST_TO_ADDR
// InitHc ;
65306: CALL_OW 19
// hc_class := class_horse ;
65310: LD_ADDR_OWVAR 28
65314: PUSH
65315: LD_INT 21
65317: ST_TO_ADDR
// hc_gallery :=  ;
65318: LD_ADDR_OWVAR 33
65322: PUSH
65323: LD_STRING 
65325: ST_TO_ADDR
// hc_name :=  ;
65326: LD_ADDR_OWVAR 26
65330: PUSH
65331: LD_STRING 
65333: ST_TO_ADDR
// end ;
65334: LD_VAR 0 1
65338: RET
// export function PrepareMastodont ( ) ; begin
65339: LD_INT 0
65341: PPUSH
// uc_side := 0 ;
65342: LD_ADDR_OWVAR 20
65346: PUSH
65347: LD_INT 0
65349: ST_TO_ADDR
// uc_nation := 0 ;
65350: LD_ADDR_OWVAR 21
65354: PUSH
65355: LD_INT 0
65357: ST_TO_ADDR
// vc_chassis := class_mastodont ;
65358: LD_ADDR_OWVAR 37
65362: PUSH
65363: LD_INT 31
65365: ST_TO_ADDR
// vc_control := control_rider ;
65366: LD_ADDR_OWVAR 38
65370: PUSH
65371: LD_INT 4
65373: ST_TO_ADDR
// end ;
65374: LD_VAR 0 1
65378: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
65379: LD_INT 0
65381: PPUSH
65382: PPUSH
65383: PPUSH
// uc_side = 0 ;
65384: LD_ADDR_OWVAR 20
65388: PUSH
65389: LD_INT 0
65391: ST_TO_ADDR
// uc_nation = 0 ;
65392: LD_ADDR_OWVAR 21
65396: PUSH
65397: LD_INT 0
65399: ST_TO_ADDR
// InitHc_All ( ) ;
65400: CALL_OW 584
// InitVc ;
65404: CALL_OW 20
// if mastodonts then
65408: LD_VAR 0 6
65412: IFFALSE 65479
// for i = 1 to mastodonts do
65414: LD_ADDR_VAR 0 11
65418: PUSH
65419: DOUBLE
65420: LD_INT 1
65422: DEC
65423: ST_TO_ADDR
65424: LD_VAR 0 6
65428: PUSH
65429: FOR_TO
65430: IFFALSE 65477
// begin vc_chassis := 31 ;
65432: LD_ADDR_OWVAR 37
65436: PUSH
65437: LD_INT 31
65439: ST_TO_ADDR
// vc_control := control_rider ;
65440: LD_ADDR_OWVAR 38
65444: PUSH
65445: LD_INT 4
65447: ST_TO_ADDR
// animal := CreateVehicle ;
65448: LD_ADDR_VAR 0 12
65452: PUSH
65453: CALL_OW 45
65457: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65458: LD_VAR 0 12
65462: PPUSH
65463: LD_VAR 0 8
65467: PPUSH
65468: LD_INT 0
65470: PPUSH
65471: CALL 67621 0 3
// end ;
65475: GO 65429
65477: POP
65478: POP
// if horses then
65479: LD_VAR 0 5
65483: IFFALSE 65550
// for i = 1 to horses do
65485: LD_ADDR_VAR 0 11
65489: PUSH
65490: DOUBLE
65491: LD_INT 1
65493: DEC
65494: ST_TO_ADDR
65495: LD_VAR 0 5
65499: PUSH
65500: FOR_TO
65501: IFFALSE 65548
// begin hc_class := 21 ;
65503: LD_ADDR_OWVAR 28
65507: PUSH
65508: LD_INT 21
65510: ST_TO_ADDR
// hc_gallery :=  ;
65511: LD_ADDR_OWVAR 33
65515: PUSH
65516: LD_STRING 
65518: ST_TO_ADDR
// animal := CreateHuman ;
65519: LD_ADDR_VAR 0 12
65523: PUSH
65524: CALL_OW 44
65528: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65529: LD_VAR 0 12
65533: PPUSH
65534: LD_VAR 0 8
65538: PPUSH
65539: LD_INT 0
65541: PPUSH
65542: CALL 67621 0 3
// end ;
65546: GO 65500
65548: POP
65549: POP
// if birds then
65550: LD_VAR 0 1
65554: IFFALSE 65621
// for i = 1 to birds do
65556: LD_ADDR_VAR 0 11
65560: PUSH
65561: DOUBLE
65562: LD_INT 1
65564: DEC
65565: ST_TO_ADDR
65566: LD_VAR 0 1
65570: PUSH
65571: FOR_TO
65572: IFFALSE 65619
// begin hc_class := 18 ;
65574: LD_ADDR_OWVAR 28
65578: PUSH
65579: LD_INT 18
65581: ST_TO_ADDR
// hc_gallery =  ;
65582: LD_ADDR_OWVAR 33
65586: PUSH
65587: LD_STRING 
65589: ST_TO_ADDR
// animal := CreateHuman ;
65590: LD_ADDR_VAR 0 12
65594: PUSH
65595: CALL_OW 44
65599: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65600: LD_VAR 0 12
65604: PPUSH
65605: LD_VAR 0 8
65609: PPUSH
65610: LD_INT 0
65612: PPUSH
65613: CALL 67621 0 3
// end ;
65617: GO 65571
65619: POP
65620: POP
// if tigers then
65621: LD_VAR 0 2
65625: IFFALSE 65709
// for i = 1 to tigers do
65627: LD_ADDR_VAR 0 11
65631: PUSH
65632: DOUBLE
65633: LD_INT 1
65635: DEC
65636: ST_TO_ADDR
65637: LD_VAR 0 2
65641: PUSH
65642: FOR_TO
65643: IFFALSE 65707
// begin hc_class = class_tiger ;
65645: LD_ADDR_OWVAR 28
65649: PUSH
65650: LD_INT 14
65652: ST_TO_ADDR
// hc_gallery =  ;
65653: LD_ADDR_OWVAR 33
65657: PUSH
65658: LD_STRING 
65660: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
65661: LD_ADDR_OWVAR 35
65665: PUSH
65666: LD_INT 7
65668: NEG
65669: PPUSH
65670: LD_INT 7
65672: PPUSH
65673: CALL_OW 12
65677: ST_TO_ADDR
// animal := CreateHuman ;
65678: LD_ADDR_VAR 0 12
65682: PUSH
65683: CALL_OW 44
65687: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65688: LD_VAR 0 12
65692: PPUSH
65693: LD_VAR 0 8
65697: PPUSH
65698: LD_INT 0
65700: PPUSH
65701: CALL 67621 0 3
// end ;
65705: GO 65642
65707: POP
65708: POP
// if apemans then
65709: LD_VAR 0 3
65713: IFFALSE 65836
// for i = 1 to apemans do
65715: LD_ADDR_VAR 0 11
65719: PUSH
65720: DOUBLE
65721: LD_INT 1
65723: DEC
65724: ST_TO_ADDR
65725: LD_VAR 0 3
65729: PUSH
65730: FOR_TO
65731: IFFALSE 65834
// begin hc_class = class_apeman ;
65733: LD_ADDR_OWVAR 28
65737: PUSH
65738: LD_INT 12
65740: ST_TO_ADDR
// hc_gallery =  ;
65741: LD_ADDR_OWVAR 33
65745: PUSH
65746: LD_STRING 
65748: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
65749: LD_ADDR_OWVAR 35
65753: PUSH
65754: LD_INT 2
65756: NEG
65757: PPUSH
65758: LD_INT 2
65760: PPUSH
65761: CALL_OW 12
65765: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
65766: LD_ADDR_OWVAR 31
65770: PUSH
65771: LD_INT 1
65773: PPUSH
65774: LD_INT 3
65776: PPUSH
65777: CALL_OW 12
65781: PUSH
65782: LD_INT 1
65784: PPUSH
65785: LD_INT 3
65787: PPUSH
65788: CALL_OW 12
65792: PUSH
65793: LD_INT 0
65795: PUSH
65796: LD_INT 0
65798: PUSH
65799: EMPTY
65800: LIST
65801: LIST
65802: LIST
65803: LIST
65804: ST_TO_ADDR
// animal := CreateHuman ;
65805: LD_ADDR_VAR 0 12
65809: PUSH
65810: CALL_OW 44
65814: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65815: LD_VAR 0 12
65819: PPUSH
65820: LD_VAR 0 8
65824: PPUSH
65825: LD_INT 0
65827: PPUSH
65828: CALL 67621 0 3
// end ;
65832: GO 65730
65834: POP
65835: POP
// if enchidnas then
65836: LD_VAR 0 4
65840: IFFALSE 65907
// for i = 1 to enchidnas do
65842: LD_ADDR_VAR 0 11
65846: PUSH
65847: DOUBLE
65848: LD_INT 1
65850: DEC
65851: ST_TO_ADDR
65852: LD_VAR 0 4
65856: PUSH
65857: FOR_TO
65858: IFFALSE 65905
// begin hc_class = 13 ;
65860: LD_ADDR_OWVAR 28
65864: PUSH
65865: LD_INT 13
65867: ST_TO_ADDR
// hc_gallery =  ;
65868: LD_ADDR_OWVAR 33
65872: PUSH
65873: LD_STRING 
65875: ST_TO_ADDR
// animal := CreateHuman ;
65876: LD_ADDR_VAR 0 12
65880: PUSH
65881: CALL_OW 44
65885: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65886: LD_VAR 0 12
65890: PPUSH
65891: LD_VAR 0 8
65895: PPUSH
65896: LD_INT 0
65898: PPUSH
65899: CALL 67621 0 3
// end ;
65903: GO 65857
65905: POP
65906: POP
// if fishes then
65907: LD_VAR 0 7
65911: IFFALSE 65978
// for i = 1 to fishes do
65913: LD_ADDR_VAR 0 11
65917: PUSH
65918: DOUBLE
65919: LD_INT 1
65921: DEC
65922: ST_TO_ADDR
65923: LD_VAR 0 7
65927: PUSH
65928: FOR_TO
65929: IFFALSE 65976
// begin hc_class = 20 ;
65931: LD_ADDR_OWVAR 28
65935: PUSH
65936: LD_INT 20
65938: ST_TO_ADDR
// hc_gallery =  ;
65939: LD_ADDR_OWVAR 33
65943: PUSH
65944: LD_STRING 
65946: ST_TO_ADDR
// animal := CreateHuman ;
65947: LD_ADDR_VAR 0 12
65951: PUSH
65952: CALL_OW 44
65956: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
65957: LD_VAR 0 12
65961: PPUSH
65962: LD_VAR 0 9
65966: PPUSH
65967: LD_INT 0
65969: PPUSH
65970: CALL 67621 0 3
// end ;
65974: GO 65928
65976: POP
65977: POP
// end ;
65978: LD_VAR 0 10
65982: RET
// export function WantHeal ( sci , unit ) ; begin
65983: LD_INT 0
65985: PPUSH
// if GetTaskList ( sci ) > 0 then
65986: LD_VAR 0 1
65990: PPUSH
65991: CALL_OW 437
65995: PUSH
65996: LD_INT 0
65998: GREATER
65999: IFFALSE 66071
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
66001: LD_VAR 0 1
66005: PPUSH
66006: CALL_OW 437
66010: PUSH
66011: LD_INT 1
66013: ARRAY
66014: PUSH
66015: LD_INT 1
66017: ARRAY
66018: PUSH
66019: LD_STRING l
66021: EQUAL
66022: IFFALSE 66049
66024: PUSH
66025: LD_VAR 0 1
66029: PPUSH
66030: CALL_OW 437
66034: PUSH
66035: LD_INT 1
66037: ARRAY
66038: PUSH
66039: LD_INT 4
66041: ARRAY
66042: PUSH
66043: LD_VAR 0 2
66047: EQUAL
66048: AND
66049: IFFALSE 66061
// result := true else
66051: LD_ADDR_VAR 0 3
66055: PUSH
66056: LD_INT 1
66058: ST_TO_ADDR
66059: GO 66069
// result := false ;
66061: LD_ADDR_VAR 0 3
66065: PUSH
66066: LD_INT 0
66068: ST_TO_ADDR
// end else
66069: GO 66079
// result := false ;
66071: LD_ADDR_VAR 0 3
66075: PUSH
66076: LD_INT 0
66078: ST_TO_ADDR
// end ;
66079: LD_VAR 0 3
66083: RET
// export function HealTarget ( sci ) ; begin
66084: LD_INT 0
66086: PPUSH
// if not sci then
66087: LD_VAR 0 1
66091: NOT
66092: IFFALSE 66096
// exit ;
66094: GO 66161
// result := 0 ;
66096: LD_ADDR_VAR 0 2
66100: PUSH
66101: LD_INT 0
66103: ST_TO_ADDR
// if GetTaskList ( sci ) then
66104: LD_VAR 0 1
66108: PPUSH
66109: CALL_OW 437
66113: IFFALSE 66161
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
66115: LD_VAR 0 1
66119: PPUSH
66120: CALL_OW 437
66124: PUSH
66125: LD_INT 1
66127: ARRAY
66128: PUSH
66129: LD_INT 1
66131: ARRAY
66132: PUSH
66133: LD_STRING l
66135: EQUAL
66136: IFFALSE 66161
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
66138: LD_ADDR_VAR 0 2
66142: PUSH
66143: LD_VAR 0 1
66147: PPUSH
66148: CALL_OW 437
66152: PUSH
66153: LD_INT 1
66155: ARRAY
66156: PUSH
66157: LD_INT 4
66159: ARRAY
66160: ST_TO_ADDR
// end ;
66161: LD_VAR 0 2
66165: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
66166: LD_INT 0
66168: PPUSH
66169: PPUSH
66170: PPUSH
66171: PPUSH
// if not base_units then
66172: LD_VAR 0 1
66176: NOT
66177: IFFALSE 66181
// exit ;
66179: GO 66268
// result := false ;
66181: LD_ADDR_VAR 0 2
66185: PUSH
66186: LD_INT 0
66188: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
66189: LD_ADDR_VAR 0 5
66193: PUSH
66194: LD_VAR 0 1
66198: PPUSH
66199: LD_INT 21
66201: PUSH
66202: LD_INT 3
66204: PUSH
66205: EMPTY
66206: LIST
66207: LIST
66208: PPUSH
66209: CALL_OW 72
66213: ST_TO_ADDR
// if not tmp then
66214: LD_VAR 0 5
66218: NOT
66219: IFFALSE 66223
// exit ;
66221: GO 66268
// for i in tmp do
66223: LD_ADDR_VAR 0 3
66227: PUSH
66228: LD_VAR 0 5
66232: PUSH
66233: FOR_IN
66234: IFFALSE 66266
// begin result := EnemyInRange ( i , 22 ) ;
66236: LD_ADDR_VAR 0 2
66240: PUSH
66241: LD_VAR 0 3
66245: PPUSH
66246: LD_INT 22
66248: PPUSH
66249: CALL 63693 0 2
66253: ST_TO_ADDR
// if result then
66254: LD_VAR 0 2
66258: IFFALSE 66264
// exit ;
66260: POP
66261: POP
66262: GO 66268
// end ;
66264: GO 66233
66266: POP
66267: POP
// end ;
66268: LD_VAR 0 2
66272: RET
// export function FilterByTag ( units , tag ) ; begin
66273: LD_INT 0
66275: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
66276: LD_ADDR_VAR 0 3
66280: PUSH
66281: LD_VAR 0 1
66285: PPUSH
66286: LD_INT 120
66288: PUSH
66289: LD_VAR 0 2
66293: PUSH
66294: EMPTY
66295: LIST
66296: LIST
66297: PPUSH
66298: CALL_OW 72
66302: ST_TO_ADDR
// end ;
66303: LD_VAR 0 3
66307: RET
// export function IsDriver ( un ) ; begin
66308: LD_INT 0
66310: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
66311: LD_ADDR_VAR 0 2
66315: PUSH
66316: LD_VAR 0 1
66320: PUSH
66321: LD_INT 55
66323: PUSH
66324: EMPTY
66325: LIST
66326: PPUSH
66327: CALL_OW 69
66331: IN
66332: ST_TO_ADDR
// end ;
66333: LD_VAR 0 2
66337: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
66338: LD_INT 0
66340: PPUSH
66341: PPUSH
// list := [ ] ;
66342: LD_ADDR_VAR 0 5
66346: PUSH
66347: EMPTY
66348: ST_TO_ADDR
// case d of 0 :
66349: LD_VAR 0 3
66353: PUSH
66354: LD_INT 0
66356: DOUBLE
66357: EQUAL
66358: IFTRUE 66362
66360: GO 66495
66362: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
66363: LD_ADDR_VAR 0 5
66367: PUSH
66368: LD_VAR 0 1
66372: PUSH
66373: LD_INT 4
66375: MINUS
66376: PUSH
66377: LD_VAR 0 2
66381: PUSH
66382: LD_INT 4
66384: MINUS
66385: PUSH
66386: LD_INT 2
66388: PUSH
66389: EMPTY
66390: LIST
66391: LIST
66392: LIST
66393: PUSH
66394: LD_VAR 0 1
66398: PUSH
66399: LD_INT 3
66401: MINUS
66402: PUSH
66403: LD_VAR 0 2
66407: PUSH
66408: LD_INT 1
66410: PUSH
66411: EMPTY
66412: LIST
66413: LIST
66414: LIST
66415: PUSH
66416: LD_VAR 0 1
66420: PUSH
66421: LD_INT 4
66423: PLUS
66424: PUSH
66425: LD_VAR 0 2
66429: PUSH
66430: LD_INT 4
66432: PUSH
66433: EMPTY
66434: LIST
66435: LIST
66436: LIST
66437: PUSH
66438: LD_VAR 0 1
66442: PUSH
66443: LD_INT 3
66445: PLUS
66446: PUSH
66447: LD_VAR 0 2
66451: PUSH
66452: LD_INT 3
66454: PLUS
66455: PUSH
66456: LD_INT 5
66458: PUSH
66459: EMPTY
66460: LIST
66461: LIST
66462: LIST
66463: PUSH
66464: LD_VAR 0 1
66468: PUSH
66469: LD_VAR 0 2
66473: PUSH
66474: LD_INT 4
66476: PLUS
66477: PUSH
66478: LD_INT 0
66480: PUSH
66481: EMPTY
66482: LIST
66483: LIST
66484: LIST
66485: PUSH
66486: EMPTY
66487: LIST
66488: LIST
66489: LIST
66490: LIST
66491: LIST
66492: ST_TO_ADDR
// end ; 1 :
66493: GO 67193
66495: LD_INT 1
66497: DOUBLE
66498: EQUAL
66499: IFTRUE 66503
66501: GO 66636
66503: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
66504: LD_ADDR_VAR 0 5
66508: PUSH
66509: LD_VAR 0 1
66513: PUSH
66514: LD_VAR 0 2
66518: PUSH
66519: LD_INT 4
66521: MINUS
66522: PUSH
66523: LD_INT 3
66525: PUSH
66526: EMPTY
66527: LIST
66528: LIST
66529: LIST
66530: PUSH
66531: LD_VAR 0 1
66535: PUSH
66536: LD_INT 3
66538: MINUS
66539: PUSH
66540: LD_VAR 0 2
66544: PUSH
66545: LD_INT 3
66547: MINUS
66548: PUSH
66549: LD_INT 2
66551: PUSH
66552: EMPTY
66553: LIST
66554: LIST
66555: LIST
66556: PUSH
66557: LD_VAR 0 1
66561: PUSH
66562: LD_INT 4
66564: MINUS
66565: PUSH
66566: LD_VAR 0 2
66570: PUSH
66571: LD_INT 1
66573: PUSH
66574: EMPTY
66575: LIST
66576: LIST
66577: LIST
66578: PUSH
66579: LD_VAR 0 1
66583: PUSH
66584: LD_VAR 0 2
66588: PUSH
66589: LD_INT 3
66591: PLUS
66592: PUSH
66593: LD_INT 0
66595: PUSH
66596: EMPTY
66597: LIST
66598: LIST
66599: LIST
66600: PUSH
66601: LD_VAR 0 1
66605: PUSH
66606: LD_INT 4
66608: PLUS
66609: PUSH
66610: LD_VAR 0 2
66614: PUSH
66615: LD_INT 4
66617: PLUS
66618: PUSH
66619: LD_INT 5
66621: PUSH
66622: EMPTY
66623: LIST
66624: LIST
66625: LIST
66626: PUSH
66627: EMPTY
66628: LIST
66629: LIST
66630: LIST
66631: LIST
66632: LIST
66633: ST_TO_ADDR
// end ; 2 :
66634: GO 67193
66636: LD_INT 2
66638: DOUBLE
66639: EQUAL
66640: IFTRUE 66644
66642: GO 66773
66644: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
66645: LD_ADDR_VAR 0 5
66649: PUSH
66650: LD_VAR 0 1
66654: PUSH
66655: LD_VAR 0 2
66659: PUSH
66660: LD_INT 3
66662: MINUS
66663: PUSH
66664: LD_INT 3
66666: PUSH
66667: EMPTY
66668: LIST
66669: LIST
66670: LIST
66671: PUSH
66672: LD_VAR 0 1
66676: PUSH
66677: LD_INT 4
66679: PLUS
66680: PUSH
66681: LD_VAR 0 2
66685: PUSH
66686: LD_INT 4
66688: PUSH
66689: EMPTY
66690: LIST
66691: LIST
66692: LIST
66693: PUSH
66694: LD_VAR 0 1
66698: PUSH
66699: LD_VAR 0 2
66703: PUSH
66704: LD_INT 4
66706: PLUS
66707: PUSH
66708: LD_INT 0
66710: PUSH
66711: EMPTY
66712: LIST
66713: LIST
66714: LIST
66715: PUSH
66716: LD_VAR 0 1
66720: PUSH
66721: LD_INT 3
66723: MINUS
66724: PUSH
66725: LD_VAR 0 2
66729: PUSH
66730: LD_INT 1
66732: PUSH
66733: EMPTY
66734: LIST
66735: LIST
66736: LIST
66737: PUSH
66738: LD_VAR 0 1
66742: PUSH
66743: LD_INT 4
66745: MINUS
66746: PUSH
66747: LD_VAR 0 2
66751: PUSH
66752: LD_INT 4
66754: MINUS
66755: PUSH
66756: LD_INT 2
66758: PUSH
66759: EMPTY
66760: LIST
66761: LIST
66762: LIST
66763: PUSH
66764: EMPTY
66765: LIST
66766: LIST
66767: LIST
66768: LIST
66769: LIST
66770: ST_TO_ADDR
// end ; 3 :
66771: GO 67193
66773: LD_INT 3
66775: DOUBLE
66776: EQUAL
66777: IFTRUE 66781
66779: GO 66914
66781: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
66782: LD_ADDR_VAR 0 5
66786: PUSH
66787: LD_VAR 0 1
66791: PUSH
66792: LD_INT 3
66794: PLUS
66795: PUSH
66796: LD_VAR 0 2
66800: PUSH
66801: LD_INT 4
66803: PUSH
66804: EMPTY
66805: LIST
66806: LIST
66807: LIST
66808: PUSH
66809: LD_VAR 0 1
66813: PUSH
66814: LD_INT 4
66816: PLUS
66817: PUSH
66818: LD_VAR 0 2
66822: PUSH
66823: LD_INT 4
66825: PLUS
66826: PUSH
66827: LD_INT 5
66829: PUSH
66830: EMPTY
66831: LIST
66832: LIST
66833: LIST
66834: PUSH
66835: LD_VAR 0 1
66839: PUSH
66840: LD_INT 4
66842: MINUS
66843: PUSH
66844: LD_VAR 0 2
66848: PUSH
66849: LD_INT 1
66851: PUSH
66852: EMPTY
66853: LIST
66854: LIST
66855: LIST
66856: PUSH
66857: LD_VAR 0 1
66861: PUSH
66862: LD_VAR 0 2
66866: PUSH
66867: LD_INT 4
66869: MINUS
66870: PUSH
66871: LD_INT 3
66873: PUSH
66874: EMPTY
66875: LIST
66876: LIST
66877: LIST
66878: PUSH
66879: LD_VAR 0 1
66883: PUSH
66884: LD_INT 3
66886: MINUS
66887: PUSH
66888: LD_VAR 0 2
66892: PUSH
66893: LD_INT 3
66895: MINUS
66896: PUSH
66897: LD_INT 2
66899: PUSH
66900: EMPTY
66901: LIST
66902: LIST
66903: LIST
66904: PUSH
66905: EMPTY
66906: LIST
66907: LIST
66908: LIST
66909: LIST
66910: LIST
66911: ST_TO_ADDR
// end ; 4 :
66912: GO 67193
66914: LD_INT 4
66916: DOUBLE
66917: EQUAL
66918: IFTRUE 66922
66920: GO 67055
66922: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
66923: LD_ADDR_VAR 0 5
66927: PUSH
66928: LD_VAR 0 1
66932: PUSH
66933: LD_VAR 0 2
66937: PUSH
66938: LD_INT 4
66940: PLUS
66941: PUSH
66942: LD_INT 0
66944: PUSH
66945: EMPTY
66946: LIST
66947: LIST
66948: LIST
66949: PUSH
66950: LD_VAR 0 1
66954: PUSH
66955: LD_INT 3
66957: PLUS
66958: PUSH
66959: LD_VAR 0 2
66963: PUSH
66964: LD_INT 3
66966: PLUS
66967: PUSH
66968: LD_INT 5
66970: PUSH
66971: EMPTY
66972: LIST
66973: LIST
66974: LIST
66975: PUSH
66976: LD_VAR 0 1
66980: PUSH
66981: LD_INT 4
66983: PLUS
66984: PUSH
66985: LD_VAR 0 2
66989: PUSH
66990: LD_INT 4
66992: PUSH
66993: EMPTY
66994: LIST
66995: LIST
66996: LIST
66997: PUSH
66998: LD_VAR 0 1
67002: PUSH
67003: LD_VAR 0 2
67007: PUSH
67008: LD_INT 3
67010: MINUS
67011: PUSH
67012: LD_INT 3
67014: PUSH
67015: EMPTY
67016: LIST
67017: LIST
67018: LIST
67019: PUSH
67020: LD_VAR 0 1
67024: PUSH
67025: LD_INT 4
67027: MINUS
67028: PUSH
67029: LD_VAR 0 2
67033: PUSH
67034: LD_INT 4
67036: MINUS
67037: PUSH
67038: LD_INT 2
67040: PUSH
67041: EMPTY
67042: LIST
67043: LIST
67044: LIST
67045: PUSH
67046: EMPTY
67047: LIST
67048: LIST
67049: LIST
67050: LIST
67051: LIST
67052: ST_TO_ADDR
// end ; 5 :
67053: GO 67193
67055: LD_INT 5
67057: DOUBLE
67058: EQUAL
67059: IFTRUE 67063
67061: GO 67192
67063: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
67064: LD_ADDR_VAR 0 5
67068: PUSH
67069: LD_VAR 0 1
67073: PUSH
67074: LD_INT 4
67076: MINUS
67077: PUSH
67078: LD_VAR 0 2
67082: PUSH
67083: LD_INT 1
67085: PUSH
67086: EMPTY
67087: LIST
67088: LIST
67089: LIST
67090: PUSH
67091: LD_VAR 0 1
67095: PUSH
67096: LD_VAR 0 2
67100: PUSH
67101: LD_INT 4
67103: MINUS
67104: PUSH
67105: LD_INT 3
67107: PUSH
67108: EMPTY
67109: LIST
67110: LIST
67111: LIST
67112: PUSH
67113: LD_VAR 0 1
67117: PUSH
67118: LD_INT 4
67120: PLUS
67121: PUSH
67122: LD_VAR 0 2
67126: PUSH
67127: LD_INT 4
67129: PLUS
67130: PUSH
67131: LD_INT 5
67133: PUSH
67134: EMPTY
67135: LIST
67136: LIST
67137: LIST
67138: PUSH
67139: LD_VAR 0 1
67143: PUSH
67144: LD_INT 3
67146: PLUS
67147: PUSH
67148: LD_VAR 0 2
67152: PUSH
67153: LD_INT 4
67155: PUSH
67156: EMPTY
67157: LIST
67158: LIST
67159: LIST
67160: PUSH
67161: LD_VAR 0 1
67165: PUSH
67166: LD_VAR 0 2
67170: PUSH
67171: LD_INT 3
67173: PLUS
67174: PUSH
67175: LD_INT 0
67177: PUSH
67178: EMPTY
67179: LIST
67180: LIST
67181: LIST
67182: PUSH
67183: EMPTY
67184: LIST
67185: LIST
67186: LIST
67187: LIST
67188: LIST
67189: ST_TO_ADDR
// end ; end ;
67190: GO 67193
67192: POP
// result := list ;
67193: LD_ADDR_VAR 0 4
67197: PUSH
67198: LD_VAR 0 5
67202: ST_TO_ADDR
// end ;
67203: LD_VAR 0 4
67207: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
67208: LD_INT 0
67210: PPUSH
67211: PPUSH
67212: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
67213: LD_VAR 0 1
67217: NOT
67218: IFTRUE 67246
67220: PUSH
67221: LD_VAR 0 2
67225: PUSH
67226: LD_INT 1
67228: PUSH
67229: LD_INT 2
67231: PUSH
67232: LD_INT 3
67234: PUSH
67235: LD_INT 4
67237: PUSH
67238: EMPTY
67239: LIST
67240: LIST
67241: LIST
67242: LIST
67243: IN
67244: NOT
67245: OR
67246: IFFALSE 67250
// exit ;
67248: GO 67333
// tmp := [ ] ;
67250: LD_ADDR_VAR 0 5
67254: PUSH
67255: EMPTY
67256: ST_TO_ADDR
// for i in units do
67257: LD_ADDR_VAR 0 4
67261: PUSH
67262: LD_VAR 0 1
67266: PUSH
67267: FOR_IN
67268: IFFALSE 67302
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
67270: LD_ADDR_VAR 0 5
67274: PUSH
67275: LD_VAR 0 5
67279: PPUSH
67280: LD_VAR 0 4
67284: PPUSH
67285: LD_VAR 0 2
67289: PPUSH
67290: CALL_OW 259
67294: PPUSH
67295: CALL 68728 0 2
67299: ST_TO_ADDR
67300: GO 67267
67302: POP
67303: POP
// if not tmp then
67304: LD_VAR 0 5
67308: NOT
67309: IFFALSE 67313
// exit ;
67311: GO 67333
// result := SortListByListDesc ( units , tmp ) ;
67313: LD_ADDR_VAR 0 3
67317: PUSH
67318: LD_VAR 0 1
67322: PPUSH
67323: LD_VAR 0 5
67327: PPUSH
67328: CALL_OW 77
67332: ST_TO_ADDR
// end ;
67333: LD_VAR 0 3
67337: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
67338: LD_INT 0
67340: PPUSH
67341: PPUSH
67342: PPUSH
// result := false ;
67343: LD_ADDR_VAR 0 3
67347: PUSH
67348: LD_INT 0
67350: ST_TO_ADDR
// if not building then
67351: LD_VAR 0 2
67355: NOT
67356: IFFALSE 67360
// exit ;
67358: GO 67504
// x := GetX ( building ) ;
67360: LD_ADDR_VAR 0 4
67364: PUSH
67365: LD_VAR 0 2
67369: PPUSH
67370: CALL_OW 250
67374: ST_TO_ADDR
// y := GetY ( building ) ;
67375: LD_ADDR_VAR 0 5
67379: PUSH
67380: LD_VAR 0 2
67384: PPUSH
67385: CALL_OW 251
67389: ST_TO_ADDR
// if not x or not y then
67390: LD_VAR 0 4
67394: NOT
67395: IFTRUE 67404
67397: PUSH
67398: LD_VAR 0 5
67402: NOT
67403: OR
67404: IFFALSE 67408
// exit ;
67406: GO 67504
// if GetTaskList ( unit ) then
67408: LD_VAR 0 1
67412: PPUSH
67413: CALL_OW 437
67417: IFFALSE 67504
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
67419: LD_STRING e
67421: PUSH
67422: LD_VAR 0 1
67426: PPUSH
67427: CALL_OW 437
67431: PUSH
67432: LD_INT 1
67434: ARRAY
67435: PUSH
67436: LD_INT 1
67438: ARRAY
67439: EQUAL
67440: IFFALSE 67467
67442: PUSH
67443: LD_VAR 0 4
67447: PUSH
67448: LD_VAR 0 1
67452: PPUSH
67453: CALL_OW 437
67457: PUSH
67458: LD_INT 1
67460: ARRAY
67461: PUSH
67462: LD_INT 2
67464: ARRAY
67465: EQUAL
67466: AND
67467: IFFALSE 67494
67469: PUSH
67470: LD_VAR 0 5
67474: PUSH
67475: LD_VAR 0 1
67479: PPUSH
67480: CALL_OW 437
67484: PUSH
67485: LD_INT 1
67487: ARRAY
67488: PUSH
67489: LD_INT 3
67491: ARRAY
67492: EQUAL
67493: AND
67494: IFFALSE 67504
// result := true end ;
67496: LD_ADDR_VAR 0 3
67500: PUSH
67501: LD_INT 1
67503: ST_TO_ADDR
// end ;
67504: LD_VAR 0 3
67508: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
67509: LD_INT 0
67511: PPUSH
// result := false ;
67512: LD_ADDR_VAR 0 4
67516: PUSH
67517: LD_INT 0
67519: ST_TO_ADDR
// if GetTaskList ( unit ) then
67520: LD_VAR 0 1
67524: PPUSH
67525: CALL_OW 437
67529: IFFALSE 67616
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
67531: LD_STRING M
67533: PUSH
67534: LD_VAR 0 1
67538: PPUSH
67539: CALL_OW 437
67543: PUSH
67544: LD_INT 1
67546: ARRAY
67547: PUSH
67548: LD_INT 1
67550: ARRAY
67551: EQUAL
67552: IFFALSE 67579
67554: PUSH
67555: LD_VAR 0 2
67559: PUSH
67560: LD_VAR 0 1
67564: PPUSH
67565: CALL_OW 437
67569: PUSH
67570: LD_INT 1
67572: ARRAY
67573: PUSH
67574: LD_INT 2
67576: ARRAY
67577: EQUAL
67578: AND
67579: IFFALSE 67606
67581: PUSH
67582: LD_VAR 0 3
67586: PUSH
67587: LD_VAR 0 1
67591: PPUSH
67592: CALL_OW 437
67596: PUSH
67597: LD_INT 1
67599: ARRAY
67600: PUSH
67601: LD_INT 3
67603: ARRAY
67604: EQUAL
67605: AND
67606: IFFALSE 67616
// result := true ;
67608: LD_ADDR_VAR 0 4
67612: PUSH
67613: LD_INT 1
67615: ST_TO_ADDR
// end ; end ;
67616: LD_VAR 0 4
67620: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
67621: LD_INT 0
67623: PPUSH
67624: PPUSH
67625: PPUSH
67626: PPUSH
// if not unit or not area then
67627: LD_VAR 0 1
67631: NOT
67632: IFTRUE 67641
67634: PUSH
67635: LD_VAR 0 2
67639: NOT
67640: OR
67641: IFFALSE 67645
// exit ;
67643: GO 67821
// tmp := AreaToList ( area , i ) ;
67645: LD_ADDR_VAR 0 6
67649: PUSH
67650: LD_VAR 0 2
67654: PPUSH
67655: LD_VAR 0 5
67659: PPUSH
67660: CALL_OW 517
67664: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
67665: LD_ADDR_VAR 0 5
67669: PUSH
67670: DOUBLE
67671: LD_INT 1
67673: DEC
67674: ST_TO_ADDR
67675: LD_VAR 0 6
67679: PUSH
67680: LD_INT 1
67682: ARRAY
67683: PUSH
67684: FOR_TO
67685: IFFALSE 67819
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
67687: LD_ADDR_VAR 0 7
67691: PUSH
67692: LD_VAR 0 6
67696: PUSH
67697: LD_INT 1
67699: ARRAY
67700: PUSH
67701: LD_VAR 0 5
67705: ARRAY
67706: PUSH
67707: LD_VAR 0 6
67711: PUSH
67712: LD_INT 2
67714: ARRAY
67715: PUSH
67716: LD_VAR 0 5
67720: ARRAY
67721: PUSH
67722: EMPTY
67723: LIST
67724: LIST
67725: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
67726: LD_INT 92
67728: PUSH
67729: LD_VAR 0 7
67733: PUSH
67734: LD_INT 1
67736: ARRAY
67737: PUSH
67738: LD_VAR 0 7
67742: PUSH
67743: LD_INT 2
67745: ARRAY
67746: PUSH
67747: LD_INT 2
67749: PUSH
67750: EMPTY
67751: LIST
67752: LIST
67753: LIST
67754: LIST
67755: PPUSH
67756: CALL_OW 69
67760: PUSH
67761: LD_INT 0
67763: EQUAL
67764: IFFALSE 67817
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
67766: LD_VAR 0 1
67770: PPUSH
67771: LD_VAR 0 7
67775: PUSH
67776: LD_INT 1
67778: ARRAY
67779: PPUSH
67780: LD_VAR 0 7
67784: PUSH
67785: LD_INT 2
67787: ARRAY
67788: PPUSH
67789: LD_VAR 0 3
67793: PPUSH
67794: CALL_OW 48
// result := IsPlaced ( unit ) ;
67798: LD_ADDR_VAR 0 4
67802: PUSH
67803: LD_VAR 0 1
67807: PPUSH
67808: CALL_OW 305
67812: ST_TO_ADDR
// exit ;
67813: POP
67814: POP
67815: GO 67821
// end ; end ;
67817: GO 67684
67819: POP
67820: POP
// end ;
67821: LD_VAR 0 4
67825: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
67826: LD_INT 0
67828: PPUSH
67829: PPUSH
67830: PPUSH
// if not side or side > 8 then
67831: LD_VAR 0 1
67835: NOT
67836: IFTRUE 67848
67838: PUSH
67839: LD_VAR 0 1
67843: PUSH
67844: LD_INT 8
67846: GREATER
67847: OR
67848: IFFALSE 67852
// exit ;
67850: GO 68039
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
67852: LD_ADDR_VAR 0 4
67856: PUSH
67857: LD_INT 22
67859: PUSH
67860: LD_VAR 0 1
67864: PUSH
67865: EMPTY
67866: LIST
67867: LIST
67868: PUSH
67869: LD_INT 21
67871: PUSH
67872: LD_INT 3
67874: PUSH
67875: EMPTY
67876: LIST
67877: LIST
67878: PUSH
67879: EMPTY
67880: LIST
67881: LIST
67882: PPUSH
67883: CALL_OW 69
67887: ST_TO_ADDR
// if not tmp then
67888: LD_VAR 0 4
67892: NOT
67893: IFFALSE 67897
// exit ;
67895: GO 68039
// enable_addtolog := true ;
67897: LD_ADDR_OWVAR 81
67901: PUSH
67902: LD_INT 1
67904: ST_TO_ADDR
// AddToLog ( [ ) ;
67905: LD_STRING [
67907: PPUSH
67908: CALL_OW 561
// for i in tmp do
67912: LD_ADDR_VAR 0 3
67916: PUSH
67917: LD_VAR 0 4
67921: PUSH
67922: FOR_IN
67923: IFFALSE 68030
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
67925: LD_STRING [
67927: PUSH
67928: LD_VAR 0 3
67932: PPUSH
67933: CALL_OW 266
67937: STR
67938: PUSH
67939: LD_STRING , 
67941: STR
67942: PUSH
67943: LD_VAR 0 3
67947: PPUSH
67948: CALL_OW 250
67952: STR
67953: PUSH
67954: LD_STRING , 
67956: STR
67957: PUSH
67958: LD_VAR 0 3
67962: PPUSH
67963: CALL_OW 251
67967: STR
67968: PUSH
67969: LD_STRING , 
67971: STR
67972: PUSH
67973: LD_VAR 0 3
67977: PPUSH
67978: CALL_OW 254
67982: STR
67983: PUSH
67984: LD_STRING , 
67986: STR
67987: PUSH
67988: LD_VAR 0 3
67992: PPUSH
67993: LD_INT 1
67995: PPUSH
67996: CALL_OW 268
68000: STR
68001: PUSH
68002: LD_STRING , 
68004: STR
68005: PUSH
68006: LD_VAR 0 3
68010: PPUSH
68011: LD_INT 2
68013: PPUSH
68014: CALL_OW 268
68018: STR
68019: PUSH
68020: LD_STRING ],
68022: STR
68023: PPUSH
68024: CALL_OW 561
// end ;
68028: GO 67922
68030: POP
68031: POP
// AddToLog ( ]; ) ;
68032: LD_STRING ];
68034: PPUSH
68035: CALL_OW 561
// end ;
68039: LD_VAR 0 2
68043: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
68044: LD_INT 0
68046: PPUSH
68047: PPUSH
68048: PPUSH
68049: PPUSH
68050: PPUSH
// if not area or not rate or not max then
68051: LD_VAR 0 1
68055: NOT
68056: IFTRUE 68065
68058: PUSH
68059: LD_VAR 0 2
68063: NOT
68064: OR
68065: IFTRUE 68074
68067: PUSH
68068: LD_VAR 0 4
68072: NOT
68073: OR
68074: IFFALSE 68078
// exit ;
68076: GO 68267
// while 1 do
68078: LD_INT 1
68080: IFFALSE 68267
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
68082: LD_ADDR_VAR 0 9
68086: PUSH
68087: LD_VAR 0 1
68091: PPUSH
68092: LD_INT 1
68094: PPUSH
68095: CALL_OW 287
68099: PUSH
68100: LD_INT 10
68102: MUL
68103: ST_TO_ADDR
// r := rate / 10 ;
68104: LD_ADDR_VAR 0 7
68108: PUSH
68109: LD_VAR 0 2
68113: PUSH
68114: LD_INT 10
68116: DIVREAL
68117: ST_TO_ADDR
// time := 1 1$00 ;
68118: LD_ADDR_VAR 0 8
68122: PUSH
68123: LD_INT 2100
68125: ST_TO_ADDR
// if amount < min then
68126: LD_VAR 0 9
68130: PUSH
68131: LD_VAR 0 3
68135: LESS
68136: IFFALSE 68154
// r := r * 2 else
68138: LD_ADDR_VAR 0 7
68142: PUSH
68143: LD_VAR 0 7
68147: PUSH
68148: LD_INT 2
68150: MUL
68151: ST_TO_ADDR
68152: GO 68180
// if amount > max then
68154: LD_VAR 0 9
68158: PUSH
68159: LD_VAR 0 4
68163: GREATER
68164: IFFALSE 68180
// r := r / 2 ;
68166: LD_ADDR_VAR 0 7
68170: PUSH
68171: LD_VAR 0 7
68175: PUSH
68176: LD_INT 2
68178: DIVREAL
68179: ST_TO_ADDR
// time := time / r ;
68180: LD_ADDR_VAR 0 8
68184: PUSH
68185: LD_VAR 0 8
68189: PUSH
68190: LD_VAR 0 7
68194: DIVREAL
68195: ST_TO_ADDR
// if time < 0 then
68196: LD_VAR 0 8
68200: PUSH
68201: LD_INT 0
68203: LESS
68204: IFFALSE 68221
// time := time * - 1 ;
68206: LD_ADDR_VAR 0 8
68210: PUSH
68211: LD_VAR 0 8
68215: PUSH
68216: LD_INT 1
68218: NEG
68219: MUL
68220: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
68221: LD_VAR 0 8
68225: PUSH
68226: LD_INT 35
68228: PPUSH
68229: LD_INT 875
68231: PPUSH
68232: CALL_OW 12
68236: PLUS
68237: PPUSH
68238: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
68242: LD_INT 1
68244: PPUSH
68245: LD_INT 5
68247: PPUSH
68248: CALL_OW 12
68252: PPUSH
68253: LD_VAR 0 1
68257: PPUSH
68258: LD_INT 1
68260: PPUSH
68261: CALL_OW 55
// end ;
68265: GO 68078
// end ;
68267: LD_VAR 0 5
68271: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
68272: LD_INT 0
68274: PPUSH
68275: PPUSH
68276: PPUSH
68277: PPUSH
68278: PPUSH
68279: PPUSH
68280: PPUSH
68281: PPUSH
// if not turrets or not factories then
68282: LD_VAR 0 1
68286: NOT
68287: IFTRUE 68296
68289: PUSH
68290: LD_VAR 0 2
68294: NOT
68295: OR
68296: IFFALSE 68300
// exit ;
68298: GO 68607
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
68300: LD_ADDR_VAR 0 10
68304: PUSH
68305: LD_INT 5
68307: PUSH
68308: LD_INT 6
68310: PUSH
68311: EMPTY
68312: LIST
68313: LIST
68314: PUSH
68315: LD_INT 2
68317: PUSH
68318: LD_INT 4
68320: PUSH
68321: EMPTY
68322: LIST
68323: LIST
68324: PUSH
68325: LD_INT 3
68327: PUSH
68328: LD_INT 5
68330: PUSH
68331: EMPTY
68332: LIST
68333: LIST
68334: PUSH
68335: EMPTY
68336: LIST
68337: LIST
68338: LIST
68339: PUSH
68340: LD_INT 24
68342: PUSH
68343: LD_INT 25
68345: PUSH
68346: EMPTY
68347: LIST
68348: LIST
68349: PUSH
68350: LD_INT 23
68352: PUSH
68353: LD_INT 27
68355: PUSH
68356: EMPTY
68357: LIST
68358: LIST
68359: PUSH
68360: EMPTY
68361: LIST
68362: LIST
68363: PUSH
68364: LD_INT 42
68366: PUSH
68367: LD_INT 43
68369: PUSH
68370: EMPTY
68371: LIST
68372: LIST
68373: PUSH
68374: LD_INT 44
68376: PUSH
68377: LD_INT 46
68379: PUSH
68380: EMPTY
68381: LIST
68382: LIST
68383: PUSH
68384: LD_INT 45
68386: PUSH
68387: LD_INT 47
68389: PUSH
68390: EMPTY
68391: LIST
68392: LIST
68393: PUSH
68394: EMPTY
68395: LIST
68396: LIST
68397: LIST
68398: PUSH
68399: EMPTY
68400: LIST
68401: LIST
68402: LIST
68403: ST_TO_ADDR
// result := [ ] ;
68404: LD_ADDR_VAR 0 3
68408: PUSH
68409: EMPTY
68410: ST_TO_ADDR
// for i in turrets do
68411: LD_ADDR_VAR 0 4
68415: PUSH
68416: LD_VAR 0 1
68420: PUSH
68421: FOR_IN
68422: IFFALSE 68605
// begin nat := GetNation ( i ) ;
68424: LD_ADDR_VAR 0 7
68428: PUSH
68429: LD_VAR 0 4
68433: PPUSH
68434: CALL_OW 248
68438: ST_TO_ADDR
// weapon := 0 ;
68439: LD_ADDR_VAR 0 8
68443: PUSH
68444: LD_INT 0
68446: ST_TO_ADDR
// if not nat then
68447: LD_VAR 0 7
68451: NOT
68452: IFFALSE 68456
// continue ;
68454: GO 68421
// for j in list [ nat ] do
68456: LD_ADDR_VAR 0 5
68460: PUSH
68461: LD_VAR 0 10
68465: PUSH
68466: LD_VAR 0 7
68470: ARRAY
68471: PUSH
68472: FOR_IN
68473: IFFALSE 68514
// if GetBWeapon ( i ) = j [ 1 ] then
68475: LD_VAR 0 4
68479: PPUSH
68480: CALL_OW 269
68484: PUSH
68485: LD_VAR 0 5
68489: PUSH
68490: LD_INT 1
68492: ARRAY
68493: EQUAL
68494: IFFALSE 68512
// begin weapon := j [ 2 ] ;
68496: LD_ADDR_VAR 0 8
68500: PUSH
68501: LD_VAR 0 5
68505: PUSH
68506: LD_INT 2
68508: ARRAY
68509: ST_TO_ADDR
// break ;
68510: GO 68514
// end ;
68512: GO 68472
68514: POP
68515: POP
// if not weapon then
68516: LD_VAR 0 8
68520: NOT
68521: IFFALSE 68525
// continue ;
68523: GO 68421
// for k in factories do
68525: LD_ADDR_VAR 0 6
68529: PUSH
68530: LD_VAR 0 2
68534: PUSH
68535: FOR_IN
68536: IFFALSE 68601
// begin weapons := AvailableWeaponList ( k ) ;
68538: LD_ADDR_VAR 0 9
68542: PUSH
68543: LD_VAR 0 6
68547: PPUSH
68548: CALL_OW 478
68552: ST_TO_ADDR
// if not weapons then
68553: LD_VAR 0 9
68557: NOT
68558: IFFALSE 68562
// continue ;
68560: GO 68535
// if weapon in weapons then
68562: LD_VAR 0 8
68566: PUSH
68567: LD_VAR 0 9
68571: IN
68572: IFFALSE 68599
// begin result := [ i , weapon ] ;
68574: LD_ADDR_VAR 0 3
68578: PUSH
68579: LD_VAR 0 4
68583: PUSH
68584: LD_VAR 0 8
68588: PUSH
68589: EMPTY
68590: LIST
68591: LIST
68592: ST_TO_ADDR
// exit ;
68593: POP
68594: POP
68595: POP
68596: POP
68597: GO 68607
// end ; end ;
68599: GO 68535
68601: POP
68602: POP
// end ;
68603: GO 68421
68605: POP
68606: POP
// end ;
68607: LD_VAR 0 3
68611: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
68612: LD_INT 0
68614: PPUSH
// if not side or side > 8 then
68615: LD_VAR 0 3
68619: NOT
68620: IFTRUE 68632
68622: PUSH
68623: LD_VAR 0 3
68627: PUSH
68628: LD_INT 8
68630: GREATER
68631: OR
68632: IFFALSE 68636
// exit ;
68634: GO 68695
// if not range then
68636: LD_VAR 0 4
68640: NOT
68641: IFFALSE 68652
// range := - 12 ;
68643: LD_ADDR_VAR 0 4
68647: PUSH
68648: LD_INT 12
68650: NEG
68651: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
68652: LD_VAR 0 1
68656: PPUSH
68657: LD_VAR 0 2
68661: PPUSH
68662: LD_VAR 0 3
68666: PPUSH
68667: LD_VAR 0 4
68671: PPUSH
68672: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
68676: LD_VAR 0 1
68680: PPUSH
68681: LD_VAR 0 2
68685: PPUSH
68686: LD_VAR 0 3
68690: PPUSH
68691: CALL_OW 331
// end ;
68695: LD_VAR 0 5
68699: RET
// export function Video ( mode ) ; begin
68700: LD_INT 0
68702: PPUSH
// ingame_video = mode ;
68703: LD_ADDR_OWVAR 52
68707: PUSH
68708: LD_VAR 0 1
68712: ST_TO_ADDR
// interface_hidden = mode ;
68713: LD_ADDR_OWVAR 54
68717: PUSH
68718: LD_VAR 0 1
68722: ST_TO_ADDR
// end ;
68723: LD_VAR 0 2
68727: RET
// export function Join ( array , element ) ; begin
68728: LD_INT 0
68730: PPUSH
// result := Replace ( array , array + 1 , element ) ;
68731: LD_ADDR_VAR 0 3
68735: PUSH
68736: LD_VAR 0 1
68740: PPUSH
68741: LD_VAR 0 1
68745: PUSH
68746: LD_INT 1
68748: PLUS
68749: PPUSH
68750: LD_VAR 0 2
68754: PPUSH
68755: CALL_OW 1
68759: ST_TO_ADDR
// end ;
68760: LD_VAR 0 3
68764: RET
// export function JoinUnion ( array , element ) ; begin
68765: LD_INT 0
68767: PPUSH
// result := array union element ;
68768: LD_ADDR_VAR 0 3
68772: PUSH
68773: LD_VAR 0 1
68777: PUSH
68778: LD_VAR 0 2
68782: UNION
68783: ST_TO_ADDR
// end ;
68784: LD_VAR 0 3
68788: RET
// export function GetBehemoths ( side ) ; begin
68789: LD_INT 0
68791: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
68792: LD_ADDR_VAR 0 2
68796: PUSH
68797: LD_INT 22
68799: PUSH
68800: LD_VAR 0 1
68804: PUSH
68805: EMPTY
68806: LIST
68807: LIST
68808: PUSH
68809: LD_INT 31
68811: PUSH
68812: LD_INT 25
68814: PUSH
68815: EMPTY
68816: LIST
68817: LIST
68818: PUSH
68819: EMPTY
68820: LIST
68821: LIST
68822: PPUSH
68823: CALL_OW 69
68827: ST_TO_ADDR
// end ;
68828: LD_VAR 0 2
68832: RET
// export function Shuffle ( array ) ; var i , index ; begin
68833: LD_INT 0
68835: PPUSH
68836: PPUSH
68837: PPUSH
// result := [ ] ;
68838: LD_ADDR_VAR 0 2
68842: PUSH
68843: EMPTY
68844: ST_TO_ADDR
// if not array then
68845: LD_VAR 0 1
68849: NOT
68850: IFFALSE 68854
// exit ;
68852: GO 68953
// Randomize ;
68854: CALL_OW 10
// for i = array downto 1 do
68858: LD_ADDR_VAR 0 3
68862: PUSH
68863: DOUBLE
68864: LD_VAR 0 1
68868: INC
68869: ST_TO_ADDR
68870: LD_INT 1
68872: PUSH
68873: FOR_DOWNTO
68874: IFFALSE 68951
// begin index := rand ( 1 , array ) ;
68876: LD_ADDR_VAR 0 4
68880: PUSH
68881: LD_INT 1
68883: PPUSH
68884: LD_VAR 0 1
68888: PPUSH
68889: CALL_OW 12
68893: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
68894: LD_ADDR_VAR 0 2
68898: PUSH
68899: LD_VAR 0 2
68903: PPUSH
68904: LD_VAR 0 2
68908: PUSH
68909: LD_INT 1
68911: PLUS
68912: PPUSH
68913: LD_VAR 0 1
68917: PUSH
68918: LD_VAR 0 4
68922: ARRAY
68923: PPUSH
68924: CALL_OW 2
68928: ST_TO_ADDR
// array := Delete ( array , index ) ;
68929: LD_ADDR_VAR 0 1
68933: PUSH
68934: LD_VAR 0 1
68938: PPUSH
68939: LD_VAR 0 4
68943: PPUSH
68944: CALL_OW 3
68948: ST_TO_ADDR
// end ;
68949: GO 68873
68951: POP
68952: POP
// end ;
68953: LD_VAR 0 2
68957: RET
// export function GetBaseMaterials ( base ) ; begin
68958: LD_INT 0
68960: PPUSH
// result := [ 0 , 0 , 0 ] ;
68961: LD_ADDR_VAR 0 2
68965: PUSH
68966: LD_INT 0
68968: PUSH
68969: LD_INT 0
68971: PUSH
68972: LD_INT 0
68974: PUSH
68975: EMPTY
68976: LIST
68977: LIST
68978: LIST
68979: ST_TO_ADDR
// if not base then
68980: LD_VAR 0 1
68984: NOT
68985: IFFALSE 68989
// exit ;
68987: GO 69038
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
68989: LD_ADDR_VAR 0 2
68993: PUSH
68994: LD_VAR 0 1
68998: PPUSH
68999: LD_INT 1
69001: PPUSH
69002: CALL_OW 275
69006: PUSH
69007: LD_VAR 0 1
69011: PPUSH
69012: LD_INT 2
69014: PPUSH
69015: CALL_OW 275
69019: PUSH
69020: LD_VAR 0 1
69024: PPUSH
69025: LD_INT 3
69027: PPUSH
69028: CALL_OW 275
69032: PUSH
69033: EMPTY
69034: LIST
69035: LIST
69036: LIST
69037: ST_TO_ADDR
// end ;
69038: LD_VAR 0 2
69042: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
69043: LD_INT 0
69045: PPUSH
69046: PPUSH
// result := array ;
69047: LD_ADDR_VAR 0 3
69051: PUSH
69052: LD_VAR 0 1
69056: ST_TO_ADDR
// if size >= result then
69057: LD_VAR 0 2
69061: PUSH
69062: LD_VAR 0 3
69066: GREATEREQUAL
69067: IFFALSE 69071
// exit ;
69069: GO 69121
// if size then
69071: LD_VAR 0 2
69075: IFFALSE 69121
// for i := array downto size do
69077: LD_ADDR_VAR 0 4
69081: PUSH
69082: DOUBLE
69083: LD_VAR 0 1
69087: INC
69088: ST_TO_ADDR
69089: LD_VAR 0 2
69093: PUSH
69094: FOR_DOWNTO
69095: IFFALSE 69119
// result := Delete ( result , result ) ;
69097: LD_ADDR_VAR 0 3
69101: PUSH
69102: LD_VAR 0 3
69106: PPUSH
69107: LD_VAR 0 3
69111: PPUSH
69112: CALL_OW 3
69116: ST_TO_ADDR
69117: GO 69094
69119: POP
69120: POP
// end ;
69121: LD_VAR 0 3
69125: RET
// export function ComExit ( unit ) ; var tmp ; begin
69126: LD_INT 0
69128: PPUSH
69129: PPUSH
// if not IsInUnit ( unit ) then
69130: LD_VAR 0 1
69134: PPUSH
69135: CALL_OW 310
69139: NOT
69140: IFFALSE 69144
// exit ;
69142: GO 69204
// tmp := IsInUnit ( unit ) ;
69144: LD_ADDR_VAR 0 3
69148: PUSH
69149: LD_VAR 0 1
69153: PPUSH
69154: CALL_OW 310
69158: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
69159: LD_VAR 0 3
69163: PPUSH
69164: CALL_OW 247
69168: PUSH
69169: LD_INT 2
69171: EQUAL
69172: IFFALSE 69185
// ComExitVehicle ( unit ) else
69174: LD_VAR 0 1
69178: PPUSH
69179: CALL_OW 121
69183: GO 69194
// ComExitBuilding ( unit ) ;
69185: LD_VAR 0 1
69189: PPUSH
69190: CALL_OW 122
// result := tmp ;
69194: LD_ADDR_VAR 0 2
69198: PUSH
69199: LD_VAR 0 3
69203: ST_TO_ADDR
// end ;
69204: LD_VAR 0 2
69208: RET
// export function ComExitAll ( units ) ; var i ; begin
69209: LD_INT 0
69211: PPUSH
69212: PPUSH
// if not units then
69213: LD_VAR 0 1
69217: NOT
69218: IFFALSE 69222
// exit ;
69220: GO 69248
// for i in units do
69222: LD_ADDR_VAR 0 3
69226: PUSH
69227: LD_VAR 0 1
69231: PUSH
69232: FOR_IN
69233: IFFALSE 69246
// ComExit ( i ) ;
69235: LD_VAR 0 3
69239: PPUSH
69240: CALL 69126 0 1
69244: GO 69232
69246: POP
69247: POP
// end ;
69248: LD_VAR 0 2
69252: RET
// export function ResetHc ; begin
69253: LD_INT 0
69255: PPUSH
// InitHc ;
69256: CALL_OW 19
// hc_importance := 0 ;
69260: LD_ADDR_OWVAR 32
69264: PUSH
69265: LD_INT 0
69267: ST_TO_ADDR
// end ;
69268: LD_VAR 0 1
69272: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
69273: LD_INT 0
69275: PPUSH
69276: PPUSH
69277: PPUSH
// _x := ( x1 + x2 ) div 2 ;
69278: LD_ADDR_VAR 0 6
69282: PUSH
69283: LD_VAR 0 1
69287: PUSH
69288: LD_VAR 0 3
69292: PLUS
69293: PUSH
69294: LD_INT 2
69296: DIV
69297: ST_TO_ADDR
// if _x < 0 then
69298: LD_VAR 0 6
69302: PUSH
69303: LD_INT 0
69305: LESS
69306: IFFALSE 69323
// _x := _x * - 1 ;
69308: LD_ADDR_VAR 0 6
69312: PUSH
69313: LD_VAR 0 6
69317: PUSH
69318: LD_INT 1
69320: NEG
69321: MUL
69322: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
69323: LD_ADDR_VAR 0 7
69327: PUSH
69328: LD_VAR 0 2
69332: PUSH
69333: LD_VAR 0 4
69337: PLUS
69338: PUSH
69339: LD_INT 2
69341: DIV
69342: ST_TO_ADDR
// if _y < 0 then
69343: LD_VAR 0 7
69347: PUSH
69348: LD_INT 0
69350: LESS
69351: IFFALSE 69368
// _y := _y * - 1 ;
69353: LD_ADDR_VAR 0 7
69357: PUSH
69358: LD_VAR 0 7
69362: PUSH
69363: LD_INT 1
69365: NEG
69366: MUL
69367: ST_TO_ADDR
// result := [ _x , _y ] ;
69368: LD_ADDR_VAR 0 5
69372: PUSH
69373: LD_VAR 0 6
69377: PUSH
69378: LD_VAR 0 7
69382: PUSH
69383: EMPTY
69384: LIST
69385: LIST
69386: ST_TO_ADDR
// end ;
69387: LD_VAR 0 5
69391: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
69392: LD_INT 0
69394: PPUSH
69395: PPUSH
69396: PPUSH
69397: PPUSH
// task := GetTaskList ( unit ) ;
69398: LD_ADDR_VAR 0 7
69402: PUSH
69403: LD_VAR 0 1
69407: PPUSH
69408: CALL_OW 437
69412: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
69413: LD_VAR 0 7
69417: NOT
69418: IFFALSE 69437
69420: PUSH
69421: LD_VAR 0 1
69425: PPUSH
69426: LD_VAR 0 2
69430: PPUSH
69431: CALL_OW 308
69435: NOT
69436: AND
69437: IFFALSE 69441
// exit ;
69439: GO 69559
// if IsInArea ( unit , area ) then
69441: LD_VAR 0 1
69445: PPUSH
69446: LD_VAR 0 2
69450: PPUSH
69451: CALL_OW 308
69455: IFFALSE 69473
// begin ComMoveToArea ( unit , goAway ) ;
69457: LD_VAR 0 1
69461: PPUSH
69462: LD_VAR 0 3
69466: PPUSH
69467: CALL_OW 113
// exit ;
69471: GO 69559
// end ; if task [ 1 ] [ 1 ] <> M then
69473: LD_VAR 0 7
69477: PUSH
69478: LD_INT 1
69480: ARRAY
69481: PUSH
69482: LD_INT 1
69484: ARRAY
69485: PUSH
69486: LD_STRING M
69488: NONEQUAL
69489: IFFALSE 69493
// exit ;
69491: GO 69559
// x := task [ 1 ] [ 2 ] ;
69493: LD_ADDR_VAR 0 5
69497: PUSH
69498: LD_VAR 0 7
69502: PUSH
69503: LD_INT 1
69505: ARRAY
69506: PUSH
69507: LD_INT 2
69509: ARRAY
69510: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
69511: LD_ADDR_VAR 0 6
69515: PUSH
69516: LD_VAR 0 7
69520: PUSH
69521: LD_INT 1
69523: ARRAY
69524: PUSH
69525: LD_INT 3
69527: ARRAY
69528: ST_TO_ADDR
// if InArea ( x , y , area ) then
69529: LD_VAR 0 5
69533: PPUSH
69534: LD_VAR 0 6
69538: PPUSH
69539: LD_VAR 0 2
69543: PPUSH
69544: CALL_OW 309
69548: IFFALSE 69559
// ComStop ( unit ) ;
69550: LD_VAR 0 1
69554: PPUSH
69555: CALL_OW 141
// end ;
69559: LD_VAR 0 4
69563: RET
// export function Abs ( value ) ; begin
69564: LD_INT 0
69566: PPUSH
// result := value ;
69567: LD_ADDR_VAR 0 2
69571: PUSH
69572: LD_VAR 0 1
69576: ST_TO_ADDR
// if value < 0 then
69577: LD_VAR 0 1
69581: PUSH
69582: LD_INT 0
69584: LESS
69585: IFFALSE 69602
// result := value * - 1 ;
69587: LD_ADDR_VAR 0 2
69591: PUSH
69592: LD_VAR 0 1
69596: PUSH
69597: LD_INT 1
69599: NEG
69600: MUL
69601: ST_TO_ADDR
// end ;
69602: LD_VAR 0 2
69606: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
69607: LD_INT 0
69609: PPUSH
69610: PPUSH
69611: PPUSH
69612: PPUSH
69613: PPUSH
69614: PPUSH
69615: PPUSH
69616: PPUSH
// if not unit or not building then
69617: LD_VAR 0 1
69621: NOT
69622: IFTRUE 69631
69624: PUSH
69625: LD_VAR 0 2
69629: NOT
69630: OR
69631: IFFALSE 69635
// exit ;
69633: GO 69863
// x := GetX ( building ) ;
69635: LD_ADDR_VAR 0 4
69639: PUSH
69640: LD_VAR 0 2
69644: PPUSH
69645: CALL_OW 250
69649: ST_TO_ADDR
// y := GetY ( building ) ;
69650: LD_ADDR_VAR 0 6
69654: PUSH
69655: LD_VAR 0 2
69659: PPUSH
69660: CALL_OW 251
69664: ST_TO_ADDR
// d := GetDir ( building ) ;
69665: LD_ADDR_VAR 0 8
69669: PUSH
69670: LD_VAR 0 2
69674: PPUSH
69675: CALL_OW 254
69679: ST_TO_ADDR
// r := 4 ;
69680: LD_ADDR_VAR 0 9
69684: PUSH
69685: LD_INT 4
69687: ST_TO_ADDR
// for i := 1 to 5 do
69688: LD_ADDR_VAR 0 10
69692: PUSH
69693: DOUBLE
69694: LD_INT 1
69696: DEC
69697: ST_TO_ADDR
69698: LD_INT 5
69700: PUSH
69701: FOR_TO
69702: IFFALSE 69861
// begin _x := ShiftX ( x , d , r + i ) ;
69704: LD_ADDR_VAR 0 5
69708: PUSH
69709: LD_VAR 0 4
69713: PPUSH
69714: LD_VAR 0 8
69718: PPUSH
69719: LD_VAR 0 9
69723: PUSH
69724: LD_VAR 0 10
69728: PLUS
69729: PPUSH
69730: CALL_OW 272
69734: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
69735: LD_ADDR_VAR 0 7
69739: PUSH
69740: LD_VAR 0 6
69744: PPUSH
69745: LD_VAR 0 8
69749: PPUSH
69750: LD_VAR 0 9
69754: PUSH
69755: LD_VAR 0 10
69759: PLUS
69760: PPUSH
69761: CALL_OW 273
69765: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
69766: LD_VAR 0 5
69770: PPUSH
69771: LD_VAR 0 7
69775: PPUSH
69776: CALL_OW 488
69780: IFFALSE 69815
69782: PUSH
69783: LD_VAR 0 5
69787: PPUSH
69788: LD_VAR 0 7
69792: PPUSH
69793: CALL_OW 428
69797: PPUSH
69798: CALL_OW 247
69802: PUSH
69803: LD_INT 3
69805: PUSH
69806: LD_INT 2
69808: PUSH
69809: EMPTY
69810: LIST
69811: LIST
69812: IN
69813: NOT
69814: AND
69815: IFFALSE 69859
// begin ComMoveXY ( unit , _x , _y ) ;
69817: LD_VAR 0 1
69821: PPUSH
69822: LD_VAR 0 5
69826: PPUSH
69827: LD_VAR 0 7
69831: PPUSH
69832: CALL_OW 111
// result := [ _x , _y ] ;
69836: LD_ADDR_VAR 0 3
69840: PUSH
69841: LD_VAR 0 5
69845: PUSH
69846: LD_VAR 0 7
69850: PUSH
69851: EMPTY
69852: LIST
69853: LIST
69854: ST_TO_ADDR
// exit ;
69855: POP
69856: POP
69857: GO 69863
// end ; end ;
69859: GO 69701
69861: POP
69862: POP
// end ;
69863: LD_VAR 0 3
69867: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
69868: LD_INT 0
69870: PPUSH
69871: PPUSH
69872: PPUSH
// result := 0 ;
69873: LD_ADDR_VAR 0 3
69877: PUSH
69878: LD_INT 0
69880: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
69881: LD_VAR 0 1
69885: PUSH
69886: LD_INT 0
69888: LESS
69889: IFTRUE 69901
69891: PUSH
69892: LD_VAR 0 1
69896: PUSH
69897: LD_INT 8
69899: GREATER
69900: OR
69901: IFTRUE 69913
69903: PUSH
69904: LD_VAR 0 2
69908: PUSH
69909: LD_INT 0
69911: LESS
69912: OR
69913: IFTRUE 69925
69915: PUSH
69916: LD_VAR 0 2
69920: PUSH
69921: LD_INT 8
69923: GREATER
69924: OR
69925: IFFALSE 69929
// exit ;
69927: GO 70004
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
69929: LD_ADDR_VAR 0 4
69933: PUSH
69934: LD_INT 22
69936: PUSH
69937: LD_VAR 0 2
69941: PUSH
69942: EMPTY
69943: LIST
69944: LIST
69945: PPUSH
69946: CALL_OW 69
69950: PUSH
69951: FOR_IN
69952: IFFALSE 70002
// begin un := UnitShoot ( i ) ;
69954: LD_ADDR_VAR 0 5
69958: PUSH
69959: LD_VAR 0 4
69963: PPUSH
69964: CALL_OW 504
69968: ST_TO_ADDR
// if GetSide ( un ) = side1 then
69969: LD_VAR 0 5
69973: PPUSH
69974: CALL_OW 255
69978: PUSH
69979: LD_VAR 0 1
69983: EQUAL
69984: IFFALSE 70000
// begin result := un ;
69986: LD_ADDR_VAR 0 3
69990: PUSH
69991: LD_VAR 0 5
69995: ST_TO_ADDR
// exit ;
69996: POP
69997: POP
69998: GO 70004
// end ; end ;
70000: GO 69951
70002: POP
70003: POP
// end ;
70004: LD_VAR 0 3
70008: RET
// export function GetCargoBay ( units ) ; begin
70009: LD_INT 0
70011: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
70012: LD_ADDR_VAR 0 2
70016: PUSH
70017: LD_VAR 0 1
70021: PPUSH
70022: LD_INT 2
70024: PUSH
70025: LD_INT 34
70027: PUSH
70028: LD_INT 12
70030: PUSH
70031: EMPTY
70032: LIST
70033: LIST
70034: PUSH
70035: LD_INT 34
70037: PUSH
70038: LD_INT 51
70040: PUSH
70041: EMPTY
70042: LIST
70043: LIST
70044: PUSH
70045: LD_INT 34
70047: PUSH
70048: LD_INT 32
70050: PUSH
70051: EMPTY
70052: LIST
70053: LIST
70054: PUSH
70055: LD_INT 34
70057: PUSH
70058: LD_INT 89
70060: PUSH
70061: EMPTY
70062: LIST
70063: LIST
70064: PUSH
70065: EMPTY
70066: LIST
70067: LIST
70068: LIST
70069: LIST
70070: LIST
70071: PPUSH
70072: CALL_OW 72
70076: ST_TO_ADDR
// end ;
70077: LD_VAR 0 2
70081: RET
// export function Negate ( value ) ; begin
70082: LD_INT 0
70084: PPUSH
// result := not value ;
70085: LD_ADDR_VAR 0 2
70089: PUSH
70090: LD_VAR 0 1
70094: NOT
70095: ST_TO_ADDR
// end ;
70096: LD_VAR 0 2
70100: RET
// export function Inc ( value ) ; begin
70101: LD_INT 0
70103: PPUSH
// result := value + 1 ;
70104: LD_ADDR_VAR 0 2
70108: PUSH
70109: LD_VAR 0 1
70113: PUSH
70114: LD_INT 1
70116: PLUS
70117: ST_TO_ADDR
// end ;
70118: LD_VAR 0 2
70122: RET
// export function Dec ( value ) ; begin
70123: LD_INT 0
70125: PPUSH
// result := value - 1 ;
70126: LD_ADDR_VAR 0 2
70130: PUSH
70131: LD_VAR 0 1
70135: PUSH
70136: LD_INT 1
70138: MINUS
70139: ST_TO_ADDR
// end ;
70140: LD_VAR 0 2
70144: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
70145: LD_INT 0
70147: PPUSH
70148: PPUSH
70149: PPUSH
70150: PPUSH
70151: PPUSH
70152: PPUSH
70153: PPUSH
70154: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
70155: LD_VAR 0 1
70159: PPUSH
70160: LD_VAR 0 2
70164: PPUSH
70165: CALL_OW 488
70169: NOT
70170: IFTRUE 70189
70172: PUSH
70173: LD_VAR 0 3
70177: PPUSH
70178: LD_VAR 0 4
70182: PPUSH
70183: CALL_OW 488
70187: NOT
70188: OR
70189: IFFALSE 70202
// begin result := - 1 ;
70191: LD_ADDR_VAR 0 5
70195: PUSH
70196: LD_INT 1
70198: NEG
70199: ST_TO_ADDR
// exit ;
70200: GO 70437
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
70202: LD_ADDR_VAR 0 12
70206: PUSH
70207: LD_VAR 0 1
70211: PPUSH
70212: LD_VAR 0 2
70216: PPUSH
70217: LD_VAR 0 3
70221: PPUSH
70222: LD_VAR 0 4
70226: PPUSH
70227: CALL 69273 0 4
70231: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
70232: LD_ADDR_VAR 0 11
70236: PUSH
70237: LD_VAR 0 1
70241: PPUSH
70242: LD_VAR 0 2
70246: PPUSH
70247: LD_VAR 0 12
70251: PUSH
70252: LD_INT 1
70254: ARRAY
70255: PPUSH
70256: LD_VAR 0 12
70260: PUSH
70261: LD_INT 2
70263: ARRAY
70264: PPUSH
70265: CALL_OW 298
70269: ST_TO_ADDR
// distance := 9999 ;
70270: LD_ADDR_VAR 0 10
70274: PUSH
70275: LD_INT 9999
70277: ST_TO_ADDR
// for i := 0 to 5 do
70278: LD_ADDR_VAR 0 6
70282: PUSH
70283: DOUBLE
70284: LD_INT 0
70286: DEC
70287: ST_TO_ADDR
70288: LD_INT 5
70290: PUSH
70291: FOR_TO
70292: IFFALSE 70435
// begin _x := ShiftX ( x1 , i , centerDist ) ;
70294: LD_ADDR_VAR 0 7
70298: PUSH
70299: LD_VAR 0 1
70303: PPUSH
70304: LD_VAR 0 6
70308: PPUSH
70309: LD_VAR 0 11
70313: PPUSH
70314: CALL_OW 272
70318: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
70319: LD_ADDR_VAR 0 8
70323: PUSH
70324: LD_VAR 0 2
70328: PPUSH
70329: LD_VAR 0 6
70333: PPUSH
70334: LD_VAR 0 11
70338: PPUSH
70339: CALL_OW 273
70343: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
70344: LD_VAR 0 7
70348: PPUSH
70349: LD_VAR 0 8
70353: PPUSH
70354: CALL_OW 488
70358: NOT
70359: IFFALSE 70363
// continue ;
70361: GO 70291
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
70363: LD_ADDR_VAR 0 9
70367: PUSH
70368: LD_VAR 0 12
70372: PUSH
70373: LD_INT 1
70375: ARRAY
70376: PPUSH
70377: LD_VAR 0 12
70381: PUSH
70382: LD_INT 2
70384: ARRAY
70385: PPUSH
70386: LD_VAR 0 7
70390: PPUSH
70391: LD_VAR 0 8
70395: PPUSH
70396: CALL_OW 298
70400: ST_TO_ADDR
// if tmp < distance then
70401: LD_VAR 0 9
70405: PUSH
70406: LD_VAR 0 10
70410: LESS
70411: IFFALSE 70433
// begin result := i ;
70413: LD_ADDR_VAR 0 5
70417: PUSH
70418: LD_VAR 0 6
70422: ST_TO_ADDR
// distance := tmp ;
70423: LD_ADDR_VAR 0 10
70427: PUSH
70428: LD_VAR 0 9
70432: ST_TO_ADDR
// end ; end ;
70433: GO 70291
70435: POP
70436: POP
// end ;
70437: LD_VAR 0 5
70441: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
70442: LD_INT 0
70444: PPUSH
70445: PPUSH
// if not driver or not IsInUnit ( driver ) then
70446: LD_VAR 0 1
70450: NOT
70451: IFTRUE 70465
70453: PUSH
70454: LD_VAR 0 1
70458: PPUSH
70459: CALL_OW 310
70463: NOT
70464: OR
70465: IFFALSE 70469
// exit ;
70467: GO 70559
// vehicle := IsInUnit ( driver ) ;
70469: LD_ADDR_VAR 0 3
70473: PUSH
70474: LD_VAR 0 1
70478: PPUSH
70479: CALL_OW 310
70483: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
70484: LD_VAR 0 1
70488: PPUSH
70489: LD_STRING \
70491: PUSH
70492: LD_INT 0
70494: PUSH
70495: LD_INT 0
70497: PUSH
70498: LD_INT 0
70500: PUSH
70501: LD_INT 0
70503: PUSH
70504: LD_INT 0
70506: PUSH
70507: LD_INT 0
70509: PUSH
70510: EMPTY
70511: LIST
70512: LIST
70513: LIST
70514: LIST
70515: LIST
70516: LIST
70517: LIST
70518: PUSH
70519: LD_STRING E
70521: PUSH
70522: LD_INT 0
70524: PUSH
70525: LD_INT 0
70527: PUSH
70528: LD_VAR 0 3
70532: PUSH
70533: LD_INT 0
70535: PUSH
70536: LD_INT 0
70538: PUSH
70539: LD_INT 0
70541: PUSH
70542: EMPTY
70543: LIST
70544: LIST
70545: LIST
70546: LIST
70547: LIST
70548: LIST
70549: LIST
70550: PUSH
70551: EMPTY
70552: LIST
70553: LIST
70554: PPUSH
70555: CALL_OW 446
// end ;
70559: LD_VAR 0 2
70563: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
70564: LD_INT 0
70566: PPUSH
70567: PPUSH
// if not driver or not IsInUnit ( driver ) then
70568: LD_VAR 0 1
70572: NOT
70573: IFTRUE 70587
70575: PUSH
70576: LD_VAR 0 1
70580: PPUSH
70581: CALL_OW 310
70585: NOT
70586: OR
70587: IFFALSE 70591
// exit ;
70589: GO 70681
// vehicle := IsInUnit ( driver ) ;
70591: LD_ADDR_VAR 0 3
70595: PUSH
70596: LD_VAR 0 1
70600: PPUSH
70601: CALL_OW 310
70605: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
70606: LD_VAR 0 1
70610: PPUSH
70611: LD_STRING \
70613: PUSH
70614: LD_INT 0
70616: PUSH
70617: LD_INT 0
70619: PUSH
70620: LD_INT 0
70622: PUSH
70623: LD_INT 0
70625: PUSH
70626: LD_INT 0
70628: PUSH
70629: LD_INT 0
70631: PUSH
70632: EMPTY
70633: LIST
70634: LIST
70635: LIST
70636: LIST
70637: LIST
70638: LIST
70639: LIST
70640: PUSH
70641: LD_STRING E
70643: PUSH
70644: LD_INT 0
70646: PUSH
70647: LD_INT 0
70649: PUSH
70650: LD_VAR 0 3
70654: PUSH
70655: LD_INT 0
70657: PUSH
70658: LD_INT 0
70660: PUSH
70661: LD_INT 0
70663: PUSH
70664: EMPTY
70665: LIST
70666: LIST
70667: LIST
70668: LIST
70669: LIST
70670: LIST
70671: LIST
70672: PUSH
70673: EMPTY
70674: LIST
70675: LIST
70676: PPUSH
70677: CALL_OW 447
// end ;
70681: LD_VAR 0 2
70685: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
70686: LD_INT 0
70688: PPUSH
70689: PPUSH
70690: PPUSH
// tmp := [ ] ;
70691: LD_ADDR_VAR 0 5
70695: PUSH
70696: EMPTY
70697: ST_TO_ADDR
// for i in units do
70698: LD_ADDR_VAR 0 4
70702: PUSH
70703: LD_VAR 0 1
70707: PUSH
70708: FOR_IN
70709: IFFALSE 70747
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
70711: LD_ADDR_VAR 0 5
70715: PUSH
70716: LD_VAR 0 5
70720: PPUSH
70721: LD_VAR 0 5
70725: PUSH
70726: LD_INT 1
70728: PLUS
70729: PPUSH
70730: LD_VAR 0 4
70734: PPUSH
70735: CALL_OW 256
70739: PPUSH
70740: CALL_OW 2
70744: ST_TO_ADDR
70745: GO 70708
70747: POP
70748: POP
// if not tmp then
70749: LD_VAR 0 5
70753: NOT
70754: IFFALSE 70758
// exit ;
70756: GO 70806
// if asc then
70758: LD_VAR 0 2
70762: IFFALSE 70786
// result := SortListByListAsc ( units , tmp ) else
70764: LD_ADDR_VAR 0 3
70768: PUSH
70769: LD_VAR 0 1
70773: PPUSH
70774: LD_VAR 0 5
70778: PPUSH
70779: CALL_OW 76
70783: ST_TO_ADDR
70784: GO 70806
// result := SortListByListDesc ( units , tmp ) ;
70786: LD_ADDR_VAR 0 3
70790: PUSH
70791: LD_VAR 0 1
70795: PPUSH
70796: LD_VAR 0 5
70800: PPUSH
70801: CALL_OW 77
70805: ST_TO_ADDR
// end ;
70806: LD_VAR 0 3
70810: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
70811: LD_INT 0
70813: PPUSH
70814: PPUSH
// task := GetTaskList ( mech ) ;
70815: LD_ADDR_VAR 0 4
70819: PUSH
70820: LD_VAR 0 1
70824: PPUSH
70825: CALL_OW 437
70829: ST_TO_ADDR
// if not task then
70830: LD_VAR 0 4
70834: NOT
70835: IFFALSE 70839
// exit ;
70837: GO 70883
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
70839: LD_ADDR_VAR 0 3
70843: PUSH
70844: LD_VAR 0 4
70848: PUSH
70849: LD_INT 1
70851: ARRAY
70852: PUSH
70853: LD_INT 1
70855: ARRAY
70856: PUSH
70857: LD_STRING r
70859: EQUAL
70860: IFFALSE 70882
70862: PUSH
70863: LD_VAR 0 4
70867: PUSH
70868: LD_INT 1
70870: ARRAY
70871: PUSH
70872: LD_INT 4
70874: ARRAY
70875: PUSH
70876: LD_VAR 0 2
70880: EQUAL
70881: AND
70882: ST_TO_ADDR
// end ;
70883: LD_VAR 0 3
70887: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
70888: LD_INT 0
70890: PPUSH
// SetDir ( unit , d ) ;
70891: LD_VAR 0 1
70895: PPUSH
70896: LD_VAR 0 4
70900: PPUSH
70901: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
70905: LD_ADDR_VAR 0 6
70909: PUSH
70910: LD_VAR 0 1
70914: PPUSH
70915: LD_VAR 0 2
70919: PPUSH
70920: LD_VAR 0 3
70924: PPUSH
70925: LD_VAR 0 5
70929: PPUSH
70930: CALL_OW 48
70934: ST_TO_ADDR
// end ;
70935: LD_VAR 0 6
70939: RET
// export function ToNaturalNumber ( number ) ; begin
70940: LD_INT 0
70942: PPUSH
// result := number div 1 ;
70943: LD_ADDR_VAR 0 2
70947: PUSH
70948: LD_VAR 0 1
70952: PUSH
70953: LD_INT 1
70955: DIV
70956: ST_TO_ADDR
// if number < 0 then
70957: LD_VAR 0 1
70961: PUSH
70962: LD_INT 0
70964: LESS
70965: IFFALSE 70975
// result := 0 ;
70967: LD_ADDR_VAR 0 2
70971: PUSH
70972: LD_INT 0
70974: ST_TO_ADDR
// end ;
70975: LD_VAR 0 2
70979: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
70980: LD_INT 0
70982: PPUSH
70983: PPUSH
70984: PPUSH
// if not buildings then
70985: LD_VAR 0 1
70989: NOT
70990: IFFALSE 70994
// exit ;
70992: GO 71109
// tmp := [ ] ;
70994: LD_ADDR_VAR 0 5
70998: PUSH
70999: EMPTY
71000: ST_TO_ADDR
// for b in buildings do
71001: LD_ADDR_VAR 0 4
71005: PUSH
71006: LD_VAR 0 1
71010: PUSH
71011: FOR_IN
71012: IFFALSE 71050
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
71014: LD_ADDR_VAR 0 5
71018: PUSH
71019: LD_VAR 0 5
71023: PPUSH
71024: LD_VAR 0 5
71028: PUSH
71029: LD_INT 1
71031: PLUS
71032: PPUSH
71033: LD_VAR 0 4
71037: PPUSH
71038: CALL_OW 266
71042: PPUSH
71043: CALL_OW 1
71047: ST_TO_ADDR
71048: GO 71011
71050: POP
71051: POP
// if not tmp then
71052: LD_VAR 0 5
71056: NOT
71057: IFFALSE 71061
// exit ;
71059: GO 71109
// if asc then
71061: LD_VAR 0 2
71065: IFFALSE 71089
// result := SortListByListAsc ( buildings , tmp ) else
71067: LD_ADDR_VAR 0 3
71071: PUSH
71072: LD_VAR 0 1
71076: PPUSH
71077: LD_VAR 0 5
71081: PPUSH
71082: CALL_OW 76
71086: ST_TO_ADDR
71087: GO 71109
// result := SortListByListDesc ( buildings , tmp ) ;
71089: LD_ADDR_VAR 0 3
71093: PUSH
71094: LD_VAR 0 1
71098: PPUSH
71099: LD_VAR 0 5
71103: PPUSH
71104: CALL_OW 77
71108: ST_TO_ADDR
// end ;
71109: LD_VAR 0 3
71113: RET
// export function SortByClass ( units , class ) ; var un ; begin
71114: LD_INT 0
71116: PPUSH
71117: PPUSH
// if not units or not class then
71118: LD_VAR 0 1
71122: NOT
71123: IFTRUE 71132
71125: PUSH
71126: LD_VAR 0 2
71130: NOT
71131: OR
71132: IFFALSE 71136
// exit ;
71134: GO 71231
// result := [ ] ;
71136: LD_ADDR_VAR 0 3
71140: PUSH
71141: EMPTY
71142: ST_TO_ADDR
// for un in units do
71143: LD_ADDR_VAR 0 4
71147: PUSH
71148: LD_VAR 0 1
71152: PUSH
71153: FOR_IN
71154: IFFALSE 71229
// if GetClass ( un ) = class then
71156: LD_VAR 0 4
71160: PPUSH
71161: CALL_OW 257
71165: PUSH
71166: LD_VAR 0 2
71170: EQUAL
71171: IFFALSE 71198
// result := Insert ( result , 1 , un ) else
71173: LD_ADDR_VAR 0 3
71177: PUSH
71178: LD_VAR 0 3
71182: PPUSH
71183: LD_INT 1
71185: PPUSH
71186: LD_VAR 0 4
71190: PPUSH
71191: CALL_OW 2
71195: ST_TO_ADDR
71196: GO 71227
// result := Replace ( result , result + 1 , un ) ;
71198: LD_ADDR_VAR 0 3
71202: PUSH
71203: LD_VAR 0 3
71207: PPUSH
71208: LD_VAR 0 3
71212: PUSH
71213: LD_INT 1
71215: PLUS
71216: PPUSH
71217: LD_VAR 0 4
71221: PPUSH
71222: CALL_OW 1
71226: ST_TO_ADDR
71227: GO 71153
71229: POP
71230: POP
// end ;
71231: LD_VAR 0 3
71235: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
71236: LD_INT 0
71238: PPUSH
71239: PPUSH
71240: PPUSH
71241: PPUSH
71242: PPUSH
71243: PPUSH
71244: PPUSH
// result := [ ] ;
71245: LD_ADDR_VAR 0 4
71249: PUSH
71250: EMPTY
71251: ST_TO_ADDR
// if x - r < 0 then
71252: LD_VAR 0 1
71256: PUSH
71257: LD_VAR 0 3
71261: MINUS
71262: PUSH
71263: LD_INT 0
71265: LESS
71266: IFFALSE 71278
// min_x := 0 else
71268: LD_ADDR_VAR 0 8
71272: PUSH
71273: LD_INT 0
71275: ST_TO_ADDR
71276: GO 71294
// min_x := x - r ;
71278: LD_ADDR_VAR 0 8
71282: PUSH
71283: LD_VAR 0 1
71287: PUSH
71288: LD_VAR 0 3
71292: MINUS
71293: ST_TO_ADDR
// if y - r < 0 then
71294: LD_VAR 0 2
71298: PUSH
71299: LD_VAR 0 3
71303: MINUS
71304: PUSH
71305: LD_INT 0
71307: LESS
71308: IFFALSE 71320
// min_y := 0 else
71310: LD_ADDR_VAR 0 7
71314: PUSH
71315: LD_INT 0
71317: ST_TO_ADDR
71318: GO 71336
// min_y := y - r ;
71320: LD_ADDR_VAR 0 7
71324: PUSH
71325: LD_VAR 0 2
71329: PUSH
71330: LD_VAR 0 3
71334: MINUS
71335: ST_TO_ADDR
// max_x := x + r ;
71336: LD_ADDR_VAR 0 9
71340: PUSH
71341: LD_VAR 0 1
71345: PUSH
71346: LD_VAR 0 3
71350: PLUS
71351: ST_TO_ADDR
// max_y := y + r ;
71352: LD_ADDR_VAR 0 10
71356: PUSH
71357: LD_VAR 0 2
71361: PUSH
71362: LD_VAR 0 3
71366: PLUS
71367: ST_TO_ADDR
// for _x = min_x to max_x do
71368: LD_ADDR_VAR 0 5
71372: PUSH
71373: DOUBLE
71374: LD_VAR 0 8
71378: DEC
71379: ST_TO_ADDR
71380: LD_VAR 0 9
71384: PUSH
71385: FOR_TO
71386: IFFALSE 71487
// for _y = min_y to max_y do
71388: LD_ADDR_VAR 0 6
71392: PUSH
71393: DOUBLE
71394: LD_VAR 0 7
71398: DEC
71399: ST_TO_ADDR
71400: LD_VAR 0 10
71404: PUSH
71405: FOR_TO
71406: IFFALSE 71483
// begin if not ValidHex ( _x , _y ) then
71408: LD_VAR 0 5
71412: PPUSH
71413: LD_VAR 0 6
71417: PPUSH
71418: CALL_OW 488
71422: NOT
71423: IFFALSE 71427
// continue ;
71425: GO 71405
// if GetResourceTypeXY ( _x , _y ) then
71427: LD_VAR 0 5
71431: PPUSH
71432: LD_VAR 0 6
71436: PPUSH
71437: CALL_OW 283
71441: IFFALSE 71481
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
71443: LD_ADDR_VAR 0 4
71447: PUSH
71448: LD_VAR 0 4
71452: PPUSH
71453: LD_VAR 0 4
71457: PUSH
71458: LD_INT 1
71460: PLUS
71461: PPUSH
71462: LD_VAR 0 5
71466: PUSH
71467: LD_VAR 0 6
71471: PUSH
71472: EMPTY
71473: LIST
71474: LIST
71475: PPUSH
71476: CALL_OW 1
71480: ST_TO_ADDR
// end ;
71481: GO 71405
71483: POP
71484: POP
71485: GO 71385
71487: POP
71488: POP
// end ;
71489: LD_VAR 0 4
71493: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
71494: LD_INT 0
71496: PPUSH
71497: PPUSH
71498: PPUSH
71499: PPUSH
71500: PPUSH
71501: PPUSH
71502: PPUSH
71503: PPUSH
// if not units then
71504: LD_VAR 0 1
71508: NOT
71509: IFFALSE 71513
// exit ;
71511: GO 72045
// result := UnitFilter ( units , [ f_ok ] ) ;
71513: LD_ADDR_VAR 0 3
71517: PUSH
71518: LD_VAR 0 1
71522: PPUSH
71523: LD_INT 50
71525: PUSH
71526: EMPTY
71527: LIST
71528: PPUSH
71529: CALL_OW 72
71533: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
71534: LD_ADDR_VAR 0 8
71538: PUSH
71539: LD_VAR 0 1
71543: PUSH
71544: LD_INT 1
71546: ARRAY
71547: PPUSH
71548: CALL_OW 255
71552: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
71553: LD_ADDR_VAR 0 10
71557: PUSH
71558: LD_INT 29
71560: PUSH
71561: LD_INT 91
71563: PUSH
71564: LD_INT 49
71566: PUSH
71567: EMPTY
71568: LIST
71569: LIST
71570: LIST
71571: ST_TO_ADDR
// if not result then
71572: LD_VAR 0 3
71576: NOT
71577: IFFALSE 71581
// exit ;
71579: GO 72045
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
71581: LD_ADDR_VAR 0 5
71585: PUSH
71586: LD_INT 81
71588: PUSH
71589: LD_VAR 0 8
71593: PUSH
71594: EMPTY
71595: LIST
71596: LIST
71597: PPUSH
71598: CALL_OW 69
71602: ST_TO_ADDR
// for i in result do
71603: LD_ADDR_VAR 0 4
71607: PUSH
71608: LD_VAR 0 3
71612: PUSH
71613: FOR_IN
71614: IFFALSE 72043
// begin tag := GetTag ( i ) + 1 ;
71616: LD_ADDR_VAR 0 9
71620: PUSH
71621: LD_VAR 0 4
71625: PPUSH
71626: CALL_OW 110
71630: PUSH
71631: LD_INT 1
71633: PLUS
71634: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
71635: LD_ADDR_VAR 0 7
71639: PUSH
71640: LD_VAR 0 4
71644: PPUSH
71645: CALL_OW 250
71649: PPUSH
71650: LD_VAR 0 4
71654: PPUSH
71655: CALL_OW 251
71659: PPUSH
71660: LD_INT 4
71662: PPUSH
71663: CALL 71236 0 3
71667: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
71668: LD_VAR 0 4
71672: PPUSH
71673: CALL_OW 247
71677: PUSH
71678: LD_INT 2
71680: EQUAL
71681: IFFALSE 71693
71683: PUSH
71684: LD_VAR 0 7
71688: PUSH
71689: LD_INT 2
71691: GREATER
71692: AND
71693: IFFALSE 71713
71695: PUSH
71696: LD_VAR 0 4
71700: PPUSH
71701: CALL_OW 264
71705: PUSH
71706: LD_VAR 0 10
71710: IN
71711: NOT
71712: AND
71713: IFFALSE 71752
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
71715: LD_VAR 0 4
71719: PPUSH
71720: LD_VAR 0 7
71724: PUSH
71725: LD_INT 1
71727: ARRAY
71728: PUSH
71729: LD_INT 1
71731: ARRAY
71732: PPUSH
71733: LD_VAR 0 7
71737: PUSH
71738: LD_INT 1
71740: ARRAY
71741: PUSH
71742: LD_INT 2
71744: ARRAY
71745: PPUSH
71746: CALL_OW 116
71750: GO 72041
// if path > tag then
71752: LD_VAR 0 2
71756: PUSH
71757: LD_VAR 0 9
71761: GREATER
71762: IFFALSE 71970
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
71764: LD_ADDR_VAR 0 6
71768: PUSH
71769: LD_VAR 0 5
71773: PPUSH
71774: LD_INT 91
71776: PUSH
71777: LD_VAR 0 4
71781: PUSH
71782: LD_INT 8
71784: PUSH
71785: EMPTY
71786: LIST
71787: LIST
71788: LIST
71789: PPUSH
71790: CALL_OW 72
71794: ST_TO_ADDR
// if nearEnemy then
71795: LD_VAR 0 6
71799: IFFALSE 71868
// begin if GetWeapon ( i ) = ru_time_lapser then
71801: LD_VAR 0 4
71805: PPUSH
71806: CALL_OW 264
71810: PUSH
71811: LD_INT 49
71813: EQUAL
71814: IFFALSE 71842
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
71816: LD_VAR 0 4
71820: PPUSH
71821: LD_VAR 0 6
71825: PPUSH
71826: LD_VAR 0 4
71830: PPUSH
71831: CALL_OW 74
71835: PPUSH
71836: CALL_OW 112
71840: GO 71866
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
71842: LD_VAR 0 4
71846: PPUSH
71847: LD_VAR 0 6
71851: PPUSH
71852: LD_VAR 0 4
71856: PPUSH
71857: CALL_OW 74
71861: PPUSH
71862: CALL 73126 0 2
// end else
71866: GO 71968
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
71868: LD_VAR 0 4
71872: PPUSH
71873: LD_VAR 0 2
71877: PUSH
71878: LD_VAR 0 9
71882: ARRAY
71883: PUSH
71884: LD_INT 1
71886: ARRAY
71887: PPUSH
71888: LD_VAR 0 2
71892: PUSH
71893: LD_VAR 0 9
71897: ARRAY
71898: PUSH
71899: LD_INT 2
71901: ARRAY
71902: PPUSH
71903: CALL_OW 297
71907: PUSH
71908: LD_INT 6
71910: GREATER
71911: IFFALSE 71954
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
71913: LD_VAR 0 4
71917: PPUSH
71918: LD_VAR 0 2
71922: PUSH
71923: LD_VAR 0 9
71927: ARRAY
71928: PUSH
71929: LD_INT 1
71931: ARRAY
71932: PPUSH
71933: LD_VAR 0 2
71937: PUSH
71938: LD_VAR 0 9
71942: ARRAY
71943: PUSH
71944: LD_INT 2
71946: ARRAY
71947: PPUSH
71948: CALL_OW 114
71952: GO 71968
// SetTag ( i , tag ) ;
71954: LD_VAR 0 4
71958: PPUSH
71959: LD_VAR 0 9
71963: PPUSH
71964: CALL_OW 109
// end else
71968: GO 72041
// if enemy then
71970: LD_VAR 0 5
71974: IFFALSE 72041
// begin if GetWeapon ( i ) = ru_time_lapser then
71976: LD_VAR 0 4
71980: PPUSH
71981: CALL_OW 264
71985: PUSH
71986: LD_INT 49
71988: EQUAL
71989: IFFALSE 72017
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
71991: LD_VAR 0 4
71995: PPUSH
71996: LD_VAR 0 5
72000: PPUSH
72001: LD_VAR 0 4
72005: PPUSH
72006: CALL_OW 74
72010: PPUSH
72011: CALL_OW 112
72015: GO 72041
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
72017: LD_VAR 0 4
72021: PPUSH
72022: LD_VAR 0 5
72026: PPUSH
72027: LD_VAR 0 4
72031: PPUSH
72032: CALL_OW 74
72036: PPUSH
72037: CALL 73126 0 2
// end ; end ;
72041: GO 71613
72043: POP
72044: POP
// end ;
72045: LD_VAR 0 3
72049: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
72050: LD_INT 0
72052: PPUSH
72053: PPUSH
72054: PPUSH
// if not unit or IsInUnit ( unit ) then
72055: LD_VAR 0 1
72059: NOT
72060: IFTRUE 72073
72062: PUSH
72063: LD_VAR 0 1
72067: PPUSH
72068: CALL_OW 310
72072: OR
72073: IFFALSE 72077
// exit ;
72075: GO 72168
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
72077: LD_ADDR_VAR 0 4
72081: PUSH
72082: LD_VAR 0 1
72086: PPUSH
72087: CALL_OW 250
72091: PPUSH
72092: LD_VAR 0 2
72096: PPUSH
72097: LD_INT 1
72099: PPUSH
72100: CALL_OW 272
72104: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
72105: LD_ADDR_VAR 0 5
72109: PUSH
72110: LD_VAR 0 1
72114: PPUSH
72115: CALL_OW 251
72119: PPUSH
72120: LD_VAR 0 2
72124: PPUSH
72125: LD_INT 1
72127: PPUSH
72128: CALL_OW 273
72132: ST_TO_ADDR
// if ValidHex ( x , y ) then
72133: LD_VAR 0 4
72137: PPUSH
72138: LD_VAR 0 5
72142: PPUSH
72143: CALL_OW 488
72147: IFFALSE 72168
// ComTurnXY ( unit , x , y ) ;
72149: LD_VAR 0 1
72153: PPUSH
72154: LD_VAR 0 4
72158: PPUSH
72159: LD_VAR 0 5
72163: PPUSH
72164: CALL_OW 118
// end ;
72168: LD_VAR 0 3
72172: RET
// export function SeeUnits ( side , units ) ; var i ; begin
72173: LD_INT 0
72175: PPUSH
72176: PPUSH
// result := false ;
72177: LD_ADDR_VAR 0 3
72181: PUSH
72182: LD_INT 0
72184: ST_TO_ADDR
// if not units then
72185: LD_VAR 0 2
72189: NOT
72190: IFFALSE 72194
// exit ;
72192: GO 72239
// for i in units do
72194: LD_ADDR_VAR 0 4
72198: PUSH
72199: LD_VAR 0 2
72203: PUSH
72204: FOR_IN
72205: IFFALSE 72237
// if See ( side , i ) then
72207: LD_VAR 0 1
72211: PPUSH
72212: LD_VAR 0 4
72216: PPUSH
72217: CALL_OW 292
72221: IFFALSE 72235
// begin result := true ;
72223: LD_ADDR_VAR 0 3
72227: PUSH
72228: LD_INT 1
72230: ST_TO_ADDR
// exit ;
72231: POP
72232: POP
72233: GO 72239
// end ;
72235: GO 72204
72237: POP
72238: POP
// end ;
72239: LD_VAR 0 3
72243: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
72244: LD_INT 0
72246: PPUSH
72247: PPUSH
72248: PPUSH
72249: PPUSH
// if not unit or not points then
72250: LD_VAR 0 1
72254: NOT
72255: IFTRUE 72264
72257: PUSH
72258: LD_VAR 0 2
72262: NOT
72263: OR
72264: IFFALSE 72268
// exit ;
72266: GO 72358
// dist := 99999 ;
72268: LD_ADDR_VAR 0 5
72272: PUSH
72273: LD_INT 99999
72275: ST_TO_ADDR
// for i in points do
72276: LD_ADDR_VAR 0 4
72280: PUSH
72281: LD_VAR 0 2
72285: PUSH
72286: FOR_IN
72287: IFFALSE 72356
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
72289: LD_ADDR_VAR 0 6
72293: PUSH
72294: LD_VAR 0 1
72298: PPUSH
72299: LD_VAR 0 4
72303: PUSH
72304: LD_INT 1
72306: ARRAY
72307: PPUSH
72308: LD_VAR 0 4
72312: PUSH
72313: LD_INT 2
72315: ARRAY
72316: PPUSH
72317: CALL_OW 297
72321: ST_TO_ADDR
// if tmpDist < dist then
72322: LD_VAR 0 6
72326: PUSH
72327: LD_VAR 0 5
72331: LESS
72332: IFFALSE 72354
// begin result := i ;
72334: LD_ADDR_VAR 0 3
72338: PUSH
72339: LD_VAR 0 4
72343: ST_TO_ADDR
// dist := tmpDist ;
72344: LD_ADDR_VAR 0 5
72348: PUSH
72349: LD_VAR 0 6
72353: ST_TO_ADDR
// end ; end ;
72354: GO 72286
72356: POP
72357: POP
// end ;
72358: LD_VAR 0 3
72362: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
72363: LD_INT 0
72365: PPUSH
// uc_side := side ;
72366: LD_ADDR_OWVAR 20
72370: PUSH
72371: LD_VAR 0 1
72375: ST_TO_ADDR
// uc_nation := 3 ;
72376: LD_ADDR_OWVAR 21
72380: PUSH
72381: LD_INT 3
72383: ST_TO_ADDR
// vc_chassis := 25 ;
72384: LD_ADDR_OWVAR 37
72388: PUSH
72389: LD_INT 25
72391: ST_TO_ADDR
// vc_engine := engine_siberite ;
72392: LD_ADDR_OWVAR 39
72396: PUSH
72397: LD_INT 3
72399: ST_TO_ADDR
// vc_control := control_computer ;
72400: LD_ADDR_OWVAR 38
72404: PUSH
72405: LD_INT 3
72407: ST_TO_ADDR
// vc_weapon := 59 ;
72408: LD_ADDR_OWVAR 40
72412: PUSH
72413: LD_INT 59
72415: ST_TO_ADDR
// result := CreateVehicle ;
72416: LD_ADDR_VAR 0 5
72420: PUSH
72421: CALL_OW 45
72425: ST_TO_ADDR
// SetDir ( result , d ) ;
72426: LD_VAR 0 5
72430: PPUSH
72431: LD_VAR 0 4
72435: PPUSH
72436: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
72440: LD_VAR 0 5
72444: PPUSH
72445: LD_VAR 0 2
72449: PPUSH
72450: LD_VAR 0 3
72454: PPUSH
72455: LD_INT 0
72457: PPUSH
72458: CALL_OW 48
// end ;
72462: LD_VAR 0 5
72466: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
72467: LD_INT 0
72469: PPUSH
72470: PPUSH
72471: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
72472: LD_ADDR_VAR 0 2
72476: PUSH
72477: LD_INT 0
72479: PUSH
72480: LD_INT 0
72482: PUSH
72483: LD_INT 0
72485: PUSH
72486: LD_INT 0
72488: PUSH
72489: EMPTY
72490: LIST
72491: LIST
72492: LIST
72493: LIST
72494: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
72495: LD_VAR 0 1
72499: NOT
72500: IFTRUE 72533
72502: PUSH
72503: LD_VAR 0 1
72507: PPUSH
72508: CALL_OW 264
72512: PUSH
72513: LD_INT 12
72515: PUSH
72516: LD_INT 51
72518: PUSH
72519: LD_INT 32
72521: PUSH
72522: LD_INT 89
72524: PUSH
72525: EMPTY
72526: LIST
72527: LIST
72528: LIST
72529: LIST
72530: IN
72531: NOT
72532: OR
72533: IFFALSE 72537
// exit ;
72535: GO 72635
// for i := 1 to 3 do
72537: LD_ADDR_VAR 0 3
72541: PUSH
72542: DOUBLE
72543: LD_INT 1
72545: DEC
72546: ST_TO_ADDR
72547: LD_INT 3
72549: PUSH
72550: FOR_TO
72551: IFFALSE 72633
// begin tmp := GetCargo ( cargo , i ) ;
72553: LD_ADDR_VAR 0 4
72557: PUSH
72558: LD_VAR 0 1
72562: PPUSH
72563: LD_VAR 0 3
72567: PPUSH
72568: CALL_OW 289
72572: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
72573: LD_ADDR_VAR 0 2
72577: PUSH
72578: LD_VAR 0 2
72582: PPUSH
72583: LD_VAR 0 3
72587: PPUSH
72588: LD_VAR 0 4
72592: PPUSH
72593: CALL_OW 1
72597: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
72598: LD_ADDR_VAR 0 2
72602: PUSH
72603: LD_VAR 0 2
72607: PPUSH
72608: LD_INT 4
72610: PPUSH
72611: LD_VAR 0 2
72615: PUSH
72616: LD_INT 4
72618: ARRAY
72619: PUSH
72620: LD_VAR 0 4
72624: PLUS
72625: PPUSH
72626: CALL_OW 1
72630: ST_TO_ADDR
// end ;
72631: GO 72550
72633: POP
72634: POP
// end ;
72635: LD_VAR 0 2
72639: RET
// export function Length ( array ) ; begin
72640: LD_INT 0
72642: PPUSH
// result := array + 0 ;
72643: LD_ADDR_VAR 0 2
72647: PUSH
72648: LD_VAR 0 1
72652: PUSH
72653: LD_INT 0
72655: PLUS
72656: ST_TO_ADDR
// end ;
72657: LD_VAR 0 2
72661: RET
// export function PrepareArray ( array ) ; begin
72662: LD_INT 0
72664: PPUSH
// result := array diff 0 ;
72665: LD_ADDR_VAR 0 2
72669: PUSH
72670: LD_VAR 0 1
72674: PUSH
72675: LD_INT 0
72677: DIFF
72678: ST_TO_ADDR
// if not result [ 1 ] then
72679: LD_VAR 0 2
72683: PUSH
72684: LD_INT 1
72686: ARRAY
72687: NOT
72688: IFFALSE 72708
// result := Delete ( result , 1 ) ;
72690: LD_ADDR_VAR 0 2
72694: PUSH
72695: LD_VAR 0 2
72699: PPUSH
72700: LD_INT 1
72702: PPUSH
72703: CALL_OW 3
72707: ST_TO_ADDR
// end ;
72708: LD_VAR 0 2
72712: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
72713: LD_INT 0
72715: PPUSH
72716: PPUSH
72717: PPUSH
72718: PPUSH
// sibRocketRange := 25 ;
72719: LD_ADDR_VAR 0 6
72723: PUSH
72724: LD_INT 25
72726: ST_TO_ADDR
// result := false ;
72727: LD_ADDR_VAR 0 4
72731: PUSH
72732: LD_INT 0
72734: ST_TO_ADDR
// for i := 0 to 5 do
72735: LD_ADDR_VAR 0 5
72739: PUSH
72740: DOUBLE
72741: LD_INT 0
72743: DEC
72744: ST_TO_ADDR
72745: LD_INT 5
72747: PUSH
72748: FOR_TO
72749: IFFALSE 72816
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
72751: LD_VAR 0 1
72755: PPUSH
72756: LD_VAR 0 5
72760: PPUSH
72761: LD_VAR 0 6
72765: PPUSH
72766: CALL_OW 272
72770: PPUSH
72771: LD_VAR 0 2
72775: PPUSH
72776: LD_VAR 0 5
72780: PPUSH
72781: LD_VAR 0 6
72785: PPUSH
72786: CALL_OW 273
72790: PPUSH
72791: LD_VAR 0 3
72795: PPUSH
72796: CALL_OW 309
72800: IFFALSE 72814
// begin result := true ;
72802: LD_ADDR_VAR 0 4
72806: PUSH
72807: LD_INT 1
72809: ST_TO_ADDR
// exit ;
72810: POP
72811: POP
72812: GO 72818
// end ;
72814: GO 72748
72816: POP
72817: POP
// end ;
72818: LD_VAR 0 4
72822: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
72823: LD_INT 0
72825: PPUSH
72826: PPUSH
72827: PPUSH
// if btype = b_depot then
72828: LD_VAR 0 2
72832: PUSH
72833: LD_INT 0
72835: EQUAL
72836: IFFALSE 72848
// begin result := true ;
72838: LD_ADDR_VAR 0 3
72842: PUSH
72843: LD_INT 1
72845: ST_TO_ADDR
// exit ;
72846: GO 72968
// end ; pom := GetBase ( depot ) ;
72848: LD_ADDR_VAR 0 4
72852: PUSH
72853: LD_VAR 0 1
72857: PPUSH
72858: CALL_OW 274
72862: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
72863: LD_ADDR_VAR 0 5
72867: PUSH
72868: LD_VAR 0 2
72872: PPUSH
72873: LD_VAR 0 1
72877: PPUSH
72878: CALL_OW 248
72882: PPUSH
72883: CALL_OW 450
72887: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
72888: LD_ADDR_VAR 0 3
72892: PUSH
72893: LD_VAR 0 4
72897: PPUSH
72898: LD_INT 1
72900: PPUSH
72901: CALL_OW 275
72905: PUSH
72906: LD_VAR 0 5
72910: PUSH
72911: LD_INT 1
72913: ARRAY
72914: GREATEREQUAL
72915: IFFALSE 72941
72917: PUSH
72918: LD_VAR 0 4
72922: PPUSH
72923: LD_INT 2
72925: PPUSH
72926: CALL_OW 275
72930: PUSH
72931: LD_VAR 0 5
72935: PUSH
72936: LD_INT 2
72938: ARRAY
72939: GREATEREQUAL
72940: AND
72941: IFFALSE 72967
72943: PUSH
72944: LD_VAR 0 4
72948: PPUSH
72949: LD_INT 3
72951: PPUSH
72952: CALL_OW 275
72956: PUSH
72957: LD_VAR 0 5
72961: PUSH
72962: LD_INT 3
72964: ARRAY
72965: GREATEREQUAL
72966: AND
72967: ST_TO_ADDR
// end ;
72968: LD_VAR 0 3
72972: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
72973: LD_INT 0
72975: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
72976: LD_VAR 0 1
72980: PPUSH
72981: LD_VAR 0 2
72985: PPUSH
72986: LD_INT 0
72988: PPUSH
72989: LD_INT 0
72991: PPUSH
72992: LD_INT 1
72994: PPUSH
72995: LD_INT 0
72997: PPUSH
72998: CALL_OW 587
// end ;
73002: LD_VAR 0 3
73006: RET
// export function CenterOnNow ( unit ) ; begin
73007: LD_INT 0
73009: PPUSH
// result := IsInUnit ( unit ) ;
73010: LD_ADDR_VAR 0 2
73014: PUSH
73015: LD_VAR 0 1
73019: PPUSH
73020: CALL_OW 310
73024: ST_TO_ADDR
// if not result then
73025: LD_VAR 0 2
73029: NOT
73030: IFFALSE 73042
// result := unit ;
73032: LD_ADDR_VAR 0 2
73036: PUSH
73037: LD_VAR 0 1
73041: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
73042: LD_VAR 0 1
73046: PPUSH
73047: CALL_OW 87
// end ;
73051: LD_VAR 0 2
73055: RET
// export function ComMoveHex ( unit , hex ) ; begin
73056: LD_INT 0
73058: PPUSH
// if not hex then
73059: LD_VAR 0 2
73063: NOT
73064: IFFALSE 73068
// exit ;
73066: GO 73121
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
73068: LD_VAR 0 2
73072: PUSH
73073: LD_INT 1
73075: ARRAY
73076: PPUSH
73077: LD_VAR 0 2
73081: PUSH
73082: LD_INT 2
73084: ARRAY
73085: PPUSH
73086: CALL_OW 428
73090: IFFALSE 73094
// exit ;
73092: GO 73121
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
73094: LD_VAR 0 1
73098: PPUSH
73099: LD_VAR 0 2
73103: PUSH
73104: LD_INT 1
73106: ARRAY
73107: PPUSH
73108: LD_VAR 0 2
73112: PUSH
73113: LD_INT 2
73115: ARRAY
73116: PPUSH
73117: CALL_OW 111
// end ;
73121: LD_VAR 0 3
73125: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
73126: LD_INT 0
73128: PPUSH
73129: PPUSH
73130: PPUSH
// if not unit or not enemy then
73131: LD_VAR 0 1
73135: NOT
73136: IFTRUE 73145
73138: PUSH
73139: LD_VAR 0 2
73143: NOT
73144: OR
73145: IFFALSE 73149
// exit ;
73147: GO 73275
// x := GetX ( enemy ) ;
73149: LD_ADDR_VAR 0 4
73153: PUSH
73154: LD_VAR 0 2
73158: PPUSH
73159: CALL_OW 250
73163: ST_TO_ADDR
// y := GetY ( enemy ) ;
73164: LD_ADDR_VAR 0 5
73168: PUSH
73169: LD_VAR 0 2
73173: PPUSH
73174: CALL_OW 251
73178: ST_TO_ADDR
// if ValidHex ( x , y ) then
73179: LD_VAR 0 4
73183: PPUSH
73184: LD_VAR 0 5
73188: PPUSH
73189: CALL_OW 488
73193: IFFALSE 73275
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
73195: LD_VAR 0 2
73199: PPUSH
73200: CALL_OW 247
73204: PUSH
73205: LD_INT 3
73207: PUSH
73208: LD_INT 2
73210: PUSH
73211: EMPTY
73212: LIST
73213: LIST
73214: IN
73215: IFTRUE 73238
73217: PUSH
73218: LD_VAR 0 1
73222: PPUSH
73223: CALL_OW 255
73227: PPUSH
73228: LD_VAR 0 2
73232: PPUSH
73233: CALL_OW 292
73237: OR
73238: IFFALSE 73256
// ComAttackUnit ( unit , enemy ) else
73240: LD_VAR 0 1
73244: PPUSH
73245: LD_VAR 0 2
73249: PPUSH
73250: CALL_OW 115
73254: GO 73275
// ComAgressiveMove ( unit , x , y ) ;
73256: LD_VAR 0 1
73260: PPUSH
73261: LD_VAR 0 4
73265: PPUSH
73266: LD_VAR 0 5
73270: PPUSH
73271: CALL_OW 114
// end ;
73275: LD_VAR 0 3
73279: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
73280: LD_INT 0
73282: PPUSH
73283: PPUSH
73284: PPUSH
// list := AreaToList ( area , 0 ) ;
73285: LD_ADDR_VAR 0 5
73289: PUSH
73290: LD_VAR 0 1
73294: PPUSH
73295: LD_INT 0
73297: PPUSH
73298: CALL_OW 517
73302: ST_TO_ADDR
// if not list then
73303: LD_VAR 0 5
73307: NOT
73308: IFFALSE 73312
// exit ;
73310: GO 73442
// if all then
73312: LD_VAR 0 2
73316: IFFALSE 73404
// begin for i := 1 to list [ 1 ] do
73318: LD_ADDR_VAR 0 4
73322: PUSH
73323: DOUBLE
73324: LD_INT 1
73326: DEC
73327: ST_TO_ADDR
73328: LD_VAR 0 5
73332: PUSH
73333: LD_INT 1
73335: ARRAY
73336: PUSH
73337: FOR_TO
73338: IFFALSE 73400
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
73340: LD_ADDR_VAR 0 3
73344: PUSH
73345: LD_VAR 0 3
73349: PPUSH
73350: LD_VAR 0 3
73354: PUSH
73355: LD_INT 1
73357: PLUS
73358: PPUSH
73359: LD_VAR 0 5
73363: PUSH
73364: LD_INT 1
73366: ARRAY
73367: PUSH
73368: LD_VAR 0 4
73372: ARRAY
73373: PUSH
73374: LD_VAR 0 5
73378: PUSH
73379: LD_INT 2
73381: ARRAY
73382: PUSH
73383: LD_VAR 0 4
73387: ARRAY
73388: PUSH
73389: EMPTY
73390: LIST
73391: LIST
73392: PPUSH
73393: CALL_OW 1
73397: ST_TO_ADDR
73398: GO 73337
73400: POP
73401: POP
// exit ;
73402: GO 73442
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
73404: LD_ADDR_VAR 0 3
73408: PUSH
73409: LD_VAR 0 5
73413: PUSH
73414: LD_INT 1
73416: ARRAY
73417: PUSH
73418: LD_INT 1
73420: ARRAY
73421: PUSH
73422: LD_VAR 0 5
73426: PUSH
73427: LD_INT 2
73429: ARRAY
73430: PUSH
73431: LD_INT 1
73433: ARRAY
73434: PUSH
73435: EMPTY
73436: LIST
73437: LIST
73438: PUSH
73439: EMPTY
73440: LIST
73441: ST_TO_ADDR
// end ;
73442: LD_VAR 0 3
73446: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
73447: LD_INT 0
73449: PPUSH
73450: PPUSH
// list := AreaToList ( area , 0 ) ;
73451: LD_ADDR_VAR 0 4
73455: PUSH
73456: LD_VAR 0 1
73460: PPUSH
73461: LD_INT 0
73463: PPUSH
73464: CALL_OW 517
73468: ST_TO_ADDR
// if not list then
73469: LD_VAR 0 4
73473: NOT
73474: IFFALSE 73478
// exit ;
73476: GO 73519
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
73478: LD_ADDR_VAR 0 3
73482: PUSH
73483: LD_VAR 0 4
73487: PUSH
73488: LD_INT 1
73490: ARRAY
73491: PUSH
73492: LD_INT 1
73494: ARRAY
73495: PUSH
73496: LD_VAR 0 4
73500: PUSH
73501: LD_INT 2
73503: ARRAY
73504: PUSH
73505: LD_INT 1
73507: ARRAY
73508: PUSH
73509: LD_VAR 0 2
73513: PUSH
73514: EMPTY
73515: LIST
73516: LIST
73517: LIST
73518: ST_TO_ADDR
// end ;
73519: LD_VAR 0 3
73523: RET
// export function First ( array ) ; begin
73524: LD_INT 0
73526: PPUSH
// if not array then
73527: LD_VAR 0 1
73531: NOT
73532: IFFALSE 73536
// exit ;
73534: GO 73550
// result := array [ 1 ] ;
73536: LD_ADDR_VAR 0 2
73540: PUSH
73541: LD_VAR 0 1
73545: PUSH
73546: LD_INT 1
73548: ARRAY
73549: ST_TO_ADDR
// end ;
73550: LD_VAR 0 2
73554: RET
// export function Last ( array ) ; begin
73555: LD_INT 0
73557: PPUSH
// if not array then
73558: LD_VAR 0 1
73562: NOT
73563: IFFALSE 73567
// exit ;
73565: GO 73583
// result := array [ array ] ;
73567: LD_ADDR_VAR 0 2
73571: PUSH
73572: LD_VAR 0 1
73576: PUSH
73577: LD_VAR 0 1
73581: ARRAY
73582: ST_TO_ADDR
// end ;
73583: LD_VAR 0 2
73587: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
73588: LD_INT 0
73590: PPUSH
73591: PPUSH
// result := [ ] ;
73592: LD_ADDR_VAR 0 5
73596: PUSH
73597: EMPTY
73598: ST_TO_ADDR
// if not array then
73599: LD_VAR 0 1
73603: NOT
73604: IFFALSE 73608
// exit ;
73606: GO 73720
// for i := 1 to array do
73608: LD_ADDR_VAR 0 6
73612: PUSH
73613: DOUBLE
73614: LD_INT 1
73616: DEC
73617: ST_TO_ADDR
73618: LD_VAR 0 1
73622: PUSH
73623: FOR_TO
73624: IFFALSE 73718
// if array [ i ] [ index ] = value then
73626: LD_VAR 0 1
73630: PUSH
73631: LD_VAR 0 6
73635: ARRAY
73636: PUSH
73637: LD_VAR 0 2
73641: ARRAY
73642: PUSH
73643: LD_VAR 0 3
73647: EQUAL
73648: IFFALSE 73716
// begin if indexColumn then
73650: LD_VAR 0 4
73654: IFFALSE 73690
// result := Join ( result , array [ i ] [ indexColumn ] ) else
73656: LD_ADDR_VAR 0 5
73660: PUSH
73661: LD_VAR 0 5
73665: PPUSH
73666: LD_VAR 0 1
73670: PUSH
73671: LD_VAR 0 6
73675: ARRAY
73676: PUSH
73677: LD_VAR 0 4
73681: ARRAY
73682: PPUSH
73683: CALL 68728 0 2
73687: ST_TO_ADDR
73688: GO 73716
// result := Join ( result , array [ i ] ) ;
73690: LD_ADDR_VAR 0 5
73694: PUSH
73695: LD_VAR 0 5
73699: PPUSH
73700: LD_VAR 0 1
73704: PUSH
73705: LD_VAR 0 6
73709: ARRAY
73710: PPUSH
73711: CALL 68728 0 2
73715: ST_TO_ADDR
// end ;
73716: GO 73623
73718: POP
73719: POP
// end ;
73720: LD_VAR 0 5
73724: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
73725: LD_INT 0
73727: PPUSH
// if not vehicles or not parkingPoint then
73728: LD_VAR 0 1
73732: NOT
73733: IFTRUE 73742
73735: PUSH
73736: LD_VAR 0 2
73740: NOT
73741: OR
73742: IFFALSE 73746
// exit ;
73744: GO 73844
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
73746: LD_ADDR_VAR 0 1
73750: PUSH
73751: LD_VAR 0 1
73755: PPUSH
73756: LD_INT 50
73758: PUSH
73759: EMPTY
73760: LIST
73761: PUSH
73762: LD_INT 3
73764: PUSH
73765: LD_INT 92
73767: PUSH
73768: LD_VAR 0 2
73772: PUSH
73773: LD_INT 1
73775: ARRAY
73776: PUSH
73777: LD_VAR 0 2
73781: PUSH
73782: LD_INT 2
73784: ARRAY
73785: PUSH
73786: LD_INT 8
73788: PUSH
73789: EMPTY
73790: LIST
73791: LIST
73792: LIST
73793: LIST
73794: PUSH
73795: EMPTY
73796: LIST
73797: LIST
73798: PUSH
73799: EMPTY
73800: LIST
73801: LIST
73802: PPUSH
73803: CALL_OW 72
73807: ST_TO_ADDR
// if not vehicles then
73808: LD_VAR 0 1
73812: NOT
73813: IFFALSE 73817
// exit ;
73815: GO 73844
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
73817: LD_VAR 0 1
73821: PPUSH
73822: LD_VAR 0 2
73826: PUSH
73827: LD_INT 1
73829: ARRAY
73830: PPUSH
73831: LD_VAR 0 2
73835: PUSH
73836: LD_INT 2
73838: ARRAY
73839: PPUSH
73840: CALL_OW 111
// end ;
73844: LD_VAR 0 3
73848: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
73849: LD_INT 0
73851: PPUSH
73852: PPUSH
73853: PPUSH
// if not side or not area then
73854: LD_VAR 0 1
73858: NOT
73859: IFTRUE 73868
73861: PUSH
73862: LD_VAR 0 2
73866: NOT
73867: OR
73868: IFFALSE 73872
// exit ;
73870: GO 73991
// tmp := AreaToList ( area , 0 ) ;
73872: LD_ADDR_VAR 0 5
73876: PUSH
73877: LD_VAR 0 2
73881: PPUSH
73882: LD_INT 0
73884: PPUSH
73885: CALL_OW 517
73889: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
73890: LD_ADDR_VAR 0 4
73894: PUSH
73895: DOUBLE
73896: LD_INT 1
73898: DEC
73899: ST_TO_ADDR
73900: LD_VAR 0 5
73904: PUSH
73905: LD_INT 1
73907: ARRAY
73908: PUSH
73909: FOR_TO
73910: IFFALSE 73989
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
73912: LD_VAR 0 5
73916: PUSH
73917: LD_INT 1
73919: ARRAY
73920: PUSH
73921: LD_VAR 0 4
73925: ARRAY
73926: PPUSH
73927: LD_VAR 0 5
73931: PUSH
73932: LD_INT 2
73934: ARRAY
73935: PUSH
73936: LD_VAR 0 4
73940: ARRAY
73941: PPUSH
73942: CALL_OW 351
73946: IFFALSE 73987
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
73948: LD_VAR 0 5
73952: PUSH
73953: LD_INT 1
73955: ARRAY
73956: PUSH
73957: LD_VAR 0 4
73961: ARRAY
73962: PPUSH
73963: LD_VAR 0 5
73967: PUSH
73968: LD_INT 2
73970: ARRAY
73971: PUSH
73972: LD_VAR 0 4
73976: ARRAY
73977: PPUSH
73978: LD_VAR 0 1
73982: PPUSH
73983: CALL_OW 244
// end ;
73987: GO 73909
73989: POP
73990: POP
// end ; end_of_file
73991: LD_VAR 0 3
73995: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
73996: LD_VAR 0 1
74000: PUSH
74001: LD_INT 200
74003: DOUBLE
74004: GREATEREQUAL
74005: IFFALSE 74013
74007: LD_INT 299
74009: DOUBLE
74010: LESSEQUAL
74011: IFTRUE 74015
74013: GO 74047
74015: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
74016: LD_VAR 0 1
74020: PPUSH
74021: LD_VAR 0 2
74025: PPUSH
74026: LD_VAR 0 3
74030: PPUSH
74031: LD_VAR 0 4
74035: PPUSH
74036: LD_VAR 0 5
74040: PPUSH
74041: CALL 25839 0 5
74045: GO 74124
74047: LD_INT 300
74049: DOUBLE
74050: GREATEREQUAL
74051: IFFALSE 74059
74053: LD_INT 399
74055: DOUBLE
74056: LESSEQUAL
74057: IFTRUE 74061
74059: GO 74123
74061: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
74062: LD_VAR 0 1
74066: PPUSH
74067: LD_VAR 0 2
74071: PPUSH
74072: LD_VAR 0 3
74076: PPUSH
74077: LD_VAR 0 4
74081: PPUSH
74082: LD_VAR 0 5
74086: PPUSH
74087: LD_VAR 0 6
74091: PPUSH
74092: LD_VAR 0 7
74096: PPUSH
74097: LD_VAR 0 8
74101: PPUSH
74102: LD_VAR 0 9
74106: PPUSH
74107: LD_VAR 0 10
74111: PPUSH
74112: LD_VAR 0 11
74116: PPUSH
74117: CALL 21723 0 11
74121: GO 74124
74123: POP
// end ;
74124: PPOPN 11
74126: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
74127: LD_VAR 0 1
74131: PPUSH
74132: LD_VAR 0 2
74136: PPUSH
74137: LD_VAR 0 3
74141: PPUSH
74142: LD_VAR 0 4
74146: PPUSH
74147: LD_VAR 0 5
74151: PPUSH
74152: CALL 25220 0 5
// end ; end_of_file
74156: PPOPN 5
74158: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
74159: LD_VAR 0 1
74163: PPUSH
74164: LD_VAR 0 2
74168: PPUSH
74169: LD_VAR 0 3
74173: PPUSH
74174: LD_VAR 0 4
74178: PPUSH
74179: LD_VAR 0 5
74183: PPUSH
74184: LD_VAR 0 6
74188: PPUSH
74189: CALL 9263 0 6
// end ;
74193: PPOPN 6
74195: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
74196: LD_INT 0
74198: PPUSH
// begin if not units then
74199: LD_VAR 0 1
74203: NOT
74204: IFFALSE 74208
// exit ;
74206: GO 74208
// end ;
74208: PPOPN 7
74210: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
74211: CALL 9150 0 0
// end ;
74215: PPOPN 1
74217: END
