// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RandomizeAll ;
  11: CALL_OW 11
// Init ;
  15: CALL 87 0 0
// InitRestrictions ;
  19: CALL 215 0 0
// if debug then
  23: LD_EXP 1
  27: IFFALSE 33
// DebugMode ;
  29: CALL 296 0 0
// SpawnApeman ( apemanStartArea , 2 ) ;
  33: LD_INT 12
  35: PPUSH
  36: LD_INT 2
  38: PPUSH
  39: CALL 790 0 2
// SpawnApeman ( apemanArea , [ 10 , 8 , 7 , 6 ] [ Difficulty ] ) ;
  43: LD_INT 11
  45: PPUSH
  46: LD_INT 10
  48: PUSH
  49: LD_INT 8
  51: PUSH
  52: LD_INT 7
  54: PUSH
  55: LD_INT 6
  57: PUSH
  58: EMPTY
  59: LIST
  60: LIST
  61: LIST
  62: LIST
  63: PUSH
  64: LD_OWVAR 67
  68: ARRAY
  69: PPUSH
  70: CALL 790 0 2
// CreateNature ;
  74: CALL 523 0 0
// PrepareAmericans ;
  78: CALL 1389 0 0
// Action ;
  82: CALL 2325 0 0
// end ;
  86: END
// export debug ; export mission_prefix , mission_prefix_prev ; export deltaBuilded , denisArrives , Delta , radar_allowed , first_apeman_tamed , apeman_army , radar_researched , radar_builded ; export apeman_counter , arab_spotted , end_mission , apeKillCounter ; function Init ; begin
  87: LD_INT 0
  89: PPUSH
// debug := false ;
  90: LD_ADDR_EXP 1
  94: PUSH
  95: LD_INT 0
  97: ST_TO_ADDR
// mission_prefix := 05_ ;
  98: LD_ADDR_EXP 2
 102: PUSH
 103: LD_STRING 05_
 105: ST_TO_ADDR
// mission_prefix_prev := 05a_ ;
 106: LD_ADDR_EXP 3
 110: PUSH
 111: LD_STRING 05a_
 113: ST_TO_ADDR
// deltaBuilded := false ;
 114: LD_ADDR_EXP 4
 118: PUSH
 119: LD_INT 0
 121: ST_TO_ADDR
// denisArrives := false ;
 122: LD_ADDR_EXP 5
 126: PUSH
 127: LD_INT 0
 129: ST_TO_ADDR
// radar_allowed := false ;
 130: LD_ADDR_EXP 7
 134: PUSH
 135: LD_INT 0
 137: ST_TO_ADDR
// first_apeman_tamed := false ;
 138: LD_ADDR_EXP 8
 142: PUSH
 143: LD_INT 0
 145: ST_TO_ADDR
// arab_spotted := false ;
 146: LD_ADDR_EXP 13
 150: PUSH
 151: LD_INT 0
 153: ST_TO_ADDR
// end_mission := false ;
 154: LD_ADDR_EXP 14
 158: PUSH
 159: LD_INT 0
 161: ST_TO_ADDR
// apeman_army := false ;
 162: LD_ADDR_EXP 9
 166: PUSH
 167: LD_INT 0
 169: ST_TO_ADDR
// radar_researched := false ;
 170: LD_ADDR_EXP 10
 174: PUSH
 175: LD_INT 0
 177: ST_TO_ADDR
// radar_builded := false ;
 178: LD_ADDR_EXP 11
 182: PUSH
 183: LD_INT 0
 185: ST_TO_ADDR
// apeman_counter := 0 ;
 186: LD_ADDR_EXP 12
 190: PUSH
 191: LD_INT 0
 193: ST_TO_ADDR
// Delta := 0 ;
 194: LD_ADDR_EXP 6
 198: PUSH
 199: LD_INT 0
 201: ST_TO_ADDR
// apeKillCounter := 0 ;
 202: LD_ADDR_EXP 15
 206: PUSH
 207: LD_INT 0
 209: ST_TO_ADDR
// end ;
 210: LD_VAR 0 1
 214: RET
// function InitRestrictions ; begin
 215: LD_INT 0
 217: PPUSH
// SetRestrict ( b_lab_half , 1 , state_enabled ) ;
 218: LD_INT 7
 220: PPUSH
 221: LD_INT 1
 223: PPUSH
 224: LD_INT 1
 226: PPUSH
 227: CALL_OW 324
// SetRestrict ( b_lab_full , 1 , state_enabled ) ;
 231: LD_INT 8
 233: PPUSH
 234: LD_INT 1
 236: PPUSH
 237: LD_INT 1
 239: PPUSH
 240: CALL_OW 324
// SetRestrict ( b_lab_weapon , 1 , state_enabled ) ;
 244: LD_INT 10
 246: PPUSH
 247: LD_INT 1
 249: PPUSH
 250: LD_INT 1
 252: PPUSH
 253: CALL_OW 324
// SetTech ( tech_gatling , 1 , LoadVariable ( GatlingInGamma , 1 ) ) ;
 257: LD_INT 69
 259: PPUSH
 260: LD_INT 1
 262: PPUSH
 263: LD_STRING GatlingInGamma
 265: PPUSH
 266: LD_INT 1
 268: PPUSH
 269: CALL_OW 30
 273: PPUSH
 274: CALL_OW 322
// SetTech ( tech_weap1 , 1 , state_enabled ) ;
 278: LD_INT 51
 280: PPUSH
 281: LD_INT 1
 283: PPUSH
 284: LD_INT 1
 286: PPUSH
 287: CALL_OW 322
// end ;
 291: LD_VAR 0 1
 295: RET
// function DebugMode ; begin
 296: LD_INT 0
 298: PPUSH
// FogOff ( 1 ) ;
 299: LD_INT 1
 301: PPUSH
 302: CALL_OW 344
// Difficulty := 2 ;
 306: LD_ADDR_OWVAR 67
 310: PUSH
 311: LD_INT 2
 313: ST_TO_ADDR
// end ;
 314: LD_VAR 0 1
 318: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 0 ] ] ) >= 7 do
 319: LD_INT 22
 321: PUSH
 322: LD_INT 1
 324: PUSH
 325: EMPTY
 326: LIST
 327: LIST
 328: PUSH
 329: LD_INT 23
 331: PUSH
 332: LD_INT 0
 334: PUSH
 335: EMPTY
 336: LIST
 337: LIST
 338: PUSH
 339: EMPTY
 340: LIST
 341: LIST
 342: PPUSH
 343: CALL_OW 69
 347: PUSH
 348: LD_INT 7
 350: GREATEREQUAL
 351: IFFALSE 363
 353: GO 355
 355: DISABLE
// SetAchievement ( ACH_TAME ) ;
 356: LD_STRING ACH_TAME
 358: PPUSH
 359: CALL_OW 543
 363: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_bweapon , us_radar ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_radar ] ] ) do
 364: LD_INT 22
 366: PUSH
 367: LD_INT 1
 369: PUSH
 370: EMPTY
 371: LIST
 372: LIST
 373: PUSH
 374: LD_INT 35
 376: PUSH
 377: LD_INT 11
 379: PUSH
 380: EMPTY
 381: LIST
 382: LIST
 383: PUSH
 384: EMPTY
 385: LIST
 386: LIST
 387: PPUSH
 388: CALL_OW 69
 392: PUSH
 393: LD_INT 22
 395: PUSH
 396: LD_INT 1
 398: PUSH
 399: EMPTY
 400: LIST
 401: LIST
 402: PUSH
 403: LD_INT 34
 405: PUSH
 406: LD_INT 11
 408: PUSH
 409: EMPTY
 410: LIST
 411: LIST
 412: PUSH
 413: EMPTY
 414: LIST
 415: LIST
 416: PPUSH
 417: CALL_OW 69
 421: AND
 422: IFFALSE 434
 424: GO 426
 426: DISABLE
// SetAchievement ( ACH_RADAR ) ; end_of_file
 427: LD_STRING ACH_RADAR
 429: PPUSH
 430: CALL_OW 543
 434: END
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 435: LD_INT 0
 437: PPUSH
// uc_side := side ;
 438: LD_ADDR_OWVAR 20
 442: PUSH
 443: LD_VAR 0 1
 447: ST_TO_ADDR
// uc_nation := nation ;
 448: LD_ADDR_OWVAR 21
 452: PUSH
 453: LD_VAR 0 2
 457: ST_TO_ADDR
// vc_chassis := chassis ;
 458: LD_ADDR_OWVAR 37
 462: PUSH
 463: LD_VAR 0 3
 467: ST_TO_ADDR
// vc_engine := engine ;
 468: LD_ADDR_OWVAR 39
 472: PUSH
 473: LD_VAR 0 4
 477: ST_TO_ADDR
// vc_control := control ;
 478: LD_ADDR_OWVAR 38
 482: PUSH
 483: LD_VAR 0 5
 487: ST_TO_ADDR
// vc_weapon := weapon ;
 488: LD_ADDR_OWVAR 40
 492: PUSH
 493: LD_VAR 0 6
 497: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 498: LD_ADDR_OWVAR 41
 502: PUSH
 503: LD_VAR 0 7
 507: ST_TO_ADDR
// result := CreateVehicle ;
 508: LD_ADDR_VAR 0 8
 512: PUSH
 513: CALL_OW 45
 517: ST_TO_ADDR
// end ;
 518: LD_VAR 0 8
 522: RET
// export function CreateNature ; var i ; begin
 523: LD_INT 0
 525: PPUSH
 526: PPUSH
// for i := 1 to 4 do
 527: LD_ADDR_VAR 0 2
 531: PUSH
 532: DOUBLE
 533: LD_INT 1
 535: DEC
 536: ST_TO_ADDR
 537: LD_INT 4
 539: PUSH
 540: FOR_TO
 541: IFFALSE 564
// begin PrepareFrog ( ) ;
 543: CALL 62643 0 0
// PlaceUnitArea ( CreateHuman , swampArea , false ) ;
 547: CALL_OW 44
 551: PPUSH
 552: LD_INT 17
 554: PPUSH
 555: LD_INT 0
 557: PPUSH
 558: CALL_OW 49
// end ;
 562: GO 540
 564: POP
 565: POP
// for i := 1 to 6 do
 566: LD_ADDR_VAR 0 2
 570: PUSH
 571: DOUBLE
 572: LD_INT 1
 574: DEC
 575: ST_TO_ADDR
 576: LD_INT 6
 578: PUSH
 579: FOR_TO
 580: IFFALSE 603
// begin PrepareBird ( ) ;
 582: CALL 62723 0 0
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 586: CALL_OW 44
 590: PPUSH
 591: LD_INT 1
 593: PPUSH
 594: LD_INT 0
 596: PPUSH
 597: CALL_OW 49
// end ;
 601: GO 579
 603: POP
 604: POP
// for i := 1 to 11 do
 605: LD_ADDR_VAR 0 2
 609: PUSH
 610: DOUBLE
 611: LD_INT 1
 613: DEC
 614: ST_TO_ADDR
 615: LD_INT 11
 617: PUSH
 618: FOR_TO
 619: IFFALSE 642
// begin PrepareEnchidna ( ) ;
 621: CALL 62603 0 0
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 625: CALL_OW 44
 629: PPUSH
 630: LD_INT 1
 632: PPUSH
 633: LD_INT 0
 635: PPUSH
 636: CALL_OW 49
// end ;
 640: GO 618
 642: POP
 643: POP
// for i := 1 to 3 do
 644: LD_ADDR_VAR 0 2
 648: PUSH
 649: DOUBLE
 650: LD_INT 1
 652: DEC
 653: ST_TO_ADDR
 654: LD_INT 3
 656: PUSH
 657: FOR_TO
 658: IFFALSE 684
// begin PrepareTiger ( 10 ) ;
 660: LD_INT 10
 662: PPUSH
 663: CALL 62542 0 1
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 667: CALL_OW 44
 671: PPUSH
 672: LD_INT 1
 674: PPUSH
 675: LD_INT 0
 677: PPUSH
 678: CALL_OW 49
// end ;
 682: GO 657
 684: POP
 685: POP
// PrepareMastodont ( ) ;
 686: CALL 62803 0 0
// PlaceUnitArea ( CreateVehicle , mastodontArea , false ) ;
 690: CALL_OW 45
 694: PPUSH
 695: LD_INT 18
 697: PPUSH
 698: LD_INT 0
 700: PPUSH
 701: CALL_OW 49
// end ;
 705: LD_VAR 0 1
 709: RET
// export function SayX ( units , ident ) ; var i ; begin
 710: LD_INT 0
 712: PPUSH
 713: PPUSH
// result := false ;
 714: LD_ADDR_VAR 0 3
 718: PUSH
 719: LD_INT 0
 721: ST_TO_ADDR
// if not units then
 722: LD_VAR 0 1
 726: NOT
 727: IFFALSE 731
// exit ;
 729: GO 785
// for i in units do
 731: LD_ADDR_VAR 0 4
 735: PUSH
 736: LD_VAR 0 1
 740: PUSH
 741: FOR_IN
 742: IFFALSE 783
// if IsOk ( i ) then
 744: LD_VAR 0 4
 748: PPUSH
 749: CALL_OW 302
 753: IFFALSE 781
// begin Say ( i , ident ) ;
 755: LD_VAR 0 4
 759: PPUSH
 760: LD_VAR 0 2
 764: PPUSH
 765: CALL_OW 88
// result := i ;
 769: LD_ADDR_VAR 0 3
 773: PUSH
 774: LD_VAR 0 4
 778: ST_TO_ADDR
// break ;
 779: GO 783
// end ;
 781: GO 741
 783: POP
 784: POP
// end ;
 785: LD_VAR 0 3
 789: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 790: LD_INT 0
 792: PPUSH
 793: PPUSH
// InitUc ;
 794: CALL_OW 18
// InitHc ;
 798: CALL_OW 19
// uc_side := 0 ;
 802: LD_ADDR_OWVAR 20
 806: PUSH
 807: LD_INT 0
 809: ST_TO_ADDR
// uc_nation := 0 ;
 810: LD_ADDR_OWVAR 21
 814: PUSH
 815: LD_INT 0
 817: ST_TO_ADDR
// for i = 1 to amount do
 818: LD_ADDR_VAR 0 4
 822: PUSH
 823: DOUBLE
 824: LD_INT 1
 826: DEC
 827: ST_TO_ADDR
 828: LD_VAR 0 2
 832: PUSH
 833: FOR_TO
 834: IFFALSE 916
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 836: LD_ADDR_OWVAR 29
 840: PUSH
 841: LD_INT 9
 843: PPUSH
 844: LD_INT 12
 846: PPUSH
 847: CALL_OW 12
 851: PUSH
 852: LD_INT 9
 854: PPUSH
 855: LD_INT 12
 857: PPUSH
 858: CALL_OW 12
 862: PUSH
 863: EMPTY
 864: LIST
 865: LIST
 866: ST_TO_ADDR
// hc_agressivity := rand ( - 5 , 5 ) ;
 867: LD_ADDR_OWVAR 35
 871: PUSH
 872: LD_INT 5
 874: NEG
 875: PPUSH
 876: LD_INT 5
 878: PPUSH
 879: CALL_OW 12
 883: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 884: LD_INT 0
 886: PPUSH
 887: LD_INT 12
 889: PPUSH
 890: LD_INT 1
 892: PPUSH
 893: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 897: CALL_OW 44
 901: PPUSH
 902: LD_VAR 0 1
 906: PPUSH
 907: LD_INT 0
 909: PPUSH
 910: CALL_OW 49
// end ;
 914: GO 833
 916: POP
 917: POP
// InitHc ;
 918: CALL_OW 19
// end ;
 922: LD_VAR 0 3
 926: RET
// export function Attack ( unit , enemy_list ) ; var target , targets_list ; begin
 927: LD_INT 0
 929: PPUSH
 930: PPUSH
 931: PPUSH
// if not unit then
 932: LD_VAR 0 1
 936: NOT
 937: IFFALSE 941
// exit ;
 939: GO 1384
// if IsInUnit ( unit ) then
 941: LD_VAR 0 1
 945: PPUSH
 946: CALL_OW 310
 950: IFFALSE 967
// unit := IsDrivenBy ( unit ) ;
 952: LD_ADDR_VAR 0 1
 956: PUSH
 957: LD_VAR 0 1
 961: PPUSH
 962: CALL_OW 311
 966: ST_TO_ADDR
// targets_list := [ ] ;
 967: LD_ADDR_VAR 0 5
 971: PUSH
 972: EMPTY
 973: ST_TO_ADDR
// target := UnitFilter ( enemy_list , [ [ f_lives , 250 ] , [ f_not , [ f_weapon , us_cargo_bay ] ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 974: LD_ADDR_VAR 0 4
 978: PUSH
 979: LD_VAR 0 2
 983: PPUSH
 984: LD_INT 24
 986: PUSH
 987: LD_INT 250
 989: PUSH
 990: EMPTY
 991: LIST
 992: LIST
 993: PUSH
 994: LD_INT 3
 996: PUSH
 997: LD_INT 34
 999: PUSH
1000: LD_INT 12
1002: PUSH
1003: EMPTY
1004: LIST
1005: LIST
1006: PUSH
1007: EMPTY
1008: LIST
1009: LIST
1010: PUSH
1011: LD_INT 21
1013: PUSH
1014: LD_INT 2
1016: PUSH
1017: EMPTY
1018: LIST
1019: LIST
1020: PUSH
1021: LD_INT 58
1023: PUSH
1024: EMPTY
1025: LIST
1026: PUSH
1027: EMPTY
1028: LIST
1029: LIST
1030: LIST
1031: LIST
1032: PPUSH
1033: CALL_OW 72
1037: ST_TO_ADDR
// if GetDistUnits ( NearestUnitToUnit ( target , unit ) , unit ) < 11 and not IsInUnit ( unit ) then
1038: LD_VAR 0 4
1042: PPUSH
1043: LD_VAR 0 1
1047: PPUSH
1048: CALL_OW 74
1052: PPUSH
1053: LD_VAR 0 1
1057: PPUSH
1058: CALL_OW 296
1062: PUSH
1063: LD_INT 11
1065: LESS
1066: PUSH
1067: LD_VAR 0 1
1071: PPUSH
1072: CALL_OW 310
1076: NOT
1077: AND
1078: IFFALSE 1106
// begin ComEnterUnit ( unit , NearestUnitToUnit ( target , unit ) ) ;
1080: LD_VAR 0 1
1084: PPUSH
1085: LD_VAR 0 4
1089: PPUSH
1090: LD_VAR 0 1
1094: PPUSH
1095: CALL_OW 74
1099: PPUSH
1100: CALL_OW 120
// exit ;
1104: GO 1384
// end ; targets_list := [ UnitFilter ( enemy_list , [ [ f_type , unit_human ] , [ f_not , [ f_inside ] ] ] ) , UnitFilter ( enemy_list , [ f_type , unit_vehicle ] ) , UnitFilter ( enemy_list , [ [ f_type , unit_building ] , [ f_not , [ f_empty ] ] ] ) , enemy_list ] ;
1106: LD_ADDR_VAR 0 5
1110: PUSH
1111: LD_VAR 0 2
1115: PPUSH
1116: LD_INT 21
1118: PUSH
1119: LD_INT 1
1121: PUSH
1122: EMPTY
1123: LIST
1124: LIST
1125: PUSH
1126: LD_INT 3
1128: PUSH
1129: LD_INT 54
1131: PUSH
1132: EMPTY
1133: LIST
1134: PUSH
1135: EMPTY
1136: LIST
1137: LIST
1138: PUSH
1139: EMPTY
1140: LIST
1141: LIST
1142: PPUSH
1143: CALL_OW 72
1147: PUSH
1148: LD_VAR 0 2
1152: PPUSH
1153: LD_INT 21
1155: PUSH
1156: LD_INT 2
1158: PUSH
1159: EMPTY
1160: LIST
1161: LIST
1162: PPUSH
1163: CALL_OW 72
1167: PUSH
1168: LD_VAR 0 2
1172: PPUSH
1173: LD_INT 21
1175: PUSH
1176: LD_INT 3
1178: PUSH
1179: EMPTY
1180: LIST
1181: LIST
1182: PUSH
1183: LD_INT 3
1185: PUSH
1186: LD_INT 58
1188: PUSH
1189: EMPTY
1190: LIST
1191: PUSH
1192: EMPTY
1193: LIST
1194: LIST
1195: PUSH
1196: EMPTY
1197: LIST
1198: LIST
1199: PPUSH
1200: CALL_OW 72
1204: PUSH
1205: LD_VAR 0 2
1209: PUSH
1210: EMPTY
1211: LIST
1212: LIST
1213: LIST
1214: LIST
1215: ST_TO_ADDR
// for target in targets_list do
1216: LD_ADDR_VAR 0 4
1220: PUSH
1221: LD_VAR 0 5
1225: PUSH
1226: FOR_IN
1227: IFFALSE 1382
// begin if target then
1229: LD_VAR 0 4
1233: IFFALSE 1380
// if GetTag ( unit ) = 11 and ( GetType ( NearestUnitToUnit ( target , unit ) ) = unit_building or GetWeapon ( NearestUnitToUnit ( target , unit ) ) = us_cargo_bay ) then
1235: LD_VAR 0 1
1239: PPUSH
1240: CALL_OW 110
1244: PUSH
1245: LD_INT 11
1247: EQUAL
1248: PUSH
1249: LD_VAR 0 4
1253: PPUSH
1254: LD_VAR 0 1
1258: PPUSH
1259: CALL_OW 74
1263: PPUSH
1264: CALL_OW 247
1268: PUSH
1269: LD_INT 3
1271: EQUAL
1272: PUSH
1273: LD_VAR 0 4
1277: PPUSH
1278: LD_VAR 0 1
1282: PPUSH
1283: CALL_OW 74
1287: PPUSH
1288: CALL_OW 264
1292: PUSH
1293: LD_INT 12
1295: EQUAL
1296: OR
1297: AND
1298: IFFALSE 1344
// begin ComPlaceDelayedCharge ( unit , 0 , 0 , NearestUnitToUnit ( target , unit ) ) ;
1300: LD_VAR 0 1
1304: PPUSH
1305: LD_INT 0
1307: PPUSH
1308: LD_INT 0
1310: PPUSH
1311: LD_VAR 0 4
1315: PPUSH
1316: LD_VAR 0 1
1320: PPUSH
1321: CALL_OW 74
1325: PPUSH
1326: CALL_OW 132
// SetTag ( unit , 0 ) ;
1330: LD_VAR 0 1
1334: PPUSH
1335: LD_INT 0
1337: PPUSH
1338: CALL_OW 109
// end else
1342: GO 1380
// if not HasTask ( unit ) then
1344: LD_VAR 0 1
1348: PPUSH
1349: CALL_OW 314
1353: NOT
1354: IFFALSE 1380
// ComAttackUnit ( unit , NearestUnitToUnit ( target , unit ) ) ;
1356: LD_VAR 0 1
1360: PPUSH
1361: LD_VAR 0 4
1365: PPUSH
1366: LD_VAR 0 1
1370: PPUSH
1371: CALL_OW 74
1375: PPUSH
1376: CALL_OW 115
// end ;
1380: GO 1226
1382: POP
1383: POP
// end ; end_of_file
1384: LD_VAR 0 3
1388: RET
// export JMM , Gladstone , Harrison , Denis , Brown , Donaldson , Lisa , Frank , Bobby , Cyrus , Mike ; export others ; export function PrepareAmericans ; var i , points , veh , tmp ; begin
1389: LD_INT 0
1391: PPUSH
1392: PPUSH
1393: PPUSH
1394: PPUSH
1395: PPUSH
// uc_nation := 1 ;
1396: LD_ADDR_OWVAR 21
1400: PUSH
1401: LD_INT 1
1403: ST_TO_ADDR
// uc_side := 4 ;
1404: LD_ADDR_OWVAR 20
1408: PUSH
1409: LD_INT 4
1411: ST_TO_ADDR
// Denis := PrepareUnit ( Denis , false ,  ) ;
1412: LD_ADDR_EXP 19
1416: PUSH
1417: LD_STRING Denis
1419: PPUSH
1420: LD_INT 0
1422: PPUSH
1423: LD_STRING 
1425: PPUSH
1426: CALL 28832 0 3
1430: ST_TO_ADDR
// Harrison := PrepareUnit ( Harisson , false ,  ) ;
1431: LD_ADDR_EXP 18
1435: PUSH
1436: LD_STRING Harisson
1438: PPUSH
1439: LD_INT 0
1441: PPUSH
1442: LD_STRING 
1444: PPUSH
1445: CALL 28832 0 3
1449: ST_TO_ADDR
// uc_side := 1 ;
1450: LD_ADDR_OWVAR 20
1454: PUSH
1455: LD_INT 1
1457: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debug ) , mission_prefix_prev ) ;
1458: LD_ADDR_EXP 16
1462: PUSH
1463: LD_STRING JMM
1465: PPUSH
1466: LD_EXP 1
1470: NOT
1471: PPUSH
1472: LD_EXP 3
1476: PPUSH
1477: CALL 28832 0 3
1481: ST_TO_ADDR
// Gladstone := PrepareUnit ( Gladstone , false , mission_prefix_prev ) ;
1482: LD_ADDR_EXP 17
1486: PUSH
1487: LD_STRING Gladstone
1489: PPUSH
1490: LD_INT 0
1492: PPUSH
1493: LD_EXP 3
1497: PPUSH
1498: CALL 28832 0 3
1502: ST_TO_ADDR
// if LoadVariable ( BrownInDelta , debug ) then
1503: LD_STRING BrownInDelta
1505: PPUSH
1506: LD_EXP 1
1510: PPUSH
1511: CALL_OW 30
1515: IFFALSE 1557
// begin Brown := PrepareUnit ( Brown , ( not debug ) , mission_prefix_prev ) ;
1517: LD_ADDR_EXP 20
1521: PUSH
1522: LD_STRING Brown
1524: PPUSH
1525: LD_EXP 1
1529: NOT
1530: PPUSH
1531: LD_EXP 3
1535: PPUSH
1536: CALL 28832 0 3
1540: ST_TO_ADDR
// tmp := tmp ^ Brown ;
1541: LD_ADDR_VAR 0 5
1545: PUSH
1546: LD_VAR 0 5
1550: PUSH
1551: LD_EXP 20
1555: ADD
1556: ST_TO_ADDR
// end ; if LoadVariable ( DonaldsonInDelta , debug ) then
1557: LD_STRING DonaldsonInDelta
1559: PPUSH
1560: LD_EXP 1
1564: PPUSH
1565: CALL_OW 30
1569: IFFALSE 1611
// begin Donaldson := PrepareUnit ( Donaldson , ( not debug ) , mission_prefix_prev ) ;
1571: LD_ADDR_EXP 21
1575: PUSH
1576: LD_STRING Donaldson
1578: PPUSH
1579: LD_EXP 1
1583: NOT
1584: PPUSH
1585: LD_EXP 3
1589: PPUSH
1590: CALL 28832 0 3
1594: ST_TO_ADDR
// tmp := tmp ^ Donaldson ;
1595: LD_ADDR_VAR 0 5
1599: PUSH
1600: LD_VAR 0 5
1604: PUSH
1605: LD_EXP 21
1609: ADD
1610: ST_TO_ADDR
// end ; if LoadVariable ( LisaInDelta , debug ) then
1611: LD_STRING LisaInDelta
1613: PPUSH
1614: LD_EXP 1
1618: PPUSH
1619: CALL_OW 30
1623: IFFALSE 1665
// begin Lisa := PrepareUnit ( Lisa , ( not debug ) , mission_prefix_prev ) ;
1625: LD_ADDR_EXP 22
1629: PUSH
1630: LD_STRING Lisa
1632: PPUSH
1633: LD_EXP 1
1637: NOT
1638: PPUSH
1639: LD_EXP 3
1643: PPUSH
1644: CALL 28832 0 3
1648: ST_TO_ADDR
// tmp := tmp ^ Lisa ;
1649: LD_ADDR_VAR 0 5
1653: PUSH
1654: LD_VAR 0 5
1658: PUSH
1659: LD_EXP 22
1663: ADD
1664: ST_TO_ADDR
// end ; if LoadVariable ( FrankInDelta , debug ) then
1665: LD_STRING FrankInDelta
1667: PPUSH
1668: LD_EXP 1
1672: PPUSH
1673: CALL_OW 30
1677: IFFALSE 1719
// begin Frank := PrepareUnit ( Frank , ( not debug ) , mission_prefix_prev ) ;
1679: LD_ADDR_EXP 23
1683: PUSH
1684: LD_STRING Frank
1686: PPUSH
1687: LD_EXP 1
1691: NOT
1692: PPUSH
1693: LD_EXP 3
1697: PPUSH
1698: CALL 28832 0 3
1702: ST_TO_ADDR
// tmp := tmp ^ Frank ;
1703: LD_ADDR_VAR 0 5
1707: PUSH
1708: LD_VAR 0 5
1712: PUSH
1713: LD_EXP 23
1717: ADD
1718: ST_TO_ADDR
// end ; if LoadVariable ( BobbyInDelta , 0 ) then
1719: LD_STRING BobbyInDelta
1721: PPUSH
1722: LD_INT 0
1724: PPUSH
1725: CALL_OW 30
1729: IFFALSE 1771
// begin Bobby := PrepareUnit ( Bobby , ( not debug ) , mission_prefix_prev ) ;
1731: LD_ADDR_EXP 24
1735: PUSH
1736: LD_STRING Bobby
1738: PPUSH
1739: LD_EXP 1
1743: NOT
1744: PPUSH
1745: LD_EXP 3
1749: PPUSH
1750: CALL 28832 0 3
1754: ST_TO_ADDR
// tmp := tmp ^ Bobby ;
1755: LD_ADDR_VAR 0 5
1759: PUSH
1760: LD_VAR 0 5
1764: PUSH
1765: LD_EXP 24
1769: ADD
1770: ST_TO_ADDR
// end ; if LoadVariable ( CyrusInDelta , 0 ) then
1771: LD_STRING CyrusInDelta
1773: PPUSH
1774: LD_INT 0
1776: PPUSH
1777: CALL_OW 30
1781: IFFALSE 1823
// begin Cyrus := PrepareUnit ( Cyrus , ( not debug ) , mission_prefix_prev ) ;
1783: LD_ADDR_EXP 25
1787: PUSH
1788: LD_STRING Cyrus
1790: PPUSH
1791: LD_EXP 1
1795: NOT
1796: PPUSH
1797: LD_EXP 3
1801: PPUSH
1802: CALL 28832 0 3
1806: ST_TO_ADDR
// tmp := tmp ^ Cyrus ;
1807: LD_ADDR_VAR 0 5
1811: PUSH
1812: LD_VAR 0 5
1816: PUSH
1817: LD_EXP 25
1821: ADD
1822: ST_TO_ADDR
// end ; others := CreateCharacterSet ( othersDelta ) ;
1823: LD_ADDR_EXP 27
1827: PUSH
1828: LD_STRING othersDelta
1830: PPUSH
1831: CALL_OW 31
1835: ST_TO_ADDR
// if not others and debug then
1836: LD_EXP 27
1840: NOT
1841: PUSH
1842: LD_EXP 1
1846: AND
1847: IFFALSE 1912
// begin InitHc ;
1849: CALL_OW 19
// for i = 1 to 2 do
1853: LD_ADDR_VAR 0 2
1857: PUSH
1858: DOUBLE
1859: LD_INT 1
1861: DEC
1862: ST_TO_ADDR
1863: LD_INT 2
1865: PUSH
1866: FOR_TO
1867: IFFALSE 1910
// begin PrepareHuman ( false , i mod 4 + 1 , 3 ) ;
1869: LD_INT 0
1871: PPUSH
1872: LD_VAR 0 2
1876: PUSH
1877: LD_INT 4
1879: MOD
1880: PUSH
1881: LD_INT 1
1883: PLUS
1884: PPUSH
1885: LD_INT 3
1887: PPUSH
1888: CALL_OW 380
// others := others ^ CreateHuman ;
1892: LD_ADDR_EXP 27
1896: PUSH
1897: LD_EXP 27
1901: PUSH
1902: CALL_OW 44
1906: ADD
1907: ST_TO_ADDR
// end ;
1908: GO 1866
1910: POP
1911: POP
// end ; if others then
1912: LD_EXP 27
1916: IFFALSE 1934
// tmp := tmp ^ others ;
1918: LD_ADDR_VAR 0 5
1922: PUSH
1923: LD_VAR 0 5
1927: PUSH
1928: LD_EXP 27
1932: ADD
1933: ST_TO_ADDR
// points := [ [ 28 , 49 ] , [ 33 , 54 ] , [ 38 , 56 ] ] ;
1934: LD_ADDR_VAR 0 3
1938: PUSH
1939: LD_INT 28
1941: PUSH
1942: LD_INT 49
1944: PUSH
1945: EMPTY
1946: LIST
1947: LIST
1948: PUSH
1949: LD_INT 33
1951: PUSH
1952: LD_INT 54
1954: PUSH
1955: EMPTY
1956: LIST
1957: LIST
1958: PUSH
1959: LD_INT 38
1961: PUSH
1962: LD_INT 56
1964: PUSH
1965: EMPTY
1966: LIST
1967: LIST
1968: PUSH
1969: EMPTY
1970: LIST
1971: LIST
1972: LIST
1973: ST_TO_ADDR
// veh := PrepareTank ( 1 , 1 , us_medium_wheeled , engine_solar , control_manual , us_cargo_bay , 80 ) ;
1974: LD_ADDR_VAR 0 4
1978: PUSH
1979: LD_INT 1
1981: PPUSH
1982: LD_INT 1
1984: PPUSH
1985: LD_INT 2
1987: PPUSH
1988: LD_INT 2
1990: PPUSH
1991: LD_INT 1
1993: PPUSH
1994: LD_INT 12
1996: PPUSH
1997: LD_INT 80
1999: PPUSH
2000: CALL 435 0 7
2004: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
2005: LD_VAR 0 4
2009: PPUSH
2010: LD_INT 1
2012: PPUSH
2013: CALL_OW 233
// PlaceUnitXY ( veh , points [ 1 ] [ 1 ] , points [ 1 ] [ 2 ] , false ) ;
2017: LD_VAR 0 4
2021: PPUSH
2022: LD_VAR 0 3
2026: PUSH
2027: LD_INT 1
2029: ARRAY
2030: PUSH
2031: LD_INT 1
2033: ARRAY
2034: PPUSH
2035: LD_VAR 0 3
2039: PUSH
2040: LD_INT 1
2042: ARRAY
2043: PUSH
2044: LD_INT 2
2046: ARRAY
2047: PPUSH
2048: LD_INT 0
2050: PPUSH
2051: CALL_OW 48
// SetCargo ( veh , mat_cans , 100 ) ;
2055: LD_VAR 0 4
2059: PPUSH
2060: LD_INT 1
2062: PPUSH
2063: LD_INT 100
2065: PPUSH
2066: CALL_OW 290
// PlaceHumanInUnit ( others [ 1 ] , veh ) ;
2070: LD_EXP 27
2074: PUSH
2075: LD_INT 1
2077: ARRAY
2078: PPUSH
2079: LD_VAR 0 4
2083: PPUSH
2084: CALL_OW 52
// veh := PrepareTank ( 1 , 1 , us_light_wheeled , engine_solar , control_manual , us_machine_gun , 80 ) ;
2088: LD_ADDR_VAR 0 4
2092: PUSH
2093: LD_INT 1
2095: PPUSH
2096: LD_INT 1
2098: PPUSH
2099: LD_INT 1
2101: PPUSH
2102: LD_INT 2
2104: PPUSH
2105: LD_INT 1
2107: PPUSH
2108: LD_INT 2
2110: PPUSH
2111: LD_INT 80
2113: PPUSH
2114: CALL 435 0 7
2118: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
2119: LD_VAR 0 4
2123: PPUSH
2124: LD_INT 1
2126: PPUSH
2127: CALL_OW 233
// PlaceUnitXY ( veh , points [ 2 ] [ 1 ] , points [ 2 ] [ 2 ] , false ) ;
2131: LD_VAR 0 4
2135: PPUSH
2136: LD_VAR 0 3
2140: PUSH
2141: LD_INT 2
2143: ARRAY
2144: PUSH
2145: LD_INT 1
2147: ARRAY
2148: PPUSH
2149: LD_VAR 0 3
2153: PUSH
2154: LD_INT 2
2156: ARRAY
2157: PUSH
2158: LD_INT 2
2160: ARRAY
2161: PPUSH
2162: LD_INT 0
2164: PPUSH
2165: CALL_OW 48
// PlaceHumanInUnit ( Gladstone , veh ) ;
2169: LD_EXP 17
2173: PPUSH
2174: LD_VAR 0 4
2178: PPUSH
2179: CALL_OW 52
// veh := PrepareTank ( 1 , 1 , us_light_wheeled , engine_solar , control_manual , us_light_gun , 80 ) ;
2183: LD_ADDR_VAR 0 4
2187: PUSH
2188: LD_INT 1
2190: PPUSH
2191: LD_INT 1
2193: PPUSH
2194: LD_INT 1
2196: PPUSH
2197: LD_INT 2
2199: PPUSH
2200: LD_INT 1
2202: PPUSH
2203: LD_INT 3
2205: PPUSH
2206: LD_INT 80
2208: PPUSH
2209: CALL 435 0 7
2213: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
2214: LD_VAR 0 4
2218: PPUSH
2219: LD_INT 1
2221: PPUSH
2222: CALL_OW 233
// PlaceUnitXY ( veh , points [ 3 ] [ 1 ] , points [ 3 ] [ 2 ] , false ) ;
2226: LD_VAR 0 4
2230: PPUSH
2231: LD_VAR 0 3
2235: PUSH
2236: LD_INT 3
2238: ARRAY
2239: PUSH
2240: LD_INT 1
2242: ARRAY
2243: PPUSH
2244: LD_VAR 0 3
2248: PUSH
2249: LD_INT 3
2251: ARRAY
2252: PUSH
2253: LD_INT 2
2255: ARRAY
2256: PPUSH
2257: LD_INT 0
2259: PPUSH
2260: CALL_OW 48
// PlaceHumanInUnit ( JMM , veh ) ;
2264: LD_EXP 16
2268: PPUSH
2269: LD_VAR 0 4
2273: PPUSH
2274: CALL_OW 52
// for i in tmp diff others [ 1 ] do
2278: LD_ADDR_VAR 0 2
2282: PUSH
2283: LD_VAR 0 5
2287: PUSH
2288: LD_EXP 27
2292: PUSH
2293: LD_INT 1
2295: ARRAY
2296: DIFF
2297: PUSH
2298: FOR_IN
2299: IFFALSE 2318
// PlaceUnitArea ( i , startArea , false ) ;
2301: LD_VAR 0 2
2305: PPUSH
2306: LD_INT 5
2308: PPUSH
2309: LD_INT 0
2311: PPUSH
2312: CALL_OW 49
2316: GO 2298
2318: POP
2319: POP
// end ; end_of_file
2320: LD_VAR 0 1
2324: RET
// export function Action ; var m ; begin
2325: LD_INT 0
2327: PPUSH
2328: PPUSH
// InGameOn ;
2329: CALL_OW 8
// CenterNowOnXY ( 28 , 51 ) ;
2333: LD_INT 28
2335: PPUSH
2336: LD_INT 51
2338: PPUSH
2339: CALL_OW 86
// Wait ( 3 ) ;
2343: LD_INT 3
2345: PPUSH
2346: CALL_OW 67
// Say ( JMM , D1d-JMM-1a ) ;
2350: LD_EXP 16
2354: PPUSH
2355: LD_STRING D1d-JMM-1a
2357: PPUSH
2358: CALL_OW 88
// SayRadio ( Harrison , D1d-Har-1 ) ;
2362: LD_EXP 18
2366: PPUSH
2367: LD_STRING D1d-Har-1
2369: PPUSH
2370: CALL_OW 94
// InGameOff ;
2374: CALL_OW 9
// SaveForQuickRestart ;
2378: CALL_OW 22
// ChangeMissionObjectives ( M1 ) ;
2382: LD_STRING M1
2384: PPUSH
2385: CALL_OW 337
// Wait ( 0 0$2 ) ;
2389: LD_INT 70
2391: PPUSH
2392: CALL_OW 67
// Say ( JMM , D2-JMM-1 ) ;
2396: LD_EXP 16
2400: PPUSH
2401: LD_STRING D2-JMM-1
2403: PPUSH
2404: CALL_OW 88
// Say ( Gladstone , D2-Glad-1 ) ;
2408: LD_EXP 17
2412: PPUSH
2413: LD_STRING D2-Glad-1
2415: PPUSH
2416: CALL_OW 88
// Say ( JMM , D2-JMM-2 ) ;
2420: LD_EXP 16
2424: PPUSH
2425: LD_STRING D2-JMM-2
2427: PPUSH
2428: CALL_OW 88
// Say ( Gladstone , D2-Glad-2 ) ;
2432: LD_EXP 17
2436: PPUSH
2437: LD_STRING D2-Glad-2
2439: PPUSH
2440: CALL_OW 88
// Say ( JMM , D2-JMM-3 ) ;
2444: LD_EXP 16
2448: PPUSH
2449: LD_STRING D2-JMM-3
2451: PPUSH
2452: CALL_OW 88
// Wait ( rand ( 0 0$30 , 1 1$00 ) ) ;
2456: LD_INT 1050
2458: PPUSH
2459: LD_INT 2100
2461: PPUSH
2462: CALL_OW 12
2466: PPUSH
2467: CALL_OW 67
// SetWeather ( 1 , 570 , 350 ) ;
2471: LD_INT 1
2473: PPUSH
2474: LD_INT 570
2476: PPUSH
2477: LD_INT 350
2479: PPUSH
2480: CALL_OW 550
// Wait ( rand ( 3 3$00 , 5 5$00 ) ) ;
2484: LD_INT 6300
2486: PPUSH
2487: LD_INT 10500
2489: PPUSH
2490: CALL_OW 12
2494: PPUSH
2495: CALL_OW 67
// SetWeather ( 0 , 570 , 350 ) ;
2499: LD_INT 0
2501: PPUSH
2502: LD_INT 570
2504: PPUSH
2505: LD_INT 350
2507: PPUSH
2508: CALL_OW 550
// end ;
2512: LD_VAR 0 1
2516: RET
// every 0 0$01 trigger FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_not , [ f_constructed ] ] , [ f_btype , b_depot ] ] ] ) and not deltaBuilded do
2517: LD_INT 22
2519: PUSH
2520: LD_INT 1
2522: PUSH
2523: EMPTY
2524: LIST
2525: LIST
2526: PUSH
2527: LD_INT 3
2529: PUSH
2530: LD_INT 57
2532: PUSH
2533: EMPTY
2534: LIST
2535: PUSH
2536: EMPTY
2537: LIST
2538: LIST
2539: PUSH
2540: LD_INT 30
2542: PUSH
2543: LD_INT 0
2545: PUSH
2546: EMPTY
2547: LIST
2548: LIST
2549: PUSH
2550: EMPTY
2551: LIST
2552: LIST
2553: LIST
2554: PUSH
2555: EMPTY
2556: LIST
2557: PPUSH
2558: CALL_OW 69
2562: PUSH
2563: LD_EXP 4
2567: NOT
2568: AND
2569: IFFALSE 2582
2571: GO 2573
2573: DISABLE
// begin deltaBuilded := true ;
2574: LD_ADDR_EXP 4
2578: PUSH
2579: LD_INT 1
2581: ST_TO_ADDR
// end ;
2582: END
// every 0 0$01 trigger not Delta and deltaBuilded and FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_not , [ f_constructed ] ] , [ f_btype , b_depot ] ] ] ) do
2583: LD_EXP 6
2587: NOT
2588: PUSH
2589: LD_EXP 4
2593: AND
2594: PUSH
2595: LD_INT 22
2597: PUSH
2598: LD_INT 1
2600: PUSH
2601: EMPTY
2602: LIST
2603: LIST
2604: PUSH
2605: LD_INT 3
2607: PUSH
2608: LD_INT 57
2610: PUSH
2611: EMPTY
2612: LIST
2613: PUSH
2614: EMPTY
2615: LIST
2616: LIST
2617: PUSH
2618: LD_INT 30
2620: PUSH
2621: LD_INT 0
2623: PUSH
2624: EMPTY
2625: LIST
2626: LIST
2627: PUSH
2628: EMPTY
2629: LIST
2630: LIST
2631: LIST
2632: PUSH
2633: EMPTY
2634: LIST
2635: PPUSH
2636: CALL_OW 69
2640: AND
2641: IFFALSE 2727
2643: GO 2645
2645: DISABLE
// begin enable ;
2646: ENABLE
// SetRestrict ( b_depot , 1 , state_disabled ) ;
2647: LD_INT 0
2649: PPUSH
2650: LD_INT 1
2652: PPUSH
2653: LD_INT 0
2655: PPUSH
2656: CALL_OW 324
// Delta := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_not , [ f_constructed ] ] , [ f_btype , b_depot ] ] ] ) [ 1 ] ;
2660: LD_ADDR_EXP 6
2664: PUSH
2665: LD_INT 22
2667: PUSH
2668: LD_INT 1
2670: PUSH
2671: EMPTY
2672: LIST
2673: LIST
2674: PUSH
2675: LD_INT 3
2677: PUSH
2678: LD_INT 57
2680: PUSH
2681: EMPTY
2682: LIST
2683: PUSH
2684: EMPTY
2685: LIST
2686: LIST
2687: PUSH
2688: LD_INT 30
2690: PUSH
2691: LD_INT 0
2693: PUSH
2694: EMPTY
2695: LIST
2696: LIST
2697: PUSH
2698: EMPTY
2699: LIST
2700: LIST
2701: LIST
2702: PUSH
2703: EMPTY
2704: LIST
2705: PPUSH
2706: CALL_OW 69
2710: PUSH
2711: LD_INT 1
2713: ARRAY
2714: ST_TO_ADDR
// SetBName ( Delta , Delta ) ;
2715: LD_EXP 6
2719: PPUSH
2720: LD_STRING Delta
2722: PPUSH
2723: CALL_OW 500
// end ;
2727: END
// every 0 0$2 trigger GetTech ( tech_ApeLang , 1 ) = state_researched and IsOk ( Gladstone ) do
2728: LD_INT 1
2730: PPUSH
2731: LD_INT 1
2733: PPUSH
2734: CALL_OW 321
2738: PUSH
2739: LD_INT 2
2741: EQUAL
2742: PUSH
2743: LD_EXP 17
2747: PPUSH
2748: CALL_OW 302
2752: AND
2753: IFFALSE 2814
2755: GO 2757
2757: DISABLE
// begin DialogueOn ;
2758: CALL_OW 6
// Say ( Gladstone , D3-Glad-1 ) ;
2762: LD_EXP 17
2766: PPUSH
2767: LD_STRING D3-Glad-1
2769: PPUSH
2770: CALL_OW 88
// Say ( JMM , D3-JMM-1 ) ;
2774: LD_EXP 16
2778: PPUSH
2779: LD_STRING D3-JMM-1
2781: PPUSH
2782: CALL_OW 88
// Say ( Gladstone , D3-Glad-2 ) ;
2786: LD_EXP 17
2790: PPUSH
2791: LD_STRING D3-Glad-2
2793: PPUSH
2794: CALL_OW 88
// Say ( JMM , D3-JMM-2 ) ;
2798: LD_EXP 16
2802: PPUSH
2803: LD_STRING D3-JMM-2
2805: PPUSH
2806: CALL_OW 88
// DialogueOff ;
2810: CALL_OW 7
// end ;
2814: END
// every 0 0$1 trigger GetTech ( tech_ApePsych , 1 ) = state_researched and ( IsOk ( Frank ) or ( IsOk ( Denis ) and GetSide ( Denis ) = 1 ) or UnitFilter ( others , [ f_sex , sex_male ] ) ) do var i , sol , ape , b ;
2815: LD_INT 2
2817: PPUSH
2818: LD_INT 1
2820: PPUSH
2821: CALL_OW 321
2825: PUSH
2826: LD_INT 2
2828: EQUAL
2829: PUSH
2830: LD_EXP 23
2834: PPUSH
2835: CALL_OW 302
2839: PUSH
2840: LD_EXP 19
2844: PPUSH
2845: CALL_OW 302
2849: PUSH
2850: LD_EXP 19
2854: PPUSH
2855: CALL_OW 255
2859: PUSH
2860: LD_INT 1
2862: EQUAL
2863: AND
2864: OR
2865: PUSH
2866: LD_EXP 27
2870: PPUSH
2871: LD_INT 26
2873: PUSH
2874: LD_INT 1
2876: PUSH
2877: EMPTY
2878: LIST
2879: LIST
2880: PPUSH
2881: CALL_OW 72
2885: OR
2886: AND
2887: IFFALSE 3428
2889: GO 2891
2891: DISABLE
2892: LD_INT 0
2894: PPUSH
2895: PPUSH
2896: PPUSH
2897: PPUSH
// begin InGameOn ;
2898: CALL_OW 8
// DialogueOn ;
2902: CALL_OW 6
// if Frank then
2906: LD_EXP 23
2910: IFFALSE 2924
// Say ( Frank , D8a-Frank-1 ) ;
2912: LD_EXP 23
2916: PPUSH
2917: LD_STRING D8a-Frank-1
2919: PPUSH
2920: CALL_OW 88
// sol := SayX ( UnitFilter ( others , [ f_sex , sex_male ] ) , D8a-Sol1-1 ) ;
2924: LD_ADDR_VAR 0 2
2928: PUSH
2929: LD_EXP 27
2933: PPUSH
2934: LD_INT 26
2936: PUSH
2937: LD_INT 1
2939: PUSH
2940: EMPTY
2941: LIST
2942: LIST
2943: PPUSH
2944: CALL_OW 72
2948: PPUSH
2949: LD_STRING D8a-Sol1-1
2951: PPUSH
2952: CALL 710 0 2
2956: ST_TO_ADDR
// if Denis and GetSide ( Denis ) = 1 then
2957: LD_EXP 19
2961: PUSH
2962: LD_EXP 19
2966: PPUSH
2967: CALL_OW 255
2971: PUSH
2972: LD_INT 1
2974: EQUAL
2975: AND
2976: IFFALSE 2990
// Say ( Denis , D8a-Den-1 ) ;
2978: LD_EXP 19
2982: PPUSH
2983: LD_STRING D8a-Den-1
2985: PPUSH
2986: CALL_OW 88
// if sol or Denis or Frank then
2990: LD_VAR 0 2
2994: PUSH
2995: LD_EXP 19
2999: OR
3000: PUSH
3001: LD_EXP 23
3005: OR
3006: IFFALSE 3067
// begin SayX ( UnitFilter ( others , [ [ f_class , 4 ] , [ f_sex , sex_male ] ] ) diff sol , D8a-Sci1-1 ) ;
3008: LD_EXP 27
3012: PPUSH
3013: LD_INT 25
3015: PUSH
3016: LD_INT 4
3018: PUSH
3019: EMPTY
3020: LIST
3021: LIST
3022: PUSH
3023: LD_INT 26
3025: PUSH
3026: LD_INT 1
3028: PUSH
3029: EMPTY
3030: LIST
3031: LIST
3032: PUSH
3033: EMPTY
3034: LIST
3035: LIST
3036: PPUSH
3037: CALL_OW 72
3041: PUSH
3042: LD_VAR 0 2
3046: DIFF
3047: PPUSH
3048: LD_STRING D8a-Sci1-1
3050: PPUSH
3051: CALL 710 0 2
// Say ( JMM , D8a-JMM-1 ) ;
3055: LD_EXP 16
3059: PPUSH
3060: LD_STRING D8a-JMM-1
3062: PPUSH
3063: CALL_OW 88
// end ; ape := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_apeman ] , [ f_inside ] ] ) ;
3067: LD_ADDR_VAR 0 3
3071: PUSH
3072: LD_INT 22
3074: PUSH
3075: LD_INT 1
3077: PUSH
3078: EMPTY
3079: LIST
3080: LIST
3081: PUSH
3082: LD_INT 25
3084: PUSH
3085: LD_INT 12
3087: PUSH
3088: EMPTY
3089: LIST
3090: LIST
3091: PUSH
3092: LD_INT 54
3094: PUSH
3095: EMPTY
3096: LIST
3097: PUSH
3098: EMPTY
3099: LIST
3100: LIST
3101: LIST
3102: PPUSH
3103: CALL_OW 69
3107: ST_TO_ADDR
// b := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) [ 1 ] ;
3108: LD_ADDR_VAR 0 4
3112: PUSH
3113: LD_INT 22
3115: PUSH
3116: LD_INT 1
3118: PUSH
3119: EMPTY
3120: LIST
3121: LIST
3122: PUSH
3123: LD_INT 2
3125: PUSH
3126: LD_INT 30
3128: PUSH
3129: LD_INT 6
3131: PUSH
3132: EMPTY
3133: LIST
3134: LIST
3135: PUSH
3136: LD_INT 30
3138: PUSH
3139: LD_INT 7
3141: PUSH
3142: EMPTY
3143: LIST
3144: LIST
3145: PUSH
3146: LD_INT 30
3148: PUSH
3149: LD_INT 8
3151: PUSH
3152: EMPTY
3153: LIST
3154: LIST
3155: PUSH
3156: EMPTY
3157: LIST
3158: LIST
3159: LIST
3160: LIST
3161: PUSH
3162: EMPTY
3163: LIST
3164: LIST
3165: PPUSH
3166: CALL_OW 69
3170: PUSH
3171: LD_INT 1
3173: ARRAY
3174: ST_TO_ADDR
// for i in ape do
3175: LD_ADDR_VAR 0 1
3179: PUSH
3180: LD_VAR 0 3
3184: PUSH
3185: FOR_IN
3186: IFFALSE 3219
// if i in UnitsInside ( b ) then
3188: LD_VAR 0 1
3192: PUSH
3193: LD_VAR 0 4
3197: PPUSH
3198: CALL_OW 313
3202: IN
3203: IFFALSE 3217
// begin ape := i ;
3205: LD_ADDR_VAR 0 3
3209: PUSH
3210: LD_VAR 0 1
3214: ST_TO_ADDR
// break ;
3215: GO 3219
// end ;
3217: GO 3185
3219: POP
3220: POP
// if not ape then
3221: LD_VAR 0 3
3225: NOT
3226: IFFALSE 3238
// begin DialogueOff ;
3228: CALL_OW 7
// InGameOff ;
3232: CALL_OW 9
// exit ;
3236: GO 3428
// end ; RemoveUnit ( ape ) ;
3238: LD_VAR 0 3
3242: PPUSH
3243: CALL_OW 64
// PrepareApeman ( 0 ) ;
3247: LD_INT 0
3249: PPUSH
3250: CALL 62434 0 1
// uc_side := 1 ;
3254: LD_ADDR_OWVAR 20
3258: PUSH
3259: LD_INT 1
3261: ST_TO_ADDR
// hc_name := Mike  ;
3262: LD_ADDR_OWVAR 26
3266: PUSH
3267: LD_STRING Mike 
3269: ST_TO_ADDR
// hc_gallery := us ;
3270: LD_ADDR_OWVAR 33
3274: PUSH
3275: LD_STRING us
3277: ST_TO_ADDR
// hc_face_number := 30 ;
3278: LD_ADDR_OWVAR 34
3282: PUSH
3283: LD_INT 30
3285: ST_TO_ADDR
// hc_attr := [ GetAttr ( ape , attr_stamina ) , GetAttr ( ape , attr_speed ) ] ;
3286: LD_ADDR_OWVAR 29
3290: PUSH
3291: LD_VAR 0 3
3295: PPUSH
3296: LD_INT 1
3298: PPUSH
3299: CALL_OW 260
3303: PUSH
3304: LD_VAR 0 3
3308: PPUSH
3309: LD_INT 2
3311: PPUSH
3312: CALL_OW 260
3316: PUSH
3317: EMPTY
3318: LIST
3319: LIST
3320: ST_TO_ADDR
// hc_skills := [ GetSkill ( ape , 1 ) , GetSkill ( ape , 2 ) , GetSkill ( ape , 3 ) , GetSkill ( ape , 4 ) ] ;
3321: LD_ADDR_OWVAR 31
3325: PUSH
3326: LD_VAR 0 3
3330: PPUSH
3331: LD_INT 1
3333: PPUSH
3334: CALL_OW 259
3338: PUSH
3339: LD_VAR 0 3
3343: PPUSH
3344: LD_INT 2
3346: PPUSH
3347: CALL_OW 259
3351: PUSH
3352: LD_VAR 0 3
3356: PPUSH
3357: LD_INT 3
3359: PPUSH
3360: CALL_OW 259
3364: PUSH
3365: LD_VAR 0 3
3369: PPUSH
3370: LD_INT 4
3372: PPUSH
3373: CALL_OW 259
3377: PUSH
3378: EMPTY
3379: LIST
3380: LIST
3381: LIST
3382: LIST
3383: ST_TO_ADDR
// hc_sex := sex_male ;
3384: LD_ADDR_OWVAR 27
3388: PUSH
3389: LD_INT 1
3391: ST_TO_ADDR
// Mike := CreateHuman ;
3392: LD_ADDR_EXP 26
3396: PUSH
3397: CALL_OW 44
3401: ST_TO_ADDR
// PlaceHumanInUnit ( Mike , b ) ;
3402: LD_EXP 26
3406: PPUSH
3407: LD_VAR 0 4
3411: PPUSH
3412: CALL_OW 52
// InitHc_All ( ) ;
3416: CALL_OW 584
// DialogueOff ;
3420: CALL_OW 7
// InGameOff ;
3424: CALL_OW 9
// end ;
3428: PPOPN 4
3430: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_apeman_engineer ] ] ) do
3431: LD_INT 22
3433: PUSH
3434: LD_INT 1
3436: PUSH
3437: EMPTY
3438: LIST
3439: LIST
3440: PUSH
3441: LD_INT 25
3443: PUSH
3444: LD_INT 16
3446: PUSH
3447: EMPTY
3448: LIST
3449: LIST
3450: PUSH
3451: EMPTY
3452: LIST
3453: LIST
3454: PPUSH
3455: CALL_OW 69
3459: IFFALSE 3518
3461: GO 3463
3463: DISABLE
// begin ChangeMissionObjectives ( M1a ) ;
3464: LD_STRING M1a
3466: PPUSH
3467: CALL_OW 337
// case Query ( Q2 ) of 1 :
3471: LD_STRING Q2
3473: PPUSH
3474: CALL_OW 97
3478: PUSH
3479: LD_INT 1
3481: DOUBLE
3482: EQUAL
3483: IFTRUE 3487
3485: GO 3498
3487: POP
// end_mission := true ; 2 :
3488: LD_ADDR_EXP 14
3492: PUSH
3493: LD_INT 1
3495: ST_TO_ADDR
3496: GO 3518
3498: LD_INT 2
3500: DOUBLE
3501: EQUAL
3502: IFTRUE 3506
3504: GO 3517
3506: POP
// end_the_mission_allowed := true ; end ;
3507: LD_ADDR_OWVAR 57
3511: PUSH
3512: LD_INT 1
3514: ST_TO_ADDR
3515: GO 3518
3517: POP
// end ;
3518: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) and Delta do
3519: LD_INT 22
3521: PUSH
3522: LD_INT 1
3524: PUSH
3525: EMPTY
3526: LIST
3527: LIST
3528: PUSH
3529: LD_INT 2
3531: PUSH
3532: LD_INT 30
3534: PUSH
3535: LD_INT 6
3537: PUSH
3538: EMPTY
3539: LIST
3540: LIST
3541: PUSH
3542: LD_INT 30
3544: PUSH
3545: LD_INT 7
3547: PUSH
3548: EMPTY
3549: LIST
3550: LIST
3551: PUSH
3552: EMPTY
3553: LIST
3554: LIST
3555: LIST
3556: PUSH
3557: EMPTY
3558: LIST
3559: LIST
3560: PPUSH
3561: CALL_OW 69
3565: PUSH
3566: LD_INT 22
3568: PUSH
3569: LD_INT 1
3571: PUSH
3572: EMPTY
3573: LIST
3574: LIST
3575: PUSH
3576: LD_INT 2
3578: PUSH
3579: LD_INT 30
3581: PUSH
3582: LD_INT 2
3584: PUSH
3585: EMPTY
3586: LIST
3587: LIST
3588: PUSH
3589: LD_INT 30
3591: PUSH
3592: LD_INT 3
3594: PUSH
3595: EMPTY
3596: LIST
3597: LIST
3598: PUSH
3599: EMPTY
3600: LIST
3601: LIST
3602: LIST
3603: PUSH
3604: EMPTY
3605: LIST
3606: LIST
3607: PPUSH
3608: CALL_OW 69
3612: AND
3613: PUSH
3614: LD_EXP 6
3618: AND
3619: IFFALSE 4134
3621: GO 3623
3623: DISABLE
// begin Wait ( rand ( 0 0$30 , 0 0$50 ) ) ;
3624: LD_INT 1050
3626: PPUSH
3627: LD_INT 1750
3629: PPUSH
3630: CALL_OW 12
3634: PPUSH
3635: CALL_OW 67
// PlaceUnitArea ( Denis , [ denisArea1 , denisArea2 , denisArea3 , denisArea4 ] [ Difficulty ] , false ) ;
3639: LD_EXP 19
3643: PPUSH
3644: LD_INT 6
3646: PUSH
3647: LD_INT 9
3649: PUSH
3650: LD_INT 10
3652: PUSH
3653: LD_INT 16
3655: PUSH
3656: EMPTY
3657: LIST
3658: LIST
3659: LIST
3660: LIST
3661: PUSH
3662: LD_OWVAR 67
3666: ARRAY
3667: PPUSH
3668: LD_INT 0
3670: PPUSH
3671: CALL_OW 49
// ComHold ( Denis ) ;
3675: LD_EXP 19
3679: PPUSH
3680: CALL_OW 140
// InGameOn ;
3684: CALL_OW 8
// DialogueOn ;
3688: CALL_OW 6
// if Delta then
3692: LD_EXP 6
3696: IFFALSE 3709
// CenterNowOnUnits ( Delta ) else
3698: LD_EXP 6
3702: PPUSH
3703: CALL_OW 87
3707: GO 3718
// CenterNowOnUnits ( JMM ) ;
3709: LD_EXP 16
3713: PPUSH
3714: CALL_OW 87
// SayRadioNoFaceNoName ( Denis , DD-Den-1 ) ;
3718: LD_EXP 19
3722: PPUSH
3723: LD_STRING DD-Den-1
3725: PPUSH
3726: CALL 70072 0 2
// Say ( JMM , DD-JMM-1 ) ;
3730: LD_EXP 16
3734: PPUSH
3735: LD_STRING DD-JMM-1
3737: PPUSH
3738: CALL_OW 88
// SayRadioNoFaceNoName ( Denis , DD-Den-2 ) ;
3742: LD_EXP 19
3746: PPUSH
3747: LD_STRING DD-Den-2
3749: PPUSH
3750: CALL 70072 0 2
// Wait ( 3 ) ;
3754: LD_INT 3
3756: PPUSH
3757: CALL_OW 67
// DialogueOff ;
3761: CALL_OW 7
// InGameOff ;
3765: CALL_OW 9
// if Difficulty = 1 then
3769: LD_OWVAR 67
3773: PUSH
3774: LD_INT 1
3776: EQUAL
3777: IFFALSE 3853
// begin PlaceSeeing ( GetX ( Denis ) , GetY ( Denis ) , 1 , - 12 ) ;
3779: LD_EXP 19
3783: PPUSH
3784: CALL_OW 250
3788: PPUSH
3789: LD_EXP 19
3793: PPUSH
3794: CALL_OW 251
3798: PPUSH
3799: LD_INT 1
3801: PPUSH
3802: LD_INT 12
3804: NEG
3805: PPUSH
3806: CALL_OW 330
// CenterNowOnUnits ( Denis ) ;
3810: LD_EXP 19
3814: PPUSH
3815: CALL_OW 87
// wait ( 0 0$5 ) ;
3819: LD_INT 175
3821: PPUSH
3822: CALL_OW 67
// RemoveSeeing ( GetX ( Denis ) , GetY ( Denis ) , 1 ) ;
3826: LD_EXP 19
3830: PPUSH
3831: CALL_OW 250
3835: PPUSH
3836: LD_EXP 19
3840: PPUSH
3841: CALL_OW 251
3845: PPUSH
3846: LD_INT 1
3848: PPUSH
3849: CALL_OW 331
// end ; repeat wait ( 0 0$01 ) ;
3853: LD_INT 35
3855: PPUSH
3856: CALL_OW 67
// until See ( 1 , Denis ) or IsDead ( Denis ) ;
3860: LD_INT 1
3862: PPUSH
3863: LD_EXP 19
3867: PPUSH
3868: CALL_OW 292
3872: PUSH
3873: LD_EXP 19
3877: PPUSH
3878: CALL_OW 301
3882: OR
3883: IFFALSE 3853
// if IsDead ( Denis ) then
3885: LD_EXP 19
3889: PPUSH
3890: CALL_OW 301
3894: IFFALSE 3898
// exit ;
3896: GO 4134
// SetSide ( Denis , 1 ) ;
3898: LD_EXP 19
3902: PPUSH
3903: LD_INT 1
3905: PPUSH
3906: CALL_OW 235
// Say ( Denis , DD-Den-2a ) ;
3910: LD_EXP 19
3914: PPUSH
3915: LD_STRING DD-Den-2a
3917: PPUSH
3918: CALL_OW 88
// repeat wait ( 0 0$01 ) ;
3922: LD_INT 35
3924: PPUSH
3925: CALL_OW 67
// until GetBType ( IsInUnit ( Denis ) ) in [ b_lab , b_lab_half , b_lab_full ] or IsDead ( Denis ) ;
3929: LD_EXP 19
3933: PPUSH
3934: CALL_OW 310
3938: PPUSH
3939: CALL_OW 266
3943: PUSH
3944: LD_INT 6
3946: PUSH
3947: LD_INT 7
3949: PUSH
3950: LD_INT 8
3952: PUSH
3953: EMPTY
3954: LIST
3955: LIST
3956: LIST
3957: IN
3958: PUSH
3959: LD_EXP 19
3963: PPUSH
3964: CALL_OW 301
3968: OR
3969: IFFALSE 3922
// if IsDead ( Denis ) then
3971: LD_EXP 19
3975: PPUSH
3976: CALL_OW 301
3980: IFFALSE 3984
// exit ;
3982: GO 4134
// Say ( Denis , DD-Den-2b ) ;
3984: LD_EXP 19
3988: PPUSH
3989: LD_STRING DD-Den-2b
3991: PPUSH
3992: CALL_OW 88
// ComChangeProfession ( Denis , 4 ) ;
3996: LD_EXP 19
4000: PPUSH
4001: LD_INT 4
4003: PPUSH
4004: CALL_OW 123
// Wait ( 0 0$02 ) ;
4008: LD_INT 70
4010: PPUSH
4011: CALL_OW 67
// DialogueOn ;
4015: CALL_OW 6
// CenterNowOnUnits ( Denis ) ;
4019: LD_EXP 19
4023: PPUSH
4024: CALL_OW 87
// Say ( JMM , D4-JMM-1 ) ;
4028: LD_EXP 16
4032: PPUSH
4033: LD_STRING D4-JMM-1
4035: PPUSH
4036: CALL_OW 88
// Say ( Denis , D4-Den-1 ) ;
4040: LD_EXP 19
4044: PPUSH
4045: LD_STRING D4-Den-1
4047: PPUSH
4048: CALL_OW 88
// Say ( JMM , D4-JMM-2 ) ;
4052: LD_EXP 16
4056: PPUSH
4057: LD_STRING D4-JMM-2
4059: PPUSH
4060: CALL_OW 88
// Say ( Denis , D4-Den-2 ) ;
4064: LD_EXP 19
4068: PPUSH
4069: LD_STRING D4-Den-2
4071: PPUSH
4072: CALL_OW 88
// DialogueOff ;
4076: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
4080: LD_STRING M2
4082: PPUSH
4083: CALL_OW 337
// radar_allowed := true ;
4087: LD_ADDR_EXP 7
4091: PUSH
4092: LD_INT 1
4094: ST_TO_ADDR
// SetTech ( tech_radar , 1 , state_enabled ) ;
4095: LD_INT 6
4097: PPUSH
4098: LD_INT 1
4100: PPUSH
4101: LD_INT 1
4103: PPUSH
4104: CALL_OW 322
// SetRestrict ( b_lab_opto , 1 , state_enabled ) ;
4108: LD_INT 15
4110: PPUSH
4111: LD_INT 1
4113: PPUSH
4114: LD_INT 1
4116: PPUSH
4117: CALL_OW 324
// SetRestrict ( b_ext_radar , 1 , state_enabled ) ;
4121: LD_INT 20
4123: PPUSH
4124: LD_INT 1
4126: PPUSH
4127: LD_INT 1
4129: PPUSH
4130: CALL_OW 324
// end ;
4134: END
// every 0 0$1 trigger arab_spotted do var sol , sol2 ;
4135: LD_EXP 13
4139: IFFALSE 4762
4141: GO 4143
4143: DISABLE
4144: LD_INT 0
4146: PPUSH
4147: PPUSH
// begin sol := SayX ( UnitFilter ( others , [ f_sex , sex_male ] ) , D5-Sol1-1 ) ;
4148: LD_ADDR_VAR 0 1
4152: PUSH
4153: LD_EXP 27
4157: PPUSH
4158: LD_INT 26
4160: PUSH
4161: LD_INT 1
4163: PUSH
4164: EMPTY
4165: LIST
4166: LIST
4167: PPUSH
4168: CALL_OW 72
4172: PPUSH
4173: LD_STRING D5-Sol1-1
4175: PPUSH
4176: CALL 710 0 2
4180: ST_TO_ADDR
// if not sol then
4181: LD_VAR 0 1
4185: NOT
4186: IFFALSE 4190
// exit ;
4188: GO 4762
// repeat wait ( 0 0$01 ) ;
4190: LD_INT 35
4192: PPUSH
4193: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) = 0 ;
4197: LD_INT 22
4199: PUSH
4200: LD_INT 2
4202: PUSH
4203: EMPTY
4204: LIST
4205: LIST
4206: PUSH
4207: LD_INT 21
4209: PUSH
4210: LD_INT 1
4212: PUSH
4213: EMPTY
4214: LIST
4215: LIST
4216: PUSH
4217: EMPTY
4218: LIST
4219: LIST
4220: PPUSH
4221: CALL_OW 69
4225: PUSH
4226: LD_INT 0
4228: EQUAL
4229: IFFALSE 4190
// if IsOk ( sol ) then
4231: LD_VAR 0 1
4235: PPUSH
4236: CALL_OW 302
4240: IFFALSE 4260
// begin sol2 := others diff sol ;
4242: LD_ADDR_VAR 0 2
4246: PUSH
4247: LD_EXP 27
4251: PUSH
4252: LD_VAR 0 1
4256: DIFF
4257: ST_TO_ADDR
// end else
4258: GO 4262
// exit ;
4260: GO 4762
// if not Lisa and not sol2 then
4262: LD_EXP 22
4266: NOT
4267: PUSH
4268: LD_VAR 0 2
4272: NOT
4273: AND
4274: IFFALSE 4278
// exit ;
4276: GO 4762
// DialogueOn ;
4278: CALL_OW 6
// if Lisa then
4282: LD_EXP 22
4286: IFFALSE 4302
// Say ( Lisa , D5a-Lisa-1 ) else
4288: LD_EXP 22
4292: PPUSH
4293: LD_STRING D5a-Lisa-1
4295: PPUSH
4296: CALL_OW 88
4300: GO 4377
// if sol2 then
4302: LD_VAR 0 2
4306: IFFALSE 4377
// case GetSex ( sol2 [ 1 ] ) of sex_male :
4308: LD_VAR 0 2
4312: PUSH
4313: LD_INT 1
4315: ARRAY
4316: PPUSH
4317: CALL_OW 258
4321: PUSH
4322: LD_INT 1
4324: DOUBLE
4325: EQUAL
4326: IFTRUE 4330
4328: GO 4349
4330: POP
// Say ( sol2 [ 1 ] , D5-Sol2-1 ) ; sex_female :
4331: LD_VAR 0 2
4335: PUSH
4336: LD_INT 1
4338: ARRAY
4339: PPUSH
4340: LD_STRING D5-Sol2-1
4342: PPUSH
4343: CALL_OW 88
4347: GO 4377
4349: LD_INT 2
4351: DOUBLE
4352: EQUAL
4353: IFTRUE 4357
4355: GO 4376
4357: POP
// Say ( sol2 [ 1 ] , D5-FSol2-1 ) ; end ;
4358: LD_VAR 0 2
4362: PUSH
4363: LD_INT 1
4365: ARRAY
4366: PPUSH
4367: LD_STRING D5-FSol2-1
4369: PPUSH
4370: CALL_OW 88
4374: GO 4377
4376: POP
// Say ( sol , D5-Sol1-2 ) ;
4377: LD_VAR 0 1
4381: PPUSH
4382: LD_STRING D5-Sol1-2
4384: PPUSH
4385: CALL_OW 88
// if Lisa then
4389: LD_EXP 22
4393: IFFALSE 4409
// Say ( Lisa , D5a-Lisa-2 ) else
4395: LD_EXP 22
4399: PPUSH
4400: LD_STRING D5a-Lisa-2
4402: PPUSH
4403: CALL_OW 88
4407: GO 4484
// if sol2 then
4409: LD_VAR 0 2
4413: IFFALSE 4484
// case GetSex ( sol2 [ 1 ] ) of sex_male :
4415: LD_VAR 0 2
4419: PUSH
4420: LD_INT 1
4422: ARRAY
4423: PPUSH
4424: CALL_OW 258
4428: PUSH
4429: LD_INT 1
4431: DOUBLE
4432: EQUAL
4433: IFTRUE 4437
4435: GO 4456
4437: POP
// Say ( sol2 [ 1 ] , D5-Sol2-2 ) ; sex_female :
4438: LD_VAR 0 2
4442: PUSH
4443: LD_INT 1
4445: ARRAY
4446: PPUSH
4447: LD_STRING D5-Sol2-2
4449: PPUSH
4450: CALL_OW 88
4454: GO 4484
4456: LD_INT 2
4458: DOUBLE
4459: EQUAL
4460: IFTRUE 4464
4462: GO 4483
4464: POP
// Say ( sol2 [ 1 ] , D5-FSol2-2 ) ; end ;
4465: LD_VAR 0 2
4469: PUSH
4470: LD_INT 1
4472: ARRAY
4473: PPUSH
4474: LD_STRING D5-FSol2-2
4476: PPUSH
4477: CALL_OW 88
4481: GO 4484
4483: POP
// Say ( sol , D5a-Sol1-3 ) ;
4484: LD_VAR 0 1
4488: PPUSH
4489: LD_STRING D5a-Sol1-3
4491: PPUSH
4492: CALL_OW 88
// if Lisa then
4496: LD_EXP 22
4500: IFFALSE 4514
// Say ( Lisa , D5a-Lisa-3 ) ;
4502: LD_EXP 22
4506: PPUSH
4507: LD_STRING D5a-Lisa-3
4509: PPUSH
4510: CALL_OW 88
// if not sol2 then
4514: LD_VAR 0 2
4518: NOT
4519: IFFALSE 4527
// begin DialogueOff ;
4521: CALL_OW 7
// exit ;
4525: GO 4762
// end ; case GetSex ( sol2 [ 1 ] ) of sex_male :
4527: LD_VAR 0 2
4531: PUSH
4532: LD_INT 1
4534: ARRAY
4535: PPUSH
4536: CALL_OW 258
4540: PUSH
4541: LD_INT 1
4543: DOUBLE
4544: EQUAL
4545: IFTRUE 4549
4547: GO 4568
4549: POP
// Say ( sol2 [ 1 ] , D5-Sol2-3 ) ; sex_female :
4550: LD_VAR 0 2
4554: PUSH
4555: LD_INT 1
4557: ARRAY
4558: PPUSH
4559: LD_STRING D5-Sol2-3
4561: PPUSH
4562: CALL_OW 88
4566: GO 4596
4568: LD_INT 2
4570: DOUBLE
4571: EQUAL
4572: IFTRUE 4576
4574: GO 4595
4576: POP
// Say ( sol2 [ 1 ] , D5-FSol2-3 ) ; end ;
4577: LD_VAR 0 2
4581: PUSH
4582: LD_INT 1
4584: ARRAY
4585: PPUSH
4586: LD_STRING D5-FSol2-3
4588: PPUSH
4589: CALL_OW 88
4593: GO 4596
4595: POP
// Say ( sol , D5-Sol1-4 ) ;
4596: LD_VAR 0 1
4600: PPUSH
4601: LD_STRING D5-Sol1-4
4603: PPUSH
4604: CALL_OW 88
// case GetSex ( sol2 [ 1 ] ) of sex_male :
4608: LD_VAR 0 2
4612: PUSH
4613: LD_INT 1
4615: ARRAY
4616: PPUSH
4617: CALL_OW 258
4621: PUSH
4622: LD_INT 1
4624: DOUBLE
4625: EQUAL
4626: IFTRUE 4630
4628: GO 4649
4630: POP
// Say ( sol2 [ 1 ] , D5-Sol2-4 ) ; sex_female :
4631: LD_VAR 0 2
4635: PUSH
4636: LD_INT 1
4638: ARRAY
4639: PPUSH
4640: LD_STRING D5-Sol2-4
4642: PPUSH
4643: CALL_OW 88
4647: GO 4677
4649: LD_INT 2
4651: DOUBLE
4652: EQUAL
4653: IFTRUE 4657
4655: GO 4676
4657: POP
// Say ( sol2 [ 1 ] , D5-FSol2-4 ) ; end ;
4658: LD_VAR 0 2
4662: PUSH
4663: LD_INT 1
4665: ARRAY
4666: PPUSH
4667: LD_STRING D5-FSol2-4
4669: PPUSH
4670: CALL_OW 88
4674: GO 4677
4676: POP
// Say ( sol , D5-Sol1-5 ) ;
4677: LD_VAR 0 1
4681: PPUSH
4682: LD_STRING D5-Sol1-5
4684: PPUSH
4685: CALL_OW 88
// case GetSex ( sol2 [ 1 ] ) of sex_male :
4689: LD_VAR 0 2
4693: PUSH
4694: LD_INT 1
4696: ARRAY
4697: PPUSH
4698: CALL_OW 258
4702: PUSH
4703: LD_INT 1
4705: DOUBLE
4706: EQUAL
4707: IFTRUE 4711
4709: GO 4730
4711: POP
// Say ( sol2 [ 1 ] , D5-Sol2-5 ) ; sex_female :
4712: LD_VAR 0 2
4716: PUSH
4717: LD_INT 1
4719: ARRAY
4720: PPUSH
4721: LD_STRING D5-Sol2-5
4723: PPUSH
4724: CALL_OW 88
4728: GO 4758
4730: LD_INT 2
4732: DOUBLE
4733: EQUAL
4734: IFTRUE 4738
4736: GO 4757
4738: POP
// Say ( sol2 [ 1 ] , D5-FSol2-5 ) ; end ;
4739: LD_VAR 0 2
4743: PUSH
4744: LD_INT 1
4746: ARRAY
4747: PPUSH
4748: LD_STRING D5-FSol2-5
4750: PPUSH
4751: CALL_OW 88
4755: GO 4758
4757: POP
// DialogueOff ;
4758: CALL_OW 7
// end ;
4762: PPOPN 2
4764: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_apeman_engineer ] ] ) >= 5 do
4765: LD_INT 22
4767: PUSH
4768: LD_INT 1
4770: PUSH
4771: EMPTY
4772: LIST
4773: LIST
4774: PUSH
4775: LD_INT 25
4777: PUSH
4778: LD_INT 16
4780: PUSH
4781: EMPTY
4782: LIST
4783: LIST
4784: PUSH
4785: EMPTY
4786: LIST
4787: LIST
4788: PPUSH
4789: CALL_OW 69
4793: PUSH
4794: LD_INT 5
4796: GREATEREQUAL
4797: IFFALSE 4817
4799: GO 4801
4801: DISABLE
// begin ChangeMissionObjectives ( M1b ) ;
4802: LD_STRING M1b
4804: PPUSH
4805: CALL_OW 337
// apeman_army := true ;
4809: LD_ADDR_EXP 9
4813: PUSH
4814: LD_INT 1
4816: ST_TO_ADDR
// end ;
4817: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] , [ f_constructed ] ] ) do
4818: LD_INT 22
4820: PUSH
4821: LD_INT 1
4823: PUSH
4824: EMPTY
4825: LIST
4826: LIST
4827: PUSH
4828: LD_INT 30
4830: PUSH
4831: LD_INT 3
4833: PUSH
4834: EMPTY
4835: LIST
4836: LIST
4837: PUSH
4838: LD_INT 57
4840: PUSH
4841: EMPTY
4842: LIST
4843: PUSH
4844: EMPTY
4845: LIST
4846: LIST
4847: LIST
4848: PPUSH
4849: CALL_OW 69
4853: IFFALSE 4865
4855: GO 4857
4857: DISABLE
// ChangeMissionObjectives ( M1c ) ;
4858: LD_STRING M1c
4860: PPUSH
4861: CALL_OW 337
4865: END
// every 0 0$1 trigger GetTech ( tech_radar , 1 ) = state_researched do
4866: LD_INT 6
4868: PPUSH
4869: LD_INT 1
4871: PPUSH
4872: CALL_OW 321
4876: PUSH
4877: LD_INT 2
4879: EQUAL
4880: IFFALSE 4900
4882: GO 4884
4884: DISABLE
// begin ChangeMissionObjectives ( M2a ) ;
4885: LD_STRING M2a
4887: PPUSH
4888: CALL_OW 337
// radar_researched := true ;
4892: LD_ADDR_EXP 10
4896: PUSH
4897: LD_INT 1
4899: ST_TO_ADDR
// end ;
4900: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_weapon , us_radar ] , [ f_bweapon , us_radar ] ] ] ) do
4901: LD_INT 22
4903: PUSH
4904: LD_INT 1
4906: PUSH
4907: EMPTY
4908: LIST
4909: LIST
4910: PUSH
4911: LD_INT 2
4913: PUSH
4914: LD_INT 34
4916: PUSH
4917: LD_INT 11
4919: PUSH
4920: EMPTY
4921: LIST
4922: LIST
4923: PUSH
4924: LD_INT 35
4926: PUSH
4927: LD_INT 11
4929: PUSH
4930: EMPTY
4931: LIST
4932: LIST
4933: PUSH
4934: EMPTY
4935: LIST
4936: LIST
4937: LIST
4938: PUSH
4939: EMPTY
4940: LIST
4941: LIST
4942: PPUSH
4943: CALL_OW 69
4947: IFFALSE 4967
4949: GO 4951
4951: DISABLE
// begin ChangeMissionObjectives ( M2b ) ;
4952: LD_STRING M2b
4954: PPUSH
4955: CALL_OW 337
// radar_builded := true ;
4959: LD_ADDR_EXP 11
4963: PUSH
4964: LD_INT 1
4966: ST_TO_ADDR
// end ;
4967: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) = 0 and not first_apeman_tamed do
4968: LD_INT 22
4970: PUSH
4971: LD_INT 0
4973: PUSH
4974: EMPTY
4975: LIST
4976: LIST
4977: PUSH
4978: LD_INT 25
4980: PUSH
4981: LD_INT 12
4983: PUSH
4984: EMPTY
4985: LIST
4986: LIST
4987: PUSH
4988: EMPTY
4989: LIST
4990: LIST
4991: PPUSH
4992: CALL_OW 69
4996: PUSH
4997: LD_INT 0
4999: EQUAL
5000: PUSH
5001: LD_EXP 8
5005: NOT
5006: AND
5007: IFFALSE 5019
5009: GO 5011
5011: DISABLE
// YouLost ( Apeman ) ;
5012: LD_STRING Apeman
5014: PPUSH
5015: CALL_OW 104
5019: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_apeman_engineer ] ] ) >= 7 do var i , filter ;
5020: LD_INT 22
5022: PUSH
5023: LD_INT 1
5025: PUSH
5026: EMPTY
5027: LIST
5028: LIST
5029: PUSH
5030: LD_INT 25
5032: PUSH
5033: LD_INT 16
5035: PUSH
5036: EMPTY
5037: LIST
5038: LIST
5039: PUSH
5040: EMPTY
5041: LIST
5042: LIST
5043: PPUSH
5044: CALL_OW 69
5048: PUSH
5049: LD_INT 7
5051: GREATEREQUAL
5052: IFFALSE 5150
5054: GO 5056
5056: DISABLE
5057: LD_INT 0
5059: PPUSH
5060: PPUSH
// begin filter := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 4 ] ] ) ^ JMM ;
5061: LD_ADDR_VAR 0 2
5065: PUSH
5066: LD_INT 22
5068: PUSH
5069: LD_INT 1
5071: PUSH
5072: EMPTY
5073: LIST
5074: LIST
5075: PUSH
5076: LD_INT 21
5078: PUSH
5079: LD_INT 1
5081: PUSH
5082: EMPTY
5083: LIST
5084: LIST
5085: PUSH
5086: LD_INT 25
5088: PUSH
5089: LD_INT 4
5091: PUSH
5092: EMPTY
5093: LIST
5094: LIST
5095: PUSH
5096: EMPTY
5097: LIST
5098: LIST
5099: LIST
5100: PPUSH
5101: CALL_OW 69
5105: PUSH
5106: LD_EXP 16
5110: ADD
5111: ST_TO_ADDR
// if filter then
5112: LD_VAR 0 2
5116: IFFALSE 5150
// for i in filter do
5118: LD_ADDR_VAR 0 1
5122: PUSH
5123: LD_VAR 0 2
5127: PUSH
5128: FOR_IN
5129: IFFALSE 5148
// AddExperience ( i , 4 , 3500 ) ;
5131: LD_VAR 0 1
5135: PPUSH
5136: LD_INT 4
5138: PPUSH
5139: LD_INT 3500
5141: PPUSH
5142: CALL_OW 492
5146: GO 5128
5148: POP
5149: POP
// end ;
5150: PPOPN 2
5152: END
// every 0 0$1 trigger end_mission do var i , tmp , m1 , m2 , m3 ;
5153: LD_EXP 14
5157: IFFALSE 6340
5159: GO 5161
5161: DISABLE
5162: LD_INT 0
5164: PPUSH
5165: PPUSH
5166: PPUSH
5167: PPUSH
5168: PPUSH
// begin if apeKillCounter = 0 then
5169: LD_EXP 15
5173: PUSH
5174: LD_INT 0
5176: EQUAL
5177: IFFALSE 5186
// SetAchievement ( ACH_APEKILLER ) ;
5179: LD_STRING ACH_APEKILLER
5181: PPUSH
5182: CALL_OW 543
// if FilterAllUnits ( [ f_side , 2 ] ) then
5186: LD_INT 22
5188: PUSH
5189: LD_INT 2
5191: PUSH
5192: EMPTY
5193: LIST
5194: LIST
5195: PPUSH
5196: CALL_OW 69
5200: IFFALSE 5238
// for i in FilterAllUnits ( [ f_side , 2 ] ) do
5202: LD_ADDR_VAR 0 1
5206: PUSH
5207: LD_INT 22
5209: PUSH
5210: LD_INT 2
5212: PUSH
5213: EMPTY
5214: LIST
5215: LIST
5216: PPUSH
5217: CALL_OW 69
5221: PUSH
5222: FOR_IN
5223: IFFALSE 5236
// RemoveUnit ( i ) ;
5225: LD_VAR 0 1
5229: PPUSH
5230: CALL_OW 64
5234: GO 5222
5236: POP
5237: POP
// m1 := false ;
5238: LD_ADDR_VAR 0 3
5242: PUSH
5243: LD_INT 0
5245: ST_TO_ADDR
// m2 := false ;
5246: LD_ADDR_VAR 0 4
5250: PUSH
5251: LD_INT 0
5253: ST_TO_ADDR
// m3 := false ;
5254: LD_ADDR_VAR 0 5
5258: PUSH
5259: LD_INT 0
5261: ST_TO_ADDR
// if apeman_army then
5262: LD_EXP 9
5266: IFFALSE 5288
// begin AddMedal ( Tame , 1 ) ;
5268: LD_STRING Tame
5270: PPUSH
5271: LD_INT 1
5273: PPUSH
5274: CALL_OW 101
// m1 := true ;
5278: LD_ADDR_VAR 0 3
5282: PUSH
5283: LD_INT 1
5285: ST_TO_ADDR
// end else
5286: GO 5299
// AddMedal ( Tame , - 1 ) ;
5288: LD_STRING Tame
5290: PPUSH
5291: LD_INT 1
5293: NEG
5294: PPUSH
5295: CALL_OW 101
// if radar_researched then
5299: LD_EXP 10
5303: IFFALSE 5335
// begin SaveVariable ( true , radarResInDelta ) ;
5305: LD_INT 1
5307: PPUSH
5308: LD_STRING radarResInDelta
5310: PPUSH
5311: CALL_OW 39
// AddMedal ( Radar , 1 ) ;
5315: LD_STRING Radar
5317: PPUSH
5318: LD_INT 1
5320: PPUSH
5321: CALL_OW 101
// m2 := true ;
5325: LD_ADDR_VAR 0 4
5329: PUSH
5330: LD_INT 1
5332: ST_TO_ADDR
// end else
5333: GO 5365
// if radar_allowed then
5335: LD_EXP 7
5339: IFFALSE 5354
// AddMedal ( Radar , - 2 ) else
5341: LD_STRING Radar
5343: PPUSH
5344: LD_INT 2
5346: NEG
5347: PPUSH
5348: CALL_OW 101
5352: GO 5365
// AddMedal ( Radar , - 1 ) ;
5354: LD_STRING Radar
5356: PPUSH
5357: LD_INT 1
5359: NEG
5360: PPUSH
5361: CALL_OW 101
// if radar_builded then
5365: LD_EXP 11
5369: IFFALSE 5391
// begin AddMedal ( BuildRadar , 1 ) ;
5371: LD_STRING BuildRadar
5373: PPUSH
5374: LD_INT 1
5376: PPUSH
5377: CALL_OW 101
// m3 := true ;
5381: LD_ADDR_VAR 0 5
5385: PUSH
5386: LD_INT 1
5388: ST_TO_ADDR
// end else
5389: GO 5402
// AddMedal ( BuildRadar , - 1 ) ;
5391: LD_STRING BuildRadar
5393: PPUSH
5394: LD_INT 1
5396: NEG
5397: PPUSH
5398: CALL_OW 101
// if tick <= 7 7$00 then
5402: LD_OWVAR 1
5406: PUSH
5407: LD_INT 14700
5409: LESSEQUAL
5410: IFFALSE 5419
// SetAchievement ( ACH_ASPEED_5 ) ;
5412: LD_STRING ACH_ASPEED_5
5414: PPUSH
5415: CALL_OW 543
// if m1 and m2 and m3 and Difficulty >= 3 then
5419: LD_VAR 0 3
5423: PUSH
5424: LD_VAR 0 4
5428: AND
5429: PUSH
5430: LD_VAR 0 5
5434: AND
5435: PUSH
5436: LD_OWVAR 67
5440: PUSH
5441: LD_INT 3
5443: GREATEREQUAL
5444: AND
5445: IFFALSE 5457
// SetAchievementEX ( ACH_AMER , 5 ) ;
5447: LD_STRING ACH_AMER
5449: PPUSH
5450: LD_INT 5
5452: PPUSH
5453: CALL_OW 564
// GiveMedals ( MAIN ) ;
5457: LD_STRING MAIN
5459: PPUSH
5460: CALL_OW 102
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ;
5464: LD_ADDR_VAR 0 2
5468: PUSH
5469: LD_INT 22
5471: PUSH
5472: LD_INT 1
5474: PUSH
5475: EMPTY
5476: LIST
5477: LIST
5478: PUSH
5479: LD_INT 21
5481: PUSH
5482: LD_INT 1
5484: PUSH
5485: EMPTY
5486: LIST
5487: LIST
5488: PUSH
5489: LD_INT 2
5491: PUSH
5492: LD_INT 25
5494: PUSH
5495: LD_INT 1
5497: PUSH
5498: EMPTY
5499: LIST
5500: LIST
5501: PUSH
5502: LD_INT 25
5504: PUSH
5505: LD_INT 2
5507: PUSH
5508: EMPTY
5509: LIST
5510: LIST
5511: PUSH
5512: LD_INT 25
5514: PUSH
5515: LD_INT 3
5517: PUSH
5518: EMPTY
5519: LIST
5520: LIST
5521: PUSH
5522: LD_INT 25
5524: PUSH
5525: LD_INT 4
5527: PUSH
5528: EMPTY
5529: LIST
5530: LIST
5531: PUSH
5532: EMPTY
5533: LIST
5534: LIST
5535: LIST
5536: LIST
5537: LIST
5538: PUSH
5539: EMPTY
5540: LIST
5541: LIST
5542: LIST
5543: PPUSH
5544: CALL_OW 69
5548: ST_TO_ADDR
// RewardPeople ( tmp ) ;
5549: LD_VAR 0 2
5553: PPUSH
5554: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
5558: LD_EXP 16
5562: PPUSH
5563: LD_EXP 2
5567: PUSH
5568: LD_STRING JMM
5570: STR
5571: PPUSH
5572: CALL_OW 38
// if IsOk ( Gladstone ) then
5576: LD_EXP 17
5580: PPUSH
5581: CALL_OW 302
5585: IFFALSE 5612
// begin ToLua ( enableBioCharacter(BIO_TIM) ) ;
5587: LD_STRING enableBioCharacter(BIO_TIM)
5589: PPUSH
5590: CALL_OW 559
// SaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
5594: LD_EXP 17
5598: PPUSH
5599: LD_EXP 2
5603: PUSH
5604: LD_STRING Gladstone
5606: STR
5607: PPUSH
5608: CALL_OW 38
// end ; if IsOk ( Denis ) and GetSide ( Denis ) = 1 then
5612: LD_EXP 19
5616: PPUSH
5617: CALL_OW 302
5621: PUSH
5622: LD_EXP 19
5626: PPUSH
5627: CALL_OW 255
5631: PUSH
5632: LD_INT 1
5634: EQUAL
5635: AND
5636: IFFALSE 5673
// begin ToLua ( enableBioCharacter(BIO_DENIS) ) ;
5638: LD_STRING enableBioCharacter(BIO_DENIS)
5640: PPUSH
5641: CALL_OW 559
// SaveCharacters ( Denis , mission_prefix & Denis ) ;
5645: LD_EXP 19
5649: PPUSH
5650: LD_EXP 2
5654: PUSH
5655: LD_STRING Denis
5657: STR
5658: PPUSH
5659: CALL_OW 38
// SaveVariable ( true , DenisInDelta ) ;
5663: LD_INT 1
5665: PPUSH
5666: LD_STRING DenisInDelta
5668: PPUSH
5669: CALL_OW 39
// end ; if IsOk ( Lisa ) then
5673: LD_EXP 22
5677: PPUSH
5678: CALL_OW 302
5682: IFFALSE 5702
// begin SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
5684: LD_EXP 22
5688: PPUSH
5689: LD_EXP 2
5693: PUSH
5694: LD_STRING Lisa
5696: STR
5697: PPUSH
5698: CALL_OW 38
// end ; if IsOk ( Frank ) then
5702: LD_EXP 23
5706: PPUSH
5707: CALL_OW 302
5711: IFFALSE 5731
// begin SaveCharacters ( Frank , mission_prefix & Frank ) ;
5713: LD_EXP 23
5717: PPUSH
5718: LD_EXP 2
5722: PUSH
5723: LD_STRING Frank
5725: STR
5726: PPUSH
5727: CALL_OW 38
// end ; if IsOk ( Bobby ) then
5731: LD_EXP 24
5735: PPUSH
5736: CALL_OW 302
5740: IFFALSE 5760
// begin SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
5742: LD_EXP 24
5746: PPUSH
5747: LD_EXP 2
5751: PUSH
5752: LD_STRING Bobby
5754: STR
5755: PPUSH
5756: CALL_OW 38
// end ; if IsOk ( Cyrus ) then
5760: LD_EXP 25
5764: PPUSH
5765: CALL_OW 302
5769: IFFALSE 5789
// begin SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
5771: LD_EXP 25
5775: PPUSH
5776: LD_EXP 2
5780: PUSH
5781: LD_STRING Cyrus
5783: STR
5784: PPUSH
5785: CALL_OW 38
// end ; if IsOk ( Brown ) then
5789: LD_EXP 20
5793: PPUSH
5794: CALL_OW 302
5798: IFFALSE 5818
// begin SaveCharacters ( Brown , mission_prefix & Brown ) ;
5800: LD_EXP 20
5804: PPUSH
5805: LD_EXP 2
5809: PUSH
5810: LD_STRING Brown
5812: STR
5813: PPUSH
5814: CALL_OW 38
// end ; if IsOk ( Donaldson ) then
5818: LD_EXP 21
5822: PPUSH
5823: CALL_OW 302
5827: IFFALSE 5847
// begin SaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
5829: LD_EXP 21
5833: PPUSH
5834: LD_EXP 2
5838: PUSH
5839: LD_STRING Donaldson
5841: STR
5842: PPUSH
5843: CALL_OW 38
// end ; if IsOk ( Mike ) then
5847: LD_EXP 26
5851: PPUSH
5852: CALL_OW 302
5856: IFFALSE 5876
// SaveCharacters ( Mike , mission_prefix & Mike ) ;
5858: LD_EXP 26
5862: PPUSH
5863: LD_EXP 2
5867: PUSH
5868: LD_STRING Mike
5870: STR
5871: PPUSH
5872: CALL_OW 38
// if others then
5876: LD_EXP 27
5880: IFFALSE 5894
// SaveCharacters ( others , othersInDelta ) ;
5882: LD_EXP 27
5886: PPUSH
5887: LD_STRING othersInDelta
5889: PPUSH
5890: CALL_OW 38
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_apeman_engineer ] ] ) then
5894: LD_INT 22
5896: PUSH
5897: LD_INT 1
5899: PUSH
5900: EMPTY
5901: LIST
5902: LIST
5903: PUSH
5904: LD_INT 25
5906: PUSH
5907: LD_INT 16
5909: PUSH
5910: EMPTY
5911: LIST
5912: LIST
5913: PUSH
5914: EMPTY
5915: LIST
5916: LIST
5917: PPUSH
5918: CALL_OW 69
5922: IFFALSE 5966
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_apeman_engineer ] ] ) diff Mike , apeInDelta ) ;
5924: LD_INT 22
5926: PUSH
5927: LD_INT 1
5929: PUSH
5930: EMPTY
5931: LIST
5932: LIST
5933: PUSH
5934: LD_INT 25
5936: PUSH
5937: LD_INT 16
5939: PUSH
5940: EMPTY
5941: LIST
5942: LIST
5943: PUSH
5944: EMPTY
5945: LIST
5946: LIST
5947: PPUSH
5948: CALL_OW 69
5952: PUSH
5953: LD_EXP 26
5957: DIFF
5958: PPUSH
5959: LD_STRING apeInDelta
5961: PPUSH
5962: CALL_OW 38
// tmp := [ ] ;
5966: LD_ADDR_VAR 0 2
5970: PUSH
5971: EMPTY
5972: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) then
5973: LD_INT 22
5975: PUSH
5976: LD_INT 1
5978: PUSH
5979: EMPTY
5980: LIST
5981: LIST
5982: PUSH
5983: LD_INT 21
5985: PUSH
5986: LD_INT 2
5988: PUSH
5989: EMPTY
5990: LIST
5991: LIST
5992: PUSH
5993: EMPTY
5994: LIST
5995: LIST
5996: PPUSH
5997: CALL_OW 69
6001: IFFALSE 6112
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) do
6003: LD_ADDR_VAR 0 1
6007: PUSH
6008: LD_INT 22
6010: PUSH
6011: LD_INT 1
6013: PUSH
6014: EMPTY
6015: LIST
6016: LIST
6017: PUSH
6018: LD_INT 21
6020: PUSH
6021: LD_INT 2
6023: PUSH
6024: EMPTY
6025: LIST
6026: LIST
6027: PUSH
6028: EMPTY
6029: LIST
6030: LIST
6031: PPUSH
6032: CALL_OW 69
6036: PUSH
6037: FOR_IN
6038: IFFALSE 6110
// tmp := tmp ^ [ GetNation ( i ) , GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) ] ;
6040: LD_ADDR_VAR 0 2
6044: PUSH
6045: LD_VAR 0 2
6049: PUSH
6050: LD_VAR 0 1
6054: PPUSH
6055: CALL_OW 248
6059: PUSH
6060: LD_VAR 0 1
6064: PPUSH
6065: CALL_OW 265
6069: PUSH
6070: LD_VAR 0 1
6074: PPUSH
6075: CALL_OW 262
6079: PUSH
6080: LD_VAR 0 1
6084: PPUSH
6085: CALL_OW 263
6089: PUSH
6090: LD_VAR 0 1
6094: PPUSH
6095: CALL_OW 264
6099: PUSH
6100: EMPTY
6101: LIST
6102: LIST
6103: LIST
6104: LIST
6105: LIST
6106: ADD
6107: ST_TO_ADDR
6108: GO 6037
6110: POP
6111: POP
// if tmp then
6112: LD_VAR 0 2
6116: IFFALSE 6130
// SaveVariable ( tmp , vehiclesInDelta ) ;
6118: LD_VAR 0 2
6122: PPUSH
6123: LD_STRING vehiclesInDelta
6125: PPUSH
6126: CALL_OW 39
// tmp := [ ] ;
6130: LD_ADDR_VAR 0 2
6134: PUSH
6135: EMPTY
6136: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) then
6137: LD_INT 22
6139: PUSH
6140: LD_INT 1
6142: PUSH
6143: EMPTY
6144: LIST
6145: LIST
6146: PUSH
6147: LD_INT 21
6149: PUSH
6150: LD_INT 3
6152: PUSH
6153: EMPTY
6154: LIST
6155: LIST
6156: PUSH
6157: EMPTY
6158: LIST
6159: LIST
6160: PPUSH
6161: CALL_OW 69
6165: IFFALSE 6318
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) do
6167: LD_ADDR_VAR 0 1
6171: PUSH
6172: LD_INT 22
6174: PUSH
6175: LD_INT 1
6177: PUSH
6178: EMPTY
6179: LIST
6180: LIST
6181: PUSH
6182: LD_INT 21
6184: PUSH
6185: LD_INT 3
6187: PUSH
6188: EMPTY
6189: LIST
6190: LIST
6191: PUSH
6192: EMPTY
6193: LIST
6194: LIST
6195: PPUSH
6196: CALL_OW 69
6200: PUSH
6201: FOR_IN
6202: IFFALSE 6316
// tmp := tmp ^ [ [ GetBType ( i ) , GetBLevel ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) , GetBWeapon ( i ) ] ] ;
6204: LD_ADDR_VAR 0 2
6208: PUSH
6209: LD_VAR 0 2
6213: PUSH
6214: LD_VAR 0 1
6218: PPUSH
6219: CALL_OW 266
6223: PUSH
6224: LD_VAR 0 1
6228: PPUSH
6229: CALL_OW 267
6233: PUSH
6234: LD_VAR 0 1
6238: PPUSH
6239: CALL_OW 250
6243: PUSH
6244: LD_VAR 0 1
6248: PPUSH
6249: CALL_OW 251
6253: PUSH
6254: LD_VAR 0 1
6258: PPUSH
6259: CALL_OW 254
6263: PUSH
6264: LD_VAR 0 1
6268: PPUSH
6269: LD_INT 1
6271: PPUSH
6272: CALL_OW 268
6276: PUSH
6277: LD_VAR 0 1
6281: PPUSH
6282: LD_INT 2
6284: PPUSH
6285: CALL_OW 268
6289: PUSH
6290: LD_VAR 0 1
6294: PPUSH
6295: CALL_OW 269
6299: PUSH
6300: EMPTY
6301: LIST
6302: LIST
6303: LIST
6304: LIST
6305: LIST
6306: LIST
6307: LIST
6308: LIST
6309: PUSH
6310: EMPTY
6311: LIST
6312: ADD
6313: ST_TO_ADDR
6314: GO 6201
6316: POP
6317: POP
// if tmp then
6318: LD_VAR 0 2
6322: IFFALSE 6336
// SaveVariable ( tmp , buildingsInDelta ) ;
6324: LD_VAR 0 2
6328: PPUSH
6329: LD_STRING buildingsInDelta
6331: PPUSH
6332: CALL_OW 39
// YouWin ;
6336: CALL_OW 103
// end ; end_of_file
6340: PPOPN 5
6342: END
// export function PrepareArabianTroops ( amount , skill , area ) ; var i , un , tmp ; begin
6343: LD_INT 0
6345: PPUSH
6346: PPUSH
6347: PPUSH
6348: PPUSH
// InitHc ;
6349: CALL_OW 19
// InitUc ;
6353: CALL_OW 18
// uc_side := 2 ;
6357: LD_ADDR_OWVAR 20
6361: PUSH
6362: LD_INT 2
6364: ST_TO_ADDR
// uc_nation := 2 ;
6365: LD_ADDR_OWVAR 21
6369: PUSH
6370: LD_INT 2
6372: ST_TO_ADDR
// if not amount then
6373: LD_VAR 0 1
6377: NOT
6378: IFFALSE 6382
// exit ;
6380: GO 6505
// for i = 1 to amount do
6382: LD_ADDR_VAR 0 5
6386: PUSH
6387: DOUBLE
6388: LD_INT 1
6390: DEC
6391: ST_TO_ADDR
6392: LD_VAR 0 1
6396: PUSH
6397: FOR_TO
6398: IFFALSE 6493
// begin PrepareHuman ( false , 1 , skill ) ;
6400: LD_INT 0
6402: PPUSH
6403: LD_INT 1
6405: PPUSH
6406: LD_VAR 0 2
6410: PPUSH
6411: CALL_OW 380
// un := CreateHuman ;
6415: LD_ADDR_VAR 0 6
6419: PUSH
6420: CALL_OW 44
6424: ST_TO_ADDR
// tmp := Insert ( tmp , 1 , un ) ;
6425: LD_ADDR_VAR 0 7
6429: PUSH
6430: LD_VAR 0 7
6434: PPUSH
6435: LD_INT 1
6437: PPUSH
6438: LD_VAR 0 6
6442: PPUSH
6443: CALL_OW 2
6447: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
6448: LD_VAR 0 6
6452: PPUSH
6453: LD_VAR 0 3
6457: PPUSH
6458: LD_INT 0
6460: PPUSH
6461: CALL_OW 49
// if i mod 2 = 0 then
6465: LD_VAR 0 5
6469: PUSH
6470: LD_INT 2
6472: MOD
6473: PUSH
6474: LD_INT 0
6476: EQUAL
6477: IFFALSE 6491
// SetTag ( un , 11 ) ;
6479: LD_VAR 0 6
6483: PPUSH
6484: LD_INT 11
6486: PPUSH
6487: CALL_OW 109
// end ;
6491: GO 6397
6493: POP
6494: POP
// result := tmp ;
6495: LD_ADDR_VAR 0 4
6499: PUSH
6500: LD_VAR 0 7
6504: ST_TO_ADDR
// end ;
6505: LD_VAR 0 4
6509: RET
// export ar_forces , ap_killers ; every 0 0$1 trigger Delta do var i , timer , more_troops , skill , eng , un , veh , force ;
6510: LD_EXP 6
6514: IFFALSE 7592
6516: GO 6518
6518: DISABLE
6519: LD_INT 0
6521: PPUSH
6522: PPUSH
6523: PPUSH
6524: PPUSH
6525: PPUSH
6526: PPUSH
6527: PPUSH
6528: PPUSH
// begin more_troops := false ;
6529: LD_ADDR_VAR 0 3
6533: PUSH
6534: LD_INT 0
6536: ST_TO_ADDR
// skill := [ 3 , 4 , 5 , 5 ] [ Difficulty ] ;
6537: LD_ADDR_VAR 0 4
6541: PUSH
6542: LD_INT 3
6544: PUSH
6545: LD_INT 4
6547: PUSH
6548: LD_INT 5
6550: PUSH
6551: LD_INT 5
6553: PUSH
6554: EMPTY
6555: LIST
6556: LIST
6557: LIST
6558: LIST
6559: PUSH
6560: LD_OWVAR 67
6564: ARRAY
6565: ST_TO_ADDR
// timer := [ 5 5$00 , 4 4$00 , 3 3$00 , 2 2$30 ] [ Difficulty ] ;
6566: LD_ADDR_VAR 0 2
6570: PUSH
6571: LD_INT 10500
6573: PUSH
6574: LD_INT 8400
6576: PUSH
6577: LD_INT 6300
6579: PUSH
6580: LD_INT 5250
6582: PUSH
6583: EMPTY
6584: LIST
6585: LIST
6586: LIST
6587: LIST
6588: PUSH
6589: LD_OWVAR 67
6593: ARRAY
6594: ST_TO_ADDR
// force := [ ] ;
6595: LD_ADDR_VAR 0 8
6599: PUSH
6600: EMPTY
6601: ST_TO_ADDR
// ar_forces := [ ] ;
6602: LD_ADDR_EXP 28
6606: PUSH
6607: EMPTY
6608: ST_TO_ADDR
// ap_killers := [ ] ;
6609: LD_ADDR_EXP 29
6613: PUSH
6614: EMPTY
6615: ST_TO_ADDR
// Wait ( timer ) ;
6616: LD_VAR 0 2
6620: PPUSH
6621: CALL_OW 67
// if Denis and GetSide ( Denis ) = 4 then
6625: LD_EXP 19
6629: PUSH
6630: LD_EXP 19
6634: PPUSH
6635: CALL_OW 255
6639: PUSH
6640: LD_INT 4
6642: EQUAL
6643: AND
6644: IFFALSE 6653
// Wait ( 0 0$45 ) ;
6646: LD_INT 1575
6648: PPUSH
6649: CALL_OW 67
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_armoury ] ] ) then
6653: LD_INT 22
6655: PUSH
6656: LD_INT 1
6658: PUSH
6659: EMPTY
6660: LIST
6661: LIST
6662: PUSH
6663: LD_INT 30
6665: PUSH
6666: LD_INT 4
6668: PUSH
6669: EMPTY
6670: LIST
6671: LIST
6672: PUSH
6673: EMPTY
6674: LIST
6675: LIST
6676: PPUSH
6677: CALL_OW 69
6681: IFFALSE 6698
// begin wait ( 1 1$25 ) ;
6683: LD_INT 2975
6685: PPUSH
6686: CALL_OW 67
// more_troops := true ;
6690: LD_ADDR_VAR 0 3
6694: PUSH
6695: LD_INT 1
6697: ST_TO_ADDR
// end ; if more_troops then
6698: LD_VAR 0 3
6702: IFFALSE 6898
// begin force := PrepareArabianTroops ( [ 4 , 5 , 6 , 7 ] [ Difficulty ] , skill , arArea2 ) ;
6704: LD_ADDR_VAR 0 8
6708: PUSH
6709: LD_INT 4
6711: PUSH
6712: LD_INT 5
6714: PUSH
6715: LD_INT 6
6717: PUSH
6718: LD_INT 7
6720: PUSH
6721: EMPTY
6722: LIST
6723: LIST
6724: LIST
6725: LIST
6726: PUSH
6727: LD_OWVAR 67
6731: ARRAY
6732: PPUSH
6733: LD_VAR 0 4
6737: PPUSH
6738: LD_INT 14
6740: PPUSH
6741: CALL 6343 0 3
6745: ST_TO_ADDR
// veh := PrepareTank ( 2 , 3 , ru_medium_tracked , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_heavy_machine_gun , ru_gatling_gun , ru_gun ] [ Difficulty ] , 90 ) ;
6746: LD_ADDR_VAR 0 7
6750: PUSH
6751: LD_INT 2
6753: PPUSH
6754: LD_INT 3
6756: PPUSH
6757: LD_INT 22
6759: PPUSH
6760: LD_INT 1
6762: PPUSH
6763: LD_INT 1
6765: PPUSH
6766: LD_INT 42
6768: PUSH
6769: LD_INT 42
6771: PUSH
6772: LD_INT 43
6774: PUSH
6775: LD_INT 44
6777: PUSH
6778: EMPTY
6779: LIST
6780: LIST
6781: LIST
6782: LIST
6783: PUSH
6784: LD_OWVAR 67
6788: ARRAY
6789: PPUSH
6790: LD_INT 90
6792: PPUSH
6793: CALL 435 0 7
6797: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
6798: LD_VAR 0 7
6802: PPUSH
6803: LD_INT 4
6805: PPUSH
6806: CALL_OW 233
// PlaceUnitArea ( veh , arArea1 , false ) ;
6810: LD_VAR 0 7
6814: PPUSH
6815: LD_INT 13
6817: PPUSH
6818: LD_INT 0
6820: PPUSH
6821: CALL_OW 49
// uc_side := 2 ;
6825: LD_ADDR_OWVAR 20
6829: PUSH
6830: LD_INT 2
6832: ST_TO_ADDR
// uc_nation := 2 ;
6833: LD_ADDR_OWVAR 21
6837: PUSH
6838: LD_INT 2
6840: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
6841: LD_INT 0
6843: PPUSH
6844: LD_INT 1
6846: PPUSH
6847: LD_VAR 0 4
6851: PPUSH
6852: CALL_OW 380
// un := CreateHuman ;
6856: LD_ADDR_VAR 0 6
6860: PUSH
6861: CALL_OW 44
6865: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6866: LD_VAR 0 6
6870: PPUSH
6871: LD_VAR 0 7
6875: PPUSH
6876: CALL_OW 52
// force := force ^ un ;
6880: LD_ADDR_VAR 0 8
6884: PUSH
6885: LD_VAR 0 8
6889: PUSH
6890: LD_VAR 0 6
6894: ADD
6895: ST_TO_ADDR
// end else
6896: GO 6940
// begin force := PrepareArabianTroops ( [ 3 , 4 , 5 , 6 ] [ Difficulty ] , skill , arArea2 ) ;
6898: LD_ADDR_VAR 0 8
6902: PUSH
6903: LD_INT 3
6905: PUSH
6906: LD_INT 4
6908: PUSH
6909: LD_INT 5
6911: PUSH
6912: LD_INT 6
6914: PUSH
6915: EMPTY
6916: LIST
6917: LIST
6918: LIST
6919: LIST
6920: PUSH
6921: LD_OWVAR 67
6925: ARRAY
6926: PPUSH
6927: LD_VAR 0 4
6931: PPUSH
6932: LD_INT 14
6934: PPUSH
6935: CALL 6343 0 3
6939: ST_TO_ADDR
// end ; if force then
6940: LD_VAR 0 8
6944: IFFALSE 6956
// ar_forces := force ;
6946: LD_ADDR_EXP 28
6950: PUSH
6951: LD_VAR 0 8
6955: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
6956: LD_INT 35
6958: PPUSH
6959: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) = 0 ;
6963: LD_INT 22
6965: PUSH
6966: LD_INT 2
6968: PUSH
6969: EMPTY
6970: LIST
6971: LIST
6972: PUSH
6973: LD_INT 21
6975: PUSH
6976: LD_INT 1
6978: PUSH
6979: EMPTY
6980: LIST
6981: LIST
6982: PUSH
6983: EMPTY
6984: LIST
6985: LIST
6986: PPUSH
6987: CALL_OW 69
6991: PUSH
6992: LD_INT 0
6994: EQUAL
6995: IFFALSE 6956
// wait ( timer ) ;
6997: LD_VAR 0 2
7001: PPUSH
7002: CALL_OW 67
// force := PrepareArabianTroops ( [ 4 , 5 , 6 , 7 ] [ Difficulty ] , skill , [ arArea1 , arArea2 ] [ rand ( 1 , 2 ) ] ) ;
7006: LD_ADDR_VAR 0 8
7010: PUSH
7011: LD_INT 4
7013: PUSH
7014: LD_INT 5
7016: PUSH
7017: LD_INT 6
7019: PUSH
7020: LD_INT 7
7022: PUSH
7023: EMPTY
7024: LIST
7025: LIST
7026: LIST
7027: LIST
7028: PUSH
7029: LD_OWVAR 67
7033: ARRAY
7034: PPUSH
7035: LD_VAR 0 4
7039: PPUSH
7040: LD_INT 13
7042: PUSH
7043: LD_INT 14
7045: PUSH
7046: EMPTY
7047: LIST
7048: LIST
7049: PUSH
7050: LD_INT 1
7052: PPUSH
7053: LD_INT 2
7055: PPUSH
7056: CALL_OW 12
7060: ARRAY
7061: PPUSH
7062: CALL 6343 0 3
7066: ST_TO_ADDR
// if Difficulty > 1 and Delta then
7067: LD_OWVAR 67
7071: PUSH
7072: LD_INT 1
7074: GREATER
7075: PUSH
7076: LD_EXP 6
7080: AND
7081: IFFALSE 7160
// begin uc_side := 2 ;
7083: LD_ADDR_OWVAR 20
7087: PUSH
7088: LD_INT 2
7090: ST_TO_ADDR
// uc_nation := 2 ;
7091: LD_ADDR_OWVAR 21
7095: PUSH
7096: LD_INT 2
7098: ST_TO_ADDR
// PrepareHuman ( false , 2 , skill ) ;
7099: LD_INT 0
7101: PPUSH
7102: LD_INT 2
7104: PPUSH
7105: LD_VAR 0 4
7109: PPUSH
7110: CALL_OW 380
// eng := CreateHuman ;
7114: LD_ADDR_VAR 0 5
7118: PUSH
7119: CALL_OW 44
7123: ST_TO_ADDR
// PlaceUnitArea ( eng , arArea1 , false ) ;
7124: LD_VAR 0 5
7128: PPUSH
7129: LD_INT 13
7131: PPUSH
7132: LD_INT 0
7134: PPUSH
7135: CALL_OW 49
// Wait ( 3 ) ;
7139: LD_INT 3
7141: PPUSH
7142: CALL_OW 67
// AddComEnterUnit ( eng , Delta ) ;
7146: LD_VAR 0 5
7150: PPUSH
7151: LD_EXP 6
7155: PPUSH
7156: CALL_OW 180
// end ; if force then
7160: LD_VAR 0 8
7164: IFFALSE 7176
// ar_forces := force ;
7166: LD_ADDR_EXP 28
7170: PUSH
7171: LD_VAR 0 8
7175: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
7176: LD_INT 35
7178: PPUSH
7179: CALL_OW 67
// if eng then
7183: LD_VAR 0 5
7187: IFFALSE 7241
// if GetSide ( Delta ) = 2 and IsOk ( eng ) and not IsInUnit ( eng ) then
7189: LD_EXP 6
7193: PPUSH
7194: CALL_OW 255
7198: PUSH
7199: LD_INT 2
7201: EQUAL
7202: PUSH
7203: LD_VAR 0 5
7207: PPUSH
7208: CALL_OW 302
7212: AND
7213: PUSH
7214: LD_VAR 0 5
7218: PPUSH
7219: CALL_OW 310
7223: NOT
7224: AND
7225: IFFALSE 7241
// ComEnterUnit ( eng , Delta ) ;
7227: LD_VAR 0 5
7231: PPUSH
7232: LD_EXP 6
7236: PPUSH
7237: CALL_OW 120
// until FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) = 0 ;
7241: LD_INT 22
7243: PUSH
7244: LD_INT 2
7246: PUSH
7247: EMPTY
7248: LIST
7249: LIST
7250: PUSH
7251: LD_INT 21
7253: PUSH
7254: LD_INT 1
7256: PUSH
7257: EMPTY
7258: LIST
7259: LIST
7260: PUSH
7261: EMPTY
7262: LIST
7263: LIST
7264: PPUSH
7265: CALL_OW 69
7269: PUSH
7270: LD_INT 0
7272: EQUAL
7273: IFFALSE 7176
// Wait ( 2 2$00 ) ;
7275: LD_INT 4200
7277: PPUSH
7278: CALL_OW 67
// ap_killers := PrepareArabianTroops ( [ 1 , 2 , 2 , 2 ] [ Difficulty ] , skill , arArea1 ) ;
7282: LD_ADDR_EXP 29
7286: PUSH
7287: LD_INT 1
7289: PUSH
7290: LD_INT 2
7292: PUSH
7293: LD_INT 2
7295: PUSH
7296: LD_INT 2
7298: PUSH
7299: EMPTY
7300: LIST
7301: LIST
7302: LIST
7303: LIST
7304: PUSH
7305: LD_OWVAR 67
7309: ARRAY
7310: PPUSH
7311: LD_VAR 0 4
7315: PPUSH
7316: LD_INT 13
7318: PPUSH
7319: CALL 6343 0 3
7323: ST_TO_ADDR
// Wait ( timer * 2 ) ;
7324: LD_VAR 0 2
7328: PUSH
7329: LD_INT 2
7331: MUL
7332: PPUSH
7333: CALL_OW 67
// ar_forces := PrepareArabianTroops ( [ 5 , 6 , 7 , 8 ] [ Difficulty ] , skill , arArea1 ) ^ PrepareArabianTroops ( [ 3 , 4 , 4 , 4 ] [ Difficulty ] , skill , arArea2 ) ;
7337: LD_ADDR_EXP 28
7341: PUSH
7342: LD_INT 5
7344: PUSH
7345: LD_INT 6
7347: PUSH
7348: LD_INT 7
7350: PUSH
7351: LD_INT 8
7353: PUSH
7354: EMPTY
7355: LIST
7356: LIST
7357: LIST
7358: LIST
7359: PUSH
7360: LD_OWVAR 67
7364: ARRAY
7365: PPUSH
7366: LD_VAR 0 4
7370: PPUSH
7371: LD_INT 13
7373: PPUSH
7374: CALL 6343 0 3
7378: PUSH
7379: LD_INT 3
7381: PUSH
7382: LD_INT 4
7384: PUSH
7385: LD_INT 4
7387: PUSH
7388: LD_INT 4
7390: PUSH
7391: EMPTY
7392: LIST
7393: LIST
7394: LIST
7395: LIST
7396: PUSH
7397: LD_OWVAR 67
7401: ARRAY
7402: PPUSH
7403: LD_VAR 0 4
7407: PPUSH
7408: LD_INT 14
7410: PPUSH
7411: CALL 6343 0 3
7415: ADD
7416: ST_TO_ADDR
// if Difficulty < 4 then
7417: LD_OWVAR 67
7421: PUSH
7422: LD_INT 4
7424: LESS
7425: IFFALSE 7429
// exit ;
7427: GO 7592
// veh := PrepareTank ( 2 , 3 , ru_medium_tracked , engine_combustion , control_manual , ru_gun , 90 ) ;
7429: LD_ADDR_VAR 0 7
7433: PUSH
7434: LD_INT 2
7436: PPUSH
7437: LD_INT 3
7439: PPUSH
7440: LD_INT 22
7442: PPUSH
7443: LD_INT 1
7445: PPUSH
7446: LD_INT 1
7448: PPUSH
7449: LD_INT 44
7451: PPUSH
7452: LD_INT 90
7454: PPUSH
7455: CALL 435 0 7
7459: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
7460: LD_VAR 0 7
7464: PPUSH
7465: LD_INT 1
7467: PPUSH
7468: CALL_OW 233
// PlaceUnitXY ( veh , 28 , 51 , false ) ;
7472: LD_VAR 0 7
7476: PPUSH
7477: LD_INT 28
7479: PPUSH
7480: LD_INT 51
7482: PPUSH
7483: LD_INT 0
7485: PPUSH
7486: CALL_OW 48
// uc_side := 2 ;
7490: LD_ADDR_OWVAR 20
7494: PUSH
7495: LD_INT 2
7497: ST_TO_ADDR
// uc_nation := 2 ;
7498: LD_ADDR_OWVAR 21
7502: PUSH
7503: LD_INT 2
7505: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
7506: LD_INT 0
7508: PPUSH
7509: LD_INT 1
7511: PPUSH
7512: LD_VAR 0 4
7516: PPUSH
7517: CALL_OW 380
// un := CreateHuman ;
7521: LD_ADDR_VAR 0 6
7525: PUSH
7526: CALL_OW 44
7530: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
7531: LD_VAR 0 6
7535: PPUSH
7536: LD_VAR 0 7
7540: PPUSH
7541: CALL_OW 52
// ar_forces := Join ( ar_forces , un ) ;
7545: LD_ADDR_EXP 28
7549: PUSH
7550: LD_EXP 28
7554: PPUSH
7555: LD_VAR 0 6
7559: PPUSH
7560: CALL 66153 0 2
7564: ST_TO_ADDR
// ar_forces := ar_forces union PrepareArabianTroops ( 4 , skill , arArea3 ) ;
7565: LD_ADDR_EXP 28
7569: PUSH
7570: LD_EXP 28
7574: PUSH
7575: LD_INT 4
7577: PPUSH
7578: LD_VAR 0 4
7582: PPUSH
7583: LD_INT 19
7585: PPUSH
7586: CALL 6343 0 3
7590: UNION
7591: ST_TO_ADDR
// end ;
7592: PPOPN 8
7594: END
// every 0 0$03 trigger ar_forces do var i , target ;
7595: LD_EXP 28
7599: IFFALSE 7797
7601: GO 7603
7603: DISABLE
7604: LD_INT 0
7606: PPUSH
7607: PPUSH
// begin enable ;
7608: ENABLE
// if not ar_forces then
7609: LD_EXP 28
7613: NOT
7614: IFFALSE 7618
// exit ;
7616: GO 7797
// if Delta then
7618: LD_EXP 6
7622: IFFALSE 7636
// target := Delta else
7624: LD_ADDR_VAR 0 2
7628: PUSH
7629: LD_EXP 6
7633: ST_TO_ADDR
7634: GO 7646
// target := JMM ;
7636: LD_ADDR_VAR 0 2
7640: PUSH
7641: LD_EXP 16
7645: ST_TO_ADDR
// for i in ar_forces do
7646: LD_ADDR_VAR 0 1
7650: PUSH
7651: LD_EXP 28
7655: PUSH
7656: FOR_IN
7657: IFFALSE 7795
// begin if i in FilterAllUnits ( [ f_driving ] ) then
7659: LD_VAR 0 1
7663: PUSH
7664: LD_INT 55
7666: PUSH
7667: EMPTY
7668: LIST
7669: PPUSH
7670: CALL_OW 69
7674: IN
7675: IFFALSE 7718
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , IsInUnit ( i ) ) ) else
7677: LD_VAR 0 1
7681: PPUSH
7682: LD_INT 22
7684: PUSH
7685: LD_INT 1
7687: PUSH
7688: EMPTY
7689: LIST
7690: LIST
7691: PPUSH
7692: CALL_OW 69
7696: PPUSH
7697: LD_VAR 0 1
7701: PPUSH
7702: CALL_OW 310
7706: PPUSH
7707: CALL_OW 74
7711: PPUSH
7712: CALL_OW 115
7716: GO 7793
// if GetDistUnits ( i , target ) > 30 then
7718: LD_VAR 0 1
7722: PPUSH
7723: LD_VAR 0 2
7727: PPUSH
7728: CALL_OW 296
7732: PUSH
7733: LD_INT 30
7735: GREATER
7736: IFFALSE 7769
// ComAgressiveMove ( i , GetX ( target ) , GetY ( target ) ) else
7738: LD_VAR 0 1
7742: PPUSH
7743: LD_VAR 0 2
7747: PPUSH
7748: CALL_OW 250
7752: PPUSH
7753: LD_VAR 0 2
7757: PPUSH
7758: CALL_OW 251
7762: PPUSH
7763: CALL_OW 114
7767: GO 7793
// Attack ( i , FilterAllUnits ( [ f_enemy , 2 ] ) ) ;
7769: LD_VAR 0 1
7773: PPUSH
7774: LD_INT 81
7776: PUSH
7777: LD_INT 2
7779: PUSH
7780: EMPTY
7781: LIST
7782: LIST
7783: PPUSH
7784: CALL_OW 69
7788: PPUSH
7789: CALL 927 0 2
// end ;
7793: GO 7656
7795: POP
7796: POP
// end ;
7797: PPOPN 2
7799: END
// every 0 0$01 trigger ap_killers do var filter , i , target ;
7800: LD_EXP 29
7804: IFFALSE 7964
7806: GO 7808
7808: DISABLE
7809: LD_INT 0
7811: PPUSH
7812: PPUSH
7813: PPUSH
// begin enable ;
7814: ENABLE
// filter := FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) ;
7815: LD_ADDR_VAR 0 1
7819: PUSH
7820: LD_INT 22
7822: PUSH
7823: LD_INT 0
7825: PUSH
7826: EMPTY
7827: LIST
7828: LIST
7829: PUSH
7830: LD_INT 25
7832: PUSH
7833: LD_INT 12
7835: PUSH
7836: EMPTY
7837: LIST
7838: LIST
7839: PUSH
7840: EMPTY
7841: LIST
7842: LIST
7843: PPUSH
7844: CALL_OW 69
7848: ST_TO_ADDR
// if not filter then
7849: LD_VAR 0 1
7853: NOT
7854: IFFALSE 7881
// begin ar_forces := ar_forces ^ ap_killers ;
7856: LD_ADDR_EXP 28
7860: PUSH
7861: LD_EXP 28
7865: PUSH
7866: LD_EXP 29
7870: ADD
7871: ST_TO_ADDR
// ap_killers := [ ] ;
7872: LD_ADDR_EXP 29
7876: PUSH
7877: EMPTY
7878: ST_TO_ADDR
// exit ;
7879: GO 7964
// end ; for i in ap_killers do
7881: LD_ADDR_VAR 0 2
7885: PUSH
7886: LD_EXP 29
7890: PUSH
7891: FOR_IN
7892: IFFALSE 7962
// begin if not IsOk ( i ) then
7894: LD_VAR 0 2
7898: PPUSH
7899: CALL_OW 302
7903: NOT
7904: IFFALSE 7908
// continue ;
7906: GO 7891
// if not HasTask ( i ) then
7908: LD_VAR 0 2
7912: PPUSH
7913: CALL_OW 314
7917: NOT
7918: IFFALSE 7940
// target := NearestUnitToUnit ( filter , i ) ;
7920: LD_ADDR_VAR 0 3
7924: PUSH
7925: LD_VAR 0 1
7929: PPUSH
7930: LD_VAR 0 2
7934: PPUSH
7935: CALL_OW 74
7939: ST_TO_ADDR
// if target then
7940: LD_VAR 0 3
7944: IFFALSE 7960
// ComAttackUnit ( i , target ) ;
7946: LD_VAR 0 2
7950: PPUSH
7951: LD_VAR 0 3
7955: PPUSH
7956: CALL_OW 115
// end ;
7960: GO 7891
7962: POP
7963: POP
// end ; end_of_file
7964: PPOPN 3
7966: END
// every 0 0$40 + 0 0$2 trigger Delta do var i , counter , cr ;
7967: LD_EXP 6
7971: IFFALSE 8107
7973: GO 7975
7975: DISABLE
7976: LD_INT 0
7978: PPUSH
7979: PPUSH
7980: PPUSH
// begin counter := [ 300 , 250 , 220 , 210 ] [ Difficulty ] ;
7981: LD_ADDR_VAR 0 2
7985: PUSH
7986: LD_INT 300
7988: PUSH
7989: LD_INT 250
7991: PUSH
7992: LD_INT 220
7994: PUSH
7995: LD_INT 210
7997: PUSH
7998: EMPTY
7999: LIST
8000: LIST
8001: LIST
8002: LIST
8003: PUSH
8004: LD_OWVAR 67
8008: ARRAY
8009: ST_TO_ADDR
// CreateCratesArea ( Rand ( 1 , 3 ) , cratesArea , true ) ;
8010: LD_INT 1
8012: PPUSH
8013: LD_INT 3
8015: PPUSH
8016: CALL_OW 12
8020: PPUSH
8021: LD_INT 7
8023: PPUSH
8024: LD_INT 1
8026: PPUSH
8027: CALL_OW 55
// repeat wait ( rand ( 1 1$30 , 2 2$20 ) ) ;
8031: LD_INT 3150
8033: PPUSH
8034: LD_INT 4900
8036: PPUSH
8037: CALL_OW 12
8041: PPUSH
8042: CALL_OW 67
// cr := rand ( 1 , 5 ) ;
8046: LD_ADDR_VAR 0 3
8050: PUSH
8051: LD_INT 1
8053: PPUSH
8054: LD_INT 5
8056: PPUSH
8057: CALL_OW 12
8061: ST_TO_ADDR
// CreateCratesArea ( cr , cratesArea , true ) ;
8062: LD_VAR 0 3
8066: PPUSH
8067: LD_INT 7
8069: PPUSH
8070: LD_INT 1
8072: PPUSH
8073: CALL_OW 55
// counter := counter - cr * 10 ;
8077: LD_ADDR_VAR 0 2
8081: PUSH
8082: LD_VAR 0 2
8086: PUSH
8087: LD_VAR 0 3
8091: PUSH
8092: LD_INT 10
8094: MUL
8095: MINUS
8096: ST_TO_ADDR
// until counter <= 0 ;
8097: LD_VAR 0 2
8101: PUSH
8102: LD_INT 0
8104: LESSEQUAL
8105: IFFALSE 8031
// end ;
8107: PPOPN 3
8109: END
// every 0 0$03 trigger not Delta do var i ;
8110: LD_EXP 6
8114: NOT
8115: IFFALSE 8185
8117: GO 8119
8119: DISABLE
8120: LD_INT 0
8122: PPUSH
// begin for i = 1 to 5 - Difficulty do
8123: LD_ADDR_VAR 0 1
8127: PUSH
8128: DOUBLE
8129: LD_INT 1
8131: DEC
8132: ST_TO_ADDR
8133: LD_INT 5
8135: PUSH
8136: LD_OWVAR 67
8140: MINUS
8141: PUSH
8142: FOR_TO
8143: IFFALSE 8183
// begin CreateCratesArea ( rand ( 2 , 5 ) , deltaMainArea , true ) ;
8145: LD_INT 2
8147: PPUSH
8148: LD_INT 5
8150: PPUSH
8151: CALL_OW 12
8155: PPUSH
8156: LD_INT 8
8158: PPUSH
8159: LD_INT 1
8161: PPUSH
8162: CALL_OW 55
// Wait ( rand ( 0 0$16 , 0 0$39 ) ) ;
8166: LD_INT 560
8168: PPUSH
8169: LD_INT 1365
8171: PPUSH
8172: CALL_OW 12
8176: PPUSH
8177: CALL_OW 67
// end ;
8181: GO 8142
8183: POP
8184: POP
// end ;
8185: PPOPN 1
8187: END
// every 3 3$00 trigger tick < 15 15$00 do
8188: LD_OWVAR 1
8192: PUSH
8193: LD_INT 31500
8195: LESS
8196: IFFALSE 8256
8198: GO 8200
8200: DISABLE
// begin enable ;
8201: ENABLE
// CreateCratesAnyWhere ( rand ( 1 , 3 ) , true ) ;
8202: LD_INT 1
8204: PPUSH
8205: LD_INT 3
8207: PPUSH
8208: CALL_OW 12
8212: PPUSH
8213: LD_INT 1
8215: PPUSH
8216: CALL_OW 57
// Wait ( rand ( 0 0$38 , 0 0$59 ) ) ;
8220: LD_INT 1330
8222: PPUSH
8223: LD_INT 2065
8225: PPUSH
8226: CALL_OW 12
8230: PPUSH
8231: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 4 ) , riverArea , true ) ;
8235: LD_INT 1
8237: PPUSH
8238: LD_INT 4
8240: PPUSH
8241: CALL_OW 12
8245: PPUSH
8246: LD_INT 15
8248: PPUSH
8249: LD_INT 1
8251: PPUSH
8252: CALL_OW 55
// end ; end_of_file
8256: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
8257: LD_VAR 0 1
8261: PPUSH
8262: CALL 24543 0 1
// if un = JMM then
8266: LD_VAR 0 1
8270: PUSH
8271: LD_EXP 16
8275: EQUAL
8276: IFFALSE 8285
// YouLost ( JMM ) ;
8278: LD_STRING JMM
8280: PPUSH
8281: CALL_OW 104
// if un = Delta then
8285: LD_VAR 0 1
8289: PUSH
8290: LD_EXP 6
8294: EQUAL
8295: IFFALSE 8318
// begin Delta := 0 ;
8297: LD_ADDR_EXP 6
8301: PUSH
8302: LD_INT 0
8304: ST_TO_ADDR
// SetRestrict ( b_depot , 1 , true ) ;
8305: LD_INT 0
8307: PPUSH
8308: LD_INT 1
8310: PPUSH
8311: LD_INT 1
8313: PPUSH
8314: CALL_OW 324
// end ; if un in ar_forces then
8318: LD_VAR 0 1
8322: PUSH
8323: LD_EXP 28
8327: IN
8328: IFFALSE 8346
// ar_forces := ar_forces diff un ;
8330: LD_ADDR_EXP 28
8334: PUSH
8335: LD_EXP 28
8339: PUSH
8340: LD_VAR 0 1
8344: DIFF
8345: ST_TO_ADDR
// if un in ap_killers then
8346: LD_VAR 0 1
8350: PUSH
8351: LD_EXP 29
8355: IN
8356: IFFALSE 8374
// ap_killers := ap_killers diff un ;
8358: LD_ADDR_EXP 29
8362: PUSH
8363: LD_EXP 29
8367: PUSH
8368: LD_VAR 0 1
8372: DIFF
8373: ST_TO_ADDR
// if un in FilterAllUnits ( [ f_or , [ f_class , class_apeman ] , [ f_class , class_apeman_engineer ] ] ) then
8374: LD_VAR 0 1
8378: PUSH
8379: LD_INT 2
8381: PUSH
8382: LD_INT 25
8384: PUSH
8385: LD_INT 12
8387: PUSH
8388: EMPTY
8389: LIST
8390: LIST
8391: PUSH
8392: LD_INT 25
8394: PUSH
8395: LD_INT 16
8397: PUSH
8398: EMPTY
8399: LIST
8400: LIST
8401: PUSH
8402: EMPTY
8403: LIST
8404: LIST
8405: LIST
8406: PPUSH
8407: CALL_OW 69
8411: IN
8412: IFFALSE 8428
// apeKillCounter := apeKillCounter + 1 ;
8414: LD_ADDR_EXP 15
8418: PUSH
8419: LD_EXP 15
8423: PUSH
8424: LD_INT 1
8426: PLUS
8427: ST_TO_ADDR
// end ;
8428: PPOPN 1
8430: END
// on VehicleConstructed ( veh , fac ) do begin SOS_VehicleConstructed ( veh , fac ) ;
8431: LD_VAR 0 1
8435: PPUSH
8436: LD_VAR 0 2
8440: PPUSH
8441: CALL 24663 0 2
// end ;
8445: PPOPN 2
8447: END
// on Contact ( s1 , s2 ) do begin if s1 = 1 and s2 = 2 and not arab_spotted then
8448: LD_VAR 0 1
8452: PUSH
8453: LD_INT 1
8455: EQUAL
8456: PUSH
8457: LD_VAR 0 2
8461: PUSH
8462: LD_INT 2
8464: EQUAL
8465: AND
8466: PUSH
8467: LD_EXP 13
8471: NOT
8472: AND
8473: IFFALSE 8483
// arab_spotted := true ;
8475: LD_ADDR_EXP 13
8479: PUSH
8480: LD_INT 1
8482: ST_TO_ADDR
// end ;
8483: PPOPN 2
8485: END
// on EndTheMissionRaised ( p ) do begin end_the_mission_allowed := false ;
8486: LD_ADDR_OWVAR 57
8490: PUSH
8491: LD_INT 0
8493: ST_TO_ADDR
// end_mission := true ;
8494: LD_ADDR_EXP 14
8498: PUSH
8499: LD_INT 1
8501: ST_TO_ADDR
// end ;
8502: PPOPN 1
8504: END
// on ApemanTamed ( apeman , sci ) do begin if GetSide ( sci ) = 1 then
8505: LD_VAR 0 2
8509: PPUSH
8510: CALL_OW 255
8514: PUSH
8515: LD_INT 1
8517: EQUAL
8518: IFFALSE 8534
// apeman_counter := apeman_counter + 1 ;
8520: LD_ADDR_EXP 12
8524: PUSH
8525: LD_EXP 12
8529: PUSH
8530: LD_INT 1
8532: PLUS
8533: ST_TO_ADDR
// if not first_apeman_tamed then
8534: LD_EXP 8
8538: NOT
8539: IFFALSE 8738
// begin first_apeman_tamed := true ;
8541: LD_ADDR_EXP 8
8545: PUSH
8546: LD_INT 1
8548: ST_TO_ADDR
// if sci = Gladstone then
8549: LD_VAR 0 2
8553: PUSH
8554: LD_EXP 17
8558: EQUAL
8559: IFFALSE 8573
// Say ( Gladstone , D7b-Glad-1 ) ;
8561: LD_EXP 17
8565: PPUSH
8566: LD_STRING D7b-Glad-1
8568: PPUSH
8569: CALL_OW 88
// if sci = Denis then
8573: LD_VAR 0 2
8577: PUSH
8578: LD_EXP 19
8582: EQUAL
8583: IFFALSE 8597
// Say ( Denis , D7a-Den-1 ) ;
8585: LD_EXP 19
8589: PPUSH
8590: LD_STRING D7a-Den-1
8592: PPUSH
8593: CALL_OW 88
// if not sci in [ JMM , Gladstone , Denis , Lisa , Frank , Bobby , Cyrus , Donaldson ] then
8597: LD_VAR 0 2
8601: PUSH
8602: LD_EXP 16
8606: PUSH
8607: LD_EXP 17
8611: PUSH
8612: LD_EXP 19
8616: PUSH
8617: LD_EXP 22
8621: PUSH
8622: LD_EXP 23
8626: PUSH
8627: LD_EXP 24
8631: PUSH
8632: LD_EXP 25
8636: PUSH
8637: LD_EXP 21
8641: PUSH
8642: EMPTY
8643: LIST
8644: LIST
8645: LIST
8646: LIST
8647: LIST
8648: LIST
8649: LIST
8650: LIST
8651: IN
8652: NOT
8653: IFFALSE 8696
// begin if GetSex ( sci ) = sex_male then
8655: LD_VAR 0 2
8659: PPUSH
8660: CALL_OW 258
8664: PUSH
8665: LD_INT 1
8667: EQUAL
8668: IFFALSE 8684
// Say ( sci , D7c-Sci1-1 ) else
8670: LD_VAR 0 2
8674: PPUSH
8675: LD_STRING D7c-Sci1-1
8677: PPUSH
8678: CALL_OW 88
8682: GO 8696
// Say ( sci , D7c-FSci1-1 ) ;
8684: LD_VAR 0 2
8688: PPUSH
8689: LD_STRING D7c-FSci1-1
8691: PPUSH
8692: CALL_OW 88
// end ; if sci <> Gladstone then
8696: LD_VAR 0 2
8700: PUSH
8701: LD_EXP 17
8705: NONEQUAL
8706: IFFALSE 8720
// Say ( Gladstone , D7c-Glad-1 ) ;
8708: LD_EXP 17
8712: PPUSH
8713: LD_STRING D7c-Glad-1
8715: PPUSH
8716: CALL_OW 88
// if Lisa then
8720: LD_EXP 22
8724: IFFALSE 8738
// Say ( Lisa , D8-Lisa-1 ) ;
8726: LD_EXP 22
8730: PPUSH
8731: LD_STRING D8-Lisa-1
8733: PPUSH
8734: CALL_OW 88
// end ; end ; end_of_file end_of_file
8738: PPOPN 2
8740: END
// export globalGameSaveCounter ; every 0 0$1 do
8741: GO 8743
8743: DISABLE
// begin enable ;
8744: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
8745: LD_STRING updateTimer(
8747: PUSH
8748: LD_OWVAR 1
8752: STR
8753: PUSH
8754: LD_STRING );
8756: STR
8757: PPUSH
8758: CALL_OW 559
// end ;
8762: END
// every 0 0$1 do
8763: GO 8765
8765: DISABLE
// begin globalGameSaveCounter := 0 ;
8766: LD_ADDR_EXP 30
8770: PUSH
8771: LD_INT 0
8773: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
8774: LD_STRING setGameSaveCounter(0)
8776: PPUSH
8777: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
8781: LD_STRING initStreamRollete();
8783: PPUSH
8784: CALL_OW 559
// InitStreamMode ;
8788: CALL 10114 0 0
// DefineStreamItems ( false ) ;
8792: LD_INT 0
8794: PPUSH
8795: CALL 10578 0 1
// end ;
8799: END
// export function SOS_MapStart ( ) ; begin
8800: LD_INT 0
8802: PPUSH
// if streamModeActive then
8803: LD_EXP 31
8807: IFFALSE 8816
// DefineStreamItems ( true ) ;
8809: LD_INT 1
8811: PPUSH
8812: CALL 10578 0 1
// UpdateLuaVariables ( ) ;
8816: CALL 8833 0 0
// UpdateFactoryWaypoints ( ) ;
8820: CALL 23447 0 0
// UpdateWarehouseGatheringPoints ( ) ;
8824: CALL 23704 0 0
// end ;
8828: LD_VAR 0 1
8832: RET
// function UpdateLuaVariables ( ) ; begin
8833: LD_INT 0
8835: PPUSH
// if globalGameSaveCounter then
8836: LD_EXP 30
8840: IFFALSE 8874
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
8842: LD_ADDR_EXP 30
8846: PUSH
8847: LD_EXP 30
8851: PPUSH
8852: CALL 67514 0 1
8856: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
8857: LD_STRING setGameSaveCounter(
8859: PUSH
8860: LD_EXP 30
8864: STR
8865: PUSH
8866: LD_STRING )
8868: STR
8869: PPUSH
8870: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
8874: LD_STRING setGameDifficulty(
8876: PUSH
8877: LD_OWVAR 67
8881: STR
8882: PUSH
8883: LD_STRING )
8885: STR
8886: PPUSH
8887: CALL_OW 559
// end ;
8891: LD_VAR 0 1
8895: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
8896: LD_INT 0
8898: PPUSH
// if p2 = stream_mode then
8899: LD_VAR 0 2
8903: PUSH
8904: LD_INT 100
8906: EQUAL
8907: IFFALSE 9910
// begin if not StreamModeActive then
8909: LD_EXP 31
8913: NOT
8914: IFFALSE 8924
// StreamModeActive := true ;
8916: LD_ADDR_EXP 31
8920: PUSH
8921: LD_INT 1
8923: ST_TO_ADDR
// if p3 = 0 then
8924: LD_VAR 0 3
8928: PUSH
8929: LD_INT 0
8931: EQUAL
8932: IFFALSE 8938
// InitStreamMode ;
8934: CALL 10114 0 0
// if p3 = 1 then
8938: LD_VAR 0 3
8942: PUSH
8943: LD_INT 1
8945: EQUAL
8946: IFFALSE 8956
// sRocket := true ;
8948: LD_ADDR_EXP 36
8952: PUSH
8953: LD_INT 1
8955: ST_TO_ADDR
// if p3 = 2 then
8956: LD_VAR 0 3
8960: PUSH
8961: LD_INT 2
8963: EQUAL
8964: IFFALSE 8974
// sSpeed := true ;
8966: LD_ADDR_EXP 35
8970: PUSH
8971: LD_INT 1
8973: ST_TO_ADDR
// if p3 = 3 then
8974: LD_VAR 0 3
8978: PUSH
8979: LD_INT 3
8981: EQUAL
8982: IFFALSE 8992
// sEngine := true ;
8984: LD_ADDR_EXP 37
8988: PUSH
8989: LD_INT 1
8991: ST_TO_ADDR
// if p3 = 4 then
8992: LD_VAR 0 3
8996: PUSH
8997: LD_INT 4
8999: EQUAL
9000: IFFALSE 9010
// sSpec := true ;
9002: LD_ADDR_EXP 34
9006: PUSH
9007: LD_INT 1
9009: ST_TO_ADDR
// if p3 = 5 then
9010: LD_VAR 0 3
9014: PUSH
9015: LD_INT 5
9017: EQUAL
9018: IFFALSE 9028
// sLevel := true ;
9020: LD_ADDR_EXP 38
9024: PUSH
9025: LD_INT 1
9027: ST_TO_ADDR
// if p3 = 6 then
9028: LD_VAR 0 3
9032: PUSH
9033: LD_INT 6
9035: EQUAL
9036: IFFALSE 9046
// sArmoury := true ;
9038: LD_ADDR_EXP 39
9042: PUSH
9043: LD_INT 1
9045: ST_TO_ADDR
// if p3 = 7 then
9046: LD_VAR 0 3
9050: PUSH
9051: LD_INT 7
9053: EQUAL
9054: IFFALSE 9064
// sRadar := true ;
9056: LD_ADDR_EXP 40
9060: PUSH
9061: LD_INT 1
9063: ST_TO_ADDR
// if p3 = 8 then
9064: LD_VAR 0 3
9068: PUSH
9069: LD_INT 8
9071: EQUAL
9072: IFFALSE 9082
// sBunker := true ;
9074: LD_ADDR_EXP 41
9078: PUSH
9079: LD_INT 1
9081: ST_TO_ADDR
// if p3 = 9 then
9082: LD_VAR 0 3
9086: PUSH
9087: LD_INT 9
9089: EQUAL
9090: IFFALSE 9100
// sHack := true ;
9092: LD_ADDR_EXP 42
9096: PUSH
9097: LD_INT 1
9099: ST_TO_ADDR
// if p3 = 10 then
9100: LD_VAR 0 3
9104: PUSH
9105: LD_INT 10
9107: EQUAL
9108: IFFALSE 9118
// sFire := true ;
9110: LD_ADDR_EXP 43
9114: PUSH
9115: LD_INT 1
9117: ST_TO_ADDR
// if p3 = 11 then
9118: LD_VAR 0 3
9122: PUSH
9123: LD_INT 11
9125: EQUAL
9126: IFFALSE 9136
// sRefresh := true ;
9128: LD_ADDR_EXP 44
9132: PUSH
9133: LD_INT 1
9135: ST_TO_ADDR
// if p3 = 12 then
9136: LD_VAR 0 3
9140: PUSH
9141: LD_INT 12
9143: EQUAL
9144: IFFALSE 9154
// sExp := true ;
9146: LD_ADDR_EXP 45
9150: PUSH
9151: LD_INT 1
9153: ST_TO_ADDR
// if p3 = 13 then
9154: LD_VAR 0 3
9158: PUSH
9159: LD_INT 13
9161: EQUAL
9162: IFFALSE 9172
// sDepot := true ;
9164: LD_ADDR_EXP 46
9168: PUSH
9169: LD_INT 1
9171: ST_TO_ADDR
// if p3 = 14 then
9172: LD_VAR 0 3
9176: PUSH
9177: LD_INT 14
9179: EQUAL
9180: IFFALSE 9190
// sFlag := true ;
9182: LD_ADDR_EXP 47
9186: PUSH
9187: LD_INT 1
9189: ST_TO_ADDR
// if p3 = 15 then
9190: LD_VAR 0 3
9194: PUSH
9195: LD_INT 15
9197: EQUAL
9198: IFFALSE 9208
// sKamikadze := true ;
9200: LD_ADDR_EXP 55
9204: PUSH
9205: LD_INT 1
9207: ST_TO_ADDR
// if p3 = 16 then
9208: LD_VAR 0 3
9212: PUSH
9213: LD_INT 16
9215: EQUAL
9216: IFFALSE 9226
// sTroll := true ;
9218: LD_ADDR_EXP 56
9222: PUSH
9223: LD_INT 1
9225: ST_TO_ADDR
// if p3 = 17 then
9226: LD_VAR 0 3
9230: PUSH
9231: LD_INT 17
9233: EQUAL
9234: IFFALSE 9244
// sSlow := true ;
9236: LD_ADDR_EXP 57
9240: PUSH
9241: LD_INT 1
9243: ST_TO_ADDR
// if p3 = 18 then
9244: LD_VAR 0 3
9248: PUSH
9249: LD_INT 18
9251: EQUAL
9252: IFFALSE 9262
// sLack := true ;
9254: LD_ADDR_EXP 58
9258: PUSH
9259: LD_INT 1
9261: ST_TO_ADDR
// if p3 = 19 then
9262: LD_VAR 0 3
9266: PUSH
9267: LD_INT 19
9269: EQUAL
9270: IFFALSE 9280
// sTank := true ;
9272: LD_ADDR_EXP 60
9276: PUSH
9277: LD_INT 1
9279: ST_TO_ADDR
// if p3 = 20 then
9280: LD_VAR 0 3
9284: PUSH
9285: LD_INT 20
9287: EQUAL
9288: IFFALSE 9298
// sRemote := true ;
9290: LD_ADDR_EXP 61
9294: PUSH
9295: LD_INT 1
9297: ST_TO_ADDR
// if p3 = 21 then
9298: LD_VAR 0 3
9302: PUSH
9303: LD_INT 21
9305: EQUAL
9306: IFFALSE 9316
// sPowell := true ;
9308: LD_ADDR_EXP 62
9312: PUSH
9313: LD_INT 1
9315: ST_TO_ADDR
// if p3 = 22 then
9316: LD_VAR 0 3
9320: PUSH
9321: LD_INT 22
9323: EQUAL
9324: IFFALSE 9334
// sTeleport := true ;
9326: LD_ADDR_EXP 65
9330: PUSH
9331: LD_INT 1
9333: ST_TO_ADDR
// if p3 = 23 then
9334: LD_VAR 0 3
9338: PUSH
9339: LD_INT 23
9341: EQUAL
9342: IFFALSE 9352
// sOilTower := true ;
9344: LD_ADDR_EXP 67
9348: PUSH
9349: LD_INT 1
9351: ST_TO_ADDR
// if p3 = 24 then
9352: LD_VAR 0 3
9356: PUSH
9357: LD_INT 24
9359: EQUAL
9360: IFFALSE 9370
// sShovel := true ;
9362: LD_ADDR_EXP 68
9366: PUSH
9367: LD_INT 1
9369: ST_TO_ADDR
// if p3 = 25 then
9370: LD_VAR 0 3
9374: PUSH
9375: LD_INT 25
9377: EQUAL
9378: IFFALSE 9388
// sSheik := true ;
9380: LD_ADDR_EXP 69
9384: PUSH
9385: LD_INT 1
9387: ST_TO_ADDR
// if p3 = 26 then
9388: LD_VAR 0 3
9392: PUSH
9393: LD_INT 26
9395: EQUAL
9396: IFFALSE 9406
// sEarthquake := true ;
9398: LD_ADDR_EXP 71
9402: PUSH
9403: LD_INT 1
9405: ST_TO_ADDR
// if p3 = 27 then
9406: LD_VAR 0 3
9410: PUSH
9411: LD_INT 27
9413: EQUAL
9414: IFFALSE 9424
// sAI := true ;
9416: LD_ADDR_EXP 72
9420: PUSH
9421: LD_INT 1
9423: ST_TO_ADDR
// if p3 = 28 then
9424: LD_VAR 0 3
9428: PUSH
9429: LD_INT 28
9431: EQUAL
9432: IFFALSE 9442
// sCargo := true ;
9434: LD_ADDR_EXP 75
9438: PUSH
9439: LD_INT 1
9441: ST_TO_ADDR
// if p3 = 29 then
9442: LD_VAR 0 3
9446: PUSH
9447: LD_INT 29
9449: EQUAL
9450: IFFALSE 9460
// sDLaser := true ;
9452: LD_ADDR_EXP 76
9456: PUSH
9457: LD_INT 1
9459: ST_TO_ADDR
// if p3 = 30 then
9460: LD_VAR 0 3
9464: PUSH
9465: LD_INT 30
9467: EQUAL
9468: IFFALSE 9478
// sExchange := true ;
9470: LD_ADDR_EXP 77
9474: PUSH
9475: LD_INT 1
9477: ST_TO_ADDR
// if p3 = 31 then
9478: LD_VAR 0 3
9482: PUSH
9483: LD_INT 31
9485: EQUAL
9486: IFFALSE 9496
// sFac := true ;
9488: LD_ADDR_EXP 78
9492: PUSH
9493: LD_INT 1
9495: ST_TO_ADDR
// if p3 = 32 then
9496: LD_VAR 0 3
9500: PUSH
9501: LD_INT 32
9503: EQUAL
9504: IFFALSE 9514
// sPower := true ;
9506: LD_ADDR_EXP 79
9510: PUSH
9511: LD_INT 1
9513: ST_TO_ADDR
// if p3 = 33 then
9514: LD_VAR 0 3
9518: PUSH
9519: LD_INT 33
9521: EQUAL
9522: IFFALSE 9532
// sRandom := true ;
9524: LD_ADDR_EXP 80
9528: PUSH
9529: LD_INT 1
9531: ST_TO_ADDR
// if p3 = 34 then
9532: LD_VAR 0 3
9536: PUSH
9537: LD_INT 34
9539: EQUAL
9540: IFFALSE 9550
// sShield := true ;
9542: LD_ADDR_EXP 81
9546: PUSH
9547: LD_INT 1
9549: ST_TO_ADDR
// if p3 = 35 then
9550: LD_VAR 0 3
9554: PUSH
9555: LD_INT 35
9557: EQUAL
9558: IFFALSE 9568
// sTime := true ;
9560: LD_ADDR_EXP 82
9564: PUSH
9565: LD_INT 1
9567: ST_TO_ADDR
// if p3 = 36 then
9568: LD_VAR 0 3
9572: PUSH
9573: LD_INT 36
9575: EQUAL
9576: IFFALSE 9586
// sTools := true ;
9578: LD_ADDR_EXP 83
9582: PUSH
9583: LD_INT 1
9585: ST_TO_ADDR
// if p3 = 101 then
9586: LD_VAR 0 3
9590: PUSH
9591: LD_INT 101
9593: EQUAL
9594: IFFALSE 9604
// sSold := true ;
9596: LD_ADDR_EXP 48
9600: PUSH
9601: LD_INT 1
9603: ST_TO_ADDR
// if p3 = 102 then
9604: LD_VAR 0 3
9608: PUSH
9609: LD_INT 102
9611: EQUAL
9612: IFFALSE 9622
// sDiff := true ;
9614: LD_ADDR_EXP 49
9618: PUSH
9619: LD_INT 1
9621: ST_TO_ADDR
// if p3 = 103 then
9622: LD_VAR 0 3
9626: PUSH
9627: LD_INT 103
9629: EQUAL
9630: IFFALSE 9640
// sFog := true ;
9632: LD_ADDR_EXP 52
9636: PUSH
9637: LD_INT 1
9639: ST_TO_ADDR
// if p3 = 104 then
9640: LD_VAR 0 3
9644: PUSH
9645: LD_INT 104
9647: EQUAL
9648: IFFALSE 9658
// sReset := true ;
9650: LD_ADDR_EXP 53
9654: PUSH
9655: LD_INT 1
9657: ST_TO_ADDR
// if p3 = 105 then
9658: LD_VAR 0 3
9662: PUSH
9663: LD_INT 105
9665: EQUAL
9666: IFFALSE 9676
// sSun := true ;
9668: LD_ADDR_EXP 54
9672: PUSH
9673: LD_INT 1
9675: ST_TO_ADDR
// if p3 = 106 then
9676: LD_VAR 0 3
9680: PUSH
9681: LD_INT 106
9683: EQUAL
9684: IFFALSE 9694
// sTiger := true ;
9686: LD_ADDR_EXP 50
9690: PUSH
9691: LD_INT 1
9693: ST_TO_ADDR
// if p3 = 107 then
9694: LD_VAR 0 3
9698: PUSH
9699: LD_INT 107
9701: EQUAL
9702: IFFALSE 9712
// sBomb := true ;
9704: LD_ADDR_EXP 51
9708: PUSH
9709: LD_INT 1
9711: ST_TO_ADDR
// if p3 = 108 then
9712: LD_VAR 0 3
9716: PUSH
9717: LD_INT 108
9719: EQUAL
9720: IFFALSE 9730
// sWound := true ;
9722: LD_ADDR_EXP 59
9726: PUSH
9727: LD_INT 1
9729: ST_TO_ADDR
// if p3 = 109 then
9730: LD_VAR 0 3
9734: PUSH
9735: LD_INT 109
9737: EQUAL
9738: IFFALSE 9748
// sBetray := true ;
9740: LD_ADDR_EXP 63
9744: PUSH
9745: LD_INT 1
9747: ST_TO_ADDR
// if p3 = 110 then
9748: LD_VAR 0 3
9752: PUSH
9753: LD_INT 110
9755: EQUAL
9756: IFFALSE 9766
// sContamin := true ;
9758: LD_ADDR_EXP 64
9762: PUSH
9763: LD_INT 1
9765: ST_TO_ADDR
// if p3 = 111 then
9766: LD_VAR 0 3
9770: PUSH
9771: LD_INT 111
9773: EQUAL
9774: IFFALSE 9784
// sOil := true ;
9776: LD_ADDR_EXP 66
9780: PUSH
9781: LD_INT 1
9783: ST_TO_ADDR
// if p3 = 112 then
9784: LD_VAR 0 3
9788: PUSH
9789: LD_INT 112
9791: EQUAL
9792: IFFALSE 9802
// sStu := true ;
9794: LD_ADDR_EXP 70
9798: PUSH
9799: LD_INT 1
9801: ST_TO_ADDR
// if p3 = 113 then
9802: LD_VAR 0 3
9806: PUSH
9807: LD_INT 113
9809: EQUAL
9810: IFFALSE 9820
// sBazooka := true ;
9812: LD_ADDR_EXP 73
9816: PUSH
9817: LD_INT 1
9819: ST_TO_ADDR
// if p3 = 114 then
9820: LD_VAR 0 3
9824: PUSH
9825: LD_INT 114
9827: EQUAL
9828: IFFALSE 9838
// sMortar := true ;
9830: LD_ADDR_EXP 74
9834: PUSH
9835: LD_INT 1
9837: ST_TO_ADDR
// if p3 = 115 then
9838: LD_VAR 0 3
9842: PUSH
9843: LD_INT 115
9845: EQUAL
9846: IFFALSE 9856
// sRanger := true ;
9848: LD_ADDR_EXP 84
9852: PUSH
9853: LD_INT 1
9855: ST_TO_ADDR
// if p3 = 116 then
9856: LD_VAR 0 3
9860: PUSH
9861: LD_INT 116
9863: EQUAL
9864: IFFALSE 9874
// sComputer := true ;
9866: LD_ADDR_EXP 85
9870: PUSH
9871: LD_INT 1
9873: ST_TO_ADDR
// if p3 = 117 then
9874: LD_VAR 0 3
9878: PUSH
9879: LD_INT 117
9881: EQUAL
9882: IFFALSE 9892
// s30 := true ;
9884: LD_ADDR_EXP 86
9888: PUSH
9889: LD_INT 1
9891: ST_TO_ADDR
// if p3 = 118 then
9892: LD_VAR 0 3
9896: PUSH
9897: LD_INT 118
9899: EQUAL
9900: IFFALSE 9910
// s60 := true ;
9902: LD_ADDR_EXP 87
9906: PUSH
9907: LD_INT 1
9909: ST_TO_ADDR
// end ; if p2 = hack_mode then
9910: LD_VAR 0 2
9914: PUSH
9915: LD_INT 101
9917: EQUAL
9918: IFFALSE 10046
// begin case p3 of 1 :
9920: LD_VAR 0 3
9924: PUSH
9925: LD_INT 1
9927: DOUBLE
9928: EQUAL
9929: IFTRUE 9933
9931: GO 9940
9933: POP
// hHackUnlimitedResources ; 2 :
9934: CALL 22193 0 0
9938: GO 10046
9940: LD_INT 2
9942: DOUBLE
9943: EQUAL
9944: IFTRUE 9948
9946: GO 9955
9948: POP
// hHackSetLevel10 ; 3 :
9949: CALL 22326 0 0
9953: GO 10046
9955: LD_INT 3
9957: DOUBLE
9958: EQUAL
9959: IFTRUE 9963
9961: GO 9970
9963: POP
// hHackSetLevel10YourUnits ; 4 :
9964: CALL 22411 0 0
9968: GO 10046
9970: LD_INT 4
9972: DOUBLE
9973: EQUAL
9974: IFTRUE 9978
9976: GO 9985
9978: POP
// hHackInvincible ; 5 :
9979: CALL 22859 0 0
9983: GO 10046
9985: LD_INT 5
9987: DOUBLE
9988: EQUAL
9989: IFTRUE 9993
9991: GO 10000
9993: POP
// hHackInvisible ; 6 :
9994: CALL 22970 0 0
9998: GO 10046
10000: LD_INT 6
10002: DOUBLE
10003: EQUAL
10004: IFTRUE 10008
10006: GO 10015
10008: POP
// hHackChangeYourSide ; 7 :
10009: CALL 23027 0 0
10013: GO 10046
10015: LD_INT 7
10017: DOUBLE
10018: EQUAL
10019: IFTRUE 10023
10021: GO 10030
10023: POP
// hHackChangeUnitSide ; 8 :
10024: CALL 23069 0 0
10028: GO 10046
10030: LD_INT 8
10032: DOUBLE
10033: EQUAL
10034: IFTRUE 10038
10036: GO 10045
10038: POP
// hHackFog ; end ;
10039: CALL 23170 0 0
10043: GO 10046
10045: POP
// end ; if p2 = game_save_mode then
10046: LD_VAR 0 2
10050: PUSH
10051: LD_INT 102
10053: EQUAL
10054: IFFALSE 10109
// begin if p3 = 1 then
10056: LD_VAR 0 3
10060: PUSH
10061: LD_INT 1
10063: EQUAL
10064: IFFALSE 10076
// globalGameSaveCounter := p4 ;
10066: LD_ADDR_EXP 30
10070: PUSH
10071: LD_VAR 0 4
10075: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
10076: LD_VAR 0 3
10080: PUSH
10081: LD_INT 2
10083: EQUAL
10084: PUSH
10085: LD_EXP 30
10089: AND
10090: IFFALSE 10109
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
10092: LD_STRING setGameSaveCounter(
10094: PUSH
10095: LD_EXP 30
10099: STR
10100: PUSH
10101: LD_STRING )
10103: STR
10104: PPUSH
10105: CALL_OW 559
// end ; end ;
10109: LD_VAR 0 7
10113: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
10114: LD_INT 0
10116: PPUSH
// streamModeActive := false ;
10117: LD_ADDR_EXP 31
10121: PUSH
10122: LD_INT 0
10124: ST_TO_ADDR
// normalCounter := 36 ;
10125: LD_ADDR_EXP 32
10129: PUSH
10130: LD_INT 36
10132: ST_TO_ADDR
// hardcoreCounter := 18 ;
10133: LD_ADDR_EXP 33
10137: PUSH
10138: LD_INT 18
10140: ST_TO_ADDR
// sRocket := false ;
10141: LD_ADDR_EXP 36
10145: PUSH
10146: LD_INT 0
10148: ST_TO_ADDR
// sSpeed := false ;
10149: LD_ADDR_EXP 35
10153: PUSH
10154: LD_INT 0
10156: ST_TO_ADDR
// sEngine := false ;
10157: LD_ADDR_EXP 37
10161: PUSH
10162: LD_INT 0
10164: ST_TO_ADDR
// sSpec := false ;
10165: LD_ADDR_EXP 34
10169: PUSH
10170: LD_INT 0
10172: ST_TO_ADDR
// sLevel := false ;
10173: LD_ADDR_EXP 38
10177: PUSH
10178: LD_INT 0
10180: ST_TO_ADDR
// sArmoury := false ;
10181: LD_ADDR_EXP 39
10185: PUSH
10186: LD_INT 0
10188: ST_TO_ADDR
// sRadar := false ;
10189: LD_ADDR_EXP 40
10193: PUSH
10194: LD_INT 0
10196: ST_TO_ADDR
// sBunker := false ;
10197: LD_ADDR_EXP 41
10201: PUSH
10202: LD_INT 0
10204: ST_TO_ADDR
// sHack := false ;
10205: LD_ADDR_EXP 42
10209: PUSH
10210: LD_INT 0
10212: ST_TO_ADDR
// sFire := false ;
10213: LD_ADDR_EXP 43
10217: PUSH
10218: LD_INT 0
10220: ST_TO_ADDR
// sRefresh := false ;
10221: LD_ADDR_EXP 44
10225: PUSH
10226: LD_INT 0
10228: ST_TO_ADDR
// sExp := false ;
10229: LD_ADDR_EXP 45
10233: PUSH
10234: LD_INT 0
10236: ST_TO_ADDR
// sDepot := false ;
10237: LD_ADDR_EXP 46
10241: PUSH
10242: LD_INT 0
10244: ST_TO_ADDR
// sFlag := false ;
10245: LD_ADDR_EXP 47
10249: PUSH
10250: LD_INT 0
10252: ST_TO_ADDR
// sKamikadze := false ;
10253: LD_ADDR_EXP 55
10257: PUSH
10258: LD_INT 0
10260: ST_TO_ADDR
// sTroll := false ;
10261: LD_ADDR_EXP 56
10265: PUSH
10266: LD_INT 0
10268: ST_TO_ADDR
// sSlow := false ;
10269: LD_ADDR_EXP 57
10273: PUSH
10274: LD_INT 0
10276: ST_TO_ADDR
// sLack := false ;
10277: LD_ADDR_EXP 58
10281: PUSH
10282: LD_INT 0
10284: ST_TO_ADDR
// sTank := false ;
10285: LD_ADDR_EXP 60
10289: PUSH
10290: LD_INT 0
10292: ST_TO_ADDR
// sRemote := false ;
10293: LD_ADDR_EXP 61
10297: PUSH
10298: LD_INT 0
10300: ST_TO_ADDR
// sPowell := false ;
10301: LD_ADDR_EXP 62
10305: PUSH
10306: LD_INT 0
10308: ST_TO_ADDR
// sTeleport := false ;
10309: LD_ADDR_EXP 65
10313: PUSH
10314: LD_INT 0
10316: ST_TO_ADDR
// sOilTower := false ;
10317: LD_ADDR_EXP 67
10321: PUSH
10322: LD_INT 0
10324: ST_TO_ADDR
// sShovel := false ;
10325: LD_ADDR_EXP 68
10329: PUSH
10330: LD_INT 0
10332: ST_TO_ADDR
// sSheik := false ;
10333: LD_ADDR_EXP 69
10337: PUSH
10338: LD_INT 0
10340: ST_TO_ADDR
// sEarthquake := false ;
10341: LD_ADDR_EXP 71
10345: PUSH
10346: LD_INT 0
10348: ST_TO_ADDR
// sAI := false ;
10349: LD_ADDR_EXP 72
10353: PUSH
10354: LD_INT 0
10356: ST_TO_ADDR
// sCargo := false ;
10357: LD_ADDR_EXP 75
10361: PUSH
10362: LD_INT 0
10364: ST_TO_ADDR
// sDLaser := false ;
10365: LD_ADDR_EXP 76
10369: PUSH
10370: LD_INT 0
10372: ST_TO_ADDR
// sExchange := false ;
10373: LD_ADDR_EXP 77
10377: PUSH
10378: LD_INT 0
10380: ST_TO_ADDR
// sFac := false ;
10381: LD_ADDR_EXP 78
10385: PUSH
10386: LD_INT 0
10388: ST_TO_ADDR
// sPower := false ;
10389: LD_ADDR_EXP 79
10393: PUSH
10394: LD_INT 0
10396: ST_TO_ADDR
// sRandom := false ;
10397: LD_ADDR_EXP 80
10401: PUSH
10402: LD_INT 0
10404: ST_TO_ADDR
// sShield := false ;
10405: LD_ADDR_EXP 81
10409: PUSH
10410: LD_INT 0
10412: ST_TO_ADDR
// sTime := false ;
10413: LD_ADDR_EXP 82
10417: PUSH
10418: LD_INT 0
10420: ST_TO_ADDR
// sTools := false ;
10421: LD_ADDR_EXP 83
10425: PUSH
10426: LD_INT 0
10428: ST_TO_ADDR
// sSold := false ;
10429: LD_ADDR_EXP 48
10433: PUSH
10434: LD_INT 0
10436: ST_TO_ADDR
// sDiff := false ;
10437: LD_ADDR_EXP 49
10441: PUSH
10442: LD_INT 0
10444: ST_TO_ADDR
// sFog := false ;
10445: LD_ADDR_EXP 52
10449: PUSH
10450: LD_INT 0
10452: ST_TO_ADDR
// sReset := false ;
10453: LD_ADDR_EXP 53
10457: PUSH
10458: LD_INT 0
10460: ST_TO_ADDR
// sSun := false ;
10461: LD_ADDR_EXP 54
10465: PUSH
10466: LD_INT 0
10468: ST_TO_ADDR
// sTiger := false ;
10469: LD_ADDR_EXP 50
10473: PUSH
10474: LD_INT 0
10476: ST_TO_ADDR
// sBomb := false ;
10477: LD_ADDR_EXP 51
10481: PUSH
10482: LD_INT 0
10484: ST_TO_ADDR
// sWound := false ;
10485: LD_ADDR_EXP 59
10489: PUSH
10490: LD_INT 0
10492: ST_TO_ADDR
// sBetray := false ;
10493: LD_ADDR_EXP 63
10497: PUSH
10498: LD_INT 0
10500: ST_TO_ADDR
// sContamin := false ;
10501: LD_ADDR_EXP 64
10505: PUSH
10506: LD_INT 0
10508: ST_TO_ADDR
// sOil := false ;
10509: LD_ADDR_EXP 66
10513: PUSH
10514: LD_INT 0
10516: ST_TO_ADDR
// sStu := false ;
10517: LD_ADDR_EXP 70
10521: PUSH
10522: LD_INT 0
10524: ST_TO_ADDR
// sBazooka := false ;
10525: LD_ADDR_EXP 73
10529: PUSH
10530: LD_INT 0
10532: ST_TO_ADDR
// sMortar := false ;
10533: LD_ADDR_EXP 74
10537: PUSH
10538: LD_INT 0
10540: ST_TO_ADDR
// sRanger := false ;
10541: LD_ADDR_EXP 84
10545: PUSH
10546: LD_INT 0
10548: ST_TO_ADDR
// sComputer := false ;
10549: LD_ADDR_EXP 85
10553: PUSH
10554: LD_INT 0
10556: ST_TO_ADDR
// s30 := false ;
10557: LD_ADDR_EXP 86
10561: PUSH
10562: LD_INT 0
10564: ST_TO_ADDR
// s60 := false ;
10565: LD_ADDR_EXP 87
10569: PUSH
10570: LD_INT 0
10572: ST_TO_ADDR
// end ;
10573: LD_VAR 0 1
10577: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
10578: LD_INT 0
10580: PPUSH
10581: PPUSH
10582: PPUSH
10583: PPUSH
10584: PPUSH
10585: PPUSH
10586: PPUSH
// result := [ ] ;
10587: LD_ADDR_VAR 0 2
10591: PUSH
10592: EMPTY
10593: ST_TO_ADDR
// if campaign_id = 1 then
10594: LD_OWVAR 69
10598: PUSH
10599: LD_INT 1
10601: EQUAL
10602: IFFALSE 13768
// begin case mission_number of 1 :
10604: LD_OWVAR 70
10608: PUSH
10609: LD_INT 1
10611: DOUBLE
10612: EQUAL
10613: IFTRUE 10617
10615: GO 10693
10617: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
10618: LD_ADDR_VAR 0 2
10622: PUSH
10623: LD_INT 2
10625: PUSH
10626: LD_INT 4
10628: PUSH
10629: LD_INT 11
10631: PUSH
10632: LD_INT 12
10634: PUSH
10635: LD_INT 15
10637: PUSH
10638: LD_INT 16
10640: PUSH
10641: LD_INT 22
10643: PUSH
10644: LD_INT 23
10646: PUSH
10647: LD_INT 26
10649: PUSH
10650: EMPTY
10651: LIST
10652: LIST
10653: LIST
10654: LIST
10655: LIST
10656: LIST
10657: LIST
10658: LIST
10659: LIST
10660: PUSH
10661: LD_INT 101
10663: PUSH
10664: LD_INT 102
10666: PUSH
10667: LD_INT 106
10669: PUSH
10670: LD_INT 116
10672: PUSH
10673: LD_INT 117
10675: PUSH
10676: LD_INT 118
10678: PUSH
10679: EMPTY
10680: LIST
10681: LIST
10682: LIST
10683: LIST
10684: LIST
10685: LIST
10686: PUSH
10687: EMPTY
10688: LIST
10689: LIST
10690: ST_TO_ADDR
10691: GO 13766
10693: LD_INT 2
10695: DOUBLE
10696: EQUAL
10697: IFTRUE 10701
10699: GO 10785
10701: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
10702: LD_ADDR_VAR 0 2
10706: PUSH
10707: LD_INT 2
10709: PUSH
10710: LD_INT 4
10712: PUSH
10713: LD_INT 11
10715: PUSH
10716: LD_INT 12
10718: PUSH
10719: LD_INT 15
10721: PUSH
10722: LD_INT 16
10724: PUSH
10725: LD_INT 22
10727: PUSH
10728: LD_INT 23
10730: PUSH
10731: LD_INT 26
10733: PUSH
10734: EMPTY
10735: LIST
10736: LIST
10737: LIST
10738: LIST
10739: LIST
10740: LIST
10741: LIST
10742: LIST
10743: LIST
10744: PUSH
10745: LD_INT 101
10747: PUSH
10748: LD_INT 102
10750: PUSH
10751: LD_INT 105
10753: PUSH
10754: LD_INT 106
10756: PUSH
10757: LD_INT 108
10759: PUSH
10760: LD_INT 116
10762: PUSH
10763: LD_INT 117
10765: PUSH
10766: LD_INT 118
10768: PUSH
10769: EMPTY
10770: LIST
10771: LIST
10772: LIST
10773: LIST
10774: LIST
10775: LIST
10776: LIST
10777: LIST
10778: PUSH
10779: EMPTY
10780: LIST
10781: LIST
10782: ST_TO_ADDR
10783: GO 13766
10785: LD_INT 3
10787: DOUBLE
10788: EQUAL
10789: IFTRUE 10793
10791: GO 10881
10793: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
10794: LD_ADDR_VAR 0 2
10798: PUSH
10799: LD_INT 2
10801: PUSH
10802: LD_INT 4
10804: PUSH
10805: LD_INT 5
10807: PUSH
10808: LD_INT 11
10810: PUSH
10811: LD_INT 12
10813: PUSH
10814: LD_INT 15
10816: PUSH
10817: LD_INT 16
10819: PUSH
10820: LD_INT 22
10822: PUSH
10823: LD_INT 26
10825: PUSH
10826: LD_INT 36
10828: PUSH
10829: EMPTY
10830: LIST
10831: LIST
10832: LIST
10833: LIST
10834: LIST
10835: LIST
10836: LIST
10837: LIST
10838: LIST
10839: LIST
10840: PUSH
10841: LD_INT 101
10843: PUSH
10844: LD_INT 102
10846: PUSH
10847: LD_INT 105
10849: PUSH
10850: LD_INT 106
10852: PUSH
10853: LD_INT 108
10855: PUSH
10856: LD_INT 116
10858: PUSH
10859: LD_INT 117
10861: PUSH
10862: LD_INT 118
10864: PUSH
10865: EMPTY
10866: LIST
10867: LIST
10868: LIST
10869: LIST
10870: LIST
10871: LIST
10872: LIST
10873: LIST
10874: PUSH
10875: EMPTY
10876: LIST
10877: LIST
10878: ST_TO_ADDR
10879: GO 13766
10881: LD_INT 4
10883: DOUBLE
10884: EQUAL
10885: IFTRUE 10889
10887: GO 10985
10889: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
10890: LD_ADDR_VAR 0 2
10894: PUSH
10895: LD_INT 2
10897: PUSH
10898: LD_INT 4
10900: PUSH
10901: LD_INT 5
10903: PUSH
10904: LD_INT 8
10906: PUSH
10907: LD_INT 11
10909: PUSH
10910: LD_INT 12
10912: PUSH
10913: LD_INT 15
10915: PUSH
10916: LD_INT 16
10918: PUSH
10919: LD_INT 22
10921: PUSH
10922: LD_INT 23
10924: PUSH
10925: LD_INT 26
10927: PUSH
10928: LD_INT 36
10930: PUSH
10931: EMPTY
10932: LIST
10933: LIST
10934: LIST
10935: LIST
10936: LIST
10937: LIST
10938: LIST
10939: LIST
10940: LIST
10941: LIST
10942: LIST
10943: LIST
10944: PUSH
10945: LD_INT 101
10947: PUSH
10948: LD_INT 102
10950: PUSH
10951: LD_INT 105
10953: PUSH
10954: LD_INT 106
10956: PUSH
10957: LD_INT 108
10959: PUSH
10960: LD_INT 116
10962: PUSH
10963: LD_INT 117
10965: PUSH
10966: LD_INT 118
10968: PUSH
10969: EMPTY
10970: LIST
10971: LIST
10972: LIST
10973: LIST
10974: LIST
10975: LIST
10976: LIST
10977: LIST
10978: PUSH
10979: EMPTY
10980: LIST
10981: LIST
10982: ST_TO_ADDR
10983: GO 13766
10985: LD_INT 5
10987: DOUBLE
10988: EQUAL
10989: IFTRUE 10993
10991: GO 11105
10993: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
10994: LD_ADDR_VAR 0 2
10998: PUSH
10999: LD_INT 2
11001: PUSH
11002: LD_INT 4
11004: PUSH
11005: LD_INT 5
11007: PUSH
11008: LD_INT 6
11010: PUSH
11011: LD_INT 8
11013: PUSH
11014: LD_INT 11
11016: PUSH
11017: LD_INT 12
11019: PUSH
11020: LD_INT 15
11022: PUSH
11023: LD_INT 16
11025: PUSH
11026: LD_INT 22
11028: PUSH
11029: LD_INT 23
11031: PUSH
11032: LD_INT 25
11034: PUSH
11035: LD_INT 26
11037: PUSH
11038: LD_INT 36
11040: PUSH
11041: EMPTY
11042: LIST
11043: LIST
11044: LIST
11045: LIST
11046: LIST
11047: LIST
11048: LIST
11049: LIST
11050: LIST
11051: LIST
11052: LIST
11053: LIST
11054: LIST
11055: LIST
11056: PUSH
11057: LD_INT 101
11059: PUSH
11060: LD_INT 102
11062: PUSH
11063: LD_INT 105
11065: PUSH
11066: LD_INT 106
11068: PUSH
11069: LD_INT 108
11071: PUSH
11072: LD_INT 109
11074: PUSH
11075: LD_INT 112
11077: PUSH
11078: LD_INT 116
11080: PUSH
11081: LD_INT 117
11083: PUSH
11084: LD_INT 118
11086: PUSH
11087: EMPTY
11088: LIST
11089: LIST
11090: LIST
11091: LIST
11092: LIST
11093: LIST
11094: LIST
11095: LIST
11096: LIST
11097: LIST
11098: PUSH
11099: EMPTY
11100: LIST
11101: LIST
11102: ST_TO_ADDR
11103: GO 13766
11105: LD_INT 6
11107: DOUBLE
11108: EQUAL
11109: IFTRUE 11113
11111: GO 11245
11113: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
11114: LD_ADDR_VAR 0 2
11118: PUSH
11119: LD_INT 2
11121: PUSH
11122: LD_INT 4
11124: PUSH
11125: LD_INT 5
11127: PUSH
11128: LD_INT 6
11130: PUSH
11131: LD_INT 8
11133: PUSH
11134: LD_INT 11
11136: PUSH
11137: LD_INT 12
11139: PUSH
11140: LD_INT 15
11142: PUSH
11143: LD_INT 16
11145: PUSH
11146: LD_INT 20
11148: PUSH
11149: LD_INT 21
11151: PUSH
11152: LD_INT 22
11154: PUSH
11155: LD_INT 23
11157: PUSH
11158: LD_INT 25
11160: PUSH
11161: LD_INT 26
11163: PUSH
11164: LD_INT 30
11166: PUSH
11167: LD_INT 31
11169: PUSH
11170: LD_INT 32
11172: PUSH
11173: LD_INT 36
11175: PUSH
11176: EMPTY
11177: LIST
11178: LIST
11179: LIST
11180: LIST
11181: LIST
11182: LIST
11183: LIST
11184: LIST
11185: LIST
11186: LIST
11187: LIST
11188: LIST
11189: LIST
11190: LIST
11191: LIST
11192: LIST
11193: LIST
11194: LIST
11195: LIST
11196: PUSH
11197: LD_INT 101
11199: PUSH
11200: LD_INT 102
11202: PUSH
11203: LD_INT 105
11205: PUSH
11206: LD_INT 106
11208: PUSH
11209: LD_INT 108
11211: PUSH
11212: LD_INT 109
11214: PUSH
11215: LD_INT 112
11217: PUSH
11218: LD_INT 116
11220: PUSH
11221: LD_INT 117
11223: PUSH
11224: LD_INT 118
11226: PUSH
11227: EMPTY
11228: LIST
11229: LIST
11230: LIST
11231: LIST
11232: LIST
11233: LIST
11234: LIST
11235: LIST
11236: LIST
11237: LIST
11238: PUSH
11239: EMPTY
11240: LIST
11241: LIST
11242: ST_TO_ADDR
11243: GO 13766
11245: LD_INT 7
11247: DOUBLE
11248: EQUAL
11249: IFTRUE 11253
11251: GO 11365
11253: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
11254: LD_ADDR_VAR 0 2
11258: PUSH
11259: LD_INT 2
11261: PUSH
11262: LD_INT 4
11264: PUSH
11265: LD_INT 5
11267: PUSH
11268: LD_INT 7
11270: PUSH
11271: LD_INT 11
11273: PUSH
11274: LD_INT 12
11276: PUSH
11277: LD_INT 15
11279: PUSH
11280: LD_INT 16
11282: PUSH
11283: LD_INT 20
11285: PUSH
11286: LD_INT 21
11288: PUSH
11289: LD_INT 22
11291: PUSH
11292: LD_INT 23
11294: PUSH
11295: LD_INT 25
11297: PUSH
11298: LD_INT 26
11300: PUSH
11301: EMPTY
11302: LIST
11303: LIST
11304: LIST
11305: LIST
11306: LIST
11307: LIST
11308: LIST
11309: LIST
11310: LIST
11311: LIST
11312: LIST
11313: LIST
11314: LIST
11315: LIST
11316: PUSH
11317: LD_INT 101
11319: PUSH
11320: LD_INT 102
11322: PUSH
11323: LD_INT 103
11325: PUSH
11326: LD_INT 105
11328: PUSH
11329: LD_INT 106
11331: PUSH
11332: LD_INT 108
11334: PUSH
11335: LD_INT 112
11337: PUSH
11338: LD_INT 116
11340: PUSH
11341: LD_INT 117
11343: PUSH
11344: LD_INT 118
11346: PUSH
11347: EMPTY
11348: LIST
11349: LIST
11350: LIST
11351: LIST
11352: LIST
11353: LIST
11354: LIST
11355: LIST
11356: LIST
11357: LIST
11358: PUSH
11359: EMPTY
11360: LIST
11361: LIST
11362: ST_TO_ADDR
11363: GO 13766
11365: LD_INT 8
11367: DOUBLE
11368: EQUAL
11369: IFTRUE 11373
11371: GO 11513
11373: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
11374: LD_ADDR_VAR 0 2
11378: PUSH
11379: LD_INT 2
11381: PUSH
11382: LD_INT 4
11384: PUSH
11385: LD_INT 5
11387: PUSH
11388: LD_INT 6
11390: PUSH
11391: LD_INT 7
11393: PUSH
11394: LD_INT 8
11396: PUSH
11397: LD_INT 11
11399: PUSH
11400: LD_INT 12
11402: PUSH
11403: LD_INT 15
11405: PUSH
11406: LD_INT 16
11408: PUSH
11409: LD_INT 20
11411: PUSH
11412: LD_INT 21
11414: PUSH
11415: LD_INT 22
11417: PUSH
11418: LD_INT 23
11420: PUSH
11421: LD_INT 25
11423: PUSH
11424: LD_INT 26
11426: PUSH
11427: LD_INT 30
11429: PUSH
11430: LD_INT 31
11432: PUSH
11433: LD_INT 32
11435: PUSH
11436: LD_INT 36
11438: PUSH
11439: EMPTY
11440: LIST
11441: LIST
11442: LIST
11443: LIST
11444: LIST
11445: LIST
11446: LIST
11447: LIST
11448: LIST
11449: LIST
11450: LIST
11451: LIST
11452: LIST
11453: LIST
11454: LIST
11455: LIST
11456: LIST
11457: LIST
11458: LIST
11459: LIST
11460: PUSH
11461: LD_INT 101
11463: PUSH
11464: LD_INT 102
11466: PUSH
11467: LD_INT 103
11469: PUSH
11470: LD_INT 105
11472: PUSH
11473: LD_INT 106
11475: PUSH
11476: LD_INT 108
11478: PUSH
11479: LD_INT 109
11481: PUSH
11482: LD_INT 112
11484: PUSH
11485: LD_INT 116
11487: PUSH
11488: LD_INT 117
11490: PUSH
11491: LD_INT 118
11493: PUSH
11494: EMPTY
11495: LIST
11496: LIST
11497: LIST
11498: LIST
11499: LIST
11500: LIST
11501: LIST
11502: LIST
11503: LIST
11504: LIST
11505: LIST
11506: PUSH
11507: EMPTY
11508: LIST
11509: LIST
11510: ST_TO_ADDR
11511: GO 13766
11513: LD_INT 9
11515: DOUBLE
11516: EQUAL
11517: IFTRUE 11521
11519: GO 11669
11521: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
11522: LD_ADDR_VAR 0 2
11526: PUSH
11527: LD_INT 2
11529: PUSH
11530: LD_INT 4
11532: PUSH
11533: LD_INT 5
11535: PUSH
11536: LD_INT 6
11538: PUSH
11539: LD_INT 7
11541: PUSH
11542: LD_INT 8
11544: PUSH
11545: LD_INT 11
11547: PUSH
11548: LD_INT 12
11550: PUSH
11551: LD_INT 15
11553: PUSH
11554: LD_INT 16
11556: PUSH
11557: LD_INT 20
11559: PUSH
11560: LD_INT 21
11562: PUSH
11563: LD_INT 22
11565: PUSH
11566: LD_INT 23
11568: PUSH
11569: LD_INT 25
11571: PUSH
11572: LD_INT 26
11574: PUSH
11575: LD_INT 28
11577: PUSH
11578: LD_INT 30
11580: PUSH
11581: LD_INT 31
11583: PUSH
11584: LD_INT 32
11586: PUSH
11587: LD_INT 36
11589: PUSH
11590: EMPTY
11591: LIST
11592: LIST
11593: LIST
11594: LIST
11595: LIST
11596: LIST
11597: LIST
11598: LIST
11599: LIST
11600: LIST
11601: LIST
11602: LIST
11603: LIST
11604: LIST
11605: LIST
11606: LIST
11607: LIST
11608: LIST
11609: LIST
11610: LIST
11611: LIST
11612: PUSH
11613: LD_INT 101
11615: PUSH
11616: LD_INT 102
11618: PUSH
11619: LD_INT 103
11621: PUSH
11622: LD_INT 105
11624: PUSH
11625: LD_INT 106
11627: PUSH
11628: LD_INT 108
11630: PUSH
11631: LD_INT 109
11633: PUSH
11634: LD_INT 112
11636: PUSH
11637: LD_INT 114
11639: PUSH
11640: LD_INT 116
11642: PUSH
11643: LD_INT 117
11645: PUSH
11646: LD_INT 118
11648: PUSH
11649: EMPTY
11650: LIST
11651: LIST
11652: LIST
11653: LIST
11654: LIST
11655: LIST
11656: LIST
11657: LIST
11658: LIST
11659: LIST
11660: LIST
11661: LIST
11662: PUSH
11663: EMPTY
11664: LIST
11665: LIST
11666: ST_TO_ADDR
11667: GO 13766
11669: LD_INT 10
11671: DOUBLE
11672: EQUAL
11673: IFTRUE 11677
11675: GO 11873
11677: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
11678: LD_ADDR_VAR 0 2
11682: PUSH
11683: LD_INT 2
11685: PUSH
11686: LD_INT 4
11688: PUSH
11689: LD_INT 5
11691: PUSH
11692: LD_INT 6
11694: PUSH
11695: LD_INT 7
11697: PUSH
11698: LD_INT 8
11700: PUSH
11701: LD_INT 9
11703: PUSH
11704: LD_INT 10
11706: PUSH
11707: LD_INT 11
11709: PUSH
11710: LD_INT 12
11712: PUSH
11713: LD_INT 13
11715: PUSH
11716: LD_INT 14
11718: PUSH
11719: LD_INT 15
11721: PUSH
11722: LD_INT 16
11724: PUSH
11725: LD_INT 17
11727: PUSH
11728: LD_INT 18
11730: PUSH
11731: LD_INT 19
11733: PUSH
11734: LD_INT 20
11736: PUSH
11737: LD_INT 21
11739: PUSH
11740: LD_INT 22
11742: PUSH
11743: LD_INT 23
11745: PUSH
11746: LD_INT 24
11748: PUSH
11749: LD_INT 25
11751: PUSH
11752: LD_INT 26
11754: PUSH
11755: LD_INT 28
11757: PUSH
11758: LD_INT 30
11760: PUSH
11761: LD_INT 31
11763: PUSH
11764: LD_INT 32
11766: PUSH
11767: LD_INT 36
11769: PUSH
11770: EMPTY
11771: LIST
11772: LIST
11773: LIST
11774: LIST
11775: LIST
11776: LIST
11777: LIST
11778: LIST
11779: LIST
11780: LIST
11781: LIST
11782: LIST
11783: LIST
11784: LIST
11785: LIST
11786: LIST
11787: LIST
11788: LIST
11789: LIST
11790: LIST
11791: LIST
11792: LIST
11793: LIST
11794: LIST
11795: LIST
11796: LIST
11797: LIST
11798: LIST
11799: LIST
11800: PUSH
11801: LD_INT 101
11803: PUSH
11804: LD_INT 102
11806: PUSH
11807: LD_INT 103
11809: PUSH
11810: LD_INT 104
11812: PUSH
11813: LD_INT 105
11815: PUSH
11816: LD_INT 106
11818: PUSH
11819: LD_INT 107
11821: PUSH
11822: LD_INT 108
11824: PUSH
11825: LD_INT 109
11827: PUSH
11828: LD_INT 110
11830: PUSH
11831: LD_INT 111
11833: PUSH
11834: LD_INT 112
11836: PUSH
11837: LD_INT 114
11839: PUSH
11840: LD_INT 116
11842: PUSH
11843: LD_INT 117
11845: PUSH
11846: LD_INT 118
11848: PUSH
11849: EMPTY
11850: LIST
11851: LIST
11852: LIST
11853: LIST
11854: LIST
11855: LIST
11856: LIST
11857: LIST
11858: LIST
11859: LIST
11860: LIST
11861: LIST
11862: LIST
11863: LIST
11864: LIST
11865: LIST
11866: PUSH
11867: EMPTY
11868: LIST
11869: LIST
11870: ST_TO_ADDR
11871: GO 13766
11873: LD_INT 11
11875: DOUBLE
11876: EQUAL
11877: IFTRUE 11881
11879: GO 12085
11881: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
11882: LD_ADDR_VAR 0 2
11886: PUSH
11887: LD_INT 2
11889: PUSH
11890: LD_INT 3
11892: PUSH
11893: LD_INT 4
11895: PUSH
11896: LD_INT 5
11898: PUSH
11899: LD_INT 6
11901: PUSH
11902: LD_INT 7
11904: PUSH
11905: LD_INT 8
11907: PUSH
11908: LD_INT 9
11910: PUSH
11911: LD_INT 10
11913: PUSH
11914: LD_INT 11
11916: PUSH
11917: LD_INT 12
11919: PUSH
11920: LD_INT 13
11922: PUSH
11923: LD_INT 14
11925: PUSH
11926: LD_INT 15
11928: PUSH
11929: LD_INT 16
11931: PUSH
11932: LD_INT 17
11934: PUSH
11935: LD_INT 18
11937: PUSH
11938: LD_INT 19
11940: PUSH
11941: LD_INT 20
11943: PUSH
11944: LD_INT 21
11946: PUSH
11947: LD_INT 22
11949: PUSH
11950: LD_INT 23
11952: PUSH
11953: LD_INT 24
11955: PUSH
11956: LD_INT 25
11958: PUSH
11959: LD_INT 26
11961: PUSH
11962: LD_INT 28
11964: PUSH
11965: LD_INT 30
11967: PUSH
11968: LD_INT 31
11970: PUSH
11971: LD_INT 32
11973: PUSH
11974: LD_INT 34
11976: PUSH
11977: LD_INT 36
11979: PUSH
11980: EMPTY
11981: LIST
11982: LIST
11983: LIST
11984: LIST
11985: LIST
11986: LIST
11987: LIST
11988: LIST
11989: LIST
11990: LIST
11991: LIST
11992: LIST
11993: LIST
11994: LIST
11995: LIST
11996: LIST
11997: LIST
11998: LIST
11999: LIST
12000: LIST
12001: LIST
12002: LIST
12003: LIST
12004: LIST
12005: LIST
12006: LIST
12007: LIST
12008: LIST
12009: LIST
12010: LIST
12011: LIST
12012: PUSH
12013: LD_INT 101
12015: PUSH
12016: LD_INT 102
12018: PUSH
12019: LD_INT 103
12021: PUSH
12022: LD_INT 104
12024: PUSH
12025: LD_INT 105
12027: PUSH
12028: LD_INT 106
12030: PUSH
12031: LD_INT 107
12033: PUSH
12034: LD_INT 108
12036: PUSH
12037: LD_INT 109
12039: PUSH
12040: LD_INT 110
12042: PUSH
12043: LD_INT 111
12045: PUSH
12046: LD_INT 112
12048: PUSH
12049: LD_INT 114
12051: PUSH
12052: LD_INT 116
12054: PUSH
12055: LD_INT 117
12057: PUSH
12058: LD_INT 118
12060: PUSH
12061: EMPTY
12062: LIST
12063: LIST
12064: LIST
12065: LIST
12066: LIST
12067: LIST
12068: LIST
12069: LIST
12070: LIST
12071: LIST
12072: LIST
12073: LIST
12074: LIST
12075: LIST
12076: LIST
12077: LIST
12078: PUSH
12079: EMPTY
12080: LIST
12081: LIST
12082: ST_TO_ADDR
12083: GO 13766
12085: LD_INT 12
12087: DOUBLE
12088: EQUAL
12089: IFTRUE 12093
12091: GO 12313
12093: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
12094: LD_ADDR_VAR 0 2
12098: PUSH
12099: LD_INT 1
12101: PUSH
12102: LD_INT 2
12104: PUSH
12105: LD_INT 3
12107: PUSH
12108: LD_INT 4
12110: PUSH
12111: LD_INT 5
12113: PUSH
12114: LD_INT 6
12116: PUSH
12117: LD_INT 7
12119: PUSH
12120: LD_INT 8
12122: PUSH
12123: LD_INT 9
12125: PUSH
12126: LD_INT 10
12128: PUSH
12129: LD_INT 11
12131: PUSH
12132: LD_INT 12
12134: PUSH
12135: LD_INT 13
12137: PUSH
12138: LD_INT 14
12140: PUSH
12141: LD_INT 15
12143: PUSH
12144: LD_INT 16
12146: PUSH
12147: LD_INT 17
12149: PUSH
12150: LD_INT 18
12152: PUSH
12153: LD_INT 19
12155: PUSH
12156: LD_INT 20
12158: PUSH
12159: LD_INT 21
12161: PUSH
12162: LD_INT 22
12164: PUSH
12165: LD_INT 23
12167: PUSH
12168: LD_INT 24
12170: PUSH
12171: LD_INT 25
12173: PUSH
12174: LD_INT 26
12176: PUSH
12177: LD_INT 27
12179: PUSH
12180: LD_INT 28
12182: PUSH
12183: LD_INT 30
12185: PUSH
12186: LD_INT 31
12188: PUSH
12189: LD_INT 32
12191: PUSH
12192: LD_INT 33
12194: PUSH
12195: LD_INT 34
12197: PUSH
12198: LD_INT 36
12200: PUSH
12201: EMPTY
12202: LIST
12203: LIST
12204: LIST
12205: LIST
12206: LIST
12207: LIST
12208: LIST
12209: LIST
12210: LIST
12211: LIST
12212: LIST
12213: LIST
12214: LIST
12215: LIST
12216: LIST
12217: LIST
12218: LIST
12219: LIST
12220: LIST
12221: LIST
12222: LIST
12223: LIST
12224: LIST
12225: LIST
12226: LIST
12227: LIST
12228: LIST
12229: LIST
12230: LIST
12231: LIST
12232: LIST
12233: LIST
12234: LIST
12235: LIST
12236: PUSH
12237: LD_INT 101
12239: PUSH
12240: LD_INT 102
12242: PUSH
12243: LD_INT 103
12245: PUSH
12246: LD_INT 104
12248: PUSH
12249: LD_INT 105
12251: PUSH
12252: LD_INT 106
12254: PUSH
12255: LD_INT 107
12257: PUSH
12258: LD_INT 108
12260: PUSH
12261: LD_INT 109
12263: PUSH
12264: LD_INT 110
12266: PUSH
12267: LD_INT 111
12269: PUSH
12270: LD_INT 112
12272: PUSH
12273: LD_INT 113
12275: PUSH
12276: LD_INT 114
12278: PUSH
12279: LD_INT 116
12281: PUSH
12282: LD_INT 117
12284: PUSH
12285: LD_INT 118
12287: PUSH
12288: EMPTY
12289: LIST
12290: LIST
12291: LIST
12292: LIST
12293: LIST
12294: LIST
12295: LIST
12296: LIST
12297: LIST
12298: LIST
12299: LIST
12300: LIST
12301: LIST
12302: LIST
12303: LIST
12304: LIST
12305: LIST
12306: PUSH
12307: EMPTY
12308: LIST
12309: LIST
12310: ST_TO_ADDR
12311: GO 13766
12313: LD_INT 13
12315: DOUBLE
12316: EQUAL
12317: IFTRUE 12321
12319: GO 12529
12321: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
12322: LD_ADDR_VAR 0 2
12326: PUSH
12327: LD_INT 1
12329: PUSH
12330: LD_INT 2
12332: PUSH
12333: LD_INT 3
12335: PUSH
12336: LD_INT 4
12338: PUSH
12339: LD_INT 5
12341: PUSH
12342: LD_INT 8
12344: PUSH
12345: LD_INT 9
12347: PUSH
12348: LD_INT 10
12350: PUSH
12351: LD_INT 11
12353: PUSH
12354: LD_INT 12
12356: PUSH
12357: LD_INT 14
12359: PUSH
12360: LD_INT 15
12362: PUSH
12363: LD_INT 16
12365: PUSH
12366: LD_INT 17
12368: PUSH
12369: LD_INT 18
12371: PUSH
12372: LD_INT 19
12374: PUSH
12375: LD_INT 20
12377: PUSH
12378: LD_INT 21
12380: PUSH
12381: LD_INT 22
12383: PUSH
12384: LD_INT 23
12386: PUSH
12387: LD_INT 24
12389: PUSH
12390: LD_INT 25
12392: PUSH
12393: LD_INT 26
12395: PUSH
12396: LD_INT 27
12398: PUSH
12399: LD_INT 28
12401: PUSH
12402: LD_INT 30
12404: PUSH
12405: LD_INT 31
12407: PUSH
12408: LD_INT 32
12410: PUSH
12411: LD_INT 33
12413: PUSH
12414: LD_INT 34
12416: PUSH
12417: LD_INT 36
12419: PUSH
12420: EMPTY
12421: LIST
12422: LIST
12423: LIST
12424: LIST
12425: LIST
12426: LIST
12427: LIST
12428: LIST
12429: LIST
12430: LIST
12431: LIST
12432: LIST
12433: LIST
12434: LIST
12435: LIST
12436: LIST
12437: LIST
12438: LIST
12439: LIST
12440: LIST
12441: LIST
12442: LIST
12443: LIST
12444: LIST
12445: LIST
12446: LIST
12447: LIST
12448: LIST
12449: LIST
12450: LIST
12451: LIST
12452: PUSH
12453: LD_INT 101
12455: PUSH
12456: LD_INT 102
12458: PUSH
12459: LD_INT 103
12461: PUSH
12462: LD_INT 104
12464: PUSH
12465: LD_INT 105
12467: PUSH
12468: LD_INT 106
12470: PUSH
12471: LD_INT 107
12473: PUSH
12474: LD_INT 108
12476: PUSH
12477: LD_INT 109
12479: PUSH
12480: LD_INT 110
12482: PUSH
12483: LD_INT 111
12485: PUSH
12486: LD_INT 112
12488: PUSH
12489: LD_INT 113
12491: PUSH
12492: LD_INT 114
12494: PUSH
12495: LD_INT 116
12497: PUSH
12498: LD_INT 117
12500: PUSH
12501: LD_INT 118
12503: PUSH
12504: EMPTY
12505: LIST
12506: LIST
12507: LIST
12508: LIST
12509: LIST
12510: LIST
12511: LIST
12512: LIST
12513: LIST
12514: LIST
12515: LIST
12516: LIST
12517: LIST
12518: LIST
12519: LIST
12520: LIST
12521: LIST
12522: PUSH
12523: EMPTY
12524: LIST
12525: LIST
12526: ST_TO_ADDR
12527: GO 13766
12529: LD_INT 14
12531: DOUBLE
12532: EQUAL
12533: IFTRUE 12537
12535: GO 12761
12537: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
12538: LD_ADDR_VAR 0 2
12542: PUSH
12543: LD_INT 1
12545: PUSH
12546: LD_INT 2
12548: PUSH
12549: LD_INT 3
12551: PUSH
12552: LD_INT 4
12554: PUSH
12555: LD_INT 5
12557: PUSH
12558: LD_INT 6
12560: PUSH
12561: LD_INT 7
12563: PUSH
12564: LD_INT 8
12566: PUSH
12567: LD_INT 9
12569: PUSH
12570: LD_INT 10
12572: PUSH
12573: LD_INT 11
12575: PUSH
12576: LD_INT 12
12578: PUSH
12579: LD_INT 13
12581: PUSH
12582: LD_INT 14
12584: PUSH
12585: LD_INT 15
12587: PUSH
12588: LD_INT 16
12590: PUSH
12591: LD_INT 17
12593: PUSH
12594: LD_INT 18
12596: PUSH
12597: LD_INT 19
12599: PUSH
12600: LD_INT 20
12602: PUSH
12603: LD_INT 21
12605: PUSH
12606: LD_INT 22
12608: PUSH
12609: LD_INT 23
12611: PUSH
12612: LD_INT 24
12614: PUSH
12615: LD_INT 25
12617: PUSH
12618: LD_INT 26
12620: PUSH
12621: LD_INT 27
12623: PUSH
12624: LD_INT 28
12626: PUSH
12627: LD_INT 29
12629: PUSH
12630: LD_INT 30
12632: PUSH
12633: LD_INT 31
12635: PUSH
12636: LD_INT 32
12638: PUSH
12639: LD_INT 33
12641: PUSH
12642: LD_INT 34
12644: PUSH
12645: LD_INT 36
12647: PUSH
12648: EMPTY
12649: LIST
12650: LIST
12651: LIST
12652: LIST
12653: LIST
12654: LIST
12655: LIST
12656: LIST
12657: LIST
12658: LIST
12659: LIST
12660: LIST
12661: LIST
12662: LIST
12663: LIST
12664: LIST
12665: LIST
12666: LIST
12667: LIST
12668: LIST
12669: LIST
12670: LIST
12671: LIST
12672: LIST
12673: LIST
12674: LIST
12675: LIST
12676: LIST
12677: LIST
12678: LIST
12679: LIST
12680: LIST
12681: LIST
12682: LIST
12683: LIST
12684: PUSH
12685: LD_INT 101
12687: PUSH
12688: LD_INT 102
12690: PUSH
12691: LD_INT 103
12693: PUSH
12694: LD_INT 104
12696: PUSH
12697: LD_INT 105
12699: PUSH
12700: LD_INT 106
12702: PUSH
12703: LD_INT 107
12705: PUSH
12706: LD_INT 108
12708: PUSH
12709: LD_INT 109
12711: PUSH
12712: LD_INT 110
12714: PUSH
12715: LD_INT 111
12717: PUSH
12718: LD_INT 112
12720: PUSH
12721: LD_INT 113
12723: PUSH
12724: LD_INT 114
12726: PUSH
12727: LD_INT 116
12729: PUSH
12730: LD_INT 117
12732: PUSH
12733: LD_INT 118
12735: PUSH
12736: EMPTY
12737: LIST
12738: LIST
12739: LIST
12740: LIST
12741: LIST
12742: LIST
12743: LIST
12744: LIST
12745: LIST
12746: LIST
12747: LIST
12748: LIST
12749: LIST
12750: LIST
12751: LIST
12752: LIST
12753: LIST
12754: PUSH
12755: EMPTY
12756: LIST
12757: LIST
12758: ST_TO_ADDR
12759: GO 13766
12761: LD_INT 15
12763: DOUBLE
12764: EQUAL
12765: IFTRUE 12769
12767: GO 12993
12769: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
12770: LD_ADDR_VAR 0 2
12774: PUSH
12775: LD_INT 1
12777: PUSH
12778: LD_INT 2
12780: PUSH
12781: LD_INT 3
12783: PUSH
12784: LD_INT 4
12786: PUSH
12787: LD_INT 5
12789: PUSH
12790: LD_INT 6
12792: PUSH
12793: LD_INT 7
12795: PUSH
12796: LD_INT 8
12798: PUSH
12799: LD_INT 9
12801: PUSH
12802: LD_INT 10
12804: PUSH
12805: LD_INT 11
12807: PUSH
12808: LD_INT 12
12810: PUSH
12811: LD_INT 13
12813: PUSH
12814: LD_INT 14
12816: PUSH
12817: LD_INT 15
12819: PUSH
12820: LD_INT 16
12822: PUSH
12823: LD_INT 17
12825: PUSH
12826: LD_INT 18
12828: PUSH
12829: LD_INT 19
12831: PUSH
12832: LD_INT 20
12834: PUSH
12835: LD_INT 21
12837: PUSH
12838: LD_INT 22
12840: PUSH
12841: LD_INT 23
12843: PUSH
12844: LD_INT 24
12846: PUSH
12847: LD_INT 25
12849: PUSH
12850: LD_INT 26
12852: PUSH
12853: LD_INT 27
12855: PUSH
12856: LD_INT 28
12858: PUSH
12859: LD_INT 29
12861: PUSH
12862: LD_INT 30
12864: PUSH
12865: LD_INT 31
12867: PUSH
12868: LD_INT 32
12870: PUSH
12871: LD_INT 33
12873: PUSH
12874: LD_INT 34
12876: PUSH
12877: LD_INT 36
12879: PUSH
12880: EMPTY
12881: LIST
12882: LIST
12883: LIST
12884: LIST
12885: LIST
12886: LIST
12887: LIST
12888: LIST
12889: LIST
12890: LIST
12891: LIST
12892: LIST
12893: LIST
12894: LIST
12895: LIST
12896: LIST
12897: LIST
12898: LIST
12899: LIST
12900: LIST
12901: LIST
12902: LIST
12903: LIST
12904: LIST
12905: LIST
12906: LIST
12907: LIST
12908: LIST
12909: LIST
12910: LIST
12911: LIST
12912: LIST
12913: LIST
12914: LIST
12915: LIST
12916: PUSH
12917: LD_INT 101
12919: PUSH
12920: LD_INT 102
12922: PUSH
12923: LD_INT 103
12925: PUSH
12926: LD_INT 104
12928: PUSH
12929: LD_INT 105
12931: PUSH
12932: LD_INT 106
12934: PUSH
12935: LD_INT 107
12937: PUSH
12938: LD_INT 108
12940: PUSH
12941: LD_INT 109
12943: PUSH
12944: LD_INT 110
12946: PUSH
12947: LD_INT 111
12949: PUSH
12950: LD_INT 112
12952: PUSH
12953: LD_INT 113
12955: PUSH
12956: LD_INT 114
12958: PUSH
12959: LD_INT 116
12961: PUSH
12962: LD_INT 117
12964: PUSH
12965: LD_INT 118
12967: PUSH
12968: EMPTY
12969: LIST
12970: LIST
12971: LIST
12972: LIST
12973: LIST
12974: LIST
12975: LIST
12976: LIST
12977: LIST
12978: LIST
12979: LIST
12980: LIST
12981: LIST
12982: LIST
12983: LIST
12984: LIST
12985: LIST
12986: PUSH
12987: EMPTY
12988: LIST
12989: LIST
12990: ST_TO_ADDR
12991: GO 13766
12993: LD_INT 16
12995: DOUBLE
12996: EQUAL
12997: IFTRUE 13001
12999: GO 13137
13001: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
13002: LD_ADDR_VAR 0 2
13006: PUSH
13007: LD_INT 2
13009: PUSH
13010: LD_INT 4
13012: PUSH
13013: LD_INT 5
13015: PUSH
13016: LD_INT 7
13018: PUSH
13019: LD_INT 11
13021: PUSH
13022: LD_INT 12
13024: PUSH
13025: LD_INT 15
13027: PUSH
13028: LD_INT 16
13030: PUSH
13031: LD_INT 20
13033: PUSH
13034: LD_INT 21
13036: PUSH
13037: LD_INT 22
13039: PUSH
13040: LD_INT 23
13042: PUSH
13043: LD_INT 25
13045: PUSH
13046: LD_INT 26
13048: PUSH
13049: LD_INT 30
13051: PUSH
13052: LD_INT 31
13054: PUSH
13055: LD_INT 32
13057: PUSH
13058: LD_INT 33
13060: PUSH
13061: LD_INT 34
13063: PUSH
13064: EMPTY
13065: LIST
13066: LIST
13067: LIST
13068: LIST
13069: LIST
13070: LIST
13071: LIST
13072: LIST
13073: LIST
13074: LIST
13075: LIST
13076: LIST
13077: LIST
13078: LIST
13079: LIST
13080: LIST
13081: LIST
13082: LIST
13083: LIST
13084: PUSH
13085: LD_INT 101
13087: PUSH
13088: LD_INT 102
13090: PUSH
13091: LD_INT 103
13093: PUSH
13094: LD_INT 106
13096: PUSH
13097: LD_INT 108
13099: PUSH
13100: LD_INT 112
13102: PUSH
13103: LD_INT 113
13105: PUSH
13106: LD_INT 114
13108: PUSH
13109: LD_INT 116
13111: PUSH
13112: LD_INT 117
13114: PUSH
13115: LD_INT 118
13117: PUSH
13118: EMPTY
13119: LIST
13120: LIST
13121: LIST
13122: LIST
13123: LIST
13124: LIST
13125: LIST
13126: LIST
13127: LIST
13128: LIST
13129: LIST
13130: PUSH
13131: EMPTY
13132: LIST
13133: LIST
13134: ST_TO_ADDR
13135: GO 13766
13137: LD_INT 17
13139: DOUBLE
13140: EQUAL
13141: IFTRUE 13145
13143: GO 13369
13145: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
13146: LD_ADDR_VAR 0 2
13150: PUSH
13151: LD_INT 1
13153: PUSH
13154: LD_INT 2
13156: PUSH
13157: LD_INT 3
13159: PUSH
13160: LD_INT 4
13162: PUSH
13163: LD_INT 5
13165: PUSH
13166: LD_INT 6
13168: PUSH
13169: LD_INT 7
13171: PUSH
13172: LD_INT 8
13174: PUSH
13175: LD_INT 9
13177: PUSH
13178: LD_INT 10
13180: PUSH
13181: LD_INT 11
13183: PUSH
13184: LD_INT 12
13186: PUSH
13187: LD_INT 13
13189: PUSH
13190: LD_INT 14
13192: PUSH
13193: LD_INT 15
13195: PUSH
13196: LD_INT 16
13198: PUSH
13199: LD_INT 17
13201: PUSH
13202: LD_INT 18
13204: PUSH
13205: LD_INT 19
13207: PUSH
13208: LD_INT 20
13210: PUSH
13211: LD_INT 21
13213: PUSH
13214: LD_INT 22
13216: PUSH
13217: LD_INT 23
13219: PUSH
13220: LD_INT 24
13222: PUSH
13223: LD_INT 25
13225: PUSH
13226: LD_INT 26
13228: PUSH
13229: LD_INT 27
13231: PUSH
13232: LD_INT 28
13234: PUSH
13235: LD_INT 29
13237: PUSH
13238: LD_INT 30
13240: PUSH
13241: LD_INT 31
13243: PUSH
13244: LD_INT 32
13246: PUSH
13247: LD_INT 33
13249: PUSH
13250: LD_INT 34
13252: PUSH
13253: LD_INT 36
13255: PUSH
13256: EMPTY
13257: LIST
13258: LIST
13259: LIST
13260: LIST
13261: LIST
13262: LIST
13263: LIST
13264: LIST
13265: LIST
13266: LIST
13267: LIST
13268: LIST
13269: LIST
13270: LIST
13271: LIST
13272: LIST
13273: LIST
13274: LIST
13275: LIST
13276: LIST
13277: LIST
13278: LIST
13279: LIST
13280: LIST
13281: LIST
13282: LIST
13283: LIST
13284: LIST
13285: LIST
13286: LIST
13287: LIST
13288: LIST
13289: LIST
13290: LIST
13291: LIST
13292: PUSH
13293: LD_INT 101
13295: PUSH
13296: LD_INT 102
13298: PUSH
13299: LD_INT 103
13301: PUSH
13302: LD_INT 104
13304: PUSH
13305: LD_INT 105
13307: PUSH
13308: LD_INT 106
13310: PUSH
13311: LD_INT 107
13313: PUSH
13314: LD_INT 108
13316: PUSH
13317: LD_INT 109
13319: PUSH
13320: LD_INT 110
13322: PUSH
13323: LD_INT 111
13325: PUSH
13326: LD_INT 112
13328: PUSH
13329: LD_INT 113
13331: PUSH
13332: LD_INT 114
13334: PUSH
13335: LD_INT 116
13337: PUSH
13338: LD_INT 117
13340: PUSH
13341: LD_INT 118
13343: PUSH
13344: EMPTY
13345: LIST
13346: LIST
13347: LIST
13348: LIST
13349: LIST
13350: LIST
13351: LIST
13352: LIST
13353: LIST
13354: LIST
13355: LIST
13356: LIST
13357: LIST
13358: LIST
13359: LIST
13360: LIST
13361: LIST
13362: PUSH
13363: EMPTY
13364: LIST
13365: LIST
13366: ST_TO_ADDR
13367: GO 13766
13369: LD_INT 18
13371: DOUBLE
13372: EQUAL
13373: IFTRUE 13377
13375: GO 13525
13377: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
13378: LD_ADDR_VAR 0 2
13382: PUSH
13383: LD_INT 2
13385: PUSH
13386: LD_INT 4
13388: PUSH
13389: LD_INT 5
13391: PUSH
13392: LD_INT 7
13394: PUSH
13395: LD_INT 11
13397: PUSH
13398: LD_INT 12
13400: PUSH
13401: LD_INT 15
13403: PUSH
13404: LD_INT 16
13406: PUSH
13407: LD_INT 20
13409: PUSH
13410: LD_INT 21
13412: PUSH
13413: LD_INT 22
13415: PUSH
13416: LD_INT 23
13418: PUSH
13419: LD_INT 25
13421: PUSH
13422: LD_INT 26
13424: PUSH
13425: LD_INT 30
13427: PUSH
13428: LD_INT 31
13430: PUSH
13431: LD_INT 32
13433: PUSH
13434: LD_INT 33
13436: PUSH
13437: LD_INT 34
13439: PUSH
13440: LD_INT 35
13442: PUSH
13443: LD_INT 36
13445: PUSH
13446: EMPTY
13447: LIST
13448: LIST
13449: LIST
13450: LIST
13451: LIST
13452: LIST
13453: LIST
13454: LIST
13455: LIST
13456: LIST
13457: LIST
13458: LIST
13459: LIST
13460: LIST
13461: LIST
13462: LIST
13463: LIST
13464: LIST
13465: LIST
13466: LIST
13467: LIST
13468: PUSH
13469: LD_INT 101
13471: PUSH
13472: LD_INT 102
13474: PUSH
13475: LD_INT 103
13477: PUSH
13478: LD_INT 106
13480: PUSH
13481: LD_INT 108
13483: PUSH
13484: LD_INT 112
13486: PUSH
13487: LD_INT 113
13489: PUSH
13490: LD_INT 114
13492: PUSH
13493: LD_INT 115
13495: PUSH
13496: LD_INT 116
13498: PUSH
13499: LD_INT 117
13501: PUSH
13502: LD_INT 118
13504: PUSH
13505: EMPTY
13506: LIST
13507: LIST
13508: LIST
13509: LIST
13510: LIST
13511: LIST
13512: LIST
13513: LIST
13514: LIST
13515: LIST
13516: LIST
13517: LIST
13518: PUSH
13519: EMPTY
13520: LIST
13521: LIST
13522: ST_TO_ADDR
13523: GO 13766
13525: LD_INT 19
13527: DOUBLE
13528: EQUAL
13529: IFTRUE 13533
13531: GO 13765
13533: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
13534: LD_ADDR_VAR 0 2
13538: PUSH
13539: LD_INT 1
13541: PUSH
13542: LD_INT 2
13544: PUSH
13545: LD_INT 3
13547: PUSH
13548: LD_INT 4
13550: PUSH
13551: LD_INT 5
13553: PUSH
13554: LD_INT 6
13556: PUSH
13557: LD_INT 7
13559: PUSH
13560: LD_INT 8
13562: PUSH
13563: LD_INT 9
13565: PUSH
13566: LD_INT 10
13568: PUSH
13569: LD_INT 11
13571: PUSH
13572: LD_INT 12
13574: PUSH
13575: LD_INT 13
13577: PUSH
13578: LD_INT 14
13580: PUSH
13581: LD_INT 15
13583: PUSH
13584: LD_INT 16
13586: PUSH
13587: LD_INT 17
13589: PUSH
13590: LD_INT 18
13592: PUSH
13593: LD_INT 19
13595: PUSH
13596: LD_INT 20
13598: PUSH
13599: LD_INT 21
13601: PUSH
13602: LD_INT 22
13604: PUSH
13605: LD_INT 23
13607: PUSH
13608: LD_INT 24
13610: PUSH
13611: LD_INT 25
13613: PUSH
13614: LD_INT 26
13616: PUSH
13617: LD_INT 27
13619: PUSH
13620: LD_INT 28
13622: PUSH
13623: LD_INT 29
13625: PUSH
13626: LD_INT 30
13628: PUSH
13629: LD_INT 31
13631: PUSH
13632: LD_INT 32
13634: PUSH
13635: LD_INT 33
13637: PUSH
13638: LD_INT 34
13640: PUSH
13641: LD_INT 35
13643: PUSH
13644: LD_INT 36
13646: PUSH
13647: EMPTY
13648: LIST
13649: LIST
13650: LIST
13651: LIST
13652: LIST
13653: LIST
13654: LIST
13655: LIST
13656: LIST
13657: LIST
13658: LIST
13659: LIST
13660: LIST
13661: LIST
13662: LIST
13663: LIST
13664: LIST
13665: LIST
13666: LIST
13667: LIST
13668: LIST
13669: LIST
13670: LIST
13671: LIST
13672: LIST
13673: LIST
13674: LIST
13675: LIST
13676: LIST
13677: LIST
13678: LIST
13679: LIST
13680: LIST
13681: LIST
13682: LIST
13683: LIST
13684: PUSH
13685: LD_INT 101
13687: PUSH
13688: LD_INT 102
13690: PUSH
13691: LD_INT 103
13693: PUSH
13694: LD_INT 104
13696: PUSH
13697: LD_INT 105
13699: PUSH
13700: LD_INT 106
13702: PUSH
13703: LD_INT 107
13705: PUSH
13706: LD_INT 108
13708: PUSH
13709: LD_INT 109
13711: PUSH
13712: LD_INT 110
13714: PUSH
13715: LD_INT 111
13717: PUSH
13718: LD_INT 112
13720: PUSH
13721: LD_INT 113
13723: PUSH
13724: LD_INT 114
13726: PUSH
13727: LD_INT 115
13729: PUSH
13730: LD_INT 116
13732: PUSH
13733: LD_INT 117
13735: PUSH
13736: LD_INT 118
13738: PUSH
13739: EMPTY
13740: LIST
13741: LIST
13742: LIST
13743: LIST
13744: LIST
13745: LIST
13746: LIST
13747: LIST
13748: LIST
13749: LIST
13750: LIST
13751: LIST
13752: LIST
13753: LIST
13754: LIST
13755: LIST
13756: LIST
13757: LIST
13758: PUSH
13759: EMPTY
13760: LIST
13761: LIST
13762: ST_TO_ADDR
13763: GO 13766
13765: POP
// end else
13766: GO 13997
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
13768: LD_ADDR_VAR 0 2
13772: PUSH
13773: LD_INT 1
13775: PUSH
13776: LD_INT 2
13778: PUSH
13779: LD_INT 3
13781: PUSH
13782: LD_INT 4
13784: PUSH
13785: LD_INT 5
13787: PUSH
13788: LD_INT 6
13790: PUSH
13791: LD_INT 7
13793: PUSH
13794: LD_INT 8
13796: PUSH
13797: LD_INT 9
13799: PUSH
13800: LD_INT 10
13802: PUSH
13803: LD_INT 11
13805: PUSH
13806: LD_INT 12
13808: PUSH
13809: LD_INT 13
13811: PUSH
13812: LD_INT 14
13814: PUSH
13815: LD_INT 15
13817: PUSH
13818: LD_INT 16
13820: PUSH
13821: LD_INT 17
13823: PUSH
13824: LD_INT 18
13826: PUSH
13827: LD_INT 19
13829: PUSH
13830: LD_INT 20
13832: PUSH
13833: LD_INT 21
13835: PUSH
13836: LD_INT 22
13838: PUSH
13839: LD_INT 23
13841: PUSH
13842: LD_INT 24
13844: PUSH
13845: LD_INT 25
13847: PUSH
13848: LD_INT 26
13850: PUSH
13851: LD_INT 27
13853: PUSH
13854: LD_INT 28
13856: PUSH
13857: LD_INT 29
13859: PUSH
13860: LD_INT 30
13862: PUSH
13863: LD_INT 31
13865: PUSH
13866: LD_INT 32
13868: PUSH
13869: LD_INT 33
13871: PUSH
13872: LD_INT 34
13874: PUSH
13875: LD_INT 35
13877: PUSH
13878: LD_INT 36
13880: PUSH
13881: EMPTY
13882: LIST
13883: LIST
13884: LIST
13885: LIST
13886: LIST
13887: LIST
13888: LIST
13889: LIST
13890: LIST
13891: LIST
13892: LIST
13893: LIST
13894: LIST
13895: LIST
13896: LIST
13897: LIST
13898: LIST
13899: LIST
13900: LIST
13901: LIST
13902: LIST
13903: LIST
13904: LIST
13905: LIST
13906: LIST
13907: LIST
13908: LIST
13909: LIST
13910: LIST
13911: LIST
13912: LIST
13913: LIST
13914: LIST
13915: LIST
13916: LIST
13917: LIST
13918: PUSH
13919: LD_INT 101
13921: PUSH
13922: LD_INT 102
13924: PUSH
13925: LD_INT 103
13927: PUSH
13928: LD_INT 104
13930: PUSH
13931: LD_INT 105
13933: PUSH
13934: LD_INT 106
13936: PUSH
13937: LD_INT 107
13939: PUSH
13940: LD_INT 108
13942: PUSH
13943: LD_INT 109
13945: PUSH
13946: LD_INT 110
13948: PUSH
13949: LD_INT 111
13951: PUSH
13952: LD_INT 112
13954: PUSH
13955: LD_INT 113
13957: PUSH
13958: LD_INT 114
13960: PUSH
13961: LD_INT 115
13963: PUSH
13964: LD_INT 116
13966: PUSH
13967: LD_INT 117
13969: PUSH
13970: LD_INT 118
13972: PUSH
13973: EMPTY
13974: LIST
13975: LIST
13976: LIST
13977: LIST
13978: LIST
13979: LIST
13980: LIST
13981: LIST
13982: LIST
13983: LIST
13984: LIST
13985: LIST
13986: LIST
13987: LIST
13988: LIST
13989: LIST
13990: LIST
13991: LIST
13992: PUSH
13993: EMPTY
13994: LIST
13995: LIST
13996: ST_TO_ADDR
// if result then
13997: LD_VAR 0 2
14001: IFFALSE 14787
// begin normal :=  ;
14003: LD_ADDR_VAR 0 5
14007: PUSH
14008: LD_STRING 
14010: ST_TO_ADDR
// hardcore :=  ;
14011: LD_ADDR_VAR 0 6
14015: PUSH
14016: LD_STRING 
14018: ST_TO_ADDR
// active :=  ;
14019: LD_ADDR_VAR 0 7
14023: PUSH
14024: LD_STRING 
14026: ST_TO_ADDR
// for i = 1 to normalCounter do
14027: LD_ADDR_VAR 0 8
14031: PUSH
14032: DOUBLE
14033: LD_INT 1
14035: DEC
14036: ST_TO_ADDR
14037: LD_EXP 32
14041: PUSH
14042: FOR_TO
14043: IFFALSE 14144
// begin tmp := 0 ;
14045: LD_ADDR_VAR 0 3
14049: PUSH
14050: LD_STRING 0
14052: ST_TO_ADDR
// if result [ 1 ] then
14053: LD_VAR 0 2
14057: PUSH
14058: LD_INT 1
14060: ARRAY
14061: IFFALSE 14126
// if result [ 1 ] [ 1 ] = i then
14063: LD_VAR 0 2
14067: PUSH
14068: LD_INT 1
14070: ARRAY
14071: PUSH
14072: LD_INT 1
14074: ARRAY
14075: PUSH
14076: LD_VAR 0 8
14080: EQUAL
14081: IFFALSE 14126
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
14083: LD_ADDR_VAR 0 2
14087: PUSH
14088: LD_VAR 0 2
14092: PPUSH
14093: LD_INT 1
14095: PPUSH
14096: LD_VAR 0 2
14100: PUSH
14101: LD_INT 1
14103: ARRAY
14104: PPUSH
14105: LD_INT 1
14107: PPUSH
14108: CALL_OW 3
14112: PPUSH
14113: CALL_OW 1
14117: ST_TO_ADDR
// tmp := 1 ;
14118: LD_ADDR_VAR 0 3
14122: PUSH
14123: LD_STRING 1
14125: ST_TO_ADDR
// end ; normal := normal & tmp ;
14126: LD_ADDR_VAR 0 5
14130: PUSH
14131: LD_VAR 0 5
14135: PUSH
14136: LD_VAR 0 3
14140: STR
14141: ST_TO_ADDR
// end ;
14142: GO 14042
14144: POP
14145: POP
// for i = 1 to hardcoreCounter do
14146: LD_ADDR_VAR 0 8
14150: PUSH
14151: DOUBLE
14152: LD_INT 1
14154: DEC
14155: ST_TO_ADDR
14156: LD_EXP 33
14160: PUSH
14161: FOR_TO
14162: IFFALSE 14267
// begin tmp := 0 ;
14164: LD_ADDR_VAR 0 3
14168: PUSH
14169: LD_STRING 0
14171: ST_TO_ADDR
// if result [ 2 ] then
14172: LD_VAR 0 2
14176: PUSH
14177: LD_INT 2
14179: ARRAY
14180: IFFALSE 14249
// if result [ 2 ] [ 1 ] = 100 + i then
14182: LD_VAR 0 2
14186: PUSH
14187: LD_INT 2
14189: ARRAY
14190: PUSH
14191: LD_INT 1
14193: ARRAY
14194: PUSH
14195: LD_INT 100
14197: PUSH
14198: LD_VAR 0 8
14202: PLUS
14203: EQUAL
14204: IFFALSE 14249
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
14206: LD_ADDR_VAR 0 2
14210: PUSH
14211: LD_VAR 0 2
14215: PPUSH
14216: LD_INT 2
14218: PPUSH
14219: LD_VAR 0 2
14223: PUSH
14224: LD_INT 2
14226: ARRAY
14227: PPUSH
14228: LD_INT 1
14230: PPUSH
14231: CALL_OW 3
14235: PPUSH
14236: CALL_OW 1
14240: ST_TO_ADDR
// tmp := 1 ;
14241: LD_ADDR_VAR 0 3
14245: PUSH
14246: LD_STRING 1
14248: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
14249: LD_ADDR_VAR 0 6
14253: PUSH
14254: LD_VAR 0 6
14258: PUSH
14259: LD_VAR 0 3
14263: STR
14264: ST_TO_ADDR
// end ;
14265: GO 14161
14267: POP
14268: POP
// if isGameLoad then
14269: LD_VAR 0 1
14273: IFFALSE 14748
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
14275: LD_ADDR_VAR 0 4
14279: PUSH
14280: LD_EXP 36
14284: PUSH
14285: LD_EXP 35
14289: PUSH
14290: LD_EXP 37
14294: PUSH
14295: LD_EXP 34
14299: PUSH
14300: LD_EXP 38
14304: PUSH
14305: LD_EXP 39
14309: PUSH
14310: LD_EXP 40
14314: PUSH
14315: LD_EXP 41
14319: PUSH
14320: LD_EXP 42
14324: PUSH
14325: LD_EXP 43
14329: PUSH
14330: LD_EXP 44
14334: PUSH
14335: LD_EXP 45
14339: PUSH
14340: LD_EXP 46
14344: PUSH
14345: LD_EXP 47
14349: PUSH
14350: LD_EXP 55
14354: PUSH
14355: LD_EXP 56
14359: PUSH
14360: LD_EXP 57
14364: PUSH
14365: LD_EXP 58
14369: PUSH
14370: LD_EXP 60
14374: PUSH
14375: LD_EXP 61
14379: PUSH
14380: LD_EXP 62
14384: PUSH
14385: LD_EXP 65
14389: PUSH
14390: LD_EXP 67
14394: PUSH
14395: LD_EXP 68
14399: PUSH
14400: LD_EXP 69
14404: PUSH
14405: LD_EXP 71
14409: PUSH
14410: LD_EXP 72
14414: PUSH
14415: LD_EXP 75
14419: PUSH
14420: LD_EXP 76
14424: PUSH
14425: LD_EXP 77
14429: PUSH
14430: LD_EXP 78
14434: PUSH
14435: LD_EXP 79
14439: PUSH
14440: LD_EXP 80
14444: PUSH
14445: LD_EXP 81
14449: PUSH
14450: LD_EXP 82
14454: PUSH
14455: LD_EXP 83
14459: PUSH
14460: LD_EXP 48
14464: PUSH
14465: LD_EXP 49
14469: PUSH
14470: LD_EXP 52
14474: PUSH
14475: LD_EXP 53
14479: PUSH
14480: LD_EXP 54
14484: PUSH
14485: LD_EXP 50
14489: PUSH
14490: LD_EXP 51
14494: PUSH
14495: LD_EXP 59
14499: PUSH
14500: LD_EXP 63
14504: PUSH
14505: LD_EXP 64
14509: PUSH
14510: LD_EXP 66
14514: PUSH
14515: LD_EXP 70
14519: PUSH
14520: LD_EXP 73
14524: PUSH
14525: LD_EXP 74
14529: PUSH
14530: LD_EXP 84
14534: PUSH
14535: LD_EXP 85
14539: PUSH
14540: LD_EXP 86
14544: PUSH
14545: LD_EXP 87
14549: PUSH
14550: EMPTY
14551: LIST
14552: LIST
14553: LIST
14554: LIST
14555: LIST
14556: LIST
14557: LIST
14558: LIST
14559: LIST
14560: LIST
14561: LIST
14562: LIST
14563: LIST
14564: LIST
14565: LIST
14566: LIST
14567: LIST
14568: LIST
14569: LIST
14570: LIST
14571: LIST
14572: LIST
14573: LIST
14574: LIST
14575: LIST
14576: LIST
14577: LIST
14578: LIST
14579: LIST
14580: LIST
14581: LIST
14582: LIST
14583: LIST
14584: LIST
14585: LIST
14586: LIST
14587: LIST
14588: LIST
14589: LIST
14590: LIST
14591: LIST
14592: LIST
14593: LIST
14594: LIST
14595: LIST
14596: LIST
14597: LIST
14598: LIST
14599: LIST
14600: LIST
14601: LIST
14602: LIST
14603: LIST
14604: LIST
14605: ST_TO_ADDR
// tmp :=  ;
14606: LD_ADDR_VAR 0 3
14610: PUSH
14611: LD_STRING 
14613: ST_TO_ADDR
// for i = 1 to normalCounter do
14614: LD_ADDR_VAR 0 8
14618: PUSH
14619: DOUBLE
14620: LD_INT 1
14622: DEC
14623: ST_TO_ADDR
14624: LD_EXP 32
14628: PUSH
14629: FOR_TO
14630: IFFALSE 14666
// begin if flags [ i ] then
14632: LD_VAR 0 4
14636: PUSH
14637: LD_VAR 0 8
14641: ARRAY
14642: IFFALSE 14664
// tmp := tmp & i & ; ;
14644: LD_ADDR_VAR 0 3
14648: PUSH
14649: LD_VAR 0 3
14653: PUSH
14654: LD_VAR 0 8
14658: STR
14659: PUSH
14660: LD_STRING ;
14662: STR
14663: ST_TO_ADDR
// end ;
14664: GO 14629
14666: POP
14667: POP
// for i = 1 to hardcoreCounter do
14668: LD_ADDR_VAR 0 8
14672: PUSH
14673: DOUBLE
14674: LD_INT 1
14676: DEC
14677: ST_TO_ADDR
14678: LD_EXP 33
14682: PUSH
14683: FOR_TO
14684: IFFALSE 14730
// begin if flags [ normalCounter + i ] then
14686: LD_VAR 0 4
14690: PUSH
14691: LD_EXP 32
14695: PUSH
14696: LD_VAR 0 8
14700: PLUS
14701: ARRAY
14702: IFFALSE 14728
// tmp := tmp & ( 100 + i ) & ; ;
14704: LD_ADDR_VAR 0 3
14708: PUSH
14709: LD_VAR 0 3
14713: PUSH
14714: LD_INT 100
14716: PUSH
14717: LD_VAR 0 8
14721: PLUS
14722: STR
14723: PUSH
14724: LD_STRING ;
14726: STR
14727: ST_TO_ADDR
// end ;
14728: GO 14683
14730: POP
14731: POP
// if tmp then
14732: LD_VAR 0 3
14736: IFFALSE 14748
// active := tmp ;
14738: LD_ADDR_VAR 0 7
14742: PUSH
14743: LD_VAR 0 3
14747: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
14748: LD_STRING getStreamItemsFromMission("
14750: PUSH
14751: LD_VAR 0 5
14755: STR
14756: PUSH
14757: LD_STRING ","
14759: STR
14760: PUSH
14761: LD_VAR 0 6
14765: STR
14766: PUSH
14767: LD_STRING ","
14769: STR
14770: PUSH
14771: LD_VAR 0 7
14775: STR
14776: PUSH
14777: LD_STRING ")
14779: STR
14780: PPUSH
14781: CALL_OW 559
// end else
14785: GO 14794
// ToLua ( getStreamItemsFromMission("","","") ) ;
14787: LD_STRING getStreamItemsFromMission("","","")
14789: PPUSH
14790: CALL_OW 559
// end ;
14794: LD_VAR 0 2
14798: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
14799: LD_EXP 31
14803: PUSH
14804: LD_EXP 36
14808: AND
14809: IFFALSE 14933
14811: GO 14813
14813: DISABLE
14814: LD_INT 0
14816: PPUSH
14817: PPUSH
// begin enable ;
14818: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
14819: LD_ADDR_VAR 0 2
14823: PUSH
14824: LD_INT 22
14826: PUSH
14827: LD_OWVAR 2
14831: PUSH
14832: EMPTY
14833: LIST
14834: LIST
14835: PUSH
14836: LD_INT 2
14838: PUSH
14839: LD_INT 34
14841: PUSH
14842: LD_INT 7
14844: PUSH
14845: EMPTY
14846: LIST
14847: LIST
14848: PUSH
14849: LD_INT 34
14851: PUSH
14852: LD_INT 45
14854: PUSH
14855: EMPTY
14856: LIST
14857: LIST
14858: PUSH
14859: LD_INT 34
14861: PUSH
14862: LD_INT 28
14864: PUSH
14865: EMPTY
14866: LIST
14867: LIST
14868: PUSH
14869: LD_INT 34
14871: PUSH
14872: LD_INT 47
14874: PUSH
14875: EMPTY
14876: LIST
14877: LIST
14878: PUSH
14879: EMPTY
14880: LIST
14881: LIST
14882: LIST
14883: LIST
14884: LIST
14885: PUSH
14886: EMPTY
14887: LIST
14888: LIST
14889: PPUSH
14890: CALL_OW 69
14894: ST_TO_ADDR
// if not tmp then
14895: LD_VAR 0 2
14899: NOT
14900: IFFALSE 14904
// exit ;
14902: GO 14933
// for i in tmp do
14904: LD_ADDR_VAR 0 1
14908: PUSH
14909: LD_VAR 0 2
14913: PUSH
14914: FOR_IN
14915: IFFALSE 14931
// begin SetLives ( i , 0 ) ;
14917: LD_VAR 0 1
14921: PPUSH
14922: LD_INT 0
14924: PPUSH
14925: CALL_OW 234
// end ;
14929: GO 14914
14931: POP
14932: POP
// end ;
14933: PPOPN 2
14935: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
14936: LD_EXP 31
14940: PUSH
14941: LD_EXP 37
14945: AND
14946: IFFALSE 15030
14948: GO 14950
14950: DISABLE
14951: LD_INT 0
14953: PPUSH
14954: PPUSH
// begin enable ;
14955: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
14956: LD_ADDR_VAR 0 2
14960: PUSH
14961: LD_INT 22
14963: PUSH
14964: LD_OWVAR 2
14968: PUSH
14969: EMPTY
14970: LIST
14971: LIST
14972: PUSH
14973: LD_INT 32
14975: PUSH
14976: LD_INT 3
14978: PUSH
14979: EMPTY
14980: LIST
14981: LIST
14982: PUSH
14983: EMPTY
14984: LIST
14985: LIST
14986: PPUSH
14987: CALL_OW 69
14991: ST_TO_ADDR
// if not tmp then
14992: LD_VAR 0 2
14996: NOT
14997: IFFALSE 15001
// exit ;
14999: GO 15030
// for i in tmp do
15001: LD_ADDR_VAR 0 1
15005: PUSH
15006: LD_VAR 0 2
15010: PUSH
15011: FOR_IN
15012: IFFALSE 15028
// begin SetLives ( i , 0 ) ;
15014: LD_VAR 0 1
15018: PPUSH
15019: LD_INT 0
15021: PPUSH
15022: CALL_OW 234
// end ;
15026: GO 15011
15028: POP
15029: POP
// end ;
15030: PPOPN 2
15032: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
15033: LD_EXP 31
15037: PUSH
15038: LD_EXP 34
15042: AND
15043: IFFALSE 15136
15045: GO 15047
15047: DISABLE
15048: LD_INT 0
15050: PPUSH
// begin enable ;
15051: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
15052: LD_ADDR_VAR 0 1
15056: PUSH
15057: LD_INT 22
15059: PUSH
15060: LD_OWVAR 2
15064: PUSH
15065: EMPTY
15066: LIST
15067: LIST
15068: PUSH
15069: LD_INT 2
15071: PUSH
15072: LD_INT 25
15074: PUSH
15075: LD_INT 5
15077: PUSH
15078: EMPTY
15079: LIST
15080: LIST
15081: PUSH
15082: LD_INT 25
15084: PUSH
15085: LD_INT 9
15087: PUSH
15088: EMPTY
15089: LIST
15090: LIST
15091: PUSH
15092: LD_INT 25
15094: PUSH
15095: LD_INT 8
15097: PUSH
15098: EMPTY
15099: LIST
15100: LIST
15101: PUSH
15102: EMPTY
15103: LIST
15104: LIST
15105: LIST
15106: LIST
15107: PUSH
15108: EMPTY
15109: LIST
15110: LIST
15111: PPUSH
15112: CALL_OW 69
15116: PUSH
15117: FOR_IN
15118: IFFALSE 15134
// begin SetClass ( i , 1 ) ;
15120: LD_VAR 0 1
15124: PPUSH
15125: LD_INT 1
15127: PPUSH
15128: CALL_OW 336
// end ;
15132: GO 15117
15134: POP
15135: POP
// end ;
15136: PPOPN 1
15138: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
15139: LD_EXP 31
15143: PUSH
15144: LD_EXP 35
15148: AND
15149: PUSH
15150: LD_OWVAR 65
15154: PUSH
15155: LD_INT 7
15157: LESS
15158: AND
15159: IFFALSE 15173
15161: GO 15163
15163: DISABLE
// begin enable ;
15164: ENABLE
// game_speed := 7 ;
15165: LD_ADDR_OWVAR 65
15169: PUSH
15170: LD_INT 7
15172: ST_TO_ADDR
// end ;
15173: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
15174: LD_EXP 31
15178: PUSH
15179: LD_EXP 38
15183: AND
15184: IFFALSE 15386
15186: GO 15188
15188: DISABLE
15189: LD_INT 0
15191: PPUSH
15192: PPUSH
15193: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
15194: LD_ADDR_VAR 0 3
15198: PUSH
15199: LD_INT 81
15201: PUSH
15202: LD_OWVAR 2
15206: PUSH
15207: EMPTY
15208: LIST
15209: LIST
15210: PUSH
15211: LD_INT 21
15213: PUSH
15214: LD_INT 1
15216: PUSH
15217: EMPTY
15218: LIST
15219: LIST
15220: PUSH
15221: EMPTY
15222: LIST
15223: LIST
15224: PPUSH
15225: CALL_OW 69
15229: ST_TO_ADDR
// if not tmp then
15230: LD_VAR 0 3
15234: NOT
15235: IFFALSE 15239
// exit ;
15237: GO 15386
// if tmp > 5 then
15239: LD_VAR 0 3
15243: PUSH
15244: LD_INT 5
15246: GREATER
15247: IFFALSE 15259
// k := 5 else
15249: LD_ADDR_VAR 0 2
15253: PUSH
15254: LD_INT 5
15256: ST_TO_ADDR
15257: GO 15269
// k := tmp ;
15259: LD_ADDR_VAR 0 2
15263: PUSH
15264: LD_VAR 0 3
15268: ST_TO_ADDR
// for i := 1 to k do
15269: LD_ADDR_VAR 0 1
15273: PUSH
15274: DOUBLE
15275: LD_INT 1
15277: DEC
15278: ST_TO_ADDR
15279: LD_VAR 0 2
15283: PUSH
15284: FOR_TO
15285: IFFALSE 15384
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
15287: LD_VAR 0 3
15291: PUSH
15292: LD_VAR 0 1
15296: ARRAY
15297: PPUSH
15298: LD_VAR 0 1
15302: PUSH
15303: LD_INT 4
15305: MOD
15306: PUSH
15307: LD_INT 1
15309: PLUS
15310: PPUSH
15311: CALL_OW 259
15315: PUSH
15316: LD_INT 10
15318: LESS
15319: IFFALSE 15382
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
15321: LD_VAR 0 3
15325: PUSH
15326: LD_VAR 0 1
15330: ARRAY
15331: PPUSH
15332: LD_VAR 0 1
15336: PUSH
15337: LD_INT 4
15339: MOD
15340: PUSH
15341: LD_INT 1
15343: PLUS
15344: PPUSH
15345: LD_VAR 0 3
15349: PUSH
15350: LD_VAR 0 1
15354: ARRAY
15355: PPUSH
15356: LD_VAR 0 1
15360: PUSH
15361: LD_INT 4
15363: MOD
15364: PUSH
15365: LD_INT 1
15367: PLUS
15368: PPUSH
15369: CALL_OW 259
15373: PUSH
15374: LD_INT 1
15376: PLUS
15377: PPUSH
15378: CALL_OW 237
15382: GO 15284
15384: POP
15385: POP
// end ;
15386: PPOPN 3
15388: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
15389: LD_EXP 31
15393: PUSH
15394: LD_EXP 39
15398: AND
15399: IFFALSE 15419
15401: GO 15403
15403: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
15404: LD_INT 4
15406: PPUSH
15407: LD_OWVAR 2
15411: PPUSH
15412: LD_INT 0
15414: PPUSH
15415: CALL_OW 324
15419: END
// every 0 0$1 trigger StreamModeActive and sShovel do
15420: LD_EXP 31
15424: PUSH
15425: LD_EXP 68
15429: AND
15430: IFFALSE 15450
15432: GO 15434
15434: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
15435: LD_INT 19
15437: PPUSH
15438: LD_OWVAR 2
15442: PPUSH
15443: LD_INT 0
15445: PPUSH
15446: CALL_OW 324
15450: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
15451: LD_EXP 31
15455: PUSH
15456: LD_EXP 40
15460: AND
15461: IFFALSE 15563
15463: GO 15465
15465: DISABLE
15466: LD_INT 0
15468: PPUSH
15469: PPUSH
// begin enable ;
15470: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
15471: LD_ADDR_VAR 0 2
15475: PUSH
15476: LD_INT 22
15478: PUSH
15479: LD_OWVAR 2
15483: PUSH
15484: EMPTY
15485: LIST
15486: LIST
15487: PUSH
15488: LD_INT 2
15490: PUSH
15491: LD_INT 34
15493: PUSH
15494: LD_INT 11
15496: PUSH
15497: EMPTY
15498: LIST
15499: LIST
15500: PUSH
15501: LD_INT 34
15503: PUSH
15504: LD_INT 30
15506: PUSH
15507: EMPTY
15508: LIST
15509: LIST
15510: PUSH
15511: EMPTY
15512: LIST
15513: LIST
15514: LIST
15515: PUSH
15516: EMPTY
15517: LIST
15518: LIST
15519: PPUSH
15520: CALL_OW 69
15524: ST_TO_ADDR
// if not tmp then
15525: LD_VAR 0 2
15529: NOT
15530: IFFALSE 15534
// exit ;
15532: GO 15563
// for i in tmp do
15534: LD_ADDR_VAR 0 1
15538: PUSH
15539: LD_VAR 0 2
15543: PUSH
15544: FOR_IN
15545: IFFALSE 15561
// begin SetLives ( i , 0 ) ;
15547: LD_VAR 0 1
15551: PPUSH
15552: LD_INT 0
15554: PPUSH
15555: CALL_OW 234
// end ;
15559: GO 15544
15561: POP
15562: POP
// end ;
15563: PPOPN 2
15565: END
// every 0 0$1 trigger StreamModeActive and sBunker do
15566: LD_EXP 31
15570: PUSH
15571: LD_EXP 41
15575: AND
15576: IFFALSE 15596
15578: GO 15580
15580: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
15581: LD_INT 32
15583: PPUSH
15584: LD_OWVAR 2
15588: PPUSH
15589: LD_INT 0
15591: PPUSH
15592: CALL_OW 324
15596: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
15597: LD_EXP 31
15601: PUSH
15602: LD_EXP 42
15606: AND
15607: IFFALSE 15788
15609: GO 15611
15611: DISABLE
15612: LD_INT 0
15614: PPUSH
15615: PPUSH
15616: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
15617: LD_ADDR_VAR 0 2
15621: PUSH
15622: LD_INT 22
15624: PUSH
15625: LD_OWVAR 2
15629: PUSH
15630: EMPTY
15631: LIST
15632: LIST
15633: PUSH
15634: LD_INT 33
15636: PUSH
15637: LD_INT 3
15639: PUSH
15640: EMPTY
15641: LIST
15642: LIST
15643: PUSH
15644: EMPTY
15645: LIST
15646: LIST
15647: PPUSH
15648: CALL_OW 69
15652: ST_TO_ADDR
// if not tmp then
15653: LD_VAR 0 2
15657: NOT
15658: IFFALSE 15662
// exit ;
15660: GO 15788
// side := 0 ;
15662: LD_ADDR_VAR 0 3
15666: PUSH
15667: LD_INT 0
15669: ST_TO_ADDR
// for i := 1 to 8 do
15670: LD_ADDR_VAR 0 1
15674: PUSH
15675: DOUBLE
15676: LD_INT 1
15678: DEC
15679: ST_TO_ADDR
15680: LD_INT 8
15682: PUSH
15683: FOR_TO
15684: IFFALSE 15732
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
15686: LD_OWVAR 2
15690: PUSH
15691: LD_VAR 0 1
15695: NONEQUAL
15696: PUSH
15697: LD_OWVAR 2
15701: PPUSH
15702: LD_VAR 0 1
15706: PPUSH
15707: CALL_OW 81
15711: PUSH
15712: LD_INT 2
15714: EQUAL
15715: AND
15716: IFFALSE 15730
// begin side := i ;
15718: LD_ADDR_VAR 0 3
15722: PUSH
15723: LD_VAR 0 1
15727: ST_TO_ADDR
// break ;
15728: GO 15732
// end ;
15730: GO 15683
15732: POP
15733: POP
// if not side then
15734: LD_VAR 0 3
15738: NOT
15739: IFFALSE 15743
// exit ;
15741: GO 15788
// for i := 1 to tmp do
15743: LD_ADDR_VAR 0 1
15747: PUSH
15748: DOUBLE
15749: LD_INT 1
15751: DEC
15752: ST_TO_ADDR
15753: LD_VAR 0 2
15757: PUSH
15758: FOR_TO
15759: IFFALSE 15786
// if Prob ( 60 ) then
15761: LD_INT 60
15763: PPUSH
15764: CALL_OW 13
15768: IFFALSE 15784
// SetSide ( i , side ) ;
15770: LD_VAR 0 1
15774: PPUSH
15775: LD_VAR 0 3
15779: PPUSH
15780: CALL_OW 235
15784: GO 15758
15786: POP
15787: POP
// end ;
15788: PPOPN 3
15790: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
15791: LD_EXP 31
15795: PUSH
15796: LD_EXP 44
15800: AND
15801: IFFALSE 15920
15803: GO 15805
15805: DISABLE
15806: LD_INT 0
15808: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
15809: LD_ADDR_VAR 0 1
15813: PUSH
15814: LD_INT 22
15816: PUSH
15817: LD_OWVAR 2
15821: PUSH
15822: EMPTY
15823: LIST
15824: LIST
15825: PUSH
15826: LD_INT 21
15828: PUSH
15829: LD_INT 1
15831: PUSH
15832: EMPTY
15833: LIST
15834: LIST
15835: PUSH
15836: LD_INT 3
15838: PUSH
15839: LD_INT 23
15841: PUSH
15842: LD_INT 0
15844: PUSH
15845: EMPTY
15846: LIST
15847: LIST
15848: PUSH
15849: EMPTY
15850: LIST
15851: LIST
15852: PUSH
15853: EMPTY
15854: LIST
15855: LIST
15856: LIST
15857: PPUSH
15858: CALL_OW 69
15862: PUSH
15863: FOR_IN
15864: IFFALSE 15918
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
15866: LD_VAR 0 1
15870: PPUSH
15871: CALL_OW 257
15875: PUSH
15876: LD_INT 1
15878: PUSH
15879: LD_INT 2
15881: PUSH
15882: LD_INT 3
15884: PUSH
15885: LD_INT 4
15887: PUSH
15888: EMPTY
15889: LIST
15890: LIST
15891: LIST
15892: LIST
15893: IN
15894: IFFALSE 15916
// SetClass ( un , rand ( 1 , 4 ) ) ;
15896: LD_VAR 0 1
15900: PPUSH
15901: LD_INT 1
15903: PPUSH
15904: LD_INT 4
15906: PPUSH
15907: CALL_OW 12
15911: PPUSH
15912: CALL_OW 336
15916: GO 15863
15918: POP
15919: POP
// end ;
15920: PPOPN 1
15922: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
15923: LD_EXP 31
15927: PUSH
15928: LD_EXP 43
15932: AND
15933: IFFALSE 16012
15935: GO 15937
15937: DISABLE
15938: LD_INT 0
15940: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
15941: LD_ADDR_VAR 0 1
15945: PUSH
15946: LD_INT 22
15948: PUSH
15949: LD_OWVAR 2
15953: PUSH
15954: EMPTY
15955: LIST
15956: LIST
15957: PUSH
15958: LD_INT 21
15960: PUSH
15961: LD_INT 3
15963: PUSH
15964: EMPTY
15965: LIST
15966: LIST
15967: PUSH
15968: EMPTY
15969: LIST
15970: LIST
15971: PPUSH
15972: CALL_OW 69
15976: ST_TO_ADDR
// if not tmp then
15977: LD_VAR 0 1
15981: NOT
15982: IFFALSE 15986
// exit ;
15984: GO 16012
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
15986: LD_VAR 0 1
15990: PUSH
15991: LD_INT 1
15993: PPUSH
15994: LD_VAR 0 1
15998: PPUSH
15999: CALL_OW 12
16003: ARRAY
16004: PPUSH
16005: LD_INT 100
16007: PPUSH
16008: CALL_OW 234
// end ;
16012: PPOPN 1
16014: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
16015: LD_EXP 31
16019: PUSH
16020: LD_EXP 45
16024: AND
16025: IFFALSE 16123
16027: GO 16029
16029: DISABLE
16030: LD_INT 0
16032: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
16033: LD_ADDR_VAR 0 1
16037: PUSH
16038: LD_INT 22
16040: PUSH
16041: LD_OWVAR 2
16045: PUSH
16046: EMPTY
16047: LIST
16048: LIST
16049: PUSH
16050: LD_INT 21
16052: PUSH
16053: LD_INT 1
16055: PUSH
16056: EMPTY
16057: LIST
16058: LIST
16059: PUSH
16060: EMPTY
16061: LIST
16062: LIST
16063: PPUSH
16064: CALL_OW 69
16068: ST_TO_ADDR
// if not tmp then
16069: LD_VAR 0 1
16073: NOT
16074: IFFALSE 16078
// exit ;
16076: GO 16123
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
16078: LD_VAR 0 1
16082: PUSH
16083: LD_INT 1
16085: PPUSH
16086: LD_VAR 0 1
16090: PPUSH
16091: CALL_OW 12
16095: ARRAY
16096: PPUSH
16097: LD_INT 1
16099: PPUSH
16100: LD_INT 4
16102: PPUSH
16103: CALL_OW 12
16107: PPUSH
16108: LD_INT 3000
16110: PPUSH
16111: LD_INT 9000
16113: PPUSH
16114: CALL_OW 12
16118: PPUSH
16119: CALL_OW 492
// end ;
16123: PPOPN 1
16125: END
// every 0 0$1 trigger StreamModeActive and sDepot do
16126: LD_EXP 31
16130: PUSH
16131: LD_EXP 46
16135: AND
16136: IFFALSE 16156
16138: GO 16140
16140: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
16141: LD_INT 1
16143: PPUSH
16144: LD_OWVAR 2
16148: PPUSH
16149: LD_INT 0
16151: PPUSH
16152: CALL_OW 324
16156: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
16157: LD_EXP 31
16161: PUSH
16162: LD_EXP 47
16166: AND
16167: IFFALSE 16250
16169: GO 16171
16171: DISABLE
16172: LD_INT 0
16174: PPUSH
16175: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
16176: LD_ADDR_VAR 0 2
16180: PUSH
16181: LD_INT 22
16183: PUSH
16184: LD_OWVAR 2
16188: PUSH
16189: EMPTY
16190: LIST
16191: LIST
16192: PUSH
16193: LD_INT 21
16195: PUSH
16196: LD_INT 3
16198: PUSH
16199: EMPTY
16200: LIST
16201: LIST
16202: PUSH
16203: EMPTY
16204: LIST
16205: LIST
16206: PPUSH
16207: CALL_OW 69
16211: ST_TO_ADDR
// if not tmp then
16212: LD_VAR 0 2
16216: NOT
16217: IFFALSE 16221
// exit ;
16219: GO 16250
// for i in tmp do
16221: LD_ADDR_VAR 0 1
16225: PUSH
16226: LD_VAR 0 2
16230: PUSH
16231: FOR_IN
16232: IFFALSE 16248
// SetBLevel ( i , 10 ) ;
16234: LD_VAR 0 1
16238: PPUSH
16239: LD_INT 10
16241: PPUSH
16242: CALL_OW 241
16246: GO 16231
16248: POP
16249: POP
// end ;
16250: PPOPN 2
16252: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
16253: LD_EXP 31
16257: PUSH
16258: LD_EXP 48
16262: AND
16263: IFFALSE 16374
16265: GO 16267
16267: DISABLE
16268: LD_INT 0
16270: PPUSH
16271: PPUSH
16272: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
16273: LD_ADDR_VAR 0 3
16277: PUSH
16278: LD_INT 22
16280: PUSH
16281: LD_OWVAR 2
16285: PUSH
16286: EMPTY
16287: LIST
16288: LIST
16289: PUSH
16290: LD_INT 25
16292: PUSH
16293: LD_INT 1
16295: PUSH
16296: EMPTY
16297: LIST
16298: LIST
16299: PUSH
16300: EMPTY
16301: LIST
16302: LIST
16303: PPUSH
16304: CALL_OW 69
16308: ST_TO_ADDR
// if not tmp then
16309: LD_VAR 0 3
16313: NOT
16314: IFFALSE 16318
// exit ;
16316: GO 16374
// un := tmp [ rand ( 1 , tmp ) ] ;
16318: LD_ADDR_VAR 0 2
16322: PUSH
16323: LD_VAR 0 3
16327: PUSH
16328: LD_INT 1
16330: PPUSH
16331: LD_VAR 0 3
16335: PPUSH
16336: CALL_OW 12
16340: ARRAY
16341: ST_TO_ADDR
// if Crawls ( un ) then
16342: LD_VAR 0 2
16346: PPUSH
16347: CALL_OW 318
16351: IFFALSE 16362
// ComWalk ( un ) ;
16353: LD_VAR 0 2
16357: PPUSH
16358: CALL_OW 138
// SetClass ( un , class_sniper ) ;
16362: LD_VAR 0 2
16366: PPUSH
16367: LD_INT 5
16369: PPUSH
16370: CALL_OW 336
// end ;
16374: PPOPN 3
16376: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
16377: LD_EXP 31
16381: PUSH
16382: LD_EXP 49
16386: AND
16387: PUSH
16388: LD_OWVAR 67
16392: PUSH
16393: LD_INT 4
16395: LESS
16396: AND
16397: IFFALSE 16416
16399: GO 16401
16401: DISABLE
// begin Difficulty := Difficulty + 1 ;
16402: LD_ADDR_OWVAR 67
16406: PUSH
16407: LD_OWVAR 67
16411: PUSH
16412: LD_INT 1
16414: PLUS
16415: ST_TO_ADDR
// end ;
16416: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
16417: LD_EXP 31
16421: PUSH
16422: LD_EXP 50
16426: AND
16427: IFFALSE 16530
16429: GO 16431
16431: DISABLE
16432: LD_INT 0
16434: PPUSH
// begin for i := 1 to 5 do
16435: LD_ADDR_VAR 0 1
16439: PUSH
16440: DOUBLE
16441: LD_INT 1
16443: DEC
16444: ST_TO_ADDR
16445: LD_INT 5
16447: PUSH
16448: FOR_TO
16449: IFFALSE 16528
// begin uc_nation := nation_nature ;
16451: LD_ADDR_OWVAR 21
16455: PUSH
16456: LD_INT 0
16458: ST_TO_ADDR
// uc_side := 0 ;
16459: LD_ADDR_OWVAR 20
16463: PUSH
16464: LD_INT 0
16466: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
16467: LD_ADDR_OWVAR 29
16471: PUSH
16472: LD_INT 12
16474: PUSH
16475: LD_INT 12
16477: PUSH
16478: EMPTY
16479: LIST
16480: LIST
16481: ST_TO_ADDR
// hc_agressivity := 20 ;
16482: LD_ADDR_OWVAR 35
16486: PUSH
16487: LD_INT 20
16489: ST_TO_ADDR
// hc_class := class_tiger ;
16490: LD_ADDR_OWVAR 28
16494: PUSH
16495: LD_INT 14
16497: ST_TO_ADDR
// hc_gallery :=  ;
16498: LD_ADDR_OWVAR 33
16502: PUSH
16503: LD_STRING 
16505: ST_TO_ADDR
// hc_name :=  ;
16506: LD_ADDR_OWVAR 26
16510: PUSH
16511: LD_STRING 
16513: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
16514: CALL_OW 44
16518: PPUSH
16519: LD_INT 0
16521: PPUSH
16522: CALL_OW 51
// end ;
16526: GO 16448
16528: POP
16529: POP
// end ;
16530: PPOPN 1
16532: END
// every 0 0$1 trigger StreamModeActive and sBomb do
16533: LD_EXP 31
16537: PUSH
16538: LD_EXP 51
16542: AND
16543: IFFALSE 16552
16545: GO 16547
16547: DISABLE
// StreamSibBomb ;
16548: CALL 16553 0 0
16552: END
// export function StreamSibBomb ; var i , x , y ; begin
16553: LD_INT 0
16555: PPUSH
16556: PPUSH
16557: PPUSH
16558: PPUSH
// result := false ;
16559: LD_ADDR_VAR 0 1
16563: PUSH
16564: LD_INT 0
16566: ST_TO_ADDR
// for i := 1 to 16 do
16567: LD_ADDR_VAR 0 2
16571: PUSH
16572: DOUBLE
16573: LD_INT 1
16575: DEC
16576: ST_TO_ADDR
16577: LD_INT 16
16579: PUSH
16580: FOR_TO
16581: IFFALSE 16780
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
16583: LD_ADDR_VAR 0 3
16587: PUSH
16588: LD_INT 10
16590: PUSH
16591: LD_INT 20
16593: PUSH
16594: LD_INT 30
16596: PUSH
16597: LD_INT 40
16599: PUSH
16600: LD_INT 50
16602: PUSH
16603: LD_INT 60
16605: PUSH
16606: LD_INT 70
16608: PUSH
16609: LD_INT 80
16611: PUSH
16612: LD_INT 90
16614: PUSH
16615: LD_INT 100
16617: PUSH
16618: LD_INT 110
16620: PUSH
16621: LD_INT 120
16623: PUSH
16624: LD_INT 130
16626: PUSH
16627: LD_INT 140
16629: PUSH
16630: LD_INT 150
16632: PUSH
16633: EMPTY
16634: LIST
16635: LIST
16636: LIST
16637: LIST
16638: LIST
16639: LIST
16640: LIST
16641: LIST
16642: LIST
16643: LIST
16644: LIST
16645: LIST
16646: LIST
16647: LIST
16648: LIST
16649: PUSH
16650: LD_INT 1
16652: PPUSH
16653: LD_INT 15
16655: PPUSH
16656: CALL_OW 12
16660: ARRAY
16661: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
16662: LD_ADDR_VAR 0 4
16666: PUSH
16667: LD_INT 10
16669: PUSH
16670: LD_INT 20
16672: PUSH
16673: LD_INT 30
16675: PUSH
16676: LD_INT 40
16678: PUSH
16679: LD_INT 50
16681: PUSH
16682: LD_INT 60
16684: PUSH
16685: LD_INT 70
16687: PUSH
16688: LD_INT 80
16690: PUSH
16691: LD_INT 90
16693: PUSH
16694: LD_INT 100
16696: PUSH
16697: LD_INT 110
16699: PUSH
16700: LD_INT 120
16702: PUSH
16703: LD_INT 130
16705: PUSH
16706: LD_INT 140
16708: PUSH
16709: LD_INT 150
16711: PUSH
16712: EMPTY
16713: LIST
16714: LIST
16715: LIST
16716: LIST
16717: LIST
16718: LIST
16719: LIST
16720: LIST
16721: LIST
16722: LIST
16723: LIST
16724: LIST
16725: LIST
16726: LIST
16727: LIST
16728: PUSH
16729: LD_INT 1
16731: PPUSH
16732: LD_INT 15
16734: PPUSH
16735: CALL_OW 12
16739: ARRAY
16740: ST_TO_ADDR
// if ValidHex ( x , y ) then
16741: LD_VAR 0 3
16745: PPUSH
16746: LD_VAR 0 4
16750: PPUSH
16751: CALL_OW 488
16755: IFFALSE 16778
// begin result := [ x , y ] ;
16757: LD_ADDR_VAR 0 1
16761: PUSH
16762: LD_VAR 0 3
16766: PUSH
16767: LD_VAR 0 4
16771: PUSH
16772: EMPTY
16773: LIST
16774: LIST
16775: ST_TO_ADDR
// break ;
16776: GO 16780
// end ; end ;
16778: GO 16580
16780: POP
16781: POP
// if result then
16782: LD_VAR 0 1
16786: IFFALSE 16846
// begin ToLua ( playSibBomb() ) ;
16788: LD_STRING playSibBomb()
16790: PPUSH
16791: CALL_OW 559
// wait ( 0 0$14 ) ;
16795: LD_INT 490
16797: PPUSH
16798: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
16802: LD_VAR 0 1
16806: PUSH
16807: LD_INT 1
16809: ARRAY
16810: PPUSH
16811: LD_VAR 0 1
16815: PUSH
16816: LD_INT 2
16818: ARRAY
16819: PPUSH
16820: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
16824: LD_VAR 0 1
16828: PUSH
16829: LD_INT 1
16831: ARRAY
16832: PPUSH
16833: LD_VAR 0 1
16837: PUSH
16838: LD_INT 2
16840: ARRAY
16841: PPUSH
16842: CALL_OW 429
// end ; end ;
16846: LD_VAR 0 1
16850: RET
// every 0 0$1 trigger StreamModeActive and sReset do
16851: LD_EXP 31
16855: PUSH
16856: LD_EXP 53
16860: AND
16861: IFFALSE 16873
16863: GO 16865
16865: DISABLE
// YouLost (  ) ;
16866: LD_STRING 
16868: PPUSH
16869: CALL_OW 104
16873: END
// every 0 0$1 trigger StreamModeActive and sFog do
16874: LD_EXP 31
16878: PUSH
16879: LD_EXP 52
16883: AND
16884: IFFALSE 16898
16886: GO 16888
16888: DISABLE
// FogOff ( your_side ) ;
16889: LD_OWVAR 2
16893: PPUSH
16894: CALL_OW 344
16898: END
// every 0 0$1 trigger StreamModeActive and sSun do
16899: LD_EXP 31
16903: PUSH
16904: LD_EXP 54
16908: AND
16909: IFFALSE 16937
16911: GO 16913
16913: DISABLE
// begin solar_recharge_percent := 0 ;
16914: LD_ADDR_OWVAR 79
16918: PUSH
16919: LD_INT 0
16921: ST_TO_ADDR
// wait ( 5 5$00 ) ;
16922: LD_INT 10500
16924: PPUSH
16925: CALL_OW 67
// solar_recharge_percent := 100 ;
16929: LD_ADDR_OWVAR 79
16933: PUSH
16934: LD_INT 100
16936: ST_TO_ADDR
// end ;
16937: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
16938: LD_EXP 31
16942: PUSH
16943: LD_EXP 55
16947: AND
16948: IFFALSE 17187
16950: GO 16952
16952: DISABLE
16953: LD_INT 0
16955: PPUSH
16956: PPUSH
16957: PPUSH
// begin tmp := [ ] ;
16958: LD_ADDR_VAR 0 3
16962: PUSH
16963: EMPTY
16964: ST_TO_ADDR
// for i := 1 to 6 do
16965: LD_ADDR_VAR 0 1
16969: PUSH
16970: DOUBLE
16971: LD_INT 1
16973: DEC
16974: ST_TO_ADDR
16975: LD_INT 6
16977: PUSH
16978: FOR_TO
16979: IFFALSE 17084
// begin uc_nation := nation_nature ;
16981: LD_ADDR_OWVAR 21
16985: PUSH
16986: LD_INT 0
16988: ST_TO_ADDR
// uc_side := 0 ;
16989: LD_ADDR_OWVAR 20
16993: PUSH
16994: LD_INT 0
16996: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
16997: LD_ADDR_OWVAR 29
17001: PUSH
17002: LD_INT 12
17004: PUSH
17005: LD_INT 12
17007: PUSH
17008: EMPTY
17009: LIST
17010: LIST
17011: ST_TO_ADDR
// hc_agressivity := 20 ;
17012: LD_ADDR_OWVAR 35
17016: PUSH
17017: LD_INT 20
17019: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
17020: LD_ADDR_OWVAR 28
17024: PUSH
17025: LD_INT 17
17027: ST_TO_ADDR
// hc_gallery :=  ;
17028: LD_ADDR_OWVAR 33
17032: PUSH
17033: LD_STRING 
17035: ST_TO_ADDR
// hc_name :=  ;
17036: LD_ADDR_OWVAR 26
17040: PUSH
17041: LD_STRING 
17043: ST_TO_ADDR
// un := CreateHuman ;
17044: LD_ADDR_VAR 0 2
17048: PUSH
17049: CALL_OW 44
17053: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
17054: LD_VAR 0 2
17058: PPUSH
17059: LD_INT 1
17061: PPUSH
17062: CALL_OW 51
// tmp := tmp ^ un ;
17066: LD_ADDR_VAR 0 3
17070: PUSH
17071: LD_VAR 0 3
17075: PUSH
17076: LD_VAR 0 2
17080: ADD
17081: ST_TO_ADDR
// end ;
17082: GO 16978
17084: POP
17085: POP
// repeat wait ( 0 0$1 ) ;
17086: LD_INT 35
17088: PPUSH
17089: CALL_OW 67
// for un in tmp do
17093: LD_ADDR_VAR 0 2
17097: PUSH
17098: LD_VAR 0 3
17102: PUSH
17103: FOR_IN
17104: IFFALSE 17178
// begin if IsDead ( un ) then
17106: LD_VAR 0 2
17110: PPUSH
17111: CALL_OW 301
17115: IFFALSE 17135
// begin tmp := tmp diff un ;
17117: LD_ADDR_VAR 0 3
17121: PUSH
17122: LD_VAR 0 3
17126: PUSH
17127: LD_VAR 0 2
17131: DIFF
17132: ST_TO_ADDR
// continue ;
17133: GO 17103
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
17135: LD_VAR 0 2
17139: PPUSH
17140: LD_INT 3
17142: PUSH
17143: LD_INT 22
17145: PUSH
17146: LD_INT 0
17148: PUSH
17149: EMPTY
17150: LIST
17151: LIST
17152: PUSH
17153: EMPTY
17154: LIST
17155: LIST
17156: PPUSH
17157: CALL_OW 69
17161: PPUSH
17162: LD_VAR 0 2
17166: PPUSH
17167: CALL_OW 74
17171: PPUSH
17172: CALL_OW 115
// end ;
17176: GO 17103
17178: POP
17179: POP
// until not tmp ;
17180: LD_VAR 0 3
17184: NOT
17185: IFFALSE 17086
// end ;
17187: PPOPN 3
17189: END
// every 0 0$1 trigger StreamModeActive and sTroll do
17190: LD_EXP 31
17194: PUSH
17195: LD_EXP 56
17199: AND
17200: IFFALSE 17254
17202: GO 17204
17204: DISABLE
// begin ToLua ( displayTroll(); ) ;
17205: LD_STRING displayTroll();
17207: PPUSH
17208: CALL_OW 559
// wait ( 3 3$00 ) ;
17212: LD_INT 6300
17214: PPUSH
17215: CALL_OW 67
// ToLua ( hideTroll(); ) ;
17219: LD_STRING hideTroll();
17221: PPUSH
17222: CALL_OW 559
// wait ( 1 1$00 ) ;
17226: LD_INT 2100
17228: PPUSH
17229: CALL_OW 67
// ToLua ( displayTroll(); ) ;
17233: LD_STRING displayTroll();
17235: PPUSH
17236: CALL_OW 559
// wait ( 1 1$00 ) ;
17240: LD_INT 2100
17242: PPUSH
17243: CALL_OW 67
// ToLua ( hideTroll(); ) ;
17247: LD_STRING hideTroll();
17249: PPUSH
17250: CALL_OW 559
// end ;
17254: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
17255: LD_EXP 31
17259: PUSH
17260: LD_EXP 57
17264: AND
17265: IFFALSE 17328
17267: GO 17269
17269: DISABLE
17270: LD_INT 0
17272: PPUSH
// begin p := 0 ;
17273: LD_ADDR_VAR 0 1
17277: PUSH
17278: LD_INT 0
17280: ST_TO_ADDR
// repeat game_speed := 1 ;
17281: LD_ADDR_OWVAR 65
17285: PUSH
17286: LD_INT 1
17288: ST_TO_ADDR
// wait ( 0 0$1 ) ;
17289: LD_INT 35
17291: PPUSH
17292: CALL_OW 67
// p := p + 1 ;
17296: LD_ADDR_VAR 0 1
17300: PUSH
17301: LD_VAR 0 1
17305: PUSH
17306: LD_INT 1
17308: PLUS
17309: ST_TO_ADDR
// until p >= 60 ;
17310: LD_VAR 0 1
17314: PUSH
17315: LD_INT 60
17317: GREATEREQUAL
17318: IFFALSE 17281
// game_speed := 4 ;
17320: LD_ADDR_OWVAR 65
17324: PUSH
17325: LD_INT 4
17327: ST_TO_ADDR
// end ;
17328: PPOPN 1
17330: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
17331: LD_EXP 31
17335: PUSH
17336: LD_EXP 58
17340: AND
17341: IFFALSE 17487
17343: GO 17345
17345: DISABLE
17346: LD_INT 0
17348: PPUSH
17349: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
17350: LD_ADDR_VAR 0 1
17354: PUSH
17355: LD_INT 22
17357: PUSH
17358: LD_OWVAR 2
17362: PUSH
17363: EMPTY
17364: LIST
17365: LIST
17366: PUSH
17367: LD_INT 2
17369: PUSH
17370: LD_INT 30
17372: PUSH
17373: LD_INT 0
17375: PUSH
17376: EMPTY
17377: LIST
17378: LIST
17379: PUSH
17380: LD_INT 30
17382: PUSH
17383: LD_INT 1
17385: PUSH
17386: EMPTY
17387: LIST
17388: LIST
17389: PUSH
17390: EMPTY
17391: LIST
17392: LIST
17393: LIST
17394: PUSH
17395: EMPTY
17396: LIST
17397: LIST
17398: PPUSH
17399: CALL_OW 69
17403: ST_TO_ADDR
// if not depot then
17404: LD_VAR 0 1
17408: NOT
17409: IFFALSE 17413
// exit ;
17411: GO 17487
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
17413: LD_ADDR_VAR 0 2
17417: PUSH
17418: LD_VAR 0 1
17422: PUSH
17423: LD_INT 1
17425: PPUSH
17426: LD_VAR 0 1
17430: PPUSH
17431: CALL_OW 12
17435: ARRAY
17436: PPUSH
17437: CALL_OW 274
17441: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
17442: LD_VAR 0 2
17446: PPUSH
17447: LD_INT 1
17449: PPUSH
17450: LD_INT 0
17452: PPUSH
17453: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
17457: LD_VAR 0 2
17461: PPUSH
17462: LD_INT 2
17464: PPUSH
17465: LD_INT 0
17467: PPUSH
17468: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
17472: LD_VAR 0 2
17476: PPUSH
17477: LD_INT 3
17479: PPUSH
17480: LD_INT 0
17482: PPUSH
17483: CALL_OW 277
// end ;
17487: PPOPN 2
17489: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
17490: LD_EXP 31
17494: PUSH
17495: LD_EXP 59
17499: AND
17500: IFFALSE 17597
17502: GO 17504
17504: DISABLE
17505: LD_INT 0
17507: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
17508: LD_ADDR_VAR 0 1
17512: PUSH
17513: LD_INT 22
17515: PUSH
17516: LD_OWVAR 2
17520: PUSH
17521: EMPTY
17522: LIST
17523: LIST
17524: PUSH
17525: LD_INT 21
17527: PUSH
17528: LD_INT 1
17530: PUSH
17531: EMPTY
17532: LIST
17533: LIST
17534: PUSH
17535: LD_INT 3
17537: PUSH
17538: LD_INT 23
17540: PUSH
17541: LD_INT 0
17543: PUSH
17544: EMPTY
17545: LIST
17546: LIST
17547: PUSH
17548: EMPTY
17549: LIST
17550: LIST
17551: PUSH
17552: EMPTY
17553: LIST
17554: LIST
17555: LIST
17556: PPUSH
17557: CALL_OW 69
17561: ST_TO_ADDR
// if not tmp then
17562: LD_VAR 0 1
17566: NOT
17567: IFFALSE 17571
// exit ;
17569: GO 17597
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
17571: LD_VAR 0 1
17575: PUSH
17576: LD_INT 1
17578: PPUSH
17579: LD_VAR 0 1
17583: PPUSH
17584: CALL_OW 12
17588: ARRAY
17589: PPUSH
17590: LD_INT 200
17592: PPUSH
17593: CALL_OW 234
// end ;
17597: PPOPN 1
17599: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
17600: LD_EXP 31
17604: PUSH
17605: LD_EXP 60
17609: AND
17610: IFFALSE 17689
17612: GO 17614
17614: DISABLE
17615: LD_INT 0
17617: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
17618: LD_ADDR_VAR 0 1
17622: PUSH
17623: LD_INT 22
17625: PUSH
17626: LD_OWVAR 2
17630: PUSH
17631: EMPTY
17632: LIST
17633: LIST
17634: PUSH
17635: LD_INT 21
17637: PUSH
17638: LD_INT 2
17640: PUSH
17641: EMPTY
17642: LIST
17643: LIST
17644: PUSH
17645: EMPTY
17646: LIST
17647: LIST
17648: PPUSH
17649: CALL_OW 69
17653: ST_TO_ADDR
// if not tmp then
17654: LD_VAR 0 1
17658: NOT
17659: IFFALSE 17663
// exit ;
17661: GO 17689
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
17663: LD_VAR 0 1
17667: PUSH
17668: LD_INT 1
17670: PPUSH
17671: LD_VAR 0 1
17675: PPUSH
17676: CALL_OW 12
17680: ARRAY
17681: PPUSH
17682: LD_INT 60
17684: PPUSH
17685: CALL_OW 234
// end ;
17689: PPOPN 1
17691: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
17692: LD_EXP 31
17696: PUSH
17697: LD_EXP 61
17701: AND
17702: IFFALSE 17801
17704: GO 17706
17706: DISABLE
17707: LD_INT 0
17709: PPUSH
17710: PPUSH
// begin enable ;
17711: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
17712: LD_ADDR_VAR 0 1
17716: PUSH
17717: LD_INT 22
17719: PUSH
17720: LD_OWVAR 2
17724: PUSH
17725: EMPTY
17726: LIST
17727: LIST
17728: PUSH
17729: LD_INT 61
17731: PUSH
17732: EMPTY
17733: LIST
17734: PUSH
17735: LD_INT 33
17737: PUSH
17738: LD_INT 2
17740: PUSH
17741: EMPTY
17742: LIST
17743: LIST
17744: PUSH
17745: EMPTY
17746: LIST
17747: LIST
17748: LIST
17749: PPUSH
17750: CALL_OW 69
17754: ST_TO_ADDR
// if not tmp then
17755: LD_VAR 0 1
17759: NOT
17760: IFFALSE 17764
// exit ;
17762: GO 17801
// for i in tmp do
17764: LD_ADDR_VAR 0 2
17768: PUSH
17769: LD_VAR 0 1
17773: PUSH
17774: FOR_IN
17775: IFFALSE 17799
// if IsControledBy ( i ) then
17777: LD_VAR 0 2
17781: PPUSH
17782: CALL_OW 312
17786: IFFALSE 17797
// ComUnlink ( i ) ;
17788: LD_VAR 0 2
17792: PPUSH
17793: CALL_OW 136
17797: GO 17774
17799: POP
17800: POP
// end ;
17801: PPOPN 2
17803: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
17804: LD_EXP 31
17808: PUSH
17809: LD_EXP 62
17813: AND
17814: IFFALSE 17954
17816: GO 17818
17818: DISABLE
17819: LD_INT 0
17821: PPUSH
17822: PPUSH
// begin ToLua ( displayPowell(); ) ;
17823: LD_STRING displayPowell();
17825: PPUSH
17826: CALL_OW 559
// uc_side := 0 ;
17830: LD_ADDR_OWVAR 20
17834: PUSH
17835: LD_INT 0
17837: ST_TO_ADDR
// uc_nation := 2 ;
17838: LD_ADDR_OWVAR 21
17842: PUSH
17843: LD_INT 2
17845: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
17846: LD_ADDR_OWVAR 37
17850: PUSH
17851: LD_INT 14
17853: ST_TO_ADDR
// vc_engine := engine_siberite ;
17854: LD_ADDR_OWVAR 39
17858: PUSH
17859: LD_INT 3
17861: ST_TO_ADDR
// vc_control := control_apeman ;
17862: LD_ADDR_OWVAR 38
17866: PUSH
17867: LD_INT 5
17869: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
17870: LD_ADDR_OWVAR 40
17874: PUSH
17875: LD_INT 29
17877: ST_TO_ADDR
// un := CreateVehicle ;
17878: LD_ADDR_VAR 0 2
17882: PUSH
17883: CALL_OW 45
17887: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
17888: LD_VAR 0 2
17892: PPUSH
17893: LD_INT 1
17895: PPUSH
17896: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
17900: LD_INT 35
17902: PPUSH
17903: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
17907: LD_VAR 0 2
17911: PPUSH
17912: LD_INT 22
17914: PUSH
17915: LD_OWVAR 2
17919: PUSH
17920: EMPTY
17921: LIST
17922: LIST
17923: PPUSH
17924: CALL_OW 69
17928: PPUSH
17929: LD_VAR 0 2
17933: PPUSH
17934: CALL_OW 74
17938: PPUSH
17939: CALL_OW 115
// until IsDead ( un ) ;
17943: LD_VAR 0 2
17947: PPUSH
17948: CALL_OW 301
17952: IFFALSE 17900
// end ;
17954: PPOPN 2
17956: END
// every 0 0$1 trigger StreamModeActive and sStu do
17957: LD_EXP 31
17961: PUSH
17962: LD_EXP 70
17966: AND
17967: IFFALSE 17983
17969: GO 17971
17971: DISABLE
// begin ToLua ( displayStucuk(); ) ;
17972: LD_STRING displayStucuk();
17974: PPUSH
17975: CALL_OW 559
// ResetFog ;
17979: CALL_OW 335
// end ;
17983: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
17984: LD_EXP 31
17988: PUSH
17989: LD_EXP 63
17993: AND
17994: IFFALSE 18135
17996: GO 17998
17998: DISABLE
17999: LD_INT 0
18001: PPUSH
18002: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
18003: LD_ADDR_VAR 0 2
18007: PUSH
18008: LD_INT 22
18010: PUSH
18011: LD_OWVAR 2
18015: PUSH
18016: EMPTY
18017: LIST
18018: LIST
18019: PUSH
18020: LD_INT 21
18022: PUSH
18023: LD_INT 1
18025: PUSH
18026: EMPTY
18027: LIST
18028: LIST
18029: PUSH
18030: EMPTY
18031: LIST
18032: LIST
18033: PPUSH
18034: CALL_OW 69
18038: ST_TO_ADDR
// if not tmp then
18039: LD_VAR 0 2
18043: NOT
18044: IFFALSE 18048
// exit ;
18046: GO 18135
// un := tmp [ rand ( 1 , tmp ) ] ;
18048: LD_ADDR_VAR 0 1
18052: PUSH
18053: LD_VAR 0 2
18057: PUSH
18058: LD_INT 1
18060: PPUSH
18061: LD_VAR 0 2
18065: PPUSH
18066: CALL_OW 12
18070: ARRAY
18071: ST_TO_ADDR
// SetSide ( un , 0 ) ;
18072: LD_VAR 0 1
18076: PPUSH
18077: LD_INT 0
18079: PPUSH
18080: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
18084: LD_VAR 0 1
18088: PPUSH
18089: LD_OWVAR 3
18093: PUSH
18094: LD_VAR 0 1
18098: DIFF
18099: PPUSH
18100: LD_VAR 0 1
18104: PPUSH
18105: CALL_OW 74
18109: PPUSH
18110: CALL_OW 115
// wait ( 0 0$20 ) ;
18114: LD_INT 700
18116: PPUSH
18117: CALL_OW 67
// SetSide ( un , your_side ) ;
18121: LD_VAR 0 1
18125: PPUSH
18126: LD_OWVAR 2
18130: PPUSH
18131: CALL_OW 235
// end ;
18135: PPOPN 2
18137: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
18138: LD_EXP 31
18142: PUSH
18143: LD_EXP 64
18147: AND
18148: IFFALSE 18254
18150: GO 18152
18152: DISABLE
18153: LD_INT 0
18155: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18156: LD_ADDR_VAR 0 1
18160: PUSH
18161: LD_INT 22
18163: PUSH
18164: LD_OWVAR 2
18168: PUSH
18169: EMPTY
18170: LIST
18171: LIST
18172: PUSH
18173: LD_INT 2
18175: PUSH
18176: LD_INT 30
18178: PUSH
18179: LD_INT 0
18181: PUSH
18182: EMPTY
18183: LIST
18184: LIST
18185: PUSH
18186: LD_INT 30
18188: PUSH
18189: LD_INT 1
18191: PUSH
18192: EMPTY
18193: LIST
18194: LIST
18195: PUSH
18196: EMPTY
18197: LIST
18198: LIST
18199: LIST
18200: PUSH
18201: EMPTY
18202: LIST
18203: LIST
18204: PPUSH
18205: CALL_OW 69
18209: ST_TO_ADDR
// if not depot then
18210: LD_VAR 0 1
18214: NOT
18215: IFFALSE 18219
// exit ;
18217: GO 18254
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
18219: LD_VAR 0 1
18223: PUSH
18224: LD_INT 1
18226: ARRAY
18227: PPUSH
18228: CALL_OW 250
18232: PPUSH
18233: LD_VAR 0 1
18237: PUSH
18238: LD_INT 1
18240: ARRAY
18241: PPUSH
18242: CALL_OW 251
18246: PPUSH
18247: LD_INT 70
18249: PPUSH
18250: CALL_OW 495
// end ;
18254: PPOPN 1
18256: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
18257: LD_EXP 31
18261: PUSH
18262: LD_EXP 65
18266: AND
18267: IFFALSE 18478
18269: GO 18271
18271: DISABLE
18272: LD_INT 0
18274: PPUSH
18275: PPUSH
18276: PPUSH
18277: PPUSH
18278: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
18279: LD_ADDR_VAR 0 5
18283: PUSH
18284: LD_INT 22
18286: PUSH
18287: LD_OWVAR 2
18291: PUSH
18292: EMPTY
18293: LIST
18294: LIST
18295: PUSH
18296: LD_INT 21
18298: PUSH
18299: LD_INT 1
18301: PUSH
18302: EMPTY
18303: LIST
18304: LIST
18305: PUSH
18306: EMPTY
18307: LIST
18308: LIST
18309: PPUSH
18310: CALL_OW 69
18314: ST_TO_ADDR
// if not tmp then
18315: LD_VAR 0 5
18319: NOT
18320: IFFALSE 18324
// exit ;
18322: GO 18478
// for i in tmp do
18324: LD_ADDR_VAR 0 1
18328: PUSH
18329: LD_VAR 0 5
18333: PUSH
18334: FOR_IN
18335: IFFALSE 18476
// begin d := rand ( 0 , 5 ) ;
18337: LD_ADDR_VAR 0 4
18341: PUSH
18342: LD_INT 0
18344: PPUSH
18345: LD_INT 5
18347: PPUSH
18348: CALL_OW 12
18352: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
18353: LD_ADDR_VAR 0 2
18357: PUSH
18358: LD_VAR 0 1
18362: PPUSH
18363: CALL_OW 250
18367: PPUSH
18368: LD_VAR 0 4
18372: PPUSH
18373: LD_INT 3
18375: PPUSH
18376: LD_INT 12
18378: PPUSH
18379: CALL_OW 12
18383: PPUSH
18384: CALL_OW 272
18388: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
18389: LD_ADDR_VAR 0 3
18393: PUSH
18394: LD_VAR 0 1
18398: PPUSH
18399: CALL_OW 251
18403: PPUSH
18404: LD_VAR 0 4
18408: PPUSH
18409: LD_INT 3
18411: PPUSH
18412: LD_INT 12
18414: PPUSH
18415: CALL_OW 12
18419: PPUSH
18420: CALL_OW 273
18424: ST_TO_ADDR
// if ValidHex ( x , y ) then
18425: LD_VAR 0 2
18429: PPUSH
18430: LD_VAR 0 3
18434: PPUSH
18435: CALL_OW 488
18439: IFFALSE 18474
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
18441: LD_VAR 0 1
18445: PPUSH
18446: LD_VAR 0 2
18450: PPUSH
18451: LD_VAR 0 3
18455: PPUSH
18456: LD_INT 3
18458: PPUSH
18459: LD_INT 6
18461: PPUSH
18462: CALL_OW 12
18466: PPUSH
18467: LD_INT 1
18469: PPUSH
18470: CALL_OW 483
// end ;
18474: GO 18334
18476: POP
18477: POP
// end ;
18478: PPOPN 5
18480: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
18481: LD_EXP 31
18485: PUSH
18486: LD_EXP 66
18490: AND
18491: IFFALSE 18585
18493: GO 18495
18495: DISABLE
18496: LD_INT 0
18498: PPUSH
18499: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
18500: LD_ADDR_VAR 0 2
18504: PUSH
18505: LD_INT 22
18507: PUSH
18508: LD_OWVAR 2
18512: PUSH
18513: EMPTY
18514: LIST
18515: LIST
18516: PUSH
18517: LD_INT 32
18519: PUSH
18520: LD_INT 1
18522: PUSH
18523: EMPTY
18524: LIST
18525: LIST
18526: PUSH
18527: LD_INT 21
18529: PUSH
18530: LD_INT 2
18532: PUSH
18533: EMPTY
18534: LIST
18535: LIST
18536: PUSH
18537: EMPTY
18538: LIST
18539: LIST
18540: LIST
18541: PPUSH
18542: CALL_OW 69
18546: ST_TO_ADDR
// if not tmp then
18547: LD_VAR 0 2
18551: NOT
18552: IFFALSE 18556
// exit ;
18554: GO 18585
// for i in tmp do
18556: LD_ADDR_VAR 0 1
18560: PUSH
18561: LD_VAR 0 2
18565: PUSH
18566: FOR_IN
18567: IFFALSE 18583
// SetFuel ( i , 0 ) ;
18569: LD_VAR 0 1
18573: PPUSH
18574: LD_INT 0
18576: PPUSH
18577: CALL_OW 240
18581: GO 18566
18583: POP
18584: POP
// end ;
18585: PPOPN 2
18587: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
18588: LD_EXP 31
18592: PUSH
18593: LD_EXP 67
18597: AND
18598: IFFALSE 18664
18600: GO 18602
18602: DISABLE
18603: LD_INT 0
18605: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
18606: LD_ADDR_VAR 0 1
18610: PUSH
18611: LD_INT 22
18613: PUSH
18614: LD_OWVAR 2
18618: PUSH
18619: EMPTY
18620: LIST
18621: LIST
18622: PUSH
18623: LD_INT 30
18625: PUSH
18626: LD_INT 29
18628: PUSH
18629: EMPTY
18630: LIST
18631: LIST
18632: PUSH
18633: EMPTY
18634: LIST
18635: LIST
18636: PPUSH
18637: CALL_OW 69
18641: ST_TO_ADDR
// if not tmp then
18642: LD_VAR 0 1
18646: NOT
18647: IFFALSE 18651
// exit ;
18649: GO 18664
// DestroyUnit ( tmp [ 1 ] ) ;
18651: LD_VAR 0 1
18655: PUSH
18656: LD_INT 1
18658: ARRAY
18659: PPUSH
18660: CALL_OW 65
// end ;
18664: PPOPN 1
18666: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
18667: LD_EXP 31
18671: PUSH
18672: LD_EXP 69
18676: AND
18677: IFFALSE 18806
18679: GO 18681
18681: DISABLE
18682: LD_INT 0
18684: PPUSH
// begin uc_side := 0 ;
18685: LD_ADDR_OWVAR 20
18689: PUSH
18690: LD_INT 0
18692: ST_TO_ADDR
// uc_nation := nation_arabian ;
18693: LD_ADDR_OWVAR 21
18697: PUSH
18698: LD_INT 2
18700: ST_TO_ADDR
// hc_gallery :=  ;
18701: LD_ADDR_OWVAR 33
18705: PUSH
18706: LD_STRING 
18708: ST_TO_ADDR
// hc_name :=  ;
18709: LD_ADDR_OWVAR 26
18713: PUSH
18714: LD_STRING 
18716: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
18717: LD_INT 1
18719: PPUSH
18720: LD_INT 11
18722: PPUSH
18723: LD_INT 10
18725: PPUSH
18726: CALL_OW 380
// un := CreateHuman ;
18730: LD_ADDR_VAR 0 1
18734: PUSH
18735: CALL_OW 44
18739: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
18740: LD_VAR 0 1
18744: PPUSH
18745: LD_INT 1
18747: PPUSH
18748: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
18752: LD_INT 35
18754: PPUSH
18755: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
18759: LD_VAR 0 1
18763: PPUSH
18764: LD_INT 22
18766: PUSH
18767: LD_OWVAR 2
18771: PUSH
18772: EMPTY
18773: LIST
18774: LIST
18775: PPUSH
18776: CALL_OW 69
18780: PPUSH
18781: LD_VAR 0 1
18785: PPUSH
18786: CALL_OW 74
18790: PPUSH
18791: CALL_OW 115
// until IsDead ( un ) ;
18795: LD_VAR 0 1
18799: PPUSH
18800: CALL_OW 301
18804: IFFALSE 18752
// end ;
18806: PPOPN 1
18808: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
18809: LD_EXP 31
18813: PUSH
18814: LD_EXP 71
18818: AND
18819: IFFALSE 18831
18821: GO 18823
18823: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
18824: LD_STRING earthquake(getX(game), 0, 32)
18826: PPUSH
18827: CALL_OW 559
18831: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
18832: LD_EXP 31
18836: PUSH
18837: LD_EXP 72
18841: AND
18842: IFFALSE 18933
18844: GO 18846
18846: DISABLE
18847: LD_INT 0
18849: PPUSH
// begin enable ;
18850: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
18851: LD_ADDR_VAR 0 1
18855: PUSH
18856: LD_INT 22
18858: PUSH
18859: LD_OWVAR 2
18863: PUSH
18864: EMPTY
18865: LIST
18866: LIST
18867: PUSH
18868: LD_INT 21
18870: PUSH
18871: LD_INT 2
18873: PUSH
18874: EMPTY
18875: LIST
18876: LIST
18877: PUSH
18878: LD_INT 33
18880: PUSH
18881: LD_INT 3
18883: PUSH
18884: EMPTY
18885: LIST
18886: LIST
18887: PUSH
18888: EMPTY
18889: LIST
18890: LIST
18891: LIST
18892: PPUSH
18893: CALL_OW 69
18897: ST_TO_ADDR
// if not tmp then
18898: LD_VAR 0 1
18902: NOT
18903: IFFALSE 18907
// exit ;
18905: GO 18933
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
18907: LD_VAR 0 1
18911: PUSH
18912: LD_INT 1
18914: PPUSH
18915: LD_VAR 0 1
18919: PPUSH
18920: CALL_OW 12
18924: ARRAY
18925: PPUSH
18926: LD_INT 1
18928: PPUSH
18929: CALL_OW 234
// end ;
18933: PPOPN 1
18935: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
18936: LD_EXP 31
18940: PUSH
18941: LD_EXP 73
18945: AND
18946: IFFALSE 19087
18948: GO 18950
18950: DISABLE
18951: LD_INT 0
18953: PPUSH
18954: PPUSH
18955: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18956: LD_ADDR_VAR 0 3
18960: PUSH
18961: LD_INT 22
18963: PUSH
18964: LD_OWVAR 2
18968: PUSH
18969: EMPTY
18970: LIST
18971: LIST
18972: PUSH
18973: LD_INT 25
18975: PUSH
18976: LD_INT 1
18978: PUSH
18979: EMPTY
18980: LIST
18981: LIST
18982: PUSH
18983: EMPTY
18984: LIST
18985: LIST
18986: PPUSH
18987: CALL_OW 69
18991: ST_TO_ADDR
// if not tmp then
18992: LD_VAR 0 3
18996: NOT
18997: IFFALSE 19001
// exit ;
18999: GO 19087
// un := tmp [ rand ( 1 , tmp ) ] ;
19001: LD_ADDR_VAR 0 2
19005: PUSH
19006: LD_VAR 0 3
19010: PUSH
19011: LD_INT 1
19013: PPUSH
19014: LD_VAR 0 3
19018: PPUSH
19019: CALL_OW 12
19023: ARRAY
19024: ST_TO_ADDR
// if Crawls ( un ) then
19025: LD_VAR 0 2
19029: PPUSH
19030: CALL_OW 318
19034: IFFALSE 19045
// ComWalk ( un ) ;
19036: LD_VAR 0 2
19040: PPUSH
19041: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
19045: LD_VAR 0 2
19049: PPUSH
19050: LD_INT 9
19052: PPUSH
19053: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
19057: LD_INT 28
19059: PPUSH
19060: LD_OWVAR 2
19064: PPUSH
19065: LD_INT 2
19067: PPUSH
19068: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
19072: LD_INT 29
19074: PPUSH
19075: LD_OWVAR 2
19079: PPUSH
19080: LD_INT 2
19082: PPUSH
19083: CALL_OW 322
// end ;
19087: PPOPN 3
19089: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
19090: LD_EXP 31
19094: PUSH
19095: LD_EXP 74
19099: AND
19100: IFFALSE 19211
19102: GO 19104
19104: DISABLE
19105: LD_INT 0
19107: PPUSH
19108: PPUSH
19109: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
19110: LD_ADDR_VAR 0 3
19114: PUSH
19115: LD_INT 22
19117: PUSH
19118: LD_OWVAR 2
19122: PUSH
19123: EMPTY
19124: LIST
19125: LIST
19126: PUSH
19127: LD_INT 25
19129: PUSH
19130: LD_INT 1
19132: PUSH
19133: EMPTY
19134: LIST
19135: LIST
19136: PUSH
19137: EMPTY
19138: LIST
19139: LIST
19140: PPUSH
19141: CALL_OW 69
19145: ST_TO_ADDR
// if not tmp then
19146: LD_VAR 0 3
19150: NOT
19151: IFFALSE 19155
// exit ;
19153: GO 19211
// un := tmp [ rand ( 1 , tmp ) ] ;
19155: LD_ADDR_VAR 0 2
19159: PUSH
19160: LD_VAR 0 3
19164: PUSH
19165: LD_INT 1
19167: PPUSH
19168: LD_VAR 0 3
19172: PPUSH
19173: CALL_OW 12
19177: ARRAY
19178: ST_TO_ADDR
// if Crawls ( un ) then
19179: LD_VAR 0 2
19183: PPUSH
19184: CALL_OW 318
19188: IFFALSE 19199
// ComWalk ( un ) ;
19190: LD_VAR 0 2
19194: PPUSH
19195: CALL_OW 138
// SetClass ( un , class_mortar ) ;
19199: LD_VAR 0 2
19203: PPUSH
19204: LD_INT 8
19206: PPUSH
19207: CALL_OW 336
// end ;
19211: PPOPN 3
19213: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
19214: LD_EXP 31
19218: PUSH
19219: LD_EXP 75
19223: AND
19224: IFFALSE 19368
19226: GO 19228
19228: DISABLE
19229: LD_INT 0
19231: PPUSH
19232: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
19233: LD_ADDR_VAR 0 2
19237: PUSH
19238: LD_INT 22
19240: PUSH
19241: LD_OWVAR 2
19245: PUSH
19246: EMPTY
19247: LIST
19248: LIST
19249: PUSH
19250: LD_INT 21
19252: PUSH
19253: LD_INT 2
19255: PUSH
19256: EMPTY
19257: LIST
19258: LIST
19259: PUSH
19260: LD_INT 2
19262: PUSH
19263: LD_INT 34
19265: PUSH
19266: LD_INT 12
19268: PUSH
19269: EMPTY
19270: LIST
19271: LIST
19272: PUSH
19273: LD_INT 34
19275: PUSH
19276: LD_INT 51
19278: PUSH
19279: EMPTY
19280: LIST
19281: LIST
19282: PUSH
19283: LD_INT 34
19285: PUSH
19286: LD_INT 32
19288: PUSH
19289: EMPTY
19290: LIST
19291: LIST
19292: PUSH
19293: EMPTY
19294: LIST
19295: LIST
19296: LIST
19297: LIST
19298: PUSH
19299: EMPTY
19300: LIST
19301: LIST
19302: LIST
19303: PPUSH
19304: CALL_OW 69
19308: ST_TO_ADDR
// if not tmp then
19309: LD_VAR 0 2
19313: NOT
19314: IFFALSE 19318
// exit ;
19316: GO 19368
// for i in tmp do
19318: LD_ADDR_VAR 0 1
19322: PUSH
19323: LD_VAR 0 2
19327: PUSH
19328: FOR_IN
19329: IFFALSE 19366
// if GetCargo ( i , mat_artifact ) = 0 then
19331: LD_VAR 0 1
19335: PPUSH
19336: LD_INT 4
19338: PPUSH
19339: CALL_OW 289
19343: PUSH
19344: LD_INT 0
19346: EQUAL
19347: IFFALSE 19364
// SetCargo ( i , mat_siberit , 100 ) ;
19349: LD_VAR 0 1
19353: PPUSH
19354: LD_INT 3
19356: PPUSH
19357: LD_INT 100
19359: PPUSH
19360: CALL_OW 290
19364: GO 19328
19366: POP
19367: POP
// end ;
19368: PPOPN 2
19370: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
19371: LD_EXP 31
19375: PUSH
19376: LD_EXP 76
19380: AND
19381: IFFALSE 19564
19383: GO 19385
19385: DISABLE
19386: LD_INT 0
19388: PPUSH
19389: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
19390: LD_ADDR_VAR 0 2
19394: PUSH
19395: LD_INT 22
19397: PUSH
19398: LD_OWVAR 2
19402: PUSH
19403: EMPTY
19404: LIST
19405: LIST
19406: PPUSH
19407: CALL_OW 69
19411: ST_TO_ADDR
// if not tmp then
19412: LD_VAR 0 2
19416: NOT
19417: IFFALSE 19421
// exit ;
19419: GO 19564
// for i := 1 to 2 do
19421: LD_ADDR_VAR 0 1
19425: PUSH
19426: DOUBLE
19427: LD_INT 1
19429: DEC
19430: ST_TO_ADDR
19431: LD_INT 2
19433: PUSH
19434: FOR_TO
19435: IFFALSE 19562
// begin uc_side := your_side ;
19437: LD_ADDR_OWVAR 20
19441: PUSH
19442: LD_OWVAR 2
19446: ST_TO_ADDR
// uc_nation := nation_american ;
19447: LD_ADDR_OWVAR 21
19451: PUSH
19452: LD_INT 1
19454: ST_TO_ADDR
// vc_chassis := us_morphling ;
19455: LD_ADDR_OWVAR 37
19459: PUSH
19460: LD_INT 5
19462: ST_TO_ADDR
// vc_engine := engine_siberite ;
19463: LD_ADDR_OWVAR 39
19467: PUSH
19468: LD_INT 3
19470: ST_TO_ADDR
// vc_control := control_computer ;
19471: LD_ADDR_OWVAR 38
19475: PUSH
19476: LD_INT 3
19478: ST_TO_ADDR
// vc_weapon := us_double_laser ;
19479: LD_ADDR_OWVAR 40
19483: PUSH
19484: LD_INT 10
19486: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
19487: LD_VAR 0 2
19491: PUSH
19492: LD_INT 1
19494: ARRAY
19495: PPUSH
19496: CALL_OW 310
19500: NOT
19501: IFFALSE 19548
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
19503: CALL_OW 45
19507: PPUSH
19508: LD_VAR 0 2
19512: PUSH
19513: LD_INT 1
19515: ARRAY
19516: PPUSH
19517: CALL_OW 250
19521: PPUSH
19522: LD_VAR 0 2
19526: PUSH
19527: LD_INT 1
19529: ARRAY
19530: PPUSH
19531: CALL_OW 251
19535: PPUSH
19536: LD_INT 12
19538: PPUSH
19539: LD_INT 1
19541: PPUSH
19542: CALL_OW 50
19546: GO 19560
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
19548: CALL_OW 45
19552: PPUSH
19553: LD_INT 1
19555: PPUSH
19556: CALL_OW 51
// end ;
19560: GO 19434
19562: POP
19563: POP
// end ;
19564: PPOPN 2
19566: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
19567: LD_EXP 31
19571: PUSH
19572: LD_EXP 77
19576: AND
19577: IFFALSE 19799
19579: GO 19581
19581: DISABLE
19582: LD_INT 0
19584: PPUSH
19585: PPUSH
19586: PPUSH
19587: PPUSH
19588: PPUSH
19589: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
19590: LD_ADDR_VAR 0 6
19594: PUSH
19595: LD_INT 22
19597: PUSH
19598: LD_OWVAR 2
19602: PUSH
19603: EMPTY
19604: LIST
19605: LIST
19606: PUSH
19607: LD_INT 21
19609: PUSH
19610: LD_INT 1
19612: PUSH
19613: EMPTY
19614: LIST
19615: LIST
19616: PUSH
19617: LD_INT 3
19619: PUSH
19620: LD_INT 23
19622: PUSH
19623: LD_INT 0
19625: PUSH
19626: EMPTY
19627: LIST
19628: LIST
19629: PUSH
19630: EMPTY
19631: LIST
19632: LIST
19633: PUSH
19634: EMPTY
19635: LIST
19636: LIST
19637: LIST
19638: PPUSH
19639: CALL_OW 69
19643: ST_TO_ADDR
// if not tmp then
19644: LD_VAR 0 6
19648: NOT
19649: IFFALSE 19653
// exit ;
19651: GO 19799
// s1 := rand ( 1 , 4 ) ;
19653: LD_ADDR_VAR 0 2
19657: PUSH
19658: LD_INT 1
19660: PPUSH
19661: LD_INT 4
19663: PPUSH
19664: CALL_OW 12
19668: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
19669: LD_ADDR_VAR 0 4
19673: PUSH
19674: LD_VAR 0 6
19678: PUSH
19679: LD_INT 1
19681: ARRAY
19682: PPUSH
19683: LD_VAR 0 2
19687: PPUSH
19688: CALL_OW 259
19692: ST_TO_ADDR
// if s1 = 1 then
19693: LD_VAR 0 2
19697: PUSH
19698: LD_INT 1
19700: EQUAL
19701: IFFALSE 19721
// s2 := rand ( 2 , 4 ) else
19703: LD_ADDR_VAR 0 3
19707: PUSH
19708: LD_INT 2
19710: PPUSH
19711: LD_INT 4
19713: PPUSH
19714: CALL_OW 12
19718: ST_TO_ADDR
19719: GO 19729
// s2 := 1 ;
19721: LD_ADDR_VAR 0 3
19725: PUSH
19726: LD_INT 1
19728: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
19729: LD_ADDR_VAR 0 5
19733: PUSH
19734: LD_VAR 0 6
19738: PUSH
19739: LD_INT 1
19741: ARRAY
19742: PPUSH
19743: LD_VAR 0 3
19747: PPUSH
19748: CALL_OW 259
19752: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
19753: LD_VAR 0 6
19757: PUSH
19758: LD_INT 1
19760: ARRAY
19761: PPUSH
19762: LD_VAR 0 2
19766: PPUSH
19767: LD_VAR 0 5
19771: PPUSH
19772: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
19776: LD_VAR 0 6
19780: PUSH
19781: LD_INT 1
19783: ARRAY
19784: PPUSH
19785: LD_VAR 0 3
19789: PPUSH
19790: LD_VAR 0 4
19794: PPUSH
19795: CALL_OW 237
// end ;
19799: PPOPN 6
19801: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
19802: LD_EXP 31
19806: PUSH
19807: LD_EXP 78
19811: AND
19812: IFFALSE 19891
19814: GO 19816
19816: DISABLE
19817: LD_INT 0
19819: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
19820: LD_ADDR_VAR 0 1
19824: PUSH
19825: LD_INT 22
19827: PUSH
19828: LD_OWVAR 2
19832: PUSH
19833: EMPTY
19834: LIST
19835: LIST
19836: PUSH
19837: LD_INT 30
19839: PUSH
19840: LD_INT 3
19842: PUSH
19843: EMPTY
19844: LIST
19845: LIST
19846: PUSH
19847: EMPTY
19848: LIST
19849: LIST
19850: PPUSH
19851: CALL_OW 69
19855: ST_TO_ADDR
// if not tmp then
19856: LD_VAR 0 1
19860: NOT
19861: IFFALSE 19865
// exit ;
19863: GO 19891
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
19865: LD_VAR 0 1
19869: PUSH
19870: LD_INT 1
19872: PPUSH
19873: LD_VAR 0 1
19877: PPUSH
19878: CALL_OW 12
19882: ARRAY
19883: PPUSH
19884: LD_INT 1
19886: PPUSH
19887: CALL_OW 234
// end ;
19891: PPOPN 1
19893: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
19894: LD_EXP 31
19898: PUSH
19899: LD_EXP 79
19903: AND
19904: IFFALSE 20016
19906: GO 19908
19908: DISABLE
19909: LD_INT 0
19911: PPUSH
19912: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
19913: LD_ADDR_VAR 0 2
19917: PUSH
19918: LD_INT 22
19920: PUSH
19921: LD_OWVAR 2
19925: PUSH
19926: EMPTY
19927: LIST
19928: LIST
19929: PUSH
19930: LD_INT 2
19932: PUSH
19933: LD_INT 30
19935: PUSH
19936: LD_INT 27
19938: PUSH
19939: EMPTY
19940: LIST
19941: LIST
19942: PUSH
19943: LD_INT 30
19945: PUSH
19946: LD_INT 26
19948: PUSH
19949: EMPTY
19950: LIST
19951: LIST
19952: PUSH
19953: LD_INT 30
19955: PUSH
19956: LD_INT 28
19958: PUSH
19959: EMPTY
19960: LIST
19961: LIST
19962: PUSH
19963: EMPTY
19964: LIST
19965: LIST
19966: LIST
19967: LIST
19968: PUSH
19969: EMPTY
19970: LIST
19971: LIST
19972: PPUSH
19973: CALL_OW 69
19977: ST_TO_ADDR
// if not tmp then
19978: LD_VAR 0 2
19982: NOT
19983: IFFALSE 19987
// exit ;
19985: GO 20016
// for i in tmp do
19987: LD_ADDR_VAR 0 1
19991: PUSH
19992: LD_VAR 0 2
19996: PUSH
19997: FOR_IN
19998: IFFALSE 20014
// SetLives ( i , 1 ) ;
20000: LD_VAR 0 1
20004: PPUSH
20005: LD_INT 1
20007: PPUSH
20008: CALL_OW 234
20012: GO 19997
20014: POP
20015: POP
// end ;
20016: PPOPN 2
20018: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
20019: LD_EXP 31
20023: PUSH
20024: LD_EXP 80
20028: AND
20029: IFFALSE 20316
20031: GO 20033
20033: DISABLE
20034: LD_INT 0
20036: PPUSH
20037: PPUSH
20038: PPUSH
// begin i := rand ( 1 , 7 ) ;
20039: LD_ADDR_VAR 0 1
20043: PUSH
20044: LD_INT 1
20046: PPUSH
20047: LD_INT 7
20049: PPUSH
20050: CALL_OW 12
20054: ST_TO_ADDR
// case i of 1 :
20055: LD_VAR 0 1
20059: PUSH
20060: LD_INT 1
20062: DOUBLE
20063: EQUAL
20064: IFTRUE 20068
20066: GO 20078
20068: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
20069: LD_STRING earthquake(getX(game), 0, 32)
20071: PPUSH
20072: CALL_OW 559
20076: GO 20316
20078: LD_INT 2
20080: DOUBLE
20081: EQUAL
20082: IFTRUE 20086
20084: GO 20100
20086: POP
// begin ToLua ( displayStucuk(); ) ;
20087: LD_STRING displayStucuk();
20089: PPUSH
20090: CALL_OW 559
// ResetFog ;
20094: CALL_OW 335
// end ; 3 :
20098: GO 20316
20100: LD_INT 3
20102: DOUBLE
20103: EQUAL
20104: IFTRUE 20108
20106: GO 20212
20108: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
20109: LD_ADDR_VAR 0 2
20113: PUSH
20114: LD_INT 22
20116: PUSH
20117: LD_OWVAR 2
20121: PUSH
20122: EMPTY
20123: LIST
20124: LIST
20125: PUSH
20126: LD_INT 25
20128: PUSH
20129: LD_INT 1
20131: PUSH
20132: EMPTY
20133: LIST
20134: LIST
20135: PUSH
20136: EMPTY
20137: LIST
20138: LIST
20139: PPUSH
20140: CALL_OW 69
20144: ST_TO_ADDR
// if not tmp then
20145: LD_VAR 0 2
20149: NOT
20150: IFFALSE 20154
// exit ;
20152: GO 20316
// un := tmp [ rand ( 1 , tmp ) ] ;
20154: LD_ADDR_VAR 0 3
20158: PUSH
20159: LD_VAR 0 2
20163: PUSH
20164: LD_INT 1
20166: PPUSH
20167: LD_VAR 0 2
20171: PPUSH
20172: CALL_OW 12
20176: ARRAY
20177: ST_TO_ADDR
// if Crawls ( un ) then
20178: LD_VAR 0 3
20182: PPUSH
20183: CALL_OW 318
20187: IFFALSE 20198
// ComWalk ( un ) ;
20189: LD_VAR 0 3
20193: PPUSH
20194: CALL_OW 138
// SetClass ( un , class_mortar ) ;
20198: LD_VAR 0 3
20202: PPUSH
20203: LD_INT 8
20205: PPUSH
20206: CALL_OW 336
// end ; 4 :
20210: GO 20316
20212: LD_INT 4
20214: DOUBLE
20215: EQUAL
20216: IFTRUE 20220
20218: GO 20294
20220: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
20221: LD_ADDR_VAR 0 2
20225: PUSH
20226: LD_INT 22
20228: PUSH
20229: LD_OWVAR 2
20233: PUSH
20234: EMPTY
20235: LIST
20236: LIST
20237: PUSH
20238: LD_INT 30
20240: PUSH
20241: LD_INT 29
20243: PUSH
20244: EMPTY
20245: LIST
20246: LIST
20247: PUSH
20248: EMPTY
20249: LIST
20250: LIST
20251: PPUSH
20252: CALL_OW 69
20256: ST_TO_ADDR
// if not tmp then
20257: LD_VAR 0 2
20261: NOT
20262: IFFALSE 20266
// exit ;
20264: GO 20316
// CenterNowOnUnits ( tmp [ 1 ] ) ;
20266: LD_VAR 0 2
20270: PUSH
20271: LD_INT 1
20273: ARRAY
20274: PPUSH
20275: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
20279: LD_VAR 0 2
20283: PUSH
20284: LD_INT 1
20286: ARRAY
20287: PPUSH
20288: CALL_OW 65
// end ; 5 .. 7 :
20292: GO 20316
20294: LD_INT 5
20296: DOUBLE
20297: GREATEREQUAL
20298: IFFALSE 20306
20300: LD_INT 7
20302: DOUBLE
20303: LESSEQUAL
20304: IFTRUE 20308
20306: GO 20315
20308: POP
// StreamSibBomb ; end ;
20309: CALL 16553 0 0
20313: GO 20316
20315: POP
// end ;
20316: PPOPN 3
20318: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
20319: LD_EXP 31
20323: PUSH
20324: LD_EXP 81
20328: AND
20329: IFFALSE 20485
20331: GO 20333
20333: DISABLE
20334: LD_INT 0
20336: PPUSH
20337: PPUSH
20338: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
20339: LD_ADDR_VAR 0 2
20343: PUSH
20344: LD_INT 81
20346: PUSH
20347: LD_OWVAR 2
20351: PUSH
20352: EMPTY
20353: LIST
20354: LIST
20355: PUSH
20356: LD_INT 2
20358: PUSH
20359: LD_INT 21
20361: PUSH
20362: LD_INT 1
20364: PUSH
20365: EMPTY
20366: LIST
20367: LIST
20368: PUSH
20369: LD_INT 21
20371: PUSH
20372: LD_INT 2
20374: PUSH
20375: EMPTY
20376: LIST
20377: LIST
20378: PUSH
20379: EMPTY
20380: LIST
20381: LIST
20382: LIST
20383: PUSH
20384: EMPTY
20385: LIST
20386: LIST
20387: PPUSH
20388: CALL_OW 69
20392: ST_TO_ADDR
// if not tmp then
20393: LD_VAR 0 2
20397: NOT
20398: IFFALSE 20402
// exit ;
20400: GO 20485
// p := 0 ;
20402: LD_ADDR_VAR 0 3
20406: PUSH
20407: LD_INT 0
20409: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
20410: LD_INT 35
20412: PPUSH
20413: CALL_OW 67
// p := p + 1 ;
20417: LD_ADDR_VAR 0 3
20421: PUSH
20422: LD_VAR 0 3
20426: PUSH
20427: LD_INT 1
20429: PLUS
20430: ST_TO_ADDR
// for i in tmp do
20431: LD_ADDR_VAR 0 1
20435: PUSH
20436: LD_VAR 0 2
20440: PUSH
20441: FOR_IN
20442: IFFALSE 20473
// if GetLives ( i ) < 1000 then
20444: LD_VAR 0 1
20448: PPUSH
20449: CALL_OW 256
20453: PUSH
20454: LD_INT 1000
20456: LESS
20457: IFFALSE 20471
// SetLives ( i , 1000 ) ;
20459: LD_VAR 0 1
20463: PPUSH
20464: LD_INT 1000
20466: PPUSH
20467: CALL_OW 234
20471: GO 20441
20473: POP
20474: POP
// until p > 20 ;
20475: LD_VAR 0 3
20479: PUSH
20480: LD_INT 20
20482: GREATER
20483: IFFALSE 20410
// end ;
20485: PPOPN 3
20487: END
// every 0 0$1 trigger StreamModeActive and sTime do
20488: LD_EXP 31
20492: PUSH
20493: LD_EXP 82
20497: AND
20498: IFFALSE 20533
20500: GO 20502
20502: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
20503: LD_INT 28
20505: PPUSH
20506: LD_OWVAR 2
20510: PPUSH
20511: LD_INT 2
20513: PPUSH
20514: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
20518: LD_INT 30
20520: PPUSH
20521: LD_OWVAR 2
20525: PPUSH
20526: LD_INT 2
20528: PPUSH
20529: CALL_OW 322
// end ;
20533: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
20534: LD_EXP 31
20538: PUSH
20539: LD_EXP 83
20543: AND
20544: IFFALSE 20665
20546: GO 20548
20548: DISABLE
20549: LD_INT 0
20551: PPUSH
20552: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
20553: LD_ADDR_VAR 0 2
20557: PUSH
20558: LD_INT 22
20560: PUSH
20561: LD_OWVAR 2
20565: PUSH
20566: EMPTY
20567: LIST
20568: LIST
20569: PUSH
20570: LD_INT 21
20572: PUSH
20573: LD_INT 1
20575: PUSH
20576: EMPTY
20577: LIST
20578: LIST
20579: PUSH
20580: LD_INT 3
20582: PUSH
20583: LD_INT 23
20585: PUSH
20586: LD_INT 0
20588: PUSH
20589: EMPTY
20590: LIST
20591: LIST
20592: PUSH
20593: EMPTY
20594: LIST
20595: LIST
20596: PUSH
20597: EMPTY
20598: LIST
20599: LIST
20600: LIST
20601: PPUSH
20602: CALL_OW 69
20606: ST_TO_ADDR
// if not tmp then
20607: LD_VAR 0 2
20611: NOT
20612: IFFALSE 20616
// exit ;
20614: GO 20665
// for i in tmp do
20616: LD_ADDR_VAR 0 1
20620: PUSH
20621: LD_VAR 0 2
20625: PUSH
20626: FOR_IN
20627: IFFALSE 20663
// begin if Crawls ( i ) then
20629: LD_VAR 0 1
20633: PPUSH
20634: CALL_OW 318
20638: IFFALSE 20649
// ComWalk ( i ) ;
20640: LD_VAR 0 1
20644: PPUSH
20645: CALL_OW 138
// SetClass ( i , 2 ) ;
20649: LD_VAR 0 1
20653: PPUSH
20654: LD_INT 2
20656: PPUSH
20657: CALL_OW 336
// end ;
20661: GO 20626
20663: POP
20664: POP
// end ;
20665: PPOPN 2
20667: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
20668: LD_EXP 31
20672: PUSH
20673: LD_EXP 84
20677: AND
20678: IFFALSE 20966
20680: GO 20682
20682: DISABLE
20683: LD_INT 0
20685: PPUSH
20686: PPUSH
20687: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
20688: LD_OWVAR 2
20692: PPUSH
20693: LD_INT 9
20695: PPUSH
20696: LD_INT 1
20698: PPUSH
20699: LD_INT 1
20701: PPUSH
20702: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
20706: LD_INT 9
20708: PPUSH
20709: LD_OWVAR 2
20713: PPUSH
20714: CALL_OW 343
// uc_side := 9 ;
20718: LD_ADDR_OWVAR 20
20722: PUSH
20723: LD_INT 9
20725: ST_TO_ADDR
// uc_nation := 2 ;
20726: LD_ADDR_OWVAR 21
20730: PUSH
20731: LD_INT 2
20733: ST_TO_ADDR
// hc_name := Dark Warrior ;
20734: LD_ADDR_OWVAR 26
20738: PUSH
20739: LD_STRING Dark Warrior
20741: ST_TO_ADDR
// hc_gallery :=  ;
20742: LD_ADDR_OWVAR 33
20746: PUSH
20747: LD_STRING 
20749: ST_TO_ADDR
// hc_noskilllimit := true ;
20750: LD_ADDR_OWVAR 76
20754: PUSH
20755: LD_INT 1
20757: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
20758: LD_ADDR_OWVAR 31
20762: PUSH
20763: LD_INT 30
20765: PUSH
20766: LD_INT 30
20768: PUSH
20769: LD_INT 30
20771: PUSH
20772: LD_INT 30
20774: PUSH
20775: EMPTY
20776: LIST
20777: LIST
20778: LIST
20779: LIST
20780: ST_TO_ADDR
// un := CreateHuman ;
20781: LD_ADDR_VAR 0 3
20785: PUSH
20786: CALL_OW 44
20790: ST_TO_ADDR
// hc_noskilllimit := false ;
20791: LD_ADDR_OWVAR 76
20795: PUSH
20796: LD_INT 0
20798: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
20799: LD_VAR 0 3
20803: PPUSH
20804: LD_INT 1
20806: PPUSH
20807: CALL_OW 51
// ToLua ( playRanger() ) ;
20811: LD_STRING playRanger()
20813: PPUSH
20814: CALL_OW 559
// p := 0 ;
20818: LD_ADDR_VAR 0 2
20822: PUSH
20823: LD_INT 0
20825: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
20826: LD_INT 35
20828: PPUSH
20829: CALL_OW 67
// p := p + 1 ;
20833: LD_ADDR_VAR 0 2
20837: PUSH
20838: LD_VAR 0 2
20842: PUSH
20843: LD_INT 1
20845: PLUS
20846: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
20847: LD_VAR 0 3
20851: PPUSH
20852: CALL_OW 256
20856: PUSH
20857: LD_INT 1000
20859: LESS
20860: IFFALSE 20874
// SetLives ( un , 1000 ) ;
20862: LD_VAR 0 3
20866: PPUSH
20867: LD_INT 1000
20869: PPUSH
20870: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
20874: LD_VAR 0 3
20878: PPUSH
20879: LD_INT 81
20881: PUSH
20882: LD_OWVAR 2
20886: PUSH
20887: EMPTY
20888: LIST
20889: LIST
20890: PUSH
20891: LD_INT 91
20893: PUSH
20894: LD_VAR 0 3
20898: PUSH
20899: LD_INT 30
20901: PUSH
20902: EMPTY
20903: LIST
20904: LIST
20905: LIST
20906: PUSH
20907: EMPTY
20908: LIST
20909: LIST
20910: PPUSH
20911: CALL_OW 69
20915: PPUSH
20916: LD_VAR 0 3
20920: PPUSH
20921: CALL_OW 74
20925: PPUSH
20926: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
20930: LD_VAR 0 2
20934: PUSH
20935: LD_INT 80
20937: GREATER
20938: PUSH
20939: LD_VAR 0 3
20943: PPUSH
20944: CALL_OW 301
20948: OR
20949: IFFALSE 20826
// if un then
20951: LD_VAR 0 3
20955: IFFALSE 20966
// RemoveUnit ( un ) ;
20957: LD_VAR 0 3
20961: PPUSH
20962: CALL_OW 64
// end ;
20966: PPOPN 3
20968: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
20969: LD_EXP 85
20973: IFFALSE 21089
20975: GO 20977
20977: DISABLE
20978: LD_INT 0
20980: PPUSH
20981: PPUSH
20982: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
20983: LD_ADDR_VAR 0 2
20987: PUSH
20988: LD_INT 81
20990: PUSH
20991: LD_OWVAR 2
20995: PUSH
20996: EMPTY
20997: LIST
20998: LIST
20999: PUSH
21000: LD_INT 21
21002: PUSH
21003: LD_INT 1
21005: PUSH
21006: EMPTY
21007: LIST
21008: LIST
21009: PUSH
21010: EMPTY
21011: LIST
21012: LIST
21013: PPUSH
21014: CALL_OW 69
21018: ST_TO_ADDR
// ToLua ( playComputer() ) ;
21019: LD_STRING playComputer()
21021: PPUSH
21022: CALL_OW 559
// if not tmp then
21026: LD_VAR 0 2
21030: NOT
21031: IFFALSE 21035
// exit ;
21033: GO 21089
// for i in tmp do
21035: LD_ADDR_VAR 0 1
21039: PUSH
21040: LD_VAR 0 2
21044: PUSH
21045: FOR_IN
21046: IFFALSE 21087
// for j := 1 to 4 do
21048: LD_ADDR_VAR 0 3
21052: PUSH
21053: DOUBLE
21054: LD_INT 1
21056: DEC
21057: ST_TO_ADDR
21058: LD_INT 4
21060: PUSH
21061: FOR_TO
21062: IFFALSE 21083
// SetSkill ( i , j , 10 ) ;
21064: LD_VAR 0 1
21068: PPUSH
21069: LD_VAR 0 3
21073: PPUSH
21074: LD_INT 10
21076: PPUSH
21077: CALL_OW 237
21081: GO 21061
21083: POP
21084: POP
21085: GO 21045
21087: POP
21088: POP
// end ;
21089: PPOPN 3
21091: END
// every 0 0$1 trigger s30 do var i , tmp ;
21092: LD_EXP 86
21096: IFFALSE 21165
21098: GO 21100
21100: DISABLE
21101: LD_INT 0
21103: PPUSH
21104: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
21105: LD_ADDR_VAR 0 2
21109: PUSH
21110: LD_INT 22
21112: PUSH
21113: LD_OWVAR 2
21117: PUSH
21118: EMPTY
21119: LIST
21120: LIST
21121: PPUSH
21122: CALL_OW 69
21126: ST_TO_ADDR
// if not tmp then
21127: LD_VAR 0 2
21131: NOT
21132: IFFALSE 21136
// exit ;
21134: GO 21165
// for i in tmp do
21136: LD_ADDR_VAR 0 1
21140: PUSH
21141: LD_VAR 0 2
21145: PUSH
21146: FOR_IN
21147: IFFALSE 21163
// SetLives ( i , 300 ) ;
21149: LD_VAR 0 1
21153: PPUSH
21154: LD_INT 300
21156: PPUSH
21157: CALL_OW 234
21161: GO 21146
21163: POP
21164: POP
// end ;
21165: PPOPN 2
21167: END
// every 0 0$1 trigger s60 do var i , tmp ;
21168: LD_EXP 87
21172: IFFALSE 21241
21174: GO 21176
21176: DISABLE
21177: LD_INT 0
21179: PPUSH
21180: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
21181: LD_ADDR_VAR 0 2
21185: PUSH
21186: LD_INT 22
21188: PUSH
21189: LD_OWVAR 2
21193: PUSH
21194: EMPTY
21195: LIST
21196: LIST
21197: PPUSH
21198: CALL_OW 69
21202: ST_TO_ADDR
// if not tmp then
21203: LD_VAR 0 2
21207: NOT
21208: IFFALSE 21212
// exit ;
21210: GO 21241
// for i in tmp do
21212: LD_ADDR_VAR 0 1
21216: PUSH
21217: LD_VAR 0 2
21221: PUSH
21222: FOR_IN
21223: IFFALSE 21239
// SetLives ( i , 600 ) ;
21225: LD_VAR 0 1
21229: PPUSH
21230: LD_INT 600
21232: PPUSH
21233: CALL_OW 234
21237: GO 21222
21239: POP
21240: POP
// end ;
21241: PPOPN 2
21243: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
21244: LD_INT 0
21246: PPUSH
// case cmd of 301 :
21247: LD_VAR 0 1
21251: PUSH
21252: LD_INT 301
21254: DOUBLE
21255: EQUAL
21256: IFTRUE 21260
21258: GO 21292
21260: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
21261: LD_VAR 0 6
21265: PPUSH
21266: LD_VAR 0 7
21270: PPUSH
21271: LD_VAR 0 8
21275: PPUSH
21276: LD_VAR 0 4
21280: PPUSH
21281: LD_VAR 0 5
21285: PPUSH
21286: CALL 22501 0 5
21290: GO 21413
21292: LD_INT 302
21294: DOUBLE
21295: EQUAL
21296: IFTRUE 21300
21298: GO 21337
21300: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
21301: LD_VAR 0 6
21305: PPUSH
21306: LD_VAR 0 7
21310: PPUSH
21311: LD_VAR 0 8
21315: PPUSH
21316: LD_VAR 0 9
21320: PPUSH
21321: LD_VAR 0 4
21325: PPUSH
21326: LD_VAR 0 5
21330: PPUSH
21331: CALL 22592 0 6
21335: GO 21413
21337: LD_INT 303
21339: DOUBLE
21340: EQUAL
21341: IFTRUE 21345
21343: GO 21382
21345: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
21346: LD_VAR 0 6
21350: PPUSH
21351: LD_VAR 0 7
21355: PPUSH
21356: LD_VAR 0 8
21360: PPUSH
21361: LD_VAR 0 9
21365: PPUSH
21366: LD_VAR 0 4
21370: PPUSH
21371: LD_VAR 0 5
21375: PPUSH
21376: CALL 21418 0 6
21380: GO 21413
21382: LD_INT 304
21384: DOUBLE
21385: EQUAL
21386: IFTRUE 21390
21388: GO 21412
21390: POP
// hHackTeleport ( unit , x , y ) ; end ;
21391: LD_VAR 0 2
21395: PPUSH
21396: LD_VAR 0 4
21400: PPUSH
21401: LD_VAR 0 5
21405: PPUSH
21406: CALL 23185 0 3
21410: GO 21413
21412: POP
// end ;
21413: LD_VAR 0 12
21417: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
21418: LD_INT 0
21420: PPUSH
21421: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
21422: LD_VAR 0 1
21426: PUSH
21427: LD_INT 1
21429: LESS
21430: PUSH
21431: LD_VAR 0 1
21435: PUSH
21436: LD_INT 3
21438: GREATER
21439: OR
21440: PUSH
21441: LD_VAR 0 5
21445: PPUSH
21446: LD_VAR 0 6
21450: PPUSH
21451: CALL_OW 428
21455: OR
21456: IFFALSE 21460
// exit ;
21458: GO 22188
// uc_side := your_side ;
21460: LD_ADDR_OWVAR 20
21464: PUSH
21465: LD_OWVAR 2
21469: ST_TO_ADDR
// uc_nation := nation ;
21470: LD_ADDR_OWVAR 21
21474: PUSH
21475: LD_VAR 0 1
21479: ST_TO_ADDR
// bc_level = 1 ;
21480: LD_ADDR_OWVAR 43
21484: PUSH
21485: LD_INT 1
21487: ST_TO_ADDR
// case btype of 1 :
21488: LD_VAR 0 2
21492: PUSH
21493: LD_INT 1
21495: DOUBLE
21496: EQUAL
21497: IFTRUE 21501
21499: GO 21512
21501: POP
// bc_type := b_depot ; 2 :
21502: LD_ADDR_OWVAR 42
21506: PUSH
21507: LD_INT 0
21509: ST_TO_ADDR
21510: GO 22132
21512: LD_INT 2
21514: DOUBLE
21515: EQUAL
21516: IFTRUE 21520
21518: GO 21531
21520: POP
// bc_type := b_warehouse ; 3 :
21521: LD_ADDR_OWVAR 42
21525: PUSH
21526: LD_INT 1
21528: ST_TO_ADDR
21529: GO 22132
21531: LD_INT 3
21533: DOUBLE
21534: EQUAL
21535: IFTRUE 21539
21537: GO 21550
21539: POP
// bc_type := b_lab ; 4 .. 9 :
21540: LD_ADDR_OWVAR 42
21544: PUSH
21545: LD_INT 6
21547: ST_TO_ADDR
21548: GO 22132
21550: LD_INT 4
21552: DOUBLE
21553: GREATEREQUAL
21554: IFFALSE 21562
21556: LD_INT 9
21558: DOUBLE
21559: LESSEQUAL
21560: IFTRUE 21564
21562: GO 21624
21564: POP
// begin bc_type := b_lab_half ;
21565: LD_ADDR_OWVAR 42
21569: PUSH
21570: LD_INT 7
21572: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
21573: LD_ADDR_OWVAR 44
21577: PUSH
21578: LD_INT 10
21580: PUSH
21581: LD_INT 11
21583: PUSH
21584: LD_INT 12
21586: PUSH
21587: LD_INT 15
21589: PUSH
21590: LD_INT 14
21592: PUSH
21593: LD_INT 13
21595: PUSH
21596: EMPTY
21597: LIST
21598: LIST
21599: LIST
21600: LIST
21601: LIST
21602: LIST
21603: PUSH
21604: LD_VAR 0 2
21608: PUSH
21609: LD_INT 3
21611: MINUS
21612: ARRAY
21613: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
21614: LD_ADDR_OWVAR 45
21618: PUSH
21619: LD_INT 9
21621: ST_TO_ADDR
// end ; 10 .. 13 :
21622: GO 22132
21624: LD_INT 10
21626: DOUBLE
21627: GREATEREQUAL
21628: IFFALSE 21636
21630: LD_INT 13
21632: DOUBLE
21633: LESSEQUAL
21634: IFTRUE 21638
21636: GO 21715
21638: POP
// begin bc_type := b_lab_full ;
21639: LD_ADDR_OWVAR 42
21643: PUSH
21644: LD_INT 8
21646: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
21647: LD_ADDR_OWVAR 44
21651: PUSH
21652: LD_INT 10
21654: PUSH
21655: LD_INT 12
21657: PUSH
21658: LD_INT 14
21660: PUSH
21661: LD_INT 13
21663: PUSH
21664: EMPTY
21665: LIST
21666: LIST
21667: LIST
21668: LIST
21669: PUSH
21670: LD_VAR 0 2
21674: PUSH
21675: LD_INT 9
21677: MINUS
21678: ARRAY
21679: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
21680: LD_ADDR_OWVAR 45
21684: PUSH
21685: LD_INT 11
21687: PUSH
21688: LD_INT 15
21690: PUSH
21691: LD_INT 12
21693: PUSH
21694: LD_INT 15
21696: PUSH
21697: EMPTY
21698: LIST
21699: LIST
21700: LIST
21701: LIST
21702: PUSH
21703: LD_VAR 0 2
21707: PUSH
21708: LD_INT 9
21710: MINUS
21711: ARRAY
21712: ST_TO_ADDR
// end ; 14 :
21713: GO 22132
21715: LD_INT 14
21717: DOUBLE
21718: EQUAL
21719: IFTRUE 21723
21721: GO 21734
21723: POP
// bc_type := b_workshop ; 15 :
21724: LD_ADDR_OWVAR 42
21728: PUSH
21729: LD_INT 2
21731: ST_TO_ADDR
21732: GO 22132
21734: LD_INT 15
21736: DOUBLE
21737: EQUAL
21738: IFTRUE 21742
21740: GO 21753
21742: POP
// bc_type := b_factory ; 16 :
21743: LD_ADDR_OWVAR 42
21747: PUSH
21748: LD_INT 3
21750: ST_TO_ADDR
21751: GO 22132
21753: LD_INT 16
21755: DOUBLE
21756: EQUAL
21757: IFTRUE 21761
21759: GO 21772
21761: POP
// bc_type := b_ext_gun ; 17 :
21762: LD_ADDR_OWVAR 42
21766: PUSH
21767: LD_INT 17
21769: ST_TO_ADDR
21770: GO 22132
21772: LD_INT 17
21774: DOUBLE
21775: EQUAL
21776: IFTRUE 21780
21778: GO 21808
21780: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
21781: LD_ADDR_OWVAR 42
21785: PUSH
21786: LD_INT 19
21788: PUSH
21789: LD_INT 23
21791: PUSH
21792: LD_INT 19
21794: PUSH
21795: EMPTY
21796: LIST
21797: LIST
21798: LIST
21799: PUSH
21800: LD_VAR 0 1
21804: ARRAY
21805: ST_TO_ADDR
21806: GO 22132
21808: LD_INT 18
21810: DOUBLE
21811: EQUAL
21812: IFTRUE 21816
21814: GO 21827
21816: POP
// bc_type := b_ext_radar ; 19 :
21817: LD_ADDR_OWVAR 42
21821: PUSH
21822: LD_INT 20
21824: ST_TO_ADDR
21825: GO 22132
21827: LD_INT 19
21829: DOUBLE
21830: EQUAL
21831: IFTRUE 21835
21833: GO 21846
21835: POP
// bc_type := b_ext_radio ; 20 :
21836: LD_ADDR_OWVAR 42
21840: PUSH
21841: LD_INT 22
21843: ST_TO_ADDR
21844: GO 22132
21846: LD_INT 20
21848: DOUBLE
21849: EQUAL
21850: IFTRUE 21854
21852: GO 21865
21854: POP
// bc_type := b_ext_siberium ; 21 :
21855: LD_ADDR_OWVAR 42
21859: PUSH
21860: LD_INT 21
21862: ST_TO_ADDR
21863: GO 22132
21865: LD_INT 21
21867: DOUBLE
21868: EQUAL
21869: IFTRUE 21873
21871: GO 21884
21873: POP
// bc_type := b_ext_computer ; 22 :
21874: LD_ADDR_OWVAR 42
21878: PUSH
21879: LD_INT 24
21881: ST_TO_ADDR
21882: GO 22132
21884: LD_INT 22
21886: DOUBLE
21887: EQUAL
21888: IFTRUE 21892
21890: GO 21903
21892: POP
// bc_type := b_ext_track ; 23 :
21893: LD_ADDR_OWVAR 42
21897: PUSH
21898: LD_INT 16
21900: ST_TO_ADDR
21901: GO 22132
21903: LD_INT 23
21905: DOUBLE
21906: EQUAL
21907: IFTRUE 21911
21909: GO 21922
21911: POP
// bc_type := b_ext_laser ; 24 :
21912: LD_ADDR_OWVAR 42
21916: PUSH
21917: LD_INT 25
21919: ST_TO_ADDR
21920: GO 22132
21922: LD_INT 24
21924: DOUBLE
21925: EQUAL
21926: IFTRUE 21930
21928: GO 21941
21930: POP
// bc_type := b_control_tower ; 25 :
21931: LD_ADDR_OWVAR 42
21935: PUSH
21936: LD_INT 36
21938: ST_TO_ADDR
21939: GO 22132
21941: LD_INT 25
21943: DOUBLE
21944: EQUAL
21945: IFTRUE 21949
21947: GO 21960
21949: POP
// bc_type := b_breastwork ; 26 :
21950: LD_ADDR_OWVAR 42
21954: PUSH
21955: LD_INT 31
21957: ST_TO_ADDR
21958: GO 22132
21960: LD_INT 26
21962: DOUBLE
21963: EQUAL
21964: IFTRUE 21968
21966: GO 21979
21968: POP
// bc_type := b_bunker ; 27 :
21969: LD_ADDR_OWVAR 42
21973: PUSH
21974: LD_INT 32
21976: ST_TO_ADDR
21977: GO 22132
21979: LD_INT 27
21981: DOUBLE
21982: EQUAL
21983: IFTRUE 21987
21985: GO 21998
21987: POP
// bc_type := b_turret ; 28 :
21988: LD_ADDR_OWVAR 42
21992: PUSH
21993: LD_INT 33
21995: ST_TO_ADDR
21996: GO 22132
21998: LD_INT 28
22000: DOUBLE
22001: EQUAL
22002: IFTRUE 22006
22004: GO 22017
22006: POP
// bc_type := b_armoury ; 29 :
22007: LD_ADDR_OWVAR 42
22011: PUSH
22012: LD_INT 4
22014: ST_TO_ADDR
22015: GO 22132
22017: LD_INT 29
22019: DOUBLE
22020: EQUAL
22021: IFTRUE 22025
22023: GO 22036
22025: POP
// bc_type := b_barracks ; 30 :
22026: LD_ADDR_OWVAR 42
22030: PUSH
22031: LD_INT 5
22033: ST_TO_ADDR
22034: GO 22132
22036: LD_INT 30
22038: DOUBLE
22039: EQUAL
22040: IFTRUE 22044
22042: GO 22055
22044: POP
// bc_type := b_solar_power ; 31 :
22045: LD_ADDR_OWVAR 42
22049: PUSH
22050: LD_INT 27
22052: ST_TO_ADDR
22053: GO 22132
22055: LD_INT 31
22057: DOUBLE
22058: EQUAL
22059: IFTRUE 22063
22061: GO 22074
22063: POP
// bc_type := b_oil_power ; 32 :
22064: LD_ADDR_OWVAR 42
22068: PUSH
22069: LD_INT 26
22071: ST_TO_ADDR
22072: GO 22132
22074: LD_INT 32
22076: DOUBLE
22077: EQUAL
22078: IFTRUE 22082
22080: GO 22093
22082: POP
// bc_type := b_siberite_power ; 33 :
22083: LD_ADDR_OWVAR 42
22087: PUSH
22088: LD_INT 28
22090: ST_TO_ADDR
22091: GO 22132
22093: LD_INT 33
22095: DOUBLE
22096: EQUAL
22097: IFTRUE 22101
22099: GO 22112
22101: POP
// bc_type := b_oil_mine ; 34 :
22102: LD_ADDR_OWVAR 42
22106: PUSH
22107: LD_INT 29
22109: ST_TO_ADDR
22110: GO 22132
22112: LD_INT 34
22114: DOUBLE
22115: EQUAL
22116: IFTRUE 22120
22118: GO 22131
22120: POP
// bc_type := b_siberite_mine ; end ;
22121: LD_ADDR_OWVAR 42
22125: PUSH
22126: LD_INT 30
22128: ST_TO_ADDR
22129: GO 22132
22131: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
22132: LD_ADDR_VAR 0 8
22136: PUSH
22137: LD_VAR 0 5
22141: PPUSH
22142: LD_VAR 0 6
22146: PPUSH
22147: LD_VAR 0 3
22151: PPUSH
22152: CALL_OW 47
22156: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
22157: LD_OWVAR 42
22161: PUSH
22162: LD_INT 32
22164: PUSH
22165: LD_INT 33
22167: PUSH
22168: EMPTY
22169: LIST
22170: LIST
22171: IN
22172: IFFALSE 22188
// PlaceWeaponTurret ( b , weapon ) ;
22174: LD_VAR 0 8
22178: PPUSH
22179: LD_VAR 0 4
22183: PPUSH
22184: CALL_OW 431
// end ;
22188: LD_VAR 0 7
22192: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
22193: LD_INT 0
22195: PPUSH
22196: PPUSH
22197: PPUSH
22198: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
22199: LD_ADDR_VAR 0 4
22203: PUSH
22204: LD_INT 22
22206: PUSH
22207: LD_OWVAR 2
22211: PUSH
22212: EMPTY
22213: LIST
22214: LIST
22215: PUSH
22216: LD_INT 2
22218: PUSH
22219: LD_INT 30
22221: PUSH
22222: LD_INT 0
22224: PUSH
22225: EMPTY
22226: LIST
22227: LIST
22228: PUSH
22229: LD_INT 30
22231: PUSH
22232: LD_INT 1
22234: PUSH
22235: EMPTY
22236: LIST
22237: LIST
22238: PUSH
22239: EMPTY
22240: LIST
22241: LIST
22242: LIST
22243: PUSH
22244: EMPTY
22245: LIST
22246: LIST
22247: PPUSH
22248: CALL_OW 69
22252: ST_TO_ADDR
// if not tmp then
22253: LD_VAR 0 4
22257: NOT
22258: IFFALSE 22262
// exit ;
22260: GO 22321
// for i in tmp do
22262: LD_ADDR_VAR 0 2
22266: PUSH
22267: LD_VAR 0 4
22271: PUSH
22272: FOR_IN
22273: IFFALSE 22319
// for j = 1 to 3 do
22275: LD_ADDR_VAR 0 3
22279: PUSH
22280: DOUBLE
22281: LD_INT 1
22283: DEC
22284: ST_TO_ADDR
22285: LD_INT 3
22287: PUSH
22288: FOR_TO
22289: IFFALSE 22315
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
22291: LD_VAR 0 2
22295: PPUSH
22296: CALL_OW 274
22300: PPUSH
22301: LD_VAR 0 3
22305: PPUSH
22306: LD_INT 99999
22308: PPUSH
22309: CALL_OW 277
22313: GO 22288
22315: POP
22316: POP
22317: GO 22272
22319: POP
22320: POP
// end ;
22321: LD_VAR 0 1
22325: RET
// export function hHackSetLevel10 ; var i , j ; begin
22326: LD_INT 0
22328: PPUSH
22329: PPUSH
22330: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
22331: LD_ADDR_VAR 0 2
22335: PUSH
22336: LD_INT 21
22338: PUSH
22339: LD_INT 1
22341: PUSH
22342: EMPTY
22343: LIST
22344: LIST
22345: PPUSH
22346: CALL_OW 69
22350: PUSH
22351: FOR_IN
22352: IFFALSE 22404
// if IsSelected ( i ) then
22354: LD_VAR 0 2
22358: PPUSH
22359: CALL_OW 306
22363: IFFALSE 22402
// begin for j := 1 to 4 do
22365: LD_ADDR_VAR 0 3
22369: PUSH
22370: DOUBLE
22371: LD_INT 1
22373: DEC
22374: ST_TO_ADDR
22375: LD_INT 4
22377: PUSH
22378: FOR_TO
22379: IFFALSE 22400
// SetSkill ( i , j , 10 ) ;
22381: LD_VAR 0 2
22385: PPUSH
22386: LD_VAR 0 3
22390: PPUSH
22391: LD_INT 10
22393: PPUSH
22394: CALL_OW 237
22398: GO 22378
22400: POP
22401: POP
// end ;
22402: GO 22351
22404: POP
22405: POP
// end ;
22406: LD_VAR 0 1
22410: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
22411: LD_INT 0
22413: PPUSH
22414: PPUSH
22415: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
22416: LD_ADDR_VAR 0 2
22420: PUSH
22421: LD_INT 22
22423: PUSH
22424: LD_OWVAR 2
22428: PUSH
22429: EMPTY
22430: LIST
22431: LIST
22432: PUSH
22433: LD_INT 21
22435: PUSH
22436: LD_INT 1
22438: PUSH
22439: EMPTY
22440: LIST
22441: LIST
22442: PUSH
22443: EMPTY
22444: LIST
22445: LIST
22446: PPUSH
22447: CALL_OW 69
22451: PUSH
22452: FOR_IN
22453: IFFALSE 22494
// begin for j := 1 to 4 do
22455: LD_ADDR_VAR 0 3
22459: PUSH
22460: DOUBLE
22461: LD_INT 1
22463: DEC
22464: ST_TO_ADDR
22465: LD_INT 4
22467: PUSH
22468: FOR_TO
22469: IFFALSE 22490
// SetSkill ( i , j , 10 ) ;
22471: LD_VAR 0 2
22475: PPUSH
22476: LD_VAR 0 3
22480: PPUSH
22481: LD_INT 10
22483: PPUSH
22484: CALL_OW 237
22488: GO 22468
22490: POP
22491: POP
// end ;
22492: GO 22452
22494: POP
22495: POP
// end ;
22496: LD_VAR 0 1
22500: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
22501: LD_INT 0
22503: PPUSH
// uc_side := your_side ;
22504: LD_ADDR_OWVAR 20
22508: PUSH
22509: LD_OWVAR 2
22513: ST_TO_ADDR
// uc_nation := nation ;
22514: LD_ADDR_OWVAR 21
22518: PUSH
22519: LD_VAR 0 1
22523: ST_TO_ADDR
// InitHc ;
22524: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
22528: LD_INT 0
22530: PPUSH
22531: LD_VAR 0 2
22535: PPUSH
22536: LD_VAR 0 3
22540: PPUSH
22541: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
22545: LD_VAR 0 4
22549: PPUSH
22550: LD_VAR 0 5
22554: PPUSH
22555: CALL_OW 428
22559: PUSH
22560: LD_INT 0
22562: EQUAL
22563: IFFALSE 22587
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
22565: CALL_OW 44
22569: PPUSH
22570: LD_VAR 0 4
22574: PPUSH
22575: LD_VAR 0 5
22579: PPUSH
22580: LD_INT 1
22582: PPUSH
22583: CALL_OW 48
// end ;
22587: LD_VAR 0 6
22591: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
22592: LD_INT 0
22594: PPUSH
22595: PPUSH
// uc_side := your_side ;
22596: LD_ADDR_OWVAR 20
22600: PUSH
22601: LD_OWVAR 2
22605: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
22606: LD_VAR 0 1
22610: PUSH
22611: LD_INT 1
22613: PUSH
22614: LD_INT 2
22616: PUSH
22617: LD_INT 3
22619: PUSH
22620: LD_INT 4
22622: PUSH
22623: LD_INT 5
22625: PUSH
22626: EMPTY
22627: LIST
22628: LIST
22629: LIST
22630: LIST
22631: LIST
22632: IN
22633: IFFALSE 22645
// uc_nation := nation_american else
22635: LD_ADDR_OWVAR 21
22639: PUSH
22640: LD_INT 1
22642: ST_TO_ADDR
22643: GO 22688
// if chassis in [ 11 , 12 , 13 , 14 ] then
22645: LD_VAR 0 1
22649: PUSH
22650: LD_INT 11
22652: PUSH
22653: LD_INT 12
22655: PUSH
22656: LD_INT 13
22658: PUSH
22659: LD_INT 14
22661: PUSH
22662: EMPTY
22663: LIST
22664: LIST
22665: LIST
22666: LIST
22667: IN
22668: IFFALSE 22680
// uc_nation := nation_arabian else
22670: LD_ADDR_OWVAR 21
22674: PUSH
22675: LD_INT 2
22677: ST_TO_ADDR
22678: GO 22688
// uc_nation := nation_russian ;
22680: LD_ADDR_OWVAR 21
22684: PUSH
22685: LD_INT 3
22687: ST_TO_ADDR
// vc_chassis := chassis ;
22688: LD_ADDR_OWVAR 37
22692: PUSH
22693: LD_VAR 0 1
22697: ST_TO_ADDR
// vc_engine := engine ;
22698: LD_ADDR_OWVAR 39
22702: PUSH
22703: LD_VAR 0 2
22707: ST_TO_ADDR
// vc_control := control ;
22708: LD_ADDR_OWVAR 38
22712: PUSH
22713: LD_VAR 0 3
22717: ST_TO_ADDR
// vc_weapon := weapon ;
22718: LD_ADDR_OWVAR 40
22722: PUSH
22723: LD_VAR 0 4
22727: ST_TO_ADDR
// un := CreateVehicle ;
22728: LD_ADDR_VAR 0 8
22732: PUSH
22733: CALL_OW 45
22737: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
22738: LD_VAR 0 8
22742: PPUSH
22743: LD_INT 0
22745: PPUSH
22746: LD_INT 5
22748: PPUSH
22749: CALL_OW 12
22753: PPUSH
22754: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
22758: LD_VAR 0 8
22762: PPUSH
22763: LD_VAR 0 5
22767: PPUSH
22768: LD_VAR 0 6
22772: PPUSH
22773: LD_INT 1
22775: PPUSH
22776: CALL_OW 48
// end ;
22780: LD_VAR 0 7
22784: RET
// export hInvincible ; every 1 do
22785: GO 22787
22787: DISABLE
// hInvincible := [ ] ;
22788: LD_ADDR_EXP 88
22792: PUSH
22793: EMPTY
22794: ST_TO_ADDR
22795: END
// every 10 do var i ;
22796: GO 22798
22798: DISABLE
22799: LD_INT 0
22801: PPUSH
// begin enable ;
22802: ENABLE
// if not hInvincible then
22803: LD_EXP 88
22807: NOT
22808: IFFALSE 22812
// exit ;
22810: GO 22856
// for i in hInvincible do
22812: LD_ADDR_VAR 0 1
22816: PUSH
22817: LD_EXP 88
22821: PUSH
22822: FOR_IN
22823: IFFALSE 22854
// if GetLives ( i ) < 1000 then
22825: LD_VAR 0 1
22829: PPUSH
22830: CALL_OW 256
22834: PUSH
22835: LD_INT 1000
22837: LESS
22838: IFFALSE 22852
// SetLives ( i , 1000 ) ;
22840: LD_VAR 0 1
22844: PPUSH
22845: LD_INT 1000
22847: PPUSH
22848: CALL_OW 234
22852: GO 22822
22854: POP
22855: POP
// end ;
22856: PPOPN 1
22858: END
// export function hHackInvincible ; var i ; begin
22859: LD_INT 0
22861: PPUSH
22862: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
22863: LD_ADDR_VAR 0 2
22867: PUSH
22868: LD_INT 2
22870: PUSH
22871: LD_INT 21
22873: PUSH
22874: LD_INT 1
22876: PUSH
22877: EMPTY
22878: LIST
22879: LIST
22880: PUSH
22881: LD_INT 21
22883: PUSH
22884: LD_INT 2
22886: PUSH
22887: EMPTY
22888: LIST
22889: LIST
22890: PUSH
22891: EMPTY
22892: LIST
22893: LIST
22894: LIST
22895: PPUSH
22896: CALL_OW 69
22900: PUSH
22901: FOR_IN
22902: IFFALSE 22963
// if IsSelected ( i ) then
22904: LD_VAR 0 2
22908: PPUSH
22909: CALL_OW 306
22913: IFFALSE 22961
// begin if i in hInvincible then
22915: LD_VAR 0 2
22919: PUSH
22920: LD_EXP 88
22924: IN
22925: IFFALSE 22945
// hInvincible := hInvincible diff i else
22927: LD_ADDR_EXP 88
22931: PUSH
22932: LD_EXP 88
22936: PUSH
22937: LD_VAR 0 2
22941: DIFF
22942: ST_TO_ADDR
22943: GO 22961
// hInvincible := hInvincible union i ;
22945: LD_ADDR_EXP 88
22949: PUSH
22950: LD_EXP 88
22954: PUSH
22955: LD_VAR 0 2
22959: UNION
22960: ST_TO_ADDR
// end ;
22961: GO 22901
22963: POP
22964: POP
// end ;
22965: LD_VAR 0 1
22969: RET
// export function hHackInvisible ; var i , j ; begin
22970: LD_INT 0
22972: PPUSH
22973: PPUSH
22974: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
22975: LD_ADDR_VAR 0 2
22979: PUSH
22980: LD_INT 21
22982: PUSH
22983: LD_INT 1
22985: PUSH
22986: EMPTY
22987: LIST
22988: LIST
22989: PPUSH
22990: CALL_OW 69
22994: PUSH
22995: FOR_IN
22996: IFFALSE 23020
// if IsSelected ( i ) then
22998: LD_VAR 0 2
23002: PPUSH
23003: CALL_OW 306
23007: IFFALSE 23018
// ComForceInvisible ( i ) ;
23009: LD_VAR 0 2
23013: PPUSH
23014: CALL_OW 496
23018: GO 22995
23020: POP
23021: POP
// end ;
23022: LD_VAR 0 1
23026: RET
// export function hHackChangeYourSide ; begin
23027: LD_INT 0
23029: PPUSH
// if your_side = 8 then
23030: LD_OWVAR 2
23034: PUSH
23035: LD_INT 8
23037: EQUAL
23038: IFFALSE 23050
// your_side := 0 else
23040: LD_ADDR_OWVAR 2
23044: PUSH
23045: LD_INT 0
23047: ST_TO_ADDR
23048: GO 23064
// your_side := your_side + 1 ;
23050: LD_ADDR_OWVAR 2
23054: PUSH
23055: LD_OWVAR 2
23059: PUSH
23060: LD_INT 1
23062: PLUS
23063: ST_TO_ADDR
// end ;
23064: LD_VAR 0 1
23068: RET
// export function hHackChangeUnitSide ; var i , j ; begin
23069: LD_INT 0
23071: PPUSH
23072: PPUSH
23073: PPUSH
// for i in all_units do
23074: LD_ADDR_VAR 0 2
23078: PUSH
23079: LD_OWVAR 3
23083: PUSH
23084: FOR_IN
23085: IFFALSE 23163
// if IsSelected ( i ) then
23087: LD_VAR 0 2
23091: PPUSH
23092: CALL_OW 306
23096: IFFALSE 23161
// begin j := GetSide ( i ) ;
23098: LD_ADDR_VAR 0 3
23102: PUSH
23103: LD_VAR 0 2
23107: PPUSH
23108: CALL_OW 255
23112: ST_TO_ADDR
// if j = 8 then
23113: LD_VAR 0 3
23117: PUSH
23118: LD_INT 8
23120: EQUAL
23121: IFFALSE 23133
// j := 0 else
23123: LD_ADDR_VAR 0 3
23127: PUSH
23128: LD_INT 0
23130: ST_TO_ADDR
23131: GO 23147
// j := j + 1 ;
23133: LD_ADDR_VAR 0 3
23137: PUSH
23138: LD_VAR 0 3
23142: PUSH
23143: LD_INT 1
23145: PLUS
23146: ST_TO_ADDR
// SetSide ( i , j ) ;
23147: LD_VAR 0 2
23151: PPUSH
23152: LD_VAR 0 3
23156: PPUSH
23157: CALL_OW 235
// end ;
23161: GO 23084
23163: POP
23164: POP
// end ;
23165: LD_VAR 0 1
23169: RET
// export function hHackFog ; begin
23170: LD_INT 0
23172: PPUSH
// FogOff ( true ) ;
23173: LD_INT 1
23175: PPUSH
23176: CALL_OW 344
// end ;
23180: LD_VAR 0 1
23184: RET
// export function hHackTeleport ( unit , x , y ) ; begin
23185: LD_INT 0
23187: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
23188: LD_VAR 0 1
23192: PPUSH
23193: LD_VAR 0 2
23197: PPUSH
23198: LD_VAR 0 3
23202: PPUSH
23203: LD_INT 1
23205: PPUSH
23206: LD_INT 1
23208: PPUSH
23209: CALL_OW 483
// CenterOnXY ( x , y ) ;
23213: LD_VAR 0 2
23217: PPUSH
23218: LD_VAR 0 3
23222: PPUSH
23223: CALL_OW 84
// end ;
23227: LD_VAR 0 4
23231: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
23232: LD_INT 0
23234: PPUSH
23235: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
23236: LD_VAR 0 1
23240: NOT
23241: PUSH
23242: LD_VAR 0 2
23246: PPUSH
23247: LD_VAR 0 3
23251: PPUSH
23252: CALL_OW 488
23256: NOT
23257: OR
23258: PUSH
23259: LD_VAR 0 1
23263: PPUSH
23264: CALL_OW 266
23268: PUSH
23269: LD_INT 3
23271: NONEQUAL
23272: PUSH
23273: LD_VAR 0 1
23277: PPUSH
23278: CALL_OW 247
23282: PUSH
23283: LD_INT 1
23285: EQUAL
23286: NOT
23287: AND
23288: OR
23289: IFFALSE 23293
// exit ;
23291: GO 23442
// if GetType ( factory ) = unit_human then
23293: LD_VAR 0 1
23297: PPUSH
23298: CALL_OW 247
23302: PUSH
23303: LD_INT 1
23305: EQUAL
23306: IFFALSE 23323
// factory := IsInUnit ( factory ) ;
23308: LD_ADDR_VAR 0 1
23312: PUSH
23313: LD_VAR 0 1
23317: PPUSH
23318: CALL_OW 310
23322: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
23323: LD_VAR 0 1
23327: PPUSH
23328: CALL_OW 266
23332: PUSH
23333: LD_INT 3
23335: NONEQUAL
23336: IFFALSE 23340
// exit ;
23338: GO 23442
// if HexInfo ( x , y ) = factory then
23340: LD_VAR 0 2
23344: PPUSH
23345: LD_VAR 0 3
23349: PPUSH
23350: CALL_OW 428
23354: PUSH
23355: LD_VAR 0 1
23359: EQUAL
23360: IFFALSE 23387
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
23362: LD_ADDR_EXP 89
23366: PUSH
23367: LD_EXP 89
23371: PPUSH
23372: LD_VAR 0 1
23376: PPUSH
23377: LD_INT 0
23379: PPUSH
23380: CALL_OW 1
23384: ST_TO_ADDR
23385: GO 23438
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
23387: LD_ADDR_EXP 89
23391: PUSH
23392: LD_EXP 89
23396: PPUSH
23397: LD_VAR 0 1
23401: PPUSH
23402: LD_VAR 0 1
23406: PPUSH
23407: CALL_OW 255
23411: PUSH
23412: LD_VAR 0 1
23416: PUSH
23417: LD_VAR 0 2
23421: PUSH
23422: LD_VAR 0 3
23426: PUSH
23427: EMPTY
23428: LIST
23429: LIST
23430: LIST
23431: LIST
23432: PPUSH
23433: CALL_OW 1
23437: ST_TO_ADDR
// UpdateFactoryWaypoints ;
23438: CALL 23447 0 0
// end ;
23442: LD_VAR 0 4
23446: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
23447: LD_INT 0
23449: PPUSH
23450: PPUSH
23451: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
23452: LD_STRING resetFactoryWaypoint();
23454: PPUSH
23455: CALL_OW 559
// if factoryWaypoints then
23459: LD_EXP 89
23463: IFFALSE 23589
// begin list := PrepareArray ( factoryWaypoints ) ;
23465: LD_ADDR_VAR 0 3
23469: PUSH
23470: LD_EXP 89
23474: PPUSH
23475: CALL 69911 0 1
23479: ST_TO_ADDR
// for i := 1 to list do
23480: LD_ADDR_VAR 0 2
23484: PUSH
23485: DOUBLE
23486: LD_INT 1
23488: DEC
23489: ST_TO_ADDR
23490: LD_VAR 0 3
23494: PUSH
23495: FOR_TO
23496: IFFALSE 23587
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
23498: LD_STRING setFactoryWaypointXY(
23500: PUSH
23501: LD_VAR 0 3
23505: PUSH
23506: LD_VAR 0 2
23510: ARRAY
23511: PUSH
23512: LD_INT 1
23514: ARRAY
23515: STR
23516: PUSH
23517: LD_STRING ,
23519: STR
23520: PUSH
23521: LD_VAR 0 3
23525: PUSH
23526: LD_VAR 0 2
23530: ARRAY
23531: PUSH
23532: LD_INT 2
23534: ARRAY
23535: STR
23536: PUSH
23537: LD_STRING ,
23539: STR
23540: PUSH
23541: LD_VAR 0 3
23545: PUSH
23546: LD_VAR 0 2
23550: ARRAY
23551: PUSH
23552: LD_INT 3
23554: ARRAY
23555: STR
23556: PUSH
23557: LD_STRING ,
23559: STR
23560: PUSH
23561: LD_VAR 0 3
23565: PUSH
23566: LD_VAR 0 2
23570: ARRAY
23571: PUSH
23572: LD_INT 4
23574: ARRAY
23575: STR
23576: PUSH
23577: LD_STRING )
23579: STR
23580: PPUSH
23581: CALL_OW 559
23585: GO 23495
23587: POP
23588: POP
// end ; end ;
23589: LD_VAR 0 1
23593: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
23594: LD_INT 0
23596: PPUSH
// if HexInfo ( x , y ) = warehouse then
23597: LD_VAR 0 2
23601: PPUSH
23602: LD_VAR 0 3
23606: PPUSH
23607: CALL_OW 428
23611: PUSH
23612: LD_VAR 0 1
23616: EQUAL
23617: IFFALSE 23644
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
23619: LD_ADDR_EXP 90
23623: PUSH
23624: LD_EXP 90
23628: PPUSH
23629: LD_VAR 0 1
23633: PPUSH
23634: LD_INT 0
23636: PPUSH
23637: CALL_OW 1
23641: ST_TO_ADDR
23642: GO 23695
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
23644: LD_ADDR_EXP 90
23648: PUSH
23649: LD_EXP 90
23653: PPUSH
23654: LD_VAR 0 1
23658: PPUSH
23659: LD_VAR 0 1
23663: PPUSH
23664: CALL_OW 255
23668: PUSH
23669: LD_VAR 0 1
23673: PUSH
23674: LD_VAR 0 2
23678: PUSH
23679: LD_VAR 0 3
23683: PUSH
23684: EMPTY
23685: LIST
23686: LIST
23687: LIST
23688: LIST
23689: PPUSH
23690: CALL_OW 1
23694: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
23695: CALL 23704 0 0
// end ;
23699: LD_VAR 0 4
23703: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
23704: LD_INT 0
23706: PPUSH
23707: PPUSH
23708: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
23709: LD_STRING resetWarehouseGatheringPoints();
23711: PPUSH
23712: CALL_OW 559
// if warehouseGatheringPoints then
23716: LD_EXP 90
23720: IFFALSE 23846
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
23722: LD_ADDR_VAR 0 3
23726: PUSH
23727: LD_EXP 90
23731: PPUSH
23732: CALL 69911 0 1
23736: ST_TO_ADDR
// for i := 1 to list do
23737: LD_ADDR_VAR 0 2
23741: PUSH
23742: DOUBLE
23743: LD_INT 1
23745: DEC
23746: ST_TO_ADDR
23747: LD_VAR 0 3
23751: PUSH
23752: FOR_TO
23753: IFFALSE 23844
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
23755: LD_STRING setWarehouseGatheringPointXY(
23757: PUSH
23758: LD_VAR 0 3
23762: PUSH
23763: LD_VAR 0 2
23767: ARRAY
23768: PUSH
23769: LD_INT 1
23771: ARRAY
23772: STR
23773: PUSH
23774: LD_STRING ,
23776: STR
23777: PUSH
23778: LD_VAR 0 3
23782: PUSH
23783: LD_VAR 0 2
23787: ARRAY
23788: PUSH
23789: LD_INT 2
23791: ARRAY
23792: STR
23793: PUSH
23794: LD_STRING ,
23796: STR
23797: PUSH
23798: LD_VAR 0 3
23802: PUSH
23803: LD_VAR 0 2
23807: ARRAY
23808: PUSH
23809: LD_INT 3
23811: ARRAY
23812: STR
23813: PUSH
23814: LD_STRING ,
23816: STR
23817: PUSH
23818: LD_VAR 0 3
23822: PUSH
23823: LD_VAR 0 2
23827: ARRAY
23828: PUSH
23829: LD_INT 4
23831: ARRAY
23832: STR
23833: PUSH
23834: LD_STRING )
23836: STR
23837: PPUSH
23838: CALL_OW 559
23842: GO 23752
23844: POP
23845: POP
// end ; end ;
23846: LD_VAR 0 1
23850: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
23851: LD_EXP 90
23855: IFFALSE 24540
23857: GO 23859
23859: DISABLE
23860: LD_INT 0
23862: PPUSH
23863: PPUSH
23864: PPUSH
23865: PPUSH
23866: PPUSH
23867: PPUSH
23868: PPUSH
23869: PPUSH
23870: PPUSH
// begin enable ;
23871: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
23872: LD_ADDR_VAR 0 3
23876: PUSH
23877: LD_EXP 90
23881: PPUSH
23882: CALL 69911 0 1
23886: ST_TO_ADDR
// if not list then
23887: LD_VAR 0 3
23891: NOT
23892: IFFALSE 23896
// exit ;
23894: GO 24540
// for i := 1 to list do
23896: LD_ADDR_VAR 0 1
23900: PUSH
23901: DOUBLE
23902: LD_INT 1
23904: DEC
23905: ST_TO_ADDR
23906: LD_VAR 0 3
23910: PUSH
23911: FOR_TO
23912: IFFALSE 24538
// begin depot := list [ i ] [ 2 ] ;
23914: LD_ADDR_VAR 0 8
23918: PUSH
23919: LD_VAR 0 3
23923: PUSH
23924: LD_VAR 0 1
23928: ARRAY
23929: PUSH
23930: LD_INT 2
23932: ARRAY
23933: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
23934: LD_ADDR_VAR 0 5
23938: PUSH
23939: LD_VAR 0 3
23943: PUSH
23944: LD_VAR 0 1
23948: ARRAY
23949: PUSH
23950: LD_INT 1
23952: ARRAY
23953: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
23954: LD_VAR 0 8
23958: PPUSH
23959: CALL_OW 301
23963: PUSH
23964: LD_VAR 0 5
23968: PUSH
23969: LD_VAR 0 8
23973: PPUSH
23974: CALL_OW 255
23978: NONEQUAL
23979: OR
23980: IFFALSE 24009
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
23982: LD_ADDR_EXP 90
23986: PUSH
23987: LD_EXP 90
23991: PPUSH
23992: LD_VAR 0 8
23996: PPUSH
23997: LD_INT 0
23999: PPUSH
24000: CALL_OW 1
24004: ST_TO_ADDR
// exit ;
24005: POP
24006: POP
24007: GO 24540
// end ; x := list [ i ] [ 3 ] ;
24009: LD_ADDR_VAR 0 6
24013: PUSH
24014: LD_VAR 0 3
24018: PUSH
24019: LD_VAR 0 1
24023: ARRAY
24024: PUSH
24025: LD_INT 3
24027: ARRAY
24028: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
24029: LD_ADDR_VAR 0 7
24033: PUSH
24034: LD_VAR 0 3
24038: PUSH
24039: LD_VAR 0 1
24043: ARRAY
24044: PUSH
24045: LD_INT 4
24047: ARRAY
24048: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
24049: LD_ADDR_VAR 0 9
24053: PUSH
24054: LD_VAR 0 6
24058: PPUSH
24059: LD_VAR 0 7
24063: PPUSH
24064: LD_INT 16
24066: PPUSH
24067: CALL 68499 0 3
24071: ST_TO_ADDR
// if not cratesNearbyPoint then
24072: LD_VAR 0 9
24076: NOT
24077: IFFALSE 24083
// exit ;
24079: POP
24080: POP
24081: GO 24540
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
24083: LD_ADDR_VAR 0 4
24087: PUSH
24088: LD_INT 22
24090: PUSH
24091: LD_VAR 0 5
24095: PUSH
24096: EMPTY
24097: LIST
24098: LIST
24099: PUSH
24100: LD_INT 3
24102: PUSH
24103: LD_INT 60
24105: PUSH
24106: EMPTY
24107: LIST
24108: PUSH
24109: EMPTY
24110: LIST
24111: LIST
24112: PUSH
24113: LD_INT 91
24115: PUSH
24116: LD_VAR 0 8
24120: PUSH
24121: LD_INT 6
24123: PUSH
24124: EMPTY
24125: LIST
24126: LIST
24127: LIST
24128: PUSH
24129: LD_INT 2
24131: PUSH
24132: LD_INT 25
24134: PUSH
24135: LD_INT 2
24137: PUSH
24138: EMPTY
24139: LIST
24140: LIST
24141: PUSH
24142: LD_INT 25
24144: PUSH
24145: LD_INT 16
24147: PUSH
24148: EMPTY
24149: LIST
24150: LIST
24151: PUSH
24152: EMPTY
24153: LIST
24154: LIST
24155: LIST
24156: PUSH
24157: EMPTY
24158: LIST
24159: LIST
24160: LIST
24161: LIST
24162: PPUSH
24163: CALL_OW 69
24167: PUSH
24168: LD_VAR 0 8
24172: PPUSH
24173: CALL_OW 313
24177: PPUSH
24178: LD_INT 3
24180: PUSH
24181: LD_INT 60
24183: PUSH
24184: EMPTY
24185: LIST
24186: PUSH
24187: EMPTY
24188: LIST
24189: LIST
24190: PUSH
24191: LD_INT 2
24193: PUSH
24194: LD_INT 25
24196: PUSH
24197: LD_INT 2
24199: PUSH
24200: EMPTY
24201: LIST
24202: LIST
24203: PUSH
24204: LD_INT 25
24206: PUSH
24207: LD_INT 16
24209: PUSH
24210: EMPTY
24211: LIST
24212: LIST
24213: PUSH
24214: EMPTY
24215: LIST
24216: LIST
24217: LIST
24218: PUSH
24219: EMPTY
24220: LIST
24221: LIST
24222: PPUSH
24223: CALL_OW 72
24227: UNION
24228: ST_TO_ADDR
// if tmp then
24229: LD_VAR 0 4
24233: IFFALSE 24313
// begin tmp := ShrinkArray ( tmp , 3 ) ;
24235: LD_ADDR_VAR 0 4
24239: PUSH
24240: LD_VAR 0 4
24244: PPUSH
24245: LD_INT 3
24247: PPUSH
24248: CALL 66468 0 2
24252: ST_TO_ADDR
// for j in tmp do
24253: LD_ADDR_VAR 0 2
24257: PUSH
24258: LD_VAR 0 4
24262: PUSH
24263: FOR_IN
24264: IFFALSE 24307
// begin if IsInUnit ( j ) then
24266: LD_VAR 0 2
24270: PPUSH
24271: CALL_OW 310
24275: IFFALSE 24286
// ComExit ( j ) ;
24277: LD_VAR 0 2
24281: PPUSH
24282: CALL 66551 0 1
// AddComCollect ( j , x , y ) ;
24286: LD_VAR 0 2
24290: PPUSH
24291: LD_VAR 0 6
24295: PPUSH
24296: LD_VAR 0 7
24300: PPUSH
24301: CALL_OW 177
// end ;
24305: GO 24263
24307: POP
24308: POP
// exit ;
24309: POP
24310: POP
24311: GO 24540
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
24313: LD_ADDR_VAR 0 4
24317: PUSH
24318: LD_INT 22
24320: PUSH
24321: LD_VAR 0 5
24325: PUSH
24326: EMPTY
24327: LIST
24328: LIST
24329: PUSH
24330: LD_INT 91
24332: PUSH
24333: LD_VAR 0 8
24337: PUSH
24338: LD_INT 8
24340: PUSH
24341: EMPTY
24342: LIST
24343: LIST
24344: LIST
24345: PUSH
24346: LD_INT 2
24348: PUSH
24349: LD_INT 34
24351: PUSH
24352: LD_INT 12
24354: PUSH
24355: EMPTY
24356: LIST
24357: LIST
24358: PUSH
24359: LD_INT 34
24361: PUSH
24362: LD_INT 51
24364: PUSH
24365: EMPTY
24366: LIST
24367: LIST
24368: PUSH
24369: LD_INT 34
24371: PUSH
24372: LD_INT 32
24374: PUSH
24375: EMPTY
24376: LIST
24377: LIST
24378: PUSH
24379: LD_INT 34
24381: PUSH
24382: LD_INT 89
24384: PUSH
24385: EMPTY
24386: LIST
24387: LIST
24388: PUSH
24389: EMPTY
24390: LIST
24391: LIST
24392: LIST
24393: LIST
24394: LIST
24395: PUSH
24396: EMPTY
24397: LIST
24398: LIST
24399: LIST
24400: PPUSH
24401: CALL_OW 69
24405: ST_TO_ADDR
// if tmp then
24406: LD_VAR 0 4
24410: IFFALSE 24536
// begin for j in tmp do
24412: LD_ADDR_VAR 0 2
24416: PUSH
24417: LD_VAR 0 4
24421: PUSH
24422: FOR_IN
24423: IFFALSE 24534
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
24425: LD_VAR 0 2
24429: PPUSH
24430: CALL_OW 262
24434: PUSH
24435: LD_INT 3
24437: EQUAL
24438: PUSH
24439: LD_VAR 0 2
24443: PPUSH
24444: CALL_OW 261
24448: PUSH
24449: LD_INT 20
24451: GREATER
24452: OR
24453: PUSH
24454: LD_VAR 0 2
24458: PPUSH
24459: CALL_OW 314
24463: NOT
24464: AND
24465: PUSH
24466: LD_VAR 0 2
24470: PPUSH
24471: CALL_OW 263
24475: PUSH
24476: LD_INT 1
24478: NONEQUAL
24479: PUSH
24480: LD_VAR 0 2
24484: PPUSH
24485: CALL_OW 311
24489: OR
24490: AND
24491: IFFALSE 24532
// begin ComCollect ( j , x , y ) ;
24493: LD_VAR 0 2
24497: PPUSH
24498: LD_VAR 0 6
24502: PPUSH
24503: LD_VAR 0 7
24507: PPUSH
24508: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
24512: LD_VAR 0 2
24516: PPUSH
24517: LD_VAR 0 8
24521: PPUSH
24522: CALL_OW 172
// exit ;
24526: POP
24527: POP
24528: POP
24529: POP
24530: GO 24540
// end ;
24532: GO 24422
24534: POP
24535: POP
// end ; end ;
24536: GO 23911
24538: POP
24539: POP
// end ; end_of_file
24540: PPOPN 9
24542: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
24543: LD_INT 0
24545: PPUSH
24546: PPUSH
24547: PPUSH
24548: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
24549: LD_VAR 0 1
24553: PPUSH
24554: CALL_OW 264
24558: PUSH
24559: LD_INT 91
24561: EQUAL
24562: IFFALSE 24634
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
24564: LD_INT 68
24566: PPUSH
24567: LD_VAR 0 1
24571: PPUSH
24572: CALL_OW 255
24576: PPUSH
24577: CALL_OW 321
24581: PUSH
24582: LD_INT 2
24584: EQUAL
24585: IFFALSE 24597
// eff := 70 else
24587: LD_ADDR_VAR 0 4
24591: PUSH
24592: LD_INT 70
24594: ST_TO_ADDR
24595: GO 24605
// eff := 30 ;
24597: LD_ADDR_VAR 0 4
24601: PUSH
24602: LD_INT 30
24604: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
24605: LD_VAR 0 1
24609: PPUSH
24610: CALL_OW 250
24614: PPUSH
24615: LD_VAR 0 1
24619: PPUSH
24620: CALL_OW 251
24624: PPUSH
24625: LD_VAR 0 4
24629: PPUSH
24630: CALL_OW 495
// end ; end ;
24634: LD_VAR 0 2
24638: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
24639: LD_INT 0
24641: PPUSH
// end ;
24642: LD_VAR 0 4
24646: RET
// export function SOS_Command ( cmd ) ; begin
24647: LD_INT 0
24649: PPUSH
// end ;
24650: LD_VAR 0 2
24654: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
24655: LD_INT 0
24657: PPUSH
// end ;
24658: LD_VAR 0 6
24662: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
24663: LD_INT 0
24665: PPUSH
24666: PPUSH
// if not vehicle or not factory then
24667: LD_VAR 0 1
24671: NOT
24672: PUSH
24673: LD_VAR 0 2
24677: NOT
24678: OR
24679: IFFALSE 24683
// exit ;
24681: GO 24914
// if factoryWaypoints >= factory then
24683: LD_EXP 89
24687: PUSH
24688: LD_VAR 0 2
24692: GREATEREQUAL
24693: IFFALSE 24914
// if factoryWaypoints [ factory ] then
24695: LD_EXP 89
24699: PUSH
24700: LD_VAR 0 2
24704: ARRAY
24705: IFFALSE 24914
// begin if GetControl ( vehicle ) = control_manual then
24707: LD_VAR 0 1
24711: PPUSH
24712: CALL_OW 263
24716: PUSH
24717: LD_INT 1
24719: EQUAL
24720: IFFALSE 24801
// begin driver := IsDrivenBy ( vehicle ) ;
24722: LD_ADDR_VAR 0 4
24726: PUSH
24727: LD_VAR 0 1
24731: PPUSH
24732: CALL_OW 311
24736: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
24737: LD_VAR 0 4
24741: PPUSH
24742: LD_EXP 89
24746: PUSH
24747: LD_VAR 0 2
24751: ARRAY
24752: PUSH
24753: LD_INT 3
24755: ARRAY
24756: PPUSH
24757: LD_EXP 89
24761: PUSH
24762: LD_VAR 0 2
24766: ARRAY
24767: PUSH
24768: LD_INT 4
24770: ARRAY
24771: PPUSH
24772: CALL_OW 171
// AddComExitVehicle ( driver ) ;
24776: LD_VAR 0 4
24780: PPUSH
24781: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
24785: LD_VAR 0 4
24789: PPUSH
24790: LD_VAR 0 2
24794: PPUSH
24795: CALL_OW 180
// end else
24799: GO 24914
// if GetControl ( vehicle ) = control_remote then
24801: LD_VAR 0 1
24805: PPUSH
24806: CALL_OW 263
24810: PUSH
24811: LD_INT 2
24813: EQUAL
24814: IFFALSE 24875
// begin wait ( 0 0$2 ) ;
24816: LD_INT 70
24818: PPUSH
24819: CALL_OW 67
// if Connect ( vehicle ) then
24823: LD_VAR 0 1
24827: PPUSH
24828: CALL 36772 0 1
24832: IFFALSE 24873
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
24834: LD_VAR 0 1
24838: PPUSH
24839: LD_EXP 89
24843: PUSH
24844: LD_VAR 0 2
24848: ARRAY
24849: PUSH
24850: LD_INT 3
24852: ARRAY
24853: PPUSH
24854: LD_EXP 89
24858: PUSH
24859: LD_VAR 0 2
24863: ARRAY
24864: PUSH
24865: LD_INT 4
24867: ARRAY
24868: PPUSH
24869: CALL_OW 171
// end else
24873: GO 24914
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
24875: LD_VAR 0 1
24879: PPUSH
24880: LD_EXP 89
24884: PUSH
24885: LD_VAR 0 2
24889: ARRAY
24890: PUSH
24891: LD_INT 3
24893: ARRAY
24894: PPUSH
24895: LD_EXP 89
24899: PUSH
24900: LD_VAR 0 2
24904: ARRAY
24905: PUSH
24906: LD_INT 4
24908: ARRAY
24909: PPUSH
24910: CALL_OW 171
// end ; end ;
24914: LD_VAR 0 3
24918: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
24919: LD_INT 0
24921: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
24922: LD_VAR 0 1
24926: PUSH
24927: LD_INT 250
24929: EQUAL
24930: PUSH
24931: LD_VAR 0 2
24935: PPUSH
24936: CALL_OW 264
24940: PUSH
24941: LD_INT 81
24943: EQUAL
24944: AND
24945: IFFALSE 24966
// MinerPlaceMine ( unit , x , y ) ;
24947: LD_VAR 0 2
24951: PPUSH
24952: LD_VAR 0 4
24956: PPUSH
24957: LD_VAR 0 5
24961: PPUSH
24962: CALL 27351 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
24966: LD_VAR 0 1
24970: PUSH
24971: LD_INT 251
24973: EQUAL
24974: PUSH
24975: LD_VAR 0 2
24979: PPUSH
24980: CALL_OW 264
24984: PUSH
24985: LD_INT 81
24987: EQUAL
24988: AND
24989: IFFALSE 25010
// MinerDetonateMine ( unit , x , y ) ;
24991: LD_VAR 0 2
24995: PPUSH
24996: LD_VAR 0 4
25000: PPUSH
25001: LD_VAR 0 5
25005: PPUSH
25006: CALL 27626 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
25010: LD_VAR 0 1
25014: PUSH
25015: LD_INT 252
25017: EQUAL
25018: PUSH
25019: LD_VAR 0 2
25023: PPUSH
25024: CALL_OW 264
25028: PUSH
25029: LD_INT 81
25031: EQUAL
25032: AND
25033: IFFALSE 25054
// MinerCreateMinefield ( unit , x , y ) ;
25035: LD_VAR 0 2
25039: PPUSH
25040: LD_VAR 0 4
25044: PPUSH
25045: LD_VAR 0 5
25049: PPUSH
25050: CALL 28043 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
25054: LD_VAR 0 1
25058: PUSH
25059: LD_INT 253
25061: EQUAL
25062: PUSH
25063: LD_VAR 0 2
25067: PPUSH
25068: CALL_OW 257
25072: PUSH
25073: LD_INT 5
25075: EQUAL
25076: AND
25077: IFFALSE 25098
// ComBinocular ( unit , x , y ) ;
25079: LD_VAR 0 2
25083: PPUSH
25084: LD_VAR 0 4
25088: PPUSH
25089: LD_VAR 0 5
25093: PPUSH
25094: CALL 28412 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
25098: LD_VAR 0 1
25102: PUSH
25103: LD_INT 254
25105: EQUAL
25106: PUSH
25107: LD_VAR 0 2
25111: PPUSH
25112: CALL_OW 264
25116: PUSH
25117: LD_INT 99
25119: EQUAL
25120: AND
25121: PUSH
25122: LD_VAR 0 3
25126: PPUSH
25127: CALL_OW 263
25131: PUSH
25132: LD_INT 3
25134: EQUAL
25135: AND
25136: IFFALSE 25152
// HackDestroyVehicle ( unit , selectedUnit ) ;
25138: LD_VAR 0 2
25142: PPUSH
25143: LD_VAR 0 3
25147: PPUSH
25148: CALL 26715 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
25152: LD_VAR 0 1
25156: PUSH
25157: LD_INT 255
25159: EQUAL
25160: PUSH
25161: LD_VAR 0 2
25165: PPUSH
25166: CALL_OW 264
25170: PUSH
25171: LD_INT 14
25173: PUSH
25174: LD_INT 53
25176: PUSH
25177: EMPTY
25178: LIST
25179: LIST
25180: IN
25181: AND
25182: PUSH
25183: LD_VAR 0 4
25187: PPUSH
25188: LD_VAR 0 5
25192: PPUSH
25193: CALL_OW 488
25197: AND
25198: IFFALSE 25222
// CutTreeXYR ( unit , x , y , 12 ) ;
25200: LD_VAR 0 2
25204: PPUSH
25205: LD_VAR 0 4
25209: PPUSH
25210: LD_VAR 0 5
25214: PPUSH
25215: LD_INT 12
25217: PPUSH
25218: CALL 25285 0 4
// if cmd = 256 then
25222: LD_VAR 0 1
25226: PUSH
25227: LD_INT 256
25229: EQUAL
25230: IFFALSE 25251
// SetFactoryWaypoint ( unit , x , y ) ;
25232: LD_VAR 0 2
25236: PPUSH
25237: LD_VAR 0 4
25241: PPUSH
25242: LD_VAR 0 5
25246: PPUSH
25247: CALL 23232 0 3
// if cmd = 257 then
25251: LD_VAR 0 1
25255: PUSH
25256: LD_INT 257
25258: EQUAL
25259: IFFALSE 25280
// SetWarehouseGatheringPoint ( unit , x , y ) ;
25261: LD_VAR 0 2
25265: PPUSH
25266: LD_VAR 0 4
25270: PPUSH
25271: LD_VAR 0 5
25275: PPUSH
25276: CALL 23594 0 3
// end ;
25280: LD_VAR 0 6
25284: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
25285: LD_INT 0
25287: PPUSH
25288: PPUSH
25289: PPUSH
25290: PPUSH
25291: PPUSH
25292: PPUSH
25293: PPUSH
25294: PPUSH
25295: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
25296: LD_VAR 0 1
25300: NOT
25301: PUSH
25302: LD_VAR 0 2
25306: PPUSH
25307: LD_VAR 0 3
25311: PPUSH
25312: CALL_OW 488
25316: NOT
25317: OR
25318: PUSH
25319: LD_VAR 0 4
25323: NOT
25324: OR
25325: IFFALSE 25329
// exit ;
25327: GO 25669
// list := [ ] ;
25329: LD_ADDR_VAR 0 13
25333: PUSH
25334: EMPTY
25335: ST_TO_ADDR
// if x - r < 0 then
25336: LD_VAR 0 2
25340: PUSH
25341: LD_VAR 0 4
25345: MINUS
25346: PUSH
25347: LD_INT 0
25349: LESS
25350: IFFALSE 25362
// min_x := 0 else
25352: LD_ADDR_VAR 0 7
25356: PUSH
25357: LD_INT 0
25359: ST_TO_ADDR
25360: GO 25378
// min_x := x - r ;
25362: LD_ADDR_VAR 0 7
25366: PUSH
25367: LD_VAR 0 2
25371: PUSH
25372: LD_VAR 0 4
25376: MINUS
25377: ST_TO_ADDR
// if y - r < 0 then
25378: LD_VAR 0 3
25382: PUSH
25383: LD_VAR 0 4
25387: MINUS
25388: PUSH
25389: LD_INT 0
25391: LESS
25392: IFFALSE 25404
// min_y := 0 else
25394: LD_ADDR_VAR 0 8
25398: PUSH
25399: LD_INT 0
25401: ST_TO_ADDR
25402: GO 25420
// min_y := y - r ;
25404: LD_ADDR_VAR 0 8
25408: PUSH
25409: LD_VAR 0 3
25413: PUSH
25414: LD_VAR 0 4
25418: MINUS
25419: ST_TO_ADDR
// max_x := x + r ;
25420: LD_ADDR_VAR 0 9
25424: PUSH
25425: LD_VAR 0 2
25429: PUSH
25430: LD_VAR 0 4
25434: PLUS
25435: ST_TO_ADDR
// max_y := y + r ;
25436: LD_ADDR_VAR 0 10
25440: PUSH
25441: LD_VAR 0 3
25445: PUSH
25446: LD_VAR 0 4
25450: PLUS
25451: ST_TO_ADDR
// for _x = min_x to max_x do
25452: LD_ADDR_VAR 0 11
25456: PUSH
25457: DOUBLE
25458: LD_VAR 0 7
25462: DEC
25463: ST_TO_ADDR
25464: LD_VAR 0 9
25468: PUSH
25469: FOR_TO
25470: IFFALSE 25587
// for _y = min_y to max_y do
25472: LD_ADDR_VAR 0 12
25476: PUSH
25477: DOUBLE
25478: LD_VAR 0 8
25482: DEC
25483: ST_TO_ADDR
25484: LD_VAR 0 10
25488: PUSH
25489: FOR_TO
25490: IFFALSE 25583
// begin if not ValidHex ( _x , _y ) then
25492: LD_VAR 0 11
25496: PPUSH
25497: LD_VAR 0 12
25501: PPUSH
25502: CALL_OW 488
25506: NOT
25507: IFFALSE 25511
// continue ;
25509: GO 25489
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
25511: LD_VAR 0 11
25515: PPUSH
25516: LD_VAR 0 12
25520: PPUSH
25521: CALL_OW 351
25525: PUSH
25526: LD_VAR 0 11
25530: PPUSH
25531: LD_VAR 0 12
25535: PPUSH
25536: CALL_OW 554
25540: AND
25541: IFFALSE 25581
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
25543: LD_ADDR_VAR 0 13
25547: PUSH
25548: LD_VAR 0 13
25552: PPUSH
25553: LD_VAR 0 13
25557: PUSH
25558: LD_INT 1
25560: PLUS
25561: PPUSH
25562: LD_VAR 0 11
25566: PUSH
25567: LD_VAR 0 12
25571: PUSH
25572: EMPTY
25573: LIST
25574: LIST
25575: PPUSH
25576: CALL_OW 2
25580: ST_TO_ADDR
// end ;
25581: GO 25489
25583: POP
25584: POP
25585: GO 25469
25587: POP
25588: POP
// if not list then
25589: LD_VAR 0 13
25593: NOT
25594: IFFALSE 25598
// exit ;
25596: GO 25669
// for i in list do
25598: LD_ADDR_VAR 0 6
25602: PUSH
25603: LD_VAR 0 13
25607: PUSH
25608: FOR_IN
25609: IFFALSE 25667
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
25611: LD_VAR 0 1
25615: PPUSH
25616: LD_STRING M
25618: PUSH
25619: LD_VAR 0 6
25623: PUSH
25624: LD_INT 1
25626: ARRAY
25627: PUSH
25628: LD_VAR 0 6
25632: PUSH
25633: LD_INT 2
25635: ARRAY
25636: PUSH
25637: LD_INT 0
25639: PUSH
25640: LD_INT 0
25642: PUSH
25643: LD_INT 0
25645: PUSH
25646: LD_INT 0
25648: PUSH
25649: EMPTY
25650: LIST
25651: LIST
25652: LIST
25653: LIST
25654: LIST
25655: LIST
25656: LIST
25657: PUSH
25658: EMPTY
25659: LIST
25660: PPUSH
25661: CALL_OW 447
25665: GO 25608
25667: POP
25668: POP
// end ;
25669: LD_VAR 0 5
25673: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
25674: LD_EXP 92
25678: NOT
25679: IFFALSE 25729
25681: GO 25683
25683: DISABLE
// begin initHack := true ;
25684: LD_ADDR_EXP 92
25688: PUSH
25689: LD_INT 1
25691: ST_TO_ADDR
// hackTanks := [ ] ;
25692: LD_ADDR_EXP 93
25696: PUSH
25697: EMPTY
25698: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
25699: LD_ADDR_EXP 94
25703: PUSH
25704: EMPTY
25705: ST_TO_ADDR
// hackLimit := 3 ;
25706: LD_ADDR_EXP 95
25710: PUSH
25711: LD_INT 3
25713: ST_TO_ADDR
// hackDist := 12 ;
25714: LD_ADDR_EXP 96
25718: PUSH
25719: LD_INT 12
25721: ST_TO_ADDR
// hackCounter := [ ] ;
25722: LD_ADDR_EXP 97
25726: PUSH
25727: EMPTY
25728: ST_TO_ADDR
// end ;
25729: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
25730: LD_EXP 92
25734: PUSH
25735: LD_INT 34
25737: PUSH
25738: LD_INT 99
25740: PUSH
25741: EMPTY
25742: LIST
25743: LIST
25744: PPUSH
25745: CALL_OW 69
25749: AND
25750: IFFALSE 26003
25752: GO 25754
25754: DISABLE
25755: LD_INT 0
25757: PPUSH
25758: PPUSH
// begin enable ;
25759: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
25760: LD_ADDR_VAR 0 1
25764: PUSH
25765: LD_INT 34
25767: PUSH
25768: LD_INT 99
25770: PUSH
25771: EMPTY
25772: LIST
25773: LIST
25774: PPUSH
25775: CALL_OW 69
25779: PUSH
25780: FOR_IN
25781: IFFALSE 26001
// begin if not i in hackTanks then
25783: LD_VAR 0 1
25787: PUSH
25788: LD_EXP 93
25792: IN
25793: NOT
25794: IFFALSE 25877
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
25796: LD_ADDR_EXP 93
25800: PUSH
25801: LD_EXP 93
25805: PPUSH
25806: LD_EXP 93
25810: PUSH
25811: LD_INT 1
25813: PLUS
25814: PPUSH
25815: LD_VAR 0 1
25819: PPUSH
25820: CALL_OW 1
25824: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
25825: LD_ADDR_EXP 94
25829: PUSH
25830: LD_EXP 94
25834: PPUSH
25835: LD_EXP 94
25839: PUSH
25840: LD_INT 1
25842: PLUS
25843: PPUSH
25844: EMPTY
25845: PPUSH
25846: CALL_OW 1
25850: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
25851: LD_ADDR_EXP 97
25855: PUSH
25856: LD_EXP 97
25860: PPUSH
25861: LD_EXP 97
25865: PUSH
25866: LD_INT 1
25868: PLUS
25869: PPUSH
25870: EMPTY
25871: PPUSH
25872: CALL_OW 1
25876: ST_TO_ADDR
// end ; if not IsOk ( i ) then
25877: LD_VAR 0 1
25881: PPUSH
25882: CALL_OW 302
25886: NOT
25887: IFFALSE 25900
// begin HackUnlinkAll ( i ) ;
25889: LD_VAR 0 1
25893: PPUSH
25894: CALL 26006 0 1
// continue ;
25898: GO 25780
// end ; HackCheckCapturedStatus ( i ) ;
25900: LD_VAR 0 1
25904: PPUSH
25905: CALL 26449 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
25909: LD_ADDR_VAR 0 2
25913: PUSH
25914: LD_INT 81
25916: PUSH
25917: LD_VAR 0 1
25921: PPUSH
25922: CALL_OW 255
25926: PUSH
25927: EMPTY
25928: LIST
25929: LIST
25930: PUSH
25931: LD_INT 33
25933: PUSH
25934: LD_INT 3
25936: PUSH
25937: EMPTY
25938: LIST
25939: LIST
25940: PUSH
25941: LD_INT 91
25943: PUSH
25944: LD_VAR 0 1
25948: PUSH
25949: LD_EXP 96
25953: PUSH
25954: EMPTY
25955: LIST
25956: LIST
25957: LIST
25958: PUSH
25959: LD_INT 50
25961: PUSH
25962: EMPTY
25963: LIST
25964: PUSH
25965: EMPTY
25966: LIST
25967: LIST
25968: LIST
25969: LIST
25970: PPUSH
25971: CALL_OW 69
25975: ST_TO_ADDR
// if not tmp then
25976: LD_VAR 0 2
25980: NOT
25981: IFFALSE 25985
// continue ;
25983: GO 25780
// HackLink ( i , tmp ) ;
25985: LD_VAR 0 1
25989: PPUSH
25990: LD_VAR 0 2
25994: PPUSH
25995: CALL 26142 0 2
// end ;
25999: GO 25780
26001: POP
26002: POP
// end ;
26003: PPOPN 2
26005: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
26006: LD_INT 0
26008: PPUSH
26009: PPUSH
26010: PPUSH
// if not hack in hackTanks then
26011: LD_VAR 0 1
26015: PUSH
26016: LD_EXP 93
26020: IN
26021: NOT
26022: IFFALSE 26026
// exit ;
26024: GO 26137
// index := GetElementIndex ( hackTanks , hack ) ;
26026: LD_ADDR_VAR 0 4
26030: PUSH
26031: LD_EXP 93
26035: PPUSH
26036: LD_VAR 0 1
26040: PPUSH
26041: CALL 33579 0 2
26045: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
26046: LD_EXP 94
26050: PUSH
26051: LD_VAR 0 4
26055: ARRAY
26056: IFFALSE 26137
// begin for i in hackTanksCaptured [ index ] do
26058: LD_ADDR_VAR 0 3
26062: PUSH
26063: LD_EXP 94
26067: PUSH
26068: LD_VAR 0 4
26072: ARRAY
26073: PUSH
26074: FOR_IN
26075: IFFALSE 26101
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
26077: LD_VAR 0 3
26081: PUSH
26082: LD_INT 1
26084: ARRAY
26085: PPUSH
26086: LD_VAR 0 3
26090: PUSH
26091: LD_INT 2
26093: ARRAY
26094: PPUSH
26095: CALL_OW 235
26099: GO 26074
26101: POP
26102: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
26103: LD_ADDR_EXP 94
26107: PUSH
26108: LD_EXP 94
26112: PPUSH
26113: LD_VAR 0 4
26117: PPUSH
26118: EMPTY
26119: PPUSH
26120: CALL_OW 1
26124: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
26125: LD_VAR 0 1
26129: PPUSH
26130: LD_INT 0
26132: PPUSH
26133: CALL_OW 505
// end ; end ;
26137: LD_VAR 0 2
26141: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
26142: LD_INT 0
26144: PPUSH
26145: PPUSH
26146: PPUSH
// if not hack in hackTanks or not vehicles then
26147: LD_VAR 0 1
26151: PUSH
26152: LD_EXP 93
26156: IN
26157: NOT
26158: PUSH
26159: LD_VAR 0 2
26163: NOT
26164: OR
26165: IFFALSE 26169
// exit ;
26167: GO 26444
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
26169: LD_ADDR_VAR 0 2
26173: PUSH
26174: LD_VAR 0 1
26178: PPUSH
26179: LD_VAR 0 2
26183: PPUSH
26184: LD_INT 1
26186: PPUSH
26187: LD_INT 1
26189: PPUSH
26190: CALL 34229 0 4
26194: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
26195: LD_ADDR_VAR 0 5
26199: PUSH
26200: LD_EXP 93
26204: PPUSH
26205: LD_VAR 0 1
26209: PPUSH
26210: CALL 33579 0 2
26214: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
26215: LD_EXP 94
26219: PUSH
26220: LD_VAR 0 5
26224: ARRAY
26225: PUSH
26226: LD_EXP 95
26230: LESS
26231: IFFALSE 26420
// begin for i := 1 to vehicles do
26233: LD_ADDR_VAR 0 4
26237: PUSH
26238: DOUBLE
26239: LD_INT 1
26241: DEC
26242: ST_TO_ADDR
26243: LD_VAR 0 2
26247: PUSH
26248: FOR_TO
26249: IFFALSE 26418
// begin if hackTanksCaptured [ index ] = hackLimit then
26251: LD_EXP 94
26255: PUSH
26256: LD_VAR 0 5
26260: ARRAY
26261: PUSH
26262: LD_EXP 95
26266: EQUAL
26267: IFFALSE 26271
// break ;
26269: GO 26418
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
26271: LD_ADDR_EXP 97
26275: PUSH
26276: LD_EXP 97
26280: PPUSH
26281: LD_VAR 0 5
26285: PPUSH
26286: LD_EXP 97
26290: PUSH
26291: LD_VAR 0 5
26295: ARRAY
26296: PUSH
26297: LD_INT 1
26299: PLUS
26300: PPUSH
26301: CALL_OW 1
26305: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
26306: LD_ADDR_EXP 94
26310: PUSH
26311: LD_EXP 94
26315: PPUSH
26316: LD_VAR 0 5
26320: PUSH
26321: LD_EXP 94
26325: PUSH
26326: LD_VAR 0 5
26330: ARRAY
26331: PUSH
26332: LD_INT 1
26334: PLUS
26335: PUSH
26336: EMPTY
26337: LIST
26338: LIST
26339: PPUSH
26340: LD_VAR 0 2
26344: PUSH
26345: LD_VAR 0 4
26349: ARRAY
26350: PUSH
26351: LD_VAR 0 2
26355: PUSH
26356: LD_VAR 0 4
26360: ARRAY
26361: PPUSH
26362: CALL_OW 255
26366: PUSH
26367: EMPTY
26368: LIST
26369: LIST
26370: PPUSH
26371: CALL 33794 0 3
26375: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
26376: LD_VAR 0 2
26380: PUSH
26381: LD_VAR 0 4
26385: ARRAY
26386: PPUSH
26387: LD_VAR 0 1
26391: PPUSH
26392: CALL_OW 255
26396: PPUSH
26397: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
26401: LD_VAR 0 2
26405: PUSH
26406: LD_VAR 0 4
26410: ARRAY
26411: PPUSH
26412: CALL_OW 141
// end ;
26416: GO 26248
26418: POP
26419: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
26420: LD_VAR 0 1
26424: PPUSH
26425: LD_EXP 94
26429: PUSH
26430: LD_VAR 0 5
26434: ARRAY
26435: PUSH
26436: LD_INT 0
26438: PLUS
26439: PPUSH
26440: CALL_OW 505
// end ;
26444: LD_VAR 0 3
26448: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
26449: LD_INT 0
26451: PPUSH
26452: PPUSH
26453: PPUSH
26454: PPUSH
// if not hack in hackTanks then
26455: LD_VAR 0 1
26459: PUSH
26460: LD_EXP 93
26464: IN
26465: NOT
26466: IFFALSE 26470
// exit ;
26468: GO 26710
// index := GetElementIndex ( hackTanks , hack ) ;
26470: LD_ADDR_VAR 0 4
26474: PUSH
26475: LD_EXP 93
26479: PPUSH
26480: LD_VAR 0 1
26484: PPUSH
26485: CALL 33579 0 2
26489: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
26490: LD_ADDR_VAR 0 3
26494: PUSH
26495: DOUBLE
26496: LD_EXP 94
26500: PUSH
26501: LD_VAR 0 4
26505: ARRAY
26506: INC
26507: ST_TO_ADDR
26508: LD_INT 1
26510: PUSH
26511: FOR_DOWNTO
26512: IFFALSE 26684
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
26514: LD_ADDR_VAR 0 5
26518: PUSH
26519: LD_EXP 94
26523: PUSH
26524: LD_VAR 0 4
26528: ARRAY
26529: PUSH
26530: LD_VAR 0 3
26534: ARRAY
26535: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
26536: LD_VAR 0 5
26540: PUSH
26541: LD_INT 1
26543: ARRAY
26544: PPUSH
26545: CALL_OW 302
26549: NOT
26550: PUSH
26551: LD_VAR 0 5
26555: PUSH
26556: LD_INT 1
26558: ARRAY
26559: PPUSH
26560: CALL_OW 255
26564: PUSH
26565: LD_VAR 0 1
26569: PPUSH
26570: CALL_OW 255
26574: NONEQUAL
26575: OR
26576: IFFALSE 26682
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
26578: LD_VAR 0 5
26582: PUSH
26583: LD_INT 1
26585: ARRAY
26586: PPUSH
26587: CALL_OW 305
26591: PUSH
26592: LD_VAR 0 5
26596: PUSH
26597: LD_INT 1
26599: ARRAY
26600: PPUSH
26601: CALL_OW 255
26605: PUSH
26606: LD_VAR 0 1
26610: PPUSH
26611: CALL_OW 255
26615: EQUAL
26616: AND
26617: IFFALSE 26641
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
26619: LD_VAR 0 5
26623: PUSH
26624: LD_INT 1
26626: ARRAY
26627: PPUSH
26628: LD_VAR 0 5
26632: PUSH
26633: LD_INT 2
26635: ARRAY
26636: PPUSH
26637: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
26641: LD_ADDR_EXP 94
26645: PUSH
26646: LD_EXP 94
26650: PPUSH
26651: LD_VAR 0 4
26655: PPUSH
26656: LD_EXP 94
26660: PUSH
26661: LD_VAR 0 4
26665: ARRAY
26666: PPUSH
26667: LD_VAR 0 3
26671: PPUSH
26672: CALL_OW 3
26676: PPUSH
26677: CALL_OW 1
26681: ST_TO_ADDR
// end ; end ;
26682: GO 26511
26684: POP
26685: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
26686: LD_VAR 0 1
26690: PPUSH
26691: LD_EXP 94
26695: PUSH
26696: LD_VAR 0 4
26700: ARRAY
26701: PUSH
26702: LD_INT 0
26704: PLUS
26705: PPUSH
26706: CALL_OW 505
// end ;
26710: LD_VAR 0 2
26714: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
26715: LD_INT 0
26717: PPUSH
26718: PPUSH
26719: PPUSH
26720: PPUSH
// if not hack in hackTanks then
26721: LD_VAR 0 1
26725: PUSH
26726: LD_EXP 93
26730: IN
26731: NOT
26732: IFFALSE 26736
// exit ;
26734: GO 26821
// index := GetElementIndex ( hackTanks , hack ) ;
26736: LD_ADDR_VAR 0 5
26740: PUSH
26741: LD_EXP 93
26745: PPUSH
26746: LD_VAR 0 1
26750: PPUSH
26751: CALL 33579 0 2
26755: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
26756: LD_ADDR_VAR 0 4
26760: PUSH
26761: DOUBLE
26762: LD_INT 1
26764: DEC
26765: ST_TO_ADDR
26766: LD_EXP 94
26770: PUSH
26771: LD_VAR 0 5
26775: ARRAY
26776: PUSH
26777: FOR_TO
26778: IFFALSE 26819
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
26780: LD_EXP 94
26784: PUSH
26785: LD_VAR 0 5
26789: ARRAY
26790: PUSH
26791: LD_VAR 0 4
26795: ARRAY
26796: PUSH
26797: LD_INT 1
26799: ARRAY
26800: PUSH
26801: LD_VAR 0 2
26805: EQUAL
26806: IFFALSE 26817
// KillUnit ( vehicle ) ;
26808: LD_VAR 0 2
26812: PPUSH
26813: CALL_OW 66
26817: GO 26777
26819: POP
26820: POP
// end ;
26821: LD_VAR 0 3
26825: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
26826: LD_EXP 98
26830: NOT
26831: IFFALSE 26866
26833: GO 26835
26835: DISABLE
// begin initMiner := true ;
26836: LD_ADDR_EXP 98
26840: PUSH
26841: LD_INT 1
26843: ST_TO_ADDR
// minersList := [ ] ;
26844: LD_ADDR_EXP 99
26848: PUSH
26849: EMPTY
26850: ST_TO_ADDR
// minerMinesList := [ ] ;
26851: LD_ADDR_EXP 100
26855: PUSH
26856: EMPTY
26857: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
26858: LD_ADDR_EXP 101
26862: PUSH
26863: LD_INT 5
26865: ST_TO_ADDR
// end ;
26866: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
26867: LD_EXP 98
26871: PUSH
26872: LD_INT 34
26874: PUSH
26875: LD_INT 81
26877: PUSH
26878: EMPTY
26879: LIST
26880: LIST
26881: PPUSH
26882: CALL_OW 69
26886: AND
26887: IFFALSE 27348
26889: GO 26891
26891: DISABLE
26892: LD_INT 0
26894: PPUSH
26895: PPUSH
26896: PPUSH
26897: PPUSH
// begin enable ;
26898: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
26899: LD_ADDR_VAR 0 1
26903: PUSH
26904: LD_INT 34
26906: PUSH
26907: LD_INT 81
26909: PUSH
26910: EMPTY
26911: LIST
26912: LIST
26913: PPUSH
26914: CALL_OW 69
26918: PUSH
26919: FOR_IN
26920: IFFALSE 26992
// begin if not i in minersList then
26922: LD_VAR 0 1
26926: PUSH
26927: LD_EXP 99
26931: IN
26932: NOT
26933: IFFALSE 26990
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
26935: LD_ADDR_EXP 99
26939: PUSH
26940: LD_EXP 99
26944: PPUSH
26945: LD_EXP 99
26949: PUSH
26950: LD_INT 1
26952: PLUS
26953: PPUSH
26954: LD_VAR 0 1
26958: PPUSH
26959: CALL_OW 1
26963: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
26964: LD_ADDR_EXP 100
26968: PUSH
26969: LD_EXP 100
26973: PPUSH
26974: LD_EXP 100
26978: PUSH
26979: LD_INT 1
26981: PLUS
26982: PPUSH
26983: EMPTY
26984: PPUSH
26985: CALL_OW 1
26989: ST_TO_ADDR
// end end ;
26990: GO 26919
26992: POP
26993: POP
// for i := minerMinesList downto 1 do
26994: LD_ADDR_VAR 0 1
26998: PUSH
26999: DOUBLE
27000: LD_EXP 100
27004: INC
27005: ST_TO_ADDR
27006: LD_INT 1
27008: PUSH
27009: FOR_DOWNTO
27010: IFFALSE 27346
// begin if IsLive ( minersList [ i ] ) then
27012: LD_EXP 99
27016: PUSH
27017: LD_VAR 0 1
27021: ARRAY
27022: PPUSH
27023: CALL_OW 300
27027: IFFALSE 27055
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
27029: LD_EXP 99
27033: PUSH
27034: LD_VAR 0 1
27038: ARRAY
27039: PPUSH
27040: LD_EXP 100
27044: PUSH
27045: LD_VAR 0 1
27049: ARRAY
27050: PPUSH
27051: CALL_OW 505
// if not minerMinesList [ i ] then
27055: LD_EXP 100
27059: PUSH
27060: LD_VAR 0 1
27064: ARRAY
27065: NOT
27066: IFFALSE 27070
// continue ;
27068: GO 27009
// for j := minerMinesList [ i ] downto 1 do
27070: LD_ADDR_VAR 0 2
27074: PUSH
27075: DOUBLE
27076: LD_EXP 100
27080: PUSH
27081: LD_VAR 0 1
27085: ARRAY
27086: INC
27087: ST_TO_ADDR
27088: LD_INT 1
27090: PUSH
27091: FOR_DOWNTO
27092: IFFALSE 27342
// begin side := GetSide ( minersList [ i ] ) ;
27094: LD_ADDR_VAR 0 3
27098: PUSH
27099: LD_EXP 99
27103: PUSH
27104: LD_VAR 0 1
27108: ARRAY
27109: PPUSH
27110: CALL_OW 255
27114: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
27115: LD_ADDR_VAR 0 4
27119: PUSH
27120: LD_EXP 100
27124: PUSH
27125: LD_VAR 0 1
27129: ARRAY
27130: PUSH
27131: LD_VAR 0 2
27135: ARRAY
27136: PUSH
27137: LD_INT 1
27139: ARRAY
27140: PPUSH
27141: LD_EXP 100
27145: PUSH
27146: LD_VAR 0 1
27150: ARRAY
27151: PUSH
27152: LD_VAR 0 2
27156: ARRAY
27157: PUSH
27158: LD_INT 2
27160: ARRAY
27161: PPUSH
27162: CALL_OW 428
27166: ST_TO_ADDR
// if not tmp then
27167: LD_VAR 0 4
27171: NOT
27172: IFFALSE 27176
// continue ;
27174: GO 27091
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
27176: LD_VAR 0 4
27180: PUSH
27181: LD_INT 81
27183: PUSH
27184: LD_VAR 0 3
27188: PUSH
27189: EMPTY
27190: LIST
27191: LIST
27192: PPUSH
27193: CALL_OW 69
27197: IN
27198: PUSH
27199: LD_EXP 100
27203: PUSH
27204: LD_VAR 0 1
27208: ARRAY
27209: PUSH
27210: LD_VAR 0 2
27214: ARRAY
27215: PUSH
27216: LD_INT 1
27218: ARRAY
27219: PPUSH
27220: LD_EXP 100
27224: PUSH
27225: LD_VAR 0 1
27229: ARRAY
27230: PUSH
27231: LD_VAR 0 2
27235: ARRAY
27236: PUSH
27237: LD_INT 2
27239: ARRAY
27240: PPUSH
27241: CALL_OW 458
27245: AND
27246: IFFALSE 27340
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
27248: LD_EXP 100
27252: PUSH
27253: LD_VAR 0 1
27257: ARRAY
27258: PUSH
27259: LD_VAR 0 2
27263: ARRAY
27264: PUSH
27265: LD_INT 1
27267: ARRAY
27268: PPUSH
27269: LD_EXP 100
27273: PUSH
27274: LD_VAR 0 1
27278: ARRAY
27279: PUSH
27280: LD_VAR 0 2
27284: ARRAY
27285: PUSH
27286: LD_INT 2
27288: ARRAY
27289: PPUSH
27290: LD_VAR 0 3
27294: PPUSH
27295: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
27299: LD_ADDR_EXP 100
27303: PUSH
27304: LD_EXP 100
27308: PPUSH
27309: LD_VAR 0 1
27313: PPUSH
27314: LD_EXP 100
27318: PUSH
27319: LD_VAR 0 1
27323: ARRAY
27324: PPUSH
27325: LD_VAR 0 2
27329: PPUSH
27330: CALL_OW 3
27334: PPUSH
27335: CALL_OW 1
27339: ST_TO_ADDR
// end ; end ;
27340: GO 27091
27342: POP
27343: POP
// end ;
27344: GO 27009
27346: POP
27347: POP
// end ;
27348: PPOPN 4
27350: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
27351: LD_INT 0
27353: PPUSH
27354: PPUSH
// result := false ;
27355: LD_ADDR_VAR 0 4
27359: PUSH
27360: LD_INT 0
27362: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
27363: LD_VAR 0 1
27367: PPUSH
27368: CALL_OW 264
27372: PUSH
27373: LD_INT 81
27375: EQUAL
27376: NOT
27377: IFFALSE 27381
// exit ;
27379: GO 27621
// index := GetElementIndex ( minersList , unit ) ;
27381: LD_ADDR_VAR 0 5
27385: PUSH
27386: LD_EXP 99
27390: PPUSH
27391: LD_VAR 0 1
27395: PPUSH
27396: CALL 33579 0 2
27400: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
27401: LD_EXP 100
27405: PUSH
27406: LD_VAR 0 5
27410: ARRAY
27411: PUSH
27412: LD_EXP 101
27416: GREATEREQUAL
27417: IFFALSE 27421
// exit ;
27419: GO 27621
// ComMoveXY ( unit , x , y ) ;
27421: LD_VAR 0 1
27425: PPUSH
27426: LD_VAR 0 2
27430: PPUSH
27431: LD_VAR 0 3
27435: PPUSH
27436: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
27440: LD_INT 35
27442: PPUSH
27443: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
27447: LD_VAR 0 1
27451: PPUSH
27452: LD_VAR 0 2
27456: PPUSH
27457: LD_VAR 0 3
27461: PPUSH
27462: CALL 64963 0 3
27466: NOT
27467: PUSH
27468: LD_VAR 0 1
27472: PPUSH
27473: CALL_OW 314
27477: AND
27478: IFFALSE 27482
// exit ;
27480: GO 27621
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
27482: LD_VAR 0 2
27486: PPUSH
27487: LD_VAR 0 3
27491: PPUSH
27492: CALL_OW 428
27496: PUSH
27497: LD_VAR 0 1
27501: EQUAL
27502: PUSH
27503: LD_VAR 0 1
27507: PPUSH
27508: CALL_OW 314
27512: NOT
27513: AND
27514: IFFALSE 27440
// PlaySoundXY ( x , y , PlantMine ) ;
27516: LD_VAR 0 2
27520: PPUSH
27521: LD_VAR 0 3
27525: PPUSH
27526: LD_STRING PlantMine
27528: PPUSH
27529: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
27533: LD_VAR 0 2
27537: PPUSH
27538: LD_VAR 0 3
27542: PPUSH
27543: LD_VAR 0 1
27547: PPUSH
27548: CALL_OW 255
27552: PPUSH
27553: LD_INT 0
27555: PPUSH
27556: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
27560: LD_ADDR_EXP 100
27564: PUSH
27565: LD_EXP 100
27569: PPUSH
27570: LD_VAR 0 5
27574: PUSH
27575: LD_EXP 100
27579: PUSH
27580: LD_VAR 0 5
27584: ARRAY
27585: PUSH
27586: LD_INT 1
27588: PLUS
27589: PUSH
27590: EMPTY
27591: LIST
27592: LIST
27593: PPUSH
27594: LD_VAR 0 2
27598: PUSH
27599: LD_VAR 0 3
27603: PUSH
27604: EMPTY
27605: LIST
27606: LIST
27607: PPUSH
27608: CALL 33794 0 3
27612: ST_TO_ADDR
// result := true ;
27613: LD_ADDR_VAR 0 4
27617: PUSH
27618: LD_INT 1
27620: ST_TO_ADDR
// end ;
27621: LD_VAR 0 4
27625: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
27626: LD_INT 0
27628: PPUSH
27629: PPUSH
27630: PPUSH
// if not unit in minersList then
27631: LD_VAR 0 1
27635: PUSH
27636: LD_EXP 99
27640: IN
27641: NOT
27642: IFFALSE 27646
// exit ;
27644: GO 28038
// index := GetElementIndex ( minersList , unit ) ;
27646: LD_ADDR_VAR 0 6
27650: PUSH
27651: LD_EXP 99
27655: PPUSH
27656: LD_VAR 0 1
27660: PPUSH
27661: CALL 33579 0 2
27665: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
27666: LD_ADDR_VAR 0 5
27670: PUSH
27671: DOUBLE
27672: LD_EXP 100
27676: PUSH
27677: LD_VAR 0 6
27681: ARRAY
27682: INC
27683: ST_TO_ADDR
27684: LD_INT 1
27686: PUSH
27687: FOR_DOWNTO
27688: IFFALSE 27849
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
27690: LD_EXP 100
27694: PUSH
27695: LD_VAR 0 6
27699: ARRAY
27700: PUSH
27701: LD_VAR 0 5
27705: ARRAY
27706: PUSH
27707: LD_INT 1
27709: ARRAY
27710: PUSH
27711: LD_VAR 0 2
27715: EQUAL
27716: PUSH
27717: LD_EXP 100
27721: PUSH
27722: LD_VAR 0 6
27726: ARRAY
27727: PUSH
27728: LD_VAR 0 5
27732: ARRAY
27733: PUSH
27734: LD_INT 2
27736: ARRAY
27737: PUSH
27738: LD_VAR 0 3
27742: EQUAL
27743: AND
27744: IFFALSE 27847
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
27746: LD_EXP 100
27750: PUSH
27751: LD_VAR 0 6
27755: ARRAY
27756: PUSH
27757: LD_VAR 0 5
27761: ARRAY
27762: PUSH
27763: LD_INT 1
27765: ARRAY
27766: PPUSH
27767: LD_EXP 100
27771: PUSH
27772: LD_VAR 0 6
27776: ARRAY
27777: PUSH
27778: LD_VAR 0 5
27782: ARRAY
27783: PUSH
27784: LD_INT 2
27786: ARRAY
27787: PPUSH
27788: LD_VAR 0 1
27792: PPUSH
27793: CALL_OW 255
27797: PPUSH
27798: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
27802: LD_ADDR_EXP 100
27806: PUSH
27807: LD_EXP 100
27811: PPUSH
27812: LD_VAR 0 6
27816: PPUSH
27817: LD_EXP 100
27821: PUSH
27822: LD_VAR 0 6
27826: ARRAY
27827: PPUSH
27828: LD_VAR 0 5
27832: PPUSH
27833: CALL_OW 3
27837: PPUSH
27838: CALL_OW 1
27842: ST_TO_ADDR
// exit ;
27843: POP
27844: POP
27845: GO 28038
// end ; end ;
27847: GO 27687
27849: POP
27850: POP
// for i := minerMinesList [ index ] downto 1 do
27851: LD_ADDR_VAR 0 5
27855: PUSH
27856: DOUBLE
27857: LD_EXP 100
27861: PUSH
27862: LD_VAR 0 6
27866: ARRAY
27867: INC
27868: ST_TO_ADDR
27869: LD_INT 1
27871: PUSH
27872: FOR_DOWNTO
27873: IFFALSE 28036
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
27875: LD_EXP 100
27879: PUSH
27880: LD_VAR 0 6
27884: ARRAY
27885: PUSH
27886: LD_VAR 0 5
27890: ARRAY
27891: PUSH
27892: LD_INT 1
27894: ARRAY
27895: PPUSH
27896: LD_EXP 100
27900: PUSH
27901: LD_VAR 0 6
27905: ARRAY
27906: PUSH
27907: LD_VAR 0 5
27911: ARRAY
27912: PUSH
27913: LD_INT 2
27915: ARRAY
27916: PPUSH
27917: LD_VAR 0 2
27921: PPUSH
27922: LD_VAR 0 3
27926: PPUSH
27927: CALL_OW 298
27931: PUSH
27932: LD_INT 6
27934: LESS
27935: IFFALSE 28034
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
27937: LD_EXP 100
27941: PUSH
27942: LD_VAR 0 6
27946: ARRAY
27947: PUSH
27948: LD_VAR 0 5
27952: ARRAY
27953: PUSH
27954: LD_INT 1
27956: ARRAY
27957: PPUSH
27958: LD_EXP 100
27962: PUSH
27963: LD_VAR 0 6
27967: ARRAY
27968: PUSH
27969: LD_VAR 0 5
27973: ARRAY
27974: PUSH
27975: LD_INT 2
27977: ARRAY
27978: PPUSH
27979: LD_VAR 0 1
27983: PPUSH
27984: CALL_OW 255
27988: PPUSH
27989: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
27993: LD_ADDR_EXP 100
27997: PUSH
27998: LD_EXP 100
28002: PPUSH
28003: LD_VAR 0 6
28007: PPUSH
28008: LD_EXP 100
28012: PUSH
28013: LD_VAR 0 6
28017: ARRAY
28018: PPUSH
28019: LD_VAR 0 5
28023: PPUSH
28024: CALL_OW 3
28028: PPUSH
28029: CALL_OW 1
28033: ST_TO_ADDR
// end ; end ;
28034: GO 27872
28036: POP
28037: POP
// end ;
28038: LD_VAR 0 4
28042: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
28043: LD_INT 0
28045: PPUSH
28046: PPUSH
28047: PPUSH
28048: PPUSH
28049: PPUSH
28050: PPUSH
28051: PPUSH
28052: PPUSH
28053: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
28054: LD_VAR 0 1
28058: PPUSH
28059: CALL_OW 264
28063: PUSH
28064: LD_INT 81
28066: EQUAL
28067: NOT
28068: PUSH
28069: LD_VAR 0 1
28073: PUSH
28074: LD_EXP 99
28078: IN
28079: NOT
28080: OR
28081: IFFALSE 28085
// exit ;
28083: GO 28407
// index := GetElementIndex ( minersList , unit ) ;
28085: LD_ADDR_VAR 0 6
28089: PUSH
28090: LD_EXP 99
28094: PPUSH
28095: LD_VAR 0 1
28099: PPUSH
28100: CALL 33579 0 2
28104: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
28105: LD_ADDR_VAR 0 8
28109: PUSH
28110: LD_EXP 101
28114: PUSH
28115: LD_EXP 100
28119: PUSH
28120: LD_VAR 0 6
28124: ARRAY
28125: MINUS
28126: ST_TO_ADDR
// if not minesFreeAmount then
28127: LD_VAR 0 8
28131: NOT
28132: IFFALSE 28136
// exit ;
28134: GO 28407
// tmp := [ ] ;
28136: LD_ADDR_VAR 0 7
28140: PUSH
28141: EMPTY
28142: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
28143: LD_ADDR_VAR 0 5
28147: PUSH
28148: DOUBLE
28149: LD_INT 1
28151: DEC
28152: ST_TO_ADDR
28153: LD_VAR 0 8
28157: PUSH
28158: FOR_TO
28159: IFFALSE 28354
// begin _d := rand ( 0 , 5 ) ;
28161: LD_ADDR_VAR 0 11
28165: PUSH
28166: LD_INT 0
28168: PPUSH
28169: LD_INT 5
28171: PPUSH
28172: CALL_OW 12
28176: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
28177: LD_ADDR_VAR 0 12
28181: PUSH
28182: LD_INT 2
28184: PPUSH
28185: LD_INT 6
28187: PPUSH
28188: CALL_OW 12
28192: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
28193: LD_ADDR_VAR 0 9
28197: PUSH
28198: LD_VAR 0 2
28202: PPUSH
28203: LD_VAR 0 11
28207: PPUSH
28208: LD_VAR 0 12
28212: PPUSH
28213: CALL_OW 272
28217: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
28218: LD_ADDR_VAR 0 10
28222: PUSH
28223: LD_VAR 0 3
28227: PPUSH
28228: LD_VAR 0 11
28232: PPUSH
28233: LD_VAR 0 12
28237: PPUSH
28238: CALL_OW 273
28242: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
28243: LD_VAR 0 9
28247: PPUSH
28248: LD_VAR 0 10
28252: PPUSH
28253: CALL_OW 488
28257: PUSH
28258: LD_VAR 0 9
28262: PUSH
28263: LD_VAR 0 10
28267: PUSH
28268: EMPTY
28269: LIST
28270: LIST
28271: PUSH
28272: LD_VAR 0 7
28276: IN
28277: NOT
28278: AND
28279: PUSH
28280: LD_VAR 0 9
28284: PPUSH
28285: LD_VAR 0 10
28289: PPUSH
28290: CALL_OW 458
28294: NOT
28295: AND
28296: IFFALSE 28338
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
28298: LD_ADDR_VAR 0 7
28302: PUSH
28303: LD_VAR 0 7
28307: PPUSH
28308: LD_VAR 0 7
28312: PUSH
28313: LD_INT 1
28315: PLUS
28316: PPUSH
28317: LD_VAR 0 9
28321: PUSH
28322: LD_VAR 0 10
28326: PUSH
28327: EMPTY
28328: LIST
28329: LIST
28330: PPUSH
28331: CALL_OW 1
28335: ST_TO_ADDR
28336: GO 28352
// i := i - 1 ;
28338: LD_ADDR_VAR 0 5
28342: PUSH
28343: LD_VAR 0 5
28347: PUSH
28348: LD_INT 1
28350: MINUS
28351: ST_TO_ADDR
// end ;
28352: GO 28158
28354: POP
28355: POP
// for i in tmp do
28356: LD_ADDR_VAR 0 5
28360: PUSH
28361: LD_VAR 0 7
28365: PUSH
28366: FOR_IN
28367: IFFALSE 28405
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
28369: LD_VAR 0 1
28373: PPUSH
28374: LD_VAR 0 5
28378: PUSH
28379: LD_INT 1
28381: ARRAY
28382: PPUSH
28383: LD_VAR 0 5
28387: PUSH
28388: LD_INT 2
28390: ARRAY
28391: PPUSH
28392: CALL 27351 0 3
28396: NOT
28397: IFFALSE 28403
// exit ;
28399: POP
28400: POP
28401: GO 28407
28403: GO 28366
28405: POP
28406: POP
// end ;
28407: LD_VAR 0 4
28411: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
28412: LD_INT 0
28414: PPUSH
28415: PPUSH
28416: PPUSH
28417: PPUSH
28418: PPUSH
28419: PPUSH
28420: PPUSH
// if not GetClass ( unit ) = class_sniper then
28421: LD_VAR 0 1
28425: PPUSH
28426: CALL_OW 257
28430: PUSH
28431: LD_INT 5
28433: EQUAL
28434: NOT
28435: IFFALSE 28439
// exit ;
28437: GO 28827
// dist := 8 ;
28439: LD_ADDR_VAR 0 5
28443: PUSH
28444: LD_INT 8
28446: ST_TO_ADDR
// viewRange := 12 ;
28447: LD_ADDR_VAR 0 7
28451: PUSH
28452: LD_INT 12
28454: ST_TO_ADDR
// side := GetSide ( unit ) ;
28455: LD_ADDR_VAR 0 6
28459: PUSH
28460: LD_VAR 0 1
28464: PPUSH
28465: CALL_OW 255
28469: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
28470: LD_INT 61
28472: PPUSH
28473: LD_VAR 0 6
28477: PPUSH
28478: CALL_OW 321
28482: PUSH
28483: LD_INT 2
28485: EQUAL
28486: IFFALSE 28496
// viewRange := 16 ;
28488: LD_ADDR_VAR 0 7
28492: PUSH
28493: LD_INT 16
28495: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
28496: LD_VAR 0 1
28500: PPUSH
28501: LD_VAR 0 2
28505: PPUSH
28506: LD_VAR 0 3
28510: PPUSH
28511: CALL_OW 297
28515: PUSH
28516: LD_VAR 0 5
28520: GREATER
28521: IFFALSE 28600
// begin ComMoveXY ( unit , x , y ) ;
28523: LD_VAR 0 1
28527: PPUSH
28528: LD_VAR 0 2
28532: PPUSH
28533: LD_VAR 0 3
28537: PPUSH
28538: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
28542: LD_INT 35
28544: PPUSH
28545: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
28549: LD_VAR 0 1
28553: PPUSH
28554: LD_VAR 0 2
28558: PPUSH
28559: LD_VAR 0 3
28563: PPUSH
28564: CALL 64963 0 3
28568: NOT
28569: IFFALSE 28573
// exit ;
28571: GO 28827
// until GetDistUnitXY ( unit , x , y ) < dist ;
28573: LD_VAR 0 1
28577: PPUSH
28578: LD_VAR 0 2
28582: PPUSH
28583: LD_VAR 0 3
28587: PPUSH
28588: CALL_OW 297
28592: PUSH
28593: LD_VAR 0 5
28597: LESS
28598: IFFALSE 28542
// end ; ComTurnXY ( unit , x , y ) ;
28600: LD_VAR 0 1
28604: PPUSH
28605: LD_VAR 0 2
28609: PPUSH
28610: LD_VAR 0 3
28614: PPUSH
28615: CALL_OW 118
// wait ( 5 ) ;
28619: LD_INT 5
28621: PPUSH
28622: CALL_OW 67
// _d := GetDir ( unit ) ;
28626: LD_ADDR_VAR 0 10
28630: PUSH
28631: LD_VAR 0 1
28635: PPUSH
28636: CALL_OW 254
28640: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
28641: LD_ADDR_VAR 0 8
28645: PUSH
28646: LD_VAR 0 1
28650: PPUSH
28651: CALL_OW 250
28655: PPUSH
28656: LD_VAR 0 10
28660: PPUSH
28661: LD_VAR 0 5
28665: PPUSH
28666: CALL_OW 272
28670: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
28671: LD_ADDR_VAR 0 9
28675: PUSH
28676: LD_VAR 0 1
28680: PPUSH
28681: CALL_OW 251
28685: PPUSH
28686: LD_VAR 0 10
28690: PPUSH
28691: LD_VAR 0 5
28695: PPUSH
28696: CALL_OW 273
28700: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
28701: LD_VAR 0 8
28705: PPUSH
28706: LD_VAR 0 9
28710: PPUSH
28711: CALL_OW 488
28715: NOT
28716: IFFALSE 28720
// exit ;
28718: GO 28827
// ComAnimCustom ( unit , 1 ) ;
28720: LD_VAR 0 1
28724: PPUSH
28725: LD_INT 1
28727: PPUSH
28728: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
28732: LD_VAR 0 8
28736: PPUSH
28737: LD_VAR 0 9
28741: PPUSH
28742: LD_VAR 0 6
28746: PPUSH
28747: LD_VAR 0 7
28751: PPUSH
28752: CALL_OW 330
// repeat wait ( 1 ) ;
28756: LD_INT 1
28758: PPUSH
28759: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
28763: LD_VAR 0 1
28767: PPUSH
28768: CALL_OW 316
28772: PUSH
28773: LD_VAR 0 1
28777: PPUSH
28778: CALL_OW 314
28782: OR
28783: PUSH
28784: LD_VAR 0 1
28788: PPUSH
28789: CALL_OW 302
28793: NOT
28794: OR
28795: PUSH
28796: LD_VAR 0 1
28800: PPUSH
28801: CALL_OW 301
28805: OR
28806: IFFALSE 28756
// RemoveSeeing ( _x , _y , side ) ;
28808: LD_VAR 0 8
28812: PPUSH
28813: LD_VAR 0 9
28817: PPUSH
28818: LD_VAR 0 6
28822: PPUSH
28823: CALL_OW 331
// end ; end_of_file
28827: LD_VAR 0 4
28831: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
28832: LD_INT 0
28834: PPUSH
28835: PPUSH
// if exist_mode then
28836: LD_VAR 0 2
28840: IFFALSE 28865
// unit := CreateCharacter ( prefix & ident ) else
28842: LD_ADDR_VAR 0 5
28846: PUSH
28847: LD_VAR 0 3
28851: PUSH
28852: LD_VAR 0 1
28856: STR
28857: PPUSH
28858: CALL_OW 34
28862: ST_TO_ADDR
28863: GO 28880
// unit := NewCharacter ( ident ) ;
28865: LD_ADDR_VAR 0 5
28869: PUSH
28870: LD_VAR 0 1
28874: PPUSH
28875: CALL_OW 25
28879: ST_TO_ADDR
// result := unit ;
28880: LD_ADDR_VAR 0 4
28884: PUSH
28885: LD_VAR 0 5
28889: ST_TO_ADDR
// end ;
28890: LD_VAR 0 4
28894: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
28895: LD_INT 0
28897: PPUSH
28898: PPUSH
// if not side or not nation then
28899: LD_VAR 0 1
28903: NOT
28904: PUSH
28905: LD_VAR 0 2
28909: NOT
28910: OR
28911: IFFALSE 28915
// exit ;
28913: GO 29683
// case nation of nation_american :
28915: LD_VAR 0 2
28919: PUSH
28920: LD_INT 1
28922: DOUBLE
28923: EQUAL
28924: IFTRUE 28928
28926: GO 29142
28928: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
28929: LD_ADDR_VAR 0 4
28933: PUSH
28934: LD_INT 35
28936: PUSH
28937: LD_INT 45
28939: PUSH
28940: LD_INT 46
28942: PUSH
28943: LD_INT 47
28945: PUSH
28946: LD_INT 82
28948: PUSH
28949: LD_INT 83
28951: PUSH
28952: LD_INT 84
28954: PUSH
28955: LD_INT 85
28957: PUSH
28958: LD_INT 86
28960: PUSH
28961: LD_INT 1
28963: PUSH
28964: LD_INT 2
28966: PUSH
28967: LD_INT 6
28969: PUSH
28970: LD_INT 15
28972: PUSH
28973: LD_INT 16
28975: PUSH
28976: LD_INT 7
28978: PUSH
28979: LD_INT 12
28981: PUSH
28982: LD_INT 13
28984: PUSH
28985: LD_INT 10
28987: PUSH
28988: LD_INT 14
28990: PUSH
28991: LD_INT 20
28993: PUSH
28994: LD_INT 21
28996: PUSH
28997: LD_INT 22
28999: PUSH
29000: LD_INT 25
29002: PUSH
29003: LD_INT 32
29005: PUSH
29006: LD_INT 27
29008: PUSH
29009: LD_INT 36
29011: PUSH
29012: LD_INT 69
29014: PUSH
29015: LD_INT 39
29017: PUSH
29018: LD_INT 34
29020: PUSH
29021: LD_INT 40
29023: PUSH
29024: LD_INT 48
29026: PUSH
29027: LD_INT 49
29029: PUSH
29030: LD_INT 50
29032: PUSH
29033: LD_INT 51
29035: PUSH
29036: LD_INT 52
29038: PUSH
29039: LD_INT 53
29041: PUSH
29042: LD_INT 54
29044: PUSH
29045: LD_INT 55
29047: PUSH
29048: LD_INT 56
29050: PUSH
29051: LD_INT 57
29053: PUSH
29054: LD_INT 58
29056: PUSH
29057: LD_INT 59
29059: PUSH
29060: LD_INT 60
29062: PUSH
29063: LD_INT 61
29065: PUSH
29066: LD_INT 62
29068: PUSH
29069: LD_INT 80
29071: PUSH
29072: LD_INT 82
29074: PUSH
29075: LD_INT 83
29077: PUSH
29078: LD_INT 84
29080: PUSH
29081: LD_INT 85
29083: PUSH
29084: LD_INT 86
29086: PUSH
29087: EMPTY
29088: LIST
29089: LIST
29090: LIST
29091: LIST
29092: LIST
29093: LIST
29094: LIST
29095: LIST
29096: LIST
29097: LIST
29098: LIST
29099: LIST
29100: LIST
29101: LIST
29102: LIST
29103: LIST
29104: LIST
29105: LIST
29106: LIST
29107: LIST
29108: LIST
29109: LIST
29110: LIST
29111: LIST
29112: LIST
29113: LIST
29114: LIST
29115: LIST
29116: LIST
29117: LIST
29118: LIST
29119: LIST
29120: LIST
29121: LIST
29122: LIST
29123: LIST
29124: LIST
29125: LIST
29126: LIST
29127: LIST
29128: LIST
29129: LIST
29130: LIST
29131: LIST
29132: LIST
29133: LIST
29134: LIST
29135: LIST
29136: LIST
29137: LIST
29138: LIST
29139: ST_TO_ADDR
29140: GO 29607
29142: LD_INT 2
29144: DOUBLE
29145: EQUAL
29146: IFTRUE 29150
29148: GO 29376
29150: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
29151: LD_ADDR_VAR 0 4
29155: PUSH
29156: LD_INT 35
29158: PUSH
29159: LD_INT 45
29161: PUSH
29162: LD_INT 46
29164: PUSH
29165: LD_INT 47
29167: PUSH
29168: LD_INT 82
29170: PUSH
29171: LD_INT 83
29173: PUSH
29174: LD_INT 84
29176: PUSH
29177: LD_INT 85
29179: PUSH
29180: LD_INT 87
29182: PUSH
29183: LD_INT 70
29185: PUSH
29186: LD_INT 1
29188: PUSH
29189: LD_INT 11
29191: PUSH
29192: LD_INT 3
29194: PUSH
29195: LD_INT 4
29197: PUSH
29198: LD_INT 5
29200: PUSH
29201: LD_INT 6
29203: PUSH
29204: LD_INT 15
29206: PUSH
29207: LD_INT 18
29209: PUSH
29210: LD_INT 7
29212: PUSH
29213: LD_INT 17
29215: PUSH
29216: LD_INT 8
29218: PUSH
29219: LD_INT 20
29221: PUSH
29222: LD_INT 21
29224: PUSH
29225: LD_INT 22
29227: PUSH
29228: LD_INT 72
29230: PUSH
29231: LD_INT 26
29233: PUSH
29234: LD_INT 69
29236: PUSH
29237: LD_INT 39
29239: PUSH
29240: LD_INT 40
29242: PUSH
29243: LD_INT 41
29245: PUSH
29246: LD_INT 42
29248: PUSH
29249: LD_INT 43
29251: PUSH
29252: LD_INT 48
29254: PUSH
29255: LD_INT 49
29257: PUSH
29258: LD_INT 50
29260: PUSH
29261: LD_INT 51
29263: PUSH
29264: LD_INT 52
29266: PUSH
29267: LD_INT 53
29269: PUSH
29270: LD_INT 54
29272: PUSH
29273: LD_INT 55
29275: PUSH
29276: LD_INT 56
29278: PUSH
29279: LD_INT 60
29281: PUSH
29282: LD_INT 61
29284: PUSH
29285: LD_INT 62
29287: PUSH
29288: LD_INT 66
29290: PUSH
29291: LD_INT 67
29293: PUSH
29294: LD_INT 68
29296: PUSH
29297: LD_INT 81
29299: PUSH
29300: LD_INT 82
29302: PUSH
29303: LD_INT 83
29305: PUSH
29306: LD_INT 84
29308: PUSH
29309: LD_INT 85
29311: PUSH
29312: LD_INT 87
29314: PUSH
29315: LD_INT 88
29317: PUSH
29318: EMPTY
29319: LIST
29320: LIST
29321: LIST
29322: LIST
29323: LIST
29324: LIST
29325: LIST
29326: LIST
29327: LIST
29328: LIST
29329: LIST
29330: LIST
29331: LIST
29332: LIST
29333: LIST
29334: LIST
29335: LIST
29336: LIST
29337: LIST
29338: LIST
29339: LIST
29340: LIST
29341: LIST
29342: LIST
29343: LIST
29344: LIST
29345: LIST
29346: LIST
29347: LIST
29348: LIST
29349: LIST
29350: LIST
29351: LIST
29352: LIST
29353: LIST
29354: LIST
29355: LIST
29356: LIST
29357: LIST
29358: LIST
29359: LIST
29360: LIST
29361: LIST
29362: LIST
29363: LIST
29364: LIST
29365: LIST
29366: LIST
29367: LIST
29368: LIST
29369: LIST
29370: LIST
29371: LIST
29372: LIST
29373: ST_TO_ADDR
29374: GO 29607
29376: LD_INT 3
29378: DOUBLE
29379: EQUAL
29380: IFTRUE 29384
29382: GO 29606
29384: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
29385: LD_ADDR_VAR 0 4
29389: PUSH
29390: LD_INT 46
29392: PUSH
29393: LD_INT 47
29395: PUSH
29396: LD_INT 1
29398: PUSH
29399: LD_INT 2
29401: PUSH
29402: LD_INT 82
29404: PUSH
29405: LD_INT 83
29407: PUSH
29408: LD_INT 84
29410: PUSH
29411: LD_INT 85
29413: PUSH
29414: LD_INT 86
29416: PUSH
29417: LD_INT 11
29419: PUSH
29420: LD_INT 9
29422: PUSH
29423: LD_INT 20
29425: PUSH
29426: LD_INT 19
29428: PUSH
29429: LD_INT 21
29431: PUSH
29432: LD_INT 24
29434: PUSH
29435: LD_INT 22
29437: PUSH
29438: LD_INT 25
29440: PUSH
29441: LD_INT 28
29443: PUSH
29444: LD_INT 29
29446: PUSH
29447: LD_INT 30
29449: PUSH
29450: LD_INT 31
29452: PUSH
29453: LD_INT 37
29455: PUSH
29456: LD_INT 38
29458: PUSH
29459: LD_INT 32
29461: PUSH
29462: LD_INT 27
29464: PUSH
29465: LD_INT 33
29467: PUSH
29468: LD_INT 69
29470: PUSH
29471: LD_INT 39
29473: PUSH
29474: LD_INT 34
29476: PUSH
29477: LD_INT 40
29479: PUSH
29480: LD_INT 71
29482: PUSH
29483: LD_INT 23
29485: PUSH
29486: LD_INT 44
29488: PUSH
29489: LD_INT 48
29491: PUSH
29492: LD_INT 49
29494: PUSH
29495: LD_INT 50
29497: PUSH
29498: LD_INT 51
29500: PUSH
29501: LD_INT 52
29503: PUSH
29504: LD_INT 53
29506: PUSH
29507: LD_INT 54
29509: PUSH
29510: LD_INT 55
29512: PUSH
29513: LD_INT 56
29515: PUSH
29516: LD_INT 57
29518: PUSH
29519: LD_INT 58
29521: PUSH
29522: LD_INT 59
29524: PUSH
29525: LD_INT 63
29527: PUSH
29528: LD_INT 64
29530: PUSH
29531: LD_INT 65
29533: PUSH
29534: LD_INT 82
29536: PUSH
29537: LD_INT 83
29539: PUSH
29540: LD_INT 84
29542: PUSH
29543: LD_INT 85
29545: PUSH
29546: LD_INT 86
29548: PUSH
29549: EMPTY
29550: LIST
29551: LIST
29552: LIST
29553: LIST
29554: LIST
29555: LIST
29556: LIST
29557: LIST
29558: LIST
29559: LIST
29560: LIST
29561: LIST
29562: LIST
29563: LIST
29564: LIST
29565: LIST
29566: LIST
29567: LIST
29568: LIST
29569: LIST
29570: LIST
29571: LIST
29572: LIST
29573: LIST
29574: LIST
29575: LIST
29576: LIST
29577: LIST
29578: LIST
29579: LIST
29580: LIST
29581: LIST
29582: LIST
29583: LIST
29584: LIST
29585: LIST
29586: LIST
29587: LIST
29588: LIST
29589: LIST
29590: LIST
29591: LIST
29592: LIST
29593: LIST
29594: LIST
29595: LIST
29596: LIST
29597: LIST
29598: LIST
29599: LIST
29600: LIST
29601: LIST
29602: LIST
29603: ST_TO_ADDR
29604: GO 29607
29606: POP
// if state > - 1 and state < 3 then
29607: LD_VAR 0 3
29611: PUSH
29612: LD_INT 1
29614: NEG
29615: GREATER
29616: PUSH
29617: LD_VAR 0 3
29621: PUSH
29622: LD_INT 3
29624: LESS
29625: AND
29626: IFFALSE 29683
// for i in result do
29628: LD_ADDR_VAR 0 5
29632: PUSH
29633: LD_VAR 0 4
29637: PUSH
29638: FOR_IN
29639: IFFALSE 29681
// if GetTech ( i , side ) <> state then
29641: LD_VAR 0 5
29645: PPUSH
29646: LD_VAR 0 1
29650: PPUSH
29651: CALL_OW 321
29655: PUSH
29656: LD_VAR 0 3
29660: NONEQUAL
29661: IFFALSE 29679
// result := result diff i ;
29663: LD_ADDR_VAR 0 4
29667: PUSH
29668: LD_VAR 0 4
29672: PUSH
29673: LD_VAR 0 5
29677: DIFF
29678: ST_TO_ADDR
29679: GO 29638
29681: POP
29682: POP
// end ;
29683: LD_VAR 0 4
29687: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
29688: LD_INT 0
29690: PPUSH
29691: PPUSH
29692: PPUSH
// result := true ;
29693: LD_ADDR_VAR 0 3
29697: PUSH
29698: LD_INT 1
29700: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
29701: LD_ADDR_VAR 0 5
29705: PUSH
29706: LD_VAR 0 2
29710: PPUSH
29711: CALL_OW 480
29715: ST_TO_ADDR
// if not tmp then
29716: LD_VAR 0 5
29720: NOT
29721: IFFALSE 29725
// exit ;
29723: GO 29774
// for i in tmp do
29725: LD_ADDR_VAR 0 4
29729: PUSH
29730: LD_VAR 0 5
29734: PUSH
29735: FOR_IN
29736: IFFALSE 29772
// if GetTech ( i , side ) <> state_researched then
29738: LD_VAR 0 4
29742: PPUSH
29743: LD_VAR 0 1
29747: PPUSH
29748: CALL_OW 321
29752: PUSH
29753: LD_INT 2
29755: NONEQUAL
29756: IFFALSE 29770
// begin result := false ;
29758: LD_ADDR_VAR 0 3
29762: PUSH
29763: LD_INT 0
29765: ST_TO_ADDR
// exit ;
29766: POP
29767: POP
29768: GO 29774
// end ;
29770: GO 29735
29772: POP
29773: POP
// end ;
29774: LD_VAR 0 3
29778: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
29779: LD_INT 0
29781: PPUSH
29782: PPUSH
29783: PPUSH
29784: PPUSH
29785: PPUSH
29786: PPUSH
29787: PPUSH
29788: PPUSH
29789: PPUSH
29790: PPUSH
29791: PPUSH
29792: PPUSH
29793: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
29794: LD_VAR 0 1
29798: NOT
29799: PUSH
29800: LD_VAR 0 1
29804: PPUSH
29805: CALL_OW 257
29809: PUSH
29810: LD_INT 9
29812: NONEQUAL
29813: OR
29814: IFFALSE 29818
// exit ;
29816: GO 30391
// side := GetSide ( unit ) ;
29818: LD_ADDR_VAR 0 9
29822: PUSH
29823: LD_VAR 0 1
29827: PPUSH
29828: CALL_OW 255
29832: ST_TO_ADDR
// tech_space := tech_spacanom ;
29833: LD_ADDR_VAR 0 12
29837: PUSH
29838: LD_INT 29
29840: ST_TO_ADDR
// tech_time := tech_taurad ;
29841: LD_ADDR_VAR 0 13
29845: PUSH
29846: LD_INT 28
29848: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
29849: LD_ADDR_VAR 0 11
29853: PUSH
29854: LD_VAR 0 1
29858: PPUSH
29859: CALL_OW 310
29863: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
29864: LD_VAR 0 11
29868: PPUSH
29869: CALL_OW 247
29873: PUSH
29874: LD_INT 2
29876: EQUAL
29877: IFFALSE 29881
// exit ;
29879: GO 30391
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
29881: LD_ADDR_VAR 0 8
29885: PUSH
29886: LD_INT 81
29888: PUSH
29889: LD_VAR 0 9
29893: PUSH
29894: EMPTY
29895: LIST
29896: LIST
29897: PUSH
29898: LD_INT 3
29900: PUSH
29901: LD_INT 21
29903: PUSH
29904: LD_INT 3
29906: PUSH
29907: EMPTY
29908: LIST
29909: LIST
29910: PUSH
29911: EMPTY
29912: LIST
29913: LIST
29914: PUSH
29915: EMPTY
29916: LIST
29917: LIST
29918: PPUSH
29919: CALL_OW 69
29923: ST_TO_ADDR
// if not tmp then
29924: LD_VAR 0 8
29928: NOT
29929: IFFALSE 29933
// exit ;
29931: GO 30391
// if in_unit then
29933: LD_VAR 0 11
29937: IFFALSE 29961
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
29939: LD_ADDR_VAR 0 10
29943: PUSH
29944: LD_VAR 0 8
29948: PPUSH
29949: LD_VAR 0 11
29953: PPUSH
29954: CALL_OW 74
29958: ST_TO_ADDR
29959: GO 29981
// enemy := NearestUnitToUnit ( tmp , unit ) ;
29961: LD_ADDR_VAR 0 10
29965: PUSH
29966: LD_VAR 0 8
29970: PPUSH
29971: LD_VAR 0 1
29975: PPUSH
29976: CALL_OW 74
29980: ST_TO_ADDR
// if not enemy then
29981: LD_VAR 0 10
29985: NOT
29986: IFFALSE 29990
// exit ;
29988: GO 30391
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
29990: LD_VAR 0 11
29994: PUSH
29995: LD_VAR 0 11
29999: PPUSH
30000: LD_VAR 0 10
30004: PPUSH
30005: CALL_OW 296
30009: PUSH
30010: LD_INT 13
30012: GREATER
30013: AND
30014: PUSH
30015: LD_VAR 0 1
30019: PPUSH
30020: LD_VAR 0 10
30024: PPUSH
30025: CALL_OW 296
30029: PUSH
30030: LD_INT 12
30032: GREATER
30033: OR
30034: IFFALSE 30038
// exit ;
30036: GO 30391
// missile := [ 1 ] ;
30038: LD_ADDR_VAR 0 14
30042: PUSH
30043: LD_INT 1
30045: PUSH
30046: EMPTY
30047: LIST
30048: ST_TO_ADDR
// if Researched ( side , tech_space ) then
30049: LD_VAR 0 9
30053: PPUSH
30054: LD_VAR 0 12
30058: PPUSH
30059: CALL_OW 325
30063: IFFALSE 30092
// missile := Replace ( missile , missile + 1 , 2 ) ;
30065: LD_ADDR_VAR 0 14
30069: PUSH
30070: LD_VAR 0 14
30074: PPUSH
30075: LD_VAR 0 14
30079: PUSH
30080: LD_INT 1
30082: PLUS
30083: PPUSH
30084: LD_INT 2
30086: PPUSH
30087: CALL_OW 1
30091: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
30092: LD_VAR 0 9
30096: PPUSH
30097: LD_VAR 0 13
30101: PPUSH
30102: CALL_OW 325
30106: PUSH
30107: LD_VAR 0 10
30111: PPUSH
30112: CALL_OW 255
30116: PPUSH
30117: LD_VAR 0 13
30121: PPUSH
30122: CALL_OW 325
30126: NOT
30127: AND
30128: IFFALSE 30157
// missile := Replace ( missile , missile + 1 , 3 ) ;
30130: LD_ADDR_VAR 0 14
30134: PUSH
30135: LD_VAR 0 14
30139: PPUSH
30140: LD_VAR 0 14
30144: PUSH
30145: LD_INT 1
30147: PLUS
30148: PPUSH
30149: LD_INT 3
30151: PPUSH
30152: CALL_OW 1
30156: ST_TO_ADDR
// if missile < 2 then
30157: LD_VAR 0 14
30161: PUSH
30162: LD_INT 2
30164: LESS
30165: IFFALSE 30169
// exit ;
30167: GO 30391
// x := GetX ( enemy ) ;
30169: LD_ADDR_VAR 0 4
30173: PUSH
30174: LD_VAR 0 10
30178: PPUSH
30179: CALL_OW 250
30183: ST_TO_ADDR
// y := GetY ( enemy ) ;
30184: LD_ADDR_VAR 0 5
30188: PUSH
30189: LD_VAR 0 10
30193: PPUSH
30194: CALL_OW 251
30198: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
30199: LD_ADDR_VAR 0 6
30203: PUSH
30204: LD_VAR 0 4
30208: PUSH
30209: LD_INT 1
30211: NEG
30212: PPUSH
30213: LD_INT 1
30215: PPUSH
30216: CALL_OW 12
30220: PLUS
30221: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
30222: LD_ADDR_VAR 0 7
30226: PUSH
30227: LD_VAR 0 5
30231: PUSH
30232: LD_INT 1
30234: NEG
30235: PPUSH
30236: LD_INT 1
30238: PPUSH
30239: CALL_OW 12
30243: PLUS
30244: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
30245: LD_VAR 0 6
30249: PPUSH
30250: LD_VAR 0 7
30254: PPUSH
30255: CALL_OW 488
30259: NOT
30260: IFFALSE 30282
// begin _x := x ;
30262: LD_ADDR_VAR 0 6
30266: PUSH
30267: LD_VAR 0 4
30271: ST_TO_ADDR
// _y := y ;
30272: LD_ADDR_VAR 0 7
30276: PUSH
30277: LD_VAR 0 5
30281: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
30282: LD_ADDR_VAR 0 3
30286: PUSH
30287: LD_INT 1
30289: PPUSH
30290: LD_VAR 0 14
30294: PPUSH
30295: CALL_OW 12
30299: ST_TO_ADDR
// case i of 1 :
30300: LD_VAR 0 3
30304: PUSH
30305: LD_INT 1
30307: DOUBLE
30308: EQUAL
30309: IFTRUE 30313
30311: GO 30330
30313: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
30314: LD_VAR 0 1
30318: PPUSH
30319: LD_VAR 0 10
30323: PPUSH
30324: CALL_OW 115
30328: GO 30391
30330: LD_INT 2
30332: DOUBLE
30333: EQUAL
30334: IFTRUE 30338
30336: GO 30360
30338: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
30339: LD_VAR 0 1
30343: PPUSH
30344: LD_VAR 0 6
30348: PPUSH
30349: LD_VAR 0 7
30353: PPUSH
30354: CALL_OW 153
30358: GO 30391
30360: LD_INT 3
30362: DOUBLE
30363: EQUAL
30364: IFTRUE 30368
30366: GO 30390
30368: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
30369: LD_VAR 0 1
30373: PPUSH
30374: LD_VAR 0 6
30378: PPUSH
30379: LD_VAR 0 7
30383: PPUSH
30384: CALL_OW 154
30388: GO 30391
30390: POP
// end ;
30391: LD_VAR 0 2
30395: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
30396: LD_INT 0
30398: PPUSH
30399: PPUSH
30400: PPUSH
30401: PPUSH
30402: PPUSH
30403: PPUSH
// if not unit or not building then
30404: LD_VAR 0 1
30408: NOT
30409: PUSH
30410: LD_VAR 0 2
30414: NOT
30415: OR
30416: IFFALSE 30420
// exit ;
30418: GO 30578
// x := GetX ( building ) ;
30420: LD_ADDR_VAR 0 5
30424: PUSH
30425: LD_VAR 0 2
30429: PPUSH
30430: CALL_OW 250
30434: ST_TO_ADDR
// y := GetY ( building ) ;
30435: LD_ADDR_VAR 0 6
30439: PUSH
30440: LD_VAR 0 2
30444: PPUSH
30445: CALL_OW 251
30449: ST_TO_ADDR
// for i = 0 to 5 do
30450: LD_ADDR_VAR 0 4
30454: PUSH
30455: DOUBLE
30456: LD_INT 0
30458: DEC
30459: ST_TO_ADDR
30460: LD_INT 5
30462: PUSH
30463: FOR_TO
30464: IFFALSE 30576
// begin _x := ShiftX ( x , i , 3 ) ;
30466: LD_ADDR_VAR 0 7
30470: PUSH
30471: LD_VAR 0 5
30475: PPUSH
30476: LD_VAR 0 4
30480: PPUSH
30481: LD_INT 3
30483: PPUSH
30484: CALL_OW 272
30488: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
30489: LD_ADDR_VAR 0 8
30493: PUSH
30494: LD_VAR 0 6
30498: PPUSH
30499: LD_VAR 0 4
30503: PPUSH
30504: LD_INT 3
30506: PPUSH
30507: CALL_OW 273
30511: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
30512: LD_VAR 0 7
30516: PPUSH
30517: LD_VAR 0 8
30521: PPUSH
30522: CALL_OW 488
30526: NOT
30527: IFFALSE 30531
// continue ;
30529: GO 30463
// if HexInfo ( _x , _y ) = 0 then
30531: LD_VAR 0 7
30535: PPUSH
30536: LD_VAR 0 8
30540: PPUSH
30541: CALL_OW 428
30545: PUSH
30546: LD_INT 0
30548: EQUAL
30549: IFFALSE 30574
// begin ComMoveXY ( unit , _x , _y ) ;
30551: LD_VAR 0 1
30555: PPUSH
30556: LD_VAR 0 7
30560: PPUSH
30561: LD_VAR 0 8
30565: PPUSH
30566: CALL_OW 111
// exit ;
30570: POP
30571: POP
30572: GO 30578
// end ; end ;
30574: GO 30463
30576: POP
30577: POP
// end ;
30578: LD_VAR 0 3
30582: RET
// export function ScanBase ( side , base_area ) ; begin
30583: LD_INT 0
30585: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
30586: LD_ADDR_VAR 0 3
30590: PUSH
30591: LD_VAR 0 2
30595: PPUSH
30596: LD_INT 81
30598: PUSH
30599: LD_VAR 0 1
30603: PUSH
30604: EMPTY
30605: LIST
30606: LIST
30607: PPUSH
30608: CALL_OW 70
30612: ST_TO_ADDR
// end ;
30613: LD_VAR 0 3
30617: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
30618: LD_INT 0
30620: PPUSH
30621: PPUSH
30622: PPUSH
30623: PPUSH
// result := false ;
30624: LD_ADDR_VAR 0 2
30628: PUSH
30629: LD_INT 0
30631: ST_TO_ADDR
// side := GetSide ( unit ) ;
30632: LD_ADDR_VAR 0 3
30636: PUSH
30637: LD_VAR 0 1
30641: PPUSH
30642: CALL_OW 255
30646: ST_TO_ADDR
// nat := GetNation ( unit ) ;
30647: LD_ADDR_VAR 0 4
30651: PUSH
30652: LD_VAR 0 1
30656: PPUSH
30657: CALL_OW 248
30661: ST_TO_ADDR
// case nat of 1 :
30662: LD_VAR 0 4
30666: PUSH
30667: LD_INT 1
30669: DOUBLE
30670: EQUAL
30671: IFTRUE 30675
30673: GO 30686
30675: POP
// tech := tech_lassight ; 2 :
30676: LD_ADDR_VAR 0 5
30680: PUSH
30681: LD_INT 12
30683: ST_TO_ADDR
30684: GO 30725
30686: LD_INT 2
30688: DOUBLE
30689: EQUAL
30690: IFTRUE 30694
30692: GO 30705
30694: POP
// tech := tech_mortar ; 3 :
30695: LD_ADDR_VAR 0 5
30699: PUSH
30700: LD_INT 41
30702: ST_TO_ADDR
30703: GO 30725
30705: LD_INT 3
30707: DOUBLE
30708: EQUAL
30709: IFTRUE 30713
30711: GO 30724
30713: POP
// tech := tech_bazooka ; end ;
30714: LD_ADDR_VAR 0 5
30718: PUSH
30719: LD_INT 44
30721: ST_TO_ADDR
30722: GO 30725
30724: POP
// if Researched ( side , tech ) then
30725: LD_VAR 0 3
30729: PPUSH
30730: LD_VAR 0 5
30734: PPUSH
30735: CALL_OW 325
30739: IFFALSE 30766
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
30741: LD_ADDR_VAR 0 2
30745: PUSH
30746: LD_INT 5
30748: PUSH
30749: LD_INT 8
30751: PUSH
30752: LD_INT 9
30754: PUSH
30755: EMPTY
30756: LIST
30757: LIST
30758: LIST
30759: PUSH
30760: LD_VAR 0 4
30764: ARRAY
30765: ST_TO_ADDR
// end ;
30766: LD_VAR 0 2
30770: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
30771: LD_INT 0
30773: PPUSH
30774: PPUSH
30775: PPUSH
// if not mines then
30776: LD_VAR 0 2
30780: NOT
30781: IFFALSE 30785
// exit ;
30783: GO 30929
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
30785: LD_ADDR_VAR 0 5
30789: PUSH
30790: LD_INT 81
30792: PUSH
30793: LD_VAR 0 1
30797: PUSH
30798: EMPTY
30799: LIST
30800: LIST
30801: PUSH
30802: LD_INT 3
30804: PUSH
30805: LD_INT 21
30807: PUSH
30808: LD_INT 3
30810: PUSH
30811: EMPTY
30812: LIST
30813: LIST
30814: PUSH
30815: EMPTY
30816: LIST
30817: LIST
30818: PUSH
30819: EMPTY
30820: LIST
30821: LIST
30822: PPUSH
30823: CALL_OW 69
30827: ST_TO_ADDR
// for i in mines do
30828: LD_ADDR_VAR 0 4
30832: PUSH
30833: LD_VAR 0 2
30837: PUSH
30838: FOR_IN
30839: IFFALSE 30927
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
30841: LD_VAR 0 4
30845: PUSH
30846: LD_INT 1
30848: ARRAY
30849: PPUSH
30850: LD_VAR 0 4
30854: PUSH
30855: LD_INT 2
30857: ARRAY
30858: PPUSH
30859: CALL_OW 458
30863: NOT
30864: IFFALSE 30868
// continue ;
30866: GO 30838
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
30868: LD_VAR 0 4
30872: PUSH
30873: LD_INT 1
30875: ARRAY
30876: PPUSH
30877: LD_VAR 0 4
30881: PUSH
30882: LD_INT 2
30884: ARRAY
30885: PPUSH
30886: CALL_OW 428
30890: PUSH
30891: LD_VAR 0 5
30895: IN
30896: IFFALSE 30925
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
30898: LD_VAR 0 4
30902: PUSH
30903: LD_INT 1
30905: ARRAY
30906: PPUSH
30907: LD_VAR 0 4
30911: PUSH
30912: LD_INT 2
30914: ARRAY
30915: PPUSH
30916: LD_VAR 0 1
30920: PPUSH
30921: CALL_OW 456
// end ;
30925: GO 30838
30927: POP
30928: POP
// end ;
30929: LD_VAR 0 3
30933: RET
// export function Count ( array ) ; begin
30934: LD_INT 0
30936: PPUSH
// result := array + 0 ;
30937: LD_ADDR_VAR 0 2
30941: PUSH
30942: LD_VAR 0 1
30946: PUSH
30947: LD_INT 0
30949: PLUS
30950: ST_TO_ADDR
// end ;
30951: LD_VAR 0 2
30955: RET
// export function IsEmpty ( building ) ; begin
30956: LD_INT 0
30958: PPUSH
// if not building then
30959: LD_VAR 0 1
30963: NOT
30964: IFFALSE 30968
// exit ;
30966: GO 31011
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
30968: LD_ADDR_VAR 0 2
30972: PUSH
30973: LD_VAR 0 1
30977: PUSH
30978: LD_INT 22
30980: PUSH
30981: LD_VAR 0 1
30985: PPUSH
30986: CALL_OW 255
30990: PUSH
30991: EMPTY
30992: LIST
30993: LIST
30994: PUSH
30995: LD_INT 58
30997: PUSH
30998: EMPTY
30999: LIST
31000: PUSH
31001: EMPTY
31002: LIST
31003: LIST
31004: PPUSH
31005: CALL_OW 69
31009: IN
31010: ST_TO_ADDR
// end ;
31011: LD_VAR 0 2
31015: RET
// export function IsNotFull ( building ) ; var places ; begin
31016: LD_INT 0
31018: PPUSH
31019: PPUSH
// if not building then
31020: LD_VAR 0 1
31024: NOT
31025: IFFALSE 31029
// exit ;
31027: GO 31057
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
31029: LD_ADDR_VAR 0 2
31033: PUSH
31034: LD_VAR 0 1
31038: PPUSH
31039: LD_INT 3
31041: PUSH
31042: LD_INT 62
31044: PUSH
31045: EMPTY
31046: LIST
31047: PUSH
31048: EMPTY
31049: LIST
31050: LIST
31051: PPUSH
31052: CALL_OW 72
31056: ST_TO_ADDR
// end ;
31057: LD_VAR 0 2
31061: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
31062: LD_INT 0
31064: PPUSH
31065: PPUSH
31066: PPUSH
31067: PPUSH
// tmp := [ ] ;
31068: LD_ADDR_VAR 0 3
31072: PUSH
31073: EMPTY
31074: ST_TO_ADDR
// list := [ ] ;
31075: LD_ADDR_VAR 0 5
31079: PUSH
31080: EMPTY
31081: ST_TO_ADDR
// for i = 16 to 25 do
31082: LD_ADDR_VAR 0 4
31086: PUSH
31087: DOUBLE
31088: LD_INT 16
31090: DEC
31091: ST_TO_ADDR
31092: LD_INT 25
31094: PUSH
31095: FOR_TO
31096: IFFALSE 31169
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
31098: LD_ADDR_VAR 0 3
31102: PUSH
31103: LD_VAR 0 3
31107: PUSH
31108: LD_INT 22
31110: PUSH
31111: LD_VAR 0 1
31115: PPUSH
31116: CALL_OW 255
31120: PUSH
31121: EMPTY
31122: LIST
31123: LIST
31124: PUSH
31125: LD_INT 91
31127: PUSH
31128: LD_VAR 0 1
31132: PUSH
31133: LD_INT 6
31135: PUSH
31136: EMPTY
31137: LIST
31138: LIST
31139: LIST
31140: PUSH
31141: LD_INT 30
31143: PUSH
31144: LD_VAR 0 4
31148: PUSH
31149: EMPTY
31150: LIST
31151: LIST
31152: PUSH
31153: EMPTY
31154: LIST
31155: LIST
31156: LIST
31157: PUSH
31158: EMPTY
31159: LIST
31160: PPUSH
31161: CALL_OW 69
31165: ADD
31166: ST_TO_ADDR
31167: GO 31095
31169: POP
31170: POP
// for i = 1 to tmp do
31171: LD_ADDR_VAR 0 4
31175: PUSH
31176: DOUBLE
31177: LD_INT 1
31179: DEC
31180: ST_TO_ADDR
31181: LD_VAR 0 3
31185: PUSH
31186: FOR_TO
31187: IFFALSE 31275
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
31189: LD_ADDR_VAR 0 5
31193: PUSH
31194: LD_VAR 0 5
31198: PUSH
31199: LD_VAR 0 3
31203: PUSH
31204: LD_VAR 0 4
31208: ARRAY
31209: PPUSH
31210: CALL_OW 266
31214: PUSH
31215: LD_VAR 0 3
31219: PUSH
31220: LD_VAR 0 4
31224: ARRAY
31225: PPUSH
31226: CALL_OW 250
31230: PUSH
31231: LD_VAR 0 3
31235: PUSH
31236: LD_VAR 0 4
31240: ARRAY
31241: PPUSH
31242: CALL_OW 251
31246: PUSH
31247: LD_VAR 0 3
31251: PUSH
31252: LD_VAR 0 4
31256: ARRAY
31257: PPUSH
31258: CALL_OW 254
31262: PUSH
31263: EMPTY
31264: LIST
31265: LIST
31266: LIST
31267: LIST
31268: PUSH
31269: EMPTY
31270: LIST
31271: ADD
31272: ST_TO_ADDR
31273: GO 31186
31275: POP
31276: POP
// result := list ;
31277: LD_ADDR_VAR 0 2
31281: PUSH
31282: LD_VAR 0 5
31286: ST_TO_ADDR
// end ;
31287: LD_VAR 0 2
31291: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
31292: LD_INT 0
31294: PPUSH
31295: PPUSH
31296: PPUSH
31297: PPUSH
31298: PPUSH
31299: PPUSH
31300: PPUSH
// if not factory then
31301: LD_VAR 0 1
31305: NOT
31306: IFFALSE 31310
// exit ;
31308: GO 31903
// if control = control_apeman then
31310: LD_VAR 0 4
31314: PUSH
31315: LD_INT 5
31317: EQUAL
31318: IFFALSE 31427
// begin tmp := UnitsInside ( factory ) ;
31320: LD_ADDR_VAR 0 8
31324: PUSH
31325: LD_VAR 0 1
31329: PPUSH
31330: CALL_OW 313
31334: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
31335: LD_VAR 0 8
31339: PPUSH
31340: LD_INT 25
31342: PUSH
31343: LD_INT 12
31345: PUSH
31346: EMPTY
31347: LIST
31348: LIST
31349: PPUSH
31350: CALL_OW 72
31354: NOT
31355: IFFALSE 31365
// control := control_manual ;
31357: LD_ADDR_VAR 0 4
31361: PUSH
31362: LD_INT 1
31364: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
31365: LD_ADDR_VAR 0 8
31369: PUSH
31370: LD_VAR 0 1
31374: PPUSH
31375: CALL 31062 0 1
31379: ST_TO_ADDR
// if tmp then
31380: LD_VAR 0 8
31384: IFFALSE 31427
// begin for i in tmp do
31386: LD_ADDR_VAR 0 7
31390: PUSH
31391: LD_VAR 0 8
31395: PUSH
31396: FOR_IN
31397: IFFALSE 31425
// if i [ 1 ] = b_ext_radio then
31399: LD_VAR 0 7
31403: PUSH
31404: LD_INT 1
31406: ARRAY
31407: PUSH
31408: LD_INT 22
31410: EQUAL
31411: IFFALSE 31423
// begin control := control_remote ;
31413: LD_ADDR_VAR 0 4
31417: PUSH
31418: LD_INT 2
31420: ST_TO_ADDR
// break ;
31421: GO 31425
// end ;
31423: GO 31396
31425: POP
31426: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
31427: LD_VAR 0 1
31431: PPUSH
31432: LD_VAR 0 2
31436: PPUSH
31437: LD_VAR 0 3
31441: PPUSH
31442: LD_VAR 0 4
31446: PPUSH
31447: LD_VAR 0 5
31451: PPUSH
31452: CALL_OW 448
31456: IFFALSE 31491
// begin result := [ chassis , engine , control , weapon ] ;
31458: LD_ADDR_VAR 0 6
31462: PUSH
31463: LD_VAR 0 2
31467: PUSH
31468: LD_VAR 0 3
31472: PUSH
31473: LD_VAR 0 4
31477: PUSH
31478: LD_VAR 0 5
31482: PUSH
31483: EMPTY
31484: LIST
31485: LIST
31486: LIST
31487: LIST
31488: ST_TO_ADDR
// exit ;
31489: GO 31903
// end ; _chassis := AvailableChassisList ( factory ) ;
31491: LD_ADDR_VAR 0 9
31495: PUSH
31496: LD_VAR 0 1
31500: PPUSH
31501: CALL_OW 475
31505: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
31506: LD_ADDR_VAR 0 11
31510: PUSH
31511: LD_VAR 0 1
31515: PPUSH
31516: CALL_OW 476
31520: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
31521: LD_ADDR_VAR 0 12
31525: PUSH
31526: LD_VAR 0 1
31530: PPUSH
31531: CALL_OW 477
31535: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
31536: LD_ADDR_VAR 0 10
31540: PUSH
31541: LD_VAR 0 1
31545: PPUSH
31546: CALL_OW 478
31550: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
31551: LD_VAR 0 9
31555: NOT
31556: PUSH
31557: LD_VAR 0 11
31561: NOT
31562: OR
31563: PUSH
31564: LD_VAR 0 12
31568: NOT
31569: OR
31570: PUSH
31571: LD_VAR 0 10
31575: NOT
31576: OR
31577: IFFALSE 31612
// begin result := [ chassis , engine , control , weapon ] ;
31579: LD_ADDR_VAR 0 6
31583: PUSH
31584: LD_VAR 0 2
31588: PUSH
31589: LD_VAR 0 3
31593: PUSH
31594: LD_VAR 0 4
31598: PUSH
31599: LD_VAR 0 5
31603: PUSH
31604: EMPTY
31605: LIST
31606: LIST
31607: LIST
31608: LIST
31609: ST_TO_ADDR
// exit ;
31610: GO 31903
// end ; if not chassis in _chassis then
31612: LD_VAR 0 2
31616: PUSH
31617: LD_VAR 0 9
31621: IN
31622: NOT
31623: IFFALSE 31649
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
31625: LD_ADDR_VAR 0 2
31629: PUSH
31630: LD_VAR 0 9
31634: PUSH
31635: LD_INT 1
31637: PPUSH
31638: LD_VAR 0 9
31642: PPUSH
31643: CALL_OW 12
31647: ARRAY
31648: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
31649: LD_VAR 0 2
31653: PPUSH
31654: LD_VAR 0 3
31658: PPUSH
31659: CALL 31908 0 2
31663: NOT
31664: IFFALSE 31723
// repeat engine := _engine [ 1 ] ;
31666: LD_ADDR_VAR 0 3
31670: PUSH
31671: LD_VAR 0 11
31675: PUSH
31676: LD_INT 1
31678: ARRAY
31679: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
31680: LD_ADDR_VAR 0 11
31684: PUSH
31685: LD_VAR 0 11
31689: PPUSH
31690: LD_INT 1
31692: PPUSH
31693: CALL_OW 3
31697: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
31698: LD_VAR 0 2
31702: PPUSH
31703: LD_VAR 0 3
31707: PPUSH
31708: CALL 31908 0 2
31712: PUSH
31713: LD_VAR 0 11
31717: PUSH
31718: EMPTY
31719: EQUAL
31720: OR
31721: IFFALSE 31666
// if not control in _control then
31723: LD_VAR 0 4
31727: PUSH
31728: LD_VAR 0 12
31732: IN
31733: NOT
31734: IFFALSE 31760
// control := _control [ rand ( 1 , _control ) ] ;
31736: LD_ADDR_VAR 0 4
31740: PUSH
31741: LD_VAR 0 12
31745: PUSH
31746: LD_INT 1
31748: PPUSH
31749: LD_VAR 0 12
31753: PPUSH
31754: CALL_OW 12
31758: ARRAY
31759: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
31760: LD_VAR 0 2
31764: PPUSH
31765: LD_VAR 0 5
31769: PPUSH
31770: CALL 32128 0 2
31774: NOT
31775: IFFALSE 31834
// repeat weapon := _weapon [ 1 ] ;
31777: LD_ADDR_VAR 0 5
31781: PUSH
31782: LD_VAR 0 10
31786: PUSH
31787: LD_INT 1
31789: ARRAY
31790: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
31791: LD_ADDR_VAR 0 10
31795: PUSH
31796: LD_VAR 0 10
31800: PPUSH
31801: LD_INT 1
31803: PPUSH
31804: CALL_OW 3
31808: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
31809: LD_VAR 0 2
31813: PPUSH
31814: LD_VAR 0 5
31818: PPUSH
31819: CALL 32128 0 2
31823: PUSH
31824: LD_VAR 0 10
31828: PUSH
31829: EMPTY
31830: EQUAL
31831: OR
31832: IFFALSE 31777
// result := [ ] ;
31834: LD_ADDR_VAR 0 6
31838: PUSH
31839: EMPTY
31840: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
31841: LD_VAR 0 1
31845: PPUSH
31846: LD_VAR 0 2
31850: PPUSH
31851: LD_VAR 0 3
31855: PPUSH
31856: LD_VAR 0 4
31860: PPUSH
31861: LD_VAR 0 5
31865: PPUSH
31866: CALL_OW 448
31870: IFFALSE 31903
// result := [ chassis , engine , control , weapon ] ;
31872: LD_ADDR_VAR 0 6
31876: PUSH
31877: LD_VAR 0 2
31881: PUSH
31882: LD_VAR 0 3
31886: PUSH
31887: LD_VAR 0 4
31891: PUSH
31892: LD_VAR 0 5
31896: PUSH
31897: EMPTY
31898: LIST
31899: LIST
31900: LIST
31901: LIST
31902: ST_TO_ADDR
// end ;
31903: LD_VAR 0 6
31907: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
31908: LD_INT 0
31910: PPUSH
// if not chassis or not engine then
31911: LD_VAR 0 1
31915: NOT
31916: PUSH
31917: LD_VAR 0 2
31921: NOT
31922: OR
31923: IFFALSE 31927
// exit ;
31925: GO 32123
// case engine of engine_solar :
31927: LD_VAR 0 2
31931: PUSH
31932: LD_INT 2
31934: DOUBLE
31935: EQUAL
31936: IFTRUE 31940
31938: GO 31978
31940: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
31941: LD_ADDR_VAR 0 3
31945: PUSH
31946: LD_INT 11
31948: PUSH
31949: LD_INT 12
31951: PUSH
31952: LD_INT 13
31954: PUSH
31955: LD_INT 14
31957: PUSH
31958: LD_INT 1
31960: PUSH
31961: LD_INT 2
31963: PUSH
31964: LD_INT 3
31966: PUSH
31967: EMPTY
31968: LIST
31969: LIST
31970: LIST
31971: LIST
31972: LIST
31973: LIST
31974: LIST
31975: ST_TO_ADDR
31976: GO 32107
31978: LD_INT 1
31980: DOUBLE
31981: EQUAL
31982: IFTRUE 31986
31984: GO 32048
31986: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
31987: LD_ADDR_VAR 0 3
31991: PUSH
31992: LD_INT 11
31994: PUSH
31995: LD_INT 12
31997: PUSH
31998: LD_INT 13
32000: PUSH
32001: LD_INT 14
32003: PUSH
32004: LD_INT 1
32006: PUSH
32007: LD_INT 2
32009: PUSH
32010: LD_INT 3
32012: PUSH
32013: LD_INT 4
32015: PUSH
32016: LD_INT 5
32018: PUSH
32019: LD_INT 21
32021: PUSH
32022: LD_INT 23
32024: PUSH
32025: LD_INT 22
32027: PUSH
32028: LD_INT 24
32030: PUSH
32031: EMPTY
32032: LIST
32033: LIST
32034: LIST
32035: LIST
32036: LIST
32037: LIST
32038: LIST
32039: LIST
32040: LIST
32041: LIST
32042: LIST
32043: LIST
32044: LIST
32045: ST_TO_ADDR
32046: GO 32107
32048: LD_INT 3
32050: DOUBLE
32051: EQUAL
32052: IFTRUE 32056
32054: GO 32106
32056: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
32057: LD_ADDR_VAR 0 3
32061: PUSH
32062: LD_INT 13
32064: PUSH
32065: LD_INT 14
32067: PUSH
32068: LD_INT 2
32070: PUSH
32071: LD_INT 3
32073: PUSH
32074: LD_INT 4
32076: PUSH
32077: LD_INT 5
32079: PUSH
32080: LD_INT 21
32082: PUSH
32083: LD_INT 22
32085: PUSH
32086: LD_INT 23
32088: PUSH
32089: LD_INT 24
32091: PUSH
32092: EMPTY
32093: LIST
32094: LIST
32095: LIST
32096: LIST
32097: LIST
32098: LIST
32099: LIST
32100: LIST
32101: LIST
32102: LIST
32103: ST_TO_ADDR
32104: GO 32107
32106: POP
// result := ( chassis in result ) ;
32107: LD_ADDR_VAR 0 3
32111: PUSH
32112: LD_VAR 0 1
32116: PUSH
32117: LD_VAR 0 3
32121: IN
32122: ST_TO_ADDR
// end ;
32123: LD_VAR 0 3
32127: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
32128: LD_INT 0
32130: PPUSH
// if not chassis or not weapon then
32131: LD_VAR 0 1
32135: NOT
32136: PUSH
32137: LD_VAR 0 2
32141: NOT
32142: OR
32143: IFFALSE 32147
// exit ;
32145: GO 33207
// case weapon of us_machine_gun :
32147: LD_VAR 0 2
32151: PUSH
32152: LD_INT 2
32154: DOUBLE
32155: EQUAL
32156: IFTRUE 32160
32158: GO 32190
32160: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
32161: LD_ADDR_VAR 0 3
32165: PUSH
32166: LD_INT 1
32168: PUSH
32169: LD_INT 2
32171: PUSH
32172: LD_INT 3
32174: PUSH
32175: LD_INT 4
32177: PUSH
32178: LD_INT 5
32180: PUSH
32181: EMPTY
32182: LIST
32183: LIST
32184: LIST
32185: LIST
32186: LIST
32187: ST_TO_ADDR
32188: GO 33191
32190: LD_INT 3
32192: DOUBLE
32193: EQUAL
32194: IFTRUE 32198
32196: GO 32228
32198: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
32199: LD_ADDR_VAR 0 3
32203: PUSH
32204: LD_INT 1
32206: PUSH
32207: LD_INT 2
32209: PUSH
32210: LD_INT 3
32212: PUSH
32213: LD_INT 4
32215: PUSH
32216: LD_INT 5
32218: PUSH
32219: EMPTY
32220: LIST
32221: LIST
32222: LIST
32223: LIST
32224: LIST
32225: ST_TO_ADDR
32226: GO 33191
32228: LD_INT 11
32230: DOUBLE
32231: EQUAL
32232: IFTRUE 32236
32234: GO 32266
32236: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
32237: LD_ADDR_VAR 0 3
32241: PUSH
32242: LD_INT 1
32244: PUSH
32245: LD_INT 2
32247: PUSH
32248: LD_INT 3
32250: PUSH
32251: LD_INT 4
32253: PUSH
32254: LD_INT 5
32256: PUSH
32257: EMPTY
32258: LIST
32259: LIST
32260: LIST
32261: LIST
32262: LIST
32263: ST_TO_ADDR
32264: GO 33191
32266: LD_INT 4
32268: DOUBLE
32269: EQUAL
32270: IFTRUE 32274
32272: GO 32300
32274: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
32275: LD_ADDR_VAR 0 3
32279: PUSH
32280: LD_INT 2
32282: PUSH
32283: LD_INT 3
32285: PUSH
32286: LD_INT 4
32288: PUSH
32289: LD_INT 5
32291: PUSH
32292: EMPTY
32293: LIST
32294: LIST
32295: LIST
32296: LIST
32297: ST_TO_ADDR
32298: GO 33191
32300: LD_INT 5
32302: DOUBLE
32303: EQUAL
32304: IFTRUE 32308
32306: GO 32334
32308: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
32309: LD_ADDR_VAR 0 3
32313: PUSH
32314: LD_INT 2
32316: PUSH
32317: LD_INT 3
32319: PUSH
32320: LD_INT 4
32322: PUSH
32323: LD_INT 5
32325: PUSH
32326: EMPTY
32327: LIST
32328: LIST
32329: LIST
32330: LIST
32331: ST_TO_ADDR
32332: GO 33191
32334: LD_INT 9
32336: DOUBLE
32337: EQUAL
32338: IFTRUE 32342
32340: GO 32368
32342: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
32343: LD_ADDR_VAR 0 3
32347: PUSH
32348: LD_INT 2
32350: PUSH
32351: LD_INT 3
32353: PUSH
32354: LD_INT 4
32356: PUSH
32357: LD_INT 5
32359: PUSH
32360: EMPTY
32361: LIST
32362: LIST
32363: LIST
32364: LIST
32365: ST_TO_ADDR
32366: GO 33191
32368: LD_INT 7
32370: DOUBLE
32371: EQUAL
32372: IFTRUE 32376
32374: GO 32402
32376: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
32377: LD_ADDR_VAR 0 3
32381: PUSH
32382: LD_INT 2
32384: PUSH
32385: LD_INT 3
32387: PUSH
32388: LD_INT 4
32390: PUSH
32391: LD_INT 5
32393: PUSH
32394: EMPTY
32395: LIST
32396: LIST
32397: LIST
32398: LIST
32399: ST_TO_ADDR
32400: GO 33191
32402: LD_INT 12
32404: DOUBLE
32405: EQUAL
32406: IFTRUE 32410
32408: GO 32436
32410: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
32411: LD_ADDR_VAR 0 3
32415: PUSH
32416: LD_INT 2
32418: PUSH
32419: LD_INT 3
32421: PUSH
32422: LD_INT 4
32424: PUSH
32425: LD_INT 5
32427: PUSH
32428: EMPTY
32429: LIST
32430: LIST
32431: LIST
32432: LIST
32433: ST_TO_ADDR
32434: GO 33191
32436: LD_INT 13
32438: DOUBLE
32439: EQUAL
32440: IFTRUE 32444
32442: GO 32470
32444: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
32445: LD_ADDR_VAR 0 3
32449: PUSH
32450: LD_INT 2
32452: PUSH
32453: LD_INT 3
32455: PUSH
32456: LD_INT 4
32458: PUSH
32459: LD_INT 5
32461: PUSH
32462: EMPTY
32463: LIST
32464: LIST
32465: LIST
32466: LIST
32467: ST_TO_ADDR
32468: GO 33191
32470: LD_INT 14
32472: DOUBLE
32473: EQUAL
32474: IFTRUE 32478
32476: GO 32496
32478: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
32479: LD_ADDR_VAR 0 3
32483: PUSH
32484: LD_INT 4
32486: PUSH
32487: LD_INT 5
32489: PUSH
32490: EMPTY
32491: LIST
32492: LIST
32493: ST_TO_ADDR
32494: GO 33191
32496: LD_INT 6
32498: DOUBLE
32499: EQUAL
32500: IFTRUE 32504
32502: GO 32522
32504: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
32505: LD_ADDR_VAR 0 3
32509: PUSH
32510: LD_INT 4
32512: PUSH
32513: LD_INT 5
32515: PUSH
32516: EMPTY
32517: LIST
32518: LIST
32519: ST_TO_ADDR
32520: GO 33191
32522: LD_INT 10
32524: DOUBLE
32525: EQUAL
32526: IFTRUE 32530
32528: GO 32548
32530: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
32531: LD_ADDR_VAR 0 3
32535: PUSH
32536: LD_INT 4
32538: PUSH
32539: LD_INT 5
32541: PUSH
32542: EMPTY
32543: LIST
32544: LIST
32545: ST_TO_ADDR
32546: GO 33191
32548: LD_INT 22
32550: DOUBLE
32551: EQUAL
32552: IFTRUE 32556
32554: GO 32582
32556: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
32557: LD_ADDR_VAR 0 3
32561: PUSH
32562: LD_INT 11
32564: PUSH
32565: LD_INT 12
32567: PUSH
32568: LD_INT 13
32570: PUSH
32571: LD_INT 14
32573: PUSH
32574: EMPTY
32575: LIST
32576: LIST
32577: LIST
32578: LIST
32579: ST_TO_ADDR
32580: GO 33191
32582: LD_INT 23
32584: DOUBLE
32585: EQUAL
32586: IFTRUE 32590
32588: GO 32616
32590: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
32591: LD_ADDR_VAR 0 3
32595: PUSH
32596: LD_INT 11
32598: PUSH
32599: LD_INT 12
32601: PUSH
32602: LD_INT 13
32604: PUSH
32605: LD_INT 14
32607: PUSH
32608: EMPTY
32609: LIST
32610: LIST
32611: LIST
32612: LIST
32613: ST_TO_ADDR
32614: GO 33191
32616: LD_INT 24
32618: DOUBLE
32619: EQUAL
32620: IFTRUE 32624
32622: GO 32650
32624: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
32625: LD_ADDR_VAR 0 3
32629: PUSH
32630: LD_INT 11
32632: PUSH
32633: LD_INT 12
32635: PUSH
32636: LD_INT 13
32638: PUSH
32639: LD_INT 14
32641: PUSH
32642: EMPTY
32643: LIST
32644: LIST
32645: LIST
32646: LIST
32647: ST_TO_ADDR
32648: GO 33191
32650: LD_INT 30
32652: DOUBLE
32653: EQUAL
32654: IFTRUE 32658
32656: GO 32684
32658: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
32659: LD_ADDR_VAR 0 3
32663: PUSH
32664: LD_INT 11
32666: PUSH
32667: LD_INT 12
32669: PUSH
32670: LD_INT 13
32672: PUSH
32673: LD_INT 14
32675: PUSH
32676: EMPTY
32677: LIST
32678: LIST
32679: LIST
32680: LIST
32681: ST_TO_ADDR
32682: GO 33191
32684: LD_INT 25
32686: DOUBLE
32687: EQUAL
32688: IFTRUE 32692
32690: GO 32710
32692: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
32693: LD_ADDR_VAR 0 3
32697: PUSH
32698: LD_INT 13
32700: PUSH
32701: LD_INT 14
32703: PUSH
32704: EMPTY
32705: LIST
32706: LIST
32707: ST_TO_ADDR
32708: GO 33191
32710: LD_INT 27
32712: DOUBLE
32713: EQUAL
32714: IFTRUE 32718
32716: GO 32736
32718: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
32719: LD_ADDR_VAR 0 3
32723: PUSH
32724: LD_INT 13
32726: PUSH
32727: LD_INT 14
32729: PUSH
32730: EMPTY
32731: LIST
32732: LIST
32733: ST_TO_ADDR
32734: GO 33191
32736: LD_INT 92
32738: DOUBLE
32739: EQUAL
32740: IFTRUE 32744
32742: GO 32770
32744: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
32745: LD_ADDR_VAR 0 3
32749: PUSH
32750: LD_INT 11
32752: PUSH
32753: LD_INT 12
32755: PUSH
32756: LD_INT 13
32758: PUSH
32759: LD_INT 14
32761: PUSH
32762: EMPTY
32763: LIST
32764: LIST
32765: LIST
32766: LIST
32767: ST_TO_ADDR
32768: GO 33191
32770: LD_INT 28
32772: DOUBLE
32773: EQUAL
32774: IFTRUE 32778
32776: GO 32796
32778: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
32779: LD_ADDR_VAR 0 3
32783: PUSH
32784: LD_INT 13
32786: PUSH
32787: LD_INT 14
32789: PUSH
32790: EMPTY
32791: LIST
32792: LIST
32793: ST_TO_ADDR
32794: GO 33191
32796: LD_INT 29
32798: DOUBLE
32799: EQUAL
32800: IFTRUE 32804
32802: GO 32822
32804: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
32805: LD_ADDR_VAR 0 3
32809: PUSH
32810: LD_INT 13
32812: PUSH
32813: LD_INT 14
32815: PUSH
32816: EMPTY
32817: LIST
32818: LIST
32819: ST_TO_ADDR
32820: GO 33191
32822: LD_INT 31
32824: DOUBLE
32825: EQUAL
32826: IFTRUE 32830
32828: GO 32848
32830: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
32831: LD_ADDR_VAR 0 3
32835: PUSH
32836: LD_INT 13
32838: PUSH
32839: LD_INT 14
32841: PUSH
32842: EMPTY
32843: LIST
32844: LIST
32845: ST_TO_ADDR
32846: GO 33191
32848: LD_INT 26
32850: DOUBLE
32851: EQUAL
32852: IFTRUE 32856
32854: GO 32874
32856: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
32857: LD_ADDR_VAR 0 3
32861: PUSH
32862: LD_INT 13
32864: PUSH
32865: LD_INT 14
32867: PUSH
32868: EMPTY
32869: LIST
32870: LIST
32871: ST_TO_ADDR
32872: GO 33191
32874: LD_INT 42
32876: DOUBLE
32877: EQUAL
32878: IFTRUE 32882
32880: GO 32908
32882: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
32883: LD_ADDR_VAR 0 3
32887: PUSH
32888: LD_INT 21
32890: PUSH
32891: LD_INT 22
32893: PUSH
32894: LD_INT 23
32896: PUSH
32897: LD_INT 24
32899: PUSH
32900: EMPTY
32901: LIST
32902: LIST
32903: LIST
32904: LIST
32905: ST_TO_ADDR
32906: GO 33191
32908: LD_INT 43
32910: DOUBLE
32911: EQUAL
32912: IFTRUE 32916
32914: GO 32942
32916: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
32917: LD_ADDR_VAR 0 3
32921: PUSH
32922: LD_INT 21
32924: PUSH
32925: LD_INT 22
32927: PUSH
32928: LD_INT 23
32930: PUSH
32931: LD_INT 24
32933: PUSH
32934: EMPTY
32935: LIST
32936: LIST
32937: LIST
32938: LIST
32939: ST_TO_ADDR
32940: GO 33191
32942: LD_INT 44
32944: DOUBLE
32945: EQUAL
32946: IFTRUE 32950
32948: GO 32976
32950: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
32951: LD_ADDR_VAR 0 3
32955: PUSH
32956: LD_INT 21
32958: PUSH
32959: LD_INT 22
32961: PUSH
32962: LD_INT 23
32964: PUSH
32965: LD_INT 24
32967: PUSH
32968: EMPTY
32969: LIST
32970: LIST
32971: LIST
32972: LIST
32973: ST_TO_ADDR
32974: GO 33191
32976: LD_INT 45
32978: DOUBLE
32979: EQUAL
32980: IFTRUE 32984
32982: GO 33010
32984: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
32985: LD_ADDR_VAR 0 3
32989: PUSH
32990: LD_INT 21
32992: PUSH
32993: LD_INT 22
32995: PUSH
32996: LD_INT 23
32998: PUSH
32999: LD_INT 24
33001: PUSH
33002: EMPTY
33003: LIST
33004: LIST
33005: LIST
33006: LIST
33007: ST_TO_ADDR
33008: GO 33191
33010: LD_INT 49
33012: DOUBLE
33013: EQUAL
33014: IFTRUE 33018
33016: GO 33044
33018: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
33019: LD_ADDR_VAR 0 3
33023: PUSH
33024: LD_INT 21
33026: PUSH
33027: LD_INT 22
33029: PUSH
33030: LD_INT 23
33032: PUSH
33033: LD_INT 24
33035: PUSH
33036: EMPTY
33037: LIST
33038: LIST
33039: LIST
33040: LIST
33041: ST_TO_ADDR
33042: GO 33191
33044: LD_INT 51
33046: DOUBLE
33047: EQUAL
33048: IFTRUE 33052
33050: GO 33078
33052: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
33053: LD_ADDR_VAR 0 3
33057: PUSH
33058: LD_INT 21
33060: PUSH
33061: LD_INT 22
33063: PUSH
33064: LD_INT 23
33066: PUSH
33067: LD_INT 24
33069: PUSH
33070: EMPTY
33071: LIST
33072: LIST
33073: LIST
33074: LIST
33075: ST_TO_ADDR
33076: GO 33191
33078: LD_INT 52
33080: DOUBLE
33081: EQUAL
33082: IFTRUE 33086
33084: GO 33112
33086: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
33087: LD_ADDR_VAR 0 3
33091: PUSH
33092: LD_INT 21
33094: PUSH
33095: LD_INT 22
33097: PUSH
33098: LD_INT 23
33100: PUSH
33101: LD_INT 24
33103: PUSH
33104: EMPTY
33105: LIST
33106: LIST
33107: LIST
33108: LIST
33109: ST_TO_ADDR
33110: GO 33191
33112: LD_INT 53
33114: DOUBLE
33115: EQUAL
33116: IFTRUE 33120
33118: GO 33138
33120: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
33121: LD_ADDR_VAR 0 3
33125: PUSH
33126: LD_INT 23
33128: PUSH
33129: LD_INT 24
33131: PUSH
33132: EMPTY
33133: LIST
33134: LIST
33135: ST_TO_ADDR
33136: GO 33191
33138: LD_INT 46
33140: DOUBLE
33141: EQUAL
33142: IFTRUE 33146
33144: GO 33164
33146: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
33147: LD_ADDR_VAR 0 3
33151: PUSH
33152: LD_INT 23
33154: PUSH
33155: LD_INT 24
33157: PUSH
33158: EMPTY
33159: LIST
33160: LIST
33161: ST_TO_ADDR
33162: GO 33191
33164: LD_INT 47
33166: DOUBLE
33167: EQUAL
33168: IFTRUE 33172
33170: GO 33190
33172: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
33173: LD_ADDR_VAR 0 3
33177: PUSH
33178: LD_INT 23
33180: PUSH
33181: LD_INT 24
33183: PUSH
33184: EMPTY
33185: LIST
33186: LIST
33187: ST_TO_ADDR
33188: GO 33191
33190: POP
// result := ( chassis in result ) ;
33191: LD_ADDR_VAR 0 3
33195: PUSH
33196: LD_VAR 0 1
33200: PUSH
33201: LD_VAR 0 3
33205: IN
33206: ST_TO_ADDR
// end ;
33207: LD_VAR 0 3
33211: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
33212: LD_INT 0
33214: PPUSH
33215: PPUSH
33216: PPUSH
33217: PPUSH
33218: PPUSH
33219: PPUSH
33220: PPUSH
// result := array ;
33221: LD_ADDR_VAR 0 5
33225: PUSH
33226: LD_VAR 0 1
33230: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
33231: LD_VAR 0 1
33235: NOT
33236: PUSH
33237: LD_VAR 0 2
33241: NOT
33242: OR
33243: PUSH
33244: LD_VAR 0 3
33248: NOT
33249: OR
33250: PUSH
33251: LD_VAR 0 2
33255: PUSH
33256: LD_VAR 0 1
33260: GREATER
33261: OR
33262: PUSH
33263: LD_VAR 0 3
33267: PUSH
33268: LD_VAR 0 1
33272: GREATER
33273: OR
33274: IFFALSE 33278
// exit ;
33276: GO 33574
// if direction then
33278: LD_VAR 0 4
33282: IFFALSE 33346
// begin d := 1 ;
33284: LD_ADDR_VAR 0 9
33288: PUSH
33289: LD_INT 1
33291: ST_TO_ADDR
// if i_from > i_to then
33292: LD_VAR 0 2
33296: PUSH
33297: LD_VAR 0 3
33301: GREATER
33302: IFFALSE 33328
// length := ( array - i_from ) + i_to else
33304: LD_ADDR_VAR 0 11
33308: PUSH
33309: LD_VAR 0 1
33313: PUSH
33314: LD_VAR 0 2
33318: MINUS
33319: PUSH
33320: LD_VAR 0 3
33324: PLUS
33325: ST_TO_ADDR
33326: GO 33344
// length := i_to - i_from ;
33328: LD_ADDR_VAR 0 11
33332: PUSH
33333: LD_VAR 0 3
33337: PUSH
33338: LD_VAR 0 2
33342: MINUS
33343: ST_TO_ADDR
// end else
33344: GO 33407
// begin d := - 1 ;
33346: LD_ADDR_VAR 0 9
33350: PUSH
33351: LD_INT 1
33353: NEG
33354: ST_TO_ADDR
// if i_from > i_to then
33355: LD_VAR 0 2
33359: PUSH
33360: LD_VAR 0 3
33364: GREATER
33365: IFFALSE 33385
// length := i_from - i_to else
33367: LD_ADDR_VAR 0 11
33371: PUSH
33372: LD_VAR 0 2
33376: PUSH
33377: LD_VAR 0 3
33381: MINUS
33382: ST_TO_ADDR
33383: GO 33407
// length := ( array - i_to ) + i_from ;
33385: LD_ADDR_VAR 0 11
33389: PUSH
33390: LD_VAR 0 1
33394: PUSH
33395: LD_VAR 0 3
33399: MINUS
33400: PUSH
33401: LD_VAR 0 2
33405: PLUS
33406: ST_TO_ADDR
// end ; if not length then
33407: LD_VAR 0 11
33411: NOT
33412: IFFALSE 33416
// exit ;
33414: GO 33574
// tmp := array ;
33416: LD_ADDR_VAR 0 10
33420: PUSH
33421: LD_VAR 0 1
33425: ST_TO_ADDR
// for i = 1 to length do
33426: LD_ADDR_VAR 0 6
33430: PUSH
33431: DOUBLE
33432: LD_INT 1
33434: DEC
33435: ST_TO_ADDR
33436: LD_VAR 0 11
33440: PUSH
33441: FOR_TO
33442: IFFALSE 33562
// begin for j = 1 to array do
33444: LD_ADDR_VAR 0 7
33448: PUSH
33449: DOUBLE
33450: LD_INT 1
33452: DEC
33453: ST_TO_ADDR
33454: LD_VAR 0 1
33458: PUSH
33459: FOR_TO
33460: IFFALSE 33548
// begin k := j + d ;
33462: LD_ADDR_VAR 0 8
33466: PUSH
33467: LD_VAR 0 7
33471: PUSH
33472: LD_VAR 0 9
33476: PLUS
33477: ST_TO_ADDR
// if k > array then
33478: LD_VAR 0 8
33482: PUSH
33483: LD_VAR 0 1
33487: GREATER
33488: IFFALSE 33498
// k := 1 ;
33490: LD_ADDR_VAR 0 8
33494: PUSH
33495: LD_INT 1
33497: ST_TO_ADDR
// if not k then
33498: LD_VAR 0 8
33502: NOT
33503: IFFALSE 33515
// k := array ;
33505: LD_ADDR_VAR 0 8
33509: PUSH
33510: LD_VAR 0 1
33514: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
33515: LD_ADDR_VAR 0 10
33519: PUSH
33520: LD_VAR 0 10
33524: PPUSH
33525: LD_VAR 0 8
33529: PPUSH
33530: LD_VAR 0 1
33534: PUSH
33535: LD_VAR 0 7
33539: ARRAY
33540: PPUSH
33541: CALL_OW 1
33545: ST_TO_ADDR
// end ;
33546: GO 33459
33548: POP
33549: POP
// array := tmp ;
33550: LD_ADDR_VAR 0 1
33554: PUSH
33555: LD_VAR 0 10
33559: ST_TO_ADDR
// end ;
33560: GO 33441
33562: POP
33563: POP
// result := array ;
33564: LD_ADDR_VAR 0 5
33568: PUSH
33569: LD_VAR 0 1
33573: ST_TO_ADDR
// end ;
33574: LD_VAR 0 5
33578: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
33579: LD_INT 0
33581: PPUSH
33582: PPUSH
// result := 0 ;
33583: LD_ADDR_VAR 0 3
33587: PUSH
33588: LD_INT 0
33590: ST_TO_ADDR
// if not array or not value in array then
33591: LD_VAR 0 1
33595: NOT
33596: PUSH
33597: LD_VAR 0 2
33601: PUSH
33602: LD_VAR 0 1
33606: IN
33607: NOT
33608: OR
33609: IFFALSE 33613
// exit ;
33611: GO 33667
// for i = 1 to array do
33613: LD_ADDR_VAR 0 4
33617: PUSH
33618: DOUBLE
33619: LD_INT 1
33621: DEC
33622: ST_TO_ADDR
33623: LD_VAR 0 1
33627: PUSH
33628: FOR_TO
33629: IFFALSE 33665
// if value = array [ i ] then
33631: LD_VAR 0 2
33635: PUSH
33636: LD_VAR 0 1
33640: PUSH
33641: LD_VAR 0 4
33645: ARRAY
33646: EQUAL
33647: IFFALSE 33663
// begin result := i ;
33649: LD_ADDR_VAR 0 3
33653: PUSH
33654: LD_VAR 0 4
33658: ST_TO_ADDR
// exit ;
33659: POP
33660: POP
33661: GO 33667
// end ;
33663: GO 33628
33665: POP
33666: POP
// end ;
33667: LD_VAR 0 3
33671: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
33672: LD_INT 0
33674: PPUSH
// vc_chassis := chassis ;
33675: LD_ADDR_OWVAR 37
33679: PUSH
33680: LD_VAR 0 1
33684: ST_TO_ADDR
// vc_engine := engine ;
33685: LD_ADDR_OWVAR 39
33689: PUSH
33690: LD_VAR 0 2
33694: ST_TO_ADDR
// vc_control := control ;
33695: LD_ADDR_OWVAR 38
33699: PUSH
33700: LD_VAR 0 3
33704: ST_TO_ADDR
// vc_weapon := weapon ;
33705: LD_ADDR_OWVAR 40
33709: PUSH
33710: LD_VAR 0 4
33714: ST_TO_ADDR
// vc_fuel_battery := fuel ;
33715: LD_ADDR_OWVAR 41
33719: PUSH
33720: LD_VAR 0 5
33724: ST_TO_ADDR
// end ;
33725: LD_VAR 0 6
33729: RET
// export function WantPlant ( unit ) ; var task ; begin
33730: LD_INT 0
33732: PPUSH
33733: PPUSH
// result := false ;
33734: LD_ADDR_VAR 0 2
33738: PUSH
33739: LD_INT 0
33741: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
33742: LD_ADDR_VAR 0 3
33746: PUSH
33747: LD_VAR 0 1
33751: PPUSH
33752: CALL_OW 437
33756: ST_TO_ADDR
// if task then
33757: LD_VAR 0 3
33761: IFFALSE 33789
// if task [ 1 ] [ 1 ] = p then
33763: LD_VAR 0 3
33767: PUSH
33768: LD_INT 1
33770: ARRAY
33771: PUSH
33772: LD_INT 1
33774: ARRAY
33775: PUSH
33776: LD_STRING p
33778: EQUAL
33779: IFFALSE 33789
// result := true ;
33781: LD_ADDR_VAR 0 2
33785: PUSH
33786: LD_INT 1
33788: ST_TO_ADDR
// end ;
33789: LD_VAR 0 2
33793: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
33794: LD_INT 0
33796: PPUSH
33797: PPUSH
33798: PPUSH
33799: PPUSH
// if pos < 1 then
33800: LD_VAR 0 2
33804: PUSH
33805: LD_INT 1
33807: LESS
33808: IFFALSE 33812
// exit ;
33810: GO 34115
// if pos = 1 then
33812: LD_VAR 0 2
33816: PUSH
33817: LD_INT 1
33819: EQUAL
33820: IFFALSE 33853
// result := Replace ( arr , pos [ 1 ] , value ) else
33822: LD_ADDR_VAR 0 4
33826: PUSH
33827: LD_VAR 0 1
33831: PPUSH
33832: LD_VAR 0 2
33836: PUSH
33837: LD_INT 1
33839: ARRAY
33840: PPUSH
33841: LD_VAR 0 3
33845: PPUSH
33846: CALL_OW 1
33850: ST_TO_ADDR
33851: GO 34115
// begin tmp := arr ;
33853: LD_ADDR_VAR 0 6
33857: PUSH
33858: LD_VAR 0 1
33862: ST_TO_ADDR
// s_arr := [ tmp ] ;
33863: LD_ADDR_VAR 0 7
33867: PUSH
33868: LD_VAR 0 6
33872: PUSH
33873: EMPTY
33874: LIST
33875: ST_TO_ADDR
// for i = 1 to pos - 1 do
33876: LD_ADDR_VAR 0 5
33880: PUSH
33881: DOUBLE
33882: LD_INT 1
33884: DEC
33885: ST_TO_ADDR
33886: LD_VAR 0 2
33890: PUSH
33891: LD_INT 1
33893: MINUS
33894: PUSH
33895: FOR_TO
33896: IFFALSE 33941
// begin tmp := tmp [ pos [ i ] ] ;
33898: LD_ADDR_VAR 0 6
33902: PUSH
33903: LD_VAR 0 6
33907: PUSH
33908: LD_VAR 0 2
33912: PUSH
33913: LD_VAR 0 5
33917: ARRAY
33918: ARRAY
33919: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
33920: LD_ADDR_VAR 0 7
33924: PUSH
33925: LD_VAR 0 7
33929: PUSH
33930: LD_VAR 0 6
33934: PUSH
33935: EMPTY
33936: LIST
33937: ADD
33938: ST_TO_ADDR
// end ;
33939: GO 33895
33941: POP
33942: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
33943: LD_ADDR_VAR 0 6
33947: PUSH
33948: LD_VAR 0 6
33952: PPUSH
33953: LD_VAR 0 2
33957: PUSH
33958: LD_VAR 0 2
33962: ARRAY
33963: PPUSH
33964: LD_VAR 0 3
33968: PPUSH
33969: CALL_OW 1
33973: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
33974: LD_ADDR_VAR 0 7
33978: PUSH
33979: LD_VAR 0 7
33983: PPUSH
33984: LD_VAR 0 7
33988: PPUSH
33989: LD_VAR 0 6
33993: PPUSH
33994: CALL_OW 1
33998: ST_TO_ADDR
// for i = s_arr downto 2 do
33999: LD_ADDR_VAR 0 5
34003: PUSH
34004: DOUBLE
34005: LD_VAR 0 7
34009: INC
34010: ST_TO_ADDR
34011: LD_INT 2
34013: PUSH
34014: FOR_DOWNTO
34015: IFFALSE 34099
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
34017: LD_ADDR_VAR 0 6
34021: PUSH
34022: LD_VAR 0 7
34026: PUSH
34027: LD_VAR 0 5
34031: PUSH
34032: LD_INT 1
34034: MINUS
34035: ARRAY
34036: PPUSH
34037: LD_VAR 0 2
34041: PUSH
34042: LD_VAR 0 5
34046: PUSH
34047: LD_INT 1
34049: MINUS
34050: ARRAY
34051: PPUSH
34052: LD_VAR 0 7
34056: PUSH
34057: LD_VAR 0 5
34061: ARRAY
34062: PPUSH
34063: CALL_OW 1
34067: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
34068: LD_ADDR_VAR 0 7
34072: PUSH
34073: LD_VAR 0 7
34077: PPUSH
34078: LD_VAR 0 5
34082: PUSH
34083: LD_INT 1
34085: MINUS
34086: PPUSH
34087: LD_VAR 0 6
34091: PPUSH
34092: CALL_OW 1
34096: ST_TO_ADDR
// end ;
34097: GO 34014
34099: POP
34100: POP
// result := s_arr [ 1 ] ;
34101: LD_ADDR_VAR 0 4
34105: PUSH
34106: LD_VAR 0 7
34110: PUSH
34111: LD_INT 1
34113: ARRAY
34114: ST_TO_ADDR
// end ; end ;
34115: LD_VAR 0 4
34119: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
34120: LD_INT 0
34122: PPUSH
34123: PPUSH
// if not list then
34124: LD_VAR 0 1
34128: NOT
34129: IFFALSE 34133
// exit ;
34131: GO 34224
// i := list [ pos1 ] ;
34133: LD_ADDR_VAR 0 5
34137: PUSH
34138: LD_VAR 0 1
34142: PUSH
34143: LD_VAR 0 2
34147: ARRAY
34148: ST_TO_ADDR
// if not i then
34149: LD_VAR 0 5
34153: NOT
34154: IFFALSE 34158
// exit ;
34156: GO 34224
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
34158: LD_ADDR_VAR 0 1
34162: PUSH
34163: LD_VAR 0 1
34167: PPUSH
34168: LD_VAR 0 2
34172: PPUSH
34173: LD_VAR 0 1
34177: PUSH
34178: LD_VAR 0 3
34182: ARRAY
34183: PPUSH
34184: CALL_OW 1
34188: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
34189: LD_ADDR_VAR 0 1
34193: PUSH
34194: LD_VAR 0 1
34198: PPUSH
34199: LD_VAR 0 3
34203: PPUSH
34204: LD_VAR 0 5
34208: PPUSH
34209: CALL_OW 1
34213: ST_TO_ADDR
// result := list ;
34214: LD_ADDR_VAR 0 4
34218: PUSH
34219: LD_VAR 0 1
34223: ST_TO_ADDR
// end ;
34224: LD_VAR 0 4
34228: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
34229: LD_INT 0
34231: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
34232: LD_ADDR_VAR 0 5
34236: PUSH
34237: LD_VAR 0 1
34241: PPUSH
34242: CALL_OW 250
34246: PPUSH
34247: LD_VAR 0 1
34251: PPUSH
34252: CALL_OW 251
34256: PPUSH
34257: LD_VAR 0 2
34261: PPUSH
34262: LD_VAR 0 3
34266: PPUSH
34267: LD_VAR 0 4
34271: PPUSH
34272: CALL 34282 0 5
34276: ST_TO_ADDR
// end ;
34277: LD_VAR 0 5
34281: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
34282: LD_INT 0
34284: PPUSH
34285: PPUSH
34286: PPUSH
34287: PPUSH
// if not list then
34288: LD_VAR 0 3
34292: NOT
34293: IFFALSE 34297
// exit ;
34295: GO 34685
// result := [ ] ;
34297: LD_ADDR_VAR 0 6
34301: PUSH
34302: EMPTY
34303: ST_TO_ADDR
// for i in list do
34304: LD_ADDR_VAR 0 7
34308: PUSH
34309: LD_VAR 0 3
34313: PUSH
34314: FOR_IN
34315: IFFALSE 34517
// begin tmp := GetDistUnitXY ( i , x , y ) ;
34317: LD_ADDR_VAR 0 9
34321: PUSH
34322: LD_VAR 0 7
34326: PPUSH
34327: LD_VAR 0 1
34331: PPUSH
34332: LD_VAR 0 2
34336: PPUSH
34337: CALL_OW 297
34341: ST_TO_ADDR
// if not result then
34342: LD_VAR 0 6
34346: NOT
34347: IFFALSE 34373
// result := [ [ i , tmp ] ] else
34349: LD_ADDR_VAR 0 6
34353: PUSH
34354: LD_VAR 0 7
34358: PUSH
34359: LD_VAR 0 9
34363: PUSH
34364: EMPTY
34365: LIST
34366: LIST
34367: PUSH
34368: EMPTY
34369: LIST
34370: ST_TO_ADDR
34371: GO 34515
// begin if result [ result ] [ 2 ] < tmp then
34373: LD_VAR 0 6
34377: PUSH
34378: LD_VAR 0 6
34382: ARRAY
34383: PUSH
34384: LD_INT 2
34386: ARRAY
34387: PUSH
34388: LD_VAR 0 9
34392: LESS
34393: IFFALSE 34435
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
34395: LD_ADDR_VAR 0 6
34399: PUSH
34400: LD_VAR 0 6
34404: PPUSH
34405: LD_VAR 0 6
34409: PUSH
34410: LD_INT 1
34412: PLUS
34413: PPUSH
34414: LD_VAR 0 7
34418: PUSH
34419: LD_VAR 0 9
34423: PUSH
34424: EMPTY
34425: LIST
34426: LIST
34427: PPUSH
34428: CALL_OW 2
34432: ST_TO_ADDR
34433: GO 34515
// for j = 1 to result do
34435: LD_ADDR_VAR 0 8
34439: PUSH
34440: DOUBLE
34441: LD_INT 1
34443: DEC
34444: ST_TO_ADDR
34445: LD_VAR 0 6
34449: PUSH
34450: FOR_TO
34451: IFFALSE 34513
// begin if tmp < result [ j ] [ 2 ] then
34453: LD_VAR 0 9
34457: PUSH
34458: LD_VAR 0 6
34462: PUSH
34463: LD_VAR 0 8
34467: ARRAY
34468: PUSH
34469: LD_INT 2
34471: ARRAY
34472: LESS
34473: IFFALSE 34511
// begin result := Insert ( result , j , [ i , tmp ] ) ;
34475: LD_ADDR_VAR 0 6
34479: PUSH
34480: LD_VAR 0 6
34484: PPUSH
34485: LD_VAR 0 8
34489: PPUSH
34490: LD_VAR 0 7
34494: PUSH
34495: LD_VAR 0 9
34499: PUSH
34500: EMPTY
34501: LIST
34502: LIST
34503: PPUSH
34504: CALL_OW 2
34508: ST_TO_ADDR
// break ;
34509: GO 34513
// end ; end ;
34511: GO 34450
34513: POP
34514: POP
// end ; end ;
34515: GO 34314
34517: POP
34518: POP
// if result and not asc then
34519: LD_VAR 0 6
34523: PUSH
34524: LD_VAR 0 4
34528: NOT
34529: AND
34530: IFFALSE 34605
// begin tmp := result ;
34532: LD_ADDR_VAR 0 9
34536: PUSH
34537: LD_VAR 0 6
34541: ST_TO_ADDR
// for i = tmp downto 1 do
34542: LD_ADDR_VAR 0 7
34546: PUSH
34547: DOUBLE
34548: LD_VAR 0 9
34552: INC
34553: ST_TO_ADDR
34554: LD_INT 1
34556: PUSH
34557: FOR_DOWNTO
34558: IFFALSE 34603
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
34560: LD_ADDR_VAR 0 6
34564: PUSH
34565: LD_VAR 0 6
34569: PPUSH
34570: LD_VAR 0 9
34574: PUSH
34575: LD_VAR 0 7
34579: MINUS
34580: PUSH
34581: LD_INT 1
34583: PLUS
34584: PPUSH
34585: LD_VAR 0 9
34589: PUSH
34590: LD_VAR 0 7
34594: ARRAY
34595: PPUSH
34596: CALL_OW 1
34600: ST_TO_ADDR
34601: GO 34557
34603: POP
34604: POP
// end ; tmp := [ ] ;
34605: LD_ADDR_VAR 0 9
34609: PUSH
34610: EMPTY
34611: ST_TO_ADDR
// if mode then
34612: LD_VAR 0 5
34616: IFFALSE 34685
// begin for i = 1 to result do
34618: LD_ADDR_VAR 0 7
34622: PUSH
34623: DOUBLE
34624: LD_INT 1
34626: DEC
34627: ST_TO_ADDR
34628: LD_VAR 0 6
34632: PUSH
34633: FOR_TO
34634: IFFALSE 34673
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
34636: LD_ADDR_VAR 0 9
34640: PUSH
34641: LD_VAR 0 9
34645: PPUSH
34646: LD_VAR 0 7
34650: PPUSH
34651: LD_VAR 0 6
34655: PUSH
34656: LD_VAR 0 7
34660: ARRAY
34661: PUSH
34662: LD_INT 1
34664: ARRAY
34665: PPUSH
34666: CALL_OW 1
34670: ST_TO_ADDR
34671: GO 34633
34673: POP
34674: POP
// result := tmp ;
34675: LD_ADDR_VAR 0 6
34679: PUSH
34680: LD_VAR 0 9
34684: ST_TO_ADDR
// end ; end ;
34685: LD_VAR 0 6
34689: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
34690: LD_INT 0
34692: PPUSH
34693: PPUSH
34694: PPUSH
34695: PPUSH
34696: PPUSH
34697: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
34698: LD_ADDR_VAR 0 5
34702: PUSH
34703: LD_INT 0
34705: PUSH
34706: LD_INT 0
34708: PUSH
34709: LD_INT 0
34711: PUSH
34712: EMPTY
34713: PUSH
34714: EMPTY
34715: LIST
34716: LIST
34717: LIST
34718: LIST
34719: ST_TO_ADDR
// if not x or not y then
34720: LD_VAR 0 2
34724: NOT
34725: PUSH
34726: LD_VAR 0 3
34730: NOT
34731: OR
34732: IFFALSE 34736
// exit ;
34734: GO 36386
// if not range then
34736: LD_VAR 0 4
34740: NOT
34741: IFFALSE 34751
// range := 10 ;
34743: LD_ADDR_VAR 0 4
34747: PUSH
34748: LD_INT 10
34750: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
34751: LD_ADDR_VAR 0 8
34755: PUSH
34756: LD_INT 81
34758: PUSH
34759: LD_VAR 0 1
34763: PUSH
34764: EMPTY
34765: LIST
34766: LIST
34767: PUSH
34768: LD_INT 92
34770: PUSH
34771: LD_VAR 0 2
34775: PUSH
34776: LD_VAR 0 3
34780: PUSH
34781: LD_VAR 0 4
34785: PUSH
34786: EMPTY
34787: LIST
34788: LIST
34789: LIST
34790: LIST
34791: PUSH
34792: LD_INT 3
34794: PUSH
34795: LD_INT 21
34797: PUSH
34798: LD_INT 3
34800: PUSH
34801: EMPTY
34802: LIST
34803: LIST
34804: PUSH
34805: EMPTY
34806: LIST
34807: LIST
34808: PUSH
34809: EMPTY
34810: LIST
34811: LIST
34812: LIST
34813: PPUSH
34814: CALL_OW 69
34818: ST_TO_ADDR
// if not tmp then
34819: LD_VAR 0 8
34823: NOT
34824: IFFALSE 34828
// exit ;
34826: GO 36386
// for i in tmp do
34828: LD_ADDR_VAR 0 6
34832: PUSH
34833: LD_VAR 0 8
34837: PUSH
34838: FOR_IN
34839: IFFALSE 36361
// begin points := [ 0 , 0 , 0 ] ;
34841: LD_ADDR_VAR 0 9
34845: PUSH
34846: LD_INT 0
34848: PUSH
34849: LD_INT 0
34851: PUSH
34852: LD_INT 0
34854: PUSH
34855: EMPTY
34856: LIST
34857: LIST
34858: LIST
34859: ST_TO_ADDR
// bpoints := 1 ;
34860: LD_ADDR_VAR 0 10
34864: PUSH
34865: LD_INT 1
34867: ST_TO_ADDR
// case GetType ( i ) of unit_human :
34868: LD_VAR 0 6
34872: PPUSH
34873: CALL_OW 247
34877: PUSH
34878: LD_INT 1
34880: DOUBLE
34881: EQUAL
34882: IFTRUE 34886
34884: GO 35464
34886: POP
// begin if GetClass ( i ) = 1 then
34887: LD_VAR 0 6
34891: PPUSH
34892: CALL_OW 257
34896: PUSH
34897: LD_INT 1
34899: EQUAL
34900: IFFALSE 34921
// points := [ 10 , 5 , 3 ] ;
34902: LD_ADDR_VAR 0 9
34906: PUSH
34907: LD_INT 10
34909: PUSH
34910: LD_INT 5
34912: PUSH
34913: LD_INT 3
34915: PUSH
34916: EMPTY
34917: LIST
34918: LIST
34919: LIST
34920: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
34921: LD_VAR 0 6
34925: PPUSH
34926: CALL_OW 257
34930: PUSH
34931: LD_INT 2
34933: PUSH
34934: LD_INT 3
34936: PUSH
34937: LD_INT 4
34939: PUSH
34940: EMPTY
34941: LIST
34942: LIST
34943: LIST
34944: IN
34945: IFFALSE 34966
// points := [ 3 , 2 , 1 ] ;
34947: LD_ADDR_VAR 0 9
34951: PUSH
34952: LD_INT 3
34954: PUSH
34955: LD_INT 2
34957: PUSH
34958: LD_INT 1
34960: PUSH
34961: EMPTY
34962: LIST
34963: LIST
34964: LIST
34965: ST_TO_ADDR
// if GetClass ( i ) = 5 then
34966: LD_VAR 0 6
34970: PPUSH
34971: CALL_OW 257
34975: PUSH
34976: LD_INT 5
34978: EQUAL
34979: IFFALSE 35000
// points := [ 130 , 5 , 2 ] ;
34981: LD_ADDR_VAR 0 9
34985: PUSH
34986: LD_INT 130
34988: PUSH
34989: LD_INT 5
34991: PUSH
34992: LD_INT 2
34994: PUSH
34995: EMPTY
34996: LIST
34997: LIST
34998: LIST
34999: ST_TO_ADDR
// if GetClass ( i ) = 8 then
35000: LD_VAR 0 6
35004: PPUSH
35005: CALL_OW 257
35009: PUSH
35010: LD_INT 8
35012: EQUAL
35013: IFFALSE 35034
// points := [ 35 , 35 , 30 ] ;
35015: LD_ADDR_VAR 0 9
35019: PUSH
35020: LD_INT 35
35022: PUSH
35023: LD_INT 35
35025: PUSH
35026: LD_INT 30
35028: PUSH
35029: EMPTY
35030: LIST
35031: LIST
35032: LIST
35033: ST_TO_ADDR
// if GetClass ( i ) = 9 then
35034: LD_VAR 0 6
35038: PPUSH
35039: CALL_OW 257
35043: PUSH
35044: LD_INT 9
35046: EQUAL
35047: IFFALSE 35068
// points := [ 20 , 55 , 40 ] ;
35049: LD_ADDR_VAR 0 9
35053: PUSH
35054: LD_INT 20
35056: PUSH
35057: LD_INT 55
35059: PUSH
35060: LD_INT 40
35062: PUSH
35063: EMPTY
35064: LIST
35065: LIST
35066: LIST
35067: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
35068: LD_VAR 0 6
35072: PPUSH
35073: CALL_OW 257
35077: PUSH
35078: LD_INT 12
35080: PUSH
35081: LD_INT 16
35083: PUSH
35084: EMPTY
35085: LIST
35086: LIST
35087: IN
35088: IFFALSE 35109
// points := [ 5 , 3 , 2 ] ;
35090: LD_ADDR_VAR 0 9
35094: PUSH
35095: LD_INT 5
35097: PUSH
35098: LD_INT 3
35100: PUSH
35101: LD_INT 2
35103: PUSH
35104: EMPTY
35105: LIST
35106: LIST
35107: LIST
35108: ST_TO_ADDR
// if GetClass ( i ) = 17 then
35109: LD_VAR 0 6
35113: PPUSH
35114: CALL_OW 257
35118: PUSH
35119: LD_INT 17
35121: EQUAL
35122: IFFALSE 35143
// points := [ 100 , 50 , 75 ] ;
35124: LD_ADDR_VAR 0 9
35128: PUSH
35129: LD_INT 100
35131: PUSH
35132: LD_INT 50
35134: PUSH
35135: LD_INT 75
35137: PUSH
35138: EMPTY
35139: LIST
35140: LIST
35141: LIST
35142: ST_TO_ADDR
// if GetClass ( i ) = 15 then
35143: LD_VAR 0 6
35147: PPUSH
35148: CALL_OW 257
35152: PUSH
35153: LD_INT 15
35155: EQUAL
35156: IFFALSE 35177
// points := [ 10 , 5 , 3 ] ;
35158: LD_ADDR_VAR 0 9
35162: PUSH
35163: LD_INT 10
35165: PUSH
35166: LD_INT 5
35168: PUSH
35169: LD_INT 3
35171: PUSH
35172: EMPTY
35173: LIST
35174: LIST
35175: LIST
35176: ST_TO_ADDR
// if GetClass ( i ) = 14 then
35177: LD_VAR 0 6
35181: PPUSH
35182: CALL_OW 257
35186: PUSH
35187: LD_INT 14
35189: EQUAL
35190: IFFALSE 35211
// points := [ 10 , 0 , 0 ] ;
35192: LD_ADDR_VAR 0 9
35196: PUSH
35197: LD_INT 10
35199: PUSH
35200: LD_INT 0
35202: PUSH
35203: LD_INT 0
35205: PUSH
35206: EMPTY
35207: LIST
35208: LIST
35209: LIST
35210: ST_TO_ADDR
// if GetClass ( i ) = 11 then
35211: LD_VAR 0 6
35215: PPUSH
35216: CALL_OW 257
35220: PUSH
35221: LD_INT 11
35223: EQUAL
35224: IFFALSE 35245
// points := [ 30 , 10 , 5 ] ;
35226: LD_ADDR_VAR 0 9
35230: PUSH
35231: LD_INT 30
35233: PUSH
35234: LD_INT 10
35236: PUSH
35237: LD_INT 5
35239: PUSH
35240: EMPTY
35241: LIST
35242: LIST
35243: LIST
35244: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
35245: LD_VAR 0 1
35249: PPUSH
35250: LD_INT 5
35252: PPUSH
35253: CALL_OW 321
35257: PUSH
35258: LD_INT 2
35260: EQUAL
35261: IFFALSE 35278
// bpoints := bpoints * 1.8 ;
35263: LD_ADDR_VAR 0 10
35267: PUSH
35268: LD_VAR 0 10
35272: PUSH
35273: LD_REAL  1.80000000000000E+0000
35276: MUL
35277: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
35278: LD_VAR 0 6
35282: PPUSH
35283: CALL_OW 257
35287: PUSH
35288: LD_INT 1
35290: PUSH
35291: LD_INT 2
35293: PUSH
35294: LD_INT 3
35296: PUSH
35297: LD_INT 4
35299: PUSH
35300: EMPTY
35301: LIST
35302: LIST
35303: LIST
35304: LIST
35305: IN
35306: PUSH
35307: LD_VAR 0 1
35311: PPUSH
35312: LD_INT 51
35314: PPUSH
35315: CALL_OW 321
35319: PUSH
35320: LD_INT 2
35322: EQUAL
35323: AND
35324: IFFALSE 35341
// bpoints := bpoints * 1.2 ;
35326: LD_ADDR_VAR 0 10
35330: PUSH
35331: LD_VAR 0 10
35335: PUSH
35336: LD_REAL  1.20000000000000E+0000
35339: MUL
35340: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
35341: LD_VAR 0 6
35345: PPUSH
35346: CALL_OW 257
35350: PUSH
35351: LD_INT 5
35353: PUSH
35354: LD_INT 7
35356: PUSH
35357: LD_INT 9
35359: PUSH
35360: EMPTY
35361: LIST
35362: LIST
35363: LIST
35364: IN
35365: PUSH
35366: LD_VAR 0 1
35370: PPUSH
35371: LD_INT 52
35373: PPUSH
35374: CALL_OW 321
35378: PUSH
35379: LD_INT 2
35381: EQUAL
35382: AND
35383: IFFALSE 35400
// bpoints := bpoints * 1.5 ;
35385: LD_ADDR_VAR 0 10
35389: PUSH
35390: LD_VAR 0 10
35394: PUSH
35395: LD_REAL  1.50000000000000E+0000
35398: MUL
35399: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
35400: LD_VAR 0 1
35404: PPUSH
35405: LD_INT 66
35407: PPUSH
35408: CALL_OW 321
35412: PUSH
35413: LD_INT 2
35415: EQUAL
35416: IFFALSE 35433
// bpoints := bpoints * 1.1 ;
35418: LD_ADDR_VAR 0 10
35422: PUSH
35423: LD_VAR 0 10
35427: PUSH
35428: LD_REAL  1.10000000000000E+0000
35431: MUL
35432: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
35433: LD_ADDR_VAR 0 10
35437: PUSH
35438: LD_VAR 0 10
35442: PUSH
35443: LD_VAR 0 6
35447: PPUSH
35448: LD_INT 1
35450: PPUSH
35451: CALL_OW 259
35455: PUSH
35456: LD_REAL  1.15000000000000E+0000
35459: MUL
35460: MUL
35461: ST_TO_ADDR
// end ; unit_vehicle :
35462: GO 36290
35464: LD_INT 2
35466: DOUBLE
35467: EQUAL
35468: IFTRUE 35472
35470: GO 36278
35472: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
35473: LD_VAR 0 6
35477: PPUSH
35478: CALL_OW 264
35482: PUSH
35483: LD_INT 2
35485: PUSH
35486: LD_INT 42
35488: PUSH
35489: LD_INT 24
35491: PUSH
35492: EMPTY
35493: LIST
35494: LIST
35495: LIST
35496: IN
35497: IFFALSE 35518
// points := [ 25 , 5 , 3 ] ;
35499: LD_ADDR_VAR 0 9
35503: PUSH
35504: LD_INT 25
35506: PUSH
35507: LD_INT 5
35509: PUSH
35510: LD_INT 3
35512: PUSH
35513: EMPTY
35514: LIST
35515: LIST
35516: LIST
35517: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
35518: LD_VAR 0 6
35522: PPUSH
35523: CALL_OW 264
35527: PUSH
35528: LD_INT 4
35530: PUSH
35531: LD_INT 43
35533: PUSH
35534: LD_INT 25
35536: PUSH
35537: EMPTY
35538: LIST
35539: LIST
35540: LIST
35541: IN
35542: IFFALSE 35563
// points := [ 40 , 15 , 5 ] ;
35544: LD_ADDR_VAR 0 9
35548: PUSH
35549: LD_INT 40
35551: PUSH
35552: LD_INT 15
35554: PUSH
35555: LD_INT 5
35557: PUSH
35558: EMPTY
35559: LIST
35560: LIST
35561: LIST
35562: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
35563: LD_VAR 0 6
35567: PPUSH
35568: CALL_OW 264
35572: PUSH
35573: LD_INT 3
35575: PUSH
35576: LD_INT 23
35578: PUSH
35579: EMPTY
35580: LIST
35581: LIST
35582: IN
35583: IFFALSE 35604
// points := [ 7 , 25 , 8 ] ;
35585: LD_ADDR_VAR 0 9
35589: PUSH
35590: LD_INT 7
35592: PUSH
35593: LD_INT 25
35595: PUSH
35596: LD_INT 8
35598: PUSH
35599: EMPTY
35600: LIST
35601: LIST
35602: LIST
35603: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
35604: LD_VAR 0 6
35608: PPUSH
35609: CALL_OW 264
35613: PUSH
35614: LD_INT 5
35616: PUSH
35617: LD_INT 27
35619: PUSH
35620: LD_INT 44
35622: PUSH
35623: EMPTY
35624: LIST
35625: LIST
35626: LIST
35627: IN
35628: IFFALSE 35649
// points := [ 14 , 50 , 16 ] ;
35630: LD_ADDR_VAR 0 9
35634: PUSH
35635: LD_INT 14
35637: PUSH
35638: LD_INT 50
35640: PUSH
35641: LD_INT 16
35643: PUSH
35644: EMPTY
35645: LIST
35646: LIST
35647: LIST
35648: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
35649: LD_VAR 0 6
35653: PPUSH
35654: CALL_OW 264
35658: PUSH
35659: LD_INT 6
35661: PUSH
35662: LD_INT 46
35664: PUSH
35665: EMPTY
35666: LIST
35667: LIST
35668: IN
35669: IFFALSE 35690
// points := [ 32 , 120 , 70 ] ;
35671: LD_ADDR_VAR 0 9
35675: PUSH
35676: LD_INT 32
35678: PUSH
35679: LD_INT 120
35681: PUSH
35682: LD_INT 70
35684: PUSH
35685: EMPTY
35686: LIST
35687: LIST
35688: LIST
35689: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
35690: LD_VAR 0 6
35694: PPUSH
35695: CALL_OW 264
35699: PUSH
35700: LD_INT 7
35702: PUSH
35703: LD_INT 28
35705: PUSH
35706: LD_INT 45
35708: PUSH
35709: LD_INT 92
35711: PUSH
35712: EMPTY
35713: LIST
35714: LIST
35715: LIST
35716: LIST
35717: IN
35718: IFFALSE 35739
// points := [ 35 , 20 , 45 ] ;
35720: LD_ADDR_VAR 0 9
35724: PUSH
35725: LD_INT 35
35727: PUSH
35728: LD_INT 20
35730: PUSH
35731: LD_INT 45
35733: PUSH
35734: EMPTY
35735: LIST
35736: LIST
35737: LIST
35738: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
35739: LD_VAR 0 6
35743: PPUSH
35744: CALL_OW 264
35748: PUSH
35749: LD_INT 47
35751: PUSH
35752: EMPTY
35753: LIST
35754: IN
35755: IFFALSE 35776
// points := [ 67 , 45 , 75 ] ;
35757: LD_ADDR_VAR 0 9
35761: PUSH
35762: LD_INT 67
35764: PUSH
35765: LD_INT 45
35767: PUSH
35768: LD_INT 75
35770: PUSH
35771: EMPTY
35772: LIST
35773: LIST
35774: LIST
35775: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
35776: LD_VAR 0 6
35780: PPUSH
35781: CALL_OW 264
35785: PUSH
35786: LD_INT 26
35788: PUSH
35789: EMPTY
35790: LIST
35791: IN
35792: IFFALSE 35813
// points := [ 120 , 30 , 80 ] ;
35794: LD_ADDR_VAR 0 9
35798: PUSH
35799: LD_INT 120
35801: PUSH
35802: LD_INT 30
35804: PUSH
35805: LD_INT 80
35807: PUSH
35808: EMPTY
35809: LIST
35810: LIST
35811: LIST
35812: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
35813: LD_VAR 0 6
35817: PPUSH
35818: CALL_OW 264
35822: PUSH
35823: LD_INT 22
35825: PUSH
35826: EMPTY
35827: LIST
35828: IN
35829: IFFALSE 35850
// points := [ 40 , 1 , 1 ] ;
35831: LD_ADDR_VAR 0 9
35835: PUSH
35836: LD_INT 40
35838: PUSH
35839: LD_INT 1
35841: PUSH
35842: LD_INT 1
35844: PUSH
35845: EMPTY
35846: LIST
35847: LIST
35848: LIST
35849: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
35850: LD_VAR 0 6
35854: PPUSH
35855: CALL_OW 264
35859: PUSH
35860: LD_INT 29
35862: PUSH
35863: EMPTY
35864: LIST
35865: IN
35866: IFFALSE 35887
// points := [ 70 , 200 , 400 ] ;
35868: LD_ADDR_VAR 0 9
35872: PUSH
35873: LD_INT 70
35875: PUSH
35876: LD_INT 200
35878: PUSH
35879: LD_INT 400
35881: PUSH
35882: EMPTY
35883: LIST
35884: LIST
35885: LIST
35886: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
35887: LD_VAR 0 6
35891: PPUSH
35892: CALL_OW 264
35896: PUSH
35897: LD_INT 14
35899: PUSH
35900: LD_INT 53
35902: PUSH
35903: EMPTY
35904: LIST
35905: LIST
35906: IN
35907: IFFALSE 35928
// points := [ 40 , 10 , 20 ] ;
35909: LD_ADDR_VAR 0 9
35913: PUSH
35914: LD_INT 40
35916: PUSH
35917: LD_INT 10
35919: PUSH
35920: LD_INT 20
35922: PUSH
35923: EMPTY
35924: LIST
35925: LIST
35926: LIST
35927: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
35928: LD_VAR 0 6
35932: PPUSH
35933: CALL_OW 264
35937: PUSH
35938: LD_INT 9
35940: PUSH
35941: EMPTY
35942: LIST
35943: IN
35944: IFFALSE 35965
// points := [ 5 , 70 , 20 ] ;
35946: LD_ADDR_VAR 0 9
35950: PUSH
35951: LD_INT 5
35953: PUSH
35954: LD_INT 70
35956: PUSH
35957: LD_INT 20
35959: PUSH
35960: EMPTY
35961: LIST
35962: LIST
35963: LIST
35964: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
35965: LD_VAR 0 6
35969: PPUSH
35970: CALL_OW 264
35974: PUSH
35975: LD_INT 10
35977: PUSH
35978: EMPTY
35979: LIST
35980: IN
35981: IFFALSE 36002
// points := [ 35 , 110 , 70 ] ;
35983: LD_ADDR_VAR 0 9
35987: PUSH
35988: LD_INT 35
35990: PUSH
35991: LD_INT 110
35993: PUSH
35994: LD_INT 70
35996: PUSH
35997: EMPTY
35998: LIST
35999: LIST
36000: LIST
36001: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
36002: LD_VAR 0 6
36006: PPUSH
36007: CALL_OW 265
36011: PUSH
36012: LD_INT 25
36014: EQUAL
36015: IFFALSE 36036
// points := [ 80 , 65 , 100 ] ;
36017: LD_ADDR_VAR 0 9
36021: PUSH
36022: LD_INT 80
36024: PUSH
36025: LD_INT 65
36027: PUSH
36028: LD_INT 100
36030: PUSH
36031: EMPTY
36032: LIST
36033: LIST
36034: LIST
36035: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
36036: LD_VAR 0 6
36040: PPUSH
36041: CALL_OW 263
36045: PUSH
36046: LD_INT 1
36048: EQUAL
36049: IFFALSE 36084
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
36051: LD_ADDR_VAR 0 10
36055: PUSH
36056: LD_VAR 0 10
36060: PUSH
36061: LD_VAR 0 6
36065: PPUSH
36066: CALL_OW 311
36070: PPUSH
36071: LD_INT 3
36073: PPUSH
36074: CALL_OW 259
36078: PUSH
36079: LD_INT 4
36081: MUL
36082: MUL
36083: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
36084: LD_VAR 0 6
36088: PPUSH
36089: CALL_OW 263
36093: PUSH
36094: LD_INT 2
36096: EQUAL
36097: IFFALSE 36148
// begin j := IsControledBy ( i ) ;
36099: LD_ADDR_VAR 0 7
36103: PUSH
36104: LD_VAR 0 6
36108: PPUSH
36109: CALL_OW 312
36113: ST_TO_ADDR
// if j then
36114: LD_VAR 0 7
36118: IFFALSE 36148
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
36120: LD_ADDR_VAR 0 10
36124: PUSH
36125: LD_VAR 0 10
36129: PUSH
36130: LD_VAR 0 7
36134: PPUSH
36135: LD_INT 3
36137: PPUSH
36138: CALL_OW 259
36142: PUSH
36143: LD_INT 3
36145: MUL
36146: MUL
36147: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
36148: LD_VAR 0 6
36152: PPUSH
36153: CALL_OW 264
36157: PUSH
36158: LD_INT 5
36160: PUSH
36161: LD_INT 6
36163: PUSH
36164: LD_INT 46
36166: PUSH
36167: LD_INT 44
36169: PUSH
36170: LD_INT 47
36172: PUSH
36173: LD_INT 45
36175: PUSH
36176: LD_INT 28
36178: PUSH
36179: LD_INT 7
36181: PUSH
36182: LD_INT 27
36184: PUSH
36185: LD_INT 29
36187: PUSH
36188: EMPTY
36189: LIST
36190: LIST
36191: LIST
36192: LIST
36193: LIST
36194: LIST
36195: LIST
36196: LIST
36197: LIST
36198: LIST
36199: IN
36200: PUSH
36201: LD_VAR 0 1
36205: PPUSH
36206: LD_INT 52
36208: PPUSH
36209: CALL_OW 321
36213: PUSH
36214: LD_INT 2
36216: EQUAL
36217: AND
36218: IFFALSE 36235
// bpoints := bpoints * 1.2 ;
36220: LD_ADDR_VAR 0 10
36224: PUSH
36225: LD_VAR 0 10
36229: PUSH
36230: LD_REAL  1.20000000000000E+0000
36233: MUL
36234: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
36235: LD_VAR 0 6
36239: PPUSH
36240: CALL_OW 264
36244: PUSH
36245: LD_INT 6
36247: PUSH
36248: LD_INT 46
36250: PUSH
36251: LD_INT 47
36253: PUSH
36254: EMPTY
36255: LIST
36256: LIST
36257: LIST
36258: IN
36259: IFFALSE 36276
// bpoints := bpoints * 1.2 ;
36261: LD_ADDR_VAR 0 10
36265: PUSH
36266: LD_VAR 0 10
36270: PUSH
36271: LD_REAL  1.20000000000000E+0000
36274: MUL
36275: ST_TO_ADDR
// end ; unit_building :
36276: GO 36290
36278: LD_INT 3
36280: DOUBLE
36281: EQUAL
36282: IFTRUE 36286
36284: GO 36289
36286: POP
// ; end ;
36287: GO 36290
36289: POP
// for j = 1 to 3 do
36290: LD_ADDR_VAR 0 7
36294: PUSH
36295: DOUBLE
36296: LD_INT 1
36298: DEC
36299: ST_TO_ADDR
36300: LD_INT 3
36302: PUSH
36303: FOR_TO
36304: IFFALSE 36357
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
36306: LD_ADDR_VAR 0 5
36310: PUSH
36311: LD_VAR 0 5
36315: PPUSH
36316: LD_VAR 0 7
36320: PPUSH
36321: LD_VAR 0 5
36325: PUSH
36326: LD_VAR 0 7
36330: ARRAY
36331: PUSH
36332: LD_VAR 0 9
36336: PUSH
36337: LD_VAR 0 7
36341: ARRAY
36342: PUSH
36343: LD_VAR 0 10
36347: MUL
36348: PLUS
36349: PPUSH
36350: CALL_OW 1
36354: ST_TO_ADDR
36355: GO 36303
36357: POP
36358: POP
// end ;
36359: GO 34838
36361: POP
36362: POP
// result := Replace ( result , 4 , tmp ) ;
36363: LD_ADDR_VAR 0 5
36367: PUSH
36368: LD_VAR 0 5
36372: PPUSH
36373: LD_INT 4
36375: PPUSH
36376: LD_VAR 0 8
36380: PPUSH
36381: CALL_OW 1
36385: ST_TO_ADDR
// end ;
36386: LD_VAR 0 5
36390: RET
// export function DangerAtRange ( unit , range ) ; begin
36391: LD_INT 0
36393: PPUSH
// if not unit then
36394: LD_VAR 0 1
36398: NOT
36399: IFFALSE 36403
// exit ;
36401: GO 36448
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
36403: LD_ADDR_VAR 0 3
36407: PUSH
36408: LD_VAR 0 1
36412: PPUSH
36413: CALL_OW 255
36417: PPUSH
36418: LD_VAR 0 1
36422: PPUSH
36423: CALL_OW 250
36427: PPUSH
36428: LD_VAR 0 1
36432: PPUSH
36433: CALL_OW 251
36437: PPUSH
36438: LD_VAR 0 2
36442: PPUSH
36443: CALL 34690 0 4
36447: ST_TO_ADDR
// end ;
36448: LD_VAR 0 3
36452: RET
// export function DangerInArea ( side , area ) ; begin
36453: LD_INT 0
36455: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
36456: LD_ADDR_VAR 0 3
36460: PUSH
36461: LD_VAR 0 2
36465: PPUSH
36466: LD_INT 81
36468: PUSH
36469: LD_VAR 0 1
36473: PUSH
36474: EMPTY
36475: LIST
36476: LIST
36477: PPUSH
36478: CALL_OW 70
36482: ST_TO_ADDR
// end ;
36483: LD_VAR 0 3
36487: RET
// export function IsExtension ( b ) ; begin
36488: LD_INT 0
36490: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
36491: LD_ADDR_VAR 0 2
36495: PUSH
36496: LD_VAR 0 1
36500: PUSH
36501: LD_INT 23
36503: PUSH
36504: LD_INT 20
36506: PUSH
36507: LD_INT 22
36509: PUSH
36510: LD_INT 17
36512: PUSH
36513: LD_INT 24
36515: PUSH
36516: LD_INT 21
36518: PUSH
36519: LD_INT 19
36521: PUSH
36522: LD_INT 16
36524: PUSH
36525: LD_INT 25
36527: PUSH
36528: LD_INT 18
36530: PUSH
36531: EMPTY
36532: LIST
36533: LIST
36534: LIST
36535: LIST
36536: LIST
36537: LIST
36538: LIST
36539: LIST
36540: LIST
36541: LIST
36542: IN
36543: ST_TO_ADDR
// end ;
36544: LD_VAR 0 2
36548: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
36549: LD_INT 0
36551: PPUSH
36552: PPUSH
36553: PPUSH
// result := [ ] ;
36554: LD_ADDR_VAR 0 4
36558: PUSH
36559: EMPTY
36560: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
36561: LD_ADDR_VAR 0 5
36565: PUSH
36566: LD_VAR 0 2
36570: PPUSH
36571: LD_INT 21
36573: PUSH
36574: LD_INT 3
36576: PUSH
36577: EMPTY
36578: LIST
36579: LIST
36580: PPUSH
36581: CALL_OW 70
36585: ST_TO_ADDR
// if not tmp then
36586: LD_VAR 0 5
36590: NOT
36591: IFFALSE 36595
// exit ;
36593: GO 36659
// if checkLink then
36595: LD_VAR 0 3
36599: IFFALSE 36649
// begin for i in tmp do
36601: LD_ADDR_VAR 0 6
36605: PUSH
36606: LD_VAR 0 5
36610: PUSH
36611: FOR_IN
36612: IFFALSE 36647
// if GetBase ( i ) <> base then
36614: LD_VAR 0 6
36618: PPUSH
36619: CALL_OW 274
36623: PUSH
36624: LD_VAR 0 1
36628: NONEQUAL
36629: IFFALSE 36645
// ComLinkToBase ( base , i ) ;
36631: LD_VAR 0 1
36635: PPUSH
36636: LD_VAR 0 6
36640: PPUSH
36641: CALL_OW 169
36645: GO 36611
36647: POP
36648: POP
// end ; result := tmp ;
36649: LD_ADDR_VAR 0 4
36653: PUSH
36654: LD_VAR 0 5
36658: ST_TO_ADDR
// end ;
36659: LD_VAR 0 4
36663: RET
// export function ComComplete ( units , b ) ; var i ; begin
36664: LD_INT 0
36666: PPUSH
36667: PPUSH
// if not units then
36668: LD_VAR 0 1
36672: NOT
36673: IFFALSE 36677
// exit ;
36675: GO 36767
// for i in units do
36677: LD_ADDR_VAR 0 4
36681: PUSH
36682: LD_VAR 0 1
36686: PUSH
36687: FOR_IN
36688: IFFALSE 36765
// if BuildingStatus ( b ) = bs_build then
36690: LD_VAR 0 2
36694: PPUSH
36695: CALL_OW 461
36699: PUSH
36700: LD_INT 1
36702: EQUAL
36703: IFFALSE 36763
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
36705: LD_VAR 0 4
36709: PPUSH
36710: LD_STRING h
36712: PUSH
36713: LD_VAR 0 2
36717: PPUSH
36718: CALL_OW 250
36722: PUSH
36723: LD_VAR 0 2
36727: PPUSH
36728: CALL_OW 251
36732: PUSH
36733: LD_VAR 0 2
36737: PUSH
36738: LD_INT 0
36740: PUSH
36741: LD_INT 0
36743: PUSH
36744: LD_INT 0
36746: PUSH
36747: EMPTY
36748: LIST
36749: LIST
36750: LIST
36751: LIST
36752: LIST
36753: LIST
36754: LIST
36755: PUSH
36756: EMPTY
36757: LIST
36758: PPUSH
36759: CALL_OW 446
36763: GO 36687
36765: POP
36766: POP
// end ;
36767: LD_VAR 0 3
36771: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
36772: LD_INT 0
36774: PPUSH
36775: PPUSH
36776: PPUSH
36777: PPUSH
36778: PPUSH
36779: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
36780: LD_VAR 0 1
36784: NOT
36785: PUSH
36786: LD_VAR 0 1
36790: PPUSH
36791: CALL_OW 263
36795: PUSH
36796: LD_INT 2
36798: NONEQUAL
36799: OR
36800: IFFALSE 36804
// exit ;
36802: GO 37120
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
36804: LD_ADDR_VAR 0 6
36808: PUSH
36809: LD_INT 22
36811: PUSH
36812: LD_VAR 0 1
36816: PPUSH
36817: CALL_OW 255
36821: PUSH
36822: EMPTY
36823: LIST
36824: LIST
36825: PUSH
36826: LD_INT 2
36828: PUSH
36829: LD_INT 30
36831: PUSH
36832: LD_INT 36
36834: PUSH
36835: EMPTY
36836: LIST
36837: LIST
36838: PUSH
36839: LD_INT 34
36841: PUSH
36842: LD_INT 31
36844: PUSH
36845: EMPTY
36846: LIST
36847: LIST
36848: PUSH
36849: EMPTY
36850: LIST
36851: LIST
36852: LIST
36853: PUSH
36854: EMPTY
36855: LIST
36856: LIST
36857: PPUSH
36858: CALL_OW 69
36862: ST_TO_ADDR
// if not tmp then
36863: LD_VAR 0 6
36867: NOT
36868: IFFALSE 36872
// exit ;
36870: GO 37120
// result := [ ] ;
36872: LD_ADDR_VAR 0 2
36876: PUSH
36877: EMPTY
36878: ST_TO_ADDR
// for i in tmp do
36879: LD_ADDR_VAR 0 3
36883: PUSH
36884: LD_VAR 0 6
36888: PUSH
36889: FOR_IN
36890: IFFALSE 36961
// begin t := UnitsInside ( i ) ;
36892: LD_ADDR_VAR 0 4
36896: PUSH
36897: LD_VAR 0 3
36901: PPUSH
36902: CALL_OW 313
36906: ST_TO_ADDR
// if t then
36907: LD_VAR 0 4
36911: IFFALSE 36959
// for j in t do
36913: LD_ADDR_VAR 0 7
36917: PUSH
36918: LD_VAR 0 4
36922: PUSH
36923: FOR_IN
36924: IFFALSE 36957
// result := Replace ( result , result + 1 , j ) ;
36926: LD_ADDR_VAR 0 2
36930: PUSH
36931: LD_VAR 0 2
36935: PPUSH
36936: LD_VAR 0 2
36940: PUSH
36941: LD_INT 1
36943: PLUS
36944: PPUSH
36945: LD_VAR 0 7
36949: PPUSH
36950: CALL_OW 1
36954: ST_TO_ADDR
36955: GO 36923
36957: POP
36958: POP
// end ;
36959: GO 36889
36961: POP
36962: POP
// if not result then
36963: LD_VAR 0 2
36967: NOT
36968: IFFALSE 36972
// exit ;
36970: GO 37120
// mech := result [ 1 ] ;
36972: LD_ADDR_VAR 0 5
36976: PUSH
36977: LD_VAR 0 2
36981: PUSH
36982: LD_INT 1
36984: ARRAY
36985: ST_TO_ADDR
// if result > 1 then
36986: LD_VAR 0 2
36990: PUSH
36991: LD_INT 1
36993: GREATER
36994: IFFALSE 37106
// begin for i = 2 to result do
36996: LD_ADDR_VAR 0 3
37000: PUSH
37001: DOUBLE
37002: LD_INT 2
37004: DEC
37005: ST_TO_ADDR
37006: LD_VAR 0 2
37010: PUSH
37011: FOR_TO
37012: IFFALSE 37104
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
37014: LD_ADDR_VAR 0 4
37018: PUSH
37019: LD_VAR 0 2
37023: PUSH
37024: LD_VAR 0 3
37028: ARRAY
37029: PPUSH
37030: LD_INT 3
37032: PPUSH
37033: CALL_OW 259
37037: PUSH
37038: LD_VAR 0 2
37042: PUSH
37043: LD_VAR 0 3
37047: ARRAY
37048: PPUSH
37049: CALL_OW 432
37053: MINUS
37054: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
37055: LD_VAR 0 4
37059: PUSH
37060: LD_VAR 0 5
37064: PPUSH
37065: LD_INT 3
37067: PPUSH
37068: CALL_OW 259
37072: PUSH
37073: LD_VAR 0 5
37077: PPUSH
37078: CALL_OW 432
37082: MINUS
37083: GREATEREQUAL
37084: IFFALSE 37102
// mech := result [ i ] ;
37086: LD_ADDR_VAR 0 5
37090: PUSH
37091: LD_VAR 0 2
37095: PUSH
37096: LD_VAR 0 3
37100: ARRAY
37101: ST_TO_ADDR
// end ;
37102: GO 37011
37104: POP
37105: POP
// end ; ComLinkTo ( vehicle , mech ) ;
37106: LD_VAR 0 1
37110: PPUSH
37111: LD_VAR 0 5
37115: PPUSH
37116: CALL_OW 135
// end ;
37120: LD_VAR 0 2
37124: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
37125: LD_INT 0
37127: PPUSH
37128: PPUSH
37129: PPUSH
37130: PPUSH
37131: PPUSH
37132: PPUSH
37133: PPUSH
37134: PPUSH
37135: PPUSH
37136: PPUSH
37137: PPUSH
37138: PPUSH
37139: PPUSH
// result := [ ] ;
37140: LD_ADDR_VAR 0 7
37144: PUSH
37145: EMPTY
37146: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
37147: LD_VAR 0 1
37151: PPUSH
37152: CALL_OW 266
37156: PUSH
37157: LD_INT 0
37159: PUSH
37160: LD_INT 1
37162: PUSH
37163: EMPTY
37164: LIST
37165: LIST
37166: IN
37167: NOT
37168: IFFALSE 37172
// exit ;
37170: GO 38806
// if name then
37172: LD_VAR 0 3
37176: IFFALSE 37192
// SetBName ( base_dep , name ) ;
37178: LD_VAR 0 1
37182: PPUSH
37183: LD_VAR 0 3
37187: PPUSH
37188: CALL_OW 500
// base := GetBase ( base_dep ) ;
37192: LD_ADDR_VAR 0 15
37196: PUSH
37197: LD_VAR 0 1
37201: PPUSH
37202: CALL_OW 274
37206: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
37207: LD_ADDR_VAR 0 16
37211: PUSH
37212: LD_VAR 0 1
37216: PPUSH
37217: CALL_OW 255
37221: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
37222: LD_ADDR_VAR 0 17
37226: PUSH
37227: LD_VAR 0 1
37231: PPUSH
37232: CALL_OW 248
37236: ST_TO_ADDR
// if sources then
37237: LD_VAR 0 5
37241: IFFALSE 37288
// for i = 1 to 3 do
37243: LD_ADDR_VAR 0 8
37247: PUSH
37248: DOUBLE
37249: LD_INT 1
37251: DEC
37252: ST_TO_ADDR
37253: LD_INT 3
37255: PUSH
37256: FOR_TO
37257: IFFALSE 37286
// AddResourceType ( base , i , sources [ i ] ) ;
37259: LD_VAR 0 15
37263: PPUSH
37264: LD_VAR 0 8
37268: PPUSH
37269: LD_VAR 0 5
37273: PUSH
37274: LD_VAR 0 8
37278: ARRAY
37279: PPUSH
37280: CALL_OW 276
37284: GO 37256
37286: POP
37287: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
37288: LD_ADDR_VAR 0 18
37292: PUSH
37293: LD_VAR 0 15
37297: PPUSH
37298: LD_VAR 0 2
37302: PPUSH
37303: LD_INT 1
37305: PPUSH
37306: CALL 36549 0 3
37310: ST_TO_ADDR
// InitHc ;
37311: CALL_OW 19
// InitUc ;
37315: CALL_OW 18
// uc_side := side ;
37319: LD_ADDR_OWVAR 20
37323: PUSH
37324: LD_VAR 0 16
37328: ST_TO_ADDR
// uc_nation := nation ;
37329: LD_ADDR_OWVAR 21
37333: PUSH
37334: LD_VAR 0 17
37338: ST_TO_ADDR
// if buildings then
37339: LD_VAR 0 18
37343: IFFALSE 38665
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
37345: LD_ADDR_VAR 0 19
37349: PUSH
37350: LD_VAR 0 18
37354: PPUSH
37355: LD_INT 2
37357: PUSH
37358: LD_INT 30
37360: PUSH
37361: LD_INT 29
37363: PUSH
37364: EMPTY
37365: LIST
37366: LIST
37367: PUSH
37368: LD_INT 30
37370: PUSH
37371: LD_INT 30
37373: PUSH
37374: EMPTY
37375: LIST
37376: LIST
37377: PUSH
37378: EMPTY
37379: LIST
37380: LIST
37381: LIST
37382: PPUSH
37383: CALL_OW 72
37387: ST_TO_ADDR
// if tmp then
37388: LD_VAR 0 19
37392: IFFALSE 37440
// for i in tmp do
37394: LD_ADDR_VAR 0 8
37398: PUSH
37399: LD_VAR 0 19
37403: PUSH
37404: FOR_IN
37405: IFFALSE 37438
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
37407: LD_VAR 0 8
37411: PPUSH
37412: CALL_OW 250
37416: PPUSH
37417: LD_VAR 0 8
37421: PPUSH
37422: CALL_OW 251
37426: PPUSH
37427: LD_VAR 0 16
37431: PPUSH
37432: CALL_OW 441
37436: GO 37404
37438: POP
37439: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
37440: LD_VAR 0 18
37444: PPUSH
37445: LD_INT 2
37447: PUSH
37448: LD_INT 30
37450: PUSH
37451: LD_INT 32
37453: PUSH
37454: EMPTY
37455: LIST
37456: LIST
37457: PUSH
37458: LD_INT 30
37460: PUSH
37461: LD_INT 33
37463: PUSH
37464: EMPTY
37465: LIST
37466: LIST
37467: PUSH
37468: EMPTY
37469: LIST
37470: LIST
37471: LIST
37472: PPUSH
37473: CALL_OW 72
37477: IFFALSE 37565
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
37479: LD_ADDR_VAR 0 8
37483: PUSH
37484: LD_VAR 0 18
37488: PPUSH
37489: LD_INT 2
37491: PUSH
37492: LD_INT 30
37494: PUSH
37495: LD_INT 32
37497: PUSH
37498: EMPTY
37499: LIST
37500: LIST
37501: PUSH
37502: LD_INT 30
37504: PUSH
37505: LD_INT 33
37507: PUSH
37508: EMPTY
37509: LIST
37510: LIST
37511: PUSH
37512: EMPTY
37513: LIST
37514: LIST
37515: LIST
37516: PPUSH
37517: CALL_OW 72
37521: PUSH
37522: FOR_IN
37523: IFFALSE 37563
// begin if not GetBWeapon ( i ) then
37525: LD_VAR 0 8
37529: PPUSH
37530: CALL_OW 269
37534: NOT
37535: IFFALSE 37561
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
37537: LD_VAR 0 8
37541: PPUSH
37542: LD_VAR 0 8
37546: PPUSH
37547: LD_VAR 0 2
37551: PPUSH
37552: CALL 38811 0 2
37556: PPUSH
37557: CALL_OW 431
// end ;
37561: GO 37522
37563: POP
37564: POP
// end ; for i = 1 to personel do
37565: LD_ADDR_VAR 0 8
37569: PUSH
37570: DOUBLE
37571: LD_INT 1
37573: DEC
37574: ST_TO_ADDR
37575: LD_VAR 0 6
37579: PUSH
37580: FOR_TO
37581: IFFALSE 38645
// begin if i > 4 then
37583: LD_VAR 0 8
37587: PUSH
37588: LD_INT 4
37590: GREATER
37591: IFFALSE 37595
// break ;
37593: GO 38645
// case i of 1 :
37595: LD_VAR 0 8
37599: PUSH
37600: LD_INT 1
37602: DOUBLE
37603: EQUAL
37604: IFTRUE 37608
37606: GO 37688
37608: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
37609: LD_ADDR_VAR 0 12
37613: PUSH
37614: LD_VAR 0 18
37618: PPUSH
37619: LD_INT 22
37621: PUSH
37622: LD_VAR 0 16
37626: PUSH
37627: EMPTY
37628: LIST
37629: LIST
37630: PUSH
37631: LD_INT 58
37633: PUSH
37634: EMPTY
37635: LIST
37636: PUSH
37637: LD_INT 2
37639: PUSH
37640: LD_INT 30
37642: PUSH
37643: LD_INT 32
37645: PUSH
37646: EMPTY
37647: LIST
37648: LIST
37649: PUSH
37650: LD_INT 30
37652: PUSH
37653: LD_INT 4
37655: PUSH
37656: EMPTY
37657: LIST
37658: LIST
37659: PUSH
37660: LD_INT 30
37662: PUSH
37663: LD_INT 5
37665: PUSH
37666: EMPTY
37667: LIST
37668: LIST
37669: PUSH
37670: EMPTY
37671: LIST
37672: LIST
37673: LIST
37674: LIST
37675: PUSH
37676: EMPTY
37677: LIST
37678: LIST
37679: LIST
37680: PPUSH
37681: CALL_OW 72
37685: ST_TO_ADDR
37686: GO 37910
37688: LD_INT 2
37690: DOUBLE
37691: EQUAL
37692: IFTRUE 37696
37694: GO 37758
37696: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
37697: LD_ADDR_VAR 0 12
37701: PUSH
37702: LD_VAR 0 18
37706: PPUSH
37707: LD_INT 22
37709: PUSH
37710: LD_VAR 0 16
37714: PUSH
37715: EMPTY
37716: LIST
37717: LIST
37718: PUSH
37719: LD_INT 2
37721: PUSH
37722: LD_INT 30
37724: PUSH
37725: LD_INT 0
37727: PUSH
37728: EMPTY
37729: LIST
37730: LIST
37731: PUSH
37732: LD_INT 30
37734: PUSH
37735: LD_INT 1
37737: PUSH
37738: EMPTY
37739: LIST
37740: LIST
37741: PUSH
37742: EMPTY
37743: LIST
37744: LIST
37745: LIST
37746: PUSH
37747: EMPTY
37748: LIST
37749: LIST
37750: PPUSH
37751: CALL_OW 72
37755: ST_TO_ADDR
37756: GO 37910
37758: LD_INT 3
37760: DOUBLE
37761: EQUAL
37762: IFTRUE 37766
37764: GO 37828
37766: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
37767: LD_ADDR_VAR 0 12
37771: PUSH
37772: LD_VAR 0 18
37776: PPUSH
37777: LD_INT 22
37779: PUSH
37780: LD_VAR 0 16
37784: PUSH
37785: EMPTY
37786: LIST
37787: LIST
37788: PUSH
37789: LD_INT 2
37791: PUSH
37792: LD_INT 30
37794: PUSH
37795: LD_INT 2
37797: PUSH
37798: EMPTY
37799: LIST
37800: LIST
37801: PUSH
37802: LD_INT 30
37804: PUSH
37805: LD_INT 3
37807: PUSH
37808: EMPTY
37809: LIST
37810: LIST
37811: PUSH
37812: EMPTY
37813: LIST
37814: LIST
37815: LIST
37816: PUSH
37817: EMPTY
37818: LIST
37819: LIST
37820: PPUSH
37821: CALL_OW 72
37825: ST_TO_ADDR
37826: GO 37910
37828: LD_INT 4
37830: DOUBLE
37831: EQUAL
37832: IFTRUE 37836
37834: GO 37909
37836: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
37837: LD_ADDR_VAR 0 12
37841: PUSH
37842: LD_VAR 0 18
37846: PPUSH
37847: LD_INT 22
37849: PUSH
37850: LD_VAR 0 16
37854: PUSH
37855: EMPTY
37856: LIST
37857: LIST
37858: PUSH
37859: LD_INT 2
37861: PUSH
37862: LD_INT 30
37864: PUSH
37865: LD_INT 6
37867: PUSH
37868: EMPTY
37869: LIST
37870: LIST
37871: PUSH
37872: LD_INT 30
37874: PUSH
37875: LD_INT 7
37877: PUSH
37878: EMPTY
37879: LIST
37880: LIST
37881: PUSH
37882: LD_INT 30
37884: PUSH
37885: LD_INT 8
37887: PUSH
37888: EMPTY
37889: LIST
37890: LIST
37891: PUSH
37892: EMPTY
37893: LIST
37894: LIST
37895: LIST
37896: LIST
37897: PUSH
37898: EMPTY
37899: LIST
37900: LIST
37901: PPUSH
37902: CALL_OW 72
37906: ST_TO_ADDR
37907: GO 37910
37909: POP
// if i = 1 then
37910: LD_VAR 0 8
37914: PUSH
37915: LD_INT 1
37917: EQUAL
37918: IFFALSE 38029
// begin tmp := [ ] ;
37920: LD_ADDR_VAR 0 19
37924: PUSH
37925: EMPTY
37926: ST_TO_ADDR
// for j in f do
37927: LD_ADDR_VAR 0 9
37931: PUSH
37932: LD_VAR 0 12
37936: PUSH
37937: FOR_IN
37938: IFFALSE 38011
// if GetBType ( j ) = b_bunker then
37940: LD_VAR 0 9
37944: PPUSH
37945: CALL_OW 266
37949: PUSH
37950: LD_INT 32
37952: EQUAL
37953: IFFALSE 37980
// tmp := Insert ( tmp , 1 , j ) else
37955: LD_ADDR_VAR 0 19
37959: PUSH
37960: LD_VAR 0 19
37964: PPUSH
37965: LD_INT 1
37967: PPUSH
37968: LD_VAR 0 9
37972: PPUSH
37973: CALL_OW 2
37977: ST_TO_ADDR
37978: GO 38009
// tmp := Insert ( tmp , tmp + 1 , j ) ;
37980: LD_ADDR_VAR 0 19
37984: PUSH
37985: LD_VAR 0 19
37989: PPUSH
37990: LD_VAR 0 19
37994: PUSH
37995: LD_INT 1
37997: PLUS
37998: PPUSH
37999: LD_VAR 0 9
38003: PPUSH
38004: CALL_OW 2
38008: ST_TO_ADDR
38009: GO 37937
38011: POP
38012: POP
// if tmp then
38013: LD_VAR 0 19
38017: IFFALSE 38029
// f := tmp ;
38019: LD_ADDR_VAR 0 12
38023: PUSH
38024: LD_VAR 0 19
38028: ST_TO_ADDR
// end ; x := personel [ i ] ;
38029: LD_ADDR_VAR 0 13
38033: PUSH
38034: LD_VAR 0 6
38038: PUSH
38039: LD_VAR 0 8
38043: ARRAY
38044: ST_TO_ADDR
// if x = - 1 then
38045: LD_VAR 0 13
38049: PUSH
38050: LD_INT 1
38052: NEG
38053: EQUAL
38054: IFFALSE 38263
// begin for j in f do
38056: LD_ADDR_VAR 0 9
38060: PUSH
38061: LD_VAR 0 12
38065: PUSH
38066: FOR_IN
38067: IFFALSE 38259
// repeat InitHc ;
38069: CALL_OW 19
// if GetBType ( j ) = b_barracks then
38073: LD_VAR 0 9
38077: PPUSH
38078: CALL_OW 266
38082: PUSH
38083: LD_INT 5
38085: EQUAL
38086: IFFALSE 38156
// begin if UnitsInside ( j ) < 3 then
38088: LD_VAR 0 9
38092: PPUSH
38093: CALL_OW 313
38097: PUSH
38098: LD_INT 3
38100: LESS
38101: IFFALSE 38137
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
38103: LD_INT 0
38105: PPUSH
38106: LD_INT 5
38108: PUSH
38109: LD_INT 8
38111: PUSH
38112: LD_INT 9
38114: PUSH
38115: EMPTY
38116: LIST
38117: LIST
38118: LIST
38119: PUSH
38120: LD_VAR 0 17
38124: ARRAY
38125: PPUSH
38126: LD_VAR 0 4
38130: PPUSH
38131: CALL_OW 380
38135: GO 38154
// PrepareHuman ( false , i , skill ) ;
38137: LD_INT 0
38139: PPUSH
38140: LD_VAR 0 8
38144: PPUSH
38145: LD_VAR 0 4
38149: PPUSH
38150: CALL_OW 380
// end else
38154: GO 38173
// PrepareHuman ( false , i , skill ) ;
38156: LD_INT 0
38158: PPUSH
38159: LD_VAR 0 8
38163: PPUSH
38164: LD_VAR 0 4
38168: PPUSH
38169: CALL_OW 380
// un := CreateHuman ;
38173: LD_ADDR_VAR 0 14
38177: PUSH
38178: CALL_OW 44
38182: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
38183: LD_ADDR_VAR 0 7
38187: PUSH
38188: LD_VAR 0 7
38192: PPUSH
38193: LD_INT 1
38195: PPUSH
38196: LD_VAR 0 14
38200: PPUSH
38201: CALL_OW 2
38205: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
38206: LD_VAR 0 14
38210: PPUSH
38211: LD_VAR 0 9
38215: PPUSH
38216: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
38220: LD_VAR 0 9
38224: PPUSH
38225: CALL_OW 313
38229: PUSH
38230: LD_INT 6
38232: EQUAL
38233: PUSH
38234: LD_VAR 0 9
38238: PPUSH
38239: CALL_OW 266
38243: PUSH
38244: LD_INT 32
38246: PUSH
38247: LD_INT 31
38249: PUSH
38250: EMPTY
38251: LIST
38252: LIST
38253: IN
38254: OR
38255: IFFALSE 38069
38257: GO 38066
38259: POP
38260: POP
// end else
38261: GO 38643
// for j = 1 to x do
38263: LD_ADDR_VAR 0 9
38267: PUSH
38268: DOUBLE
38269: LD_INT 1
38271: DEC
38272: ST_TO_ADDR
38273: LD_VAR 0 13
38277: PUSH
38278: FOR_TO
38279: IFFALSE 38641
// begin InitHc ;
38281: CALL_OW 19
// if not f then
38285: LD_VAR 0 12
38289: NOT
38290: IFFALSE 38379
// begin PrepareHuman ( false , i , skill ) ;
38292: LD_INT 0
38294: PPUSH
38295: LD_VAR 0 8
38299: PPUSH
38300: LD_VAR 0 4
38304: PPUSH
38305: CALL_OW 380
// un := CreateHuman ;
38309: LD_ADDR_VAR 0 14
38313: PUSH
38314: CALL_OW 44
38318: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
38319: LD_ADDR_VAR 0 7
38323: PUSH
38324: LD_VAR 0 7
38328: PPUSH
38329: LD_INT 1
38331: PPUSH
38332: LD_VAR 0 14
38336: PPUSH
38337: CALL_OW 2
38341: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
38342: LD_VAR 0 14
38346: PPUSH
38347: LD_VAR 0 1
38351: PPUSH
38352: CALL_OW 250
38356: PPUSH
38357: LD_VAR 0 1
38361: PPUSH
38362: CALL_OW 251
38366: PPUSH
38367: LD_INT 10
38369: PPUSH
38370: LD_INT 0
38372: PPUSH
38373: CALL_OW 50
// continue ;
38377: GO 38278
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
38379: LD_VAR 0 12
38383: PUSH
38384: LD_INT 1
38386: ARRAY
38387: PPUSH
38388: CALL_OW 313
38392: PUSH
38393: LD_VAR 0 12
38397: PUSH
38398: LD_INT 1
38400: ARRAY
38401: PPUSH
38402: CALL_OW 266
38406: PUSH
38407: LD_INT 32
38409: PUSH
38410: LD_INT 31
38412: PUSH
38413: EMPTY
38414: LIST
38415: LIST
38416: IN
38417: AND
38418: PUSH
38419: LD_VAR 0 12
38423: PUSH
38424: LD_INT 1
38426: ARRAY
38427: PPUSH
38428: CALL_OW 313
38432: PUSH
38433: LD_INT 6
38435: EQUAL
38436: OR
38437: IFFALSE 38457
// f := Delete ( f , 1 ) ;
38439: LD_ADDR_VAR 0 12
38443: PUSH
38444: LD_VAR 0 12
38448: PPUSH
38449: LD_INT 1
38451: PPUSH
38452: CALL_OW 3
38456: ST_TO_ADDR
// if not f then
38457: LD_VAR 0 12
38461: NOT
38462: IFFALSE 38480
// begin x := x + 2 ;
38464: LD_ADDR_VAR 0 13
38468: PUSH
38469: LD_VAR 0 13
38473: PUSH
38474: LD_INT 2
38476: PLUS
38477: ST_TO_ADDR
// continue ;
38478: GO 38278
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
38480: LD_VAR 0 12
38484: PUSH
38485: LD_INT 1
38487: ARRAY
38488: PPUSH
38489: CALL_OW 266
38493: PUSH
38494: LD_INT 5
38496: EQUAL
38497: IFFALSE 38571
// begin if UnitsInside ( f [ 1 ] ) < 3 then
38499: LD_VAR 0 12
38503: PUSH
38504: LD_INT 1
38506: ARRAY
38507: PPUSH
38508: CALL_OW 313
38512: PUSH
38513: LD_INT 3
38515: LESS
38516: IFFALSE 38552
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
38518: LD_INT 0
38520: PPUSH
38521: LD_INT 5
38523: PUSH
38524: LD_INT 8
38526: PUSH
38527: LD_INT 9
38529: PUSH
38530: EMPTY
38531: LIST
38532: LIST
38533: LIST
38534: PUSH
38535: LD_VAR 0 17
38539: ARRAY
38540: PPUSH
38541: LD_VAR 0 4
38545: PPUSH
38546: CALL_OW 380
38550: GO 38569
// PrepareHuman ( false , i , skill ) ;
38552: LD_INT 0
38554: PPUSH
38555: LD_VAR 0 8
38559: PPUSH
38560: LD_VAR 0 4
38564: PPUSH
38565: CALL_OW 380
// end else
38569: GO 38588
// PrepareHuman ( false , i , skill ) ;
38571: LD_INT 0
38573: PPUSH
38574: LD_VAR 0 8
38578: PPUSH
38579: LD_VAR 0 4
38583: PPUSH
38584: CALL_OW 380
// un := CreateHuman ;
38588: LD_ADDR_VAR 0 14
38592: PUSH
38593: CALL_OW 44
38597: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
38598: LD_ADDR_VAR 0 7
38602: PUSH
38603: LD_VAR 0 7
38607: PPUSH
38608: LD_INT 1
38610: PPUSH
38611: LD_VAR 0 14
38615: PPUSH
38616: CALL_OW 2
38620: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
38621: LD_VAR 0 14
38625: PPUSH
38626: LD_VAR 0 12
38630: PUSH
38631: LD_INT 1
38633: ARRAY
38634: PPUSH
38635: CALL_OW 52
// end ;
38639: GO 38278
38641: POP
38642: POP
// end ;
38643: GO 37580
38645: POP
38646: POP
// result := result ^ buildings ;
38647: LD_ADDR_VAR 0 7
38651: PUSH
38652: LD_VAR 0 7
38656: PUSH
38657: LD_VAR 0 18
38661: ADD
38662: ST_TO_ADDR
// end else
38663: GO 38806
// begin for i = 1 to personel do
38665: LD_ADDR_VAR 0 8
38669: PUSH
38670: DOUBLE
38671: LD_INT 1
38673: DEC
38674: ST_TO_ADDR
38675: LD_VAR 0 6
38679: PUSH
38680: FOR_TO
38681: IFFALSE 38804
// begin if i > 4 then
38683: LD_VAR 0 8
38687: PUSH
38688: LD_INT 4
38690: GREATER
38691: IFFALSE 38695
// break ;
38693: GO 38804
// x := personel [ i ] ;
38695: LD_ADDR_VAR 0 13
38699: PUSH
38700: LD_VAR 0 6
38704: PUSH
38705: LD_VAR 0 8
38709: ARRAY
38710: ST_TO_ADDR
// if x = - 1 then
38711: LD_VAR 0 13
38715: PUSH
38716: LD_INT 1
38718: NEG
38719: EQUAL
38720: IFFALSE 38724
// continue ;
38722: GO 38680
// PrepareHuman ( false , i , skill ) ;
38724: LD_INT 0
38726: PPUSH
38727: LD_VAR 0 8
38731: PPUSH
38732: LD_VAR 0 4
38736: PPUSH
38737: CALL_OW 380
// un := CreateHuman ;
38741: LD_ADDR_VAR 0 14
38745: PUSH
38746: CALL_OW 44
38750: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
38751: LD_VAR 0 14
38755: PPUSH
38756: LD_VAR 0 1
38760: PPUSH
38761: CALL_OW 250
38765: PPUSH
38766: LD_VAR 0 1
38770: PPUSH
38771: CALL_OW 251
38775: PPUSH
38776: LD_INT 10
38778: PPUSH
38779: LD_INT 0
38781: PPUSH
38782: CALL_OW 50
// result := result ^ un ;
38786: LD_ADDR_VAR 0 7
38790: PUSH
38791: LD_VAR 0 7
38795: PUSH
38796: LD_VAR 0 14
38800: ADD
38801: ST_TO_ADDR
// end ;
38802: GO 38680
38804: POP
38805: POP
// end ; end ;
38806: LD_VAR 0 7
38810: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
38811: LD_INT 0
38813: PPUSH
38814: PPUSH
38815: PPUSH
38816: PPUSH
38817: PPUSH
38818: PPUSH
38819: PPUSH
38820: PPUSH
38821: PPUSH
38822: PPUSH
38823: PPUSH
38824: PPUSH
38825: PPUSH
38826: PPUSH
38827: PPUSH
38828: PPUSH
// result := false ;
38829: LD_ADDR_VAR 0 3
38833: PUSH
38834: LD_INT 0
38836: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
38837: LD_VAR 0 1
38841: NOT
38842: PUSH
38843: LD_VAR 0 1
38847: PPUSH
38848: CALL_OW 266
38852: PUSH
38853: LD_INT 32
38855: PUSH
38856: LD_INT 33
38858: PUSH
38859: EMPTY
38860: LIST
38861: LIST
38862: IN
38863: NOT
38864: OR
38865: IFFALSE 38869
// exit ;
38867: GO 39978
// nat := GetNation ( tower ) ;
38869: LD_ADDR_VAR 0 12
38873: PUSH
38874: LD_VAR 0 1
38878: PPUSH
38879: CALL_OW 248
38883: ST_TO_ADDR
// side := GetSide ( tower ) ;
38884: LD_ADDR_VAR 0 16
38888: PUSH
38889: LD_VAR 0 1
38893: PPUSH
38894: CALL_OW 255
38898: ST_TO_ADDR
// x := GetX ( tower ) ;
38899: LD_ADDR_VAR 0 10
38903: PUSH
38904: LD_VAR 0 1
38908: PPUSH
38909: CALL_OW 250
38913: ST_TO_ADDR
// y := GetY ( tower ) ;
38914: LD_ADDR_VAR 0 11
38918: PUSH
38919: LD_VAR 0 1
38923: PPUSH
38924: CALL_OW 251
38928: ST_TO_ADDR
// if not x or not y then
38929: LD_VAR 0 10
38933: NOT
38934: PUSH
38935: LD_VAR 0 11
38939: NOT
38940: OR
38941: IFFALSE 38945
// exit ;
38943: GO 39978
// weapon := 0 ;
38945: LD_ADDR_VAR 0 18
38949: PUSH
38950: LD_INT 0
38952: ST_TO_ADDR
// fac_list := [ ] ;
38953: LD_ADDR_VAR 0 17
38957: PUSH
38958: EMPTY
38959: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
38960: LD_ADDR_VAR 0 6
38964: PUSH
38965: LD_VAR 0 1
38969: PPUSH
38970: CALL_OW 274
38974: PPUSH
38975: LD_VAR 0 2
38979: PPUSH
38980: LD_INT 0
38982: PPUSH
38983: CALL 36549 0 3
38987: PPUSH
38988: LD_INT 30
38990: PUSH
38991: LD_INT 3
38993: PUSH
38994: EMPTY
38995: LIST
38996: LIST
38997: PPUSH
38998: CALL_OW 72
39002: ST_TO_ADDR
// if not factories then
39003: LD_VAR 0 6
39007: NOT
39008: IFFALSE 39012
// exit ;
39010: GO 39978
// for i in factories do
39012: LD_ADDR_VAR 0 8
39016: PUSH
39017: LD_VAR 0 6
39021: PUSH
39022: FOR_IN
39023: IFFALSE 39048
// fac_list := fac_list union AvailableWeaponList ( i ) ;
39025: LD_ADDR_VAR 0 17
39029: PUSH
39030: LD_VAR 0 17
39034: PUSH
39035: LD_VAR 0 8
39039: PPUSH
39040: CALL_OW 478
39044: UNION
39045: ST_TO_ADDR
39046: GO 39022
39048: POP
39049: POP
// if not fac_list then
39050: LD_VAR 0 17
39054: NOT
39055: IFFALSE 39059
// exit ;
39057: GO 39978
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
39059: LD_ADDR_VAR 0 5
39063: PUSH
39064: LD_INT 4
39066: PUSH
39067: LD_INT 5
39069: PUSH
39070: LD_INT 9
39072: PUSH
39073: LD_INT 10
39075: PUSH
39076: LD_INT 6
39078: PUSH
39079: LD_INT 7
39081: PUSH
39082: LD_INT 11
39084: PUSH
39085: EMPTY
39086: LIST
39087: LIST
39088: LIST
39089: LIST
39090: LIST
39091: LIST
39092: LIST
39093: PUSH
39094: LD_INT 27
39096: PUSH
39097: LD_INT 28
39099: PUSH
39100: LD_INT 26
39102: PUSH
39103: LD_INT 30
39105: PUSH
39106: EMPTY
39107: LIST
39108: LIST
39109: LIST
39110: LIST
39111: PUSH
39112: LD_INT 43
39114: PUSH
39115: LD_INT 44
39117: PUSH
39118: LD_INT 46
39120: PUSH
39121: LD_INT 45
39123: PUSH
39124: LD_INT 47
39126: PUSH
39127: LD_INT 49
39129: PUSH
39130: EMPTY
39131: LIST
39132: LIST
39133: LIST
39134: LIST
39135: LIST
39136: LIST
39137: PUSH
39138: EMPTY
39139: LIST
39140: LIST
39141: LIST
39142: PUSH
39143: LD_VAR 0 12
39147: ARRAY
39148: ST_TO_ADDR
// list := list isect fac_list ;
39149: LD_ADDR_VAR 0 5
39153: PUSH
39154: LD_VAR 0 5
39158: PUSH
39159: LD_VAR 0 17
39163: ISECT
39164: ST_TO_ADDR
// if not list then
39165: LD_VAR 0 5
39169: NOT
39170: IFFALSE 39174
// exit ;
39172: GO 39978
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
39174: LD_VAR 0 12
39178: PUSH
39179: LD_INT 3
39181: EQUAL
39182: PUSH
39183: LD_INT 49
39185: PUSH
39186: LD_VAR 0 5
39190: IN
39191: AND
39192: PUSH
39193: LD_INT 31
39195: PPUSH
39196: LD_VAR 0 16
39200: PPUSH
39201: CALL_OW 321
39205: PUSH
39206: LD_INT 2
39208: EQUAL
39209: AND
39210: IFFALSE 39270
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
39212: LD_INT 22
39214: PUSH
39215: LD_VAR 0 16
39219: PUSH
39220: EMPTY
39221: LIST
39222: LIST
39223: PUSH
39224: LD_INT 35
39226: PUSH
39227: LD_INT 49
39229: PUSH
39230: EMPTY
39231: LIST
39232: LIST
39233: PUSH
39234: LD_INT 91
39236: PUSH
39237: LD_VAR 0 1
39241: PUSH
39242: LD_INT 10
39244: PUSH
39245: EMPTY
39246: LIST
39247: LIST
39248: LIST
39249: PUSH
39250: EMPTY
39251: LIST
39252: LIST
39253: LIST
39254: PPUSH
39255: CALL_OW 69
39259: NOT
39260: IFFALSE 39270
// weapon := ru_time_lapser ;
39262: LD_ADDR_VAR 0 18
39266: PUSH
39267: LD_INT 49
39269: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
39270: LD_VAR 0 12
39274: PUSH
39275: LD_INT 1
39277: PUSH
39278: LD_INT 2
39280: PUSH
39281: EMPTY
39282: LIST
39283: LIST
39284: IN
39285: PUSH
39286: LD_INT 11
39288: PUSH
39289: LD_VAR 0 5
39293: IN
39294: PUSH
39295: LD_INT 30
39297: PUSH
39298: LD_VAR 0 5
39302: IN
39303: OR
39304: AND
39305: PUSH
39306: LD_INT 6
39308: PPUSH
39309: LD_VAR 0 16
39313: PPUSH
39314: CALL_OW 321
39318: PUSH
39319: LD_INT 2
39321: EQUAL
39322: AND
39323: IFFALSE 39488
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
39325: LD_INT 22
39327: PUSH
39328: LD_VAR 0 16
39332: PUSH
39333: EMPTY
39334: LIST
39335: LIST
39336: PUSH
39337: LD_INT 2
39339: PUSH
39340: LD_INT 35
39342: PUSH
39343: LD_INT 11
39345: PUSH
39346: EMPTY
39347: LIST
39348: LIST
39349: PUSH
39350: LD_INT 35
39352: PUSH
39353: LD_INT 30
39355: PUSH
39356: EMPTY
39357: LIST
39358: LIST
39359: PUSH
39360: EMPTY
39361: LIST
39362: LIST
39363: LIST
39364: PUSH
39365: LD_INT 91
39367: PUSH
39368: LD_VAR 0 1
39372: PUSH
39373: LD_INT 18
39375: PUSH
39376: EMPTY
39377: LIST
39378: LIST
39379: LIST
39380: PUSH
39381: EMPTY
39382: LIST
39383: LIST
39384: LIST
39385: PPUSH
39386: CALL_OW 69
39390: NOT
39391: PUSH
39392: LD_INT 22
39394: PUSH
39395: LD_VAR 0 16
39399: PUSH
39400: EMPTY
39401: LIST
39402: LIST
39403: PUSH
39404: LD_INT 2
39406: PUSH
39407: LD_INT 30
39409: PUSH
39410: LD_INT 32
39412: PUSH
39413: EMPTY
39414: LIST
39415: LIST
39416: PUSH
39417: LD_INT 30
39419: PUSH
39420: LD_INT 33
39422: PUSH
39423: EMPTY
39424: LIST
39425: LIST
39426: PUSH
39427: EMPTY
39428: LIST
39429: LIST
39430: LIST
39431: PUSH
39432: LD_INT 91
39434: PUSH
39435: LD_VAR 0 1
39439: PUSH
39440: LD_INT 12
39442: PUSH
39443: EMPTY
39444: LIST
39445: LIST
39446: LIST
39447: PUSH
39448: EMPTY
39449: LIST
39450: LIST
39451: LIST
39452: PUSH
39453: EMPTY
39454: LIST
39455: PPUSH
39456: CALL_OW 69
39460: PUSH
39461: LD_INT 2
39463: GREATER
39464: AND
39465: IFFALSE 39488
// weapon := [ us_radar , ar_radar ] [ nat ] ;
39467: LD_ADDR_VAR 0 18
39471: PUSH
39472: LD_INT 11
39474: PUSH
39475: LD_INT 30
39477: PUSH
39478: EMPTY
39479: LIST
39480: LIST
39481: PUSH
39482: LD_VAR 0 12
39486: ARRAY
39487: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
39488: LD_VAR 0 18
39492: NOT
39493: PUSH
39494: LD_INT 40
39496: PPUSH
39497: LD_VAR 0 16
39501: PPUSH
39502: CALL_OW 321
39506: PUSH
39507: LD_INT 2
39509: EQUAL
39510: AND
39511: PUSH
39512: LD_INT 7
39514: PUSH
39515: LD_VAR 0 5
39519: IN
39520: PUSH
39521: LD_INT 28
39523: PUSH
39524: LD_VAR 0 5
39528: IN
39529: OR
39530: PUSH
39531: LD_INT 45
39533: PUSH
39534: LD_VAR 0 5
39538: IN
39539: OR
39540: AND
39541: IFFALSE 39795
// begin hex := GetHexInfo ( x , y ) ;
39543: LD_ADDR_VAR 0 4
39547: PUSH
39548: LD_VAR 0 10
39552: PPUSH
39553: LD_VAR 0 11
39557: PPUSH
39558: CALL_OW 546
39562: ST_TO_ADDR
// if hex [ 1 ] then
39563: LD_VAR 0 4
39567: PUSH
39568: LD_INT 1
39570: ARRAY
39571: IFFALSE 39575
// exit ;
39573: GO 39978
// height := hex [ 2 ] ;
39575: LD_ADDR_VAR 0 15
39579: PUSH
39580: LD_VAR 0 4
39584: PUSH
39585: LD_INT 2
39587: ARRAY
39588: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
39589: LD_ADDR_VAR 0 14
39593: PUSH
39594: LD_INT 0
39596: PUSH
39597: LD_INT 2
39599: PUSH
39600: LD_INT 3
39602: PUSH
39603: LD_INT 5
39605: PUSH
39606: EMPTY
39607: LIST
39608: LIST
39609: LIST
39610: LIST
39611: ST_TO_ADDR
// for i in tmp do
39612: LD_ADDR_VAR 0 8
39616: PUSH
39617: LD_VAR 0 14
39621: PUSH
39622: FOR_IN
39623: IFFALSE 39793
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
39625: LD_ADDR_VAR 0 9
39629: PUSH
39630: LD_VAR 0 10
39634: PPUSH
39635: LD_VAR 0 8
39639: PPUSH
39640: LD_INT 5
39642: PPUSH
39643: CALL_OW 272
39647: PUSH
39648: LD_VAR 0 11
39652: PPUSH
39653: LD_VAR 0 8
39657: PPUSH
39658: LD_INT 5
39660: PPUSH
39661: CALL_OW 273
39665: PUSH
39666: EMPTY
39667: LIST
39668: LIST
39669: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
39670: LD_VAR 0 9
39674: PUSH
39675: LD_INT 1
39677: ARRAY
39678: PPUSH
39679: LD_VAR 0 9
39683: PUSH
39684: LD_INT 2
39686: ARRAY
39687: PPUSH
39688: CALL_OW 488
39692: IFFALSE 39791
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
39694: LD_ADDR_VAR 0 4
39698: PUSH
39699: LD_VAR 0 9
39703: PUSH
39704: LD_INT 1
39706: ARRAY
39707: PPUSH
39708: LD_VAR 0 9
39712: PUSH
39713: LD_INT 2
39715: ARRAY
39716: PPUSH
39717: CALL_OW 546
39721: ST_TO_ADDR
// if hex [ 1 ] then
39722: LD_VAR 0 4
39726: PUSH
39727: LD_INT 1
39729: ARRAY
39730: IFFALSE 39734
// continue ;
39732: GO 39622
// h := hex [ 2 ] ;
39734: LD_ADDR_VAR 0 13
39738: PUSH
39739: LD_VAR 0 4
39743: PUSH
39744: LD_INT 2
39746: ARRAY
39747: ST_TO_ADDR
// if h + 7 < height then
39748: LD_VAR 0 13
39752: PUSH
39753: LD_INT 7
39755: PLUS
39756: PUSH
39757: LD_VAR 0 15
39761: LESS
39762: IFFALSE 39791
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
39764: LD_ADDR_VAR 0 18
39768: PUSH
39769: LD_INT 7
39771: PUSH
39772: LD_INT 28
39774: PUSH
39775: LD_INT 45
39777: PUSH
39778: EMPTY
39779: LIST
39780: LIST
39781: LIST
39782: PUSH
39783: LD_VAR 0 12
39787: ARRAY
39788: ST_TO_ADDR
// break ;
39789: GO 39793
// end ; end ; end ;
39791: GO 39622
39793: POP
39794: POP
// end ; if not weapon then
39795: LD_VAR 0 18
39799: NOT
39800: IFFALSE 39860
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
39802: LD_ADDR_VAR 0 5
39806: PUSH
39807: LD_VAR 0 5
39811: PUSH
39812: LD_INT 11
39814: PUSH
39815: LD_INT 30
39817: PUSH
39818: LD_INT 49
39820: PUSH
39821: EMPTY
39822: LIST
39823: LIST
39824: LIST
39825: DIFF
39826: ST_TO_ADDR
// if not list then
39827: LD_VAR 0 5
39831: NOT
39832: IFFALSE 39836
// exit ;
39834: GO 39978
// weapon := list [ rand ( 1 , list ) ] ;
39836: LD_ADDR_VAR 0 18
39840: PUSH
39841: LD_VAR 0 5
39845: PUSH
39846: LD_INT 1
39848: PPUSH
39849: LD_VAR 0 5
39853: PPUSH
39854: CALL_OW 12
39858: ARRAY
39859: ST_TO_ADDR
// end ; if weapon then
39860: LD_VAR 0 18
39864: IFFALSE 39978
// begin tmp := CostOfWeapon ( weapon ) ;
39866: LD_ADDR_VAR 0 14
39870: PUSH
39871: LD_VAR 0 18
39875: PPUSH
39876: CALL_OW 451
39880: ST_TO_ADDR
// j := GetBase ( tower ) ;
39881: LD_ADDR_VAR 0 9
39885: PUSH
39886: LD_VAR 0 1
39890: PPUSH
39891: CALL_OW 274
39895: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
39896: LD_VAR 0 9
39900: PPUSH
39901: LD_INT 1
39903: PPUSH
39904: CALL_OW 275
39908: PUSH
39909: LD_VAR 0 14
39913: PUSH
39914: LD_INT 1
39916: ARRAY
39917: GREATEREQUAL
39918: PUSH
39919: LD_VAR 0 9
39923: PPUSH
39924: LD_INT 2
39926: PPUSH
39927: CALL_OW 275
39931: PUSH
39932: LD_VAR 0 14
39936: PUSH
39937: LD_INT 2
39939: ARRAY
39940: GREATEREQUAL
39941: AND
39942: PUSH
39943: LD_VAR 0 9
39947: PPUSH
39948: LD_INT 3
39950: PPUSH
39951: CALL_OW 275
39955: PUSH
39956: LD_VAR 0 14
39960: PUSH
39961: LD_INT 3
39963: ARRAY
39964: GREATEREQUAL
39965: AND
39966: IFFALSE 39978
// result := weapon ;
39968: LD_ADDR_VAR 0 3
39972: PUSH
39973: LD_VAR 0 18
39977: ST_TO_ADDR
// end ; end ;
39978: LD_VAR 0 3
39982: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
39983: LD_INT 0
39985: PPUSH
39986: PPUSH
// result := true ;
39987: LD_ADDR_VAR 0 3
39991: PUSH
39992: LD_INT 1
39994: ST_TO_ADDR
// if array1 = array2 then
39995: LD_VAR 0 1
39999: PUSH
40000: LD_VAR 0 2
40004: EQUAL
40005: IFFALSE 40065
// begin for i = 1 to array1 do
40007: LD_ADDR_VAR 0 4
40011: PUSH
40012: DOUBLE
40013: LD_INT 1
40015: DEC
40016: ST_TO_ADDR
40017: LD_VAR 0 1
40021: PUSH
40022: FOR_TO
40023: IFFALSE 40061
// if array1 [ i ] <> array2 [ i ] then
40025: LD_VAR 0 1
40029: PUSH
40030: LD_VAR 0 4
40034: ARRAY
40035: PUSH
40036: LD_VAR 0 2
40040: PUSH
40041: LD_VAR 0 4
40045: ARRAY
40046: NONEQUAL
40047: IFFALSE 40059
// begin result := false ;
40049: LD_ADDR_VAR 0 3
40053: PUSH
40054: LD_INT 0
40056: ST_TO_ADDR
// break ;
40057: GO 40061
// end ;
40059: GO 40022
40061: POP
40062: POP
// end else
40063: GO 40073
// result := false ;
40065: LD_ADDR_VAR 0 3
40069: PUSH
40070: LD_INT 0
40072: ST_TO_ADDR
// end ;
40073: LD_VAR 0 3
40077: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
40078: LD_INT 0
40080: PPUSH
40081: PPUSH
// if not array1 or not array2 then
40082: LD_VAR 0 1
40086: NOT
40087: PUSH
40088: LD_VAR 0 2
40092: NOT
40093: OR
40094: IFFALSE 40098
// exit ;
40096: GO 40162
// result := true ;
40098: LD_ADDR_VAR 0 3
40102: PUSH
40103: LD_INT 1
40105: ST_TO_ADDR
// for i = 1 to array1 do
40106: LD_ADDR_VAR 0 4
40110: PUSH
40111: DOUBLE
40112: LD_INT 1
40114: DEC
40115: ST_TO_ADDR
40116: LD_VAR 0 1
40120: PUSH
40121: FOR_TO
40122: IFFALSE 40160
// if array1 [ i ] <> array2 [ i ] then
40124: LD_VAR 0 1
40128: PUSH
40129: LD_VAR 0 4
40133: ARRAY
40134: PUSH
40135: LD_VAR 0 2
40139: PUSH
40140: LD_VAR 0 4
40144: ARRAY
40145: NONEQUAL
40146: IFFALSE 40158
// begin result := false ;
40148: LD_ADDR_VAR 0 3
40152: PUSH
40153: LD_INT 0
40155: ST_TO_ADDR
// break ;
40156: GO 40160
// end ;
40158: GO 40121
40160: POP
40161: POP
// end ;
40162: LD_VAR 0 3
40166: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
40167: LD_INT 0
40169: PPUSH
40170: PPUSH
40171: PPUSH
// pom := GetBase ( fac ) ;
40172: LD_ADDR_VAR 0 5
40176: PUSH
40177: LD_VAR 0 1
40181: PPUSH
40182: CALL_OW 274
40186: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
40187: LD_ADDR_VAR 0 4
40191: PUSH
40192: LD_VAR 0 2
40196: PUSH
40197: LD_INT 1
40199: ARRAY
40200: PPUSH
40201: LD_VAR 0 2
40205: PUSH
40206: LD_INT 2
40208: ARRAY
40209: PPUSH
40210: LD_VAR 0 2
40214: PUSH
40215: LD_INT 3
40217: ARRAY
40218: PPUSH
40219: LD_VAR 0 2
40223: PUSH
40224: LD_INT 4
40226: ARRAY
40227: PPUSH
40228: CALL_OW 449
40232: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
40233: LD_ADDR_VAR 0 3
40237: PUSH
40238: LD_VAR 0 5
40242: PPUSH
40243: LD_INT 1
40245: PPUSH
40246: CALL_OW 275
40250: PUSH
40251: LD_VAR 0 4
40255: PUSH
40256: LD_INT 1
40258: ARRAY
40259: GREATEREQUAL
40260: PUSH
40261: LD_VAR 0 5
40265: PPUSH
40266: LD_INT 2
40268: PPUSH
40269: CALL_OW 275
40273: PUSH
40274: LD_VAR 0 4
40278: PUSH
40279: LD_INT 2
40281: ARRAY
40282: GREATEREQUAL
40283: AND
40284: PUSH
40285: LD_VAR 0 5
40289: PPUSH
40290: LD_INT 3
40292: PPUSH
40293: CALL_OW 275
40297: PUSH
40298: LD_VAR 0 4
40302: PUSH
40303: LD_INT 3
40305: ARRAY
40306: GREATEREQUAL
40307: AND
40308: ST_TO_ADDR
// end ;
40309: LD_VAR 0 3
40313: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
40314: LD_INT 0
40316: PPUSH
40317: PPUSH
40318: PPUSH
40319: PPUSH
// pom := GetBase ( building ) ;
40320: LD_ADDR_VAR 0 3
40324: PUSH
40325: LD_VAR 0 1
40329: PPUSH
40330: CALL_OW 274
40334: ST_TO_ADDR
// if not pom then
40335: LD_VAR 0 3
40339: NOT
40340: IFFALSE 40344
// exit ;
40342: GO 40514
// btype := GetBType ( building ) ;
40344: LD_ADDR_VAR 0 5
40348: PUSH
40349: LD_VAR 0 1
40353: PPUSH
40354: CALL_OW 266
40358: ST_TO_ADDR
// if btype = b_armoury then
40359: LD_VAR 0 5
40363: PUSH
40364: LD_INT 4
40366: EQUAL
40367: IFFALSE 40377
// btype := b_barracks ;
40369: LD_ADDR_VAR 0 5
40373: PUSH
40374: LD_INT 5
40376: ST_TO_ADDR
// if btype = b_depot then
40377: LD_VAR 0 5
40381: PUSH
40382: LD_INT 0
40384: EQUAL
40385: IFFALSE 40395
// btype := b_warehouse ;
40387: LD_ADDR_VAR 0 5
40391: PUSH
40392: LD_INT 1
40394: ST_TO_ADDR
// if btype = b_workshop then
40395: LD_VAR 0 5
40399: PUSH
40400: LD_INT 2
40402: EQUAL
40403: IFFALSE 40413
// btype := b_factory ;
40405: LD_ADDR_VAR 0 5
40409: PUSH
40410: LD_INT 3
40412: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
40413: LD_ADDR_VAR 0 4
40417: PUSH
40418: LD_VAR 0 5
40422: PPUSH
40423: LD_VAR 0 1
40427: PPUSH
40428: CALL_OW 248
40432: PPUSH
40433: CALL_OW 450
40437: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
40438: LD_ADDR_VAR 0 2
40442: PUSH
40443: LD_VAR 0 3
40447: PPUSH
40448: LD_INT 1
40450: PPUSH
40451: CALL_OW 275
40455: PUSH
40456: LD_VAR 0 4
40460: PUSH
40461: LD_INT 1
40463: ARRAY
40464: GREATEREQUAL
40465: PUSH
40466: LD_VAR 0 3
40470: PPUSH
40471: LD_INT 2
40473: PPUSH
40474: CALL_OW 275
40478: PUSH
40479: LD_VAR 0 4
40483: PUSH
40484: LD_INT 2
40486: ARRAY
40487: GREATEREQUAL
40488: AND
40489: PUSH
40490: LD_VAR 0 3
40494: PPUSH
40495: LD_INT 3
40497: PPUSH
40498: CALL_OW 275
40502: PUSH
40503: LD_VAR 0 4
40507: PUSH
40508: LD_INT 3
40510: ARRAY
40511: GREATEREQUAL
40512: AND
40513: ST_TO_ADDR
// end ;
40514: LD_VAR 0 2
40518: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
40519: LD_INT 0
40521: PPUSH
40522: PPUSH
40523: PPUSH
// pom := GetBase ( building ) ;
40524: LD_ADDR_VAR 0 4
40528: PUSH
40529: LD_VAR 0 1
40533: PPUSH
40534: CALL_OW 274
40538: ST_TO_ADDR
// if not pom then
40539: LD_VAR 0 4
40543: NOT
40544: IFFALSE 40548
// exit ;
40546: GO 40649
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
40548: LD_ADDR_VAR 0 5
40552: PUSH
40553: LD_VAR 0 2
40557: PPUSH
40558: LD_VAR 0 1
40562: PPUSH
40563: CALL_OW 248
40567: PPUSH
40568: CALL_OW 450
40572: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
40573: LD_ADDR_VAR 0 3
40577: PUSH
40578: LD_VAR 0 4
40582: PPUSH
40583: LD_INT 1
40585: PPUSH
40586: CALL_OW 275
40590: PUSH
40591: LD_VAR 0 5
40595: PUSH
40596: LD_INT 1
40598: ARRAY
40599: GREATEREQUAL
40600: PUSH
40601: LD_VAR 0 4
40605: PPUSH
40606: LD_INT 2
40608: PPUSH
40609: CALL_OW 275
40613: PUSH
40614: LD_VAR 0 5
40618: PUSH
40619: LD_INT 2
40621: ARRAY
40622: GREATEREQUAL
40623: AND
40624: PUSH
40625: LD_VAR 0 4
40629: PPUSH
40630: LD_INT 3
40632: PPUSH
40633: CALL_OW 275
40637: PUSH
40638: LD_VAR 0 5
40642: PUSH
40643: LD_INT 3
40645: ARRAY
40646: GREATEREQUAL
40647: AND
40648: ST_TO_ADDR
// end ;
40649: LD_VAR 0 3
40653: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
40654: LD_INT 0
40656: PPUSH
40657: PPUSH
40658: PPUSH
40659: PPUSH
40660: PPUSH
40661: PPUSH
40662: PPUSH
40663: PPUSH
40664: PPUSH
40665: PPUSH
40666: PPUSH
// result := false ;
40667: LD_ADDR_VAR 0 8
40671: PUSH
40672: LD_INT 0
40674: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
40675: LD_VAR 0 5
40679: NOT
40680: PUSH
40681: LD_VAR 0 1
40685: NOT
40686: OR
40687: PUSH
40688: LD_VAR 0 2
40692: NOT
40693: OR
40694: PUSH
40695: LD_VAR 0 3
40699: NOT
40700: OR
40701: IFFALSE 40705
// exit ;
40703: GO 41519
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
40705: LD_ADDR_VAR 0 14
40709: PUSH
40710: LD_VAR 0 1
40714: PPUSH
40715: LD_VAR 0 2
40719: PPUSH
40720: LD_VAR 0 3
40724: PPUSH
40725: LD_VAR 0 4
40729: PPUSH
40730: LD_VAR 0 5
40734: PUSH
40735: LD_INT 1
40737: ARRAY
40738: PPUSH
40739: CALL_OW 248
40743: PPUSH
40744: LD_INT 0
40746: PPUSH
40747: CALL 42772 0 6
40751: ST_TO_ADDR
// if not hexes then
40752: LD_VAR 0 14
40756: NOT
40757: IFFALSE 40761
// exit ;
40759: GO 41519
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
40761: LD_ADDR_VAR 0 17
40765: PUSH
40766: LD_VAR 0 5
40770: PPUSH
40771: LD_INT 22
40773: PUSH
40774: LD_VAR 0 13
40778: PPUSH
40779: CALL_OW 255
40783: PUSH
40784: EMPTY
40785: LIST
40786: LIST
40787: PUSH
40788: LD_INT 2
40790: PUSH
40791: LD_INT 30
40793: PUSH
40794: LD_INT 0
40796: PUSH
40797: EMPTY
40798: LIST
40799: LIST
40800: PUSH
40801: LD_INT 30
40803: PUSH
40804: LD_INT 1
40806: PUSH
40807: EMPTY
40808: LIST
40809: LIST
40810: PUSH
40811: EMPTY
40812: LIST
40813: LIST
40814: LIST
40815: PUSH
40816: EMPTY
40817: LIST
40818: LIST
40819: PPUSH
40820: CALL_OW 72
40824: ST_TO_ADDR
// for i = 1 to hexes do
40825: LD_ADDR_VAR 0 9
40829: PUSH
40830: DOUBLE
40831: LD_INT 1
40833: DEC
40834: ST_TO_ADDR
40835: LD_VAR 0 14
40839: PUSH
40840: FOR_TO
40841: IFFALSE 41517
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
40843: LD_ADDR_VAR 0 13
40847: PUSH
40848: LD_VAR 0 14
40852: PUSH
40853: LD_VAR 0 9
40857: ARRAY
40858: PUSH
40859: LD_INT 1
40861: ARRAY
40862: PPUSH
40863: LD_VAR 0 14
40867: PUSH
40868: LD_VAR 0 9
40872: ARRAY
40873: PUSH
40874: LD_INT 2
40876: ARRAY
40877: PPUSH
40878: CALL_OW 428
40882: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
40883: LD_VAR 0 14
40887: PUSH
40888: LD_VAR 0 9
40892: ARRAY
40893: PUSH
40894: LD_INT 1
40896: ARRAY
40897: PPUSH
40898: LD_VAR 0 14
40902: PUSH
40903: LD_VAR 0 9
40907: ARRAY
40908: PUSH
40909: LD_INT 2
40911: ARRAY
40912: PPUSH
40913: CALL_OW 351
40917: PUSH
40918: LD_VAR 0 14
40922: PUSH
40923: LD_VAR 0 9
40927: ARRAY
40928: PUSH
40929: LD_INT 1
40931: ARRAY
40932: PPUSH
40933: LD_VAR 0 14
40937: PUSH
40938: LD_VAR 0 9
40942: ARRAY
40943: PUSH
40944: LD_INT 2
40946: ARRAY
40947: PPUSH
40948: CALL_OW 488
40952: NOT
40953: OR
40954: PUSH
40955: LD_VAR 0 13
40959: PPUSH
40960: CALL_OW 247
40964: PUSH
40965: LD_INT 3
40967: EQUAL
40968: OR
40969: IFFALSE 40975
// exit ;
40971: POP
40972: POP
40973: GO 41519
// if not tmp then
40975: LD_VAR 0 13
40979: NOT
40980: IFFALSE 40984
// continue ;
40982: GO 40840
// result := true ;
40984: LD_ADDR_VAR 0 8
40988: PUSH
40989: LD_INT 1
40991: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
40992: LD_VAR 0 6
40996: PUSH
40997: LD_VAR 0 13
41001: PPUSH
41002: CALL_OW 247
41006: PUSH
41007: LD_INT 2
41009: EQUAL
41010: AND
41011: PUSH
41012: LD_VAR 0 13
41016: PPUSH
41017: CALL_OW 263
41021: PUSH
41022: LD_INT 1
41024: EQUAL
41025: AND
41026: IFFALSE 41190
// begin if IsDrivenBy ( tmp ) then
41028: LD_VAR 0 13
41032: PPUSH
41033: CALL_OW 311
41037: IFFALSE 41041
// continue ;
41039: GO 40840
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
41041: LD_VAR 0 6
41045: PPUSH
41046: LD_INT 3
41048: PUSH
41049: LD_INT 60
41051: PUSH
41052: EMPTY
41053: LIST
41054: PUSH
41055: EMPTY
41056: LIST
41057: LIST
41058: PUSH
41059: LD_INT 3
41061: PUSH
41062: LD_INT 55
41064: PUSH
41065: EMPTY
41066: LIST
41067: PUSH
41068: EMPTY
41069: LIST
41070: LIST
41071: PUSH
41072: EMPTY
41073: LIST
41074: LIST
41075: PPUSH
41076: CALL_OW 72
41080: IFFALSE 41188
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
41082: LD_ADDR_VAR 0 18
41086: PUSH
41087: LD_VAR 0 6
41091: PPUSH
41092: LD_INT 3
41094: PUSH
41095: LD_INT 60
41097: PUSH
41098: EMPTY
41099: LIST
41100: PUSH
41101: EMPTY
41102: LIST
41103: LIST
41104: PUSH
41105: LD_INT 3
41107: PUSH
41108: LD_INT 55
41110: PUSH
41111: EMPTY
41112: LIST
41113: PUSH
41114: EMPTY
41115: LIST
41116: LIST
41117: PUSH
41118: EMPTY
41119: LIST
41120: LIST
41121: PPUSH
41122: CALL_OW 72
41126: PUSH
41127: LD_INT 1
41129: ARRAY
41130: ST_TO_ADDR
// if IsInUnit ( driver ) then
41131: LD_VAR 0 18
41135: PPUSH
41136: CALL_OW 310
41140: IFFALSE 41151
// ComExit ( driver ) ;
41142: LD_VAR 0 18
41146: PPUSH
41147: CALL 66551 0 1
// AddComEnterUnit ( driver , tmp ) ;
41151: LD_VAR 0 18
41155: PPUSH
41156: LD_VAR 0 13
41160: PPUSH
41161: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
41165: LD_VAR 0 18
41169: PPUSH
41170: LD_VAR 0 7
41174: PPUSH
41175: CALL_OW 173
// AddComExitVehicle ( driver ) ;
41179: LD_VAR 0 18
41183: PPUSH
41184: CALL_OW 181
// end ; continue ;
41188: GO 40840
// end ; if not cleaners or not tmp in cleaners then
41190: LD_VAR 0 6
41194: NOT
41195: PUSH
41196: LD_VAR 0 13
41200: PUSH
41201: LD_VAR 0 6
41205: IN
41206: NOT
41207: OR
41208: IFFALSE 41515
// begin if dep then
41210: LD_VAR 0 17
41214: IFFALSE 41350
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
41216: LD_ADDR_VAR 0 16
41220: PUSH
41221: LD_VAR 0 17
41225: PUSH
41226: LD_INT 1
41228: ARRAY
41229: PPUSH
41230: CALL_OW 250
41234: PPUSH
41235: LD_VAR 0 17
41239: PUSH
41240: LD_INT 1
41242: ARRAY
41243: PPUSH
41244: CALL_OW 254
41248: PPUSH
41249: LD_INT 5
41251: PPUSH
41252: CALL_OW 272
41256: PUSH
41257: LD_VAR 0 17
41261: PUSH
41262: LD_INT 1
41264: ARRAY
41265: PPUSH
41266: CALL_OW 251
41270: PPUSH
41271: LD_VAR 0 17
41275: PUSH
41276: LD_INT 1
41278: ARRAY
41279: PPUSH
41280: CALL_OW 254
41284: PPUSH
41285: LD_INT 5
41287: PPUSH
41288: CALL_OW 273
41292: PUSH
41293: EMPTY
41294: LIST
41295: LIST
41296: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
41297: LD_VAR 0 16
41301: PUSH
41302: LD_INT 1
41304: ARRAY
41305: PPUSH
41306: LD_VAR 0 16
41310: PUSH
41311: LD_INT 2
41313: ARRAY
41314: PPUSH
41315: CALL_OW 488
41319: IFFALSE 41350
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
41321: LD_VAR 0 13
41325: PPUSH
41326: LD_VAR 0 16
41330: PUSH
41331: LD_INT 1
41333: ARRAY
41334: PPUSH
41335: LD_VAR 0 16
41339: PUSH
41340: LD_INT 2
41342: ARRAY
41343: PPUSH
41344: CALL_OW 111
// continue ;
41348: GO 40840
// end ; end ; r := GetDir ( tmp ) ;
41350: LD_ADDR_VAR 0 15
41354: PUSH
41355: LD_VAR 0 13
41359: PPUSH
41360: CALL_OW 254
41364: ST_TO_ADDR
// if r = 5 then
41365: LD_VAR 0 15
41369: PUSH
41370: LD_INT 5
41372: EQUAL
41373: IFFALSE 41383
// r := 0 ;
41375: LD_ADDR_VAR 0 15
41379: PUSH
41380: LD_INT 0
41382: ST_TO_ADDR
// for j = r to 5 do
41383: LD_ADDR_VAR 0 10
41387: PUSH
41388: DOUBLE
41389: LD_VAR 0 15
41393: DEC
41394: ST_TO_ADDR
41395: LD_INT 5
41397: PUSH
41398: FOR_TO
41399: IFFALSE 41513
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
41401: LD_ADDR_VAR 0 11
41405: PUSH
41406: LD_VAR 0 13
41410: PPUSH
41411: CALL_OW 250
41415: PPUSH
41416: LD_VAR 0 10
41420: PPUSH
41421: LD_INT 2
41423: PPUSH
41424: CALL_OW 272
41428: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
41429: LD_ADDR_VAR 0 12
41433: PUSH
41434: LD_VAR 0 13
41438: PPUSH
41439: CALL_OW 251
41443: PPUSH
41444: LD_VAR 0 10
41448: PPUSH
41449: LD_INT 2
41451: PPUSH
41452: CALL_OW 273
41456: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
41457: LD_VAR 0 11
41461: PPUSH
41462: LD_VAR 0 12
41466: PPUSH
41467: CALL_OW 488
41471: PUSH
41472: LD_VAR 0 11
41476: PPUSH
41477: LD_VAR 0 12
41481: PPUSH
41482: CALL_OW 428
41486: NOT
41487: AND
41488: IFFALSE 41511
// begin ComMoveXY ( tmp , _x , _y ) ;
41490: LD_VAR 0 13
41494: PPUSH
41495: LD_VAR 0 11
41499: PPUSH
41500: LD_VAR 0 12
41504: PPUSH
41505: CALL_OW 111
// break ;
41509: GO 41513
// end ; end ;
41511: GO 41398
41513: POP
41514: POP
// end ; end ;
41515: GO 40840
41517: POP
41518: POP
// end ;
41519: LD_VAR 0 8
41523: RET
// export function BuildingTechInvented ( side , btype ) ; begin
41524: LD_INT 0
41526: PPUSH
// result := true ;
41527: LD_ADDR_VAR 0 3
41531: PUSH
41532: LD_INT 1
41534: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
41535: LD_VAR 0 2
41539: PUSH
41540: LD_INT 24
41542: DOUBLE
41543: EQUAL
41544: IFTRUE 41554
41546: LD_INT 33
41548: DOUBLE
41549: EQUAL
41550: IFTRUE 41554
41552: GO 41579
41554: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
41555: LD_ADDR_VAR 0 3
41559: PUSH
41560: LD_INT 32
41562: PPUSH
41563: LD_VAR 0 1
41567: PPUSH
41568: CALL_OW 321
41572: PUSH
41573: LD_INT 2
41575: EQUAL
41576: ST_TO_ADDR
41577: GO 41895
41579: LD_INT 20
41581: DOUBLE
41582: EQUAL
41583: IFTRUE 41587
41585: GO 41612
41587: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
41588: LD_ADDR_VAR 0 3
41592: PUSH
41593: LD_INT 6
41595: PPUSH
41596: LD_VAR 0 1
41600: PPUSH
41601: CALL_OW 321
41605: PUSH
41606: LD_INT 2
41608: EQUAL
41609: ST_TO_ADDR
41610: GO 41895
41612: LD_INT 22
41614: DOUBLE
41615: EQUAL
41616: IFTRUE 41626
41618: LD_INT 36
41620: DOUBLE
41621: EQUAL
41622: IFTRUE 41626
41624: GO 41651
41626: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
41627: LD_ADDR_VAR 0 3
41631: PUSH
41632: LD_INT 15
41634: PPUSH
41635: LD_VAR 0 1
41639: PPUSH
41640: CALL_OW 321
41644: PUSH
41645: LD_INT 2
41647: EQUAL
41648: ST_TO_ADDR
41649: GO 41895
41651: LD_INT 30
41653: DOUBLE
41654: EQUAL
41655: IFTRUE 41659
41657: GO 41684
41659: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
41660: LD_ADDR_VAR 0 3
41664: PUSH
41665: LD_INT 20
41667: PPUSH
41668: LD_VAR 0 1
41672: PPUSH
41673: CALL_OW 321
41677: PUSH
41678: LD_INT 2
41680: EQUAL
41681: ST_TO_ADDR
41682: GO 41895
41684: LD_INT 28
41686: DOUBLE
41687: EQUAL
41688: IFTRUE 41698
41690: LD_INT 21
41692: DOUBLE
41693: EQUAL
41694: IFTRUE 41698
41696: GO 41723
41698: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
41699: LD_ADDR_VAR 0 3
41703: PUSH
41704: LD_INT 21
41706: PPUSH
41707: LD_VAR 0 1
41711: PPUSH
41712: CALL_OW 321
41716: PUSH
41717: LD_INT 2
41719: EQUAL
41720: ST_TO_ADDR
41721: GO 41895
41723: LD_INT 16
41725: DOUBLE
41726: EQUAL
41727: IFTRUE 41731
41729: GO 41756
41731: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
41732: LD_ADDR_VAR 0 3
41736: PUSH
41737: LD_INT 84
41739: PPUSH
41740: LD_VAR 0 1
41744: PPUSH
41745: CALL_OW 321
41749: PUSH
41750: LD_INT 2
41752: EQUAL
41753: ST_TO_ADDR
41754: GO 41895
41756: LD_INT 19
41758: DOUBLE
41759: EQUAL
41760: IFTRUE 41770
41762: LD_INT 23
41764: DOUBLE
41765: EQUAL
41766: IFTRUE 41770
41768: GO 41795
41770: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
41771: LD_ADDR_VAR 0 3
41775: PUSH
41776: LD_INT 83
41778: PPUSH
41779: LD_VAR 0 1
41783: PPUSH
41784: CALL_OW 321
41788: PUSH
41789: LD_INT 2
41791: EQUAL
41792: ST_TO_ADDR
41793: GO 41895
41795: LD_INT 17
41797: DOUBLE
41798: EQUAL
41799: IFTRUE 41803
41801: GO 41828
41803: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
41804: LD_ADDR_VAR 0 3
41808: PUSH
41809: LD_INT 39
41811: PPUSH
41812: LD_VAR 0 1
41816: PPUSH
41817: CALL_OW 321
41821: PUSH
41822: LD_INT 2
41824: EQUAL
41825: ST_TO_ADDR
41826: GO 41895
41828: LD_INT 18
41830: DOUBLE
41831: EQUAL
41832: IFTRUE 41836
41834: GO 41861
41836: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
41837: LD_ADDR_VAR 0 3
41841: PUSH
41842: LD_INT 40
41844: PPUSH
41845: LD_VAR 0 1
41849: PPUSH
41850: CALL_OW 321
41854: PUSH
41855: LD_INT 2
41857: EQUAL
41858: ST_TO_ADDR
41859: GO 41895
41861: LD_INT 27
41863: DOUBLE
41864: EQUAL
41865: IFTRUE 41869
41867: GO 41894
41869: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
41870: LD_ADDR_VAR 0 3
41874: PUSH
41875: LD_INT 35
41877: PPUSH
41878: LD_VAR 0 1
41882: PPUSH
41883: CALL_OW 321
41887: PUSH
41888: LD_INT 2
41890: EQUAL
41891: ST_TO_ADDR
41892: GO 41895
41894: POP
// end ;
41895: LD_VAR 0 3
41899: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
41900: LD_INT 0
41902: PPUSH
41903: PPUSH
41904: PPUSH
41905: PPUSH
41906: PPUSH
41907: PPUSH
41908: PPUSH
41909: PPUSH
41910: PPUSH
41911: PPUSH
41912: PPUSH
// result := false ;
41913: LD_ADDR_VAR 0 6
41917: PUSH
41918: LD_INT 0
41920: ST_TO_ADDR
// if btype = b_depot then
41921: LD_VAR 0 2
41925: PUSH
41926: LD_INT 0
41928: EQUAL
41929: IFFALSE 41941
// begin result := true ;
41931: LD_ADDR_VAR 0 6
41935: PUSH
41936: LD_INT 1
41938: ST_TO_ADDR
// exit ;
41939: GO 42767
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
41941: LD_VAR 0 1
41945: NOT
41946: PUSH
41947: LD_VAR 0 1
41951: PPUSH
41952: CALL_OW 266
41956: PUSH
41957: LD_INT 0
41959: PUSH
41960: LD_INT 1
41962: PUSH
41963: EMPTY
41964: LIST
41965: LIST
41966: IN
41967: NOT
41968: OR
41969: PUSH
41970: LD_VAR 0 2
41974: NOT
41975: OR
41976: PUSH
41977: LD_VAR 0 5
41981: PUSH
41982: LD_INT 0
41984: PUSH
41985: LD_INT 1
41987: PUSH
41988: LD_INT 2
41990: PUSH
41991: LD_INT 3
41993: PUSH
41994: LD_INT 4
41996: PUSH
41997: LD_INT 5
41999: PUSH
42000: EMPTY
42001: LIST
42002: LIST
42003: LIST
42004: LIST
42005: LIST
42006: LIST
42007: IN
42008: NOT
42009: OR
42010: PUSH
42011: LD_VAR 0 3
42015: PPUSH
42016: LD_VAR 0 4
42020: PPUSH
42021: CALL_OW 488
42025: NOT
42026: OR
42027: IFFALSE 42031
// exit ;
42029: GO 42767
// side := GetSide ( depot ) ;
42031: LD_ADDR_VAR 0 9
42035: PUSH
42036: LD_VAR 0 1
42040: PPUSH
42041: CALL_OW 255
42045: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
42046: LD_VAR 0 9
42050: PPUSH
42051: LD_VAR 0 2
42055: PPUSH
42056: CALL 41524 0 2
42060: NOT
42061: IFFALSE 42065
// exit ;
42063: GO 42767
// pom := GetBase ( depot ) ;
42065: LD_ADDR_VAR 0 10
42069: PUSH
42070: LD_VAR 0 1
42074: PPUSH
42075: CALL_OW 274
42079: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
42080: LD_ADDR_VAR 0 11
42084: PUSH
42085: LD_VAR 0 2
42089: PPUSH
42090: LD_VAR 0 1
42094: PPUSH
42095: CALL_OW 248
42099: PPUSH
42100: CALL_OW 450
42104: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
42105: LD_VAR 0 10
42109: PPUSH
42110: LD_INT 1
42112: PPUSH
42113: CALL_OW 275
42117: PUSH
42118: LD_VAR 0 11
42122: PUSH
42123: LD_INT 1
42125: ARRAY
42126: GREATEREQUAL
42127: PUSH
42128: LD_VAR 0 10
42132: PPUSH
42133: LD_INT 2
42135: PPUSH
42136: CALL_OW 275
42140: PUSH
42141: LD_VAR 0 11
42145: PUSH
42146: LD_INT 2
42148: ARRAY
42149: GREATEREQUAL
42150: AND
42151: PUSH
42152: LD_VAR 0 10
42156: PPUSH
42157: LD_INT 3
42159: PPUSH
42160: CALL_OW 275
42164: PUSH
42165: LD_VAR 0 11
42169: PUSH
42170: LD_INT 3
42172: ARRAY
42173: GREATEREQUAL
42174: AND
42175: NOT
42176: IFFALSE 42180
// exit ;
42178: GO 42767
// if GetBType ( depot ) = b_depot then
42180: LD_VAR 0 1
42184: PPUSH
42185: CALL_OW 266
42189: PUSH
42190: LD_INT 0
42192: EQUAL
42193: IFFALSE 42205
// dist := 28 else
42195: LD_ADDR_VAR 0 14
42199: PUSH
42200: LD_INT 28
42202: ST_TO_ADDR
42203: GO 42213
// dist := 36 ;
42205: LD_ADDR_VAR 0 14
42209: PUSH
42210: LD_INT 36
42212: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
42213: LD_VAR 0 1
42217: PPUSH
42218: LD_VAR 0 3
42222: PPUSH
42223: LD_VAR 0 4
42227: PPUSH
42228: CALL_OW 297
42232: PUSH
42233: LD_VAR 0 14
42237: GREATER
42238: IFFALSE 42242
// exit ;
42240: GO 42767
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
42242: LD_ADDR_VAR 0 12
42246: PUSH
42247: LD_VAR 0 2
42251: PPUSH
42252: LD_VAR 0 3
42256: PPUSH
42257: LD_VAR 0 4
42261: PPUSH
42262: LD_VAR 0 5
42266: PPUSH
42267: LD_VAR 0 1
42271: PPUSH
42272: CALL_OW 248
42276: PPUSH
42277: LD_INT 0
42279: PPUSH
42280: CALL 42772 0 6
42284: ST_TO_ADDR
// if not hexes then
42285: LD_VAR 0 12
42289: NOT
42290: IFFALSE 42294
// exit ;
42292: GO 42767
// hex := GetHexInfo ( x , y ) ;
42294: LD_ADDR_VAR 0 15
42298: PUSH
42299: LD_VAR 0 3
42303: PPUSH
42304: LD_VAR 0 4
42308: PPUSH
42309: CALL_OW 546
42313: ST_TO_ADDR
// if hex [ 1 ] then
42314: LD_VAR 0 15
42318: PUSH
42319: LD_INT 1
42321: ARRAY
42322: IFFALSE 42326
// exit ;
42324: GO 42767
// height := hex [ 2 ] ;
42326: LD_ADDR_VAR 0 13
42330: PUSH
42331: LD_VAR 0 15
42335: PUSH
42336: LD_INT 2
42338: ARRAY
42339: ST_TO_ADDR
// for i = 1 to hexes do
42340: LD_ADDR_VAR 0 7
42344: PUSH
42345: DOUBLE
42346: LD_INT 1
42348: DEC
42349: ST_TO_ADDR
42350: LD_VAR 0 12
42354: PUSH
42355: FOR_TO
42356: IFFALSE 42686
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
42358: LD_VAR 0 12
42362: PUSH
42363: LD_VAR 0 7
42367: ARRAY
42368: PUSH
42369: LD_INT 1
42371: ARRAY
42372: PPUSH
42373: LD_VAR 0 12
42377: PUSH
42378: LD_VAR 0 7
42382: ARRAY
42383: PUSH
42384: LD_INT 2
42386: ARRAY
42387: PPUSH
42388: CALL_OW 488
42392: NOT
42393: PUSH
42394: LD_VAR 0 12
42398: PUSH
42399: LD_VAR 0 7
42403: ARRAY
42404: PUSH
42405: LD_INT 1
42407: ARRAY
42408: PPUSH
42409: LD_VAR 0 12
42413: PUSH
42414: LD_VAR 0 7
42418: ARRAY
42419: PUSH
42420: LD_INT 2
42422: ARRAY
42423: PPUSH
42424: CALL_OW 428
42428: PUSH
42429: LD_INT 0
42431: GREATER
42432: OR
42433: PUSH
42434: LD_VAR 0 12
42438: PUSH
42439: LD_VAR 0 7
42443: ARRAY
42444: PUSH
42445: LD_INT 1
42447: ARRAY
42448: PPUSH
42449: LD_VAR 0 12
42453: PUSH
42454: LD_VAR 0 7
42458: ARRAY
42459: PUSH
42460: LD_INT 2
42462: ARRAY
42463: PPUSH
42464: CALL_OW 351
42468: OR
42469: IFFALSE 42475
// exit ;
42471: POP
42472: POP
42473: GO 42767
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
42475: LD_ADDR_VAR 0 8
42479: PUSH
42480: LD_VAR 0 12
42484: PUSH
42485: LD_VAR 0 7
42489: ARRAY
42490: PUSH
42491: LD_INT 1
42493: ARRAY
42494: PPUSH
42495: LD_VAR 0 12
42499: PUSH
42500: LD_VAR 0 7
42504: ARRAY
42505: PUSH
42506: LD_INT 2
42508: ARRAY
42509: PPUSH
42510: CALL_OW 546
42514: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
42515: LD_VAR 0 8
42519: PUSH
42520: LD_INT 1
42522: ARRAY
42523: PUSH
42524: LD_VAR 0 8
42528: PUSH
42529: LD_INT 2
42531: ARRAY
42532: PUSH
42533: LD_VAR 0 13
42537: PUSH
42538: LD_INT 2
42540: PLUS
42541: GREATER
42542: OR
42543: PUSH
42544: LD_VAR 0 8
42548: PUSH
42549: LD_INT 2
42551: ARRAY
42552: PUSH
42553: LD_VAR 0 13
42557: PUSH
42558: LD_INT 2
42560: MINUS
42561: LESS
42562: OR
42563: PUSH
42564: LD_VAR 0 8
42568: PUSH
42569: LD_INT 3
42571: ARRAY
42572: PUSH
42573: LD_INT 0
42575: PUSH
42576: LD_INT 8
42578: PUSH
42579: LD_INT 9
42581: PUSH
42582: LD_INT 10
42584: PUSH
42585: LD_INT 11
42587: PUSH
42588: LD_INT 12
42590: PUSH
42591: LD_INT 13
42593: PUSH
42594: LD_INT 16
42596: PUSH
42597: LD_INT 17
42599: PUSH
42600: LD_INT 18
42602: PUSH
42603: LD_INT 19
42605: PUSH
42606: LD_INT 20
42608: PUSH
42609: LD_INT 21
42611: PUSH
42612: EMPTY
42613: LIST
42614: LIST
42615: LIST
42616: LIST
42617: LIST
42618: LIST
42619: LIST
42620: LIST
42621: LIST
42622: LIST
42623: LIST
42624: LIST
42625: LIST
42626: IN
42627: NOT
42628: OR
42629: PUSH
42630: LD_VAR 0 8
42634: PUSH
42635: LD_INT 5
42637: ARRAY
42638: NOT
42639: OR
42640: PUSH
42641: LD_VAR 0 8
42645: PUSH
42646: LD_INT 6
42648: ARRAY
42649: PUSH
42650: LD_INT 1
42652: PUSH
42653: LD_INT 2
42655: PUSH
42656: LD_INT 7
42658: PUSH
42659: LD_INT 9
42661: PUSH
42662: LD_INT 10
42664: PUSH
42665: LD_INT 11
42667: PUSH
42668: EMPTY
42669: LIST
42670: LIST
42671: LIST
42672: LIST
42673: LIST
42674: LIST
42675: IN
42676: NOT
42677: OR
42678: IFFALSE 42684
// exit ;
42680: POP
42681: POP
42682: GO 42767
// end ;
42684: GO 42355
42686: POP
42687: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
42688: LD_VAR 0 9
42692: PPUSH
42693: LD_VAR 0 3
42697: PPUSH
42698: LD_VAR 0 4
42702: PPUSH
42703: LD_INT 20
42705: PPUSH
42706: CALL 34690 0 4
42710: PUSH
42711: LD_INT 4
42713: ARRAY
42714: IFFALSE 42718
// exit ;
42716: GO 42767
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
42718: LD_VAR 0 2
42722: PUSH
42723: LD_INT 29
42725: PUSH
42726: LD_INT 30
42728: PUSH
42729: EMPTY
42730: LIST
42731: LIST
42732: IN
42733: PUSH
42734: LD_VAR 0 3
42738: PPUSH
42739: LD_VAR 0 4
42743: PPUSH
42744: LD_VAR 0 9
42748: PPUSH
42749: CALL_OW 440
42753: NOT
42754: AND
42755: IFFALSE 42759
// exit ;
42757: GO 42767
// result := true ;
42759: LD_ADDR_VAR 0 6
42763: PUSH
42764: LD_INT 1
42766: ST_TO_ADDR
// end ;
42767: LD_VAR 0 6
42771: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
42772: LD_INT 0
42774: PPUSH
42775: PPUSH
42776: PPUSH
42777: PPUSH
42778: PPUSH
42779: PPUSH
42780: PPUSH
42781: PPUSH
42782: PPUSH
42783: PPUSH
42784: PPUSH
42785: PPUSH
42786: PPUSH
42787: PPUSH
42788: PPUSH
42789: PPUSH
42790: PPUSH
42791: PPUSH
42792: PPUSH
42793: PPUSH
42794: PPUSH
42795: PPUSH
42796: PPUSH
42797: PPUSH
42798: PPUSH
42799: PPUSH
42800: PPUSH
42801: PPUSH
42802: PPUSH
42803: PPUSH
42804: PPUSH
42805: PPUSH
42806: PPUSH
42807: PPUSH
42808: PPUSH
42809: PPUSH
42810: PPUSH
42811: PPUSH
42812: PPUSH
42813: PPUSH
42814: PPUSH
42815: PPUSH
42816: PPUSH
42817: PPUSH
42818: PPUSH
42819: PPUSH
42820: PPUSH
42821: PPUSH
42822: PPUSH
42823: PPUSH
42824: PPUSH
42825: PPUSH
42826: PPUSH
42827: PPUSH
42828: PPUSH
42829: PPUSH
42830: PPUSH
42831: PPUSH
// result = [ ] ;
42832: LD_ADDR_VAR 0 7
42836: PUSH
42837: EMPTY
42838: ST_TO_ADDR
// temp_list = [ ] ;
42839: LD_ADDR_VAR 0 9
42843: PUSH
42844: EMPTY
42845: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
42846: LD_VAR 0 4
42850: PUSH
42851: LD_INT 0
42853: PUSH
42854: LD_INT 1
42856: PUSH
42857: LD_INT 2
42859: PUSH
42860: LD_INT 3
42862: PUSH
42863: LD_INT 4
42865: PUSH
42866: LD_INT 5
42868: PUSH
42869: EMPTY
42870: LIST
42871: LIST
42872: LIST
42873: LIST
42874: LIST
42875: LIST
42876: IN
42877: NOT
42878: PUSH
42879: LD_VAR 0 1
42883: PUSH
42884: LD_INT 0
42886: PUSH
42887: LD_INT 1
42889: PUSH
42890: EMPTY
42891: LIST
42892: LIST
42893: IN
42894: PUSH
42895: LD_VAR 0 5
42899: PUSH
42900: LD_INT 1
42902: PUSH
42903: LD_INT 2
42905: PUSH
42906: LD_INT 3
42908: PUSH
42909: EMPTY
42910: LIST
42911: LIST
42912: LIST
42913: IN
42914: NOT
42915: AND
42916: OR
42917: IFFALSE 42921
// exit ;
42919: GO 61312
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
42921: LD_VAR 0 1
42925: PUSH
42926: LD_INT 6
42928: PUSH
42929: LD_INT 7
42931: PUSH
42932: LD_INT 8
42934: PUSH
42935: LD_INT 13
42937: PUSH
42938: LD_INT 12
42940: PUSH
42941: LD_INT 15
42943: PUSH
42944: LD_INT 11
42946: PUSH
42947: LD_INT 14
42949: PUSH
42950: LD_INT 10
42952: PUSH
42953: EMPTY
42954: LIST
42955: LIST
42956: LIST
42957: LIST
42958: LIST
42959: LIST
42960: LIST
42961: LIST
42962: LIST
42963: IN
42964: IFFALSE 42974
// btype = b_lab ;
42966: LD_ADDR_VAR 0 1
42970: PUSH
42971: LD_INT 6
42973: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
42974: LD_VAR 0 6
42978: PUSH
42979: LD_INT 0
42981: PUSH
42982: LD_INT 1
42984: PUSH
42985: LD_INT 2
42987: PUSH
42988: EMPTY
42989: LIST
42990: LIST
42991: LIST
42992: IN
42993: NOT
42994: PUSH
42995: LD_VAR 0 1
42999: PUSH
43000: LD_INT 0
43002: PUSH
43003: LD_INT 1
43005: PUSH
43006: LD_INT 2
43008: PUSH
43009: LD_INT 3
43011: PUSH
43012: LD_INT 6
43014: PUSH
43015: LD_INT 36
43017: PUSH
43018: LD_INT 4
43020: PUSH
43021: LD_INT 5
43023: PUSH
43024: LD_INT 31
43026: PUSH
43027: LD_INT 32
43029: PUSH
43030: LD_INT 33
43032: PUSH
43033: EMPTY
43034: LIST
43035: LIST
43036: LIST
43037: LIST
43038: LIST
43039: LIST
43040: LIST
43041: LIST
43042: LIST
43043: LIST
43044: LIST
43045: IN
43046: NOT
43047: PUSH
43048: LD_VAR 0 6
43052: PUSH
43053: LD_INT 1
43055: EQUAL
43056: AND
43057: OR
43058: PUSH
43059: LD_VAR 0 1
43063: PUSH
43064: LD_INT 2
43066: PUSH
43067: LD_INT 3
43069: PUSH
43070: EMPTY
43071: LIST
43072: LIST
43073: IN
43074: NOT
43075: PUSH
43076: LD_VAR 0 6
43080: PUSH
43081: LD_INT 2
43083: EQUAL
43084: AND
43085: OR
43086: IFFALSE 43096
// mode = 0 ;
43088: LD_ADDR_VAR 0 6
43092: PUSH
43093: LD_INT 0
43095: ST_TO_ADDR
// case mode of 0 :
43096: LD_VAR 0 6
43100: PUSH
43101: LD_INT 0
43103: DOUBLE
43104: EQUAL
43105: IFTRUE 43109
43107: GO 54562
43109: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
43110: LD_ADDR_VAR 0 11
43114: PUSH
43115: LD_INT 0
43117: PUSH
43118: LD_INT 0
43120: PUSH
43121: EMPTY
43122: LIST
43123: LIST
43124: PUSH
43125: LD_INT 0
43127: PUSH
43128: LD_INT 1
43130: NEG
43131: PUSH
43132: EMPTY
43133: LIST
43134: LIST
43135: PUSH
43136: LD_INT 1
43138: PUSH
43139: LD_INT 0
43141: PUSH
43142: EMPTY
43143: LIST
43144: LIST
43145: PUSH
43146: LD_INT 1
43148: PUSH
43149: LD_INT 1
43151: PUSH
43152: EMPTY
43153: LIST
43154: LIST
43155: PUSH
43156: LD_INT 0
43158: PUSH
43159: LD_INT 1
43161: PUSH
43162: EMPTY
43163: LIST
43164: LIST
43165: PUSH
43166: LD_INT 1
43168: NEG
43169: PUSH
43170: LD_INT 0
43172: PUSH
43173: EMPTY
43174: LIST
43175: LIST
43176: PUSH
43177: LD_INT 1
43179: NEG
43180: PUSH
43181: LD_INT 1
43183: NEG
43184: PUSH
43185: EMPTY
43186: LIST
43187: LIST
43188: PUSH
43189: LD_INT 1
43191: NEG
43192: PUSH
43193: LD_INT 2
43195: NEG
43196: PUSH
43197: EMPTY
43198: LIST
43199: LIST
43200: PUSH
43201: LD_INT 0
43203: PUSH
43204: LD_INT 2
43206: NEG
43207: PUSH
43208: EMPTY
43209: LIST
43210: LIST
43211: PUSH
43212: LD_INT 1
43214: PUSH
43215: LD_INT 1
43217: NEG
43218: PUSH
43219: EMPTY
43220: LIST
43221: LIST
43222: PUSH
43223: LD_INT 1
43225: PUSH
43226: LD_INT 2
43228: PUSH
43229: EMPTY
43230: LIST
43231: LIST
43232: PUSH
43233: LD_INT 0
43235: PUSH
43236: LD_INT 2
43238: PUSH
43239: EMPTY
43240: LIST
43241: LIST
43242: PUSH
43243: LD_INT 1
43245: NEG
43246: PUSH
43247: LD_INT 1
43249: PUSH
43250: EMPTY
43251: LIST
43252: LIST
43253: PUSH
43254: LD_INT 1
43256: PUSH
43257: LD_INT 3
43259: PUSH
43260: EMPTY
43261: LIST
43262: LIST
43263: PUSH
43264: LD_INT 0
43266: PUSH
43267: LD_INT 3
43269: PUSH
43270: EMPTY
43271: LIST
43272: LIST
43273: PUSH
43274: LD_INT 1
43276: NEG
43277: PUSH
43278: LD_INT 2
43280: PUSH
43281: EMPTY
43282: LIST
43283: LIST
43284: PUSH
43285: EMPTY
43286: LIST
43287: LIST
43288: LIST
43289: LIST
43290: LIST
43291: LIST
43292: LIST
43293: LIST
43294: LIST
43295: LIST
43296: LIST
43297: LIST
43298: LIST
43299: LIST
43300: LIST
43301: LIST
43302: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43303: LD_ADDR_VAR 0 12
43307: PUSH
43308: LD_INT 0
43310: PUSH
43311: LD_INT 0
43313: PUSH
43314: EMPTY
43315: LIST
43316: LIST
43317: PUSH
43318: LD_INT 0
43320: PUSH
43321: LD_INT 1
43323: NEG
43324: PUSH
43325: EMPTY
43326: LIST
43327: LIST
43328: PUSH
43329: LD_INT 1
43331: PUSH
43332: LD_INT 0
43334: PUSH
43335: EMPTY
43336: LIST
43337: LIST
43338: PUSH
43339: LD_INT 1
43341: PUSH
43342: LD_INT 1
43344: PUSH
43345: EMPTY
43346: LIST
43347: LIST
43348: PUSH
43349: LD_INT 0
43351: PUSH
43352: LD_INT 1
43354: PUSH
43355: EMPTY
43356: LIST
43357: LIST
43358: PUSH
43359: LD_INT 1
43361: NEG
43362: PUSH
43363: LD_INT 0
43365: PUSH
43366: EMPTY
43367: LIST
43368: LIST
43369: PUSH
43370: LD_INT 1
43372: NEG
43373: PUSH
43374: LD_INT 1
43376: NEG
43377: PUSH
43378: EMPTY
43379: LIST
43380: LIST
43381: PUSH
43382: LD_INT 1
43384: PUSH
43385: LD_INT 1
43387: NEG
43388: PUSH
43389: EMPTY
43390: LIST
43391: LIST
43392: PUSH
43393: LD_INT 2
43395: PUSH
43396: LD_INT 0
43398: PUSH
43399: EMPTY
43400: LIST
43401: LIST
43402: PUSH
43403: LD_INT 2
43405: PUSH
43406: LD_INT 1
43408: PUSH
43409: EMPTY
43410: LIST
43411: LIST
43412: PUSH
43413: LD_INT 1
43415: NEG
43416: PUSH
43417: LD_INT 1
43419: PUSH
43420: EMPTY
43421: LIST
43422: LIST
43423: PUSH
43424: LD_INT 2
43426: NEG
43427: PUSH
43428: LD_INT 0
43430: PUSH
43431: EMPTY
43432: LIST
43433: LIST
43434: PUSH
43435: LD_INT 2
43437: NEG
43438: PUSH
43439: LD_INT 1
43441: NEG
43442: PUSH
43443: EMPTY
43444: LIST
43445: LIST
43446: PUSH
43447: LD_INT 2
43449: NEG
43450: PUSH
43451: LD_INT 1
43453: PUSH
43454: EMPTY
43455: LIST
43456: LIST
43457: PUSH
43458: LD_INT 3
43460: NEG
43461: PUSH
43462: LD_INT 0
43464: PUSH
43465: EMPTY
43466: LIST
43467: LIST
43468: PUSH
43469: LD_INT 3
43471: NEG
43472: PUSH
43473: LD_INT 1
43475: NEG
43476: PUSH
43477: EMPTY
43478: LIST
43479: LIST
43480: PUSH
43481: EMPTY
43482: LIST
43483: LIST
43484: LIST
43485: LIST
43486: LIST
43487: LIST
43488: LIST
43489: LIST
43490: LIST
43491: LIST
43492: LIST
43493: LIST
43494: LIST
43495: LIST
43496: LIST
43497: LIST
43498: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43499: LD_ADDR_VAR 0 13
43503: PUSH
43504: LD_INT 0
43506: PUSH
43507: LD_INT 0
43509: PUSH
43510: EMPTY
43511: LIST
43512: LIST
43513: PUSH
43514: LD_INT 0
43516: PUSH
43517: LD_INT 1
43519: NEG
43520: PUSH
43521: EMPTY
43522: LIST
43523: LIST
43524: PUSH
43525: LD_INT 1
43527: PUSH
43528: LD_INT 0
43530: PUSH
43531: EMPTY
43532: LIST
43533: LIST
43534: PUSH
43535: LD_INT 1
43537: PUSH
43538: LD_INT 1
43540: PUSH
43541: EMPTY
43542: LIST
43543: LIST
43544: PUSH
43545: LD_INT 0
43547: PUSH
43548: LD_INT 1
43550: PUSH
43551: EMPTY
43552: LIST
43553: LIST
43554: PUSH
43555: LD_INT 1
43557: NEG
43558: PUSH
43559: LD_INT 0
43561: PUSH
43562: EMPTY
43563: LIST
43564: LIST
43565: PUSH
43566: LD_INT 1
43568: NEG
43569: PUSH
43570: LD_INT 1
43572: NEG
43573: PUSH
43574: EMPTY
43575: LIST
43576: LIST
43577: PUSH
43578: LD_INT 1
43580: NEG
43581: PUSH
43582: LD_INT 2
43584: NEG
43585: PUSH
43586: EMPTY
43587: LIST
43588: LIST
43589: PUSH
43590: LD_INT 2
43592: PUSH
43593: LD_INT 1
43595: PUSH
43596: EMPTY
43597: LIST
43598: LIST
43599: PUSH
43600: LD_INT 2
43602: PUSH
43603: LD_INT 2
43605: PUSH
43606: EMPTY
43607: LIST
43608: LIST
43609: PUSH
43610: LD_INT 1
43612: PUSH
43613: LD_INT 2
43615: PUSH
43616: EMPTY
43617: LIST
43618: LIST
43619: PUSH
43620: LD_INT 2
43622: NEG
43623: PUSH
43624: LD_INT 1
43626: NEG
43627: PUSH
43628: EMPTY
43629: LIST
43630: LIST
43631: PUSH
43632: LD_INT 2
43634: NEG
43635: PUSH
43636: LD_INT 2
43638: NEG
43639: PUSH
43640: EMPTY
43641: LIST
43642: LIST
43643: PUSH
43644: LD_INT 2
43646: NEG
43647: PUSH
43648: LD_INT 3
43650: NEG
43651: PUSH
43652: EMPTY
43653: LIST
43654: LIST
43655: PUSH
43656: LD_INT 3
43658: NEG
43659: PUSH
43660: LD_INT 2
43662: NEG
43663: PUSH
43664: EMPTY
43665: LIST
43666: LIST
43667: PUSH
43668: LD_INT 3
43670: NEG
43671: PUSH
43672: LD_INT 3
43674: NEG
43675: PUSH
43676: EMPTY
43677: LIST
43678: LIST
43679: PUSH
43680: EMPTY
43681: LIST
43682: LIST
43683: LIST
43684: LIST
43685: LIST
43686: LIST
43687: LIST
43688: LIST
43689: LIST
43690: LIST
43691: LIST
43692: LIST
43693: LIST
43694: LIST
43695: LIST
43696: LIST
43697: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
43698: LD_ADDR_VAR 0 14
43702: PUSH
43703: LD_INT 0
43705: PUSH
43706: LD_INT 0
43708: PUSH
43709: EMPTY
43710: LIST
43711: LIST
43712: PUSH
43713: LD_INT 0
43715: PUSH
43716: LD_INT 1
43718: NEG
43719: PUSH
43720: EMPTY
43721: LIST
43722: LIST
43723: PUSH
43724: LD_INT 1
43726: PUSH
43727: LD_INT 0
43729: PUSH
43730: EMPTY
43731: LIST
43732: LIST
43733: PUSH
43734: LD_INT 1
43736: PUSH
43737: LD_INT 1
43739: PUSH
43740: EMPTY
43741: LIST
43742: LIST
43743: PUSH
43744: LD_INT 0
43746: PUSH
43747: LD_INT 1
43749: PUSH
43750: EMPTY
43751: LIST
43752: LIST
43753: PUSH
43754: LD_INT 1
43756: NEG
43757: PUSH
43758: LD_INT 0
43760: PUSH
43761: EMPTY
43762: LIST
43763: LIST
43764: PUSH
43765: LD_INT 1
43767: NEG
43768: PUSH
43769: LD_INT 1
43771: NEG
43772: PUSH
43773: EMPTY
43774: LIST
43775: LIST
43776: PUSH
43777: LD_INT 1
43779: NEG
43780: PUSH
43781: LD_INT 2
43783: NEG
43784: PUSH
43785: EMPTY
43786: LIST
43787: LIST
43788: PUSH
43789: LD_INT 0
43791: PUSH
43792: LD_INT 2
43794: NEG
43795: PUSH
43796: EMPTY
43797: LIST
43798: LIST
43799: PUSH
43800: LD_INT 1
43802: PUSH
43803: LD_INT 1
43805: NEG
43806: PUSH
43807: EMPTY
43808: LIST
43809: LIST
43810: PUSH
43811: LD_INT 1
43813: PUSH
43814: LD_INT 2
43816: PUSH
43817: EMPTY
43818: LIST
43819: LIST
43820: PUSH
43821: LD_INT 0
43823: PUSH
43824: LD_INT 2
43826: PUSH
43827: EMPTY
43828: LIST
43829: LIST
43830: PUSH
43831: LD_INT 1
43833: NEG
43834: PUSH
43835: LD_INT 1
43837: PUSH
43838: EMPTY
43839: LIST
43840: LIST
43841: PUSH
43842: LD_INT 1
43844: NEG
43845: PUSH
43846: LD_INT 3
43848: NEG
43849: PUSH
43850: EMPTY
43851: LIST
43852: LIST
43853: PUSH
43854: LD_INT 0
43856: PUSH
43857: LD_INT 3
43859: NEG
43860: PUSH
43861: EMPTY
43862: LIST
43863: LIST
43864: PUSH
43865: LD_INT 1
43867: PUSH
43868: LD_INT 2
43870: NEG
43871: PUSH
43872: EMPTY
43873: LIST
43874: LIST
43875: PUSH
43876: EMPTY
43877: LIST
43878: LIST
43879: LIST
43880: LIST
43881: LIST
43882: LIST
43883: LIST
43884: LIST
43885: LIST
43886: LIST
43887: LIST
43888: LIST
43889: LIST
43890: LIST
43891: LIST
43892: LIST
43893: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
43894: LD_ADDR_VAR 0 15
43898: PUSH
43899: LD_INT 0
43901: PUSH
43902: LD_INT 0
43904: PUSH
43905: EMPTY
43906: LIST
43907: LIST
43908: PUSH
43909: LD_INT 0
43911: PUSH
43912: LD_INT 1
43914: NEG
43915: PUSH
43916: EMPTY
43917: LIST
43918: LIST
43919: PUSH
43920: LD_INT 1
43922: PUSH
43923: LD_INT 0
43925: PUSH
43926: EMPTY
43927: LIST
43928: LIST
43929: PUSH
43930: LD_INT 1
43932: PUSH
43933: LD_INT 1
43935: PUSH
43936: EMPTY
43937: LIST
43938: LIST
43939: PUSH
43940: LD_INT 0
43942: PUSH
43943: LD_INT 1
43945: PUSH
43946: EMPTY
43947: LIST
43948: LIST
43949: PUSH
43950: LD_INT 1
43952: NEG
43953: PUSH
43954: LD_INT 0
43956: PUSH
43957: EMPTY
43958: LIST
43959: LIST
43960: PUSH
43961: LD_INT 1
43963: NEG
43964: PUSH
43965: LD_INT 1
43967: NEG
43968: PUSH
43969: EMPTY
43970: LIST
43971: LIST
43972: PUSH
43973: LD_INT 1
43975: PUSH
43976: LD_INT 1
43978: NEG
43979: PUSH
43980: EMPTY
43981: LIST
43982: LIST
43983: PUSH
43984: LD_INT 2
43986: PUSH
43987: LD_INT 0
43989: PUSH
43990: EMPTY
43991: LIST
43992: LIST
43993: PUSH
43994: LD_INT 2
43996: PUSH
43997: LD_INT 1
43999: PUSH
44000: EMPTY
44001: LIST
44002: LIST
44003: PUSH
44004: LD_INT 1
44006: NEG
44007: PUSH
44008: LD_INT 1
44010: PUSH
44011: EMPTY
44012: LIST
44013: LIST
44014: PUSH
44015: LD_INT 2
44017: NEG
44018: PUSH
44019: LD_INT 0
44021: PUSH
44022: EMPTY
44023: LIST
44024: LIST
44025: PUSH
44026: LD_INT 2
44028: NEG
44029: PUSH
44030: LD_INT 1
44032: NEG
44033: PUSH
44034: EMPTY
44035: LIST
44036: LIST
44037: PUSH
44038: LD_INT 2
44040: PUSH
44041: LD_INT 1
44043: NEG
44044: PUSH
44045: EMPTY
44046: LIST
44047: LIST
44048: PUSH
44049: LD_INT 3
44051: PUSH
44052: LD_INT 0
44054: PUSH
44055: EMPTY
44056: LIST
44057: LIST
44058: PUSH
44059: LD_INT 3
44061: PUSH
44062: LD_INT 1
44064: PUSH
44065: EMPTY
44066: LIST
44067: LIST
44068: PUSH
44069: EMPTY
44070: LIST
44071: LIST
44072: LIST
44073: LIST
44074: LIST
44075: LIST
44076: LIST
44077: LIST
44078: LIST
44079: LIST
44080: LIST
44081: LIST
44082: LIST
44083: LIST
44084: LIST
44085: LIST
44086: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
44087: LD_ADDR_VAR 0 16
44091: PUSH
44092: LD_INT 0
44094: PUSH
44095: LD_INT 0
44097: PUSH
44098: EMPTY
44099: LIST
44100: LIST
44101: PUSH
44102: LD_INT 0
44104: PUSH
44105: LD_INT 1
44107: NEG
44108: PUSH
44109: EMPTY
44110: LIST
44111: LIST
44112: PUSH
44113: LD_INT 1
44115: PUSH
44116: LD_INT 0
44118: PUSH
44119: EMPTY
44120: LIST
44121: LIST
44122: PUSH
44123: LD_INT 1
44125: PUSH
44126: LD_INT 1
44128: PUSH
44129: EMPTY
44130: LIST
44131: LIST
44132: PUSH
44133: LD_INT 0
44135: PUSH
44136: LD_INT 1
44138: PUSH
44139: EMPTY
44140: LIST
44141: LIST
44142: PUSH
44143: LD_INT 1
44145: NEG
44146: PUSH
44147: LD_INT 0
44149: PUSH
44150: EMPTY
44151: LIST
44152: LIST
44153: PUSH
44154: LD_INT 1
44156: NEG
44157: PUSH
44158: LD_INT 1
44160: NEG
44161: PUSH
44162: EMPTY
44163: LIST
44164: LIST
44165: PUSH
44166: LD_INT 1
44168: NEG
44169: PUSH
44170: LD_INT 2
44172: NEG
44173: PUSH
44174: EMPTY
44175: LIST
44176: LIST
44177: PUSH
44178: LD_INT 2
44180: PUSH
44181: LD_INT 1
44183: PUSH
44184: EMPTY
44185: LIST
44186: LIST
44187: PUSH
44188: LD_INT 2
44190: PUSH
44191: LD_INT 2
44193: PUSH
44194: EMPTY
44195: LIST
44196: LIST
44197: PUSH
44198: LD_INT 1
44200: PUSH
44201: LD_INT 2
44203: PUSH
44204: EMPTY
44205: LIST
44206: LIST
44207: PUSH
44208: LD_INT 2
44210: NEG
44211: PUSH
44212: LD_INT 1
44214: NEG
44215: PUSH
44216: EMPTY
44217: LIST
44218: LIST
44219: PUSH
44220: LD_INT 2
44222: NEG
44223: PUSH
44224: LD_INT 2
44226: NEG
44227: PUSH
44228: EMPTY
44229: LIST
44230: LIST
44231: PUSH
44232: LD_INT 3
44234: PUSH
44235: LD_INT 2
44237: PUSH
44238: EMPTY
44239: LIST
44240: LIST
44241: PUSH
44242: LD_INT 3
44244: PUSH
44245: LD_INT 3
44247: PUSH
44248: EMPTY
44249: LIST
44250: LIST
44251: PUSH
44252: LD_INT 2
44254: PUSH
44255: LD_INT 3
44257: PUSH
44258: EMPTY
44259: LIST
44260: LIST
44261: PUSH
44262: EMPTY
44263: LIST
44264: LIST
44265: LIST
44266: LIST
44267: LIST
44268: LIST
44269: LIST
44270: LIST
44271: LIST
44272: LIST
44273: LIST
44274: LIST
44275: LIST
44276: LIST
44277: LIST
44278: LIST
44279: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44280: LD_ADDR_VAR 0 17
44284: PUSH
44285: LD_INT 0
44287: PUSH
44288: LD_INT 0
44290: PUSH
44291: EMPTY
44292: LIST
44293: LIST
44294: PUSH
44295: LD_INT 0
44297: PUSH
44298: LD_INT 1
44300: NEG
44301: PUSH
44302: EMPTY
44303: LIST
44304: LIST
44305: PUSH
44306: LD_INT 1
44308: PUSH
44309: LD_INT 0
44311: PUSH
44312: EMPTY
44313: LIST
44314: LIST
44315: PUSH
44316: LD_INT 1
44318: PUSH
44319: LD_INT 1
44321: PUSH
44322: EMPTY
44323: LIST
44324: LIST
44325: PUSH
44326: LD_INT 0
44328: PUSH
44329: LD_INT 1
44331: PUSH
44332: EMPTY
44333: LIST
44334: LIST
44335: PUSH
44336: LD_INT 1
44338: NEG
44339: PUSH
44340: LD_INT 0
44342: PUSH
44343: EMPTY
44344: LIST
44345: LIST
44346: PUSH
44347: LD_INT 1
44349: NEG
44350: PUSH
44351: LD_INT 1
44353: NEG
44354: PUSH
44355: EMPTY
44356: LIST
44357: LIST
44358: PUSH
44359: LD_INT 1
44361: NEG
44362: PUSH
44363: LD_INT 2
44365: NEG
44366: PUSH
44367: EMPTY
44368: LIST
44369: LIST
44370: PUSH
44371: LD_INT 0
44373: PUSH
44374: LD_INT 2
44376: NEG
44377: PUSH
44378: EMPTY
44379: LIST
44380: LIST
44381: PUSH
44382: LD_INT 1
44384: PUSH
44385: LD_INT 1
44387: NEG
44388: PUSH
44389: EMPTY
44390: LIST
44391: LIST
44392: PUSH
44393: LD_INT 2
44395: PUSH
44396: LD_INT 0
44398: PUSH
44399: EMPTY
44400: LIST
44401: LIST
44402: PUSH
44403: LD_INT 2
44405: PUSH
44406: LD_INT 1
44408: PUSH
44409: EMPTY
44410: LIST
44411: LIST
44412: PUSH
44413: LD_INT 2
44415: PUSH
44416: LD_INT 2
44418: PUSH
44419: EMPTY
44420: LIST
44421: LIST
44422: PUSH
44423: LD_INT 1
44425: PUSH
44426: LD_INT 2
44428: PUSH
44429: EMPTY
44430: LIST
44431: LIST
44432: PUSH
44433: LD_INT 0
44435: PUSH
44436: LD_INT 2
44438: PUSH
44439: EMPTY
44440: LIST
44441: LIST
44442: PUSH
44443: LD_INT 1
44445: NEG
44446: PUSH
44447: LD_INT 1
44449: PUSH
44450: EMPTY
44451: LIST
44452: LIST
44453: PUSH
44454: LD_INT 2
44456: NEG
44457: PUSH
44458: LD_INT 0
44460: PUSH
44461: EMPTY
44462: LIST
44463: LIST
44464: PUSH
44465: LD_INT 2
44467: NEG
44468: PUSH
44469: LD_INT 1
44471: NEG
44472: PUSH
44473: EMPTY
44474: LIST
44475: LIST
44476: PUSH
44477: LD_INT 2
44479: NEG
44480: PUSH
44481: LD_INT 2
44483: NEG
44484: PUSH
44485: EMPTY
44486: LIST
44487: LIST
44488: PUSH
44489: EMPTY
44490: LIST
44491: LIST
44492: LIST
44493: LIST
44494: LIST
44495: LIST
44496: LIST
44497: LIST
44498: LIST
44499: LIST
44500: LIST
44501: LIST
44502: LIST
44503: LIST
44504: LIST
44505: LIST
44506: LIST
44507: LIST
44508: LIST
44509: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44510: LD_ADDR_VAR 0 18
44514: PUSH
44515: LD_INT 0
44517: PUSH
44518: LD_INT 0
44520: PUSH
44521: EMPTY
44522: LIST
44523: LIST
44524: PUSH
44525: LD_INT 0
44527: PUSH
44528: LD_INT 1
44530: NEG
44531: PUSH
44532: EMPTY
44533: LIST
44534: LIST
44535: PUSH
44536: LD_INT 1
44538: PUSH
44539: LD_INT 0
44541: PUSH
44542: EMPTY
44543: LIST
44544: LIST
44545: PUSH
44546: LD_INT 1
44548: PUSH
44549: LD_INT 1
44551: PUSH
44552: EMPTY
44553: LIST
44554: LIST
44555: PUSH
44556: LD_INT 0
44558: PUSH
44559: LD_INT 1
44561: PUSH
44562: EMPTY
44563: LIST
44564: LIST
44565: PUSH
44566: LD_INT 1
44568: NEG
44569: PUSH
44570: LD_INT 0
44572: PUSH
44573: EMPTY
44574: LIST
44575: LIST
44576: PUSH
44577: LD_INT 1
44579: NEG
44580: PUSH
44581: LD_INT 1
44583: NEG
44584: PUSH
44585: EMPTY
44586: LIST
44587: LIST
44588: PUSH
44589: LD_INT 1
44591: NEG
44592: PUSH
44593: LD_INT 2
44595: NEG
44596: PUSH
44597: EMPTY
44598: LIST
44599: LIST
44600: PUSH
44601: LD_INT 0
44603: PUSH
44604: LD_INT 2
44606: NEG
44607: PUSH
44608: EMPTY
44609: LIST
44610: LIST
44611: PUSH
44612: LD_INT 1
44614: PUSH
44615: LD_INT 1
44617: NEG
44618: PUSH
44619: EMPTY
44620: LIST
44621: LIST
44622: PUSH
44623: LD_INT 2
44625: PUSH
44626: LD_INT 0
44628: PUSH
44629: EMPTY
44630: LIST
44631: LIST
44632: PUSH
44633: LD_INT 2
44635: PUSH
44636: LD_INT 1
44638: PUSH
44639: EMPTY
44640: LIST
44641: LIST
44642: PUSH
44643: LD_INT 2
44645: PUSH
44646: LD_INT 2
44648: PUSH
44649: EMPTY
44650: LIST
44651: LIST
44652: PUSH
44653: LD_INT 1
44655: PUSH
44656: LD_INT 2
44658: PUSH
44659: EMPTY
44660: LIST
44661: LIST
44662: PUSH
44663: LD_INT 0
44665: PUSH
44666: LD_INT 2
44668: PUSH
44669: EMPTY
44670: LIST
44671: LIST
44672: PUSH
44673: LD_INT 1
44675: NEG
44676: PUSH
44677: LD_INT 1
44679: PUSH
44680: EMPTY
44681: LIST
44682: LIST
44683: PUSH
44684: LD_INT 2
44686: NEG
44687: PUSH
44688: LD_INT 0
44690: PUSH
44691: EMPTY
44692: LIST
44693: LIST
44694: PUSH
44695: LD_INT 2
44697: NEG
44698: PUSH
44699: LD_INT 1
44701: NEG
44702: PUSH
44703: EMPTY
44704: LIST
44705: LIST
44706: PUSH
44707: LD_INT 2
44709: NEG
44710: PUSH
44711: LD_INT 2
44713: NEG
44714: PUSH
44715: EMPTY
44716: LIST
44717: LIST
44718: PUSH
44719: EMPTY
44720: LIST
44721: LIST
44722: LIST
44723: LIST
44724: LIST
44725: LIST
44726: LIST
44727: LIST
44728: LIST
44729: LIST
44730: LIST
44731: LIST
44732: LIST
44733: LIST
44734: LIST
44735: LIST
44736: LIST
44737: LIST
44738: LIST
44739: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44740: LD_ADDR_VAR 0 19
44744: PUSH
44745: LD_INT 0
44747: PUSH
44748: LD_INT 0
44750: PUSH
44751: EMPTY
44752: LIST
44753: LIST
44754: PUSH
44755: LD_INT 0
44757: PUSH
44758: LD_INT 1
44760: NEG
44761: PUSH
44762: EMPTY
44763: LIST
44764: LIST
44765: PUSH
44766: LD_INT 1
44768: PUSH
44769: LD_INT 0
44771: PUSH
44772: EMPTY
44773: LIST
44774: LIST
44775: PUSH
44776: LD_INT 1
44778: PUSH
44779: LD_INT 1
44781: PUSH
44782: EMPTY
44783: LIST
44784: LIST
44785: PUSH
44786: LD_INT 0
44788: PUSH
44789: LD_INT 1
44791: PUSH
44792: EMPTY
44793: LIST
44794: LIST
44795: PUSH
44796: LD_INT 1
44798: NEG
44799: PUSH
44800: LD_INT 0
44802: PUSH
44803: EMPTY
44804: LIST
44805: LIST
44806: PUSH
44807: LD_INT 1
44809: NEG
44810: PUSH
44811: LD_INT 1
44813: NEG
44814: PUSH
44815: EMPTY
44816: LIST
44817: LIST
44818: PUSH
44819: LD_INT 1
44821: NEG
44822: PUSH
44823: LD_INT 2
44825: NEG
44826: PUSH
44827: EMPTY
44828: LIST
44829: LIST
44830: PUSH
44831: LD_INT 0
44833: PUSH
44834: LD_INT 2
44836: NEG
44837: PUSH
44838: EMPTY
44839: LIST
44840: LIST
44841: PUSH
44842: LD_INT 1
44844: PUSH
44845: LD_INT 1
44847: NEG
44848: PUSH
44849: EMPTY
44850: LIST
44851: LIST
44852: PUSH
44853: LD_INT 2
44855: PUSH
44856: LD_INT 0
44858: PUSH
44859: EMPTY
44860: LIST
44861: LIST
44862: PUSH
44863: LD_INT 2
44865: PUSH
44866: LD_INT 1
44868: PUSH
44869: EMPTY
44870: LIST
44871: LIST
44872: PUSH
44873: LD_INT 2
44875: PUSH
44876: LD_INT 2
44878: PUSH
44879: EMPTY
44880: LIST
44881: LIST
44882: PUSH
44883: LD_INT 1
44885: PUSH
44886: LD_INT 2
44888: PUSH
44889: EMPTY
44890: LIST
44891: LIST
44892: PUSH
44893: LD_INT 0
44895: PUSH
44896: LD_INT 2
44898: PUSH
44899: EMPTY
44900: LIST
44901: LIST
44902: PUSH
44903: LD_INT 1
44905: NEG
44906: PUSH
44907: LD_INT 1
44909: PUSH
44910: EMPTY
44911: LIST
44912: LIST
44913: PUSH
44914: LD_INT 2
44916: NEG
44917: PUSH
44918: LD_INT 0
44920: PUSH
44921: EMPTY
44922: LIST
44923: LIST
44924: PUSH
44925: LD_INT 2
44927: NEG
44928: PUSH
44929: LD_INT 1
44931: NEG
44932: PUSH
44933: EMPTY
44934: LIST
44935: LIST
44936: PUSH
44937: LD_INT 2
44939: NEG
44940: PUSH
44941: LD_INT 2
44943: NEG
44944: PUSH
44945: EMPTY
44946: LIST
44947: LIST
44948: PUSH
44949: EMPTY
44950: LIST
44951: LIST
44952: LIST
44953: LIST
44954: LIST
44955: LIST
44956: LIST
44957: LIST
44958: LIST
44959: LIST
44960: LIST
44961: LIST
44962: LIST
44963: LIST
44964: LIST
44965: LIST
44966: LIST
44967: LIST
44968: LIST
44969: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44970: LD_ADDR_VAR 0 20
44974: PUSH
44975: LD_INT 0
44977: PUSH
44978: LD_INT 0
44980: PUSH
44981: EMPTY
44982: LIST
44983: LIST
44984: PUSH
44985: LD_INT 0
44987: PUSH
44988: LD_INT 1
44990: NEG
44991: PUSH
44992: EMPTY
44993: LIST
44994: LIST
44995: PUSH
44996: LD_INT 1
44998: PUSH
44999: LD_INT 0
45001: PUSH
45002: EMPTY
45003: LIST
45004: LIST
45005: PUSH
45006: LD_INT 1
45008: PUSH
45009: LD_INT 1
45011: PUSH
45012: EMPTY
45013: LIST
45014: LIST
45015: PUSH
45016: LD_INT 0
45018: PUSH
45019: LD_INT 1
45021: PUSH
45022: EMPTY
45023: LIST
45024: LIST
45025: PUSH
45026: LD_INT 1
45028: NEG
45029: PUSH
45030: LD_INT 0
45032: PUSH
45033: EMPTY
45034: LIST
45035: LIST
45036: PUSH
45037: LD_INT 1
45039: NEG
45040: PUSH
45041: LD_INT 1
45043: NEG
45044: PUSH
45045: EMPTY
45046: LIST
45047: LIST
45048: PUSH
45049: LD_INT 1
45051: NEG
45052: PUSH
45053: LD_INT 2
45055: NEG
45056: PUSH
45057: EMPTY
45058: LIST
45059: LIST
45060: PUSH
45061: LD_INT 0
45063: PUSH
45064: LD_INT 2
45066: NEG
45067: PUSH
45068: EMPTY
45069: LIST
45070: LIST
45071: PUSH
45072: LD_INT 1
45074: PUSH
45075: LD_INT 1
45077: NEG
45078: PUSH
45079: EMPTY
45080: LIST
45081: LIST
45082: PUSH
45083: LD_INT 2
45085: PUSH
45086: LD_INT 0
45088: PUSH
45089: EMPTY
45090: LIST
45091: LIST
45092: PUSH
45093: LD_INT 2
45095: PUSH
45096: LD_INT 1
45098: PUSH
45099: EMPTY
45100: LIST
45101: LIST
45102: PUSH
45103: LD_INT 2
45105: PUSH
45106: LD_INT 2
45108: PUSH
45109: EMPTY
45110: LIST
45111: LIST
45112: PUSH
45113: LD_INT 1
45115: PUSH
45116: LD_INT 2
45118: PUSH
45119: EMPTY
45120: LIST
45121: LIST
45122: PUSH
45123: LD_INT 0
45125: PUSH
45126: LD_INT 2
45128: PUSH
45129: EMPTY
45130: LIST
45131: LIST
45132: PUSH
45133: LD_INT 1
45135: NEG
45136: PUSH
45137: LD_INT 1
45139: PUSH
45140: EMPTY
45141: LIST
45142: LIST
45143: PUSH
45144: LD_INT 2
45146: NEG
45147: PUSH
45148: LD_INT 0
45150: PUSH
45151: EMPTY
45152: LIST
45153: LIST
45154: PUSH
45155: LD_INT 2
45157: NEG
45158: PUSH
45159: LD_INT 1
45161: NEG
45162: PUSH
45163: EMPTY
45164: LIST
45165: LIST
45166: PUSH
45167: LD_INT 2
45169: NEG
45170: PUSH
45171: LD_INT 2
45173: NEG
45174: PUSH
45175: EMPTY
45176: LIST
45177: LIST
45178: PUSH
45179: EMPTY
45180: LIST
45181: LIST
45182: LIST
45183: LIST
45184: LIST
45185: LIST
45186: LIST
45187: LIST
45188: LIST
45189: LIST
45190: LIST
45191: LIST
45192: LIST
45193: LIST
45194: LIST
45195: LIST
45196: LIST
45197: LIST
45198: LIST
45199: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45200: LD_ADDR_VAR 0 21
45204: PUSH
45205: LD_INT 0
45207: PUSH
45208: LD_INT 0
45210: PUSH
45211: EMPTY
45212: LIST
45213: LIST
45214: PUSH
45215: LD_INT 0
45217: PUSH
45218: LD_INT 1
45220: NEG
45221: PUSH
45222: EMPTY
45223: LIST
45224: LIST
45225: PUSH
45226: LD_INT 1
45228: PUSH
45229: LD_INT 0
45231: PUSH
45232: EMPTY
45233: LIST
45234: LIST
45235: PUSH
45236: LD_INT 1
45238: PUSH
45239: LD_INT 1
45241: PUSH
45242: EMPTY
45243: LIST
45244: LIST
45245: PUSH
45246: LD_INT 0
45248: PUSH
45249: LD_INT 1
45251: PUSH
45252: EMPTY
45253: LIST
45254: LIST
45255: PUSH
45256: LD_INT 1
45258: NEG
45259: PUSH
45260: LD_INT 0
45262: PUSH
45263: EMPTY
45264: LIST
45265: LIST
45266: PUSH
45267: LD_INT 1
45269: NEG
45270: PUSH
45271: LD_INT 1
45273: NEG
45274: PUSH
45275: EMPTY
45276: LIST
45277: LIST
45278: PUSH
45279: LD_INT 1
45281: NEG
45282: PUSH
45283: LD_INT 2
45285: NEG
45286: PUSH
45287: EMPTY
45288: LIST
45289: LIST
45290: PUSH
45291: LD_INT 0
45293: PUSH
45294: LD_INT 2
45296: NEG
45297: PUSH
45298: EMPTY
45299: LIST
45300: LIST
45301: PUSH
45302: LD_INT 1
45304: PUSH
45305: LD_INT 1
45307: NEG
45308: PUSH
45309: EMPTY
45310: LIST
45311: LIST
45312: PUSH
45313: LD_INT 2
45315: PUSH
45316: LD_INT 0
45318: PUSH
45319: EMPTY
45320: LIST
45321: LIST
45322: PUSH
45323: LD_INT 2
45325: PUSH
45326: LD_INT 1
45328: PUSH
45329: EMPTY
45330: LIST
45331: LIST
45332: PUSH
45333: LD_INT 2
45335: PUSH
45336: LD_INT 2
45338: PUSH
45339: EMPTY
45340: LIST
45341: LIST
45342: PUSH
45343: LD_INT 1
45345: PUSH
45346: LD_INT 2
45348: PUSH
45349: EMPTY
45350: LIST
45351: LIST
45352: PUSH
45353: LD_INT 0
45355: PUSH
45356: LD_INT 2
45358: PUSH
45359: EMPTY
45360: LIST
45361: LIST
45362: PUSH
45363: LD_INT 1
45365: NEG
45366: PUSH
45367: LD_INT 1
45369: PUSH
45370: EMPTY
45371: LIST
45372: LIST
45373: PUSH
45374: LD_INT 2
45376: NEG
45377: PUSH
45378: LD_INT 0
45380: PUSH
45381: EMPTY
45382: LIST
45383: LIST
45384: PUSH
45385: LD_INT 2
45387: NEG
45388: PUSH
45389: LD_INT 1
45391: NEG
45392: PUSH
45393: EMPTY
45394: LIST
45395: LIST
45396: PUSH
45397: LD_INT 2
45399: NEG
45400: PUSH
45401: LD_INT 2
45403: NEG
45404: PUSH
45405: EMPTY
45406: LIST
45407: LIST
45408: PUSH
45409: EMPTY
45410: LIST
45411: LIST
45412: LIST
45413: LIST
45414: LIST
45415: LIST
45416: LIST
45417: LIST
45418: LIST
45419: LIST
45420: LIST
45421: LIST
45422: LIST
45423: LIST
45424: LIST
45425: LIST
45426: LIST
45427: LIST
45428: LIST
45429: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45430: LD_ADDR_VAR 0 22
45434: PUSH
45435: LD_INT 0
45437: PUSH
45438: LD_INT 0
45440: PUSH
45441: EMPTY
45442: LIST
45443: LIST
45444: PUSH
45445: LD_INT 0
45447: PUSH
45448: LD_INT 1
45450: NEG
45451: PUSH
45452: EMPTY
45453: LIST
45454: LIST
45455: PUSH
45456: LD_INT 1
45458: PUSH
45459: LD_INT 0
45461: PUSH
45462: EMPTY
45463: LIST
45464: LIST
45465: PUSH
45466: LD_INT 1
45468: PUSH
45469: LD_INT 1
45471: PUSH
45472: EMPTY
45473: LIST
45474: LIST
45475: PUSH
45476: LD_INT 0
45478: PUSH
45479: LD_INT 1
45481: PUSH
45482: EMPTY
45483: LIST
45484: LIST
45485: PUSH
45486: LD_INT 1
45488: NEG
45489: PUSH
45490: LD_INT 0
45492: PUSH
45493: EMPTY
45494: LIST
45495: LIST
45496: PUSH
45497: LD_INT 1
45499: NEG
45500: PUSH
45501: LD_INT 1
45503: NEG
45504: PUSH
45505: EMPTY
45506: LIST
45507: LIST
45508: PUSH
45509: LD_INT 1
45511: NEG
45512: PUSH
45513: LD_INT 2
45515: NEG
45516: PUSH
45517: EMPTY
45518: LIST
45519: LIST
45520: PUSH
45521: LD_INT 0
45523: PUSH
45524: LD_INT 2
45526: NEG
45527: PUSH
45528: EMPTY
45529: LIST
45530: LIST
45531: PUSH
45532: LD_INT 1
45534: PUSH
45535: LD_INT 1
45537: NEG
45538: PUSH
45539: EMPTY
45540: LIST
45541: LIST
45542: PUSH
45543: LD_INT 2
45545: PUSH
45546: LD_INT 0
45548: PUSH
45549: EMPTY
45550: LIST
45551: LIST
45552: PUSH
45553: LD_INT 2
45555: PUSH
45556: LD_INT 1
45558: PUSH
45559: EMPTY
45560: LIST
45561: LIST
45562: PUSH
45563: LD_INT 2
45565: PUSH
45566: LD_INT 2
45568: PUSH
45569: EMPTY
45570: LIST
45571: LIST
45572: PUSH
45573: LD_INT 1
45575: PUSH
45576: LD_INT 2
45578: PUSH
45579: EMPTY
45580: LIST
45581: LIST
45582: PUSH
45583: LD_INT 0
45585: PUSH
45586: LD_INT 2
45588: PUSH
45589: EMPTY
45590: LIST
45591: LIST
45592: PUSH
45593: LD_INT 1
45595: NEG
45596: PUSH
45597: LD_INT 1
45599: PUSH
45600: EMPTY
45601: LIST
45602: LIST
45603: PUSH
45604: LD_INT 2
45606: NEG
45607: PUSH
45608: LD_INT 0
45610: PUSH
45611: EMPTY
45612: LIST
45613: LIST
45614: PUSH
45615: LD_INT 2
45617: NEG
45618: PUSH
45619: LD_INT 1
45621: NEG
45622: PUSH
45623: EMPTY
45624: LIST
45625: LIST
45626: PUSH
45627: LD_INT 2
45629: NEG
45630: PUSH
45631: LD_INT 2
45633: NEG
45634: PUSH
45635: EMPTY
45636: LIST
45637: LIST
45638: PUSH
45639: EMPTY
45640: LIST
45641: LIST
45642: LIST
45643: LIST
45644: LIST
45645: LIST
45646: LIST
45647: LIST
45648: LIST
45649: LIST
45650: LIST
45651: LIST
45652: LIST
45653: LIST
45654: LIST
45655: LIST
45656: LIST
45657: LIST
45658: LIST
45659: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
45660: LD_ADDR_VAR 0 23
45664: PUSH
45665: LD_INT 0
45667: PUSH
45668: LD_INT 0
45670: PUSH
45671: EMPTY
45672: LIST
45673: LIST
45674: PUSH
45675: LD_INT 0
45677: PUSH
45678: LD_INT 1
45680: NEG
45681: PUSH
45682: EMPTY
45683: LIST
45684: LIST
45685: PUSH
45686: LD_INT 1
45688: PUSH
45689: LD_INT 0
45691: PUSH
45692: EMPTY
45693: LIST
45694: LIST
45695: PUSH
45696: LD_INT 1
45698: PUSH
45699: LD_INT 1
45701: PUSH
45702: EMPTY
45703: LIST
45704: LIST
45705: PUSH
45706: LD_INT 0
45708: PUSH
45709: LD_INT 1
45711: PUSH
45712: EMPTY
45713: LIST
45714: LIST
45715: PUSH
45716: LD_INT 1
45718: NEG
45719: PUSH
45720: LD_INT 0
45722: PUSH
45723: EMPTY
45724: LIST
45725: LIST
45726: PUSH
45727: LD_INT 1
45729: NEG
45730: PUSH
45731: LD_INT 1
45733: NEG
45734: PUSH
45735: EMPTY
45736: LIST
45737: LIST
45738: PUSH
45739: LD_INT 1
45741: NEG
45742: PUSH
45743: LD_INT 2
45745: NEG
45746: PUSH
45747: EMPTY
45748: LIST
45749: LIST
45750: PUSH
45751: LD_INT 0
45753: PUSH
45754: LD_INT 2
45756: NEG
45757: PUSH
45758: EMPTY
45759: LIST
45760: LIST
45761: PUSH
45762: LD_INT 1
45764: PUSH
45765: LD_INT 1
45767: NEG
45768: PUSH
45769: EMPTY
45770: LIST
45771: LIST
45772: PUSH
45773: LD_INT 2
45775: PUSH
45776: LD_INT 0
45778: PUSH
45779: EMPTY
45780: LIST
45781: LIST
45782: PUSH
45783: LD_INT 2
45785: PUSH
45786: LD_INT 1
45788: PUSH
45789: EMPTY
45790: LIST
45791: LIST
45792: PUSH
45793: LD_INT 2
45795: PUSH
45796: LD_INT 2
45798: PUSH
45799: EMPTY
45800: LIST
45801: LIST
45802: PUSH
45803: LD_INT 1
45805: PUSH
45806: LD_INT 2
45808: PUSH
45809: EMPTY
45810: LIST
45811: LIST
45812: PUSH
45813: LD_INT 0
45815: PUSH
45816: LD_INT 2
45818: PUSH
45819: EMPTY
45820: LIST
45821: LIST
45822: PUSH
45823: LD_INT 1
45825: NEG
45826: PUSH
45827: LD_INT 1
45829: PUSH
45830: EMPTY
45831: LIST
45832: LIST
45833: PUSH
45834: LD_INT 2
45836: NEG
45837: PUSH
45838: LD_INT 0
45840: PUSH
45841: EMPTY
45842: LIST
45843: LIST
45844: PUSH
45845: LD_INT 2
45847: NEG
45848: PUSH
45849: LD_INT 1
45851: NEG
45852: PUSH
45853: EMPTY
45854: LIST
45855: LIST
45856: PUSH
45857: LD_INT 2
45859: NEG
45860: PUSH
45861: LD_INT 2
45863: NEG
45864: PUSH
45865: EMPTY
45866: LIST
45867: LIST
45868: PUSH
45869: LD_INT 2
45871: NEG
45872: PUSH
45873: LD_INT 3
45875: NEG
45876: PUSH
45877: EMPTY
45878: LIST
45879: LIST
45880: PUSH
45881: LD_INT 1
45883: NEG
45884: PUSH
45885: LD_INT 3
45887: NEG
45888: PUSH
45889: EMPTY
45890: LIST
45891: LIST
45892: PUSH
45893: LD_INT 1
45895: PUSH
45896: LD_INT 2
45898: NEG
45899: PUSH
45900: EMPTY
45901: LIST
45902: LIST
45903: PUSH
45904: LD_INT 2
45906: PUSH
45907: LD_INT 1
45909: NEG
45910: PUSH
45911: EMPTY
45912: LIST
45913: LIST
45914: PUSH
45915: EMPTY
45916: LIST
45917: LIST
45918: LIST
45919: LIST
45920: LIST
45921: LIST
45922: LIST
45923: LIST
45924: LIST
45925: LIST
45926: LIST
45927: LIST
45928: LIST
45929: LIST
45930: LIST
45931: LIST
45932: LIST
45933: LIST
45934: LIST
45935: LIST
45936: LIST
45937: LIST
45938: LIST
45939: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
45940: LD_ADDR_VAR 0 24
45944: PUSH
45945: LD_INT 0
45947: PUSH
45948: LD_INT 0
45950: PUSH
45951: EMPTY
45952: LIST
45953: LIST
45954: PUSH
45955: LD_INT 0
45957: PUSH
45958: LD_INT 1
45960: NEG
45961: PUSH
45962: EMPTY
45963: LIST
45964: LIST
45965: PUSH
45966: LD_INT 1
45968: PUSH
45969: LD_INT 0
45971: PUSH
45972: EMPTY
45973: LIST
45974: LIST
45975: PUSH
45976: LD_INT 1
45978: PUSH
45979: LD_INT 1
45981: PUSH
45982: EMPTY
45983: LIST
45984: LIST
45985: PUSH
45986: LD_INT 0
45988: PUSH
45989: LD_INT 1
45991: PUSH
45992: EMPTY
45993: LIST
45994: LIST
45995: PUSH
45996: LD_INT 1
45998: NEG
45999: PUSH
46000: LD_INT 0
46002: PUSH
46003: EMPTY
46004: LIST
46005: LIST
46006: PUSH
46007: LD_INT 1
46009: NEG
46010: PUSH
46011: LD_INT 1
46013: NEG
46014: PUSH
46015: EMPTY
46016: LIST
46017: LIST
46018: PUSH
46019: LD_INT 1
46021: NEG
46022: PUSH
46023: LD_INT 2
46025: NEG
46026: PUSH
46027: EMPTY
46028: LIST
46029: LIST
46030: PUSH
46031: LD_INT 0
46033: PUSH
46034: LD_INT 2
46036: NEG
46037: PUSH
46038: EMPTY
46039: LIST
46040: LIST
46041: PUSH
46042: LD_INT 1
46044: PUSH
46045: LD_INT 1
46047: NEG
46048: PUSH
46049: EMPTY
46050: LIST
46051: LIST
46052: PUSH
46053: LD_INT 2
46055: PUSH
46056: LD_INT 0
46058: PUSH
46059: EMPTY
46060: LIST
46061: LIST
46062: PUSH
46063: LD_INT 2
46065: PUSH
46066: LD_INT 1
46068: PUSH
46069: EMPTY
46070: LIST
46071: LIST
46072: PUSH
46073: LD_INT 2
46075: PUSH
46076: LD_INT 2
46078: PUSH
46079: EMPTY
46080: LIST
46081: LIST
46082: PUSH
46083: LD_INT 1
46085: PUSH
46086: LD_INT 2
46088: PUSH
46089: EMPTY
46090: LIST
46091: LIST
46092: PUSH
46093: LD_INT 0
46095: PUSH
46096: LD_INT 2
46098: PUSH
46099: EMPTY
46100: LIST
46101: LIST
46102: PUSH
46103: LD_INT 1
46105: NEG
46106: PUSH
46107: LD_INT 1
46109: PUSH
46110: EMPTY
46111: LIST
46112: LIST
46113: PUSH
46114: LD_INT 2
46116: NEG
46117: PUSH
46118: LD_INT 0
46120: PUSH
46121: EMPTY
46122: LIST
46123: LIST
46124: PUSH
46125: LD_INT 2
46127: NEG
46128: PUSH
46129: LD_INT 1
46131: NEG
46132: PUSH
46133: EMPTY
46134: LIST
46135: LIST
46136: PUSH
46137: LD_INT 2
46139: NEG
46140: PUSH
46141: LD_INT 2
46143: NEG
46144: PUSH
46145: EMPTY
46146: LIST
46147: LIST
46148: PUSH
46149: LD_INT 1
46151: PUSH
46152: LD_INT 2
46154: NEG
46155: PUSH
46156: EMPTY
46157: LIST
46158: LIST
46159: PUSH
46160: LD_INT 2
46162: PUSH
46163: LD_INT 1
46165: NEG
46166: PUSH
46167: EMPTY
46168: LIST
46169: LIST
46170: PUSH
46171: LD_INT 3
46173: PUSH
46174: LD_INT 1
46176: PUSH
46177: EMPTY
46178: LIST
46179: LIST
46180: PUSH
46181: LD_INT 3
46183: PUSH
46184: LD_INT 2
46186: PUSH
46187: EMPTY
46188: LIST
46189: LIST
46190: PUSH
46191: EMPTY
46192: LIST
46193: LIST
46194: LIST
46195: LIST
46196: LIST
46197: LIST
46198: LIST
46199: LIST
46200: LIST
46201: LIST
46202: LIST
46203: LIST
46204: LIST
46205: LIST
46206: LIST
46207: LIST
46208: LIST
46209: LIST
46210: LIST
46211: LIST
46212: LIST
46213: LIST
46214: LIST
46215: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
46216: LD_ADDR_VAR 0 25
46220: PUSH
46221: LD_INT 0
46223: PUSH
46224: LD_INT 0
46226: PUSH
46227: EMPTY
46228: LIST
46229: LIST
46230: PUSH
46231: LD_INT 0
46233: PUSH
46234: LD_INT 1
46236: NEG
46237: PUSH
46238: EMPTY
46239: LIST
46240: LIST
46241: PUSH
46242: LD_INT 1
46244: PUSH
46245: LD_INT 0
46247: PUSH
46248: EMPTY
46249: LIST
46250: LIST
46251: PUSH
46252: LD_INT 1
46254: PUSH
46255: LD_INT 1
46257: PUSH
46258: EMPTY
46259: LIST
46260: LIST
46261: PUSH
46262: LD_INT 0
46264: PUSH
46265: LD_INT 1
46267: PUSH
46268: EMPTY
46269: LIST
46270: LIST
46271: PUSH
46272: LD_INT 1
46274: NEG
46275: PUSH
46276: LD_INT 0
46278: PUSH
46279: EMPTY
46280: LIST
46281: LIST
46282: PUSH
46283: LD_INT 1
46285: NEG
46286: PUSH
46287: LD_INT 1
46289: NEG
46290: PUSH
46291: EMPTY
46292: LIST
46293: LIST
46294: PUSH
46295: LD_INT 1
46297: NEG
46298: PUSH
46299: LD_INT 2
46301: NEG
46302: PUSH
46303: EMPTY
46304: LIST
46305: LIST
46306: PUSH
46307: LD_INT 0
46309: PUSH
46310: LD_INT 2
46312: NEG
46313: PUSH
46314: EMPTY
46315: LIST
46316: LIST
46317: PUSH
46318: LD_INT 1
46320: PUSH
46321: LD_INT 1
46323: NEG
46324: PUSH
46325: EMPTY
46326: LIST
46327: LIST
46328: PUSH
46329: LD_INT 2
46331: PUSH
46332: LD_INT 0
46334: PUSH
46335: EMPTY
46336: LIST
46337: LIST
46338: PUSH
46339: LD_INT 2
46341: PUSH
46342: LD_INT 1
46344: PUSH
46345: EMPTY
46346: LIST
46347: LIST
46348: PUSH
46349: LD_INT 2
46351: PUSH
46352: LD_INT 2
46354: PUSH
46355: EMPTY
46356: LIST
46357: LIST
46358: PUSH
46359: LD_INT 1
46361: PUSH
46362: LD_INT 2
46364: PUSH
46365: EMPTY
46366: LIST
46367: LIST
46368: PUSH
46369: LD_INT 0
46371: PUSH
46372: LD_INT 2
46374: PUSH
46375: EMPTY
46376: LIST
46377: LIST
46378: PUSH
46379: LD_INT 1
46381: NEG
46382: PUSH
46383: LD_INT 1
46385: PUSH
46386: EMPTY
46387: LIST
46388: LIST
46389: PUSH
46390: LD_INT 2
46392: NEG
46393: PUSH
46394: LD_INT 0
46396: PUSH
46397: EMPTY
46398: LIST
46399: LIST
46400: PUSH
46401: LD_INT 2
46403: NEG
46404: PUSH
46405: LD_INT 1
46407: NEG
46408: PUSH
46409: EMPTY
46410: LIST
46411: LIST
46412: PUSH
46413: LD_INT 2
46415: NEG
46416: PUSH
46417: LD_INT 2
46419: NEG
46420: PUSH
46421: EMPTY
46422: LIST
46423: LIST
46424: PUSH
46425: LD_INT 3
46427: PUSH
46428: LD_INT 1
46430: PUSH
46431: EMPTY
46432: LIST
46433: LIST
46434: PUSH
46435: LD_INT 3
46437: PUSH
46438: LD_INT 2
46440: PUSH
46441: EMPTY
46442: LIST
46443: LIST
46444: PUSH
46445: LD_INT 2
46447: PUSH
46448: LD_INT 3
46450: PUSH
46451: EMPTY
46452: LIST
46453: LIST
46454: PUSH
46455: LD_INT 1
46457: PUSH
46458: LD_INT 3
46460: PUSH
46461: EMPTY
46462: LIST
46463: LIST
46464: PUSH
46465: EMPTY
46466: LIST
46467: LIST
46468: LIST
46469: LIST
46470: LIST
46471: LIST
46472: LIST
46473: LIST
46474: LIST
46475: LIST
46476: LIST
46477: LIST
46478: LIST
46479: LIST
46480: LIST
46481: LIST
46482: LIST
46483: LIST
46484: LIST
46485: LIST
46486: LIST
46487: LIST
46488: LIST
46489: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
46490: LD_ADDR_VAR 0 26
46494: PUSH
46495: LD_INT 0
46497: PUSH
46498: LD_INT 0
46500: PUSH
46501: EMPTY
46502: LIST
46503: LIST
46504: PUSH
46505: LD_INT 0
46507: PUSH
46508: LD_INT 1
46510: NEG
46511: PUSH
46512: EMPTY
46513: LIST
46514: LIST
46515: PUSH
46516: LD_INT 1
46518: PUSH
46519: LD_INT 0
46521: PUSH
46522: EMPTY
46523: LIST
46524: LIST
46525: PUSH
46526: LD_INT 1
46528: PUSH
46529: LD_INT 1
46531: PUSH
46532: EMPTY
46533: LIST
46534: LIST
46535: PUSH
46536: LD_INT 0
46538: PUSH
46539: LD_INT 1
46541: PUSH
46542: EMPTY
46543: LIST
46544: LIST
46545: PUSH
46546: LD_INT 1
46548: NEG
46549: PUSH
46550: LD_INT 0
46552: PUSH
46553: EMPTY
46554: LIST
46555: LIST
46556: PUSH
46557: LD_INT 1
46559: NEG
46560: PUSH
46561: LD_INT 1
46563: NEG
46564: PUSH
46565: EMPTY
46566: LIST
46567: LIST
46568: PUSH
46569: LD_INT 1
46571: NEG
46572: PUSH
46573: LD_INT 2
46575: NEG
46576: PUSH
46577: EMPTY
46578: LIST
46579: LIST
46580: PUSH
46581: LD_INT 0
46583: PUSH
46584: LD_INT 2
46586: NEG
46587: PUSH
46588: EMPTY
46589: LIST
46590: LIST
46591: PUSH
46592: LD_INT 1
46594: PUSH
46595: LD_INT 1
46597: NEG
46598: PUSH
46599: EMPTY
46600: LIST
46601: LIST
46602: PUSH
46603: LD_INT 2
46605: PUSH
46606: LD_INT 0
46608: PUSH
46609: EMPTY
46610: LIST
46611: LIST
46612: PUSH
46613: LD_INT 2
46615: PUSH
46616: LD_INT 1
46618: PUSH
46619: EMPTY
46620: LIST
46621: LIST
46622: PUSH
46623: LD_INT 2
46625: PUSH
46626: LD_INT 2
46628: PUSH
46629: EMPTY
46630: LIST
46631: LIST
46632: PUSH
46633: LD_INT 1
46635: PUSH
46636: LD_INT 2
46638: PUSH
46639: EMPTY
46640: LIST
46641: LIST
46642: PUSH
46643: LD_INT 0
46645: PUSH
46646: LD_INT 2
46648: PUSH
46649: EMPTY
46650: LIST
46651: LIST
46652: PUSH
46653: LD_INT 1
46655: NEG
46656: PUSH
46657: LD_INT 1
46659: PUSH
46660: EMPTY
46661: LIST
46662: LIST
46663: PUSH
46664: LD_INT 2
46666: NEG
46667: PUSH
46668: LD_INT 0
46670: PUSH
46671: EMPTY
46672: LIST
46673: LIST
46674: PUSH
46675: LD_INT 2
46677: NEG
46678: PUSH
46679: LD_INT 1
46681: NEG
46682: PUSH
46683: EMPTY
46684: LIST
46685: LIST
46686: PUSH
46687: LD_INT 2
46689: NEG
46690: PUSH
46691: LD_INT 2
46693: NEG
46694: PUSH
46695: EMPTY
46696: LIST
46697: LIST
46698: PUSH
46699: LD_INT 2
46701: PUSH
46702: LD_INT 3
46704: PUSH
46705: EMPTY
46706: LIST
46707: LIST
46708: PUSH
46709: LD_INT 1
46711: PUSH
46712: LD_INT 3
46714: PUSH
46715: EMPTY
46716: LIST
46717: LIST
46718: PUSH
46719: LD_INT 1
46721: NEG
46722: PUSH
46723: LD_INT 2
46725: PUSH
46726: EMPTY
46727: LIST
46728: LIST
46729: PUSH
46730: LD_INT 2
46732: NEG
46733: PUSH
46734: LD_INT 1
46736: PUSH
46737: EMPTY
46738: LIST
46739: LIST
46740: PUSH
46741: EMPTY
46742: LIST
46743: LIST
46744: LIST
46745: LIST
46746: LIST
46747: LIST
46748: LIST
46749: LIST
46750: LIST
46751: LIST
46752: LIST
46753: LIST
46754: LIST
46755: LIST
46756: LIST
46757: LIST
46758: LIST
46759: LIST
46760: LIST
46761: LIST
46762: LIST
46763: LIST
46764: LIST
46765: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
46766: LD_ADDR_VAR 0 27
46770: PUSH
46771: LD_INT 0
46773: PUSH
46774: LD_INT 0
46776: PUSH
46777: EMPTY
46778: LIST
46779: LIST
46780: PUSH
46781: LD_INT 0
46783: PUSH
46784: LD_INT 1
46786: NEG
46787: PUSH
46788: EMPTY
46789: LIST
46790: LIST
46791: PUSH
46792: LD_INT 1
46794: PUSH
46795: LD_INT 0
46797: PUSH
46798: EMPTY
46799: LIST
46800: LIST
46801: PUSH
46802: LD_INT 1
46804: PUSH
46805: LD_INT 1
46807: PUSH
46808: EMPTY
46809: LIST
46810: LIST
46811: PUSH
46812: LD_INT 0
46814: PUSH
46815: LD_INT 1
46817: PUSH
46818: EMPTY
46819: LIST
46820: LIST
46821: PUSH
46822: LD_INT 1
46824: NEG
46825: PUSH
46826: LD_INT 0
46828: PUSH
46829: EMPTY
46830: LIST
46831: LIST
46832: PUSH
46833: LD_INT 1
46835: NEG
46836: PUSH
46837: LD_INT 1
46839: NEG
46840: PUSH
46841: EMPTY
46842: LIST
46843: LIST
46844: PUSH
46845: LD_INT 1
46847: NEG
46848: PUSH
46849: LD_INT 2
46851: NEG
46852: PUSH
46853: EMPTY
46854: LIST
46855: LIST
46856: PUSH
46857: LD_INT 0
46859: PUSH
46860: LD_INT 2
46862: NEG
46863: PUSH
46864: EMPTY
46865: LIST
46866: LIST
46867: PUSH
46868: LD_INT 1
46870: PUSH
46871: LD_INT 1
46873: NEG
46874: PUSH
46875: EMPTY
46876: LIST
46877: LIST
46878: PUSH
46879: LD_INT 2
46881: PUSH
46882: LD_INT 0
46884: PUSH
46885: EMPTY
46886: LIST
46887: LIST
46888: PUSH
46889: LD_INT 2
46891: PUSH
46892: LD_INT 1
46894: PUSH
46895: EMPTY
46896: LIST
46897: LIST
46898: PUSH
46899: LD_INT 2
46901: PUSH
46902: LD_INT 2
46904: PUSH
46905: EMPTY
46906: LIST
46907: LIST
46908: PUSH
46909: LD_INT 1
46911: PUSH
46912: LD_INT 2
46914: PUSH
46915: EMPTY
46916: LIST
46917: LIST
46918: PUSH
46919: LD_INT 0
46921: PUSH
46922: LD_INT 2
46924: PUSH
46925: EMPTY
46926: LIST
46927: LIST
46928: PUSH
46929: LD_INT 1
46931: NEG
46932: PUSH
46933: LD_INT 1
46935: PUSH
46936: EMPTY
46937: LIST
46938: LIST
46939: PUSH
46940: LD_INT 2
46942: NEG
46943: PUSH
46944: LD_INT 0
46946: PUSH
46947: EMPTY
46948: LIST
46949: LIST
46950: PUSH
46951: LD_INT 2
46953: NEG
46954: PUSH
46955: LD_INT 1
46957: NEG
46958: PUSH
46959: EMPTY
46960: LIST
46961: LIST
46962: PUSH
46963: LD_INT 2
46965: NEG
46966: PUSH
46967: LD_INT 2
46969: NEG
46970: PUSH
46971: EMPTY
46972: LIST
46973: LIST
46974: PUSH
46975: LD_INT 1
46977: NEG
46978: PUSH
46979: LD_INT 2
46981: PUSH
46982: EMPTY
46983: LIST
46984: LIST
46985: PUSH
46986: LD_INT 2
46988: NEG
46989: PUSH
46990: LD_INT 1
46992: PUSH
46993: EMPTY
46994: LIST
46995: LIST
46996: PUSH
46997: LD_INT 3
46999: NEG
47000: PUSH
47001: LD_INT 1
47003: NEG
47004: PUSH
47005: EMPTY
47006: LIST
47007: LIST
47008: PUSH
47009: LD_INT 3
47011: NEG
47012: PUSH
47013: LD_INT 2
47015: NEG
47016: PUSH
47017: EMPTY
47018: LIST
47019: LIST
47020: PUSH
47021: EMPTY
47022: LIST
47023: LIST
47024: LIST
47025: LIST
47026: LIST
47027: LIST
47028: LIST
47029: LIST
47030: LIST
47031: LIST
47032: LIST
47033: LIST
47034: LIST
47035: LIST
47036: LIST
47037: LIST
47038: LIST
47039: LIST
47040: LIST
47041: LIST
47042: LIST
47043: LIST
47044: LIST
47045: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
47046: LD_ADDR_VAR 0 28
47050: PUSH
47051: LD_INT 0
47053: PUSH
47054: LD_INT 0
47056: PUSH
47057: EMPTY
47058: LIST
47059: LIST
47060: PUSH
47061: LD_INT 0
47063: PUSH
47064: LD_INT 1
47066: NEG
47067: PUSH
47068: EMPTY
47069: LIST
47070: LIST
47071: PUSH
47072: LD_INT 1
47074: PUSH
47075: LD_INT 0
47077: PUSH
47078: EMPTY
47079: LIST
47080: LIST
47081: PUSH
47082: LD_INT 1
47084: PUSH
47085: LD_INT 1
47087: PUSH
47088: EMPTY
47089: LIST
47090: LIST
47091: PUSH
47092: LD_INT 0
47094: PUSH
47095: LD_INT 1
47097: PUSH
47098: EMPTY
47099: LIST
47100: LIST
47101: PUSH
47102: LD_INT 1
47104: NEG
47105: PUSH
47106: LD_INT 0
47108: PUSH
47109: EMPTY
47110: LIST
47111: LIST
47112: PUSH
47113: LD_INT 1
47115: NEG
47116: PUSH
47117: LD_INT 1
47119: NEG
47120: PUSH
47121: EMPTY
47122: LIST
47123: LIST
47124: PUSH
47125: LD_INT 1
47127: NEG
47128: PUSH
47129: LD_INT 2
47131: NEG
47132: PUSH
47133: EMPTY
47134: LIST
47135: LIST
47136: PUSH
47137: LD_INT 0
47139: PUSH
47140: LD_INT 2
47142: NEG
47143: PUSH
47144: EMPTY
47145: LIST
47146: LIST
47147: PUSH
47148: LD_INT 1
47150: PUSH
47151: LD_INT 1
47153: NEG
47154: PUSH
47155: EMPTY
47156: LIST
47157: LIST
47158: PUSH
47159: LD_INT 2
47161: PUSH
47162: LD_INT 0
47164: PUSH
47165: EMPTY
47166: LIST
47167: LIST
47168: PUSH
47169: LD_INT 2
47171: PUSH
47172: LD_INT 1
47174: PUSH
47175: EMPTY
47176: LIST
47177: LIST
47178: PUSH
47179: LD_INT 2
47181: PUSH
47182: LD_INT 2
47184: PUSH
47185: EMPTY
47186: LIST
47187: LIST
47188: PUSH
47189: LD_INT 1
47191: PUSH
47192: LD_INT 2
47194: PUSH
47195: EMPTY
47196: LIST
47197: LIST
47198: PUSH
47199: LD_INT 0
47201: PUSH
47202: LD_INT 2
47204: PUSH
47205: EMPTY
47206: LIST
47207: LIST
47208: PUSH
47209: LD_INT 1
47211: NEG
47212: PUSH
47213: LD_INT 1
47215: PUSH
47216: EMPTY
47217: LIST
47218: LIST
47219: PUSH
47220: LD_INT 2
47222: NEG
47223: PUSH
47224: LD_INT 0
47226: PUSH
47227: EMPTY
47228: LIST
47229: LIST
47230: PUSH
47231: LD_INT 2
47233: NEG
47234: PUSH
47235: LD_INT 1
47237: NEG
47238: PUSH
47239: EMPTY
47240: LIST
47241: LIST
47242: PUSH
47243: LD_INT 2
47245: NEG
47246: PUSH
47247: LD_INT 2
47249: NEG
47250: PUSH
47251: EMPTY
47252: LIST
47253: LIST
47254: PUSH
47255: LD_INT 2
47257: NEG
47258: PUSH
47259: LD_INT 3
47261: NEG
47262: PUSH
47263: EMPTY
47264: LIST
47265: LIST
47266: PUSH
47267: LD_INT 1
47269: NEG
47270: PUSH
47271: LD_INT 3
47273: NEG
47274: PUSH
47275: EMPTY
47276: LIST
47277: LIST
47278: PUSH
47279: LD_INT 3
47281: NEG
47282: PUSH
47283: LD_INT 1
47285: NEG
47286: PUSH
47287: EMPTY
47288: LIST
47289: LIST
47290: PUSH
47291: LD_INT 3
47293: NEG
47294: PUSH
47295: LD_INT 2
47297: NEG
47298: PUSH
47299: EMPTY
47300: LIST
47301: LIST
47302: PUSH
47303: EMPTY
47304: LIST
47305: LIST
47306: LIST
47307: LIST
47308: LIST
47309: LIST
47310: LIST
47311: LIST
47312: LIST
47313: LIST
47314: LIST
47315: LIST
47316: LIST
47317: LIST
47318: LIST
47319: LIST
47320: LIST
47321: LIST
47322: LIST
47323: LIST
47324: LIST
47325: LIST
47326: LIST
47327: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
47328: LD_ADDR_VAR 0 29
47332: PUSH
47333: LD_INT 0
47335: PUSH
47336: LD_INT 0
47338: PUSH
47339: EMPTY
47340: LIST
47341: LIST
47342: PUSH
47343: LD_INT 0
47345: PUSH
47346: LD_INT 1
47348: NEG
47349: PUSH
47350: EMPTY
47351: LIST
47352: LIST
47353: PUSH
47354: LD_INT 1
47356: PUSH
47357: LD_INT 0
47359: PUSH
47360: EMPTY
47361: LIST
47362: LIST
47363: PUSH
47364: LD_INT 1
47366: PUSH
47367: LD_INT 1
47369: PUSH
47370: EMPTY
47371: LIST
47372: LIST
47373: PUSH
47374: LD_INT 0
47376: PUSH
47377: LD_INT 1
47379: PUSH
47380: EMPTY
47381: LIST
47382: LIST
47383: PUSH
47384: LD_INT 1
47386: NEG
47387: PUSH
47388: LD_INT 0
47390: PUSH
47391: EMPTY
47392: LIST
47393: LIST
47394: PUSH
47395: LD_INT 1
47397: NEG
47398: PUSH
47399: LD_INT 1
47401: NEG
47402: PUSH
47403: EMPTY
47404: LIST
47405: LIST
47406: PUSH
47407: LD_INT 1
47409: NEG
47410: PUSH
47411: LD_INT 2
47413: NEG
47414: PUSH
47415: EMPTY
47416: LIST
47417: LIST
47418: PUSH
47419: LD_INT 0
47421: PUSH
47422: LD_INT 2
47424: NEG
47425: PUSH
47426: EMPTY
47427: LIST
47428: LIST
47429: PUSH
47430: LD_INT 1
47432: PUSH
47433: LD_INT 1
47435: NEG
47436: PUSH
47437: EMPTY
47438: LIST
47439: LIST
47440: PUSH
47441: LD_INT 2
47443: PUSH
47444: LD_INT 0
47446: PUSH
47447: EMPTY
47448: LIST
47449: LIST
47450: PUSH
47451: LD_INT 2
47453: PUSH
47454: LD_INT 1
47456: PUSH
47457: EMPTY
47458: LIST
47459: LIST
47460: PUSH
47461: LD_INT 1
47463: PUSH
47464: LD_INT 2
47466: PUSH
47467: EMPTY
47468: LIST
47469: LIST
47470: PUSH
47471: LD_INT 0
47473: PUSH
47474: LD_INT 2
47476: PUSH
47477: EMPTY
47478: LIST
47479: LIST
47480: PUSH
47481: LD_INT 1
47483: NEG
47484: PUSH
47485: LD_INT 1
47487: PUSH
47488: EMPTY
47489: LIST
47490: LIST
47491: PUSH
47492: LD_INT 2
47494: NEG
47495: PUSH
47496: LD_INT 1
47498: NEG
47499: PUSH
47500: EMPTY
47501: LIST
47502: LIST
47503: PUSH
47504: LD_INT 2
47506: NEG
47507: PUSH
47508: LD_INT 2
47510: NEG
47511: PUSH
47512: EMPTY
47513: LIST
47514: LIST
47515: PUSH
47516: LD_INT 2
47518: NEG
47519: PUSH
47520: LD_INT 3
47522: NEG
47523: PUSH
47524: EMPTY
47525: LIST
47526: LIST
47527: PUSH
47528: LD_INT 2
47530: PUSH
47531: LD_INT 1
47533: NEG
47534: PUSH
47535: EMPTY
47536: LIST
47537: LIST
47538: PUSH
47539: LD_INT 3
47541: PUSH
47542: LD_INT 1
47544: PUSH
47545: EMPTY
47546: LIST
47547: LIST
47548: PUSH
47549: LD_INT 1
47551: PUSH
47552: LD_INT 3
47554: PUSH
47555: EMPTY
47556: LIST
47557: LIST
47558: PUSH
47559: LD_INT 1
47561: NEG
47562: PUSH
47563: LD_INT 2
47565: PUSH
47566: EMPTY
47567: LIST
47568: LIST
47569: PUSH
47570: LD_INT 3
47572: NEG
47573: PUSH
47574: LD_INT 2
47576: NEG
47577: PUSH
47578: EMPTY
47579: LIST
47580: LIST
47581: PUSH
47582: EMPTY
47583: LIST
47584: LIST
47585: LIST
47586: LIST
47587: LIST
47588: LIST
47589: LIST
47590: LIST
47591: LIST
47592: LIST
47593: LIST
47594: LIST
47595: LIST
47596: LIST
47597: LIST
47598: LIST
47599: LIST
47600: LIST
47601: LIST
47602: LIST
47603: LIST
47604: LIST
47605: LIST
47606: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
47607: LD_ADDR_VAR 0 30
47611: PUSH
47612: LD_INT 0
47614: PUSH
47615: LD_INT 0
47617: PUSH
47618: EMPTY
47619: LIST
47620: LIST
47621: PUSH
47622: LD_INT 0
47624: PUSH
47625: LD_INT 1
47627: NEG
47628: PUSH
47629: EMPTY
47630: LIST
47631: LIST
47632: PUSH
47633: LD_INT 1
47635: PUSH
47636: LD_INT 0
47638: PUSH
47639: EMPTY
47640: LIST
47641: LIST
47642: PUSH
47643: LD_INT 1
47645: PUSH
47646: LD_INT 1
47648: PUSH
47649: EMPTY
47650: LIST
47651: LIST
47652: PUSH
47653: LD_INT 0
47655: PUSH
47656: LD_INT 1
47658: PUSH
47659: EMPTY
47660: LIST
47661: LIST
47662: PUSH
47663: LD_INT 1
47665: NEG
47666: PUSH
47667: LD_INT 0
47669: PUSH
47670: EMPTY
47671: LIST
47672: LIST
47673: PUSH
47674: LD_INT 1
47676: NEG
47677: PUSH
47678: LD_INT 1
47680: NEG
47681: PUSH
47682: EMPTY
47683: LIST
47684: LIST
47685: PUSH
47686: LD_INT 1
47688: NEG
47689: PUSH
47690: LD_INT 2
47692: NEG
47693: PUSH
47694: EMPTY
47695: LIST
47696: LIST
47697: PUSH
47698: LD_INT 0
47700: PUSH
47701: LD_INT 2
47703: NEG
47704: PUSH
47705: EMPTY
47706: LIST
47707: LIST
47708: PUSH
47709: LD_INT 1
47711: PUSH
47712: LD_INT 1
47714: NEG
47715: PUSH
47716: EMPTY
47717: LIST
47718: LIST
47719: PUSH
47720: LD_INT 2
47722: PUSH
47723: LD_INT 0
47725: PUSH
47726: EMPTY
47727: LIST
47728: LIST
47729: PUSH
47730: LD_INT 2
47732: PUSH
47733: LD_INT 1
47735: PUSH
47736: EMPTY
47737: LIST
47738: LIST
47739: PUSH
47740: LD_INT 2
47742: PUSH
47743: LD_INT 2
47745: PUSH
47746: EMPTY
47747: LIST
47748: LIST
47749: PUSH
47750: LD_INT 1
47752: PUSH
47753: LD_INT 2
47755: PUSH
47756: EMPTY
47757: LIST
47758: LIST
47759: PUSH
47760: LD_INT 1
47762: NEG
47763: PUSH
47764: LD_INT 1
47766: PUSH
47767: EMPTY
47768: LIST
47769: LIST
47770: PUSH
47771: LD_INT 2
47773: NEG
47774: PUSH
47775: LD_INT 0
47777: PUSH
47778: EMPTY
47779: LIST
47780: LIST
47781: PUSH
47782: LD_INT 2
47784: NEG
47785: PUSH
47786: LD_INT 1
47788: NEG
47789: PUSH
47790: EMPTY
47791: LIST
47792: LIST
47793: PUSH
47794: LD_INT 1
47796: NEG
47797: PUSH
47798: LD_INT 3
47800: NEG
47801: PUSH
47802: EMPTY
47803: LIST
47804: LIST
47805: PUSH
47806: LD_INT 1
47808: PUSH
47809: LD_INT 2
47811: NEG
47812: PUSH
47813: EMPTY
47814: LIST
47815: LIST
47816: PUSH
47817: LD_INT 3
47819: PUSH
47820: LD_INT 2
47822: PUSH
47823: EMPTY
47824: LIST
47825: LIST
47826: PUSH
47827: LD_INT 2
47829: PUSH
47830: LD_INT 3
47832: PUSH
47833: EMPTY
47834: LIST
47835: LIST
47836: PUSH
47837: LD_INT 2
47839: NEG
47840: PUSH
47841: LD_INT 1
47843: PUSH
47844: EMPTY
47845: LIST
47846: LIST
47847: PUSH
47848: LD_INT 3
47850: NEG
47851: PUSH
47852: LD_INT 1
47854: NEG
47855: PUSH
47856: EMPTY
47857: LIST
47858: LIST
47859: PUSH
47860: EMPTY
47861: LIST
47862: LIST
47863: LIST
47864: LIST
47865: LIST
47866: LIST
47867: LIST
47868: LIST
47869: LIST
47870: LIST
47871: LIST
47872: LIST
47873: LIST
47874: LIST
47875: LIST
47876: LIST
47877: LIST
47878: LIST
47879: LIST
47880: LIST
47881: LIST
47882: LIST
47883: LIST
47884: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
47885: LD_ADDR_VAR 0 31
47889: PUSH
47890: LD_INT 0
47892: PUSH
47893: LD_INT 0
47895: PUSH
47896: EMPTY
47897: LIST
47898: LIST
47899: PUSH
47900: LD_INT 0
47902: PUSH
47903: LD_INT 1
47905: NEG
47906: PUSH
47907: EMPTY
47908: LIST
47909: LIST
47910: PUSH
47911: LD_INT 1
47913: PUSH
47914: LD_INT 0
47916: PUSH
47917: EMPTY
47918: LIST
47919: LIST
47920: PUSH
47921: LD_INT 1
47923: PUSH
47924: LD_INT 1
47926: PUSH
47927: EMPTY
47928: LIST
47929: LIST
47930: PUSH
47931: LD_INT 0
47933: PUSH
47934: LD_INT 1
47936: PUSH
47937: EMPTY
47938: LIST
47939: LIST
47940: PUSH
47941: LD_INT 1
47943: NEG
47944: PUSH
47945: LD_INT 0
47947: PUSH
47948: EMPTY
47949: LIST
47950: LIST
47951: PUSH
47952: LD_INT 1
47954: NEG
47955: PUSH
47956: LD_INT 1
47958: NEG
47959: PUSH
47960: EMPTY
47961: LIST
47962: LIST
47963: PUSH
47964: LD_INT 1
47966: NEG
47967: PUSH
47968: LD_INT 2
47970: NEG
47971: PUSH
47972: EMPTY
47973: LIST
47974: LIST
47975: PUSH
47976: LD_INT 1
47978: PUSH
47979: LD_INT 1
47981: NEG
47982: PUSH
47983: EMPTY
47984: LIST
47985: LIST
47986: PUSH
47987: LD_INT 2
47989: PUSH
47990: LD_INT 0
47992: PUSH
47993: EMPTY
47994: LIST
47995: LIST
47996: PUSH
47997: LD_INT 2
47999: PUSH
48000: LD_INT 1
48002: PUSH
48003: EMPTY
48004: LIST
48005: LIST
48006: PUSH
48007: LD_INT 2
48009: PUSH
48010: LD_INT 2
48012: PUSH
48013: EMPTY
48014: LIST
48015: LIST
48016: PUSH
48017: LD_INT 1
48019: PUSH
48020: LD_INT 2
48022: PUSH
48023: EMPTY
48024: LIST
48025: LIST
48026: PUSH
48027: LD_INT 0
48029: PUSH
48030: LD_INT 2
48032: PUSH
48033: EMPTY
48034: LIST
48035: LIST
48036: PUSH
48037: LD_INT 1
48039: NEG
48040: PUSH
48041: LD_INT 1
48043: PUSH
48044: EMPTY
48045: LIST
48046: LIST
48047: PUSH
48048: LD_INT 2
48050: NEG
48051: PUSH
48052: LD_INT 1
48054: NEG
48055: PUSH
48056: EMPTY
48057: LIST
48058: LIST
48059: PUSH
48060: LD_INT 2
48062: NEG
48063: PUSH
48064: LD_INT 2
48066: NEG
48067: PUSH
48068: EMPTY
48069: LIST
48070: LIST
48071: PUSH
48072: LD_INT 2
48074: NEG
48075: PUSH
48076: LD_INT 3
48078: NEG
48079: PUSH
48080: EMPTY
48081: LIST
48082: LIST
48083: PUSH
48084: LD_INT 2
48086: PUSH
48087: LD_INT 1
48089: NEG
48090: PUSH
48091: EMPTY
48092: LIST
48093: LIST
48094: PUSH
48095: LD_INT 3
48097: PUSH
48098: LD_INT 1
48100: PUSH
48101: EMPTY
48102: LIST
48103: LIST
48104: PUSH
48105: LD_INT 1
48107: PUSH
48108: LD_INT 3
48110: PUSH
48111: EMPTY
48112: LIST
48113: LIST
48114: PUSH
48115: LD_INT 1
48117: NEG
48118: PUSH
48119: LD_INT 2
48121: PUSH
48122: EMPTY
48123: LIST
48124: LIST
48125: PUSH
48126: LD_INT 3
48128: NEG
48129: PUSH
48130: LD_INT 2
48132: NEG
48133: PUSH
48134: EMPTY
48135: LIST
48136: LIST
48137: PUSH
48138: EMPTY
48139: LIST
48140: LIST
48141: LIST
48142: LIST
48143: LIST
48144: LIST
48145: LIST
48146: LIST
48147: LIST
48148: LIST
48149: LIST
48150: LIST
48151: LIST
48152: LIST
48153: LIST
48154: LIST
48155: LIST
48156: LIST
48157: LIST
48158: LIST
48159: LIST
48160: LIST
48161: LIST
48162: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48163: LD_ADDR_VAR 0 32
48167: PUSH
48168: LD_INT 0
48170: PUSH
48171: LD_INT 0
48173: PUSH
48174: EMPTY
48175: LIST
48176: LIST
48177: PUSH
48178: LD_INT 0
48180: PUSH
48181: LD_INT 1
48183: NEG
48184: PUSH
48185: EMPTY
48186: LIST
48187: LIST
48188: PUSH
48189: LD_INT 1
48191: PUSH
48192: LD_INT 0
48194: PUSH
48195: EMPTY
48196: LIST
48197: LIST
48198: PUSH
48199: LD_INT 1
48201: PUSH
48202: LD_INT 1
48204: PUSH
48205: EMPTY
48206: LIST
48207: LIST
48208: PUSH
48209: LD_INT 0
48211: PUSH
48212: LD_INT 1
48214: PUSH
48215: EMPTY
48216: LIST
48217: LIST
48218: PUSH
48219: LD_INT 1
48221: NEG
48222: PUSH
48223: LD_INT 0
48225: PUSH
48226: EMPTY
48227: LIST
48228: LIST
48229: PUSH
48230: LD_INT 1
48232: NEG
48233: PUSH
48234: LD_INT 1
48236: NEG
48237: PUSH
48238: EMPTY
48239: LIST
48240: LIST
48241: PUSH
48242: LD_INT 1
48244: NEG
48245: PUSH
48246: LD_INT 2
48248: NEG
48249: PUSH
48250: EMPTY
48251: LIST
48252: LIST
48253: PUSH
48254: LD_INT 0
48256: PUSH
48257: LD_INT 2
48259: NEG
48260: PUSH
48261: EMPTY
48262: LIST
48263: LIST
48264: PUSH
48265: LD_INT 1
48267: PUSH
48268: LD_INT 1
48270: NEG
48271: PUSH
48272: EMPTY
48273: LIST
48274: LIST
48275: PUSH
48276: LD_INT 2
48278: PUSH
48279: LD_INT 1
48281: PUSH
48282: EMPTY
48283: LIST
48284: LIST
48285: PUSH
48286: LD_INT 2
48288: PUSH
48289: LD_INT 2
48291: PUSH
48292: EMPTY
48293: LIST
48294: LIST
48295: PUSH
48296: LD_INT 1
48298: PUSH
48299: LD_INT 2
48301: PUSH
48302: EMPTY
48303: LIST
48304: LIST
48305: PUSH
48306: LD_INT 0
48308: PUSH
48309: LD_INT 2
48311: PUSH
48312: EMPTY
48313: LIST
48314: LIST
48315: PUSH
48316: LD_INT 1
48318: NEG
48319: PUSH
48320: LD_INT 1
48322: PUSH
48323: EMPTY
48324: LIST
48325: LIST
48326: PUSH
48327: LD_INT 2
48329: NEG
48330: PUSH
48331: LD_INT 0
48333: PUSH
48334: EMPTY
48335: LIST
48336: LIST
48337: PUSH
48338: LD_INT 2
48340: NEG
48341: PUSH
48342: LD_INT 1
48344: NEG
48345: PUSH
48346: EMPTY
48347: LIST
48348: LIST
48349: PUSH
48350: LD_INT 1
48352: NEG
48353: PUSH
48354: LD_INT 3
48356: NEG
48357: PUSH
48358: EMPTY
48359: LIST
48360: LIST
48361: PUSH
48362: LD_INT 1
48364: PUSH
48365: LD_INT 2
48367: NEG
48368: PUSH
48369: EMPTY
48370: LIST
48371: LIST
48372: PUSH
48373: LD_INT 3
48375: PUSH
48376: LD_INT 2
48378: PUSH
48379: EMPTY
48380: LIST
48381: LIST
48382: PUSH
48383: LD_INT 2
48385: PUSH
48386: LD_INT 3
48388: PUSH
48389: EMPTY
48390: LIST
48391: LIST
48392: PUSH
48393: LD_INT 2
48395: NEG
48396: PUSH
48397: LD_INT 1
48399: PUSH
48400: EMPTY
48401: LIST
48402: LIST
48403: PUSH
48404: LD_INT 3
48406: NEG
48407: PUSH
48408: LD_INT 1
48410: NEG
48411: PUSH
48412: EMPTY
48413: LIST
48414: LIST
48415: PUSH
48416: EMPTY
48417: LIST
48418: LIST
48419: LIST
48420: LIST
48421: LIST
48422: LIST
48423: LIST
48424: LIST
48425: LIST
48426: LIST
48427: LIST
48428: LIST
48429: LIST
48430: LIST
48431: LIST
48432: LIST
48433: LIST
48434: LIST
48435: LIST
48436: LIST
48437: LIST
48438: LIST
48439: LIST
48440: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
48441: LD_ADDR_VAR 0 33
48445: PUSH
48446: LD_INT 0
48448: PUSH
48449: LD_INT 0
48451: PUSH
48452: EMPTY
48453: LIST
48454: LIST
48455: PUSH
48456: LD_INT 0
48458: PUSH
48459: LD_INT 1
48461: NEG
48462: PUSH
48463: EMPTY
48464: LIST
48465: LIST
48466: PUSH
48467: LD_INT 1
48469: PUSH
48470: LD_INT 0
48472: PUSH
48473: EMPTY
48474: LIST
48475: LIST
48476: PUSH
48477: LD_INT 1
48479: PUSH
48480: LD_INT 1
48482: PUSH
48483: EMPTY
48484: LIST
48485: LIST
48486: PUSH
48487: LD_INT 0
48489: PUSH
48490: LD_INT 1
48492: PUSH
48493: EMPTY
48494: LIST
48495: LIST
48496: PUSH
48497: LD_INT 1
48499: NEG
48500: PUSH
48501: LD_INT 0
48503: PUSH
48504: EMPTY
48505: LIST
48506: LIST
48507: PUSH
48508: LD_INT 1
48510: NEG
48511: PUSH
48512: LD_INT 1
48514: NEG
48515: PUSH
48516: EMPTY
48517: LIST
48518: LIST
48519: PUSH
48520: LD_INT 1
48522: NEG
48523: PUSH
48524: LD_INT 2
48526: NEG
48527: PUSH
48528: EMPTY
48529: LIST
48530: LIST
48531: PUSH
48532: LD_INT 1
48534: PUSH
48535: LD_INT 1
48537: NEG
48538: PUSH
48539: EMPTY
48540: LIST
48541: LIST
48542: PUSH
48543: LD_INT 2
48545: PUSH
48546: LD_INT 0
48548: PUSH
48549: EMPTY
48550: LIST
48551: LIST
48552: PUSH
48553: LD_INT 2
48555: PUSH
48556: LD_INT 1
48558: PUSH
48559: EMPTY
48560: LIST
48561: LIST
48562: PUSH
48563: LD_INT 1
48565: PUSH
48566: LD_INT 2
48568: PUSH
48569: EMPTY
48570: LIST
48571: LIST
48572: PUSH
48573: LD_INT 0
48575: PUSH
48576: LD_INT 2
48578: PUSH
48579: EMPTY
48580: LIST
48581: LIST
48582: PUSH
48583: LD_INT 1
48585: NEG
48586: PUSH
48587: LD_INT 1
48589: PUSH
48590: EMPTY
48591: LIST
48592: LIST
48593: PUSH
48594: LD_INT 2
48596: NEG
48597: PUSH
48598: LD_INT 0
48600: PUSH
48601: EMPTY
48602: LIST
48603: LIST
48604: PUSH
48605: LD_INT 2
48607: NEG
48608: PUSH
48609: LD_INT 1
48611: NEG
48612: PUSH
48613: EMPTY
48614: LIST
48615: LIST
48616: PUSH
48617: LD_INT 2
48619: NEG
48620: PUSH
48621: LD_INT 2
48623: NEG
48624: PUSH
48625: EMPTY
48626: LIST
48627: LIST
48628: PUSH
48629: LD_INT 2
48631: NEG
48632: PUSH
48633: LD_INT 3
48635: NEG
48636: PUSH
48637: EMPTY
48638: LIST
48639: LIST
48640: PUSH
48641: LD_INT 2
48643: PUSH
48644: LD_INT 1
48646: NEG
48647: PUSH
48648: EMPTY
48649: LIST
48650: LIST
48651: PUSH
48652: LD_INT 3
48654: PUSH
48655: LD_INT 1
48657: PUSH
48658: EMPTY
48659: LIST
48660: LIST
48661: PUSH
48662: LD_INT 1
48664: PUSH
48665: LD_INT 3
48667: PUSH
48668: EMPTY
48669: LIST
48670: LIST
48671: PUSH
48672: LD_INT 1
48674: NEG
48675: PUSH
48676: LD_INT 2
48678: PUSH
48679: EMPTY
48680: LIST
48681: LIST
48682: PUSH
48683: LD_INT 3
48685: NEG
48686: PUSH
48687: LD_INT 2
48689: NEG
48690: PUSH
48691: EMPTY
48692: LIST
48693: LIST
48694: PUSH
48695: EMPTY
48696: LIST
48697: LIST
48698: LIST
48699: LIST
48700: LIST
48701: LIST
48702: LIST
48703: LIST
48704: LIST
48705: LIST
48706: LIST
48707: LIST
48708: LIST
48709: LIST
48710: LIST
48711: LIST
48712: LIST
48713: LIST
48714: LIST
48715: LIST
48716: LIST
48717: LIST
48718: LIST
48719: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48720: LD_ADDR_VAR 0 34
48724: PUSH
48725: LD_INT 0
48727: PUSH
48728: LD_INT 0
48730: PUSH
48731: EMPTY
48732: LIST
48733: LIST
48734: PUSH
48735: LD_INT 0
48737: PUSH
48738: LD_INT 1
48740: NEG
48741: PUSH
48742: EMPTY
48743: LIST
48744: LIST
48745: PUSH
48746: LD_INT 1
48748: PUSH
48749: LD_INT 0
48751: PUSH
48752: EMPTY
48753: LIST
48754: LIST
48755: PUSH
48756: LD_INT 1
48758: PUSH
48759: LD_INT 1
48761: PUSH
48762: EMPTY
48763: LIST
48764: LIST
48765: PUSH
48766: LD_INT 0
48768: PUSH
48769: LD_INT 1
48771: PUSH
48772: EMPTY
48773: LIST
48774: LIST
48775: PUSH
48776: LD_INT 1
48778: NEG
48779: PUSH
48780: LD_INT 0
48782: PUSH
48783: EMPTY
48784: LIST
48785: LIST
48786: PUSH
48787: LD_INT 1
48789: NEG
48790: PUSH
48791: LD_INT 1
48793: NEG
48794: PUSH
48795: EMPTY
48796: LIST
48797: LIST
48798: PUSH
48799: LD_INT 1
48801: NEG
48802: PUSH
48803: LD_INT 2
48805: NEG
48806: PUSH
48807: EMPTY
48808: LIST
48809: LIST
48810: PUSH
48811: LD_INT 0
48813: PUSH
48814: LD_INT 2
48816: NEG
48817: PUSH
48818: EMPTY
48819: LIST
48820: LIST
48821: PUSH
48822: LD_INT 1
48824: PUSH
48825: LD_INT 1
48827: NEG
48828: PUSH
48829: EMPTY
48830: LIST
48831: LIST
48832: PUSH
48833: LD_INT 2
48835: PUSH
48836: LD_INT 1
48838: PUSH
48839: EMPTY
48840: LIST
48841: LIST
48842: PUSH
48843: LD_INT 2
48845: PUSH
48846: LD_INT 2
48848: PUSH
48849: EMPTY
48850: LIST
48851: LIST
48852: PUSH
48853: LD_INT 1
48855: PUSH
48856: LD_INT 2
48858: PUSH
48859: EMPTY
48860: LIST
48861: LIST
48862: PUSH
48863: LD_INT 1
48865: NEG
48866: PUSH
48867: LD_INT 1
48869: PUSH
48870: EMPTY
48871: LIST
48872: LIST
48873: PUSH
48874: LD_INT 2
48876: NEG
48877: PUSH
48878: LD_INT 0
48880: PUSH
48881: EMPTY
48882: LIST
48883: LIST
48884: PUSH
48885: LD_INT 2
48887: NEG
48888: PUSH
48889: LD_INT 1
48891: NEG
48892: PUSH
48893: EMPTY
48894: LIST
48895: LIST
48896: PUSH
48897: LD_INT 2
48899: NEG
48900: PUSH
48901: LD_INT 2
48903: NEG
48904: PUSH
48905: EMPTY
48906: LIST
48907: LIST
48908: PUSH
48909: LD_INT 1
48911: NEG
48912: PUSH
48913: LD_INT 3
48915: NEG
48916: PUSH
48917: EMPTY
48918: LIST
48919: LIST
48920: PUSH
48921: LD_INT 1
48923: PUSH
48924: LD_INT 2
48926: NEG
48927: PUSH
48928: EMPTY
48929: LIST
48930: LIST
48931: PUSH
48932: LD_INT 3
48934: PUSH
48935: LD_INT 2
48937: PUSH
48938: EMPTY
48939: LIST
48940: LIST
48941: PUSH
48942: LD_INT 2
48944: PUSH
48945: LD_INT 3
48947: PUSH
48948: EMPTY
48949: LIST
48950: LIST
48951: PUSH
48952: LD_INT 2
48954: NEG
48955: PUSH
48956: LD_INT 1
48958: PUSH
48959: EMPTY
48960: LIST
48961: LIST
48962: PUSH
48963: LD_INT 3
48965: NEG
48966: PUSH
48967: LD_INT 1
48969: NEG
48970: PUSH
48971: EMPTY
48972: LIST
48973: LIST
48974: PUSH
48975: EMPTY
48976: LIST
48977: LIST
48978: LIST
48979: LIST
48980: LIST
48981: LIST
48982: LIST
48983: LIST
48984: LIST
48985: LIST
48986: LIST
48987: LIST
48988: LIST
48989: LIST
48990: LIST
48991: LIST
48992: LIST
48993: LIST
48994: LIST
48995: LIST
48996: LIST
48997: LIST
48998: LIST
48999: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
49000: LD_ADDR_VAR 0 35
49004: PUSH
49005: LD_INT 0
49007: PUSH
49008: LD_INT 0
49010: PUSH
49011: EMPTY
49012: LIST
49013: LIST
49014: PUSH
49015: LD_INT 0
49017: PUSH
49018: LD_INT 1
49020: NEG
49021: PUSH
49022: EMPTY
49023: LIST
49024: LIST
49025: PUSH
49026: LD_INT 1
49028: PUSH
49029: LD_INT 0
49031: PUSH
49032: EMPTY
49033: LIST
49034: LIST
49035: PUSH
49036: LD_INT 1
49038: PUSH
49039: LD_INT 1
49041: PUSH
49042: EMPTY
49043: LIST
49044: LIST
49045: PUSH
49046: LD_INT 0
49048: PUSH
49049: LD_INT 1
49051: PUSH
49052: EMPTY
49053: LIST
49054: LIST
49055: PUSH
49056: LD_INT 1
49058: NEG
49059: PUSH
49060: LD_INT 0
49062: PUSH
49063: EMPTY
49064: LIST
49065: LIST
49066: PUSH
49067: LD_INT 1
49069: NEG
49070: PUSH
49071: LD_INT 1
49073: NEG
49074: PUSH
49075: EMPTY
49076: LIST
49077: LIST
49078: PUSH
49079: LD_INT 2
49081: PUSH
49082: LD_INT 1
49084: PUSH
49085: EMPTY
49086: LIST
49087: LIST
49088: PUSH
49089: LD_INT 2
49091: NEG
49092: PUSH
49093: LD_INT 1
49095: NEG
49096: PUSH
49097: EMPTY
49098: LIST
49099: LIST
49100: PUSH
49101: EMPTY
49102: LIST
49103: LIST
49104: LIST
49105: LIST
49106: LIST
49107: LIST
49108: LIST
49109: LIST
49110: LIST
49111: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
49112: LD_ADDR_VAR 0 36
49116: PUSH
49117: LD_INT 0
49119: PUSH
49120: LD_INT 0
49122: PUSH
49123: EMPTY
49124: LIST
49125: LIST
49126: PUSH
49127: LD_INT 0
49129: PUSH
49130: LD_INT 1
49132: NEG
49133: PUSH
49134: EMPTY
49135: LIST
49136: LIST
49137: PUSH
49138: LD_INT 1
49140: PUSH
49141: LD_INT 0
49143: PUSH
49144: EMPTY
49145: LIST
49146: LIST
49147: PUSH
49148: LD_INT 1
49150: PUSH
49151: LD_INT 1
49153: PUSH
49154: EMPTY
49155: LIST
49156: LIST
49157: PUSH
49158: LD_INT 0
49160: PUSH
49161: LD_INT 1
49163: PUSH
49164: EMPTY
49165: LIST
49166: LIST
49167: PUSH
49168: LD_INT 1
49170: NEG
49171: PUSH
49172: LD_INT 0
49174: PUSH
49175: EMPTY
49176: LIST
49177: LIST
49178: PUSH
49179: LD_INT 1
49181: NEG
49182: PUSH
49183: LD_INT 1
49185: NEG
49186: PUSH
49187: EMPTY
49188: LIST
49189: LIST
49190: PUSH
49191: LD_INT 1
49193: NEG
49194: PUSH
49195: LD_INT 2
49197: NEG
49198: PUSH
49199: EMPTY
49200: LIST
49201: LIST
49202: PUSH
49203: LD_INT 1
49205: PUSH
49206: LD_INT 2
49208: PUSH
49209: EMPTY
49210: LIST
49211: LIST
49212: PUSH
49213: EMPTY
49214: LIST
49215: LIST
49216: LIST
49217: LIST
49218: LIST
49219: LIST
49220: LIST
49221: LIST
49222: LIST
49223: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
49224: LD_ADDR_VAR 0 37
49228: PUSH
49229: LD_INT 0
49231: PUSH
49232: LD_INT 0
49234: PUSH
49235: EMPTY
49236: LIST
49237: LIST
49238: PUSH
49239: LD_INT 0
49241: PUSH
49242: LD_INT 1
49244: NEG
49245: PUSH
49246: EMPTY
49247: LIST
49248: LIST
49249: PUSH
49250: LD_INT 1
49252: PUSH
49253: LD_INT 0
49255: PUSH
49256: EMPTY
49257: LIST
49258: LIST
49259: PUSH
49260: LD_INT 1
49262: PUSH
49263: LD_INT 1
49265: PUSH
49266: EMPTY
49267: LIST
49268: LIST
49269: PUSH
49270: LD_INT 0
49272: PUSH
49273: LD_INT 1
49275: PUSH
49276: EMPTY
49277: LIST
49278: LIST
49279: PUSH
49280: LD_INT 1
49282: NEG
49283: PUSH
49284: LD_INT 0
49286: PUSH
49287: EMPTY
49288: LIST
49289: LIST
49290: PUSH
49291: LD_INT 1
49293: NEG
49294: PUSH
49295: LD_INT 1
49297: NEG
49298: PUSH
49299: EMPTY
49300: LIST
49301: LIST
49302: PUSH
49303: LD_INT 1
49305: PUSH
49306: LD_INT 1
49308: NEG
49309: PUSH
49310: EMPTY
49311: LIST
49312: LIST
49313: PUSH
49314: LD_INT 1
49316: NEG
49317: PUSH
49318: LD_INT 1
49320: PUSH
49321: EMPTY
49322: LIST
49323: LIST
49324: PUSH
49325: EMPTY
49326: LIST
49327: LIST
49328: LIST
49329: LIST
49330: LIST
49331: LIST
49332: LIST
49333: LIST
49334: LIST
49335: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
49336: LD_ADDR_VAR 0 38
49340: PUSH
49341: LD_INT 0
49343: PUSH
49344: LD_INT 0
49346: PUSH
49347: EMPTY
49348: LIST
49349: LIST
49350: PUSH
49351: LD_INT 0
49353: PUSH
49354: LD_INT 1
49356: NEG
49357: PUSH
49358: EMPTY
49359: LIST
49360: LIST
49361: PUSH
49362: LD_INT 1
49364: PUSH
49365: LD_INT 0
49367: PUSH
49368: EMPTY
49369: LIST
49370: LIST
49371: PUSH
49372: LD_INT 1
49374: PUSH
49375: LD_INT 1
49377: PUSH
49378: EMPTY
49379: LIST
49380: LIST
49381: PUSH
49382: LD_INT 0
49384: PUSH
49385: LD_INT 1
49387: PUSH
49388: EMPTY
49389: LIST
49390: LIST
49391: PUSH
49392: LD_INT 1
49394: NEG
49395: PUSH
49396: LD_INT 0
49398: PUSH
49399: EMPTY
49400: LIST
49401: LIST
49402: PUSH
49403: LD_INT 1
49405: NEG
49406: PUSH
49407: LD_INT 1
49409: NEG
49410: PUSH
49411: EMPTY
49412: LIST
49413: LIST
49414: PUSH
49415: LD_INT 2
49417: PUSH
49418: LD_INT 1
49420: PUSH
49421: EMPTY
49422: LIST
49423: LIST
49424: PUSH
49425: LD_INT 2
49427: NEG
49428: PUSH
49429: LD_INT 1
49431: NEG
49432: PUSH
49433: EMPTY
49434: LIST
49435: LIST
49436: PUSH
49437: EMPTY
49438: LIST
49439: LIST
49440: LIST
49441: LIST
49442: LIST
49443: LIST
49444: LIST
49445: LIST
49446: LIST
49447: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
49448: LD_ADDR_VAR 0 39
49452: PUSH
49453: LD_INT 0
49455: PUSH
49456: LD_INT 0
49458: PUSH
49459: EMPTY
49460: LIST
49461: LIST
49462: PUSH
49463: LD_INT 0
49465: PUSH
49466: LD_INT 1
49468: NEG
49469: PUSH
49470: EMPTY
49471: LIST
49472: LIST
49473: PUSH
49474: LD_INT 1
49476: PUSH
49477: LD_INT 0
49479: PUSH
49480: EMPTY
49481: LIST
49482: LIST
49483: PUSH
49484: LD_INT 1
49486: PUSH
49487: LD_INT 1
49489: PUSH
49490: EMPTY
49491: LIST
49492: LIST
49493: PUSH
49494: LD_INT 0
49496: PUSH
49497: LD_INT 1
49499: PUSH
49500: EMPTY
49501: LIST
49502: LIST
49503: PUSH
49504: LD_INT 1
49506: NEG
49507: PUSH
49508: LD_INT 0
49510: PUSH
49511: EMPTY
49512: LIST
49513: LIST
49514: PUSH
49515: LD_INT 1
49517: NEG
49518: PUSH
49519: LD_INT 1
49521: NEG
49522: PUSH
49523: EMPTY
49524: LIST
49525: LIST
49526: PUSH
49527: LD_INT 1
49529: NEG
49530: PUSH
49531: LD_INT 2
49533: NEG
49534: PUSH
49535: EMPTY
49536: LIST
49537: LIST
49538: PUSH
49539: LD_INT 1
49541: PUSH
49542: LD_INT 2
49544: PUSH
49545: EMPTY
49546: LIST
49547: LIST
49548: PUSH
49549: EMPTY
49550: LIST
49551: LIST
49552: LIST
49553: LIST
49554: LIST
49555: LIST
49556: LIST
49557: LIST
49558: LIST
49559: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
49560: LD_ADDR_VAR 0 40
49564: PUSH
49565: LD_INT 0
49567: PUSH
49568: LD_INT 0
49570: PUSH
49571: EMPTY
49572: LIST
49573: LIST
49574: PUSH
49575: LD_INT 0
49577: PUSH
49578: LD_INT 1
49580: NEG
49581: PUSH
49582: EMPTY
49583: LIST
49584: LIST
49585: PUSH
49586: LD_INT 1
49588: PUSH
49589: LD_INT 0
49591: PUSH
49592: EMPTY
49593: LIST
49594: LIST
49595: PUSH
49596: LD_INT 1
49598: PUSH
49599: LD_INT 1
49601: PUSH
49602: EMPTY
49603: LIST
49604: LIST
49605: PUSH
49606: LD_INT 0
49608: PUSH
49609: LD_INT 1
49611: PUSH
49612: EMPTY
49613: LIST
49614: LIST
49615: PUSH
49616: LD_INT 1
49618: NEG
49619: PUSH
49620: LD_INT 0
49622: PUSH
49623: EMPTY
49624: LIST
49625: LIST
49626: PUSH
49627: LD_INT 1
49629: NEG
49630: PUSH
49631: LD_INT 1
49633: NEG
49634: PUSH
49635: EMPTY
49636: LIST
49637: LIST
49638: PUSH
49639: LD_INT 1
49641: PUSH
49642: LD_INT 1
49644: NEG
49645: PUSH
49646: EMPTY
49647: LIST
49648: LIST
49649: PUSH
49650: LD_INT 1
49652: NEG
49653: PUSH
49654: LD_INT 1
49656: PUSH
49657: EMPTY
49658: LIST
49659: LIST
49660: PUSH
49661: EMPTY
49662: LIST
49663: LIST
49664: LIST
49665: LIST
49666: LIST
49667: LIST
49668: LIST
49669: LIST
49670: LIST
49671: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49672: LD_ADDR_VAR 0 41
49676: PUSH
49677: LD_INT 0
49679: PUSH
49680: LD_INT 0
49682: PUSH
49683: EMPTY
49684: LIST
49685: LIST
49686: PUSH
49687: LD_INT 0
49689: PUSH
49690: LD_INT 1
49692: NEG
49693: PUSH
49694: EMPTY
49695: LIST
49696: LIST
49697: PUSH
49698: LD_INT 1
49700: PUSH
49701: LD_INT 0
49703: PUSH
49704: EMPTY
49705: LIST
49706: LIST
49707: PUSH
49708: LD_INT 1
49710: PUSH
49711: LD_INT 1
49713: PUSH
49714: EMPTY
49715: LIST
49716: LIST
49717: PUSH
49718: LD_INT 0
49720: PUSH
49721: LD_INT 1
49723: PUSH
49724: EMPTY
49725: LIST
49726: LIST
49727: PUSH
49728: LD_INT 1
49730: NEG
49731: PUSH
49732: LD_INT 0
49734: PUSH
49735: EMPTY
49736: LIST
49737: LIST
49738: PUSH
49739: LD_INT 1
49741: NEG
49742: PUSH
49743: LD_INT 1
49745: NEG
49746: PUSH
49747: EMPTY
49748: LIST
49749: LIST
49750: PUSH
49751: LD_INT 1
49753: NEG
49754: PUSH
49755: LD_INT 2
49757: NEG
49758: PUSH
49759: EMPTY
49760: LIST
49761: LIST
49762: PUSH
49763: LD_INT 1
49765: PUSH
49766: LD_INT 1
49768: NEG
49769: PUSH
49770: EMPTY
49771: LIST
49772: LIST
49773: PUSH
49774: LD_INT 2
49776: PUSH
49777: LD_INT 0
49779: PUSH
49780: EMPTY
49781: LIST
49782: LIST
49783: PUSH
49784: LD_INT 2
49786: PUSH
49787: LD_INT 1
49789: PUSH
49790: EMPTY
49791: LIST
49792: LIST
49793: PUSH
49794: LD_INT 2
49796: PUSH
49797: LD_INT 2
49799: PUSH
49800: EMPTY
49801: LIST
49802: LIST
49803: PUSH
49804: LD_INT 1
49806: PUSH
49807: LD_INT 2
49809: PUSH
49810: EMPTY
49811: LIST
49812: LIST
49813: PUSH
49814: LD_INT 1
49816: NEG
49817: PUSH
49818: LD_INT 1
49820: PUSH
49821: EMPTY
49822: LIST
49823: LIST
49824: PUSH
49825: LD_INT 2
49827: NEG
49828: PUSH
49829: LD_INT 0
49831: PUSH
49832: EMPTY
49833: LIST
49834: LIST
49835: PUSH
49836: LD_INT 2
49838: NEG
49839: PUSH
49840: LD_INT 1
49842: NEG
49843: PUSH
49844: EMPTY
49845: LIST
49846: LIST
49847: PUSH
49848: LD_INT 2
49850: NEG
49851: PUSH
49852: LD_INT 2
49854: NEG
49855: PUSH
49856: EMPTY
49857: LIST
49858: LIST
49859: PUSH
49860: LD_INT 2
49862: NEG
49863: PUSH
49864: LD_INT 3
49866: NEG
49867: PUSH
49868: EMPTY
49869: LIST
49870: LIST
49871: PUSH
49872: LD_INT 2
49874: PUSH
49875: LD_INT 1
49877: NEG
49878: PUSH
49879: EMPTY
49880: LIST
49881: LIST
49882: PUSH
49883: LD_INT 3
49885: PUSH
49886: LD_INT 0
49888: PUSH
49889: EMPTY
49890: LIST
49891: LIST
49892: PUSH
49893: LD_INT 3
49895: PUSH
49896: LD_INT 1
49898: PUSH
49899: EMPTY
49900: LIST
49901: LIST
49902: PUSH
49903: LD_INT 3
49905: PUSH
49906: LD_INT 2
49908: PUSH
49909: EMPTY
49910: LIST
49911: LIST
49912: PUSH
49913: LD_INT 3
49915: PUSH
49916: LD_INT 3
49918: PUSH
49919: EMPTY
49920: LIST
49921: LIST
49922: PUSH
49923: LD_INT 2
49925: PUSH
49926: LD_INT 3
49928: PUSH
49929: EMPTY
49930: LIST
49931: LIST
49932: PUSH
49933: LD_INT 2
49935: NEG
49936: PUSH
49937: LD_INT 1
49939: PUSH
49940: EMPTY
49941: LIST
49942: LIST
49943: PUSH
49944: LD_INT 3
49946: NEG
49947: PUSH
49948: LD_INT 0
49950: PUSH
49951: EMPTY
49952: LIST
49953: LIST
49954: PUSH
49955: LD_INT 3
49957: NEG
49958: PUSH
49959: LD_INT 1
49961: NEG
49962: PUSH
49963: EMPTY
49964: LIST
49965: LIST
49966: PUSH
49967: LD_INT 3
49969: NEG
49970: PUSH
49971: LD_INT 2
49973: NEG
49974: PUSH
49975: EMPTY
49976: LIST
49977: LIST
49978: PUSH
49979: LD_INT 3
49981: NEG
49982: PUSH
49983: LD_INT 3
49985: NEG
49986: PUSH
49987: EMPTY
49988: LIST
49989: LIST
49990: PUSH
49991: EMPTY
49992: LIST
49993: LIST
49994: LIST
49995: LIST
49996: LIST
49997: LIST
49998: LIST
49999: LIST
50000: LIST
50001: LIST
50002: LIST
50003: LIST
50004: LIST
50005: LIST
50006: LIST
50007: LIST
50008: LIST
50009: LIST
50010: LIST
50011: LIST
50012: LIST
50013: LIST
50014: LIST
50015: LIST
50016: LIST
50017: LIST
50018: LIST
50019: LIST
50020: LIST
50021: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50022: LD_ADDR_VAR 0 42
50026: PUSH
50027: LD_INT 0
50029: PUSH
50030: LD_INT 0
50032: PUSH
50033: EMPTY
50034: LIST
50035: LIST
50036: PUSH
50037: LD_INT 0
50039: PUSH
50040: LD_INT 1
50042: NEG
50043: PUSH
50044: EMPTY
50045: LIST
50046: LIST
50047: PUSH
50048: LD_INT 1
50050: PUSH
50051: LD_INT 0
50053: PUSH
50054: EMPTY
50055: LIST
50056: LIST
50057: PUSH
50058: LD_INT 1
50060: PUSH
50061: LD_INT 1
50063: PUSH
50064: EMPTY
50065: LIST
50066: LIST
50067: PUSH
50068: LD_INT 0
50070: PUSH
50071: LD_INT 1
50073: PUSH
50074: EMPTY
50075: LIST
50076: LIST
50077: PUSH
50078: LD_INT 1
50080: NEG
50081: PUSH
50082: LD_INT 0
50084: PUSH
50085: EMPTY
50086: LIST
50087: LIST
50088: PUSH
50089: LD_INT 1
50091: NEG
50092: PUSH
50093: LD_INT 1
50095: NEG
50096: PUSH
50097: EMPTY
50098: LIST
50099: LIST
50100: PUSH
50101: LD_INT 1
50103: NEG
50104: PUSH
50105: LD_INT 2
50107: NEG
50108: PUSH
50109: EMPTY
50110: LIST
50111: LIST
50112: PUSH
50113: LD_INT 0
50115: PUSH
50116: LD_INT 2
50118: NEG
50119: PUSH
50120: EMPTY
50121: LIST
50122: LIST
50123: PUSH
50124: LD_INT 1
50126: PUSH
50127: LD_INT 1
50129: NEG
50130: PUSH
50131: EMPTY
50132: LIST
50133: LIST
50134: PUSH
50135: LD_INT 2
50137: PUSH
50138: LD_INT 1
50140: PUSH
50141: EMPTY
50142: LIST
50143: LIST
50144: PUSH
50145: LD_INT 2
50147: PUSH
50148: LD_INT 2
50150: PUSH
50151: EMPTY
50152: LIST
50153: LIST
50154: PUSH
50155: LD_INT 1
50157: PUSH
50158: LD_INT 2
50160: PUSH
50161: EMPTY
50162: LIST
50163: LIST
50164: PUSH
50165: LD_INT 0
50167: PUSH
50168: LD_INT 2
50170: PUSH
50171: EMPTY
50172: LIST
50173: LIST
50174: PUSH
50175: LD_INT 1
50177: NEG
50178: PUSH
50179: LD_INT 1
50181: PUSH
50182: EMPTY
50183: LIST
50184: LIST
50185: PUSH
50186: LD_INT 2
50188: NEG
50189: PUSH
50190: LD_INT 1
50192: NEG
50193: PUSH
50194: EMPTY
50195: LIST
50196: LIST
50197: PUSH
50198: LD_INT 2
50200: NEG
50201: PUSH
50202: LD_INT 2
50204: NEG
50205: PUSH
50206: EMPTY
50207: LIST
50208: LIST
50209: PUSH
50210: LD_INT 2
50212: NEG
50213: PUSH
50214: LD_INT 3
50216: NEG
50217: PUSH
50218: EMPTY
50219: LIST
50220: LIST
50221: PUSH
50222: LD_INT 1
50224: NEG
50225: PUSH
50226: LD_INT 3
50228: NEG
50229: PUSH
50230: EMPTY
50231: LIST
50232: LIST
50233: PUSH
50234: LD_INT 0
50236: PUSH
50237: LD_INT 3
50239: NEG
50240: PUSH
50241: EMPTY
50242: LIST
50243: LIST
50244: PUSH
50245: LD_INT 1
50247: PUSH
50248: LD_INT 2
50250: NEG
50251: PUSH
50252: EMPTY
50253: LIST
50254: LIST
50255: PUSH
50256: LD_INT 3
50258: PUSH
50259: LD_INT 2
50261: PUSH
50262: EMPTY
50263: LIST
50264: LIST
50265: PUSH
50266: LD_INT 3
50268: PUSH
50269: LD_INT 3
50271: PUSH
50272: EMPTY
50273: LIST
50274: LIST
50275: PUSH
50276: LD_INT 2
50278: PUSH
50279: LD_INT 3
50281: PUSH
50282: EMPTY
50283: LIST
50284: LIST
50285: PUSH
50286: LD_INT 1
50288: PUSH
50289: LD_INT 3
50291: PUSH
50292: EMPTY
50293: LIST
50294: LIST
50295: PUSH
50296: LD_INT 0
50298: PUSH
50299: LD_INT 3
50301: PUSH
50302: EMPTY
50303: LIST
50304: LIST
50305: PUSH
50306: LD_INT 1
50308: NEG
50309: PUSH
50310: LD_INT 2
50312: PUSH
50313: EMPTY
50314: LIST
50315: LIST
50316: PUSH
50317: LD_INT 3
50319: NEG
50320: PUSH
50321: LD_INT 2
50323: NEG
50324: PUSH
50325: EMPTY
50326: LIST
50327: LIST
50328: PUSH
50329: LD_INT 3
50331: NEG
50332: PUSH
50333: LD_INT 3
50335: NEG
50336: PUSH
50337: EMPTY
50338: LIST
50339: LIST
50340: PUSH
50341: EMPTY
50342: LIST
50343: LIST
50344: LIST
50345: LIST
50346: LIST
50347: LIST
50348: LIST
50349: LIST
50350: LIST
50351: LIST
50352: LIST
50353: LIST
50354: LIST
50355: LIST
50356: LIST
50357: LIST
50358: LIST
50359: LIST
50360: LIST
50361: LIST
50362: LIST
50363: LIST
50364: LIST
50365: LIST
50366: LIST
50367: LIST
50368: LIST
50369: LIST
50370: LIST
50371: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50372: LD_ADDR_VAR 0 43
50376: PUSH
50377: LD_INT 0
50379: PUSH
50380: LD_INT 0
50382: PUSH
50383: EMPTY
50384: LIST
50385: LIST
50386: PUSH
50387: LD_INT 0
50389: PUSH
50390: LD_INT 1
50392: NEG
50393: PUSH
50394: EMPTY
50395: LIST
50396: LIST
50397: PUSH
50398: LD_INT 1
50400: PUSH
50401: LD_INT 0
50403: PUSH
50404: EMPTY
50405: LIST
50406: LIST
50407: PUSH
50408: LD_INT 1
50410: PUSH
50411: LD_INT 1
50413: PUSH
50414: EMPTY
50415: LIST
50416: LIST
50417: PUSH
50418: LD_INT 0
50420: PUSH
50421: LD_INT 1
50423: PUSH
50424: EMPTY
50425: LIST
50426: LIST
50427: PUSH
50428: LD_INT 1
50430: NEG
50431: PUSH
50432: LD_INT 0
50434: PUSH
50435: EMPTY
50436: LIST
50437: LIST
50438: PUSH
50439: LD_INT 1
50441: NEG
50442: PUSH
50443: LD_INT 1
50445: NEG
50446: PUSH
50447: EMPTY
50448: LIST
50449: LIST
50450: PUSH
50451: LD_INT 1
50453: NEG
50454: PUSH
50455: LD_INT 2
50457: NEG
50458: PUSH
50459: EMPTY
50460: LIST
50461: LIST
50462: PUSH
50463: LD_INT 0
50465: PUSH
50466: LD_INT 2
50468: NEG
50469: PUSH
50470: EMPTY
50471: LIST
50472: LIST
50473: PUSH
50474: LD_INT 1
50476: PUSH
50477: LD_INT 1
50479: NEG
50480: PUSH
50481: EMPTY
50482: LIST
50483: LIST
50484: PUSH
50485: LD_INT 2
50487: PUSH
50488: LD_INT 0
50490: PUSH
50491: EMPTY
50492: LIST
50493: LIST
50494: PUSH
50495: LD_INT 2
50497: PUSH
50498: LD_INT 1
50500: PUSH
50501: EMPTY
50502: LIST
50503: LIST
50504: PUSH
50505: LD_INT 1
50507: PUSH
50508: LD_INT 2
50510: PUSH
50511: EMPTY
50512: LIST
50513: LIST
50514: PUSH
50515: LD_INT 0
50517: PUSH
50518: LD_INT 2
50520: PUSH
50521: EMPTY
50522: LIST
50523: LIST
50524: PUSH
50525: LD_INT 1
50527: NEG
50528: PUSH
50529: LD_INT 1
50531: PUSH
50532: EMPTY
50533: LIST
50534: LIST
50535: PUSH
50536: LD_INT 2
50538: NEG
50539: PUSH
50540: LD_INT 0
50542: PUSH
50543: EMPTY
50544: LIST
50545: LIST
50546: PUSH
50547: LD_INT 2
50549: NEG
50550: PUSH
50551: LD_INT 1
50553: NEG
50554: PUSH
50555: EMPTY
50556: LIST
50557: LIST
50558: PUSH
50559: LD_INT 1
50561: NEG
50562: PUSH
50563: LD_INT 3
50565: NEG
50566: PUSH
50567: EMPTY
50568: LIST
50569: LIST
50570: PUSH
50571: LD_INT 0
50573: PUSH
50574: LD_INT 3
50576: NEG
50577: PUSH
50578: EMPTY
50579: LIST
50580: LIST
50581: PUSH
50582: LD_INT 1
50584: PUSH
50585: LD_INT 2
50587: NEG
50588: PUSH
50589: EMPTY
50590: LIST
50591: LIST
50592: PUSH
50593: LD_INT 2
50595: PUSH
50596: LD_INT 1
50598: NEG
50599: PUSH
50600: EMPTY
50601: LIST
50602: LIST
50603: PUSH
50604: LD_INT 3
50606: PUSH
50607: LD_INT 0
50609: PUSH
50610: EMPTY
50611: LIST
50612: LIST
50613: PUSH
50614: LD_INT 3
50616: PUSH
50617: LD_INT 1
50619: PUSH
50620: EMPTY
50621: LIST
50622: LIST
50623: PUSH
50624: LD_INT 1
50626: PUSH
50627: LD_INT 3
50629: PUSH
50630: EMPTY
50631: LIST
50632: LIST
50633: PUSH
50634: LD_INT 0
50636: PUSH
50637: LD_INT 3
50639: PUSH
50640: EMPTY
50641: LIST
50642: LIST
50643: PUSH
50644: LD_INT 1
50646: NEG
50647: PUSH
50648: LD_INT 2
50650: PUSH
50651: EMPTY
50652: LIST
50653: LIST
50654: PUSH
50655: LD_INT 2
50657: NEG
50658: PUSH
50659: LD_INT 1
50661: PUSH
50662: EMPTY
50663: LIST
50664: LIST
50665: PUSH
50666: LD_INT 3
50668: NEG
50669: PUSH
50670: LD_INT 0
50672: PUSH
50673: EMPTY
50674: LIST
50675: LIST
50676: PUSH
50677: LD_INT 3
50679: NEG
50680: PUSH
50681: LD_INT 1
50683: NEG
50684: PUSH
50685: EMPTY
50686: LIST
50687: LIST
50688: PUSH
50689: EMPTY
50690: LIST
50691: LIST
50692: LIST
50693: LIST
50694: LIST
50695: LIST
50696: LIST
50697: LIST
50698: LIST
50699: LIST
50700: LIST
50701: LIST
50702: LIST
50703: LIST
50704: LIST
50705: LIST
50706: LIST
50707: LIST
50708: LIST
50709: LIST
50710: LIST
50711: LIST
50712: LIST
50713: LIST
50714: LIST
50715: LIST
50716: LIST
50717: LIST
50718: LIST
50719: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50720: LD_ADDR_VAR 0 44
50724: PUSH
50725: LD_INT 0
50727: PUSH
50728: LD_INT 0
50730: PUSH
50731: EMPTY
50732: LIST
50733: LIST
50734: PUSH
50735: LD_INT 0
50737: PUSH
50738: LD_INT 1
50740: NEG
50741: PUSH
50742: EMPTY
50743: LIST
50744: LIST
50745: PUSH
50746: LD_INT 1
50748: PUSH
50749: LD_INT 0
50751: PUSH
50752: EMPTY
50753: LIST
50754: LIST
50755: PUSH
50756: LD_INT 1
50758: PUSH
50759: LD_INT 1
50761: PUSH
50762: EMPTY
50763: LIST
50764: LIST
50765: PUSH
50766: LD_INT 0
50768: PUSH
50769: LD_INT 1
50771: PUSH
50772: EMPTY
50773: LIST
50774: LIST
50775: PUSH
50776: LD_INT 1
50778: NEG
50779: PUSH
50780: LD_INT 0
50782: PUSH
50783: EMPTY
50784: LIST
50785: LIST
50786: PUSH
50787: LD_INT 1
50789: NEG
50790: PUSH
50791: LD_INT 1
50793: NEG
50794: PUSH
50795: EMPTY
50796: LIST
50797: LIST
50798: PUSH
50799: LD_INT 1
50801: NEG
50802: PUSH
50803: LD_INT 2
50805: NEG
50806: PUSH
50807: EMPTY
50808: LIST
50809: LIST
50810: PUSH
50811: LD_INT 1
50813: PUSH
50814: LD_INT 1
50816: NEG
50817: PUSH
50818: EMPTY
50819: LIST
50820: LIST
50821: PUSH
50822: LD_INT 2
50824: PUSH
50825: LD_INT 0
50827: PUSH
50828: EMPTY
50829: LIST
50830: LIST
50831: PUSH
50832: LD_INT 2
50834: PUSH
50835: LD_INT 1
50837: PUSH
50838: EMPTY
50839: LIST
50840: LIST
50841: PUSH
50842: LD_INT 2
50844: PUSH
50845: LD_INT 2
50847: PUSH
50848: EMPTY
50849: LIST
50850: LIST
50851: PUSH
50852: LD_INT 1
50854: PUSH
50855: LD_INT 2
50857: PUSH
50858: EMPTY
50859: LIST
50860: LIST
50861: PUSH
50862: LD_INT 1
50864: NEG
50865: PUSH
50866: LD_INT 1
50868: PUSH
50869: EMPTY
50870: LIST
50871: LIST
50872: PUSH
50873: LD_INT 2
50875: NEG
50876: PUSH
50877: LD_INT 0
50879: PUSH
50880: EMPTY
50881: LIST
50882: LIST
50883: PUSH
50884: LD_INT 2
50886: NEG
50887: PUSH
50888: LD_INT 1
50890: NEG
50891: PUSH
50892: EMPTY
50893: LIST
50894: LIST
50895: PUSH
50896: LD_INT 2
50898: NEG
50899: PUSH
50900: LD_INT 2
50902: NEG
50903: PUSH
50904: EMPTY
50905: LIST
50906: LIST
50907: PUSH
50908: LD_INT 2
50910: NEG
50911: PUSH
50912: LD_INT 3
50914: NEG
50915: PUSH
50916: EMPTY
50917: LIST
50918: LIST
50919: PUSH
50920: LD_INT 2
50922: PUSH
50923: LD_INT 1
50925: NEG
50926: PUSH
50927: EMPTY
50928: LIST
50929: LIST
50930: PUSH
50931: LD_INT 3
50933: PUSH
50934: LD_INT 0
50936: PUSH
50937: EMPTY
50938: LIST
50939: LIST
50940: PUSH
50941: LD_INT 3
50943: PUSH
50944: LD_INT 1
50946: PUSH
50947: EMPTY
50948: LIST
50949: LIST
50950: PUSH
50951: LD_INT 3
50953: PUSH
50954: LD_INT 2
50956: PUSH
50957: EMPTY
50958: LIST
50959: LIST
50960: PUSH
50961: LD_INT 3
50963: PUSH
50964: LD_INT 3
50966: PUSH
50967: EMPTY
50968: LIST
50969: LIST
50970: PUSH
50971: LD_INT 2
50973: PUSH
50974: LD_INT 3
50976: PUSH
50977: EMPTY
50978: LIST
50979: LIST
50980: PUSH
50981: LD_INT 2
50983: NEG
50984: PUSH
50985: LD_INT 1
50987: PUSH
50988: EMPTY
50989: LIST
50990: LIST
50991: PUSH
50992: LD_INT 3
50994: NEG
50995: PUSH
50996: LD_INT 0
50998: PUSH
50999: EMPTY
51000: LIST
51001: LIST
51002: PUSH
51003: LD_INT 3
51005: NEG
51006: PUSH
51007: LD_INT 1
51009: NEG
51010: PUSH
51011: EMPTY
51012: LIST
51013: LIST
51014: PUSH
51015: LD_INT 3
51017: NEG
51018: PUSH
51019: LD_INT 2
51021: NEG
51022: PUSH
51023: EMPTY
51024: LIST
51025: LIST
51026: PUSH
51027: LD_INT 3
51029: NEG
51030: PUSH
51031: LD_INT 3
51033: NEG
51034: PUSH
51035: EMPTY
51036: LIST
51037: LIST
51038: PUSH
51039: EMPTY
51040: LIST
51041: LIST
51042: LIST
51043: LIST
51044: LIST
51045: LIST
51046: LIST
51047: LIST
51048: LIST
51049: LIST
51050: LIST
51051: LIST
51052: LIST
51053: LIST
51054: LIST
51055: LIST
51056: LIST
51057: LIST
51058: LIST
51059: LIST
51060: LIST
51061: LIST
51062: LIST
51063: LIST
51064: LIST
51065: LIST
51066: LIST
51067: LIST
51068: LIST
51069: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51070: LD_ADDR_VAR 0 45
51074: PUSH
51075: LD_INT 0
51077: PUSH
51078: LD_INT 0
51080: PUSH
51081: EMPTY
51082: LIST
51083: LIST
51084: PUSH
51085: LD_INT 0
51087: PUSH
51088: LD_INT 1
51090: NEG
51091: PUSH
51092: EMPTY
51093: LIST
51094: LIST
51095: PUSH
51096: LD_INT 1
51098: PUSH
51099: LD_INT 0
51101: PUSH
51102: EMPTY
51103: LIST
51104: LIST
51105: PUSH
51106: LD_INT 1
51108: PUSH
51109: LD_INT 1
51111: PUSH
51112: EMPTY
51113: LIST
51114: LIST
51115: PUSH
51116: LD_INT 0
51118: PUSH
51119: LD_INT 1
51121: PUSH
51122: EMPTY
51123: LIST
51124: LIST
51125: PUSH
51126: LD_INT 1
51128: NEG
51129: PUSH
51130: LD_INT 0
51132: PUSH
51133: EMPTY
51134: LIST
51135: LIST
51136: PUSH
51137: LD_INT 1
51139: NEG
51140: PUSH
51141: LD_INT 1
51143: NEG
51144: PUSH
51145: EMPTY
51146: LIST
51147: LIST
51148: PUSH
51149: LD_INT 1
51151: NEG
51152: PUSH
51153: LD_INT 2
51155: NEG
51156: PUSH
51157: EMPTY
51158: LIST
51159: LIST
51160: PUSH
51161: LD_INT 0
51163: PUSH
51164: LD_INT 2
51166: NEG
51167: PUSH
51168: EMPTY
51169: LIST
51170: LIST
51171: PUSH
51172: LD_INT 1
51174: PUSH
51175: LD_INT 1
51177: NEG
51178: PUSH
51179: EMPTY
51180: LIST
51181: LIST
51182: PUSH
51183: LD_INT 2
51185: PUSH
51186: LD_INT 1
51188: PUSH
51189: EMPTY
51190: LIST
51191: LIST
51192: PUSH
51193: LD_INT 2
51195: PUSH
51196: LD_INT 2
51198: PUSH
51199: EMPTY
51200: LIST
51201: LIST
51202: PUSH
51203: LD_INT 1
51205: PUSH
51206: LD_INT 2
51208: PUSH
51209: EMPTY
51210: LIST
51211: LIST
51212: PUSH
51213: LD_INT 0
51215: PUSH
51216: LD_INT 2
51218: PUSH
51219: EMPTY
51220: LIST
51221: LIST
51222: PUSH
51223: LD_INT 1
51225: NEG
51226: PUSH
51227: LD_INT 1
51229: PUSH
51230: EMPTY
51231: LIST
51232: LIST
51233: PUSH
51234: LD_INT 2
51236: NEG
51237: PUSH
51238: LD_INT 1
51240: NEG
51241: PUSH
51242: EMPTY
51243: LIST
51244: LIST
51245: PUSH
51246: LD_INT 2
51248: NEG
51249: PUSH
51250: LD_INT 2
51252: NEG
51253: PUSH
51254: EMPTY
51255: LIST
51256: LIST
51257: PUSH
51258: LD_INT 2
51260: NEG
51261: PUSH
51262: LD_INT 3
51264: NEG
51265: PUSH
51266: EMPTY
51267: LIST
51268: LIST
51269: PUSH
51270: LD_INT 1
51272: NEG
51273: PUSH
51274: LD_INT 3
51276: NEG
51277: PUSH
51278: EMPTY
51279: LIST
51280: LIST
51281: PUSH
51282: LD_INT 0
51284: PUSH
51285: LD_INT 3
51287: NEG
51288: PUSH
51289: EMPTY
51290: LIST
51291: LIST
51292: PUSH
51293: LD_INT 1
51295: PUSH
51296: LD_INT 2
51298: NEG
51299: PUSH
51300: EMPTY
51301: LIST
51302: LIST
51303: PUSH
51304: LD_INT 3
51306: PUSH
51307: LD_INT 2
51309: PUSH
51310: EMPTY
51311: LIST
51312: LIST
51313: PUSH
51314: LD_INT 3
51316: PUSH
51317: LD_INT 3
51319: PUSH
51320: EMPTY
51321: LIST
51322: LIST
51323: PUSH
51324: LD_INT 2
51326: PUSH
51327: LD_INT 3
51329: PUSH
51330: EMPTY
51331: LIST
51332: LIST
51333: PUSH
51334: LD_INT 1
51336: PUSH
51337: LD_INT 3
51339: PUSH
51340: EMPTY
51341: LIST
51342: LIST
51343: PUSH
51344: LD_INT 0
51346: PUSH
51347: LD_INT 3
51349: PUSH
51350: EMPTY
51351: LIST
51352: LIST
51353: PUSH
51354: LD_INT 1
51356: NEG
51357: PUSH
51358: LD_INT 2
51360: PUSH
51361: EMPTY
51362: LIST
51363: LIST
51364: PUSH
51365: LD_INT 3
51367: NEG
51368: PUSH
51369: LD_INT 2
51371: NEG
51372: PUSH
51373: EMPTY
51374: LIST
51375: LIST
51376: PUSH
51377: LD_INT 3
51379: NEG
51380: PUSH
51381: LD_INT 3
51383: NEG
51384: PUSH
51385: EMPTY
51386: LIST
51387: LIST
51388: PUSH
51389: EMPTY
51390: LIST
51391: LIST
51392: LIST
51393: LIST
51394: LIST
51395: LIST
51396: LIST
51397: LIST
51398: LIST
51399: LIST
51400: LIST
51401: LIST
51402: LIST
51403: LIST
51404: LIST
51405: LIST
51406: LIST
51407: LIST
51408: LIST
51409: LIST
51410: LIST
51411: LIST
51412: LIST
51413: LIST
51414: LIST
51415: LIST
51416: LIST
51417: LIST
51418: LIST
51419: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51420: LD_ADDR_VAR 0 46
51424: PUSH
51425: LD_INT 0
51427: PUSH
51428: LD_INT 0
51430: PUSH
51431: EMPTY
51432: LIST
51433: LIST
51434: PUSH
51435: LD_INT 0
51437: PUSH
51438: LD_INT 1
51440: NEG
51441: PUSH
51442: EMPTY
51443: LIST
51444: LIST
51445: PUSH
51446: LD_INT 1
51448: PUSH
51449: LD_INT 0
51451: PUSH
51452: EMPTY
51453: LIST
51454: LIST
51455: PUSH
51456: LD_INT 1
51458: PUSH
51459: LD_INT 1
51461: PUSH
51462: EMPTY
51463: LIST
51464: LIST
51465: PUSH
51466: LD_INT 0
51468: PUSH
51469: LD_INT 1
51471: PUSH
51472: EMPTY
51473: LIST
51474: LIST
51475: PUSH
51476: LD_INT 1
51478: NEG
51479: PUSH
51480: LD_INT 0
51482: PUSH
51483: EMPTY
51484: LIST
51485: LIST
51486: PUSH
51487: LD_INT 1
51489: NEG
51490: PUSH
51491: LD_INT 1
51493: NEG
51494: PUSH
51495: EMPTY
51496: LIST
51497: LIST
51498: PUSH
51499: LD_INT 1
51501: NEG
51502: PUSH
51503: LD_INT 2
51505: NEG
51506: PUSH
51507: EMPTY
51508: LIST
51509: LIST
51510: PUSH
51511: LD_INT 0
51513: PUSH
51514: LD_INT 2
51516: NEG
51517: PUSH
51518: EMPTY
51519: LIST
51520: LIST
51521: PUSH
51522: LD_INT 1
51524: PUSH
51525: LD_INT 1
51527: NEG
51528: PUSH
51529: EMPTY
51530: LIST
51531: LIST
51532: PUSH
51533: LD_INT 2
51535: PUSH
51536: LD_INT 0
51538: PUSH
51539: EMPTY
51540: LIST
51541: LIST
51542: PUSH
51543: LD_INT 2
51545: PUSH
51546: LD_INT 1
51548: PUSH
51549: EMPTY
51550: LIST
51551: LIST
51552: PUSH
51553: LD_INT 1
51555: PUSH
51556: LD_INT 2
51558: PUSH
51559: EMPTY
51560: LIST
51561: LIST
51562: PUSH
51563: LD_INT 0
51565: PUSH
51566: LD_INT 2
51568: PUSH
51569: EMPTY
51570: LIST
51571: LIST
51572: PUSH
51573: LD_INT 1
51575: NEG
51576: PUSH
51577: LD_INT 1
51579: PUSH
51580: EMPTY
51581: LIST
51582: LIST
51583: PUSH
51584: LD_INT 2
51586: NEG
51587: PUSH
51588: LD_INT 0
51590: PUSH
51591: EMPTY
51592: LIST
51593: LIST
51594: PUSH
51595: LD_INT 2
51597: NEG
51598: PUSH
51599: LD_INT 1
51601: NEG
51602: PUSH
51603: EMPTY
51604: LIST
51605: LIST
51606: PUSH
51607: LD_INT 1
51609: NEG
51610: PUSH
51611: LD_INT 3
51613: NEG
51614: PUSH
51615: EMPTY
51616: LIST
51617: LIST
51618: PUSH
51619: LD_INT 0
51621: PUSH
51622: LD_INT 3
51624: NEG
51625: PUSH
51626: EMPTY
51627: LIST
51628: LIST
51629: PUSH
51630: LD_INT 1
51632: PUSH
51633: LD_INT 2
51635: NEG
51636: PUSH
51637: EMPTY
51638: LIST
51639: LIST
51640: PUSH
51641: LD_INT 2
51643: PUSH
51644: LD_INT 1
51646: NEG
51647: PUSH
51648: EMPTY
51649: LIST
51650: LIST
51651: PUSH
51652: LD_INT 3
51654: PUSH
51655: LD_INT 0
51657: PUSH
51658: EMPTY
51659: LIST
51660: LIST
51661: PUSH
51662: LD_INT 3
51664: PUSH
51665: LD_INT 1
51667: PUSH
51668: EMPTY
51669: LIST
51670: LIST
51671: PUSH
51672: LD_INT 1
51674: PUSH
51675: LD_INT 3
51677: PUSH
51678: EMPTY
51679: LIST
51680: LIST
51681: PUSH
51682: LD_INT 0
51684: PUSH
51685: LD_INT 3
51687: PUSH
51688: EMPTY
51689: LIST
51690: LIST
51691: PUSH
51692: LD_INT 1
51694: NEG
51695: PUSH
51696: LD_INT 2
51698: PUSH
51699: EMPTY
51700: LIST
51701: LIST
51702: PUSH
51703: LD_INT 2
51705: NEG
51706: PUSH
51707: LD_INT 1
51709: PUSH
51710: EMPTY
51711: LIST
51712: LIST
51713: PUSH
51714: LD_INT 3
51716: NEG
51717: PUSH
51718: LD_INT 0
51720: PUSH
51721: EMPTY
51722: LIST
51723: LIST
51724: PUSH
51725: LD_INT 3
51727: NEG
51728: PUSH
51729: LD_INT 1
51731: NEG
51732: PUSH
51733: EMPTY
51734: LIST
51735: LIST
51736: PUSH
51737: EMPTY
51738: LIST
51739: LIST
51740: LIST
51741: LIST
51742: LIST
51743: LIST
51744: LIST
51745: LIST
51746: LIST
51747: LIST
51748: LIST
51749: LIST
51750: LIST
51751: LIST
51752: LIST
51753: LIST
51754: LIST
51755: LIST
51756: LIST
51757: LIST
51758: LIST
51759: LIST
51760: LIST
51761: LIST
51762: LIST
51763: LIST
51764: LIST
51765: LIST
51766: LIST
51767: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51768: LD_ADDR_VAR 0 47
51772: PUSH
51773: LD_INT 0
51775: PUSH
51776: LD_INT 0
51778: PUSH
51779: EMPTY
51780: LIST
51781: LIST
51782: PUSH
51783: LD_INT 0
51785: PUSH
51786: LD_INT 1
51788: NEG
51789: PUSH
51790: EMPTY
51791: LIST
51792: LIST
51793: PUSH
51794: LD_INT 1
51796: PUSH
51797: LD_INT 0
51799: PUSH
51800: EMPTY
51801: LIST
51802: LIST
51803: PUSH
51804: LD_INT 1
51806: PUSH
51807: LD_INT 1
51809: PUSH
51810: EMPTY
51811: LIST
51812: LIST
51813: PUSH
51814: LD_INT 0
51816: PUSH
51817: LD_INT 1
51819: PUSH
51820: EMPTY
51821: LIST
51822: LIST
51823: PUSH
51824: LD_INT 1
51826: NEG
51827: PUSH
51828: LD_INT 0
51830: PUSH
51831: EMPTY
51832: LIST
51833: LIST
51834: PUSH
51835: LD_INT 1
51837: NEG
51838: PUSH
51839: LD_INT 1
51841: NEG
51842: PUSH
51843: EMPTY
51844: LIST
51845: LIST
51846: PUSH
51847: LD_INT 1
51849: NEG
51850: PUSH
51851: LD_INT 2
51853: NEG
51854: PUSH
51855: EMPTY
51856: LIST
51857: LIST
51858: PUSH
51859: LD_INT 0
51861: PUSH
51862: LD_INT 2
51864: NEG
51865: PUSH
51866: EMPTY
51867: LIST
51868: LIST
51869: PUSH
51870: LD_INT 1
51872: PUSH
51873: LD_INT 1
51875: NEG
51876: PUSH
51877: EMPTY
51878: LIST
51879: LIST
51880: PUSH
51881: LD_INT 2
51883: NEG
51884: PUSH
51885: LD_INT 1
51887: NEG
51888: PUSH
51889: EMPTY
51890: LIST
51891: LIST
51892: PUSH
51893: LD_INT 2
51895: NEG
51896: PUSH
51897: LD_INT 2
51899: NEG
51900: PUSH
51901: EMPTY
51902: LIST
51903: LIST
51904: PUSH
51905: EMPTY
51906: LIST
51907: LIST
51908: LIST
51909: LIST
51910: LIST
51911: LIST
51912: LIST
51913: LIST
51914: LIST
51915: LIST
51916: LIST
51917: LIST
51918: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
51919: LD_ADDR_VAR 0 48
51923: PUSH
51924: LD_INT 0
51926: PUSH
51927: LD_INT 0
51929: PUSH
51930: EMPTY
51931: LIST
51932: LIST
51933: PUSH
51934: LD_INT 0
51936: PUSH
51937: LD_INT 1
51939: NEG
51940: PUSH
51941: EMPTY
51942: LIST
51943: LIST
51944: PUSH
51945: LD_INT 1
51947: PUSH
51948: LD_INT 0
51950: PUSH
51951: EMPTY
51952: LIST
51953: LIST
51954: PUSH
51955: LD_INT 1
51957: PUSH
51958: LD_INT 1
51960: PUSH
51961: EMPTY
51962: LIST
51963: LIST
51964: PUSH
51965: LD_INT 0
51967: PUSH
51968: LD_INT 1
51970: PUSH
51971: EMPTY
51972: LIST
51973: LIST
51974: PUSH
51975: LD_INT 1
51977: NEG
51978: PUSH
51979: LD_INT 0
51981: PUSH
51982: EMPTY
51983: LIST
51984: LIST
51985: PUSH
51986: LD_INT 1
51988: NEG
51989: PUSH
51990: LD_INT 1
51992: NEG
51993: PUSH
51994: EMPTY
51995: LIST
51996: LIST
51997: PUSH
51998: LD_INT 1
52000: NEG
52001: PUSH
52002: LD_INT 2
52004: NEG
52005: PUSH
52006: EMPTY
52007: LIST
52008: LIST
52009: PUSH
52010: LD_INT 0
52012: PUSH
52013: LD_INT 2
52015: NEG
52016: PUSH
52017: EMPTY
52018: LIST
52019: LIST
52020: PUSH
52021: LD_INT 1
52023: PUSH
52024: LD_INT 1
52026: NEG
52027: PUSH
52028: EMPTY
52029: LIST
52030: LIST
52031: PUSH
52032: LD_INT 2
52034: PUSH
52035: LD_INT 0
52037: PUSH
52038: EMPTY
52039: LIST
52040: LIST
52041: PUSH
52042: LD_INT 2
52044: PUSH
52045: LD_INT 1
52047: PUSH
52048: EMPTY
52049: LIST
52050: LIST
52051: PUSH
52052: EMPTY
52053: LIST
52054: LIST
52055: LIST
52056: LIST
52057: LIST
52058: LIST
52059: LIST
52060: LIST
52061: LIST
52062: LIST
52063: LIST
52064: LIST
52065: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
52066: LD_ADDR_VAR 0 49
52070: PUSH
52071: LD_INT 0
52073: PUSH
52074: LD_INT 0
52076: PUSH
52077: EMPTY
52078: LIST
52079: LIST
52080: PUSH
52081: LD_INT 0
52083: PUSH
52084: LD_INT 1
52086: NEG
52087: PUSH
52088: EMPTY
52089: LIST
52090: LIST
52091: PUSH
52092: LD_INT 1
52094: PUSH
52095: LD_INT 0
52097: PUSH
52098: EMPTY
52099: LIST
52100: LIST
52101: PUSH
52102: LD_INT 1
52104: PUSH
52105: LD_INT 1
52107: PUSH
52108: EMPTY
52109: LIST
52110: LIST
52111: PUSH
52112: LD_INT 0
52114: PUSH
52115: LD_INT 1
52117: PUSH
52118: EMPTY
52119: LIST
52120: LIST
52121: PUSH
52122: LD_INT 1
52124: NEG
52125: PUSH
52126: LD_INT 0
52128: PUSH
52129: EMPTY
52130: LIST
52131: LIST
52132: PUSH
52133: LD_INT 1
52135: NEG
52136: PUSH
52137: LD_INT 1
52139: NEG
52140: PUSH
52141: EMPTY
52142: LIST
52143: LIST
52144: PUSH
52145: LD_INT 1
52147: PUSH
52148: LD_INT 1
52150: NEG
52151: PUSH
52152: EMPTY
52153: LIST
52154: LIST
52155: PUSH
52156: LD_INT 2
52158: PUSH
52159: LD_INT 0
52161: PUSH
52162: EMPTY
52163: LIST
52164: LIST
52165: PUSH
52166: LD_INT 2
52168: PUSH
52169: LD_INT 1
52171: PUSH
52172: EMPTY
52173: LIST
52174: LIST
52175: PUSH
52176: LD_INT 2
52178: PUSH
52179: LD_INT 2
52181: PUSH
52182: EMPTY
52183: LIST
52184: LIST
52185: PUSH
52186: LD_INT 1
52188: PUSH
52189: LD_INT 2
52191: PUSH
52192: EMPTY
52193: LIST
52194: LIST
52195: PUSH
52196: EMPTY
52197: LIST
52198: LIST
52199: LIST
52200: LIST
52201: LIST
52202: LIST
52203: LIST
52204: LIST
52205: LIST
52206: LIST
52207: LIST
52208: LIST
52209: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
52210: LD_ADDR_VAR 0 50
52214: PUSH
52215: LD_INT 0
52217: PUSH
52218: LD_INT 0
52220: PUSH
52221: EMPTY
52222: LIST
52223: LIST
52224: PUSH
52225: LD_INT 0
52227: PUSH
52228: LD_INT 1
52230: NEG
52231: PUSH
52232: EMPTY
52233: LIST
52234: LIST
52235: PUSH
52236: LD_INT 1
52238: PUSH
52239: LD_INT 0
52241: PUSH
52242: EMPTY
52243: LIST
52244: LIST
52245: PUSH
52246: LD_INT 1
52248: PUSH
52249: LD_INT 1
52251: PUSH
52252: EMPTY
52253: LIST
52254: LIST
52255: PUSH
52256: LD_INT 0
52258: PUSH
52259: LD_INT 1
52261: PUSH
52262: EMPTY
52263: LIST
52264: LIST
52265: PUSH
52266: LD_INT 1
52268: NEG
52269: PUSH
52270: LD_INT 0
52272: PUSH
52273: EMPTY
52274: LIST
52275: LIST
52276: PUSH
52277: LD_INT 1
52279: NEG
52280: PUSH
52281: LD_INT 1
52283: NEG
52284: PUSH
52285: EMPTY
52286: LIST
52287: LIST
52288: PUSH
52289: LD_INT 2
52291: PUSH
52292: LD_INT 1
52294: PUSH
52295: EMPTY
52296: LIST
52297: LIST
52298: PUSH
52299: LD_INT 2
52301: PUSH
52302: LD_INT 2
52304: PUSH
52305: EMPTY
52306: LIST
52307: LIST
52308: PUSH
52309: LD_INT 1
52311: PUSH
52312: LD_INT 2
52314: PUSH
52315: EMPTY
52316: LIST
52317: LIST
52318: PUSH
52319: LD_INT 0
52321: PUSH
52322: LD_INT 2
52324: PUSH
52325: EMPTY
52326: LIST
52327: LIST
52328: PUSH
52329: LD_INT 1
52331: NEG
52332: PUSH
52333: LD_INT 1
52335: PUSH
52336: EMPTY
52337: LIST
52338: LIST
52339: PUSH
52340: EMPTY
52341: LIST
52342: LIST
52343: LIST
52344: LIST
52345: LIST
52346: LIST
52347: LIST
52348: LIST
52349: LIST
52350: LIST
52351: LIST
52352: LIST
52353: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
52354: LD_ADDR_VAR 0 51
52358: PUSH
52359: LD_INT 0
52361: PUSH
52362: LD_INT 0
52364: PUSH
52365: EMPTY
52366: LIST
52367: LIST
52368: PUSH
52369: LD_INT 0
52371: PUSH
52372: LD_INT 1
52374: NEG
52375: PUSH
52376: EMPTY
52377: LIST
52378: LIST
52379: PUSH
52380: LD_INT 1
52382: PUSH
52383: LD_INT 0
52385: PUSH
52386: EMPTY
52387: LIST
52388: LIST
52389: PUSH
52390: LD_INT 1
52392: PUSH
52393: LD_INT 1
52395: PUSH
52396: EMPTY
52397: LIST
52398: LIST
52399: PUSH
52400: LD_INT 0
52402: PUSH
52403: LD_INT 1
52405: PUSH
52406: EMPTY
52407: LIST
52408: LIST
52409: PUSH
52410: LD_INT 1
52412: NEG
52413: PUSH
52414: LD_INT 0
52416: PUSH
52417: EMPTY
52418: LIST
52419: LIST
52420: PUSH
52421: LD_INT 1
52423: NEG
52424: PUSH
52425: LD_INT 1
52427: NEG
52428: PUSH
52429: EMPTY
52430: LIST
52431: LIST
52432: PUSH
52433: LD_INT 1
52435: PUSH
52436: LD_INT 2
52438: PUSH
52439: EMPTY
52440: LIST
52441: LIST
52442: PUSH
52443: LD_INT 0
52445: PUSH
52446: LD_INT 2
52448: PUSH
52449: EMPTY
52450: LIST
52451: LIST
52452: PUSH
52453: LD_INT 1
52455: NEG
52456: PUSH
52457: LD_INT 1
52459: PUSH
52460: EMPTY
52461: LIST
52462: LIST
52463: PUSH
52464: LD_INT 2
52466: NEG
52467: PUSH
52468: LD_INT 0
52470: PUSH
52471: EMPTY
52472: LIST
52473: LIST
52474: PUSH
52475: LD_INT 2
52477: NEG
52478: PUSH
52479: LD_INT 1
52481: NEG
52482: PUSH
52483: EMPTY
52484: LIST
52485: LIST
52486: PUSH
52487: EMPTY
52488: LIST
52489: LIST
52490: LIST
52491: LIST
52492: LIST
52493: LIST
52494: LIST
52495: LIST
52496: LIST
52497: LIST
52498: LIST
52499: LIST
52500: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52501: LD_ADDR_VAR 0 52
52505: PUSH
52506: LD_INT 0
52508: PUSH
52509: LD_INT 0
52511: PUSH
52512: EMPTY
52513: LIST
52514: LIST
52515: PUSH
52516: LD_INT 0
52518: PUSH
52519: LD_INT 1
52521: NEG
52522: PUSH
52523: EMPTY
52524: LIST
52525: LIST
52526: PUSH
52527: LD_INT 1
52529: PUSH
52530: LD_INT 0
52532: PUSH
52533: EMPTY
52534: LIST
52535: LIST
52536: PUSH
52537: LD_INT 1
52539: PUSH
52540: LD_INT 1
52542: PUSH
52543: EMPTY
52544: LIST
52545: LIST
52546: PUSH
52547: LD_INT 0
52549: PUSH
52550: LD_INT 1
52552: PUSH
52553: EMPTY
52554: LIST
52555: LIST
52556: PUSH
52557: LD_INT 1
52559: NEG
52560: PUSH
52561: LD_INT 0
52563: PUSH
52564: EMPTY
52565: LIST
52566: LIST
52567: PUSH
52568: LD_INT 1
52570: NEG
52571: PUSH
52572: LD_INT 1
52574: NEG
52575: PUSH
52576: EMPTY
52577: LIST
52578: LIST
52579: PUSH
52580: LD_INT 1
52582: NEG
52583: PUSH
52584: LD_INT 2
52586: NEG
52587: PUSH
52588: EMPTY
52589: LIST
52590: LIST
52591: PUSH
52592: LD_INT 1
52594: NEG
52595: PUSH
52596: LD_INT 1
52598: PUSH
52599: EMPTY
52600: LIST
52601: LIST
52602: PUSH
52603: LD_INT 2
52605: NEG
52606: PUSH
52607: LD_INT 0
52609: PUSH
52610: EMPTY
52611: LIST
52612: LIST
52613: PUSH
52614: LD_INT 2
52616: NEG
52617: PUSH
52618: LD_INT 1
52620: NEG
52621: PUSH
52622: EMPTY
52623: LIST
52624: LIST
52625: PUSH
52626: LD_INT 2
52628: NEG
52629: PUSH
52630: LD_INT 2
52632: NEG
52633: PUSH
52634: EMPTY
52635: LIST
52636: LIST
52637: PUSH
52638: EMPTY
52639: LIST
52640: LIST
52641: LIST
52642: LIST
52643: LIST
52644: LIST
52645: LIST
52646: LIST
52647: LIST
52648: LIST
52649: LIST
52650: LIST
52651: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52652: LD_ADDR_VAR 0 53
52656: PUSH
52657: LD_INT 0
52659: PUSH
52660: LD_INT 0
52662: PUSH
52663: EMPTY
52664: LIST
52665: LIST
52666: PUSH
52667: LD_INT 0
52669: PUSH
52670: LD_INT 1
52672: NEG
52673: PUSH
52674: EMPTY
52675: LIST
52676: LIST
52677: PUSH
52678: LD_INT 1
52680: PUSH
52681: LD_INT 0
52683: PUSH
52684: EMPTY
52685: LIST
52686: LIST
52687: PUSH
52688: LD_INT 1
52690: PUSH
52691: LD_INT 1
52693: PUSH
52694: EMPTY
52695: LIST
52696: LIST
52697: PUSH
52698: LD_INT 0
52700: PUSH
52701: LD_INT 1
52703: PUSH
52704: EMPTY
52705: LIST
52706: LIST
52707: PUSH
52708: LD_INT 1
52710: NEG
52711: PUSH
52712: LD_INT 0
52714: PUSH
52715: EMPTY
52716: LIST
52717: LIST
52718: PUSH
52719: LD_INT 1
52721: NEG
52722: PUSH
52723: LD_INT 1
52725: NEG
52726: PUSH
52727: EMPTY
52728: LIST
52729: LIST
52730: PUSH
52731: LD_INT 1
52733: NEG
52734: PUSH
52735: LD_INT 2
52737: NEG
52738: PUSH
52739: EMPTY
52740: LIST
52741: LIST
52742: PUSH
52743: LD_INT 0
52745: PUSH
52746: LD_INT 2
52748: NEG
52749: PUSH
52750: EMPTY
52751: LIST
52752: LIST
52753: PUSH
52754: LD_INT 1
52756: PUSH
52757: LD_INT 1
52759: NEG
52760: PUSH
52761: EMPTY
52762: LIST
52763: LIST
52764: PUSH
52765: LD_INT 2
52767: PUSH
52768: LD_INT 0
52770: PUSH
52771: EMPTY
52772: LIST
52773: LIST
52774: PUSH
52775: LD_INT 2
52777: PUSH
52778: LD_INT 1
52780: PUSH
52781: EMPTY
52782: LIST
52783: LIST
52784: PUSH
52785: LD_INT 2
52787: PUSH
52788: LD_INT 2
52790: PUSH
52791: EMPTY
52792: LIST
52793: LIST
52794: PUSH
52795: LD_INT 1
52797: PUSH
52798: LD_INT 2
52800: PUSH
52801: EMPTY
52802: LIST
52803: LIST
52804: PUSH
52805: LD_INT 0
52807: PUSH
52808: LD_INT 2
52810: PUSH
52811: EMPTY
52812: LIST
52813: LIST
52814: PUSH
52815: LD_INT 1
52817: NEG
52818: PUSH
52819: LD_INT 1
52821: PUSH
52822: EMPTY
52823: LIST
52824: LIST
52825: PUSH
52826: LD_INT 2
52828: NEG
52829: PUSH
52830: LD_INT 0
52832: PUSH
52833: EMPTY
52834: LIST
52835: LIST
52836: PUSH
52837: LD_INT 2
52839: NEG
52840: PUSH
52841: LD_INT 1
52843: NEG
52844: PUSH
52845: EMPTY
52846: LIST
52847: LIST
52848: PUSH
52849: LD_INT 2
52851: NEG
52852: PUSH
52853: LD_INT 2
52855: NEG
52856: PUSH
52857: EMPTY
52858: LIST
52859: LIST
52860: PUSH
52861: EMPTY
52862: LIST
52863: LIST
52864: LIST
52865: LIST
52866: LIST
52867: LIST
52868: LIST
52869: LIST
52870: LIST
52871: LIST
52872: LIST
52873: LIST
52874: LIST
52875: LIST
52876: LIST
52877: LIST
52878: LIST
52879: LIST
52880: LIST
52881: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52882: LD_ADDR_VAR 0 54
52886: PUSH
52887: LD_INT 0
52889: PUSH
52890: LD_INT 0
52892: PUSH
52893: EMPTY
52894: LIST
52895: LIST
52896: PUSH
52897: LD_INT 0
52899: PUSH
52900: LD_INT 1
52902: NEG
52903: PUSH
52904: EMPTY
52905: LIST
52906: LIST
52907: PUSH
52908: LD_INT 1
52910: PUSH
52911: LD_INT 0
52913: PUSH
52914: EMPTY
52915: LIST
52916: LIST
52917: PUSH
52918: LD_INT 1
52920: PUSH
52921: LD_INT 1
52923: PUSH
52924: EMPTY
52925: LIST
52926: LIST
52927: PUSH
52928: LD_INT 0
52930: PUSH
52931: LD_INT 1
52933: PUSH
52934: EMPTY
52935: LIST
52936: LIST
52937: PUSH
52938: LD_INT 1
52940: NEG
52941: PUSH
52942: LD_INT 0
52944: PUSH
52945: EMPTY
52946: LIST
52947: LIST
52948: PUSH
52949: LD_INT 1
52951: NEG
52952: PUSH
52953: LD_INT 1
52955: NEG
52956: PUSH
52957: EMPTY
52958: LIST
52959: LIST
52960: PUSH
52961: LD_INT 1
52963: NEG
52964: PUSH
52965: LD_INT 2
52967: NEG
52968: PUSH
52969: EMPTY
52970: LIST
52971: LIST
52972: PUSH
52973: LD_INT 0
52975: PUSH
52976: LD_INT 2
52978: NEG
52979: PUSH
52980: EMPTY
52981: LIST
52982: LIST
52983: PUSH
52984: LD_INT 1
52986: PUSH
52987: LD_INT 1
52989: NEG
52990: PUSH
52991: EMPTY
52992: LIST
52993: LIST
52994: PUSH
52995: LD_INT 2
52997: PUSH
52998: LD_INT 0
53000: PUSH
53001: EMPTY
53002: LIST
53003: LIST
53004: PUSH
53005: LD_INT 2
53007: PUSH
53008: LD_INT 1
53010: PUSH
53011: EMPTY
53012: LIST
53013: LIST
53014: PUSH
53015: LD_INT 2
53017: PUSH
53018: LD_INT 2
53020: PUSH
53021: EMPTY
53022: LIST
53023: LIST
53024: PUSH
53025: LD_INT 1
53027: PUSH
53028: LD_INT 2
53030: PUSH
53031: EMPTY
53032: LIST
53033: LIST
53034: PUSH
53035: LD_INT 0
53037: PUSH
53038: LD_INT 2
53040: PUSH
53041: EMPTY
53042: LIST
53043: LIST
53044: PUSH
53045: LD_INT 1
53047: NEG
53048: PUSH
53049: LD_INT 1
53051: PUSH
53052: EMPTY
53053: LIST
53054: LIST
53055: PUSH
53056: LD_INT 2
53058: NEG
53059: PUSH
53060: LD_INT 0
53062: PUSH
53063: EMPTY
53064: LIST
53065: LIST
53066: PUSH
53067: LD_INT 2
53069: NEG
53070: PUSH
53071: LD_INT 1
53073: NEG
53074: PUSH
53075: EMPTY
53076: LIST
53077: LIST
53078: PUSH
53079: LD_INT 2
53081: NEG
53082: PUSH
53083: LD_INT 2
53085: NEG
53086: PUSH
53087: EMPTY
53088: LIST
53089: LIST
53090: PUSH
53091: EMPTY
53092: LIST
53093: LIST
53094: LIST
53095: LIST
53096: LIST
53097: LIST
53098: LIST
53099: LIST
53100: LIST
53101: LIST
53102: LIST
53103: LIST
53104: LIST
53105: LIST
53106: LIST
53107: LIST
53108: LIST
53109: LIST
53110: LIST
53111: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53112: LD_ADDR_VAR 0 55
53116: PUSH
53117: LD_INT 0
53119: PUSH
53120: LD_INT 0
53122: PUSH
53123: EMPTY
53124: LIST
53125: LIST
53126: PUSH
53127: LD_INT 0
53129: PUSH
53130: LD_INT 1
53132: NEG
53133: PUSH
53134: EMPTY
53135: LIST
53136: LIST
53137: PUSH
53138: LD_INT 1
53140: PUSH
53141: LD_INT 0
53143: PUSH
53144: EMPTY
53145: LIST
53146: LIST
53147: PUSH
53148: LD_INT 1
53150: PUSH
53151: LD_INT 1
53153: PUSH
53154: EMPTY
53155: LIST
53156: LIST
53157: PUSH
53158: LD_INT 0
53160: PUSH
53161: LD_INT 1
53163: PUSH
53164: EMPTY
53165: LIST
53166: LIST
53167: PUSH
53168: LD_INT 1
53170: NEG
53171: PUSH
53172: LD_INT 0
53174: PUSH
53175: EMPTY
53176: LIST
53177: LIST
53178: PUSH
53179: LD_INT 1
53181: NEG
53182: PUSH
53183: LD_INT 1
53185: NEG
53186: PUSH
53187: EMPTY
53188: LIST
53189: LIST
53190: PUSH
53191: LD_INT 1
53193: NEG
53194: PUSH
53195: LD_INT 2
53197: NEG
53198: PUSH
53199: EMPTY
53200: LIST
53201: LIST
53202: PUSH
53203: LD_INT 0
53205: PUSH
53206: LD_INT 2
53208: NEG
53209: PUSH
53210: EMPTY
53211: LIST
53212: LIST
53213: PUSH
53214: LD_INT 1
53216: PUSH
53217: LD_INT 1
53219: NEG
53220: PUSH
53221: EMPTY
53222: LIST
53223: LIST
53224: PUSH
53225: LD_INT 2
53227: PUSH
53228: LD_INT 0
53230: PUSH
53231: EMPTY
53232: LIST
53233: LIST
53234: PUSH
53235: LD_INT 2
53237: PUSH
53238: LD_INT 1
53240: PUSH
53241: EMPTY
53242: LIST
53243: LIST
53244: PUSH
53245: LD_INT 2
53247: PUSH
53248: LD_INT 2
53250: PUSH
53251: EMPTY
53252: LIST
53253: LIST
53254: PUSH
53255: LD_INT 1
53257: PUSH
53258: LD_INT 2
53260: PUSH
53261: EMPTY
53262: LIST
53263: LIST
53264: PUSH
53265: LD_INT 0
53267: PUSH
53268: LD_INT 2
53270: PUSH
53271: EMPTY
53272: LIST
53273: LIST
53274: PUSH
53275: LD_INT 1
53277: NEG
53278: PUSH
53279: LD_INT 1
53281: PUSH
53282: EMPTY
53283: LIST
53284: LIST
53285: PUSH
53286: LD_INT 2
53288: NEG
53289: PUSH
53290: LD_INT 0
53292: PUSH
53293: EMPTY
53294: LIST
53295: LIST
53296: PUSH
53297: LD_INT 2
53299: NEG
53300: PUSH
53301: LD_INT 1
53303: NEG
53304: PUSH
53305: EMPTY
53306: LIST
53307: LIST
53308: PUSH
53309: LD_INT 2
53311: NEG
53312: PUSH
53313: LD_INT 2
53315: NEG
53316: PUSH
53317: EMPTY
53318: LIST
53319: LIST
53320: PUSH
53321: EMPTY
53322: LIST
53323: LIST
53324: LIST
53325: LIST
53326: LIST
53327: LIST
53328: LIST
53329: LIST
53330: LIST
53331: LIST
53332: LIST
53333: LIST
53334: LIST
53335: LIST
53336: LIST
53337: LIST
53338: LIST
53339: LIST
53340: LIST
53341: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53342: LD_ADDR_VAR 0 56
53346: PUSH
53347: LD_INT 0
53349: PUSH
53350: LD_INT 0
53352: PUSH
53353: EMPTY
53354: LIST
53355: LIST
53356: PUSH
53357: LD_INT 0
53359: PUSH
53360: LD_INT 1
53362: NEG
53363: PUSH
53364: EMPTY
53365: LIST
53366: LIST
53367: PUSH
53368: LD_INT 1
53370: PUSH
53371: LD_INT 0
53373: PUSH
53374: EMPTY
53375: LIST
53376: LIST
53377: PUSH
53378: LD_INT 1
53380: PUSH
53381: LD_INT 1
53383: PUSH
53384: EMPTY
53385: LIST
53386: LIST
53387: PUSH
53388: LD_INT 0
53390: PUSH
53391: LD_INT 1
53393: PUSH
53394: EMPTY
53395: LIST
53396: LIST
53397: PUSH
53398: LD_INT 1
53400: NEG
53401: PUSH
53402: LD_INT 0
53404: PUSH
53405: EMPTY
53406: LIST
53407: LIST
53408: PUSH
53409: LD_INT 1
53411: NEG
53412: PUSH
53413: LD_INT 1
53415: NEG
53416: PUSH
53417: EMPTY
53418: LIST
53419: LIST
53420: PUSH
53421: LD_INT 1
53423: NEG
53424: PUSH
53425: LD_INT 2
53427: NEG
53428: PUSH
53429: EMPTY
53430: LIST
53431: LIST
53432: PUSH
53433: LD_INT 0
53435: PUSH
53436: LD_INT 2
53438: NEG
53439: PUSH
53440: EMPTY
53441: LIST
53442: LIST
53443: PUSH
53444: LD_INT 1
53446: PUSH
53447: LD_INT 1
53449: NEG
53450: PUSH
53451: EMPTY
53452: LIST
53453: LIST
53454: PUSH
53455: LD_INT 2
53457: PUSH
53458: LD_INT 0
53460: PUSH
53461: EMPTY
53462: LIST
53463: LIST
53464: PUSH
53465: LD_INT 2
53467: PUSH
53468: LD_INT 1
53470: PUSH
53471: EMPTY
53472: LIST
53473: LIST
53474: PUSH
53475: LD_INT 2
53477: PUSH
53478: LD_INT 2
53480: PUSH
53481: EMPTY
53482: LIST
53483: LIST
53484: PUSH
53485: LD_INT 1
53487: PUSH
53488: LD_INT 2
53490: PUSH
53491: EMPTY
53492: LIST
53493: LIST
53494: PUSH
53495: LD_INT 0
53497: PUSH
53498: LD_INT 2
53500: PUSH
53501: EMPTY
53502: LIST
53503: LIST
53504: PUSH
53505: LD_INT 1
53507: NEG
53508: PUSH
53509: LD_INT 1
53511: PUSH
53512: EMPTY
53513: LIST
53514: LIST
53515: PUSH
53516: LD_INT 2
53518: NEG
53519: PUSH
53520: LD_INT 0
53522: PUSH
53523: EMPTY
53524: LIST
53525: LIST
53526: PUSH
53527: LD_INT 2
53529: NEG
53530: PUSH
53531: LD_INT 1
53533: NEG
53534: PUSH
53535: EMPTY
53536: LIST
53537: LIST
53538: PUSH
53539: LD_INT 2
53541: NEG
53542: PUSH
53543: LD_INT 2
53545: NEG
53546: PUSH
53547: EMPTY
53548: LIST
53549: LIST
53550: PUSH
53551: EMPTY
53552: LIST
53553: LIST
53554: LIST
53555: LIST
53556: LIST
53557: LIST
53558: LIST
53559: LIST
53560: LIST
53561: LIST
53562: LIST
53563: LIST
53564: LIST
53565: LIST
53566: LIST
53567: LIST
53568: LIST
53569: LIST
53570: LIST
53571: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53572: LD_ADDR_VAR 0 57
53576: PUSH
53577: LD_INT 0
53579: PUSH
53580: LD_INT 0
53582: PUSH
53583: EMPTY
53584: LIST
53585: LIST
53586: PUSH
53587: LD_INT 0
53589: PUSH
53590: LD_INT 1
53592: NEG
53593: PUSH
53594: EMPTY
53595: LIST
53596: LIST
53597: PUSH
53598: LD_INT 1
53600: PUSH
53601: LD_INT 0
53603: PUSH
53604: EMPTY
53605: LIST
53606: LIST
53607: PUSH
53608: LD_INT 1
53610: PUSH
53611: LD_INT 1
53613: PUSH
53614: EMPTY
53615: LIST
53616: LIST
53617: PUSH
53618: LD_INT 0
53620: PUSH
53621: LD_INT 1
53623: PUSH
53624: EMPTY
53625: LIST
53626: LIST
53627: PUSH
53628: LD_INT 1
53630: NEG
53631: PUSH
53632: LD_INT 0
53634: PUSH
53635: EMPTY
53636: LIST
53637: LIST
53638: PUSH
53639: LD_INT 1
53641: NEG
53642: PUSH
53643: LD_INT 1
53645: NEG
53646: PUSH
53647: EMPTY
53648: LIST
53649: LIST
53650: PUSH
53651: LD_INT 1
53653: NEG
53654: PUSH
53655: LD_INT 2
53657: NEG
53658: PUSH
53659: EMPTY
53660: LIST
53661: LIST
53662: PUSH
53663: LD_INT 0
53665: PUSH
53666: LD_INT 2
53668: NEG
53669: PUSH
53670: EMPTY
53671: LIST
53672: LIST
53673: PUSH
53674: LD_INT 1
53676: PUSH
53677: LD_INT 1
53679: NEG
53680: PUSH
53681: EMPTY
53682: LIST
53683: LIST
53684: PUSH
53685: LD_INT 2
53687: PUSH
53688: LD_INT 0
53690: PUSH
53691: EMPTY
53692: LIST
53693: LIST
53694: PUSH
53695: LD_INT 2
53697: PUSH
53698: LD_INT 1
53700: PUSH
53701: EMPTY
53702: LIST
53703: LIST
53704: PUSH
53705: LD_INT 2
53707: PUSH
53708: LD_INT 2
53710: PUSH
53711: EMPTY
53712: LIST
53713: LIST
53714: PUSH
53715: LD_INT 1
53717: PUSH
53718: LD_INT 2
53720: PUSH
53721: EMPTY
53722: LIST
53723: LIST
53724: PUSH
53725: LD_INT 0
53727: PUSH
53728: LD_INT 2
53730: PUSH
53731: EMPTY
53732: LIST
53733: LIST
53734: PUSH
53735: LD_INT 1
53737: NEG
53738: PUSH
53739: LD_INT 1
53741: PUSH
53742: EMPTY
53743: LIST
53744: LIST
53745: PUSH
53746: LD_INT 2
53748: NEG
53749: PUSH
53750: LD_INT 0
53752: PUSH
53753: EMPTY
53754: LIST
53755: LIST
53756: PUSH
53757: LD_INT 2
53759: NEG
53760: PUSH
53761: LD_INT 1
53763: NEG
53764: PUSH
53765: EMPTY
53766: LIST
53767: LIST
53768: PUSH
53769: LD_INT 2
53771: NEG
53772: PUSH
53773: LD_INT 2
53775: NEG
53776: PUSH
53777: EMPTY
53778: LIST
53779: LIST
53780: PUSH
53781: EMPTY
53782: LIST
53783: LIST
53784: LIST
53785: LIST
53786: LIST
53787: LIST
53788: LIST
53789: LIST
53790: LIST
53791: LIST
53792: LIST
53793: LIST
53794: LIST
53795: LIST
53796: LIST
53797: LIST
53798: LIST
53799: LIST
53800: LIST
53801: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53802: LD_ADDR_VAR 0 58
53806: PUSH
53807: LD_INT 0
53809: PUSH
53810: LD_INT 0
53812: PUSH
53813: EMPTY
53814: LIST
53815: LIST
53816: PUSH
53817: LD_INT 0
53819: PUSH
53820: LD_INT 1
53822: NEG
53823: PUSH
53824: EMPTY
53825: LIST
53826: LIST
53827: PUSH
53828: LD_INT 1
53830: PUSH
53831: LD_INT 0
53833: PUSH
53834: EMPTY
53835: LIST
53836: LIST
53837: PUSH
53838: LD_INT 1
53840: PUSH
53841: LD_INT 1
53843: PUSH
53844: EMPTY
53845: LIST
53846: LIST
53847: PUSH
53848: LD_INT 0
53850: PUSH
53851: LD_INT 1
53853: PUSH
53854: EMPTY
53855: LIST
53856: LIST
53857: PUSH
53858: LD_INT 1
53860: NEG
53861: PUSH
53862: LD_INT 0
53864: PUSH
53865: EMPTY
53866: LIST
53867: LIST
53868: PUSH
53869: LD_INT 1
53871: NEG
53872: PUSH
53873: LD_INT 1
53875: NEG
53876: PUSH
53877: EMPTY
53878: LIST
53879: LIST
53880: PUSH
53881: LD_INT 1
53883: NEG
53884: PUSH
53885: LD_INT 2
53887: NEG
53888: PUSH
53889: EMPTY
53890: LIST
53891: LIST
53892: PUSH
53893: LD_INT 0
53895: PUSH
53896: LD_INT 2
53898: NEG
53899: PUSH
53900: EMPTY
53901: LIST
53902: LIST
53903: PUSH
53904: LD_INT 1
53906: PUSH
53907: LD_INT 1
53909: NEG
53910: PUSH
53911: EMPTY
53912: LIST
53913: LIST
53914: PUSH
53915: LD_INT 2
53917: PUSH
53918: LD_INT 0
53920: PUSH
53921: EMPTY
53922: LIST
53923: LIST
53924: PUSH
53925: LD_INT 2
53927: PUSH
53928: LD_INT 1
53930: PUSH
53931: EMPTY
53932: LIST
53933: LIST
53934: PUSH
53935: LD_INT 2
53937: PUSH
53938: LD_INT 2
53940: PUSH
53941: EMPTY
53942: LIST
53943: LIST
53944: PUSH
53945: LD_INT 1
53947: PUSH
53948: LD_INT 2
53950: PUSH
53951: EMPTY
53952: LIST
53953: LIST
53954: PUSH
53955: LD_INT 0
53957: PUSH
53958: LD_INT 2
53960: PUSH
53961: EMPTY
53962: LIST
53963: LIST
53964: PUSH
53965: LD_INT 1
53967: NEG
53968: PUSH
53969: LD_INT 1
53971: PUSH
53972: EMPTY
53973: LIST
53974: LIST
53975: PUSH
53976: LD_INT 2
53978: NEG
53979: PUSH
53980: LD_INT 0
53982: PUSH
53983: EMPTY
53984: LIST
53985: LIST
53986: PUSH
53987: LD_INT 2
53989: NEG
53990: PUSH
53991: LD_INT 1
53993: NEG
53994: PUSH
53995: EMPTY
53996: LIST
53997: LIST
53998: PUSH
53999: LD_INT 2
54001: NEG
54002: PUSH
54003: LD_INT 2
54005: NEG
54006: PUSH
54007: EMPTY
54008: LIST
54009: LIST
54010: PUSH
54011: EMPTY
54012: LIST
54013: LIST
54014: LIST
54015: LIST
54016: LIST
54017: LIST
54018: LIST
54019: LIST
54020: LIST
54021: LIST
54022: LIST
54023: LIST
54024: LIST
54025: LIST
54026: LIST
54027: LIST
54028: LIST
54029: LIST
54030: LIST
54031: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54032: LD_ADDR_VAR 0 59
54036: PUSH
54037: LD_INT 0
54039: PUSH
54040: LD_INT 0
54042: PUSH
54043: EMPTY
54044: LIST
54045: LIST
54046: PUSH
54047: LD_INT 0
54049: PUSH
54050: LD_INT 1
54052: NEG
54053: PUSH
54054: EMPTY
54055: LIST
54056: LIST
54057: PUSH
54058: LD_INT 1
54060: PUSH
54061: LD_INT 0
54063: PUSH
54064: EMPTY
54065: LIST
54066: LIST
54067: PUSH
54068: LD_INT 1
54070: PUSH
54071: LD_INT 1
54073: PUSH
54074: EMPTY
54075: LIST
54076: LIST
54077: PUSH
54078: LD_INT 0
54080: PUSH
54081: LD_INT 1
54083: PUSH
54084: EMPTY
54085: LIST
54086: LIST
54087: PUSH
54088: LD_INT 1
54090: NEG
54091: PUSH
54092: LD_INT 0
54094: PUSH
54095: EMPTY
54096: LIST
54097: LIST
54098: PUSH
54099: LD_INT 1
54101: NEG
54102: PUSH
54103: LD_INT 1
54105: NEG
54106: PUSH
54107: EMPTY
54108: LIST
54109: LIST
54110: PUSH
54111: EMPTY
54112: LIST
54113: LIST
54114: LIST
54115: LIST
54116: LIST
54117: LIST
54118: LIST
54119: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54120: LD_ADDR_VAR 0 60
54124: PUSH
54125: LD_INT 0
54127: PUSH
54128: LD_INT 0
54130: PUSH
54131: EMPTY
54132: LIST
54133: LIST
54134: PUSH
54135: LD_INT 0
54137: PUSH
54138: LD_INT 1
54140: NEG
54141: PUSH
54142: EMPTY
54143: LIST
54144: LIST
54145: PUSH
54146: LD_INT 1
54148: PUSH
54149: LD_INT 0
54151: PUSH
54152: EMPTY
54153: LIST
54154: LIST
54155: PUSH
54156: LD_INT 1
54158: PUSH
54159: LD_INT 1
54161: PUSH
54162: EMPTY
54163: LIST
54164: LIST
54165: PUSH
54166: LD_INT 0
54168: PUSH
54169: LD_INT 1
54171: PUSH
54172: EMPTY
54173: LIST
54174: LIST
54175: PUSH
54176: LD_INT 1
54178: NEG
54179: PUSH
54180: LD_INT 0
54182: PUSH
54183: EMPTY
54184: LIST
54185: LIST
54186: PUSH
54187: LD_INT 1
54189: NEG
54190: PUSH
54191: LD_INT 1
54193: NEG
54194: PUSH
54195: EMPTY
54196: LIST
54197: LIST
54198: PUSH
54199: EMPTY
54200: LIST
54201: LIST
54202: LIST
54203: LIST
54204: LIST
54205: LIST
54206: LIST
54207: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54208: LD_ADDR_VAR 0 61
54212: PUSH
54213: LD_INT 0
54215: PUSH
54216: LD_INT 0
54218: PUSH
54219: EMPTY
54220: LIST
54221: LIST
54222: PUSH
54223: LD_INT 0
54225: PUSH
54226: LD_INT 1
54228: NEG
54229: PUSH
54230: EMPTY
54231: LIST
54232: LIST
54233: PUSH
54234: LD_INT 1
54236: PUSH
54237: LD_INT 0
54239: PUSH
54240: EMPTY
54241: LIST
54242: LIST
54243: PUSH
54244: LD_INT 1
54246: PUSH
54247: LD_INT 1
54249: PUSH
54250: EMPTY
54251: LIST
54252: LIST
54253: PUSH
54254: LD_INT 0
54256: PUSH
54257: LD_INT 1
54259: PUSH
54260: EMPTY
54261: LIST
54262: LIST
54263: PUSH
54264: LD_INT 1
54266: NEG
54267: PUSH
54268: LD_INT 0
54270: PUSH
54271: EMPTY
54272: LIST
54273: LIST
54274: PUSH
54275: LD_INT 1
54277: NEG
54278: PUSH
54279: LD_INT 1
54281: NEG
54282: PUSH
54283: EMPTY
54284: LIST
54285: LIST
54286: PUSH
54287: EMPTY
54288: LIST
54289: LIST
54290: LIST
54291: LIST
54292: LIST
54293: LIST
54294: LIST
54295: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54296: LD_ADDR_VAR 0 62
54300: PUSH
54301: LD_INT 0
54303: PUSH
54304: LD_INT 0
54306: PUSH
54307: EMPTY
54308: LIST
54309: LIST
54310: PUSH
54311: LD_INT 0
54313: PUSH
54314: LD_INT 1
54316: NEG
54317: PUSH
54318: EMPTY
54319: LIST
54320: LIST
54321: PUSH
54322: LD_INT 1
54324: PUSH
54325: LD_INT 0
54327: PUSH
54328: EMPTY
54329: LIST
54330: LIST
54331: PUSH
54332: LD_INT 1
54334: PUSH
54335: LD_INT 1
54337: PUSH
54338: EMPTY
54339: LIST
54340: LIST
54341: PUSH
54342: LD_INT 0
54344: PUSH
54345: LD_INT 1
54347: PUSH
54348: EMPTY
54349: LIST
54350: LIST
54351: PUSH
54352: LD_INT 1
54354: NEG
54355: PUSH
54356: LD_INT 0
54358: PUSH
54359: EMPTY
54360: LIST
54361: LIST
54362: PUSH
54363: LD_INT 1
54365: NEG
54366: PUSH
54367: LD_INT 1
54369: NEG
54370: PUSH
54371: EMPTY
54372: LIST
54373: LIST
54374: PUSH
54375: EMPTY
54376: LIST
54377: LIST
54378: LIST
54379: LIST
54380: LIST
54381: LIST
54382: LIST
54383: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54384: LD_ADDR_VAR 0 63
54388: PUSH
54389: LD_INT 0
54391: PUSH
54392: LD_INT 0
54394: PUSH
54395: EMPTY
54396: LIST
54397: LIST
54398: PUSH
54399: LD_INT 0
54401: PUSH
54402: LD_INT 1
54404: NEG
54405: PUSH
54406: EMPTY
54407: LIST
54408: LIST
54409: PUSH
54410: LD_INT 1
54412: PUSH
54413: LD_INT 0
54415: PUSH
54416: EMPTY
54417: LIST
54418: LIST
54419: PUSH
54420: LD_INT 1
54422: PUSH
54423: LD_INT 1
54425: PUSH
54426: EMPTY
54427: LIST
54428: LIST
54429: PUSH
54430: LD_INT 0
54432: PUSH
54433: LD_INT 1
54435: PUSH
54436: EMPTY
54437: LIST
54438: LIST
54439: PUSH
54440: LD_INT 1
54442: NEG
54443: PUSH
54444: LD_INT 0
54446: PUSH
54447: EMPTY
54448: LIST
54449: LIST
54450: PUSH
54451: LD_INT 1
54453: NEG
54454: PUSH
54455: LD_INT 1
54457: NEG
54458: PUSH
54459: EMPTY
54460: LIST
54461: LIST
54462: PUSH
54463: EMPTY
54464: LIST
54465: LIST
54466: LIST
54467: LIST
54468: LIST
54469: LIST
54470: LIST
54471: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54472: LD_ADDR_VAR 0 64
54476: PUSH
54477: LD_INT 0
54479: PUSH
54480: LD_INT 0
54482: PUSH
54483: EMPTY
54484: LIST
54485: LIST
54486: PUSH
54487: LD_INT 0
54489: PUSH
54490: LD_INT 1
54492: NEG
54493: PUSH
54494: EMPTY
54495: LIST
54496: LIST
54497: PUSH
54498: LD_INT 1
54500: PUSH
54501: LD_INT 0
54503: PUSH
54504: EMPTY
54505: LIST
54506: LIST
54507: PUSH
54508: LD_INT 1
54510: PUSH
54511: LD_INT 1
54513: PUSH
54514: EMPTY
54515: LIST
54516: LIST
54517: PUSH
54518: LD_INT 0
54520: PUSH
54521: LD_INT 1
54523: PUSH
54524: EMPTY
54525: LIST
54526: LIST
54527: PUSH
54528: LD_INT 1
54530: NEG
54531: PUSH
54532: LD_INT 0
54534: PUSH
54535: EMPTY
54536: LIST
54537: LIST
54538: PUSH
54539: LD_INT 1
54541: NEG
54542: PUSH
54543: LD_INT 1
54545: NEG
54546: PUSH
54547: EMPTY
54548: LIST
54549: LIST
54550: PUSH
54551: EMPTY
54552: LIST
54553: LIST
54554: LIST
54555: LIST
54556: LIST
54557: LIST
54558: LIST
54559: ST_TO_ADDR
// end ; 1 :
54560: GO 60457
54562: LD_INT 1
54564: DOUBLE
54565: EQUAL
54566: IFTRUE 54570
54568: GO 57193
54570: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54571: LD_ADDR_VAR 0 11
54575: PUSH
54576: LD_INT 1
54578: NEG
54579: PUSH
54580: LD_INT 3
54582: NEG
54583: PUSH
54584: EMPTY
54585: LIST
54586: LIST
54587: PUSH
54588: LD_INT 0
54590: PUSH
54591: LD_INT 3
54593: NEG
54594: PUSH
54595: EMPTY
54596: LIST
54597: LIST
54598: PUSH
54599: LD_INT 1
54601: PUSH
54602: LD_INT 2
54604: NEG
54605: PUSH
54606: EMPTY
54607: LIST
54608: LIST
54609: PUSH
54610: EMPTY
54611: LIST
54612: LIST
54613: LIST
54614: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54615: LD_ADDR_VAR 0 12
54619: PUSH
54620: LD_INT 2
54622: PUSH
54623: LD_INT 1
54625: NEG
54626: PUSH
54627: EMPTY
54628: LIST
54629: LIST
54630: PUSH
54631: LD_INT 3
54633: PUSH
54634: LD_INT 0
54636: PUSH
54637: EMPTY
54638: LIST
54639: LIST
54640: PUSH
54641: LD_INT 3
54643: PUSH
54644: LD_INT 1
54646: PUSH
54647: EMPTY
54648: LIST
54649: LIST
54650: PUSH
54651: EMPTY
54652: LIST
54653: LIST
54654: LIST
54655: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54656: LD_ADDR_VAR 0 13
54660: PUSH
54661: LD_INT 3
54663: PUSH
54664: LD_INT 2
54666: PUSH
54667: EMPTY
54668: LIST
54669: LIST
54670: PUSH
54671: LD_INT 3
54673: PUSH
54674: LD_INT 3
54676: PUSH
54677: EMPTY
54678: LIST
54679: LIST
54680: PUSH
54681: LD_INT 2
54683: PUSH
54684: LD_INT 3
54686: PUSH
54687: EMPTY
54688: LIST
54689: LIST
54690: PUSH
54691: EMPTY
54692: LIST
54693: LIST
54694: LIST
54695: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54696: LD_ADDR_VAR 0 14
54700: PUSH
54701: LD_INT 1
54703: PUSH
54704: LD_INT 3
54706: PUSH
54707: EMPTY
54708: LIST
54709: LIST
54710: PUSH
54711: LD_INT 0
54713: PUSH
54714: LD_INT 3
54716: PUSH
54717: EMPTY
54718: LIST
54719: LIST
54720: PUSH
54721: LD_INT 1
54723: NEG
54724: PUSH
54725: LD_INT 2
54727: PUSH
54728: EMPTY
54729: LIST
54730: LIST
54731: PUSH
54732: EMPTY
54733: LIST
54734: LIST
54735: LIST
54736: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54737: LD_ADDR_VAR 0 15
54741: PUSH
54742: LD_INT 2
54744: NEG
54745: PUSH
54746: LD_INT 1
54748: PUSH
54749: EMPTY
54750: LIST
54751: LIST
54752: PUSH
54753: LD_INT 3
54755: NEG
54756: PUSH
54757: LD_INT 0
54759: PUSH
54760: EMPTY
54761: LIST
54762: LIST
54763: PUSH
54764: LD_INT 3
54766: NEG
54767: PUSH
54768: LD_INT 1
54770: NEG
54771: PUSH
54772: EMPTY
54773: LIST
54774: LIST
54775: PUSH
54776: EMPTY
54777: LIST
54778: LIST
54779: LIST
54780: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54781: LD_ADDR_VAR 0 16
54785: PUSH
54786: LD_INT 2
54788: NEG
54789: PUSH
54790: LD_INT 3
54792: NEG
54793: PUSH
54794: EMPTY
54795: LIST
54796: LIST
54797: PUSH
54798: LD_INT 3
54800: NEG
54801: PUSH
54802: LD_INT 2
54804: NEG
54805: PUSH
54806: EMPTY
54807: LIST
54808: LIST
54809: PUSH
54810: LD_INT 3
54812: NEG
54813: PUSH
54814: LD_INT 3
54816: NEG
54817: PUSH
54818: EMPTY
54819: LIST
54820: LIST
54821: PUSH
54822: EMPTY
54823: LIST
54824: LIST
54825: LIST
54826: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54827: LD_ADDR_VAR 0 17
54831: PUSH
54832: LD_INT 1
54834: NEG
54835: PUSH
54836: LD_INT 3
54838: NEG
54839: PUSH
54840: EMPTY
54841: LIST
54842: LIST
54843: PUSH
54844: LD_INT 0
54846: PUSH
54847: LD_INT 3
54849: NEG
54850: PUSH
54851: EMPTY
54852: LIST
54853: LIST
54854: PUSH
54855: LD_INT 1
54857: PUSH
54858: LD_INT 2
54860: NEG
54861: PUSH
54862: EMPTY
54863: LIST
54864: LIST
54865: PUSH
54866: EMPTY
54867: LIST
54868: LIST
54869: LIST
54870: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54871: LD_ADDR_VAR 0 18
54875: PUSH
54876: LD_INT 2
54878: PUSH
54879: LD_INT 1
54881: NEG
54882: PUSH
54883: EMPTY
54884: LIST
54885: LIST
54886: PUSH
54887: LD_INT 3
54889: PUSH
54890: LD_INT 0
54892: PUSH
54893: EMPTY
54894: LIST
54895: LIST
54896: PUSH
54897: LD_INT 3
54899: PUSH
54900: LD_INT 1
54902: PUSH
54903: EMPTY
54904: LIST
54905: LIST
54906: PUSH
54907: EMPTY
54908: LIST
54909: LIST
54910: LIST
54911: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54912: LD_ADDR_VAR 0 19
54916: PUSH
54917: LD_INT 3
54919: PUSH
54920: LD_INT 2
54922: PUSH
54923: EMPTY
54924: LIST
54925: LIST
54926: PUSH
54927: LD_INT 3
54929: PUSH
54930: LD_INT 3
54932: PUSH
54933: EMPTY
54934: LIST
54935: LIST
54936: PUSH
54937: LD_INT 2
54939: PUSH
54940: LD_INT 3
54942: PUSH
54943: EMPTY
54944: LIST
54945: LIST
54946: PUSH
54947: EMPTY
54948: LIST
54949: LIST
54950: LIST
54951: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54952: LD_ADDR_VAR 0 20
54956: PUSH
54957: LD_INT 1
54959: PUSH
54960: LD_INT 3
54962: PUSH
54963: EMPTY
54964: LIST
54965: LIST
54966: PUSH
54967: LD_INT 0
54969: PUSH
54970: LD_INT 3
54972: PUSH
54973: EMPTY
54974: LIST
54975: LIST
54976: PUSH
54977: LD_INT 1
54979: NEG
54980: PUSH
54981: LD_INT 2
54983: PUSH
54984: EMPTY
54985: LIST
54986: LIST
54987: PUSH
54988: EMPTY
54989: LIST
54990: LIST
54991: LIST
54992: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54993: LD_ADDR_VAR 0 21
54997: PUSH
54998: LD_INT 2
55000: NEG
55001: PUSH
55002: LD_INT 1
55004: PUSH
55005: EMPTY
55006: LIST
55007: LIST
55008: PUSH
55009: LD_INT 3
55011: NEG
55012: PUSH
55013: LD_INT 0
55015: PUSH
55016: EMPTY
55017: LIST
55018: LIST
55019: PUSH
55020: LD_INT 3
55022: NEG
55023: PUSH
55024: LD_INT 1
55026: NEG
55027: PUSH
55028: EMPTY
55029: LIST
55030: LIST
55031: PUSH
55032: EMPTY
55033: LIST
55034: LIST
55035: LIST
55036: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55037: LD_ADDR_VAR 0 22
55041: PUSH
55042: LD_INT 2
55044: NEG
55045: PUSH
55046: LD_INT 3
55048: NEG
55049: PUSH
55050: EMPTY
55051: LIST
55052: LIST
55053: PUSH
55054: LD_INT 3
55056: NEG
55057: PUSH
55058: LD_INT 2
55060: NEG
55061: PUSH
55062: EMPTY
55063: LIST
55064: LIST
55065: PUSH
55066: LD_INT 3
55068: NEG
55069: PUSH
55070: LD_INT 3
55072: NEG
55073: PUSH
55074: EMPTY
55075: LIST
55076: LIST
55077: PUSH
55078: EMPTY
55079: LIST
55080: LIST
55081: LIST
55082: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
55083: LD_ADDR_VAR 0 23
55087: PUSH
55088: LD_INT 0
55090: PUSH
55091: LD_INT 3
55093: NEG
55094: PUSH
55095: EMPTY
55096: LIST
55097: LIST
55098: PUSH
55099: LD_INT 1
55101: NEG
55102: PUSH
55103: LD_INT 4
55105: NEG
55106: PUSH
55107: EMPTY
55108: LIST
55109: LIST
55110: PUSH
55111: LD_INT 1
55113: PUSH
55114: LD_INT 3
55116: NEG
55117: PUSH
55118: EMPTY
55119: LIST
55120: LIST
55121: PUSH
55122: EMPTY
55123: LIST
55124: LIST
55125: LIST
55126: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
55127: LD_ADDR_VAR 0 24
55131: PUSH
55132: LD_INT 3
55134: PUSH
55135: LD_INT 0
55137: PUSH
55138: EMPTY
55139: LIST
55140: LIST
55141: PUSH
55142: LD_INT 3
55144: PUSH
55145: LD_INT 1
55147: NEG
55148: PUSH
55149: EMPTY
55150: LIST
55151: LIST
55152: PUSH
55153: LD_INT 4
55155: PUSH
55156: LD_INT 1
55158: PUSH
55159: EMPTY
55160: LIST
55161: LIST
55162: PUSH
55163: EMPTY
55164: LIST
55165: LIST
55166: LIST
55167: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
55168: LD_ADDR_VAR 0 25
55172: PUSH
55173: LD_INT 3
55175: PUSH
55176: LD_INT 3
55178: PUSH
55179: EMPTY
55180: LIST
55181: LIST
55182: PUSH
55183: LD_INT 4
55185: PUSH
55186: LD_INT 3
55188: PUSH
55189: EMPTY
55190: LIST
55191: LIST
55192: PUSH
55193: LD_INT 3
55195: PUSH
55196: LD_INT 4
55198: PUSH
55199: EMPTY
55200: LIST
55201: LIST
55202: PUSH
55203: EMPTY
55204: LIST
55205: LIST
55206: LIST
55207: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
55208: LD_ADDR_VAR 0 26
55212: PUSH
55213: LD_INT 0
55215: PUSH
55216: LD_INT 3
55218: PUSH
55219: EMPTY
55220: LIST
55221: LIST
55222: PUSH
55223: LD_INT 1
55225: PUSH
55226: LD_INT 4
55228: PUSH
55229: EMPTY
55230: LIST
55231: LIST
55232: PUSH
55233: LD_INT 1
55235: NEG
55236: PUSH
55237: LD_INT 3
55239: PUSH
55240: EMPTY
55241: LIST
55242: LIST
55243: PUSH
55244: EMPTY
55245: LIST
55246: LIST
55247: LIST
55248: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
55249: LD_ADDR_VAR 0 27
55253: PUSH
55254: LD_INT 3
55256: NEG
55257: PUSH
55258: LD_INT 0
55260: PUSH
55261: EMPTY
55262: LIST
55263: LIST
55264: PUSH
55265: LD_INT 3
55267: NEG
55268: PUSH
55269: LD_INT 1
55271: PUSH
55272: EMPTY
55273: LIST
55274: LIST
55275: PUSH
55276: LD_INT 4
55278: NEG
55279: PUSH
55280: LD_INT 1
55282: NEG
55283: PUSH
55284: EMPTY
55285: LIST
55286: LIST
55287: PUSH
55288: EMPTY
55289: LIST
55290: LIST
55291: LIST
55292: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
55293: LD_ADDR_VAR 0 28
55297: PUSH
55298: LD_INT 3
55300: NEG
55301: PUSH
55302: LD_INT 3
55304: NEG
55305: PUSH
55306: EMPTY
55307: LIST
55308: LIST
55309: PUSH
55310: LD_INT 3
55312: NEG
55313: PUSH
55314: LD_INT 4
55316: NEG
55317: PUSH
55318: EMPTY
55319: LIST
55320: LIST
55321: PUSH
55322: LD_INT 4
55324: NEG
55325: PUSH
55326: LD_INT 3
55328: NEG
55329: PUSH
55330: EMPTY
55331: LIST
55332: LIST
55333: PUSH
55334: EMPTY
55335: LIST
55336: LIST
55337: LIST
55338: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
55339: LD_ADDR_VAR 0 29
55343: PUSH
55344: LD_INT 1
55346: NEG
55347: PUSH
55348: LD_INT 3
55350: NEG
55351: PUSH
55352: EMPTY
55353: LIST
55354: LIST
55355: PUSH
55356: LD_INT 0
55358: PUSH
55359: LD_INT 3
55361: NEG
55362: PUSH
55363: EMPTY
55364: LIST
55365: LIST
55366: PUSH
55367: LD_INT 1
55369: PUSH
55370: LD_INT 2
55372: NEG
55373: PUSH
55374: EMPTY
55375: LIST
55376: LIST
55377: PUSH
55378: LD_INT 1
55380: NEG
55381: PUSH
55382: LD_INT 4
55384: NEG
55385: PUSH
55386: EMPTY
55387: LIST
55388: LIST
55389: PUSH
55390: LD_INT 0
55392: PUSH
55393: LD_INT 4
55395: NEG
55396: PUSH
55397: EMPTY
55398: LIST
55399: LIST
55400: PUSH
55401: LD_INT 1
55403: PUSH
55404: LD_INT 3
55406: NEG
55407: PUSH
55408: EMPTY
55409: LIST
55410: LIST
55411: PUSH
55412: LD_INT 1
55414: NEG
55415: PUSH
55416: LD_INT 5
55418: NEG
55419: PUSH
55420: EMPTY
55421: LIST
55422: LIST
55423: PUSH
55424: LD_INT 0
55426: PUSH
55427: LD_INT 5
55429: NEG
55430: PUSH
55431: EMPTY
55432: LIST
55433: LIST
55434: PUSH
55435: LD_INT 1
55437: PUSH
55438: LD_INT 4
55440: NEG
55441: PUSH
55442: EMPTY
55443: LIST
55444: LIST
55445: PUSH
55446: LD_INT 1
55448: NEG
55449: PUSH
55450: LD_INT 6
55452: NEG
55453: PUSH
55454: EMPTY
55455: LIST
55456: LIST
55457: PUSH
55458: LD_INT 0
55460: PUSH
55461: LD_INT 6
55463: NEG
55464: PUSH
55465: EMPTY
55466: LIST
55467: LIST
55468: PUSH
55469: LD_INT 1
55471: PUSH
55472: LD_INT 5
55474: NEG
55475: PUSH
55476: EMPTY
55477: LIST
55478: LIST
55479: PUSH
55480: EMPTY
55481: LIST
55482: LIST
55483: LIST
55484: LIST
55485: LIST
55486: LIST
55487: LIST
55488: LIST
55489: LIST
55490: LIST
55491: LIST
55492: LIST
55493: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
55494: LD_ADDR_VAR 0 30
55498: PUSH
55499: LD_INT 2
55501: PUSH
55502: LD_INT 1
55504: NEG
55505: PUSH
55506: EMPTY
55507: LIST
55508: LIST
55509: PUSH
55510: LD_INT 3
55512: PUSH
55513: LD_INT 0
55515: PUSH
55516: EMPTY
55517: LIST
55518: LIST
55519: PUSH
55520: LD_INT 3
55522: PUSH
55523: LD_INT 1
55525: PUSH
55526: EMPTY
55527: LIST
55528: LIST
55529: PUSH
55530: LD_INT 3
55532: PUSH
55533: LD_INT 1
55535: NEG
55536: PUSH
55537: EMPTY
55538: LIST
55539: LIST
55540: PUSH
55541: LD_INT 4
55543: PUSH
55544: LD_INT 0
55546: PUSH
55547: EMPTY
55548: LIST
55549: LIST
55550: PUSH
55551: LD_INT 4
55553: PUSH
55554: LD_INT 1
55556: PUSH
55557: EMPTY
55558: LIST
55559: LIST
55560: PUSH
55561: LD_INT 4
55563: PUSH
55564: LD_INT 1
55566: NEG
55567: PUSH
55568: EMPTY
55569: LIST
55570: LIST
55571: PUSH
55572: LD_INT 5
55574: PUSH
55575: LD_INT 0
55577: PUSH
55578: EMPTY
55579: LIST
55580: LIST
55581: PUSH
55582: LD_INT 5
55584: PUSH
55585: LD_INT 1
55587: PUSH
55588: EMPTY
55589: LIST
55590: LIST
55591: PUSH
55592: LD_INT 5
55594: PUSH
55595: LD_INT 1
55597: NEG
55598: PUSH
55599: EMPTY
55600: LIST
55601: LIST
55602: PUSH
55603: LD_INT 6
55605: PUSH
55606: LD_INT 0
55608: PUSH
55609: EMPTY
55610: LIST
55611: LIST
55612: PUSH
55613: LD_INT 6
55615: PUSH
55616: LD_INT 1
55618: PUSH
55619: EMPTY
55620: LIST
55621: LIST
55622: PUSH
55623: EMPTY
55624: LIST
55625: LIST
55626: LIST
55627: LIST
55628: LIST
55629: LIST
55630: LIST
55631: LIST
55632: LIST
55633: LIST
55634: LIST
55635: LIST
55636: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
55637: LD_ADDR_VAR 0 31
55641: PUSH
55642: LD_INT 3
55644: PUSH
55645: LD_INT 2
55647: PUSH
55648: EMPTY
55649: LIST
55650: LIST
55651: PUSH
55652: LD_INT 3
55654: PUSH
55655: LD_INT 3
55657: PUSH
55658: EMPTY
55659: LIST
55660: LIST
55661: PUSH
55662: LD_INT 2
55664: PUSH
55665: LD_INT 3
55667: PUSH
55668: EMPTY
55669: LIST
55670: LIST
55671: PUSH
55672: LD_INT 4
55674: PUSH
55675: LD_INT 3
55677: PUSH
55678: EMPTY
55679: LIST
55680: LIST
55681: PUSH
55682: LD_INT 4
55684: PUSH
55685: LD_INT 4
55687: PUSH
55688: EMPTY
55689: LIST
55690: LIST
55691: PUSH
55692: LD_INT 3
55694: PUSH
55695: LD_INT 4
55697: PUSH
55698: EMPTY
55699: LIST
55700: LIST
55701: PUSH
55702: LD_INT 5
55704: PUSH
55705: LD_INT 4
55707: PUSH
55708: EMPTY
55709: LIST
55710: LIST
55711: PUSH
55712: LD_INT 5
55714: PUSH
55715: LD_INT 5
55717: PUSH
55718: EMPTY
55719: LIST
55720: LIST
55721: PUSH
55722: LD_INT 4
55724: PUSH
55725: LD_INT 5
55727: PUSH
55728: EMPTY
55729: LIST
55730: LIST
55731: PUSH
55732: LD_INT 6
55734: PUSH
55735: LD_INT 5
55737: PUSH
55738: EMPTY
55739: LIST
55740: LIST
55741: PUSH
55742: LD_INT 6
55744: PUSH
55745: LD_INT 6
55747: PUSH
55748: EMPTY
55749: LIST
55750: LIST
55751: PUSH
55752: LD_INT 5
55754: PUSH
55755: LD_INT 6
55757: PUSH
55758: EMPTY
55759: LIST
55760: LIST
55761: PUSH
55762: EMPTY
55763: LIST
55764: LIST
55765: LIST
55766: LIST
55767: LIST
55768: LIST
55769: LIST
55770: LIST
55771: LIST
55772: LIST
55773: LIST
55774: LIST
55775: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
55776: LD_ADDR_VAR 0 32
55780: PUSH
55781: LD_INT 1
55783: PUSH
55784: LD_INT 3
55786: PUSH
55787: EMPTY
55788: LIST
55789: LIST
55790: PUSH
55791: LD_INT 0
55793: PUSH
55794: LD_INT 3
55796: PUSH
55797: EMPTY
55798: LIST
55799: LIST
55800: PUSH
55801: LD_INT 1
55803: NEG
55804: PUSH
55805: LD_INT 2
55807: PUSH
55808: EMPTY
55809: LIST
55810: LIST
55811: PUSH
55812: LD_INT 1
55814: PUSH
55815: LD_INT 4
55817: PUSH
55818: EMPTY
55819: LIST
55820: LIST
55821: PUSH
55822: LD_INT 0
55824: PUSH
55825: LD_INT 4
55827: PUSH
55828: EMPTY
55829: LIST
55830: LIST
55831: PUSH
55832: LD_INT 1
55834: NEG
55835: PUSH
55836: LD_INT 3
55838: PUSH
55839: EMPTY
55840: LIST
55841: LIST
55842: PUSH
55843: LD_INT 1
55845: PUSH
55846: LD_INT 5
55848: PUSH
55849: EMPTY
55850: LIST
55851: LIST
55852: PUSH
55853: LD_INT 0
55855: PUSH
55856: LD_INT 5
55858: PUSH
55859: EMPTY
55860: LIST
55861: LIST
55862: PUSH
55863: LD_INT 1
55865: NEG
55866: PUSH
55867: LD_INT 4
55869: PUSH
55870: EMPTY
55871: LIST
55872: LIST
55873: PUSH
55874: LD_INT 1
55876: PUSH
55877: LD_INT 6
55879: PUSH
55880: EMPTY
55881: LIST
55882: LIST
55883: PUSH
55884: LD_INT 0
55886: PUSH
55887: LD_INT 6
55889: PUSH
55890: EMPTY
55891: LIST
55892: LIST
55893: PUSH
55894: LD_INT 1
55896: NEG
55897: PUSH
55898: LD_INT 5
55900: PUSH
55901: EMPTY
55902: LIST
55903: LIST
55904: PUSH
55905: EMPTY
55906: LIST
55907: LIST
55908: LIST
55909: LIST
55910: LIST
55911: LIST
55912: LIST
55913: LIST
55914: LIST
55915: LIST
55916: LIST
55917: LIST
55918: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
55919: LD_ADDR_VAR 0 33
55923: PUSH
55924: LD_INT 2
55926: NEG
55927: PUSH
55928: LD_INT 1
55930: PUSH
55931: EMPTY
55932: LIST
55933: LIST
55934: PUSH
55935: LD_INT 3
55937: NEG
55938: PUSH
55939: LD_INT 0
55941: PUSH
55942: EMPTY
55943: LIST
55944: LIST
55945: PUSH
55946: LD_INT 3
55948: NEG
55949: PUSH
55950: LD_INT 1
55952: NEG
55953: PUSH
55954: EMPTY
55955: LIST
55956: LIST
55957: PUSH
55958: LD_INT 3
55960: NEG
55961: PUSH
55962: LD_INT 1
55964: PUSH
55965: EMPTY
55966: LIST
55967: LIST
55968: PUSH
55969: LD_INT 4
55971: NEG
55972: PUSH
55973: LD_INT 0
55975: PUSH
55976: EMPTY
55977: LIST
55978: LIST
55979: PUSH
55980: LD_INT 4
55982: NEG
55983: PUSH
55984: LD_INT 1
55986: NEG
55987: PUSH
55988: EMPTY
55989: LIST
55990: LIST
55991: PUSH
55992: LD_INT 4
55994: NEG
55995: PUSH
55996: LD_INT 1
55998: PUSH
55999: EMPTY
56000: LIST
56001: LIST
56002: PUSH
56003: LD_INT 5
56005: NEG
56006: PUSH
56007: LD_INT 0
56009: PUSH
56010: EMPTY
56011: LIST
56012: LIST
56013: PUSH
56014: LD_INT 5
56016: NEG
56017: PUSH
56018: LD_INT 1
56020: NEG
56021: PUSH
56022: EMPTY
56023: LIST
56024: LIST
56025: PUSH
56026: LD_INT 5
56028: NEG
56029: PUSH
56030: LD_INT 1
56032: PUSH
56033: EMPTY
56034: LIST
56035: LIST
56036: PUSH
56037: LD_INT 6
56039: NEG
56040: PUSH
56041: LD_INT 0
56043: PUSH
56044: EMPTY
56045: LIST
56046: LIST
56047: PUSH
56048: LD_INT 6
56050: NEG
56051: PUSH
56052: LD_INT 1
56054: NEG
56055: PUSH
56056: EMPTY
56057: LIST
56058: LIST
56059: PUSH
56060: EMPTY
56061: LIST
56062: LIST
56063: LIST
56064: LIST
56065: LIST
56066: LIST
56067: LIST
56068: LIST
56069: LIST
56070: LIST
56071: LIST
56072: LIST
56073: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
56074: LD_ADDR_VAR 0 34
56078: PUSH
56079: LD_INT 2
56081: NEG
56082: PUSH
56083: LD_INT 3
56085: NEG
56086: PUSH
56087: EMPTY
56088: LIST
56089: LIST
56090: PUSH
56091: LD_INT 3
56093: NEG
56094: PUSH
56095: LD_INT 2
56097: NEG
56098: PUSH
56099: EMPTY
56100: LIST
56101: LIST
56102: PUSH
56103: LD_INT 3
56105: NEG
56106: PUSH
56107: LD_INT 3
56109: NEG
56110: PUSH
56111: EMPTY
56112: LIST
56113: LIST
56114: PUSH
56115: LD_INT 3
56117: NEG
56118: PUSH
56119: LD_INT 4
56121: NEG
56122: PUSH
56123: EMPTY
56124: LIST
56125: LIST
56126: PUSH
56127: LD_INT 4
56129: NEG
56130: PUSH
56131: LD_INT 3
56133: NEG
56134: PUSH
56135: EMPTY
56136: LIST
56137: LIST
56138: PUSH
56139: LD_INT 4
56141: NEG
56142: PUSH
56143: LD_INT 4
56145: NEG
56146: PUSH
56147: EMPTY
56148: LIST
56149: LIST
56150: PUSH
56151: LD_INT 4
56153: NEG
56154: PUSH
56155: LD_INT 5
56157: NEG
56158: PUSH
56159: EMPTY
56160: LIST
56161: LIST
56162: PUSH
56163: LD_INT 5
56165: NEG
56166: PUSH
56167: LD_INT 4
56169: NEG
56170: PUSH
56171: EMPTY
56172: LIST
56173: LIST
56174: PUSH
56175: LD_INT 5
56177: NEG
56178: PUSH
56179: LD_INT 5
56181: NEG
56182: PUSH
56183: EMPTY
56184: LIST
56185: LIST
56186: PUSH
56187: LD_INT 5
56189: NEG
56190: PUSH
56191: LD_INT 6
56193: NEG
56194: PUSH
56195: EMPTY
56196: LIST
56197: LIST
56198: PUSH
56199: LD_INT 6
56201: NEG
56202: PUSH
56203: LD_INT 5
56205: NEG
56206: PUSH
56207: EMPTY
56208: LIST
56209: LIST
56210: PUSH
56211: LD_INT 6
56213: NEG
56214: PUSH
56215: LD_INT 6
56217: NEG
56218: PUSH
56219: EMPTY
56220: LIST
56221: LIST
56222: PUSH
56223: EMPTY
56224: LIST
56225: LIST
56226: LIST
56227: LIST
56228: LIST
56229: LIST
56230: LIST
56231: LIST
56232: LIST
56233: LIST
56234: LIST
56235: LIST
56236: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
56237: LD_ADDR_VAR 0 41
56241: PUSH
56242: LD_INT 0
56244: PUSH
56245: LD_INT 2
56247: NEG
56248: PUSH
56249: EMPTY
56250: LIST
56251: LIST
56252: PUSH
56253: LD_INT 1
56255: NEG
56256: PUSH
56257: LD_INT 3
56259: NEG
56260: PUSH
56261: EMPTY
56262: LIST
56263: LIST
56264: PUSH
56265: LD_INT 1
56267: PUSH
56268: LD_INT 2
56270: NEG
56271: PUSH
56272: EMPTY
56273: LIST
56274: LIST
56275: PUSH
56276: EMPTY
56277: LIST
56278: LIST
56279: LIST
56280: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
56281: LD_ADDR_VAR 0 42
56285: PUSH
56286: LD_INT 2
56288: PUSH
56289: LD_INT 0
56291: PUSH
56292: EMPTY
56293: LIST
56294: LIST
56295: PUSH
56296: LD_INT 2
56298: PUSH
56299: LD_INT 1
56301: NEG
56302: PUSH
56303: EMPTY
56304: LIST
56305: LIST
56306: PUSH
56307: LD_INT 3
56309: PUSH
56310: LD_INT 1
56312: PUSH
56313: EMPTY
56314: LIST
56315: LIST
56316: PUSH
56317: EMPTY
56318: LIST
56319: LIST
56320: LIST
56321: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
56322: LD_ADDR_VAR 0 43
56326: PUSH
56327: LD_INT 2
56329: PUSH
56330: LD_INT 2
56332: PUSH
56333: EMPTY
56334: LIST
56335: LIST
56336: PUSH
56337: LD_INT 3
56339: PUSH
56340: LD_INT 2
56342: PUSH
56343: EMPTY
56344: LIST
56345: LIST
56346: PUSH
56347: LD_INT 2
56349: PUSH
56350: LD_INT 3
56352: PUSH
56353: EMPTY
56354: LIST
56355: LIST
56356: PUSH
56357: EMPTY
56358: LIST
56359: LIST
56360: LIST
56361: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
56362: LD_ADDR_VAR 0 44
56366: PUSH
56367: LD_INT 0
56369: PUSH
56370: LD_INT 2
56372: PUSH
56373: EMPTY
56374: LIST
56375: LIST
56376: PUSH
56377: LD_INT 1
56379: PUSH
56380: LD_INT 3
56382: PUSH
56383: EMPTY
56384: LIST
56385: LIST
56386: PUSH
56387: LD_INT 1
56389: NEG
56390: PUSH
56391: LD_INT 2
56393: PUSH
56394: EMPTY
56395: LIST
56396: LIST
56397: PUSH
56398: EMPTY
56399: LIST
56400: LIST
56401: LIST
56402: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
56403: LD_ADDR_VAR 0 45
56407: PUSH
56408: LD_INT 2
56410: NEG
56411: PUSH
56412: LD_INT 0
56414: PUSH
56415: EMPTY
56416: LIST
56417: LIST
56418: PUSH
56419: LD_INT 2
56421: NEG
56422: PUSH
56423: LD_INT 1
56425: PUSH
56426: EMPTY
56427: LIST
56428: LIST
56429: PUSH
56430: LD_INT 3
56432: NEG
56433: PUSH
56434: LD_INT 1
56436: NEG
56437: PUSH
56438: EMPTY
56439: LIST
56440: LIST
56441: PUSH
56442: EMPTY
56443: LIST
56444: LIST
56445: LIST
56446: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
56447: LD_ADDR_VAR 0 46
56451: PUSH
56452: LD_INT 2
56454: NEG
56455: PUSH
56456: LD_INT 2
56458: NEG
56459: PUSH
56460: EMPTY
56461: LIST
56462: LIST
56463: PUSH
56464: LD_INT 2
56466: NEG
56467: PUSH
56468: LD_INT 3
56470: NEG
56471: PUSH
56472: EMPTY
56473: LIST
56474: LIST
56475: PUSH
56476: LD_INT 3
56478: NEG
56479: PUSH
56480: LD_INT 2
56482: NEG
56483: PUSH
56484: EMPTY
56485: LIST
56486: LIST
56487: PUSH
56488: EMPTY
56489: LIST
56490: LIST
56491: LIST
56492: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
56493: LD_ADDR_VAR 0 47
56497: PUSH
56498: LD_INT 2
56500: NEG
56501: PUSH
56502: LD_INT 3
56504: NEG
56505: PUSH
56506: EMPTY
56507: LIST
56508: LIST
56509: PUSH
56510: LD_INT 1
56512: NEG
56513: PUSH
56514: LD_INT 3
56516: NEG
56517: PUSH
56518: EMPTY
56519: LIST
56520: LIST
56521: PUSH
56522: EMPTY
56523: LIST
56524: LIST
56525: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
56526: LD_ADDR_VAR 0 48
56530: PUSH
56531: LD_INT 1
56533: PUSH
56534: LD_INT 2
56536: NEG
56537: PUSH
56538: EMPTY
56539: LIST
56540: LIST
56541: PUSH
56542: LD_INT 2
56544: PUSH
56545: LD_INT 1
56547: NEG
56548: PUSH
56549: EMPTY
56550: LIST
56551: LIST
56552: PUSH
56553: EMPTY
56554: LIST
56555: LIST
56556: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
56557: LD_ADDR_VAR 0 49
56561: PUSH
56562: LD_INT 3
56564: PUSH
56565: LD_INT 1
56567: PUSH
56568: EMPTY
56569: LIST
56570: LIST
56571: PUSH
56572: LD_INT 3
56574: PUSH
56575: LD_INT 2
56577: PUSH
56578: EMPTY
56579: LIST
56580: LIST
56581: PUSH
56582: EMPTY
56583: LIST
56584: LIST
56585: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
56586: LD_ADDR_VAR 0 50
56590: PUSH
56591: LD_INT 2
56593: PUSH
56594: LD_INT 3
56596: PUSH
56597: EMPTY
56598: LIST
56599: LIST
56600: PUSH
56601: LD_INT 1
56603: PUSH
56604: LD_INT 3
56606: PUSH
56607: EMPTY
56608: LIST
56609: LIST
56610: PUSH
56611: EMPTY
56612: LIST
56613: LIST
56614: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
56615: LD_ADDR_VAR 0 51
56619: PUSH
56620: LD_INT 1
56622: NEG
56623: PUSH
56624: LD_INT 2
56626: PUSH
56627: EMPTY
56628: LIST
56629: LIST
56630: PUSH
56631: LD_INT 2
56633: NEG
56634: PUSH
56635: LD_INT 1
56637: PUSH
56638: EMPTY
56639: LIST
56640: LIST
56641: PUSH
56642: EMPTY
56643: LIST
56644: LIST
56645: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
56646: LD_ADDR_VAR 0 52
56650: PUSH
56651: LD_INT 3
56653: NEG
56654: PUSH
56655: LD_INT 1
56657: NEG
56658: PUSH
56659: EMPTY
56660: LIST
56661: LIST
56662: PUSH
56663: LD_INT 3
56665: NEG
56666: PUSH
56667: LD_INT 2
56669: NEG
56670: PUSH
56671: EMPTY
56672: LIST
56673: LIST
56674: PUSH
56675: EMPTY
56676: LIST
56677: LIST
56678: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56679: LD_ADDR_VAR 0 53
56683: PUSH
56684: LD_INT 1
56686: NEG
56687: PUSH
56688: LD_INT 3
56690: NEG
56691: PUSH
56692: EMPTY
56693: LIST
56694: LIST
56695: PUSH
56696: LD_INT 0
56698: PUSH
56699: LD_INT 3
56701: NEG
56702: PUSH
56703: EMPTY
56704: LIST
56705: LIST
56706: PUSH
56707: LD_INT 1
56709: PUSH
56710: LD_INT 2
56712: NEG
56713: PUSH
56714: EMPTY
56715: LIST
56716: LIST
56717: PUSH
56718: EMPTY
56719: LIST
56720: LIST
56721: LIST
56722: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56723: LD_ADDR_VAR 0 54
56727: PUSH
56728: LD_INT 2
56730: PUSH
56731: LD_INT 1
56733: NEG
56734: PUSH
56735: EMPTY
56736: LIST
56737: LIST
56738: PUSH
56739: LD_INT 3
56741: PUSH
56742: LD_INT 0
56744: PUSH
56745: EMPTY
56746: LIST
56747: LIST
56748: PUSH
56749: LD_INT 3
56751: PUSH
56752: LD_INT 1
56754: PUSH
56755: EMPTY
56756: LIST
56757: LIST
56758: PUSH
56759: EMPTY
56760: LIST
56761: LIST
56762: LIST
56763: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56764: LD_ADDR_VAR 0 55
56768: PUSH
56769: LD_INT 3
56771: PUSH
56772: LD_INT 2
56774: PUSH
56775: EMPTY
56776: LIST
56777: LIST
56778: PUSH
56779: LD_INT 3
56781: PUSH
56782: LD_INT 3
56784: PUSH
56785: EMPTY
56786: LIST
56787: LIST
56788: PUSH
56789: LD_INT 2
56791: PUSH
56792: LD_INT 3
56794: PUSH
56795: EMPTY
56796: LIST
56797: LIST
56798: PUSH
56799: EMPTY
56800: LIST
56801: LIST
56802: LIST
56803: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56804: LD_ADDR_VAR 0 56
56808: PUSH
56809: LD_INT 1
56811: PUSH
56812: LD_INT 3
56814: PUSH
56815: EMPTY
56816: LIST
56817: LIST
56818: PUSH
56819: LD_INT 0
56821: PUSH
56822: LD_INT 3
56824: PUSH
56825: EMPTY
56826: LIST
56827: LIST
56828: PUSH
56829: LD_INT 1
56831: NEG
56832: PUSH
56833: LD_INT 2
56835: PUSH
56836: EMPTY
56837: LIST
56838: LIST
56839: PUSH
56840: EMPTY
56841: LIST
56842: LIST
56843: LIST
56844: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56845: LD_ADDR_VAR 0 57
56849: PUSH
56850: LD_INT 2
56852: NEG
56853: PUSH
56854: LD_INT 1
56856: PUSH
56857: EMPTY
56858: LIST
56859: LIST
56860: PUSH
56861: LD_INT 3
56863: NEG
56864: PUSH
56865: LD_INT 0
56867: PUSH
56868: EMPTY
56869: LIST
56870: LIST
56871: PUSH
56872: LD_INT 3
56874: NEG
56875: PUSH
56876: LD_INT 1
56878: NEG
56879: PUSH
56880: EMPTY
56881: LIST
56882: LIST
56883: PUSH
56884: EMPTY
56885: LIST
56886: LIST
56887: LIST
56888: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56889: LD_ADDR_VAR 0 58
56893: PUSH
56894: LD_INT 2
56896: NEG
56897: PUSH
56898: LD_INT 3
56900: NEG
56901: PUSH
56902: EMPTY
56903: LIST
56904: LIST
56905: PUSH
56906: LD_INT 3
56908: NEG
56909: PUSH
56910: LD_INT 2
56912: NEG
56913: PUSH
56914: EMPTY
56915: LIST
56916: LIST
56917: PUSH
56918: LD_INT 3
56920: NEG
56921: PUSH
56922: LD_INT 3
56924: NEG
56925: PUSH
56926: EMPTY
56927: LIST
56928: LIST
56929: PUSH
56930: EMPTY
56931: LIST
56932: LIST
56933: LIST
56934: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
56935: LD_ADDR_VAR 0 59
56939: PUSH
56940: LD_INT 1
56942: NEG
56943: PUSH
56944: LD_INT 2
56946: NEG
56947: PUSH
56948: EMPTY
56949: LIST
56950: LIST
56951: PUSH
56952: LD_INT 0
56954: PUSH
56955: LD_INT 2
56957: NEG
56958: PUSH
56959: EMPTY
56960: LIST
56961: LIST
56962: PUSH
56963: LD_INT 1
56965: PUSH
56966: LD_INT 1
56968: NEG
56969: PUSH
56970: EMPTY
56971: LIST
56972: LIST
56973: PUSH
56974: EMPTY
56975: LIST
56976: LIST
56977: LIST
56978: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
56979: LD_ADDR_VAR 0 60
56983: PUSH
56984: LD_INT 1
56986: PUSH
56987: LD_INT 1
56989: NEG
56990: PUSH
56991: EMPTY
56992: LIST
56993: LIST
56994: PUSH
56995: LD_INT 2
56997: PUSH
56998: LD_INT 0
57000: PUSH
57001: EMPTY
57002: LIST
57003: LIST
57004: PUSH
57005: LD_INT 2
57007: PUSH
57008: LD_INT 1
57010: PUSH
57011: EMPTY
57012: LIST
57013: LIST
57014: PUSH
57015: EMPTY
57016: LIST
57017: LIST
57018: LIST
57019: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
57020: LD_ADDR_VAR 0 61
57024: PUSH
57025: LD_INT 2
57027: PUSH
57028: LD_INT 1
57030: PUSH
57031: EMPTY
57032: LIST
57033: LIST
57034: PUSH
57035: LD_INT 2
57037: PUSH
57038: LD_INT 2
57040: PUSH
57041: EMPTY
57042: LIST
57043: LIST
57044: PUSH
57045: LD_INT 1
57047: PUSH
57048: LD_INT 2
57050: PUSH
57051: EMPTY
57052: LIST
57053: LIST
57054: PUSH
57055: EMPTY
57056: LIST
57057: LIST
57058: LIST
57059: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
57060: LD_ADDR_VAR 0 62
57064: PUSH
57065: LD_INT 1
57067: PUSH
57068: LD_INT 2
57070: PUSH
57071: EMPTY
57072: LIST
57073: LIST
57074: PUSH
57075: LD_INT 0
57077: PUSH
57078: LD_INT 2
57080: PUSH
57081: EMPTY
57082: LIST
57083: LIST
57084: PUSH
57085: LD_INT 1
57087: NEG
57088: PUSH
57089: LD_INT 1
57091: PUSH
57092: EMPTY
57093: LIST
57094: LIST
57095: PUSH
57096: EMPTY
57097: LIST
57098: LIST
57099: LIST
57100: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
57101: LD_ADDR_VAR 0 63
57105: PUSH
57106: LD_INT 1
57108: NEG
57109: PUSH
57110: LD_INT 1
57112: PUSH
57113: EMPTY
57114: LIST
57115: LIST
57116: PUSH
57117: LD_INT 2
57119: NEG
57120: PUSH
57121: LD_INT 0
57123: PUSH
57124: EMPTY
57125: LIST
57126: LIST
57127: PUSH
57128: LD_INT 2
57130: NEG
57131: PUSH
57132: LD_INT 1
57134: NEG
57135: PUSH
57136: EMPTY
57137: LIST
57138: LIST
57139: PUSH
57140: EMPTY
57141: LIST
57142: LIST
57143: LIST
57144: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57145: LD_ADDR_VAR 0 64
57149: PUSH
57150: LD_INT 1
57152: NEG
57153: PUSH
57154: LD_INT 2
57156: NEG
57157: PUSH
57158: EMPTY
57159: LIST
57160: LIST
57161: PUSH
57162: LD_INT 2
57164: NEG
57165: PUSH
57166: LD_INT 1
57168: NEG
57169: PUSH
57170: EMPTY
57171: LIST
57172: LIST
57173: PUSH
57174: LD_INT 2
57176: NEG
57177: PUSH
57178: LD_INT 2
57180: NEG
57181: PUSH
57182: EMPTY
57183: LIST
57184: LIST
57185: PUSH
57186: EMPTY
57187: LIST
57188: LIST
57189: LIST
57190: ST_TO_ADDR
// end ; 2 :
57191: GO 60457
57193: LD_INT 2
57195: DOUBLE
57196: EQUAL
57197: IFTRUE 57201
57199: GO 60456
57201: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
57202: LD_ADDR_VAR 0 29
57206: PUSH
57207: LD_INT 4
57209: PUSH
57210: LD_INT 0
57212: PUSH
57213: EMPTY
57214: LIST
57215: LIST
57216: PUSH
57217: LD_INT 4
57219: PUSH
57220: LD_INT 1
57222: NEG
57223: PUSH
57224: EMPTY
57225: LIST
57226: LIST
57227: PUSH
57228: LD_INT 5
57230: PUSH
57231: LD_INT 0
57233: PUSH
57234: EMPTY
57235: LIST
57236: LIST
57237: PUSH
57238: LD_INT 5
57240: PUSH
57241: LD_INT 1
57243: PUSH
57244: EMPTY
57245: LIST
57246: LIST
57247: PUSH
57248: LD_INT 4
57250: PUSH
57251: LD_INT 1
57253: PUSH
57254: EMPTY
57255: LIST
57256: LIST
57257: PUSH
57258: LD_INT 3
57260: PUSH
57261: LD_INT 0
57263: PUSH
57264: EMPTY
57265: LIST
57266: LIST
57267: PUSH
57268: LD_INT 3
57270: PUSH
57271: LD_INT 1
57273: NEG
57274: PUSH
57275: EMPTY
57276: LIST
57277: LIST
57278: PUSH
57279: LD_INT 3
57281: PUSH
57282: LD_INT 2
57284: NEG
57285: PUSH
57286: EMPTY
57287: LIST
57288: LIST
57289: PUSH
57290: LD_INT 5
57292: PUSH
57293: LD_INT 2
57295: PUSH
57296: EMPTY
57297: LIST
57298: LIST
57299: PUSH
57300: LD_INT 3
57302: PUSH
57303: LD_INT 3
57305: PUSH
57306: EMPTY
57307: LIST
57308: LIST
57309: PUSH
57310: LD_INT 3
57312: PUSH
57313: LD_INT 2
57315: PUSH
57316: EMPTY
57317: LIST
57318: LIST
57319: PUSH
57320: LD_INT 4
57322: PUSH
57323: LD_INT 3
57325: PUSH
57326: EMPTY
57327: LIST
57328: LIST
57329: PUSH
57330: LD_INT 4
57332: PUSH
57333: LD_INT 4
57335: PUSH
57336: EMPTY
57337: LIST
57338: LIST
57339: PUSH
57340: LD_INT 3
57342: PUSH
57343: LD_INT 4
57345: PUSH
57346: EMPTY
57347: LIST
57348: LIST
57349: PUSH
57350: LD_INT 2
57352: PUSH
57353: LD_INT 3
57355: PUSH
57356: EMPTY
57357: LIST
57358: LIST
57359: PUSH
57360: LD_INT 2
57362: PUSH
57363: LD_INT 2
57365: PUSH
57366: EMPTY
57367: LIST
57368: LIST
57369: PUSH
57370: LD_INT 4
57372: PUSH
57373: LD_INT 2
57375: PUSH
57376: EMPTY
57377: LIST
57378: LIST
57379: PUSH
57380: LD_INT 2
57382: PUSH
57383: LD_INT 4
57385: PUSH
57386: EMPTY
57387: LIST
57388: LIST
57389: PUSH
57390: LD_INT 0
57392: PUSH
57393: LD_INT 4
57395: PUSH
57396: EMPTY
57397: LIST
57398: LIST
57399: PUSH
57400: LD_INT 0
57402: PUSH
57403: LD_INT 3
57405: PUSH
57406: EMPTY
57407: LIST
57408: LIST
57409: PUSH
57410: LD_INT 1
57412: PUSH
57413: LD_INT 4
57415: PUSH
57416: EMPTY
57417: LIST
57418: LIST
57419: PUSH
57420: LD_INT 1
57422: PUSH
57423: LD_INT 5
57425: PUSH
57426: EMPTY
57427: LIST
57428: LIST
57429: PUSH
57430: LD_INT 0
57432: PUSH
57433: LD_INT 5
57435: PUSH
57436: EMPTY
57437: LIST
57438: LIST
57439: PUSH
57440: LD_INT 1
57442: NEG
57443: PUSH
57444: LD_INT 4
57446: PUSH
57447: EMPTY
57448: LIST
57449: LIST
57450: PUSH
57451: LD_INT 1
57453: NEG
57454: PUSH
57455: LD_INT 3
57457: PUSH
57458: EMPTY
57459: LIST
57460: LIST
57461: PUSH
57462: LD_INT 2
57464: PUSH
57465: LD_INT 5
57467: PUSH
57468: EMPTY
57469: LIST
57470: LIST
57471: PUSH
57472: LD_INT 2
57474: NEG
57475: PUSH
57476: LD_INT 3
57478: PUSH
57479: EMPTY
57480: LIST
57481: LIST
57482: PUSH
57483: LD_INT 3
57485: NEG
57486: PUSH
57487: LD_INT 0
57489: PUSH
57490: EMPTY
57491: LIST
57492: LIST
57493: PUSH
57494: LD_INT 3
57496: NEG
57497: PUSH
57498: LD_INT 1
57500: NEG
57501: PUSH
57502: EMPTY
57503: LIST
57504: LIST
57505: PUSH
57506: LD_INT 2
57508: NEG
57509: PUSH
57510: LD_INT 0
57512: PUSH
57513: EMPTY
57514: LIST
57515: LIST
57516: PUSH
57517: LD_INT 2
57519: NEG
57520: PUSH
57521: LD_INT 1
57523: PUSH
57524: EMPTY
57525: LIST
57526: LIST
57527: PUSH
57528: LD_INT 3
57530: NEG
57531: PUSH
57532: LD_INT 1
57534: PUSH
57535: EMPTY
57536: LIST
57537: LIST
57538: PUSH
57539: LD_INT 4
57541: NEG
57542: PUSH
57543: LD_INT 0
57545: PUSH
57546: EMPTY
57547: LIST
57548: LIST
57549: PUSH
57550: LD_INT 4
57552: NEG
57553: PUSH
57554: LD_INT 1
57556: NEG
57557: PUSH
57558: EMPTY
57559: LIST
57560: LIST
57561: PUSH
57562: LD_INT 4
57564: NEG
57565: PUSH
57566: LD_INT 2
57568: NEG
57569: PUSH
57570: EMPTY
57571: LIST
57572: LIST
57573: PUSH
57574: LD_INT 2
57576: NEG
57577: PUSH
57578: LD_INT 2
57580: PUSH
57581: EMPTY
57582: LIST
57583: LIST
57584: PUSH
57585: LD_INT 4
57587: NEG
57588: PUSH
57589: LD_INT 4
57591: NEG
57592: PUSH
57593: EMPTY
57594: LIST
57595: LIST
57596: PUSH
57597: LD_INT 4
57599: NEG
57600: PUSH
57601: LD_INT 5
57603: NEG
57604: PUSH
57605: EMPTY
57606: LIST
57607: LIST
57608: PUSH
57609: LD_INT 3
57611: NEG
57612: PUSH
57613: LD_INT 4
57615: NEG
57616: PUSH
57617: EMPTY
57618: LIST
57619: LIST
57620: PUSH
57621: LD_INT 3
57623: NEG
57624: PUSH
57625: LD_INT 3
57627: NEG
57628: PUSH
57629: EMPTY
57630: LIST
57631: LIST
57632: PUSH
57633: LD_INT 4
57635: NEG
57636: PUSH
57637: LD_INT 3
57639: NEG
57640: PUSH
57641: EMPTY
57642: LIST
57643: LIST
57644: PUSH
57645: LD_INT 5
57647: NEG
57648: PUSH
57649: LD_INT 4
57651: NEG
57652: PUSH
57653: EMPTY
57654: LIST
57655: LIST
57656: PUSH
57657: LD_INT 5
57659: NEG
57660: PUSH
57661: LD_INT 5
57663: NEG
57664: PUSH
57665: EMPTY
57666: LIST
57667: LIST
57668: PUSH
57669: LD_INT 3
57671: NEG
57672: PUSH
57673: LD_INT 5
57675: NEG
57676: PUSH
57677: EMPTY
57678: LIST
57679: LIST
57680: PUSH
57681: LD_INT 5
57683: NEG
57684: PUSH
57685: LD_INT 3
57687: NEG
57688: PUSH
57689: EMPTY
57690: LIST
57691: LIST
57692: PUSH
57693: EMPTY
57694: LIST
57695: LIST
57696: LIST
57697: LIST
57698: LIST
57699: LIST
57700: LIST
57701: LIST
57702: LIST
57703: LIST
57704: LIST
57705: LIST
57706: LIST
57707: LIST
57708: LIST
57709: LIST
57710: LIST
57711: LIST
57712: LIST
57713: LIST
57714: LIST
57715: LIST
57716: LIST
57717: LIST
57718: LIST
57719: LIST
57720: LIST
57721: LIST
57722: LIST
57723: LIST
57724: LIST
57725: LIST
57726: LIST
57727: LIST
57728: LIST
57729: LIST
57730: LIST
57731: LIST
57732: LIST
57733: LIST
57734: LIST
57735: LIST
57736: LIST
57737: LIST
57738: LIST
57739: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
57740: LD_ADDR_VAR 0 30
57744: PUSH
57745: LD_INT 4
57747: PUSH
57748: LD_INT 4
57750: PUSH
57751: EMPTY
57752: LIST
57753: LIST
57754: PUSH
57755: LD_INT 4
57757: PUSH
57758: LD_INT 3
57760: PUSH
57761: EMPTY
57762: LIST
57763: LIST
57764: PUSH
57765: LD_INT 5
57767: PUSH
57768: LD_INT 4
57770: PUSH
57771: EMPTY
57772: LIST
57773: LIST
57774: PUSH
57775: LD_INT 5
57777: PUSH
57778: LD_INT 5
57780: PUSH
57781: EMPTY
57782: LIST
57783: LIST
57784: PUSH
57785: LD_INT 4
57787: PUSH
57788: LD_INT 5
57790: PUSH
57791: EMPTY
57792: LIST
57793: LIST
57794: PUSH
57795: LD_INT 3
57797: PUSH
57798: LD_INT 4
57800: PUSH
57801: EMPTY
57802: LIST
57803: LIST
57804: PUSH
57805: LD_INT 3
57807: PUSH
57808: LD_INT 3
57810: PUSH
57811: EMPTY
57812: LIST
57813: LIST
57814: PUSH
57815: LD_INT 5
57817: PUSH
57818: LD_INT 3
57820: PUSH
57821: EMPTY
57822: LIST
57823: LIST
57824: PUSH
57825: LD_INT 3
57827: PUSH
57828: LD_INT 5
57830: PUSH
57831: EMPTY
57832: LIST
57833: LIST
57834: PUSH
57835: LD_INT 0
57837: PUSH
57838: LD_INT 3
57840: PUSH
57841: EMPTY
57842: LIST
57843: LIST
57844: PUSH
57845: LD_INT 0
57847: PUSH
57848: LD_INT 2
57850: PUSH
57851: EMPTY
57852: LIST
57853: LIST
57854: PUSH
57855: LD_INT 1
57857: PUSH
57858: LD_INT 3
57860: PUSH
57861: EMPTY
57862: LIST
57863: LIST
57864: PUSH
57865: LD_INT 1
57867: PUSH
57868: LD_INT 4
57870: PUSH
57871: EMPTY
57872: LIST
57873: LIST
57874: PUSH
57875: LD_INT 0
57877: PUSH
57878: LD_INT 4
57880: PUSH
57881: EMPTY
57882: LIST
57883: LIST
57884: PUSH
57885: LD_INT 1
57887: NEG
57888: PUSH
57889: LD_INT 3
57891: PUSH
57892: EMPTY
57893: LIST
57894: LIST
57895: PUSH
57896: LD_INT 1
57898: NEG
57899: PUSH
57900: LD_INT 2
57902: PUSH
57903: EMPTY
57904: LIST
57905: LIST
57906: PUSH
57907: LD_INT 2
57909: PUSH
57910: LD_INT 4
57912: PUSH
57913: EMPTY
57914: LIST
57915: LIST
57916: PUSH
57917: LD_INT 2
57919: NEG
57920: PUSH
57921: LD_INT 2
57923: PUSH
57924: EMPTY
57925: LIST
57926: LIST
57927: PUSH
57928: LD_INT 4
57930: NEG
57931: PUSH
57932: LD_INT 0
57934: PUSH
57935: EMPTY
57936: LIST
57937: LIST
57938: PUSH
57939: LD_INT 4
57941: NEG
57942: PUSH
57943: LD_INT 1
57945: NEG
57946: PUSH
57947: EMPTY
57948: LIST
57949: LIST
57950: PUSH
57951: LD_INT 3
57953: NEG
57954: PUSH
57955: LD_INT 0
57957: PUSH
57958: EMPTY
57959: LIST
57960: LIST
57961: PUSH
57962: LD_INT 3
57964: NEG
57965: PUSH
57966: LD_INT 1
57968: PUSH
57969: EMPTY
57970: LIST
57971: LIST
57972: PUSH
57973: LD_INT 4
57975: NEG
57976: PUSH
57977: LD_INT 1
57979: PUSH
57980: EMPTY
57981: LIST
57982: LIST
57983: PUSH
57984: LD_INT 5
57986: NEG
57987: PUSH
57988: LD_INT 0
57990: PUSH
57991: EMPTY
57992: LIST
57993: LIST
57994: PUSH
57995: LD_INT 5
57997: NEG
57998: PUSH
57999: LD_INT 1
58001: NEG
58002: PUSH
58003: EMPTY
58004: LIST
58005: LIST
58006: PUSH
58007: LD_INT 5
58009: NEG
58010: PUSH
58011: LD_INT 2
58013: NEG
58014: PUSH
58015: EMPTY
58016: LIST
58017: LIST
58018: PUSH
58019: LD_INT 3
58021: NEG
58022: PUSH
58023: LD_INT 2
58025: PUSH
58026: EMPTY
58027: LIST
58028: LIST
58029: PUSH
58030: LD_INT 3
58032: NEG
58033: PUSH
58034: LD_INT 3
58036: NEG
58037: PUSH
58038: EMPTY
58039: LIST
58040: LIST
58041: PUSH
58042: LD_INT 3
58044: NEG
58045: PUSH
58046: LD_INT 4
58048: NEG
58049: PUSH
58050: EMPTY
58051: LIST
58052: LIST
58053: PUSH
58054: LD_INT 2
58056: NEG
58057: PUSH
58058: LD_INT 3
58060: NEG
58061: PUSH
58062: EMPTY
58063: LIST
58064: LIST
58065: PUSH
58066: LD_INT 2
58068: NEG
58069: PUSH
58070: LD_INT 2
58072: NEG
58073: PUSH
58074: EMPTY
58075: LIST
58076: LIST
58077: PUSH
58078: LD_INT 3
58080: NEG
58081: PUSH
58082: LD_INT 2
58084: NEG
58085: PUSH
58086: EMPTY
58087: LIST
58088: LIST
58089: PUSH
58090: LD_INT 4
58092: NEG
58093: PUSH
58094: LD_INT 3
58096: NEG
58097: PUSH
58098: EMPTY
58099: LIST
58100: LIST
58101: PUSH
58102: LD_INT 4
58104: NEG
58105: PUSH
58106: LD_INT 4
58108: NEG
58109: PUSH
58110: EMPTY
58111: LIST
58112: LIST
58113: PUSH
58114: LD_INT 2
58116: NEG
58117: PUSH
58118: LD_INT 4
58120: NEG
58121: PUSH
58122: EMPTY
58123: LIST
58124: LIST
58125: PUSH
58126: LD_INT 4
58128: NEG
58129: PUSH
58130: LD_INT 2
58132: NEG
58133: PUSH
58134: EMPTY
58135: LIST
58136: LIST
58137: PUSH
58138: LD_INT 0
58140: PUSH
58141: LD_INT 4
58143: NEG
58144: PUSH
58145: EMPTY
58146: LIST
58147: LIST
58148: PUSH
58149: LD_INT 0
58151: PUSH
58152: LD_INT 5
58154: NEG
58155: PUSH
58156: EMPTY
58157: LIST
58158: LIST
58159: PUSH
58160: LD_INT 1
58162: PUSH
58163: LD_INT 4
58165: NEG
58166: PUSH
58167: EMPTY
58168: LIST
58169: LIST
58170: PUSH
58171: LD_INT 1
58173: PUSH
58174: LD_INT 3
58176: NEG
58177: PUSH
58178: EMPTY
58179: LIST
58180: LIST
58181: PUSH
58182: LD_INT 0
58184: PUSH
58185: LD_INT 3
58187: NEG
58188: PUSH
58189: EMPTY
58190: LIST
58191: LIST
58192: PUSH
58193: LD_INT 1
58195: NEG
58196: PUSH
58197: LD_INT 4
58199: NEG
58200: PUSH
58201: EMPTY
58202: LIST
58203: LIST
58204: PUSH
58205: LD_INT 1
58207: NEG
58208: PUSH
58209: LD_INT 5
58211: NEG
58212: PUSH
58213: EMPTY
58214: LIST
58215: LIST
58216: PUSH
58217: LD_INT 2
58219: PUSH
58220: LD_INT 3
58222: NEG
58223: PUSH
58224: EMPTY
58225: LIST
58226: LIST
58227: PUSH
58228: LD_INT 2
58230: NEG
58231: PUSH
58232: LD_INT 5
58234: NEG
58235: PUSH
58236: EMPTY
58237: LIST
58238: LIST
58239: PUSH
58240: EMPTY
58241: LIST
58242: LIST
58243: LIST
58244: LIST
58245: LIST
58246: LIST
58247: LIST
58248: LIST
58249: LIST
58250: LIST
58251: LIST
58252: LIST
58253: LIST
58254: LIST
58255: LIST
58256: LIST
58257: LIST
58258: LIST
58259: LIST
58260: LIST
58261: LIST
58262: LIST
58263: LIST
58264: LIST
58265: LIST
58266: LIST
58267: LIST
58268: LIST
58269: LIST
58270: LIST
58271: LIST
58272: LIST
58273: LIST
58274: LIST
58275: LIST
58276: LIST
58277: LIST
58278: LIST
58279: LIST
58280: LIST
58281: LIST
58282: LIST
58283: LIST
58284: LIST
58285: LIST
58286: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
58287: LD_ADDR_VAR 0 31
58291: PUSH
58292: LD_INT 0
58294: PUSH
58295: LD_INT 4
58297: PUSH
58298: EMPTY
58299: LIST
58300: LIST
58301: PUSH
58302: LD_INT 0
58304: PUSH
58305: LD_INT 3
58307: PUSH
58308: EMPTY
58309: LIST
58310: LIST
58311: PUSH
58312: LD_INT 1
58314: PUSH
58315: LD_INT 4
58317: PUSH
58318: EMPTY
58319: LIST
58320: LIST
58321: PUSH
58322: LD_INT 1
58324: PUSH
58325: LD_INT 5
58327: PUSH
58328: EMPTY
58329: LIST
58330: LIST
58331: PUSH
58332: LD_INT 0
58334: PUSH
58335: LD_INT 5
58337: PUSH
58338: EMPTY
58339: LIST
58340: LIST
58341: PUSH
58342: LD_INT 1
58344: NEG
58345: PUSH
58346: LD_INT 4
58348: PUSH
58349: EMPTY
58350: LIST
58351: LIST
58352: PUSH
58353: LD_INT 1
58355: NEG
58356: PUSH
58357: LD_INT 3
58359: PUSH
58360: EMPTY
58361: LIST
58362: LIST
58363: PUSH
58364: LD_INT 2
58366: PUSH
58367: LD_INT 5
58369: PUSH
58370: EMPTY
58371: LIST
58372: LIST
58373: PUSH
58374: LD_INT 2
58376: NEG
58377: PUSH
58378: LD_INT 3
58380: PUSH
58381: EMPTY
58382: LIST
58383: LIST
58384: PUSH
58385: LD_INT 3
58387: NEG
58388: PUSH
58389: LD_INT 0
58391: PUSH
58392: EMPTY
58393: LIST
58394: LIST
58395: PUSH
58396: LD_INT 3
58398: NEG
58399: PUSH
58400: LD_INT 1
58402: NEG
58403: PUSH
58404: EMPTY
58405: LIST
58406: LIST
58407: PUSH
58408: LD_INT 2
58410: NEG
58411: PUSH
58412: LD_INT 0
58414: PUSH
58415: EMPTY
58416: LIST
58417: LIST
58418: PUSH
58419: LD_INT 2
58421: NEG
58422: PUSH
58423: LD_INT 1
58425: PUSH
58426: EMPTY
58427: LIST
58428: LIST
58429: PUSH
58430: LD_INT 3
58432: NEG
58433: PUSH
58434: LD_INT 1
58436: PUSH
58437: EMPTY
58438: LIST
58439: LIST
58440: PUSH
58441: LD_INT 4
58443: NEG
58444: PUSH
58445: LD_INT 0
58447: PUSH
58448: EMPTY
58449: LIST
58450: LIST
58451: PUSH
58452: LD_INT 4
58454: NEG
58455: PUSH
58456: LD_INT 1
58458: NEG
58459: PUSH
58460: EMPTY
58461: LIST
58462: LIST
58463: PUSH
58464: LD_INT 4
58466: NEG
58467: PUSH
58468: LD_INT 2
58470: NEG
58471: PUSH
58472: EMPTY
58473: LIST
58474: LIST
58475: PUSH
58476: LD_INT 2
58478: NEG
58479: PUSH
58480: LD_INT 2
58482: PUSH
58483: EMPTY
58484: LIST
58485: LIST
58486: PUSH
58487: LD_INT 4
58489: NEG
58490: PUSH
58491: LD_INT 4
58493: NEG
58494: PUSH
58495: EMPTY
58496: LIST
58497: LIST
58498: PUSH
58499: LD_INT 4
58501: NEG
58502: PUSH
58503: LD_INT 5
58505: NEG
58506: PUSH
58507: EMPTY
58508: LIST
58509: LIST
58510: PUSH
58511: LD_INT 3
58513: NEG
58514: PUSH
58515: LD_INT 4
58517: NEG
58518: PUSH
58519: EMPTY
58520: LIST
58521: LIST
58522: PUSH
58523: LD_INT 3
58525: NEG
58526: PUSH
58527: LD_INT 3
58529: NEG
58530: PUSH
58531: EMPTY
58532: LIST
58533: LIST
58534: PUSH
58535: LD_INT 4
58537: NEG
58538: PUSH
58539: LD_INT 3
58541: NEG
58542: PUSH
58543: EMPTY
58544: LIST
58545: LIST
58546: PUSH
58547: LD_INT 5
58549: NEG
58550: PUSH
58551: LD_INT 4
58553: NEG
58554: PUSH
58555: EMPTY
58556: LIST
58557: LIST
58558: PUSH
58559: LD_INT 5
58561: NEG
58562: PUSH
58563: LD_INT 5
58565: NEG
58566: PUSH
58567: EMPTY
58568: LIST
58569: LIST
58570: PUSH
58571: LD_INT 3
58573: NEG
58574: PUSH
58575: LD_INT 5
58577: NEG
58578: PUSH
58579: EMPTY
58580: LIST
58581: LIST
58582: PUSH
58583: LD_INT 5
58585: NEG
58586: PUSH
58587: LD_INT 3
58589: NEG
58590: PUSH
58591: EMPTY
58592: LIST
58593: LIST
58594: PUSH
58595: LD_INT 0
58597: PUSH
58598: LD_INT 3
58600: NEG
58601: PUSH
58602: EMPTY
58603: LIST
58604: LIST
58605: PUSH
58606: LD_INT 0
58608: PUSH
58609: LD_INT 4
58611: NEG
58612: PUSH
58613: EMPTY
58614: LIST
58615: LIST
58616: PUSH
58617: LD_INT 1
58619: PUSH
58620: LD_INT 3
58622: NEG
58623: PUSH
58624: EMPTY
58625: LIST
58626: LIST
58627: PUSH
58628: LD_INT 1
58630: PUSH
58631: LD_INT 2
58633: NEG
58634: PUSH
58635: EMPTY
58636: LIST
58637: LIST
58638: PUSH
58639: LD_INT 0
58641: PUSH
58642: LD_INT 2
58644: NEG
58645: PUSH
58646: EMPTY
58647: LIST
58648: LIST
58649: PUSH
58650: LD_INT 1
58652: NEG
58653: PUSH
58654: LD_INT 3
58656: NEG
58657: PUSH
58658: EMPTY
58659: LIST
58660: LIST
58661: PUSH
58662: LD_INT 1
58664: NEG
58665: PUSH
58666: LD_INT 4
58668: NEG
58669: PUSH
58670: EMPTY
58671: LIST
58672: LIST
58673: PUSH
58674: LD_INT 2
58676: PUSH
58677: LD_INT 2
58679: NEG
58680: PUSH
58681: EMPTY
58682: LIST
58683: LIST
58684: PUSH
58685: LD_INT 2
58687: NEG
58688: PUSH
58689: LD_INT 4
58691: NEG
58692: PUSH
58693: EMPTY
58694: LIST
58695: LIST
58696: PUSH
58697: LD_INT 4
58699: PUSH
58700: LD_INT 0
58702: PUSH
58703: EMPTY
58704: LIST
58705: LIST
58706: PUSH
58707: LD_INT 4
58709: PUSH
58710: LD_INT 1
58712: NEG
58713: PUSH
58714: EMPTY
58715: LIST
58716: LIST
58717: PUSH
58718: LD_INT 5
58720: PUSH
58721: LD_INT 0
58723: PUSH
58724: EMPTY
58725: LIST
58726: LIST
58727: PUSH
58728: LD_INT 5
58730: PUSH
58731: LD_INT 1
58733: PUSH
58734: EMPTY
58735: LIST
58736: LIST
58737: PUSH
58738: LD_INT 4
58740: PUSH
58741: LD_INT 1
58743: PUSH
58744: EMPTY
58745: LIST
58746: LIST
58747: PUSH
58748: LD_INT 3
58750: PUSH
58751: LD_INT 0
58753: PUSH
58754: EMPTY
58755: LIST
58756: LIST
58757: PUSH
58758: LD_INT 3
58760: PUSH
58761: LD_INT 1
58763: NEG
58764: PUSH
58765: EMPTY
58766: LIST
58767: LIST
58768: PUSH
58769: LD_INT 3
58771: PUSH
58772: LD_INT 2
58774: NEG
58775: PUSH
58776: EMPTY
58777: LIST
58778: LIST
58779: PUSH
58780: LD_INT 5
58782: PUSH
58783: LD_INT 2
58785: PUSH
58786: EMPTY
58787: LIST
58788: LIST
58789: PUSH
58790: EMPTY
58791: LIST
58792: LIST
58793: LIST
58794: LIST
58795: LIST
58796: LIST
58797: LIST
58798: LIST
58799: LIST
58800: LIST
58801: LIST
58802: LIST
58803: LIST
58804: LIST
58805: LIST
58806: LIST
58807: LIST
58808: LIST
58809: LIST
58810: LIST
58811: LIST
58812: LIST
58813: LIST
58814: LIST
58815: LIST
58816: LIST
58817: LIST
58818: LIST
58819: LIST
58820: LIST
58821: LIST
58822: LIST
58823: LIST
58824: LIST
58825: LIST
58826: LIST
58827: LIST
58828: LIST
58829: LIST
58830: LIST
58831: LIST
58832: LIST
58833: LIST
58834: LIST
58835: LIST
58836: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
58837: LD_ADDR_VAR 0 32
58841: PUSH
58842: LD_INT 4
58844: NEG
58845: PUSH
58846: LD_INT 0
58848: PUSH
58849: EMPTY
58850: LIST
58851: LIST
58852: PUSH
58853: LD_INT 4
58855: NEG
58856: PUSH
58857: LD_INT 1
58859: NEG
58860: PUSH
58861: EMPTY
58862: LIST
58863: LIST
58864: PUSH
58865: LD_INT 3
58867: NEG
58868: PUSH
58869: LD_INT 0
58871: PUSH
58872: EMPTY
58873: LIST
58874: LIST
58875: PUSH
58876: LD_INT 3
58878: NEG
58879: PUSH
58880: LD_INT 1
58882: PUSH
58883: EMPTY
58884: LIST
58885: LIST
58886: PUSH
58887: LD_INT 4
58889: NEG
58890: PUSH
58891: LD_INT 1
58893: PUSH
58894: EMPTY
58895: LIST
58896: LIST
58897: PUSH
58898: LD_INT 5
58900: NEG
58901: PUSH
58902: LD_INT 0
58904: PUSH
58905: EMPTY
58906: LIST
58907: LIST
58908: PUSH
58909: LD_INT 5
58911: NEG
58912: PUSH
58913: LD_INT 1
58915: NEG
58916: PUSH
58917: EMPTY
58918: LIST
58919: LIST
58920: PUSH
58921: LD_INT 5
58923: NEG
58924: PUSH
58925: LD_INT 2
58927: NEG
58928: PUSH
58929: EMPTY
58930: LIST
58931: LIST
58932: PUSH
58933: LD_INT 3
58935: NEG
58936: PUSH
58937: LD_INT 2
58939: PUSH
58940: EMPTY
58941: LIST
58942: LIST
58943: PUSH
58944: LD_INT 3
58946: NEG
58947: PUSH
58948: LD_INT 3
58950: NEG
58951: PUSH
58952: EMPTY
58953: LIST
58954: LIST
58955: PUSH
58956: LD_INT 3
58958: NEG
58959: PUSH
58960: LD_INT 4
58962: NEG
58963: PUSH
58964: EMPTY
58965: LIST
58966: LIST
58967: PUSH
58968: LD_INT 2
58970: NEG
58971: PUSH
58972: LD_INT 3
58974: NEG
58975: PUSH
58976: EMPTY
58977: LIST
58978: LIST
58979: PUSH
58980: LD_INT 2
58982: NEG
58983: PUSH
58984: LD_INT 2
58986: NEG
58987: PUSH
58988: EMPTY
58989: LIST
58990: LIST
58991: PUSH
58992: LD_INT 3
58994: NEG
58995: PUSH
58996: LD_INT 2
58998: NEG
58999: PUSH
59000: EMPTY
59001: LIST
59002: LIST
59003: PUSH
59004: LD_INT 4
59006: NEG
59007: PUSH
59008: LD_INT 3
59010: NEG
59011: PUSH
59012: EMPTY
59013: LIST
59014: LIST
59015: PUSH
59016: LD_INT 4
59018: NEG
59019: PUSH
59020: LD_INT 4
59022: NEG
59023: PUSH
59024: EMPTY
59025: LIST
59026: LIST
59027: PUSH
59028: LD_INT 2
59030: NEG
59031: PUSH
59032: LD_INT 4
59034: NEG
59035: PUSH
59036: EMPTY
59037: LIST
59038: LIST
59039: PUSH
59040: LD_INT 4
59042: NEG
59043: PUSH
59044: LD_INT 2
59046: NEG
59047: PUSH
59048: EMPTY
59049: LIST
59050: LIST
59051: PUSH
59052: LD_INT 0
59054: PUSH
59055: LD_INT 4
59057: NEG
59058: PUSH
59059: EMPTY
59060: LIST
59061: LIST
59062: PUSH
59063: LD_INT 0
59065: PUSH
59066: LD_INT 5
59068: NEG
59069: PUSH
59070: EMPTY
59071: LIST
59072: LIST
59073: PUSH
59074: LD_INT 1
59076: PUSH
59077: LD_INT 4
59079: NEG
59080: PUSH
59081: EMPTY
59082: LIST
59083: LIST
59084: PUSH
59085: LD_INT 1
59087: PUSH
59088: LD_INT 3
59090: NEG
59091: PUSH
59092: EMPTY
59093: LIST
59094: LIST
59095: PUSH
59096: LD_INT 0
59098: PUSH
59099: LD_INT 3
59101: NEG
59102: PUSH
59103: EMPTY
59104: LIST
59105: LIST
59106: PUSH
59107: LD_INT 1
59109: NEG
59110: PUSH
59111: LD_INT 4
59113: NEG
59114: PUSH
59115: EMPTY
59116: LIST
59117: LIST
59118: PUSH
59119: LD_INT 1
59121: NEG
59122: PUSH
59123: LD_INT 5
59125: NEG
59126: PUSH
59127: EMPTY
59128: LIST
59129: LIST
59130: PUSH
59131: LD_INT 2
59133: PUSH
59134: LD_INT 3
59136: NEG
59137: PUSH
59138: EMPTY
59139: LIST
59140: LIST
59141: PUSH
59142: LD_INT 2
59144: NEG
59145: PUSH
59146: LD_INT 5
59148: NEG
59149: PUSH
59150: EMPTY
59151: LIST
59152: LIST
59153: PUSH
59154: LD_INT 3
59156: PUSH
59157: LD_INT 0
59159: PUSH
59160: EMPTY
59161: LIST
59162: LIST
59163: PUSH
59164: LD_INT 3
59166: PUSH
59167: LD_INT 1
59169: NEG
59170: PUSH
59171: EMPTY
59172: LIST
59173: LIST
59174: PUSH
59175: LD_INT 4
59177: PUSH
59178: LD_INT 0
59180: PUSH
59181: EMPTY
59182: LIST
59183: LIST
59184: PUSH
59185: LD_INT 4
59187: PUSH
59188: LD_INT 1
59190: PUSH
59191: EMPTY
59192: LIST
59193: LIST
59194: PUSH
59195: LD_INT 3
59197: PUSH
59198: LD_INT 1
59200: PUSH
59201: EMPTY
59202: LIST
59203: LIST
59204: PUSH
59205: LD_INT 2
59207: PUSH
59208: LD_INT 0
59210: PUSH
59211: EMPTY
59212: LIST
59213: LIST
59214: PUSH
59215: LD_INT 2
59217: PUSH
59218: LD_INT 1
59220: NEG
59221: PUSH
59222: EMPTY
59223: LIST
59224: LIST
59225: PUSH
59226: LD_INT 2
59228: PUSH
59229: LD_INT 2
59231: NEG
59232: PUSH
59233: EMPTY
59234: LIST
59235: LIST
59236: PUSH
59237: LD_INT 4
59239: PUSH
59240: LD_INT 2
59242: PUSH
59243: EMPTY
59244: LIST
59245: LIST
59246: PUSH
59247: LD_INT 4
59249: PUSH
59250: LD_INT 4
59252: PUSH
59253: EMPTY
59254: LIST
59255: LIST
59256: PUSH
59257: LD_INT 4
59259: PUSH
59260: LD_INT 3
59262: PUSH
59263: EMPTY
59264: LIST
59265: LIST
59266: PUSH
59267: LD_INT 5
59269: PUSH
59270: LD_INT 4
59272: PUSH
59273: EMPTY
59274: LIST
59275: LIST
59276: PUSH
59277: LD_INT 5
59279: PUSH
59280: LD_INT 5
59282: PUSH
59283: EMPTY
59284: LIST
59285: LIST
59286: PUSH
59287: LD_INT 4
59289: PUSH
59290: LD_INT 5
59292: PUSH
59293: EMPTY
59294: LIST
59295: LIST
59296: PUSH
59297: LD_INT 3
59299: PUSH
59300: LD_INT 4
59302: PUSH
59303: EMPTY
59304: LIST
59305: LIST
59306: PUSH
59307: LD_INT 3
59309: PUSH
59310: LD_INT 3
59312: PUSH
59313: EMPTY
59314: LIST
59315: LIST
59316: PUSH
59317: LD_INT 5
59319: PUSH
59320: LD_INT 3
59322: PUSH
59323: EMPTY
59324: LIST
59325: LIST
59326: PUSH
59327: LD_INT 3
59329: PUSH
59330: LD_INT 5
59332: PUSH
59333: EMPTY
59334: LIST
59335: LIST
59336: PUSH
59337: EMPTY
59338: LIST
59339: LIST
59340: LIST
59341: LIST
59342: LIST
59343: LIST
59344: LIST
59345: LIST
59346: LIST
59347: LIST
59348: LIST
59349: LIST
59350: LIST
59351: LIST
59352: LIST
59353: LIST
59354: LIST
59355: LIST
59356: LIST
59357: LIST
59358: LIST
59359: LIST
59360: LIST
59361: LIST
59362: LIST
59363: LIST
59364: LIST
59365: LIST
59366: LIST
59367: LIST
59368: LIST
59369: LIST
59370: LIST
59371: LIST
59372: LIST
59373: LIST
59374: LIST
59375: LIST
59376: LIST
59377: LIST
59378: LIST
59379: LIST
59380: LIST
59381: LIST
59382: LIST
59383: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
59384: LD_ADDR_VAR 0 33
59388: PUSH
59389: LD_INT 4
59391: NEG
59392: PUSH
59393: LD_INT 4
59395: NEG
59396: PUSH
59397: EMPTY
59398: LIST
59399: LIST
59400: PUSH
59401: LD_INT 4
59403: NEG
59404: PUSH
59405: LD_INT 5
59407: NEG
59408: PUSH
59409: EMPTY
59410: LIST
59411: LIST
59412: PUSH
59413: LD_INT 3
59415: NEG
59416: PUSH
59417: LD_INT 4
59419: NEG
59420: PUSH
59421: EMPTY
59422: LIST
59423: LIST
59424: PUSH
59425: LD_INT 3
59427: NEG
59428: PUSH
59429: LD_INT 3
59431: NEG
59432: PUSH
59433: EMPTY
59434: LIST
59435: LIST
59436: PUSH
59437: LD_INT 4
59439: NEG
59440: PUSH
59441: LD_INT 3
59443: NEG
59444: PUSH
59445: EMPTY
59446: LIST
59447: LIST
59448: PUSH
59449: LD_INT 5
59451: NEG
59452: PUSH
59453: LD_INT 4
59455: NEG
59456: PUSH
59457: EMPTY
59458: LIST
59459: LIST
59460: PUSH
59461: LD_INT 5
59463: NEG
59464: PUSH
59465: LD_INT 5
59467: NEG
59468: PUSH
59469: EMPTY
59470: LIST
59471: LIST
59472: PUSH
59473: LD_INT 3
59475: NEG
59476: PUSH
59477: LD_INT 5
59479: NEG
59480: PUSH
59481: EMPTY
59482: LIST
59483: LIST
59484: PUSH
59485: LD_INT 5
59487: NEG
59488: PUSH
59489: LD_INT 3
59491: NEG
59492: PUSH
59493: EMPTY
59494: LIST
59495: LIST
59496: PUSH
59497: LD_INT 0
59499: PUSH
59500: LD_INT 3
59502: NEG
59503: PUSH
59504: EMPTY
59505: LIST
59506: LIST
59507: PUSH
59508: LD_INT 0
59510: PUSH
59511: LD_INT 4
59513: NEG
59514: PUSH
59515: EMPTY
59516: LIST
59517: LIST
59518: PUSH
59519: LD_INT 1
59521: PUSH
59522: LD_INT 3
59524: NEG
59525: PUSH
59526: EMPTY
59527: LIST
59528: LIST
59529: PUSH
59530: LD_INT 1
59532: PUSH
59533: LD_INT 2
59535: NEG
59536: PUSH
59537: EMPTY
59538: LIST
59539: LIST
59540: PUSH
59541: LD_INT 0
59543: PUSH
59544: LD_INT 2
59546: NEG
59547: PUSH
59548: EMPTY
59549: LIST
59550: LIST
59551: PUSH
59552: LD_INT 1
59554: NEG
59555: PUSH
59556: LD_INT 3
59558: NEG
59559: PUSH
59560: EMPTY
59561: LIST
59562: LIST
59563: PUSH
59564: LD_INT 1
59566: NEG
59567: PUSH
59568: LD_INT 4
59570: NEG
59571: PUSH
59572: EMPTY
59573: LIST
59574: LIST
59575: PUSH
59576: LD_INT 2
59578: PUSH
59579: LD_INT 2
59581: NEG
59582: PUSH
59583: EMPTY
59584: LIST
59585: LIST
59586: PUSH
59587: LD_INT 2
59589: NEG
59590: PUSH
59591: LD_INT 4
59593: NEG
59594: PUSH
59595: EMPTY
59596: LIST
59597: LIST
59598: PUSH
59599: LD_INT 4
59601: PUSH
59602: LD_INT 0
59604: PUSH
59605: EMPTY
59606: LIST
59607: LIST
59608: PUSH
59609: LD_INT 4
59611: PUSH
59612: LD_INT 1
59614: NEG
59615: PUSH
59616: EMPTY
59617: LIST
59618: LIST
59619: PUSH
59620: LD_INT 5
59622: PUSH
59623: LD_INT 0
59625: PUSH
59626: EMPTY
59627: LIST
59628: LIST
59629: PUSH
59630: LD_INT 5
59632: PUSH
59633: LD_INT 1
59635: PUSH
59636: EMPTY
59637: LIST
59638: LIST
59639: PUSH
59640: LD_INT 4
59642: PUSH
59643: LD_INT 1
59645: PUSH
59646: EMPTY
59647: LIST
59648: LIST
59649: PUSH
59650: LD_INT 3
59652: PUSH
59653: LD_INT 0
59655: PUSH
59656: EMPTY
59657: LIST
59658: LIST
59659: PUSH
59660: LD_INT 3
59662: PUSH
59663: LD_INT 1
59665: NEG
59666: PUSH
59667: EMPTY
59668: LIST
59669: LIST
59670: PUSH
59671: LD_INT 3
59673: PUSH
59674: LD_INT 2
59676: NEG
59677: PUSH
59678: EMPTY
59679: LIST
59680: LIST
59681: PUSH
59682: LD_INT 5
59684: PUSH
59685: LD_INT 2
59687: PUSH
59688: EMPTY
59689: LIST
59690: LIST
59691: PUSH
59692: LD_INT 3
59694: PUSH
59695: LD_INT 3
59697: PUSH
59698: EMPTY
59699: LIST
59700: LIST
59701: PUSH
59702: LD_INT 3
59704: PUSH
59705: LD_INT 2
59707: PUSH
59708: EMPTY
59709: LIST
59710: LIST
59711: PUSH
59712: LD_INT 4
59714: PUSH
59715: LD_INT 3
59717: PUSH
59718: EMPTY
59719: LIST
59720: LIST
59721: PUSH
59722: LD_INT 4
59724: PUSH
59725: LD_INT 4
59727: PUSH
59728: EMPTY
59729: LIST
59730: LIST
59731: PUSH
59732: LD_INT 3
59734: PUSH
59735: LD_INT 4
59737: PUSH
59738: EMPTY
59739: LIST
59740: LIST
59741: PUSH
59742: LD_INT 2
59744: PUSH
59745: LD_INT 3
59747: PUSH
59748: EMPTY
59749: LIST
59750: LIST
59751: PUSH
59752: LD_INT 2
59754: PUSH
59755: LD_INT 2
59757: PUSH
59758: EMPTY
59759: LIST
59760: LIST
59761: PUSH
59762: LD_INT 4
59764: PUSH
59765: LD_INT 2
59767: PUSH
59768: EMPTY
59769: LIST
59770: LIST
59771: PUSH
59772: LD_INT 2
59774: PUSH
59775: LD_INT 4
59777: PUSH
59778: EMPTY
59779: LIST
59780: LIST
59781: PUSH
59782: LD_INT 0
59784: PUSH
59785: LD_INT 4
59787: PUSH
59788: EMPTY
59789: LIST
59790: LIST
59791: PUSH
59792: LD_INT 0
59794: PUSH
59795: LD_INT 3
59797: PUSH
59798: EMPTY
59799: LIST
59800: LIST
59801: PUSH
59802: LD_INT 1
59804: PUSH
59805: LD_INT 4
59807: PUSH
59808: EMPTY
59809: LIST
59810: LIST
59811: PUSH
59812: LD_INT 1
59814: PUSH
59815: LD_INT 5
59817: PUSH
59818: EMPTY
59819: LIST
59820: LIST
59821: PUSH
59822: LD_INT 0
59824: PUSH
59825: LD_INT 5
59827: PUSH
59828: EMPTY
59829: LIST
59830: LIST
59831: PUSH
59832: LD_INT 1
59834: NEG
59835: PUSH
59836: LD_INT 4
59838: PUSH
59839: EMPTY
59840: LIST
59841: LIST
59842: PUSH
59843: LD_INT 1
59845: NEG
59846: PUSH
59847: LD_INT 3
59849: PUSH
59850: EMPTY
59851: LIST
59852: LIST
59853: PUSH
59854: LD_INT 2
59856: PUSH
59857: LD_INT 5
59859: PUSH
59860: EMPTY
59861: LIST
59862: LIST
59863: PUSH
59864: LD_INT 2
59866: NEG
59867: PUSH
59868: LD_INT 3
59870: PUSH
59871: EMPTY
59872: LIST
59873: LIST
59874: PUSH
59875: EMPTY
59876: LIST
59877: LIST
59878: LIST
59879: LIST
59880: LIST
59881: LIST
59882: LIST
59883: LIST
59884: LIST
59885: LIST
59886: LIST
59887: LIST
59888: LIST
59889: LIST
59890: LIST
59891: LIST
59892: LIST
59893: LIST
59894: LIST
59895: LIST
59896: LIST
59897: LIST
59898: LIST
59899: LIST
59900: LIST
59901: LIST
59902: LIST
59903: LIST
59904: LIST
59905: LIST
59906: LIST
59907: LIST
59908: LIST
59909: LIST
59910: LIST
59911: LIST
59912: LIST
59913: LIST
59914: LIST
59915: LIST
59916: LIST
59917: LIST
59918: LIST
59919: LIST
59920: LIST
59921: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
59922: LD_ADDR_VAR 0 34
59926: PUSH
59927: LD_INT 0
59929: PUSH
59930: LD_INT 4
59932: NEG
59933: PUSH
59934: EMPTY
59935: LIST
59936: LIST
59937: PUSH
59938: LD_INT 0
59940: PUSH
59941: LD_INT 5
59943: NEG
59944: PUSH
59945: EMPTY
59946: LIST
59947: LIST
59948: PUSH
59949: LD_INT 1
59951: PUSH
59952: LD_INT 4
59954: NEG
59955: PUSH
59956: EMPTY
59957: LIST
59958: LIST
59959: PUSH
59960: LD_INT 1
59962: PUSH
59963: LD_INT 3
59965: NEG
59966: PUSH
59967: EMPTY
59968: LIST
59969: LIST
59970: PUSH
59971: LD_INT 0
59973: PUSH
59974: LD_INT 3
59976: NEG
59977: PUSH
59978: EMPTY
59979: LIST
59980: LIST
59981: PUSH
59982: LD_INT 1
59984: NEG
59985: PUSH
59986: LD_INT 4
59988: NEG
59989: PUSH
59990: EMPTY
59991: LIST
59992: LIST
59993: PUSH
59994: LD_INT 1
59996: NEG
59997: PUSH
59998: LD_INT 5
60000: NEG
60001: PUSH
60002: EMPTY
60003: LIST
60004: LIST
60005: PUSH
60006: LD_INT 2
60008: PUSH
60009: LD_INT 3
60011: NEG
60012: PUSH
60013: EMPTY
60014: LIST
60015: LIST
60016: PUSH
60017: LD_INT 2
60019: NEG
60020: PUSH
60021: LD_INT 5
60023: NEG
60024: PUSH
60025: EMPTY
60026: LIST
60027: LIST
60028: PUSH
60029: LD_INT 3
60031: PUSH
60032: LD_INT 0
60034: PUSH
60035: EMPTY
60036: LIST
60037: LIST
60038: PUSH
60039: LD_INT 3
60041: PUSH
60042: LD_INT 1
60044: NEG
60045: PUSH
60046: EMPTY
60047: LIST
60048: LIST
60049: PUSH
60050: LD_INT 4
60052: PUSH
60053: LD_INT 0
60055: PUSH
60056: EMPTY
60057: LIST
60058: LIST
60059: PUSH
60060: LD_INT 4
60062: PUSH
60063: LD_INT 1
60065: PUSH
60066: EMPTY
60067: LIST
60068: LIST
60069: PUSH
60070: LD_INT 3
60072: PUSH
60073: LD_INT 1
60075: PUSH
60076: EMPTY
60077: LIST
60078: LIST
60079: PUSH
60080: LD_INT 2
60082: PUSH
60083: LD_INT 0
60085: PUSH
60086: EMPTY
60087: LIST
60088: LIST
60089: PUSH
60090: LD_INT 2
60092: PUSH
60093: LD_INT 1
60095: NEG
60096: PUSH
60097: EMPTY
60098: LIST
60099: LIST
60100: PUSH
60101: LD_INT 2
60103: PUSH
60104: LD_INT 2
60106: NEG
60107: PUSH
60108: EMPTY
60109: LIST
60110: LIST
60111: PUSH
60112: LD_INT 4
60114: PUSH
60115: LD_INT 2
60117: PUSH
60118: EMPTY
60119: LIST
60120: LIST
60121: PUSH
60122: LD_INT 4
60124: PUSH
60125: LD_INT 4
60127: PUSH
60128: EMPTY
60129: LIST
60130: LIST
60131: PUSH
60132: LD_INT 4
60134: PUSH
60135: LD_INT 3
60137: PUSH
60138: EMPTY
60139: LIST
60140: LIST
60141: PUSH
60142: LD_INT 5
60144: PUSH
60145: LD_INT 4
60147: PUSH
60148: EMPTY
60149: LIST
60150: LIST
60151: PUSH
60152: LD_INT 5
60154: PUSH
60155: LD_INT 5
60157: PUSH
60158: EMPTY
60159: LIST
60160: LIST
60161: PUSH
60162: LD_INT 4
60164: PUSH
60165: LD_INT 5
60167: PUSH
60168: EMPTY
60169: LIST
60170: LIST
60171: PUSH
60172: LD_INT 3
60174: PUSH
60175: LD_INT 4
60177: PUSH
60178: EMPTY
60179: LIST
60180: LIST
60181: PUSH
60182: LD_INT 3
60184: PUSH
60185: LD_INT 3
60187: PUSH
60188: EMPTY
60189: LIST
60190: LIST
60191: PUSH
60192: LD_INT 5
60194: PUSH
60195: LD_INT 3
60197: PUSH
60198: EMPTY
60199: LIST
60200: LIST
60201: PUSH
60202: LD_INT 3
60204: PUSH
60205: LD_INT 5
60207: PUSH
60208: EMPTY
60209: LIST
60210: LIST
60211: PUSH
60212: LD_INT 0
60214: PUSH
60215: LD_INT 3
60217: PUSH
60218: EMPTY
60219: LIST
60220: LIST
60221: PUSH
60222: LD_INT 0
60224: PUSH
60225: LD_INT 2
60227: PUSH
60228: EMPTY
60229: LIST
60230: LIST
60231: PUSH
60232: LD_INT 1
60234: PUSH
60235: LD_INT 3
60237: PUSH
60238: EMPTY
60239: LIST
60240: LIST
60241: PUSH
60242: LD_INT 1
60244: PUSH
60245: LD_INT 4
60247: PUSH
60248: EMPTY
60249: LIST
60250: LIST
60251: PUSH
60252: LD_INT 0
60254: PUSH
60255: LD_INT 4
60257: PUSH
60258: EMPTY
60259: LIST
60260: LIST
60261: PUSH
60262: LD_INT 1
60264: NEG
60265: PUSH
60266: LD_INT 3
60268: PUSH
60269: EMPTY
60270: LIST
60271: LIST
60272: PUSH
60273: LD_INT 1
60275: NEG
60276: PUSH
60277: LD_INT 2
60279: PUSH
60280: EMPTY
60281: LIST
60282: LIST
60283: PUSH
60284: LD_INT 2
60286: PUSH
60287: LD_INT 4
60289: PUSH
60290: EMPTY
60291: LIST
60292: LIST
60293: PUSH
60294: LD_INT 2
60296: NEG
60297: PUSH
60298: LD_INT 2
60300: PUSH
60301: EMPTY
60302: LIST
60303: LIST
60304: PUSH
60305: LD_INT 4
60307: NEG
60308: PUSH
60309: LD_INT 0
60311: PUSH
60312: EMPTY
60313: LIST
60314: LIST
60315: PUSH
60316: LD_INT 4
60318: NEG
60319: PUSH
60320: LD_INT 1
60322: NEG
60323: PUSH
60324: EMPTY
60325: LIST
60326: LIST
60327: PUSH
60328: LD_INT 3
60330: NEG
60331: PUSH
60332: LD_INT 0
60334: PUSH
60335: EMPTY
60336: LIST
60337: LIST
60338: PUSH
60339: LD_INT 3
60341: NEG
60342: PUSH
60343: LD_INT 1
60345: PUSH
60346: EMPTY
60347: LIST
60348: LIST
60349: PUSH
60350: LD_INT 4
60352: NEG
60353: PUSH
60354: LD_INT 1
60356: PUSH
60357: EMPTY
60358: LIST
60359: LIST
60360: PUSH
60361: LD_INT 5
60363: NEG
60364: PUSH
60365: LD_INT 0
60367: PUSH
60368: EMPTY
60369: LIST
60370: LIST
60371: PUSH
60372: LD_INT 5
60374: NEG
60375: PUSH
60376: LD_INT 1
60378: NEG
60379: PUSH
60380: EMPTY
60381: LIST
60382: LIST
60383: PUSH
60384: LD_INT 5
60386: NEG
60387: PUSH
60388: LD_INT 2
60390: NEG
60391: PUSH
60392: EMPTY
60393: LIST
60394: LIST
60395: PUSH
60396: LD_INT 3
60398: NEG
60399: PUSH
60400: LD_INT 2
60402: PUSH
60403: EMPTY
60404: LIST
60405: LIST
60406: PUSH
60407: EMPTY
60408: LIST
60409: LIST
60410: LIST
60411: LIST
60412: LIST
60413: LIST
60414: LIST
60415: LIST
60416: LIST
60417: LIST
60418: LIST
60419: LIST
60420: LIST
60421: LIST
60422: LIST
60423: LIST
60424: LIST
60425: LIST
60426: LIST
60427: LIST
60428: LIST
60429: LIST
60430: LIST
60431: LIST
60432: LIST
60433: LIST
60434: LIST
60435: LIST
60436: LIST
60437: LIST
60438: LIST
60439: LIST
60440: LIST
60441: LIST
60442: LIST
60443: LIST
60444: LIST
60445: LIST
60446: LIST
60447: LIST
60448: LIST
60449: LIST
60450: LIST
60451: LIST
60452: LIST
60453: ST_TO_ADDR
// end ; end ;
60454: GO 60457
60456: POP
// case btype of b_depot , b_warehouse :
60457: LD_VAR 0 1
60461: PUSH
60462: LD_INT 0
60464: DOUBLE
60465: EQUAL
60466: IFTRUE 60476
60468: LD_INT 1
60470: DOUBLE
60471: EQUAL
60472: IFTRUE 60476
60474: GO 60677
60476: POP
// case nation of nation_american :
60477: LD_VAR 0 5
60481: PUSH
60482: LD_INT 1
60484: DOUBLE
60485: EQUAL
60486: IFTRUE 60490
60488: GO 60546
60490: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
60491: LD_ADDR_VAR 0 9
60495: PUSH
60496: LD_VAR 0 11
60500: PUSH
60501: LD_VAR 0 12
60505: PUSH
60506: LD_VAR 0 13
60510: PUSH
60511: LD_VAR 0 14
60515: PUSH
60516: LD_VAR 0 15
60520: PUSH
60521: LD_VAR 0 16
60525: PUSH
60526: EMPTY
60527: LIST
60528: LIST
60529: LIST
60530: LIST
60531: LIST
60532: LIST
60533: PUSH
60534: LD_VAR 0 4
60538: PUSH
60539: LD_INT 1
60541: PLUS
60542: ARRAY
60543: ST_TO_ADDR
60544: GO 60675
60546: LD_INT 2
60548: DOUBLE
60549: EQUAL
60550: IFTRUE 60554
60552: GO 60610
60554: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
60555: LD_ADDR_VAR 0 9
60559: PUSH
60560: LD_VAR 0 17
60564: PUSH
60565: LD_VAR 0 18
60569: PUSH
60570: LD_VAR 0 19
60574: PUSH
60575: LD_VAR 0 20
60579: PUSH
60580: LD_VAR 0 21
60584: PUSH
60585: LD_VAR 0 22
60589: PUSH
60590: EMPTY
60591: LIST
60592: LIST
60593: LIST
60594: LIST
60595: LIST
60596: LIST
60597: PUSH
60598: LD_VAR 0 4
60602: PUSH
60603: LD_INT 1
60605: PLUS
60606: ARRAY
60607: ST_TO_ADDR
60608: GO 60675
60610: LD_INT 3
60612: DOUBLE
60613: EQUAL
60614: IFTRUE 60618
60616: GO 60674
60618: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
60619: LD_ADDR_VAR 0 9
60623: PUSH
60624: LD_VAR 0 23
60628: PUSH
60629: LD_VAR 0 24
60633: PUSH
60634: LD_VAR 0 25
60638: PUSH
60639: LD_VAR 0 26
60643: PUSH
60644: LD_VAR 0 27
60648: PUSH
60649: LD_VAR 0 28
60653: PUSH
60654: EMPTY
60655: LIST
60656: LIST
60657: LIST
60658: LIST
60659: LIST
60660: LIST
60661: PUSH
60662: LD_VAR 0 4
60666: PUSH
60667: LD_INT 1
60669: PLUS
60670: ARRAY
60671: ST_TO_ADDR
60672: GO 60675
60674: POP
60675: GO 61230
60677: LD_INT 2
60679: DOUBLE
60680: EQUAL
60681: IFTRUE 60691
60683: LD_INT 3
60685: DOUBLE
60686: EQUAL
60687: IFTRUE 60691
60689: GO 60747
60691: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
60692: LD_ADDR_VAR 0 9
60696: PUSH
60697: LD_VAR 0 29
60701: PUSH
60702: LD_VAR 0 30
60706: PUSH
60707: LD_VAR 0 31
60711: PUSH
60712: LD_VAR 0 32
60716: PUSH
60717: LD_VAR 0 33
60721: PUSH
60722: LD_VAR 0 34
60726: PUSH
60727: EMPTY
60728: LIST
60729: LIST
60730: LIST
60731: LIST
60732: LIST
60733: LIST
60734: PUSH
60735: LD_VAR 0 4
60739: PUSH
60740: LD_INT 1
60742: PLUS
60743: ARRAY
60744: ST_TO_ADDR
60745: GO 61230
60747: LD_INT 16
60749: DOUBLE
60750: EQUAL
60751: IFTRUE 60809
60753: LD_INT 17
60755: DOUBLE
60756: EQUAL
60757: IFTRUE 60809
60759: LD_INT 18
60761: DOUBLE
60762: EQUAL
60763: IFTRUE 60809
60765: LD_INT 19
60767: DOUBLE
60768: EQUAL
60769: IFTRUE 60809
60771: LD_INT 22
60773: DOUBLE
60774: EQUAL
60775: IFTRUE 60809
60777: LD_INT 20
60779: DOUBLE
60780: EQUAL
60781: IFTRUE 60809
60783: LD_INT 21
60785: DOUBLE
60786: EQUAL
60787: IFTRUE 60809
60789: LD_INT 23
60791: DOUBLE
60792: EQUAL
60793: IFTRUE 60809
60795: LD_INT 24
60797: DOUBLE
60798: EQUAL
60799: IFTRUE 60809
60801: LD_INT 25
60803: DOUBLE
60804: EQUAL
60805: IFTRUE 60809
60807: GO 60865
60809: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
60810: LD_ADDR_VAR 0 9
60814: PUSH
60815: LD_VAR 0 35
60819: PUSH
60820: LD_VAR 0 36
60824: PUSH
60825: LD_VAR 0 37
60829: PUSH
60830: LD_VAR 0 38
60834: PUSH
60835: LD_VAR 0 39
60839: PUSH
60840: LD_VAR 0 40
60844: PUSH
60845: EMPTY
60846: LIST
60847: LIST
60848: LIST
60849: LIST
60850: LIST
60851: LIST
60852: PUSH
60853: LD_VAR 0 4
60857: PUSH
60858: LD_INT 1
60860: PLUS
60861: ARRAY
60862: ST_TO_ADDR
60863: GO 61230
60865: LD_INT 6
60867: DOUBLE
60868: EQUAL
60869: IFTRUE 60921
60871: LD_INT 7
60873: DOUBLE
60874: EQUAL
60875: IFTRUE 60921
60877: LD_INT 8
60879: DOUBLE
60880: EQUAL
60881: IFTRUE 60921
60883: LD_INT 13
60885: DOUBLE
60886: EQUAL
60887: IFTRUE 60921
60889: LD_INT 12
60891: DOUBLE
60892: EQUAL
60893: IFTRUE 60921
60895: LD_INT 15
60897: DOUBLE
60898: EQUAL
60899: IFTRUE 60921
60901: LD_INT 11
60903: DOUBLE
60904: EQUAL
60905: IFTRUE 60921
60907: LD_INT 14
60909: DOUBLE
60910: EQUAL
60911: IFTRUE 60921
60913: LD_INT 10
60915: DOUBLE
60916: EQUAL
60917: IFTRUE 60921
60919: GO 60977
60921: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
60922: LD_ADDR_VAR 0 9
60926: PUSH
60927: LD_VAR 0 41
60931: PUSH
60932: LD_VAR 0 42
60936: PUSH
60937: LD_VAR 0 43
60941: PUSH
60942: LD_VAR 0 44
60946: PUSH
60947: LD_VAR 0 45
60951: PUSH
60952: LD_VAR 0 46
60956: PUSH
60957: EMPTY
60958: LIST
60959: LIST
60960: LIST
60961: LIST
60962: LIST
60963: LIST
60964: PUSH
60965: LD_VAR 0 4
60969: PUSH
60970: LD_INT 1
60972: PLUS
60973: ARRAY
60974: ST_TO_ADDR
60975: GO 61230
60977: LD_INT 36
60979: DOUBLE
60980: EQUAL
60981: IFTRUE 60985
60983: GO 61041
60985: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
60986: LD_ADDR_VAR 0 9
60990: PUSH
60991: LD_VAR 0 47
60995: PUSH
60996: LD_VAR 0 48
61000: PUSH
61001: LD_VAR 0 49
61005: PUSH
61006: LD_VAR 0 50
61010: PUSH
61011: LD_VAR 0 51
61015: PUSH
61016: LD_VAR 0 52
61020: PUSH
61021: EMPTY
61022: LIST
61023: LIST
61024: LIST
61025: LIST
61026: LIST
61027: LIST
61028: PUSH
61029: LD_VAR 0 4
61033: PUSH
61034: LD_INT 1
61036: PLUS
61037: ARRAY
61038: ST_TO_ADDR
61039: GO 61230
61041: LD_INT 4
61043: DOUBLE
61044: EQUAL
61045: IFTRUE 61067
61047: LD_INT 5
61049: DOUBLE
61050: EQUAL
61051: IFTRUE 61067
61053: LD_INT 34
61055: DOUBLE
61056: EQUAL
61057: IFTRUE 61067
61059: LD_INT 37
61061: DOUBLE
61062: EQUAL
61063: IFTRUE 61067
61065: GO 61123
61067: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
61068: LD_ADDR_VAR 0 9
61072: PUSH
61073: LD_VAR 0 53
61077: PUSH
61078: LD_VAR 0 54
61082: PUSH
61083: LD_VAR 0 55
61087: PUSH
61088: LD_VAR 0 56
61092: PUSH
61093: LD_VAR 0 57
61097: PUSH
61098: LD_VAR 0 58
61102: PUSH
61103: EMPTY
61104: LIST
61105: LIST
61106: LIST
61107: LIST
61108: LIST
61109: LIST
61110: PUSH
61111: LD_VAR 0 4
61115: PUSH
61116: LD_INT 1
61118: PLUS
61119: ARRAY
61120: ST_TO_ADDR
61121: GO 61230
61123: LD_INT 31
61125: DOUBLE
61126: EQUAL
61127: IFTRUE 61173
61129: LD_INT 32
61131: DOUBLE
61132: EQUAL
61133: IFTRUE 61173
61135: LD_INT 33
61137: DOUBLE
61138: EQUAL
61139: IFTRUE 61173
61141: LD_INT 27
61143: DOUBLE
61144: EQUAL
61145: IFTRUE 61173
61147: LD_INT 26
61149: DOUBLE
61150: EQUAL
61151: IFTRUE 61173
61153: LD_INT 28
61155: DOUBLE
61156: EQUAL
61157: IFTRUE 61173
61159: LD_INT 29
61161: DOUBLE
61162: EQUAL
61163: IFTRUE 61173
61165: LD_INT 30
61167: DOUBLE
61168: EQUAL
61169: IFTRUE 61173
61171: GO 61229
61173: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
61174: LD_ADDR_VAR 0 9
61178: PUSH
61179: LD_VAR 0 59
61183: PUSH
61184: LD_VAR 0 60
61188: PUSH
61189: LD_VAR 0 61
61193: PUSH
61194: LD_VAR 0 62
61198: PUSH
61199: LD_VAR 0 63
61203: PUSH
61204: LD_VAR 0 64
61208: PUSH
61209: EMPTY
61210: LIST
61211: LIST
61212: LIST
61213: LIST
61214: LIST
61215: LIST
61216: PUSH
61217: LD_VAR 0 4
61221: PUSH
61222: LD_INT 1
61224: PLUS
61225: ARRAY
61226: ST_TO_ADDR
61227: GO 61230
61229: POP
// temp_list2 = [ ] ;
61230: LD_ADDR_VAR 0 10
61234: PUSH
61235: EMPTY
61236: ST_TO_ADDR
// for i in temp_list do
61237: LD_ADDR_VAR 0 8
61241: PUSH
61242: LD_VAR 0 9
61246: PUSH
61247: FOR_IN
61248: IFFALSE 61300
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
61250: LD_ADDR_VAR 0 10
61254: PUSH
61255: LD_VAR 0 10
61259: PUSH
61260: LD_VAR 0 8
61264: PUSH
61265: LD_INT 1
61267: ARRAY
61268: PUSH
61269: LD_VAR 0 2
61273: PLUS
61274: PUSH
61275: LD_VAR 0 8
61279: PUSH
61280: LD_INT 2
61282: ARRAY
61283: PUSH
61284: LD_VAR 0 3
61288: PLUS
61289: PUSH
61290: EMPTY
61291: LIST
61292: LIST
61293: PUSH
61294: EMPTY
61295: LIST
61296: ADD
61297: ST_TO_ADDR
61298: GO 61247
61300: POP
61301: POP
// result = temp_list2 ;
61302: LD_ADDR_VAR 0 7
61306: PUSH
61307: LD_VAR 0 10
61311: ST_TO_ADDR
// end ;
61312: LD_VAR 0 7
61316: RET
// export function EnemyInRange ( unit , dist ) ; begin
61317: LD_INT 0
61319: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
61320: LD_ADDR_VAR 0 3
61324: PUSH
61325: LD_VAR 0 1
61329: PPUSH
61330: CALL_OW 255
61334: PPUSH
61335: LD_VAR 0 1
61339: PPUSH
61340: CALL_OW 250
61344: PPUSH
61345: LD_VAR 0 1
61349: PPUSH
61350: CALL_OW 251
61354: PPUSH
61355: LD_VAR 0 2
61359: PPUSH
61360: CALL 34690 0 4
61364: PUSH
61365: LD_INT 4
61367: ARRAY
61368: ST_TO_ADDR
// end ;
61369: LD_VAR 0 3
61373: RET
// export function PlayerSeeMe ( unit ) ; begin
61374: LD_INT 0
61376: PPUSH
// result := See ( your_side , unit ) ;
61377: LD_ADDR_VAR 0 2
61381: PUSH
61382: LD_OWVAR 2
61386: PPUSH
61387: LD_VAR 0 1
61391: PPUSH
61392: CALL_OW 292
61396: ST_TO_ADDR
// end ;
61397: LD_VAR 0 2
61401: RET
// export function ReverseDir ( unit ) ; begin
61402: LD_INT 0
61404: PPUSH
// if not unit then
61405: LD_VAR 0 1
61409: NOT
61410: IFFALSE 61414
// exit ;
61412: GO 61437
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
61414: LD_ADDR_VAR 0 2
61418: PUSH
61419: LD_VAR 0 1
61423: PPUSH
61424: CALL_OW 254
61428: PUSH
61429: LD_INT 3
61431: PLUS
61432: PUSH
61433: LD_INT 6
61435: MOD
61436: ST_TO_ADDR
// end ;
61437: LD_VAR 0 2
61441: RET
// export function ReverseArray ( array ) ; var i ; begin
61442: LD_INT 0
61444: PPUSH
61445: PPUSH
// if not array then
61446: LD_VAR 0 1
61450: NOT
61451: IFFALSE 61455
// exit ;
61453: GO 61510
// result := [ ] ;
61455: LD_ADDR_VAR 0 2
61459: PUSH
61460: EMPTY
61461: ST_TO_ADDR
// for i := array downto 1 do
61462: LD_ADDR_VAR 0 3
61466: PUSH
61467: DOUBLE
61468: LD_VAR 0 1
61472: INC
61473: ST_TO_ADDR
61474: LD_INT 1
61476: PUSH
61477: FOR_DOWNTO
61478: IFFALSE 61508
// result := Join ( result , array [ i ] ) ;
61480: LD_ADDR_VAR 0 2
61484: PUSH
61485: LD_VAR 0 2
61489: PPUSH
61490: LD_VAR 0 1
61494: PUSH
61495: LD_VAR 0 3
61499: ARRAY
61500: PPUSH
61501: CALL 66153 0 2
61505: ST_TO_ADDR
61506: GO 61477
61508: POP
61509: POP
// end ;
61510: LD_VAR 0 2
61514: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
61515: LD_INT 0
61517: PPUSH
61518: PPUSH
61519: PPUSH
61520: PPUSH
61521: PPUSH
61522: PPUSH
// if not unit or not hexes then
61523: LD_VAR 0 1
61527: NOT
61528: PUSH
61529: LD_VAR 0 2
61533: NOT
61534: OR
61535: IFFALSE 61539
// exit ;
61537: GO 61662
// dist := 9999 ;
61539: LD_ADDR_VAR 0 5
61543: PUSH
61544: LD_INT 9999
61546: ST_TO_ADDR
// for i = 1 to hexes do
61547: LD_ADDR_VAR 0 4
61551: PUSH
61552: DOUBLE
61553: LD_INT 1
61555: DEC
61556: ST_TO_ADDR
61557: LD_VAR 0 2
61561: PUSH
61562: FOR_TO
61563: IFFALSE 61650
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
61565: LD_ADDR_VAR 0 6
61569: PUSH
61570: LD_VAR 0 1
61574: PPUSH
61575: LD_VAR 0 2
61579: PUSH
61580: LD_VAR 0 4
61584: ARRAY
61585: PUSH
61586: LD_INT 1
61588: ARRAY
61589: PPUSH
61590: LD_VAR 0 2
61594: PUSH
61595: LD_VAR 0 4
61599: ARRAY
61600: PUSH
61601: LD_INT 2
61603: ARRAY
61604: PPUSH
61605: CALL_OW 297
61609: ST_TO_ADDR
// if tdist < dist then
61610: LD_VAR 0 6
61614: PUSH
61615: LD_VAR 0 5
61619: LESS
61620: IFFALSE 61648
// begin hex := hexes [ i ] ;
61622: LD_ADDR_VAR 0 8
61626: PUSH
61627: LD_VAR 0 2
61631: PUSH
61632: LD_VAR 0 4
61636: ARRAY
61637: ST_TO_ADDR
// dist := tdist ;
61638: LD_ADDR_VAR 0 5
61642: PUSH
61643: LD_VAR 0 6
61647: ST_TO_ADDR
// end ; end ;
61648: GO 61562
61650: POP
61651: POP
// result := hex ;
61652: LD_ADDR_VAR 0 3
61656: PUSH
61657: LD_VAR 0 8
61661: ST_TO_ADDR
// end ;
61662: LD_VAR 0 3
61666: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
61667: LD_INT 0
61669: PPUSH
61670: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
61671: LD_VAR 0 1
61675: NOT
61676: PUSH
61677: LD_VAR 0 1
61681: PUSH
61682: LD_INT 21
61684: PUSH
61685: LD_INT 2
61687: PUSH
61688: EMPTY
61689: LIST
61690: LIST
61691: PUSH
61692: LD_INT 23
61694: PUSH
61695: LD_INT 2
61697: PUSH
61698: EMPTY
61699: LIST
61700: LIST
61701: PUSH
61702: EMPTY
61703: LIST
61704: LIST
61705: PPUSH
61706: CALL_OW 69
61710: IN
61711: NOT
61712: OR
61713: IFFALSE 61717
// exit ;
61715: GO 61764
// for i = 1 to 3 do
61717: LD_ADDR_VAR 0 3
61721: PUSH
61722: DOUBLE
61723: LD_INT 1
61725: DEC
61726: ST_TO_ADDR
61727: LD_INT 3
61729: PUSH
61730: FOR_TO
61731: IFFALSE 61762
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
61733: LD_VAR 0 1
61737: PPUSH
61738: CALL_OW 250
61742: PPUSH
61743: LD_VAR 0 1
61747: PPUSH
61748: CALL_OW 251
61752: PPUSH
61753: LD_INT 1
61755: PPUSH
61756: CALL_OW 453
61760: GO 61730
61762: POP
61763: POP
// end ;
61764: LD_VAR 0 2
61768: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
61769: LD_INT 0
61771: PPUSH
61772: PPUSH
61773: PPUSH
61774: PPUSH
61775: PPUSH
61776: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
61777: LD_VAR 0 1
61781: NOT
61782: PUSH
61783: LD_VAR 0 2
61787: NOT
61788: OR
61789: PUSH
61790: LD_VAR 0 1
61794: PPUSH
61795: CALL_OW 314
61799: OR
61800: IFFALSE 61804
// exit ;
61802: GO 62271
// if GetLives ( i ) < 250 then
61804: LD_VAR 0 4
61808: PPUSH
61809: CALL_OW 256
61813: PUSH
61814: LD_INT 250
61816: LESS
61817: IFFALSE 61830
// begin ComAutodestruct ( i ) ;
61819: LD_VAR 0 4
61823: PPUSH
61824: CALL 61667 0 1
// exit ;
61828: GO 62271
// end ; x := GetX ( enemy_unit ) ;
61830: LD_ADDR_VAR 0 7
61834: PUSH
61835: LD_VAR 0 2
61839: PPUSH
61840: CALL_OW 250
61844: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
61845: LD_ADDR_VAR 0 8
61849: PUSH
61850: LD_VAR 0 2
61854: PPUSH
61855: CALL_OW 251
61859: ST_TO_ADDR
// if not x or not y then
61860: LD_VAR 0 7
61864: NOT
61865: PUSH
61866: LD_VAR 0 8
61870: NOT
61871: OR
61872: IFFALSE 61876
// exit ;
61874: GO 62271
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
61876: LD_ADDR_VAR 0 6
61880: PUSH
61881: LD_VAR 0 7
61885: PPUSH
61886: LD_INT 0
61888: PPUSH
61889: LD_INT 4
61891: PPUSH
61892: CALL_OW 272
61896: PUSH
61897: LD_VAR 0 8
61901: PPUSH
61902: LD_INT 0
61904: PPUSH
61905: LD_INT 4
61907: PPUSH
61908: CALL_OW 273
61912: PUSH
61913: EMPTY
61914: LIST
61915: LIST
61916: PUSH
61917: LD_VAR 0 7
61921: PPUSH
61922: LD_INT 1
61924: PPUSH
61925: LD_INT 4
61927: PPUSH
61928: CALL_OW 272
61932: PUSH
61933: LD_VAR 0 8
61937: PPUSH
61938: LD_INT 1
61940: PPUSH
61941: LD_INT 4
61943: PPUSH
61944: CALL_OW 273
61948: PUSH
61949: EMPTY
61950: LIST
61951: LIST
61952: PUSH
61953: LD_VAR 0 7
61957: PPUSH
61958: LD_INT 2
61960: PPUSH
61961: LD_INT 4
61963: PPUSH
61964: CALL_OW 272
61968: PUSH
61969: LD_VAR 0 8
61973: PPUSH
61974: LD_INT 2
61976: PPUSH
61977: LD_INT 4
61979: PPUSH
61980: CALL_OW 273
61984: PUSH
61985: EMPTY
61986: LIST
61987: LIST
61988: PUSH
61989: LD_VAR 0 7
61993: PPUSH
61994: LD_INT 3
61996: PPUSH
61997: LD_INT 4
61999: PPUSH
62000: CALL_OW 272
62004: PUSH
62005: LD_VAR 0 8
62009: PPUSH
62010: LD_INT 3
62012: PPUSH
62013: LD_INT 4
62015: PPUSH
62016: CALL_OW 273
62020: PUSH
62021: EMPTY
62022: LIST
62023: LIST
62024: PUSH
62025: LD_VAR 0 7
62029: PPUSH
62030: LD_INT 4
62032: PPUSH
62033: LD_INT 4
62035: PPUSH
62036: CALL_OW 272
62040: PUSH
62041: LD_VAR 0 8
62045: PPUSH
62046: LD_INT 4
62048: PPUSH
62049: LD_INT 4
62051: PPUSH
62052: CALL_OW 273
62056: PUSH
62057: EMPTY
62058: LIST
62059: LIST
62060: PUSH
62061: LD_VAR 0 7
62065: PPUSH
62066: LD_INT 5
62068: PPUSH
62069: LD_INT 4
62071: PPUSH
62072: CALL_OW 272
62076: PUSH
62077: LD_VAR 0 8
62081: PPUSH
62082: LD_INT 5
62084: PPUSH
62085: LD_INT 4
62087: PPUSH
62088: CALL_OW 273
62092: PUSH
62093: EMPTY
62094: LIST
62095: LIST
62096: PUSH
62097: EMPTY
62098: LIST
62099: LIST
62100: LIST
62101: LIST
62102: LIST
62103: LIST
62104: ST_TO_ADDR
// for i = tmp downto 1 do
62105: LD_ADDR_VAR 0 4
62109: PUSH
62110: DOUBLE
62111: LD_VAR 0 6
62115: INC
62116: ST_TO_ADDR
62117: LD_INT 1
62119: PUSH
62120: FOR_DOWNTO
62121: IFFALSE 62222
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
62123: LD_VAR 0 6
62127: PUSH
62128: LD_VAR 0 4
62132: ARRAY
62133: PUSH
62134: LD_INT 1
62136: ARRAY
62137: PPUSH
62138: LD_VAR 0 6
62142: PUSH
62143: LD_VAR 0 4
62147: ARRAY
62148: PUSH
62149: LD_INT 2
62151: ARRAY
62152: PPUSH
62153: CALL_OW 488
62157: NOT
62158: PUSH
62159: LD_VAR 0 6
62163: PUSH
62164: LD_VAR 0 4
62168: ARRAY
62169: PUSH
62170: LD_INT 1
62172: ARRAY
62173: PPUSH
62174: LD_VAR 0 6
62178: PUSH
62179: LD_VAR 0 4
62183: ARRAY
62184: PUSH
62185: LD_INT 2
62187: ARRAY
62188: PPUSH
62189: CALL_OW 428
62193: PUSH
62194: LD_INT 0
62196: NONEQUAL
62197: OR
62198: IFFALSE 62220
// tmp := Delete ( tmp , i ) ;
62200: LD_ADDR_VAR 0 6
62204: PUSH
62205: LD_VAR 0 6
62209: PPUSH
62210: LD_VAR 0 4
62214: PPUSH
62215: CALL_OW 3
62219: ST_TO_ADDR
62220: GO 62120
62222: POP
62223: POP
// j := GetClosestHex ( unit , tmp ) ;
62224: LD_ADDR_VAR 0 5
62228: PUSH
62229: LD_VAR 0 1
62233: PPUSH
62234: LD_VAR 0 6
62238: PPUSH
62239: CALL 61515 0 2
62243: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
62244: LD_VAR 0 1
62248: PPUSH
62249: LD_VAR 0 5
62253: PUSH
62254: LD_INT 1
62256: ARRAY
62257: PPUSH
62258: LD_VAR 0 5
62262: PUSH
62263: LD_INT 2
62265: ARRAY
62266: PPUSH
62267: CALL_OW 111
// end ;
62271: LD_VAR 0 3
62275: RET
// export function PrepareApemanSoldier ( ) ; begin
62276: LD_INT 0
62278: PPUSH
// uc_nation := 0 ;
62279: LD_ADDR_OWVAR 21
62283: PUSH
62284: LD_INT 0
62286: ST_TO_ADDR
// hc_sex := sex_male ;
62287: LD_ADDR_OWVAR 27
62291: PUSH
62292: LD_INT 1
62294: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
62295: LD_ADDR_OWVAR 28
62299: PUSH
62300: LD_INT 15
62302: ST_TO_ADDR
// hc_gallery :=  ;
62303: LD_ADDR_OWVAR 33
62307: PUSH
62308: LD_STRING 
62310: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
62311: LD_ADDR_OWVAR 31
62315: PUSH
62316: LD_INT 0
62318: PPUSH
62319: LD_INT 3
62321: PPUSH
62322: CALL_OW 12
62326: PUSH
62327: LD_INT 0
62329: PPUSH
62330: LD_INT 3
62332: PPUSH
62333: CALL_OW 12
62337: PUSH
62338: LD_INT 0
62340: PUSH
62341: LD_INT 0
62343: PUSH
62344: EMPTY
62345: LIST
62346: LIST
62347: LIST
62348: LIST
62349: ST_TO_ADDR
// end ;
62350: LD_VAR 0 1
62354: RET
// export function PrepareApemanEngineer ( ) ; begin
62355: LD_INT 0
62357: PPUSH
// uc_nation := 0 ;
62358: LD_ADDR_OWVAR 21
62362: PUSH
62363: LD_INT 0
62365: ST_TO_ADDR
// hc_sex := sex_male ;
62366: LD_ADDR_OWVAR 27
62370: PUSH
62371: LD_INT 1
62373: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
62374: LD_ADDR_OWVAR 28
62378: PUSH
62379: LD_INT 16
62381: ST_TO_ADDR
// hc_gallery :=  ;
62382: LD_ADDR_OWVAR 33
62386: PUSH
62387: LD_STRING 
62389: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
62390: LD_ADDR_OWVAR 31
62394: PUSH
62395: LD_INT 0
62397: PPUSH
62398: LD_INT 3
62400: PPUSH
62401: CALL_OW 12
62405: PUSH
62406: LD_INT 0
62408: PPUSH
62409: LD_INT 3
62411: PPUSH
62412: CALL_OW 12
62416: PUSH
62417: LD_INT 0
62419: PUSH
62420: LD_INT 0
62422: PUSH
62423: EMPTY
62424: LIST
62425: LIST
62426: LIST
62427: LIST
62428: ST_TO_ADDR
// end ;
62429: LD_VAR 0 1
62433: RET
// export function PrepareApeman ( agressivity ) ; begin
62434: LD_INT 0
62436: PPUSH
// uc_side := 0 ;
62437: LD_ADDR_OWVAR 20
62441: PUSH
62442: LD_INT 0
62444: ST_TO_ADDR
// uc_nation := 0 ;
62445: LD_ADDR_OWVAR 21
62449: PUSH
62450: LD_INT 0
62452: ST_TO_ADDR
// hc_sex := sex_male ;
62453: LD_ADDR_OWVAR 27
62457: PUSH
62458: LD_INT 1
62460: ST_TO_ADDR
// hc_class := class_apeman ;
62461: LD_ADDR_OWVAR 28
62465: PUSH
62466: LD_INT 12
62468: ST_TO_ADDR
// hc_gallery :=  ;
62469: LD_ADDR_OWVAR 33
62473: PUSH
62474: LD_STRING 
62476: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
62477: LD_ADDR_OWVAR 35
62481: PUSH
62482: LD_VAR 0 1
62486: NEG
62487: PPUSH
62488: LD_VAR 0 1
62492: PPUSH
62493: CALL_OW 12
62497: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
62498: LD_ADDR_OWVAR 31
62502: PUSH
62503: LD_INT 0
62505: PPUSH
62506: LD_INT 3
62508: PPUSH
62509: CALL_OW 12
62513: PUSH
62514: LD_INT 0
62516: PPUSH
62517: LD_INT 3
62519: PPUSH
62520: CALL_OW 12
62524: PUSH
62525: LD_INT 0
62527: PUSH
62528: LD_INT 0
62530: PUSH
62531: EMPTY
62532: LIST
62533: LIST
62534: LIST
62535: LIST
62536: ST_TO_ADDR
// end ;
62537: LD_VAR 0 2
62541: RET
// export function PrepareTiger ( agressivity ) ; begin
62542: LD_INT 0
62544: PPUSH
// uc_side := 0 ;
62545: LD_ADDR_OWVAR 20
62549: PUSH
62550: LD_INT 0
62552: ST_TO_ADDR
// uc_nation := 0 ;
62553: LD_ADDR_OWVAR 21
62557: PUSH
62558: LD_INT 0
62560: ST_TO_ADDR
// hc_class := class_tiger ;
62561: LD_ADDR_OWVAR 28
62565: PUSH
62566: LD_INT 14
62568: ST_TO_ADDR
// hc_gallery :=  ;
62569: LD_ADDR_OWVAR 33
62573: PUSH
62574: LD_STRING 
62576: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
62577: LD_ADDR_OWVAR 35
62581: PUSH
62582: LD_VAR 0 1
62586: NEG
62587: PPUSH
62588: LD_VAR 0 1
62592: PPUSH
62593: CALL_OW 12
62597: ST_TO_ADDR
// end ;
62598: LD_VAR 0 2
62602: RET
// export function PrepareEnchidna ( ) ; begin
62603: LD_INT 0
62605: PPUSH
// uc_side := 0 ;
62606: LD_ADDR_OWVAR 20
62610: PUSH
62611: LD_INT 0
62613: ST_TO_ADDR
// uc_nation := 0 ;
62614: LD_ADDR_OWVAR 21
62618: PUSH
62619: LD_INT 0
62621: ST_TO_ADDR
// hc_class := class_baggie ;
62622: LD_ADDR_OWVAR 28
62626: PUSH
62627: LD_INT 13
62629: ST_TO_ADDR
// hc_gallery :=  ;
62630: LD_ADDR_OWVAR 33
62634: PUSH
62635: LD_STRING 
62637: ST_TO_ADDR
// end ;
62638: LD_VAR 0 1
62642: RET
// export function PrepareFrog ( ) ; begin
62643: LD_INT 0
62645: PPUSH
// uc_side := 0 ;
62646: LD_ADDR_OWVAR 20
62650: PUSH
62651: LD_INT 0
62653: ST_TO_ADDR
// uc_nation := 0 ;
62654: LD_ADDR_OWVAR 21
62658: PUSH
62659: LD_INT 0
62661: ST_TO_ADDR
// hc_class := class_frog ;
62662: LD_ADDR_OWVAR 28
62666: PUSH
62667: LD_INT 19
62669: ST_TO_ADDR
// hc_gallery :=  ;
62670: LD_ADDR_OWVAR 33
62674: PUSH
62675: LD_STRING 
62677: ST_TO_ADDR
// end ;
62678: LD_VAR 0 1
62682: RET
// export function PrepareFish ( ) ; begin
62683: LD_INT 0
62685: PPUSH
// uc_side := 0 ;
62686: LD_ADDR_OWVAR 20
62690: PUSH
62691: LD_INT 0
62693: ST_TO_ADDR
// uc_nation := 0 ;
62694: LD_ADDR_OWVAR 21
62698: PUSH
62699: LD_INT 0
62701: ST_TO_ADDR
// hc_class := class_fish ;
62702: LD_ADDR_OWVAR 28
62706: PUSH
62707: LD_INT 20
62709: ST_TO_ADDR
// hc_gallery :=  ;
62710: LD_ADDR_OWVAR 33
62714: PUSH
62715: LD_STRING 
62717: ST_TO_ADDR
// end ;
62718: LD_VAR 0 1
62722: RET
// export function PrepareBird ( ) ; begin
62723: LD_INT 0
62725: PPUSH
// uc_side := 0 ;
62726: LD_ADDR_OWVAR 20
62730: PUSH
62731: LD_INT 0
62733: ST_TO_ADDR
// uc_nation := 0 ;
62734: LD_ADDR_OWVAR 21
62738: PUSH
62739: LD_INT 0
62741: ST_TO_ADDR
// hc_class := class_phororhacos ;
62742: LD_ADDR_OWVAR 28
62746: PUSH
62747: LD_INT 18
62749: ST_TO_ADDR
// hc_gallery :=  ;
62750: LD_ADDR_OWVAR 33
62754: PUSH
62755: LD_STRING 
62757: ST_TO_ADDR
// end ;
62758: LD_VAR 0 1
62762: RET
// export function PrepareHorse ( ) ; begin
62763: LD_INT 0
62765: PPUSH
// uc_side := 0 ;
62766: LD_ADDR_OWVAR 20
62770: PUSH
62771: LD_INT 0
62773: ST_TO_ADDR
// uc_nation := 0 ;
62774: LD_ADDR_OWVAR 21
62778: PUSH
62779: LD_INT 0
62781: ST_TO_ADDR
// hc_class := class_horse ;
62782: LD_ADDR_OWVAR 28
62786: PUSH
62787: LD_INT 21
62789: ST_TO_ADDR
// hc_gallery :=  ;
62790: LD_ADDR_OWVAR 33
62794: PUSH
62795: LD_STRING 
62797: ST_TO_ADDR
// end ;
62798: LD_VAR 0 1
62802: RET
// export function PrepareMastodont ( ) ; begin
62803: LD_INT 0
62805: PPUSH
// uc_side := 0 ;
62806: LD_ADDR_OWVAR 20
62810: PUSH
62811: LD_INT 0
62813: ST_TO_ADDR
// uc_nation := 0 ;
62814: LD_ADDR_OWVAR 21
62818: PUSH
62819: LD_INT 0
62821: ST_TO_ADDR
// vc_chassis := class_mastodont ;
62822: LD_ADDR_OWVAR 37
62826: PUSH
62827: LD_INT 31
62829: ST_TO_ADDR
// vc_control := control_rider ;
62830: LD_ADDR_OWVAR 38
62834: PUSH
62835: LD_INT 4
62837: ST_TO_ADDR
// end ;
62838: LD_VAR 0 1
62842: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
62843: LD_INT 0
62845: PPUSH
62846: PPUSH
62847: PPUSH
// uc_side = 0 ;
62848: LD_ADDR_OWVAR 20
62852: PUSH
62853: LD_INT 0
62855: ST_TO_ADDR
// uc_nation = 0 ;
62856: LD_ADDR_OWVAR 21
62860: PUSH
62861: LD_INT 0
62863: ST_TO_ADDR
// InitHc_All ( ) ;
62864: CALL_OW 584
// InitVc ;
62868: CALL_OW 20
// if mastodonts then
62872: LD_VAR 0 6
62876: IFFALSE 62943
// for i = 1 to mastodonts do
62878: LD_ADDR_VAR 0 11
62882: PUSH
62883: DOUBLE
62884: LD_INT 1
62886: DEC
62887: ST_TO_ADDR
62888: LD_VAR 0 6
62892: PUSH
62893: FOR_TO
62894: IFFALSE 62941
// begin vc_chassis := 31 ;
62896: LD_ADDR_OWVAR 37
62900: PUSH
62901: LD_INT 31
62903: ST_TO_ADDR
// vc_control := control_rider ;
62904: LD_ADDR_OWVAR 38
62908: PUSH
62909: LD_INT 4
62911: ST_TO_ADDR
// animal := CreateVehicle ;
62912: LD_ADDR_VAR 0 12
62916: PUSH
62917: CALL_OW 45
62921: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62922: LD_VAR 0 12
62926: PPUSH
62927: LD_VAR 0 8
62931: PPUSH
62932: LD_INT 0
62934: PPUSH
62935: CALL 65071 0 3
// end ;
62939: GO 62893
62941: POP
62942: POP
// if horses then
62943: LD_VAR 0 5
62947: IFFALSE 63014
// for i = 1 to horses do
62949: LD_ADDR_VAR 0 11
62953: PUSH
62954: DOUBLE
62955: LD_INT 1
62957: DEC
62958: ST_TO_ADDR
62959: LD_VAR 0 5
62963: PUSH
62964: FOR_TO
62965: IFFALSE 63012
// begin hc_class := 21 ;
62967: LD_ADDR_OWVAR 28
62971: PUSH
62972: LD_INT 21
62974: ST_TO_ADDR
// hc_gallery :=  ;
62975: LD_ADDR_OWVAR 33
62979: PUSH
62980: LD_STRING 
62982: ST_TO_ADDR
// animal := CreateHuman ;
62983: LD_ADDR_VAR 0 12
62987: PUSH
62988: CALL_OW 44
62992: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62993: LD_VAR 0 12
62997: PPUSH
62998: LD_VAR 0 8
63002: PPUSH
63003: LD_INT 0
63005: PPUSH
63006: CALL 65071 0 3
// end ;
63010: GO 62964
63012: POP
63013: POP
// if birds then
63014: LD_VAR 0 1
63018: IFFALSE 63085
// for i = 1 to birds do
63020: LD_ADDR_VAR 0 11
63024: PUSH
63025: DOUBLE
63026: LD_INT 1
63028: DEC
63029: ST_TO_ADDR
63030: LD_VAR 0 1
63034: PUSH
63035: FOR_TO
63036: IFFALSE 63083
// begin hc_class := 18 ;
63038: LD_ADDR_OWVAR 28
63042: PUSH
63043: LD_INT 18
63045: ST_TO_ADDR
// hc_gallery =  ;
63046: LD_ADDR_OWVAR 33
63050: PUSH
63051: LD_STRING 
63053: ST_TO_ADDR
// animal := CreateHuman ;
63054: LD_ADDR_VAR 0 12
63058: PUSH
63059: CALL_OW 44
63063: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63064: LD_VAR 0 12
63068: PPUSH
63069: LD_VAR 0 8
63073: PPUSH
63074: LD_INT 0
63076: PPUSH
63077: CALL 65071 0 3
// end ;
63081: GO 63035
63083: POP
63084: POP
// if tigers then
63085: LD_VAR 0 2
63089: IFFALSE 63173
// for i = 1 to tigers do
63091: LD_ADDR_VAR 0 11
63095: PUSH
63096: DOUBLE
63097: LD_INT 1
63099: DEC
63100: ST_TO_ADDR
63101: LD_VAR 0 2
63105: PUSH
63106: FOR_TO
63107: IFFALSE 63171
// begin hc_class = class_tiger ;
63109: LD_ADDR_OWVAR 28
63113: PUSH
63114: LD_INT 14
63116: ST_TO_ADDR
// hc_gallery =  ;
63117: LD_ADDR_OWVAR 33
63121: PUSH
63122: LD_STRING 
63124: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
63125: LD_ADDR_OWVAR 35
63129: PUSH
63130: LD_INT 7
63132: NEG
63133: PPUSH
63134: LD_INT 7
63136: PPUSH
63137: CALL_OW 12
63141: ST_TO_ADDR
// animal := CreateHuman ;
63142: LD_ADDR_VAR 0 12
63146: PUSH
63147: CALL_OW 44
63151: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63152: LD_VAR 0 12
63156: PPUSH
63157: LD_VAR 0 8
63161: PPUSH
63162: LD_INT 0
63164: PPUSH
63165: CALL 65071 0 3
// end ;
63169: GO 63106
63171: POP
63172: POP
// if apemans then
63173: LD_VAR 0 3
63177: IFFALSE 63300
// for i = 1 to apemans do
63179: LD_ADDR_VAR 0 11
63183: PUSH
63184: DOUBLE
63185: LD_INT 1
63187: DEC
63188: ST_TO_ADDR
63189: LD_VAR 0 3
63193: PUSH
63194: FOR_TO
63195: IFFALSE 63298
// begin hc_class = class_apeman ;
63197: LD_ADDR_OWVAR 28
63201: PUSH
63202: LD_INT 12
63204: ST_TO_ADDR
// hc_gallery =  ;
63205: LD_ADDR_OWVAR 33
63209: PUSH
63210: LD_STRING 
63212: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
63213: LD_ADDR_OWVAR 35
63217: PUSH
63218: LD_INT 2
63220: NEG
63221: PPUSH
63222: LD_INT 2
63224: PPUSH
63225: CALL_OW 12
63229: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
63230: LD_ADDR_OWVAR 31
63234: PUSH
63235: LD_INT 1
63237: PPUSH
63238: LD_INT 3
63240: PPUSH
63241: CALL_OW 12
63245: PUSH
63246: LD_INT 1
63248: PPUSH
63249: LD_INT 3
63251: PPUSH
63252: CALL_OW 12
63256: PUSH
63257: LD_INT 0
63259: PUSH
63260: LD_INT 0
63262: PUSH
63263: EMPTY
63264: LIST
63265: LIST
63266: LIST
63267: LIST
63268: ST_TO_ADDR
// animal := CreateHuman ;
63269: LD_ADDR_VAR 0 12
63273: PUSH
63274: CALL_OW 44
63278: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63279: LD_VAR 0 12
63283: PPUSH
63284: LD_VAR 0 8
63288: PPUSH
63289: LD_INT 0
63291: PPUSH
63292: CALL 65071 0 3
// end ;
63296: GO 63194
63298: POP
63299: POP
// if enchidnas then
63300: LD_VAR 0 4
63304: IFFALSE 63371
// for i = 1 to enchidnas do
63306: LD_ADDR_VAR 0 11
63310: PUSH
63311: DOUBLE
63312: LD_INT 1
63314: DEC
63315: ST_TO_ADDR
63316: LD_VAR 0 4
63320: PUSH
63321: FOR_TO
63322: IFFALSE 63369
// begin hc_class = 13 ;
63324: LD_ADDR_OWVAR 28
63328: PUSH
63329: LD_INT 13
63331: ST_TO_ADDR
// hc_gallery =  ;
63332: LD_ADDR_OWVAR 33
63336: PUSH
63337: LD_STRING 
63339: ST_TO_ADDR
// animal := CreateHuman ;
63340: LD_ADDR_VAR 0 12
63344: PUSH
63345: CALL_OW 44
63349: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63350: LD_VAR 0 12
63354: PPUSH
63355: LD_VAR 0 8
63359: PPUSH
63360: LD_INT 0
63362: PPUSH
63363: CALL 65071 0 3
// end ;
63367: GO 63321
63369: POP
63370: POP
// if fishes then
63371: LD_VAR 0 7
63375: IFFALSE 63442
// for i = 1 to fishes do
63377: LD_ADDR_VAR 0 11
63381: PUSH
63382: DOUBLE
63383: LD_INT 1
63385: DEC
63386: ST_TO_ADDR
63387: LD_VAR 0 7
63391: PUSH
63392: FOR_TO
63393: IFFALSE 63440
// begin hc_class = 20 ;
63395: LD_ADDR_OWVAR 28
63399: PUSH
63400: LD_INT 20
63402: ST_TO_ADDR
// hc_gallery =  ;
63403: LD_ADDR_OWVAR 33
63407: PUSH
63408: LD_STRING 
63410: ST_TO_ADDR
// animal := CreateHuman ;
63411: LD_ADDR_VAR 0 12
63415: PUSH
63416: CALL_OW 44
63420: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
63421: LD_VAR 0 12
63425: PPUSH
63426: LD_VAR 0 9
63430: PPUSH
63431: LD_INT 0
63433: PPUSH
63434: CALL 65071 0 3
// end ;
63438: GO 63392
63440: POP
63441: POP
// end ;
63442: LD_VAR 0 10
63446: RET
// export function WantHeal ( sci , unit ) ; begin
63447: LD_INT 0
63449: PPUSH
// if GetTaskList ( sci ) > 0 then
63450: LD_VAR 0 1
63454: PPUSH
63455: CALL_OW 437
63459: PUSH
63460: LD_INT 0
63462: GREATER
63463: IFFALSE 63533
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
63465: LD_VAR 0 1
63469: PPUSH
63470: CALL_OW 437
63474: PUSH
63475: LD_INT 1
63477: ARRAY
63478: PUSH
63479: LD_INT 1
63481: ARRAY
63482: PUSH
63483: LD_STRING l
63485: EQUAL
63486: PUSH
63487: LD_VAR 0 1
63491: PPUSH
63492: CALL_OW 437
63496: PUSH
63497: LD_INT 1
63499: ARRAY
63500: PUSH
63501: LD_INT 4
63503: ARRAY
63504: PUSH
63505: LD_VAR 0 2
63509: EQUAL
63510: AND
63511: IFFALSE 63523
// result := true else
63513: LD_ADDR_VAR 0 3
63517: PUSH
63518: LD_INT 1
63520: ST_TO_ADDR
63521: GO 63531
// result := false ;
63523: LD_ADDR_VAR 0 3
63527: PUSH
63528: LD_INT 0
63530: ST_TO_ADDR
// end else
63531: GO 63541
// result := false ;
63533: LD_ADDR_VAR 0 3
63537: PUSH
63538: LD_INT 0
63540: ST_TO_ADDR
// end ;
63541: LD_VAR 0 3
63545: RET
// export function HealTarget ( sci ) ; begin
63546: LD_INT 0
63548: PPUSH
// if not sci then
63549: LD_VAR 0 1
63553: NOT
63554: IFFALSE 63558
// exit ;
63556: GO 63623
// result := 0 ;
63558: LD_ADDR_VAR 0 2
63562: PUSH
63563: LD_INT 0
63565: ST_TO_ADDR
// if GetTaskList ( sci ) then
63566: LD_VAR 0 1
63570: PPUSH
63571: CALL_OW 437
63575: IFFALSE 63623
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
63577: LD_VAR 0 1
63581: PPUSH
63582: CALL_OW 437
63586: PUSH
63587: LD_INT 1
63589: ARRAY
63590: PUSH
63591: LD_INT 1
63593: ARRAY
63594: PUSH
63595: LD_STRING l
63597: EQUAL
63598: IFFALSE 63623
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
63600: LD_ADDR_VAR 0 2
63604: PUSH
63605: LD_VAR 0 1
63609: PPUSH
63610: CALL_OW 437
63614: PUSH
63615: LD_INT 1
63617: ARRAY
63618: PUSH
63619: LD_INT 4
63621: ARRAY
63622: ST_TO_ADDR
// end ;
63623: LD_VAR 0 2
63627: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
63628: LD_INT 0
63630: PPUSH
63631: PPUSH
63632: PPUSH
63633: PPUSH
// if not base_units then
63634: LD_VAR 0 1
63638: NOT
63639: IFFALSE 63643
// exit ;
63641: GO 63730
// result := false ;
63643: LD_ADDR_VAR 0 2
63647: PUSH
63648: LD_INT 0
63650: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
63651: LD_ADDR_VAR 0 5
63655: PUSH
63656: LD_VAR 0 1
63660: PPUSH
63661: LD_INT 21
63663: PUSH
63664: LD_INT 3
63666: PUSH
63667: EMPTY
63668: LIST
63669: LIST
63670: PPUSH
63671: CALL_OW 72
63675: ST_TO_ADDR
// if not tmp then
63676: LD_VAR 0 5
63680: NOT
63681: IFFALSE 63685
// exit ;
63683: GO 63730
// for i in tmp do
63685: LD_ADDR_VAR 0 3
63689: PUSH
63690: LD_VAR 0 5
63694: PUSH
63695: FOR_IN
63696: IFFALSE 63728
// begin result := EnemyInRange ( i , 22 ) ;
63698: LD_ADDR_VAR 0 2
63702: PUSH
63703: LD_VAR 0 3
63707: PPUSH
63708: LD_INT 22
63710: PPUSH
63711: CALL 61317 0 2
63715: ST_TO_ADDR
// if result then
63716: LD_VAR 0 2
63720: IFFALSE 63726
// exit ;
63722: POP
63723: POP
63724: GO 63730
// end ;
63726: GO 63695
63728: POP
63729: POP
// end ;
63730: LD_VAR 0 2
63734: RET
// export function FilterByTag ( units , tag ) ; begin
63735: LD_INT 0
63737: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
63738: LD_ADDR_VAR 0 3
63742: PUSH
63743: LD_VAR 0 1
63747: PPUSH
63748: LD_INT 120
63750: PUSH
63751: LD_VAR 0 2
63755: PUSH
63756: EMPTY
63757: LIST
63758: LIST
63759: PPUSH
63760: CALL_OW 72
63764: ST_TO_ADDR
// end ;
63765: LD_VAR 0 3
63769: RET
// export function IsDriver ( un ) ; begin
63770: LD_INT 0
63772: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
63773: LD_ADDR_VAR 0 2
63777: PUSH
63778: LD_VAR 0 1
63782: PUSH
63783: LD_INT 55
63785: PUSH
63786: EMPTY
63787: LIST
63788: PPUSH
63789: CALL_OW 69
63793: IN
63794: ST_TO_ADDR
// end ;
63795: LD_VAR 0 2
63799: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
63800: LD_INT 0
63802: PPUSH
63803: PPUSH
// list := [ ] ;
63804: LD_ADDR_VAR 0 5
63808: PUSH
63809: EMPTY
63810: ST_TO_ADDR
// case d of 0 :
63811: LD_VAR 0 3
63815: PUSH
63816: LD_INT 0
63818: DOUBLE
63819: EQUAL
63820: IFTRUE 63824
63822: GO 63957
63824: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
63825: LD_ADDR_VAR 0 5
63829: PUSH
63830: LD_VAR 0 1
63834: PUSH
63835: LD_INT 4
63837: MINUS
63838: PUSH
63839: LD_VAR 0 2
63843: PUSH
63844: LD_INT 4
63846: MINUS
63847: PUSH
63848: LD_INT 2
63850: PUSH
63851: EMPTY
63852: LIST
63853: LIST
63854: LIST
63855: PUSH
63856: LD_VAR 0 1
63860: PUSH
63861: LD_INT 3
63863: MINUS
63864: PUSH
63865: LD_VAR 0 2
63869: PUSH
63870: LD_INT 1
63872: PUSH
63873: EMPTY
63874: LIST
63875: LIST
63876: LIST
63877: PUSH
63878: LD_VAR 0 1
63882: PUSH
63883: LD_INT 4
63885: PLUS
63886: PUSH
63887: LD_VAR 0 2
63891: PUSH
63892: LD_INT 4
63894: PUSH
63895: EMPTY
63896: LIST
63897: LIST
63898: LIST
63899: PUSH
63900: LD_VAR 0 1
63904: PUSH
63905: LD_INT 3
63907: PLUS
63908: PUSH
63909: LD_VAR 0 2
63913: PUSH
63914: LD_INT 3
63916: PLUS
63917: PUSH
63918: LD_INT 5
63920: PUSH
63921: EMPTY
63922: LIST
63923: LIST
63924: LIST
63925: PUSH
63926: LD_VAR 0 1
63930: PUSH
63931: LD_VAR 0 2
63935: PUSH
63936: LD_INT 4
63938: PLUS
63939: PUSH
63940: LD_INT 0
63942: PUSH
63943: EMPTY
63944: LIST
63945: LIST
63946: LIST
63947: PUSH
63948: EMPTY
63949: LIST
63950: LIST
63951: LIST
63952: LIST
63953: LIST
63954: ST_TO_ADDR
// end ; 1 :
63955: GO 64655
63957: LD_INT 1
63959: DOUBLE
63960: EQUAL
63961: IFTRUE 63965
63963: GO 64098
63965: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
63966: LD_ADDR_VAR 0 5
63970: PUSH
63971: LD_VAR 0 1
63975: PUSH
63976: LD_VAR 0 2
63980: PUSH
63981: LD_INT 4
63983: MINUS
63984: PUSH
63985: LD_INT 3
63987: PUSH
63988: EMPTY
63989: LIST
63990: LIST
63991: LIST
63992: PUSH
63993: LD_VAR 0 1
63997: PUSH
63998: LD_INT 3
64000: MINUS
64001: PUSH
64002: LD_VAR 0 2
64006: PUSH
64007: LD_INT 3
64009: MINUS
64010: PUSH
64011: LD_INT 2
64013: PUSH
64014: EMPTY
64015: LIST
64016: LIST
64017: LIST
64018: PUSH
64019: LD_VAR 0 1
64023: PUSH
64024: LD_INT 4
64026: MINUS
64027: PUSH
64028: LD_VAR 0 2
64032: PUSH
64033: LD_INT 1
64035: PUSH
64036: EMPTY
64037: LIST
64038: LIST
64039: LIST
64040: PUSH
64041: LD_VAR 0 1
64045: PUSH
64046: LD_VAR 0 2
64050: PUSH
64051: LD_INT 3
64053: PLUS
64054: PUSH
64055: LD_INT 0
64057: PUSH
64058: EMPTY
64059: LIST
64060: LIST
64061: LIST
64062: PUSH
64063: LD_VAR 0 1
64067: PUSH
64068: LD_INT 4
64070: PLUS
64071: PUSH
64072: LD_VAR 0 2
64076: PUSH
64077: LD_INT 4
64079: PLUS
64080: PUSH
64081: LD_INT 5
64083: PUSH
64084: EMPTY
64085: LIST
64086: LIST
64087: LIST
64088: PUSH
64089: EMPTY
64090: LIST
64091: LIST
64092: LIST
64093: LIST
64094: LIST
64095: ST_TO_ADDR
// end ; 2 :
64096: GO 64655
64098: LD_INT 2
64100: DOUBLE
64101: EQUAL
64102: IFTRUE 64106
64104: GO 64235
64106: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
64107: LD_ADDR_VAR 0 5
64111: PUSH
64112: LD_VAR 0 1
64116: PUSH
64117: LD_VAR 0 2
64121: PUSH
64122: LD_INT 3
64124: MINUS
64125: PUSH
64126: LD_INT 3
64128: PUSH
64129: EMPTY
64130: LIST
64131: LIST
64132: LIST
64133: PUSH
64134: LD_VAR 0 1
64138: PUSH
64139: LD_INT 4
64141: PLUS
64142: PUSH
64143: LD_VAR 0 2
64147: PUSH
64148: LD_INT 4
64150: PUSH
64151: EMPTY
64152: LIST
64153: LIST
64154: LIST
64155: PUSH
64156: LD_VAR 0 1
64160: PUSH
64161: LD_VAR 0 2
64165: PUSH
64166: LD_INT 4
64168: PLUS
64169: PUSH
64170: LD_INT 0
64172: PUSH
64173: EMPTY
64174: LIST
64175: LIST
64176: LIST
64177: PUSH
64178: LD_VAR 0 1
64182: PUSH
64183: LD_INT 3
64185: MINUS
64186: PUSH
64187: LD_VAR 0 2
64191: PUSH
64192: LD_INT 1
64194: PUSH
64195: EMPTY
64196: LIST
64197: LIST
64198: LIST
64199: PUSH
64200: LD_VAR 0 1
64204: PUSH
64205: LD_INT 4
64207: MINUS
64208: PUSH
64209: LD_VAR 0 2
64213: PUSH
64214: LD_INT 4
64216: MINUS
64217: PUSH
64218: LD_INT 2
64220: PUSH
64221: EMPTY
64222: LIST
64223: LIST
64224: LIST
64225: PUSH
64226: EMPTY
64227: LIST
64228: LIST
64229: LIST
64230: LIST
64231: LIST
64232: ST_TO_ADDR
// end ; 3 :
64233: GO 64655
64235: LD_INT 3
64237: DOUBLE
64238: EQUAL
64239: IFTRUE 64243
64241: GO 64376
64243: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
64244: LD_ADDR_VAR 0 5
64248: PUSH
64249: LD_VAR 0 1
64253: PUSH
64254: LD_INT 3
64256: PLUS
64257: PUSH
64258: LD_VAR 0 2
64262: PUSH
64263: LD_INT 4
64265: PUSH
64266: EMPTY
64267: LIST
64268: LIST
64269: LIST
64270: PUSH
64271: LD_VAR 0 1
64275: PUSH
64276: LD_INT 4
64278: PLUS
64279: PUSH
64280: LD_VAR 0 2
64284: PUSH
64285: LD_INT 4
64287: PLUS
64288: PUSH
64289: LD_INT 5
64291: PUSH
64292: EMPTY
64293: LIST
64294: LIST
64295: LIST
64296: PUSH
64297: LD_VAR 0 1
64301: PUSH
64302: LD_INT 4
64304: MINUS
64305: PUSH
64306: LD_VAR 0 2
64310: PUSH
64311: LD_INT 1
64313: PUSH
64314: EMPTY
64315: LIST
64316: LIST
64317: LIST
64318: PUSH
64319: LD_VAR 0 1
64323: PUSH
64324: LD_VAR 0 2
64328: PUSH
64329: LD_INT 4
64331: MINUS
64332: PUSH
64333: LD_INT 3
64335: PUSH
64336: EMPTY
64337: LIST
64338: LIST
64339: LIST
64340: PUSH
64341: LD_VAR 0 1
64345: PUSH
64346: LD_INT 3
64348: MINUS
64349: PUSH
64350: LD_VAR 0 2
64354: PUSH
64355: LD_INT 3
64357: MINUS
64358: PUSH
64359: LD_INT 2
64361: PUSH
64362: EMPTY
64363: LIST
64364: LIST
64365: LIST
64366: PUSH
64367: EMPTY
64368: LIST
64369: LIST
64370: LIST
64371: LIST
64372: LIST
64373: ST_TO_ADDR
// end ; 4 :
64374: GO 64655
64376: LD_INT 4
64378: DOUBLE
64379: EQUAL
64380: IFTRUE 64384
64382: GO 64517
64384: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
64385: LD_ADDR_VAR 0 5
64389: PUSH
64390: LD_VAR 0 1
64394: PUSH
64395: LD_VAR 0 2
64399: PUSH
64400: LD_INT 4
64402: PLUS
64403: PUSH
64404: LD_INT 0
64406: PUSH
64407: EMPTY
64408: LIST
64409: LIST
64410: LIST
64411: PUSH
64412: LD_VAR 0 1
64416: PUSH
64417: LD_INT 3
64419: PLUS
64420: PUSH
64421: LD_VAR 0 2
64425: PUSH
64426: LD_INT 3
64428: PLUS
64429: PUSH
64430: LD_INT 5
64432: PUSH
64433: EMPTY
64434: LIST
64435: LIST
64436: LIST
64437: PUSH
64438: LD_VAR 0 1
64442: PUSH
64443: LD_INT 4
64445: PLUS
64446: PUSH
64447: LD_VAR 0 2
64451: PUSH
64452: LD_INT 4
64454: PUSH
64455: EMPTY
64456: LIST
64457: LIST
64458: LIST
64459: PUSH
64460: LD_VAR 0 1
64464: PUSH
64465: LD_VAR 0 2
64469: PUSH
64470: LD_INT 3
64472: MINUS
64473: PUSH
64474: LD_INT 3
64476: PUSH
64477: EMPTY
64478: LIST
64479: LIST
64480: LIST
64481: PUSH
64482: LD_VAR 0 1
64486: PUSH
64487: LD_INT 4
64489: MINUS
64490: PUSH
64491: LD_VAR 0 2
64495: PUSH
64496: LD_INT 4
64498: MINUS
64499: PUSH
64500: LD_INT 2
64502: PUSH
64503: EMPTY
64504: LIST
64505: LIST
64506: LIST
64507: PUSH
64508: EMPTY
64509: LIST
64510: LIST
64511: LIST
64512: LIST
64513: LIST
64514: ST_TO_ADDR
// end ; 5 :
64515: GO 64655
64517: LD_INT 5
64519: DOUBLE
64520: EQUAL
64521: IFTRUE 64525
64523: GO 64654
64525: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
64526: LD_ADDR_VAR 0 5
64530: PUSH
64531: LD_VAR 0 1
64535: PUSH
64536: LD_INT 4
64538: MINUS
64539: PUSH
64540: LD_VAR 0 2
64544: PUSH
64545: LD_INT 1
64547: PUSH
64548: EMPTY
64549: LIST
64550: LIST
64551: LIST
64552: PUSH
64553: LD_VAR 0 1
64557: PUSH
64558: LD_VAR 0 2
64562: PUSH
64563: LD_INT 4
64565: MINUS
64566: PUSH
64567: LD_INT 3
64569: PUSH
64570: EMPTY
64571: LIST
64572: LIST
64573: LIST
64574: PUSH
64575: LD_VAR 0 1
64579: PUSH
64580: LD_INT 4
64582: PLUS
64583: PUSH
64584: LD_VAR 0 2
64588: PUSH
64589: LD_INT 4
64591: PLUS
64592: PUSH
64593: LD_INT 5
64595: PUSH
64596: EMPTY
64597: LIST
64598: LIST
64599: LIST
64600: PUSH
64601: LD_VAR 0 1
64605: PUSH
64606: LD_INT 3
64608: PLUS
64609: PUSH
64610: LD_VAR 0 2
64614: PUSH
64615: LD_INT 4
64617: PUSH
64618: EMPTY
64619: LIST
64620: LIST
64621: LIST
64622: PUSH
64623: LD_VAR 0 1
64627: PUSH
64628: LD_VAR 0 2
64632: PUSH
64633: LD_INT 3
64635: PLUS
64636: PUSH
64637: LD_INT 0
64639: PUSH
64640: EMPTY
64641: LIST
64642: LIST
64643: LIST
64644: PUSH
64645: EMPTY
64646: LIST
64647: LIST
64648: LIST
64649: LIST
64650: LIST
64651: ST_TO_ADDR
// end ; end ;
64652: GO 64655
64654: POP
// result := list ;
64655: LD_ADDR_VAR 0 4
64659: PUSH
64660: LD_VAR 0 5
64664: ST_TO_ADDR
// end ;
64665: LD_VAR 0 4
64669: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
64670: LD_INT 0
64672: PPUSH
64673: PPUSH
64674: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
64675: LD_VAR 0 1
64679: NOT
64680: PUSH
64681: LD_VAR 0 2
64685: PUSH
64686: LD_INT 1
64688: PUSH
64689: LD_INT 2
64691: PUSH
64692: LD_INT 3
64694: PUSH
64695: LD_INT 4
64697: PUSH
64698: EMPTY
64699: LIST
64700: LIST
64701: LIST
64702: LIST
64703: IN
64704: NOT
64705: OR
64706: IFFALSE 64710
// exit ;
64708: GO 64793
// tmp := [ ] ;
64710: LD_ADDR_VAR 0 5
64714: PUSH
64715: EMPTY
64716: ST_TO_ADDR
// for i in units do
64717: LD_ADDR_VAR 0 4
64721: PUSH
64722: LD_VAR 0 1
64726: PUSH
64727: FOR_IN
64728: IFFALSE 64762
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
64730: LD_ADDR_VAR 0 5
64734: PUSH
64735: LD_VAR 0 5
64739: PPUSH
64740: LD_VAR 0 4
64744: PPUSH
64745: LD_VAR 0 2
64749: PPUSH
64750: CALL_OW 259
64754: PPUSH
64755: CALL 66153 0 2
64759: ST_TO_ADDR
64760: GO 64727
64762: POP
64763: POP
// if not tmp then
64764: LD_VAR 0 5
64768: NOT
64769: IFFALSE 64773
// exit ;
64771: GO 64793
// result := SortListByListDesc ( units , tmp ) ;
64773: LD_ADDR_VAR 0 3
64777: PUSH
64778: LD_VAR 0 1
64782: PPUSH
64783: LD_VAR 0 5
64787: PPUSH
64788: CALL_OW 77
64792: ST_TO_ADDR
// end ;
64793: LD_VAR 0 3
64797: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
64798: LD_INT 0
64800: PPUSH
64801: PPUSH
64802: PPUSH
// result := false ;
64803: LD_ADDR_VAR 0 3
64807: PUSH
64808: LD_INT 0
64810: ST_TO_ADDR
// if not building then
64811: LD_VAR 0 2
64815: NOT
64816: IFFALSE 64820
// exit ;
64818: GO 64958
// x := GetX ( building ) ;
64820: LD_ADDR_VAR 0 4
64824: PUSH
64825: LD_VAR 0 2
64829: PPUSH
64830: CALL_OW 250
64834: ST_TO_ADDR
// y := GetY ( building ) ;
64835: LD_ADDR_VAR 0 5
64839: PUSH
64840: LD_VAR 0 2
64844: PPUSH
64845: CALL_OW 251
64849: ST_TO_ADDR
// if not x or not y then
64850: LD_VAR 0 4
64854: NOT
64855: PUSH
64856: LD_VAR 0 5
64860: NOT
64861: OR
64862: IFFALSE 64866
// exit ;
64864: GO 64958
// if GetTaskList ( unit ) then
64866: LD_VAR 0 1
64870: PPUSH
64871: CALL_OW 437
64875: IFFALSE 64958
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
64877: LD_STRING e
64879: PUSH
64880: LD_VAR 0 1
64884: PPUSH
64885: CALL_OW 437
64889: PUSH
64890: LD_INT 1
64892: ARRAY
64893: PUSH
64894: LD_INT 1
64896: ARRAY
64897: EQUAL
64898: PUSH
64899: LD_VAR 0 4
64903: PUSH
64904: LD_VAR 0 1
64908: PPUSH
64909: CALL_OW 437
64913: PUSH
64914: LD_INT 1
64916: ARRAY
64917: PUSH
64918: LD_INT 2
64920: ARRAY
64921: EQUAL
64922: AND
64923: PUSH
64924: LD_VAR 0 5
64928: PUSH
64929: LD_VAR 0 1
64933: PPUSH
64934: CALL_OW 437
64938: PUSH
64939: LD_INT 1
64941: ARRAY
64942: PUSH
64943: LD_INT 3
64945: ARRAY
64946: EQUAL
64947: AND
64948: IFFALSE 64958
// result := true end ;
64950: LD_ADDR_VAR 0 3
64954: PUSH
64955: LD_INT 1
64957: ST_TO_ADDR
// end ;
64958: LD_VAR 0 3
64962: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
64963: LD_INT 0
64965: PPUSH
// result := false ;
64966: LD_ADDR_VAR 0 4
64970: PUSH
64971: LD_INT 0
64973: ST_TO_ADDR
// if GetTaskList ( unit ) then
64974: LD_VAR 0 1
64978: PPUSH
64979: CALL_OW 437
64983: IFFALSE 65066
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
64985: LD_STRING M
64987: PUSH
64988: LD_VAR 0 1
64992: PPUSH
64993: CALL_OW 437
64997: PUSH
64998: LD_INT 1
65000: ARRAY
65001: PUSH
65002: LD_INT 1
65004: ARRAY
65005: EQUAL
65006: PUSH
65007: LD_VAR 0 2
65011: PUSH
65012: LD_VAR 0 1
65016: PPUSH
65017: CALL_OW 437
65021: PUSH
65022: LD_INT 1
65024: ARRAY
65025: PUSH
65026: LD_INT 2
65028: ARRAY
65029: EQUAL
65030: AND
65031: PUSH
65032: LD_VAR 0 3
65036: PUSH
65037: LD_VAR 0 1
65041: PPUSH
65042: CALL_OW 437
65046: PUSH
65047: LD_INT 1
65049: ARRAY
65050: PUSH
65051: LD_INT 3
65053: ARRAY
65054: EQUAL
65055: AND
65056: IFFALSE 65066
// result := true ;
65058: LD_ADDR_VAR 0 4
65062: PUSH
65063: LD_INT 1
65065: ST_TO_ADDR
// end ; end ;
65066: LD_VAR 0 4
65070: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
65071: LD_INT 0
65073: PPUSH
65074: PPUSH
65075: PPUSH
65076: PPUSH
// if not unit or not area then
65077: LD_VAR 0 1
65081: NOT
65082: PUSH
65083: LD_VAR 0 2
65087: NOT
65088: OR
65089: IFFALSE 65093
// exit ;
65091: GO 65256
// tmp := AreaToList ( area , i ) ;
65093: LD_ADDR_VAR 0 6
65097: PUSH
65098: LD_VAR 0 2
65102: PPUSH
65103: LD_VAR 0 5
65107: PPUSH
65108: CALL_OW 517
65112: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
65113: LD_ADDR_VAR 0 5
65117: PUSH
65118: DOUBLE
65119: LD_INT 1
65121: DEC
65122: ST_TO_ADDR
65123: LD_VAR 0 6
65127: PUSH
65128: LD_INT 1
65130: ARRAY
65131: PUSH
65132: FOR_TO
65133: IFFALSE 65254
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
65135: LD_ADDR_VAR 0 7
65139: PUSH
65140: LD_VAR 0 6
65144: PUSH
65145: LD_INT 1
65147: ARRAY
65148: PUSH
65149: LD_VAR 0 5
65153: ARRAY
65154: PUSH
65155: LD_VAR 0 6
65159: PUSH
65160: LD_INT 2
65162: ARRAY
65163: PUSH
65164: LD_VAR 0 5
65168: ARRAY
65169: PUSH
65170: EMPTY
65171: LIST
65172: LIST
65173: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 3 ] ) = 0 then
65174: LD_INT 92
65176: PUSH
65177: LD_VAR 0 7
65181: PUSH
65182: LD_INT 1
65184: ARRAY
65185: PUSH
65186: LD_VAR 0 7
65190: PUSH
65191: LD_INT 2
65193: ARRAY
65194: PUSH
65195: LD_INT 3
65197: PUSH
65198: EMPTY
65199: LIST
65200: LIST
65201: LIST
65202: LIST
65203: PPUSH
65204: CALL_OW 69
65208: PUSH
65209: LD_INT 0
65211: EQUAL
65212: IFFALSE 65252
// begin PlaceUnitArea ( unit , area , mode ) ;
65214: LD_VAR 0 1
65218: PPUSH
65219: LD_VAR 0 2
65223: PPUSH
65224: LD_VAR 0 3
65228: PPUSH
65229: CALL_OW 49
// result := IsPlaced ( unit ) ;
65233: LD_ADDR_VAR 0 4
65237: PUSH
65238: LD_VAR 0 1
65242: PPUSH
65243: CALL_OW 305
65247: ST_TO_ADDR
// exit ;
65248: POP
65249: POP
65250: GO 65256
// end ; end ;
65252: GO 65132
65254: POP
65255: POP
// end ;
65256: LD_VAR 0 4
65260: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
65261: LD_INT 0
65263: PPUSH
65264: PPUSH
65265: PPUSH
// if not side or side > 8 then
65266: LD_VAR 0 1
65270: NOT
65271: PUSH
65272: LD_VAR 0 1
65276: PUSH
65277: LD_INT 8
65279: GREATER
65280: OR
65281: IFFALSE 65285
// exit ;
65283: GO 65472
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
65285: LD_ADDR_VAR 0 4
65289: PUSH
65290: LD_INT 22
65292: PUSH
65293: LD_VAR 0 1
65297: PUSH
65298: EMPTY
65299: LIST
65300: LIST
65301: PUSH
65302: LD_INT 21
65304: PUSH
65305: LD_INT 3
65307: PUSH
65308: EMPTY
65309: LIST
65310: LIST
65311: PUSH
65312: EMPTY
65313: LIST
65314: LIST
65315: PPUSH
65316: CALL_OW 69
65320: ST_TO_ADDR
// if not tmp then
65321: LD_VAR 0 4
65325: NOT
65326: IFFALSE 65330
// exit ;
65328: GO 65472
// enable_addtolog := true ;
65330: LD_ADDR_OWVAR 81
65334: PUSH
65335: LD_INT 1
65337: ST_TO_ADDR
// AddToLog ( [ ) ;
65338: LD_STRING [
65340: PPUSH
65341: CALL_OW 561
// for i in tmp do
65345: LD_ADDR_VAR 0 3
65349: PUSH
65350: LD_VAR 0 4
65354: PUSH
65355: FOR_IN
65356: IFFALSE 65463
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
65358: LD_STRING [
65360: PUSH
65361: LD_VAR 0 3
65365: PPUSH
65366: CALL_OW 266
65370: STR
65371: PUSH
65372: LD_STRING , 
65374: STR
65375: PUSH
65376: LD_VAR 0 3
65380: PPUSH
65381: CALL_OW 250
65385: STR
65386: PUSH
65387: LD_STRING , 
65389: STR
65390: PUSH
65391: LD_VAR 0 3
65395: PPUSH
65396: CALL_OW 251
65400: STR
65401: PUSH
65402: LD_STRING , 
65404: STR
65405: PUSH
65406: LD_VAR 0 3
65410: PPUSH
65411: CALL_OW 254
65415: STR
65416: PUSH
65417: LD_STRING , 
65419: STR
65420: PUSH
65421: LD_VAR 0 3
65425: PPUSH
65426: LD_INT 1
65428: PPUSH
65429: CALL_OW 268
65433: STR
65434: PUSH
65435: LD_STRING , 
65437: STR
65438: PUSH
65439: LD_VAR 0 3
65443: PPUSH
65444: LD_INT 2
65446: PPUSH
65447: CALL_OW 268
65451: STR
65452: PUSH
65453: LD_STRING ],
65455: STR
65456: PPUSH
65457: CALL_OW 561
// end ;
65461: GO 65355
65463: POP
65464: POP
// AddToLog ( ]; ) ;
65465: LD_STRING ];
65467: PPUSH
65468: CALL_OW 561
// end ;
65472: LD_VAR 0 2
65476: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
65477: LD_INT 0
65479: PPUSH
65480: PPUSH
65481: PPUSH
65482: PPUSH
65483: PPUSH
// if not area or not rate or not max then
65484: LD_VAR 0 1
65488: NOT
65489: PUSH
65490: LD_VAR 0 2
65494: NOT
65495: OR
65496: PUSH
65497: LD_VAR 0 4
65501: NOT
65502: OR
65503: IFFALSE 65507
// exit ;
65505: GO 65696
// while 1 do
65507: LD_INT 1
65509: IFFALSE 65696
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
65511: LD_ADDR_VAR 0 9
65515: PUSH
65516: LD_VAR 0 1
65520: PPUSH
65521: LD_INT 1
65523: PPUSH
65524: CALL_OW 287
65528: PUSH
65529: LD_INT 10
65531: MUL
65532: ST_TO_ADDR
// r := rate / 10 ;
65533: LD_ADDR_VAR 0 7
65537: PUSH
65538: LD_VAR 0 2
65542: PUSH
65543: LD_INT 10
65545: DIVREAL
65546: ST_TO_ADDR
// time := 1 1$00 ;
65547: LD_ADDR_VAR 0 8
65551: PUSH
65552: LD_INT 2100
65554: ST_TO_ADDR
// if amount < min then
65555: LD_VAR 0 9
65559: PUSH
65560: LD_VAR 0 3
65564: LESS
65565: IFFALSE 65583
// r := r * 2 else
65567: LD_ADDR_VAR 0 7
65571: PUSH
65572: LD_VAR 0 7
65576: PUSH
65577: LD_INT 2
65579: MUL
65580: ST_TO_ADDR
65581: GO 65609
// if amount > max then
65583: LD_VAR 0 9
65587: PUSH
65588: LD_VAR 0 4
65592: GREATER
65593: IFFALSE 65609
// r := r / 2 ;
65595: LD_ADDR_VAR 0 7
65599: PUSH
65600: LD_VAR 0 7
65604: PUSH
65605: LD_INT 2
65607: DIVREAL
65608: ST_TO_ADDR
// time := time / r ;
65609: LD_ADDR_VAR 0 8
65613: PUSH
65614: LD_VAR 0 8
65618: PUSH
65619: LD_VAR 0 7
65623: DIVREAL
65624: ST_TO_ADDR
// if time < 0 then
65625: LD_VAR 0 8
65629: PUSH
65630: LD_INT 0
65632: LESS
65633: IFFALSE 65650
// time := time * - 1 ;
65635: LD_ADDR_VAR 0 8
65639: PUSH
65640: LD_VAR 0 8
65644: PUSH
65645: LD_INT 1
65647: NEG
65648: MUL
65649: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
65650: LD_VAR 0 8
65654: PUSH
65655: LD_INT 35
65657: PPUSH
65658: LD_INT 875
65660: PPUSH
65661: CALL_OW 12
65665: PLUS
65666: PPUSH
65667: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
65671: LD_INT 1
65673: PPUSH
65674: LD_INT 5
65676: PPUSH
65677: CALL_OW 12
65681: PPUSH
65682: LD_VAR 0 1
65686: PPUSH
65687: LD_INT 1
65689: PPUSH
65690: CALL_OW 55
// end ;
65694: GO 65507
// end ;
65696: LD_VAR 0 5
65700: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
65701: LD_INT 0
65703: PPUSH
65704: PPUSH
65705: PPUSH
65706: PPUSH
65707: PPUSH
65708: PPUSH
65709: PPUSH
65710: PPUSH
// if not turrets or not factories then
65711: LD_VAR 0 1
65715: NOT
65716: PUSH
65717: LD_VAR 0 2
65721: NOT
65722: OR
65723: IFFALSE 65727
// exit ;
65725: GO 66034
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
65727: LD_ADDR_VAR 0 10
65731: PUSH
65732: LD_INT 5
65734: PUSH
65735: LD_INT 6
65737: PUSH
65738: EMPTY
65739: LIST
65740: LIST
65741: PUSH
65742: LD_INT 2
65744: PUSH
65745: LD_INT 4
65747: PUSH
65748: EMPTY
65749: LIST
65750: LIST
65751: PUSH
65752: LD_INT 3
65754: PUSH
65755: LD_INT 5
65757: PUSH
65758: EMPTY
65759: LIST
65760: LIST
65761: PUSH
65762: EMPTY
65763: LIST
65764: LIST
65765: LIST
65766: PUSH
65767: LD_INT 24
65769: PUSH
65770: LD_INT 25
65772: PUSH
65773: EMPTY
65774: LIST
65775: LIST
65776: PUSH
65777: LD_INT 23
65779: PUSH
65780: LD_INT 27
65782: PUSH
65783: EMPTY
65784: LIST
65785: LIST
65786: PUSH
65787: EMPTY
65788: LIST
65789: LIST
65790: PUSH
65791: LD_INT 42
65793: PUSH
65794: LD_INT 43
65796: PUSH
65797: EMPTY
65798: LIST
65799: LIST
65800: PUSH
65801: LD_INT 44
65803: PUSH
65804: LD_INT 46
65806: PUSH
65807: EMPTY
65808: LIST
65809: LIST
65810: PUSH
65811: LD_INT 45
65813: PUSH
65814: LD_INT 47
65816: PUSH
65817: EMPTY
65818: LIST
65819: LIST
65820: PUSH
65821: EMPTY
65822: LIST
65823: LIST
65824: LIST
65825: PUSH
65826: EMPTY
65827: LIST
65828: LIST
65829: LIST
65830: ST_TO_ADDR
// result := [ ] ;
65831: LD_ADDR_VAR 0 3
65835: PUSH
65836: EMPTY
65837: ST_TO_ADDR
// for i in turrets do
65838: LD_ADDR_VAR 0 4
65842: PUSH
65843: LD_VAR 0 1
65847: PUSH
65848: FOR_IN
65849: IFFALSE 66032
// begin nat := GetNation ( i ) ;
65851: LD_ADDR_VAR 0 7
65855: PUSH
65856: LD_VAR 0 4
65860: PPUSH
65861: CALL_OW 248
65865: ST_TO_ADDR
// weapon := 0 ;
65866: LD_ADDR_VAR 0 8
65870: PUSH
65871: LD_INT 0
65873: ST_TO_ADDR
// if not nat then
65874: LD_VAR 0 7
65878: NOT
65879: IFFALSE 65883
// continue ;
65881: GO 65848
// for j in list [ nat ] do
65883: LD_ADDR_VAR 0 5
65887: PUSH
65888: LD_VAR 0 10
65892: PUSH
65893: LD_VAR 0 7
65897: ARRAY
65898: PUSH
65899: FOR_IN
65900: IFFALSE 65941
// if GetBWeapon ( i ) = j [ 1 ] then
65902: LD_VAR 0 4
65906: PPUSH
65907: CALL_OW 269
65911: PUSH
65912: LD_VAR 0 5
65916: PUSH
65917: LD_INT 1
65919: ARRAY
65920: EQUAL
65921: IFFALSE 65939
// begin weapon := j [ 2 ] ;
65923: LD_ADDR_VAR 0 8
65927: PUSH
65928: LD_VAR 0 5
65932: PUSH
65933: LD_INT 2
65935: ARRAY
65936: ST_TO_ADDR
// break ;
65937: GO 65941
// end ;
65939: GO 65899
65941: POP
65942: POP
// if not weapon then
65943: LD_VAR 0 8
65947: NOT
65948: IFFALSE 65952
// continue ;
65950: GO 65848
// for k in factories do
65952: LD_ADDR_VAR 0 6
65956: PUSH
65957: LD_VAR 0 2
65961: PUSH
65962: FOR_IN
65963: IFFALSE 66028
// begin weapons := AvailableWeaponList ( k ) ;
65965: LD_ADDR_VAR 0 9
65969: PUSH
65970: LD_VAR 0 6
65974: PPUSH
65975: CALL_OW 478
65979: ST_TO_ADDR
// if not weapons then
65980: LD_VAR 0 9
65984: NOT
65985: IFFALSE 65989
// continue ;
65987: GO 65962
// if weapon in weapons then
65989: LD_VAR 0 8
65993: PUSH
65994: LD_VAR 0 9
65998: IN
65999: IFFALSE 66026
// begin result := [ i , weapon ] ;
66001: LD_ADDR_VAR 0 3
66005: PUSH
66006: LD_VAR 0 4
66010: PUSH
66011: LD_VAR 0 8
66015: PUSH
66016: EMPTY
66017: LIST
66018: LIST
66019: ST_TO_ADDR
// exit ;
66020: POP
66021: POP
66022: POP
66023: POP
66024: GO 66034
// end ; end ;
66026: GO 65962
66028: POP
66029: POP
// end ;
66030: GO 65848
66032: POP
66033: POP
// end ;
66034: LD_VAR 0 3
66038: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
66039: LD_INT 0
66041: PPUSH
// if not side or side > 8 then
66042: LD_VAR 0 3
66046: NOT
66047: PUSH
66048: LD_VAR 0 3
66052: PUSH
66053: LD_INT 8
66055: GREATER
66056: OR
66057: IFFALSE 66061
// exit ;
66059: GO 66120
// if not range then
66061: LD_VAR 0 4
66065: NOT
66066: IFFALSE 66077
// range := - 12 ;
66068: LD_ADDR_VAR 0 4
66072: PUSH
66073: LD_INT 12
66075: NEG
66076: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
66077: LD_VAR 0 1
66081: PPUSH
66082: LD_VAR 0 2
66086: PPUSH
66087: LD_VAR 0 3
66091: PPUSH
66092: LD_VAR 0 4
66096: PPUSH
66097: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
66101: LD_VAR 0 1
66105: PPUSH
66106: LD_VAR 0 2
66110: PPUSH
66111: LD_VAR 0 3
66115: PPUSH
66116: CALL_OW 331
// end ;
66120: LD_VAR 0 5
66124: RET
// export function Video ( mode ) ; begin
66125: LD_INT 0
66127: PPUSH
// ingame_video = mode ;
66128: LD_ADDR_OWVAR 52
66132: PUSH
66133: LD_VAR 0 1
66137: ST_TO_ADDR
// interface_hidden = mode ;
66138: LD_ADDR_OWVAR 54
66142: PUSH
66143: LD_VAR 0 1
66147: ST_TO_ADDR
// end ;
66148: LD_VAR 0 2
66152: RET
// export function Join ( array , element ) ; begin
66153: LD_INT 0
66155: PPUSH
// result := Replace ( array , array + 1 , element ) ;
66156: LD_ADDR_VAR 0 3
66160: PUSH
66161: LD_VAR 0 1
66165: PPUSH
66166: LD_VAR 0 1
66170: PUSH
66171: LD_INT 1
66173: PLUS
66174: PPUSH
66175: LD_VAR 0 2
66179: PPUSH
66180: CALL_OW 1
66184: ST_TO_ADDR
// end ;
66185: LD_VAR 0 3
66189: RET
// export function JoinUnion ( array , element ) ; begin
66190: LD_INT 0
66192: PPUSH
// result := array union element ;
66193: LD_ADDR_VAR 0 3
66197: PUSH
66198: LD_VAR 0 1
66202: PUSH
66203: LD_VAR 0 2
66207: UNION
66208: ST_TO_ADDR
// end ;
66209: LD_VAR 0 3
66213: RET
// export function GetBehemoths ( side ) ; begin
66214: LD_INT 0
66216: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
66217: LD_ADDR_VAR 0 2
66221: PUSH
66222: LD_INT 22
66224: PUSH
66225: LD_VAR 0 1
66229: PUSH
66230: EMPTY
66231: LIST
66232: LIST
66233: PUSH
66234: LD_INT 31
66236: PUSH
66237: LD_INT 25
66239: PUSH
66240: EMPTY
66241: LIST
66242: LIST
66243: PUSH
66244: EMPTY
66245: LIST
66246: LIST
66247: PPUSH
66248: CALL_OW 69
66252: ST_TO_ADDR
// end ;
66253: LD_VAR 0 2
66257: RET
// export function Shuffle ( array ) ; var i , index ; begin
66258: LD_INT 0
66260: PPUSH
66261: PPUSH
66262: PPUSH
// result := [ ] ;
66263: LD_ADDR_VAR 0 2
66267: PUSH
66268: EMPTY
66269: ST_TO_ADDR
// if not array then
66270: LD_VAR 0 1
66274: NOT
66275: IFFALSE 66279
// exit ;
66277: GO 66378
// Randomize ;
66279: CALL_OW 10
// for i = array downto 1 do
66283: LD_ADDR_VAR 0 3
66287: PUSH
66288: DOUBLE
66289: LD_VAR 0 1
66293: INC
66294: ST_TO_ADDR
66295: LD_INT 1
66297: PUSH
66298: FOR_DOWNTO
66299: IFFALSE 66376
// begin index := rand ( 1 , array ) ;
66301: LD_ADDR_VAR 0 4
66305: PUSH
66306: LD_INT 1
66308: PPUSH
66309: LD_VAR 0 1
66313: PPUSH
66314: CALL_OW 12
66318: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
66319: LD_ADDR_VAR 0 2
66323: PUSH
66324: LD_VAR 0 2
66328: PPUSH
66329: LD_VAR 0 2
66333: PUSH
66334: LD_INT 1
66336: PLUS
66337: PPUSH
66338: LD_VAR 0 1
66342: PUSH
66343: LD_VAR 0 4
66347: ARRAY
66348: PPUSH
66349: CALL_OW 2
66353: ST_TO_ADDR
// array := Delete ( array , index ) ;
66354: LD_ADDR_VAR 0 1
66358: PUSH
66359: LD_VAR 0 1
66363: PPUSH
66364: LD_VAR 0 4
66368: PPUSH
66369: CALL_OW 3
66373: ST_TO_ADDR
// end ;
66374: GO 66298
66376: POP
66377: POP
// end ;
66378: LD_VAR 0 2
66382: RET
// export function GetBaseMaterials ( base ) ; begin
66383: LD_INT 0
66385: PPUSH
// result := [ 0 , 0 , 0 ] ;
66386: LD_ADDR_VAR 0 2
66390: PUSH
66391: LD_INT 0
66393: PUSH
66394: LD_INT 0
66396: PUSH
66397: LD_INT 0
66399: PUSH
66400: EMPTY
66401: LIST
66402: LIST
66403: LIST
66404: ST_TO_ADDR
// if not base then
66405: LD_VAR 0 1
66409: NOT
66410: IFFALSE 66414
// exit ;
66412: GO 66463
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
66414: LD_ADDR_VAR 0 2
66418: PUSH
66419: LD_VAR 0 1
66423: PPUSH
66424: LD_INT 1
66426: PPUSH
66427: CALL_OW 275
66431: PUSH
66432: LD_VAR 0 1
66436: PPUSH
66437: LD_INT 2
66439: PPUSH
66440: CALL_OW 275
66444: PUSH
66445: LD_VAR 0 1
66449: PPUSH
66450: LD_INT 3
66452: PPUSH
66453: CALL_OW 275
66457: PUSH
66458: EMPTY
66459: LIST
66460: LIST
66461: LIST
66462: ST_TO_ADDR
// end ;
66463: LD_VAR 0 2
66467: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
66468: LD_INT 0
66470: PPUSH
66471: PPUSH
// result := array ;
66472: LD_ADDR_VAR 0 3
66476: PUSH
66477: LD_VAR 0 1
66481: ST_TO_ADDR
// if size >= result then
66482: LD_VAR 0 2
66486: PUSH
66487: LD_VAR 0 3
66491: GREATEREQUAL
66492: IFFALSE 66496
// exit ;
66494: GO 66546
// if size then
66496: LD_VAR 0 2
66500: IFFALSE 66546
// for i := array downto size do
66502: LD_ADDR_VAR 0 4
66506: PUSH
66507: DOUBLE
66508: LD_VAR 0 1
66512: INC
66513: ST_TO_ADDR
66514: LD_VAR 0 2
66518: PUSH
66519: FOR_DOWNTO
66520: IFFALSE 66544
// result := Delete ( result , result ) ;
66522: LD_ADDR_VAR 0 3
66526: PUSH
66527: LD_VAR 0 3
66531: PPUSH
66532: LD_VAR 0 3
66536: PPUSH
66537: CALL_OW 3
66541: ST_TO_ADDR
66542: GO 66519
66544: POP
66545: POP
// end ;
66546: LD_VAR 0 3
66550: RET
// export function ComExit ( unit ) ; var tmp ; begin
66551: LD_INT 0
66553: PPUSH
66554: PPUSH
// if not IsInUnit ( unit ) then
66555: LD_VAR 0 1
66559: PPUSH
66560: CALL_OW 310
66564: NOT
66565: IFFALSE 66569
// exit ;
66567: GO 66629
// tmp := IsInUnit ( unit ) ;
66569: LD_ADDR_VAR 0 3
66573: PUSH
66574: LD_VAR 0 1
66578: PPUSH
66579: CALL_OW 310
66583: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
66584: LD_VAR 0 3
66588: PPUSH
66589: CALL_OW 247
66593: PUSH
66594: LD_INT 2
66596: EQUAL
66597: IFFALSE 66610
// ComExitVehicle ( unit ) else
66599: LD_VAR 0 1
66603: PPUSH
66604: CALL_OW 121
66608: GO 66619
// ComExitBuilding ( unit ) ;
66610: LD_VAR 0 1
66614: PPUSH
66615: CALL_OW 122
// result := tmp ;
66619: LD_ADDR_VAR 0 2
66623: PUSH
66624: LD_VAR 0 3
66628: ST_TO_ADDR
// end ;
66629: LD_VAR 0 2
66633: RET
// export function ComExitAll ( units ) ; var i ; begin
66634: LD_INT 0
66636: PPUSH
66637: PPUSH
// if not units then
66638: LD_VAR 0 1
66642: NOT
66643: IFFALSE 66647
// exit ;
66645: GO 66673
// for i in units do
66647: LD_ADDR_VAR 0 3
66651: PUSH
66652: LD_VAR 0 1
66656: PUSH
66657: FOR_IN
66658: IFFALSE 66671
// ComExit ( i ) ;
66660: LD_VAR 0 3
66664: PPUSH
66665: CALL 66551 0 1
66669: GO 66657
66671: POP
66672: POP
// end ;
66673: LD_VAR 0 2
66677: RET
// export function ResetHc ; begin
66678: LD_INT 0
66680: PPUSH
// InitHc ;
66681: CALL_OW 19
// hc_importance := 0 ;
66685: LD_ADDR_OWVAR 32
66689: PUSH
66690: LD_INT 0
66692: ST_TO_ADDR
// end ;
66693: LD_VAR 0 1
66697: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
66698: LD_INT 0
66700: PPUSH
66701: PPUSH
66702: PPUSH
// _x := ( x1 + x2 ) div 2 ;
66703: LD_ADDR_VAR 0 6
66707: PUSH
66708: LD_VAR 0 1
66712: PUSH
66713: LD_VAR 0 3
66717: PLUS
66718: PUSH
66719: LD_INT 2
66721: DIV
66722: ST_TO_ADDR
// if _x < 0 then
66723: LD_VAR 0 6
66727: PUSH
66728: LD_INT 0
66730: LESS
66731: IFFALSE 66748
// _x := _x * - 1 ;
66733: LD_ADDR_VAR 0 6
66737: PUSH
66738: LD_VAR 0 6
66742: PUSH
66743: LD_INT 1
66745: NEG
66746: MUL
66747: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
66748: LD_ADDR_VAR 0 7
66752: PUSH
66753: LD_VAR 0 2
66757: PUSH
66758: LD_VAR 0 4
66762: PLUS
66763: PUSH
66764: LD_INT 2
66766: DIV
66767: ST_TO_ADDR
// if _y < 0 then
66768: LD_VAR 0 7
66772: PUSH
66773: LD_INT 0
66775: LESS
66776: IFFALSE 66793
// _y := _y * - 1 ;
66778: LD_ADDR_VAR 0 7
66782: PUSH
66783: LD_VAR 0 7
66787: PUSH
66788: LD_INT 1
66790: NEG
66791: MUL
66792: ST_TO_ADDR
// result := [ _x , _y ] ;
66793: LD_ADDR_VAR 0 5
66797: PUSH
66798: LD_VAR 0 6
66802: PUSH
66803: LD_VAR 0 7
66807: PUSH
66808: EMPTY
66809: LIST
66810: LIST
66811: ST_TO_ADDR
// end ;
66812: LD_VAR 0 5
66816: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
66817: LD_INT 0
66819: PPUSH
66820: PPUSH
66821: PPUSH
66822: PPUSH
// task := GetTaskList ( unit ) ;
66823: LD_ADDR_VAR 0 7
66827: PUSH
66828: LD_VAR 0 1
66832: PPUSH
66833: CALL_OW 437
66837: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
66838: LD_VAR 0 7
66842: NOT
66843: PUSH
66844: LD_VAR 0 1
66848: PPUSH
66849: LD_VAR 0 2
66853: PPUSH
66854: CALL_OW 308
66858: NOT
66859: AND
66860: IFFALSE 66864
// exit ;
66862: GO 66982
// if IsInArea ( unit , area ) then
66864: LD_VAR 0 1
66868: PPUSH
66869: LD_VAR 0 2
66873: PPUSH
66874: CALL_OW 308
66878: IFFALSE 66896
// begin ComMoveToArea ( unit , goAway ) ;
66880: LD_VAR 0 1
66884: PPUSH
66885: LD_VAR 0 3
66889: PPUSH
66890: CALL_OW 113
// exit ;
66894: GO 66982
// end ; if task [ 1 ] [ 1 ] <> M then
66896: LD_VAR 0 7
66900: PUSH
66901: LD_INT 1
66903: ARRAY
66904: PUSH
66905: LD_INT 1
66907: ARRAY
66908: PUSH
66909: LD_STRING M
66911: NONEQUAL
66912: IFFALSE 66916
// exit ;
66914: GO 66982
// x := task [ 1 ] [ 2 ] ;
66916: LD_ADDR_VAR 0 5
66920: PUSH
66921: LD_VAR 0 7
66925: PUSH
66926: LD_INT 1
66928: ARRAY
66929: PUSH
66930: LD_INT 2
66932: ARRAY
66933: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
66934: LD_ADDR_VAR 0 6
66938: PUSH
66939: LD_VAR 0 7
66943: PUSH
66944: LD_INT 1
66946: ARRAY
66947: PUSH
66948: LD_INT 3
66950: ARRAY
66951: ST_TO_ADDR
// if InArea ( x , y , area ) then
66952: LD_VAR 0 5
66956: PPUSH
66957: LD_VAR 0 6
66961: PPUSH
66962: LD_VAR 0 2
66966: PPUSH
66967: CALL_OW 309
66971: IFFALSE 66982
// ComStop ( unit ) ;
66973: LD_VAR 0 1
66977: PPUSH
66978: CALL_OW 141
// end ;
66982: LD_VAR 0 4
66986: RET
// export function Abs ( value ) ; begin
66987: LD_INT 0
66989: PPUSH
// result := value ;
66990: LD_ADDR_VAR 0 2
66994: PUSH
66995: LD_VAR 0 1
66999: ST_TO_ADDR
// if value < 0 then
67000: LD_VAR 0 1
67004: PUSH
67005: LD_INT 0
67007: LESS
67008: IFFALSE 67025
// result := value * - 1 ;
67010: LD_ADDR_VAR 0 2
67014: PUSH
67015: LD_VAR 0 1
67019: PUSH
67020: LD_INT 1
67022: NEG
67023: MUL
67024: ST_TO_ADDR
// end ;
67025: LD_VAR 0 2
67029: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
67030: LD_INT 0
67032: PPUSH
67033: PPUSH
67034: PPUSH
67035: PPUSH
67036: PPUSH
67037: PPUSH
67038: PPUSH
67039: PPUSH
// if not unit or not building then
67040: LD_VAR 0 1
67044: NOT
67045: PUSH
67046: LD_VAR 0 2
67050: NOT
67051: OR
67052: IFFALSE 67056
// exit ;
67054: GO 67282
// x := GetX ( building ) ;
67056: LD_ADDR_VAR 0 4
67060: PUSH
67061: LD_VAR 0 2
67065: PPUSH
67066: CALL_OW 250
67070: ST_TO_ADDR
// y := GetY ( building ) ;
67071: LD_ADDR_VAR 0 6
67075: PUSH
67076: LD_VAR 0 2
67080: PPUSH
67081: CALL_OW 251
67085: ST_TO_ADDR
// d := GetDir ( building ) ;
67086: LD_ADDR_VAR 0 8
67090: PUSH
67091: LD_VAR 0 2
67095: PPUSH
67096: CALL_OW 254
67100: ST_TO_ADDR
// r := 4 ;
67101: LD_ADDR_VAR 0 9
67105: PUSH
67106: LD_INT 4
67108: ST_TO_ADDR
// for i := 1 to 5 do
67109: LD_ADDR_VAR 0 10
67113: PUSH
67114: DOUBLE
67115: LD_INT 1
67117: DEC
67118: ST_TO_ADDR
67119: LD_INT 5
67121: PUSH
67122: FOR_TO
67123: IFFALSE 67280
// begin _x := ShiftX ( x , d , r + i ) ;
67125: LD_ADDR_VAR 0 5
67129: PUSH
67130: LD_VAR 0 4
67134: PPUSH
67135: LD_VAR 0 8
67139: PPUSH
67140: LD_VAR 0 9
67144: PUSH
67145: LD_VAR 0 10
67149: PLUS
67150: PPUSH
67151: CALL_OW 272
67155: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
67156: LD_ADDR_VAR 0 7
67160: PUSH
67161: LD_VAR 0 6
67165: PPUSH
67166: LD_VAR 0 8
67170: PPUSH
67171: LD_VAR 0 9
67175: PUSH
67176: LD_VAR 0 10
67180: PLUS
67181: PPUSH
67182: CALL_OW 273
67186: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
67187: LD_VAR 0 5
67191: PPUSH
67192: LD_VAR 0 7
67196: PPUSH
67197: CALL_OW 488
67201: PUSH
67202: LD_VAR 0 5
67206: PPUSH
67207: LD_VAR 0 7
67211: PPUSH
67212: CALL_OW 428
67216: PPUSH
67217: CALL_OW 247
67221: PUSH
67222: LD_INT 3
67224: PUSH
67225: LD_INT 2
67227: PUSH
67228: EMPTY
67229: LIST
67230: LIST
67231: IN
67232: NOT
67233: AND
67234: IFFALSE 67278
// begin ComMoveXY ( unit , _x , _y ) ;
67236: LD_VAR 0 1
67240: PPUSH
67241: LD_VAR 0 5
67245: PPUSH
67246: LD_VAR 0 7
67250: PPUSH
67251: CALL_OW 111
// result := [ _x , _y ] ;
67255: LD_ADDR_VAR 0 3
67259: PUSH
67260: LD_VAR 0 5
67264: PUSH
67265: LD_VAR 0 7
67269: PUSH
67270: EMPTY
67271: LIST
67272: LIST
67273: ST_TO_ADDR
// exit ;
67274: POP
67275: POP
67276: GO 67282
// end ; end ;
67278: GO 67122
67280: POP
67281: POP
// end ;
67282: LD_VAR 0 3
67286: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
67287: LD_INT 0
67289: PPUSH
67290: PPUSH
67291: PPUSH
// result := 0 ;
67292: LD_ADDR_VAR 0 3
67296: PUSH
67297: LD_INT 0
67299: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
67300: LD_VAR 0 1
67304: PUSH
67305: LD_INT 0
67307: LESS
67308: PUSH
67309: LD_VAR 0 1
67313: PUSH
67314: LD_INT 8
67316: GREATER
67317: OR
67318: PUSH
67319: LD_VAR 0 2
67323: PUSH
67324: LD_INT 0
67326: LESS
67327: OR
67328: PUSH
67329: LD_VAR 0 2
67333: PUSH
67334: LD_INT 8
67336: GREATER
67337: OR
67338: IFFALSE 67342
// exit ;
67340: GO 67417
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
67342: LD_ADDR_VAR 0 4
67346: PUSH
67347: LD_INT 22
67349: PUSH
67350: LD_VAR 0 2
67354: PUSH
67355: EMPTY
67356: LIST
67357: LIST
67358: PPUSH
67359: CALL_OW 69
67363: PUSH
67364: FOR_IN
67365: IFFALSE 67415
// begin un := UnitShoot ( i ) ;
67367: LD_ADDR_VAR 0 5
67371: PUSH
67372: LD_VAR 0 4
67376: PPUSH
67377: CALL_OW 504
67381: ST_TO_ADDR
// if GetSide ( un ) = side1 then
67382: LD_VAR 0 5
67386: PPUSH
67387: CALL_OW 255
67391: PUSH
67392: LD_VAR 0 1
67396: EQUAL
67397: IFFALSE 67413
// begin result := un ;
67399: LD_ADDR_VAR 0 3
67403: PUSH
67404: LD_VAR 0 5
67408: ST_TO_ADDR
// exit ;
67409: POP
67410: POP
67411: GO 67417
// end ; end ;
67413: GO 67364
67415: POP
67416: POP
// end ;
67417: LD_VAR 0 3
67421: RET
// export function GetCargoBay ( units ) ; begin
67422: LD_INT 0
67424: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
67425: LD_ADDR_VAR 0 2
67429: PUSH
67430: LD_VAR 0 1
67434: PPUSH
67435: LD_INT 2
67437: PUSH
67438: LD_INT 34
67440: PUSH
67441: LD_INT 12
67443: PUSH
67444: EMPTY
67445: LIST
67446: LIST
67447: PUSH
67448: LD_INT 34
67450: PUSH
67451: LD_INT 51
67453: PUSH
67454: EMPTY
67455: LIST
67456: LIST
67457: PUSH
67458: LD_INT 34
67460: PUSH
67461: LD_INT 32
67463: PUSH
67464: EMPTY
67465: LIST
67466: LIST
67467: PUSH
67468: LD_INT 34
67470: PUSH
67471: LD_INT 89
67473: PUSH
67474: EMPTY
67475: LIST
67476: LIST
67477: PUSH
67478: EMPTY
67479: LIST
67480: LIST
67481: LIST
67482: LIST
67483: LIST
67484: PPUSH
67485: CALL_OW 72
67489: ST_TO_ADDR
// end ;
67490: LD_VAR 0 2
67494: RET
// export function Negate ( value ) ; begin
67495: LD_INT 0
67497: PPUSH
// result := not value ;
67498: LD_ADDR_VAR 0 2
67502: PUSH
67503: LD_VAR 0 1
67507: NOT
67508: ST_TO_ADDR
// end ;
67509: LD_VAR 0 2
67513: RET
// export function Inc ( value ) ; begin
67514: LD_INT 0
67516: PPUSH
// result := value + 1 ;
67517: LD_ADDR_VAR 0 2
67521: PUSH
67522: LD_VAR 0 1
67526: PUSH
67527: LD_INT 1
67529: PLUS
67530: ST_TO_ADDR
// end ;
67531: LD_VAR 0 2
67535: RET
// export function Dec ( value ) ; begin
67536: LD_INT 0
67538: PPUSH
// result := value - 1 ;
67539: LD_ADDR_VAR 0 2
67543: PUSH
67544: LD_VAR 0 1
67548: PUSH
67549: LD_INT 1
67551: MINUS
67552: ST_TO_ADDR
// end ;
67553: LD_VAR 0 2
67557: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
67558: LD_INT 0
67560: PPUSH
67561: PPUSH
67562: PPUSH
67563: PPUSH
67564: PPUSH
67565: PPUSH
67566: PPUSH
67567: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
67568: LD_VAR 0 1
67572: PPUSH
67573: LD_VAR 0 2
67577: PPUSH
67578: CALL_OW 488
67582: NOT
67583: PUSH
67584: LD_VAR 0 3
67588: PPUSH
67589: LD_VAR 0 4
67593: PPUSH
67594: CALL_OW 488
67598: NOT
67599: OR
67600: IFFALSE 67613
// begin result := - 1 ;
67602: LD_ADDR_VAR 0 5
67606: PUSH
67607: LD_INT 1
67609: NEG
67610: ST_TO_ADDR
// exit ;
67611: GO 67848
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
67613: LD_ADDR_VAR 0 12
67617: PUSH
67618: LD_VAR 0 1
67622: PPUSH
67623: LD_VAR 0 2
67627: PPUSH
67628: LD_VAR 0 3
67632: PPUSH
67633: LD_VAR 0 4
67637: PPUSH
67638: CALL 66698 0 4
67642: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
67643: LD_ADDR_VAR 0 11
67647: PUSH
67648: LD_VAR 0 1
67652: PPUSH
67653: LD_VAR 0 2
67657: PPUSH
67658: LD_VAR 0 12
67662: PUSH
67663: LD_INT 1
67665: ARRAY
67666: PPUSH
67667: LD_VAR 0 12
67671: PUSH
67672: LD_INT 2
67674: ARRAY
67675: PPUSH
67676: CALL_OW 298
67680: ST_TO_ADDR
// distance := 9999 ;
67681: LD_ADDR_VAR 0 10
67685: PUSH
67686: LD_INT 9999
67688: ST_TO_ADDR
// for i := 0 to 5 do
67689: LD_ADDR_VAR 0 6
67693: PUSH
67694: DOUBLE
67695: LD_INT 0
67697: DEC
67698: ST_TO_ADDR
67699: LD_INT 5
67701: PUSH
67702: FOR_TO
67703: IFFALSE 67846
// begin _x := ShiftX ( x1 , i , centerDist ) ;
67705: LD_ADDR_VAR 0 7
67709: PUSH
67710: LD_VAR 0 1
67714: PPUSH
67715: LD_VAR 0 6
67719: PPUSH
67720: LD_VAR 0 11
67724: PPUSH
67725: CALL_OW 272
67729: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
67730: LD_ADDR_VAR 0 8
67734: PUSH
67735: LD_VAR 0 2
67739: PPUSH
67740: LD_VAR 0 6
67744: PPUSH
67745: LD_VAR 0 11
67749: PPUSH
67750: CALL_OW 273
67754: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
67755: LD_VAR 0 7
67759: PPUSH
67760: LD_VAR 0 8
67764: PPUSH
67765: CALL_OW 488
67769: NOT
67770: IFFALSE 67774
// continue ;
67772: GO 67702
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
67774: LD_ADDR_VAR 0 9
67778: PUSH
67779: LD_VAR 0 12
67783: PUSH
67784: LD_INT 1
67786: ARRAY
67787: PPUSH
67788: LD_VAR 0 12
67792: PUSH
67793: LD_INT 2
67795: ARRAY
67796: PPUSH
67797: LD_VAR 0 7
67801: PPUSH
67802: LD_VAR 0 8
67806: PPUSH
67807: CALL_OW 298
67811: ST_TO_ADDR
// if tmp < distance then
67812: LD_VAR 0 9
67816: PUSH
67817: LD_VAR 0 10
67821: LESS
67822: IFFALSE 67844
// begin result := i ;
67824: LD_ADDR_VAR 0 5
67828: PUSH
67829: LD_VAR 0 6
67833: ST_TO_ADDR
// distance := tmp ;
67834: LD_ADDR_VAR 0 10
67838: PUSH
67839: LD_VAR 0 9
67843: ST_TO_ADDR
// end ; end ;
67844: GO 67702
67846: POP
67847: POP
// end ;
67848: LD_VAR 0 5
67852: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
67853: LD_INT 0
67855: PPUSH
67856: PPUSH
// if not driver or not IsInUnit ( driver ) then
67857: LD_VAR 0 1
67861: NOT
67862: PUSH
67863: LD_VAR 0 1
67867: PPUSH
67868: CALL_OW 310
67872: NOT
67873: OR
67874: IFFALSE 67878
// exit ;
67876: GO 67968
// vehicle := IsInUnit ( driver ) ;
67878: LD_ADDR_VAR 0 3
67882: PUSH
67883: LD_VAR 0 1
67887: PPUSH
67888: CALL_OW 310
67892: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
67893: LD_VAR 0 1
67897: PPUSH
67898: LD_STRING \
67900: PUSH
67901: LD_INT 0
67903: PUSH
67904: LD_INT 0
67906: PUSH
67907: LD_INT 0
67909: PUSH
67910: LD_INT 0
67912: PUSH
67913: LD_INT 0
67915: PUSH
67916: LD_INT 0
67918: PUSH
67919: EMPTY
67920: LIST
67921: LIST
67922: LIST
67923: LIST
67924: LIST
67925: LIST
67926: LIST
67927: PUSH
67928: LD_STRING E
67930: PUSH
67931: LD_INT 0
67933: PUSH
67934: LD_INT 0
67936: PUSH
67937: LD_VAR 0 3
67941: PUSH
67942: LD_INT 0
67944: PUSH
67945: LD_INT 0
67947: PUSH
67948: LD_INT 0
67950: PUSH
67951: EMPTY
67952: LIST
67953: LIST
67954: LIST
67955: LIST
67956: LIST
67957: LIST
67958: LIST
67959: PUSH
67960: EMPTY
67961: LIST
67962: LIST
67963: PPUSH
67964: CALL_OW 446
// end ;
67968: LD_VAR 0 2
67972: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
67973: LD_INT 0
67975: PPUSH
67976: PPUSH
// if not driver or not IsInUnit ( driver ) then
67977: LD_VAR 0 1
67981: NOT
67982: PUSH
67983: LD_VAR 0 1
67987: PPUSH
67988: CALL_OW 310
67992: NOT
67993: OR
67994: IFFALSE 67998
// exit ;
67996: GO 68088
// vehicle := IsInUnit ( driver ) ;
67998: LD_ADDR_VAR 0 3
68002: PUSH
68003: LD_VAR 0 1
68007: PPUSH
68008: CALL_OW 310
68012: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
68013: LD_VAR 0 1
68017: PPUSH
68018: LD_STRING \
68020: PUSH
68021: LD_INT 0
68023: PUSH
68024: LD_INT 0
68026: PUSH
68027: LD_INT 0
68029: PUSH
68030: LD_INT 0
68032: PUSH
68033: LD_INT 0
68035: PUSH
68036: LD_INT 0
68038: PUSH
68039: EMPTY
68040: LIST
68041: LIST
68042: LIST
68043: LIST
68044: LIST
68045: LIST
68046: LIST
68047: PUSH
68048: LD_STRING E
68050: PUSH
68051: LD_INT 0
68053: PUSH
68054: LD_INT 0
68056: PUSH
68057: LD_VAR 0 3
68061: PUSH
68062: LD_INT 0
68064: PUSH
68065: LD_INT 0
68067: PUSH
68068: LD_INT 0
68070: PUSH
68071: EMPTY
68072: LIST
68073: LIST
68074: LIST
68075: LIST
68076: LIST
68077: LIST
68078: LIST
68079: PUSH
68080: EMPTY
68081: LIST
68082: LIST
68083: PPUSH
68084: CALL_OW 447
// end ;
68088: LD_VAR 0 2
68092: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
68093: LD_INT 0
68095: PPUSH
68096: PPUSH
68097: PPUSH
// tmp := [ ] ;
68098: LD_ADDR_VAR 0 5
68102: PUSH
68103: EMPTY
68104: ST_TO_ADDR
// for i in units do
68105: LD_ADDR_VAR 0 4
68109: PUSH
68110: LD_VAR 0 1
68114: PUSH
68115: FOR_IN
68116: IFFALSE 68154
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
68118: LD_ADDR_VAR 0 5
68122: PUSH
68123: LD_VAR 0 5
68127: PPUSH
68128: LD_VAR 0 5
68132: PUSH
68133: LD_INT 1
68135: PLUS
68136: PPUSH
68137: LD_VAR 0 4
68141: PPUSH
68142: CALL_OW 256
68146: PPUSH
68147: CALL_OW 2
68151: ST_TO_ADDR
68152: GO 68115
68154: POP
68155: POP
// if not tmp then
68156: LD_VAR 0 5
68160: NOT
68161: IFFALSE 68165
// exit ;
68163: GO 68213
// if asc then
68165: LD_VAR 0 2
68169: IFFALSE 68193
// result := SortListByListAsc ( units , tmp ) else
68171: LD_ADDR_VAR 0 3
68175: PUSH
68176: LD_VAR 0 1
68180: PPUSH
68181: LD_VAR 0 5
68185: PPUSH
68186: CALL_OW 76
68190: ST_TO_ADDR
68191: GO 68213
// result := SortListByListDesc ( units , tmp ) ;
68193: LD_ADDR_VAR 0 3
68197: PUSH
68198: LD_VAR 0 1
68202: PPUSH
68203: LD_VAR 0 5
68207: PPUSH
68208: CALL_OW 77
68212: ST_TO_ADDR
// end ;
68213: LD_VAR 0 3
68217: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
68218: LD_INT 0
68220: PPUSH
68221: PPUSH
// task := GetTaskList ( mech ) ;
68222: LD_ADDR_VAR 0 4
68226: PUSH
68227: LD_VAR 0 1
68231: PPUSH
68232: CALL_OW 437
68236: ST_TO_ADDR
// if not task then
68237: LD_VAR 0 4
68241: NOT
68242: IFFALSE 68246
// exit ;
68244: GO 68288
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
68246: LD_ADDR_VAR 0 3
68250: PUSH
68251: LD_VAR 0 4
68255: PUSH
68256: LD_INT 1
68258: ARRAY
68259: PUSH
68260: LD_INT 1
68262: ARRAY
68263: PUSH
68264: LD_STRING r
68266: EQUAL
68267: PUSH
68268: LD_VAR 0 4
68272: PUSH
68273: LD_INT 1
68275: ARRAY
68276: PUSH
68277: LD_INT 4
68279: ARRAY
68280: PUSH
68281: LD_VAR 0 2
68285: EQUAL
68286: AND
68287: ST_TO_ADDR
// end ;
68288: LD_VAR 0 3
68292: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
68293: LD_INT 0
68295: PPUSH
// SetDir ( unit , d ) ;
68296: LD_VAR 0 1
68300: PPUSH
68301: LD_VAR 0 4
68305: PPUSH
68306: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
68310: LD_VAR 0 1
68314: PPUSH
68315: LD_VAR 0 2
68319: PPUSH
68320: LD_VAR 0 3
68324: PPUSH
68325: LD_VAR 0 5
68329: PPUSH
68330: CALL_OW 48
// end ;
68334: LD_VAR 0 6
68338: RET
// export function ToNaturalNumber ( number ) ; begin
68339: LD_INT 0
68341: PPUSH
// result := number div 1 ;
68342: LD_ADDR_VAR 0 2
68346: PUSH
68347: LD_VAR 0 1
68351: PUSH
68352: LD_INT 1
68354: DIV
68355: ST_TO_ADDR
// if number < 0 then
68356: LD_VAR 0 1
68360: PUSH
68361: LD_INT 0
68363: LESS
68364: IFFALSE 68374
// result := 0 ;
68366: LD_ADDR_VAR 0 2
68370: PUSH
68371: LD_INT 0
68373: ST_TO_ADDR
// end ;
68374: LD_VAR 0 2
68378: RET
// export function SortByClass ( units , class ) ; var un ; begin
68379: LD_INT 0
68381: PPUSH
68382: PPUSH
// if not units or not class then
68383: LD_VAR 0 1
68387: NOT
68388: PUSH
68389: LD_VAR 0 2
68393: NOT
68394: OR
68395: IFFALSE 68399
// exit ;
68397: GO 68494
// result := [ ] ;
68399: LD_ADDR_VAR 0 3
68403: PUSH
68404: EMPTY
68405: ST_TO_ADDR
// for un in units do
68406: LD_ADDR_VAR 0 4
68410: PUSH
68411: LD_VAR 0 1
68415: PUSH
68416: FOR_IN
68417: IFFALSE 68492
// if GetClass ( un ) = class then
68419: LD_VAR 0 4
68423: PPUSH
68424: CALL_OW 257
68428: PUSH
68429: LD_VAR 0 2
68433: EQUAL
68434: IFFALSE 68461
// result := Insert ( result , 1 , un ) else
68436: LD_ADDR_VAR 0 3
68440: PUSH
68441: LD_VAR 0 3
68445: PPUSH
68446: LD_INT 1
68448: PPUSH
68449: LD_VAR 0 4
68453: PPUSH
68454: CALL_OW 2
68458: ST_TO_ADDR
68459: GO 68490
// result := Replace ( result , result + 1 , un ) ;
68461: LD_ADDR_VAR 0 3
68465: PUSH
68466: LD_VAR 0 3
68470: PPUSH
68471: LD_VAR 0 3
68475: PUSH
68476: LD_INT 1
68478: PLUS
68479: PPUSH
68480: LD_VAR 0 4
68484: PPUSH
68485: CALL_OW 1
68489: ST_TO_ADDR
68490: GO 68416
68492: POP
68493: POP
// end ;
68494: LD_VAR 0 3
68498: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
68499: LD_INT 0
68501: PPUSH
68502: PPUSH
68503: PPUSH
68504: PPUSH
68505: PPUSH
68506: PPUSH
68507: PPUSH
// result := [ ] ;
68508: LD_ADDR_VAR 0 4
68512: PUSH
68513: EMPTY
68514: ST_TO_ADDR
// if x - r < 0 then
68515: LD_VAR 0 1
68519: PUSH
68520: LD_VAR 0 3
68524: MINUS
68525: PUSH
68526: LD_INT 0
68528: LESS
68529: IFFALSE 68541
// min_x := 0 else
68531: LD_ADDR_VAR 0 8
68535: PUSH
68536: LD_INT 0
68538: ST_TO_ADDR
68539: GO 68557
// min_x := x - r ;
68541: LD_ADDR_VAR 0 8
68545: PUSH
68546: LD_VAR 0 1
68550: PUSH
68551: LD_VAR 0 3
68555: MINUS
68556: ST_TO_ADDR
// if y - r < 0 then
68557: LD_VAR 0 2
68561: PUSH
68562: LD_VAR 0 3
68566: MINUS
68567: PUSH
68568: LD_INT 0
68570: LESS
68571: IFFALSE 68583
// min_y := 0 else
68573: LD_ADDR_VAR 0 7
68577: PUSH
68578: LD_INT 0
68580: ST_TO_ADDR
68581: GO 68599
// min_y := y - r ;
68583: LD_ADDR_VAR 0 7
68587: PUSH
68588: LD_VAR 0 2
68592: PUSH
68593: LD_VAR 0 3
68597: MINUS
68598: ST_TO_ADDR
// max_x := x + r ;
68599: LD_ADDR_VAR 0 9
68603: PUSH
68604: LD_VAR 0 1
68608: PUSH
68609: LD_VAR 0 3
68613: PLUS
68614: ST_TO_ADDR
// max_y := y + r ;
68615: LD_ADDR_VAR 0 10
68619: PUSH
68620: LD_VAR 0 2
68624: PUSH
68625: LD_VAR 0 3
68629: PLUS
68630: ST_TO_ADDR
// for _x = min_x to max_x do
68631: LD_ADDR_VAR 0 5
68635: PUSH
68636: DOUBLE
68637: LD_VAR 0 8
68641: DEC
68642: ST_TO_ADDR
68643: LD_VAR 0 9
68647: PUSH
68648: FOR_TO
68649: IFFALSE 68750
// for _y = min_y to max_y do
68651: LD_ADDR_VAR 0 6
68655: PUSH
68656: DOUBLE
68657: LD_VAR 0 7
68661: DEC
68662: ST_TO_ADDR
68663: LD_VAR 0 10
68667: PUSH
68668: FOR_TO
68669: IFFALSE 68746
// begin if not ValidHex ( _x , _y ) then
68671: LD_VAR 0 5
68675: PPUSH
68676: LD_VAR 0 6
68680: PPUSH
68681: CALL_OW 488
68685: NOT
68686: IFFALSE 68690
// continue ;
68688: GO 68668
// if GetResourceTypeXY ( _x , _y ) then
68690: LD_VAR 0 5
68694: PPUSH
68695: LD_VAR 0 6
68699: PPUSH
68700: CALL_OW 283
68704: IFFALSE 68744
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
68706: LD_ADDR_VAR 0 4
68710: PUSH
68711: LD_VAR 0 4
68715: PPUSH
68716: LD_VAR 0 4
68720: PUSH
68721: LD_INT 1
68723: PLUS
68724: PPUSH
68725: LD_VAR 0 5
68729: PUSH
68730: LD_VAR 0 6
68734: PUSH
68735: EMPTY
68736: LIST
68737: LIST
68738: PPUSH
68739: CALL_OW 1
68743: ST_TO_ADDR
// end ;
68744: GO 68668
68746: POP
68747: POP
68748: GO 68648
68750: POP
68751: POP
// end ;
68752: LD_VAR 0 4
68756: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
68757: LD_INT 0
68759: PPUSH
68760: PPUSH
68761: PPUSH
68762: PPUSH
68763: PPUSH
68764: PPUSH
68765: PPUSH
68766: PPUSH
// if not units then
68767: LD_VAR 0 1
68771: NOT
68772: IFFALSE 68776
// exit ;
68774: GO 69300
// result := UnitFilter ( units , [ f_ok ] ) ;
68776: LD_ADDR_VAR 0 3
68780: PUSH
68781: LD_VAR 0 1
68785: PPUSH
68786: LD_INT 50
68788: PUSH
68789: EMPTY
68790: LIST
68791: PPUSH
68792: CALL_OW 72
68796: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
68797: LD_ADDR_VAR 0 8
68801: PUSH
68802: LD_VAR 0 1
68806: PUSH
68807: LD_INT 1
68809: ARRAY
68810: PPUSH
68811: CALL_OW 255
68815: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
68816: LD_ADDR_VAR 0 10
68820: PUSH
68821: LD_INT 29
68823: PUSH
68824: LD_INT 91
68826: PUSH
68827: LD_INT 49
68829: PUSH
68830: EMPTY
68831: LIST
68832: LIST
68833: LIST
68834: ST_TO_ADDR
// if not result then
68835: LD_VAR 0 3
68839: NOT
68840: IFFALSE 68844
// exit ;
68842: GO 69300
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
68844: LD_ADDR_VAR 0 5
68848: PUSH
68849: LD_INT 81
68851: PUSH
68852: LD_VAR 0 8
68856: PUSH
68857: EMPTY
68858: LIST
68859: LIST
68860: PPUSH
68861: CALL_OW 69
68865: ST_TO_ADDR
// for i in result do
68866: LD_ADDR_VAR 0 4
68870: PUSH
68871: LD_VAR 0 3
68875: PUSH
68876: FOR_IN
68877: IFFALSE 69298
// begin tag := GetTag ( i ) + 1 ;
68879: LD_ADDR_VAR 0 9
68883: PUSH
68884: LD_VAR 0 4
68888: PPUSH
68889: CALL_OW 110
68893: PUSH
68894: LD_INT 1
68896: PLUS
68897: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
68898: LD_ADDR_VAR 0 7
68902: PUSH
68903: LD_VAR 0 4
68907: PPUSH
68908: CALL_OW 250
68912: PPUSH
68913: LD_VAR 0 4
68917: PPUSH
68918: CALL_OW 251
68922: PPUSH
68923: LD_INT 6
68925: PPUSH
68926: CALL 68499 0 3
68930: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
68931: LD_VAR 0 4
68935: PPUSH
68936: CALL_OW 247
68940: PUSH
68941: LD_INT 2
68943: EQUAL
68944: PUSH
68945: LD_VAR 0 7
68949: AND
68950: PUSH
68951: LD_VAR 0 4
68955: PPUSH
68956: CALL_OW 264
68960: PUSH
68961: LD_VAR 0 10
68965: IN
68966: NOT
68967: AND
68968: IFFALSE 69007
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
68970: LD_VAR 0 4
68974: PPUSH
68975: LD_VAR 0 7
68979: PUSH
68980: LD_INT 1
68982: ARRAY
68983: PUSH
68984: LD_INT 1
68986: ARRAY
68987: PPUSH
68988: LD_VAR 0 7
68992: PUSH
68993: LD_INT 1
68995: ARRAY
68996: PUSH
68997: LD_INT 2
68999: ARRAY
69000: PPUSH
69001: CALL_OW 116
69005: GO 69296
// if path > tag then
69007: LD_VAR 0 2
69011: PUSH
69012: LD_VAR 0 9
69016: GREATER
69017: IFFALSE 69225
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
69019: LD_ADDR_VAR 0 6
69023: PUSH
69024: LD_VAR 0 5
69028: PPUSH
69029: LD_INT 91
69031: PUSH
69032: LD_VAR 0 4
69036: PUSH
69037: LD_INT 8
69039: PUSH
69040: EMPTY
69041: LIST
69042: LIST
69043: LIST
69044: PPUSH
69045: CALL_OW 72
69049: ST_TO_ADDR
// if nearEnemy then
69050: LD_VAR 0 6
69054: IFFALSE 69123
// begin if GetWeapon ( i ) = ru_time_lapser then
69056: LD_VAR 0 4
69060: PPUSH
69061: CALL_OW 264
69065: PUSH
69066: LD_INT 49
69068: EQUAL
69069: IFFALSE 69097
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
69071: LD_VAR 0 4
69075: PPUSH
69076: LD_VAR 0 6
69080: PPUSH
69081: LD_VAR 0 4
69085: PPUSH
69086: CALL_OW 74
69090: PPUSH
69091: CALL_OW 112
69095: GO 69121
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
69097: LD_VAR 0 4
69101: PPUSH
69102: LD_VAR 0 6
69106: PPUSH
69107: LD_VAR 0 4
69111: PPUSH
69112: CALL_OW 74
69116: PPUSH
69117: CALL 70225 0 2
// end else
69121: GO 69223
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
69123: LD_VAR 0 4
69127: PPUSH
69128: LD_VAR 0 2
69132: PUSH
69133: LD_VAR 0 9
69137: ARRAY
69138: PUSH
69139: LD_INT 1
69141: ARRAY
69142: PPUSH
69143: LD_VAR 0 2
69147: PUSH
69148: LD_VAR 0 9
69152: ARRAY
69153: PUSH
69154: LD_INT 2
69156: ARRAY
69157: PPUSH
69158: CALL_OW 297
69162: PUSH
69163: LD_INT 6
69165: GREATER
69166: IFFALSE 69209
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
69168: LD_VAR 0 4
69172: PPUSH
69173: LD_VAR 0 2
69177: PUSH
69178: LD_VAR 0 9
69182: ARRAY
69183: PUSH
69184: LD_INT 1
69186: ARRAY
69187: PPUSH
69188: LD_VAR 0 2
69192: PUSH
69193: LD_VAR 0 9
69197: ARRAY
69198: PUSH
69199: LD_INT 2
69201: ARRAY
69202: PPUSH
69203: CALL_OW 114
69207: GO 69223
// SetTag ( i , tag ) ;
69209: LD_VAR 0 4
69213: PPUSH
69214: LD_VAR 0 9
69218: PPUSH
69219: CALL_OW 109
// end else
69223: GO 69296
// if enemy then
69225: LD_VAR 0 5
69229: IFFALSE 69296
// begin if GetWeapon ( i ) = ru_time_lapser then
69231: LD_VAR 0 4
69235: PPUSH
69236: CALL_OW 264
69240: PUSH
69241: LD_INT 49
69243: EQUAL
69244: IFFALSE 69272
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
69246: LD_VAR 0 4
69250: PPUSH
69251: LD_VAR 0 5
69255: PPUSH
69256: LD_VAR 0 4
69260: PPUSH
69261: CALL_OW 74
69265: PPUSH
69266: CALL_OW 112
69270: GO 69296
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
69272: LD_VAR 0 4
69276: PPUSH
69277: LD_VAR 0 5
69281: PPUSH
69282: LD_VAR 0 4
69286: PPUSH
69287: CALL_OW 74
69291: PPUSH
69292: CALL 70225 0 2
// end ; end ;
69296: GO 68876
69298: POP
69299: POP
// end ;
69300: LD_VAR 0 3
69304: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
69305: LD_INT 0
69307: PPUSH
69308: PPUSH
69309: PPUSH
// if not unit or IsInUnit ( unit ) then
69310: LD_VAR 0 1
69314: NOT
69315: PUSH
69316: LD_VAR 0 1
69320: PPUSH
69321: CALL_OW 310
69325: OR
69326: IFFALSE 69330
// exit ;
69328: GO 69421
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
69330: LD_ADDR_VAR 0 4
69334: PUSH
69335: LD_VAR 0 1
69339: PPUSH
69340: CALL_OW 250
69344: PPUSH
69345: LD_VAR 0 2
69349: PPUSH
69350: LD_INT 1
69352: PPUSH
69353: CALL_OW 272
69357: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
69358: LD_ADDR_VAR 0 5
69362: PUSH
69363: LD_VAR 0 1
69367: PPUSH
69368: CALL_OW 251
69372: PPUSH
69373: LD_VAR 0 2
69377: PPUSH
69378: LD_INT 1
69380: PPUSH
69381: CALL_OW 273
69385: ST_TO_ADDR
// if ValidHex ( x , y ) then
69386: LD_VAR 0 4
69390: PPUSH
69391: LD_VAR 0 5
69395: PPUSH
69396: CALL_OW 488
69400: IFFALSE 69421
// ComTurnXY ( unit , x , y ) ;
69402: LD_VAR 0 1
69406: PPUSH
69407: LD_VAR 0 4
69411: PPUSH
69412: LD_VAR 0 5
69416: PPUSH
69417: CALL_OW 118
// end ;
69421: LD_VAR 0 3
69425: RET
// export function SeeUnits ( side , units ) ; var i ; begin
69426: LD_INT 0
69428: PPUSH
69429: PPUSH
// result := false ;
69430: LD_ADDR_VAR 0 3
69434: PUSH
69435: LD_INT 0
69437: ST_TO_ADDR
// if not units then
69438: LD_VAR 0 2
69442: NOT
69443: IFFALSE 69447
// exit ;
69445: GO 69492
// for i in units do
69447: LD_ADDR_VAR 0 4
69451: PUSH
69452: LD_VAR 0 2
69456: PUSH
69457: FOR_IN
69458: IFFALSE 69490
// if See ( side , i ) then
69460: LD_VAR 0 1
69464: PPUSH
69465: LD_VAR 0 4
69469: PPUSH
69470: CALL_OW 292
69474: IFFALSE 69488
// begin result := true ;
69476: LD_ADDR_VAR 0 3
69480: PUSH
69481: LD_INT 1
69483: ST_TO_ADDR
// exit ;
69484: POP
69485: POP
69486: GO 69492
// end ;
69488: GO 69457
69490: POP
69491: POP
// end ;
69492: LD_VAR 0 3
69496: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
69497: LD_INT 0
69499: PPUSH
69500: PPUSH
69501: PPUSH
69502: PPUSH
// if not unit or not points then
69503: LD_VAR 0 1
69507: NOT
69508: PUSH
69509: LD_VAR 0 2
69513: NOT
69514: OR
69515: IFFALSE 69519
// exit ;
69517: GO 69609
// dist := 99999 ;
69519: LD_ADDR_VAR 0 5
69523: PUSH
69524: LD_INT 99999
69526: ST_TO_ADDR
// for i in points do
69527: LD_ADDR_VAR 0 4
69531: PUSH
69532: LD_VAR 0 2
69536: PUSH
69537: FOR_IN
69538: IFFALSE 69607
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
69540: LD_ADDR_VAR 0 6
69544: PUSH
69545: LD_VAR 0 1
69549: PPUSH
69550: LD_VAR 0 4
69554: PUSH
69555: LD_INT 1
69557: ARRAY
69558: PPUSH
69559: LD_VAR 0 4
69563: PUSH
69564: LD_INT 2
69566: ARRAY
69567: PPUSH
69568: CALL_OW 297
69572: ST_TO_ADDR
// if tmpDist < dist then
69573: LD_VAR 0 6
69577: PUSH
69578: LD_VAR 0 5
69582: LESS
69583: IFFALSE 69605
// begin result := i ;
69585: LD_ADDR_VAR 0 3
69589: PUSH
69590: LD_VAR 0 4
69594: ST_TO_ADDR
// dist := tmpDist ;
69595: LD_ADDR_VAR 0 5
69599: PUSH
69600: LD_VAR 0 6
69604: ST_TO_ADDR
// end ; end ;
69605: GO 69537
69607: POP
69608: POP
// end ;
69609: LD_VAR 0 3
69613: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
69614: LD_INT 0
69616: PPUSH
// uc_side := side ;
69617: LD_ADDR_OWVAR 20
69621: PUSH
69622: LD_VAR 0 1
69626: ST_TO_ADDR
// uc_nation := 3 ;
69627: LD_ADDR_OWVAR 21
69631: PUSH
69632: LD_INT 3
69634: ST_TO_ADDR
// vc_chassis := 25 ;
69635: LD_ADDR_OWVAR 37
69639: PUSH
69640: LD_INT 25
69642: ST_TO_ADDR
// vc_engine := engine_siberite ;
69643: LD_ADDR_OWVAR 39
69647: PUSH
69648: LD_INT 3
69650: ST_TO_ADDR
// vc_control := control_computer ;
69651: LD_ADDR_OWVAR 38
69655: PUSH
69656: LD_INT 3
69658: ST_TO_ADDR
// vc_weapon := 59 ;
69659: LD_ADDR_OWVAR 40
69663: PUSH
69664: LD_INT 59
69666: ST_TO_ADDR
// result := CreateVehicle ;
69667: LD_ADDR_VAR 0 5
69671: PUSH
69672: CALL_OW 45
69676: ST_TO_ADDR
// SetDir ( result , d ) ;
69677: LD_VAR 0 5
69681: PPUSH
69682: LD_VAR 0 4
69686: PPUSH
69687: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
69691: LD_VAR 0 5
69695: PPUSH
69696: LD_VAR 0 2
69700: PPUSH
69701: LD_VAR 0 3
69705: PPUSH
69706: LD_INT 0
69708: PPUSH
69709: CALL_OW 48
// end ;
69713: LD_VAR 0 5
69717: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
69718: LD_INT 0
69720: PPUSH
69721: PPUSH
69722: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
69723: LD_ADDR_VAR 0 2
69727: PUSH
69728: LD_INT 0
69730: PUSH
69731: LD_INT 0
69733: PUSH
69734: LD_INT 0
69736: PUSH
69737: LD_INT 0
69739: PUSH
69740: EMPTY
69741: LIST
69742: LIST
69743: LIST
69744: LIST
69745: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
69746: LD_VAR 0 1
69750: NOT
69751: PUSH
69752: LD_VAR 0 1
69756: PPUSH
69757: CALL_OW 264
69761: PUSH
69762: LD_INT 12
69764: PUSH
69765: LD_INT 51
69767: PUSH
69768: LD_INT 32
69770: PUSH
69771: LD_INT 89
69773: PUSH
69774: EMPTY
69775: LIST
69776: LIST
69777: LIST
69778: LIST
69779: IN
69780: NOT
69781: OR
69782: IFFALSE 69786
// exit ;
69784: GO 69884
// for i := 1 to 3 do
69786: LD_ADDR_VAR 0 3
69790: PUSH
69791: DOUBLE
69792: LD_INT 1
69794: DEC
69795: ST_TO_ADDR
69796: LD_INT 3
69798: PUSH
69799: FOR_TO
69800: IFFALSE 69882
// begin tmp := GetCargo ( cargo , i ) ;
69802: LD_ADDR_VAR 0 4
69806: PUSH
69807: LD_VAR 0 1
69811: PPUSH
69812: LD_VAR 0 3
69816: PPUSH
69817: CALL_OW 289
69821: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
69822: LD_ADDR_VAR 0 2
69826: PUSH
69827: LD_VAR 0 2
69831: PPUSH
69832: LD_VAR 0 3
69836: PPUSH
69837: LD_VAR 0 4
69841: PPUSH
69842: CALL_OW 1
69846: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
69847: LD_ADDR_VAR 0 2
69851: PUSH
69852: LD_VAR 0 2
69856: PPUSH
69857: LD_INT 4
69859: PPUSH
69860: LD_VAR 0 2
69864: PUSH
69865: LD_INT 4
69867: ARRAY
69868: PUSH
69869: LD_VAR 0 4
69873: PLUS
69874: PPUSH
69875: CALL_OW 1
69879: ST_TO_ADDR
// end ;
69880: GO 69799
69882: POP
69883: POP
// end ;
69884: LD_VAR 0 2
69888: RET
// export function Length ( array ) ; begin
69889: LD_INT 0
69891: PPUSH
// result := array + 0 ;
69892: LD_ADDR_VAR 0 2
69896: PUSH
69897: LD_VAR 0 1
69901: PUSH
69902: LD_INT 0
69904: PLUS
69905: ST_TO_ADDR
// end ;
69906: LD_VAR 0 2
69910: RET
// export function PrepareArray ( array ) ; begin
69911: LD_INT 0
69913: PPUSH
// result := array diff 0 ;
69914: LD_ADDR_VAR 0 2
69918: PUSH
69919: LD_VAR 0 1
69923: PUSH
69924: LD_INT 0
69926: DIFF
69927: ST_TO_ADDR
// if not result [ 1 ] then
69928: LD_VAR 0 2
69932: PUSH
69933: LD_INT 1
69935: ARRAY
69936: NOT
69937: IFFALSE 69957
// result := Delete ( result , 1 ) ;
69939: LD_ADDR_VAR 0 2
69943: PUSH
69944: LD_VAR 0 2
69948: PPUSH
69949: LD_INT 1
69951: PPUSH
69952: CALL_OW 3
69956: ST_TO_ADDR
// end ;
69957: LD_VAR 0 2
69961: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
69962: LD_INT 0
69964: PPUSH
69965: PPUSH
69966: PPUSH
69967: PPUSH
// sibRocketRange := 25 ;
69968: LD_ADDR_VAR 0 6
69972: PUSH
69973: LD_INT 25
69975: ST_TO_ADDR
// result := false ;
69976: LD_ADDR_VAR 0 4
69980: PUSH
69981: LD_INT 0
69983: ST_TO_ADDR
// for i := 0 to 5 do
69984: LD_ADDR_VAR 0 5
69988: PUSH
69989: DOUBLE
69990: LD_INT 0
69992: DEC
69993: ST_TO_ADDR
69994: LD_INT 5
69996: PUSH
69997: FOR_TO
69998: IFFALSE 70065
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
70000: LD_VAR 0 1
70004: PPUSH
70005: LD_VAR 0 5
70009: PPUSH
70010: LD_VAR 0 6
70014: PPUSH
70015: CALL_OW 272
70019: PPUSH
70020: LD_VAR 0 2
70024: PPUSH
70025: LD_VAR 0 5
70029: PPUSH
70030: LD_VAR 0 6
70034: PPUSH
70035: CALL_OW 273
70039: PPUSH
70040: LD_VAR 0 3
70044: PPUSH
70045: CALL_OW 309
70049: IFFALSE 70063
// begin result := true ;
70051: LD_ADDR_VAR 0 4
70055: PUSH
70056: LD_INT 1
70058: ST_TO_ADDR
// exit ;
70059: POP
70060: POP
70061: GO 70067
// end ;
70063: GO 69997
70065: POP
70066: POP
// end ;
70067: LD_VAR 0 4
70071: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
70072: LD_INT 0
70074: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
70075: LD_VAR 0 1
70079: PPUSH
70080: LD_VAR 0 2
70084: PPUSH
70085: LD_INT 0
70087: PPUSH
70088: LD_INT 0
70090: PPUSH
70091: LD_INT 1
70093: PPUSH
70094: LD_INT 0
70096: PPUSH
70097: CALL_OW 587
// end ;
70101: LD_VAR 0 3
70105: RET
// export function CenterOnNow ( unit ) ; begin
70106: LD_INT 0
70108: PPUSH
// result := IsInUnit ( unit ) ;
70109: LD_ADDR_VAR 0 2
70113: PUSH
70114: LD_VAR 0 1
70118: PPUSH
70119: CALL_OW 310
70123: ST_TO_ADDR
// if not result then
70124: LD_VAR 0 2
70128: NOT
70129: IFFALSE 70141
// result := unit ;
70131: LD_ADDR_VAR 0 2
70135: PUSH
70136: LD_VAR 0 1
70140: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
70141: LD_VAR 0 1
70145: PPUSH
70146: CALL_OW 87
// end ;
70150: LD_VAR 0 2
70154: RET
// export function ComMoveHex ( unit , hex ) ; begin
70155: LD_INT 0
70157: PPUSH
// if not hex then
70158: LD_VAR 0 2
70162: NOT
70163: IFFALSE 70167
// exit ;
70165: GO 70220
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
70167: LD_VAR 0 2
70171: PUSH
70172: LD_INT 1
70174: ARRAY
70175: PPUSH
70176: LD_VAR 0 2
70180: PUSH
70181: LD_INT 2
70183: ARRAY
70184: PPUSH
70185: CALL_OW 428
70189: IFFALSE 70193
// exit ;
70191: GO 70220
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
70193: LD_VAR 0 1
70197: PPUSH
70198: LD_VAR 0 2
70202: PUSH
70203: LD_INT 1
70205: ARRAY
70206: PPUSH
70207: LD_VAR 0 2
70211: PUSH
70212: LD_INT 2
70214: ARRAY
70215: PPUSH
70216: CALL_OW 111
// end ;
70220: LD_VAR 0 3
70224: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
70225: LD_INT 0
70227: PPUSH
70228: PPUSH
70229: PPUSH
// if not unit or not enemy then
70230: LD_VAR 0 1
70234: NOT
70235: PUSH
70236: LD_VAR 0 2
70240: NOT
70241: OR
70242: IFFALSE 70246
// exit ;
70244: GO 70370
// x := GetX ( enemy ) ;
70246: LD_ADDR_VAR 0 4
70250: PUSH
70251: LD_VAR 0 2
70255: PPUSH
70256: CALL_OW 250
70260: ST_TO_ADDR
// y := GetY ( enemy ) ;
70261: LD_ADDR_VAR 0 5
70265: PUSH
70266: LD_VAR 0 2
70270: PPUSH
70271: CALL_OW 251
70275: ST_TO_ADDR
// if ValidHex ( x , y ) then
70276: LD_VAR 0 4
70280: PPUSH
70281: LD_VAR 0 5
70285: PPUSH
70286: CALL_OW 488
70290: IFFALSE 70370
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] and See ( GetSide ( unit ) , enemy ) then
70292: LD_VAR 0 2
70296: PPUSH
70297: CALL_OW 247
70301: PUSH
70302: LD_INT 3
70304: PUSH
70305: LD_INT 2
70307: PUSH
70308: EMPTY
70309: LIST
70310: LIST
70311: IN
70312: PUSH
70313: LD_VAR 0 1
70317: PPUSH
70318: CALL_OW 255
70322: PPUSH
70323: LD_VAR 0 2
70327: PPUSH
70328: CALL_OW 292
70332: AND
70333: IFFALSE 70351
// ComAttackUnit ( unit , enemy ) else
70335: LD_VAR 0 1
70339: PPUSH
70340: LD_VAR 0 2
70344: PPUSH
70345: CALL_OW 115
70349: GO 70370
// ComAgressiveMove ( unit , x , y ) ;
70351: LD_VAR 0 1
70355: PPUSH
70356: LD_VAR 0 4
70360: PPUSH
70361: LD_VAR 0 5
70365: PPUSH
70366: CALL_OW 114
// end ; end_of_file
70370: LD_VAR 0 3
70374: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
70375: LD_VAR 0 1
70379: PUSH
70380: LD_INT 200
70382: DOUBLE
70383: GREATEREQUAL
70384: IFFALSE 70392
70386: LD_INT 299
70388: DOUBLE
70389: LESSEQUAL
70390: IFTRUE 70394
70392: GO 70426
70394: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
70395: LD_VAR 0 1
70399: PPUSH
70400: LD_VAR 0 2
70404: PPUSH
70405: LD_VAR 0 3
70409: PPUSH
70410: LD_VAR 0 4
70414: PPUSH
70415: LD_VAR 0 5
70419: PPUSH
70420: CALL 24919 0 5
70424: GO 70503
70426: LD_INT 300
70428: DOUBLE
70429: GREATEREQUAL
70430: IFFALSE 70438
70432: LD_INT 399
70434: DOUBLE
70435: LESSEQUAL
70436: IFTRUE 70440
70438: GO 70502
70440: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
70441: LD_VAR 0 1
70445: PPUSH
70446: LD_VAR 0 2
70450: PPUSH
70451: LD_VAR 0 3
70455: PPUSH
70456: LD_VAR 0 4
70460: PPUSH
70461: LD_VAR 0 5
70465: PPUSH
70466: LD_VAR 0 6
70470: PPUSH
70471: LD_VAR 0 7
70475: PPUSH
70476: LD_VAR 0 8
70480: PPUSH
70481: LD_VAR 0 9
70485: PPUSH
70486: LD_VAR 0 10
70490: PPUSH
70491: LD_VAR 0 11
70495: PPUSH
70496: CALL 21244 0 11
70500: GO 70503
70502: POP
// end ;
70503: PPOPN 11
70505: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
70506: LD_VAR 0 1
70510: PPUSH
70511: LD_VAR 0 2
70515: PPUSH
70516: LD_VAR 0 3
70520: PPUSH
70521: LD_VAR 0 4
70525: PPUSH
70526: LD_VAR 0 5
70530: PPUSH
70531: CALL 24655 0 5
// end ; end_of_file
70535: PPOPN 5
70537: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
70538: LD_VAR 0 1
70542: PPUSH
70543: LD_VAR 0 2
70547: PPUSH
70548: LD_VAR 0 3
70552: PPUSH
70553: LD_VAR 0 4
70557: PPUSH
70558: LD_VAR 0 5
70562: PPUSH
70563: LD_VAR 0 6
70567: PPUSH
70568: CALL 8896 0 6
// end ;
70572: PPOPN 6
70574: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
70575: LD_INT 0
70577: PPUSH
// begin if not units then
70578: LD_VAR 0 1
70582: NOT
70583: IFFALSE 70587
// exit ;
70585: GO 70587
// end ;
70587: PPOPN 7
70589: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
70590: CALL 8800 0 0
// end ;
70594: PPOPN 1
70596: END
