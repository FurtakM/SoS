// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RandomizeAll ;
  11: CALL_OW 11
// Init ;
  15: CALL 91 0 0
// InitRestrictions ;
  19: CALL 227 0 0
// if debug then
  23: LD_EXP 1
  27: IFFALSE 33
// DebugMode ;
  29: CALL 308 0 0
// SpawnApeman ( apemanStartArea , 2 ) ;
  33: LD_INT 12
  35: PPUSH
  36: LD_INT 2
  38: PPUSH
  39: CALL 804 0 2
// SpawnApeman ( apemanArea , [ 10 , 8 , 7 , 6 ] [ Difficulty ] ) ;
  43: LD_INT 11
  45: PPUSH
  46: LD_INT 10
  48: PUSH
  49: LD_INT 8
  51: PUSH
  52: LD_INT 7
  54: PUSH
  55: LD_INT 6
  57: PUSH
  58: EMPTY
  59: LIST
  60: LIST
  61: LIST
  62: LIST
  63: PUSH
  64: LD_OWVAR 67
  68: ARRAY
  69: PPUSH
  70: CALL 804 0 2
// InGameOn ;
  74: CALL_OW 8
// CreateNature ;
  78: CALL 537 0 0
// PrepareAmericans ;
  82: CALL 1409 0 0
// Action ;
  86: CALL 2496 0 0
// end ;
  90: END
// export debug ; export mission_prefix , mission_prefix_prev ; export deltaBuilded , denisArrives , Delta , radar_allowed , first_apeman_tamed , apeman_army , radar_researched , radar_builded ; export apeman_counter , arab_spotted , end_mission , apeKillCounter , traitor ; function Init ; begin
  91: LD_INT 0
  93: PPUSH
// debug := false ;
  94: LD_ADDR_EXP 1
  98: PUSH
  99: LD_INT 0
 101: ST_TO_ADDR
// mission_prefix := 05_ ;
 102: LD_ADDR_EXP 2
 106: PUSH
 107: LD_STRING 05_
 109: ST_TO_ADDR
// mission_prefix_prev := 05a_ ;
 110: LD_ADDR_EXP 3
 114: PUSH
 115: LD_STRING 05a_
 117: ST_TO_ADDR
// deltaBuilded := false ;
 118: LD_ADDR_EXP 4
 122: PUSH
 123: LD_INT 0
 125: ST_TO_ADDR
// denisArrives := false ;
 126: LD_ADDR_EXP 5
 130: PUSH
 131: LD_INT 0
 133: ST_TO_ADDR
// radar_allowed := false ;
 134: LD_ADDR_EXP 7
 138: PUSH
 139: LD_INT 0
 141: ST_TO_ADDR
// first_apeman_tamed := false ;
 142: LD_ADDR_EXP 8
 146: PUSH
 147: LD_INT 0
 149: ST_TO_ADDR
// arab_spotted := false ;
 150: LD_ADDR_EXP 13
 154: PUSH
 155: LD_INT 0
 157: ST_TO_ADDR
// end_mission := false ;
 158: LD_ADDR_EXP 14
 162: PUSH
 163: LD_INT 0
 165: ST_TO_ADDR
// apeman_army := false ;
 166: LD_ADDR_EXP 9
 170: PUSH
 171: LD_INT 0
 173: ST_TO_ADDR
// radar_researched := false ;
 174: LD_ADDR_EXP 10
 178: PUSH
 179: LD_INT 0
 181: ST_TO_ADDR
// radar_builded := false ;
 182: LD_ADDR_EXP 11
 186: PUSH
 187: LD_INT 0
 189: ST_TO_ADDR
// apeman_counter := 0 ;
 190: LD_ADDR_EXP 12
 194: PUSH
 195: LD_INT 0
 197: ST_TO_ADDR
// Delta := 0 ;
 198: LD_ADDR_EXP 6
 202: PUSH
 203: LD_INT 0
 205: ST_TO_ADDR
// apeKillCounter := 0 ;
 206: LD_ADDR_EXP 15
 210: PUSH
 211: LD_INT 0
 213: ST_TO_ADDR
// traitor := false ;
 214: LD_ADDR_EXP 16
 218: PUSH
 219: LD_INT 0
 221: ST_TO_ADDR
// end ;
 222: LD_VAR 0 1
 226: RET
// function InitRestrictions ; begin
 227: LD_INT 0
 229: PPUSH
// SetRestrict ( b_lab_half , 1 , state_enabled ) ;
 230: LD_INT 7
 232: PPUSH
 233: LD_INT 1
 235: PPUSH
 236: LD_INT 1
 238: PPUSH
 239: CALL_OW 324
// SetRestrict ( b_lab_full , 1 , state_enabled ) ;
 243: LD_INT 8
 245: PPUSH
 246: LD_INT 1
 248: PPUSH
 249: LD_INT 1
 251: PPUSH
 252: CALL_OW 324
// SetRestrict ( b_lab_weapon , 1 , state_enabled ) ;
 256: LD_INT 10
 258: PPUSH
 259: LD_INT 1
 261: PPUSH
 262: LD_INT 1
 264: PPUSH
 265: CALL_OW 324
// SetTech ( tech_gatling , 1 , LoadVariable ( GatlingInGamma , 1 ) ) ;
 269: LD_INT 69
 271: PPUSH
 272: LD_INT 1
 274: PPUSH
 275: LD_STRING GatlingInGamma
 277: PPUSH
 278: LD_INT 1
 280: PPUSH
 281: CALL_OW 30
 285: PPUSH
 286: CALL_OW 322
// SetTech ( tech_weap1 , 1 , state_enabled ) ;
 290: LD_INT 51
 292: PPUSH
 293: LD_INT 1
 295: PPUSH
 296: LD_INT 1
 298: PPUSH
 299: CALL_OW 322
// end ;
 303: LD_VAR 0 1
 307: RET
// function DebugMode ; begin
 308: LD_INT 0
 310: PPUSH
// FogOff ( 1 ) ;
 311: LD_INT 1
 313: PPUSH
 314: CALL_OW 344
// Difficulty := 2 ;
 318: LD_ADDR_OWVAR 67
 322: PUSH
 323: LD_INT 2
 325: ST_TO_ADDR
// end ;
 326: LD_VAR 0 1
 330: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 0 ] ] ) >= 7 do
 331: LD_INT 22
 333: PUSH
 334: LD_INT 1
 336: PUSH
 337: EMPTY
 338: LIST
 339: LIST
 340: PUSH
 341: LD_INT 23
 343: PUSH
 344: LD_INT 0
 346: PUSH
 347: EMPTY
 348: LIST
 349: LIST
 350: PUSH
 351: EMPTY
 352: LIST
 353: LIST
 354: PPUSH
 355: CALL_OW 69
 359: PUSH
 360: LD_INT 7
 362: GREATEREQUAL
 363: IFFALSE 375
 365: GO 367
 367: DISABLE
// SetAchievement ( ACH_TAME ) ;
 368: LD_STRING ACH_TAME
 370: PPUSH
 371: CALL_OW 543
 375: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_bweapon , us_radar ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_radar ] ] ) do
 376: LD_INT 22
 378: PUSH
 379: LD_INT 1
 381: PUSH
 382: EMPTY
 383: LIST
 384: LIST
 385: PUSH
 386: LD_INT 35
 388: PUSH
 389: LD_INT 11
 391: PUSH
 392: EMPTY
 393: LIST
 394: LIST
 395: PUSH
 396: EMPTY
 397: LIST
 398: LIST
 399: PPUSH
 400: CALL_OW 69
 404: IFFALSE 436
 406: PUSH
 407: LD_INT 22
 409: PUSH
 410: LD_INT 1
 412: PUSH
 413: EMPTY
 414: LIST
 415: LIST
 416: PUSH
 417: LD_INT 34
 419: PUSH
 420: LD_INT 11
 422: PUSH
 423: EMPTY
 424: LIST
 425: LIST
 426: PUSH
 427: EMPTY
 428: LIST
 429: LIST
 430: PPUSH
 431: CALL_OW 69
 435: AND
 436: IFFALSE 448
 438: GO 440
 440: DISABLE
// SetAchievement ( ACH_RADAR ) ; end_of_file
 441: LD_STRING ACH_RADAR
 443: PPUSH
 444: CALL_OW 543
 448: END
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 449: LD_INT 0
 451: PPUSH
// uc_side := side ;
 452: LD_ADDR_OWVAR 20
 456: PUSH
 457: LD_VAR 0 1
 461: ST_TO_ADDR
// uc_nation := nation ;
 462: LD_ADDR_OWVAR 21
 466: PUSH
 467: LD_VAR 0 2
 471: ST_TO_ADDR
// vc_chassis := chassis ;
 472: LD_ADDR_OWVAR 37
 476: PUSH
 477: LD_VAR 0 3
 481: ST_TO_ADDR
// vc_engine := engine ;
 482: LD_ADDR_OWVAR 39
 486: PUSH
 487: LD_VAR 0 4
 491: ST_TO_ADDR
// vc_control := control ;
 492: LD_ADDR_OWVAR 38
 496: PUSH
 497: LD_VAR 0 5
 501: ST_TO_ADDR
// vc_weapon := weapon ;
 502: LD_ADDR_OWVAR 40
 506: PUSH
 507: LD_VAR 0 6
 511: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 512: LD_ADDR_OWVAR 41
 516: PUSH
 517: LD_VAR 0 7
 521: ST_TO_ADDR
// result := CreateVehicle ;
 522: LD_ADDR_VAR 0 8
 526: PUSH
 527: CALL_OW 45
 531: ST_TO_ADDR
// end ;
 532: LD_VAR 0 8
 536: RET
// export function CreateNature ; var i ; begin
 537: LD_INT 0
 539: PPUSH
 540: PPUSH
// for i := 1 to 4 do
 541: LD_ADDR_VAR 0 2
 545: PUSH
 546: DOUBLE
 547: LD_INT 1
 549: DEC
 550: ST_TO_ADDR
 551: LD_INT 4
 553: PUSH
 554: FOR_TO
 555: IFFALSE 578
// begin PrepareFrog ( ) ;
 557: CALL 66254 0 0
// PlaceUnitArea ( CreateHuman , swampArea , false ) ;
 561: CALL_OW 44
 565: PPUSH
 566: LD_INT 17
 568: PPUSH
 569: LD_INT 0
 571: PPUSH
 572: CALL_OW 49
// end ;
 576: GO 554
 578: POP
 579: POP
// for i := 1 to 6 do
 580: LD_ADDR_VAR 0 2
 584: PUSH
 585: DOUBLE
 586: LD_INT 1
 588: DEC
 589: ST_TO_ADDR
 590: LD_INT 6
 592: PUSH
 593: FOR_TO
 594: IFFALSE 617
// begin PrepareBird ( ) ;
 596: CALL 66358 0 0
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 600: CALL_OW 44
 604: PPUSH
 605: LD_INT 1
 607: PPUSH
 608: LD_INT 0
 610: PPUSH
 611: CALL_OW 49
// end ;
 615: GO 593
 617: POP
 618: POP
// for i := 1 to 11 do
 619: LD_ADDR_VAR 0 2
 623: PUSH
 624: DOUBLE
 625: LD_INT 1
 627: DEC
 628: ST_TO_ADDR
 629: LD_INT 11
 631: PUSH
 632: FOR_TO
 633: IFFALSE 656
// begin PrepareEnchidna ( ) ;
 635: CALL 66202 0 0
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 639: CALL_OW 44
 643: PPUSH
 644: LD_INT 1
 646: PPUSH
 647: LD_INT 0
 649: PPUSH
 650: CALL_OW 49
// end ;
 654: GO 632
 656: POP
 657: POP
// for i := 1 to 3 do
 658: LD_ADDR_VAR 0 2
 662: PUSH
 663: DOUBLE
 664: LD_INT 1
 666: DEC
 667: ST_TO_ADDR
 668: LD_INT 3
 670: PUSH
 671: FOR_TO
 672: IFFALSE 698
// begin PrepareTiger ( 10 ) ;
 674: LD_INT 10
 676: PPUSH
 677: CALL 66129 0 1
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 681: CALL_OW 44
 685: PPUSH
 686: LD_INT 1
 688: PPUSH
 689: LD_INT 0
 691: PPUSH
 692: CALL_OW 49
// end ;
 696: GO 671
 698: POP
 699: POP
// PrepareMastodont ( ) ;
 700: CALL 66462 0 0
// PlaceUnitArea ( CreateVehicle , mastodontArea , false ) ;
 704: CALL_OW 45
 708: PPUSH
 709: LD_INT 18
 711: PPUSH
 712: LD_INT 0
 714: PPUSH
 715: CALL_OW 49
// end ;
 719: LD_VAR 0 1
 723: RET
// export function SayX ( units , ident ) ; var i ; begin
 724: LD_INT 0
 726: PPUSH
 727: PPUSH
// result := false ;
 728: LD_ADDR_VAR 0 3
 732: PUSH
 733: LD_INT 0
 735: ST_TO_ADDR
// if not units then
 736: LD_VAR 0 1
 740: NOT
 741: IFFALSE 745
// exit ;
 743: GO 799
// for i in units do
 745: LD_ADDR_VAR 0 4
 749: PUSH
 750: LD_VAR 0 1
 754: PUSH
 755: FOR_IN
 756: IFFALSE 797
// if IsOk ( i ) then
 758: LD_VAR 0 4
 762: PPUSH
 763: CALL_OW 302
 767: IFFALSE 795
// begin Say ( i , ident ) ;
 769: LD_VAR 0 4
 773: PPUSH
 774: LD_VAR 0 2
 778: PPUSH
 779: CALL_OW 88
// result := i ;
 783: LD_ADDR_VAR 0 3
 787: PUSH
 788: LD_VAR 0 4
 792: ST_TO_ADDR
// break ;
 793: GO 797
// end ;
 795: GO 755
 797: POP
 798: POP
// end ;
 799: LD_VAR 0 3
 803: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 804: LD_INT 0
 806: PPUSH
 807: PPUSH
// InitUc ;
 808: CALL_OW 18
// InitHc ;
 812: CALL_OW 19
// uc_side := 0 ;
 816: LD_ADDR_OWVAR 20
 820: PUSH
 821: LD_INT 0
 823: ST_TO_ADDR
// uc_nation := 0 ;
 824: LD_ADDR_OWVAR 21
 828: PUSH
 829: LD_INT 0
 831: ST_TO_ADDR
// for i = 1 to amount do
 832: LD_ADDR_VAR 0 4
 836: PUSH
 837: DOUBLE
 838: LD_INT 1
 840: DEC
 841: ST_TO_ADDR
 842: LD_VAR 0 2
 846: PUSH
 847: FOR_TO
 848: IFFALSE 930
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 850: LD_ADDR_OWVAR 29
 854: PUSH
 855: LD_INT 9
 857: PPUSH
 858: LD_INT 12
 860: PPUSH
 861: CALL_OW 12
 865: PUSH
 866: LD_INT 9
 868: PPUSH
 869: LD_INT 12
 871: PPUSH
 872: CALL_OW 12
 876: PUSH
 877: EMPTY
 878: LIST
 879: LIST
 880: ST_TO_ADDR
// hc_agressivity := rand ( - 5 , 5 ) ;
 881: LD_ADDR_OWVAR 35
 885: PUSH
 886: LD_INT 5
 888: NEG
 889: PPUSH
 890: LD_INT 5
 892: PPUSH
 893: CALL_OW 12
 897: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 898: LD_INT 0
 900: PPUSH
 901: LD_INT 12
 903: PPUSH
 904: LD_INT 1
 906: PPUSH
 907: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 911: CALL_OW 44
 915: PPUSH
 916: LD_VAR 0 1
 920: PPUSH
 921: LD_INT 0
 923: PPUSH
 924: CALL_OW 49
// end ;
 928: GO 847
 930: POP
 931: POP
// InitHc ;
 932: CALL_OW 19
// end ;
 936: LD_VAR 0 3
 940: RET
// export function Attack ( unit , enemy_list ) ; var target , targets_list ; begin
 941: LD_INT 0
 943: PPUSH
 944: PPUSH
 945: PPUSH
// if not unit then
 946: LD_VAR 0 1
 950: NOT
 951: IFFALSE 955
// exit ;
 953: GO 1404
// if IsInUnit ( unit ) then
 955: LD_VAR 0 1
 959: PPUSH
 960: CALL_OW 310
 964: IFFALSE 981
// unit := IsDrivenBy ( unit ) ;
 966: LD_ADDR_VAR 0 1
 970: PUSH
 971: LD_VAR 0 1
 975: PPUSH
 976: CALL_OW 311
 980: ST_TO_ADDR
// targets_list := [ ] ;
 981: LD_ADDR_VAR 0 5
 985: PUSH
 986: EMPTY
 987: ST_TO_ADDR
// target := UnitFilter ( enemy_list , [ [ f_lives , 250 ] , [ f_not , [ f_weapon , us_cargo_bay ] ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 988: LD_ADDR_VAR 0 4
 992: PUSH
 993: LD_VAR 0 2
 997: PPUSH
 998: LD_INT 24
1000: PUSH
1001: LD_INT 250
1003: PUSH
1004: EMPTY
1005: LIST
1006: LIST
1007: PUSH
1008: LD_INT 3
1010: PUSH
1011: LD_INT 34
1013: PUSH
1014: LD_INT 12
1016: PUSH
1017: EMPTY
1018: LIST
1019: LIST
1020: PUSH
1021: EMPTY
1022: LIST
1023: LIST
1024: PUSH
1025: LD_INT 21
1027: PUSH
1028: LD_INT 2
1030: PUSH
1031: EMPTY
1032: LIST
1033: LIST
1034: PUSH
1035: LD_INT 58
1037: PUSH
1038: EMPTY
1039: LIST
1040: PUSH
1041: EMPTY
1042: LIST
1043: LIST
1044: LIST
1045: LIST
1046: PPUSH
1047: CALL_OW 72
1051: ST_TO_ADDR
// if GetDistUnits ( NearestUnitToUnit ( target , unit ) , unit ) < 11 and not IsInUnit ( unit ) then
1052: LD_VAR 0 4
1056: PPUSH
1057: LD_VAR 0 1
1061: PPUSH
1062: CALL_OW 74
1066: PPUSH
1067: LD_VAR 0 1
1071: PPUSH
1072: CALL_OW 296
1076: PUSH
1077: LD_INT 11
1079: LESS
1080: IFFALSE 1094
1082: PUSH
1083: LD_VAR 0 1
1087: PPUSH
1088: CALL_OW 310
1092: NOT
1093: AND
1094: IFFALSE 1122
// begin ComEnterUnit ( unit , NearestUnitToUnit ( target , unit ) ) ;
1096: LD_VAR 0 1
1100: PPUSH
1101: LD_VAR 0 4
1105: PPUSH
1106: LD_VAR 0 1
1110: PPUSH
1111: CALL_OW 74
1115: PPUSH
1116: CALL_OW 120
// exit ;
1120: GO 1404
// end ; targets_list := [ UnitFilter ( enemy_list , [ [ f_type , unit_human ] , [ f_not , [ f_inside ] ] ] ) , UnitFilter ( enemy_list , [ f_type , unit_vehicle ] ) , UnitFilter ( enemy_list , [ [ f_type , unit_building ] , [ f_not , [ f_empty ] ] ] ) , enemy_list ] ;
1122: LD_ADDR_VAR 0 5
1126: PUSH
1127: LD_VAR 0 2
1131: PPUSH
1132: LD_INT 21
1134: PUSH
1135: LD_INT 1
1137: PUSH
1138: EMPTY
1139: LIST
1140: LIST
1141: PUSH
1142: LD_INT 3
1144: PUSH
1145: LD_INT 54
1147: PUSH
1148: EMPTY
1149: LIST
1150: PUSH
1151: EMPTY
1152: LIST
1153: LIST
1154: PUSH
1155: EMPTY
1156: LIST
1157: LIST
1158: PPUSH
1159: CALL_OW 72
1163: PUSH
1164: LD_VAR 0 2
1168: PPUSH
1169: LD_INT 21
1171: PUSH
1172: LD_INT 2
1174: PUSH
1175: EMPTY
1176: LIST
1177: LIST
1178: PPUSH
1179: CALL_OW 72
1183: PUSH
1184: LD_VAR 0 2
1188: PPUSH
1189: LD_INT 21
1191: PUSH
1192: LD_INT 3
1194: PUSH
1195: EMPTY
1196: LIST
1197: LIST
1198: PUSH
1199: LD_INT 3
1201: PUSH
1202: LD_INT 58
1204: PUSH
1205: EMPTY
1206: LIST
1207: PUSH
1208: EMPTY
1209: LIST
1210: LIST
1211: PUSH
1212: EMPTY
1213: LIST
1214: LIST
1215: PPUSH
1216: CALL_OW 72
1220: PUSH
1221: LD_VAR 0 2
1225: PUSH
1226: EMPTY
1227: LIST
1228: LIST
1229: LIST
1230: LIST
1231: ST_TO_ADDR
// for target in targets_list do
1232: LD_ADDR_VAR 0 4
1236: PUSH
1237: LD_VAR 0 5
1241: PUSH
1242: FOR_IN
1243: IFFALSE 1402
// begin if target then
1245: LD_VAR 0 4
1249: IFFALSE 1400
// if GetTag ( unit ) = 11 and ( GetType ( NearestUnitToUnit ( target , unit ) ) = unit_building or GetWeapon ( NearestUnitToUnit ( target , unit ) ) = us_cargo_bay ) then
1251: LD_VAR 0 1
1255: PPUSH
1256: CALL_OW 110
1260: PUSH
1261: LD_INT 11
1263: EQUAL
1264: IFFALSE 1318
1266: PUSH
1267: LD_VAR 0 4
1271: PPUSH
1272: LD_VAR 0 1
1276: PPUSH
1277: CALL_OW 74
1281: PPUSH
1282: CALL_OW 247
1286: PUSH
1287: LD_INT 3
1289: EQUAL
1290: IFTRUE 1317
1292: PUSH
1293: LD_VAR 0 4
1297: PPUSH
1298: LD_VAR 0 1
1302: PPUSH
1303: CALL_OW 74
1307: PPUSH
1308: CALL_OW 264
1312: PUSH
1313: LD_INT 12
1315: EQUAL
1316: OR
1317: AND
1318: IFFALSE 1364
// begin ComPlaceDelayedCharge ( unit , 0 , 0 , NearestUnitToUnit ( target , unit ) ) ;
1320: LD_VAR 0 1
1324: PPUSH
1325: LD_INT 0
1327: PPUSH
1328: LD_INT 0
1330: PPUSH
1331: LD_VAR 0 4
1335: PPUSH
1336: LD_VAR 0 1
1340: PPUSH
1341: CALL_OW 74
1345: PPUSH
1346: CALL_OW 132
// SetTag ( unit , 0 ) ;
1350: LD_VAR 0 1
1354: PPUSH
1355: LD_INT 0
1357: PPUSH
1358: CALL_OW 109
// end else
1362: GO 1400
// if not HasTask ( unit ) then
1364: LD_VAR 0 1
1368: PPUSH
1369: CALL_OW 314
1373: NOT
1374: IFFALSE 1400
// ComAttackUnit ( unit , NearestUnitToUnit ( target , unit ) ) ;
1376: LD_VAR 0 1
1380: PPUSH
1381: LD_VAR 0 4
1385: PPUSH
1386: LD_VAR 0 1
1390: PPUSH
1391: CALL_OW 74
1395: PPUSH
1396: CALL_OW 115
// end ;
1400: GO 1242
1402: POP
1403: POP
// end ; end_of_file
1404: LD_VAR 0 3
1408: RET
// export JMM , Gladstone , Harrison , Denis , Brown , Donaldson , Lisa , Frank , Bobby , Cyrus , Mike ; export others ; export function PrepareAmericans ; var i , points , p , xy , veh , tmp ; begin
1409: LD_INT 0
1411: PPUSH
1412: PPUSH
1413: PPUSH
1414: PPUSH
1415: PPUSH
1416: PPUSH
1417: PPUSH
// uc_nation := 1 ;
1418: LD_ADDR_OWVAR 21
1422: PUSH
1423: LD_INT 1
1425: ST_TO_ADDR
// uc_side := 4 ;
1426: LD_ADDR_OWVAR 20
1430: PUSH
1431: LD_INT 4
1433: ST_TO_ADDR
// Denis := PrepareUnit ( Denis , false ,  ) ;
1434: LD_ADDR_EXP 20
1438: PUSH
1439: LD_STRING Denis
1441: PPUSH
1442: LD_INT 0
1444: PPUSH
1445: LD_STRING 
1447: PPUSH
1448: CALL 31651 0 3
1452: ST_TO_ADDR
// Harrison := PrepareUnit ( Harisson , false ,  ) ;
1453: LD_ADDR_EXP 19
1457: PUSH
1458: LD_STRING Harisson
1460: PPUSH
1461: LD_INT 0
1463: PPUSH
1464: LD_STRING 
1466: PPUSH
1467: CALL 31651 0 3
1471: ST_TO_ADDR
// uc_side := 1 ;
1472: LD_ADDR_OWVAR 20
1476: PUSH
1477: LD_INT 1
1479: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debug ) , mission_prefix_prev ) ;
1480: LD_ADDR_EXP 17
1484: PUSH
1485: LD_STRING JMM
1487: PPUSH
1488: LD_EXP 1
1492: NOT
1493: PPUSH
1494: LD_EXP 3
1498: PPUSH
1499: CALL 31651 0 3
1503: ST_TO_ADDR
// Gladstone := PrepareUnit ( Gladstone , false , mission_prefix_prev ) ;
1504: LD_ADDR_EXP 18
1508: PUSH
1509: LD_STRING Gladstone
1511: PPUSH
1512: LD_INT 0
1514: PPUSH
1515: LD_EXP 3
1519: PPUSH
1520: CALL 31651 0 3
1524: ST_TO_ADDR
// if LoadVariable ( BrownInDelta , debug ) then
1525: LD_STRING BrownInDelta
1527: PPUSH
1528: LD_EXP 1
1532: PPUSH
1533: CALL_OW 30
1537: IFFALSE 1579
// begin Brown := PrepareUnit ( Brown , ( not debug ) , mission_prefix_prev ) ;
1539: LD_ADDR_EXP 21
1543: PUSH
1544: LD_STRING Brown
1546: PPUSH
1547: LD_EXP 1
1551: NOT
1552: PPUSH
1553: LD_EXP 3
1557: PPUSH
1558: CALL 31651 0 3
1562: ST_TO_ADDR
// tmp := tmp ^ Brown ;
1563: LD_ADDR_VAR 0 7
1567: PUSH
1568: LD_VAR 0 7
1572: PUSH
1573: LD_EXP 21
1577: ADD
1578: ST_TO_ADDR
// end ; if LoadVariable ( DonaldsonInDelta , debug ) then
1579: LD_STRING DonaldsonInDelta
1581: PPUSH
1582: LD_EXP 1
1586: PPUSH
1587: CALL_OW 30
1591: IFFALSE 1633
// begin Donaldson := PrepareUnit ( Donaldson , ( not debug ) , mission_prefix_prev ) ;
1593: LD_ADDR_EXP 22
1597: PUSH
1598: LD_STRING Donaldson
1600: PPUSH
1601: LD_EXP 1
1605: NOT
1606: PPUSH
1607: LD_EXP 3
1611: PPUSH
1612: CALL 31651 0 3
1616: ST_TO_ADDR
// tmp := tmp ^ Donaldson ;
1617: LD_ADDR_VAR 0 7
1621: PUSH
1622: LD_VAR 0 7
1626: PUSH
1627: LD_EXP 22
1631: ADD
1632: ST_TO_ADDR
// end ; if LoadVariable ( LisaInDelta , debug ) then
1633: LD_STRING LisaInDelta
1635: PPUSH
1636: LD_EXP 1
1640: PPUSH
1641: CALL_OW 30
1645: IFFALSE 1687
// begin Lisa := PrepareUnit ( Lisa , ( not debug ) , mission_prefix_prev ) ;
1647: LD_ADDR_EXP 23
1651: PUSH
1652: LD_STRING Lisa
1654: PPUSH
1655: LD_EXP 1
1659: NOT
1660: PPUSH
1661: LD_EXP 3
1665: PPUSH
1666: CALL 31651 0 3
1670: ST_TO_ADDR
// tmp := tmp ^ Lisa ;
1671: LD_ADDR_VAR 0 7
1675: PUSH
1676: LD_VAR 0 7
1680: PUSH
1681: LD_EXP 23
1685: ADD
1686: ST_TO_ADDR
// end ; if LoadVariable ( FrankInDelta , debug ) then
1687: LD_STRING FrankInDelta
1689: PPUSH
1690: LD_EXP 1
1694: PPUSH
1695: CALL_OW 30
1699: IFFALSE 1741
// begin Frank := PrepareUnit ( Frank , ( not debug ) , mission_prefix_prev ) ;
1701: LD_ADDR_EXP 24
1705: PUSH
1706: LD_STRING Frank
1708: PPUSH
1709: LD_EXP 1
1713: NOT
1714: PPUSH
1715: LD_EXP 3
1719: PPUSH
1720: CALL 31651 0 3
1724: ST_TO_ADDR
// tmp := tmp ^ Frank ;
1725: LD_ADDR_VAR 0 7
1729: PUSH
1730: LD_VAR 0 7
1734: PUSH
1735: LD_EXP 24
1739: ADD
1740: ST_TO_ADDR
// end ; if LoadVariable ( BobbyInDelta , 0 ) then
1741: LD_STRING BobbyInDelta
1743: PPUSH
1744: LD_INT 0
1746: PPUSH
1747: CALL_OW 30
1751: IFFALSE 1793
// begin Bobby := PrepareUnit ( Bobby , ( not debug ) , mission_prefix_prev ) ;
1753: LD_ADDR_EXP 25
1757: PUSH
1758: LD_STRING Bobby
1760: PPUSH
1761: LD_EXP 1
1765: NOT
1766: PPUSH
1767: LD_EXP 3
1771: PPUSH
1772: CALL 31651 0 3
1776: ST_TO_ADDR
// tmp := tmp ^ Bobby ;
1777: LD_ADDR_VAR 0 7
1781: PUSH
1782: LD_VAR 0 7
1786: PUSH
1787: LD_EXP 25
1791: ADD
1792: ST_TO_ADDR
// end ; if LoadVariable ( CyrusInDelta , 0 ) then
1793: LD_STRING CyrusInDelta
1795: PPUSH
1796: LD_INT 0
1798: PPUSH
1799: CALL_OW 30
1803: IFFALSE 1845
// begin Cyrus := PrepareUnit ( Cyrus , ( not debug ) , mission_prefix_prev ) ;
1805: LD_ADDR_EXP 26
1809: PUSH
1810: LD_STRING Cyrus
1812: PPUSH
1813: LD_EXP 1
1817: NOT
1818: PPUSH
1819: LD_EXP 3
1823: PPUSH
1824: CALL 31651 0 3
1828: ST_TO_ADDR
// tmp := tmp ^ Cyrus ;
1829: LD_ADDR_VAR 0 7
1833: PUSH
1834: LD_VAR 0 7
1838: PUSH
1839: LD_EXP 26
1843: ADD
1844: ST_TO_ADDR
// end ; others := CreateCharacterSet ( othersDelta ) ;
1845: LD_ADDR_EXP 28
1849: PUSH
1850: LD_STRING othersDelta
1852: PPUSH
1853: CALL_OW 31
1857: ST_TO_ADDR
// if not others and debug then
1858: LD_EXP 28
1862: NOT
1863: IFFALSE 1871
1865: PUSH
1866: LD_EXP 1
1870: AND
1871: IFFALSE 1936
// begin InitHc ;
1873: CALL_OW 19
// for i = 1 to 2 do
1877: LD_ADDR_VAR 0 2
1881: PUSH
1882: DOUBLE
1883: LD_INT 1
1885: DEC
1886: ST_TO_ADDR
1887: LD_INT 2
1889: PUSH
1890: FOR_TO
1891: IFFALSE 1934
// begin PrepareHuman ( false , i mod 4 + 1 , 3 ) ;
1893: LD_INT 0
1895: PPUSH
1896: LD_VAR 0 2
1900: PUSH
1901: LD_INT 4
1903: MOD
1904: PUSH
1905: LD_INT 1
1907: PLUS
1908: PPUSH
1909: LD_INT 3
1911: PPUSH
1912: CALL_OW 380
// others := others ^ CreateHuman ;
1916: LD_ADDR_EXP 28
1920: PUSH
1921: LD_EXP 28
1925: PUSH
1926: CALL_OW 44
1930: ADD
1931: ST_TO_ADDR
// end ;
1932: GO 1890
1934: POP
1935: POP
// end ; if others then
1936: LD_EXP 28
1940: IFFALSE 1958
// tmp := tmp ^ others ;
1942: LD_ADDR_VAR 0 7
1946: PUSH
1947: LD_VAR 0 7
1951: PUSH
1952: LD_EXP 28
1956: ADD
1957: ST_TO_ADDR
// points := [ [ 28 , 49 ] , [ 33 , 54 ] , [ 38 , 56 ] ] ;
1958: LD_ADDR_VAR 0 3
1962: PUSH
1963: LD_INT 28
1965: PUSH
1966: LD_INT 49
1968: PUSH
1969: EMPTY
1970: LIST
1971: LIST
1972: PUSH
1973: LD_INT 33
1975: PUSH
1976: LD_INT 54
1978: PUSH
1979: EMPTY
1980: LIST
1981: LIST
1982: PUSH
1983: LD_INT 38
1985: PUSH
1986: LD_INT 56
1988: PUSH
1989: EMPTY
1990: LIST
1991: LIST
1992: PUSH
1993: EMPTY
1994: LIST
1995: LIST
1996: LIST
1997: ST_TO_ADDR
// veh := PrepareTank ( 1 , 1 , us_medium_wheeled , engine_solar , control_manual , us_cargo_bay , 80 ) ;
1998: LD_ADDR_VAR 0 6
2002: PUSH
2003: LD_INT 1
2005: PPUSH
2006: LD_INT 1
2008: PPUSH
2009: LD_INT 2
2011: PPUSH
2012: LD_INT 2
2014: PPUSH
2015: LD_INT 1
2017: PPUSH
2018: LD_INT 12
2020: PPUSH
2021: LD_INT 80
2023: PPUSH
2024: CALL 449 0 7
2028: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
2029: LD_VAR 0 6
2033: PPUSH
2034: LD_INT 1
2036: PPUSH
2037: CALL_OW 233
// PlaceUnitXY ( veh , points [ 1 ] [ 1 ] , points [ 1 ] [ 2 ] , false ) ;
2041: LD_VAR 0 6
2045: PPUSH
2046: LD_VAR 0 3
2050: PUSH
2051: LD_INT 1
2053: ARRAY
2054: PUSH
2055: LD_INT 1
2057: ARRAY
2058: PPUSH
2059: LD_VAR 0 3
2063: PUSH
2064: LD_INT 1
2066: ARRAY
2067: PUSH
2068: LD_INT 2
2070: ARRAY
2071: PPUSH
2072: LD_INT 0
2074: PPUSH
2075: CALL_OW 48
// SetCargo ( veh , mat_cans , 100 ) ;
2079: LD_VAR 0 6
2083: PPUSH
2084: LD_INT 1
2086: PPUSH
2087: LD_INT 100
2089: PPUSH
2090: CALL_OW 290
// PlaceHumanInUnit ( others [ 1 ] , veh ) ;
2094: LD_EXP 28
2098: PUSH
2099: LD_INT 1
2101: ARRAY
2102: PPUSH
2103: LD_VAR 0 6
2107: PPUSH
2108: CALL_OW 52
// veh := PrepareTank ( 1 , 1 , us_light_wheeled , engine_solar , control_manual , us_machine_gun , 80 ) ;
2112: LD_ADDR_VAR 0 6
2116: PUSH
2117: LD_INT 1
2119: PPUSH
2120: LD_INT 1
2122: PPUSH
2123: LD_INT 1
2125: PPUSH
2126: LD_INT 2
2128: PPUSH
2129: LD_INT 1
2131: PPUSH
2132: LD_INT 2
2134: PPUSH
2135: LD_INT 80
2137: PPUSH
2138: CALL 449 0 7
2142: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
2143: LD_VAR 0 6
2147: PPUSH
2148: LD_INT 1
2150: PPUSH
2151: CALL_OW 233
// PlaceUnitXY ( veh , points [ 2 ] [ 1 ] , points [ 2 ] [ 2 ] , false ) ;
2155: LD_VAR 0 6
2159: PPUSH
2160: LD_VAR 0 3
2164: PUSH
2165: LD_INT 2
2167: ARRAY
2168: PUSH
2169: LD_INT 1
2171: ARRAY
2172: PPUSH
2173: LD_VAR 0 3
2177: PUSH
2178: LD_INT 2
2180: ARRAY
2181: PUSH
2182: LD_INT 2
2184: ARRAY
2185: PPUSH
2186: LD_INT 0
2188: PPUSH
2189: CALL_OW 48
// PlaceHumanInUnit ( Gladstone , veh ) ;
2193: LD_EXP 18
2197: PPUSH
2198: LD_VAR 0 6
2202: PPUSH
2203: CALL_OW 52
// veh := PrepareTank ( 1 , 1 , us_light_wheeled , engine_solar , control_manual , us_light_gun , 80 ) ;
2207: LD_ADDR_VAR 0 6
2211: PUSH
2212: LD_INT 1
2214: PPUSH
2215: LD_INT 1
2217: PPUSH
2218: LD_INT 1
2220: PPUSH
2221: LD_INT 2
2223: PPUSH
2224: LD_INT 1
2226: PPUSH
2227: LD_INT 3
2229: PPUSH
2230: LD_INT 80
2232: PPUSH
2233: CALL 449 0 7
2237: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
2238: LD_VAR 0 6
2242: PPUSH
2243: LD_INT 1
2245: PPUSH
2246: CALL_OW 233
// PlaceUnitXY ( veh , points [ 3 ] [ 1 ] , points [ 3 ] [ 2 ] , false ) ;
2250: LD_VAR 0 6
2254: PPUSH
2255: LD_VAR 0 3
2259: PUSH
2260: LD_INT 3
2262: ARRAY
2263: PUSH
2264: LD_INT 1
2266: ARRAY
2267: PPUSH
2268: LD_VAR 0 3
2272: PUSH
2273: LD_INT 3
2275: ARRAY
2276: PUSH
2277: LD_INT 2
2279: ARRAY
2280: PPUSH
2281: LD_INT 0
2283: PPUSH
2284: CALL_OW 48
// PlaceHumanInUnit ( JMM , veh ) ;
2288: LD_EXP 17
2292: PPUSH
2293: LD_VAR 0 6
2297: PPUSH
2298: CALL_OW 52
// tmp := tmp diff 0 ;
2302: LD_ADDR_VAR 0 7
2306: PUSH
2307: LD_VAR 0 7
2311: PUSH
2312: LD_INT 0
2314: DIFF
2315: ST_TO_ADDR
// xy := [ [ 45 , 56 ] , [ 47 , 73 ] , [ 37 , 45 ] , [ 52 , 60 ] , [ 48 , 51 ] ] ;
2316: LD_ADDR_VAR 0 5
2320: PUSH
2321: LD_INT 45
2323: PUSH
2324: LD_INT 56
2326: PUSH
2327: EMPTY
2328: LIST
2329: LIST
2330: PUSH
2331: LD_INT 47
2333: PUSH
2334: LD_INT 73
2336: PUSH
2337: EMPTY
2338: LIST
2339: LIST
2340: PUSH
2341: LD_INT 37
2343: PUSH
2344: LD_INT 45
2346: PUSH
2347: EMPTY
2348: LIST
2349: LIST
2350: PUSH
2351: LD_INT 52
2353: PUSH
2354: LD_INT 60
2356: PUSH
2357: EMPTY
2358: LIST
2359: LIST
2360: PUSH
2361: LD_INT 48
2363: PUSH
2364: LD_INT 51
2366: PUSH
2367: EMPTY
2368: LIST
2369: LIST
2370: PUSH
2371: EMPTY
2372: LIST
2373: LIST
2374: LIST
2375: LIST
2376: LIST
2377: ST_TO_ADDR
// p := 1 ;
2378: LD_ADDR_VAR 0 4
2382: PUSH
2383: LD_INT 1
2385: ST_TO_ADDR
// for i in tmp diff others [ 1 ] do
2386: LD_ADDR_VAR 0 2
2390: PUSH
2391: LD_VAR 0 7
2395: PUSH
2396: LD_EXP 28
2400: PUSH
2401: LD_INT 1
2403: ARRAY
2404: DIFF
2405: PUSH
2406: FOR_IN
2407: IFFALSE 2489
// begin repeat wait ( 1 ) ;
2409: LD_INT 1
2411: PPUSH
2412: CALL_OW 67
// until PlaceUnitArea ( i , startArea , false ) ;
2416: LD_VAR 0 2
2420: PPUSH
2421: LD_INT 5
2423: PPUSH
2424: LD_INT 0
2426: PPUSH
2427: CALL_OW 49
2431: IFFALSE 2409
// ComMoveXY ( i , xy [ p ] [ 1 ] , xy [ p ] [ 2 ] ) ;
2433: LD_VAR 0 2
2437: PPUSH
2438: LD_VAR 0 5
2442: PUSH
2443: LD_VAR 0 4
2447: ARRAY
2448: PUSH
2449: LD_INT 1
2451: ARRAY
2452: PPUSH
2453: LD_VAR 0 5
2457: PUSH
2458: LD_VAR 0 4
2462: ARRAY
2463: PUSH
2464: LD_INT 2
2466: ARRAY
2467: PPUSH
2468: CALL_OW 111
// p := Inc ( p ) ;
2472: LD_ADDR_VAR 0 4
2476: PUSH
2477: LD_VAR 0 4
2481: PPUSH
2482: CALL 71224 0 1
2486: ST_TO_ADDR
// end ;
2487: GO 2406
2489: POP
2490: POP
// end ; end_of_file
2491: LD_VAR 0 1
2495: RET
// export function Action ; var m ; begin
2496: LD_INT 0
2498: PPUSH
2499: PPUSH
// InGameOn ;
2500: CALL_OW 8
// CenterNowOnXY ( 28 , 51 ) ;
2504: LD_INT 28
2506: PPUSH
2507: LD_INT 51
2509: PPUSH
2510: CALL_OW 86
// Wait ( 0 0$2 ) ;
2514: LD_INT 70
2516: PPUSH
2517: CALL_OW 67
// Say ( JMM , D1d-JMM-1a ) ;
2521: LD_EXP 17
2525: PPUSH
2526: LD_STRING D1d-JMM-1a
2528: PPUSH
2529: CALL_OW 88
// SayRadio ( Harrison , D1d-Har-1 ) ;
2533: LD_EXP 19
2537: PPUSH
2538: LD_STRING D1d-Har-1
2540: PPUSH
2541: CALL_OW 94
// InGameOff ;
2545: CALL_OW 9
// SaveForQuickRestart ;
2549: CALL_OW 22
// ChangeMissionObjectives ( M1 ) ;
2553: LD_STRING M1
2555: PPUSH
2556: CALL_OW 337
// Wait ( 0 0$2 ) ;
2560: LD_INT 70
2562: PPUSH
2563: CALL_OW 67
// Say ( JMM , D2-JMM-1 ) ;
2567: LD_EXP 17
2571: PPUSH
2572: LD_STRING D2-JMM-1
2574: PPUSH
2575: CALL_OW 88
// Say ( Gladstone , D2-Glad-1 ) ;
2579: LD_EXP 18
2583: PPUSH
2584: LD_STRING D2-Glad-1
2586: PPUSH
2587: CALL_OW 88
// Say ( JMM , D2-JMM-2 ) ;
2591: LD_EXP 17
2595: PPUSH
2596: LD_STRING D2-JMM-2
2598: PPUSH
2599: CALL_OW 88
// Say ( Gladstone , D2-Glad-2 ) ;
2603: LD_EXP 18
2607: PPUSH
2608: LD_STRING D2-Glad-2
2610: PPUSH
2611: CALL_OW 88
// Say ( JMM , D2-JMM-3 ) ;
2615: LD_EXP 17
2619: PPUSH
2620: LD_STRING D2-JMM-3
2622: PPUSH
2623: CALL_OW 88
// Wait ( rand ( 0 0$30 , 1 1$00 ) ) ;
2627: LD_INT 1050
2629: PPUSH
2630: LD_INT 2100
2632: PPUSH
2633: CALL_OW 12
2637: PPUSH
2638: CALL_OW 67
// SetWeather ( 1 , 570 , 350 ) ;
2642: LD_INT 1
2644: PPUSH
2645: LD_INT 570
2647: PPUSH
2648: LD_INT 350
2650: PPUSH
2651: CALL_OW 550
// Wait ( rand ( 3 3$00 , 5 5$00 ) ) ;
2655: LD_INT 6300
2657: PPUSH
2658: LD_INT 10500
2660: PPUSH
2661: CALL_OW 12
2665: PPUSH
2666: CALL_OW 67
// SetWeather ( 0 , 570 , 350 ) ;
2670: LD_INT 0
2672: PPUSH
2673: LD_INT 570
2675: PPUSH
2676: LD_INT 350
2678: PPUSH
2679: CALL_OW 550
// end ;
2683: LD_VAR 0 1
2687: RET
// every 0 0$01 trigger FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_not , [ f_constructed ] ] , [ f_btype , b_depot ] ] ] ) and not deltaBuilded do
2688: LD_INT 22
2690: PUSH
2691: LD_INT 1
2693: PUSH
2694: EMPTY
2695: LIST
2696: LIST
2697: PUSH
2698: LD_INT 3
2700: PUSH
2701: LD_INT 57
2703: PUSH
2704: EMPTY
2705: LIST
2706: PUSH
2707: EMPTY
2708: LIST
2709: LIST
2710: PUSH
2711: LD_INT 30
2713: PUSH
2714: LD_INT 0
2716: PUSH
2717: EMPTY
2718: LIST
2719: LIST
2720: PUSH
2721: EMPTY
2722: LIST
2723: LIST
2724: LIST
2725: PUSH
2726: EMPTY
2727: LIST
2728: PPUSH
2729: CALL_OW 69
2733: IFFALSE 2742
2735: PUSH
2736: LD_EXP 4
2740: NOT
2741: AND
2742: IFFALSE 2755
2744: GO 2746
2746: DISABLE
// begin deltaBuilded := true ;
2747: LD_ADDR_EXP 4
2751: PUSH
2752: LD_INT 1
2754: ST_TO_ADDR
// end ;
2755: END
// every 0 0$01 trigger not Delta and deltaBuilded and FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_not , [ f_constructed ] ] , [ f_btype , b_depot ] ] ] ) do
2756: LD_EXP 6
2760: NOT
2761: IFFALSE 2769
2763: PUSH
2764: LD_EXP 4
2768: AND
2769: IFFALSE 2818
2771: PUSH
2772: LD_INT 22
2774: PUSH
2775: LD_INT 1
2777: PUSH
2778: EMPTY
2779: LIST
2780: LIST
2781: PUSH
2782: LD_INT 3
2784: PUSH
2785: LD_INT 57
2787: PUSH
2788: EMPTY
2789: LIST
2790: PUSH
2791: EMPTY
2792: LIST
2793: LIST
2794: PUSH
2795: LD_INT 30
2797: PUSH
2798: LD_INT 0
2800: PUSH
2801: EMPTY
2802: LIST
2803: LIST
2804: PUSH
2805: EMPTY
2806: LIST
2807: LIST
2808: LIST
2809: PUSH
2810: EMPTY
2811: LIST
2812: PPUSH
2813: CALL_OW 69
2817: AND
2818: IFFALSE 2904
2820: GO 2822
2822: DISABLE
// begin enable ;
2823: ENABLE
// SetRestrict ( b_depot , 1 , state_disabled ) ;
2824: LD_INT 0
2826: PPUSH
2827: LD_INT 1
2829: PPUSH
2830: LD_INT 0
2832: PPUSH
2833: CALL_OW 324
// Delta := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_not , [ f_constructed ] ] , [ f_btype , b_depot ] ] ] ) [ 1 ] ;
2837: LD_ADDR_EXP 6
2841: PUSH
2842: LD_INT 22
2844: PUSH
2845: LD_INT 1
2847: PUSH
2848: EMPTY
2849: LIST
2850: LIST
2851: PUSH
2852: LD_INT 3
2854: PUSH
2855: LD_INT 57
2857: PUSH
2858: EMPTY
2859: LIST
2860: PUSH
2861: EMPTY
2862: LIST
2863: LIST
2864: PUSH
2865: LD_INT 30
2867: PUSH
2868: LD_INT 0
2870: PUSH
2871: EMPTY
2872: LIST
2873: LIST
2874: PUSH
2875: EMPTY
2876: LIST
2877: LIST
2878: LIST
2879: PUSH
2880: EMPTY
2881: LIST
2882: PPUSH
2883: CALL_OW 69
2887: PUSH
2888: LD_INT 1
2890: ARRAY
2891: ST_TO_ADDR
// SetBName ( Delta , Delta ) ;
2892: LD_EXP 6
2896: PPUSH
2897: LD_STRING Delta
2899: PPUSH
2900: CALL_OW 500
// end ;
2904: END
// every 0 0$2 trigger GetTech ( tech_ApeLang , 1 ) = state_researched and IsOk ( Gladstone ) do
2905: LD_INT 1
2907: PPUSH
2908: LD_INT 1
2910: PPUSH
2911: CALL_OW 321
2915: PUSH
2916: LD_INT 2
2918: EQUAL
2919: IFFALSE 2932
2921: PUSH
2922: LD_EXP 18
2926: PPUSH
2927: CALL_OW 302
2931: AND
2932: IFFALSE 2993
2934: GO 2936
2936: DISABLE
// begin DialogueOn ;
2937: CALL_OW 6
// Say ( Gladstone , D3-Glad-1 ) ;
2941: LD_EXP 18
2945: PPUSH
2946: LD_STRING D3-Glad-1
2948: PPUSH
2949: CALL_OW 88
// Say ( JMM , D3-JMM-1 ) ;
2953: LD_EXP 17
2957: PPUSH
2958: LD_STRING D3-JMM-1
2960: PPUSH
2961: CALL_OW 88
// Say ( Gladstone , D3-Glad-2 ) ;
2965: LD_EXP 18
2969: PPUSH
2970: LD_STRING D3-Glad-2
2972: PPUSH
2973: CALL_OW 88
// Say ( JMM , D3-JMM-2 ) ;
2977: LD_EXP 17
2981: PPUSH
2982: LD_STRING D3-JMM-2
2984: PPUSH
2985: CALL_OW 88
// DialogueOff ;
2989: CALL_OW 7
// end ;
2993: END
// every 0 0$1 trigger GetTech ( tech_ApePsych , 1 ) = state_researched and ( IsOk ( Frank ) or ( IsOk ( Denis ) and GetSide ( Denis ) = 1 ) or UnitFilter ( others , [ f_sex , sex_male ] ) ) do var i , sol , ape , b ;
2994: LD_INT 2
2996: PPUSH
2997: LD_INT 1
2999: PPUSH
3000: CALL_OW 321
3004: PUSH
3005: LD_INT 2
3007: EQUAL
3008: IFFALSE 3074
3010: PUSH
3011: LD_EXP 24
3015: PPUSH
3016: CALL_OW 302
3020: IFTRUE 3050
3022: PUSH
3023: LD_EXP 20
3027: PPUSH
3028: CALL_OW 302
3032: IFFALSE 3049
3034: PUSH
3035: LD_EXP 20
3039: PPUSH
3040: CALL_OW 255
3044: PUSH
3045: LD_INT 1
3047: EQUAL
3048: AND
3049: OR
3050: IFTRUE 3073
3052: PUSH
3053: LD_EXP 28
3057: PPUSH
3058: LD_INT 26
3060: PUSH
3061: LD_INT 1
3063: PUSH
3064: EMPTY
3065: LIST
3066: LIST
3067: PPUSH
3068: CALL_OW 72
3072: OR
3073: AND
3074: IFFALSE 3621
3076: GO 3078
3078: DISABLE
3079: LD_INT 0
3081: PPUSH
3082: PPUSH
3083: PPUSH
3084: PPUSH
// begin InGameOn ;
3085: CALL_OW 8
// DialogueOn ;
3089: CALL_OW 6
// if Frank then
3093: LD_EXP 24
3097: IFFALSE 3111
// Say ( Frank , D8a-Frank-1 ) ;
3099: LD_EXP 24
3103: PPUSH
3104: LD_STRING D8a-Frank-1
3106: PPUSH
3107: CALL_OW 88
// sol := SayX ( UnitFilter ( others , [ f_sex , sex_male ] ) , D8a-Sol1-1 ) ;
3111: LD_ADDR_VAR 0 2
3115: PUSH
3116: LD_EXP 28
3120: PPUSH
3121: LD_INT 26
3123: PUSH
3124: LD_INT 1
3126: PUSH
3127: EMPTY
3128: LIST
3129: LIST
3130: PPUSH
3131: CALL_OW 72
3135: PPUSH
3136: LD_STRING D8a-Sol1-1
3138: PPUSH
3139: CALL 724 0 2
3143: ST_TO_ADDR
// if Denis and GetSide ( Denis ) = 1 then
3144: LD_EXP 20
3148: IFFALSE 3165
3150: PUSH
3151: LD_EXP 20
3155: PPUSH
3156: CALL_OW 255
3160: PUSH
3161: LD_INT 1
3163: EQUAL
3164: AND
3165: IFFALSE 3179
// Say ( Denis , D8a-Den-1 ) ;
3167: LD_EXP 20
3171: PPUSH
3172: LD_STRING D8a-Den-1
3174: PPUSH
3175: CALL_OW 88
// if sol or Denis or Frank then
3179: LD_VAR 0 2
3183: IFTRUE 3191
3185: PUSH
3186: LD_EXP 20
3190: OR
3191: IFTRUE 3199
3193: PUSH
3194: LD_EXP 24
3198: OR
3199: IFFALSE 3260
// begin SayX ( UnitFilter ( others , [ [ f_class , 4 ] , [ f_sex , sex_male ] ] ) diff sol , D8a-Sci1-1 ) ;
3201: LD_EXP 28
3205: PPUSH
3206: LD_INT 25
3208: PUSH
3209: LD_INT 4
3211: PUSH
3212: EMPTY
3213: LIST
3214: LIST
3215: PUSH
3216: LD_INT 26
3218: PUSH
3219: LD_INT 1
3221: PUSH
3222: EMPTY
3223: LIST
3224: LIST
3225: PUSH
3226: EMPTY
3227: LIST
3228: LIST
3229: PPUSH
3230: CALL_OW 72
3234: PUSH
3235: LD_VAR 0 2
3239: DIFF
3240: PPUSH
3241: LD_STRING D8a-Sci1-1
3243: PPUSH
3244: CALL 724 0 2
// Say ( JMM , D8a-JMM-1 ) ;
3248: LD_EXP 17
3252: PPUSH
3253: LD_STRING D8a-JMM-1
3255: PPUSH
3256: CALL_OW 88
// end ; ape := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_apeman ] , [ f_inside ] ] ) ;
3260: LD_ADDR_VAR 0 3
3264: PUSH
3265: LD_INT 22
3267: PUSH
3268: LD_INT 1
3270: PUSH
3271: EMPTY
3272: LIST
3273: LIST
3274: PUSH
3275: LD_INT 25
3277: PUSH
3278: LD_INT 12
3280: PUSH
3281: EMPTY
3282: LIST
3283: LIST
3284: PUSH
3285: LD_INT 54
3287: PUSH
3288: EMPTY
3289: LIST
3290: PUSH
3291: EMPTY
3292: LIST
3293: LIST
3294: LIST
3295: PPUSH
3296: CALL_OW 69
3300: ST_TO_ADDR
// b := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) [ 1 ] ;
3301: LD_ADDR_VAR 0 4
3305: PUSH
3306: LD_INT 22
3308: PUSH
3309: LD_INT 1
3311: PUSH
3312: EMPTY
3313: LIST
3314: LIST
3315: PUSH
3316: LD_INT 2
3318: PUSH
3319: LD_INT 30
3321: PUSH
3322: LD_INT 6
3324: PUSH
3325: EMPTY
3326: LIST
3327: LIST
3328: PUSH
3329: LD_INT 30
3331: PUSH
3332: LD_INT 7
3334: PUSH
3335: EMPTY
3336: LIST
3337: LIST
3338: PUSH
3339: LD_INT 30
3341: PUSH
3342: LD_INT 8
3344: PUSH
3345: EMPTY
3346: LIST
3347: LIST
3348: PUSH
3349: EMPTY
3350: LIST
3351: LIST
3352: LIST
3353: LIST
3354: PUSH
3355: EMPTY
3356: LIST
3357: LIST
3358: PPUSH
3359: CALL_OW 69
3363: PUSH
3364: LD_INT 1
3366: ARRAY
3367: ST_TO_ADDR
// for i in ape do
3368: LD_ADDR_VAR 0 1
3372: PUSH
3373: LD_VAR 0 3
3377: PUSH
3378: FOR_IN
3379: IFFALSE 3412
// if i in UnitsInside ( b ) then
3381: LD_VAR 0 1
3385: PUSH
3386: LD_VAR 0 4
3390: PPUSH
3391: CALL_OW 313
3395: IN
3396: IFFALSE 3410
// begin ape := i ;
3398: LD_ADDR_VAR 0 3
3402: PUSH
3403: LD_VAR 0 1
3407: ST_TO_ADDR
// break ;
3408: GO 3412
// end ;
3410: GO 3378
3412: POP
3413: POP
// if not ape then
3414: LD_VAR 0 3
3418: NOT
3419: IFFALSE 3431
// begin DialogueOff ;
3421: CALL_OW 7
// InGameOff ;
3425: CALL_OW 9
// exit ;
3429: GO 3621
// end ; RemoveUnit ( ape ) ;
3431: LD_VAR 0 3
3435: PPUSH
3436: CALL_OW 64
// PrepareApeman ( 0 ) ;
3440: LD_INT 0
3442: PPUSH
3443: CALL 65978 0 1
// uc_side := 1 ;
3447: LD_ADDR_OWVAR 20
3451: PUSH
3452: LD_INT 1
3454: ST_TO_ADDR
// hc_name := Mike  ;
3455: LD_ADDR_OWVAR 26
3459: PUSH
3460: LD_STRING Mike 
3462: ST_TO_ADDR
// hc_gallery := us ;
3463: LD_ADDR_OWVAR 33
3467: PUSH
3468: LD_STRING us
3470: ST_TO_ADDR
// hc_face_number := 30 ;
3471: LD_ADDR_OWVAR 34
3475: PUSH
3476: LD_INT 30
3478: ST_TO_ADDR
// hc_attr := [ GetAttr ( ape , attr_stamina ) , GetAttr ( ape , attr_speed ) ] ;
3479: LD_ADDR_OWVAR 29
3483: PUSH
3484: LD_VAR 0 3
3488: PPUSH
3489: LD_INT 1
3491: PPUSH
3492: CALL_OW 260
3496: PUSH
3497: LD_VAR 0 3
3501: PPUSH
3502: LD_INT 2
3504: PPUSH
3505: CALL_OW 260
3509: PUSH
3510: EMPTY
3511: LIST
3512: LIST
3513: ST_TO_ADDR
// hc_skills := [ GetSkill ( ape , 1 ) , GetSkill ( ape , 2 ) , GetSkill ( ape , 3 ) , GetSkill ( ape , 4 ) ] ;
3514: LD_ADDR_OWVAR 31
3518: PUSH
3519: LD_VAR 0 3
3523: PPUSH
3524: LD_INT 1
3526: PPUSH
3527: CALL_OW 259
3531: PUSH
3532: LD_VAR 0 3
3536: PPUSH
3537: LD_INT 2
3539: PPUSH
3540: CALL_OW 259
3544: PUSH
3545: LD_VAR 0 3
3549: PPUSH
3550: LD_INT 3
3552: PPUSH
3553: CALL_OW 259
3557: PUSH
3558: LD_VAR 0 3
3562: PPUSH
3563: LD_INT 4
3565: PPUSH
3566: CALL_OW 259
3570: PUSH
3571: EMPTY
3572: LIST
3573: LIST
3574: LIST
3575: LIST
3576: ST_TO_ADDR
// hc_sex := sex_male ;
3577: LD_ADDR_OWVAR 27
3581: PUSH
3582: LD_INT 1
3584: ST_TO_ADDR
// Mike := CreateHuman ;
3585: LD_ADDR_EXP 27
3589: PUSH
3590: CALL_OW 44
3594: ST_TO_ADDR
// PlaceHumanInUnit ( Mike , b ) ;
3595: LD_EXP 27
3599: PPUSH
3600: LD_VAR 0 4
3604: PPUSH
3605: CALL_OW 52
// InitHc_All ( ) ;
3609: CALL_OW 584
// DialogueOff ;
3613: CALL_OW 7
// InGameOff ;
3617: CALL_OW 9
// end ;
3621: PPOPN 4
3623: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_apeman_engineer ] ] ) do
3624: LD_INT 22
3626: PUSH
3627: LD_INT 1
3629: PUSH
3630: EMPTY
3631: LIST
3632: LIST
3633: PUSH
3634: LD_INT 25
3636: PUSH
3637: LD_INT 16
3639: PUSH
3640: EMPTY
3641: LIST
3642: LIST
3643: PUSH
3644: EMPTY
3645: LIST
3646: LIST
3647: PPUSH
3648: CALL_OW 69
3652: IFFALSE 3711
3654: GO 3656
3656: DISABLE
// begin ChangeMissionObjectives ( M1a ) ;
3657: LD_STRING M1a
3659: PPUSH
3660: CALL_OW 337
// case Query ( Q2 ) of 1 :
3664: LD_STRING Q2
3666: PPUSH
3667: CALL_OW 97
3671: PUSH
3672: LD_INT 1
3674: DOUBLE
3675: EQUAL
3676: IFTRUE 3680
3678: GO 3691
3680: POP
// end_mission := true ; 2 :
3681: LD_ADDR_EXP 14
3685: PUSH
3686: LD_INT 1
3688: ST_TO_ADDR
3689: GO 3711
3691: LD_INT 2
3693: DOUBLE
3694: EQUAL
3695: IFTRUE 3699
3697: GO 3710
3699: POP
// end_the_mission_allowed := true ; end ;
3700: LD_ADDR_OWVAR 57
3704: PUSH
3705: LD_INT 1
3707: ST_TO_ADDR
3708: GO 3711
3710: POP
// end ;
3711: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) and Delta do
3712: LD_INT 22
3714: PUSH
3715: LD_INT 1
3717: PUSH
3718: EMPTY
3719: LIST
3720: LIST
3721: PUSH
3722: LD_INT 2
3724: PUSH
3725: LD_INT 30
3727: PUSH
3728: LD_INT 6
3730: PUSH
3731: EMPTY
3732: LIST
3733: LIST
3734: PUSH
3735: LD_INT 30
3737: PUSH
3738: LD_INT 7
3740: PUSH
3741: EMPTY
3742: LIST
3743: LIST
3744: PUSH
3745: EMPTY
3746: LIST
3747: LIST
3748: LIST
3749: PUSH
3750: EMPTY
3751: LIST
3752: LIST
3753: PPUSH
3754: CALL_OW 69
3758: IFFALSE 3808
3760: PUSH
3761: LD_INT 22
3763: PUSH
3764: LD_INT 1
3766: PUSH
3767: EMPTY
3768: LIST
3769: LIST
3770: PUSH
3771: LD_INT 2
3773: PUSH
3774: LD_INT 30
3776: PUSH
3777: LD_INT 2
3779: PUSH
3780: EMPTY
3781: LIST
3782: LIST
3783: PUSH
3784: LD_INT 30
3786: PUSH
3787: LD_INT 3
3789: PUSH
3790: EMPTY
3791: LIST
3792: LIST
3793: PUSH
3794: EMPTY
3795: LIST
3796: LIST
3797: LIST
3798: PUSH
3799: EMPTY
3800: LIST
3801: LIST
3802: PPUSH
3803: CALL_OW 69
3807: AND
3808: IFFALSE 3816
3810: PUSH
3811: LD_EXP 6
3815: AND
3816: IFFALSE 4335
3818: GO 3820
3820: DISABLE
// begin Wait ( rand ( 0 0$30 , 0 0$50 ) ) ;
3821: LD_INT 1050
3823: PPUSH
3824: LD_INT 1750
3826: PPUSH
3827: CALL_OW 12
3831: PPUSH
3832: CALL_OW 67
// PlaceUnitArea ( Denis , [ denisArea1 , denisArea2 , denisArea3 , denisArea4 ] [ Difficulty ] , false ) ;
3836: LD_EXP 20
3840: PPUSH
3841: LD_INT 6
3843: PUSH
3844: LD_INT 9
3846: PUSH
3847: LD_INT 10
3849: PUSH
3850: LD_INT 16
3852: PUSH
3853: EMPTY
3854: LIST
3855: LIST
3856: LIST
3857: LIST
3858: PUSH
3859: LD_OWVAR 67
3863: ARRAY
3864: PPUSH
3865: LD_INT 0
3867: PPUSH
3868: CALL_OW 49
// ComHold ( Denis ) ;
3872: LD_EXP 20
3876: PPUSH
3877: CALL_OW 140
// InGameOn ;
3881: CALL_OW 8
// DialogueOn ;
3885: CALL_OW 6
// if Delta then
3889: LD_EXP 6
3893: IFFALSE 3906
// CenterNowOnUnits ( Delta ) else
3895: LD_EXP 6
3899: PPUSH
3900: CALL_OW 87
3904: GO 3915
// CenterNowOnUnits ( JMM ) ;
3906: LD_EXP 17
3910: PPUSH
3911: CALL_OW 87
// SayRadioNoFaceNoName ( Denis , DD-Den-1 ) ;
3915: LD_EXP 20
3919: PPUSH
3920: LD_STRING DD-Den-1
3922: PPUSH
3923: CALL 74096 0 2
// Say ( JMM , DD-JMM-1 ) ;
3927: LD_EXP 17
3931: PPUSH
3932: LD_STRING DD-JMM-1
3934: PPUSH
3935: CALL_OW 88
// SayRadioNoFaceNoName ( Denis , DD-Den-2 ) ;
3939: LD_EXP 20
3943: PPUSH
3944: LD_STRING DD-Den-2
3946: PPUSH
3947: CALL 74096 0 2
// Wait ( 3 ) ;
3951: LD_INT 3
3953: PPUSH
3954: CALL_OW 67
// DialogueOff ;
3958: CALL_OW 7
// InGameOff ;
3962: CALL_OW 9
// if Difficulty = 1 then
3966: LD_OWVAR 67
3970: PUSH
3971: LD_INT 1
3973: EQUAL
3974: IFFALSE 4050
// begin PlaceSeeing ( GetX ( Denis ) , GetY ( Denis ) , 1 , - 12 ) ;
3976: LD_EXP 20
3980: PPUSH
3981: CALL_OW 250
3985: PPUSH
3986: LD_EXP 20
3990: PPUSH
3991: CALL_OW 251
3995: PPUSH
3996: LD_INT 1
3998: PPUSH
3999: LD_INT 12
4001: NEG
4002: PPUSH
4003: CALL_OW 330
// CenterNowOnUnits ( Denis ) ;
4007: LD_EXP 20
4011: PPUSH
4012: CALL_OW 87
// wait ( 0 0$5 ) ;
4016: LD_INT 175
4018: PPUSH
4019: CALL_OW 67
// RemoveSeeing ( GetX ( Denis ) , GetY ( Denis ) , 1 ) ;
4023: LD_EXP 20
4027: PPUSH
4028: CALL_OW 250
4032: PPUSH
4033: LD_EXP 20
4037: PPUSH
4038: CALL_OW 251
4042: PPUSH
4043: LD_INT 1
4045: PPUSH
4046: CALL_OW 331
// end ; repeat wait ( 0 0$01 ) ;
4050: LD_INT 35
4052: PPUSH
4053: CALL_OW 67
// until See ( 1 , Denis ) or IsDead ( Denis ) ;
4057: LD_INT 1
4059: PPUSH
4060: LD_EXP 20
4064: PPUSH
4065: CALL_OW 292
4069: IFTRUE 4082
4071: PUSH
4072: LD_EXP 20
4076: PPUSH
4077: CALL_OW 301
4081: OR
4082: IFFALSE 4050
// if IsDead ( Denis ) then
4084: LD_EXP 20
4088: PPUSH
4089: CALL_OW 301
4093: IFFALSE 4097
// exit ;
4095: GO 4335
// SetSide ( Denis , 1 ) ;
4097: LD_EXP 20
4101: PPUSH
4102: LD_INT 1
4104: PPUSH
4105: CALL_OW 235
// Say ( Denis , DD-Den-2a ) ;
4109: LD_EXP 20
4113: PPUSH
4114: LD_STRING DD-Den-2a
4116: PPUSH
4117: CALL_OW 88
// repeat wait ( 0 0$01 ) ;
4121: LD_INT 35
4123: PPUSH
4124: CALL_OW 67
// until GetBType ( IsInUnit ( Denis ) ) in [ b_lab , b_lab_half , b_lab_full ] or IsDead ( Denis ) ;
4128: LD_EXP 20
4132: PPUSH
4133: CALL_OW 310
4137: PPUSH
4138: CALL_OW 266
4142: PUSH
4143: LD_INT 6
4145: PUSH
4146: LD_INT 7
4148: PUSH
4149: LD_INT 8
4151: PUSH
4152: EMPTY
4153: LIST
4154: LIST
4155: LIST
4156: IN
4157: IFTRUE 4170
4159: PUSH
4160: LD_EXP 20
4164: PPUSH
4165: CALL_OW 301
4169: OR
4170: IFFALSE 4121
// if IsDead ( Denis ) then
4172: LD_EXP 20
4176: PPUSH
4177: CALL_OW 301
4181: IFFALSE 4185
// exit ;
4183: GO 4335
// Say ( Denis , DD-Den-2b ) ;
4185: LD_EXP 20
4189: PPUSH
4190: LD_STRING DD-Den-2b
4192: PPUSH
4193: CALL_OW 88
// ComChangeProfession ( Denis , 4 ) ;
4197: LD_EXP 20
4201: PPUSH
4202: LD_INT 4
4204: PPUSH
4205: CALL_OW 123
// Wait ( 0 0$02 ) ;
4209: LD_INT 70
4211: PPUSH
4212: CALL_OW 67
// DialogueOn ;
4216: CALL_OW 6
// CenterNowOnUnits ( Denis ) ;
4220: LD_EXP 20
4224: PPUSH
4225: CALL_OW 87
// Say ( JMM , D4-JMM-1 ) ;
4229: LD_EXP 17
4233: PPUSH
4234: LD_STRING D4-JMM-1
4236: PPUSH
4237: CALL_OW 88
// Say ( Denis , D4-Den-1 ) ;
4241: LD_EXP 20
4245: PPUSH
4246: LD_STRING D4-Den-1
4248: PPUSH
4249: CALL_OW 88
// Say ( JMM , D4-JMM-2 ) ;
4253: LD_EXP 17
4257: PPUSH
4258: LD_STRING D4-JMM-2
4260: PPUSH
4261: CALL_OW 88
// Say ( Denis , D4-Den-2 ) ;
4265: LD_EXP 20
4269: PPUSH
4270: LD_STRING D4-Den-2
4272: PPUSH
4273: CALL_OW 88
// DialogueOff ;
4277: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
4281: LD_STRING M2
4283: PPUSH
4284: CALL_OW 337
// radar_allowed := true ;
4288: LD_ADDR_EXP 7
4292: PUSH
4293: LD_INT 1
4295: ST_TO_ADDR
// SetTech ( tech_radar , 1 , state_enabled ) ;
4296: LD_INT 6
4298: PPUSH
4299: LD_INT 1
4301: PPUSH
4302: LD_INT 1
4304: PPUSH
4305: CALL_OW 322
// SetRestrict ( b_lab_opto , 1 , state_enabled ) ;
4309: LD_INT 15
4311: PPUSH
4312: LD_INT 1
4314: PPUSH
4315: LD_INT 1
4317: PPUSH
4318: CALL_OW 324
// SetRestrict ( b_ext_radar , 1 , state_enabled ) ;
4322: LD_INT 20
4324: PPUSH
4325: LD_INT 1
4327: PPUSH
4328: LD_INT 1
4330: PPUSH
4331: CALL_OW 324
// end ;
4335: END
// every 0 0$1 trigger arab_spotted do var sol , sol2 ;
4336: LD_EXP 13
4340: IFFALSE 4965
4342: GO 4344
4344: DISABLE
4345: LD_INT 0
4347: PPUSH
4348: PPUSH
// begin sol := SayX ( UnitFilter ( others , [ f_sex , sex_male ] ) , D5-Sol1-1 ) ;
4349: LD_ADDR_VAR 0 1
4353: PUSH
4354: LD_EXP 28
4358: PPUSH
4359: LD_INT 26
4361: PUSH
4362: LD_INT 1
4364: PUSH
4365: EMPTY
4366: LIST
4367: LIST
4368: PPUSH
4369: CALL_OW 72
4373: PPUSH
4374: LD_STRING D5-Sol1-1
4376: PPUSH
4377: CALL 724 0 2
4381: ST_TO_ADDR
// if not sol then
4382: LD_VAR 0 1
4386: NOT
4387: IFFALSE 4391
// exit ;
4389: GO 4965
// repeat wait ( 0 0$01 ) ;
4391: LD_INT 35
4393: PPUSH
4394: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) = 0 ;
4398: LD_INT 22
4400: PUSH
4401: LD_INT 2
4403: PUSH
4404: EMPTY
4405: LIST
4406: LIST
4407: PUSH
4408: LD_INT 21
4410: PUSH
4411: LD_INT 1
4413: PUSH
4414: EMPTY
4415: LIST
4416: LIST
4417: PUSH
4418: EMPTY
4419: LIST
4420: LIST
4421: PPUSH
4422: CALL_OW 69
4426: PUSH
4427: LD_INT 0
4429: EQUAL
4430: IFFALSE 4391
// if IsOk ( sol ) then
4432: LD_VAR 0 1
4436: PPUSH
4437: CALL_OW 302
4441: IFFALSE 4461
// begin sol2 := others diff sol ;
4443: LD_ADDR_VAR 0 2
4447: PUSH
4448: LD_EXP 28
4452: PUSH
4453: LD_VAR 0 1
4457: DIFF
4458: ST_TO_ADDR
// end else
4459: GO 4463
// exit ;
4461: GO 4965
// if not Lisa and not sol2 then
4463: LD_EXP 23
4467: NOT
4468: IFFALSE 4477
4470: PUSH
4471: LD_VAR 0 2
4475: NOT
4476: AND
4477: IFFALSE 4481
// exit ;
4479: GO 4965
// DialogueOn ;
4481: CALL_OW 6
// if Lisa then
4485: LD_EXP 23
4489: IFFALSE 4505
// Say ( Lisa , D5a-Lisa-1 ) else
4491: LD_EXP 23
4495: PPUSH
4496: LD_STRING D5a-Lisa-1
4498: PPUSH
4499: CALL_OW 88
4503: GO 4580
// if sol2 then
4505: LD_VAR 0 2
4509: IFFALSE 4580
// case GetSex ( sol2 [ 1 ] ) of sex_male :
4511: LD_VAR 0 2
4515: PUSH
4516: LD_INT 1
4518: ARRAY
4519: PPUSH
4520: CALL_OW 258
4524: PUSH
4525: LD_INT 1
4527: DOUBLE
4528: EQUAL
4529: IFTRUE 4533
4531: GO 4552
4533: POP
// Say ( sol2 [ 1 ] , D5-Sol2-1 ) ; sex_female :
4534: LD_VAR 0 2
4538: PUSH
4539: LD_INT 1
4541: ARRAY
4542: PPUSH
4543: LD_STRING D5-Sol2-1
4545: PPUSH
4546: CALL_OW 88
4550: GO 4580
4552: LD_INT 2
4554: DOUBLE
4555: EQUAL
4556: IFTRUE 4560
4558: GO 4579
4560: POP
// Say ( sol2 [ 1 ] , D5-FSol2-1 ) ; end ;
4561: LD_VAR 0 2
4565: PUSH
4566: LD_INT 1
4568: ARRAY
4569: PPUSH
4570: LD_STRING D5-FSol2-1
4572: PPUSH
4573: CALL_OW 88
4577: GO 4580
4579: POP
// Say ( sol , D5-Sol1-2 ) ;
4580: LD_VAR 0 1
4584: PPUSH
4585: LD_STRING D5-Sol1-2
4587: PPUSH
4588: CALL_OW 88
// if Lisa then
4592: LD_EXP 23
4596: IFFALSE 4612
// Say ( Lisa , D5a-Lisa-2 ) else
4598: LD_EXP 23
4602: PPUSH
4603: LD_STRING D5a-Lisa-2
4605: PPUSH
4606: CALL_OW 88
4610: GO 4687
// if sol2 then
4612: LD_VAR 0 2
4616: IFFALSE 4687
// case GetSex ( sol2 [ 1 ] ) of sex_male :
4618: LD_VAR 0 2
4622: PUSH
4623: LD_INT 1
4625: ARRAY
4626: PPUSH
4627: CALL_OW 258
4631: PUSH
4632: LD_INT 1
4634: DOUBLE
4635: EQUAL
4636: IFTRUE 4640
4638: GO 4659
4640: POP
// Say ( sol2 [ 1 ] , D5-Sol2-2 ) ; sex_female :
4641: LD_VAR 0 2
4645: PUSH
4646: LD_INT 1
4648: ARRAY
4649: PPUSH
4650: LD_STRING D5-Sol2-2
4652: PPUSH
4653: CALL_OW 88
4657: GO 4687
4659: LD_INT 2
4661: DOUBLE
4662: EQUAL
4663: IFTRUE 4667
4665: GO 4686
4667: POP
// Say ( sol2 [ 1 ] , D5-FSol2-2 ) ; end ;
4668: LD_VAR 0 2
4672: PUSH
4673: LD_INT 1
4675: ARRAY
4676: PPUSH
4677: LD_STRING D5-FSol2-2
4679: PPUSH
4680: CALL_OW 88
4684: GO 4687
4686: POP
// Say ( sol , D5a-Sol1-3 ) ;
4687: LD_VAR 0 1
4691: PPUSH
4692: LD_STRING D5a-Sol1-3
4694: PPUSH
4695: CALL_OW 88
// if Lisa then
4699: LD_EXP 23
4703: IFFALSE 4717
// Say ( Lisa , D5a-Lisa-3 ) ;
4705: LD_EXP 23
4709: PPUSH
4710: LD_STRING D5a-Lisa-3
4712: PPUSH
4713: CALL_OW 88
// if not sol2 then
4717: LD_VAR 0 2
4721: NOT
4722: IFFALSE 4730
// begin DialogueOff ;
4724: CALL_OW 7
// exit ;
4728: GO 4965
// end ; case GetSex ( sol2 [ 1 ] ) of sex_male :
4730: LD_VAR 0 2
4734: PUSH
4735: LD_INT 1
4737: ARRAY
4738: PPUSH
4739: CALL_OW 258
4743: PUSH
4744: LD_INT 1
4746: DOUBLE
4747: EQUAL
4748: IFTRUE 4752
4750: GO 4771
4752: POP
// Say ( sol2 [ 1 ] , D5-Sol2-3 ) ; sex_female :
4753: LD_VAR 0 2
4757: PUSH
4758: LD_INT 1
4760: ARRAY
4761: PPUSH
4762: LD_STRING D5-Sol2-3
4764: PPUSH
4765: CALL_OW 88
4769: GO 4799
4771: LD_INT 2
4773: DOUBLE
4774: EQUAL
4775: IFTRUE 4779
4777: GO 4798
4779: POP
// Say ( sol2 [ 1 ] , D5-FSol2-3 ) ; end ;
4780: LD_VAR 0 2
4784: PUSH
4785: LD_INT 1
4787: ARRAY
4788: PPUSH
4789: LD_STRING D5-FSol2-3
4791: PPUSH
4792: CALL_OW 88
4796: GO 4799
4798: POP
// Say ( sol , D5-Sol1-4 ) ;
4799: LD_VAR 0 1
4803: PPUSH
4804: LD_STRING D5-Sol1-4
4806: PPUSH
4807: CALL_OW 88
// case GetSex ( sol2 [ 1 ] ) of sex_male :
4811: LD_VAR 0 2
4815: PUSH
4816: LD_INT 1
4818: ARRAY
4819: PPUSH
4820: CALL_OW 258
4824: PUSH
4825: LD_INT 1
4827: DOUBLE
4828: EQUAL
4829: IFTRUE 4833
4831: GO 4852
4833: POP
// Say ( sol2 [ 1 ] , D5-Sol2-4 ) ; sex_female :
4834: LD_VAR 0 2
4838: PUSH
4839: LD_INT 1
4841: ARRAY
4842: PPUSH
4843: LD_STRING D5-Sol2-4
4845: PPUSH
4846: CALL_OW 88
4850: GO 4880
4852: LD_INT 2
4854: DOUBLE
4855: EQUAL
4856: IFTRUE 4860
4858: GO 4879
4860: POP
// Say ( sol2 [ 1 ] , D5-FSol2-4 ) ; end ;
4861: LD_VAR 0 2
4865: PUSH
4866: LD_INT 1
4868: ARRAY
4869: PPUSH
4870: LD_STRING D5-FSol2-4
4872: PPUSH
4873: CALL_OW 88
4877: GO 4880
4879: POP
// Say ( sol , D5-Sol1-5 ) ;
4880: LD_VAR 0 1
4884: PPUSH
4885: LD_STRING D5-Sol1-5
4887: PPUSH
4888: CALL_OW 88
// case GetSex ( sol2 [ 1 ] ) of sex_male :
4892: LD_VAR 0 2
4896: PUSH
4897: LD_INT 1
4899: ARRAY
4900: PPUSH
4901: CALL_OW 258
4905: PUSH
4906: LD_INT 1
4908: DOUBLE
4909: EQUAL
4910: IFTRUE 4914
4912: GO 4933
4914: POP
// Say ( sol2 [ 1 ] , D5-Sol2-5 ) ; sex_female :
4915: LD_VAR 0 2
4919: PUSH
4920: LD_INT 1
4922: ARRAY
4923: PPUSH
4924: LD_STRING D5-Sol2-5
4926: PPUSH
4927: CALL_OW 88
4931: GO 4961
4933: LD_INT 2
4935: DOUBLE
4936: EQUAL
4937: IFTRUE 4941
4939: GO 4960
4941: POP
// Say ( sol2 [ 1 ] , D5-FSol2-5 ) ; end ;
4942: LD_VAR 0 2
4946: PUSH
4947: LD_INT 1
4949: ARRAY
4950: PPUSH
4951: LD_STRING D5-FSol2-5
4953: PPUSH
4954: CALL_OW 88
4958: GO 4961
4960: POP
// DialogueOff ;
4961: CALL_OW 7
// end ;
4965: PPOPN 2
4967: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_apeman_engineer ] ] ) >= 5 do
4968: LD_INT 22
4970: PUSH
4971: LD_INT 1
4973: PUSH
4974: EMPTY
4975: LIST
4976: LIST
4977: PUSH
4978: LD_INT 25
4980: PUSH
4981: LD_INT 16
4983: PUSH
4984: EMPTY
4985: LIST
4986: LIST
4987: PUSH
4988: EMPTY
4989: LIST
4990: LIST
4991: PPUSH
4992: CALL_OW 69
4996: PUSH
4997: LD_INT 5
4999: GREATEREQUAL
5000: IFFALSE 5020
5002: GO 5004
5004: DISABLE
// begin ChangeMissionObjectives ( M1b ) ;
5005: LD_STRING M1b
5007: PPUSH
5008: CALL_OW 337
// apeman_army := true ;
5012: LD_ADDR_EXP 9
5016: PUSH
5017: LD_INT 1
5019: ST_TO_ADDR
// end ;
5020: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] , [ f_constructed ] ] ) do
5021: LD_INT 22
5023: PUSH
5024: LD_INT 1
5026: PUSH
5027: EMPTY
5028: LIST
5029: LIST
5030: PUSH
5031: LD_INT 30
5033: PUSH
5034: LD_INT 3
5036: PUSH
5037: EMPTY
5038: LIST
5039: LIST
5040: PUSH
5041: LD_INT 57
5043: PUSH
5044: EMPTY
5045: LIST
5046: PUSH
5047: EMPTY
5048: LIST
5049: LIST
5050: LIST
5051: PPUSH
5052: CALL_OW 69
5056: IFFALSE 5068
5058: GO 5060
5060: DISABLE
// ChangeMissionObjectives ( M1c ) ;
5061: LD_STRING M1c
5063: PPUSH
5064: CALL_OW 337
5068: END
// every 0 0$1 trigger GetTech ( tech_radar , 1 ) = state_researched do
5069: LD_INT 6
5071: PPUSH
5072: LD_INT 1
5074: PPUSH
5075: CALL_OW 321
5079: PUSH
5080: LD_INT 2
5082: EQUAL
5083: IFFALSE 5103
5085: GO 5087
5087: DISABLE
// begin ChangeMissionObjectives ( M2a ) ;
5088: LD_STRING M2a
5090: PPUSH
5091: CALL_OW 337
// radar_researched := true ;
5095: LD_ADDR_EXP 10
5099: PUSH
5100: LD_INT 1
5102: ST_TO_ADDR
// end ;
5103: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_weapon , us_radar ] , [ f_bweapon , us_radar ] ] ] ) do
5104: LD_INT 22
5106: PUSH
5107: LD_INT 1
5109: PUSH
5110: EMPTY
5111: LIST
5112: LIST
5113: PUSH
5114: LD_INT 2
5116: PUSH
5117: LD_INT 34
5119: PUSH
5120: LD_INT 11
5122: PUSH
5123: EMPTY
5124: LIST
5125: LIST
5126: PUSH
5127: LD_INT 35
5129: PUSH
5130: LD_INT 11
5132: PUSH
5133: EMPTY
5134: LIST
5135: LIST
5136: PUSH
5137: EMPTY
5138: LIST
5139: LIST
5140: LIST
5141: PUSH
5142: EMPTY
5143: LIST
5144: LIST
5145: PPUSH
5146: CALL_OW 69
5150: IFFALSE 5170
5152: GO 5154
5154: DISABLE
// begin ChangeMissionObjectives ( M2b ) ;
5155: LD_STRING M2b
5157: PPUSH
5158: CALL_OW 337
// radar_builded := true ;
5162: LD_ADDR_EXP 11
5166: PUSH
5167: LD_INT 1
5169: ST_TO_ADDR
// end ;
5170: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) = 0 and not first_apeman_tamed do
5171: LD_INT 22
5173: PUSH
5174: LD_INT 0
5176: PUSH
5177: EMPTY
5178: LIST
5179: LIST
5180: PUSH
5181: LD_INT 25
5183: PUSH
5184: LD_INT 12
5186: PUSH
5187: EMPTY
5188: LIST
5189: LIST
5190: PUSH
5191: EMPTY
5192: LIST
5193: LIST
5194: PPUSH
5195: CALL_OW 69
5199: PUSH
5200: LD_INT 0
5202: EQUAL
5203: IFFALSE 5212
5205: PUSH
5206: LD_EXP 8
5210: NOT
5211: AND
5212: IFFALSE 5224
5214: GO 5216
5216: DISABLE
// YouLost ( Apeman ) ;
5217: LD_STRING Apeman
5219: PPUSH
5220: CALL_OW 104
5224: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_apeman_engineer ] ] ) >= 7 do var i , filter ;
5225: LD_INT 22
5227: PUSH
5228: LD_INT 1
5230: PUSH
5231: EMPTY
5232: LIST
5233: LIST
5234: PUSH
5235: LD_INT 25
5237: PUSH
5238: LD_INT 16
5240: PUSH
5241: EMPTY
5242: LIST
5243: LIST
5244: PUSH
5245: EMPTY
5246: LIST
5247: LIST
5248: PPUSH
5249: CALL_OW 69
5253: PUSH
5254: LD_INT 7
5256: GREATEREQUAL
5257: IFFALSE 5355
5259: GO 5261
5261: DISABLE
5262: LD_INT 0
5264: PPUSH
5265: PPUSH
// begin filter := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 4 ] ] ) ^ JMM ;
5266: LD_ADDR_VAR 0 2
5270: PUSH
5271: LD_INT 22
5273: PUSH
5274: LD_INT 1
5276: PUSH
5277: EMPTY
5278: LIST
5279: LIST
5280: PUSH
5281: LD_INT 21
5283: PUSH
5284: LD_INT 1
5286: PUSH
5287: EMPTY
5288: LIST
5289: LIST
5290: PUSH
5291: LD_INT 25
5293: PUSH
5294: LD_INT 4
5296: PUSH
5297: EMPTY
5298: LIST
5299: LIST
5300: PUSH
5301: EMPTY
5302: LIST
5303: LIST
5304: LIST
5305: PPUSH
5306: CALL_OW 69
5310: PUSH
5311: LD_EXP 17
5315: ADD
5316: ST_TO_ADDR
// if filter then
5317: LD_VAR 0 2
5321: IFFALSE 5355
// for i in filter do
5323: LD_ADDR_VAR 0 1
5327: PUSH
5328: LD_VAR 0 2
5332: PUSH
5333: FOR_IN
5334: IFFALSE 5353
// AddExperience ( i , 4 , 3500 ) ;
5336: LD_VAR 0 1
5340: PPUSH
5341: LD_INT 4
5343: PPUSH
5344: LD_INT 3500
5346: PPUSH
5347: CALL_OW 492
5351: GO 5333
5353: POP
5354: POP
// end ;
5355: PPOPN 2
5357: END
// every 0 0$1 trigger end_mission do var i , tmp , m1 , m2 , m3 ;
5358: LD_EXP 14
5362: IFFALSE 6553
5364: GO 5366
5366: DISABLE
5367: LD_INT 0
5369: PPUSH
5370: PPUSH
5371: PPUSH
5372: PPUSH
5373: PPUSH
// begin if apeKillCounter = 0 then
5374: LD_EXP 15
5378: PUSH
5379: LD_INT 0
5381: EQUAL
5382: IFFALSE 5391
// SetAchievement ( ACH_APEKILLER ) ;
5384: LD_STRING ACH_APEKILLER
5386: PPUSH
5387: CALL_OW 543
// if FilterAllUnits ( [ f_side , 2 ] ) then
5391: LD_INT 22
5393: PUSH
5394: LD_INT 2
5396: PUSH
5397: EMPTY
5398: LIST
5399: LIST
5400: PPUSH
5401: CALL_OW 69
5405: IFFALSE 5443
// for i in FilterAllUnits ( [ f_side , 2 ] ) do
5407: LD_ADDR_VAR 0 1
5411: PUSH
5412: LD_INT 22
5414: PUSH
5415: LD_INT 2
5417: PUSH
5418: EMPTY
5419: LIST
5420: LIST
5421: PPUSH
5422: CALL_OW 69
5426: PUSH
5427: FOR_IN
5428: IFFALSE 5441
// RemoveUnit ( i ) ;
5430: LD_VAR 0 1
5434: PPUSH
5435: CALL_OW 64
5439: GO 5427
5441: POP
5442: POP
// m1 := false ;
5443: LD_ADDR_VAR 0 3
5447: PUSH
5448: LD_INT 0
5450: ST_TO_ADDR
// m2 := false ;
5451: LD_ADDR_VAR 0 4
5455: PUSH
5456: LD_INT 0
5458: ST_TO_ADDR
// m3 := false ;
5459: LD_ADDR_VAR 0 5
5463: PUSH
5464: LD_INT 0
5466: ST_TO_ADDR
// if apeman_army then
5467: LD_EXP 9
5471: IFFALSE 5493
// begin AddMedal ( Tame , 1 ) ;
5473: LD_STRING Tame
5475: PPUSH
5476: LD_INT 1
5478: PPUSH
5479: CALL_OW 101
// m1 := true ;
5483: LD_ADDR_VAR 0 3
5487: PUSH
5488: LD_INT 1
5490: ST_TO_ADDR
// end else
5491: GO 5504
// AddMedal ( Tame , - 1 ) ;
5493: LD_STRING Tame
5495: PPUSH
5496: LD_INT 1
5498: NEG
5499: PPUSH
5500: CALL_OW 101
// if radar_researched then
5504: LD_EXP 10
5508: IFFALSE 5540
// begin SaveVariable ( true , radarResInDelta ) ;
5510: LD_INT 1
5512: PPUSH
5513: LD_STRING radarResInDelta
5515: PPUSH
5516: CALL_OW 39
// AddMedal ( Radar , 1 ) ;
5520: LD_STRING Radar
5522: PPUSH
5523: LD_INT 1
5525: PPUSH
5526: CALL_OW 101
// m2 := true ;
5530: LD_ADDR_VAR 0 4
5534: PUSH
5535: LD_INT 1
5537: ST_TO_ADDR
// end else
5538: GO 5570
// if radar_allowed then
5540: LD_EXP 7
5544: IFFALSE 5559
// AddMedal ( Radar , - 2 ) else
5546: LD_STRING Radar
5548: PPUSH
5549: LD_INT 2
5551: NEG
5552: PPUSH
5553: CALL_OW 101
5557: GO 5570
// AddMedal ( Radar , - 1 ) ;
5559: LD_STRING Radar
5561: PPUSH
5562: LD_INT 1
5564: NEG
5565: PPUSH
5566: CALL_OW 101
// if radar_builded then
5570: LD_EXP 11
5574: IFFALSE 5596
// begin AddMedal ( BuildRadar , 1 ) ;
5576: LD_STRING BuildRadar
5578: PPUSH
5579: LD_INT 1
5581: PPUSH
5582: CALL_OW 101
// m3 := true ;
5586: LD_ADDR_VAR 0 5
5590: PUSH
5591: LD_INT 1
5593: ST_TO_ADDR
// end else
5594: GO 5607
// AddMedal ( BuildRadar , - 1 ) ;
5596: LD_STRING BuildRadar
5598: PPUSH
5599: LD_INT 1
5601: NEG
5602: PPUSH
5603: CALL_OW 101
// if tick <= 7 7$00 then
5607: LD_OWVAR 1
5611: PUSH
5612: LD_INT 14700
5614: LESSEQUAL
5615: IFFALSE 5624
// SetAchievement ( ACH_ASPEED_5 ) ;
5617: LD_STRING ACH_ASPEED_5
5619: PPUSH
5620: CALL_OW 543
// if m1 and m2 and m3 and Difficulty >= 3 then
5624: LD_VAR 0 3
5628: IFFALSE 5636
5630: PUSH
5631: LD_VAR 0 4
5635: AND
5636: IFFALSE 5644
5638: PUSH
5639: LD_VAR 0 5
5643: AND
5644: IFFALSE 5656
5646: PUSH
5647: LD_OWVAR 67
5651: PUSH
5652: LD_INT 3
5654: GREATEREQUAL
5655: AND
5656: IFFALSE 5668
// SetAchievementEX ( ACH_AMER , 5 ) ;
5658: LD_STRING ACH_AMER
5660: PPUSH
5661: LD_INT 5
5663: PPUSH
5664: CALL_OW 564
// GiveMedals ( MAIN ) ;
5668: LD_STRING MAIN
5670: PPUSH
5671: CALL_OW 102
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ;
5675: LD_ADDR_VAR 0 2
5679: PUSH
5680: LD_INT 22
5682: PUSH
5683: LD_INT 1
5685: PUSH
5686: EMPTY
5687: LIST
5688: LIST
5689: PUSH
5690: LD_INT 21
5692: PUSH
5693: LD_INT 1
5695: PUSH
5696: EMPTY
5697: LIST
5698: LIST
5699: PUSH
5700: LD_INT 2
5702: PUSH
5703: LD_INT 25
5705: PUSH
5706: LD_INT 1
5708: PUSH
5709: EMPTY
5710: LIST
5711: LIST
5712: PUSH
5713: LD_INT 25
5715: PUSH
5716: LD_INT 2
5718: PUSH
5719: EMPTY
5720: LIST
5721: LIST
5722: PUSH
5723: LD_INT 25
5725: PUSH
5726: LD_INT 3
5728: PUSH
5729: EMPTY
5730: LIST
5731: LIST
5732: PUSH
5733: LD_INT 25
5735: PUSH
5736: LD_INT 4
5738: PUSH
5739: EMPTY
5740: LIST
5741: LIST
5742: PUSH
5743: EMPTY
5744: LIST
5745: LIST
5746: LIST
5747: LIST
5748: LIST
5749: PUSH
5750: EMPTY
5751: LIST
5752: LIST
5753: LIST
5754: PPUSH
5755: CALL_OW 69
5759: ST_TO_ADDR
// RewardPeople ( tmp ) ;
5760: LD_VAR 0 2
5764: PPUSH
5765: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
5769: LD_EXP 17
5773: PPUSH
5774: LD_EXP 2
5778: PUSH
5779: LD_STRING JMM
5781: STR
5782: PPUSH
5783: CALL_OW 38
// if IsOk ( Gladstone ) then
5787: LD_EXP 18
5791: PPUSH
5792: CALL_OW 302
5796: IFFALSE 5823
// begin ToLua ( enableBioCharacter(BIO_TIM) ) ;
5798: LD_STRING enableBioCharacter(BIO_TIM)
5800: PPUSH
5801: CALL_OW 559
// SaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
5805: LD_EXP 18
5809: PPUSH
5810: LD_EXP 2
5814: PUSH
5815: LD_STRING Gladstone
5817: STR
5818: PPUSH
5819: CALL_OW 38
// end ; if IsOk ( Denis ) and GetSide ( Denis ) = 1 then
5823: LD_EXP 20
5827: PPUSH
5828: CALL_OW 302
5832: IFFALSE 5849
5834: PUSH
5835: LD_EXP 20
5839: PPUSH
5840: CALL_OW 255
5844: PUSH
5845: LD_INT 1
5847: EQUAL
5848: AND
5849: IFFALSE 5886
// begin ToLua ( enableBioCharacter(BIO_DENIS) ) ;
5851: LD_STRING enableBioCharacter(BIO_DENIS)
5853: PPUSH
5854: CALL_OW 559
// SaveCharacters ( Denis , mission_prefix & Denis ) ;
5858: LD_EXP 20
5862: PPUSH
5863: LD_EXP 2
5867: PUSH
5868: LD_STRING Denis
5870: STR
5871: PPUSH
5872: CALL_OW 38
// SaveVariable ( true , DenisInDelta ) ;
5876: LD_INT 1
5878: PPUSH
5879: LD_STRING DenisInDelta
5881: PPUSH
5882: CALL_OW 39
// end ; if IsOk ( Lisa ) then
5886: LD_EXP 23
5890: PPUSH
5891: CALL_OW 302
5895: IFFALSE 5915
// begin SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
5897: LD_EXP 23
5901: PPUSH
5902: LD_EXP 2
5906: PUSH
5907: LD_STRING Lisa
5909: STR
5910: PPUSH
5911: CALL_OW 38
// end ; if IsOk ( Frank ) then
5915: LD_EXP 24
5919: PPUSH
5920: CALL_OW 302
5924: IFFALSE 5944
// begin SaveCharacters ( Frank , mission_prefix & Frank ) ;
5926: LD_EXP 24
5930: PPUSH
5931: LD_EXP 2
5935: PUSH
5936: LD_STRING Frank
5938: STR
5939: PPUSH
5940: CALL_OW 38
// end ; if IsOk ( Bobby ) then
5944: LD_EXP 25
5948: PPUSH
5949: CALL_OW 302
5953: IFFALSE 5973
// begin SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
5955: LD_EXP 25
5959: PPUSH
5960: LD_EXP 2
5964: PUSH
5965: LD_STRING Bobby
5967: STR
5968: PPUSH
5969: CALL_OW 38
// end ; if IsOk ( Cyrus ) then
5973: LD_EXP 26
5977: PPUSH
5978: CALL_OW 302
5982: IFFALSE 6002
// begin SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
5984: LD_EXP 26
5988: PPUSH
5989: LD_EXP 2
5993: PUSH
5994: LD_STRING Cyrus
5996: STR
5997: PPUSH
5998: CALL_OW 38
// end ; if IsOk ( Brown ) then
6002: LD_EXP 21
6006: PPUSH
6007: CALL_OW 302
6011: IFFALSE 6031
// begin SaveCharacters ( Brown , mission_prefix & Brown ) ;
6013: LD_EXP 21
6017: PPUSH
6018: LD_EXP 2
6022: PUSH
6023: LD_STRING Brown
6025: STR
6026: PPUSH
6027: CALL_OW 38
// end ; if IsOk ( Donaldson ) then
6031: LD_EXP 22
6035: PPUSH
6036: CALL_OW 302
6040: IFFALSE 6060
// begin SaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
6042: LD_EXP 22
6046: PPUSH
6047: LD_EXP 2
6051: PUSH
6052: LD_STRING Donaldson
6054: STR
6055: PPUSH
6056: CALL_OW 38
// end ; if IsOk ( Mike ) then
6060: LD_EXP 27
6064: PPUSH
6065: CALL_OW 302
6069: IFFALSE 6089
// SaveCharacters ( Mike , mission_prefix & Mike ) ;
6071: LD_EXP 27
6075: PPUSH
6076: LD_EXP 2
6080: PUSH
6081: LD_STRING Mike
6083: STR
6084: PPUSH
6085: CALL_OW 38
// if others then
6089: LD_EXP 28
6093: IFFALSE 6107
// SaveCharacters ( others , othersInDelta ) ;
6095: LD_EXP 28
6099: PPUSH
6100: LD_STRING othersInDelta
6102: PPUSH
6103: CALL_OW 38
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_apeman_engineer ] ] ) then
6107: LD_INT 22
6109: PUSH
6110: LD_INT 1
6112: PUSH
6113: EMPTY
6114: LIST
6115: LIST
6116: PUSH
6117: LD_INT 25
6119: PUSH
6120: LD_INT 16
6122: PUSH
6123: EMPTY
6124: LIST
6125: LIST
6126: PUSH
6127: EMPTY
6128: LIST
6129: LIST
6130: PPUSH
6131: CALL_OW 69
6135: IFFALSE 6179
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_apeman_engineer ] ] ) diff Mike , apeInDelta ) ;
6137: LD_INT 22
6139: PUSH
6140: LD_INT 1
6142: PUSH
6143: EMPTY
6144: LIST
6145: LIST
6146: PUSH
6147: LD_INT 25
6149: PUSH
6150: LD_INT 16
6152: PUSH
6153: EMPTY
6154: LIST
6155: LIST
6156: PUSH
6157: EMPTY
6158: LIST
6159: LIST
6160: PPUSH
6161: CALL_OW 69
6165: PUSH
6166: LD_EXP 27
6170: DIFF
6171: PPUSH
6172: LD_STRING apeInDelta
6174: PPUSH
6175: CALL_OW 38
// tmp := [ ] ;
6179: LD_ADDR_VAR 0 2
6183: PUSH
6184: EMPTY
6185: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) then
6186: LD_INT 22
6188: PUSH
6189: LD_INT 1
6191: PUSH
6192: EMPTY
6193: LIST
6194: LIST
6195: PUSH
6196: LD_INT 21
6198: PUSH
6199: LD_INT 2
6201: PUSH
6202: EMPTY
6203: LIST
6204: LIST
6205: PUSH
6206: EMPTY
6207: LIST
6208: LIST
6209: PPUSH
6210: CALL_OW 69
6214: IFFALSE 6325
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) do
6216: LD_ADDR_VAR 0 1
6220: PUSH
6221: LD_INT 22
6223: PUSH
6224: LD_INT 1
6226: PUSH
6227: EMPTY
6228: LIST
6229: LIST
6230: PUSH
6231: LD_INT 21
6233: PUSH
6234: LD_INT 2
6236: PUSH
6237: EMPTY
6238: LIST
6239: LIST
6240: PUSH
6241: EMPTY
6242: LIST
6243: LIST
6244: PPUSH
6245: CALL_OW 69
6249: PUSH
6250: FOR_IN
6251: IFFALSE 6323
// tmp := tmp ^ [ GetNation ( i ) , GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) ] ;
6253: LD_ADDR_VAR 0 2
6257: PUSH
6258: LD_VAR 0 2
6262: PUSH
6263: LD_VAR 0 1
6267: PPUSH
6268: CALL_OW 248
6272: PUSH
6273: LD_VAR 0 1
6277: PPUSH
6278: CALL_OW 265
6282: PUSH
6283: LD_VAR 0 1
6287: PPUSH
6288: CALL_OW 262
6292: PUSH
6293: LD_VAR 0 1
6297: PPUSH
6298: CALL_OW 263
6302: PUSH
6303: LD_VAR 0 1
6307: PPUSH
6308: CALL_OW 264
6312: PUSH
6313: EMPTY
6314: LIST
6315: LIST
6316: LIST
6317: LIST
6318: LIST
6319: ADD
6320: ST_TO_ADDR
6321: GO 6250
6323: POP
6324: POP
// if tmp then
6325: LD_VAR 0 2
6329: IFFALSE 6343
// SaveVariable ( tmp , vehiclesInDelta ) ;
6331: LD_VAR 0 2
6335: PPUSH
6336: LD_STRING vehiclesInDelta
6338: PPUSH
6339: CALL_OW 39
// tmp := [ ] ;
6343: LD_ADDR_VAR 0 2
6347: PUSH
6348: EMPTY
6349: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) then
6350: LD_INT 22
6352: PUSH
6353: LD_INT 1
6355: PUSH
6356: EMPTY
6357: LIST
6358: LIST
6359: PUSH
6360: LD_INT 21
6362: PUSH
6363: LD_INT 3
6365: PUSH
6366: EMPTY
6367: LIST
6368: LIST
6369: PUSH
6370: EMPTY
6371: LIST
6372: LIST
6373: PPUSH
6374: CALL_OW 69
6378: IFFALSE 6531
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) do
6380: LD_ADDR_VAR 0 1
6384: PUSH
6385: LD_INT 22
6387: PUSH
6388: LD_INT 1
6390: PUSH
6391: EMPTY
6392: LIST
6393: LIST
6394: PUSH
6395: LD_INT 21
6397: PUSH
6398: LD_INT 3
6400: PUSH
6401: EMPTY
6402: LIST
6403: LIST
6404: PUSH
6405: EMPTY
6406: LIST
6407: LIST
6408: PPUSH
6409: CALL_OW 69
6413: PUSH
6414: FOR_IN
6415: IFFALSE 6529
// tmp := tmp ^ [ [ GetBType ( i ) , GetBLevel ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) , GetBWeapon ( i ) ] ] ;
6417: LD_ADDR_VAR 0 2
6421: PUSH
6422: LD_VAR 0 2
6426: PUSH
6427: LD_VAR 0 1
6431: PPUSH
6432: CALL_OW 266
6436: PUSH
6437: LD_VAR 0 1
6441: PPUSH
6442: CALL_OW 267
6446: PUSH
6447: LD_VAR 0 1
6451: PPUSH
6452: CALL_OW 250
6456: PUSH
6457: LD_VAR 0 1
6461: PPUSH
6462: CALL_OW 251
6466: PUSH
6467: LD_VAR 0 1
6471: PPUSH
6472: CALL_OW 254
6476: PUSH
6477: LD_VAR 0 1
6481: PPUSH
6482: LD_INT 1
6484: PPUSH
6485: CALL_OW 268
6489: PUSH
6490: LD_VAR 0 1
6494: PPUSH
6495: LD_INT 2
6497: PPUSH
6498: CALL_OW 268
6502: PUSH
6503: LD_VAR 0 1
6507: PPUSH
6508: CALL_OW 269
6512: PUSH
6513: EMPTY
6514: LIST
6515: LIST
6516: LIST
6517: LIST
6518: LIST
6519: LIST
6520: LIST
6521: LIST
6522: PUSH
6523: EMPTY
6524: LIST
6525: ADD
6526: ST_TO_ADDR
6527: GO 6414
6529: POP
6530: POP
// if tmp then
6531: LD_VAR 0 2
6535: IFFALSE 6549
// SaveVariable ( tmp , buildingsInDelta ) ;
6537: LD_VAR 0 2
6541: PPUSH
6542: LD_STRING buildingsInDelta
6544: PPUSH
6545: CALL_OW 39
// YouWin ;
6549: CALL_OW 103
// end ; end_of_file
6553: PPOPN 5
6555: END
// export function PrepareArabianTroops ( amount , skill , area ) ; var i , un , tmp ; begin
6556: LD_INT 0
6558: PPUSH
6559: PPUSH
6560: PPUSH
6561: PPUSH
// InitHc ;
6562: CALL_OW 19
// InitUc ;
6566: CALL_OW 18
// uc_side := 2 ;
6570: LD_ADDR_OWVAR 20
6574: PUSH
6575: LD_INT 2
6577: ST_TO_ADDR
// uc_nation := 2 ;
6578: LD_ADDR_OWVAR 21
6582: PUSH
6583: LD_INT 2
6585: ST_TO_ADDR
// if not amount then
6586: LD_VAR 0 1
6590: NOT
6591: IFFALSE 6595
// exit ;
6593: GO 6718
// for i = 1 to amount do
6595: LD_ADDR_VAR 0 5
6599: PUSH
6600: DOUBLE
6601: LD_INT 1
6603: DEC
6604: ST_TO_ADDR
6605: LD_VAR 0 1
6609: PUSH
6610: FOR_TO
6611: IFFALSE 6706
// begin PrepareHuman ( false , 1 , skill ) ;
6613: LD_INT 0
6615: PPUSH
6616: LD_INT 1
6618: PPUSH
6619: LD_VAR 0 2
6623: PPUSH
6624: CALL_OW 380
// un := CreateHuman ;
6628: LD_ADDR_VAR 0 6
6632: PUSH
6633: CALL_OW 44
6637: ST_TO_ADDR
// tmp := Insert ( tmp , 1 , un ) ;
6638: LD_ADDR_VAR 0 7
6642: PUSH
6643: LD_VAR 0 7
6647: PPUSH
6648: LD_INT 1
6650: PPUSH
6651: LD_VAR 0 6
6655: PPUSH
6656: CALL_OW 2
6660: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
6661: LD_VAR 0 6
6665: PPUSH
6666: LD_VAR 0 3
6670: PPUSH
6671: LD_INT 0
6673: PPUSH
6674: CALL_OW 49
// if i mod 2 = 0 then
6678: LD_VAR 0 5
6682: PUSH
6683: LD_INT 2
6685: MOD
6686: PUSH
6687: LD_INT 0
6689: EQUAL
6690: IFFALSE 6704
// SetTag ( un , 11 ) ;
6692: LD_VAR 0 6
6696: PPUSH
6697: LD_INT 11
6699: PPUSH
6700: CALL_OW 109
// end ;
6704: GO 6610
6706: POP
6707: POP
// result := tmp ;
6708: LD_ADDR_VAR 0 4
6712: PUSH
6713: LD_VAR 0 7
6717: ST_TO_ADDR
// end ;
6718: LD_VAR 0 4
6722: RET
// export ar_forces , ap_killers ; every 0 0$1 trigger Delta do var i , timer , more_troops , skill , eng , un , veh , force ;
6723: LD_EXP 6
6727: IFFALSE 7822
6729: GO 6731
6731: DISABLE
6732: LD_INT 0
6734: PPUSH
6735: PPUSH
6736: PPUSH
6737: PPUSH
6738: PPUSH
6739: PPUSH
6740: PPUSH
6741: PPUSH
// begin more_troops := false ;
6742: LD_ADDR_VAR 0 3
6746: PUSH
6747: LD_INT 0
6749: ST_TO_ADDR
// skill := [ 3 , 4 , 5 , 5 ] [ Difficulty ] ;
6750: LD_ADDR_VAR 0 4
6754: PUSH
6755: LD_INT 3
6757: PUSH
6758: LD_INT 4
6760: PUSH
6761: LD_INT 5
6763: PUSH
6764: LD_INT 5
6766: PUSH
6767: EMPTY
6768: LIST
6769: LIST
6770: LIST
6771: LIST
6772: PUSH
6773: LD_OWVAR 67
6777: ARRAY
6778: ST_TO_ADDR
// timer := [ 5 5$00 , 4 4$00 , 3 3$00 , 2 2$30 ] [ Difficulty ] ;
6779: LD_ADDR_VAR 0 2
6783: PUSH
6784: LD_INT 10500
6786: PUSH
6787: LD_INT 8400
6789: PUSH
6790: LD_INT 6300
6792: PUSH
6793: LD_INT 5250
6795: PUSH
6796: EMPTY
6797: LIST
6798: LIST
6799: LIST
6800: LIST
6801: PUSH
6802: LD_OWVAR 67
6806: ARRAY
6807: ST_TO_ADDR
// force := [ ] ;
6808: LD_ADDR_VAR 0 8
6812: PUSH
6813: EMPTY
6814: ST_TO_ADDR
// ar_forces := [ ] ;
6815: LD_ADDR_EXP 29
6819: PUSH
6820: EMPTY
6821: ST_TO_ADDR
// ap_killers := [ ] ;
6822: LD_ADDR_EXP 30
6826: PUSH
6827: EMPTY
6828: ST_TO_ADDR
// Wait ( timer ) ;
6829: LD_VAR 0 2
6833: PPUSH
6834: CALL_OW 67
// if Denis and GetSide ( Denis ) = 4 then
6838: LD_EXP 20
6842: IFFALSE 6859
6844: PUSH
6845: LD_EXP 20
6849: PPUSH
6850: CALL_OW 255
6854: PUSH
6855: LD_INT 4
6857: EQUAL
6858: AND
6859: IFFALSE 6868
// Wait ( 0 0$45 ) ;
6861: LD_INT 1575
6863: PPUSH
6864: CALL_OW 67
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_armoury ] ] ) then
6868: LD_INT 22
6870: PUSH
6871: LD_INT 1
6873: PUSH
6874: EMPTY
6875: LIST
6876: LIST
6877: PUSH
6878: LD_INT 30
6880: PUSH
6881: LD_INT 4
6883: PUSH
6884: EMPTY
6885: LIST
6886: LIST
6887: PUSH
6888: EMPTY
6889: LIST
6890: LIST
6891: PPUSH
6892: CALL_OW 69
6896: IFFALSE 6913
// begin wait ( 1 1$25 ) ;
6898: LD_INT 2975
6900: PPUSH
6901: CALL_OW 67
// more_troops := true ;
6905: LD_ADDR_VAR 0 3
6909: PUSH
6910: LD_INT 1
6912: ST_TO_ADDR
// end ; if more_troops then
6913: LD_VAR 0 3
6917: IFFALSE 7113
// begin force := PrepareArabianTroops ( [ 4 , 5 , 6 , 7 ] [ Difficulty ] , skill , arArea2 ) ;
6919: LD_ADDR_VAR 0 8
6923: PUSH
6924: LD_INT 4
6926: PUSH
6927: LD_INT 5
6929: PUSH
6930: LD_INT 6
6932: PUSH
6933: LD_INT 7
6935: PUSH
6936: EMPTY
6937: LIST
6938: LIST
6939: LIST
6940: LIST
6941: PUSH
6942: LD_OWVAR 67
6946: ARRAY
6947: PPUSH
6948: LD_VAR 0 4
6952: PPUSH
6953: LD_INT 14
6955: PPUSH
6956: CALL 6556 0 3
6960: ST_TO_ADDR
// veh := PrepareTank ( 2 , 3 , ru_medium_tracked , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_heavy_machine_gun , ru_gatling_gun , ru_gun ] [ Difficulty ] , 90 ) ;
6961: LD_ADDR_VAR 0 7
6965: PUSH
6966: LD_INT 2
6968: PPUSH
6969: LD_INT 3
6971: PPUSH
6972: LD_INT 22
6974: PPUSH
6975: LD_INT 1
6977: PPUSH
6978: LD_INT 1
6980: PPUSH
6981: LD_INT 42
6983: PUSH
6984: LD_INT 42
6986: PUSH
6987: LD_INT 43
6989: PUSH
6990: LD_INT 44
6992: PUSH
6993: EMPTY
6994: LIST
6995: LIST
6996: LIST
6997: LIST
6998: PUSH
6999: LD_OWVAR 67
7003: ARRAY
7004: PPUSH
7005: LD_INT 90
7007: PPUSH
7008: CALL 449 0 7
7012: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
7013: LD_VAR 0 7
7017: PPUSH
7018: LD_INT 4
7020: PPUSH
7021: CALL_OW 233
// PlaceUnitArea ( veh , arArea1 , false ) ;
7025: LD_VAR 0 7
7029: PPUSH
7030: LD_INT 13
7032: PPUSH
7033: LD_INT 0
7035: PPUSH
7036: CALL_OW 49
// uc_side := 2 ;
7040: LD_ADDR_OWVAR 20
7044: PUSH
7045: LD_INT 2
7047: ST_TO_ADDR
// uc_nation := 2 ;
7048: LD_ADDR_OWVAR 21
7052: PUSH
7053: LD_INT 2
7055: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
7056: LD_INT 0
7058: PPUSH
7059: LD_INT 1
7061: PPUSH
7062: LD_VAR 0 4
7066: PPUSH
7067: CALL_OW 380
// un := CreateHuman ;
7071: LD_ADDR_VAR 0 6
7075: PUSH
7076: CALL_OW 44
7080: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
7081: LD_VAR 0 6
7085: PPUSH
7086: LD_VAR 0 7
7090: PPUSH
7091: CALL_OW 52
// force := force ^ un ;
7095: LD_ADDR_VAR 0 8
7099: PUSH
7100: LD_VAR 0 8
7104: PUSH
7105: LD_VAR 0 6
7109: ADD
7110: ST_TO_ADDR
// end else
7111: GO 7155
// begin force := PrepareArabianTroops ( [ 3 , 4 , 5 , 6 ] [ Difficulty ] , skill , arArea2 ) ;
7113: LD_ADDR_VAR 0 8
7117: PUSH
7118: LD_INT 3
7120: PUSH
7121: LD_INT 4
7123: PUSH
7124: LD_INT 5
7126: PUSH
7127: LD_INT 6
7129: PUSH
7130: EMPTY
7131: LIST
7132: LIST
7133: LIST
7134: LIST
7135: PUSH
7136: LD_OWVAR 67
7140: ARRAY
7141: PPUSH
7142: LD_VAR 0 4
7146: PPUSH
7147: LD_INT 14
7149: PPUSH
7150: CALL 6556 0 3
7154: ST_TO_ADDR
// end ; if force then
7155: LD_VAR 0 8
7159: IFFALSE 7171
// ar_forces := force ;
7161: LD_ADDR_EXP 29
7165: PUSH
7166: LD_VAR 0 8
7170: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
7171: LD_INT 35
7173: PPUSH
7174: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) = 0 ;
7178: LD_INT 22
7180: PUSH
7181: LD_INT 2
7183: PUSH
7184: EMPTY
7185: LIST
7186: LIST
7187: PUSH
7188: LD_INT 21
7190: PUSH
7191: LD_INT 1
7193: PUSH
7194: EMPTY
7195: LIST
7196: LIST
7197: PUSH
7198: EMPTY
7199: LIST
7200: LIST
7201: PPUSH
7202: CALL_OW 69
7206: PUSH
7207: LD_INT 0
7209: EQUAL
7210: IFFALSE 7171
// wait ( timer ) ;
7212: LD_VAR 0 2
7216: PPUSH
7217: CALL_OW 67
// force := PrepareArabianTroops ( [ 4 , 5 , 6 , 7 ] [ Difficulty ] , skill , [ arArea1 , arArea2 ] [ rand ( 1 , 2 ) ] ) ;
7221: LD_ADDR_VAR 0 8
7225: PUSH
7226: LD_INT 4
7228: PUSH
7229: LD_INT 5
7231: PUSH
7232: LD_INT 6
7234: PUSH
7235: LD_INT 7
7237: PUSH
7238: EMPTY
7239: LIST
7240: LIST
7241: LIST
7242: LIST
7243: PUSH
7244: LD_OWVAR 67
7248: ARRAY
7249: PPUSH
7250: LD_VAR 0 4
7254: PPUSH
7255: LD_INT 13
7257: PUSH
7258: LD_INT 14
7260: PUSH
7261: EMPTY
7262: LIST
7263: LIST
7264: PUSH
7265: LD_INT 1
7267: PPUSH
7268: LD_INT 2
7270: PPUSH
7271: CALL_OW 12
7275: ARRAY
7276: PPUSH
7277: CALL 6556 0 3
7281: ST_TO_ADDR
// if Difficulty > 1 and Delta then
7282: LD_OWVAR 67
7286: PUSH
7287: LD_INT 1
7289: GREATER
7290: IFFALSE 7298
7292: PUSH
7293: LD_EXP 6
7297: AND
7298: IFFALSE 7377
// begin uc_side := 2 ;
7300: LD_ADDR_OWVAR 20
7304: PUSH
7305: LD_INT 2
7307: ST_TO_ADDR
// uc_nation := 2 ;
7308: LD_ADDR_OWVAR 21
7312: PUSH
7313: LD_INT 2
7315: ST_TO_ADDR
// PrepareHuman ( false , 2 , skill ) ;
7316: LD_INT 0
7318: PPUSH
7319: LD_INT 2
7321: PPUSH
7322: LD_VAR 0 4
7326: PPUSH
7327: CALL_OW 380
// eng := CreateHuman ;
7331: LD_ADDR_VAR 0 5
7335: PUSH
7336: CALL_OW 44
7340: ST_TO_ADDR
// PlaceUnitArea ( eng , arArea1 , false ) ;
7341: LD_VAR 0 5
7345: PPUSH
7346: LD_INT 13
7348: PPUSH
7349: LD_INT 0
7351: PPUSH
7352: CALL_OW 49
// Wait ( 3 ) ;
7356: LD_INT 3
7358: PPUSH
7359: CALL_OW 67
// AddComEnterUnit ( eng , Delta ) ;
7363: LD_VAR 0 5
7367: PPUSH
7368: LD_EXP 6
7372: PPUSH
7373: CALL_OW 180
// end ; if force then
7377: LD_VAR 0 8
7381: IFFALSE 7393
// ar_forces := force ;
7383: LD_ADDR_EXP 29
7387: PUSH
7388: LD_VAR 0 8
7392: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
7393: LD_INT 35
7395: PPUSH
7396: CALL_OW 67
// if eng then
7400: LD_VAR 0 5
7404: IFFALSE 7462
// if GetSide ( Delta ) = 2 and IsOk ( eng ) and not IsInUnit ( eng ) then
7406: LD_EXP 6
7410: PPUSH
7411: CALL_OW 255
7415: PUSH
7416: LD_INT 2
7418: EQUAL
7419: IFFALSE 7432
7421: PUSH
7422: LD_VAR 0 5
7426: PPUSH
7427: CALL_OW 302
7431: AND
7432: IFFALSE 7446
7434: PUSH
7435: LD_VAR 0 5
7439: PPUSH
7440: CALL_OW 310
7444: NOT
7445: AND
7446: IFFALSE 7462
// ComEnterUnit ( eng , Delta ) ;
7448: LD_VAR 0 5
7452: PPUSH
7453: LD_EXP 6
7457: PPUSH
7458: CALL_OW 120
// until FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) = 0 ;
7462: LD_INT 22
7464: PUSH
7465: LD_INT 2
7467: PUSH
7468: EMPTY
7469: LIST
7470: LIST
7471: PUSH
7472: LD_INT 21
7474: PUSH
7475: LD_INT 1
7477: PUSH
7478: EMPTY
7479: LIST
7480: LIST
7481: PUSH
7482: EMPTY
7483: LIST
7484: LIST
7485: PPUSH
7486: CALL_OW 69
7490: PUSH
7491: LD_INT 0
7493: EQUAL
7494: IFFALSE 7393
// Wait ( 2 2$00 ) ;
7496: LD_INT 4200
7498: PPUSH
7499: CALL_OW 67
// ap_killers := PrepareArabianTroops ( [ 1 , 2 , 2 , 2 ] [ Difficulty ] , skill , arArea1 ) ;
7503: LD_ADDR_EXP 30
7507: PUSH
7508: LD_INT 1
7510: PUSH
7511: LD_INT 2
7513: PUSH
7514: LD_INT 2
7516: PUSH
7517: LD_INT 2
7519: PUSH
7520: EMPTY
7521: LIST
7522: LIST
7523: LIST
7524: LIST
7525: PUSH
7526: LD_OWVAR 67
7530: ARRAY
7531: PPUSH
7532: LD_VAR 0 4
7536: PPUSH
7537: LD_INT 13
7539: PPUSH
7540: CALL 6556 0 3
7544: ST_TO_ADDR
// Wait ( timer * 2 ) ;
7545: LD_VAR 0 2
7549: PUSH
7550: LD_INT 2
7552: MUL
7553: PPUSH
7554: CALL_OW 67
// ar_forces := PrepareArabianTroops ( [ 5 , 6 , 7 , 8 ] [ Difficulty ] , skill , arArea1 ) ^ PrepareArabianTroops ( [ 3 , 4 , 4 , 4 ] [ Difficulty ] , skill , arArea2 ) ;
7558: LD_ADDR_EXP 29
7562: PUSH
7563: LD_INT 5
7565: PUSH
7566: LD_INT 6
7568: PUSH
7569: LD_INT 7
7571: PUSH
7572: LD_INT 8
7574: PUSH
7575: EMPTY
7576: LIST
7577: LIST
7578: LIST
7579: LIST
7580: PUSH
7581: LD_OWVAR 67
7585: ARRAY
7586: PPUSH
7587: LD_VAR 0 4
7591: PPUSH
7592: LD_INT 13
7594: PPUSH
7595: CALL 6556 0 3
7599: PUSH
7600: LD_INT 3
7602: PUSH
7603: LD_INT 4
7605: PUSH
7606: LD_INT 4
7608: PUSH
7609: LD_INT 4
7611: PUSH
7612: EMPTY
7613: LIST
7614: LIST
7615: LIST
7616: LIST
7617: PUSH
7618: LD_OWVAR 67
7622: ARRAY
7623: PPUSH
7624: LD_VAR 0 4
7628: PPUSH
7629: LD_INT 14
7631: PPUSH
7632: CALL 6556 0 3
7636: ADD
7637: ST_TO_ADDR
// if Difficulty < 4 and not traitor then
7638: LD_OWVAR 67
7642: PUSH
7643: LD_INT 4
7645: LESS
7646: IFFALSE 7655
7648: PUSH
7649: LD_EXP 16
7653: NOT
7654: AND
7655: IFFALSE 7659
// exit ;
7657: GO 7822
// veh := PrepareTank ( 2 , 3 , ru_medium_tracked , engine_combustion , control_manual , ru_gun , 90 ) ;
7659: LD_ADDR_VAR 0 7
7663: PUSH
7664: LD_INT 2
7666: PPUSH
7667: LD_INT 3
7669: PPUSH
7670: LD_INT 22
7672: PPUSH
7673: LD_INT 1
7675: PPUSH
7676: LD_INT 1
7678: PPUSH
7679: LD_INT 44
7681: PPUSH
7682: LD_INT 90
7684: PPUSH
7685: CALL 449 0 7
7689: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
7690: LD_VAR 0 7
7694: PPUSH
7695: LD_INT 1
7697: PPUSH
7698: CALL_OW 233
// PlaceUnitXY ( veh , 28 , 51 , false ) ;
7702: LD_VAR 0 7
7706: PPUSH
7707: LD_INT 28
7709: PPUSH
7710: LD_INT 51
7712: PPUSH
7713: LD_INT 0
7715: PPUSH
7716: CALL_OW 48
// uc_side := 2 ;
7720: LD_ADDR_OWVAR 20
7724: PUSH
7725: LD_INT 2
7727: ST_TO_ADDR
// uc_nation := 2 ;
7728: LD_ADDR_OWVAR 21
7732: PUSH
7733: LD_INT 2
7735: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
7736: LD_INT 0
7738: PPUSH
7739: LD_INT 1
7741: PPUSH
7742: LD_VAR 0 4
7746: PPUSH
7747: CALL_OW 380
// un := CreateHuman ;
7751: LD_ADDR_VAR 0 6
7755: PUSH
7756: CALL_OW 44
7760: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
7761: LD_VAR 0 6
7765: PPUSH
7766: LD_VAR 0 7
7770: PPUSH
7771: CALL_OW 52
// ar_forces := Join ( ar_forces , un ) ;
7775: LD_ADDR_EXP 29
7779: PUSH
7780: LD_EXP 29
7784: PPUSH
7785: LD_VAR 0 6
7789: PPUSH
7790: CALL 69851 0 2
7794: ST_TO_ADDR
// ar_forces := ar_forces union PrepareArabianTroops ( 4 , skill , arArea3 ) ;
7795: LD_ADDR_EXP 29
7799: PUSH
7800: LD_EXP 29
7804: PUSH
7805: LD_INT 4
7807: PPUSH
7808: LD_VAR 0 4
7812: PPUSH
7813: LD_INT 19
7815: PPUSH
7816: CALL 6556 0 3
7820: UNION
7821: ST_TO_ADDR
// end ;
7822: PPOPN 8
7824: END
// every 0 0$03 trigger ar_forces do var i , target ;
7825: LD_EXP 29
7829: IFFALSE 8027
7831: GO 7833
7833: DISABLE
7834: LD_INT 0
7836: PPUSH
7837: PPUSH
// begin enable ;
7838: ENABLE
// if not ar_forces then
7839: LD_EXP 29
7843: NOT
7844: IFFALSE 7848
// exit ;
7846: GO 8027
// if Delta then
7848: LD_EXP 6
7852: IFFALSE 7866
// target := Delta else
7854: LD_ADDR_VAR 0 2
7858: PUSH
7859: LD_EXP 6
7863: ST_TO_ADDR
7864: GO 7876
// target := JMM ;
7866: LD_ADDR_VAR 0 2
7870: PUSH
7871: LD_EXP 17
7875: ST_TO_ADDR
// for i in ar_forces do
7876: LD_ADDR_VAR 0 1
7880: PUSH
7881: LD_EXP 29
7885: PUSH
7886: FOR_IN
7887: IFFALSE 8025
// begin if i in FilterAllUnits ( [ f_driving ] ) then
7889: LD_VAR 0 1
7893: PUSH
7894: LD_INT 55
7896: PUSH
7897: EMPTY
7898: LIST
7899: PPUSH
7900: CALL_OW 69
7904: IN
7905: IFFALSE 7948
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , IsInUnit ( i ) ) ) else
7907: LD_VAR 0 1
7911: PPUSH
7912: LD_INT 22
7914: PUSH
7915: LD_INT 1
7917: PUSH
7918: EMPTY
7919: LIST
7920: LIST
7921: PPUSH
7922: CALL_OW 69
7926: PPUSH
7927: LD_VAR 0 1
7931: PPUSH
7932: CALL_OW 310
7936: PPUSH
7937: CALL_OW 74
7941: PPUSH
7942: CALL_OW 115
7946: GO 8023
// if GetDistUnits ( i , target ) > 30 then
7948: LD_VAR 0 1
7952: PPUSH
7953: LD_VAR 0 2
7957: PPUSH
7958: CALL_OW 296
7962: PUSH
7963: LD_INT 30
7965: GREATER
7966: IFFALSE 7999
// ComAgressiveMove ( i , GetX ( target ) , GetY ( target ) ) else
7968: LD_VAR 0 1
7972: PPUSH
7973: LD_VAR 0 2
7977: PPUSH
7978: CALL_OW 250
7982: PPUSH
7983: LD_VAR 0 2
7987: PPUSH
7988: CALL_OW 251
7992: PPUSH
7993: CALL_OW 114
7997: GO 8023
// Attack ( i , FilterAllUnits ( [ f_enemy , 2 ] ) ) ;
7999: LD_VAR 0 1
8003: PPUSH
8004: LD_INT 81
8006: PUSH
8007: LD_INT 2
8009: PUSH
8010: EMPTY
8011: LIST
8012: LIST
8013: PPUSH
8014: CALL_OW 69
8018: PPUSH
8019: CALL 941 0 2
// end ;
8023: GO 7886
8025: POP
8026: POP
// end ;
8027: PPOPN 2
8029: END
// every 0 0$01 trigger ap_killers do var filter , i , target ;
8030: LD_EXP 30
8034: IFFALSE 8194
8036: GO 8038
8038: DISABLE
8039: LD_INT 0
8041: PPUSH
8042: PPUSH
8043: PPUSH
// begin enable ;
8044: ENABLE
// filter := FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) ;
8045: LD_ADDR_VAR 0 1
8049: PUSH
8050: LD_INT 22
8052: PUSH
8053: LD_INT 0
8055: PUSH
8056: EMPTY
8057: LIST
8058: LIST
8059: PUSH
8060: LD_INT 25
8062: PUSH
8063: LD_INT 12
8065: PUSH
8066: EMPTY
8067: LIST
8068: LIST
8069: PUSH
8070: EMPTY
8071: LIST
8072: LIST
8073: PPUSH
8074: CALL_OW 69
8078: ST_TO_ADDR
// if not filter then
8079: LD_VAR 0 1
8083: NOT
8084: IFFALSE 8111
// begin ar_forces := ar_forces ^ ap_killers ;
8086: LD_ADDR_EXP 29
8090: PUSH
8091: LD_EXP 29
8095: PUSH
8096: LD_EXP 30
8100: ADD
8101: ST_TO_ADDR
// ap_killers := [ ] ;
8102: LD_ADDR_EXP 30
8106: PUSH
8107: EMPTY
8108: ST_TO_ADDR
// exit ;
8109: GO 8194
// end ; for i in ap_killers do
8111: LD_ADDR_VAR 0 2
8115: PUSH
8116: LD_EXP 30
8120: PUSH
8121: FOR_IN
8122: IFFALSE 8192
// begin if not IsOk ( i ) then
8124: LD_VAR 0 2
8128: PPUSH
8129: CALL_OW 302
8133: NOT
8134: IFFALSE 8138
// continue ;
8136: GO 8121
// if not HasTask ( i ) then
8138: LD_VAR 0 2
8142: PPUSH
8143: CALL_OW 314
8147: NOT
8148: IFFALSE 8170
// target := NearestUnitToUnit ( filter , i ) ;
8150: LD_ADDR_VAR 0 3
8154: PUSH
8155: LD_VAR 0 1
8159: PPUSH
8160: LD_VAR 0 2
8164: PPUSH
8165: CALL_OW 74
8169: ST_TO_ADDR
// if target then
8170: LD_VAR 0 3
8174: IFFALSE 8190
// ComAttackUnit ( i , target ) ;
8176: LD_VAR 0 2
8180: PPUSH
8181: LD_VAR 0 3
8185: PPUSH
8186: CALL_OW 115
// end ;
8190: GO 8121
8192: POP
8193: POP
// end ; end_of_file
8194: PPOPN 3
8196: END
// every 0 0$40 + 0 0$2 trigger Delta do var i , counter , cr ;
8197: LD_EXP 6
8201: IFFALSE 8337
8203: GO 8205
8205: DISABLE
8206: LD_INT 0
8208: PPUSH
8209: PPUSH
8210: PPUSH
// begin counter := [ 300 , 250 , 220 , 210 ] [ Difficulty ] ;
8211: LD_ADDR_VAR 0 2
8215: PUSH
8216: LD_INT 300
8218: PUSH
8219: LD_INT 250
8221: PUSH
8222: LD_INT 220
8224: PUSH
8225: LD_INT 210
8227: PUSH
8228: EMPTY
8229: LIST
8230: LIST
8231: LIST
8232: LIST
8233: PUSH
8234: LD_OWVAR 67
8238: ARRAY
8239: ST_TO_ADDR
// CreateCratesArea ( Rand ( 1 , 3 ) , cratesArea , true ) ;
8240: LD_INT 1
8242: PPUSH
8243: LD_INT 3
8245: PPUSH
8246: CALL_OW 12
8250: PPUSH
8251: LD_INT 7
8253: PPUSH
8254: LD_INT 1
8256: PPUSH
8257: CALL_OW 55
// repeat wait ( rand ( 1 1$30 , 2 2$20 ) ) ;
8261: LD_INT 3150
8263: PPUSH
8264: LD_INT 4900
8266: PPUSH
8267: CALL_OW 12
8271: PPUSH
8272: CALL_OW 67
// cr := rand ( 1 , 5 ) ;
8276: LD_ADDR_VAR 0 3
8280: PUSH
8281: LD_INT 1
8283: PPUSH
8284: LD_INT 5
8286: PPUSH
8287: CALL_OW 12
8291: ST_TO_ADDR
// CreateCratesArea ( cr , cratesArea , true ) ;
8292: LD_VAR 0 3
8296: PPUSH
8297: LD_INT 7
8299: PPUSH
8300: LD_INT 1
8302: PPUSH
8303: CALL_OW 55
// counter := counter - cr * 10 ;
8307: LD_ADDR_VAR 0 2
8311: PUSH
8312: LD_VAR 0 2
8316: PUSH
8317: LD_VAR 0 3
8321: PUSH
8322: LD_INT 10
8324: MUL
8325: MINUS
8326: ST_TO_ADDR
// until counter <= 0 ;
8327: LD_VAR 0 2
8331: PUSH
8332: LD_INT 0
8334: LESSEQUAL
8335: IFFALSE 8261
// end ;
8337: PPOPN 3
8339: END
// every 0 0$03 trigger not Delta do var i ;
8340: LD_EXP 6
8344: NOT
8345: IFFALSE 8415
8347: GO 8349
8349: DISABLE
8350: LD_INT 0
8352: PPUSH
// begin for i = 1 to 5 - Difficulty do
8353: LD_ADDR_VAR 0 1
8357: PUSH
8358: DOUBLE
8359: LD_INT 1
8361: DEC
8362: ST_TO_ADDR
8363: LD_INT 5
8365: PUSH
8366: LD_OWVAR 67
8370: MINUS
8371: PUSH
8372: FOR_TO
8373: IFFALSE 8413
// begin CreateCratesArea ( rand ( 2 , 5 ) , deltaMainArea , true ) ;
8375: LD_INT 2
8377: PPUSH
8378: LD_INT 5
8380: PPUSH
8381: CALL_OW 12
8385: PPUSH
8386: LD_INT 8
8388: PPUSH
8389: LD_INT 1
8391: PPUSH
8392: CALL_OW 55
// Wait ( rand ( 0 0$16 , 0 0$39 ) ) ;
8396: LD_INT 560
8398: PPUSH
8399: LD_INT 1365
8401: PPUSH
8402: CALL_OW 12
8406: PPUSH
8407: CALL_OW 67
// end ;
8411: GO 8372
8413: POP
8414: POP
// end ;
8415: PPOPN 1
8417: END
// every 3 3$00 trigger tick < 15 15$00 do
8418: LD_OWVAR 1
8422: PUSH
8423: LD_INT 31500
8425: LESS
8426: IFFALSE 8486
8428: GO 8430
8430: DISABLE
// begin enable ;
8431: ENABLE
// CreateCratesAnyWhere ( rand ( 1 , 3 ) , true ) ;
8432: LD_INT 1
8434: PPUSH
8435: LD_INT 3
8437: PPUSH
8438: CALL_OW 12
8442: PPUSH
8443: LD_INT 1
8445: PPUSH
8446: CALL_OW 57
// Wait ( rand ( 0 0$38 , 0 0$59 ) ) ;
8450: LD_INT 1330
8452: PPUSH
8453: LD_INT 2065
8455: PPUSH
8456: CALL_OW 12
8460: PPUSH
8461: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 4 ) , riverArea , true ) ;
8465: LD_INT 1
8467: PPUSH
8468: LD_INT 4
8470: PPUSH
8471: CALL_OW 12
8475: PPUSH
8476: LD_INT 15
8478: PPUSH
8479: LD_INT 1
8481: PPUSH
8482: CALL_OW 55
// end ; end_of_file
8486: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
8487: LD_VAR 0 1
8491: PPUSH
8492: CALL 25177 0 1
// if un = JMM then
8496: LD_VAR 0 1
8500: PUSH
8501: LD_EXP 17
8505: EQUAL
8506: IFFALSE 8515
// YouLost ( JMM ) ;
8508: LD_STRING JMM
8510: PPUSH
8511: CALL_OW 104
// if un = Delta then
8515: LD_VAR 0 1
8519: PUSH
8520: LD_EXP 6
8524: EQUAL
8525: IFFALSE 8548
// begin Delta := 0 ;
8527: LD_ADDR_EXP 6
8531: PUSH
8532: LD_INT 0
8534: ST_TO_ADDR
// SetRestrict ( b_depot , 1 , true ) ;
8535: LD_INT 0
8537: PPUSH
8538: LD_INT 1
8540: PPUSH
8541: LD_INT 1
8543: PPUSH
8544: CALL_OW 324
// end ; if un in ar_forces then
8548: LD_VAR 0 1
8552: PUSH
8553: LD_EXP 29
8557: IN
8558: IFFALSE 8576
// ar_forces := ar_forces diff un ;
8560: LD_ADDR_EXP 29
8564: PUSH
8565: LD_EXP 29
8569: PUSH
8570: LD_VAR 0 1
8574: DIFF
8575: ST_TO_ADDR
// if un in ap_killers then
8576: LD_VAR 0 1
8580: PUSH
8581: LD_EXP 30
8585: IN
8586: IFFALSE 8604
// ap_killers := ap_killers diff un ;
8588: LD_ADDR_EXP 30
8592: PUSH
8593: LD_EXP 30
8597: PUSH
8598: LD_VAR 0 1
8602: DIFF
8603: ST_TO_ADDR
// if un in FilterAllUnits ( [ f_or , [ f_class , class_apeman ] , [ f_class , class_apeman_engineer ] ] ) then
8604: LD_VAR 0 1
8608: PUSH
8609: LD_INT 2
8611: PUSH
8612: LD_INT 25
8614: PUSH
8615: LD_INT 12
8617: PUSH
8618: EMPTY
8619: LIST
8620: LIST
8621: PUSH
8622: LD_INT 25
8624: PUSH
8625: LD_INT 16
8627: PUSH
8628: EMPTY
8629: LIST
8630: LIST
8631: PUSH
8632: EMPTY
8633: LIST
8634: LIST
8635: LIST
8636: PPUSH
8637: CALL_OW 69
8641: IN
8642: IFFALSE 8658
// apeKillCounter := apeKillCounter + 1 ;
8644: LD_ADDR_EXP 15
8648: PUSH
8649: LD_EXP 15
8653: PUSH
8654: LD_INT 1
8656: PLUS
8657: ST_TO_ADDR
// end ;
8658: PPOPN 1
8660: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if un in FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) and killerSide = 1 then
8661: LD_VAR 0 1
8665: PUSH
8666: LD_INT 22
8668: PUSH
8669: LD_INT 1
8671: PUSH
8672: EMPTY
8673: LIST
8674: LIST
8675: PUSH
8676: LD_INT 23
8678: PUSH
8679: LD_INT 1
8681: PUSH
8682: EMPTY
8683: LIST
8684: LIST
8685: PUSH
8686: LD_INT 21
8688: PUSH
8689: LD_INT 1
8691: PUSH
8692: EMPTY
8693: LIST
8694: LIST
8695: PUSH
8696: EMPTY
8697: LIST
8698: LIST
8699: LIST
8700: PPUSH
8701: CALL_OW 69
8705: IN
8706: IFFALSE 8718
8708: PUSH
8709: LD_VAR 0 2
8713: PUSH
8714: LD_INT 1
8716: EQUAL
8717: AND
8718: IFFALSE 8728
// traitor := true ;
8720: LD_ADDR_EXP 16
8724: PUSH
8725: LD_INT 1
8727: ST_TO_ADDR
// end ;
8728: PPOPN 3
8730: END
// on VehicleConstructed ( veh , fac ) do begin SOS_VehicleConstructed ( veh , fac ) ;
8731: LD_VAR 0 1
8735: PPUSH
8736: LD_VAR 0 2
8740: PPUSH
8741: CALL 25235 0 2
// end ;
8745: PPOPN 2
8747: END
// on Contact ( s1 , s2 ) do begin if s1 = 1 and s2 = 2 and not arab_spotted then
8748: LD_VAR 0 1
8752: PUSH
8753: LD_INT 1
8755: EQUAL
8756: IFFALSE 8768
8758: PUSH
8759: LD_VAR 0 2
8763: PUSH
8764: LD_INT 2
8766: EQUAL
8767: AND
8768: IFFALSE 8777
8770: PUSH
8771: LD_EXP 13
8775: NOT
8776: AND
8777: IFFALSE 8787
// arab_spotted := true ;
8779: LD_ADDR_EXP 13
8783: PUSH
8784: LD_INT 1
8786: ST_TO_ADDR
// end ;
8787: PPOPN 2
8789: END
// on EndTheMissionRaised ( p ) do begin if FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] , [ f_type , unit_human ] ] ) then
8790: LD_INT 22
8792: PUSH
8793: LD_INT 2
8795: PUSH
8796: EMPTY
8797: LIST
8798: LIST
8799: PUSH
8800: LD_INT 50
8802: PUSH
8803: EMPTY
8804: LIST
8805: PUSH
8806: LD_INT 21
8808: PUSH
8809: LD_INT 1
8811: PUSH
8812: EMPTY
8813: LIST
8814: LIST
8815: PUSH
8816: EMPTY
8817: LIST
8818: LIST
8819: LIST
8820: PPUSH
8821: CALL_OW 69
8825: IFFALSE 8836
// begin Query ( QArabOnMap ) ;
8827: LD_STRING QArabOnMap
8829: PPUSH
8830: CALL_OW 97
// exit ;
8834: GO 8852
// end ; end_the_mission_allowed := false ;
8836: LD_ADDR_OWVAR 57
8840: PUSH
8841: LD_INT 0
8843: ST_TO_ADDR
// end_mission := true ;
8844: LD_ADDR_EXP 14
8848: PUSH
8849: LD_INT 1
8851: ST_TO_ADDR
// end ;
8852: PPOPN 1
8854: END
// on ApemanTamed ( apeman , sci ) do begin if GetSide ( sci ) = 1 then
8855: LD_VAR 0 2
8859: PPUSH
8860: CALL_OW 255
8864: PUSH
8865: LD_INT 1
8867: EQUAL
8868: IFFALSE 8884
// apeman_counter := apeman_counter + 1 ;
8870: LD_ADDR_EXP 12
8874: PUSH
8875: LD_EXP 12
8879: PUSH
8880: LD_INT 1
8882: PLUS
8883: ST_TO_ADDR
// if not first_apeman_tamed then
8884: LD_EXP 8
8888: NOT
8889: IFFALSE 9088
// begin first_apeman_tamed := true ;
8891: LD_ADDR_EXP 8
8895: PUSH
8896: LD_INT 1
8898: ST_TO_ADDR
// if sci = Gladstone then
8899: LD_VAR 0 2
8903: PUSH
8904: LD_EXP 18
8908: EQUAL
8909: IFFALSE 8923
// Say ( Gladstone , D7b-Glad-1 ) ;
8911: LD_EXP 18
8915: PPUSH
8916: LD_STRING D7b-Glad-1
8918: PPUSH
8919: CALL_OW 88
// if sci = Denis then
8923: LD_VAR 0 2
8927: PUSH
8928: LD_EXP 20
8932: EQUAL
8933: IFFALSE 8947
// Say ( Denis , D7a-Den-1 ) ;
8935: LD_EXP 20
8939: PPUSH
8940: LD_STRING D7a-Den-1
8942: PPUSH
8943: CALL_OW 88
// if not sci in [ JMM , Gladstone , Denis , Lisa , Frank , Bobby , Cyrus , Donaldson ] then
8947: LD_VAR 0 2
8951: PUSH
8952: LD_EXP 17
8956: PUSH
8957: LD_EXP 18
8961: PUSH
8962: LD_EXP 20
8966: PUSH
8967: LD_EXP 23
8971: PUSH
8972: LD_EXP 24
8976: PUSH
8977: LD_EXP 25
8981: PUSH
8982: LD_EXP 26
8986: PUSH
8987: LD_EXP 22
8991: PUSH
8992: EMPTY
8993: LIST
8994: LIST
8995: LIST
8996: LIST
8997: LIST
8998: LIST
8999: LIST
9000: LIST
9001: IN
9002: NOT
9003: IFFALSE 9046
// begin if GetSex ( sci ) = sex_male then
9005: LD_VAR 0 2
9009: PPUSH
9010: CALL_OW 258
9014: PUSH
9015: LD_INT 1
9017: EQUAL
9018: IFFALSE 9034
// Say ( sci , D7c-Sci1-1 ) else
9020: LD_VAR 0 2
9024: PPUSH
9025: LD_STRING D7c-Sci1-1
9027: PPUSH
9028: CALL_OW 88
9032: GO 9046
// Say ( sci , D7c-FSci1-1 ) ;
9034: LD_VAR 0 2
9038: PPUSH
9039: LD_STRING D7c-FSci1-1
9041: PPUSH
9042: CALL_OW 88
// end ; if sci <> Gladstone then
9046: LD_VAR 0 2
9050: PUSH
9051: LD_EXP 18
9055: NONEQUAL
9056: IFFALSE 9070
// Say ( Gladstone , D7c-Glad-1 ) ;
9058: LD_EXP 18
9062: PPUSH
9063: LD_STRING D7c-Glad-1
9065: PPUSH
9066: CALL_OW 88
// if Lisa then
9070: LD_EXP 23
9074: IFFALSE 9088
// Say ( Lisa , D8-Lisa-1 ) ;
9076: LD_EXP 23
9080: PPUSH
9081: LD_STRING D8-Lisa-1
9083: PPUSH
9084: CALL_OW 88
// end ; end ; end_of_file end_of_file
9088: PPOPN 2
9090: END
// export globalGameSaveCounter ; every 0 0$1 do
9091: GO 9093
9093: DISABLE
// begin enable ;
9094: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
9095: LD_STRING updateTimer(
9097: PUSH
9098: LD_OWVAR 1
9102: STR
9103: PUSH
9104: LD_STRING );
9106: STR
9107: PPUSH
9108: CALL_OW 559
// end ;
9112: END
// every 0 0$1 do
9113: GO 9115
9115: DISABLE
// begin globalGameSaveCounter := 0 ;
9116: LD_ADDR_EXP 31
9120: PUSH
9121: LD_INT 0
9123: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
9124: LD_STRING setGameSaveCounter(0)
9126: PPUSH
9127: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
9131: LD_STRING initStreamRollete();
9133: PPUSH
9134: CALL_OW 559
// InitStreamMode ;
9138: CALL 10490 0 0
// DefineStreamItems ( false ) ;
9142: LD_INT 0
9144: PPUSH
9145: CALL 10954 0 1
// end ;
9149: END
// export function SOS_MapStart ( ) ; begin
9150: LD_INT 0
9152: PPUSH
// if streamModeActive then
9153: LD_EXP 32
9157: IFFALSE 9166
// DefineStreamItems ( true ) ;
9159: LD_INT 1
9161: PPUSH
9162: CALL 10954 0 1
// ToLua ( LFC_UNITS_CUSTOM_ICON = {}; ) ;
9166: LD_STRING LFC_UNITS_CUSTOM_ICON = {};
9168: PPUSH
9169: CALL_OW 559
// UpdateLuaVariables ( ) ;
9173: CALL 9190 0 0
// UpdateFactoryWaypoints ( ) ;
9177: CALL 24076 0 0
// UpdateWarehouseGatheringPoints ( ) ;
9181: CALL 24328 0 0
// end ;
9185: LD_VAR 0 1
9189: RET
// function UpdateLuaVariables ( ) ; begin
9190: LD_INT 0
9192: PPUSH
// if globalGameSaveCounter then
9193: LD_EXP 31
9197: IFFALSE 9231
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
9199: LD_ADDR_EXP 31
9203: PUSH
9204: LD_EXP 31
9208: PPUSH
9209: CALL 71224 0 1
9213: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
9214: LD_STRING setGameSaveCounter(
9216: PUSH
9217: LD_EXP 31
9221: STR
9222: PUSH
9223: LD_STRING )
9225: STR
9226: PPUSH
9227: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
9231: LD_STRING setGameDifficulty(
9233: PUSH
9234: LD_OWVAR 67
9238: STR
9239: PUSH
9240: LD_STRING )
9242: STR
9243: PPUSH
9244: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
9248: LD_STRING displayDifficulty(
9250: PUSH
9251: LD_OWVAR 67
9255: STR
9256: PUSH
9257: LD_STRING )
9259: STR
9260: PPUSH
9261: CALL_OW 559
// end ;
9265: LD_VAR 0 1
9269: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
9270: LD_INT 0
9272: PPUSH
// if p2 = stream_mode then
9273: LD_VAR 0 2
9277: PUSH
9278: LD_INT 100
9280: EQUAL
9281: IFFALSE 10284
// begin if not StreamModeActive then
9283: LD_EXP 32
9287: NOT
9288: IFFALSE 9298
// StreamModeActive := true ;
9290: LD_ADDR_EXP 32
9294: PUSH
9295: LD_INT 1
9297: ST_TO_ADDR
// if p3 = 0 then
9298: LD_VAR 0 3
9302: PUSH
9303: LD_INT 0
9305: EQUAL
9306: IFFALSE 9312
// InitStreamMode ;
9308: CALL 10490 0 0
// if p3 = 1 then
9312: LD_VAR 0 3
9316: PUSH
9317: LD_INT 1
9319: EQUAL
9320: IFFALSE 9330
// sRocket := true ;
9322: LD_ADDR_EXP 37
9326: PUSH
9327: LD_INT 1
9329: ST_TO_ADDR
// if p3 = 2 then
9330: LD_VAR 0 3
9334: PUSH
9335: LD_INT 2
9337: EQUAL
9338: IFFALSE 9348
// sSpeed := true ;
9340: LD_ADDR_EXP 36
9344: PUSH
9345: LD_INT 1
9347: ST_TO_ADDR
// if p3 = 3 then
9348: LD_VAR 0 3
9352: PUSH
9353: LD_INT 3
9355: EQUAL
9356: IFFALSE 9366
// sEngine := true ;
9358: LD_ADDR_EXP 38
9362: PUSH
9363: LD_INT 1
9365: ST_TO_ADDR
// if p3 = 4 then
9366: LD_VAR 0 3
9370: PUSH
9371: LD_INT 4
9373: EQUAL
9374: IFFALSE 9384
// sSpec := true ;
9376: LD_ADDR_EXP 35
9380: PUSH
9381: LD_INT 1
9383: ST_TO_ADDR
// if p3 = 5 then
9384: LD_VAR 0 3
9388: PUSH
9389: LD_INT 5
9391: EQUAL
9392: IFFALSE 9402
// sLevel := true ;
9394: LD_ADDR_EXP 39
9398: PUSH
9399: LD_INT 1
9401: ST_TO_ADDR
// if p3 = 6 then
9402: LD_VAR 0 3
9406: PUSH
9407: LD_INT 6
9409: EQUAL
9410: IFFALSE 9420
// sArmoury := true ;
9412: LD_ADDR_EXP 40
9416: PUSH
9417: LD_INT 1
9419: ST_TO_ADDR
// if p3 = 7 then
9420: LD_VAR 0 3
9424: PUSH
9425: LD_INT 7
9427: EQUAL
9428: IFFALSE 9438
// sRadar := true ;
9430: LD_ADDR_EXP 41
9434: PUSH
9435: LD_INT 1
9437: ST_TO_ADDR
// if p3 = 8 then
9438: LD_VAR 0 3
9442: PUSH
9443: LD_INT 8
9445: EQUAL
9446: IFFALSE 9456
// sBunker := true ;
9448: LD_ADDR_EXP 42
9452: PUSH
9453: LD_INT 1
9455: ST_TO_ADDR
// if p3 = 9 then
9456: LD_VAR 0 3
9460: PUSH
9461: LD_INT 9
9463: EQUAL
9464: IFFALSE 9474
// sHack := true ;
9466: LD_ADDR_EXP 43
9470: PUSH
9471: LD_INT 1
9473: ST_TO_ADDR
// if p3 = 10 then
9474: LD_VAR 0 3
9478: PUSH
9479: LD_INT 10
9481: EQUAL
9482: IFFALSE 9492
// sFire := true ;
9484: LD_ADDR_EXP 44
9488: PUSH
9489: LD_INT 1
9491: ST_TO_ADDR
// if p3 = 11 then
9492: LD_VAR 0 3
9496: PUSH
9497: LD_INT 11
9499: EQUAL
9500: IFFALSE 9510
// sRefresh := true ;
9502: LD_ADDR_EXP 45
9506: PUSH
9507: LD_INT 1
9509: ST_TO_ADDR
// if p3 = 12 then
9510: LD_VAR 0 3
9514: PUSH
9515: LD_INT 12
9517: EQUAL
9518: IFFALSE 9528
// sExp := true ;
9520: LD_ADDR_EXP 46
9524: PUSH
9525: LD_INT 1
9527: ST_TO_ADDR
// if p3 = 13 then
9528: LD_VAR 0 3
9532: PUSH
9533: LD_INT 13
9535: EQUAL
9536: IFFALSE 9546
// sDepot := true ;
9538: LD_ADDR_EXP 47
9542: PUSH
9543: LD_INT 1
9545: ST_TO_ADDR
// if p3 = 14 then
9546: LD_VAR 0 3
9550: PUSH
9551: LD_INT 14
9553: EQUAL
9554: IFFALSE 9564
// sFlag := true ;
9556: LD_ADDR_EXP 48
9560: PUSH
9561: LD_INT 1
9563: ST_TO_ADDR
// if p3 = 15 then
9564: LD_VAR 0 3
9568: PUSH
9569: LD_INT 15
9571: EQUAL
9572: IFFALSE 9582
// sKamikadze := true ;
9574: LD_ADDR_EXP 56
9578: PUSH
9579: LD_INT 1
9581: ST_TO_ADDR
// if p3 = 16 then
9582: LD_VAR 0 3
9586: PUSH
9587: LD_INT 16
9589: EQUAL
9590: IFFALSE 9600
// sTroll := true ;
9592: LD_ADDR_EXP 57
9596: PUSH
9597: LD_INT 1
9599: ST_TO_ADDR
// if p3 = 17 then
9600: LD_VAR 0 3
9604: PUSH
9605: LD_INT 17
9607: EQUAL
9608: IFFALSE 9618
// sSlow := true ;
9610: LD_ADDR_EXP 58
9614: PUSH
9615: LD_INT 1
9617: ST_TO_ADDR
// if p3 = 18 then
9618: LD_VAR 0 3
9622: PUSH
9623: LD_INT 18
9625: EQUAL
9626: IFFALSE 9636
// sLack := true ;
9628: LD_ADDR_EXP 59
9632: PUSH
9633: LD_INT 1
9635: ST_TO_ADDR
// if p3 = 19 then
9636: LD_VAR 0 3
9640: PUSH
9641: LD_INT 19
9643: EQUAL
9644: IFFALSE 9654
// sTank := true ;
9646: LD_ADDR_EXP 61
9650: PUSH
9651: LD_INT 1
9653: ST_TO_ADDR
// if p3 = 20 then
9654: LD_VAR 0 3
9658: PUSH
9659: LD_INT 20
9661: EQUAL
9662: IFFALSE 9672
// sRemote := true ;
9664: LD_ADDR_EXP 62
9668: PUSH
9669: LD_INT 1
9671: ST_TO_ADDR
// if p3 = 21 then
9672: LD_VAR 0 3
9676: PUSH
9677: LD_INT 21
9679: EQUAL
9680: IFFALSE 9690
// sPowell := true ;
9682: LD_ADDR_EXP 63
9686: PUSH
9687: LD_INT 1
9689: ST_TO_ADDR
// if p3 = 22 then
9690: LD_VAR 0 3
9694: PUSH
9695: LD_INT 22
9697: EQUAL
9698: IFFALSE 9708
// sTeleport := true ;
9700: LD_ADDR_EXP 66
9704: PUSH
9705: LD_INT 1
9707: ST_TO_ADDR
// if p3 = 23 then
9708: LD_VAR 0 3
9712: PUSH
9713: LD_INT 23
9715: EQUAL
9716: IFFALSE 9726
// sOilTower := true ;
9718: LD_ADDR_EXP 68
9722: PUSH
9723: LD_INT 1
9725: ST_TO_ADDR
// if p3 = 24 then
9726: LD_VAR 0 3
9730: PUSH
9731: LD_INT 24
9733: EQUAL
9734: IFFALSE 9744
// sShovel := true ;
9736: LD_ADDR_EXP 69
9740: PUSH
9741: LD_INT 1
9743: ST_TO_ADDR
// if p3 = 25 then
9744: LD_VAR 0 3
9748: PUSH
9749: LD_INT 25
9751: EQUAL
9752: IFFALSE 9762
// sSheik := true ;
9754: LD_ADDR_EXP 70
9758: PUSH
9759: LD_INT 1
9761: ST_TO_ADDR
// if p3 = 26 then
9762: LD_VAR 0 3
9766: PUSH
9767: LD_INT 26
9769: EQUAL
9770: IFFALSE 9780
// sEarthquake := true ;
9772: LD_ADDR_EXP 72
9776: PUSH
9777: LD_INT 1
9779: ST_TO_ADDR
// if p3 = 27 then
9780: LD_VAR 0 3
9784: PUSH
9785: LD_INT 27
9787: EQUAL
9788: IFFALSE 9798
// sAI := true ;
9790: LD_ADDR_EXP 73
9794: PUSH
9795: LD_INT 1
9797: ST_TO_ADDR
// if p3 = 28 then
9798: LD_VAR 0 3
9802: PUSH
9803: LD_INT 28
9805: EQUAL
9806: IFFALSE 9816
// sCargo := true ;
9808: LD_ADDR_EXP 76
9812: PUSH
9813: LD_INT 1
9815: ST_TO_ADDR
// if p3 = 29 then
9816: LD_VAR 0 3
9820: PUSH
9821: LD_INT 29
9823: EQUAL
9824: IFFALSE 9834
// sDLaser := true ;
9826: LD_ADDR_EXP 77
9830: PUSH
9831: LD_INT 1
9833: ST_TO_ADDR
// if p3 = 30 then
9834: LD_VAR 0 3
9838: PUSH
9839: LD_INT 30
9841: EQUAL
9842: IFFALSE 9852
// sExchange := true ;
9844: LD_ADDR_EXP 78
9848: PUSH
9849: LD_INT 1
9851: ST_TO_ADDR
// if p3 = 31 then
9852: LD_VAR 0 3
9856: PUSH
9857: LD_INT 31
9859: EQUAL
9860: IFFALSE 9870
// sFac := true ;
9862: LD_ADDR_EXP 79
9866: PUSH
9867: LD_INT 1
9869: ST_TO_ADDR
// if p3 = 32 then
9870: LD_VAR 0 3
9874: PUSH
9875: LD_INT 32
9877: EQUAL
9878: IFFALSE 9888
// sPower := true ;
9880: LD_ADDR_EXP 80
9884: PUSH
9885: LD_INT 1
9887: ST_TO_ADDR
// if p3 = 33 then
9888: LD_VAR 0 3
9892: PUSH
9893: LD_INT 33
9895: EQUAL
9896: IFFALSE 9906
// sRandom := true ;
9898: LD_ADDR_EXP 81
9902: PUSH
9903: LD_INT 1
9905: ST_TO_ADDR
// if p3 = 34 then
9906: LD_VAR 0 3
9910: PUSH
9911: LD_INT 34
9913: EQUAL
9914: IFFALSE 9924
// sShield := true ;
9916: LD_ADDR_EXP 82
9920: PUSH
9921: LD_INT 1
9923: ST_TO_ADDR
// if p3 = 35 then
9924: LD_VAR 0 3
9928: PUSH
9929: LD_INT 35
9931: EQUAL
9932: IFFALSE 9942
// sTime := true ;
9934: LD_ADDR_EXP 83
9938: PUSH
9939: LD_INT 1
9941: ST_TO_ADDR
// if p3 = 36 then
9942: LD_VAR 0 3
9946: PUSH
9947: LD_INT 36
9949: EQUAL
9950: IFFALSE 9960
// sTools := true ;
9952: LD_ADDR_EXP 84
9956: PUSH
9957: LD_INT 1
9959: ST_TO_ADDR
// if p3 = 101 then
9960: LD_VAR 0 3
9964: PUSH
9965: LD_INT 101
9967: EQUAL
9968: IFFALSE 9978
// sSold := true ;
9970: LD_ADDR_EXP 49
9974: PUSH
9975: LD_INT 1
9977: ST_TO_ADDR
// if p3 = 102 then
9978: LD_VAR 0 3
9982: PUSH
9983: LD_INT 102
9985: EQUAL
9986: IFFALSE 9996
// sDiff := true ;
9988: LD_ADDR_EXP 50
9992: PUSH
9993: LD_INT 1
9995: ST_TO_ADDR
// if p3 = 103 then
9996: LD_VAR 0 3
10000: PUSH
10001: LD_INT 103
10003: EQUAL
10004: IFFALSE 10014
// sFog := true ;
10006: LD_ADDR_EXP 53
10010: PUSH
10011: LD_INT 1
10013: ST_TO_ADDR
// if p3 = 104 then
10014: LD_VAR 0 3
10018: PUSH
10019: LD_INT 104
10021: EQUAL
10022: IFFALSE 10032
// sReset := true ;
10024: LD_ADDR_EXP 54
10028: PUSH
10029: LD_INT 1
10031: ST_TO_ADDR
// if p3 = 105 then
10032: LD_VAR 0 3
10036: PUSH
10037: LD_INT 105
10039: EQUAL
10040: IFFALSE 10050
// sSun := true ;
10042: LD_ADDR_EXP 55
10046: PUSH
10047: LD_INT 1
10049: ST_TO_ADDR
// if p3 = 106 then
10050: LD_VAR 0 3
10054: PUSH
10055: LD_INT 106
10057: EQUAL
10058: IFFALSE 10068
// sTiger := true ;
10060: LD_ADDR_EXP 51
10064: PUSH
10065: LD_INT 1
10067: ST_TO_ADDR
// if p3 = 107 then
10068: LD_VAR 0 3
10072: PUSH
10073: LD_INT 107
10075: EQUAL
10076: IFFALSE 10086
// sBomb := true ;
10078: LD_ADDR_EXP 52
10082: PUSH
10083: LD_INT 1
10085: ST_TO_ADDR
// if p3 = 108 then
10086: LD_VAR 0 3
10090: PUSH
10091: LD_INT 108
10093: EQUAL
10094: IFFALSE 10104
// sWound := true ;
10096: LD_ADDR_EXP 60
10100: PUSH
10101: LD_INT 1
10103: ST_TO_ADDR
// if p3 = 109 then
10104: LD_VAR 0 3
10108: PUSH
10109: LD_INT 109
10111: EQUAL
10112: IFFALSE 10122
// sBetray := true ;
10114: LD_ADDR_EXP 64
10118: PUSH
10119: LD_INT 1
10121: ST_TO_ADDR
// if p3 = 110 then
10122: LD_VAR 0 3
10126: PUSH
10127: LD_INT 110
10129: EQUAL
10130: IFFALSE 10140
// sContamin := true ;
10132: LD_ADDR_EXP 65
10136: PUSH
10137: LD_INT 1
10139: ST_TO_ADDR
// if p3 = 111 then
10140: LD_VAR 0 3
10144: PUSH
10145: LD_INT 111
10147: EQUAL
10148: IFFALSE 10158
// sOil := true ;
10150: LD_ADDR_EXP 67
10154: PUSH
10155: LD_INT 1
10157: ST_TO_ADDR
// if p3 = 112 then
10158: LD_VAR 0 3
10162: PUSH
10163: LD_INT 112
10165: EQUAL
10166: IFFALSE 10176
// sStu := true ;
10168: LD_ADDR_EXP 71
10172: PUSH
10173: LD_INT 1
10175: ST_TO_ADDR
// if p3 = 113 then
10176: LD_VAR 0 3
10180: PUSH
10181: LD_INT 113
10183: EQUAL
10184: IFFALSE 10194
// sBazooka := true ;
10186: LD_ADDR_EXP 74
10190: PUSH
10191: LD_INT 1
10193: ST_TO_ADDR
// if p3 = 114 then
10194: LD_VAR 0 3
10198: PUSH
10199: LD_INT 114
10201: EQUAL
10202: IFFALSE 10212
// sMortar := true ;
10204: LD_ADDR_EXP 75
10208: PUSH
10209: LD_INT 1
10211: ST_TO_ADDR
// if p3 = 115 then
10212: LD_VAR 0 3
10216: PUSH
10217: LD_INT 115
10219: EQUAL
10220: IFFALSE 10230
// sRanger := true ;
10222: LD_ADDR_EXP 85
10226: PUSH
10227: LD_INT 1
10229: ST_TO_ADDR
// if p3 = 116 then
10230: LD_VAR 0 3
10234: PUSH
10235: LD_INT 116
10237: EQUAL
10238: IFFALSE 10248
// sComputer := true ;
10240: LD_ADDR_EXP 86
10244: PUSH
10245: LD_INT 1
10247: ST_TO_ADDR
// if p3 = 117 then
10248: LD_VAR 0 3
10252: PUSH
10253: LD_INT 117
10255: EQUAL
10256: IFFALSE 10266
// s30 := true ;
10258: LD_ADDR_EXP 87
10262: PUSH
10263: LD_INT 1
10265: ST_TO_ADDR
// if p3 = 118 then
10266: LD_VAR 0 3
10270: PUSH
10271: LD_INT 118
10273: EQUAL
10274: IFFALSE 10284
// s60 := true ;
10276: LD_ADDR_EXP 88
10280: PUSH
10281: LD_INT 1
10283: ST_TO_ADDR
// end ; if p2 = hack_mode then
10284: LD_VAR 0 2
10288: PUSH
10289: LD_INT 101
10291: EQUAL
10292: IFFALSE 10420
// begin case p3 of 1 :
10294: LD_VAR 0 3
10298: PUSH
10299: LD_INT 1
10301: DOUBLE
10302: EQUAL
10303: IFTRUE 10307
10305: GO 10314
10307: POP
// hHackUnlimitedResources ; 2 :
10308: CALL 22683 0 0
10312: GO 10420
10314: LD_INT 2
10316: DOUBLE
10317: EQUAL
10318: IFTRUE 10322
10320: GO 10329
10322: POP
// hHackSetLevel10 ; 3 :
10323: CALL 22816 0 0
10327: GO 10420
10329: LD_INT 3
10331: DOUBLE
10332: EQUAL
10333: IFTRUE 10337
10335: GO 10344
10337: POP
// hHackSetLevel10YourUnits ; 4 :
10338: CALL 22901 0 0
10342: GO 10420
10344: LD_INT 4
10346: DOUBLE
10347: EQUAL
10348: IFTRUE 10352
10350: GO 10359
10352: POP
// hHackInvincible ; 5 :
10353: CALL 23349 0 0
10357: GO 10420
10359: LD_INT 5
10361: DOUBLE
10362: EQUAL
10363: IFTRUE 10367
10365: GO 10374
10367: POP
// hHackInvisible ; 6 :
10368: CALL 23460 0 0
10372: GO 10420
10374: LD_INT 6
10376: DOUBLE
10377: EQUAL
10378: IFTRUE 10382
10380: GO 10389
10382: POP
// hHackChangeYourSide ; 7 :
10383: CALL 23517 0 0
10387: GO 10420
10389: LD_INT 7
10391: DOUBLE
10392: EQUAL
10393: IFTRUE 10397
10395: GO 10404
10397: POP
// hHackChangeUnitSide ; 8 :
10398: CALL 23559 0 0
10402: GO 10420
10404: LD_INT 8
10406: DOUBLE
10407: EQUAL
10408: IFTRUE 10412
10410: GO 10419
10412: POP
// hHackFog ; end ;
10413: CALL 23660 0 0
10417: GO 10420
10419: POP
// end ; if p2 = game_save_mode then
10420: LD_VAR 0 2
10424: PUSH
10425: LD_INT 102
10427: EQUAL
10428: IFFALSE 10485
// begin if p3 = 1 then
10430: LD_VAR 0 3
10434: PUSH
10435: LD_INT 1
10437: EQUAL
10438: IFFALSE 10450
// globalGameSaveCounter := p4 ;
10440: LD_ADDR_EXP 31
10444: PUSH
10445: LD_VAR 0 4
10449: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
10450: LD_VAR 0 3
10454: PUSH
10455: LD_INT 2
10457: EQUAL
10458: IFFALSE 10466
10460: PUSH
10461: LD_EXP 31
10465: AND
10466: IFFALSE 10485
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
10468: LD_STRING setGameSaveCounter(
10470: PUSH
10471: LD_EXP 31
10475: STR
10476: PUSH
10477: LD_STRING )
10479: STR
10480: PPUSH
10481: CALL_OW 559
// end ; end ;
10485: LD_VAR 0 7
10489: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
10490: LD_INT 0
10492: PPUSH
// streamModeActive := false ;
10493: LD_ADDR_EXP 32
10497: PUSH
10498: LD_INT 0
10500: ST_TO_ADDR
// normalCounter := 36 ;
10501: LD_ADDR_EXP 33
10505: PUSH
10506: LD_INT 36
10508: ST_TO_ADDR
// hardcoreCounter := 18 ;
10509: LD_ADDR_EXP 34
10513: PUSH
10514: LD_INT 18
10516: ST_TO_ADDR
// sRocket := false ;
10517: LD_ADDR_EXP 37
10521: PUSH
10522: LD_INT 0
10524: ST_TO_ADDR
// sSpeed := false ;
10525: LD_ADDR_EXP 36
10529: PUSH
10530: LD_INT 0
10532: ST_TO_ADDR
// sEngine := false ;
10533: LD_ADDR_EXP 38
10537: PUSH
10538: LD_INT 0
10540: ST_TO_ADDR
// sSpec := false ;
10541: LD_ADDR_EXP 35
10545: PUSH
10546: LD_INT 0
10548: ST_TO_ADDR
// sLevel := false ;
10549: LD_ADDR_EXP 39
10553: PUSH
10554: LD_INT 0
10556: ST_TO_ADDR
// sArmoury := false ;
10557: LD_ADDR_EXP 40
10561: PUSH
10562: LD_INT 0
10564: ST_TO_ADDR
// sRadar := false ;
10565: LD_ADDR_EXP 41
10569: PUSH
10570: LD_INT 0
10572: ST_TO_ADDR
// sBunker := false ;
10573: LD_ADDR_EXP 42
10577: PUSH
10578: LD_INT 0
10580: ST_TO_ADDR
// sHack := false ;
10581: LD_ADDR_EXP 43
10585: PUSH
10586: LD_INT 0
10588: ST_TO_ADDR
// sFire := false ;
10589: LD_ADDR_EXP 44
10593: PUSH
10594: LD_INT 0
10596: ST_TO_ADDR
// sRefresh := false ;
10597: LD_ADDR_EXP 45
10601: PUSH
10602: LD_INT 0
10604: ST_TO_ADDR
// sExp := false ;
10605: LD_ADDR_EXP 46
10609: PUSH
10610: LD_INT 0
10612: ST_TO_ADDR
// sDepot := false ;
10613: LD_ADDR_EXP 47
10617: PUSH
10618: LD_INT 0
10620: ST_TO_ADDR
// sFlag := false ;
10621: LD_ADDR_EXP 48
10625: PUSH
10626: LD_INT 0
10628: ST_TO_ADDR
// sKamikadze := false ;
10629: LD_ADDR_EXP 56
10633: PUSH
10634: LD_INT 0
10636: ST_TO_ADDR
// sTroll := false ;
10637: LD_ADDR_EXP 57
10641: PUSH
10642: LD_INT 0
10644: ST_TO_ADDR
// sSlow := false ;
10645: LD_ADDR_EXP 58
10649: PUSH
10650: LD_INT 0
10652: ST_TO_ADDR
// sLack := false ;
10653: LD_ADDR_EXP 59
10657: PUSH
10658: LD_INT 0
10660: ST_TO_ADDR
// sTank := false ;
10661: LD_ADDR_EXP 61
10665: PUSH
10666: LD_INT 0
10668: ST_TO_ADDR
// sRemote := false ;
10669: LD_ADDR_EXP 62
10673: PUSH
10674: LD_INT 0
10676: ST_TO_ADDR
// sPowell := false ;
10677: LD_ADDR_EXP 63
10681: PUSH
10682: LD_INT 0
10684: ST_TO_ADDR
// sTeleport := false ;
10685: LD_ADDR_EXP 66
10689: PUSH
10690: LD_INT 0
10692: ST_TO_ADDR
// sOilTower := false ;
10693: LD_ADDR_EXP 68
10697: PUSH
10698: LD_INT 0
10700: ST_TO_ADDR
// sShovel := false ;
10701: LD_ADDR_EXP 69
10705: PUSH
10706: LD_INT 0
10708: ST_TO_ADDR
// sSheik := false ;
10709: LD_ADDR_EXP 70
10713: PUSH
10714: LD_INT 0
10716: ST_TO_ADDR
// sEarthquake := false ;
10717: LD_ADDR_EXP 72
10721: PUSH
10722: LD_INT 0
10724: ST_TO_ADDR
// sAI := false ;
10725: LD_ADDR_EXP 73
10729: PUSH
10730: LD_INT 0
10732: ST_TO_ADDR
// sCargo := false ;
10733: LD_ADDR_EXP 76
10737: PUSH
10738: LD_INT 0
10740: ST_TO_ADDR
// sDLaser := false ;
10741: LD_ADDR_EXP 77
10745: PUSH
10746: LD_INT 0
10748: ST_TO_ADDR
// sExchange := false ;
10749: LD_ADDR_EXP 78
10753: PUSH
10754: LD_INT 0
10756: ST_TO_ADDR
// sFac := false ;
10757: LD_ADDR_EXP 79
10761: PUSH
10762: LD_INT 0
10764: ST_TO_ADDR
// sPower := false ;
10765: LD_ADDR_EXP 80
10769: PUSH
10770: LD_INT 0
10772: ST_TO_ADDR
// sRandom := false ;
10773: LD_ADDR_EXP 81
10777: PUSH
10778: LD_INT 0
10780: ST_TO_ADDR
// sShield := false ;
10781: LD_ADDR_EXP 82
10785: PUSH
10786: LD_INT 0
10788: ST_TO_ADDR
// sTime := false ;
10789: LD_ADDR_EXP 83
10793: PUSH
10794: LD_INT 0
10796: ST_TO_ADDR
// sTools := false ;
10797: LD_ADDR_EXP 84
10801: PUSH
10802: LD_INT 0
10804: ST_TO_ADDR
// sSold := false ;
10805: LD_ADDR_EXP 49
10809: PUSH
10810: LD_INT 0
10812: ST_TO_ADDR
// sDiff := false ;
10813: LD_ADDR_EXP 50
10817: PUSH
10818: LD_INT 0
10820: ST_TO_ADDR
// sFog := false ;
10821: LD_ADDR_EXP 53
10825: PUSH
10826: LD_INT 0
10828: ST_TO_ADDR
// sReset := false ;
10829: LD_ADDR_EXP 54
10833: PUSH
10834: LD_INT 0
10836: ST_TO_ADDR
// sSun := false ;
10837: LD_ADDR_EXP 55
10841: PUSH
10842: LD_INT 0
10844: ST_TO_ADDR
// sTiger := false ;
10845: LD_ADDR_EXP 51
10849: PUSH
10850: LD_INT 0
10852: ST_TO_ADDR
// sBomb := false ;
10853: LD_ADDR_EXP 52
10857: PUSH
10858: LD_INT 0
10860: ST_TO_ADDR
// sWound := false ;
10861: LD_ADDR_EXP 60
10865: PUSH
10866: LD_INT 0
10868: ST_TO_ADDR
// sBetray := false ;
10869: LD_ADDR_EXP 64
10873: PUSH
10874: LD_INT 0
10876: ST_TO_ADDR
// sContamin := false ;
10877: LD_ADDR_EXP 65
10881: PUSH
10882: LD_INT 0
10884: ST_TO_ADDR
// sOil := false ;
10885: LD_ADDR_EXP 67
10889: PUSH
10890: LD_INT 0
10892: ST_TO_ADDR
// sStu := false ;
10893: LD_ADDR_EXP 71
10897: PUSH
10898: LD_INT 0
10900: ST_TO_ADDR
// sBazooka := false ;
10901: LD_ADDR_EXP 74
10905: PUSH
10906: LD_INT 0
10908: ST_TO_ADDR
// sMortar := false ;
10909: LD_ADDR_EXP 75
10913: PUSH
10914: LD_INT 0
10916: ST_TO_ADDR
// sRanger := false ;
10917: LD_ADDR_EXP 85
10921: PUSH
10922: LD_INT 0
10924: ST_TO_ADDR
// sComputer := false ;
10925: LD_ADDR_EXP 86
10929: PUSH
10930: LD_INT 0
10932: ST_TO_ADDR
// s30 := false ;
10933: LD_ADDR_EXP 87
10937: PUSH
10938: LD_INT 0
10940: ST_TO_ADDR
// s60 := false ;
10941: LD_ADDR_EXP 88
10945: PUSH
10946: LD_INT 0
10948: ST_TO_ADDR
// end ;
10949: LD_VAR 0 1
10953: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
10954: LD_INT 0
10956: PPUSH
10957: PPUSH
10958: PPUSH
10959: PPUSH
10960: PPUSH
10961: PPUSH
10962: PPUSH
// result := [ ] ;
10963: LD_ADDR_VAR 0 2
10967: PUSH
10968: EMPTY
10969: ST_TO_ADDR
// if campaign_id = 1 then
10970: LD_OWVAR 69
10974: PUSH
10975: LD_INT 1
10977: EQUAL
10978: IFFALSE 14144
// begin case mission_number of 1 :
10980: LD_OWVAR 70
10984: PUSH
10985: LD_INT 1
10987: DOUBLE
10988: EQUAL
10989: IFTRUE 10993
10991: GO 11069
10993: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
10994: LD_ADDR_VAR 0 2
10998: PUSH
10999: LD_INT 2
11001: PUSH
11002: LD_INT 4
11004: PUSH
11005: LD_INT 11
11007: PUSH
11008: LD_INT 12
11010: PUSH
11011: LD_INT 15
11013: PUSH
11014: LD_INT 16
11016: PUSH
11017: LD_INT 22
11019: PUSH
11020: LD_INT 23
11022: PUSH
11023: LD_INT 26
11025: PUSH
11026: EMPTY
11027: LIST
11028: LIST
11029: LIST
11030: LIST
11031: LIST
11032: LIST
11033: LIST
11034: LIST
11035: LIST
11036: PUSH
11037: LD_INT 101
11039: PUSH
11040: LD_INT 102
11042: PUSH
11043: LD_INT 106
11045: PUSH
11046: LD_INT 116
11048: PUSH
11049: LD_INT 117
11051: PUSH
11052: LD_INT 118
11054: PUSH
11055: EMPTY
11056: LIST
11057: LIST
11058: LIST
11059: LIST
11060: LIST
11061: LIST
11062: PUSH
11063: EMPTY
11064: LIST
11065: LIST
11066: ST_TO_ADDR
11067: GO 14142
11069: LD_INT 2
11071: DOUBLE
11072: EQUAL
11073: IFTRUE 11077
11075: GO 11161
11077: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
11078: LD_ADDR_VAR 0 2
11082: PUSH
11083: LD_INT 2
11085: PUSH
11086: LD_INT 4
11088: PUSH
11089: LD_INT 11
11091: PUSH
11092: LD_INT 12
11094: PUSH
11095: LD_INT 15
11097: PUSH
11098: LD_INT 16
11100: PUSH
11101: LD_INT 22
11103: PUSH
11104: LD_INT 23
11106: PUSH
11107: LD_INT 26
11109: PUSH
11110: EMPTY
11111: LIST
11112: LIST
11113: LIST
11114: LIST
11115: LIST
11116: LIST
11117: LIST
11118: LIST
11119: LIST
11120: PUSH
11121: LD_INT 101
11123: PUSH
11124: LD_INT 102
11126: PUSH
11127: LD_INT 105
11129: PUSH
11130: LD_INT 106
11132: PUSH
11133: LD_INT 108
11135: PUSH
11136: LD_INT 116
11138: PUSH
11139: LD_INT 117
11141: PUSH
11142: LD_INT 118
11144: PUSH
11145: EMPTY
11146: LIST
11147: LIST
11148: LIST
11149: LIST
11150: LIST
11151: LIST
11152: LIST
11153: LIST
11154: PUSH
11155: EMPTY
11156: LIST
11157: LIST
11158: ST_TO_ADDR
11159: GO 14142
11161: LD_INT 3
11163: DOUBLE
11164: EQUAL
11165: IFTRUE 11169
11167: GO 11257
11169: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
11170: LD_ADDR_VAR 0 2
11174: PUSH
11175: LD_INT 2
11177: PUSH
11178: LD_INT 4
11180: PUSH
11181: LD_INT 5
11183: PUSH
11184: LD_INT 11
11186: PUSH
11187: LD_INT 12
11189: PUSH
11190: LD_INT 15
11192: PUSH
11193: LD_INT 16
11195: PUSH
11196: LD_INT 22
11198: PUSH
11199: LD_INT 26
11201: PUSH
11202: LD_INT 36
11204: PUSH
11205: EMPTY
11206: LIST
11207: LIST
11208: LIST
11209: LIST
11210: LIST
11211: LIST
11212: LIST
11213: LIST
11214: LIST
11215: LIST
11216: PUSH
11217: LD_INT 101
11219: PUSH
11220: LD_INT 102
11222: PUSH
11223: LD_INT 105
11225: PUSH
11226: LD_INT 106
11228: PUSH
11229: LD_INT 108
11231: PUSH
11232: LD_INT 116
11234: PUSH
11235: LD_INT 117
11237: PUSH
11238: LD_INT 118
11240: PUSH
11241: EMPTY
11242: LIST
11243: LIST
11244: LIST
11245: LIST
11246: LIST
11247: LIST
11248: LIST
11249: LIST
11250: PUSH
11251: EMPTY
11252: LIST
11253: LIST
11254: ST_TO_ADDR
11255: GO 14142
11257: LD_INT 4
11259: DOUBLE
11260: EQUAL
11261: IFTRUE 11265
11263: GO 11361
11265: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
11266: LD_ADDR_VAR 0 2
11270: PUSH
11271: LD_INT 2
11273: PUSH
11274: LD_INT 4
11276: PUSH
11277: LD_INT 5
11279: PUSH
11280: LD_INT 8
11282: PUSH
11283: LD_INT 11
11285: PUSH
11286: LD_INT 12
11288: PUSH
11289: LD_INT 15
11291: PUSH
11292: LD_INT 16
11294: PUSH
11295: LD_INT 22
11297: PUSH
11298: LD_INT 23
11300: PUSH
11301: LD_INT 26
11303: PUSH
11304: LD_INT 36
11306: PUSH
11307: EMPTY
11308: LIST
11309: LIST
11310: LIST
11311: LIST
11312: LIST
11313: LIST
11314: LIST
11315: LIST
11316: LIST
11317: LIST
11318: LIST
11319: LIST
11320: PUSH
11321: LD_INT 101
11323: PUSH
11324: LD_INT 102
11326: PUSH
11327: LD_INT 105
11329: PUSH
11330: LD_INT 106
11332: PUSH
11333: LD_INT 108
11335: PUSH
11336: LD_INT 116
11338: PUSH
11339: LD_INT 117
11341: PUSH
11342: LD_INT 118
11344: PUSH
11345: EMPTY
11346: LIST
11347: LIST
11348: LIST
11349: LIST
11350: LIST
11351: LIST
11352: LIST
11353: LIST
11354: PUSH
11355: EMPTY
11356: LIST
11357: LIST
11358: ST_TO_ADDR
11359: GO 14142
11361: LD_INT 5
11363: DOUBLE
11364: EQUAL
11365: IFTRUE 11369
11367: GO 11481
11369: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
11370: LD_ADDR_VAR 0 2
11374: PUSH
11375: LD_INT 2
11377: PUSH
11378: LD_INT 4
11380: PUSH
11381: LD_INT 5
11383: PUSH
11384: LD_INT 6
11386: PUSH
11387: LD_INT 8
11389: PUSH
11390: LD_INT 11
11392: PUSH
11393: LD_INT 12
11395: PUSH
11396: LD_INT 15
11398: PUSH
11399: LD_INT 16
11401: PUSH
11402: LD_INT 22
11404: PUSH
11405: LD_INT 23
11407: PUSH
11408: LD_INT 25
11410: PUSH
11411: LD_INT 26
11413: PUSH
11414: LD_INT 36
11416: PUSH
11417: EMPTY
11418: LIST
11419: LIST
11420: LIST
11421: LIST
11422: LIST
11423: LIST
11424: LIST
11425: LIST
11426: LIST
11427: LIST
11428: LIST
11429: LIST
11430: LIST
11431: LIST
11432: PUSH
11433: LD_INT 101
11435: PUSH
11436: LD_INT 102
11438: PUSH
11439: LD_INT 105
11441: PUSH
11442: LD_INT 106
11444: PUSH
11445: LD_INT 108
11447: PUSH
11448: LD_INT 109
11450: PUSH
11451: LD_INT 112
11453: PUSH
11454: LD_INT 116
11456: PUSH
11457: LD_INT 117
11459: PUSH
11460: LD_INT 118
11462: PUSH
11463: EMPTY
11464: LIST
11465: LIST
11466: LIST
11467: LIST
11468: LIST
11469: LIST
11470: LIST
11471: LIST
11472: LIST
11473: LIST
11474: PUSH
11475: EMPTY
11476: LIST
11477: LIST
11478: ST_TO_ADDR
11479: GO 14142
11481: LD_INT 6
11483: DOUBLE
11484: EQUAL
11485: IFTRUE 11489
11487: GO 11621
11489: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
11490: LD_ADDR_VAR 0 2
11494: PUSH
11495: LD_INT 2
11497: PUSH
11498: LD_INT 4
11500: PUSH
11501: LD_INT 5
11503: PUSH
11504: LD_INT 6
11506: PUSH
11507: LD_INT 8
11509: PUSH
11510: LD_INT 11
11512: PUSH
11513: LD_INT 12
11515: PUSH
11516: LD_INT 15
11518: PUSH
11519: LD_INT 16
11521: PUSH
11522: LD_INT 20
11524: PUSH
11525: LD_INT 21
11527: PUSH
11528: LD_INT 22
11530: PUSH
11531: LD_INT 23
11533: PUSH
11534: LD_INT 25
11536: PUSH
11537: LD_INT 26
11539: PUSH
11540: LD_INT 30
11542: PUSH
11543: LD_INT 31
11545: PUSH
11546: LD_INT 32
11548: PUSH
11549: LD_INT 36
11551: PUSH
11552: EMPTY
11553: LIST
11554: LIST
11555: LIST
11556: LIST
11557: LIST
11558: LIST
11559: LIST
11560: LIST
11561: LIST
11562: LIST
11563: LIST
11564: LIST
11565: LIST
11566: LIST
11567: LIST
11568: LIST
11569: LIST
11570: LIST
11571: LIST
11572: PUSH
11573: LD_INT 101
11575: PUSH
11576: LD_INT 102
11578: PUSH
11579: LD_INT 105
11581: PUSH
11582: LD_INT 106
11584: PUSH
11585: LD_INT 108
11587: PUSH
11588: LD_INT 109
11590: PUSH
11591: LD_INT 112
11593: PUSH
11594: LD_INT 116
11596: PUSH
11597: LD_INT 117
11599: PUSH
11600: LD_INT 118
11602: PUSH
11603: EMPTY
11604: LIST
11605: LIST
11606: LIST
11607: LIST
11608: LIST
11609: LIST
11610: LIST
11611: LIST
11612: LIST
11613: LIST
11614: PUSH
11615: EMPTY
11616: LIST
11617: LIST
11618: ST_TO_ADDR
11619: GO 14142
11621: LD_INT 7
11623: DOUBLE
11624: EQUAL
11625: IFTRUE 11629
11627: GO 11741
11629: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
11630: LD_ADDR_VAR 0 2
11634: PUSH
11635: LD_INT 2
11637: PUSH
11638: LD_INT 4
11640: PUSH
11641: LD_INT 5
11643: PUSH
11644: LD_INT 7
11646: PUSH
11647: LD_INT 11
11649: PUSH
11650: LD_INT 12
11652: PUSH
11653: LD_INT 15
11655: PUSH
11656: LD_INT 16
11658: PUSH
11659: LD_INT 20
11661: PUSH
11662: LD_INT 21
11664: PUSH
11665: LD_INT 22
11667: PUSH
11668: LD_INT 23
11670: PUSH
11671: LD_INT 25
11673: PUSH
11674: LD_INT 26
11676: PUSH
11677: EMPTY
11678: LIST
11679: LIST
11680: LIST
11681: LIST
11682: LIST
11683: LIST
11684: LIST
11685: LIST
11686: LIST
11687: LIST
11688: LIST
11689: LIST
11690: LIST
11691: LIST
11692: PUSH
11693: LD_INT 101
11695: PUSH
11696: LD_INT 102
11698: PUSH
11699: LD_INT 103
11701: PUSH
11702: LD_INT 105
11704: PUSH
11705: LD_INT 106
11707: PUSH
11708: LD_INT 108
11710: PUSH
11711: LD_INT 112
11713: PUSH
11714: LD_INT 116
11716: PUSH
11717: LD_INT 117
11719: PUSH
11720: LD_INT 118
11722: PUSH
11723: EMPTY
11724: LIST
11725: LIST
11726: LIST
11727: LIST
11728: LIST
11729: LIST
11730: LIST
11731: LIST
11732: LIST
11733: LIST
11734: PUSH
11735: EMPTY
11736: LIST
11737: LIST
11738: ST_TO_ADDR
11739: GO 14142
11741: LD_INT 8
11743: DOUBLE
11744: EQUAL
11745: IFTRUE 11749
11747: GO 11889
11749: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
11750: LD_ADDR_VAR 0 2
11754: PUSH
11755: LD_INT 2
11757: PUSH
11758: LD_INT 4
11760: PUSH
11761: LD_INT 5
11763: PUSH
11764: LD_INT 6
11766: PUSH
11767: LD_INT 7
11769: PUSH
11770: LD_INT 8
11772: PUSH
11773: LD_INT 11
11775: PUSH
11776: LD_INT 12
11778: PUSH
11779: LD_INT 15
11781: PUSH
11782: LD_INT 16
11784: PUSH
11785: LD_INT 20
11787: PUSH
11788: LD_INT 21
11790: PUSH
11791: LD_INT 22
11793: PUSH
11794: LD_INT 23
11796: PUSH
11797: LD_INT 25
11799: PUSH
11800: LD_INT 26
11802: PUSH
11803: LD_INT 30
11805: PUSH
11806: LD_INT 31
11808: PUSH
11809: LD_INT 32
11811: PUSH
11812: LD_INT 36
11814: PUSH
11815: EMPTY
11816: LIST
11817: LIST
11818: LIST
11819: LIST
11820: LIST
11821: LIST
11822: LIST
11823: LIST
11824: LIST
11825: LIST
11826: LIST
11827: LIST
11828: LIST
11829: LIST
11830: LIST
11831: LIST
11832: LIST
11833: LIST
11834: LIST
11835: LIST
11836: PUSH
11837: LD_INT 101
11839: PUSH
11840: LD_INT 102
11842: PUSH
11843: LD_INT 103
11845: PUSH
11846: LD_INT 105
11848: PUSH
11849: LD_INT 106
11851: PUSH
11852: LD_INT 108
11854: PUSH
11855: LD_INT 109
11857: PUSH
11858: LD_INT 112
11860: PUSH
11861: LD_INT 116
11863: PUSH
11864: LD_INT 117
11866: PUSH
11867: LD_INT 118
11869: PUSH
11870: EMPTY
11871: LIST
11872: LIST
11873: LIST
11874: LIST
11875: LIST
11876: LIST
11877: LIST
11878: LIST
11879: LIST
11880: LIST
11881: LIST
11882: PUSH
11883: EMPTY
11884: LIST
11885: LIST
11886: ST_TO_ADDR
11887: GO 14142
11889: LD_INT 9
11891: DOUBLE
11892: EQUAL
11893: IFTRUE 11897
11895: GO 12045
11897: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
11898: LD_ADDR_VAR 0 2
11902: PUSH
11903: LD_INT 2
11905: PUSH
11906: LD_INT 4
11908: PUSH
11909: LD_INT 5
11911: PUSH
11912: LD_INT 6
11914: PUSH
11915: LD_INT 7
11917: PUSH
11918: LD_INT 8
11920: PUSH
11921: LD_INT 11
11923: PUSH
11924: LD_INT 12
11926: PUSH
11927: LD_INT 15
11929: PUSH
11930: LD_INT 16
11932: PUSH
11933: LD_INT 20
11935: PUSH
11936: LD_INT 21
11938: PUSH
11939: LD_INT 22
11941: PUSH
11942: LD_INT 23
11944: PUSH
11945: LD_INT 25
11947: PUSH
11948: LD_INT 26
11950: PUSH
11951: LD_INT 28
11953: PUSH
11954: LD_INT 30
11956: PUSH
11957: LD_INT 31
11959: PUSH
11960: LD_INT 32
11962: PUSH
11963: LD_INT 36
11965: PUSH
11966: EMPTY
11967: LIST
11968: LIST
11969: LIST
11970: LIST
11971: LIST
11972: LIST
11973: LIST
11974: LIST
11975: LIST
11976: LIST
11977: LIST
11978: LIST
11979: LIST
11980: LIST
11981: LIST
11982: LIST
11983: LIST
11984: LIST
11985: LIST
11986: LIST
11987: LIST
11988: PUSH
11989: LD_INT 101
11991: PUSH
11992: LD_INT 102
11994: PUSH
11995: LD_INT 103
11997: PUSH
11998: LD_INT 105
12000: PUSH
12001: LD_INT 106
12003: PUSH
12004: LD_INT 108
12006: PUSH
12007: LD_INT 109
12009: PUSH
12010: LD_INT 112
12012: PUSH
12013: LD_INT 114
12015: PUSH
12016: LD_INT 116
12018: PUSH
12019: LD_INT 117
12021: PUSH
12022: LD_INT 118
12024: PUSH
12025: EMPTY
12026: LIST
12027: LIST
12028: LIST
12029: LIST
12030: LIST
12031: LIST
12032: LIST
12033: LIST
12034: LIST
12035: LIST
12036: LIST
12037: LIST
12038: PUSH
12039: EMPTY
12040: LIST
12041: LIST
12042: ST_TO_ADDR
12043: GO 14142
12045: LD_INT 10
12047: DOUBLE
12048: EQUAL
12049: IFTRUE 12053
12051: GO 12249
12053: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
12054: LD_ADDR_VAR 0 2
12058: PUSH
12059: LD_INT 2
12061: PUSH
12062: LD_INT 4
12064: PUSH
12065: LD_INT 5
12067: PUSH
12068: LD_INT 6
12070: PUSH
12071: LD_INT 7
12073: PUSH
12074: LD_INT 8
12076: PUSH
12077: LD_INT 9
12079: PUSH
12080: LD_INT 10
12082: PUSH
12083: LD_INT 11
12085: PUSH
12086: LD_INT 12
12088: PUSH
12089: LD_INT 13
12091: PUSH
12092: LD_INT 14
12094: PUSH
12095: LD_INT 15
12097: PUSH
12098: LD_INT 16
12100: PUSH
12101: LD_INT 17
12103: PUSH
12104: LD_INT 18
12106: PUSH
12107: LD_INT 19
12109: PUSH
12110: LD_INT 20
12112: PUSH
12113: LD_INT 21
12115: PUSH
12116: LD_INT 22
12118: PUSH
12119: LD_INT 23
12121: PUSH
12122: LD_INT 24
12124: PUSH
12125: LD_INT 25
12127: PUSH
12128: LD_INT 26
12130: PUSH
12131: LD_INT 28
12133: PUSH
12134: LD_INT 30
12136: PUSH
12137: LD_INT 31
12139: PUSH
12140: LD_INT 32
12142: PUSH
12143: LD_INT 36
12145: PUSH
12146: EMPTY
12147: LIST
12148: LIST
12149: LIST
12150: LIST
12151: LIST
12152: LIST
12153: LIST
12154: LIST
12155: LIST
12156: LIST
12157: LIST
12158: LIST
12159: LIST
12160: LIST
12161: LIST
12162: LIST
12163: LIST
12164: LIST
12165: LIST
12166: LIST
12167: LIST
12168: LIST
12169: LIST
12170: LIST
12171: LIST
12172: LIST
12173: LIST
12174: LIST
12175: LIST
12176: PUSH
12177: LD_INT 101
12179: PUSH
12180: LD_INT 102
12182: PUSH
12183: LD_INT 103
12185: PUSH
12186: LD_INT 104
12188: PUSH
12189: LD_INT 105
12191: PUSH
12192: LD_INT 106
12194: PUSH
12195: LD_INT 107
12197: PUSH
12198: LD_INT 108
12200: PUSH
12201: LD_INT 109
12203: PUSH
12204: LD_INT 110
12206: PUSH
12207: LD_INT 111
12209: PUSH
12210: LD_INT 112
12212: PUSH
12213: LD_INT 114
12215: PUSH
12216: LD_INT 116
12218: PUSH
12219: LD_INT 117
12221: PUSH
12222: LD_INT 118
12224: PUSH
12225: EMPTY
12226: LIST
12227: LIST
12228: LIST
12229: LIST
12230: LIST
12231: LIST
12232: LIST
12233: LIST
12234: LIST
12235: LIST
12236: LIST
12237: LIST
12238: LIST
12239: LIST
12240: LIST
12241: LIST
12242: PUSH
12243: EMPTY
12244: LIST
12245: LIST
12246: ST_TO_ADDR
12247: GO 14142
12249: LD_INT 11
12251: DOUBLE
12252: EQUAL
12253: IFTRUE 12257
12255: GO 12461
12257: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
12258: LD_ADDR_VAR 0 2
12262: PUSH
12263: LD_INT 2
12265: PUSH
12266: LD_INT 3
12268: PUSH
12269: LD_INT 4
12271: PUSH
12272: LD_INT 5
12274: PUSH
12275: LD_INT 6
12277: PUSH
12278: LD_INT 7
12280: PUSH
12281: LD_INT 8
12283: PUSH
12284: LD_INT 9
12286: PUSH
12287: LD_INT 10
12289: PUSH
12290: LD_INT 11
12292: PUSH
12293: LD_INT 12
12295: PUSH
12296: LD_INT 13
12298: PUSH
12299: LD_INT 14
12301: PUSH
12302: LD_INT 15
12304: PUSH
12305: LD_INT 16
12307: PUSH
12308: LD_INT 17
12310: PUSH
12311: LD_INT 18
12313: PUSH
12314: LD_INT 19
12316: PUSH
12317: LD_INT 20
12319: PUSH
12320: LD_INT 21
12322: PUSH
12323: LD_INT 22
12325: PUSH
12326: LD_INT 23
12328: PUSH
12329: LD_INT 24
12331: PUSH
12332: LD_INT 25
12334: PUSH
12335: LD_INT 26
12337: PUSH
12338: LD_INT 28
12340: PUSH
12341: LD_INT 30
12343: PUSH
12344: LD_INT 31
12346: PUSH
12347: LD_INT 32
12349: PUSH
12350: LD_INT 34
12352: PUSH
12353: LD_INT 36
12355: PUSH
12356: EMPTY
12357: LIST
12358: LIST
12359: LIST
12360: LIST
12361: LIST
12362: LIST
12363: LIST
12364: LIST
12365: LIST
12366: LIST
12367: LIST
12368: LIST
12369: LIST
12370: LIST
12371: LIST
12372: LIST
12373: LIST
12374: LIST
12375: LIST
12376: LIST
12377: LIST
12378: LIST
12379: LIST
12380: LIST
12381: LIST
12382: LIST
12383: LIST
12384: LIST
12385: LIST
12386: LIST
12387: LIST
12388: PUSH
12389: LD_INT 101
12391: PUSH
12392: LD_INT 102
12394: PUSH
12395: LD_INT 103
12397: PUSH
12398: LD_INT 104
12400: PUSH
12401: LD_INT 105
12403: PUSH
12404: LD_INT 106
12406: PUSH
12407: LD_INT 107
12409: PUSH
12410: LD_INT 108
12412: PUSH
12413: LD_INT 109
12415: PUSH
12416: LD_INT 110
12418: PUSH
12419: LD_INT 111
12421: PUSH
12422: LD_INT 112
12424: PUSH
12425: LD_INT 114
12427: PUSH
12428: LD_INT 116
12430: PUSH
12431: LD_INT 117
12433: PUSH
12434: LD_INT 118
12436: PUSH
12437: EMPTY
12438: LIST
12439: LIST
12440: LIST
12441: LIST
12442: LIST
12443: LIST
12444: LIST
12445: LIST
12446: LIST
12447: LIST
12448: LIST
12449: LIST
12450: LIST
12451: LIST
12452: LIST
12453: LIST
12454: PUSH
12455: EMPTY
12456: LIST
12457: LIST
12458: ST_TO_ADDR
12459: GO 14142
12461: LD_INT 12
12463: DOUBLE
12464: EQUAL
12465: IFTRUE 12469
12467: GO 12689
12469: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
12470: LD_ADDR_VAR 0 2
12474: PUSH
12475: LD_INT 1
12477: PUSH
12478: LD_INT 2
12480: PUSH
12481: LD_INT 3
12483: PUSH
12484: LD_INT 4
12486: PUSH
12487: LD_INT 5
12489: PUSH
12490: LD_INT 6
12492: PUSH
12493: LD_INT 7
12495: PUSH
12496: LD_INT 8
12498: PUSH
12499: LD_INT 9
12501: PUSH
12502: LD_INT 10
12504: PUSH
12505: LD_INT 11
12507: PUSH
12508: LD_INT 12
12510: PUSH
12511: LD_INT 13
12513: PUSH
12514: LD_INT 14
12516: PUSH
12517: LD_INT 15
12519: PUSH
12520: LD_INT 16
12522: PUSH
12523: LD_INT 17
12525: PUSH
12526: LD_INT 18
12528: PUSH
12529: LD_INT 19
12531: PUSH
12532: LD_INT 20
12534: PUSH
12535: LD_INT 21
12537: PUSH
12538: LD_INT 22
12540: PUSH
12541: LD_INT 23
12543: PUSH
12544: LD_INT 24
12546: PUSH
12547: LD_INT 25
12549: PUSH
12550: LD_INT 26
12552: PUSH
12553: LD_INT 27
12555: PUSH
12556: LD_INT 28
12558: PUSH
12559: LD_INT 30
12561: PUSH
12562: LD_INT 31
12564: PUSH
12565: LD_INT 32
12567: PUSH
12568: LD_INT 33
12570: PUSH
12571: LD_INT 34
12573: PUSH
12574: LD_INT 36
12576: PUSH
12577: EMPTY
12578: LIST
12579: LIST
12580: LIST
12581: LIST
12582: LIST
12583: LIST
12584: LIST
12585: LIST
12586: LIST
12587: LIST
12588: LIST
12589: LIST
12590: LIST
12591: LIST
12592: LIST
12593: LIST
12594: LIST
12595: LIST
12596: LIST
12597: LIST
12598: LIST
12599: LIST
12600: LIST
12601: LIST
12602: LIST
12603: LIST
12604: LIST
12605: LIST
12606: LIST
12607: LIST
12608: LIST
12609: LIST
12610: LIST
12611: LIST
12612: PUSH
12613: LD_INT 101
12615: PUSH
12616: LD_INT 102
12618: PUSH
12619: LD_INT 103
12621: PUSH
12622: LD_INT 104
12624: PUSH
12625: LD_INT 105
12627: PUSH
12628: LD_INT 106
12630: PUSH
12631: LD_INT 107
12633: PUSH
12634: LD_INT 108
12636: PUSH
12637: LD_INT 109
12639: PUSH
12640: LD_INT 110
12642: PUSH
12643: LD_INT 111
12645: PUSH
12646: LD_INT 112
12648: PUSH
12649: LD_INT 113
12651: PUSH
12652: LD_INT 114
12654: PUSH
12655: LD_INT 116
12657: PUSH
12658: LD_INT 117
12660: PUSH
12661: LD_INT 118
12663: PUSH
12664: EMPTY
12665: LIST
12666: LIST
12667: LIST
12668: LIST
12669: LIST
12670: LIST
12671: LIST
12672: LIST
12673: LIST
12674: LIST
12675: LIST
12676: LIST
12677: LIST
12678: LIST
12679: LIST
12680: LIST
12681: LIST
12682: PUSH
12683: EMPTY
12684: LIST
12685: LIST
12686: ST_TO_ADDR
12687: GO 14142
12689: LD_INT 13
12691: DOUBLE
12692: EQUAL
12693: IFTRUE 12697
12695: GO 12905
12697: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
12698: LD_ADDR_VAR 0 2
12702: PUSH
12703: LD_INT 1
12705: PUSH
12706: LD_INT 2
12708: PUSH
12709: LD_INT 3
12711: PUSH
12712: LD_INT 4
12714: PUSH
12715: LD_INT 5
12717: PUSH
12718: LD_INT 8
12720: PUSH
12721: LD_INT 9
12723: PUSH
12724: LD_INT 10
12726: PUSH
12727: LD_INT 11
12729: PUSH
12730: LD_INT 12
12732: PUSH
12733: LD_INT 14
12735: PUSH
12736: LD_INT 15
12738: PUSH
12739: LD_INT 16
12741: PUSH
12742: LD_INT 17
12744: PUSH
12745: LD_INT 18
12747: PUSH
12748: LD_INT 19
12750: PUSH
12751: LD_INT 20
12753: PUSH
12754: LD_INT 21
12756: PUSH
12757: LD_INT 22
12759: PUSH
12760: LD_INT 23
12762: PUSH
12763: LD_INT 24
12765: PUSH
12766: LD_INT 25
12768: PUSH
12769: LD_INT 26
12771: PUSH
12772: LD_INT 27
12774: PUSH
12775: LD_INT 28
12777: PUSH
12778: LD_INT 30
12780: PUSH
12781: LD_INT 31
12783: PUSH
12784: LD_INT 32
12786: PUSH
12787: LD_INT 33
12789: PUSH
12790: LD_INT 34
12792: PUSH
12793: LD_INT 36
12795: PUSH
12796: EMPTY
12797: LIST
12798: LIST
12799: LIST
12800: LIST
12801: LIST
12802: LIST
12803: LIST
12804: LIST
12805: LIST
12806: LIST
12807: LIST
12808: LIST
12809: LIST
12810: LIST
12811: LIST
12812: LIST
12813: LIST
12814: LIST
12815: LIST
12816: LIST
12817: LIST
12818: LIST
12819: LIST
12820: LIST
12821: LIST
12822: LIST
12823: LIST
12824: LIST
12825: LIST
12826: LIST
12827: LIST
12828: PUSH
12829: LD_INT 101
12831: PUSH
12832: LD_INT 102
12834: PUSH
12835: LD_INT 103
12837: PUSH
12838: LD_INT 104
12840: PUSH
12841: LD_INT 105
12843: PUSH
12844: LD_INT 106
12846: PUSH
12847: LD_INT 107
12849: PUSH
12850: LD_INT 108
12852: PUSH
12853: LD_INT 109
12855: PUSH
12856: LD_INT 110
12858: PUSH
12859: LD_INT 111
12861: PUSH
12862: LD_INT 112
12864: PUSH
12865: LD_INT 113
12867: PUSH
12868: LD_INT 114
12870: PUSH
12871: LD_INT 116
12873: PUSH
12874: LD_INT 117
12876: PUSH
12877: LD_INT 118
12879: PUSH
12880: EMPTY
12881: LIST
12882: LIST
12883: LIST
12884: LIST
12885: LIST
12886: LIST
12887: LIST
12888: LIST
12889: LIST
12890: LIST
12891: LIST
12892: LIST
12893: LIST
12894: LIST
12895: LIST
12896: LIST
12897: LIST
12898: PUSH
12899: EMPTY
12900: LIST
12901: LIST
12902: ST_TO_ADDR
12903: GO 14142
12905: LD_INT 14
12907: DOUBLE
12908: EQUAL
12909: IFTRUE 12913
12911: GO 13137
12913: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
12914: LD_ADDR_VAR 0 2
12918: PUSH
12919: LD_INT 1
12921: PUSH
12922: LD_INT 2
12924: PUSH
12925: LD_INT 3
12927: PUSH
12928: LD_INT 4
12930: PUSH
12931: LD_INT 5
12933: PUSH
12934: LD_INT 6
12936: PUSH
12937: LD_INT 7
12939: PUSH
12940: LD_INT 8
12942: PUSH
12943: LD_INT 9
12945: PUSH
12946: LD_INT 10
12948: PUSH
12949: LD_INT 11
12951: PUSH
12952: LD_INT 12
12954: PUSH
12955: LD_INT 13
12957: PUSH
12958: LD_INT 14
12960: PUSH
12961: LD_INT 15
12963: PUSH
12964: LD_INT 16
12966: PUSH
12967: LD_INT 17
12969: PUSH
12970: LD_INT 18
12972: PUSH
12973: LD_INT 19
12975: PUSH
12976: LD_INT 20
12978: PUSH
12979: LD_INT 21
12981: PUSH
12982: LD_INT 22
12984: PUSH
12985: LD_INT 23
12987: PUSH
12988: LD_INT 24
12990: PUSH
12991: LD_INT 25
12993: PUSH
12994: LD_INT 26
12996: PUSH
12997: LD_INT 27
12999: PUSH
13000: LD_INT 28
13002: PUSH
13003: LD_INT 29
13005: PUSH
13006: LD_INT 30
13008: PUSH
13009: LD_INT 31
13011: PUSH
13012: LD_INT 32
13014: PUSH
13015: LD_INT 33
13017: PUSH
13018: LD_INT 34
13020: PUSH
13021: LD_INT 36
13023: PUSH
13024: EMPTY
13025: LIST
13026: LIST
13027: LIST
13028: LIST
13029: LIST
13030: LIST
13031: LIST
13032: LIST
13033: LIST
13034: LIST
13035: LIST
13036: LIST
13037: LIST
13038: LIST
13039: LIST
13040: LIST
13041: LIST
13042: LIST
13043: LIST
13044: LIST
13045: LIST
13046: LIST
13047: LIST
13048: LIST
13049: LIST
13050: LIST
13051: LIST
13052: LIST
13053: LIST
13054: LIST
13055: LIST
13056: LIST
13057: LIST
13058: LIST
13059: LIST
13060: PUSH
13061: LD_INT 101
13063: PUSH
13064: LD_INT 102
13066: PUSH
13067: LD_INT 103
13069: PUSH
13070: LD_INT 104
13072: PUSH
13073: LD_INT 105
13075: PUSH
13076: LD_INT 106
13078: PUSH
13079: LD_INT 107
13081: PUSH
13082: LD_INT 108
13084: PUSH
13085: LD_INT 109
13087: PUSH
13088: LD_INT 110
13090: PUSH
13091: LD_INT 111
13093: PUSH
13094: LD_INT 112
13096: PUSH
13097: LD_INT 113
13099: PUSH
13100: LD_INT 114
13102: PUSH
13103: LD_INT 116
13105: PUSH
13106: LD_INT 117
13108: PUSH
13109: LD_INT 118
13111: PUSH
13112: EMPTY
13113: LIST
13114: LIST
13115: LIST
13116: LIST
13117: LIST
13118: LIST
13119: LIST
13120: LIST
13121: LIST
13122: LIST
13123: LIST
13124: LIST
13125: LIST
13126: LIST
13127: LIST
13128: LIST
13129: LIST
13130: PUSH
13131: EMPTY
13132: LIST
13133: LIST
13134: ST_TO_ADDR
13135: GO 14142
13137: LD_INT 15
13139: DOUBLE
13140: EQUAL
13141: IFTRUE 13145
13143: GO 13369
13145: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
13146: LD_ADDR_VAR 0 2
13150: PUSH
13151: LD_INT 1
13153: PUSH
13154: LD_INT 2
13156: PUSH
13157: LD_INT 3
13159: PUSH
13160: LD_INT 4
13162: PUSH
13163: LD_INT 5
13165: PUSH
13166: LD_INT 6
13168: PUSH
13169: LD_INT 7
13171: PUSH
13172: LD_INT 8
13174: PUSH
13175: LD_INT 9
13177: PUSH
13178: LD_INT 10
13180: PUSH
13181: LD_INT 11
13183: PUSH
13184: LD_INT 12
13186: PUSH
13187: LD_INT 13
13189: PUSH
13190: LD_INT 14
13192: PUSH
13193: LD_INT 15
13195: PUSH
13196: LD_INT 16
13198: PUSH
13199: LD_INT 17
13201: PUSH
13202: LD_INT 18
13204: PUSH
13205: LD_INT 19
13207: PUSH
13208: LD_INT 20
13210: PUSH
13211: LD_INT 21
13213: PUSH
13214: LD_INT 22
13216: PUSH
13217: LD_INT 23
13219: PUSH
13220: LD_INT 24
13222: PUSH
13223: LD_INT 25
13225: PUSH
13226: LD_INT 26
13228: PUSH
13229: LD_INT 27
13231: PUSH
13232: LD_INT 28
13234: PUSH
13235: LD_INT 29
13237: PUSH
13238: LD_INT 30
13240: PUSH
13241: LD_INT 31
13243: PUSH
13244: LD_INT 32
13246: PUSH
13247: LD_INT 33
13249: PUSH
13250: LD_INT 34
13252: PUSH
13253: LD_INT 36
13255: PUSH
13256: EMPTY
13257: LIST
13258: LIST
13259: LIST
13260: LIST
13261: LIST
13262: LIST
13263: LIST
13264: LIST
13265: LIST
13266: LIST
13267: LIST
13268: LIST
13269: LIST
13270: LIST
13271: LIST
13272: LIST
13273: LIST
13274: LIST
13275: LIST
13276: LIST
13277: LIST
13278: LIST
13279: LIST
13280: LIST
13281: LIST
13282: LIST
13283: LIST
13284: LIST
13285: LIST
13286: LIST
13287: LIST
13288: LIST
13289: LIST
13290: LIST
13291: LIST
13292: PUSH
13293: LD_INT 101
13295: PUSH
13296: LD_INT 102
13298: PUSH
13299: LD_INT 103
13301: PUSH
13302: LD_INT 104
13304: PUSH
13305: LD_INT 105
13307: PUSH
13308: LD_INT 106
13310: PUSH
13311: LD_INT 107
13313: PUSH
13314: LD_INT 108
13316: PUSH
13317: LD_INT 109
13319: PUSH
13320: LD_INT 110
13322: PUSH
13323: LD_INT 111
13325: PUSH
13326: LD_INT 112
13328: PUSH
13329: LD_INT 113
13331: PUSH
13332: LD_INT 114
13334: PUSH
13335: LD_INT 116
13337: PUSH
13338: LD_INT 117
13340: PUSH
13341: LD_INT 118
13343: PUSH
13344: EMPTY
13345: LIST
13346: LIST
13347: LIST
13348: LIST
13349: LIST
13350: LIST
13351: LIST
13352: LIST
13353: LIST
13354: LIST
13355: LIST
13356: LIST
13357: LIST
13358: LIST
13359: LIST
13360: LIST
13361: LIST
13362: PUSH
13363: EMPTY
13364: LIST
13365: LIST
13366: ST_TO_ADDR
13367: GO 14142
13369: LD_INT 16
13371: DOUBLE
13372: EQUAL
13373: IFTRUE 13377
13375: GO 13513
13377: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
13378: LD_ADDR_VAR 0 2
13382: PUSH
13383: LD_INT 2
13385: PUSH
13386: LD_INT 4
13388: PUSH
13389: LD_INT 5
13391: PUSH
13392: LD_INT 7
13394: PUSH
13395: LD_INT 11
13397: PUSH
13398: LD_INT 12
13400: PUSH
13401: LD_INT 15
13403: PUSH
13404: LD_INT 16
13406: PUSH
13407: LD_INT 20
13409: PUSH
13410: LD_INT 21
13412: PUSH
13413: LD_INT 22
13415: PUSH
13416: LD_INT 23
13418: PUSH
13419: LD_INT 25
13421: PUSH
13422: LD_INT 26
13424: PUSH
13425: LD_INT 30
13427: PUSH
13428: LD_INT 31
13430: PUSH
13431: LD_INT 32
13433: PUSH
13434: LD_INT 33
13436: PUSH
13437: LD_INT 34
13439: PUSH
13440: EMPTY
13441: LIST
13442: LIST
13443: LIST
13444: LIST
13445: LIST
13446: LIST
13447: LIST
13448: LIST
13449: LIST
13450: LIST
13451: LIST
13452: LIST
13453: LIST
13454: LIST
13455: LIST
13456: LIST
13457: LIST
13458: LIST
13459: LIST
13460: PUSH
13461: LD_INT 101
13463: PUSH
13464: LD_INT 102
13466: PUSH
13467: LD_INT 103
13469: PUSH
13470: LD_INT 106
13472: PUSH
13473: LD_INT 108
13475: PUSH
13476: LD_INT 112
13478: PUSH
13479: LD_INT 113
13481: PUSH
13482: LD_INT 114
13484: PUSH
13485: LD_INT 116
13487: PUSH
13488: LD_INT 117
13490: PUSH
13491: LD_INT 118
13493: PUSH
13494: EMPTY
13495: LIST
13496: LIST
13497: LIST
13498: LIST
13499: LIST
13500: LIST
13501: LIST
13502: LIST
13503: LIST
13504: LIST
13505: LIST
13506: PUSH
13507: EMPTY
13508: LIST
13509: LIST
13510: ST_TO_ADDR
13511: GO 14142
13513: LD_INT 17
13515: DOUBLE
13516: EQUAL
13517: IFTRUE 13521
13519: GO 13745
13521: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
13522: LD_ADDR_VAR 0 2
13526: PUSH
13527: LD_INT 1
13529: PUSH
13530: LD_INT 2
13532: PUSH
13533: LD_INT 3
13535: PUSH
13536: LD_INT 4
13538: PUSH
13539: LD_INT 5
13541: PUSH
13542: LD_INT 6
13544: PUSH
13545: LD_INT 7
13547: PUSH
13548: LD_INT 8
13550: PUSH
13551: LD_INT 9
13553: PUSH
13554: LD_INT 10
13556: PUSH
13557: LD_INT 11
13559: PUSH
13560: LD_INT 12
13562: PUSH
13563: LD_INT 13
13565: PUSH
13566: LD_INT 14
13568: PUSH
13569: LD_INT 15
13571: PUSH
13572: LD_INT 16
13574: PUSH
13575: LD_INT 17
13577: PUSH
13578: LD_INT 18
13580: PUSH
13581: LD_INT 19
13583: PUSH
13584: LD_INT 20
13586: PUSH
13587: LD_INT 21
13589: PUSH
13590: LD_INT 22
13592: PUSH
13593: LD_INT 23
13595: PUSH
13596: LD_INT 24
13598: PUSH
13599: LD_INT 25
13601: PUSH
13602: LD_INT 26
13604: PUSH
13605: LD_INT 27
13607: PUSH
13608: LD_INT 28
13610: PUSH
13611: LD_INT 29
13613: PUSH
13614: LD_INT 30
13616: PUSH
13617: LD_INT 31
13619: PUSH
13620: LD_INT 32
13622: PUSH
13623: LD_INT 33
13625: PUSH
13626: LD_INT 34
13628: PUSH
13629: LD_INT 36
13631: PUSH
13632: EMPTY
13633: LIST
13634: LIST
13635: LIST
13636: LIST
13637: LIST
13638: LIST
13639: LIST
13640: LIST
13641: LIST
13642: LIST
13643: LIST
13644: LIST
13645: LIST
13646: LIST
13647: LIST
13648: LIST
13649: LIST
13650: LIST
13651: LIST
13652: LIST
13653: LIST
13654: LIST
13655: LIST
13656: LIST
13657: LIST
13658: LIST
13659: LIST
13660: LIST
13661: LIST
13662: LIST
13663: LIST
13664: LIST
13665: LIST
13666: LIST
13667: LIST
13668: PUSH
13669: LD_INT 101
13671: PUSH
13672: LD_INT 102
13674: PUSH
13675: LD_INT 103
13677: PUSH
13678: LD_INT 104
13680: PUSH
13681: LD_INT 105
13683: PUSH
13684: LD_INT 106
13686: PUSH
13687: LD_INT 107
13689: PUSH
13690: LD_INT 108
13692: PUSH
13693: LD_INT 109
13695: PUSH
13696: LD_INT 110
13698: PUSH
13699: LD_INT 111
13701: PUSH
13702: LD_INT 112
13704: PUSH
13705: LD_INT 113
13707: PUSH
13708: LD_INT 114
13710: PUSH
13711: LD_INT 116
13713: PUSH
13714: LD_INT 117
13716: PUSH
13717: LD_INT 118
13719: PUSH
13720: EMPTY
13721: LIST
13722: LIST
13723: LIST
13724: LIST
13725: LIST
13726: LIST
13727: LIST
13728: LIST
13729: LIST
13730: LIST
13731: LIST
13732: LIST
13733: LIST
13734: LIST
13735: LIST
13736: LIST
13737: LIST
13738: PUSH
13739: EMPTY
13740: LIST
13741: LIST
13742: ST_TO_ADDR
13743: GO 14142
13745: LD_INT 18
13747: DOUBLE
13748: EQUAL
13749: IFTRUE 13753
13751: GO 13901
13753: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
13754: LD_ADDR_VAR 0 2
13758: PUSH
13759: LD_INT 2
13761: PUSH
13762: LD_INT 4
13764: PUSH
13765: LD_INT 5
13767: PUSH
13768: LD_INT 7
13770: PUSH
13771: LD_INT 11
13773: PUSH
13774: LD_INT 12
13776: PUSH
13777: LD_INT 15
13779: PUSH
13780: LD_INT 16
13782: PUSH
13783: LD_INT 20
13785: PUSH
13786: LD_INT 21
13788: PUSH
13789: LD_INT 22
13791: PUSH
13792: LD_INT 23
13794: PUSH
13795: LD_INT 25
13797: PUSH
13798: LD_INT 26
13800: PUSH
13801: LD_INT 30
13803: PUSH
13804: LD_INT 31
13806: PUSH
13807: LD_INT 32
13809: PUSH
13810: LD_INT 33
13812: PUSH
13813: LD_INT 34
13815: PUSH
13816: LD_INT 35
13818: PUSH
13819: LD_INT 36
13821: PUSH
13822: EMPTY
13823: LIST
13824: LIST
13825: LIST
13826: LIST
13827: LIST
13828: LIST
13829: LIST
13830: LIST
13831: LIST
13832: LIST
13833: LIST
13834: LIST
13835: LIST
13836: LIST
13837: LIST
13838: LIST
13839: LIST
13840: LIST
13841: LIST
13842: LIST
13843: LIST
13844: PUSH
13845: LD_INT 101
13847: PUSH
13848: LD_INT 102
13850: PUSH
13851: LD_INT 103
13853: PUSH
13854: LD_INT 106
13856: PUSH
13857: LD_INT 108
13859: PUSH
13860: LD_INT 112
13862: PUSH
13863: LD_INT 113
13865: PUSH
13866: LD_INT 114
13868: PUSH
13869: LD_INT 115
13871: PUSH
13872: LD_INT 116
13874: PUSH
13875: LD_INT 117
13877: PUSH
13878: LD_INT 118
13880: PUSH
13881: EMPTY
13882: LIST
13883: LIST
13884: LIST
13885: LIST
13886: LIST
13887: LIST
13888: LIST
13889: LIST
13890: LIST
13891: LIST
13892: LIST
13893: LIST
13894: PUSH
13895: EMPTY
13896: LIST
13897: LIST
13898: ST_TO_ADDR
13899: GO 14142
13901: LD_INT 19
13903: DOUBLE
13904: EQUAL
13905: IFTRUE 13909
13907: GO 14141
13909: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
13910: LD_ADDR_VAR 0 2
13914: PUSH
13915: LD_INT 1
13917: PUSH
13918: LD_INT 2
13920: PUSH
13921: LD_INT 3
13923: PUSH
13924: LD_INT 4
13926: PUSH
13927: LD_INT 5
13929: PUSH
13930: LD_INT 6
13932: PUSH
13933: LD_INT 7
13935: PUSH
13936: LD_INT 8
13938: PUSH
13939: LD_INT 9
13941: PUSH
13942: LD_INT 10
13944: PUSH
13945: LD_INT 11
13947: PUSH
13948: LD_INT 12
13950: PUSH
13951: LD_INT 13
13953: PUSH
13954: LD_INT 14
13956: PUSH
13957: LD_INT 15
13959: PUSH
13960: LD_INT 16
13962: PUSH
13963: LD_INT 17
13965: PUSH
13966: LD_INT 18
13968: PUSH
13969: LD_INT 19
13971: PUSH
13972: LD_INT 20
13974: PUSH
13975: LD_INT 21
13977: PUSH
13978: LD_INT 22
13980: PUSH
13981: LD_INT 23
13983: PUSH
13984: LD_INT 24
13986: PUSH
13987: LD_INT 25
13989: PUSH
13990: LD_INT 26
13992: PUSH
13993: LD_INT 27
13995: PUSH
13996: LD_INT 28
13998: PUSH
13999: LD_INT 29
14001: PUSH
14002: LD_INT 30
14004: PUSH
14005: LD_INT 31
14007: PUSH
14008: LD_INT 32
14010: PUSH
14011: LD_INT 33
14013: PUSH
14014: LD_INT 34
14016: PUSH
14017: LD_INT 35
14019: PUSH
14020: LD_INT 36
14022: PUSH
14023: EMPTY
14024: LIST
14025: LIST
14026: LIST
14027: LIST
14028: LIST
14029: LIST
14030: LIST
14031: LIST
14032: LIST
14033: LIST
14034: LIST
14035: LIST
14036: LIST
14037: LIST
14038: LIST
14039: LIST
14040: LIST
14041: LIST
14042: LIST
14043: LIST
14044: LIST
14045: LIST
14046: LIST
14047: LIST
14048: LIST
14049: LIST
14050: LIST
14051: LIST
14052: LIST
14053: LIST
14054: LIST
14055: LIST
14056: LIST
14057: LIST
14058: LIST
14059: LIST
14060: PUSH
14061: LD_INT 101
14063: PUSH
14064: LD_INT 102
14066: PUSH
14067: LD_INT 103
14069: PUSH
14070: LD_INT 104
14072: PUSH
14073: LD_INT 105
14075: PUSH
14076: LD_INT 106
14078: PUSH
14079: LD_INT 107
14081: PUSH
14082: LD_INT 108
14084: PUSH
14085: LD_INT 109
14087: PUSH
14088: LD_INT 110
14090: PUSH
14091: LD_INT 111
14093: PUSH
14094: LD_INT 112
14096: PUSH
14097: LD_INT 113
14099: PUSH
14100: LD_INT 114
14102: PUSH
14103: LD_INT 115
14105: PUSH
14106: LD_INT 116
14108: PUSH
14109: LD_INT 117
14111: PUSH
14112: LD_INT 118
14114: PUSH
14115: EMPTY
14116: LIST
14117: LIST
14118: LIST
14119: LIST
14120: LIST
14121: LIST
14122: LIST
14123: LIST
14124: LIST
14125: LIST
14126: LIST
14127: LIST
14128: LIST
14129: LIST
14130: LIST
14131: LIST
14132: LIST
14133: LIST
14134: PUSH
14135: EMPTY
14136: LIST
14137: LIST
14138: ST_TO_ADDR
14139: GO 14142
14141: POP
// end else
14142: GO 14373
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
14144: LD_ADDR_VAR 0 2
14148: PUSH
14149: LD_INT 1
14151: PUSH
14152: LD_INT 2
14154: PUSH
14155: LD_INT 3
14157: PUSH
14158: LD_INT 4
14160: PUSH
14161: LD_INT 5
14163: PUSH
14164: LD_INT 6
14166: PUSH
14167: LD_INT 7
14169: PUSH
14170: LD_INT 8
14172: PUSH
14173: LD_INT 9
14175: PUSH
14176: LD_INT 10
14178: PUSH
14179: LD_INT 11
14181: PUSH
14182: LD_INT 12
14184: PUSH
14185: LD_INT 13
14187: PUSH
14188: LD_INT 14
14190: PUSH
14191: LD_INT 15
14193: PUSH
14194: LD_INT 16
14196: PUSH
14197: LD_INT 17
14199: PUSH
14200: LD_INT 18
14202: PUSH
14203: LD_INT 19
14205: PUSH
14206: LD_INT 20
14208: PUSH
14209: LD_INT 21
14211: PUSH
14212: LD_INT 22
14214: PUSH
14215: LD_INT 23
14217: PUSH
14218: LD_INT 24
14220: PUSH
14221: LD_INT 25
14223: PUSH
14224: LD_INT 26
14226: PUSH
14227: LD_INT 27
14229: PUSH
14230: LD_INT 28
14232: PUSH
14233: LD_INT 29
14235: PUSH
14236: LD_INT 30
14238: PUSH
14239: LD_INT 31
14241: PUSH
14242: LD_INT 32
14244: PUSH
14245: LD_INT 33
14247: PUSH
14248: LD_INT 34
14250: PUSH
14251: LD_INT 35
14253: PUSH
14254: LD_INT 36
14256: PUSH
14257: EMPTY
14258: LIST
14259: LIST
14260: LIST
14261: LIST
14262: LIST
14263: LIST
14264: LIST
14265: LIST
14266: LIST
14267: LIST
14268: LIST
14269: LIST
14270: LIST
14271: LIST
14272: LIST
14273: LIST
14274: LIST
14275: LIST
14276: LIST
14277: LIST
14278: LIST
14279: LIST
14280: LIST
14281: LIST
14282: LIST
14283: LIST
14284: LIST
14285: LIST
14286: LIST
14287: LIST
14288: LIST
14289: LIST
14290: LIST
14291: LIST
14292: LIST
14293: LIST
14294: PUSH
14295: LD_INT 101
14297: PUSH
14298: LD_INT 102
14300: PUSH
14301: LD_INT 103
14303: PUSH
14304: LD_INT 104
14306: PUSH
14307: LD_INT 105
14309: PUSH
14310: LD_INT 106
14312: PUSH
14313: LD_INT 107
14315: PUSH
14316: LD_INT 108
14318: PUSH
14319: LD_INT 109
14321: PUSH
14322: LD_INT 110
14324: PUSH
14325: LD_INT 111
14327: PUSH
14328: LD_INT 112
14330: PUSH
14331: LD_INT 113
14333: PUSH
14334: LD_INT 114
14336: PUSH
14337: LD_INT 115
14339: PUSH
14340: LD_INT 116
14342: PUSH
14343: LD_INT 117
14345: PUSH
14346: LD_INT 118
14348: PUSH
14349: EMPTY
14350: LIST
14351: LIST
14352: LIST
14353: LIST
14354: LIST
14355: LIST
14356: LIST
14357: LIST
14358: LIST
14359: LIST
14360: LIST
14361: LIST
14362: LIST
14363: LIST
14364: LIST
14365: LIST
14366: LIST
14367: LIST
14368: PUSH
14369: EMPTY
14370: LIST
14371: LIST
14372: ST_TO_ADDR
// if result then
14373: LD_VAR 0 2
14377: IFFALSE 15163
// begin normal :=  ;
14379: LD_ADDR_VAR 0 5
14383: PUSH
14384: LD_STRING 
14386: ST_TO_ADDR
// hardcore :=  ;
14387: LD_ADDR_VAR 0 6
14391: PUSH
14392: LD_STRING 
14394: ST_TO_ADDR
// active :=  ;
14395: LD_ADDR_VAR 0 7
14399: PUSH
14400: LD_STRING 
14402: ST_TO_ADDR
// for i = 1 to normalCounter do
14403: LD_ADDR_VAR 0 8
14407: PUSH
14408: DOUBLE
14409: LD_INT 1
14411: DEC
14412: ST_TO_ADDR
14413: LD_EXP 33
14417: PUSH
14418: FOR_TO
14419: IFFALSE 14520
// begin tmp := 0 ;
14421: LD_ADDR_VAR 0 3
14425: PUSH
14426: LD_STRING 0
14428: ST_TO_ADDR
// if result [ 1 ] then
14429: LD_VAR 0 2
14433: PUSH
14434: LD_INT 1
14436: ARRAY
14437: IFFALSE 14502
// if result [ 1 ] [ 1 ] = i then
14439: LD_VAR 0 2
14443: PUSH
14444: LD_INT 1
14446: ARRAY
14447: PUSH
14448: LD_INT 1
14450: ARRAY
14451: PUSH
14452: LD_VAR 0 8
14456: EQUAL
14457: IFFALSE 14502
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
14459: LD_ADDR_VAR 0 2
14463: PUSH
14464: LD_VAR 0 2
14468: PPUSH
14469: LD_INT 1
14471: PPUSH
14472: LD_VAR 0 2
14476: PUSH
14477: LD_INT 1
14479: ARRAY
14480: PPUSH
14481: LD_INT 1
14483: PPUSH
14484: CALL_OW 3
14488: PPUSH
14489: CALL_OW 1
14493: ST_TO_ADDR
// tmp := 1 ;
14494: LD_ADDR_VAR 0 3
14498: PUSH
14499: LD_STRING 1
14501: ST_TO_ADDR
// end ; normal := normal & tmp ;
14502: LD_ADDR_VAR 0 5
14506: PUSH
14507: LD_VAR 0 5
14511: PUSH
14512: LD_VAR 0 3
14516: STR
14517: ST_TO_ADDR
// end ;
14518: GO 14418
14520: POP
14521: POP
// for i = 1 to hardcoreCounter do
14522: LD_ADDR_VAR 0 8
14526: PUSH
14527: DOUBLE
14528: LD_INT 1
14530: DEC
14531: ST_TO_ADDR
14532: LD_EXP 34
14536: PUSH
14537: FOR_TO
14538: IFFALSE 14643
// begin tmp := 0 ;
14540: LD_ADDR_VAR 0 3
14544: PUSH
14545: LD_STRING 0
14547: ST_TO_ADDR
// if result [ 2 ] then
14548: LD_VAR 0 2
14552: PUSH
14553: LD_INT 2
14555: ARRAY
14556: IFFALSE 14625
// if result [ 2 ] [ 1 ] = 100 + i then
14558: LD_VAR 0 2
14562: PUSH
14563: LD_INT 2
14565: ARRAY
14566: PUSH
14567: LD_INT 1
14569: ARRAY
14570: PUSH
14571: LD_INT 100
14573: PUSH
14574: LD_VAR 0 8
14578: PLUS
14579: EQUAL
14580: IFFALSE 14625
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
14582: LD_ADDR_VAR 0 2
14586: PUSH
14587: LD_VAR 0 2
14591: PPUSH
14592: LD_INT 2
14594: PPUSH
14595: LD_VAR 0 2
14599: PUSH
14600: LD_INT 2
14602: ARRAY
14603: PPUSH
14604: LD_INT 1
14606: PPUSH
14607: CALL_OW 3
14611: PPUSH
14612: CALL_OW 1
14616: ST_TO_ADDR
// tmp := 1 ;
14617: LD_ADDR_VAR 0 3
14621: PUSH
14622: LD_STRING 1
14624: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
14625: LD_ADDR_VAR 0 6
14629: PUSH
14630: LD_VAR 0 6
14634: PUSH
14635: LD_VAR 0 3
14639: STR
14640: ST_TO_ADDR
// end ;
14641: GO 14537
14643: POP
14644: POP
// if isGameLoad then
14645: LD_VAR 0 1
14649: IFFALSE 15124
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
14651: LD_ADDR_VAR 0 4
14655: PUSH
14656: LD_EXP 37
14660: PUSH
14661: LD_EXP 36
14665: PUSH
14666: LD_EXP 38
14670: PUSH
14671: LD_EXP 35
14675: PUSH
14676: LD_EXP 39
14680: PUSH
14681: LD_EXP 40
14685: PUSH
14686: LD_EXP 41
14690: PUSH
14691: LD_EXP 42
14695: PUSH
14696: LD_EXP 43
14700: PUSH
14701: LD_EXP 44
14705: PUSH
14706: LD_EXP 45
14710: PUSH
14711: LD_EXP 46
14715: PUSH
14716: LD_EXP 47
14720: PUSH
14721: LD_EXP 48
14725: PUSH
14726: LD_EXP 56
14730: PUSH
14731: LD_EXP 57
14735: PUSH
14736: LD_EXP 58
14740: PUSH
14741: LD_EXP 59
14745: PUSH
14746: LD_EXP 61
14750: PUSH
14751: LD_EXP 62
14755: PUSH
14756: LD_EXP 63
14760: PUSH
14761: LD_EXP 66
14765: PUSH
14766: LD_EXP 68
14770: PUSH
14771: LD_EXP 69
14775: PUSH
14776: LD_EXP 70
14780: PUSH
14781: LD_EXP 72
14785: PUSH
14786: LD_EXP 73
14790: PUSH
14791: LD_EXP 76
14795: PUSH
14796: LD_EXP 77
14800: PUSH
14801: LD_EXP 78
14805: PUSH
14806: LD_EXP 79
14810: PUSH
14811: LD_EXP 80
14815: PUSH
14816: LD_EXP 81
14820: PUSH
14821: LD_EXP 82
14825: PUSH
14826: LD_EXP 83
14830: PUSH
14831: LD_EXP 84
14835: PUSH
14836: LD_EXP 49
14840: PUSH
14841: LD_EXP 50
14845: PUSH
14846: LD_EXP 53
14850: PUSH
14851: LD_EXP 54
14855: PUSH
14856: LD_EXP 55
14860: PUSH
14861: LD_EXP 51
14865: PUSH
14866: LD_EXP 52
14870: PUSH
14871: LD_EXP 60
14875: PUSH
14876: LD_EXP 64
14880: PUSH
14881: LD_EXP 65
14885: PUSH
14886: LD_EXP 67
14890: PUSH
14891: LD_EXP 71
14895: PUSH
14896: LD_EXP 74
14900: PUSH
14901: LD_EXP 75
14905: PUSH
14906: LD_EXP 85
14910: PUSH
14911: LD_EXP 86
14915: PUSH
14916: LD_EXP 87
14920: PUSH
14921: LD_EXP 88
14925: PUSH
14926: EMPTY
14927: LIST
14928: LIST
14929: LIST
14930: LIST
14931: LIST
14932: LIST
14933: LIST
14934: LIST
14935: LIST
14936: LIST
14937: LIST
14938: LIST
14939: LIST
14940: LIST
14941: LIST
14942: LIST
14943: LIST
14944: LIST
14945: LIST
14946: LIST
14947: LIST
14948: LIST
14949: LIST
14950: LIST
14951: LIST
14952: LIST
14953: LIST
14954: LIST
14955: LIST
14956: LIST
14957: LIST
14958: LIST
14959: LIST
14960: LIST
14961: LIST
14962: LIST
14963: LIST
14964: LIST
14965: LIST
14966: LIST
14967: LIST
14968: LIST
14969: LIST
14970: LIST
14971: LIST
14972: LIST
14973: LIST
14974: LIST
14975: LIST
14976: LIST
14977: LIST
14978: LIST
14979: LIST
14980: LIST
14981: ST_TO_ADDR
// tmp :=  ;
14982: LD_ADDR_VAR 0 3
14986: PUSH
14987: LD_STRING 
14989: ST_TO_ADDR
// for i = 1 to normalCounter do
14990: LD_ADDR_VAR 0 8
14994: PUSH
14995: DOUBLE
14996: LD_INT 1
14998: DEC
14999: ST_TO_ADDR
15000: LD_EXP 33
15004: PUSH
15005: FOR_TO
15006: IFFALSE 15042
// begin if flags [ i ] then
15008: LD_VAR 0 4
15012: PUSH
15013: LD_VAR 0 8
15017: ARRAY
15018: IFFALSE 15040
// tmp := tmp & i & ; ;
15020: LD_ADDR_VAR 0 3
15024: PUSH
15025: LD_VAR 0 3
15029: PUSH
15030: LD_VAR 0 8
15034: STR
15035: PUSH
15036: LD_STRING ;
15038: STR
15039: ST_TO_ADDR
// end ;
15040: GO 15005
15042: POP
15043: POP
// for i = 1 to hardcoreCounter do
15044: LD_ADDR_VAR 0 8
15048: PUSH
15049: DOUBLE
15050: LD_INT 1
15052: DEC
15053: ST_TO_ADDR
15054: LD_EXP 34
15058: PUSH
15059: FOR_TO
15060: IFFALSE 15106
// begin if flags [ normalCounter + i ] then
15062: LD_VAR 0 4
15066: PUSH
15067: LD_EXP 33
15071: PUSH
15072: LD_VAR 0 8
15076: PLUS
15077: ARRAY
15078: IFFALSE 15104
// tmp := tmp & ( 100 + i ) & ; ;
15080: LD_ADDR_VAR 0 3
15084: PUSH
15085: LD_VAR 0 3
15089: PUSH
15090: LD_INT 100
15092: PUSH
15093: LD_VAR 0 8
15097: PLUS
15098: STR
15099: PUSH
15100: LD_STRING ;
15102: STR
15103: ST_TO_ADDR
// end ;
15104: GO 15059
15106: POP
15107: POP
// if tmp then
15108: LD_VAR 0 3
15112: IFFALSE 15124
// active := tmp ;
15114: LD_ADDR_VAR 0 7
15118: PUSH
15119: LD_VAR 0 3
15123: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
15124: LD_STRING getStreamItemsFromMission("
15126: PUSH
15127: LD_VAR 0 5
15131: STR
15132: PUSH
15133: LD_STRING ","
15135: STR
15136: PUSH
15137: LD_VAR 0 6
15141: STR
15142: PUSH
15143: LD_STRING ","
15145: STR
15146: PUSH
15147: LD_VAR 0 7
15151: STR
15152: PUSH
15153: LD_STRING ")
15155: STR
15156: PPUSH
15157: CALL_OW 559
// end else
15161: GO 15170
// ToLua ( getStreamItemsFromMission("","","") ) ;
15163: LD_STRING getStreamItemsFromMission("","","")
15165: PPUSH
15166: CALL_OW 559
// end ;
15170: LD_VAR 0 2
15174: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
15175: LD_EXP 32
15179: IFFALSE 15187
15181: PUSH
15182: LD_EXP 37
15186: AND
15187: IFFALSE 15311
15189: GO 15191
15191: DISABLE
15192: LD_INT 0
15194: PPUSH
15195: PPUSH
// begin enable ;
15196: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
15197: LD_ADDR_VAR 0 2
15201: PUSH
15202: LD_INT 22
15204: PUSH
15205: LD_OWVAR 2
15209: PUSH
15210: EMPTY
15211: LIST
15212: LIST
15213: PUSH
15214: LD_INT 2
15216: PUSH
15217: LD_INT 34
15219: PUSH
15220: LD_INT 7
15222: PUSH
15223: EMPTY
15224: LIST
15225: LIST
15226: PUSH
15227: LD_INT 34
15229: PUSH
15230: LD_INT 45
15232: PUSH
15233: EMPTY
15234: LIST
15235: LIST
15236: PUSH
15237: LD_INT 34
15239: PUSH
15240: LD_INT 28
15242: PUSH
15243: EMPTY
15244: LIST
15245: LIST
15246: PUSH
15247: LD_INT 34
15249: PUSH
15250: LD_INT 47
15252: PUSH
15253: EMPTY
15254: LIST
15255: LIST
15256: PUSH
15257: EMPTY
15258: LIST
15259: LIST
15260: LIST
15261: LIST
15262: LIST
15263: PUSH
15264: EMPTY
15265: LIST
15266: LIST
15267: PPUSH
15268: CALL_OW 69
15272: ST_TO_ADDR
// if not tmp then
15273: LD_VAR 0 2
15277: NOT
15278: IFFALSE 15282
// exit ;
15280: GO 15311
// for i in tmp do
15282: LD_ADDR_VAR 0 1
15286: PUSH
15287: LD_VAR 0 2
15291: PUSH
15292: FOR_IN
15293: IFFALSE 15309
// begin SetLives ( i , 0 ) ;
15295: LD_VAR 0 1
15299: PPUSH
15300: LD_INT 0
15302: PPUSH
15303: CALL_OW 234
// end ;
15307: GO 15292
15309: POP
15310: POP
// end ;
15311: PPOPN 2
15313: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
15314: LD_EXP 32
15318: IFFALSE 15326
15320: PUSH
15321: LD_EXP 38
15325: AND
15326: IFFALSE 15410
15328: GO 15330
15330: DISABLE
15331: LD_INT 0
15333: PPUSH
15334: PPUSH
// begin enable ;
15335: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
15336: LD_ADDR_VAR 0 2
15340: PUSH
15341: LD_INT 22
15343: PUSH
15344: LD_OWVAR 2
15348: PUSH
15349: EMPTY
15350: LIST
15351: LIST
15352: PUSH
15353: LD_INT 32
15355: PUSH
15356: LD_INT 3
15358: PUSH
15359: EMPTY
15360: LIST
15361: LIST
15362: PUSH
15363: EMPTY
15364: LIST
15365: LIST
15366: PPUSH
15367: CALL_OW 69
15371: ST_TO_ADDR
// if not tmp then
15372: LD_VAR 0 2
15376: NOT
15377: IFFALSE 15381
// exit ;
15379: GO 15410
// for i in tmp do
15381: LD_ADDR_VAR 0 1
15385: PUSH
15386: LD_VAR 0 2
15390: PUSH
15391: FOR_IN
15392: IFFALSE 15408
// begin SetLives ( i , 0 ) ;
15394: LD_VAR 0 1
15398: PPUSH
15399: LD_INT 0
15401: PPUSH
15402: CALL_OW 234
// end ;
15406: GO 15391
15408: POP
15409: POP
// end ;
15410: PPOPN 2
15412: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
15413: LD_EXP 32
15417: IFFALSE 15425
15419: PUSH
15420: LD_EXP 35
15424: AND
15425: IFFALSE 15518
15427: GO 15429
15429: DISABLE
15430: LD_INT 0
15432: PPUSH
// begin enable ;
15433: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
15434: LD_ADDR_VAR 0 1
15438: PUSH
15439: LD_INT 22
15441: PUSH
15442: LD_OWVAR 2
15446: PUSH
15447: EMPTY
15448: LIST
15449: LIST
15450: PUSH
15451: LD_INT 2
15453: PUSH
15454: LD_INT 25
15456: PUSH
15457: LD_INT 5
15459: PUSH
15460: EMPTY
15461: LIST
15462: LIST
15463: PUSH
15464: LD_INT 25
15466: PUSH
15467: LD_INT 9
15469: PUSH
15470: EMPTY
15471: LIST
15472: LIST
15473: PUSH
15474: LD_INT 25
15476: PUSH
15477: LD_INT 8
15479: PUSH
15480: EMPTY
15481: LIST
15482: LIST
15483: PUSH
15484: EMPTY
15485: LIST
15486: LIST
15487: LIST
15488: LIST
15489: PUSH
15490: EMPTY
15491: LIST
15492: LIST
15493: PPUSH
15494: CALL_OW 69
15498: PUSH
15499: FOR_IN
15500: IFFALSE 15516
// begin SetClass ( i , 1 ) ;
15502: LD_VAR 0 1
15506: PPUSH
15507: LD_INT 1
15509: PPUSH
15510: CALL_OW 336
// end ;
15514: GO 15499
15516: POP
15517: POP
// end ;
15518: PPOPN 1
15520: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
15521: LD_EXP 32
15525: IFFALSE 15533
15527: PUSH
15528: LD_EXP 36
15532: AND
15533: IFFALSE 15545
15535: PUSH
15536: LD_OWVAR 65
15540: PUSH
15541: LD_INT 7
15543: LESS
15544: AND
15545: IFFALSE 15559
15547: GO 15549
15549: DISABLE
// begin enable ;
15550: ENABLE
// game_speed := 7 ;
15551: LD_ADDR_OWVAR 65
15555: PUSH
15556: LD_INT 7
15558: ST_TO_ADDR
// end ;
15559: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
15560: LD_EXP 32
15564: IFFALSE 15572
15566: PUSH
15567: LD_EXP 39
15571: AND
15572: IFFALSE 15774
15574: GO 15576
15576: DISABLE
15577: LD_INT 0
15579: PPUSH
15580: PPUSH
15581: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
15582: LD_ADDR_VAR 0 3
15586: PUSH
15587: LD_INT 81
15589: PUSH
15590: LD_OWVAR 2
15594: PUSH
15595: EMPTY
15596: LIST
15597: LIST
15598: PUSH
15599: LD_INT 21
15601: PUSH
15602: LD_INT 1
15604: PUSH
15605: EMPTY
15606: LIST
15607: LIST
15608: PUSH
15609: EMPTY
15610: LIST
15611: LIST
15612: PPUSH
15613: CALL_OW 69
15617: ST_TO_ADDR
// if not tmp then
15618: LD_VAR 0 3
15622: NOT
15623: IFFALSE 15627
// exit ;
15625: GO 15774
// if tmp > 5 then
15627: LD_VAR 0 3
15631: PUSH
15632: LD_INT 5
15634: GREATER
15635: IFFALSE 15647
// k := 5 else
15637: LD_ADDR_VAR 0 2
15641: PUSH
15642: LD_INT 5
15644: ST_TO_ADDR
15645: GO 15657
// k := tmp ;
15647: LD_ADDR_VAR 0 2
15651: PUSH
15652: LD_VAR 0 3
15656: ST_TO_ADDR
// for i := 1 to k do
15657: LD_ADDR_VAR 0 1
15661: PUSH
15662: DOUBLE
15663: LD_INT 1
15665: DEC
15666: ST_TO_ADDR
15667: LD_VAR 0 2
15671: PUSH
15672: FOR_TO
15673: IFFALSE 15772
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
15675: LD_VAR 0 3
15679: PUSH
15680: LD_VAR 0 1
15684: ARRAY
15685: PPUSH
15686: LD_VAR 0 1
15690: PUSH
15691: LD_INT 4
15693: MOD
15694: PUSH
15695: LD_INT 1
15697: PLUS
15698: PPUSH
15699: CALL_OW 259
15703: PUSH
15704: LD_INT 10
15706: LESS
15707: IFFALSE 15770
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
15709: LD_VAR 0 3
15713: PUSH
15714: LD_VAR 0 1
15718: ARRAY
15719: PPUSH
15720: LD_VAR 0 1
15724: PUSH
15725: LD_INT 4
15727: MOD
15728: PUSH
15729: LD_INT 1
15731: PLUS
15732: PPUSH
15733: LD_VAR 0 3
15737: PUSH
15738: LD_VAR 0 1
15742: ARRAY
15743: PPUSH
15744: LD_VAR 0 1
15748: PUSH
15749: LD_INT 4
15751: MOD
15752: PUSH
15753: LD_INT 1
15755: PLUS
15756: PPUSH
15757: CALL_OW 259
15761: PUSH
15762: LD_INT 1
15764: PLUS
15765: PPUSH
15766: CALL_OW 237
15770: GO 15672
15772: POP
15773: POP
// end ;
15774: PPOPN 3
15776: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
15777: LD_EXP 32
15781: IFFALSE 15789
15783: PUSH
15784: LD_EXP 40
15788: AND
15789: IFFALSE 15809
15791: GO 15793
15793: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
15794: LD_INT 4
15796: PPUSH
15797: LD_OWVAR 2
15801: PPUSH
15802: LD_INT 0
15804: PPUSH
15805: CALL_OW 324
15809: END
// every 0 0$1 trigger StreamModeActive and sShovel do
15810: LD_EXP 32
15814: IFFALSE 15822
15816: PUSH
15817: LD_EXP 69
15821: AND
15822: IFFALSE 15842
15824: GO 15826
15826: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
15827: LD_INT 19
15829: PPUSH
15830: LD_OWVAR 2
15834: PPUSH
15835: LD_INT 0
15837: PPUSH
15838: CALL_OW 324
15842: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
15843: LD_EXP 32
15847: IFFALSE 15855
15849: PUSH
15850: LD_EXP 41
15854: AND
15855: IFFALSE 15957
15857: GO 15859
15859: DISABLE
15860: LD_INT 0
15862: PPUSH
15863: PPUSH
// begin enable ;
15864: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
15865: LD_ADDR_VAR 0 2
15869: PUSH
15870: LD_INT 22
15872: PUSH
15873: LD_OWVAR 2
15877: PUSH
15878: EMPTY
15879: LIST
15880: LIST
15881: PUSH
15882: LD_INT 2
15884: PUSH
15885: LD_INT 34
15887: PUSH
15888: LD_INT 11
15890: PUSH
15891: EMPTY
15892: LIST
15893: LIST
15894: PUSH
15895: LD_INT 34
15897: PUSH
15898: LD_INT 30
15900: PUSH
15901: EMPTY
15902: LIST
15903: LIST
15904: PUSH
15905: EMPTY
15906: LIST
15907: LIST
15908: LIST
15909: PUSH
15910: EMPTY
15911: LIST
15912: LIST
15913: PPUSH
15914: CALL_OW 69
15918: ST_TO_ADDR
// if not tmp then
15919: LD_VAR 0 2
15923: NOT
15924: IFFALSE 15928
// exit ;
15926: GO 15957
// for i in tmp do
15928: LD_ADDR_VAR 0 1
15932: PUSH
15933: LD_VAR 0 2
15937: PUSH
15938: FOR_IN
15939: IFFALSE 15955
// begin SetLives ( i , 0 ) ;
15941: LD_VAR 0 1
15945: PPUSH
15946: LD_INT 0
15948: PPUSH
15949: CALL_OW 234
// end ;
15953: GO 15938
15955: POP
15956: POP
// end ;
15957: PPOPN 2
15959: END
// every 0 0$1 trigger StreamModeActive and sBunker do
15960: LD_EXP 32
15964: IFFALSE 15972
15966: PUSH
15967: LD_EXP 42
15971: AND
15972: IFFALSE 15992
15974: GO 15976
15976: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
15977: LD_INT 32
15979: PPUSH
15980: LD_OWVAR 2
15984: PPUSH
15985: LD_INT 0
15987: PPUSH
15988: CALL_OW 324
15992: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
15993: LD_EXP 32
15997: IFFALSE 16005
15999: PUSH
16000: LD_EXP 43
16004: AND
16005: IFFALSE 16188
16007: GO 16009
16009: DISABLE
16010: LD_INT 0
16012: PPUSH
16013: PPUSH
16014: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
16015: LD_ADDR_VAR 0 2
16019: PUSH
16020: LD_INT 22
16022: PUSH
16023: LD_OWVAR 2
16027: PUSH
16028: EMPTY
16029: LIST
16030: LIST
16031: PUSH
16032: LD_INT 33
16034: PUSH
16035: LD_INT 3
16037: PUSH
16038: EMPTY
16039: LIST
16040: LIST
16041: PUSH
16042: EMPTY
16043: LIST
16044: LIST
16045: PPUSH
16046: CALL_OW 69
16050: ST_TO_ADDR
// if not tmp then
16051: LD_VAR 0 2
16055: NOT
16056: IFFALSE 16060
// exit ;
16058: GO 16188
// side := 0 ;
16060: LD_ADDR_VAR 0 3
16064: PUSH
16065: LD_INT 0
16067: ST_TO_ADDR
// for i := 1 to 8 do
16068: LD_ADDR_VAR 0 1
16072: PUSH
16073: DOUBLE
16074: LD_INT 1
16076: DEC
16077: ST_TO_ADDR
16078: LD_INT 8
16080: PUSH
16081: FOR_TO
16082: IFFALSE 16132
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
16084: LD_OWVAR 2
16088: PUSH
16089: LD_VAR 0 1
16093: NONEQUAL
16094: IFFALSE 16116
16096: PUSH
16097: LD_OWVAR 2
16101: PPUSH
16102: LD_VAR 0 1
16106: PPUSH
16107: CALL_OW 81
16111: PUSH
16112: LD_INT 2
16114: EQUAL
16115: AND
16116: IFFALSE 16130
// begin side := i ;
16118: LD_ADDR_VAR 0 3
16122: PUSH
16123: LD_VAR 0 1
16127: ST_TO_ADDR
// break ;
16128: GO 16132
// end ;
16130: GO 16081
16132: POP
16133: POP
// if not side then
16134: LD_VAR 0 3
16138: NOT
16139: IFFALSE 16143
// exit ;
16141: GO 16188
// for i := 1 to tmp do
16143: LD_ADDR_VAR 0 1
16147: PUSH
16148: DOUBLE
16149: LD_INT 1
16151: DEC
16152: ST_TO_ADDR
16153: LD_VAR 0 2
16157: PUSH
16158: FOR_TO
16159: IFFALSE 16186
// if Prob ( 60 ) then
16161: LD_INT 60
16163: PPUSH
16164: CALL_OW 13
16168: IFFALSE 16184
// SetSide ( i , side ) ;
16170: LD_VAR 0 1
16174: PPUSH
16175: LD_VAR 0 3
16179: PPUSH
16180: CALL_OW 235
16184: GO 16158
16186: POP
16187: POP
// end ;
16188: PPOPN 3
16190: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
16191: LD_EXP 32
16195: IFFALSE 16203
16197: PUSH
16198: LD_EXP 45
16202: AND
16203: IFFALSE 16322
16205: GO 16207
16207: DISABLE
16208: LD_INT 0
16210: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
16211: LD_ADDR_VAR 0 1
16215: PUSH
16216: LD_INT 22
16218: PUSH
16219: LD_OWVAR 2
16223: PUSH
16224: EMPTY
16225: LIST
16226: LIST
16227: PUSH
16228: LD_INT 21
16230: PUSH
16231: LD_INT 1
16233: PUSH
16234: EMPTY
16235: LIST
16236: LIST
16237: PUSH
16238: LD_INT 3
16240: PUSH
16241: LD_INT 23
16243: PUSH
16244: LD_INT 0
16246: PUSH
16247: EMPTY
16248: LIST
16249: LIST
16250: PUSH
16251: EMPTY
16252: LIST
16253: LIST
16254: PUSH
16255: EMPTY
16256: LIST
16257: LIST
16258: LIST
16259: PPUSH
16260: CALL_OW 69
16264: PUSH
16265: FOR_IN
16266: IFFALSE 16320
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
16268: LD_VAR 0 1
16272: PPUSH
16273: CALL_OW 257
16277: PUSH
16278: LD_INT 1
16280: PUSH
16281: LD_INT 2
16283: PUSH
16284: LD_INT 3
16286: PUSH
16287: LD_INT 4
16289: PUSH
16290: EMPTY
16291: LIST
16292: LIST
16293: LIST
16294: LIST
16295: IN
16296: IFFALSE 16318
// SetClass ( un , rand ( 1 , 4 ) ) ;
16298: LD_VAR 0 1
16302: PPUSH
16303: LD_INT 1
16305: PPUSH
16306: LD_INT 4
16308: PPUSH
16309: CALL_OW 12
16313: PPUSH
16314: CALL_OW 336
16318: GO 16265
16320: POP
16321: POP
// end ;
16322: PPOPN 1
16324: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
16325: LD_EXP 32
16329: IFFALSE 16337
16331: PUSH
16332: LD_EXP 44
16336: AND
16337: IFFALSE 16416
16339: GO 16341
16341: DISABLE
16342: LD_INT 0
16344: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
16345: LD_ADDR_VAR 0 1
16349: PUSH
16350: LD_INT 22
16352: PUSH
16353: LD_OWVAR 2
16357: PUSH
16358: EMPTY
16359: LIST
16360: LIST
16361: PUSH
16362: LD_INT 21
16364: PUSH
16365: LD_INT 3
16367: PUSH
16368: EMPTY
16369: LIST
16370: LIST
16371: PUSH
16372: EMPTY
16373: LIST
16374: LIST
16375: PPUSH
16376: CALL_OW 69
16380: ST_TO_ADDR
// if not tmp then
16381: LD_VAR 0 1
16385: NOT
16386: IFFALSE 16390
// exit ;
16388: GO 16416
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
16390: LD_VAR 0 1
16394: PUSH
16395: LD_INT 1
16397: PPUSH
16398: LD_VAR 0 1
16402: PPUSH
16403: CALL_OW 12
16407: ARRAY
16408: PPUSH
16409: LD_INT 100
16411: PPUSH
16412: CALL_OW 234
// end ;
16416: PPOPN 1
16418: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
16419: LD_EXP 32
16423: IFFALSE 16431
16425: PUSH
16426: LD_EXP 46
16430: AND
16431: IFFALSE 16529
16433: GO 16435
16435: DISABLE
16436: LD_INT 0
16438: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
16439: LD_ADDR_VAR 0 1
16443: PUSH
16444: LD_INT 22
16446: PUSH
16447: LD_OWVAR 2
16451: PUSH
16452: EMPTY
16453: LIST
16454: LIST
16455: PUSH
16456: LD_INT 21
16458: PUSH
16459: LD_INT 1
16461: PUSH
16462: EMPTY
16463: LIST
16464: LIST
16465: PUSH
16466: EMPTY
16467: LIST
16468: LIST
16469: PPUSH
16470: CALL_OW 69
16474: ST_TO_ADDR
// if not tmp then
16475: LD_VAR 0 1
16479: NOT
16480: IFFALSE 16484
// exit ;
16482: GO 16529
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
16484: LD_VAR 0 1
16488: PUSH
16489: LD_INT 1
16491: PPUSH
16492: LD_VAR 0 1
16496: PPUSH
16497: CALL_OW 12
16501: ARRAY
16502: PPUSH
16503: LD_INT 1
16505: PPUSH
16506: LD_INT 4
16508: PPUSH
16509: CALL_OW 12
16513: PPUSH
16514: LD_INT 3000
16516: PPUSH
16517: LD_INT 9000
16519: PPUSH
16520: CALL_OW 12
16524: PPUSH
16525: CALL_OW 492
// end ;
16529: PPOPN 1
16531: END
// every 0 0$1 trigger StreamModeActive and sDepot do
16532: LD_EXP 32
16536: IFFALSE 16544
16538: PUSH
16539: LD_EXP 47
16543: AND
16544: IFFALSE 16564
16546: GO 16548
16548: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
16549: LD_INT 1
16551: PPUSH
16552: LD_OWVAR 2
16556: PPUSH
16557: LD_INT 0
16559: PPUSH
16560: CALL_OW 324
16564: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
16565: LD_EXP 32
16569: IFFALSE 16577
16571: PUSH
16572: LD_EXP 48
16576: AND
16577: IFFALSE 16660
16579: GO 16581
16581: DISABLE
16582: LD_INT 0
16584: PPUSH
16585: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
16586: LD_ADDR_VAR 0 2
16590: PUSH
16591: LD_INT 22
16593: PUSH
16594: LD_OWVAR 2
16598: PUSH
16599: EMPTY
16600: LIST
16601: LIST
16602: PUSH
16603: LD_INT 21
16605: PUSH
16606: LD_INT 3
16608: PUSH
16609: EMPTY
16610: LIST
16611: LIST
16612: PUSH
16613: EMPTY
16614: LIST
16615: LIST
16616: PPUSH
16617: CALL_OW 69
16621: ST_TO_ADDR
// if not tmp then
16622: LD_VAR 0 2
16626: NOT
16627: IFFALSE 16631
// exit ;
16629: GO 16660
// for i in tmp do
16631: LD_ADDR_VAR 0 1
16635: PUSH
16636: LD_VAR 0 2
16640: PUSH
16641: FOR_IN
16642: IFFALSE 16658
// SetBLevel ( i , 10 ) ;
16644: LD_VAR 0 1
16648: PPUSH
16649: LD_INT 10
16651: PPUSH
16652: CALL_OW 241
16656: GO 16641
16658: POP
16659: POP
// end ;
16660: PPOPN 2
16662: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
16663: LD_EXP 32
16667: IFFALSE 16675
16669: PUSH
16670: LD_EXP 49
16674: AND
16675: IFFALSE 16786
16677: GO 16679
16679: DISABLE
16680: LD_INT 0
16682: PPUSH
16683: PPUSH
16684: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
16685: LD_ADDR_VAR 0 3
16689: PUSH
16690: LD_INT 22
16692: PUSH
16693: LD_OWVAR 2
16697: PUSH
16698: EMPTY
16699: LIST
16700: LIST
16701: PUSH
16702: LD_INT 25
16704: PUSH
16705: LD_INT 1
16707: PUSH
16708: EMPTY
16709: LIST
16710: LIST
16711: PUSH
16712: EMPTY
16713: LIST
16714: LIST
16715: PPUSH
16716: CALL_OW 69
16720: ST_TO_ADDR
// if not tmp then
16721: LD_VAR 0 3
16725: NOT
16726: IFFALSE 16730
// exit ;
16728: GO 16786
// un := tmp [ rand ( 1 , tmp ) ] ;
16730: LD_ADDR_VAR 0 2
16734: PUSH
16735: LD_VAR 0 3
16739: PUSH
16740: LD_INT 1
16742: PPUSH
16743: LD_VAR 0 3
16747: PPUSH
16748: CALL_OW 12
16752: ARRAY
16753: ST_TO_ADDR
// if Crawls ( un ) then
16754: LD_VAR 0 2
16758: PPUSH
16759: CALL_OW 318
16763: IFFALSE 16774
// ComWalk ( un ) ;
16765: LD_VAR 0 2
16769: PPUSH
16770: CALL_OW 138
// SetClass ( un , class_sniper ) ;
16774: LD_VAR 0 2
16778: PPUSH
16779: LD_INT 5
16781: PPUSH
16782: CALL_OW 336
// end ;
16786: PPOPN 3
16788: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
16789: LD_EXP 32
16793: IFFALSE 16801
16795: PUSH
16796: LD_EXP 50
16800: AND
16801: IFFALSE 16813
16803: PUSH
16804: LD_OWVAR 67
16808: PUSH
16809: LD_INT 4
16811: LESS
16812: AND
16813: IFFALSE 16832
16815: GO 16817
16817: DISABLE
// begin Difficulty := Difficulty + 1 ;
16818: LD_ADDR_OWVAR 67
16822: PUSH
16823: LD_OWVAR 67
16827: PUSH
16828: LD_INT 1
16830: PLUS
16831: ST_TO_ADDR
// end ;
16832: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
16833: LD_EXP 32
16837: IFFALSE 16845
16839: PUSH
16840: LD_EXP 51
16844: AND
16845: IFFALSE 16948
16847: GO 16849
16849: DISABLE
16850: LD_INT 0
16852: PPUSH
// begin for i := 1 to 5 do
16853: LD_ADDR_VAR 0 1
16857: PUSH
16858: DOUBLE
16859: LD_INT 1
16861: DEC
16862: ST_TO_ADDR
16863: LD_INT 5
16865: PUSH
16866: FOR_TO
16867: IFFALSE 16946
// begin uc_nation := nation_nature ;
16869: LD_ADDR_OWVAR 21
16873: PUSH
16874: LD_INT 0
16876: ST_TO_ADDR
// uc_side := 0 ;
16877: LD_ADDR_OWVAR 20
16881: PUSH
16882: LD_INT 0
16884: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
16885: LD_ADDR_OWVAR 29
16889: PUSH
16890: LD_INT 12
16892: PUSH
16893: LD_INT 12
16895: PUSH
16896: EMPTY
16897: LIST
16898: LIST
16899: ST_TO_ADDR
// hc_agressivity := 20 ;
16900: LD_ADDR_OWVAR 35
16904: PUSH
16905: LD_INT 20
16907: ST_TO_ADDR
// hc_class := class_tiger ;
16908: LD_ADDR_OWVAR 28
16912: PUSH
16913: LD_INT 14
16915: ST_TO_ADDR
// hc_gallery :=  ;
16916: LD_ADDR_OWVAR 33
16920: PUSH
16921: LD_STRING 
16923: ST_TO_ADDR
// hc_name :=  ;
16924: LD_ADDR_OWVAR 26
16928: PUSH
16929: LD_STRING 
16931: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
16932: CALL_OW 44
16936: PPUSH
16937: LD_INT 0
16939: PPUSH
16940: CALL_OW 51
// end ;
16944: GO 16866
16946: POP
16947: POP
// end ;
16948: PPOPN 1
16950: END
// every 0 0$1 trigger StreamModeActive and sBomb do
16951: LD_EXP 32
16955: IFFALSE 16963
16957: PUSH
16958: LD_EXP 52
16962: AND
16963: IFFALSE 16972
16965: GO 16967
16967: DISABLE
// StreamSibBomb ;
16968: CALL 16973 0 0
16972: END
// export function StreamSibBomb ; var i , x , y ; begin
16973: LD_INT 0
16975: PPUSH
16976: PPUSH
16977: PPUSH
16978: PPUSH
// result := false ;
16979: LD_ADDR_VAR 0 1
16983: PUSH
16984: LD_INT 0
16986: ST_TO_ADDR
// for i := 1 to 16 do
16987: LD_ADDR_VAR 0 2
16991: PUSH
16992: DOUBLE
16993: LD_INT 1
16995: DEC
16996: ST_TO_ADDR
16997: LD_INT 16
16999: PUSH
17000: FOR_TO
17001: IFFALSE 17200
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
17003: LD_ADDR_VAR 0 3
17007: PUSH
17008: LD_INT 10
17010: PUSH
17011: LD_INT 20
17013: PUSH
17014: LD_INT 30
17016: PUSH
17017: LD_INT 40
17019: PUSH
17020: LD_INT 50
17022: PUSH
17023: LD_INT 60
17025: PUSH
17026: LD_INT 70
17028: PUSH
17029: LD_INT 80
17031: PUSH
17032: LD_INT 90
17034: PUSH
17035: LD_INT 100
17037: PUSH
17038: LD_INT 110
17040: PUSH
17041: LD_INT 120
17043: PUSH
17044: LD_INT 130
17046: PUSH
17047: LD_INT 140
17049: PUSH
17050: LD_INT 150
17052: PUSH
17053: EMPTY
17054: LIST
17055: LIST
17056: LIST
17057: LIST
17058: LIST
17059: LIST
17060: LIST
17061: LIST
17062: LIST
17063: LIST
17064: LIST
17065: LIST
17066: LIST
17067: LIST
17068: LIST
17069: PUSH
17070: LD_INT 1
17072: PPUSH
17073: LD_INT 15
17075: PPUSH
17076: CALL_OW 12
17080: ARRAY
17081: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
17082: LD_ADDR_VAR 0 4
17086: PUSH
17087: LD_INT 10
17089: PUSH
17090: LD_INT 20
17092: PUSH
17093: LD_INT 30
17095: PUSH
17096: LD_INT 40
17098: PUSH
17099: LD_INT 50
17101: PUSH
17102: LD_INT 60
17104: PUSH
17105: LD_INT 70
17107: PUSH
17108: LD_INT 80
17110: PUSH
17111: LD_INT 90
17113: PUSH
17114: LD_INT 100
17116: PUSH
17117: LD_INT 110
17119: PUSH
17120: LD_INT 120
17122: PUSH
17123: LD_INT 130
17125: PUSH
17126: LD_INT 140
17128: PUSH
17129: LD_INT 150
17131: PUSH
17132: EMPTY
17133: LIST
17134: LIST
17135: LIST
17136: LIST
17137: LIST
17138: LIST
17139: LIST
17140: LIST
17141: LIST
17142: LIST
17143: LIST
17144: LIST
17145: LIST
17146: LIST
17147: LIST
17148: PUSH
17149: LD_INT 1
17151: PPUSH
17152: LD_INT 15
17154: PPUSH
17155: CALL_OW 12
17159: ARRAY
17160: ST_TO_ADDR
// if ValidHex ( x , y ) then
17161: LD_VAR 0 3
17165: PPUSH
17166: LD_VAR 0 4
17170: PPUSH
17171: CALL_OW 488
17175: IFFALSE 17198
// begin result := [ x , y ] ;
17177: LD_ADDR_VAR 0 1
17181: PUSH
17182: LD_VAR 0 3
17186: PUSH
17187: LD_VAR 0 4
17191: PUSH
17192: EMPTY
17193: LIST
17194: LIST
17195: ST_TO_ADDR
// break ;
17196: GO 17200
// end ; end ;
17198: GO 17000
17200: POP
17201: POP
// if result then
17202: LD_VAR 0 1
17206: IFFALSE 17266
// begin ToLua ( playSibBomb() ) ;
17208: LD_STRING playSibBomb()
17210: PPUSH
17211: CALL_OW 559
// wait ( 0 0$14 ) ;
17215: LD_INT 490
17217: PPUSH
17218: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
17222: LD_VAR 0 1
17226: PUSH
17227: LD_INT 1
17229: ARRAY
17230: PPUSH
17231: LD_VAR 0 1
17235: PUSH
17236: LD_INT 2
17238: ARRAY
17239: PPUSH
17240: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
17244: LD_VAR 0 1
17248: PUSH
17249: LD_INT 1
17251: ARRAY
17252: PPUSH
17253: LD_VAR 0 1
17257: PUSH
17258: LD_INT 2
17260: ARRAY
17261: PPUSH
17262: CALL_OW 429
// end ; end ;
17266: LD_VAR 0 1
17270: RET
// every 0 0$1 trigger StreamModeActive and sReset do
17271: LD_EXP 32
17275: IFFALSE 17283
17277: PUSH
17278: LD_EXP 54
17282: AND
17283: IFFALSE 17295
17285: GO 17287
17287: DISABLE
// YouLost (  ) ;
17288: LD_STRING 
17290: PPUSH
17291: CALL_OW 104
17295: END
// every 0 0$1 trigger StreamModeActive and sFog do
17296: LD_EXP 32
17300: IFFALSE 17308
17302: PUSH
17303: LD_EXP 53
17307: AND
17308: IFFALSE 17322
17310: GO 17312
17312: DISABLE
// FogOff ( your_side ) ;
17313: LD_OWVAR 2
17317: PPUSH
17318: CALL_OW 344
17322: END
// every 0 0$1 trigger StreamModeActive and sSun do
17323: LD_EXP 32
17327: IFFALSE 17335
17329: PUSH
17330: LD_EXP 55
17334: AND
17335: IFFALSE 17363
17337: GO 17339
17339: DISABLE
// begin solar_recharge_percent := 0 ;
17340: LD_ADDR_OWVAR 79
17344: PUSH
17345: LD_INT 0
17347: ST_TO_ADDR
// wait ( 5 5$00 ) ;
17348: LD_INT 10500
17350: PPUSH
17351: CALL_OW 67
// solar_recharge_percent := 100 ;
17355: LD_ADDR_OWVAR 79
17359: PUSH
17360: LD_INT 100
17362: ST_TO_ADDR
// end ;
17363: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
17364: LD_EXP 32
17368: IFFALSE 17376
17370: PUSH
17371: LD_EXP 56
17375: AND
17376: IFFALSE 17615
17378: GO 17380
17380: DISABLE
17381: LD_INT 0
17383: PPUSH
17384: PPUSH
17385: PPUSH
// begin tmp := [ ] ;
17386: LD_ADDR_VAR 0 3
17390: PUSH
17391: EMPTY
17392: ST_TO_ADDR
// for i := 1 to 6 do
17393: LD_ADDR_VAR 0 1
17397: PUSH
17398: DOUBLE
17399: LD_INT 1
17401: DEC
17402: ST_TO_ADDR
17403: LD_INT 6
17405: PUSH
17406: FOR_TO
17407: IFFALSE 17512
// begin uc_nation := nation_nature ;
17409: LD_ADDR_OWVAR 21
17413: PUSH
17414: LD_INT 0
17416: ST_TO_ADDR
// uc_side := 0 ;
17417: LD_ADDR_OWVAR 20
17421: PUSH
17422: LD_INT 0
17424: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
17425: LD_ADDR_OWVAR 29
17429: PUSH
17430: LD_INT 12
17432: PUSH
17433: LD_INT 12
17435: PUSH
17436: EMPTY
17437: LIST
17438: LIST
17439: ST_TO_ADDR
// hc_agressivity := 20 ;
17440: LD_ADDR_OWVAR 35
17444: PUSH
17445: LD_INT 20
17447: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
17448: LD_ADDR_OWVAR 28
17452: PUSH
17453: LD_INT 17
17455: ST_TO_ADDR
// hc_gallery :=  ;
17456: LD_ADDR_OWVAR 33
17460: PUSH
17461: LD_STRING 
17463: ST_TO_ADDR
// hc_name :=  ;
17464: LD_ADDR_OWVAR 26
17468: PUSH
17469: LD_STRING 
17471: ST_TO_ADDR
// un := CreateHuman ;
17472: LD_ADDR_VAR 0 2
17476: PUSH
17477: CALL_OW 44
17481: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
17482: LD_VAR 0 2
17486: PPUSH
17487: LD_INT 1
17489: PPUSH
17490: CALL_OW 51
// tmp := tmp ^ un ;
17494: LD_ADDR_VAR 0 3
17498: PUSH
17499: LD_VAR 0 3
17503: PUSH
17504: LD_VAR 0 2
17508: ADD
17509: ST_TO_ADDR
// end ;
17510: GO 17406
17512: POP
17513: POP
// repeat wait ( 0 0$1 ) ;
17514: LD_INT 35
17516: PPUSH
17517: CALL_OW 67
// for un in tmp do
17521: LD_ADDR_VAR 0 2
17525: PUSH
17526: LD_VAR 0 3
17530: PUSH
17531: FOR_IN
17532: IFFALSE 17606
// begin if IsDead ( un ) then
17534: LD_VAR 0 2
17538: PPUSH
17539: CALL_OW 301
17543: IFFALSE 17563
// begin tmp := tmp diff un ;
17545: LD_ADDR_VAR 0 3
17549: PUSH
17550: LD_VAR 0 3
17554: PUSH
17555: LD_VAR 0 2
17559: DIFF
17560: ST_TO_ADDR
// continue ;
17561: GO 17531
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
17563: LD_VAR 0 2
17567: PPUSH
17568: LD_INT 3
17570: PUSH
17571: LD_INT 22
17573: PUSH
17574: LD_INT 0
17576: PUSH
17577: EMPTY
17578: LIST
17579: LIST
17580: PUSH
17581: EMPTY
17582: LIST
17583: LIST
17584: PPUSH
17585: CALL_OW 69
17589: PPUSH
17590: LD_VAR 0 2
17594: PPUSH
17595: CALL_OW 74
17599: PPUSH
17600: CALL_OW 115
// end ;
17604: GO 17531
17606: POP
17607: POP
// until not tmp ;
17608: LD_VAR 0 3
17612: NOT
17613: IFFALSE 17514
// end ;
17615: PPOPN 3
17617: END
// every 0 0$1 trigger StreamModeActive and sTroll do
17618: LD_EXP 32
17622: IFFALSE 17630
17624: PUSH
17625: LD_EXP 57
17629: AND
17630: IFFALSE 17684
17632: GO 17634
17634: DISABLE
// begin ToLua ( displayTroll(); ) ;
17635: LD_STRING displayTroll();
17637: PPUSH
17638: CALL_OW 559
// wait ( 3 3$00 ) ;
17642: LD_INT 6300
17644: PPUSH
17645: CALL_OW 67
// ToLua ( hideTroll(); ) ;
17649: LD_STRING hideTroll();
17651: PPUSH
17652: CALL_OW 559
// wait ( 1 1$00 ) ;
17656: LD_INT 2100
17658: PPUSH
17659: CALL_OW 67
// ToLua ( displayTroll(); ) ;
17663: LD_STRING displayTroll();
17665: PPUSH
17666: CALL_OW 559
// wait ( 1 1$00 ) ;
17670: LD_INT 2100
17672: PPUSH
17673: CALL_OW 67
// ToLua ( hideTroll(); ) ;
17677: LD_STRING hideTroll();
17679: PPUSH
17680: CALL_OW 559
// end ;
17684: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
17685: LD_EXP 32
17689: IFFALSE 17697
17691: PUSH
17692: LD_EXP 58
17696: AND
17697: IFFALSE 17760
17699: GO 17701
17701: DISABLE
17702: LD_INT 0
17704: PPUSH
// begin p := 0 ;
17705: LD_ADDR_VAR 0 1
17709: PUSH
17710: LD_INT 0
17712: ST_TO_ADDR
// repeat game_speed := 1 ;
17713: LD_ADDR_OWVAR 65
17717: PUSH
17718: LD_INT 1
17720: ST_TO_ADDR
// wait ( 0 0$1 ) ;
17721: LD_INT 35
17723: PPUSH
17724: CALL_OW 67
// p := p + 1 ;
17728: LD_ADDR_VAR 0 1
17732: PUSH
17733: LD_VAR 0 1
17737: PUSH
17738: LD_INT 1
17740: PLUS
17741: ST_TO_ADDR
// until p >= 60 ;
17742: LD_VAR 0 1
17746: PUSH
17747: LD_INT 60
17749: GREATEREQUAL
17750: IFFALSE 17713
// game_speed := 4 ;
17752: LD_ADDR_OWVAR 65
17756: PUSH
17757: LD_INT 4
17759: ST_TO_ADDR
// end ;
17760: PPOPN 1
17762: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
17763: LD_EXP 32
17767: IFFALSE 17775
17769: PUSH
17770: LD_EXP 59
17774: AND
17775: IFFALSE 17921
17777: GO 17779
17779: DISABLE
17780: LD_INT 0
17782: PPUSH
17783: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
17784: LD_ADDR_VAR 0 1
17788: PUSH
17789: LD_INT 22
17791: PUSH
17792: LD_OWVAR 2
17796: PUSH
17797: EMPTY
17798: LIST
17799: LIST
17800: PUSH
17801: LD_INT 2
17803: PUSH
17804: LD_INT 30
17806: PUSH
17807: LD_INT 0
17809: PUSH
17810: EMPTY
17811: LIST
17812: LIST
17813: PUSH
17814: LD_INT 30
17816: PUSH
17817: LD_INT 1
17819: PUSH
17820: EMPTY
17821: LIST
17822: LIST
17823: PUSH
17824: EMPTY
17825: LIST
17826: LIST
17827: LIST
17828: PUSH
17829: EMPTY
17830: LIST
17831: LIST
17832: PPUSH
17833: CALL_OW 69
17837: ST_TO_ADDR
// if not depot then
17838: LD_VAR 0 1
17842: NOT
17843: IFFALSE 17847
// exit ;
17845: GO 17921
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
17847: LD_ADDR_VAR 0 2
17851: PUSH
17852: LD_VAR 0 1
17856: PUSH
17857: LD_INT 1
17859: PPUSH
17860: LD_VAR 0 1
17864: PPUSH
17865: CALL_OW 12
17869: ARRAY
17870: PPUSH
17871: CALL_OW 274
17875: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
17876: LD_VAR 0 2
17880: PPUSH
17881: LD_INT 1
17883: PPUSH
17884: LD_INT 0
17886: PPUSH
17887: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
17891: LD_VAR 0 2
17895: PPUSH
17896: LD_INT 2
17898: PPUSH
17899: LD_INT 0
17901: PPUSH
17902: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
17906: LD_VAR 0 2
17910: PPUSH
17911: LD_INT 3
17913: PPUSH
17914: LD_INT 0
17916: PPUSH
17917: CALL_OW 277
// end ;
17921: PPOPN 2
17923: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
17924: LD_EXP 32
17928: IFFALSE 17936
17930: PUSH
17931: LD_EXP 60
17935: AND
17936: IFFALSE 18033
17938: GO 17940
17940: DISABLE
17941: LD_INT 0
17943: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
17944: LD_ADDR_VAR 0 1
17948: PUSH
17949: LD_INT 22
17951: PUSH
17952: LD_OWVAR 2
17956: PUSH
17957: EMPTY
17958: LIST
17959: LIST
17960: PUSH
17961: LD_INT 21
17963: PUSH
17964: LD_INT 1
17966: PUSH
17967: EMPTY
17968: LIST
17969: LIST
17970: PUSH
17971: LD_INT 3
17973: PUSH
17974: LD_INT 23
17976: PUSH
17977: LD_INT 0
17979: PUSH
17980: EMPTY
17981: LIST
17982: LIST
17983: PUSH
17984: EMPTY
17985: LIST
17986: LIST
17987: PUSH
17988: EMPTY
17989: LIST
17990: LIST
17991: LIST
17992: PPUSH
17993: CALL_OW 69
17997: ST_TO_ADDR
// if not tmp then
17998: LD_VAR 0 1
18002: NOT
18003: IFFALSE 18007
// exit ;
18005: GO 18033
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
18007: LD_VAR 0 1
18011: PUSH
18012: LD_INT 1
18014: PPUSH
18015: LD_VAR 0 1
18019: PPUSH
18020: CALL_OW 12
18024: ARRAY
18025: PPUSH
18026: LD_INT 200
18028: PPUSH
18029: CALL_OW 234
// end ;
18033: PPOPN 1
18035: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
18036: LD_EXP 32
18040: IFFALSE 18048
18042: PUSH
18043: LD_EXP 61
18047: AND
18048: IFFALSE 18127
18050: GO 18052
18052: DISABLE
18053: LD_INT 0
18055: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
18056: LD_ADDR_VAR 0 1
18060: PUSH
18061: LD_INT 22
18063: PUSH
18064: LD_OWVAR 2
18068: PUSH
18069: EMPTY
18070: LIST
18071: LIST
18072: PUSH
18073: LD_INT 21
18075: PUSH
18076: LD_INT 2
18078: PUSH
18079: EMPTY
18080: LIST
18081: LIST
18082: PUSH
18083: EMPTY
18084: LIST
18085: LIST
18086: PPUSH
18087: CALL_OW 69
18091: ST_TO_ADDR
// if not tmp then
18092: LD_VAR 0 1
18096: NOT
18097: IFFALSE 18101
// exit ;
18099: GO 18127
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
18101: LD_VAR 0 1
18105: PUSH
18106: LD_INT 1
18108: PPUSH
18109: LD_VAR 0 1
18113: PPUSH
18114: CALL_OW 12
18118: ARRAY
18119: PPUSH
18120: LD_INT 60
18122: PPUSH
18123: CALL_OW 234
// end ;
18127: PPOPN 1
18129: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
18130: LD_EXP 32
18134: IFFALSE 18142
18136: PUSH
18137: LD_EXP 62
18141: AND
18142: IFFALSE 18241
18144: GO 18146
18146: DISABLE
18147: LD_INT 0
18149: PPUSH
18150: PPUSH
// begin enable ;
18151: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
18152: LD_ADDR_VAR 0 1
18156: PUSH
18157: LD_INT 22
18159: PUSH
18160: LD_OWVAR 2
18164: PUSH
18165: EMPTY
18166: LIST
18167: LIST
18168: PUSH
18169: LD_INT 61
18171: PUSH
18172: EMPTY
18173: LIST
18174: PUSH
18175: LD_INT 33
18177: PUSH
18178: LD_INT 2
18180: PUSH
18181: EMPTY
18182: LIST
18183: LIST
18184: PUSH
18185: EMPTY
18186: LIST
18187: LIST
18188: LIST
18189: PPUSH
18190: CALL_OW 69
18194: ST_TO_ADDR
// if not tmp then
18195: LD_VAR 0 1
18199: NOT
18200: IFFALSE 18204
// exit ;
18202: GO 18241
// for i in tmp do
18204: LD_ADDR_VAR 0 2
18208: PUSH
18209: LD_VAR 0 1
18213: PUSH
18214: FOR_IN
18215: IFFALSE 18239
// if IsControledBy ( i ) then
18217: LD_VAR 0 2
18221: PPUSH
18222: CALL_OW 312
18226: IFFALSE 18237
// ComUnlink ( i ) ;
18228: LD_VAR 0 2
18232: PPUSH
18233: CALL_OW 136
18237: GO 18214
18239: POP
18240: POP
// end ;
18241: PPOPN 2
18243: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
18244: LD_EXP 32
18248: IFFALSE 18256
18250: PUSH
18251: LD_EXP 63
18255: AND
18256: IFFALSE 18396
18258: GO 18260
18260: DISABLE
18261: LD_INT 0
18263: PPUSH
18264: PPUSH
// begin ToLua ( displayPowell(); ) ;
18265: LD_STRING displayPowell();
18267: PPUSH
18268: CALL_OW 559
// uc_side := 0 ;
18272: LD_ADDR_OWVAR 20
18276: PUSH
18277: LD_INT 0
18279: ST_TO_ADDR
// uc_nation := 2 ;
18280: LD_ADDR_OWVAR 21
18284: PUSH
18285: LD_INT 2
18287: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
18288: LD_ADDR_OWVAR 37
18292: PUSH
18293: LD_INT 14
18295: ST_TO_ADDR
// vc_engine := engine_siberite ;
18296: LD_ADDR_OWVAR 39
18300: PUSH
18301: LD_INT 3
18303: ST_TO_ADDR
// vc_control := control_apeman ;
18304: LD_ADDR_OWVAR 38
18308: PUSH
18309: LD_INT 5
18311: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
18312: LD_ADDR_OWVAR 40
18316: PUSH
18317: LD_INT 29
18319: ST_TO_ADDR
// un := CreateVehicle ;
18320: LD_ADDR_VAR 0 2
18324: PUSH
18325: CALL_OW 45
18329: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
18330: LD_VAR 0 2
18334: PPUSH
18335: LD_INT 1
18337: PPUSH
18338: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
18342: LD_INT 35
18344: PPUSH
18345: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
18349: LD_VAR 0 2
18353: PPUSH
18354: LD_INT 22
18356: PUSH
18357: LD_OWVAR 2
18361: PUSH
18362: EMPTY
18363: LIST
18364: LIST
18365: PPUSH
18366: CALL_OW 69
18370: PPUSH
18371: LD_VAR 0 2
18375: PPUSH
18376: CALL_OW 74
18380: PPUSH
18381: CALL_OW 115
// until IsDead ( un ) ;
18385: LD_VAR 0 2
18389: PPUSH
18390: CALL_OW 301
18394: IFFALSE 18342
// end ;
18396: PPOPN 2
18398: END
// every 0 0$1 trigger StreamModeActive and sStu do
18399: LD_EXP 32
18403: IFFALSE 18411
18405: PUSH
18406: LD_EXP 71
18410: AND
18411: IFFALSE 18427
18413: GO 18415
18415: DISABLE
// begin ToLua ( displayStucuk(); ) ;
18416: LD_STRING displayStucuk();
18418: PPUSH
18419: CALL_OW 559
// ResetFog ;
18423: CALL_OW 335
// end ;
18427: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
18428: LD_EXP 32
18432: IFFALSE 18440
18434: PUSH
18435: LD_EXP 64
18439: AND
18440: IFFALSE 18581
18442: GO 18444
18444: DISABLE
18445: LD_INT 0
18447: PPUSH
18448: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
18449: LD_ADDR_VAR 0 2
18453: PUSH
18454: LD_INT 22
18456: PUSH
18457: LD_OWVAR 2
18461: PUSH
18462: EMPTY
18463: LIST
18464: LIST
18465: PUSH
18466: LD_INT 21
18468: PUSH
18469: LD_INT 1
18471: PUSH
18472: EMPTY
18473: LIST
18474: LIST
18475: PUSH
18476: EMPTY
18477: LIST
18478: LIST
18479: PPUSH
18480: CALL_OW 69
18484: ST_TO_ADDR
// if not tmp then
18485: LD_VAR 0 2
18489: NOT
18490: IFFALSE 18494
// exit ;
18492: GO 18581
// un := tmp [ rand ( 1 , tmp ) ] ;
18494: LD_ADDR_VAR 0 1
18498: PUSH
18499: LD_VAR 0 2
18503: PUSH
18504: LD_INT 1
18506: PPUSH
18507: LD_VAR 0 2
18511: PPUSH
18512: CALL_OW 12
18516: ARRAY
18517: ST_TO_ADDR
// SetSide ( un , 0 ) ;
18518: LD_VAR 0 1
18522: PPUSH
18523: LD_INT 0
18525: PPUSH
18526: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
18530: LD_VAR 0 1
18534: PPUSH
18535: LD_OWVAR 3
18539: PUSH
18540: LD_VAR 0 1
18544: DIFF
18545: PPUSH
18546: LD_VAR 0 1
18550: PPUSH
18551: CALL_OW 74
18555: PPUSH
18556: CALL_OW 115
// wait ( 0 0$20 ) ;
18560: LD_INT 700
18562: PPUSH
18563: CALL_OW 67
// SetSide ( un , your_side ) ;
18567: LD_VAR 0 1
18571: PPUSH
18572: LD_OWVAR 2
18576: PPUSH
18577: CALL_OW 235
// end ;
18581: PPOPN 2
18583: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
18584: LD_EXP 32
18588: IFFALSE 18596
18590: PUSH
18591: LD_EXP 65
18595: AND
18596: IFFALSE 18702
18598: GO 18600
18600: DISABLE
18601: LD_INT 0
18603: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18604: LD_ADDR_VAR 0 1
18608: PUSH
18609: LD_INT 22
18611: PUSH
18612: LD_OWVAR 2
18616: PUSH
18617: EMPTY
18618: LIST
18619: LIST
18620: PUSH
18621: LD_INT 2
18623: PUSH
18624: LD_INT 30
18626: PUSH
18627: LD_INT 0
18629: PUSH
18630: EMPTY
18631: LIST
18632: LIST
18633: PUSH
18634: LD_INT 30
18636: PUSH
18637: LD_INT 1
18639: PUSH
18640: EMPTY
18641: LIST
18642: LIST
18643: PUSH
18644: EMPTY
18645: LIST
18646: LIST
18647: LIST
18648: PUSH
18649: EMPTY
18650: LIST
18651: LIST
18652: PPUSH
18653: CALL_OW 69
18657: ST_TO_ADDR
// if not depot then
18658: LD_VAR 0 1
18662: NOT
18663: IFFALSE 18667
// exit ;
18665: GO 18702
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
18667: LD_VAR 0 1
18671: PUSH
18672: LD_INT 1
18674: ARRAY
18675: PPUSH
18676: CALL_OW 250
18680: PPUSH
18681: LD_VAR 0 1
18685: PUSH
18686: LD_INT 1
18688: ARRAY
18689: PPUSH
18690: CALL_OW 251
18694: PPUSH
18695: LD_INT 70
18697: PPUSH
18698: CALL_OW 495
// end ;
18702: PPOPN 1
18704: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
18705: LD_EXP 32
18709: IFFALSE 18717
18711: PUSH
18712: LD_EXP 66
18716: AND
18717: IFFALSE 18928
18719: GO 18721
18721: DISABLE
18722: LD_INT 0
18724: PPUSH
18725: PPUSH
18726: PPUSH
18727: PPUSH
18728: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
18729: LD_ADDR_VAR 0 5
18733: PUSH
18734: LD_INT 22
18736: PUSH
18737: LD_OWVAR 2
18741: PUSH
18742: EMPTY
18743: LIST
18744: LIST
18745: PUSH
18746: LD_INT 21
18748: PUSH
18749: LD_INT 1
18751: PUSH
18752: EMPTY
18753: LIST
18754: LIST
18755: PUSH
18756: EMPTY
18757: LIST
18758: LIST
18759: PPUSH
18760: CALL_OW 69
18764: ST_TO_ADDR
// if not tmp then
18765: LD_VAR 0 5
18769: NOT
18770: IFFALSE 18774
// exit ;
18772: GO 18928
// for i in tmp do
18774: LD_ADDR_VAR 0 1
18778: PUSH
18779: LD_VAR 0 5
18783: PUSH
18784: FOR_IN
18785: IFFALSE 18926
// begin d := rand ( 0 , 5 ) ;
18787: LD_ADDR_VAR 0 4
18791: PUSH
18792: LD_INT 0
18794: PPUSH
18795: LD_INT 5
18797: PPUSH
18798: CALL_OW 12
18802: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
18803: LD_ADDR_VAR 0 2
18807: PUSH
18808: LD_VAR 0 1
18812: PPUSH
18813: CALL_OW 250
18817: PPUSH
18818: LD_VAR 0 4
18822: PPUSH
18823: LD_INT 3
18825: PPUSH
18826: LD_INT 12
18828: PPUSH
18829: CALL_OW 12
18833: PPUSH
18834: CALL_OW 272
18838: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
18839: LD_ADDR_VAR 0 3
18843: PUSH
18844: LD_VAR 0 1
18848: PPUSH
18849: CALL_OW 251
18853: PPUSH
18854: LD_VAR 0 4
18858: PPUSH
18859: LD_INT 3
18861: PPUSH
18862: LD_INT 12
18864: PPUSH
18865: CALL_OW 12
18869: PPUSH
18870: CALL_OW 273
18874: ST_TO_ADDR
// if ValidHex ( x , y ) then
18875: LD_VAR 0 2
18879: PPUSH
18880: LD_VAR 0 3
18884: PPUSH
18885: CALL_OW 488
18889: IFFALSE 18924
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
18891: LD_VAR 0 1
18895: PPUSH
18896: LD_VAR 0 2
18900: PPUSH
18901: LD_VAR 0 3
18905: PPUSH
18906: LD_INT 3
18908: PPUSH
18909: LD_INT 6
18911: PPUSH
18912: CALL_OW 12
18916: PPUSH
18917: LD_INT 1
18919: PPUSH
18920: CALL_OW 483
// end ;
18924: GO 18784
18926: POP
18927: POP
// end ;
18928: PPOPN 5
18930: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
18931: LD_EXP 32
18935: IFFALSE 18943
18937: PUSH
18938: LD_EXP 67
18942: AND
18943: IFFALSE 19037
18945: GO 18947
18947: DISABLE
18948: LD_INT 0
18950: PPUSH
18951: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
18952: LD_ADDR_VAR 0 2
18956: PUSH
18957: LD_INT 22
18959: PUSH
18960: LD_OWVAR 2
18964: PUSH
18965: EMPTY
18966: LIST
18967: LIST
18968: PUSH
18969: LD_INT 32
18971: PUSH
18972: LD_INT 1
18974: PUSH
18975: EMPTY
18976: LIST
18977: LIST
18978: PUSH
18979: LD_INT 21
18981: PUSH
18982: LD_INT 2
18984: PUSH
18985: EMPTY
18986: LIST
18987: LIST
18988: PUSH
18989: EMPTY
18990: LIST
18991: LIST
18992: LIST
18993: PPUSH
18994: CALL_OW 69
18998: ST_TO_ADDR
// if not tmp then
18999: LD_VAR 0 2
19003: NOT
19004: IFFALSE 19008
// exit ;
19006: GO 19037
// for i in tmp do
19008: LD_ADDR_VAR 0 1
19012: PUSH
19013: LD_VAR 0 2
19017: PUSH
19018: FOR_IN
19019: IFFALSE 19035
// SetFuel ( i , 0 ) ;
19021: LD_VAR 0 1
19025: PPUSH
19026: LD_INT 0
19028: PPUSH
19029: CALL_OW 240
19033: GO 19018
19035: POP
19036: POP
// end ;
19037: PPOPN 2
19039: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
19040: LD_EXP 32
19044: IFFALSE 19052
19046: PUSH
19047: LD_EXP 68
19051: AND
19052: IFFALSE 19118
19054: GO 19056
19056: DISABLE
19057: LD_INT 0
19059: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
19060: LD_ADDR_VAR 0 1
19064: PUSH
19065: LD_INT 22
19067: PUSH
19068: LD_OWVAR 2
19072: PUSH
19073: EMPTY
19074: LIST
19075: LIST
19076: PUSH
19077: LD_INT 30
19079: PUSH
19080: LD_INT 29
19082: PUSH
19083: EMPTY
19084: LIST
19085: LIST
19086: PUSH
19087: EMPTY
19088: LIST
19089: LIST
19090: PPUSH
19091: CALL_OW 69
19095: ST_TO_ADDR
// if not tmp then
19096: LD_VAR 0 1
19100: NOT
19101: IFFALSE 19105
// exit ;
19103: GO 19118
// DestroyUnit ( tmp [ 1 ] ) ;
19105: LD_VAR 0 1
19109: PUSH
19110: LD_INT 1
19112: ARRAY
19113: PPUSH
19114: CALL_OW 65
// end ;
19118: PPOPN 1
19120: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
19121: LD_EXP 32
19125: IFFALSE 19133
19127: PUSH
19128: LD_EXP 70
19132: AND
19133: IFFALSE 19262
19135: GO 19137
19137: DISABLE
19138: LD_INT 0
19140: PPUSH
// begin uc_side := 0 ;
19141: LD_ADDR_OWVAR 20
19145: PUSH
19146: LD_INT 0
19148: ST_TO_ADDR
// uc_nation := nation_arabian ;
19149: LD_ADDR_OWVAR 21
19153: PUSH
19154: LD_INT 2
19156: ST_TO_ADDR
// hc_gallery :=  ;
19157: LD_ADDR_OWVAR 33
19161: PUSH
19162: LD_STRING 
19164: ST_TO_ADDR
// hc_name :=  ;
19165: LD_ADDR_OWVAR 26
19169: PUSH
19170: LD_STRING 
19172: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
19173: LD_INT 1
19175: PPUSH
19176: LD_INT 11
19178: PPUSH
19179: LD_INT 10
19181: PPUSH
19182: CALL_OW 380
// un := CreateHuman ;
19186: LD_ADDR_VAR 0 1
19190: PUSH
19191: CALL_OW 44
19195: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
19196: LD_VAR 0 1
19200: PPUSH
19201: LD_INT 1
19203: PPUSH
19204: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
19208: LD_INT 35
19210: PPUSH
19211: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
19215: LD_VAR 0 1
19219: PPUSH
19220: LD_INT 22
19222: PUSH
19223: LD_OWVAR 2
19227: PUSH
19228: EMPTY
19229: LIST
19230: LIST
19231: PPUSH
19232: CALL_OW 69
19236: PPUSH
19237: LD_VAR 0 1
19241: PPUSH
19242: CALL_OW 74
19246: PPUSH
19247: CALL_OW 115
// until IsDead ( un ) ;
19251: LD_VAR 0 1
19255: PPUSH
19256: CALL_OW 301
19260: IFFALSE 19208
// end ;
19262: PPOPN 1
19264: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
19265: LD_EXP 32
19269: IFFALSE 19277
19271: PUSH
19272: LD_EXP 72
19276: AND
19277: IFFALSE 19289
19279: GO 19281
19281: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
19282: LD_STRING earthquake(getX(game), 0, 32)
19284: PPUSH
19285: CALL_OW 559
19289: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
19290: LD_EXP 32
19294: IFFALSE 19302
19296: PUSH
19297: LD_EXP 73
19301: AND
19302: IFFALSE 19393
19304: GO 19306
19306: DISABLE
19307: LD_INT 0
19309: PPUSH
// begin enable ;
19310: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
19311: LD_ADDR_VAR 0 1
19315: PUSH
19316: LD_INT 22
19318: PUSH
19319: LD_OWVAR 2
19323: PUSH
19324: EMPTY
19325: LIST
19326: LIST
19327: PUSH
19328: LD_INT 21
19330: PUSH
19331: LD_INT 2
19333: PUSH
19334: EMPTY
19335: LIST
19336: LIST
19337: PUSH
19338: LD_INT 33
19340: PUSH
19341: LD_INT 3
19343: PUSH
19344: EMPTY
19345: LIST
19346: LIST
19347: PUSH
19348: EMPTY
19349: LIST
19350: LIST
19351: LIST
19352: PPUSH
19353: CALL_OW 69
19357: ST_TO_ADDR
// if not tmp then
19358: LD_VAR 0 1
19362: NOT
19363: IFFALSE 19367
// exit ;
19365: GO 19393
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
19367: LD_VAR 0 1
19371: PUSH
19372: LD_INT 1
19374: PPUSH
19375: LD_VAR 0 1
19379: PPUSH
19380: CALL_OW 12
19384: ARRAY
19385: PPUSH
19386: LD_INT 1
19388: PPUSH
19389: CALL_OW 234
// end ;
19393: PPOPN 1
19395: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
19396: LD_EXP 32
19400: IFFALSE 19408
19402: PUSH
19403: LD_EXP 74
19407: AND
19408: IFFALSE 19549
19410: GO 19412
19412: DISABLE
19413: LD_INT 0
19415: PPUSH
19416: PPUSH
19417: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
19418: LD_ADDR_VAR 0 3
19422: PUSH
19423: LD_INT 22
19425: PUSH
19426: LD_OWVAR 2
19430: PUSH
19431: EMPTY
19432: LIST
19433: LIST
19434: PUSH
19435: LD_INT 25
19437: PUSH
19438: LD_INT 1
19440: PUSH
19441: EMPTY
19442: LIST
19443: LIST
19444: PUSH
19445: EMPTY
19446: LIST
19447: LIST
19448: PPUSH
19449: CALL_OW 69
19453: ST_TO_ADDR
// if not tmp then
19454: LD_VAR 0 3
19458: NOT
19459: IFFALSE 19463
// exit ;
19461: GO 19549
// un := tmp [ rand ( 1 , tmp ) ] ;
19463: LD_ADDR_VAR 0 2
19467: PUSH
19468: LD_VAR 0 3
19472: PUSH
19473: LD_INT 1
19475: PPUSH
19476: LD_VAR 0 3
19480: PPUSH
19481: CALL_OW 12
19485: ARRAY
19486: ST_TO_ADDR
// if Crawls ( un ) then
19487: LD_VAR 0 2
19491: PPUSH
19492: CALL_OW 318
19496: IFFALSE 19507
// ComWalk ( un ) ;
19498: LD_VAR 0 2
19502: PPUSH
19503: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
19507: LD_VAR 0 2
19511: PPUSH
19512: LD_INT 9
19514: PPUSH
19515: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
19519: LD_INT 28
19521: PPUSH
19522: LD_OWVAR 2
19526: PPUSH
19527: LD_INT 2
19529: PPUSH
19530: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
19534: LD_INT 29
19536: PPUSH
19537: LD_OWVAR 2
19541: PPUSH
19542: LD_INT 2
19544: PPUSH
19545: CALL_OW 322
// end ;
19549: PPOPN 3
19551: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
19552: LD_EXP 32
19556: IFFALSE 19564
19558: PUSH
19559: LD_EXP 75
19563: AND
19564: IFFALSE 19675
19566: GO 19568
19568: DISABLE
19569: LD_INT 0
19571: PPUSH
19572: PPUSH
19573: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
19574: LD_ADDR_VAR 0 3
19578: PUSH
19579: LD_INT 22
19581: PUSH
19582: LD_OWVAR 2
19586: PUSH
19587: EMPTY
19588: LIST
19589: LIST
19590: PUSH
19591: LD_INT 25
19593: PUSH
19594: LD_INT 1
19596: PUSH
19597: EMPTY
19598: LIST
19599: LIST
19600: PUSH
19601: EMPTY
19602: LIST
19603: LIST
19604: PPUSH
19605: CALL_OW 69
19609: ST_TO_ADDR
// if not tmp then
19610: LD_VAR 0 3
19614: NOT
19615: IFFALSE 19619
// exit ;
19617: GO 19675
// un := tmp [ rand ( 1 , tmp ) ] ;
19619: LD_ADDR_VAR 0 2
19623: PUSH
19624: LD_VAR 0 3
19628: PUSH
19629: LD_INT 1
19631: PPUSH
19632: LD_VAR 0 3
19636: PPUSH
19637: CALL_OW 12
19641: ARRAY
19642: ST_TO_ADDR
// if Crawls ( un ) then
19643: LD_VAR 0 2
19647: PPUSH
19648: CALL_OW 318
19652: IFFALSE 19663
// ComWalk ( un ) ;
19654: LD_VAR 0 2
19658: PPUSH
19659: CALL_OW 138
// SetClass ( un , class_mortar ) ;
19663: LD_VAR 0 2
19667: PPUSH
19668: LD_INT 8
19670: PPUSH
19671: CALL_OW 336
// end ;
19675: PPOPN 3
19677: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
19678: LD_EXP 32
19682: IFFALSE 19690
19684: PUSH
19685: LD_EXP 76
19689: AND
19690: IFFALSE 19834
19692: GO 19694
19694: DISABLE
19695: LD_INT 0
19697: PPUSH
19698: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
19699: LD_ADDR_VAR 0 2
19703: PUSH
19704: LD_INT 22
19706: PUSH
19707: LD_OWVAR 2
19711: PUSH
19712: EMPTY
19713: LIST
19714: LIST
19715: PUSH
19716: LD_INT 21
19718: PUSH
19719: LD_INT 2
19721: PUSH
19722: EMPTY
19723: LIST
19724: LIST
19725: PUSH
19726: LD_INT 2
19728: PUSH
19729: LD_INT 34
19731: PUSH
19732: LD_INT 12
19734: PUSH
19735: EMPTY
19736: LIST
19737: LIST
19738: PUSH
19739: LD_INT 34
19741: PUSH
19742: LD_INT 51
19744: PUSH
19745: EMPTY
19746: LIST
19747: LIST
19748: PUSH
19749: LD_INT 34
19751: PUSH
19752: LD_INT 32
19754: PUSH
19755: EMPTY
19756: LIST
19757: LIST
19758: PUSH
19759: EMPTY
19760: LIST
19761: LIST
19762: LIST
19763: LIST
19764: PUSH
19765: EMPTY
19766: LIST
19767: LIST
19768: LIST
19769: PPUSH
19770: CALL_OW 69
19774: ST_TO_ADDR
// if not tmp then
19775: LD_VAR 0 2
19779: NOT
19780: IFFALSE 19784
// exit ;
19782: GO 19834
// for i in tmp do
19784: LD_ADDR_VAR 0 1
19788: PUSH
19789: LD_VAR 0 2
19793: PUSH
19794: FOR_IN
19795: IFFALSE 19832
// if GetCargo ( i , mat_artifact ) = 0 then
19797: LD_VAR 0 1
19801: PPUSH
19802: LD_INT 4
19804: PPUSH
19805: CALL_OW 289
19809: PUSH
19810: LD_INT 0
19812: EQUAL
19813: IFFALSE 19830
// SetCargo ( i , mat_siberit , 100 ) ;
19815: LD_VAR 0 1
19819: PPUSH
19820: LD_INT 3
19822: PPUSH
19823: LD_INT 100
19825: PPUSH
19826: CALL_OW 290
19830: GO 19794
19832: POP
19833: POP
// end ;
19834: PPOPN 2
19836: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
19837: LD_EXP 32
19841: IFFALSE 19849
19843: PUSH
19844: LD_EXP 77
19848: AND
19849: IFFALSE 20032
19851: GO 19853
19853: DISABLE
19854: LD_INT 0
19856: PPUSH
19857: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
19858: LD_ADDR_VAR 0 2
19862: PUSH
19863: LD_INT 22
19865: PUSH
19866: LD_OWVAR 2
19870: PUSH
19871: EMPTY
19872: LIST
19873: LIST
19874: PPUSH
19875: CALL_OW 69
19879: ST_TO_ADDR
// if not tmp then
19880: LD_VAR 0 2
19884: NOT
19885: IFFALSE 19889
// exit ;
19887: GO 20032
// for i := 1 to 2 do
19889: LD_ADDR_VAR 0 1
19893: PUSH
19894: DOUBLE
19895: LD_INT 1
19897: DEC
19898: ST_TO_ADDR
19899: LD_INT 2
19901: PUSH
19902: FOR_TO
19903: IFFALSE 20030
// begin uc_side := your_side ;
19905: LD_ADDR_OWVAR 20
19909: PUSH
19910: LD_OWVAR 2
19914: ST_TO_ADDR
// uc_nation := nation_american ;
19915: LD_ADDR_OWVAR 21
19919: PUSH
19920: LD_INT 1
19922: ST_TO_ADDR
// vc_chassis := us_morphling ;
19923: LD_ADDR_OWVAR 37
19927: PUSH
19928: LD_INT 5
19930: ST_TO_ADDR
// vc_engine := engine_siberite ;
19931: LD_ADDR_OWVAR 39
19935: PUSH
19936: LD_INT 3
19938: ST_TO_ADDR
// vc_control := control_computer ;
19939: LD_ADDR_OWVAR 38
19943: PUSH
19944: LD_INT 3
19946: ST_TO_ADDR
// vc_weapon := us_double_laser ;
19947: LD_ADDR_OWVAR 40
19951: PUSH
19952: LD_INT 10
19954: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
19955: LD_VAR 0 2
19959: PUSH
19960: LD_INT 1
19962: ARRAY
19963: PPUSH
19964: CALL_OW 310
19968: NOT
19969: IFFALSE 20016
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
19971: CALL_OW 45
19975: PPUSH
19976: LD_VAR 0 2
19980: PUSH
19981: LD_INT 1
19983: ARRAY
19984: PPUSH
19985: CALL_OW 250
19989: PPUSH
19990: LD_VAR 0 2
19994: PUSH
19995: LD_INT 1
19997: ARRAY
19998: PPUSH
19999: CALL_OW 251
20003: PPUSH
20004: LD_INT 12
20006: PPUSH
20007: LD_INT 1
20009: PPUSH
20010: CALL_OW 50
20014: GO 20028
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
20016: CALL_OW 45
20020: PPUSH
20021: LD_INT 1
20023: PPUSH
20024: CALL_OW 51
// end ;
20028: GO 19902
20030: POP
20031: POP
// end ;
20032: PPOPN 2
20034: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
20035: LD_EXP 32
20039: IFFALSE 20047
20041: PUSH
20042: LD_EXP 78
20046: AND
20047: IFFALSE 20269
20049: GO 20051
20051: DISABLE
20052: LD_INT 0
20054: PPUSH
20055: PPUSH
20056: PPUSH
20057: PPUSH
20058: PPUSH
20059: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
20060: LD_ADDR_VAR 0 6
20064: PUSH
20065: LD_INT 22
20067: PUSH
20068: LD_OWVAR 2
20072: PUSH
20073: EMPTY
20074: LIST
20075: LIST
20076: PUSH
20077: LD_INT 21
20079: PUSH
20080: LD_INT 1
20082: PUSH
20083: EMPTY
20084: LIST
20085: LIST
20086: PUSH
20087: LD_INT 3
20089: PUSH
20090: LD_INT 23
20092: PUSH
20093: LD_INT 0
20095: PUSH
20096: EMPTY
20097: LIST
20098: LIST
20099: PUSH
20100: EMPTY
20101: LIST
20102: LIST
20103: PUSH
20104: EMPTY
20105: LIST
20106: LIST
20107: LIST
20108: PPUSH
20109: CALL_OW 69
20113: ST_TO_ADDR
// if not tmp then
20114: LD_VAR 0 6
20118: NOT
20119: IFFALSE 20123
// exit ;
20121: GO 20269
// s1 := rand ( 1 , 4 ) ;
20123: LD_ADDR_VAR 0 2
20127: PUSH
20128: LD_INT 1
20130: PPUSH
20131: LD_INT 4
20133: PPUSH
20134: CALL_OW 12
20138: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
20139: LD_ADDR_VAR 0 4
20143: PUSH
20144: LD_VAR 0 6
20148: PUSH
20149: LD_INT 1
20151: ARRAY
20152: PPUSH
20153: LD_VAR 0 2
20157: PPUSH
20158: CALL_OW 259
20162: ST_TO_ADDR
// if s1 = 1 then
20163: LD_VAR 0 2
20167: PUSH
20168: LD_INT 1
20170: EQUAL
20171: IFFALSE 20191
// s2 := rand ( 2 , 4 ) else
20173: LD_ADDR_VAR 0 3
20177: PUSH
20178: LD_INT 2
20180: PPUSH
20181: LD_INT 4
20183: PPUSH
20184: CALL_OW 12
20188: ST_TO_ADDR
20189: GO 20199
// s2 := 1 ;
20191: LD_ADDR_VAR 0 3
20195: PUSH
20196: LD_INT 1
20198: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
20199: LD_ADDR_VAR 0 5
20203: PUSH
20204: LD_VAR 0 6
20208: PUSH
20209: LD_INT 1
20211: ARRAY
20212: PPUSH
20213: LD_VAR 0 3
20217: PPUSH
20218: CALL_OW 259
20222: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
20223: LD_VAR 0 6
20227: PUSH
20228: LD_INT 1
20230: ARRAY
20231: PPUSH
20232: LD_VAR 0 2
20236: PPUSH
20237: LD_VAR 0 5
20241: PPUSH
20242: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
20246: LD_VAR 0 6
20250: PUSH
20251: LD_INT 1
20253: ARRAY
20254: PPUSH
20255: LD_VAR 0 3
20259: PPUSH
20260: LD_VAR 0 4
20264: PPUSH
20265: CALL_OW 237
// end ;
20269: PPOPN 6
20271: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
20272: LD_EXP 32
20276: IFFALSE 20284
20278: PUSH
20279: LD_EXP 79
20283: AND
20284: IFFALSE 20363
20286: GO 20288
20288: DISABLE
20289: LD_INT 0
20291: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
20292: LD_ADDR_VAR 0 1
20296: PUSH
20297: LD_INT 22
20299: PUSH
20300: LD_OWVAR 2
20304: PUSH
20305: EMPTY
20306: LIST
20307: LIST
20308: PUSH
20309: LD_INT 30
20311: PUSH
20312: LD_INT 3
20314: PUSH
20315: EMPTY
20316: LIST
20317: LIST
20318: PUSH
20319: EMPTY
20320: LIST
20321: LIST
20322: PPUSH
20323: CALL_OW 69
20327: ST_TO_ADDR
// if not tmp then
20328: LD_VAR 0 1
20332: NOT
20333: IFFALSE 20337
// exit ;
20335: GO 20363
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
20337: LD_VAR 0 1
20341: PUSH
20342: LD_INT 1
20344: PPUSH
20345: LD_VAR 0 1
20349: PPUSH
20350: CALL_OW 12
20354: ARRAY
20355: PPUSH
20356: LD_INT 1
20358: PPUSH
20359: CALL_OW 234
// end ;
20363: PPOPN 1
20365: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
20366: LD_EXP 32
20370: IFFALSE 20378
20372: PUSH
20373: LD_EXP 80
20377: AND
20378: IFFALSE 20490
20380: GO 20382
20382: DISABLE
20383: LD_INT 0
20385: PPUSH
20386: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
20387: LD_ADDR_VAR 0 2
20391: PUSH
20392: LD_INT 22
20394: PUSH
20395: LD_OWVAR 2
20399: PUSH
20400: EMPTY
20401: LIST
20402: LIST
20403: PUSH
20404: LD_INT 2
20406: PUSH
20407: LD_INT 30
20409: PUSH
20410: LD_INT 27
20412: PUSH
20413: EMPTY
20414: LIST
20415: LIST
20416: PUSH
20417: LD_INT 30
20419: PUSH
20420: LD_INT 26
20422: PUSH
20423: EMPTY
20424: LIST
20425: LIST
20426: PUSH
20427: LD_INT 30
20429: PUSH
20430: LD_INT 28
20432: PUSH
20433: EMPTY
20434: LIST
20435: LIST
20436: PUSH
20437: EMPTY
20438: LIST
20439: LIST
20440: LIST
20441: LIST
20442: PUSH
20443: EMPTY
20444: LIST
20445: LIST
20446: PPUSH
20447: CALL_OW 69
20451: ST_TO_ADDR
// if not tmp then
20452: LD_VAR 0 2
20456: NOT
20457: IFFALSE 20461
// exit ;
20459: GO 20490
// for i in tmp do
20461: LD_ADDR_VAR 0 1
20465: PUSH
20466: LD_VAR 0 2
20470: PUSH
20471: FOR_IN
20472: IFFALSE 20488
// SetLives ( i , 1 ) ;
20474: LD_VAR 0 1
20478: PPUSH
20479: LD_INT 1
20481: PPUSH
20482: CALL_OW 234
20486: GO 20471
20488: POP
20489: POP
// end ;
20490: PPOPN 2
20492: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
20493: LD_EXP 32
20497: IFFALSE 20505
20499: PUSH
20500: LD_EXP 81
20504: AND
20505: IFFALSE 20792
20507: GO 20509
20509: DISABLE
20510: LD_INT 0
20512: PPUSH
20513: PPUSH
20514: PPUSH
// begin i := rand ( 1 , 7 ) ;
20515: LD_ADDR_VAR 0 1
20519: PUSH
20520: LD_INT 1
20522: PPUSH
20523: LD_INT 7
20525: PPUSH
20526: CALL_OW 12
20530: ST_TO_ADDR
// case i of 1 :
20531: LD_VAR 0 1
20535: PUSH
20536: LD_INT 1
20538: DOUBLE
20539: EQUAL
20540: IFTRUE 20544
20542: GO 20554
20544: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
20545: LD_STRING earthquake(getX(game), 0, 32)
20547: PPUSH
20548: CALL_OW 559
20552: GO 20792
20554: LD_INT 2
20556: DOUBLE
20557: EQUAL
20558: IFTRUE 20562
20560: GO 20576
20562: POP
// begin ToLua ( displayStucuk(); ) ;
20563: LD_STRING displayStucuk();
20565: PPUSH
20566: CALL_OW 559
// ResetFog ;
20570: CALL_OW 335
// end ; 3 :
20574: GO 20792
20576: LD_INT 3
20578: DOUBLE
20579: EQUAL
20580: IFTRUE 20584
20582: GO 20688
20584: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
20585: LD_ADDR_VAR 0 2
20589: PUSH
20590: LD_INT 22
20592: PUSH
20593: LD_OWVAR 2
20597: PUSH
20598: EMPTY
20599: LIST
20600: LIST
20601: PUSH
20602: LD_INT 25
20604: PUSH
20605: LD_INT 1
20607: PUSH
20608: EMPTY
20609: LIST
20610: LIST
20611: PUSH
20612: EMPTY
20613: LIST
20614: LIST
20615: PPUSH
20616: CALL_OW 69
20620: ST_TO_ADDR
// if not tmp then
20621: LD_VAR 0 2
20625: NOT
20626: IFFALSE 20630
// exit ;
20628: GO 20792
// un := tmp [ rand ( 1 , tmp ) ] ;
20630: LD_ADDR_VAR 0 3
20634: PUSH
20635: LD_VAR 0 2
20639: PUSH
20640: LD_INT 1
20642: PPUSH
20643: LD_VAR 0 2
20647: PPUSH
20648: CALL_OW 12
20652: ARRAY
20653: ST_TO_ADDR
// if Crawls ( un ) then
20654: LD_VAR 0 3
20658: PPUSH
20659: CALL_OW 318
20663: IFFALSE 20674
// ComWalk ( un ) ;
20665: LD_VAR 0 3
20669: PPUSH
20670: CALL_OW 138
// SetClass ( un , class_mortar ) ;
20674: LD_VAR 0 3
20678: PPUSH
20679: LD_INT 8
20681: PPUSH
20682: CALL_OW 336
// end ; 4 :
20686: GO 20792
20688: LD_INT 4
20690: DOUBLE
20691: EQUAL
20692: IFTRUE 20696
20694: GO 20770
20696: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
20697: LD_ADDR_VAR 0 2
20701: PUSH
20702: LD_INT 22
20704: PUSH
20705: LD_OWVAR 2
20709: PUSH
20710: EMPTY
20711: LIST
20712: LIST
20713: PUSH
20714: LD_INT 30
20716: PUSH
20717: LD_INT 29
20719: PUSH
20720: EMPTY
20721: LIST
20722: LIST
20723: PUSH
20724: EMPTY
20725: LIST
20726: LIST
20727: PPUSH
20728: CALL_OW 69
20732: ST_TO_ADDR
// if not tmp then
20733: LD_VAR 0 2
20737: NOT
20738: IFFALSE 20742
// exit ;
20740: GO 20792
// CenterNowOnUnits ( tmp [ 1 ] ) ;
20742: LD_VAR 0 2
20746: PUSH
20747: LD_INT 1
20749: ARRAY
20750: PPUSH
20751: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
20755: LD_VAR 0 2
20759: PUSH
20760: LD_INT 1
20762: ARRAY
20763: PPUSH
20764: CALL_OW 65
// end ; 5 .. 7 :
20768: GO 20792
20770: LD_INT 5
20772: DOUBLE
20773: GREATEREQUAL
20774: IFFALSE 20782
20776: LD_INT 7
20778: DOUBLE
20779: LESSEQUAL
20780: IFTRUE 20784
20782: GO 20791
20784: POP
// StreamSibBomb ; end ;
20785: CALL 16973 0 0
20789: GO 20792
20791: POP
// end ;
20792: PPOPN 3
20794: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
20795: LD_EXP 32
20799: IFFALSE 20807
20801: PUSH
20802: LD_EXP 82
20806: AND
20807: IFFALSE 20963
20809: GO 20811
20811: DISABLE
20812: LD_INT 0
20814: PPUSH
20815: PPUSH
20816: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
20817: LD_ADDR_VAR 0 2
20821: PUSH
20822: LD_INT 81
20824: PUSH
20825: LD_OWVAR 2
20829: PUSH
20830: EMPTY
20831: LIST
20832: LIST
20833: PUSH
20834: LD_INT 2
20836: PUSH
20837: LD_INT 21
20839: PUSH
20840: LD_INT 1
20842: PUSH
20843: EMPTY
20844: LIST
20845: LIST
20846: PUSH
20847: LD_INT 21
20849: PUSH
20850: LD_INT 2
20852: PUSH
20853: EMPTY
20854: LIST
20855: LIST
20856: PUSH
20857: EMPTY
20858: LIST
20859: LIST
20860: LIST
20861: PUSH
20862: EMPTY
20863: LIST
20864: LIST
20865: PPUSH
20866: CALL_OW 69
20870: ST_TO_ADDR
// if not tmp then
20871: LD_VAR 0 2
20875: NOT
20876: IFFALSE 20880
// exit ;
20878: GO 20963
// p := 0 ;
20880: LD_ADDR_VAR 0 3
20884: PUSH
20885: LD_INT 0
20887: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
20888: LD_INT 35
20890: PPUSH
20891: CALL_OW 67
// p := p + 1 ;
20895: LD_ADDR_VAR 0 3
20899: PUSH
20900: LD_VAR 0 3
20904: PUSH
20905: LD_INT 1
20907: PLUS
20908: ST_TO_ADDR
// for i in tmp do
20909: LD_ADDR_VAR 0 1
20913: PUSH
20914: LD_VAR 0 2
20918: PUSH
20919: FOR_IN
20920: IFFALSE 20951
// if GetLives ( i ) < 1000 then
20922: LD_VAR 0 1
20926: PPUSH
20927: CALL_OW 256
20931: PUSH
20932: LD_INT 1000
20934: LESS
20935: IFFALSE 20949
// SetLives ( i , 1000 ) ;
20937: LD_VAR 0 1
20941: PPUSH
20942: LD_INT 1000
20944: PPUSH
20945: CALL_OW 234
20949: GO 20919
20951: POP
20952: POP
// until p > 20 ;
20953: LD_VAR 0 3
20957: PUSH
20958: LD_INT 20
20960: GREATER
20961: IFFALSE 20888
// end ;
20963: PPOPN 3
20965: END
// every 0 0$1 trigger StreamModeActive and sTime do
20966: LD_EXP 32
20970: IFFALSE 20978
20972: PUSH
20973: LD_EXP 83
20977: AND
20978: IFFALSE 21013
20980: GO 20982
20982: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
20983: LD_INT 28
20985: PPUSH
20986: LD_OWVAR 2
20990: PPUSH
20991: LD_INT 2
20993: PPUSH
20994: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
20998: LD_INT 30
21000: PPUSH
21001: LD_OWVAR 2
21005: PPUSH
21006: LD_INT 2
21008: PPUSH
21009: CALL_OW 322
// end ;
21013: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
21014: LD_EXP 32
21018: IFFALSE 21026
21020: PUSH
21021: LD_EXP 84
21025: AND
21026: IFFALSE 21147
21028: GO 21030
21030: DISABLE
21031: LD_INT 0
21033: PPUSH
21034: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
21035: LD_ADDR_VAR 0 2
21039: PUSH
21040: LD_INT 22
21042: PUSH
21043: LD_OWVAR 2
21047: PUSH
21048: EMPTY
21049: LIST
21050: LIST
21051: PUSH
21052: LD_INT 21
21054: PUSH
21055: LD_INT 1
21057: PUSH
21058: EMPTY
21059: LIST
21060: LIST
21061: PUSH
21062: LD_INT 3
21064: PUSH
21065: LD_INT 23
21067: PUSH
21068: LD_INT 0
21070: PUSH
21071: EMPTY
21072: LIST
21073: LIST
21074: PUSH
21075: EMPTY
21076: LIST
21077: LIST
21078: PUSH
21079: EMPTY
21080: LIST
21081: LIST
21082: LIST
21083: PPUSH
21084: CALL_OW 69
21088: ST_TO_ADDR
// if not tmp then
21089: LD_VAR 0 2
21093: NOT
21094: IFFALSE 21098
// exit ;
21096: GO 21147
// for i in tmp do
21098: LD_ADDR_VAR 0 1
21102: PUSH
21103: LD_VAR 0 2
21107: PUSH
21108: FOR_IN
21109: IFFALSE 21145
// begin if Crawls ( i ) then
21111: LD_VAR 0 1
21115: PPUSH
21116: CALL_OW 318
21120: IFFALSE 21131
// ComWalk ( i ) ;
21122: LD_VAR 0 1
21126: PPUSH
21127: CALL_OW 138
// SetClass ( i , 2 ) ;
21131: LD_VAR 0 1
21135: PPUSH
21136: LD_INT 2
21138: PPUSH
21139: CALL_OW 336
// end ;
21143: GO 21108
21145: POP
21146: POP
// end ;
21147: PPOPN 2
21149: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
21150: LD_EXP 32
21154: IFFALSE 21162
21156: PUSH
21157: LD_EXP 85
21161: AND
21162: IFFALSE 21452
21164: GO 21166
21166: DISABLE
21167: LD_INT 0
21169: PPUSH
21170: PPUSH
21171: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
21172: LD_OWVAR 2
21176: PPUSH
21177: LD_INT 9
21179: PPUSH
21180: LD_INT 1
21182: PPUSH
21183: LD_INT 1
21185: PPUSH
21186: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
21190: LD_INT 9
21192: PPUSH
21193: LD_OWVAR 2
21197: PPUSH
21198: CALL_OW 343
// uc_side := 9 ;
21202: LD_ADDR_OWVAR 20
21206: PUSH
21207: LD_INT 9
21209: ST_TO_ADDR
// uc_nation := 2 ;
21210: LD_ADDR_OWVAR 21
21214: PUSH
21215: LD_INT 2
21217: ST_TO_ADDR
// hc_name := Dark Warrior ;
21218: LD_ADDR_OWVAR 26
21222: PUSH
21223: LD_STRING Dark Warrior
21225: ST_TO_ADDR
// hc_gallery :=  ;
21226: LD_ADDR_OWVAR 33
21230: PUSH
21231: LD_STRING 
21233: ST_TO_ADDR
// hc_noskilllimit := true ;
21234: LD_ADDR_OWVAR 76
21238: PUSH
21239: LD_INT 1
21241: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
21242: LD_ADDR_OWVAR 31
21246: PUSH
21247: LD_INT 30
21249: PUSH
21250: LD_INT 30
21252: PUSH
21253: LD_INT 30
21255: PUSH
21256: LD_INT 30
21258: PUSH
21259: EMPTY
21260: LIST
21261: LIST
21262: LIST
21263: LIST
21264: ST_TO_ADDR
// un := CreateHuman ;
21265: LD_ADDR_VAR 0 3
21269: PUSH
21270: CALL_OW 44
21274: ST_TO_ADDR
// hc_noskilllimit := false ;
21275: LD_ADDR_OWVAR 76
21279: PUSH
21280: LD_INT 0
21282: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
21283: LD_VAR 0 3
21287: PPUSH
21288: LD_INT 1
21290: PPUSH
21291: CALL_OW 51
// ToLua ( playRanger() ) ;
21295: LD_STRING playRanger()
21297: PPUSH
21298: CALL_OW 559
// p := 0 ;
21302: LD_ADDR_VAR 0 2
21306: PUSH
21307: LD_INT 0
21309: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
21310: LD_INT 35
21312: PPUSH
21313: CALL_OW 67
// p := p + 1 ;
21317: LD_ADDR_VAR 0 2
21321: PUSH
21322: LD_VAR 0 2
21326: PUSH
21327: LD_INT 1
21329: PLUS
21330: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
21331: LD_VAR 0 3
21335: PPUSH
21336: CALL_OW 256
21340: PUSH
21341: LD_INT 1000
21343: LESS
21344: IFFALSE 21358
// SetLives ( un , 1000 ) ;
21346: LD_VAR 0 3
21350: PPUSH
21351: LD_INT 1000
21353: PPUSH
21354: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
21358: LD_VAR 0 3
21362: PPUSH
21363: LD_INT 81
21365: PUSH
21366: LD_OWVAR 2
21370: PUSH
21371: EMPTY
21372: LIST
21373: LIST
21374: PUSH
21375: LD_INT 91
21377: PUSH
21378: LD_VAR 0 3
21382: PUSH
21383: LD_INT 30
21385: PUSH
21386: EMPTY
21387: LIST
21388: LIST
21389: LIST
21390: PUSH
21391: EMPTY
21392: LIST
21393: LIST
21394: PPUSH
21395: CALL_OW 69
21399: PPUSH
21400: LD_VAR 0 3
21404: PPUSH
21405: CALL_OW 74
21409: PPUSH
21410: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
21414: LD_VAR 0 2
21418: PUSH
21419: LD_INT 80
21421: GREATER
21422: IFTRUE 21435
21424: PUSH
21425: LD_VAR 0 3
21429: PPUSH
21430: CALL_OW 301
21434: OR
21435: IFFALSE 21310
// if un then
21437: LD_VAR 0 3
21441: IFFALSE 21452
// RemoveUnit ( un ) ;
21443: LD_VAR 0 3
21447: PPUSH
21448: CALL_OW 64
// end ;
21452: PPOPN 3
21454: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
21455: LD_EXP 86
21459: IFFALSE 21575
21461: GO 21463
21463: DISABLE
21464: LD_INT 0
21466: PPUSH
21467: PPUSH
21468: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
21469: LD_ADDR_VAR 0 2
21473: PUSH
21474: LD_INT 81
21476: PUSH
21477: LD_OWVAR 2
21481: PUSH
21482: EMPTY
21483: LIST
21484: LIST
21485: PUSH
21486: LD_INT 21
21488: PUSH
21489: LD_INT 1
21491: PUSH
21492: EMPTY
21493: LIST
21494: LIST
21495: PUSH
21496: EMPTY
21497: LIST
21498: LIST
21499: PPUSH
21500: CALL_OW 69
21504: ST_TO_ADDR
// ToLua ( playComputer() ) ;
21505: LD_STRING playComputer()
21507: PPUSH
21508: CALL_OW 559
// if not tmp then
21512: LD_VAR 0 2
21516: NOT
21517: IFFALSE 21521
// exit ;
21519: GO 21575
// for i in tmp do
21521: LD_ADDR_VAR 0 1
21525: PUSH
21526: LD_VAR 0 2
21530: PUSH
21531: FOR_IN
21532: IFFALSE 21573
// for j := 1 to 4 do
21534: LD_ADDR_VAR 0 3
21538: PUSH
21539: DOUBLE
21540: LD_INT 1
21542: DEC
21543: ST_TO_ADDR
21544: LD_INT 4
21546: PUSH
21547: FOR_TO
21548: IFFALSE 21569
// SetSkill ( i , j , 10 ) ;
21550: LD_VAR 0 1
21554: PPUSH
21555: LD_VAR 0 3
21559: PPUSH
21560: LD_INT 10
21562: PPUSH
21563: CALL_OW 237
21567: GO 21547
21569: POP
21570: POP
21571: GO 21531
21573: POP
21574: POP
// end ;
21575: PPOPN 3
21577: END
// every 0 0$1 trigger s30 do var i , tmp ;
21578: LD_EXP 87
21582: IFFALSE 21651
21584: GO 21586
21586: DISABLE
21587: LD_INT 0
21589: PPUSH
21590: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
21591: LD_ADDR_VAR 0 2
21595: PUSH
21596: LD_INT 22
21598: PUSH
21599: LD_OWVAR 2
21603: PUSH
21604: EMPTY
21605: LIST
21606: LIST
21607: PPUSH
21608: CALL_OW 69
21612: ST_TO_ADDR
// if not tmp then
21613: LD_VAR 0 2
21617: NOT
21618: IFFALSE 21622
// exit ;
21620: GO 21651
// for i in tmp do
21622: LD_ADDR_VAR 0 1
21626: PUSH
21627: LD_VAR 0 2
21631: PUSH
21632: FOR_IN
21633: IFFALSE 21649
// SetLives ( i , 300 ) ;
21635: LD_VAR 0 1
21639: PPUSH
21640: LD_INT 300
21642: PPUSH
21643: CALL_OW 234
21647: GO 21632
21649: POP
21650: POP
// end ;
21651: PPOPN 2
21653: END
// every 0 0$1 trigger s60 do var i , tmp ;
21654: LD_EXP 88
21658: IFFALSE 21727
21660: GO 21662
21662: DISABLE
21663: LD_INT 0
21665: PPUSH
21666: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
21667: LD_ADDR_VAR 0 2
21671: PUSH
21672: LD_INT 22
21674: PUSH
21675: LD_OWVAR 2
21679: PUSH
21680: EMPTY
21681: LIST
21682: LIST
21683: PPUSH
21684: CALL_OW 69
21688: ST_TO_ADDR
// if not tmp then
21689: LD_VAR 0 2
21693: NOT
21694: IFFALSE 21698
// exit ;
21696: GO 21727
// for i in tmp do
21698: LD_ADDR_VAR 0 1
21702: PUSH
21703: LD_VAR 0 2
21707: PUSH
21708: FOR_IN
21709: IFFALSE 21725
// SetLives ( i , 600 ) ;
21711: LD_VAR 0 1
21715: PPUSH
21716: LD_INT 600
21718: PPUSH
21719: CALL_OW 234
21723: GO 21708
21725: POP
21726: POP
// end ;
21727: PPOPN 2
21729: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
21730: LD_INT 0
21732: PPUSH
// case cmd of 301 :
21733: LD_VAR 0 1
21737: PUSH
21738: LD_INT 301
21740: DOUBLE
21741: EQUAL
21742: IFTRUE 21746
21744: GO 21778
21746: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
21747: LD_VAR 0 6
21751: PPUSH
21752: LD_VAR 0 7
21756: PPUSH
21757: LD_VAR 0 8
21761: PPUSH
21762: LD_VAR 0 4
21766: PPUSH
21767: LD_VAR 0 5
21771: PPUSH
21772: CALL 22991 0 5
21776: GO 21899
21778: LD_INT 302
21780: DOUBLE
21781: EQUAL
21782: IFTRUE 21786
21784: GO 21823
21786: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
21787: LD_VAR 0 6
21791: PPUSH
21792: LD_VAR 0 7
21796: PPUSH
21797: LD_VAR 0 8
21801: PPUSH
21802: LD_VAR 0 9
21806: PPUSH
21807: LD_VAR 0 4
21811: PPUSH
21812: LD_VAR 0 5
21816: PPUSH
21817: CALL 23082 0 6
21821: GO 21899
21823: LD_INT 303
21825: DOUBLE
21826: EQUAL
21827: IFTRUE 21831
21829: GO 21868
21831: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
21832: LD_VAR 0 6
21836: PPUSH
21837: LD_VAR 0 7
21841: PPUSH
21842: LD_VAR 0 8
21846: PPUSH
21847: LD_VAR 0 9
21851: PPUSH
21852: LD_VAR 0 4
21856: PPUSH
21857: LD_VAR 0 5
21861: PPUSH
21862: CALL 21904 0 6
21866: GO 21899
21868: LD_INT 304
21870: DOUBLE
21871: EQUAL
21872: IFTRUE 21876
21874: GO 21898
21876: POP
// hHackTeleport ( unit , x , y ) ; end ;
21877: LD_VAR 0 2
21881: PPUSH
21882: LD_VAR 0 4
21886: PPUSH
21887: LD_VAR 0 5
21891: PPUSH
21892: CALL 23675 0 3
21896: GO 21899
21898: POP
// end ;
21899: LD_VAR 0 12
21903: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
21904: LD_INT 0
21906: PPUSH
21907: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
21908: LD_VAR 0 1
21912: PUSH
21913: LD_INT 1
21915: LESS
21916: IFTRUE 21928
21918: PUSH
21919: LD_VAR 0 1
21923: PUSH
21924: LD_INT 3
21926: GREATER
21927: OR
21928: IFTRUE 21946
21930: PUSH
21931: LD_VAR 0 5
21935: PPUSH
21936: LD_VAR 0 6
21940: PPUSH
21941: CALL_OW 428
21945: OR
21946: IFFALSE 21950
// exit ;
21948: GO 22678
// uc_side := your_side ;
21950: LD_ADDR_OWVAR 20
21954: PUSH
21955: LD_OWVAR 2
21959: ST_TO_ADDR
// uc_nation := nation ;
21960: LD_ADDR_OWVAR 21
21964: PUSH
21965: LD_VAR 0 1
21969: ST_TO_ADDR
// bc_level = 1 ;
21970: LD_ADDR_OWVAR 43
21974: PUSH
21975: LD_INT 1
21977: ST_TO_ADDR
// case btype of 1 :
21978: LD_VAR 0 2
21982: PUSH
21983: LD_INT 1
21985: DOUBLE
21986: EQUAL
21987: IFTRUE 21991
21989: GO 22002
21991: POP
// bc_type := b_depot ; 2 :
21992: LD_ADDR_OWVAR 42
21996: PUSH
21997: LD_INT 0
21999: ST_TO_ADDR
22000: GO 22622
22002: LD_INT 2
22004: DOUBLE
22005: EQUAL
22006: IFTRUE 22010
22008: GO 22021
22010: POP
// bc_type := b_warehouse ; 3 :
22011: LD_ADDR_OWVAR 42
22015: PUSH
22016: LD_INT 1
22018: ST_TO_ADDR
22019: GO 22622
22021: LD_INT 3
22023: DOUBLE
22024: EQUAL
22025: IFTRUE 22029
22027: GO 22040
22029: POP
// bc_type := b_lab ; 4 .. 9 :
22030: LD_ADDR_OWVAR 42
22034: PUSH
22035: LD_INT 6
22037: ST_TO_ADDR
22038: GO 22622
22040: LD_INT 4
22042: DOUBLE
22043: GREATEREQUAL
22044: IFFALSE 22052
22046: LD_INT 9
22048: DOUBLE
22049: LESSEQUAL
22050: IFTRUE 22054
22052: GO 22114
22054: POP
// begin bc_type := b_lab_half ;
22055: LD_ADDR_OWVAR 42
22059: PUSH
22060: LD_INT 7
22062: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
22063: LD_ADDR_OWVAR 44
22067: PUSH
22068: LD_INT 10
22070: PUSH
22071: LD_INT 11
22073: PUSH
22074: LD_INT 12
22076: PUSH
22077: LD_INT 15
22079: PUSH
22080: LD_INT 14
22082: PUSH
22083: LD_INT 13
22085: PUSH
22086: EMPTY
22087: LIST
22088: LIST
22089: LIST
22090: LIST
22091: LIST
22092: LIST
22093: PUSH
22094: LD_VAR 0 2
22098: PUSH
22099: LD_INT 3
22101: MINUS
22102: ARRAY
22103: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
22104: LD_ADDR_OWVAR 45
22108: PUSH
22109: LD_INT 9
22111: ST_TO_ADDR
// end ; 10 .. 13 :
22112: GO 22622
22114: LD_INT 10
22116: DOUBLE
22117: GREATEREQUAL
22118: IFFALSE 22126
22120: LD_INT 13
22122: DOUBLE
22123: LESSEQUAL
22124: IFTRUE 22128
22126: GO 22205
22128: POP
// begin bc_type := b_lab_full ;
22129: LD_ADDR_OWVAR 42
22133: PUSH
22134: LD_INT 8
22136: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
22137: LD_ADDR_OWVAR 44
22141: PUSH
22142: LD_INT 10
22144: PUSH
22145: LD_INT 12
22147: PUSH
22148: LD_INT 14
22150: PUSH
22151: LD_INT 13
22153: PUSH
22154: EMPTY
22155: LIST
22156: LIST
22157: LIST
22158: LIST
22159: PUSH
22160: LD_VAR 0 2
22164: PUSH
22165: LD_INT 9
22167: MINUS
22168: ARRAY
22169: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
22170: LD_ADDR_OWVAR 45
22174: PUSH
22175: LD_INT 11
22177: PUSH
22178: LD_INT 15
22180: PUSH
22181: LD_INT 12
22183: PUSH
22184: LD_INT 15
22186: PUSH
22187: EMPTY
22188: LIST
22189: LIST
22190: LIST
22191: LIST
22192: PUSH
22193: LD_VAR 0 2
22197: PUSH
22198: LD_INT 9
22200: MINUS
22201: ARRAY
22202: ST_TO_ADDR
// end ; 14 :
22203: GO 22622
22205: LD_INT 14
22207: DOUBLE
22208: EQUAL
22209: IFTRUE 22213
22211: GO 22224
22213: POP
// bc_type := b_workshop ; 15 :
22214: LD_ADDR_OWVAR 42
22218: PUSH
22219: LD_INT 2
22221: ST_TO_ADDR
22222: GO 22622
22224: LD_INT 15
22226: DOUBLE
22227: EQUAL
22228: IFTRUE 22232
22230: GO 22243
22232: POP
// bc_type := b_factory ; 16 :
22233: LD_ADDR_OWVAR 42
22237: PUSH
22238: LD_INT 3
22240: ST_TO_ADDR
22241: GO 22622
22243: LD_INT 16
22245: DOUBLE
22246: EQUAL
22247: IFTRUE 22251
22249: GO 22262
22251: POP
// bc_type := b_ext_gun ; 17 :
22252: LD_ADDR_OWVAR 42
22256: PUSH
22257: LD_INT 17
22259: ST_TO_ADDR
22260: GO 22622
22262: LD_INT 17
22264: DOUBLE
22265: EQUAL
22266: IFTRUE 22270
22268: GO 22298
22270: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
22271: LD_ADDR_OWVAR 42
22275: PUSH
22276: LD_INT 19
22278: PUSH
22279: LD_INT 23
22281: PUSH
22282: LD_INT 19
22284: PUSH
22285: EMPTY
22286: LIST
22287: LIST
22288: LIST
22289: PUSH
22290: LD_VAR 0 1
22294: ARRAY
22295: ST_TO_ADDR
22296: GO 22622
22298: LD_INT 18
22300: DOUBLE
22301: EQUAL
22302: IFTRUE 22306
22304: GO 22317
22306: POP
// bc_type := b_ext_radar ; 19 :
22307: LD_ADDR_OWVAR 42
22311: PUSH
22312: LD_INT 20
22314: ST_TO_ADDR
22315: GO 22622
22317: LD_INT 19
22319: DOUBLE
22320: EQUAL
22321: IFTRUE 22325
22323: GO 22336
22325: POP
// bc_type := b_ext_radio ; 20 :
22326: LD_ADDR_OWVAR 42
22330: PUSH
22331: LD_INT 22
22333: ST_TO_ADDR
22334: GO 22622
22336: LD_INT 20
22338: DOUBLE
22339: EQUAL
22340: IFTRUE 22344
22342: GO 22355
22344: POP
// bc_type := b_ext_siberium ; 21 :
22345: LD_ADDR_OWVAR 42
22349: PUSH
22350: LD_INT 21
22352: ST_TO_ADDR
22353: GO 22622
22355: LD_INT 21
22357: DOUBLE
22358: EQUAL
22359: IFTRUE 22363
22361: GO 22374
22363: POP
// bc_type := b_ext_computer ; 22 :
22364: LD_ADDR_OWVAR 42
22368: PUSH
22369: LD_INT 24
22371: ST_TO_ADDR
22372: GO 22622
22374: LD_INT 22
22376: DOUBLE
22377: EQUAL
22378: IFTRUE 22382
22380: GO 22393
22382: POP
// bc_type := b_ext_track ; 23 :
22383: LD_ADDR_OWVAR 42
22387: PUSH
22388: LD_INT 16
22390: ST_TO_ADDR
22391: GO 22622
22393: LD_INT 23
22395: DOUBLE
22396: EQUAL
22397: IFTRUE 22401
22399: GO 22412
22401: POP
// bc_type := b_ext_laser ; 24 :
22402: LD_ADDR_OWVAR 42
22406: PUSH
22407: LD_INT 25
22409: ST_TO_ADDR
22410: GO 22622
22412: LD_INT 24
22414: DOUBLE
22415: EQUAL
22416: IFTRUE 22420
22418: GO 22431
22420: POP
// bc_type := b_control_tower ; 25 :
22421: LD_ADDR_OWVAR 42
22425: PUSH
22426: LD_INT 36
22428: ST_TO_ADDR
22429: GO 22622
22431: LD_INT 25
22433: DOUBLE
22434: EQUAL
22435: IFTRUE 22439
22437: GO 22450
22439: POP
// bc_type := b_breastwork ; 26 :
22440: LD_ADDR_OWVAR 42
22444: PUSH
22445: LD_INT 31
22447: ST_TO_ADDR
22448: GO 22622
22450: LD_INT 26
22452: DOUBLE
22453: EQUAL
22454: IFTRUE 22458
22456: GO 22469
22458: POP
// bc_type := b_bunker ; 27 :
22459: LD_ADDR_OWVAR 42
22463: PUSH
22464: LD_INT 32
22466: ST_TO_ADDR
22467: GO 22622
22469: LD_INT 27
22471: DOUBLE
22472: EQUAL
22473: IFTRUE 22477
22475: GO 22488
22477: POP
// bc_type := b_turret ; 28 :
22478: LD_ADDR_OWVAR 42
22482: PUSH
22483: LD_INT 33
22485: ST_TO_ADDR
22486: GO 22622
22488: LD_INT 28
22490: DOUBLE
22491: EQUAL
22492: IFTRUE 22496
22494: GO 22507
22496: POP
// bc_type := b_armoury ; 29 :
22497: LD_ADDR_OWVAR 42
22501: PUSH
22502: LD_INT 4
22504: ST_TO_ADDR
22505: GO 22622
22507: LD_INT 29
22509: DOUBLE
22510: EQUAL
22511: IFTRUE 22515
22513: GO 22526
22515: POP
// bc_type := b_barracks ; 30 :
22516: LD_ADDR_OWVAR 42
22520: PUSH
22521: LD_INT 5
22523: ST_TO_ADDR
22524: GO 22622
22526: LD_INT 30
22528: DOUBLE
22529: EQUAL
22530: IFTRUE 22534
22532: GO 22545
22534: POP
// bc_type := b_solar_power ; 31 :
22535: LD_ADDR_OWVAR 42
22539: PUSH
22540: LD_INT 27
22542: ST_TO_ADDR
22543: GO 22622
22545: LD_INT 31
22547: DOUBLE
22548: EQUAL
22549: IFTRUE 22553
22551: GO 22564
22553: POP
// bc_type := b_oil_power ; 32 :
22554: LD_ADDR_OWVAR 42
22558: PUSH
22559: LD_INT 26
22561: ST_TO_ADDR
22562: GO 22622
22564: LD_INT 32
22566: DOUBLE
22567: EQUAL
22568: IFTRUE 22572
22570: GO 22583
22572: POP
// bc_type := b_siberite_power ; 33 :
22573: LD_ADDR_OWVAR 42
22577: PUSH
22578: LD_INT 28
22580: ST_TO_ADDR
22581: GO 22622
22583: LD_INT 33
22585: DOUBLE
22586: EQUAL
22587: IFTRUE 22591
22589: GO 22602
22591: POP
// bc_type := b_oil_mine ; 34 :
22592: LD_ADDR_OWVAR 42
22596: PUSH
22597: LD_INT 29
22599: ST_TO_ADDR
22600: GO 22622
22602: LD_INT 34
22604: DOUBLE
22605: EQUAL
22606: IFTRUE 22610
22608: GO 22621
22610: POP
// bc_type := b_siberite_mine ; end ;
22611: LD_ADDR_OWVAR 42
22615: PUSH
22616: LD_INT 30
22618: ST_TO_ADDR
22619: GO 22622
22621: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
22622: LD_ADDR_VAR 0 8
22626: PUSH
22627: LD_VAR 0 5
22631: PPUSH
22632: LD_VAR 0 6
22636: PPUSH
22637: LD_VAR 0 3
22641: PPUSH
22642: CALL_OW 47
22646: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
22647: LD_OWVAR 42
22651: PUSH
22652: LD_INT 32
22654: PUSH
22655: LD_INT 33
22657: PUSH
22658: EMPTY
22659: LIST
22660: LIST
22661: IN
22662: IFFALSE 22678
// PlaceWeaponTurret ( b , weapon ) ;
22664: LD_VAR 0 8
22668: PPUSH
22669: LD_VAR 0 4
22673: PPUSH
22674: CALL_OW 431
// end ;
22678: LD_VAR 0 7
22682: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
22683: LD_INT 0
22685: PPUSH
22686: PPUSH
22687: PPUSH
22688: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
22689: LD_ADDR_VAR 0 4
22693: PUSH
22694: LD_INT 22
22696: PUSH
22697: LD_OWVAR 2
22701: PUSH
22702: EMPTY
22703: LIST
22704: LIST
22705: PUSH
22706: LD_INT 2
22708: PUSH
22709: LD_INT 30
22711: PUSH
22712: LD_INT 0
22714: PUSH
22715: EMPTY
22716: LIST
22717: LIST
22718: PUSH
22719: LD_INT 30
22721: PUSH
22722: LD_INT 1
22724: PUSH
22725: EMPTY
22726: LIST
22727: LIST
22728: PUSH
22729: EMPTY
22730: LIST
22731: LIST
22732: LIST
22733: PUSH
22734: EMPTY
22735: LIST
22736: LIST
22737: PPUSH
22738: CALL_OW 69
22742: ST_TO_ADDR
// if not tmp then
22743: LD_VAR 0 4
22747: NOT
22748: IFFALSE 22752
// exit ;
22750: GO 22811
// for i in tmp do
22752: LD_ADDR_VAR 0 2
22756: PUSH
22757: LD_VAR 0 4
22761: PUSH
22762: FOR_IN
22763: IFFALSE 22809
// for j = 1 to 3 do
22765: LD_ADDR_VAR 0 3
22769: PUSH
22770: DOUBLE
22771: LD_INT 1
22773: DEC
22774: ST_TO_ADDR
22775: LD_INT 3
22777: PUSH
22778: FOR_TO
22779: IFFALSE 22805
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
22781: LD_VAR 0 2
22785: PPUSH
22786: CALL_OW 274
22790: PPUSH
22791: LD_VAR 0 3
22795: PPUSH
22796: LD_INT 99999
22798: PPUSH
22799: CALL_OW 277
22803: GO 22778
22805: POP
22806: POP
22807: GO 22762
22809: POP
22810: POP
// end ;
22811: LD_VAR 0 1
22815: RET
// export function hHackSetLevel10 ; var i , j ; begin
22816: LD_INT 0
22818: PPUSH
22819: PPUSH
22820: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
22821: LD_ADDR_VAR 0 2
22825: PUSH
22826: LD_INT 21
22828: PUSH
22829: LD_INT 1
22831: PUSH
22832: EMPTY
22833: LIST
22834: LIST
22835: PPUSH
22836: CALL_OW 69
22840: PUSH
22841: FOR_IN
22842: IFFALSE 22894
// if IsSelected ( i ) then
22844: LD_VAR 0 2
22848: PPUSH
22849: CALL_OW 306
22853: IFFALSE 22892
// begin for j := 1 to 4 do
22855: LD_ADDR_VAR 0 3
22859: PUSH
22860: DOUBLE
22861: LD_INT 1
22863: DEC
22864: ST_TO_ADDR
22865: LD_INT 4
22867: PUSH
22868: FOR_TO
22869: IFFALSE 22890
// SetSkill ( i , j , 10 ) ;
22871: LD_VAR 0 2
22875: PPUSH
22876: LD_VAR 0 3
22880: PPUSH
22881: LD_INT 10
22883: PPUSH
22884: CALL_OW 237
22888: GO 22868
22890: POP
22891: POP
// end ;
22892: GO 22841
22894: POP
22895: POP
// end ;
22896: LD_VAR 0 1
22900: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
22901: LD_INT 0
22903: PPUSH
22904: PPUSH
22905: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
22906: LD_ADDR_VAR 0 2
22910: PUSH
22911: LD_INT 22
22913: PUSH
22914: LD_OWVAR 2
22918: PUSH
22919: EMPTY
22920: LIST
22921: LIST
22922: PUSH
22923: LD_INT 21
22925: PUSH
22926: LD_INT 1
22928: PUSH
22929: EMPTY
22930: LIST
22931: LIST
22932: PUSH
22933: EMPTY
22934: LIST
22935: LIST
22936: PPUSH
22937: CALL_OW 69
22941: PUSH
22942: FOR_IN
22943: IFFALSE 22984
// begin for j := 1 to 4 do
22945: LD_ADDR_VAR 0 3
22949: PUSH
22950: DOUBLE
22951: LD_INT 1
22953: DEC
22954: ST_TO_ADDR
22955: LD_INT 4
22957: PUSH
22958: FOR_TO
22959: IFFALSE 22980
// SetSkill ( i , j , 10 ) ;
22961: LD_VAR 0 2
22965: PPUSH
22966: LD_VAR 0 3
22970: PPUSH
22971: LD_INT 10
22973: PPUSH
22974: CALL_OW 237
22978: GO 22958
22980: POP
22981: POP
// end ;
22982: GO 22942
22984: POP
22985: POP
// end ;
22986: LD_VAR 0 1
22990: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
22991: LD_INT 0
22993: PPUSH
// uc_side := your_side ;
22994: LD_ADDR_OWVAR 20
22998: PUSH
22999: LD_OWVAR 2
23003: ST_TO_ADDR
// uc_nation := nation ;
23004: LD_ADDR_OWVAR 21
23008: PUSH
23009: LD_VAR 0 1
23013: ST_TO_ADDR
// InitHc ;
23014: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
23018: LD_INT 0
23020: PPUSH
23021: LD_VAR 0 2
23025: PPUSH
23026: LD_VAR 0 3
23030: PPUSH
23031: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
23035: LD_VAR 0 4
23039: PPUSH
23040: LD_VAR 0 5
23044: PPUSH
23045: CALL_OW 428
23049: PUSH
23050: LD_INT 0
23052: EQUAL
23053: IFFALSE 23077
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
23055: CALL_OW 44
23059: PPUSH
23060: LD_VAR 0 4
23064: PPUSH
23065: LD_VAR 0 5
23069: PPUSH
23070: LD_INT 1
23072: PPUSH
23073: CALL_OW 48
// end ;
23077: LD_VAR 0 6
23081: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
23082: LD_INT 0
23084: PPUSH
23085: PPUSH
// uc_side := your_side ;
23086: LD_ADDR_OWVAR 20
23090: PUSH
23091: LD_OWVAR 2
23095: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
23096: LD_VAR 0 1
23100: PUSH
23101: LD_INT 1
23103: PUSH
23104: LD_INT 2
23106: PUSH
23107: LD_INT 3
23109: PUSH
23110: LD_INT 4
23112: PUSH
23113: LD_INT 5
23115: PUSH
23116: EMPTY
23117: LIST
23118: LIST
23119: LIST
23120: LIST
23121: LIST
23122: IN
23123: IFFALSE 23135
// uc_nation := nation_american else
23125: LD_ADDR_OWVAR 21
23129: PUSH
23130: LD_INT 1
23132: ST_TO_ADDR
23133: GO 23178
// if chassis in [ 11 , 12 , 13 , 14 ] then
23135: LD_VAR 0 1
23139: PUSH
23140: LD_INT 11
23142: PUSH
23143: LD_INT 12
23145: PUSH
23146: LD_INT 13
23148: PUSH
23149: LD_INT 14
23151: PUSH
23152: EMPTY
23153: LIST
23154: LIST
23155: LIST
23156: LIST
23157: IN
23158: IFFALSE 23170
// uc_nation := nation_arabian else
23160: LD_ADDR_OWVAR 21
23164: PUSH
23165: LD_INT 2
23167: ST_TO_ADDR
23168: GO 23178
// uc_nation := nation_russian ;
23170: LD_ADDR_OWVAR 21
23174: PUSH
23175: LD_INT 3
23177: ST_TO_ADDR
// vc_chassis := chassis ;
23178: LD_ADDR_OWVAR 37
23182: PUSH
23183: LD_VAR 0 1
23187: ST_TO_ADDR
// vc_engine := engine ;
23188: LD_ADDR_OWVAR 39
23192: PUSH
23193: LD_VAR 0 2
23197: ST_TO_ADDR
// vc_control := control ;
23198: LD_ADDR_OWVAR 38
23202: PUSH
23203: LD_VAR 0 3
23207: ST_TO_ADDR
// vc_weapon := weapon ;
23208: LD_ADDR_OWVAR 40
23212: PUSH
23213: LD_VAR 0 4
23217: ST_TO_ADDR
// un := CreateVehicle ;
23218: LD_ADDR_VAR 0 8
23222: PUSH
23223: CALL_OW 45
23227: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
23228: LD_VAR 0 8
23232: PPUSH
23233: LD_INT 0
23235: PPUSH
23236: LD_INT 5
23238: PPUSH
23239: CALL_OW 12
23243: PPUSH
23244: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
23248: LD_VAR 0 8
23252: PPUSH
23253: LD_VAR 0 5
23257: PPUSH
23258: LD_VAR 0 6
23262: PPUSH
23263: LD_INT 1
23265: PPUSH
23266: CALL_OW 48
// end ;
23270: LD_VAR 0 7
23274: RET
// export hInvincible ; every 1 do
23275: GO 23277
23277: DISABLE
// hInvincible := [ ] ;
23278: LD_ADDR_EXP 89
23282: PUSH
23283: EMPTY
23284: ST_TO_ADDR
23285: END
// every 10 do var i ;
23286: GO 23288
23288: DISABLE
23289: LD_INT 0
23291: PPUSH
// begin enable ;
23292: ENABLE
// if not hInvincible then
23293: LD_EXP 89
23297: NOT
23298: IFFALSE 23302
// exit ;
23300: GO 23346
// for i in hInvincible do
23302: LD_ADDR_VAR 0 1
23306: PUSH
23307: LD_EXP 89
23311: PUSH
23312: FOR_IN
23313: IFFALSE 23344
// if GetLives ( i ) < 1000 then
23315: LD_VAR 0 1
23319: PPUSH
23320: CALL_OW 256
23324: PUSH
23325: LD_INT 1000
23327: LESS
23328: IFFALSE 23342
// SetLives ( i , 1000 ) ;
23330: LD_VAR 0 1
23334: PPUSH
23335: LD_INT 1000
23337: PPUSH
23338: CALL_OW 234
23342: GO 23312
23344: POP
23345: POP
// end ;
23346: PPOPN 1
23348: END
// export function hHackInvincible ; var i ; begin
23349: LD_INT 0
23351: PPUSH
23352: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
23353: LD_ADDR_VAR 0 2
23357: PUSH
23358: LD_INT 2
23360: PUSH
23361: LD_INT 21
23363: PUSH
23364: LD_INT 1
23366: PUSH
23367: EMPTY
23368: LIST
23369: LIST
23370: PUSH
23371: LD_INT 21
23373: PUSH
23374: LD_INT 2
23376: PUSH
23377: EMPTY
23378: LIST
23379: LIST
23380: PUSH
23381: EMPTY
23382: LIST
23383: LIST
23384: LIST
23385: PPUSH
23386: CALL_OW 69
23390: PUSH
23391: FOR_IN
23392: IFFALSE 23453
// if IsSelected ( i ) then
23394: LD_VAR 0 2
23398: PPUSH
23399: CALL_OW 306
23403: IFFALSE 23451
// begin if i in hInvincible then
23405: LD_VAR 0 2
23409: PUSH
23410: LD_EXP 89
23414: IN
23415: IFFALSE 23435
// hInvincible := hInvincible diff i else
23417: LD_ADDR_EXP 89
23421: PUSH
23422: LD_EXP 89
23426: PUSH
23427: LD_VAR 0 2
23431: DIFF
23432: ST_TO_ADDR
23433: GO 23451
// hInvincible := hInvincible union i ;
23435: LD_ADDR_EXP 89
23439: PUSH
23440: LD_EXP 89
23444: PUSH
23445: LD_VAR 0 2
23449: UNION
23450: ST_TO_ADDR
// end ;
23451: GO 23391
23453: POP
23454: POP
// end ;
23455: LD_VAR 0 1
23459: RET
// export function hHackInvisible ; var i , j ; begin
23460: LD_INT 0
23462: PPUSH
23463: PPUSH
23464: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
23465: LD_ADDR_VAR 0 2
23469: PUSH
23470: LD_INT 21
23472: PUSH
23473: LD_INT 1
23475: PUSH
23476: EMPTY
23477: LIST
23478: LIST
23479: PPUSH
23480: CALL_OW 69
23484: PUSH
23485: FOR_IN
23486: IFFALSE 23510
// if IsSelected ( i ) then
23488: LD_VAR 0 2
23492: PPUSH
23493: CALL_OW 306
23497: IFFALSE 23508
// ComForceInvisible ( i ) ;
23499: LD_VAR 0 2
23503: PPUSH
23504: CALL_OW 496
23508: GO 23485
23510: POP
23511: POP
// end ;
23512: LD_VAR 0 1
23516: RET
// export function hHackChangeYourSide ; begin
23517: LD_INT 0
23519: PPUSH
// if your_side = 8 then
23520: LD_OWVAR 2
23524: PUSH
23525: LD_INT 8
23527: EQUAL
23528: IFFALSE 23540
// your_side := 0 else
23530: LD_ADDR_OWVAR 2
23534: PUSH
23535: LD_INT 0
23537: ST_TO_ADDR
23538: GO 23554
// your_side := your_side + 1 ;
23540: LD_ADDR_OWVAR 2
23544: PUSH
23545: LD_OWVAR 2
23549: PUSH
23550: LD_INT 1
23552: PLUS
23553: ST_TO_ADDR
// end ;
23554: LD_VAR 0 1
23558: RET
// export function hHackChangeUnitSide ; var i , j ; begin
23559: LD_INT 0
23561: PPUSH
23562: PPUSH
23563: PPUSH
// for i in all_units do
23564: LD_ADDR_VAR 0 2
23568: PUSH
23569: LD_OWVAR 3
23573: PUSH
23574: FOR_IN
23575: IFFALSE 23653
// if IsSelected ( i ) then
23577: LD_VAR 0 2
23581: PPUSH
23582: CALL_OW 306
23586: IFFALSE 23651
// begin j := GetSide ( i ) ;
23588: LD_ADDR_VAR 0 3
23592: PUSH
23593: LD_VAR 0 2
23597: PPUSH
23598: CALL_OW 255
23602: ST_TO_ADDR
// if j = 8 then
23603: LD_VAR 0 3
23607: PUSH
23608: LD_INT 8
23610: EQUAL
23611: IFFALSE 23623
// j := 0 else
23613: LD_ADDR_VAR 0 3
23617: PUSH
23618: LD_INT 0
23620: ST_TO_ADDR
23621: GO 23637
// j := j + 1 ;
23623: LD_ADDR_VAR 0 3
23627: PUSH
23628: LD_VAR 0 3
23632: PUSH
23633: LD_INT 1
23635: PLUS
23636: ST_TO_ADDR
// SetSide ( i , j ) ;
23637: LD_VAR 0 2
23641: PPUSH
23642: LD_VAR 0 3
23646: PPUSH
23647: CALL_OW 235
// end ;
23651: GO 23574
23653: POP
23654: POP
// end ;
23655: LD_VAR 0 1
23659: RET
// export function hHackFog ; begin
23660: LD_INT 0
23662: PPUSH
// FogOff ( true ) ;
23663: LD_INT 1
23665: PPUSH
23666: CALL_OW 344
// end ;
23670: LD_VAR 0 1
23674: RET
// export function hHackTeleport ( unit , x , y ) ; begin
23675: LD_INT 0
23677: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
23678: LD_VAR 0 1
23682: PPUSH
23683: LD_VAR 0 2
23687: PPUSH
23688: LD_VAR 0 3
23692: PPUSH
23693: LD_INT 1
23695: PPUSH
23696: LD_INT 1
23698: PPUSH
23699: CALL_OW 483
// CenterOnXY ( x , y ) ;
23703: LD_VAR 0 2
23707: PPUSH
23708: LD_VAR 0 3
23712: PPUSH
23713: CALL_OW 84
// end ;
23717: LD_VAR 0 4
23721: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
23722: LD_INT 0
23724: PPUSH
23725: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
23726: LD_VAR 0 1
23730: NOT
23731: IFTRUE 23750
23733: PUSH
23734: LD_VAR 0 2
23738: PPUSH
23739: LD_VAR 0 3
23743: PPUSH
23744: CALL_OW 488
23748: NOT
23749: OR
23750: IFTRUE 23785
23752: PUSH
23753: LD_VAR 0 1
23757: PPUSH
23758: CALL_OW 266
23762: PUSH
23763: LD_INT 3
23765: NONEQUAL
23766: IFFALSE 23784
23768: PUSH
23769: LD_VAR 0 1
23773: PPUSH
23774: CALL_OW 247
23778: PUSH
23779: LD_INT 1
23781: EQUAL
23782: NOT
23783: AND
23784: OR
23785: IFFALSE 23789
// exit ;
23787: GO 24071
// if GetType ( factory ) = unit_human then
23789: LD_VAR 0 1
23793: PPUSH
23794: CALL_OW 247
23798: PUSH
23799: LD_INT 1
23801: EQUAL
23802: IFFALSE 23819
// factory := IsInUnit ( factory ) ;
23804: LD_ADDR_VAR 0 1
23808: PUSH
23809: LD_VAR 0 1
23813: PPUSH
23814: CALL_OW 310
23818: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
23819: LD_VAR 0 1
23823: PPUSH
23824: CALL_OW 266
23828: PUSH
23829: LD_INT 3
23831: NONEQUAL
23832: IFFALSE 23836
// exit ;
23834: GO 24071
// for i := 1 to Count ( factoryWaypoints ) do
23836: LD_ADDR_VAR 0 5
23840: PUSH
23841: DOUBLE
23842: LD_INT 1
23844: DEC
23845: ST_TO_ADDR
23846: LD_EXP 90
23850: PPUSH
23851: CALL 33875 0 1
23855: PUSH
23856: FOR_TO
23857: IFFALSE 24019
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
23859: LD_VAR 0 2
23863: PPUSH
23864: LD_VAR 0 3
23868: PPUSH
23869: CALL_OW 428
23873: PUSH
23874: LD_EXP 90
23878: PUSH
23879: LD_VAR 0 5
23883: ARRAY
23884: PUSH
23885: LD_INT 2
23887: ARRAY
23888: EQUAL
23889: IFFALSE 23921
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
23891: LD_ADDR_EXP 90
23895: PUSH
23896: LD_EXP 90
23900: PPUSH
23901: LD_VAR 0 5
23905: PPUSH
23906: CALL_OW 3
23910: ST_TO_ADDR
// UpdateFactoryWaypoints ;
23911: CALL 24076 0 0
// exit ;
23915: POP
23916: POP
23917: GO 24071
// end else
23919: GO 24017
// if factory = factoryWaypoints [ i ] [ 2 ] then
23921: LD_VAR 0 1
23925: PUSH
23926: LD_EXP 90
23930: PUSH
23931: LD_VAR 0 5
23935: ARRAY
23936: PUSH
23937: LD_INT 2
23939: ARRAY
23940: EQUAL
23941: IFFALSE 24017
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
23943: LD_ADDR_EXP 90
23947: PUSH
23948: LD_EXP 90
23952: PPUSH
23953: LD_VAR 0 5
23957: PPUSH
23958: CALL_OW 3
23962: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
23963: LD_ADDR_EXP 90
23967: PUSH
23968: LD_EXP 90
23972: PPUSH
23973: LD_VAR 0 1
23977: PPUSH
23978: CALL_OW 255
23982: PUSH
23983: LD_VAR 0 1
23987: PUSH
23988: LD_VAR 0 2
23992: PUSH
23993: LD_VAR 0 3
23997: PUSH
23998: EMPTY
23999: LIST
24000: LIST
24001: LIST
24002: LIST
24003: PPUSH
24004: CALL 69851 0 2
24008: ST_TO_ADDR
// UpdateFactoryWaypoints ;
24009: CALL 24076 0 0
// exit ;
24013: POP
24014: POP
24015: GO 24071
// end ; end ;
24017: GO 23856
24019: POP
24020: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
24021: LD_ADDR_EXP 90
24025: PUSH
24026: LD_EXP 90
24030: PPUSH
24031: LD_VAR 0 1
24035: PPUSH
24036: CALL_OW 255
24040: PUSH
24041: LD_VAR 0 1
24045: PUSH
24046: LD_VAR 0 2
24050: PUSH
24051: LD_VAR 0 3
24055: PUSH
24056: EMPTY
24057: LIST
24058: LIST
24059: LIST
24060: LIST
24061: PPUSH
24062: CALL 69851 0 2
24066: ST_TO_ADDR
// UpdateFactoryWaypoints ;
24067: CALL 24076 0 0
// end ;
24071: LD_VAR 0 4
24075: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
24076: LD_INT 0
24078: PPUSH
24079: PPUSH
24080: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
24081: LD_STRING resetFactoryWaypoint();
24083: PPUSH
24084: CALL_OW 559
// if factoryWaypoints then
24088: LD_EXP 90
24092: IFFALSE 24213
// begin list := factoryWaypoints ;
24094: LD_ADDR_VAR 0 3
24098: PUSH
24099: LD_EXP 90
24103: ST_TO_ADDR
// for i := 1 to list do
24104: LD_ADDR_VAR 0 2
24108: PUSH
24109: DOUBLE
24110: LD_INT 1
24112: DEC
24113: ST_TO_ADDR
24114: LD_VAR 0 3
24118: PUSH
24119: FOR_TO
24120: IFFALSE 24211
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
24122: LD_STRING setFactoryWaypointXY(
24124: PUSH
24125: LD_VAR 0 3
24129: PUSH
24130: LD_VAR 0 2
24134: ARRAY
24135: PUSH
24136: LD_INT 1
24138: ARRAY
24139: STR
24140: PUSH
24141: LD_STRING ,
24143: STR
24144: PUSH
24145: LD_VAR 0 3
24149: PUSH
24150: LD_VAR 0 2
24154: ARRAY
24155: PUSH
24156: LD_INT 2
24158: ARRAY
24159: STR
24160: PUSH
24161: LD_STRING ,
24163: STR
24164: PUSH
24165: LD_VAR 0 3
24169: PUSH
24170: LD_VAR 0 2
24174: ARRAY
24175: PUSH
24176: LD_INT 3
24178: ARRAY
24179: STR
24180: PUSH
24181: LD_STRING ,
24183: STR
24184: PUSH
24185: LD_VAR 0 3
24189: PUSH
24190: LD_VAR 0 2
24194: ARRAY
24195: PUSH
24196: LD_INT 4
24198: ARRAY
24199: STR
24200: PUSH
24201: LD_STRING )
24203: STR
24204: PPUSH
24205: CALL_OW 559
24209: GO 24119
24211: POP
24212: POP
// end ; end ;
24213: LD_VAR 0 1
24217: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
24218: LD_INT 0
24220: PPUSH
// if HexInfo ( x , y ) = warehouse then
24221: LD_VAR 0 2
24225: PPUSH
24226: LD_VAR 0 3
24230: PPUSH
24231: CALL_OW 428
24235: PUSH
24236: LD_VAR 0 1
24240: EQUAL
24241: IFFALSE 24268
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
24243: LD_ADDR_EXP 92
24247: PUSH
24248: LD_EXP 92
24252: PPUSH
24253: LD_VAR 0 1
24257: PPUSH
24258: LD_INT 0
24260: PPUSH
24261: CALL_OW 1
24265: ST_TO_ADDR
24266: GO 24319
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
24268: LD_ADDR_EXP 92
24272: PUSH
24273: LD_EXP 92
24277: PPUSH
24278: LD_VAR 0 1
24282: PPUSH
24283: LD_VAR 0 1
24287: PPUSH
24288: CALL_OW 255
24292: PUSH
24293: LD_VAR 0 1
24297: PUSH
24298: LD_VAR 0 2
24302: PUSH
24303: LD_VAR 0 3
24307: PUSH
24308: EMPTY
24309: LIST
24310: LIST
24311: LIST
24312: LIST
24313: PPUSH
24314: CALL_OW 1
24318: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
24319: CALL 24328 0 0
// end ;
24323: LD_VAR 0 4
24327: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
24328: LD_INT 0
24330: PPUSH
24331: PPUSH
24332: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
24333: LD_STRING resetWarehouseGatheringPoints();
24335: PPUSH
24336: CALL_OW 559
// if warehouseGatheringPoints then
24340: LD_EXP 92
24344: IFFALSE 24470
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
24346: LD_ADDR_VAR 0 3
24350: PUSH
24351: LD_EXP 92
24355: PPUSH
24356: CALL 73785 0 1
24360: ST_TO_ADDR
// for i := 1 to list do
24361: LD_ADDR_VAR 0 2
24365: PUSH
24366: DOUBLE
24367: LD_INT 1
24369: DEC
24370: ST_TO_ADDR
24371: LD_VAR 0 3
24375: PUSH
24376: FOR_TO
24377: IFFALSE 24468
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
24379: LD_STRING setWarehouseGatheringPointXY(
24381: PUSH
24382: LD_VAR 0 3
24386: PUSH
24387: LD_VAR 0 2
24391: ARRAY
24392: PUSH
24393: LD_INT 1
24395: ARRAY
24396: STR
24397: PUSH
24398: LD_STRING ,
24400: STR
24401: PUSH
24402: LD_VAR 0 3
24406: PUSH
24407: LD_VAR 0 2
24411: ARRAY
24412: PUSH
24413: LD_INT 2
24415: ARRAY
24416: STR
24417: PUSH
24418: LD_STRING ,
24420: STR
24421: PUSH
24422: LD_VAR 0 3
24426: PUSH
24427: LD_VAR 0 2
24431: ARRAY
24432: PUSH
24433: LD_INT 3
24435: ARRAY
24436: STR
24437: PUSH
24438: LD_STRING ,
24440: STR
24441: PUSH
24442: LD_VAR 0 3
24446: PUSH
24447: LD_VAR 0 2
24451: ARRAY
24452: PUSH
24453: LD_INT 4
24455: ARRAY
24456: STR
24457: PUSH
24458: LD_STRING )
24460: STR
24461: PPUSH
24462: CALL_OW 559
24466: GO 24376
24468: POP
24469: POP
// end ; end ;
24470: LD_VAR 0 1
24474: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
24475: LD_EXP 92
24479: IFFALSE 25174
24481: GO 24483
24483: DISABLE
24484: LD_INT 0
24486: PPUSH
24487: PPUSH
24488: PPUSH
24489: PPUSH
24490: PPUSH
24491: PPUSH
24492: PPUSH
24493: PPUSH
24494: PPUSH
// begin enable ;
24495: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
24496: LD_ADDR_VAR 0 3
24500: PUSH
24501: LD_EXP 92
24505: PPUSH
24506: CALL 73785 0 1
24510: ST_TO_ADDR
// if not list then
24511: LD_VAR 0 3
24515: NOT
24516: IFFALSE 24520
// exit ;
24518: GO 25174
// for i := 1 to list do
24520: LD_ADDR_VAR 0 1
24524: PUSH
24525: DOUBLE
24526: LD_INT 1
24528: DEC
24529: ST_TO_ADDR
24530: LD_VAR 0 3
24534: PUSH
24535: FOR_TO
24536: IFFALSE 25172
// begin depot := list [ i ] [ 2 ] ;
24538: LD_ADDR_VAR 0 8
24542: PUSH
24543: LD_VAR 0 3
24547: PUSH
24548: LD_VAR 0 1
24552: ARRAY
24553: PUSH
24554: LD_INT 2
24556: ARRAY
24557: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
24558: LD_ADDR_VAR 0 5
24562: PUSH
24563: LD_VAR 0 3
24567: PUSH
24568: LD_VAR 0 1
24572: ARRAY
24573: PUSH
24574: LD_INT 1
24576: ARRAY
24577: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
24578: LD_VAR 0 8
24582: PPUSH
24583: CALL_OW 301
24587: IFTRUE 24606
24589: PUSH
24590: LD_VAR 0 5
24594: PUSH
24595: LD_VAR 0 8
24599: PPUSH
24600: CALL_OW 255
24604: NONEQUAL
24605: OR
24606: IFFALSE 24635
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
24608: LD_ADDR_EXP 92
24612: PUSH
24613: LD_EXP 92
24617: PPUSH
24618: LD_VAR 0 8
24622: PPUSH
24623: LD_INT 0
24625: PPUSH
24626: CALL_OW 1
24630: ST_TO_ADDR
// exit ;
24631: POP
24632: POP
24633: GO 25174
// end ; x := list [ i ] [ 3 ] ;
24635: LD_ADDR_VAR 0 6
24639: PUSH
24640: LD_VAR 0 3
24644: PUSH
24645: LD_VAR 0 1
24649: ARRAY
24650: PUSH
24651: LD_INT 3
24653: ARRAY
24654: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
24655: LD_ADDR_VAR 0 7
24659: PUSH
24660: LD_VAR 0 3
24664: PUSH
24665: LD_VAR 0 1
24669: ARRAY
24670: PUSH
24671: LD_INT 4
24673: ARRAY
24674: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
24675: LD_ADDR_VAR 0 9
24679: PUSH
24680: LD_VAR 0 6
24684: PPUSH
24685: LD_VAR 0 7
24689: PPUSH
24690: LD_INT 16
24692: PPUSH
24693: CALL 72359 0 3
24697: ST_TO_ADDR
// if not cratesNearbyPoint then
24698: LD_VAR 0 9
24702: NOT
24703: IFFALSE 24709
// exit ;
24705: POP
24706: POP
24707: GO 25174
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
24709: LD_ADDR_VAR 0 4
24713: PUSH
24714: LD_INT 22
24716: PUSH
24717: LD_VAR 0 5
24721: PUSH
24722: EMPTY
24723: LIST
24724: LIST
24725: PUSH
24726: LD_INT 3
24728: PUSH
24729: LD_INT 60
24731: PUSH
24732: EMPTY
24733: LIST
24734: PUSH
24735: EMPTY
24736: LIST
24737: LIST
24738: PUSH
24739: LD_INT 91
24741: PUSH
24742: LD_VAR 0 8
24746: PUSH
24747: LD_INT 6
24749: PUSH
24750: EMPTY
24751: LIST
24752: LIST
24753: LIST
24754: PUSH
24755: LD_INT 2
24757: PUSH
24758: LD_INT 25
24760: PUSH
24761: LD_INT 2
24763: PUSH
24764: EMPTY
24765: LIST
24766: LIST
24767: PUSH
24768: LD_INT 25
24770: PUSH
24771: LD_INT 16
24773: PUSH
24774: EMPTY
24775: LIST
24776: LIST
24777: PUSH
24778: EMPTY
24779: LIST
24780: LIST
24781: LIST
24782: PUSH
24783: EMPTY
24784: LIST
24785: LIST
24786: LIST
24787: LIST
24788: PPUSH
24789: CALL_OW 69
24793: PUSH
24794: LD_VAR 0 8
24798: PPUSH
24799: CALL_OW 313
24803: PPUSH
24804: LD_INT 3
24806: PUSH
24807: LD_INT 60
24809: PUSH
24810: EMPTY
24811: LIST
24812: PUSH
24813: EMPTY
24814: LIST
24815: LIST
24816: PUSH
24817: LD_INT 2
24819: PUSH
24820: LD_INT 25
24822: PUSH
24823: LD_INT 2
24825: PUSH
24826: EMPTY
24827: LIST
24828: LIST
24829: PUSH
24830: LD_INT 25
24832: PUSH
24833: LD_INT 16
24835: PUSH
24836: EMPTY
24837: LIST
24838: LIST
24839: PUSH
24840: EMPTY
24841: LIST
24842: LIST
24843: LIST
24844: PUSH
24845: EMPTY
24846: LIST
24847: LIST
24848: PPUSH
24849: CALL_OW 72
24853: UNION
24854: ST_TO_ADDR
// if tmp then
24855: LD_VAR 0 4
24859: IFFALSE 24939
// begin tmp := ShrinkArray ( tmp , 3 ) ;
24861: LD_ADDR_VAR 0 4
24865: PUSH
24866: LD_VAR 0 4
24870: PPUSH
24871: LD_INT 3
24873: PPUSH
24874: CALL 70166 0 2
24878: ST_TO_ADDR
// for j in tmp do
24879: LD_ADDR_VAR 0 2
24883: PUSH
24884: LD_VAR 0 4
24888: PUSH
24889: FOR_IN
24890: IFFALSE 24933
// begin if IsInUnit ( j ) then
24892: LD_VAR 0 2
24896: PPUSH
24897: CALL_OW 310
24901: IFFALSE 24912
// ComExit ( j ) ;
24903: LD_VAR 0 2
24907: PPUSH
24908: CALL 70249 0 1
// AddComCollect ( j , x , y ) ;
24912: LD_VAR 0 2
24916: PPUSH
24917: LD_VAR 0 6
24921: PPUSH
24922: LD_VAR 0 7
24926: PPUSH
24927: CALL_OW 177
// end ;
24931: GO 24889
24933: POP
24934: POP
// exit ;
24935: POP
24936: POP
24937: GO 25174
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
24939: LD_ADDR_VAR 0 4
24943: PUSH
24944: LD_INT 22
24946: PUSH
24947: LD_VAR 0 5
24951: PUSH
24952: EMPTY
24953: LIST
24954: LIST
24955: PUSH
24956: LD_INT 91
24958: PUSH
24959: LD_VAR 0 8
24963: PUSH
24964: LD_INT 8
24966: PUSH
24967: EMPTY
24968: LIST
24969: LIST
24970: LIST
24971: PUSH
24972: LD_INT 2
24974: PUSH
24975: LD_INT 34
24977: PUSH
24978: LD_INT 12
24980: PUSH
24981: EMPTY
24982: LIST
24983: LIST
24984: PUSH
24985: LD_INT 34
24987: PUSH
24988: LD_INT 51
24990: PUSH
24991: EMPTY
24992: LIST
24993: LIST
24994: PUSH
24995: LD_INT 34
24997: PUSH
24998: LD_INT 32
25000: PUSH
25001: EMPTY
25002: LIST
25003: LIST
25004: PUSH
25005: LD_INT 34
25007: PUSH
25008: LD_INT 89
25010: PUSH
25011: EMPTY
25012: LIST
25013: LIST
25014: PUSH
25015: EMPTY
25016: LIST
25017: LIST
25018: LIST
25019: LIST
25020: LIST
25021: PUSH
25022: EMPTY
25023: LIST
25024: LIST
25025: LIST
25026: PPUSH
25027: CALL_OW 69
25031: ST_TO_ADDR
// if tmp then
25032: LD_VAR 0 4
25036: IFFALSE 25170
// begin for j in tmp do
25038: LD_ADDR_VAR 0 2
25042: PUSH
25043: LD_VAR 0 4
25047: PUSH
25048: FOR_IN
25049: IFFALSE 25168
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
25051: LD_VAR 0 2
25055: PPUSH
25056: CALL_OW 262
25060: PUSH
25061: LD_INT 3
25063: EQUAL
25064: IFTRUE 25081
25066: PUSH
25067: LD_VAR 0 2
25071: PPUSH
25072: CALL_OW 261
25076: PUSH
25077: LD_INT 20
25079: GREATER
25080: OR
25081: IFFALSE 25095
25083: PUSH
25084: LD_VAR 0 2
25088: PPUSH
25089: CALL_OW 314
25093: NOT
25094: AND
25095: IFFALSE 25125
25097: PUSH
25098: LD_VAR 0 2
25102: PPUSH
25103: CALL_OW 263
25107: PUSH
25108: LD_INT 1
25110: NONEQUAL
25111: IFTRUE 25124
25113: PUSH
25114: LD_VAR 0 2
25118: PPUSH
25119: CALL_OW 311
25123: OR
25124: AND
25125: IFFALSE 25166
// begin ComCollect ( j , x , y ) ;
25127: LD_VAR 0 2
25131: PPUSH
25132: LD_VAR 0 6
25136: PPUSH
25137: LD_VAR 0 7
25141: PPUSH
25142: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
25146: LD_VAR 0 2
25150: PPUSH
25151: LD_VAR 0 8
25155: PPUSH
25156: CALL_OW 172
// exit ;
25160: POP
25161: POP
25162: POP
25163: POP
25164: GO 25174
// end ;
25166: GO 25048
25168: POP
25169: POP
// end ; end ;
25170: GO 24535
25172: POP
25173: POP
// end ; end_of_file
25174: PPOPN 9
25176: END
// export function SOS_UnitDestroyed ( un ) ; begin
25177: LD_INT 0
25179: PPUSH
// ComRadiation ( un ) ;
25180: LD_VAR 0 1
25184: PPUSH
25185: CALL 26347 0 1
// end ;
25189: LD_VAR 0 2
25193: RET
// export function SOS_UnitKamikazed ( un ) ; begin
25194: LD_INT 0
25196: PPUSH
// ComRadiation ( un ) ;
25197: LD_VAR 0 1
25201: PPUSH
25202: CALL 26347 0 1
// end ;
25206: LD_VAR 0 2
25210: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
25211: LD_INT 0
25213: PPUSH
// end ;
25214: LD_VAR 0 4
25218: RET
// export function SOS_Command ( cmd ) ; begin
25219: LD_INT 0
25221: PPUSH
// end ;
25222: LD_VAR 0 2
25226: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
25227: LD_INT 0
25229: PPUSH
// end ;
25230: LD_VAR 0 6
25234: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex , weapon ; begin
25235: LD_INT 0
25237: PPUSH
25238: PPUSH
25239: PPUSH
25240: PPUSH
25241: PPUSH
// if not vehicle or not factory then
25242: LD_VAR 0 1
25246: NOT
25247: IFTRUE 25256
25249: PUSH
25250: LD_VAR 0 2
25254: NOT
25255: OR
25256: IFFALSE 25260
// exit ;
25258: GO 25922
// weapon := GetWeapon ( vehicle ) ;
25260: LD_ADDR_VAR 0 7
25264: PUSH
25265: LD_VAR 0 1
25269: PPUSH
25270: CALL_OW 264
25274: ST_TO_ADDR
// if weapon = ar_miner then
25275: LD_VAR 0 7
25279: PUSH
25280: LD_INT 81
25282: EQUAL
25283: IFFALSE 25340
// begin minersList := Replace ( minersList , minersList + 1 , vehicle ) ;
25285: LD_ADDR_EXP 101
25289: PUSH
25290: LD_EXP 101
25294: PPUSH
25295: LD_EXP 101
25299: PUSH
25300: LD_INT 1
25302: PLUS
25303: PPUSH
25304: LD_VAR 0 1
25308: PPUSH
25309: CALL_OW 1
25313: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
25314: LD_ADDR_EXP 102
25318: PUSH
25319: LD_EXP 102
25323: PPUSH
25324: LD_EXP 102
25328: PUSH
25329: LD_INT 1
25331: PLUS
25332: PPUSH
25333: EMPTY
25334: PPUSH
25335: CALL_OW 1
25339: ST_TO_ADDR
// end ; if not factoryWaypoints then
25340: LD_EXP 90
25344: NOT
25345: IFFALSE 25349
// exit ;
25347: GO 25922
// for i := 1 to Count ( factoryWaypoints ) do
25349: LD_ADDR_VAR 0 4
25353: PUSH
25354: DOUBLE
25355: LD_INT 1
25357: DEC
25358: ST_TO_ADDR
25359: LD_EXP 90
25363: PPUSH
25364: CALL 33875 0 1
25368: PUSH
25369: FOR_TO
25370: IFFALSE 25920
// if factoryWaypoints [ i ] [ 2 ] = factory then
25372: LD_EXP 90
25376: PUSH
25377: LD_VAR 0 4
25381: ARRAY
25382: PUSH
25383: LD_INT 2
25385: ARRAY
25386: PUSH
25387: LD_VAR 0 2
25391: EQUAL
25392: IFFALSE 25918
// begin if GetControl ( vehicle ) = control_manual then
25394: LD_VAR 0 1
25398: PPUSH
25399: CALL_OW 263
25403: PUSH
25404: LD_INT 1
25406: EQUAL
25407: IFFALSE 25771
// begin driver := IsDrivenBy ( vehicle ) ;
25409: LD_ADDR_VAR 0 5
25413: PUSH
25414: LD_VAR 0 1
25418: PPUSH
25419: CALL_OW 311
25423: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
25424: LD_VAR 0 5
25428: PUSH
25429: LD_EXP 91
25433: IN
25434: IFTRUE 25448
25436: PUSH
25437: LD_VAR 0 1
25441: PUSH
25442: LD_EXP 91
25446: IN
25447: OR
25448: IFFALSE 25454
// exit ;
25450: POP
25451: POP
25452: GO 25922
// if not HasTask ( driver ) then
25454: LD_VAR 0 5
25458: PPUSH
25459: CALL_OW 314
25463: NOT
25464: IFFALSE 25769
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
25466: LD_ADDR_EXP 91
25470: PUSH
25471: LD_EXP 91
25475: PPUSH
25476: LD_VAR 0 5
25480: PPUSH
25481: CALL 69851 0 2
25485: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
25486: LD_ADDR_EXP 91
25490: PUSH
25491: LD_EXP 91
25495: PPUSH
25496: LD_VAR 0 1
25500: PPUSH
25501: CALL 69851 0 2
25505: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
25506: LD_ADDR_VAR 0 6
25510: PUSH
25511: LD_EXP 90
25515: PUSH
25516: LD_VAR 0 4
25520: ARRAY
25521: PUSH
25522: LD_INT 3
25524: ARRAY
25525: PPUSH
25526: LD_EXP 90
25530: PUSH
25531: LD_VAR 0 4
25535: ARRAY
25536: PUSH
25537: LD_INT 4
25539: ARRAY
25540: PPUSH
25541: CALL_OW 428
25545: ST_TO_ADDR
// if hex then
25546: LD_VAR 0 6
25550: IFFALSE 25568
// ComMoveUnit ( driver , hex ) else
25552: LD_VAR 0 5
25556: PPUSH
25557: LD_VAR 0 6
25561: PPUSH
25562: CALL_OW 112
25566: GO 25652
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
25568: LD_VAR 0 1
25572: PPUSH
25573: LD_EXP 90
25577: PUSH
25578: LD_VAR 0 4
25582: ARRAY
25583: PUSH
25584: LD_INT 3
25586: ARRAY
25587: PPUSH
25588: LD_EXP 90
25592: PUSH
25593: LD_VAR 0 4
25597: ARRAY
25598: PUSH
25599: LD_INT 4
25601: ARRAY
25602: PPUSH
25603: CALL_OW 297
25607: PUSH
25608: LD_INT 0
25610: GREATER
25611: IFFALSE 25652
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
25613: LD_VAR 0 5
25617: PPUSH
25618: LD_EXP 90
25622: PUSH
25623: LD_VAR 0 4
25627: ARRAY
25628: PUSH
25629: LD_INT 3
25631: ARRAY
25632: PPUSH
25633: LD_EXP 90
25637: PUSH
25638: LD_VAR 0 4
25642: ARRAY
25643: PUSH
25644: LD_INT 4
25646: ARRAY
25647: PPUSH
25648: CALL_OW 111
// AddComExitVehicle ( driver ) ;
25652: LD_VAR 0 5
25656: PPUSH
25657: CALL_OW 181
// if Multiplayer then
25661: LD_OWVAR 4
25665: IFFALSE 25714
// begin repeat wait ( 10 ) ;
25667: LD_INT 10
25669: PPUSH
25670: CALL_OW 67
// until not IsInUnit ( driver ) ;
25674: LD_VAR 0 5
25678: PPUSH
25679: CALL_OW 310
25683: NOT
25684: IFFALSE 25667
// if not HasTask ( driver ) then
25686: LD_VAR 0 5
25690: PPUSH
25691: CALL_OW 314
25695: NOT
25696: IFFALSE 25712
// ComEnterUnit ( driver , factory ) ;
25698: LD_VAR 0 5
25702: PPUSH
25703: LD_VAR 0 2
25707: PPUSH
25708: CALL_OW 120
// end else
25712: GO 25728
// AddComEnterUnit ( driver , factory ) ;
25714: LD_VAR 0 5
25718: PPUSH
25719: LD_VAR 0 2
25723: PPUSH
25724: CALL_OW 180
// wait ( 0 0$1 ) ;
25728: LD_INT 35
25730: PPUSH
25731: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
25735: LD_ADDR_EXP 91
25739: PUSH
25740: LD_EXP 91
25744: PUSH
25745: LD_VAR 0 5
25749: DIFF
25750: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
25751: LD_ADDR_EXP 91
25755: PUSH
25756: LD_EXP 91
25760: PUSH
25761: LD_VAR 0 1
25765: DIFF
25766: ST_TO_ADDR
// break ;
25767: GO 25920
// end ; end else
25769: GO 25918
// if GetControl ( vehicle ) = control_remote then
25771: LD_VAR 0 1
25775: PPUSH
25776: CALL_OW 263
25780: PUSH
25781: LD_INT 2
25783: EQUAL
25784: IFFALSE 25870
// begin wait ( 0 0$2 ) ;
25786: LD_INT 70
25788: PPUSH
25789: CALL_OW 67
// repeat wait ( 10 ) ;
25793: LD_INT 10
25795: PPUSH
25796: CALL_OW 67
// Connect ( vehicle ) ;
25800: LD_VAR 0 1
25804: PPUSH
25805: CALL 40153 0 1
// until IsControledBy ( vehicle ) ;
25809: LD_VAR 0 1
25813: PPUSH
25814: CALL_OW 312
25818: IFFALSE 25793
// wait ( 10 ) ;
25820: LD_INT 10
25822: PPUSH
25823: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
25827: LD_VAR 0 1
25831: PPUSH
25832: LD_EXP 90
25836: PUSH
25837: LD_VAR 0 4
25841: ARRAY
25842: PUSH
25843: LD_INT 3
25845: ARRAY
25846: PPUSH
25847: LD_EXP 90
25851: PUSH
25852: LD_VAR 0 4
25856: ARRAY
25857: PUSH
25858: LD_INT 4
25860: ARRAY
25861: PPUSH
25862: CALL_OW 111
// break ;
25866: GO 25920
// end else
25868: GO 25918
// begin wait ( 0 0$3 ) ;
25870: LD_INT 105
25872: PPUSH
25873: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
25877: LD_VAR 0 1
25881: PPUSH
25882: LD_EXP 90
25886: PUSH
25887: LD_VAR 0 4
25891: ARRAY
25892: PUSH
25893: LD_INT 3
25895: ARRAY
25896: PPUSH
25897: LD_EXP 90
25901: PUSH
25902: LD_VAR 0 4
25906: ARRAY
25907: PUSH
25908: LD_INT 4
25910: ARRAY
25911: PPUSH
25912: CALL_OW 111
// break ;
25916: GO 25920
// end ; end ;
25918: GO 25369
25920: POP
25921: POP
// end ;
25922: LD_VAR 0 3
25926: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
25927: LD_INT 0
25929: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
25930: LD_VAR 0 1
25934: PUSH
25935: LD_INT 250
25937: EQUAL
25938: IFFALSE 25955
25940: PUSH
25941: LD_VAR 0 2
25945: PPUSH
25946: CALL_OW 264
25950: PUSH
25951: LD_INT 81
25953: EQUAL
25954: AND
25955: IFFALSE 25976
// MinerPlaceMine ( unit , x , y ) ;
25957: LD_VAR 0 2
25961: PPUSH
25962: LD_VAR 0 4
25966: PPUSH
25967: LD_VAR 0 5
25971: PPUSH
25972: CALL 29322 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
25976: LD_VAR 0 1
25980: PUSH
25981: LD_INT 251
25983: EQUAL
25984: IFFALSE 26001
25986: PUSH
25987: LD_VAR 0 2
25991: PPUSH
25992: CALL_OW 264
25996: PUSH
25997: LD_INT 81
25999: EQUAL
26000: AND
26001: IFFALSE 26022
// MinerDetonateMine ( unit , x , y ) ;
26003: LD_VAR 0 2
26007: PPUSH
26008: LD_VAR 0 4
26012: PPUSH
26013: LD_VAR 0 5
26017: PPUSH
26018: CALL 29729 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
26022: LD_VAR 0 1
26026: PUSH
26027: LD_INT 252
26029: EQUAL
26030: IFFALSE 26047
26032: PUSH
26033: LD_VAR 0 2
26037: PPUSH
26038: CALL_OW 264
26042: PUSH
26043: LD_INT 81
26045: EQUAL
26046: AND
26047: IFFALSE 26068
// MinerCreateMinefield ( unit , x , y ) ;
26049: LD_VAR 0 2
26053: PPUSH
26054: LD_VAR 0 4
26058: PPUSH
26059: LD_VAR 0 5
26063: PPUSH
26064: CALL 29961 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
26068: LD_VAR 0 1
26072: PUSH
26073: LD_INT 253
26075: EQUAL
26076: IFFALSE 26093
26078: PUSH
26079: LD_VAR 0 2
26083: PPUSH
26084: CALL_OW 257
26088: PUSH
26089: LD_INT 5
26091: EQUAL
26092: AND
26093: IFFALSE 26114
// ComBinocular ( unit , x , y ) ;
26095: LD_VAR 0 2
26099: PPUSH
26100: LD_VAR 0 4
26104: PPUSH
26105: LD_VAR 0 5
26109: PPUSH
26110: CALL 30336 0 3
// if selectedUnit then
26114: LD_VAR 0 3
26118: IFFALSE 26178
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
26120: LD_VAR 0 1
26124: PUSH
26125: LD_INT 254
26127: EQUAL
26128: IFFALSE 26145
26130: PUSH
26131: LD_VAR 0 2
26135: PPUSH
26136: CALL_OW 264
26140: PUSH
26141: LD_INT 99
26143: EQUAL
26144: AND
26145: IFFALSE 26162
26147: PUSH
26148: LD_VAR 0 3
26152: PPUSH
26153: CALL_OW 263
26157: PUSH
26158: LD_INT 3
26160: EQUAL
26161: AND
26162: IFFALSE 26178
// HackDestroyVehicle ( unit , selectedUnit ) ;
26164: LD_VAR 0 2
26168: PPUSH
26169: LD_VAR 0 3
26173: PPUSH
26174: CALL 28512 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
26178: LD_VAR 0 1
26182: PUSH
26183: LD_INT 255
26185: EQUAL
26186: IFFALSE 26210
26188: PUSH
26189: LD_VAR 0 2
26193: PPUSH
26194: CALL_OW 264
26198: PUSH
26199: LD_INT 14
26201: PUSH
26202: LD_INT 53
26204: PUSH
26205: EMPTY
26206: LIST
26207: LIST
26208: IN
26209: AND
26210: IFFALSE 26228
26212: PUSH
26213: LD_VAR 0 4
26217: PPUSH
26218: LD_VAR 0 5
26222: PPUSH
26223: CALL_OW 488
26227: AND
26228: IFFALSE 26252
// CutTreeXYR ( unit , x , y , 12 ) ;
26230: LD_VAR 0 2
26234: PPUSH
26235: LD_VAR 0 4
26239: PPUSH
26240: LD_VAR 0 5
26244: PPUSH
26245: LD_INT 12
26247: PPUSH
26248: CALL 26443 0 4
// if cmd = 256 then
26252: LD_VAR 0 1
26256: PUSH
26257: LD_INT 256
26259: EQUAL
26260: IFFALSE 26281
// SetFactoryWaypoint ( unit , x , y ) ;
26262: LD_VAR 0 2
26266: PPUSH
26267: LD_VAR 0 4
26271: PPUSH
26272: LD_VAR 0 5
26276: PPUSH
26277: CALL 23722 0 3
// if cmd = 257 then
26281: LD_VAR 0 1
26285: PUSH
26286: LD_INT 257
26288: EQUAL
26289: IFFALSE 26310
// SetWarehouseGatheringPoint ( unit , x , y ) ;
26291: LD_VAR 0 2
26295: PPUSH
26296: LD_VAR 0 4
26300: PPUSH
26301: LD_VAR 0 5
26305: PPUSH
26306: CALL 24218 0 3
// if cmd = 258 then
26310: LD_VAR 0 1
26314: PUSH
26315: LD_INT 258
26317: EQUAL
26318: IFFALSE 26342
// BurnTreeXYR ( unit , x , y , 8 ) ;
26320: LD_VAR 0 2
26324: PPUSH
26325: LD_VAR 0 4
26329: PPUSH
26330: LD_VAR 0 5
26334: PPUSH
26335: LD_INT 8
26337: PPUSH
26338: CALL 26865 0 4
// end ;
26342: LD_VAR 0 6
26346: RET
// export function ComRadiation ( un ) ; var eff ; begin
26347: LD_INT 0
26349: PPUSH
26350: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
26351: LD_VAR 0 1
26355: PPUSH
26356: CALL_OW 264
26360: PUSH
26361: LD_INT 91
26363: NONEQUAL
26364: IFFALSE 26368
// exit ;
26366: GO 26438
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
26368: LD_INT 68
26370: PPUSH
26371: LD_VAR 0 1
26375: PPUSH
26376: CALL_OW 255
26380: PPUSH
26381: CALL_OW 321
26385: PUSH
26386: LD_INT 2
26388: EQUAL
26389: IFFALSE 26401
// eff := 50 else
26391: LD_ADDR_VAR 0 3
26395: PUSH
26396: LD_INT 50
26398: ST_TO_ADDR
26399: GO 26409
// eff := 25 ;
26401: LD_ADDR_VAR 0 3
26405: PUSH
26406: LD_INT 25
26408: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
26409: LD_VAR 0 1
26413: PPUSH
26414: CALL_OW 250
26418: PPUSH
26419: LD_VAR 0 1
26423: PPUSH
26424: CALL_OW 251
26428: PPUSH
26429: LD_VAR 0 3
26433: PPUSH
26434: CALL_OW 495
// end ;
26438: LD_VAR 0 2
26442: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
26443: LD_INT 0
26445: PPUSH
26446: PPUSH
26447: PPUSH
26448: PPUSH
26449: PPUSH
26450: PPUSH
26451: PPUSH
26452: PPUSH
26453: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
26454: LD_VAR 0 1
26458: PPUSH
26459: CALL_OW 302
26463: NOT
26464: IFTRUE 26483
26466: PUSH
26467: LD_VAR 0 2
26471: PPUSH
26472: LD_VAR 0 3
26476: PPUSH
26477: CALL_OW 488
26481: NOT
26482: OR
26483: IFTRUE 26492
26485: PUSH
26486: LD_VAR 0 4
26490: NOT
26491: OR
26492: IFFALSE 26496
// exit ;
26494: GO 26860
// if Count ( GetTaskList ( bulldozer ) ) > 10 then
26496: LD_VAR 0 1
26500: PPUSH
26501: CALL_OW 437
26505: PPUSH
26506: CALL 33875 0 1
26510: PUSH
26511: LD_INT 10
26513: GREATER
26514: IFFALSE 26518
// exit ;
26516: GO 26860
// list := [ ] ;
26518: LD_ADDR_VAR 0 13
26522: PUSH
26523: EMPTY
26524: ST_TO_ADDR
// if x - r < 0 then
26525: LD_VAR 0 2
26529: PUSH
26530: LD_VAR 0 4
26534: MINUS
26535: PUSH
26536: LD_INT 0
26538: LESS
26539: IFFALSE 26551
// min_x := 0 else
26541: LD_ADDR_VAR 0 7
26545: PUSH
26546: LD_INT 0
26548: ST_TO_ADDR
26549: GO 26567
// min_x := x - r ;
26551: LD_ADDR_VAR 0 7
26555: PUSH
26556: LD_VAR 0 2
26560: PUSH
26561: LD_VAR 0 4
26565: MINUS
26566: ST_TO_ADDR
// if y - r < 0 then
26567: LD_VAR 0 3
26571: PUSH
26572: LD_VAR 0 4
26576: MINUS
26577: PUSH
26578: LD_INT 0
26580: LESS
26581: IFFALSE 26593
// min_y := 0 else
26583: LD_ADDR_VAR 0 8
26587: PUSH
26588: LD_INT 0
26590: ST_TO_ADDR
26591: GO 26609
// min_y := y - r ;
26593: LD_ADDR_VAR 0 8
26597: PUSH
26598: LD_VAR 0 3
26602: PUSH
26603: LD_VAR 0 4
26607: MINUS
26608: ST_TO_ADDR
// max_x := x + r ;
26609: LD_ADDR_VAR 0 9
26613: PUSH
26614: LD_VAR 0 2
26618: PUSH
26619: LD_VAR 0 4
26623: PLUS
26624: ST_TO_ADDR
// max_y := y + r ;
26625: LD_ADDR_VAR 0 10
26629: PUSH
26630: LD_VAR 0 3
26634: PUSH
26635: LD_VAR 0 4
26639: PLUS
26640: ST_TO_ADDR
// for _x = min_x to max_x do
26641: LD_ADDR_VAR 0 11
26645: PUSH
26646: DOUBLE
26647: LD_VAR 0 7
26651: DEC
26652: ST_TO_ADDR
26653: LD_VAR 0 9
26657: PUSH
26658: FOR_TO
26659: IFFALSE 26778
// for _y = min_y to max_y do
26661: LD_ADDR_VAR 0 12
26665: PUSH
26666: DOUBLE
26667: LD_VAR 0 8
26671: DEC
26672: ST_TO_ADDR
26673: LD_VAR 0 10
26677: PUSH
26678: FOR_TO
26679: IFFALSE 26774
// begin if not ValidHex ( _x , _y ) then
26681: LD_VAR 0 11
26685: PPUSH
26686: LD_VAR 0 12
26690: PPUSH
26691: CALL_OW 488
26695: NOT
26696: IFFALSE 26700
// continue ;
26698: GO 26678
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
26700: LD_VAR 0 11
26704: PPUSH
26705: LD_VAR 0 12
26709: PPUSH
26710: CALL_OW 351
26714: IFFALSE 26732
26716: PUSH
26717: LD_VAR 0 11
26721: PPUSH
26722: LD_VAR 0 12
26726: PPUSH
26727: CALL_OW 554
26731: AND
26732: IFFALSE 26772
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
26734: LD_ADDR_VAR 0 13
26738: PUSH
26739: LD_VAR 0 13
26743: PPUSH
26744: LD_VAR 0 13
26748: PUSH
26749: LD_INT 1
26751: PLUS
26752: PPUSH
26753: LD_VAR 0 11
26757: PUSH
26758: LD_VAR 0 12
26762: PUSH
26763: EMPTY
26764: LIST
26765: LIST
26766: PPUSH
26767: CALL_OW 2
26771: ST_TO_ADDR
// end ;
26772: GO 26678
26774: POP
26775: POP
26776: GO 26658
26778: POP
26779: POP
// if not list then
26780: LD_VAR 0 13
26784: NOT
26785: IFFALSE 26789
// exit ;
26787: GO 26860
// for i in list do
26789: LD_ADDR_VAR 0 6
26793: PUSH
26794: LD_VAR 0 13
26798: PUSH
26799: FOR_IN
26800: IFFALSE 26858
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
26802: LD_VAR 0 1
26806: PPUSH
26807: LD_STRING M
26809: PUSH
26810: LD_VAR 0 6
26814: PUSH
26815: LD_INT 1
26817: ARRAY
26818: PUSH
26819: LD_VAR 0 6
26823: PUSH
26824: LD_INT 2
26826: ARRAY
26827: PUSH
26828: LD_INT 0
26830: PUSH
26831: LD_INT 0
26833: PUSH
26834: LD_INT 0
26836: PUSH
26837: LD_INT 0
26839: PUSH
26840: EMPTY
26841: LIST
26842: LIST
26843: LIST
26844: LIST
26845: LIST
26846: LIST
26847: LIST
26848: PUSH
26849: EMPTY
26850: LIST
26851: PPUSH
26852: CALL_OW 447
26856: GO 26799
26858: POP
26859: POP
// end ;
26860: LD_VAR 0 5
26864: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
26865: LD_INT 0
26867: PPUSH
26868: PPUSH
26869: PPUSH
26870: PPUSH
26871: PPUSH
26872: PPUSH
26873: PPUSH
26874: PPUSH
26875: PPUSH
26876: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
26877: LD_VAR 0 1
26881: PPUSH
26882: CALL_OW 302
26886: NOT
26887: IFTRUE 26906
26889: PUSH
26890: LD_VAR 0 2
26894: PPUSH
26895: LD_VAR 0 3
26899: PPUSH
26900: CALL_OW 488
26904: NOT
26905: OR
26906: IFTRUE 26915
26908: PUSH
26909: LD_VAR 0 4
26913: NOT
26914: OR
26915: IFFALSE 26919
// exit ;
26917: GO 27458
// if Count ( GetTaskList ( flame ) ) > 10 then
26919: LD_VAR 0 1
26923: PPUSH
26924: CALL_OW 437
26928: PPUSH
26929: CALL 33875 0 1
26933: PUSH
26934: LD_INT 10
26936: GREATER
26937: IFFALSE 26941
// exit ;
26939: GO 27458
// list := [ ] ;
26941: LD_ADDR_VAR 0 13
26945: PUSH
26946: EMPTY
26947: ST_TO_ADDR
// if x - r < 0 then
26948: LD_VAR 0 2
26952: PUSH
26953: LD_VAR 0 4
26957: MINUS
26958: PUSH
26959: LD_INT 0
26961: LESS
26962: IFFALSE 26974
// min_x := 0 else
26964: LD_ADDR_VAR 0 7
26968: PUSH
26969: LD_INT 0
26971: ST_TO_ADDR
26972: GO 26990
// min_x := x - r ;
26974: LD_ADDR_VAR 0 7
26978: PUSH
26979: LD_VAR 0 2
26983: PUSH
26984: LD_VAR 0 4
26988: MINUS
26989: ST_TO_ADDR
// if y - r < 0 then
26990: LD_VAR 0 3
26994: PUSH
26995: LD_VAR 0 4
26999: MINUS
27000: PUSH
27001: LD_INT 0
27003: LESS
27004: IFFALSE 27016
// min_y := 0 else
27006: LD_ADDR_VAR 0 8
27010: PUSH
27011: LD_INT 0
27013: ST_TO_ADDR
27014: GO 27032
// min_y := y - r ;
27016: LD_ADDR_VAR 0 8
27020: PUSH
27021: LD_VAR 0 3
27025: PUSH
27026: LD_VAR 0 4
27030: MINUS
27031: ST_TO_ADDR
// max_x := x + r ;
27032: LD_ADDR_VAR 0 9
27036: PUSH
27037: LD_VAR 0 2
27041: PUSH
27042: LD_VAR 0 4
27046: PLUS
27047: ST_TO_ADDR
// max_y := y + r ;
27048: LD_ADDR_VAR 0 10
27052: PUSH
27053: LD_VAR 0 3
27057: PUSH
27058: LD_VAR 0 4
27062: PLUS
27063: ST_TO_ADDR
// for _x = min_x to max_x do
27064: LD_ADDR_VAR 0 11
27068: PUSH
27069: DOUBLE
27070: LD_VAR 0 7
27074: DEC
27075: ST_TO_ADDR
27076: LD_VAR 0 9
27080: PUSH
27081: FOR_TO
27082: IFFALSE 27201
// for _y = min_y to max_y do
27084: LD_ADDR_VAR 0 12
27088: PUSH
27089: DOUBLE
27090: LD_VAR 0 8
27094: DEC
27095: ST_TO_ADDR
27096: LD_VAR 0 10
27100: PUSH
27101: FOR_TO
27102: IFFALSE 27197
// begin if not ValidHex ( _x , _y ) then
27104: LD_VAR 0 11
27108: PPUSH
27109: LD_VAR 0 12
27113: PPUSH
27114: CALL_OW 488
27118: NOT
27119: IFFALSE 27123
// continue ;
27121: GO 27101
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
27123: LD_VAR 0 11
27127: PPUSH
27128: LD_VAR 0 12
27132: PPUSH
27133: CALL_OW 351
27137: IFFALSE 27155
27139: PUSH
27140: LD_VAR 0 11
27144: PPUSH
27145: LD_VAR 0 12
27149: PPUSH
27150: CALL_OW 554
27154: AND
27155: IFFALSE 27195
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
27157: LD_ADDR_VAR 0 13
27161: PUSH
27162: LD_VAR 0 13
27166: PPUSH
27167: LD_VAR 0 13
27171: PUSH
27172: LD_INT 1
27174: PLUS
27175: PPUSH
27176: LD_VAR 0 11
27180: PUSH
27181: LD_VAR 0 12
27185: PUSH
27186: EMPTY
27187: LIST
27188: LIST
27189: PPUSH
27190: CALL_OW 2
27194: ST_TO_ADDR
// end ;
27195: GO 27101
27197: POP
27198: POP
27199: GO 27081
27201: POP
27202: POP
// if not list then
27203: LD_VAR 0 13
27207: NOT
27208: IFFALSE 27212
// exit ;
27210: GO 27458
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
27212: LD_ADDR_VAR 0 13
27216: PUSH
27217: LD_VAR 0 1
27221: PPUSH
27222: LD_VAR 0 13
27226: PPUSH
27227: LD_INT 1
27229: PPUSH
27230: LD_INT 1
27232: PPUSH
27233: CALL 37281 0 4
27237: ST_TO_ADDR
// ComStop ( flame ) ;
27238: LD_VAR 0 1
27242: PPUSH
27243: CALL_OW 141
// for i in list do
27247: LD_ADDR_VAR 0 6
27251: PUSH
27252: LD_VAR 0 13
27256: PUSH
27257: FOR_IN
27258: IFFALSE 27289
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
27260: LD_VAR 0 1
27264: PPUSH
27265: LD_VAR 0 6
27269: PUSH
27270: LD_INT 1
27272: ARRAY
27273: PPUSH
27274: LD_VAR 0 6
27278: PUSH
27279: LD_INT 2
27281: ARRAY
27282: PPUSH
27283: CALL_OW 176
27287: GO 27257
27289: POP
27290: POP
// repeat wait ( 0 0$1 ) ;
27291: LD_INT 35
27293: PPUSH
27294: CALL_OW 67
// task := GetTaskList ( flame ) ;
27298: LD_ADDR_VAR 0 14
27302: PUSH
27303: LD_VAR 0 1
27307: PPUSH
27308: CALL_OW 437
27312: ST_TO_ADDR
// if not task then
27313: LD_VAR 0 14
27317: NOT
27318: IFFALSE 27322
// exit ;
27320: GO 27458
// if task [ 1 ] [ 1 ] <> | then
27322: LD_VAR 0 14
27326: PUSH
27327: LD_INT 1
27329: ARRAY
27330: PUSH
27331: LD_INT 1
27333: ARRAY
27334: PUSH
27335: LD_STRING |
27337: NONEQUAL
27338: IFFALSE 27342
// exit ;
27340: GO 27458
// _x := task [ 1 ] [ 2 ] ;
27342: LD_ADDR_VAR 0 11
27346: PUSH
27347: LD_VAR 0 14
27351: PUSH
27352: LD_INT 1
27354: ARRAY
27355: PUSH
27356: LD_INT 2
27358: ARRAY
27359: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
27360: LD_ADDR_VAR 0 12
27364: PUSH
27365: LD_VAR 0 14
27369: PUSH
27370: LD_INT 1
27372: ARRAY
27373: PUSH
27374: LD_INT 3
27376: ARRAY
27377: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
27378: LD_VAR 0 11
27382: PPUSH
27383: LD_VAR 0 12
27387: PPUSH
27388: CALL_OW 351
27392: NOT
27393: IFTRUE 27412
27395: PUSH
27396: LD_VAR 0 11
27400: PPUSH
27401: LD_VAR 0 12
27405: PPUSH
27406: CALL_OW 554
27410: NOT
27411: OR
27412: IFFALSE 27446
// begin task := Delete ( task , 1 ) ;
27414: LD_ADDR_VAR 0 14
27418: PUSH
27419: LD_VAR 0 14
27423: PPUSH
27424: LD_INT 1
27426: PPUSH
27427: CALL_OW 3
27431: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
27432: LD_VAR 0 1
27436: PPUSH
27437: LD_VAR 0 14
27441: PPUSH
27442: CALL_OW 446
// end ; until not HasTask ( flame ) ;
27446: LD_VAR 0 1
27450: PPUSH
27451: CALL_OW 314
27455: NOT
27456: IFFALSE 27291
// end ;
27458: LD_VAR 0 5
27462: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
27463: LD_EXP 94
27467: NOT
27468: IFFALSE 27518
27470: GO 27472
27472: DISABLE
// begin initHack := true ;
27473: LD_ADDR_EXP 94
27477: PUSH
27478: LD_INT 1
27480: ST_TO_ADDR
// hackTanks := [ ] ;
27481: LD_ADDR_EXP 95
27485: PUSH
27486: EMPTY
27487: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
27488: LD_ADDR_EXP 96
27492: PUSH
27493: EMPTY
27494: ST_TO_ADDR
// hackLimit := 3 ;
27495: LD_ADDR_EXP 97
27499: PUSH
27500: LD_INT 3
27502: ST_TO_ADDR
// hackDist := 12 ;
27503: LD_ADDR_EXP 98
27507: PUSH
27508: LD_INT 12
27510: ST_TO_ADDR
// hackCounter := [ ] ;
27511: LD_ADDR_EXP 99
27515: PUSH
27516: EMPTY
27517: ST_TO_ADDR
// end ;
27518: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
27519: LD_EXP 94
27523: IFFALSE 27541
27525: PUSH
27526: LD_INT 34
27528: PUSH
27529: LD_INT 99
27531: PUSH
27532: EMPTY
27533: LIST
27534: LIST
27535: PPUSH
27536: CALL_OW 69
27540: AND
27541: IFFALSE 27794
27543: GO 27545
27545: DISABLE
27546: LD_INT 0
27548: PPUSH
27549: PPUSH
// begin enable ;
27550: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
27551: LD_ADDR_VAR 0 1
27555: PUSH
27556: LD_INT 34
27558: PUSH
27559: LD_INT 99
27561: PUSH
27562: EMPTY
27563: LIST
27564: LIST
27565: PPUSH
27566: CALL_OW 69
27570: PUSH
27571: FOR_IN
27572: IFFALSE 27792
// begin if not i in hackTanks then
27574: LD_VAR 0 1
27578: PUSH
27579: LD_EXP 95
27583: IN
27584: NOT
27585: IFFALSE 27668
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
27587: LD_ADDR_EXP 95
27591: PUSH
27592: LD_EXP 95
27596: PPUSH
27597: LD_EXP 95
27601: PUSH
27602: LD_INT 1
27604: PLUS
27605: PPUSH
27606: LD_VAR 0 1
27610: PPUSH
27611: CALL_OW 1
27615: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
27616: LD_ADDR_EXP 96
27620: PUSH
27621: LD_EXP 96
27625: PPUSH
27626: LD_EXP 96
27630: PUSH
27631: LD_INT 1
27633: PLUS
27634: PPUSH
27635: EMPTY
27636: PPUSH
27637: CALL_OW 1
27641: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
27642: LD_ADDR_EXP 99
27646: PUSH
27647: LD_EXP 99
27651: PPUSH
27652: LD_EXP 99
27656: PUSH
27657: LD_INT 1
27659: PLUS
27660: PPUSH
27661: EMPTY
27662: PPUSH
27663: CALL_OW 1
27667: ST_TO_ADDR
// end ; if not IsOk ( i ) then
27668: LD_VAR 0 1
27672: PPUSH
27673: CALL_OW 302
27677: NOT
27678: IFFALSE 27691
// begin HackUnlinkAll ( i ) ;
27680: LD_VAR 0 1
27684: PPUSH
27685: CALL 27797 0 1
// continue ;
27689: GO 27571
// end ; HackCheckCapturedStatus ( i ) ;
27691: LD_VAR 0 1
27695: PPUSH
27696: CALL 28242 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
27700: LD_ADDR_VAR 0 2
27704: PUSH
27705: LD_INT 81
27707: PUSH
27708: LD_VAR 0 1
27712: PPUSH
27713: CALL_OW 255
27717: PUSH
27718: EMPTY
27719: LIST
27720: LIST
27721: PUSH
27722: LD_INT 33
27724: PUSH
27725: LD_INT 3
27727: PUSH
27728: EMPTY
27729: LIST
27730: LIST
27731: PUSH
27732: LD_INT 91
27734: PUSH
27735: LD_VAR 0 1
27739: PUSH
27740: LD_EXP 98
27744: PUSH
27745: EMPTY
27746: LIST
27747: LIST
27748: LIST
27749: PUSH
27750: LD_INT 50
27752: PUSH
27753: EMPTY
27754: LIST
27755: PUSH
27756: EMPTY
27757: LIST
27758: LIST
27759: LIST
27760: LIST
27761: PPUSH
27762: CALL_OW 69
27766: ST_TO_ADDR
// if not tmp then
27767: LD_VAR 0 2
27771: NOT
27772: IFFALSE 27776
// continue ;
27774: GO 27571
// HackLink ( i , tmp ) ;
27776: LD_VAR 0 1
27780: PPUSH
27781: LD_VAR 0 2
27785: PPUSH
27786: CALL 27933 0 2
// end ;
27790: GO 27571
27792: POP
27793: POP
// end ;
27794: PPOPN 2
27796: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
27797: LD_INT 0
27799: PPUSH
27800: PPUSH
27801: PPUSH
// if not hack in hackTanks then
27802: LD_VAR 0 1
27806: PUSH
27807: LD_EXP 95
27811: IN
27812: NOT
27813: IFFALSE 27817
// exit ;
27815: GO 27928
// index := GetElementIndex ( hackTanks , hack ) ;
27817: LD_ADDR_VAR 0 4
27821: PUSH
27822: LD_EXP 95
27826: PPUSH
27827: LD_VAR 0 1
27831: PPUSH
27832: CALL 36576 0 2
27836: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
27837: LD_EXP 96
27841: PUSH
27842: LD_VAR 0 4
27846: ARRAY
27847: IFFALSE 27928
// begin for i in hackTanksCaptured [ index ] do
27849: LD_ADDR_VAR 0 3
27853: PUSH
27854: LD_EXP 96
27858: PUSH
27859: LD_VAR 0 4
27863: ARRAY
27864: PUSH
27865: FOR_IN
27866: IFFALSE 27892
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
27868: LD_VAR 0 3
27872: PUSH
27873: LD_INT 1
27875: ARRAY
27876: PPUSH
27877: LD_VAR 0 3
27881: PUSH
27882: LD_INT 2
27884: ARRAY
27885: PPUSH
27886: CALL_OW 235
27890: GO 27865
27892: POP
27893: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
27894: LD_ADDR_EXP 96
27898: PUSH
27899: LD_EXP 96
27903: PPUSH
27904: LD_VAR 0 4
27908: PPUSH
27909: EMPTY
27910: PPUSH
27911: CALL_OW 1
27915: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
27916: LD_VAR 0 1
27920: PPUSH
27921: LD_INT 0
27923: PPUSH
27924: CALL_OW 505
// end ; end ;
27928: LD_VAR 0 2
27932: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
27933: LD_INT 0
27935: PPUSH
27936: PPUSH
27937: PPUSH
// if not hack in hackTanks or not vehicles then
27938: LD_VAR 0 1
27942: PUSH
27943: LD_EXP 95
27947: IN
27948: NOT
27949: IFTRUE 27958
27951: PUSH
27952: LD_VAR 0 2
27956: NOT
27957: OR
27958: IFFALSE 27962
// exit ;
27960: GO 28237
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
27962: LD_ADDR_VAR 0 2
27966: PUSH
27967: LD_VAR 0 1
27971: PPUSH
27972: LD_VAR 0 2
27976: PPUSH
27977: LD_INT 1
27979: PPUSH
27980: LD_INT 1
27982: PPUSH
27983: CALL 37228 0 4
27987: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
27988: LD_ADDR_VAR 0 5
27992: PUSH
27993: LD_EXP 95
27997: PPUSH
27998: LD_VAR 0 1
28002: PPUSH
28003: CALL 36576 0 2
28007: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
28008: LD_EXP 96
28012: PUSH
28013: LD_VAR 0 5
28017: ARRAY
28018: PUSH
28019: LD_EXP 97
28023: LESS
28024: IFFALSE 28213
// begin for i := 1 to vehicles do
28026: LD_ADDR_VAR 0 4
28030: PUSH
28031: DOUBLE
28032: LD_INT 1
28034: DEC
28035: ST_TO_ADDR
28036: LD_VAR 0 2
28040: PUSH
28041: FOR_TO
28042: IFFALSE 28211
// begin if hackTanksCaptured [ index ] = hackLimit then
28044: LD_EXP 96
28048: PUSH
28049: LD_VAR 0 5
28053: ARRAY
28054: PUSH
28055: LD_EXP 97
28059: EQUAL
28060: IFFALSE 28064
// break ;
28062: GO 28211
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
28064: LD_ADDR_EXP 99
28068: PUSH
28069: LD_EXP 99
28073: PPUSH
28074: LD_VAR 0 5
28078: PPUSH
28079: LD_EXP 99
28083: PUSH
28084: LD_VAR 0 5
28088: ARRAY
28089: PUSH
28090: LD_INT 1
28092: PLUS
28093: PPUSH
28094: CALL_OW 1
28098: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
28099: LD_ADDR_EXP 96
28103: PUSH
28104: LD_EXP 96
28108: PPUSH
28109: LD_VAR 0 5
28113: PUSH
28114: LD_EXP 96
28118: PUSH
28119: LD_VAR 0 5
28123: ARRAY
28124: PUSH
28125: LD_INT 1
28127: PLUS
28128: PUSH
28129: EMPTY
28130: LIST
28131: LIST
28132: PPUSH
28133: LD_VAR 0 2
28137: PUSH
28138: LD_VAR 0 4
28142: ARRAY
28143: PUSH
28144: LD_VAR 0 2
28148: PUSH
28149: LD_VAR 0 4
28153: ARRAY
28154: PPUSH
28155: CALL_OW 255
28159: PUSH
28160: EMPTY
28161: LIST
28162: LIST
28163: PPUSH
28164: CALL 36793 0 3
28168: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
28169: LD_VAR 0 2
28173: PUSH
28174: LD_VAR 0 4
28178: ARRAY
28179: PPUSH
28180: LD_VAR 0 1
28184: PPUSH
28185: CALL_OW 255
28189: PPUSH
28190: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
28194: LD_VAR 0 2
28198: PUSH
28199: LD_VAR 0 4
28203: ARRAY
28204: PPUSH
28205: CALL_OW 141
// end ;
28209: GO 28041
28211: POP
28212: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
28213: LD_VAR 0 1
28217: PPUSH
28218: LD_EXP 96
28222: PUSH
28223: LD_VAR 0 5
28227: ARRAY
28228: PUSH
28229: LD_INT 0
28231: PLUS
28232: PPUSH
28233: CALL_OW 505
// end ;
28237: LD_VAR 0 3
28241: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
28242: LD_INT 0
28244: PPUSH
28245: PPUSH
28246: PPUSH
28247: PPUSH
// if not hack in hackTanks then
28248: LD_VAR 0 1
28252: PUSH
28253: LD_EXP 95
28257: IN
28258: NOT
28259: IFFALSE 28263
// exit ;
28261: GO 28507
// index := GetElementIndex ( hackTanks , hack ) ;
28263: LD_ADDR_VAR 0 4
28267: PUSH
28268: LD_EXP 95
28272: PPUSH
28273: LD_VAR 0 1
28277: PPUSH
28278: CALL 36576 0 2
28282: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
28283: LD_ADDR_VAR 0 3
28287: PUSH
28288: DOUBLE
28289: LD_EXP 96
28293: PUSH
28294: LD_VAR 0 4
28298: ARRAY
28299: INC
28300: ST_TO_ADDR
28301: LD_INT 1
28303: PUSH
28304: FOR_DOWNTO
28305: IFFALSE 28481
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
28307: LD_ADDR_VAR 0 5
28311: PUSH
28312: LD_EXP 96
28316: PUSH
28317: LD_VAR 0 4
28321: ARRAY
28322: PUSH
28323: LD_VAR 0 3
28327: ARRAY
28328: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
28329: LD_VAR 0 5
28333: PUSH
28334: LD_INT 1
28336: ARRAY
28337: PPUSH
28338: CALL_OW 302
28342: NOT
28343: IFTRUE 28371
28345: PUSH
28346: LD_VAR 0 5
28350: PUSH
28351: LD_INT 1
28353: ARRAY
28354: PPUSH
28355: CALL_OW 255
28359: PUSH
28360: LD_VAR 0 1
28364: PPUSH
28365: CALL_OW 255
28369: NONEQUAL
28370: OR
28371: IFFALSE 28479
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
28373: LD_VAR 0 5
28377: PUSH
28378: LD_INT 1
28380: ARRAY
28381: PPUSH
28382: CALL_OW 305
28386: IFFALSE 28414
28388: PUSH
28389: LD_VAR 0 5
28393: PUSH
28394: LD_INT 1
28396: ARRAY
28397: PPUSH
28398: CALL_OW 255
28402: PUSH
28403: LD_VAR 0 1
28407: PPUSH
28408: CALL_OW 255
28412: EQUAL
28413: AND
28414: IFFALSE 28438
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
28416: LD_VAR 0 5
28420: PUSH
28421: LD_INT 1
28423: ARRAY
28424: PPUSH
28425: LD_VAR 0 5
28429: PUSH
28430: LD_INT 2
28432: ARRAY
28433: PPUSH
28434: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
28438: LD_ADDR_EXP 96
28442: PUSH
28443: LD_EXP 96
28447: PPUSH
28448: LD_VAR 0 4
28452: PPUSH
28453: LD_EXP 96
28457: PUSH
28458: LD_VAR 0 4
28462: ARRAY
28463: PPUSH
28464: LD_VAR 0 3
28468: PPUSH
28469: CALL_OW 3
28473: PPUSH
28474: CALL_OW 1
28478: ST_TO_ADDR
// end ; end ;
28479: GO 28304
28481: POP
28482: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
28483: LD_VAR 0 1
28487: PPUSH
28488: LD_EXP 96
28492: PUSH
28493: LD_VAR 0 4
28497: ARRAY
28498: PUSH
28499: LD_INT 0
28501: PLUS
28502: PPUSH
28503: CALL_OW 505
// end ;
28507: LD_VAR 0 2
28511: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
28512: LD_INT 0
28514: PPUSH
28515: PPUSH
28516: PPUSH
28517: PPUSH
// if not hack in hackTanks then
28518: LD_VAR 0 1
28522: PUSH
28523: LD_EXP 95
28527: IN
28528: NOT
28529: IFFALSE 28533
// exit ;
28531: GO 28618
// index := GetElementIndex ( hackTanks , hack ) ;
28533: LD_ADDR_VAR 0 5
28537: PUSH
28538: LD_EXP 95
28542: PPUSH
28543: LD_VAR 0 1
28547: PPUSH
28548: CALL 36576 0 2
28552: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
28553: LD_ADDR_VAR 0 4
28557: PUSH
28558: DOUBLE
28559: LD_INT 1
28561: DEC
28562: ST_TO_ADDR
28563: LD_EXP 96
28567: PUSH
28568: LD_VAR 0 5
28572: ARRAY
28573: PUSH
28574: FOR_TO
28575: IFFALSE 28616
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
28577: LD_EXP 96
28581: PUSH
28582: LD_VAR 0 5
28586: ARRAY
28587: PUSH
28588: LD_VAR 0 4
28592: ARRAY
28593: PUSH
28594: LD_INT 1
28596: ARRAY
28597: PUSH
28598: LD_VAR 0 2
28602: EQUAL
28603: IFFALSE 28614
// KillUnit ( vehicle ) ;
28605: LD_VAR 0 2
28609: PPUSH
28610: CALL_OW 66
28614: GO 28574
28616: POP
28617: POP
// end ;
28618: LD_VAR 0 3
28622: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do var i ;
28623: LD_EXP 100
28627: NOT
28628: IFFALSE 28761
28630: GO 28632
28632: DISABLE
28633: LD_INT 0
28635: PPUSH
// begin initMiner := true ;
28636: LD_ADDR_EXP 100
28640: PUSH
28641: LD_INT 1
28643: ST_TO_ADDR
// minersList := [ ] ;
28644: LD_ADDR_EXP 101
28648: PUSH
28649: EMPTY
28650: ST_TO_ADDR
// minerMinesList := [ ] ;
28651: LD_ADDR_EXP 102
28655: PUSH
28656: EMPTY
28657: ST_TO_ADDR
// minesLimitPerVehicle := 10 ;
28658: LD_ADDR_EXP 103
28662: PUSH
28663: LD_INT 10
28665: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
28666: LD_ADDR_VAR 0 1
28670: PUSH
28671: LD_INT 34
28673: PUSH
28674: LD_INT 81
28676: PUSH
28677: EMPTY
28678: LIST
28679: LIST
28680: PPUSH
28681: CALL_OW 69
28685: PUSH
28686: FOR_IN
28687: IFFALSE 28759
// begin if not i in minersList then
28689: LD_VAR 0 1
28693: PUSH
28694: LD_EXP 101
28698: IN
28699: NOT
28700: IFFALSE 28757
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
28702: LD_ADDR_EXP 101
28706: PUSH
28707: LD_EXP 101
28711: PPUSH
28712: LD_EXP 101
28716: PUSH
28717: LD_INT 1
28719: PLUS
28720: PPUSH
28721: LD_VAR 0 1
28725: PPUSH
28726: CALL_OW 1
28730: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
28731: LD_ADDR_EXP 102
28735: PUSH
28736: LD_EXP 102
28740: PPUSH
28741: LD_EXP 102
28745: PUSH
28746: LD_INT 1
28748: PLUS
28749: PPUSH
28750: EMPTY
28751: PPUSH
28752: CALL_OW 1
28756: ST_TO_ADDR
// end end ;
28757: GO 28686
28759: POP
28760: POP
// end ;
28761: PPOPN 1
28763: END
// every 0 0$1 trigger initMiner and ( Count ( minerMinesList ) or FilterAllUnits ( [ f_weapon , ar_miner ] ) ) do var i , j , side , tmp ;
28764: LD_EXP 100
28768: IFFALSE 28799
28770: PUSH
28771: LD_EXP 102
28775: PPUSH
28776: CALL 33875 0 1
28780: IFTRUE 28798
28782: PUSH
28783: LD_INT 34
28785: PUSH
28786: LD_INT 81
28788: PUSH
28789: EMPTY
28790: LIST
28791: LIST
28792: PPUSH
28793: CALL_OW 69
28797: OR
28798: AND
28799: IFFALSE 29319
28801: GO 28803
28803: DISABLE
28804: LD_INT 0
28806: PPUSH
28807: PPUSH
28808: PPUSH
28809: PPUSH
// begin enable ;
28810: ENABLE
// for i := minerMinesList downto 1 do
28811: LD_ADDR_VAR 0 1
28815: PUSH
28816: DOUBLE
28817: LD_EXP 102
28821: INC
28822: ST_TO_ADDR
28823: LD_INT 1
28825: PUSH
28826: FOR_DOWNTO
28827: IFFALSE 29317
// begin side := GetSide ( minersList [ i ] ) ;
28829: LD_ADDR_VAR 0 3
28833: PUSH
28834: LD_EXP 101
28838: PUSH
28839: LD_VAR 0 1
28843: ARRAY
28844: PPUSH
28845: CALL_OW 255
28849: ST_TO_ADDR
// if IsLive ( minersList [ i ] ) and side in [ your_side , 9 ] then
28850: LD_EXP 101
28854: PUSH
28855: LD_VAR 0 1
28859: ARRAY
28860: PPUSH
28861: CALL_OW 300
28865: IFFALSE 28886
28867: PUSH
28868: LD_VAR 0 3
28872: PUSH
28873: LD_OWVAR 2
28877: PUSH
28878: LD_INT 9
28880: PUSH
28881: EMPTY
28882: LIST
28883: LIST
28884: IN
28885: AND
28886: IFFALSE 28919
// SetUnitDisplayNumber ( minersList [ i ] , Count ( minerMinesList [ i ] ) ) ;
28888: LD_EXP 101
28892: PUSH
28893: LD_VAR 0 1
28897: ARRAY
28898: PPUSH
28899: LD_EXP 102
28903: PUSH
28904: LD_VAR 0 1
28908: ARRAY
28909: PPUSH
28910: CALL 33875 0 1
28914: PPUSH
28915: CALL_OW 505
// if not minerMinesList [ i ] then
28919: LD_EXP 102
28923: PUSH
28924: LD_VAR 0 1
28928: ARRAY
28929: NOT
28930: IFFALSE 28934
// continue ;
28932: GO 28826
// for j := minerMinesList [ i ] downto 1 do
28934: LD_ADDR_VAR 0 2
28938: PUSH
28939: DOUBLE
28940: LD_EXP 102
28944: PUSH
28945: LD_VAR 0 1
28949: ARRAY
28950: INC
28951: ST_TO_ADDR
28952: LD_INT 1
28954: PUSH
28955: FOR_DOWNTO
28956: IFFALSE 29313
// begin if IsDead ( minersList [ i ] ) or not IsPlaced ( minersList [ i ] ) then
28958: LD_EXP 101
28962: PUSH
28963: LD_VAR 0 1
28967: ARRAY
28968: PPUSH
28969: CALL_OW 301
28973: IFTRUE 28993
28975: PUSH
28976: LD_EXP 101
28980: PUSH
28981: LD_VAR 0 1
28985: ARRAY
28986: PPUSH
28987: CALL_OW 305
28991: NOT
28992: OR
28993: IFFALSE 29084
// begin RemoveMineXY ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
28995: LD_EXP 102
28999: PUSH
29000: LD_VAR 0 1
29004: ARRAY
29005: PUSH
29006: LD_VAR 0 2
29010: ARRAY
29011: PUSH
29012: LD_INT 1
29014: ARRAY
29015: PPUSH
29016: LD_EXP 102
29020: PUSH
29021: LD_VAR 0 1
29025: ARRAY
29026: PUSH
29027: LD_VAR 0 2
29031: ARRAY
29032: PUSH
29033: LD_INT 2
29035: ARRAY
29036: PPUSH
29037: CALL_OW 612
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
29041: LD_ADDR_EXP 102
29045: PUSH
29046: LD_EXP 102
29050: PPUSH
29051: LD_VAR 0 1
29055: PPUSH
29056: LD_EXP 102
29060: PUSH
29061: LD_VAR 0 1
29065: ARRAY
29066: PPUSH
29067: LD_VAR 0 2
29071: PPUSH
29072: CALL_OW 3
29076: PPUSH
29077: CALL_OW 1
29081: ST_TO_ADDR
// continue ;
29082: GO 28955
// end ; tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
29084: LD_ADDR_VAR 0 4
29088: PUSH
29089: LD_EXP 102
29093: PUSH
29094: LD_VAR 0 1
29098: ARRAY
29099: PUSH
29100: LD_VAR 0 2
29104: ARRAY
29105: PUSH
29106: LD_INT 1
29108: ARRAY
29109: PPUSH
29110: LD_EXP 102
29114: PUSH
29115: LD_VAR 0 1
29119: ARRAY
29120: PUSH
29121: LD_VAR 0 2
29125: ARRAY
29126: PUSH
29127: LD_INT 2
29129: ARRAY
29130: PPUSH
29131: CALL_OW 428
29135: ST_TO_ADDR
// if not tmp then
29136: LD_VAR 0 4
29140: NOT
29141: IFFALSE 29145
// continue ;
29143: GO 28955
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
29145: LD_VAR 0 4
29149: PUSH
29150: LD_INT 81
29152: PUSH
29153: LD_VAR 0 3
29157: PUSH
29158: EMPTY
29159: LIST
29160: LIST
29161: PPUSH
29162: CALL_OW 69
29166: IN
29167: IFFALSE 29217
29169: PUSH
29170: LD_EXP 102
29174: PUSH
29175: LD_VAR 0 1
29179: ARRAY
29180: PUSH
29181: LD_VAR 0 2
29185: ARRAY
29186: PUSH
29187: LD_INT 1
29189: ARRAY
29190: PPUSH
29191: LD_EXP 102
29195: PUSH
29196: LD_VAR 0 1
29200: ARRAY
29201: PUSH
29202: LD_VAR 0 2
29206: ARRAY
29207: PUSH
29208: LD_INT 2
29210: ARRAY
29211: PPUSH
29212: CALL_OW 458
29216: AND
29217: IFFALSE 29311
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
29219: LD_EXP 102
29223: PUSH
29224: LD_VAR 0 1
29228: ARRAY
29229: PUSH
29230: LD_VAR 0 2
29234: ARRAY
29235: PUSH
29236: LD_INT 1
29238: ARRAY
29239: PPUSH
29240: LD_EXP 102
29244: PUSH
29245: LD_VAR 0 1
29249: ARRAY
29250: PUSH
29251: LD_VAR 0 2
29255: ARRAY
29256: PUSH
29257: LD_INT 2
29259: ARRAY
29260: PPUSH
29261: LD_VAR 0 3
29265: PPUSH
29266: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
29270: LD_ADDR_EXP 102
29274: PUSH
29275: LD_EXP 102
29279: PPUSH
29280: LD_VAR 0 1
29284: PPUSH
29285: LD_EXP 102
29289: PUSH
29290: LD_VAR 0 1
29294: ARRAY
29295: PPUSH
29296: LD_VAR 0 2
29300: PPUSH
29301: CALL_OW 3
29305: PPUSH
29306: CALL_OW 1
29310: ST_TO_ADDR
// end ; end ;
29311: GO 28955
29313: POP
29314: POP
// end ;
29315: GO 28826
29317: POP
29318: POP
// end ;
29319: PPOPN 4
29321: END
// export function MinerPlaceMine ( unit , x , y ) ; var index , side , i ; begin
29322: LD_INT 0
29324: PPUSH
29325: PPUSH
29326: PPUSH
29327: PPUSH
// result := false ;
29328: LD_ADDR_VAR 0 4
29332: PUSH
29333: LD_INT 0
29335: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
29336: LD_VAR 0 1
29340: PPUSH
29341: CALL_OW 264
29345: PUSH
29346: LD_INT 81
29348: EQUAL
29349: NOT
29350: IFFALSE 29354
// exit ;
29352: GO 29724
// side := GetSide ( unit ) ;
29354: LD_ADDR_VAR 0 6
29358: PUSH
29359: LD_VAR 0 1
29363: PPUSH
29364: CALL_OW 255
29368: ST_TO_ADDR
// index := GetElementIndex ( minersList , unit ) ;
29369: LD_ADDR_VAR 0 5
29373: PUSH
29374: LD_EXP 101
29378: PPUSH
29379: LD_VAR 0 1
29383: PPUSH
29384: CALL 36576 0 2
29388: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
29389: LD_EXP 102
29393: PUSH
29394: LD_VAR 0 5
29398: ARRAY
29399: PUSH
29400: LD_EXP 103
29404: GREATEREQUAL
29405: IFFALSE 29409
// exit ;
29407: GO 29724
// ComMoveXY ( unit , x , y ) ;
29409: LD_VAR 0 1
29413: PPUSH
29414: LD_VAR 0 2
29418: PPUSH
29419: LD_VAR 0 3
29423: PPUSH
29424: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
29428: LD_INT 35
29430: PPUSH
29431: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
29435: LD_VAR 0 1
29439: PPUSH
29440: LD_VAR 0 2
29444: PPUSH
29445: LD_VAR 0 3
29449: PPUSH
29450: CALL 68632 0 3
29454: NOT
29455: IFFALSE 29468
29457: PUSH
29458: LD_VAR 0 1
29462: PPUSH
29463: CALL_OW 314
29467: AND
29468: IFFALSE 29472
// exit ;
29470: GO 29724
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
29472: LD_VAR 0 2
29476: PPUSH
29477: LD_VAR 0 3
29481: PPUSH
29482: CALL_OW 428
29486: PUSH
29487: LD_VAR 0 1
29491: EQUAL
29492: IFFALSE 29506
29494: PUSH
29495: LD_VAR 0 1
29499: PPUSH
29500: CALL_OW 314
29504: NOT
29505: AND
29506: IFFALSE 29428
// if MineAtPos ( x , y ) then
29508: LD_VAR 0 2
29512: PPUSH
29513: LD_VAR 0 3
29517: PPUSH
29518: CALL_OW 458
29522: IFFALSE 29526
// exit ;
29524: GO 29724
// if your_side = side then
29526: LD_OWVAR 2
29530: PUSH
29531: LD_VAR 0 6
29535: EQUAL
29536: IFFALSE 29555
// PlaySoundXY ( x , y , PlantMine ) ;
29538: LD_VAR 0 2
29542: PPUSH
29543: LD_VAR 0 3
29547: PPUSH
29548: LD_STRING PlantMine
29550: PPUSH
29551: CALL_OW 366
// repeat wait ( 1 ) ;
29555: LD_INT 1
29557: PPUSH
29558: CALL_OW 67
// until PlaceMine ( x , y , side , 0 ) ;
29562: LD_VAR 0 2
29566: PPUSH
29567: LD_VAR 0 3
29571: PPUSH
29572: LD_VAR 0 6
29576: PPUSH
29577: LD_INT 0
29579: PPUSH
29580: CALL_OW 454
29584: IFFALSE 29555
// if MineAtPos ( x , y ) then
29586: LD_VAR 0 2
29590: PPUSH
29591: LD_VAR 0 3
29595: PPUSH
29596: CALL_OW 458
29600: IFFALSE 29716
// begin for i in minerMinesList [ index ] do
29602: LD_ADDR_VAR 0 7
29606: PUSH
29607: LD_EXP 102
29611: PUSH
29612: LD_VAR 0 5
29616: ARRAY
29617: PUSH
29618: FOR_IN
29619: IFFALSE 29661
// if i [ 1 ] = x and i [ 2 ] = y then
29621: LD_VAR 0 7
29625: PUSH
29626: LD_INT 1
29628: ARRAY
29629: PUSH
29630: LD_VAR 0 2
29634: EQUAL
29635: IFFALSE 29653
29637: PUSH
29638: LD_VAR 0 7
29642: PUSH
29643: LD_INT 2
29645: ARRAY
29646: PUSH
29647: LD_VAR 0 3
29651: EQUAL
29652: AND
29653: IFFALSE 29659
// exit ;
29655: POP
29656: POP
29657: GO 29724
29659: GO 29618
29661: POP
29662: POP
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
29663: LD_ADDR_EXP 102
29667: PUSH
29668: LD_EXP 102
29672: PPUSH
29673: LD_VAR 0 5
29677: PUSH
29678: LD_EXP 102
29682: PUSH
29683: LD_VAR 0 5
29687: ARRAY
29688: PUSH
29689: LD_INT 1
29691: PLUS
29692: PUSH
29693: EMPTY
29694: LIST
29695: LIST
29696: PPUSH
29697: LD_VAR 0 2
29701: PUSH
29702: LD_VAR 0 3
29706: PUSH
29707: EMPTY
29708: LIST
29709: LIST
29710: PPUSH
29711: CALL 36793 0 3
29715: ST_TO_ADDR
// end ; result := true ;
29716: LD_ADDR_VAR 0 4
29720: PUSH
29721: LD_INT 1
29723: ST_TO_ADDR
// end ;
29724: LD_VAR 0 4
29728: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
29729: LD_INT 0
29731: PPUSH
29732: PPUSH
29733: PPUSH
// if not unit in minersList then
29734: LD_VAR 0 1
29738: PUSH
29739: LD_EXP 101
29743: IN
29744: NOT
29745: IFFALSE 29749
// exit ;
29747: GO 29956
// index := GetElementIndex ( minersList , unit ) ;
29749: LD_ADDR_VAR 0 6
29753: PUSH
29754: LD_EXP 101
29758: PPUSH
29759: LD_VAR 0 1
29763: PPUSH
29764: CALL 36576 0 2
29768: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
29769: LD_ADDR_VAR 0 5
29773: PUSH
29774: DOUBLE
29775: LD_EXP 102
29779: PUSH
29780: LD_VAR 0 6
29784: ARRAY
29785: INC
29786: ST_TO_ADDR
29787: LD_INT 1
29789: PUSH
29790: FOR_DOWNTO
29791: IFFALSE 29954
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
29793: LD_EXP 102
29797: PUSH
29798: LD_VAR 0 6
29802: ARRAY
29803: PUSH
29804: LD_VAR 0 5
29808: ARRAY
29809: PUSH
29810: LD_INT 1
29812: ARRAY
29813: PPUSH
29814: LD_EXP 102
29818: PUSH
29819: LD_VAR 0 6
29823: ARRAY
29824: PUSH
29825: LD_VAR 0 5
29829: ARRAY
29830: PUSH
29831: LD_INT 2
29833: ARRAY
29834: PPUSH
29835: LD_VAR 0 2
29839: PPUSH
29840: LD_VAR 0 3
29844: PPUSH
29845: CALL_OW 298
29849: PUSH
29850: LD_INT 6
29852: LESS
29853: IFFALSE 29952
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
29855: LD_EXP 102
29859: PUSH
29860: LD_VAR 0 6
29864: ARRAY
29865: PUSH
29866: LD_VAR 0 5
29870: ARRAY
29871: PUSH
29872: LD_INT 1
29874: ARRAY
29875: PPUSH
29876: LD_EXP 102
29880: PUSH
29881: LD_VAR 0 6
29885: ARRAY
29886: PUSH
29887: LD_VAR 0 5
29891: ARRAY
29892: PUSH
29893: LD_INT 2
29895: ARRAY
29896: PPUSH
29897: LD_VAR 0 1
29901: PPUSH
29902: CALL_OW 255
29906: PPUSH
29907: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
29911: LD_ADDR_EXP 102
29915: PUSH
29916: LD_EXP 102
29920: PPUSH
29921: LD_VAR 0 6
29925: PPUSH
29926: LD_EXP 102
29930: PUSH
29931: LD_VAR 0 6
29935: ARRAY
29936: PPUSH
29937: LD_VAR 0 5
29941: PPUSH
29942: CALL_OW 3
29946: PPUSH
29947: CALL_OW 1
29951: ST_TO_ADDR
// end ; end ;
29952: GO 29790
29954: POP
29955: POP
// end ;
29956: LD_VAR 0 4
29960: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
29961: LD_INT 0
29963: PPUSH
29964: PPUSH
29965: PPUSH
29966: PPUSH
29967: PPUSH
29968: PPUSH
29969: PPUSH
29970: PPUSH
29971: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
29972: LD_VAR 0 1
29976: PPUSH
29977: CALL_OW 264
29981: PUSH
29982: LD_INT 81
29984: EQUAL
29985: NOT
29986: IFTRUE 30001
29988: PUSH
29989: LD_VAR 0 1
29993: PUSH
29994: LD_EXP 101
29998: IN
29999: NOT
30000: OR
30001: IFFALSE 30005
// exit ;
30003: GO 30331
// index := GetElementIndex ( minersList , unit ) ;
30005: LD_ADDR_VAR 0 6
30009: PUSH
30010: LD_EXP 101
30014: PPUSH
30015: LD_VAR 0 1
30019: PPUSH
30020: CALL 36576 0 2
30024: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
30025: LD_ADDR_VAR 0 8
30029: PUSH
30030: LD_EXP 103
30034: PUSH
30035: LD_EXP 102
30039: PUSH
30040: LD_VAR 0 6
30044: ARRAY
30045: MINUS
30046: ST_TO_ADDR
// if not minesFreeAmount then
30047: LD_VAR 0 8
30051: NOT
30052: IFFALSE 30056
// exit ;
30054: GO 30331
// tmp := [ ] ;
30056: LD_ADDR_VAR 0 7
30060: PUSH
30061: EMPTY
30062: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
30063: LD_ADDR_VAR 0 5
30067: PUSH
30068: DOUBLE
30069: LD_INT 1
30071: DEC
30072: ST_TO_ADDR
30073: LD_VAR 0 8
30077: PUSH
30078: FOR_TO
30079: IFFALSE 30278
// begin _d := rand ( 0 , 5 ) ;
30081: LD_ADDR_VAR 0 11
30085: PUSH
30086: LD_INT 0
30088: PPUSH
30089: LD_INT 5
30091: PPUSH
30092: CALL_OW 12
30096: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
30097: LD_ADDR_VAR 0 12
30101: PUSH
30102: LD_INT 2
30104: PPUSH
30105: LD_INT 6
30107: PPUSH
30108: CALL_OW 12
30112: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
30113: LD_ADDR_VAR 0 9
30117: PUSH
30118: LD_VAR 0 2
30122: PPUSH
30123: LD_VAR 0 11
30127: PPUSH
30128: LD_VAR 0 12
30132: PPUSH
30133: CALL_OW 272
30137: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
30138: LD_ADDR_VAR 0 10
30142: PUSH
30143: LD_VAR 0 3
30147: PPUSH
30148: LD_VAR 0 11
30152: PPUSH
30153: LD_VAR 0 12
30157: PPUSH
30158: CALL_OW 273
30162: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
30163: LD_VAR 0 9
30167: PPUSH
30168: LD_VAR 0 10
30172: PPUSH
30173: CALL_OW 488
30177: IFFALSE 30201
30179: PUSH
30180: LD_VAR 0 9
30184: PUSH
30185: LD_VAR 0 10
30189: PUSH
30190: EMPTY
30191: LIST
30192: LIST
30193: PUSH
30194: LD_VAR 0 7
30198: IN
30199: NOT
30200: AND
30201: IFFALSE 30220
30203: PUSH
30204: LD_VAR 0 9
30208: PPUSH
30209: LD_VAR 0 10
30213: PPUSH
30214: CALL_OW 458
30218: NOT
30219: AND
30220: IFFALSE 30262
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
30222: LD_ADDR_VAR 0 7
30226: PUSH
30227: LD_VAR 0 7
30231: PPUSH
30232: LD_VAR 0 7
30236: PUSH
30237: LD_INT 1
30239: PLUS
30240: PPUSH
30241: LD_VAR 0 9
30245: PUSH
30246: LD_VAR 0 10
30250: PUSH
30251: EMPTY
30252: LIST
30253: LIST
30254: PPUSH
30255: CALL_OW 1
30259: ST_TO_ADDR
30260: GO 30276
// i := i - 1 ;
30262: LD_ADDR_VAR 0 5
30266: PUSH
30267: LD_VAR 0 5
30271: PUSH
30272: LD_INT 1
30274: MINUS
30275: ST_TO_ADDR
// end ;
30276: GO 30078
30278: POP
30279: POP
// for i in tmp do
30280: LD_ADDR_VAR 0 5
30284: PUSH
30285: LD_VAR 0 7
30289: PUSH
30290: FOR_IN
30291: IFFALSE 30329
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
30293: LD_VAR 0 1
30297: PPUSH
30298: LD_VAR 0 5
30302: PUSH
30303: LD_INT 1
30305: ARRAY
30306: PPUSH
30307: LD_VAR 0 5
30311: PUSH
30312: LD_INT 2
30314: ARRAY
30315: PPUSH
30316: CALL 29322 0 3
30320: NOT
30321: IFFALSE 30327
// exit ;
30323: POP
30324: POP
30325: GO 30331
30327: GO 30290
30329: POP
30330: POP
// end ;
30331: LD_VAR 0 4
30335: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
30336: LD_INT 0
30338: PPUSH
30339: PPUSH
30340: PPUSH
30341: PPUSH
30342: PPUSH
30343: PPUSH
30344: PPUSH
30345: PPUSH
30346: PPUSH
// if GetClass ( unit ) <> class_sniper then
30347: LD_VAR 0 1
30351: PPUSH
30352: CALL_OW 257
30356: PUSH
30357: LD_INT 5
30359: NONEQUAL
30360: IFFALSE 30364
// exit ;
30362: GO 30834
// dist := 8 ;
30364: LD_ADDR_VAR 0 5
30368: PUSH
30369: LD_INT 8
30371: ST_TO_ADDR
// viewRange := 12 ;
30372: LD_ADDR_VAR 0 8
30376: PUSH
30377: LD_INT 12
30379: ST_TO_ADDR
// side := GetSide ( unit ) ;
30380: LD_ADDR_VAR 0 6
30384: PUSH
30385: LD_VAR 0 1
30389: PPUSH
30390: CALL_OW 255
30394: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
30395: LD_INT 61
30397: PPUSH
30398: LD_VAR 0 6
30402: PPUSH
30403: CALL_OW 321
30407: PUSH
30408: LD_INT 2
30410: EQUAL
30411: IFFALSE 30421
// viewRange := 16 ;
30413: LD_ADDR_VAR 0 8
30417: PUSH
30418: LD_INT 16
30420: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
30421: LD_VAR 0 1
30425: PPUSH
30426: LD_VAR 0 2
30430: PPUSH
30431: LD_VAR 0 3
30435: PPUSH
30436: CALL_OW 297
30440: PUSH
30441: LD_VAR 0 5
30445: GREATER
30446: IFFALSE 30525
// begin ComMoveXY ( unit , x , y ) ;
30448: LD_VAR 0 1
30452: PPUSH
30453: LD_VAR 0 2
30457: PPUSH
30458: LD_VAR 0 3
30462: PPUSH
30463: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
30467: LD_INT 35
30469: PPUSH
30470: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
30474: LD_VAR 0 1
30478: PPUSH
30479: LD_VAR 0 2
30483: PPUSH
30484: LD_VAR 0 3
30488: PPUSH
30489: CALL 68632 0 3
30493: NOT
30494: IFFALSE 30498
// exit ;
30496: GO 30834
// until GetDistUnitXY ( unit , x , y ) < dist ;
30498: LD_VAR 0 1
30502: PPUSH
30503: LD_VAR 0 2
30507: PPUSH
30508: LD_VAR 0 3
30512: PPUSH
30513: CALL_OW 297
30517: PUSH
30518: LD_VAR 0 5
30522: LESS
30523: IFFALSE 30467
// end ; ComTurnXY ( unit , x , y ) ;
30525: LD_VAR 0 1
30529: PPUSH
30530: LD_VAR 0 2
30534: PPUSH
30535: LD_VAR 0 3
30539: PPUSH
30540: CALL_OW 118
// repeat if Multiplayer then
30544: LD_OWVAR 4
30548: IFFALSE 30559
// wait ( 35 ) else
30550: LD_INT 35
30552: PPUSH
30553: CALL_OW 67
30557: GO 30566
// wait ( 5 ) ;
30559: LD_INT 5
30561: PPUSH
30562: CALL_OW 67
// _d := GetDir ( unit ) ;
30566: LD_ADDR_VAR 0 11
30570: PUSH
30571: LD_VAR 0 1
30575: PPUSH
30576: CALL_OW 254
30580: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
30581: LD_ADDR_VAR 0 7
30585: PUSH
30586: LD_VAR 0 1
30590: PPUSH
30591: CALL_OW 250
30595: PPUSH
30596: LD_VAR 0 1
30600: PPUSH
30601: CALL_OW 251
30605: PPUSH
30606: LD_VAR 0 2
30610: PPUSH
30611: LD_VAR 0 3
30615: PPUSH
30616: CALL 71268 0 4
30620: ST_TO_ADDR
// until dir = _d ;
30621: LD_VAR 0 7
30625: PUSH
30626: LD_VAR 0 11
30630: EQUAL
30631: IFFALSE 30544
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
30633: LD_ADDR_VAR 0 9
30637: PUSH
30638: LD_VAR 0 1
30642: PPUSH
30643: CALL_OW 250
30647: PPUSH
30648: LD_VAR 0 7
30652: PPUSH
30653: LD_VAR 0 5
30657: PPUSH
30658: CALL_OW 272
30662: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
30663: LD_ADDR_VAR 0 10
30667: PUSH
30668: LD_VAR 0 1
30672: PPUSH
30673: CALL_OW 251
30677: PPUSH
30678: LD_VAR 0 7
30682: PPUSH
30683: LD_VAR 0 5
30687: PPUSH
30688: CALL_OW 273
30692: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
30693: LD_VAR 0 9
30697: PPUSH
30698: LD_VAR 0 10
30702: PPUSH
30703: CALL_OW 488
30707: NOT
30708: IFFALSE 30712
// exit ;
30710: GO 30834
// ComAnimCustom ( unit , 1 ) ;
30712: LD_VAR 0 1
30716: PPUSH
30717: LD_INT 1
30719: PPUSH
30720: CALL_OW 592
// p := 0 ;
30724: LD_ADDR_VAR 0 12
30728: PUSH
30729: LD_INT 0
30731: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
30732: LD_VAR 0 9
30736: PPUSH
30737: LD_VAR 0 10
30741: PPUSH
30742: LD_VAR 0 6
30746: PPUSH
30747: LD_VAR 0 8
30751: PPUSH
30752: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
30756: LD_INT 35
30758: PPUSH
30759: CALL_OW 67
// p := Inc ( p ) ;
30763: LD_ADDR_VAR 0 12
30767: PUSH
30768: LD_VAR 0 12
30772: PPUSH
30773: CALL 71224 0 1
30777: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
30778: LD_VAR 0 12
30782: PUSH
30783: LD_INT 3
30785: EQUAL
30786: IFTRUE 30800
30788: PUSH
30789: LD_VAR 0 1
30793: PPUSH
30794: CALL_OW 302
30798: NOT
30799: OR
30800: IFTRUE 30813
30802: PUSH
30803: LD_VAR 0 1
30807: PPUSH
30808: CALL_OW 301
30812: OR
30813: IFFALSE 30756
// RemoveSeeing ( _x , _y , side ) ;
30815: LD_VAR 0 9
30819: PPUSH
30820: LD_VAR 0 10
30824: PPUSH
30825: LD_VAR 0 6
30829: PPUSH
30830: CALL_OW 331
// end ;
30834: LD_VAR 0 4
30838: RET
// function RevealDetectorMine ( unit ) ; var side , r , x , y , min_x , min_y , max_x , max_y , _x , _y ; begin
30839: LD_INT 0
30841: PPUSH
30842: PPUSH
30843: PPUSH
30844: PPUSH
30845: PPUSH
30846: PPUSH
30847: PPUSH
30848: PPUSH
30849: PPUSH
30850: PPUSH
30851: PPUSH
// if not unit then
30852: LD_VAR 0 1
30856: NOT
30857: IFFALSE 30861
// exit ;
30859: GO 31132
// side := GetSide ( unit ) ;
30861: LD_ADDR_VAR 0 3
30865: PUSH
30866: LD_VAR 0 1
30870: PPUSH
30871: CALL_OW 255
30875: ST_TO_ADDR
// x := GetX ( unit ) ;
30876: LD_ADDR_VAR 0 5
30880: PUSH
30881: LD_VAR 0 1
30885: PPUSH
30886: CALL_OW 250
30890: ST_TO_ADDR
// y := GetY ( unit ) ;
30891: LD_ADDR_VAR 0 6
30895: PUSH
30896: LD_VAR 0 1
30900: PPUSH
30901: CALL_OW 251
30905: ST_TO_ADDR
// r := 8 ;
30906: LD_ADDR_VAR 0 4
30910: PUSH
30911: LD_INT 8
30913: ST_TO_ADDR
// if x - r < 0 then
30914: LD_VAR 0 5
30918: PUSH
30919: LD_VAR 0 4
30923: MINUS
30924: PUSH
30925: LD_INT 0
30927: LESS
30928: IFFALSE 30940
// min_x := 0 else
30930: LD_ADDR_VAR 0 7
30934: PUSH
30935: LD_INT 0
30937: ST_TO_ADDR
30938: GO 30956
// min_x := x - r ;
30940: LD_ADDR_VAR 0 7
30944: PUSH
30945: LD_VAR 0 5
30949: PUSH
30950: LD_VAR 0 4
30954: MINUS
30955: ST_TO_ADDR
// if y - r < 0 then
30956: LD_VAR 0 6
30960: PUSH
30961: LD_VAR 0 4
30965: MINUS
30966: PUSH
30967: LD_INT 0
30969: LESS
30970: IFFALSE 30982
// min_y := 0 else
30972: LD_ADDR_VAR 0 8
30976: PUSH
30977: LD_INT 0
30979: ST_TO_ADDR
30980: GO 30998
// min_y := y - r ;
30982: LD_ADDR_VAR 0 8
30986: PUSH
30987: LD_VAR 0 6
30991: PUSH
30992: LD_VAR 0 4
30996: MINUS
30997: ST_TO_ADDR
// max_x := x + r ;
30998: LD_ADDR_VAR 0 9
31002: PUSH
31003: LD_VAR 0 5
31007: PUSH
31008: LD_VAR 0 4
31012: PLUS
31013: ST_TO_ADDR
// max_y := y + r ;
31014: LD_ADDR_VAR 0 10
31018: PUSH
31019: LD_VAR 0 6
31023: PUSH
31024: LD_VAR 0 4
31028: PLUS
31029: ST_TO_ADDR
// for _x = min_x to max_x do
31030: LD_ADDR_VAR 0 11
31034: PUSH
31035: DOUBLE
31036: LD_VAR 0 7
31040: DEC
31041: ST_TO_ADDR
31042: LD_VAR 0 9
31046: PUSH
31047: FOR_TO
31048: IFFALSE 31130
// for _y = min_y to max_y do
31050: LD_ADDR_VAR 0 12
31054: PUSH
31055: DOUBLE
31056: LD_VAR 0 8
31060: DEC
31061: ST_TO_ADDR
31062: LD_VAR 0 10
31066: PUSH
31067: FOR_TO
31068: IFFALSE 31126
// begin if not ValidHex ( _x , _y ) then
31070: LD_VAR 0 11
31074: PPUSH
31075: LD_VAR 0 12
31079: PPUSH
31080: CALL_OW 488
31084: NOT
31085: IFFALSE 31089
// continue ;
31087: GO 31067
// if MineAtPos ( _x , _y ) then
31089: LD_VAR 0 11
31093: PPUSH
31094: LD_VAR 0 12
31098: PPUSH
31099: CALL_OW 458
31103: IFFALSE 31124
// ViewMineAtPos ( _x , _y , side ) ;
31105: LD_VAR 0 11
31109: PPUSH
31110: LD_VAR 0 12
31114: PPUSH
31115: LD_VAR 0 3
31119: PPUSH
31120: CALL_OW 457
// end ;
31124: GO 31067
31126: POP
31127: POP
31128: GO 31047
31130: POP
31131: POP
// end ;
31132: LD_VAR 0 2
31136: RET
// function DetectMine ( units ) ; var i , x , y , scaners , timer , side ; begin
31137: LD_INT 0
31139: PPUSH
31140: PPUSH
31141: PPUSH
31142: PPUSH
31143: PPUSH
31144: PPUSH
31145: PPUSH
// if not units then
31146: LD_VAR 0 1
31150: NOT
31151: IFFALSE 31155
// exit ;
31153: GO 31619
// scaners := [ ] ;
31155: LD_ADDR_VAR 0 6
31159: PUSH
31160: EMPTY
31161: ST_TO_ADDR
// for i in units do
31162: LD_ADDR_VAR 0 3
31166: PUSH
31167: LD_VAR 0 1
31171: PUSH
31172: FOR_IN
31173: IFFALSE 31330
// begin if GetWeapon ( i ) <> us_radar or not IsOk ( i ) or GetTag ( i ) = tMineDetector then
31175: LD_VAR 0 3
31179: PPUSH
31180: CALL_OW 264
31184: PUSH
31185: LD_INT 11
31187: NONEQUAL
31188: IFTRUE 31202
31190: PUSH
31191: LD_VAR 0 3
31195: PPUSH
31196: CALL_OW 302
31200: NOT
31201: OR
31202: IFTRUE 31219
31204: PUSH
31205: LD_VAR 0 3
31209: PPUSH
31210: CALL_OW 110
31214: PUSH
31215: LD_INT 502
31217: EQUAL
31218: OR
31219: IFFALSE 31223
// continue ;
31221: GO 31172
// ComStop ( i ) ;
31223: LD_VAR 0 3
31227: PPUSH
31228: CALL_OW 141
// x := GetX ( i ) ;
31232: LD_ADDR_VAR 0 4
31236: PUSH
31237: LD_VAR 0 3
31241: PPUSH
31242: CALL_OW 250
31246: ST_TO_ADDR
// y := GetY ( i ) ;
31247: LD_ADDR_VAR 0 5
31251: PUSH
31252: LD_VAR 0 3
31256: PPUSH
31257: CALL_OW 251
31261: ST_TO_ADDR
// if GetSide ( i ) = your_side then
31262: LD_VAR 0 3
31266: PPUSH
31267: CALL_OW 255
31271: PUSH
31272: LD_OWVAR 2
31276: EQUAL
31277: IFFALSE 31296
// PlaySoundXY ( x , y , mineDetector ) ;
31279: LD_VAR 0 4
31283: PPUSH
31284: LD_VAR 0 5
31288: PPUSH
31289: LD_STRING mineDetector
31291: PPUSH
31292: CALL_OW 366
// scaners := Join ( scaners , i ) ;
31296: LD_ADDR_VAR 0 6
31300: PUSH
31301: LD_VAR 0 6
31305: PPUSH
31306: LD_VAR 0 3
31310: PPUSH
31311: CALL 69851 0 2
31315: ST_TO_ADDR
// SetTag ( i , tMineDetector ) ;
31316: LD_VAR 0 3
31320: PPUSH
31321: LD_INT 502
31323: PPUSH
31324: CALL_OW 109
// end ;
31328: GO 31172
31330: POP
31331: POP
// if not scaners then
31332: LD_VAR 0 6
31336: NOT
31337: IFFALSE 31341
// exit ;
31339: GO 31619
// wait ( 3 ) ;
31341: LD_INT 3
31343: PPUSH
31344: CALL_OW 67
// timer := 6 ;
31348: LD_ADDR_VAR 0 7
31352: PUSH
31353: LD_INT 6
31355: ST_TO_ADDR
// repeat for i in scaners do
31356: LD_ADDR_VAR 0 3
31360: PUSH
31361: LD_VAR 0 6
31365: PUSH
31366: FOR_IN
31367: IFFALSE 31517
// begin side := GetSide ( i ) ;
31369: LD_ADDR_VAR 0 8
31373: PUSH
31374: LD_VAR 0 3
31378: PPUSH
31379: CALL_OW 255
31383: ST_TO_ADDR
// if not IsOk ( i ) or HasTask ( i ) or ( GetControl ( i ) = control_manual and not IsDrivenBy ( i ) ) then
31384: LD_VAR 0 3
31388: PPUSH
31389: CALL_OW 302
31393: NOT
31394: IFTRUE 31407
31396: PUSH
31397: LD_VAR 0 3
31401: PPUSH
31402: CALL_OW 314
31406: OR
31407: IFTRUE 31438
31409: PUSH
31410: LD_VAR 0 3
31414: PPUSH
31415: CALL_OW 263
31419: PUSH
31420: LD_INT 1
31422: EQUAL
31423: IFFALSE 31437
31425: PUSH
31426: LD_VAR 0 3
31430: PPUSH
31431: CALL_OW 311
31435: NOT
31436: AND
31437: OR
31438: IFFALSE 31482
// begin SetUnitDisplayNumber ( i , 0 ) ;
31440: LD_VAR 0 3
31444: PPUSH
31445: LD_INT 0
31447: PPUSH
31448: CALL_OW 505
// SetTag ( i , 0 ) ;
31452: LD_VAR 0 3
31456: PPUSH
31457: LD_INT 0
31459: PPUSH
31460: CALL_OW 109
// scaners := scaners diff i ;
31464: LD_ADDR_VAR 0 6
31468: PUSH
31469: LD_VAR 0 6
31473: PUSH
31474: LD_VAR 0 3
31478: DIFF
31479: ST_TO_ADDR
// continue ;
31480: GO 31366
// end ; if side in [ your_side , 9 ] then
31482: LD_VAR 0 8
31486: PUSH
31487: LD_OWVAR 2
31491: PUSH
31492: LD_INT 9
31494: PUSH
31495: EMPTY
31496: LIST
31497: LIST
31498: IN
31499: IFFALSE 31515
// SetUnitDisplayNumber ( i , timer ) ;
31501: LD_VAR 0 3
31505: PPUSH
31506: LD_VAR 0 7
31510: PPUSH
31511: CALL_OW 505
// end ;
31515: GO 31366
31517: POP
31518: POP
// if not scaners then
31519: LD_VAR 0 6
31523: NOT
31524: IFFALSE 31528
// exit ;
31526: GO 31619
// timer := Dec ( timer ) ;
31528: LD_ADDR_VAR 0 7
31532: PUSH
31533: LD_VAR 0 7
31537: PPUSH
31538: CALL 71246 0 1
31542: ST_TO_ADDR
// wait ( 0 0$1 ) ;
31543: LD_INT 35
31545: PPUSH
31546: CALL_OW 67
// until timer = 0 ;
31550: LD_VAR 0 7
31554: PUSH
31555: LD_INT 0
31557: EQUAL
31558: IFFALSE 31356
// if not scaners then
31560: LD_VAR 0 6
31564: NOT
31565: IFFALSE 31569
// exit ;
31567: GO 31619
// for i in scaners do
31569: LD_ADDR_VAR 0 3
31573: PUSH
31574: LD_VAR 0 6
31578: PUSH
31579: FOR_IN
31580: IFFALSE 31617
// begin SetUnitDisplayNumber ( i , 0 ) ;
31582: LD_VAR 0 3
31586: PPUSH
31587: LD_INT 0
31589: PPUSH
31590: CALL_OW 505
// SetTag ( i , 0 ) ;
31594: LD_VAR 0 3
31598: PPUSH
31599: LD_INT 0
31601: PPUSH
31602: CALL_OW 109
// RevealDetectorMine ( i ) ;
31606: LD_VAR 0 3
31610: PPUSH
31611: CALL 30839 0 1
// end ;
31615: GO 31579
31617: POP
31618: POP
// end ;
31619: LD_VAR 0 2
31623: RET
// export function SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ; begin
31624: LD_INT 0
31626: PPUSH
// if p1 = mine_detector_mode then
31627: LD_VAR 0 2
31631: PUSH
31632: LD_INT 103
31634: EQUAL
31635: IFFALSE 31646
// DetectMine ( units ) ;
31637: LD_VAR 0 1
31641: PPUSH
31642: CALL 31137 0 1
// end ; end_of_file
31646: LD_VAR 0 7
31650: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
31651: LD_INT 0
31653: PPUSH
31654: PPUSH
// if exist_mode then
31655: LD_VAR 0 2
31659: IFFALSE 31705
// begin unit := CreateCharacter ( prefix & ident ) ;
31661: LD_ADDR_VAR 0 5
31665: PUSH
31666: LD_VAR 0 3
31670: PUSH
31671: LD_VAR 0 1
31675: STR
31676: PPUSH
31677: CALL_OW 34
31681: ST_TO_ADDR
// if unit then
31682: LD_VAR 0 5
31686: IFFALSE 31703
// DeleteCharacters ( prefix & ident ) ;
31688: LD_VAR 0 3
31692: PUSH
31693: LD_VAR 0 1
31697: STR
31698: PPUSH
31699: CALL_OW 40
// end else
31703: GO 31720
// unit := NewCharacter ( ident ) ;
31705: LD_ADDR_VAR 0 5
31709: PUSH
31710: LD_VAR 0 1
31714: PPUSH
31715: CALL_OW 25
31719: ST_TO_ADDR
// result := unit ;
31720: LD_ADDR_VAR 0 4
31724: PUSH
31725: LD_VAR 0 5
31729: ST_TO_ADDR
// end ;
31730: LD_VAR 0 4
31734: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
31735: LD_INT 0
31737: PPUSH
31738: PPUSH
// if exist_mode then
31739: LD_VAR 0 2
31743: IFFALSE 31768
// unit := CreateCharacter ( prefix & ident ) else
31745: LD_ADDR_VAR 0 5
31749: PUSH
31750: LD_VAR 0 3
31754: PUSH
31755: LD_VAR 0 1
31759: STR
31760: PPUSH
31761: CALL_OW 34
31765: ST_TO_ADDR
31766: GO 31783
// unit := NewCharacter ( ident ) ;
31768: LD_ADDR_VAR 0 5
31772: PUSH
31773: LD_VAR 0 1
31777: PPUSH
31778: CALL_OW 25
31782: ST_TO_ADDR
// result := unit ;
31783: LD_ADDR_VAR 0 4
31787: PUSH
31788: LD_VAR 0 5
31792: ST_TO_ADDR
// end ;
31793: LD_VAR 0 4
31797: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
31798: LD_INT 0
31800: PPUSH
31801: PPUSH
// if not side or not nation then
31802: LD_VAR 0 1
31806: NOT
31807: IFTRUE 31816
31809: PUSH
31810: LD_VAR 0 2
31814: NOT
31815: OR
31816: IFFALSE 31820
// exit ;
31818: GO 32614
// case nation of nation_american :
31820: LD_VAR 0 2
31824: PUSH
31825: LD_INT 1
31827: DOUBLE
31828: EQUAL
31829: IFTRUE 31833
31831: GO 32055
31833: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 , 90 , 93 ] ; nation_arabian :
31834: LD_ADDR_VAR 0 4
31838: PUSH
31839: LD_INT 35
31841: PUSH
31842: LD_INT 45
31844: PUSH
31845: LD_INT 46
31847: PUSH
31848: LD_INT 47
31850: PUSH
31851: LD_INT 82
31853: PUSH
31854: LD_INT 83
31856: PUSH
31857: LD_INT 84
31859: PUSH
31860: LD_INT 85
31862: PUSH
31863: LD_INT 86
31865: PUSH
31866: LD_INT 1
31868: PUSH
31869: LD_INT 2
31871: PUSH
31872: LD_INT 6
31874: PUSH
31875: LD_INT 15
31877: PUSH
31878: LD_INT 16
31880: PUSH
31881: LD_INT 7
31883: PUSH
31884: LD_INT 12
31886: PUSH
31887: LD_INT 13
31889: PUSH
31890: LD_INT 10
31892: PUSH
31893: LD_INT 14
31895: PUSH
31896: LD_INT 20
31898: PUSH
31899: LD_INT 21
31901: PUSH
31902: LD_INT 22
31904: PUSH
31905: LD_INT 25
31907: PUSH
31908: LD_INT 32
31910: PUSH
31911: LD_INT 27
31913: PUSH
31914: LD_INT 36
31916: PUSH
31917: LD_INT 69
31919: PUSH
31920: LD_INT 39
31922: PUSH
31923: LD_INT 34
31925: PUSH
31926: LD_INT 40
31928: PUSH
31929: LD_INT 48
31931: PUSH
31932: LD_INT 49
31934: PUSH
31935: LD_INT 50
31937: PUSH
31938: LD_INT 51
31940: PUSH
31941: LD_INT 52
31943: PUSH
31944: LD_INT 53
31946: PUSH
31947: LD_INT 54
31949: PUSH
31950: LD_INT 55
31952: PUSH
31953: LD_INT 56
31955: PUSH
31956: LD_INT 57
31958: PUSH
31959: LD_INT 58
31961: PUSH
31962: LD_INT 59
31964: PUSH
31965: LD_INT 60
31967: PUSH
31968: LD_INT 61
31970: PUSH
31971: LD_INT 62
31973: PUSH
31974: LD_INT 80
31976: PUSH
31977: LD_INT 82
31979: PUSH
31980: LD_INT 83
31982: PUSH
31983: LD_INT 84
31985: PUSH
31986: LD_INT 85
31988: PUSH
31989: LD_INT 86
31991: PUSH
31992: LD_INT 90
31994: PUSH
31995: LD_INT 93
31997: PUSH
31998: EMPTY
31999: LIST
32000: LIST
32001: LIST
32002: LIST
32003: LIST
32004: LIST
32005: LIST
32006: LIST
32007: LIST
32008: LIST
32009: LIST
32010: LIST
32011: LIST
32012: LIST
32013: LIST
32014: LIST
32015: LIST
32016: LIST
32017: LIST
32018: LIST
32019: LIST
32020: LIST
32021: LIST
32022: LIST
32023: LIST
32024: LIST
32025: LIST
32026: LIST
32027: LIST
32028: LIST
32029: LIST
32030: LIST
32031: LIST
32032: LIST
32033: LIST
32034: LIST
32035: LIST
32036: LIST
32037: LIST
32038: LIST
32039: LIST
32040: LIST
32041: LIST
32042: LIST
32043: LIST
32044: LIST
32045: LIST
32046: LIST
32047: LIST
32048: LIST
32049: LIST
32050: LIST
32051: LIST
32052: ST_TO_ADDR
32053: GO 32536
32055: LD_INT 2
32057: DOUBLE
32058: EQUAL
32059: IFTRUE 32063
32061: GO 32297
32063: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 , 92 , 94 ] ; nation_russian :
32064: LD_ADDR_VAR 0 4
32068: PUSH
32069: LD_INT 35
32071: PUSH
32072: LD_INT 45
32074: PUSH
32075: LD_INT 46
32077: PUSH
32078: LD_INT 47
32080: PUSH
32081: LD_INT 82
32083: PUSH
32084: LD_INT 83
32086: PUSH
32087: LD_INT 84
32089: PUSH
32090: LD_INT 85
32092: PUSH
32093: LD_INT 87
32095: PUSH
32096: LD_INT 70
32098: PUSH
32099: LD_INT 1
32101: PUSH
32102: LD_INT 11
32104: PUSH
32105: LD_INT 3
32107: PUSH
32108: LD_INT 4
32110: PUSH
32111: LD_INT 5
32113: PUSH
32114: LD_INT 6
32116: PUSH
32117: LD_INT 15
32119: PUSH
32120: LD_INT 18
32122: PUSH
32123: LD_INT 7
32125: PUSH
32126: LD_INT 17
32128: PUSH
32129: LD_INT 8
32131: PUSH
32132: LD_INT 20
32134: PUSH
32135: LD_INT 21
32137: PUSH
32138: LD_INT 22
32140: PUSH
32141: LD_INT 72
32143: PUSH
32144: LD_INT 26
32146: PUSH
32147: LD_INT 69
32149: PUSH
32150: LD_INT 39
32152: PUSH
32153: LD_INT 40
32155: PUSH
32156: LD_INT 41
32158: PUSH
32159: LD_INT 42
32161: PUSH
32162: LD_INT 43
32164: PUSH
32165: LD_INT 48
32167: PUSH
32168: LD_INT 49
32170: PUSH
32171: LD_INT 50
32173: PUSH
32174: LD_INT 51
32176: PUSH
32177: LD_INT 52
32179: PUSH
32180: LD_INT 53
32182: PUSH
32183: LD_INT 54
32185: PUSH
32186: LD_INT 55
32188: PUSH
32189: LD_INT 56
32191: PUSH
32192: LD_INT 60
32194: PUSH
32195: LD_INT 61
32197: PUSH
32198: LD_INT 62
32200: PUSH
32201: LD_INT 66
32203: PUSH
32204: LD_INT 67
32206: PUSH
32207: LD_INT 68
32209: PUSH
32210: LD_INT 81
32212: PUSH
32213: LD_INT 82
32215: PUSH
32216: LD_INT 83
32218: PUSH
32219: LD_INT 84
32221: PUSH
32222: LD_INT 85
32224: PUSH
32225: LD_INT 87
32227: PUSH
32228: LD_INT 88
32230: PUSH
32231: LD_INT 92
32233: PUSH
32234: LD_INT 94
32236: PUSH
32237: EMPTY
32238: LIST
32239: LIST
32240: LIST
32241: LIST
32242: LIST
32243: LIST
32244: LIST
32245: LIST
32246: LIST
32247: LIST
32248: LIST
32249: LIST
32250: LIST
32251: LIST
32252: LIST
32253: LIST
32254: LIST
32255: LIST
32256: LIST
32257: LIST
32258: LIST
32259: LIST
32260: LIST
32261: LIST
32262: LIST
32263: LIST
32264: LIST
32265: LIST
32266: LIST
32267: LIST
32268: LIST
32269: LIST
32270: LIST
32271: LIST
32272: LIST
32273: LIST
32274: LIST
32275: LIST
32276: LIST
32277: LIST
32278: LIST
32279: LIST
32280: LIST
32281: LIST
32282: LIST
32283: LIST
32284: LIST
32285: LIST
32286: LIST
32287: LIST
32288: LIST
32289: LIST
32290: LIST
32291: LIST
32292: LIST
32293: LIST
32294: ST_TO_ADDR
32295: GO 32536
32297: LD_INT 3
32299: DOUBLE
32300: EQUAL
32301: IFTRUE 32305
32303: GO 32535
32305: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 , 89 , 91 ] ; end ;
32306: LD_ADDR_VAR 0 4
32310: PUSH
32311: LD_INT 46
32313: PUSH
32314: LD_INT 47
32316: PUSH
32317: LD_INT 1
32319: PUSH
32320: LD_INT 2
32322: PUSH
32323: LD_INT 82
32325: PUSH
32326: LD_INT 83
32328: PUSH
32329: LD_INT 84
32331: PUSH
32332: LD_INT 85
32334: PUSH
32335: LD_INT 86
32337: PUSH
32338: LD_INT 11
32340: PUSH
32341: LD_INT 9
32343: PUSH
32344: LD_INT 20
32346: PUSH
32347: LD_INT 19
32349: PUSH
32350: LD_INT 21
32352: PUSH
32353: LD_INT 24
32355: PUSH
32356: LD_INT 22
32358: PUSH
32359: LD_INT 25
32361: PUSH
32362: LD_INT 28
32364: PUSH
32365: LD_INT 29
32367: PUSH
32368: LD_INT 30
32370: PUSH
32371: LD_INT 31
32373: PUSH
32374: LD_INT 37
32376: PUSH
32377: LD_INT 38
32379: PUSH
32380: LD_INT 32
32382: PUSH
32383: LD_INT 27
32385: PUSH
32386: LD_INT 33
32388: PUSH
32389: LD_INT 69
32391: PUSH
32392: LD_INT 39
32394: PUSH
32395: LD_INT 34
32397: PUSH
32398: LD_INT 40
32400: PUSH
32401: LD_INT 71
32403: PUSH
32404: LD_INT 23
32406: PUSH
32407: LD_INT 44
32409: PUSH
32410: LD_INT 48
32412: PUSH
32413: LD_INT 49
32415: PUSH
32416: LD_INT 50
32418: PUSH
32419: LD_INT 51
32421: PUSH
32422: LD_INT 52
32424: PUSH
32425: LD_INT 53
32427: PUSH
32428: LD_INT 54
32430: PUSH
32431: LD_INT 55
32433: PUSH
32434: LD_INT 56
32436: PUSH
32437: LD_INT 57
32439: PUSH
32440: LD_INT 58
32442: PUSH
32443: LD_INT 59
32445: PUSH
32446: LD_INT 63
32448: PUSH
32449: LD_INT 64
32451: PUSH
32452: LD_INT 65
32454: PUSH
32455: LD_INT 82
32457: PUSH
32458: LD_INT 83
32460: PUSH
32461: LD_INT 84
32463: PUSH
32464: LD_INT 85
32466: PUSH
32467: LD_INT 86
32469: PUSH
32470: LD_INT 89
32472: PUSH
32473: LD_INT 91
32475: PUSH
32476: EMPTY
32477: LIST
32478: LIST
32479: LIST
32480: LIST
32481: LIST
32482: LIST
32483: LIST
32484: LIST
32485: LIST
32486: LIST
32487: LIST
32488: LIST
32489: LIST
32490: LIST
32491: LIST
32492: LIST
32493: LIST
32494: LIST
32495: LIST
32496: LIST
32497: LIST
32498: LIST
32499: LIST
32500: LIST
32501: LIST
32502: LIST
32503: LIST
32504: LIST
32505: LIST
32506: LIST
32507: LIST
32508: LIST
32509: LIST
32510: LIST
32511: LIST
32512: LIST
32513: LIST
32514: LIST
32515: LIST
32516: LIST
32517: LIST
32518: LIST
32519: LIST
32520: LIST
32521: LIST
32522: LIST
32523: LIST
32524: LIST
32525: LIST
32526: LIST
32527: LIST
32528: LIST
32529: LIST
32530: LIST
32531: LIST
32532: ST_TO_ADDR
32533: GO 32536
32535: POP
// if state > - 1 and state < 3 then
32536: LD_VAR 0 3
32540: PUSH
32541: LD_INT 1
32543: NEG
32544: GREATER
32545: IFFALSE 32557
32547: PUSH
32548: LD_VAR 0 3
32552: PUSH
32553: LD_INT 3
32555: LESS
32556: AND
32557: IFFALSE 32614
// for i in result do
32559: LD_ADDR_VAR 0 5
32563: PUSH
32564: LD_VAR 0 4
32568: PUSH
32569: FOR_IN
32570: IFFALSE 32612
// if GetTech ( i , side ) <> state then
32572: LD_VAR 0 5
32576: PPUSH
32577: LD_VAR 0 1
32581: PPUSH
32582: CALL_OW 321
32586: PUSH
32587: LD_VAR 0 3
32591: NONEQUAL
32592: IFFALSE 32610
// result := result diff i ;
32594: LD_ADDR_VAR 0 4
32598: PUSH
32599: LD_VAR 0 4
32603: PUSH
32604: LD_VAR 0 5
32608: DIFF
32609: ST_TO_ADDR
32610: GO 32569
32612: POP
32613: POP
// end ;
32614: LD_VAR 0 4
32618: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
32619: LD_INT 0
32621: PPUSH
32622: PPUSH
32623: PPUSH
// result := true ;
32624: LD_ADDR_VAR 0 3
32628: PUSH
32629: LD_INT 1
32631: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
32632: LD_ADDR_VAR 0 5
32636: PUSH
32637: LD_VAR 0 2
32641: PPUSH
32642: CALL_OW 480
32646: ST_TO_ADDR
// if not tmp then
32647: LD_VAR 0 5
32651: NOT
32652: IFFALSE 32656
// exit ;
32654: GO 32705
// for i in tmp do
32656: LD_ADDR_VAR 0 4
32660: PUSH
32661: LD_VAR 0 5
32665: PUSH
32666: FOR_IN
32667: IFFALSE 32703
// if GetTech ( i , side ) <> state_researched then
32669: LD_VAR 0 4
32673: PPUSH
32674: LD_VAR 0 1
32678: PPUSH
32679: CALL_OW 321
32683: PUSH
32684: LD_INT 2
32686: NONEQUAL
32687: IFFALSE 32701
// begin result := false ;
32689: LD_ADDR_VAR 0 3
32693: PUSH
32694: LD_INT 0
32696: ST_TO_ADDR
// exit ;
32697: POP
32698: POP
32699: GO 32705
// end ;
32701: GO 32666
32703: POP
32704: POP
// end ;
32705: LD_VAR 0 3
32709: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
32710: LD_INT 0
32712: PPUSH
32713: PPUSH
32714: PPUSH
32715: PPUSH
32716: PPUSH
32717: PPUSH
32718: PPUSH
32719: PPUSH
32720: PPUSH
32721: PPUSH
32722: PPUSH
32723: PPUSH
32724: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
32725: LD_VAR 0 1
32729: NOT
32730: IFTRUE 32747
32732: PUSH
32733: LD_VAR 0 1
32737: PPUSH
32738: CALL_OW 257
32742: PUSH
32743: LD_INT 9
32745: NONEQUAL
32746: OR
32747: IFFALSE 32751
// exit ;
32749: GO 33330
// side := GetSide ( unit ) ;
32751: LD_ADDR_VAR 0 9
32755: PUSH
32756: LD_VAR 0 1
32760: PPUSH
32761: CALL_OW 255
32765: ST_TO_ADDR
// tech_space := tech_spacanom ;
32766: LD_ADDR_VAR 0 12
32770: PUSH
32771: LD_INT 29
32773: ST_TO_ADDR
// tech_time := tech_taurad ;
32774: LD_ADDR_VAR 0 13
32778: PUSH
32779: LD_INT 28
32781: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
32782: LD_ADDR_VAR 0 11
32786: PUSH
32787: LD_VAR 0 1
32791: PPUSH
32792: CALL_OW 310
32796: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
32797: LD_VAR 0 11
32801: PPUSH
32802: CALL_OW 247
32806: PUSH
32807: LD_INT 2
32809: EQUAL
32810: IFFALSE 32814
// exit ;
32812: GO 33330
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
32814: LD_ADDR_VAR 0 8
32818: PUSH
32819: LD_INT 81
32821: PUSH
32822: LD_VAR 0 9
32826: PUSH
32827: EMPTY
32828: LIST
32829: LIST
32830: PUSH
32831: LD_INT 3
32833: PUSH
32834: LD_INT 21
32836: PUSH
32837: LD_INT 3
32839: PUSH
32840: EMPTY
32841: LIST
32842: LIST
32843: PUSH
32844: EMPTY
32845: LIST
32846: LIST
32847: PUSH
32848: EMPTY
32849: LIST
32850: LIST
32851: PPUSH
32852: CALL_OW 69
32856: ST_TO_ADDR
// if not tmp then
32857: LD_VAR 0 8
32861: NOT
32862: IFFALSE 32866
// exit ;
32864: GO 33330
// if in_unit then
32866: LD_VAR 0 11
32870: IFFALSE 32894
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
32872: LD_ADDR_VAR 0 10
32876: PUSH
32877: LD_VAR 0 8
32881: PPUSH
32882: LD_VAR 0 11
32886: PPUSH
32887: CALL_OW 74
32891: ST_TO_ADDR
32892: GO 32914
// enemy := NearestUnitToUnit ( tmp , unit ) ;
32894: LD_ADDR_VAR 0 10
32898: PUSH
32899: LD_VAR 0 8
32903: PPUSH
32904: LD_VAR 0 1
32908: PPUSH
32909: CALL_OW 74
32913: ST_TO_ADDR
// if not enemy then
32914: LD_VAR 0 10
32918: NOT
32919: IFFALSE 32923
// exit ;
32921: GO 33330
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
32923: LD_VAR 0 11
32927: IFFALSE 32949
32929: PUSH
32930: LD_VAR 0 11
32934: PPUSH
32935: LD_VAR 0 10
32939: PPUSH
32940: CALL_OW 296
32944: PUSH
32945: LD_INT 13
32947: GREATER
32948: AND
32949: IFTRUE 32971
32951: PUSH
32952: LD_VAR 0 1
32956: PPUSH
32957: LD_VAR 0 10
32961: PPUSH
32962: CALL_OW 296
32966: PUSH
32967: LD_INT 12
32969: GREATER
32970: OR
32971: IFFALSE 32975
// exit ;
32973: GO 33330
// missile := [ 1 ] ;
32975: LD_ADDR_VAR 0 14
32979: PUSH
32980: LD_INT 1
32982: PUSH
32983: EMPTY
32984: LIST
32985: ST_TO_ADDR
// if Researched ( side , tech_space ) then
32986: LD_VAR 0 9
32990: PPUSH
32991: LD_VAR 0 12
32995: PPUSH
32996: CALL_OW 325
33000: IFFALSE 33029
// missile := Replace ( missile , missile + 1 , 2 ) ;
33002: LD_ADDR_VAR 0 14
33006: PUSH
33007: LD_VAR 0 14
33011: PPUSH
33012: LD_VAR 0 14
33016: PUSH
33017: LD_INT 1
33019: PLUS
33020: PPUSH
33021: LD_INT 2
33023: PPUSH
33024: CALL_OW 1
33028: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
33029: LD_VAR 0 9
33033: PPUSH
33034: LD_VAR 0 13
33038: PPUSH
33039: CALL_OW 325
33043: IFFALSE 33067
33045: PUSH
33046: LD_VAR 0 10
33050: PPUSH
33051: CALL_OW 255
33055: PPUSH
33056: LD_VAR 0 13
33060: PPUSH
33061: CALL_OW 325
33065: NOT
33066: AND
33067: IFFALSE 33096
// missile := Replace ( missile , missile + 1 , 3 ) ;
33069: LD_ADDR_VAR 0 14
33073: PUSH
33074: LD_VAR 0 14
33078: PPUSH
33079: LD_VAR 0 14
33083: PUSH
33084: LD_INT 1
33086: PLUS
33087: PPUSH
33088: LD_INT 3
33090: PPUSH
33091: CALL_OW 1
33095: ST_TO_ADDR
// if missile < 2 then
33096: LD_VAR 0 14
33100: PUSH
33101: LD_INT 2
33103: LESS
33104: IFFALSE 33108
// exit ;
33106: GO 33330
// x := GetX ( enemy ) ;
33108: LD_ADDR_VAR 0 4
33112: PUSH
33113: LD_VAR 0 10
33117: PPUSH
33118: CALL_OW 250
33122: ST_TO_ADDR
// y := GetY ( enemy ) ;
33123: LD_ADDR_VAR 0 5
33127: PUSH
33128: LD_VAR 0 10
33132: PPUSH
33133: CALL_OW 251
33137: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
33138: LD_ADDR_VAR 0 6
33142: PUSH
33143: LD_VAR 0 4
33147: PUSH
33148: LD_INT 1
33150: NEG
33151: PPUSH
33152: LD_INT 1
33154: PPUSH
33155: CALL_OW 12
33159: PLUS
33160: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
33161: LD_ADDR_VAR 0 7
33165: PUSH
33166: LD_VAR 0 5
33170: PUSH
33171: LD_INT 1
33173: NEG
33174: PPUSH
33175: LD_INT 1
33177: PPUSH
33178: CALL_OW 12
33182: PLUS
33183: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
33184: LD_VAR 0 6
33188: PPUSH
33189: LD_VAR 0 7
33193: PPUSH
33194: CALL_OW 488
33198: NOT
33199: IFFALSE 33221
// begin _x := x ;
33201: LD_ADDR_VAR 0 6
33205: PUSH
33206: LD_VAR 0 4
33210: ST_TO_ADDR
// _y := y ;
33211: LD_ADDR_VAR 0 7
33215: PUSH
33216: LD_VAR 0 5
33220: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
33221: LD_ADDR_VAR 0 3
33225: PUSH
33226: LD_INT 1
33228: PPUSH
33229: LD_VAR 0 14
33233: PPUSH
33234: CALL_OW 12
33238: ST_TO_ADDR
// case i of 1 :
33239: LD_VAR 0 3
33243: PUSH
33244: LD_INT 1
33246: DOUBLE
33247: EQUAL
33248: IFTRUE 33252
33250: GO 33269
33252: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
33253: LD_VAR 0 1
33257: PPUSH
33258: LD_VAR 0 10
33262: PPUSH
33263: CALL_OW 115
33267: GO 33330
33269: LD_INT 2
33271: DOUBLE
33272: EQUAL
33273: IFTRUE 33277
33275: GO 33299
33277: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
33278: LD_VAR 0 1
33282: PPUSH
33283: LD_VAR 0 6
33287: PPUSH
33288: LD_VAR 0 7
33292: PPUSH
33293: CALL_OW 153
33297: GO 33330
33299: LD_INT 3
33301: DOUBLE
33302: EQUAL
33303: IFTRUE 33307
33305: GO 33329
33307: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
33308: LD_VAR 0 1
33312: PPUSH
33313: LD_VAR 0 6
33317: PPUSH
33318: LD_VAR 0 7
33322: PPUSH
33323: CALL_OW 154
33327: GO 33330
33329: POP
// end ;
33330: LD_VAR 0 2
33334: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
33335: LD_INT 0
33337: PPUSH
33338: PPUSH
33339: PPUSH
33340: PPUSH
33341: PPUSH
33342: PPUSH
// if not unit or not building then
33343: LD_VAR 0 1
33347: NOT
33348: IFTRUE 33357
33350: PUSH
33351: LD_VAR 0 2
33355: NOT
33356: OR
33357: IFFALSE 33361
// exit ;
33359: GO 33519
// x := GetX ( building ) ;
33361: LD_ADDR_VAR 0 5
33365: PUSH
33366: LD_VAR 0 2
33370: PPUSH
33371: CALL_OW 250
33375: ST_TO_ADDR
// y := GetY ( building ) ;
33376: LD_ADDR_VAR 0 6
33380: PUSH
33381: LD_VAR 0 2
33385: PPUSH
33386: CALL_OW 251
33390: ST_TO_ADDR
// for i := 0 to 5 do
33391: LD_ADDR_VAR 0 4
33395: PUSH
33396: DOUBLE
33397: LD_INT 0
33399: DEC
33400: ST_TO_ADDR
33401: LD_INT 5
33403: PUSH
33404: FOR_TO
33405: IFFALSE 33517
// begin _x := ShiftX ( x , i , 3 ) ;
33407: LD_ADDR_VAR 0 7
33411: PUSH
33412: LD_VAR 0 5
33416: PPUSH
33417: LD_VAR 0 4
33421: PPUSH
33422: LD_INT 3
33424: PPUSH
33425: CALL_OW 272
33429: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
33430: LD_ADDR_VAR 0 8
33434: PUSH
33435: LD_VAR 0 6
33439: PPUSH
33440: LD_VAR 0 4
33444: PPUSH
33445: LD_INT 3
33447: PPUSH
33448: CALL_OW 273
33452: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
33453: LD_VAR 0 7
33457: PPUSH
33458: LD_VAR 0 8
33462: PPUSH
33463: CALL_OW 488
33467: NOT
33468: IFFALSE 33472
// continue ;
33470: GO 33404
// if HexInfo ( _x , _y ) = 0 then
33472: LD_VAR 0 7
33476: PPUSH
33477: LD_VAR 0 8
33481: PPUSH
33482: CALL_OW 428
33486: PUSH
33487: LD_INT 0
33489: EQUAL
33490: IFFALSE 33515
// begin ComMoveXY ( unit , _x , _y ) ;
33492: LD_VAR 0 1
33496: PPUSH
33497: LD_VAR 0 7
33501: PPUSH
33502: LD_VAR 0 8
33506: PPUSH
33507: CALL_OW 111
// exit ;
33511: POP
33512: POP
33513: GO 33519
// end ; end ;
33515: GO 33404
33517: POP
33518: POP
// end ;
33519: LD_VAR 0 3
33523: RET
// export function ScanBase ( side , base_area ) ; begin
33524: LD_INT 0
33526: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
33527: LD_ADDR_VAR 0 3
33531: PUSH
33532: LD_VAR 0 2
33536: PPUSH
33537: LD_INT 81
33539: PUSH
33540: LD_VAR 0 1
33544: PUSH
33545: EMPTY
33546: LIST
33547: LIST
33548: PPUSH
33549: CALL_OW 70
33553: ST_TO_ADDR
// end ;
33554: LD_VAR 0 3
33558: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
33559: LD_INT 0
33561: PPUSH
33562: PPUSH
33563: PPUSH
33564: PPUSH
// result := false ;
33565: LD_ADDR_VAR 0 2
33569: PUSH
33570: LD_INT 0
33572: ST_TO_ADDR
// side := GetSide ( unit ) ;
33573: LD_ADDR_VAR 0 3
33577: PUSH
33578: LD_VAR 0 1
33582: PPUSH
33583: CALL_OW 255
33587: ST_TO_ADDR
// nat := GetNation ( unit ) ;
33588: LD_ADDR_VAR 0 4
33592: PUSH
33593: LD_VAR 0 1
33597: PPUSH
33598: CALL_OW 248
33602: ST_TO_ADDR
// case nat of 1 :
33603: LD_VAR 0 4
33607: PUSH
33608: LD_INT 1
33610: DOUBLE
33611: EQUAL
33612: IFTRUE 33616
33614: GO 33627
33616: POP
// tech := tech_lassight ; 2 :
33617: LD_ADDR_VAR 0 5
33621: PUSH
33622: LD_INT 12
33624: ST_TO_ADDR
33625: GO 33666
33627: LD_INT 2
33629: DOUBLE
33630: EQUAL
33631: IFTRUE 33635
33633: GO 33646
33635: POP
// tech := tech_mortar ; 3 :
33636: LD_ADDR_VAR 0 5
33640: PUSH
33641: LD_INT 41
33643: ST_TO_ADDR
33644: GO 33666
33646: LD_INT 3
33648: DOUBLE
33649: EQUAL
33650: IFTRUE 33654
33652: GO 33665
33654: POP
// tech := tech_bazooka ; end ;
33655: LD_ADDR_VAR 0 5
33659: PUSH
33660: LD_INT 44
33662: ST_TO_ADDR
33663: GO 33666
33665: POP
// if Researched ( side , tech ) then
33666: LD_VAR 0 3
33670: PPUSH
33671: LD_VAR 0 5
33675: PPUSH
33676: CALL_OW 325
33680: IFFALSE 33707
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
33682: LD_ADDR_VAR 0 2
33686: PUSH
33687: LD_INT 5
33689: PUSH
33690: LD_INT 8
33692: PUSH
33693: LD_INT 9
33695: PUSH
33696: EMPTY
33697: LIST
33698: LIST
33699: LIST
33700: PUSH
33701: LD_VAR 0 4
33705: ARRAY
33706: ST_TO_ADDR
// end ;
33707: LD_VAR 0 2
33711: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
33712: LD_INT 0
33714: PPUSH
33715: PPUSH
33716: PPUSH
// if not mines then
33717: LD_VAR 0 2
33721: NOT
33722: IFFALSE 33726
// exit ;
33724: GO 33870
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
33726: LD_ADDR_VAR 0 5
33730: PUSH
33731: LD_INT 81
33733: PUSH
33734: LD_VAR 0 1
33738: PUSH
33739: EMPTY
33740: LIST
33741: LIST
33742: PUSH
33743: LD_INT 3
33745: PUSH
33746: LD_INT 21
33748: PUSH
33749: LD_INT 3
33751: PUSH
33752: EMPTY
33753: LIST
33754: LIST
33755: PUSH
33756: EMPTY
33757: LIST
33758: LIST
33759: PUSH
33760: EMPTY
33761: LIST
33762: LIST
33763: PPUSH
33764: CALL_OW 69
33768: ST_TO_ADDR
// for i in mines do
33769: LD_ADDR_VAR 0 4
33773: PUSH
33774: LD_VAR 0 2
33778: PUSH
33779: FOR_IN
33780: IFFALSE 33868
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
33782: LD_VAR 0 4
33786: PUSH
33787: LD_INT 1
33789: ARRAY
33790: PPUSH
33791: LD_VAR 0 4
33795: PUSH
33796: LD_INT 2
33798: ARRAY
33799: PPUSH
33800: CALL_OW 458
33804: NOT
33805: IFFALSE 33809
// continue ;
33807: GO 33779
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
33809: LD_VAR 0 4
33813: PUSH
33814: LD_INT 1
33816: ARRAY
33817: PPUSH
33818: LD_VAR 0 4
33822: PUSH
33823: LD_INT 2
33825: ARRAY
33826: PPUSH
33827: CALL_OW 428
33831: PUSH
33832: LD_VAR 0 5
33836: IN
33837: IFFALSE 33866
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
33839: LD_VAR 0 4
33843: PUSH
33844: LD_INT 1
33846: ARRAY
33847: PPUSH
33848: LD_VAR 0 4
33852: PUSH
33853: LD_INT 2
33855: ARRAY
33856: PPUSH
33857: LD_VAR 0 1
33861: PPUSH
33862: CALL_OW 456
// end ;
33866: GO 33779
33868: POP
33869: POP
// end ;
33870: LD_VAR 0 3
33874: RET
// export function Count ( array ) ; begin
33875: LD_INT 0
33877: PPUSH
// result := array + 0 ;
33878: LD_ADDR_VAR 0 2
33882: PUSH
33883: LD_VAR 0 1
33887: PUSH
33888: LD_INT 0
33890: PLUS
33891: ST_TO_ADDR
// end ;
33892: LD_VAR 0 2
33896: RET
// export function IsEmpty ( building ) ; begin
33897: LD_INT 0
33899: PPUSH
// if not building then
33900: LD_VAR 0 1
33904: NOT
33905: IFFALSE 33909
// exit ;
33907: GO 33952
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
33909: LD_ADDR_VAR 0 2
33913: PUSH
33914: LD_VAR 0 1
33918: PUSH
33919: LD_INT 22
33921: PUSH
33922: LD_VAR 0 1
33926: PPUSH
33927: CALL_OW 255
33931: PUSH
33932: EMPTY
33933: LIST
33934: LIST
33935: PUSH
33936: LD_INT 58
33938: PUSH
33939: EMPTY
33940: LIST
33941: PUSH
33942: EMPTY
33943: LIST
33944: LIST
33945: PPUSH
33946: CALL_OW 69
33950: IN
33951: ST_TO_ADDR
// end ;
33952: LD_VAR 0 2
33956: RET
// export function IsNotFull ( building ) ; var places ; begin
33957: LD_INT 0
33959: PPUSH
33960: PPUSH
// if not building then
33961: LD_VAR 0 1
33965: NOT
33966: IFFALSE 33970
// exit ;
33968: GO 33998
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
33970: LD_ADDR_VAR 0 2
33974: PUSH
33975: LD_VAR 0 1
33979: PPUSH
33980: LD_INT 3
33982: PUSH
33983: LD_INT 62
33985: PUSH
33986: EMPTY
33987: LIST
33988: PUSH
33989: EMPTY
33990: LIST
33991: LIST
33992: PPUSH
33993: CALL_OW 72
33997: ST_TO_ADDR
// end ;
33998: LD_VAR 0 2
34002: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
34003: LD_INT 0
34005: PPUSH
34006: PPUSH
34007: PPUSH
34008: PPUSH
// tmp := [ ] ;
34009: LD_ADDR_VAR 0 3
34013: PUSH
34014: EMPTY
34015: ST_TO_ADDR
// list := [ ] ;
34016: LD_ADDR_VAR 0 5
34020: PUSH
34021: EMPTY
34022: ST_TO_ADDR
// for i = 16 to 25 do
34023: LD_ADDR_VAR 0 4
34027: PUSH
34028: DOUBLE
34029: LD_INT 16
34031: DEC
34032: ST_TO_ADDR
34033: LD_INT 25
34035: PUSH
34036: FOR_TO
34037: IFFALSE 34110
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
34039: LD_ADDR_VAR 0 3
34043: PUSH
34044: LD_VAR 0 3
34048: PUSH
34049: LD_INT 22
34051: PUSH
34052: LD_VAR 0 1
34056: PPUSH
34057: CALL_OW 255
34061: PUSH
34062: EMPTY
34063: LIST
34064: LIST
34065: PUSH
34066: LD_INT 91
34068: PUSH
34069: LD_VAR 0 1
34073: PUSH
34074: LD_INT 6
34076: PUSH
34077: EMPTY
34078: LIST
34079: LIST
34080: LIST
34081: PUSH
34082: LD_INT 30
34084: PUSH
34085: LD_VAR 0 4
34089: PUSH
34090: EMPTY
34091: LIST
34092: LIST
34093: PUSH
34094: EMPTY
34095: LIST
34096: LIST
34097: LIST
34098: PUSH
34099: EMPTY
34100: LIST
34101: PPUSH
34102: CALL_OW 69
34106: ADD
34107: ST_TO_ADDR
34108: GO 34036
34110: POP
34111: POP
// for i = 1 to tmp do
34112: LD_ADDR_VAR 0 4
34116: PUSH
34117: DOUBLE
34118: LD_INT 1
34120: DEC
34121: ST_TO_ADDR
34122: LD_VAR 0 3
34126: PUSH
34127: FOR_TO
34128: IFFALSE 34216
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
34130: LD_ADDR_VAR 0 5
34134: PUSH
34135: LD_VAR 0 5
34139: PUSH
34140: LD_VAR 0 3
34144: PUSH
34145: LD_VAR 0 4
34149: ARRAY
34150: PPUSH
34151: CALL_OW 266
34155: PUSH
34156: LD_VAR 0 3
34160: PUSH
34161: LD_VAR 0 4
34165: ARRAY
34166: PPUSH
34167: CALL_OW 250
34171: PUSH
34172: LD_VAR 0 3
34176: PUSH
34177: LD_VAR 0 4
34181: ARRAY
34182: PPUSH
34183: CALL_OW 251
34187: PUSH
34188: LD_VAR 0 3
34192: PUSH
34193: LD_VAR 0 4
34197: ARRAY
34198: PPUSH
34199: CALL_OW 254
34203: PUSH
34204: EMPTY
34205: LIST
34206: LIST
34207: LIST
34208: LIST
34209: PUSH
34210: EMPTY
34211: LIST
34212: ADD
34213: ST_TO_ADDR
34214: GO 34127
34216: POP
34217: POP
// result := list ;
34218: LD_ADDR_VAR 0 2
34222: PUSH
34223: LD_VAR 0 5
34227: ST_TO_ADDR
// end ;
34228: LD_VAR 0 2
34232: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
34233: LD_INT 0
34235: PPUSH
34236: PPUSH
34237: PPUSH
34238: PPUSH
34239: PPUSH
34240: PPUSH
34241: PPUSH
// if not factory then
34242: LD_VAR 0 1
34246: NOT
34247: IFFALSE 34251
// exit ;
34249: GO 34854
// if control = control_apeman then
34251: LD_VAR 0 4
34255: PUSH
34256: LD_INT 5
34258: EQUAL
34259: IFFALSE 34368
// begin tmp := UnitsInside ( factory ) ;
34261: LD_ADDR_VAR 0 8
34265: PUSH
34266: LD_VAR 0 1
34270: PPUSH
34271: CALL_OW 313
34275: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
34276: LD_VAR 0 8
34280: PPUSH
34281: LD_INT 25
34283: PUSH
34284: LD_INT 12
34286: PUSH
34287: EMPTY
34288: LIST
34289: LIST
34290: PPUSH
34291: CALL_OW 72
34295: NOT
34296: IFFALSE 34306
// control := control_manual ;
34298: LD_ADDR_VAR 0 4
34302: PUSH
34303: LD_INT 1
34305: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
34306: LD_ADDR_VAR 0 8
34310: PUSH
34311: LD_VAR 0 1
34315: PPUSH
34316: CALL 34003 0 1
34320: ST_TO_ADDR
// if tmp then
34321: LD_VAR 0 8
34325: IFFALSE 34368
// begin for i in tmp do
34327: LD_ADDR_VAR 0 7
34331: PUSH
34332: LD_VAR 0 8
34336: PUSH
34337: FOR_IN
34338: IFFALSE 34366
// if i [ 1 ] = b_ext_radio then
34340: LD_VAR 0 7
34344: PUSH
34345: LD_INT 1
34347: ARRAY
34348: PUSH
34349: LD_INT 22
34351: EQUAL
34352: IFFALSE 34364
// begin control := control_remote ;
34354: LD_ADDR_VAR 0 4
34358: PUSH
34359: LD_INT 2
34361: ST_TO_ADDR
// break ;
34362: GO 34366
// end ;
34364: GO 34337
34366: POP
34367: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
34368: LD_VAR 0 1
34372: PPUSH
34373: LD_VAR 0 2
34377: PPUSH
34378: LD_VAR 0 3
34382: PPUSH
34383: LD_VAR 0 4
34387: PPUSH
34388: LD_VAR 0 5
34392: PPUSH
34393: CALL_OW 448
34397: IFFALSE 34432
// begin result := [ chassis , engine , control , weapon ] ;
34399: LD_ADDR_VAR 0 6
34403: PUSH
34404: LD_VAR 0 2
34408: PUSH
34409: LD_VAR 0 3
34413: PUSH
34414: LD_VAR 0 4
34418: PUSH
34419: LD_VAR 0 5
34423: PUSH
34424: EMPTY
34425: LIST
34426: LIST
34427: LIST
34428: LIST
34429: ST_TO_ADDR
// exit ;
34430: GO 34854
// end ; _chassis := AvailableChassisList ( factory ) ;
34432: LD_ADDR_VAR 0 9
34436: PUSH
34437: LD_VAR 0 1
34441: PPUSH
34442: CALL_OW 475
34446: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
34447: LD_ADDR_VAR 0 11
34451: PUSH
34452: LD_VAR 0 1
34456: PPUSH
34457: CALL_OW 476
34461: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
34462: LD_ADDR_VAR 0 12
34466: PUSH
34467: LD_VAR 0 1
34471: PPUSH
34472: CALL_OW 477
34476: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
34477: LD_ADDR_VAR 0 10
34481: PUSH
34482: LD_VAR 0 1
34486: PPUSH
34487: CALL_OW 478
34491: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
34492: LD_VAR 0 9
34496: NOT
34497: IFTRUE 34506
34499: PUSH
34500: LD_VAR 0 11
34504: NOT
34505: OR
34506: IFTRUE 34515
34508: PUSH
34509: LD_VAR 0 12
34513: NOT
34514: OR
34515: IFTRUE 34524
34517: PUSH
34518: LD_VAR 0 10
34522: NOT
34523: OR
34524: IFFALSE 34559
// begin result := [ chassis , engine , control , weapon ] ;
34526: LD_ADDR_VAR 0 6
34530: PUSH
34531: LD_VAR 0 2
34535: PUSH
34536: LD_VAR 0 3
34540: PUSH
34541: LD_VAR 0 4
34545: PUSH
34546: LD_VAR 0 5
34550: PUSH
34551: EMPTY
34552: LIST
34553: LIST
34554: LIST
34555: LIST
34556: ST_TO_ADDR
// exit ;
34557: GO 34854
// end ; if not chassis in _chassis then
34559: LD_VAR 0 2
34563: PUSH
34564: LD_VAR 0 9
34568: IN
34569: NOT
34570: IFFALSE 34596
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
34572: LD_ADDR_VAR 0 2
34576: PUSH
34577: LD_VAR 0 9
34581: PUSH
34582: LD_INT 1
34584: PPUSH
34585: LD_VAR 0 9
34589: PPUSH
34590: CALL_OW 12
34594: ARRAY
34595: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
34596: LD_VAR 0 2
34600: PPUSH
34601: LD_VAR 0 3
34605: PPUSH
34606: CALL 34859 0 2
34610: NOT
34611: IFFALSE 34672
// repeat engine := _engine [ 1 ] ;
34613: LD_ADDR_VAR 0 3
34617: PUSH
34618: LD_VAR 0 11
34622: PUSH
34623: LD_INT 1
34625: ARRAY
34626: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
34627: LD_ADDR_VAR 0 11
34631: PUSH
34632: LD_VAR 0 11
34636: PPUSH
34637: LD_INT 1
34639: PPUSH
34640: CALL_OW 3
34644: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
34645: LD_VAR 0 2
34649: PPUSH
34650: LD_VAR 0 3
34654: PPUSH
34655: CALL 34859 0 2
34659: IFTRUE 34670
34661: PUSH
34662: LD_VAR 0 11
34666: PUSH
34667: EMPTY
34668: EQUAL
34669: OR
34670: IFFALSE 34613
// if not control in _control then
34672: LD_VAR 0 4
34676: PUSH
34677: LD_VAR 0 12
34681: IN
34682: NOT
34683: IFFALSE 34709
// control := _control [ rand ( 1 , _control ) ] ;
34685: LD_ADDR_VAR 0 4
34689: PUSH
34690: LD_VAR 0 12
34694: PUSH
34695: LD_INT 1
34697: PPUSH
34698: LD_VAR 0 12
34702: PPUSH
34703: CALL_OW 12
34707: ARRAY
34708: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
34709: LD_VAR 0 2
34713: PPUSH
34714: LD_VAR 0 5
34718: PPUSH
34719: CALL 35081 0 2
34723: NOT
34724: IFFALSE 34785
// repeat weapon := _weapon [ 1 ] ;
34726: LD_ADDR_VAR 0 5
34730: PUSH
34731: LD_VAR 0 10
34735: PUSH
34736: LD_INT 1
34738: ARRAY
34739: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
34740: LD_ADDR_VAR 0 10
34744: PUSH
34745: LD_VAR 0 10
34749: PPUSH
34750: LD_INT 1
34752: PPUSH
34753: CALL_OW 3
34757: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
34758: LD_VAR 0 2
34762: PPUSH
34763: LD_VAR 0 5
34767: PPUSH
34768: CALL 35081 0 2
34772: IFTRUE 34783
34774: PUSH
34775: LD_VAR 0 10
34779: PUSH
34780: EMPTY
34781: EQUAL
34782: OR
34783: IFFALSE 34726
// result := [ ] ;
34785: LD_ADDR_VAR 0 6
34789: PUSH
34790: EMPTY
34791: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
34792: LD_VAR 0 1
34796: PPUSH
34797: LD_VAR 0 2
34801: PPUSH
34802: LD_VAR 0 3
34806: PPUSH
34807: LD_VAR 0 4
34811: PPUSH
34812: LD_VAR 0 5
34816: PPUSH
34817: CALL_OW 448
34821: IFFALSE 34854
// result := [ chassis , engine , control , weapon ] ;
34823: LD_ADDR_VAR 0 6
34827: PUSH
34828: LD_VAR 0 2
34832: PUSH
34833: LD_VAR 0 3
34837: PUSH
34838: LD_VAR 0 4
34842: PUSH
34843: LD_VAR 0 5
34847: PUSH
34848: EMPTY
34849: LIST
34850: LIST
34851: LIST
34852: LIST
34853: ST_TO_ADDR
// end ;
34854: LD_VAR 0 6
34858: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
34859: LD_INT 0
34861: PPUSH
// if not chassis or not engine then
34862: LD_VAR 0 1
34866: NOT
34867: IFTRUE 34876
34869: PUSH
34870: LD_VAR 0 2
34874: NOT
34875: OR
34876: IFFALSE 34880
// exit ;
34878: GO 35076
// case engine of engine_solar :
34880: LD_VAR 0 2
34884: PUSH
34885: LD_INT 2
34887: DOUBLE
34888: EQUAL
34889: IFTRUE 34893
34891: GO 34931
34893: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
34894: LD_ADDR_VAR 0 3
34898: PUSH
34899: LD_INT 11
34901: PUSH
34902: LD_INT 12
34904: PUSH
34905: LD_INT 13
34907: PUSH
34908: LD_INT 14
34910: PUSH
34911: LD_INT 1
34913: PUSH
34914: LD_INT 2
34916: PUSH
34917: LD_INT 3
34919: PUSH
34920: EMPTY
34921: LIST
34922: LIST
34923: LIST
34924: LIST
34925: LIST
34926: LIST
34927: LIST
34928: ST_TO_ADDR
34929: GO 35060
34931: LD_INT 1
34933: DOUBLE
34934: EQUAL
34935: IFTRUE 34939
34937: GO 35001
34939: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
34940: LD_ADDR_VAR 0 3
34944: PUSH
34945: LD_INT 11
34947: PUSH
34948: LD_INT 12
34950: PUSH
34951: LD_INT 13
34953: PUSH
34954: LD_INT 14
34956: PUSH
34957: LD_INT 1
34959: PUSH
34960: LD_INT 2
34962: PUSH
34963: LD_INT 3
34965: PUSH
34966: LD_INT 4
34968: PUSH
34969: LD_INT 5
34971: PUSH
34972: LD_INT 21
34974: PUSH
34975: LD_INT 23
34977: PUSH
34978: LD_INT 22
34980: PUSH
34981: LD_INT 24
34983: PUSH
34984: EMPTY
34985: LIST
34986: LIST
34987: LIST
34988: LIST
34989: LIST
34990: LIST
34991: LIST
34992: LIST
34993: LIST
34994: LIST
34995: LIST
34996: LIST
34997: LIST
34998: ST_TO_ADDR
34999: GO 35060
35001: LD_INT 3
35003: DOUBLE
35004: EQUAL
35005: IFTRUE 35009
35007: GO 35059
35009: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
35010: LD_ADDR_VAR 0 3
35014: PUSH
35015: LD_INT 13
35017: PUSH
35018: LD_INT 14
35020: PUSH
35021: LD_INT 2
35023: PUSH
35024: LD_INT 3
35026: PUSH
35027: LD_INT 4
35029: PUSH
35030: LD_INT 5
35032: PUSH
35033: LD_INT 21
35035: PUSH
35036: LD_INT 22
35038: PUSH
35039: LD_INT 23
35041: PUSH
35042: LD_INT 24
35044: PUSH
35045: EMPTY
35046: LIST
35047: LIST
35048: LIST
35049: LIST
35050: LIST
35051: LIST
35052: LIST
35053: LIST
35054: LIST
35055: LIST
35056: ST_TO_ADDR
35057: GO 35060
35059: POP
// result := ( chassis in result ) ;
35060: LD_ADDR_VAR 0 3
35064: PUSH
35065: LD_VAR 0 1
35069: PUSH
35070: LD_VAR 0 3
35074: IN
35075: ST_TO_ADDR
// end ;
35076: LD_VAR 0 3
35080: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
35081: LD_INT 0
35083: PPUSH
// if not chassis or not weapon then
35084: LD_VAR 0 1
35088: NOT
35089: IFTRUE 35098
35091: PUSH
35092: LD_VAR 0 2
35096: NOT
35097: OR
35098: IFFALSE 35102
// exit ;
35100: GO 36196
// case weapon of us_machine_gun :
35102: LD_VAR 0 2
35106: PUSH
35107: LD_INT 2
35109: DOUBLE
35110: EQUAL
35111: IFTRUE 35115
35113: GO 35145
35115: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
35116: LD_ADDR_VAR 0 3
35120: PUSH
35121: LD_INT 1
35123: PUSH
35124: LD_INT 2
35126: PUSH
35127: LD_INT 3
35129: PUSH
35130: LD_INT 4
35132: PUSH
35133: LD_INT 5
35135: PUSH
35136: EMPTY
35137: LIST
35138: LIST
35139: LIST
35140: LIST
35141: LIST
35142: ST_TO_ADDR
35143: GO 36180
35145: LD_INT 3
35147: DOUBLE
35148: EQUAL
35149: IFTRUE 35153
35151: GO 35183
35153: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
35154: LD_ADDR_VAR 0 3
35158: PUSH
35159: LD_INT 1
35161: PUSH
35162: LD_INT 2
35164: PUSH
35165: LD_INT 3
35167: PUSH
35168: LD_INT 4
35170: PUSH
35171: LD_INT 5
35173: PUSH
35174: EMPTY
35175: LIST
35176: LIST
35177: LIST
35178: LIST
35179: LIST
35180: ST_TO_ADDR
35181: GO 36180
35183: LD_INT 11
35185: DOUBLE
35186: EQUAL
35187: IFTRUE 35191
35189: GO 35221
35191: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
35192: LD_ADDR_VAR 0 3
35196: PUSH
35197: LD_INT 1
35199: PUSH
35200: LD_INT 2
35202: PUSH
35203: LD_INT 3
35205: PUSH
35206: LD_INT 4
35208: PUSH
35209: LD_INT 5
35211: PUSH
35212: EMPTY
35213: LIST
35214: LIST
35215: LIST
35216: LIST
35217: LIST
35218: ST_TO_ADDR
35219: GO 36180
35221: LD_INT 4
35223: DOUBLE
35224: EQUAL
35225: IFTRUE 35229
35227: GO 35255
35229: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
35230: LD_ADDR_VAR 0 3
35234: PUSH
35235: LD_INT 2
35237: PUSH
35238: LD_INT 3
35240: PUSH
35241: LD_INT 4
35243: PUSH
35244: LD_INT 5
35246: PUSH
35247: EMPTY
35248: LIST
35249: LIST
35250: LIST
35251: LIST
35252: ST_TO_ADDR
35253: GO 36180
35255: LD_INT 5
35257: DOUBLE
35258: EQUAL
35259: IFTRUE 35263
35261: GO 35289
35263: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
35264: LD_ADDR_VAR 0 3
35268: PUSH
35269: LD_INT 2
35271: PUSH
35272: LD_INT 3
35274: PUSH
35275: LD_INT 4
35277: PUSH
35278: LD_INT 5
35280: PUSH
35281: EMPTY
35282: LIST
35283: LIST
35284: LIST
35285: LIST
35286: ST_TO_ADDR
35287: GO 36180
35289: LD_INT 9
35291: DOUBLE
35292: EQUAL
35293: IFTRUE 35297
35295: GO 35323
35297: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
35298: LD_ADDR_VAR 0 3
35302: PUSH
35303: LD_INT 2
35305: PUSH
35306: LD_INT 3
35308: PUSH
35309: LD_INT 4
35311: PUSH
35312: LD_INT 5
35314: PUSH
35315: EMPTY
35316: LIST
35317: LIST
35318: LIST
35319: LIST
35320: ST_TO_ADDR
35321: GO 36180
35323: LD_INT 7
35325: DOUBLE
35326: EQUAL
35327: IFTRUE 35331
35329: GO 35357
35331: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
35332: LD_ADDR_VAR 0 3
35336: PUSH
35337: LD_INT 2
35339: PUSH
35340: LD_INT 3
35342: PUSH
35343: LD_INT 4
35345: PUSH
35346: LD_INT 5
35348: PUSH
35349: EMPTY
35350: LIST
35351: LIST
35352: LIST
35353: LIST
35354: ST_TO_ADDR
35355: GO 36180
35357: LD_INT 12
35359: DOUBLE
35360: EQUAL
35361: IFTRUE 35365
35363: GO 35391
35365: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
35366: LD_ADDR_VAR 0 3
35370: PUSH
35371: LD_INT 2
35373: PUSH
35374: LD_INT 3
35376: PUSH
35377: LD_INT 4
35379: PUSH
35380: LD_INT 5
35382: PUSH
35383: EMPTY
35384: LIST
35385: LIST
35386: LIST
35387: LIST
35388: ST_TO_ADDR
35389: GO 36180
35391: LD_INT 13
35393: DOUBLE
35394: EQUAL
35395: IFTRUE 35399
35397: GO 35425
35399: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
35400: LD_ADDR_VAR 0 3
35404: PUSH
35405: LD_INT 2
35407: PUSH
35408: LD_INT 3
35410: PUSH
35411: LD_INT 4
35413: PUSH
35414: LD_INT 5
35416: PUSH
35417: EMPTY
35418: LIST
35419: LIST
35420: LIST
35421: LIST
35422: ST_TO_ADDR
35423: GO 36180
35425: LD_INT 14
35427: DOUBLE
35428: EQUAL
35429: IFTRUE 35433
35431: GO 35451
35433: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
35434: LD_ADDR_VAR 0 3
35438: PUSH
35439: LD_INT 4
35441: PUSH
35442: LD_INT 5
35444: PUSH
35445: EMPTY
35446: LIST
35447: LIST
35448: ST_TO_ADDR
35449: GO 36180
35451: LD_INT 6
35453: DOUBLE
35454: EQUAL
35455: IFTRUE 35459
35457: GO 35477
35459: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
35460: LD_ADDR_VAR 0 3
35464: PUSH
35465: LD_INT 4
35467: PUSH
35468: LD_INT 5
35470: PUSH
35471: EMPTY
35472: LIST
35473: LIST
35474: ST_TO_ADDR
35475: GO 36180
35477: LD_INT 10
35479: DOUBLE
35480: EQUAL
35481: IFTRUE 35485
35483: GO 35503
35485: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
35486: LD_ADDR_VAR 0 3
35490: PUSH
35491: LD_INT 4
35493: PUSH
35494: LD_INT 5
35496: PUSH
35497: EMPTY
35498: LIST
35499: LIST
35500: ST_TO_ADDR
35501: GO 36180
35503: LD_INT 22
35505: DOUBLE
35506: EQUAL
35507: IFTRUE 35511
35509: GO 35537
35511: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
35512: LD_ADDR_VAR 0 3
35516: PUSH
35517: LD_INT 11
35519: PUSH
35520: LD_INT 12
35522: PUSH
35523: LD_INT 13
35525: PUSH
35526: LD_INT 14
35528: PUSH
35529: EMPTY
35530: LIST
35531: LIST
35532: LIST
35533: LIST
35534: ST_TO_ADDR
35535: GO 36180
35537: LD_INT 23
35539: DOUBLE
35540: EQUAL
35541: IFTRUE 35545
35543: GO 35571
35545: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
35546: LD_ADDR_VAR 0 3
35550: PUSH
35551: LD_INT 11
35553: PUSH
35554: LD_INT 12
35556: PUSH
35557: LD_INT 13
35559: PUSH
35560: LD_INT 14
35562: PUSH
35563: EMPTY
35564: LIST
35565: LIST
35566: LIST
35567: LIST
35568: ST_TO_ADDR
35569: GO 36180
35571: LD_INT 24
35573: DOUBLE
35574: EQUAL
35575: IFTRUE 35579
35577: GO 35605
35579: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
35580: LD_ADDR_VAR 0 3
35584: PUSH
35585: LD_INT 11
35587: PUSH
35588: LD_INT 12
35590: PUSH
35591: LD_INT 13
35593: PUSH
35594: LD_INT 14
35596: PUSH
35597: EMPTY
35598: LIST
35599: LIST
35600: LIST
35601: LIST
35602: ST_TO_ADDR
35603: GO 36180
35605: LD_INT 30
35607: DOUBLE
35608: EQUAL
35609: IFTRUE 35613
35611: GO 35639
35613: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
35614: LD_ADDR_VAR 0 3
35618: PUSH
35619: LD_INT 11
35621: PUSH
35622: LD_INT 12
35624: PUSH
35625: LD_INT 13
35627: PUSH
35628: LD_INT 14
35630: PUSH
35631: EMPTY
35632: LIST
35633: LIST
35634: LIST
35635: LIST
35636: ST_TO_ADDR
35637: GO 36180
35639: LD_INT 25
35641: DOUBLE
35642: EQUAL
35643: IFTRUE 35647
35645: GO 35665
35647: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
35648: LD_ADDR_VAR 0 3
35652: PUSH
35653: LD_INT 13
35655: PUSH
35656: LD_INT 14
35658: PUSH
35659: EMPTY
35660: LIST
35661: LIST
35662: ST_TO_ADDR
35663: GO 36180
35665: LD_INT 27
35667: DOUBLE
35668: EQUAL
35669: IFTRUE 35673
35671: GO 35691
35673: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
35674: LD_ADDR_VAR 0 3
35678: PUSH
35679: LD_INT 13
35681: PUSH
35682: LD_INT 14
35684: PUSH
35685: EMPTY
35686: LIST
35687: LIST
35688: ST_TO_ADDR
35689: GO 36180
35691: LD_INT 92
35693: DOUBLE
35694: EQUAL
35695: IFTRUE 35699
35697: GO 35725
35699: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
35700: LD_ADDR_VAR 0 3
35704: PUSH
35705: LD_INT 11
35707: PUSH
35708: LD_INT 12
35710: PUSH
35711: LD_INT 13
35713: PUSH
35714: LD_INT 14
35716: PUSH
35717: EMPTY
35718: LIST
35719: LIST
35720: LIST
35721: LIST
35722: ST_TO_ADDR
35723: GO 36180
35725: LD_INT 28
35727: DOUBLE
35728: EQUAL
35729: IFTRUE 35733
35731: GO 35751
35733: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
35734: LD_ADDR_VAR 0 3
35738: PUSH
35739: LD_INT 13
35741: PUSH
35742: LD_INT 14
35744: PUSH
35745: EMPTY
35746: LIST
35747: LIST
35748: ST_TO_ADDR
35749: GO 36180
35751: LD_INT 29
35753: DOUBLE
35754: EQUAL
35755: IFTRUE 35759
35757: GO 35777
35759: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
35760: LD_ADDR_VAR 0 3
35764: PUSH
35765: LD_INT 13
35767: PUSH
35768: LD_INT 14
35770: PUSH
35771: EMPTY
35772: LIST
35773: LIST
35774: ST_TO_ADDR
35775: GO 36180
35777: LD_INT 31
35779: DOUBLE
35780: EQUAL
35781: IFTRUE 35785
35783: GO 35803
35785: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
35786: LD_ADDR_VAR 0 3
35790: PUSH
35791: LD_INT 13
35793: PUSH
35794: LD_INT 14
35796: PUSH
35797: EMPTY
35798: LIST
35799: LIST
35800: ST_TO_ADDR
35801: GO 36180
35803: LD_INT 26
35805: DOUBLE
35806: EQUAL
35807: IFTRUE 35811
35809: GO 35829
35811: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
35812: LD_ADDR_VAR 0 3
35816: PUSH
35817: LD_INT 13
35819: PUSH
35820: LD_INT 14
35822: PUSH
35823: EMPTY
35824: LIST
35825: LIST
35826: ST_TO_ADDR
35827: GO 36180
35829: LD_INT 42
35831: DOUBLE
35832: EQUAL
35833: IFTRUE 35837
35835: GO 35863
35837: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
35838: LD_ADDR_VAR 0 3
35842: PUSH
35843: LD_INT 21
35845: PUSH
35846: LD_INT 22
35848: PUSH
35849: LD_INT 23
35851: PUSH
35852: LD_INT 24
35854: PUSH
35855: EMPTY
35856: LIST
35857: LIST
35858: LIST
35859: LIST
35860: ST_TO_ADDR
35861: GO 36180
35863: LD_INT 43
35865: DOUBLE
35866: EQUAL
35867: IFTRUE 35871
35869: GO 35897
35871: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
35872: LD_ADDR_VAR 0 3
35876: PUSH
35877: LD_INT 21
35879: PUSH
35880: LD_INT 22
35882: PUSH
35883: LD_INT 23
35885: PUSH
35886: LD_INT 24
35888: PUSH
35889: EMPTY
35890: LIST
35891: LIST
35892: LIST
35893: LIST
35894: ST_TO_ADDR
35895: GO 36180
35897: LD_INT 44
35899: DOUBLE
35900: EQUAL
35901: IFTRUE 35905
35903: GO 35931
35905: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
35906: LD_ADDR_VAR 0 3
35910: PUSH
35911: LD_INT 21
35913: PUSH
35914: LD_INT 22
35916: PUSH
35917: LD_INT 23
35919: PUSH
35920: LD_INT 24
35922: PUSH
35923: EMPTY
35924: LIST
35925: LIST
35926: LIST
35927: LIST
35928: ST_TO_ADDR
35929: GO 36180
35931: LD_INT 45
35933: DOUBLE
35934: EQUAL
35935: IFTRUE 35939
35937: GO 35965
35939: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
35940: LD_ADDR_VAR 0 3
35944: PUSH
35945: LD_INT 21
35947: PUSH
35948: LD_INT 22
35950: PUSH
35951: LD_INT 23
35953: PUSH
35954: LD_INT 24
35956: PUSH
35957: EMPTY
35958: LIST
35959: LIST
35960: LIST
35961: LIST
35962: ST_TO_ADDR
35963: GO 36180
35965: LD_INT 49
35967: DOUBLE
35968: EQUAL
35969: IFTRUE 35973
35971: GO 35999
35973: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
35974: LD_ADDR_VAR 0 3
35978: PUSH
35979: LD_INT 21
35981: PUSH
35982: LD_INT 22
35984: PUSH
35985: LD_INT 23
35987: PUSH
35988: LD_INT 24
35990: PUSH
35991: EMPTY
35992: LIST
35993: LIST
35994: LIST
35995: LIST
35996: ST_TO_ADDR
35997: GO 36180
35999: LD_INT 51
36001: DOUBLE
36002: EQUAL
36003: IFTRUE 36007
36005: GO 36033
36007: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
36008: LD_ADDR_VAR 0 3
36012: PUSH
36013: LD_INT 21
36015: PUSH
36016: LD_INT 22
36018: PUSH
36019: LD_INT 23
36021: PUSH
36022: LD_INT 24
36024: PUSH
36025: EMPTY
36026: LIST
36027: LIST
36028: LIST
36029: LIST
36030: ST_TO_ADDR
36031: GO 36180
36033: LD_INT 52
36035: DOUBLE
36036: EQUAL
36037: IFTRUE 36041
36039: GO 36067
36041: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
36042: LD_ADDR_VAR 0 3
36046: PUSH
36047: LD_INT 21
36049: PUSH
36050: LD_INT 22
36052: PUSH
36053: LD_INT 23
36055: PUSH
36056: LD_INT 24
36058: PUSH
36059: EMPTY
36060: LIST
36061: LIST
36062: LIST
36063: LIST
36064: ST_TO_ADDR
36065: GO 36180
36067: LD_INT 53
36069: DOUBLE
36070: EQUAL
36071: IFTRUE 36075
36073: GO 36093
36075: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
36076: LD_ADDR_VAR 0 3
36080: PUSH
36081: LD_INT 23
36083: PUSH
36084: LD_INT 24
36086: PUSH
36087: EMPTY
36088: LIST
36089: LIST
36090: ST_TO_ADDR
36091: GO 36180
36093: LD_INT 46
36095: DOUBLE
36096: EQUAL
36097: IFTRUE 36101
36099: GO 36119
36101: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
36102: LD_ADDR_VAR 0 3
36106: PUSH
36107: LD_INT 23
36109: PUSH
36110: LD_INT 24
36112: PUSH
36113: EMPTY
36114: LIST
36115: LIST
36116: ST_TO_ADDR
36117: GO 36180
36119: LD_INT 47
36121: DOUBLE
36122: EQUAL
36123: IFTRUE 36127
36125: GO 36145
36127: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_radar :
36128: LD_ADDR_VAR 0 3
36132: PUSH
36133: LD_INT 23
36135: PUSH
36136: LD_INT 24
36138: PUSH
36139: EMPTY
36140: LIST
36141: LIST
36142: ST_TO_ADDR
36143: GO 36180
36145: LD_INT 98
36147: DOUBLE
36148: EQUAL
36149: IFTRUE 36153
36151: GO 36179
36153: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
36154: LD_ADDR_VAR 0 3
36158: PUSH
36159: LD_INT 21
36161: PUSH
36162: LD_INT 22
36164: PUSH
36165: LD_INT 23
36167: PUSH
36168: LD_INT 24
36170: PUSH
36171: EMPTY
36172: LIST
36173: LIST
36174: LIST
36175: LIST
36176: ST_TO_ADDR
36177: GO 36180
36179: POP
// result := ( chassis in result ) ;
36180: LD_ADDR_VAR 0 3
36184: PUSH
36185: LD_VAR 0 1
36189: PUSH
36190: LD_VAR 0 3
36194: IN
36195: ST_TO_ADDR
// end ;
36196: LD_VAR 0 3
36200: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
36201: LD_INT 0
36203: PPUSH
36204: PPUSH
36205: PPUSH
36206: PPUSH
36207: PPUSH
36208: PPUSH
36209: PPUSH
// result := array ;
36210: LD_ADDR_VAR 0 5
36214: PUSH
36215: LD_VAR 0 1
36219: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
36220: LD_VAR 0 1
36224: NOT
36225: IFTRUE 36234
36227: PUSH
36228: LD_VAR 0 2
36232: NOT
36233: OR
36234: IFTRUE 36243
36236: PUSH
36237: LD_VAR 0 3
36241: NOT
36242: OR
36243: IFTRUE 36257
36245: PUSH
36246: LD_VAR 0 2
36250: PUSH
36251: LD_VAR 0 1
36255: GREATER
36256: OR
36257: IFTRUE 36271
36259: PUSH
36260: LD_VAR 0 3
36264: PUSH
36265: LD_VAR 0 1
36269: GREATER
36270: OR
36271: IFFALSE 36275
// exit ;
36273: GO 36571
// if direction then
36275: LD_VAR 0 4
36279: IFFALSE 36343
// begin d := 1 ;
36281: LD_ADDR_VAR 0 9
36285: PUSH
36286: LD_INT 1
36288: ST_TO_ADDR
// if i_from > i_to then
36289: LD_VAR 0 2
36293: PUSH
36294: LD_VAR 0 3
36298: GREATER
36299: IFFALSE 36325
// length := ( array - i_from ) + i_to else
36301: LD_ADDR_VAR 0 11
36305: PUSH
36306: LD_VAR 0 1
36310: PUSH
36311: LD_VAR 0 2
36315: MINUS
36316: PUSH
36317: LD_VAR 0 3
36321: PLUS
36322: ST_TO_ADDR
36323: GO 36341
// length := i_to - i_from ;
36325: LD_ADDR_VAR 0 11
36329: PUSH
36330: LD_VAR 0 3
36334: PUSH
36335: LD_VAR 0 2
36339: MINUS
36340: ST_TO_ADDR
// end else
36341: GO 36404
// begin d := - 1 ;
36343: LD_ADDR_VAR 0 9
36347: PUSH
36348: LD_INT 1
36350: NEG
36351: ST_TO_ADDR
// if i_from > i_to then
36352: LD_VAR 0 2
36356: PUSH
36357: LD_VAR 0 3
36361: GREATER
36362: IFFALSE 36382
// length := i_from - i_to else
36364: LD_ADDR_VAR 0 11
36368: PUSH
36369: LD_VAR 0 2
36373: PUSH
36374: LD_VAR 0 3
36378: MINUS
36379: ST_TO_ADDR
36380: GO 36404
// length := ( array - i_to ) + i_from ;
36382: LD_ADDR_VAR 0 11
36386: PUSH
36387: LD_VAR 0 1
36391: PUSH
36392: LD_VAR 0 3
36396: MINUS
36397: PUSH
36398: LD_VAR 0 2
36402: PLUS
36403: ST_TO_ADDR
// end ; if not length then
36404: LD_VAR 0 11
36408: NOT
36409: IFFALSE 36413
// exit ;
36411: GO 36571
// tmp := array ;
36413: LD_ADDR_VAR 0 10
36417: PUSH
36418: LD_VAR 0 1
36422: ST_TO_ADDR
// for i = 1 to length do
36423: LD_ADDR_VAR 0 6
36427: PUSH
36428: DOUBLE
36429: LD_INT 1
36431: DEC
36432: ST_TO_ADDR
36433: LD_VAR 0 11
36437: PUSH
36438: FOR_TO
36439: IFFALSE 36559
// begin for j = 1 to array do
36441: LD_ADDR_VAR 0 7
36445: PUSH
36446: DOUBLE
36447: LD_INT 1
36449: DEC
36450: ST_TO_ADDR
36451: LD_VAR 0 1
36455: PUSH
36456: FOR_TO
36457: IFFALSE 36545
// begin k := j + d ;
36459: LD_ADDR_VAR 0 8
36463: PUSH
36464: LD_VAR 0 7
36468: PUSH
36469: LD_VAR 0 9
36473: PLUS
36474: ST_TO_ADDR
// if k > array then
36475: LD_VAR 0 8
36479: PUSH
36480: LD_VAR 0 1
36484: GREATER
36485: IFFALSE 36495
// k := 1 ;
36487: LD_ADDR_VAR 0 8
36491: PUSH
36492: LD_INT 1
36494: ST_TO_ADDR
// if not k then
36495: LD_VAR 0 8
36499: NOT
36500: IFFALSE 36512
// k := array ;
36502: LD_ADDR_VAR 0 8
36506: PUSH
36507: LD_VAR 0 1
36511: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
36512: LD_ADDR_VAR 0 10
36516: PUSH
36517: LD_VAR 0 10
36521: PPUSH
36522: LD_VAR 0 8
36526: PPUSH
36527: LD_VAR 0 1
36531: PUSH
36532: LD_VAR 0 7
36536: ARRAY
36537: PPUSH
36538: CALL_OW 1
36542: ST_TO_ADDR
// end ;
36543: GO 36456
36545: POP
36546: POP
// array := tmp ;
36547: LD_ADDR_VAR 0 1
36551: PUSH
36552: LD_VAR 0 10
36556: ST_TO_ADDR
// end ;
36557: GO 36438
36559: POP
36560: POP
// result := array ;
36561: LD_ADDR_VAR 0 5
36565: PUSH
36566: LD_VAR 0 1
36570: ST_TO_ADDR
// end ;
36571: LD_VAR 0 5
36575: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
36576: LD_INT 0
36578: PPUSH
36579: PPUSH
// result := 0 ;
36580: LD_ADDR_VAR 0 3
36584: PUSH
36585: LD_INT 0
36587: ST_TO_ADDR
// if not array or not value in array then
36588: LD_VAR 0 1
36592: NOT
36593: IFTRUE 36608
36595: PUSH
36596: LD_VAR 0 2
36600: PUSH
36601: LD_VAR 0 1
36605: IN
36606: NOT
36607: OR
36608: IFFALSE 36612
// exit ;
36610: GO 36666
// for i = 1 to array do
36612: LD_ADDR_VAR 0 4
36616: PUSH
36617: DOUBLE
36618: LD_INT 1
36620: DEC
36621: ST_TO_ADDR
36622: LD_VAR 0 1
36626: PUSH
36627: FOR_TO
36628: IFFALSE 36664
// if value = array [ i ] then
36630: LD_VAR 0 2
36634: PUSH
36635: LD_VAR 0 1
36639: PUSH
36640: LD_VAR 0 4
36644: ARRAY
36645: EQUAL
36646: IFFALSE 36662
// begin result := i ;
36648: LD_ADDR_VAR 0 3
36652: PUSH
36653: LD_VAR 0 4
36657: ST_TO_ADDR
// exit ;
36658: POP
36659: POP
36660: GO 36666
// end ;
36662: GO 36627
36664: POP
36665: POP
// end ;
36666: LD_VAR 0 3
36670: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
36671: LD_INT 0
36673: PPUSH
// vc_chassis := chassis ;
36674: LD_ADDR_OWVAR 37
36678: PUSH
36679: LD_VAR 0 1
36683: ST_TO_ADDR
// vc_engine := engine ;
36684: LD_ADDR_OWVAR 39
36688: PUSH
36689: LD_VAR 0 2
36693: ST_TO_ADDR
// vc_control := control ;
36694: LD_ADDR_OWVAR 38
36698: PUSH
36699: LD_VAR 0 3
36703: ST_TO_ADDR
// vc_weapon := weapon ;
36704: LD_ADDR_OWVAR 40
36708: PUSH
36709: LD_VAR 0 4
36713: ST_TO_ADDR
// vc_fuel_battery := fuel ;
36714: LD_ADDR_OWVAR 41
36718: PUSH
36719: LD_VAR 0 5
36723: ST_TO_ADDR
// end ;
36724: LD_VAR 0 6
36728: RET
// export function WantPlant ( unit ) ; var task ; begin
36729: LD_INT 0
36731: PPUSH
36732: PPUSH
// result := false ;
36733: LD_ADDR_VAR 0 2
36737: PUSH
36738: LD_INT 0
36740: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
36741: LD_ADDR_VAR 0 3
36745: PUSH
36746: LD_VAR 0 1
36750: PPUSH
36751: CALL_OW 437
36755: ST_TO_ADDR
// if task then
36756: LD_VAR 0 3
36760: IFFALSE 36788
// if task [ 1 ] [ 1 ] = p then
36762: LD_VAR 0 3
36766: PUSH
36767: LD_INT 1
36769: ARRAY
36770: PUSH
36771: LD_INT 1
36773: ARRAY
36774: PUSH
36775: LD_STRING p
36777: EQUAL
36778: IFFALSE 36788
// result := true ;
36780: LD_ADDR_VAR 0 2
36784: PUSH
36785: LD_INT 1
36787: ST_TO_ADDR
// end ;
36788: LD_VAR 0 2
36792: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
36793: LD_INT 0
36795: PPUSH
36796: PPUSH
36797: PPUSH
36798: PPUSH
// if pos < 1 then
36799: LD_VAR 0 2
36803: PUSH
36804: LD_INT 1
36806: LESS
36807: IFFALSE 36811
// exit ;
36809: GO 37114
// if pos = 1 then
36811: LD_VAR 0 2
36815: PUSH
36816: LD_INT 1
36818: EQUAL
36819: IFFALSE 36852
// result := Replace ( arr , pos [ 1 ] , value ) else
36821: LD_ADDR_VAR 0 4
36825: PUSH
36826: LD_VAR 0 1
36830: PPUSH
36831: LD_VAR 0 2
36835: PUSH
36836: LD_INT 1
36838: ARRAY
36839: PPUSH
36840: LD_VAR 0 3
36844: PPUSH
36845: CALL_OW 1
36849: ST_TO_ADDR
36850: GO 37114
// begin tmp := arr ;
36852: LD_ADDR_VAR 0 6
36856: PUSH
36857: LD_VAR 0 1
36861: ST_TO_ADDR
// s_arr := [ tmp ] ;
36862: LD_ADDR_VAR 0 7
36866: PUSH
36867: LD_VAR 0 6
36871: PUSH
36872: EMPTY
36873: LIST
36874: ST_TO_ADDR
// for i = 1 to pos - 1 do
36875: LD_ADDR_VAR 0 5
36879: PUSH
36880: DOUBLE
36881: LD_INT 1
36883: DEC
36884: ST_TO_ADDR
36885: LD_VAR 0 2
36889: PUSH
36890: LD_INT 1
36892: MINUS
36893: PUSH
36894: FOR_TO
36895: IFFALSE 36940
// begin tmp := tmp [ pos [ i ] ] ;
36897: LD_ADDR_VAR 0 6
36901: PUSH
36902: LD_VAR 0 6
36906: PUSH
36907: LD_VAR 0 2
36911: PUSH
36912: LD_VAR 0 5
36916: ARRAY
36917: ARRAY
36918: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
36919: LD_ADDR_VAR 0 7
36923: PUSH
36924: LD_VAR 0 7
36928: PUSH
36929: LD_VAR 0 6
36933: PUSH
36934: EMPTY
36935: LIST
36936: ADD
36937: ST_TO_ADDR
// end ;
36938: GO 36894
36940: POP
36941: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
36942: LD_ADDR_VAR 0 6
36946: PUSH
36947: LD_VAR 0 6
36951: PPUSH
36952: LD_VAR 0 2
36956: PUSH
36957: LD_VAR 0 2
36961: ARRAY
36962: PPUSH
36963: LD_VAR 0 3
36967: PPUSH
36968: CALL_OW 1
36972: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
36973: LD_ADDR_VAR 0 7
36977: PUSH
36978: LD_VAR 0 7
36982: PPUSH
36983: LD_VAR 0 7
36987: PPUSH
36988: LD_VAR 0 6
36992: PPUSH
36993: CALL_OW 1
36997: ST_TO_ADDR
// for i = s_arr downto 2 do
36998: LD_ADDR_VAR 0 5
37002: PUSH
37003: DOUBLE
37004: LD_VAR 0 7
37008: INC
37009: ST_TO_ADDR
37010: LD_INT 2
37012: PUSH
37013: FOR_DOWNTO
37014: IFFALSE 37098
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
37016: LD_ADDR_VAR 0 6
37020: PUSH
37021: LD_VAR 0 7
37025: PUSH
37026: LD_VAR 0 5
37030: PUSH
37031: LD_INT 1
37033: MINUS
37034: ARRAY
37035: PPUSH
37036: LD_VAR 0 2
37040: PUSH
37041: LD_VAR 0 5
37045: PUSH
37046: LD_INT 1
37048: MINUS
37049: ARRAY
37050: PPUSH
37051: LD_VAR 0 7
37055: PUSH
37056: LD_VAR 0 5
37060: ARRAY
37061: PPUSH
37062: CALL_OW 1
37066: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
37067: LD_ADDR_VAR 0 7
37071: PUSH
37072: LD_VAR 0 7
37076: PPUSH
37077: LD_VAR 0 5
37081: PUSH
37082: LD_INT 1
37084: MINUS
37085: PPUSH
37086: LD_VAR 0 6
37090: PPUSH
37091: CALL_OW 1
37095: ST_TO_ADDR
// end ;
37096: GO 37013
37098: POP
37099: POP
// result := s_arr [ 1 ] ;
37100: LD_ADDR_VAR 0 4
37104: PUSH
37105: LD_VAR 0 7
37109: PUSH
37110: LD_INT 1
37112: ARRAY
37113: ST_TO_ADDR
// end ; end ;
37114: LD_VAR 0 4
37118: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
37119: LD_INT 0
37121: PPUSH
37122: PPUSH
// if not list then
37123: LD_VAR 0 1
37127: NOT
37128: IFFALSE 37132
// exit ;
37130: GO 37223
// i := list [ pos1 ] ;
37132: LD_ADDR_VAR 0 5
37136: PUSH
37137: LD_VAR 0 1
37141: PUSH
37142: LD_VAR 0 2
37146: ARRAY
37147: ST_TO_ADDR
// if not i then
37148: LD_VAR 0 5
37152: NOT
37153: IFFALSE 37157
// exit ;
37155: GO 37223
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
37157: LD_ADDR_VAR 0 1
37161: PUSH
37162: LD_VAR 0 1
37166: PPUSH
37167: LD_VAR 0 2
37171: PPUSH
37172: LD_VAR 0 1
37176: PUSH
37177: LD_VAR 0 3
37181: ARRAY
37182: PPUSH
37183: CALL_OW 1
37187: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
37188: LD_ADDR_VAR 0 1
37192: PUSH
37193: LD_VAR 0 1
37197: PPUSH
37198: LD_VAR 0 3
37202: PPUSH
37203: LD_VAR 0 5
37207: PPUSH
37208: CALL_OW 1
37212: ST_TO_ADDR
// result := list ;
37213: LD_ADDR_VAR 0 4
37217: PUSH
37218: LD_VAR 0 1
37222: ST_TO_ADDR
// end ;
37223: LD_VAR 0 4
37227: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
37228: LD_INT 0
37230: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
37231: LD_ADDR_VAR 0 5
37235: PUSH
37236: LD_VAR 0 1
37240: PPUSH
37241: CALL_OW 250
37245: PPUSH
37246: LD_VAR 0 1
37250: PPUSH
37251: CALL_OW 251
37255: PPUSH
37256: LD_VAR 0 2
37260: PPUSH
37261: LD_VAR 0 3
37265: PPUSH
37266: LD_VAR 0 4
37270: PPUSH
37271: CALL 37653 0 5
37275: ST_TO_ADDR
// end ;
37276: LD_VAR 0 5
37280: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
37281: LD_INT 0
37283: PPUSH
37284: PPUSH
37285: PPUSH
37286: PPUSH
// if not list or not unit then
37287: LD_VAR 0 2
37291: NOT
37292: IFTRUE 37301
37294: PUSH
37295: LD_VAR 0 1
37299: NOT
37300: OR
37301: IFFALSE 37305
// exit ;
37303: GO 37648
// result := [ ] ;
37305: LD_ADDR_VAR 0 5
37309: PUSH
37310: EMPTY
37311: ST_TO_ADDR
// for i in list do
37312: LD_ADDR_VAR 0 6
37316: PUSH
37317: LD_VAR 0 2
37321: PUSH
37322: FOR_IN
37323: IFFALSE 37541
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
37325: LD_ADDR_VAR 0 8
37329: PUSH
37330: LD_VAR 0 1
37334: PPUSH
37335: LD_VAR 0 6
37339: PUSH
37340: LD_INT 1
37342: ARRAY
37343: PPUSH
37344: LD_VAR 0 6
37348: PUSH
37349: LD_INT 2
37351: ARRAY
37352: PPUSH
37353: CALL_OW 297
37357: ST_TO_ADDR
// if not Count ( result ) then
37358: LD_VAR 0 5
37362: PPUSH
37363: CALL 33875 0 1
37367: NOT
37368: IFFALSE 37401
// begin result := Join ( result , [ i , tmp ] ) ;
37370: LD_ADDR_VAR 0 5
37374: PUSH
37375: LD_VAR 0 5
37379: PPUSH
37380: LD_VAR 0 6
37384: PUSH
37385: LD_VAR 0 8
37389: PUSH
37390: EMPTY
37391: LIST
37392: LIST
37393: PPUSH
37394: CALL 69851 0 2
37398: ST_TO_ADDR
// continue ;
37399: GO 37322
// end ; if result [ result ] [ 2 ] <= tmp then
37401: LD_VAR 0 5
37405: PUSH
37406: LD_VAR 0 5
37410: ARRAY
37411: PUSH
37412: LD_INT 2
37414: ARRAY
37415: PUSH
37416: LD_VAR 0 8
37420: LESSEQUAL
37421: IFFALSE 37454
// result := Join ( result , [ i , tmp ] ) else
37423: LD_ADDR_VAR 0 5
37427: PUSH
37428: LD_VAR 0 5
37432: PPUSH
37433: LD_VAR 0 6
37437: PUSH
37438: LD_VAR 0 8
37442: PUSH
37443: EMPTY
37444: LIST
37445: LIST
37446: PPUSH
37447: CALL 69851 0 2
37451: ST_TO_ADDR
37452: GO 37539
// begin for j := 1 to Count ( result ) do
37454: LD_ADDR_VAR 0 7
37458: PUSH
37459: DOUBLE
37460: LD_INT 1
37462: DEC
37463: ST_TO_ADDR
37464: LD_VAR 0 5
37468: PPUSH
37469: CALL 33875 0 1
37473: PUSH
37474: FOR_TO
37475: IFFALSE 37537
// begin if tmp < result [ j ] [ 2 ] then
37477: LD_VAR 0 8
37481: PUSH
37482: LD_VAR 0 5
37486: PUSH
37487: LD_VAR 0 7
37491: ARRAY
37492: PUSH
37493: LD_INT 2
37495: ARRAY
37496: LESS
37497: IFFALSE 37535
// begin result := Insert ( result , j , [ i , tmp ] ) ;
37499: LD_ADDR_VAR 0 5
37503: PUSH
37504: LD_VAR 0 5
37508: PPUSH
37509: LD_VAR 0 7
37513: PPUSH
37514: LD_VAR 0 6
37518: PUSH
37519: LD_VAR 0 8
37523: PUSH
37524: EMPTY
37525: LIST
37526: LIST
37527: PPUSH
37528: CALL_OW 2
37532: ST_TO_ADDR
// break ;
37533: GO 37537
// end ; end ;
37535: GO 37474
37537: POP
37538: POP
// end ; end ;
37539: GO 37322
37541: POP
37542: POP
// if result and not asc then
37543: LD_VAR 0 5
37547: IFFALSE 37556
37549: PUSH
37550: LD_VAR 0 3
37554: NOT
37555: AND
37556: IFFALSE 37573
// result := ReverseArray ( result ) ;
37558: LD_ADDR_VAR 0 5
37562: PUSH
37563: LD_VAR 0 5
37567: PPUSH
37568: CALL 64931 0 1
37572: ST_TO_ADDR
// tmp := [ ] ;
37573: LD_ADDR_VAR 0 8
37577: PUSH
37578: EMPTY
37579: ST_TO_ADDR
// if mode then
37580: LD_VAR 0 4
37584: IFFALSE 37648
// begin for i := 1 to result do
37586: LD_ADDR_VAR 0 6
37590: PUSH
37591: DOUBLE
37592: LD_INT 1
37594: DEC
37595: ST_TO_ADDR
37596: LD_VAR 0 5
37600: PUSH
37601: FOR_TO
37602: IFFALSE 37636
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
37604: LD_ADDR_VAR 0 8
37608: PUSH
37609: LD_VAR 0 8
37613: PPUSH
37614: LD_VAR 0 5
37618: PUSH
37619: LD_VAR 0 6
37623: ARRAY
37624: PUSH
37625: LD_INT 1
37627: ARRAY
37628: PPUSH
37629: CALL 69851 0 2
37633: ST_TO_ADDR
37634: GO 37601
37636: POP
37637: POP
// result := tmp ;
37638: LD_ADDR_VAR 0 5
37642: PUSH
37643: LD_VAR 0 8
37647: ST_TO_ADDR
// end ; end ;
37648: LD_VAR 0 5
37652: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
37653: LD_INT 0
37655: PPUSH
37656: PPUSH
37657: PPUSH
37658: PPUSH
// if not list then
37659: LD_VAR 0 3
37663: NOT
37664: IFFALSE 37668
// exit ;
37666: GO 38058
// result := [ ] ;
37668: LD_ADDR_VAR 0 6
37672: PUSH
37673: EMPTY
37674: ST_TO_ADDR
// for i in list do
37675: LD_ADDR_VAR 0 7
37679: PUSH
37680: LD_VAR 0 3
37684: PUSH
37685: FOR_IN
37686: IFFALSE 37888
// begin tmp := GetDistUnitXY ( i , x , y ) ;
37688: LD_ADDR_VAR 0 9
37692: PUSH
37693: LD_VAR 0 7
37697: PPUSH
37698: LD_VAR 0 1
37702: PPUSH
37703: LD_VAR 0 2
37707: PPUSH
37708: CALL_OW 297
37712: ST_TO_ADDR
// if not result then
37713: LD_VAR 0 6
37717: NOT
37718: IFFALSE 37744
// result := [ [ i , tmp ] ] else
37720: LD_ADDR_VAR 0 6
37724: PUSH
37725: LD_VAR 0 7
37729: PUSH
37730: LD_VAR 0 9
37734: PUSH
37735: EMPTY
37736: LIST
37737: LIST
37738: PUSH
37739: EMPTY
37740: LIST
37741: ST_TO_ADDR
37742: GO 37886
// begin if result [ result ] [ 2 ] <= tmp then
37744: LD_VAR 0 6
37748: PUSH
37749: LD_VAR 0 6
37753: ARRAY
37754: PUSH
37755: LD_INT 2
37757: ARRAY
37758: PUSH
37759: LD_VAR 0 9
37763: LESSEQUAL
37764: IFFALSE 37806
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
37766: LD_ADDR_VAR 0 6
37770: PUSH
37771: LD_VAR 0 6
37775: PPUSH
37776: LD_VAR 0 6
37780: PUSH
37781: LD_INT 1
37783: PLUS
37784: PPUSH
37785: LD_VAR 0 7
37789: PUSH
37790: LD_VAR 0 9
37794: PUSH
37795: EMPTY
37796: LIST
37797: LIST
37798: PPUSH
37799: CALL_OW 2
37803: ST_TO_ADDR
37804: GO 37886
// for j := 1 to result do
37806: LD_ADDR_VAR 0 8
37810: PUSH
37811: DOUBLE
37812: LD_INT 1
37814: DEC
37815: ST_TO_ADDR
37816: LD_VAR 0 6
37820: PUSH
37821: FOR_TO
37822: IFFALSE 37884
// begin if tmp < result [ j ] [ 2 ] then
37824: LD_VAR 0 9
37828: PUSH
37829: LD_VAR 0 6
37833: PUSH
37834: LD_VAR 0 8
37838: ARRAY
37839: PUSH
37840: LD_INT 2
37842: ARRAY
37843: LESS
37844: IFFALSE 37882
// begin result := Insert ( result , j , [ i , tmp ] ) ;
37846: LD_ADDR_VAR 0 6
37850: PUSH
37851: LD_VAR 0 6
37855: PPUSH
37856: LD_VAR 0 8
37860: PPUSH
37861: LD_VAR 0 7
37865: PUSH
37866: LD_VAR 0 9
37870: PUSH
37871: EMPTY
37872: LIST
37873: LIST
37874: PPUSH
37875: CALL_OW 2
37879: ST_TO_ADDR
// break ;
37880: GO 37884
// end ; end ;
37882: GO 37821
37884: POP
37885: POP
// end ; end ;
37886: GO 37685
37888: POP
37889: POP
// if result and not asc then
37890: LD_VAR 0 6
37894: IFFALSE 37903
37896: PUSH
37897: LD_VAR 0 4
37901: NOT
37902: AND
37903: IFFALSE 37978
// begin tmp := result ;
37905: LD_ADDR_VAR 0 9
37909: PUSH
37910: LD_VAR 0 6
37914: ST_TO_ADDR
// for i = tmp downto 1 do
37915: LD_ADDR_VAR 0 7
37919: PUSH
37920: DOUBLE
37921: LD_VAR 0 9
37925: INC
37926: ST_TO_ADDR
37927: LD_INT 1
37929: PUSH
37930: FOR_DOWNTO
37931: IFFALSE 37976
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
37933: LD_ADDR_VAR 0 6
37937: PUSH
37938: LD_VAR 0 6
37942: PPUSH
37943: LD_VAR 0 9
37947: PUSH
37948: LD_VAR 0 7
37952: MINUS
37953: PUSH
37954: LD_INT 1
37956: PLUS
37957: PPUSH
37958: LD_VAR 0 9
37962: PUSH
37963: LD_VAR 0 7
37967: ARRAY
37968: PPUSH
37969: CALL_OW 1
37973: ST_TO_ADDR
37974: GO 37930
37976: POP
37977: POP
// end ; tmp := [ ] ;
37978: LD_ADDR_VAR 0 9
37982: PUSH
37983: EMPTY
37984: ST_TO_ADDR
// if mode then
37985: LD_VAR 0 5
37989: IFFALSE 38058
// begin for i = 1 to result do
37991: LD_ADDR_VAR 0 7
37995: PUSH
37996: DOUBLE
37997: LD_INT 1
37999: DEC
38000: ST_TO_ADDR
38001: LD_VAR 0 6
38005: PUSH
38006: FOR_TO
38007: IFFALSE 38046
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
38009: LD_ADDR_VAR 0 9
38013: PUSH
38014: LD_VAR 0 9
38018: PPUSH
38019: LD_VAR 0 7
38023: PPUSH
38024: LD_VAR 0 6
38028: PUSH
38029: LD_VAR 0 7
38033: ARRAY
38034: PUSH
38035: LD_INT 1
38037: ARRAY
38038: PPUSH
38039: CALL_OW 1
38043: ST_TO_ADDR
38044: GO 38006
38046: POP
38047: POP
// result := tmp ;
38048: LD_ADDR_VAR 0 6
38052: PUSH
38053: LD_VAR 0 9
38057: ST_TO_ADDR
// end ; end ;
38058: LD_VAR 0 6
38062: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
38063: LD_INT 0
38065: PPUSH
38066: PPUSH
38067: PPUSH
38068: PPUSH
38069: PPUSH
38070: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
38071: LD_ADDR_VAR 0 5
38075: PUSH
38076: LD_INT 0
38078: PUSH
38079: LD_INT 0
38081: PUSH
38082: LD_INT 0
38084: PUSH
38085: EMPTY
38086: PUSH
38087: EMPTY
38088: LIST
38089: LIST
38090: LIST
38091: LIST
38092: ST_TO_ADDR
// if not x or not y then
38093: LD_VAR 0 2
38097: NOT
38098: IFTRUE 38107
38100: PUSH
38101: LD_VAR 0 3
38105: NOT
38106: OR
38107: IFFALSE 38111
// exit ;
38109: GO 39767
// if not range then
38111: LD_VAR 0 4
38115: NOT
38116: IFFALSE 38126
// range := 10 ;
38118: LD_ADDR_VAR 0 4
38122: PUSH
38123: LD_INT 10
38125: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
38126: LD_ADDR_VAR 0 8
38130: PUSH
38131: LD_INT 81
38133: PUSH
38134: LD_VAR 0 1
38138: PUSH
38139: EMPTY
38140: LIST
38141: LIST
38142: PUSH
38143: LD_INT 92
38145: PUSH
38146: LD_VAR 0 2
38150: PUSH
38151: LD_VAR 0 3
38155: PUSH
38156: LD_VAR 0 4
38160: PUSH
38161: EMPTY
38162: LIST
38163: LIST
38164: LIST
38165: LIST
38166: PUSH
38167: LD_INT 3
38169: PUSH
38170: LD_INT 21
38172: PUSH
38173: LD_INT 3
38175: PUSH
38176: EMPTY
38177: LIST
38178: LIST
38179: PUSH
38180: EMPTY
38181: LIST
38182: LIST
38183: PUSH
38184: EMPTY
38185: LIST
38186: LIST
38187: LIST
38188: PPUSH
38189: CALL_OW 69
38193: ST_TO_ADDR
// if not tmp then
38194: LD_VAR 0 8
38198: NOT
38199: IFFALSE 38203
// exit ;
38201: GO 39767
// for i in tmp do
38203: LD_ADDR_VAR 0 6
38207: PUSH
38208: LD_VAR 0 8
38212: PUSH
38213: FOR_IN
38214: IFFALSE 39742
// begin points := [ 0 , 0 , 0 ] ;
38216: LD_ADDR_VAR 0 9
38220: PUSH
38221: LD_INT 0
38223: PUSH
38224: LD_INT 0
38226: PUSH
38227: LD_INT 0
38229: PUSH
38230: EMPTY
38231: LIST
38232: LIST
38233: LIST
38234: ST_TO_ADDR
// bpoints := 1 ;
38235: LD_ADDR_VAR 0 10
38239: PUSH
38240: LD_INT 1
38242: ST_TO_ADDR
// case GetType ( i ) of unit_human :
38243: LD_VAR 0 6
38247: PPUSH
38248: CALL_OW 247
38252: PUSH
38253: LD_INT 1
38255: DOUBLE
38256: EQUAL
38257: IFTRUE 38261
38259: GO 38843
38261: POP
// begin if GetClass ( i ) = 1 then
38262: LD_VAR 0 6
38266: PPUSH
38267: CALL_OW 257
38271: PUSH
38272: LD_INT 1
38274: EQUAL
38275: IFFALSE 38296
// points := [ 10 , 5 , 3 ] ;
38277: LD_ADDR_VAR 0 9
38281: PUSH
38282: LD_INT 10
38284: PUSH
38285: LD_INT 5
38287: PUSH
38288: LD_INT 3
38290: PUSH
38291: EMPTY
38292: LIST
38293: LIST
38294: LIST
38295: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
38296: LD_VAR 0 6
38300: PPUSH
38301: CALL_OW 257
38305: PUSH
38306: LD_INT 2
38308: PUSH
38309: LD_INT 3
38311: PUSH
38312: LD_INT 4
38314: PUSH
38315: EMPTY
38316: LIST
38317: LIST
38318: LIST
38319: IN
38320: IFFALSE 38341
// points := [ 3 , 2 , 1 ] ;
38322: LD_ADDR_VAR 0 9
38326: PUSH
38327: LD_INT 3
38329: PUSH
38330: LD_INT 2
38332: PUSH
38333: LD_INT 1
38335: PUSH
38336: EMPTY
38337: LIST
38338: LIST
38339: LIST
38340: ST_TO_ADDR
// if GetClass ( i ) = 5 then
38341: LD_VAR 0 6
38345: PPUSH
38346: CALL_OW 257
38350: PUSH
38351: LD_INT 5
38353: EQUAL
38354: IFFALSE 38375
// points := [ 130 , 5 , 2 ] ;
38356: LD_ADDR_VAR 0 9
38360: PUSH
38361: LD_INT 130
38363: PUSH
38364: LD_INT 5
38366: PUSH
38367: LD_INT 2
38369: PUSH
38370: EMPTY
38371: LIST
38372: LIST
38373: LIST
38374: ST_TO_ADDR
// if GetClass ( i ) = 8 then
38375: LD_VAR 0 6
38379: PPUSH
38380: CALL_OW 257
38384: PUSH
38385: LD_INT 8
38387: EQUAL
38388: IFFALSE 38409
// points := [ 35 , 35 , 30 ] ;
38390: LD_ADDR_VAR 0 9
38394: PUSH
38395: LD_INT 35
38397: PUSH
38398: LD_INT 35
38400: PUSH
38401: LD_INT 30
38403: PUSH
38404: EMPTY
38405: LIST
38406: LIST
38407: LIST
38408: ST_TO_ADDR
// if GetClass ( i ) = 9 then
38409: LD_VAR 0 6
38413: PPUSH
38414: CALL_OW 257
38418: PUSH
38419: LD_INT 9
38421: EQUAL
38422: IFFALSE 38443
// points := [ 20 , 55 , 40 ] ;
38424: LD_ADDR_VAR 0 9
38428: PUSH
38429: LD_INT 20
38431: PUSH
38432: LD_INT 55
38434: PUSH
38435: LD_INT 40
38437: PUSH
38438: EMPTY
38439: LIST
38440: LIST
38441: LIST
38442: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
38443: LD_VAR 0 6
38447: PPUSH
38448: CALL_OW 257
38452: PUSH
38453: LD_INT 12
38455: PUSH
38456: LD_INT 16
38458: PUSH
38459: EMPTY
38460: LIST
38461: LIST
38462: IN
38463: IFFALSE 38484
// points := [ 5 , 3 , 2 ] ;
38465: LD_ADDR_VAR 0 9
38469: PUSH
38470: LD_INT 5
38472: PUSH
38473: LD_INT 3
38475: PUSH
38476: LD_INT 2
38478: PUSH
38479: EMPTY
38480: LIST
38481: LIST
38482: LIST
38483: ST_TO_ADDR
// if GetClass ( i ) = 17 then
38484: LD_VAR 0 6
38488: PPUSH
38489: CALL_OW 257
38493: PUSH
38494: LD_INT 17
38496: EQUAL
38497: IFFALSE 38518
// points := [ 100 , 50 , 75 ] ;
38499: LD_ADDR_VAR 0 9
38503: PUSH
38504: LD_INT 100
38506: PUSH
38507: LD_INT 50
38509: PUSH
38510: LD_INT 75
38512: PUSH
38513: EMPTY
38514: LIST
38515: LIST
38516: LIST
38517: ST_TO_ADDR
// if GetClass ( i ) = 15 then
38518: LD_VAR 0 6
38522: PPUSH
38523: CALL_OW 257
38527: PUSH
38528: LD_INT 15
38530: EQUAL
38531: IFFALSE 38552
// points := [ 10 , 5 , 3 ] ;
38533: LD_ADDR_VAR 0 9
38537: PUSH
38538: LD_INT 10
38540: PUSH
38541: LD_INT 5
38543: PUSH
38544: LD_INT 3
38546: PUSH
38547: EMPTY
38548: LIST
38549: LIST
38550: LIST
38551: ST_TO_ADDR
// if GetClass ( i ) = 14 then
38552: LD_VAR 0 6
38556: PPUSH
38557: CALL_OW 257
38561: PUSH
38562: LD_INT 14
38564: EQUAL
38565: IFFALSE 38586
// points := [ 10 , 0 , 0 ] ;
38567: LD_ADDR_VAR 0 9
38571: PUSH
38572: LD_INT 10
38574: PUSH
38575: LD_INT 0
38577: PUSH
38578: LD_INT 0
38580: PUSH
38581: EMPTY
38582: LIST
38583: LIST
38584: LIST
38585: ST_TO_ADDR
// if GetClass ( i ) = 11 then
38586: LD_VAR 0 6
38590: PPUSH
38591: CALL_OW 257
38595: PUSH
38596: LD_INT 11
38598: EQUAL
38599: IFFALSE 38620
// points := [ 30 , 10 , 5 ] ;
38601: LD_ADDR_VAR 0 9
38605: PUSH
38606: LD_INT 30
38608: PUSH
38609: LD_INT 10
38611: PUSH
38612: LD_INT 5
38614: PUSH
38615: EMPTY
38616: LIST
38617: LIST
38618: LIST
38619: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
38620: LD_VAR 0 1
38624: PPUSH
38625: LD_INT 5
38627: PPUSH
38628: CALL_OW 321
38632: PUSH
38633: LD_INT 2
38635: EQUAL
38636: IFFALSE 38653
// bpoints := bpoints * 1.8 ;
38638: LD_ADDR_VAR 0 10
38642: PUSH
38643: LD_VAR 0 10
38647: PUSH
38648: LD_REAL  1.80000000000000E+0000
38651: MUL
38652: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
38653: LD_VAR 0 6
38657: PPUSH
38658: CALL_OW 257
38662: PUSH
38663: LD_INT 1
38665: PUSH
38666: LD_INT 2
38668: PUSH
38669: LD_INT 3
38671: PUSH
38672: LD_INT 4
38674: PUSH
38675: EMPTY
38676: LIST
38677: LIST
38678: LIST
38679: LIST
38680: IN
38681: IFFALSE 38701
38683: PUSH
38684: LD_VAR 0 1
38688: PPUSH
38689: LD_INT 51
38691: PPUSH
38692: CALL_OW 321
38696: PUSH
38697: LD_INT 2
38699: EQUAL
38700: AND
38701: IFFALSE 38718
// bpoints := bpoints * 1.2 ;
38703: LD_ADDR_VAR 0 10
38707: PUSH
38708: LD_VAR 0 10
38712: PUSH
38713: LD_REAL  1.20000000000000E+0000
38716: MUL
38717: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
38718: LD_VAR 0 6
38722: PPUSH
38723: CALL_OW 257
38727: PUSH
38728: LD_INT 5
38730: PUSH
38731: LD_INT 7
38733: PUSH
38734: LD_INT 9
38736: PUSH
38737: EMPTY
38738: LIST
38739: LIST
38740: LIST
38741: IN
38742: IFFALSE 38762
38744: PUSH
38745: LD_VAR 0 1
38749: PPUSH
38750: LD_INT 52
38752: PPUSH
38753: CALL_OW 321
38757: PUSH
38758: LD_INT 2
38760: EQUAL
38761: AND
38762: IFFALSE 38779
// bpoints := bpoints * 1.5 ;
38764: LD_ADDR_VAR 0 10
38768: PUSH
38769: LD_VAR 0 10
38773: PUSH
38774: LD_REAL  1.50000000000000E+0000
38777: MUL
38778: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
38779: LD_VAR 0 1
38783: PPUSH
38784: LD_INT 66
38786: PPUSH
38787: CALL_OW 321
38791: PUSH
38792: LD_INT 2
38794: EQUAL
38795: IFFALSE 38812
// bpoints := bpoints * 1.1 ;
38797: LD_ADDR_VAR 0 10
38801: PUSH
38802: LD_VAR 0 10
38806: PUSH
38807: LD_REAL  1.10000000000000E+0000
38810: MUL
38811: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
38812: LD_ADDR_VAR 0 10
38816: PUSH
38817: LD_VAR 0 10
38821: PUSH
38822: LD_VAR 0 6
38826: PPUSH
38827: LD_INT 1
38829: PPUSH
38830: CALL_OW 259
38834: PUSH
38835: LD_REAL  1.15000000000000E+0000
38838: MUL
38839: MUL
38840: ST_TO_ADDR
// end ; unit_vehicle :
38841: GO 39671
38843: LD_INT 2
38845: DOUBLE
38846: EQUAL
38847: IFTRUE 38851
38849: GO 39659
38851: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
38852: LD_VAR 0 6
38856: PPUSH
38857: CALL_OW 264
38861: PUSH
38862: LD_INT 2
38864: PUSH
38865: LD_INT 42
38867: PUSH
38868: LD_INT 24
38870: PUSH
38871: EMPTY
38872: LIST
38873: LIST
38874: LIST
38875: IN
38876: IFFALSE 38897
// points := [ 25 , 5 , 3 ] ;
38878: LD_ADDR_VAR 0 9
38882: PUSH
38883: LD_INT 25
38885: PUSH
38886: LD_INT 5
38888: PUSH
38889: LD_INT 3
38891: PUSH
38892: EMPTY
38893: LIST
38894: LIST
38895: LIST
38896: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
38897: LD_VAR 0 6
38901: PPUSH
38902: CALL_OW 264
38906: PUSH
38907: LD_INT 4
38909: PUSH
38910: LD_INT 43
38912: PUSH
38913: LD_INT 25
38915: PUSH
38916: EMPTY
38917: LIST
38918: LIST
38919: LIST
38920: IN
38921: IFFALSE 38942
// points := [ 40 , 15 , 5 ] ;
38923: LD_ADDR_VAR 0 9
38927: PUSH
38928: LD_INT 40
38930: PUSH
38931: LD_INT 15
38933: PUSH
38934: LD_INT 5
38936: PUSH
38937: EMPTY
38938: LIST
38939: LIST
38940: LIST
38941: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
38942: LD_VAR 0 6
38946: PPUSH
38947: CALL_OW 264
38951: PUSH
38952: LD_INT 3
38954: PUSH
38955: LD_INT 23
38957: PUSH
38958: EMPTY
38959: LIST
38960: LIST
38961: IN
38962: IFFALSE 38983
// points := [ 7 , 25 , 8 ] ;
38964: LD_ADDR_VAR 0 9
38968: PUSH
38969: LD_INT 7
38971: PUSH
38972: LD_INT 25
38974: PUSH
38975: LD_INT 8
38977: PUSH
38978: EMPTY
38979: LIST
38980: LIST
38981: LIST
38982: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
38983: LD_VAR 0 6
38987: PPUSH
38988: CALL_OW 264
38992: PUSH
38993: LD_INT 5
38995: PUSH
38996: LD_INT 27
38998: PUSH
38999: LD_INT 44
39001: PUSH
39002: EMPTY
39003: LIST
39004: LIST
39005: LIST
39006: IN
39007: IFFALSE 39028
// points := [ 14 , 50 , 16 ] ;
39009: LD_ADDR_VAR 0 9
39013: PUSH
39014: LD_INT 14
39016: PUSH
39017: LD_INT 50
39019: PUSH
39020: LD_INT 16
39022: PUSH
39023: EMPTY
39024: LIST
39025: LIST
39026: LIST
39027: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
39028: LD_VAR 0 6
39032: PPUSH
39033: CALL_OW 264
39037: PUSH
39038: LD_INT 6
39040: PUSH
39041: LD_INT 46
39043: PUSH
39044: EMPTY
39045: LIST
39046: LIST
39047: IN
39048: IFFALSE 39069
// points := [ 32 , 120 , 70 ] ;
39050: LD_ADDR_VAR 0 9
39054: PUSH
39055: LD_INT 32
39057: PUSH
39058: LD_INT 120
39060: PUSH
39061: LD_INT 70
39063: PUSH
39064: EMPTY
39065: LIST
39066: LIST
39067: LIST
39068: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
39069: LD_VAR 0 6
39073: PPUSH
39074: CALL_OW 264
39078: PUSH
39079: LD_INT 7
39081: PUSH
39082: LD_INT 28
39084: PUSH
39085: LD_INT 45
39087: PUSH
39088: LD_INT 92
39090: PUSH
39091: EMPTY
39092: LIST
39093: LIST
39094: LIST
39095: LIST
39096: IN
39097: IFFALSE 39118
// points := [ 35 , 20 , 45 ] ;
39099: LD_ADDR_VAR 0 9
39103: PUSH
39104: LD_INT 35
39106: PUSH
39107: LD_INT 20
39109: PUSH
39110: LD_INT 45
39112: PUSH
39113: EMPTY
39114: LIST
39115: LIST
39116: LIST
39117: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
39118: LD_VAR 0 6
39122: PPUSH
39123: CALL_OW 264
39127: PUSH
39128: LD_INT 47
39130: PUSH
39131: EMPTY
39132: LIST
39133: IN
39134: IFFALSE 39155
// points := [ 67 , 45 , 75 ] ;
39136: LD_ADDR_VAR 0 9
39140: PUSH
39141: LD_INT 67
39143: PUSH
39144: LD_INT 45
39146: PUSH
39147: LD_INT 75
39149: PUSH
39150: EMPTY
39151: LIST
39152: LIST
39153: LIST
39154: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
39155: LD_VAR 0 6
39159: PPUSH
39160: CALL_OW 264
39164: PUSH
39165: LD_INT 26
39167: PUSH
39168: EMPTY
39169: LIST
39170: IN
39171: IFFALSE 39192
// points := [ 120 , 30 , 80 ] ;
39173: LD_ADDR_VAR 0 9
39177: PUSH
39178: LD_INT 120
39180: PUSH
39181: LD_INT 30
39183: PUSH
39184: LD_INT 80
39186: PUSH
39187: EMPTY
39188: LIST
39189: LIST
39190: LIST
39191: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
39192: LD_VAR 0 6
39196: PPUSH
39197: CALL_OW 264
39201: PUSH
39202: LD_INT 22
39204: PUSH
39205: EMPTY
39206: LIST
39207: IN
39208: IFFALSE 39229
// points := [ 40 , 1 , 1 ] ;
39210: LD_ADDR_VAR 0 9
39214: PUSH
39215: LD_INT 40
39217: PUSH
39218: LD_INT 1
39220: PUSH
39221: LD_INT 1
39223: PUSH
39224: EMPTY
39225: LIST
39226: LIST
39227: LIST
39228: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
39229: LD_VAR 0 6
39233: PPUSH
39234: CALL_OW 264
39238: PUSH
39239: LD_INT 29
39241: PUSH
39242: EMPTY
39243: LIST
39244: IN
39245: IFFALSE 39266
// points := [ 70 , 200 , 400 ] ;
39247: LD_ADDR_VAR 0 9
39251: PUSH
39252: LD_INT 70
39254: PUSH
39255: LD_INT 200
39257: PUSH
39258: LD_INT 400
39260: PUSH
39261: EMPTY
39262: LIST
39263: LIST
39264: LIST
39265: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
39266: LD_VAR 0 6
39270: PPUSH
39271: CALL_OW 264
39275: PUSH
39276: LD_INT 14
39278: PUSH
39279: LD_INT 53
39281: PUSH
39282: EMPTY
39283: LIST
39284: LIST
39285: IN
39286: IFFALSE 39307
// points := [ 40 , 10 , 20 ] ;
39288: LD_ADDR_VAR 0 9
39292: PUSH
39293: LD_INT 40
39295: PUSH
39296: LD_INT 10
39298: PUSH
39299: LD_INT 20
39301: PUSH
39302: EMPTY
39303: LIST
39304: LIST
39305: LIST
39306: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
39307: LD_VAR 0 6
39311: PPUSH
39312: CALL_OW 264
39316: PUSH
39317: LD_INT 9
39319: PUSH
39320: EMPTY
39321: LIST
39322: IN
39323: IFFALSE 39344
// points := [ 5 , 70 , 20 ] ;
39325: LD_ADDR_VAR 0 9
39329: PUSH
39330: LD_INT 5
39332: PUSH
39333: LD_INT 70
39335: PUSH
39336: LD_INT 20
39338: PUSH
39339: EMPTY
39340: LIST
39341: LIST
39342: LIST
39343: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
39344: LD_VAR 0 6
39348: PPUSH
39349: CALL_OW 264
39353: PUSH
39354: LD_INT 10
39356: PUSH
39357: EMPTY
39358: LIST
39359: IN
39360: IFFALSE 39381
// points := [ 35 , 110 , 70 ] ;
39362: LD_ADDR_VAR 0 9
39366: PUSH
39367: LD_INT 35
39369: PUSH
39370: LD_INT 110
39372: PUSH
39373: LD_INT 70
39375: PUSH
39376: EMPTY
39377: LIST
39378: LIST
39379: LIST
39380: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
39381: LD_VAR 0 6
39385: PPUSH
39386: CALL_OW 265
39390: PUSH
39391: LD_INT 25
39393: EQUAL
39394: IFFALSE 39415
// points := [ 80 , 65 , 100 ] ;
39396: LD_ADDR_VAR 0 9
39400: PUSH
39401: LD_INT 80
39403: PUSH
39404: LD_INT 65
39406: PUSH
39407: LD_INT 100
39409: PUSH
39410: EMPTY
39411: LIST
39412: LIST
39413: LIST
39414: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
39415: LD_VAR 0 6
39419: PPUSH
39420: CALL_OW 263
39424: PUSH
39425: LD_INT 1
39427: EQUAL
39428: IFFALSE 39463
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
39430: LD_ADDR_VAR 0 10
39434: PUSH
39435: LD_VAR 0 10
39439: PUSH
39440: LD_VAR 0 6
39444: PPUSH
39445: CALL_OW 311
39449: PPUSH
39450: LD_INT 3
39452: PPUSH
39453: CALL_OW 259
39457: PUSH
39458: LD_INT 4
39460: MUL
39461: MUL
39462: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
39463: LD_VAR 0 6
39467: PPUSH
39468: CALL_OW 263
39472: PUSH
39473: LD_INT 2
39475: EQUAL
39476: IFFALSE 39527
// begin j := IsControledBy ( i ) ;
39478: LD_ADDR_VAR 0 7
39482: PUSH
39483: LD_VAR 0 6
39487: PPUSH
39488: CALL_OW 312
39492: ST_TO_ADDR
// if j then
39493: LD_VAR 0 7
39497: IFFALSE 39527
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
39499: LD_ADDR_VAR 0 10
39503: PUSH
39504: LD_VAR 0 10
39508: PUSH
39509: LD_VAR 0 7
39513: PPUSH
39514: LD_INT 3
39516: PPUSH
39517: CALL_OW 259
39521: PUSH
39522: LD_INT 3
39524: MUL
39525: MUL
39526: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
39527: LD_VAR 0 6
39531: PPUSH
39532: CALL_OW 264
39536: PUSH
39537: LD_INT 5
39539: PUSH
39540: LD_INT 6
39542: PUSH
39543: LD_INT 46
39545: PUSH
39546: LD_INT 44
39548: PUSH
39549: LD_INT 47
39551: PUSH
39552: LD_INT 45
39554: PUSH
39555: LD_INT 28
39557: PUSH
39558: LD_INT 7
39560: PUSH
39561: LD_INT 27
39563: PUSH
39564: LD_INT 29
39566: PUSH
39567: EMPTY
39568: LIST
39569: LIST
39570: LIST
39571: LIST
39572: LIST
39573: LIST
39574: LIST
39575: LIST
39576: LIST
39577: LIST
39578: IN
39579: IFFALSE 39599
39581: PUSH
39582: LD_VAR 0 1
39586: PPUSH
39587: LD_INT 52
39589: PPUSH
39590: CALL_OW 321
39594: PUSH
39595: LD_INT 2
39597: EQUAL
39598: AND
39599: IFFALSE 39616
// bpoints := bpoints * 1.2 ;
39601: LD_ADDR_VAR 0 10
39605: PUSH
39606: LD_VAR 0 10
39610: PUSH
39611: LD_REAL  1.20000000000000E+0000
39614: MUL
39615: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
39616: LD_VAR 0 6
39620: PPUSH
39621: CALL_OW 264
39625: PUSH
39626: LD_INT 6
39628: PUSH
39629: LD_INT 46
39631: PUSH
39632: LD_INT 47
39634: PUSH
39635: EMPTY
39636: LIST
39637: LIST
39638: LIST
39639: IN
39640: IFFALSE 39657
// bpoints := bpoints * 1.2 ;
39642: LD_ADDR_VAR 0 10
39646: PUSH
39647: LD_VAR 0 10
39651: PUSH
39652: LD_REAL  1.20000000000000E+0000
39655: MUL
39656: ST_TO_ADDR
// end ; unit_building :
39657: GO 39671
39659: LD_INT 3
39661: DOUBLE
39662: EQUAL
39663: IFTRUE 39667
39665: GO 39670
39667: POP
// ; end ;
39668: GO 39671
39670: POP
// for j = 1 to 3 do
39671: LD_ADDR_VAR 0 7
39675: PUSH
39676: DOUBLE
39677: LD_INT 1
39679: DEC
39680: ST_TO_ADDR
39681: LD_INT 3
39683: PUSH
39684: FOR_TO
39685: IFFALSE 39738
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
39687: LD_ADDR_VAR 0 5
39691: PUSH
39692: LD_VAR 0 5
39696: PPUSH
39697: LD_VAR 0 7
39701: PPUSH
39702: LD_VAR 0 5
39706: PUSH
39707: LD_VAR 0 7
39711: ARRAY
39712: PUSH
39713: LD_VAR 0 9
39717: PUSH
39718: LD_VAR 0 7
39722: ARRAY
39723: PUSH
39724: LD_VAR 0 10
39728: MUL
39729: PLUS
39730: PPUSH
39731: CALL_OW 1
39735: ST_TO_ADDR
39736: GO 39684
39738: POP
39739: POP
// end ;
39740: GO 38213
39742: POP
39743: POP
// result := Replace ( result , 4 , tmp ) ;
39744: LD_ADDR_VAR 0 5
39748: PUSH
39749: LD_VAR 0 5
39753: PPUSH
39754: LD_INT 4
39756: PPUSH
39757: LD_VAR 0 8
39761: PPUSH
39762: CALL_OW 1
39766: ST_TO_ADDR
// end ;
39767: LD_VAR 0 5
39771: RET
// export function DangerAtRange ( unit , range ) ; begin
39772: LD_INT 0
39774: PPUSH
// if not unit then
39775: LD_VAR 0 1
39779: NOT
39780: IFFALSE 39784
// exit ;
39782: GO 39829
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
39784: LD_ADDR_VAR 0 3
39788: PUSH
39789: LD_VAR 0 1
39793: PPUSH
39794: CALL_OW 255
39798: PPUSH
39799: LD_VAR 0 1
39803: PPUSH
39804: CALL_OW 250
39808: PPUSH
39809: LD_VAR 0 1
39813: PPUSH
39814: CALL_OW 251
39818: PPUSH
39819: LD_VAR 0 2
39823: PPUSH
39824: CALL 38063 0 4
39828: ST_TO_ADDR
// end ;
39829: LD_VAR 0 3
39833: RET
// export function DangerInArea ( side , area ) ; begin
39834: LD_INT 0
39836: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
39837: LD_ADDR_VAR 0 3
39841: PUSH
39842: LD_VAR 0 2
39846: PPUSH
39847: LD_INT 81
39849: PUSH
39850: LD_VAR 0 1
39854: PUSH
39855: EMPTY
39856: LIST
39857: LIST
39858: PPUSH
39859: CALL_OW 70
39863: ST_TO_ADDR
// end ;
39864: LD_VAR 0 3
39868: RET
// export function IsExtension ( b ) ; begin
39869: LD_INT 0
39871: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
39872: LD_ADDR_VAR 0 2
39876: PUSH
39877: LD_VAR 0 1
39881: PUSH
39882: LD_INT 23
39884: PUSH
39885: LD_INT 20
39887: PUSH
39888: LD_INT 22
39890: PUSH
39891: LD_INT 17
39893: PUSH
39894: LD_INT 24
39896: PUSH
39897: LD_INT 21
39899: PUSH
39900: LD_INT 19
39902: PUSH
39903: LD_INT 16
39905: PUSH
39906: LD_INT 25
39908: PUSH
39909: LD_INT 18
39911: PUSH
39912: EMPTY
39913: LIST
39914: LIST
39915: LIST
39916: LIST
39917: LIST
39918: LIST
39919: LIST
39920: LIST
39921: LIST
39922: LIST
39923: IN
39924: ST_TO_ADDR
// end ;
39925: LD_VAR 0 2
39929: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
39930: LD_INT 0
39932: PPUSH
39933: PPUSH
39934: PPUSH
// result := [ ] ;
39935: LD_ADDR_VAR 0 4
39939: PUSH
39940: EMPTY
39941: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
39942: LD_ADDR_VAR 0 5
39946: PUSH
39947: LD_VAR 0 2
39951: PPUSH
39952: LD_INT 21
39954: PUSH
39955: LD_INT 3
39957: PUSH
39958: EMPTY
39959: LIST
39960: LIST
39961: PPUSH
39962: CALL_OW 70
39966: ST_TO_ADDR
// if not tmp then
39967: LD_VAR 0 5
39971: NOT
39972: IFFALSE 39976
// exit ;
39974: GO 40040
// if checkLink then
39976: LD_VAR 0 3
39980: IFFALSE 40030
// begin for i in tmp do
39982: LD_ADDR_VAR 0 6
39986: PUSH
39987: LD_VAR 0 5
39991: PUSH
39992: FOR_IN
39993: IFFALSE 40028
// if GetBase ( i ) <> base then
39995: LD_VAR 0 6
39999: PPUSH
40000: CALL_OW 274
40004: PUSH
40005: LD_VAR 0 1
40009: NONEQUAL
40010: IFFALSE 40026
// ComLinkToBase ( base , i ) ;
40012: LD_VAR 0 1
40016: PPUSH
40017: LD_VAR 0 6
40021: PPUSH
40022: CALL_OW 169
40026: GO 39992
40028: POP
40029: POP
// end ; result := tmp ;
40030: LD_ADDR_VAR 0 4
40034: PUSH
40035: LD_VAR 0 5
40039: ST_TO_ADDR
// end ;
40040: LD_VAR 0 4
40044: RET
// export function ComComplete ( units , b ) ; var i ; begin
40045: LD_INT 0
40047: PPUSH
40048: PPUSH
// if not units then
40049: LD_VAR 0 1
40053: NOT
40054: IFFALSE 40058
// exit ;
40056: GO 40148
// for i in units do
40058: LD_ADDR_VAR 0 4
40062: PUSH
40063: LD_VAR 0 1
40067: PUSH
40068: FOR_IN
40069: IFFALSE 40146
// if BuildingStatus ( b ) = bs_build then
40071: LD_VAR 0 2
40075: PPUSH
40076: CALL_OW 461
40080: PUSH
40081: LD_INT 1
40083: EQUAL
40084: IFFALSE 40144
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
40086: LD_VAR 0 4
40090: PPUSH
40091: LD_STRING h
40093: PUSH
40094: LD_VAR 0 2
40098: PPUSH
40099: CALL_OW 250
40103: PUSH
40104: LD_VAR 0 2
40108: PPUSH
40109: CALL_OW 251
40113: PUSH
40114: LD_VAR 0 2
40118: PUSH
40119: LD_INT 0
40121: PUSH
40122: LD_INT 0
40124: PUSH
40125: LD_INT 0
40127: PUSH
40128: EMPTY
40129: LIST
40130: LIST
40131: LIST
40132: LIST
40133: LIST
40134: LIST
40135: LIST
40136: PUSH
40137: EMPTY
40138: LIST
40139: PPUSH
40140: CALL_OW 446
40144: GO 40068
40146: POP
40147: POP
// end ;
40148: LD_VAR 0 3
40152: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
40153: LD_INT 0
40155: PPUSH
40156: PPUSH
40157: PPUSH
40158: PPUSH
40159: PPUSH
40160: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
40161: LD_VAR 0 1
40165: NOT
40166: IFTRUE 40183
40168: PUSH
40169: LD_VAR 0 1
40173: PPUSH
40174: CALL_OW 263
40178: PUSH
40179: LD_INT 2
40181: NONEQUAL
40182: OR
40183: IFFALSE 40187
// exit ;
40185: GO 40503
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
40187: LD_ADDR_VAR 0 6
40191: PUSH
40192: LD_INT 22
40194: PUSH
40195: LD_VAR 0 1
40199: PPUSH
40200: CALL_OW 255
40204: PUSH
40205: EMPTY
40206: LIST
40207: LIST
40208: PUSH
40209: LD_INT 2
40211: PUSH
40212: LD_INT 30
40214: PUSH
40215: LD_INT 36
40217: PUSH
40218: EMPTY
40219: LIST
40220: LIST
40221: PUSH
40222: LD_INT 34
40224: PUSH
40225: LD_INT 31
40227: PUSH
40228: EMPTY
40229: LIST
40230: LIST
40231: PUSH
40232: EMPTY
40233: LIST
40234: LIST
40235: LIST
40236: PUSH
40237: EMPTY
40238: LIST
40239: LIST
40240: PPUSH
40241: CALL_OW 69
40245: ST_TO_ADDR
// if not tmp then
40246: LD_VAR 0 6
40250: NOT
40251: IFFALSE 40255
// exit ;
40253: GO 40503
// result := [ ] ;
40255: LD_ADDR_VAR 0 2
40259: PUSH
40260: EMPTY
40261: ST_TO_ADDR
// for i in tmp do
40262: LD_ADDR_VAR 0 3
40266: PUSH
40267: LD_VAR 0 6
40271: PUSH
40272: FOR_IN
40273: IFFALSE 40344
// begin t := UnitsInside ( i ) ;
40275: LD_ADDR_VAR 0 4
40279: PUSH
40280: LD_VAR 0 3
40284: PPUSH
40285: CALL_OW 313
40289: ST_TO_ADDR
// if t then
40290: LD_VAR 0 4
40294: IFFALSE 40342
// for j in t do
40296: LD_ADDR_VAR 0 7
40300: PUSH
40301: LD_VAR 0 4
40305: PUSH
40306: FOR_IN
40307: IFFALSE 40340
// result := Replace ( result , result + 1 , j ) ;
40309: LD_ADDR_VAR 0 2
40313: PUSH
40314: LD_VAR 0 2
40318: PPUSH
40319: LD_VAR 0 2
40323: PUSH
40324: LD_INT 1
40326: PLUS
40327: PPUSH
40328: LD_VAR 0 7
40332: PPUSH
40333: CALL_OW 1
40337: ST_TO_ADDR
40338: GO 40306
40340: POP
40341: POP
// end ;
40342: GO 40272
40344: POP
40345: POP
// if not result then
40346: LD_VAR 0 2
40350: NOT
40351: IFFALSE 40355
// exit ;
40353: GO 40503
// mech := result [ 1 ] ;
40355: LD_ADDR_VAR 0 5
40359: PUSH
40360: LD_VAR 0 2
40364: PUSH
40365: LD_INT 1
40367: ARRAY
40368: ST_TO_ADDR
// if result > 1 then
40369: LD_VAR 0 2
40373: PUSH
40374: LD_INT 1
40376: GREATER
40377: IFFALSE 40489
// begin for i = 2 to result do
40379: LD_ADDR_VAR 0 3
40383: PUSH
40384: DOUBLE
40385: LD_INT 2
40387: DEC
40388: ST_TO_ADDR
40389: LD_VAR 0 2
40393: PUSH
40394: FOR_TO
40395: IFFALSE 40487
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
40397: LD_ADDR_VAR 0 4
40401: PUSH
40402: LD_VAR 0 2
40406: PUSH
40407: LD_VAR 0 3
40411: ARRAY
40412: PPUSH
40413: LD_INT 3
40415: PPUSH
40416: CALL_OW 259
40420: PUSH
40421: LD_VAR 0 2
40425: PUSH
40426: LD_VAR 0 3
40430: ARRAY
40431: PPUSH
40432: CALL_OW 432
40436: MINUS
40437: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
40438: LD_VAR 0 4
40442: PUSH
40443: LD_VAR 0 5
40447: PPUSH
40448: LD_INT 3
40450: PPUSH
40451: CALL_OW 259
40455: PUSH
40456: LD_VAR 0 5
40460: PPUSH
40461: CALL_OW 432
40465: MINUS
40466: GREATEREQUAL
40467: IFFALSE 40485
// mech := result [ i ] ;
40469: LD_ADDR_VAR 0 5
40473: PUSH
40474: LD_VAR 0 2
40478: PUSH
40479: LD_VAR 0 3
40483: ARRAY
40484: ST_TO_ADDR
// end ;
40485: GO 40394
40487: POP
40488: POP
// end ; ComLinkTo ( vehicle , mech ) ;
40489: LD_VAR 0 1
40493: PPUSH
40494: LD_VAR 0 5
40498: PPUSH
40499: CALL_OW 135
// end ;
40503: LD_VAR 0 2
40507: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
40508: LD_INT 0
40510: PPUSH
40511: PPUSH
40512: PPUSH
40513: PPUSH
40514: PPUSH
40515: PPUSH
40516: PPUSH
40517: PPUSH
40518: PPUSH
40519: PPUSH
40520: PPUSH
40521: PPUSH
40522: PPUSH
// result := [ ] ;
40523: LD_ADDR_VAR 0 7
40527: PUSH
40528: EMPTY
40529: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
40530: LD_VAR 0 1
40534: PPUSH
40535: CALL_OW 266
40539: PUSH
40540: LD_INT 0
40542: PUSH
40543: LD_INT 1
40545: PUSH
40546: EMPTY
40547: LIST
40548: LIST
40549: IN
40550: NOT
40551: IFFALSE 40555
// exit ;
40553: GO 42195
// if name then
40555: LD_VAR 0 3
40559: IFFALSE 40575
// SetBName ( base_dep , name ) ;
40561: LD_VAR 0 1
40565: PPUSH
40566: LD_VAR 0 3
40570: PPUSH
40571: CALL_OW 500
// base := GetBase ( base_dep ) ;
40575: LD_ADDR_VAR 0 15
40579: PUSH
40580: LD_VAR 0 1
40584: PPUSH
40585: CALL_OW 274
40589: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
40590: LD_ADDR_VAR 0 16
40594: PUSH
40595: LD_VAR 0 1
40599: PPUSH
40600: CALL_OW 255
40604: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
40605: LD_ADDR_VAR 0 17
40609: PUSH
40610: LD_VAR 0 1
40614: PPUSH
40615: CALL_OW 248
40619: ST_TO_ADDR
// if sources then
40620: LD_VAR 0 5
40624: IFFALSE 40671
// for i = 1 to 3 do
40626: LD_ADDR_VAR 0 8
40630: PUSH
40631: DOUBLE
40632: LD_INT 1
40634: DEC
40635: ST_TO_ADDR
40636: LD_INT 3
40638: PUSH
40639: FOR_TO
40640: IFFALSE 40669
// AddResourceType ( base , i , sources [ i ] ) ;
40642: LD_VAR 0 15
40646: PPUSH
40647: LD_VAR 0 8
40651: PPUSH
40652: LD_VAR 0 5
40656: PUSH
40657: LD_VAR 0 8
40661: ARRAY
40662: PPUSH
40663: CALL_OW 276
40667: GO 40639
40669: POP
40670: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
40671: LD_ADDR_VAR 0 18
40675: PUSH
40676: LD_VAR 0 15
40680: PPUSH
40681: LD_VAR 0 2
40685: PPUSH
40686: LD_INT 1
40688: PPUSH
40689: CALL 39930 0 3
40693: ST_TO_ADDR
// InitHc ;
40694: CALL_OW 19
// InitUc ;
40698: CALL_OW 18
// uc_side := side ;
40702: LD_ADDR_OWVAR 20
40706: PUSH
40707: LD_VAR 0 16
40711: ST_TO_ADDR
// uc_nation := nation ;
40712: LD_ADDR_OWVAR 21
40716: PUSH
40717: LD_VAR 0 17
40721: ST_TO_ADDR
// if buildings then
40722: LD_VAR 0 18
40726: IFFALSE 42054
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
40728: LD_ADDR_VAR 0 19
40732: PUSH
40733: LD_VAR 0 18
40737: PPUSH
40738: LD_INT 2
40740: PUSH
40741: LD_INT 30
40743: PUSH
40744: LD_INT 29
40746: PUSH
40747: EMPTY
40748: LIST
40749: LIST
40750: PUSH
40751: LD_INT 30
40753: PUSH
40754: LD_INT 30
40756: PUSH
40757: EMPTY
40758: LIST
40759: LIST
40760: PUSH
40761: EMPTY
40762: LIST
40763: LIST
40764: LIST
40765: PPUSH
40766: CALL_OW 72
40770: ST_TO_ADDR
// if tmp then
40771: LD_VAR 0 19
40775: IFFALSE 40823
// for i in tmp do
40777: LD_ADDR_VAR 0 8
40781: PUSH
40782: LD_VAR 0 19
40786: PUSH
40787: FOR_IN
40788: IFFALSE 40821
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
40790: LD_VAR 0 8
40794: PPUSH
40795: CALL_OW 250
40799: PPUSH
40800: LD_VAR 0 8
40804: PPUSH
40805: CALL_OW 251
40809: PPUSH
40810: LD_VAR 0 16
40814: PPUSH
40815: CALL_OW 441
40819: GO 40787
40821: POP
40822: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
40823: LD_VAR 0 18
40827: PPUSH
40828: LD_INT 2
40830: PUSH
40831: LD_INT 30
40833: PUSH
40834: LD_INT 32
40836: PUSH
40837: EMPTY
40838: LIST
40839: LIST
40840: PUSH
40841: LD_INT 30
40843: PUSH
40844: LD_INT 33
40846: PUSH
40847: EMPTY
40848: LIST
40849: LIST
40850: PUSH
40851: EMPTY
40852: LIST
40853: LIST
40854: LIST
40855: PPUSH
40856: CALL_OW 72
40860: IFFALSE 40948
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
40862: LD_ADDR_VAR 0 8
40866: PUSH
40867: LD_VAR 0 18
40871: PPUSH
40872: LD_INT 2
40874: PUSH
40875: LD_INT 30
40877: PUSH
40878: LD_INT 32
40880: PUSH
40881: EMPTY
40882: LIST
40883: LIST
40884: PUSH
40885: LD_INT 30
40887: PUSH
40888: LD_INT 33
40890: PUSH
40891: EMPTY
40892: LIST
40893: LIST
40894: PUSH
40895: EMPTY
40896: LIST
40897: LIST
40898: LIST
40899: PPUSH
40900: CALL_OW 72
40904: PUSH
40905: FOR_IN
40906: IFFALSE 40946
// begin if not GetBWeapon ( i ) then
40908: LD_VAR 0 8
40912: PPUSH
40913: CALL_OW 269
40917: NOT
40918: IFFALSE 40944
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
40920: LD_VAR 0 8
40924: PPUSH
40925: LD_VAR 0 8
40929: PPUSH
40930: LD_VAR 0 2
40934: PPUSH
40935: CALL 42200 0 2
40939: PPUSH
40940: CALL_OW 431
// end ;
40944: GO 40905
40946: POP
40947: POP
// end ; for i = 1 to personel do
40948: LD_ADDR_VAR 0 8
40952: PUSH
40953: DOUBLE
40954: LD_INT 1
40956: DEC
40957: ST_TO_ADDR
40958: LD_VAR 0 6
40962: PUSH
40963: FOR_TO
40964: IFFALSE 42034
// begin if i > 4 then
40966: LD_VAR 0 8
40970: PUSH
40971: LD_INT 4
40973: GREATER
40974: IFFALSE 40978
// break ;
40976: GO 42034
// case i of 1 :
40978: LD_VAR 0 8
40982: PUSH
40983: LD_INT 1
40985: DOUBLE
40986: EQUAL
40987: IFTRUE 40991
40989: GO 41071
40991: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
40992: LD_ADDR_VAR 0 12
40996: PUSH
40997: LD_VAR 0 18
41001: PPUSH
41002: LD_INT 22
41004: PUSH
41005: LD_VAR 0 16
41009: PUSH
41010: EMPTY
41011: LIST
41012: LIST
41013: PUSH
41014: LD_INT 58
41016: PUSH
41017: EMPTY
41018: LIST
41019: PUSH
41020: LD_INT 2
41022: PUSH
41023: LD_INT 30
41025: PUSH
41026: LD_INT 32
41028: PUSH
41029: EMPTY
41030: LIST
41031: LIST
41032: PUSH
41033: LD_INT 30
41035: PUSH
41036: LD_INT 4
41038: PUSH
41039: EMPTY
41040: LIST
41041: LIST
41042: PUSH
41043: LD_INT 30
41045: PUSH
41046: LD_INT 5
41048: PUSH
41049: EMPTY
41050: LIST
41051: LIST
41052: PUSH
41053: EMPTY
41054: LIST
41055: LIST
41056: LIST
41057: LIST
41058: PUSH
41059: EMPTY
41060: LIST
41061: LIST
41062: LIST
41063: PPUSH
41064: CALL_OW 72
41068: ST_TO_ADDR
41069: GO 41293
41071: LD_INT 2
41073: DOUBLE
41074: EQUAL
41075: IFTRUE 41079
41077: GO 41141
41079: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
41080: LD_ADDR_VAR 0 12
41084: PUSH
41085: LD_VAR 0 18
41089: PPUSH
41090: LD_INT 22
41092: PUSH
41093: LD_VAR 0 16
41097: PUSH
41098: EMPTY
41099: LIST
41100: LIST
41101: PUSH
41102: LD_INT 2
41104: PUSH
41105: LD_INT 30
41107: PUSH
41108: LD_INT 0
41110: PUSH
41111: EMPTY
41112: LIST
41113: LIST
41114: PUSH
41115: LD_INT 30
41117: PUSH
41118: LD_INT 1
41120: PUSH
41121: EMPTY
41122: LIST
41123: LIST
41124: PUSH
41125: EMPTY
41126: LIST
41127: LIST
41128: LIST
41129: PUSH
41130: EMPTY
41131: LIST
41132: LIST
41133: PPUSH
41134: CALL_OW 72
41138: ST_TO_ADDR
41139: GO 41293
41141: LD_INT 3
41143: DOUBLE
41144: EQUAL
41145: IFTRUE 41149
41147: GO 41211
41149: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
41150: LD_ADDR_VAR 0 12
41154: PUSH
41155: LD_VAR 0 18
41159: PPUSH
41160: LD_INT 22
41162: PUSH
41163: LD_VAR 0 16
41167: PUSH
41168: EMPTY
41169: LIST
41170: LIST
41171: PUSH
41172: LD_INT 2
41174: PUSH
41175: LD_INT 30
41177: PUSH
41178: LD_INT 2
41180: PUSH
41181: EMPTY
41182: LIST
41183: LIST
41184: PUSH
41185: LD_INT 30
41187: PUSH
41188: LD_INT 3
41190: PUSH
41191: EMPTY
41192: LIST
41193: LIST
41194: PUSH
41195: EMPTY
41196: LIST
41197: LIST
41198: LIST
41199: PUSH
41200: EMPTY
41201: LIST
41202: LIST
41203: PPUSH
41204: CALL_OW 72
41208: ST_TO_ADDR
41209: GO 41293
41211: LD_INT 4
41213: DOUBLE
41214: EQUAL
41215: IFTRUE 41219
41217: GO 41292
41219: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
41220: LD_ADDR_VAR 0 12
41224: PUSH
41225: LD_VAR 0 18
41229: PPUSH
41230: LD_INT 22
41232: PUSH
41233: LD_VAR 0 16
41237: PUSH
41238: EMPTY
41239: LIST
41240: LIST
41241: PUSH
41242: LD_INT 2
41244: PUSH
41245: LD_INT 30
41247: PUSH
41248: LD_INT 6
41250: PUSH
41251: EMPTY
41252: LIST
41253: LIST
41254: PUSH
41255: LD_INT 30
41257: PUSH
41258: LD_INT 7
41260: PUSH
41261: EMPTY
41262: LIST
41263: LIST
41264: PUSH
41265: LD_INT 30
41267: PUSH
41268: LD_INT 8
41270: PUSH
41271: EMPTY
41272: LIST
41273: LIST
41274: PUSH
41275: EMPTY
41276: LIST
41277: LIST
41278: LIST
41279: LIST
41280: PUSH
41281: EMPTY
41282: LIST
41283: LIST
41284: PPUSH
41285: CALL_OW 72
41289: ST_TO_ADDR
41290: GO 41293
41292: POP
// if i = 1 then
41293: LD_VAR 0 8
41297: PUSH
41298: LD_INT 1
41300: EQUAL
41301: IFFALSE 41412
// begin tmp := [ ] ;
41303: LD_ADDR_VAR 0 19
41307: PUSH
41308: EMPTY
41309: ST_TO_ADDR
// for j in f do
41310: LD_ADDR_VAR 0 9
41314: PUSH
41315: LD_VAR 0 12
41319: PUSH
41320: FOR_IN
41321: IFFALSE 41394
// if GetBType ( j ) = b_bunker then
41323: LD_VAR 0 9
41327: PPUSH
41328: CALL_OW 266
41332: PUSH
41333: LD_INT 32
41335: EQUAL
41336: IFFALSE 41363
// tmp := Insert ( tmp , 1 , j ) else
41338: LD_ADDR_VAR 0 19
41342: PUSH
41343: LD_VAR 0 19
41347: PPUSH
41348: LD_INT 1
41350: PPUSH
41351: LD_VAR 0 9
41355: PPUSH
41356: CALL_OW 2
41360: ST_TO_ADDR
41361: GO 41392
// tmp := Insert ( tmp , tmp + 1 , j ) ;
41363: LD_ADDR_VAR 0 19
41367: PUSH
41368: LD_VAR 0 19
41372: PPUSH
41373: LD_VAR 0 19
41377: PUSH
41378: LD_INT 1
41380: PLUS
41381: PPUSH
41382: LD_VAR 0 9
41386: PPUSH
41387: CALL_OW 2
41391: ST_TO_ADDR
41392: GO 41320
41394: POP
41395: POP
// if tmp then
41396: LD_VAR 0 19
41400: IFFALSE 41412
// f := tmp ;
41402: LD_ADDR_VAR 0 12
41406: PUSH
41407: LD_VAR 0 19
41411: ST_TO_ADDR
// end ; x := personel [ i ] ;
41412: LD_ADDR_VAR 0 13
41416: PUSH
41417: LD_VAR 0 6
41421: PUSH
41422: LD_VAR 0 8
41426: ARRAY
41427: ST_TO_ADDR
// if x = - 1 then
41428: LD_VAR 0 13
41432: PUSH
41433: LD_INT 1
41435: NEG
41436: EQUAL
41437: IFFALSE 41648
// begin for j in f do
41439: LD_ADDR_VAR 0 9
41443: PUSH
41444: LD_VAR 0 12
41448: PUSH
41449: FOR_IN
41450: IFFALSE 41644
// repeat InitHc ;
41452: CALL_OW 19
// if GetBType ( j ) = b_barracks then
41456: LD_VAR 0 9
41460: PPUSH
41461: CALL_OW 266
41465: PUSH
41466: LD_INT 5
41468: EQUAL
41469: IFFALSE 41539
// begin if UnitsInside ( j ) < 3 then
41471: LD_VAR 0 9
41475: PPUSH
41476: CALL_OW 313
41480: PUSH
41481: LD_INT 3
41483: LESS
41484: IFFALSE 41520
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
41486: LD_INT 0
41488: PPUSH
41489: LD_INT 5
41491: PUSH
41492: LD_INT 8
41494: PUSH
41495: LD_INT 9
41497: PUSH
41498: EMPTY
41499: LIST
41500: LIST
41501: LIST
41502: PUSH
41503: LD_VAR 0 17
41507: ARRAY
41508: PPUSH
41509: LD_VAR 0 4
41513: PPUSH
41514: CALL_OW 380
41518: GO 41537
// PrepareHuman ( false , i , skill ) ;
41520: LD_INT 0
41522: PPUSH
41523: LD_VAR 0 8
41527: PPUSH
41528: LD_VAR 0 4
41532: PPUSH
41533: CALL_OW 380
// end else
41537: GO 41556
// PrepareHuman ( false , i , skill ) ;
41539: LD_INT 0
41541: PPUSH
41542: LD_VAR 0 8
41546: PPUSH
41547: LD_VAR 0 4
41551: PPUSH
41552: CALL_OW 380
// un := CreateHuman ;
41556: LD_ADDR_VAR 0 14
41560: PUSH
41561: CALL_OW 44
41565: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
41566: LD_ADDR_VAR 0 7
41570: PUSH
41571: LD_VAR 0 7
41575: PPUSH
41576: LD_INT 1
41578: PPUSH
41579: LD_VAR 0 14
41583: PPUSH
41584: CALL_OW 2
41588: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
41589: LD_VAR 0 14
41593: PPUSH
41594: LD_VAR 0 9
41598: PPUSH
41599: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
41603: LD_VAR 0 9
41607: PPUSH
41608: CALL_OW 313
41612: PUSH
41613: LD_INT 6
41615: EQUAL
41616: IFTRUE 41640
41618: PUSH
41619: LD_VAR 0 9
41623: PPUSH
41624: CALL_OW 266
41628: PUSH
41629: LD_INT 32
41631: PUSH
41632: LD_INT 31
41634: PUSH
41635: EMPTY
41636: LIST
41637: LIST
41638: IN
41639: OR
41640: IFFALSE 41452
41642: GO 41449
41644: POP
41645: POP
// end else
41646: GO 42032
// for j = 1 to x do
41648: LD_ADDR_VAR 0 9
41652: PUSH
41653: DOUBLE
41654: LD_INT 1
41656: DEC
41657: ST_TO_ADDR
41658: LD_VAR 0 13
41662: PUSH
41663: FOR_TO
41664: IFFALSE 42030
// begin InitHc ;
41666: CALL_OW 19
// if not f then
41670: LD_VAR 0 12
41674: NOT
41675: IFFALSE 41764
// begin PrepareHuman ( false , i , skill ) ;
41677: LD_INT 0
41679: PPUSH
41680: LD_VAR 0 8
41684: PPUSH
41685: LD_VAR 0 4
41689: PPUSH
41690: CALL_OW 380
// un := CreateHuman ;
41694: LD_ADDR_VAR 0 14
41698: PUSH
41699: CALL_OW 44
41703: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
41704: LD_ADDR_VAR 0 7
41708: PUSH
41709: LD_VAR 0 7
41713: PPUSH
41714: LD_INT 1
41716: PPUSH
41717: LD_VAR 0 14
41721: PPUSH
41722: CALL_OW 2
41726: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
41727: LD_VAR 0 14
41731: PPUSH
41732: LD_VAR 0 1
41736: PPUSH
41737: CALL_OW 250
41741: PPUSH
41742: LD_VAR 0 1
41746: PPUSH
41747: CALL_OW 251
41751: PPUSH
41752: LD_INT 10
41754: PPUSH
41755: LD_INT 0
41757: PPUSH
41758: CALL_OW 50
// continue ;
41762: GO 41663
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
41764: LD_VAR 0 12
41768: PUSH
41769: LD_INT 1
41771: ARRAY
41772: PPUSH
41773: CALL_OW 313
41777: IFFALSE 41805
41779: PUSH
41780: LD_VAR 0 12
41784: PUSH
41785: LD_INT 1
41787: ARRAY
41788: PPUSH
41789: CALL_OW 266
41793: PUSH
41794: LD_INT 32
41796: PUSH
41797: LD_INT 31
41799: PUSH
41800: EMPTY
41801: LIST
41802: LIST
41803: IN
41804: AND
41805: IFTRUE 41826
41807: PUSH
41808: LD_VAR 0 12
41812: PUSH
41813: LD_INT 1
41815: ARRAY
41816: PPUSH
41817: CALL_OW 313
41821: PUSH
41822: LD_INT 6
41824: EQUAL
41825: OR
41826: IFFALSE 41846
// f := Delete ( f , 1 ) ;
41828: LD_ADDR_VAR 0 12
41832: PUSH
41833: LD_VAR 0 12
41837: PPUSH
41838: LD_INT 1
41840: PPUSH
41841: CALL_OW 3
41845: ST_TO_ADDR
// if not f then
41846: LD_VAR 0 12
41850: NOT
41851: IFFALSE 41869
// begin x := x + 2 ;
41853: LD_ADDR_VAR 0 13
41857: PUSH
41858: LD_VAR 0 13
41862: PUSH
41863: LD_INT 2
41865: PLUS
41866: ST_TO_ADDR
// continue ;
41867: GO 41663
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
41869: LD_VAR 0 12
41873: PUSH
41874: LD_INT 1
41876: ARRAY
41877: PPUSH
41878: CALL_OW 266
41882: PUSH
41883: LD_INT 5
41885: EQUAL
41886: IFFALSE 41960
// begin if UnitsInside ( f [ 1 ] ) < 3 then
41888: LD_VAR 0 12
41892: PUSH
41893: LD_INT 1
41895: ARRAY
41896: PPUSH
41897: CALL_OW 313
41901: PUSH
41902: LD_INT 3
41904: LESS
41905: IFFALSE 41941
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
41907: LD_INT 0
41909: PPUSH
41910: LD_INT 5
41912: PUSH
41913: LD_INT 8
41915: PUSH
41916: LD_INT 9
41918: PUSH
41919: EMPTY
41920: LIST
41921: LIST
41922: LIST
41923: PUSH
41924: LD_VAR 0 17
41928: ARRAY
41929: PPUSH
41930: LD_VAR 0 4
41934: PPUSH
41935: CALL_OW 380
41939: GO 41958
// PrepareHuman ( false , i , skill ) ;
41941: LD_INT 0
41943: PPUSH
41944: LD_VAR 0 8
41948: PPUSH
41949: LD_VAR 0 4
41953: PPUSH
41954: CALL_OW 380
// end else
41958: GO 41977
// PrepareHuman ( false , i , skill ) ;
41960: LD_INT 0
41962: PPUSH
41963: LD_VAR 0 8
41967: PPUSH
41968: LD_VAR 0 4
41972: PPUSH
41973: CALL_OW 380
// un := CreateHuman ;
41977: LD_ADDR_VAR 0 14
41981: PUSH
41982: CALL_OW 44
41986: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
41987: LD_ADDR_VAR 0 7
41991: PUSH
41992: LD_VAR 0 7
41996: PPUSH
41997: LD_INT 1
41999: PPUSH
42000: LD_VAR 0 14
42004: PPUSH
42005: CALL_OW 2
42009: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
42010: LD_VAR 0 14
42014: PPUSH
42015: LD_VAR 0 12
42019: PUSH
42020: LD_INT 1
42022: ARRAY
42023: PPUSH
42024: CALL_OW 52
// end ;
42028: GO 41663
42030: POP
42031: POP
// end ;
42032: GO 40963
42034: POP
42035: POP
// result := result ^ buildings ;
42036: LD_ADDR_VAR 0 7
42040: PUSH
42041: LD_VAR 0 7
42045: PUSH
42046: LD_VAR 0 18
42050: ADD
42051: ST_TO_ADDR
// end else
42052: GO 42195
// begin for i = 1 to personel do
42054: LD_ADDR_VAR 0 8
42058: PUSH
42059: DOUBLE
42060: LD_INT 1
42062: DEC
42063: ST_TO_ADDR
42064: LD_VAR 0 6
42068: PUSH
42069: FOR_TO
42070: IFFALSE 42193
// begin if i > 4 then
42072: LD_VAR 0 8
42076: PUSH
42077: LD_INT 4
42079: GREATER
42080: IFFALSE 42084
// break ;
42082: GO 42193
// x := personel [ i ] ;
42084: LD_ADDR_VAR 0 13
42088: PUSH
42089: LD_VAR 0 6
42093: PUSH
42094: LD_VAR 0 8
42098: ARRAY
42099: ST_TO_ADDR
// if x = - 1 then
42100: LD_VAR 0 13
42104: PUSH
42105: LD_INT 1
42107: NEG
42108: EQUAL
42109: IFFALSE 42113
// continue ;
42111: GO 42069
// PrepareHuman ( false , i , skill ) ;
42113: LD_INT 0
42115: PPUSH
42116: LD_VAR 0 8
42120: PPUSH
42121: LD_VAR 0 4
42125: PPUSH
42126: CALL_OW 380
// un := CreateHuman ;
42130: LD_ADDR_VAR 0 14
42134: PUSH
42135: CALL_OW 44
42139: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
42140: LD_VAR 0 14
42144: PPUSH
42145: LD_VAR 0 1
42149: PPUSH
42150: CALL_OW 250
42154: PPUSH
42155: LD_VAR 0 1
42159: PPUSH
42160: CALL_OW 251
42164: PPUSH
42165: LD_INT 10
42167: PPUSH
42168: LD_INT 0
42170: PPUSH
42171: CALL_OW 50
// result := result ^ un ;
42175: LD_ADDR_VAR 0 7
42179: PUSH
42180: LD_VAR 0 7
42184: PUSH
42185: LD_VAR 0 14
42189: ADD
42190: ST_TO_ADDR
// end ;
42191: GO 42069
42193: POP
42194: POP
// end ; end ;
42195: LD_VAR 0 7
42199: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
42200: LD_INT 0
42202: PPUSH
42203: PPUSH
42204: PPUSH
42205: PPUSH
42206: PPUSH
42207: PPUSH
42208: PPUSH
42209: PPUSH
42210: PPUSH
42211: PPUSH
42212: PPUSH
42213: PPUSH
42214: PPUSH
42215: PPUSH
42216: PPUSH
42217: PPUSH
// result := false ;
42218: LD_ADDR_VAR 0 3
42222: PUSH
42223: LD_INT 0
42225: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
42226: LD_VAR 0 1
42230: NOT
42231: IFTRUE 42256
42233: PUSH
42234: LD_VAR 0 1
42238: PPUSH
42239: CALL_OW 266
42243: PUSH
42244: LD_INT 32
42246: PUSH
42247: LD_INT 33
42249: PUSH
42250: EMPTY
42251: LIST
42252: LIST
42253: IN
42254: NOT
42255: OR
42256: IFFALSE 42260
// exit ;
42258: GO 43395
// nat := GetNation ( tower ) ;
42260: LD_ADDR_VAR 0 12
42264: PUSH
42265: LD_VAR 0 1
42269: PPUSH
42270: CALL_OW 248
42274: ST_TO_ADDR
// side := GetSide ( tower ) ;
42275: LD_ADDR_VAR 0 16
42279: PUSH
42280: LD_VAR 0 1
42284: PPUSH
42285: CALL_OW 255
42289: ST_TO_ADDR
// x := GetX ( tower ) ;
42290: LD_ADDR_VAR 0 10
42294: PUSH
42295: LD_VAR 0 1
42299: PPUSH
42300: CALL_OW 250
42304: ST_TO_ADDR
// y := GetY ( tower ) ;
42305: LD_ADDR_VAR 0 11
42309: PUSH
42310: LD_VAR 0 1
42314: PPUSH
42315: CALL_OW 251
42319: ST_TO_ADDR
// if not x or not y then
42320: LD_VAR 0 10
42324: NOT
42325: IFTRUE 42334
42327: PUSH
42328: LD_VAR 0 11
42332: NOT
42333: OR
42334: IFFALSE 42338
// exit ;
42336: GO 43395
// weapon := 0 ;
42338: LD_ADDR_VAR 0 18
42342: PUSH
42343: LD_INT 0
42345: ST_TO_ADDR
// fac_list := [ ] ;
42346: LD_ADDR_VAR 0 17
42350: PUSH
42351: EMPTY
42352: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
42353: LD_ADDR_VAR 0 6
42357: PUSH
42358: LD_VAR 0 1
42362: PPUSH
42363: CALL_OW 274
42367: PPUSH
42368: LD_VAR 0 2
42372: PPUSH
42373: LD_INT 0
42375: PPUSH
42376: CALL 39930 0 3
42380: PPUSH
42381: LD_INT 30
42383: PUSH
42384: LD_INT 3
42386: PUSH
42387: EMPTY
42388: LIST
42389: LIST
42390: PPUSH
42391: CALL_OW 72
42395: ST_TO_ADDR
// if not factories then
42396: LD_VAR 0 6
42400: NOT
42401: IFFALSE 42405
// exit ;
42403: GO 43395
// for i in factories do
42405: LD_ADDR_VAR 0 8
42409: PUSH
42410: LD_VAR 0 6
42414: PUSH
42415: FOR_IN
42416: IFFALSE 42441
// fac_list := fac_list union AvailableWeaponList ( i ) ;
42418: LD_ADDR_VAR 0 17
42422: PUSH
42423: LD_VAR 0 17
42427: PUSH
42428: LD_VAR 0 8
42432: PPUSH
42433: CALL_OW 478
42437: UNION
42438: ST_TO_ADDR
42439: GO 42415
42441: POP
42442: POP
// if not fac_list then
42443: LD_VAR 0 17
42447: NOT
42448: IFFALSE 42452
// exit ;
42450: GO 43395
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
42452: LD_ADDR_VAR 0 5
42456: PUSH
42457: LD_INT 4
42459: PUSH
42460: LD_INT 5
42462: PUSH
42463: LD_INT 9
42465: PUSH
42466: LD_INT 10
42468: PUSH
42469: LD_INT 6
42471: PUSH
42472: LD_INT 7
42474: PUSH
42475: LD_INT 11
42477: PUSH
42478: EMPTY
42479: LIST
42480: LIST
42481: LIST
42482: LIST
42483: LIST
42484: LIST
42485: LIST
42486: PUSH
42487: LD_INT 27
42489: PUSH
42490: LD_INT 28
42492: PUSH
42493: LD_INT 26
42495: PUSH
42496: LD_INT 30
42498: PUSH
42499: EMPTY
42500: LIST
42501: LIST
42502: LIST
42503: LIST
42504: PUSH
42505: LD_INT 43
42507: PUSH
42508: LD_INT 44
42510: PUSH
42511: LD_INT 46
42513: PUSH
42514: LD_INT 45
42516: PUSH
42517: LD_INT 47
42519: PUSH
42520: LD_INT 49
42522: PUSH
42523: EMPTY
42524: LIST
42525: LIST
42526: LIST
42527: LIST
42528: LIST
42529: LIST
42530: PUSH
42531: EMPTY
42532: LIST
42533: LIST
42534: LIST
42535: PUSH
42536: LD_VAR 0 12
42540: ARRAY
42541: ST_TO_ADDR
// list := list isect fac_list ;
42542: LD_ADDR_VAR 0 5
42546: PUSH
42547: LD_VAR 0 5
42551: PUSH
42552: LD_VAR 0 17
42556: ISECT
42557: ST_TO_ADDR
// if not list then
42558: LD_VAR 0 5
42562: NOT
42563: IFFALSE 42567
// exit ;
42565: GO 43395
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
42567: LD_VAR 0 12
42571: PUSH
42572: LD_INT 3
42574: EQUAL
42575: IFFALSE 42587
42577: PUSH
42578: LD_INT 49
42580: PUSH
42581: LD_VAR 0 5
42585: IN
42586: AND
42587: IFFALSE 42607
42589: PUSH
42590: LD_INT 31
42592: PPUSH
42593: LD_VAR 0 16
42597: PPUSH
42598: CALL_OW 321
42602: PUSH
42603: LD_INT 2
42605: EQUAL
42606: AND
42607: IFFALSE 42667
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
42609: LD_INT 22
42611: PUSH
42612: LD_VAR 0 16
42616: PUSH
42617: EMPTY
42618: LIST
42619: LIST
42620: PUSH
42621: LD_INT 35
42623: PUSH
42624: LD_INT 49
42626: PUSH
42627: EMPTY
42628: LIST
42629: LIST
42630: PUSH
42631: LD_INT 91
42633: PUSH
42634: LD_VAR 0 1
42638: PUSH
42639: LD_INT 10
42641: PUSH
42642: EMPTY
42643: LIST
42644: LIST
42645: LIST
42646: PUSH
42647: EMPTY
42648: LIST
42649: LIST
42650: LIST
42651: PPUSH
42652: CALL_OW 69
42656: NOT
42657: IFFALSE 42667
// weapon := ru_time_lapser ;
42659: LD_ADDR_VAR 0 18
42663: PUSH
42664: LD_INT 49
42666: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
42667: LD_VAR 0 12
42671: PUSH
42672: LD_INT 1
42674: PUSH
42675: LD_INT 2
42677: PUSH
42678: EMPTY
42679: LIST
42680: LIST
42681: IN
42682: IFFALSE 42706
42684: PUSH
42685: LD_INT 11
42687: PUSH
42688: LD_VAR 0 5
42692: IN
42693: IFTRUE 42705
42695: PUSH
42696: LD_INT 30
42698: PUSH
42699: LD_VAR 0 5
42703: IN
42704: OR
42705: AND
42706: IFFALSE 42726
42708: PUSH
42709: LD_INT 6
42711: PPUSH
42712: LD_VAR 0 16
42716: PPUSH
42717: CALL_OW 321
42721: PUSH
42722: LD_INT 2
42724: EQUAL
42725: AND
42726: IFFALSE 42893
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
42728: LD_INT 22
42730: PUSH
42731: LD_VAR 0 16
42735: PUSH
42736: EMPTY
42737: LIST
42738: LIST
42739: PUSH
42740: LD_INT 2
42742: PUSH
42743: LD_INT 35
42745: PUSH
42746: LD_INT 11
42748: PUSH
42749: EMPTY
42750: LIST
42751: LIST
42752: PUSH
42753: LD_INT 35
42755: PUSH
42756: LD_INT 30
42758: PUSH
42759: EMPTY
42760: LIST
42761: LIST
42762: PUSH
42763: EMPTY
42764: LIST
42765: LIST
42766: LIST
42767: PUSH
42768: LD_INT 91
42770: PUSH
42771: LD_VAR 0 1
42775: PUSH
42776: LD_INT 18
42778: PUSH
42779: EMPTY
42780: LIST
42781: LIST
42782: LIST
42783: PUSH
42784: EMPTY
42785: LIST
42786: LIST
42787: LIST
42788: PPUSH
42789: CALL_OW 69
42793: NOT
42794: IFFALSE 42870
42796: PUSH
42797: LD_INT 22
42799: PUSH
42800: LD_VAR 0 16
42804: PUSH
42805: EMPTY
42806: LIST
42807: LIST
42808: PUSH
42809: LD_INT 2
42811: PUSH
42812: LD_INT 30
42814: PUSH
42815: LD_INT 32
42817: PUSH
42818: EMPTY
42819: LIST
42820: LIST
42821: PUSH
42822: LD_INT 30
42824: PUSH
42825: LD_INT 33
42827: PUSH
42828: EMPTY
42829: LIST
42830: LIST
42831: PUSH
42832: EMPTY
42833: LIST
42834: LIST
42835: LIST
42836: PUSH
42837: LD_INT 91
42839: PUSH
42840: LD_VAR 0 1
42844: PUSH
42845: LD_INT 12
42847: PUSH
42848: EMPTY
42849: LIST
42850: LIST
42851: LIST
42852: PUSH
42853: EMPTY
42854: LIST
42855: LIST
42856: LIST
42857: PUSH
42858: EMPTY
42859: LIST
42860: PPUSH
42861: CALL_OW 69
42865: PUSH
42866: LD_INT 2
42868: GREATER
42869: AND
42870: IFFALSE 42893
// weapon := [ us_radar , ar_radar ] [ nat ] ;
42872: LD_ADDR_VAR 0 18
42876: PUSH
42877: LD_INT 11
42879: PUSH
42880: LD_INT 30
42882: PUSH
42883: EMPTY
42884: LIST
42885: LIST
42886: PUSH
42887: LD_VAR 0 12
42891: ARRAY
42892: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
42893: LD_VAR 0 18
42897: NOT
42898: IFFALSE 42918
42900: PUSH
42901: LD_INT 40
42903: PPUSH
42904: LD_VAR 0 16
42908: PPUSH
42909: CALL_OW 321
42913: PUSH
42914: LD_INT 2
42916: EQUAL
42917: AND
42918: IFFALSE 42954
42920: PUSH
42921: LD_INT 7
42923: PUSH
42924: LD_VAR 0 5
42928: IN
42929: IFTRUE 42941
42931: PUSH
42932: LD_INT 28
42934: PUSH
42935: LD_VAR 0 5
42939: IN
42940: OR
42941: IFTRUE 42953
42943: PUSH
42944: LD_INT 45
42946: PUSH
42947: LD_VAR 0 5
42951: IN
42952: OR
42953: AND
42954: IFFALSE 43208
// begin hex := GetHexInfo ( x , y ) ;
42956: LD_ADDR_VAR 0 4
42960: PUSH
42961: LD_VAR 0 10
42965: PPUSH
42966: LD_VAR 0 11
42970: PPUSH
42971: CALL_OW 546
42975: ST_TO_ADDR
// if hex [ 1 ] then
42976: LD_VAR 0 4
42980: PUSH
42981: LD_INT 1
42983: ARRAY
42984: IFFALSE 42988
// exit ;
42986: GO 43395
// height := hex [ 2 ] ;
42988: LD_ADDR_VAR 0 15
42992: PUSH
42993: LD_VAR 0 4
42997: PUSH
42998: LD_INT 2
43000: ARRAY
43001: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
43002: LD_ADDR_VAR 0 14
43006: PUSH
43007: LD_INT 0
43009: PUSH
43010: LD_INT 2
43012: PUSH
43013: LD_INT 3
43015: PUSH
43016: LD_INT 5
43018: PUSH
43019: EMPTY
43020: LIST
43021: LIST
43022: LIST
43023: LIST
43024: ST_TO_ADDR
// for i in tmp do
43025: LD_ADDR_VAR 0 8
43029: PUSH
43030: LD_VAR 0 14
43034: PUSH
43035: FOR_IN
43036: IFFALSE 43206
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
43038: LD_ADDR_VAR 0 9
43042: PUSH
43043: LD_VAR 0 10
43047: PPUSH
43048: LD_VAR 0 8
43052: PPUSH
43053: LD_INT 5
43055: PPUSH
43056: CALL_OW 272
43060: PUSH
43061: LD_VAR 0 11
43065: PPUSH
43066: LD_VAR 0 8
43070: PPUSH
43071: LD_INT 5
43073: PPUSH
43074: CALL_OW 273
43078: PUSH
43079: EMPTY
43080: LIST
43081: LIST
43082: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
43083: LD_VAR 0 9
43087: PUSH
43088: LD_INT 1
43090: ARRAY
43091: PPUSH
43092: LD_VAR 0 9
43096: PUSH
43097: LD_INT 2
43099: ARRAY
43100: PPUSH
43101: CALL_OW 488
43105: IFFALSE 43204
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
43107: LD_ADDR_VAR 0 4
43111: PUSH
43112: LD_VAR 0 9
43116: PUSH
43117: LD_INT 1
43119: ARRAY
43120: PPUSH
43121: LD_VAR 0 9
43125: PUSH
43126: LD_INT 2
43128: ARRAY
43129: PPUSH
43130: CALL_OW 546
43134: ST_TO_ADDR
// if hex [ 1 ] then
43135: LD_VAR 0 4
43139: PUSH
43140: LD_INT 1
43142: ARRAY
43143: IFFALSE 43147
// continue ;
43145: GO 43035
// h := hex [ 2 ] ;
43147: LD_ADDR_VAR 0 13
43151: PUSH
43152: LD_VAR 0 4
43156: PUSH
43157: LD_INT 2
43159: ARRAY
43160: ST_TO_ADDR
// if h + 7 < height then
43161: LD_VAR 0 13
43165: PUSH
43166: LD_INT 7
43168: PLUS
43169: PUSH
43170: LD_VAR 0 15
43174: LESS
43175: IFFALSE 43204
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
43177: LD_ADDR_VAR 0 18
43181: PUSH
43182: LD_INT 7
43184: PUSH
43185: LD_INT 28
43187: PUSH
43188: LD_INT 45
43190: PUSH
43191: EMPTY
43192: LIST
43193: LIST
43194: LIST
43195: PUSH
43196: LD_VAR 0 12
43200: ARRAY
43201: ST_TO_ADDR
// break ;
43202: GO 43206
// end ; end ; end ;
43204: GO 43035
43206: POP
43207: POP
// end ; if not weapon then
43208: LD_VAR 0 18
43212: NOT
43213: IFFALSE 43273
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
43215: LD_ADDR_VAR 0 5
43219: PUSH
43220: LD_VAR 0 5
43224: PUSH
43225: LD_INT 11
43227: PUSH
43228: LD_INT 30
43230: PUSH
43231: LD_INT 49
43233: PUSH
43234: EMPTY
43235: LIST
43236: LIST
43237: LIST
43238: DIFF
43239: ST_TO_ADDR
// if not list then
43240: LD_VAR 0 5
43244: NOT
43245: IFFALSE 43249
// exit ;
43247: GO 43395
// weapon := list [ rand ( 1 , list ) ] ;
43249: LD_ADDR_VAR 0 18
43253: PUSH
43254: LD_VAR 0 5
43258: PUSH
43259: LD_INT 1
43261: PPUSH
43262: LD_VAR 0 5
43266: PPUSH
43267: CALL_OW 12
43271: ARRAY
43272: ST_TO_ADDR
// end ; if weapon then
43273: LD_VAR 0 18
43277: IFFALSE 43395
// begin tmp := CostOfWeapon ( weapon ) ;
43279: LD_ADDR_VAR 0 14
43283: PUSH
43284: LD_VAR 0 18
43288: PPUSH
43289: CALL_OW 451
43293: ST_TO_ADDR
// j := GetBase ( tower ) ;
43294: LD_ADDR_VAR 0 9
43298: PUSH
43299: LD_VAR 0 1
43303: PPUSH
43304: CALL_OW 274
43308: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
43309: LD_VAR 0 9
43313: PPUSH
43314: LD_INT 1
43316: PPUSH
43317: CALL_OW 275
43321: PUSH
43322: LD_VAR 0 14
43326: PUSH
43327: LD_INT 1
43329: ARRAY
43330: GREATEREQUAL
43331: IFFALSE 43357
43333: PUSH
43334: LD_VAR 0 9
43338: PPUSH
43339: LD_INT 2
43341: PPUSH
43342: CALL_OW 275
43346: PUSH
43347: LD_VAR 0 14
43351: PUSH
43352: LD_INT 2
43354: ARRAY
43355: GREATEREQUAL
43356: AND
43357: IFFALSE 43383
43359: PUSH
43360: LD_VAR 0 9
43364: PPUSH
43365: LD_INT 3
43367: PPUSH
43368: CALL_OW 275
43372: PUSH
43373: LD_VAR 0 14
43377: PUSH
43378: LD_INT 3
43380: ARRAY
43381: GREATEREQUAL
43382: AND
43383: IFFALSE 43395
// result := weapon ;
43385: LD_ADDR_VAR 0 3
43389: PUSH
43390: LD_VAR 0 18
43394: ST_TO_ADDR
// end ; end ;
43395: LD_VAR 0 3
43399: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
43400: LD_INT 0
43402: PPUSH
43403: PPUSH
// result := true ;
43404: LD_ADDR_VAR 0 3
43408: PUSH
43409: LD_INT 1
43411: ST_TO_ADDR
// if array1 = array2 then
43412: LD_VAR 0 1
43416: PUSH
43417: LD_VAR 0 2
43421: EQUAL
43422: IFFALSE 43482
// begin for i = 1 to array1 do
43424: LD_ADDR_VAR 0 4
43428: PUSH
43429: DOUBLE
43430: LD_INT 1
43432: DEC
43433: ST_TO_ADDR
43434: LD_VAR 0 1
43438: PUSH
43439: FOR_TO
43440: IFFALSE 43478
// if array1 [ i ] <> array2 [ i ] then
43442: LD_VAR 0 1
43446: PUSH
43447: LD_VAR 0 4
43451: ARRAY
43452: PUSH
43453: LD_VAR 0 2
43457: PUSH
43458: LD_VAR 0 4
43462: ARRAY
43463: NONEQUAL
43464: IFFALSE 43476
// begin result := false ;
43466: LD_ADDR_VAR 0 3
43470: PUSH
43471: LD_INT 0
43473: ST_TO_ADDR
// break ;
43474: GO 43478
// end ;
43476: GO 43439
43478: POP
43479: POP
// end else
43480: GO 43490
// result := false ;
43482: LD_ADDR_VAR 0 3
43486: PUSH
43487: LD_INT 0
43489: ST_TO_ADDR
// end ;
43490: LD_VAR 0 3
43494: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
43495: LD_INT 0
43497: PPUSH
43498: PPUSH
// if not array1 or not array2 then
43499: LD_VAR 0 1
43503: NOT
43504: IFTRUE 43513
43506: PUSH
43507: LD_VAR 0 2
43511: NOT
43512: OR
43513: IFFALSE 43517
// exit ;
43515: GO 43581
// result := true ;
43517: LD_ADDR_VAR 0 3
43521: PUSH
43522: LD_INT 1
43524: ST_TO_ADDR
// for i = 1 to array1 do
43525: LD_ADDR_VAR 0 4
43529: PUSH
43530: DOUBLE
43531: LD_INT 1
43533: DEC
43534: ST_TO_ADDR
43535: LD_VAR 0 1
43539: PUSH
43540: FOR_TO
43541: IFFALSE 43579
// if array1 [ i ] <> array2 [ i ] then
43543: LD_VAR 0 1
43547: PUSH
43548: LD_VAR 0 4
43552: ARRAY
43553: PUSH
43554: LD_VAR 0 2
43558: PUSH
43559: LD_VAR 0 4
43563: ARRAY
43564: NONEQUAL
43565: IFFALSE 43577
// begin result := false ;
43567: LD_ADDR_VAR 0 3
43571: PUSH
43572: LD_INT 0
43574: ST_TO_ADDR
// break ;
43575: GO 43579
// end ;
43577: GO 43540
43579: POP
43580: POP
// end ;
43581: LD_VAR 0 3
43585: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
43586: LD_INT 0
43588: PPUSH
43589: PPUSH
43590: PPUSH
// pom := GetBase ( fac ) ;
43591: LD_ADDR_VAR 0 5
43595: PUSH
43596: LD_VAR 0 1
43600: PPUSH
43601: CALL_OW 274
43605: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
43606: LD_ADDR_VAR 0 4
43610: PUSH
43611: LD_VAR 0 2
43615: PUSH
43616: LD_INT 1
43618: ARRAY
43619: PPUSH
43620: LD_VAR 0 2
43624: PUSH
43625: LD_INT 2
43627: ARRAY
43628: PPUSH
43629: LD_VAR 0 2
43633: PUSH
43634: LD_INT 3
43636: ARRAY
43637: PPUSH
43638: LD_VAR 0 2
43642: PUSH
43643: LD_INT 4
43645: ARRAY
43646: PPUSH
43647: CALL_OW 449
43651: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
43652: LD_ADDR_VAR 0 3
43656: PUSH
43657: LD_VAR 0 5
43661: PPUSH
43662: LD_INT 1
43664: PPUSH
43665: CALL_OW 275
43669: PUSH
43670: LD_VAR 0 4
43674: PUSH
43675: LD_INT 1
43677: ARRAY
43678: GREATEREQUAL
43679: IFFALSE 43705
43681: PUSH
43682: LD_VAR 0 5
43686: PPUSH
43687: LD_INT 2
43689: PPUSH
43690: CALL_OW 275
43694: PUSH
43695: LD_VAR 0 4
43699: PUSH
43700: LD_INT 2
43702: ARRAY
43703: GREATEREQUAL
43704: AND
43705: IFFALSE 43731
43707: PUSH
43708: LD_VAR 0 5
43712: PPUSH
43713: LD_INT 3
43715: PPUSH
43716: CALL_OW 275
43720: PUSH
43721: LD_VAR 0 4
43725: PUSH
43726: LD_INT 3
43728: ARRAY
43729: GREATEREQUAL
43730: AND
43731: ST_TO_ADDR
// end ;
43732: LD_VAR 0 3
43736: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
43737: LD_INT 0
43739: PPUSH
43740: PPUSH
43741: PPUSH
43742: PPUSH
// pom := GetBase ( building ) ;
43743: LD_ADDR_VAR 0 3
43747: PUSH
43748: LD_VAR 0 1
43752: PPUSH
43753: CALL_OW 274
43757: ST_TO_ADDR
// if not pom then
43758: LD_VAR 0 3
43762: NOT
43763: IFFALSE 43767
// exit ;
43765: GO 43941
// btype := GetBType ( building ) ;
43767: LD_ADDR_VAR 0 5
43771: PUSH
43772: LD_VAR 0 1
43776: PPUSH
43777: CALL_OW 266
43781: ST_TO_ADDR
// if btype = b_armoury then
43782: LD_VAR 0 5
43786: PUSH
43787: LD_INT 4
43789: EQUAL
43790: IFFALSE 43800
// btype := b_barracks ;
43792: LD_ADDR_VAR 0 5
43796: PUSH
43797: LD_INT 5
43799: ST_TO_ADDR
// if btype = b_depot then
43800: LD_VAR 0 5
43804: PUSH
43805: LD_INT 0
43807: EQUAL
43808: IFFALSE 43818
// btype := b_warehouse ;
43810: LD_ADDR_VAR 0 5
43814: PUSH
43815: LD_INT 1
43817: ST_TO_ADDR
// if btype = b_workshop then
43818: LD_VAR 0 5
43822: PUSH
43823: LD_INT 2
43825: EQUAL
43826: IFFALSE 43836
// btype := b_factory ;
43828: LD_ADDR_VAR 0 5
43832: PUSH
43833: LD_INT 3
43835: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
43836: LD_ADDR_VAR 0 4
43840: PUSH
43841: LD_VAR 0 5
43845: PPUSH
43846: LD_VAR 0 1
43850: PPUSH
43851: CALL_OW 248
43855: PPUSH
43856: CALL_OW 450
43860: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
43861: LD_ADDR_VAR 0 2
43865: PUSH
43866: LD_VAR 0 3
43870: PPUSH
43871: LD_INT 1
43873: PPUSH
43874: CALL_OW 275
43878: PUSH
43879: LD_VAR 0 4
43883: PUSH
43884: LD_INT 1
43886: ARRAY
43887: GREATEREQUAL
43888: IFFALSE 43914
43890: PUSH
43891: LD_VAR 0 3
43895: PPUSH
43896: LD_INT 2
43898: PPUSH
43899: CALL_OW 275
43903: PUSH
43904: LD_VAR 0 4
43908: PUSH
43909: LD_INT 2
43911: ARRAY
43912: GREATEREQUAL
43913: AND
43914: IFFALSE 43940
43916: PUSH
43917: LD_VAR 0 3
43921: PPUSH
43922: LD_INT 3
43924: PPUSH
43925: CALL_OW 275
43929: PUSH
43930: LD_VAR 0 4
43934: PUSH
43935: LD_INT 3
43937: ARRAY
43938: GREATEREQUAL
43939: AND
43940: ST_TO_ADDR
// end ;
43941: LD_VAR 0 2
43945: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
43946: LD_INT 0
43948: PPUSH
43949: PPUSH
43950: PPUSH
// pom := GetBase ( building ) ;
43951: LD_ADDR_VAR 0 4
43955: PUSH
43956: LD_VAR 0 1
43960: PPUSH
43961: CALL_OW 274
43965: ST_TO_ADDR
// if not pom then
43966: LD_VAR 0 4
43970: NOT
43971: IFFALSE 43975
// exit ;
43973: GO 44080
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
43975: LD_ADDR_VAR 0 5
43979: PUSH
43980: LD_VAR 0 2
43984: PPUSH
43985: LD_VAR 0 1
43989: PPUSH
43990: CALL_OW 248
43994: PPUSH
43995: CALL_OW 450
43999: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
44000: LD_ADDR_VAR 0 3
44004: PUSH
44005: LD_VAR 0 4
44009: PPUSH
44010: LD_INT 1
44012: PPUSH
44013: CALL_OW 275
44017: PUSH
44018: LD_VAR 0 5
44022: PUSH
44023: LD_INT 1
44025: ARRAY
44026: GREATEREQUAL
44027: IFFALSE 44053
44029: PUSH
44030: LD_VAR 0 4
44034: PPUSH
44035: LD_INT 2
44037: PPUSH
44038: CALL_OW 275
44042: PUSH
44043: LD_VAR 0 5
44047: PUSH
44048: LD_INT 2
44050: ARRAY
44051: GREATEREQUAL
44052: AND
44053: IFFALSE 44079
44055: PUSH
44056: LD_VAR 0 4
44060: PPUSH
44061: LD_INT 3
44063: PPUSH
44064: CALL_OW 275
44068: PUSH
44069: LD_VAR 0 5
44073: PUSH
44074: LD_INT 3
44076: ARRAY
44077: GREATEREQUAL
44078: AND
44079: ST_TO_ADDR
// end ;
44080: LD_VAR 0 3
44084: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
44085: LD_INT 0
44087: PPUSH
44088: PPUSH
44089: PPUSH
44090: PPUSH
44091: PPUSH
44092: PPUSH
44093: PPUSH
44094: PPUSH
44095: PPUSH
44096: PPUSH
44097: PPUSH
// result := false ;
44098: LD_ADDR_VAR 0 8
44102: PUSH
44103: LD_INT 0
44105: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
44106: LD_VAR 0 5
44110: NOT
44111: IFTRUE 44120
44113: PUSH
44114: LD_VAR 0 1
44118: NOT
44119: OR
44120: IFTRUE 44129
44122: PUSH
44123: LD_VAR 0 2
44127: NOT
44128: OR
44129: IFTRUE 44138
44131: PUSH
44132: LD_VAR 0 3
44136: NOT
44137: OR
44138: IFFALSE 44142
// exit ;
44140: GO 44968
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
44142: LD_ADDR_VAR 0 14
44146: PUSH
44147: LD_VAR 0 1
44151: PPUSH
44152: LD_VAR 0 2
44156: PPUSH
44157: LD_VAR 0 3
44161: PPUSH
44162: LD_VAR 0 4
44166: PPUSH
44167: LD_VAR 0 5
44171: PUSH
44172: LD_INT 1
44174: ARRAY
44175: PPUSH
44176: CALL_OW 248
44180: PPUSH
44181: LD_INT 0
44183: PPUSH
44184: CALL 46249 0 6
44188: ST_TO_ADDR
// if not hexes then
44189: LD_VAR 0 14
44193: NOT
44194: IFFALSE 44198
// exit ;
44196: GO 44968
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
44198: LD_ADDR_VAR 0 17
44202: PUSH
44203: LD_VAR 0 5
44207: PPUSH
44208: LD_INT 22
44210: PUSH
44211: LD_VAR 0 13
44215: PPUSH
44216: CALL_OW 255
44220: PUSH
44221: EMPTY
44222: LIST
44223: LIST
44224: PUSH
44225: LD_INT 2
44227: PUSH
44228: LD_INT 30
44230: PUSH
44231: LD_INT 0
44233: PUSH
44234: EMPTY
44235: LIST
44236: LIST
44237: PUSH
44238: LD_INT 30
44240: PUSH
44241: LD_INT 1
44243: PUSH
44244: EMPTY
44245: LIST
44246: LIST
44247: PUSH
44248: EMPTY
44249: LIST
44250: LIST
44251: LIST
44252: PUSH
44253: EMPTY
44254: LIST
44255: LIST
44256: PPUSH
44257: CALL_OW 72
44261: ST_TO_ADDR
// for i = 1 to hexes do
44262: LD_ADDR_VAR 0 9
44266: PUSH
44267: DOUBLE
44268: LD_INT 1
44270: DEC
44271: ST_TO_ADDR
44272: LD_VAR 0 14
44276: PUSH
44277: FOR_TO
44278: IFFALSE 44966
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
44280: LD_ADDR_VAR 0 13
44284: PUSH
44285: LD_VAR 0 14
44289: PUSH
44290: LD_VAR 0 9
44294: ARRAY
44295: PUSH
44296: LD_INT 1
44298: ARRAY
44299: PPUSH
44300: LD_VAR 0 14
44304: PUSH
44305: LD_VAR 0 9
44309: ARRAY
44310: PUSH
44311: LD_INT 2
44313: ARRAY
44314: PPUSH
44315: CALL_OW 428
44319: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
44320: LD_VAR 0 14
44324: PUSH
44325: LD_VAR 0 9
44329: ARRAY
44330: PUSH
44331: LD_INT 1
44333: ARRAY
44334: PPUSH
44335: LD_VAR 0 14
44339: PUSH
44340: LD_VAR 0 9
44344: ARRAY
44345: PUSH
44346: LD_INT 2
44348: ARRAY
44349: PPUSH
44350: CALL_OW 351
44354: IFTRUE 44393
44356: PUSH
44357: LD_VAR 0 14
44361: PUSH
44362: LD_VAR 0 9
44366: ARRAY
44367: PUSH
44368: LD_INT 1
44370: ARRAY
44371: PPUSH
44372: LD_VAR 0 14
44376: PUSH
44377: LD_VAR 0 9
44381: ARRAY
44382: PUSH
44383: LD_INT 2
44385: ARRAY
44386: PPUSH
44387: CALL_OW 488
44391: NOT
44392: OR
44393: IFTRUE 44410
44395: PUSH
44396: LD_VAR 0 13
44400: PPUSH
44401: CALL_OW 247
44405: PUSH
44406: LD_INT 3
44408: EQUAL
44409: OR
44410: IFFALSE 44416
// exit ;
44412: POP
44413: POP
44414: GO 44968
// if not tmp then
44416: LD_VAR 0 13
44420: NOT
44421: IFFALSE 44425
// continue ;
44423: GO 44277
// result := true ;
44425: LD_ADDR_VAR 0 8
44429: PUSH
44430: LD_INT 1
44432: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
44433: LD_VAR 0 6
44437: IFFALSE 44454
44439: PUSH
44440: LD_VAR 0 13
44444: PPUSH
44445: CALL_OW 247
44449: PUSH
44450: LD_INT 2
44452: EQUAL
44453: AND
44454: IFFALSE 44471
44456: PUSH
44457: LD_VAR 0 13
44461: PPUSH
44462: CALL_OW 263
44466: PUSH
44467: LD_INT 1
44469: EQUAL
44470: AND
44471: IFFALSE 44635
// begin if IsDrivenBy ( tmp ) then
44473: LD_VAR 0 13
44477: PPUSH
44478: CALL_OW 311
44482: IFFALSE 44486
// continue ;
44484: GO 44277
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
44486: LD_VAR 0 6
44490: PPUSH
44491: LD_INT 3
44493: PUSH
44494: LD_INT 60
44496: PUSH
44497: EMPTY
44498: LIST
44499: PUSH
44500: EMPTY
44501: LIST
44502: LIST
44503: PUSH
44504: LD_INT 3
44506: PUSH
44507: LD_INT 55
44509: PUSH
44510: EMPTY
44511: LIST
44512: PUSH
44513: EMPTY
44514: LIST
44515: LIST
44516: PUSH
44517: EMPTY
44518: LIST
44519: LIST
44520: PPUSH
44521: CALL_OW 72
44525: IFFALSE 44633
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
44527: LD_ADDR_VAR 0 18
44531: PUSH
44532: LD_VAR 0 6
44536: PPUSH
44537: LD_INT 3
44539: PUSH
44540: LD_INT 60
44542: PUSH
44543: EMPTY
44544: LIST
44545: PUSH
44546: EMPTY
44547: LIST
44548: LIST
44549: PUSH
44550: LD_INT 3
44552: PUSH
44553: LD_INT 55
44555: PUSH
44556: EMPTY
44557: LIST
44558: PUSH
44559: EMPTY
44560: LIST
44561: LIST
44562: PUSH
44563: EMPTY
44564: LIST
44565: LIST
44566: PPUSH
44567: CALL_OW 72
44571: PUSH
44572: LD_INT 1
44574: ARRAY
44575: ST_TO_ADDR
// if IsInUnit ( driver ) then
44576: LD_VAR 0 18
44580: PPUSH
44581: CALL_OW 310
44585: IFFALSE 44596
// ComExit ( driver ) ;
44587: LD_VAR 0 18
44591: PPUSH
44592: CALL 70249 0 1
// AddComEnterUnit ( driver , tmp ) ;
44596: LD_VAR 0 18
44600: PPUSH
44601: LD_VAR 0 13
44605: PPUSH
44606: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
44610: LD_VAR 0 18
44614: PPUSH
44615: LD_VAR 0 7
44619: PPUSH
44620: CALL_OW 173
// AddComExitVehicle ( driver ) ;
44624: LD_VAR 0 18
44628: PPUSH
44629: CALL_OW 181
// end ; continue ;
44633: GO 44277
// end ; if not cleaners or not tmp in cleaners then
44635: LD_VAR 0 6
44639: NOT
44640: IFTRUE 44655
44642: PUSH
44643: LD_VAR 0 13
44647: PUSH
44648: LD_VAR 0 6
44652: IN
44653: NOT
44654: OR
44655: IFFALSE 44964
// begin if dep then
44657: LD_VAR 0 17
44661: IFFALSE 44797
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
44663: LD_ADDR_VAR 0 16
44667: PUSH
44668: LD_VAR 0 17
44672: PUSH
44673: LD_INT 1
44675: ARRAY
44676: PPUSH
44677: CALL_OW 250
44681: PPUSH
44682: LD_VAR 0 17
44686: PUSH
44687: LD_INT 1
44689: ARRAY
44690: PPUSH
44691: CALL_OW 254
44695: PPUSH
44696: LD_INT 5
44698: PPUSH
44699: CALL_OW 272
44703: PUSH
44704: LD_VAR 0 17
44708: PUSH
44709: LD_INT 1
44711: ARRAY
44712: PPUSH
44713: CALL_OW 251
44717: PPUSH
44718: LD_VAR 0 17
44722: PUSH
44723: LD_INT 1
44725: ARRAY
44726: PPUSH
44727: CALL_OW 254
44731: PPUSH
44732: LD_INT 5
44734: PPUSH
44735: CALL_OW 273
44739: PUSH
44740: EMPTY
44741: LIST
44742: LIST
44743: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
44744: LD_VAR 0 16
44748: PUSH
44749: LD_INT 1
44751: ARRAY
44752: PPUSH
44753: LD_VAR 0 16
44757: PUSH
44758: LD_INT 2
44760: ARRAY
44761: PPUSH
44762: CALL_OW 488
44766: IFFALSE 44797
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
44768: LD_VAR 0 13
44772: PPUSH
44773: LD_VAR 0 16
44777: PUSH
44778: LD_INT 1
44780: ARRAY
44781: PPUSH
44782: LD_VAR 0 16
44786: PUSH
44787: LD_INT 2
44789: ARRAY
44790: PPUSH
44791: CALL_OW 111
// continue ;
44795: GO 44277
// end ; end ; r := GetDir ( tmp ) ;
44797: LD_ADDR_VAR 0 15
44801: PUSH
44802: LD_VAR 0 13
44806: PPUSH
44807: CALL_OW 254
44811: ST_TO_ADDR
// if r = 5 then
44812: LD_VAR 0 15
44816: PUSH
44817: LD_INT 5
44819: EQUAL
44820: IFFALSE 44830
// r := 0 ;
44822: LD_ADDR_VAR 0 15
44826: PUSH
44827: LD_INT 0
44829: ST_TO_ADDR
// for j = r to 5 do
44830: LD_ADDR_VAR 0 10
44834: PUSH
44835: DOUBLE
44836: LD_VAR 0 15
44840: DEC
44841: ST_TO_ADDR
44842: LD_INT 5
44844: PUSH
44845: FOR_TO
44846: IFFALSE 44962
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
44848: LD_ADDR_VAR 0 11
44852: PUSH
44853: LD_VAR 0 13
44857: PPUSH
44858: CALL_OW 250
44862: PPUSH
44863: LD_VAR 0 10
44867: PPUSH
44868: LD_INT 2
44870: PPUSH
44871: CALL_OW 272
44875: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
44876: LD_ADDR_VAR 0 12
44880: PUSH
44881: LD_VAR 0 13
44885: PPUSH
44886: CALL_OW 251
44890: PPUSH
44891: LD_VAR 0 10
44895: PPUSH
44896: LD_INT 2
44898: PPUSH
44899: CALL_OW 273
44903: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
44904: LD_VAR 0 11
44908: PPUSH
44909: LD_VAR 0 12
44913: PPUSH
44914: CALL_OW 488
44918: IFFALSE 44937
44920: PUSH
44921: LD_VAR 0 11
44925: PPUSH
44926: LD_VAR 0 12
44930: PPUSH
44931: CALL_OW 428
44935: NOT
44936: AND
44937: IFFALSE 44960
// begin ComMoveXY ( tmp , _x , _y ) ;
44939: LD_VAR 0 13
44943: PPUSH
44944: LD_VAR 0 11
44948: PPUSH
44949: LD_VAR 0 12
44953: PPUSH
44954: CALL_OW 111
// break ;
44958: GO 44962
// end ; end ;
44960: GO 44845
44962: POP
44963: POP
// end ; end ;
44964: GO 44277
44966: POP
44967: POP
// end ;
44968: LD_VAR 0 8
44972: RET
// export function BuildingTechInvented ( side , btype ) ; begin
44973: LD_INT 0
44975: PPUSH
// result := true ;
44976: LD_ADDR_VAR 0 3
44980: PUSH
44981: LD_INT 1
44983: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
44984: LD_VAR 0 2
44988: PUSH
44989: LD_INT 24
44991: DOUBLE
44992: EQUAL
44993: IFTRUE 45003
44995: LD_INT 33
44997: DOUBLE
44998: EQUAL
44999: IFTRUE 45003
45001: GO 45028
45003: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
45004: LD_ADDR_VAR 0 3
45008: PUSH
45009: LD_INT 32
45011: PPUSH
45012: LD_VAR 0 1
45016: PPUSH
45017: CALL_OW 321
45021: PUSH
45022: LD_INT 2
45024: EQUAL
45025: ST_TO_ADDR
45026: GO 45344
45028: LD_INT 20
45030: DOUBLE
45031: EQUAL
45032: IFTRUE 45036
45034: GO 45061
45036: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
45037: LD_ADDR_VAR 0 3
45041: PUSH
45042: LD_INT 6
45044: PPUSH
45045: LD_VAR 0 1
45049: PPUSH
45050: CALL_OW 321
45054: PUSH
45055: LD_INT 2
45057: EQUAL
45058: ST_TO_ADDR
45059: GO 45344
45061: LD_INT 22
45063: DOUBLE
45064: EQUAL
45065: IFTRUE 45075
45067: LD_INT 36
45069: DOUBLE
45070: EQUAL
45071: IFTRUE 45075
45073: GO 45100
45075: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
45076: LD_ADDR_VAR 0 3
45080: PUSH
45081: LD_INT 15
45083: PPUSH
45084: LD_VAR 0 1
45088: PPUSH
45089: CALL_OW 321
45093: PUSH
45094: LD_INT 2
45096: EQUAL
45097: ST_TO_ADDR
45098: GO 45344
45100: LD_INT 30
45102: DOUBLE
45103: EQUAL
45104: IFTRUE 45108
45106: GO 45133
45108: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
45109: LD_ADDR_VAR 0 3
45113: PUSH
45114: LD_INT 20
45116: PPUSH
45117: LD_VAR 0 1
45121: PPUSH
45122: CALL_OW 321
45126: PUSH
45127: LD_INT 2
45129: EQUAL
45130: ST_TO_ADDR
45131: GO 45344
45133: LD_INT 28
45135: DOUBLE
45136: EQUAL
45137: IFTRUE 45147
45139: LD_INT 21
45141: DOUBLE
45142: EQUAL
45143: IFTRUE 45147
45145: GO 45172
45147: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
45148: LD_ADDR_VAR 0 3
45152: PUSH
45153: LD_INT 21
45155: PPUSH
45156: LD_VAR 0 1
45160: PPUSH
45161: CALL_OW 321
45165: PUSH
45166: LD_INT 2
45168: EQUAL
45169: ST_TO_ADDR
45170: GO 45344
45172: LD_INT 16
45174: DOUBLE
45175: EQUAL
45176: IFTRUE 45180
45178: GO 45205
45180: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
45181: LD_ADDR_VAR 0 3
45185: PUSH
45186: LD_INT 84
45188: PPUSH
45189: LD_VAR 0 1
45193: PPUSH
45194: CALL_OW 321
45198: PUSH
45199: LD_INT 2
45201: EQUAL
45202: ST_TO_ADDR
45203: GO 45344
45205: LD_INT 19
45207: DOUBLE
45208: EQUAL
45209: IFTRUE 45219
45211: LD_INT 23
45213: DOUBLE
45214: EQUAL
45215: IFTRUE 45219
45217: GO 45244
45219: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
45220: LD_ADDR_VAR 0 3
45224: PUSH
45225: LD_INT 83
45227: PPUSH
45228: LD_VAR 0 1
45232: PPUSH
45233: CALL_OW 321
45237: PUSH
45238: LD_INT 2
45240: EQUAL
45241: ST_TO_ADDR
45242: GO 45344
45244: LD_INT 17
45246: DOUBLE
45247: EQUAL
45248: IFTRUE 45252
45250: GO 45277
45252: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
45253: LD_ADDR_VAR 0 3
45257: PUSH
45258: LD_INT 39
45260: PPUSH
45261: LD_VAR 0 1
45265: PPUSH
45266: CALL_OW 321
45270: PUSH
45271: LD_INT 2
45273: EQUAL
45274: ST_TO_ADDR
45275: GO 45344
45277: LD_INT 18
45279: DOUBLE
45280: EQUAL
45281: IFTRUE 45285
45283: GO 45310
45285: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
45286: LD_ADDR_VAR 0 3
45290: PUSH
45291: LD_INT 40
45293: PPUSH
45294: LD_VAR 0 1
45298: PPUSH
45299: CALL_OW 321
45303: PUSH
45304: LD_INT 2
45306: EQUAL
45307: ST_TO_ADDR
45308: GO 45344
45310: LD_INT 27
45312: DOUBLE
45313: EQUAL
45314: IFTRUE 45318
45316: GO 45343
45318: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
45319: LD_ADDR_VAR 0 3
45323: PUSH
45324: LD_INT 35
45326: PPUSH
45327: LD_VAR 0 1
45331: PPUSH
45332: CALL_OW 321
45336: PUSH
45337: LD_INT 2
45339: EQUAL
45340: ST_TO_ADDR
45341: GO 45344
45343: POP
// end ;
45344: LD_VAR 0 3
45348: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
45349: LD_INT 0
45351: PPUSH
45352: PPUSH
45353: PPUSH
45354: PPUSH
45355: PPUSH
45356: PPUSH
45357: PPUSH
45358: PPUSH
45359: PPUSH
45360: PPUSH
45361: PPUSH
// result := false ;
45362: LD_ADDR_VAR 0 6
45366: PUSH
45367: LD_INT 0
45369: ST_TO_ADDR
// if btype = b_depot then
45370: LD_VAR 0 2
45374: PUSH
45375: LD_INT 0
45377: EQUAL
45378: IFFALSE 45390
// begin result := true ;
45380: LD_ADDR_VAR 0 6
45384: PUSH
45385: LD_INT 1
45387: ST_TO_ADDR
// exit ;
45388: GO 46244
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
45390: LD_VAR 0 1
45394: NOT
45395: IFTRUE 45420
45397: PUSH
45398: LD_VAR 0 1
45402: PPUSH
45403: CALL_OW 266
45407: PUSH
45408: LD_INT 0
45410: PUSH
45411: LD_INT 1
45413: PUSH
45414: EMPTY
45415: LIST
45416: LIST
45417: IN
45418: NOT
45419: OR
45420: IFTRUE 45429
45422: PUSH
45423: LD_VAR 0 2
45427: NOT
45428: OR
45429: IFTRUE 45465
45431: PUSH
45432: LD_VAR 0 5
45436: PUSH
45437: LD_INT 0
45439: PUSH
45440: LD_INT 1
45442: PUSH
45443: LD_INT 2
45445: PUSH
45446: LD_INT 3
45448: PUSH
45449: LD_INT 4
45451: PUSH
45452: LD_INT 5
45454: PUSH
45455: EMPTY
45456: LIST
45457: LIST
45458: LIST
45459: LIST
45460: LIST
45461: LIST
45462: IN
45463: NOT
45464: OR
45465: IFTRUE 45484
45467: PUSH
45468: LD_VAR 0 3
45472: PPUSH
45473: LD_VAR 0 4
45477: PPUSH
45478: CALL_OW 488
45482: NOT
45483: OR
45484: IFFALSE 45488
// exit ;
45486: GO 46244
// side := GetSide ( depot ) ;
45488: LD_ADDR_VAR 0 9
45492: PUSH
45493: LD_VAR 0 1
45497: PPUSH
45498: CALL_OW 255
45502: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
45503: LD_VAR 0 9
45507: PPUSH
45508: LD_VAR 0 2
45512: PPUSH
45513: CALL 44973 0 2
45517: NOT
45518: IFFALSE 45522
// exit ;
45520: GO 46244
// pom := GetBase ( depot ) ;
45522: LD_ADDR_VAR 0 10
45526: PUSH
45527: LD_VAR 0 1
45531: PPUSH
45532: CALL_OW 274
45536: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
45537: LD_ADDR_VAR 0 11
45541: PUSH
45542: LD_VAR 0 2
45546: PPUSH
45547: LD_VAR 0 1
45551: PPUSH
45552: CALL_OW 248
45556: PPUSH
45557: CALL_OW 450
45561: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
45562: LD_VAR 0 10
45566: PPUSH
45567: LD_INT 1
45569: PPUSH
45570: CALL_OW 275
45574: PUSH
45575: LD_VAR 0 11
45579: PUSH
45580: LD_INT 1
45582: ARRAY
45583: GREATEREQUAL
45584: IFFALSE 45610
45586: PUSH
45587: LD_VAR 0 10
45591: PPUSH
45592: LD_INT 2
45594: PPUSH
45595: CALL_OW 275
45599: PUSH
45600: LD_VAR 0 11
45604: PUSH
45605: LD_INT 2
45607: ARRAY
45608: GREATEREQUAL
45609: AND
45610: IFFALSE 45636
45612: PUSH
45613: LD_VAR 0 10
45617: PPUSH
45618: LD_INT 3
45620: PPUSH
45621: CALL_OW 275
45625: PUSH
45626: LD_VAR 0 11
45630: PUSH
45631: LD_INT 3
45633: ARRAY
45634: GREATEREQUAL
45635: AND
45636: NOT
45637: IFFALSE 45641
// exit ;
45639: GO 46244
// if GetBType ( depot ) = b_depot then
45641: LD_VAR 0 1
45645: PPUSH
45646: CALL_OW 266
45650: PUSH
45651: LD_INT 0
45653: EQUAL
45654: IFFALSE 45666
// dist := 28 else
45656: LD_ADDR_VAR 0 14
45660: PUSH
45661: LD_INT 28
45663: ST_TO_ADDR
45664: GO 45674
// dist := 36 ;
45666: LD_ADDR_VAR 0 14
45670: PUSH
45671: LD_INT 36
45673: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
45674: LD_VAR 0 1
45678: PPUSH
45679: LD_VAR 0 3
45683: PPUSH
45684: LD_VAR 0 4
45688: PPUSH
45689: CALL_OW 297
45693: PUSH
45694: LD_VAR 0 14
45698: GREATER
45699: IFFALSE 45703
// exit ;
45701: GO 46244
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
45703: LD_ADDR_VAR 0 12
45707: PUSH
45708: LD_VAR 0 2
45712: PPUSH
45713: LD_VAR 0 3
45717: PPUSH
45718: LD_VAR 0 4
45722: PPUSH
45723: LD_VAR 0 5
45727: PPUSH
45728: LD_VAR 0 1
45732: PPUSH
45733: CALL_OW 248
45737: PPUSH
45738: LD_INT 0
45740: PPUSH
45741: CALL 46249 0 6
45745: ST_TO_ADDR
// if not hexes then
45746: LD_VAR 0 12
45750: NOT
45751: IFFALSE 45755
// exit ;
45753: GO 46244
// hex := GetHexInfo ( x , y ) ;
45755: LD_ADDR_VAR 0 15
45759: PUSH
45760: LD_VAR 0 3
45764: PPUSH
45765: LD_VAR 0 4
45769: PPUSH
45770: CALL_OW 546
45774: ST_TO_ADDR
// if hex [ 1 ] then
45775: LD_VAR 0 15
45779: PUSH
45780: LD_INT 1
45782: ARRAY
45783: IFFALSE 45787
// exit ;
45785: GO 46244
// height := hex [ 2 ] ;
45787: LD_ADDR_VAR 0 13
45791: PUSH
45792: LD_VAR 0 15
45796: PUSH
45797: LD_INT 2
45799: ARRAY
45800: ST_TO_ADDR
// for i = 1 to hexes do
45801: LD_ADDR_VAR 0 7
45805: PUSH
45806: DOUBLE
45807: LD_INT 1
45809: DEC
45810: ST_TO_ADDR
45811: LD_VAR 0 12
45815: PUSH
45816: FOR_TO
45817: IFFALSE 46161
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
45819: LD_VAR 0 12
45823: PUSH
45824: LD_VAR 0 7
45828: ARRAY
45829: PUSH
45830: LD_INT 1
45832: ARRAY
45833: PPUSH
45834: LD_VAR 0 12
45838: PUSH
45839: LD_VAR 0 7
45843: ARRAY
45844: PUSH
45845: LD_INT 2
45847: ARRAY
45848: PPUSH
45849: CALL_OW 488
45853: NOT
45854: IFTRUE 45896
45856: PUSH
45857: LD_VAR 0 12
45861: PUSH
45862: LD_VAR 0 7
45866: ARRAY
45867: PUSH
45868: LD_INT 1
45870: ARRAY
45871: PPUSH
45872: LD_VAR 0 12
45876: PUSH
45877: LD_VAR 0 7
45881: ARRAY
45882: PUSH
45883: LD_INT 2
45885: ARRAY
45886: PPUSH
45887: CALL_OW 428
45891: PUSH
45892: LD_INT 0
45894: GREATER
45895: OR
45896: IFTRUE 45934
45898: PUSH
45899: LD_VAR 0 12
45903: PUSH
45904: LD_VAR 0 7
45908: ARRAY
45909: PUSH
45910: LD_INT 1
45912: ARRAY
45913: PPUSH
45914: LD_VAR 0 12
45918: PUSH
45919: LD_VAR 0 7
45923: ARRAY
45924: PUSH
45925: LD_INT 2
45927: ARRAY
45928: PPUSH
45929: CALL_OW 351
45933: OR
45934: IFFALSE 45940
// exit ;
45936: POP
45937: POP
45938: GO 46244
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
45940: LD_ADDR_VAR 0 8
45944: PUSH
45945: LD_VAR 0 12
45949: PUSH
45950: LD_VAR 0 7
45954: ARRAY
45955: PUSH
45956: LD_INT 1
45958: ARRAY
45959: PPUSH
45960: LD_VAR 0 12
45964: PUSH
45965: LD_VAR 0 7
45969: ARRAY
45970: PUSH
45971: LD_INT 2
45973: ARRAY
45974: PPUSH
45975: CALL_OW 546
45979: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
45980: LD_VAR 0 8
45984: PUSH
45985: LD_INT 1
45987: ARRAY
45988: IFTRUE 46010
45990: PUSH
45991: LD_VAR 0 8
45995: PUSH
45996: LD_INT 2
45998: ARRAY
45999: PUSH
46000: LD_VAR 0 13
46004: PUSH
46005: LD_INT 2
46007: PLUS
46008: GREATER
46009: OR
46010: IFTRUE 46032
46012: PUSH
46013: LD_VAR 0 8
46017: PUSH
46018: LD_INT 2
46020: ARRAY
46021: PUSH
46022: LD_VAR 0 13
46026: PUSH
46027: LD_INT 2
46029: MINUS
46030: LESS
46031: OR
46032: IFTRUE 46100
46034: PUSH
46035: LD_VAR 0 8
46039: PUSH
46040: LD_INT 3
46042: ARRAY
46043: PUSH
46044: LD_INT 0
46046: PUSH
46047: LD_INT 8
46049: PUSH
46050: LD_INT 9
46052: PUSH
46053: LD_INT 10
46055: PUSH
46056: LD_INT 11
46058: PUSH
46059: LD_INT 12
46061: PUSH
46062: LD_INT 13
46064: PUSH
46065: LD_INT 16
46067: PUSH
46068: LD_INT 17
46070: PUSH
46071: LD_INT 18
46073: PUSH
46074: LD_INT 19
46076: PUSH
46077: LD_INT 20
46079: PUSH
46080: LD_INT 21
46082: PUSH
46083: EMPTY
46084: LIST
46085: LIST
46086: LIST
46087: LIST
46088: LIST
46089: LIST
46090: LIST
46091: LIST
46092: LIST
46093: LIST
46094: LIST
46095: LIST
46096: LIST
46097: IN
46098: NOT
46099: OR
46100: IFTRUE 46113
46102: PUSH
46103: LD_VAR 0 8
46107: PUSH
46108: LD_INT 5
46110: ARRAY
46111: NOT
46112: OR
46113: IFTRUE 46153
46115: PUSH
46116: LD_VAR 0 8
46120: PUSH
46121: LD_INT 6
46123: ARRAY
46124: PUSH
46125: LD_INT 1
46127: PUSH
46128: LD_INT 2
46130: PUSH
46131: LD_INT 7
46133: PUSH
46134: LD_INT 9
46136: PUSH
46137: LD_INT 10
46139: PUSH
46140: LD_INT 11
46142: PUSH
46143: EMPTY
46144: LIST
46145: LIST
46146: LIST
46147: LIST
46148: LIST
46149: LIST
46150: IN
46151: NOT
46152: OR
46153: IFFALSE 46159
// exit ;
46155: POP
46156: POP
46157: GO 46244
// end ;
46159: GO 45816
46161: POP
46162: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
46163: LD_VAR 0 9
46167: PPUSH
46168: LD_VAR 0 3
46172: PPUSH
46173: LD_VAR 0 4
46177: PPUSH
46178: LD_INT 20
46180: PPUSH
46181: CALL 38063 0 4
46185: PUSH
46186: LD_INT 4
46188: ARRAY
46189: IFFALSE 46193
// exit ;
46191: GO 46244
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
46193: LD_VAR 0 2
46197: PUSH
46198: LD_INT 29
46200: PUSH
46201: LD_INT 30
46203: PUSH
46204: EMPTY
46205: LIST
46206: LIST
46207: IN
46208: IFFALSE 46232
46210: PUSH
46211: LD_VAR 0 3
46215: PPUSH
46216: LD_VAR 0 4
46220: PPUSH
46221: LD_VAR 0 9
46225: PPUSH
46226: CALL_OW 440
46230: NOT
46231: AND
46232: IFFALSE 46236
// exit ;
46234: GO 46244
// result := true ;
46236: LD_ADDR_VAR 0 6
46240: PUSH
46241: LD_INT 1
46243: ST_TO_ADDR
// end ;
46244: LD_VAR 0 6
46248: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
46249: LD_INT 0
46251: PPUSH
46252: PPUSH
46253: PPUSH
46254: PPUSH
46255: PPUSH
46256: PPUSH
46257: PPUSH
46258: PPUSH
46259: PPUSH
46260: PPUSH
46261: PPUSH
46262: PPUSH
46263: PPUSH
46264: PPUSH
46265: PPUSH
46266: PPUSH
46267: PPUSH
46268: PPUSH
46269: PPUSH
46270: PPUSH
46271: PPUSH
46272: PPUSH
46273: PPUSH
46274: PPUSH
46275: PPUSH
46276: PPUSH
46277: PPUSH
46278: PPUSH
46279: PPUSH
46280: PPUSH
46281: PPUSH
46282: PPUSH
46283: PPUSH
46284: PPUSH
46285: PPUSH
46286: PPUSH
46287: PPUSH
46288: PPUSH
46289: PPUSH
46290: PPUSH
46291: PPUSH
46292: PPUSH
46293: PPUSH
46294: PPUSH
46295: PPUSH
46296: PPUSH
46297: PPUSH
46298: PPUSH
46299: PPUSH
46300: PPUSH
46301: PPUSH
46302: PPUSH
46303: PPUSH
46304: PPUSH
46305: PPUSH
46306: PPUSH
46307: PPUSH
46308: PPUSH
// result = [ ] ;
46309: LD_ADDR_VAR 0 7
46313: PUSH
46314: EMPTY
46315: ST_TO_ADDR
// temp_list = [ ] ;
46316: LD_ADDR_VAR 0 9
46320: PUSH
46321: EMPTY
46322: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
46323: LD_VAR 0 4
46327: PUSH
46328: LD_INT 0
46330: PUSH
46331: LD_INT 1
46333: PUSH
46334: LD_INT 2
46336: PUSH
46337: LD_INT 3
46339: PUSH
46340: LD_INT 4
46342: PUSH
46343: LD_INT 5
46345: PUSH
46346: EMPTY
46347: LIST
46348: LIST
46349: LIST
46350: LIST
46351: LIST
46352: LIST
46353: IN
46354: NOT
46355: IFTRUE 46398
46357: PUSH
46358: LD_VAR 0 1
46362: PUSH
46363: LD_INT 0
46365: PUSH
46366: LD_INT 1
46368: PUSH
46369: EMPTY
46370: LIST
46371: LIST
46372: IN
46373: IFFALSE 46397
46375: PUSH
46376: LD_VAR 0 5
46380: PUSH
46381: LD_INT 1
46383: PUSH
46384: LD_INT 2
46386: PUSH
46387: LD_INT 3
46389: PUSH
46390: EMPTY
46391: LIST
46392: LIST
46393: LIST
46394: IN
46395: NOT
46396: AND
46397: OR
46398: IFFALSE 46402
// exit ;
46400: GO 64801
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
46402: LD_VAR 0 1
46406: PUSH
46407: LD_INT 6
46409: PUSH
46410: LD_INT 7
46412: PUSH
46413: LD_INT 8
46415: PUSH
46416: LD_INT 13
46418: PUSH
46419: LD_INT 12
46421: PUSH
46422: LD_INT 15
46424: PUSH
46425: LD_INT 11
46427: PUSH
46428: LD_INT 14
46430: PUSH
46431: LD_INT 10
46433: PUSH
46434: EMPTY
46435: LIST
46436: LIST
46437: LIST
46438: LIST
46439: LIST
46440: LIST
46441: LIST
46442: LIST
46443: LIST
46444: IN
46445: IFFALSE 46455
// btype = b_lab ;
46447: LD_ADDR_VAR 0 1
46451: PUSH
46452: LD_INT 6
46454: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
46455: LD_VAR 0 6
46459: PUSH
46460: LD_INT 0
46462: PUSH
46463: LD_INT 1
46465: PUSH
46466: LD_INT 2
46468: PUSH
46469: EMPTY
46470: LIST
46471: LIST
46472: LIST
46473: IN
46474: NOT
46475: IFTRUE 46543
46477: PUSH
46478: LD_VAR 0 1
46482: PUSH
46483: LD_INT 0
46485: PUSH
46486: LD_INT 1
46488: PUSH
46489: LD_INT 2
46491: PUSH
46492: LD_INT 3
46494: PUSH
46495: LD_INT 6
46497: PUSH
46498: LD_INT 36
46500: PUSH
46501: LD_INT 4
46503: PUSH
46504: LD_INT 5
46506: PUSH
46507: LD_INT 31
46509: PUSH
46510: LD_INT 32
46512: PUSH
46513: LD_INT 33
46515: PUSH
46516: EMPTY
46517: LIST
46518: LIST
46519: LIST
46520: LIST
46521: LIST
46522: LIST
46523: LIST
46524: LIST
46525: LIST
46526: LIST
46527: LIST
46528: IN
46529: NOT
46530: IFFALSE 46542
46532: PUSH
46533: LD_VAR 0 6
46537: PUSH
46538: LD_INT 1
46540: EQUAL
46541: AND
46542: OR
46543: IFTRUE 46575
46545: PUSH
46546: LD_VAR 0 1
46550: PUSH
46551: LD_INT 2
46553: PUSH
46554: LD_INT 3
46556: PUSH
46557: EMPTY
46558: LIST
46559: LIST
46560: IN
46561: NOT
46562: IFFALSE 46574
46564: PUSH
46565: LD_VAR 0 6
46569: PUSH
46570: LD_INT 2
46572: EQUAL
46573: AND
46574: OR
46575: IFFALSE 46585
// mode = 0 ;
46577: LD_ADDR_VAR 0 6
46581: PUSH
46582: LD_INT 0
46584: ST_TO_ADDR
// case mode of 0 :
46585: LD_VAR 0 6
46589: PUSH
46590: LD_INT 0
46592: DOUBLE
46593: EQUAL
46594: IFTRUE 46598
46596: GO 58051
46598: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
46599: LD_ADDR_VAR 0 11
46603: PUSH
46604: LD_INT 0
46606: PUSH
46607: LD_INT 0
46609: PUSH
46610: EMPTY
46611: LIST
46612: LIST
46613: PUSH
46614: LD_INT 0
46616: PUSH
46617: LD_INT 1
46619: NEG
46620: PUSH
46621: EMPTY
46622: LIST
46623: LIST
46624: PUSH
46625: LD_INT 1
46627: PUSH
46628: LD_INT 0
46630: PUSH
46631: EMPTY
46632: LIST
46633: LIST
46634: PUSH
46635: LD_INT 1
46637: PUSH
46638: LD_INT 1
46640: PUSH
46641: EMPTY
46642: LIST
46643: LIST
46644: PUSH
46645: LD_INT 0
46647: PUSH
46648: LD_INT 1
46650: PUSH
46651: EMPTY
46652: LIST
46653: LIST
46654: PUSH
46655: LD_INT 1
46657: NEG
46658: PUSH
46659: LD_INT 0
46661: PUSH
46662: EMPTY
46663: LIST
46664: LIST
46665: PUSH
46666: LD_INT 1
46668: NEG
46669: PUSH
46670: LD_INT 1
46672: NEG
46673: PUSH
46674: EMPTY
46675: LIST
46676: LIST
46677: PUSH
46678: LD_INT 1
46680: NEG
46681: PUSH
46682: LD_INT 2
46684: NEG
46685: PUSH
46686: EMPTY
46687: LIST
46688: LIST
46689: PUSH
46690: LD_INT 0
46692: PUSH
46693: LD_INT 2
46695: NEG
46696: PUSH
46697: EMPTY
46698: LIST
46699: LIST
46700: PUSH
46701: LD_INT 1
46703: PUSH
46704: LD_INT 1
46706: NEG
46707: PUSH
46708: EMPTY
46709: LIST
46710: LIST
46711: PUSH
46712: LD_INT 1
46714: PUSH
46715: LD_INT 2
46717: PUSH
46718: EMPTY
46719: LIST
46720: LIST
46721: PUSH
46722: LD_INT 0
46724: PUSH
46725: LD_INT 2
46727: PUSH
46728: EMPTY
46729: LIST
46730: LIST
46731: PUSH
46732: LD_INT 1
46734: NEG
46735: PUSH
46736: LD_INT 1
46738: PUSH
46739: EMPTY
46740: LIST
46741: LIST
46742: PUSH
46743: LD_INT 1
46745: PUSH
46746: LD_INT 3
46748: PUSH
46749: EMPTY
46750: LIST
46751: LIST
46752: PUSH
46753: LD_INT 0
46755: PUSH
46756: LD_INT 3
46758: PUSH
46759: EMPTY
46760: LIST
46761: LIST
46762: PUSH
46763: LD_INT 1
46765: NEG
46766: PUSH
46767: LD_INT 2
46769: PUSH
46770: EMPTY
46771: LIST
46772: LIST
46773: PUSH
46774: EMPTY
46775: LIST
46776: LIST
46777: LIST
46778: LIST
46779: LIST
46780: LIST
46781: LIST
46782: LIST
46783: LIST
46784: LIST
46785: LIST
46786: LIST
46787: LIST
46788: LIST
46789: LIST
46790: LIST
46791: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46792: LD_ADDR_VAR 0 12
46796: PUSH
46797: LD_INT 0
46799: PUSH
46800: LD_INT 0
46802: PUSH
46803: EMPTY
46804: LIST
46805: LIST
46806: PUSH
46807: LD_INT 0
46809: PUSH
46810: LD_INT 1
46812: NEG
46813: PUSH
46814: EMPTY
46815: LIST
46816: LIST
46817: PUSH
46818: LD_INT 1
46820: PUSH
46821: LD_INT 0
46823: PUSH
46824: EMPTY
46825: LIST
46826: LIST
46827: PUSH
46828: LD_INT 1
46830: PUSH
46831: LD_INT 1
46833: PUSH
46834: EMPTY
46835: LIST
46836: LIST
46837: PUSH
46838: LD_INT 0
46840: PUSH
46841: LD_INT 1
46843: PUSH
46844: EMPTY
46845: LIST
46846: LIST
46847: PUSH
46848: LD_INT 1
46850: NEG
46851: PUSH
46852: LD_INT 0
46854: PUSH
46855: EMPTY
46856: LIST
46857: LIST
46858: PUSH
46859: LD_INT 1
46861: NEG
46862: PUSH
46863: LD_INT 1
46865: NEG
46866: PUSH
46867: EMPTY
46868: LIST
46869: LIST
46870: PUSH
46871: LD_INT 1
46873: PUSH
46874: LD_INT 1
46876: NEG
46877: PUSH
46878: EMPTY
46879: LIST
46880: LIST
46881: PUSH
46882: LD_INT 2
46884: PUSH
46885: LD_INT 0
46887: PUSH
46888: EMPTY
46889: LIST
46890: LIST
46891: PUSH
46892: LD_INT 2
46894: PUSH
46895: LD_INT 1
46897: PUSH
46898: EMPTY
46899: LIST
46900: LIST
46901: PUSH
46902: LD_INT 1
46904: NEG
46905: PUSH
46906: LD_INT 1
46908: PUSH
46909: EMPTY
46910: LIST
46911: LIST
46912: PUSH
46913: LD_INT 2
46915: NEG
46916: PUSH
46917: LD_INT 0
46919: PUSH
46920: EMPTY
46921: LIST
46922: LIST
46923: PUSH
46924: LD_INT 2
46926: NEG
46927: PUSH
46928: LD_INT 1
46930: NEG
46931: PUSH
46932: EMPTY
46933: LIST
46934: LIST
46935: PUSH
46936: LD_INT 2
46938: NEG
46939: PUSH
46940: LD_INT 1
46942: PUSH
46943: EMPTY
46944: LIST
46945: LIST
46946: PUSH
46947: LD_INT 3
46949: NEG
46950: PUSH
46951: LD_INT 0
46953: PUSH
46954: EMPTY
46955: LIST
46956: LIST
46957: PUSH
46958: LD_INT 3
46960: NEG
46961: PUSH
46962: LD_INT 1
46964: NEG
46965: PUSH
46966: EMPTY
46967: LIST
46968: LIST
46969: PUSH
46970: EMPTY
46971: LIST
46972: LIST
46973: LIST
46974: LIST
46975: LIST
46976: LIST
46977: LIST
46978: LIST
46979: LIST
46980: LIST
46981: LIST
46982: LIST
46983: LIST
46984: LIST
46985: LIST
46986: LIST
46987: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46988: LD_ADDR_VAR 0 13
46992: PUSH
46993: LD_INT 0
46995: PUSH
46996: LD_INT 0
46998: PUSH
46999: EMPTY
47000: LIST
47001: LIST
47002: PUSH
47003: LD_INT 0
47005: PUSH
47006: LD_INT 1
47008: NEG
47009: PUSH
47010: EMPTY
47011: LIST
47012: LIST
47013: PUSH
47014: LD_INT 1
47016: PUSH
47017: LD_INT 0
47019: PUSH
47020: EMPTY
47021: LIST
47022: LIST
47023: PUSH
47024: LD_INT 1
47026: PUSH
47027: LD_INT 1
47029: PUSH
47030: EMPTY
47031: LIST
47032: LIST
47033: PUSH
47034: LD_INT 0
47036: PUSH
47037: LD_INT 1
47039: PUSH
47040: EMPTY
47041: LIST
47042: LIST
47043: PUSH
47044: LD_INT 1
47046: NEG
47047: PUSH
47048: LD_INT 0
47050: PUSH
47051: EMPTY
47052: LIST
47053: LIST
47054: PUSH
47055: LD_INT 1
47057: NEG
47058: PUSH
47059: LD_INT 1
47061: NEG
47062: PUSH
47063: EMPTY
47064: LIST
47065: LIST
47066: PUSH
47067: LD_INT 1
47069: NEG
47070: PUSH
47071: LD_INT 2
47073: NEG
47074: PUSH
47075: EMPTY
47076: LIST
47077: LIST
47078: PUSH
47079: LD_INT 2
47081: PUSH
47082: LD_INT 1
47084: PUSH
47085: EMPTY
47086: LIST
47087: LIST
47088: PUSH
47089: LD_INT 2
47091: PUSH
47092: LD_INT 2
47094: PUSH
47095: EMPTY
47096: LIST
47097: LIST
47098: PUSH
47099: LD_INT 1
47101: PUSH
47102: LD_INT 2
47104: PUSH
47105: EMPTY
47106: LIST
47107: LIST
47108: PUSH
47109: LD_INT 2
47111: NEG
47112: PUSH
47113: LD_INT 1
47115: NEG
47116: PUSH
47117: EMPTY
47118: LIST
47119: LIST
47120: PUSH
47121: LD_INT 2
47123: NEG
47124: PUSH
47125: LD_INT 2
47127: NEG
47128: PUSH
47129: EMPTY
47130: LIST
47131: LIST
47132: PUSH
47133: LD_INT 2
47135: NEG
47136: PUSH
47137: LD_INT 3
47139: NEG
47140: PUSH
47141: EMPTY
47142: LIST
47143: LIST
47144: PUSH
47145: LD_INT 3
47147: NEG
47148: PUSH
47149: LD_INT 2
47151: NEG
47152: PUSH
47153: EMPTY
47154: LIST
47155: LIST
47156: PUSH
47157: LD_INT 3
47159: NEG
47160: PUSH
47161: LD_INT 3
47163: NEG
47164: PUSH
47165: EMPTY
47166: LIST
47167: LIST
47168: PUSH
47169: EMPTY
47170: LIST
47171: LIST
47172: LIST
47173: LIST
47174: LIST
47175: LIST
47176: LIST
47177: LIST
47178: LIST
47179: LIST
47180: LIST
47181: LIST
47182: LIST
47183: LIST
47184: LIST
47185: LIST
47186: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
47187: LD_ADDR_VAR 0 14
47191: PUSH
47192: LD_INT 0
47194: PUSH
47195: LD_INT 0
47197: PUSH
47198: EMPTY
47199: LIST
47200: LIST
47201: PUSH
47202: LD_INT 0
47204: PUSH
47205: LD_INT 1
47207: NEG
47208: PUSH
47209: EMPTY
47210: LIST
47211: LIST
47212: PUSH
47213: LD_INT 1
47215: PUSH
47216: LD_INT 0
47218: PUSH
47219: EMPTY
47220: LIST
47221: LIST
47222: PUSH
47223: LD_INT 1
47225: PUSH
47226: LD_INT 1
47228: PUSH
47229: EMPTY
47230: LIST
47231: LIST
47232: PUSH
47233: LD_INT 0
47235: PUSH
47236: LD_INT 1
47238: PUSH
47239: EMPTY
47240: LIST
47241: LIST
47242: PUSH
47243: LD_INT 1
47245: NEG
47246: PUSH
47247: LD_INT 0
47249: PUSH
47250: EMPTY
47251: LIST
47252: LIST
47253: PUSH
47254: LD_INT 1
47256: NEG
47257: PUSH
47258: LD_INT 1
47260: NEG
47261: PUSH
47262: EMPTY
47263: LIST
47264: LIST
47265: PUSH
47266: LD_INT 1
47268: NEG
47269: PUSH
47270: LD_INT 2
47272: NEG
47273: PUSH
47274: EMPTY
47275: LIST
47276: LIST
47277: PUSH
47278: LD_INT 0
47280: PUSH
47281: LD_INT 2
47283: NEG
47284: PUSH
47285: EMPTY
47286: LIST
47287: LIST
47288: PUSH
47289: LD_INT 1
47291: PUSH
47292: LD_INT 1
47294: NEG
47295: PUSH
47296: EMPTY
47297: LIST
47298: LIST
47299: PUSH
47300: LD_INT 1
47302: PUSH
47303: LD_INT 2
47305: PUSH
47306: EMPTY
47307: LIST
47308: LIST
47309: PUSH
47310: LD_INT 0
47312: PUSH
47313: LD_INT 2
47315: PUSH
47316: EMPTY
47317: LIST
47318: LIST
47319: PUSH
47320: LD_INT 1
47322: NEG
47323: PUSH
47324: LD_INT 1
47326: PUSH
47327: EMPTY
47328: LIST
47329: LIST
47330: PUSH
47331: LD_INT 1
47333: NEG
47334: PUSH
47335: LD_INT 3
47337: NEG
47338: PUSH
47339: EMPTY
47340: LIST
47341: LIST
47342: PUSH
47343: LD_INT 0
47345: PUSH
47346: LD_INT 3
47348: NEG
47349: PUSH
47350: EMPTY
47351: LIST
47352: LIST
47353: PUSH
47354: LD_INT 1
47356: PUSH
47357: LD_INT 2
47359: NEG
47360: PUSH
47361: EMPTY
47362: LIST
47363: LIST
47364: PUSH
47365: EMPTY
47366: LIST
47367: LIST
47368: LIST
47369: LIST
47370: LIST
47371: LIST
47372: LIST
47373: LIST
47374: LIST
47375: LIST
47376: LIST
47377: LIST
47378: LIST
47379: LIST
47380: LIST
47381: LIST
47382: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
47383: LD_ADDR_VAR 0 15
47387: PUSH
47388: LD_INT 0
47390: PUSH
47391: LD_INT 0
47393: PUSH
47394: EMPTY
47395: LIST
47396: LIST
47397: PUSH
47398: LD_INT 0
47400: PUSH
47401: LD_INT 1
47403: NEG
47404: PUSH
47405: EMPTY
47406: LIST
47407: LIST
47408: PUSH
47409: LD_INT 1
47411: PUSH
47412: LD_INT 0
47414: PUSH
47415: EMPTY
47416: LIST
47417: LIST
47418: PUSH
47419: LD_INT 1
47421: PUSH
47422: LD_INT 1
47424: PUSH
47425: EMPTY
47426: LIST
47427: LIST
47428: PUSH
47429: LD_INT 0
47431: PUSH
47432: LD_INT 1
47434: PUSH
47435: EMPTY
47436: LIST
47437: LIST
47438: PUSH
47439: LD_INT 1
47441: NEG
47442: PUSH
47443: LD_INT 0
47445: PUSH
47446: EMPTY
47447: LIST
47448: LIST
47449: PUSH
47450: LD_INT 1
47452: NEG
47453: PUSH
47454: LD_INT 1
47456: NEG
47457: PUSH
47458: EMPTY
47459: LIST
47460: LIST
47461: PUSH
47462: LD_INT 1
47464: PUSH
47465: LD_INT 1
47467: NEG
47468: PUSH
47469: EMPTY
47470: LIST
47471: LIST
47472: PUSH
47473: LD_INT 2
47475: PUSH
47476: LD_INT 0
47478: PUSH
47479: EMPTY
47480: LIST
47481: LIST
47482: PUSH
47483: LD_INT 2
47485: PUSH
47486: LD_INT 1
47488: PUSH
47489: EMPTY
47490: LIST
47491: LIST
47492: PUSH
47493: LD_INT 1
47495: NEG
47496: PUSH
47497: LD_INT 1
47499: PUSH
47500: EMPTY
47501: LIST
47502: LIST
47503: PUSH
47504: LD_INT 2
47506: NEG
47507: PUSH
47508: LD_INT 0
47510: PUSH
47511: EMPTY
47512: LIST
47513: LIST
47514: PUSH
47515: LD_INT 2
47517: NEG
47518: PUSH
47519: LD_INT 1
47521: NEG
47522: PUSH
47523: EMPTY
47524: LIST
47525: LIST
47526: PUSH
47527: LD_INT 2
47529: PUSH
47530: LD_INT 1
47532: NEG
47533: PUSH
47534: EMPTY
47535: LIST
47536: LIST
47537: PUSH
47538: LD_INT 3
47540: PUSH
47541: LD_INT 0
47543: PUSH
47544: EMPTY
47545: LIST
47546: LIST
47547: PUSH
47548: LD_INT 3
47550: PUSH
47551: LD_INT 1
47553: PUSH
47554: EMPTY
47555: LIST
47556: LIST
47557: PUSH
47558: EMPTY
47559: LIST
47560: LIST
47561: LIST
47562: LIST
47563: LIST
47564: LIST
47565: LIST
47566: LIST
47567: LIST
47568: LIST
47569: LIST
47570: LIST
47571: LIST
47572: LIST
47573: LIST
47574: LIST
47575: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
47576: LD_ADDR_VAR 0 16
47580: PUSH
47581: LD_INT 0
47583: PUSH
47584: LD_INT 0
47586: PUSH
47587: EMPTY
47588: LIST
47589: LIST
47590: PUSH
47591: LD_INT 0
47593: PUSH
47594: LD_INT 1
47596: NEG
47597: PUSH
47598: EMPTY
47599: LIST
47600: LIST
47601: PUSH
47602: LD_INT 1
47604: PUSH
47605: LD_INT 0
47607: PUSH
47608: EMPTY
47609: LIST
47610: LIST
47611: PUSH
47612: LD_INT 1
47614: PUSH
47615: LD_INT 1
47617: PUSH
47618: EMPTY
47619: LIST
47620: LIST
47621: PUSH
47622: LD_INT 0
47624: PUSH
47625: LD_INT 1
47627: PUSH
47628: EMPTY
47629: LIST
47630: LIST
47631: PUSH
47632: LD_INT 1
47634: NEG
47635: PUSH
47636: LD_INT 0
47638: PUSH
47639: EMPTY
47640: LIST
47641: LIST
47642: PUSH
47643: LD_INT 1
47645: NEG
47646: PUSH
47647: LD_INT 1
47649: NEG
47650: PUSH
47651: EMPTY
47652: LIST
47653: LIST
47654: PUSH
47655: LD_INT 1
47657: NEG
47658: PUSH
47659: LD_INT 2
47661: NEG
47662: PUSH
47663: EMPTY
47664: LIST
47665: LIST
47666: PUSH
47667: LD_INT 2
47669: PUSH
47670: LD_INT 1
47672: PUSH
47673: EMPTY
47674: LIST
47675: LIST
47676: PUSH
47677: LD_INT 2
47679: PUSH
47680: LD_INT 2
47682: PUSH
47683: EMPTY
47684: LIST
47685: LIST
47686: PUSH
47687: LD_INT 1
47689: PUSH
47690: LD_INT 2
47692: PUSH
47693: EMPTY
47694: LIST
47695: LIST
47696: PUSH
47697: LD_INT 2
47699: NEG
47700: PUSH
47701: LD_INT 1
47703: NEG
47704: PUSH
47705: EMPTY
47706: LIST
47707: LIST
47708: PUSH
47709: LD_INT 2
47711: NEG
47712: PUSH
47713: LD_INT 2
47715: NEG
47716: PUSH
47717: EMPTY
47718: LIST
47719: LIST
47720: PUSH
47721: LD_INT 3
47723: PUSH
47724: LD_INT 2
47726: PUSH
47727: EMPTY
47728: LIST
47729: LIST
47730: PUSH
47731: LD_INT 3
47733: PUSH
47734: LD_INT 3
47736: PUSH
47737: EMPTY
47738: LIST
47739: LIST
47740: PUSH
47741: LD_INT 2
47743: PUSH
47744: LD_INT 3
47746: PUSH
47747: EMPTY
47748: LIST
47749: LIST
47750: PUSH
47751: EMPTY
47752: LIST
47753: LIST
47754: LIST
47755: LIST
47756: LIST
47757: LIST
47758: LIST
47759: LIST
47760: LIST
47761: LIST
47762: LIST
47763: LIST
47764: LIST
47765: LIST
47766: LIST
47767: LIST
47768: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47769: LD_ADDR_VAR 0 17
47773: PUSH
47774: LD_INT 0
47776: PUSH
47777: LD_INT 0
47779: PUSH
47780: EMPTY
47781: LIST
47782: LIST
47783: PUSH
47784: LD_INT 0
47786: PUSH
47787: LD_INT 1
47789: NEG
47790: PUSH
47791: EMPTY
47792: LIST
47793: LIST
47794: PUSH
47795: LD_INT 1
47797: PUSH
47798: LD_INT 0
47800: PUSH
47801: EMPTY
47802: LIST
47803: LIST
47804: PUSH
47805: LD_INT 1
47807: PUSH
47808: LD_INT 1
47810: PUSH
47811: EMPTY
47812: LIST
47813: LIST
47814: PUSH
47815: LD_INT 0
47817: PUSH
47818: LD_INT 1
47820: PUSH
47821: EMPTY
47822: LIST
47823: LIST
47824: PUSH
47825: LD_INT 1
47827: NEG
47828: PUSH
47829: LD_INT 0
47831: PUSH
47832: EMPTY
47833: LIST
47834: LIST
47835: PUSH
47836: LD_INT 1
47838: NEG
47839: PUSH
47840: LD_INT 1
47842: NEG
47843: PUSH
47844: EMPTY
47845: LIST
47846: LIST
47847: PUSH
47848: LD_INT 1
47850: NEG
47851: PUSH
47852: LD_INT 2
47854: NEG
47855: PUSH
47856: EMPTY
47857: LIST
47858: LIST
47859: PUSH
47860: LD_INT 0
47862: PUSH
47863: LD_INT 2
47865: NEG
47866: PUSH
47867: EMPTY
47868: LIST
47869: LIST
47870: PUSH
47871: LD_INT 1
47873: PUSH
47874: LD_INT 1
47876: NEG
47877: PUSH
47878: EMPTY
47879: LIST
47880: LIST
47881: PUSH
47882: LD_INT 2
47884: PUSH
47885: LD_INT 0
47887: PUSH
47888: EMPTY
47889: LIST
47890: LIST
47891: PUSH
47892: LD_INT 2
47894: PUSH
47895: LD_INT 1
47897: PUSH
47898: EMPTY
47899: LIST
47900: LIST
47901: PUSH
47902: LD_INT 2
47904: PUSH
47905: LD_INT 2
47907: PUSH
47908: EMPTY
47909: LIST
47910: LIST
47911: PUSH
47912: LD_INT 1
47914: PUSH
47915: LD_INT 2
47917: PUSH
47918: EMPTY
47919: LIST
47920: LIST
47921: PUSH
47922: LD_INT 0
47924: PUSH
47925: LD_INT 2
47927: PUSH
47928: EMPTY
47929: LIST
47930: LIST
47931: PUSH
47932: LD_INT 1
47934: NEG
47935: PUSH
47936: LD_INT 1
47938: PUSH
47939: EMPTY
47940: LIST
47941: LIST
47942: PUSH
47943: LD_INT 2
47945: NEG
47946: PUSH
47947: LD_INT 0
47949: PUSH
47950: EMPTY
47951: LIST
47952: LIST
47953: PUSH
47954: LD_INT 2
47956: NEG
47957: PUSH
47958: LD_INT 1
47960: NEG
47961: PUSH
47962: EMPTY
47963: LIST
47964: LIST
47965: PUSH
47966: LD_INT 2
47968: NEG
47969: PUSH
47970: LD_INT 2
47972: NEG
47973: PUSH
47974: EMPTY
47975: LIST
47976: LIST
47977: PUSH
47978: EMPTY
47979: LIST
47980: LIST
47981: LIST
47982: LIST
47983: LIST
47984: LIST
47985: LIST
47986: LIST
47987: LIST
47988: LIST
47989: LIST
47990: LIST
47991: LIST
47992: LIST
47993: LIST
47994: LIST
47995: LIST
47996: LIST
47997: LIST
47998: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47999: LD_ADDR_VAR 0 18
48003: PUSH
48004: LD_INT 0
48006: PUSH
48007: LD_INT 0
48009: PUSH
48010: EMPTY
48011: LIST
48012: LIST
48013: PUSH
48014: LD_INT 0
48016: PUSH
48017: LD_INT 1
48019: NEG
48020: PUSH
48021: EMPTY
48022: LIST
48023: LIST
48024: PUSH
48025: LD_INT 1
48027: PUSH
48028: LD_INT 0
48030: PUSH
48031: EMPTY
48032: LIST
48033: LIST
48034: PUSH
48035: LD_INT 1
48037: PUSH
48038: LD_INT 1
48040: PUSH
48041: EMPTY
48042: LIST
48043: LIST
48044: PUSH
48045: LD_INT 0
48047: PUSH
48048: LD_INT 1
48050: PUSH
48051: EMPTY
48052: LIST
48053: LIST
48054: PUSH
48055: LD_INT 1
48057: NEG
48058: PUSH
48059: LD_INT 0
48061: PUSH
48062: EMPTY
48063: LIST
48064: LIST
48065: PUSH
48066: LD_INT 1
48068: NEG
48069: PUSH
48070: LD_INT 1
48072: NEG
48073: PUSH
48074: EMPTY
48075: LIST
48076: LIST
48077: PUSH
48078: LD_INT 1
48080: NEG
48081: PUSH
48082: LD_INT 2
48084: NEG
48085: PUSH
48086: EMPTY
48087: LIST
48088: LIST
48089: PUSH
48090: LD_INT 0
48092: PUSH
48093: LD_INT 2
48095: NEG
48096: PUSH
48097: EMPTY
48098: LIST
48099: LIST
48100: PUSH
48101: LD_INT 1
48103: PUSH
48104: LD_INT 1
48106: NEG
48107: PUSH
48108: EMPTY
48109: LIST
48110: LIST
48111: PUSH
48112: LD_INT 2
48114: PUSH
48115: LD_INT 0
48117: PUSH
48118: EMPTY
48119: LIST
48120: LIST
48121: PUSH
48122: LD_INT 2
48124: PUSH
48125: LD_INT 1
48127: PUSH
48128: EMPTY
48129: LIST
48130: LIST
48131: PUSH
48132: LD_INT 2
48134: PUSH
48135: LD_INT 2
48137: PUSH
48138: EMPTY
48139: LIST
48140: LIST
48141: PUSH
48142: LD_INT 1
48144: PUSH
48145: LD_INT 2
48147: PUSH
48148: EMPTY
48149: LIST
48150: LIST
48151: PUSH
48152: LD_INT 0
48154: PUSH
48155: LD_INT 2
48157: PUSH
48158: EMPTY
48159: LIST
48160: LIST
48161: PUSH
48162: LD_INT 1
48164: NEG
48165: PUSH
48166: LD_INT 1
48168: PUSH
48169: EMPTY
48170: LIST
48171: LIST
48172: PUSH
48173: LD_INT 2
48175: NEG
48176: PUSH
48177: LD_INT 0
48179: PUSH
48180: EMPTY
48181: LIST
48182: LIST
48183: PUSH
48184: LD_INT 2
48186: NEG
48187: PUSH
48188: LD_INT 1
48190: NEG
48191: PUSH
48192: EMPTY
48193: LIST
48194: LIST
48195: PUSH
48196: LD_INT 2
48198: NEG
48199: PUSH
48200: LD_INT 2
48202: NEG
48203: PUSH
48204: EMPTY
48205: LIST
48206: LIST
48207: PUSH
48208: EMPTY
48209: LIST
48210: LIST
48211: LIST
48212: LIST
48213: LIST
48214: LIST
48215: LIST
48216: LIST
48217: LIST
48218: LIST
48219: LIST
48220: LIST
48221: LIST
48222: LIST
48223: LIST
48224: LIST
48225: LIST
48226: LIST
48227: LIST
48228: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48229: LD_ADDR_VAR 0 19
48233: PUSH
48234: LD_INT 0
48236: PUSH
48237: LD_INT 0
48239: PUSH
48240: EMPTY
48241: LIST
48242: LIST
48243: PUSH
48244: LD_INT 0
48246: PUSH
48247: LD_INT 1
48249: NEG
48250: PUSH
48251: EMPTY
48252: LIST
48253: LIST
48254: PUSH
48255: LD_INT 1
48257: PUSH
48258: LD_INT 0
48260: PUSH
48261: EMPTY
48262: LIST
48263: LIST
48264: PUSH
48265: LD_INT 1
48267: PUSH
48268: LD_INT 1
48270: PUSH
48271: EMPTY
48272: LIST
48273: LIST
48274: PUSH
48275: LD_INT 0
48277: PUSH
48278: LD_INT 1
48280: PUSH
48281: EMPTY
48282: LIST
48283: LIST
48284: PUSH
48285: LD_INT 1
48287: NEG
48288: PUSH
48289: LD_INT 0
48291: PUSH
48292: EMPTY
48293: LIST
48294: LIST
48295: PUSH
48296: LD_INT 1
48298: NEG
48299: PUSH
48300: LD_INT 1
48302: NEG
48303: PUSH
48304: EMPTY
48305: LIST
48306: LIST
48307: PUSH
48308: LD_INT 1
48310: NEG
48311: PUSH
48312: LD_INT 2
48314: NEG
48315: PUSH
48316: EMPTY
48317: LIST
48318: LIST
48319: PUSH
48320: LD_INT 0
48322: PUSH
48323: LD_INT 2
48325: NEG
48326: PUSH
48327: EMPTY
48328: LIST
48329: LIST
48330: PUSH
48331: LD_INT 1
48333: PUSH
48334: LD_INT 1
48336: NEG
48337: PUSH
48338: EMPTY
48339: LIST
48340: LIST
48341: PUSH
48342: LD_INT 2
48344: PUSH
48345: LD_INT 0
48347: PUSH
48348: EMPTY
48349: LIST
48350: LIST
48351: PUSH
48352: LD_INT 2
48354: PUSH
48355: LD_INT 1
48357: PUSH
48358: EMPTY
48359: LIST
48360: LIST
48361: PUSH
48362: LD_INT 2
48364: PUSH
48365: LD_INT 2
48367: PUSH
48368: EMPTY
48369: LIST
48370: LIST
48371: PUSH
48372: LD_INT 1
48374: PUSH
48375: LD_INT 2
48377: PUSH
48378: EMPTY
48379: LIST
48380: LIST
48381: PUSH
48382: LD_INT 0
48384: PUSH
48385: LD_INT 2
48387: PUSH
48388: EMPTY
48389: LIST
48390: LIST
48391: PUSH
48392: LD_INT 1
48394: NEG
48395: PUSH
48396: LD_INT 1
48398: PUSH
48399: EMPTY
48400: LIST
48401: LIST
48402: PUSH
48403: LD_INT 2
48405: NEG
48406: PUSH
48407: LD_INT 0
48409: PUSH
48410: EMPTY
48411: LIST
48412: LIST
48413: PUSH
48414: LD_INT 2
48416: NEG
48417: PUSH
48418: LD_INT 1
48420: NEG
48421: PUSH
48422: EMPTY
48423: LIST
48424: LIST
48425: PUSH
48426: LD_INT 2
48428: NEG
48429: PUSH
48430: LD_INT 2
48432: NEG
48433: PUSH
48434: EMPTY
48435: LIST
48436: LIST
48437: PUSH
48438: EMPTY
48439: LIST
48440: LIST
48441: LIST
48442: LIST
48443: LIST
48444: LIST
48445: LIST
48446: LIST
48447: LIST
48448: LIST
48449: LIST
48450: LIST
48451: LIST
48452: LIST
48453: LIST
48454: LIST
48455: LIST
48456: LIST
48457: LIST
48458: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48459: LD_ADDR_VAR 0 20
48463: PUSH
48464: LD_INT 0
48466: PUSH
48467: LD_INT 0
48469: PUSH
48470: EMPTY
48471: LIST
48472: LIST
48473: PUSH
48474: LD_INT 0
48476: PUSH
48477: LD_INT 1
48479: NEG
48480: PUSH
48481: EMPTY
48482: LIST
48483: LIST
48484: PUSH
48485: LD_INT 1
48487: PUSH
48488: LD_INT 0
48490: PUSH
48491: EMPTY
48492: LIST
48493: LIST
48494: PUSH
48495: LD_INT 1
48497: PUSH
48498: LD_INT 1
48500: PUSH
48501: EMPTY
48502: LIST
48503: LIST
48504: PUSH
48505: LD_INT 0
48507: PUSH
48508: LD_INT 1
48510: PUSH
48511: EMPTY
48512: LIST
48513: LIST
48514: PUSH
48515: LD_INT 1
48517: NEG
48518: PUSH
48519: LD_INT 0
48521: PUSH
48522: EMPTY
48523: LIST
48524: LIST
48525: PUSH
48526: LD_INT 1
48528: NEG
48529: PUSH
48530: LD_INT 1
48532: NEG
48533: PUSH
48534: EMPTY
48535: LIST
48536: LIST
48537: PUSH
48538: LD_INT 1
48540: NEG
48541: PUSH
48542: LD_INT 2
48544: NEG
48545: PUSH
48546: EMPTY
48547: LIST
48548: LIST
48549: PUSH
48550: LD_INT 0
48552: PUSH
48553: LD_INT 2
48555: NEG
48556: PUSH
48557: EMPTY
48558: LIST
48559: LIST
48560: PUSH
48561: LD_INT 1
48563: PUSH
48564: LD_INT 1
48566: NEG
48567: PUSH
48568: EMPTY
48569: LIST
48570: LIST
48571: PUSH
48572: LD_INT 2
48574: PUSH
48575: LD_INT 0
48577: PUSH
48578: EMPTY
48579: LIST
48580: LIST
48581: PUSH
48582: LD_INT 2
48584: PUSH
48585: LD_INT 1
48587: PUSH
48588: EMPTY
48589: LIST
48590: LIST
48591: PUSH
48592: LD_INT 2
48594: PUSH
48595: LD_INT 2
48597: PUSH
48598: EMPTY
48599: LIST
48600: LIST
48601: PUSH
48602: LD_INT 1
48604: PUSH
48605: LD_INT 2
48607: PUSH
48608: EMPTY
48609: LIST
48610: LIST
48611: PUSH
48612: LD_INT 0
48614: PUSH
48615: LD_INT 2
48617: PUSH
48618: EMPTY
48619: LIST
48620: LIST
48621: PUSH
48622: LD_INT 1
48624: NEG
48625: PUSH
48626: LD_INT 1
48628: PUSH
48629: EMPTY
48630: LIST
48631: LIST
48632: PUSH
48633: LD_INT 2
48635: NEG
48636: PUSH
48637: LD_INT 0
48639: PUSH
48640: EMPTY
48641: LIST
48642: LIST
48643: PUSH
48644: LD_INT 2
48646: NEG
48647: PUSH
48648: LD_INT 1
48650: NEG
48651: PUSH
48652: EMPTY
48653: LIST
48654: LIST
48655: PUSH
48656: LD_INT 2
48658: NEG
48659: PUSH
48660: LD_INT 2
48662: NEG
48663: PUSH
48664: EMPTY
48665: LIST
48666: LIST
48667: PUSH
48668: EMPTY
48669: LIST
48670: LIST
48671: LIST
48672: LIST
48673: LIST
48674: LIST
48675: LIST
48676: LIST
48677: LIST
48678: LIST
48679: LIST
48680: LIST
48681: LIST
48682: LIST
48683: LIST
48684: LIST
48685: LIST
48686: LIST
48687: LIST
48688: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48689: LD_ADDR_VAR 0 21
48693: PUSH
48694: LD_INT 0
48696: PUSH
48697: LD_INT 0
48699: PUSH
48700: EMPTY
48701: LIST
48702: LIST
48703: PUSH
48704: LD_INT 0
48706: PUSH
48707: LD_INT 1
48709: NEG
48710: PUSH
48711: EMPTY
48712: LIST
48713: LIST
48714: PUSH
48715: LD_INT 1
48717: PUSH
48718: LD_INT 0
48720: PUSH
48721: EMPTY
48722: LIST
48723: LIST
48724: PUSH
48725: LD_INT 1
48727: PUSH
48728: LD_INT 1
48730: PUSH
48731: EMPTY
48732: LIST
48733: LIST
48734: PUSH
48735: LD_INT 0
48737: PUSH
48738: LD_INT 1
48740: PUSH
48741: EMPTY
48742: LIST
48743: LIST
48744: PUSH
48745: LD_INT 1
48747: NEG
48748: PUSH
48749: LD_INT 0
48751: PUSH
48752: EMPTY
48753: LIST
48754: LIST
48755: PUSH
48756: LD_INT 1
48758: NEG
48759: PUSH
48760: LD_INT 1
48762: NEG
48763: PUSH
48764: EMPTY
48765: LIST
48766: LIST
48767: PUSH
48768: LD_INT 1
48770: NEG
48771: PUSH
48772: LD_INT 2
48774: NEG
48775: PUSH
48776: EMPTY
48777: LIST
48778: LIST
48779: PUSH
48780: LD_INT 0
48782: PUSH
48783: LD_INT 2
48785: NEG
48786: PUSH
48787: EMPTY
48788: LIST
48789: LIST
48790: PUSH
48791: LD_INT 1
48793: PUSH
48794: LD_INT 1
48796: NEG
48797: PUSH
48798: EMPTY
48799: LIST
48800: LIST
48801: PUSH
48802: LD_INT 2
48804: PUSH
48805: LD_INT 0
48807: PUSH
48808: EMPTY
48809: LIST
48810: LIST
48811: PUSH
48812: LD_INT 2
48814: PUSH
48815: LD_INT 1
48817: PUSH
48818: EMPTY
48819: LIST
48820: LIST
48821: PUSH
48822: LD_INT 2
48824: PUSH
48825: LD_INT 2
48827: PUSH
48828: EMPTY
48829: LIST
48830: LIST
48831: PUSH
48832: LD_INT 1
48834: PUSH
48835: LD_INT 2
48837: PUSH
48838: EMPTY
48839: LIST
48840: LIST
48841: PUSH
48842: LD_INT 0
48844: PUSH
48845: LD_INT 2
48847: PUSH
48848: EMPTY
48849: LIST
48850: LIST
48851: PUSH
48852: LD_INT 1
48854: NEG
48855: PUSH
48856: LD_INT 1
48858: PUSH
48859: EMPTY
48860: LIST
48861: LIST
48862: PUSH
48863: LD_INT 2
48865: NEG
48866: PUSH
48867: LD_INT 0
48869: PUSH
48870: EMPTY
48871: LIST
48872: LIST
48873: PUSH
48874: LD_INT 2
48876: NEG
48877: PUSH
48878: LD_INT 1
48880: NEG
48881: PUSH
48882: EMPTY
48883: LIST
48884: LIST
48885: PUSH
48886: LD_INT 2
48888: NEG
48889: PUSH
48890: LD_INT 2
48892: NEG
48893: PUSH
48894: EMPTY
48895: LIST
48896: LIST
48897: PUSH
48898: EMPTY
48899: LIST
48900: LIST
48901: LIST
48902: LIST
48903: LIST
48904: LIST
48905: LIST
48906: LIST
48907: LIST
48908: LIST
48909: LIST
48910: LIST
48911: LIST
48912: LIST
48913: LIST
48914: LIST
48915: LIST
48916: LIST
48917: LIST
48918: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48919: LD_ADDR_VAR 0 22
48923: PUSH
48924: LD_INT 0
48926: PUSH
48927: LD_INT 0
48929: PUSH
48930: EMPTY
48931: LIST
48932: LIST
48933: PUSH
48934: LD_INT 0
48936: PUSH
48937: LD_INT 1
48939: NEG
48940: PUSH
48941: EMPTY
48942: LIST
48943: LIST
48944: PUSH
48945: LD_INT 1
48947: PUSH
48948: LD_INT 0
48950: PUSH
48951: EMPTY
48952: LIST
48953: LIST
48954: PUSH
48955: LD_INT 1
48957: PUSH
48958: LD_INT 1
48960: PUSH
48961: EMPTY
48962: LIST
48963: LIST
48964: PUSH
48965: LD_INT 0
48967: PUSH
48968: LD_INT 1
48970: PUSH
48971: EMPTY
48972: LIST
48973: LIST
48974: PUSH
48975: LD_INT 1
48977: NEG
48978: PUSH
48979: LD_INT 0
48981: PUSH
48982: EMPTY
48983: LIST
48984: LIST
48985: PUSH
48986: LD_INT 1
48988: NEG
48989: PUSH
48990: LD_INT 1
48992: NEG
48993: PUSH
48994: EMPTY
48995: LIST
48996: LIST
48997: PUSH
48998: LD_INT 1
49000: NEG
49001: PUSH
49002: LD_INT 2
49004: NEG
49005: PUSH
49006: EMPTY
49007: LIST
49008: LIST
49009: PUSH
49010: LD_INT 0
49012: PUSH
49013: LD_INT 2
49015: NEG
49016: PUSH
49017: EMPTY
49018: LIST
49019: LIST
49020: PUSH
49021: LD_INT 1
49023: PUSH
49024: LD_INT 1
49026: NEG
49027: PUSH
49028: EMPTY
49029: LIST
49030: LIST
49031: PUSH
49032: LD_INT 2
49034: PUSH
49035: LD_INT 0
49037: PUSH
49038: EMPTY
49039: LIST
49040: LIST
49041: PUSH
49042: LD_INT 2
49044: PUSH
49045: LD_INT 1
49047: PUSH
49048: EMPTY
49049: LIST
49050: LIST
49051: PUSH
49052: LD_INT 2
49054: PUSH
49055: LD_INT 2
49057: PUSH
49058: EMPTY
49059: LIST
49060: LIST
49061: PUSH
49062: LD_INT 1
49064: PUSH
49065: LD_INT 2
49067: PUSH
49068: EMPTY
49069: LIST
49070: LIST
49071: PUSH
49072: LD_INT 0
49074: PUSH
49075: LD_INT 2
49077: PUSH
49078: EMPTY
49079: LIST
49080: LIST
49081: PUSH
49082: LD_INT 1
49084: NEG
49085: PUSH
49086: LD_INT 1
49088: PUSH
49089: EMPTY
49090: LIST
49091: LIST
49092: PUSH
49093: LD_INT 2
49095: NEG
49096: PUSH
49097: LD_INT 0
49099: PUSH
49100: EMPTY
49101: LIST
49102: LIST
49103: PUSH
49104: LD_INT 2
49106: NEG
49107: PUSH
49108: LD_INT 1
49110: NEG
49111: PUSH
49112: EMPTY
49113: LIST
49114: LIST
49115: PUSH
49116: LD_INT 2
49118: NEG
49119: PUSH
49120: LD_INT 2
49122: NEG
49123: PUSH
49124: EMPTY
49125: LIST
49126: LIST
49127: PUSH
49128: EMPTY
49129: LIST
49130: LIST
49131: LIST
49132: LIST
49133: LIST
49134: LIST
49135: LIST
49136: LIST
49137: LIST
49138: LIST
49139: LIST
49140: LIST
49141: LIST
49142: LIST
49143: LIST
49144: LIST
49145: LIST
49146: LIST
49147: LIST
49148: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
49149: LD_ADDR_VAR 0 23
49153: PUSH
49154: LD_INT 0
49156: PUSH
49157: LD_INT 0
49159: PUSH
49160: EMPTY
49161: LIST
49162: LIST
49163: PUSH
49164: LD_INT 0
49166: PUSH
49167: LD_INT 1
49169: NEG
49170: PUSH
49171: EMPTY
49172: LIST
49173: LIST
49174: PUSH
49175: LD_INT 1
49177: PUSH
49178: LD_INT 0
49180: PUSH
49181: EMPTY
49182: LIST
49183: LIST
49184: PUSH
49185: LD_INT 1
49187: PUSH
49188: LD_INT 1
49190: PUSH
49191: EMPTY
49192: LIST
49193: LIST
49194: PUSH
49195: LD_INT 0
49197: PUSH
49198: LD_INT 1
49200: PUSH
49201: EMPTY
49202: LIST
49203: LIST
49204: PUSH
49205: LD_INT 1
49207: NEG
49208: PUSH
49209: LD_INT 0
49211: PUSH
49212: EMPTY
49213: LIST
49214: LIST
49215: PUSH
49216: LD_INT 1
49218: NEG
49219: PUSH
49220: LD_INT 1
49222: NEG
49223: PUSH
49224: EMPTY
49225: LIST
49226: LIST
49227: PUSH
49228: LD_INT 1
49230: NEG
49231: PUSH
49232: LD_INT 2
49234: NEG
49235: PUSH
49236: EMPTY
49237: LIST
49238: LIST
49239: PUSH
49240: LD_INT 0
49242: PUSH
49243: LD_INT 2
49245: NEG
49246: PUSH
49247: EMPTY
49248: LIST
49249: LIST
49250: PUSH
49251: LD_INT 1
49253: PUSH
49254: LD_INT 1
49256: NEG
49257: PUSH
49258: EMPTY
49259: LIST
49260: LIST
49261: PUSH
49262: LD_INT 2
49264: PUSH
49265: LD_INT 0
49267: PUSH
49268: EMPTY
49269: LIST
49270: LIST
49271: PUSH
49272: LD_INT 2
49274: PUSH
49275: LD_INT 1
49277: PUSH
49278: EMPTY
49279: LIST
49280: LIST
49281: PUSH
49282: LD_INT 2
49284: PUSH
49285: LD_INT 2
49287: PUSH
49288: EMPTY
49289: LIST
49290: LIST
49291: PUSH
49292: LD_INT 1
49294: PUSH
49295: LD_INT 2
49297: PUSH
49298: EMPTY
49299: LIST
49300: LIST
49301: PUSH
49302: LD_INT 0
49304: PUSH
49305: LD_INT 2
49307: PUSH
49308: EMPTY
49309: LIST
49310: LIST
49311: PUSH
49312: LD_INT 1
49314: NEG
49315: PUSH
49316: LD_INT 1
49318: PUSH
49319: EMPTY
49320: LIST
49321: LIST
49322: PUSH
49323: LD_INT 2
49325: NEG
49326: PUSH
49327: LD_INT 0
49329: PUSH
49330: EMPTY
49331: LIST
49332: LIST
49333: PUSH
49334: LD_INT 2
49336: NEG
49337: PUSH
49338: LD_INT 1
49340: NEG
49341: PUSH
49342: EMPTY
49343: LIST
49344: LIST
49345: PUSH
49346: LD_INT 2
49348: NEG
49349: PUSH
49350: LD_INT 2
49352: NEG
49353: PUSH
49354: EMPTY
49355: LIST
49356: LIST
49357: PUSH
49358: LD_INT 2
49360: NEG
49361: PUSH
49362: LD_INT 3
49364: NEG
49365: PUSH
49366: EMPTY
49367: LIST
49368: LIST
49369: PUSH
49370: LD_INT 1
49372: NEG
49373: PUSH
49374: LD_INT 3
49376: NEG
49377: PUSH
49378: EMPTY
49379: LIST
49380: LIST
49381: PUSH
49382: LD_INT 1
49384: PUSH
49385: LD_INT 2
49387: NEG
49388: PUSH
49389: EMPTY
49390: LIST
49391: LIST
49392: PUSH
49393: LD_INT 2
49395: PUSH
49396: LD_INT 1
49398: NEG
49399: PUSH
49400: EMPTY
49401: LIST
49402: LIST
49403: PUSH
49404: EMPTY
49405: LIST
49406: LIST
49407: LIST
49408: LIST
49409: LIST
49410: LIST
49411: LIST
49412: LIST
49413: LIST
49414: LIST
49415: LIST
49416: LIST
49417: LIST
49418: LIST
49419: LIST
49420: LIST
49421: LIST
49422: LIST
49423: LIST
49424: LIST
49425: LIST
49426: LIST
49427: LIST
49428: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
49429: LD_ADDR_VAR 0 24
49433: PUSH
49434: LD_INT 0
49436: PUSH
49437: LD_INT 0
49439: PUSH
49440: EMPTY
49441: LIST
49442: LIST
49443: PUSH
49444: LD_INT 0
49446: PUSH
49447: LD_INT 1
49449: NEG
49450: PUSH
49451: EMPTY
49452: LIST
49453: LIST
49454: PUSH
49455: LD_INT 1
49457: PUSH
49458: LD_INT 0
49460: PUSH
49461: EMPTY
49462: LIST
49463: LIST
49464: PUSH
49465: LD_INT 1
49467: PUSH
49468: LD_INT 1
49470: PUSH
49471: EMPTY
49472: LIST
49473: LIST
49474: PUSH
49475: LD_INT 0
49477: PUSH
49478: LD_INT 1
49480: PUSH
49481: EMPTY
49482: LIST
49483: LIST
49484: PUSH
49485: LD_INT 1
49487: NEG
49488: PUSH
49489: LD_INT 0
49491: PUSH
49492: EMPTY
49493: LIST
49494: LIST
49495: PUSH
49496: LD_INT 1
49498: NEG
49499: PUSH
49500: LD_INT 1
49502: NEG
49503: PUSH
49504: EMPTY
49505: LIST
49506: LIST
49507: PUSH
49508: LD_INT 1
49510: NEG
49511: PUSH
49512: LD_INT 2
49514: NEG
49515: PUSH
49516: EMPTY
49517: LIST
49518: LIST
49519: PUSH
49520: LD_INT 0
49522: PUSH
49523: LD_INT 2
49525: NEG
49526: PUSH
49527: EMPTY
49528: LIST
49529: LIST
49530: PUSH
49531: LD_INT 1
49533: PUSH
49534: LD_INT 1
49536: NEG
49537: PUSH
49538: EMPTY
49539: LIST
49540: LIST
49541: PUSH
49542: LD_INT 2
49544: PUSH
49545: LD_INT 0
49547: PUSH
49548: EMPTY
49549: LIST
49550: LIST
49551: PUSH
49552: LD_INT 2
49554: PUSH
49555: LD_INT 1
49557: PUSH
49558: EMPTY
49559: LIST
49560: LIST
49561: PUSH
49562: LD_INT 2
49564: PUSH
49565: LD_INT 2
49567: PUSH
49568: EMPTY
49569: LIST
49570: LIST
49571: PUSH
49572: LD_INT 1
49574: PUSH
49575: LD_INT 2
49577: PUSH
49578: EMPTY
49579: LIST
49580: LIST
49581: PUSH
49582: LD_INT 0
49584: PUSH
49585: LD_INT 2
49587: PUSH
49588: EMPTY
49589: LIST
49590: LIST
49591: PUSH
49592: LD_INT 1
49594: NEG
49595: PUSH
49596: LD_INT 1
49598: PUSH
49599: EMPTY
49600: LIST
49601: LIST
49602: PUSH
49603: LD_INT 2
49605: NEG
49606: PUSH
49607: LD_INT 0
49609: PUSH
49610: EMPTY
49611: LIST
49612: LIST
49613: PUSH
49614: LD_INT 2
49616: NEG
49617: PUSH
49618: LD_INT 1
49620: NEG
49621: PUSH
49622: EMPTY
49623: LIST
49624: LIST
49625: PUSH
49626: LD_INT 2
49628: NEG
49629: PUSH
49630: LD_INT 2
49632: NEG
49633: PUSH
49634: EMPTY
49635: LIST
49636: LIST
49637: PUSH
49638: LD_INT 1
49640: PUSH
49641: LD_INT 2
49643: NEG
49644: PUSH
49645: EMPTY
49646: LIST
49647: LIST
49648: PUSH
49649: LD_INT 2
49651: PUSH
49652: LD_INT 1
49654: NEG
49655: PUSH
49656: EMPTY
49657: LIST
49658: LIST
49659: PUSH
49660: LD_INT 3
49662: PUSH
49663: LD_INT 1
49665: PUSH
49666: EMPTY
49667: LIST
49668: LIST
49669: PUSH
49670: LD_INT 3
49672: PUSH
49673: LD_INT 2
49675: PUSH
49676: EMPTY
49677: LIST
49678: LIST
49679: PUSH
49680: EMPTY
49681: LIST
49682: LIST
49683: LIST
49684: LIST
49685: LIST
49686: LIST
49687: LIST
49688: LIST
49689: LIST
49690: LIST
49691: LIST
49692: LIST
49693: LIST
49694: LIST
49695: LIST
49696: LIST
49697: LIST
49698: LIST
49699: LIST
49700: LIST
49701: LIST
49702: LIST
49703: LIST
49704: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
49705: LD_ADDR_VAR 0 25
49709: PUSH
49710: LD_INT 0
49712: PUSH
49713: LD_INT 0
49715: PUSH
49716: EMPTY
49717: LIST
49718: LIST
49719: PUSH
49720: LD_INT 0
49722: PUSH
49723: LD_INT 1
49725: NEG
49726: PUSH
49727: EMPTY
49728: LIST
49729: LIST
49730: PUSH
49731: LD_INT 1
49733: PUSH
49734: LD_INT 0
49736: PUSH
49737: EMPTY
49738: LIST
49739: LIST
49740: PUSH
49741: LD_INT 1
49743: PUSH
49744: LD_INT 1
49746: PUSH
49747: EMPTY
49748: LIST
49749: LIST
49750: PUSH
49751: LD_INT 0
49753: PUSH
49754: LD_INT 1
49756: PUSH
49757: EMPTY
49758: LIST
49759: LIST
49760: PUSH
49761: LD_INT 1
49763: NEG
49764: PUSH
49765: LD_INT 0
49767: PUSH
49768: EMPTY
49769: LIST
49770: LIST
49771: PUSH
49772: LD_INT 1
49774: NEG
49775: PUSH
49776: LD_INT 1
49778: NEG
49779: PUSH
49780: EMPTY
49781: LIST
49782: LIST
49783: PUSH
49784: LD_INT 1
49786: NEG
49787: PUSH
49788: LD_INT 2
49790: NEG
49791: PUSH
49792: EMPTY
49793: LIST
49794: LIST
49795: PUSH
49796: LD_INT 0
49798: PUSH
49799: LD_INT 2
49801: NEG
49802: PUSH
49803: EMPTY
49804: LIST
49805: LIST
49806: PUSH
49807: LD_INT 1
49809: PUSH
49810: LD_INT 1
49812: NEG
49813: PUSH
49814: EMPTY
49815: LIST
49816: LIST
49817: PUSH
49818: LD_INT 2
49820: PUSH
49821: LD_INT 0
49823: PUSH
49824: EMPTY
49825: LIST
49826: LIST
49827: PUSH
49828: LD_INT 2
49830: PUSH
49831: LD_INT 1
49833: PUSH
49834: EMPTY
49835: LIST
49836: LIST
49837: PUSH
49838: LD_INT 2
49840: PUSH
49841: LD_INT 2
49843: PUSH
49844: EMPTY
49845: LIST
49846: LIST
49847: PUSH
49848: LD_INT 1
49850: PUSH
49851: LD_INT 2
49853: PUSH
49854: EMPTY
49855: LIST
49856: LIST
49857: PUSH
49858: LD_INT 0
49860: PUSH
49861: LD_INT 2
49863: PUSH
49864: EMPTY
49865: LIST
49866: LIST
49867: PUSH
49868: LD_INT 1
49870: NEG
49871: PUSH
49872: LD_INT 1
49874: PUSH
49875: EMPTY
49876: LIST
49877: LIST
49878: PUSH
49879: LD_INT 2
49881: NEG
49882: PUSH
49883: LD_INT 0
49885: PUSH
49886: EMPTY
49887: LIST
49888: LIST
49889: PUSH
49890: LD_INT 2
49892: NEG
49893: PUSH
49894: LD_INT 1
49896: NEG
49897: PUSH
49898: EMPTY
49899: LIST
49900: LIST
49901: PUSH
49902: LD_INT 2
49904: NEG
49905: PUSH
49906: LD_INT 2
49908: NEG
49909: PUSH
49910: EMPTY
49911: LIST
49912: LIST
49913: PUSH
49914: LD_INT 3
49916: PUSH
49917: LD_INT 1
49919: PUSH
49920: EMPTY
49921: LIST
49922: LIST
49923: PUSH
49924: LD_INT 3
49926: PUSH
49927: LD_INT 2
49929: PUSH
49930: EMPTY
49931: LIST
49932: LIST
49933: PUSH
49934: LD_INT 2
49936: PUSH
49937: LD_INT 3
49939: PUSH
49940: EMPTY
49941: LIST
49942: LIST
49943: PUSH
49944: LD_INT 1
49946: PUSH
49947: LD_INT 3
49949: PUSH
49950: EMPTY
49951: LIST
49952: LIST
49953: PUSH
49954: EMPTY
49955: LIST
49956: LIST
49957: LIST
49958: LIST
49959: LIST
49960: LIST
49961: LIST
49962: LIST
49963: LIST
49964: LIST
49965: LIST
49966: LIST
49967: LIST
49968: LIST
49969: LIST
49970: LIST
49971: LIST
49972: LIST
49973: LIST
49974: LIST
49975: LIST
49976: LIST
49977: LIST
49978: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
49979: LD_ADDR_VAR 0 26
49983: PUSH
49984: LD_INT 0
49986: PUSH
49987: LD_INT 0
49989: PUSH
49990: EMPTY
49991: LIST
49992: LIST
49993: PUSH
49994: LD_INT 0
49996: PUSH
49997: LD_INT 1
49999: NEG
50000: PUSH
50001: EMPTY
50002: LIST
50003: LIST
50004: PUSH
50005: LD_INT 1
50007: PUSH
50008: LD_INT 0
50010: PUSH
50011: EMPTY
50012: LIST
50013: LIST
50014: PUSH
50015: LD_INT 1
50017: PUSH
50018: LD_INT 1
50020: PUSH
50021: EMPTY
50022: LIST
50023: LIST
50024: PUSH
50025: LD_INT 0
50027: PUSH
50028: LD_INT 1
50030: PUSH
50031: EMPTY
50032: LIST
50033: LIST
50034: PUSH
50035: LD_INT 1
50037: NEG
50038: PUSH
50039: LD_INT 0
50041: PUSH
50042: EMPTY
50043: LIST
50044: LIST
50045: PUSH
50046: LD_INT 1
50048: NEG
50049: PUSH
50050: LD_INT 1
50052: NEG
50053: PUSH
50054: EMPTY
50055: LIST
50056: LIST
50057: PUSH
50058: LD_INT 1
50060: NEG
50061: PUSH
50062: LD_INT 2
50064: NEG
50065: PUSH
50066: EMPTY
50067: LIST
50068: LIST
50069: PUSH
50070: LD_INT 0
50072: PUSH
50073: LD_INT 2
50075: NEG
50076: PUSH
50077: EMPTY
50078: LIST
50079: LIST
50080: PUSH
50081: LD_INT 1
50083: PUSH
50084: LD_INT 1
50086: NEG
50087: PUSH
50088: EMPTY
50089: LIST
50090: LIST
50091: PUSH
50092: LD_INT 2
50094: PUSH
50095: LD_INT 0
50097: PUSH
50098: EMPTY
50099: LIST
50100: LIST
50101: PUSH
50102: LD_INT 2
50104: PUSH
50105: LD_INT 1
50107: PUSH
50108: EMPTY
50109: LIST
50110: LIST
50111: PUSH
50112: LD_INT 2
50114: PUSH
50115: LD_INT 2
50117: PUSH
50118: EMPTY
50119: LIST
50120: LIST
50121: PUSH
50122: LD_INT 1
50124: PUSH
50125: LD_INT 2
50127: PUSH
50128: EMPTY
50129: LIST
50130: LIST
50131: PUSH
50132: LD_INT 0
50134: PUSH
50135: LD_INT 2
50137: PUSH
50138: EMPTY
50139: LIST
50140: LIST
50141: PUSH
50142: LD_INT 1
50144: NEG
50145: PUSH
50146: LD_INT 1
50148: PUSH
50149: EMPTY
50150: LIST
50151: LIST
50152: PUSH
50153: LD_INT 2
50155: NEG
50156: PUSH
50157: LD_INT 0
50159: PUSH
50160: EMPTY
50161: LIST
50162: LIST
50163: PUSH
50164: LD_INT 2
50166: NEG
50167: PUSH
50168: LD_INT 1
50170: NEG
50171: PUSH
50172: EMPTY
50173: LIST
50174: LIST
50175: PUSH
50176: LD_INT 2
50178: NEG
50179: PUSH
50180: LD_INT 2
50182: NEG
50183: PUSH
50184: EMPTY
50185: LIST
50186: LIST
50187: PUSH
50188: LD_INT 2
50190: PUSH
50191: LD_INT 3
50193: PUSH
50194: EMPTY
50195: LIST
50196: LIST
50197: PUSH
50198: LD_INT 1
50200: PUSH
50201: LD_INT 3
50203: PUSH
50204: EMPTY
50205: LIST
50206: LIST
50207: PUSH
50208: LD_INT 1
50210: NEG
50211: PUSH
50212: LD_INT 2
50214: PUSH
50215: EMPTY
50216: LIST
50217: LIST
50218: PUSH
50219: LD_INT 2
50221: NEG
50222: PUSH
50223: LD_INT 1
50225: PUSH
50226: EMPTY
50227: LIST
50228: LIST
50229: PUSH
50230: EMPTY
50231: LIST
50232: LIST
50233: LIST
50234: LIST
50235: LIST
50236: LIST
50237: LIST
50238: LIST
50239: LIST
50240: LIST
50241: LIST
50242: LIST
50243: LIST
50244: LIST
50245: LIST
50246: LIST
50247: LIST
50248: LIST
50249: LIST
50250: LIST
50251: LIST
50252: LIST
50253: LIST
50254: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
50255: LD_ADDR_VAR 0 27
50259: PUSH
50260: LD_INT 0
50262: PUSH
50263: LD_INT 0
50265: PUSH
50266: EMPTY
50267: LIST
50268: LIST
50269: PUSH
50270: LD_INT 0
50272: PUSH
50273: LD_INT 1
50275: NEG
50276: PUSH
50277: EMPTY
50278: LIST
50279: LIST
50280: PUSH
50281: LD_INT 1
50283: PUSH
50284: LD_INT 0
50286: PUSH
50287: EMPTY
50288: LIST
50289: LIST
50290: PUSH
50291: LD_INT 1
50293: PUSH
50294: LD_INT 1
50296: PUSH
50297: EMPTY
50298: LIST
50299: LIST
50300: PUSH
50301: LD_INT 0
50303: PUSH
50304: LD_INT 1
50306: PUSH
50307: EMPTY
50308: LIST
50309: LIST
50310: PUSH
50311: LD_INT 1
50313: NEG
50314: PUSH
50315: LD_INT 0
50317: PUSH
50318: EMPTY
50319: LIST
50320: LIST
50321: PUSH
50322: LD_INT 1
50324: NEG
50325: PUSH
50326: LD_INT 1
50328: NEG
50329: PUSH
50330: EMPTY
50331: LIST
50332: LIST
50333: PUSH
50334: LD_INT 1
50336: NEG
50337: PUSH
50338: LD_INT 2
50340: NEG
50341: PUSH
50342: EMPTY
50343: LIST
50344: LIST
50345: PUSH
50346: LD_INT 0
50348: PUSH
50349: LD_INT 2
50351: NEG
50352: PUSH
50353: EMPTY
50354: LIST
50355: LIST
50356: PUSH
50357: LD_INT 1
50359: PUSH
50360: LD_INT 1
50362: NEG
50363: PUSH
50364: EMPTY
50365: LIST
50366: LIST
50367: PUSH
50368: LD_INT 2
50370: PUSH
50371: LD_INT 0
50373: PUSH
50374: EMPTY
50375: LIST
50376: LIST
50377: PUSH
50378: LD_INT 2
50380: PUSH
50381: LD_INT 1
50383: PUSH
50384: EMPTY
50385: LIST
50386: LIST
50387: PUSH
50388: LD_INT 2
50390: PUSH
50391: LD_INT 2
50393: PUSH
50394: EMPTY
50395: LIST
50396: LIST
50397: PUSH
50398: LD_INT 1
50400: PUSH
50401: LD_INT 2
50403: PUSH
50404: EMPTY
50405: LIST
50406: LIST
50407: PUSH
50408: LD_INT 0
50410: PUSH
50411: LD_INT 2
50413: PUSH
50414: EMPTY
50415: LIST
50416: LIST
50417: PUSH
50418: LD_INT 1
50420: NEG
50421: PUSH
50422: LD_INT 1
50424: PUSH
50425: EMPTY
50426: LIST
50427: LIST
50428: PUSH
50429: LD_INT 2
50431: NEG
50432: PUSH
50433: LD_INT 0
50435: PUSH
50436: EMPTY
50437: LIST
50438: LIST
50439: PUSH
50440: LD_INT 2
50442: NEG
50443: PUSH
50444: LD_INT 1
50446: NEG
50447: PUSH
50448: EMPTY
50449: LIST
50450: LIST
50451: PUSH
50452: LD_INT 2
50454: NEG
50455: PUSH
50456: LD_INT 2
50458: NEG
50459: PUSH
50460: EMPTY
50461: LIST
50462: LIST
50463: PUSH
50464: LD_INT 1
50466: NEG
50467: PUSH
50468: LD_INT 2
50470: PUSH
50471: EMPTY
50472: LIST
50473: LIST
50474: PUSH
50475: LD_INT 2
50477: NEG
50478: PUSH
50479: LD_INT 1
50481: PUSH
50482: EMPTY
50483: LIST
50484: LIST
50485: PUSH
50486: LD_INT 3
50488: NEG
50489: PUSH
50490: LD_INT 1
50492: NEG
50493: PUSH
50494: EMPTY
50495: LIST
50496: LIST
50497: PUSH
50498: LD_INT 3
50500: NEG
50501: PUSH
50502: LD_INT 2
50504: NEG
50505: PUSH
50506: EMPTY
50507: LIST
50508: LIST
50509: PUSH
50510: EMPTY
50511: LIST
50512: LIST
50513: LIST
50514: LIST
50515: LIST
50516: LIST
50517: LIST
50518: LIST
50519: LIST
50520: LIST
50521: LIST
50522: LIST
50523: LIST
50524: LIST
50525: LIST
50526: LIST
50527: LIST
50528: LIST
50529: LIST
50530: LIST
50531: LIST
50532: LIST
50533: LIST
50534: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
50535: LD_ADDR_VAR 0 28
50539: PUSH
50540: LD_INT 0
50542: PUSH
50543: LD_INT 0
50545: PUSH
50546: EMPTY
50547: LIST
50548: LIST
50549: PUSH
50550: LD_INT 0
50552: PUSH
50553: LD_INT 1
50555: NEG
50556: PUSH
50557: EMPTY
50558: LIST
50559: LIST
50560: PUSH
50561: LD_INT 1
50563: PUSH
50564: LD_INT 0
50566: PUSH
50567: EMPTY
50568: LIST
50569: LIST
50570: PUSH
50571: LD_INT 1
50573: PUSH
50574: LD_INT 1
50576: PUSH
50577: EMPTY
50578: LIST
50579: LIST
50580: PUSH
50581: LD_INT 0
50583: PUSH
50584: LD_INT 1
50586: PUSH
50587: EMPTY
50588: LIST
50589: LIST
50590: PUSH
50591: LD_INT 1
50593: NEG
50594: PUSH
50595: LD_INT 0
50597: PUSH
50598: EMPTY
50599: LIST
50600: LIST
50601: PUSH
50602: LD_INT 1
50604: NEG
50605: PUSH
50606: LD_INT 1
50608: NEG
50609: PUSH
50610: EMPTY
50611: LIST
50612: LIST
50613: PUSH
50614: LD_INT 1
50616: NEG
50617: PUSH
50618: LD_INT 2
50620: NEG
50621: PUSH
50622: EMPTY
50623: LIST
50624: LIST
50625: PUSH
50626: LD_INT 0
50628: PUSH
50629: LD_INT 2
50631: NEG
50632: PUSH
50633: EMPTY
50634: LIST
50635: LIST
50636: PUSH
50637: LD_INT 1
50639: PUSH
50640: LD_INT 1
50642: NEG
50643: PUSH
50644: EMPTY
50645: LIST
50646: LIST
50647: PUSH
50648: LD_INT 2
50650: PUSH
50651: LD_INT 0
50653: PUSH
50654: EMPTY
50655: LIST
50656: LIST
50657: PUSH
50658: LD_INT 2
50660: PUSH
50661: LD_INT 1
50663: PUSH
50664: EMPTY
50665: LIST
50666: LIST
50667: PUSH
50668: LD_INT 2
50670: PUSH
50671: LD_INT 2
50673: PUSH
50674: EMPTY
50675: LIST
50676: LIST
50677: PUSH
50678: LD_INT 1
50680: PUSH
50681: LD_INT 2
50683: PUSH
50684: EMPTY
50685: LIST
50686: LIST
50687: PUSH
50688: LD_INT 0
50690: PUSH
50691: LD_INT 2
50693: PUSH
50694: EMPTY
50695: LIST
50696: LIST
50697: PUSH
50698: LD_INT 1
50700: NEG
50701: PUSH
50702: LD_INT 1
50704: PUSH
50705: EMPTY
50706: LIST
50707: LIST
50708: PUSH
50709: LD_INT 2
50711: NEG
50712: PUSH
50713: LD_INT 0
50715: PUSH
50716: EMPTY
50717: LIST
50718: LIST
50719: PUSH
50720: LD_INT 2
50722: NEG
50723: PUSH
50724: LD_INT 1
50726: NEG
50727: PUSH
50728: EMPTY
50729: LIST
50730: LIST
50731: PUSH
50732: LD_INT 2
50734: NEG
50735: PUSH
50736: LD_INT 2
50738: NEG
50739: PUSH
50740: EMPTY
50741: LIST
50742: LIST
50743: PUSH
50744: LD_INT 2
50746: NEG
50747: PUSH
50748: LD_INT 3
50750: NEG
50751: PUSH
50752: EMPTY
50753: LIST
50754: LIST
50755: PUSH
50756: LD_INT 1
50758: NEG
50759: PUSH
50760: LD_INT 3
50762: NEG
50763: PUSH
50764: EMPTY
50765: LIST
50766: LIST
50767: PUSH
50768: LD_INT 3
50770: NEG
50771: PUSH
50772: LD_INT 1
50774: NEG
50775: PUSH
50776: EMPTY
50777: LIST
50778: LIST
50779: PUSH
50780: LD_INT 3
50782: NEG
50783: PUSH
50784: LD_INT 2
50786: NEG
50787: PUSH
50788: EMPTY
50789: LIST
50790: LIST
50791: PUSH
50792: EMPTY
50793: LIST
50794: LIST
50795: LIST
50796: LIST
50797: LIST
50798: LIST
50799: LIST
50800: LIST
50801: LIST
50802: LIST
50803: LIST
50804: LIST
50805: LIST
50806: LIST
50807: LIST
50808: LIST
50809: LIST
50810: LIST
50811: LIST
50812: LIST
50813: LIST
50814: LIST
50815: LIST
50816: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
50817: LD_ADDR_VAR 0 29
50821: PUSH
50822: LD_INT 0
50824: PUSH
50825: LD_INT 0
50827: PUSH
50828: EMPTY
50829: LIST
50830: LIST
50831: PUSH
50832: LD_INT 0
50834: PUSH
50835: LD_INT 1
50837: NEG
50838: PUSH
50839: EMPTY
50840: LIST
50841: LIST
50842: PUSH
50843: LD_INT 1
50845: PUSH
50846: LD_INT 0
50848: PUSH
50849: EMPTY
50850: LIST
50851: LIST
50852: PUSH
50853: LD_INT 1
50855: PUSH
50856: LD_INT 1
50858: PUSH
50859: EMPTY
50860: LIST
50861: LIST
50862: PUSH
50863: LD_INT 0
50865: PUSH
50866: LD_INT 1
50868: PUSH
50869: EMPTY
50870: LIST
50871: LIST
50872: PUSH
50873: LD_INT 1
50875: NEG
50876: PUSH
50877: LD_INT 0
50879: PUSH
50880: EMPTY
50881: LIST
50882: LIST
50883: PUSH
50884: LD_INT 1
50886: NEG
50887: PUSH
50888: LD_INT 1
50890: NEG
50891: PUSH
50892: EMPTY
50893: LIST
50894: LIST
50895: PUSH
50896: LD_INT 1
50898: NEG
50899: PUSH
50900: LD_INT 2
50902: NEG
50903: PUSH
50904: EMPTY
50905: LIST
50906: LIST
50907: PUSH
50908: LD_INT 0
50910: PUSH
50911: LD_INT 2
50913: NEG
50914: PUSH
50915: EMPTY
50916: LIST
50917: LIST
50918: PUSH
50919: LD_INT 1
50921: PUSH
50922: LD_INT 1
50924: NEG
50925: PUSH
50926: EMPTY
50927: LIST
50928: LIST
50929: PUSH
50930: LD_INT 2
50932: PUSH
50933: LD_INT 0
50935: PUSH
50936: EMPTY
50937: LIST
50938: LIST
50939: PUSH
50940: LD_INT 2
50942: PUSH
50943: LD_INT 1
50945: PUSH
50946: EMPTY
50947: LIST
50948: LIST
50949: PUSH
50950: LD_INT 1
50952: PUSH
50953: LD_INT 2
50955: PUSH
50956: EMPTY
50957: LIST
50958: LIST
50959: PUSH
50960: LD_INT 0
50962: PUSH
50963: LD_INT 2
50965: PUSH
50966: EMPTY
50967: LIST
50968: LIST
50969: PUSH
50970: LD_INT 1
50972: NEG
50973: PUSH
50974: LD_INT 1
50976: PUSH
50977: EMPTY
50978: LIST
50979: LIST
50980: PUSH
50981: LD_INT 2
50983: NEG
50984: PUSH
50985: LD_INT 1
50987: NEG
50988: PUSH
50989: EMPTY
50990: LIST
50991: LIST
50992: PUSH
50993: LD_INT 2
50995: NEG
50996: PUSH
50997: LD_INT 2
50999: NEG
51000: PUSH
51001: EMPTY
51002: LIST
51003: LIST
51004: PUSH
51005: LD_INT 2
51007: NEG
51008: PUSH
51009: LD_INT 3
51011: NEG
51012: PUSH
51013: EMPTY
51014: LIST
51015: LIST
51016: PUSH
51017: LD_INT 2
51019: PUSH
51020: LD_INT 1
51022: NEG
51023: PUSH
51024: EMPTY
51025: LIST
51026: LIST
51027: PUSH
51028: LD_INT 3
51030: PUSH
51031: LD_INT 1
51033: PUSH
51034: EMPTY
51035: LIST
51036: LIST
51037: PUSH
51038: LD_INT 1
51040: PUSH
51041: LD_INT 3
51043: PUSH
51044: EMPTY
51045: LIST
51046: LIST
51047: PUSH
51048: LD_INT 1
51050: NEG
51051: PUSH
51052: LD_INT 2
51054: PUSH
51055: EMPTY
51056: LIST
51057: LIST
51058: PUSH
51059: LD_INT 3
51061: NEG
51062: PUSH
51063: LD_INT 2
51065: NEG
51066: PUSH
51067: EMPTY
51068: LIST
51069: LIST
51070: PUSH
51071: EMPTY
51072: LIST
51073: LIST
51074: LIST
51075: LIST
51076: LIST
51077: LIST
51078: LIST
51079: LIST
51080: LIST
51081: LIST
51082: LIST
51083: LIST
51084: LIST
51085: LIST
51086: LIST
51087: LIST
51088: LIST
51089: LIST
51090: LIST
51091: LIST
51092: LIST
51093: LIST
51094: LIST
51095: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
51096: LD_ADDR_VAR 0 30
51100: PUSH
51101: LD_INT 0
51103: PUSH
51104: LD_INT 0
51106: PUSH
51107: EMPTY
51108: LIST
51109: LIST
51110: PUSH
51111: LD_INT 0
51113: PUSH
51114: LD_INT 1
51116: NEG
51117: PUSH
51118: EMPTY
51119: LIST
51120: LIST
51121: PUSH
51122: LD_INT 1
51124: PUSH
51125: LD_INT 0
51127: PUSH
51128: EMPTY
51129: LIST
51130: LIST
51131: PUSH
51132: LD_INT 1
51134: PUSH
51135: LD_INT 1
51137: PUSH
51138: EMPTY
51139: LIST
51140: LIST
51141: PUSH
51142: LD_INT 0
51144: PUSH
51145: LD_INT 1
51147: PUSH
51148: EMPTY
51149: LIST
51150: LIST
51151: PUSH
51152: LD_INT 1
51154: NEG
51155: PUSH
51156: LD_INT 0
51158: PUSH
51159: EMPTY
51160: LIST
51161: LIST
51162: PUSH
51163: LD_INT 1
51165: NEG
51166: PUSH
51167: LD_INT 1
51169: NEG
51170: PUSH
51171: EMPTY
51172: LIST
51173: LIST
51174: PUSH
51175: LD_INT 1
51177: NEG
51178: PUSH
51179: LD_INT 2
51181: NEG
51182: PUSH
51183: EMPTY
51184: LIST
51185: LIST
51186: PUSH
51187: LD_INT 0
51189: PUSH
51190: LD_INT 2
51192: NEG
51193: PUSH
51194: EMPTY
51195: LIST
51196: LIST
51197: PUSH
51198: LD_INT 1
51200: PUSH
51201: LD_INT 1
51203: NEG
51204: PUSH
51205: EMPTY
51206: LIST
51207: LIST
51208: PUSH
51209: LD_INT 2
51211: PUSH
51212: LD_INT 0
51214: PUSH
51215: EMPTY
51216: LIST
51217: LIST
51218: PUSH
51219: LD_INT 2
51221: PUSH
51222: LD_INT 1
51224: PUSH
51225: EMPTY
51226: LIST
51227: LIST
51228: PUSH
51229: LD_INT 2
51231: PUSH
51232: LD_INT 2
51234: PUSH
51235: EMPTY
51236: LIST
51237: LIST
51238: PUSH
51239: LD_INT 1
51241: PUSH
51242: LD_INT 2
51244: PUSH
51245: EMPTY
51246: LIST
51247: LIST
51248: PUSH
51249: LD_INT 1
51251: NEG
51252: PUSH
51253: LD_INT 1
51255: PUSH
51256: EMPTY
51257: LIST
51258: LIST
51259: PUSH
51260: LD_INT 2
51262: NEG
51263: PUSH
51264: LD_INT 0
51266: PUSH
51267: EMPTY
51268: LIST
51269: LIST
51270: PUSH
51271: LD_INT 2
51273: NEG
51274: PUSH
51275: LD_INT 1
51277: NEG
51278: PUSH
51279: EMPTY
51280: LIST
51281: LIST
51282: PUSH
51283: LD_INT 1
51285: NEG
51286: PUSH
51287: LD_INT 3
51289: NEG
51290: PUSH
51291: EMPTY
51292: LIST
51293: LIST
51294: PUSH
51295: LD_INT 1
51297: PUSH
51298: LD_INT 2
51300: NEG
51301: PUSH
51302: EMPTY
51303: LIST
51304: LIST
51305: PUSH
51306: LD_INT 3
51308: PUSH
51309: LD_INT 2
51311: PUSH
51312: EMPTY
51313: LIST
51314: LIST
51315: PUSH
51316: LD_INT 2
51318: PUSH
51319: LD_INT 3
51321: PUSH
51322: EMPTY
51323: LIST
51324: LIST
51325: PUSH
51326: LD_INT 2
51328: NEG
51329: PUSH
51330: LD_INT 1
51332: PUSH
51333: EMPTY
51334: LIST
51335: LIST
51336: PUSH
51337: LD_INT 3
51339: NEG
51340: PUSH
51341: LD_INT 1
51343: NEG
51344: PUSH
51345: EMPTY
51346: LIST
51347: LIST
51348: PUSH
51349: EMPTY
51350: LIST
51351: LIST
51352: LIST
51353: LIST
51354: LIST
51355: LIST
51356: LIST
51357: LIST
51358: LIST
51359: LIST
51360: LIST
51361: LIST
51362: LIST
51363: LIST
51364: LIST
51365: LIST
51366: LIST
51367: LIST
51368: LIST
51369: LIST
51370: LIST
51371: LIST
51372: LIST
51373: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
51374: LD_ADDR_VAR 0 31
51378: PUSH
51379: LD_INT 0
51381: PUSH
51382: LD_INT 0
51384: PUSH
51385: EMPTY
51386: LIST
51387: LIST
51388: PUSH
51389: LD_INT 0
51391: PUSH
51392: LD_INT 1
51394: NEG
51395: PUSH
51396: EMPTY
51397: LIST
51398: LIST
51399: PUSH
51400: LD_INT 1
51402: PUSH
51403: LD_INT 0
51405: PUSH
51406: EMPTY
51407: LIST
51408: LIST
51409: PUSH
51410: LD_INT 1
51412: PUSH
51413: LD_INT 1
51415: PUSH
51416: EMPTY
51417: LIST
51418: LIST
51419: PUSH
51420: LD_INT 0
51422: PUSH
51423: LD_INT 1
51425: PUSH
51426: EMPTY
51427: LIST
51428: LIST
51429: PUSH
51430: LD_INT 1
51432: NEG
51433: PUSH
51434: LD_INT 0
51436: PUSH
51437: EMPTY
51438: LIST
51439: LIST
51440: PUSH
51441: LD_INT 1
51443: NEG
51444: PUSH
51445: LD_INT 1
51447: NEG
51448: PUSH
51449: EMPTY
51450: LIST
51451: LIST
51452: PUSH
51453: LD_INT 1
51455: NEG
51456: PUSH
51457: LD_INT 2
51459: NEG
51460: PUSH
51461: EMPTY
51462: LIST
51463: LIST
51464: PUSH
51465: LD_INT 1
51467: PUSH
51468: LD_INT 1
51470: NEG
51471: PUSH
51472: EMPTY
51473: LIST
51474: LIST
51475: PUSH
51476: LD_INT 2
51478: PUSH
51479: LD_INT 0
51481: PUSH
51482: EMPTY
51483: LIST
51484: LIST
51485: PUSH
51486: LD_INT 2
51488: PUSH
51489: LD_INT 1
51491: PUSH
51492: EMPTY
51493: LIST
51494: LIST
51495: PUSH
51496: LD_INT 2
51498: PUSH
51499: LD_INT 2
51501: PUSH
51502: EMPTY
51503: LIST
51504: LIST
51505: PUSH
51506: LD_INT 1
51508: PUSH
51509: LD_INT 2
51511: PUSH
51512: EMPTY
51513: LIST
51514: LIST
51515: PUSH
51516: LD_INT 0
51518: PUSH
51519: LD_INT 2
51521: PUSH
51522: EMPTY
51523: LIST
51524: LIST
51525: PUSH
51526: LD_INT 1
51528: NEG
51529: PUSH
51530: LD_INT 1
51532: PUSH
51533: EMPTY
51534: LIST
51535: LIST
51536: PUSH
51537: LD_INT 2
51539: NEG
51540: PUSH
51541: LD_INT 1
51543: NEG
51544: PUSH
51545: EMPTY
51546: LIST
51547: LIST
51548: PUSH
51549: LD_INT 2
51551: NEG
51552: PUSH
51553: LD_INT 2
51555: NEG
51556: PUSH
51557: EMPTY
51558: LIST
51559: LIST
51560: PUSH
51561: LD_INT 2
51563: NEG
51564: PUSH
51565: LD_INT 3
51567: NEG
51568: PUSH
51569: EMPTY
51570: LIST
51571: LIST
51572: PUSH
51573: LD_INT 2
51575: PUSH
51576: LD_INT 1
51578: NEG
51579: PUSH
51580: EMPTY
51581: LIST
51582: LIST
51583: PUSH
51584: LD_INT 3
51586: PUSH
51587: LD_INT 1
51589: PUSH
51590: EMPTY
51591: LIST
51592: LIST
51593: PUSH
51594: LD_INT 1
51596: PUSH
51597: LD_INT 3
51599: PUSH
51600: EMPTY
51601: LIST
51602: LIST
51603: PUSH
51604: LD_INT 1
51606: NEG
51607: PUSH
51608: LD_INT 2
51610: PUSH
51611: EMPTY
51612: LIST
51613: LIST
51614: PUSH
51615: LD_INT 3
51617: NEG
51618: PUSH
51619: LD_INT 2
51621: NEG
51622: PUSH
51623: EMPTY
51624: LIST
51625: LIST
51626: PUSH
51627: EMPTY
51628: LIST
51629: LIST
51630: LIST
51631: LIST
51632: LIST
51633: LIST
51634: LIST
51635: LIST
51636: LIST
51637: LIST
51638: LIST
51639: LIST
51640: LIST
51641: LIST
51642: LIST
51643: LIST
51644: LIST
51645: LIST
51646: LIST
51647: LIST
51648: LIST
51649: LIST
51650: LIST
51651: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
51652: LD_ADDR_VAR 0 32
51656: PUSH
51657: LD_INT 0
51659: PUSH
51660: LD_INT 0
51662: PUSH
51663: EMPTY
51664: LIST
51665: LIST
51666: PUSH
51667: LD_INT 0
51669: PUSH
51670: LD_INT 1
51672: NEG
51673: PUSH
51674: EMPTY
51675: LIST
51676: LIST
51677: PUSH
51678: LD_INT 1
51680: PUSH
51681: LD_INT 0
51683: PUSH
51684: EMPTY
51685: LIST
51686: LIST
51687: PUSH
51688: LD_INT 1
51690: PUSH
51691: LD_INT 1
51693: PUSH
51694: EMPTY
51695: LIST
51696: LIST
51697: PUSH
51698: LD_INT 0
51700: PUSH
51701: LD_INT 1
51703: PUSH
51704: EMPTY
51705: LIST
51706: LIST
51707: PUSH
51708: LD_INT 1
51710: NEG
51711: PUSH
51712: LD_INT 0
51714: PUSH
51715: EMPTY
51716: LIST
51717: LIST
51718: PUSH
51719: LD_INT 1
51721: NEG
51722: PUSH
51723: LD_INT 1
51725: NEG
51726: PUSH
51727: EMPTY
51728: LIST
51729: LIST
51730: PUSH
51731: LD_INT 1
51733: NEG
51734: PUSH
51735: LD_INT 2
51737: NEG
51738: PUSH
51739: EMPTY
51740: LIST
51741: LIST
51742: PUSH
51743: LD_INT 0
51745: PUSH
51746: LD_INT 2
51748: NEG
51749: PUSH
51750: EMPTY
51751: LIST
51752: LIST
51753: PUSH
51754: LD_INT 1
51756: PUSH
51757: LD_INT 1
51759: NEG
51760: PUSH
51761: EMPTY
51762: LIST
51763: LIST
51764: PUSH
51765: LD_INT 2
51767: PUSH
51768: LD_INT 1
51770: PUSH
51771: EMPTY
51772: LIST
51773: LIST
51774: PUSH
51775: LD_INT 2
51777: PUSH
51778: LD_INT 2
51780: PUSH
51781: EMPTY
51782: LIST
51783: LIST
51784: PUSH
51785: LD_INT 1
51787: PUSH
51788: LD_INT 2
51790: PUSH
51791: EMPTY
51792: LIST
51793: LIST
51794: PUSH
51795: LD_INT 0
51797: PUSH
51798: LD_INT 2
51800: PUSH
51801: EMPTY
51802: LIST
51803: LIST
51804: PUSH
51805: LD_INT 1
51807: NEG
51808: PUSH
51809: LD_INT 1
51811: PUSH
51812: EMPTY
51813: LIST
51814: LIST
51815: PUSH
51816: LD_INT 2
51818: NEG
51819: PUSH
51820: LD_INT 0
51822: PUSH
51823: EMPTY
51824: LIST
51825: LIST
51826: PUSH
51827: LD_INT 2
51829: NEG
51830: PUSH
51831: LD_INT 1
51833: NEG
51834: PUSH
51835: EMPTY
51836: LIST
51837: LIST
51838: PUSH
51839: LD_INT 1
51841: NEG
51842: PUSH
51843: LD_INT 3
51845: NEG
51846: PUSH
51847: EMPTY
51848: LIST
51849: LIST
51850: PUSH
51851: LD_INT 1
51853: PUSH
51854: LD_INT 2
51856: NEG
51857: PUSH
51858: EMPTY
51859: LIST
51860: LIST
51861: PUSH
51862: LD_INT 3
51864: PUSH
51865: LD_INT 2
51867: PUSH
51868: EMPTY
51869: LIST
51870: LIST
51871: PUSH
51872: LD_INT 2
51874: PUSH
51875: LD_INT 3
51877: PUSH
51878: EMPTY
51879: LIST
51880: LIST
51881: PUSH
51882: LD_INT 2
51884: NEG
51885: PUSH
51886: LD_INT 1
51888: PUSH
51889: EMPTY
51890: LIST
51891: LIST
51892: PUSH
51893: LD_INT 3
51895: NEG
51896: PUSH
51897: LD_INT 1
51899: NEG
51900: PUSH
51901: EMPTY
51902: LIST
51903: LIST
51904: PUSH
51905: EMPTY
51906: LIST
51907: LIST
51908: LIST
51909: LIST
51910: LIST
51911: LIST
51912: LIST
51913: LIST
51914: LIST
51915: LIST
51916: LIST
51917: LIST
51918: LIST
51919: LIST
51920: LIST
51921: LIST
51922: LIST
51923: LIST
51924: LIST
51925: LIST
51926: LIST
51927: LIST
51928: LIST
51929: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
51930: LD_ADDR_VAR 0 33
51934: PUSH
51935: LD_INT 0
51937: PUSH
51938: LD_INT 0
51940: PUSH
51941: EMPTY
51942: LIST
51943: LIST
51944: PUSH
51945: LD_INT 0
51947: PUSH
51948: LD_INT 1
51950: NEG
51951: PUSH
51952: EMPTY
51953: LIST
51954: LIST
51955: PUSH
51956: LD_INT 1
51958: PUSH
51959: LD_INT 0
51961: PUSH
51962: EMPTY
51963: LIST
51964: LIST
51965: PUSH
51966: LD_INT 1
51968: PUSH
51969: LD_INT 1
51971: PUSH
51972: EMPTY
51973: LIST
51974: LIST
51975: PUSH
51976: LD_INT 0
51978: PUSH
51979: LD_INT 1
51981: PUSH
51982: EMPTY
51983: LIST
51984: LIST
51985: PUSH
51986: LD_INT 1
51988: NEG
51989: PUSH
51990: LD_INT 0
51992: PUSH
51993: EMPTY
51994: LIST
51995: LIST
51996: PUSH
51997: LD_INT 1
51999: NEG
52000: PUSH
52001: LD_INT 1
52003: NEG
52004: PUSH
52005: EMPTY
52006: LIST
52007: LIST
52008: PUSH
52009: LD_INT 1
52011: NEG
52012: PUSH
52013: LD_INT 2
52015: NEG
52016: PUSH
52017: EMPTY
52018: LIST
52019: LIST
52020: PUSH
52021: LD_INT 1
52023: PUSH
52024: LD_INT 1
52026: NEG
52027: PUSH
52028: EMPTY
52029: LIST
52030: LIST
52031: PUSH
52032: LD_INT 2
52034: PUSH
52035: LD_INT 0
52037: PUSH
52038: EMPTY
52039: LIST
52040: LIST
52041: PUSH
52042: LD_INT 2
52044: PUSH
52045: LD_INT 1
52047: PUSH
52048: EMPTY
52049: LIST
52050: LIST
52051: PUSH
52052: LD_INT 1
52054: PUSH
52055: LD_INT 2
52057: PUSH
52058: EMPTY
52059: LIST
52060: LIST
52061: PUSH
52062: LD_INT 0
52064: PUSH
52065: LD_INT 2
52067: PUSH
52068: EMPTY
52069: LIST
52070: LIST
52071: PUSH
52072: LD_INT 1
52074: NEG
52075: PUSH
52076: LD_INT 1
52078: PUSH
52079: EMPTY
52080: LIST
52081: LIST
52082: PUSH
52083: LD_INT 2
52085: NEG
52086: PUSH
52087: LD_INT 0
52089: PUSH
52090: EMPTY
52091: LIST
52092: LIST
52093: PUSH
52094: LD_INT 2
52096: NEG
52097: PUSH
52098: LD_INT 1
52100: NEG
52101: PUSH
52102: EMPTY
52103: LIST
52104: LIST
52105: PUSH
52106: LD_INT 2
52108: NEG
52109: PUSH
52110: LD_INT 2
52112: NEG
52113: PUSH
52114: EMPTY
52115: LIST
52116: LIST
52117: PUSH
52118: LD_INT 2
52120: NEG
52121: PUSH
52122: LD_INT 3
52124: NEG
52125: PUSH
52126: EMPTY
52127: LIST
52128: LIST
52129: PUSH
52130: LD_INT 2
52132: PUSH
52133: LD_INT 1
52135: NEG
52136: PUSH
52137: EMPTY
52138: LIST
52139: LIST
52140: PUSH
52141: LD_INT 3
52143: PUSH
52144: LD_INT 1
52146: PUSH
52147: EMPTY
52148: LIST
52149: LIST
52150: PUSH
52151: LD_INT 1
52153: PUSH
52154: LD_INT 3
52156: PUSH
52157: EMPTY
52158: LIST
52159: LIST
52160: PUSH
52161: LD_INT 1
52163: NEG
52164: PUSH
52165: LD_INT 2
52167: PUSH
52168: EMPTY
52169: LIST
52170: LIST
52171: PUSH
52172: LD_INT 3
52174: NEG
52175: PUSH
52176: LD_INT 2
52178: NEG
52179: PUSH
52180: EMPTY
52181: LIST
52182: LIST
52183: PUSH
52184: EMPTY
52185: LIST
52186: LIST
52187: LIST
52188: LIST
52189: LIST
52190: LIST
52191: LIST
52192: LIST
52193: LIST
52194: LIST
52195: LIST
52196: LIST
52197: LIST
52198: LIST
52199: LIST
52200: LIST
52201: LIST
52202: LIST
52203: LIST
52204: LIST
52205: LIST
52206: LIST
52207: LIST
52208: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
52209: LD_ADDR_VAR 0 34
52213: PUSH
52214: LD_INT 0
52216: PUSH
52217: LD_INT 0
52219: PUSH
52220: EMPTY
52221: LIST
52222: LIST
52223: PUSH
52224: LD_INT 0
52226: PUSH
52227: LD_INT 1
52229: NEG
52230: PUSH
52231: EMPTY
52232: LIST
52233: LIST
52234: PUSH
52235: LD_INT 1
52237: PUSH
52238: LD_INT 0
52240: PUSH
52241: EMPTY
52242: LIST
52243: LIST
52244: PUSH
52245: LD_INT 1
52247: PUSH
52248: LD_INT 1
52250: PUSH
52251: EMPTY
52252: LIST
52253: LIST
52254: PUSH
52255: LD_INT 0
52257: PUSH
52258: LD_INT 1
52260: PUSH
52261: EMPTY
52262: LIST
52263: LIST
52264: PUSH
52265: LD_INT 1
52267: NEG
52268: PUSH
52269: LD_INT 0
52271: PUSH
52272: EMPTY
52273: LIST
52274: LIST
52275: PUSH
52276: LD_INT 1
52278: NEG
52279: PUSH
52280: LD_INT 1
52282: NEG
52283: PUSH
52284: EMPTY
52285: LIST
52286: LIST
52287: PUSH
52288: LD_INT 1
52290: NEG
52291: PUSH
52292: LD_INT 2
52294: NEG
52295: PUSH
52296: EMPTY
52297: LIST
52298: LIST
52299: PUSH
52300: LD_INT 0
52302: PUSH
52303: LD_INT 2
52305: NEG
52306: PUSH
52307: EMPTY
52308: LIST
52309: LIST
52310: PUSH
52311: LD_INT 1
52313: PUSH
52314: LD_INT 1
52316: NEG
52317: PUSH
52318: EMPTY
52319: LIST
52320: LIST
52321: PUSH
52322: LD_INT 2
52324: PUSH
52325: LD_INT 1
52327: PUSH
52328: EMPTY
52329: LIST
52330: LIST
52331: PUSH
52332: LD_INT 2
52334: PUSH
52335: LD_INT 2
52337: PUSH
52338: EMPTY
52339: LIST
52340: LIST
52341: PUSH
52342: LD_INT 1
52344: PUSH
52345: LD_INT 2
52347: PUSH
52348: EMPTY
52349: LIST
52350: LIST
52351: PUSH
52352: LD_INT 1
52354: NEG
52355: PUSH
52356: LD_INT 1
52358: PUSH
52359: EMPTY
52360: LIST
52361: LIST
52362: PUSH
52363: LD_INT 2
52365: NEG
52366: PUSH
52367: LD_INT 0
52369: PUSH
52370: EMPTY
52371: LIST
52372: LIST
52373: PUSH
52374: LD_INT 2
52376: NEG
52377: PUSH
52378: LD_INT 1
52380: NEG
52381: PUSH
52382: EMPTY
52383: LIST
52384: LIST
52385: PUSH
52386: LD_INT 2
52388: NEG
52389: PUSH
52390: LD_INT 2
52392: NEG
52393: PUSH
52394: EMPTY
52395: LIST
52396: LIST
52397: PUSH
52398: LD_INT 1
52400: NEG
52401: PUSH
52402: LD_INT 3
52404: NEG
52405: PUSH
52406: EMPTY
52407: LIST
52408: LIST
52409: PUSH
52410: LD_INT 1
52412: PUSH
52413: LD_INT 2
52415: NEG
52416: PUSH
52417: EMPTY
52418: LIST
52419: LIST
52420: PUSH
52421: LD_INT 3
52423: PUSH
52424: LD_INT 2
52426: PUSH
52427: EMPTY
52428: LIST
52429: LIST
52430: PUSH
52431: LD_INT 2
52433: PUSH
52434: LD_INT 3
52436: PUSH
52437: EMPTY
52438: LIST
52439: LIST
52440: PUSH
52441: LD_INT 2
52443: NEG
52444: PUSH
52445: LD_INT 1
52447: PUSH
52448: EMPTY
52449: LIST
52450: LIST
52451: PUSH
52452: LD_INT 3
52454: NEG
52455: PUSH
52456: LD_INT 1
52458: NEG
52459: PUSH
52460: EMPTY
52461: LIST
52462: LIST
52463: PUSH
52464: EMPTY
52465: LIST
52466: LIST
52467: LIST
52468: LIST
52469: LIST
52470: LIST
52471: LIST
52472: LIST
52473: LIST
52474: LIST
52475: LIST
52476: LIST
52477: LIST
52478: LIST
52479: LIST
52480: LIST
52481: LIST
52482: LIST
52483: LIST
52484: LIST
52485: LIST
52486: LIST
52487: LIST
52488: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
52489: LD_ADDR_VAR 0 35
52493: PUSH
52494: LD_INT 0
52496: PUSH
52497: LD_INT 0
52499: PUSH
52500: EMPTY
52501: LIST
52502: LIST
52503: PUSH
52504: LD_INT 0
52506: PUSH
52507: LD_INT 1
52509: NEG
52510: PUSH
52511: EMPTY
52512: LIST
52513: LIST
52514: PUSH
52515: LD_INT 1
52517: PUSH
52518: LD_INT 0
52520: PUSH
52521: EMPTY
52522: LIST
52523: LIST
52524: PUSH
52525: LD_INT 1
52527: PUSH
52528: LD_INT 1
52530: PUSH
52531: EMPTY
52532: LIST
52533: LIST
52534: PUSH
52535: LD_INT 0
52537: PUSH
52538: LD_INT 1
52540: PUSH
52541: EMPTY
52542: LIST
52543: LIST
52544: PUSH
52545: LD_INT 1
52547: NEG
52548: PUSH
52549: LD_INT 0
52551: PUSH
52552: EMPTY
52553: LIST
52554: LIST
52555: PUSH
52556: LD_INT 1
52558: NEG
52559: PUSH
52560: LD_INT 1
52562: NEG
52563: PUSH
52564: EMPTY
52565: LIST
52566: LIST
52567: PUSH
52568: LD_INT 2
52570: PUSH
52571: LD_INT 1
52573: PUSH
52574: EMPTY
52575: LIST
52576: LIST
52577: PUSH
52578: LD_INT 2
52580: NEG
52581: PUSH
52582: LD_INT 1
52584: NEG
52585: PUSH
52586: EMPTY
52587: LIST
52588: LIST
52589: PUSH
52590: EMPTY
52591: LIST
52592: LIST
52593: LIST
52594: LIST
52595: LIST
52596: LIST
52597: LIST
52598: LIST
52599: LIST
52600: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
52601: LD_ADDR_VAR 0 36
52605: PUSH
52606: LD_INT 0
52608: PUSH
52609: LD_INT 0
52611: PUSH
52612: EMPTY
52613: LIST
52614: LIST
52615: PUSH
52616: LD_INT 0
52618: PUSH
52619: LD_INT 1
52621: NEG
52622: PUSH
52623: EMPTY
52624: LIST
52625: LIST
52626: PUSH
52627: LD_INT 1
52629: PUSH
52630: LD_INT 0
52632: PUSH
52633: EMPTY
52634: LIST
52635: LIST
52636: PUSH
52637: LD_INT 1
52639: PUSH
52640: LD_INT 1
52642: PUSH
52643: EMPTY
52644: LIST
52645: LIST
52646: PUSH
52647: LD_INT 0
52649: PUSH
52650: LD_INT 1
52652: PUSH
52653: EMPTY
52654: LIST
52655: LIST
52656: PUSH
52657: LD_INT 1
52659: NEG
52660: PUSH
52661: LD_INT 0
52663: PUSH
52664: EMPTY
52665: LIST
52666: LIST
52667: PUSH
52668: LD_INT 1
52670: NEG
52671: PUSH
52672: LD_INT 1
52674: NEG
52675: PUSH
52676: EMPTY
52677: LIST
52678: LIST
52679: PUSH
52680: LD_INT 1
52682: NEG
52683: PUSH
52684: LD_INT 2
52686: NEG
52687: PUSH
52688: EMPTY
52689: LIST
52690: LIST
52691: PUSH
52692: LD_INT 1
52694: PUSH
52695: LD_INT 2
52697: PUSH
52698: EMPTY
52699: LIST
52700: LIST
52701: PUSH
52702: EMPTY
52703: LIST
52704: LIST
52705: LIST
52706: LIST
52707: LIST
52708: LIST
52709: LIST
52710: LIST
52711: LIST
52712: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
52713: LD_ADDR_VAR 0 37
52717: PUSH
52718: LD_INT 0
52720: PUSH
52721: LD_INT 0
52723: PUSH
52724: EMPTY
52725: LIST
52726: LIST
52727: PUSH
52728: LD_INT 0
52730: PUSH
52731: LD_INT 1
52733: NEG
52734: PUSH
52735: EMPTY
52736: LIST
52737: LIST
52738: PUSH
52739: LD_INT 1
52741: PUSH
52742: LD_INT 0
52744: PUSH
52745: EMPTY
52746: LIST
52747: LIST
52748: PUSH
52749: LD_INT 1
52751: PUSH
52752: LD_INT 1
52754: PUSH
52755: EMPTY
52756: LIST
52757: LIST
52758: PUSH
52759: LD_INT 0
52761: PUSH
52762: LD_INT 1
52764: PUSH
52765: EMPTY
52766: LIST
52767: LIST
52768: PUSH
52769: LD_INT 1
52771: NEG
52772: PUSH
52773: LD_INT 0
52775: PUSH
52776: EMPTY
52777: LIST
52778: LIST
52779: PUSH
52780: LD_INT 1
52782: NEG
52783: PUSH
52784: LD_INT 1
52786: NEG
52787: PUSH
52788: EMPTY
52789: LIST
52790: LIST
52791: PUSH
52792: LD_INT 1
52794: PUSH
52795: LD_INT 1
52797: NEG
52798: PUSH
52799: EMPTY
52800: LIST
52801: LIST
52802: PUSH
52803: LD_INT 1
52805: NEG
52806: PUSH
52807: LD_INT 1
52809: PUSH
52810: EMPTY
52811: LIST
52812: LIST
52813: PUSH
52814: EMPTY
52815: LIST
52816: LIST
52817: LIST
52818: LIST
52819: LIST
52820: LIST
52821: LIST
52822: LIST
52823: LIST
52824: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
52825: LD_ADDR_VAR 0 38
52829: PUSH
52830: LD_INT 0
52832: PUSH
52833: LD_INT 0
52835: PUSH
52836: EMPTY
52837: LIST
52838: LIST
52839: PUSH
52840: LD_INT 0
52842: PUSH
52843: LD_INT 1
52845: NEG
52846: PUSH
52847: EMPTY
52848: LIST
52849: LIST
52850: PUSH
52851: LD_INT 1
52853: PUSH
52854: LD_INT 0
52856: PUSH
52857: EMPTY
52858: LIST
52859: LIST
52860: PUSH
52861: LD_INT 1
52863: PUSH
52864: LD_INT 1
52866: PUSH
52867: EMPTY
52868: LIST
52869: LIST
52870: PUSH
52871: LD_INT 0
52873: PUSH
52874: LD_INT 1
52876: PUSH
52877: EMPTY
52878: LIST
52879: LIST
52880: PUSH
52881: LD_INT 1
52883: NEG
52884: PUSH
52885: LD_INT 0
52887: PUSH
52888: EMPTY
52889: LIST
52890: LIST
52891: PUSH
52892: LD_INT 1
52894: NEG
52895: PUSH
52896: LD_INT 1
52898: NEG
52899: PUSH
52900: EMPTY
52901: LIST
52902: LIST
52903: PUSH
52904: LD_INT 2
52906: PUSH
52907: LD_INT 1
52909: PUSH
52910: EMPTY
52911: LIST
52912: LIST
52913: PUSH
52914: LD_INT 2
52916: NEG
52917: PUSH
52918: LD_INT 1
52920: NEG
52921: PUSH
52922: EMPTY
52923: LIST
52924: LIST
52925: PUSH
52926: EMPTY
52927: LIST
52928: LIST
52929: LIST
52930: LIST
52931: LIST
52932: LIST
52933: LIST
52934: LIST
52935: LIST
52936: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
52937: LD_ADDR_VAR 0 39
52941: PUSH
52942: LD_INT 0
52944: PUSH
52945: LD_INT 0
52947: PUSH
52948: EMPTY
52949: LIST
52950: LIST
52951: PUSH
52952: LD_INT 0
52954: PUSH
52955: LD_INT 1
52957: NEG
52958: PUSH
52959: EMPTY
52960: LIST
52961: LIST
52962: PUSH
52963: LD_INT 1
52965: PUSH
52966: LD_INT 0
52968: PUSH
52969: EMPTY
52970: LIST
52971: LIST
52972: PUSH
52973: LD_INT 1
52975: PUSH
52976: LD_INT 1
52978: PUSH
52979: EMPTY
52980: LIST
52981: LIST
52982: PUSH
52983: LD_INT 0
52985: PUSH
52986: LD_INT 1
52988: PUSH
52989: EMPTY
52990: LIST
52991: LIST
52992: PUSH
52993: LD_INT 1
52995: NEG
52996: PUSH
52997: LD_INT 0
52999: PUSH
53000: EMPTY
53001: LIST
53002: LIST
53003: PUSH
53004: LD_INT 1
53006: NEG
53007: PUSH
53008: LD_INT 1
53010: NEG
53011: PUSH
53012: EMPTY
53013: LIST
53014: LIST
53015: PUSH
53016: LD_INT 1
53018: NEG
53019: PUSH
53020: LD_INT 2
53022: NEG
53023: PUSH
53024: EMPTY
53025: LIST
53026: LIST
53027: PUSH
53028: LD_INT 1
53030: PUSH
53031: LD_INT 2
53033: PUSH
53034: EMPTY
53035: LIST
53036: LIST
53037: PUSH
53038: EMPTY
53039: LIST
53040: LIST
53041: LIST
53042: LIST
53043: LIST
53044: LIST
53045: LIST
53046: LIST
53047: LIST
53048: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
53049: LD_ADDR_VAR 0 40
53053: PUSH
53054: LD_INT 0
53056: PUSH
53057: LD_INT 0
53059: PUSH
53060: EMPTY
53061: LIST
53062: LIST
53063: PUSH
53064: LD_INT 0
53066: PUSH
53067: LD_INT 1
53069: NEG
53070: PUSH
53071: EMPTY
53072: LIST
53073: LIST
53074: PUSH
53075: LD_INT 1
53077: PUSH
53078: LD_INT 0
53080: PUSH
53081: EMPTY
53082: LIST
53083: LIST
53084: PUSH
53085: LD_INT 1
53087: PUSH
53088: LD_INT 1
53090: PUSH
53091: EMPTY
53092: LIST
53093: LIST
53094: PUSH
53095: LD_INT 0
53097: PUSH
53098: LD_INT 1
53100: PUSH
53101: EMPTY
53102: LIST
53103: LIST
53104: PUSH
53105: LD_INT 1
53107: NEG
53108: PUSH
53109: LD_INT 0
53111: PUSH
53112: EMPTY
53113: LIST
53114: LIST
53115: PUSH
53116: LD_INT 1
53118: NEG
53119: PUSH
53120: LD_INT 1
53122: NEG
53123: PUSH
53124: EMPTY
53125: LIST
53126: LIST
53127: PUSH
53128: LD_INT 1
53130: PUSH
53131: LD_INT 1
53133: NEG
53134: PUSH
53135: EMPTY
53136: LIST
53137: LIST
53138: PUSH
53139: LD_INT 1
53141: NEG
53142: PUSH
53143: LD_INT 1
53145: PUSH
53146: EMPTY
53147: LIST
53148: LIST
53149: PUSH
53150: EMPTY
53151: LIST
53152: LIST
53153: LIST
53154: LIST
53155: LIST
53156: LIST
53157: LIST
53158: LIST
53159: LIST
53160: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53161: LD_ADDR_VAR 0 41
53165: PUSH
53166: LD_INT 0
53168: PUSH
53169: LD_INT 0
53171: PUSH
53172: EMPTY
53173: LIST
53174: LIST
53175: PUSH
53176: LD_INT 0
53178: PUSH
53179: LD_INT 1
53181: NEG
53182: PUSH
53183: EMPTY
53184: LIST
53185: LIST
53186: PUSH
53187: LD_INT 1
53189: PUSH
53190: LD_INT 0
53192: PUSH
53193: EMPTY
53194: LIST
53195: LIST
53196: PUSH
53197: LD_INT 1
53199: PUSH
53200: LD_INT 1
53202: PUSH
53203: EMPTY
53204: LIST
53205: LIST
53206: PUSH
53207: LD_INT 0
53209: PUSH
53210: LD_INT 1
53212: PUSH
53213: EMPTY
53214: LIST
53215: LIST
53216: PUSH
53217: LD_INT 1
53219: NEG
53220: PUSH
53221: LD_INT 0
53223: PUSH
53224: EMPTY
53225: LIST
53226: LIST
53227: PUSH
53228: LD_INT 1
53230: NEG
53231: PUSH
53232: LD_INT 1
53234: NEG
53235: PUSH
53236: EMPTY
53237: LIST
53238: LIST
53239: PUSH
53240: LD_INT 1
53242: NEG
53243: PUSH
53244: LD_INT 2
53246: NEG
53247: PUSH
53248: EMPTY
53249: LIST
53250: LIST
53251: PUSH
53252: LD_INT 1
53254: PUSH
53255: LD_INT 1
53257: NEG
53258: PUSH
53259: EMPTY
53260: LIST
53261: LIST
53262: PUSH
53263: LD_INT 2
53265: PUSH
53266: LD_INT 0
53268: PUSH
53269: EMPTY
53270: LIST
53271: LIST
53272: PUSH
53273: LD_INT 2
53275: PUSH
53276: LD_INT 1
53278: PUSH
53279: EMPTY
53280: LIST
53281: LIST
53282: PUSH
53283: LD_INT 2
53285: PUSH
53286: LD_INT 2
53288: PUSH
53289: EMPTY
53290: LIST
53291: LIST
53292: PUSH
53293: LD_INT 1
53295: PUSH
53296: LD_INT 2
53298: PUSH
53299: EMPTY
53300: LIST
53301: LIST
53302: PUSH
53303: LD_INT 1
53305: NEG
53306: PUSH
53307: LD_INT 1
53309: PUSH
53310: EMPTY
53311: LIST
53312: LIST
53313: PUSH
53314: LD_INT 2
53316: NEG
53317: PUSH
53318: LD_INT 0
53320: PUSH
53321: EMPTY
53322: LIST
53323: LIST
53324: PUSH
53325: LD_INT 2
53327: NEG
53328: PUSH
53329: LD_INT 1
53331: NEG
53332: PUSH
53333: EMPTY
53334: LIST
53335: LIST
53336: PUSH
53337: LD_INT 2
53339: NEG
53340: PUSH
53341: LD_INT 2
53343: NEG
53344: PUSH
53345: EMPTY
53346: LIST
53347: LIST
53348: PUSH
53349: LD_INT 2
53351: NEG
53352: PUSH
53353: LD_INT 3
53355: NEG
53356: PUSH
53357: EMPTY
53358: LIST
53359: LIST
53360: PUSH
53361: LD_INT 2
53363: PUSH
53364: LD_INT 1
53366: NEG
53367: PUSH
53368: EMPTY
53369: LIST
53370: LIST
53371: PUSH
53372: LD_INT 3
53374: PUSH
53375: LD_INT 0
53377: PUSH
53378: EMPTY
53379: LIST
53380: LIST
53381: PUSH
53382: LD_INT 3
53384: PUSH
53385: LD_INT 1
53387: PUSH
53388: EMPTY
53389: LIST
53390: LIST
53391: PUSH
53392: LD_INT 3
53394: PUSH
53395: LD_INT 2
53397: PUSH
53398: EMPTY
53399: LIST
53400: LIST
53401: PUSH
53402: LD_INT 3
53404: PUSH
53405: LD_INT 3
53407: PUSH
53408: EMPTY
53409: LIST
53410: LIST
53411: PUSH
53412: LD_INT 2
53414: PUSH
53415: LD_INT 3
53417: PUSH
53418: EMPTY
53419: LIST
53420: LIST
53421: PUSH
53422: LD_INT 2
53424: NEG
53425: PUSH
53426: LD_INT 1
53428: PUSH
53429: EMPTY
53430: LIST
53431: LIST
53432: PUSH
53433: LD_INT 3
53435: NEG
53436: PUSH
53437: LD_INT 0
53439: PUSH
53440: EMPTY
53441: LIST
53442: LIST
53443: PUSH
53444: LD_INT 3
53446: NEG
53447: PUSH
53448: LD_INT 1
53450: NEG
53451: PUSH
53452: EMPTY
53453: LIST
53454: LIST
53455: PUSH
53456: LD_INT 3
53458: NEG
53459: PUSH
53460: LD_INT 2
53462: NEG
53463: PUSH
53464: EMPTY
53465: LIST
53466: LIST
53467: PUSH
53468: LD_INT 3
53470: NEG
53471: PUSH
53472: LD_INT 3
53474: NEG
53475: PUSH
53476: EMPTY
53477: LIST
53478: LIST
53479: PUSH
53480: EMPTY
53481: LIST
53482: LIST
53483: LIST
53484: LIST
53485: LIST
53486: LIST
53487: LIST
53488: LIST
53489: LIST
53490: LIST
53491: LIST
53492: LIST
53493: LIST
53494: LIST
53495: LIST
53496: LIST
53497: LIST
53498: LIST
53499: LIST
53500: LIST
53501: LIST
53502: LIST
53503: LIST
53504: LIST
53505: LIST
53506: LIST
53507: LIST
53508: LIST
53509: LIST
53510: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53511: LD_ADDR_VAR 0 42
53515: PUSH
53516: LD_INT 0
53518: PUSH
53519: LD_INT 0
53521: PUSH
53522: EMPTY
53523: LIST
53524: LIST
53525: PUSH
53526: LD_INT 0
53528: PUSH
53529: LD_INT 1
53531: NEG
53532: PUSH
53533: EMPTY
53534: LIST
53535: LIST
53536: PUSH
53537: LD_INT 1
53539: PUSH
53540: LD_INT 0
53542: PUSH
53543: EMPTY
53544: LIST
53545: LIST
53546: PUSH
53547: LD_INT 1
53549: PUSH
53550: LD_INT 1
53552: PUSH
53553: EMPTY
53554: LIST
53555: LIST
53556: PUSH
53557: LD_INT 0
53559: PUSH
53560: LD_INT 1
53562: PUSH
53563: EMPTY
53564: LIST
53565: LIST
53566: PUSH
53567: LD_INT 1
53569: NEG
53570: PUSH
53571: LD_INT 0
53573: PUSH
53574: EMPTY
53575: LIST
53576: LIST
53577: PUSH
53578: LD_INT 1
53580: NEG
53581: PUSH
53582: LD_INT 1
53584: NEG
53585: PUSH
53586: EMPTY
53587: LIST
53588: LIST
53589: PUSH
53590: LD_INT 1
53592: NEG
53593: PUSH
53594: LD_INT 2
53596: NEG
53597: PUSH
53598: EMPTY
53599: LIST
53600: LIST
53601: PUSH
53602: LD_INT 0
53604: PUSH
53605: LD_INT 2
53607: NEG
53608: PUSH
53609: EMPTY
53610: LIST
53611: LIST
53612: PUSH
53613: LD_INT 1
53615: PUSH
53616: LD_INT 1
53618: NEG
53619: PUSH
53620: EMPTY
53621: LIST
53622: LIST
53623: PUSH
53624: LD_INT 2
53626: PUSH
53627: LD_INT 1
53629: PUSH
53630: EMPTY
53631: LIST
53632: LIST
53633: PUSH
53634: LD_INT 2
53636: PUSH
53637: LD_INT 2
53639: PUSH
53640: EMPTY
53641: LIST
53642: LIST
53643: PUSH
53644: LD_INT 1
53646: PUSH
53647: LD_INT 2
53649: PUSH
53650: EMPTY
53651: LIST
53652: LIST
53653: PUSH
53654: LD_INT 0
53656: PUSH
53657: LD_INT 2
53659: PUSH
53660: EMPTY
53661: LIST
53662: LIST
53663: PUSH
53664: LD_INT 1
53666: NEG
53667: PUSH
53668: LD_INT 1
53670: PUSH
53671: EMPTY
53672: LIST
53673: LIST
53674: PUSH
53675: LD_INT 2
53677: NEG
53678: PUSH
53679: LD_INT 1
53681: NEG
53682: PUSH
53683: EMPTY
53684: LIST
53685: LIST
53686: PUSH
53687: LD_INT 2
53689: NEG
53690: PUSH
53691: LD_INT 2
53693: NEG
53694: PUSH
53695: EMPTY
53696: LIST
53697: LIST
53698: PUSH
53699: LD_INT 2
53701: NEG
53702: PUSH
53703: LD_INT 3
53705: NEG
53706: PUSH
53707: EMPTY
53708: LIST
53709: LIST
53710: PUSH
53711: LD_INT 1
53713: NEG
53714: PUSH
53715: LD_INT 3
53717: NEG
53718: PUSH
53719: EMPTY
53720: LIST
53721: LIST
53722: PUSH
53723: LD_INT 0
53725: PUSH
53726: LD_INT 3
53728: NEG
53729: PUSH
53730: EMPTY
53731: LIST
53732: LIST
53733: PUSH
53734: LD_INT 1
53736: PUSH
53737: LD_INT 2
53739: NEG
53740: PUSH
53741: EMPTY
53742: LIST
53743: LIST
53744: PUSH
53745: LD_INT 3
53747: PUSH
53748: LD_INT 2
53750: PUSH
53751: EMPTY
53752: LIST
53753: LIST
53754: PUSH
53755: LD_INT 3
53757: PUSH
53758: LD_INT 3
53760: PUSH
53761: EMPTY
53762: LIST
53763: LIST
53764: PUSH
53765: LD_INT 2
53767: PUSH
53768: LD_INT 3
53770: PUSH
53771: EMPTY
53772: LIST
53773: LIST
53774: PUSH
53775: LD_INT 1
53777: PUSH
53778: LD_INT 3
53780: PUSH
53781: EMPTY
53782: LIST
53783: LIST
53784: PUSH
53785: LD_INT 0
53787: PUSH
53788: LD_INT 3
53790: PUSH
53791: EMPTY
53792: LIST
53793: LIST
53794: PUSH
53795: LD_INT 1
53797: NEG
53798: PUSH
53799: LD_INT 2
53801: PUSH
53802: EMPTY
53803: LIST
53804: LIST
53805: PUSH
53806: LD_INT 3
53808: NEG
53809: PUSH
53810: LD_INT 2
53812: NEG
53813: PUSH
53814: EMPTY
53815: LIST
53816: LIST
53817: PUSH
53818: LD_INT 3
53820: NEG
53821: PUSH
53822: LD_INT 3
53824: NEG
53825: PUSH
53826: EMPTY
53827: LIST
53828: LIST
53829: PUSH
53830: EMPTY
53831: LIST
53832: LIST
53833: LIST
53834: LIST
53835: LIST
53836: LIST
53837: LIST
53838: LIST
53839: LIST
53840: LIST
53841: LIST
53842: LIST
53843: LIST
53844: LIST
53845: LIST
53846: LIST
53847: LIST
53848: LIST
53849: LIST
53850: LIST
53851: LIST
53852: LIST
53853: LIST
53854: LIST
53855: LIST
53856: LIST
53857: LIST
53858: LIST
53859: LIST
53860: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53861: LD_ADDR_VAR 0 43
53865: PUSH
53866: LD_INT 0
53868: PUSH
53869: LD_INT 0
53871: PUSH
53872: EMPTY
53873: LIST
53874: LIST
53875: PUSH
53876: LD_INT 0
53878: PUSH
53879: LD_INT 1
53881: NEG
53882: PUSH
53883: EMPTY
53884: LIST
53885: LIST
53886: PUSH
53887: LD_INT 1
53889: PUSH
53890: LD_INT 0
53892: PUSH
53893: EMPTY
53894: LIST
53895: LIST
53896: PUSH
53897: LD_INT 1
53899: PUSH
53900: LD_INT 1
53902: PUSH
53903: EMPTY
53904: LIST
53905: LIST
53906: PUSH
53907: LD_INT 0
53909: PUSH
53910: LD_INT 1
53912: PUSH
53913: EMPTY
53914: LIST
53915: LIST
53916: PUSH
53917: LD_INT 1
53919: NEG
53920: PUSH
53921: LD_INT 0
53923: PUSH
53924: EMPTY
53925: LIST
53926: LIST
53927: PUSH
53928: LD_INT 1
53930: NEG
53931: PUSH
53932: LD_INT 1
53934: NEG
53935: PUSH
53936: EMPTY
53937: LIST
53938: LIST
53939: PUSH
53940: LD_INT 1
53942: NEG
53943: PUSH
53944: LD_INT 2
53946: NEG
53947: PUSH
53948: EMPTY
53949: LIST
53950: LIST
53951: PUSH
53952: LD_INT 0
53954: PUSH
53955: LD_INT 2
53957: NEG
53958: PUSH
53959: EMPTY
53960: LIST
53961: LIST
53962: PUSH
53963: LD_INT 1
53965: PUSH
53966: LD_INT 1
53968: NEG
53969: PUSH
53970: EMPTY
53971: LIST
53972: LIST
53973: PUSH
53974: LD_INT 2
53976: PUSH
53977: LD_INT 0
53979: PUSH
53980: EMPTY
53981: LIST
53982: LIST
53983: PUSH
53984: LD_INT 2
53986: PUSH
53987: LD_INT 1
53989: PUSH
53990: EMPTY
53991: LIST
53992: LIST
53993: PUSH
53994: LD_INT 1
53996: PUSH
53997: LD_INT 2
53999: PUSH
54000: EMPTY
54001: LIST
54002: LIST
54003: PUSH
54004: LD_INT 0
54006: PUSH
54007: LD_INT 2
54009: PUSH
54010: EMPTY
54011: LIST
54012: LIST
54013: PUSH
54014: LD_INT 1
54016: NEG
54017: PUSH
54018: LD_INT 1
54020: PUSH
54021: EMPTY
54022: LIST
54023: LIST
54024: PUSH
54025: LD_INT 2
54027: NEG
54028: PUSH
54029: LD_INT 0
54031: PUSH
54032: EMPTY
54033: LIST
54034: LIST
54035: PUSH
54036: LD_INT 2
54038: NEG
54039: PUSH
54040: LD_INT 1
54042: NEG
54043: PUSH
54044: EMPTY
54045: LIST
54046: LIST
54047: PUSH
54048: LD_INT 1
54050: NEG
54051: PUSH
54052: LD_INT 3
54054: NEG
54055: PUSH
54056: EMPTY
54057: LIST
54058: LIST
54059: PUSH
54060: LD_INT 0
54062: PUSH
54063: LD_INT 3
54065: NEG
54066: PUSH
54067: EMPTY
54068: LIST
54069: LIST
54070: PUSH
54071: LD_INT 1
54073: PUSH
54074: LD_INT 2
54076: NEG
54077: PUSH
54078: EMPTY
54079: LIST
54080: LIST
54081: PUSH
54082: LD_INT 2
54084: PUSH
54085: LD_INT 1
54087: NEG
54088: PUSH
54089: EMPTY
54090: LIST
54091: LIST
54092: PUSH
54093: LD_INT 3
54095: PUSH
54096: LD_INT 0
54098: PUSH
54099: EMPTY
54100: LIST
54101: LIST
54102: PUSH
54103: LD_INT 3
54105: PUSH
54106: LD_INT 1
54108: PUSH
54109: EMPTY
54110: LIST
54111: LIST
54112: PUSH
54113: LD_INT 1
54115: PUSH
54116: LD_INT 3
54118: PUSH
54119: EMPTY
54120: LIST
54121: LIST
54122: PUSH
54123: LD_INT 0
54125: PUSH
54126: LD_INT 3
54128: PUSH
54129: EMPTY
54130: LIST
54131: LIST
54132: PUSH
54133: LD_INT 1
54135: NEG
54136: PUSH
54137: LD_INT 2
54139: PUSH
54140: EMPTY
54141: LIST
54142: LIST
54143: PUSH
54144: LD_INT 2
54146: NEG
54147: PUSH
54148: LD_INT 1
54150: PUSH
54151: EMPTY
54152: LIST
54153: LIST
54154: PUSH
54155: LD_INT 3
54157: NEG
54158: PUSH
54159: LD_INT 0
54161: PUSH
54162: EMPTY
54163: LIST
54164: LIST
54165: PUSH
54166: LD_INT 3
54168: NEG
54169: PUSH
54170: LD_INT 1
54172: NEG
54173: PUSH
54174: EMPTY
54175: LIST
54176: LIST
54177: PUSH
54178: EMPTY
54179: LIST
54180: LIST
54181: LIST
54182: LIST
54183: LIST
54184: LIST
54185: LIST
54186: LIST
54187: LIST
54188: LIST
54189: LIST
54190: LIST
54191: LIST
54192: LIST
54193: LIST
54194: LIST
54195: LIST
54196: LIST
54197: LIST
54198: LIST
54199: LIST
54200: LIST
54201: LIST
54202: LIST
54203: LIST
54204: LIST
54205: LIST
54206: LIST
54207: LIST
54208: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54209: LD_ADDR_VAR 0 44
54213: PUSH
54214: LD_INT 0
54216: PUSH
54217: LD_INT 0
54219: PUSH
54220: EMPTY
54221: LIST
54222: LIST
54223: PUSH
54224: LD_INT 0
54226: PUSH
54227: LD_INT 1
54229: NEG
54230: PUSH
54231: EMPTY
54232: LIST
54233: LIST
54234: PUSH
54235: LD_INT 1
54237: PUSH
54238: LD_INT 0
54240: PUSH
54241: EMPTY
54242: LIST
54243: LIST
54244: PUSH
54245: LD_INT 1
54247: PUSH
54248: LD_INT 1
54250: PUSH
54251: EMPTY
54252: LIST
54253: LIST
54254: PUSH
54255: LD_INT 0
54257: PUSH
54258: LD_INT 1
54260: PUSH
54261: EMPTY
54262: LIST
54263: LIST
54264: PUSH
54265: LD_INT 1
54267: NEG
54268: PUSH
54269: LD_INT 0
54271: PUSH
54272: EMPTY
54273: LIST
54274: LIST
54275: PUSH
54276: LD_INT 1
54278: NEG
54279: PUSH
54280: LD_INT 1
54282: NEG
54283: PUSH
54284: EMPTY
54285: LIST
54286: LIST
54287: PUSH
54288: LD_INT 1
54290: NEG
54291: PUSH
54292: LD_INT 2
54294: NEG
54295: PUSH
54296: EMPTY
54297: LIST
54298: LIST
54299: PUSH
54300: LD_INT 1
54302: PUSH
54303: LD_INT 1
54305: NEG
54306: PUSH
54307: EMPTY
54308: LIST
54309: LIST
54310: PUSH
54311: LD_INT 2
54313: PUSH
54314: LD_INT 0
54316: PUSH
54317: EMPTY
54318: LIST
54319: LIST
54320: PUSH
54321: LD_INT 2
54323: PUSH
54324: LD_INT 1
54326: PUSH
54327: EMPTY
54328: LIST
54329: LIST
54330: PUSH
54331: LD_INT 2
54333: PUSH
54334: LD_INT 2
54336: PUSH
54337: EMPTY
54338: LIST
54339: LIST
54340: PUSH
54341: LD_INT 1
54343: PUSH
54344: LD_INT 2
54346: PUSH
54347: EMPTY
54348: LIST
54349: LIST
54350: PUSH
54351: LD_INT 1
54353: NEG
54354: PUSH
54355: LD_INT 1
54357: PUSH
54358: EMPTY
54359: LIST
54360: LIST
54361: PUSH
54362: LD_INT 2
54364: NEG
54365: PUSH
54366: LD_INT 0
54368: PUSH
54369: EMPTY
54370: LIST
54371: LIST
54372: PUSH
54373: LD_INT 2
54375: NEG
54376: PUSH
54377: LD_INT 1
54379: NEG
54380: PUSH
54381: EMPTY
54382: LIST
54383: LIST
54384: PUSH
54385: LD_INT 2
54387: NEG
54388: PUSH
54389: LD_INT 2
54391: NEG
54392: PUSH
54393: EMPTY
54394: LIST
54395: LIST
54396: PUSH
54397: LD_INT 2
54399: NEG
54400: PUSH
54401: LD_INT 3
54403: NEG
54404: PUSH
54405: EMPTY
54406: LIST
54407: LIST
54408: PUSH
54409: LD_INT 2
54411: PUSH
54412: LD_INT 1
54414: NEG
54415: PUSH
54416: EMPTY
54417: LIST
54418: LIST
54419: PUSH
54420: LD_INT 3
54422: PUSH
54423: LD_INT 0
54425: PUSH
54426: EMPTY
54427: LIST
54428: LIST
54429: PUSH
54430: LD_INT 3
54432: PUSH
54433: LD_INT 1
54435: PUSH
54436: EMPTY
54437: LIST
54438: LIST
54439: PUSH
54440: LD_INT 3
54442: PUSH
54443: LD_INT 2
54445: PUSH
54446: EMPTY
54447: LIST
54448: LIST
54449: PUSH
54450: LD_INT 3
54452: PUSH
54453: LD_INT 3
54455: PUSH
54456: EMPTY
54457: LIST
54458: LIST
54459: PUSH
54460: LD_INT 2
54462: PUSH
54463: LD_INT 3
54465: PUSH
54466: EMPTY
54467: LIST
54468: LIST
54469: PUSH
54470: LD_INT 2
54472: NEG
54473: PUSH
54474: LD_INT 1
54476: PUSH
54477: EMPTY
54478: LIST
54479: LIST
54480: PUSH
54481: LD_INT 3
54483: NEG
54484: PUSH
54485: LD_INT 0
54487: PUSH
54488: EMPTY
54489: LIST
54490: LIST
54491: PUSH
54492: LD_INT 3
54494: NEG
54495: PUSH
54496: LD_INT 1
54498: NEG
54499: PUSH
54500: EMPTY
54501: LIST
54502: LIST
54503: PUSH
54504: LD_INT 3
54506: NEG
54507: PUSH
54508: LD_INT 2
54510: NEG
54511: PUSH
54512: EMPTY
54513: LIST
54514: LIST
54515: PUSH
54516: LD_INT 3
54518: NEG
54519: PUSH
54520: LD_INT 3
54522: NEG
54523: PUSH
54524: EMPTY
54525: LIST
54526: LIST
54527: PUSH
54528: EMPTY
54529: LIST
54530: LIST
54531: LIST
54532: LIST
54533: LIST
54534: LIST
54535: LIST
54536: LIST
54537: LIST
54538: LIST
54539: LIST
54540: LIST
54541: LIST
54542: LIST
54543: LIST
54544: LIST
54545: LIST
54546: LIST
54547: LIST
54548: LIST
54549: LIST
54550: LIST
54551: LIST
54552: LIST
54553: LIST
54554: LIST
54555: LIST
54556: LIST
54557: LIST
54558: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54559: LD_ADDR_VAR 0 45
54563: PUSH
54564: LD_INT 0
54566: PUSH
54567: LD_INT 0
54569: PUSH
54570: EMPTY
54571: LIST
54572: LIST
54573: PUSH
54574: LD_INT 0
54576: PUSH
54577: LD_INT 1
54579: NEG
54580: PUSH
54581: EMPTY
54582: LIST
54583: LIST
54584: PUSH
54585: LD_INT 1
54587: PUSH
54588: LD_INT 0
54590: PUSH
54591: EMPTY
54592: LIST
54593: LIST
54594: PUSH
54595: LD_INT 1
54597: PUSH
54598: LD_INT 1
54600: PUSH
54601: EMPTY
54602: LIST
54603: LIST
54604: PUSH
54605: LD_INT 0
54607: PUSH
54608: LD_INT 1
54610: PUSH
54611: EMPTY
54612: LIST
54613: LIST
54614: PUSH
54615: LD_INT 1
54617: NEG
54618: PUSH
54619: LD_INT 0
54621: PUSH
54622: EMPTY
54623: LIST
54624: LIST
54625: PUSH
54626: LD_INT 1
54628: NEG
54629: PUSH
54630: LD_INT 1
54632: NEG
54633: PUSH
54634: EMPTY
54635: LIST
54636: LIST
54637: PUSH
54638: LD_INT 1
54640: NEG
54641: PUSH
54642: LD_INT 2
54644: NEG
54645: PUSH
54646: EMPTY
54647: LIST
54648: LIST
54649: PUSH
54650: LD_INT 0
54652: PUSH
54653: LD_INT 2
54655: NEG
54656: PUSH
54657: EMPTY
54658: LIST
54659: LIST
54660: PUSH
54661: LD_INT 1
54663: PUSH
54664: LD_INT 1
54666: NEG
54667: PUSH
54668: EMPTY
54669: LIST
54670: LIST
54671: PUSH
54672: LD_INT 2
54674: PUSH
54675: LD_INT 1
54677: PUSH
54678: EMPTY
54679: LIST
54680: LIST
54681: PUSH
54682: LD_INT 2
54684: PUSH
54685: LD_INT 2
54687: PUSH
54688: EMPTY
54689: LIST
54690: LIST
54691: PUSH
54692: LD_INT 1
54694: PUSH
54695: LD_INT 2
54697: PUSH
54698: EMPTY
54699: LIST
54700: LIST
54701: PUSH
54702: LD_INT 0
54704: PUSH
54705: LD_INT 2
54707: PUSH
54708: EMPTY
54709: LIST
54710: LIST
54711: PUSH
54712: LD_INT 1
54714: NEG
54715: PUSH
54716: LD_INT 1
54718: PUSH
54719: EMPTY
54720: LIST
54721: LIST
54722: PUSH
54723: LD_INT 2
54725: NEG
54726: PUSH
54727: LD_INT 1
54729: NEG
54730: PUSH
54731: EMPTY
54732: LIST
54733: LIST
54734: PUSH
54735: LD_INT 2
54737: NEG
54738: PUSH
54739: LD_INT 2
54741: NEG
54742: PUSH
54743: EMPTY
54744: LIST
54745: LIST
54746: PUSH
54747: LD_INT 2
54749: NEG
54750: PUSH
54751: LD_INT 3
54753: NEG
54754: PUSH
54755: EMPTY
54756: LIST
54757: LIST
54758: PUSH
54759: LD_INT 1
54761: NEG
54762: PUSH
54763: LD_INT 3
54765: NEG
54766: PUSH
54767: EMPTY
54768: LIST
54769: LIST
54770: PUSH
54771: LD_INT 0
54773: PUSH
54774: LD_INT 3
54776: NEG
54777: PUSH
54778: EMPTY
54779: LIST
54780: LIST
54781: PUSH
54782: LD_INT 1
54784: PUSH
54785: LD_INT 2
54787: NEG
54788: PUSH
54789: EMPTY
54790: LIST
54791: LIST
54792: PUSH
54793: LD_INT 3
54795: PUSH
54796: LD_INT 2
54798: PUSH
54799: EMPTY
54800: LIST
54801: LIST
54802: PUSH
54803: LD_INT 3
54805: PUSH
54806: LD_INT 3
54808: PUSH
54809: EMPTY
54810: LIST
54811: LIST
54812: PUSH
54813: LD_INT 2
54815: PUSH
54816: LD_INT 3
54818: PUSH
54819: EMPTY
54820: LIST
54821: LIST
54822: PUSH
54823: LD_INT 1
54825: PUSH
54826: LD_INT 3
54828: PUSH
54829: EMPTY
54830: LIST
54831: LIST
54832: PUSH
54833: LD_INT 0
54835: PUSH
54836: LD_INT 3
54838: PUSH
54839: EMPTY
54840: LIST
54841: LIST
54842: PUSH
54843: LD_INT 1
54845: NEG
54846: PUSH
54847: LD_INT 2
54849: PUSH
54850: EMPTY
54851: LIST
54852: LIST
54853: PUSH
54854: LD_INT 3
54856: NEG
54857: PUSH
54858: LD_INT 2
54860: NEG
54861: PUSH
54862: EMPTY
54863: LIST
54864: LIST
54865: PUSH
54866: LD_INT 3
54868: NEG
54869: PUSH
54870: LD_INT 3
54872: NEG
54873: PUSH
54874: EMPTY
54875: LIST
54876: LIST
54877: PUSH
54878: EMPTY
54879: LIST
54880: LIST
54881: LIST
54882: LIST
54883: LIST
54884: LIST
54885: LIST
54886: LIST
54887: LIST
54888: LIST
54889: LIST
54890: LIST
54891: LIST
54892: LIST
54893: LIST
54894: LIST
54895: LIST
54896: LIST
54897: LIST
54898: LIST
54899: LIST
54900: LIST
54901: LIST
54902: LIST
54903: LIST
54904: LIST
54905: LIST
54906: LIST
54907: LIST
54908: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54909: LD_ADDR_VAR 0 46
54913: PUSH
54914: LD_INT 0
54916: PUSH
54917: LD_INT 0
54919: PUSH
54920: EMPTY
54921: LIST
54922: LIST
54923: PUSH
54924: LD_INT 0
54926: PUSH
54927: LD_INT 1
54929: NEG
54930: PUSH
54931: EMPTY
54932: LIST
54933: LIST
54934: PUSH
54935: LD_INT 1
54937: PUSH
54938: LD_INT 0
54940: PUSH
54941: EMPTY
54942: LIST
54943: LIST
54944: PUSH
54945: LD_INT 1
54947: PUSH
54948: LD_INT 1
54950: PUSH
54951: EMPTY
54952: LIST
54953: LIST
54954: PUSH
54955: LD_INT 0
54957: PUSH
54958: LD_INT 1
54960: PUSH
54961: EMPTY
54962: LIST
54963: LIST
54964: PUSH
54965: LD_INT 1
54967: NEG
54968: PUSH
54969: LD_INT 0
54971: PUSH
54972: EMPTY
54973: LIST
54974: LIST
54975: PUSH
54976: LD_INT 1
54978: NEG
54979: PUSH
54980: LD_INT 1
54982: NEG
54983: PUSH
54984: EMPTY
54985: LIST
54986: LIST
54987: PUSH
54988: LD_INT 1
54990: NEG
54991: PUSH
54992: LD_INT 2
54994: NEG
54995: PUSH
54996: EMPTY
54997: LIST
54998: LIST
54999: PUSH
55000: LD_INT 0
55002: PUSH
55003: LD_INT 2
55005: NEG
55006: PUSH
55007: EMPTY
55008: LIST
55009: LIST
55010: PUSH
55011: LD_INT 1
55013: PUSH
55014: LD_INT 1
55016: NEG
55017: PUSH
55018: EMPTY
55019: LIST
55020: LIST
55021: PUSH
55022: LD_INT 2
55024: PUSH
55025: LD_INT 0
55027: PUSH
55028: EMPTY
55029: LIST
55030: LIST
55031: PUSH
55032: LD_INT 2
55034: PUSH
55035: LD_INT 1
55037: PUSH
55038: EMPTY
55039: LIST
55040: LIST
55041: PUSH
55042: LD_INT 1
55044: PUSH
55045: LD_INT 2
55047: PUSH
55048: EMPTY
55049: LIST
55050: LIST
55051: PUSH
55052: LD_INT 0
55054: PUSH
55055: LD_INT 2
55057: PUSH
55058: EMPTY
55059: LIST
55060: LIST
55061: PUSH
55062: LD_INT 1
55064: NEG
55065: PUSH
55066: LD_INT 1
55068: PUSH
55069: EMPTY
55070: LIST
55071: LIST
55072: PUSH
55073: LD_INT 2
55075: NEG
55076: PUSH
55077: LD_INT 0
55079: PUSH
55080: EMPTY
55081: LIST
55082: LIST
55083: PUSH
55084: LD_INT 2
55086: NEG
55087: PUSH
55088: LD_INT 1
55090: NEG
55091: PUSH
55092: EMPTY
55093: LIST
55094: LIST
55095: PUSH
55096: LD_INT 1
55098: NEG
55099: PUSH
55100: LD_INT 3
55102: NEG
55103: PUSH
55104: EMPTY
55105: LIST
55106: LIST
55107: PUSH
55108: LD_INT 0
55110: PUSH
55111: LD_INT 3
55113: NEG
55114: PUSH
55115: EMPTY
55116: LIST
55117: LIST
55118: PUSH
55119: LD_INT 1
55121: PUSH
55122: LD_INT 2
55124: NEG
55125: PUSH
55126: EMPTY
55127: LIST
55128: LIST
55129: PUSH
55130: LD_INT 2
55132: PUSH
55133: LD_INT 1
55135: NEG
55136: PUSH
55137: EMPTY
55138: LIST
55139: LIST
55140: PUSH
55141: LD_INT 3
55143: PUSH
55144: LD_INT 0
55146: PUSH
55147: EMPTY
55148: LIST
55149: LIST
55150: PUSH
55151: LD_INT 3
55153: PUSH
55154: LD_INT 1
55156: PUSH
55157: EMPTY
55158: LIST
55159: LIST
55160: PUSH
55161: LD_INT 1
55163: PUSH
55164: LD_INT 3
55166: PUSH
55167: EMPTY
55168: LIST
55169: LIST
55170: PUSH
55171: LD_INT 0
55173: PUSH
55174: LD_INT 3
55176: PUSH
55177: EMPTY
55178: LIST
55179: LIST
55180: PUSH
55181: LD_INT 1
55183: NEG
55184: PUSH
55185: LD_INT 2
55187: PUSH
55188: EMPTY
55189: LIST
55190: LIST
55191: PUSH
55192: LD_INT 2
55194: NEG
55195: PUSH
55196: LD_INT 1
55198: PUSH
55199: EMPTY
55200: LIST
55201: LIST
55202: PUSH
55203: LD_INT 3
55205: NEG
55206: PUSH
55207: LD_INT 0
55209: PUSH
55210: EMPTY
55211: LIST
55212: LIST
55213: PUSH
55214: LD_INT 3
55216: NEG
55217: PUSH
55218: LD_INT 1
55220: NEG
55221: PUSH
55222: EMPTY
55223: LIST
55224: LIST
55225: PUSH
55226: EMPTY
55227: LIST
55228: LIST
55229: LIST
55230: LIST
55231: LIST
55232: LIST
55233: LIST
55234: LIST
55235: LIST
55236: LIST
55237: LIST
55238: LIST
55239: LIST
55240: LIST
55241: LIST
55242: LIST
55243: LIST
55244: LIST
55245: LIST
55246: LIST
55247: LIST
55248: LIST
55249: LIST
55250: LIST
55251: LIST
55252: LIST
55253: LIST
55254: LIST
55255: LIST
55256: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55257: LD_ADDR_VAR 0 47
55261: PUSH
55262: LD_INT 0
55264: PUSH
55265: LD_INT 0
55267: PUSH
55268: EMPTY
55269: LIST
55270: LIST
55271: PUSH
55272: LD_INT 0
55274: PUSH
55275: LD_INT 1
55277: NEG
55278: PUSH
55279: EMPTY
55280: LIST
55281: LIST
55282: PUSH
55283: LD_INT 1
55285: PUSH
55286: LD_INT 0
55288: PUSH
55289: EMPTY
55290: LIST
55291: LIST
55292: PUSH
55293: LD_INT 1
55295: PUSH
55296: LD_INT 1
55298: PUSH
55299: EMPTY
55300: LIST
55301: LIST
55302: PUSH
55303: LD_INT 0
55305: PUSH
55306: LD_INT 1
55308: PUSH
55309: EMPTY
55310: LIST
55311: LIST
55312: PUSH
55313: LD_INT 1
55315: NEG
55316: PUSH
55317: LD_INT 0
55319: PUSH
55320: EMPTY
55321: LIST
55322: LIST
55323: PUSH
55324: LD_INT 1
55326: NEG
55327: PUSH
55328: LD_INT 1
55330: NEG
55331: PUSH
55332: EMPTY
55333: LIST
55334: LIST
55335: PUSH
55336: LD_INT 1
55338: NEG
55339: PUSH
55340: LD_INT 2
55342: NEG
55343: PUSH
55344: EMPTY
55345: LIST
55346: LIST
55347: PUSH
55348: LD_INT 0
55350: PUSH
55351: LD_INT 2
55353: NEG
55354: PUSH
55355: EMPTY
55356: LIST
55357: LIST
55358: PUSH
55359: LD_INT 1
55361: PUSH
55362: LD_INT 1
55364: NEG
55365: PUSH
55366: EMPTY
55367: LIST
55368: LIST
55369: PUSH
55370: LD_INT 2
55372: NEG
55373: PUSH
55374: LD_INT 1
55376: NEG
55377: PUSH
55378: EMPTY
55379: LIST
55380: LIST
55381: PUSH
55382: LD_INT 2
55384: NEG
55385: PUSH
55386: LD_INT 2
55388: NEG
55389: PUSH
55390: EMPTY
55391: LIST
55392: LIST
55393: PUSH
55394: EMPTY
55395: LIST
55396: LIST
55397: LIST
55398: LIST
55399: LIST
55400: LIST
55401: LIST
55402: LIST
55403: LIST
55404: LIST
55405: LIST
55406: LIST
55407: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
55408: LD_ADDR_VAR 0 48
55412: PUSH
55413: LD_INT 0
55415: PUSH
55416: LD_INT 0
55418: PUSH
55419: EMPTY
55420: LIST
55421: LIST
55422: PUSH
55423: LD_INT 0
55425: PUSH
55426: LD_INT 1
55428: NEG
55429: PUSH
55430: EMPTY
55431: LIST
55432: LIST
55433: PUSH
55434: LD_INT 1
55436: PUSH
55437: LD_INT 0
55439: PUSH
55440: EMPTY
55441: LIST
55442: LIST
55443: PUSH
55444: LD_INT 1
55446: PUSH
55447: LD_INT 1
55449: PUSH
55450: EMPTY
55451: LIST
55452: LIST
55453: PUSH
55454: LD_INT 0
55456: PUSH
55457: LD_INT 1
55459: PUSH
55460: EMPTY
55461: LIST
55462: LIST
55463: PUSH
55464: LD_INT 1
55466: NEG
55467: PUSH
55468: LD_INT 0
55470: PUSH
55471: EMPTY
55472: LIST
55473: LIST
55474: PUSH
55475: LD_INT 1
55477: NEG
55478: PUSH
55479: LD_INT 1
55481: NEG
55482: PUSH
55483: EMPTY
55484: LIST
55485: LIST
55486: PUSH
55487: LD_INT 1
55489: NEG
55490: PUSH
55491: LD_INT 2
55493: NEG
55494: PUSH
55495: EMPTY
55496: LIST
55497: LIST
55498: PUSH
55499: LD_INT 0
55501: PUSH
55502: LD_INT 2
55504: NEG
55505: PUSH
55506: EMPTY
55507: LIST
55508: LIST
55509: PUSH
55510: LD_INT 1
55512: PUSH
55513: LD_INT 1
55515: NEG
55516: PUSH
55517: EMPTY
55518: LIST
55519: LIST
55520: PUSH
55521: LD_INT 2
55523: PUSH
55524: LD_INT 0
55526: PUSH
55527: EMPTY
55528: LIST
55529: LIST
55530: PUSH
55531: LD_INT 2
55533: PUSH
55534: LD_INT 1
55536: PUSH
55537: EMPTY
55538: LIST
55539: LIST
55540: PUSH
55541: EMPTY
55542: LIST
55543: LIST
55544: LIST
55545: LIST
55546: LIST
55547: LIST
55548: LIST
55549: LIST
55550: LIST
55551: LIST
55552: LIST
55553: LIST
55554: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
55555: LD_ADDR_VAR 0 49
55559: PUSH
55560: LD_INT 0
55562: PUSH
55563: LD_INT 0
55565: PUSH
55566: EMPTY
55567: LIST
55568: LIST
55569: PUSH
55570: LD_INT 0
55572: PUSH
55573: LD_INT 1
55575: NEG
55576: PUSH
55577: EMPTY
55578: LIST
55579: LIST
55580: PUSH
55581: LD_INT 1
55583: PUSH
55584: LD_INT 0
55586: PUSH
55587: EMPTY
55588: LIST
55589: LIST
55590: PUSH
55591: LD_INT 1
55593: PUSH
55594: LD_INT 1
55596: PUSH
55597: EMPTY
55598: LIST
55599: LIST
55600: PUSH
55601: LD_INT 0
55603: PUSH
55604: LD_INT 1
55606: PUSH
55607: EMPTY
55608: LIST
55609: LIST
55610: PUSH
55611: LD_INT 1
55613: NEG
55614: PUSH
55615: LD_INT 0
55617: PUSH
55618: EMPTY
55619: LIST
55620: LIST
55621: PUSH
55622: LD_INT 1
55624: NEG
55625: PUSH
55626: LD_INT 1
55628: NEG
55629: PUSH
55630: EMPTY
55631: LIST
55632: LIST
55633: PUSH
55634: LD_INT 1
55636: PUSH
55637: LD_INT 1
55639: NEG
55640: PUSH
55641: EMPTY
55642: LIST
55643: LIST
55644: PUSH
55645: LD_INT 2
55647: PUSH
55648: LD_INT 0
55650: PUSH
55651: EMPTY
55652: LIST
55653: LIST
55654: PUSH
55655: LD_INT 2
55657: PUSH
55658: LD_INT 1
55660: PUSH
55661: EMPTY
55662: LIST
55663: LIST
55664: PUSH
55665: LD_INT 2
55667: PUSH
55668: LD_INT 2
55670: PUSH
55671: EMPTY
55672: LIST
55673: LIST
55674: PUSH
55675: LD_INT 1
55677: PUSH
55678: LD_INT 2
55680: PUSH
55681: EMPTY
55682: LIST
55683: LIST
55684: PUSH
55685: EMPTY
55686: LIST
55687: LIST
55688: LIST
55689: LIST
55690: LIST
55691: LIST
55692: LIST
55693: LIST
55694: LIST
55695: LIST
55696: LIST
55697: LIST
55698: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
55699: LD_ADDR_VAR 0 50
55703: PUSH
55704: LD_INT 0
55706: PUSH
55707: LD_INT 0
55709: PUSH
55710: EMPTY
55711: LIST
55712: LIST
55713: PUSH
55714: LD_INT 0
55716: PUSH
55717: LD_INT 1
55719: NEG
55720: PUSH
55721: EMPTY
55722: LIST
55723: LIST
55724: PUSH
55725: LD_INT 1
55727: PUSH
55728: LD_INT 0
55730: PUSH
55731: EMPTY
55732: LIST
55733: LIST
55734: PUSH
55735: LD_INT 1
55737: PUSH
55738: LD_INT 1
55740: PUSH
55741: EMPTY
55742: LIST
55743: LIST
55744: PUSH
55745: LD_INT 0
55747: PUSH
55748: LD_INT 1
55750: PUSH
55751: EMPTY
55752: LIST
55753: LIST
55754: PUSH
55755: LD_INT 1
55757: NEG
55758: PUSH
55759: LD_INT 0
55761: PUSH
55762: EMPTY
55763: LIST
55764: LIST
55765: PUSH
55766: LD_INT 1
55768: NEG
55769: PUSH
55770: LD_INT 1
55772: NEG
55773: PUSH
55774: EMPTY
55775: LIST
55776: LIST
55777: PUSH
55778: LD_INT 2
55780: PUSH
55781: LD_INT 1
55783: PUSH
55784: EMPTY
55785: LIST
55786: LIST
55787: PUSH
55788: LD_INT 2
55790: PUSH
55791: LD_INT 2
55793: PUSH
55794: EMPTY
55795: LIST
55796: LIST
55797: PUSH
55798: LD_INT 1
55800: PUSH
55801: LD_INT 2
55803: PUSH
55804: EMPTY
55805: LIST
55806: LIST
55807: PUSH
55808: LD_INT 0
55810: PUSH
55811: LD_INT 2
55813: PUSH
55814: EMPTY
55815: LIST
55816: LIST
55817: PUSH
55818: LD_INT 1
55820: NEG
55821: PUSH
55822: LD_INT 1
55824: PUSH
55825: EMPTY
55826: LIST
55827: LIST
55828: PUSH
55829: EMPTY
55830: LIST
55831: LIST
55832: LIST
55833: LIST
55834: LIST
55835: LIST
55836: LIST
55837: LIST
55838: LIST
55839: LIST
55840: LIST
55841: LIST
55842: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
55843: LD_ADDR_VAR 0 51
55847: PUSH
55848: LD_INT 0
55850: PUSH
55851: LD_INT 0
55853: PUSH
55854: EMPTY
55855: LIST
55856: LIST
55857: PUSH
55858: LD_INT 0
55860: PUSH
55861: LD_INT 1
55863: NEG
55864: PUSH
55865: EMPTY
55866: LIST
55867: LIST
55868: PUSH
55869: LD_INT 1
55871: PUSH
55872: LD_INT 0
55874: PUSH
55875: EMPTY
55876: LIST
55877: LIST
55878: PUSH
55879: LD_INT 1
55881: PUSH
55882: LD_INT 1
55884: PUSH
55885: EMPTY
55886: LIST
55887: LIST
55888: PUSH
55889: LD_INT 0
55891: PUSH
55892: LD_INT 1
55894: PUSH
55895: EMPTY
55896: LIST
55897: LIST
55898: PUSH
55899: LD_INT 1
55901: NEG
55902: PUSH
55903: LD_INT 0
55905: PUSH
55906: EMPTY
55907: LIST
55908: LIST
55909: PUSH
55910: LD_INT 1
55912: NEG
55913: PUSH
55914: LD_INT 1
55916: NEG
55917: PUSH
55918: EMPTY
55919: LIST
55920: LIST
55921: PUSH
55922: LD_INT 1
55924: PUSH
55925: LD_INT 2
55927: PUSH
55928: EMPTY
55929: LIST
55930: LIST
55931: PUSH
55932: LD_INT 0
55934: PUSH
55935: LD_INT 2
55937: PUSH
55938: EMPTY
55939: LIST
55940: LIST
55941: PUSH
55942: LD_INT 1
55944: NEG
55945: PUSH
55946: LD_INT 1
55948: PUSH
55949: EMPTY
55950: LIST
55951: LIST
55952: PUSH
55953: LD_INT 2
55955: NEG
55956: PUSH
55957: LD_INT 0
55959: PUSH
55960: EMPTY
55961: LIST
55962: LIST
55963: PUSH
55964: LD_INT 2
55966: NEG
55967: PUSH
55968: LD_INT 1
55970: NEG
55971: PUSH
55972: EMPTY
55973: LIST
55974: LIST
55975: PUSH
55976: EMPTY
55977: LIST
55978: LIST
55979: LIST
55980: LIST
55981: LIST
55982: LIST
55983: LIST
55984: LIST
55985: LIST
55986: LIST
55987: LIST
55988: LIST
55989: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55990: LD_ADDR_VAR 0 52
55994: PUSH
55995: LD_INT 0
55997: PUSH
55998: LD_INT 0
56000: PUSH
56001: EMPTY
56002: LIST
56003: LIST
56004: PUSH
56005: LD_INT 0
56007: PUSH
56008: LD_INT 1
56010: NEG
56011: PUSH
56012: EMPTY
56013: LIST
56014: LIST
56015: PUSH
56016: LD_INT 1
56018: PUSH
56019: LD_INT 0
56021: PUSH
56022: EMPTY
56023: LIST
56024: LIST
56025: PUSH
56026: LD_INT 1
56028: PUSH
56029: LD_INT 1
56031: PUSH
56032: EMPTY
56033: LIST
56034: LIST
56035: PUSH
56036: LD_INT 0
56038: PUSH
56039: LD_INT 1
56041: PUSH
56042: EMPTY
56043: LIST
56044: LIST
56045: PUSH
56046: LD_INT 1
56048: NEG
56049: PUSH
56050: LD_INT 0
56052: PUSH
56053: EMPTY
56054: LIST
56055: LIST
56056: PUSH
56057: LD_INT 1
56059: NEG
56060: PUSH
56061: LD_INT 1
56063: NEG
56064: PUSH
56065: EMPTY
56066: LIST
56067: LIST
56068: PUSH
56069: LD_INT 1
56071: NEG
56072: PUSH
56073: LD_INT 2
56075: NEG
56076: PUSH
56077: EMPTY
56078: LIST
56079: LIST
56080: PUSH
56081: LD_INT 1
56083: NEG
56084: PUSH
56085: LD_INT 1
56087: PUSH
56088: EMPTY
56089: LIST
56090: LIST
56091: PUSH
56092: LD_INT 2
56094: NEG
56095: PUSH
56096: LD_INT 0
56098: PUSH
56099: EMPTY
56100: LIST
56101: LIST
56102: PUSH
56103: LD_INT 2
56105: NEG
56106: PUSH
56107: LD_INT 1
56109: NEG
56110: PUSH
56111: EMPTY
56112: LIST
56113: LIST
56114: PUSH
56115: LD_INT 2
56117: NEG
56118: PUSH
56119: LD_INT 2
56121: NEG
56122: PUSH
56123: EMPTY
56124: LIST
56125: LIST
56126: PUSH
56127: EMPTY
56128: LIST
56129: LIST
56130: LIST
56131: LIST
56132: LIST
56133: LIST
56134: LIST
56135: LIST
56136: LIST
56137: LIST
56138: LIST
56139: LIST
56140: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56141: LD_ADDR_VAR 0 53
56145: PUSH
56146: LD_INT 0
56148: PUSH
56149: LD_INT 0
56151: PUSH
56152: EMPTY
56153: LIST
56154: LIST
56155: PUSH
56156: LD_INT 0
56158: PUSH
56159: LD_INT 1
56161: NEG
56162: PUSH
56163: EMPTY
56164: LIST
56165: LIST
56166: PUSH
56167: LD_INT 1
56169: PUSH
56170: LD_INT 0
56172: PUSH
56173: EMPTY
56174: LIST
56175: LIST
56176: PUSH
56177: LD_INT 1
56179: PUSH
56180: LD_INT 1
56182: PUSH
56183: EMPTY
56184: LIST
56185: LIST
56186: PUSH
56187: LD_INT 0
56189: PUSH
56190: LD_INT 1
56192: PUSH
56193: EMPTY
56194: LIST
56195: LIST
56196: PUSH
56197: LD_INT 1
56199: NEG
56200: PUSH
56201: LD_INT 0
56203: PUSH
56204: EMPTY
56205: LIST
56206: LIST
56207: PUSH
56208: LD_INT 1
56210: NEG
56211: PUSH
56212: LD_INT 1
56214: NEG
56215: PUSH
56216: EMPTY
56217: LIST
56218: LIST
56219: PUSH
56220: LD_INT 1
56222: NEG
56223: PUSH
56224: LD_INT 2
56226: NEG
56227: PUSH
56228: EMPTY
56229: LIST
56230: LIST
56231: PUSH
56232: LD_INT 0
56234: PUSH
56235: LD_INT 2
56237: NEG
56238: PUSH
56239: EMPTY
56240: LIST
56241: LIST
56242: PUSH
56243: LD_INT 1
56245: PUSH
56246: LD_INT 1
56248: NEG
56249: PUSH
56250: EMPTY
56251: LIST
56252: LIST
56253: PUSH
56254: LD_INT 2
56256: PUSH
56257: LD_INT 0
56259: PUSH
56260: EMPTY
56261: LIST
56262: LIST
56263: PUSH
56264: LD_INT 2
56266: PUSH
56267: LD_INT 1
56269: PUSH
56270: EMPTY
56271: LIST
56272: LIST
56273: PUSH
56274: LD_INT 2
56276: PUSH
56277: LD_INT 2
56279: PUSH
56280: EMPTY
56281: LIST
56282: LIST
56283: PUSH
56284: LD_INT 1
56286: PUSH
56287: LD_INT 2
56289: PUSH
56290: EMPTY
56291: LIST
56292: LIST
56293: PUSH
56294: LD_INT 0
56296: PUSH
56297: LD_INT 2
56299: PUSH
56300: EMPTY
56301: LIST
56302: LIST
56303: PUSH
56304: LD_INT 1
56306: NEG
56307: PUSH
56308: LD_INT 1
56310: PUSH
56311: EMPTY
56312: LIST
56313: LIST
56314: PUSH
56315: LD_INT 2
56317: NEG
56318: PUSH
56319: LD_INT 0
56321: PUSH
56322: EMPTY
56323: LIST
56324: LIST
56325: PUSH
56326: LD_INT 2
56328: NEG
56329: PUSH
56330: LD_INT 1
56332: NEG
56333: PUSH
56334: EMPTY
56335: LIST
56336: LIST
56337: PUSH
56338: LD_INT 2
56340: NEG
56341: PUSH
56342: LD_INT 2
56344: NEG
56345: PUSH
56346: EMPTY
56347: LIST
56348: LIST
56349: PUSH
56350: EMPTY
56351: LIST
56352: LIST
56353: LIST
56354: LIST
56355: LIST
56356: LIST
56357: LIST
56358: LIST
56359: LIST
56360: LIST
56361: LIST
56362: LIST
56363: LIST
56364: LIST
56365: LIST
56366: LIST
56367: LIST
56368: LIST
56369: LIST
56370: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56371: LD_ADDR_VAR 0 54
56375: PUSH
56376: LD_INT 0
56378: PUSH
56379: LD_INT 0
56381: PUSH
56382: EMPTY
56383: LIST
56384: LIST
56385: PUSH
56386: LD_INT 0
56388: PUSH
56389: LD_INT 1
56391: NEG
56392: PUSH
56393: EMPTY
56394: LIST
56395: LIST
56396: PUSH
56397: LD_INT 1
56399: PUSH
56400: LD_INT 0
56402: PUSH
56403: EMPTY
56404: LIST
56405: LIST
56406: PUSH
56407: LD_INT 1
56409: PUSH
56410: LD_INT 1
56412: PUSH
56413: EMPTY
56414: LIST
56415: LIST
56416: PUSH
56417: LD_INT 0
56419: PUSH
56420: LD_INT 1
56422: PUSH
56423: EMPTY
56424: LIST
56425: LIST
56426: PUSH
56427: LD_INT 1
56429: NEG
56430: PUSH
56431: LD_INT 0
56433: PUSH
56434: EMPTY
56435: LIST
56436: LIST
56437: PUSH
56438: LD_INT 1
56440: NEG
56441: PUSH
56442: LD_INT 1
56444: NEG
56445: PUSH
56446: EMPTY
56447: LIST
56448: LIST
56449: PUSH
56450: LD_INT 1
56452: NEG
56453: PUSH
56454: LD_INT 2
56456: NEG
56457: PUSH
56458: EMPTY
56459: LIST
56460: LIST
56461: PUSH
56462: LD_INT 0
56464: PUSH
56465: LD_INT 2
56467: NEG
56468: PUSH
56469: EMPTY
56470: LIST
56471: LIST
56472: PUSH
56473: LD_INT 1
56475: PUSH
56476: LD_INT 1
56478: NEG
56479: PUSH
56480: EMPTY
56481: LIST
56482: LIST
56483: PUSH
56484: LD_INT 2
56486: PUSH
56487: LD_INT 0
56489: PUSH
56490: EMPTY
56491: LIST
56492: LIST
56493: PUSH
56494: LD_INT 2
56496: PUSH
56497: LD_INT 1
56499: PUSH
56500: EMPTY
56501: LIST
56502: LIST
56503: PUSH
56504: LD_INT 2
56506: PUSH
56507: LD_INT 2
56509: PUSH
56510: EMPTY
56511: LIST
56512: LIST
56513: PUSH
56514: LD_INT 1
56516: PUSH
56517: LD_INT 2
56519: PUSH
56520: EMPTY
56521: LIST
56522: LIST
56523: PUSH
56524: LD_INT 0
56526: PUSH
56527: LD_INT 2
56529: PUSH
56530: EMPTY
56531: LIST
56532: LIST
56533: PUSH
56534: LD_INT 1
56536: NEG
56537: PUSH
56538: LD_INT 1
56540: PUSH
56541: EMPTY
56542: LIST
56543: LIST
56544: PUSH
56545: LD_INT 2
56547: NEG
56548: PUSH
56549: LD_INT 0
56551: PUSH
56552: EMPTY
56553: LIST
56554: LIST
56555: PUSH
56556: LD_INT 2
56558: NEG
56559: PUSH
56560: LD_INT 1
56562: NEG
56563: PUSH
56564: EMPTY
56565: LIST
56566: LIST
56567: PUSH
56568: LD_INT 2
56570: NEG
56571: PUSH
56572: LD_INT 2
56574: NEG
56575: PUSH
56576: EMPTY
56577: LIST
56578: LIST
56579: PUSH
56580: EMPTY
56581: LIST
56582: LIST
56583: LIST
56584: LIST
56585: LIST
56586: LIST
56587: LIST
56588: LIST
56589: LIST
56590: LIST
56591: LIST
56592: LIST
56593: LIST
56594: LIST
56595: LIST
56596: LIST
56597: LIST
56598: LIST
56599: LIST
56600: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56601: LD_ADDR_VAR 0 55
56605: PUSH
56606: LD_INT 0
56608: PUSH
56609: LD_INT 0
56611: PUSH
56612: EMPTY
56613: LIST
56614: LIST
56615: PUSH
56616: LD_INT 0
56618: PUSH
56619: LD_INT 1
56621: NEG
56622: PUSH
56623: EMPTY
56624: LIST
56625: LIST
56626: PUSH
56627: LD_INT 1
56629: PUSH
56630: LD_INT 0
56632: PUSH
56633: EMPTY
56634: LIST
56635: LIST
56636: PUSH
56637: LD_INT 1
56639: PUSH
56640: LD_INT 1
56642: PUSH
56643: EMPTY
56644: LIST
56645: LIST
56646: PUSH
56647: LD_INT 0
56649: PUSH
56650: LD_INT 1
56652: PUSH
56653: EMPTY
56654: LIST
56655: LIST
56656: PUSH
56657: LD_INT 1
56659: NEG
56660: PUSH
56661: LD_INT 0
56663: PUSH
56664: EMPTY
56665: LIST
56666: LIST
56667: PUSH
56668: LD_INT 1
56670: NEG
56671: PUSH
56672: LD_INT 1
56674: NEG
56675: PUSH
56676: EMPTY
56677: LIST
56678: LIST
56679: PUSH
56680: LD_INT 1
56682: NEG
56683: PUSH
56684: LD_INT 2
56686: NEG
56687: PUSH
56688: EMPTY
56689: LIST
56690: LIST
56691: PUSH
56692: LD_INT 0
56694: PUSH
56695: LD_INT 2
56697: NEG
56698: PUSH
56699: EMPTY
56700: LIST
56701: LIST
56702: PUSH
56703: LD_INT 1
56705: PUSH
56706: LD_INT 1
56708: NEG
56709: PUSH
56710: EMPTY
56711: LIST
56712: LIST
56713: PUSH
56714: LD_INT 2
56716: PUSH
56717: LD_INT 0
56719: PUSH
56720: EMPTY
56721: LIST
56722: LIST
56723: PUSH
56724: LD_INT 2
56726: PUSH
56727: LD_INT 1
56729: PUSH
56730: EMPTY
56731: LIST
56732: LIST
56733: PUSH
56734: LD_INT 2
56736: PUSH
56737: LD_INT 2
56739: PUSH
56740: EMPTY
56741: LIST
56742: LIST
56743: PUSH
56744: LD_INT 1
56746: PUSH
56747: LD_INT 2
56749: PUSH
56750: EMPTY
56751: LIST
56752: LIST
56753: PUSH
56754: LD_INT 0
56756: PUSH
56757: LD_INT 2
56759: PUSH
56760: EMPTY
56761: LIST
56762: LIST
56763: PUSH
56764: LD_INT 1
56766: NEG
56767: PUSH
56768: LD_INT 1
56770: PUSH
56771: EMPTY
56772: LIST
56773: LIST
56774: PUSH
56775: LD_INT 2
56777: NEG
56778: PUSH
56779: LD_INT 0
56781: PUSH
56782: EMPTY
56783: LIST
56784: LIST
56785: PUSH
56786: LD_INT 2
56788: NEG
56789: PUSH
56790: LD_INT 1
56792: NEG
56793: PUSH
56794: EMPTY
56795: LIST
56796: LIST
56797: PUSH
56798: LD_INT 2
56800: NEG
56801: PUSH
56802: LD_INT 2
56804: NEG
56805: PUSH
56806: EMPTY
56807: LIST
56808: LIST
56809: PUSH
56810: EMPTY
56811: LIST
56812: LIST
56813: LIST
56814: LIST
56815: LIST
56816: LIST
56817: LIST
56818: LIST
56819: LIST
56820: LIST
56821: LIST
56822: LIST
56823: LIST
56824: LIST
56825: LIST
56826: LIST
56827: LIST
56828: LIST
56829: LIST
56830: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56831: LD_ADDR_VAR 0 56
56835: PUSH
56836: LD_INT 0
56838: PUSH
56839: LD_INT 0
56841: PUSH
56842: EMPTY
56843: LIST
56844: LIST
56845: PUSH
56846: LD_INT 0
56848: PUSH
56849: LD_INT 1
56851: NEG
56852: PUSH
56853: EMPTY
56854: LIST
56855: LIST
56856: PUSH
56857: LD_INT 1
56859: PUSH
56860: LD_INT 0
56862: PUSH
56863: EMPTY
56864: LIST
56865: LIST
56866: PUSH
56867: LD_INT 1
56869: PUSH
56870: LD_INT 1
56872: PUSH
56873: EMPTY
56874: LIST
56875: LIST
56876: PUSH
56877: LD_INT 0
56879: PUSH
56880: LD_INT 1
56882: PUSH
56883: EMPTY
56884: LIST
56885: LIST
56886: PUSH
56887: LD_INT 1
56889: NEG
56890: PUSH
56891: LD_INT 0
56893: PUSH
56894: EMPTY
56895: LIST
56896: LIST
56897: PUSH
56898: LD_INT 1
56900: NEG
56901: PUSH
56902: LD_INT 1
56904: NEG
56905: PUSH
56906: EMPTY
56907: LIST
56908: LIST
56909: PUSH
56910: LD_INT 1
56912: NEG
56913: PUSH
56914: LD_INT 2
56916: NEG
56917: PUSH
56918: EMPTY
56919: LIST
56920: LIST
56921: PUSH
56922: LD_INT 0
56924: PUSH
56925: LD_INT 2
56927: NEG
56928: PUSH
56929: EMPTY
56930: LIST
56931: LIST
56932: PUSH
56933: LD_INT 1
56935: PUSH
56936: LD_INT 1
56938: NEG
56939: PUSH
56940: EMPTY
56941: LIST
56942: LIST
56943: PUSH
56944: LD_INT 2
56946: PUSH
56947: LD_INT 0
56949: PUSH
56950: EMPTY
56951: LIST
56952: LIST
56953: PUSH
56954: LD_INT 2
56956: PUSH
56957: LD_INT 1
56959: PUSH
56960: EMPTY
56961: LIST
56962: LIST
56963: PUSH
56964: LD_INT 2
56966: PUSH
56967: LD_INT 2
56969: PUSH
56970: EMPTY
56971: LIST
56972: LIST
56973: PUSH
56974: LD_INT 1
56976: PUSH
56977: LD_INT 2
56979: PUSH
56980: EMPTY
56981: LIST
56982: LIST
56983: PUSH
56984: LD_INT 0
56986: PUSH
56987: LD_INT 2
56989: PUSH
56990: EMPTY
56991: LIST
56992: LIST
56993: PUSH
56994: LD_INT 1
56996: NEG
56997: PUSH
56998: LD_INT 1
57000: PUSH
57001: EMPTY
57002: LIST
57003: LIST
57004: PUSH
57005: LD_INT 2
57007: NEG
57008: PUSH
57009: LD_INT 0
57011: PUSH
57012: EMPTY
57013: LIST
57014: LIST
57015: PUSH
57016: LD_INT 2
57018: NEG
57019: PUSH
57020: LD_INT 1
57022: NEG
57023: PUSH
57024: EMPTY
57025: LIST
57026: LIST
57027: PUSH
57028: LD_INT 2
57030: NEG
57031: PUSH
57032: LD_INT 2
57034: NEG
57035: PUSH
57036: EMPTY
57037: LIST
57038: LIST
57039: PUSH
57040: EMPTY
57041: LIST
57042: LIST
57043: LIST
57044: LIST
57045: LIST
57046: LIST
57047: LIST
57048: LIST
57049: LIST
57050: LIST
57051: LIST
57052: LIST
57053: LIST
57054: LIST
57055: LIST
57056: LIST
57057: LIST
57058: LIST
57059: LIST
57060: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57061: LD_ADDR_VAR 0 57
57065: PUSH
57066: LD_INT 0
57068: PUSH
57069: LD_INT 0
57071: PUSH
57072: EMPTY
57073: LIST
57074: LIST
57075: PUSH
57076: LD_INT 0
57078: PUSH
57079: LD_INT 1
57081: NEG
57082: PUSH
57083: EMPTY
57084: LIST
57085: LIST
57086: PUSH
57087: LD_INT 1
57089: PUSH
57090: LD_INT 0
57092: PUSH
57093: EMPTY
57094: LIST
57095: LIST
57096: PUSH
57097: LD_INT 1
57099: PUSH
57100: LD_INT 1
57102: PUSH
57103: EMPTY
57104: LIST
57105: LIST
57106: PUSH
57107: LD_INT 0
57109: PUSH
57110: LD_INT 1
57112: PUSH
57113: EMPTY
57114: LIST
57115: LIST
57116: PUSH
57117: LD_INT 1
57119: NEG
57120: PUSH
57121: LD_INT 0
57123: PUSH
57124: EMPTY
57125: LIST
57126: LIST
57127: PUSH
57128: LD_INT 1
57130: NEG
57131: PUSH
57132: LD_INT 1
57134: NEG
57135: PUSH
57136: EMPTY
57137: LIST
57138: LIST
57139: PUSH
57140: LD_INT 1
57142: NEG
57143: PUSH
57144: LD_INT 2
57146: NEG
57147: PUSH
57148: EMPTY
57149: LIST
57150: LIST
57151: PUSH
57152: LD_INT 0
57154: PUSH
57155: LD_INT 2
57157: NEG
57158: PUSH
57159: EMPTY
57160: LIST
57161: LIST
57162: PUSH
57163: LD_INT 1
57165: PUSH
57166: LD_INT 1
57168: NEG
57169: PUSH
57170: EMPTY
57171: LIST
57172: LIST
57173: PUSH
57174: LD_INT 2
57176: PUSH
57177: LD_INT 0
57179: PUSH
57180: EMPTY
57181: LIST
57182: LIST
57183: PUSH
57184: LD_INT 2
57186: PUSH
57187: LD_INT 1
57189: PUSH
57190: EMPTY
57191: LIST
57192: LIST
57193: PUSH
57194: LD_INT 2
57196: PUSH
57197: LD_INT 2
57199: PUSH
57200: EMPTY
57201: LIST
57202: LIST
57203: PUSH
57204: LD_INT 1
57206: PUSH
57207: LD_INT 2
57209: PUSH
57210: EMPTY
57211: LIST
57212: LIST
57213: PUSH
57214: LD_INT 0
57216: PUSH
57217: LD_INT 2
57219: PUSH
57220: EMPTY
57221: LIST
57222: LIST
57223: PUSH
57224: LD_INT 1
57226: NEG
57227: PUSH
57228: LD_INT 1
57230: PUSH
57231: EMPTY
57232: LIST
57233: LIST
57234: PUSH
57235: LD_INT 2
57237: NEG
57238: PUSH
57239: LD_INT 0
57241: PUSH
57242: EMPTY
57243: LIST
57244: LIST
57245: PUSH
57246: LD_INT 2
57248: NEG
57249: PUSH
57250: LD_INT 1
57252: NEG
57253: PUSH
57254: EMPTY
57255: LIST
57256: LIST
57257: PUSH
57258: LD_INT 2
57260: NEG
57261: PUSH
57262: LD_INT 2
57264: NEG
57265: PUSH
57266: EMPTY
57267: LIST
57268: LIST
57269: PUSH
57270: EMPTY
57271: LIST
57272: LIST
57273: LIST
57274: LIST
57275: LIST
57276: LIST
57277: LIST
57278: LIST
57279: LIST
57280: LIST
57281: LIST
57282: LIST
57283: LIST
57284: LIST
57285: LIST
57286: LIST
57287: LIST
57288: LIST
57289: LIST
57290: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57291: LD_ADDR_VAR 0 58
57295: PUSH
57296: LD_INT 0
57298: PUSH
57299: LD_INT 0
57301: PUSH
57302: EMPTY
57303: LIST
57304: LIST
57305: PUSH
57306: LD_INT 0
57308: PUSH
57309: LD_INT 1
57311: NEG
57312: PUSH
57313: EMPTY
57314: LIST
57315: LIST
57316: PUSH
57317: LD_INT 1
57319: PUSH
57320: LD_INT 0
57322: PUSH
57323: EMPTY
57324: LIST
57325: LIST
57326: PUSH
57327: LD_INT 1
57329: PUSH
57330: LD_INT 1
57332: PUSH
57333: EMPTY
57334: LIST
57335: LIST
57336: PUSH
57337: LD_INT 0
57339: PUSH
57340: LD_INT 1
57342: PUSH
57343: EMPTY
57344: LIST
57345: LIST
57346: PUSH
57347: LD_INT 1
57349: NEG
57350: PUSH
57351: LD_INT 0
57353: PUSH
57354: EMPTY
57355: LIST
57356: LIST
57357: PUSH
57358: LD_INT 1
57360: NEG
57361: PUSH
57362: LD_INT 1
57364: NEG
57365: PUSH
57366: EMPTY
57367: LIST
57368: LIST
57369: PUSH
57370: LD_INT 1
57372: NEG
57373: PUSH
57374: LD_INT 2
57376: NEG
57377: PUSH
57378: EMPTY
57379: LIST
57380: LIST
57381: PUSH
57382: LD_INT 0
57384: PUSH
57385: LD_INT 2
57387: NEG
57388: PUSH
57389: EMPTY
57390: LIST
57391: LIST
57392: PUSH
57393: LD_INT 1
57395: PUSH
57396: LD_INT 1
57398: NEG
57399: PUSH
57400: EMPTY
57401: LIST
57402: LIST
57403: PUSH
57404: LD_INT 2
57406: PUSH
57407: LD_INT 0
57409: PUSH
57410: EMPTY
57411: LIST
57412: LIST
57413: PUSH
57414: LD_INT 2
57416: PUSH
57417: LD_INT 1
57419: PUSH
57420: EMPTY
57421: LIST
57422: LIST
57423: PUSH
57424: LD_INT 2
57426: PUSH
57427: LD_INT 2
57429: PUSH
57430: EMPTY
57431: LIST
57432: LIST
57433: PUSH
57434: LD_INT 1
57436: PUSH
57437: LD_INT 2
57439: PUSH
57440: EMPTY
57441: LIST
57442: LIST
57443: PUSH
57444: LD_INT 0
57446: PUSH
57447: LD_INT 2
57449: PUSH
57450: EMPTY
57451: LIST
57452: LIST
57453: PUSH
57454: LD_INT 1
57456: NEG
57457: PUSH
57458: LD_INT 1
57460: PUSH
57461: EMPTY
57462: LIST
57463: LIST
57464: PUSH
57465: LD_INT 2
57467: NEG
57468: PUSH
57469: LD_INT 0
57471: PUSH
57472: EMPTY
57473: LIST
57474: LIST
57475: PUSH
57476: LD_INT 2
57478: NEG
57479: PUSH
57480: LD_INT 1
57482: NEG
57483: PUSH
57484: EMPTY
57485: LIST
57486: LIST
57487: PUSH
57488: LD_INT 2
57490: NEG
57491: PUSH
57492: LD_INT 2
57494: NEG
57495: PUSH
57496: EMPTY
57497: LIST
57498: LIST
57499: PUSH
57500: EMPTY
57501: LIST
57502: LIST
57503: LIST
57504: LIST
57505: LIST
57506: LIST
57507: LIST
57508: LIST
57509: LIST
57510: LIST
57511: LIST
57512: LIST
57513: LIST
57514: LIST
57515: LIST
57516: LIST
57517: LIST
57518: LIST
57519: LIST
57520: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57521: LD_ADDR_VAR 0 59
57525: PUSH
57526: LD_INT 0
57528: PUSH
57529: LD_INT 0
57531: PUSH
57532: EMPTY
57533: LIST
57534: LIST
57535: PUSH
57536: LD_INT 0
57538: PUSH
57539: LD_INT 1
57541: NEG
57542: PUSH
57543: EMPTY
57544: LIST
57545: LIST
57546: PUSH
57547: LD_INT 1
57549: PUSH
57550: LD_INT 0
57552: PUSH
57553: EMPTY
57554: LIST
57555: LIST
57556: PUSH
57557: LD_INT 1
57559: PUSH
57560: LD_INT 1
57562: PUSH
57563: EMPTY
57564: LIST
57565: LIST
57566: PUSH
57567: LD_INT 0
57569: PUSH
57570: LD_INT 1
57572: PUSH
57573: EMPTY
57574: LIST
57575: LIST
57576: PUSH
57577: LD_INT 1
57579: NEG
57580: PUSH
57581: LD_INT 0
57583: PUSH
57584: EMPTY
57585: LIST
57586: LIST
57587: PUSH
57588: LD_INT 1
57590: NEG
57591: PUSH
57592: LD_INT 1
57594: NEG
57595: PUSH
57596: EMPTY
57597: LIST
57598: LIST
57599: PUSH
57600: EMPTY
57601: LIST
57602: LIST
57603: LIST
57604: LIST
57605: LIST
57606: LIST
57607: LIST
57608: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57609: LD_ADDR_VAR 0 60
57613: PUSH
57614: LD_INT 0
57616: PUSH
57617: LD_INT 0
57619: PUSH
57620: EMPTY
57621: LIST
57622: LIST
57623: PUSH
57624: LD_INT 0
57626: PUSH
57627: LD_INT 1
57629: NEG
57630: PUSH
57631: EMPTY
57632: LIST
57633: LIST
57634: PUSH
57635: LD_INT 1
57637: PUSH
57638: LD_INT 0
57640: PUSH
57641: EMPTY
57642: LIST
57643: LIST
57644: PUSH
57645: LD_INT 1
57647: PUSH
57648: LD_INT 1
57650: PUSH
57651: EMPTY
57652: LIST
57653: LIST
57654: PUSH
57655: LD_INT 0
57657: PUSH
57658: LD_INT 1
57660: PUSH
57661: EMPTY
57662: LIST
57663: LIST
57664: PUSH
57665: LD_INT 1
57667: NEG
57668: PUSH
57669: LD_INT 0
57671: PUSH
57672: EMPTY
57673: LIST
57674: LIST
57675: PUSH
57676: LD_INT 1
57678: NEG
57679: PUSH
57680: LD_INT 1
57682: NEG
57683: PUSH
57684: EMPTY
57685: LIST
57686: LIST
57687: PUSH
57688: EMPTY
57689: LIST
57690: LIST
57691: LIST
57692: LIST
57693: LIST
57694: LIST
57695: LIST
57696: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57697: LD_ADDR_VAR 0 61
57701: PUSH
57702: LD_INT 0
57704: PUSH
57705: LD_INT 0
57707: PUSH
57708: EMPTY
57709: LIST
57710: LIST
57711: PUSH
57712: LD_INT 0
57714: PUSH
57715: LD_INT 1
57717: NEG
57718: PUSH
57719: EMPTY
57720: LIST
57721: LIST
57722: PUSH
57723: LD_INT 1
57725: PUSH
57726: LD_INT 0
57728: PUSH
57729: EMPTY
57730: LIST
57731: LIST
57732: PUSH
57733: LD_INT 1
57735: PUSH
57736: LD_INT 1
57738: PUSH
57739: EMPTY
57740: LIST
57741: LIST
57742: PUSH
57743: LD_INT 0
57745: PUSH
57746: LD_INT 1
57748: PUSH
57749: EMPTY
57750: LIST
57751: LIST
57752: PUSH
57753: LD_INT 1
57755: NEG
57756: PUSH
57757: LD_INT 0
57759: PUSH
57760: EMPTY
57761: LIST
57762: LIST
57763: PUSH
57764: LD_INT 1
57766: NEG
57767: PUSH
57768: LD_INT 1
57770: NEG
57771: PUSH
57772: EMPTY
57773: LIST
57774: LIST
57775: PUSH
57776: EMPTY
57777: LIST
57778: LIST
57779: LIST
57780: LIST
57781: LIST
57782: LIST
57783: LIST
57784: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57785: LD_ADDR_VAR 0 62
57789: PUSH
57790: LD_INT 0
57792: PUSH
57793: LD_INT 0
57795: PUSH
57796: EMPTY
57797: LIST
57798: LIST
57799: PUSH
57800: LD_INT 0
57802: PUSH
57803: LD_INT 1
57805: NEG
57806: PUSH
57807: EMPTY
57808: LIST
57809: LIST
57810: PUSH
57811: LD_INT 1
57813: PUSH
57814: LD_INT 0
57816: PUSH
57817: EMPTY
57818: LIST
57819: LIST
57820: PUSH
57821: LD_INT 1
57823: PUSH
57824: LD_INT 1
57826: PUSH
57827: EMPTY
57828: LIST
57829: LIST
57830: PUSH
57831: LD_INT 0
57833: PUSH
57834: LD_INT 1
57836: PUSH
57837: EMPTY
57838: LIST
57839: LIST
57840: PUSH
57841: LD_INT 1
57843: NEG
57844: PUSH
57845: LD_INT 0
57847: PUSH
57848: EMPTY
57849: LIST
57850: LIST
57851: PUSH
57852: LD_INT 1
57854: NEG
57855: PUSH
57856: LD_INT 1
57858: NEG
57859: PUSH
57860: EMPTY
57861: LIST
57862: LIST
57863: PUSH
57864: EMPTY
57865: LIST
57866: LIST
57867: LIST
57868: LIST
57869: LIST
57870: LIST
57871: LIST
57872: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57873: LD_ADDR_VAR 0 63
57877: PUSH
57878: LD_INT 0
57880: PUSH
57881: LD_INT 0
57883: PUSH
57884: EMPTY
57885: LIST
57886: LIST
57887: PUSH
57888: LD_INT 0
57890: PUSH
57891: LD_INT 1
57893: NEG
57894: PUSH
57895: EMPTY
57896: LIST
57897: LIST
57898: PUSH
57899: LD_INT 1
57901: PUSH
57902: LD_INT 0
57904: PUSH
57905: EMPTY
57906: LIST
57907: LIST
57908: PUSH
57909: LD_INT 1
57911: PUSH
57912: LD_INT 1
57914: PUSH
57915: EMPTY
57916: LIST
57917: LIST
57918: PUSH
57919: LD_INT 0
57921: PUSH
57922: LD_INT 1
57924: PUSH
57925: EMPTY
57926: LIST
57927: LIST
57928: PUSH
57929: LD_INT 1
57931: NEG
57932: PUSH
57933: LD_INT 0
57935: PUSH
57936: EMPTY
57937: LIST
57938: LIST
57939: PUSH
57940: LD_INT 1
57942: NEG
57943: PUSH
57944: LD_INT 1
57946: NEG
57947: PUSH
57948: EMPTY
57949: LIST
57950: LIST
57951: PUSH
57952: EMPTY
57953: LIST
57954: LIST
57955: LIST
57956: LIST
57957: LIST
57958: LIST
57959: LIST
57960: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57961: LD_ADDR_VAR 0 64
57965: PUSH
57966: LD_INT 0
57968: PUSH
57969: LD_INT 0
57971: PUSH
57972: EMPTY
57973: LIST
57974: LIST
57975: PUSH
57976: LD_INT 0
57978: PUSH
57979: LD_INT 1
57981: NEG
57982: PUSH
57983: EMPTY
57984: LIST
57985: LIST
57986: PUSH
57987: LD_INT 1
57989: PUSH
57990: LD_INT 0
57992: PUSH
57993: EMPTY
57994: LIST
57995: LIST
57996: PUSH
57997: LD_INT 1
57999: PUSH
58000: LD_INT 1
58002: PUSH
58003: EMPTY
58004: LIST
58005: LIST
58006: PUSH
58007: LD_INT 0
58009: PUSH
58010: LD_INT 1
58012: PUSH
58013: EMPTY
58014: LIST
58015: LIST
58016: PUSH
58017: LD_INT 1
58019: NEG
58020: PUSH
58021: LD_INT 0
58023: PUSH
58024: EMPTY
58025: LIST
58026: LIST
58027: PUSH
58028: LD_INT 1
58030: NEG
58031: PUSH
58032: LD_INT 1
58034: NEG
58035: PUSH
58036: EMPTY
58037: LIST
58038: LIST
58039: PUSH
58040: EMPTY
58041: LIST
58042: LIST
58043: LIST
58044: LIST
58045: LIST
58046: LIST
58047: LIST
58048: ST_TO_ADDR
// end ; 1 :
58049: GO 63946
58051: LD_INT 1
58053: DOUBLE
58054: EQUAL
58055: IFTRUE 58059
58057: GO 60682
58059: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
58060: LD_ADDR_VAR 0 11
58064: PUSH
58065: LD_INT 1
58067: NEG
58068: PUSH
58069: LD_INT 3
58071: NEG
58072: PUSH
58073: EMPTY
58074: LIST
58075: LIST
58076: PUSH
58077: LD_INT 0
58079: PUSH
58080: LD_INT 3
58082: NEG
58083: PUSH
58084: EMPTY
58085: LIST
58086: LIST
58087: PUSH
58088: LD_INT 1
58090: PUSH
58091: LD_INT 2
58093: NEG
58094: PUSH
58095: EMPTY
58096: LIST
58097: LIST
58098: PUSH
58099: EMPTY
58100: LIST
58101: LIST
58102: LIST
58103: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
58104: LD_ADDR_VAR 0 12
58108: PUSH
58109: LD_INT 2
58111: PUSH
58112: LD_INT 1
58114: NEG
58115: PUSH
58116: EMPTY
58117: LIST
58118: LIST
58119: PUSH
58120: LD_INT 3
58122: PUSH
58123: LD_INT 0
58125: PUSH
58126: EMPTY
58127: LIST
58128: LIST
58129: PUSH
58130: LD_INT 3
58132: PUSH
58133: LD_INT 1
58135: PUSH
58136: EMPTY
58137: LIST
58138: LIST
58139: PUSH
58140: EMPTY
58141: LIST
58142: LIST
58143: LIST
58144: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
58145: LD_ADDR_VAR 0 13
58149: PUSH
58150: LD_INT 3
58152: PUSH
58153: LD_INT 2
58155: PUSH
58156: EMPTY
58157: LIST
58158: LIST
58159: PUSH
58160: LD_INT 3
58162: PUSH
58163: LD_INT 3
58165: PUSH
58166: EMPTY
58167: LIST
58168: LIST
58169: PUSH
58170: LD_INT 2
58172: PUSH
58173: LD_INT 3
58175: PUSH
58176: EMPTY
58177: LIST
58178: LIST
58179: PUSH
58180: EMPTY
58181: LIST
58182: LIST
58183: LIST
58184: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
58185: LD_ADDR_VAR 0 14
58189: PUSH
58190: LD_INT 1
58192: PUSH
58193: LD_INT 3
58195: PUSH
58196: EMPTY
58197: LIST
58198: LIST
58199: PUSH
58200: LD_INT 0
58202: PUSH
58203: LD_INT 3
58205: PUSH
58206: EMPTY
58207: LIST
58208: LIST
58209: PUSH
58210: LD_INT 1
58212: NEG
58213: PUSH
58214: LD_INT 2
58216: PUSH
58217: EMPTY
58218: LIST
58219: LIST
58220: PUSH
58221: EMPTY
58222: LIST
58223: LIST
58224: LIST
58225: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58226: LD_ADDR_VAR 0 15
58230: PUSH
58231: LD_INT 2
58233: NEG
58234: PUSH
58235: LD_INT 1
58237: PUSH
58238: EMPTY
58239: LIST
58240: LIST
58241: PUSH
58242: LD_INT 3
58244: NEG
58245: PUSH
58246: LD_INT 0
58248: PUSH
58249: EMPTY
58250: LIST
58251: LIST
58252: PUSH
58253: LD_INT 3
58255: NEG
58256: PUSH
58257: LD_INT 1
58259: NEG
58260: PUSH
58261: EMPTY
58262: LIST
58263: LIST
58264: PUSH
58265: EMPTY
58266: LIST
58267: LIST
58268: LIST
58269: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58270: LD_ADDR_VAR 0 16
58274: PUSH
58275: LD_INT 2
58277: NEG
58278: PUSH
58279: LD_INT 3
58281: NEG
58282: PUSH
58283: EMPTY
58284: LIST
58285: LIST
58286: PUSH
58287: LD_INT 3
58289: NEG
58290: PUSH
58291: LD_INT 2
58293: NEG
58294: PUSH
58295: EMPTY
58296: LIST
58297: LIST
58298: PUSH
58299: LD_INT 3
58301: NEG
58302: PUSH
58303: LD_INT 3
58305: NEG
58306: PUSH
58307: EMPTY
58308: LIST
58309: LIST
58310: PUSH
58311: EMPTY
58312: LIST
58313: LIST
58314: LIST
58315: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
58316: LD_ADDR_VAR 0 17
58320: PUSH
58321: LD_INT 1
58323: NEG
58324: PUSH
58325: LD_INT 3
58327: NEG
58328: PUSH
58329: EMPTY
58330: LIST
58331: LIST
58332: PUSH
58333: LD_INT 0
58335: PUSH
58336: LD_INT 3
58338: NEG
58339: PUSH
58340: EMPTY
58341: LIST
58342: LIST
58343: PUSH
58344: LD_INT 1
58346: PUSH
58347: LD_INT 2
58349: NEG
58350: PUSH
58351: EMPTY
58352: LIST
58353: LIST
58354: PUSH
58355: EMPTY
58356: LIST
58357: LIST
58358: LIST
58359: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
58360: LD_ADDR_VAR 0 18
58364: PUSH
58365: LD_INT 2
58367: PUSH
58368: LD_INT 1
58370: NEG
58371: PUSH
58372: EMPTY
58373: LIST
58374: LIST
58375: PUSH
58376: LD_INT 3
58378: PUSH
58379: LD_INT 0
58381: PUSH
58382: EMPTY
58383: LIST
58384: LIST
58385: PUSH
58386: LD_INT 3
58388: PUSH
58389: LD_INT 1
58391: PUSH
58392: EMPTY
58393: LIST
58394: LIST
58395: PUSH
58396: EMPTY
58397: LIST
58398: LIST
58399: LIST
58400: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
58401: LD_ADDR_VAR 0 19
58405: PUSH
58406: LD_INT 3
58408: PUSH
58409: LD_INT 2
58411: PUSH
58412: EMPTY
58413: LIST
58414: LIST
58415: PUSH
58416: LD_INT 3
58418: PUSH
58419: LD_INT 3
58421: PUSH
58422: EMPTY
58423: LIST
58424: LIST
58425: PUSH
58426: LD_INT 2
58428: PUSH
58429: LD_INT 3
58431: PUSH
58432: EMPTY
58433: LIST
58434: LIST
58435: PUSH
58436: EMPTY
58437: LIST
58438: LIST
58439: LIST
58440: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
58441: LD_ADDR_VAR 0 20
58445: PUSH
58446: LD_INT 1
58448: PUSH
58449: LD_INT 3
58451: PUSH
58452: EMPTY
58453: LIST
58454: LIST
58455: PUSH
58456: LD_INT 0
58458: PUSH
58459: LD_INT 3
58461: PUSH
58462: EMPTY
58463: LIST
58464: LIST
58465: PUSH
58466: LD_INT 1
58468: NEG
58469: PUSH
58470: LD_INT 2
58472: PUSH
58473: EMPTY
58474: LIST
58475: LIST
58476: PUSH
58477: EMPTY
58478: LIST
58479: LIST
58480: LIST
58481: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58482: LD_ADDR_VAR 0 21
58486: PUSH
58487: LD_INT 2
58489: NEG
58490: PUSH
58491: LD_INT 1
58493: PUSH
58494: EMPTY
58495: LIST
58496: LIST
58497: PUSH
58498: LD_INT 3
58500: NEG
58501: PUSH
58502: LD_INT 0
58504: PUSH
58505: EMPTY
58506: LIST
58507: LIST
58508: PUSH
58509: LD_INT 3
58511: NEG
58512: PUSH
58513: LD_INT 1
58515: NEG
58516: PUSH
58517: EMPTY
58518: LIST
58519: LIST
58520: PUSH
58521: EMPTY
58522: LIST
58523: LIST
58524: LIST
58525: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58526: LD_ADDR_VAR 0 22
58530: PUSH
58531: LD_INT 2
58533: NEG
58534: PUSH
58535: LD_INT 3
58537: NEG
58538: PUSH
58539: EMPTY
58540: LIST
58541: LIST
58542: PUSH
58543: LD_INT 3
58545: NEG
58546: PUSH
58547: LD_INT 2
58549: NEG
58550: PUSH
58551: EMPTY
58552: LIST
58553: LIST
58554: PUSH
58555: LD_INT 3
58557: NEG
58558: PUSH
58559: LD_INT 3
58561: NEG
58562: PUSH
58563: EMPTY
58564: LIST
58565: LIST
58566: PUSH
58567: EMPTY
58568: LIST
58569: LIST
58570: LIST
58571: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
58572: LD_ADDR_VAR 0 23
58576: PUSH
58577: LD_INT 0
58579: PUSH
58580: LD_INT 3
58582: NEG
58583: PUSH
58584: EMPTY
58585: LIST
58586: LIST
58587: PUSH
58588: LD_INT 1
58590: NEG
58591: PUSH
58592: LD_INT 4
58594: NEG
58595: PUSH
58596: EMPTY
58597: LIST
58598: LIST
58599: PUSH
58600: LD_INT 1
58602: PUSH
58603: LD_INT 3
58605: NEG
58606: PUSH
58607: EMPTY
58608: LIST
58609: LIST
58610: PUSH
58611: EMPTY
58612: LIST
58613: LIST
58614: LIST
58615: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
58616: LD_ADDR_VAR 0 24
58620: PUSH
58621: LD_INT 3
58623: PUSH
58624: LD_INT 0
58626: PUSH
58627: EMPTY
58628: LIST
58629: LIST
58630: PUSH
58631: LD_INT 3
58633: PUSH
58634: LD_INT 1
58636: NEG
58637: PUSH
58638: EMPTY
58639: LIST
58640: LIST
58641: PUSH
58642: LD_INT 4
58644: PUSH
58645: LD_INT 1
58647: PUSH
58648: EMPTY
58649: LIST
58650: LIST
58651: PUSH
58652: EMPTY
58653: LIST
58654: LIST
58655: LIST
58656: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
58657: LD_ADDR_VAR 0 25
58661: PUSH
58662: LD_INT 3
58664: PUSH
58665: LD_INT 3
58667: PUSH
58668: EMPTY
58669: LIST
58670: LIST
58671: PUSH
58672: LD_INT 4
58674: PUSH
58675: LD_INT 3
58677: PUSH
58678: EMPTY
58679: LIST
58680: LIST
58681: PUSH
58682: LD_INT 3
58684: PUSH
58685: LD_INT 4
58687: PUSH
58688: EMPTY
58689: LIST
58690: LIST
58691: PUSH
58692: EMPTY
58693: LIST
58694: LIST
58695: LIST
58696: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
58697: LD_ADDR_VAR 0 26
58701: PUSH
58702: LD_INT 0
58704: PUSH
58705: LD_INT 3
58707: PUSH
58708: EMPTY
58709: LIST
58710: LIST
58711: PUSH
58712: LD_INT 1
58714: PUSH
58715: LD_INT 4
58717: PUSH
58718: EMPTY
58719: LIST
58720: LIST
58721: PUSH
58722: LD_INT 1
58724: NEG
58725: PUSH
58726: LD_INT 3
58728: PUSH
58729: EMPTY
58730: LIST
58731: LIST
58732: PUSH
58733: EMPTY
58734: LIST
58735: LIST
58736: LIST
58737: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
58738: LD_ADDR_VAR 0 27
58742: PUSH
58743: LD_INT 3
58745: NEG
58746: PUSH
58747: LD_INT 0
58749: PUSH
58750: EMPTY
58751: LIST
58752: LIST
58753: PUSH
58754: LD_INT 3
58756: NEG
58757: PUSH
58758: LD_INT 1
58760: PUSH
58761: EMPTY
58762: LIST
58763: LIST
58764: PUSH
58765: LD_INT 4
58767: NEG
58768: PUSH
58769: LD_INT 1
58771: NEG
58772: PUSH
58773: EMPTY
58774: LIST
58775: LIST
58776: PUSH
58777: EMPTY
58778: LIST
58779: LIST
58780: LIST
58781: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
58782: LD_ADDR_VAR 0 28
58786: PUSH
58787: LD_INT 3
58789: NEG
58790: PUSH
58791: LD_INT 3
58793: NEG
58794: PUSH
58795: EMPTY
58796: LIST
58797: LIST
58798: PUSH
58799: LD_INT 3
58801: NEG
58802: PUSH
58803: LD_INT 4
58805: NEG
58806: PUSH
58807: EMPTY
58808: LIST
58809: LIST
58810: PUSH
58811: LD_INT 4
58813: NEG
58814: PUSH
58815: LD_INT 3
58817: NEG
58818: PUSH
58819: EMPTY
58820: LIST
58821: LIST
58822: PUSH
58823: EMPTY
58824: LIST
58825: LIST
58826: LIST
58827: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
58828: LD_ADDR_VAR 0 29
58832: PUSH
58833: LD_INT 1
58835: NEG
58836: PUSH
58837: LD_INT 3
58839: NEG
58840: PUSH
58841: EMPTY
58842: LIST
58843: LIST
58844: PUSH
58845: LD_INT 0
58847: PUSH
58848: LD_INT 3
58850: NEG
58851: PUSH
58852: EMPTY
58853: LIST
58854: LIST
58855: PUSH
58856: LD_INT 1
58858: PUSH
58859: LD_INT 2
58861: NEG
58862: PUSH
58863: EMPTY
58864: LIST
58865: LIST
58866: PUSH
58867: LD_INT 1
58869: NEG
58870: PUSH
58871: LD_INT 4
58873: NEG
58874: PUSH
58875: EMPTY
58876: LIST
58877: LIST
58878: PUSH
58879: LD_INT 0
58881: PUSH
58882: LD_INT 4
58884: NEG
58885: PUSH
58886: EMPTY
58887: LIST
58888: LIST
58889: PUSH
58890: LD_INT 1
58892: PUSH
58893: LD_INT 3
58895: NEG
58896: PUSH
58897: EMPTY
58898: LIST
58899: LIST
58900: PUSH
58901: LD_INT 1
58903: NEG
58904: PUSH
58905: LD_INT 5
58907: NEG
58908: PUSH
58909: EMPTY
58910: LIST
58911: LIST
58912: PUSH
58913: LD_INT 0
58915: PUSH
58916: LD_INT 5
58918: NEG
58919: PUSH
58920: EMPTY
58921: LIST
58922: LIST
58923: PUSH
58924: LD_INT 1
58926: PUSH
58927: LD_INT 4
58929: NEG
58930: PUSH
58931: EMPTY
58932: LIST
58933: LIST
58934: PUSH
58935: LD_INT 1
58937: NEG
58938: PUSH
58939: LD_INT 6
58941: NEG
58942: PUSH
58943: EMPTY
58944: LIST
58945: LIST
58946: PUSH
58947: LD_INT 0
58949: PUSH
58950: LD_INT 6
58952: NEG
58953: PUSH
58954: EMPTY
58955: LIST
58956: LIST
58957: PUSH
58958: LD_INT 1
58960: PUSH
58961: LD_INT 5
58963: NEG
58964: PUSH
58965: EMPTY
58966: LIST
58967: LIST
58968: PUSH
58969: EMPTY
58970: LIST
58971: LIST
58972: LIST
58973: LIST
58974: LIST
58975: LIST
58976: LIST
58977: LIST
58978: LIST
58979: LIST
58980: LIST
58981: LIST
58982: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
58983: LD_ADDR_VAR 0 30
58987: PUSH
58988: LD_INT 2
58990: PUSH
58991: LD_INT 1
58993: NEG
58994: PUSH
58995: EMPTY
58996: LIST
58997: LIST
58998: PUSH
58999: LD_INT 3
59001: PUSH
59002: LD_INT 0
59004: PUSH
59005: EMPTY
59006: LIST
59007: LIST
59008: PUSH
59009: LD_INT 3
59011: PUSH
59012: LD_INT 1
59014: PUSH
59015: EMPTY
59016: LIST
59017: LIST
59018: PUSH
59019: LD_INT 3
59021: PUSH
59022: LD_INT 1
59024: NEG
59025: PUSH
59026: EMPTY
59027: LIST
59028: LIST
59029: PUSH
59030: LD_INT 4
59032: PUSH
59033: LD_INT 0
59035: PUSH
59036: EMPTY
59037: LIST
59038: LIST
59039: PUSH
59040: LD_INT 4
59042: PUSH
59043: LD_INT 1
59045: PUSH
59046: EMPTY
59047: LIST
59048: LIST
59049: PUSH
59050: LD_INT 4
59052: PUSH
59053: LD_INT 1
59055: NEG
59056: PUSH
59057: EMPTY
59058: LIST
59059: LIST
59060: PUSH
59061: LD_INT 5
59063: PUSH
59064: LD_INT 0
59066: PUSH
59067: EMPTY
59068: LIST
59069: LIST
59070: PUSH
59071: LD_INT 5
59073: PUSH
59074: LD_INT 1
59076: PUSH
59077: EMPTY
59078: LIST
59079: LIST
59080: PUSH
59081: LD_INT 5
59083: PUSH
59084: LD_INT 1
59086: NEG
59087: PUSH
59088: EMPTY
59089: LIST
59090: LIST
59091: PUSH
59092: LD_INT 6
59094: PUSH
59095: LD_INT 0
59097: PUSH
59098: EMPTY
59099: LIST
59100: LIST
59101: PUSH
59102: LD_INT 6
59104: PUSH
59105: LD_INT 1
59107: PUSH
59108: EMPTY
59109: LIST
59110: LIST
59111: PUSH
59112: EMPTY
59113: LIST
59114: LIST
59115: LIST
59116: LIST
59117: LIST
59118: LIST
59119: LIST
59120: LIST
59121: LIST
59122: LIST
59123: LIST
59124: LIST
59125: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
59126: LD_ADDR_VAR 0 31
59130: PUSH
59131: LD_INT 3
59133: PUSH
59134: LD_INT 2
59136: PUSH
59137: EMPTY
59138: LIST
59139: LIST
59140: PUSH
59141: LD_INT 3
59143: PUSH
59144: LD_INT 3
59146: PUSH
59147: EMPTY
59148: LIST
59149: LIST
59150: PUSH
59151: LD_INT 2
59153: PUSH
59154: LD_INT 3
59156: PUSH
59157: EMPTY
59158: LIST
59159: LIST
59160: PUSH
59161: LD_INT 4
59163: PUSH
59164: LD_INT 3
59166: PUSH
59167: EMPTY
59168: LIST
59169: LIST
59170: PUSH
59171: LD_INT 4
59173: PUSH
59174: LD_INT 4
59176: PUSH
59177: EMPTY
59178: LIST
59179: LIST
59180: PUSH
59181: LD_INT 3
59183: PUSH
59184: LD_INT 4
59186: PUSH
59187: EMPTY
59188: LIST
59189: LIST
59190: PUSH
59191: LD_INT 5
59193: PUSH
59194: LD_INT 4
59196: PUSH
59197: EMPTY
59198: LIST
59199: LIST
59200: PUSH
59201: LD_INT 5
59203: PUSH
59204: LD_INT 5
59206: PUSH
59207: EMPTY
59208: LIST
59209: LIST
59210: PUSH
59211: LD_INT 4
59213: PUSH
59214: LD_INT 5
59216: PUSH
59217: EMPTY
59218: LIST
59219: LIST
59220: PUSH
59221: LD_INT 6
59223: PUSH
59224: LD_INT 5
59226: PUSH
59227: EMPTY
59228: LIST
59229: LIST
59230: PUSH
59231: LD_INT 6
59233: PUSH
59234: LD_INT 6
59236: PUSH
59237: EMPTY
59238: LIST
59239: LIST
59240: PUSH
59241: LD_INT 5
59243: PUSH
59244: LD_INT 6
59246: PUSH
59247: EMPTY
59248: LIST
59249: LIST
59250: PUSH
59251: EMPTY
59252: LIST
59253: LIST
59254: LIST
59255: LIST
59256: LIST
59257: LIST
59258: LIST
59259: LIST
59260: LIST
59261: LIST
59262: LIST
59263: LIST
59264: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
59265: LD_ADDR_VAR 0 32
59269: PUSH
59270: LD_INT 1
59272: PUSH
59273: LD_INT 3
59275: PUSH
59276: EMPTY
59277: LIST
59278: LIST
59279: PUSH
59280: LD_INT 0
59282: PUSH
59283: LD_INT 3
59285: PUSH
59286: EMPTY
59287: LIST
59288: LIST
59289: PUSH
59290: LD_INT 1
59292: NEG
59293: PUSH
59294: LD_INT 2
59296: PUSH
59297: EMPTY
59298: LIST
59299: LIST
59300: PUSH
59301: LD_INT 1
59303: PUSH
59304: LD_INT 4
59306: PUSH
59307: EMPTY
59308: LIST
59309: LIST
59310: PUSH
59311: LD_INT 0
59313: PUSH
59314: LD_INT 4
59316: PUSH
59317: EMPTY
59318: LIST
59319: LIST
59320: PUSH
59321: LD_INT 1
59323: NEG
59324: PUSH
59325: LD_INT 3
59327: PUSH
59328: EMPTY
59329: LIST
59330: LIST
59331: PUSH
59332: LD_INT 1
59334: PUSH
59335: LD_INT 5
59337: PUSH
59338: EMPTY
59339: LIST
59340: LIST
59341: PUSH
59342: LD_INT 0
59344: PUSH
59345: LD_INT 5
59347: PUSH
59348: EMPTY
59349: LIST
59350: LIST
59351: PUSH
59352: LD_INT 1
59354: NEG
59355: PUSH
59356: LD_INT 4
59358: PUSH
59359: EMPTY
59360: LIST
59361: LIST
59362: PUSH
59363: LD_INT 1
59365: PUSH
59366: LD_INT 6
59368: PUSH
59369: EMPTY
59370: LIST
59371: LIST
59372: PUSH
59373: LD_INT 0
59375: PUSH
59376: LD_INT 6
59378: PUSH
59379: EMPTY
59380: LIST
59381: LIST
59382: PUSH
59383: LD_INT 1
59385: NEG
59386: PUSH
59387: LD_INT 5
59389: PUSH
59390: EMPTY
59391: LIST
59392: LIST
59393: PUSH
59394: EMPTY
59395: LIST
59396: LIST
59397: LIST
59398: LIST
59399: LIST
59400: LIST
59401: LIST
59402: LIST
59403: LIST
59404: LIST
59405: LIST
59406: LIST
59407: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
59408: LD_ADDR_VAR 0 33
59412: PUSH
59413: LD_INT 2
59415: NEG
59416: PUSH
59417: LD_INT 1
59419: PUSH
59420: EMPTY
59421: LIST
59422: LIST
59423: PUSH
59424: LD_INT 3
59426: NEG
59427: PUSH
59428: LD_INT 0
59430: PUSH
59431: EMPTY
59432: LIST
59433: LIST
59434: PUSH
59435: LD_INT 3
59437: NEG
59438: PUSH
59439: LD_INT 1
59441: NEG
59442: PUSH
59443: EMPTY
59444: LIST
59445: LIST
59446: PUSH
59447: LD_INT 3
59449: NEG
59450: PUSH
59451: LD_INT 1
59453: PUSH
59454: EMPTY
59455: LIST
59456: LIST
59457: PUSH
59458: LD_INT 4
59460: NEG
59461: PUSH
59462: LD_INT 0
59464: PUSH
59465: EMPTY
59466: LIST
59467: LIST
59468: PUSH
59469: LD_INT 4
59471: NEG
59472: PUSH
59473: LD_INT 1
59475: NEG
59476: PUSH
59477: EMPTY
59478: LIST
59479: LIST
59480: PUSH
59481: LD_INT 4
59483: NEG
59484: PUSH
59485: LD_INT 1
59487: PUSH
59488: EMPTY
59489: LIST
59490: LIST
59491: PUSH
59492: LD_INT 5
59494: NEG
59495: PUSH
59496: LD_INT 0
59498: PUSH
59499: EMPTY
59500: LIST
59501: LIST
59502: PUSH
59503: LD_INT 5
59505: NEG
59506: PUSH
59507: LD_INT 1
59509: NEG
59510: PUSH
59511: EMPTY
59512: LIST
59513: LIST
59514: PUSH
59515: LD_INT 5
59517: NEG
59518: PUSH
59519: LD_INT 1
59521: PUSH
59522: EMPTY
59523: LIST
59524: LIST
59525: PUSH
59526: LD_INT 6
59528: NEG
59529: PUSH
59530: LD_INT 0
59532: PUSH
59533: EMPTY
59534: LIST
59535: LIST
59536: PUSH
59537: LD_INT 6
59539: NEG
59540: PUSH
59541: LD_INT 1
59543: NEG
59544: PUSH
59545: EMPTY
59546: LIST
59547: LIST
59548: PUSH
59549: EMPTY
59550: LIST
59551: LIST
59552: LIST
59553: LIST
59554: LIST
59555: LIST
59556: LIST
59557: LIST
59558: LIST
59559: LIST
59560: LIST
59561: LIST
59562: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
59563: LD_ADDR_VAR 0 34
59567: PUSH
59568: LD_INT 2
59570: NEG
59571: PUSH
59572: LD_INT 3
59574: NEG
59575: PUSH
59576: EMPTY
59577: LIST
59578: LIST
59579: PUSH
59580: LD_INT 3
59582: NEG
59583: PUSH
59584: LD_INT 2
59586: NEG
59587: PUSH
59588: EMPTY
59589: LIST
59590: LIST
59591: PUSH
59592: LD_INT 3
59594: NEG
59595: PUSH
59596: LD_INT 3
59598: NEG
59599: PUSH
59600: EMPTY
59601: LIST
59602: LIST
59603: PUSH
59604: LD_INT 3
59606: NEG
59607: PUSH
59608: LD_INT 4
59610: NEG
59611: PUSH
59612: EMPTY
59613: LIST
59614: LIST
59615: PUSH
59616: LD_INT 4
59618: NEG
59619: PUSH
59620: LD_INT 3
59622: NEG
59623: PUSH
59624: EMPTY
59625: LIST
59626: LIST
59627: PUSH
59628: LD_INT 4
59630: NEG
59631: PUSH
59632: LD_INT 4
59634: NEG
59635: PUSH
59636: EMPTY
59637: LIST
59638: LIST
59639: PUSH
59640: LD_INT 4
59642: NEG
59643: PUSH
59644: LD_INT 5
59646: NEG
59647: PUSH
59648: EMPTY
59649: LIST
59650: LIST
59651: PUSH
59652: LD_INT 5
59654: NEG
59655: PUSH
59656: LD_INT 4
59658: NEG
59659: PUSH
59660: EMPTY
59661: LIST
59662: LIST
59663: PUSH
59664: LD_INT 5
59666: NEG
59667: PUSH
59668: LD_INT 5
59670: NEG
59671: PUSH
59672: EMPTY
59673: LIST
59674: LIST
59675: PUSH
59676: LD_INT 5
59678: NEG
59679: PUSH
59680: LD_INT 6
59682: NEG
59683: PUSH
59684: EMPTY
59685: LIST
59686: LIST
59687: PUSH
59688: LD_INT 6
59690: NEG
59691: PUSH
59692: LD_INT 5
59694: NEG
59695: PUSH
59696: EMPTY
59697: LIST
59698: LIST
59699: PUSH
59700: LD_INT 6
59702: NEG
59703: PUSH
59704: LD_INT 6
59706: NEG
59707: PUSH
59708: EMPTY
59709: LIST
59710: LIST
59711: PUSH
59712: EMPTY
59713: LIST
59714: LIST
59715: LIST
59716: LIST
59717: LIST
59718: LIST
59719: LIST
59720: LIST
59721: LIST
59722: LIST
59723: LIST
59724: LIST
59725: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
59726: LD_ADDR_VAR 0 41
59730: PUSH
59731: LD_INT 0
59733: PUSH
59734: LD_INT 2
59736: NEG
59737: PUSH
59738: EMPTY
59739: LIST
59740: LIST
59741: PUSH
59742: LD_INT 1
59744: NEG
59745: PUSH
59746: LD_INT 3
59748: NEG
59749: PUSH
59750: EMPTY
59751: LIST
59752: LIST
59753: PUSH
59754: LD_INT 1
59756: PUSH
59757: LD_INT 2
59759: NEG
59760: PUSH
59761: EMPTY
59762: LIST
59763: LIST
59764: PUSH
59765: EMPTY
59766: LIST
59767: LIST
59768: LIST
59769: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
59770: LD_ADDR_VAR 0 42
59774: PUSH
59775: LD_INT 2
59777: PUSH
59778: LD_INT 0
59780: PUSH
59781: EMPTY
59782: LIST
59783: LIST
59784: PUSH
59785: LD_INT 2
59787: PUSH
59788: LD_INT 1
59790: NEG
59791: PUSH
59792: EMPTY
59793: LIST
59794: LIST
59795: PUSH
59796: LD_INT 3
59798: PUSH
59799: LD_INT 1
59801: PUSH
59802: EMPTY
59803: LIST
59804: LIST
59805: PUSH
59806: EMPTY
59807: LIST
59808: LIST
59809: LIST
59810: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
59811: LD_ADDR_VAR 0 43
59815: PUSH
59816: LD_INT 2
59818: PUSH
59819: LD_INT 2
59821: PUSH
59822: EMPTY
59823: LIST
59824: LIST
59825: PUSH
59826: LD_INT 3
59828: PUSH
59829: LD_INT 2
59831: PUSH
59832: EMPTY
59833: LIST
59834: LIST
59835: PUSH
59836: LD_INT 2
59838: PUSH
59839: LD_INT 3
59841: PUSH
59842: EMPTY
59843: LIST
59844: LIST
59845: PUSH
59846: EMPTY
59847: LIST
59848: LIST
59849: LIST
59850: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
59851: LD_ADDR_VAR 0 44
59855: PUSH
59856: LD_INT 0
59858: PUSH
59859: LD_INT 2
59861: PUSH
59862: EMPTY
59863: LIST
59864: LIST
59865: PUSH
59866: LD_INT 1
59868: PUSH
59869: LD_INT 3
59871: PUSH
59872: EMPTY
59873: LIST
59874: LIST
59875: PUSH
59876: LD_INT 1
59878: NEG
59879: PUSH
59880: LD_INT 2
59882: PUSH
59883: EMPTY
59884: LIST
59885: LIST
59886: PUSH
59887: EMPTY
59888: LIST
59889: LIST
59890: LIST
59891: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
59892: LD_ADDR_VAR 0 45
59896: PUSH
59897: LD_INT 2
59899: NEG
59900: PUSH
59901: LD_INT 0
59903: PUSH
59904: EMPTY
59905: LIST
59906: LIST
59907: PUSH
59908: LD_INT 2
59910: NEG
59911: PUSH
59912: LD_INT 1
59914: PUSH
59915: EMPTY
59916: LIST
59917: LIST
59918: PUSH
59919: LD_INT 3
59921: NEG
59922: PUSH
59923: LD_INT 1
59925: NEG
59926: PUSH
59927: EMPTY
59928: LIST
59929: LIST
59930: PUSH
59931: EMPTY
59932: LIST
59933: LIST
59934: LIST
59935: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
59936: LD_ADDR_VAR 0 46
59940: PUSH
59941: LD_INT 2
59943: NEG
59944: PUSH
59945: LD_INT 2
59947: NEG
59948: PUSH
59949: EMPTY
59950: LIST
59951: LIST
59952: PUSH
59953: LD_INT 2
59955: NEG
59956: PUSH
59957: LD_INT 3
59959: NEG
59960: PUSH
59961: EMPTY
59962: LIST
59963: LIST
59964: PUSH
59965: LD_INT 3
59967: NEG
59968: PUSH
59969: LD_INT 2
59971: NEG
59972: PUSH
59973: EMPTY
59974: LIST
59975: LIST
59976: PUSH
59977: EMPTY
59978: LIST
59979: LIST
59980: LIST
59981: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
59982: LD_ADDR_VAR 0 47
59986: PUSH
59987: LD_INT 2
59989: NEG
59990: PUSH
59991: LD_INT 3
59993: NEG
59994: PUSH
59995: EMPTY
59996: LIST
59997: LIST
59998: PUSH
59999: LD_INT 1
60001: NEG
60002: PUSH
60003: LD_INT 3
60005: NEG
60006: PUSH
60007: EMPTY
60008: LIST
60009: LIST
60010: PUSH
60011: EMPTY
60012: LIST
60013: LIST
60014: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
60015: LD_ADDR_VAR 0 48
60019: PUSH
60020: LD_INT 1
60022: PUSH
60023: LD_INT 2
60025: NEG
60026: PUSH
60027: EMPTY
60028: LIST
60029: LIST
60030: PUSH
60031: LD_INT 2
60033: PUSH
60034: LD_INT 1
60036: NEG
60037: PUSH
60038: EMPTY
60039: LIST
60040: LIST
60041: PUSH
60042: EMPTY
60043: LIST
60044: LIST
60045: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
60046: LD_ADDR_VAR 0 49
60050: PUSH
60051: LD_INT 3
60053: PUSH
60054: LD_INT 1
60056: PUSH
60057: EMPTY
60058: LIST
60059: LIST
60060: PUSH
60061: LD_INT 3
60063: PUSH
60064: LD_INT 2
60066: PUSH
60067: EMPTY
60068: LIST
60069: LIST
60070: PUSH
60071: EMPTY
60072: LIST
60073: LIST
60074: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
60075: LD_ADDR_VAR 0 50
60079: PUSH
60080: LD_INT 2
60082: PUSH
60083: LD_INT 3
60085: PUSH
60086: EMPTY
60087: LIST
60088: LIST
60089: PUSH
60090: LD_INT 1
60092: PUSH
60093: LD_INT 3
60095: PUSH
60096: EMPTY
60097: LIST
60098: LIST
60099: PUSH
60100: EMPTY
60101: LIST
60102: LIST
60103: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
60104: LD_ADDR_VAR 0 51
60108: PUSH
60109: LD_INT 1
60111: NEG
60112: PUSH
60113: LD_INT 2
60115: PUSH
60116: EMPTY
60117: LIST
60118: LIST
60119: PUSH
60120: LD_INT 2
60122: NEG
60123: PUSH
60124: LD_INT 1
60126: PUSH
60127: EMPTY
60128: LIST
60129: LIST
60130: PUSH
60131: EMPTY
60132: LIST
60133: LIST
60134: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
60135: LD_ADDR_VAR 0 52
60139: PUSH
60140: LD_INT 3
60142: NEG
60143: PUSH
60144: LD_INT 1
60146: NEG
60147: PUSH
60148: EMPTY
60149: LIST
60150: LIST
60151: PUSH
60152: LD_INT 3
60154: NEG
60155: PUSH
60156: LD_INT 2
60158: NEG
60159: PUSH
60160: EMPTY
60161: LIST
60162: LIST
60163: PUSH
60164: EMPTY
60165: LIST
60166: LIST
60167: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
60168: LD_ADDR_VAR 0 53
60172: PUSH
60173: LD_INT 1
60175: NEG
60176: PUSH
60177: LD_INT 3
60179: NEG
60180: PUSH
60181: EMPTY
60182: LIST
60183: LIST
60184: PUSH
60185: LD_INT 0
60187: PUSH
60188: LD_INT 3
60190: NEG
60191: PUSH
60192: EMPTY
60193: LIST
60194: LIST
60195: PUSH
60196: LD_INT 1
60198: PUSH
60199: LD_INT 2
60201: NEG
60202: PUSH
60203: EMPTY
60204: LIST
60205: LIST
60206: PUSH
60207: EMPTY
60208: LIST
60209: LIST
60210: LIST
60211: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
60212: LD_ADDR_VAR 0 54
60216: PUSH
60217: LD_INT 2
60219: PUSH
60220: LD_INT 1
60222: NEG
60223: PUSH
60224: EMPTY
60225: LIST
60226: LIST
60227: PUSH
60228: LD_INT 3
60230: PUSH
60231: LD_INT 0
60233: PUSH
60234: EMPTY
60235: LIST
60236: LIST
60237: PUSH
60238: LD_INT 3
60240: PUSH
60241: LD_INT 1
60243: PUSH
60244: EMPTY
60245: LIST
60246: LIST
60247: PUSH
60248: EMPTY
60249: LIST
60250: LIST
60251: LIST
60252: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
60253: LD_ADDR_VAR 0 55
60257: PUSH
60258: LD_INT 3
60260: PUSH
60261: LD_INT 2
60263: PUSH
60264: EMPTY
60265: LIST
60266: LIST
60267: PUSH
60268: LD_INT 3
60270: PUSH
60271: LD_INT 3
60273: PUSH
60274: EMPTY
60275: LIST
60276: LIST
60277: PUSH
60278: LD_INT 2
60280: PUSH
60281: LD_INT 3
60283: PUSH
60284: EMPTY
60285: LIST
60286: LIST
60287: PUSH
60288: EMPTY
60289: LIST
60290: LIST
60291: LIST
60292: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
60293: LD_ADDR_VAR 0 56
60297: PUSH
60298: LD_INT 1
60300: PUSH
60301: LD_INT 3
60303: PUSH
60304: EMPTY
60305: LIST
60306: LIST
60307: PUSH
60308: LD_INT 0
60310: PUSH
60311: LD_INT 3
60313: PUSH
60314: EMPTY
60315: LIST
60316: LIST
60317: PUSH
60318: LD_INT 1
60320: NEG
60321: PUSH
60322: LD_INT 2
60324: PUSH
60325: EMPTY
60326: LIST
60327: LIST
60328: PUSH
60329: EMPTY
60330: LIST
60331: LIST
60332: LIST
60333: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60334: LD_ADDR_VAR 0 57
60338: PUSH
60339: LD_INT 2
60341: NEG
60342: PUSH
60343: LD_INT 1
60345: PUSH
60346: EMPTY
60347: LIST
60348: LIST
60349: PUSH
60350: LD_INT 3
60352: NEG
60353: PUSH
60354: LD_INT 0
60356: PUSH
60357: EMPTY
60358: LIST
60359: LIST
60360: PUSH
60361: LD_INT 3
60363: NEG
60364: PUSH
60365: LD_INT 1
60367: NEG
60368: PUSH
60369: EMPTY
60370: LIST
60371: LIST
60372: PUSH
60373: EMPTY
60374: LIST
60375: LIST
60376: LIST
60377: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60378: LD_ADDR_VAR 0 58
60382: PUSH
60383: LD_INT 2
60385: NEG
60386: PUSH
60387: LD_INT 3
60389: NEG
60390: PUSH
60391: EMPTY
60392: LIST
60393: LIST
60394: PUSH
60395: LD_INT 3
60397: NEG
60398: PUSH
60399: LD_INT 2
60401: NEG
60402: PUSH
60403: EMPTY
60404: LIST
60405: LIST
60406: PUSH
60407: LD_INT 3
60409: NEG
60410: PUSH
60411: LD_INT 3
60413: NEG
60414: PUSH
60415: EMPTY
60416: LIST
60417: LIST
60418: PUSH
60419: EMPTY
60420: LIST
60421: LIST
60422: LIST
60423: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
60424: LD_ADDR_VAR 0 59
60428: PUSH
60429: LD_INT 1
60431: NEG
60432: PUSH
60433: LD_INT 2
60435: NEG
60436: PUSH
60437: EMPTY
60438: LIST
60439: LIST
60440: PUSH
60441: LD_INT 0
60443: PUSH
60444: LD_INT 2
60446: NEG
60447: PUSH
60448: EMPTY
60449: LIST
60450: LIST
60451: PUSH
60452: LD_INT 1
60454: PUSH
60455: LD_INT 1
60457: NEG
60458: PUSH
60459: EMPTY
60460: LIST
60461: LIST
60462: PUSH
60463: EMPTY
60464: LIST
60465: LIST
60466: LIST
60467: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
60468: LD_ADDR_VAR 0 60
60472: PUSH
60473: LD_INT 1
60475: PUSH
60476: LD_INT 1
60478: NEG
60479: PUSH
60480: EMPTY
60481: LIST
60482: LIST
60483: PUSH
60484: LD_INT 2
60486: PUSH
60487: LD_INT 0
60489: PUSH
60490: EMPTY
60491: LIST
60492: LIST
60493: PUSH
60494: LD_INT 2
60496: PUSH
60497: LD_INT 1
60499: PUSH
60500: EMPTY
60501: LIST
60502: LIST
60503: PUSH
60504: EMPTY
60505: LIST
60506: LIST
60507: LIST
60508: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
60509: LD_ADDR_VAR 0 61
60513: PUSH
60514: LD_INT 2
60516: PUSH
60517: LD_INT 1
60519: PUSH
60520: EMPTY
60521: LIST
60522: LIST
60523: PUSH
60524: LD_INT 2
60526: PUSH
60527: LD_INT 2
60529: PUSH
60530: EMPTY
60531: LIST
60532: LIST
60533: PUSH
60534: LD_INT 1
60536: PUSH
60537: LD_INT 2
60539: PUSH
60540: EMPTY
60541: LIST
60542: LIST
60543: PUSH
60544: EMPTY
60545: LIST
60546: LIST
60547: LIST
60548: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
60549: LD_ADDR_VAR 0 62
60553: PUSH
60554: LD_INT 1
60556: PUSH
60557: LD_INT 2
60559: PUSH
60560: EMPTY
60561: LIST
60562: LIST
60563: PUSH
60564: LD_INT 0
60566: PUSH
60567: LD_INT 2
60569: PUSH
60570: EMPTY
60571: LIST
60572: LIST
60573: PUSH
60574: LD_INT 1
60576: NEG
60577: PUSH
60578: LD_INT 1
60580: PUSH
60581: EMPTY
60582: LIST
60583: LIST
60584: PUSH
60585: EMPTY
60586: LIST
60587: LIST
60588: LIST
60589: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
60590: LD_ADDR_VAR 0 63
60594: PUSH
60595: LD_INT 1
60597: NEG
60598: PUSH
60599: LD_INT 1
60601: PUSH
60602: EMPTY
60603: LIST
60604: LIST
60605: PUSH
60606: LD_INT 2
60608: NEG
60609: PUSH
60610: LD_INT 0
60612: PUSH
60613: EMPTY
60614: LIST
60615: LIST
60616: PUSH
60617: LD_INT 2
60619: NEG
60620: PUSH
60621: LD_INT 1
60623: NEG
60624: PUSH
60625: EMPTY
60626: LIST
60627: LIST
60628: PUSH
60629: EMPTY
60630: LIST
60631: LIST
60632: LIST
60633: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60634: LD_ADDR_VAR 0 64
60638: PUSH
60639: LD_INT 1
60641: NEG
60642: PUSH
60643: LD_INT 2
60645: NEG
60646: PUSH
60647: EMPTY
60648: LIST
60649: LIST
60650: PUSH
60651: LD_INT 2
60653: NEG
60654: PUSH
60655: LD_INT 1
60657: NEG
60658: PUSH
60659: EMPTY
60660: LIST
60661: LIST
60662: PUSH
60663: LD_INT 2
60665: NEG
60666: PUSH
60667: LD_INT 2
60669: NEG
60670: PUSH
60671: EMPTY
60672: LIST
60673: LIST
60674: PUSH
60675: EMPTY
60676: LIST
60677: LIST
60678: LIST
60679: ST_TO_ADDR
// end ; 2 :
60680: GO 63946
60682: LD_INT 2
60684: DOUBLE
60685: EQUAL
60686: IFTRUE 60690
60688: GO 63945
60690: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
60691: LD_ADDR_VAR 0 29
60695: PUSH
60696: LD_INT 4
60698: PUSH
60699: LD_INT 0
60701: PUSH
60702: EMPTY
60703: LIST
60704: LIST
60705: PUSH
60706: LD_INT 4
60708: PUSH
60709: LD_INT 1
60711: NEG
60712: PUSH
60713: EMPTY
60714: LIST
60715: LIST
60716: PUSH
60717: LD_INT 5
60719: PUSH
60720: LD_INT 0
60722: PUSH
60723: EMPTY
60724: LIST
60725: LIST
60726: PUSH
60727: LD_INT 5
60729: PUSH
60730: LD_INT 1
60732: PUSH
60733: EMPTY
60734: LIST
60735: LIST
60736: PUSH
60737: LD_INT 4
60739: PUSH
60740: LD_INT 1
60742: PUSH
60743: EMPTY
60744: LIST
60745: LIST
60746: PUSH
60747: LD_INT 3
60749: PUSH
60750: LD_INT 0
60752: PUSH
60753: EMPTY
60754: LIST
60755: LIST
60756: PUSH
60757: LD_INT 3
60759: PUSH
60760: LD_INT 1
60762: NEG
60763: PUSH
60764: EMPTY
60765: LIST
60766: LIST
60767: PUSH
60768: LD_INT 3
60770: PUSH
60771: LD_INT 2
60773: NEG
60774: PUSH
60775: EMPTY
60776: LIST
60777: LIST
60778: PUSH
60779: LD_INT 5
60781: PUSH
60782: LD_INT 2
60784: PUSH
60785: EMPTY
60786: LIST
60787: LIST
60788: PUSH
60789: LD_INT 3
60791: PUSH
60792: LD_INT 3
60794: PUSH
60795: EMPTY
60796: LIST
60797: LIST
60798: PUSH
60799: LD_INT 3
60801: PUSH
60802: LD_INT 2
60804: PUSH
60805: EMPTY
60806: LIST
60807: LIST
60808: PUSH
60809: LD_INT 4
60811: PUSH
60812: LD_INT 3
60814: PUSH
60815: EMPTY
60816: LIST
60817: LIST
60818: PUSH
60819: LD_INT 4
60821: PUSH
60822: LD_INT 4
60824: PUSH
60825: EMPTY
60826: LIST
60827: LIST
60828: PUSH
60829: LD_INT 3
60831: PUSH
60832: LD_INT 4
60834: PUSH
60835: EMPTY
60836: LIST
60837: LIST
60838: PUSH
60839: LD_INT 2
60841: PUSH
60842: LD_INT 3
60844: PUSH
60845: EMPTY
60846: LIST
60847: LIST
60848: PUSH
60849: LD_INT 2
60851: PUSH
60852: LD_INT 2
60854: PUSH
60855: EMPTY
60856: LIST
60857: LIST
60858: PUSH
60859: LD_INT 4
60861: PUSH
60862: LD_INT 2
60864: PUSH
60865: EMPTY
60866: LIST
60867: LIST
60868: PUSH
60869: LD_INT 2
60871: PUSH
60872: LD_INT 4
60874: PUSH
60875: EMPTY
60876: LIST
60877: LIST
60878: PUSH
60879: LD_INT 0
60881: PUSH
60882: LD_INT 4
60884: PUSH
60885: EMPTY
60886: LIST
60887: LIST
60888: PUSH
60889: LD_INT 0
60891: PUSH
60892: LD_INT 3
60894: PUSH
60895: EMPTY
60896: LIST
60897: LIST
60898: PUSH
60899: LD_INT 1
60901: PUSH
60902: LD_INT 4
60904: PUSH
60905: EMPTY
60906: LIST
60907: LIST
60908: PUSH
60909: LD_INT 1
60911: PUSH
60912: LD_INT 5
60914: PUSH
60915: EMPTY
60916: LIST
60917: LIST
60918: PUSH
60919: LD_INT 0
60921: PUSH
60922: LD_INT 5
60924: PUSH
60925: EMPTY
60926: LIST
60927: LIST
60928: PUSH
60929: LD_INT 1
60931: NEG
60932: PUSH
60933: LD_INT 4
60935: PUSH
60936: EMPTY
60937: LIST
60938: LIST
60939: PUSH
60940: LD_INT 1
60942: NEG
60943: PUSH
60944: LD_INT 3
60946: PUSH
60947: EMPTY
60948: LIST
60949: LIST
60950: PUSH
60951: LD_INT 2
60953: PUSH
60954: LD_INT 5
60956: PUSH
60957: EMPTY
60958: LIST
60959: LIST
60960: PUSH
60961: LD_INT 2
60963: NEG
60964: PUSH
60965: LD_INT 3
60967: PUSH
60968: EMPTY
60969: LIST
60970: LIST
60971: PUSH
60972: LD_INT 3
60974: NEG
60975: PUSH
60976: LD_INT 0
60978: PUSH
60979: EMPTY
60980: LIST
60981: LIST
60982: PUSH
60983: LD_INT 3
60985: NEG
60986: PUSH
60987: LD_INT 1
60989: NEG
60990: PUSH
60991: EMPTY
60992: LIST
60993: LIST
60994: PUSH
60995: LD_INT 2
60997: NEG
60998: PUSH
60999: LD_INT 0
61001: PUSH
61002: EMPTY
61003: LIST
61004: LIST
61005: PUSH
61006: LD_INT 2
61008: NEG
61009: PUSH
61010: LD_INT 1
61012: PUSH
61013: EMPTY
61014: LIST
61015: LIST
61016: PUSH
61017: LD_INT 3
61019: NEG
61020: PUSH
61021: LD_INT 1
61023: PUSH
61024: EMPTY
61025: LIST
61026: LIST
61027: PUSH
61028: LD_INT 4
61030: NEG
61031: PUSH
61032: LD_INT 0
61034: PUSH
61035: EMPTY
61036: LIST
61037: LIST
61038: PUSH
61039: LD_INT 4
61041: NEG
61042: PUSH
61043: LD_INT 1
61045: NEG
61046: PUSH
61047: EMPTY
61048: LIST
61049: LIST
61050: PUSH
61051: LD_INT 4
61053: NEG
61054: PUSH
61055: LD_INT 2
61057: NEG
61058: PUSH
61059: EMPTY
61060: LIST
61061: LIST
61062: PUSH
61063: LD_INT 2
61065: NEG
61066: PUSH
61067: LD_INT 2
61069: PUSH
61070: EMPTY
61071: LIST
61072: LIST
61073: PUSH
61074: LD_INT 4
61076: NEG
61077: PUSH
61078: LD_INT 4
61080: NEG
61081: PUSH
61082: EMPTY
61083: LIST
61084: LIST
61085: PUSH
61086: LD_INT 4
61088: NEG
61089: PUSH
61090: LD_INT 5
61092: NEG
61093: PUSH
61094: EMPTY
61095: LIST
61096: LIST
61097: PUSH
61098: LD_INT 3
61100: NEG
61101: PUSH
61102: LD_INT 4
61104: NEG
61105: PUSH
61106: EMPTY
61107: LIST
61108: LIST
61109: PUSH
61110: LD_INT 3
61112: NEG
61113: PUSH
61114: LD_INT 3
61116: NEG
61117: PUSH
61118: EMPTY
61119: LIST
61120: LIST
61121: PUSH
61122: LD_INT 4
61124: NEG
61125: PUSH
61126: LD_INT 3
61128: NEG
61129: PUSH
61130: EMPTY
61131: LIST
61132: LIST
61133: PUSH
61134: LD_INT 5
61136: NEG
61137: PUSH
61138: LD_INT 4
61140: NEG
61141: PUSH
61142: EMPTY
61143: LIST
61144: LIST
61145: PUSH
61146: LD_INT 5
61148: NEG
61149: PUSH
61150: LD_INT 5
61152: NEG
61153: PUSH
61154: EMPTY
61155: LIST
61156: LIST
61157: PUSH
61158: LD_INT 3
61160: NEG
61161: PUSH
61162: LD_INT 5
61164: NEG
61165: PUSH
61166: EMPTY
61167: LIST
61168: LIST
61169: PUSH
61170: LD_INT 5
61172: NEG
61173: PUSH
61174: LD_INT 3
61176: NEG
61177: PUSH
61178: EMPTY
61179: LIST
61180: LIST
61181: PUSH
61182: EMPTY
61183: LIST
61184: LIST
61185: LIST
61186: LIST
61187: LIST
61188: LIST
61189: LIST
61190: LIST
61191: LIST
61192: LIST
61193: LIST
61194: LIST
61195: LIST
61196: LIST
61197: LIST
61198: LIST
61199: LIST
61200: LIST
61201: LIST
61202: LIST
61203: LIST
61204: LIST
61205: LIST
61206: LIST
61207: LIST
61208: LIST
61209: LIST
61210: LIST
61211: LIST
61212: LIST
61213: LIST
61214: LIST
61215: LIST
61216: LIST
61217: LIST
61218: LIST
61219: LIST
61220: LIST
61221: LIST
61222: LIST
61223: LIST
61224: LIST
61225: LIST
61226: LIST
61227: LIST
61228: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
61229: LD_ADDR_VAR 0 30
61233: PUSH
61234: LD_INT 4
61236: PUSH
61237: LD_INT 4
61239: PUSH
61240: EMPTY
61241: LIST
61242: LIST
61243: PUSH
61244: LD_INT 4
61246: PUSH
61247: LD_INT 3
61249: PUSH
61250: EMPTY
61251: LIST
61252: LIST
61253: PUSH
61254: LD_INT 5
61256: PUSH
61257: LD_INT 4
61259: PUSH
61260: EMPTY
61261: LIST
61262: LIST
61263: PUSH
61264: LD_INT 5
61266: PUSH
61267: LD_INT 5
61269: PUSH
61270: EMPTY
61271: LIST
61272: LIST
61273: PUSH
61274: LD_INT 4
61276: PUSH
61277: LD_INT 5
61279: PUSH
61280: EMPTY
61281: LIST
61282: LIST
61283: PUSH
61284: LD_INT 3
61286: PUSH
61287: LD_INT 4
61289: PUSH
61290: EMPTY
61291: LIST
61292: LIST
61293: PUSH
61294: LD_INT 3
61296: PUSH
61297: LD_INT 3
61299: PUSH
61300: EMPTY
61301: LIST
61302: LIST
61303: PUSH
61304: LD_INT 5
61306: PUSH
61307: LD_INT 3
61309: PUSH
61310: EMPTY
61311: LIST
61312: LIST
61313: PUSH
61314: LD_INT 3
61316: PUSH
61317: LD_INT 5
61319: PUSH
61320: EMPTY
61321: LIST
61322: LIST
61323: PUSH
61324: LD_INT 0
61326: PUSH
61327: LD_INT 3
61329: PUSH
61330: EMPTY
61331: LIST
61332: LIST
61333: PUSH
61334: LD_INT 0
61336: PUSH
61337: LD_INT 2
61339: PUSH
61340: EMPTY
61341: LIST
61342: LIST
61343: PUSH
61344: LD_INT 1
61346: PUSH
61347: LD_INT 3
61349: PUSH
61350: EMPTY
61351: LIST
61352: LIST
61353: PUSH
61354: LD_INT 1
61356: PUSH
61357: LD_INT 4
61359: PUSH
61360: EMPTY
61361: LIST
61362: LIST
61363: PUSH
61364: LD_INT 0
61366: PUSH
61367: LD_INT 4
61369: PUSH
61370: EMPTY
61371: LIST
61372: LIST
61373: PUSH
61374: LD_INT 1
61376: NEG
61377: PUSH
61378: LD_INT 3
61380: PUSH
61381: EMPTY
61382: LIST
61383: LIST
61384: PUSH
61385: LD_INT 1
61387: NEG
61388: PUSH
61389: LD_INT 2
61391: PUSH
61392: EMPTY
61393: LIST
61394: LIST
61395: PUSH
61396: LD_INT 2
61398: PUSH
61399: LD_INT 4
61401: PUSH
61402: EMPTY
61403: LIST
61404: LIST
61405: PUSH
61406: LD_INT 2
61408: NEG
61409: PUSH
61410: LD_INT 2
61412: PUSH
61413: EMPTY
61414: LIST
61415: LIST
61416: PUSH
61417: LD_INT 4
61419: NEG
61420: PUSH
61421: LD_INT 0
61423: PUSH
61424: EMPTY
61425: LIST
61426: LIST
61427: PUSH
61428: LD_INT 4
61430: NEG
61431: PUSH
61432: LD_INT 1
61434: NEG
61435: PUSH
61436: EMPTY
61437: LIST
61438: LIST
61439: PUSH
61440: LD_INT 3
61442: NEG
61443: PUSH
61444: LD_INT 0
61446: PUSH
61447: EMPTY
61448: LIST
61449: LIST
61450: PUSH
61451: LD_INT 3
61453: NEG
61454: PUSH
61455: LD_INT 1
61457: PUSH
61458: EMPTY
61459: LIST
61460: LIST
61461: PUSH
61462: LD_INT 4
61464: NEG
61465: PUSH
61466: LD_INT 1
61468: PUSH
61469: EMPTY
61470: LIST
61471: LIST
61472: PUSH
61473: LD_INT 5
61475: NEG
61476: PUSH
61477: LD_INT 0
61479: PUSH
61480: EMPTY
61481: LIST
61482: LIST
61483: PUSH
61484: LD_INT 5
61486: NEG
61487: PUSH
61488: LD_INT 1
61490: NEG
61491: PUSH
61492: EMPTY
61493: LIST
61494: LIST
61495: PUSH
61496: LD_INT 5
61498: NEG
61499: PUSH
61500: LD_INT 2
61502: NEG
61503: PUSH
61504: EMPTY
61505: LIST
61506: LIST
61507: PUSH
61508: LD_INT 3
61510: NEG
61511: PUSH
61512: LD_INT 2
61514: PUSH
61515: EMPTY
61516: LIST
61517: LIST
61518: PUSH
61519: LD_INT 3
61521: NEG
61522: PUSH
61523: LD_INT 3
61525: NEG
61526: PUSH
61527: EMPTY
61528: LIST
61529: LIST
61530: PUSH
61531: LD_INT 3
61533: NEG
61534: PUSH
61535: LD_INT 4
61537: NEG
61538: PUSH
61539: EMPTY
61540: LIST
61541: LIST
61542: PUSH
61543: LD_INT 2
61545: NEG
61546: PUSH
61547: LD_INT 3
61549: NEG
61550: PUSH
61551: EMPTY
61552: LIST
61553: LIST
61554: PUSH
61555: LD_INT 2
61557: NEG
61558: PUSH
61559: LD_INT 2
61561: NEG
61562: PUSH
61563: EMPTY
61564: LIST
61565: LIST
61566: PUSH
61567: LD_INT 3
61569: NEG
61570: PUSH
61571: LD_INT 2
61573: NEG
61574: PUSH
61575: EMPTY
61576: LIST
61577: LIST
61578: PUSH
61579: LD_INT 4
61581: NEG
61582: PUSH
61583: LD_INT 3
61585: NEG
61586: PUSH
61587: EMPTY
61588: LIST
61589: LIST
61590: PUSH
61591: LD_INT 4
61593: NEG
61594: PUSH
61595: LD_INT 4
61597: NEG
61598: PUSH
61599: EMPTY
61600: LIST
61601: LIST
61602: PUSH
61603: LD_INT 2
61605: NEG
61606: PUSH
61607: LD_INT 4
61609: NEG
61610: PUSH
61611: EMPTY
61612: LIST
61613: LIST
61614: PUSH
61615: LD_INT 4
61617: NEG
61618: PUSH
61619: LD_INT 2
61621: NEG
61622: PUSH
61623: EMPTY
61624: LIST
61625: LIST
61626: PUSH
61627: LD_INT 0
61629: PUSH
61630: LD_INT 4
61632: NEG
61633: PUSH
61634: EMPTY
61635: LIST
61636: LIST
61637: PUSH
61638: LD_INT 0
61640: PUSH
61641: LD_INT 5
61643: NEG
61644: PUSH
61645: EMPTY
61646: LIST
61647: LIST
61648: PUSH
61649: LD_INT 1
61651: PUSH
61652: LD_INT 4
61654: NEG
61655: PUSH
61656: EMPTY
61657: LIST
61658: LIST
61659: PUSH
61660: LD_INT 1
61662: PUSH
61663: LD_INT 3
61665: NEG
61666: PUSH
61667: EMPTY
61668: LIST
61669: LIST
61670: PUSH
61671: LD_INT 0
61673: PUSH
61674: LD_INT 3
61676: NEG
61677: PUSH
61678: EMPTY
61679: LIST
61680: LIST
61681: PUSH
61682: LD_INT 1
61684: NEG
61685: PUSH
61686: LD_INT 4
61688: NEG
61689: PUSH
61690: EMPTY
61691: LIST
61692: LIST
61693: PUSH
61694: LD_INT 1
61696: NEG
61697: PUSH
61698: LD_INT 5
61700: NEG
61701: PUSH
61702: EMPTY
61703: LIST
61704: LIST
61705: PUSH
61706: LD_INT 2
61708: PUSH
61709: LD_INT 3
61711: NEG
61712: PUSH
61713: EMPTY
61714: LIST
61715: LIST
61716: PUSH
61717: LD_INT 2
61719: NEG
61720: PUSH
61721: LD_INT 5
61723: NEG
61724: PUSH
61725: EMPTY
61726: LIST
61727: LIST
61728: PUSH
61729: EMPTY
61730: LIST
61731: LIST
61732: LIST
61733: LIST
61734: LIST
61735: LIST
61736: LIST
61737: LIST
61738: LIST
61739: LIST
61740: LIST
61741: LIST
61742: LIST
61743: LIST
61744: LIST
61745: LIST
61746: LIST
61747: LIST
61748: LIST
61749: LIST
61750: LIST
61751: LIST
61752: LIST
61753: LIST
61754: LIST
61755: LIST
61756: LIST
61757: LIST
61758: LIST
61759: LIST
61760: LIST
61761: LIST
61762: LIST
61763: LIST
61764: LIST
61765: LIST
61766: LIST
61767: LIST
61768: LIST
61769: LIST
61770: LIST
61771: LIST
61772: LIST
61773: LIST
61774: LIST
61775: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
61776: LD_ADDR_VAR 0 31
61780: PUSH
61781: LD_INT 0
61783: PUSH
61784: LD_INT 4
61786: PUSH
61787: EMPTY
61788: LIST
61789: LIST
61790: PUSH
61791: LD_INT 0
61793: PUSH
61794: LD_INT 3
61796: PUSH
61797: EMPTY
61798: LIST
61799: LIST
61800: PUSH
61801: LD_INT 1
61803: PUSH
61804: LD_INT 4
61806: PUSH
61807: EMPTY
61808: LIST
61809: LIST
61810: PUSH
61811: LD_INT 1
61813: PUSH
61814: LD_INT 5
61816: PUSH
61817: EMPTY
61818: LIST
61819: LIST
61820: PUSH
61821: LD_INT 0
61823: PUSH
61824: LD_INT 5
61826: PUSH
61827: EMPTY
61828: LIST
61829: LIST
61830: PUSH
61831: LD_INT 1
61833: NEG
61834: PUSH
61835: LD_INT 4
61837: PUSH
61838: EMPTY
61839: LIST
61840: LIST
61841: PUSH
61842: LD_INT 1
61844: NEG
61845: PUSH
61846: LD_INT 3
61848: PUSH
61849: EMPTY
61850: LIST
61851: LIST
61852: PUSH
61853: LD_INT 2
61855: PUSH
61856: LD_INT 5
61858: PUSH
61859: EMPTY
61860: LIST
61861: LIST
61862: PUSH
61863: LD_INT 2
61865: NEG
61866: PUSH
61867: LD_INT 3
61869: PUSH
61870: EMPTY
61871: LIST
61872: LIST
61873: PUSH
61874: LD_INT 3
61876: NEG
61877: PUSH
61878: LD_INT 0
61880: PUSH
61881: EMPTY
61882: LIST
61883: LIST
61884: PUSH
61885: LD_INT 3
61887: NEG
61888: PUSH
61889: LD_INT 1
61891: NEG
61892: PUSH
61893: EMPTY
61894: LIST
61895: LIST
61896: PUSH
61897: LD_INT 2
61899: NEG
61900: PUSH
61901: LD_INT 0
61903: PUSH
61904: EMPTY
61905: LIST
61906: LIST
61907: PUSH
61908: LD_INT 2
61910: NEG
61911: PUSH
61912: LD_INT 1
61914: PUSH
61915: EMPTY
61916: LIST
61917: LIST
61918: PUSH
61919: LD_INT 3
61921: NEG
61922: PUSH
61923: LD_INT 1
61925: PUSH
61926: EMPTY
61927: LIST
61928: LIST
61929: PUSH
61930: LD_INT 4
61932: NEG
61933: PUSH
61934: LD_INT 0
61936: PUSH
61937: EMPTY
61938: LIST
61939: LIST
61940: PUSH
61941: LD_INT 4
61943: NEG
61944: PUSH
61945: LD_INT 1
61947: NEG
61948: PUSH
61949: EMPTY
61950: LIST
61951: LIST
61952: PUSH
61953: LD_INT 4
61955: NEG
61956: PUSH
61957: LD_INT 2
61959: NEG
61960: PUSH
61961: EMPTY
61962: LIST
61963: LIST
61964: PUSH
61965: LD_INT 2
61967: NEG
61968: PUSH
61969: LD_INT 2
61971: PUSH
61972: EMPTY
61973: LIST
61974: LIST
61975: PUSH
61976: LD_INT 4
61978: NEG
61979: PUSH
61980: LD_INT 4
61982: NEG
61983: PUSH
61984: EMPTY
61985: LIST
61986: LIST
61987: PUSH
61988: LD_INT 4
61990: NEG
61991: PUSH
61992: LD_INT 5
61994: NEG
61995: PUSH
61996: EMPTY
61997: LIST
61998: LIST
61999: PUSH
62000: LD_INT 3
62002: NEG
62003: PUSH
62004: LD_INT 4
62006: NEG
62007: PUSH
62008: EMPTY
62009: LIST
62010: LIST
62011: PUSH
62012: LD_INT 3
62014: NEG
62015: PUSH
62016: LD_INT 3
62018: NEG
62019: PUSH
62020: EMPTY
62021: LIST
62022: LIST
62023: PUSH
62024: LD_INT 4
62026: NEG
62027: PUSH
62028: LD_INT 3
62030: NEG
62031: PUSH
62032: EMPTY
62033: LIST
62034: LIST
62035: PUSH
62036: LD_INT 5
62038: NEG
62039: PUSH
62040: LD_INT 4
62042: NEG
62043: PUSH
62044: EMPTY
62045: LIST
62046: LIST
62047: PUSH
62048: LD_INT 5
62050: NEG
62051: PUSH
62052: LD_INT 5
62054: NEG
62055: PUSH
62056: EMPTY
62057: LIST
62058: LIST
62059: PUSH
62060: LD_INT 3
62062: NEG
62063: PUSH
62064: LD_INT 5
62066: NEG
62067: PUSH
62068: EMPTY
62069: LIST
62070: LIST
62071: PUSH
62072: LD_INT 5
62074: NEG
62075: PUSH
62076: LD_INT 3
62078: NEG
62079: PUSH
62080: EMPTY
62081: LIST
62082: LIST
62083: PUSH
62084: LD_INT 0
62086: PUSH
62087: LD_INT 3
62089: NEG
62090: PUSH
62091: EMPTY
62092: LIST
62093: LIST
62094: PUSH
62095: LD_INT 0
62097: PUSH
62098: LD_INT 4
62100: NEG
62101: PUSH
62102: EMPTY
62103: LIST
62104: LIST
62105: PUSH
62106: LD_INT 1
62108: PUSH
62109: LD_INT 3
62111: NEG
62112: PUSH
62113: EMPTY
62114: LIST
62115: LIST
62116: PUSH
62117: LD_INT 1
62119: PUSH
62120: LD_INT 2
62122: NEG
62123: PUSH
62124: EMPTY
62125: LIST
62126: LIST
62127: PUSH
62128: LD_INT 0
62130: PUSH
62131: LD_INT 2
62133: NEG
62134: PUSH
62135: EMPTY
62136: LIST
62137: LIST
62138: PUSH
62139: LD_INT 1
62141: NEG
62142: PUSH
62143: LD_INT 3
62145: NEG
62146: PUSH
62147: EMPTY
62148: LIST
62149: LIST
62150: PUSH
62151: LD_INT 1
62153: NEG
62154: PUSH
62155: LD_INT 4
62157: NEG
62158: PUSH
62159: EMPTY
62160: LIST
62161: LIST
62162: PUSH
62163: LD_INT 2
62165: PUSH
62166: LD_INT 2
62168: NEG
62169: PUSH
62170: EMPTY
62171: LIST
62172: LIST
62173: PUSH
62174: LD_INT 2
62176: NEG
62177: PUSH
62178: LD_INT 4
62180: NEG
62181: PUSH
62182: EMPTY
62183: LIST
62184: LIST
62185: PUSH
62186: LD_INT 4
62188: PUSH
62189: LD_INT 0
62191: PUSH
62192: EMPTY
62193: LIST
62194: LIST
62195: PUSH
62196: LD_INT 4
62198: PUSH
62199: LD_INT 1
62201: NEG
62202: PUSH
62203: EMPTY
62204: LIST
62205: LIST
62206: PUSH
62207: LD_INT 5
62209: PUSH
62210: LD_INT 0
62212: PUSH
62213: EMPTY
62214: LIST
62215: LIST
62216: PUSH
62217: LD_INT 5
62219: PUSH
62220: LD_INT 1
62222: PUSH
62223: EMPTY
62224: LIST
62225: LIST
62226: PUSH
62227: LD_INT 4
62229: PUSH
62230: LD_INT 1
62232: PUSH
62233: EMPTY
62234: LIST
62235: LIST
62236: PUSH
62237: LD_INT 3
62239: PUSH
62240: LD_INT 0
62242: PUSH
62243: EMPTY
62244: LIST
62245: LIST
62246: PUSH
62247: LD_INT 3
62249: PUSH
62250: LD_INT 1
62252: NEG
62253: PUSH
62254: EMPTY
62255: LIST
62256: LIST
62257: PUSH
62258: LD_INT 3
62260: PUSH
62261: LD_INT 2
62263: NEG
62264: PUSH
62265: EMPTY
62266: LIST
62267: LIST
62268: PUSH
62269: LD_INT 5
62271: PUSH
62272: LD_INT 2
62274: PUSH
62275: EMPTY
62276: LIST
62277: LIST
62278: PUSH
62279: EMPTY
62280: LIST
62281: LIST
62282: LIST
62283: LIST
62284: LIST
62285: LIST
62286: LIST
62287: LIST
62288: LIST
62289: LIST
62290: LIST
62291: LIST
62292: LIST
62293: LIST
62294: LIST
62295: LIST
62296: LIST
62297: LIST
62298: LIST
62299: LIST
62300: LIST
62301: LIST
62302: LIST
62303: LIST
62304: LIST
62305: LIST
62306: LIST
62307: LIST
62308: LIST
62309: LIST
62310: LIST
62311: LIST
62312: LIST
62313: LIST
62314: LIST
62315: LIST
62316: LIST
62317: LIST
62318: LIST
62319: LIST
62320: LIST
62321: LIST
62322: LIST
62323: LIST
62324: LIST
62325: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
62326: LD_ADDR_VAR 0 32
62330: PUSH
62331: LD_INT 4
62333: NEG
62334: PUSH
62335: LD_INT 0
62337: PUSH
62338: EMPTY
62339: LIST
62340: LIST
62341: PUSH
62342: LD_INT 4
62344: NEG
62345: PUSH
62346: LD_INT 1
62348: NEG
62349: PUSH
62350: EMPTY
62351: LIST
62352: LIST
62353: PUSH
62354: LD_INT 3
62356: NEG
62357: PUSH
62358: LD_INT 0
62360: PUSH
62361: EMPTY
62362: LIST
62363: LIST
62364: PUSH
62365: LD_INT 3
62367: NEG
62368: PUSH
62369: LD_INT 1
62371: PUSH
62372: EMPTY
62373: LIST
62374: LIST
62375: PUSH
62376: LD_INT 4
62378: NEG
62379: PUSH
62380: LD_INT 1
62382: PUSH
62383: EMPTY
62384: LIST
62385: LIST
62386: PUSH
62387: LD_INT 5
62389: NEG
62390: PUSH
62391: LD_INT 0
62393: PUSH
62394: EMPTY
62395: LIST
62396: LIST
62397: PUSH
62398: LD_INT 5
62400: NEG
62401: PUSH
62402: LD_INT 1
62404: NEG
62405: PUSH
62406: EMPTY
62407: LIST
62408: LIST
62409: PUSH
62410: LD_INT 5
62412: NEG
62413: PUSH
62414: LD_INT 2
62416: NEG
62417: PUSH
62418: EMPTY
62419: LIST
62420: LIST
62421: PUSH
62422: LD_INT 3
62424: NEG
62425: PUSH
62426: LD_INT 2
62428: PUSH
62429: EMPTY
62430: LIST
62431: LIST
62432: PUSH
62433: LD_INT 3
62435: NEG
62436: PUSH
62437: LD_INT 3
62439: NEG
62440: PUSH
62441: EMPTY
62442: LIST
62443: LIST
62444: PUSH
62445: LD_INT 3
62447: NEG
62448: PUSH
62449: LD_INT 4
62451: NEG
62452: PUSH
62453: EMPTY
62454: LIST
62455: LIST
62456: PUSH
62457: LD_INT 2
62459: NEG
62460: PUSH
62461: LD_INT 3
62463: NEG
62464: PUSH
62465: EMPTY
62466: LIST
62467: LIST
62468: PUSH
62469: LD_INT 2
62471: NEG
62472: PUSH
62473: LD_INT 2
62475: NEG
62476: PUSH
62477: EMPTY
62478: LIST
62479: LIST
62480: PUSH
62481: LD_INT 3
62483: NEG
62484: PUSH
62485: LD_INT 2
62487: NEG
62488: PUSH
62489: EMPTY
62490: LIST
62491: LIST
62492: PUSH
62493: LD_INT 4
62495: NEG
62496: PUSH
62497: LD_INT 3
62499: NEG
62500: PUSH
62501: EMPTY
62502: LIST
62503: LIST
62504: PUSH
62505: LD_INT 4
62507: NEG
62508: PUSH
62509: LD_INT 4
62511: NEG
62512: PUSH
62513: EMPTY
62514: LIST
62515: LIST
62516: PUSH
62517: LD_INT 2
62519: NEG
62520: PUSH
62521: LD_INT 4
62523: NEG
62524: PUSH
62525: EMPTY
62526: LIST
62527: LIST
62528: PUSH
62529: LD_INT 4
62531: NEG
62532: PUSH
62533: LD_INT 2
62535: NEG
62536: PUSH
62537: EMPTY
62538: LIST
62539: LIST
62540: PUSH
62541: LD_INT 0
62543: PUSH
62544: LD_INT 4
62546: NEG
62547: PUSH
62548: EMPTY
62549: LIST
62550: LIST
62551: PUSH
62552: LD_INT 0
62554: PUSH
62555: LD_INT 5
62557: NEG
62558: PUSH
62559: EMPTY
62560: LIST
62561: LIST
62562: PUSH
62563: LD_INT 1
62565: PUSH
62566: LD_INT 4
62568: NEG
62569: PUSH
62570: EMPTY
62571: LIST
62572: LIST
62573: PUSH
62574: LD_INT 1
62576: PUSH
62577: LD_INT 3
62579: NEG
62580: PUSH
62581: EMPTY
62582: LIST
62583: LIST
62584: PUSH
62585: LD_INT 0
62587: PUSH
62588: LD_INT 3
62590: NEG
62591: PUSH
62592: EMPTY
62593: LIST
62594: LIST
62595: PUSH
62596: LD_INT 1
62598: NEG
62599: PUSH
62600: LD_INT 4
62602: NEG
62603: PUSH
62604: EMPTY
62605: LIST
62606: LIST
62607: PUSH
62608: LD_INT 1
62610: NEG
62611: PUSH
62612: LD_INT 5
62614: NEG
62615: PUSH
62616: EMPTY
62617: LIST
62618: LIST
62619: PUSH
62620: LD_INT 2
62622: PUSH
62623: LD_INT 3
62625: NEG
62626: PUSH
62627: EMPTY
62628: LIST
62629: LIST
62630: PUSH
62631: LD_INT 2
62633: NEG
62634: PUSH
62635: LD_INT 5
62637: NEG
62638: PUSH
62639: EMPTY
62640: LIST
62641: LIST
62642: PUSH
62643: LD_INT 3
62645: PUSH
62646: LD_INT 0
62648: PUSH
62649: EMPTY
62650: LIST
62651: LIST
62652: PUSH
62653: LD_INT 3
62655: PUSH
62656: LD_INT 1
62658: NEG
62659: PUSH
62660: EMPTY
62661: LIST
62662: LIST
62663: PUSH
62664: LD_INT 4
62666: PUSH
62667: LD_INT 0
62669: PUSH
62670: EMPTY
62671: LIST
62672: LIST
62673: PUSH
62674: LD_INT 4
62676: PUSH
62677: LD_INT 1
62679: PUSH
62680: EMPTY
62681: LIST
62682: LIST
62683: PUSH
62684: LD_INT 3
62686: PUSH
62687: LD_INT 1
62689: PUSH
62690: EMPTY
62691: LIST
62692: LIST
62693: PUSH
62694: LD_INT 2
62696: PUSH
62697: LD_INT 0
62699: PUSH
62700: EMPTY
62701: LIST
62702: LIST
62703: PUSH
62704: LD_INT 2
62706: PUSH
62707: LD_INT 1
62709: NEG
62710: PUSH
62711: EMPTY
62712: LIST
62713: LIST
62714: PUSH
62715: LD_INT 2
62717: PUSH
62718: LD_INT 2
62720: NEG
62721: PUSH
62722: EMPTY
62723: LIST
62724: LIST
62725: PUSH
62726: LD_INT 4
62728: PUSH
62729: LD_INT 2
62731: PUSH
62732: EMPTY
62733: LIST
62734: LIST
62735: PUSH
62736: LD_INT 4
62738: PUSH
62739: LD_INT 4
62741: PUSH
62742: EMPTY
62743: LIST
62744: LIST
62745: PUSH
62746: LD_INT 4
62748: PUSH
62749: LD_INT 3
62751: PUSH
62752: EMPTY
62753: LIST
62754: LIST
62755: PUSH
62756: LD_INT 5
62758: PUSH
62759: LD_INT 4
62761: PUSH
62762: EMPTY
62763: LIST
62764: LIST
62765: PUSH
62766: LD_INT 5
62768: PUSH
62769: LD_INT 5
62771: PUSH
62772: EMPTY
62773: LIST
62774: LIST
62775: PUSH
62776: LD_INT 4
62778: PUSH
62779: LD_INT 5
62781: PUSH
62782: EMPTY
62783: LIST
62784: LIST
62785: PUSH
62786: LD_INT 3
62788: PUSH
62789: LD_INT 4
62791: PUSH
62792: EMPTY
62793: LIST
62794: LIST
62795: PUSH
62796: LD_INT 3
62798: PUSH
62799: LD_INT 3
62801: PUSH
62802: EMPTY
62803: LIST
62804: LIST
62805: PUSH
62806: LD_INT 5
62808: PUSH
62809: LD_INT 3
62811: PUSH
62812: EMPTY
62813: LIST
62814: LIST
62815: PUSH
62816: LD_INT 3
62818: PUSH
62819: LD_INT 5
62821: PUSH
62822: EMPTY
62823: LIST
62824: LIST
62825: PUSH
62826: EMPTY
62827: LIST
62828: LIST
62829: LIST
62830: LIST
62831: LIST
62832: LIST
62833: LIST
62834: LIST
62835: LIST
62836: LIST
62837: LIST
62838: LIST
62839: LIST
62840: LIST
62841: LIST
62842: LIST
62843: LIST
62844: LIST
62845: LIST
62846: LIST
62847: LIST
62848: LIST
62849: LIST
62850: LIST
62851: LIST
62852: LIST
62853: LIST
62854: LIST
62855: LIST
62856: LIST
62857: LIST
62858: LIST
62859: LIST
62860: LIST
62861: LIST
62862: LIST
62863: LIST
62864: LIST
62865: LIST
62866: LIST
62867: LIST
62868: LIST
62869: LIST
62870: LIST
62871: LIST
62872: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
62873: LD_ADDR_VAR 0 33
62877: PUSH
62878: LD_INT 4
62880: NEG
62881: PUSH
62882: LD_INT 4
62884: NEG
62885: PUSH
62886: EMPTY
62887: LIST
62888: LIST
62889: PUSH
62890: LD_INT 4
62892: NEG
62893: PUSH
62894: LD_INT 5
62896: NEG
62897: PUSH
62898: EMPTY
62899: LIST
62900: LIST
62901: PUSH
62902: LD_INT 3
62904: NEG
62905: PUSH
62906: LD_INT 4
62908: NEG
62909: PUSH
62910: EMPTY
62911: LIST
62912: LIST
62913: PUSH
62914: LD_INT 3
62916: NEG
62917: PUSH
62918: LD_INT 3
62920: NEG
62921: PUSH
62922: EMPTY
62923: LIST
62924: LIST
62925: PUSH
62926: LD_INT 4
62928: NEG
62929: PUSH
62930: LD_INT 3
62932: NEG
62933: PUSH
62934: EMPTY
62935: LIST
62936: LIST
62937: PUSH
62938: LD_INT 5
62940: NEG
62941: PUSH
62942: LD_INT 4
62944: NEG
62945: PUSH
62946: EMPTY
62947: LIST
62948: LIST
62949: PUSH
62950: LD_INT 5
62952: NEG
62953: PUSH
62954: LD_INT 5
62956: NEG
62957: PUSH
62958: EMPTY
62959: LIST
62960: LIST
62961: PUSH
62962: LD_INT 3
62964: NEG
62965: PUSH
62966: LD_INT 5
62968: NEG
62969: PUSH
62970: EMPTY
62971: LIST
62972: LIST
62973: PUSH
62974: LD_INT 5
62976: NEG
62977: PUSH
62978: LD_INT 3
62980: NEG
62981: PUSH
62982: EMPTY
62983: LIST
62984: LIST
62985: PUSH
62986: LD_INT 0
62988: PUSH
62989: LD_INT 3
62991: NEG
62992: PUSH
62993: EMPTY
62994: LIST
62995: LIST
62996: PUSH
62997: LD_INT 0
62999: PUSH
63000: LD_INT 4
63002: NEG
63003: PUSH
63004: EMPTY
63005: LIST
63006: LIST
63007: PUSH
63008: LD_INT 1
63010: PUSH
63011: LD_INT 3
63013: NEG
63014: PUSH
63015: EMPTY
63016: LIST
63017: LIST
63018: PUSH
63019: LD_INT 1
63021: PUSH
63022: LD_INT 2
63024: NEG
63025: PUSH
63026: EMPTY
63027: LIST
63028: LIST
63029: PUSH
63030: LD_INT 0
63032: PUSH
63033: LD_INT 2
63035: NEG
63036: PUSH
63037: EMPTY
63038: LIST
63039: LIST
63040: PUSH
63041: LD_INT 1
63043: NEG
63044: PUSH
63045: LD_INT 3
63047: NEG
63048: PUSH
63049: EMPTY
63050: LIST
63051: LIST
63052: PUSH
63053: LD_INT 1
63055: NEG
63056: PUSH
63057: LD_INT 4
63059: NEG
63060: PUSH
63061: EMPTY
63062: LIST
63063: LIST
63064: PUSH
63065: LD_INT 2
63067: PUSH
63068: LD_INT 2
63070: NEG
63071: PUSH
63072: EMPTY
63073: LIST
63074: LIST
63075: PUSH
63076: LD_INT 2
63078: NEG
63079: PUSH
63080: LD_INT 4
63082: NEG
63083: PUSH
63084: EMPTY
63085: LIST
63086: LIST
63087: PUSH
63088: LD_INT 4
63090: PUSH
63091: LD_INT 0
63093: PUSH
63094: EMPTY
63095: LIST
63096: LIST
63097: PUSH
63098: LD_INT 4
63100: PUSH
63101: LD_INT 1
63103: NEG
63104: PUSH
63105: EMPTY
63106: LIST
63107: LIST
63108: PUSH
63109: LD_INT 5
63111: PUSH
63112: LD_INT 0
63114: PUSH
63115: EMPTY
63116: LIST
63117: LIST
63118: PUSH
63119: LD_INT 5
63121: PUSH
63122: LD_INT 1
63124: PUSH
63125: EMPTY
63126: LIST
63127: LIST
63128: PUSH
63129: LD_INT 4
63131: PUSH
63132: LD_INT 1
63134: PUSH
63135: EMPTY
63136: LIST
63137: LIST
63138: PUSH
63139: LD_INT 3
63141: PUSH
63142: LD_INT 0
63144: PUSH
63145: EMPTY
63146: LIST
63147: LIST
63148: PUSH
63149: LD_INT 3
63151: PUSH
63152: LD_INT 1
63154: NEG
63155: PUSH
63156: EMPTY
63157: LIST
63158: LIST
63159: PUSH
63160: LD_INT 3
63162: PUSH
63163: LD_INT 2
63165: NEG
63166: PUSH
63167: EMPTY
63168: LIST
63169: LIST
63170: PUSH
63171: LD_INT 5
63173: PUSH
63174: LD_INT 2
63176: PUSH
63177: EMPTY
63178: LIST
63179: LIST
63180: PUSH
63181: LD_INT 3
63183: PUSH
63184: LD_INT 3
63186: PUSH
63187: EMPTY
63188: LIST
63189: LIST
63190: PUSH
63191: LD_INT 3
63193: PUSH
63194: LD_INT 2
63196: PUSH
63197: EMPTY
63198: LIST
63199: LIST
63200: PUSH
63201: LD_INT 4
63203: PUSH
63204: LD_INT 3
63206: PUSH
63207: EMPTY
63208: LIST
63209: LIST
63210: PUSH
63211: LD_INT 4
63213: PUSH
63214: LD_INT 4
63216: PUSH
63217: EMPTY
63218: LIST
63219: LIST
63220: PUSH
63221: LD_INT 3
63223: PUSH
63224: LD_INT 4
63226: PUSH
63227: EMPTY
63228: LIST
63229: LIST
63230: PUSH
63231: LD_INT 2
63233: PUSH
63234: LD_INT 3
63236: PUSH
63237: EMPTY
63238: LIST
63239: LIST
63240: PUSH
63241: LD_INT 2
63243: PUSH
63244: LD_INT 2
63246: PUSH
63247: EMPTY
63248: LIST
63249: LIST
63250: PUSH
63251: LD_INT 4
63253: PUSH
63254: LD_INT 2
63256: PUSH
63257: EMPTY
63258: LIST
63259: LIST
63260: PUSH
63261: LD_INT 2
63263: PUSH
63264: LD_INT 4
63266: PUSH
63267: EMPTY
63268: LIST
63269: LIST
63270: PUSH
63271: LD_INT 0
63273: PUSH
63274: LD_INT 4
63276: PUSH
63277: EMPTY
63278: LIST
63279: LIST
63280: PUSH
63281: LD_INT 0
63283: PUSH
63284: LD_INT 3
63286: PUSH
63287: EMPTY
63288: LIST
63289: LIST
63290: PUSH
63291: LD_INT 1
63293: PUSH
63294: LD_INT 4
63296: PUSH
63297: EMPTY
63298: LIST
63299: LIST
63300: PUSH
63301: LD_INT 1
63303: PUSH
63304: LD_INT 5
63306: PUSH
63307: EMPTY
63308: LIST
63309: LIST
63310: PUSH
63311: LD_INT 0
63313: PUSH
63314: LD_INT 5
63316: PUSH
63317: EMPTY
63318: LIST
63319: LIST
63320: PUSH
63321: LD_INT 1
63323: NEG
63324: PUSH
63325: LD_INT 4
63327: PUSH
63328: EMPTY
63329: LIST
63330: LIST
63331: PUSH
63332: LD_INT 1
63334: NEG
63335: PUSH
63336: LD_INT 3
63338: PUSH
63339: EMPTY
63340: LIST
63341: LIST
63342: PUSH
63343: LD_INT 2
63345: PUSH
63346: LD_INT 5
63348: PUSH
63349: EMPTY
63350: LIST
63351: LIST
63352: PUSH
63353: LD_INT 2
63355: NEG
63356: PUSH
63357: LD_INT 3
63359: PUSH
63360: EMPTY
63361: LIST
63362: LIST
63363: PUSH
63364: EMPTY
63365: LIST
63366: LIST
63367: LIST
63368: LIST
63369: LIST
63370: LIST
63371: LIST
63372: LIST
63373: LIST
63374: LIST
63375: LIST
63376: LIST
63377: LIST
63378: LIST
63379: LIST
63380: LIST
63381: LIST
63382: LIST
63383: LIST
63384: LIST
63385: LIST
63386: LIST
63387: LIST
63388: LIST
63389: LIST
63390: LIST
63391: LIST
63392: LIST
63393: LIST
63394: LIST
63395: LIST
63396: LIST
63397: LIST
63398: LIST
63399: LIST
63400: LIST
63401: LIST
63402: LIST
63403: LIST
63404: LIST
63405: LIST
63406: LIST
63407: LIST
63408: LIST
63409: LIST
63410: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
63411: LD_ADDR_VAR 0 34
63415: PUSH
63416: LD_INT 0
63418: PUSH
63419: LD_INT 4
63421: NEG
63422: PUSH
63423: EMPTY
63424: LIST
63425: LIST
63426: PUSH
63427: LD_INT 0
63429: PUSH
63430: LD_INT 5
63432: NEG
63433: PUSH
63434: EMPTY
63435: LIST
63436: LIST
63437: PUSH
63438: LD_INT 1
63440: PUSH
63441: LD_INT 4
63443: NEG
63444: PUSH
63445: EMPTY
63446: LIST
63447: LIST
63448: PUSH
63449: LD_INT 1
63451: PUSH
63452: LD_INT 3
63454: NEG
63455: PUSH
63456: EMPTY
63457: LIST
63458: LIST
63459: PUSH
63460: LD_INT 0
63462: PUSH
63463: LD_INT 3
63465: NEG
63466: PUSH
63467: EMPTY
63468: LIST
63469: LIST
63470: PUSH
63471: LD_INT 1
63473: NEG
63474: PUSH
63475: LD_INT 4
63477: NEG
63478: PUSH
63479: EMPTY
63480: LIST
63481: LIST
63482: PUSH
63483: LD_INT 1
63485: NEG
63486: PUSH
63487: LD_INT 5
63489: NEG
63490: PUSH
63491: EMPTY
63492: LIST
63493: LIST
63494: PUSH
63495: LD_INT 2
63497: PUSH
63498: LD_INT 3
63500: NEG
63501: PUSH
63502: EMPTY
63503: LIST
63504: LIST
63505: PUSH
63506: LD_INT 2
63508: NEG
63509: PUSH
63510: LD_INT 5
63512: NEG
63513: PUSH
63514: EMPTY
63515: LIST
63516: LIST
63517: PUSH
63518: LD_INT 3
63520: PUSH
63521: LD_INT 0
63523: PUSH
63524: EMPTY
63525: LIST
63526: LIST
63527: PUSH
63528: LD_INT 3
63530: PUSH
63531: LD_INT 1
63533: NEG
63534: PUSH
63535: EMPTY
63536: LIST
63537: LIST
63538: PUSH
63539: LD_INT 4
63541: PUSH
63542: LD_INT 0
63544: PUSH
63545: EMPTY
63546: LIST
63547: LIST
63548: PUSH
63549: LD_INT 4
63551: PUSH
63552: LD_INT 1
63554: PUSH
63555: EMPTY
63556: LIST
63557: LIST
63558: PUSH
63559: LD_INT 3
63561: PUSH
63562: LD_INT 1
63564: PUSH
63565: EMPTY
63566: LIST
63567: LIST
63568: PUSH
63569: LD_INT 2
63571: PUSH
63572: LD_INT 0
63574: PUSH
63575: EMPTY
63576: LIST
63577: LIST
63578: PUSH
63579: LD_INT 2
63581: PUSH
63582: LD_INT 1
63584: NEG
63585: PUSH
63586: EMPTY
63587: LIST
63588: LIST
63589: PUSH
63590: LD_INT 2
63592: PUSH
63593: LD_INT 2
63595: NEG
63596: PUSH
63597: EMPTY
63598: LIST
63599: LIST
63600: PUSH
63601: LD_INT 4
63603: PUSH
63604: LD_INT 2
63606: PUSH
63607: EMPTY
63608: LIST
63609: LIST
63610: PUSH
63611: LD_INT 4
63613: PUSH
63614: LD_INT 4
63616: PUSH
63617: EMPTY
63618: LIST
63619: LIST
63620: PUSH
63621: LD_INT 4
63623: PUSH
63624: LD_INT 3
63626: PUSH
63627: EMPTY
63628: LIST
63629: LIST
63630: PUSH
63631: LD_INT 5
63633: PUSH
63634: LD_INT 4
63636: PUSH
63637: EMPTY
63638: LIST
63639: LIST
63640: PUSH
63641: LD_INT 5
63643: PUSH
63644: LD_INT 5
63646: PUSH
63647: EMPTY
63648: LIST
63649: LIST
63650: PUSH
63651: LD_INT 4
63653: PUSH
63654: LD_INT 5
63656: PUSH
63657: EMPTY
63658: LIST
63659: LIST
63660: PUSH
63661: LD_INT 3
63663: PUSH
63664: LD_INT 4
63666: PUSH
63667: EMPTY
63668: LIST
63669: LIST
63670: PUSH
63671: LD_INT 3
63673: PUSH
63674: LD_INT 3
63676: PUSH
63677: EMPTY
63678: LIST
63679: LIST
63680: PUSH
63681: LD_INT 5
63683: PUSH
63684: LD_INT 3
63686: PUSH
63687: EMPTY
63688: LIST
63689: LIST
63690: PUSH
63691: LD_INT 3
63693: PUSH
63694: LD_INT 5
63696: PUSH
63697: EMPTY
63698: LIST
63699: LIST
63700: PUSH
63701: LD_INT 0
63703: PUSH
63704: LD_INT 3
63706: PUSH
63707: EMPTY
63708: LIST
63709: LIST
63710: PUSH
63711: LD_INT 0
63713: PUSH
63714: LD_INT 2
63716: PUSH
63717: EMPTY
63718: LIST
63719: LIST
63720: PUSH
63721: LD_INT 1
63723: PUSH
63724: LD_INT 3
63726: PUSH
63727: EMPTY
63728: LIST
63729: LIST
63730: PUSH
63731: LD_INT 1
63733: PUSH
63734: LD_INT 4
63736: PUSH
63737: EMPTY
63738: LIST
63739: LIST
63740: PUSH
63741: LD_INT 0
63743: PUSH
63744: LD_INT 4
63746: PUSH
63747: EMPTY
63748: LIST
63749: LIST
63750: PUSH
63751: LD_INT 1
63753: NEG
63754: PUSH
63755: LD_INT 3
63757: PUSH
63758: EMPTY
63759: LIST
63760: LIST
63761: PUSH
63762: LD_INT 1
63764: NEG
63765: PUSH
63766: LD_INT 2
63768: PUSH
63769: EMPTY
63770: LIST
63771: LIST
63772: PUSH
63773: LD_INT 2
63775: PUSH
63776: LD_INT 4
63778: PUSH
63779: EMPTY
63780: LIST
63781: LIST
63782: PUSH
63783: LD_INT 2
63785: NEG
63786: PUSH
63787: LD_INT 2
63789: PUSH
63790: EMPTY
63791: LIST
63792: LIST
63793: PUSH
63794: LD_INT 4
63796: NEG
63797: PUSH
63798: LD_INT 0
63800: PUSH
63801: EMPTY
63802: LIST
63803: LIST
63804: PUSH
63805: LD_INT 4
63807: NEG
63808: PUSH
63809: LD_INT 1
63811: NEG
63812: PUSH
63813: EMPTY
63814: LIST
63815: LIST
63816: PUSH
63817: LD_INT 3
63819: NEG
63820: PUSH
63821: LD_INT 0
63823: PUSH
63824: EMPTY
63825: LIST
63826: LIST
63827: PUSH
63828: LD_INT 3
63830: NEG
63831: PUSH
63832: LD_INT 1
63834: PUSH
63835: EMPTY
63836: LIST
63837: LIST
63838: PUSH
63839: LD_INT 4
63841: NEG
63842: PUSH
63843: LD_INT 1
63845: PUSH
63846: EMPTY
63847: LIST
63848: LIST
63849: PUSH
63850: LD_INT 5
63852: NEG
63853: PUSH
63854: LD_INT 0
63856: PUSH
63857: EMPTY
63858: LIST
63859: LIST
63860: PUSH
63861: LD_INT 5
63863: NEG
63864: PUSH
63865: LD_INT 1
63867: NEG
63868: PUSH
63869: EMPTY
63870: LIST
63871: LIST
63872: PUSH
63873: LD_INT 5
63875: NEG
63876: PUSH
63877: LD_INT 2
63879: NEG
63880: PUSH
63881: EMPTY
63882: LIST
63883: LIST
63884: PUSH
63885: LD_INT 3
63887: NEG
63888: PUSH
63889: LD_INT 2
63891: PUSH
63892: EMPTY
63893: LIST
63894: LIST
63895: PUSH
63896: EMPTY
63897: LIST
63898: LIST
63899: LIST
63900: LIST
63901: LIST
63902: LIST
63903: LIST
63904: LIST
63905: LIST
63906: LIST
63907: LIST
63908: LIST
63909: LIST
63910: LIST
63911: LIST
63912: LIST
63913: LIST
63914: LIST
63915: LIST
63916: LIST
63917: LIST
63918: LIST
63919: LIST
63920: LIST
63921: LIST
63922: LIST
63923: LIST
63924: LIST
63925: LIST
63926: LIST
63927: LIST
63928: LIST
63929: LIST
63930: LIST
63931: LIST
63932: LIST
63933: LIST
63934: LIST
63935: LIST
63936: LIST
63937: LIST
63938: LIST
63939: LIST
63940: LIST
63941: LIST
63942: ST_TO_ADDR
// end ; end ;
63943: GO 63946
63945: POP
// case btype of b_depot , b_warehouse :
63946: LD_VAR 0 1
63950: PUSH
63951: LD_INT 0
63953: DOUBLE
63954: EQUAL
63955: IFTRUE 63965
63957: LD_INT 1
63959: DOUBLE
63960: EQUAL
63961: IFTRUE 63965
63963: GO 64166
63965: POP
// case nation of nation_american :
63966: LD_VAR 0 5
63970: PUSH
63971: LD_INT 1
63973: DOUBLE
63974: EQUAL
63975: IFTRUE 63979
63977: GO 64035
63979: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
63980: LD_ADDR_VAR 0 9
63984: PUSH
63985: LD_VAR 0 11
63989: PUSH
63990: LD_VAR 0 12
63994: PUSH
63995: LD_VAR 0 13
63999: PUSH
64000: LD_VAR 0 14
64004: PUSH
64005: LD_VAR 0 15
64009: PUSH
64010: LD_VAR 0 16
64014: PUSH
64015: EMPTY
64016: LIST
64017: LIST
64018: LIST
64019: LIST
64020: LIST
64021: LIST
64022: PUSH
64023: LD_VAR 0 4
64027: PUSH
64028: LD_INT 1
64030: PLUS
64031: ARRAY
64032: ST_TO_ADDR
64033: GO 64164
64035: LD_INT 2
64037: DOUBLE
64038: EQUAL
64039: IFTRUE 64043
64041: GO 64099
64043: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
64044: LD_ADDR_VAR 0 9
64048: PUSH
64049: LD_VAR 0 17
64053: PUSH
64054: LD_VAR 0 18
64058: PUSH
64059: LD_VAR 0 19
64063: PUSH
64064: LD_VAR 0 20
64068: PUSH
64069: LD_VAR 0 21
64073: PUSH
64074: LD_VAR 0 22
64078: PUSH
64079: EMPTY
64080: LIST
64081: LIST
64082: LIST
64083: LIST
64084: LIST
64085: LIST
64086: PUSH
64087: LD_VAR 0 4
64091: PUSH
64092: LD_INT 1
64094: PLUS
64095: ARRAY
64096: ST_TO_ADDR
64097: GO 64164
64099: LD_INT 3
64101: DOUBLE
64102: EQUAL
64103: IFTRUE 64107
64105: GO 64163
64107: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
64108: LD_ADDR_VAR 0 9
64112: PUSH
64113: LD_VAR 0 23
64117: PUSH
64118: LD_VAR 0 24
64122: PUSH
64123: LD_VAR 0 25
64127: PUSH
64128: LD_VAR 0 26
64132: PUSH
64133: LD_VAR 0 27
64137: PUSH
64138: LD_VAR 0 28
64142: PUSH
64143: EMPTY
64144: LIST
64145: LIST
64146: LIST
64147: LIST
64148: LIST
64149: LIST
64150: PUSH
64151: LD_VAR 0 4
64155: PUSH
64156: LD_INT 1
64158: PLUS
64159: ARRAY
64160: ST_TO_ADDR
64161: GO 64164
64163: POP
64164: GO 64719
64166: LD_INT 2
64168: DOUBLE
64169: EQUAL
64170: IFTRUE 64180
64172: LD_INT 3
64174: DOUBLE
64175: EQUAL
64176: IFTRUE 64180
64178: GO 64236
64180: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
64181: LD_ADDR_VAR 0 9
64185: PUSH
64186: LD_VAR 0 29
64190: PUSH
64191: LD_VAR 0 30
64195: PUSH
64196: LD_VAR 0 31
64200: PUSH
64201: LD_VAR 0 32
64205: PUSH
64206: LD_VAR 0 33
64210: PUSH
64211: LD_VAR 0 34
64215: PUSH
64216: EMPTY
64217: LIST
64218: LIST
64219: LIST
64220: LIST
64221: LIST
64222: LIST
64223: PUSH
64224: LD_VAR 0 4
64228: PUSH
64229: LD_INT 1
64231: PLUS
64232: ARRAY
64233: ST_TO_ADDR
64234: GO 64719
64236: LD_INT 16
64238: DOUBLE
64239: EQUAL
64240: IFTRUE 64298
64242: LD_INT 17
64244: DOUBLE
64245: EQUAL
64246: IFTRUE 64298
64248: LD_INT 18
64250: DOUBLE
64251: EQUAL
64252: IFTRUE 64298
64254: LD_INT 19
64256: DOUBLE
64257: EQUAL
64258: IFTRUE 64298
64260: LD_INT 22
64262: DOUBLE
64263: EQUAL
64264: IFTRUE 64298
64266: LD_INT 20
64268: DOUBLE
64269: EQUAL
64270: IFTRUE 64298
64272: LD_INT 21
64274: DOUBLE
64275: EQUAL
64276: IFTRUE 64298
64278: LD_INT 23
64280: DOUBLE
64281: EQUAL
64282: IFTRUE 64298
64284: LD_INT 24
64286: DOUBLE
64287: EQUAL
64288: IFTRUE 64298
64290: LD_INT 25
64292: DOUBLE
64293: EQUAL
64294: IFTRUE 64298
64296: GO 64354
64298: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
64299: LD_ADDR_VAR 0 9
64303: PUSH
64304: LD_VAR 0 35
64308: PUSH
64309: LD_VAR 0 36
64313: PUSH
64314: LD_VAR 0 37
64318: PUSH
64319: LD_VAR 0 38
64323: PUSH
64324: LD_VAR 0 39
64328: PUSH
64329: LD_VAR 0 40
64333: PUSH
64334: EMPTY
64335: LIST
64336: LIST
64337: LIST
64338: LIST
64339: LIST
64340: LIST
64341: PUSH
64342: LD_VAR 0 4
64346: PUSH
64347: LD_INT 1
64349: PLUS
64350: ARRAY
64351: ST_TO_ADDR
64352: GO 64719
64354: LD_INT 6
64356: DOUBLE
64357: EQUAL
64358: IFTRUE 64410
64360: LD_INT 7
64362: DOUBLE
64363: EQUAL
64364: IFTRUE 64410
64366: LD_INT 8
64368: DOUBLE
64369: EQUAL
64370: IFTRUE 64410
64372: LD_INT 13
64374: DOUBLE
64375: EQUAL
64376: IFTRUE 64410
64378: LD_INT 12
64380: DOUBLE
64381: EQUAL
64382: IFTRUE 64410
64384: LD_INT 15
64386: DOUBLE
64387: EQUAL
64388: IFTRUE 64410
64390: LD_INT 11
64392: DOUBLE
64393: EQUAL
64394: IFTRUE 64410
64396: LD_INT 14
64398: DOUBLE
64399: EQUAL
64400: IFTRUE 64410
64402: LD_INT 10
64404: DOUBLE
64405: EQUAL
64406: IFTRUE 64410
64408: GO 64466
64410: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
64411: LD_ADDR_VAR 0 9
64415: PUSH
64416: LD_VAR 0 41
64420: PUSH
64421: LD_VAR 0 42
64425: PUSH
64426: LD_VAR 0 43
64430: PUSH
64431: LD_VAR 0 44
64435: PUSH
64436: LD_VAR 0 45
64440: PUSH
64441: LD_VAR 0 46
64445: PUSH
64446: EMPTY
64447: LIST
64448: LIST
64449: LIST
64450: LIST
64451: LIST
64452: LIST
64453: PUSH
64454: LD_VAR 0 4
64458: PUSH
64459: LD_INT 1
64461: PLUS
64462: ARRAY
64463: ST_TO_ADDR
64464: GO 64719
64466: LD_INT 36
64468: DOUBLE
64469: EQUAL
64470: IFTRUE 64474
64472: GO 64530
64474: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
64475: LD_ADDR_VAR 0 9
64479: PUSH
64480: LD_VAR 0 47
64484: PUSH
64485: LD_VAR 0 48
64489: PUSH
64490: LD_VAR 0 49
64494: PUSH
64495: LD_VAR 0 50
64499: PUSH
64500: LD_VAR 0 51
64504: PUSH
64505: LD_VAR 0 52
64509: PUSH
64510: EMPTY
64511: LIST
64512: LIST
64513: LIST
64514: LIST
64515: LIST
64516: LIST
64517: PUSH
64518: LD_VAR 0 4
64522: PUSH
64523: LD_INT 1
64525: PLUS
64526: ARRAY
64527: ST_TO_ADDR
64528: GO 64719
64530: LD_INT 4
64532: DOUBLE
64533: EQUAL
64534: IFTRUE 64556
64536: LD_INT 5
64538: DOUBLE
64539: EQUAL
64540: IFTRUE 64556
64542: LD_INT 34
64544: DOUBLE
64545: EQUAL
64546: IFTRUE 64556
64548: LD_INT 37
64550: DOUBLE
64551: EQUAL
64552: IFTRUE 64556
64554: GO 64612
64556: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
64557: LD_ADDR_VAR 0 9
64561: PUSH
64562: LD_VAR 0 53
64566: PUSH
64567: LD_VAR 0 54
64571: PUSH
64572: LD_VAR 0 55
64576: PUSH
64577: LD_VAR 0 56
64581: PUSH
64582: LD_VAR 0 57
64586: PUSH
64587: LD_VAR 0 58
64591: PUSH
64592: EMPTY
64593: LIST
64594: LIST
64595: LIST
64596: LIST
64597: LIST
64598: LIST
64599: PUSH
64600: LD_VAR 0 4
64604: PUSH
64605: LD_INT 1
64607: PLUS
64608: ARRAY
64609: ST_TO_ADDR
64610: GO 64719
64612: LD_INT 31
64614: DOUBLE
64615: EQUAL
64616: IFTRUE 64662
64618: LD_INT 32
64620: DOUBLE
64621: EQUAL
64622: IFTRUE 64662
64624: LD_INT 33
64626: DOUBLE
64627: EQUAL
64628: IFTRUE 64662
64630: LD_INT 27
64632: DOUBLE
64633: EQUAL
64634: IFTRUE 64662
64636: LD_INT 26
64638: DOUBLE
64639: EQUAL
64640: IFTRUE 64662
64642: LD_INT 28
64644: DOUBLE
64645: EQUAL
64646: IFTRUE 64662
64648: LD_INT 29
64650: DOUBLE
64651: EQUAL
64652: IFTRUE 64662
64654: LD_INT 30
64656: DOUBLE
64657: EQUAL
64658: IFTRUE 64662
64660: GO 64718
64662: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
64663: LD_ADDR_VAR 0 9
64667: PUSH
64668: LD_VAR 0 59
64672: PUSH
64673: LD_VAR 0 60
64677: PUSH
64678: LD_VAR 0 61
64682: PUSH
64683: LD_VAR 0 62
64687: PUSH
64688: LD_VAR 0 63
64692: PUSH
64693: LD_VAR 0 64
64697: PUSH
64698: EMPTY
64699: LIST
64700: LIST
64701: LIST
64702: LIST
64703: LIST
64704: LIST
64705: PUSH
64706: LD_VAR 0 4
64710: PUSH
64711: LD_INT 1
64713: PLUS
64714: ARRAY
64715: ST_TO_ADDR
64716: GO 64719
64718: POP
// temp_list2 = [ ] ;
64719: LD_ADDR_VAR 0 10
64723: PUSH
64724: EMPTY
64725: ST_TO_ADDR
// for i in temp_list do
64726: LD_ADDR_VAR 0 8
64730: PUSH
64731: LD_VAR 0 9
64735: PUSH
64736: FOR_IN
64737: IFFALSE 64789
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
64739: LD_ADDR_VAR 0 10
64743: PUSH
64744: LD_VAR 0 10
64748: PUSH
64749: LD_VAR 0 8
64753: PUSH
64754: LD_INT 1
64756: ARRAY
64757: PUSH
64758: LD_VAR 0 2
64762: PLUS
64763: PUSH
64764: LD_VAR 0 8
64768: PUSH
64769: LD_INT 2
64771: ARRAY
64772: PUSH
64773: LD_VAR 0 3
64777: PLUS
64778: PUSH
64779: EMPTY
64780: LIST
64781: LIST
64782: PUSH
64783: EMPTY
64784: LIST
64785: ADD
64786: ST_TO_ADDR
64787: GO 64736
64789: POP
64790: POP
// result = temp_list2 ;
64791: LD_ADDR_VAR 0 7
64795: PUSH
64796: LD_VAR 0 10
64800: ST_TO_ADDR
// end ;
64801: LD_VAR 0 7
64805: RET
// export function EnemyInRange ( unit , dist ) ; begin
64806: LD_INT 0
64808: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
64809: LD_ADDR_VAR 0 3
64813: PUSH
64814: LD_VAR 0 1
64818: PPUSH
64819: CALL_OW 255
64823: PPUSH
64824: LD_VAR 0 1
64828: PPUSH
64829: CALL_OW 250
64833: PPUSH
64834: LD_VAR 0 1
64838: PPUSH
64839: CALL_OW 251
64843: PPUSH
64844: LD_VAR 0 2
64848: PPUSH
64849: CALL 38063 0 4
64853: PUSH
64854: LD_INT 4
64856: ARRAY
64857: ST_TO_ADDR
// end ;
64858: LD_VAR 0 3
64862: RET
// export function PlayerSeeMe ( unit ) ; begin
64863: LD_INT 0
64865: PPUSH
// result := See ( your_side , unit ) ;
64866: LD_ADDR_VAR 0 2
64870: PUSH
64871: LD_OWVAR 2
64875: PPUSH
64876: LD_VAR 0 1
64880: PPUSH
64881: CALL_OW 292
64885: ST_TO_ADDR
// end ;
64886: LD_VAR 0 2
64890: RET
// export function ReverseDir ( unit ) ; begin
64891: LD_INT 0
64893: PPUSH
// if not unit then
64894: LD_VAR 0 1
64898: NOT
64899: IFFALSE 64903
// exit ;
64901: GO 64926
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
64903: LD_ADDR_VAR 0 2
64907: PUSH
64908: LD_VAR 0 1
64912: PPUSH
64913: CALL_OW 254
64917: PUSH
64918: LD_INT 3
64920: PLUS
64921: PUSH
64922: LD_INT 6
64924: MOD
64925: ST_TO_ADDR
// end ;
64926: LD_VAR 0 2
64930: RET
// export function ReverseArray ( array ) ; var i ; begin
64931: LD_INT 0
64933: PPUSH
64934: PPUSH
// if not array then
64935: LD_VAR 0 1
64939: NOT
64940: IFFALSE 64944
// exit ;
64942: GO 64999
// result := [ ] ;
64944: LD_ADDR_VAR 0 2
64948: PUSH
64949: EMPTY
64950: ST_TO_ADDR
// for i := array downto 1 do
64951: LD_ADDR_VAR 0 3
64955: PUSH
64956: DOUBLE
64957: LD_VAR 0 1
64961: INC
64962: ST_TO_ADDR
64963: LD_INT 1
64965: PUSH
64966: FOR_DOWNTO
64967: IFFALSE 64997
// result := Join ( result , array [ i ] ) ;
64969: LD_ADDR_VAR 0 2
64973: PUSH
64974: LD_VAR 0 2
64978: PPUSH
64979: LD_VAR 0 1
64983: PUSH
64984: LD_VAR 0 3
64988: ARRAY
64989: PPUSH
64990: CALL 69851 0 2
64994: ST_TO_ADDR
64995: GO 64966
64997: POP
64998: POP
// end ;
64999: LD_VAR 0 2
65003: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
65004: LD_INT 0
65006: PPUSH
65007: PPUSH
65008: PPUSH
65009: PPUSH
65010: PPUSH
65011: PPUSH
// if not unit or not hexes then
65012: LD_VAR 0 1
65016: NOT
65017: IFTRUE 65026
65019: PUSH
65020: LD_VAR 0 2
65024: NOT
65025: OR
65026: IFFALSE 65030
// exit ;
65028: GO 65153
// dist := 9999 ;
65030: LD_ADDR_VAR 0 5
65034: PUSH
65035: LD_INT 9999
65037: ST_TO_ADDR
// for i = 1 to hexes do
65038: LD_ADDR_VAR 0 4
65042: PUSH
65043: DOUBLE
65044: LD_INT 1
65046: DEC
65047: ST_TO_ADDR
65048: LD_VAR 0 2
65052: PUSH
65053: FOR_TO
65054: IFFALSE 65141
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
65056: LD_ADDR_VAR 0 6
65060: PUSH
65061: LD_VAR 0 1
65065: PPUSH
65066: LD_VAR 0 2
65070: PUSH
65071: LD_VAR 0 4
65075: ARRAY
65076: PUSH
65077: LD_INT 1
65079: ARRAY
65080: PPUSH
65081: LD_VAR 0 2
65085: PUSH
65086: LD_VAR 0 4
65090: ARRAY
65091: PUSH
65092: LD_INT 2
65094: ARRAY
65095: PPUSH
65096: CALL_OW 297
65100: ST_TO_ADDR
// if tdist < dist then
65101: LD_VAR 0 6
65105: PUSH
65106: LD_VAR 0 5
65110: LESS
65111: IFFALSE 65139
// begin hex := hexes [ i ] ;
65113: LD_ADDR_VAR 0 8
65117: PUSH
65118: LD_VAR 0 2
65122: PUSH
65123: LD_VAR 0 4
65127: ARRAY
65128: ST_TO_ADDR
// dist := tdist ;
65129: LD_ADDR_VAR 0 5
65133: PUSH
65134: LD_VAR 0 6
65138: ST_TO_ADDR
// end ; end ;
65139: GO 65053
65141: POP
65142: POP
// result := hex ;
65143: LD_ADDR_VAR 0 3
65147: PUSH
65148: LD_VAR 0 8
65152: ST_TO_ADDR
// end ;
65153: LD_VAR 0 3
65157: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
65158: LD_INT 0
65160: PPUSH
65161: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
65162: LD_VAR 0 1
65166: NOT
65167: IFTRUE 65206
65169: PUSH
65170: LD_VAR 0 1
65174: PUSH
65175: LD_INT 21
65177: PUSH
65178: LD_INT 2
65180: PUSH
65181: EMPTY
65182: LIST
65183: LIST
65184: PUSH
65185: LD_INT 23
65187: PUSH
65188: LD_INT 2
65190: PUSH
65191: EMPTY
65192: LIST
65193: LIST
65194: PUSH
65195: EMPTY
65196: LIST
65197: LIST
65198: PPUSH
65199: CALL_OW 69
65203: IN
65204: NOT
65205: OR
65206: IFFALSE 65210
// exit ;
65208: GO 65257
// for i = 1 to 3 do
65210: LD_ADDR_VAR 0 3
65214: PUSH
65215: DOUBLE
65216: LD_INT 1
65218: DEC
65219: ST_TO_ADDR
65220: LD_INT 3
65222: PUSH
65223: FOR_TO
65224: IFFALSE 65255
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
65226: LD_VAR 0 1
65230: PPUSH
65231: CALL_OW 250
65235: PPUSH
65236: LD_VAR 0 1
65240: PPUSH
65241: CALL_OW 251
65245: PPUSH
65246: LD_INT 1
65248: PPUSH
65249: CALL_OW 453
65253: GO 65223
65255: POP
65256: POP
// end ;
65257: LD_VAR 0 2
65261: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
65262: LD_INT 0
65264: PPUSH
65265: PPUSH
65266: PPUSH
65267: PPUSH
65268: PPUSH
65269: PPUSH
// if not unit or not enemy_unit then
65270: LD_VAR 0 1
65274: NOT
65275: IFTRUE 65284
65277: PUSH
65278: LD_VAR 0 2
65282: NOT
65283: OR
65284: IFFALSE 65288
// exit ;
65286: GO 65769
// if GetLives ( i ) < 250 then
65288: LD_VAR 0 4
65292: PPUSH
65293: CALL_OW 256
65297: PUSH
65298: LD_INT 250
65300: LESS
65301: IFFALSE 65314
// begin ComAutodestruct ( i ) ;
65303: LD_VAR 0 4
65307: PPUSH
65308: CALL 65158 0 1
// exit ;
65312: GO 65769
// end ; x := GetX ( enemy_unit ) ;
65314: LD_ADDR_VAR 0 7
65318: PUSH
65319: LD_VAR 0 2
65323: PPUSH
65324: CALL_OW 250
65328: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
65329: LD_ADDR_VAR 0 8
65333: PUSH
65334: LD_VAR 0 2
65338: PPUSH
65339: CALL_OW 251
65343: ST_TO_ADDR
// if not x or not y then
65344: LD_VAR 0 7
65348: NOT
65349: IFTRUE 65358
65351: PUSH
65352: LD_VAR 0 8
65356: NOT
65357: OR
65358: IFFALSE 65362
// exit ;
65360: GO 65769
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
65362: LD_ADDR_VAR 0 6
65366: PUSH
65367: LD_VAR 0 7
65371: PPUSH
65372: LD_INT 0
65374: PPUSH
65375: LD_INT 4
65377: PPUSH
65378: CALL_OW 272
65382: PUSH
65383: LD_VAR 0 8
65387: PPUSH
65388: LD_INT 0
65390: PPUSH
65391: LD_INT 4
65393: PPUSH
65394: CALL_OW 273
65398: PUSH
65399: EMPTY
65400: LIST
65401: LIST
65402: PUSH
65403: LD_VAR 0 7
65407: PPUSH
65408: LD_INT 1
65410: PPUSH
65411: LD_INT 4
65413: PPUSH
65414: CALL_OW 272
65418: PUSH
65419: LD_VAR 0 8
65423: PPUSH
65424: LD_INT 1
65426: PPUSH
65427: LD_INT 4
65429: PPUSH
65430: CALL_OW 273
65434: PUSH
65435: EMPTY
65436: LIST
65437: LIST
65438: PUSH
65439: LD_VAR 0 7
65443: PPUSH
65444: LD_INT 2
65446: PPUSH
65447: LD_INT 4
65449: PPUSH
65450: CALL_OW 272
65454: PUSH
65455: LD_VAR 0 8
65459: PPUSH
65460: LD_INT 2
65462: PPUSH
65463: LD_INT 4
65465: PPUSH
65466: CALL_OW 273
65470: PUSH
65471: EMPTY
65472: LIST
65473: LIST
65474: PUSH
65475: LD_VAR 0 7
65479: PPUSH
65480: LD_INT 3
65482: PPUSH
65483: LD_INT 4
65485: PPUSH
65486: CALL_OW 272
65490: PUSH
65491: LD_VAR 0 8
65495: PPUSH
65496: LD_INT 3
65498: PPUSH
65499: LD_INT 4
65501: PPUSH
65502: CALL_OW 273
65506: PUSH
65507: EMPTY
65508: LIST
65509: LIST
65510: PUSH
65511: LD_VAR 0 7
65515: PPUSH
65516: LD_INT 4
65518: PPUSH
65519: LD_INT 4
65521: PPUSH
65522: CALL_OW 272
65526: PUSH
65527: LD_VAR 0 8
65531: PPUSH
65532: LD_INT 4
65534: PPUSH
65535: LD_INT 4
65537: PPUSH
65538: CALL_OW 273
65542: PUSH
65543: EMPTY
65544: LIST
65545: LIST
65546: PUSH
65547: LD_VAR 0 7
65551: PPUSH
65552: LD_INT 5
65554: PPUSH
65555: LD_INT 4
65557: PPUSH
65558: CALL_OW 272
65562: PUSH
65563: LD_VAR 0 8
65567: PPUSH
65568: LD_INT 5
65570: PPUSH
65571: LD_INT 4
65573: PPUSH
65574: CALL_OW 273
65578: PUSH
65579: EMPTY
65580: LIST
65581: LIST
65582: PUSH
65583: EMPTY
65584: LIST
65585: LIST
65586: LIST
65587: LIST
65588: LIST
65589: LIST
65590: ST_TO_ADDR
// for i = tmp downto 1 do
65591: LD_ADDR_VAR 0 4
65595: PUSH
65596: DOUBLE
65597: LD_VAR 0 6
65601: INC
65602: ST_TO_ADDR
65603: LD_INT 1
65605: PUSH
65606: FOR_DOWNTO
65607: IFFALSE 65710
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
65609: LD_VAR 0 6
65613: PUSH
65614: LD_VAR 0 4
65618: ARRAY
65619: PUSH
65620: LD_INT 1
65622: ARRAY
65623: PPUSH
65624: LD_VAR 0 6
65628: PUSH
65629: LD_VAR 0 4
65633: ARRAY
65634: PUSH
65635: LD_INT 2
65637: ARRAY
65638: PPUSH
65639: CALL_OW 488
65643: NOT
65644: IFTRUE 65686
65646: PUSH
65647: LD_VAR 0 6
65651: PUSH
65652: LD_VAR 0 4
65656: ARRAY
65657: PUSH
65658: LD_INT 1
65660: ARRAY
65661: PPUSH
65662: LD_VAR 0 6
65666: PUSH
65667: LD_VAR 0 4
65671: ARRAY
65672: PUSH
65673: LD_INT 2
65675: ARRAY
65676: PPUSH
65677: CALL_OW 428
65681: PUSH
65682: LD_INT 0
65684: NONEQUAL
65685: OR
65686: IFFALSE 65708
// tmp := Delete ( tmp , i ) ;
65688: LD_ADDR_VAR 0 6
65692: PUSH
65693: LD_VAR 0 6
65697: PPUSH
65698: LD_VAR 0 4
65702: PPUSH
65703: CALL_OW 3
65707: ST_TO_ADDR
65708: GO 65606
65710: POP
65711: POP
// j := GetClosestHex ( unit , tmp ) ;
65712: LD_ADDR_VAR 0 5
65716: PUSH
65717: LD_VAR 0 1
65721: PPUSH
65722: LD_VAR 0 6
65726: PPUSH
65727: CALL 65004 0 2
65731: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
65732: LD_VAR 0 1
65736: PPUSH
65737: LD_VAR 0 5
65741: PUSH
65742: LD_INT 1
65744: ARRAY
65745: PPUSH
65746: LD_VAR 0 5
65750: PUSH
65751: LD_INT 2
65753: ARRAY
65754: PPUSH
65755: CALL_OW 111
// result := j ;
65759: LD_ADDR_VAR 0 3
65763: PUSH
65764: LD_VAR 0 5
65768: ST_TO_ADDR
// end ;
65769: LD_VAR 0 3
65773: RET
// export function PrepareApemanSoldier ( ) ; begin
65774: LD_INT 0
65776: PPUSH
// uc_nation := 0 ;
65777: LD_ADDR_OWVAR 21
65781: PUSH
65782: LD_INT 0
65784: ST_TO_ADDR
// hc_sex := sex_male ;
65785: LD_ADDR_OWVAR 27
65789: PUSH
65790: LD_INT 1
65792: ST_TO_ADDR
// hc_name :=  ;
65793: LD_ADDR_OWVAR 26
65797: PUSH
65798: LD_STRING 
65800: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
65801: LD_ADDR_OWVAR 28
65805: PUSH
65806: LD_INT 15
65808: ST_TO_ADDR
// hc_gallery :=  ;
65809: LD_ADDR_OWVAR 33
65813: PUSH
65814: LD_STRING 
65816: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
65817: LD_ADDR_OWVAR 31
65821: PUSH
65822: LD_INT 0
65824: PPUSH
65825: LD_INT 3
65827: PPUSH
65828: CALL_OW 12
65832: PUSH
65833: LD_INT 0
65835: PPUSH
65836: LD_INT 3
65838: PPUSH
65839: CALL_OW 12
65843: PUSH
65844: LD_INT 0
65846: PUSH
65847: LD_INT 0
65849: PUSH
65850: EMPTY
65851: LIST
65852: LIST
65853: LIST
65854: LIST
65855: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
65856: LD_ADDR_OWVAR 29
65860: PUSH
65861: LD_INT 10
65863: PUSH
65864: LD_INT 12
65866: PUSH
65867: EMPTY
65868: LIST
65869: LIST
65870: ST_TO_ADDR
// end ;
65871: LD_VAR 0 1
65875: RET
// export function PrepareApemanEngineer ( ) ; begin
65876: LD_INT 0
65878: PPUSH
// uc_nation := 0 ;
65879: LD_ADDR_OWVAR 21
65883: PUSH
65884: LD_INT 0
65886: ST_TO_ADDR
// hc_sex := sex_male ;
65887: LD_ADDR_OWVAR 27
65891: PUSH
65892: LD_INT 1
65894: ST_TO_ADDR
// hc_name :=  ;
65895: LD_ADDR_OWVAR 26
65899: PUSH
65900: LD_STRING 
65902: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
65903: LD_ADDR_OWVAR 28
65907: PUSH
65908: LD_INT 16
65910: ST_TO_ADDR
// hc_gallery :=  ;
65911: LD_ADDR_OWVAR 33
65915: PUSH
65916: LD_STRING 
65918: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
65919: LD_ADDR_OWVAR 31
65923: PUSH
65924: LD_INT 0
65926: PPUSH
65927: LD_INT 3
65929: PPUSH
65930: CALL_OW 12
65934: PUSH
65935: LD_INT 0
65937: PPUSH
65938: LD_INT 3
65940: PPUSH
65941: CALL_OW 12
65945: PUSH
65946: LD_INT 0
65948: PUSH
65949: LD_INT 0
65951: PUSH
65952: EMPTY
65953: LIST
65954: LIST
65955: LIST
65956: LIST
65957: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
65958: LD_ADDR_OWVAR 29
65962: PUSH
65963: LD_INT 10
65965: PUSH
65966: LD_INT 12
65968: PUSH
65969: EMPTY
65970: LIST
65971: LIST
65972: ST_TO_ADDR
// end ;
65973: LD_VAR 0 1
65977: RET
// export function PrepareApeman ( agressivity ) ; begin
65978: LD_INT 0
65980: PPUSH
// uc_side := 0 ;
65981: LD_ADDR_OWVAR 20
65985: PUSH
65986: LD_INT 0
65988: ST_TO_ADDR
// uc_nation := 0 ;
65989: LD_ADDR_OWVAR 21
65993: PUSH
65994: LD_INT 0
65996: ST_TO_ADDR
// hc_sex := sex_male ;
65997: LD_ADDR_OWVAR 27
66001: PUSH
66002: LD_INT 1
66004: ST_TO_ADDR
// hc_class := class_apeman ;
66005: LD_ADDR_OWVAR 28
66009: PUSH
66010: LD_INT 12
66012: ST_TO_ADDR
// hc_gallery :=  ;
66013: LD_ADDR_OWVAR 33
66017: PUSH
66018: LD_STRING 
66020: ST_TO_ADDR
// hc_name :=  ;
66021: LD_ADDR_OWVAR 26
66025: PUSH
66026: LD_STRING 
66028: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
66029: LD_ADDR_OWVAR 29
66033: PUSH
66034: LD_INT 10
66036: PUSH
66037: LD_INT 12
66039: PUSH
66040: EMPTY
66041: LIST
66042: LIST
66043: ST_TO_ADDR
// if agressivity = 0 then
66044: LD_VAR 0 1
66048: PUSH
66049: LD_INT 0
66051: EQUAL
66052: IFFALSE 66064
// hc_agressivity := 0 else
66054: LD_ADDR_OWVAR 35
66058: PUSH
66059: LD_INT 0
66061: ST_TO_ADDR
66062: GO 66085
// hc_agressivity := rand ( - agressivity , agressivity ) ;
66064: LD_ADDR_OWVAR 35
66068: PUSH
66069: LD_VAR 0 1
66073: NEG
66074: PPUSH
66075: LD_VAR 0 1
66079: PPUSH
66080: CALL_OW 12
66084: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
66085: LD_ADDR_OWVAR 31
66089: PUSH
66090: LD_INT 0
66092: PPUSH
66093: LD_INT 3
66095: PPUSH
66096: CALL_OW 12
66100: PUSH
66101: LD_INT 0
66103: PPUSH
66104: LD_INT 3
66106: PPUSH
66107: CALL_OW 12
66111: PUSH
66112: LD_INT 0
66114: PUSH
66115: LD_INT 0
66117: PUSH
66118: EMPTY
66119: LIST
66120: LIST
66121: LIST
66122: LIST
66123: ST_TO_ADDR
// end ;
66124: LD_VAR 0 2
66128: RET
// export function PrepareTiger ( agressivity ) ; begin
66129: LD_INT 0
66131: PPUSH
// uc_side := 0 ;
66132: LD_ADDR_OWVAR 20
66136: PUSH
66137: LD_INT 0
66139: ST_TO_ADDR
// uc_nation := 0 ;
66140: LD_ADDR_OWVAR 21
66144: PUSH
66145: LD_INT 0
66147: ST_TO_ADDR
// InitHc ;
66148: CALL_OW 19
// hc_class := class_tiger ;
66152: LD_ADDR_OWVAR 28
66156: PUSH
66157: LD_INT 14
66159: ST_TO_ADDR
// hc_gallery :=  ;
66160: LD_ADDR_OWVAR 33
66164: PUSH
66165: LD_STRING 
66167: ST_TO_ADDR
// hc_name :=  ;
66168: LD_ADDR_OWVAR 26
66172: PUSH
66173: LD_STRING 
66175: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
66176: LD_ADDR_OWVAR 35
66180: PUSH
66181: LD_VAR 0 1
66185: NEG
66186: PPUSH
66187: LD_VAR 0 1
66191: PPUSH
66192: CALL_OW 12
66196: ST_TO_ADDR
// end ;
66197: LD_VAR 0 2
66201: RET
// export function PrepareEnchidna ( ) ; begin
66202: LD_INT 0
66204: PPUSH
// uc_side := 0 ;
66205: LD_ADDR_OWVAR 20
66209: PUSH
66210: LD_INT 0
66212: ST_TO_ADDR
// uc_nation := 0 ;
66213: LD_ADDR_OWVAR 21
66217: PUSH
66218: LD_INT 0
66220: ST_TO_ADDR
// InitHc ;
66221: CALL_OW 19
// hc_class := class_baggie ;
66225: LD_ADDR_OWVAR 28
66229: PUSH
66230: LD_INT 13
66232: ST_TO_ADDR
// hc_gallery :=  ;
66233: LD_ADDR_OWVAR 33
66237: PUSH
66238: LD_STRING 
66240: ST_TO_ADDR
// hc_name :=  ;
66241: LD_ADDR_OWVAR 26
66245: PUSH
66246: LD_STRING 
66248: ST_TO_ADDR
// end ;
66249: LD_VAR 0 1
66253: RET
// export function PrepareFrog ( ) ; begin
66254: LD_INT 0
66256: PPUSH
// uc_side := 0 ;
66257: LD_ADDR_OWVAR 20
66261: PUSH
66262: LD_INT 0
66264: ST_TO_ADDR
// uc_nation := 0 ;
66265: LD_ADDR_OWVAR 21
66269: PUSH
66270: LD_INT 0
66272: ST_TO_ADDR
// InitHc ;
66273: CALL_OW 19
// hc_class := class_frog ;
66277: LD_ADDR_OWVAR 28
66281: PUSH
66282: LD_INT 19
66284: ST_TO_ADDR
// hc_gallery :=  ;
66285: LD_ADDR_OWVAR 33
66289: PUSH
66290: LD_STRING 
66292: ST_TO_ADDR
// hc_name :=  ;
66293: LD_ADDR_OWVAR 26
66297: PUSH
66298: LD_STRING 
66300: ST_TO_ADDR
// end ;
66301: LD_VAR 0 1
66305: RET
// export function PrepareFish ( ) ; begin
66306: LD_INT 0
66308: PPUSH
// uc_side := 0 ;
66309: LD_ADDR_OWVAR 20
66313: PUSH
66314: LD_INT 0
66316: ST_TO_ADDR
// uc_nation := 0 ;
66317: LD_ADDR_OWVAR 21
66321: PUSH
66322: LD_INT 0
66324: ST_TO_ADDR
// InitHc ;
66325: CALL_OW 19
// hc_class := class_fish ;
66329: LD_ADDR_OWVAR 28
66333: PUSH
66334: LD_INT 20
66336: ST_TO_ADDR
// hc_gallery :=  ;
66337: LD_ADDR_OWVAR 33
66341: PUSH
66342: LD_STRING 
66344: ST_TO_ADDR
// hc_name :=  ;
66345: LD_ADDR_OWVAR 26
66349: PUSH
66350: LD_STRING 
66352: ST_TO_ADDR
// end ;
66353: LD_VAR 0 1
66357: RET
// export function PrepareBird ( ) ; begin
66358: LD_INT 0
66360: PPUSH
// uc_side := 0 ;
66361: LD_ADDR_OWVAR 20
66365: PUSH
66366: LD_INT 0
66368: ST_TO_ADDR
// uc_nation := 0 ;
66369: LD_ADDR_OWVAR 21
66373: PUSH
66374: LD_INT 0
66376: ST_TO_ADDR
// InitHc ;
66377: CALL_OW 19
// hc_class := class_phororhacos ;
66381: LD_ADDR_OWVAR 28
66385: PUSH
66386: LD_INT 18
66388: ST_TO_ADDR
// hc_gallery :=  ;
66389: LD_ADDR_OWVAR 33
66393: PUSH
66394: LD_STRING 
66396: ST_TO_ADDR
// hc_name :=  ;
66397: LD_ADDR_OWVAR 26
66401: PUSH
66402: LD_STRING 
66404: ST_TO_ADDR
// end ;
66405: LD_VAR 0 1
66409: RET
// export function PrepareHorse ( ) ; begin
66410: LD_INT 0
66412: PPUSH
// uc_side := 0 ;
66413: LD_ADDR_OWVAR 20
66417: PUSH
66418: LD_INT 0
66420: ST_TO_ADDR
// uc_nation := 0 ;
66421: LD_ADDR_OWVAR 21
66425: PUSH
66426: LD_INT 0
66428: ST_TO_ADDR
// InitHc ;
66429: CALL_OW 19
// hc_class := class_horse ;
66433: LD_ADDR_OWVAR 28
66437: PUSH
66438: LD_INT 21
66440: ST_TO_ADDR
// hc_gallery :=  ;
66441: LD_ADDR_OWVAR 33
66445: PUSH
66446: LD_STRING 
66448: ST_TO_ADDR
// hc_name :=  ;
66449: LD_ADDR_OWVAR 26
66453: PUSH
66454: LD_STRING 
66456: ST_TO_ADDR
// end ;
66457: LD_VAR 0 1
66461: RET
// export function PrepareMastodont ( ) ; begin
66462: LD_INT 0
66464: PPUSH
// uc_side := 0 ;
66465: LD_ADDR_OWVAR 20
66469: PUSH
66470: LD_INT 0
66472: ST_TO_ADDR
// uc_nation := 0 ;
66473: LD_ADDR_OWVAR 21
66477: PUSH
66478: LD_INT 0
66480: ST_TO_ADDR
// vc_chassis := class_mastodont ;
66481: LD_ADDR_OWVAR 37
66485: PUSH
66486: LD_INT 31
66488: ST_TO_ADDR
// vc_control := control_rider ;
66489: LD_ADDR_OWVAR 38
66493: PUSH
66494: LD_INT 4
66496: ST_TO_ADDR
// end ;
66497: LD_VAR 0 1
66501: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
66502: LD_INT 0
66504: PPUSH
66505: PPUSH
66506: PPUSH
// uc_side = 0 ;
66507: LD_ADDR_OWVAR 20
66511: PUSH
66512: LD_INT 0
66514: ST_TO_ADDR
// uc_nation = 0 ;
66515: LD_ADDR_OWVAR 21
66519: PUSH
66520: LD_INT 0
66522: ST_TO_ADDR
// InitHc_All ( ) ;
66523: CALL_OW 584
// InitVc ;
66527: CALL_OW 20
// if mastodonts then
66531: LD_VAR 0 6
66535: IFFALSE 66602
// for i = 1 to mastodonts do
66537: LD_ADDR_VAR 0 11
66541: PUSH
66542: DOUBLE
66543: LD_INT 1
66545: DEC
66546: ST_TO_ADDR
66547: LD_VAR 0 6
66551: PUSH
66552: FOR_TO
66553: IFFALSE 66600
// begin vc_chassis := 31 ;
66555: LD_ADDR_OWVAR 37
66559: PUSH
66560: LD_INT 31
66562: ST_TO_ADDR
// vc_control := control_rider ;
66563: LD_ADDR_OWVAR 38
66567: PUSH
66568: LD_INT 4
66570: ST_TO_ADDR
// animal := CreateVehicle ;
66571: LD_ADDR_VAR 0 12
66575: PUSH
66576: CALL_OW 45
66580: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66581: LD_VAR 0 12
66585: PPUSH
66586: LD_VAR 0 8
66590: PPUSH
66591: LD_INT 0
66593: PPUSH
66594: CALL 68744 0 3
// end ;
66598: GO 66552
66600: POP
66601: POP
// if horses then
66602: LD_VAR 0 5
66606: IFFALSE 66673
// for i = 1 to horses do
66608: LD_ADDR_VAR 0 11
66612: PUSH
66613: DOUBLE
66614: LD_INT 1
66616: DEC
66617: ST_TO_ADDR
66618: LD_VAR 0 5
66622: PUSH
66623: FOR_TO
66624: IFFALSE 66671
// begin hc_class := 21 ;
66626: LD_ADDR_OWVAR 28
66630: PUSH
66631: LD_INT 21
66633: ST_TO_ADDR
// hc_gallery :=  ;
66634: LD_ADDR_OWVAR 33
66638: PUSH
66639: LD_STRING 
66641: ST_TO_ADDR
// animal := CreateHuman ;
66642: LD_ADDR_VAR 0 12
66646: PUSH
66647: CALL_OW 44
66651: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66652: LD_VAR 0 12
66656: PPUSH
66657: LD_VAR 0 8
66661: PPUSH
66662: LD_INT 0
66664: PPUSH
66665: CALL 68744 0 3
// end ;
66669: GO 66623
66671: POP
66672: POP
// if birds then
66673: LD_VAR 0 1
66677: IFFALSE 66744
// for i = 1 to birds do
66679: LD_ADDR_VAR 0 11
66683: PUSH
66684: DOUBLE
66685: LD_INT 1
66687: DEC
66688: ST_TO_ADDR
66689: LD_VAR 0 1
66693: PUSH
66694: FOR_TO
66695: IFFALSE 66742
// begin hc_class := 18 ;
66697: LD_ADDR_OWVAR 28
66701: PUSH
66702: LD_INT 18
66704: ST_TO_ADDR
// hc_gallery =  ;
66705: LD_ADDR_OWVAR 33
66709: PUSH
66710: LD_STRING 
66712: ST_TO_ADDR
// animal := CreateHuman ;
66713: LD_ADDR_VAR 0 12
66717: PUSH
66718: CALL_OW 44
66722: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66723: LD_VAR 0 12
66727: PPUSH
66728: LD_VAR 0 8
66732: PPUSH
66733: LD_INT 0
66735: PPUSH
66736: CALL 68744 0 3
// end ;
66740: GO 66694
66742: POP
66743: POP
// if tigers then
66744: LD_VAR 0 2
66748: IFFALSE 66832
// for i = 1 to tigers do
66750: LD_ADDR_VAR 0 11
66754: PUSH
66755: DOUBLE
66756: LD_INT 1
66758: DEC
66759: ST_TO_ADDR
66760: LD_VAR 0 2
66764: PUSH
66765: FOR_TO
66766: IFFALSE 66830
// begin hc_class = class_tiger ;
66768: LD_ADDR_OWVAR 28
66772: PUSH
66773: LD_INT 14
66775: ST_TO_ADDR
// hc_gallery =  ;
66776: LD_ADDR_OWVAR 33
66780: PUSH
66781: LD_STRING 
66783: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
66784: LD_ADDR_OWVAR 35
66788: PUSH
66789: LD_INT 7
66791: NEG
66792: PPUSH
66793: LD_INT 7
66795: PPUSH
66796: CALL_OW 12
66800: ST_TO_ADDR
// animal := CreateHuman ;
66801: LD_ADDR_VAR 0 12
66805: PUSH
66806: CALL_OW 44
66810: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66811: LD_VAR 0 12
66815: PPUSH
66816: LD_VAR 0 8
66820: PPUSH
66821: LD_INT 0
66823: PPUSH
66824: CALL 68744 0 3
// end ;
66828: GO 66765
66830: POP
66831: POP
// if apemans then
66832: LD_VAR 0 3
66836: IFFALSE 66959
// for i = 1 to apemans do
66838: LD_ADDR_VAR 0 11
66842: PUSH
66843: DOUBLE
66844: LD_INT 1
66846: DEC
66847: ST_TO_ADDR
66848: LD_VAR 0 3
66852: PUSH
66853: FOR_TO
66854: IFFALSE 66957
// begin hc_class = class_apeman ;
66856: LD_ADDR_OWVAR 28
66860: PUSH
66861: LD_INT 12
66863: ST_TO_ADDR
// hc_gallery =  ;
66864: LD_ADDR_OWVAR 33
66868: PUSH
66869: LD_STRING 
66871: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
66872: LD_ADDR_OWVAR 35
66876: PUSH
66877: LD_INT 2
66879: NEG
66880: PPUSH
66881: LD_INT 2
66883: PPUSH
66884: CALL_OW 12
66888: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
66889: LD_ADDR_OWVAR 31
66893: PUSH
66894: LD_INT 1
66896: PPUSH
66897: LD_INT 3
66899: PPUSH
66900: CALL_OW 12
66904: PUSH
66905: LD_INT 1
66907: PPUSH
66908: LD_INT 3
66910: PPUSH
66911: CALL_OW 12
66915: PUSH
66916: LD_INT 0
66918: PUSH
66919: LD_INT 0
66921: PUSH
66922: EMPTY
66923: LIST
66924: LIST
66925: LIST
66926: LIST
66927: ST_TO_ADDR
// animal := CreateHuman ;
66928: LD_ADDR_VAR 0 12
66932: PUSH
66933: CALL_OW 44
66937: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66938: LD_VAR 0 12
66942: PPUSH
66943: LD_VAR 0 8
66947: PPUSH
66948: LD_INT 0
66950: PPUSH
66951: CALL 68744 0 3
// end ;
66955: GO 66853
66957: POP
66958: POP
// if enchidnas then
66959: LD_VAR 0 4
66963: IFFALSE 67030
// for i = 1 to enchidnas do
66965: LD_ADDR_VAR 0 11
66969: PUSH
66970: DOUBLE
66971: LD_INT 1
66973: DEC
66974: ST_TO_ADDR
66975: LD_VAR 0 4
66979: PUSH
66980: FOR_TO
66981: IFFALSE 67028
// begin hc_class = 13 ;
66983: LD_ADDR_OWVAR 28
66987: PUSH
66988: LD_INT 13
66990: ST_TO_ADDR
// hc_gallery =  ;
66991: LD_ADDR_OWVAR 33
66995: PUSH
66996: LD_STRING 
66998: ST_TO_ADDR
// animal := CreateHuman ;
66999: LD_ADDR_VAR 0 12
67003: PUSH
67004: CALL_OW 44
67008: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
67009: LD_VAR 0 12
67013: PPUSH
67014: LD_VAR 0 8
67018: PPUSH
67019: LD_INT 0
67021: PPUSH
67022: CALL 68744 0 3
// end ;
67026: GO 66980
67028: POP
67029: POP
// if fishes then
67030: LD_VAR 0 7
67034: IFFALSE 67101
// for i = 1 to fishes do
67036: LD_ADDR_VAR 0 11
67040: PUSH
67041: DOUBLE
67042: LD_INT 1
67044: DEC
67045: ST_TO_ADDR
67046: LD_VAR 0 7
67050: PUSH
67051: FOR_TO
67052: IFFALSE 67099
// begin hc_class = 20 ;
67054: LD_ADDR_OWVAR 28
67058: PUSH
67059: LD_INT 20
67061: ST_TO_ADDR
// hc_gallery =  ;
67062: LD_ADDR_OWVAR 33
67066: PUSH
67067: LD_STRING 
67069: ST_TO_ADDR
// animal := CreateHuman ;
67070: LD_ADDR_VAR 0 12
67074: PUSH
67075: CALL_OW 44
67079: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
67080: LD_VAR 0 12
67084: PPUSH
67085: LD_VAR 0 9
67089: PPUSH
67090: LD_INT 0
67092: PPUSH
67093: CALL 68744 0 3
// end ;
67097: GO 67051
67099: POP
67100: POP
// end ;
67101: LD_VAR 0 10
67105: RET
// export function WantHeal ( sci , unit ) ; begin
67106: LD_INT 0
67108: PPUSH
// if GetTaskList ( sci ) > 0 then
67109: LD_VAR 0 1
67113: PPUSH
67114: CALL_OW 437
67118: PUSH
67119: LD_INT 0
67121: GREATER
67122: IFFALSE 67194
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
67124: LD_VAR 0 1
67128: PPUSH
67129: CALL_OW 437
67133: PUSH
67134: LD_INT 1
67136: ARRAY
67137: PUSH
67138: LD_INT 1
67140: ARRAY
67141: PUSH
67142: LD_STRING l
67144: EQUAL
67145: IFFALSE 67172
67147: PUSH
67148: LD_VAR 0 1
67152: PPUSH
67153: CALL_OW 437
67157: PUSH
67158: LD_INT 1
67160: ARRAY
67161: PUSH
67162: LD_INT 4
67164: ARRAY
67165: PUSH
67166: LD_VAR 0 2
67170: EQUAL
67171: AND
67172: IFFALSE 67184
// result := true else
67174: LD_ADDR_VAR 0 3
67178: PUSH
67179: LD_INT 1
67181: ST_TO_ADDR
67182: GO 67192
// result := false ;
67184: LD_ADDR_VAR 0 3
67188: PUSH
67189: LD_INT 0
67191: ST_TO_ADDR
// end else
67192: GO 67202
// result := false ;
67194: LD_ADDR_VAR 0 3
67198: PUSH
67199: LD_INT 0
67201: ST_TO_ADDR
// end ;
67202: LD_VAR 0 3
67206: RET
// export function HealTarget ( sci ) ; begin
67207: LD_INT 0
67209: PPUSH
// if not sci then
67210: LD_VAR 0 1
67214: NOT
67215: IFFALSE 67219
// exit ;
67217: GO 67284
// result := 0 ;
67219: LD_ADDR_VAR 0 2
67223: PUSH
67224: LD_INT 0
67226: ST_TO_ADDR
// if GetTaskList ( sci ) then
67227: LD_VAR 0 1
67231: PPUSH
67232: CALL_OW 437
67236: IFFALSE 67284
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
67238: LD_VAR 0 1
67242: PPUSH
67243: CALL_OW 437
67247: PUSH
67248: LD_INT 1
67250: ARRAY
67251: PUSH
67252: LD_INT 1
67254: ARRAY
67255: PUSH
67256: LD_STRING l
67258: EQUAL
67259: IFFALSE 67284
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
67261: LD_ADDR_VAR 0 2
67265: PUSH
67266: LD_VAR 0 1
67270: PPUSH
67271: CALL_OW 437
67275: PUSH
67276: LD_INT 1
67278: ARRAY
67279: PUSH
67280: LD_INT 4
67282: ARRAY
67283: ST_TO_ADDR
// end ;
67284: LD_VAR 0 2
67288: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
67289: LD_INT 0
67291: PPUSH
67292: PPUSH
67293: PPUSH
67294: PPUSH
// if not base_units then
67295: LD_VAR 0 1
67299: NOT
67300: IFFALSE 67304
// exit ;
67302: GO 67391
// result := false ;
67304: LD_ADDR_VAR 0 2
67308: PUSH
67309: LD_INT 0
67311: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
67312: LD_ADDR_VAR 0 5
67316: PUSH
67317: LD_VAR 0 1
67321: PPUSH
67322: LD_INT 21
67324: PUSH
67325: LD_INT 3
67327: PUSH
67328: EMPTY
67329: LIST
67330: LIST
67331: PPUSH
67332: CALL_OW 72
67336: ST_TO_ADDR
// if not tmp then
67337: LD_VAR 0 5
67341: NOT
67342: IFFALSE 67346
// exit ;
67344: GO 67391
// for i in tmp do
67346: LD_ADDR_VAR 0 3
67350: PUSH
67351: LD_VAR 0 5
67355: PUSH
67356: FOR_IN
67357: IFFALSE 67389
// begin result := EnemyInRange ( i , 22 ) ;
67359: LD_ADDR_VAR 0 2
67363: PUSH
67364: LD_VAR 0 3
67368: PPUSH
67369: LD_INT 22
67371: PPUSH
67372: CALL 64806 0 2
67376: ST_TO_ADDR
// if result then
67377: LD_VAR 0 2
67381: IFFALSE 67387
// exit ;
67383: POP
67384: POP
67385: GO 67391
// end ;
67387: GO 67356
67389: POP
67390: POP
// end ;
67391: LD_VAR 0 2
67395: RET
// export function FilterByTag ( units , tag ) ; begin
67396: LD_INT 0
67398: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
67399: LD_ADDR_VAR 0 3
67403: PUSH
67404: LD_VAR 0 1
67408: PPUSH
67409: LD_INT 120
67411: PUSH
67412: LD_VAR 0 2
67416: PUSH
67417: EMPTY
67418: LIST
67419: LIST
67420: PPUSH
67421: CALL_OW 72
67425: ST_TO_ADDR
// end ;
67426: LD_VAR 0 3
67430: RET
// export function IsDriver ( un ) ; begin
67431: LD_INT 0
67433: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
67434: LD_ADDR_VAR 0 2
67438: PUSH
67439: LD_VAR 0 1
67443: PUSH
67444: LD_INT 55
67446: PUSH
67447: EMPTY
67448: LIST
67449: PPUSH
67450: CALL_OW 69
67454: IN
67455: ST_TO_ADDR
// end ;
67456: LD_VAR 0 2
67460: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
67461: LD_INT 0
67463: PPUSH
67464: PPUSH
// list := [ ] ;
67465: LD_ADDR_VAR 0 5
67469: PUSH
67470: EMPTY
67471: ST_TO_ADDR
// case d of 0 :
67472: LD_VAR 0 3
67476: PUSH
67477: LD_INT 0
67479: DOUBLE
67480: EQUAL
67481: IFTRUE 67485
67483: GO 67618
67485: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
67486: LD_ADDR_VAR 0 5
67490: PUSH
67491: LD_VAR 0 1
67495: PUSH
67496: LD_INT 4
67498: MINUS
67499: PUSH
67500: LD_VAR 0 2
67504: PUSH
67505: LD_INT 4
67507: MINUS
67508: PUSH
67509: LD_INT 2
67511: PUSH
67512: EMPTY
67513: LIST
67514: LIST
67515: LIST
67516: PUSH
67517: LD_VAR 0 1
67521: PUSH
67522: LD_INT 3
67524: MINUS
67525: PUSH
67526: LD_VAR 0 2
67530: PUSH
67531: LD_INT 1
67533: PUSH
67534: EMPTY
67535: LIST
67536: LIST
67537: LIST
67538: PUSH
67539: LD_VAR 0 1
67543: PUSH
67544: LD_INT 4
67546: PLUS
67547: PUSH
67548: LD_VAR 0 2
67552: PUSH
67553: LD_INT 4
67555: PUSH
67556: EMPTY
67557: LIST
67558: LIST
67559: LIST
67560: PUSH
67561: LD_VAR 0 1
67565: PUSH
67566: LD_INT 3
67568: PLUS
67569: PUSH
67570: LD_VAR 0 2
67574: PUSH
67575: LD_INT 3
67577: PLUS
67578: PUSH
67579: LD_INT 5
67581: PUSH
67582: EMPTY
67583: LIST
67584: LIST
67585: LIST
67586: PUSH
67587: LD_VAR 0 1
67591: PUSH
67592: LD_VAR 0 2
67596: PUSH
67597: LD_INT 4
67599: PLUS
67600: PUSH
67601: LD_INT 0
67603: PUSH
67604: EMPTY
67605: LIST
67606: LIST
67607: LIST
67608: PUSH
67609: EMPTY
67610: LIST
67611: LIST
67612: LIST
67613: LIST
67614: LIST
67615: ST_TO_ADDR
// end ; 1 :
67616: GO 68316
67618: LD_INT 1
67620: DOUBLE
67621: EQUAL
67622: IFTRUE 67626
67624: GO 67759
67626: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
67627: LD_ADDR_VAR 0 5
67631: PUSH
67632: LD_VAR 0 1
67636: PUSH
67637: LD_VAR 0 2
67641: PUSH
67642: LD_INT 4
67644: MINUS
67645: PUSH
67646: LD_INT 3
67648: PUSH
67649: EMPTY
67650: LIST
67651: LIST
67652: LIST
67653: PUSH
67654: LD_VAR 0 1
67658: PUSH
67659: LD_INT 3
67661: MINUS
67662: PUSH
67663: LD_VAR 0 2
67667: PUSH
67668: LD_INT 3
67670: MINUS
67671: PUSH
67672: LD_INT 2
67674: PUSH
67675: EMPTY
67676: LIST
67677: LIST
67678: LIST
67679: PUSH
67680: LD_VAR 0 1
67684: PUSH
67685: LD_INT 4
67687: MINUS
67688: PUSH
67689: LD_VAR 0 2
67693: PUSH
67694: LD_INT 1
67696: PUSH
67697: EMPTY
67698: LIST
67699: LIST
67700: LIST
67701: PUSH
67702: LD_VAR 0 1
67706: PUSH
67707: LD_VAR 0 2
67711: PUSH
67712: LD_INT 3
67714: PLUS
67715: PUSH
67716: LD_INT 0
67718: PUSH
67719: EMPTY
67720: LIST
67721: LIST
67722: LIST
67723: PUSH
67724: LD_VAR 0 1
67728: PUSH
67729: LD_INT 4
67731: PLUS
67732: PUSH
67733: LD_VAR 0 2
67737: PUSH
67738: LD_INT 4
67740: PLUS
67741: PUSH
67742: LD_INT 5
67744: PUSH
67745: EMPTY
67746: LIST
67747: LIST
67748: LIST
67749: PUSH
67750: EMPTY
67751: LIST
67752: LIST
67753: LIST
67754: LIST
67755: LIST
67756: ST_TO_ADDR
// end ; 2 :
67757: GO 68316
67759: LD_INT 2
67761: DOUBLE
67762: EQUAL
67763: IFTRUE 67767
67765: GO 67896
67767: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
67768: LD_ADDR_VAR 0 5
67772: PUSH
67773: LD_VAR 0 1
67777: PUSH
67778: LD_VAR 0 2
67782: PUSH
67783: LD_INT 3
67785: MINUS
67786: PUSH
67787: LD_INT 3
67789: PUSH
67790: EMPTY
67791: LIST
67792: LIST
67793: LIST
67794: PUSH
67795: LD_VAR 0 1
67799: PUSH
67800: LD_INT 4
67802: PLUS
67803: PUSH
67804: LD_VAR 0 2
67808: PUSH
67809: LD_INT 4
67811: PUSH
67812: EMPTY
67813: LIST
67814: LIST
67815: LIST
67816: PUSH
67817: LD_VAR 0 1
67821: PUSH
67822: LD_VAR 0 2
67826: PUSH
67827: LD_INT 4
67829: PLUS
67830: PUSH
67831: LD_INT 0
67833: PUSH
67834: EMPTY
67835: LIST
67836: LIST
67837: LIST
67838: PUSH
67839: LD_VAR 0 1
67843: PUSH
67844: LD_INT 3
67846: MINUS
67847: PUSH
67848: LD_VAR 0 2
67852: PUSH
67853: LD_INT 1
67855: PUSH
67856: EMPTY
67857: LIST
67858: LIST
67859: LIST
67860: PUSH
67861: LD_VAR 0 1
67865: PUSH
67866: LD_INT 4
67868: MINUS
67869: PUSH
67870: LD_VAR 0 2
67874: PUSH
67875: LD_INT 4
67877: MINUS
67878: PUSH
67879: LD_INT 2
67881: PUSH
67882: EMPTY
67883: LIST
67884: LIST
67885: LIST
67886: PUSH
67887: EMPTY
67888: LIST
67889: LIST
67890: LIST
67891: LIST
67892: LIST
67893: ST_TO_ADDR
// end ; 3 :
67894: GO 68316
67896: LD_INT 3
67898: DOUBLE
67899: EQUAL
67900: IFTRUE 67904
67902: GO 68037
67904: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
67905: LD_ADDR_VAR 0 5
67909: PUSH
67910: LD_VAR 0 1
67914: PUSH
67915: LD_INT 3
67917: PLUS
67918: PUSH
67919: LD_VAR 0 2
67923: PUSH
67924: LD_INT 4
67926: PUSH
67927: EMPTY
67928: LIST
67929: LIST
67930: LIST
67931: PUSH
67932: LD_VAR 0 1
67936: PUSH
67937: LD_INT 4
67939: PLUS
67940: PUSH
67941: LD_VAR 0 2
67945: PUSH
67946: LD_INT 4
67948: PLUS
67949: PUSH
67950: LD_INT 5
67952: PUSH
67953: EMPTY
67954: LIST
67955: LIST
67956: LIST
67957: PUSH
67958: LD_VAR 0 1
67962: PUSH
67963: LD_INT 4
67965: MINUS
67966: PUSH
67967: LD_VAR 0 2
67971: PUSH
67972: LD_INT 1
67974: PUSH
67975: EMPTY
67976: LIST
67977: LIST
67978: LIST
67979: PUSH
67980: LD_VAR 0 1
67984: PUSH
67985: LD_VAR 0 2
67989: PUSH
67990: LD_INT 4
67992: MINUS
67993: PUSH
67994: LD_INT 3
67996: PUSH
67997: EMPTY
67998: LIST
67999: LIST
68000: LIST
68001: PUSH
68002: LD_VAR 0 1
68006: PUSH
68007: LD_INT 3
68009: MINUS
68010: PUSH
68011: LD_VAR 0 2
68015: PUSH
68016: LD_INT 3
68018: MINUS
68019: PUSH
68020: LD_INT 2
68022: PUSH
68023: EMPTY
68024: LIST
68025: LIST
68026: LIST
68027: PUSH
68028: EMPTY
68029: LIST
68030: LIST
68031: LIST
68032: LIST
68033: LIST
68034: ST_TO_ADDR
// end ; 4 :
68035: GO 68316
68037: LD_INT 4
68039: DOUBLE
68040: EQUAL
68041: IFTRUE 68045
68043: GO 68178
68045: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
68046: LD_ADDR_VAR 0 5
68050: PUSH
68051: LD_VAR 0 1
68055: PUSH
68056: LD_VAR 0 2
68060: PUSH
68061: LD_INT 4
68063: PLUS
68064: PUSH
68065: LD_INT 0
68067: PUSH
68068: EMPTY
68069: LIST
68070: LIST
68071: LIST
68072: PUSH
68073: LD_VAR 0 1
68077: PUSH
68078: LD_INT 3
68080: PLUS
68081: PUSH
68082: LD_VAR 0 2
68086: PUSH
68087: LD_INT 3
68089: PLUS
68090: PUSH
68091: LD_INT 5
68093: PUSH
68094: EMPTY
68095: LIST
68096: LIST
68097: LIST
68098: PUSH
68099: LD_VAR 0 1
68103: PUSH
68104: LD_INT 4
68106: PLUS
68107: PUSH
68108: LD_VAR 0 2
68112: PUSH
68113: LD_INT 4
68115: PUSH
68116: EMPTY
68117: LIST
68118: LIST
68119: LIST
68120: PUSH
68121: LD_VAR 0 1
68125: PUSH
68126: LD_VAR 0 2
68130: PUSH
68131: LD_INT 3
68133: MINUS
68134: PUSH
68135: LD_INT 3
68137: PUSH
68138: EMPTY
68139: LIST
68140: LIST
68141: LIST
68142: PUSH
68143: LD_VAR 0 1
68147: PUSH
68148: LD_INT 4
68150: MINUS
68151: PUSH
68152: LD_VAR 0 2
68156: PUSH
68157: LD_INT 4
68159: MINUS
68160: PUSH
68161: LD_INT 2
68163: PUSH
68164: EMPTY
68165: LIST
68166: LIST
68167: LIST
68168: PUSH
68169: EMPTY
68170: LIST
68171: LIST
68172: LIST
68173: LIST
68174: LIST
68175: ST_TO_ADDR
// end ; 5 :
68176: GO 68316
68178: LD_INT 5
68180: DOUBLE
68181: EQUAL
68182: IFTRUE 68186
68184: GO 68315
68186: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
68187: LD_ADDR_VAR 0 5
68191: PUSH
68192: LD_VAR 0 1
68196: PUSH
68197: LD_INT 4
68199: MINUS
68200: PUSH
68201: LD_VAR 0 2
68205: PUSH
68206: LD_INT 1
68208: PUSH
68209: EMPTY
68210: LIST
68211: LIST
68212: LIST
68213: PUSH
68214: LD_VAR 0 1
68218: PUSH
68219: LD_VAR 0 2
68223: PUSH
68224: LD_INT 4
68226: MINUS
68227: PUSH
68228: LD_INT 3
68230: PUSH
68231: EMPTY
68232: LIST
68233: LIST
68234: LIST
68235: PUSH
68236: LD_VAR 0 1
68240: PUSH
68241: LD_INT 4
68243: PLUS
68244: PUSH
68245: LD_VAR 0 2
68249: PUSH
68250: LD_INT 4
68252: PLUS
68253: PUSH
68254: LD_INT 5
68256: PUSH
68257: EMPTY
68258: LIST
68259: LIST
68260: LIST
68261: PUSH
68262: LD_VAR 0 1
68266: PUSH
68267: LD_INT 3
68269: PLUS
68270: PUSH
68271: LD_VAR 0 2
68275: PUSH
68276: LD_INT 4
68278: PUSH
68279: EMPTY
68280: LIST
68281: LIST
68282: LIST
68283: PUSH
68284: LD_VAR 0 1
68288: PUSH
68289: LD_VAR 0 2
68293: PUSH
68294: LD_INT 3
68296: PLUS
68297: PUSH
68298: LD_INT 0
68300: PUSH
68301: EMPTY
68302: LIST
68303: LIST
68304: LIST
68305: PUSH
68306: EMPTY
68307: LIST
68308: LIST
68309: LIST
68310: LIST
68311: LIST
68312: ST_TO_ADDR
// end ; end ;
68313: GO 68316
68315: POP
// result := list ;
68316: LD_ADDR_VAR 0 4
68320: PUSH
68321: LD_VAR 0 5
68325: ST_TO_ADDR
// end ;
68326: LD_VAR 0 4
68330: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
68331: LD_INT 0
68333: PPUSH
68334: PPUSH
68335: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
68336: LD_VAR 0 1
68340: NOT
68341: IFTRUE 68369
68343: PUSH
68344: LD_VAR 0 2
68348: PUSH
68349: LD_INT 1
68351: PUSH
68352: LD_INT 2
68354: PUSH
68355: LD_INT 3
68357: PUSH
68358: LD_INT 4
68360: PUSH
68361: EMPTY
68362: LIST
68363: LIST
68364: LIST
68365: LIST
68366: IN
68367: NOT
68368: OR
68369: IFFALSE 68373
// exit ;
68371: GO 68456
// tmp := [ ] ;
68373: LD_ADDR_VAR 0 5
68377: PUSH
68378: EMPTY
68379: ST_TO_ADDR
// for i in units do
68380: LD_ADDR_VAR 0 4
68384: PUSH
68385: LD_VAR 0 1
68389: PUSH
68390: FOR_IN
68391: IFFALSE 68425
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
68393: LD_ADDR_VAR 0 5
68397: PUSH
68398: LD_VAR 0 5
68402: PPUSH
68403: LD_VAR 0 4
68407: PPUSH
68408: LD_VAR 0 2
68412: PPUSH
68413: CALL_OW 259
68417: PPUSH
68418: CALL 69851 0 2
68422: ST_TO_ADDR
68423: GO 68390
68425: POP
68426: POP
// if not tmp then
68427: LD_VAR 0 5
68431: NOT
68432: IFFALSE 68436
// exit ;
68434: GO 68456
// result := SortListByListDesc ( units , tmp ) ;
68436: LD_ADDR_VAR 0 3
68440: PUSH
68441: LD_VAR 0 1
68445: PPUSH
68446: LD_VAR 0 5
68450: PPUSH
68451: CALL_OW 77
68455: ST_TO_ADDR
// end ;
68456: LD_VAR 0 3
68460: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
68461: LD_INT 0
68463: PPUSH
68464: PPUSH
68465: PPUSH
// result := false ;
68466: LD_ADDR_VAR 0 3
68470: PUSH
68471: LD_INT 0
68473: ST_TO_ADDR
// if not building then
68474: LD_VAR 0 2
68478: NOT
68479: IFFALSE 68483
// exit ;
68481: GO 68627
// x := GetX ( building ) ;
68483: LD_ADDR_VAR 0 4
68487: PUSH
68488: LD_VAR 0 2
68492: PPUSH
68493: CALL_OW 250
68497: ST_TO_ADDR
// y := GetY ( building ) ;
68498: LD_ADDR_VAR 0 5
68502: PUSH
68503: LD_VAR 0 2
68507: PPUSH
68508: CALL_OW 251
68512: ST_TO_ADDR
// if not x or not y then
68513: LD_VAR 0 4
68517: NOT
68518: IFTRUE 68527
68520: PUSH
68521: LD_VAR 0 5
68525: NOT
68526: OR
68527: IFFALSE 68531
// exit ;
68529: GO 68627
// if GetTaskList ( unit ) then
68531: LD_VAR 0 1
68535: PPUSH
68536: CALL_OW 437
68540: IFFALSE 68627
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
68542: LD_STRING e
68544: PUSH
68545: LD_VAR 0 1
68549: PPUSH
68550: CALL_OW 437
68554: PUSH
68555: LD_INT 1
68557: ARRAY
68558: PUSH
68559: LD_INT 1
68561: ARRAY
68562: EQUAL
68563: IFFALSE 68590
68565: PUSH
68566: LD_VAR 0 4
68570: PUSH
68571: LD_VAR 0 1
68575: PPUSH
68576: CALL_OW 437
68580: PUSH
68581: LD_INT 1
68583: ARRAY
68584: PUSH
68585: LD_INT 2
68587: ARRAY
68588: EQUAL
68589: AND
68590: IFFALSE 68617
68592: PUSH
68593: LD_VAR 0 5
68597: PUSH
68598: LD_VAR 0 1
68602: PPUSH
68603: CALL_OW 437
68607: PUSH
68608: LD_INT 1
68610: ARRAY
68611: PUSH
68612: LD_INT 3
68614: ARRAY
68615: EQUAL
68616: AND
68617: IFFALSE 68627
// result := true end ;
68619: LD_ADDR_VAR 0 3
68623: PUSH
68624: LD_INT 1
68626: ST_TO_ADDR
// end ;
68627: LD_VAR 0 3
68631: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
68632: LD_INT 0
68634: PPUSH
// result := false ;
68635: LD_ADDR_VAR 0 4
68639: PUSH
68640: LD_INT 0
68642: ST_TO_ADDR
// if GetTaskList ( unit ) then
68643: LD_VAR 0 1
68647: PPUSH
68648: CALL_OW 437
68652: IFFALSE 68739
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
68654: LD_STRING M
68656: PUSH
68657: LD_VAR 0 1
68661: PPUSH
68662: CALL_OW 437
68666: PUSH
68667: LD_INT 1
68669: ARRAY
68670: PUSH
68671: LD_INT 1
68673: ARRAY
68674: EQUAL
68675: IFFALSE 68702
68677: PUSH
68678: LD_VAR 0 2
68682: PUSH
68683: LD_VAR 0 1
68687: PPUSH
68688: CALL_OW 437
68692: PUSH
68693: LD_INT 1
68695: ARRAY
68696: PUSH
68697: LD_INT 2
68699: ARRAY
68700: EQUAL
68701: AND
68702: IFFALSE 68729
68704: PUSH
68705: LD_VAR 0 3
68709: PUSH
68710: LD_VAR 0 1
68714: PPUSH
68715: CALL_OW 437
68719: PUSH
68720: LD_INT 1
68722: ARRAY
68723: PUSH
68724: LD_INT 3
68726: ARRAY
68727: EQUAL
68728: AND
68729: IFFALSE 68739
// result := true ;
68731: LD_ADDR_VAR 0 4
68735: PUSH
68736: LD_INT 1
68738: ST_TO_ADDR
// end ; end ;
68739: LD_VAR 0 4
68743: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
68744: LD_INT 0
68746: PPUSH
68747: PPUSH
68748: PPUSH
68749: PPUSH
// if not unit or not area then
68750: LD_VAR 0 1
68754: NOT
68755: IFTRUE 68764
68757: PUSH
68758: LD_VAR 0 2
68762: NOT
68763: OR
68764: IFFALSE 68768
// exit ;
68766: GO 68944
// tmp := AreaToList ( area , i ) ;
68768: LD_ADDR_VAR 0 6
68772: PUSH
68773: LD_VAR 0 2
68777: PPUSH
68778: LD_VAR 0 5
68782: PPUSH
68783: CALL_OW 517
68787: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
68788: LD_ADDR_VAR 0 5
68792: PUSH
68793: DOUBLE
68794: LD_INT 1
68796: DEC
68797: ST_TO_ADDR
68798: LD_VAR 0 6
68802: PUSH
68803: LD_INT 1
68805: ARRAY
68806: PUSH
68807: FOR_TO
68808: IFFALSE 68942
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
68810: LD_ADDR_VAR 0 7
68814: PUSH
68815: LD_VAR 0 6
68819: PUSH
68820: LD_INT 1
68822: ARRAY
68823: PUSH
68824: LD_VAR 0 5
68828: ARRAY
68829: PUSH
68830: LD_VAR 0 6
68834: PUSH
68835: LD_INT 2
68837: ARRAY
68838: PUSH
68839: LD_VAR 0 5
68843: ARRAY
68844: PUSH
68845: EMPTY
68846: LIST
68847: LIST
68848: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
68849: LD_INT 92
68851: PUSH
68852: LD_VAR 0 7
68856: PUSH
68857: LD_INT 1
68859: ARRAY
68860: PUSH
68861: LD_VAR 0 7
68865: PUSH
68866: LD_INT 2
68868: ARRAY
68869: PUSH
68870: LD_INT 2
68872: PUSH
68873: EMPTY
68874: LIST
68875: LIST
68876: LIST
68877: LIST
68878: PPUSH
68879: CALL_OW 69
68883: PUSH
68884: LD_INT 0
68886: EQUAL
68887: IFFALSE 68940
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
68889: LD_VAR 0 1
68893: PPUSH
68894: LD_VAR 0 7
68898: PUSH
68899: LD_INT 1
68901: ARRAY
68902: PPUSH
68903: LD_VAR 0 7
68907: PUSH
68908: LD_INT 2
68910: ARRAY
68911: PPUSH
68912: LD_VAR 0 3
68916: PPUSH
68917: CALL_OW 48
// result := IsPlaced ( unit ) ;
68921: LD_ADDR_VAR 0 4
68925: PUSH
68926: LD_VAR 0 1
68930: PPUSH
68931: CALL_OW 305
68935: ST_TO_ADDR
// exit ;
68936: POP
68937: POP
68938: GO 68944
// end ; end ;
68940: GO 68807
68942: POP
68943: POP
// end ;
68944: LD_VAR 0 4
68948: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
68949: LD_INT 0
68951: PPUSH
68952: PPUSH
68953: PPUSH
// if not side or side > 8 then
68954: LD_VAR 0 1
68958: NOT
68959: IFTRUE 68971
68961: PUSH
68962: LD_VAR 0 1
68966: PUSH
68967: LD_INT 8
68969: GREATER
68970: OR
68971: IFFALSE 68975
// exit ;
68973: GO 69162
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
68975: LD_ADDR_VAR 0 4
68979: PUSH
68980: LD_INT 22
68982: PUSH
68983: LD_VAR 0 1
68987: PUSH
68988: EMPTY
68989: LIST
68990: LIST
68991: PUSH
68992: LD_INT 21
68994: PUSH
68995: LD_INT 3
68997: PUSH
68998: EMPTY
68999: LIST
69000: LIST
69001: PUSH
69002: EMPTY
69003: LIST
69004: LIST
69005: PPUSH
69006: CALL_OW 69
69010: ST_TO_ADDR
// if not tmp then
69011: LD_VAR 0 4
69015: NOT
69016: IFFALSE 69020
// exit ;
69018: GO 69162
// enable_addtolog := true ;
69020: LD_ADDR_OWVAR 81
69024: PUSH
69025: LD_INT 1
69027: ST_TO_ADDR
// AddToLog ( [ ) ;
69028: LD_STRING [
69030: PPUSH
69031: CALL_OW 561
// for i in tmp do
69035: LD_ADDR_VAR 0 3
69039: PUSH
69040: LD_VAR 0 4
69044: PUSH
69045: FOR_IN
69046: IFFALSE 69153
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
69048: LD_STRING [
69050: PUSH
69051: LD_VAR 0 3
69055: PPUSH
69056: CALL_OW 266
69060: STR
69061: PUSH
69062: LD_STRING , 
69064: STR
69065: PUSH
69066: LD_VAR 0 3
69070: PPUSH
69071: CALL_OW 250
69075: STR
69076: PUSH
69077: LD_STRING , 
69079: STR
69080: PUSH
69081: LD_VAR 0 3
69085: PPUSH
69086: CALL_OW 251
69090: STR
69091: PUSH
69092: LD_STRING , 
69094: STR
69095: PUSH
69096: LD_VAR 0 3
69100: PPUSH
69101: CALL_OW 254
69105: STR
69106: PUSH
69107: LD_STRING , 
69109: STR
69110: PUSH
69111: LD_VAR 0 3
69115: PPUSH
69116: LD_INT 1
69118: PPUSH
69119: CALL_OW 268
69123: STR
69124: PUSH
69125: LD_STRING , 
69127: STR
69128: PUSH
69129: LD_VAR 0 3
69133: PPUSH
69134: LD_INT 2
69136: PPUSH
69137: CALL_OW 268
69141: STR
69142: PUSH
69143: LD_STRING ],
69145: STR
69146: PPUSH
69147: CALL_OW 561
// end ;
69151: GO 69045
69153: POP
69154: POP
// AddToLog ( ]; ) ;
69155: LD_STRING ];
69157: PPUSH
69158: CALL_OW 561
// end ;
69162: LD_VAR 0 2
69166: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
69167: LD_INT 0
69169: PPUSH
69170: PPUSH
69171: PPUSH
69172: PPUSH
69173: PPUSH
// if not area or not rate or not max then
69174: LD_VAR 0 1
69178: NOT
69179: IFTRUE 69188
69181: PUSH
69182: LD_VAR 0 2
69186: NOT
69187: OR
69188: IFTRUE 69197
69190: PUSH
69191: LD_VAR 0 4
69195: NOT
69196: OR
69197: IFFALSE 69201
// exit ;
69199: GO 69390
// while 1 do
69201: LD_INT 1
69203: IFFALSE 69390
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
69205: LD_ADDR_VAR 0 9
69209: PUSH
69210: LD_VAR 0 1
69214: PPUSH
69215: LD_INT 1
69217: PPUSH
69218: CALL_OW 287
69222: PUSH
69223: LD_INT 10
69225: MUL
69226: ST_TO_ADDR
// r := rate / 10 ;
69227: LD_ADDR_VAR 0 7
69231: PUSH
69232: LD_VAR 0 2
69236: PUSH
69237: LD_INT 10
69239: DIVREAL
69240: ST_TO_ADDR
// time := 1 1$00 ;
69241: LD_ADDR_VAR 0 8
69245: PUSH
69246: LD_INT 2100
69248: ST_TO_ADDR
// if amount < min then
69249: LD_VAR 0 9
69253: PUSH
69254: LD_VAR 0 3
69258: LESS
69259: IFFALSE 69277
// r := r * 2 else
69261: LD_ADDR_VAR 0 7
69265: PUSH
69266: LD_VAR 0 7
69270: PUSH
69271: LD_INT 2
69273: MUL
69274: ST_TO_ADDR
69275: GO 69303
// if amount > max then
69277: LD_VAR 0 9
69281: PUSH
69282: LD_VAR 0 4
69286: GREATER
69287: IFFALSE 69303
// r := r / 2 ;
69289: LD_ADDR_VAR 0 7
69293: PUSH
69294: LD_VAR 0 7
69298: PUSH
69299: LD_INT 2
69301: DIVREAL
69302: ST_TO_ADDR
// time := time / r ;
69303: LD_ADDR_VAR 0 8
69307: PUSH
69308: LD_VAR 0 8
69312: PUSH
69313: LD_VAR 0 7
69317: DIVREAL
69318: ST_TO_ADDR
// if time < 0 then
69319: LD_VAR 0 8
69323: PUSH
69324: LD_INT 0
69326: LESS
69327: IFFALSE 69344
// time := time * - 1 ;
69329: LD_ADDR_VAR 0 8
69333: PUSH
69334: LD_VAR 0 8
69338: PUSH
69339: LD_INT 1
69341: NEG
69342: MUL
69343: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
69344: LD_VAR 0 8
69348: PUSH
69349: LD_INT 35
69351: PPUSH
69352: LD_INT 875
69354: PPUSH
69355: CALL_OW 12
69359: PLUS
69360: PPUSH
69361: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
69365: LD_INT 1
69367: PPUSH
69368: LD_INT 5
69370: PPUSH
69371: CALL_OW 12
69375: PPUSH
69376: LD_VAR 0 1
69380: PPUSH
69381: LD_INT 1
69383: PPUSH
69384: CALL_OW 55
// end ;
69388: GO 69201
// end ;
69390: LD_VAR 0 5
69394: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
69395: LD_INT 0
69397: PPUSH
69398: PPUSH
69399: PPUSH
69400: PPUSH
69401: PPUSH
69402: PPUSH
69403: PPUSH
69404: PPUSH
// if not turrets or not factories then
69405: LD_VAR 0 1
69409: NOT
69410: IFTRUE 69419
69412: PUSH
69413: LD_VAR 0 2
69417: NOT
69418: OR
69419: IFFALSE 69423
// exit ;
69421: GO 69730
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
69423: LD_ADDR_VAR 0 10
69427: PUSH
69428: LD_INT 5
69430: PUSH
69431: LD_INT 6
69433: PUSH
69434: EMPTY
69435: LIST
69436: LIST
69437: PUSH
69438: LD_INT 2
69440: PUSH
69441: LD_INT 4
69443: PUSH
69444: EMPTY
69445: LIST
69446: LIST
69447: PUSH
69448: LD_INT 3
69450: PUSH
69451: LD_INT 5
69453: PUSH
69454: EMPTY
69455: LIST
69456: LIST
69457: PUSH
69458: EMPTY
69459: LIST
69460: LIST
69461: LIST
69462: PUSH
69463: LD_INT 24
69465: PUSH
69466: LD_INT 25
69468: PUSH
69469: EMPTY
69470: LIST
69471: LIST
69472: PUSH
69473: LD_INT 23
69475: PUSH
69476: LD_INT 27
69478: PUSH
69479: EMPTY
69480: LIST
69481: LIST
69482: PUSH
69483: EMPTY
69484: LIST
69485: LIST
69486: PUSH
69487: LD_INT 42
69489: PUSH
69490: LD_INT 43
69492: PUSH
69493: EMPTY
69494: LIST
69495: LIST
69496: PUSH
69497: LD_INT 44
69499: PUSH
69500: LD_INT 46
69502: PUSH
69503: EMPTY
69504: LIST
69505: LIST
69506: PUSH
69507: LD_INT 45
69509: PUSH
69510: LD_INT 47
69512: PUSH
69513: EMPTY
69514: LIST
69515: LIST
69516: PUSH
69517: EMPTY
69518: LIST
69519: LIST
69520: LIST
69521: PUSH
69522: EMPTY
69523: LIST
69524: LIST
69525: LIST
69526: ST_TO_ADDR
// result := [ ] ;
69527: LD_ADDR_VAR 0 3
69531: PUSH
69532: EMPTY
69533: ST_TO_ADDR
// for i in turrets do
69534: LD_ADDR_VAR 0 4
69538: PUSH
69539: LD_VAR 0 1
69543: PUSH
69544: FOR_IN
69545: IFFALSE 69728
// begin nat := GetNation ( i ) ;
69547: LD_ADDR_VAR 0 7
69551: PUSH
69552: LD_VAR 0 4
69556: PPUSH
69557: CALL_OW 248
69561: ST_TO_ADDR
// weapon := 0 ;
69562: LD_ADDR_VAR 0 8
69566: PUSH
69567: LD_INT 0
69569: ST_TO_ADDR
// if not nat then
69570: LD_VAR 0 7
69574: NOT
69575: IFFALSE 69579
// continue ;
69577: GO 69544
// for j in list [ nat ] do
69579: LD_ADDR_VAR 0 5
69583: PUSH
69584: LD_VAR 0 10
69588: PUSH
69589: LD_VAR 0 7
69593: ARRAY
69594: PUSH
69595: FOR_IN
69596: IFFALSE 69637
// if GetBWeapon ( i ) = j [ 1 ] then
69598: LD_VAR 0 4
69602: PPUSH
69603: CALL_OW 269
69607: PUSH
69608: LD_VAR 0 5
69612: PUSH
69613: LD_INT 1
69615: ARRAY
69616: EQUAL
69617: IFFALSE 69635
// begin weapon := j [ 2 ] ;
69619: LD_ADDR_VAR 0 8
69623: PUSH
69624: LD_VAR 0 5
69628: PUSH
69629: LD_INT 2
69631: ARRAY
69632: ST_TO_ADDR
// break ;
69633: GO 69637
// end ;
69635: GO 69595
69637: POP
69638: POP
// if not weapon then
69639: LD_VAR 0 8
69643: NOT
69644: IFFALSE 69648
// continue ;
69646: GO 69544
// for k in factories do
69648: LD_ADDR_VAR 0 6
69652: PUSH
69653: LD_VAR 0 2
69657: PUSH
69658: FOR_IN
69659: IFFALSE 69724
// begin weapons := AvailableWeaponList ( k ) ;
69661: LD_ADDR_VAR 0 9
69665: PUSH
69666: LD_VAR 0 6
69670: PPUSH
69671: CALL_OW 478
69675: ST_TO_ADDR
// if not weapons then
69676: LD_VAR 0 9
69680: NOT
69681: IFFALSE 69685
// continue ;
69683: GO 69658
// if weapon in weapons then
69685: LD_VAR 0 8
69689: PUSH
69690: LD_VAR 0 9
69694: IN
69695: IFFALSE 69722
// begin result := [ i , weapon ] ;
69697: LD_ADDR_VAR 0 3
69701: PUSH
69702: LD_VAR 0 4
69706: PUSH
69707: LD_VAR 0 8
69711: PUSH
69712: EMPTY
69713: LIST
69714: LIST
69715: ST_TO_ADDR
// exit ;
69716: POP
69717: POP
69718: POP
69719: POP
69720: GO 69730
// end ; end ;
69722: GO 69658
69724: POP
69725: POP
// end ;
69726: GO 69544
69728: POP
69729: POP
// end ;
69730: LD_VAR 0 3
69734: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
69735: LD_INT 0
69737: PPUSH
// if not side or side > 8 then
69738: LD_VAR 0 3
69742: NOT
69743: IFTRUE 69755
69745: PUSH
69746: LD_VAR 0 3
69750: PUSH
69751: LD_INT 8
69753: GREATER
69754: OR
69755: IFFALSE 69759
// exit ;
69757: GO 69818
// if not range then
69759: LD_VAR 0 4
69763: NOT
69764: IFFALSE 69775
// range := - 12 ;
69766: LD_ADDR_VAR 0 4
69770: PUSH
69771: LD_INT 12
69773: NEG
69774: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
69775: LD_VAR 0 1
69779: PPUSH
69780: LD_VAR 0 2
69784: PPUSH
69785: LD_VAR 0 3
69789: PPUSH
69790: LD_VAR 0 4
69794: PPUSH
69795: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
69799: LD_VAR 0 1
69803: PPUSH
69804: LD_VAR 0 2
69808: PPUSH
69809: LD_VAR 0 3
69813: PPUSH
69814: CALL_OW 331
// end ;
69818: LD_VAR 0 5
69822: RET
// export function Video ( mode ) ; begin
69823: LD_INT 0
69825: PPUSH
// ingame_video = mode ;
69826: LD_ADDR_OWVAR 52
69830: PUSH
69831: LD_VAR 0 1
69835: ST_TO_ADDR
// interface_hidden = mode ;
69836: LD_ADDR_OWVAR 54
69840: PUSH
69841: LD_VAR 0 1
69845: ST_TO_ADDR
// end ;
69846: LD_VAR 0 2
69850: RET
// export function Join ( array , element ) ; begin
69851: LD_INT 0
69853: PPUSH
// result := Replace ( array , array + 1 , element ) ;
69854: LD_ADDR_VAR 0 3
69858: PUSH
69859: LD_VAR 0 1
69863: PPUSH
69864: LD_VAR 0 1
69868: PUSH
69869: LD_INT 1
69871: PLUS
69872: PPUSH
69873: LD_VAR 0 2
69877: PPUSH
69878: CALL_OW 1
69882: ST_TO_ADDR
// end ;
69883: LD_VAR 0 3
69887: RET
// export function JoinUnion ( array , element ) ; begin
69888: LD_INT 0
69890: PPUSH
// result := array union element ;
69891: LD_ADDR_VAR 0 3
69895: PUSH
69896: LD_VAR 0 1
69900: PUSH
69901: LD_VAR 0 2
69905: UNION
69906: ST_TO_ADDR
// end ;
69907: LD_VAR 0 3
69911: RET
// export function GetBehemoths ( side ) ; begin
69912: LD_INT 0
69914: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
69915: LD_ADDR_VAR 0 2
69919: PUSH
69920: LD_INT 22
69922: PUSH
69923: LD_VAR 0 1
69927: PUSH
69928: EMPTY
69929: LIST
69930: LIST
69931: PUSH
69932: LD_INT 31
69934: PUSH
69935: LD_INT 25
69937: PUSH
69938: EMPTY
69939: LIST
69940: LIST
69941: PUSH
69942: EMPTY
69943: LIST
69944: LIST
69945: PPUSH
69946: CALL_OW 69
69950: ST_TO_ADDR
// end ;
69951: LD_VAR 0 2
69955: RET
// export function Shuffle ( array ) ; var i , index ; begin
69956: LD_INT 0
69958: PPUSH
69959: PPUSH
69960: PPUSH
// result := [ ] ;
69961: LD_ADDR_VAR 0 2
69965: PUSH
69966: EMPTY
69967: ST_TO_ADDR
// if not array then
69968: LD_VAR 0 1
69972: NOT
69973: IFFALSE 69977
// exit ;
69975: GO 70076
// Randomize ;
69977: CALL_OW 10
// for i = array downto 1 do
69981: LD_ADDR_VAR 0 3
69985: PUSH
69986: DOUBLE
69987: LD_VAR 0 1
69991: INC
69992: ST_TO_ADDR
69993: LD_INT 1
69995: PUSH
69996: FOR_DOWNTO
69997: IFFALSE 70074
// begin index := rand ( 1 , array ) ;
69999: LD_ADDR_VAR 0 4
70003: PUSH
70004: LD_INT 1
70006: PPUSH
70007: LD_VAR 0 1
70011: PPUSH
70012: CALL_OW 12
70016: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
70017: LD_ADDR_VAR 0 2
70021: PUSH
70022: LD_VAR 0 2
70026: PPUSH
70027: LD_VAR 0 2
70031: PUSH
70032: LD_INT 1
70034: PLUS
70035: PPUSH
70036: LD_VAR 0 1
70040: PUSH
70041: LD_VAR 0 4
70045: ARRAY
70046: PPUSH
70047: CALL_OW 2
70051: ST_TO_ADDR
// array := Delete ( array , index ) ;
70052: LD_ADDR_VAR 0 1
70056: PUSH
70057: LD_VAR 0 1
70061: PPUSH
70062: LD_VAR 0 4
70066: PPUSH
70067: CALL_OW 3
70071: ST_TO_ADDR
// end ;
70072: GO 69996
70074: POP
70075: POP
// end ;
70076: LD_VAR 0 2
70080: RET
// export function GetBaseMaterials ( base ) ; begin
70081: LD_INT 0
70083: PPUSH
// result := [ 0 , 0 , 0 ] ;
70084: LD_ADDR_VAR 0 2
70088: PUSH
70089: LD_INT 0
70091: PUSH
70092: LD_INT 0
70094: PUSH
70095: LD_INT 0
70097: PUSH
70098: EMPTY
70099: LIST
70100: LIST
70101: LIST
70102: ST_TO_ADDR
// if not base then
70103: LD_VAR 0 1
70107: NOT
70108: IFFALSE 70112
// exit ;
70110: GO 70161
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
70112: LD_ADDR_VAR 0 2
70116: PUSH
70117: LD_VAR 0 1
70121: PPUSH
70122: LD_INT 1
70124: PPUSH
70125: CALL_OW 275
70129: PUSH
70130: LD_VAR 0 1
70134: PPUSH
70135: LD_INT 2
70137: PPUSH
70138: CALL_OW 275
70142: PUSH
70143: LD_VAR 0 1
70147: PPUSH
70148: LD_INT 3
70150: PPUSH
70151: CALL_OW 275
70155: PUSH
70156: EMPTY
70157: LIST
70158: LIST
70159: LIST
70160: ST_TO_ADDR
// end ;
70161: LD_VAR 0 2
70165: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
70166: LD_INT 0
70168: PPUSH
70169: PPUSH
// result := array ;
70170: LD_ADDR_VAR 0 3
70174: PUSH
70175: LD_VAR 0 1
70179: ST_TO_ADDR
// if size >= result then
70180: LD_VAR 0 2
70184: PUSH
70185: LD_VAR 0 3
70189: GREATEREQUAL
70190: IFFALSE 70194
// exit ;
70192: GO 70244
// if size then
70194: LD_VAR 0 2
70198: IFFALSE 70244
// for i := array downto size do
70200: LD_ADDR_VAR 0 4
70204: PUSH
70205: DOUBLE
70206: LD_VAR 0 1
70210: INC
70211: ST_TO_ADDR
70212: LD_VAR 0 2
70216: PUSH
70217: FOR_DOWNTO
70218: IFFALSE 70242
// result := Delete ( result , result ) ;
70220: LD_ADDR_VAR 0 3
70224: PUSH
70225: LD_VAR 0 3
70229: PPUSH
70230: LD_VAR 0 3
70234: PPUSH
70235: CALL_OW 3
70239: ST_TO_ADDR
70240: GO 70217
70242: POP
70243: POP
// end ;
70244: LD_VAR 0 3
70248: RET
// export function ComExit ( unit ) ; var tmp ; begin
70249: LD_INT 0
70251: PPUSH
70252: PPUSH
// if not IsInUnit ( unit ) then
70253: LD_VAR 0 1
70257: PPUSH
70258: CALL_OW 310
70262: NOT
70263: IFFALSE 70267
// exit ;
70265: GO 70327
// tmp := IsInUnit ( unit ) ;
70267: LD_ADDR_VAR 0 3
70271: PUSH
70272: LD_VAR 0 1
70276: PPUSH
70277: CALL_OW 310
70281: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
70282: LD_VAR 0 3
70286: PPUSH
70287: CALL_OW 247
70291: PUSH
70292: LD_INT 2
70294: EQUAL
70295: IFFALSE 70308
// ComExitVehicle ( unit ) else
70297: LD_VAR 0 1
70301: PPUSH
70302: CALL_OW 121
70306: GO 70317
// ComExitBuilding ( unit ) ;
70308: LD_VAR 0 1
70312: PPUSH
70313: CALL_OW 122
// result := tmp ;
70317: LD_ADDR_VAR 0 2
70321: PUSH
70322: LD_VAR 0 3
70326: ST_TO_ADDR
// end ;
70327: LD_VAR 0 2
70331: RET
// export function ComExitAll ( units ) ; var i ; begin
70332: LD_INT 0
70334: PPUSH
70335: PPUSH
// if not units then
70336: LD_VAR 0 1
70340: NOT
70341: IFFALSE 70345
// exit ;
70343: GO 70371
// for i in units do
70345: LD_ADDR_VAR 0 3
70349: PUSH
70350: LD_VAR 0 1
70354: PUSH
70355: FOR_IN
70356: IFFALSE 70369
// ComExit ( i ) ;
70358: LD_VAR 0 3
70362: PPUSH
70363: CALL 70249 0 1
70367: GO 70355
70369: POP
70370: POP
// end ;
70371: LD_VAR 0 2
70375: RET
// export function ResetHc ; begin
70376: LD_INT 0
70378: PPUSH
// InitHc ;
70379: CALL_OW 19
// hc_importance := 0 ;
70383: LD_ADDR_OWVAR 32
70387: PUSH
70388: LD_INT 0
70390: ST_TO_ADDR
// end ;
70391: LD_VAR 0 1
70395: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
70396: LD_INT 0
70398: PPUSH
70399: PPUSH
70400: PPUSH
// _x := ( x1 + x2 ) div 2 ;
70401: LD_ADDR_VAR 0 6
70405: PUSH
70406: LD_VAR 0 1
70410: PUSH
70411: LD_VAR 0 3
70415: PLUS
70416: PUSH
70417: LD_INT 2
70419: DIV
70420: ST_TO_ADDR
// if _x < 0 then
70421: LD_VAR 0 6
70425: PUSH
70426: LD_INT 0
70428: LESS
70429: IFFALSE 70446
// _x := _x * - 1 ;
70431: LD_ADDR_VAR 0 6
70435: PUSH
70436: LD_VAR 0 6
70440: PUSH
70441: LD_INT 1
70443: NEG
70444: MUL
70445: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
70446: LD_ADDR_VAR 0 7
70450: PUSH
70451: LD_VAR 0 2
70455: PUSH
70456: LD_VAR 0 4
70460: PLUS
70461: PUSH
70462: LD_INT 2
70464: DIV
70465: ST_TO_ADDR
// if _y < 0 then
70466: LD_VAR 0 7
70470: PUSH
70471: LD_INT 0
70473: LESS
70474: IFFALSE 70491
// _y := _y * - 1 ;
70476: LD_ADDR_VAR 0 7
70480: PUSH
70481: LD_VAR 0 7
70485: PUSH
70486: LD_INT 1
70488: NEG
70489: MUL
70490: ST_TO_ADDR
// result := [ _x , _y ] ;
70491: LD_ADDR_VAR 0 5
70495: PUSH
70496: LD_VAR 0 6
70500: PUSH
70501: LD_VAR 0 7
70505: PUSH
70506: EMPTY
70507: LIST
70508: LIST
70509: ST_TO_ADDR
// end ;
70510: LD_VAR 0 5
70514: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
70515: LD_INT 0
70517: PPUSH
70518: PPUSH
70519: PPUSH
70520: PPUSH
// task := GetTaskList ( unit ) ;
70521: LD_ADDR_VAR 0 7
70525: PUSH
70526: LD_VAR 0 1
70530: PPUSH
70531: CALL_OW 437
70535: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
70536: LD_VAR 0 7
70540: NOT
70541: IFFALSE 70560
70543: PUSH
70544: LD_VAR 0 1
70548: PPUSH
70549: LD_VAR 0 2
70553: PPUSH
70554: CALL_OW 308
70558: NOT
70559: AND
70560: IFFALSE 70564
// exit ;
70562: GO 70682
// if IsInArea ( unit , area ) then
70564: LD_VAR 0 1
70568: PPUSH
70569: LD_VAR 0 2
70573: PPUSH
70574: CALL_OW 308
70578: IFFALSE 70596
// begin ComMoveToArea ( unit , goAway ) ;
70580: LD_VAR 0 1
70584: PPUSH
70585: LD_VAR 0 3
70589: PPUSH
70590: CALL_OW 113
// exit ;
70594: GO 70682
// end ; if task [ 1 ] [ 1 ] <> M then
70596: LD_VAR 0 7
70600: PUSH
70601: LD_INT 1
70603: ARRAY
70604: PUSH
70605: LD_INT 1
70607: ARRAY
70608: PUSH
70609: LD_STRING M
70611: NONEQUAL
70612: IFFALSE 70616
// exit ;
70614: GO 70682
// x := task [ 1 ] [ 2 ] ;
70616: LD_ADDR_VAR 0 5
70620: PUSH
70621: LD_VAR 0 7
70625: PUSH
70626: LD_INT 1
70628: ARRAY
70629: PUSH
70630: LD_INT 2
70632: ARRAY
70633: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
70634: LD_ADDR_VAR 0 6
70638: PUSH
70639: LD_VAR 0 7
70643: PUSH
70644: LD_INT 1
70646: ARRAY
70647: PUSH
70648: LD_INT 3
70650: ARRAY
70651: ST_TO_ADDR
// if InArea ( x , y , area ) then
70652: LD_VAR 0 5
70656: PPUSH
70657: LD_VAR 0 6
70661: PPUSH
70662: LD_VAR 0 2
70666: PPUSH
70667: CALL_OW 309
70671: IFFALSE 70682
// ComStop ( unit ) ;
70673: LD_VAR 0 1
70677: PPUSH
70678: CALL_OW 141
// end ;
70682: LD_VAR 0 4
70686: RET
// export function Abs ( value ) ; begin
70687: LD_INT 0
70689: PPUSH
// result := value ;
70690: LD_ADDR_VAR 0 2
70694: PUSH
70695: LD_VAR 0 1
70699: ST_TO_ADDR
// if value < 0 then
70700: LD_VAR 0 1
70704: PUSH
70705: LD_INT 0
70707: LESS
70708: IFFALSE 70725
// result := value * - 1 ;
70710: LD_ADDR_VAR 0 2
70714: PUSH
70715: LD_VAR 0 1
70719: PUSH
70720: LD_INT 1
70722: NEG
70723: MUL
70724: ST_TO_ADDR
// end ;
70725: LD_VAR 0 2
70729: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
70730: LD_INT 0
70732: PPUSH
70733: PPUSH
70734: PPUSH
70735: PPUSH
70736: PPUSH
70737: PPUSH
70738: PPUSH
70739: PPUSH
// if not unit or not building then
70740: LD_VAR 0 1
70744: NOT
70745: IFTRUE 70754
70747: PUSH
70748: LD_VAR 0 2
70752: NOT
70753: OR
70754: IFFALSE 70758
// exit ;
70756: GO 70986
// x := GetX ( building ) ;
70758: LD_ADDR_VAR 0 4
70762: PUSH
70763: LD_VAR 0 2
70767: PPUSH
70768: CALL_OW 250
70772: ST_TO_ADDR
// y := GetY ( building ) ;
70773: LD_ADDR_VAR 0 6
70777: PUSH
70778: LD_VAR 0 2
70782: PPUSH
70783: CALL_OW 251
70787: ST_TO_ADDR
// d := GetDir ( building ) ;
70788: LD_ADDR_VAR 0 8
70792: PUSH
70793: LD_VAR 0 2
70797: PPUSH
70798: CALL_OW 254
70802: ST_TO_ADDR
// r := 4 ;
70803: LD_ADDR_VAR 0 9
70807: PUSH
70808: LD_INT 4
70810: ST_TO_ADDR
// for i := 1 to 5 do
70811: LD_ADDR_VAR 0 10
70815: PUSH
70816: DOUBLE
70817: LD_INT 1
70819: DEC
70820: ST_TO_ADDR
70821: LD_INT 5
70823: PUSH
70824: FOR_TO
70825: IFFALSE 70984
// begin _x := ShiftX ( x , d , r + i ) ;
70827: LD_ADDR_VAR 0 5
70831: PUSH
70832: LD_VAR 0 4
70836: PPUSH
70837: LD_VAR 0 8
70841: PPUSH
70842: LD_VAR 0 9
70846: PUSH
70847: LD_VAR 0 10
70851: PLUS
70852: PPUSH
70853: CALL_OW 272
70857: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
70858: LD_ADDR_VAR 0 7
70862: PUSH
70863: LD_VAR 0 6
70867: PPUSH
70868: LD_VAR 0 8
70872: PPUSH
70873: LD_VAR 0 9
70877: PUSH
70878: LD_VAR 0 10
70882: PLUS
70883: PPUSH
70884: CALL_OW 273
70888: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
70889: LD_VAR 0 5
70893: PPUSH
70894: LD_VAR 0 7
70898: PPUSH
70899: CALL_OW 488
70903: IFFALSE 70938
70905: PUSH
70906: LD_VAR 0 5
70910: PPUSH
70911: LD_VAR 0 7
70915: PPUSH
70916: CALL_OW 428
70920: PPUSH
70921: CALL_OW 247
70925: PUSH
70926: LD_INT 3
70928: PUSH
70929: LD_INT 2
70931: PUSH
70932: EMPTY
70933: LIST
70934: LIST
70935: IN
70936: NOT
70937: AND
70938: IFFALSE 70982
// begin ComMoveXY ( unit , _x , _y ) ;
70940: LD_VAR 0 1
70944: PPUSH
70945: LD_VAR 0 5
70949: PPUSH
70950: LD_VAR 0 7
70954: PPUSH
70955: CALL_OW 111
// result := [ _x , _y ] ;
70959: LD_ADDR_VAR 0 3
70963: PUSH
70964: LD_VAR 0 5
70968: PUSH
70969: LD_VAR 0 7
70973: PUSH
70974: EMPTY
70975: LIST
70976: LIST
70977: ST_TO_ADDR
// exit ;
70978: POP
70979: POP
70980: GO 70986
// end ; end ;
70982: GO 70824
70984: POP
70985: POP
// end ;
70986: LD_VAR 0 3
70990: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
70991: LD_INT 0
70993: PPUSH
70994: PPUSH
70995: PPUSH
// result := 0 ;
70996: LD_ADDR_VAR 0 3
71000: PUSH
71001: LD_INT 0
71003: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
71004: LD_VAR 0 1
71008: PUSH
71009: LD_INT 0
71011: LESS
71012: IFTRUE 71024
71014: PUSH
71015: LD_VAR 0 1
71019: PUSH
71020: LD_INT 8
71022: GREATER
71023: OR
71024: IFTRUE 71036
71026: PUSH
71027: LD_VAR 0 2
71031: PUSH
71032: LD_INT 0
71034: LESS
71035: OR
71036: IFTRUE 71048
71038: PUSH
71039: LD_VAR 0 2
71043: PUSH
71044: LD_INT 8
71046: GREATER
71047: OR
71048: IFFALSE 71052
// exit ;
71050: GO 71127
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
71052: LD_ADDR_VAR 0 4
71056: PUSH
71057: LD_INT 22
71059: PUSH
71060: LD_VAR 0 2
71064: PUSH
71065: EMPTY
71066: LIST
71067: LIST
71068: PPUSH
71069: CALL_OW 69
71073: PUSH
71074: FOR_IN
71075: IFFALSE 71125
// begin un := UnitShoot ( i ) ;
71077: LD_ADDR_VAR 0 5
71081: PUSH
71082: LD_VAR 0 4
71086: PPUSH
71087: CALL_OW 504
71091: ST_TO_ADDR
// if GetSide ( un ) = side1 then
71092: LD_VAR 0 5
71096: PPUSH
71097: CALL_OW 255
71101: PUSH
71102: LD_VAR 0 1
71106: EQUAL
71107: IFFALSE 71123
// begin result := un ;
71109: LD_ADDR_VAR 0 3
71113: PUSH
71114: LD_VAR 0 5
71118: ST_TO_ADDR
// exit ;
71119: POP
71120: POP
71121: GO 71127
// end ; end ;
71123: GO 71074
71125: POP
71126: POP
// end ;
71127: LD_VAR 0 3
71131: RET
// export function GetCargoBay ( units ) ; begin
71132: LD_INT 0
71134: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
71135: LD_ADDR_VAR 0 2
71139: PUSH
71140: LD_VAR 0 1
71144: PPUSH
71145: LD_INT 2
71147: PUSH
71148: LD_INT 34
71150: PUSH
71151: LD_INT 12
71153: PUSH
71154: EMPTY
71155: LIST
71156: LIST
71157: PUSH
71158: LD_INT 34
71160: PUSH
71161: LD_INT 51
71163: PUSH
71164: EMPTY
71165: LIST
71166: LIST
71167: PUSH
71168: LD_INT 34
71170: PUSH
71171: LD_INT 32
71173: PUSH
71174: EMPTY
71175: LIST
71176: LIST
71177: PUSH
71178: LD_INT 34
71180: PUSH
71181: LD_INT 89
71183: PUSH
71184: EMPTY
71185: LIST
71186: LIST
71187: PUSH
71188: EMPTY
71189: LIST
71190: LIST
71191: LIST
71192: LIST
71193: LIST
71194: PPUSH
71195: CALL_OW 72
71199: ST_TO_ADDR
// end ;
71200: LD_VAR 0 2
71204: RET
// export function Negate ( value ) ; begin
71205: LD_INT 0
71207: PPUSH
// result := not value ;
71208: LD_ADDR_VAR 0 2
71212: PUSH
71213: LD_VAR 0 1
71217: NOT
71218: ST_TO_ADDR
// end ;
71219: LD_VAR 0 2
71223: RET
// export function Inc ( value ) ; begin
71224: LD_INT 0
71226: PPUSH
// result := value + 1 ;
71227: LD_ADDR_VAR 0 2
71231: PUSH
71232: LD_VAR 0 1
71236: PUSH
71237: LD_INT 1
71239: PLUS
71240: ST_TO_ADDR
// end ;
71241: LD_VAR 0 2
71245: RET
// export function Dec ( value ) ; begin
71246: LD_INT 0
71248: PPUSH
// result := value - 1 ;
71249: LD_ADDR_VAR 0 2
71253: PUSH
71254: LD_VAR 0 1
71258: PUSH
71259: LD_INT 1
71261: MINUS
71262: ST_TO_ADDR
// end ;
71263: LD_VAR 0 2
71267: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
71268: LD_INT 0
71270: PPUSH
71271: PPUSH
71272: PPUSH
71273: PPUSH
71274: PPUSH
71275: PPUSH
71276: PPUSH
71277: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
71278: LD_VAR 0 1
71282: PPUSH
71283: LD_VAR 0 2
71287: PPUSH
71288: CALL_OW 488
71292: NOT
71293: IFTRUE 71312
71295: PUSH
71296: LD_VAR 0 3
71300: PPUSH
71301: LD_VAR 0 4
71305: PPUSH
71306: CALL_OW 488
71310: NOT
71311: OR
71312: IFFALSE 71325
// begin result := - 1 ;
71314: LD_ADDR_VAR 0 5
71318: PUSH
71319: LD_INT 1
71321: NEG
71322: ST_TO_ADDR
// exit ;
71323: GO 71560
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
71325: LD_ADDR_VAR 0 12
71329: PUSH
71330: LD_VAR 0 1
71334: PPUSH
71335: LD_VAR 0 2
71339: PPUSH
71340: LD_VAR 0 3
71344: PPUSH
71345: LD_VAR 0 4
71349: PPUSH
71350: CALL 70396 0 4
71354: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
71355: LD_ADDR_VAR 0 11
71359: PUSH
71360: LD_VAR 0 1
71364: PPUSH
71365: LD_VAR 0 2
71369: PPUSH
71370: LD_VAR 0 12
71374: PUSH
71375: LD_INT 1
71377: ARRAY
71378: PPUSH
71379: LD_VAR 0 12
71383: PUSH
71384: LD_INT 2
71386: ARRAY
71387: PPUSH
71388: CALL_OW 298
71392: ST_TO_ADDR
// distance := 9999 ;
71393: LD_ADDR_VAR 0 10
71397: PUSH
71398: LD_INT 9999
71400: ST_TO_ADDR
// for i := 0 to 5 do
71401: LD_ADDR_VAR 0 6
71405: PUSH
71406: DOUBLE
71407: LD_INT 0
71409: DEC
71410: ST_TO_ADDR
71411: LD_INT 5
71413: PUSH
71414: FOR_TO
71415: IFFALSE 71558
// begin _x := ShiftX ( x1 , i , centerDist ) ;
71417: LD_ADDR_VAR 0 7
71421: PUSH
71422: LD_VAR 0 1
71426: PPUSH
71427: LD_VAR 0 6
71431: PPUSH
71432: LD_VAR 0 11
71436: PPUSH
71437: CALL_OW 272
71441: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
71442: LD_ADDR_VAR 0 8
71446: PUSH
71447: LD_VAR 0 2
71451: PPUSH
71452: LD_VAR 0 6
71456: PPUSH
71457: LD_VAR 0 11
71461: PPUSH
71462: CALL_OW 273
71466: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
71467: LD_VAR 0 7
71471: PPUSH
71472: LD_VAR 0 8
71476: PPUSH
71477: CALL_OW 488
71481: NOT
71482: IFFALSE 71486
// continue ;
71484: GO 71414
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
71486: LD_ADDR_VAR 0 9
71490: PUSH
71491: LD_VAR 0 12
71495: PUSH
71496: LD_INT 1
71498: ARRAY
71499: PPUSH
71500: LD_VAR 0 12
71504: PUSH
71505: LD_INT 2
71507: ARRAY
71508: PPUSH
71509: LD_VAR 0 7
71513: PPUSH
71514: LD_VAR 0 8
71518: PPUSH
71519: CALL_OW 298
71523: ST_TO_ADDR
// if tmp < distance then
71524: LD_VAR 0 9
71528: PUSH
71529: LD_VAR 0 10
71533: LESS
71534: IFFALSE 71556
// begin result := i ;
71536: LD_ADDR_VAR 0 5
71540: PUSH
71541: LD_VAR 0 6
71545: ST_TO_ADDR
// distance := tmp ;
71546: LD_ADDR_VAR 0 10
71550: PUSH
71551: LD_VAR 0 9
71555: ST_TO_ADDR
// end ; end ;
71556: GO 71414
71558: POP
71559: POP
// end ;
71560: LD_VAR 0 5
71564: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
71565: LD_INT 0
71567: PPUSH
71568: PPUSH
// if not driver or not IsInUnit ( driver ) then
71569: LD_VAR 0 1
71573: NOT
71574: IFTRUE 71588
71576: PUSH
71577: LD_VAR 0 1
71581: PPUSH
71582: CALL_OW 310
71586: NOT
71587: OR
71588: IFFALSE 71592
// exit ;
71590: GO 71682
// vehicle := IsInUnit ( driver ) ;
71592: LD_ADDR_VAR 0 3
71596: PUSH
71597: LD_VAR 0 1
71601: PPUSH
71602: CALL_OW 310
71606: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
71607: LD_VAR 0 1
71611: PPUSH
71612: LD_STRING \
71614: PUSH
71615: LD_INT 0
71617: PUSH
71618: LD_INT 0
71620: PUSH
71621: LD_INT 0
71623: PUSH
71624: LD_INT 0
71626: PUSH
71627: LD_INT 0
71629: PUSH
71630: LD_INT 0
71632: PUSH
71633: EMPTY
71634: LIST
71635: LIST
71636: LIST
71637: LIST
71638: LIST
71639: LIST
71640: LIST
71641: PUSH
71642: LD_STRING E
71644: PUSH
71645: LD_INT 0
71647: PUSH
71648: LD_INT 0
71650: PUSH
71651: LD_VAR 0 3
71655: PUSH
71656: LD_INT 0
71658: PUSH
71659: LD_INT 0
71661: PUSH
71662: LD_INT 0
71664: PUSH
71665: EMPTY
71666: LIST
71667: LIST
71668: LIST
71669: LIST
71670: LIST
71671: LIST
71672: LIST
71673: PUSH
71674: EMPTY
71675: LIST
71676: LIST
71677: PPUSH
71678: CALL_OW 446
// end ;
71682: LD_VAR 0 2
71686: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
71687: LD_INT 0
71689: PPUSH
71690: PPUSH
// if not driver or not IsInUnit ( driver ) then
71691: LD_VAR 0 1
71695: NOT
71696: IFTRUE 71710
71698: PUSH
71699: LD_VAR 0 1
71703: PPUSH
71704: CALL_OW 310
71708: NOT
71709: OR
71710: IFFALSE 71714
// exit ;
71712: GO 71804
// vehicle := IsInUnit ( driver ) ;
71714: LD_ADDR_VAR 0 3
71718: PUSH
71719: LD_VAR 0 1
71723: PPUSH
71724: CALL_OW 310
71728: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
71729: LD_VAR 0 1
71733: PPUSH
71734: LD_STRING \
71736: PUSH
71737: LD_INT 0
71739: PUSH
71740: LD_INT 0
71742: PUSH
71743: LD_INT 0
71745: PUSH
71746: LD_INT 0
71748: PUSH
71749: LD_INT 0
71751: PUSH
71752: LD_INT 0
71754: PUSH
71755: EMPTY
71756: LIST
71757: LIST
71758: LIST
71759: LIST
71760: LIST
71761: LIST
71762: LIST
71763: PUSH
71764: LD_STRING E
71766: PUSH
71767: LD_INT 0
71769: PUSH
71770: LD_INT 0
71772: PUSH
71773: LD_VAR 0 3
71777: PUSH
71778: LD_INT 0
71780: PUSH
71781: LD_INT 0
71783: PUSH
71784: LD_INT 0
71786: PUSH
71787: EMPTY
71788: LIST
71789: LIST
71790: LIST
71791: LIST
71792: LIST
71793: LIST
71794: LIST
71795: PUSH
71796: EMPTY
71797: LIST
71798: LIST
71799: PPUSH
71800: CALL_OW 447
// end ;
71804: LD_VAR 0 2
71808: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
71809: LD_INT 0
71811: PPUSH
71812: PPUSH
71813: PPUSH
// tmp := [ ] ;
71814: LD_ADDR_VAR 0 5
71818: PUSH
71819: EMPTY
71820: ST_TO_ADDR
// for i in units do
71821: LD_ADDR_VAR 0 4
71825: PUSH
71826: LD_VAR 0 1
71830: PUSH
71831: FOR_IN
71832: IFFALSE 71870
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
71834: LD_ADDR_VAR 0 5
71838: PUSH
71839: LD_VAR 0 5
71843: PPUSH
71844: LD_VAR 0 5
71848: PUSH
71849: LD_INT 1
71851: PLUS
71852: PPUSH
71853: LD_VAR 0 4
71857: PPUSH
71858: CALL_OW 256
71862: PPUSH
71863: CALL_OW 2
71867: ST_TO_ADDR
71868: GO 71831
71870: POP
71871: POP
// if not tmp then
71872: LD_VAR 0 5
71876: NOT
71877: IFFALSE 71881
// exit ;
71879: GO 71929
// if asc then
71881: LD_VAR 0 2
71885: IFFALSE 71909
// result := SortListByListAsc ( units , tmp ) else
71887: LD_ADDR_VAR 0 3
71891: PUSH
71892: LD_VAR 0 1
71896: PPUSH
71897: LD_VAR 0 5
71901: PPUSH
71902: CALL_OW 76
71906: ST_TO_ADDR
71907: GO 71929
// result := SortListByListDesc ( units , tmp ) ;
71909: LD_ADDR_VAR 0 3
71913: PUSH
71914: LD_VAR 0 1
71918: PPUSH
71919: LD_VAR 0 5
71923: PPUSH
71924: CALL_OW 77
71928: ST_TO_ADDR
// end ;
71929: LD_VAR 0 3
71933: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
71934: LD_INT 0
71936: PPUSH
71937: PPUSH
// task := GetTaskList ( mech ) ;
71938: LD_ADDR_VAR 0 4
71942: PUSH
71943: LD_VAR 0 1
71947: PPUSH
71948: CALL_OW 437
71952: ST_TO_ADDR
// if not task then
71953: LD_VAR 0 4
71957: NOT
71958: IFFALSE 71962
// exit ;
71960: GO 72006
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
71962: LD_ADDR_VAR 0 3
71966: PUSH
71967: LD_VAR 0 4
71971: PUSH
71972: LD_INT 1
71974: ARRAY
71975: PUSH
71976: LD_INT 1
71978: ARRAY
71979: PUSH
71980: LD_STRING r
71982: EQUAL
71983: IFFALSE 72005
71985: PUSH
71986: LD_VAR 0 4
71990: PUSH
71991: LD_INT 1
71993: ARRAY
71994: PUSH
71995: LD_INT 4
71997: ARRAY
71998: PUSH
71999: LD_VAR 0 2
72003: EQUAL
72004: AND
72005: ST_TO_ADDR
// end ;
72006: LD_VAR 0 3
72010: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
72011: LD_INT 0
72013: PPUSH
// SetDir ( unit , d ) ;
72014: LD_VAR 0 1
72018: PPUSH
72019: LD_VAR 0 4
72023: PPUSH
72024: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
72028: LD_ADDR_VAR 0 6
72032: PUSH
72033: LD_VAR 0 1
72037: PPUSH
72038: LD_VAR 0 2
72042: PPUSH
72043: LD_VAR 0 3
72047: PPUSH
72048: LD_VAR 0 5
72052: PPUSH
72053: CALL_OW 48
72057: ST_TO_ADDR
// end ;
72058: LD_VAR 0 6
72062: RET
// export function ToNaturalNumber ( number ) ; begin
72063: LD_INT 0
72065: PPUSH
// result := number div 1 ;
72066: LD_ADDR_VAR 0 2
72070: PUSH
72071: LD_VAR 0 1
72075: PUSH
72076: LD_INT 1
72078: DIV
72079: ST_TO_ADDR
// if number < 0 then
72080: LD_VAR 0 1
72084: PUSH
72085: LD_INT 0
72087: LESS
72088: IFFALSE 72098
// result := 0 ;
72090: LD_ADDR_VAR 0 2
72094: PUSH
72095: LD_INT 0
72097: ST_TO_ADDR
// end ;
72098: LD_VAR 0 2
72102: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
72103: LD_INT 0
72105: PPUSH
72106: PPUSH
72107: PPUSH
// if not buildings then
72108: LD_VAR 0 1
72112: NOT
72113: IFFALSE 72117
// exit ;
72115: GO 72232
// tmp := [ ] ;
72117: LD_ADDR_VAR 0 5
72121: PUSH
72122: EMPTY
72123: ST_TO_ADDR
// for b in buildings do
72124: LD_ADDR_VAR 0 4
72128: PUSH
72129: LD_VAR 0 1
72133: PUSH
72134: FOR_IN
72135: IFFALSE 72173
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
72137: LD_ADDR_VAR 0 5
72141: PUSH
72142: LD_VAR 0 5
72146: PPUSH
72147: LD_VAR 0 5
72151: PUSH
72152: LD_INT 1
72154: PLUS
72155: PPUSH
72156: LD_VAR 0 4
72160: PPUSH
72161: CALL_OW 266
72165: PPUSH
72166: CALL_OW 1
72170: ST_TO_ADDR
72171: GO 72134
72173: POP
72174: POP
// if not tmp then
72175: LD_VAR 0 5
72179: NOT
72180: IFFALSE 72184
// exit ;
72182: GO 72232
// if asc then
72184: LD_VAR 0 2
72188: IFFALSE 72212
// result := SortListByListAsc ( buildings , tmp ) else
72190: LD_ADDR_VAR 0 3
72194: PUSH
72195: LD_VAR 0 1
72199: PPUSH
72200: LD_VAR 0 5
72204: PPUSH
72205: CALL_OW 76
72209: ST_TO_ADDR
72210: GO 72232
// result := SortListByListDesc ( buildings , tmp ) ;
72212: LD_ADDR_VAR 0 3
72216: PUSH
72217: LD_VAR 0 1
72221: PPUSH
72222: LD_VAR 0 5
72226: PPUSH
72227: CALL_OW 77
72231: ST_TO_ADDR
// end ;
72232: LD_VAR 0 3
72236: RET
// export function SortByClass ( units , class ) ; var un ; begin
72237: LD_INT 0
72239: PPUSH
72240: PPUSH
// if not units or not class then
72241: LD_VAR 0 1
72245: NOT
72246: IFTRUE 72255
72248: PUSH
72249: LD_VAR 0 2
72253: NOT
72254: OR
72255: IFFALSE 72259
// exit ;
72257: GO 72354
// result := [ ] ;
72259: LD_ADDR_VAR 0 3
72263: PUSH
72264: EMPTY
72265: ST_TO_ADDR
// for un in units do
72266: LD_ADDR_VAR 0 4
72270: PUSH
72271: LD_VAR 0 1
72275: PUSH
72276: FOR_IN
72277: IFFALSE 72352
// if GetClass ( un ) = class then
72279: LD_VAR 0 4
72283: PPUSH
72284: CALL_OW 257
72288: PUSH
72289: LD_VAR 0 2
72293: EQUAL
72294: IFFALSE 72321
// result := Insert ( result , 1 , un ) else
72296: LD_ADDR_VAR 0 3
72300: PUSH
72301: LD_VAR 0 3
72305: PPUSH
72306: LD_INT 1
72308: PPUSH
72309: LD_VAR 0 4
72313: PPUSH
72314: CALL_OW 2
72318: ST_TO_ADDR
72319: GO 72350
// result := Replace ( result , result + 1 , un ) ;
72321: LD_ADDR_VAR 0 3
72325: PUSH
72326: LD_VAR 0 3
72330: PPUSH
72331: LD_VAR 0 3
72335: PUSH
72336: LD_INT 1
72338: PLUS
72339: PPUSH
72340: LD_VAR 0 4
72344: PPUSH
72345: CALL_OW 1
72349: ST_TO_ADDR
72350: GO 72276
72352: POP
72353: POP
// end ;
72354: LD_VAR 0 3
72358: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
72359: LD_INT 0
72361: PPUSH
72362: PPUSH
72363: PPUSH
72364: PPUSH
72365: PPUSH
72366: PPUSH
72367: PPUSH
// result := [ ] ;
72368: LD_ADDR_VAR 0 4
72372: PUSH
72373: EMPTY
72374: ST_TO_ADDR
// if x - r < 0 then
72375: LD_VAR 0 1
72379: PUSH
72380: LD_VAR 0 3
72384: MINUS
72385: PUSH
72386: LD_INT 0
72388: LESS
72389: IFFALSE 72401
// min_x := 0 else
72391: LD_ADDR_VAR 0 8
72395: PUSH
72396: LD_INT 0
72398: ST_TO_ADDR
72399: GO 72417
// min_x := x - r ;
72401: LD_ADDR_VAR 0 8
72405: PUSH
72406: LD_VAR 0 1
72410: PUSH
72411: LD_VAR 0 3
72415: MINUS
72416: ST_TO_ADDR
// if y - r < 0 then
72417: LD_VAR 0 2
72421: PUSH
72422: LD_VAR 0 3
72426: MINUS
72427: PUSH
72428: LD_INT 0
72430: LESS
72431: IFFALSE 72443
// min_y := 0 else
72433: LD_ADDR_VAR 0 7
72437: PUSH
72438: LD_INT 0
72440: ST_TO_ADDR
72441: GO 72459
// min_y := y - r ;
72443: LD_ADDR_VAR 0 7
72447: PUSH
72448: LD_VAR 0 2
72452: PUSH
72453: LD_VAR 0 3
72457: MINUS
72458: ST_TO_ADDR
// max_x := x + r ;
72459: LD_ADDR_VAR 0 9
72463: PUSH
72464: LD_VAR 0 1
72468: PUSH
72469: LD_VAR 0 3
72473: PLUS
72474: ST_TO_ADDR
// max_y := y + r ;
72475: LD_ADDR_VAR 0 10
72479: PUSH
72480: LD_VAR 0 2
72484: PUSH
72485: LD_VAR 0 3
72489: PLUS
72490: ST_TO_ADDR
// for _x = min_x to max_x do
72491: LD_ADDR_VAR 0 5
72495: PUSH
72496: DOUBLE
72497: LD_VAR 0 8
72501: DEC
72502: ST_TO_ADDR
72503: LD_VAR 0 9
72507: PUSH
72508: FOR_TO
72509: IFFALSE 72610
// for _y = min_y to max_y do
72511: LD_ADDR_VAR 0 6
72515: PUSH
72516: DOUBLE
72517: LD_VAR 0 7
72521: DEC
72522: ST_TO_ADDR
72523: LD_VAR 0 10
72527: PUSH
72528: FOR_TO
72529: IFFALSE 72606
// begin if not ValidHex ( _x , _y ) then
72531: LD_VAR 0 5
72535: PPUSH
72536: LD_VAR 0 6
72540: PPUSH
72541: CALL_OW 488
72545: NOT
72546: IFFALSE 72550
// continue ;
72548: GO 72528
// if GetResourceTypeXY ( _x , _y ) then
72550: LD_VAR 0 5
72554: PPUSH
72555: LD_VAR 0 6
72559: PPUSH
72560: CALL_OW 283
72564: IFFALSE 72604
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
72566: LD_ADDR_VAR 0 4
72570: PUSH
72571: LD_VAR 0 4
72575: PPUSH
72576: LD_VAR 0 4
72580: PUSH
72581: LD_INT 1
72583: PLUS
72584: PPUSH
72585: LD_VAR 0 5
72589: PUSH
72590: LD_VAR 0 6
72594: PUSH
72595: EMPTY
72596: LIST
72597: LIST
72598: PPUSH
72599: CALL_OW 1
72603: ST_TO_ADDR
// end ;
72604: GO 72528
72606: POP
72607: POP
72608: GO 72508
72610: POP
72611: POP
// end ;
72612: LD_VAR 0 4
72616: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
72617: LD_INT 0
72619: PPUSH
72620: PPUSH
72621: PPUSH
72622: PPUSH
72623: PPUSH
72624: PPUSH
72625: PPUSH
72626: PPUSH
// if not units then
72627: LD_VAR 0 1
72631: NOT
72632: IFFALSE 72636
// exit ;
72634: GO 73168
// result := UnitFilter ( units , [ f_ok ] ) ;
72636: LD_ADDR_VAR 0 3
72640: PUSH
72641: LD_VAR 0 1
72645: PPUSH
72646: LD_INT 50
72648: PUSH
72649: EMPTY
72650: LIST
72651: PPUSH
72652: CALL_OW 72
72656: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
72657: LD_ADDR_VAR 0 8
72661: PUSH
72662: LD_VAR 0 1
72666: PUSH
72667: LD_INT 1
72669: ARRAY
72670: PPUSH
72671: CALL_OW 255
72675: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
72676: LD_ADDR_VAR 0 10
72680: PUSH
72681: LD_INT 29
72683: PUSH
72684: LD_INT 91
72686: PUSH
72687: LD_INT 49
72689: PUSH
72690: EMPTY
72691: LIST
72692: LIST
72693: LIST
72694: ST_TO_ADDR
// if not result then
72695: LD_VAR 0 3
72699: NOT
72700: IFFALSE 72704
// exit ;
72702: GO 73168
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
72704: LD_ADDR_VAR 0 5
72708: PUSH
72709: LD_INT 81
72711: PUSH
72712: LD_VAR 0 8
72716: PUSH
72717: EMPTY
72718: LIST
72719: LIST
72720: PPUSH
72721: CALL_OW 69
72725: ST_TO_ADDR
// for i in result do
72726: LD_ADDR_VAR 0 4
72730: PUSH
72731: LD_VAR 0 3
72735: PUSH
72736: FOR_IN
72737: IFFALSE 73166
// begin tag := GetTag ( i ) + 1 ;
72739: LD_ADDR_VAR 0 9
72743: PUSH
72744: LD_VAR 0 4
72748: PPUSH
72749: CALL_OW 110
72753: PUSH
72754: LD_INT 1
72756: PLUS
72757: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
72758: LD_ADDR_VAR 0 7
72762: PUSH
72763: LD_VAR 0 4
72767: PPUSH
72768: CALL_OW 250
72772: PPUSH
72773: LD_VAR 0 4
72777: PPUSH
72778: CALL_OW 251
72782: PPUSH
72783: LD_INT 4
72785: PPUSH
72786: CALL 72359 0 3
72790: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
72791: LD_VAR 0 4
72795: PPUSH
72796: CALL_OW 247
72800: PUSH
72801: LD_INT 2
72803: EQUAL
72804: IFFALSE 72816
72806: PUSH
72807: LD_VAR 0 7
72811: PUSH
72812: LD_INT 2
72814: GREATER
72815: AND
72816: IFFALSE 72836
72818: PUSH
72819: LD_VAR 0 4
72823: PPUSH
72824: CALL_OW 264
72828: PUSH
72829: LD_VAR 0 10
72833: IN
72834: NOT
72835: AND
72836: IFFALSE 72875
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
72838: LD_VAR 0 4
72842: PPUSH
72843: LD_VAR 0 7
72847: PUSH
72848: LD_INT 1
72850: ARRAY
72851: PUSH
72852: LD_INT 1
72854: ARRAY
72855: PPUSH
72856: LD_VAR 0 7
72860: PUSH
72861: LD_INT 1
72863: ARRAY
72864: PUSH
72865: LD_INT 2
72867: ARRAY
72868: PPUSH
72869: CALL_OW 116
72873: GO 73164
// if path > tag then
72875: LD_VAR 0 2
72879: PUSH
72880: LD_VAR 0 9
72884: GREATER
72885: IFFALSE 73093
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
72887: LD_ADDR_VAR 0 6
72891: PUSH
72892: LD_VAR 0 5
72896: PPUSH
72897: LD_INT 91
72899: PUSH
72900: LD_VAR 0 4
72904: PUSH
72905: LD_INT 8
72907: PUSH
72908: EMPTY
72909: LIST
72910: LIST
72911: LIST
72912: PPUSH
72913: CALL_OW 72
72917: ST_TO_ADDR
// if nearEnemy then
72918: LD_VAR 0 6
72922: IFFALSE 72991
// begin if GetWeapon ( i ) = ru_time_lapser then
72924: LD_VAR 0 4
72928: PPUSH
72929: CALL_OW 264
72933: PUSH
72934: LD_INT 49
72936: EQUAL
72937: IFFALSE 72965
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
72939: LD_VAR 0 4
72943: PPUSH
72944: LD_VAR 0 6
72948: PPUSH
72949: LD_VAR 0 4
72953: PPUSH
72954: CALL_OW 74
72958: PPUSH
72959: CALL_OW 112
72963: GO 72989
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
72965: LD_VAR 0 4
72969: PPUSH
72970: LD_VAR 0 6
72974: PPUSH
72975: LD_VAR 0 4
72979: PPUSH
72980: CALL_OW 74
72984: PPUSH
72985: CALL 74249 0 2
// end else
72989: GO 73091
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
72991: LD_VAR 0 4
72995: PPUSH
72996: LD_VAR 0 2
73000: PUSH
73001: LD_VAR 0 9
73005: ARRAY
73006: PUSH
73007: LD_INT 1
73009: ARRAY
73010: PPUSH
73011: LD_VAR 0 2
73015: PUSH
73016: LD_VAR 0 9
73020: ARRAY
73021: PUSH
73022: LD_INT 2
73024: ARRAY
73025: PPUSH
73026: CALL_OW 297
73030: PUSH
73031: LD_INT 6
73033: GREATER
73034: IFFALSE 73077
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
73036: LD_VAR 0 4
73040: PPUSH
73041: LD_VAR 0 2
73045: PUSH
73046: LD_VAR 0 9
73050: ARRAY
73051: PUSH
73052: LD_INT 1
73054: ARRAY
73055: PPUSH
73056: LD_VAR 0 2
73060: PUSH
73061: LD_VAR 0 9
73065: ARRAY
73066: PUSH
73067: LD_INT 2
73069: ARRAY
73070: PPUSH
73071: CALL_OW 114
73075: GO 73091
// SetTag ( i , tag ) ;
73077: LD_VAR 0 4
73081: PPUSH
73082: LD_VAR 0 9
73086: PPUSH
73087: CALL_OW 109
// end else
73091: GO 73164
// if enemy then
73093: LD_VAR 0 5
73097: IFFALSE 73164
// begin if GetWeapon ( i ) = ru_time_lapser then
73099: LD_VAR 0 4
73103: PPUSH
73104: CALL_OW 264
73108: PUSH
73109: LD_INT 49
73111: EQUAL
73112: IFFALSE 73140
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
73114: LD_VAR 0 4
73118: PPUSH
73119: LD_VAR 0 5
73123: PPUSH
73124: LD_VAR 0 4
73128: PPUSH
73129: CALL_OW 74
73133: PPUSH
73134: CALL_OW 112
73138: GO 73164
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
73140: LD_VAR 0 4
73144: PPUSH
73145: LD_VAR 0 5
73149: PPUSH
73150: LD_VAR 0 4
73154: PPUSH
73155: CALL_OW 74
73159: PPUSH
73160: CALL 74249 0 2
// end ; end ;
73164: GO 72736
73166: POP
73167: POP
// end ;
73168: LD_VAR 0 3
73172: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
73173: LD_INT 0
73175: PPUSH
73176: PPUSH
73177: PPUSH
// if not unit or IsInUnit ( unit ) then
73178: LD_VAR 0 1
73182: NOT
73183: IFTRUE 73196
73185: PUSH
73186: LD_VAR 0 1
73190: PPUSH
73191: CALL_OW 310
73195: OR
73196: IFFALSE 73200
// exit ;
73198: GO 73291
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
73200: LD_ADDR_VAR 0 4
73204: PUSH
73205: LD_VAR 0 1
73209: PPUSH
73210: CALL_OW 250
73214: PPUSH
73215: LD_VAR 0 2
73219: PPUSH
73220: LD_INT 1
73222: PPUSH
73223: CALL_OW 272
73227: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
73228: LD_ADDR_VAR 0 5
73232: PUSH
73233: LD_VAR 0 1
73237: PPUSH
73238: CALL_OW 251
73242: PPUSH
73243: LD_VAR 0 2
73247: PPUSH
73248: LD_INT 1
73250: PPUSH
73251: CALL_OW 273
73255: ST_TO_ADDR
// if ValidHex ( x , y ) then
73256: LD_VAR 0 4
73260: PPUSH
73261: LD_VAR 0 5
73265: PPUSH
73266: CALL_OW 488
73270: IFFALSE 73291
// ComTurnXY ( unit , x , y ) ;
73272: LD_VAR 0 1
73276: PPUSH
73277: LD_VAR 0 4
73281: PPUSH
73282: LD_VAR 0 5
73286: PPUSH
73287: CALL_OW 118
// end ;
73291: LD_VAR 0 3
73295: RET
// export function SeeUnits ( side , units ) ; var i ; begin
73296: LD_INT 0
73298: PPUSH
73299: PPUSH
// result := false ;
73300: LD_ADDR_VAR 0 3
73304: PUSH
73305: LD_INT 0
73307: ST_TO_ADDR
// if not units then
73308: LD_VAR 0 2
73312: NOT
73313: IFFALSE 73317
// exit ;
73315: GO 73362
// for i in units do
73317: LD_ADDR_VAR 0 4
73321: PUSH
73322: LD_VAR 0 2
73326: PUSH
73327: FOR_IN
73328: IFFALSE 73360
// if See ( side , i ) then
73330: LD_VAR 0 1
73334: PPUSH
73335: LD_VAR 0 4
73339: PPUSH
73340: CALL_OW 292
73344: IFFALSE 73358
// begin result := true ;
73346: LD_ADDR_VAR 0 3
73350: PUSH
73351: LD_INT 1
73353: ST_TO_ADDR
// exit ;
73354: POP
73355: POP
73356: GO 73362
// end ;
73358: GO 73327
73360: POP
73361: POP
// end ;
73362: LD_VAR 0 3
73366: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
73367: LD_INT 0
73369: PPUSH
73370: PPUSH
73371: PPUSH
73372: PPUSH
// if not unit or not points then
73373: LD_VAR 0 1
73377: NOT
73378: IFTRUE 73387
73380: PUSH
73381: LD_VAR 0 2
73385: NOT
73386: OR
73387: IFFALSE 73391
// exit ;
73389: GO 73481
// dist := 99999 ;
73391: LD_ADDR_VAR 0 5
73395: PUSH
73396: LD_INT 99999
73398: ST_TO_ADDR
// for i in points do
73399: LD_ADDR_VAR 0 4
73403: PUSH
73404: LD_VAR 0 2
73408: PUSH
73409: FOR_IN
73410: IFFALSE 73479
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
73412: LD_ADDR_VAR 0 6
73416: PUSH
73417: LD_VAR 0 1
73421: PPUSH
73422: LD_VAR 0 4
73426: PUSH
73427: LD_INT 1
73429: ARRAY
73430: PPUSH
73431: LD_VAR 0 4
73435: PUSH
73436: LD_INT 2
73438: ARRAY
73439: PPUSH
73440: CALL_OW 297
73444: ST_TO_ADDR
// if tmpDist < dist then
73445: LD_VAR 0 6
73449: PUSH
73450: LD_VAR 0 5
73454: LESS
73455: IFFALSE 73477
// begin result := i ;
73457: LD_ADDR_VAR 0 3
73461: PUSH
73462: LD_VAR 0 4
73466: ST_TO_ADDR
// dist := tmpDist ;
73467: LD_ADDR_VAR 0 5
73471: PUSH
73472: LD_VAR 0 6
73476: ST_TO_ADDR
// end ; end ;
73477: GO 73409
73479: POP
73480: POP
// end ;
73481: LD_VAR 0 3
73485: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
73486: LD_INT 0
73488: PPUSH
// uc_side := side ;
73489: LD_ADDR_OWVAR 20
73493: PUSH
73494: LD_VAR 0 1
73498: ST_TO_ADDR
// uc_nation := 3 ;
73499: LD_ADDR_OWVAR 21
73503: PUSH
73504: LD_INT 3
73506: ST_TO_ADDR
// vc_chassis := 25 ;
73507: LD_ADDR_OWVAR 37
73511: PUSH
73512: LD_INT 25
73514: ST_TO_ADDR
// vc_engine := engine_siberite ;
73515: LD_ADDR_OWVAR 39
73519: PUSH
73520: LD_INT 3
73522: ST_TO_ADDR
// vc_control := control_computer ;
73523: LD_ADDR_OWVAR 38
73527: PUSH
73528: LD_INT 3
73530: ST_TO_ADDR
// vc_weapon := 59 ;
73531: LD_ADDR_OWVAR 40
73535: PUSH
73536: LD_INT 59
73538: ST_TO_ADDR
// result := CreateVehicle ;
73539: LD_ADDR_VAR 0 5
73543: PUSH
73544: CALL_OW 45
73548: ST_TO_ADDR
// SetDir ( result , d ) ;
73549: LD_VAR 0 5
73553: PPUSH
73554: LD_VAR 0 4
73558: PPUSH
73559: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
73563: LD_VAR 0 5
73567: PPUSH
73568: LD_VAR 0 2
73572: PPUSH
73573: LD_VAR 0 3
73577: PPUSH
73578: LD_INT 0
73580: PPUSH
73581: CALL_OW 48
// end ;
73585: LD_VAR 0 5
73589: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
73590: LD_INT 0
73592: PPUSH
73593: PPUSH
73594: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
73595: LD_ADDR_VAR 0 2
73599: PUSH
73600: LD_INT 0
73602: PUSH
73603: LD_INT 0
73605: PUSH
73606: LD_INT 0
73608: PUSH
73609: LD_INT 0
73611: PUSH
73612: EMPTY
73613: LIST
73614: LIST
73615: LIST
73616: LIST
73617: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
73618: LD_VAR 0 1
73622: NOT
73623: IFTRUE 73656
73625: PUSH
73626: LD_VAR 0 1
73630: PPUSH
73631: CALL_OW 264
73635: PUSH
73636: LD_INT 12
73638: PUSH
73639: LD_INT 51
73641: PUSH
73642: LD_INT 32
73644: PUSH
73645: LD_INT 89
73647: PUSH
73648: EMPTY
73649: LIST
73650: LIST
73651: LIST
73652: LIST
73653: IN
73654: NOT
73655: OR
73656: IFFALSE 73660
// exit ;
73658: GO 73758
// for i := 1 to 3 do
73660: LD_ADDR_VAR 0 3
73664: PUSH
73665: DOUBLE
73666: LD_INT 1
73668: DEC
73669: ST_TO_ADDR
73670: LD_INT 3
73672: PUSH
73673: FOR_TO
73674: IFFALSE 73756
// begin tmp := GetCargo ( cargo , i ) ;
73676: LD_ADDR_VAR 0 4
73680: PUSH
73681: LD_VAR 0 1
73685: PPUSH
73686: LD_VAR 0 3
73690: PPUSH
73691: CALL_OW 289
73695: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
73696: LD_ADDR_VAR 0 2
73700: PUSH
73701: LD_VAR 0 2
73705: PPUSH
73706: LD_VAR 0 3
73710: PPUSH
73711: LD_VAR 0 4
73715: PPUSH
73716: CALL_OW 1
73720: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
73721: LD_ADDR_VAR 0 2
73725: PUSH
73726: LD_VAR 0 2
73730: PPUSH
73731: LD_INT 4
73733: PPUSH
73734: LD_VAR 0 2
73738: PUSH
73739: LD_INT 4
73741: ARRAY
73742: PUSH
73743: LD_VAR 0 4
73747: PLUS
73748: PPUSH
73749: CALL_OW 1
73753: ST_TO_ADDR
// end ;
73754: GO 73673
73756: POP
73757: POP
// end ;
73758: LD_VAR 0 2
73762: RET
// export function Length ( array ) ; begin
73763: LD_INT 0
73765: PPUSH
// result := array + 0 ;
73766: LD_ADDR_VAR 0 2
73770: PUSH
73771: LD_VAR 0 1
73775: PUSH
73776: LD_INT 0
73778: PLUS
73779: ST_TO_ADDR
// end ;
73780: LD_VAR 0 2
73784: RET
// export function PrepareArray ( array ) ; begin
73785: LD_INT 0
73787: PPUSH
// result := array diff 0 ;
73788: LD_ADDR_VAR 0 2
73792: PUSH
73793: LD_VAR 0 1
73797: PUSH
73798: LD_INT 0
73800: DIFF
73801: ST_TO_ADDR
// if not result [ 1 ] then
73802: LD_VAR 0 2
73806: PUSH
73807: LD_INT 1
73809: ARRAY
73810: NOT
73811: IFFALSE 73831
// result := Delete ( result , 1 ) ;
73813: LD_ADDR_VAR 0 2
73817: PUSH
73818: LD_VAR 0 2
73822: PPUSH
73823: LD_INT 1
73825: PPUSH
73826: CALL_OW 3
73830: ST_TO_ADDR
// end ;
73831: LD_VAR 0 2
73835: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
73836: LD_INT 0
73838: PPUSH
73839: PPUSH
73840: PPUSH
73841: PPUSH
// sibRocketRange := 25 ;
73842: LD_ADDR_VAR 0 6
73846: PUSH
73847: LD_INT 25
73849: ST_TO_ADDR
// result := false ;
73850: LD_ADDR_VAR 0 4
73854: PUSH
73855: LD_INT 0
73857: ST_TO_ADDR
// for i := 0 to 5 do
73858: LD_ADDR_VAR 0 5
73862: PUSH
73863: DOUBLE
73864: LD_INT 0
73866: DEC
73867: ST_TO_ADDR
73868: LD_INT 5
73870: PUSH
73871: FOR_TO
73872: IFFALSE 73939
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
73874: LD_VAR 0 1
73878: PPUSH
73879: LD_VAR 0 5
73883: PPUSH
73884: LD_VAR 0 6
73888: PPUSH
73889: CALL_OW 272
73893: PPUSH
73894: LD_VAR 0 2
73898: PPUSH
73899: LD_VAR 0 5
73903: PPUSH
73904: LD_VAR 0 6
73908: PPUSH
73909: CALL_OW 273
73913: PPUSH
73914: LD_VAR 0 3
73918: PPUSH
73919: CALL_OW 309
73923: IFFALSE 73937
// begin result := true ;
73925: LD_ADDR_VAR 0 4
73929: PUSH
73930: LD_INT 1
73932: ST_TO_ADDR
// exit ;
73933: POP
73934: POP
73935: GO 73941
// end ;
73937: GO 73871
73939: POP
73940: POP
// end ;
73941: LD_VAR 0 4
73945: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
73946: LD_INT 0
73948: PPUSH
73949: PPUSH
73950: PPUSH
// if btype = b_depot then
73951: LD_VAR 0 2
73955: PUSH
73956: LD_INT 0
73958: EQUAL
73959: IFFALSE 73971
// begin result := true ;
73961: LD_ADDR_VAR 0 3
73965: PUSH
73966: LD_INT 1
73968: ST_TO_ADDR
// exit ;
73969: GO 74091
// end ; pom := GetBase ( depot ) ;
73971: LD_ADDR_VAR 0 4
73975: PUSH
73976: LD_VAR 0 1
73980: PPUSH
73981: CALL_OW 274
73985: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
73986: LD_ADDR_VAR 0 5
73990: PUSH
73991: LD_VAR 0 2
73995: PPUSH
73996: LD_VAR 0 1
74000: PPUSH
74001: CALL_OW 248
74005: PPUSH
74006: CALL_OW 450
74010: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
74011: LD_ADDR_VAR 0 3
74015: PUSH
74016: LD_VAR 0 4
74020: PPUSH
74021: LD_INT 1
74023: PPUSH
74024: CALL_OW 275
74028: PUSH
74029: LD_VAR 0 5
74033: PUSH
74034: LD_INT 1
74036: ARRAY
74037: GREATEREQUAL
74038: IFFALSE 74064
74040: PUSH
74041: LD_VAR 0 4
74045: PPUSH
74046: LD_INT 2
74048: PPUSH
74049: CALL_OW 275
74053: PUSH
74054: LD_VAR 0 5
74058: PUSH
74059: LD_INT 2
74061: ARRAY
74062: GREATEREQUAL
74063: AND
74064: IFFALSE 74090
74066: PUSH
74067: LD_VAR 0 4
74071: PPUSH
74072: LD_INT 3
74074: PPUSH
74075: CALL_OW 275
74079: PUSH
74080: LD_VAR 0 5
74084: PUSH
74085: LD_INT 3
74087: ARRAY
74088: GREATEREQUAL
74089: AND
74090: ST_TO_ADDR
// end ;
74091: LD_VAR 0 3
74095: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
74096: LD_INT 0
74098: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
74099: LD_VAR 0 1
74103: PPUSH
74104: LD_VAR 0 2
74108: PPUSH
74109: LD_INT 0
74111: PPUSH
74112: LD_INT 0
74114: PPUSH
74115: LD_INT 1
74117: PPUSH
74118: LD_INT 0
74120: PPUSH
74121: CALL_OW 587
// end ;
74125: LD_VAR 0 3
74129: RET
// export function CenterOnNow ( unit ) ; begin
74130: LD_INT 0
74132: PPUSH
// result := IsInUnit ( unit ) ;
74133: LD_ADDR_VAR 0 2
74137: PUSH
74138: LD_VAR 0 1
74142: PPUSH
74143: CALL_OW 310
74147: ST_TO_ADDR
// if not result then
74148: LD_VAR 0 2
74152: NOT
74153: IFFALSE 74165
// result := unit ;
74155: LD_ADDR_VAR 0 2
74159: PUSH
74160: LD_VAR 0 1
74164: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
74165: LD_VAR 0 1
74169: PPUSH
74170: CALL_OW 87
// end ;
74174: LD_VAR 0 2
74178: RET
// export function ComMoveHex ( unit , hex ) ; begin
74179: LD_INT 0
74181: PPUSH
// if not hex then
74182: LD_VAR 0 2
74186: NOT
74187: IFFALSE 74191
// exit ;
74189: GO 74244
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
74191: LD_VAR 0 2
74195: PUSH
74196: LD_INT 1
74198: ARRAY
74199: PPUSH
74200: LD_VAR 0 2
74204: PUSH
74205: LD_INT 2
74207: ARRAY
74208: PPUSH
74209: CALL_OW 428
74213: IFFALSE 74217
// exit ;
74215: GO 74244
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
74217: LD_VAR 0 1
74221: PPUSH
74222: LD_VAR 0 2
74226: PUSH
74227: LD_INT 1
74229: ARRAY
74230: PPUSH
74231: LD_VAR 0 2
74235: PUSH
74236: LD_INT 2
74238: ARRAY
74239: PPUSH
74240: CALL_OW 111
// end ;
74244: LD_VAR 0 3
74248: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
74249: LD_INT 0
74251: PPUSH
74252: PPUSH
74253: PPUSH
// if not unit or not enemy then
74254: LD_VAR 0 1
74258: NOT
74259: IFTRUE 74268
74261: PUSH
74262: LD_VAR 0 2
74266: NOT
74267: OR
74268: IFFALSE 74272
// exit ;
74270: GO 74398
// x := GetX ( enemy ) ;
74272: LD_ADDR_VAR 0 4
74276: PUSH
74277: LD_VAR 0 2
74281: PPUSH
74282: CALL_OW 250
74286: ST_TO_ADDR
// y := GetY ( enemy ) ;
74287: LD_ADDR_VAR 0 5
74291: PUSH
74292: LD_VAR 0 2
74296: PPUSH
74297: CALL_OW 251
74301: ST_TO_ADDR
// if ValidHex ( x , y ) then
74302: LD_VAR 0 4
74306: PPUSH
74307: LD_VAR 0 5
74311: PPUSH
74312: CALL_OW 488
74316: IFFALSE 74398
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
74318: LD_VAR 0 2
74322: PPUSH
74323: CALL_OW 247
74327: PUSH
74328: LD_INT 3
74330: PUSH
74331: LD_INT 2
74333: PUSH
74334: EMPTY
74335: LIST
74336: LIST
74337: IN
74338: IFTRUE 74361
74340: PUSH
74341: LD_VAR 0 1
74345: PPUSH
74346: CALL_OW 255
74350: PPUSH
74351: LD_VAR 0 2
74355: PPUSH
74356: CALL_OW 292
74360: OR
74361: IFFALSE 74379
// ComAttackUnit ( unit , enemy ) else
74363: LD_VAR 0 1
74367: PPUSH
74368: LD_VAR 0 2
74372: PPUSH
74373: CALL_OW 115
74377: GO 74398
// ComAgressiveMove ( unit , x , y ) ;
74379: LD_VAR 0 1
74383: PPUSH
74384: LD_VAR 0 4
74388: PPUSH
74389: LD_VAR 0 5
74393: PPUSH
74394: CALL_OW 114
// end ;
74398: LD_VAR 0 3
74402: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
74403: LD_INT 0
74405: PPUSH
74406: PPUSH
74407: PPUSH
// list := AreaToList ( area , 0 ) ;
74408: LD_ADDR_VAR 0 5
74412: PUSH
74413: LD_VAR 0 1
74417: PPUSH
74418: LD_INT 0
74420: PPUSH
74421: CALL_OW 517
74425: ST_TO_ADDR
// if not list then
74426: LD_VAR 0 5
74430: NOT
74431: IFFALSE 74435
// exit ;
74433: GO 74565
// if all then
74435: LD_VAR 0 2
74439: IFFALSE 74527
// begin for i := 1 to list [ 1 ] do
74441: LD_ADDR_VAR 0 4
74445: PUSH
74446: DOUBLE
74447: LD_INT 1
74449: DEC
74450: ST_TO_ADDR
74451: LD_VAR 0 5
74455: PUSH
74456: LD_INT 1
74458: ARRAY
74459: PUSH
74460: FOR_TO
74461: IFFALSE 74523
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
74463: LD_ADDR_VAR 0 3
74467: PUSH
74468: LD_VAR 0 3
74472: PPUSH
74473: LD_VAR 0 3
74477: PUSH
74478: LD_INT 1
74480: PLUS
74481: PPUSH
74482: LD_VAR 0 5
74486: PUSH
74487: LD_INT 1
74489: ARRAY
74490: PUSH
74491: LD_VAR 0 4
74495: ARRAY
74496: PUSH
74497: LD_VAR 0 5
74501: PUSH
74502: LD_INT 2
74504: ARRAY
74505: PUSH
74506: LD_VAR 0 4
74510: ARRAY
74511: PUSH
74512: EMPTY
74513: LIST
74514: LIST
74515: PPUSH
74516: CALL_OW 1
74520: ST_TO_ADDR
74521: GO 74460
74523: POP
74524: POP
// exit ;
74525: GO 74565
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
74527: LD_ADDR_VAR 0 3
74531: PUSH
74532: LD_VAR 0 5
74536: PUSH
74537: LD_INT 1
74539: ARRAY
74540: PUSH
74541: LD_INT 1
74543: ARRAY
74544: PUSH
74545: LD_VAR 0 5
74549: PUSH
74550: LD_INT 2
74552: ARRAY
74553: PUSH
74554: LD_INT 1
74556: ARRAY
74557: PUSH
74558: EMPTY
74559: LIST
74560: LIST
74561: PUSH
74562: EMPTY
74563: LIST
74564: ST_TO_ADDR
// end ;
74565: LD_VAR 0 3
74569: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
74570: LD_INT 0
74572: PPUSH
74573: PPUSH
// list := AreaToList ( area , 0 ) ;
74574: LD_ADDR_VAR 0 4
74578: PUSH
74579: LD_VAR 0 1
74583: PPUSH
74584: LD_INT 0
74586: PPUSH
74587: CALL_OW 517
74591: ST_TO_ADDR
// if not list then
74592: LD_VAR 0 4
74596: NOT
74597: IFFALSE 74601
// exit ;
74599: GO 74642
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
74601: LD_ADDR_VAR 0 3
74605: PUSH
74606: LD_VAR 0 4
74610: PUSH
74611: LD_INT 1
74613: ARRAY
74614: PUSH
74615: LD_INT 1
74617: ARRAY
74618: PUSH
74619: LD_VAR 0 4
74623: PUSH
74624: LD_INT 2
74626: ARRAY
74627: PUSH
74628: LD_INT 1
74630: ARRAY
74631: PUSH
74632: LD_VAR 0 2
74636: PUSH
74637: EMPTY
74638: LIST
74639: LIST
74640: LIST
74641: ST_TO_ADDR
// end ;
74642: LD_VAR 0 3
74646: RET
// export function First ( array ) ; begin
74647: LD_INT 0
74649: PPUSH
// if not array then
74650: LD_VAR 0 1
74654: NOT
74655: IFFALSE 74659
// exit ;
74657: GO 74673
// result := array [ 1 ] ;
74659: LD_ADDR_VAR 0 2
74663: PUSH
74664: LD_VAR 0 1
74668: PUSH
74669: LD_INT 1
74671: ARRAY
74672: ST_TO_ADDR
// end ;
74673: LD_VAR 0 2
74677: RET
// export function Last ( array ) ; begin
74678: LD_INT 0
74680: PPUSH
// if not array then
74681: LD_VAR 0 1
74685: NOT
74686: IFFALSE 74690
// exit ;
74688: GO 74706
// result := array [ array ] ;
74690: LD_ADDR_VAR 0 2
74694: PUSH
74695: LD_VAR 0 1
74699: PUSH
74700: LD_VAR 0 1
74704: ARRAY
74705: ST_TO_ADDR
// end ;
74706: LD_VAR 0 2
74710: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
74711: LD_INT 0
74713: PPUSH
74714: PPUSH
// result := [ ] ;
74715: LD_ADDR_VAR 0 5
74719: PUSH
74720: EMPTY
74721: ST_TO_ADDR
// if not array then
74722: LD_VAR 0 1
74726: NOT
74727: IFFALSE 74731
// exit ;
74729: GO 74843
// for i := 1 to array do
74731: LD_ADDR_VAR 0 6
74735: PUSH
74736: DOUBLE
74737: LD_INT 1
74739: DEC
74740: ST_TO_ADDR
74741: LD_VAR 0 1
74745: PUSH
74746: FOR_TO
74747: IFFALSE 74841
// if array [ i ] [ index ] = value then
74749: LD_VAR 0 1
74753: PUSH
74754: LD_VAR 0 6
74758: ARRAY
74759: PUSH
74760: LD_VAR 0 2
74764: ARRAY
74765: PUSH
74766: LD_VAR 0 3
74770: EQUAL
74771: IFFALSE 74839
// begin if indexColumn then
74773: LD_VAR 0 4
74777: IFFALSE 74813
// result := Join ( result , array [ i ] [ indexColumn ] ) else
74779: LD_ADDR_VAR 0 5
74783: PUSH
74784: LD_VAR 0 5
74788: PPUSH
74789: LD_VAR 0 1
74793: PUSH
74794: LD_VAR 0 6
74798: ARRAY
74799: PUSH
74800: LD_VAR 0 4
74804: ARRAY
74805: PPUSH
74806: CALL 69851 0 2
74810: ST_TO_ADDR
74811: GO 74839
// result := Join ( result , array [ i ] ) ;
74813: LD_ADDR_VAR 0 5
74817: PUSH
74818: LD_VAR 0 5
74822: PPUSH
74823: LD_VAR 0 1
74827: PUSH
74828: LD_VAR 0 6
74832: ARRAY
74833: PPUSH
74834: CALL 69851 0 2
74838: ST_TO_ADDR
// end ;
74839: GO 74746
74841: POP
74842: POP
// end ;
74843: LD_VAR 0 5
74847: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
74848: LD_INT 0
74850: PPUSH
// if not vehicles or not parkingPoint then
74851: LD_VAR 0 1
74855: NOT
74856: IFTRUE 74865
74858: PUSH
74859: LD_VAR 0 2
74863: NOT
74864: OR
74865: IFFALSE 74869
// exit ;
74867: GO 74967
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
74869: LD_ADDR_VAR 0 1
74873: PUSH
74874: LD_VAR 0 1
74878: PPUSH
74879: LD_INT 50
74881: PUSH
74882: EMPTY
74883: LIST
74884: PUSH
74885: LD_INT 3
74887: PUSH
74888: LD_INT 92
74890: PUSH
74891: LD_VAR 0 2
74895: PUSH
74896: LD_INT 1
74898: ARRAY
74899: PUSH
74900: LD_VAR 0 2
74904: PUSH
74905: LD_INT 2
74907: ARRAY
74908: PUSH
74909: LD_INT 8
74911: PUSH
74912: EMPTY
74913: LIST
74914: LIST
74915: LIST
74916: LIST
74917: PUSH
74918: EMPTY
74919: LIST
74920: LIST
74921: PUSH
74922: EMPTY
74923: LIST
74924: LIST
74925: PPUSH
74926: CALL_OW 72
74930: ST_TO_ADDR
// if not vehicles then
74931: LD_VAR 0 1
74935: NOT
74936: IFFALSE 74940
// exit ;
74938: GO 74967
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
74940: LD_VAR 0 1
74944: PPUSH
74945: LD_VAR 0 2
74949: PUSH
74950: LD_INT 1
74952: ARRAY
74953: PPUSH
74954: LD_VAR 0 2
74958: PUSH
74959: LD_INT 2
74961: ARRAY
74962: PPUSH
74963: CALL_OW 111
// end ;
74967: LD_VAR 0 3
74971: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
74972: LD_INT 0
74974: PPUSH
74975: PPUSH
74976: PPUSH
// if not side or not area then
74977: LD_VAR 0 1
74981: NOT
74982: IFTRUE 74991
74984: PUSH
74985: LD_VAR 0 2
74989: NOT
74990: OR
74991: IFFALSE 74995
// exit ;
74993: GO 75114
// tmp := AreaToList ( area , 0 ) ;
74995: LD_ADDR_VAR 0 5
74999: PUSH
75000: LD_VAR 0 2
75004: PPUSH
75005: LD_INT 0
75007: PPUSH
75008: CALL_OW 517
75012: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
75013: LD_ADDR_VAR 0 4
75017: PUSH
75018: DOUBLE
75019: LD_INT 1
75021: DEC
75022: ST_TO_ADDR
75023: LD_VAR 0 5
75027: PUSH
75028: LD_INT 1
75030: ARRAY
75031: PUSH
75032: FOR_TO
75033: IFFALSE 75112
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
75035: LD_VAR 0 5
75039: PUSH
75040: LD_INT 1
75042: ARRAY
75043: PUSH
75044: LD_VAR 0 4
75048: ARRAY
75049: PPUSH
75050: LD_VAR 0 5
75054: PUSH
75055: LD_INT 2
75057: ARRAY
75058: PUSH
75059: LD_VAR 0 4
75063: ARRAY
75064: PPUSH
75065: CALL_OW 351
75069: IFFALSE 75110
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
75071: LD_VAR 0 5
75075: PUSH
75076: LD_INT 1
75078: ARRAY
75079: PUSH
75080: LD_VAR 0 4
75084: ARRAY
75085: PPUSH
75086: LD_VAR 0 5
75090: PUSH
75091: LD_INT 2
75093: ARRAY
75094: PUSH
75095: LD_VAR 0 4
75099: ARRAY
75100: PPUSH
75101: LD_VAR 0 1
75105: PPUSH
75106: CALL_OW 244
// end ;
75110: GO 75032
75112: POP
75113: POP
// end ;
75114: LD_VAR 0 3
75118: RET
// export function UniqueArray ( array ) ; var i ; begin
75119: LD_INT 0
75121: PPUSH
75122: PPUSH
// result := [ ] ;
75123: LD_ADDR_VAR 0 2
75127: PUSH
75128: EMPTY
75129: ST_TO_ADDR
// if not array then
75130: LD_VAR 0 1
75134: NOT
75135: IFFALSE 75139
// exit ;
75137: GO 75200
// for i := 1 to array do
75139: LD_ADDR_VAR 0 3
75143: PUSH
75144: DOUBLE
75145: LD_INT 1
75147: DEC
75148: ST_TO_ADDR
75149: LD_VAR 0 1
75153: PUSH
75154: FOR_TO
75155: IFFALSE 75198
// if not array [ i ] in result then
75157: LD_VAR 0 1
75161: PUSH
75162: LD_VAR 0 3
75166: ARRAY
75167: PUSH
75168: LD_VAR 0 2
75172: IN
75173: NOT
75174: IFFALSE 75196
// result := Join ( result , i ) ;
75176: LD_ADDR_VAR 0 2
75180: PUSH
75181: LD_VAR 0 2
75185: PPUSH
75186: LD_VAR 0 3
75190: PPUSH
75191: CALL 69851 0 2
75195: ST_TO_ADDR
75196: GO 75154
75198: POP
75199: POP
// end ; end_of_file
75200: LD_VAR 0 2
75204: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
75205: LD_VAR 0 1
75209: PUSH
75210: LD_INT 200
75212: DOUBLE
75213: GREATEREQUAL
75214: IFFALSE 75222
75216: LD_INT 299
75218: DOUBLE
75219: LESSEQUAL
75220: IFTRUE 75224
75222: GO 75256
75224: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
75225: LD_VAR 0 1
75229: PPUSH
75230: LD_VAR 0 2
75234: PPUSH
75235: LD_VAR 0 3
75239: PPUSH
75240: LD_VAR 0 4
75244: PPUSH
75245: LD_VAR 0 5
75249: PPUSH
75250: CALL 25927 0 5
75254: GO 75333
75256: LD_INT 300
75258: DOUBLE
75259: GREATEREQUAL
75260: IFFALSE 75268
75262: LD_INT 399
75264: DOUBLE
75265: LESSEQUAL
75266: IFTRUE 75270
75268: GO 75332
75270: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
75271: LD_VAR 0 1
75275: PPUSH
75276: LD_VAR 0 2
75280: PPUSH
75281: LD_VAR 0 3
75285: PPUSH
75286: LD_VAR 0 4
75290: PPUSH
75291: LD_VAR 0 5
75295: PPUSH
75296: LD_VAR 0 6
75300: PPUSH
75301: LD_VAR 0 7
75305: PPUSH
75306: LD_VAR 0 8
75310: PPUSH
75311: LD_VAR 0 9
75315: PPUSH
75316: LD_VAR 0 10
75320: PPUSH
75321: LD_VAR 0 11
75325: PPUSH
75326: CALL 21730 0 11
75330: GO 75333
75332: POP
// end ;
75333: PPOPN 11
75335: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
75336: LD_VAR 0 1
75340: PPUSH
75341: LD_VAR 0 2
75345: PPUSH
75346: LD_VAR 0 3
75350: PPUSH
75351: LD_VAR 0 4
75355: PPUSH
75356: LD_VAR 0 5
75360: PPUSH
75361: CALL 25227 0 5
// end ; end_of_file
75365: PPOPN 5
75367: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
75368: LD_VAR 0 1
75372: PPUSH
75373: LD_VAR 0 2
75377: PPUSH
75378: LD_VAR 0 3
75382: PPUSH
75383: LD_VAR 0 4
75387: PPUSH
75388: LD_VAR 0 5
75392: PPUSH
75393: LD_VAR 0 6
75397: PPUSH
75398: CALL 9270 0 6
// end ;
75402: PPOPN 6
75404: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
75405: LD_INT 0
75407: PPUSH
// begin if not units then
75408: LD_VAR 0 1
75412: NOT
75413: IFFALSE 75417
// exit ;
75415: GO 75451
// SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ;
75417: LD_VAR 0 1
75421: PPUSH
75422: LD_VAR 0 2
75426: PPUSH
75427: LD_VAR 0 3
75431: PPUSH
75432: LD_VAR 0 4
75436: PPUSH
75437: LD_VAR 0 5
75441: PPUSH
75442: LD_VAR 0 6
75446: PPUSH
75447: CALL 31624 0 6
// end ;
75451: PPOPN 7
75453: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
75454: CALL 9150 0 0
// end ;
75458: PPOPN 1
75460: END
