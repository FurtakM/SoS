// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RandomizeAll ;
  11: CALL_OW 11
// Init ;
  15: CALL 83 0 0
// InitRestrictions ;
  19: CALL 211 0 0
// if debug then
  23: LD_EXP 1
  27: IFFALSE 33
// DebugMode ;
  29: CALL 292 0 0
// SpawnApeman ( apemanStartArea , 2 ) ;
  33: LD_INT 12
  35: PPUSH
  36: LD_INT 2
  38: PPUSH
  39: CALL 599 0 2
// SpawnApeman ( apemanArea , [ 10 , 8 , 7 , 6 ] [ Difficulty ] ) ;
  43: LD_INT 11
  45: PPUSH
  46: LD_INT 10
  48: PUSH
  49: LD_INT 8
  51: PUSH
  52: LD_INT 7
  54: PUSH
  55: LD_INT 6
  57: PUSH
  58: EMPTY
  59: LIST
  60: LIST
  61: LIST
  62: LIST
  63: PUSH
  64: LD_OWVAR 67
  68: ARRAY
  69: PPUSH
  70: CALL 599 0 2
// PrepareAmericans ;
  74: CALL 1198 0 0
// Action ;
  78: CALL 2134 0 0
// end ;
  82: END
// export debug ; export mission_prefix , mission_prefix_prev ; export deltaBuilded , denisArrives , Delta , radar_allowed , first_apeman_tamed , apeman_army , radar_researched , radar_builded ; export apeman_counter , arab_spotted , end_mission , apeKillCounter ; function Init ; begin
  83: LD_INT 0
  85: PPUSH
// debug := false ;
  86: LD_ADDR_EXP 1
  90: PUSH
  91: LD_INT 0
  93: ST_TO_ADDR
// mission_prefix := 05_ ;
  94: LD_ADDR_EXP 2
  98: PUSH
  99: LD_STRING 05_
 101: ST_TO_ADDR
// mission_prefix_prev := 05a_ ;
 102: LD_ADDR_EXP 3
 106: PUSH
 107: LD_STRING 05a_
 109: ST_TO_ADDR
// deltaBuilded := false ;
 110: LD_ADDR_EXP 4
 114: PUSH
 115: LD_INT 0
 117: ST_TO_ADDR
// denisArrives := false ;
 118: LD_ADDR_EXP 5
 122: PUSH
 123: LD_INT 0
 125: ST_TO_ADDR
// radar_allowed := false ;
 126: LD_ADDR_EXP 7
 130: PUSH
 131: LD_INT 0
 133: ST_TO_ADDR
// first_apeman_tamed := false ;
 134: LD_ADDR_EXP 8
 138: PUSH
 139: LD_INT 0
 141: ST_TO_ADDR
// arab_spotted := false ;
 142: LD_ADDR_EXP 13
 146: PUSH
 147: LD_INT 0
 149: ST_TO_ADDR
// end_mission := false ;
 150: LD_ADDR_EXP 14
 154: PUSH
 155: LD_INT 0
 157: ST_TO_ADDR
// apeman_army := false ;
 158: LD_ADDR_EXP 9
 162: PUSH
 163: LD_INT 0
 165: ST_TO_ADDR
// radar_researched := false ;
 166: LD_ADDR_EXP 10
 170: PUSH
 171: LD_INT 0
 173: ST_TO_ADDR
// radar_builded := false ;
 174: LD_ADDR_EXP 11
 178: PUSH
 179: LD_INT 0
 181: ST_TO_ADDR
// apeman_counter := 0 ;
 182: LD_ADDR_EXP 12
 186: PUSH
 187: LD_INT 0
 189: ST_TO_ADDR
// Delta := 0 ;
 190: LD_ADDR_EXP 6
 194: PUSH
 195: LD_INT 0
 197: ST_TO_ADDR
// apeKillCounter := 0 ;
 198: LD_ADDR_EXP 15
 202: PUSH
 203: LD_INT 0
 205: ST_TO_ADDR
// end ;
 206: LD_VAR 0 1
 210: RET
// function InitRestrictions ; begin
 211: LD_INT 0
 213: PPUSH
// SetRestrict ( b_lab_half , 1 , state_enabled ) ;
 214: LD_INT 7
 216: PPUSH
 217: LD_INT 1
 219: PPUSH
 220: LD_INT 1
 222: PPUSH
 223: CALL_OW 324
// SetRestrict ( b_lab_full , 1 , state_enabled ) ;
 227: LD_INT 8
 229: PPUSH
 230: LD_INT 1
 232: PPUSH
 233: LD_INT 1
 235: PPUSH
 236: CALL_OW 324
// SetRestrict ( b_lab_weapon , 1 , state_enabled ) ;
 240: LD_INT 10
 242: PPUSH
 243: LD_INT 1
 245: PPUSH
 246: LD_INT 1
 248: PPUSH
 249: CALL_OW 324
// SetTech ( tech_gatling , 1 , LoadVariable ( GatlingInGamma , 1 ) ) ;
 253: LD_INT 69
 255: PPUSH
 256: LD_INT 1
 258: PPUSH
 259: LD_STRING GatlingInGamma
 261: PPUSH
 262: LD_INT 1
 264: PPUSH
 265: CALL_OW 30
 269: PPUSH
 270: CALL_OW 322
// SetTech ( tech_weap1 , 1 , state_enabled ) ;
 274: LD_INT 51
 276: PPUSH
 277: LD_INT 1
 279: PPUSH
 280: LD_INT 1
 282: PPUSH
 283: CALL_OW 322
// end ;
 287: LD_VAR 0 1
 291: RET
// function DebugMode ; begin
 292: LD_INT 0
 294: PPUSH
// FogOff ( 1 ) ;
 295: LD_INT 1
 297: PPUSH
 298: CALL_OW 344
// Difficulty := 2 ;
 302: LD_ADDR_OWVAR 67
 306: PUSH
 307: LD_INT 2
 309: ST_TO_ADDR
// end ;
 310: LD_VAR 0 1
 314: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 0 ] ] ) >= 7 do
 315: LD_INT 22
 317: PUSH
 318: LD_INT 1
 320: PUSH
 321: EMPTY
 322: LIST
 323: LIST
 324: PUSH
 325: LD_INT 23
 327: PUSH
 328: LD_INT 0
 330: PUSH
 331: EMPTY
 332: LIST
 333: LIST
 334: PUSH
 335: EMPTY
 336: LIST
 337: LIST
 338: PPUSH
 339: CALL_OW 69
 343: PUSH
 344: LD_INT 7
 346: GREATEREQUAL
 347: IFFALSE 359
 349: GO 351
 351: DISABLE
// SetAchievement ( ACH_TAME ) ;
 352: LD_STRING ACH_TAME
 354: PPUSH
 355: CALL_OW 543
 359: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_bweapon , us_radar ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_radar ] ] ) do
 360: LD_INT 22
 362: PUSH
 363: LD_INT 1
 365: PUSH
 366: EMPTY
 367: LIST
 368: LIST
 369: PUSH
 370: LD_INT 35
 372: PUSH
 373: LD_INT 11
 375: PUSH
 376: EMPTY
 377: LIST
 378: LIST
 379: PUSH
 380: EMPTY
 381: LIST
 382: LIST
 383: PPUSH
 384: CALL_OW 69
 388: PUSH
 389: LD_INT 22
 391: PUSH
 392: LD_INT 1
 394: PUSH
 395: EMPTY
 396: LIST
 397: LIST
 398: PUSH
 399: LD_INT 34
 401: PUSH
 402: LD_INT 11
 404: PUSH
 405: EMPTY
 406: LIST
 407: LIST
 408: PUSH
 409: EMPTY
 410: LIST
 411: LIST
 412: PPUSH
 413: CALL_OW 69
 417: AND
 418: IFFALSE 430
 420: GO 422
 422: DISABLE
// SetAchievement ( ACH_RADAR ) ; end_of_file
 423: LD_STRING ACH_RADAR
 425: PPUSH
 426: CALL_OW 543
 430: END
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 431: LD_INT 0
 433: PPUSH
// uc_side := side ;
 434: LD_ADDR_OWVAR 20
 438: PUSH
 439: LD_VAR 0 1
 443: ST_TO_ADDR
// uc_nation := nation ;
 444: LD_ADDR_OWVAR 21
 448: PUSH
 449: LD_VAR 0 2
 453: ST_TO_ADDR
// vc_chassis := chassis ;
 454: LD_ADDR_OWVAR 37
 458: PUSH
 459: LD_VAR 0 3
 463: ST_TO_ADDR
// vc_engine := engine ;
 464: LD_ADDR_OWVAR 39
 468: PUSH
 469: LD_VAR 0 4
 473: ST_TO_ADDR
// vc_control := control ;
 474: LD_ADDR_OWVAR 38
 478: PUSH
 479: LD_VAR 0 5
 483: ST_TO_ADDR
// vc_weapon := weapon ;
 484: LD_ADDR_OWVAR 40
 488: PUSH
 489: LD_VAR 0 6
 493: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 494: LD_ADDR_OWVAR 41
 498: PUSH
 499: LD_VAR 0 7
 503: ST_TO_ADDR
// result := CreateVehicle ;
 504: LD_ADDR_VAR 0 8
 508: PUSH
 509: CALL_OW 45
 513: ST_TO_ADDR
// end ;
 514: LD_VAR 0 8
 518: RET
// export function SayX ( units , ident ) ; var i ; begin
 519: LD_INT 0
 521: PPUSH
 522: PPUSH
// result := false ;
 523: LD_ADDR_VAR 0 3
 527: PUSH
 528: LD_INT 0
 530: ST_TO_ADDR
// if not units then
 531: LD_VAR 0 1
 535: NOT
 536: IFFALSE 540
// exit ;
 538: GO 594
// for i in units do
 540: LD_ADDR_VAR 0 4
 544: PUSH
 545: LD_VAR 0 1
 549: PUSH
 550: FOR_IN
 551: IFFALSE 592
// if IsOk ( i ) then
 553: LD_VAR 0 4
 557: PPUSH
 558: CALL_OW 302
 562: IFFALSE 590
// begin Say ( i , ident ) ;
 564: LD_VAR 0 4
 568: PPUSH
 569: LD_VAR 0 2
 573: PPUSH
 574: CALL_OW 88
// result := i ;
 578: LD_ADDR_VAR 0 3
 582: PUSH
 583: LD_VAR 0 4
 587: ST_TO_ADDR
// break ;
 588: GO 592
// end ;
 590: GO 550
 592: POP
 593: POP
// end ;
 594: LD_VAR 0 3
 598: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 599: LD_INT 0
 601: PPUSH
 602: PPUSH
// InitUc ;
 603: CALL_OW 18
// InitHc ;
 607: CALL_OW 19
// uc_side := 0 ;
 611: LD_ADDR_OWVAR 20
 615: PUSH
 616: LD_INT 0
 618: ST_TO_ADDR
// uc_nation := 0 ;
 619: LD_ADDR_OWVAR 21
 623: PUSH
 624: LD_INT 0
 626: ST_TO_ADDR
// for i = 1 to amount do
 627: LD_ADDR_VAR 0 4
 631: PUSH
 632: DOUBLE
 633: LD_INT 1
 635: DEC
 636: ST_TO_ADDR
 637: LD_VAR 0 2
 641: PUSH
 642: FOR_TO
 643: IFFALSE 725
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 645: LD_ADDR_OWVAR 29
 649: PUSH
 650: LD_INT 9
 652: PPUSH
 653: LD_INT 12
 655: PPUSH
 656: CALL_OW 12
 660: PUSH
 661: LD_INT 9
 663: PPUSH
 664: LD_INT 12
 666: PPUSH
 667: CALL_OW 12
 671: PUSH
 672: EMPTY
 673: LIST
 674: LIST
 675: ST_TO_ADDR
// hc_agressivity := rand ( - 5 , 5 ) ;
 676: LD_ADDR_OWVAR 35
 680: PUSH
 681: LD_INT 5
 683: NEG
 684: PPUSH
 685: LD_INT 5
 687: PPUSH
 688: CALL_OW 12
 692: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 693: LD_INT 0
 695: PPUSH
 696: LD_INT 12
 698: PPUSH
 699: LD_INT 1
 701: PPUSH
 702: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 706: CALL_OW 44
 710: PPUSH
 711: LD_VAR 0 1
 715: PPUSH
 716: LD_INT 0
 718: PPUSH
 719: CALL_OW 49
// end ;
 723: GO 642
 725: POP
 726: POP
// InitHc ;
 727: CALL_OW 19
// end ;
 731: LD_VAR 0 3
 735: RET
// export function Attack ( unit , enemy_list ) ; var target , targets_list ; begin
 736: LD_INT 0
 738: PPUSH
 739: PPUSH
 740: PPUSH
// if not unit then
 741: LD_VAR 0 1
 745: NOT
 746: IFFALSE 750
// exit ;
 748: GO 1193
// if IsInUnit ( unit ) then
 750: LD_VAR 0 1
 754: PPUSH
 755: CALL_OW 310
 759: IFFALSE 776
// unit := IsDrivenBy ( unit ) ;
 761: LD_ADDR_VAR 0 1
 765: PUSH
 766: LD_VAR 0 1
 770: PPUSH
 771: CALL_OW 311
 775: ST_TO_ADDR
// targets_list := [ ] ;
 776: LD_ADDR_VAR 0 5
 780: PUSH
 781: EMPTY
 782: ST_TO_ADDR
// target := UnitFilter ( enemy_list , [ [ f_lives , 250 ] , [ f_not , [ f_weapon , us_cargo_bay ] ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 783: LD_ADDR_VAR 0 4
 787: PUSH
 788: LD_VAR 0 2
 792: PPUSH
 793: LD_INT 24
 795: PUSH
 796: LD_INT 250
 798: PUSH
 799: EMPTY
 800: LIST
 801: LIST
 802: PUSH
 803: LD_INT 3
 805: PUSH
 806: LD_INT 34
 808: PUSH
 809: LD_INT 12
 811: PUSH
 812: EMPTY
 813: LIST
 814: LIST
 815: PUSH
 816: EMPTY
 817: LIST
 818: LIST
 819: PUSH
 820: LD_INT 21
 822: PUSH
 823: LD_INT 2
 825: PUSH
 826: EMPTY
 827: LIST
 828: LIST
 829: PUSH
 830: LD_INT 58
 832: PUSH
 833: EMPTY
 834: LIST
 835: PUSH
 836: EMPTY
 837: LIST
 838: LIST
 839: LIST
 840: LIST
 841: PPUSH
 842: CALL_OW 72
 846: ST_TO_ADDR
// if GetDistUnits ( NearestUnitToUnit ( target , unit ) , unit ) < 11 and not IsInUnit ( unit ) then
 847: LD_VAR 0 4
 851: PPUSH
 852: LD_VAR 0 1
 856: PPUSH
 857: CALL_OW 74
 861: PPUSH
 862: LD_VAR 0 1
 866: PPUSH
 867: CALL_OW 296
 871: PUSH
 872: LD_INT 11
 874: LESS
 875: PUSH
 876: LD_VAR 0 1
 880: PPUSH
 881: CALL_OW 310
 885: NOT
 886: AND
 887: IFFALSE 915
// begin ComEnterUnit ( unit , NearestUnitToUnit ( target , unit ) ) ;
 889: LD_VAR 0 1
 893: PPUSH
 894: LD_VAR 0 4
 898: PPUSH
 899: LD_VAR 0 1
 903: PPUSH
 904: CALL_OW 74
 908: PPUSH
 909: CALL_OW 120
// exit ;
 913: GO 1193
// end ; targets_list := [ UnitFilter ( enemy_list , [ [ f_type , unit_human ] , [ f_not , [ f_inside ] ] ] ) , UnitFilter ( enemy_list , [ f_type , unit_vehicle ] ) , UnitFilter ( enemy_list , [ [ f_type , unit_building ] , [ f_not , [ f_empty ] ] ] ) , enemy_list ] ;
 915: LD_ADDR_VAR 0 5
 919: PUSH
 920: LD_VAR 0 2
 924: PPUSH
 925: LD_INT 21
 927: PUSH
 928: LD_INT 1
 930: PUSH
 931: EMPTY
 932: LIST
 933: LIST
 934: PUSH
 935: LD_INT 3
 937: PUSH
 938: LD_INT 54
 940: PUSH
 941: EMPTY
 942: LIST
 943: PUSH
 944: EMPTY
 945: LIST
 946: LIST
 947: PUSH
 948: EMPTY
 949: LIST
 950: LIST
 951: PPUSH
 952: CALL_OW 72
 956: PUSH
 957: LD_VAR 0 2
 961: PPUSH
 962: LD_INT 21
 964: PUSH
 965: LD_INT 2
 967: PUSH
 968: EMPTY
 969: LIST
 970: LIST
 971: PPUSH
 972: CALL_OW 72
 976: PUSH
 977: LD_VAR 0 2
 981: PPUSH
 982: LD_INT 21
 984: PUSH
 985: LD_INT 3
 987: PUSH
 988: EMPTY
 989: LIST
 990: LIST
 991: PUSH
 992: LD_INT 3
 994: PUSH
 995: LD_INT 58
 997: PUSH
 998: EMPTY
 999: LIST
1000: PUSH
1001: EMPTY
1002: LIST
1003: LIST
1004: PUSH
1005: EMPTY
1006: LIST
1007: LIST
1008: PPUSH
1009: CALL_OW 72
1013: PUSH
1014: LD_VAR 0 2
1018: PUSH
1019: EMPTY
1020: LIST
1021: LIST
1022: LIST
1023: LIST
1024: ST_TO_ADDR
// for target in targets_list do
1025: LD_ADDR_VAR 0 4
1029: PUSH
1030: LD_VAR 0 5
1034: PUSH
1035: FOR_IN
1036: IFFALSE 1191
// begin if target then
1038: LD_VAR 0 4
1042: IFFALSE 1189
// if GetTag ( unit ) = 11 and ( GetType ( NearestUnitToUnit ( target , unit ) ) = unit_building or GetWeapon ( NearestUnitToUnit ( target , unit ) ) = us_cargo_bay ) then
1044: LD_VAR 0 1
1048: PPUSH
1049: CALL_OW 110
1053: PUSH
1054: LD_INT 11
1056: EQUAL
1057: PUSH
1058: LD_VAR 0 4
1062: PPUSH
1063: LD_VAR 0 1
1067: PPUSH
1068: CALL_OW 74
1072: PPUSH
1073: CALL_OW 247
1077: PUSH
1078: LD_INT 3
1080: EQUAL
1081: PUSH
1082: LD_VAR 0 4
1086: PPUSH
1087: LD_VAR 0 1
1091: PPUSH
1092: CALL_OW 74
1096: PPUSH
1097: CALL_OW 264
1101: PUSH
1102: LD_INT 12
1104: EQUAL
1105: OR
1106: AND
1107: IFFALSE 1153
// begin ComPlaceDelayedCharge ( unit , 0 , 0 , NearestUnitToUnit ( target , unit ) ) ;
1109: LD_VAR 0 1
1113: PPUSH
1114: LD_INT 0
1116: PPUSH
1117: LD_INT 0
1119: PPUSH
1120: LD_VAR 0 4
1124: PPUSH
1125: LD_VAR 0 1
1129: PPUSH
1130: CALL_OW 74
1134: PPUSH
1135: CALL_OW 132
// SetTag ( unit , 0 ) ;
1139: LD_VAR 0 1
1143: PPUSH
1144: LD_INT 0
1146: PPUSH
1147: CALL_OW 109
// end else
1151: GO 1189
// if not HasTask ( unit ) then
1153: LD_VAR 0 1
1157: PPUSH
1158: CALL_OW 314
1162: NOT
1163: IFFALSE 1189
// ComAttackUnit ( unit , NearestUnitToUnit ( target , unit ) ) ;
1165: LD_VAR 0 1
1169: PPUSH
1170: LD_VAR 0 4
1174: PPUSH
1175: LD_VAR 0 1
1179: PPUSH
1180: CALL_OW 74
1184: PPUSH
1185: CALL_OW 115
// end ;
1189: GO 1035
1191: POP
1192: POP
// end ; end_of_file
1193: LD_VAR 0 3
1197: RET
// export JMM , Gladstone , Harrison , Denis , Brown , Donaldson , Lisa , Frank , Bobby , Cyrus ; export others ; export function PrepareAmericans ; var i , points , veh , tmp ; begin
1198: LD_INT 0
1200: PPUSH
1201: PPUSH
1202: PPUSH
1203: PPUSH
1204: PPUSH
// uc_nation := 1 ;
1205: LD_ADDR_OWVAR 21
1209: PUSH
1210: LD_INT 1
1212: ST_TO_ADDR
// uc_side := 4 ;
1213: LD_ADDR_OWVAR 20
1217: PUSH
1218: LD_INT 4
1220: ST_TO_ADDR
// Denis := PrepareUnit ( Denis , false ,  ) ;
1221: LD_ADDR_EXP 19
1225: PUSH
1226: LD_STRING Denis
1228: PPUSH
1229: LD_INT 0
1231: PPUSH
1232: LD_STRING 
1234: PPUSH
1235: CALL 27055 0 3
1239: ST_TO_ADDR
// Harrison := PrepareUnit ( Harisson , false ,  ) ;
1240: LD_ADDR_EXP 18
1244: PUSH
1245: LD_STRING Harisson
1247: PPUSH
1248: LD_INT 0
1250: PPUSH
1251: LD_STRING 
1253: PPUSH
1254: CALL 27055 0 3
1258: ST_TO_ADDR
// uc_side := 1 ;
1259: LD_ADDR_OWVAR 20
1263: PUSH
1264: LD_INT 1
1266: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debug ) , mission_prefix_prev ) ;
1267: LD_ADDR_EXP 16
1271: PUSH
1272: LD_STRING JMM
1274: PPUSH
1275: LD_EXP 1
1279: NOT
1280: PPUSH
1281: LD_EXP 3
1285: PPUSH
1286: CALL 27055 0 3
1290: ST_TO_ADDR
// Gladstone := PrepareUnit ( Gladstone , false , mission_prefix_prev ) ;
1291: LD_ADDR_EXP 17
1295: PUSH
1296: LD_STRING Gladstone
1298: PPUSH
1299: LD_INT 0
1301: PPUSH
1302: LD_EXP 3
1306: PPUSH
1307: CALL 27055 0 3
1311: ST_TO_ADDR
// if LoadVariable ( BrownInDelta , debug ) then
1312: LD_STRING BrownInDelta
1314: PPUSH
1315: LD_EXP 1
1319: PPUSH
1320: CALL_OW 30
1324: IFFALSE 1366
// begin Brown := PrepareUnit ( Brown , ( not debug ) , mission_prefix_prev ) ;
1326: LD_ADDR_EXP 20
1330: PUSH
1331: LD_STRING Brown
1333: PPUSH
1334: LD_EXP 1
1338: NOT
1339: PPUSH
1340: LD_EXP 3
1344: PPUSH
1345: CALL 27055 0 3
1349: ST_TO_ADDR
// tmp := tmp ^ Brown ;
1350: LD_ADDR_VAR 0 5
1354: PUSH
1355: LD_VAR 0 5
1359: PUSH
1360: LD_EXP 20
1364: ADD
1365: ST_TO_ADDR
// end ; if LoadVariable ( DonaldsonInDelta , debug ) then
1366: LD_STRING DonaldsonInDelta
1368: PPUSH
1369: LD_EXP 1
1373: PPUSH
1374: CALL_OW 30
1378: IFFALSE 1420
// begin Donaldson := PrepareUnit ( Donaldson , ( not debug ) , mission_prefix_prev ) ;
1380: LD_ADDR_EXP 21
1384: PUSH
1385: LD_STRING Donaldson
1387: PPUSH
1388: LD_EXP 1
1392: NOT
1393: PPUSH
1394: LD_EXP 3
1398: PPUSH
1399: CALL 27055 0 3
1403: ST_TO_ADDR
// tmp := tmp ^ Donaldson ;
1404: LD_ADDR_VAR 0 5
1408: PUSH
1409: LD_VAR 0 5
1413: PUSH
1414: LD_EXP 21
1418: ADD
1419: ST_TO_ADDR
// end ; if LoadVariable ( LisaInDelta , debug ) then
1420: LD_STRING LisaInDelta
1422: PPUSH
1423: LD_EXP 1
1427: PPUSH
1428: CALL_OW 30
1432: IFFALSE 1474
// begin Lisa := PrepareUnit ( Lisa , ( not debug ) , mission_prefix_prev ) ;
1434: LD_ADDR_EXP 22
1438: PUSH
1439: LD_STRING Lisa
1441: PPUSH
1442: LD_EXP 1
1446: NOT
1447: PPUSH
1448: LD_EXP 3
1452: PPUSH
1453: CALL 27055 0 3
1457: ST_TO_ADDR
// tmp := tmp ^ Lisa ;
1458: LD_ADDR_VAR 0 5
1462: PUSH
1463: LD_VAR 0 5
1467: PUSH
1468: LD_EXP 22
1472: ADD
1473: ST_TO_ADDR
// end ; if LoadVariable ( FrankInDelta , debug ) then
1474: LD_STRING FrankInDelta
1476: PPUSH
1477: LD_EXP 1
1481: PPUSH
1482: CALL_OW 30
1486: IFFALSE 1528
// begin Frank := PrepareUnit ( Frank , ( not debug ) , mission_prefix_prev ) ;
1488: LD_ADDR_EXP 23
1492: PUSH
1493: LD_STRING Frank
1495: PPUSH
1496: LD_EXP 1
1500: NOT
1501: PPUSH
1502: LD_EXP 3
1506: PPUSH
1507: CALL 27055 0 3
1511: ST_TO_ADDR
// tmp := tmp ^ Frank ;
1512: LD_ADDR_VAR 0 5
1516: PUSH
1517: LD_VAR 0 5
1521: PUSH
1522: LD_EXP 23
1526: ADD
1527: ST_TO_ADDR
// end ; if LoadVariable ( BobbyInDelta , 0 ) then
1528: LD_STRING BobbyInDelta
1530: PPUSH
1531: LD_INT 0
1533: PPUSH
1534: CALL_OW 30
1538: IFFALSE 1580
// begin Bobby := PrepareUnit ( Bobby , ( not debug ) , mission_prefix_prev ) ;
1540: LD_ADDR_EXP 24
1544: PUSH
1545: LD_STRING Bobby
1547: PPUSH
1548: LD_EXP 1
1552: NOT
1553: PPUSH
1554: LD_EXP 3
1558: PPUSH
1559: CALL 27055 0 3
1563: ST_TO_ADDR
// tmp := tmp ^ Bobby ;
1564: LD_ADDR_VAR 0 5
1568: PUSH
1569: LD_VAR 0 5
1573: PUSH
1574: LD_EXP 24
1578: ADD
1579: ST_TO_ADDR
// end ; if LoadVariable ( CyrusInDelta , 0 ) then
1580: LD_STRING CyrusInDelta
1582: PPUSH
1583: LD_INT 0
1585: PPUSH
1586: CALL_OW 30
1590: IFFALSE 1632
// begin Cyrus := PrepareUnit ( Cyrus , ( not debug ) , mission_prefix_prev ) ;
1592: LD_ADDR_EXP 25
1596: PUSH
1597: LD_STRING Cyrus
1599: PPUSH
1600: LD_EXP 1
1604: NOT
1605: PPUSH
1606: LD_EXP 3
1610: PPUSH
1611: CALL 27055 0 3
1615: ST_TO_ADDR
// tmp := tmp ^ Cyrus ;
1616: LD_ADDR_VAR 0 5
1620: PUSH
1621: LD_VAR 0 5
1625: PUSH
1626: LD_EXP 25
1630: ADD
1631: ST_TO_ADDR
// end ; others := CreateCharacterSet ( othersDelta ) ;
1632: LD_ADDR_EXP 26
1636: PUSH
1637: LD_STRING othersDelta
1639: PPUSH
1640: CALL_OW 31
1644: ST_TO_ADDR
// if not others and debug then
1645: LD_EXP 26
1649: NOT
1650: PUSH
1651: LD_EXP 1
1655: AND
1656: IFFALSE 1721
// begin InitHc ;
1658: CALL_OW 19
// for i = 1 to 2 do
1662: LD_ADDR_VAR 0 2
1666: PUSH
1667: DOUBLE
1668: LD_INT 1
1670: DEC
1671: ST_TO_ADDR
1672: LD_INT 2
1674: PUSH
1675: FOR_TO
1676: IFFALSE 1719
// begin PrepareHuman ( false , i mod 4 + 1 , 3 ) ;
1678: LD_INT 0
1680: PPUSH
1681: LD_VAR 0 2
1685: PUSH
1686: LD_INT 4
1688: MOD
1689: PUSH
1690: LD_INT 1
1692: PLUS
1693: PPUSH
1694: LD_INT 3
1696: PPUSH
1697: CALL_OW 380
// others := others ^ CreateHuman ;
1701: LD_ADDR_EXP 26
1705: PUSH
1706: LD_EXP 26
1710: PUSH
1711: CALL_OW 44
1715: ADD
1716: ST_TO_ADDR
// end ;
1717: GO 1675
1719: POP
1720: POP
// end ; if others then
1721: LD_EXP 26
1725: IFFALSE 1743
// tmp := tmp ^ others ;
1727: LD_ADDR_VAR 0 5
1731: PUSH
1732: LD_VAR 0 5
1736: PUSH
1737: LD_EXP 26
1741: ADD
1742: ST_TO_ADDR
// points := [ [ 28 , 49 ] , [ 33 , 54 ] , [ 38 , 56 ] ] ;
1743: LD_ADDR_VAR 0 3
1747: PUSH
1748: LD_INT 28
1750: PUSH
1751: LD_INT 49
1753: PUSH
1754: EMPTY
1755: LIST
1756: LIST
1757: PUSH
1758: LD_INT 33
1760: PUSH
1761: LD_INT 54
1763: PUSH
1764: EMPTY
1765: LIST
1766: LIST
1767: PUSH
1768: LD_INT 38
1770: PUSH
1771: LD_INT 56
1773: PUSH
1774: EMPTY
1775: LIST
1776: LIST
1777: PUSH
1778: EMPTY
1779: LIST
1780: LIST
1781: LIST
1782: ST_TO_ADDR
// veh := PrepareTank ( 1 , 1 , us_medium_wheeled , engine_solar , control_manual , us_cargo_bay , 80 ) ;
1783: LD_ADDR_VAR 0 4
1787: PUSH
1788: LD_INT 1
1790: PPUSH
1791: LD_INT 1
1793: PPUSH
1794: LD_INT 2
1796: PPUSH
1797: LD_INT 2
1799: PPUSH
1800: LD_INT 1
1802: PPUSH
1803: LD_INT 12
1805: PPUSH
1806: LD_INT 80
1808: PPUSH
1809: CALL 431 0 7
1813: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
1814: LD_VAR 0 4
1818: PPUSH
1819: LD_INT 1
1821: PPUSH
1822: CALL_OW 233
// PlaceUnitXY ( veh , points [ 1 ] [ 1 ] , points [ 1 ] [ 2 ] , false ) ;
1826: LD_VAR 0 4
1830: PPUSH
1831: LD_VAR 0 3
1835: PUSH
1836: LD_INT 1
1838: ARRAY
1839: PUSH
1840: LD_INT 1
1842: ARRAY
1843: PPUSH
1844: LD_VAR 0 3
1848: PUSH
1849: LD_INT 1
1851: ARRAY
1852: PUSH
1853: LD_INT 2
1855: ARRAY
1856: PPUSH
1857: LD_INT 0
1859: PPUSH
1860: CALL_OW 48
// SetCargo ( veh , mat_cans , 100 ) ;
1864: LD_VAR 0 4
1868: PPUSH
1869: LD_INT 1
1871: PPUSH
1872: LD_INT 100
1874: PPUSH
1875: CALL_OW 290
// PlaceHumanInUnit ( others [ 1 ] , veh ) ;
1879: LD_EXP 26
1883: PUSH
1884: LD_INT 1
1886: ARRAY
1887: PPUSH
1888: LD_VAR 0 4
1892: PPUSH
1893: CALL_OW 52
// veh := PrepareTank ( 1 , 1 , us_light_wheeled , engine_solar , control_manual , us_machine_gun , 80 ) ;
1897: LD_ADDR_VAR 0 4
1901: PUSH
1902: LD_INT 1
1904: PPUSH
1905: LD_INT 1
1907: PPUSH
1908: LD_INT 1
1910: PPUSH
1911: LD_INT 2
1913: PPUSH
1914: LD_INT 1
1916: PPUSH
1917: LD_INT 2
1919: PPUSH
1920: LD_INT 80
1922: PPUSH
1923: CALL 431 0 7
1927: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
1928: LD_VAR 0 4
1932: PPUSH
1933: LD_INT 1
1935: PPUSH
1936: CALL_OW 233
// PlaceUnitXY ( veh , points [ 2 ] [ 1 ] , points [ 2 ] [ 2 ] , false ) ;
1940: LD_VAR 0 4
1944: PPUSH
1945: LD_VAR 0 3
1949: PUSH
1950: LD_INT 2
1952: ARRAY
1953: PUSH
1954: LD_INT 1
1956: ARRAY
1957: PPUSH
1958: LD_VAR 0 3
1962: PUSH
1963: LD_INT 2
1965: ARRAY
1966: PUSH
1967: LD_INT 2
1969: ARRAY
1970: PPUSH
1971: LD_INT 0
1973: PPUSH
1974: CALL_OW 48
// PlaceHumanInUnit ( Gladstone , veh ) ;
1978: LD_EXP 17
1982: PPUSH
1983: LD_VAR 0 4
1987: PPUSH
1988: CALL_OW 52
// veh := PrepareTank ( 1 , 1 , us_light_wheeled , engine_solar , control_manual , us_light_gun , 80 ) ;
1992: LD_ADDR_VAR 0 4
1996: PUSH
1997: LD_INT 1
1999: PPUSH
2000: LD_INT 1
2002: PPUSH
2003: LD_INT 1
2005: PPUSH
2006: LD_INT 2
2008: PPUSH
2009: LD_INT 1
2011: PPUSH
2012: LD_INT 3
2014: PPUSH
2015: LD_INT 80
2017: PPUSH
2018: CALL 431 0 7
2022: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
2023: LD_VAR 0 4
2027: PPUSH
2028: LD_INT 1
2030: PPUSH
2031: CALL_OW 233
// PlaceUnitXY ( veh , points [ 3 ] [ 1 ] , points [ 3 ] [ 2 ] , false ) ;
2035: LD_VAR 0 4
2039: PPUSH
2040: LD_VAR 0 3
2044: PUSH
2045: LD_INT 3
2047: ARRAY
2048: PUSH
2049: LD_INT 1
2051: ARRAY
2052: PPUSH
2053: LD_VAR 0 3
2057: PUSH
2058: LD_INT 3
2060: ARRAY
2061: PUSH
2062: LD_INT 2
2064: ARRAY
2065: PPUSH
2066: LD_INT 0
2068: PPUSH
2069: CALL_OW 48
// PlaceHumanInUnit ( JMM , veh ) ;
2073: LD_EXP 16
2077: PPUSH
2078: LD_VAR 0 4
2082: PPUSH
2083: CALL_OW 52
// for i in tmp diff others [ 1 ] do
2087: LD_ADDR_VAR 0 2
2091: PUSH
2092: LD_VAR 0 5
2096: PUSH
2097: LD_EXP 26
2101: PUSH
2102: LD_INT 1
2104: ARRAY
2105: DIFF
2106: PUSH
2107: FOR_IN
2108: IFFALSE 2127
// PlaceUnitArea ( i , startArea , false ) ;
2110: LD_VAR 0 2
2114: PPUSH
2115: LD_INT 5
2117: PPUSH
2118: LD_INT 0
2120: PPUSH
2121: CALL_OW 49
2125: GO 2107
2127: POP
2128: POP
// end ; end_of_file
2129: LD_VAR 0 1
2133: RET
// export function Action ; var m ; begin
2134: LD_INT 0
2136: PPUSH
2137: PPUSH
// InGameOn ;
2138: CALL_OW 8
// CenterNowOnXY ( 28 , 51 ) ;
2142: LD_INT 28
2144: PPUSH
2145: LD_INT 51
2147: PPUSH
2148: CALL_OW 86
// Wait ( 3 ) ;
2152: LD_INT 3
2154: PPUSH
2155: CALL_OW 67
// Say ( JMM , D1d-JMM-1a ) ;
2159: LD_EXP 16
2163: PPUSH
2164: LD_STRING D1d-JMM-1a
2166: PPUSH
2167: CALL_OW 88
// SayRadio ( Harrison , D1d-Har-1 ) ;
2171: LD_EXP 18
2175: PPUSH
2176: LD_STRING D1d-Har-1
2178: PPUSH
2179: CALL_OW 94
// InGameOff ;
2183: CALL_OW 9
// SaveForQuickRestart ;
2187: CALL_OW 22
// ChangeMissionObjectives ( M1 ) ;
2191: LD_STRING M1
2193: PPUSH
2194: CALL_OW 337
// Wait ( 0 0$2 ) ;
2198: LD_INT 70
2200: PPUSH
2201: CALL_OW 67
// Say ( JMM , D2-JMM-1 ) ;
2205: LD_EXP 16
2209: PPUSH
2210: LD_STRING D2-JMM-1
2212: PPUSH
2213: CALL_OW 88
// Say ( Gladstone , D2-Glad-1 ) ;
2217: LD_EXP 17
2221: PPUSH
2222: LD_STRING D2-Glad-1
2224: PPUSH
2225: CALL_OW 88
// Say ( JMM , D2-JMM-2 ) ;
2229: LD_EXP 16
2233: PPUSH
2234: LD_STRING D2-JMM-2
2236: PPUSH
2237: CALL_OW 88
// Say ( Gladstone , D2-Glad-2 ) ;
2241: LD_EXP 17
2245: PPUSH
2246: LD_STRING D2-Glad-2
2248: PPUSH
2249: CALL_OW 88
// Say ( JMM , D2-JMM-3 ) ;
2253: LD_EXP 16
2257: PPUSH
2258: LD_STRING D2-JMM-3
2260: PPUSH
2261: CALL_OW 88
// Wait ( rand ( 0 0$30 , 1 1$00 ) ) ;
2265: LD_INT 1050
2267: PPUSH
2268: LD_INT 2100
2270: PPUSH
2271: CALL_OW 12
2275: PPUSH
2276: CALL_OW 67
// SetWeather ( 1 , 570 , 350 ) ;
2280: LD_INT 1
2282: PPUSH
2283: LD_INT 570
2285: PPUSH
2286: LD_INT 350
2288: PPUSH
2289: CALL_OW 550
// Wait ( rand ( 3 3$00 , 5 5$00 ) ) ;
2293: LD_INT 6300
2295: PPUSH
2296: LD_INT 10500
2298: PPUSH
2299: CALL_OW 12
2303: PPUSH
2304: CALL_OW 67
// SetWeather ( 0 , 570 , 350 ) ;
2308: LD_INT 0
2310: PPUSH
2311: LD_INT 570
2313: PPUSH
2314: LD_INT 350
2316: PPUSH
2317: CALL_OW 550
// end ;
2321: LD_VAR 0 1
2325: RET
// every 0 0$01 trigger FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_not , [ f_constructed ] ] , [ f_btype , b_depot ] ] ] ) and not deltaBuilded do
2326: LD_INT 22
2328: PUSH
2329: LD_INT 1
2331: PUSH
2332: EMPTY
2333: LIST
2334: LIST
2335: PUSH
2336: LD_INT 3
2338: PUSH
2339: LD_INT 57
2341: PUSH
2342: EMPTY
2343: LIST
2344: PUSH
2345: EMPTY
2346: LIST
2347: LIST
2348: PUSH
2349: LD_INT 30
2351: PUSH
2352: LD_INT 0
2354: PUSH
2355: EMPTY
2356: LIST
2357: LIST
2358: PUSH
2359: EMPTY
2360: LIST
2361: LIST
2362: LIST
2363: PUSH
2364: EMPTY
2365: LIST
2366: PPUSH
2367: CALL_OW 69
2371: PUSH
2372: LD_EXP 4
2376: NOT
2377: AND
2378: IFFALSE 2391
2380: GO 2382
2382: DISABLE
// begin deltaBuilded := true ;
2383: LD_ADDR_EXP 4
2387: PUSH
2388: LD_INT 1
2390: ST_TO_ADDR
// end ;
2391: END
// every 0 0$01 trigger not Delta and deltaBuilded and FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_not , [ f_constructed ] ] , [ f_btype , b_depot ] ] ] ) do
2392: LD_EXP 6
2396: NOT
2397: PUSH
2398: LD_EXP 4
2402: AND
2403: PUSH
2404: LD_INT 22
2406: PUSH
2407: LD_INT 1
2409: PUSH
2410: EMPTY
2411: LIST
2412: LIST
2413: PUSH
2414: LD_INT 3
2416: PUSH
2417: LD_INT 57
2419: PUSH
2420: EMPTY
2421: LIST
2422: PUSH
2423: EMPTY
2424: LIST
2425: LIST
2426: PUSH
2427: LD_INT 30
2429: PUSH
2430: LD_INT 0
2432: PUSH
2433: EMPTY
2434: LIST
2435: LIST
2436: PUSH
2437: EMPTY
2438: LIST
2439: LIST
2440: LIST
2441: PUSH
2442: EMPTY
2443: LIST
2444: PPUSH
2445: CALL_OW 69
2449: AND
2450: IFFALSE 2536
2452: GO 2454
2454: DISABLE
// begin enable ;
2455: ENABLE
// SetRestrict ( b_depot , 1 , state_disabled ) ;
2456: LD_INT 0
2458: PPUSH
2459: LD_INT 1
2461: PPUSH
2462: LD_INT 0
2464: PPUSH
2465: CALL_OW 324
// Delta := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_not , [ f_constructed ] ] , [ f_btype , b_depot ] ] ] ) [ 1 ] ;
2469: LD_ADDR_EXP 6
2473: PUSH
2474: LD_INT 22
2476: PUSH
2477: LD_INT 1
2479: PUSH
2480: EMPTY
2481: LIST
2482: LIST
2483: PUSH
2484: LD_INT 3
2486: PUSH
2487: LD_INT 57
2489: PUSH
2490: EMPTY
2491: LIST
2492: PUSH
2493: EMPTY
2494: LIST
2495: LIST
2496: PUSH
2497: LD_INT 30
2499: PUSH
2500: LD_INT 0
2502: PUSH
2503: EMPTY
2504: LIST
2505: LIST
2506: PUSH
2507: EMPTY
2508: LIST
2509: LIST
2510: LIST
2511: PUSH
2512: EMPTY
2513: LIST
2514: PPUSH
2515: CALL_OW 69
2519: PUSH
2520: LD_INT 1
2522: ARRAY
2523: ST_TO_ADDR
// SetBName ( Delta , Delta ) ;
2524: LD_EXP 6
2528: PPUSH
2529: LD_STRING Delta
2531: PPUSH
2532: CALL_OW 500
// end ;
2536: END
// every 0 0$2 trigger GetTech ( tech_ApeLang , 1 ) = state_researched and IsOk ( Gladstone ) do
2537: LD_INT 1
2539: PPUSH
2540: LD_INT 1
2542: PPUSH
2543: CALL_OW 321
2547: PUSH
2548: LD_INT 2
2550: EQUAL
2551: PUSH
2552: LD_EXP 17
2556: PPUSH
2557: CALL_OW 302
2561: AND
2562: IFFALSE 2623
2564: GO 2566
2566: DISABLE
// begin DialogueOn ;
2567: CALL_OW 6
// Say ( Gladstone , D3-Glad-1 ) ;
2571: LD_EXP 17
2575: PPUSH
2576: LD_STRING D3-Glad-1
2578: PPUSH
2579: CALL_OW 88
// Say ( JMM , D3-JMM-1 ) ;
2583: LD_EXP 16
2587: PPUSH
2588: LD_STRING D3-JMM-1
2590: PPUSH
2591: CALL_OW 88
// Say ( Gladstone , D3-Glad-2 ) ;
2595: LD_EXP 17
2599: PPUSH
2600: LD_STRING D3-Glad-2
2602: PPUSH
2603: CALL_OW 88
// Say ( JMM , D3-JMM-2 ) ;
2607: LD_EXP 16
2611: PPUSH
2612: LD_STRING D3-JMM-2
2614: PPUSH
2615: CALL_OW 88
// DialogueOff ;
2619: CALL_OW 7
// end ;
2623: END
// every 0 0$1 trigger GetTech ( tech_ApePsych , 1 ) = state_researched do var sol ;
2624: LD_INT 2
2626: PPUSH
2627: LD_INT 1
2629: PPUSH
2630: CALL_OW 321
2634: PUSH
2635: LD_INT 2
2637: EQUAL
2638: IFFALSE 2815
2640: GO 2642
2642: DISABLE
2643: LD_INT 0
2645: PPUSH
// begin DialogueOn ;
2646: CALL_OW 6
// if Frank then
2650: LD_EXP 23
2654: IFFALSE 2668
// Say ( Frank , D8a-Frank-1 ) ;
2656: LD_EXP 23
2660: PPUSH
2661: LD_STRING D8a-Frank-1
2663: PPUSH
2664: CALL_OW 88
// sol := SayX ( UnitFilter ( others , [ f_sex , sex_male ] ) , D8a-Sol1-1 ) ;
2668: LD_ADDR_VAR 0 1
2672: PUSH
2673: LD_EXP 26
2677: PPUSH
2678: LD_INT 26
2680: PUSH
2681: LD_INT 1
2683: PUSH
2684: EMPTY
2685: LIST
2686: LIST
2687: PPUSH
2688: CALL_OW 72
2692: PPUSH
2693: LD_STRING D8a-Sol1-1
2695: PPUSH
2696: CALL 519 0 2
2700: ST_TO_ADDR
// if Denis and GetSide ( Denis ) = 1 then
2701: LD_EXP 19
2705: PUSH
2706: LD_EXP 19
2710: PPUSH
2711: CALL_OW 255
2715: PUSH
2716: LD_INT 1
2718: EQUAL
2719: AND
2720: IFFALSE 2734
// Say ( Denis , D8a-Den-1 ) ;
2722: LD_EXP 19
2726: PPUSH
2727: LD_STRING D8a-Den-1
2729: PPUSH
2730: CALL_OW 88
// if sol or Denis or Frank then
2734: LD_VAR 0 1
2738: PUSH
2739: LD_EXP 19
2743: OR
2744: PUSH
2745: LD_EXP 23
2749: OR
2750: IFFALSE 2811
// begin SayX ( UnitFilter ( others , [ [ f_class , 4 ] , [ f_sex , sex_male ] ] ) diff sol , D8a-Sci1-1 ) ;
2752: LD_EXP 26
2756: PPUSH
2757: LD_INT 25
2759: PUSH
2760: LD_INT 4
2762: PUSH
2763: EMPTY
2764: LIST
2765: LIST
2766: PUSH
2767: LD_INT 26
2769: PUSH
2770: LD_INT 1
2772: PUSH
2773: EMPTY
2774: LIST
2775: LIST
2776: PUSH
2777: EMPTY
2778: LIST
2779: LIST
2780: PPUSH
2781: CALL_OW 72
2785: PUSH
2786: LD_VAR 0 1
2790: DIFF
2791: PPUSH
2792: LD_STRING D8a-Sci1-1
2794: PPUSH
2795: CALL 519 0 2
// Say ( JMM , D8a-JMM-1 ) ;
2799: LD_EXP 16
2803: PPUSH
2804: LD_STRING D8a-JMM-1
2806: PPUSH
2807: CALL_OW 88
// end ; DialogueOff ;
2811: CALL_OW 7
// end ;
2815: PPOPN 1
2817: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_apeman_engineer ] ] ) do
2818: LD_INT 22
2820: PUSH
2821: LD_INT 1
2823: PUSH
2824: EMPTY
2825: LIST
2826: LIST
2827: PUSH
2828: LD_INT 25
2830: PUSH
2831: LD_INT 16
2833: PUSH
2834: EMPTY
2835: LIST
2836: LIST
2837: PUSH
2838: EMPTY
2839: LIST
2840: LIST
2841: PPUSH
2842: CALL_OW 69
2846: IFFALSE 2905
2848: GO 2850
2850: DISABLE
// begin ChangeMissionObjectives ( M1a ) ;
2851: LD_STRING M1a
2853: PPUSH
2854: CALL_OW 337
// case Query ( Q2 ) of 1 :
2858: LD_STRING Q2
2860: PPUSH
2861: CALL_OW 97
2865: PUSH
2866: LD_INT 1
2868: DOUBLE
2869: EQUAL
2870: IFTRUE 2874
2872: GO 2885
2874: POP
// end_mission := true ; 2 :
2875: LD_ADDR_EXP 14
2879: PUSH
2880: LD_INT 1
2882: ST_TO_ADDR
2883: GO 2905
2885: LD_INT 2
2887: DOUBLE
2888: EQUAL
2889: IFTRUE 2893
2891: GO 2904
2893: POP
// end_the_mission_allowed := true ; end ;
2894: LD_ADDR_OWVAR 57
2898: PUSH
2899: LD_INT 1
2901: ST_TO_ADDR
2902: GO 2905
2904: POP
// end ;
2905: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) and Delta do
2906: LD_INT 22
2908: PUSH
2909: LD_INT 1
2911: PUSH
2912: EMPTY
2913: LIST
2914: LIST
2915: PUSH
2916: LD_INT 2
2918: PUSH
2919: LD_INT 30
2921: PUSH
2922: LD_INT 6
2924: PUSH
2925: EMPTY
2926: LIST
2927: LIST
2928: PUSH
2929: LD_INT 30
2931: PUSH
2932: LD_INT 7
2934: PUSH
2935: EMPTY
2936: LIST
2937: LIST
2938: PUSH
2939: EMPTY
2940: LIST
2941: LIST
2942: LIST
2943: PUSH
2944: EMPTY
2945: LIST
2946: LIST
2947: PPUSH
2948: CALL_OW 69
2952: PUSH
2953: LD_INT 22
2955: PUSH
2956: LD_INT 1
2958: PUSH
2959: EMPTY
2960: LIST
2961: LIST
2962: PUSH
2963: LD_INT 2
2965: PUSH
2966: LD_INT 30
2968: PUSH
2969: LD_INT 2
2971: PUSH
2972: EMPTY
2973: LIST
2974: LIST
2975: PUSH
2976: LD_INT 30
2978: PUSH
2979: LD_INT 3
2981: PUSH
2982: EMPTY
2983: LIST
2984: LIST
2985: PUSH
2986: EMPTY
2987: LIST
2988: LIST
2989: LIST
2990: PUSH
2991: EMPTY
2992: LIST
2993: LIST
2994: PPUSH
2995: CALL_OW 69
2999: AND
3000: PUSH
3001: LD_EXP 6
3005: AND
3006: IFFALSE 3521
3008: GO 3010
3010: DISABLE
// begin Wait ( rand ( 0 0$30 , 0 0$50 ) ) ;
3011: LD_INT 1050
3013: PPUSH
3014: LD_INT 1750
3016: PPUSH
3017: CALL_OW 12
3021: PPUSH
3022: CALL_OW 67
// PlaceUnitArea ( Denis , [ denisArea1 , denisArea2 , denisArea3 , denisArea4 ] [ Difficulty ] , false ) ;
3026: LD_EXP 19
3030: PPUSH
3031: LD_INT 6
3033: PUSH
3034: LD_INT 9
3036: PUSH
3037: LD_INT 10
3039: PUSH
3040: LD_INT 16
3042: PUSH
3043: EMPTY
3044: LIST
3045: LIST
3046: LIST
3047: LIST
3048: PUSH
3049: LD_OWVAR 67
3053: ARRAY
3054: PPUSH
3055: LD_INT 0
3057: PPUSH
3058: CALL_OW 49
// ComHold ( Denis ) ;
3062: LD_EXP 19
3066: PPUSH
3067: CALL_OW 140
// InGameOn ;
3071: CALL_OW 8
// DialogueOn ;
3075: CALL_OW 6
// if Delta then
3079: LD_EXP 6
3083: IFFALSE 3096
// CenterNowOnUnits ( Delta ) else
3085: LD_EXP 6
3089: PPUSH
3090: CALL_OW 87
3094: GO 3105
// CenterNowOnUnits ( JMM ) ;
3096: LD_EXP 16
3100: PPUSH
3101: CALL_OW 87
// SayRadio ( Denis , DD-Den-1 ) ;
3105: LD_EXP 19
3109: PPUSH
3110: LD_STRING DD-Den-1
3112: PPUSH
3113: CALL_OW 94
// Say ( JMM , DD-JMM-1 ) ;
3117: LD_EXP 16
3121: PPUSH
3122: LD_STRING DD-JMM-1
3124: PPUSH
3125: CALL_OW 88
// SayRadio ( Denis , DD-Den-2 ) ;
3129: LD_EXP 19
3133: PPUSH
3134: LD_STRING DD-Den-2
3136: PPUSH
3137: CALL_OW 94
// Wait ( 3 ) ;
3141: LD_INT 3
3143: PPUSH
3144: CALL_OW 67
// DialogueOff ;
3148: CALL_OW 7
// InGameOff ;
3152: CALL_OW 9
// if Difficulty = 1 then
3156: LD_OWVAR 67
3160: PUSH
3161: LD_INT 1
3163: EQUAL
3164: IFFALSE 3240
// begin PlaceSeeing ( GetX ( Denis ) , GetY ( Denis ) , 1 , - 12 ) ;
3166: LD_EXP 19
3170: PPUSH
3171: CALL_OW 250
3175: PPUSH
3176: LD_EXP 19
3180: PPUSH
3181: CALL_OW 251
3185: PPUSH
3186: LD_INT 1
3188: PPUSH
3189: LD_INT 12
3191: NEG
3192: PPUSH
3193: CALL_OW 330
// CenterNowOnUnits ( Denis ) ;
3197: LD_EXP 19
3201: PPUSH
3202: CALL_OW 87
// wait ( 0 0$5 ) ;
3206: LD_INT 175
3208: PPUSH
3209: CALL_OW 67
// RemoveSeeing ( GetX ( Denis ) , GetY ( Denis ) , 1 ) ;
3213: LD_EXP 19
3217: PPUSH
3218: CALL_OW 250
3222: PPUSH
3223: LD_EXP 19
3227: PPUSH
3228: CALL_OW 251
3232: PPUSH
3233: LD_INT 1
3235: PPUSH
3236: CALL_OW 331
// end ; repeat wait ( 0 0$01 ) ;
3240: LD_INT 35
3242: PPUSH
3243: CALL_OW 67
// until See ( 1 , Denis ) or IsDead ( Denis ) ;
3247: LD_INT 1
3249: PPUSH
3250: LD_EXP 19
3254: PPUSH
3255: CALL_OW 292
3259: PUSH
3260: LD_EXP 19
3264: PPUSH
3265: CALL_OW 301
3269: OR
3270: IFFALSE 3240
// if IsDead ( Denis ) then
3272: LD_EXP 19
3276: PPUSH
3277: CALL_OW 301
3281: IFFALSE 3285
// exit ;
3283: GO 3521
// SetSide ( Denis , 1 ) ;
3285: LD_EXP 19
3289: PPUSH
3290: LD_INT 1
3292: PPUSH
3293: CALL_OW 235
// Say ( Denis , DD-Den-2a ) ;
3297: LD_EXP 19
3301: PPUSH
3302: LD_STRING DD-Den-2a
3304: PPUSH
3305: CALL_OW 88
// repeat wait ( 0 0$01 ) ;
3309: LD_INT 35
3311: PPUSH
3312: CALL_OW 67
// until GetBType ( IsInUnit ( Denis ) ) in [ b_lab , b_lab_half , b_lab_full ] or IsDead ( Denis ) ;
3316: LD_EXP 19
3320: PPUSH
3321: CALL_OW 310
3325: PPUSH
3326: CALL_OW 266
3330: PUSH
3331: LD_INT 6
3333: PUSH
3334: LD_INT 7
3336: PUSH
3337: LD_INT 8
3339: PUSH
3340: EMPTY
3341: LIST
3342: LIST
3343: LIST
3344: IN
3345: PUSH
3346: LD_EXP 19
3350: PPUSH
3351: CALL_OW 301
3355: OR
3356: IFFALSE 3309
// if IsDead ( Denis ) then
3358: LD_EXP 19
3362: PPUSH
3363: CALL_OW 301
3367: IFFALSE 3371
// exit ;
3369: GO 3521
// Say ( Denis , DD-Den-2b ) ;
3371: LD_EXP 19
3375: PPUSH
3376: LD_STRING DD-Den-2b
3378: PPUSH
3379: CALL_OW 88
// ComChangeProfession ( Denis , 4 ) ;
3383: LD_EXP 19
3387: PPUSH
3388: LD_INT 4
3390: PPUSH
3391: CALL_OW 123
// Wait ( 0 0$02 ) ;
3395: LD_INT 70
3397: PPUSH
3398: CALL_OW 67
// DialogueOn ;
3402: CALL_OW 6
// CenterNowOnUnits ( Denis ) ;
3406: LD_EXP 19
3410: PPUSH
3411: CALL_OW 87
// Say ( JMM , D4-JMM-1 ) ;
3415: LD_EXP 16
3419: PPUSH
3420: LD_STRING D4-JMM-1
3422: PPUSH
3423: CALL_OW 88
// Say ( Denis , D4-Den-1 ) ;
3427: LD_EXP 19
3431: PPUSH
3432: LD_STRING D4-Den-1
3434: PPUSH
3435: CALL_OW 88
// Say ( JMM , D4-JMM-2 ) ;
3439: LD_EXP 16
3443: PPUSH
3444: LD_STRING D4-JMM-2
3446: PPUSH
3447: CALL_OW 88
// Say ( Denis , D4-Den-2 ) ;
3451: LD_EXP 19
3455: PPUSH
3456: LD_STRING D4-Den-2
3458: PPUSH
3459: CALL_OW 88
// DialogueOff ;
3463: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
3467: LD_STRING M2
3469: PPUSH
3470: CALL_OW 337
// radar_allowed := true ;
3474: LD_ADDR_EXP 7
3478: PUSH
3479: LD_INT 1
3481: ST_TO_ADDR
// SetTech ( tech_radar , 1 , state_enabled ) ;
3482: LD_INT 6
3484: PPUSH
3485: LD_INT 1
3487: PPUSH
3488: LD_INT 1
3490: PPUSH
3491: CALL_OW 322
// SetRestrict ( b_lab_opto , 1 , state_enabled ) ;
3495: LD_INT 15
3497: PPUSH
3498: LD_INT 1
3500: PPUSH
3501: LD_INT 1
3503: PPUSH
3504: CALL_OW 324
// SetRestrict ( b_ext_radar , 1 , state_enabled ) ;
3508: LD_INT 20
3510: PPUSH
3511: LD_INT 1
3513: PPUSH
3514: LD_INT 1
3516: PPUSH
3517: CALL_OW 324
// end ;
3521: END
// every 0 0$1 trigger arab_spotted do var sol , sol2 ;
3522: LD_EXP 13
3526: IFFALSE 4149
3528: GO 3530
3530: DISABLE
3531: LD_INT 0
3533: PPUSH
3534: PPUSH
// begin sol := SayX ( UnitFilter ( others , [ f_sex , sex_male ] ) , D5-Sol1-1 ) ;
3535: LD_ADDR_VAR 0 1
3539: PUSH
3540: LD_EXP 26
3544: PPUSH
3545: LD_INT 26
3547: PUSH
3548: LD_INT 1
3550: PUSH
3551: EMPTY
3552: LIST
3553: LIST
3554: PPUSH
3555: CALL_OW 72
3559: PPUSH
3560: LD_STRING D5-Sol1-1
3562: PPUSH
3563: CALL 519 0 2
3567: ST_TO_ADDR
// if not sol then
3568: LD_VAR 0 1
3572: NOT
3573: IFFALSE 3577
// exit ;
3575: GO 4149
// repeat wait ( 0 0$01 ) ;
3577: LD_INT 35
3579: PPUSH
3580: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) = 0 ;
3584: LD_INT 22
3586: PUSH
3587: LD_INT 2
3589: PUSH
3590: EMPTY
3591: LIST
3592: LIST
3593: PUSH
3594: LD_INT 21
3596: PUSH
3597: LD_INT 1
3599: PUSH
3600: EMPTY
3601: LIST
3602: LIST
3603: PUSH
3604: EMPTY
3605: LIST
3606: LIST
3607: PPUSH
3608: CALL_OW 69
3612: PUSH
3613: LD_INT 0
3615: EQUAL
3616: IFFALSE 3577
// if IsOk ( sol ) then
3618: LD_VAR 0 1
3622: PPUSH
3623: CALL_OW 302
3627: IFFALSE 3647
// begin sol2 := others diff sol ;
3629: LD_ADDR_VAR 0 2
3633: PUSH
3634: LD_EXP 26
3638: PUSH
3639: LD_VAR 0 1
3643: DIFF
3644: ST_TO_ADDR
// end else
3645: GO 3649
// exit ;
3647: GO 4149
// if not Lisa and not sol2 then
3649: LD_EXP 22
3653: NOT
3654: PUSH
3655: LD_VAR 0 2
3659: NOT
3660: AND
3661: IFFALSE 3665
// exit ;
3663: GO 4149
// DialogueOn ;
3665: CALL_OW 6
// if Lisa then
3669: LD_EXP 22
3673: IFFALSE 3689
// Say ( Lisa , D5a-Lisa-1 ) else
3675: LD_EXP 22
3679: PPUSH
3680: LD_STRING D5a-Lisa-1
3682: PPUSH
3683: CALL_OW 88
3687: GO 3764
// if sol2 then
3689: LD_VAR 0 2
3693: IFFALSE 3764
// case GetSex ( sol2 [ 1 ] ) of sex_male :
3695: LD_VAR 0 2
3699: PUSH
3700: LD_INT 1
3702: ARRAY
3703: PPUSH
3704: CALL_OW 258
3708: PUSH
3709: LD_INT 1
3711: DOUBLE
3712: EQUAL
3713: IFTRUE 3717
3715: GO 3736
3717: POP
// Say ( sol2 [ 1 ] , D5-Sol2-1 ) ; sex_female :
3718: LD_VAR 0 2
3722: PUSH
3723: LD_INT 1
3725: ARRAY
3726: PPUSH
3727: LD_STRING D5-Sol2-1
3729: PPUSH
3730: CALL_OW 88
3734: GO 3764
3736: LD_INT 2
3738: DOUBLE
3739: EQUAL
3740: IFTRUE 3744
3742: GO 3763
3744: POP
// Say ( sol2 [ 1 ] , D5-FSol2-1 ) ; end ;
3745: LD_VAR 0 2
3749: PUSH
3750: LD_INT 1
3752: ARRAY
3753: PPUSH
3754: LD_STRING D5-FSol2-1
3756: PPUSH
3757: CALL_OW 88
3761: GO 3764
3763: POP
// Say ( sol , D5-Sol1-2 ) ;
3764: LD_VAR 0 1
3768: PPUSH
3769: LD_STRING D5-Sol1-2
3771: PPUSH
3772: CALL_OW 88
// if Lisa then
3776: LD_EXP 22
3780: IFFALSE 3796
// Say ( Lisa , D5a-Lisa-2 ) else
3782: LD_EXP 22
3786: PPUSH
3787: LD_STRING D5a-Lisa-2
3789: PPUSH
3790: CALL_OW 88
3794: GO 3871
// if sol2 then
3796: LD_VAR 0 2
3800: IFFALSE 3871
// case GetSex ( sol2 [ 1 ] ) of sex_male :
3802: LD_VAR 0 2
3806: PUSH
3807: LD_INT 1
3809: ARRAY
3810: PPUSH
3811: CALL_OW 258
3815: PUSH
3816: LD_INT 1
3818: DOUBLE
3819: EQUAL
3820: IFTRUE 3824
3822: GO 3843
3824: POP
// Say ( sol2 [ 1 ] , D5-Sol2-2 ) ; sex_female :
3825: LD_VAR 0 2
3829: PUSH
3830: LD_INT 1
3832: ARRAY
3833: PPUSH
3834: LD_STRING D5-Sol2-2
3836: PPUSH
3837: CALL_OW 88
3841: GO 3871
3843: LD_INT 2
3845: DOUBLE
3846: EQUAL
3847: IFTRUE 3851
3849: GO 3870
3851: POP
// Say ( sol2 [ 1 ] , D5-FSol2-2 ) ; end ;
3852: LD_VAR 0 2
3856: PUSH
3857: LD_INT 1
3859: ARRAY
3860: PPUSH
3861: LD_STRING D5-FSol2-2
3863: PPUSH
3864: CALL_OW 88
3868: GO 3871
3870: POP
// Say ( sol , D5a-Sol1-3 ) ;
3871: LD_VAR 0 1
3875: PPUSH
3876: LD_STRING D5a-Sol1-3
3878: PPUSH
3879: CALL_OW 88
// if Lisa then
3883: LD_EXP 22
3887: IFFALSE 3901
// Say ( Lisa , D5a-Lisa-3 ) ;
3889: LD_EXP 22
3893: PPUSH
3894: LD_STRING D5a-Lisa-3
3896: PPUSH
3897: CALL_OW 88
// if not sol2 then
3901: LD_VAR 0 2
3905: NOT
3906: IFFALSE 3914
// begin DialogueOff ;
3908: CALL_OW 7
// exit ;
3912: GO 4149
// end ; case GetSex ( sol2 [ 1 ] ) of sex_male :
3914: LD_VAR 0 2
3918: PUSH
3919: LD_INT 1
3921: ARRAY
3922: PPUSH
3923: CALL_OW 258
3927: PUSH
3928: LD_INT 1
3930: DOUBLE
3931: EQUAL
3932: IFTRUE 3936
3934: GO 3955
3936: POP
// Say ( sol2 [ 1 ] , D5-Sol2-3 ) ; sex_female :
3937: LD_VAR 0 2
3941: PUSH
3942: LD_INT 1
3944: ARRAY
3945: PPUSH
3946: LD_STRING D5-Sol2-3
3948: PPUSH
3949: CALL_OW 88
3953: GO 3983
3955: LD_INT 2
3957: DOUBLE
3958: EQUAL
3959: IFTRUE 3963
3961: GO 3982
3963: POP
// Say ( sol2 [ 1 ] , D5-FSol2-3 ) ; end ;
3964: LD_VAR 0 2
3968: PUSH
3969: LD_INT 1
3971: ARRAY
3972: PPUSH
3973: LD_STRING D5-FSol2-3
3975: PPUSH
3976: CALL_OW 88
3980: GO 3983
3982: POP
// Say ( sol , D5-Sol1-4 ) ;
3983: LD_VAR 0 1
3987: PPUSH
3988: LD_STRING D5-Sol1-4
3990: PPUSH
3991: CALL_OW 88
// case GetSex ( sol2 [ 1 ] ) of sex_male :
3995: LD_VAR 0 2
3999: PUSH
4000: LD_INT 1
4002: ARRAY
4003: PPUSH
4004: CALL_OW 258
4008: PUSH
4009: LD_INT 1
4011: DOUBLE
4012: EQUAL
4013: IFTRUE 4017
4015: GO 4036
4017: POP
// Say ( sol2 [ 1 ] , D5-Sol2-4 ) ; sex_female :
4018: LD_VAR 0 2
4022: PUSH
4023: LD_INT 1
4025: ARRAY
4026: PPUSH
4027: LD_STRING D5-Sol2-4
4029: PPUSH
4030: CALL_OW 88
4034: GO 4064
4036: LD_INT 2
4038: DOUBLE
4039: EQUAL
4040: IFTRUE 4044
4042: GO 4063
4044: POP
// Say ( sol2 [ 1 ] , D5-FSol2-4 ) ; end ;
4045: LD_VAR 0 2
4049: PUSH
4050: LD_INT 1
4052: ARRAY
4053: PPUSH
4054: LD_STRING D5-FSol2-4
4056: PPUSH
4057: CALL_OW 88
4061: GO 4064
4063: POP
// Say ( sol , D5-Sol1-5 ) ;
4064: LD_VAR 0 1
4068: PPUSH
4069: LD_STRING D5-Sol1-5
4071: PPUSH
4072: CALL_OW 88
// case GetSex ( sol2 [ 1 ] ) of sex_male :
4076: LD_VAR 0 2
4080: PUSH
4081: LD_INT 1
4083: ARRAY
4084: PPUSH
4085: CALL_OW 258
4089: PUSH
4090: LD_INT 1
4092: DOUBLE
4093: EQUAL
4094: IFTRUE 4098
4096: GO 4117
4098: POP
// Say ( sol2 [ 1 ] , D5-Sol2-5 ) ; sex_female :
4099: LD_VAR 0 2
4103: PUSH
4104: LD_INT 1
4106: ARRAY
4107: PPUSH
4108: LD_STRING D5-Sol2-5
4110: PPUSH
4111: CALL_OW 88
4115: GO 4145
4117: LD_INT 2
4119: DOUBLE
4120: EQUAL
4121: IFTRUE 4125
4123: GO 4144
4125: POP
// Say ( sol2 [ 1 ] , D5-FSol2-5 ) ; end ;
4126: LD_VAR 0 2
4130: PUSH
4131: LD_INT 1
4133: ARRAY
4134: PPUSH
4135: LD_STRING D5-FSol2-5
4137: PPUSH
4138: CALL_OW 88
4142: GO 4145
4144: POP
// DialogueOff ;
4145: CALL_OW 7
// end ;
4149: PPOPN 2
4151: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_apeman_engineer ] ] ) >= 5 do
4152: LD_INT 22
4154: PUSH
4155: LD_INT 1
4157: PUSH
4158: EMPTY
4159: LIST
4160: LIST
4161: PUSH
4162: LD_INT 25
4164: PUSH
4165: LD_INT 16
4167: PUSH
4168: EMPTY
4169: LIST
4170: LIST
4171: PUSH
4172: EMPTY
4173: LIST
4174: LIST
4175: PPUSH
4176: CALL_OW 69
4180: PUSH
4181: LD_INT 5
4183: GREATEREQUAL
4184: IFFALSE 4204
4186: GO 4188
4188: DISABLE
// begin ChangeMissionObjectives ( M1b ) ;
4189: LD_STRING M1b
4191: PPUSH
4192: CALL_OW 337
// apeman_army := true ;
4196: LD_ADDR_EXP 9
4200: PUSH
4201: LD_INT 1
4203: ST_TO_ADDR
// end ;
4204: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] , [ f_constructed ] ] ) do
4205: LD_INT 22
4207: PUSH
4208: LD_INT 1
4210: PUSH
4211: EMPTY
4212: LIST
4213: LIST
4214: PUSH
4215: LD_INT 30
4217: PUSH
4218: LD_INT 3
4220: PUSH
4221: EMPTY
4222: LIST
4223: LIST
4224: PUSH
4225: LD_INT 57
4227: PUSH
4228: EMPTY
4229: LIST
4230: PUSH
4231: EMPTY
4232: LIST
4233: LIST
4234: LIST
4235: PPUSH
4236: CALL_OW 69
4240: IFFALSE 4252
4242: GO 4244
4244: DISABLE
// ChangeMissionObjectives ( M1c ) ;
4245: LD_STRING M1c
4247: PPUSH
4248: CALL_OW 337
4252: END
// every 0 0$1 trigger GetTech ( tech_radar , 1 ) = state_researched do
4253: LD_INT 6
4255: PPUSH
4256: LD_INT 1
4258: PPUSH
4259: CALL_OW 321
4263: PUSH
4264: LD_INT 2
4266: EQUAL
4267: IFFALSE 4287
4269: GO 4271
4271: DISABLE
// begin ChangeMissionObjectives ( M2a ) ;
4272: LD_STRING M2a
4274: PPUSH
4275: CALL_OW 337
// radar_researched := true ;
4279: LD_ADDR_EXP 10
4283: PUSH
4284: LD_INT 1
4286: ST_TO_ADDR
// end ;
4287: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_weapon , us_radar ] , [ f_bweapon , us_radar ] ] ] ) do
4288: LD_INT 22
4290: PUSH
4291: LD_INT 1
4293: PUSH
4294: EMPTY
4295: LIST
4296: LIST
4297: PUSH
4298: LD_INT 2
4300: PUSH
4301: LD_INT 34
4303: PUSH
4304: LD_INT 11
4306: PUSH
4307: EMPTY
4308: LIST
4309: LIST
4310: PUSH
4311: LD_INT 35
4313: PUSH
4314: LD_INT 11
4316: PUSH
4317: EMPTY
4318: LIST
4319: LIST
4320: PUSH
4321: EMPTY
4322: LIST
4323: LIST
4324: LIST
4325: PUSH
4326: EMPTY
4327: LIST
4328: LIST
4329: PPUSH
4330: CALL_OW 69
4334: IFFALSE 4354
4336: GO 4338
4338: DISABLE
// begin ChangeMissionObjectives ( M2b ) ;
4339: LD_STRING M2b
4341: PPUSH
4342: CALL_OW 337
// radar_builded := true ;
4346: LD_ADDR_EXP 11
4350: PUSH
4351: LD_INT 1
4353: ST_TO_ADDR
// end ;
4354: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) = 0 and not first_apeman_tamed do
4355: LD_INT 22
4357: PUSH
4358: LD_INT 0
4360: PUSH
4361: EMPTY
4362: LIST
4363: LIST
4364: PUSH
4365: LD_INT 25
4367: PUSH
4368: LD_INT 12
4370: PUSH
4371: EMPTY
4372: LIST
4373: LIST
4374: PUSH
4375: EMPTY
4376: LIST
4377: LIST
4378: PPUSH
4379: CALL_OW 69
4383: PUSH
4384: LD_INT 0
4386: EQUAL
4387: PUSH
4388: LD_EXP 8
4392: NOT
4393: AND
4394: IFFALSE 4406
4396: GO 4398
4398: DISABLE
// YouLost ( Apeman ) ;
4399: LD_STRING Apeman
4401: PPUSH
4402: CALL_OW 104
4406: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_apeman_engineer ] ] ) >= 7 do var i , filter ;
4407: LD_INT 22
4409: PUSH
4410: LD_INT 1
4412: PUSH
4413: EMPTY
4414: LIST
4415: LIST
4416: PUSH
4417: LD_INT 25
4419: PUSH
4420: LD_INT 16
4422: PUSH
4423: EMPTY
4424: LIST
4425: LIST
4426: PUSH
4427: EMPTY
4428: LIST
4429: LIST
4430: PPUSH
4431: CALL_OW 69
4435: PUSH
4436: LD_INT 7
4438: GREATEREQUAL
4439: IFFALSE 4537
4441: GO 4443
4443: DISABLE
4444: LD_INT 0
4446: PPUSH
4447: PPUSH
// begin filter := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 4 ] ] ) ^ JMM ;
4448: LD_ADDR_VAR 0 2
4452: PUSH
4453: LD_INT 22
4455: PUSH
4456: LD_INT 1
4458: PUSH
4459: EMPTY
4460: LIST
4461: LIST
4462: PUSH
4463: LD_INT 21
4465: PUSH
4466: LD_INT 1
4468: PUSH
4469: EMPTY
4470: LIST
4471: LIST
4472: PUSH
4473: LD_INT 25
4475: PUSH
4476: LD_INT 4
4478: PUSH
4479: EMPTY
4480: LIST
4481: LIST
4482: PUSH
4483: EMPTY
4484: LIST
4485: LIST
4486: LIST
4487: PPUSH
4488: CALL_OW 69
4492: PUSH
4493: LD_EXP 16
4497: ADD
4498: ST_TO_ADDR
// if filter then
4499: LD_VAR 0 2
4503: IFFALSE 4537
// for i in filter do
4505: LD_ADDR_VAR 0 1
4509: PUSH
4510: LD_VAR 0 2
4514: PUSH
4515: FOR_IN
4516: IFFALSE 4535
// AddExperience ( i , 4 , 3500 ) ;
4518: LD_VAR 0 1
4522: PPUSH
4523: LD_INT 4
4525: PPUSH
4526: LD_INT 3500
4528: PPUSH
4529: CALL_OW 492
4533: GO 4515
4535: POP
4536: POP
// end ;
4537: PPOPN 2
4539: END
// every 0 0$1 trigger end_mission do var i , tmp , m1 , m2 , m3 ;
4540: LD_EXP 14
4544: IFFALSE 5678
4546: GO 4548
4548: DISABLE
4549: LD_INT 0
4551: PPUSH
4552: PPUSH
4553: PPUSH
4554: PPUSH
4555: PPUSH
// begin if apeKillCounter = 0 then
4556: LD_EXP 15
4560: PUSH
4561: LD_INT 0
4563: EQUAL
4564: IFFALSE 4573
// SetAchievement ( ACH_APEKILLER ) ;
4566: LD_STRING ACH_APEKILLER
4568: PPUSH
4569: CALL_OW 543
// if FilterAllUnits ( [ f_side , 2 ] ) then
4573: LD_INT 22
4575: PUSH
4576: LD_INT 2
4578: PUSH
4579: EMPTY
4580: LIST
4581: LIST
4582: PPUSH
4583: CALL_OW 69
4587: IFFALSE 4625
// for i in FilterAllUnits ( [ f_side , 2 ] ) do
4589: LD_ADDR_VAR 0 1
4593: PUSH
4594: LD_INT 22
4596: PUSH
4597: LD_INT 2
4599: PUSH
4600: EMPTY
4601: LIST
4602: LIST
4603: PPUSH
4604: CALL_OW 69
4608: PUSH
4609: FOR_IN
4610: IFFALSE 4623
// RemoveUnit ( i ) ;
4612: LD_VAR 0 1
4616: PPUSH
4617: CALL_OW 64
4621: GO 4609
4623: POP
4624: POP
// m1 := false ;
4625: LD_ADDR_VAR 0 3
4629: PUSH
4630: LD_INT 0
4632: ST_TO_ADDR
// m2 := false ;
4633: LD_ADDR_VAR 0 4
4637: PUSH
4638: LD_INT 0
4640: ST_TO_ADDR
// m3 := false ;
4641: LD_ADDR_VAR 0 5
4645: PUSH
4646: LD_INT 0
4648: ST_TO_ADDR
// if apeman_army then
4649: LD_EXP 9
4653: IFFALSE 4675
// begin AddMedal ( Tame , 1 ) ;
4655: LD_STRING Tame
4657: PPUSH
4658: LD_INT 1
4660: PPUSH
4661: CALL_OW 101
// m1 := true ;
4665: LD_ADDR_VAR 0 3
4669: PUSH
4670: LD_INT 1
4672: ST_TO_ADDR
// end else
4673: GO 4686
// AddMedal ( Tame , - 1 ) ;
4675: LD_STRING Tame
4677: PPUSH
4678: LD_INT 1
4680: NEG
4681: PPUSH
4682: CALL_OW 101
// if radar_researched then
4686: LD_EXP 10
4690: IFFALSE 4722
// begin SaveVariable ( true , radarResInDelta ) ;
4692: LD_INT 1
4694: PPUSH
4695: LD_STRING radarResInDelta
4697: PPUSH
4698: CALL_OW 39
// AddMedal ( Radar , 1 ) ;
4702: LD_STRING Radar
4704: PPUSH
4705: LD_INT 1
4707: PPUSH
4708: CALL_OW 101
// m2 := true ;
4712: LD_ADDR_VAR 0 4
4716: PUSH
4717: LD_INT 1
4719: ST_TO_ADDR
// end else
4720: GO 4752
// if radar_allowed then
4722: LD_EXP 7
4726: IFFALSE 4741
// AddMedal ( Radar , - 2 ) else
4728: LD_STRING Radar
4730: PPUSH
4731: LD_INT 2
4733: NEG
4734: PPUSH
4735: CALL_OW 101
4739: GO 4752
// AddMedal ( Radar , - 1 ) ;
4741: LD_STRING Radar
4743: PPUSH
4744: LD_INT 1
4746: NEG
4747: PPUSH
4748: CALL_OW 101
// if radar_builded then
4752: LD_EXP 11
4756: IFFALSE 4778
// begin AddMedal ( BuildRadar , 1 ) ;
4758: LD_STRING BuildRadar
4760: PPUSH
4761: LD_INT 1
4763: PPUSH
4764: CALL_OW 101
// m3 := true ;
4768: LD_ADDR_VAR 0 5
4772: PUSH
4773: LD_INT 1
4775: ST_TO_ADDR
// end else
4776: GO 4789
// AddMedal ( BuildRadar , - 1 ) ;
4778: LD_STRING BuildRadar
4780: PPUSH
4781: LD_INT 1
4783: NEG
4784: PPUSH
4785: CALL_OW 101
// if tick <= 7 7$00 then
4789: LD_OWVAR 1
4793: PUSH
4794: LD_INT 14700
4796: LESSEQUAL
4797: IFFALSE 4806
// SetAchievement ( ACH_ASPEED_5 ) ;
4799: LD_STRING ACH_ASPEED_5
4801: PPUSH
4802: CALL_OW 543
// if m1 and m2 and m3 and Difficulty >= 3 then
4806: LD_VAR 0 3
4810: PUSH
4811: LD_VAR 0 4
4815: AND
4816: PUSH
4817: LD_VAR 0 5
4821: AND
4822: PUSH
4823: LD_OWVAR 67
4827: PUSH
4828: LD_INT 3
4830: GREATEREQUAL
4831: AND
4832: IFFALSE 4844
// SetAchievementEX ( ACH_AMER , 5 ) ;
4834: LD_STRING ACH_AMER
4836: PPUSH
4837: LD_INT 5
4839: PPUSH
4840: CALL_OW 564
// GiveMedals ( MAIN ) ;
4844: LD_STRING MAIN
4846: PPUSH
4847: CALL_OW 102
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ;
4851: LD_ADDR_VAR 0 2
4855: PUSH
4856: LD_INT 22
4858: PUSH
4859: LD_INT 1
4861: PUSH
4862: EMPTY
4863: LIST
4864: LIST
4865: PUSH
4866: LD_INT 21
4868: PUSH
4869: LD_INT 1
4871: PUSH
4872: EMPTY
4873: LIST
4874: LIST
4875: PUSH
4876: LD_INT 2
4878: PUSH
4879: LD_INT 25
4881: PUSH
4882: LD_INT 1
4884: PUSH
4885: EMPTY
4886: LIST
4887: LIST
4888: PUSH
4889: LD_INT 25
4891: PUSH
4892: LD_INT 2
4894: PUSH
4895: EMPTY
4896: LIST
4897: LIST
4898: PUSH
4899: LD_INT 25
4901: PUSH
4902: LD_INT 3
4904: PUSH
4905: EMPTY
4906: LIST
4907: LIST
4908: PUSH
4909: LD_INT 25
4911: PUSH
4912: LD_INT 4
4914: PUSH
4915: EMPTY
4916: LIST
4917: LIST
4918: PUSH
4919: EMPTY
4920: LIST
4921: LIST
4922: LIST
4923: LIST
4924: LIST
4925: PUSH
4926: EMPTY
4927: LIST
4928: LIST
4929: LIST
4930: PPUSH
4931: CALL_OW 69
4935: ST_TO_ADDR
// RewardPeople ( tmp ) ;
4936: LD_VAR 0 2
4940: PPUSH
4941: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
4945: LD_EXP 16
4949: PPUSH
4950: LD_EXP 2
4954: PUSH
4955: LD_STRING JMM
4957: STR
4958: PPUSH
4959: CALL_OW 38
// if IsOk ( Gladstone ) then
4963: LD_EXP 17
4967: PPUSH
4968: CALL_OW 302
4972: IFFALSE 4992
// begin SaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
4974: LD_EXP 17
4978: PPUSH
4979: LD_EXP 2
4983: PUSH
4984: LD_STRING Gladstone
4986: STR
4987: PPUSH
4988: CALL_OW 38
// end ; if IsOk ( Denis ) and GetSide ( Denis ) = 1 then
4992: LD_EXP 19
4996: PPUSH
4997: CALL_OW 302
5001: PUSH
5002: LD_EXP 19
5006: PPUSH
5007: CALL_OW 255
5011: PUSH
5012: LD_INT 1
5014: EQUAL
5015: AND
5016: IFFALSE 5046
// begin SaveCharacters ( Denis , mission_prefix & Denis ) ;
5018: LD_EXP 19
5022: PPUSH
5023: LD_EXP 2
5027: PUSH
5028: LD_STRING Denis
5030: STR
5031: PPUSH
5032: CALL_OW 38
// SaveVariable ( true , DenisInDelta ) ;
5036: LD_INT 1
5038: PPUSH
5039: LD_STRING DenisInDelta
5041: PPUSH
5042: CALL_OW 39
// end ; if IsOk ( Lisa ) then
5046: LD_EXP 22
5050: PPUSH
5051: CALL_OW 302
5055: IFFALSE 5075
// begin SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
5057: LD_EXP 22
5061: PPUSH
5062: LD_EXP 2
5066: PUSH
5067: LD_STRING Lisa
5069: STR
5070: PPUSH
5071: CALL_OW 38
// end ; if IsOk ( Frank ) then
5075: LD_EXP 23
5079: PPUSH
5080: CALL_OW 302
5084: IFFALSE 5104
// begin SaveCharacters ( Frank , mission_prefix & Frank ) ;
5086: LD_EXP 23
5090: PPUSH
5091: LD_EXP 2
5095: PUSH
5096: LD_STRING Frank
5098: STR
5099: PPUSH
5100: CALL_OW 38
// end ; if IsOk ( Bobby ) then
5104: LD_EXP 24
5108: PPUSH
5109: CALL_OW 302
5113: IFFALSE 5133
// begin SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
5115: LD_EXP 24
5119: PPUSH
5120: LD_EXP 2
5124: PUSH
5125: LD_STRING Bobby
5127: STR
5128: PPUSH
5129: CALL_OW 38
// end ; if IsOk ( Cyrus ) then
5133: LD_EXP 25
5137: PPUSH
5138: CALL_OW 302
5142: IFFALSE 5162
// begin SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
5144: LD_EXP 25
5148: PPUSH
5149: LD_EXP 2
5153: PUSH
5154: LD_STRING Cyrus
5156: STR
5157: PPUSH
5158: CALL_OW 38
// end ; if IsOk ( Brown ) then
5162: LD_EXP 20
5166: PPUSH
5167: CALL_OW 302
5171: IFFALSE 5191
// begin SaveCharacters ( Brown , mission_prefix & Brown ) ;
5173: LD_EXP 20
5177: PPUSH
5178: LD_EXP 2
5182: PUSH
5183: LD_STRING Brown
5185: STR
5186: PPUSH
5187: CALL_OW 38
// end ; if IsOk ( Donaldson ) then
5191: LD_EXP 21
5195: PPUSH
5196: CALL_OW 302
5200: IFFALSE 5220
// begin SaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
5202: LD_EXP 21
5206: PPUSH
5207: LD_EXP 2
5211: PUSH
5212: LD_STRING Donaldson
5214: STR
5215: PPUSH
5216: CALL_OW 38
// end ; if others then
5220: LD_EXP 26
5224: IFFALSE 5238
// SaveCharacters ( others , othersInDelta ) ;
5226: LD_EXP 26
5230: PPUSH
5231: LD_STRING othersInDelta
5233: PPUSH
5234: CALL_OW 38
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_apeman_engineer ] ] ) then
5238: LD_INT 22
5240: PUSH
5241: LD_INT 1
5243: PUSH
5244: EMPTY
5245: LIST
5246: LIST
5247: PUSH
5248: LD_INT 25
5250: PUSH
5251: LD_INT 16
5253: PUSH
5254: EMPTY
5255: LIST
5256: LIST
5257: PUSH
5258: EMPTY
5259: LIST
5260: LIST
5261: PPUSH
5262: CALL_OW 69
5266: IFFALSE 5304
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_apeman_engineer ] ] ) , apeInDelta ) ;
5268: LD_INT 22
5270: PUSH
5271: LD_INT 1
5273: PUSH
5274: EMPTY
5275: LIST
5276: LIST
5277: PUSH
5278: LD_INT 25
5280: PUSH
5281: LD_INT 16
5283: PUSH
5284: EMPTY
5285: LIST
5286: LIST
5287: PUSH
5288: EMPTY
5289: LIST
5290: LIST
5291: PPUSH
5292: CALL_OW 69
5296: PPUSH
5297: LD_STRING apeInDelta
5299: PPUSH
5300: CALL_OW 38
// tmp := [ ] ;
5304: LD_ADDR_VAR 0 2
5308: PUSH
5309: EMPTY
5310: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) then
5311: LD_INT 22
5313: PUSH
5314: LD_INT 1
5316: PUSH
5317: EMPTY
5318: LIST
5319: LIST
5320: PUSH
5321: LD_INT 21
5323: PUSH
5324: LD_INT 2
5326: PUSH
5327: EMPTY
5328: LIST
5329: LIST
5330: PUSH
5331: EMPTY
5332: LIST
5333: LIST
5334: PPUSH
5335: CALL_OW 69
5339: IFFALSE 5450
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) do
5341: LD_ADDR_VAR 0 1
5345: PUSH
5346: LD_INT 22
5348: PUSH
5349: LD_INT 1
5351: PUSH
5352: EMPTY
5353: LIST
5354: LIST
5355: PUSH
5356: LD_INT 21
5358: PUSH
5359: LD_INT 2
5361: PUSH
5362: EMPTY
5363: LIST
5364: LIST
5365: PUSH
5366: EMPTY
5367: LIST
5368: LIST
5369: PPUSH
5370: CALL_OW 69
5374: PUSH
5375: FOR_IN
5376: IFFALSE 5448
// tmp := tmp ^ [ GetNation ( i ) , GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) ] ;
5378: LD_ADDR_VAR 0 2
5382: PUSH
5383: LD_VAR 0 2
5387: PUSH
5388: LD_VAR 0 1
5392: PPUSH
5393: CALL_OW 248
5397: PUSH
5398: LD_VAR 0 1
5402: PPUSH
5403: CALL_OW 265
5407: PUSH
5408: LD_VAR 0 1
5412: PPUSH
5413: CALL_OW 262
5417: PUSH
5418: LD_VAR 0 1
5422: PPUSH
5423: CALL_OW 263
5427: PUSH
5428: LD_VAR 0 1
5432: PPUSH
5433: CALL_OW 264
5437: PUSH
5438: EMPTY
5439: LIST
5440: LIST
5441: LIST
5442: LIST
5443: LIST
5444: ADD
5445: ST_TO_ADDR
5446: GO 5375
5448: POP
5449: POP
// if tmp then
5450: LD_VAR 0 2
5454: IFFALSE 5468
// SaveVariable ( tmp , vehiclesInDelta ) ;
5456: LD_VAR 0 2
5460: PPUSH
5461: LD_STRING vehiclesInDelta
5463: PPUSH
5464: CALL_OW 39
// tmp := [ ] ;
5468: LD_ADDR_VAR 0 2
5472: PUSH
5473: EMPTY
5474: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) then
5475: LD_INT 22
5477: PUSH
5478: LD_INT 1
5480: PUSH
5481: EMPTY
5482: LIST
5483: LIST
5484: PUSH
5485: LD_INT 21
5487: PUSH
5488: LD_INT 3
5490: PUSH
5491: EMPTY
5492: LIST
5493: LIST
5494: PUSH
5495: EMPTY
5496: LIST
5497: LIST
5498: PPUSH
5499: CALL_OW 69
5503: IFFALSE 5656
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) do
5505: LD_ADDR_VAR 0 1
5509: PUSH
5510: LD_INT 22
5512: PUSH
5513: LD_INT 1
5515: PUSH
5516: EMPTY
5517: LIST
5518: LIST
5519: PUSH
5520: LD_INT 21
5522: PUSH
5523: LD_INT 3
5525: PUSH
5526: EMPTY
5527: LIST
5528: LIST
5529: PUSH
5530: EMPTY
5531: LIST
5532: LIST
5533: PPUSH
5534: CALL_OW 69
5538: PUSH
5539: FOR_IN
5540: IFFALSE 5654
// tmp := tmp ^ [ [ GetBType ( i ) , GetBLevel ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) , GetBWeapon ( i ) ] ] ;
5542: LD_ADDR_VAR 0 2
5546: PUSH
5547: LD_VAR 0 2
5551: PUSH
5552: LD_VAR 0 1
5556: PPUSH
5557: CALL_OW 266
5561: PUSH
5562: LD_VAR 0 1
5566: PPUSH
5567: CALL_OW 267
5571: PUSH
5572: LD_VAR 0 1
5576: PPUSH
5577: CALL_OW 250
5581: PUSH
5582: LD_VAR 0 1
5586: PPUSH
5587: CALL_OW 251
5591: PUSH
5592: LD_VAR 0 1
5596: PPUSH
5597: CALL_OW 254
5601: PUSH
5602: LD_VAR 0 1
5606: PPUSH
5607: LD_INT 1
5609: PPUSH
5610: CALL_OW 268
5614: PUSH
5615: LD_VAR 0 1
5619: PPUSH
5620: LD_INT 2
5622: PPUSH
5623: CALL_OW 268
5627: PUSH
5628: LD_VAR 0 1
5632: PPUSH
5633: CALL_OW 269
5637: PUSH
5638: EMPTY
5639: LIST
5640: LIST
5641: LIST
5642: LIST
5643: LIST
5644: LIST
5645: LIST
5646: LIST
5647: PUSH
5648: EMPTY
5649: LIST
5650: ADD
5651: ST_TO_ADDR
5652: GO 5539
5654: POP
5655: POP
// if tmp then
5656: LD_VAR 0 2
5660: IFFALSE 5674
// SaveVariable ( tmp , buildingsInDelta ) ;
5662: LD_VAR 0 2
5666: PPUSH
5667: LD_STRING buildingsInDelta
5669: PPUSH
5670: CALL_OW 39
// YouWin ;
5674: CALL_OW 103
// end ; end_of_file
5678: PPOPN 5
5680: END
// export function PrepareArabianTroops ( amount , skill , area ) ; var i , un , tmp ; begin
5681: LD_INT 0
5683: PPUSH
5684: PPUSH
5685: PPUSH
5686: PPUSH
// InitHc ;
5687: CALL_OW 19
// InitUc ;
5691: CALL_OW 18
// uc_side := 2 ;
5695: LD_ADDR_OWVAR 20
5699: PUSH
5700: LD_INT 2
5702: ST_TO_ADDR
// uc_nation := 2 ;
5703: LD_ADDR_OWVAR 21
5707: PUSH
5708: LD_INT 2
5710: ST_TO_ADDR
// if not amount then
5711: LD_VAR 0 1
5715: NOT
5716: IFFALSE 5720
// exit ;
5718: GO 5843
// for i = 1 to amount do
5720: LD_ADDR_VAR 0 5
5724: PUSH
5725: DOUBLE
5726: LD_INT 1
5728: DEC
5729: ST_TO_ADDR
5730: LD_VAR 0 1
5734: PUSH
5735: FOR_TO
5736: IFFALSE 5831
// begin PrepareHuman ( false , 1 , skill ) ;
5738: LD_INT 0
5740: PPUSH
5741: LD_INT 1
5743: PPUSH
5744: LD_VAR 0 2
5748: PPUSH
5749: CALL_OW 380
// un := CreateHuman ;
5753: LD_ADDR_VAR 0 6
5757: PUSH
5758: CALL_OW 44
5762: ST_TO_ADDR
// tmp := Insert ( tmp , 1 , un ) ;
5763: LD_ADDR_VAR 0 7
5767: PUSH
5768: LD_VAR 0 7
5772: PPUSH
5773: LD_INT 1
5775: PPUSH
5776: LD_VAR 0 6
5780: PPUSH
5781: CALL_OW 2
5785: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
5786: LD_VAR 0 6
5790: PPUSH
5791: LD_VAR 0 3
5795: PPUSH
5796: LD_INT 0
5798: PPUSH
5799: CALL_OW 49
// if i mod 2 = 0 then
5803: LD_VAR 0 5
5807: PUSH
5808: LD_INT 2
5810: MOD
5811: PUSH
5812: LD_INT 0
5814: EQUAL
5815: IFFALSE 5829
// SetTag ( un , 11 ) ;
5817: LD_VAR 0 6
5821: PPUSH
5822: LD_INT 11
5824: PPUSH
5825: CALL_OW 109
// end ;
5829: GO 5735
5831: POP
5832: POP
// result := tmp ;
5833: LD_ADDR_VAR 0 4
5837: PUSH
5838: LD_VAR 0 7
5842: ST_TO_ADDR
// end ;
5843: LD_VAR 0 4
5847: RET
// export ar_forces , ap_killers ; every 0 0$1 trigger Delta do var i , timer , more_troops , skill , eng , un , veh , force ;
5848: LD_EXP 6
5852: IFFALSE 6755
5854: GO 5856
5856: DISABLE
5857: LD_INT 0
5859: PPUSH
5860: PPUSH
5861: PPUSH
5862: PPUSH
5863: PPUSH
5864: PPUSH
5865: PPUSH
5866: PPUSH
// begin more_troops := false ;
5867: LD_ADDR_VAR 0 3
5871: PUSH
5872: LD_INT 0
5874: ST_TO_ADDR
// skill := [ 3 , 4 , 5 , 5 ] [ Difficulty ] ;
5875: LD_ADDR_VAR 0 4
5879: PUSH
5880: LD_INT 3
5882: PUSH
5883: LD_INT 4
5885: PUSH
5886: LD_INT 5
5888: PUSH
5889: LD_INT 5
5891: PUSH
5892: EMPTY
5893: LIST
5894: LIST
5895: LIST
5896: LIST
5897: PUSH
5898: LD_OWVAR 67
5902: ARRAY
5903: ST_TO_ADDR
// timer := [ 5 5$00 , 4 4$00 , 3 3$00 , 2 2$30 ] [ Difficulty ] ;
5904: LD_ADDR_VAR 0 2
5908: PUSH
5909: LD_INT 10500
5911: PUSH
5912: LD_INT 8400
5914: PUSH
5915: LD_INT 6300
5917: PUSH
5918: LD_INT 5250
5920: PUSH
5921: EMPTY
5922: LIST
5923: LIST
5924: LIST
5925: LIST
5926: PUSH
5927: LD_OWVAR 67
5931: ARRAY
5932: ST_TO_ADDR
// force := [ ] ;
5933: LD_ADDR_VAR 0 8
5937: PUSH
5938: EMPTY
5939: ST_TO_ADDR
// ar_forces := [ ] ;
5940: LD_ADDR_EXP 27
5944: PUSH
5945: EMPTY
5946: ST_TO_ADDR
// ap_killers := [ ] ;
5947: LD_ADDR_EXP 28
5951: PUSH
5952: EMPTY
5953: ST_TO_ADDR
// Wait ( timer ) ;
5954: LD_VAR 0 2
5958: PPUSH
5959: CALL_OW 67
// if Denis and GetSide ( Denis ) = 4 then
5963: LD_EXP 19
5967: PUSH
5968: LD_EXP 19
5972: PPUSH
5973: CALL_OW 255
5977: PUSH
5978: LD_INT 4
5980: EQUAL
5981: AND
5982: IFFALSE 5991
// Wait ( 0 0$45 ) ;
5984: LD_INT 1575
5986: PPUSH
5987: CALL_OW 67
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_armoury ] ] ) then
5991: LD_INT 22
5993: PUSH
5994: LD_INT 1
5996: PUSH
5997: EMPTY
5998: LIST
5999: LIST
6000: PUSH
6001: LD_INT 30
6003: PUSH
6004: LD_INT 4
6006: PUSH
6007: EMPTY
6008: LIST
6009: LIST
6010: PUSH
6011: EMPTY
6012: LIST
6013: LIST
6014: PPUSH
6015: CALL_OW 69
6019: IFFALSE 6036
// begin Wait ( 1 1$25 ) ;
6021: LD_INT 2975
6023: PPUSH
6024: CALL_OW 67
// more_troops := true ;
6028: LD_ADDR_VAR 0 3
6032: PUSH
6033: LD_INT 1
6035: ST_TO_ADDR
// end ; if more_troops then
6036: LD_VAR 0 3
6040: IFFALSE 6236
// begin force := PrepareArabianTroops ( [ 4 , 5 , 6 , 7 ] [ Difficulty ] , skill , arArea2 ) ;
6042: LD_ADDR_VAR 0 8
6046: PUSH
6047: LD_INT 4
6049: PUSH
6050: LD_INT 5
6052: PUSH
6053: LD_INT 6
6055: PUSH
6056: LD_INT 7
6058: PUSH
6059: EMPTY
6060: LIST
6061: LIST
6062: LIST
6063: LIST
6064: PUSH
6065: LD_OWVAR 67
6069: ARRAY
6070: PPUSH
6071: LD_VAR 0 4
6075: PPUSH
6076: LD_INT 14
6078: PPUSH
6079: CALL 5681 0 3
6083: ST_TO_ADDR
// veh := PrepareTank ( 2 , 3 , ru_medium_tracked , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_heavy_machine_gun , ru_gatling_gun , ru_gun ] [ Difficulty ] , 90 ) ;
6084: LD_ADDR_VAR 0 7
6088: PUSH
6089: LD_INT 2
6091: PPUSH
6092: LD_INT 3
6094: PPUSH
6095: LD_INT 22
6097: PPUSH
6098: LD_INT 1
6100: PPUSH
6101: LD_INT 1
6103: PPUSH
6104: LD_INT 42
6106: PUSH
6107: LD_INT 42
6109: PUSH
6110: LD_INT 43
6112: PUSH
6113: LD_INT 44
6115: PUSH
6116: EMPTY
6117: LIST
6118: LIST
6119: LIST
6120: LIST
6121: PUSH
6122: LD_OWVAR 67
6126: ARRAY
6127: PPUSH
6128: LD_INT 90
6130: PPUSH
6131: CALL 431 0 7
6135: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
6136: LD_VAR 0 7
6140: PPUSH
6141: LD_INT 4
6143: PPUSH
6144: CALL_OW 233
// PlaceUnitArea ( veh , arArea1 , false ) ;
6148: LD_VAR 0 7
6152: PPUSH
6153: LD_INT 13
6155: PPUSH
6156: LD_INT 0
6158: PPUSH
6159: CALL_OW 49
// uc_side := 2 ;
6163: LD_ADDR_OWVAR 20
6167: PUSH
6168: LD_INT 2
6170: ST_TO_ADDR
// uc_nation := 2 ;
6171: LD_ADDR_OWVAR 21
6175: PUSH
6176: LD_INT 2
6178: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
6179: LD_INT 0
6181: PPUSH
6182: LD_INT 1
6184: PPUSH
6185: LD_VAR 0 4
6189: PPUSH
6190: CALL_OW 380
// un := CreateHuman ;
6194: LD_ADDR_VAR 0 6
6198: PUSH
6199: CALL_OW 44
6203: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6204: LD_VAR 0 6
6208: PPUSH
6209: LD_VAR 0 7
6213: PPUSH
6214: CALL_OW 52
// force := force ^ un ;
6218: LD_ADDR_VAR 0 8
6222: PUSH
6223: LD_VAR 0 8
6227: PUSH
6228: LD_VAR 0 6
6232: ADD
6233: ST_TO_ADDR
// end else
6234: GO 6278
// begin force := PrepareArabianTroops ( [ 3 , 4 , 5 , 6 ] [ Difficulty ] , skill , arArea2 ) ;
6236: LD_ADDR_VAR 0 8
6240: PUSH
6241: LD_INT 3
6243: PUSH
6244: LD_INT 4
6246: PUSH
6247: LD_INT 5
6249: PUSH
6250: LD_INT 6
6252: PUSH
6253: EMPTY
6254: LIST
6255: LIST
6256: LIST
6257: LIST
6258: PUSH
6259: LD_OWVAR 67
6263: ARRAY
6264: PPUSH
6265: LD_VAR 0 4
6269: PPUSH
6270: LD_INT 14
6272: PPUSH
6273: CALL 5681 0 3
6277: ST_TO_ADDR
// end ; if force then
6278: LD_VAR 0 8
6282: IFFALSE 6294
// ar_forces := force ;
6284: LD_ADDR_EXP 27
6288: PUSH
6289: LD_VAR 0 8
6293: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
6294: LD_INT 35
6296: PPUSH
6297: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) = 0 ;
6301: LD_INT 22
6303: PUSH
6304: LD_INT 2
6306: PUSH
6307: EMPTY
6308: LIST
6309: LIST
6310: PUSH
6311: LD_INT 21
6313: PUSH
6314: LD_INT 1
6316: PUSH
6317: EMPTY
6318: LIST
6319: LIST
6320: PUSH
6321: EMPTY
6322: LIST
6323: LIST
6324: PPUSH
6325: CALL_OW 69
6329: PUSH
6330: LD_INT 0
6332: EQUAL
6333: IFFALSE 6294
// Wait ( timer ) ;
6335: LD_VAR 0 2
6339: PPUSH
6340: CALL_OW 67
// force := PrepareArabianTroops ( [ 4 , 5 , 6 , 7 ] [ Difficulty ] , skill , [ arArea1 , arArea2 ] [ rand ( 1 , 2 ) ] ) ;
6344: LD_ADDR_VAR 0 8
6348: PUSH
6349: LD_INT 4
6351: PUSH
6352: LD_INT 5
6354: PUSH
6355: LD_INT 6
6357: PUSH
6358: LD_INT 7
6360: PUSH
6361: EMPTY
6362: LIST
6363: LIST
6364: LIST
6365: LIST
6366: PUSH
6367: LD_OWVAR 67
6371: ARRAY
6372: PPUSH
6373: LD_VAR 0 4
6377: PPUSH
6378: LD_INT 13
6380: PUSH
6381: LD_INT 14
6383: PUSH
6384: EMPTY
6385: LIST
6386: LIST
6387: PUSH
6388: LD_INT 1
6390: PPUSH
6391: LD_INT 2
6393: PPUSH
6394: CALL_OW 12
6398: ARRAY
6399: PPUSH
6400: CALL 5681 0 3
6404: ST_TO_ADDR
// if Difficulty > 1 and Delta then
6405: LD_OWVAR 67
6409: PUSH
6410: LD_INT 1
6412: GREATER
6413: PUSH
6414: LD_EXP 6
6418: AND
6419: IFFALSE 6498
// begin uc_side := 2 ;
6421: LD_ADDR_OWVAR 20
6425: PUSH
6426: LD_INT 2
6428: ST_TO_ADDR
// uc_nation := 2 ;
6429: LD_ADDR_OWVAR 21
6433: PUSH
6434: LD_INT 2
6436: ST_TO_ADDR
// PrepareHuman ( false , 2 , skill ) ;
6437: LD_INT 0
6439: PPUSH
6440: LD_INT 2
6442: PPUSH
6443: LD_VAR 0 4
6447: PPUSH
6448: CALL_OW 380
// eng := CreateHuman ;
6452: LD_ADDR_VAR 0 5
6456: PUSH
6457: CALL_OW 44
6461: ST_TO_ADDR
// PlaceUnitArea ( eng , arArea1 , false ) ;
6462: LD_VAR 0 5
6466: PPUSH
6467: LD_INT 13
6469: PPUSH
6470: LD_INT 0
6472: PPUSH
6473: CALL_OW 49
// Wait ( 3 ) ;
6477: LD_INT 3
6479: PPUSH
6480: CALL_OW 67
// AddComEnterUnit ( eng , Delta ) ;
6484: LD_VAR 0 5
6488: PPUSH
6489: LD_EXP 6
6493: PPUSH
6494: CALL_OW 180
// end ; if force then
6498: LD_VAR 0 8
6502: IFFALSE 6514
// ar_forces := force ;
6504: LD_ADDR_EXP 27
6508: PUSH
6509: LD_VAR 0 8
6513: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
6514: LD_INT 35
6516: PPUSH
6517: CALL_OW 67
// if eng then
6521: LD_VAR 0 5
6525: IFFALSE 6579
// if GetSide ( Delta ) = 2 and IsOk ( eng ) and not IsInUnit ( eng ) then
6527: LD_EXP 6
6531: PPUSH
6532: CALL_OW 255
6536: PUSH
6537: LD_INT 2
6539: EQUAL
6540: PUSH
6541: LD_VAR 0 5
6545: PPUSH
6546: CALL_OW 302
6550: AND
6551: PUSH
6552: LD_VAR 0 5
6556: PPUSH
6557: CALL_OW 310
6561: NOT
6562: AND
6563: IFFALSE 6579
// ComEnterUnit ( eng , Delta ) ;
6565: LD_VAR 0 5
6569: PPUSH
6570: LD_EXP 6
6574: PPUSH
6575: CALL_OW 120
// until FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) = 0 ;
6579: LD_INT 22
6581: PUSH
6582: LD_INT 2
6584: PUSH
6585: EMPTY
6586: LIST
6587: LIST
6588: PUSH
6589: LD_INT 21
6591: PUSH
6592: LD_INT 1
6594: PUSH
6595: EMPTY
6596: LIST
6597: LIST
6598: PUSH
6599: EMPTY
6600: LIST
6601: LIST
6602: PPUSH
6603: CALL_OW 69
6607: PUSH
6608: LD_INT 0
6610: EQUAL
6611: IFFALSE 6514
// Wait ( 2 2$00 ) ;
6613: LD_INT 4200
6615: PPUSH
6616: CALL_OW 67
// ap_killers := PrepareArabianTroops ( [ 1 , 2 , 2 , 2 ] [ Difficulty ] , skill , arArea1 ) ;
6620: LD_ADDR_EXP 28
6624: PUSH
6625: LD_INT 1
6627: PUSH
6628: LD_INT 2
6630: PUSH
6631: LD_INT 2
6633: PUSH
6634: LD_INT 2
6636: PUSH
6637: EMPTY
6638: LIST
6639: LIST
6640: LIST
6641: LIST
6642: PUSH
6643: LD_OWVAR 67
6647: ARRAY
6648: PPUSH
6649: LD_VAR 0 4
6653: PPUSH
6654: LD_INT 13
6656: PPUSH
6657: CALL 5681 0 3
6661: ST_TO_ADDR
// Wait ( timer * 2 ) ;
6662: LD_VAR 0 2
6666: PUSH
6667: LD_INT 2
6669: MUL
6670: PPUSH
6671: CALL_OW 67
// ar_forces := PrepareArabianTroops ( [ 5 , 6 , 7 , 8 ] [ Difficulty ] , skill , arArea1 ) ^ PrepareArabianTroops ( [ 3 , 4 , 4 , 4 ] [ Difficulty ] , skill , arArea2 ) ;
6675: LD_ADDR_EXP 27
6679: PUSH
6680: LD_INT 5
6682: PUSH
6683: LD_INT 6
6685: PUSH
6686: LD_INT 7
6688: PUSH
6689: LD_INT 8
6691: PUSH
6692: EMPTY
6693: LIST
6694: LIST
6695: LIST
6696: LIST
6697: PUSH
6698: LD_OWVAR 67
6702: ARRAY
6703: PPUSH
6704: LD_VAR 0 4
6708: PPUSH
6709: LD_INT 13
6711: PPUSH
6712: CALL 5681 0 3
6716: PUSH
6717: LD_INT 3
6719: PUSH
6720: LD_INT 4
6722: PUSH
6723: LD_INT 4
6725: PUSH
6726: LD_INT 4
6728: PUSH
6729: EMPTY
6730: LIST
6731: LIST
6732: LIST
6733: LIST
6734: PUSH
6735: LD_OWVAR 67
6739: ARRAY
6740: PPUSH
6741: LD_VAR 0 4
6745: PPUSH
6746: LD_INT 14
6748: PPUSH
6749: CALL 5681 0 3
6753: ADD
6754: ST_TO_ADDR
// end ;
6755: PPOPN 8
6757: END
// every 0 0$03 trigger ar_forces do var i , target ;
6758: LD_EXP 27
6762: IFFALSE 6960
6764: GO 6766
6766: DISABLE
6767: LD_INT 0
6769: PPUSH
6770: PPUSH
// begin enable ;
6771: ENABLE
// if not ar_forces then
6772: LD_EXP 27
6776: NOT
6777: IFFALSE 6781
// exit ;
6779: GO 6960
// if Delta then
6781: LD_EXP 6
6785: IFFALSE 6799
// target := Delta else
6787: LD_ADDR_VAR 0 2
6791: PUSH
6792: LD_EXP 6
6796: ST_TO_ADDR
6797: GO 6809
// target := JMM ;
6799: LD_ADDR_VAR 0 2
6803: PUSH
6804: LD_EXP 16
6808: ST_TO_ADDR
// for i in ar_forces do
6809: LD_ADDR_VAR 0 1
6813: PUSH
6814: LD_EXP 27
6818: PUSH
6819: FOR_IN
6820: IFFALSE 6958
// begin if i in FilterAllUnits ( [ f_driving ] ) then
6822: LD_VAR 0 1
6826: PUSH
6827: LD_INT 55
6829: PUSH
6830: EMPTY
6831: LIST
6832: PPUSH
6833: CALL_OW 69
6837: IN
6838: IFFALSE 6881
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , IsInUnit ( i ) ) ) else
6840: LD_VAR 0 1
6844: PPUSH
6845: LD_INT 22
6847: PUSH
6848: LD_INT 1
6850: PUSH
6851: EMPTY
6852: LIST
6853: LIST
6854: PPUSH
6855: CALL_OW 69
6859: PPUSH
6860: LD_VAR 0 1
6864: PPUSH
6865: CALL_OW 310
6869: PPUSH
6870: CALL_OW 74
6874: PPUSH
6875: CALL_OW 115
6879: GO 6956
// if GetDistUnits ( i , target ) > 30 then
6881: LD_VAR 0 1
6885: PPUSH
6886: LD_VAR 0 2
6890: PPUSH
6891: CALL_OW 296
6895: PUSH
6896: LD_INT 30
6898: GREATER
6899: IFFALSE 6932
// ComAgressiveMove ( i , GetX ( target ) , GetY ( target ) ) else
6901: LD_VAR 0 1
6905: PPUSH
6906: LD_VAR 0 2
6910: PPUSH
6911: CALL_OW 250
6915: PPUSH
6916: LD_VAR 0 2
6920: PPUSH
6921: CALL_OW 251
6925: PPUSH
6926: CALL_OW 114
6930: GO 6956
// Attack ( i , FilterAllUnits ( [ f_enemy , 2 ] ) ) ;
6932: LD_VAR 0 1
6936: PPUSH
6937: LD_INT 81
6939: PUSH
6940: LD_INT 2
6942: PUSH
6943: EMPTY
6944: LIST
6945: LIST
6946: PPUSH
6947: CALL_OW 69
6951: PPUSH
6952: CALL 736 0 2
// end ;
6956: GO 6819
6958: POP
6959: POP
// end ;
6960: PPOPN 2
6962: END
// every 0 0$01 trigger ap_killers do var filter , i , target ;
6963: LD_EXP 28
6967: IFFALSE 7127
6969: GO 6971
6971: DISABLE
6972: LD_INT 0
6974: PPUSH
6975: PPUSH
6976: PPUSH
// begin enable ;
6977: ENABLE
// filter := FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) ;
6978: LD_ADDR_VAR 0 1
6982: PUSH
6983: LD_INT 22
6985: PUSH
6986: LD_INT 0
6988: PUSH
6989: EMPTY
6990: LIST
6991: LIST
6992: PUSH
6993: LD_INT 25
6995: PUSH
6996: LD_INT 12
6998: PUSH
6999: EMPTY
7000: LIST
7001: LIST
7002: PUSH
7003: EMPTY
7004: LIST
7005: LIST
7006: PPUSH
7007: CALL_OW 69
7011: ST_TO_ADDR
// if not filter then
7012: LD_VAR 0 1
7016: NOT
7017: IFFALSE 7044
// begin ar_forces := ar_forces ^ ap_killers ;
7019: LD_ADDR_EXP 27
7023: PUSH
7024: LD_EXP 27
7028: PUSH
7029: LD_EXP 28
7033: ADD
7034: ST_TO_ADDR
// ap_killers := [ ] ;
7035: LD_ADDR_EXP 28
7039: PUSH
7040: EMPTY
7041: ST_TO_ADDR
// exit ;
7042: GO 7127
// end ; for i in ap_killers do
7044: LD_ADDR_VAR 0 2
7048: PUSH
7049: LD_EXP 28
7053: PUSH
7054: FOR_IN
7055: IFFALSE 7125
// begin if not IsOk ( i ) then
7057: LD_VAR 0 2
7061: PPUSH
7062: CALL_OW 302
7066: NOT
7067: IFFALSE 7071
// continue ;
7069: GO 7054
// if not HasTask ( i ) then
7071: LD_VAR 0 2
7075: PPUSH
7076: CALL_OW 314
7080: NOT
7081: IFFALSE 7103
// target := NearestUnitToUnit ( filter , i ) ;
7083: LD_ADDR_VAR 0 3
7087: PUSH
7088: LD_VAR 0 1
7092: PPUSH
7093: LD_VAR 0 2
7097: PPUSH
7098: CALL_OW 74
7102: ST_TO_ADDR
// if target then
7103: LD_VAR 0 3
7107: IFFALSE 7123
// ComAttackUnit ( i , target ) ;
7109: LD_VAR 0 2
7113: PPUSH
7114: LD_VAR 0 3
7118: PPUSH
7119: CALL_OW 115
// end ;
7123: GO 7054
7125: POP
7126: POP
// end ; end_of_file
7127: PPOPN 3
7129: END
// every 0 0$40 + 0 0$2 trigger Delta do var i , counter , cr ;
7130: LD_EXP 6
7134: IFFALSE 7270
7136: GO 7138
7138: DISABLE
7139: LD_INT 0
7141: PPUSH
7142: PPUSH
7143: PPUSH
// begin counter := [ 300 , 250 , 220 , 210 ] [ Difficulty ] ;
7144: LD_ADDR_VAR 0 2
7148: PUSH
7149: LD_INT 300
7151: PUSH
7152: LD_INT 250
7154: PUSH
7155: LD_INT 220
7157: PUSH
7158: LD_INT 210
7160: PUSH
7161: EMPTY
7162: LIST
7163: LIST
7164: LIST
7165: LIST
7166: PUSH
7167: LD_OWVAR 67
7171: ARRAY
7172: ST_TO_ADDR
// CreateCratesArea ( Rand ( 1 , 3 ) , cratesArea , true ) ;
7173: LD_INT 1
7175: PPUSH
7176: LD_INT 3
7178: PPUSH
7179: CALL_OW 12
7183: PPUSH
7184: LD_INT 7
7186: PPUSH
7187: LD_INT 1
7189: PPUSH
7190: CALL_OW 55
// repeat wait ( rand ( 1 1$30 , 2 2$20 ) ) ;
7194: LD_INT 3150
7196: PPUSH
7197: LD_INT 4900
7199: PPUSH
7200: CALL_OW 12
7204: PPUSH
7205: CALL_OW 67
// cr := rand ( 1 , 5 ) ;
7209: LD_ADDR_VAR 0 3
7213: PUSH
7214: LD_INT 1
7216: PPUSH
7217: LD_INT 5
7219: PPUSH
7220: CALL_OW 12
7224: ST_TO_ADDR
// CreateCratesArea ( cr , cratesArea , true ) ;
7225: LD_VAR 0 3
7229: PPUSH
7230: LD_INT 7
7232: PPUSH
7233: LD_INT 1
7235: PPUSH
7236: CALL_OW 55
// counter := counter - cr * 10 ;
7240: LD_ADDR_VAR 0 2
7244: PUSH
7245: LD_VAR 0 2
7249: PUSH
7250: LD_VAR 0 3
7254: PUSH
7255: LD_INT 10
7257: MUL
7258: MINUS
7259: ST_TO_ADDR
// until counter <= 0 ;
7260: LD_VAR 0 2
7264: PUSH
7265: LD_INT 0
7267: LESSEQUAL
7268: IFFALSE 7194
// end ;
7270: PPOPN 3
7272: END
// every 0 0$03 trigger not Delta do var i ;
7273: LD_EXP 6
7277: NOT
7278: IFFALSE 7348
7280: GO 7282
7282: DISABLE
7283: LD_INT 0
7285: PPUSH
// begin for i = 1 to 5 - Difficulty do
7286: LD_ADDR_VAR 0 1
7290: PUSH
7291: DOUBLE
7292: LD_INT 1
7294: DEC
7295: ST_TO_ADDR
7296: LD_INT 5
7298: PUSH
7299: LD_OWVAR 67
7303: MINUS
7304: PUSH
7305: FOR_TO
7306: IFFALSE 7346
// begin CreateCratesArea ( rand ( 2 , 5 ) , deltaMainArea , true ) ;
7308: LD_INT 2
7310: PPUSH
7311: LD_INT 5
7313: PPUSH
7314: CALL_OW 12
7318: PPUSH
7319: LD_INT 8
7321: PPUSH
7322: LD_INT 1
7324: PPUSH
7325: CALL_OW 55
// Wait ( rand ( 0 0$16 , 0 0$39 ) ) ;
7329: LD_INT 560
7331: PPUSH
7332: LD_INT 1365
7334: PPUSH
7335: CALL_OW 12
7339: PPUSH
7340: CALL_OW 67
// end ;
7344: GO 7305
7346: POP
7347: POP
// end ;
7348: PPOPN 1
7350: END
// every 3 3$00 trigger tick < 15 15$00 do
7351: LD_OWVAR 1
7355: PUSH
7356: LD_INT 31500
7358: LESS
7359: IFFALSE 7419
7361: GO 7363
7363: DISABLE
// begin enable ;
7364: ENABLE
// CreateCratesAnyWhere ( rand ( 1 , 3 ) , true ) ;
7365: LD_INT 1
7367: PPUSH
7368: LD_INT 3
7370: PPUSH
7371: CALL_OW 12
7375: PPUSH
7376: LD_INT 1
7378: PPUSH
7379: CALL_OW 57
// Wait ( rand ( 0 0$38 , 0 0$59 ) ) ;
7383: LD_INT 1330
7385: PPUSH
7386: LD_INT 2065
7388: PPUSH
7389: CALL_OW 12
7393: PPUSH
7394: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 4 ) , riverArea , true ) ;
7398: LD_INT 1
7400: PPUSH
7401: LD_INT 4
7403: PPUSH
7404: CALL_OW 12
7408: PPUSH
7409: LD_INT 15
7411: PPUSH
7412: LD_INT 1
7414: PPUSH
7415: CALL_OW 55
// end ; end_of_file
7419: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
7420: LD_VAR 0 1
7424: PPUSH
7425: CALL 22415 0 1
// if un = JMM then
7429: LD_VAR 0 1
7433: PUSH
7434: LD_EXP 16
7438: EQUAL
7439: IFFALSE 7448
// YouLost ( JMM ) ;
7441: LD_STRING JMM
7443: PPUSH
7444: CALL_OW 104
// if un = Delta then
7448: LD_VAR 0 1
7452: PUSH
7453: LD_EXP 6
7457: EQUAL
7458: IFFALSE 7481
// begin Delta := 0 ;
7460: LD_ADDR_EXP 6
7464: PUSH
7465: LD_INT 0
7467: ST_TO_ADDR
// SetRestrict ( b_depot , 1 , true ) ;
7468: LD_INT 0
7470: PPUSH
7471: LD_INT 1
7473: PPUSH
7474: LD_INT 1
7476: PPUSH
7477: CALL_OW 324
// end ; if un in ar_forces then
7481: LD_VAR 0 1
7485: PUSH
7486: LD_EXP 27
7490: IN
7491: IFFALSE 7509
// ar_forces := ar_forces diff un ;
7493: LD_ADDR_EXP 27
7497: PUSH
7498: LD_EXP 27
7502: PUSH
7503: LD_VAR 0 1
7507: DIFF
7508: ST_TO_ADDR
// if un in ap_killers then
7509: LD_VAR 0 1
7513: PUSH
7514: LD_EXP 28
7518: IN
7519: IFFALSE 7537
// ap_killers := ap_killers diff un ;
7521: LD_ADDR_EXP 28
7525: PUSH
7526: LD_EXP 28
7530: PUSH
7531: LD_VAR 0 1
7535: DIFF
7536: ST_TO_ADDR
// if un in FilterAllUnits ( [ f_or , [ f_class , class_apeman ] , [ f_class , class_apeman_engineer ] ] ) then
7537: LD_VAR 0 1
7541: PUSH
7542: LD_INT 2
7544: PUSH
7545: LD_INT 25
7547: PUSH
7548: LD_INT 12
7550: PUSH
7551: EMPTY
7552: LIST
7553: LIST
7554: PUSH
7555: LD_INT 25
7557: PUSH
7558: LD_INT 16
7560: PUSH
7561: EMPTY
7562: LIST
7563: LIST
7564: PUSH
7565: EMPTY
7566: LIST
7567: LIST
7568: LIST
7569: PPUSH
7570: CALL_OW 69
7574: IN
7575: IFFALSE 7591
// apeKillCounter := apeKillCounter + 1 ;
7577: LD_ADDR_EXP 15
7581: PUSH
7582: LD_EXP 15
7586: PUSH
7587: LD_INT 1
7589: PLUS
7590: ST_TO_ADDR
// end ;
7591: PPOPN 1
7593: END
// on VehicleConstructed ( veh , fac ) do begin SOS_VehicleConstructed ( veh , fac ) ;
7594: LD_VAR 0 1
7598: PPUSH
7599: LD_VAR 0 2
7603: PPUSH
7604: CALL 22537 0 2
// end ;
7608: PPOPN 2
7610: END
// on Contact ( s1 , s2 ) do begin if s1 = 1 and s2 = 2 and not arab_spotted then
7611: LD_VAR 0 1
7615: PUSH
7616: LD_INT 1
7618: EQUAL
7619: PUSH
7620: LD_VAR 0 2
7624: PUSH
7625: LD_INT 2
7627: EQUAL
7628: AND
7629: PUSH
7630: LD_EXP 13
7634: NOT
7635: AND
7636: IFFALSE 7646
// arab_spotted := true ;
7638: LD_ADDR_EXP 13
7642: PUSH
7643: LD_INT 1
7645: ST_TO_ADDR
// end ;
7646: PPOPN 2
7648: END
// on EndTheMissionRaised ( p ) do begin end_the_mission_allowed := false ;
7649: LD_ADDR_OWVAR 57
7653: PUSH
7654: LD_INT 0
7656: ST_TO_ADDR
// end_mission := true ;
7657: LD_ADDR_EXP 14
7661: PUSH
7662: LD_INT 1
7664: ST_TO_ADDR
// end ;
7665: PPOPN 1
7667: END
// on ApemanTamed ( apeman , sci ) do begin if GetSide ( sci ) = 1 then
7668: LD_VAR 0 2
7672: PPUSH
7673: CALL_OW 255
7677: PUSH
7678: LD_INT 1
7680: EQUAL
7681: IFFALSE 7697
// apeman_counter := apeman_counter + 1 ;
7683: LD_ADDR_EXP 12
7687: PUSH
7688: LD_EXP 12
7692: PUSH
7693: LD_INT 1
7695: PLUS
7696: ST_TO_ADDR
// if not first_apeman_tamed then
7697: LD_EXP 8
7701: NOT
7702: IFFALSE 7902
// begin first_apeman_tamed := true ;
7704: LD_ADDR_EXP 8
7708: PUSH
7709: LD_INT 1
7711: ST_TO_ADDR
// if sci = Gladstone then
7712: LD_VAR 0 2
7716: PUSH
7717: LD_EXP 17
7721: EQUAL
7722: IFFALSE 7736
// Say ( Gladstone , D7b-Glad-1 ) ;
7724: LD_EXP 17
7728: PPUSH
7729: LD_STRING D7b-Glad-1
7731: PPUSH
7732: CALL_OW 88
// if sci = Denis then
7736: LD_VAR 0 2
7740: PUSH
7741: LD_EXP 19
7745: EQUAL
7746: IFFALSE 7760
// Say ( Denis , D7a-Den-1 ) ;
7748: LD_EXP 19
7752: PPUSH
7753: LD_STRING D7a-Den-1
7755: PPUSH
7756: CALL_OW 88
// if not sci in [ JMM , Gladstone , Denis , Lisa , Frank , Bobby , Cyrus , Donaldson ] then
7760: LD_VAR 0 2
7764: PUSH
7765: LD_EXP 16
7769: PUSH
7770: LD_EXP 17
7774: PUSH
7775: LD_EXP 19
7779: PUSH
7780: LD_EXP 22
7784: PUSH
7785: LD_EXP 23
7789: PUSH
7790: LD_EXP 24
7794: PUSH
7795: LD_EXP 25
7799: PUSH
7800: LD_EXP 21
7804: PUSH
7805: EMPTY
7806: LIST
7807: LIST
7808: LIST
7809: LIST
7810: LIST
7811: LIST
7812: LIST
7813: LIST
7814: IN
7815: NOT
7816: IFFALSE 7859
// begin if GetSex ( sci ) = sex_male then
7818: LD_VAR 0 2
7822: PPUSH
7823: CALL_OW 258
7827: PUSH
7828: LD_INT 1
7830: EQUAL
7831: IFFALSE 7847
// Say ( sci , D7c-Sci1-1 ) else
7833: LD_VAR 0 2
7837: PPUSH
7838: LD_STRING D7c-Sci1-1
7840: PPUSH
7841: CALL_OW 88
7845: GO 7859
// Say ( sci , D7c-FSci1-1 ) ;
7847: LD_VAR 0 2
7851: PPUSH
7852: LD_STRING D7c-FSci1-1
7854: PPUSH
7855: CALL_OW 88
// end ; if not sci = Gladstone then
7859: LD_VAR 0 2
7863: PUSH
7864: LD_EXP 17
7868: EQUAL
7869: NOT
7870: IFFALSE 7884
// Say ( Gladstone , D7c-Glad-1 ) ;
7872: LD_EXP 17
7876: PPUSH
7877: LD_STRING D7c-Glad-1
7879: PPUSH
7880: CALL_OW 88
// if Lisa then
7884: LD_EXP 22
7888: IFFALSE 7902
// Say ( Lisa , D8-Lisa-1 ) ;
7890: LD_EXP 22
7894: PPUSH
7895: LD_STRING D8-Lisa-1
7897: PPUSH
7898: CALL_OW 88
// end ; end ; end_of_file
7902: PPOPN 2
7904: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner , ru_flamethrower ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
7905: LD_INT 0
7907: PPUSH
// ar_miner := 81 ;
7908: LD_ADDR_EXP 36
7912: PUSH
7913: LD_INT 81
7915: ST_TO_ADDR
// ar_crane := 88 ;
7916: LD_ADDR_EXP 35
7920: PUSH
7921: LD_INT 88
7923: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
7924: LD_ADDR_EXP 30
7928: PUSH
7929: LD_INT 89
7931: ST_TO_ADDR
// us_hack := 99 ;
7932: LD_ADDR_EXP 31
7936: PUSH
7937: LD_INT 99
7939: ST_TO_ADDR
// us_artillery := 97 ;
7940: LD_ADDR_EXP 32
7944: PUSH
7945: LD_INT 97
7947: ST_TO_ADDR
// ar_bio_bomb := 91 ;
7948: LD_ADDR_EXP 33
7952: PUSH
7953: LD_INT 91
7955: ST_TO_ADDR
// ar_mortar := 92 ;
7956: LD_ADDR_EXP 34
7960: PUSH
7961: LD_INT 92
7963: ST_TO_ADDR
// ru_flamethrower := 93 ;
7964: LD_ADDR_EXP 37
7968: PUSH
7969: LD_INT 93
7971: ST_TO_ADDR
// ru_radar := 98 ;
7972: LD_ADDR_EXP 29
7976: PUSH
7977: LD_INT 98
7979: ST_TO_ADDR
// tech_Artillery := 80 ;
7980: LD_ADDR_EXP 38
7984: PUSH
7985: LD_INT 80
7987: ST_TO_ADDR
// tech_RadMat := 81 ;
7988: LD_ADDR_EXP 39
7992: PUSH
7993: LD_INT 81
7995: ST_TO_ADDR
// tech_BasicTools := 82 ;
7996: LD_ADDR_EXP 40
8000: PUSH
8001: LD_INT 82
8003: ST_TO_ADDR
// tech_Cargo := 83 ;
8004: LD_ADDR_EXP 41
8008: PUSH
8009: LD_INT 83
8011: ST_TO_ADDR
// tech_Track := 84 ;
8012: LD_ADDR_EXP 42
8016: PUSH
8017: LD_INT 84
8019: ST_TO_ADDR
// tech_Crane := 85 ;
8020: LD_ADDR_EXP 43
8024: PUSH
8025: LD_INT 85
8027: ST_TO_ADDR
// tech_Bulldozer := 86 ;
8028: LD_ADDR_EXP 44
8032: PUSH
8033: LD_INT 86
8035: ST_TO_ADDR
// tech_Hovercraft := 87 ;
8036: LD_ADDR_EXP 45
8040: PUSH
8041: LD_INT 87
8043: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
8044: LD_ADDR_EXP 46
8048: PUSH
8049: LD_INT 88
8051: ST_TO_ADDR
// class_mastodont := 31 ;
8052: LD_ADDR_EXP 47
8056: PUSH
8057: LD_INT 31
8059: ST_TO_ADDR
// class_horse := 21 ;
8060: LD_ADDR_EXP 48
8064: PUSH
8065: LD_INT 21
8067: ST_TO_ADDR
// end ;
8068: LD_VAR 0 1
8072: RET
// every 1 do
8073: GO 8075
8075: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
8076: CALL 7905 0 0
8080: END
// every 0 0$1 do
8081: GO 8083
8083: DISABLE
// begin enable ;
8084: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
8085: LD_STRING updateTimer(
8087: PUSH
8088: LD_OWVAR 1
8092: STR
8093: PUSH
8094: LD_STRING );
8096: STR
8097: PPUSH
8098: CALL_OW 559
// end ;
8102: END
// export function SOS_MapStart ( ) ; begin
8103: LD_INT 0
8105: PPUSH
// if streamModeActive then
8106: LD_EXP 49
8110: IFFALSE 8119
// DefineStreamItems ( true ) ;
8112: LD_INT 1
8114: PPUSH
8115: CALL 9769 0 1
// UpdateFactoryWaypoints ( ) ;
8119: CALL 23353 0 0
// end ;
8123: LD_VAR 0 1
8127: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
8128: LD_INT 0
8130: PPUSH
// if p2 = 100 then
8131: LD_VAR 0 2
8135: PUSH
8136: LD_INT 100
8138: EQUAL
8139: IFFALSE 9142
// begin if not StreamModeActive then
8141: LD_EXP 49
8145: NOT
8146: IFFALSE 8156
// StreamModeActive := true ;
8148: LD_ADDR_EXP 49
8152: PUSH
8153: LD_INT 1
8155: ST_TO_ADDR
// if p3 = 0 then
8156: LD_VAR 0 3
8160: PUSH
8161: LD_INT 0
8163: EQUAL
8164: IFFALSE 8170
// InitStreamMode ;
8166: CALL 9305 0 0
// if p3 = 1 then
8170: LD_VAR 0 3
8174: PUSH
8175: LD_INT 1
8177: EQUAL
8178: IFFALSE 8188
// sRocket := true ;
8180: LD_ADDR_EXP 54
8184: PUSH
8185: LD_INT 1
8187: ST_TO_ADDR
// if p3 = 2 then
8188: LD_VAR 0 3
8192: PUSH
8193: LD_INT 2
8195: EQUAL
8196: IFFALSE 8206
// sSpeed := true ;
8198: LD_ADDR_EXP 53
8202: PUSH
8203: LD_INT 1
8205: ST_TO_ADDR
// if p3 = 3 then
8206: LD_VAR 0 3
8210: PUSH
8211: LD_INT 3
8213: EQUAL
8214: IFFALSE 8224
// sEngine := true ;
8216: LD_ADDR_EXP 55
8220: PUSH
8221: LD_INT 1
8223: ST_TO_ADDR
// if p3 = 4 then
8224: LD_VAR 0 3
8228: PUSH
8229: LD_INT 4
8231: EQUAL
8232: IFFALSE 8242
// sSpec := true ;
8234: LD_ADDR_EXP 52
8238: PUSH
8239: LD_INT 1
8241: ST_TO_ADDR
// if p3 = 5 then
8242: LD_VAR 0 3
8246: PUSH
8247: LD_INT 5
8249: EQUAL
8250: IFFALSE 8260
// sLevel := true ;
8252: LD_ADDR_EXP 56
8256: PUSH
8257: LD_INT 1
8259: ST_TO_ADDR
// if p3 = 6 then
8260: LD_VAR 0 3
8264: PUSH
8265: LD_INT 6
8267: EQUAL
8268: IFFALSE 8278
// sArmoury := true ;
8270: LD_ADDR_EXP 57
8274: PUSH
8275: LD_INT 1
8277: ST_TO_ADDR
// if p3 = 7 then
8278: LD_VAR 0 3
8282: PUSH
8283: LD_INT 7
8285: EQUAL
8286: IFFALSE 8296
// sRadar := true ;
8288: LD_ADDR_EXP 58
8292: PUSH
8293: LD_INT 1
8295: ST_TO_ADDR
// if p3 = 8 then
8296: LD_VAR 0 3
8300: PUSH
8301: LD_INT 8
8303: EQUAL
8304: IFFALSE 8314
// sBunker := true ;
8306: LD_ADDR_EXP 59
8310: PUSH
8311: LD_INT 1
8313: ST_TO_ADDR
// if p3 = 9 then
8314: LD_VAR 0 3
8318: PUSH
8319: LD_INT 9
8321: EQUAL
8322: IFFALSE 8332
// sHack := true ;
8324: LD_ADDR_EXP 60
8328: PUSH
8329: LD_INT 1
8331: ST_TO_ADDR
// if p3 = 10 then
8332: LD_VAR 0 3
8336: PUSH
8337: LD_INT 10
8339: EQUAL
8340: IFFALSE 8350
// sFire := true ;
8342: LD_ADDR_EXP 61
8346: PUSH
8347: LD_INT 1
8349: ST_TO_ADDR
// if p3 = 11 then
8350: LD_VAR 0 3
8354: PUSH
8355: LD_INT 11
8357: EQUAL
8358: IFFALSE 8368
// sRefresh := true ;
8360: LD_ADDR_EXP 62
8364: PUSH
8365: LD_INT 1
8367: ST_TO_ADDR
// if p3 = 12 then
8368: LD_VAR 0 3
8372: PUSH
8373: LD_INT 12
8375: EQUAL
8376: IFFALSE 8386
// sExp := true ;
8378: LD_ADDR_EXP 63
8382: PUSH
8383: LD_INT 1
8385: ST_TO_ADDR
// if p3 = 13 then
8386: LD_VAR 0 3
8390: PUSH
8391: LD_INT 13
8393: EQUAL
8394: IFFALSE 8404
// sDepot := true ;
8396: LD_ADDR_EXP 64
8400: PUSH
8401: LD_INT 1
8403: ST_TO_ADDR
// if p3 = 14 then
8404: LD_VAR 0 3
8408: PUSH
8409: LD_INT 14
8411: EQUAL
8412: IFFALSE 8422
// sFlag := true ;
8414: LD_ADDR_EXP 65
8418: PUSH
8419: LD_INT 1
8421: ST_TO_ADDR
// if p3 = 15 then
8422: LD_VAR 0 3
8426: PUSH
8427: LD_INT 15
8429: EQUAL
8430: IFFALSE 8440
// sKamikadze := true ;
8432: LD_ADDR_EXP 73
8436: PUSH
8437: LD_INT 1
8439: ST_TO_ADDR
// if p3 = 16 then
8440: LD_VAR 0 3
8444: PUSH
8445: LD_INT 16
8447: EQUAL
8448: IFFALSE 8458
// sTroll := true ;
8450: LD_ADDR_EXP 74
8454: PUSH
8455: LD_INT 1
8457: ST_TO_ADDR
// if p3 = 17 then
8458: LD_VAR 0 3
8462: PUSH
8463: LD_INT 17
8465: EQUAL
8466: IFFALSE 8476
// sSlow := true ;
8468: LD_ADDR_EXP 75
8472: PUSH
8473: LD_INT 1
8475: ST_TO_ADDR
// if p3 = 18 then
8476: LD_VAR 0 3
8480: PUSH
8481: LD_INT 18
8483: EQUAL
8484: IFFALSE 8494
// sLack := true ;
8486: LD_ADDR_EXP 76
8490: PUSH
8491: LD_INT 1
8493: ST_TO_ADDR
// if p3 = 19 then
8494: LD_VAR 0 3
8498: PUSH
8499: LD_INT 19
8501: EQUAL
8502: IFFALSE 8512
// sTank := true ;
8504: LD_ADDR_EXP 78
8508: PUSH
8509: LD_INT 1
8511: ST_TO_ADDR
// if p3 = 20 then
8512: LD_VAR 0 3
8516: PUSH
8517: LD_INT 20
8519: EQUAL
8520: IFFALSE 8530
// sRemote := true ;
8522: LD_ADDR_EXP 79
8526: PUSH
8527: LD_INT 1
8529: ST_TO_ADDR
// if p3 = 21 then
8530: LD_VAR 0 3
8534: PUSH
8535: LD_INT 21
8537: EQUAL
8538: IFFALSE 8548
// sPowell := true ;
8540: LD_ADDR_EXP 80
8544: PUSH
8545: LD_INT 1
8547: ST_TO_ADDR
// if p3 = 22 then
8548: LD_VAR 0 3
8552: PUSH
8553: LD_INT 22
8555: EQUAL
8556: IFFALSE 8566
// sTeleport := true ;
8558: LD_ADDR_EXP 83
8562: PUSH
8563: LD_INT 1
8565: ST_TO_ADDR
// if p3 = 23 then
8566: LD_VAR 0 3
8570: PUSH
8571: LD_INT 23
8573: EQUAL
8574: IFFALSE 8584
// sOilTower := true ;
8576: LD_ADDR_EXP 85
8580: PUSH
8581: LD_INT 1
8583: ST_TO_ADDR
// if p3 = 24 then
8584: LD_VAR 0 3
8588: PUSH
8589: LD_INT 24
8591: EQUAL
8592: IFFALSE 8602
// sShovel := true ;
8594: LD_ADDR_EXP 86
8598: PUSH
8599: LD_INT 1
8601: ST_TO_ADDR
// if p3 = 25 then
8602: LD_VAR 0 3
8606: PUSH
8607: LD_INT 25
8609: EQUAL
8610: IFFALSE 8620
// sSheik := true ;
8612: LD_ADDR_EXP 87
8616: PUSH
8617: LD_INT 1
8619: ST_TO_ADDR
// if p3 = 26 then
8620: LD_VAR 0 3
8624: PUSH
8625: LD_INT 26
8627: EQUAL
8628: IFFALSE 8638
// sEarthquake := true ;
8630: LD_ADDR_EXP 89
8634: PUSH
8635: LD_INT 1
8637: ST_TO_ADDR
// if p3 = 27 then
8638: LD_VAR 0 3
8642: PUSH
8643: LD_INT 27
8645: EQUAL
8646: IFFALSE 8656
// sAI := true ;
8648: LD_ADDR_EXP 90
8652: PUSH
8653: LD_INT 1
8655: ST_TO_ADDR
// if p3 = 28 then
8656: LD_VAR 0 3
8660: PUSH
8661: LD_INT 28
8663: EQUAL
8664: IFFALSE 8674
// sCargo := true ;
8666: LD_ADDR_EXP 93
8670: PUSH
8671: LD_INT 1
8673: ST_TO_ADDR
// if p3 = 29 then
8674: LD_VAR 0 3
8678: PUSH
8679: LD_INT 29
8681: EQUAL
8682: IFFALSE 8692
// sDLaser := true ;
8684: LD_ADDR_EXP 94
8688: PUSH
8689: LD_INT 1
8691: ST_TO_ADDR
// if p3 = 30 then
8692: LD_VAR 0 3
8696: PUSH
8697: LD_INT 30
8699: EQUAL
8700: IFFALSE 8710
// sExchange := true ;
8702: LD_ADDR_EXP 95
8706: PUSH
8707: LD_INT 1
8709: ST_TO_ADDR
// if p3 = 31 then
8710: LD_VAR 0 3
8714: PUSH
8715: LD_INT 31
8717: EQUAL
8718: IFFALSE 8728
// sFac := true ;
8720: LD_ADDR_EXP 96
8724: PUSH
8725: LD_INT 1
8727: ST_TO_ADDR
// if p3 = 32 then
8728: LD_VAR 0 3
8732: PUSH
8733: LD_INT 32
8735: EQUAL
8736: IFFALSE 8746
// sPower := true ;
8738: LD_ADDR_EXP 97
8742: PUSH
8743: LD_INT 1
8745: ST_TO_ADDR
// if p3 = 33 then
8746: LD_VAR 0 3
8750: PUSH
8751: LD_INT 33
8753: EQUAL
8754: IFFALSE 8764
// sRandom := true ;
8756: LD_ADDR_EXP 98
8760: PUSH
8761: LD_INT 1
8763: ST_TO_ADDR
// if p3 = 34 then
8764: LD_VAR 0 3
8768: PUSH
8769: LD_INT 34
8771: EQUAL
8772: IFFALSE 8782
// sShield := true ;
8774: LD_ADDR_EXP 99
8778: PUSH
8779: LD_INT 1
8781: ST_TO_ADDR
// if p3 = 35 then
8782: LD_VAR 0 3
8786: PUSH
8787: LD_INT 35
8789: EQUAL
8790: IFFALSE 8800
// sTime := true ;
8792: LD_ADDR_EXP 100
8796: PUSH
8797: LD_INT 1
8799: ST_TO_ADDR
// if p3 = 36 then
8800: LD_VAR 0 3
8804: PUSH
8805: LD_INT 36
8807: EQUAL
8808: IFFALSE 8818
// sTools := true ;
8810: LD_ADDR_EXP 101
8814: PUSH
8815: LD_INT 1
8817: ST_TO_ADDR
// if p3 = 101 then
8818: LD_VAR 0 3
8822: PUSH
8823: LD_INT 101
8825: EQUAL
8826: IFFALSE 8836
// sSold := true ;
8828: LD_ADDR_EXP 66
8832: PUSH
8833: LD_INT 1
8835: ST_TO_ADDR
// if p3 = 102 then
8836: LD_VAR 0 3
8840: PUSH
8841: LD_INT 102
8843: EQUAL
8844: IFFALSE 8854
// sDiff := true ;
8846: LD_ADDR_EXP 67
8850: PUSH
8851: LD_INT 1
8853: ST_TO_ADDR
// if p3 = 103 then
8854: LD_VAR 0 3
8858: PUSH
8859: LD_INT 103
8861: EQUAL
8862: IFFALSE 8872
// sFog := true ;
8864: LD_ADDR_EXP 70
8868: PUSH
8869: LD_INT 1
8871: ST_TO_ADDR
// if p3 = 104 then
8872: LD_VAR 0 3
8876: PUSH
8877: LD_INT 104
8879: EQUAL
8880: IFFALSE 8890
// sReset := true ;
8882: LD_ADDR_EXP 71
8886: PUSH
8887: LD_INT 1
8889: ST_TO_ADDR
// if p3 = 105 then
8890: LD_VAR 0 3
8894: PUSH
8895: LD_INT 105
8897: EQUAL
8898: IFFALSE 8908
// sSun := true ;
8900: LD_ADDR_EXP 72
8904: PUSH
8905: LD_INT 1
8907: ST_TO_ADDR
// if p3 = 106 then
8908: LD_VAR 0 3
8912: PUSH
8913: LD_INT 106
8915: EQUAL
8916: IFFALSE 8926
// sTiger := true ;
8918: LD_ADDR_EXP 68
8922: PUSH
8923: LD_INT 1
8925: ST_TO_ADDR
// if p3 = 107 then
8926: LD_VAR 0 3
8930: PUSH
8931: LD_INT 107
8933: EQUAL
8934: IFFALSE 8944
// sBomb := true ;
8936: LD_ADDR_EXP 69
8940: PUSH
8941: LD_INT 1
8943: ST_TO_ADDR
// if p3 = 108 then
8944: LD_VAR 0 3
8948: PUSH
8949: LD_INT 108
8951: EQUAL
8952: IFFALSE 8962
// sWound := true ;
8954: LD_ADDR_EXP 77
8958: PUSH
8959: LD_INT 1
8961: ST_TO_ADDR
// if p3 = 109 then
8962: LD_VAR 0 3
8966: PUSH
8967: LD_INT 109
8969: EQUAL
8970: IFFALSE 8980
// sBetray := true ;
8972: LD_ADDR_EXP 81
8976: PUSH
8977: LD_INT 1
8979: ST_TO_ADDR
// if p3 = 110 then
8980: LD_VAR 0 3
8984: PUSH
8985: LD_INT 110
8987: EQUAL
8988: IFFALSE 8998
// sContamin := true ;
8990: LD_ADDR_EXP 82
8994: PUSH
8995: LD_INT 1
8997: ST_TO_ADDR
// if p3 = 111 then
8998: LD_VAR 0 3
9002: PUSH
9003: LD_INT 111
9005: EQUAL
9006: IFFALSE 9016
// sOil := true ;
9008: LD_ADDR_EXP 84
9012: PUSH
9013: LD_INT 1
9015: ST_TO_ADDR
// if p3 = 112 then
9016: LD_VAR 0 3
9020: PUSH
9021: LD_INT 112
9023: EQUAL
9024: IFFALSE 9034
// sStu := true ;
9026: LD_ADDR_EXP 88
9030: PUSH
9031: LD_INT 1
9033: ST_TO_ADDR
// if p3 = 113 then
9034: LD_VAR 0 3
9038: PUSH
9039: LD_INT 113
9041: EQUAL
9042: IFFALSE 9052
// sBazooka := true ;
9044: LD_ADDR_EXP 91
9048: PUSH
9049: LD_INT 1
9051: ST_TO_ADDR
// if p3 = 114 then
9052: LD_VAR 0 3
9056: PUSH
9057: LD_INT 114
9059: EQUAL
9060: IFFALSE 9070
// sMortar := true ;
9062: LD_ADDR_EXP 92
9066: PUSH
9067: LD_INT 1
9069: ST_TO_ADDR
// if p3 = 115 then
9070: LD_VAR 0 3
9074: PUSH
9075: LD_INT 115
9077: EQUAL
9078: IFFALSE 9088
// sRanger := true ;
9080: LD_ADDR_EXP 102
9084: PUSH
9085: LD_INT 1
9087: ST_TO_ADDR
// if p3 = 116 then
9088: LD_VAR 0 3
9092: PUSH
9093: LD_INT 116
9095: EQUAL
9096: IFFALSE 9106
// sComputer := true ;
9098: LD_ADDR_EXP 103
9102: PUSH
9103: LD_INT 1
9105: ST_TO_ADDR
// if p3 = 117 then
9106: LD_VAR 0 3
9110: PUSH
9111: LD_INT 117
9113: EQUAL
9114: IFFALSE 9124
// s30 := true ;
9116: LD_ADDR_EXP 104
9120: PUSH
9121: LD_INT 1
9123: ST_TO_ADDR
// if p3 = 118 then
9124: LD_VAR 0 3
9128: PUSH
9129: LD_INT 118
9131: EQUAL
9132: IFFALSE 9142
// s60 := true ;
9134: LD_ADDR_EXP 105
9138: PUSH
9139: LD_INT 1
9141: ST_TO_ADDR
// end ; if p2 = 101 then
9142: LD_VAR 0 2
9146: PUSH
9147: LD_INT 101
9149: EQUAL
9150: IFFALSE 9278
// begin case p3 of 1 :
9152: LD_VAR 0 3
9156: PUSH
9157: LD_INT 1
9159: DOUBLE
9160: EQUAL
9161: IFTRUE 9165
9163: GO 9172
9165: POP
// hHackUnlimitedResources ; 2 :
9166: CALL 21376 0 0
9170: GO 9278
9172: LD_INT 2
9174: DOUBLE
9175: EQUAL
9176: IFTRUE 9180
9178: GO 9187
9180: POP
// hHackSetLevel10 ; 3 :
9181: CALL 21509 0 0
9185: GO 9278
9187: LD_INT 3
9189: DOUBLE
9190: EQUAL
9191: IFTRUE 9195
9193: GO 9202
9195: POP
// hHackSetLevel10YourUnits ; 4 :
9196: CALL 21594 0 0
9200: GO 9278
9202: LD_INT 4
9204: DOUBLE
9205: EQUAL
9206: IFTRUE 9210
9208: GO 9217
9210: POP
// hHackInvincible ; 5 :
9211: CALL 22042 0 0
9215: GO 9278
9217: LD_INT 5
9219: DOUBLE
9220: EQUAL
9221: IFTRUE 9225
9223: GO 9232
9225: POP
// hHackInvisible ; 6 :
9226: CALL 22153 0 0
9230: GO 9278
9232: LD_INT 6
9234: DOUBLE
9235: EQUAL
9236: IFTRUE 9240
9238: GO 9247
9240: POP
// hHackChangeYourSide ; 7 :
9241: CALL 22210 0 0
9245: GO 9278
9247: LD_INT 7
9249: DOUBLE
9250: EQUAL
9251: IFTRUE 9255
9253: GO 9262
9255: POP
// hHackChangeUnitSide ; 8 :
9256: CALL 22252 0 0
9260: GO 9278
9262: LD_INT 8
9264: DOUBLE
9265: EQUAL
9266: IFTRUE 9270
9268: GO 9277
9270: POP
// hHackFog ; end ;
9271: CALL 22353 0 0
9275: GO 9278
9277: POP
// end ; end ;
9278: LD_VAR 0 7
9282: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
9283: GO 9285
9285: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
9286: LD_STRING initStreamRollete();
9288: PPUSH
9289: CALL_OW 559
// InitStreamMode ;
9293: CALL 9305 0 0
// DefineStreamItems ( false ) ;
9297: LD_INT 0
9299: PPUSH
9300: CALL 9769 0 1
// end ;
9304: END
// function InitStreamMode ; begin
9305: LD_INT 0
9307: PPUSH
// streamModeActive := false ;
9308: LD_ADDR_EXP 49
9312: PUSH
9313: LD_INT 0
9315: ST_TO_ADDR
// normalCounter := 36 ;
9316: LD_ADDR_EXP 50
9320: PUSH
9321: LD_INT 36
9323: ST_TO_ADDR
// hardcoreCounter := 18 ;
9324: LD_ADDR_EXP 51
9328: PUSH
9329: LD_INT 18
9331: ST_TO_ADDR
// sRocket := false ;
9332: LD_ADDR_EXP 54
9336: PUSH
9337: LD_INT 0
9339: ST_TO_ADDR
// sSpeed := false ;
9340: LD_ADDR_EXP 53
9344: PUSH
9345: LD_INT 0
9347: ST_TO_ADDR
// sEngine := false ;
9348: LD_ADDR_EXP 55
9352: PUSH
9353: LD_INT 0
9355: ST_TO_ADDR
// sSpec := false ;
9356: LD_ADDR_EXP 52
9360: PUSH
9361: LD_INT 0
9363: ST_TO_ADDR
// sLevel := false ;
9364: LD_ADDR_EXP 56
9368: PUSH
9369: LD_INT 0
9371: ST_TO_ADDR
// sArmoury := false ;
9372: LD_ADDR_EXP 57
9376: PUSH
9377: LD_INT 0
9379: ST_TO_ADDR
// sRadar := false ;
9380: LD_ADDR_EXP 58
9384: PUSH
9385: LD_INT 0
9387: ST_TO_ADDR
// sBunker := false ;
9388: LD_ADDR_EXP 59
9392: PUSH
9393: LD_INT 0
9395: ST_TO_ADDR
// sHack := false ;
9396: LD_ADDR_EXP 60
9400: PUSH
9401: LD_INT 0
9403: ST_TO_ADDR
// sFire := false ;
9404: LD_ADDR_EXP 61
9408: PUSH
9409: LD_INT 0
9411: ST_TO_ADDR
// sRefresh := false ;
9412: LD_ADDR_EXP 62
9416: PUSH
9417: LD_INT 0
9419: ST_TO_ADDR
// sExp := false ;
9420: LD_ADDR_EXP 63
9424: PUSH
9425: LD_INT 0
9427: ST_TO_ADDR
// sDepot := false ;
9428: LD_ADDR_EXP 64
9432: PUSH
9433: LD_INT 0
9435: ST_TO_ADDR
// sFlag := false ;
9436: LD_ADDR_EXP 65
9440: PUSH
9441: LD_INT 0
9443: ST_TO_ADDR
// sKamikadze := false ;
9444: LD_ADDR_EXP 73
9448: PUSH
9449: LD_INT 0
9451: ST_TO_ADDR
// sTroll := false ;
9452: LD_ADDR_EXP 74
9456: PUSH
9457: LD_INT 0
9459: ST_TO_ADDR
// sSlow := false ;
9460: LD_ADDR_EXP 75
9464: PUSH
9465: LD_INT 0
9467: ST_TO_ADDR
// sLack := false ;
9468: LD_ADDR_EXP 76
9472: PUSH
9473: LD_INT 0
9475: ST_TO_ADDR
// sTank := false ;
9476: LD_ADDR_EXP 78
9480: PUSH
9481: LD_INT 0
9483: ST_TO_ADDR
// sRemote := false ;
9484: LD_ADDR_EXP 79
9488: PUSH
9489: LD_INT 0
9491: ST_TO_ADDR
// sPowell := false ;
9492: LD_ADDR_EXP 80
9496: PUSH
9497: LD_INT 0
9499: ST_TO_ADDR
// sTeleport := false ;
9500: LD_ADDR_EXP 83
9504: PUSH
9505: LD_INT 0
9507: ST_TO_ADDR
// sOilTower := false ;
9508: LD_ADDR_EXP 85
9512: PUSH
9513: LD_INT 0
9515: ST_TO_ADDR
// sShovel := false ;
9516: LD_ADDR_EXP 86
9520: PUSH
9521: LD_INT 0
9523: ST_TO_ADDR
// sSheik := false ;
9524: LD_ADDR_EXP 87
9528: PUSH
9529: LD_INT 0
9531: ST_TO_ADDR
// sEarthquake := false ;
9532: LD_ADDR_EXP 89
9536: PUSH
9537: LD_INT 0
9539: ST_TO_ADDR
// sAI := false ;
9540: LD_ADDR_EXP 90
9544: PUSH
9545: LD_INT 0
9547: ST_TO_ADDR
// sCargo := false ;
9548: LD_ADDR_EXP 93
9552: PUSH
9553: LD_INT 0
9555: ST_TO_ADDR
// sDLaser := false ;
9556: LD_ADDR_EXP 94
9560: PUSH
9561: LD_INT 0
9563: ST_TO_ADDR
// sExchange := false ;
9564: LD_ADDR_EXP 95
9568: PUSH
9569: LD_INT 0
9571: ST_TO_ADDR
// sFac := false ;
9572: LD_ADDR_EXP 96
9576: PUSH
9577: LD_INT 0
9579: ST_TO_ADDR
// sPower := false ;
9580: LD_ADDR_EXP 97
9584: PUSH
9585: LD_INT 0
9587: ST_TO_ADDR
// sRandom := false ;
9588: LD_ADDR_EXP 98
9592: PUSH
9593: LD_INT 0
9595: ST_TO_ADDR
// sShield := false ;
9596: LD_ADDR_EXP 99
9600: PUSH
9601: LD_INT 0
9603: ST_TO_ADDR
// sTime := false ;
9604: LD_ADDR_EXP 100
9608: PUSH
9609: LD_INT 0
9611: ST_TO_ADDR
// sTools := false ;
9612: LD_ADDR_EXP 101
9616: PUSH
9617: LD_INT 0
9619: ST_TO_ADDR
// sSold := false ;
9620: LD_ADDR_EXP 66
9624: PUSH
9625: LD_INT 0
9627: ST_TO_ADDR
// sDiff := false ;
9628: LD_ADDR_EXP 67
9632: PUSH
9633: LD_INT 0
9635: ST_TO_ADDR
// sFog := false ;
9636: LD_ADDR_EXP 70
9640: PUSH
9641: LD_INT 0
9643: ST_TO_ADDR
// sReset := false ;
9644: LD_ADDR_EXP 71
9648: PUSH
9649: LD_INT 0
9651: ST_TO_ADDR
// sSun := false ;
9652: LD_ADDR_EXP 72
9656: PUSH
9657: LD_INT 0
9659: ST_TO_ADDR
// sTiger := false ;
9660: LD_ADDR_EXP 68
9664: PUSH
9665: LD_INT 0
9667: ST_TO_ADDR
// sBomb := false ;
9668: LD_ADDR_EXP 69
9672: PUSH
9673: LD_INT 0
9675: ST_TO_ADDR
// sWound := false ;
9676: LD_ADDR_EXP 77
9680: PUSH
9681: LD_INT 0
9683: ST_TO_ADDR
// sBetray := false ;
9684: LD_ADDR_EXP 81
9688: PUSH
9689: LD_INT 0
9691: ST_TO_ADDR
// sContamin := false ;
9692: LD_ADDR_EXP 82
9696: PUSH
9697: LD_INT 0
9699: ST_TO_ADDR
// sOil := false ;
9700: LD_ADDR_EXP 84
9704: PUSH
9705: LD_INT 0
9707: ST_TO_ADDR
// sStu := false ;
9708: LD_ADDR_EXP 88
9712: PUSH
9713: LD_INT 0
9715: ST_TO_ADDR
// sBazooka := false ;
9716: LD_ADDR_EXP 91
9720: PUSH
9721: LD_INT 0
9723: ST_TO_ADDR
// sMortar := false ;
9724: LD_ADDR_EXP 92
9728: PUSH
9729: LD_INT 0
9731: ST_TO_ADDR
// sRanger := false ;
9732: LD_ADDR_EXP 102
9736: PUSH
9737: LD_INT 0
9739: ST_TO_ADDR
// sComputer := false ;
9740: LD_ADDR_EXP 103
9744: PUSH
9745: LD_INT 0
9747: ST_TO_ADDR
// s30 := false ;
9748: LD_ADDR_EXP 104
9752: PUSH
9753: LD_INT 0
9755: ST_TO_ADDR
// s60 := false ;
9756: LD_ADDR_EXP 105
9760: PUSH
9761: LD_INT 0
9763: ST_TO_ADDR
// end ;
9764: LD_VAR 0 1
9768: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
9769: LD_INT 0
9771: PPUSH
9772: PPUSH
9773: PPUSH
9774: PPUSH
9775: PPUSH
9776: PPUSH
9777: PPUSH
// result := [ ] ;
9778: LD_ADDR_VAR 0 2
9782: PUSH
9783: EMPTY
9784: ST_TO_ADDR
// if campaign_id = 1 then
9785: LD_OWVAR 69
9789: PUSH
9790: LD_INT 1
9792: EQUAL
9793: IFFALSE 12959
// begin case mission_number of 1 :
9795: LD_OWVAR 70
9799: PUSH
9800: LD_INT 1
9802: DOUBLE
9803: EQUAL
9804: IFTRUE 9808
9806: GO 9884
9808: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
9809: LD_ADDR_VAR 0 2
9813: PUSH
9814: LD_INT 2
9816: PUSH
9817: LD_INT 4
9819: PUSH
9820: LD_INT 11
9822: PUSH
9823: LD_INT 12
9825: PUSH
9826: LD_INT 15
9828: PUSH
9829: LD_INT 16
9831: PUSH
9832: LD_INT 22
9834: PUSH
9835: LD_INT 23
9837: PUSH
9838: LD_INT 26
9840: PUSH
9841: EMPTY
9842: LIST
9843: LIST
9844: LIST
9845: LIST
9846: LIST
9847: LIST
9848: LIST
9849: LIST
9850: LIST
9851: PUSH
9852: LD_INT 101
9854: PUSH
9855: LD_INT 102
9857: PUSH
9858: LD_INT 106
9860: PUSH
9861: LD_INT 116
9863: PUSH
9864: LD_INT 117
9866: PUSH
9867: LD_INT 118
9869: PUSH
9870: EMPTY
9871: LIST
9872: LIST
9873: LIST
9874: LIST
9875: LIST
9876: LIST
9877: PUSH
9878: EMPTY
9879: LIST
9880: LIST
9881: ST_TO_ADDR
9882: GO 12957
9884: LD_INT 2
9886: DOUBLE
9887: EQUAL
9888: IFTRUE 9892
9890: GO 9976
9892: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
9893: LD_ADDR_VAR 0 2
9897: PUSH
9898: LD_INT 2
9900: PUSH
9901: LD_INT 4
9903: PUSH
9904: LD_INT 11
9906: PUSH
9907: LD_INT 12
9909: PUSH
9910: LD_INT 15
9912: PUSH
9913: LD_INT 16
9915: PUSH
9916: LD_INT 22
9918: PUSH
9919: LD_INT 23
9921: PUSH
9922: LD_INT 26
9924: PUSH
9925: EMPTY
9926: LIST
9927: LIST
9928: LIST
9929: LIST
9930: LIST
9931: LIST
9932: LIST
9933: LIST
9934: LIST
9935: PUSH
9936: LD_INT 101
9938: PUSH
9939: LD_INT 102
9941: PUSH
9942: LD_INT 105
9944: PUSH
9945: LD_INT 106
9947: PUSH
9948: LD_INT 108
9950: PUSH
9951: LD_INT 116
9953: PUSH
9954: LD_INT 117
9956: PUSH
9957: LD_INT 118
9959: PUSH
9960: EMPTY
9961: LIST
9962: LIST
9963: LIST
9964: LIST
9965: LIST
9966: LIST
9967: LIST
9968: LIST
9969: PUSH
9970: EMPTY
9971: LIST
9972: LIST
9973: ST_TO_ADDR
9974: GO 12957
9976: LD_INT 3
9978: DOUBLE
9979: EQUAL
9980: IFTRUE 9984
9982: GO 10072
9984: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
9985: LD_ADDR_VAR 0 2
9989: PUSH
9990: LD_INT 2
9992: PUSH
9993: LD_INT 4
9995: PUSH
9996: LD_INT 5
9998: PUSH
9999: LD_INT 11
10001: PUSH
10002: LD_INT 12
10004: PUSH
10005: LD_INT 15
10007: PUSH
10008: LD_INT 16
10010: PUSH
10011: LD_INT 22
10013: PUSH
10014: LD_INT 26
10016: PUSH
10017: LD_INT 36
10019: PUSH
10020: EMPTY
10021: LIST
10022: LIST
10023: LIST
10024: LIST
10025: LIST
10026: LIST
10027: LIST
10028: LIST
10029: LIST
10030: LIST
10031: PUSH
10032: LD_INT 101
10034: PUSH
10035: LD_INT 102
10037: PUSH
10038: LD_INT 105
10040: PUSH
10041: LD_INT 106
10043: PUSH
10044: LD_INT 108
10046: PUSH
10047: LD_INT 116
10049: PUSH
10050: LD_INT 117
10052: PUSH
10053: LD_INT 118
10055: PUSH
10056: EMPTY
10057: LIST
10058: LIST
10059: LIST
10060: LIST
10061: LIST
10062: LIST
10063: LIST
10064: LIST
10065: PUSH
10066: EMPTY
10067: LIST
10068: LIST
10069: ST_TO_ADDR
10070: GO 12957
10072: LD_INT 4
10074: DOUBLE
10075: EQUAL
10076: IFTRUE 10080
10078: GO 10176
10080: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
10081: LD_ADDR_VAR 0 2
10085: PUSH
10086: LD_INT 2
10088: PUSH
10089: LD_INT 4
10091: PUSH
10092: LD_INT 5
10094: PUSH
10095: LD_INT 8
10097: PUSH
10098: LD_INT 11
10100: PUSH
10101: LD_INT 12
10103: PUSH
10104: LD_INT 15
10106: PUSH
10107: LD_INT 16
10109: PUSH
10110: LD_INT 22
10112: PUSH
10113: LD_INT 23
10115: PUSH
10116: LD_INT 26
10118: PUSH
10119: LD_INT 36
10121: PUSH
10122: EMPTY
10123: LIST
10124: LIST
10125: LIST
10126: LIST
10127: LIST
10128: LIST
10129: LIST
10130: LIST
10131: LIST
10132: LIST
10133: LIST
10134: LIST
10135: PUSH
10136: LD_INT 101
10138: PUSH
10139: LD_INT 102
10141: PUSH
10142: LD_INT 105
10144: PUSH
10145: LD_INT 106
10147: PUSH
10148: LD_INT 108
10150: PUSH
10151: LD_INT 116
10153: PUSH
10154: LD_INT 117
10156: PUSH
10157: LD_INT 118
10159: PUSH
10160: EMPTY
10161: LIST
10162: LIST
10163: LIST
10164: LIST
10165: LIST
10166: LIST
10167: LIST
10168: LIST
10169: PUSH
10170: EMPTY
10171: LIST
10172: LIST
10173: ST_TO_ADDR
10174: GO 12957
10176: LD_INT 5
10178: DOUBLE
10179: EQUAL
10180: IFTRUE 10184
10182: GO 10296
10184: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
10185: LD_ADDR_VAR 0 2
10189: PUSH
10190: LD_INT 2
10192: PUSH
10193: LD_INT 4
10195: PUSH
10196: LD_INT 5
10198: PUSH
10199: LD_INT 6
10201: PUSH
10202: LD_INT 8
10204: PUSH
10205: LD_INT 11
10207: PUSH
10208: LD_INT 12
10210: PUSH
10211: LD_INT 15
10213: PUSH
10214: LD_INT 16
10216: PUSH
10217: LD_INT 22
10219: PUSH
10220: LD_INT 23
10222: PUSH
10223: LD_INT 25
10225: PUSH
10226: LD_INT 26
10228: PUSH
10229: LD_INT 36
10231: PUSH
10232: EMPTY
10233: LIST
10234: LIST
10235: LIST
10236: LIST
10237: LIST
10238: LIST
10239: LIST
10240: LIST
10241: LIST
10242: LIST
10243: LIST
10244: LIST
10245: LIST
10246: LIST
10247: PUSH
10248: LD_INT 101
10250: PUSH
10251: LD_INT 102
10253: PUSH
10254: LD_INT 105
10256: PUSH
10257: LD_INT 106
10259: PUSH
10260: LD_INT 108
10262: PUSH
10263: LD_INT 109
10265: PUSH
10266: LD_INT 112
10268: PUSH
10269: LD_INT 116
10271: PUSH
10272: LD_INT 117
10274: PUSH
10275: LD_INT 118
10277: PUSH
10278: EMPTY
10279: LIST
10280: LIST
10281: LIST
10282: LIST
10283: LIST
10284: LIST
10285: LIST
10286: LIST
10287: LIST
10288: LIST
10289: PUSH
10290: EMPTY
10291: LIST
10292: LIST
10293: ST_TO_ADDR
10294: GO 12957
10296: LD_INT 6
10298: DOUBLE
10299: EQUAL
10300: IFTRUE 10304
10302: GO 10436
10304: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
10305: LD_ADDR_VAR 0 2
10309: PUSH
10310: LD_INT 2
10312: PUSH
10313: LD_INT 4
10315: PUSH
10316: LD_INT 5
10318: PUSH
10319: LD_INT 6
10321: PUSH
10322: LD_INT 8
10324: PUSH
10325: LD_INT 11
10327: PUSH
10328: LD_INT 12
10330: PUSH
10331: LD_INT 15
10333: PUSH
10334: LD_INT 16
10336: PUSH
10337: LD_INT 20
10339: PUSH
10340: LD_INT 21
10342: PUSH
10343: LD_INT 22
10345: PUSH
10346: LD_INT 23
10348: PUSH
10349: LD_INT 25
10351: PUSH
10352: LD_INT 26
10354: PUSH
10355: LD_INT 30
10357: PUSH
10358: LD_INT 31
10360: PUSH
10361: LD_INT 32
10363: PUSH
10364: LD_INT 36
10366: PUSH
10367: EMPTY
10368: LIST
10369: LIST
10370: LIST
10371: LIST
10372: LIST
10373: LIST
10374: LIST
10375: LIST
10376: LIST
10377: LIST
10378: LIST
10379: LIST
10380: LIST
10381: LIST
10382: LIST
10383: LIST
10384: LIST
10385: LIST
10386: LIST
10387: PUSH
10388: LD_INT 101
10390: PUSH
10391: LD_INT 102
10393: PUSH
10394: LD_INT 105
10396: PUSH
10397: LD_INT 106
10399: PUSH
10400: LD_INT 108
10402: PUSH
10403: LD_INT 109
10405: PUSH
10406: LD_INT 112
10408: PUSH
10409: LD_INT 116
10411: PUSH
10412: LD_INT 117
10414: PUSH
10415: LD_INT 118
10417: PUSH
10418: EMPTY
10419: LIST
10420: LIST
10421: LIST
10422: LIST
10423: LIST
10424: LIST
10425: LIST
10426: LIST
10427: LIST
10428: LIST
10429: PUSH
10430: EMPTY
10431: LIST
10432: LIST
10433: ST_TO_ADDR
10434: GO 12957
10436: LD_INT 7
10438: DOUBLE
10439: EQUAL
10440: IFTRUE 10444
10442: GO 10556
10444: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
10445: LD_ADDR_VAR 0 2
10449: PUSH
10450: LD_INT 2
10452: PUSH
10453: LD_INT 4
10455: PUSH
10456: LD_INT 5
10458: PUSH
10459: LD_INT 7
10461: PUSH
10462: LD_INT 11
10464: PUSH
10465: LD_INT 12
10467: PUSH
10468: LD_INT 15
10470: PUSH
10471: LD_INT 16
10473: PUSH
10474: LD_INT 20
10476: PUSH
10477: LD_INT 21
10479: PUSH
10480: LD_INT 22
10482: PUSH
10483: LD_INT 23
10485: PUSH
10486: LD_INT 25
10488: PUSH
10489: LD_INT 26
10491: PUSH
10492: EMPTY
10493: LIST
10494: LIST
10495: LIST
10496: LIST
10497: LIST
10498: LIST
10499: LIST
10500: LIST
10501: LIST
10502: LIST
10503: LIST
10504: LIST
10505: LIST
10506: LIST
10507: PUSH
10508: LD_INT 101
10510: PUSH
10511: LD_INT 102
10513: PUSH
10514: LD_INT 103
10516: PUSH
10517: LD_INT 105
10519: PUSH
10520: LD_INT 106
10522: PUSH
10523: LD_INT 108
10525: PUSH
10526: LD_INT 112
10528: PUSH
10529: LD_INT 116
10531: PUSH
10532: LD_INT 117
10534: PUSH
10535: LD_INT 118
10537: PUSH
10538: EMPTY
10539: LIST
10540: LIST
10541: LIST
10542: LIST
10543: LIST
10544: LIST
10545: LIST
10546: LIST
10547: LIST
10548: LIST
10549: PUSH
10550: EMPTY
10551: LIST
10552: LIST
10553: ST_TO_ADDR
10554: GO 12957
10556: LD_INT 8
10558: DOUBLE
10559: EQUAL
10560: IFTRUE 10564
10562: GO 10704
10564: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
10565: LD_ADDR_VAR 0 2
10569: PUSH
10570: LD_INT 2
10572: PUSH
10573: LD_INT 4
10575: PUSH
10576: LD_INT 5
10578: PUSH
10579: LD_INT 6
10581: PUSH
10582: LD_INT 7
10584: PUSH
10585: LD_INT 8
10587: PUSH
10588: LD_INT 11
10590: PUSH
10591: LD_INT 12
10593: PUSH
10594: LD_INT 15
10596: PUSH
10597: LD_INT 16
10599: PUSH
10600: LD_INT 20
10602: PUSH
10603: LD_INT 21
10605: PUSH
10606: LD_INT 22
10608: PUSH
10609: LD_INT 23
10611: PUSH
10612: LD_INT 25
10614: PUSH
10615: LD_INT 26
10617: PUSH
10618: LD_INT 30
10620: PUSH
10621: LD_INT 31
10623: PUSH
10624: LD_INT 32
10626: PUSH
10627: LD_INT 36
10629: PUSH
10630: EMPTY
10631: LIST
10632: LIST
10633: LIST
10634: LIST
10635: LIST
10636: LIST
10637: LIST
10638: LIST
10639: LIST
10640: LIST
10641: LIST
10642: LIST
10643: LIST
10644: LIST
10645: LIST
10646: LIST
10647: LIST
10648: LIST
10649: LIST
10650: LIST
10651: PUSH
10652: LD_INT 101
10654: PUSH
10655: LD_INT 102
10657: PUSH
10658: LD_INT 103
10660: PUSH
10661: LD_INT 105
10663: PUSH
10664: LD_INT 106
10666: PUSH
10667: LD_INT 108
10669: PUSH
10670: LD_INT 109
10672: PUSH
10673: LD_INT 112
10675: PUSH
10676: LD_INT 116
10678: PUSH
10679: LD_INT 117
10681: PUSH
10682: LD_INT 118
10684: PUSH
10685: EMPTY
10686: LIST
10687: LIST
10688: LIST
10689: LIST
10690: LIST
10691: LIST
10692: LIST
10693: LIST
10694: LIST
10695: LIST
10696: LIST
10697: PUSH
10698: EMPTY
10699: LIST
10700: LIST
10701: ST_TO_ADDR
10702: GO 12957
10704: LD_INT 9
10706: DOUBLE
10707: EQUAL
10708: IFTRUE 10712
10710: GO 10860
10712: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
10713: LD_ADDR_VAR 0 2
10717: PUSH
10718: LD_INT 2
10720: PUSH
10721: LD_INT 4
10723: PUSH
10724: LD_INT 5
10726: PUSH
10727: LD_INT 6
10729: PUSH
10730: LD_INT 7
10732: PUSH
10733: LD_INT 8
10735: PUSH
10736: LD_INT 11
10738: PUSH
10739: LD_INT 12
10741: PUSH
10742: LD_INT 15
10744: PUSH
10745: LD_INT 16
10747: PUSH
10748: LD_INT 20
10750: PUSH
10751: LD_INT 21
10753: PUSH
10754: LD_INT 22
10756: PUSH
10757: LD_INT 23
10759: PUSH
10760: LD_INT 25
10762: PUSH
10763: LD_INT 26
10765: PUSH
10766: LD_INT 28
10768: PUSH
10769: LD_INT 30
10771: PUSH
10772: LD_INT 31
10774: PUSH
10775: LD_INT 32
10777: PUSH
10778: LD_INT 36
10780: PUSH
10781: EMPTY
10782: LIST
10783: LIST
10784: LIST
10785: LIST
10786: LIST
10787: LIST
10788: LIST
10789: LIST
10790: LIST
10791: LIST
10792: LIST
10793: LIST
10794: LIST
10795: LIST
10796: LIST
10797: LIST
10798: LIST
10799: LIST
10800: LIST
10801: LIST
10802: LIST
10803: PUSH
10804: LD_INT 101
10806: PUSH
10807: LD_INT 102
10809: PUSH
10810: LD_INT 103
10812: PUSH
10813: LD_INT 105
10815: PUSH
10816: LD_INT 106
10818: PUSH
10819: LD_INT 108
10821: PUSH
10822: LD_INT 109
10824: PUSH
10825: LD_INT 112
10827: PUSH
10828: LD_INT 114
10830: PUSH
10831: LD_INT 116
10833: PUSH
10834: LD_INT 117
10836: PUSH
10837: LD_INT 118
10839: PUSH
10840: EMPTY
10841: LIST
10842: LIST
10843: LIST
10844: LIST
10845: LIST
10846: LIST
10847: LIST
10848: LIST
10849: LIST
10850: LIST
10851: LIST
10852: LIST
10853: PUSH
10854: EMPTY
10855: LIST
10856: LIST
10857: ST_TO_ADDR
10858: GO 12957
10860: LD_INT 10
10862: DOUBLE
10863: EQUAL
10864: IFTRUE 10868
10866: GO 11064
10868: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
10869: LD_ADDR_VAR 0 2
10873: PUSH
10874: LD_INT 2
10876: PUSH
10877: LD_INT 4
10879: PUSH
10880: LD_INT 5
10882: PUSH
10883: LD_INT 6
10885: PUSH
10886: LD_INT 7
10888: PUSH
10889: LD_INT 8
10891: PUSH
10892: LD_INT 9
10894: PUSH
10895: LD_INT 10
10897: PUSH
10898: LD_INT 11
10900: PUSH
10901: LD_INT 12
10903: PUSH
10904: LD_INT 13
10906: PUSH
10907: LD_INT 14
10909: PUSH
10910: LD_INT 15
10912: PUSH
10913: LD_INT 16
10915: PUSH
10916: LD_INT 17
10918: PUSH
10919: LD_INT 18
10921: PUSH
10922: LD_INT 19
10924: PUSH
10925: LD_INT 20
10927: PUSH
10928: LD_INT 21
10930: PUSH
10931: LD_INT 22
10933: PUSH
10934: LD_INT 23
10936: PUSH
10937: LD_INT 24
10939: PUSH
10940: LD_INT 25
10942: PUSH
10943: LD_INT 26
10945: PUSH
10946: LD_INT 28
10948: PUSH
10949: LD_INT 30
10951: PUSH
10952: LD_INT 31
10954: PUSH
10955: LD_INT 32
10957: PUSH
10958: LD_INT 36
10960: PUSH
10961: EMPTY
10962: LIST
10963: LIST
10964: LIST
10965: LIST
10966: LIST
10967: LIST
10968: LIST
10969: LIST
10970: LIST
10971: LIST
10972: LIST
10973: LIST
10974: LIST
10975: LIST
10976: LIST
10977: LIST
10978: LIST
10979: LIST
10980: LIST
10981: LIST
10982: LIST
10983: LIST
10984: LIST
10985: LIST
10986: LIST
10987: LIST
10988: LIST
10989: LIST
10990: LIST
10991: PUSH
10992: LD_INT 101
10994: PUSH
10995: LD_INT 102
10997: PUSH
10998: LD_INT 103
11000: PUSH
11001: LD_INT 104
11003: PUSH
11004: LD_INT 105
11006: PUSH
11007: LD_INT 106
11009: PUSH
11010: LD_INT 107
11012: PUSH
11013: LD_INT 108
11015: PUSH
11016: LD_INT 109
11018: PUSH
11019: LD_INT 110
11021: PUSH
11022: LD_INT 111
11024: PUSH
11025: LD_INT 112
11027: PUSH
11028: LD_INT 114
11030: PUSH
11031: LD_INT 116
11033: PUSH
11034: LD_INT 117
11036: PUSH
11037: LD_INT 118
11039: PUSH
11040: EMPTY
11041: LIST
11042: LIST
11043: LIST
11044: LIST
11045: LIST
11046: LIST
11047: LIST
11048: LIST
11049: LIST
11050: LIST
11051: LIST
11052: LIST
11053: LIST
11054: LIST
11055: LIST
11056: LIST
11057: PUSH
11058: EMPTY
11059: LIST
11060: LIST
11061: ST_TO_ADDR
11062: GO 12957
11064: LD_INT 11
11066: DOUBLE
11067: EQUAL
11068: IFTRUE 11072
11070: GO 11276
11072: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
11073: LD_ADDR_VAR 0 2
11077: PUSH
11078: LD_INT 2
11080: PUSH
11081: LD_INT 3
11083: PUSH
11084: LD_INT 4
11086: PUSH
11087: LD_INT 5
11089: PUSH
11090: LD_INT 6
11092: PUSH
11093: LD_INT 7
11095: PUSH
11096: LD_INT 8
11098: PUSH
11099: LD_INT 9
11101: PUSH
11102: LD_INT 10
11104: PUSH
11105: LD_INT 11
11107: PUSH
11108: LD_INT 12
11110: PUSH
11111: LD_INT 13
11113: PUSH
11114: LD_INT 14
11116: PUSH
11117: LD_INT 15
11119: PUSH
11120: LD_INT 16
11122: PUSH
11123: LD_INT 17
11125: PUSH
11126: LD_INT 18
11128: PUSH
11129: LD_INT 19
11131: PUSH
11132: LD_INT 20
11134: PUSH
11135: LD_INT 21
11137: PUSH
11138: LD_INT 22
11140: PUSH
11141: LD_INT 23
11143: PUSH
11144: LD_INT 24
11146: PUSH
11147: LD_INT 25
11149: PUSH
11150: LD_INT 26
11152: PUSH
11153: LD_INT 28
11155: PUSH
11156: LD_INT 30
11158: PUSH
11159: LD_INT 31
11161: PUSH
11162: LD_INT 32
11164: PUSH
11165: LD_INT 34
11167: PUSH
11168: LD_INT 36
11170: PUSH
11171: EMPTY
11172: LIST
11173: LIST
11174: LIST
11175: LIST
11176: LIST
11177: LIST
11178: LIST
11179: LIST
11180: LIST
11181: LIST
11182: LIST
11183: LIST
11184: LIST
11185: LIST
11186: LIST
11187: LIST
11188: LIST
11189: LIST
11190: LIST
11191: LIST
11192: LIST
11193: LIST
11194: LIST
11195: LIST
11196: LIST
11197: LIST
11198: LIST
11199: LIST
11200: LIST
11201: LIST
11202: LIST
11203: PUSH
11204: LD_INT 101
11206: PUSH
11207: LD_INT 102
11209: PUSH
11210: LD_INT 103
11212: PUSH
11213: LD_INT 104
11215: PUSH
11216: LD_INT 105
11218: PUSH
11219: LD_INT 106
11221: PUSH
11222: LD_INT 107
11224: PUSH
11225: LD_INT 108
11227: PUSH
11228: LD_INT 109
11230: PUSH
11231: LD_INT 110
11233: PUSH
11234: LD_INT 111
11236: PUSH
11237: LD_INT 112
11239: PUSH
11240: LD_INT 114
11242: PUSH
11243: LD_INT 116
11245: PUSH
11246: LD_INT 117
11248: PUSH
11249: LD_INT 118
11251: PUSH
11252: EMPTY
11253: LIST
11254: LIST
11255: LIST
11256: LIST
11257: LIST
11258: LIST
11259: LIST
11260: LIST
11261: LIST
11262: LIST
11263: LIST
11264: LIST
11265: LIST
11266: LIST
11267: LIST
11268: LIST
11269: PUSH
11270: EMPTY
11271: LIST
11272: LIST
11273: ST_TO_ADDR
11274: GO 12957
11276: LD_INT 12
11278: DOUBLE
11279: EQUAL
11280: IFTRUE 11284
11282: GO 11504
11284: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
11285: LD_ADDR_VAR 0 2
11289: PUSH
11290: LD_INT 1
11292: PUSH
11293: LD_INT 2
11295: PUSH
11296: LD_INT 3
11298: PUSH
11299: LD_INT 4
11301: PUSH
11302: LD_INT 5
11304: PUSH
11305: LD_INT 6
11307: PUSH
11308: LD_INT 7
11310: PUSH
11311: LD_INT 8
11313: PUSH
11314: LD_INT 9
11316: PUSH
11317: LD_INT 10
11319: PUSH
11320: LD_INT 11
11322: PUSH
11323: LD_INT 12
11325: PUSH
11326: LD_INT 13
11328: PUSH
11329: LD_INT 14
11331: PUSH
11332: LD_INT 15
11334: PUSH
11335: LD_INT 16
11337: PUSH
11338: LD_INT 17
11340: PUSH
11341: LD_INT 18
11343: PUSH
11344: LD_INT 19
11346: PUSH
11347: LD_INT 20
11349: PUSH
11350: LD_INT 21
11352: PUSH
11353: LD_INT 22
11355: PUSH
11356: LD_INT 23
11358: PUSH
11359: LD_INT 24
11361: PUSH
11362: LD_INT 25
11364: PUSH
11365: LD_INT 26
11367: PUSH
11368: LD_INT 27
11370: PUSH
11371: LD_INT 28
11373: PUSH
11374: LD_INT 30
11376: PUSH
11377: LD_INT 31
11379: PUSH
11380: LD_INT 32
11382: PUSH
11383: LD_INT 33
11385: PUSH
11386: LD_INT 34
11388: PUSH
11389: LD_INT 36
11391: PUSH
11392: EMPTY
11393: LIST
11394: LIST
11395: LIST
11396: LIST
11397: LIST
11398: LIST
11399: LIST
11400: LIST
11401: LIST
11402: LIST
11403: LIST
11404: LIST
11405: LIST
11406: LIST
11407: LIST
11408: LIST
11409: LIST
11410: LIST
11411: LIST
11412: LIST
11413: LIST
11414: LIST
11415: LIST
11416: LIST
11417: LIST
11418: LIST
11419: LIST
11420: LIST
11421: LIST
11422: LIST
11423: LIST
11424: LIST
11425: LIST
11426: LIST
11427: PUSH
11428: LD_INT 101
11430: PUSH
11431: LD_INT 102
11433: PUSH
11434: LD_INT 103
11436: PUSH
11437: LD_INT 104
11439: PUSH
11440: LD_INT 105
11442: PUSH
11443: LD_INT 106
11445: PUSH
11446: LD_INT 107
11448: PUSH
11449: LD_INT 108
11451: PUSH
11452: LD_INT 109
11454: PUSH
11455: LD_INT 110
11457: PUSH
11458: LD_INT 111
11460: PUSH
11461: LD_INT 112
11463: PUSH
11464: LD_INT 113
11466: PUSH
11467: LD_INT 114
11469: PUSH
11470: LD_INT 116
11472: PUSH
11473: LD_INT 117
11475: PUSH
11476: LD_INT 118
11478: PUSH
11479: EMPTY
11480: LIST
11481: LIST
11482: LIST
11483: LIST
11484: LIST
11485: LIST
11486: LIST
11487: LIST
11488: LIST
11489: LIST
11490: LIST
11491: LIST
11492: LIST
11493: LIST
11494: LIST
11495: LIST
11496: LIST
11497: PUSH
11498: EMPTY
11499: LIST
11500: LIST
11501: ST_TO_ADDR
11502: GO 12957
11504: LD_INT 13
11506: DOUBLE
11507: EQUAL
11508: IFTRUE 11512
11510: GO 11720
11512: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
11513: LD_ADDR_VAR 0 2
11517: PUSH
11518: LD_INT 1
11520: PUSH
11521: LD_INT 2
11523: PUSH
11524: LD_INT 3
11526: PUSH
11527: LD_INT 4
11529: PUSH
11530: LD_INT 5
11532: PUSH
11533: LD_INT 8
11535: PUSH
11536: LD_INT 9
11538: PUSH
11539: LD_INT 10
11541: PUSH
11542: LD_INT 11
11544: PUSH
11545: LD_INT 12
11547: PUSH
11548: LD_INT 14
11550: PUSH
11551: LD_INT 15
11553: PUSH
11554: LD_INT 16
11556: PUSH
11557: LD_INT 17
11559: PUSH
11560: LD_INT 18
11562: PUSH
11563: LD_INT 19
11565: PUSH
11566: LD_INT 20
11568: PUSH
11569: LD_INT 21
11571: PUSH
11572: LD_INT 22
11574: PUSH
11575: LD_INT 23
11577: PUSH
11578: LD_INT 24
11580: PUSH
11581: LD_INT 25
11583: PUSH
11584: LD_INT 26
11586: PUSH
11587: LD_INT 27
11589: PUSH
11590: LD_INT 28
11592: PUSH
11593: LD_INT 30
11595: PUSH
11596: LD_INT 31
11598: PUSH
11599: LD_INT 32
11601: PUSH
11602: LD_INT 33
11604: PUSH
11605: LD_INT 34
11607: PUSH
11608: LD_INT 36
11610: PUSH
11611: EMPTY
11612: LIST
11613: LIST
11614: LIST
11615: LIST
11616: LIST
11617: LIST
11618: LIST
11619: LIST
11620: LIST
11621: LIST
11622: LIST
11623: LIST
11624: LIST
11625: LIST
11626: LIST
11627: LIST
11628: LIST
11629: LIST
11630: LIST
11631: LIST
11632: LIST
11633: LIST
11634: LIST
11635: LIST
11636: LIST
11637: LIST
11638: LIST
11639: LIST
11640: LIST
11641: LIST
11642: LIST
11643: PUSH
11644: LD_INT 101
11646: PUSH
11647: LD_INT 102
11649: PUSH
11650: LD_INT 103
11652: PUSH
11653: LD_INT 104
11655: PUSH
11656: LD_INT 105
11658: PUSH
11659: LD_INT 106
11661: PUSH
11662: LD_INT 107
11664: PUSH
11665: LD_INT 108
11667: PUSH
11668: LD_INT 109
11670: PUSH
11671: LD_INT 110
11673: PUSH
11674: LD_INT 111
11676: PUSH
11677: LD_INT 112
11679: PUSH
11680: LD_INT 113
11682: PUSH
11683: LD_INT 114
11685: PUSH
11686: LD_INT 116
11688: PUSH
11689: LD_INT 117
11691: PUSH
11692: LD_INT 118
11694: PUSH
11695: EMPTY
11696: LIST
11697: LIST
11698: LIST
11699: LIST
11700: LIST
11701: LIST
11702: LIST
11703: LIST
11704: LIST
11705: LIST
11706: LIST
11707: LIST
11708: LIST
11709: LIST
11710: LIST
11711: LIST
11712: LIST
11713: PUSH
11714: EMPTY
11715: LIST
11716: LIST
11717: ST_TO_ADDR
11718: GO 12957
11720: LD_INT 14
11722: DOUBLE
11723: EQUAL
11724: IFTRUE 11728
11726: GO 11952
11728: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
11729: LD_ADDR_VAR 0 2
11733: PUSH
11734: LD_INT 1
11736: PUSH
11737: LD_INT 2
11739: PUSH
11740: LD_INT 3
11742: PUSH
11743: LD_INT 4
11745: PUSH
11746: LD_INT 5
11748: PUSH
11749: LD_INT 6
11751: PUSH
11752: LD_INT 7
11754: PUSH
11755: LD_INT 8
11757: PUSH
11758: LD_INT 9
11760: PUSH
11761: LD_INT 10
11763: PUSH
11764: LD_INT 11
11766: PUSH
11767: LD_INT 12
11769: PUSH
11770: LD_INT 13
11772: PUSH
11773: LD_INT 14
11775: PUSH
11776: LD_INT 15
11778: PUSH
11779: LD_INT 16
11781: PUSH
11782: LD_INT 17
11784: PUSH
11785: LD_INT 18
11787: PUSH
11788: LD_INT 19
11790: PUSH
11791: LD_INT 20
11793: PUSH
11794: LD_INT 21
11796: PUSH
11797: LD_INT 22
11799: PUSH
11800: LD_INT 23
11802: PUSH
11803: LD_INT 24
11805: PUSH
11806: LD_INT 25
11808: PUSH
11809: LD_INT 26
11811: PUSH
11812: LD_INT 27
11814: PUSH
11815: LD_INT 28
11817: PUSH
11818: LD_INT 29
11820: PUSH
11821: LD_INT 30
11823: PUSH
11824: LD_INT 31
11826: PUSH
11827: LD_INT 32
11829: PUSH
11830: LD_INT 33
11832: PUSH
11833: LD_INT 34
11835: PUSH
11836: LD_INT 36
11838: PUSH
11839: EMPTY
11840: LIST
11841: LIST
11842: LIST
11843: LIST
11844: LIST
11845: LIST
11846: LIST
11847: LIST
11848: LIST
11849: LIST
11850: LIST
11851: LIST
11852: LIST
11853: LIST
11854: LIST
11855: LIST
11856: LIST
11857: LIST
11858: LIST
11859: LIST
11860: LIST
11861: LIST
11862: LIST
11863: LIST
11864: LIST
11865: LIST
11866: LIST
11867: LIST
11868: LIST
11869: LIST
11870: LIST
11871: LIST
11872: LIST
11873: LIST
11874: LIST
11875: PUSH
11876: LD_INT 101
11878: PUSH
11879: LD_INT 102
11881: PUSH
11882: LD_INT 103
11884: PUSH
11885: LD_INT 104
11887: PUSH
11888: LD_INT 105
11890: PUSH
11891: LD_INT 106
11893: PUSH
11894: LD_INT 107
11896: PUSH
11897: LD_INT 108
11899: PUSH
11900: LD_INT 109
11902: PUSH
11903: LD_INT 110
11905: PUSH
11906: LD_INT 111
11908: PUSH
11909: LD_INT 112
11911: PUSH
11912: LD_INT 113
11914: PUSH
11915: LD_INT 114
11917: PUSH
11918: LD_INT 116
11920: PUSH
11921: LD_INT 117
11923: PUSH
11924: LD_INT 118
11926: PUSH
11927: EMPTY
11928: LIST
11929: LIST
11930: LIST
11931: LIST
11932: LIST
11933: LIST
11934: LIST
11935: LIST
11936: LIST
11937: LIST
11938: LIST
11939: LIST
11940: LIST
11941: LIST
11942: LIST
11943: LIST
11944: LIST
11945: PUSH
11946: EMPTY
11947: LIST
11948: LIST
11949: ST_TO_ADDR
11950: GO 12957
11952: LD_INT 15
11954: DOUBLE
11955: EQUAL
11956: IFTRUE 11960
11958: GO 12184
11960: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
11961: LD_ADDR_VAR 0 2
11965: PUSH
11966: LD_INT 1
11968: PUSH
11969: LD_INT 2
11971: PUSH
11972: LD_INT 3
11974: PUSH
11975: LD_INT 4
11977: PUSH
11978: LD_INT 5
11980: PUSH
11981: LD_INT 6
11983: PUSH
11984: LD_INT 7
11986: PUSH
11987: LD_INT 8
11989: PUSH
11990: LD_INT 9
11992: PUSH
11993: LD_INT 10
11995: PUSH
11996: LD_INT 11
11998: PUSH
11999: LD_INT 12
12001: PUSH
12002: LD_INT 13
12004: PUSH
12005: LD_INT 14
12007: PUSH
12008: LD_INT 15
12010: PUSH
12011: LD_INT 16
12013: PUSH
12014: LD_INT 17
12016: PUSH
12017: LD_INT 18
12019: PUSH
12020: LD_INT 19
12022: PUSH
12023: LD_INT 20
12025: PUSH
12026: LD_INT 21
12028: PUSH
12029: LD_INT 22
12031: PUSH
12032: LD_INT 23
12034: PUSH
12035: LD_INT 24
12037: PUSH
12038: LD_INT 25
12040: PUSH
12041: LD_INT 26
12043: PUSH
12044: LD_INT 27
12046: PUSH
12047: LD_INT 28
12049: PUSH
12050: LD_INT 29
12052: PUSH
12053: LD_INT 30
12055: PUSH
12056: LD_INT 31
12058: PUSH
12059: LD_INT 32
12061: PUSH
12062: LD_INT 33
12064: PUSH
12065: LD_INT 34
12067: PUSH
12068: LD_INT 36
12070: PUSH
12071: EMPTY
12072: LIST
12073: LIST
12074: LIST
12075: LIST
12076: LIST
12077: LIST
12078: LIST
12079: LIST
12080: LIST
12081: LIST
12082: LIST
12083: LIST
12084: LIST
12085: LIST
12086: LIST
12087: LIST
12088: LIST
12089: LIST
12090: LIST
12091: LIST
12092: LIST
12093: LIST
12094: LIST
12095: LIST
12096: LIST
12097: LIST
12098: LIST
12099: LIST
12100: LIST
12101: LIST
12102: LIST
12103: LIST
12104: LIST
12105: LIST
12106: LIST
12107: PUSH
12108: LD_INT 101
12110: PUSH
12111: LD_INT 102
12113: PUSH
12114: LD_INT 103
12116: PUSH
12117: LD_INT 104
12119: PUSH
12120: LD_INT 105
12122: PUSH
12123: LD_INT 106
12125: PUSH
12126: LD_INT 107
12128: PUSH
12129: LD_INT 108
12131: PUSH
12132: LD_INT 109
12134: PUSH
12135: LD_INT 110
12137: PUSH
12138: LD_INT 111
12140: PUSH
12141: LD_INT 112
12143: PUSH
12144: LD_INT 113
12146: PUSH
12147: LD_INT 114
12149: PUSH
12150: LD_INT 116
12152: PUSH
12153: LD_INT 117
12155: PUSH
12156: LD_INT 118
12158: PUSH
12159: EMPTY
12160: LIST
12161: LIST
12162: LIST
12163: LIST
12164: LIST
12165: LIST
12166: LIST
12167: LIST
12168: LIST
12169: LIST
12170: LIST
12171: LIST
12172: LIST
12173: LIST
12174: LIST
12175: LIST
12176: LIST
12177: PUSH
12178: EMPTY
12179: LIST
12180: LIST
12181: ST_TO_ADDR
12182: GO 12957
12184: LD_INT 16
12186: DOUBLE
12187: EQUAL
12188: IFTRUE 12192
12190: GO 12328
12192: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
12193: LD_ADDR_VAR 0 2
12197: PUSH
12198: LD_INT 2
12200: PUSH
12201: LD_INT 4
12203: PUSH
12204: LD_INT 5
12206: PUSH
12207: LD_INT 7
12209: PUSH
12210: LD_INT 11
12212: PUSH
12213: LD_INT 12
12215: PUSH
12216: LD_INT 15
12218: PUSH
12219: LD_INT 16
12221: PUSH
12222: LD_INT 20
12224: PUSH
12225: LD_INT 21
12227: PUSH
12228: LD_INT 22
12230: PUSH
12231: LD_INT 23
12233: PUSH
12234: LD_INT 25
12236: PUSH
12237: LD_INT 26
12239: PUSH
12240: LD_INT 30
12242: PUSH
12243: LD_INT 31
12245: PUSH
12246: LD_INT 32
12248: PUSH
12249: LD_INT 33
12251: PUSH
12252: LD_INT 34
12254: PUSH
12255: EMPTY
12256: LIST
12257: LIST
12258: LIST
12259: LIST
12260: LIST
12261: LIST
12262: LIST
12263: LIST
12264: LIST
12265: LIST
12266: LIST
12267: LIST
12268: LIST
12269: LIST
12270: LIST
12271: LIST
12272: LIST
12273: LIST
12274: LIST
12275: PUSH
12276: LD_INT 101
12278: PUSH
12279: LD_INT 102
12281: PUSH
12282: LD_INT 103
12284: PUSH
12285: LD_INT 106
12287: PUSH
12288: LD_INT 108
12290: PUSH
12291: LD_INT 112
12293: PUSH
12294: LD_INT 113
12296: PUSH
12297: LD_INT 114
12299: PUSH
12300: LD_INT 116
12302: PUSH
12303: LD_INT 117
12305: PUSH
12306: LD_INT 118
12308: PUSH
12309: EMPTY
12310: LIST
12311: LIST
12312: LIST
12313: LIST
12314: LIST
12315: LIST
12316: LIST
12317: LIST
12318: LIST
12319: LIST
12320: LIST
12321: PUSH
12322: EMPTY
12323: LIST
12324: LIST
12325: ST_TO_ADDR
12326: GO 12957
12328: LD_INT 17
12330: DOUBLE
12331: EQUAL
12332: IFTRUE 12336
12334: GO 12560
12336: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
12337: LD_ADDR_VAR 0 2
12341: PUSH
12342: LD_INT 1
12344: PUSH
12345: LD_INT 2
12347: PUSH
12348: LD_INT 3
12350: PUSH
12351: LD_INT 4
12353: PUSH
12354: LD_INT 5
12356: PUSH
12357: LD_INT 6
12359: PUSH
12360: LD_INT 7
12362: PUSH
12363: LD_INT 8
12365: PUSH
12366: LD_INT 9
12368: PUSH
12369: LD_INT 10
12371: PUSH
12372: LD_INT 11
12374: PUSH
12375: LD_INT 12
12377: PUSH
12378: LD_INT 13
12380: PUSH
12381: LD_INT 14
12383: PUSH
12384: LD_INT 15
12386: PUSH
12387: LD_INT 16
12389: PUSH
12390: LD_INT 17
12392: PUSH
12393: LD_INT 18
12395: PUSH
12396: LD_INT 19
12398: PUSH
12399: LD_INT 20
12401: PUSH
12402: LD_INT 21
12404: PUSH
12405: LD_INT 22
12407: PUSH
12408: LD_INT 23
12410: PUSH
12411: LD_INT 24
12413: PUSH
12414: LD_INT 25
12416: PUSH
12417: LD_INT 26
12419: PUSH
12420: LD_INT 27
12422: PUSH
12423: LD_INT 28
12425: PUSH
12426: LD_INT 29
12428: PUSH
12429: LD_INT 30
12431: PUSH
12432: LD_INT 31
12434: PUSH
12435: LD_INT 32
12437: PUSH
12438: LD_INT 33
12440: PUSH
12441: LD_INT 34
12443: PUSH
12444: LD_INT 36
12446: PUSH
12447: EMPTY
12448: LIST
12449: LIST
12450: LIST
12451: LIST
12452: LIST
12453: LIST
12454: LIST
12455: LIST
12456: LIST
12457: LIST
12458: LIST
12459: LIST
12460: LIST
12461: LIST
12462: LIST
12463: LIST
12464: LIST
12465: LIST
12466: LIST
12467: LIST
12468: LIST
12469: LIST
12470: LIST
12471: LIST
12472: LIST
12473: LIST
12474: LIST
12475: LIST
12476: LIST
12477: LIST
12478: LIST
12479: LIST
12480: LIST
12481: LIST
12482: LIST
12483: PUSH
12484: LD_INT 101
12486: PUSH
12487: LD_INT 102
12489: PUSH
12490: LD_INT 103
12492: PUSH
12493: LD_INT 104
12495: PUSH
12496: LD_INT 105
12498: PUSH
12499: LD_INT 106
12501: PUSH
12502: LD_INT 107
12504: PUSH
12505: LD_INT 108
12507: PUSH
12508: LD_INT 109
12510: PUSH
12511: LD_INT 110
12513: PUSH
12514: LD_INT 111
12516: PUSH
12517: LD_INT 112
12519: PUSH
12520: LD_INT 113
12522: PUSH
12523: LD_INT 114
12525: PUSH
12526: LD_INT 116
12528: PUSH
12529: LD_INT 117
12531: PUSH
12532: LD_INT 118
12534: PUSH
12535: EMPTY
12536: LIST
12537: LIST
12538: LIST
12539: LIST
12540: LIST
12541: LIST
12542: LIST
12543: LIST
12544: LIST
12545: LIST
12546: LIST
12547: LIST
12548: LIST
12549: LIST
12550: LIST
12551: LIST
12552: LIST
12553: PUSH
12554: EMPTY
12555: LIST
12556: LIST
12557: ST_TO_ADDR
12558: GO 12957
12560: LD_INT 18
12562: DOUBLE
12563: EQUAL
12564: IFTRUE 12568
12566: GO 12716
12568: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
12569: LD_ADDR_VAR 0 2
12573: PUSH
12574: LD_INT 2
12576: PUSH
12577: LD_INT 4
12579: PUSH
12580: LD_INT 5
12582: PUSH
12583: LD_INT 7
12585: PUSH
12586: LD_INT 11
12588: PUSH
12589: LD_INT 12
12591: PUSH
12592: LD_INT 15
12594: PUSH
12595: LD_INT 16
12597: PUSH
12598: LD_INT 20
12600: PUSH
12601: LD_INT 21
12603: PUSH
12604: LD_INT 22
12606: PUSH
12607: LD_INT 23
12609: PUSH
12610: LD_INT 25
12612: PUSH
12613: LD_INT 26
12615: PUSH
12616: LD_INT 30
12618: PUSH
12619: LD_INT 31
12621: PUSH
12622: LD_INT 32
12624: PUSH
12625: LD_INT 33
12627: PUSH
12628: LD_INT 34
12630: PUSH
12631: LD_INT 35
12633: PUSH
12634: LD_INT 36
12636: PUSH
12637: EMPTY
12638: LIST
12639: LIST
12640: LIST
12641: LIST
12642: LIST
12643: LIST
12644: LIST
12645: LIST
12646: LIST
12647: LIST
12648: LIST
12649: LIST
12650: LIST
12651: LIST
12652: LIST
12653: LIST
12654: LIST
12655: LIST
12656: LIST
12657: LIST
12658: LIST
12659: PUSH
12660: LD_INT 101
12662: PUSH
12663: LD_INT 102
12665: PUSH
12666: LD_INT 103
12668: PUSH
12669: LD_INT 106
12671: PUSH
12672: LD_INT 108
12674: PUSH
12675: LD_INT 112
12677: PUSH
12678: LD_INT 113
12680: PUSH
12681: LD_INT 114
12683: PUSH
12684: LD_INT 115
12686: PUSH
12687: LD_INT 116
12689: PUSH
12690: LD_INT 117
12692: PUSH
12693: LD_INT 118
12695: PUSH
12696: EMPTY
12697: LIST
12698: LIST
12699: LIST
12700: LIST
12701: LIST
12702: LIST
12703: LIST
12704: LIST
12705: LIST
12706: LIST
12707: LIST
12708: LIST
12709: PUSH
12710: EMPTY
12711: LIST
12712: LIST
12713: ST_TO_ADDR
12714: GO 12957
12716: LD_INT 19
12718: DOUBLE
12719: EQUAL
12720: IFTRUE 12724
12722: GO 12956
12724: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
12725: LD_ADDR_VAR 0 2
12729: PUSH
12730: LD_INT 1
12732: PUSH
12733: LD_INT 2
12735: PUSH
12736: LD_INT 3
12738: PUSH
12739: LD_INT 4
12741: PUSH
12742: LD_INT 5
12744: PUSH
12745: LD_INT 6
12747: PUSH
12748: LD_INT 7
12750: PUSH
12751: LD_INT 8
12753: PUSH
12754: LD_INT 9
12756: PUSH
12757: LD_INT 10
12759: PUSH
12760: LD_INT 11
12762: PUSH
12763: LD_INT 12
12765: PUSH
12766: LD_INT 13
12768: PUSH
12769: LD_INT 14
12771: PUSH
12772: LD_INT 15
12774: PUSH
12775: LD_INT 16
12777: PUSH
12778: LD_INT 17
12780: PUSH
12781: LD_INT 18
12783: PUSH
12784: LD_INT 19
12786: PUSH
12787: LD_INT 20
12789: PUSH
12790: LD_INT 21
12792: PUSH
12793: LD_INT 22
12795: PUSH
12796: LD_INT 23
12798: PUSH
12799: LD_INT 24
12801: PUSH
12802: LD_INT 25
12804: PUSH
12805: LD_INT 26
12807: PUSH
12808: LD_INT 27
12810: PUSH
12811: LD_INT 28
12813: PUSH
12814: LD_INT 29
12816: PUSH
12817: LD_INT 30
12819: PUSH
12820: LD_INT 31
12822: PUSH
12823: LD_INT 32
12825: PUSH
12826: LD_INT 33
12828: PUSH
12829: LD_INT 34
12831: PUSH
12832: LD_INT 35
12834: PUSH
12835: LD_INT 36
12837: PUSH
12838: EMPTY
12839: LIST
12840: LIST
12841: LIST
12842: LIST
12843: LIST
12844: LIST
12845: LIST
12846: LIST
12847: LIST
12848: LIST
12849: LIST
12850: LIST
12851: LIST
12852: LIST
12853: LIST
12854: LIST
12855: LIST
12856: LIST
12857: LIST
12858: LIST
12859: LIST
12860: LIST
12861: LIST
12862: LIST
12863: LIST
12864: LIST
12865: LIST
12866: LIST
12867: LIST
12868: LIST
12869: LIST
12870: LIST
12871: LIST
12872: LIST
12873: LIST
12874: LIST
12875: PUSH
12876: LD_INT 101
12878: PUSH
12879: LD_INT 102
12881: PUSH
12882: LD_INT 103
12884: PUSH
12885: LD_INT 104
12887: PUSH
12888: LD_INT 105
12890: PUSH
12891: LD_INT 106
12893: PUSH
12894: LD_INT 107
12896: PUSH
12897: LD_INT 108
12899: PUSH
12900: LD_INT 109
12902: PUSH
12903: LD_INT 110
12905: PUSH
12906: LD_INT 111
12908: PUSH
12909: LD_INT 112
12911: PUSH
12912: LD_INT 113
12914: PUSH
12915: LD_INT 114
12917: PUSH
12918: LD_INT 115
12920: PUSH
12921: LD_INT 116
12923: PUSH
12924: LD_INT 117
12926: PUSH
12927: LD_INT 118
12929: PUSH
12930: EMPTY
12931: LIST
12932: LIST
12933: LIST
12934: LIST
12935: LIST
12936: LIST
12937: LIST
12938: LIST
12939: LIST
12940: LIST
12941: LIST
12942: LIST
12943: LIST
12944: LIST
12945: LIST
12946: LIST
12947: LIST
12948: LIST
12949: PUSH
12950: EMPTY
12951: LIST
12952: LIST
12953: ST_TO_ADDR
12954: GO 12957
12956: POP
// end else
12957: GO 13188
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
12959: LD_ADDR_VAR 0 2
12963: PUSH
12964: LD_INT 1
12966: PUSH
12967: LD_INT 2
12969: PUSH
12970: LD_INT 3
12972: PUSH
12973: LD_INT 4
12975: PUSH
12976: LD_INT 5
12978: PUSH
12979: LD_INT 6
12981: PUSH
12982: LD_INT 7
12984: PUSH
12985: LD_INT 8
12987: PUSH
12988: LD_INT 9
12990: PUSH
12991: LD_INT 10
12993: PUSH
12994: LD_INT 11
12996: PUSH
12997: LD_INT 12
12999: PUSH
13000: LD_INT 13
13002: PUSH
13003: LD_INT 14
13005: PUSH
13006: LD_INT 15
13008: PUSH
13009: LD_INT 16
13011: PUSH
13012: LD_INT 17
13014: PUSH
13015: LD_INT 18
13017: PUSH
13018: LD_INT 19
13020: PUSH
13021: LD_INT 20
13023: PUSH
13024: LD_INT 21
13026: PUSH
13027: LD_INT 22
13029: PUSH
13030: LD_INT 23
13032: PUSH
13033: LD_INT 24
13035: PUSH
13036: LD_INT 25
13038: PUSH
13039: LD_INT 26
13041: PUSH
13042: LD_INT 27
13044: PUSH
13045: LD_INT 28
13047: PUSH
13048: LD_INT 29
13050: PUSH
13051: LD_INT 30
13053: PUSH
13054: LD_INT 31
13056: PUSH
13057: LD_INT 32
13059: PUSH
13060: LD_INT 33
13062: PUSH
13063: LD_INT 34
13065: PUSH
13066: LD_INT 35
13068: PUSH
13069: LD_INT 36
13071: PUSH
13072: EMPTY
13073: LIST
13074: LIST
13075: LIST
13076: LIST
13077: LIST
13078: LIST
13079: LIST
13080: LIST
13081: LIST
13082: LIST
13083: LIST
13084: LIST
13085: LIST
13086: LIST
13087: LIST
13088: LIST
13089: LIST
13090: LIST
13091: LIST
13092: LIST
13093: LIST
13094: LIST
13095: LIST
13096: LIST
13097: LIST
13098: LIST
13099: LIST
13100: LIST
13101: LIST
13102: LIST
13103: LIST
13104: LIST
13105: LIST
13106: LIST
13107: LIST
13108: LIST
13109: PUSH
13110: LD_INT 101
13112: PUSH
13113: LD_INT 102
13115: PUSH
13116: LD_INT 103
13118: PUSH
13119: LD_INT 104
13121: PUSH
13122: LD_INT 105
13124: PUSH
13125: LD_INT 106
13127: PUSH
13128: LD_INT 107
13130: PUSH
13131: LD_INT 108
13133: PUSH
13134: LD_INT 109
13136: PUSH
13137: LD_INT 110
13139: PUSH
13140: LD_INT 111
13142: PUSH
13143: LD_INT 112
13145: PUSH
13146: LD_INT 113
13148: PUSH
13149: LD_INT 114
13151: PUSH
13152: LD_INT 115
13154: PUSH
13155: LD_INT 116
13157: PUSH
13158: LD_INT 117
13160: PUSH
13161: LD_INT 118
13163: PUSH
13164: EMPTY
13165: LIST
13166: LIST
13167: LIST
13168: LIST
13169: LIST
13170: LIST
13171: LIST
13172: LIST
13173: LIST
13174: LIST
13175: LIST
13176: LIST
13177: LIST
13178: LIST
13179: LIST
13180: LIST
13181: LIST
13182: LIST
13183: PUSH
13184: EMPTY
13185: LIST
13186: LIST
13187: ST_TO_ADDR
// if result then
13188: LD_VAR 0 2
13192: IFFALSE 13978
// begin normal :=  ;
13194: LD_ADDR_VAR 0 5
13198: PUSH
13199: LD_STRING 
13201: ST_TO_ADDR
// hardcore :=  ;
13202: LD_ADDR_VAR 0 6
13206: PUSH
13207: LD_STRING 
13209: ST_TO_ADDR
// active :=  ;
13210: LD_ADDR_VAR 0 7
13214: PUSH
13215: LD_STRING 
13217: ST_TO_ADDR
// for i = 1 to normalCounter do
13218: LD_ADDR_VAR 0 8
13222: PUSH
13223: DOUBLE
13224: LD_INT 1
13226: DEC
13227: ST_TO_ADDR
13228: LD_EXP 50
13232: PUSH
13233: FOR_TO
13234: IFFALSE 13335
// begin tmp := 0 ;
13236: LD_ADDR_VAR 0 3
13240: PUSH
13241: LD_STRING 0
13243: ST_TO_ADDR
// if result [ 1 ] then
13244: LD_VAR 0 2
13248: PUSH
13249: LD_INT 1
13251: ARRAY
13252: IFFALSE 13317
// if result [ 1 ] [ 1 ] = i then
13254: LD_VAR 0 2
13258: PUSH
13259: LD_INT 1
13261: ARRAY
13262: PUSH
13263: LD_INT 1
13265: ARRAY
13266: PUSH
13267: LD_VAR 0 8
13271: EQUAL
13272: IFFALSE 13317
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
13274: LD_ADDR_VAR 0 2
13278: PUSH
13279: LD_VAR 0 2
13283: PPUSH
13284: LD_INT 1
13286: PPUSH
13287: LD_VAR 0 2
13291: PUSH
13292: LD_INT 1
13294: ARRAY
13295: PPUSH
13296: LD_INT 1
13298: PPUSH
13299: CALL_OW 3
13303: PPUSH
13304: CALL_OW 1
13308: ST_TO_ADDR
// tmp := 1 ;
13309: LD_ADDR_VAR 0 3
13313: PUSH
13314: LD_STRING 1
13316: ST_TO_ADDR
// end ; normal := normal & tmp ;
13317: LD_ADDR_VAR 0 5
13321: PUSH
13322: LD_VAR 0 5
13326: PUSH
13327: LD_VAR 0 3
13331: STR
13332: ST_TO_ADDR
// end ;
13333: GO 13233
13335: POP
13336: POP
// for i = 1 to hardcoreCounter do
13337: LD_ADDR_VAR 0 8
13341: PUSH
13342: DOUBLE
13343: LD_INT 1
13345: DEC
13346: ST_TO_ADDR
13347: LD_EXP 51
13351: PUSH
13352: FOR_TO
13353: IFFALSE 13458
// begin tmp := 0 ;
13355: LD_ADDR_VAR 0 3
13359: PUSH
13360: LD_STRING 0
13362: ST_TO_ADDR
// if result [ 2 ] then
13363: LD_VAR 0 2
13367: PUSH
13368: LD_INT 2
13370: ARRAY
13371: IFFALSE 13440
// if result [ 2 ] [ 1 ] = 100 + i then
13373: LD_VAR 0 2
13377: PUSH
13378: LD_INT 2
13380: ARRAY
13381: PUSH
13382: LD_INT 1
13384: ARRAY
13385: PUSH
13386: LD_INT 100
13388: PUSH
13389: LD_VAR 0 8
13393: PLUS
13394: EQUAL
13395: IFFALSE 13440
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
13397: LD_ADDR_VAR 0 2
13401: PUSH
13402: LD_VAR 0 2
13406: PPUSH
13407: LD_INT 2
13409: PPUSH
13410: LD_VAR 0 2
13414: PUSH
13415: LD_INT 2
13417: ARRAY
13418: PPUSH
13419: LD_INT 1
13421: PPUSH
13422: CALL_OW 3
13426: PPUSH
13427: CALL_OW 1
13431: ST_TO_ADDR
// tmp := 1 ;
13432: LD_ADDR_VAR 0 3
13436: PUSH
13437: LD_STRING 1
13439: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
13440: LD_ADDR_VAR 0 6
13444: PUSH
13445: LD_VAR 0 6
13449: PUSH
13450: LD_VAR 0 3
13454: STR
13455: ST_TO_ADDR
// end ;
13456: GO 13352
13458: POP
13459: POP
// if isGameLoad then
13460: LD_VAR 0 1
13464: IFFALSE 13939
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
13466: LD_ADDR_VAR 0 4
13470: PUSH
13471: LD_EXP 54
13475: PUSH
13476: LD_EXP 53
13480: PUSH
13481: LD_EXP 55
13485: PUSH
13486: LD_EXP 52
13490: PUSH
13491: LD_EXP 56
13495: PUSH
13496: LD_EXP 57
13500: PUSH
13501: LD_EXP 58
13505: PUSH
13506: LD_EXP 59
13510: PUSH
13511: LD_EXP 60
13515: PUSH
13516: LD_EXP 61
13520: PUSH
13521: LD_EXP 62
13525: PUSH
13526: LD_EXP 63
13530: PUSH
13531: LD_EXP 64
13535: PUSH
13536: LD_EXP 65
13540: PUSH
13541: LD_EXP 73
13545: PUSH
13546: LD_EXP 74
13550: PUSH
13551: LD_EXP 75
13555: PUSH
13556: LD_EXP 76
13560: PUSH
13561: LD_EXP 78
13565: PUSH
13566: LD_EXP 79
13570: PUSH
13571: LD_EXP 80
13575: PUSH
13576: LD_EXP 83
13580: PUSH
13581: LD_EXP 85
13585: PUSH
13586: LD_EXP 86
13590: PUSH
13591: LD_EXP 87
13595: PUSH
13596: LD_EXP 89
13600: PUSH
13601: LD_EXP 90
13605: PUSH
13606: LD_EXP 93
13610: PUSH
13611: LD_EXP 94
13615: PUSH
13616: LD_EXP 95
13620: PUSH
13621: LD_EXP 96
13625: PUSH
13626: LD_EXP 97
13630: PUSH
13631: LD_EXP 98
13635: PUSH
13636: LD_EXP 99
13640: PUSH
13641: LD_EXP 100
13645: PUSH
13646: LD_EXP 101
13650: PUSH
13651: LD_EXP 66
13655: PUSH
13656: LD_EXP 67
13660: PUSH
13661: LD_EXP 70
13665: PUSH
13666: LD_EXP 71
13670: PUSH
13671: LD_EXP 72
13675: PUSH
13676: LD_EXP 68
13680: PUSH
13681: LD_EXP 69
13685: PUSH
13686: LD_EXP 77
13690: PUSH
13691: LD_EXP 81
13695: PUSH
13696: LD_EXP 82
13700: PUSH
13701: LD_EXP 84
13705: PUSH
13706: LD_EXP 88
13710: PUSH
13711: LD_EXP 91
13715: PUSH
13716: LD_EXP 92
13720: PUSH
13721: LD_EXP 102
13725: PUSH
13726: LD_EXP 103
13730: PUSH
13731: LD_EXP 104
13735: PUSH
13736: LD_EXP 105
13740: PUSH
13741: EMPTY
13742: LIST
13743: LIST
13744: LIST
13745: LIST
13746: LIST
13747: LIST
13748: LIST
13749: LIST
13750: LIST
13751: LIST
13752: LIST
13753: LIST
13754: LIST
13755: LIST
13756: LIST
13757: LIST
13758: LIST
13759: LIST
13760: LIST
13761: LIST
13762: LIST
13763: LIST
13764: LIST
13765: LIST
13766: LIST
13767: LIST
13768: LIST
13769: LIST
13770: LIST
13771: LIST
13772: LIST
13773: LIST
13774: LIST
13775: LIST
13776: LIST
13777: LIST
13778: LIST
13779: LIST
13780: LIST
13781: LIST
13782: LIST
13783: LIST
13784: LIST
13785: LIST
13786: LIST
13787: LIST
13788: LIST
13789: LIST
13790: LIST
13791: LIST
13792: LIST
13793: LIST
13794: LIST
13795: LIST
13796: ST_TO_ADDR
// tmp :=  ;
13797: LD_ADDR_VAR 0 3
13801: PUSH
13802: LD_STRING 
13804: ST_TO_ADDR
// for i = 1 to normalCounter do
13805: LD_ADDR_VAR 0 8
13809: PUSH
13810: DOUBLE
13811: LD_INT 1
13813: DEC
13814: ST_TO_ADDR
13815: LD_EXP 50
13819: PUSH
13820: FOR_TO
13821: IFFALSE 13857
// begin if flags [ i ] then
13823: LD_VAR 0 4
13827: PUSH
13828: LD_VAR 0 8
13832: ARRAY
13833: IFFALSE 13855
// tmp := tmp & i & ; ;
13835: LD_ADDR_VAR 0 3
13839: PUSH
13840: LD_VAR 0 3
13844: PUSH
13845: LD_VAR 0 8
13849: STR
13850: PUSH
13851: LD_STRING ;
13853: STR
13854: ST_TO_ADDR
// end ;
13855: GO 13820
13857: POP
13858: POP
// for i = 1 to hardcoreCounter do
13859: LD_ADDR_VAR 0 8
13863: PUSH
13864: DOUBLE
13865: LD_INT 1
13867: DEC
13868: ST_TO_ADDR
13869: LD_EXP 51
13873: PUSH
13874: FOR_TO
13875: IFFALSE 13921
// begin if flags [ normalCounter + i ] then
13877: LD_VAR 0 4
13881: PUSH
13882: LD_EXP 50
13886: PUSH
13887: LD_VAR 0 8
13891: PLUS
13892: ARRAY
13893: IFFALSE 13919
// tmp := tmp & ( 100 + i ) & ; ;
13895: LD_ADDR_VAR 0 3
13899: PUSH
13900: LD_VAR 0 3
13904: PUSH
13905: LD_INT 100
13907: PUSH
13908: LD_VAR 0 8
13912: PLUS
13913: STR
13914: PUSH
13915: LD_STRING ;
13917: STR
13918: ST_TO_ADDR
// end ;
13919: GO 13874
13921: POP
13922: POP
// if tmp then
13923: LD_VAR 0 3
13927: IFFALSE 13939
// active := tmp ;
13929: LD_ADDR_VAR 0 7
13933: PUSH
13934: LD_VAR 0 3
13938: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
13939: LD_STRING getStreamItemsFromMission("
13941: PUSH
13942: LD_VAR 0 5
13946: STR
13947: PUSH
13948: LD_STRING ","
13950: STR
13951: PUSH
13952: LD_VAR 0 6
13956: STR
13957: PUSH
13958: LD_STRING ","
13960: STR
13961: PUSH
13962: LD_VAR 0 7
13966: STR
13967: PUSH
13968: LD_STRING ")
13970: STR
13971: PPUSH
13972: CALL_OW 559
// end else
13976: GO 13985
// ToLua ( getStreamItemsFromMission("","","") ) ;
13978: LD_STRING getStreamItemsFromMission("","","")
13980: PPUSH
13981: CALL_OW 559
// end ;
13985: LD_VAR 0 2
13989: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
13990: LD_EXP 49
13994: PUSH
13995: LD_EXP 54
13999: AND
14000: IFFALSE 14124
14002: GO 14004
14004: DISABLE
14005: LD_INT 0
14007: PPUSH
14008: PPUSH
// begin enable ;
14009: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
14010: LD_ADDR_VAR 0 2
14014: PUSH
14015: LD_INT 22
14017: PUSH
14018: LD_OWVAR 2
14022: PUSH
14023: EMPTY
14024: LIST
14025: LIST
14026: PUSH
14027: LD_INT 2
14029: PUSH
14030: LD_INT 34
14032: PUSH
14033: LD_INT 7
14035: PUSH
14036: EMPTY
14037: LIST
14038: LIST
14039: PUSH
14040: LD_INT 34
14042: PUSH
14043: LD_INT 45
14045: PUSH
14046: EMPTY
14047: LIST
14048: LIST
14049: PUSH
14050: LD_INT 34
14052: PUSH
14053: LD_INT 28
14055: PUSH
14056: EMPTY
14057: LIST
14058: LIST
14059: PUSH
14060: LD_INT 34
14062: PUSH
14063: LD_INT 47
14065: PUSH
14066: EMPTY
14067: LIST
14068: LIST
14069: PUSH
14070: EMPTY
14071: LIST
14072: LIST
14073: LIST
14074: LIST
14075: LIST
14076: PUSH
14077: EMPTY
14078: LIST
14079: LIST
14080: PPUSH
14081: CALL_OW 69
14085: ST_TO_ADDR
// if not tmp then
14086: LD_VAR 0 2
14090: NOT
14091: IFFALSE 14095
// exit ;
14093: GO 14124
// for i in tmp do
14095: LD_ADDR_VAR 0 1
14099: PUSH
14100: LD_VAR 0 2
14104: PUSH
14105: FOR_IN
14106: IFFALSE 14122
// begin SetLives ( i , 0 ) ;
14108: LD_VAR 0 1
14112: PPUSH
14113: LD_INT 0
14115: PPUSH
14116: CALL_OW 234
// end ;
14120: GO 14105
14122: POP
14123: POP
// end ;
14124: PPOPN 2
14126: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
14127: LD_EXP 49
14131: PUSH
14132: LD_EXP 55
14136: AND
14137: IFFALSE 14221
14139: GO 14141
14141: DISABLE
14142: LD_INT 0
14144: PPUSH
14145: PPUSH
// begin enable ;
14146: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
14147: LD_ADDR_VAR 0 2
14151: PUSH
14152: LD_INT 22
14154: PUSH
14155: LD_OWVAR 2
14159: PUSH
14160: EMPTY
14161: LIST
14162: LIST
14163: PUSH
14164: LD_INT 32
14166: PUSH
14167: LD_INT 3
14169: PUSH
14170: EMPTY
14171: LIST
14172: LIST
14173: PUSH
14174: EMPTY
14175: LIST
14176: LIST
14177: PPUSH
14178: CALL_OW 69
14182: ST_TO_ADDR
// if not tmp then
14183: LD_VAR 0 2
14187: NOT
14188: IFFALSE 14192
// exit ;
14190: GO 14221
// for i in tmp do
14192: LD_ADDR_VAR 0 1
14196: PUSH
14197: LD_VAR 0 2
14201: PUSH
14202: FOR_IN
14203: IFFALSE 14219
// begin SetLives ( i , 0 ) ;
14205: LD_VAR 0 1
14209: PPUSH
14210: LD_INT 0
14212: PPUSH
14213: CALL_OW 234
// end ;
14217: GO 14202
14219: POP
14220: POP
// end ;
14221: PPOPN 2
14223: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
14224: LD_EXP 49
14228: PUSH
14229: LD_EXP 52
14233: AND
14234: IFFALSE 14327
14236: GO 14238
14238: DISABLE
14239: LD_INT 0
14241: PPUSH
// begin enable ;
14242: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
14243: LD_ADDR_VAR 0 1
14247: PUSH
14248: LD_INT 22
14250: PUSH
14251: LD_OWVAR 2
14255: PUSH
14256: EMPTY
14257: LIST
14258: LIST
14259: PUSH
14260: LD_INT 2
14262: PUSH
14263: LD_INT 25
14265: PUSH
14266: LD_INT 5
14268: PUSH
14269: EMPTY
14270: LIST
14271: LIST
14272: PUSH
14273: LD_INT 25
14275: PUSH
14276: LD_INT 9
14278: PUSH
14279: EMPTY
14280: LIST
14281: LIST
14282: PUSH
14283: LD_INT 25
14285: PUSH
14286: LD_INT 8
14288: PUSH
14289: EMPTY
14290: LIST
14291: LIST
14292: PUSH
14293: EMPTY
14294: LIST
14295: LIST
14296: LIST
14297: LIST
14298: PUSH
14299: EMPTY
14300: LIST
14301: LIST
14302: PPUSH
14303: CALL_OW 69
14307: PUSH
14308: FOR_IN
14309: IFFALSE 14325
// begin SetClass ( i , 1 ) ;
14311: LD_VAR 0 1
14315: PPUSH
14316: LD_INT 1
14318: PPUSH
14319: CALL_OW 336
// end ;
14323: GO 14308
14325: POP
14326: POP
// end ;
14327: PPOPN 1
14329: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
14330: LD_EXP 49
14334: PUSH
14335: LD_EXP 53
14339: AND
14340: PUSH
14341: LD_OWVAR 65
14345: PUSH
14346: LD_INT 7
14348: LESS
14349: AND
14350: IFFALSE 14364
14352: GO 14354
14354: DISABLE
// begin enable ;
14355: ENABLE
// game_speed := 7 ;
14356: LD_ADDR_OWVAR 65
14360: PUSH
14361: LD_INT 7
14363: ST_TO_ADDR
// end ;
14364: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
14365: LD_EXP 49
14369: PUSH
14370: LD_EXP 56
14374: AND
14375: IFFALSE 14577
14377: GO 14379
14379: DISABLE
14380: LD_INT 0
14382: PPUSH
14383: PPUSH
14384: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
14385: LD_ADDR_VAR 0 3
14389: PUSH
14390: LD_INT 81
14392: PUSH
14393: LD_OWVAR 2
14397: PUSH
14398: EMPTY
14399: LIST
14400: LIST
14401: PUSH
14402: LD_INT 21
14404: PUSH
14405: LD_INT 1
14407: PUSH
14408: EMPTY
14409: LIST
14410: LIST
14411: PUSH
14412: EMPTY
14413: LIST
14414: LIST
14415: PPUSH
14416: CALL_OW 69
14420: ST_TO_ADDR
// if not tmp then
14421: LD_VAR 0 3
14425: NOT
14426: IFFALSE 14430
// exit ;
14428: GO 14577
// if tmp > 5 then
14430: LD_VAR 0 3
14434: PUSH
14435: LD_INT 5
14437: GREATER
14438: IFFALSE 14450
// k := 5 else
14440: LD_ADDR_VAR 0 2
14444: PUSH
14445: LD_INT 5
14447: ST_TO_ADDR
14448: GO 14460
// k := tmp ;
14450: LD_ADDR_VAR 0 2
14454: PUSH
14455: LD_VAR 0 3
14459: ST_TO_ADDR
// for i := 1 to k do
14460: LD_ADDR_VAR 0 1
14464: PUSH
14465: DOUBLE
14466: LD_INT 1
14468: DEC
14469: ST_TO_ADDR
14470: LD_VAR 0 2
14474: PUSH
14475: FOR_TO
14476: IFFALSE 14575
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
14478: LD_VAR 0 3
14482: PUSH
14483: LD_VAR 0 1
14487: ARRAY
14488: PPUSH
14489: LD_VAR 0 1
14493: PUSH
14494: LD_INT 4
14496: MOD
14497: PUSH
14498: LD_INT 1
14500: PLUS
14501: PPUSH
14502: CALL_OW 259
14506: PUSH
14507: LD_INT 10
14509: LESS
14510: IFFALSE 14573
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
14512: LD_VAR 0 3
14516: PUSH
14517: LD_VAR 0 1
14521: ARRAY
14522: PPUSH
14523: LD_VAR 0 1
14527: PUSH
14528: LD_INT 4
14530: MOD
14531: PUSH
14532: LD_INT 1
14534: PLUS
14535: PPUSH
14536: LD_VAR 0 3
14540: PUSH
14541: LD_VAR 0 1
14545: ARRAY
14546: PPUSH
14547: LD_VAR 0 1
14551: PUSH
14552: LD_INT 4
14554: MOD
14555: PUSH
14556: LD_INT 1
14558: PLUS
14559: PPUSH
14560: CALL_OW 259
14564: PUSH
14565: LD_INT 1
14567: PLUS
14568: PPUSH
14569: CALL_OW 237
14573: GO 14475
14575: POP
14576: POP
// end ;
14577: PPOPN 3
14579: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
14580: LD_EXP 49
14584: PUSH
14585: LD_EXP 57
14589: AND
14590: IFFALSE 14610
14592: GO 14594
14594: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
14595: LD_INT 4
14597: PPUSH
14598: LD_OWVAR 2
14602: PPUSH
14603: LD_INT 0
14605: PPUSH
14606: CALL_OW 324
14610: END
// every 0 0$1 trigger StreamModeActive and sShovel do
14611: LD_EXP 49
14615: PUSH
14616: LD_EXP 86
14620: AND
14621: IFFALSE 14641
14623: GO 14625
14625: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
14626: LD_INT 19
14628: PPUSH
14629: LD_OWVAR 2
14633: PPUSH
14634: LD_INT 0
14636: PPUSH
14637: CALL_OW 324
14641: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
14642: LD_EXP 49
14646: PUSH
14647: LD_EXP 58
14651: AND
14652: IFFALSE 14754
14654: GO 14656
14656: DISABLE
14657: LD_INT 0
14659: PPUSH
14660: PPUSH
// begin enable ;
14661: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
14662: LD_ADDR_VAR 0 2
14666: PUSH
14667: LD_INT 22
14669: PUSH
14670: LD_OWVAR 2
14674: PUSH
14675: EMPTY
14676: LIST
14677: LIST
14678: PUSH
14679: LD_INT 2
14681: PUSH
14682: LD_INT 34
14684: PUSH
14685: LD_INT 11
14687: PUSH
14688: EMPTY
14689: LIST
14690: LIST
14691: PUSH
14692: LD_INT 34
14694: PUSH
14695: LD_INT 30
14697: PUSH
14698: EMPTY
14699: LIST
14700: LIST
14701: PUSH
14702: EMPTY
14703: LIST
14704: LIST
14705: LIST
14706: PUSH
14707: EMPTY
14708: LIST
14709: LIST
14710: PPUSH
14711: CALL_OW 69
14715: ST_TO_ADDR
// if not tmp then
14716: LD_VAR 0 2
14720: NOT
14721: IFFALSE 14725
// exit ;
14723: GO 14754
// for i in tmp do
14725: LD_ADDR_VAR 0 1
14729: PUSH
14730: LD_VAR 0 2
14734: PUSH
14735: FOR_IN
14736: IFFALSE 14752
// begin SetLives ( i , 0 ) ;
14738: LD_VAR 0 1
14742: PPUSH
14743: LD_INT 0
14745: PPUSH
14746: CALL_OW 234
// end ;
14750: GO 14735
14752: POP
14753: POP
// end ;
14754: PPOPN 2
14756: END
// every 0 0$1 trigger StreamModeActive and sBunker do
14757: LD_EXP 49
14761: PUSH
14762: LD_EXP 59
14766: AND
14767: IFFALSE 14787
14769: GO 14771
14771: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
14772: LD_INT 32
14774: PPUSH
14775: LD_OWVAR 2
14779: PPUSH
14780: LD_INT 0
14782: PPUSH
14783: CALL_OW 324
14787: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
14788: LD_EXP 49
14792: PUSH
14793: LD_EXP 60
14797: AND
14798: IFFALSE 14979
14800: GO 14802
14802: DISABLE
14803: LD_INT 0
14805: PPUSH
14806: PPUSH
14807: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
14808: LD_ADDR_VAR 0 2
14812: PUSH
14813: LD_INT 22
14815: PUSH
14816: LD_OWVAR 2
14820: PUSH
14821: EMPTY
14822: LIST
14823: LIST
14824: PUSH
14825: LD_INT 33
14827: PUSH
14828: LD_INT 3
14830: PUSH
14831: EMPTY
14832: LIST
14833: LIST
14834: PUSH
14835: EMPTY
14836: LIST
14837: LIST
14838: PPUSH
14839: CALL_OW 69
14843: ST_TO_ADDR
// if not tmp then
14844: LD_VAR 0 2
14848: NOT
14849: IFFALSE 14853
// exit ;
14851: GO 14979
// side := 0 ;
14853: LD_ADDR_VAR 0 3
14857: PUSH
14858: LD_INT 0
14860: ST_TO_ADDR
// for i := 1 to 8 do
14861: LD_ADDR_VAR 0 1
14865: PUSH
14866: DOUBLE
14867: LD_INT 1
14869: DEC
14870: ST_TO_ADDR
14871: LD_INT 8
14873: PUSH
14874: FOR_TO
14875: IFFALSE 14923
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
14877: LD_OWVAR 2
14881: PUSH
14882: LD_VAR 0 1
14886: NONEQUAL
14887: PUSH
14888: LD_OWVAR 2
14892: PPUSH
14893: LD_VAR 0 1
14897: PPUSH
14898: CALL_OW 81
14902: PUSH
14903: LD_INT 2
14905: EQUAL
14906: AND
14907: IFFALSE 14921
// begin side := i ;
14909: LD_ADDR_VAR 0 3
14913: PUSH
14914: LD_VAR 0 1
14918: ST_TO_ADDR
// break ;
14919: GO 14923
// end ;
14921: GO 14874
14923: POP
14924: POP
// if not side then
14925: LD_VAR 0 3
14929: NOT
14930: IFFALSE 14934
// exit ;
14932: GO 14979
// for i := 1 to tmp do
14934: LD_ADDR_VAR 0 1
14938: PUSH
14939: DOUBLE
14940: LD_INT 1
14942: DEC
14943: ST_TO_ADDR
14944: LD_VAR 0 2
14948: PUSH
14949: FOR_TO
14950: IFFALSE 14977
// if Prob ( 60 ) then
14952: LD_INT 60
14954: PPUSH
14955: CALL_OW 13
14959: IFFALSE 14975
// SetSide ( i , side ) ;
14961: LD_VAR 0 1
14965: PPUSH
14966: LD_VAR 0 3
14970: PPUSH
14971: CALL_OW 235
14975: GO 14949
14977: POP
14978: POP
// end ;
14979: PPOPN 3
14981: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
14982: LD_EXP 49
14986: PUSH
14987: LD_EXP 62
14991: AND
14992: IFFALSE 15111
14994: GO 14996
14996: DISABLE
14997: LD_INT 0
14999: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
15000: LD_ADDR_VAR 0 1
15004: PUSH
15005: LD_INT 22
15007: PUSH
15008: LD_OWVAR 2
15012: PUSH
15013: EMPTY
15014: LIST
15015: LIST
15016: PUSH
15017: LD_INT 21
15019: PUSH
15020: LD_INT 1
15022: PUSH
15023: EMPTY
15024: LIST
15025: LIST
15026: PUSH
15027: LD_INT 3
15029: PUSH
15030: LD_INT 23
15032: PUSH
15033: LD_INT 0
15035: PUSH
15036: EMPTY
15037: LIST
15038: LIST
15039: PUSH
15040: EMPTY
15041: LIST
15042: LIST
15043: PUSH
15044: EMPTY
15045: LIST
15046: LIST
15047: LIST
15048: PPUSH
15049: CALL_OW 69
15053: PUSH
15054: FOR_IN
15055: IFFALSE 15109
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
15057: LD_VAR 0 1
15061: PPUSH
15062: CALL_OW 257
15066: PUSH
15067: LD_INT 1
15069: PUSH
15070: LD_INT 2
15072: PUSH
15073: LD_INT 3
15075: PUSH
15076: LD_INT 4
15078: PUSH
15079: EMPTY
15080: LIST
15081: LIST
15082: LIST
15083: LIST
15084: IN
15085: IFFALSE 15107
// SetClass ( un , rand ( 1 , 4 ) ) ;
15087: LD_VAR 0 1
15091: PPUSH
15092: LD_INT 1
15094: PPUSH
15095: LD_INT 4
15097: PPUSH
15098: CALL_OW 12
15102: PPUSH
15103: CALL_OW 336
15107: GO 15054
15109: POP
15110: POP
// end ;
15111: PPOPN 1
15113: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
15114: LD_EXP 49
15118: PUSH
15119: LD_EXP 61
15123: AND
15124: IFFALSE 15203
15126: GO 15128
15128: DISABLE
15129: LD_INT 0
15131: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
15132: LD_ADDR_VAR 0 1
15136: PUSH
15137: LD_INT 22
15139: PUSH
15140: LD_OWVAR 2
15144: PUSH
15145: EMPTY
15146: LIST
15147: LIST
15148: PUSH
15149: LD_INT 21
15151: PUSH
15152: LD_INT 3
15154: PUSH
15155: EMPTY
15156: LIST
15157: LIST
15158: PUSH
15159: EMPTY
15160: LIST
15161: LIST
15162: PPUSH
15163: CALL_OW 69
15167: ST_TO_ADDR
// if not tmp then
15168: LD_VAR 0 1
15172: NOT
15173: IFFALSE 15177
// exit ;
15175: GO 15203
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
15177: LD_VAR 0 1
15181: PUSH
15182: LD_INT 1
15184: PPUSH
15185: LD_VAR 0 1
15189: PPUSH
15190: CALL_OW 12
15194: ARRAY
15195: PPUSH
15196: LD_INT 100
15198: PPUSH
15199: CALL_OW 234
// end ;
15203: PPOPN 1
15205: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
15206: LD_EXP 49
15210: PUSH
15211: LD_EXP 63
15215: AND
15216: IFFALSE 15314
15218: GO 15220
15220: DISABLE
15221: LD_INT 0
15223: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
15224: LD_ADDR_VAR 0 1
15228: PUSH
15229: LD_INT 22
15231: PUSH
15232: LD_OWVAR 2
15236: PUSH
15237: EMPTY
15238: LIST
15239: LIST
15240: PUSH
15241: LD_INT 21
15243: PUSH
15244: LD_INT 1
15246: PUSH
15247: EMPTY
15248: LIST
15249: LIST
15250: PUSH
15251: EMPTY
15252: LIST
15253: LIST
15254: PPUSH
15255: CALL_OW 69
15259: ST_TO_ADDR
// if not tmp then
15260: LD_VAR 0 1
15264: NOT
15265: IFFALSE 15269
// exit ;
15267: GO 15314
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
15269: LD_VAR 0 1
15273: PUSH
15274: LD_INT 1
15276: PPUSH
15277: LD_VAR 0 1
15281: PPUSH
15282: CALL_OW 12
15286: ARRAY
15287: PPUSH
15288: LD_INT 1
15290: PPUSH
15291: LD_INT 4
15293: PPUSH
15294: CALL_OW 12
15298: PPUSH
15299: LD_INT 3000
15301: PPUSH
15302: LD_INT 9000
15304: PPUSH
15305: CALL_OW 12
15309: PPUSH
15310: CALL_OW 492
// end ;
15314: PPOPN 1
15316: END
// every 0 0$1 trigger StreamModeActive and sDepot do
15317: LD_EXP 49
15321: PUSH
15322: LD_EXP 64
15326: AND
15327: IFFALSE 15347
15329: GO 15331
15331: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
15332: LD_INT 1
15334: PPUSH
15335: LD_OWVAR 2
15339: PPUSH
15340: LD_INT 0
15342: PPUSH
15343: CALL_OW 324
15347: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
15348: LD_EXP 49
15352: PUSH
15353: LD_EXP 65
15357: AND
15358: IFFALSE 15441
15360: GO 15362
15362: DISABLE
15363: LD_INT 0
15365: PPUSH
15366: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
15367: LD_ADDR_VAR 0 2
15371: PUSH
15372: LD_INT 22
15374: PUSH
15375: LD_OWVAR 2
15379: PUSH
15380: EMPTY
15381: LIST
15382: LIST
15383: PUSH
15384: LD_INT 21
15386: PUSH
15387: LD_INT 3
15389: PUSH
15390: EMPTY
15391: LIST
15392: LIST
15393: PUSH
15394: EMPTY
15395: LIST
15396: LIST
15397: PPUSH
15398: CALL_OW 69
15402: ST_TO_ADDR
// if not tmp then
15403: LD_VAR 0 2
15407: NOT
15408: IFFALSE 15412
// exit ;
15410: GO 15441
// for i in tmp do
15412: LD_ADDR_VAR 0 1
15416: PUSH
15417: LD_VAR 0 2
15421: PUSH
15422: FOR_IN
15423: IFFALSE 15439
// SetBLevel ( i , 10 ) ;
15425: LD_VAR 0 1
15429: PPUSH
15430: LD_INT 10
15432: PPUSH
15433: CALL_OW 241
15437: GO 15422
15439: POP
15440: POP
// end ;
15441: PPOPN 2
15443: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
15444: LD_EXP 49
15448: PUSH
15449: LD_EXP 66
15453: AND
15454: IFFALSE 15565
15456: GO 15458
15458: DISABLE
15459: LD_INT 0
15461: PPUSH
15462: PPUSH
15463: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15464: LD_ADDR_VAR 0 3
15468: PUSH
15469: LD_INT 22
15471: PUSH
15472: LD_OWVAR 2
15476: PUSH
15477: EMPTY
15478: LIST
15479: LIST
15480: PUSH
15481: LD_INT 25
15483: PUSH
15484: LD_INT 1
15486: PUSH
15487: EMPTY
15488: LIST
15489: LIST
15490: PUSH
15491: EMPTY
15492: LIST
15493: LIST
15494: PPUSH
15495: CALL_OW 69
15499: ST_TO_ADDR
// if not tmp then
15500: LD_VAR 0 3
15504: NOT
15505: IFFALSE 15509
// exit ;
15507: GO 15565
// un := tmp [ rand ( 1 , tmp ) ] ;
15509: LD_ADDR_VAR 0 2
15513: PUSH
15514: LD_VAR 0 3
15518: PUSH
15519: LD_INT 1
15521: PPUSH
15522: LD_VAR 0 3
15526: PPUSH
15527: CALL_OW 12
15531: ARRAY
15532: ST_TO_ADDR
// if Crawls ( un ) then
15533: LD_VAR 0 2
15537: PPUSH
15538: CALL_OW 318
15542: IFFALSE 15553
// ComWalk ( un ) ;
15544: LD_VAR 0 2
15548: PPUSH
15549: CALL_OW 138
// SetClass ( un , class_sniper ) ;
15553: LD_VAR 0 2
15557: PPUSH
15558: LD_INT 5
15560: PPUSH
15561: CALL_OW 336
// end ;
15565: PPOPN 3
15567: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
15568: LD_EXP 49
15572: PUSH
15573: LD_EXP 67
15577: AND
15578: PUSH
15579: LD_OWVAR 67
15583: PUSH
15584: LD_INT 4
15586: LESS
15587: AND
15588: IFFALSE 15607
15590: GO 15592
15592: DISABLE
// begin Difficulty := Difficulty + 1 ;
15593: LD_ADDR_OWVAR 67
15597: PUSH
15598: LD_OWVAR 67
15602: PUSH
15603: LD_INT 1
15605: PLUS
15606: ST_TO_ADDR
// end ;
15607: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
15608: LD_EXP 49
15612: PUSH
15613: LD_EXP 68
15617: AND
15618: IFFALSE 15721
15620: GO 15622
15622: DISABLE
15623: LD_INT 0
15625: PPUSH
// begin for i := 1 to 5 do
15626: LD_ADDR_VAR 0 1
15630: PUSH
15631: DOUBLE
15632: LD_INT 1
15634: DEC
15635: ST_TO_ADDR
15636: LD_INT 5
15638: PUSH
15639: FOR_TO
15640: IFFALSE 15719
// begin uc_nation := nation_nature ;
15642: LD_ADDR_OWVAR 21
15646: PUSH
15647: LD_INT 0
15649: ST_TO_ADDR
// uc_side := 0 ;
15650: LD_ADDR_OWVAR 20
15654: PUSH
15655: LD_INT 0
15657: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
15658: LD_ADDR_OWVAR 29
15662: PUSH
15663: LD_INT 12
15665: PUSH
15666: LD_INT 12
15668: PUSH
15669: EMPTY
15670: LIST
15671: LIST
15672: ST_TO_ADDR
// hc_agressivity := 20 ;
15673: LD_ADDR_OWVAR 35
15677: PUSH
15678: LD_INT 20
15680: ST_TO_ADDR
// hc_class := class_tiger ;
15681: LD_ADDR_OWVAR 28
15685: PUSH
15686: LD_INT 14
15688: ST_TO_ADDR
// hc_gallery :=  ;
15689: LD_ADDR_OWVAR 33
15693: PUSH
15694: LD_STRING 
15696: ST_TO_ADDR
// hc_name :=  ;
15697: LD_ADDR_OWVAR 26
15701: PUSH
15702: LD_STRING 
15704: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
15705: CALL_OW 44
15709: PPUSH
15710: LD_INT 0
15712: PPUSH
15713: CALL_OW 51
// end ;
15717: GO 15639
15719: POP
15720: POP
// end ;
15721: PPOPN 1
15723: END
// every 0 0$1 trigger StreamModeActive and sBomb do
15724: LD_EXP 49
15728: PUSH
15729: LD_EXP 69
15733: AND
15734: IFFALSE 15743
15736: GO 15738
15738: DISABLE
// StreamSibBomb ;
15739: CALL 15744 0 0
15743: END
// export function StreamSibBomb ; var i , x , y ; begin
15744: LD_INT 0
15746: PPUSH
15747: PPUSH
15748: PPUSH
15749: PPUSH
// result := false ;
15750: LD_ADDR_VAR 0 1
15754: PUSH
15755: LD_INT 0
15757: ST_TO_ADDR
// for i := 1 to 16 do
15758: LD_ADDR_VAR 0 2
15762: PUSH
15763: DOUBLE
15764: LD_INT 1
15766: DEC
15767: ST_TO_ADDR
15768: LD_INT 16
15770: PUSH
15771: FOR_TO
15772: IFFALSE 15971
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
15774: LD_ADDR_VAR 0 3
15778: PUSH
15779: LD_INT 10
15781: PUSH
15782: LD_INT 20
15784: PUSH
15785: LD_INT 30
15787: PUSH
15788: LD_INT 40
15790: PUSH
15791: LD_INT 50
15793: PUSH
15794: LD_INT 60
15796: PUSH
15797: LD_INT 70
15799: PUSH
15800: LD_INT 80
15802: PUSH
15803: LD_INT 90
15805: PUSH
15806: LD_INT 100
15808: PUSH
15809: LD_INT 110
15811: PUSH
15812: LD_INT 120
15814: PUSH
15815: LD_INT 130
15817: PUSH
15818: LD_INT 140
15820: PUSH
15821: LD_INT 150
15823: PUSH
15824: EMPTY
15825: LIST
15826: LIST
15827: LIST
15828: LIST
15829: LIST
15830: LIST
15831: LIST
15832: LIST
15833: LIST
15834: LIST
15835: LIST
15836: LIST
15837: LIST
15838: LIST
15839: LIST
15840: PUSH
15841: LD_INT 1
15843: PPUSH
15844: LD_INT 15
15846: PPUSH
15847: CALL_OW 12
15851: ARRAY
15852: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
15853: LD_ADDR_VAR 0 4
15857: PUSH
15858: LD_INT 10
15860: PUSH
15861: LD_INT 20
15863: PUSH
15864: LD_INT 30
15866: PUSH
15867: LD_INT 40
15869: PUSH
15870: LD_INT 50
15872: PUSH
15873: LD_INT 60
15875: PUSH
15876: LD_INT 70
15878: PUSH
15879: LD_INT 80
15881: PUSH
15882: LD_INT 90
15884: PUSH
15885: LD_INT 100
15887: PUSH
15888: LD_INT 110
15890: PUSH
15891: LD_INT 120
15893: PUSH
15894: LD_INT 130
15896: PUSH
15897: LD_INT 140
15899: PUSH
15900: LD_INT 150
15902: PUSH
15903: EMPTY
15904: LIST
15905: LIST
15906: LIST
15907: LIST
15908: LIST
15909: LIST
15910: LIST
15911: LIST
15912: LIST
15913: LIST
15914: LIST
15915: LIST
15916: LIST
15917: LIST
15918: LIST
15919: PUSH
15920: LD_INT 1
15922: PPUSH
15923: LD_INT 15
15925: PPUSH
15926: CALL_OW 12
15930: ARRAY
15931: ST_TO_ADDR
// if ValidHex ( x , y ) then
15932: LD_VAR 0 3
15936: PPUSH
15937: LD_VAR 0 4
15941: PPUSH
15942: CALL_OW 488
15946: IFFALSE 15969
// begin result := [ x , y ] ;
15948: LD_ADDR_VAR 0 1
15952: PUSH
15953: LD_VAR 0 3
15957: PUSH
15958: LD_VAR 0 4
15962: PUSH
15963: EMPTY
15964: LIST
15965: LIST
15966: ST_TO_ADDR
// break ;
15967: GO 15971
// end ; end ;
15969: GO 15771
15971: POP
15972: POP
// if result then
15973: LD_VAR 0 1
15977: IFFALSE 16037
// begin ToLua ( playSibBomb() ) ;
15979: LD_STRING playSibBomb()
15981: PPUSH
15982: CALL_OW 559
// wait ( 0 0$14 ) ;
15986: LD_INT 490
15988: PPUSH
15989: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
15993: LD_VAR 0 1
15997: PUSH
15998: LD_INT 1
16000: ARRAY
16001: PPUSH
16002: LD_VAR 0 1
16006: PUSH
16007: LD_INT 2
16009: ARRAY
16010: PPUSH
16011: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
16015: LD_VAR 0 1
16019: PUSH
16020: LD_INT 1
16022: ARRAY
16023: PPUSH
16024: LD_VAR 0 1
16028: PUSH
16029: LD_INT 2
16031: ARRAY
16032: PPUSH
16033: CALL_OW 429
// end ; end ;
16037: LD_VAR 0 1
16041: RET
// every 0 0$1 trigger StreamModeActive and sReset do
16042: LD_EXP 49
16046: PUSH
16047: LD_EXP 71
16051: AND
16052: IFFALSE 16064
16054: GO 16056
16056: DISABLE
// YouLost (  ) ;
16057: LD_STRING 
16059: PPUSH
16060: CALL_OW 104
16064: END
// every 0 0$1 trigger StreamModeActive and sFog do
16065: LD_EXP 49
16069: PUSH
16070: LD_EXP 70
16074: AND
16075: IFFALSE 16089
16077: GO 16079
16079: DISABLE
// FogOff ( your_side ) ;
16080: LD_OWVAR 2
16084: PPUSH
16085: CALL_OW 344
16089: END
// every 0 0$1 trigger StreamModeActive and sSun do
16090: LD_EXP 49
16094: PUSH
16095: LD_EXP 72
16099: AND
16100: IFFALSE 16128
16102: GO 16104
16104: DISABLE
// begin solar_recharge_percent := 0 ;
16105: LD_ADDR_OWVAR 79
16109: PUSH
16110: LD_INT 0
16112: ST_TO_ADDR
// wait ( 5 5$00 ) ;
16113: LD_INT 10500
16115: PPUSH
16116: CALL_OW 67
// solar_recharge_percent := 100 ;
16120: LD_ADDR_OWVAR 79
16124: PUSH
16125: LD_INT 100
16127: ST_TO_ADDR
// end ;
16128: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
16129: LD_EXP 49
16133: PUSH
16134: LD_EXP 73
16138: AND
16139: IFFALSE 16378
16141: GO 16143
16143: DISABLE
16144: LD_INT 0
16146: PPUSH
16147: PPUSH
16148: PPUSH
// begin tmp := [ ] ;
16149: LD_ADDR_VAR 0 3
16153: PUSH
16154: EMPTY
16155: ST_TO_ADDR
// for i := 1 to 6 do
16156: LD_ADDR_VAR 0 1
16160: PUSH
16161: DOUBLE
16162: LD_INT 1
16164: DEC
16165: ST_TO_ADDR
16166: LD_INT 6
16168: PUSH
16169: FOR_TO
16170: IFFALSE 16275
// begin uc_nation := nation_nature ;
16172: LD_ADDR_OWVAR 21
16176: PUSH
16177: LD_INT 0
16179: ST_TO_ADDR
// uc_side := 0 ;
16180: LD_ADDR_OWVAR 20
16184: PUSH
16185: LD_INT 0
16187: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
16188: LD_ADDR_OWVAR 29
16192: PUSH
16193: LD_INT 12
16195: PUSH
16196: LD_INT 12
16198: PUSH
16199: EMPTY
16200: LIST
16201: LIST
16202: ST_TO_ADDR
// hc_agressivity := 20 ;
16203: LD_ADDR_OWVAR 35
16207: PUSH
16208: LD_INT 20
16210: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
16211: LD_ADDR_OWVAR 28
16215: PUSH
16216: LD_INT 17
16218: ST_TO_ADDR
// hc_gallery :=  ;
16219: LD_ADDR_OWVAR 33
16223: PUSH
16224: LD_STRING 
16226: ST_TO_ADDR
// hc_name :=  ;
16227: LD_ADDR_OWVAR 26
16231: PUSH
16232: LD_STRING 
16234: ST_TO_ADDR
// un := CreateHuman ;
16235: LD_ADDR_VAR 0 2
16239: PUSH
16240: CALL_OW 44
16244: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
16245: LD_VAR 0 2
16249: PPUSH
16250: LD_INT 1
16252: PPUSH
16253: CALL_OW 51
// tmp := tmp ^ un ;
16257: LD_ADDR_VAR 0 3
16261: PUSH
16262: LD_VAR 0 3
16266: PUSH
16267: LD_VAR 0 2
16271: ADD
16272: ST_TO_ADDR
// end ;
16273: GO 16169
16275: POP
16276: POP
// repeat wait ( 0 0$1 ) ;
16277: LD_INT 35
16279: PPUSH
16280: CALL_OW 67
// for un in tmp do
16284: LD_ADDR_VAR 0 2
16288: PUSH
16289: LD_VAR 0 3
16293: PUSH
16294: FOR_IN
16295: IFFALSE 16369
// begin if IsDead ( un ) then
16297: LD_VAR 0 2
16301: PPUSH
16302: CALL_OW 301
16306: IFFALSE 16326
// begin tmp := tmp diff un ;
16308: LD_ADDR_VAR 0 3
16312: PUSH
16313: LD_VAR 0 3
16317: PUSH
16318: LD_VAR 0 2
16322: DIFF
16323: ST_TO_ADDR
// continue ;
16324: GO 16294
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
16326: LD_VAR 0 2
16330: PPUSH
16331: LD_INT 3
16333: PUSH
16334: LD_INT 22
16336: PUSH
16337: LD_INT 0
16339: PUSH
16340: EMPTY
16341: LIST
16342: LIST
16343: PUSH
16344: EMPTY
16345: LIST
16346: LIST
16347: PPUSH
16348: CALL_OW 69
16352: PPUSH
16353: LD_VAR 0 2
16357: PPUSH
16358: CALL_OW 74
16362: PPUSH
16363: CALL_OW 115
// end ;
16367: GO 16294
16369: POP
16370: POP
// until not tmp ;
16371: LD_VAR 0 3
16375: NOT
16376: IFFALSE 16277
// end ;
16378: PPOPN 3
16380: END
// every 0 0$1 trigger StreamModeActive and sTroll do
16381: LD_EXP 49
16385: PUSH
16386: LD_EXP 74
16390: AND
16391: IFFALSE 16445
16393: GO 16395
16395: DISABLE
// begin ToLua ( displayTroll(); ) ;
16396: LD_STRING displayTroll();
16398: PPUSH
16399: CALL_OW 559
// wait ( 3 3$00 ) ;
16403: LD_INT 6300
16405: PPUSH
16406: CALL_OW 67
// ToLua ( hideTroll(); ) ;
16410: LD_STRING hideTroll();
16412: PPUSH
16413: CALL_OW 559
// wait ( 1 1$00 ) ;
16417: LD_INT 2100
16419: PPUSH
16420: CALL_OW 67
// ToLua ( displayTroll(); ) ;
16424: LD_STRING displayTroll();
16426: PPUSH
16427: CALL_OW 559
// wait ( 1 1$00 ) ;
16431: LD_INT 2100
16433: PPUSH
16434: CALL_OW 67
// ToLua ( hideTroll(); ) ;
16438: LD_STRING hideTroll();
16440: PPUSH
16441: CALL_OW 559
// end ;
16445: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
16446: LD_EXP 49
16450: PUSH
16451: LD_EXP 75
16455: AND
16456: IFFALSE 16519
16458: GO 16460
16460: DISABLE
16461: LD_INT 0
16463: PPUSH
// begin p := 0 ;
16464: LD_ADDR_VAR 0 1
16468: PUSH
16469: LD_INT 0
16471: ST_TO_ADDR
// repeat game_speed := 1 ;
16472: LD_ADDR_OWVAR 65
16476: PUSH
16477: LD_INT 1
16479: ST_TO_ADDR
// wait ( 0 0$1 ) ;
16480: LD_INT 35
16482: PPUSH
16483: CALL_OW 67
// p := p + 1 ;
16487: LD_ADDR_VAR 0 1
16491: PUSH
16492: LD_VAR 0 1
16496: PUSH
16497: LD_INT 1
16499: PLUS
16500: ST_TO_ADDR
// until p >= 60 ;
16501: LD_VAR 0 1
16505: PUSH
16506: LD_INT 60
16508: GREATEREQUAL
16509: IFFALSE 16472
// game_speed := 4 ;
16511: LD_ADDR_OWVAR 65
16515: PUSH
16516: LD_INT 4
16518: ST_TO_ADDR
// end ;
16519: PPOPN 1
16521: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
16522: LD_EXP 49
16526: PUSH
16527: LD_EXP 76
16531: AND
16532: IFFALSE 16678
16534: GO 16536
16536: DISABLE
16537: LD_INT 0
16539: PPUSH
16540: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
16541: LD_ADDR_VAR 0 1
16545: PUSH
16546: LD_INT 22
16548: PUSH
16549: LD_OWVAR 2
16553: PUSH
16554: EMPTY
16555: LIST
16556: LIST
16557: PUSH
16558: LD_INT 2
16560: PUSH
16561: LD_INT 30
16563: PUSH
16564: LD_INT 0
16566: PUSH
16567: EMPTY
16568: LIST
16569: LIST
16570: PUSH
16571: LD_INT 30
16573: PUSH
16574: LD_INT 1
16576: PUSH
16577: EMPTY
16578: LIST
16579: LIST
16580: PUSH
16581: EMPTY
16582: LIST
16583: LIST
16584: LIST
16585: PUSH
16586: EMPTY
16587: LIST
16588: LIST
16589: PPUSH
16590: CALL_OW 69
16594: ST_TO_ADDR
// if not depot then
16595: LD_VAR 0 1
16599: NOT
16600: IFFALSE 16604
// exit ;
16602: GO 16678
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
16604: LD_ADDR_VAR 0 2
16608: PUSH
16609: LD_VAR 0 1
16613: PUSH
16614: LD_INT 1
16616: PPUSH
16617: LD_VAR 0 1
16621: PPUSH
16622: CALL_OW 12
16626: ARRAY
16627: PPUSH
16628: CALL_OW 274
16632: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
16633: LD_VAR 0 2
16637: PPUSH
16638: LD_INT 1
16640: PPUSH
16641: LD_INT 0
16643: PPUSH
16644: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
16648: LD_VAR 0 2
16652: PPUSH
16653: LD_INT 2
16655: PPUSH
16656: LD_INT 0
16658: PPUSH
16659: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
16663: LD_VAR 0 2
16667: PPUSH
16668: LD_INT 3
16670: PPUSH
16671: LD_INT 0
16673: PPUSH
16674: CALL_OW 277
// end ;
16678: PPOPN 2
16680: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
16681: LD_EXP 49
16685: PUSH
16686: LD_EXP 77
16690: AND
16691: IFFALSE 16788
16693: GO 16695
16695: DISABLE
16696: LD_INT 0
16698: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
16699: LD_ADDR_VAR 0 1
16703: PUSH
16704: LD_INT 22
16706: PUSH
16707: LD_OWVAR 2
16711: PUSH
16712: EMPTY
16713: LIST
16714: LIST
16715: PUSH
16716: LD_INT 21
16718: PUSH
16719: LD_INT 1
16721: PUSH
16722: EMPTY
16723: LIST
16724: LIST
16725: PUSH
16726: LD_INT 3
16728: PUSH
16729: LD_INT 23
16731: PUSH
16732: LD_INT 0
16734: PUSH
16735: EMPTY
16736: LIST
16737: LIST
16738: PUSH
16739: EMPTY
16740: LIST
16741: LIST
16742: PUSH
16743: EMPTY
16744: LIST
16745: LIST
16746: LIST
16747: PPUSH
16748: CALL_OW 69
16752: ST_TO_ADDR
// if not tmp then
16753: LD_VAR 0 1
16757: NOT
16758: IFFALSE 16762
// exit ;
16760: GO 16788
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
16762: LD_VAR 0 1
16766: PUSH
16767: LD_INT 1
16769: PPUSH
16770: LD_VAR 0 1
16774: PPUSH
16775: CALL_OW 12
16779: ARRAY
16780: PPUSH
16781: LD_INT 200
16783: PPUSH
16784: CALL_OW 234
// end ;
16788: PPOPN 1
16790: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
16791: LD_EXP 49
16795: PUSH
16796: LD_EXP 78
16800: AND
16801: IFFALSE 16880
16803: GO 16805
16805: DISABLE
16806: LD_INT 0
16808: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
16809: LD_ADDR_VAR 0 1
16813: PUSH
16814: LD_INT 22
16816: PUSH
16817: LD_OWVAR 2
16821: PUSH
16822: EMPTY
16823: LIST
16824: LIST
16825: PUSH
16826: LD_INT 21
16828: PUSH
16829: LD_INT 2
16831: PUSH
16832: EMPTY
16833: LIST
16834: LIST
16835: PUSH
16836: EMPTY
16837: LIST
16838: LIST
16839: PPUSH
16840: CALL_OW 69
16844: ST_TO_ADDR
// if not tmp then
16845: LD_VAR 0 1
16849: NOT
16850: IFFALSE 16854
// exit ;
16852: GO 16880
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
16854: LD_VAR 0 1
16858: PUSH
16859: LD_INT 1
16861: PPUSH
16862: LD_VAR 0 1
16866: PPUSH
16867: CALL_OW 12
16871: ARRAY
16872: PPUSH
16873: LD_INT 60
16875: PPUSH
16876: CALL_OW 234
// end ;
16880: PPOPN 1
16882: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
16883: LD_EXP 49
16887: PUSH
16888: LD_EXP 79
16892: AND
16893: IFFALSE 16992
16895: GO 16897
16897: DISABLE
16898: LD_INT 0
16900: PPUSH
16901: PPUSH
// begin enable ;
16902: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
16903: LD_ADDR_VAR 0 1
16907: PUSH
16908: LD_INT 22
16910: PUSH
16911: LD_OWVAR 2
16915: PUSH
16916: EMPTY
16917: LIST
16918: LIST
16919: PUSH
16920: LD_INT 61
16922: PUSH
16923: EMPTY
16924: LIST
16925: PUSH
16926: LD_INT 33
16928: PUSH
16929: LD_INT 2
16931: PUSH
16932: EMPTY
16933: LIST
16934: LIST
16935: PUSH
16936: EMPTY
16937: LIST
16938: LIST
16939: LIST
16940: PPUSH
16941: CALL_OW 69
16945: ST_TO_ADDR
// if not tmp then
16946: LD_VAR 0 1
16950: NOT
16951: IFFALSE 16955
// exit ;
16953: GO 16992
// for i in tmp do
16955: LD_ADDR_VAR 0 2
16959: PUSH
16960: LD_VAR 0 1
16964: PUSH
16965: FOR_IN
16966: IFFALSE 16990
// if IsControledBy ( i ) then
16968: LD_VAR 0 2
16972: PPUSH
16973: CALL_OW 312
16977: IFFALSE 16988
// ComUnlink ( i ) ;
16979: LD_VAR 0 2
16983: PPUSH
16984: CALL_OW 136
16988: GO 16965
16990: POP
16991: POP
// end ;
16992: PPOPN 2
16994: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
16995: LD_EXP 49
16999: PUSH
17000: LD_EXP 80
17004: AND
17005: IFFALSE 17145
17007: GO 17009
17009: DISABLE
17010: LD_INT 0
17012: PPUSH
17013: PPUSH
// begin ToLua ( displayPowell(); ) ;
17014: LD_STRING displayPowell();
17016: PPUSH
17017: CALL_OW 559
// uc_side := 0 ;
17021: LD_ADDR_OWVAR 20
17025: PUSH
17026: LD_INT 0
17028: ST_TO_ADDR
// uc_nation := 2 ;
17029: LD_ADDR_OWVAR 21
17033: PUSH
17034: LD_INT 2
17036: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
17037: LD_ADDR_OWVAR 37
17041: PUSH
17042: LD_INT 14
17044: ST_TO_ADDR
// vc_engine := engine_siberite ;
17045: LD_ADDR_OWVAR 39
17049: PUSH
17050: LD_INT 3
17052: ST_TO_ADDR
// vc_control := control_apeman ;
17053: LD_ADDR_OWVAR 38
17057: PUSH
17058: LD_INT 5
17060: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
17061: LD_ADDR_OWVAR 40
17065: PUSH
17066: LD_INT 29
17068: ST_TO_ADDR
// un := CreateVehicle ;
17069: LD_ADDR_VAR 0 2
17073: PUSH
17074: CALL_OW 45
17078: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
17079: LD_VAR 0 2
17083: PPUSH
17084: LD_INT 1
17086: PPUSH
17087: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
17091: LD_INT 35
17093: PPUSH
17094: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
17098: LD_VAR 0 2
17102: PPUSH
17103: LD_INT 22
17105: PUSH
17106: LD_OWVAR 2
17110: PUSH
17111: EMPTY
17112: LIST
17113: LIST
17114: PPUSH
17115: CALL_OW 69
17119: PPUSH
17120: LD_VAR 0 2
17124: PPUSH
17125: CALL_OW 74
17129: PPUSH
17130: CALL_OW 115
// until IsDead ( un ) ;
17134: LD_VAR 0 2
17138: PPUSH
17139: CALL_OW 301
17143: IFFALSE 17091
// end ;
17145: PPOPN 2
17147: END
// every 0 0$1 trigger StreamModeActive and sStu do
17148: LD_EXP 49
17152: PUSH
17153: LD_EXP 88
17157: AND
17158: IFFALSE 17174
17160: GO 17162
17162: DISABLE
// begin ToLua ( displayStucuk(); ) ;
17163: LD_STRING displayStucuk();
17165: PPUSH
17166: CALL_OW 559
// ResetFog ;
17170: CALL_OW 335
// end ;
17174: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
17175: LD_EXP 49
17179: PUSH
17180: LD_EXP 81
17184: AND
17185: IFFALSE 17326
17187: GO 17189
17189: DISABLE
17190: LD_INT 0
17192: PPUSH
17193: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
17194: LD_ADDR_VAR 0 2
17198: PUSH
17199: LD_INT 22
17201: PUSH
17202: LD_OWVAR 2
17206: PUSH
17207: EMPTY
17208: LIST
17209: LIST
17210: PUSH
17211: LD_INT 21
17213: PUSH
17214: LD_INT 1
17216: PUSH
17217: EMPTY
17218: LIST
17219: LIST
17220: PUSH
17221: EMPTY
17222: LIST
17223: LIST
17224: PPUSH
17225: CALL_OW 69
17229: ST_TO_ADDR
// if not tmp then
17230: LD_VAR 0 2
17234: NOT
17235: IFFALSE 17239
// exit ;
17237: GO 17326
// un := tmp [ rand ( 1 , tmp ) ] ;
17239: LD_ADDR_VAR 0 1
17243: PUSH
17244: LD_VAR 0 2
17248: PUSH
17249: LD_INT 1
17251: PPUSH
17252: LD_VAR 0 2
17256: PPUSH
17257: CALL_OW 12
17261: ARRAY
17262: ST_TO_ADDR
// SetSide ( un , 0 ) ;
17263: LD_VAR 0 1
17267: PPUSH
17268: LD_INT 0
17270: PPUSH
17271: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
17275: LD_VAR 0 1
17279: PPUSH
17280: LD_OWVAR 3
17284: PUSH
17285: LD_VAR 0 1
17289: DIFF
17290: PPUSH
17291: LD_VAR 0 1
17295: PPUSH
17296: CALL_OW 74
17300: PPUSH
17301: CALL_OW 115
// wait ( 0 0$20 ) ;
17305: LD_INT 700
17307: PPUSH
17308: CALL_OW 67
// SetSide ( un , your_side ) ;
17312: LD_VAR 0 1
17316: PPUSH
17317: LD_OWVAR 2
17321: PPUSH
17322: CALL_OW 235
// end ;
17326: PPOPN 2
17328: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
17329: LD_EXP 49
17333: PUSH
17334: LD_EXP 82
17338: AND
17339: IFFALSE 17445
17341: GO 17343
17343: DISABLE
17344: LD_INT 0
17346: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
17347: LD_ADDR_VAR 0 1
17351: PUSH
17352: LD_INT 22
17354: PUSH
17355: LD_OWVAR 2
17359: PUSH
17360: EMPTY
17361: LIST
17362: LIST
17363: PUSH
17364: LD_INT 2
17366: PUSH
17367: LD_INT 30
17369: PUSH
17370: LD_INT 0
17372: PUSH
17373: EMPTY
17374: LIST
17375: LIST
17376: PUSH
17377: LD_INT 30
17379: PUSH
17380: LD_INT 1
17382: PUSH
17383: EMPTY
17384: LIST
17385: LIST
17386: PUSH
17387: EMPTY
17388: LIST
17389: LIST
17390: LIST
17391: PUSH
17392: EMPTY
17393: LIST
17394: LIST
17395: PPUSH
17396: CALL_OW 69
17400: ST_TO_ADDR
// if not depot then
17401: LD_VAR 0 1
17405: NOT
17406: IFFALSE 17410
// exit ;
17408: GO 17445
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
17410: LD_VAR 0 1
17414: PUSH
17415: LD_INT 1
17417: ARRAY
17418: PPUSH
17419: CALL_OW 250
17423: PPUSH
17424: LD_VAR 0 1
17428: PUSH
17429: LD_INT 1
17431: ARRAY
17432: PPUSH
17433: CALL_OW 251
17437: PPUSH
17438: LD_INT 70
17440: PPUSH
17441: CALL_OW 495
// end ;
17445: PPOPN 1
17447: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
17448: LD_EXP 49
17452: PUSH
17453: LD_EXP 83
17457: AND
17458: IFFALSE 17669
17460: GO 17462
17462: DISABLE
17463: LD_INT 0
17465: PPUSH
17466: PPUSH
17467: PPUSH
17468: PPUSH
17469: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
17470: LD_ADDR_VAR 0 5
17474: PUSH
17475: LD_INT 22
17477: PUSH
17478: LD_OWVAR 2
17482: PUSH
17483: EMPTY
17484: LIST
17485: LIST
17486: PUSH
17487: LD_INT 21
17489: PUSH
17490: LD_INT 1
17492: PUSH
17493: EMPTY
17494: LIST
17495: LIST
17496: PUSH
17497: EMPTY
17498: LIST
17499: LIST
17500: PPUSH
17501: CALL_OW 69
17505: ST_TO_ADDR
// if not tmp then
17506: LD_VAR 0 5
17510: NOT
17511: IFFALSE 17515
// exit ;
17513: GO 17669
// for i in tmp do
17515: LD_ADDR_VAR 0 1
17519: PUSH
17520: LD_VAR 0 5
17524: PUSH
17525: FOR_IN
17526: IFFALSE 17667
// begin d := rand ( 0 , 5 ) ;
17528: LD_ADDR_VAR 0 4
17532: PUSH
17533: LD_INT 0
17535: PPUSH
17536: LD_INT 5
17538: PPUSH
17539: CALL_OW 12
17543: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
17544: LD_ADDR_VAR 0 2
17548: PUSH
17549: LD_VAR 0 1
17553: PPUSH
17554: CALL_OW 250
17558: PPUSH
17559: LD_VAR 0 4
17563: PPUSH
17564: LD_INT 3
17566: PPUSH
17567: LD_INT 12
17569: PPUSH
17570: CALL_OW 12
17574: PPUSH
17575: CALL_OW 272
17579: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
17580: LD_ADDR_VAR 0 3
17584: PUSH
17585: LD_VAR 0 1
17589: PPUSH
17590: CALL_OW 251
17594: PPUSH
17595: LD_VAR 0 4
17599: PPUSH
17600: LD_INT 3
17602: PPUSH
17603: LD_INT 12
17605: PPUSH
17606: CALL_OW 12
17610: PPUSH
17611: CALL_OW 273
17615: ST_TO_ADDR
// if ValidHex ( x , y ) then
17616: LD_VAR 0 2
17620: PPUSH
17621: LD_VAR 0 3
17625: PPUSH
17626: CALL_OW 488
17630: IFFALSE 17665
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
17632: LD_VAR 0 1
17636: PPUSH
17637: LD_VAR 0 2
17641: PPUSH
17642: LD_VAR 0 3
17646: PPUSH
17647: LD_INT 3
17649: PPUSH
17650: LD_INT 6
17652: PPUSH
17653: CALL_OW 12
17657: PPUSH
17658: LD_INT 1
17660: PPUSH
17661: CALL_OW 483
// end ;
17665: GO 17525
17667: POP
17668: POP
// end ;
17669: PPOPN 5
17671: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
17672: LD_EXP 49
17676: PUSH
17677: LD_EXP 84
17681: AND
17682: IFFALSE 17776
17684: GO 17686
17686: DISABLE
17687: LD_INT 0
17689: PPUSH
17690: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
17691: LD_ADDR_VAR 0 2
17695: PUSH
17696: LD_INT 22
17698: PUSH
17699: LD_OWVAR 2
17703: PUSH
17704: EMPTY
17705: LIST
17706: LIST
17707: PUSH
17708: LD_INT 32
17710: PUSH
17711: LD_INT 1
17713: PUSH
17714: EMPTY
17715: LIST
17716: LIST
17717: PUSH
17718: LD_INT 21
17720: PUSH
17721: LD_INT 2
17723: PUSH
17724: EMPTY
17725: LIST
17726: LIST
17727: PUSH
17728: EMPTY
17729: LIST
17730: LIST
17731: LIST
17732: PPUSH
17733: CALL_OW 69
17737: ST_TO_ADDR
// if not tmp then
17738: LD_VAR 0 2
17742: NOT
17743: IFFALSE 17747
// exit ;
17745: GO 17776
// for i in tmp do
17747: LD_ADDR_VAR 0 1
17751: PUSH
17752: LD_VAR 0 2
17756: PUSH
17757: FOR_IN
17758: IFFALSE 17774
// SetFuel ( i , 0 ) ;
17760: LD_VAR 0 1
17764: PPUSH
17765: LD_INT 0
17767: PPUSH
17768: CALL_OW 240
17772: GO 17757
17774: POP
17775: POP
// end ;
17776: PPOPN 2
17778: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
17779: LD_EXP 49
17783: PUSH
17784: LD_EXP 85
17788: AND
17789: IFFALSE 17855
17791: GO 17793
17793: DISABLE
17794: LD_INT 0
17796: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
17797: LD_ADDR_VAR 0 1
17801: PUSH
17802: LD_INT 22
17804: PUSH
17805: LD_OWVAR 2
17809: PUSH
17810: EMPTY
17811: LIST
17812: LIST
17813: PUSH
17814: LD_INT 30
17816: PUSH
17817: LD_INT 29
17819: PUSH
17820: EMPTY
17821: LIST
17822: LIST
17823: PUSH
17824: EMPTY
17825: LIST
17826: LIST
17827: PPUSH
17828: CALL_OW 69
17832: ST_TO_ADDR
// if not tmp then
17833: LD_VAR 0 1
17837: NOT
17838: IFFALSE 17842
// exit ;
17840: GO 17855
// DestroyUnit ( tmp [ 1 ] ) ;
17842: LD_VAR 0 1
17846: PUSH
17847: LD_INT 1
17849: ARRAY
17850: PPUSH
17851: CALL_OW 65
// end ;
17855: PPOPN 1
17857: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
17858: LD_EXP 49
17862: PUSH
17863: LD_EXP 87
17867: AND
17868: IFFALSE 17997
17870: GO 17872
17872: DISABLE
17873: LD_INT 0
17875: PPUSH
// begin uc_side := 0 ;
17876: LD_ADDR_OWVAR 20
17880: PUSH
17881: LD_INT 0
17883: ST_TO_ADDR
// uc_nation := nation_arabian ;
17884: LD_ADDR_OWVAR 21
17888: PUSH
17889: LD_INT 2
17891: ST_TO_ADDR
// hc_gallery :=  ;
17892: LD_ADDR_OWVAR 33
17896: PUSH
17897: LD_STRING 
17899: ST_TO_ADDR
// hc_name :=  ;
17900: LD_ADDR_OWVAR 26
17904: PUSH
17905: LD_STRING 
17907: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
17908: LD_INT 1
17910: PPUSH
17911: LD_INT 11
17913: PPUSH
17914: LD_INT 10
17916: PPUSH
17917: CALL_OW 380
// un := CreateHuman ;
17921: LD_ADDR_VAR 0 1
17925: PUSH
17926: CALL_OW 44
17930: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
17931: LD_VAR 0 1
17935: PPUSH
17936: LD_INT 1
17938: PPUSH
17939: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
17943: LD_INT 35
17945: PPUSH
17946: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
17950: LD_VAR 0 1
17954: PPUSH
17955: LD_INT 22
17957: PUSH
17958: LD_OWVAR 2
17962: PUSH
17963: EMPTY
17964: LIST
17965: LIST
17966: PPUSH
17967: CALL_OW 69
17971: PPUSH
17972: LD_VAR 0 1
17976: PPUSH
17977: CALL_OW 74
17981: PPUSH
17982: CALL_OW 115
// until IsDead ( un ) ;
17986: LD_VAR 0 1
17990: PPUSH
17991: CALL_OW 301
17995: IFFALSE 17943
// end ;
17997: PPOPN 1
17999: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
18000: LD_EXP 49
18004: PUSH
18005: LD_EXP 89
18009: AND
18010: IFFALSE 18022
18012: GO 18014
18014: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
18015: LD_STRING earthquake(getX(game), 0, 32)
18017: PPUSH
18018: CALL_OW 559
18022: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
18023: LD_EXP 49
18027: PUSH
18028: LD_EXP 90
18032: AND
18033: IFFALSE 18124
18035: GO 18037
18037: DISABLE
18038: LD_INT 0
18040: PPUSH
// begin enable ;
18041: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
18042: LD_ADDR_VAR 0 1
18046: PUSH
18047: LD_INT 22
18049: PUSH
18050: LD_OWVAR 2
18054: PUSH
18055: EMPTY
18056: LIST
18057: LIST
18058: PUSH
18059: LD_INT 21
18061: PUSH
18062: LD_INT 2
18064: PUSH
18065: EMPTY
18066: LIST
18067: LIST
18068: PUSH
18069: LD_INT 33
18071: PUSH
18072: LD_INT 3
18074: PUSH
18075: EMPTY
18076: LIST
18077: LIST
18078: PUSH
18079: EMPTY
18080: LIST
18081: LIST
18082: LIST
18083: PPUSH
18084: CALL_OW 69
18088: ST_TO_ADDR
// if not tmp then
18089: LD_VAR 0 1
18093: NOT
18094: IFFALSE 18098
// exit ;
18096: GO 18124
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
18098: LD_VAR 0 1
18102: PUSH
18103: LD_INT 1
18105: PPUSH
18106: LD_VAR 0 1
18110: PPUSH
18111: CALL_OW 12
18115: ARRAY
18116: PPUSH
18117: LD_INT 1
18119: PPUSH
18120: CALL_OW 234
// end ;
18124: PPOPN 1
18126: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
18127: LD_EXP 49
18131: PUSH
18132: LD_EXP 91
18136: AND
18137: IFFALSE 18278
18139: GO 18141
18141: DISABLE
18142: LD_INT 0
18144: PPUSH
18145: PPUSH
18146: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18147: LD_ADDR_VAR 0 3
18151: PUSH
18152: LD_INT 22
18154: PUSH
18155: LD_OWVAR 2
18159: PUSH
18160: EMPTY
18161: LIST
18162: LIST
18163: PUSH
18164: LD_INT 25
18166: PUSH
18167: LD_INT 1
18169: PUSH
18170: EMPTY
18171: LIST
18172: LIST
18173: PUSH
18174: EMPTY
18175: LIST
18176: LIST
18177: PPUSH
18178: CALL_OW 69
18182: ST_TO_ADDR
// if not tmp then
18183: LD_VAR 0 3
18187: NOT
18188: IFFALSE 18192
// exit ;
18190: GO 18278
// un := tmp [ rand ( 1 , tmp ) ] ;
18192: LD_ADDR_VAR 0 2
18196: PUSH
18197: LD_VAR 0 3
18201: PUSH
18202: LD_INT 1
18204: PPUSH
18205: LD_VAR 0 3
18209: PPUSH
18210: CALL_OW 12
18214: ARRAY
18215: ST_TO_ADDR
// if Crawls ( un ) then
18216: LD_VAR 0 2
18220: PPUSH
18221: CALL_OW 318
18225: IFFALSE 18236
// ComWalk ( un ) ;
18227: LD_VAR 0 2
18231: PPUSH
18232: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
18236: LD_VAR 0 2
18240: PPUSH
18241: LD_INT 9
18243: PPUSH
18244: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
18248: LD_INT 28
18250: PPUSH
18251: LD_OWVAR 2
18255: PPUSH
18256: LD_INT 2
18258: PPUSH
18259: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
18263: LD_INT 29
18265: PPUSH
18266: LD_OWVAR 2
18270: PPUSH
18271: LD_INT 2
18273: PPUSH
18274: CALL_OW 322
// end ;
18278: PPOPN 3
18280: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
18281: LD_EXP 49
18285: PUSH
18286: LD_EXP 92
18290: AND
18291: IFFALSE 18402
18293: GO 18295
18295: DISABLE
18296: LD_INT 0
18298: PPUSH
18299: PPUSH
18300: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18301: LD_ADDR_VAR 0 3
18305: PUSH
18306: LD_INT 22
18308: PUSH
18309: LD_OWVAR 2
18313: PUSH
18314: EMPTY
18315: LIST
18316: LIST
18317: PUSH
18318: LD_INT 25
18320: PUSH
18321: LD_INT 1
18323: PUSH
18324: EMPTY
18325: LIST
18326: LIST
18327: PUSH
18328: EMPTY
18329: LIST
18330: LIST
18331: PPUSH
18332: CALL_OW 69
18336: ST_TO_ADDR
// if not tmp then
18337: LD_VAR 0 3
18341: NOT
18342: IFFALSE 18346
// exit ;
18344: GO 18402
// un := tmp [ rand ( 1 , tmp ) ] ;
18346: LD_ADDR_VAR 0 2
18350: PUSH
18351: LD_VAR 0 3
18355: PUSH
18356: LD_INT 1
18358: PPUSH
18359: LD_VAR 0 3
18363: PPUSH
18364: CALL_OW 12
18368: ARRAY
18369: ST_TO_ADDR
// if Crawls ( un ) then
18370: LD_VAR 0 2
18374: PPUSH
18375: CALL_OW 318
18379: IFFALSE 18390
// ComWalk ( un ) ;
18381: LD_VAR 0 2
18385: PPUSH
18386: CALL_OW 138
// SetClass ( un , class_mortar ) ;
18390: LD_VAR 0 2
18394: PPUSH
18395: LD_INT 8
18397: PPUSH
18398: CALL_OW 336
// end ;
18402: PPOPN 3
18404: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
18405: LD_EXP 49
18409: PUSH
18410: LD_EXP 93
18414: AND
18415: IFFALSE 18559
18417: GO 18419
18419: DISABLE
18420: LD_INT 0
18422: PPUSH
18423: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
18424: LD_ADDR_VAR 0 2
18428: PUSH
18429: LD_INT 22
18431: PUSH
18432: LD_OWVAR 2
18436: PUSH
18437: EMPTY
18438: LIST
18439: LIST
18440: PUSH
18441: LD_INT 21
18443: PUSH
18444: LD_INT 2
18446: PUSH
18447: EMPTY
18448: LIST
18449: LIST
18450: PUSH
18451: LD_INT 2
18453: PUSH
18454: LD_INT 34
18456: PUSH
18457: LD_INT 12
18459: PUSH
18460: EMPTY
18461: LIST
18462: LIST
18463: PUSH
18464: LD_INT 34
18466: PUSH
18467: LD_INT 51
18469: PUSH
18470: EMPTY
18471: LIST
18472: LIST
18473: PUSH
18474: LD_INT 34
18476: PUSH
18477: LD_INT 32
18479: PUSH
18480: EMPTY
18481: LIST
18482: LIST
18483: PUSH
18484: EMPTY
18485: LIST
18486: LIST
18487: LIST
18488: LIST
18489: PUSH
18490: EMPTY
18491: LIST
18492: LIST
18493: LIST
18494: PPUSH
18495: CALL_OW 69
18499: ST_TO_ADDR
// if not tmp then
18500: LD_VAR 0 2
18504: NOT
18505: IFFALSE 18509
// exit ;
18507: GO 18559
// for i in tmp do
18509: LD_ADDR_VAR 0 1
18513: PUSH
18514: LD_VAR 0 2
18518: PUSH
18519: FOR_IN
18520: IFFALSE 18557
// if GetCargo ( i , mat_artifact ) = 0 then
18522: LD_VAR 0 1
18526: PPUSH
18527: LD_INT 4
18529: PPUSH
18530: CALL_OW 289
18534: PUSH
18535: LD_INT 0
18537: EQUAL
18538: IFFALSE 18555
// SetCargo ( i , mat_siberit , 100 ) ;
18540: LD_VAR 0 1
18544: PPUSH
18545: LD_INT 3
18547: PPUSH
18548: LD_INT 100
18550: PPUSH
18551: CALL_OW 290
18555: GO 18519
18557: POP
18558: POP
// end ;
18559: PPOPN 2
18561: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
18562: LD_EXP 49
18566: PUSH
18567: LD_EXP 94
18571: AND
18572: IFFALSE 18755
18574: GO 18576
18576: DISABLE
18577: LD_INT 0
18579: PPUSH
18580: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
18581: LD_ADDR_VAR 0 2
18585: PUSH
18586: LD_INT 22
18588: PUSH
18589: LD_OWVAR 2
18593: PUSH
18594: EMPTY
18595: LIST
18596: LIST
18597: PPUSH
18598: CALL_OW 69
18602: ST_TO_ADDR
// if not tmp then
18603: LD_VAR 0 2
18607: NOT
18608: IFFALSE 18612
// exit ;
18610: GO 18755
// for i := 1 to 2 do
18612: LD_ADDR_VAR 0 1
18616: PUSH
18617: DOUBLE
18618: LD_INT 1
18620: DEC
18621: ST_TO_ADDR
18622: LD_INT 2
18624: PUSH
18625: FOR_TO
18626: IFFALSE 18753
// begin uc_side := your_side ;
18628: LD_ADDR_OWVAR 20
18632: PUSH
18633: LD_OWVAR 2
18637: ST_TO_ADDR
// uc_nation := nation_american ;
18638: LD_ADDR_OWVAR 21
18642: PUSH
18643: LD_INT 1
18645: ST_TO_ADDR
// vc_chassis := us_morphling ;
18646: LD_ADDR_OWVAR 37
18650: PUSH
18651: LD_INT 5
18653: ST_TO_ADDR
// vc_engine := engine_siberite ;
18654: LD_ADDR_OWVAR 39
18658: PUSH
18659: LD_INT 3
18661: ST_TO_ADDR
// vc_control := control_computer ;
18662: LD_ADDR_OWVAR 38
18666: PUSH
18667: LD_INT 3
18669: ST_TO_ADDR
// vc_weapon := us_double_laser ;
18670: LD_ADDR_OWVAR 40
18674: PUSH
18675: LD_INT 10
18677: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
18678: LD_VAR 0 2
18682: PUSH
18683: LD_INT 1
18685: ARRAY
18686: PPUSH
18687: CALL_OW 310
18691: NOT
18692: IFFALSE 18739
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
18694: CALL_OW 45
18698: PPUSH
18699: LD_VAR 0 2
18703: PUSH
18704: LD_INT 1
18706: ARRAY
18707: PPUSH
18708: CALL_OW 250
18712: PPUSH
18713: LD_VAR 0 2
18717: PUSH
18718: LD_INT 1
18720: ARRAY
18721: PPUSH
18722: CALL_OW 251
18726: PPUSH
18727: LD_INT 12
18729: PPUSH
18730: LD_INT 1
18732: PPUSH
18733: CALL_OW 50
18737: GO 18751
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
18739: CALL_OW 45
18743: PPUSH
18744: LD_INT 1
18746: PPUSH
18747: CALL_OW 51
// end ;
18751: GO 18625
18753: POP
18754: POP
// end ;
18755: PPOPN 2
18757: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
18758: LD_EXP 49
18762: PUSH
18763: LD_EXP 95
18767: AND
18768: IFFALSE 18990
18770: GO 18772
18772: DISABLE
18773: LD_INT 0
18775: PPUSH
18776: PPUSH
18777: PPUSH
18778: PPUSH
18779: PPUSH
18780: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
18781: LD_ADDR_VAR 0 6
18785: PUSH
18786: LD_INT 22
18788: PUSH
18789: LD_OWVAR 2
18793: PUSH
18794: EMPTY
18795: LIST
18796: LIST
18797: PUSH
18798: LD_INT 21
18800: PUSH
18801: LD_INT 1
18803: PUSH
18804: EMPTY
18805: LIST
18806: LIST
18807: PUSH
18808: LD_INT 3
18810: PUSH
18811: LD_INT 23
18813: PUSH
18814: LD_INT 0
18816: PUSH
18817: EMPTY
18818: LIST
18819: LIST
18820: PUSH
18821: EMPTY
18822: LIST
18823: LIST
18824: PUSH
18825: EMPTY
18826: LIST
18827: LIST
18828: LIST
18829: PPUSH
18830: CALL_OW 69
18834: ST_TO_ADDR
// if not tmp then
18835: LD_VAR 0 6
18839: NOT
18840: IFFALSE 18844
// exit ;
18842: GO 18990
// s1 := rand ( 1 , 4 ) ;
18844: LD_ADDR_VAR 0 2
18848: PUSH
18849: LD_INT 1
18851: PPUSH
18852: LD_INT 4
18854: PPUSH
18855: CALL_OW 12
18859: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
18860: LD_ADDR_VAR 0 4
18864: PUSH
18865: LD_VAR 0 6
18869: PUSH
18870: LD_INT 1
18872: ARRAY
18873: PPUSH
18874: LD_VAR 0 2
18878: PPUSH
18879: CALL_OW 259
18883: ST_TO_ADDR
// if s1 = 1 then
18884: LD_VAR 0 2
18888: PUSH
18889: LD_INT 1
18891: EQUAL
18892: IFFALSE 18912
// s2 := rand ( 2 , 4 ) else
18894: LD_ADDR_VAR 0 3
18898: PUSH
18899: LD_INT 2
18901: PPUSH
18902: LD_INT 4
18904: PPUSH
18905: CALL_OW 12
18909: ST_TO_ADDR
18910: GO 18920
// s2 := 1 ;
18912: LD_ADDR_VAR 0 3
18916: PUSH
18917: LD_INT 1
18919: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
18920: LD_ADDR_VAR 0 5
18924: PUSH
18925: LD_VAR 0 6
18929: PUSH
18930: LD_INT 1
18932: ARRAY
18933: PPUSH
18934: LD_VAR 0 3
18938: PPUSH
18939: CALL_OW 259
18943: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
18944: LD_VAR 0 6
18948: PUSH
18949: LD_INT 1
18951: ARRAY
18952: PPUSH
18953: LD_VAR 0 2
18957: PPUSH
18958: LD_VAR 0 5
18962: PPUSH
18963: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
18967: LD_VAR 0 6
18971: PUSH
18972: LD_INT 1
18974: ARRAY
18975: PPUSH
18976: LD_VAR 0 3
18980: PPUSH
18981: LD_VAR 0 4
18985: PPUSH
18986: CALL_OW 237
// end ;
18990: PPOPN 6
18992: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
18993: LD_EXP 49
18997: PUSH
18998: LD_EXP 96
19002: AND
19003: IFFALSE 19082
19005: GO 19007
19007: DISABLE
19008: LD_INT 0
19010: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
19011: LD_ADDR_VAR 0 1
19015: PUSH
19016: LD_INT 22
19018: PUSH
19019: LD_OWVAR 2
19023: PUSH
19024: EMPTY
19025: LIST
19026: LIST
19027: PUSH
19028: LD_INT 30
19030: PUSH
19031: LD_INT 3
19033: PUSH
19034: EMPTY
19035: LIST
19036: LIST
19037: PUSH
19038: EMPTY
19039: LIST
19040: LIST
19041: PPUSH
19042: CALL_OW 69
19046: ST_TO_ADDR
// if not tmp then
19047: LD_VAR 0 1
19051: NOT
19052: IFFALSE 19056
// exit ;
19054: GO 19082
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
19056: LD_VAR 0 1
19060: PUSH
19061: LD_INT 1
19063: PPUSH
19064: LD_VAR 0 1
19068: PPUSH
19069: CALL_OW 12
19073: ARRAY
19074: PPUSH
19075: LD_INT 1
19077: PPUSH
19078: CALL_OW 234
// end ;
19082: PPOPN 1
19084: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
19085: LD_EXP 49
19089: PUSH
19090: LD_EXP 97
19094: AND
19095: IFFALSE 19207
19097: GO 19099
19099: DISABLE
19100: LD_INT 0
19102: PPUSH
19103: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
19104: LD_ADDR_VAR 0 2
19108: PUSH
19109: LD_INT 22
19111: PUSH
19112: LD_OWVAR 2
19116: PUSH
19117: EMPTY
19118: LIST
19119: LIST
19120: PUSH
19121: LD_INT 2
19123: PUSH
19124: LD_INT 30
19126: PUSH
19127: LD_INT 27
19129: PUSH
19130: EMPTY
19131: LIST
19132: LIST
19133: PUSH
19134: LD_INT 30
19136: PUSH
19137: LD_INT 26
19139: PUSH
19140: EMPTY
19141: LIST
19142: LIST
19143: PUSH
19144: LD_INT 30
19146: PUSH
19147: LD_INT 28
19149: PUSH
19150: EMPTY
19151: LIST
19152: LIST
19153: PUSH
19154: EMPTY
19155: LIST
19156: LIST
19157: LIST
19158: LIST
19159: PUSH
19160: EMPTY
19161: LIST
19162: LIST
19163: PPUSH
19164: CALL_OW 69
19168: ST_TO_ADDR
// if not tmp then
19169: LD_VAR 0 2
19173: NOT
19174: IFFALSE 19178
// exit ;
19176: GO 19207
// for i in tmp do
19178: LD_ADDR_VAR 0 1
19182: PUSH
19183: LD_VAR 0 2
19187: PUSH
19188: FOR_IN
19189: IFFALSE 19205
// SetLives ( i , 1 ) ;
19191: LD_VAR 0 1
19195: PPUSH
19196: LD_INT 1
19198: PPUSH
19199: CALL_OW 234
19203: GO 19188
19205: POP
19206: POP
// end ;
19207: PPOPN 2
19209: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
19210: LD_EXP 49
19214: PUSH
19215: LD_EXP 98
19219: AND
19220: IFFALSE 19507
19222: GO 19224
19224: DISABLE
19225: LD_INT 0
19227: PPUSH
19228: PPUSH
19229: PPUSH
// begin i := rand ( 1 , 7 ) ;
19230: LD_ADDR_VAR 0 1
19234: PUSH
19235: LD_INT 1
19237: PPUSH
19238: LD_INT 7
19240: PPUSH
19241: CALL_OW 12
19245: ST_TO_ADDR
// case i of 1 :
19246: LD_VAR 0 1
19250: PUSH
19251: LD_INT 1
19253: DOUBLE
19254: EQUAL
19255: IFTRUE 19259
19257: GO 19269
19259: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
19260: LD_STRING earthquake(getX(game), 0, 32)
19262: PPUSH
19263: CALL_OW 559
19267: GO 19507
19269: LD_INT 2
19271: DOUBLE
19272: EQUAL
19273: IFTRUE 19277
19275: GO 19291
19277: POP
// begin ToLua ( displayStucuk(); ) ;
19278: LD_STRING displayStucuk();
19280: PPUSH
19281: CALL_OW 559
// ResetFog ;
19285: CALL_OW 335
// end ; 3 :
19289: GO 19507
19291: LD_INT 3
19293: DOUBLE
19294: EQUAL
19295: IFTRUE 19299
19297: GO 19403
19299: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
19300: LD_ADDR_VAR 0 2
19304: PUSH
19305: LD_INT 22
19307: PUSH
19308: LD_OWVAR 2
19312: PUSH
19313: EMPTY
19314: LIST
19315: LIST
19316: PUSH
19317: LD_INT 25
19319: PUSH
19320: LD_INT 1
19322: PUSH
19323: EMPTY
19324: LIST
19325: LIST
19326: PUSH
19327: EMPTY
19328: LIST
19329: LIST
19330: PPUSH
19331: CALL_OW 69
19335: ST_TO_ADDR
// if not tmp then
19336: LD_VAR 0 2
19340: NOT
19341: IFFALSE 19345
// exit ;
19343: GO 19507
// un := tmp [ rand ( 1 , tmp ) ] ;
19345: LD_ADDR_VAR 0 3
19349: PUSH
19350: LD_VAR 0 2
19354: PUSH
19355: LD_INT 1
19357: PPUSH
19358: LD_VAR 0 2
19362: PPUSH
19363: CALL_OW 12
19367: ARRAY
19368: ST_TO_ADDR
// if Crawls ( un ) then
19369: LD_VAR 0 3
19373: PPUSH
19374: CALL_OW 318
19378: IFFALSE 19389
// ComWalk ( un ) ;
19380: LD_VAR 0 3
19384: PPUSH
19385: CALL_OW 138
// SetClass ( un , class_mortar ) ;
19389: LD_VAR 0 3
19393: PPUSH
19394: LD_INT 8
19396: PPUSH
19397: CALL_OW 336
// end ; 4 :
19401: GO 19507
19403: LD_INT 4
19405: DOUBLE
19406: EQUAL
19407: IFTRUE 19411
19409: GO 19485
19411: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
19412: LD_ADDR_VAR 0 2
19416: PUSH
19417: LD_INT 22
19419: PUSH
19420: LD_OWVAR 2
19424: PUSH
19425: EMPTY
19426: LIST
19427: LIST
19428: PUSH
19429: LD_INT 30
19431: PUSH
19432: LD_INT 29
19434: PUSH
19435: EMPTY
19436: LIST
19437: LIST
19438: PUSH
19439: EMPTY
19440: LIST
19441: LIST
19442: PPUSH
19443: CALL_OW 69
19447: ST_TO_ADDR
// if not tmp then
19448: LD_VAR 0 2
19452: NOT
19453: IFFALSE 19457
// exit ;
19455: GO 19507
// CenterNowOnUnits ( tmp [ 1 ] ) ;
19457: LD_VAR 0 2
19461: PUSH
19462: LD_INT 1
19464: ARRAY
19465: PPUSH
19466: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
19470: LD_VAR 0 2
19474: PUSH
19475: LD_INT 1
19477: ARRAY
19478: PPUSH
19479: CALL_OW 65
// end ; 5 .. 7 :
19483: GO 19507
19485: LD_INT 5
19487: DOUBLE
19488: GREATEREQUAL
19489: IFFALSE 19497
19491: LD_INT 7
19493: DOUBLE
19494: LESSEQUAL
19495: IFTRUE 19499
19497: GO 19506
19499: POP
// StreamSibBomb ; end ;
19500: CALL 15744 0 0
19504: GO 19507
19506: POP
// end ;
19507: PPOPN 3
19509: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
19510: LD_EXP 49
19514: PUSH
19515: LD_EXP 99
19519: AND
19520: IFFALSE 19676
19522: GO 19524
19524: DISABLE
19525: LD_INT 0
19527: PPUSH
19528: PPUSH
19529: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
19530: LD_ADDR_VAR 0 2
19534: PUSH
19535: LD_INT 81
19537: PUSH
19538: LD_OWVAR 2
19542: PUSH
19543: EMPTY
19544: LIST
19545: LIST
19546: PUSH
19547: LD_INT 2
19549: PUSH
19550: LD_INT 21
19552: PUSH
19553: LD_INT 1
19555: PUSH
19556: EMPTY
19557: LIST
19558: LIST
19559: PUSH
19560: LD_INT 21
19562: PUSH
19563: LD_INT 2
19565: PUSH
19566: EMPTY
19567: LIST
19568: LIST
19569: PUSH
19570: EMPTY
19571: LIST
19572: LIST
19573: LIST
19574: PUSH
19575: EMPTY
19576: LIST
19577: LIST
19578: PPUSH
19579: CALL_OW 69
19583: ST_TO_ADDR
// if not tmp then
19584: LD_VAR 0 2
19588: NOT
19589: IFFALSE 19593
// exit ;
19591: GO 19676
// p := 0 ;
19593: LD_ADDR_VAR 0 3
19597: PUSH
19598: LD_INT 0
19600: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
19601: LD_INT 35
19603: PPUSH
19604: CALL_OW 67
// p := p + 1 ;
19608: LD_ADDR_VAR 0 3
19612: PUSH
19613: LD_VAR 0 3
19617: PUSH
19618: LD_INT 1
19620: PLUS
19621: ST_TO_ADDR
// for i in tmp do
19622: LD_ADDR_VAR 0 1
19626: PUSH
19627: LD_VAR 0 2
19631: PUSH
19632: FOR_IN
19633: IFFALSE 19664
// if GetLives ( i ) < 1000 then
19635: LD_VAR 0 1
19639: PPUSH
19640: CALL_OW 256
19644: PUSH
19645: LD_INT 1000
19647: LESS
19648: IFFALSE 19662
// SetLives ( i , 1000 ) ;
19650: LD_VAR 0 1
19654: PPUSH
19655: LD_INT 1000
19657: PPUSH
19658: CALL_OW 234
19662: GO 19632
19664: POP
19665: POP
// until p > 20 ;
19666: LD_VAR 0 3
19670: PUSH
19671: LD_INT 20
19673: GREATER
19674: IFFALSE 19601
// end ;
19676: PPOPN 3
19678: END
// every 0 0$1 trigger StreamModeActive and sTime do
19679: LD_EXP 49
19683: PUSH
19684: LD_EXP 100
19688: AND
19689: IFFALSE 19724
19691: GO 19693
19693: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
19694: LD_INT 28
19696: PPUSH
19697: LD_OWVAR 2
19701: PPUSH
19702: LD_INT 2
19704: PPUSH
19705: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
19709: LD_INT 30
19711: PPUSH
19712: LD_OWVAR 2
19716: PPUSH
19717: LD_INT 2
19719: PPUSH
19720: CALL_OW 322
// end ;
19724: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
19725: LD_EXP 49
19729: PUSH
19730: LD_EXP 101
19734: AND
19735: IFFALSE 19856
19737: GO 19739
19739: DISABLE
19740: LD_INT 0
19742: PPUSH
19743: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
19744: LD_ADDR_VAR 0 2
19748: PUSH
19749: LD_INT 22
19751: PUSH
19752: LD_OWVAR 2
19756: PUSH
19757: EMPTY
19758: LIST
19759: LIST
19760: PUSH
19761: LD_INT 21
19763: PUSH
19764: LD_INT 1
19766: PUSH
19767: EMPTY
19768: LIST
19769: LIST
19770: PUSH
19771: LD_INT 3
19773: PUSH
19774: LD_INT 23
19776: PUSH
19777: LD_INT 0
19779: PUSH
19780: EMPTY
19781: LIST
19782: LIST
19783: PUSH
19784: EMPTY
19785: LIST
19786: LIST
19787: PUSH
19788: EMPTY
19789: LIST
19790: LIST
19791: LIST
19792: PPUSH
19793: CALL_OW 69
19797: ST_TO_ADDR
// if not tmp then
19798: LD_VAR 0 2
19802: NOT
19803: IFFALSE 19807
// exit ;
19805: GO 19856
// for i in tmp do
19807: LD_ADDR_VAR 0 1
19811: PUSH
19812: LD_VAR 0 2
19816: PUSH
19817: FOR_IN
19818: IFFALSE 19854
// begin if Crawls ( i ) then
19820: LD_VAR 0 1
19824: PPUSH
19825: CALL_OW 318
19829: IFFALSE 19840
// ComWalk ( i ) ;
19831: LD_VAR 0 1
19835: PPUSH
19836: CALL_OW 138
// SetClass ( i , 2 ) ;
19840: LD_VAR 0 1
19844: PPUSH
19845: LD_INT 2
19847: PPUSH
19848: CALL_OW 336
// end ;
19852: GO 19817
19854: POP
19855: POP
// end ;
19856: PPOPN 2
19858: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
19859: LD_EXP 49
19863: PUSH
19864: LD_EXP 102
19868: AND
19869: IFFALSE 20157
19871: GO 19873
19873: DISABLE
19874: LD_INT 0
19876: PPUSH
19877: PPUSH
19878: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
19879: LD_OWVAR 2
19883: PPUSH
19884: LD_INT 9
19886: PPUSH
19887: LD_INT 1
19889: PPUSH
19890: LD_INT 1
19892: PPUSH
19893: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
19897: LD_INT 9
19899: PPUSH
19900: LD_OWVAR 2
19904: PPUSH
19905: CALL_OW 343
// uc_side := 9 ;
19909: LD_ADDR_OWVAR 20
19913: PUSH
19914: LD_INT 9
19916: ST_TO_ADDR
// uc_nation := 2 ;
19917: LD_ADDR_OWVAR 21
19921: PUSH
19922: LD_INT 2
19924: ST_TO_ADDR
// hc_name := Dark Warrior ;
19925: LD_ADDR_OWVAR 26
19929: PUSH
19930: LD_STRING Dark Warrior
19932: ST_TO_ADDR
// hc_gallery :=  ;
19933: LD_ADDR_OWVAR 33
19937: PUSH
19938: LD_STRING 
19940: ST_TO_ADDR
// hc_noskilllimit := true ;
19941: LD_ADDR_OWVAR 76
19945: PUSH
19946: LD_INT 1
19948: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
19949: LD_ADDR_OWVAR 31
19953: PUSH
19954: LD_INT 30
19956: PUSH
19957: LD_INT 30
19959: PUSH
19960: LD_INT 30
19962: PUSH
19963: LD_INT 30
19965: PUSH
19966: EMPTY
19967: LIST
19968: LIST
19969: LIST
19970: LIST
19971: ST_TO_ADDR
// un := CreateHuman ;
19972: LD_ADDR_VAR 0 3
19976: PUSH
19977: CALL_OW 44
19981: ST_TO_ADDR
// hc_noskilllimit := false ;
19982: LD_ADDR_OWVAR 76
19986: PUSH
19987: LD_INT 0
19989: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
19990: LD_VAR 0 3
19994: PPUSH
19995: LD_INT 1
19997: PPUSH
19998: CALL_OW 51
// ToLua ( playRanger() ) ;
20002: LD_STRING playRanger()
20004: PPUSH
20005: CALL_OW 559
// p := 0 ;
20009: LD_ADDR_VAR 0 2
20013: PUSH
20014: LD_INT 0
20016: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
20017: LD_INT 35
20019: PPUSH
20020: CALL_OW 67
// p := p + 1 ;
20024: LD_ADDR_VAR 0 2
20028: PUSH
20029: LD_VAR 0 2
20033: PUSH
20034: LD_INT 1
20036: PLUS
20037: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
20038: LD_VAR 0 3
20042: PPUSH
20043: CALL_OW 256
20047: PUSH
20048: LD_INT 1000
20050: LESS
20051: IFFALSE 20065
// SetLives ( un , 1000 ) ;
20053: LD_VAR 0 3
20057: PPUSH
20058: LD_INT 1000
20060: PPUSH
20061: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
20065: LD_VAR 0 3
20069: PPUSH
20070: LD_INT 81
20072: PUSH
20073: LD_OWVAR 2
20077: PUSH
20078: EMPTY
20079: LIST
20080: LIST
20081: PUSH
20082: LD_INT 91
20084: PUSH
20085: LD_VAR 0 3
20089: PUSH
20090: LD_INT 30
20092: PUSH
20093: EMPTY
20094: LIST
20095: LIST
20096: LIST
20097: PUSH
20098: EMPTY
20099: LIST
20100: LIST
20101: PPUSH
20102: CALL_OW 69
20106: PPUSH
20107: LD_VAR 0 3
20111: PPUSH
20112: CALL_OW 74
20116: PPUSH
20117: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
20121: LD_VAR 0 2
20125: PUSH
20126: LD_INT 80
20128: GREATER
20129: PUSH
20130: LD_VAR 0 3
20134: PPUSH
20135: CALL_OW 301
20139: OR
20140: IFFALSE 20017
// if un then
20142: LD_VAR 0 3
20146: IFFALSE 20157
// RemoveUnit ( un ) ;
20148: LD_VAR 0 3
20152: PPUSH
20153: CALL_OW 64
// end ;
20157: PPOPN 3
20159: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
20160: LD_EXP 103
20164: IFFALSE 20280
20166: GO 20168
20168: DISABLE
20169: LD_INT 0
20171: PPUSH
20172: PPUSH
20173: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
20174: LD_ADDR_VAR 0 2
20178: PUSH
20179: LD_INT 81
20181: PUSH
20182: LD_OWVAR 2
20186: PUSH
20187: EMPTY
20188: LIST
20189: LIST
20190: PUSH
20191: LD_INT 21
20193: PUSH
20194: LD_INT 1
20196: PUSH
20197: EMPTY
20198: LIST
20199: LIST
20200: PUSH
20201: EMPTY
20202: LIST
20203: LIST
20204: PPUSH
20205: CALL_OW 69
20209: ST_TO_ADDR
// ToLua ( playComputer() ) ;
20210: LD_STRING playComputer()
20212: PPUSH
20213: CALL_OW 559
// if not tmp then
20217: LD_VAR 0 2
20221: NOT
20222: IFFALSE 20226
// exit ;
20224: GO 20280
// for i in tmp do
20226: LD_ADDR_VAR 0 1
20230: PUSH
20231: LD_VAR 0 2
20235: PUSH
20236: FOR_IN
20237: IFFALSE 20278
// for j := 1 to 4 do
20239: LD_ADDR_VAR 0 3
20243: PUSH
20244: DOUBLE
20245: LD_INT 1
20247: DEC
20248: ST_TO_ADDR
20249: LD_INT 4
20251: PUSH
20252: FOR_TO
20253: IFFALSE 20274
// SetSkill ( i , j , 10 ) ;
20255: LD_VAR 0 1
20259: PPUSH
20260: LD_VAR 0 3
20264: PPUSH
20265: LD_INT 10
20267: PPUSH
20268: CALL_OW 237
20272: GO 20252
20274: POP
20275: POP
20276: GO 20236
20278: POP
20279: POP
// end ;
20280: PPOPN 3
20282: END
// every 0 0$1 trigger s30 do var i , tmp ;
20283: LD_EXP 104
20287: IFFALSE 20356
20289: GO 20291
20291: DISABLE
20292: LD_INT 0
20294: PPUSH
20295: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
20296: LD_ADDR_VAR 0 2
20300: PUSH
20301: LD_INT 22
20303: PUSH
20304: LD_OWVAR 2
20308: PUSH
20309: EMPTY
20310: LIST
20311: LIST
20312: PPUSH
20313: CALL_OW 69
20317: ST_TO_ADDR
// if not tmp then
20318: LD_VAR 0 2
20322: NOT
20323: IFFALSE 20327
// exit ;
20325: GO 20356
// for i in tmp do
20327: LD_ADDR_VAR 0 1
20331: PUSH
20332: LD_VAR 0 2
20336: PUSH
20337: FOR_IN
20338: IFFALSE 20354
// SetLives ( i , 300 ) ;
20340: LD_VAR 0 1
20344: PPUSH
20345: LD_INT 300
20347: PPUSH
20348: CALL_OW 234
20352: GO 20337
20354: POP
20355: POP
// end ;
20356: PPOPN 2
20358: END
// every 0 0$1 trigger s60 do var i , tmp ;
20359: LD_EXP 105
20363: IFFALSE 20432
20365: GO 20367
20367: DISABLE
20368: LD_INT 0
20370: PPUSH
20371: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
20372: LD_ADDR_VAR 0 2
20376: PUSH
20377: LD_INT 22
20379: PUSH
20380: LD_OWVAR 2
20384: PUSH
20385: EMPTY
20386: LIST
20387: LIST
20388: PPUSH
20389: CALL_OW 69
20393: ST_TO_ADDR
// if not tmp then
20394: LD_VAR 0 2
20398: NOT
20399: IFFALSE 20403
// exit ;
20401: GO 20432
// for i in tmp do
20403: LD_ADDR_VAR 0 1
20407: PUSH
20408: LD_VAR 0 2
20412: PUSH
20413: FOR_IN
20414: IFFALSE 20430
// SetLives ( i , 600 ) ;
20416: LD_VAR 0 1
20420: PPUSH
20421: LD_INT 600
20423: PPUSH
20424: CALL_OW 234
20428: GO 20413
20430: POP
20431: POP
// end ;
20432: PPOPN 2
20434: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
20435: LD_INT 0
20437: PPUSH
// case cmd of 301 :
20438: LD_VAR 0 1
20442: PUSH
20443: LD_INT 301
20445: DOUBLE
20446: EQUAL
20447: IFTRUE 20451
20449: GO 20483
20451: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
20452: LD_VAR 0 6
20456: PPUSH
20457: LD_VAR 0 7
20461: PPUSH
20462: LD_VAR 0 8
20466: PPUSH
20467: LD_VAR 0 4
20471: PPUSH
20472: LD_VAR 0 5
20476: PPUSH
20477: CALL 21684 0 5
20481: GO 20604
20483: LD_INT 302
20485: DOUBLE
20486: EQUAL
20487: IFTRUE 20491
20489: GO 20528
20491: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
20492: LD_VAR 0 6
20496: PPUSH
20497: LD_VAR 0 7
20501: PPUSH
20502: LD_VAR 0 8
20506: PPUSH
20507: LD_VAR 0 9
20511: PPUSH
20512: LD_VAR 0 4
20516: PPUSH
20517: LD_VAR 0 5
20521: PPUSH
20522: CALL 21775 0 6
20526: GO 20604
20528: LD_INT 303
20530: DOUBLE
20531: EQUAL
20532: IFTRUE 20536
20534: GO 20573
20536: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
20537: LD_VAR 0 6
20541: PPUSH
20542: LD_VAR 0 7
20546: PPUSH
20547: LD_VAR 0 8
20551: PPUSH
20552: LD_VAR 0 9
20556: PPUSH
20557: LD_VAR 0 4
20561: PPUSH
20562: LD_VAR 0 5
20566: PPUSH
20567: CALL 20609 0 6
20571: GO 20604
20573: LD_INT 304
20575: DOUBLE
20576: EQUAL
20577: IFTRUE 20581
20579: GO 20603
20581: POP
// hHackTeleport ( unit , x , y ) ; end ;
20582: LD_VAR 0 2
20586: PPUSH
20587: LD_VAR 0 4
20591: PPUSH
20592: LD_VAR 0 5
20596: PPUSH
20597: CALL 22368 0 3
20601: GO 20604
20603: POP
// end ;
20604: LD_VAR 0 12
20608: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
20609: LD_INT 0
20611: PPUSH
20612: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
20613: LD_VAR 0 1
20617: PUSH
20618: LD_INT 1
20620: LESS
20621: PUSH
20622: LD_VAR 0 1
20626: PUSH
20627: LD_INT 3
20629: GREATER
20630: OR
20631: PUSH
20632: LD_VAR 0 5
20636: PPUSH
20637: LD_VAR 0 6
20641: PPUSH
20642: CALL_OW 428
20646: OR
20647: IFFALSE 20651
// exit ;
20649: GO 21371
// uc_side := your_side ;
20651: LD_ADDR_OWVAR 20
20655: PUSH
20656: LD_OWVAR 2
20660: ST_TO_ADDR
// uc_nation := nation ;
20661: LD_ADDR_OWVAR 21
20665: PUSH
20666: LD_VAR 0 1
20670: ST_TO_ADDR
// bc_level = 1 ;
20671: LD_ADDR_OWVAR 43
20675: PUSH
20676: LD_INT 1
20678: ST_TO_ADDR
// case btype of 1 :
20679: LD_VAR 0 2
20683: PUSH
20684: LD_INT 1
20686: DOUBLE
20687: EQUAL
20688: IFTRUE 20692
20690: GO 20703
20692: POP
// bc_type := b_depot ; 2 :
20693: LD_ADDR_OWVAR 42
20697: PUSH
20698: LD_INT 0
20700: ST_TO_ADDR
20701: GO 21315
20703: LD_INT 2
20705: DOUBLE
20706: EQUAL
20707: IFTRUE 20711
20709: GO 20722
20711: POP
// bc_type := b_warehouse ; 3 :
20712: LD_ADDR_OWVAR 42
20716: PUSH
20717: LD_INT 1
20719: ST_TO_ADDR
20720: GO 21315
20722: LD_INT 3
20724: DOUBLE
20725: EQUAL
20726: IFTRUE 20730
20728: GO 20741
20730: POP
// bc_type := b_lab ; 4 .. 9 :
20731: LD_ADDR_OWVAR 42
20735: PUSH
20736: LD_INT 6
20738: ST_TO_ADDR
20739: GO 21315
20741: LD_INT 4
20743: DOUBLE
20744: GREATEREQUAL
20745: IFFALSE 20753
20747: LD_INT 9
20749: DOUBLE
20750: LESSEQUAL
20751: IFTRUE 20755
20753: GO 20807
20755: POP
// begin bc_type := b_lab_half ;
20756: LD_ADDR_OWVAR 42
20760: PUSH
20761: LD_INT 7
20763: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
20764: LD_ADDR_OWVAR 44
20768: PUSH
20769: LD_INT 10
20771: PUSH
20772: LD_INT 11
20774: PUSH
20775: LD_INT 12
20777: PUSH
20778: LD_INT 15
20780: PUSH
20781: LD_INT 14
20783: PUSH
20784: LD_INT 13
20786: PUSH
20787: EMPTY
20788: LIST
20789: LIST
20790: LIST
20791: LIST
20792: LIST
20793: LIST
20794: PUSH
20795: LD_VAR 0 2
20799: PUSH
20800: LD_INT 3
20802: MINUS
20803: ARRAY
20804: ST_TO_ADDR
// end ; 10 .. 13 :
20805: GO 21315
20807: LD_INT 10
20809: DOUBLE
20810: GREATEREQUAL
20811: IFFALSE 20819
20813: LD_INT 13
20815: DOUBLE
20816: LESSEQUAL
20817: IFTRUE 20821
20819: GO 20898
20821: POP
// begin bc_type := b_lab_full ;
20822: LD_ADDR_OWVAR 42
20826: PUSH
20827: LD_INT 8
20829: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
20830: LD_ADDR_OWVAR 44
20834: PUSH
20835: LD_INT 10
20837: PUSH
20838: LD_INT 12
20840: PUSH
20841: LD_INT 14
20843: PUSH
20844: LD_INT 13
20846: PUSH
20847: EMPTY
20848: LIST
20849: LIST
20850: LIST
20851: LIST
20852: PUSH
20853: LD_VAR 0 2
20857: PUSH
20858: LD_INT 9
20860: MINUS
20861: ARRAY
20862: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
20863: LD_ADDR_OWVAR 45
20867: PUSH
20868: LD_INT 11
20870: PUSH
20871: LD_INT 15
20873: PUSH
20874: LD_INT 12
20876: PUSH
20877: LD_INT 15
20879: PUSH
20880: EMPTY
20881: LIST
20882: LIST
20883: LIST
20884: LIST
20885: PUSH
20886: LD_VAR 0 2
20890: PUSH
20891: LD_INT 9
20893: MINUS
20894: ARRAY
20895: ST_TO_ADDR
// end ; 14 :
20896: GO 21315
20898: LD_INT 14
20900: DOUBLE
20901: EQUAL
20902: IFTRUE 20906
20904: GO 20917
20906: POP
// bc_type := b_workshop ; 15 :
20907: LD_ADDR_OWVAR 42
20911: PUSH
20912: LD_INT 2
20914: ST_TO_ADDR
20915: GO 21315
20917: LD_INT 15
20919: DOUBLE
20920: EQUAL
20921: IFTRUE 20925
20923: GO 20936
20925: POP
// bc_type := b_factory ; 16 :
20926: LD_ADDR_OWVAR 42
20930: PUSH
20931: LD_INT 3
20933: ST_TO_ADDR
20934: GO 21315
20936: LD_INT 16
20938: DOUBLE
20939: EQUAL
20940: IFTRUE 20944
20942: GO 20955
20944: POP
// bc_type := b_ext_gun ; 17 :
20945: LD_ADDR_OWVAR 42
20949: PUSH
20950: LD_INT 17
20952: ST_TO_ADDR
20953: GO 21315
20955: LD_INT 17
20957: DOUBLE
20958: EQUAL
20959: IFTRUE 20963
20961: GO 20991
20963: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
20964: LD_ADDR_OWVAR 42
20968: PUSH
20969: LD_INT 19
20971: PUSH
20972: LD_INT 23
20974: PUSH
20975: LD_INT 19
20977: PUSH
20978: EMPTY
20979: LIST
20980: LIST
20981: LIST
20982: PUSH
20983: LD_VAR 0 1
20987: ARRAY
20988: ST_TO_ADDR
20989: GO 21315
20991: LD_INT 18
20993: DOUBLE
20994: EQUAL
20995: IFTRUE 20999
20997: GO 21010
20999: POP
// bc_type := b_ext_radar ; 19 :
21000: LD_ADDR_OWVAR 42
21004: PUSH
21005: LD_INT 20
21007: ST_TO_ADDR
21008: GO 21315
21010: LD_INT 19
21012: DOUBLE
21013: EQUAL
21014: IFTRUE 21018
21016: GO 21029
21018: POP
// bc_type := b_ext_radio ; 20 :
21019: LD_ADDR_OWVAR 42
21023: PUSH
21024: LD_INT 22
21026: ST_TO_ADDR
21027: GO 21315
21029: LD_INT 20
21031: DOUBLE
21032: EQUAL
21033: IFTRUE 21037
21035: GO 21048
21037: POP
// bc_type := b_ext_siberium ; 21 :
21038: LD_ADDR_OWVAR 42
21042: PUSH
21043: LD_INT 21
21045: ST_TO_ADDR
21046: GO 21315
21048: LD_INT 21
21050: DOUBLE
21051: EQUAL
21052: IFTRUE 21056
21054: GO 21067
21056: POP
// bc_type := b_ext_computer ; 22 :
21057: LD_ADDR_OWVAR 42
21061: PUSH
21062: LD_INT 24
21064: ST_TO_ADDR
21065: GO 21315
21067: LD_INT 22
21069: DOUBLE
21070: EQUAL
21071: IFTRUE 21075
21073: GO 21086
21075: POP
// bc_type := b_ext_track ; 23 :
21076: LD_ADDR_OWVAR 42
21080: PUSH
21081: LD_INT 16
21083: ST_TO_ADDR
21084: GO 21315
21086: LD_INT 23
21088: DOUBLE
21089: EQUAL
21090: IFTRUE 21094
21092: GO 21105
21094: POP
// bc_type := b_ext_laser ; 24 :
21095: LD_ADDR_OWVAR 42
21099: PUSH
21100: LD_INT 25
21102: ST_TO_ADDR
21103: GO 21315
21105: LD_INT 24
21107: DOUBLE
21108: EQUAL
21109: IFTRUE 21113
21111: GO 21124
21113: POP
// bc_type := b_control_tower ; 25 :
21114: LD_ADDR_OWVAR 42
21118: PUSH
21119: LD_INT 36
21121: ST_TO_ADDR
21122: GO 21315
21124: LD_INT 25
21126: DOUBLE
21127: EQUAL
21128: IFTRUE 21132
21130: GO 21143
21132: POP
// bc_type := b_breastwork ; 26 :
21133: LD_ADDR_OWVAR 42
21137: PUSH
21138: LD_INT 31
21140: ST_TO_ADDR
21141: GO 21315
21143: LD_INT 26
21145: DOUBLE
21146: EQUAL
21147: IFTRUE 21151
21149: GO 21162
21151: POP
// bc_type := b_bunker ; 27 :
21152: LD_ADDR_OWVAR 42
21156: PUSH
21157: LD_INT 32
21159: ST_TO_ADDR
21160: GO 21315
21162: LD_INT 27
21164: DOUBLE
21165: EQUAL
21166: IFTRUE 21170
21168: GO 21181
21170: POP
// bc_type := b_turret ; 28 :
21171: LD_ADDR_OWVAR 42
21175: PUSH
21176: LD_INT 33
21178: ST_TO_ADDR
21179: GO 21315
21181: LD_INT 28
21183: DOUBLE
21184: EQUAL
21185: IFTRUE 21189
21187: GO 21200
21189: POP
// bc_type := b_armoury ; 29 :
21190: LD_ADDR_OWVAR 42
21194: PUSH
21195: LD_INT 4
21197: ST_TO_ADDR
21198: GO 21315
21200: LD_INT 29
21202: DOUBLE
21203: EQUAL
21204: IFTRUE 21208
21206: GO 21219
21208: POP
// bc_type := b_barracks ; 30 :
21209: LD_ADDR_OWVAR 42
21213: PUSH
21214: LD_INT 5
21216: ST_TO_ADDR
21217: GO 21315
21219: LD_INT 30
21221: DOUBLE
21222: EQUAL
21223: IFTRUE 21227
21225: GO 21238
21227: POP
// bc_type := b_solar_power ; 31 :
21228: LD_ADDR_OWVAR 42
21232: PUSH
21233: LD_INT 27
21235: ST_TO_ADDR
21236: GO 21315
21238: LD_INT 31
21240: DOUBLE
21241: EQUAL
21242: IFTRUE 21246
21244: GO 21257
21246: POP
// bc_type := b_oil_power ; 32 :
21247: LD_ADDR_OWVAR 42
21251: PUSH
21252: LD_INT 26
21254: ST_TO_ADDR
21255: GO 21315
21257: LD_INT 32
21259: DOUBLE
21260: EQUAL
21261: IFTRUE 21265
21263: GO 21276
21265: POP
// bc_type := b_siberite_power ; 33 :
21266: LD_ADDR_OWVAR 42
21270: PUSH
21271: LD_INT 28
21273: ST_TO_ADDR
21274: GO 21315
21276: LD_INT 33
21278: DOUBLE
21279: EQUAL
21280: IFTRUE 21284
21282: GO 21295
21284: POP
// bc_type := b_oil_mine ; 34 :
21285: LD_ADDR_OWVAR 42
21289: PUSH
21290: LD_INT 29
21292: ST_TO_ADDR
21293: GO 21315
21295: LD_INT 34
21297: DOUBLE
21298: EQUAL
21299: IFTRUE 21303
21301: GO 21314
21303: POP
// bc_type := b_siberite_mine ; end ;
21304: LD_ADDR_OWVAR 42
21308: PUSH
21309: LD_INT 30
21311: ST_TO_ADDR
21312: GO 21315
21314: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
21315: LD_ADDR_VAR 0 8
21319: PUSH
21320: LD_VAR 0 5
21324: PPUSH
21325: LD_VAR 0 6
21329: PPUSH
21330: LD_VAR 0 3
21334: PPUSH
21335: CALL_OW 47
21339: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
21340: LD_OWVAR 42
21344: PUSH
21345: LD_INT 32
21347: PUSH
21348: LD_INT 33
21350: PUSH
21351: EMPTY
21352: LIST
21353: LIST
21354: IN
21355: IFFALSE 21371
// PlaceWeaponTurret ( b , weapon ) ;
21357: LD_VAR 0 8
21361: PPUSH
21362: LD_VAR 0 4
21366: PPUSH
21367: CALL_OW 431
// end ;
21371: LD_VAR 0 7
21375: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
21376: LD_INT 0
21378: PPUSH
21379: PPUSH
21380: PPUSH
21381: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
21382: LD_ADDR_VAR 0 4
21386: PUSH
21387: LD_INT 22
21389: PUSH
21390: LD_OWVAR 2
21394: PUSH
21395: EMPTY
21396: LIST
21397: LIST
21398: PUSH
21399: LD_INT 2
21401: PUSH
21402: LD_INT 30
21404: PUSH
21405: LD_INT 0
21407: PUSH
21408: EMPTY
21409: LIST
21410: LIST
21411: PUSH
21412: LD_INT 30
21414: PUSH
21415: LD_INT 1
21417: PUSH
21418: EMPTY
21419: LIST
21420: LIST
21421: PUSH
21422: EMPTY
21423: LIST
21424: LIST
21425: LIST
21426: PUSH
21427: EMPTY
21428: LIST
21429: LIST
21430: PPUSH
21431: CALL_OW 69
21435: ST_TO_ADDR
// if not tmp then
21436: LD_VAR 0 4
21440: NOT
21441: IFFALSE 21445
// exit ;
21443: GO 21504
// for i in tmp do
21445: LD_ADDR_VAR 0 2
21449: PUSH
21450: LD_VAR 0 4
21454: PUSH
21455: FOR_IN
21456: IFFALSE 21502
// for j = 1 to 3 do
21458: LD_ADDR_VAR 0 3
21462: PUSH
21463: DOUBLE
21464: LD_INT 1
21466: DEC
21467: ST_TO_ADDR
21468: LD_INT 3
21470: PUSH
21471: FOR_TO
21472: IFFALSE 21498
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
21474: LD_VAR 0 2
21478: PPUSH
21479: CALL_OW 274
21483: PPUSH
21484: LD_VAR 0 3
21488: PPUSH
21489: LD_INT 99999
21491: PPUSH
21492: CALL_OW 277
21496: GO 21471
21498: POP
21499: POP
21500: GO 21455
21502: POP
21503: POP
// end ;
21504: LD_VAR 0 1
21508: RET
// export function hHackSetLevel10 ; var i , j ; begin
21509: LD_INT 0
21511: PPUSH
21512: PPUSH
21513: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
21514: LD_ADDR_VAR 0 2
21518: PUSH
21519: LD_INT 21
21521: PUSH
21522: LD_INT 1
21524: PUSH
21525: EMPTY
21526: LIST
21527: LIST
21528: PPUSH
21529: CALL_OW 69
21533: PUSH
21534: FOR_IN
21535: IFFALSE 21587
// if IsSelected ( i ) then
21537: LD_VAR 0 2
21541: PPUSH
21542: CALL_OW 306
21546: IFFALSE 21585
// begin for j := 1 to 4 do
21548: LD_ADDR_VAR 0 3
21552: PUSH
21553: DOUBLE
21554: LD_INT 1
21556: DEC
21557: ST_TO_ADDR
21558: LD_INT 4
21560: PUSH
21561: FOR_TO
21562: IFFALSE 21583
// SetSkill ( i , j , 10 ) ;
21564: LD_VAR 0 2
21568: PPUSH
21569: LD_VAR 0 3
21573: PPUSH
21574: LD_INT 10
21576: PPUSH
21577: CALL_OW 237
21581: GO 21561
21583: POP
21584: POP
// end ;
21585: GO 21534
21587: POP
21588: POP
// end ;
21589: LD_VAR 0 1
21593: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
21594: LD_INT 0
21596: PPUSH
21597: PPUSH
21598: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
21599: LD_ADDR_VAR 0 2
21603: PUSH
21604: LD_INT 22
21606: PUSH
21607: LD_OWVAR 2
21611: PUSH
21612: EMPTY
21613: LIST
21614: LIST
21615: PUSH
21616: LD_INT 21
21618: PUSH
21619: LD_INT 1
21621: PUSH
21622: EMPTY
21623: LIST
21624: LIST
21625: PUSH
21626: EMPTY
21627: LIST
21628: LIST
21629: PPUSH
21630: CALL_OW 69
21634: PUSH
21635: FOR_IN
21636: IFFALSE 21677
// begin for j := 1 to 4 do
21638: LD_ADDR_VAR 0 3
21642: PUSH
21643: DOUBLE
21644: LD_INT 1
21646: DEC
21647: ST_TO_ADDR
21648: LD_INT 4
21650: PUSH
21651: FOR_TO
21652: IFFALSE 21673
// SetSkill ( i , j , 10 ) ;
21654: LD_VAR 0 2
21658: PPUSH
21659: LD_VAR 0 3
21663: PPUSH
21664: LD_INT 10
21666: PPUSH
21667: CALL_OW 237
21671: GO 21651
21673: POP
21674: POP
// end ;
21675: GO 21635
21677: POP
21678: POP
// end ;
21679: LD_VAR 0 1
21683: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
21684: LD_INT 0
21686: PPUSH
// uc_side := your_side ;
21687: LD_ADDR_OWVAR 20
21691: PUSH
21692: LD_OWVAR 2
21696: ST_TO_ADDR
// uc_nation := nation ;
21697: LD_ADDR_OWVAR 21
21701: PUSH
21702: LD_VAR 0 1
21706: ST_TO_ADDR
// InitHc ;
21707: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
21711: LD_INT 0
21713: PPUSH
21714: LD_VAR 0 2
21718: PPUSH
21719: LD_VAR 0 3
21723: PPUSH
21724: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
21728: LD_VAR 0 4
21732: PPUSH
21733: LD_VAR 0 5
21737: PPUSH
21738: CALL_OW 428
21742: PUSH
21743: LD_INT 0
21745: EQUAL
21746: IFFALSE 21770
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
21748: CALL_OW 44
21752: PPUSH
21753: LD_VAR 0 4
21757: PPUSH
21758: LD_VAR 0 5
21762: PPUSH
21763: LD_INT 1
21765: PPUSH
21766: CALL_OW 48
// end ;
21770: LD_VAR 0 6
21774: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
21775: LD_INT 0
21777: PPUSH
21778: PPUSH
// uc_side := your_side ;
21779: LD_ADDR_OWVAR 20
21783: PUSH
21784: LD_OWVAR 2
21788: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
21789: LD_VAR 0 1
21793: PUSH
21794: LD_INT 1
21796: PUSH
21797: LD_INT 2
21799: PUSH
21800: LD_INT 3
21802: PUSH
21803: LD_INT 4
21805: PUSH
21806: LD_INT 5
21808: PUSH
21809: EMPTY
21810: LIST
21811: LIST
21812: LIST
21813: LIST
21814: LIST
21815: IN
21816: IFFALSE 21828
// uc_nation := nation_american else
21818: LD_ADDR_OWVAR 21
21822: PUSH
21823: LD_INT 1
21825: ST_TO_ADDR
21826: GO 21871
// if chassis in [ 11 , 12 , 13 , 14 ] then
21828: LD_VAR 0 1
21832: PUSH
21833: LD_INT 11
21835: PUSH
21836: LD_INT 12
21838: PUSH
21839: LD_INT 13
21841: PUSH
21842: LD_INT 14
21844: PUSH
21845: EMPTY
21846: LIST
21847: LIST
21848: LIST
21849: LIST
21850: IN
21851: IFFALSE 21863
// uc_nation := nation_arabian else
21853: LD_ADDR_OWVAR 21
21857: PUSH
21858: LD_INT 2
21860: ST_TO_ADDR
21861: GO 21871
// uc_nation := nation_russian ;
21863: LD_ADDR_OWVAR 21
21867: PUSH
21868: LD_INT 3
21870: ST_TO_ADDR
// vc_chassis := chassis ;
21871: LD_ADDR_OWVAR 37
21875: PUSH
21876: LD_VAR 0 1
21880: ST_TO_ADDR
// vc_engine := engine ;
21881: LD_ADDR_OWVAR 39
21885: PUSH
21886: LD_VAR 0 2
21890: ST_TO_ADDR
// vc_control := control ;
21891: LD_ADDR_OWVAR 38
21895: PUSH
21896: LD_VAR 0 3
21900: ST_TO_ADDR
// vc_weapon := weapon ;
21901: LD_ADDR_OWVAR 40
21905: PUSH
21906: LD_VAR 0 4
21910: ST_TO_ADDR
// un := CreateVehicle ;
21911: LD_ADDR_VAR 0 8
21915: PUSH
21916: CALL_OW 45
21920: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
21921: LD_VAR 0 8
21925: PPUSH
21926: LD_INT 0
21928: PPUSH
21929: LD_INT 5
21931: PPUSH
21932: CALL_OW 12
21936: PPUSH
21937: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
21941: LD_VAR 0 8
21945: PPUSH
21946: LD_VAR 0 5
21950: PPUSH
21951: LD_VAR 0 6
21955: PPUSH
21956: LD_INT 1
21958: PPUSH
21959: CALL_OW 48
// end ;
21963: LD_VAR 0 7
21967: RET
// export hInvincible ; every 1 do
21968: GO 21970
21970: DISABLE
// hInvincible := [ ] ;
21971: LD_ADDR_EXP 106
21975: PUSH
21976: EMPTY
21977: ST_TO_ADDR
21978: END
// every 10 do var i ;
21979: GO 21981
21981: DISABLE
21982: LD_INT 0
21984: PPUSH
// begin enable ;
21985: ENABLE
// if not hInvincible then
21986: LD_EXP 106
21990: NOT
21991: IFFALSE 21995
// exit ;
21993: GO 22039
// for i in hInvincible do
21995: LD_ADDR_VAR 0 1
21999: PUSH
22000: LD_EXP 106
22004: PUSH
22005: FOR_IN
22006: IFFALSE 22037
// if GetLives ( i ) < 1000 then
22008: LD_VAR 0 1
22012: PPUSH
22013: CALL_OW 256
22017: PUSH
22018: LD_INT 1000
22020: LESS
22021: IFFALSE 22035
// SetLives ( i , 1000 ) ;
22023: LD_VAR 0 1
22027: PPUSH
22028: LD_INT 1000
22030: PPUSH
22031: CALL_OW 234
22035: GO 22005
22037: POP
22038: POP
// end ;
22039: PPOPN 1
22041: END
// export function hHackInvincible ; var i ; begin
22042: LD_INT 0
22044: PPUSH
22045: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
22046: LD_ADDR_VAR 0 2
22050: PUSH
22051: LD_INT 2
22053: PUSH
22054: LD_INT 21
22056: PUSH
22057: LD_INT 1
22059: PUSH
22060: EMPTY
22061: LIST
22062: LIST
22063: PUSH
22064: LD_INT 21
22066: PUSH
22067: LD_INT 2
22069: PUSH
22070: EMPTY
22071: LIST
22072: LIST
22073: PUSH
22074: EMPTY
22075: LIST
22076: LIST
22077: LIST
22078: PPUSH
22079: CALL_OW 69
22083: PUSH
22084: FOR_IN
22085: IFFALSE 22146
// if IsSelected ( i ) then
22087: LD_VAR 0 2
22091: PPUSH
22092: CALL_OW 306
22096: IFFALSE 22144
// begin if i in hInvincible then
22098: LD_VAR 0 2
22102: PUSH
22103: LD_EXP 106
22107: IN
22108: IFFALSE 22128
// hInvincible := hInvincible diff i else
22110: LD_ADDR_EXP 106
22114: PUSH
22115: LD_EXP 106
22119: PUSH
22120: LD_VAR 0 2
22124: DIFF
22125: ST_TO_ADDR
22126: GO 22144
// hInvincible := hInvincible union i ;
22128: LD_ADDR_EXP 106
22132: PUSH
22133: LD_EXP 106
22137: PUSH
22138: LD_VAR 0 2
22142: UNION
22143: ST_TO_ADDR
// end ;
22144: GO 22084
22146: POP
22147: POP
// end ;
22148: LD_VAR 0 1
22152: RET
// export function hHackInvisible ; var i , j ; begin
22153: LD_INT 0
22155: PPUSH
22156: PPUSH
22157: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
22158: LD_ADDR_VAR 0 2
22162: PUSH
22163: LD_INT 21
22165: PUSH
22166: LD_INT 1
22168: PUSH
22169: EMPTY
22170: LIST
22171: LIST
22172: PPUSH
22173: CALL_OW 69
22177: PUSH
22178: FOR_IN
22179: IFFALSE 22203
// if IsSelected ( i ) then
22181: LD_VAR 0 2
22185: PPUSH
22186: CALL_OW 306
22190: IFFALSE 22201
// ComForceInvisible ( i ) ;
22192: LD_VAR 0 2
22196: PPUSH
22197: CALL_OW 496
22201: GO 22178
22203: POP
22204: POP
// end ;
22205: LD_VAR 0 1
22209: RET
// export function hHackChangeYourSide ; begin
22210: LD_INT 0
22212: PPUSH
// if your_side = 8 then
22213: LD_OWVAR 2
22217: PUSH
22218: LD_INT 8
22220: EQUAL
22221: IFFALSE 22233
// your_side := 0 else
22223: LD_ADDR_OWVAR 2
22227: PUSH
22228: LD_INT 0
22230: ST_TO_ADDR
22231: GO 22247
// your_side := your_side + 1 ;
22233: LD_ADDR_OWVAR 2
22237: PUSH
22238: LD_OWVAR 2
22242: PUSH
22243: LD_INT 1
22245: PLUS
22246: ST_TO_ADDR
// end ;
22247: LD_VAR 0 1
22251: RET
// export function hHackChangeUnitSide ; var i , j ; begin
22252: LD_INT 0
22254: PPUSH
22255: PPUSH
22256: PPUSH
// for i in all_units do
22257: LD_ADDR_VAR 0 2
22261: PUSH
22262: LD_OWVAR 3
22266: PUSH
22267: FOR_IN
22268: IFFALSE 22346
// if IsSelected ( i ) then
22270: LD_VAR 0 2
22274: PPUSH
22275: CALL_OW 306
22279: IFFALSE 22344
// begin j := GetSide ( i ) ;
22281: LD_ADDR_VAR 0 3
22285: PUSH
22286: LD_VAR 0 2
22290: PPUSH
22291: CALL_OW 255
22295: ST_TO_ADDR
// if j = 8 then
22296: LD_VAR 0 3
22300: PUSH
22301: LD_INT 8
22303: EQUAL
22304: IFFALSE 22316
// j := 0 else
22306: LD_ADDR_VAR 0 3
22310: PUSH
22311: LD_INT 0
22313: ST_TO_ADDR
22314: GO 22330
// j := j + 1 ;
22316: LD_ADDR_VAR 0 3
22320: PUSH
22321: LD_VAR 0 3
22325: PUSH
22326: LD_INT 1
22328: PLUS
22329: ST_TO_ADDR
// SetSide ( i , j ) ;
22330: LD_VAR 0 2
22334: PPUSH
22335: LD_VAR 0 3
22339: PPUSH
22340: CALL_OW 235
// end ;
22344: GO 22267
22346: POP
22347: POP
// end ;
22348: LD_VAR 0 1
22352: RET
// export function hHackFog ; begin
22353: LD_INT 0
22355: PPUSH
// FogOff ( true ) ;
22356: LD_INT 1
22358: PPUSH
22359: CALL_OW 344
// end ;
22363: LD_VAR 0 1
22367: RET
// export function hHackTeleport ( unit , x , y ) ; begin
22368: LD_INT 0
22370: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
22371: LD_VAR 0 1
22375: PPUSH
22376: LD_VAR 0 2
22380: PPUSH
22381: LD_VAR 0 3
22385: PPUSH
22386: LD_INT 1
22388: PPUSH
22389: LD_INT 1
22391: PPUSH
22392: CALL_OW 483
// CenterOnXY ( x , y ) ;
22396: LD_VAR 0 2
22400: PPUSH
22401: LD_VAR 0 3
22405: PPUSH
22406: CALL_OW 84
// end ; end_of_file
22410: LD_VAR 0 4
22414: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
22415: LD_INT 0
22417: PPUSH
22418: PPUSH
22419: PPUSH
22420: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
22421: LD_VAR 0 1
22425: PPUSH
22426: CALL_OW 264
22430: PUSH
22431: LD_EXP 33
22435: EQUAL
22436: IFFALSE 22508
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
22438: LD_INT 68
22440: PPUSH
22441: LD_VAR 0 1
22445: PPUSH
22446: CALL_OW 255
22450: PPUSH
22451: CALL_OW 321
22455: PUSH
22456: LD_INT 2
22458: EQUAL
22459: IFFALSE 22471
// eff := 70 else
22461: LD_ADDR_VAR 0 4
22465: PUSH
22466: LD_INT 70
22468: ST_TO_ADDR
22469: GO 22479
// eff := 30 ;
22471: LD_ADDR_VAR 0 4
22475: PUSH
22476: LD_INT 30
22478: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
22479: LD_VAR 0 1
22483: PPUSH
22484: CALL_OW 250
22488: PPUSH
22489: LD_VAR 0 1
22493: PPUSH
22494: CALL_OW 251
22498: PPUSH
22499: LD_VAR 0 4
22503: PPUSH
22504: CALL_OW 495
// end ; end ;
22508: LD_VAR 0 2
22512: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
22513: LD_INT 0
22515: PPUSH
// end ;
22516: LD_VAR 0 4
22520: RET
// export function SOS_Command ( cmd ) ; begin
22521: LD_INT 0
22523: PPUSH
// end ;
22524: LD_VAR 0 2
22528: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
22529: LD_INT 0
22531: PPUSH
// end ;
22532: LD_VAR 0 6
22536: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
22537: LD_INT 0
22539: PPUSH
22540: PPUSH
// if not vehicle or not factory then
22541: LD_VAR 0 1
22545: NOT
22546: PUSH
22547: LD_VAR 0 2
22551: NOT
22552: OR
22553: IFFALSE 22557
// exit ;
22555: GO 22788
// if factoryWaypoints >= factory then
22557: LD_EXP 107
22561: PUSH
22562: LD_VAR 0 2
22566: GREATEREQUAL
22567: IFFALSE 22788
// if factoryWaypoints [ factory ] then
22569: LD_EXP 107
22573: PUSH
22574: LD_VAR 0 2
22578: ARRAY
22579: IFFALSE 22788
// begin if GetControl ( vehicle ) = control_manual then
22581: LD_VAR 0 1
22585: PPUSH
22586: CALL_OW 263
22590: PUSH
22591: LD_INT 1
22593: EQUAL
22594: IFFALSE 22675
// begin driver := IsDrivenBy ( vehicle ) ;
22596: LD_ADDR_VAR 0 4
22600: PUSH
22601: LD_VAR 0 1
22605: PPUSH
22606: CALL_OW 311
22610: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
22611: LD_VAR 0 4
22615: PPUSH
22616: LD_EXP 107
22620: PUSH
22621: LD_VAR 0 2
22625: ARRAY
22626: PUSH
22627: LD_INT 3
22629: ARRAY
22630: PPUSH
22631: LD_EXP 107
22635: PUSH
22636: LD_VAR 0 2
22640: ARRAY
22641: PUSH
22642: LD_INT 4
22644: ARRAY
22645: PPUSH
22646: CALL_OW 171
// AddComExitVehicle ( driver ) ;
22650: LD_VAR 0 4
22654: PPUSH
22655: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
22659: LD_VAR 0 4
22663: PPUSH
22664: LD_VAR 0 2
22668: PPUSH
22669: CALL_OW 180
// end else
22673: GO 22788
// if GetControl ( vehicle ) = control_remote then
22675: LD_VAR 0 1
22679: PPUSH
22680: CALL_OW 263
22684: PUSH
22685: LD_INT 2
22687: EQUAL
22688: IFFALSE 22749
// begin wait ( 0 0$2 ) ;
22690: LD_INT 70
22692: PPUSH
22693: CALL_OW 67
// if Connect ( vehicle ) then
22697: LD_VAR 0 1
22701: PPUSH
22702: CALL 35012 0 1
22706: IFFALSE 22747
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
22708: LD_VAR 0 1
22712: PPUSH
22713: LD_EXP 107
22717: PUSH
22718: LD_VAR 0 2
22722: ARRAY
22723: PUSH
22724: LD_INT 3
22726: ARRAY
22727: PPUSH
22728: LD_EXP 107
22732: PUSH
22733: LD_VAR 0 2
22737: ARRAY
22738: PUSH
22739: LD_INT 4
22741: ARRAY
22742: PPUSH
22743: CALL_OW 171
// end else
22747: GO 22788
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
22749: LD_VAR 0 1
22753: PPUSH
22754: LD_EXP 107
22758: PUSH
22759: LD_VAR 0 2
22763: ARRAY
22764: PUSH
22765: LD_INT 3
22767: ARRAY
22768: PPUSH
22769: LD_EXP 107
22773: PUSH
22774: LD_VAR 0 2
22778: ARRAY
22779: PUSH
22780: LD_INT 4
22782: ARRAY
22783: PPUSH
22784: CALL_OW 171
// end ; end ;
22788: LD_VAR 0 3
22792: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
22793: LD_INT 0
22795: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
22796: LD_VAR 0 1
22800: PUSH
22801: LD_INT 250
22803: EQUAL
22804: PUSH
22805: LD_VAR 0 2
22809: PPUSH
22810: CALL_OW 264
22814: PUSH
22815: LD_EXP 36
22819: EQUAL
22820: AND
22821: IFFALSE 22842
// MinerPlaceMine ( unit , x , y ) ;
22823: LD_VAR 0 2
22827: PPUSH
22828: LD_VAR 0 4
22832: PPUSH
22833: LD_VAR 0 5
22837: PPUSH
22838: CALL 25570 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
22842: LD_VAR 0 1
22846: PUSH
22847: LD_INT 251
22849: EQUAL
22850: PUSH
22851: LD_VAR 0 2
22855: PPUSH
22856: CALL_OW 264
22860: PUSH
22861: LD_EXP 36
22865: EQUAL
22866: AND
22867: IFFALSE 22888
// MinerDetonateMine ( unit , x , y ) ;
22869: LD_VAR 0 2
22873: PPUSH
22874: LD_VAR 0 4
22878: PPUSH
22879: LD_VAR 0 5
22883: PPUSH
22884: CALL 25847 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
22888: LD_VAR 0 1
22892: PUSH
22893: LD_INT 252
22895: EQUAL
22896: PUSH
22897: LD_VAR 0 2
22901: PPUSH
22902: CALL_OW 264
22906: PUSH
22907: LD_EXP 36
22911: EQUAL
22912: AND
22913: IFFALSE 22934
// MinerCreateMinefield ( unit , x , y ) ;
22915: LD_VAR 0 2
22919: PPUSH
22920: LD_VAR 0 4
22924: PPUSH
22925: LD_VAR 0 5
22929: PPUSH
22930: CALL 26264 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
22934: LD_VAR 0 1
22938: PUSH
22939: LD_INT 253
22941: EQUAL
22942: PUSH
22943: LD_VAR 0 2
22947: PPUSH
22948: CALL_OW 257
22952: PUSH
22953: LD_INT 5
22955: EQUAL
22956: AND
22957: IFFALSE 22978
// ComBinocular ( unit , x , y ) ;
22959: LD_VAR 0 2
22963: PPUSH
22964: LD_VAR 0 4
22968: PPUSH
22969: LD_VAR 0 5
22973: PPUSH
22974: CALL 26635 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
22978: LD_VAR 0 1
22982: PUSH
22983: LD_INT 254
22985: EQUAL
22986: PUSH
22987: LD_VAR 0 2
22991: PPUSH
22992: CALL_OW 264
22996: PUSH
22997: LD_EXP 31
23001: EQUAL
23002: AND
23003: PUSH
23004: LD_VAR 0 3
23008: PPUSH
23009: CALL_OW 263
23013: PUSH
23014: LD_INT 3
23016: EQUAL
23017: AND
23018: IFFALSE 23034
// HackDestroyVehicle ( unit , selectedUnit ) ;
23020: LD_VAR 0 2
23024: PPUSH
23025: LD_VAR 0 3
23029: PPUSH
23030: CALL 24930 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
23034: LD_VAR 0 1
23038: PUSH
23039: LD_INT 255
23041: EQUAL
23042: PUSH
23043: LD_VAR 0 2
23047: PPUSH
23048: CALL_OW 264
23052: PUSH
23053: LD_INT 14
23055: PUSH
23056: LD_INT 53
23058: PUSH
23059: EMPTY
23060: LIST
23061: LIST
23062: IN
23063: AND
23064: PUSH
23065: LD_VAR 0 4
23069: PPUSH
23070: LD_VAR 0 5
23074: PPUSH
23075: CALL_OW 488
23079: AND
23080: IFFALSE 23104
// CutTreeXYR ( unit , x , y , 12 ) ;
23082: LD_VAR 0 2
23086: PPUSH
23087: LD_VAR 0 4
23091: PPUSH
23092: LD_VAR 0 5
23096: PPUSH
23097: LD_INT 12
23099: PPUSH
23100: CALL 23496 0 4
// if cmd = 256 then
23104: LD_VAR 0 1
23108: PUSH
23109: LD_INT 256
23111: EQUAL
23112: IFFALSE 23133
// SetFactoryWaypoint ( unit , x , y ) ;
23114: LD_VAR 0 2
23118: PPUSH
23119: LD_VAR 0 4
23123: PPUSH
23124: LD_VAR 0 5
23128: PPUSH
23129: CALL 23138 0 3
// end ;
23133: LD_VAR 0 6
23137: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
23138: LD_INT 0
23140: PPUSH
23141: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
23142: LD_VAR 0 1
23146: NOT
23147: PUSH
23148: LD_VAR 0 2
23152: PPUSH
23153: LD_VAR 0 3
23157: PPUSH
23158: CALL_OW 488
23162: NOT
23163: OR
23164: PUSH
23165: LD_VAR 0 1
23169: PPUSH
23170: CALL_OW 266
23174: PUSH
23175: LD_INT 3
23177: NONEQUAL
23178: PUSH
23179: LD_VAR 0 1
23183: PPUSH
23184: CALL_OW 247
23188: PUSH
23189: LD_INT 1
23191: EQUAL
23192: NOT
23193: AND
23194: OR
23195: IFFALSE 23199
// exit ;
23197: GO 23348
// if GetType ( factory ) = unit_human then
23199: LD_VAR 0 1
23203: PPUSH
23204: CALL_OW 247
23208: PUSH
23209: LD_INT 1
23211: EQUAL
23212: IFFALSE 23229
// factory := IsInUnit ( factory ) ;
23214: LD_ADDR_VAR 0 1
23218: PUSH
23219: LD_VAR 0 1
23223: PPUSH
23224: CALL_OW 310
23228: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
23229: LD_VAR 0 1
23233: PPUSH
23234: CALL_OW 266
23238: PUSH
23239: LD_INT 3
23241: NONEQUAL
23242: IFFALSE 23246
// exit ;
23244: GO 23348
// if HexInfo ( x , y ) = factory then
23246: LD_VAR 0 2
23250: PPUSH
23251: LD_VAR 0 3
23255: PPUSH
23256: CALL_OW 428
23260: PUSH
23261: LD_VAR 0 1
23265: EQUAL
23266: IFFALSE 23293
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
23268: LD_ADDR_EXP 107
23272: PUSH
23273: LD_EXP 107
23277: PPUSH
23278: LD_VAR 0 1
23282: PPUSH
23283: LD_INT 0
23285: PPUSH
23286: CALL_OW 1
23290: ST_TO_ADDR
23291: GO 23344
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
23293: LD_ADDR_EXP 107
23297: PUSH
23298: LD_EXP 107
23302: PPUSH
23303: LD_VAR 0 1
23307: PPUSH
23308: LD_VAR 0 1
23312: PPUSH
23313: CALL_OW 255
23317: PUSH
23318: LD_VAR 0 1
23322: PUSH
23323: LD_VAR 0 2
23327: PUSH
23328: LD_VAR 0 3
23332: PUSH
23333: EMPTY
23334: LIST
23335: LIST
23336: LIST
23337: LIST
23338: PPUSH
23339: CALL_OW 1
23343: ST_TO_ADDR
// UpdateFactoryWaypoints ;
23344: CALL 23353 0 0
// end ;
23348: LD_VAR 0 4
23352: RET
// export function UpdateFactoryWaypoints ( ) ; var i ; begin
23353: LD_INT 0
23355: PPUSH
23356: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
23357: LD_STRING resetFactoryWaypoint();
23359: PPUSH
23360: CALL_OW 559
// if factoryWaypoints then
23364: LD_EXP 107
23368: IFFALSE 23491
// begin for i := 1 to factoryWaypoints do
23370: LD_ADDR_VAR 0 2
23374: PUSH
23375: DOUBLE
23376: LD_INT 1
23378: DEC
23379: ST_TO_ADDR
23380: LD_EXP 107
23384: PUSH
23385: FOR_TO
23386: IFFALSE 23489
// if factoryWaypoints [ i ] then
23388: LD_EXP 107
23392: PUSH
23393: LD_VAR 0 2
23397: ARRAY
23398: IFFALSE 23487
// ToLua ( setFactoryWaypointXY( & factoryWaypoints [ i ] [ 1 ] & , & factoryWaypoints [ i ] [ 2 ] & , & factoryWaypoints [ i ] [ 3 ] & , & factoryWaypoints [ i ] [ 4 ] & ) ) ;
23400: LD_STRING setFactoryWaypointXY(
23402: PUSH
23403: LD_EXP 107
23407: PUSH
23408: LD_VAR 0 2
23412: ARRAY
23413: PUSH
23414: LD_INT 1
23416: ARRAY
23417: STR
23418: PUSH
23419: LD_STRING ,
23421: STR
23422: PUSH
23423: LD_EXP 107
23427: PUSH
23428: LD_VAR 0 2
23432: ARRAY
23433: PUSH
23434: LD_INT 2
23436: ARRAY
23437: STR
23438: PUSH
23439: LD_STRING ,
23441: STR
23442: PUSH
23443: LD_EXP 107
23447: PUSH
23448: LD_VAR 0 2
23452: ARRAY
23453: PUSH
23454: LD_INT 3
23456: ARRAY
23457: STR
23458: PUSH
23459: LD_STRING ,
23461: STR
23462: PUSH
23463: LD_EXP 107
23467: PUSH
23468: LD_VAR 0 2
23472: ARRAY
23473: PUSH
23474: LD_INT 4
23476: ARRAY
23477: STR
23478: PUSH
23479: LD_STRING )
23481: STR
23482: PPUSH
23483: CALL_OW 559
23487: GO 23385
23489: POP
23490: POP
// end ; end ;
23491: LD_VAR 0 1
23495: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
23496: LD_INT 0
23498: PPUSH
23499: PPUSH
23500: PPUSH
23501: PPUSH
23502: PPUSH
23503: PPUSH
23504: PPUSH
23505: PPUSH
23506: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
23507: LD_VAR 0 1
23511: NOT
23512: PUSH
23513: LD_VAR 0 2
23517: PPUSH
23518: LD_VAR 0 3
23522: PPUSH
23523: CALL_OW 488
23527: NOT
23528: OR
23529: PUSH
23530: LD_VAR 0 4
23534: NOT
23535: OR
23536: IFFALSE 23540
// exit ;
23538: GO 23880
// list := [ ] ;
23540: LD_ADDR_VAR 0 13
23544: PUSH
23545: EMPTY
23546: ST_TO_ADDR
// if x - r < 0 then
23547: LD_VAR 0 2
23551: PUSH
23552: LD_VAR 0 4
23556: MINUS
23557: PUSH
23558: LD_INT 0
23560: LESS
23561: IFFALSE 23573
// min_x := 0 else
23563: LD_ADDR_VAR 0 7
23567: PUSH
23568: LD_INT 0
23570: ST_TO_ADDR
23571: GO 23589
// min_x := x - r ;
23573: LD_ADDR_VAR 0 7
23577: PUSH
23578: LD_VAR 0 2
23582: PUSH
23583: LD_VAR 0 4
23587: MINUS
23588: ST_TO_ADDR
// if y - r < 0 then
23589: LD_VAR 0 3
23593: PUSH
23594: LD_VAR 0 4
23598: MINUS
23599: PUSH
23600: LD_INT 0
23602: LESS
23603: IFFALSE 23615
// min_y := 0 else
23605: LD_ADDR_VAR 0 8
23609: PUSH
23610: LD_INT 0
23612: ST_TO_ADDR
23613: GO 23631
// min_y := y - r ;
23615: LD_ADDR_VAR 0 8
23619: PUSH
23620: LD_VAR 0 3
23624: PUSH
23625: LD_VAR 0 4
23629: MINUS
23630: ST_TO_ADDR
// max_x := x + r ;
23631: LD_ADDR_VAR 0 9
23635: PUSH
23636: LD_VAR 0 2
23640: PUSH
23641: LD_VAR 0 4
23645: PLUS
23646: ST_TO_ADDR
// max_y := y + r ;
23647: LD_ADDR_VAR 0 10
23651: PUSH
23652: LD_VAR 0 3
23656: PUSH
23657: LD_VAR 0 4
23661: PLUS
23662: ST_TO_ADDR
// for _x = min_x to max_x do
23663: LD_ADDR_VAR 0 11
23667: PUSH
23668: DOUBLE
23669: LD_VAR 0 7
23673: DEC
23674: ST_TO_ADDR
23675: LD_VAR 0 9
23679: PUSH
23680: FOR_TO
23681: IFFALSE 23798
// for _y = min_y to max_y do
23683: LD_ADDR_VAR 0 12
23687: PUSH
23688: DOUBLE
23689: LD_VAR 0 8
23693: DEC
23694: ST_TO_ADDR
23695: LD_VAR 0 10
23699: PUSH
23700: FOR_TO
23701: IFFALSE 23794
// begin if not ValidHex ( _x , _y ) then
23703: LD_VAR 0 11
23707: PPUSH
23708: LD_VAR 0 12
23712: PPUSH
23713: CALL_OW 488
23717: NOT
23718: IFFALSE 23722
// continue ;
23720: GO 23700
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
23722: LD_VAR 0 11
23726: PPUSH
23727: LD_VAR 0 12
23731: PPUSH
23732: CALL_OW 351
23736: PUSH
23737: LD_VAR 0 11
23741: PPUSH
23742: LD_VAR 0 12
23746: PPUSH
23747: CALL_OW 554
23751: AND
23752: IFFALSE 23792
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
23754: LD_ADDR_VAR 0 13
23758: PUSH
23759: LD_VAR 0 13
23763: PPUSH
23764: LD_VAR 0 13
23768: PUSH
23769: LD_INT 1
23771: PLUS
23772: PPUSH
23773: LD_VAR 0 11
23777: PUSH
23778: LD_VAR 0 12
23782: PUSH
23783: EMPTY
23784: LIST
23785: LIST
23786: PPUSH
23787: CALL_OW 2
23791: ST_TO_ADDR
// end ;
23792: GO 23700
23794: POP
23795: POP
23796: GO 23680
23798: POP
23799: POP
// if not list then
23800: LD_VAR 0 13
23804: NOT
23805: IFFALSE 23809
// exit ;
23807: GO 23880
// for i in list do
23809: LD_ADDR_VAR 0 6
23813: PUSH
23814: LD_VAR 0 13
23818: PUSH
23819: FOR_IN
23820: IFFALSE 23878
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
23822: LD_VAR 0 1
23826: PPUSH
23827: LD_STRING M
23829: PUSH
23830: LD_VAR 0 6
23834: PUSH
23835: LD_INT 1
23837: ARRAY
23838: PUSH
23839: LD_VAR 0 6
23843: PUSH
23844: LD_INT 2
23846: ARRAY
23847: PUSH
23848: LD_INT 0
23850: PUSH
23851: LD_INT 0
23853: PUSH
23854: LD_INT 0
23856: PUSH
23857: LD_INT 0
23859: PUSH
23860: EMPTY
23861: LIST
23862: LIST
23863: LIST
23864: LIST
23865: LIST
23866: LIST
23867: LIST
23868: PUSH
23869: EMPTY
23870: LIST
23871: PPUSH
23872: CALL_OW 447
23876: GO 23819
23878: POP
23879: POP
// end ;
23880: LD_VAR 0 5
23884: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
23885: LD_EXP 108
23889: NOT
23890: IFFALSE 23940
23892: GO 23894
23894: DISABLE
// begin initHack := true ;
23895: LD_ADDR_EXP 108
23899: PUSH
23900: LD_INT 1
23902: ST_TO_ADDR
// hackTanks := [ ] ;
23903: LD_ADDR_EXP 109
23907: PUSH
23908: EMPTY
23909: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
23910: LD_ADDR_EXP 110
23914: PUSH
23915: EMPTY
23916: ST_TO_ADDR
// hackLimit := 3 ;
23917: LD_ADDR_EXP 111
23921: PUSH
23922: LD_INT 3
23924: ST_TO_ADDR
// hackDist := 12 ;
23925: LD_ADDR_EXP 112
23929: PUSH
23930: LD_INT 12
23932: ST_TO_ADDR
// hackCounter := [ ] ;
23933: LD_ADDR_EXP 113
23937: PUSH
23938: EMPTY
23939: ST_TO_ADDR
// end ;
23940: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
23941: LD_EXP 108
23945: PUSH
23946: LD_INT 34
23948: PUSH
23949: LD_EXP 31
23953: PUSH
23954: EMPTY
23955: LIST
23956: LIST
23957: PPUSH
23958: CALL_OW 69
23962: AND
23963: IFFALSE 24218
23965: GO 23967
23967: DISABLE
23968: LD_INT 0
23970: PPUSH
23971: PPUSH
// begin enable ;
23972: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
23973: LD_ADDR_VAR 0 1
23977: PUSH
23978: LD_INT 34
23980: PUSH
23981: LD_EXP 31
23985: PUSH
23986: EMPTY
23987: LIST
23988: LIST
23989: PPUSH
23990: CALL_OW 69
23994: PUSH
23995: FOR_IN
23996: IFFALSE 24216
// begin if not i in hackTanks then
23998: LD_VAR 0 1
24002: PUSH
24003: LD_EXP 109
24007: IN
24008: NOT
24009: IFFALSE 24092
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
24011: LD_ADDR_EXP 109
24015: PUSH
24016: LD_EXP 109
24020: PPUSH
24021: LD_EXP 109
24025: PUSH
24026: LD_INT 1
24028: PLUS
24029: PPUSH
24030: LD_VAR 0 1
24034: PPUSH
24035: CALL_OW 1
24039: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
24040: LD_ADDR_EXP 110
24044: PUSH
24045: LD_EXP 110
24049: PPUSH
24050: LD_EXP 110
24054: PUSH
24055: LD_INT 1
24057: PLUS
24058: PPUSH
24059: EMPTY
24060: PPUSH
24061: CALL_OW 1
24065: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
24066: LD_ADDR_EXP 113
24070: PUSH
24071: LD_EXP 113
24075: PPUSH
24076: LD_EXP 113
24080: PUSH
24081: LD_INT 1
24083: PLUS
24084: PPUSH
24085: EMPTY
24086: PPUSH
24087: CALL_OW 1
24091: ST_TO_ADDR
// end ; if not IsOk ( i ) then
24092: LD_VAR 0 1
24096: PPUSH
24097: CALL_OW 302
24101: NOT
24102: IFFALSE 24115
// begin HackUnlinkAll ( i ) ;
24104: LD_VAR 0 1
24108: PPUSH
24109: CALL 24221 0 1
// continue ;
24113: GO 23995
// end ; HackCheckCapturedStatus ( i ) ;
24115: LD_VAR 0 1
24119: PPUSH
24120: CALL 24664 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
24124: LD_ADDR_VAR 0 2
24128: PUSH
24129: LD_INT 81
24131: PUSH
24132: LD_VAR 0 1
24136: PPUSH
24137: CALL_OW 255
24141: PUSH
24142: EMPTY
24143: LIST
24144: LIST
24145: PUSH
24146: LD_INT 33
24148: PUSH
24149: LD_INT 3
24151: PUSH
24152: EMPTY
24153: LIST
24154: LIST
24155: PUSH
24156: LD_INT 91
24158: PUSH
24159: LD_VAR 0 1
24163: PUSH
24164: LD_EXP 112
24168: PUSH
24169: EMPTY
24170: LIST
24171: LIST
24172: LIST
24173: PUSH
24174: LD_INT 50
24176: PUSH
24177: EMPTY
24178: LIST
24179: PUSH
24180: EMPTY
24181: LIST
24182: LIST
24183: LIST
24184: LIST
24185: PPUSH
24186: CALL_OW 69
24190: ST_TO_ADDR
// if not tmp then
24191: LD_VAR 0 2
24195: NOT
24196: IFFALSE 24200
// continue ;
24198: GO 23995
// HackLink ( i , tmp ) ;
24200: LD_VAR 0 1
24204: PPUSH
24205: LD_VAR 0 2
24209: PPUSH
24210: CALL 24357 0 2
// end ;
24214: GO 23995
24216: POP
24217: POP
// end ;
24218: PPOPN 2
24220: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
24221: LD_INT 0
24223: PPUSH
24224: PPUSH
24225: PPUSH
// if not hack in hackTanks then
24226: LD_VAR 0 1
24230: PUSH
24231: LD_EXP 109
24235: IN
24236: NOT
24237: IFFALSE 24241
// exit ;
24239: GO 24352
// index := GetElementIndex ( hackTanks , hack ) ;
24241: LD_ADDR_VAR 0 4
24245: PUSH
24246: LD_EXP 109
24250: PPUSH
24251: LD_VAR 0 1
24255: PPUSH
24256: CALL 31826 0 2
24260: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
24261: LD_EXP 110
24265: PUSH
24266: LD_VAR 0 4
24270: ARRAY
24271: IFFALSE 24352
// begin for i in hackTanksCaptured [ index ] do
24273: LD_ADDR_VAR 0 3
24277: PUSH
24278: LD_EXP 110
24282: PUSH
24283: LD_VAR 0 4
24287: ARRAY
24288: PUSH
24289: FOR_IN
24290: IFFALSE 24316
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
24292: LD_VAR 0 3
24296: PUSH
24297: LD_INT 1
24299: ARRAY
24300: PPUSH
24301: LD_VAR 0 3
24305: PUSH
24306: LD_INT 2
24308: ARRAY
24309: PPUSH
24310: CALL_OW 235
24314: GO 24289
24316: POP
24317: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
24318: LD_ADDR_EXP 110
24322: PUSH
24323: LD_EXP 110
24327: PPUSH
24328: LD_VAR 0 4
24332: PPUSH
24333: EMPTY
24334: PPUSH
24335: CALL_OW 1
24339: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
24340: LD_VAR 0 1
24344: PPUSH
24345: LD_INT 0
24347: PPUSH
24348: CALL_OW 505
// end ; end ;
24352: LD_VAR 0 2
24356: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
24357: LD_INT 0
24359: PPUSH
24360: PPUSH
24361: PPUSH
// if not hack in hackTanks or not vehicles then
24362: LD_VAR 0 1
24366: PUSH
24367: LD_EXP 109
24371: IN
24372: NOT
24373: PUSH
24374: LD_VAR 0 2
24378: NOT
24379: OR
24380: IFFALSE 24384
// exit ;
24382: GO 24659
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
24384: LD_ADDR_VAR 0 2
24388: PUSH
24389: LD_VAR 0 1
24393: PPUSH
24394: LD_VAR 0 2
24398: PPUSH
24399: LD_INT 1
24401: PPUSH
24402: LD_INT 1
24404: PPUSH
24405: CALL 32476 0 4
24409: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
24410: LD_ADDR_VAR 0 5
24414: PUSH
24415: LD_EXP 109
24419: PPUSH
24420: LD_VAR 0 1
24424: PPUSH
24425: CALL 31826 0 2
24429: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
24430: LD_EXP 110
24434: PUSH
24435: LD_VAR 0 5
24439: ARRAY
24440: PUSH
24441: LD_EXP 111
24445: LESS
24446: IFFALSE 24635
// begin for i := 1 to vehicles do
24448: LD_ADDR_VAR 0 4
24452: PUSH
24453: DOUBLE
24454: LD_INT 1
24456: DEC
24457: ST_TO_ADDR
24458: LD_VAR 0 2
24462: PUSH
24463: FOR_TO
24464: IFFALSE 24633
// begin if hackTanksCaptured [ index ] = hackLimit then
24466: LD_EXP 110
24470: PUSH
24471: LD_VAR 0 5
24475: ARRAY
24476: PUSH
24477: LD_EXP 111
24481: EQUAL
24482: IFFALSE 24486
// break ;
24484: GO 24633
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
24486: LD_ADDR_EXP 113
24490: PUSH
24491: LD_EXP 113
24495: PPUSH
24496: LD_VAR 0 5
24500: PPUSH
24501: LD_EXP 113
24505: PUSH
24506: LD_VAR 0 5
24510: ARRAY
24511: PUSH
24512: LD_INT 1
24514: PLUS
24515: PPUSH
24516: CALL_OW 1
24520: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
24521: LD_ADDR_EXP 110
24525: PUSH
24526: LD_EXP 110
24530: PPUSH
24531: LD_VAR 0 5
24535: PUSH
24536: LD_EXP 110
24540: PUSH
24541: LD_VAR 0 5
24545: ARRAY
24546: PUSH
24547: LD_INT 1
24549: PLUS
24550: PUSH
24551: EMPTY
24552: LIST
24553: LIST
24554: PPUSH
24555: LD_VAR 0 2
24559: PUSH
24560: LD_VAR 0 4
24564: ARRAY
24565: PUSH
24566: LD_VAR 0 2
24570: PUSH
24571: LD_VAR 0 4
24575: ARRAY
24576: PPUSH
24577: CALL_OW 255
24581: PUSH
24582: EMPTY
24583: LIST
24584: LIST
24585: PPUSH
24586: CALL 32041 0 3
24590: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
24591: LD_VAR 0 2
24595: PUSH
24596: LD_VAR 0 4
24600: ARRAY
24601: PPUSH
24602: LD_VAR 0 1
24606: PPUSH
24607: CALL_OW 255
24611: PPUSH
24612: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
24616: LD_VAR 0 2
24620: PUSH
24621: LD_VAR 0 4
24625: ARRAY
24626: PPUSH
24627: CALL_OW 141
// end ;
24631: GO 24463
24633: POP
24634: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
24635: LD_VAR 0 1
24639: PPUSH
24640: LD_EXP 110
24644: PUSH
24645: LD_VAR 0 5
24649: ARRAY
24650: PUSH
24651: LD_INT 0
24653: PLUS
24654: PPUSH
24655: CALL_OW 505
// end ;
24659: LD_VAR 0 3
24663: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
24664: LD_INT 0
24666: PPUSH
24667: PPUSH
24668: PPUSH
24669: PPUSH
// if not hack in hackTanks then
24670: LD_VAR 0 1
24674: PUSH
24675: LD_EXP 109
24679: IN
24680: NOT
24681: IFFALSE 24685
// exit ;
24683: GO 24925
// index := GetElementIndex ( hackTanks , hack ) ;
24685: LD_ADDR_VAR 0 4
24689: PUSH
24690: LD_EXP 109
24694: PPUSH
24695: LD_VAR 0 1
24699: PPUSH
24700: CALL 31826 0 2
24704: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
24705: LD_ADDR_VAR 0 3
24709: PUSH
24710: DOUBLE
24711: LD_EXP 110
24715: PUSH
24716: LD_VAR 0 4
24720: ARRAY
24721: INC
24722: ST_TO_ADDR
24723: LD_INT 1
24725: PUSH
24726: FOR_DOWNTO
24727: IFFALSE 24899
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
24729: LD_ADDR_VAR 0 5
24733: PUSH
24734: LD_EXP 110
24738: PUSH
24739: LD_VAR 0 4
24743: ARRAY
24744: PUSH
24745: LD_VAR 0 3
24749: ARRAY
24750: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
24751: LD_VAR 0 5
24755: PUSH
24756: LD_INT 1
24758: ARRAY
24759: PPUSH
24760: CALL_OW 302
24764: NOT
24765: PUSH
24766: LD_VAR 0 5
24770: PUSH
24771: LD_INT 1
24773: ARRAY
24774: PPUSH
24775: CALL_OW 255
24779: PUSH
24780: LD_VAR 0 1
24784: PPUSH
24785: CALL_OW 255
24789: NONEQUAL
24790: OR
24791: IFFALSE 24897
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
24793: LD_VAR 0 5
24797: PUSH
24798: LD_INT 1
24800: ARRAY
24801: PPUSH
24802: CALL_OW 305
24806: PUSH
24807: LD_VAR 0 5
24811: PUSH
24812: LD_INT 1
24814: ARRAY
24815: PPUSH
24816: CALL_OW 255
24820: PUSH
24821: LD_VAR 0 1
24825: PPUSH
24826: CALL_OW 255
24830: EQUAL
24831: AND
24832: IFFALSE 24856
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
24834: LD_VAR 0 5
24838: PUSH
24839: LD_INT 1
24841: ARRAY
24842: PPUSH
24843: LD_VAR 0 5
24847: PUSH
24848: LD_INT 2
24850: ARRAY
24851: PPUSH
24852: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
24856: LD_ADDR_EXP 110
24860: PUSH
24861: LD_EXP 110
24865: PPUSH
24866: LD_VAR 0 4
24870: PPUSH
24871: LD_EXP 110
24875: PUSH
24876: LD_VAR 0 4
24880: ARRAY
24881: PPUSH
24882: LD_VAR 0 3
24886: PPUSH
24887: CALL_OW 3
24891: PPUSH
24892: CALL_OW 1
24896: ST_TO_ADDR
// end ; end ;
24897: GO 24726
24899: POP
24900: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
24901: LD_VAR 0 1
24905: PPUSH
24906: LD_EXP 110
24910: PUSH
24911: LD_VAR 0 4
24915: ARRAY
24916: PUSH
24917: LD_INT 0
24919: PLUS
24920: PPUSH
24921: CALL_OW 505
// end ;
24925: LD_VAR 0 2
24929: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
24930: LD_INT 0
24932: PPUSH
24933: PPUSH
24934: PPUSH
24935: PPUSH
// if not hack in hackTanks then
24936: LD_VAR 0 1
24940: PUSH
24941: LD_EXP 109
24945: IN
24946: NOT
24947: IFFALSE 24951
// exit ;
24949: GO 25036
// index := GetElementIndex ( hackTanks , hack ) ;
24951: LD_ADDR_VAR 0 5
24955: PUSH
24956: LD_EXP 109
24960: PPUSH
24961: LD_VAR 0 1
24965: PPUSH
24966: CALL 31826 0 2
24970: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
24971: LD_ADDR_VAR 0 4
24975: PUSH
24976: DOUBLE
24977: LD_INT 1
24979: DEC
24980: ST_TO_ADDR
24981: LD_EXP 110
24985: PUSH
24986: LD_VAR 0 5
24990: ARRAY
24991: PUSH
24992: FOR_TO
24993: IFFALSE 25034
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
24995: LD_EXP 110
24999: PUSH
25000: LD_VAR 0 5
25004: ARRAY
25005: PUSH
25006: LD_VAR 0 4
25010: ARRAY
25011: PUSH
25012: LD_INT 1
25014: ARRAY
25015: PUSH
25016: LD_VAR 0 2
25020: EQUAL
25021: IFFALSE 25032
// KillUnit ( vehicle ) ;
25023: LD_VAR 0 2
25027: PPUSH
25028: CALL_OW 66
25032: GO 24992
25034: POP
25035: POP
// end ;
25036: LD_VAR 0 3
25040: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
25041: LD_EXP 114
25045: NOT
25046: IFFALSE 25081
25048: GO 25050
25050: DISABLE
// begin initMiner := true ;
25051: LD_ADDR_EXP 114
25055: PUSH
25056: LD_INT 1
25058: ST_TO_ADDR
// minersList := [ ] ;
25059: LD_ADDR_EXP 115
25063: PUSH
25064: EMPTY
25065: ST_TO_ADDR
// minerMinesList := [ ] ;
25066: LD_ADDR_EXP 116
25070: PUSH
25071: EMPTY
25072: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
25073: LD_ADDR_EXP 117
25077: PUSH
25078: LD_INT 5
25080: ST_TO_ADDR
// end ;
25081: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
25082: LD_EXP 114
25086: PUSH
25087: LD_INT 34
25089: PUSH
25090: LD_EXP 36
25094: PUSH
25095: EMPTY
25096: LIST
25097: LIST
25098: PPUSH
25099: CALL_OW 69
25103: AND
25104: IFFALSE 25567
25106: GO 25108
25108: DISABLE
25109: LD_INT 0
25111: PPUSH
25112: PPUSH
25113: PPUSH
25114: PPUSH
// begin enable ;
25115: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
25116: LD_ADDR_VAR 0 1
25120: PUSH
25121: LD_INT 34
25123: PUSH
25124: LD_EXP 36
25128: PUSH
25129: EMPTY
25130: LIST
25131: LIST
25132: PPUSH
25133: CALL_OW 69
25137: PUSH
25138: FOR_IN
25139: IFFALSE 25211
// begin if not i in minersList then
25141: LD_VAR 0 1
25145: PUSH
25146: LD_EXP 115
25150: IN
25151: NOT
25152: IFFALSE 25209
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
25154: LD_ADDR_EXP 115
25158: PUSH
25159: LD_EXP 115
25163: PPUSH
25164: LD_EXP 115
25168: PUSH
25169: LD_INT 1
25171: PLUS
25172: PPUSH
25173: LD_VAR 0 1
25177: PPUSH
25178: CALL_OW 1
25182: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
25183: LD_ADDR_EXP 116
25187: PUSH
25188: LD_EXP 116
25192: PPUSH
25193: LD_EXP 116
25197: PUSH
25198: LD_INT 1
25200: PLUS
25201: PPUSH
25202: EMPTY
25203: PPUSH
25204: CALL_OW 1
25208: ST_TO_ADDR
// end end ;
25209: GO 25138
25211: POP
25212: POP
// for i := minerMinesList downto 1 do
25213: LD_ADDR_VAR 0 1
25217: PUSH
25218: DOUBLE
25219: LD_EXP 116
25223: INC
25224: ST_TO_ADDR
25225: LD_INT 1
25227: PUSH
25228: FOR_DOWNTO
25229: IFFALSE 25565
// begin if IsLive ( minersList [ i ] ) then
25231: LD_EXP 115
25235: PUSH
25236: LD_VAR 0 1
25240: ARRAY
25241: PPUSH
25242: CALL_OW 300
25246: IFFALSE 25274
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
25248: LD_EXP 115
25252: PUSH
25253: LD_VAR 0 1
25257: ARRAY
25258: PPUSH
25259: LD_EXP 116
25263: PUSH
25264: LD_VAR 0 1
25268: ARRAY
25269: PPUSH
25270: CALL_OW 505
// if not minerMinesList [ i ] then
25274: LD_EXP 116
25278: PUSH
25279: LD_VAR 0 1
25283: ARRAY
25284: NOT
25285: IFFALSE 25289
// continue ;
25287: GO 25228
// for j := minerMinesList [ i ] downto 1 do
25289: LD_ADDR_VAR 0 2
25293: PUSH
25294: DOUBLE
25295: LD_EXP 116
25299: PUSH
25300: LD_VAR 0 1
25304: ARRAY
25305: INC
25306: ST_TO_ADDR
25307: LD_INT 1
25309: PUSH
25310: FOR_DOWNTO
25311: IFFALSE 25561
// begin side := GetSide ( minersList [ i ] ) ;
25313: LD_ADDR_VAR 0 3
25317: PUSH
25318: LD_EXP 115
25322: PUSH
25323: LD_VAR 0 1
25327: ARRAY
25328: PPUSH
25329: CALL_OW 255
25333: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
25334: LD_ADDR_VAR 0 4
25338: PUSH
25339: LD_EXP 116
25343: PUSH
25344: LD_VAR 0 1
25348: ARRAY
25349: PUSH
25350: LD_VAR 0 2
25354: ARRAY
25355: PUSH
25356: LD_INT 1
25358: ARRAY
25359: PPUSH
25360: LD_EXP 116
25364: PUSH
25365: LD_VAR 0 1
25369: ARRAY
25370: PUSH
25371: LD_VAR 0 2
25375: ARRAY
25376: PUSH
25377: LD_INT 2
25379: ARRAY
25380: PPUSH
25381: CALL_OW 428
25385: ST_TO_ADDR
// if not tmp then
25386: LD_VAR 0 4
25390: NOT
25391: IFFALSE 25395
// continue ;
25393: GO 25310
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
25395: LD_VAR 0 4
25399: PUSH
25400: LD_INT 81
25402: PUSH
25403: LD_VAR 0 3
25407: PUSH
25408: EMPTY
25409: LIST
25410: LIST
25411: PPUSH
25412: CALL_OW 69
25416: IN
25417: PUSH
25418: LD_EXP 116
25422: PUSH
25423: LD_VAR 0 1
25427: ARRAY
25428: PUSH
25429: LD_VAR 0 2
25433: ARRAY
25434: PUSH
25435: LD_INT 1
25437: ARRAY
25438: PPUSH
25439: LD_EXP 116
25443: PUSH
25444: LD_VAR 0 1
25448: ARRAY
25449: PUSH
25450: LD_VAR 0 2
25454: ARRAY
25455: PUSH
25456: LD_INT 2
25458: ARRAY
25459: PPUSH
25460: CALL_OW 458
25464: AND
25465: IFFALSE 25559
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
25467: LD_EXP 116
25471: PUSH
25472: LD_VAR 0 1
25476: ARRAY
25477: PUSH
25478: LD_VAR 0 2
25482: ARRAY
25483: PUSH
25484: LD_INT 1
25486: ARRAY
25487: PPUSH
25488: LD_EXP 116
25492: PUSH
25493: LD_VAR 0 1
25497: ARRAY
25498: PUSH
25499: LD_VAR 0 2
25503: ARRAY
25504: PUSH
25505: LD_INT 2
25507: ARRAY
25508: PPUSH
25509: LD_VAR 0 3
25513: PPUSH
25514: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
25518: LD_ADDR_EXP 116
25522: PUSH
25523: LD_EXP 116
25527: PPUSH
25528: LD_VAR 0 1
25532: PPUSH
25533: LD_EXP 116
25537: PUSH
25538: LD_VAR 0 1
25542: ARRAY
25543: PPUSH
25544: LD_VAR 0 2
25548: PPUSH
25549: CALL_OW 3
25553: PPUSH
25554: CALL_OW 1
25558: ST_TO_ADDR
// end ; end ;
25559: GO 25310
25561: POP
25562: POP
// end ;
25563: GO 25228
25565: POP
25566: POP
// end ;
25567: PPOPN 4
25569: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
25570: LD_INT 0
25572: PPUSH
25573: PPUSH
// result := false ;
25574: LD_ADDR_VAR 0 4
25578: PUSH
25579: LD_INT 0
25581: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
25582: LD_VAR 0 1
25586: PPUSH
25587: CALL_OW 264
25591: PUSH
25592: LD_EXP 36
25596: EQUAL
25597: NOT
25598: IFFALSE 25602
// exit ;
25600: GO 25842
// index := GetElementIndex ( minersList , unit ) ;
25602: LD_ADDR_VAR 0 5
25606: PUSH
25607: LD_EXP 115
25611: PPUSH
25612: LD_VAR 0 1
25616: PPUSH
25617: CALL 31826 0 2
25621: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
25622: LD_EXP 116
25626: PUSH
25627: LD_VAR 0 5
25631: ARRAY
25632: PUSH
25633: LD_EXP 117
25637: GREATEREQUAL
25638: IFFALSE 25642
// exit ;
25640: GO 25842
// ComMoveXY ( unit , x , y ) ;
25642: LD_VAR 0 1
25646: PPUSH
25647: LD_VAR 0 2
25651: PPUSH
25652: LD_VAR 0 3
25656: PPUSH
25657: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
25661: LD_INT 35
25663: PPUSH
25664: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
25668: LD_VAR 0 1
25672: PPUSH
25673: LD_VAR 0 2
25677: PPUSH
25678: LD_VAR 0 3
25682: PPUSH
25683: CALL 62545 0 3
25687: NOT
25688: PUSH
25689: LD_VAR 0 1
25693: PPUSH
25694: CALL_OW 314
25698: AND
25699: IFFALSE 25703
// exit ;
25701: GO 25842
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
25703: LD_VAR 0 2
25707: PPUSH
25708: LD_VAR 0 3
25712: PPUSH
25713: CALL_OW 428
25717: PUSH
25718: LD_VAR 0 1
25722: EQUAL
25723: PUSH
25724: LD_VAR 0 1
25728: PPUSH
25729: CALL_OW 314
25733: NOT
25734: AND
25735: IFFALSE 25661
// PlaySoundXY ( x , y , PlantMine ) ;
25737: LD_VAR 0 2
25741: PPUSH
25742: LD_VAR 0 3
25746: PPUSH
25747: LD_STRING PlantMine
25749: PPUSH
25750: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
25754: LD_VAR 0 2
25758: PPUSH
25759: LD_VAR 0 3
25763: PPUSH
25764: LD_VAR 0 1
25768: PPUSH
25769: CALL_OW 255
25773: PPUSH
25774: LD_INT 0
25776: PPUSH
25777: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
25781: LD_ADDR_EXP 116
25785: PUSH
25786: LD_EXP 116
25790: PPUSH
25791: LD_VAR 0 5
25795: PUSH
25796: LD_EXP 116
25800: PUSH
25801: LD_VAR 0 5
25805: ARRAY
25806: PUSH
25807: LD_INT 1
25809: PLUS
25810: PUSH
25811: EMPTY
25812: LIST
25813: LIST
25814: PPUSH
25815: LD_VAR 0 2
25819: PUSH
25820: LD_VAR 0 3
25824: PUSH
25825: EMPTY
25826: LIST
25827: LIST
25828: PPUSH
25829: CALL 32041 0 3
25833: ST_TO_ADDR
// result := true ;
25834: LD_ADDR_VAR 0 4
25838: PUSH
25839: LD_INT 1
25841: ST_TO_ADDR
// end ;
25842: LD_VAR 0 4
25846: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
25847: LD_INT 0
25849: PPUSH
25850: PPUSH
25851: PPUSH
// if not unit in minersList then
25852: LD_VAR 0 1
25856: PUSH
25857: LD_EXP 115
25861: IN
25862: NOT
25863: IFFALSE 25867
// exit ;
25865: GO 26259
// index := GetElementIndex ( minersList , unit ) ;
25867: LD_ADDR_VAR 0 6
25871: PUSH
25872: LD_EXP 115
25876: PPUSH
25877: LD_VAR 0 1
25881: PPUSH
25882: CALL 31826 0 2
25886: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
25887: LD_ADDR_VAR 0 5
25891: PUSH
25892: DOUBLE
25893: LD_EXP 116
25897: PUSH
25898: LD_VAR 0 6
25902: ARRAY
25903: INC
25904: ST_TO_ADDR
25905: LD_INT 1
25907: PUSH
25908: FOR_DOWNTO
25909: IFFALSE 26070
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
25911: LD_EXP 116
25915: PUSH
25916: LD_VAR 0 6
25920: ARRAY
25921: PUSH
25922: LD_VAR 0 5
25926: ARRAY
25927: PUSH
25928: LD_INT 1
25930: ARRAY
25931: PUSH
25932: LD_VAR 0 2
25936: EQUAL
25937: PUSH
25938: LD_EXP 116
25942: PUSH
25943: LD_VAR 0 6
25947: ARRAY
25948: PUSH
25949: LD_VAR 0 5
25953: ARRAY
25954: PUSH
25955: LD_INT 2
25957: ARRAY
25958: PUSH
25959: LD_VAR 0 3
25963: EQUAL
25964: AND
25965: IFFALSE 26068
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
25967: LD_EXP 116
25971: PUSH
25972: LD_VAR 0 6
25976: ARRAY
25977: PUSH
25978: LD_VAR 0 5
25982: ARRAY
25983: PUSH
25984: LD_INT 1
25986: ARRAY
25987: PPUSH
25988: LD_EXP 116
25992: PUSH
25993: LD_VAR 0 6
25997: ARRAY
25998: PUSH
25999: LD_VAR 0 5
26003: ARRAY
26004: PUSH
26005: LD_INT 2
26007: ARRAY
26008: PPUSH
26009: LD_VAR 0 1
26013: PPUSH
26014: CALL_OW 255
26018: PPUSH
26019: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
26023: LD_ADDR_EXP 116
26027: PUSH
26028: LD_EXP 116
26032: PPUSH
26033: LD_VAR 0 6
26037: PPUSH
26038: LD_EXP 116
26042: PUSH
26043: LD_VAR 0 6
26047: ARRAY
26048: PPUSH
26049: LD_VAR 0 5
26053: PPUSH
26054: CALL_OW 3
26058: PPUSH
26059: CALL_OW 1
26063: ST_TO_ADDR
// exit ;
26064: POP
26065: POP
26066: GO 26259
// end ; end ;
26068: GO 25908
26070: POP
26071: POP
// for i := minerMinesList [ index ] downto 1 do
26072: LD_ADDR_VAR 0 5
26076: PUSH
26077: DOUBLE
26078: LD_EXP 116
26082: PUSH
26083: LD_VAR 0 6
26087: ARRAY
26088: INC
26089: ST_TO_ADDR
26090: LD_INT 1
26092: PUSH
26093: FOR_DOWNTO
26094: IFFALSE 26257
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
26096: LD_EXP 116
26100: PUSH
26101: LD_VAR 0 6
26105: ARRAY
26106: PUSH
26107: LD_VAR 0 5
26111: ARRAY
26112: PUSH
26113: LD_INT 1
26115: ARRAY
26116: PPUSH
26117: LD_EXP 116
26121: PUSH
26122: LD_VAR 0 6
26126: ARRAY
26127: PUSH
26128: LD_VAR 0 5
26132: ARRAY
26133: PUSH
26134: LD_INT 2
26136: ARRAY
26137: PPUSH
26138: LD_VAR 0 2
26142: PPUSH
26143: LD_VAR 0 3
26147: PPUSH
26148: CALL_OW 298
26152: PUSH
26153: LD_INT 6
26155: LESS
26156: IFFALSE 26255
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
26158: LD_EXP 116
26162: PUSH
26163: LD_VAR 0 6
26167: ARRAY
26168: PUSH
26169: LD_VAR 0 5
26173: ARRAY
26174: PUSH
26175: LD_INT 1
26177: ARRAY
26178: PPUSH
26179: LD_EXP 116
26183: PUSH
26184: LD_VAR 0 6
26188: ARRAY
26189: PUSH
26190: LD_VAR 0 5
26194: ARRAY
26195: PUSH
26196: LD_INT 2
26198: ARRAY
26199: PPUSH
26200: LD_VAR 0 1
26204: PPUSH
26205: CALL_OW 255
26209: PPUSH
26210: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
26214: LD_ADDR_EXP 116
26218: PUSH
26219: LD_EXP 116
26223: PPUSH
26224: LD_VAR 0 6
26228: PPUSH
26229: LD_EXP 116
26233: PUSH
26234: LD_VAR 0 6
26238: ARRAY
26239: PPUSH
26240: LD_VAR 0 5
26244: PPUSH
26245: CALL_OW 3
26249: PPUSH
26250: CALL_OW 1
26254: ST_TO_ADDR
// end ; end ;
26255: GO 26093
26257: POP
26258: POP
// end ;
26259: LD_VAR 0 4
26263: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
26264: LD_INT 0
26266: PPUSH
26267: PPUSH
26268: PPUSH
26269: PPUSH
26270: PPUSH
26271: PPUSH
26272: PPUSH
26273: PPUSH
26274: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
26275: LD_VAR 0 1
26279: PPUSH
26280: CALL_OW 264
26284: PUSH
26285: LD_EXP 36
26289: EQUAL
26290: NOT
26291: PUSH
26292: LD_VAR 0 1
26296: PUSH
26297: LD_EXP 115
26301: IN
26302: NOT
26303: OR
26304: IFFALSE 26308
// exit ;
26306: GO 26630
// index := GetElementIndex ( minersList , unit ) ;
26308: LD_ADDR_VAR 0 6
26312: PUSH
26313: LD_EXP 115
26317: PPUSH
26318: LD_VAR 0 1
26322: PPUSH
26323: CALL 31826 0 2
26327: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
26328: LD_ADDR_VAR 0 8
26332: PUSH
26333: LD_EXP 117
26337: PUSH
26338: LD_EXP 116
26342: PUSH
26343: LD_VAR 0 6
26347: ARRAY
26348: MINUS
26349: ST_TO_ADDR
// if not minesFreeAmount then
26350: LD_VAR 0 8
26354: NOT
26355: IFFALSE 26359
// exit ;
26357: GO 26630
// tmp := [ ] ;
26359: LD_ADDR_VAR 0 7
26363: PUSH
26364: EMPTY
26365: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
26366: LD_ADDR_VAR 0 5
26370: PUSH
26371: DOUBLE
26372: LD_INT 1
26374: DEC
26375: ST_TO_ADDR
26376: LD_VAR 0 8
26380: PUSH
26381: FOR_TO
26382: IFFALSE 26577
// begin _d := rand ( 0 , 5 ) ;
26384: LD_ADDR_VAR 0 11
26388: PUSH
26389: LD_INT 0
26391: PPUSH
26392: LD_INT 5
26394: PPUSH
26395: CALL_OW 12
26399: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
26400: LD_ADDR_VAR 0 12
26404: PUSH
26405: LD_INT 2
26407: PPUSH
26408: LD_INT 6
26410: PPUSH
26411: CALL_OW 12
26415: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
26416: LD_ADDR_VAR 0 9
26420: PUSH
26421: LD_VAR 0 2
26425: PPUSH
26426: LD_VAR 0 11
26430: PPUSH
26431: LD_VAR 0 12
26435: PPUSH
26436: CALL_OW 272
26440: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
26441: LD_ADDR_VAR 0 10
26445: PUSH
26446: LD_VAR 0 3
26450: PPUSH
26451: LD_VAR 0 11
26455: PPUSH
26456: LD_VAR 0 12
26460: PPUSH
26461: CALL_OW 273
26465: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
26466: LD_VAR 0 9
26470: PPUSH
26471: LD_VAR 0 10
26475: PPUSH
26476: CALL_OW 488
26480: PUSH
26481: LD_VAR 0 9
26485: PUSH
26486: LD_VAR 0 10
26490: PUSH
26491: EMPTY
26492: LIST
26493: LIST
26494: PUSH
26495: LD_VAR 0 7
26499: IN
26500: NOT
26501: AND
26502: PUSH
26503: LD_VAR 0 9
26507: PPUSH
26508: LD_VAR 0 10
26512: PPUSH
26513: CALL_OW 458
26517: NOT
26518: AND
26519: IFFALSE 26561
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
26521: LD_ADDR_VAR 0 7
26525: PUSH
26526: LD_VAR 0 7
26530: PPUSH
26531: LD_VAR 0 7
26535: PUSH
26536: LD_INT 1
26538: PLUS
26539: PPUSH
26540: LD_VAR 0 9
26544: PUSH
26545: LD_VAR 0 10
26549: PUSH
26550: EMPTY
26551: LIST
26552: LIST
26553: PPUSH
26554: CALL_OW 1
26558: ST_TO_ADDR
26559: GO 26575
// i := i - 1 ;
26561: LD_ADDR_VAR 0 5
26565: PUSH
26566: LD_VAR 0 5
26570: PUSH
26571: LD_INT 1
26573: MINUS
26574: ST_TO_ADDR
// end ;
26575: GO 26381
26577: POP
26578: POP
// for i in tmp do
26579: LD_ADDR_VAR 0 5
26583: PUSH
26584: LD_VAR 0 7
26588: PUSH
26589: FOR_IN
26590: IFFALSE 26628
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
26592: LD_VAR 0 1
26596: PPUSH
26597: LD_VAR 0 5
26601: PUSH
26602: LD_INT 1
26604: ARRAY
26605: PPUSH
26606: LD_VAR 0 5
26610: PUSH
26611: LD_INT 2
26613: ARRAY
26614: PPUSH
26615: CALL 25570 0 3
26619: NOT
26620: IFFALSE 26626
// exit ;
26622: POP
26623: POP
26624: GO 26630
26626: GO 26589
26628: POP
26629: POP
// end ;
26630: LD_VAR 0 4
26634: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
26635: LD_INT 0
26637: PPUSH
26638: PPUSH
26639: PPUSH
26640: PPUSH
26641: PPUSH
26642: PPUSH
26643: PPUSH
// if not GetClass ( unit ) = class_sniper then
26644: LD_VAR 0 1
26648: PPUSH
26649: CALL_OW 257
26653: PUSH
26654: LD_INT 5
26656: EQUAL
26657: NOT
26658: IFFALSE 26662
// exit ;
26660: GO 27050
// dist := 8 ;
26662: LD_ADDR_VAR 0 5
26666: PUSH
26667: LD_INT 8
26669: ST_TO_ADDR
// viewRange := 12 ;
26670: LD_ADDR_VAR 0 7
26674: PUSH
26675: LD_INT 12
26677: ST_TO_ADDR
// side := GetSide ( unit ) ;
26678: LD_ADDR_VAR 0 6
26682: PUSH
26683: LD_VAR 0 1
26687: PPUSH
26688: CALL_OW 255
26692: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
26693: LD_INT 61
26695: PPUSH
26696: LD_VAR 0 6
26700: PPUSH
26701: CALL_OW 321
26705: PUSH
26706: LD_INT 2
26708: EQUAL
26709: IFFALSE 26719
// viewRange := 16 ;
26711: LD_ADDR_VAR 0 7
26715: PUSH
26716: LD_INT 16
26718: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
26719: LD_VAR 0 1
26723: PPUSH
26724: LD_VAR 0 2
26728: PPUSH
26729: LD_VAR 0 3
26733: PPUSH
26734: CALL_OW 297
26738: PUSH
26739: LD_VAR 0 5
26743: GREATER
26744: IFFALSE 26823
// begin ComMoveXY ( unit , x , y ) ;
26746: LD_VAR 0 1
26750: PPUSH
26751: LD_VAR 0 2
26755: PPUSH
26756: LD_VAR 0 3
26760: PPUSH
26761: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
26765: LD_INT 35
26767: PPUSH
26768: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
26772: LD_VAR 0 1
26776: PPUSH
26777: LD_VAR 0 2
26781: PPUSH
26782: LD_VAR 0 3
26786: PPUSH
26787: CALL 62545 0 3
26791: NOT
26792: IFFALSE 26796
// exit ;
26794: GO 27050
// until GetDistUnitXY ( unit , x , y ) < dist ;
26796: LD_VAR 0 1
26800: PPUSH
26801: LD_VAR 0 2
26805: PPUSH
26806: LD_VAR 0 3
26810: PPUSH
26811: CALL_OW 297
26815: PUSH
26816: LD_VAR 0 5
26820: LESS
26821: IFFALSE 26765
// end ; ComTurnXY ( unit , x , y ) ;
26823: LD_VAR 0 1
26827: PPUSH
26828: LD_VAR 0 2
26832: PPUSH
26833: LD_VAR 0 3
26837: PPUSH
26838: CALL_OW 118
// wait ( 5 ) ;
26842: LD_INT 5
26844: PPUSH
26845: CALL_OW 67
// _d := GetDir ( unit ) ;
26849: LD_ADDR_VAR 0 10
26853: PUSH
26854: LD_VAR 0 1
26858: PPUSH
26859: CALL_OW 254
26863: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
26864: LD_ADDR_VAR 0 8
26868: PUSH
26869: LD_VAR 0 1
26873: PPUSH
26874: CALL_OW 250
26878: PPUSH
26879: LD_VAR 0 10
26883: PPUSH
26884: LD_VAR 0 5
26888: PPUSH
26889: CALL_OW 272
26893: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
26894: LD_ADDR_VAR 0 9
26898: PUSH
26899: LD_VAR 0 1
26903: PPUSH
26904: CALL_OW 251
26908: PPUSH
26909: LD_VAR 0 10
26913: PPUSH
26914: LD_VAR 0 5
26918: PPUSH
26919: CALL_OW 273
26923: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
26924: LD_VAR 0 8
26928: PPUSH
26929: LD_VAR 0 9
26933: PPUSH
26934: CALL_OW 488
26938: NOT
26939: IFFALSE 26943
// exit ;
26941: GO 27050
// ComAnimCustom ( unit , 1 ) ;
26943: LD_VAR 0 1
26947: PPUSH
26948: LD_INT 1
26950: PPUSH
26951: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
26955: LD_VAR 0 8
26959: PPUSH
26960: LD_VAR 0 9
26964: PPUSH
26965: LD_VAR 0 6
26969: PPUSH
26970: LD_VAR 0 7
26974: PPUSH
26975: CALL_OW 330
// repeat wait ( 1 ) ;
26979: LD_INT 1
26981: PPUSH
26982: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
26986: LD_VAR 0 1
26990: PPUSH
26991: CALL_OW 316
26995: PUSH
26996: LD_VAR 0 1
27000: PPUSH
27001: CALL_OW 314
27005: OR
27006: PUSH
27007: LD_VAR 0 1
27011: PPUSH
27012: CALL_OW 302
27016: NOT
27017: OR
27018: PUSH
27019: LD_VAR 0 1
27023: PPUSH
27024: CALL_OW 301
27028: OR
27029: IFFALSE 26979
// RemoveSeeing ( _x , _y , side ) ;
27031: LD_VAR 0 8
27035: PPUSH
27036: LD_VAR 0 9
27040: PPUSH
27041: LD_VAR 0 6
27045: PPUSH
27046: CALL_OW 331
// end ; end_of_file
27050: LD_VAR 0 4
27054: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
27055: LD_INT 0
27057: PPUSH
27058: PPUSH
// if exist_mode then
27059: LD_VAR 0 2
27063: IFFALSE 27088
// unit := CreateCharacter ( prefix & ident ) else
27065: LD_ADDR_VAR 0 5
27069: PUSH
27070: LD_VAR 0 3
27074: PUSH
27075: LD_VAR 0 1
27079: STR
27080: PPUSH
27081: CALL_OW 34
27085: ST_TO_ADDR
27086: GO 27103
// unit := NewCharacter ( ident ) ;
27088: LD_ADDR_VAR 0 5
27092: PUSH
27093: LD_VAR 0 1
27097: PPUSH
27098: CALL_OW 25
27102: ST_TO_ADDR
// result := unit ;
27103: LD_ADDR_VAR 0 4
27107: PUSH
27108: LD_VAR 0 5
27112: ST_TO_ADDR
// end ;
27113: LD_VAR 0 4
27117: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
27118: LD_INT 0
27120: PPUSH
27121: PPUSH
// if not side or not nation then
27122: LD_VAR 0 1
27126: NOT
27127: PUSH
27128: LD_VAR 0 2
27132: NOT
27133: OR
27134: IFFALSE 27138
// exit ;
27136: GO 27906
// case nation of nation_american :
27138: LD_VAR 0 2
27142: PUSH
27143: LD_INT 1
27145: DOUBLE
27146: EQUAL
27147: IFTRUE 27151
27149: GO 27365
27151: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
27152: LD_ADDR_VAR 0 4
27156: PUSH
27157: LD_INT 35
27159: PUSH
27160: LD_INT 45
27162: PUSH
27163: LD_INT 46
27165: PUSH
27166: LD_INT 47
27168: PUSH
27169: LD_INT 82
27171: PUSH
27172: LD_INT 83
27174: PUSH
27175: LD_INT 84
27177: PUSH
27178: LD_INT 85
27180: PUSH
27181: LD_INT 86
27183: PUSH
27184: LD_INT 1
27186: PUSH
27187: LD_INT 2
27189: PUSH
27190: LD_INT 6
27192: PUSH
27193: LD_INT 15
27195: PUSH
27196: LD_INT 16
27198: PUSH
27199: LD_INT 7
27201: PUSH
27202: LD_INT 12
27204: PUSH
27205: LD_INT 13
27207: PUSH
27208: LD_INT 10
27210: PUSH
27211: LD_INT 14
27213: PUSH
27214: LD_INT 20
27216: PUSH
27217: LD_INT 21
27219: PUSH
27220: LD_INT 22
27222: PUSH
27223: LD_INT 25
27225: PUSH
27226: LD_INT 32
27228: PUSH
27229: LD_INT 27
27231: PUSH
27232: LD_INT 36
27234: PUSH
27235: LD_INT 69
27237: PUSH
27238: LD_INT 39
27240: PUSH
27241: LD_INT 34
27243: PUSH
27244: LD_INT 40
27246: PUSH
27247: LD_INT 48
27249: PUSH
27250: LD_INT 49
27252: PUSH
27253: LD_INT 50
27255: PUSH
27256: LD_INT 51
27258: PUSH
27259: LD_INT 52
27261: PUSH
27262: LD_INT 53
27264: PUSH
27265: LD_INT 54
27267: PUSH
27268: LD_INT 55
27270: PUSH
27271: LD_INT 56
27273: PUSH
27274: LD_INT 57
27276: PUSH
27277: LD_INT 58
27279: PUSH
27280: LD_INT 59
27282: PUSH
27283: LD_INT 60
27285: PUSH
27286: LD_INT 61
27288: PUSH
27289: LD_INT 62
27291: PUSH
27292: LD_INT 80
27294: PUSH
27295: LD_INT 82
27297: PUSH
27298: LD_INT 83
27300: PUSH
27301: LD_INT 84
27303: PUSH
27304: LD_INT 85
27306: PUSH
27307: LD_INT 86
27309: PUSH
27310: EMPTY
27311: LIST
27312: LIST
27313: LIST
27314: LIST
27315: LIST
27316: LIST
27317: LIST
27318: LIST
27319: LIST
27320: LIST
27321: LIST
27322: LIST
27323: LIST
27324: LIST
27325: LIST
27326: LIST
27327: LIST
27328: LIST
27329: LIST
27330: LIST
27331: LIST
27332: LIST
27333: LIST
27334: LIST
27335: LIST
27336: LIST
27337: LIST
27338: LIST
27339: LIST
27340: LIST
27341: LIST
27342: LIST
27343: LIST
27344: LIST
27345: LIST
27346: LIST
27347: LIST
27348: LIST
27349: LIST
27350: LIST
27351: LIST
27352: LIST
27353: LIST
27354: LIST
27355: LIST
27356: LIST
27357: LIST
27358: LIST
27359: LIST
27360: LIST
27361: LIST
27362: ST_TO_ADDR
27363: GO 27830
27365: LD_INT 2
27367: DOUBLE
27368: EQUAL
27369: IFTRUE 27373
27371: GO 27599
27373: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
27374: LD_ADDR_VAR 0 4
27378: PUSH
27379: LD_INT 35
27381: PUSH
27382: LD_INT 45
27384: PUSH
27385: LD_INT 46
27387: PUSH
27388: LD_INT 47
27390: PUSH
27391: LD_INT 82
27393: PUSH
27394: LD_INT 83
27396: PUSH
27397: LD_INT 84
27399: PUSH
27400: LD_INT 85
27402: PUSH
27403: LD_INT 87
27405: PUSH
27406: LD_INT 70
27408: PUSH
27409: LD_INT 1
27411: PUSH
27412: LD_INT 11
27414: PUSH
27415: LD_INT 3
27417: PUSH
27418: LD_INT 4
27420: PUSH
27421: LD_INT 5
27423: PUSH
27424: LD_INT 6
27426: PUSH
27427: LD_INT 15
27429: PUSH
27430: LD_INT 18
27432: PUSH
27433: LD_INT 7
27435: PUSH
27436: LD_INT 17
27438: PUSH
27439: LD_INT 8
27441: PUSH
27442: LD_INT 20
27444: PUSH
27445: LD_INT 21
27447: PUSH
27448: LD_INT 22
27450: PUSH
27451: LD_INT 72
27453: PUSH
27454: LD_INT 26
27456: PUSH
27457: LD_INT 69
27459: PUSH
27460: LD_INT 39
27462: PUSH
27463: LD_INT 40
27465: PUSH
27466: LD_INT 41
27468: PUSH
27469: LD_INT 42
27471: PUSH
27472: LD_INT 43
27474: PUSH
27475: LD_INT 48
27477: PUSH
27478: LD_INT 49
27480: PUSH
27481: LD_INT 50
27483: PUSH
27484: LD_INT 51
27486: PUSH
27487: LD_INT 52
27489: PUSH
27490: LD_INT 53
27492: PUSH
27493: LD_INT 54
27495: PUSH
27496: LD_INT 55
27498: PUSH
27499: LD_INT 56
27501: PUSH
27502: LD_INT 60
27504: PUSH
27505: LD_INT 61
27507: PUSH
27508: LD_INT 62
27510: PUSH
27511: LD_INT 66
27513: PUSH
27514: LD_INT 67
27516: PUSH
27517: LD_INT 68
27519: PUSH
27520: LD_INT 81
27522: PUSH
27523: LD_INT 82
27525: PUSH
27526: LD_INT 83
27528: PUSH
27529: LD_INT 84
27531: PUSH
27532: LD_INT 85
27534: PUSH
27535: LD_INT 87
27537: PUSH
27538: LD_INT 88
27540: PUSH
27541: EMPTY
27542: LIST
27543: LIST
27544: LIST
27545: LIST
27546: LIST
27547: LIST
27548: LIST
27549: LIST
27550: LIST
27551: LIST
27552: LIST
27553: LIST
27554: LIST
27555: LIST
27556: LIST
27557: LIST
27558: LIST
27559: LIST
27560: LIST
27561: LIST
27562: LIST
27563: LIST
27564: LIST
27565: LIST
27566: LIST
27567: LIST
27568: LIST
27569: LIST
27570: LIST
27571: LIST
27572: LIST
27573: LIST
27574: LIST
27575: LIST
27576: LIST
27577: LIST
27578: LIST
27579: LIST
27580: LIST
27581: LIST
27582: LIST
27583: LIST
27584: LIST
27585: LIST
27586: LIST
27587: LIST
27588: LIST
27589: LIST
27590: LIST
27591: LIST
27592: LIST
27593: LIST
27594: LIST
27595: LIST
27596: ST_TO_ADDR
27597: GO 27830
27599: LD_INT 3
27601: DOUBLE
27602: EQUAL
27603: IFTRUE 27607
27605: GO 27829
27607: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
27608: LD_ADDR_VAR 0 4
27612: PUSH
27613: LD_INT 46
27615: PUSH
27616: LD_INT 47
27618: PUSH
27619: LD_INT 1
27621: PUSH
27622: LD_INT 2
27624: PUSH
27625: LD_INT 82
27627: PUSH
27628: LD_INT 83
27630: PUSH
27631: LD_INT 84
27633: PUSH
27634: LD_INT 85
27636: PUSH
27637: LD_INT 86
27639: PUSH
27640: LD_INT 11
27642: PUSH
27643: LD_INT 9
27645: PUSH
27646: LD_INT 20
27648: PUSH
27649: LD_INT 19
27651: PUSH
27652: LD_INT 21
27654: PUSH
27655: LD_INT 24
27657: PUSH
27658: LD_INT 22
27660: PUSH
27661: LD_INT 25
27663: PUSH
27664: LD_INT 28
27666: PUSH
27667: LD_INT 29
27669: PUSH
27670: LD_INT 30
27672: PUSH
27673: LD_INT 31
27675: PUSH
27676: LD_INT 37
27678: PUSH
27679: LD_INT 38
27681: PUSH
27682: LD_INT 32
27684: PUSH
27685: LD_INT 27
27687: PUSH
27688: LD_INT 33
27690: PUSH
27691: LD_INT 69
27693: PUSH
27694: LD_INT 39
27696: PUSH
27697: LD_INT 34
27699: PUSH
27700: LD_INT 40
27702: PUSH
27703: LD_INT 71
27705: PUSH
27706: LD_INT 23
27708: PUSH
27709: LD_INT 44
27711: PUSH
27712: LD_INT 48
27714: PUSH
27715: LD_INT 49
27717: PUSH
27718: LD_INT 50
27720: PUSH
27721: LD_INT 51
27723: PUSH
27724: LD_INT 52
27726: PUSH
27727: LD_INT 53
27729: PUSH
27730: LD_INT 54
27732: PUSH
27733: LD_INT 55
27735: PUSH
27736: LD_INT 56
27738: PUSH
27739: LD_INT 57
27741: PUSH
27742: LD_INT 58
27744: PUSH
27745: LD_INT 59
27747: PUSH
27748: LD_INT 63
27750: PUSH
27751: LD_INT 64
27753: PUSH
27754: LD_INT 65
27756: PUSH
27757: LD_INT 82
27759: PUSH
27760: LD_INT 83
27762: PUSH
27763: LD_INT 84
27765: PUSH
27766: LD_INT 85
27768: PUSH
27769: LD_INT 86
27771: PUSH
27772: EMPTY
27773: LIST
27774: LIST
27775: LIST
27776: LIST
27777: LIST
27778: LIST
27779: LIST
27780: LIST
27781: LIST
27782: LIST
27783: LIST
27784: LIST
27785: LIST
27786: LIST
27787: LIST
27788: LIST
27789: LIST
27790: LIST
27791: LIST
27792: LIST
27793: LIST
27794: LIST
27795: LIST
27796: LIST
27797: LIST
27798: LIST
27799: LIST
27800: LIST
27801: LIST
27802: LIST
27803: LIST
27804: LIST
27805: LIST
27806: LIST
27807: LIST
27808: LIST
27809: LIST
27810: LIST
27811: LIST
27812: LIST
27813: LIST
27814: LIST
27815: LIST
27816: LIST
27817: LIST
27818: LIST
27819: LIST
27820: LIST
27821: LIST
27822: LIST
27823: LIST
27824: LIST
27825: LIST
27826: ST_TO_ADDR
27827: GO 27830
27829: POP
// if state > - 1 and state < 3 then
27830: LD_VAR 0 3
27834: PUSH
27835: LD_INT 1
27837: NEG
27838: GREATER
27839: PUSH
27840: LD_VAR 0 3
27844: PUSH
27845: LD_INT 3
27847: LESS
27848: AND
27849: IFFALSE 27906
// for i in result do
27851: LD_ADDR_VAR 0 5
27855: PUSH
27856: LD_VAR 0 4
27860: PUSH
27861: FOR_IN
27862: IFFALSE 27904
// if GetTech ( i , side ) <> state then
27864: LD_VAR 0 5
27868: PPUSH
27869: LD_VAR 0 1
27873: PPUSH
27874: CALL_OW 321
27878: PUSH
27879: LD_VAR 0 3
27883: NONEQUAL
27884: IFFALSE 27902
// result := result diff i ;
27886: LD_ADDR_VAR 0 4
27890: PUSH
27891: LD_VAR 0 4
27895: PUSH
27896: LD_VAR 0 5
27900: DIFF
27901: ST_TO_ADDR
27902: GO 27861
27904: POP
27905: POP
// end ;
27906: LD_VAR 0 4
27910: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
27911: LD_INT 0
27913: PPUSH
27914: PPUSH
27915: PPUSH
// result := true ;
27916: LD_ADDR_VAR 0 3
27920: PUSH
27921: LD_INT 1
27923: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
27924: LD_ADDR_VAR 0 5
27928: PUSH
27929: LD_VAR 0 2
27933: PPUSH
27934: CALL_OW 480
27938: ST_TO_ADDR
// if not tmp then
27939: LD_VAR 0 5
27943: NOT
27944: IFFALSE 27948
// exit ;
27946: GO 27997
// for i in tmp do
27948: LD_ADDR_VAR 0 4
27952: PUSH
27953: LD_VAR 0 5
27957: PUSH
27958: FOR_IN
27959: IFFALSE 27995
// if GetTech ( i , side ) <> state_researched then
27961: LD_VAR 0 4
27965: PPUSH
27966: LD_VAR 0 1
27970: PPUSH
27971: CALL_OW 321
27975: PUSH
27976: LD_INT 2
27978: NONEQUAL
27979: IFFALSE 27993
// begin result := false ;
27981: LD_ADDR_VAR 0 3
27985: PUSH
27986: LD_INT 0
27988: ST_TO_ADDR
// exit ;
27989: POP
27990: POP
27991: GO 27997
// end ;
27993: GO 27958
27995: POP
27996: POP
// end ;
27997: LD_VAR 0 3
28001: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
28002: LD_INT 0
28004: PPUSH
28005: PPUSH
28006: PPUSH
28007: PPUSH
28008: PPUSH
28009: PPUSH
28010: PPUSH
28011: PPUSH
28012: PPUSH
28013: PPUSH
28014: PPUSH
28015: PPUSH
28016: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
28017: LD_VAR 0 1
28021: NOT
28022: PUSH
28023: LD_VAR 0 1
28027: PPUSH
28028: CALL_OW 257
28032: PUSH
28033: LD_INT 9
28035: NONEQUAL
28036: OR
28037: IFFALSE 28041
// exit ;
28039: GO 28614
// side := GetSide ( unit ) ;
28041: LD_ADDR_VAR 0 9
28045: PUSH
28046: LD_VAR 0 1
28050: PPUSH
28051: CALL_OW 255
28055: ST_TO_ADDR
// tech_space := tech_spacanom ;
28056: LD_ADDR_VAR 0 12
28060: PUSH
28061: LD_INT 29
28063: ST_TO_ADDR
// tech_time := tech_taurad ;
28064: LD_ADDR_VAR 0 13
28068: PUSH
28069: LD_INT 28
28071: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
28072: LD_ADDR_VAR 0 11
28076: PUSH
28077: LD_VAR 0 1
28081: PPUSH
28082: CALL_OW 310
28086: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
28087: LD_VAR 0 11
28091: PPUSH
28092: CALL_OW 247
28096: PUSH
28097: LD_INT 2
28099: EQUAL
28100: IFFALSE 28104
// exit ;
28102: GO 28614
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
28104: LD_ADDR_VAR 0 8
28108: PUSH
28109: LD_INT 81
28111: PUSH
28112: LD_VAR 0 9
28116: PUSH
28117: EMPTY
28118: LIST
28119: LIST
28120: PUSH
28121: LD_INT 3
28123: PUSH
28124: LD_INT 21
28126: PUSH
28127: LD_INT 3
28129: PUSH
28130: EMPTY
28131: LIST
28132: LIST
28133: PUSH
28134: EMPTY
28135: LIST
28136: LIST
28137: PUSH
28138: EMPTY
28139: LIST
28140: LIST
28141: PPUSH
28142: CALL_OW 69
28146: ST_TO_ADDR
// if not tmp then
28147: LD_VAR 0 8
28151: NOT
28152: IFFALSE 28156
// exit ;
28154: GO 28614
// if in_unit then
28156: LD_VAR 0 11
28160: IFFALSE 28184
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
28162: LD_ADDR_VAR 0 10
28166: PUSH
28167: LD_VAR 0 8
28171: PPUSH
28172: LD_VAR 0 11
28176: PPUSH
28177: CALL_OW 74
28181: ST_TO_ADDR
28182: GO 28204
// enemy := NearestUnitToUnit ( tmp , unit ) ;
28184: LD_ADDR_VAR 0 10
28188: PUSH
28189: LD_VAR 0 8
28193: PPUSH
28194: LD_VAR 0 1
28198: PPUSH
28199: CALL_OW 74
28203: ST_TO_ADDR
// if not enemy then
28204: LD_VAR 0 10
28208: NOT
28209: IFFALSE 28213
// exit ;
28211: GO 28614
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
28213: LD_VAR 0 11
28217: PUSH
28218: LD_VAR 0 11
28222: PPUSH
28223: LD_VAR 0 10
28227: PPUSH
28228: CALL_OW 296
28232: PUSH
28233: LD_INT 13
28235: GREATER
28236: AND
28237: PUSH
28238: LD_VAR 0 1
28242: PPUSH
28243: LD_VAR 0 10
28247: PPUSH
28248: CALL_OW 296
28252: PUSH
28253: LD_INT 12
28255: GREATER
28256: OR
28257: IFFALSE 28261
// exit ;
28259: GO 28614
// missile := [ 1 ] ;
28261: LD_ADDR_VAR 0 14
28265: PUSH
28266: LD_INT 1
28268: PUSH
28269: EMPTY
28270: LIST
28271: ST_TO_ADDR
// if Researched ( side , tech_space ) then
28272: LD_VAR 0 9
28276: PPUSH
28277: LD_VAR 0 12
28281: PPUSH
28282: CALL_OW 325
28286: IFFALSE 28315
// missile := Replace ( missile , missile + 1 , 2 ) ;
28288: LD_ADDR_VAR 0 14
28292: PUSH
28293: LD_VAR 0 14
28297: PPUSH
28298: LD_VAR 0 14
28302: PUSH
28303: LD_INT 1
28305: PLUS
28306: PPUSH
28307: LD_INT 2
28309: PPUSH
28310: CALL_OW 1
28314: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
28315: LD_VAR 0 9
28319: PPUSH
28320: LD_VAR 0 13
28324: PPUSH
28325: CALL_OW 325
28329: PUSH
28330: LD_VAR 0 10
28334: PPUSH
28335: CALL_OW 255
28339: PPUSH
28340: LD_VAR 0 13
28344: PPUSH
28345: CALL_OW 325
28349: NOT
28350: AND
28351: IFFALSE 28380
// missile := Replace ( missile , missile + 1 , 3 ) ;
28353: LD_ADDR_VAR 0 14
28357: PUSH
28358: LD_VAR 0 14
28362: PPUSH
28363: LD_VAR 0 14
28367: PUSH
28368: LD_INT 1
28370: PLUS
28371: PPUSH
28372: LD_INT 3
28374: PPUSH
28375: CALL_OW 1
28379: ST_TO_ADDR
// if missile < 2 then
28380: LD_VAR 0 14
28384: PUSH
28385: LD_INT 2
28387: LESS
28388: IFFALSE 28392
// exit ;
28390: GO 28614
// x := GetX ( enemy ) ;
28392: LD_ADDR_VAR 0 4
28396: PUSH
28397: LD_VAR 0 10
28401: PPUSH
28402: CALL_OW 250
28406: ST_TO_ADDR
// y := GetY ( enemy ) ;
28407: LD_ADDR_VAR 0 5
28411: PUSH
28412: LD_VAR 0 10
28416: PPUSH
28417: CALL_OW 251
28421: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
28422: LD_ADDR_VAR 0 6
28426: PUSH
28427: LD_VAR 0 4
28431: PUSH
28432: LD_INT 1
28434: NEG
28435: PPUSH
28436: LD_INT 1
28438: PPUSH
28439: CALL_OW 12
28443: PLUS
28444: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
28445: LD_ADDR_VAR 0 7
28449: PUSH
28450: LD_VAR 0 5
28454: PUSH
28455: LD_INT 1
28457: NEG
28458: PPUSH
28459: LD_INT 1
28461: PPUSH
28462: CALL_OW 12
28466: PLUS
28467: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
28468: LD_VAR 0 6
28472: PPUSH
28473: LD_VAR 0 7
28477: PPUSH
28478: CALL_OW 488
28482: NOT
28483: IFFALSE 28505
// begin _x := x ;
28485: LD_ADDR_VAR 0 6
28489: PUSH
28490: LD_VAR 0 4
28494: ST_TO_ADDR
// _y := y ;
28495: LD_ADDR_VAR 0 7
28499: PUSH
28500: LD_VAR 0 5
28504: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
28505: LD_ADDR_VAR 0 3
28509: PUSH
28510: LD_INT 1
28512: PPUSH
28513: LD_VAR 0 14
28517: PPUSH
28518: CALL_OW 12
28522: ST_TO_ADDR
// case i of 1 :
28523: LD_VAR 0 3
28527: PUSH
28528: LD_INT 1
28530: DOUBLE
28531: EQUAL
28532: IFTRUE 28536
28534: GO 28553
28536: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
28537: LD_VAR 0 1
28541: PPUSH
28542: LD_VAR 0 10
28546: PPUSH
28547: CALL_OW 115
28551: GO 28614
28553: LD_INT 2
28555: DOUBLE
28556: EQUAL
28557: IFTRUE 28561
28559: GO 28583
28561: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
28562: LD_VAR 0 1
28566: PPUSH
28567: LD_VAR 0 6
28571: PPUSH
28572: LD_VAR 0 7
28576: PPUSH
28577: CALL_OW 153
28581: GO 28614
28583: LD_INT 3
28585: DOUBLE
28586: EQUAL
28587: IFTRUE 28591
28589: GO 28613
28591: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
28592: LD_VAR 0 1
28596: PPUSH
28597: LD_VAR 0 6
28601: PPUSH
28602: LD_VAR 0 7
28606: PPUSH
28607: CALL_OW 154
28611: GO 28614
28613: POP
// end ;
28614: LD_VAR 0 2
28618: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
28619: LD_INT 0
28621: PPUSH
28622: PPUSH
28623: PPUSH
28624: PPUSH
28625: PPUSH
28626: PPUSH
// if not unit or not building then
28627: LD_VAR 0 1
28631: NOT
28632: PUSH
28633: LD_VAR 0 2
28637: NOT
28638: OR
28639: IFFALSE 28643
// exit ;
28641: GO 28801
// x := GetX ( building ) ;
28643: LD_ADDR_VAR 0 5
28647: PUSH
28648: LD_VAR 0 2
28652: PPUSH
28653: CALL_OW 250
28657: ST_TO_ADDR
// y := GetY ( building ) ;
28658: LD_ADDR_VAR 0 6
28662: PUSH
28663: LD_VAR 0 2
28667: PPUSH
28668: CALL_OW 251
28672: ST_TO_ADDR
// for i = 0 to 5 do
28673: LD_ADDR_VAR 0 4
28677: PUSH
28678: DOUBLE
28679: LD_INT 0
28681: DEC
28682: ST_TO_ADDR
28683: LD_INT 5
28685: PUSH
28686: FOR_TO
28687: IFFALSE 28799
// begin _x := ShiftX ( x , i , 3 ) ;
28689: LD_ADDR_VAR 0 7
28693: PUSH
28694: LD_VAR 0 5
28698: PPUSH
28699: LD_VAR 0 4
28703: PPUSH
28704: LD_INT 3
28706: PPUSH
28707: CALL_OW 272
28711: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
28712: LD_ADDR_VAR 0 8
28716: PUSH
28717: LD_VAR 0 6
28721: PPUSH
28722: LD_VAR 0 4
28726: PPUSH
28727: LD_INT 3
28729: PPUSH
28730: CALL_OW 273
28734: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
28735: LD_VAR 0 7
28739: PPUSH
28740: LD_VAR 0 8
28744: PPUSH
28745: CALL_OW 488
28749: NOT
28750: IFFALSE 28754
// continue ;
28752: GO 28686
// if HexInfo ( _x , _y ) = 0 then
28754: LD_VAR 0 7
28758: PPUSH
28759: LD_VAR 0 8
28763: PPUSH
28764: CALL_OW 428
28768: PUSH
28769: LD_INT 0
28771: EQUAL
28772: IFFALSE 28797
// begin ComMoveXY ( unit , _x , _y ) ;
28774: LD_VAR 0 1
28778: PPUSH
28779: LD_VAR 0 7
28783: PPUSH
28784: LD_VAR 0 8
28788: PPUSH
28789: CALL_OW 111
// exit ;
28793: POP
28794: POP
28795: GO 28801
// end ; end ;
28797: GO 28686
28799: POP
28800: POP
// end ;
28801: LD_VAR 0 3
28805: RET
// export function ScanBase ( side , base_area ) ; begin
28806: LD_INT 0
28808: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
28809: LD_ADDR_VAR 0 3
28813: PUSH
28814: LD_VAR 0 2
28818: PPUSH
28819: LD_INT 81
28821: PUSH
28822: LD_VAR 0 1
28826: PUSH
28827: EMPTY
28828: LIST
28829: LIST
28830: PPUSH
28831: CALL_OW 70
28835: ST_TO_ADDR
// end ;
28836: LD_VAR 0 3
28840: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
28841: LD_INT 0
28843: PPUSH
28844: PPUSH
28845: PPUSH
28846: PPUSH
// result := false ;
28847: LD_ADDR_VAR 0 2
28851: PUSH
28852: LD_INT 0
28854: ST_TO_ADDR
// side := GetSide ( unit ) ;
28855: LD_ADDR_VAR 0 3
28859: PUSH
28860: LD_VAR 0 1
28864: PPUSH
28865: CALL_OW 255
28869: ST_TO_ADDR
// nat := GetNation ( unit ) ;
28870: LD_ADDR_VAR 0 4
28874: PUSH
28875: LD_VAR 0 1
28879: PPUSH
28880: CALL_OW 248
28884: ST_TO_ADDR
// case nat of 1 :
28885: LD_VAR 0 4
28889: PUSH
28890: LD_INT 1
28892: DOUBLE
28893: EQUAL
28894: IFTRUE 28898
28896: GO 28909
28898: POP
// tech := tech_lassight ; 2 :
28899: LD_ADDR_VAR 0 5
28903: PUSH
28904: LD_INT 12
28906: ST_TO_ADDR
28907: GO 28948
28909: LD_INT 2
28911: DOUBLE
28912: EQUAL
28913: IFTRUE 28917
28915: GO 28928
28917: POP
// tech := tech_mortar ; 3 :
28918: LD_ADDR_VAR 0 5
28922: PUSH
28923: LD_INT 41
28925: ST_TO_ADDR
28926: GO 28948
28928: LD_INT 3
28930: DOUBLE
28931: EQUAL
28932: IFTRUE 28936
28934: GO 28947
28936: POP
// tech := tech_bazooka ; end ;
28937: LD_ADDR_VAR 0 5
28941: PUSH
28942: LD_INT 44
28944: ST_TO_ADDR
28945: GO 28948
28947: POP
// if Researched ( side , tech ) then
28948: LD_VAR 0 3
28952: PPUSH
28953: LD_VAR 0 5
28957: PPUSH
28958: CALL_OW 325
28962: IFFALSE 28989
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
28964: LD_ADDR_VAR 0 2
28968: PUSH
28969: LD_INT 5
28971: PUSH
28972: LD_INT 8
28974: PUSH
28975: LD_INT 9
28977: PUSH
28978: EMPTY
28979: LIST
28980: LIST
28981: LIST
28982: PUSH
28983: LD_VAR 0 4
28987: ARRAY
28988: ST_TO_ADDR
// end ;
28989: LD_VAR 0 2
28993: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
28994: LD_INT 0
28996: PPUSH
28997: PPUSH
28998: PPUSH
// if not mines then
28999: LD_VAR 0 2
29003: NOT
29004: IFFALSE 29008
// exit ;
29006: GO 29152
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
29008: LD_ADDR_VAR 0 5
29012: PUSH
29013: LD_INT 81
29015: PUSH
29016: LD_VAR 0 1
29020: PUSH
29021: EMPTY
29022: LIST
29023: LIST
29024: PUSH
29025: LD_INT 3
29027: PUSH
29028: LD_INT 21
29030: PUSH
29031: LD_INT 3
29033: PUSH
29034: EMPTY
29035: LIST
29036: LIST
29037: PUSH
29038: EMPTY
29039: LIST
29040: LIST
29041: PUSH
29042: EMPTY
29043: LIST
29044: LIST
29045: PPUSH
29046: CALL_OW 69
29050: ST_TO_ADDR
// for i in mines do
29051: LD_ADDR_VAR 0 4
29055: PUSH
29056: LD_VAR 0 2
29060: PUSH
29061: FOR_IN
29062: IFFALSE 29150
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
29064: LD_VAR 0 4
29068: PUSH
29069: LD_INT 1
29071: ARRAY
29072: PPUSH
29073: LD_VAR 0 4
29077: PUSH
29078: LD_INT 2
29080: ARRAY
29081: PPUSH
29082: CALL_OW 458
29086: NOT
29087: IFFALSE 29091
// continue ;
29089: GO 29061
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
29091: LD_VAR 0 4
29095: PUSH
29096: LD_INT 1
29098: ARRAY
29099: PPUSH
29100: LD_VAR 0 4
29104: PUSH
29105: LD_INT 2
29107: ARRAY
29108: PPUSH
29109: CALL_OW 428
29113: PUSH
29114: LD_VAR 0 5
29118: IN
29119: IFFALSE 29148
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
29121: LD_VAR 0 4
29125: PUSH
29126: LD_INT 1
29128: ARRAY
29129: PPUSH
29130: LD_VAR 0 4
29134: PUSH
29135: LD_INT 2
29137: ARRAY
29138: PPUSH
29139: LD_VAR 0 1
29143: PPUSH
29144: CALL_OW 456
// end ;
29148: GO 29061
29150: POP
29151: POP
// end ;
29152: LD_VAR 0 3
29156: RET
// export function Count ( array ) ; var i ; begin
29157: LD_INT 0
29159: PPUSH
29160: PPUSH
// result := 0 ;
29161: LD_ADDR_VAR 0 2
29165: PUSH
29166: LD_INT 0
29168: ST_TO_ADDR
// for i in array do
29169: LD_ADDR_VAR 0 3
29173: PUSH
29174: LD_VAR 0 1
29178: PUSH
29179: FOR_IN
29180: IFFALSE 29204
// if i then
29182: LD_VAR 0 3
29186: IFFALSE 29202
// result := result + 1 ;
29188: LD_ADDR_VAR 0 2
29192: PUSH
29193: LD_VAR 0 2
29197: PUSH
29198: LD_INT 1
29200: PLUS
29201: ST_TO_ADDR
29202: GO 29179
29204: POP
29205: POP
// end ;
29206: LD_VAR 0 2
29210: RET
// export function IsEmpty ( building ) ; begin
29211: LD_INT 0
29213: PPUSH
// if not building then
29214: LD_VAR 0 1
29218: NOT
29219: IFFALSE 29223
// exit ;
29221: GO 29266
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
29223: LD_ADDR_VAR 0 2
29227: PUSH
29228: LD_VAR 0 1
29232: PUSH
29233: LD_INT 22
29235: PUSH
29236: LD_VAR 0 1
29240: PPUSH
29241: CALL_OW 255
29245: PUSH
29246: EMPTY
29247: LIST
29248: LIST
29249: PUSH
29250: LD_INT 58
29252: PUSH
29253: EMPTY
29254: LIST
29255: PUSH
29256: EMPTY
29257: LIST
29258: LIST
29259: PPUSH
29260: CALL_OW 69
29264: IN
29265: ST_TO_ADDR
// end ;
29266: LD_VAR 0 2
29270: RET
// export function IsNotFull ( building ) ; begin
29271: LD_INT 0
29273: PPUSH
// if not building then
29274: LD_VAR 0 1
29278: NOT
29279: IFFALSE 29283
// exit ;
29281: GO 29302
// result := UnitsInside ( building ) < 6 ;
29283: LD_ADDR_VAR 0 2
29287: PUSH
29288: LD_VAR 0 1
29292: PPUSH
29293: CALL_OW 313
29297: PUSH
29298: LD_INT 6
29300: LESS
29301: ST_TO_ADDR
// end ;
29302: LD_VAR 0 2
29306: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
29307: LD_INT 0
29309: PPUSH
29310: PPUSH
29311: PPUSH
29312: PPUSH
// tmp := [ ] ;
29313: LD_ADDR_VAR 0 3
29317: PUSH
29318: EMPTY
29319: ST_TO_ADDR
// list := [ ] ;
29320: LD_ADDR_VAR 0 5
29324: PUSH
29325: EMPTY
29326: ST_TO_ADDR
// for i = 16 to 25 do
29327: LD_ADDR_VAR 0 4
29331: PUSH
29332: DOUBLE
29333: LD_INT 16
29335: DEC
29336: ST_TO_ADDR
29337: LD_INT 25
29339: PUSH
29340: FOR_TO
29341: IFFALSE 29414
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
29343: LD_ADDR_VAR 0 3
29347: PUSH
29348: LD_VAR 0 3
29352: PUSH
29353: LD_INT 22
29355: PUSH
29356: LD_VAR 0 1
29360: PPUSH
29361: CALL_OW 255
29365: PUSH
29366: EMPTY
29367: LIST
29368: LIST
29369: PUSH
29370: LD_INT 91
29372: PUSH
29373: LD_VAR 0 1
29377: PUSH
29378: LD_INT 6
29380: PUSH
29381: EMPTY
29382: LIST
29383: LIST
29384: LIST
29385: PUSH
29386: LD_INT 30
29388: PUSH
29389: LD_VAR 0 4
29393: PUSH
29394: EMPTY
29395: LIST
29396: LIST
29397: PUSH
29398: EMPTY
29399: LIST
29400: LIST
29401: LIST
29402: PUSH
29403: EMPTY
29404: LIST
29405: PPUSH
29406: CALL_OW 69
29410: ADD
29411: ST_TO_ADDR
29412: GO 29340
29414: POP
29415: POP
// for i = 1 to tmp do
29416: LD_ADDR_VAR 0 4
29420: PUSH
29421: DOUBLE
29422: LD_INT 1
29424: DEC
29425: ST_TO_ADDR
29426: LD_VAR 0 3
29430: PUSH
29431: FOR_TO
29432: IFFALSE 29520
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
29434: LD_ADDR_VAR 0 5
29438: PUSH
29439: LD_VAR 0 5
29443: PUSH
29444: LD_VAR 0 3
29448: PUSH
29449: LD_VAR 0 4
29453: ARRAY
29454: PPUSH
29455: CALL_OW 266
29459: PUSH
29460: LD_VAR 0 3
29464: PUSH
29465: LD_VAR 0 4
29469: ARRAY
29470: PPUSH
29471: CALL_OW 250
29475: PUSH
29476: LD_VAR 0 3
29480: PUSH
29481: LD_VAR 0 4
29485: ARRAY
29486: PPUSH
29487: CALL_OW 251
29491: PUSH
29492: LD_VAR 0 3
29496: PUSH
29497: LD_VAR 0 4
29501: ARRAY
29502: PPUSH
29503: CALL_OW 254
29507: PUSH
29508: EMPTY
29509: LIST
29510: LIST
29511: LIST
29512: LIST
29513: PUSH
29514: EMPTY
29515: LIST
29516: ADD
29517: ST_TO_ADDR
29518: GO 29431
29520: POP
29521: POP
// result := list ;
29522: LD_ADDR_VAR 0 2
29526: PUSH
29527: LD_VAR 0 5
29531: ST_TO_ADDR
// end ;
29532: LD_VAR 0 2
29536: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
29537: LD_INT 0
29539: PPUSH
29540: PPUSH
29541: PPUSH
29542: PPUSH
29543: PPUSH
29544: PPUSH
29545: PPUSH
// if not factory then
29546: LD_VAR 0 1
29550: NOT
29551: IFFALSE 29555
// exit ;
29553: GO 30148
// if control = control_apeman then
29555: LD_VAR 0 4
29559: PUSH
29560: LD_INT 5
29562: EQUAL
29563: IFFALSE 29672
// begin tmp := UnitsInside ( factory ) ;
29565: LD_ADDR_VAR 0 8
29569: PUSH
29570: LD_VAR 0 1
29574: PPUSH
29575: CALL_OW 313
29579: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
29580: LD_VAR 0 8
29584: PPUSH
29585: LD_INT 25
29587: PUSH
29588: LD_INT 12
29590: PUSH
29591: EMPTY
29592: LIST
29593: LIST
29594: PPUSH
29595: CALL_OW 72
29599: NOT
29600: IFFALSE 29610
// control := control_manual ;
29602: LD_ADDR_VAR 0 4
29606: PUSH
29607: LD_INT 1
29609: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
29610: LD_ADDR_VAR 0 8
29614: PUSH
29615: LD_VAR 0 1
29619: PPUSH
29620: CALL 29307 0 1
29624: ST_TO_ADDR
// if tmp then
29625: LD_VAR 0 8
29629: IFFALSE 29672
// begin for i in tmp do
29631: LD_ADDR_VAR 0 7
29635: PUSH
29636: LD_VAR 0 8
29640: PUSH
29641: FOR_IN
29642: IFFALSE 29670
// if i [ 1 ] = b_ext_radio then
29644: LD_VAR 0 7
29648: PUSH
29649: LD_INT 1
29651: ARRAY
29652: PUSH
29653: LD_INT 22
29655: EQUAL
29656: IFFALSE 29668
// begin control := control_remote ;
29658: LD_ADDR_VAR 0 4
29662: PUSH
29663: LD_INT 2
29665: ST_TO_ADDR
// break ;
29666: GO 29670
// end ;
29668: GO 29641
29670: POP
29671: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
29672: LD_VAR 0 1
29676: PPUSH
29677: LD_VAR 0 2
29681: PPUSH
29682: LD_VAR 0 3
29686: PPUSH
29687: LD_VAR 0 4
29691: PPUSH
29692: LD_VAR 0 5
29696: PPUSH
29697: CALL_OW 448
29701: IFFALSE 29736
// begin result := [ chassis , engine , control , weapon ] ;
29703: LD_ADDR_VAR 0 6
29707: PUSH
29708: LD_VAR 0 2
29712: PUSH
29713: LD_VAR 0 3
29717: PUSH
29718: LD_VAR 0 4
29722: PUSH
29723: LD_VAR 0 5
29727: PUSH
29728: EMPTY
29729: LIST
29730: LIST
29731: LIST
29732: LIST
29733: ST_TO_ADDR
// exit ;
29734: GO 30148
// end ; _chassis := AvailableChassisList ( factory ) ;
29736: LD_ADDR_VAR 0 9
29740: PUSH
29741: LD_VAR 0 1
29745: PPUSH
29746: CALL_OW 475
29750: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
29751: LD_ADDR_VAR 0 11
29755: PUSH
29756: LD_VAR 0 1
29760: PPUSH
29761: CALL_OW 476
29765: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
29766: LD_ADDR_VAR 0 12
29770: PUSH
29771: LD_VAR 0 1
29775: PPUSH
29776: CALL_OW 477
29780: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
29781: LD_ADDR_VAR 0 10
29785: PUSH
29786: LD_VAR 0 1
29790: PPUSH
29791: CALL_OW 478
29795: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
29796: LD_VAR 0 9
29800: NOT
29801: PUSH
29802: LD_VAR 0 11
29806: NOT
29807: OR
29808: PUSH
29809: LD_VAR 0 12
29813: NOT
29814: OR
29815: PUSH
29816: LD_VAR 0 10
29820: NOT
29821: OR
29822: IFFALSE 29857
// begin result := [ chassis , engine , control , weapon ] ;
29824: LD_ADDR_VAR 0 6
29828: PUSH
29829: LD_VAR 0 2
29833: PUSH
29834: LD_VAR 0 3
29838: PUSH
29839: LD_VAR 0 4
29843: PUSH
29844: LD_VAR 0 5
29848: PUSH
29849: EMPTY
29850: LIST
29851: LIST
29852: LIST
29853: LIST
29854: ST_TO_ADDR
// exit ;
29855: GO 30148
// end ; if not chassis in _chassis then
29857: LD_VAR 0 2
29861: PUSH
29862: LD_VAR 0 9
29866: IN
29867: NOT
29868: IFFALSE 29894
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
29870: LD_ADDR_VAR 0 2
29874: PUSH
29875: LD_VAR 0 9
29879: PUSH
29880: LD_INT 1
29882: PPUSH
29883: LD_VAR 0 9
29887: PPUSH
29888: CALL_OW 12
29892: ARRAY
29893: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
29894: LD_VAR 0 2
29898: PPUSH
29899: LD_VAR 0 3
29903: PPUSH
29904: CALL 30153 0 2
29908: NOT
29909: IFFALSE 29968
// repeat engine := _engine [ 1 ] ;
29911: LD_ADDR_VAR 0 3
29915: PUSH
29916: LD_VAR 0 11
29920: PUSH
29921: LD_INT 1
29923: ARRAY
29924: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
29925: LD_ADDR_VAR 0 11
29929: PUSH
29930: LD_VAR 0 11
29934: PPUSH
29935: LD_INT 1
29937: PPUSH
29938: CALL_OW 3
29942: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
29943: LD_VAR 0 2
29947: PPUSH
29948: LD_VAR 0 3
29952: PPUSH
29953: CALL 30153 0 2
29957: PUSH
29958: LD_VAR 0 11
29962: PUSH
29963: EMPTY
29964: EQUAL
29965: OR
29966: IFFALSE 29911
// if not control in _control then
29968: LD_VAR 0 4
29972: PUSH
29973: LD_VAR 0 12
29977: IN
29978: NOT
29979: IFFALSE 30005
// control := _control [ rand ( 1 , _control ) ] ;
29981: LD_ADDR_VAR 0 4
29985: PUSH
29986: LD_VAR 0 12
29990: PUSH
29991: LD_INT 1
29993: PPUSH
29994: LD_VAR 0 12
29998: PPUSH
29999: CALL_OW 12
30003: ARRAY
30004: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
30005: LD_VAR 0 2
30009: PPUSH
30010: LD_VAR 0 5
30014: PPUSH
30015: CALL 30373 0 2
30019: NOT
30020: IFFALSE 30079
// repeat weapon := _weapon [ 1 ] ;
30022: LD_ADDR_VAR 0 5
30026: PUSH
30027: LD_VAR 0 10
30031: PUSH
30032: LD_INT 1
30034: ARRAY
30035: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
30036: LD_ADDR_VAR 0 10
30040: PUSH
30041: LD_VAR 0 10
30045: PPUSH
30046: LD_INT 1
30048: PPUSH
30049: CALL_OW 3
30053: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
30054: LD_VAR 0 2
30058: PPUSH
30059: LD_VAR 0 5
30063: PPUSH
30064: CALL 30373 0 2
30068: PUSH
30069: LD_VAR 0 10
30073: PUSH
30074: EMPTY
30075: EQUAL
30076: OR
30077: IFFALSE 30022
// result := [ ] ;
30079: LD_ADDR_VAR 0 6
30083: PUSH
30084: EMPTY
30085: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
30086: LD_VAR 0 1
30090: PPUSH
30091: LD_VAR 0 2
30095: PPUSH
30096: LD_VAR 0 3
30100: PPUSH
30101: LD_VAR 0 4
30105: PPUSH
30106: LD_VAR 0 5
30110: PPUSH
30111: CALL_OW 448
30115: IFFALSE 30148
// result := [ chassis , engine , control , weapon ] ;
30117: LD_ADDR_VAR 0 6
30121: PUSH
30122: LD_VAR 0 2
30126: PUSH
30127: LD_VAR 0 3
30131: PUSH
30132: LD_VAR 0 4
30136: PUSH
30137: LD_VAR 0 5
30141: PUSH
30142: EMPTY
30143: LIST
30144: LIST
30145: LIST
30146: LIST
30147: ST_TO_ADDR
// end ;
30148: LD_VAR 0 6
30152: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
30153: LD_INT 0
30155: PPUSH
// if not chassis or not engine then
30156: LD_VAR 0 1
30160: NOT
30161: PUSH
30162: LD_VAR 0 2
30166: NOT
30167: OR
30168: IFFALSE 30172
// exit ;
30170: GO 30368
// case engine of engine_solar :
30172: LD_VAR 0 2
30176: PUSH
30177: LD_INT 2
30179: DOUBLE
30180: EQUAL
30181: IFTRUE 30185
30183: GO 30223
30185: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
30186: LD_ADDR_VAR 0 3
30190: PUSH
30191: LD_INT 11
30193: PUSH
30194: LD_INT 12
30196: PUSH
30197: LD_INT 13
30199: PUSH
30200: LD_INT 14
30202: PUSH
30203: LD_INT 1
30205: PUSH
30206: LD_INT 2
30208: PUSH
30209: LD_INT 3
30211: PUSH
30212: EMPTY
30213: LIST
30214: LIST
30215: LIST
30216: LIST
30217: LIST
30218: LIST
30219: LIST
30220: ST_TO_ADDR
30221: GO 30352
30223: LD_INT 1
30225: DOUBLE
30226: EQUAL
30227: IFTRUE 30231
30229: GO 30293
30231: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
30232: LD_ADDR_VAR 0 3
30236: PUSH
30237: LD_INT 11
30239: PUSH
30240: LD_INT 12
30242: PUSH
30243: LD_INT 13
30245: PUSH
30246: LD_INT 14
30248: PUSH
30249: LD_INT 1
30251: PUSH
30252: LD_INT 2
30254: PUSH
30255: LD_INT 3
30257: PUSH
30258: LD_INT 4
30260: PUSH
30261: LD_INT 5
30263: PUSH
30264: LD_INT 21
30266: PUSH
30267: LD_INT 23
30269: PUSH
30270: LD_INT 22
30272: PUSH
30273: LD_INT 24
30275: PUSH
30276: EMPTY
30277: LIST
30278: LIST
30279: LIST
30280: LIST
30281: LIST
30282: LIST
30283: LIST
30284: LIST
30285: LIST
30286: LIST
30287: LIST
30288: LIST
30289: LIST
30290: ST_TO_ADDR
30291: GO 30352
30293: LD_INT 3
30295: DOUBLE
30296: EQUAL
30297: IFTRUE 30301
30299: GO 30351
30301: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
30302: LD_ADDR_VAR 0 3
30306: PUSH
30307: LD_INT 13
30309: PUSH
30310: LD_INT 14
30312: PUSH
30313: LD_INT 2
30315: PUSH
30316: LD_INT 3
30318: PUSH
30319: LD_INT 4
30321: PUSH
30322: LD_INT 5
30324: PUSH
30325: LD_INT 21
30327: PUSH
30328: LD_INT 22
30330: PUSH
30331: LD_INT 23
30333: PUSH
30334: LD_INT 24
30336: PUSH
30337: EMPTY
30338: LIST
30339: LIST
30340: LIST
30341: LIST
30342: LIST
30343: LIST
30344: LIST
30345: LIST
30346: LIST
30347: LIST
30348: ST_TO_ADDR
30349: GO 30352
30351: POP
// result := ( chassis in result ) ;
30352: LD_ADDR_VAR 0 3
30356: PUSH
30357: LD_VAR 0 1
30361: PUSH
30362: LD_VAR 0 3
30366: IN
30367: ST_TO_ADDR
// end ;
30368: LD_VAR 0 3
30372: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
30373: LD_INT 0
30375: PPUSH
// if not chassis or not weapon then
30376: LD_VAR 0 1
30380: NOT
30381: PUSH
30382: LD_VAR 0 2
30386: NOT
30387: OR
30388: IFFALSE 30392
// exit ;
30390: GO 31454
// case weapon of us_machine_gun :
30392: LD_VAR 0 2
30396: PUSH
30397: LD_INT 2
30399: DOUBLE
30400: EQUAL
30401: IFTRUE 30405
30403: GO 30435
30405: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
30406: LD_ADDR_VAR 0 3
30410: PUSH
30411: LD_INT 1
30413: PUSH
30414: LD_INT 2
30416: PUSH
30417: LD_INT 3
30419: PUSH
30420: LD_INT 4
30422: PUSH
30423: LD_INT 5
30425: PUSH
30426: EMPTY
30427: LIST
30428: LIST
30429: LIST
30430: LIST
30431: LIST
30432: ST_TO_ADDR
30433: GO 31438
30435: LD_INT 3
30437: DOUBLE
30438: EQUAL
30439: IFTRUE 30443
30441: GO 30473
30443: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
30444: LD_ADDR_VAR 0 3
30448: PUSH
30449: LD_INT 1
30451: PUSH
30452: LD_INT 2
30454: PUSH
30455: LD_INT 3
30457: PUSH
30458: LD_INT 4
30460: PUSH
30461: LD_INT 5
30463: PUSH
30464: EMPTY
30465: LIST
30466: LIST
30467: LIST
30468: LIST
30469: LIST
30470: ST_TO_ADDR
30471: GO 31438
30473: LD_INT 11
30475: DOUBLE
30476: EQUAL
30477: IFTRUE 30481
30479: GO 30511
30481: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
30482: LD_ADDR_VAR 0 3
30486: PUSH
30487: LD_INT 1
30489: PUSH
30490: LD_INT 2
30492: PUSH
30493: LD_INT 3
30495: PUSH
30496: LD_INT 4
30498: PUSH
30499: LD_INT 5
30501: PUSH
30502: EMPTY
30503: LIST
30504: LIST
30505: LIST
30506: LIST
30507: LIST
30508: ST_TO_ADDR
30509: GO 31438
30511: LD_INT 4
30513: DOUBLE
30514: EQUAL
30515: IFTRUE 30519
30517: GO 30545
30519: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
30520: LD_ADDR_VAR 0 3
30524: PUSH
30525: LD_INT 2
30527: PUSH
30528: LD_INT 3
30530: PUSH
30531: LD_INT 4
30533: PUSH
30534: LD_INT 5
30536: PUSH
30537: EMPTY
30538: LIST
30539: LIST
30540: LIST
30541: LIST
30542: ST_TO_ADDR
30543: GO 31438
30545: LD_INT 5
30547: DOUBLE
30548: EQUAL
30549: IFTRUE 30553
30551: GO 30579
30553: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
30554: LD_ADDR_VAR 0 3
30558: PUSH
30559: LD_INT 2
30561: PUSH
30562: LD_INT 3
30564: PUSH
30565: LD_INT 4
30567: PUSH
30568: LD_INT 5
30570: PUSH
30571: EMPTY
30572: LIST
30573: LIST
30574: LIST
30575: LIST
30576: ST_TO_ADDR
30577: GO 31438
30579: LD_INT 9
30581: DOUBLE
30582: EQUAL
30583: IFTRUE 30587
30585: GO 30613
30587: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
30588: LD_ADDR_VAR 0 3
30592: PUSH
30593: LD_INT 2
30595: PUSH
30596: LD_INT 3
30598: PUSH
30599: LD_INT 4
30601: PUSH
30602: LD_INT 5
30604: PUSH
30605: EMPTY
30606: LIST
30607: LIST
30608: LIST
30609: LIST
30610: ST_TO_ADDR
30611: GO 31438
30613: LD_INT 7
30615: DOUBLE
30616: EQUAL
30617: IFTRUE 30621
30619: GO 30647
30621: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
30622: LD_ADDR_VAR 0 3
30626: PUSH
30627: LD_INT 2
30629: PUSH
30630: LD_INT 3
30632: PUSH
30633: LD_INT 4
30635: PUSH
30636: LD_INT 5
30638: PUSH
30639: EMPTY
30640: LIST
30641: LIST
30642: LIST
30643: LIST
30644: ST_TO_ADDR
30645: GO 31438
30647: LD_INT 12
30649: DOUBLE
30650: EQUAL
30651: IFTRUE 30655
30653: GO 30681
30655: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
30656: LD_ADDR_VAR 0 3
30660: PUSH
30661: LD_INT 2
30663: PUSH
30664: LD_INT 3
30666: PUSH
30667: LD_INT 4
30669: PUSH
30670: LD_INT 5
30672: PUSH
30673: EMPTY
30674: LIST
30675: LIST
30676: LIST
30677: LIST
30678: ST_TO_ADDR
30679: GO 31438
30681: LD_INT 13
30683: DOUBLE
30684: EQUAL
30685: IFTRUE 30689
30687: GO 30715
30689: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
30690: LD_ADDR_VAR 0 3
30694: PUSH
30695: LD_INT 2
30697: PUSH
30698: LD_INT 3
30700: PUSH
30701: LD_INT 4
30703: PUSH
30704: LD_INT 5
30706: PUSH
30707: EMPTY
30708: LIST
30709: LIST
30710: LIST
30711: LIST
30712: ST_TO_ADDR
30713: GO 31438
30715: LD_INT 14
30717: DOUBLE
30718: EQUAL
30719: IFTRUE 30723
30721: GO 30741
30723: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
30724: LD_ADDR_VAR 0 3
30728: PUSH
30729: LD_INT 4
30731: PUSH
30732: LD_INT 5
30734: PUSH
30735: EMPTY
30736: LIST
30737: LIST
30738: ST_TO_ADDR
30739: GO 31438
30741: LD_INT 6
30743: DOUBLE
30744: EQUAL
30745: IFTRUE 30749
30747: GO 30767
30749: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
30750: LD_ADDR_VAR 0 3
30754: PUSH
30755: LD_INT 4
30757: PUSH
30758: LD_INT 5
30760: PUSH
30761: EMPTY
30762: LIST
30763: LIST
30764: ST_TO_ADDR
30765: GO 31438
30767: LD_INT 10
30769: DOUBLE
30770: EQUAL
30771: IFTRUE 30775
30773: GO 30793
30775: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
30776: LD_ADDR_VAR 0 3
30780: PUSH
30781: LD_INT 4
30783: PUSH
30784: LD_INT 5
30786: PUSH
30787: EMPTY
30788: LIST
30789: LIST
30790: ST_TO_ADDR
30791: GO 31438
30793: LD_INT 22
30795: DOUBLE
30796: EQUAL
30797: IFTRUE 30801
30799: GO 30827
30801: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
30802: LD_ADDR_VAR 0 3
30806: PUSH
30807: LD_INT 11
30809: PUSH
30810: LD_INT 12
30812: PUSH
30813: LD_INT 13
30815: PUSH
30816: LD_INT 14
30818: PUSH
30819: EMPTY
30820: LIST
30821: LIST
30822: LIST
30823: LIST
30824: ST_TO_ADDR
30825: GO 31438
30827: LD_INT 23
30829: DOUBLE
30830: EQUAL
30831: IFTRUE 30835
30833: GO 30861
30835: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
30836: LD_ADDR_VAR 0 3
30840: PUSH
30841: LD_INT 11
30843: PUSH
30844: LD_INT 12
30846: PUSH
30847: LD_INT 13
30849: PUSH
30850: LD_INT 14
30852: PUSH
30853: EMPTY
30854: LIST
30855: LIST
30856: LIST
30857: LIST
30858: ST_TO_ADDR
30859: GO 31438
30861: LD_INT 24
30863: DOUBLE
30864: EQUAL
30865: IFTRUE 30869
30867: GO 30895
30869: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
30870: LD_ADDR_VAR 0 3
30874: PUSH
30875: LD_INT 11
30877: PUSH
30878: LD_INT 12
30880: PUSH
30881: LD_INT 13
30883: PUSH
30884: LD_INT 14
30886: PUSH
30887: EMPTY
30888: LIST
30889: LIST
30890: LIST
30891: LIST
30892: ST_TO_ADDR
30893: GO 31438
30895: LD_INT 30
30897: DOUBLE
30898: EQUAL
30899: IFTRUE 30903
30901: GO 30929
30903: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
30904: LD_ADDR_VAR 0 3
30908: PUSH
30909: LD_INT 11
30911: PUSH
30912: LD_INT 12
30914: PUSH
30915: LD_INT 13
30917: PUSH
30918: LD_INT 14
30920: PUSH
30921: EMPTY
30922: LIST
30923: LIST
30924: LIST
30925: LIST
30926: ST_TO_ADDR
30927: GO 31438
30929: LD_INT 25
30931: DOUBLE
30932: EQUAL
30933: IFTRUE 30937
30935: GO 30955
30937: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
30938: LD_ADDR_VAR 0 3
30942: PUSH
30943: LD_INT 13
30945: PUSH
30946: LD_INT 14
30948: PUSH
30949: EMPTY
30950: LIST
30951: LIST
30952: ST_TO_ADDR
30953: GO 31438
30955: LD_INT 27
30957: DOUBLE
30958: EQUAL
30959: IFTRUE 30963
30961: GO 30981
30963: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
30964: LD_ADDR_VAR 0 3
30968: PUSH
30969: LD_INT 13
30971: PUSH
30972: LD_INT 14
30974: PUSH
30975: EMPTY
30976: LIST
30977: LIST
30978: ST_TO_ADDR
30979: GO 31438
30981: LD_EXP 34
30985: DOUBLE
30986: EQUAL
30987: IFTRUE 30991
30989: GO 31017
30991: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
30992: LD_ADDR_VAR 0 3
30996: PUSH
30997: LD_INT 11
30999: PUSH
31000: LD_INT 12
31002: PUSH
31003: LD_INT 13
31005: PUSH
31006: LD_INT 14
31008: PUSH
31009: EMPTY
31010: LIST
31011: LIST
31012: LIST
31013: LIST
31014: ST_TO_ADDR
31015: GO 31438
31017: LD_INT 28
31019: DOUBLE
31020: EQUAL
31021: IFTRUE 31025
31023: GO 31043
31025: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
31026: LD_ADDR_VAR 0 3
31030: PUSH
31031: LD_INT 13
31033: PUSH
31034: LD_INT 14
31036: PUSH
31037: EMPTY
31038: LIST
31039: LIST
31040: ST_TO_ADDR
31041: GO 31438
31043: LD_INT 29
31045: DOUBLE
31046: EQUAL
31047: IFTRUE 31051
31049: GO 31069
31051: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
31052: LD_ADDR_VAR 0 3
31056: PUSH
31057: LD_INT 13
31059: PUSH
31060: LD_INT 14
31062: PUSH
31063: EMPTY
31064: LIST
31065: LIST
31066: ST_TO_ADDR
31067: GO 31438
31069: LD_INT 31
31071: DOUBLE
31072: EQUAL
31073: IFTRUE 31077
31075: GO 31095
31077: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
31078: LD_ADDR_VAR 0 3
31082: PUSH
31083: LD_INT 13
31085: PUSH
31086: LD_INT 14
31088: PUSH
31089: EMPTY
31090: LIST
31091: LIST
31092: ST_TO_ADDR
31093: GO 31438
31095: LD_INT 26
31097: DOUBLE
31098: EQUAL
31099: IFTRUE 31103
31101: GO 31121
31103: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
31104: LD_ADDR_VAR 0 3
31108: PUSH
31109: LD_INT 13
31111: PUSH
31112: LD_INT 14
31114: PUSH
31115: EMPTY
31116: LIST
31117: LIST
31118: ST_TO_ADDR
31119: GO 31438
31121: LD_INT 42
31123: DOUBLE
31124: EQUAL
31125: IFTRUE 31129
31127: GO 31155
31129: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
31130: LD_ADDR_VAR 0 3
31134: PUSH
31135: LD_INT 21
31137: PUSH
31138: LD_INT 22
31140: PUSH
31141: LD_INT 23
31143: PUSH
31144: LD_INT 24
31146: PUSH
31147: EMPTY
31148: LIST
31149: LIST
31150: LIST
31151: LIST
31152: ST_TO_ADDR
31153: GO 31438
31155: LD_INT 43
31157: DOUBLE
31158: EQUAL
31159: IFTRUE 31163
31161: GO 31189
31163: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
31164: LD_ADDR_VAR 0 3
31168: PUSH
31169: LD_INT 21
31171: PUSH
31172: LD_INT 22
31174: PUSH
31175: LD_INT 23
31177: PUSH
31178: LD_INT 24
31180: PUSH
31181: EMPTY
31182: LIST
31183: LIST
31184: LIST
31185: LIST
31186: ST_TO_ADDR
31187: GO 31438
31189: LD_INT 44
31191: DOUBLE
31192: EQUAL
31193: IFTRUE 31197
31195: GO 31223
31197: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
31198: LD_ADDR_VAR 0 3
31202: PUSH
31203: LD_INT 21
31205: PUSH
31206: LD_INT 22
31208: PUSH
31209: LD_INT 23
31211: PUSH
31212: LD_INT 24
31214: PUSH
31215: EMPTY
31216: LIST
31217: LIST
31218: LIST
31219: LIST
31220: ST_TO_ADDR
31221: GO 31438
31223: LD_INT 45
31225: DOUBLE
31226: EQUAL
31227: IFTRUE 31231
31229: GO 31257
31231: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
31232: LD_ADDR_VAR 0 3
31236: PUSH
31237: LD_INT 21
31239: PUSH
31240: LD_INT 22
31242: PUSH
31243: LD_INT 23
31245: PUSH
31246: LD_INT 24
31248: PUSH
31249: EMPTY
31250: LIST
31251: LIST
31252: LIST
31253: LIST
31254: ST_TO_ADDR
31255: GO 31438
31257: LD_INT 49
31259: DOUBLE
31260: EQUAL
31261: IFTRUE 31265
31263: GO 31291
31265: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
31266: LD_ADDR_VAR 0 3
31270: PUSH
31271: LD_INT 21
31273: PUSH
31274: LD_INT 22
31276: PUSH
31277: LD_INT 23
31279: PUSH
31280: LD_INT 24
31282: PUSH
31283: EMPTY
31284: LIST
31285: LIST
31286: LIST
31287: LIST
31288: ST_TO_ADDR
31289: GO 31438
31291: LD_INT 51
31293: DOUBLE
31294: EQUAL
31295: IFTRUE 31299
31297: GO 31325
31299: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
31300: LD_ADDR_VAR 0 3
31304: PUSH
31305: LD_INT 21
31307: PUSH
31308: LD_INT 22
31310: PUSH
31311: LD_INT 23
31313: PUSH
31314: LD_INT 24
31316: PUSH
31317: EMPTY
31318: LIST
31319: LIST
31320: LIST
31321: LIST
31322: ST_TO_ADDR
31323: GO 31438
31325: LD_INT 52
31327: DOUBLE
31328: EQUAL
31329: IFTRUE 31333
31331: GO 31359
31333: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
31334: LD_ADDR_VAR 0 3
31338: PUSH
31339: LD_INT 21
31341: PUSH
31342: LD_INT 22
31344: PUSH
31345: LD_INT 23
31347: PUSH
31348: LD_INT 24
31350: PUSH
31351: EMPTY
31352: LIST
31353: LIST
31354: LIST
31355: LIST
31356: ST_TO_ADDR
31357: GO 31438
31359: LD_INT 53
31361: DOUBLE
31362: EQUAL
31363: IFTRUE 31367
31365: GO 31385
31367: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
31368: LD_ADDR_VAR 0 3
31372: PUSH
31373: LD_INT 23
31375: PUSH
31376: LD_INT 24
31378: PUSH
31379: EMPTY
31380: LIST
31381: LIST
31382: ST_TO_ADDR
31383: GO 31438
31385: LD_INT 46
31387: DOUBLE
31388: EQUAL
31389: IFTRUE 31393
31391: GO 31411
31393: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
31394: LD_ADDR_VAR 0 3
31398: PUSH
31399: LD_INT 23
31401: PUSH
31402: LD_INT 24
31404: PUSH
31405: EMPTY
31406: LIST
31407: LIST
31408: ST_TO_ADDR
31409: GO 31438
31411: LD_INT 47
31413: DOUBLE
31414: EQUAL
31415: IFTRUE 31419
31417: GO 31437
31419: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
31420: LD_ADDR_VAR 0 3
31424: PUSH
31425: LD_INT 23
31427: PUSH
31428: LD_INT 24
31430: PUSH
31431: EMPTY
31432: LIST
31433: LIST
31434: ST_TO_ADDR
31435: GO 31438
31437: POP
// result := ( chassis in result ) ;
31438: LD_ADDR_VAR 0 3
31442: PUSH
31443: LD_VAR 0 1
31447: PUSH
31448: LD_VAR 0 3
31452: IN
31453: ST_TO_ADDR
// end ;
31454: LD_VAR 0 3
31458: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
31459: LD_INT 0
31461: PPUSH
31462: PPUSH
31463: PPUSH
31464: PPUSH
31465: PPUSH
31466: PPUSH
31467: PPUSH
// result := array ;
31468: LD_ADDR_VAR 0 5
31472: PUSH
31473: LD_VAR 0 1
31477: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
31478: LD_VAR 0 1
31482: NOT
31483: PUSH
31484: LD_VAR 0 2
31488: NOT
31489: OR
31490: PUSH
31491: LD_VAR 0 3
31495: NOT
31496: OR
31497: PUSH
31498: LD_VAR 0 2
31502: PUSH
31503: LD_VAR 0 1
31507: GREATER
31508: OR
31509: PUSH
31510: LD_VAR 0 3
31514: PUSH
31515: LD_VAR 0 1
31519: GREATER
31520: OR
31521: IFFALSE 31525
// exit ;
31523: GO 31821
// if direction then
31525: LD_VAR 0 4
31529: IFFALSE 31593
// begin d := 1 ;
31531: LD_ADDR_VAR 0 9
31535: PUSH
31536: LD_INT 1
31538: ST_TO_ADDR
// if i_from > i_to then
31539: LD_VAR 0 2
31543: PUSH
31544: LD_VAR 0 3
31548: GREATER
31549: IFFALSE 31575
// length := ( array - i_from ) + i_to else
31551: LD_ADDR_VAR 0 11
31555: PUSH
31556: LD_VAR 0 1
31560: PUSH
31561: LD_VAR 0 2
31565: MINUS
31566: PUSH
31567: LD_VAR 0 3
31571: PLUS
31572: ST_TO_ADDR
31573: GO 31591
// length := i_to - i_from ;
31575: LD_ADDR_VAR 0 11
31579: PUSH
31580: LD_VAR 0 3
31584: PUSH
31585: LD_VAR 0 2
31589: MINUS
31590: ST_TO_ADDR
// end else
31591: GO 31654
// begin d := - 1 ;
31593: LD_ADDR_VAR 0 9
31597: PUSH
31598: LD_INT 1
31600: NEG
31601: ST_TO_ADDR
// if i_from > i_to then
31602: LD_VAR 0 2
31606: PUSH
31607: LD_VAR 0 3
31611: GREATER
31612: IFFALSE 31632
// length := i_from - i_to else
31614: LD_ADDR_VAR 0 11
31618: PUSH
31619: LD_VAR 0 2
31623: PUSH
31624: LD_VAR 0 3
31628: MINUS
31629: ST_TO_ADDR
31630: GO 31654
// length := ( array - i_to ) + i_from ;
31632: LD_ADDR_VAR 0 11
31636: PUSH
31637: LD_VAR 0 1
31641: PUSH
31642: LD_VAR 0 3
31646: MINUS
31647: PUSH
31648: LD_VAR 0 2
31652: PLUS
31653: ST_TO_ADDR
// end ; if not length then
31654: LD_VAR 0 11
31658: NOT
31659: IFFALSE 31663
// exit ;
31661: GO 31821
// tmp := array ;
31663: LD_ADDR_VAR 0 10
31667: PUSH
31668: LD_VAR 0 1
31672: ST_TO_ADDR
// for i = 1 to length do
31673: LD_ADDR_VAR 0 6
31677: PUSH
31678: DOUBLE
31679: LD_INT 1
31681: DEC
31682: ST_TO_ADDR
31683: LD_VAR 0 11
31687: PUSH
31688: FOR_TO
31689: IFFALSE 31809
// begin for j = 1 to array do
31691: LD_ADDR_VAR 0 7
31695: PUSH
31696: DOUBLE
31697: LD_INT 1
31699: DEC
31700: ST_TO_ADDR
31701: LD_VAR 0 1
31705: PUSH
31706: FOR_TO
31707: IFFALSE 31795
// begin k := j + d ;
31709: LD_ADDR_VAR 0 8
31713: PUSH
31714: LD_VAR 0 7
31718: PUSH
31719: LD_VAR 0 9
31723: PLUS
31724: ST_TO_ADDR
// if k > array then
31725: LD_VAR 0 8
31729: PUSH
31730: LD_VAR 0 1
31734: GREATER
31735: IFFALSE 31745
// k := 1 ;
31737: LD_ADDR_VAR 0 8
31741: PUSH
31742: LD_INT 1
31744: ST_TO_ADDR
// if not k then
31745: LD_VAR 0 8
31749: NOT
31750: IFFALSE 31762
// k := array ;
31752: LD_ADDR_VAR 0 8
31756: PUSH
31757: LD_VAR 0 1
31761: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
31762: LD_ADDR_VAR 0 10
31766: PUSH
31767: LD_VAR 0 10
31771: PPUSH
31772: LD_VAR 0 8
31776: PPUSH
31777: LD_VAR 0 1
31781: PUSH
31782: LD_VAR 0 7
31786: ARRAY
31787: PPUSH
31788: CALL_OW 1
31792: ST_TO_ADDR
// end ;
31793: GO 31706
31795: POP
31796: POP
// array := tmp ;
31797: LD_ADDR_VAR 0 1
31801: PUSH
31802: LD_VAR 0 10
31806: ST_TO_ADDR
// end ;
31807: GO 31688
31809: POP
31810: POP
// result := array ;
31811: LD_ADDR_VAR 0 5
31815: PUSH
31816: LD_VAR 0 1
31820: ST_TO_ADDR
// end ;
31821: LD_VAR 0 5
31825: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
31826: LD_INT 0
31828: PPUSH
31829: PPUSH
// result := 0 ;
31830: LD_ADDR_VAR 0 3
31834: PUSH
31835: LD_INT 0
31837: ST_TO_ADDR
// if not array or not value in array then
31838: LD_VAR 0 1
31842: NOT
31843: PUSH
31844: LD_VAR 0 2
31848: PUSH
31849: LD_VAR 0 1
31853: IN
31854: NOT
31855: OR
31856: IFFALSE 31860
// exit ;
31858: GO 31914
// for i = 1 to array do
31860: LD_ADDR_VAR 0 4
31864: PUSH
31865: DOUBLE
31866: LD_INT 1
31868: DEC
31869: ST_TO_ADDR
31870: LD_VAR 0 1
31874: PUSH
31875: FOR_TO
31876: IFFALSE 31912
// if value = array [ i ] then
31878: LD_VAR 0 2
31882: PUSH
31883: LD_VAR 0 1
31887: PUSH
31888: LD_VAR 0 4
31892: ARRAY
31893: EQUAL
31894: IFFALSE 31910
// begin result := i ;
31896: LD_ADDR_VAR 0 3
31900: PUSH
31901: LD_VAR 0 4
31905: ST_TO_ADDR
// exit ;
31906: POP
31907: POP
31908: GO 31914
// end ;
31910: GO 31875
31912: POP
31913: POP
// end ;
31914: LD_VAR 0 3
31918: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
31919: LD_INT 0
31921: PPUSH
// vc_chassis := chassis ;
31922: LD_ADDR_OWVAR 37
31926: PUSH
31927: LD_VAR 0 1
31931: ST_TO_ADDR
// vc_engine := engine ;
31932: LD_ADDR_OWVAR 39
31936: PUSH
31937: LD_VAR 0 2
31941: ST_TO_ADDR
// vc_control := control ;
31942: LD_ADDR_OWVAR 38
31946: PUSH
31947: LD_VAR 0 3
31951: ST_TO_ADDR
// vc_weapon := weapon ;
31952: LD_ADDR_OWVAR 40
31956: PUSH
31957: LD_VAR 0 4
31961: ST_TO_ADDR
// vc_fuel_battery := fuel ;
31962: LD_ADDR_OWVAR 41
31966: PUSH
31967: LD_VAR 0 5
31971: ST_TO_ADDR
// end ;
31972: LD_VAR 0 6
31976: RET
// export function WantPlant ( unit ) ; var task ; begin
31977: LD_INT 0
31979: PPUSH
31980: PPUSH
// result := false ;
31981: LD_ADDR_VAR 0 2
31985: PUSH
31986: LD_INT 0
31988: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
31989: LD_ADDR_VAR 0 3
31993: PUSH
31994: LD_VAR 0 1
31998: PPUSH
31999: CALL_OW 437
32003: ST_TO_ADDR
// if task then
32004: LD_VAR 0 3
32008: IFFALSE 32036
// if task [ 1 ] [ 1 ] = p then
32010: LD_VAR 0 3
32014: PUSH
32015: LD_INT 1
32017: ARRAY
32018: PUSH
32019: LD_INT 1
32021: ARRAY
32022: PUSH
32023: LD_STRING p
32025: EQUAL
32026: IFFALSE 32036
// result := true ;
32028: LD_ADDR_VAR 0 2
32032: PUSH
32033: LD_INT 1
32035: ST_TO_ADDR
// end ;
32036: LD_VAR 0 2
32040: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
32041: LD_INT 0
32043: PPUSH
32044: PPUSH
32045: PPUSH
32046: PPUSH
// if pos < 1 then
32047: LD_VAR 0 2
32051: PUSH
32052: LD_INT 1
32054: LESS
32055: IFFALSE 32059
// exit ;
32057: GO 32362
// if pos = 1 then
32059: LD_VAR 0 2
32063: PUSH
32064: LD_INT 1
32066: EQUAL
32067: IFFALSE 32100
// result := Replace ( arr , pos [ 1 ] , value ) else
32069: LD_ADDR_VAR 0 4
32073: PUSH
32074: LD_VAR 0 1
32078: PPUSH
32079: LD_VAR 0 2
32083: PUSH
32084: LD_INT 1
32086: ARRAY
32087: PPUSH
32088: LD_VAR 0 3
32092: PPUSH
32093: CALL_OW 1
32097: ST_TO_ADDR
32098: GO 32362
// begin tmp := arr ;
32100: LD_ADDR_VAR 0 6
32104: PUSH
32105: LD_VAR 0 1
32109: ST_TO_ADDR
// s_arr := [ tmp ] ;
32110: LD_ADDR_VAR 0 7
32114: PUSH
32115: LD_VAR 0 6
32119: PUSH
32120: EMPTY
32121: LIST
32122: ST_TO_ADDR
// for i = 1 to pos - 1 do
32123: LD_ADDR_VAR 0 5
32127: PUSH
32128: DOUBLE
32129: LD_INT 1
32131: DEC
32132: ST_TO_ADDR
32133: LD_VAR 0 2
32137: PUSH
32138: LD_INT 1
32140: MINUS
32141: PUSH
32142: FOR_TO
32143: IFFALSE 32188
// begin tmp := tmp [ pos [ i ] ] ;
32145: LD_ADDR_VAR 0 6
32149: PUSH
32150: LD_VAR 0 6
32154: PUSH
32155: LD_VAR 0 2
32159: PUSH
32160: LD_VAR 0 5
32164: ARRAY
32165: ARRAY
32166: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
32167: LD_ADDR_VAR 0 7
32171: PUSH
32172: LD_VAR 0 7
32176: PUSH
32177: LD_VAR 0 6
32181: PUSH
32182: EMPTY
32183: LIST
32184: ADD
32185: ST_TO_ADDR
// end ;
32186: GO 32142
32188: POP
32189: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
32190: LD_ADDR_VAR 0 6
32194: PUSH
32195: LD_VAR 0 6
32199: PPUSH
32200: LD_VAR 0 2
32204: PUSH
32205: LD_VAR 0 2
32209: ARRAY
32210: PPUSH
32211: LD_VAR 0 3
32215: PPUSH
32216: CALL_OW 1
32220: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
32221: LD_ADDR_VAR 0 7
32225: PUSH
32226: LD_VAR 0 7
32230: PPUSH
32231: LD_VAR 0 7
32235: PPUSH
32236: LD_VAR 0 6
32240: PPUSH
32241: CALL_OW 1
32245: ST_TO_ADDR
// for i = s_arr downto 2 do
32246: LD_ADDR_VAR 0 5
32250: PUSH
32251: DOUBLE
32252: LD_VAR 0 7
32256: INC
32257: ST_TO_ADDR
32258: LD_INT 2
32260: PUSH
32261: FOR_DOWNTO
32262: IFFALSE 32346
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
32264: LD_ADDR_VAR 0 6
32268: PUSH
32269: LD_VAR 0 7
32273: PUSH
32274: LD_VAR 0 5
32278: PUSH
32279: LD_INT 1
32281: MINUS
32282: ARRAY
32283: PPUSH
32284: LD_VAR 0 2
32288: PUSH
32289: LD_VAR 0 5
32293: PUSH
32294: LD_INT 1
32296: MINUS
32297: ARRAY
32298: PPUSH
32299: LD_VAR 0 7
32303: PUSH
32304: LD_VAR 0 5
32308: ARRAY
32309: PPUSH
32310: CALL_OW 1
32314: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
32315: LD_ADDR_VAR 0 7
32319: PUSH
32320: LD_VAR 0 7
32324: PPUSH
32325: LD_VAR 0 5
32329: PUSH
32330: LD_INT 1
32332: MINUS
32333: PPUSH
32334: LD_VAR 0 6
32338: PPUSH
32339: CALL_OW 1
32343: ST_TO_ADDR
// end ;
32344: GO 32261
32346: POP
32347: POP
// result := s_arr [ 1 ] ;
32348: LD_ADDR_VAR 0 4
32352: PUSH
32353: LD_VAR 0 7
32357: PUSH
32358: LD_INT 1
32360: ARRAY
32361: ST_TO_ADDR
// end ; end ;
32362: LD_VAR 0 4
32366: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
32367: LD_INT 0
32369: PPUSH
32370: PPUSH
// if not list then
32371: LD_VAR 0 1
32375: NOT
32376: IFFALSE 32380
// exit ;
32378: GO 32471
// i := list [ pos1 ] ;
32380: LD_ADDR_VAR 0 5
32384: PUSH
32385: LD_VAR 0 1
32389: PUSH
32390: LD_VAR 0 2
32394: ARRAY
32395: ST_TO_ADDR
// if not i then
32396: LD_VAR 0 5
32400: NOT
32401: IFFALSE 32405
// exit ;
32403: GO 32471
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
32405: LD_ADDR_VAR 0 1
32409: PUSH
32410: LD_VAR 0 1
32414: PPUSH
32415: LD_VAR 0 2
32419: PPUSH
32420: LD_VAR 0 1
32424: PUSH
32425: LD_VAR 0 3
32429: ARRAY
32430: PPUSH
32431: CALL_OW 1
32435: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
32436: LD_ADDR_VAR 0 1
32440: PUSH
32441: LD_VAR 0 1
32445: PPUSH
32446: LD_VAR 0 3
32450: PPUSH
32451: LD_VAR 0 5
32455: PPUSH
32456: CALL_OW 1
32460: ST_TO_ADDR
// result := list ;
32461: LD_ADDR_VAR 0 4
32465: PUSH
32466: LD_VAR 0 1
32470: ST_TO_ADDR
// end ;
32471: LD_VAR 0 4
32475: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
32476: LD_INT 0
32478: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
32479: LD_ADDR_VAR 0 5
32483: PUSH
32484: LD_VAR 0 1
32488: PPUSH
32489: CALL_OW 250
32493: PPUSH
32494: LD_VAR 0 1
32498: PPUSH
32499: CALL_OW 251
32503: PPUSH
32504: LD_VAR 0 2
32508: PPUSH
32509: LD_VAR 0 3
32513: PPUSH
32514: LD_VAR 0 4
32518: PPUSH
32519: CALL 32529 0 5
32523: ST_TO_ADDR
// end ;
32524: LD_VAR 0 5
32528: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
32529: LD_INT 0
32531: PPUSH
32532: PPUSH
32533: PPUSH
32534: PPUSH
// if not list then
32535: LD_VAR 0 3
32539: NOT
32540: IFFALSE 32544
// exit ;
32542: GO 32932
// result := [ ] ;
32544: LD_ADDR_VAR 0 6
32548: PUSH
32549: EMPTY
32550: ST_TO_ADDR
// for i in list do
32551: LD_ADDR_VAR 0 7
32555: PUSH
32556: LD_VAR 0 3
32560: PUSH
32561: FOR_IN
32562: IFFALSE 32764
// begin tmp := GetDistUnitXY ( i , x , y ) ;
32564: LD_ADDR_VAR 0 9
32568: PUSH
32569: LD_VAR 0 7
32573: PPUSH
32574: LD_VAR 0 1
32578: PPUSH
32579: LD_VAR 0 2
32583: PPUSH
32584: CALL_OW 297
32588: ST_TO_ADDR
// if not result then
32589: LD_VAR 0 6
32593: NOT
32594: IFFALSE 32620
// result := [ [ i , tmp ] ] else
32596: LD_ADDR_VAR 0 6
32600: PUSH
32601: LD_VAR 0 7
32605: PUSH
32606: LD_VAR 0 9
32610: PUSH
32611: EMPTY
32612: LIST
32613: LIST
32614: PUSH
32615: EMPTY
32616: LIST
32617: ST_TO_ADDR
32618: GO 32762
// begin if result [ result ] [ 2 ] < tmp then
32620: LD_VAR 0 6
32624: PUSH
32625: LD_VAR 0 6
32629: ARRAY
32630: PUSH
32631: LD_INT 2
32633: ARRAY
32634: PUSH
32635: LD_VAR 0 9
32639: LESS
32640: IFFALSE 32682
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
32642: LD_ADDR_VAR 0 6
32646: PUSH
32647: LD_VAR 0 6
32651: PPUSH
32652: LD_VAR 0 6
32656: PUSH
32657: LD_INT 1
32659: PLUS
32660: PPUSH
32661: LD_VAR 0 7
32665: PUSH
32666: LD_VAR 0 9
32670: PUSH
32671: EMPTY
32672: LIST
32673: LIST
32674: PPUSH
32675: CALL_OW 2
32679: ST_TO_ADDR
32680: GO 32762
// for j = 1 to result do
32682: LD_ADDR_VAR 0 8
32686: PUSH
32687: DOUBLE
32688: LD_INT 1
32690: DEC
32691: ST_TO_ADDR
32692: LD_VAR 0 6
32696: PUSH
32697: FOR_TO
32698: IFFALSE 32760
// begin if tmp < result [ j ] [ 2 ] then
32700: LD_VAR 0 9
32704: PUSH
32705: LD_VAR 0 6
32709: PUSH
32710: LD_VAR 0 8
32714: ARRAY
32715: PUSH
32716: LD_INT 2
32718: ARRAY
32719: LESS
32720: IFFALSE 32758
// begin result := Insert ( result , j , [ i , tmp ] ) ;
32722: LD_ADDR_VAR 0 6
32726: PUSH
32727: LD_VAR 0 6
32731: PPUSH
32732: LD_VAR 0 8
32736: PPUSH
32737: LD_VAR 0 7
32741: PUSH
32742: LD_VAR 0 9
32746: PUSH
32747: EMPTY
32748: LIST
32749: LIST
32750: PPUSH
32751: CALL_OW 2
32755: ST_TO_ADDR
// break ;
32756: GO 32760
// end ; end ;
32758: GO 32697
32760: POP
32761: POP
// end ; end ;
32762: GO 32561
32764: POP
32765: POP
// if result and not asc then
32766: LD_VAR 0 6
32770: PUSH
32771: LD_VAR 0 4
32775: NOT
32776: AND
32777: IFFALSE 32852
// begin tmp := result ;
32779: LD_ADDR_VAR 0 9
32783: PUSH
32784: LD_VAR 0 6
32788: ST_TO_ADDR
// for i = tmp downto 1 do
32789: LD_ADDR_VAR 0 7
32793: PUSH
32794: DOUBLE
32795: LD_VAR 0 9
32799: INC
32800: ST_TO_ADDR
32801: LD_INT 1
32803: PUSH
32804: FOR_DOWNTO
32805: IFFALSE 32850
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
32807: LD_ADDR_VAR 0 6
32811: PUSH
32812: LD_VAR 0 6
32816: PPUSH
32817: LD_VAR 0 9
32821: PUSH
32822: LD_VAR 0 7
32826: MINUS
32827: PUSH
32828: LD_INT 1
32830: PLUS
32831: PPUSH
32832: LD_VAR 0 9
32836: PUSH
32837: LD_VAR 0 7
32841: ARRAY
32842: PPUSH
32843: CALL_OW 1
32847: ST_TO_ADDR
32848: GO 32804
32850: POP
32851: POP
// end ; tmp := [ ] ;
32852: LD_ADDR_VAR 0 9
32856: PUSH
32857: EMPTY
32858: ST_TO_ADDR
// if mode then
32859: LD_VAR 0 5
32863: IFFALSE 32932
// begin for i = 1 to result do
32865: LD_ADDR_VAR 0 7
32869: PUSH
32870: DOUBLE
32871: LD_INT 1
32873: DEC
32874: ST_TO_ADDR
32875: LD_VAR 0 6
32879: PUSH
32880: FOR_TO
32881: IFFALSE 32920
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
32883: LD_ADDR_VAR 0 9
32887: PUSH
32888: LD_VAR 0 9
32892: PPUSH
32893: LD_VAR 0 7
32897: PPUSH
32898: LD_VAR 0 6
32902: PUSH
32903: LD_VAR 0 7
32907: ARRAY
32908: PUSH
32909: LD_INT 1
32911: ARRAY
32912: PPUSH
32913: CALL_OW 1
32917: ST_TO_ADDR
32918: GO 32880
32920: POP
32921: POP
// result := tmp ;
32922: LD_ADDR_VAR 0 6
32926: PUSH
32927: LD_VAR 0 9
32931: ST_TO_ADDR
// end ; end ;
32932: LD_VAR 0 6
32936: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
32937: LD_INT 0
32939: PPUSH
32940: PPUSH
32941: PPUSH
32942: PPUSH
32943: PPUSH
32944: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
32945: LD_ADDR_VAR 0 5
32949: PUSH
32950: LD_INT 0
32952: PUSH
32953: LD_INT 0
32955: PUSH
32956: LD_INT 0
32958: PUSH
32959: EMPTY
32960: PUSH
32961: EMPTY
32962: LIST
32963: LIST
32964: LIST
32965: LIST
32966: ST_TO_ADDR
// if not x or not y then
32967: LD_VAR 0 2
32971: NOT
32972: PUSH
32973: LD_VAR 0 3
32977: NOT
32978: OR
32979: IFFALSE 32983
// exit ;
32981: GO 34635
// if not range then
32983: LD_VAR 0 4
32987: NOT
32988: IFFALSE 32998
// range := 10 ;
32990: LD_ADDR_VAR 0 4
32994: PUSH
32995: LD_INT 10
32997: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
32998: LD_ADDR_VAR 0 8
33002: PUSH
33003: LD_INT 81
33005: PUSH
33006: LD_VAR 0 1
33010: PUSH
33011: EMPTY
33012: LIST
33013: LIST
33014: PUSH
33015: LD_INT 92
33017: PUSH
33018: LD_VAR 0 2
33022: PUSH
33023: LD_VAR 0 3
33027: PUSH
33028: LD_VAR 0 4
33032: PUSH
33033: EMPTY
33034: LIST
33035: LIST
33036: LIST
33037: LIST
33038: PUSH
33039: LD_INT 3
33041: PUSH
33042: LD_INT 21
33044: PUSH
33045: LD_INT 3
33047: PUSH
33048: EMPTY
33049: LIST
33050: LIST
33051: PUSH
33052: EMPTY
33053: LIST
33054: LIST
33055: PUSH
33056: EMPTY
33057: LIST
33058: LIST
33059: LIST
33060: PPUSH
33061: CALL_OW 69
33065: ST_TO_ADDR
// if not tmp then
33066: LD_VAR 0 8
33070: NOT
33071: IFFALSE 33075
// exit ;
33073: GO 34635
// for i in tmp do
33075: LD_ADDR_VAR 0 6
33079: PUSH
33080: LD_VAR 0 8
33084: PUSH
33085: FOR_IN
33086: IFFALSE 34610
// begin points := [ 0 , 0 , 0 ] ;
33088: LD_ADDR_VAR 0 9
33092: PUSH
33093: LD_INT 0
33095: PUSH
33096: LD_INT 0
33098: PUSH
33099: LD_INT 0
33101: PUSH
33102: EMPTY
33103: LIST
33104: LIST
33105: LIST
33106: ST_TO_ADDR
// bpoints := 1 ;
33107: LD_ADDR_VAR 0 10
33111: PUSH
33112: LD_INT 1
33114: ST_TO_ADDR
// case GetType ( i ) of unit_human :
33115: LD_VAR 0 6
33119: PPUSH
33120: CALL_OW 247
33124: PUSH
33125: LD_INT 1
33127: DOUBLE
33128: EQUAL
33129: IFTRUE 33133
33131: GO 33711
33133: POP
// begin if GetClass ( i ) = 1 then
33134: LD_VAR 0 6
33138: PPUSH
33139: CALL_OW 257
33143: PUSH
33144: LD_INT 1
33146: EQUAL
33147: IFFALSE 33168
// points := [ 10 , 5 , 3 ] ;
33149: LD_ADDR_VAR 0 9
33153: PUSH
33154: LD_INT 10
33156: PUSH
33157: LD_INT 5
33159: PUSH
33160: LD_INT 3
33162: PUSH
33163: EMPTY
33164: LIST
33165: LIST
33166: LIST
33167: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
33168: LD_VAR 0 6
33172: PPUSH
33173: CALL_OW 257
33177: PUSH
33178: LD_INT 2
33180: PUSH
33181: LD_INT 3
33183: PUSH
33184: LD_INT 4
33186: PUSH
33187: EMPTY
33188: LIST
33189: LIST
33190: LIST
33191: IN
33192: IFFALSE 33213
// points := [ 3 , 2 , 1 ] ;
33194: LD_ADDR_VAR 0 9
33198: PUSH
33199: LD_INT 3
33201: PUSH
33202: LD_INT 2
33204: PUSH
33205: LD_INT 1
33207: PUSH
33208: EMPTY
33209: LIST
33210: LIST
33211: LIST
33212: ST_TO_ADDR
// if GetClass ( i ) = 5 then
33213: LD_VAR 0 6
33217: PPUSH
33218: CALL_OW 257
33222: PUSH
33223: LD_INT 5
33225: EQUAL
33226: IFFALSE 33247
// points := [ 130 , 5 , 2 ] ;
33228: LD_ADDR_VAR 0 9
33232: PUSH
33233: LD_INT 130
33235: PUSH
33236: LD_INT 5
33238: PUSH
33239: LD_INT 2
33241: PUSH
33242: EMPTY
33243: LIST
33244: LIST
33245: LIST
33246: ST_TO_ADDR
// if GetClass ( i ) = 8 then
33247: LD_VAR 0 6
33251: PPUSH
33252: CALL_OW 257
33256: PUSH
33257: LD_INT 8
33259: EQUAL
33260: IFFALSE 33281
// points := [ 35 , 35 , 30 ] ;
33262: LD_ADDR_VAR 0 9
33266: PUSH
33267: LD_INT 35
33269: PUSH
33270: LD_INT 35
33272: PUSH
33273: LD_INT 30
33275: PUSH
33276: EMPTY
33277: LIST
33278: LIST
33279: LIST
33280: ST_TO_ADDR
// if GetClass ( i ) = 9 then
33281: LD_VAR 0 6
33285: PPUSH
33286: CALL_OW 257
33290: PUSH
33291: LD_INT 9
33293: EQUAL
33294: IFFALSE 33315
// points := [ 20 , 55 , 40 ] ;
33296: LD_ADDR_VAR 0 9
33300: PUSH
33301: LD_INT 20
33303: PUSH
33304: LD_INT 55
33306: PUSH
33307: LD_INT 40
33309: PUSH
33310: EMPTY
33311: LIST
33312: LIST
33313: LIST
33314: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
33315: LD_VAR 0 6
33319: PPUSH
33320: CALL_OW 257
33324: PUSH
33325: LD_INT 12
33327: PUSH
33328: LD_INT 16
33330: PUSH
33331: EMPTY
33332: LIST
33333: LIST
33334: IN
33335: IFFALSE 33356
// points := [ 5 , 3 , 2 ] ;
33337: LD_ADDR_VAR 0 9
33341: PUSH
33342: LD_INT 5
33344: PUSH
33345: LD_INT 3
33347: PUSH
33348: LD_INT 2
33350: PUSH
33351: EMPTY
33352: LIST
33353: LIST
33354: LIST
33355: ST_TO_ADDR
// if GetClass ( i ) = 17 then
33356: LD_VAR 0 6
33360: PPUSH
33361: CALL_OW 257
33365: PUSH
33366: LD_INT 17
33368: EQUAL
33369: IFFALSE 33390
// points := [ 100 , 50 , 75 ] ;
33371: LD_ADDR_VAR 0 9
33375: PUSH
33376: LD_INT 100
33378: PUSH
33379: LD_INT 50
33381: PUSH
33382: LD_INT 75
33384: PUSH
33385: EMPTY
33386: LIST
33387: LIST
33388: LIST
33389: ST_TO_ADDR
// if GetClass ( i ) = 15 then
33390: LD_VAR 0 6
33394: PPUSH
33395: CALL_OW 257
33399: PUSH
33400: LD_INT 15
33402: EQUAL
33403: IFFALSE 33424
// points := [ 10 , 5 , 3 ] ;
33405: LD_ADDR_VAR 0 9
33409: PUSH
33410: LD_INT 10
33412: PUSH
33413: LD_INT 5
33415: PUSH
33416: LD_INT 3
33418: PUSH
33419: EMPTY
33420: LIST
33421: LIST
33422: LIST
33423: ST_TO_ADDR
// if GetClass ( i ) = 14 then
33424: LD_VAR 0 6
33428: PPUSH
33429: CALL_OW 257
33433: PUSH
33434: LD_INT 14
33436: EQUAL
33437: IFFALSE 33458
// points := [ 10 , 0 , 0 ] ;
33439: LD_ADDR_VAR 0 9
33443: PUSH
33444: LD_INT 10
33446: PUSH
33447: LD_INT 0
33449: PUSH
33450: LD_INT 0
33452: PUSH
33453: EMPTY
33454: LIST
33455: LIST
33456: LIST
33457: ST_TO_ADDR
// if GetClass ( i ) = 11 then
33458: LD_VAR 0 6
33462: PPUSH
33463: CALL_OW 257
33467: PUSH
33468: LD_INT 11
33470: EQUAL
33471: IFFALSE 33492
// points := [ 30 , 10 , 5 ] ;
33473: LD_ADDR_VAR 0 9
33477: PUSH
33478: LD_INT 30
33480: PUSH
33481: LD_INT 10
33483: PUSH
33484: LD_INT 5
33486: PUSH
33487: EMPTY
33488: LIST
33489: LIST
33490: LIST
33491: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
33492: LD_VAR 0 1
33496: PPUSH
33497: LD_INT 5
33499: PPUSH
33500: CALL_OW 321
33504: PUSH
33505: LD_INT 2
33507: EQUAL
33508: IFFALSE 33525
// bpoints := bpoints * 1.8 ;
33510: LD_ADDR_VAR 0 10
33514: PUSH
33515: LD_VAR 0 10
33519: PUSH
33520: LD_REAL  1.80000000000000E+0000
33523: MUL
33524: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
33525: LD_VAR 0 6
33529: PPUSH
33530: CALL_OW 257
33534: PUSH
33535: LD_INT 1
33537: PUSH
33538: LD_INT 2
33540: PUSH
33541: LD_INT 3
33543: PUSH
33544: LD_INT 4
33546: PUSH
33547: EMPTY
33548: LIST
33549: LIST
33550: LIST
33551: LIST
33552: IN
33553: PUSH
33554: LD_VAR 0 1
33558: PPUSH
33559: LD_INT 51
33561: PPUSH
33562: CALL_OW 321
33566: PUSH
33567: LD_INT 2
33569: EQUAL
33570: AND
33571: IFFALSE 33588
// bpoints := bpoints * 1.2 ;
33573: LD_ADDR_VAR 0 10
33577: PUSH
33578: LD_VAR 0 10
33582: PUSH
33583: LD_REAL  1.20000000000000E+0000
33586: MUL
33587: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
33588: LD_VAR 0 6
33592: PPUSH
33593: CALL_OW 257
33597: PUSH
33598: LD_INT 5
33600: PUSH
33601: LD_INT 7
33603: PUSH
33604: LD_INT 9
33606: PUSH
33607: EMPTY
33608: LIST
33609: LIST
33610: LIST
33611: IN
33612: PUSH
33613: LD_VAR 0 1
33617: PPUSH
33618: LD_INT 52
33620: PPUSH
33621: CALL_OW 321
33625: PUSH
33626: LD_INT 2
33628: EQUAL
33629: AND
33630: IFFALSE 33647
// bpoints := bpoints * 1.5 ;
33632: LD_ADDR_VAR 0 10
33636: PUSH
33637: LD_VAR 0 10
33641: PUSH
33642: LD_REAL  1.50000000000000E+0000
33645: MUL
33646: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
33647: LD_VAR 0 1
33651: PPUSH
33652: LD_INT 66
33654: PPUSH
33655: CALL_OW 321
33659: PUSH
33660: LD_INT 2
33662: EQUAL
33663: IFFALSE 33680
// bpoints := bpoints * 1.1 ;
33665: LD_ADDR_VAR 0 10
33669: PUSH
33670: LD_VAR 0 10
33674: PUSH
33675: LD_REAL  1.10000000000000E+0000
33678: MUL
33679: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
33680: LD_ADDR_VAR 0 10
33684: PUSH
33685: LD_VAR 0 10
33689: PUSH
33690: LD_VAR 0 6
33694: PPUSH
33695: LD_INT 1
33697: PPUSH
33698: CALL_OW 259
33702: PUSH
33703: LD_REAL  1.15000000000000E+0000
33706: MUL
33707: MUL
33708: ST_TO_ADDR
// end ; unit_vehicle :
33709: GO 34539
33711: LD_INT 2
33713: DOUBLE
33714: EQUAL
33715: IFTRUE 33719
33717: GO 34527
33719: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
33720: LD_VAR 0 6
33724: PPUSH
33725: CALL_OW 264
33729: PUSH
33730: LD_INT 2
33732: PUSH
33733: LD_INT 42
33735: PUSH
33736: LD_INT 24
33738: PUSH
33739: EMPTY
33740: LIST
33741: LIST
33742: LIST
33743: IN
33744: IFFALSE 33765
// points := [ 25 , 5 , 3 ] ;
33746: LD_ADDR_VAR 0 9
33750: PUSH
33751: LD_INT 25
33753: PUSH
33754: LD_INT 5
33756: PUSH
33757: LD_INT 3
33759: PUSH
33760: EMPTY
33761: LIST
33762: LIST
33763: LIST
33764: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
33765: LD_VAR 0 6
33769: PPUSH
33770: CALL_OW 264
33774: PUSH
33775: LD_INT 4
33777: PUSH
33778: LD_INT 43
33780: PUSH
33781: LD_INT 25
33783: PUSH
33784: EMPTY
33785: LIST
33786: LIST
33787: LIST
33788: IN
33789: IFFALSE 33810
// points := [ 40 , 15 , 5 ] ;
33791: LD_ADDR_VAR 0 9
33795: PUSH
33796: LD_INT 40
33798: PUSH
33799: LD_INT 15
33801: PUSH
33802: LD_INT 5
33804: PUSH
33805: EMPTY
33806: LIST
33807: LIST
33808: LIST
33809: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
33810: LD_VAR 0 6
33814: PPUSH
33815: CALL_OW 264
33819: PUSH
33820: LD_INT 3
33822: PUSH
33823: LD_INT 23
33825: PUSH
33826: EMPTY
33827: LIST
33828: LIST
33829: IN
33830: IFFALSE 33851
// points := [ 7 , 25 , 8 ] ;
33832: LD_ADDR_VAR 0 9
33836: PUSH
33837: LD_INT 7
33839: PUSH
33840: LD_INT 25
33842: PUSH
33843: LD_INT 8
33845: PUSH
33846: EMPTY
33847: LIST
33848: LIST
33849: LIST
33850: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
33851: LD_VAR 0 6
33855: PPUSH
33856: CALL_OW 264
33860: PUSH
33861: LD_INT 5
33863: PUSH
33864: LD_INT 27
33866: PUSH
33867: LD_INT 44
33869: PUSH
33870: EMPTY
33871: LIST
33872: LIST
33873: LIST
33874: IN
33875: IFFALSE 33896
// points := [ 14 , 50 , 16 ] ;
33877: LD_ADDR_VAR 0 9
33881: PUSH
33882: LD_INT 14
33884: PUSH
33885: LD_INT 50
33887: PUSH
33888: LD_INT 16
33890: PUSH
33891: EMPTY
33892: LIST
33893: LIST
33894: LIST
33895: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
33896: LD_VAR 0 6
33900: PPUSH
33901: CALL_OW 264
33905: PUSH
33906: LD_INT 6
33908: PUSH
33909: LD_INT 46
33911: PUSH
33912: EMPTY
33913: LIST
33914: LIST
33915: IN
33916: IFFALSE 33937
// points := [ 32 , 120 , 70 ] ;
33918: LD_ADDR_VAR 0 9
33922: PUSH
33923: LD_INT 32
33925: PUSH
33926: LD_INT 120
33928: PUSH
33929: LD_INT 70
33931: PUSH
33932: EMPTY
33933: LIST
33934: LIST
33935: LIST
33936: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
33937: LD_VAR 0 6
33941: PPUSH
33942: CALL_OW 264
33946: PUSH
33947: LD_INT 7
33949: PUSH
33950: LD_INT 28
33952: PUSH
33953: LD_INT 45
33955: PUSH
33956: LD_EXP 34
33960: PUSH
33961: EMPTY
33962: LIST
33963: LIST
33964: LIST
33965: LIST
33966: IN
33967: IFFALSE 33988
// points := [ 35 , 20 , 45 ] ;
33969: LD_ADDR_VAR 0 9
33973: PUSH
33974: LD_INT 35
33976: PUSH
33977: LD_INT 20
33979: PUSH
33980: LD_INT 45
33982: PUSH
33983: EMPTY
33984: LIST
33985: LIST
33986: LIST
33987: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
33988: LD_VAR 0 6
33992: PPUSH
33993: CALL_OW 264
33997: PUSH
33998: LD_INT 47
34000: PUSH
34001: EMPTY
34002: LIST
34003: IN
34004: IFFALSE 34025
// points := [ 67 , 45 , 75 ] ;
34006: LD_ADDR_VAR 0 9
34010: PUSH
34011: LD_INT 67
34013: PUSH
34014: LD_INT 45
34016: PUSH
34017: LD_INT 75
34019: PUSH
34020: EMPTY
34021: LIST
34022: LIST
34023: LIST
34024: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
34025: LD_VAR 0 6
34029: PPUSH
34030: CALL_OW 264
34034: PUSH
34035: LD_INT 26
34037: PUSH
34038: EMPTY
34039: LIST
34040: IN
34041: IFFALSE 34062
// points := [ 120 , 30 , 80 ] ;
34043: LD_ADDR_VAR 0 9
34047: PUSH
34048: LD_INT 120
34050: PUSH
34051: LD_INT 30
34053: PUSH
34054: LD_INT 80
34056: PUSH
34057: EMPTY
34058: LIST
34059: LIST
34060: LIST
34061: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
34062: LD_VAR 0 6
34066: PPUSH
34067: CALL_OW 264
34071: PUSH
34072: LD_INT 22
34074: PUSH
34075: EMPTY
34076: LIST
34077: IN
34078: IFFALSE 34099
// points := [ 40 , 1 , 1 ] ;
34080: LD_ADDR_VAR 0 9
34084: PUSH
34085: LD_INT 40
34087: PUSH
34088: LD_INT 1
34090: PUSH
34091: LD_INT 1
34093: PUSH
34094: EMPTY
34095: LIST
34096: LIST
34097: LIST
34098: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
34099: LD_VAR 0 6
34103: PPUSH
34104: CALL_OW 264
34108: PUSH
34109: LD_INT 29
34111: PUSH
34112: EMPTY
34113: LIST
34114: IN
34115: IFFALSE 34136
// points := [ 70 , 200 , 400 ] ;
34117: LD_ADDR_VAR 0 9
34121: PUSH
34122: LD_INT 70
34124: PUSH
34125: LD_INT 200
34127: PUSH
34128: LD_INT 400
34130: PUSH
34131: EMPTY
34132: LIST
34133: LIST
34134: LIST
34135: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
34136: LD_VAR 0 6
34140: PPUSH
34141: CALL_OW 264
34145: PUSH
34146: LD_INT 14
34148: PUSH
34149: LD_INT 53
34151: PUSH
34152: EMPTY
34153: LIST
34154: LIST
34155: IN
34156: IFFALSE 34177
// points := [ 40 , 10 , 20 ] ;
34158: LD_ADDR_VAR 0 9
34162: PUSH
34163: LD_INT 40
34165: PUSH
34166: LD_INT 10
34168: PUSH
34169: LD_INT 20
34171: PUSH
34172: EMPTY
34173: LIST
34174: LIST
34175: LIST
34176: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
34177: LD_VAR 0 6
34181: PPUSH
34182: CALL_OW 264
34186: PUSH
34187: LD_INT 9
34189: PUSH
34190: EMPTY
34191: LIST
34192: IN
34193: IFFALSE 34214
// points := [ 5 , 70 , 20 ] ;
34195: LD_ADDR_VAR 0 9
34199: PUSH
34200: LD_INT 5
34202: PUSH
34203: LD_INT 70
34205: PUSH
34206: LD_INT 20
34208: PUSH
34209: EMPTY
34210: LIST
34211: LIST
34212: LIST
34213: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
34214: LD_VAR 0 6
34218: PPUSH
34219: CALL_OW 264
34223: PUSH
34224: LD_INT 10
34226: PUSH
34227: EMPTY
34228: LIST
34229: IN
34230: IFFALSE 34251
// points := [ 35 , 110 , 70 ] ;
34232: LD_ADDR_VAR 0 9
34236: PUSH
34237: LD_INT 35
34239: PUSH
34240: LD_INT 110
34242: PUSH
34243: LD_INT 70
34245: PUSH
34246: EMPTY
34247: LIST
34248: LIST
34249: LIST
34250: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
34251: LD_VAR 0 6
34255: PPUSH
34256: CALL_OW 265
34260: PUSH
34261: LD_INT 25
34263: EQUAL
34264: IFFALSE 34285
// points := [ 80 , 65 , 100 ] ;
34266: LD_ADDR_VAR 0 9
34270: PUSH
34271: LD_INT 80
34273: PUSH
34274: LD_INT 65
34276: PUSH
34277: LD_INT 100
34279: PUSH
34280: EMPTY
34281: LIST
34282: LIST
34283: LIST
34284: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
34285: LD_VAR 0 6
34289: PPUSH
34290: CALL_OW 263
34294: PUSH
34295: LD_INT 1
34297: EQUAL
34298: IFFALSE 34333
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
34300: LD_ADDR_VAR 0 10
34304: PUSH
34305: LD_VAR 0 10
34309: PUSH
34310: LD_VAR 0 6
34314: PPUSH
34315: CALL_OW 311
34319: PPUSH
34320: LD_INT 3
34322: PPUSH
34323: CALL_OW 259
34327: PUSH
34328: LD_INT 4
34330: MUL
34331: MUL
34332: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
34333: LD_VAR 0 6
34337: PPUSH
34338: CALL_OW 263
34342: PUSH
34343: LD_INT 2
34345: EQUAL
34346: IFFALSE 34397
// begin j := IsControledBy ( i ) ;
34348: LD_ADDR_VAR 0 7
34352: PUSH
34353: LD_VAR 0 6
34357: PPUSH
34358: CALL_OW 312
34362: ST_TO_ADDR
// if j then
34363: LD_VAR 0 7
34367: IFFALSE 34397
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
34369: LD_ADDR_VAR 0 10
34373: PUSH
34374: LD_VAR 0 10
34378: PUSH
34379: LD_VAR 0 7
34383: PPUSH
34384: LD_INT 3
34386: PPUSH
34387: CALL_OW 259
34391: PUSH
34392: LD_INT 3
34394: MUL
34395: MUL
34396: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
34397: LD_VAR 0 6
34401: PPUSH
34402: CALL_OW 264
34406: PUSH
34407: LD_INT 5
34409: PUSH
34410: LD_INT 6
34412: PUSH
34413: LD_INT 46
34415: PUSH
34416: LD_INT 44
34418: PUSH
34419: LD_INT 47
34421: PUSH
34422: LD_INT 45
34424: PUSH
34425: LD_INT 28
34427: PUSH
34428: LD_INT 7
34430: PUSH
34431: LD_INT 27
34433: PUSH
34434: LD_INT 29
34436: PUSH
34437: EMPTY
34438: LIST
34439: LIST
34440: LIST
34441: LIST
34442: LIST
34443: LIST
34444: LIST
34445: LIST
34446: LIST
34447: LIST
34448: IN
34449: PUSH
34450: LD_VAR 0 1
34454: PPUSH
34455: LD_INT 52
34457: PPUSH
34458: CALL_OW 321
34462: PUSH
34463: LD_INT 2
34465: EQUAL
34466: AND
34467: IFFALSE 34484
// bpoints := bpoints * 1.2 ;
34469: LD_ADDR_VAR 0 10
34473: PUSH
34474: LD_VAR 0 10
34478: PUSH
34479: LD_REAL  1.20000000000000E+0000
34482: MUL
34483: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
34484: LD_VAR 0 6
34488: PPUSH
34489: CALL_OW 264
34493: PUSH
34494: LD_INT 6
34496: PUSH
34497: LD_INT 46
34499: PUSH
34500: LD_INT 47
34502: PUSH
34503: EMPTY
34504: LIST
34505: LIST
34506: LIST
34507: IN
34508: IFFALSE 34525
// bpoints := bpoints * 1.2 ;
34510: LD_ADDR_VAR 0 10
34514: PUSH
34515: LD_VAR 0 10
34519: PUSH
34520: LD_REAL  1.20000000000000E+0000
34523: MUL
34524: ST_TO_ADDR
// end ; unit_building :
34525: GO 34539
34527: LD_INT 3
34529: DOUBLE
34530: EQUAL
34531: IFTRUE 34535
34533: GO 34538
34535: POP
// ; end ;
34536: GO 34539
34538: POP
// for j = 1 to 3 do
34539: LD_ADDR_VAR 0 7
34543: PUSH
34544: DOUBLE
34545: LD_INT 1
34547: DEC
34548: ST_TO_ADDR
34549: LD_INT 3
34551: PUSH
34552: FOR_TO
34553: IFFALSE 34606
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
34555: LD_ADDR_VAR 0 5
34559: PUSH
34560: LD_VAR 0 5
34564: PPUSH
34565: LD_VAR 0 7
34569: PPUSH
34570: LD_VAR 0 5
34574: PUSH
34575: LD_VAR 0 7
34579: ARRAY
34580: PUSH
34581: LD_VAR 0 9
34585: PUSH
34586: LD_VAR 0 7
34590: ARRAY
34591: PUSH
34592: LD_VAR 0 10
34596: MUL
34597: PLUS
34598: PPUSH
34599: CALL_OW 1
34603: ST_TO_ADDR
34604: GO 34552
34606: POP
34607: POP
// end ;
34608: GO 33085
34610: POP
34611: POP
// result := Replace ( result , 4 , tmp ) ;
34612: LD_ADDR_VAR 0 5
34616: PUSH
34617: LD_VAR 0 5
34621: PPUSH
34622: LD_INT 4
34624: PPUSH
34625: LD_VAR 0 8
34629: PPUSH
34630: CALL_OW 1
34634: ST_TO_ADDR
// end ;
34635: LD_VAR 0 5
34639: RET
// export function DangerAtRange ( unit , range ) ; begin
34640: LD_INT 0
34642: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
34643: LD_ADDR_VAR 0 3
34647: PUSH
34648: LD_VAR 0 1
34652: PPUSH
34653: CALL_OW 255
34657: PPUSH
34658: LD_VAR 0 1
34662: PPUSH
34663: CALL_OW 250
34667: PPUSH
34668: LD_VAR 0 1
34672: PPUSH
34673: CALL_OW 251
34677: PPUSH
34678: LD_VAR 0 2
34682: PPUSH
34683: CALL 32937 0 4
34687: ST_TO_ADDR
// end ;
34688: LD_VAR 0 3
34692: RET
// export function DangerInArea ( side , area ) ; begin
34693: LD_INT 0
34695: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
34696: LD_ADDR_VAR 0 3
34700: PUSH
34701: LD_VAR 0 2
34705: PPUSH
34706: LD_INT 81
34708: PUSH
34709: LD_VAR 0 1
34713: PUSH
34714: EMPTY
34715: LIST
34716: LIST
34717: PPUSH
34718: CALL_OW 70
34722: ST_TO_ADDR
// end ;
34723: LD_VAR 0 3
34727: RET
// export function IsExtension ( b ) ; begin
34728: LD_INT 0
34730: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
34731: LD_ADDR_VAR 0 2
34735: PUSH
34736: LD_VAR 0 1
34740: PUSH
34741: LD_INT 23
34743: PUSH
34744: LD_INT 20
34746: PUSH
34747: LD_INT 22
34749: PUSH
34750: LD_INT 17
34752: PUSH
34753: LD_INT 24
34755: PUSH
34756: LD_INT 21
34758: PUSH
34759: LD_INT 19
34761: PUSH
34762: LD_INT 16
34764: PUSH
34765: LD_INT 25
34767: PUSH
34768: LD_INT 18
34770: PUSH
34771: EMPTY
34772: LIST
34773: LIST
34774: LIST
34775: LIST
34776: LIST
34777: LIST
34778: LIST
34779: LIST
34780: LIST
34781: LIST
34782: IN
34783: ST_TO_ADDR
// end ;
34784: LD_VAR 0 2
34788: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
34789: LD_INT 0
34791: PPUSH
34792: PPUSH
34793: PPUSH
// result := [ ] ;
34794: LD_ADDR_VAR 0 4
34798: PUSH
34799: EMPTY
34800: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
34801: LD_ADDR_VAR 0 5
34805: PUSH
34806: LD_VAR 0 2
34810: PPUSH
34811: LD_INT 21
34813: PUSH
34814: LD_INT 3
34816: PUSH
34817: EMPTY
34818: LIST
34819: LIST
34820: PPUSH
34821: CALL_OW 70
34825: ST_TO_ADDR
// if not tmp then
34826: LD_VAR 0 5
34830: NOT
34831: IFFALSE 34835
// exit ;
34833: GO 34899
// if checkLink then
34835: LD_VAR 0 3
34839: IFFALSE 34889
// begin for i in tmp do
34841: LD_ADDR_VAR 0 6
34845: PUSH
34846: LD_VAR 0 5
34850: PUSH
34851: FOR_IN
34852: IFFALSE 34887
// if GetBase ( i ) <> base then
34854: LD_VAR 0 6
34858: PPUSH
34859: CALL_OW 274
34863: PUSH
34864: LD_VAR 0 1
34868: NONEQUAL
34869: IFFALSE 34885
// ComLinkToBase ( base , i ) ;
34871: LD_VAR 0 1
34875: PPUSH
34876: LD_VAR 0 6
34880: PPUSH
34881: CALL_OW 169
34885: GO 34851
34887: POP
34888: POP
// end ; result := tmp ;
34889: LD_ADDR_VAR 0 4
34893: PUSH
34894: LD_VAR 0 5
34898: ST_TO_ADDR
// end ;
34899: LD_VAR 0 4
34903: RET
// export function ComComplete ( units , b ) ; var i ; begin
34904: LD_INT 0
34906: PPUSH
34907: PPUSH
// if not units then
34908: LD_VAR 0 1
34912: NOT
34913: IFFALSE 34917
// exit ;
34915: GO 35007
// for i in units do
34917: LD_ADDR_VAR 0 4
34921: PUSH
34922: LD_VAR 0 1
34926: PUSH
34927: FOR_IN
34928: IFFALSE 35005
// if BuildingStatus ( b ) = bs_build then
34930: LD_VAR 0 2
34934: PPUSH
34935: CALL_OW 461
34939: PUSH
34940: LD_INT 1
34942: EQUAL
34943: IFFALSE 35003
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
34945: LD_VAR 0 4
34949: PPUSH
34950: LD_STRING h
34952: PUSH
34953: LD_VAR 0 2
34957: PPUSH
34958: CALL_OW 250
34962: PUSH
34963: LD_VAR 0 2
34967: PPUSH
34968: CALL_OW 251
34972: PUSH
34973: LD_VAR 0 2
34977: PUSH
34978: LD_INT 0
34980: PUSH
34981: LD_INT 0
34983: PUSH
34984: LD_INT 0
34986: PUSH
34987: EMPTY
34988: LIST
34989: LIST
34990: LIST
34991: LIST
34992: LIST
34993: LIST
34994: LIST
34995: PUSH
34996: EMPTY
34997: LIST
34998: PPUSH
34999: CALL_OW 446
35003: GO 34927
35005: POP
35006: POP
// end ;
35007: LD_VAR 0 3
35011: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
35012: LD_INT 0
35014: PPUSH
35015: PPUSH
35016: PPUSH
35017: PPUSH
35018: PPUSH
35019: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
35020: LD_VAR 0 1
35024: NOT
35025: PUSH
35026: LD_VAR 0 1
35030: PPUSH
35031: CALL_OW 263
35035: PUSH
35036: LD_INT 2
35038: NONEQUAL
35039: OR
35040: IFFALSE 35044
// exit ;
35042: GO 35360
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
35044: LD_ADDR_VAR 0 6
35048: PUSH
35049: LD_INT 22
35051: PUSH
35052: LD_VAR 0 1
35056: PPUSH
35057: CALL_OW 255
35061: PUSH
35062: EMPTY
35063: LIST
35064: LIST
35065: PUSH
35066: LD_INT 2
35068: PUSH
35069: LD_INT 30
35071: PUSH
35072: LD_INT 36
35074: PUSH
35075: EMPTY
35076: LIST
35077: LIST
35078: PUSH
35079: LD_INT 34
35081: PUSH
35082: LD_INT 31
35084: PUSH
35085: EMPTY
35086: LIST
35087: LIST
35088: PUSH
35089: EMPTY
35090: LIST
35091: LIST
35092: LIST
35093: PUSH
35094: EMPTY
35095: LIST
35096: LIST
35097: PPUSH
35098: CALL_OW 69
35102: ST_TO_ADDR
// if not tmp then
35103: LD_VAR 0 6
35107: NOT
35108: IFFALSE 35112
// exit ;
35110: GO 35360
// result := [ ] ;
35112: LD_ADDR_VAR 0 2
35116: PUSH
35117: EMPTY
35118: ST_TO_ADDR
// for i in tmp do
35119: LD_ADDR_VAR 0 3
35123: PUSH
35124: LD_VAR 0 6
35128: PUSH
35129: FOR_IN
35130: IFFALSE 35201
// begin t := UnitsInside ( i ) ;
35132: LD_ADDR_VAR 0 4
35136: PUSH
35137: LD_VAR 0 3
35141: PPUSH
35142: CALL_OW 313
35146: ST_TO_ADDR
// if t then
35147: LD_VAR 0 4
35151: IFFALSE 35199
// for j in t do
35153: LD_ADDR_VAR 0 7
35157: PUSH
35158: LD_VAR 0 4
35162: PUSH
35163: FOR_IN
35164: IFFALSE 35197
// result := Replace ( result , result + 1 , j ) ;
35166: LD_ADDR_VAR 0 2
35170: PUSH
35171: LD_VAR 0 2
35175: PPUSH
35176: LD_VAR 0 2
35180: PUSH
35181: LD_INT 1
35183: PLUS
35184: PPUSH
35185: LD_VAR 0 7
35189: PPUSH
35190: CALL_OW 1
35194: ST_TO_ADDR
35195: GO 35163
35197: POP
35198: POP
// end ;
35199: GO 35129
35201: POP
35202: POP
// if not result then
35203: LD_VAR 0 2
35207: NOT
35208: IFFALSE 35212
// exit ;
35210: GO 35360
// mech := result [ 1 ] ;
35212: LD_ADDR_VAR 0 5
35216: PUSH
35217: LD_VAR 0 2
35221: PUSH
35222: LD_INT 1
35224: ARRAY
35225: ST_TO_ADDR
// if result > 1 then
35226: LD_VAR 0 2
35230: PUSH
35231: LD_INT 1
35233: GREATER
35234: IFFALSE 35346
// begin for i = 2 to result do
35236: LD_ADDR_VAR 0 3
35240: PUSH
35241: DOUBLE
35242: LD_INT 2
35244: DEC
35245: ST_TO_ADDR
35246: LD_VAR 0 2
35250: PUSH
35251: FOR_TO
35252: IFFALSE 35344
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
35254: LD_ADDR_VAR 0 4
35258: PUSH
35259: LD_VAR 0 2
35263: PUSH
35264: LD_VAR 0 3
35268: ARRAY
35269: PPUSH
35270: LD_INT 3
35272: PPUSH
35273: CALL_OW 259
35277: PUSH
35278: LD_VAR 0 2
35282: PUSH
35283: LD_VAR 0 3
35287: ARRAY
35288: PPUSH
35289: CALL_OW 432
35293: MINUS
35294: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
35295: LD_VAR 0 4
35299: PUSH
35300: LD_VAR 0 5
35304: PPUSH
35305: LD_INT 3
35307: PPUSH
35308: CALL_OW 259
35312: PUSH
35313: LD_VAR 0 5
35317: PPUSH
35318: CALL_OW 432
35322: MINUS
35323: GREATEREQUAL
35324: IFFALSE 35342
// mech := result [ i ] ;
35326: LD_ADDR_VAR 0 5
35330: PUSH
35331: LD_VAR 0 2
35335: PUSH
35336: LD_VAR 0 3
35340: ARRAY
35341: ST_TO_ADDR
// end ;
35342: GO 35251
35344: POP
35345: POP
// end ; ComLinkTo ( vehicle , mech ) ;
35346: LD_VAR 0 1
35350: PPUSH
35351: LD_VAR 0 5
35355: PPUSH
35356: CALL_OW 135
// end ;
35360: LD_VAR 0 2
35364: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
35365: LD_INT 0
35367: PPUSH
35368: PPUSH
35369: PPUSH
35370: PPUSH
35371: PPUSH
35372: PPUSH
35373: PPUSH
35374: PPUSH
35375: PPUSH
35376: PPUSH
35377: PPUSH
35378: PPUSH
35379: PPUSH
// result := [ ] ;
35380: LD_ADDR_VAR 0 7
35384: PUSH
35385: EMPTY
35386: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
35387: LD_VAR 0 1
35391: PPUSH
35392: CALL_OW 266
35396: PUSH
35397: LD_INT 0
35399: PUSH
35400: LD_INT 1
35402: PUSH
35403: EMPTY
35404: LIST
35405: LIST
35406: IN
35407: NOT
35408: IFFALSE 35412
// exit ;
35410: GO 37046
// if name then
35412: LD_VAR 0 3
35416: IFFALSE 35432
// SetBName ( base_dep , name ) ;
35418: LD_VAR 0 1
35422: PPUSH
35423: LD_VAR 0 3
35427: PPUSH
35428: CALL_OW 500
// base := GetBase ( base_dep ) ;
35432: LD_ADDR_VAR 0 15
35436: PUSH
35437: LD_VAR 0 1
35441: PPUSH
35442: CALL_OW 274
35446: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
35447: LD_ADDR_VAR 0 16
35451: PUSH
35452: LD_VAR 0 1
35456: PPUSH
35457: CALL_OW 255
35461: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
35462: LD_ADDR_VAR 0 17
35466: PUSH
35467: LD_VAR 0 1
35471: PPUSH
35472: CALL_OW 248
35476: ST_TO_ADDR
// if sources then
35477: LD_VAR 0 5
35481: IFFALSE 35528
// for i = 1 to 3 do
35483: LD_ADDR_VAR 0 8
35487: PUSH
35488: DOUBLE
35489: LD_INT 1
35491: DEC
35492: ST_TO_ADDR
35493: LD_INT 3
35495: PUSH
35496: FOR_TO
35497: IFFALSE 35526
// AddResourceType ( base , i , sources [ i ] ) ;
35499: LD_VAR 0 15
35503: PPUSH
35504: LD_VAR 0 8
35508: PPUSH
35509: LD_VAR 0 5
35513: PUSH
35514: LD_VAR 0 8
35518: ARRAY
35519: PPUSH
35520: CALL_OW 276
35524: GO 35496
35526: POP
35527: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
35528: LD_ADDR_VAR 0 18
35532: PUSH
35533: LD_VAR 0 15
35537: PPUSH
35538: LD_VAR 0 2
35542: PPUSH
35543: LD_INT 1
35545: PPUSH
35546: CALL 34789 0 3
35550: ST_TO_ADDR
// InitHc ;
35551: CALL_OW 19
// InitUc ;
35555: CALL_OW 18
// uc_side := side ;
35559: LD_ADDR_OWVAR 20
35563: PUSH
35564: LD_VAR 0 16
35568: ST_TO_ADDR
// uc_nation := nation ;
35569: LD_ADDR_OWVAR 21
35573: PUSH
35574: LD_VAR 0 17
35578: ST_TO_ADDR
// if buildings then
35579: LD_VAR 0 18
35583: IFFALSE 36905
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
35585: LD_ADDR_VAR 0 19
35589: PUSH
35590: LD_VAR 0 18
35594: PPUSH
35595: LD_INT 2
35597: PUSH
35598: LD_INT 30
35600: PUSH
35601: LD_INT 29
35603: PUSH
35604: EMPTY
35605: LIST
35606: LIST
35607: PUSH
35608: LD_INT 30
35610: PUSH
35611: LD_INT 30
35613: PUSH
35614: EMPTY
35615: LIST
35616: LIST
35617: PUSH
35618: EMPTY
35619: LIST
35620: LIST
35621: LIST
35622: PPUSH
35623: CALL_OW 72
35627: ST_TO_ADDR
// if tmp then
35628: LD_VAR 0 19
35632: IFFALSE 35680
// for i in tmp do
35634: LD_ADDR_VAR 0 8
35638: PUSH
35639: LD_VAR 0 19
35643: PUSH
35644: FOR_IN
35645: IFFALSE 35678
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
35647: LD_VAR 0 8
35651: PPUSH
35652: CALL_OW 250
35656: PPUSH
35657: LD_VAR 0 8
35661: PPUSH
35662: CALL_OW 251
35666: PPUSH
35667: LD_VAR 0 16
35671: PPUSH
35672: CALL_OW 441
35676: GO 35644
35678: POP
35679: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
35680: LD_VAR 0 18
35684: PPUSH
35685: LD_INT 2
35687: PUSH
35688: LD_INT 30
35690: PUSH
35691: LD_INT 32
35693: PUSH
35694: EMPTY
35695: LIST
35696: LIST
35697: PUSH
35698: LD_INT 30
35700: PUSH
35701: LD_INT 33
35703: PUSH
35704: EMPTY
35705: LIST
35706: LIST
35707: PUSH
35708: EMPTY
35709: LIST
35710: LIST
35711: LIST
35712: PPUSH
35713: CALL_OW 72
35717: IFFALSE 35805
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
35719: LD_ADDR_VAR 0 8
35723: PUSH
35724: LD_VAR 0 18
35728: PPUSH
35729: LD_INT 2
35731: PUSH
35732: LD_INT 30
35734: PUSH
35735: LD_INT 32
35737: PUSH
35738: EMPTY
35739: LIST
35740: LIST
35741: PUSH
35742: LD_INT 30
35744: PUSH
35745: LD_INT 33
35747: PUSH
35748: EMPTY
35749: LIST
35750: LIST
35751: PUSH
35752: EMPTY
35753: LIST
35754: LIST
35755: LIST
35756: PPUSH
35757: CALL_OW 72
35761: PUSH
35762: FOR_IN
35763: IFFALSE 35803
// begin if not GetBWeapon ( i ) then
35765: LD_VAR 0 8
35769: PPUSH
35770: CALL_OW 269
35774: NOT
35775: IFFALSE 35801
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
35777: LD_VAR 0 8
35781: PPUSH
35782: LD_VAR 0 8
35786: PPUSH
35787: LD_VAR 0 2
35791: PPUSH
35792: CALL 37051 0 2
35796: PPUSH
35797: CALL_OW 431
// end ;
35801: GO 35762
35803: POP
35804: POP
// end ; for i = 1 to personel do
35805: LD_ADDR_VAR 0 8
35809: PUSH
35810: DOUBLE
35811: LD_INT 1
35813: DEC
35814: ST_TO_ADDR
35815: LD_VAR 0 6
35819: PUSH
35820: FOR_TO
35821: IFFALSE 36885
// begin if i > 4 then
35823: LD_VAR 0 8
35827: PUSH
35828: LD_INT 4
35830: GREATER
35831: IFFALSE 35835
// break ;
35833: GO 36885
// case i of 1 :
35835: LD_VAR 0 8
35839: PUSH
35840: LD_INT 1
35842: DOUBLE
35843: EQUAL
35844: IFTRUE 35848
35846: GO 35928
35848: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
35849: LD_ADDR_VAR 0 12
35853: PUSH
35854: LD_VAR 0 18
35858: PPUSH
35859: LD_INT 22
35861: PUSH
35862: LD_VAR 0 16
35866: PUSH
35867: EMPTY
35868: LIST
35869: LIST
35870: PUSH
35871: LD_INT 58
35873: PUSH
35874: EMPTY
35875: LIST
35876: PUSH
35877: LD_INT 2
35879: PUSH
35880: LD_INT 30
35882: PUSH
35883: LD_INT 32
35885: PUSH
35886: EMPTY
35887: LIST
35888: LIST
35889: PUSH
35890: LD_INT 30
35892: PUSH
35893: LD_INT 4
35895: PUSH
35896: EMPTY
35897: LIST
35898: LIST
35899: PUSH
35900: LD_INT 30
35902: PUSH
35903: LD_INT 5
35905: PUSH
35906: EMPTY
35907: LIST
35908: LIST
35909: PUSH
35910: EMPTY
35911: LIST
35912: LIST
35913: LIST
35914: LIST
35915: PUSH
35916: EMPTY
35917: LIST
35918: LIST
35919: LIST
35920: PPUSH
35921: CALL_OW 72
35925: ST_TO_ADDR
35926: GO 36150
35928: LD_INT 2
35930: DOUBLE
35931: EQUAL
35932: IFTRUE 35936
35934: GO 35998
35936: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
35937: LD_ADDR_VAR 0 12
35941: PUSH
35942: LD_VAR 0 18
35946: PPUSH
35947: LD_INT 22
35949: PUSH
35950: LD_VAR 0 16
35954: PUSH
35955: EMPTY
35956: LIST
35957: LIST
35958: PUSH
35959: LD_INT 2
35961: PUSH
35962: LD_INT 30
35964: PUSH
35965: LD_INT 0
35967: PUSH
35968: EMPTY
35969: LIST
35970: LIST
35971: PUSH
35972: LD_INT 30
35974: PUSH
35975: LD_INT 1
35977: PUSH
35978: EMPTY
35979: LIST
35980: LIST
35981: PUSH
35982: EMPTY
35983: LIST
35984: LIST
35985: LIST
35986: PUSH
35987: EMPTY
35988: LIST
35989: LIST
35990: PPUSH
35991: CALL_OW 72
35995: ST_TO_ADDR
35996: GO 36150
35998: LD_INT 3
36000: DOUBLE
36001: EQUAL
36002: IFTRUE 36006
36004: GO 36068
36006: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
36007: LD_ADDR_VAR 0 12
36011: PUSH
36012: LD_VAR 0 18
36016: PPUSH
36017: LD_INT 22
36019: PUSH
36020: LD_VAR 0 16
36024: PUSH
36025: EMPTY
36026: LIST
36027: LIST
36028: PUSH
36029: LD_INT 2
36031: PUSH
36032: LD_INT 30
36034: PUSH
36035: LD_INT 2
36037: PUSH
36038: EMPTY
36039: LIST
36040: LIST
36041: PUSH
36042: LD_INT 30
36044: PUSH
36045: LD_INT 3
36047: PUSH
36048: EMPTY
36049: LIST
36050: LIST
36051: PUSH
36052: EMPTY
36053: LIST
36054: LIST
36055: LIST
36056: PUSH
36057: EMPTY
36058: LIST
36059: LIST
36060: PPUSH
36061: CALL_OW 72
36065: ST_TO_ADDR
36066: GO 36150
36068: LD_INT 4
36070: DOUBLE
36071: EQUAL
36072: IFTRUE 36076
36074: GO 36149
36076: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
36077: LD_ADDR_VAR 0 12
36081: PUSH
36082: LD_VAR 0 18
36086: PPUSH
36087: LD_INT 22
36089: PUSH
36090: LD_VAR 0 16
36094: PUSH
36095: EMPTY
36096: LIST
36097: LIST
36098: PUSH
36099: LD_INT 2
36101: PUSH
36102: LD_INT 30
36104: PUSH
36105: LD_INT 6
36107: PUSH
36108: EMPTY
36109: LIST
36110: LIST
36111: PUSH
36112: LD_INT 30
36114: PUSH
36115: LD_INT 7
36117: PUSH
36118: EMPTY
36119: LIST
36120: LIST
36121: PUSH
36122: LD_INT 30
36124: PUSH
36125: LD_INT 8
36127: PUSH
36128: EMPTY
36129: LIST
36130: LIST
36131: PUSH
36132: EMPTY
36133: LIST
36134: LIST
36135: LIST
36136: LIST
36137: PUSH
36138: EMPTY
36139: LIST
36140: LIST
36141: PPUSH
36142: CALL_OW 72
36146: ST_TO_ADDR
36147: GO 36150
36149: POP
// if i = 1 then
36150: LD_VAR 0 8
36154: PUSH
36155: LD_INT 1
36157: EQUAL
36158: IFFALSE 36269
// begin tmp := [ ] ;
36160: LD_ADDR_VAR 0 19
36164: PUSH
36165: EMPTY
36166: ST_TO_ADDR
// for j in f do
36167: LD_ADDR_VAR 0 9
36171: PUSH
36172: LD_VAR 0 12
36176: PUSH
36177: FOR_IN
36178: IFFALSE 36251
// if GetBType ( j ) = b_bunker then
36180: LD_VAR 0 9
36184: PPUSH
36185: CALL_OW 266
36189: PUSH
36190: LD_INT 32
36192: EQUAL
36193: IFFALSE 36220
// tmp := Insert ( tmp , 1 , j ) else
36195: LD_ADDR_VAR 0 19
36199: PUSH
36200: LD_VAR 0 19
36204: PPUSH
36205: LD_INT 1
36207: PPUSH
36208: LD_VAR 0 9
36212: PPUSH
36213: CALL_OW 2
36217: ST_TO_ADDR
36218: GO 36249
// tmp := Insert ( tmp , tmp + 1 , j ) ;
36220: LD_ADDR_VAR 0 19
36224: PUSH
36225: LD_VAR 0 19
36229: PPUSH
36230: LD_VAR 0 19
36234: PUSH
36235: LD_INT 1
36237: PLUS
36238: PPUSH
36239: LD_VAR 0 9
36243: PPUSH
36244: CALL_OW 2
36248: ST_TO_ADDR
36249: GO 36177
36251: POP
36252: POP
// if tmp then
36253: LD_VAR 0 19
36257: IFFALSE 36269
// f := tmp ;
36259: LD_ADDR_VAR 0 12
36263: PUSH
36264: LD_VAR 0 19
36268: ST_TO_ADDR
// end ; x := personel [ i ] ;
36269: LD_ADDR_VAR 0 13
36273: PUSH
36274: LD_VAR 0 6
36278: PUSH
36279: LD_VAR 0 8
36283: ARRAY
36284: ST_TO_ADDR
// if x = - 1 then
36285: LD_VAR 0 13
36289: PUSH
36290: LD_INT 1
36292: NEG
36293: EQUAL
36294: IFFALSE 36503
// begin for j in f do
36296: LD_ADDR_VAR 0 9
36300: PUSH
36301: LD_VAR 0 12
36305: PUSH
36306: FOR_IN
36307: IFFALSE 36499
// repeat InitHc ;
36309: CALL_OW 19
// if GetBType ( j ) = b_barracks then
36313: LD_VAR 0 9
36317: PPUSH
36318: CALL_OW 266
36322: PUSH
36323: LD_INT 5
36325: EQUAL
36326: IFFALSE 36396
// begin if UnitsInside ( j ) < 3 then
36328: LD_VAR 0 9
36332: PPUSH
36333: CALL_OW 313
36337: PUSH
36338: LD_INT 3
36340: LESS
36341: IFFALSE 36377
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
36343: LD_INT 0
36345: PPUSH
36346: LD_INT 5
36348: PUSH
36349: LD_INT 8
36351: PUSH
36352: LD_INT 9
36354: PUSH
36355: EMPTY
36356: LIST
36357: LIST
36358: LIST
36359: PUSH
36360: LD_VAR 0 17
36364: ARRAY
36365: PPUSH
36366: LD_VAR 0 4
36370: PPUSH
36371: CALL_OW 380
36375: GO 36394
// PrepareHuman ( false , i , skill ) ;
36377: LD_INT 0
36379: PPUSH
36380: LD_VAR 0 8
36384: PPUSH
36385: LD_VAR 0 4
36389: PPUSH
36390: CALL_OW 380
// end else
36394: GO 36413
// PrepareHuman ( false , i , skill ) ;
36396: LD_INT 0
36398: PPUSH
36399: LD_VAR 0 8
36403: PPUSH
36404: LD_VAR 0 4
36408: PPUSH
36409: CALL_OW 380
// un := CreateHuman ;
36413: LD_ADDR_VAR 0 14
36417: PUSH
36418: CALL_OW 44
36422: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
36423: LD_ADDR_VAR 0 7
36427: PUSH
36428: LD_VAR 0 7
36432: PPUSH
36433: LD_INT 1
36435: PPUSH
36436: LD_VAR 0 14
36440: PPUSH
36441: CALL_OW 2
36445: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
36446: LD_VAR 0 14
36450: PPUSH
36451: LD_VAR 0 9
36455: PPUSH
36456: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
36460: LD_VAR 0 9
36464: PPUSH
36465: CALL_OW 313
36469: PUSH
36470: LD_INT 6
36472: EQUAL
36473: PUSH
36474: LD_VAR 0 9
36478: PPUSH
36479: CALL_OW 266
36483: PUSH
36484: LD_INT 32
36486: PUSH
36487: LD_INT 31
36489: PUSH
36490: EMPTY
36491: LIST
36492: LIST
36493: IN
36494: OR
36495: IFFALSE 36309
36497: GO 36306
36499: POP
36500: POP
// end else
36501: GO 36883
// for j = 1 to x do
36503: LD_ADDR_VAR 0 9
36507: PUSH
36508: DOUBLE
36509: LD_INT 1
36511: DEC
36512: ST_TO_ADDR
36513: LD_VAR 0 13
36517: PUSH
36518: FOR_TO
36519: IFFALSE 36881
// begin InitHc ;
36521: CALL_OW 19
// if not f then
36525: LD_VAR 0 12
36529: NOT
36530: IFFALSE 36619
// begin PrepareHuman ( false , i , skill ) ;
36532: LD_INT 0
36534: PPUSH
36535: LD_VAR 0 8
36539: PPUSH
36540: LD_VAR 0 4
36544: PPUSH
36545: CALL_OW 380
// un := CreateHuman ;
36549: LD_ADDR_VAR 0 14
36553: PUSH
36554: CALL_OW 44
36558: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
36559: LD_ADDR_VAR 0 7
36563: PUSH
36564: LD_VAR 0 7
36568: PPUSH
36569: LD_INT 1
36571: PPUSH
36572: LD_VAR 0 14
36576: PPUSH
36577: CALL_OW 2
36581: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
36582: LD_VAR 0 14
36586: PPUSH
36587: LD_VAR 0 1
36591: PPUSH
36592: CALL_OW 250
36596: PPUSH
36597: LD_VAR 0 1
36601: PPUSH
36602: CALL_OW 251
36606: PPUSH
36607: LD_INT 10
36609: PPUSH
36610: LD_INT 0
36612: PPUSH
36613: CALL_OW 50
// continue ;
36617: GO 36518
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
36619: LD_VAR 0 12
36623: PUSH
36624: LD_INT 1
36626: ARRAY
36627: PPUSH
36628: CALL_OW 313
36632: PUSH
36633: LD_VAR 0 12
36637: PUSH
36638: LD_INT 1
36640: ARRAY
36641: PPUSH
36642: CALL_OW 266
36646: PUSH
36647: LD_INT 32
36649: PUSH
36650: LD_INT 31
36652: PUSH
36653: EMPTY
36654: LIST
36655: LIST
36656: IN
36657: AND
36658: PUSH
36659: LD_VAR 0 12
36663: PUSH
36664: LD_INT 1
36666: ARRAY
36667: PPUSH
36668: CALL_OW 313
36672: PUSH
36673: LD_INT 6
36675: EQUAL
36676: OR
36677: IFFALSE 36697
// f := Delete ( f , 1 ) ;
36679: LD_ADDR_VAR 0 12
36683: PUSH
36684: LD_VAR 0 12
36688: PPUSH
36689: LD_INT 1
36691: PPUSH
36692: CALL_OW 3
36696: ST_TO_ADDR
// if not f then
36697: LD_VAR 0 12
36701: NOT
36702: IFFALSE 36720
// begin x := x + 2 ;
36704: LD_ADDR_VAR 0 13
36708: PUSH
36709: LD_VAR 0 13
36713: PUSH
36714: LD_INT 2
36716: PLUS
36717: ST_TO_ADDR
// continue ;
36718: GO 36518
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
36720: LD_VAR 0 12
36724: PUSH
36725: LD_INT 1
36727: ARRAY
36728: PPUSH
36729: CALL_OW 266
36733: PUSH
36734: LD_INT 5
36736: EQUAL
36737: IFFALSE 36811
// begin if UnitsInside ( f [ 1 ] ) < 3 then
36739: LD_VAR 0 12
36743: PUSH
36744: LD_INT 1
36746: ARRAY
36747: PPUSH
36748: CALL_OW 313
36752: PUSH
36753: LD_INT 3
36755: LESS
36756: IFFALSE 36792
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
36758: LD_INT 0
36760: PPUSH
36761: LD_INT 5
36763: PUSH
36764: LD_INT 8
36766: PUSH
36767: LD_INT 9
36769: PUSH
36770: EMPTY
36771: LIST
36772: LIST
36773: LIST
36774: PUSH
36775: LD_VAR 0 17
36779: ARRAY
36780: PPUSH
36781: LD_VAR 0 4
36785: PPUSH
36786: CALL_OW 380
36790: GO 36809
// PrepareHuman ( false , i , skill ) ;
36792: LD_INT 0
36794: PPUSH
36795: LD_VAR 0 8
36799: PPUSH
36800: LD_VAR 0 4
36804: PPUSH
36805: CALL_OW 380
// end else
36809: GO 36828
// PrepareHuman ( false , i , skill ) ;
36811: LD_INT 0
36813: PPUSH
36814: LD_VAR 0 8
36818: PPUSH
36819: LD_VAR 0 4
36823: PPUSH
36824: CALL_OW 380
// un := CreateHuman ;
36828: LD_ADDR_VAR 0 14
36832: PUSH
36833: CALL_OW 44
36837: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
36838: LD_ADDR_VAR 0 7
36842: PUSH
36843: LD_VAR 0 7
36847: PPUSH
36848: LD_INT 1
36850: PPUSH
36851: LD_VAR 0 14
36855: PPUSH
36856: CALL_OW 2
36860: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
36861: LD_VAR 0 14
36865: PPUSH
36866: LD_VAR 0 12
36870: PUSH
36871: LD_INT 1
36873: ARRAY
36874: PPUSH
36875: CALL_OW 52
// end ;
36879: GO 36518
36881: POP
36882: POP
// end ;
36883: GO 35820
36885: POP
36886: POP
// result := result ^ buildings ;
36887: LD_ADDR_VAR 0 7
36891: PUSH
36892: LD_VAR 0 7
36896: PUSH
36897: LD_VAR 0 18
36901: ADD
36902: ST_TO_ADDR
// end else
36903: GO 37046
// begin for i = 1 to personel do
36905: LD_ADDR_VAR 0 8
36909: PUSH
36910: DOUBLE
36911: LD_INT 1
36913: DEC
36914: ST_TO_ADDR
36915: LD_VAR 0 6
36919: PUSH
36920: FOR_TO
36921: IFFALSE 37044
// begin if i > 4 then
36923: LD_VAR 0 8
36927: PUSH
36928: LD_INT 4
36930: GREATER
36931: IFFALSE 36935
// break ;
36933: GO 37044
// x := personel [ i ] ;
36935: LD_ADDR_VAR 0 13
36939: PUSH
36940: LD_VAR 0 6
36944: PUSH
36945: LD_VAR 0 8
36949: ARRAY
36950: ST_TO_ADDR
// if x = - 1 then
36951: LD_VAR 0 13
36955: PUSH
36956: LD_INT 1
36958: NEG
36959: EQUAL
36960: IFFALSE 36964
// continue ;
36962: GO 36920
// PrepareHuman ( false , i , skill ) ;
36964: LD_INT 0
36966: PPUSH
36967: LD_VAR 0 8
36971: PPUSH
36972: LD_VAR 0 4
36976: PPUSH
36977: CALL_OW 380
// un := CreateHuman ;
36981: LD_ADDR_VAR 0 14
36985: PUSH
36986: CALL_OW 44
36990: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
36991: LD_VAR 0 14
36995: PPUSH
36996: LD_VAR 0 1
37000: PPUSH
37001: CALL_OW 250
37005: PPUSH
37006: LD_VAR 0 1
37010: PPUSH
37011: CALL_OW 251
37015: PPUSH
37016: LD_INT 10
37018: PPUSH
37019: LD_INT 0
37021: PPUSH
37022: CALL_OW 50
// result := result ^ un ;
37026: LD_ADDR_VAR 0 7
37030: PUSH
37031: LD_VAR 0 7
37035: PUSH
37036: LD_VAR 0 14
37040: ADD
37041: ST_TO_ADDR
// end ;
37042: GO 36920
37044: POP
37045: POP
// end ; end ;
37046: LD_VAR 0 7
37050: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
37051: LD_INT 0
37053: PPUSH
37054: PPUSH
37055: PPUSH
37056: PPUSH
37057: PPUSH
37058: PPUSH
37059: PPUSH
37060: PPUSH
37061: PPUSH
37062: PPUSH
37063: PPUSH
37064: PPUSH
37065: PPUSH
37066: PPUSH
37067: PPUSH
37068: PPUSH
// result := false ;
37069: LD_ADDR_VAR 0 3
37073: PUSH
37074: LD_INT 0
37076: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
37077: LD_VAR 0 1
37081: NOT
37082: PUSH
37083: LD_VAR 0 1
37087: PPUSH
37088: CALL_OW 266
37092: PUSH
37093: LD_INT 32
37095: PUSH
37096: LD_INT 33
37098: PUSH
37099: EMPTY
37100: LIST
37101: LIST
37102: IN
37103: NOT
37104: OR
37105: IFFALSE 37109
// exit ;
37107: GO 38218
// nat := GetNation ( tower ) ;
37109: LD_ADDR_VAR 0 12
37113: PUSH
37114: LD_VAR 0 1
37118: PPUSH
37119: CALL_OW 248
37123: ST_TO_ADDR
// side := GetSide ( tower ) ;
37124: LD_ADDR_VAR 0 16
37128: PUSH
37129: LD_VAR 0 1
37133: PPUSH
37134: CALL_OW 255
37138: ST_TO_ADDR
// x := GetX ( tower ) ;
37139: LD_ADDR_VAR 0 10
37143: PUSH
37144: LD_VAR 0 1
37148: PPUSH
37149: CALL_OW 250
37153: ST_TO_ADDR
// y := GetY ( tower ) ;
37154: LD_ADDR_VAR 0 11
37158: PUSH
37159: LD_VAR 0 1
37163: PPUSH
37164: CALL_OW 251
37168: ST_TO_ADDR
// if not x or not y then
37169: LD_VAR 0 10
37173: NOT
37174: PUSH
37175: LD_VAR 0 11
37179: NOT
37180: OR
37181: IFFALSE 37185
// exit ;
37183: GO 38218
// weapon := 0 ;
37185: LD_ADDR_VAR 0 18
37189: PUSH
37190: LD_INT 0
37192: ST_TO_ADDR
// fac_list := [ ] ;
37193: LD_ADDR_VAR 0 17
37197: PUSH
37198: EMPTY
37199: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
37200: LD_ADDR_VAR 0 6
37204: PUSH
37205: LD_VAR 0 1
37209: PPUSH
37210: CALL_OW 274
37214: PPUSH
37215: LD_VAR 0 2
37219: PPUSH
37220: LD_INT 0
37222: PPUSH
37223: CALL 34789 0 3
37227: PPUSH
37228: LD_INT 30
37230: PUSH
37231: LD_INT 3
37233: PUSH
37234: EMPTY
37235: LIST
37236: LIST
37237: PPUSH
37238: CALL_OW 72
37242: ST_TO_ADDR
// if not factories then
37243: LD_VAR 0 6
37247: NOT
37248: IFFALSE 37252
// exit ;
37250: GO 38218
// for i in factories do
37252: LD_ADDR_VAR 0 8
37256: PUSH
37257: LD_VAR 0 6
37261: PUSH
37262: FOR_IN
37263: IFFALSE 37288
// fac_list := fac_list union AvailableWeaponList ( i ) ;
37265: LD_ADDR_VAR 0 17
37269: PUSH
37270: LD_VAR 0 17
37274: PUSH
37275: LD_VAR 0 8
37279: PPUSH
37280: CALL_OW 478
37284: UNION
37285: ST_TO_ADDR
37286: GO 37262
37288: POP
37289: POP
// if not fac_list then
37290: LD_VAR 0 17
37294: NOT
37295: IFFALSE 37299
// exit ;
37297: GO 38218
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
37299: LD_ADDR_VAR 0 5
37303: PUSH
37304: LD_INT 4
37306: PUSH
37307: LD_INT 5
37309: PUSH
37310: LD_INT 9
37312: PUSH
37313: LD_INT 10
37315: PUSH
37316: LD_INT 6
37318: PUSH
37319: LD_INT 7
37321: PUSH
37322: LD_INT 11
37324: PUSH
37325: EMPTY
37326: LIST
37327: LIST
37328: LIST
37329: LIST
37330: LIST
37331: LIST
37332: LIST
37333: PUSH
37334: LD_INT 27
37336: PUSH
37337: LD_INT 28
37339: PUSH
37340: LD_INT 26
37342: PUSH
37343: LD_INT 30
37345: PUSH
37346: EMPTY
37347: LIST
37348: LIST
37349: LIST
37350: LIST
37351: PUSH
37352: LD_INT 43
37354: PUSH
37355: LD_INT 44
37357: PUSH
37358: LD_INT 46
37360: PUSH
37361: LD_INT 45
37363: PUSH
37364: LD_INT 47
37366: PUSH
37367: LD_INT 49
37369: PUSH
37370: EMPTY
37371: LIST
37372: LIST
37373: LIST
37374: LIST
37375: LIST
37376: LIST
37377: PUSH
37378: EMPTY
37379: LIST
37380: LIST
37381: LIST
37382: PUSH
37383: LD_VAR 0 12
37387: ARRAY
37388: ST_TO_ADDR
// list := list isect fac_list ;
37389: LD_ADDR_VAR 0 5
37393: PUSH
37394: LD_VAR 0 5
37398: PUSH
37399: LD_VAR 0 17
37403: ISECT
37404: ST_TO_ADDR
// if not list then
37405: LD_VAR 0 5
37409: NOT
37410: IFFALSE 37414
// exit ;
37412: GO 38218
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
37414: LD_VAR 0 12
37418: PUSH
37419: LD_INT 3
37421: EQUAL
37422: PUSH
37423: LD_INT 49
37425: PUSH
37426: LD_VAR 0 5
37430: IN
37431: AND
37432: PUSH
37433: LD_INT 31
37435: PPUSH
37436: LD_VAR 0 16
37440: PPUSH
37441: CALL_OW 321
37445: PUSH
37446: LD_INT 2
37448: EQUAL
37449: AND
37450: IFFALSE 37510
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
37452: LD_INT 22
37454: PUSH
37455: LD_VAR 0 16
37459: PUSH
37460: EMPTY
37461: LIST
37462: LIST
37463: PUSH
37464: LD_INT 35
37466: PUSH
37467: LD_INT 49
37469: PUSH
37470: EMPTY
37471: LIST
37472: LIST
37473: PUSH
37474: LD_INT 91
37476: PUSH
37477: LD_VAR 0 1
37481: PUSH
37482: LD_INT 10
37484: PUSH
37485: EMPTY
37486: LIST
37487: LIST
37488: LIST
37489: PUSH
37490: EMPTY
37491: LIST
37492: LIST
37493: LIST
37494: PPUSH
37495: CALL_OW 69
37499: NOT
37500: IFFALSE 37510
// weapon := ru_time_lapser ;
37502: LD_ADDR_VAR 0 18
37506: PUSH
37507: LD_INT 49
37509: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
37510: LD_VAR 0 12
37514: PUSH
37515: LD_INT 1
37517: PUSH
37518: LD_INT 2
37520: PUSH
37521: EMPTY
37522: LIST
37523: LIST
37524: IN
37525: PUSH
37526: LD_INT 11
37528: PUSH
37529: LD_VAR 0 5
37533: IN
37534: PUSH
37535: LD_INT 30
37537: PUSH
37538: LD_VAR 0 5
37542: IN
37543: OR
37544: AND
37545: PUSH
37546: LD_INT 6
37548: PPUSH
37549: LD_VAR 0 16
37553: PPUSH
37554: CALL_OW 321
37558: PUSH
37559: LD_INT 2
37561: EQUAL
37562: AND
37563: IFFALSE 37728
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
37565: LD_INT 22
37567: PUSH
37568: LD_VAR 0 16
37572: PUSH
37573: EMPTY
37574: LIST
37575: LIST
37576: PUSH
37577: LD_INT 2
37579: PUSH
37580: LD_INT 35
37582: PUSH
37583: LD_INT 11
37585: PUSH
37586: EMPTY
37587: LIST
37588: LIST
37589: PUSH
37590: LD_INT 35
37592: PUSH
37593: LD_INT 30
37595: PUSH
37596: EMPTY
37597: LIST
37598: LIST
37599: PUSH
37600: EMPTY
37601: LIST
37602: LIST
37603: LIST
37604: PUSH
37605: LD_INT 91
37607: PUSH
37608: LD_VAR 0 1
37612: PUSH
37613: LD_INT 18
37615: PUSH
37616: EMPTY
37617: LIST
37618: LIST
37619: LIST
37620: PUSH
37621: EMPTY
37622: LIST
37623: LIST
37624: LIST
37625: PPUSH
37626: CALL_OW 69
37630: NOT
37631: PUSH
37632: LD_INT 22
37634: PUSH
37635: LD_VAR 0 16
37639: PUSH
37640: EMPTY
37641: LIST
37642: LIST
37643: PUSH
37644: LD_INT 2
37646: PUSH
37647: LD_INT 30
37649: PUSH
37650: LD_INT 32
37652: PUSH
37653: EMPTY
37654: LIST
37655: LIST
37656: PUSH
37657: LD_INT 30
37659: PUSH
37660: LD_INT 33
37662: PUSH
37663: EMPTY
37664: LIST
37665: LIST
37666: PUSH
37667: EMPTY
37668: LIST
37669: LIST
37670: LIST
37671: PUSH
37672: LD_INT 91
37674: PUSH
37675: LD_VAR 0 1
37679: PUSH
37680: LD_INT 12
37682: PUSH
37683: EMPTY
37684: LIST
37685: LIST
37686: LIST
37687: PUSH
37688: EMPTY
37689: LIST
37690: LIST
37691: LIST
37692: PUSH
37693: EMPTY
37694: LIST
37695: PPUSH
37696: CALL_OW 69
37700: PUSH
37701: LD_INT 2
37703: GREATER
37704: AND
37705: IFFALSE 37728
// weapon := [ us_radar , ar_radar ] [ nat ] ;
37707: LD_ADDR_VAR 0 18
37711: PUSH
37712: LD_INT 11
37714: PUSH
37715: LD_INT 30
37717: PUSH
37718: EMPTY
37719: LIST
37720: LIST
37721: PUSH
37722: LD_VAR 0 12
37726: ARRAY
37727: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
37728: LD_VAR 0 18
37732: NOT
37733: PUSH
37734: LD_INT 40
37736: PPUSH
37737: LD_VAR 0 16
37741: PPUSH
37742: CALL_OW 321
37746: PUSH
37747: LD_INT 2
37749: EQUAL
37750: AND
37751: PUSH
37752: LD_INT 7
37754: PUSH
37755: LD_VAR 0 5
37759: IN
37760: PUSH
37761: LD_INT 28
37763: PUSH
37764: LD_VAR 0 5
37768: IN
37769: OR
37770: PUSH
37771: LD_INT 45
37773: PUSH
37774: LD_VAR 0 5
37778: IN
37779: OR
37780: AND
37781: IFFALSE 38035
// begin hex := GetHexInfo ( x , y ) ;
37783: LD_ADDR_VAR 0 4
37787: PUSH
37788: LD_VAR 0 10
37792: PPUSH
37793: LD_VAR 0 11
37797: PPUSH
37798: CALL_OW 546
37802: ST_TO_ADDR
// if hex [ 1 ] then
37803: LD_VAR 0 4
37807: PUSH
37808: LD_INT 1
37810: ARRAY
37811: IFFALSE 37815
// exit ;
37813: GO 38218
// height := hex [ 2 ] ;
37815: LD_ADDR_VAR 0 15
37819: PUSH
37820: LD_VAR 0 4
37824: PUSH
37825: LD_INT 2
37827: ARRAY
37828: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
37829: LD_ADDR_VAR 0 14
37833: PUSH
37834: LD_INT 0
37836: PUSH
37837: LD_INT 2
37839: PUSH
37840: LD_INT 3
37842: PUSH
37843: LD_INT 5
37845: PUSH
37846: EMPTY
37847: LIST
37848: LIST
37849: LIST
37850: LIST
37851: ST_TO_ADDR
// for i in tmp do
37852: LD_ADDR_VAR 0 8
37856: PUSH
37857: LD_VAR 0 14
37861: PUSH
37862: FOR_IN
37863: IFFALSE 38033
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
37865: LD_ADDR_VAR 0 9
37869: PUSH
37870: LD_VAR 0 10
37874: PPUSH
37875: LD_VAR 0 8
37879: PPUSH
37880: LD_INT 5
37882: PPUSH
37883: CALL_OW 272
37887: PUSH
37888: LD_VAR 0 11
37892: PPUSH
37893: LD_VAR 0 8
37897: PPUSH
37898: LD_INT 5
37900: PPUSH
37901: CALL_OW 273
37905: PUSH
37906: EMPTY
37907: LIST
37908: LIST
37909: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
37910: LD_VAR 0 9
37914: PUSH
37915: LD_INT 1
37917: ARRAY
37918: PPUSH
37919: LD_VAR 0 9
37923: PUSH
37924: LD_INT 2
37926: ARRAY
37927: PPUSH
37928: CALL_OW 488
37932: IFFALSE 38031
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
37934: LD_ADDR_VAR 0 4
37938: PUSH
37939: LD_VAR 0 9
37943: PUSH
37944: LD_INT 1
37946: ARRAY
37947: PPUSH
37948: LD_VAR 0 9
37952: PUSH
37953: LD_INT 2
37955: ARRAY
37956: PPUSH
37957: CALL_OW 546
37961: ST_TO_ADDR
// if hex [ 1 ] then
37962: LD_VAR 0 4
37966: PUSH
37967: LD_INT 1
37969: ARRAY
37970: IFFALSE 37974
// continue ;
37972: GO 37862
// h := hex [ 2 ] ;
37974: LD_ADDR_VAR 0 13
37978: PUSH
37979: LD_VAR 0 4
37983: PUSH
37984: LD_INT 2
37986: ARRAY
37987: ST_TO_ADDR
// if h + 7 < height then
37988: LD_VAR 0 13
37992: PUSH
37993: LD_INT 7
37995: PLUS
37996: PUSH
37997: LD_VAR 0 15
38001: LESS
38002: IFFALSE 38031
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
38004: LD_ADDR_VAR 0 18
38008: PUSH
38009: LD_INT 7
38011: PUSH
38012: LD_INT 28
38014: PUSH
38015: LD_INT 45
38017: PUSH
38018: EMPTY
38019: LIST
38020: LIST
38021: LIST
38022: PUSH
38023: LD_VAR 0 12
38027: ARRAY
38028: ST_TO_ADDR
// break ;
38029: GO 38033
// end ; end ; end ;
38031: GO 37862
38033: POP
38034: POP
// end ; if not weapon then
38035: LD_VAR 0 18
38039: NOT
38040: IFFALSE 38100
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
38042: LD_ADDR_VAR 0 5
38046: PUSH
38047: LD_VAR 0 5
38051: PUSH
38052: LD_INT 11
38054: PUSH
38055: LD_INT 30
38057: PUSH
38058: LD_INT 49
38060: PUSH
38061: EMPTY
38062: LIST
38063: LIST
38064: LIST
38065: DIFF
38066: ST_TO_ADDR
// if not list then
38067: LD_VAR 0 5
38071: NOT
38072: IFFALSE 38076
// exit ;
38074: GO 38218
// weapon := list [ rand ( 1 , list ) ] ;
38076: LD_ADDR_VAR 0 18
38080: PUSH
38081: LD_VAR 0 5
38085: PUSH
38086: LD_INT 1
38088: PPUSH
38089: LD_VAR 0 5
38093: PPUSH
38094: CALL_OW 12
38098: ARRAY
38099: ST_TO_ADDR
// end ; if weapon then
38100: LD_VAR 0 18
38104: IFFALSE 38218
// begin tmp := CostOfWeapon ( weapon ) ;
38106: LD_ADDR_VAR 0 14
38110: PUSH
38111: LD_VAR 0 18
38115: PPUSH
38116: CALL_OW 451
38120: ST_TO_ADDR
// j := GetBase ( tower ) ;
38121: LD_ADDR_VAR 0 9
38125: PUSH
38126: LD_VAR 0 1
38130: PPUSH
38131: CALL_OW 274
38135: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
38136: LD_VAR 0 9
38140: PPUSH
38141: LD_INT 1
38143: PPUSH
38144: CALL_OW 275
38148: PUSH
38149: LD_VAR 0 14
38153: PUSH
38154: LD_INT 1
38156: ARRAY
38157: GREATEREQUAL
38158: PUSH
38159: LD_VAR 0 9
38163: PPUSH
38164: LD_INT 2
38166: PPUSH
38167: CALL_OW 275
38171: PUSH
38172: LD_VAR 0 14
38176: PUSH
38177: LD_INT 2
38179: ARRAY
38180: GREATEREQUAL
38181: AND
38182: PUSH
38183: LD_VAR 0 9
38187: PPUSH
38188: LD_INT 3
38190: PPUSH
38191: CALL_OW 275
38195: PUSH
38196: LD_VAR 0 14
38200: PUSH
38201: LD_INT 3
38203: ARRAY
38204: GREATEREQUAL
38205: AND
38206: IFFALSE 38218
// result := weapon ;
38208: LD_ADDR_VAR 0 3
38212: PUSH
38213: LD_VAR 0 18
38217: ST_TO_ADDR
// end ; end ;
38218: LD_VAR 0 3
38222: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
38223: LD_INT 0
38225: PPUSH
38226: PPUSH
// result := true ;
38227: LD_ADDR_VAR 0 3
38231: PUSH
38232: LD_INT 1
38234: ST_TO_ADDR
// if array1 = array2 then
38235: LD_VAR 0 1
38239: PUSH
38240: LD_VAR 0 2
38244: EQUAL
38245: IFFALSE 38305
// begin for i = 1 to array1 do
38247: LD_ADDR_VAR 0 4
38251: PUSH
38252: DOUBLE
38253: LD_INT 1
38255: DEC
38256: ST_TO_ADDR
38257: LD_VAR 0 1
38261: PUSH
38262: FOR_TO
38263: IFFALSE 38301
// if array1 [ i ] <> array2 [ i ] then
38265: LD_VAR 0 1
38269: PUSH
38270: LD_VAR 0 4
38274: ARRAY
38275: PUSH
38276: LD_VAR 0 2
38280: PUSH
38281: LD_VAR 0 4
38285: ARRAY
38286: NONEQUAL
38287: IFFALSE 38299
// begin result := false ;
38289: LD_ADDR_VAR 0 3
38293: PUSH
38294: LD_INT 0
38296: ST_TO_ADDR
// break ;
38297: GO 38301
// end ;
38299: GO 38262
38301: POP
38302: POP
// end else
38303: GO 38313
// result := false ;
38305: LD_ADDR_VAR 0 3
38309: PUSH
38310: LD_INT 0
38312: ST_TO_ADDR
// end ;
38313: LD_VAR 0 3
38317: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
38318: LD_INT 0
38320: PPUSH
38321: PPUSH
// if not array1 or not array2 then
38322: LD_VAR 0 1
38326: NOT
38327: PUSH
38328: LD_VAR 0 2
38332: NOT
38333: OR
38334: IFFALSE 38338
// exit ;
38336: GO 38402
// result := true ;
38338: LD_ADDR_VAR 0 3
38342: PUSH
38343: LD_INT 1
38345: ST_TO_ADDR
// for i = 1 to array1 do
38346: LD_ADDR_VAR 0 4
38350: PUSH
38351: DOUBLE
38352: LD_INT 1
38354: DEC
38355: ST_TO_ADDR
38356: LD_VAR 0 1
38360: PUSH
38361: FOR_TO
38362: IFFALSE 38400
// if array1 [ i ] <> array2 [ i ] then
38364: LD_VAR 0 1
38368: PUSH
38369: LD_VAR 0 4
38373: ARRAY
38374: PUSH
38375: LD_VAR 0 2
38379: PUSH
38380: LD_VAR 0 4
38384: ARRAY
38385: NONEQUAL
38386: IFFALSE 38398
// begin result := false ;
38388: LD_ADDR_VAR 0 3
38392: PUSH
38393: LD_INT 0
38395: ST_TO_ADDR
// break ;
38396: GO 38400
// end ;
38398: GO 38361
38400: POP
38401: POP
// end ;
38402: LD_VAR 0 3
38406: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
38407: LD_INT 0
38409: PPUSH
38410: PPUSH
38411: PPUSH
// pom := GetBase ( fac ) ;
38412: LD_ADDR_VAR 0 5
38416: PUSH
38417: LD_VAR 0 1
38421: PPUSH
38422: CALL_OW 274
38426: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
38427: LD_ADDR_VAR 0 4
38431: PUSH
38432: LD_VAR 0 2
38436: PUSH
38437: LD_INT 1
38439: ARRAY
38440: PPUSH
38441: LD_VAR 0 2
38445: PUSH
38446: LD_INT 2
38448: ARRAY
38449: PPUSH
38450: LD_VAR 0 2
38454: PUSH
38455: LD_INT 3
38457: ARRAY
38458: PPUSH
38459: LD_VAR 0 2
38463: PUSH
38464: LD_INT 4
38466: ARRAY
38467: PPUSH
38468: CALL_OW 449
38472: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
38473: LD_ADDR_VAR 0 3
38477: PUSH
38478: LD_VAR 0 5
38482: PPUSH
38483: LD_INT 1
38485: PPUSH
38486: CALL_OW 275
38490: PUSH
38491: LD_VAR 0 4
38495: PUSH
38496: LD_INT 1
38498: ARRAY
38499: GREATEREQUAL
38500: PUSH
38501: LD_VAR 0 5
38505: PPUSH
38506: LD_INT 2
38508: PPUSH
38509: CALL_OW 275
38513: PUSH
38514: LD_VAR 0 4
38518: PUSH
38519: LD_INT 2
38521: ARRAY
38522: GREATEREQUAL
38523: AND
38524: PUSH
38525: LD_VAR 0 5
38529: PPUSH
38530: LD_INT 3
38532: PPUSH
38533: CALL_OW 275
38537: PUSH
38538: LD_VAR 0 4
38542: PUSH
38543: LD_INT 3
38545: ARRAY
38546: GREATEREQUAL
38547: AND
38548: ST_TO_ADDR
// end ;
38549: LD_VAR 0 3
38553: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
38554: LD_INT 0
38556: PPUSH
38557: PPUSH
38558: PPUSH
38559: PPUSH
// pom := GetBase ( building ) ;
38560: LD_ADDR_VAR 0 3
38564: PUSH
38565: LD_VAR 0 1
38569: PPUSH
38570: CALL_OW 274
38574: ST_TO_ADDR
// if not pom then
38575: LD_VAR 0 3
38579: NOT
38580: IFFALSE 38584
// exit ;
38582: GO 38754
// btype := GetBType ( building ) ;
38584: LD_ADDR_VAR 0 5
38588: PUSH
38589: LD_VAR 0 1
38593: PPUSH
38594: CALL_OW 266
38598: ST_TO_ADDR
// if btype = b_armoury then
38599: LD_VAR 0 5
38603: PUSH
38604: LD_INT 4
38606: EQUAL
38607: IFFALSE 38617
// btype := b_barracks ;
38609: LD_ADDR_VAR 0 5
38613: PUSH
38614: LD_INT 5
38616: ST_TO_ADDR
// if btype = b_depot then
38617: LD_VAR 0 5
38621: PUSH
38622: LD_INT 0
38624: EQUAL
38625: IFFALSE 38635
// btype := b_warehouse ;
38627: LD_ADDR_VAR 0 5
38631: PUSH
38632: LD_INT 1
38634: ST_TO_ADDR
// if btype = b_workshop then
38635: LD_VAR 0 5
38639: PUSH
38640: LD_INT 2
38642: EQUAL
38643: IFFALSE 38653
// btype := b_factory ;
38645: LD_ADDR_VAR 0 5
38649: PUSH
38650: LD_INT 3
38652: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
38653: LD_ADDR_VAR 0 4
38657: PUSH
38658: LD_VAR 0 5
38662: PPUSH
38663: LD_VAR 0 1
38667: PPUSH
38668: CALL_OW 248
38672: PPUSH
38673: CALL_OW 450
38677: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
38678: LD_ADDR_VAR 0 2
38682: PUSH
38683: LD_VAR 0 3
38687: PPUSH
38688: LD_INT 1
38690: PPUSH
38691: CALL_OW 275
38695: PUSH
38696: LD_VAR 0 4
38700: PUSH
38701: LD_INT 1
38703: ARRAY
38704: GREATEREQUAL
38705: PUSH
38706: LD_VAR 0 3
38710: PPUSH
38711: LD_INT 2
38713: PPUSH
38714: CALL_OW 275
38718: PUSH
38719: LD_VAR 0 4
38723: PUSH
38724: LD_INT 2
38726: ARRAY
38727: GREATEREQUAL
38728: AND
38729: PUSH
38730: LD_VAR 0 3
38734: PPUSH
38735: LD_INT 3
38737: PPUSH
38738: CALL_OW 275
38742: PUSH
38743: LD_VAR 0 4
38747: PUSH
38748: LD_INT 3
38750: ARRAY
38751: GREATEREQUAL
38752: AND
38753: ST_TO_ADDR
// end ;
38754: LD_VAR 0 2
38758: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
38759: LD_INT 0
38761: PPUSH
38762: PPUSH
38763: PPUSH
// pom := GetBase ( building ) ;
38764: LD_ADDR_VAR 0 4
38768: PUSH
38769: LD_VAR 0 1
38773: PPUSH
38774: CALL_OW 274
38778: ST_TO_ADDR
// if not pom then
38779: LD_VAR 0 4
38783: NOT
38784: IFFALSE 38788
// exit ;
38786: GO 38889
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
38788: LD_ADDR_VAR 0 5
38792: PUSH
38793: LD_VAR 0 2
38797: PPUSH
38798: LD_VAR 0 1
38802: PPUSH
38803: CALL_OW 248
38807: PPUSH
38808: CALL_OW 450
38812: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
38813: LD_ADDR_VAR 0 3
38817: PUSH
38818: LD_VAR 0 4
38822: PPUSH
38823: LD_INT 1
38825: PPUSH
38826: CALL_OW 275
38830: PUSH
38831: LD_VAR 0 5
38835: PUSH
38836: LD_INT 1
38838: ARRAY
38839: GREATEREQUAL
38840: PUSH
38841: LD_VAR 0 4
38845: PPUSH
38846: LD_INT 2
38848: PPUSH
38849: CALL_OW 275
38853: PUSH
38854: LD_VAR 0 5
38858: PUSH
38859: LD_INT 2
38861: ARRAY
38862: GREATEREQUAL
38863: AND
38864: PUSH
38865: LD_VAR 0 4
38869: PPUSH
38870: LD_INT 3
38872: PPUSH
38873: CALL_OW 275
38877: PUSH
38878: LD_VAR 0 5
38882: PUSH
38883: LD_INT 3
38885: ARRAY
38886: GREATEREQUAL
38887: AND
38888: ST_TO_ADDR
// end ;
38889: LD_VAR 0 3
38893: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
38894: LD_INT 0
38896: PPUSH
38897: PPUSH
38898: PPUSH
38899: PPUSH
38900: PPUSH
38901: PPUSH
38902: PPUSH
38903: PPUSH
38904: PPUSH
38905: PPUSH
38906: PPUSH
// result := false ;
38907: LD_ADDR_VAR 0 8
38911: PUSH
38912: LD_INT 0
38914: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
38915: LD_VAR 0 5
38919: NOT
38920: PUSH
38921: LD_VAR 0 1
38925: NOT
38926: OR
38927: PUSH
38928: LD_VAR 0 2
38932: NOT
38933: OR
38934: PUSH
38935: LD_VAR 0 3
38939: NOT
38940: OR
38941: IFFALSE 38945
// exit ;
38943: GO 39759
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
38945: LD_ADDR_VAR 0 14
38949: PUSH
38950: LD_VAR 0 1
38954: PPUSH
38955: LD_VAR 0 2
38959: PPUSH
38960: LD_VAR 0 3
38964: PPUSH
38965: LD_VAR 0 4
38969: PPUSH
38970: LD_VAR 0 5
38974: PUSH
38975: LD_INT 1
38977: ARRAY
38978: PPUSH
38979: CALL_OW 248
38983: PPUSH
38984: LD_INT 0
38986: PPUSH
38987: CALL 40996 0 6
38991: ST_TO_ADDR
// if not hexes then
38992: LD_VAR 0 14
38996: NOT
38997: IFFALSE 39001
// exit ;
38999: GO 39759
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
39001: LD_ADDR_VAR 0 17
39005: PUSH
39006: LD_VAR 0 5
39010: PPUSH
39011: LD_INT 22
39013: PUSH
39014: LD_VAR 0 13
39018: PPUSH
39019: CALL_OW 255
39023: PUSH
39024: EMPTY
39025: LIST
39026: LIST
39027: PUSH
39028: LD_INT 2
39030: PUSH
39031: LD_INT 30
39033: PUSH
39034: LD_INT 0
39036: PUSH
39037: EMPTY
39038: LIST
39039: LIST
39040: PUSH
39041: LD_INT 30
39043: PUSH
39044: LD_INT 1
39046: PUSH
39047: EMPTY
39048: LIST
39049: LIST
39050: PUSH
39051: EMPTY
39052: LIST
39053: LIST
39054: LIST
39055: PUSH
39056: EMPTY
39057: LIST
39058: LIST
39059: PPUSH
39060: CALL_OW 72
39064: ST_TO_ADDR
// for i = 1 to hexes do
39065: LD_ADDR_VAR 0 9
39069: PUSH
39070: DOUBLE
39071: LD_INT 1
39073: DEC
39074: ST_TO_ADDR
39075: LD_VAR 0 14
39079: PUSH
39080: FOR_TO
39081: IFFALSE 39757
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
39083: LD_ADDR_VAR 0 13
39087: PUSH
39088: LD_VAR 0 14
39092: PUSH
39093: LD_VAR 0 9
39097: ARRAY
39098: PUSH
39099: LD_INT 1
39101: ARRAY
39102: PPUSH
39103: LD_VAR 0 14
39107: PUSH
39108: LD_VAR 0 9
39112: ARRAY
39113: PUSH
39114: LD_INT 2
39116: ARRAY
39117: PPUSH
39118: CALL_OW 428
39122: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
39123: LD_VAR 0 14
39127: PUSH
39128: LD_VAR 0 9
39132: ARRAY
39133: PUSH
39134: LD_INT 1
39136: ARRAY
39137: PPUSH
39138: LD_VAR 0 14
39142: PUSH
39143: LD_VAR 0 9
39147: ARRAY
39148: PUSH
39149: LD_INT 2
39151: ARRAY
39152: PPUSH
39153: CALL_OW 351
39157: PUSH
39158: LD_VAR 0 14
39162: PUSH
39163: LD_VAR 0 9
39167: ARRAY
39168: PUSH
39169: LD_INT 1
39171: ARRAY
39172: PPUSH
39173: LD_VAR 0 14
39177: PUSH
39178: LD_VAR 0 9
39182: ARRAY
39183: PUSH
39184: LD_INT 2
39186: ARRAY
39187: PPUSH
39188: CALL_OW 488
39192: NOT
39193: OR
39194: PUSH
39195: LD_VAR 0 13
39199: PPUSH
39200: CALL_OW 247
39204: PUSH
39205: LD_INT 3
39207: EQUAL
39208: OR
39209: IFFALSE 39215
// exit ;
39211: POP
39212: POP
39213: GO 39759
// if not tmp then
39215: LD_VAR 0 13
39219: NOT
39220: IFFALSE 39224
// continue ;
39222: GO 39080
// result := true ;
39224: LD_ADDR_VAR 0 8
39228: PUSH
39229: LD_INT 1
39231: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
39232: LD_VAR 0 6
39236: PUSH
39237: LD_VAR 0 13
39241: PPUSH
39242: CALL_OW 247
39246: PUSH
39247: LD_INT 2
39249: EQUAL
39250: AND
39251: PUSH
39252: LD_VAR 0 13
39256: PPUSH
39257: CALL_OW 263
39261: PUSH
39262: LD_INT 1
39264: EQUAL
39265: AND
39266: IFFALSE 39430
// begin if IsDrivenBy ( tmp ) then
39268: LD_VAR 0 13
39272: PPUSH
39273: CALL_OW 311
39277: IFFALSE 39281
// continue ;
39279: GO 39080
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
39281: LD_VAR 0 6
39285: PPUSH
39286: LD_INT 3
39288: PUSH
39289: LD_INT 60
39291: PUSH
39292: EMPTY
39293: LIST
39294: PUSH
39295: EMPTY
39296: LIST
39297: LIST
39298: PUSH
39299: LD_INT 3
39301: PUSH
39302: LD_INT 55
39304: PUSH
39305: EMPTY
39306: LIST
39307: PUSH
39308: EMPTY
39309: LIST
39310: LIST
39311: PUSH
39312: EMPTY
39313: LIST
39314: LIST
39315: PPUSH
39316: CALL_OW 72
39320: IFFALSE 39428
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
39322: LD_ADDR_VAR 0 18
39326: PUSH
39327: LD_VAR 0 6
39331: PPUSH
39332: LD_INT 3
39334: PUSH
39335: LD_INT 60
39337: PUSH
39338: EMPTY
39339: LIST
39340: PUSH
39341: EMPTY
39342: LIST
39343: LIST
39344: PUSH
39345: LD_INT 3
39347: PUSH
39348: LD_INT 55
39350: PUSH
39351: EMPTY
39352: LIST
39353: PUSH
39354: EMPTY
39355: LIST
39356: LIST
39357: PUSH
39358: EMPTY
39359: LIST
39360: LIST
39361: PPUSH
39362: CALL_OW 72
39366: PUSH
39367: LD_INT 1
39369: ARRAY
39370: ST_TO_ADDR
// if IsInUnit ( driver ) then
39371: LD_VAR 0 18
39375: PPUSH
39376: CALL_OW 310
39380: IFFALSE 39391
// ComExit ( driver ) ;
39382: LD_VAR 0 18
39386: PPUSH
39387: CALL 64124 0 1
// AddComEnterUnit ( driver , tmp ) ;
39391: LD_VAR 0 18
39395: PPUSH
39396: LD_VAR 0 13
39400: PPUSH
39401: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
39405: LD_VAR 0 18
39409: PPUSH
39410: LD_VAR 0 7
39414: PPUSH
39415: CALL_OW 173
// AddComExitVehicle ( driver ) ;
39419: LD_VAR 0 18
39423: PPUSH
39424: CALL_OW 181
// end ; continue ;
39428: GO 39080
// end ; if not cleaners or not tmp in cleaners then
39430: LD_VAR 0 6
39434: NOT
39435: PUSH
39436: LD_VAR 0 13
39440: PUSH
39441: LD_VAR 0 6
39445: IN
39446: NOT
39447: OR
39448: IFFALSE 39755
// begin if dep then
39450: LD_VAR 0 17
39454: IFFALSE 39590
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
39456: LD_ADDR_VAR 0 16
39460: PUSH
39461: LD_VAR 0 17
39465: PUSH
39466: LD_INT 1
39468: ARRAY
39469: PPUSH
39470: CALL_OW 250
39474: PPUSH
39475: LD_VAR 0 17
39479: PUSH
39480: LD_INT 1
39482: ARRAY
39483: PPUSH
39484: CALL_OW 254
39488: PPUSH
39489: LD_INT 5
39491: PPUSH
39492: CALL_OW 272
39496: PUSH
39497: LD_VAR 0 17
39501: PUSH
39502: LD_INT 1
39504: ARRAY
39505: PPUSH
39506: CALL_OW 251
39510: PPUSH
39511: LD_VAR 0 17
39515: PUSH
39516: LD_INT 1
39518: ARRAY
39519: PPUSH
39520: CALL_OW 254
39524: PPUSH
39525: LD_INT 5
39527: PPUSH
39528: CALL_OW 273
39532: PUSH
39533: EMPTY
39534: LIST
39535: LIST
39536: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
39537: LD_VAR 0 16
39541: PUSH
39542: LD_INT 1
39544: ARRAY
39545: PPUSH
39546: LD_VAR 0 16
39550: PUSH
39551: LD_INT 2
39553: ARRAY
39554: PPUSH
39555: CALL_OW 488
39559: IFFALSE 39590
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
39561: LD_VAR 0 13
39565: PPUSH
39566: LD_VAR 0 16
39570: PUSH
39571: LD_INT 1
39573: ARRAY
39574: PPUSH
39575: LD_VAR 0 16
39579: PUSH
39580: LD_INT 2
39582: ARRAY
39583: PPUSH
39584: CALL_OW 111
// continue ;
39588: GO 39080
// end ; end ; r := GetDir ( tmp ) ;
39590: LD_ADDR_VAR 0 15
39594: PUSH
39595: LD_VAR 0 13
39599: PPUSH
39600: CALL_OW 254
39604: ST_TO_ADDR
// if r = 5 then
39605: LD_VAR 0 15
39609: PUSH
39610: LD_INT 5
39612: EQUAL
39613: IFFALSE 39623
// r := 0 ;
39615: LD_ADDR_VAR 0 15
39619: PUSH
39620: LD_INT 0
39622: ST_TO_ADDR
// for j = r to 5 do
39623: LD_ADDR_VAR 0 10
39627: PUSH
39628: DOUBLE
39629: LD_VAR 0 15
39633: DEC
39634: ST_TO_ADDR
39635: LD_INT 5
39637: PUSH
39638: FOR_TO
39639: IFFALSE 39753
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
39641: LD_ADDR_VAR 0 11
39645: PUSH
39646: LD_VAR 0 13
39650: PPUSH
39651: CALL_OW 250
39655: PPUSH
39656: LD_VAR 0 10
39660: PPUSH
39661: LD_INT 2
39663: PPUSH
39664: CALL_OW 272
39668: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
39669: LD_ADDR_VAR 0 12
39673: PUSH
39674: LD_VAR 0 13
39678: PPUSH
39679: CALL_OW 251
39683: PPUSH
39684: LD_VAR 0 10
39688: PPUSH
39689: LD_INT 2
39691: PPUSH
39692: CALL_OW 273
39696: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
39697: LD_VAR 0 11
39701: PPUSH
39702: LD_VAR 0 12
39706: PPUSH
39707: CALL_OW 488
39711: PUSH
39712: LD_VAR 0 11
39716: PPUSH
39717: LD_VAR 0 12
39721: PPUSH
39722: CALL_OW 428
39726: NOT
39727: AND
39728: IFFALSE 39751
// begin ComMoveXY ( tmp , _x , _y ) ;
39730: LD_VAR 0 13
39734: PPUSH
39735: LD_VAR 0 11
39739: PPUSH
39740: LD_VAR 0 12
39744: PPUSH
39745: CALL_OW 111
// break ;
39749: GO 39753
// end ; end ;
39751: GO 39638
39753: POP
39754: POP
// end ; end ;
39755: GO 39080
39757: POP
39758: POP
// end ;
39759: LD_VAR 0 8
39763: RET
// export function BuildingTechInvented ( side , btype ) ; begin
39764: LD_INT 0
39766: PPUSH
// result := true ;
39767: LD_ADDR_VAR 0 3
39771: PUSH
39772: LD_INT 1
39774: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
39775: LD_VAR 0 2
39779: PUSH
39780: LD_INT 24
39782: DOUBLE
39783: EQUAL
39784: IFTRUE 39794
39786: LD_INT 33
39788: DOUBLE
39789: EQUAL
39790: IFTRUE 39794
39792: GO 39819
39794: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
39795: LD_ADDR_VAR 0 3
39799: PUSH
39800: LD_INT 32
39802: PPUSH
39803: LD_VAR 0 1
39807: PPUSH
39808: CALL_OW 321
39812: PUSH
39813: LD_INT 2
39815: EQUAL
39816: ST_TO_ADDR
39817: GO 40139
39819: LD_INT 20
39821: DOUBLE
39822: EQUAL
39823: IFTRUE 39827
39825: GO 39852
39827: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
39828: LD_ADDR_VAR 0 3
39832: PUSH
39833: LD_INT 6
39835: PPUSH
39836: LD_VAR 0 1
39840: PPUSH
39841: CALL_OW 321
39845: PUSH
39846: LD_INT 2
39848: EQUAL
39849: ST_TO_ADDR
39850: GO 40139
39852: LD_INT 22
39854: DOUBLE
39855: EQUAL
39856: IFTRUE 39866
39858: LD_INT 36
39860: DOUBLE
39861: EQUAL
39862: IFTRUE 39866
39864: GO 39891
39866: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
39867: LD_ADDR_VAR 0 3
39871: PUSH
39872: LD_INT 15
39874: PPUSH
39875: LD_VAR 0 1
39879: PPUSH
39880: CALL_OW 321
39884: PUSH
39885: LD_INT 2
39887: EQUAL
39888: ST_TO_ADDR
39889: GO 40139
39891: LD_INT 30
39893: DOUBLE
39894: EQUAL
39895: IFTRUE 39899
39897: GO 39924
39899: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
39900: LD_ADDR_VAR 0 3
39904: PUSH
39905: LD_INT 20
39907: PPUSH
39908: LD_VAR 0 1
39912: PPUSH
39913: CALL_OW 321
39917: PUSH
39918: LD_INT 2
39920: EQUAL
39921: ST_TO_ADDR
39922: GO 40139
39924: LD_INT 28
39926: DOUBLE
39927: EQUAL
39928: IFTRUE 39938
39930: LD_INT 21
39932: DOUBLE
39933: EQUAL
39934: IFTRUE 39938
39936: GO 39963
39938: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
39939: LD_ADDR_VAR 0 3
39943: PUSH
39944: LD_INT 21
39946: PPUSH
39947: LD_VAR 0 1
39951: PPUSH
39952: CALL_OW 321
39956: PUSH
39957: LD_INT 2
39959: EQUAL
39960: ST_TO_ADDR
39961: GO 40139
39963: LD_INT 16
39965: DOUBLE
39966: EQUAL
39967: IFTRUE 39971
39969: GO 39998
39971: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
39972: LD_ADDR_VAR 0 3
39976: PUSH
39977: LD_EXP 42
39981: PPUSH
39982: LD_VAR 0 1
39986: PPUSH
39987: CALL_OW 321
39991: PUSH
39992: LD_INT 2
39994: EQUAL
39995: ST_TO_ADDR
39996: GO 40139
39998: LD_INT 19
40000: DOUBLE
40001: EQUAL
40002: IFTRUE 40012
40004: LD_INT 23
40006: DOUBLE
40007: EQUAL
40008: IFTRUE 40012
40010: GO 40039
40012: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
40013: LD_ADDR_VAR 0 3
40017: PUSH
40018: LD_EXP 41
40022: PPUSH
40023: LD_VAR 0 1
40027: PPUSH
40028: CALL_OW 321
40032: PUSH
40033: LD_INT 2
40035: EQUAL
40036: ST_TO_ADDR
40037: GO 40139
40039: LD_INT 17
40041: DOUBLE
40042: EQUAL
40043: IFTRUE 40047
40045: GO 40072
40047: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
40048: LD_ADDR_VAR 0 3
40052: PUSH
40053: LD_INT 39
40055: PPUSH
40056: LD_VAR 0 1
40060: PPUSH
40061: CALL_OW 321
40065: PUSH
40066: LD_INT 2
40068: EQUAL
40069: ST_TO_ADDR
40070: GO 40139
40072: LD_INT 18
40074: DOUBLE
40075: EQUAL
40076: IFTRUE 40080
40078: GO 40105
40080: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
40081: LD_ADDR_VAR 0 3
40085: PUSH
40086: LD_INT 40
40088: PPUSH
40089: LD_VAR 0 1
40093: PPUSH
40094: CALL_OW 321
40098: PUSH
40099: LD_INT 2
40101: EQUAL
40102: ST_TO_ADDR
40103: GO 40139
40105: LD_INT 27
40107: DOUBLE
40108: EQUAL
40109: IFTRUE 40113
40111: GO 40138
40113: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
40114: LD_ADDR_VAR 0 3
40118: PUSH
40119: LD_INT 35
40121: PPUSH
40122: LD_VAR 0 1
40126: PPUSH
40127: CALL_OW 321
40131: PUSH
40132: LD_INT 2
40134: EQUAL
40135: ST_TO_ADDR
40136: GO 40139
40138: POP
// end ;
40139: LD_VAR 0 3
40143: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
40144: LD_INT 0
40146: PPUSH
40147: PPUSH
40148: PPUSH
40149: PPUSH
40150: PPUSH
40151: PPUSH
40152: PPUSH
40153: PPUSH
40154: PPUSH
40155: PPUSH
40156: PPUSH
// result := false ;
40157: LD_ADDR_VAR 0 6
40161: PUSH
40162: LD_INT 0
40164: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
40165: LD_VAR 0 1
40169: NOT
40170: PUSH
40171: LD_VAR 0 1
40175: PPUSH
40176: CALL_OW 266
40180: PUSH
40181: LD_INT 0
40183: PUSH
40184: LD_INT 1
40186: PUSH
40187: EMPTY
40188: LIST
40189: LIST
40190: IN
40191: NOT
40192: OR
40193: PUSH
40194: LD_VAR 0 2
40198: NOT
40199: OR
40200: PUSH
40201: LD_VAR 0 5
40205: PUSH
40206: LD_INT 0
40208: PUSH
40209: LD_INT 1
40211: PUSH
40212: LD_INT 2
40214: PUSH
40215: LD_INT 3
40217: PUSH
40218: LD_INT 4
40220: PUSH
40221: LD_INT 5
40223: PUSH
40224: EMPTY
40225: LIST
40226: LIST
40227: LIST
40228: LIST
40229: LIST
40230: LIST
40231: IN
40232: NOT
40233: OR
40234: PUSH
40235: LD_VAR 0 3
40239: PPUSH
40240: LD_VAR 0 4
40244: PPUSH
40245: CALL_OW 488
40249: NOT
40250: OR
40251: IFFALSE 40255
// exit ;
40253: GO 40991
// side := GetSide ( depot ) ;
40255: LD_ADDR_VAR 0 9
40259: PUSH
40260: LD_VAR 0 1
40264: PPUSH
40265: CALL_OW 255
40269: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
40270: LD_VAR 0 9
40274: PPUSH
40275: LD_VAR 0 2
40279: PPUSH
40280: CALL 39764 0 2
40284: NOT
40285: IFFALSE 40289
// exit ;
40287: GO 40991
// pom := GetBase ( depot ) ;
40289: LD_ADDR_VAR 0 10
40293: PUSH
40294: LD_VAR 0 1
40298: PPUSH
40299: CALL_OW 274
40303: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
40304: LD_ADDR_VAR 0 11
40308: PUSH
40309: LD_VAR 0 2
40313: PPUSH
40314: LD_VAR 0 1
40318: PPUSH
40319: CALL_OW 248
40323: PPUSH
40324: CALL_OW 450
40328: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
40329: LD_VAR 0 10
40333: PPUSH
40334: LD_INT 1
40336: PPUSH
40337: CALL_OW 275
40341: PUSH
40342: LD_VAR 0 11
40346: PUSH
40347: LD_INT 1
40349: ARRAY
40350: GREATEREQUAL
40351: PUSH
40352: LD_VAR 0 10
40356: PPUSH
40357: LD_INT 2
40359: PPUSH
40360: CALL_OW 275
40364: PUSH
40365: LD_VAR 0 11
40369: PUSH
40370: LD_INT 2
40372: ARRAY
40373: GREATEREQUAL
40374: AND
40375: PUSH
40376: LD_VAR 0 10
40380: PPUSH
40381: LD_INT 3
40383: PPUSH
40384: CALL_OW 275
40388: PUSH
40389: LD_VAR 0 11
40393: PUSH
40394: LD_INT 3
40396: ARRAY
40397: GREATEREQUAL
40398: AND
40399: NOT
40400: IFFALSE 40404
// exit ;
40402: GO 40991
// if GetBType ( depot ) = b_depot then
40404: LD_VAR 0 1
40408: PPUSH
40409: CALL_OW 266
40413: PUSH
40414: LD_INT 0
40416: EQUAL
40417: IFFALSE 40429
// dist := 28 else
40419: LD_ADDR_VAR 0 14
40423: PUSH
40424: LD_INT 28
40426: ST_TO_ADDR
40427: GO 40437
// dist := 36 ;
40429: LD_ADDR_VAR 0 14
40433: PUSH
40434: LD_INT 36
40436: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
40437: LD_VAR 0 1
40441: PPUSH
40442: LD_VAR 0 3
40446: PPUSH
40447: LD_VAR 0 4
40451: PPUSH
40452: CALL_OW 297
40456: PUSH
40457: LD_VAR 0 14
40461: GREATER
40462: IFFALSE 40466
// exit ;
40464: GO 40991
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
40466: LD_ADDR_VAR 0 12
40470: PUSH
40471: LD_VAR 0 2
40475: PPUSH
40476: LD_VAR 0 3
40480: PPUSH
40481: LD_VAR 0 4
40485: PPUSH
40486: LD_VAR 0 5
40490: PPUSH
40491: LD_VAR 0 1
40495: PPUSH
40496: CALL_OW 248
40500: PPUSH
40501: LD_INT 0
40503: PPUSH
40504: CALL 40996 0 6
40508: ST_TO_ADDR
// if not hexes then
40509: LD_VAR 0 12
40513: NOT
40514: IFFALSE 40518
// exit ;
40516: GO 40991
// hex := GetHexInfo ( x , y ) ;
40518: LD_ADDR_VAR 0 15
40522: PUSH
40523: LD_VAR 0 3
40527: PPUSH
40528: LD_VAR 0 4
40532: PPUSH
40533: CALL_OW 546
40537: ST_TO_ADDR
// if hex [ 1 ] then
40538: LD_VAR 0 15
40542: PUSH
40543: LD_INT 1
40545: ARRAY
40546: IFFALSE 40550
// exit ;
40548: GO 40991
// height := hex [ 2 ] ;
40550: LD_ADDR_VAR 0 13
40554: PUSH
40555: LD_VAR 0 15
40559: PUSH
40560: LD_INT 2
40562: ARRAY
40563: ST_TO_ADDR
// for i = 1 to hexes do
40564: LD_ADDR_VAR 0 7
40568: PUSH
40569: DOUBLE
40570: LD_INT 1
40572: DEC
40573: ST_TO_ADDR
40574: LD_VAR 0 12
40578: PUSH
40579: FOR_TO
40580: IFFALSE 40910
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
40582: LD_VAR 0 12
40586: PUSH
40587: LD_VAR 0 7
40591: ARRAY
40592: PUSH
40593: LD_INT 1
40595: ARRAY
40596: PPUSH
40597: LD_VAR 0 12
40601: PUSH
40602: LD_VAR 0 7
40606: ARRAY
40607: PUSH
40608: LD_INT 2
40610: ARRAY
40611: PPUSH
40612: CALL_OW 488
40616: NOT
40617: PUSH
40618: LD_VAR 0 12
40622: PUSH
40623: LD_VAR 0 7
40627: ARRAY
40628: PUSH
40629: LD_INT 1
40631: ARRAY
40632: PPUSH
40633: LD_VAR 0 12
40637: PUSH
40638: LD_VAR 0 7
40642: ARRAY
40643: PUSH
40644: LD_INT 2
40646: ARRAY
40647: PPUSH
40648: CALL_OW 428
40652: PUSH
40653: LD_INT 0
40655: GREATER
40656: OR
40657: PUSH
40658: LD_VAR 0 12
40662: PUSH
40663: LD_VAR 0 7
40667: ARRAY
40668: PUSH
40669: LD_INT 1
40671: ARRAY
40672: PPUSH
40673: LD_VAR 0 12
40677: PUSH
40678: LD_VAR 0 7
40682: ARRAY
40683: PUSH
40684: LD_INT 2
40686: ARRAY
40687: PPUSH
40688: CALL_OW 351
40692: OR
40693: IFFALSE 40699
// exit ;
40695: POP
40696: POP
40697: GO 40991
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
40699: LD_ADDR_VAR 0 8
40703: PUSH
40704: LD_VAR 0 12
40708: PUSH
40709: LD_VAR 0 7
40713: ARRAY
40714: PUSH
40715: LD_INT 1
40717: ARRAY
40718: PPUSH
40719: LD_VAR 0 12
40723: PUSH
40724: LD_VAR 0 7
40728: ARRAY
40729: PUSH
40730: LD_INT 2
40732: ARRAY
40733: PPUSH
40734: CALL_OW 546
40738: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
40739: LD_VAR 0 8
40743: PUSH
40744: LD_INT 1
40746: ARRAY
40747: PUSH
40748: LD_VAR 0 8
40752: PUSH
40753: LD_INT 2
40755: ARRAY
40756: PUSH
40757: LD_VAR 0 13
40761: PUSH
40762: LD_INT 2
40764: PLUS
40765: GREATER
40766: OR
40767: PUSH
40768: LD_VAR 0 8
40772: PUSH
40773: LD_INT 2
40775: ARRAY
40776: PUSH
40777: LD_VAR 0 13
40781: PUSH
40782: LD_INT 2
40784: MINUS
40785: LESS
40786: OR
40787: PUSH
40788: LD_VAR 0 8
40792: PUSH
40793: LD_INT 3
40795: ARRAY
40796: PUSH
40797: LD_INT 0
40799: PUSH
40800: LD_INT 8
40802: PUSH
40803: LD_INT 9
40805: PUSH
40806: LD_INT 10
40808: PUSH
40809: LD_INT 11
40811: PUSH
40812: LD_INT 12
40814: PUSH
40815: LD_INT 13
40817: PUSH
40818: LD_INT 16
40820: PUSH
40821: LD_INT 17
40823: PUSH
40824: LD_INT 18
40826: PUSH
40827: LD_INT 19
40829: PUSH
40830: LD_INT 20
40832: PUSH
40833: LD_INT 21
40835: PUSH
40836: EMPTY
40837: LIST
40838: LIST
40839: LIST
40840: LIST
40841: LIST
40842: LIST
40843: LIST
40844: LIST
40845: LIST
40846: LIST
40847: LIST
40848: LIST
40849: LIST
40850: IN
40851: NOT
40852: OR
40853: PUSH
40854: LD_VAR 0 8
40858: PUSH
40859: LD_INT 5
40861: ARRAY
40862: NOT
40863: OR
40864: PUSH
40865: LD_VAR 0 8
40869: PUSH
40870: LD_INT 6
40872: ARRAY
40873: PUSH
40874: LD_INT 1
40876: PUSH
40877: LD_INT 2
40879: PUSH
40880: LD_INT 7
40882: PUSH
40883: LD_INT 9
40885: PUSH
40886: LD_INT 10
40888: PUSH
40889: LD_INT 11
40891: PUSH
40892: EMPTY
40893: LIST
40894: LIST
40895: LIST
40896: LIST
40897: LIST
40898: LIST
40899: IN
40900: NOT
40901: OR
40902: IFFALSE 40908
// exit ;
40904: POP
40905: POP
40906: GO 40991
// end ;
40908: GO 40579
40910: POP
40911: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
40912: LD_VAR 0 9
40916: PPUSH
40917: LD_VAR 0 3
40921: PPUSH
40922: LD_VAR 0 4
40926: PPUSH
40927: LD_INT 20
40929: PPUSH
40930: CALL 32937 0 4
40934: PUSH
40935: LD_INT 4
40937: ARRAY
40938: IFFALSE 40942
// exit ;
40940: GO 40991
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
40942: LD_VAR 0 2
40946: PUSH
40947: LD_INT 29
40949: PUSH
40950: LD_INT 30
40952: PUSH
40953: EMPTY
40954: LIST
40955: LIST
40956: IN
40957: PUSH
40958: LD_VAR 0 3
40962: PPUSH
40963: LD_VAR 0 4
40967: PPUSH
40968: LD_VAR 0 9
40972: PPUSH
40973: CALL_OW 440
40977: NOT
40978: AND
40979: IFFALSE 40983
// exit ;
40981: GO 40991
// result := true ;
40983: LD_ADDR_VAR 0 6
40987: PUSH
40988: LD_INT 1
40990: ST_TO_ADDR
// end ;
40991: LD_VAR 0 6
40995: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
40996: LD_INT 0
40998: PPUSH
40999: PPUSH
41000: PPUSH
41001: PPUSH
41002: PPUSH
41003: PPUSH
41004: PPUSH
41005: PPUSH
41006: PPUSH
41007: PPUSH
41008: PPUSH
41009: PPUSH
41010: PPUSH
41011: PPUSH
41012: PPUSH
41013: PPUSH
41014: PPUSH
41015: PPUSH
41016: PPUSH
41017: PPUSH
41018: PPUSH
41019: PPUSH
41020: PPUSH
41021: PPUSH
41022: PPUSH
41023: PPUSH
41024: PPUSH
41025: PPUSH
41026: PPUSH
41027: PPUSH
41028: PPUSH
41029: PPUSH
41030: PPUSH
41031: PPUSH
41032: PPUSH
41033: PPUSH
41034: PPUSH
41035: PPUSH
41036: PPUSH
41037: PPUSH
41038: PPUSH
41039: PPUSH
41040: PPUSH
41041: PPUSH
41042: PPUSH
41043: PPUSH
41044: PPUSH
41045: PPUSH
41046: PPUSH
41047: PPUSH
41048: PPUSH
41049: PPUSH
41050: PPUSH
41051: PPUSH
41052: PPUSH
41053: PPUSH
41054: PPUSH
41055: PPUSH
// result = [ ] ;
41056: LD_ADDR_VAR 0 7
41060: PUSH
41061: EMPTY
41062: ST_TO_ADDR
// temp_list = [ ] ;
41063: LD_ADDR_VAR 0 9
41067: PUSH
41068: EMPTY
41069: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
41070: LD_VAR 0 4
41074: PUSH
41075: LD_INT 0
41077: PUSH
41078: LD_INT 1
41080: PUSH
41081: LD_INT 2
41083: PUSH
41084: LD_INT 3
41086: PUSH
41087: LD_INT 4
41089: PUSH
41090: LD_INT 5
41092: PUSH
41093: EMPTY
41094: LIST
41095: LIST
41096: LIST
41097: LIST
41098: LIST
41099: LIST
41100: IN
41101: NOT
41102: PUSH
41103: LD_VAR 0 1
41107: PUSH
41108: LD_INT 0
41110: PUSH
41111: LD_INT 1
41113: PUSH
41114: EMPTY
41115: LIST
41116: LIST
41117: IN
41118: PUSH
41119: LD_VAR 0 5
41123: PUSH
41124: LD_INT 1
41126: PUSH
41127: LD_INT 2
41129: PUSH
41130: LD_INT 3
41132: PUSH
41133: EMPTY
41134: LIST
41135: LIST
41136: LIST
41137: IN
41138: NOT
41139: AND
41140: OR
41141: IFFALSE 41145
// exit ;
41143: GO 59536
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
41145: LD_VAR 0 1
41149: PUSH
41150: LD_INT 6
41152: PUSH
41153: LD_INT 7
41155: PUSH
41156: LD_INT 8
41158: PUSH
41159: LD_INT 13
41161: PUSH
41162: LD_INT 12
41164: PUSH
41165: LD_INT 15
41167: PUSH
41168: LD_INT 11
41170: PUSH
41171: LD_INT 14
41173: PUSH
41174: LD_INT 10
41176: PUSH
41177: EMPTY
41178: LIST
41179: LIST
41180: LIST
41181: LIST
41182: LIST
41183: LIST
41184: LIST
41185: LIST
41186: LIST
41187: IN
41188: IFFALSE 41198
// btype = b_lab ;
41190: LD_ADDR_VAR 0 1
41194: PUSH
41195: LD_INT 6
41197: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
41198: LD_VAR 0 6
41202: PUSH
41203: LD_INT 0
41205: PUSH
41206: LD_INT 1
41208: PUSH
41209: LD_INT 2
41211: PUSH
41212: EMPTY
41213: LIST
41214: LIST
41215: LIST
41216: IN
41217: NOT
41218: PUSH
41219: LD_VAR 0 1
41223: PUSH
41224: LD_INT 0
41226: PUSH
41227: LD_INT 1
41229: PUSH
41230: LD_INT 2
41232: PUSH
41233: LD_INT 3
41235: PUSH
41236: LD_INT 6
41238: PUSH
41239: LD_INT 36
41241: PUSH
41242: LD_INT 4
41244: PUSH
41245: LD_INT 5
41247: PUSH
41248: LD_INT 31
41250: PUSH
41251: LD_INT 32
41253: PUSH
41254: LD_INT 33
41256: PUSH
41257: EMPTY
41258: LIST
41259: LIST
41260: LIST
41261: LIST
41262: LIST
41263: LIST
41264: LIST
41265: LIST
41266: LIST
41267: LIST
41268: LIST
41269: IN
41270: NOT
41271: PUSH
41272: LD_VAR 0 6
41276: PUSH
41277: LD_INT 1
41279: EQUAL
41280: AND
41281: OR
41282: PUSH
41283: LD_VAR 0 1
41287: PUSH
41288: LD_INT 2
41290: PUSH
41291: LD_INT 3
41293: PUSH
41294: EMPTY
41295: LIST
41296: LIST
41297: IN
41298: NOT
41299: PUSH
41300: LD_VAR 0 6
41304: PUSH
41305: LD_INT 2
41307: EQUAL
41308: AND
41309: OR
41310: IFFALSE 41320
// mode = 0 ;
41312: LD_ADDR_VAR 0 6
41316: PUSH
41317: LD_INT 0
41319: ST_TO_ADDR
// case mode of 0 :
41320: LD_VAR 0 6
41324: PUSH
41325: LD_INT 0
41327: DOUBLE
41328: EQUAL
41329: IFTRUE 41333
41331: GO 52786
41333: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
41334: LD_ADDR_VAR 0 11
41338: PUSH
41339: LD_INT 0
41341: PUSH
41342: LD_INT 0
41344: PUSH
41345: EMPTY
41346: LIST
41347: LIST
41348: PUSH
41349: LD_INT 0
41351: PUSH
41352: LD_INT 1
41354: NEG
41355: PUSH
41356: EMPTY
41357: LIST
41358: LIST
41359: PUSH
41360: LD_INT 1
41362: PUSH
41363: LD_INT 0
41365: PUSH
41366: EMPTY
41367: LIST
41368: LIST
41369: PUSH
41370: LD_INT 1
41372: PUSH
41373: LD_INT 1
41375: PUSH
41376: EMPTY
41377: LIST
41378: LIST
41379: PUSH
41380: LD_INT 0
41382: PUSH
41383: LD_INT 1
41385: PUSH
41386: EMPTY
41387: LIST
41388: LIST
41389: PUSH
41390: LD_INT 1
41392: NEG
41393: PUSH
41394: LD_INT 0
41396: PUSH
41397: EMPTY
41398: LIST
41399: LIST
41400: PUSH
41401: LD_INT 1
41403: NEG
41404: PUSH
41405: LD_INT 1
41407: NEG
41408: PUSH
41409: EMPTY
41410: LIST
41411: LIST
41412: PUSH
41413: LD_INT 1
41415: NEG
41416: PUSH
41417: LD_INT 2
41419: NEG
41420: PUSH
41421: EMPTY
41422: LIST
41423: LIST
41424: PUSH
41425: LD_INT 0
41427: PUSH
41428: LD_INT 2
41430: NEG
41431: PUSH
41432: EMPTY
41433: LIST
41434: LIST
41435: PUSH
41436: LD_INT 1
41438: PUSH
41439: LD_INT 1
41441: NEG
41442: PUSH
41443: EMPTY
41444: LIST
41445: LIST
41446: PUSH
41447: LD_INT 1
41449: PUSH
41450: LD_INT 2
41452: PUSH
41453: EMPTY
41454: LIST
41455: LIST
41456: PUSH
41457: LD_INT 0
41459: PUSH
41460: LD_INT 2
41462: PUSH
41463: EMPTY
41464: LIST
41465: LIST
41466: PUSH
41467: LD_INT 1
41469: NEG
41470: PUSH
41471: LD_INT 1
41473: PUSH
41474: EMPTY
41475: LIST
41476: LIST
41477: PUSH
41478: LD_INT 1
41480: PUSH
41481: LD_INT 3
41483: PUSH
41484: EMPTY
41485: LIST
41486: LIST
41487: PUSH
41488: LD_INT 0
41490: PUSH
41491: LD_INT 3
41493: PUSH
41494: EMPTY
41495: LIST
41496: LIST
41497: PUSH
41498: LD_INT 1
41500: NEG
41501: PUSH
41502: LD_INT 2
41504: PUSH
41505: EMPTY
41506: LIST
41507: LIST
41508: PUSH
41509: EMPTY
41510: LIST
41511: LIST
41512: LIST
41513: LIST
41514: LIST
41515: LIST
41516: LIST
41517: LIST
41518: LIST
41519: LIST
41520: LIST
41521: LIST
41522: LIST
41523: LIST
41524: LIST
41525: LIST
41526: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
41527: LD_ADDR_VAR 0 12
41531: PUSH
41532: LD_INT 0
41534: PUSH
41535: LD_INT 0
41537: PUSH
41538: EMPTY
41539: LIST
41540: LIST
41541: PUSH
41542: LD_INT 0
41544: PUSH
41545: LD_INT 1
41547: NEG
41548: PUSH
41549: EMPTY
41550: LIST
41551: LIST
41552: PUSH
41553: LD_INT 1
41555: PUSH
41556: LD_INT 0
41558: PUSH
41559: EMPTY
41560: LIST
41561: LIST
41562: PUSH
41563: LD_INT 1
41565: PUSH
41566: LD_INT 1
41568: PUSH
41569: EMPTY
41570: LIST
41571: LIST
41572: PUSH
41573: LD_INT 0
41575: PUSH
41576: LD_INT 1
41578: PUSH
41579: EMPTY
41580: LIST
41581: LIST
41582: PUSH
41583: LD_INT 1
41585: NEG
41586: PUSH
41587: LD_INT 0
41589: PUSH
41590: EMPTY
41591: LIST
41592: LIST
41593: PUSH
41594: LD_INT 1
41596: NEG
41597: PUSH
41598: LD_INT 1
41600: NEG
41601: PUSH
41602: EMPTY
41603: LIST
41604: LIST
41605: PUSH
41606: LD_INT 1
41608: PUSH
41609: LD_INT 1
41611: NEG
41612: PUSH
41613: EMPTY
41614: LIST
41615: LIST
41616: PUSH
41617: LD_INT 2
41619: PUSH
41620: LD_INT 0
41622: PUSH
41623: EMPTY
41624: LIST
41625: LIST
41626: PUSH
41627: LD_INT 2
41629: PUSH
41630: LD_INT 1
41632: PUSH
41633: EMPTY
41634: LIST
41635: LIST
41636: PUSH
41637: LD_INT 1
41639: NEG
41640: PUSH
41641: LD_INT 1
41643: PUSH
41644: EMPTY
41645: LIST
41646: LIST
41647: PUSH
41648: LD_INT 2
41650: NEG
41651: PUSH
41652: LD_INT 0
41654: PUSH
41655: EMPTY
41656: LIST
41657: LIST
41658: PUSH
41659: LD_INT 2
41661: NEG
41662: PUSH
41663: LD_INT 1
41665: NEG
41666: PUSH
41667: EMPTY
41668: LIST
41669: LIST
41670: PUSH
41671: LD_INT 2
41673: NEG
41674: PUSH
41675: LD_INT 1
41677: PUSH
41678: EMPTY
41679: LIST
41680: LIST
41681: PUSH
41682: LD_INT 3
41684: NEG
41685: PUSH
41686: LD_INT 0
41688: PUSH
41689: EMPTY
41690: LIST
41691: LIST
41692: PUSH
41693: LD_INT 3
41695: NEG
41696: PUSH
41697: LD_INT 1
41699: NEG
41700: PUSH
41701: EMPTY
41702: LIST
41703: LIST
41704: PUSH
41705: EMPTY
41706: LIST
41707: LIST
41708: LIST
41709: LIST
41710: LIST
41711: LIST
41712: LIST
41713: LIST
41714: LIST
41715: LIST
41716: LIST
41717: LIST
41718: LIST
41719: LIST
41720: LIST
41721: LIST
41722: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41723: LD_ADDR_VAR 0 13
41727: PUSH
41728: LD_INT 0
41730: PUSH
41731: LD_INT 0
41733: PUSH
41734: EMPTY
41735: LIST
41736: LIST
41737: PUSH
41738: LD_INT 0
41740: PUSH
41741: LD_INT 1
41743: NEG
41744: PUSH
41745: EMPTY
41746: LIST
41747: LIST
41748: PUSH
41749: LD_INT 1
41751: PUSH
41752: LD_INT 0
41754: PUSH
41755: EMPTY
41756: LIST
41757: LIST
41758: PUSH
41759: LD_INT 1
41761: PUSH
41762: LD_INT 1
41764: PUSH
41765: EMPTY
41766: LIST
41767: LIST
41768: PUSH
41769: LD_INT 0
41771: PUSH
41772: LD_INT 1
41774: PUSH
41775: EMPTY
41776: LIST
41777: LIST
41778: PUSH
41779: LD_INT 1
41781: NEG
41782: PUSH
41783: LD_INT 0
41785: PUSH
41786: EMPTY
41787: LIST
41788: LIST
41789: PUSH
41790: LD_INT 1
41792: NEG
41793: PUSH
41794: LD_INT 1
41796: NEG
41797: PUSH
41798: EMPTY
41799: LIST
41800: LIST
41801: PUSH
41802: LD_INT 1
41804: NEG
41805: PUSH
41806: LD_INT 2
41808: NEG
41809: PUSH
41810: EMPTY
41811: LIST
41812: LIST
41813: PUSH
41814: LD_INT 2
41816: PUSH
41817: LD_INT 1
41819: PUSH
41820: EMPTY
41821: LIST
41822: LIST
41823: PUSH
41824: LD_INT 2
41826: PUSH
41827: LD_INT 2
41829: PUSH
41830: EMPTY
41831: LIST
41832: LIST
41833: PUSH
41834: LD_INT 1
41836: PUSH
41837: LD_INT 2
41839: PUSH
41840: EMPTY
41841: LIST
41842: LIST
41843: PUSH
41844: LD_INT 2
41846: NEG
41847: PUSH
41848: LD_INT 1
41850: NEG
41851: PUSH
41852: EMPTY
41853: LIST
41854: LIST
41855: PUSH
41856: LD_INT 2
41858: NEG
41859: PUSH
41860: LD_INT 2
41862: NEG
41863: PUSH
41864: EMPTY
41865: LIST
41866: LIST
41867: PUSH
41868: LD_INT 2
41870: NEG
41871: PUSH
41872: LD_INT 3
41874: NEG
41875: PUSH
41876: EMPTY
41877: LIST
41878: LIST
41879: PUSH
41880: LD_INT 3
41882: NEG
41883: PUSH
41884: LD_INT 2
41886: NEG
41887: PUSH
41888: EMPTY
41889: LIST
41890: LIST
41891: PUSH
41892: LD_INT 3
41894: NEG
41895: PUSH
41896: LD_INT 3
41898: NEG
41899: PUSH
41900: EMPTY
41901: LIST
41902: LIST
41903: PUSH
41904: EMPTY
41905: LIST
41906: LIST
41907: LIST
41908: LIST
41909: LIST
41910: LIST
41911: LIST
41912: LIST
41913: LIST
41914: LIST
41915: LIST
41916: LIST
41917: LIST
41918: LIST
41919: LIST
41920: LIST
41921: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
41922: LD_ADDR_VAR 0 14
41926: PUSH
41927: LD_INT 0
41929: PUSH
41930: LD_INT 0
41932: PUSH
41933: EMPTY
41934: LIST
41935: LIST
41936: PUSH
41937: LD_INT 0
41939: PUSH
41940: LD_INT 1
41942: NEG
41943: PUSH
41944: EMPTY
41945: LIST
41946: LIST
41947: PUSH
41948: LD_INT 1
41950: PUSH
41951: LD_INT 0
41953: PUSH
41954: EMPTY
41955: LIST
41956: LIST
41957: PUSH
41958: LD_INT 1
41960: PUSH
41961: LD_INT 1
41963: PUSH
41964: EMPTY
41965: LIST
41966: LIST
41967: PUSH
41968: LD_INT 0
41970: PUSH
41971: LD_INT 1
41973: PUSH
41974: EMPTY
41975: LIST
41976: LIST
41977: PUSH
41978: LD_INT 1
41980: NEG
41981: PUSH
41982: LD_INT 0
41984: PUSH
41985: EMPTY
41986: LIST
41987: LIST
41988: PUSH
41989: LD_INT 1
41991: NEG
41992: PUSH
41993: LD_INT 1
41995: NEG
41996: PUSH
41997: EMPTY
41998: LIST
41999: LIST
42000: PUSH
42001: LD_INT 1
42003: NEG
42004: PUSH
42005: LD_INT 2
42007: NEG
42008: PUSH
42009: EMPTY
42010: LIST
42011: LIST
42012: PUSH
42013: LD_INT 0
42015: PUSH
42016: LD_INT 2
42018: NEG
42019: PUSH
42020: EMPTY
42021: LIST
42022: LIST
42023: PUSH
42024: LD_INT 1
42026: PUSH
42027: LD_INT 1
42029: NEG
42030: PUSH
42031: EMPTY
42032: LIST
42033: LIST
42034: PUSH
42035: LD_INT 1
42037: PUSH
42038: LD_INT 2
42040: PUSH
42041: EMPTY
42042: LIST
42043: LIST
42044: PUSH
42045: LD_INT 0
42047: PUSH
42048: LD_INT 2
42050: PUSH
42051: EMPTY
42052: LIST
42053: LIST
42054: PUSH
42055: LD_INT 1
42057: NEG
42058: PUSH
42059: LD_INT 1
42061: PUSH
42062: EMPTY
42063: LIST
42064: LIST
42065: PUSH
42066: LD_INT 1
42068: NEG
42069: PUSH
42070: LD_INT 3
42072: NEG
42073: PUSH
42074: EMPTY
42075: LIST
42076: LIST
42077: PUSH
42078: LD_INT 0
42080: PUSH
42081: LD_INT 3
42083: NEG
42084: PUSH
42085: EMPTY
42086: LIST
42087: LIST
42088: PUSH
42089: LD_INT 1
42091: PUSH
42092: LD_INT 2
42094: NEG
42095: PUSH
42096: EMPTY
42097: LIST
42098: LIST
42099: PUSH
42100: EMPTY
42101: LIST
42102: LIST
42103: LIST
42104: LIST
42105: LIST
42106: LIST
42107: LIST
42108: LIST
42109: LIST
42110: LIST
42111: LIST
42112: LIST
42113: LIST
42114: LIST
42115: LIST
42116: LIST
42117: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
42118: LD_ADDR_VAR 0 15
42122: PUSH
42123: LD_INT 0
42125: PUSH
42126: LD_INT 0
42128: PUSH
42129: EMPTY
42130: LIST
42131: LIST
42132: PUSH
42133: LD_INT 0
42135: PUSH
42136: LD_INT 1
42138: NEG
42139: PUSH
42140: EMPTY
42141: LIST
42142: LIST
42143: PUSH
42144: LD_INT 1
42146: PUSH
42147: LD_INT 0
42149: PUSH
42150: EMPTY
42151: LIST
42152: LIST
42153: PUSH
42154: LD_INT 1
42156: PUSH
42157: LD_INT 1
42159: PUSH
42160: EMPTY
42161: LIST
42162: LIST
42163: PUSH
42164: LD_INT 0
42166: PUSH
42167: LD_INT 1
42169: PUSH
42170: EMPTY
42171: LIST
42172: LIST
42173: PUSH
42174: LD_INT 1
42176: NEG
42177: PUSH
42178: LD_INT 0
42180: PUSH
42181: EMPTY
42182: LIST
42183: LIST
42184: PUSH
42185: LD_INT 1
42187: NEG
42188: PUSH
42189: LD_INT 1
42191: NEG
42192: PUSH
42193: EMPTY
42194: LIST
42195: LIST
42196: PUSH
42197: LD_INT 1
42199: PUSH
42200: LD_INT 1
42202: NEG
42203: PUSH
42204: EMPTY
42205: LIST
42206: LIST
42207: PUSH
42208: LD_INT 2
42210: PUSH
42211: LD_INT 0
42213: PUSH
42214: EMPTY
42215: LIST
42216: LIST
42217: PUSH
42218: LD_INT 2
42220: PUSH
42221: LD_INT 1
42223: PUSH
42224: EMPTY
42225: LIST
42226: LIST
42227: PUSH
42228: LD_INT 1
42230: NEG
42231: PUSH
42232: LD_INT 1
42234: PUSH
42235: EMPTY
42236: LIST
42237: LIST
42238: PUSH
42239: LD_INT 2
42241: NEG
42242: PUSH
42243: LD_INT 0
42245: PUSH
42246: EMPTY
42247: LIST
42248: LIST
42249: PUSH
42250: LD_INT 2
42252: NEG
42253: PUSH
42254: LD_INT 1
42256: NEG
42257: PUSH
42258: EMPTY
42259: LIST
42260: LIST
42261: PUSH
42262: LD_INT 2
42264: PUSH
42265: LD_INT 1
42267: NEG
42268: PUSH
42269: EMPTY
42270: LIST
42271: LIST
42272: PUSH
42273: LD_INT 3
42275: PUSH
42276: LD_INT 0
42278: PUSH
42279: EMPTY
42280: LIST
42281: LIST
42282: PUSH
42283: LD_INT 3
42285: PUSH
42286: LD_INT 1
42288: PUSH
42289: EMPTY
42290: LIST
42291: LIST
42292: PUSH
42293: EMPTY
42294: LIST
42295: LIST
42296: LIST
42297: LIST
42298: LIST
42299: LIST
42300: LIST
42301: LIST
42302: LIST
42303: LIST
42304: LIST
42305: LIST
42306: LIST
42307: LIST
42308: LIST
42309: LIST
42310: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
42311: LD_ADDR_VAR 0 16
42315: PUSH
42316: LD_INT 0
42318: PUSH
42319: LD_INT 0
42321: PUSH
42322: EMPTY
42323: LIST
42324: LIST
42325: PUSH
42326: LD_INT 0
42328: PUSH
42329: LD_INT 1
42331: NEG
42332: PUSH
42333: EMPTY
42334: LIST
42335: LIST
42336: PUSH
42337: LD_INT 1
42339: PUSH
42340: LD_INT 0
42342: PUSH
42343: EMPTY
42344: LIST
42345: LIST
42346: PUSH
42347: LD_INT 1
42349: PUSH
42350: LD_INT 1
42352: PUSH
42353: EMPTY
42354: LIST
42355: LIST
42356: PUSH
42357: LD_INT 0
42359: PUSH
42360: LD_INT 1
42362: PUSH
42363: EMPTY
42364: LIST
42365: LIST
42366: PUSH
42367: LD_INT 1
42369: NEG
42370: PUSH
42371: LD_INT 0
42373: PUSH
42374: EMPTY
42375: LIST
42376: LIST
42377: PUSH
42378: LD_INT 1
42380: NEG
42381: PUSH
42382: LD_INT 1
42384: NEG
42385: PUSH
42386: EMPTY
42387: LIST
42388: LIST
42389: PUSH
42390: LD_INT 1
42392: NEG
42393: PUSH
42394: LD_INT 2
42396: NEG
42397: PUSH
42398: EMPTY
42399: LIST
42400: LIST
42401: PUSH
42402: LD_INT 2
42404: PUSH
42405: LD_INT 1
42407: PUSH
42408: EMPTY
42409: LIST
42410: LIST
42411: PUSH
42412: LD_INT 2
42414: PUSH
42415: LD_INT 2
42417: PUSH
42418: EMPTY
42419: LIST
42420: LIST
42421: PUSH
42422: LD_INT 1
42424: PUSH
42425: LD_INT 2
42427: PUSH
42428: EMPTY
42429: LIST
42430: LIST
42431: PUSH
42432: LD_INT 2
42434: NEG
42435: PUSH
42436: LD_INT 1
42438: NEG
42439: PUSH
42440: EMPTY
42441: LIST
42442: LIST
42443: PUSH
42444: LD_INT 2
42446: NEG
42447: PUSH
42448: LD_INT 2
42450: NEG
42451: PUSH
42452: EMPTY
42453: LIST
42454: LIST
42455: PUSH
42456: LD_INT 3
42458: PUSH
42459: LD_INT 2
42461: PUSH
42462: EMPTY
42463: LIST
42464: LIST
42465: PUSH
42466: LD_INT 3
42468: PUSH
42469: LD_INT 3
42471: PUSH
42472: EMPTY
42473: LIST
42474: LIST
42475: PUSH
42476: LD_INT 2
42478: PUSH
42479: LD_INT 3
42481: PUSH
42482: EMPTY
42483: LIST
42484: LIST
42485: PUSH
42486: EMPTY
42487: LIST
42488: LIST
42489: LIST
42490: LIST
42491: LIST
42492: LIST
42493: LIST
42494: LIST
42495: LIST
42496: LIST
42497: LIST
42498: LIST
42499: LIST
42500: LIST
42501: LIST
42502: LIST
42503: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42504: LD_ADDR_VAR 0 17
42508: PUSH
42509: LD_INT 0
42511: PUSH
42512: LD_INT 0
42514: PUSH
42515: EMPTY
42516: LIST
42517: LIST
42518: PUSH
42519: LD_INT 0
42521: PUSH
42522: LD_INT 1
42524: NEG
42525: PUSH
42526: EMPTY
42527: LIST
42528: LIST
42529: PUSH
42530: LD_INT 1
42532: PUSH
42533: LD_INT 0
42535: PUSH
42536: EMPTY
42537: LIST
42538: LIST
42539: PUSH
42540: LD_INT 1
42542: PUSH
42543: LD_INT 1
42545: PUSH
42546: EMPTY
42547: LIST
42548: LIST
42549: PUSH
42550: LD_INT 0
42552: PUSH
42553: LD_INT 1
42555: PUSH
42556: EMPTY
42557: LIST
42558: LIST
42559: PUSH
42560: LD_INT 1
42562: NEG
42563: PUSH
42564: LD_INT 0
42566: PUSH
42567: EMPTY
42568: LIST
42569: LIST
42570: PUSH
42571: LD_INT 1
42573: NEG
42574: PUSH
42575: LD_INT 1
42577: NEG
42578: PUSH
42579: EMPTY
42580: LIST
42581: LIST
42582: PUSH
42583: LD_INT 1
42585: NEG
42586: PUSH
42587: LD_INT 2
42589: NEG
42590: PUSH
42591: EMPTY
42592: LIST
42593: LIST
42594: PUSH
42595: LD_INT 0
42597: PUSH
42598: LD_INT 2
42600: NEG
42601: PUSH
42602: EMPTY
42603: LIST
42604: LIST
42605: PUSH
42606: LD_INT 1
42608: PUSH
42609: LD_INT 1
42611: NEG
42612: PUSH
42613: EMPTY
42614: LIST
42615: LIST
42616: PUSH
42617: LD_INT 2
42619: PUSH
42620: LD_INT 0
42622: PUSH
42623: EMPTY
42624: LIST
42625: LIST
42626: PUSH
42627: LD_INT 2
42629: PUSH
42630: LD_INT 1
42632: PUSH
42633: EMPTY
42634: LIST
42635: LIST
42636: PUSH
42637: LD_INT 2
42639: PUSH
42640: LD_INT 2
42642: PUSH
42643: EMPTY
42644: LIST
42645: LIST
42646: PUSH
42647: LD_INT 1
42649: PUSH
42650: LD_INT 2
42652: PUSH
42653: EMPTY
42654: LIST
42655: LIST
42656: PUSH
42657: LD_INT 0
42659: PUSH
42660: LD_INT 2
42662: PUSH
42663: EMPTY
42664: LIST
42665: LIST
42666: PUSH
42667: LD_INT 1
42669: NEG
42670: PUSH
42671: LD_INT 1
42673: PUSH
42674: EMPTY
42675: LIST
42676: LIST
42677: PUSH
42678: LD_INT 2
42680: NEG
42681: PUSH
42682: LD_INT 0
42684: PUSH
42685: EMPTY
42686: LIST
42687: LIST
42688: PUSH
42689: LD_INT 2
42691: NEG
42692: PUSH
42693: LD_INT 1
42695: NEG
42696: PUSH
42697: EMPTY
42698: LIST
42699: LIST
42700: PUSH
42701: LD_INT 2
42703: NEG
42704: PUSH
42705: LD_INT 2
42707: NEG
42708: PUSH
42709: EMPTY
42710: LIST
42711: LIST
42712: PUSH
42713: EMPTY
42714: LIST
42715: LIST
42716: LIST
42717: LIST
42718: LIST
42719: LIST
42720: LIST
42721: LIST
42722: LIST
42723: LIST
42724: LIST
42725: LIST
42726: LIST
42727: LIST
42728: LIST
42729: LIST
42730: LIST
42731: LIST
42732: LIST
42733: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42734: LD_ADDR_VAR 0 18
42738: PUSH
42739: LD_INT 0
42741: PUSH
42742: LD_INT 0
42744: PUSH
42745: EMPTY
42746: LIST
42747: LIST
42748: PUSH
42749: LD_INT 0
42751: PUSH
42752: LD_INT 1
42754: NEG
42755: PUSH
42756: EMPTY
42757: LIST
42758: LIST
42759: PUSH
42760: LD_INT 1
42762: PUSH
42763: LD_INT 0
42765: PUSH
42766: EMPTY
42767: LIST
42768: LIST
42769: PUSH
42770: LD_INT 1
42772: PUSH
42773: LD_INT 1
42775: PUSH
42776: EMPTY
42777: LIST
42778: LIST
42779: PUSH
42780: LD_INT 0
42782: PUSH
42783: LD_INT 1
42785: PUSH
42786: EMPTY
42787: LIST
42788: LIST
42789: PUSH
42790: LD_INT 1
42792: NEG
42793: PUSH
42794: LD_INT 0
42796: PUSH
42797: EMPTY
42798: LIST
42799: LIST
42800: PUSH
42801: LD_INT 1
42803: NEG
42804: PUSH
42805: LD_INT 1
42807: NEG
42808: PUSH
42809: EMPTY
42810: LIST
42811: LIST
42812: PUSH
42813: LD_INT 1
42815: NEG
42816: PUSH
42817: LD_INT 2
42819: NEG
42820: PUSH
42821: EMPTY
42822: LIST
42823: LIST
42824: PUSH
42825: LD_INT 0
42827: PUSH
42828: LD_INT 2
42830: NEG
42831: PUSH
42832: EMPTY
42833: LIST
42834: LIST
42835: PUSH
42836: LD_INT 1
42838: PUSH
42839: LD_INT 1
42841: NEG
42842: PUSH
42843: EMPTY
42844: LIST
42845: LIST
42846: PUSH
42847: LD_INT 2
42849: PUSH
42850: LD_INT 0
42852: PUSH
42853: EMPTY
42854: LIST
42855: LIST
42856: PUSH
42857: LD_INT 2
42859: PUSH
42860: LD_INT 1
42862: PUSH
42863: EMPTY
42864: LIST
42865: LIST
42866: PUSH
42867: LD_INT 2
42869: PUSH
42870: LD_INT 2
42872: PUSH
42873: EMPTY
42874: LIST
42875: LIST
42876: PUSH
42877: LD_INT 1
42879: PUSH
42880: LD_INT 2
42882: PUSH
42883: EMPTY
42884: LIST
42885: LIST
42886: PUSH
42887: LD_INT 0
42889: PUSH
42890: LD_INT 2
42892: PUSH
42893: EMPTY
42894: LIST
42895: LIST
42896: PUSH
42897: LD_INT 1
42899: NEG
42900: PUSH
42901: LD_INT 1
42903: PUSH
42904: EMPTY
42905: LIST
42906: LIST
42907: PUSH
42908: LD_INT 2
42910: NEG
42911: PUSH
42912: LD_INT 0
42914: PUSH
42915: EMPTY
42916: LIST
42917: LIST
42918: PUSH
42919: LD_INT 2
42921: NEG
42922: PUSH
42923: LD_INT 1
42925: NEG
42926: PUSH
42927: EMPTY
42928: LIST
42929: LIST
42930: PUSH
42931: LD_INT 2
42933: NEG
42934: PUSH
42935: LD_INT 2
42937: NEG
42938: PUSH
42939: EMPTY
42940: LIST
42941: LIST
42942: PUSH
42943: EMPTY
42944: LIST
42945: LIST
42946: LIST
42947: LIST
42948: LIST
42949: LIST
42950: LIST
42951: LIST
42952: LIST
42953: LIST
42954: LIST
42955: LIST
42956: LIST
42957: LIST
42958: LIST
42959: LIST
42960: LIST
42961: LIST
42962: LIST
42963: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42964: LD_ADDR_VAR 0 19
42968: PUSH
42969: LD_INT 0
42971: PUSH
42972: LD_INT 0
42974: PUSH
42975: EMPTY
42976: LIST
42977: LIST
42978: PUSH
42979: LD_INT 0
42981: PUSH
42982: LD_INT 1
42984: NEG
42985: PUSH
42986: EMPTY
42987: LIST
42988: LIST
42989: PUSH
42990: LD_INT 1
42992: PUSH
42993: LD_INT 0
42995: PUSH
42996: EMPTY
42997: LIST
42998: LIST
42999: PUSH
43000: LD_INT 1
43002: PUSH
43003: LD_INT 1
43005: PUSH
43006: EMPTY
43007: LIST
43008: LIST
43009: PUSH
43010: LD_INT 0
43012: PUSH
43013: LD_INT 1
43015: PUSH
43016: EMPTY
43017: LIST
43018: LIST
43019: PUSH
43020: LD_INT 1
43022: NEG
43023: PUSH
43024: LD_INT 0
43026: PUSH
43027: EMPTY
43028: LIST
43029: LIST
43030: PUSH
43031: LD_INT 1
43033: NEG
43034: PUSH
43035: LD_INT 1
43037: NEG
43038: PUSH
43039: EMPTY
43040: LIST
43041: LIST
43042: PUSH
43043: LD_INT 1
43045: NEG
43046: PUSH
43047: LD_INT 2
43049: NEG
43050: PUSH
43051: EMPTY
43052: LIST
43053: LIST
43054: PUSH
43055: LD_INT 0
43057: PUSH
43058: LD_INT 2
43060: NEG
43061: PUSH
43062: EMPTY
43063: LIST
43064: LIST
43065: PUSH
43066: LD_INT 1
43068: PUSH
43069: LD_INT 1
43071: NEG
43072: PUSH
43073: EMPTY
43074: LIST
43075: LIST
43076: PUSH
43077: LD_INT 2
43079: PUSH
43080: LD_INT 0
43082: PUSH
43083: EMPTY
43084: LIST
43085: LIST
43086: PUSH
43087: LD_INT 2
43089: PUSH
43090: LD_INT 1
43092: PUSH
43093: EMPTY
43094: LIST
43095: LIST
43096: PUSH
43097: LD_INT 2
43099: PUSH
43100: LD_INT 2
43102: PUSH
43103: EMPTY
43104: LIST
43105: LIST
43106: PUSH
43107: LD_INT 1
43109: PUSH
43110: LD_INT 2
43112: PUSH
43113: EMPTY
43114: LIST
43115: LIST
43116: PUSH
43117: LD_INT 0
43119: PUSH
43120: LD_INT 2
43122: PUSH
43123: EMPTY
43124: LIST
43125: LIST
43126: PUSH
43127: LD_INT 1
43129: NEG
43130: PUSH
43131: LD_INT 1
43133: PUSH
43134: EMPTY
43135: LIST
43136: LIST
43137: PUSH
43138: LD_INT 2
43140: NEG
43141: PUSH
43142: LD_INT 0
43144: PUSH
43145: EMPTY
43146: LIST
43147: LIST
43148: PUSH
43149: LD_INT 2
43151: NEG
43152: PUSH
43153: LD_INT 1
43155: NEG
43156: PUSH
43157: EMPTY
43158: LIST
43159: LIST
43160: PUSH
43161: LD_INT 2
43163: NEG
43164: PUSH
43165: LD_INT 2
43167: NEG
43168: PUSH
43169: EMPTY
43170: LIST
43171: LIST
43172: PUSH
43173: EMPTY
43174: LIST
43175: LIST
43176: LIST
43177: LIST
43178: LIST
43179: LIST
43180: LIST
43181: LIST
43182: LIST
43183: LIST
43184: LIST
43185: LIST
43186: LIST
43187: LIST
43188: LIST
43189: LIST
43190: LIST
43191: LIST
43192: LIST
43193: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43194: LD_ADDR_VAR 0 20
43198: PUSH
43199: LD_INT 0
43201: PUSH
43202: LD_INT 0
43204: PUSH
43205: EMPTY
43206: LIST
43207: LIST
43208: PUSH
43209: LD_INT 0
43211: PUSH
43212: LD_INT 1
43214: NEG
43215: PUSH
43216: EMPTY
43217: LIST
43218: LIST
43219: PUSH
43220: LD_INT 1
43222: PUSH
43223: LD_INT 0
43225: PUSH
43226: EMPTY
43227: LIST
43228: LIST
43229: PUSH
43230: LD_INT 1
43232: PUSH
43233: LD_INT 1
43235: PUSH
43236: EMPTY
43237: LIST
43238: LIST
43239: PUSH
43240: LD_INT 0
43242: PUSH
43243: LD_INT 1
43245: PUSH
43246: EMPTY
43247: LIST
43248: LIST
43249: PUSH
43250: LD_INT 1
43252: NEG
43253: PUSH
43254: LD_INT 0
43256: PUSH
43257: EMPTY
43258: LIST
43259: LIST
43260: PUSH
43261: LD_INT 1
43263: NEG
43264: PUSH
43265: LD_INT 1
43267: NEG
43268: PUSH
43269: EMPTY
43270: LIST
43271: LIST
43272: PUSH
43273: LD_INT 1
43275: NEG
43276: PUSH
43277: LD_INT 2
43279: NEG
43280: PUSH
43281: EMPTY
43282: LIST
43283: LIST
43284: PUSH
43285: LD_INT 0
43287: PUSH
43288: LD_INT 2
43290: NEG
43291: PUSH
43292: EMPTY
43293: LIST
43294: LIST
43295: PUSH
43296: LD_INT 1
43298: PUSH
43299: LD_INT 1
43301: NEG
43302: PUSH
43303: EMPTY
43304: LIST
43305: LIST
43306: PUSH
43307: LD_INT 2
43309: PUSH
43310: LD_INT 0
43312: PUSH
43313: EMPTY
43314: LIST
43315: LIST
43316: PUSH
43317: LD_INT 2
43319: PUSH
43320: LD_INT 1
43322: PUSH
43323: EMPTY
43324: LIST
43325: LIST
43326: PUSH
43327: LD_INT 2
43329: PUSH
43330: LD_INT 2
43332: PUSH
43333: EMPTY
43334: LIST
43335: LIST
43336: PUSH
43337: LD_INT 1
43339: PUSH
43340: LD_INT 2
43342: PUSH
43343: EMPTY
43344: LIST
43345: LIST
43346: PUSH
43347: LD_INT 0
43349: PUSH
43350: LD_INT 2
43352: PUSH
43353: EMPTY
43354: LIST
43355: LIST
43356: PUSH
43357: LD_INT 1
43359: NEG
43360: PUSH
43361: LD_INT 1
43363: PUSH
43364: EMPTY
43365: LIST
43366: LIST
43367: PUSH
43368: LD_INT 2
43370: NEG
43371: PUSH
43372: LD_INT 0
43374: PUSH
43375: EMPTY
43376: LIST
43377: LIST
43378: PUSH
43379: LD_INT 2
43381: NEG
43382: PUSH
43383: LD_INT 1
43385: NEG
43386: PUSH
43387: EMPTY
43388: LIST
43389: LIST
43390: PUSH
43391: LD_INT 2
43393: NEG
43394: PUSH
43395: LD_INT 2
43397: NEG
43398: PUSH
43399: EMPTY
43400: LIST
43401: LIST
43402: PUSH
43403: EMPTY
43404: LIST
43405: LIST
43406: LIST
43407: LIST
43408: LIST
43409: LIST
43410: LIST
43411: LIST
43412: LIST
43413: LIST
43414: LIST
43415: LIST
43416: LIST
43417: LIST
43418: LIST
43419: LIST
43420: LIST
43421: LIST
43422: LIST
43423: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43424: LD_ADDR_VAR 0 21
43428: PUSH
43429: LD_INT 0
43431: PUSH
43432: LD_INT 0
43434: PUSH
43435: EMPTY
43436: LIST
43437: LIST
43438: PUSH
43439: LD_INT 0
43441: PUSH
43442: LD_INT 1
43444: NEG
43445: PUSH
43446: EMPTY
43447: LIST
43448: LIST
43449: PUSH
43450: LD_INT 1
43452: PUSH
43453: LD_INT 0
43455: PUSH
43456: EMPTY
43457: LIST
43458: LIST
43459: PUSH
43460: LD_INT 1
43462: PUSH
43463: LD_INT 1
43465: PUSH
43466: EMPTY
43467: LIST
43468: LIST
43469: PUSH
43470: LD_INT 0
43472: PUSH
43473: LD_INT 1
43475: PUSH
43476: EMPTY
43477: LIST
43478: LIST
43479: PUSH
43480: LD_INT 1
43482: NEG
43483: PUSH
43484: LD_INT 0
43486: PUSH
43487: EMPTY
43488: LIST
43489: LIST
43490: PUSH
43491: LD_INT 1
43493: NEG
43494: PUSH
43495: LD_INT 1
43497: NEG
43498: PUSH
43499: EMPTY
43500: LIST
43501: LIST
43502: PUSH
43503: LD_INT 1
43505: NEG
43506: PUSH
43507: LD_INT 2
43509: NEG
43510: PUSH
43511: EMPTY
43512: LIST
43513: LIST
43514: PUSH
43515: LD_INT 0
43517: PUSH
43518: LD_INT 2
43520: NEG
43521: PUSH
43522: EMPTY
43523: LIST
43524: LIST
43525: PUSH
43526: LD_INT 1
43528: PUSH
43529: LD_INT 1
43531: NEG
43532: PUSH
43533: EMPTY
43534: LIST
43535: LIST
43536: PUSH
43537: LD_INT 2
43539: PUSH
43540: LD_INT 0
43542: PUSH
43543: EMPTY
43544: LIST
43545: LIST
43546: PUSH
43547: LD_INT 2
43549: PUSH
43550: LD_INT 1
43552: PUSH
43553: EMPTY
43554: LIST
43555: LIST
43556: PUSH
43557: LD_INT 2
43559: PUSH
43560: LD_INT 2
43562: PUSH
43563: EMPTY
43564: LIST
43565: LIST
43566: PUSH
43567: LD_INT 1
43569: PUSH
43570: LD_INT 2
43572: PUSH
43573: EMPTY
43574: LIST
43575: LIST
43576: PUSH
43577: LD_INT 0
43579: PUSH
43580: LD_INT 2
43582: PUSH
43583: EMPTY
43584: LIST
43585: LIST
43586: PUSH
43587: LD_INT 1
43589: NEG
43590: PUSH
43591: LD_INT 1
43593: PUSH
43594: EMPTY
43595: LIST
43596: LIST
43597: PUSH
43598: LD_INT 2
43600: NEG
43601: PUSH
43602: LD_INT 0
43604: PUSH
43605: EMPTY
43606: LIST
43607: LIST
43608: PUSH
43609: LD_INT 2
43611: NEG
43612: PUSH
43613: LD_INT 1
43615: NEG
43616: PUSH
43617: EMPTY
43618: LIST
43619: LIST
43620: PUSH
43621: LD_INT 2
43623: NEG
43624: PUSH
43625: LD_INT 2
43627: NEG
43628: PUSH
43629: EMPTY
43630: LIST
43631: LIST
43632: PUSH
43633: EMPTY
43634: LIST
43635: LIST
43636: LIST
43637: LIST
43638: LIST
43639: LIST
43640: LIST
43641: LIST
43642: LIST
43643: LIST
43644: LIST
43645: LIST
43646: LIST
43647: LIST
43648: LIST
43649: LIST
43650: LIST
43651: LIST
43652: LIST
43653: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43654: LD_ADDR_VAR 0 22
43658: PUSH
43659: LD_INT 0
43661: PUSH
43662: LD_INT 0
43664: PUSH
43665: EMPTY
43666: LIST
43667: LIST
43668: PUSH
43669: LD_INT 0
43671: PUSH
43672: LD_INT 1
43674: NEG
43675: PUSH
43676: EMPTY
43677: LIST
43678: LIST
43679: PUSH
43680: LD_INT 1
43682: PUSH
43683: LD_INT 0
43685: PUSH
43686: EMPTY
43687: LIST
43688: LIST
43689: PUSH
43690: LD_INT 1
43692: PUSH
43693: LD_INT 1
43695: PUSH
43696: EMPTY
43697: LIST
43698: LIST
43699: PUSH
43700: LD_INT 0
43702: PUSH
43703: LD_INT 1
43705: PUSH
43706: EMPTY
43707: LIST
43708: LIST
43709: PUSH
43710: LD_INT 1
43712: NEG
43713: PUSH
43714: LD_INT 0
43716: PUSH
43717: EMPTY
43718: LIST
43719: LIST
43720: PUSH
43721: LD_INT 1
43723: NEG
43724: PUSH
43725: LD_INT 1
43727: NEG
43728: PUSH
43729: EMPTY
43730: LIST
43731: LIST
43732: PUSH
43733: LD_INT 1
43735: NEG
43736: PUSH
43737: LD_INT 2
43739: NEG
43740: PUSH
43741: EMPTY
43742: LIST
43743: LIST
43744: PUSH
43745: LD_INT 0
43747: PUSH
43748: LD_INT 2
43750: NEG
43751: PUSH
43752: EMPTY
43753: LIST
43754: LIST
43755: PUSH
43756: LD_INT 1
43758: PUSH
43759: LD_INT 1
43761: NEG
43762: PUSH
43763: EMPTY
43764: LIST
43765: LIST
43766: PUSH
43767: LD_INT 2
43769: PUSH
43770: LD_INT 0
43772: PUSH
43773: EMPTY
43774: LIST
43775: LIST
43776: PUSH
43777: LD_INT 2
43779: PUSH
43780: LD_INT 1
43782: PUSH
43783: EMPTY
43784: LIST
43785: LIST
43786: PUSH
43787: LD_INT 2
43789: PUSH
43790: LD_INT 2
43792: PUSH
43793: EMPTY
43794: LIST
43795: LIST
43796: PUSH
43797: LD_INT 1
43799: PUSH
43800: LD_INT 2
43802: PUSH
43803: EMPTY
43804: LIST
43805: LIST
43806: PUSH
43807: LD_INT 0
43809: PUSH
43810: LD_INT 2
43812: PUSH
43813: EMPTY
43814: LIST
43815: LIST
43816: PUSH
43817: LD_INT 1
43819: NEG
43820: PUSH
43821: LD_INT 1
43823: PUSH
43824: EMPTY
43825: LIST
43826: LIST
43827: PUSH
43828: LD_INT 2
43830: NEG
43831: PUSH
43832: LD_INT 0
43834: PUSH
43835: EMPTY
43836: LIST
43837: LIST
43838: PUSH
43839: LD_INT 2
43841: NEG
43842: PUSH
43843: LD_INT 1
43845: NEG
43846: PUSH
43847: EMPTY
43848: LIST
43849: LIST
43850: PUSH
43851: LD_INT 2
43853: NEG
43854: PUSH
43855: LD_INT 2
43857: NEG
43858: PUSH
43859: EMPTY
43860: LIST
43861: LIST
43862: PUSH
43863: EMPTY
43864: LIST
43865: LIST
43866: LIST
43867: LIST
43868: LIST
43869: LIST
43870: LIST
43871: LIST
43872: LIST
43873: LIST
43874: LIST
43875: LIST
43876: LIST
43877: LIST
43878: LIST
43879: LIST
43880: LIST
43881: LIST
43882: LIST
43883: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
43884: LD_ADDR_VAR 0 23
43888: PUSH
43889: LD_INT 0
43891: PUSH
43892: LD_INT 0
43894: PUSH
43895: EMPTY
43896: LIST
43897: LIST
43898: PUSH
43899: LD_INT 0
43901: PUSH
43902: LD_INT 1
43904: NEG
43905: PUSH
43906: EMPTY
43907: LIST
43908: LIST
43909: PUSH
43910: LD_INT 1
43912: PUSH
43913: LD_INT 0
43915: PUSH
43916: EMPTY
43917: LIST
43918: LIST
43919: PUSH
43920: LD_INT 1
43922: PUSH
43923: LD_INT 1
43925: PUSH
43926: EMPTY
43927: LIST
43928: LIST
43929: PUSH
43930: LD_INT 0
43932: PUSH
43933: LD_INT 1
43935: PUSH
43936: EMPTY
43937: LIST
43938: LIST
43939: PUSH
43940: LD_INT 1
43942: NEG
43943: PUSH
43944: LD_INT 0
43946: PUSH
43947: EMPTY
43948: LIST
43949: LIST
43950: PUSH
43951: LD_INT 1
43953: NEG
43954: PUSH
43955: LD_INT 1
43957: NEG
43958: PUSH
43959: EMPTY
43960: LIST
43961: LIST
43962: PUSH
43963: LD_INT 1
43965: NEG
43966: PUSH
43967: LD_INT 2
43969: NEG
43970: PUSH
43971: EMPTY
43972: LIST
43973: LIST
43974: PUSH
43975: LD_INT 0
43977: PUSH
43978: LD_INT 2
43980: NEG
43981: PUSH
43982: EMPTY
43983: LIST
43984: LIST
43985: PUSH
43986: LD_INT 1
43988: PUSH
43989: LD_INT 1
43991: NEG
43992: PUSH
43993: EMPTY
43994: LIST
43995: LIST
43996: PUSH
43997: LD_INT 2
43999: PUSH
44000: LD_INT 0
44002: PUSH
44003: EMPTY
44004: LIST
44005: LIST
44006: PUSH
44007: LD_INT 2
44009: PUSH
44010: LD_INT 1
44012: PUSH
44013: EMPTY
44014: LIST
44015: LIST
44016: PUSH
44017: LD_INT 2
44019: PUSH
44020: LD_INT 2
44022: PUSH
44023: EMPTY
44024: LIST
44025: LIST
44026: PUSH
44027: LD_INT 1
44029: PUSH
44030: LD_INT 2
44032: PUSH
44033: EMPTY
44034: LIST
44035: LIST
44036: PUSH
44037: LD_INT 0
44039: PUSH
44040: LD_INT 2
44042: PUSH
44043: EMPTY
44044: LIST
44045: LIST
44046: PUSH
44047: LD_INT 1
44049: NEG
44050: PUSH
44051: LD_INT 1
44053: PUSH
44054: EMPTY
44055: LIST
44056: LIST
44057: PUSH
44058: LD_INT 2
44060: NEG
44061: PUSH
44062: LD_INT 0
44064: PUSH
44065: EMPTY
44066: LIST
44067: LIST
44068: PUSH
44069: LD_INT 2
44071: NEG
44072: PUSH
44073: LD_INT 1
44075: NEG
44076: PUSH
44077: EMPTY
44078: LIST
44079: LIST
44080: PUSH
44081: LD_INT 2
44083: NEG
44084: PUSH
44085: LD_INT 2
44087: NEG
44088: PUSH
44089: EMPTY
44090: LIST
44091: LIST
44092: PUSH
44093: LD_INT 2
44095: NEG
44096: PUSH
44097: LD_INT 3
44099: NEG
44100: PUSH
44101: EMPTY
44102: LIST
44103: LIST
44104: PUSH
44105: LD_INT 1
44107: NEG
44108: PUSH
44109: LD_INT 3
44111: NEG
44112: PUSH
44113: EMPTY
44114: LIST
44115: LIST
44116: PUSH
44117: LD_INT 1
44119: PUSH
44120: LD_INT 2
44122: NEG
44123: PUSH
44124: EMPTY
44125: LIST
44126: LIST
44127: PUSH
44128: LD_INT 2
44130: PUSH
44131: LD_INT 1
44133: NEG
44134: PUSH
44135: EMPTY
44136: LIST
44137: LIST
44138: PUSH
44139: EMPTY
44140: LIST
44141: LIST
44142: LIST
44143: LIST
44144: LIST
44145: LIST
44146: LIST
44147: LIST
44148: LIST
44149: LIST
44150: LIST
44151: LIST
44152: LIST
44153: LIST
44154: LIST
44155: LIST
44156: LIST
44157: LIST
44158: LIST
44159: LIST
44160: LIST
44161: LIST
44162: LIST
44163: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
44164: LD_ADDR_VAR 0 24
44168: PUSH
44169: LD_INT 0
44171: PUSH
44172: LD_INT 0
44174: PUSH
44175: EMPTY
44176: LIST
44177: LIST
44178: PUSH
44179: LD_INT 0
44181: PUSH
44182: LD_INT 1
44184: NEG
44185: PUSH
44186: EMPTY
44187: LIST
44188: LIST
44189: PUSH
44190: LD_INT 1
44192: PUSH
44193: LD_INT 0
44195: PUSH
44196: EMPTY
44197: LIST
44198: LIST
44199: PUSH
44200: LD_INT 1
44202: PUSH
44203: LD_INT 1
44205: PUSH
44206: EMPTY
44207: LIST
44208: LIST
44209: PUSH
44210: LD_INT 0
44212: PUSH
44213: LD_INT 1
44215: PUSH
44216: EMPTY
44217: LIST
44218: LIST
44219: PUSH
44220: LD_INT 1
44222: NEG
44223: PUSH
44224: LD_INT 0
44226: PUSH
44227: EMPTY
44228: LIST
44229: LIST
44230: PUSH
44231: LD_INT 1
44233: NEG
44234: PUSH
44235: LD_INT 1
44237: NEG
44238: PUSH
44239: EMPTY
44240: LIST
44241: LIST
44242: PUSH
44243: LD_INT 1
44245: NEG
44246: PUSH
44247: LD_INT 2
44249: NEG
44250: PUSH
44251: EMPTY
44252: LIST
44253: LIST
44254: PUSH
44255: LD_INT 0
44257: PUSH
44258: LD_INT 2
44260: NEG
44261: PUSH
44262: EMPTY
44263: LIST
44264: LIST
44265: PUSH
44266: LD_INT 1
44268: PUSH
44269: LD_INT 1
44271: NEG
44272: PUSH
44273: EMPTY
44274: LIST
44275: LIST
44276: PUSH
44277: LD_INT 2
44279: PUSH
44280: LD_INT 0
44282: PUSH
44283: EMPTY
44284: LIST
44285: LIST
44286: PUSH
44287: LD_INT 2
44289: PUSH
44290: LD_INT 1
44292: PUSH
44293: EMPTY
44294: LIST
44295: LIST
44296: PUSH
44297: LD_INT 2
44299: PUSH
44300: LD_INT 2
44302: PUSH
44303: EMPTY
44304: LIST
44305: LIST
44306: PUSH
44307: LD_INT 1
44309: PUSH
44310: LD_INT 2
44312: PUSH
44313: EMPTY
44314: LIST
44315: LIST
44316: PUSH
44317: LD_INT 0
44319: PUSH
44320: LD_INT 2
44322: PUSH
44323: EMPTY
44324: LIST
44325: LIST
44326: PUSH
44327: LD_INT 1
44329: NEG
44330: PUSH
44331: LD_INT 1
44333: PUSH
44334: EMPTY
44335: LIST
44336: LIST
44337: PUSH
44338: LD_INT 2
44340: NEG
44341: PUSH
44342: LD_INT 0
44344: PUSH
44345: EMPTY
44346: LIST
44347: LIST
44348: PUSH
44349: LD_INT 2
44351: NEG
44352: PUSH
44353: LD_INT 1
44355: NEG
44356: PUSH
44357: EMPTY
44358: LIST
44359: LIST
44360: PUSH
44361: LD_INT 2
44363: NEG
44364: PUSH
44365: LD_INT 2
44367: NEG
44368: PUSH
44369: EMPTY
44370: LIST
44371: LIST
44372: PUSH
44373: LD_INT 1
44375: PUSH
44376: LD_INT 2
44378: NEG
44379: PUSH
44380: EMPTY
44381: LIST
44382: LIST
44383: PUSH
44384: LD_INT 2
44386: PUSH
44387: LD_INT 1
44389: NEG
44390: PUSH
44391: EMPTY
44392: LIST
44393: LIST
44394: PUSH
44395: LD_INT 3
44397: PUSH
44398: LD_INT 1
44400: PUSH
44401: EMPTY
44402: LIST
44403: LIST
44404: PUSH
44405: LD_INT 3
44407: PUSH
44408: LD_INT 2
44410: PUSH
44411: EMPTY
44412: LIST
44413: LIST
44414: PUSH
44415: EMPTY
44416: LIST
44417: LIST
44418: LIST
44419: LIST
44420: LIST
44421: LIST
44422: LIST
44423: LIST
44424: LIST
44425: LIST
44426: LIST
44427: LIST
44428: LIST
44429: LIST
44430: LIST
44431: LIST
44432: LIST
44433: LIST
44434: LIST
44435: LIST
44436: LIST
44437: LIST
44438: LIST
44439: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
44440: LD_ADDR_VAR 0 25
44444: PUSH
44445: LD_INT 0
44447: PUSH
44448: LD_INT 0
44450: PUSH
44451: EMPTY
44452: LIST
44453: LIST
44454: PUSH
44455: LD_INT 0
44457: PUSH
44458: LD_INT 1
44460: NEG
44461: PUSH
44462: EMPTY
44463: LIST
44464: LIST
44465: PUSH
44466: LD_INT 1
44468: PUSH
44469: LD_INT 0
44471: PUSH
44472: EMPTY
44473: LIST
44474: LIST
44475: PUSH
44476: LD_INT 1
44478: PUSH
44479: LD_INT 1
44481: PUSH
44482: EMPTY
44483: LIST
44484: LIST
44485: PUSH
44486: LD_INT 0
44488: PUSH
44489: LD_INT 1
44491: PUSH
44492: EMPTY
44493: LIST
44494: LIST
44495: PUSH
44496: LD_INT 1
44498: NEG
44499: PUSH
44500: LD_INT 0
44502: PUSH
44503: EMPTY
44504: LIST
44505: LIST
44506: PUSH
44507: LD_INT 1
44509: NEG
44510: PUSH
44511: LD_INT 1
44513: NEG
44514: PUSH
44515: EMPTY
44516: LIST
44517: LIST
44518: PUSH
44519: LD_INT 1
44521: NEG
44522: PUSH
44523: LD_INT 2
44525: NEG
44526: PUSH
44527: EMPTY
44528: LIST
44529: LIST
44530: PUSH
44531: LD_INT 0
44533: PUSH
44534: LD_INT 2
44536: NEG
44537: PUSH
44538: EMPTY
44539: LIST
44540: LIST
44541: PUSH
44542: LD_INT 1
44544: PUSH
44545: LD_INT 1
44547: NEG
44548: PUSH
44549: EMPTY
44550: LIST
44551: LIST
44552: PUSH
44553: LD_INT 2
44555: PUSH
44556: LD_INT 0
44558: PUSH
44559: EMPTY
44560: LIST
44561: LIST
44562: PUSH
44563: LD_INT 2
44565: PUSH
44566: LD_INT 1
44568: PUSH
44569: EMPTY
44570: LIST
44571: LIST
44572: PUSH
44573: LD_INT 2
44575: PUSH
44576: LD_INT 2
44578: PUSH
44579: EMPTY
44580: LIST
44581: LIST
44582: PUSH
44583: LD_INT 1
44585: PUSH
44586: LD_INT 2
44588: PUSH
44589: EMPTY
44590: LIST
44591: LIST
44592: PUSH
44593: LD_INT 0
44595: PUSH
44596: LD_INT 2
44598: PUSH
44599: EMPTY
44600: LIST
44601: LIST
44602: PUSH
44603: LD_INT 1
44605: NEG
44606: PUSH
44607: LD_INT 1
44609: PUSH
44610: EMPTY
44611: LIST
44612: LIST
44613: PUSH
44614: LD_INT 2
44616: NEG
44617: PUSH
44618: LD_INT 0
44620: PUSH
44621: EMPTY
44622: LIST
44623: LIST
44624: PUSH
44625: LD_INT 2
44627: NEG
44628: PUSH
44629: LD_INT 1
44631: NEG
44632: PUSH
44633: EMPTY
44634: LIST
44635: LIST
44636: PUSH
44637: LD_INT 2
44639: NEG
44640: PUSH
44641: LD_INT 2
44643: NEG
44644: PUSH
44645: EMPTY
44646: LIST
44647: LIST
44648: PUSH
44649: LD_INT 3
44651: PUSH
44652: LD_INT 1
44654: PUSH
44655: EMPTY
44656: LIST
44657: LIST
44658: PUSH
44659: LD_INT 3
44661: PUSH
44662: LD_INT 2
44664: PUSH
44665: EMPTY
44666: LIST
44667: LIST
44668: PUSH
44669: LD_INT 2
44671: PUSH
44672: LD_INT 3
44674: PUSH
44675: EMPTY
44676: LIST
44677: LIST
44678: PUSH
44679: LD_INT 1
44681: PUSH
44682: LD_INT 3
44684: PUSH
44685: EMPTY
44686: LIST
44687: LIST
44688: PUSH
44689: EMPTY
44690: LIST
44691: LIST
44692: LIST
44693: LIST
44694: LIST
44695: LIST
44696: LIST
44697: LIST
44698: LIST
44699: LIST
44700: LIST
44701: LIST
44702: LIST
44703: LIST
44704: LIST
44705: LIST
44706: LIST
44707: LIST
44708: LIST
44709: LIST
44710: LIST
44711: LIST
44712: LIST
44713: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
44714: LD_ADDR_VAR 0 26
44718: PUSH
44719: LD_INT 0
44721: PUSH
44722: LD_INT 0
44724: PUSH
44725: EMPTY
44726: LIST
44727: LIST
44728: PUSH
44729: LD_INT 0
44731: PUSH
44732: LD_INT 1
44734: NEG
44735: PUSH
44736: EMPTY
44737: LIST
44738: LIST
44739: PUSH
44740: LD_INT 1
44742: PUSH
44743: LD_INT 0
44745: PUSH
44746: EMPTY
44747: LIST
44748: LIST
44749: PUSH
44750: LD_INT 1
44752: PUSH
44753: LD_INT 1
44755: PUSH
44756: EMPTY
44757: LIST
44758: LIST
44759: PUSH
44760: LD_INT 0
44762: PUSH
44763: LD_INT 1
44765: PUSH
44766: EMPTY
44767: LIST
44768: LIST
44769: PUSH
44770: LD_INT 1
44772: NEG
44773: PUSH
44774: LD_INT 0
44776: PUSH
44777: EMPTY
44778: LIST
44779: LIST
44780: PUSH
44781: LD_INT 1
44783: NEG
44784: PUSH
44785: LD_INT 1
44787: NEG
44788: PUSH
44789: EMPTY
44790: LIST
44791: LIST
44792: PUSH
44793: LD_INT 1
44795: NEG
44796: PUSH
44797: LD_INT 2
44799: NEG
44800: PUSH
44801: EMPTY
44802: LIST
44803: LIST
44804: PUSH
44805: LD_INT 0
44807: PUSH
44808: LD_INT 2
44810: NEG
44811: PUSH
44812: EMPTY
44813: LIST
44814: LIST
44815: PUSH
44816: LD_INT 1
44818: PUSH
44819: LD_INT 1
44821: NEG
44822: PUSH
44823: EMPTY
44824: LIST
44825: LIST
44826: PUSH
44827: LD_INT 2
44829: PUSH
44830: LD_INT 0
44832: PUSH
44833: EMPTY
44834: LIST
44835: LIST
44836: PUSH
44837: LD_INT 2
44839: PUSH
44840: LD_INT 1
44842: PUSH
44843: EMPTY
44844: LIST
44845: LIST
44846: PUSH
44847: LD_INT 2
44849: PUSH
44850: LD_INT 2
44852: PUSH
44853: EMPTY
44854: LIST
44855: LIST
44856: PUSH
44857: LD_INT 1
44859: PUSH
44860: LD_INT 2
44862: PUSH
44863: EMPTY
44864: LIST
44865: LIST
44866: PUSH
44867: LD_INT 0
44869: PUSH
44870: LD_INT 2
44872: PUSH
44873: EMPTY
44874: LIST
44875: LIST
44876: PUSH
44877: LD_INT 1
44879: NEG
44880: PUSH
44881: LD_INT 1
44883: PUSH
44884: EMPTY
44885: LIST
44886: LIST
44887: PUSH
44888: LD_INT 2
44890: NEG
44891: PUSH
44892: LD_INT 0
44894: PUSH
44895: EMPTY
44896: LIST
44897: LIST
44898: PUSH
44899: LD_INT 2
44901: NEG
44902: PUSH
44903: LD_INT 1
44905: NEG
44906: PUSH
44907: EMPTY
44908: LIST
44909: LIST
44910: PUSH
44911: LD_INT 2
44913: NEG
44914: PUSH
44915: LD_INT 2
44917: NEG
44918: PUSH
44919: EMPTY
44920: LIST
44921: LIST
44922: PUSH
44923: LD_INT 2
44925: PUSH
44926: LD_INT 3
44928: PUSH
44929: EMPTY
44930: LIST
44931: LIST
44932: PUSH
44933: LD_INT 1
44935: PUSH
44936: LD_INT 3
44938: PUSH
44939: EMPTY
44940: LIST
44941: LIST
44942: PUSH
44943: LD_INT 1
44945: NEG
44946: PUSH
44947: LD_INT 2
44949: PUSH
44950: EMPTY
44951: LIST
44952: LIST
44953: PUSH
44954: LD_INT 2
44956: NEG
44957: PUSH
44958: LD_INT 1
44960: PUSH
44961: EMPTY
44962: LIST
44963: LIST
44964: PUSH
44965: EMPTY
44966: LIST
44967: LIST
44968: LIST
44969: LIST
44970: LIST
44971: LIST
44972: LIST
44973: LIST
44974: LIST
44975: LIST
44976: LIST
44977: LIST
44978: LIST
44979: LIST
44980: LIST
44981: LIST
44982: LIST
44983: LIST
44984: LIST
44985: LIST
44986: LIST
44987: LIST
44988: LIST
44989: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
44990: LD_ADDR_VAR 0 27
44994: PUSH
44995: LD_INT 0
44997: PUSH
44998: LD_INT 0
45000: PUSH
45001: EMPTY
45002: LIST
45003: LIST
45004: PUSH
45005: LD_INT 0
45007: PUSH
45008: LD_INT 1
45010: NEG
45011: PUSH
45012: EMPTY
45013: LIST
45014: LIST
45015: PUSH
45016: LD_INT 1
45018: PUSH
45019: LD_INT 0
45021: PUSH
45022: EMPTY
45023: LIST
45024: LIST
45025: PUSH
45026: LD_INT 1
45028: PUSH
45029: LD_INT 1
45031: PUSH
45032: EMPTY
45033: LIST
45034: LIST
45035: PUSH
45036: LD_INT 0
45038: PUSH
45039: LD_INT 1
45041: PUSH
45042: EMPTY
45043: LIST
45044: LIST
45045: PUSH
45046: LD_INT 1
45048: NEG
45049: PUSH
45050: LD_INT 0
45052: PUSH
45053: EMPTY
45054: LIST
45055: LIST
45056: PUSH
45057: LD_INT 1
45059: NEG
45060: PUSH
45061: LD_INT 1
45063: NEG
45064: PUSH
45065: EMPTY
45066: LIST
45067: LIST
45068: PUSH
45069: LD_INT 1
45071: NEG
45072: PUSH
45073: LD_INT 2
45075: NEG
45076: PUSH
45077: EMPTY
45078: LIST
45079: LIST
45080: PUSH
45081: LD_INT 0
45083: PUSH
45084: LD_INT 2
45086: NEG
45087: PUSH
45088: EMPTY
45089: LIST
45090: LIST
45091: PUSH
45092: LD_INT 1
45094: PUSH
45095: LD_INT 1
45097: NEG
45098: PUSH
45099: EMPTY
45100: LIST
45101: LIST
45102: PUSH
45103: LD_INT 2
45105: PUSH
45106: LD_INT 0
45108: PUSH
45109: EMPTY
45110: LIST
45111: LIST
45112: PUSH
45113: LD_INT 2
45115: PUSH
45116: LD_INT 1
45118: PUSH
45119: EMPTY
45120: LIST
45121: LIST
45122: PUSH
45123: LD_INT 2
45125: PUSH
45126: LD_INT 2
45128: PUSH
45129: EMPTY
45130: LIST
45131: LIST
45132: PUSH
45133: LD_INT 1
45135: PUSH
45136: LD_INT 2
45138: PUSH
45139: EMPTY
45140: LIST
45141: LIST
45142: PUSH
45143: LD_INT 0
45145: PUSH
45146: LD_INT 2
45148: PUSH
45149: EMPTY
45150: LIST
45151: LIST
45152: PUSH
45153: LD_INT 1
45155: NEG
45156: PUSH
45157: LD_INT 1
45159: PUSH
45160: EMPTY
45161: LIST
45162: LIST
45163: PUSH
45164: LD_INT 2
45166: NEG
45167: PUSH
45168: LD_INT 0
45170: PUSH
45171: EMPTY
45172: LIST
45173: LIST
45174: PUSH
45175: LD_INT 2
45177: NEG
45178: PUSH
45179: LD_INT 1
45181: NEG
45182: PUSH
45183: EMPTY
45184: LIST
45185: LIST
45186: PUSH
45187: LD_INT 2
45189: NEG
45190: PUSH
45191: LD_INT 2
45193: NEG
45194: PUSH
45195: EMPTY
45196: LIST
45197: LIST
45198: PUSH
45199: LD_INT 1
45201: NEG
45202: PUSH
45203: LD_INT 2
45205: PUSH
45206: EMPTY
45207: LIST
45208: LIST
45209: PUSH
45210: LD_INT 2
45212: NEG
45213: PUSH
45214: LD_INT 1
45216: PUSH
45217: EMPTY
45218: LIST
45219: LIST
45220: PUSH
45221: LD_INT 3
45223: NEG
45224: PUSH
45225: LD_INT 1
45227: NEG
45228: PUSH
45229: EMPTY
45230: LIST
45231: LIST
45232: PUSH
45233: LD_INT 3
45235: NEG
45236: PUSH
45237: LD_INT 2
45239: NEG
45240: PUSH
45241: EMPTY
45242: LIST
45243: LIST
45244: PUSH
45245: EMPTY
45246: LIST
45247: LIST
45248: LIST
45249: LIST
45250: LIST
45251: LIST
45252: LIST
45253: LIST
45254: LIST
45255: LIST
45256: LIST
45257: LIST
45258: LIST
45259: LIST
45260: LIST
45261: LIST
45262: LIST
45263: LIST
45264: LIST
45265: LIST
45266: LIST
45267: LIST
45268: LIST
45269: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
45270: LD_ADDR_VAR 0 28
45274: PUSH
45275: LD_INT 0
45277: PUSH
45278: LD_INT 0
45280: PUSH
45281: EMPTY
45282: LIST
45283: LIST
45284: PUSH
45285: LD_INT 0
45287: PUSH
45288: LD_INT 1
45290: NEG
45291: PUSH
45292: EMPTY
45293: LIST
45294: LIST
45295: PUSH
45296: LD_INT 1
45298: PUSH
45299: LD_INT 0
45301: PUSH
45302: EMPTY
45303: LIST
45304: LIST
45305: PUSH
45306: LD_INT 1
45308: PUSH
45309: LD_INT 1
45311: PUSH
45312: EMPTY
45313: LIST
45314: LIST
45315: PUSH
45316: LD_INT 0
45318: PUSH
45319: LD_INT 1
45321: PUSH
45322: EMPTY
45323: LIST
45324: LIST
45325: PUSH
45326: LD_INT 1
45328: NEG
45329: PUSH
45330: LD_INT 0
45332: PUSH
45333: EMPTY
45334: LIST
45335: LIST
45336: PUSH
45337: LD_INT 1
45339: NEG
45340: PUSH
45341: LD_INT 1
45343: NEG
45344: PUSH
45345: EMPTY
45346: LIST
45347: LIST
45348: PUSH
45349: LD_INT 1
45351: NEG
45352: PUSH
45353: LD_INT 2
45355: NEG
45356: PUSH
45357: EMPTY
45358: LIST
45359: LIST
45360: PUSH
45361: LD_INT 0
45363: PUSH
45364: LD_INT 2
45366: NEG
45367: PUSH
45368: EMPTY
45369: LIST
45370: LIST
45371: PUSH
45372: LD_INT 1
45374: PUSH
45375: LD_INT 1
45377: NEG
45378: PUSH
45379: EMPTY
45380: LIST
45381: LIST
45382: PUSH
45383: LD_INT 2
45385: PUSH
45386: LD_INT 0
45388: PUSH
45389: EMPTY
45390: LIST
45391: LIST
45392: PUSH
45393: LD_INT 2
45395: PUSH
45396: LD_INT 1
45398: PUSH
45399: EMPTY
45400: LIST
45401: LIST
45402: PUSH
45403: LD_INT 2
45405: PUSH
45406: LD_INT 2
45408: PUSH
45409: EMPTY
45410: LIST
45411: LIST
45412: PUSH
45413: LD_INT 1
45415: PUSH
45416: LD_INT 2
45418: PUSH
45419: EMPTY
45420: LIST
45421: LIST
45422: PUSH
45423: LD_INT 0
45425: PUSH
45426: LD_INT 2
45428: PUSH
45429: EMPTY
45430: LIST
45431: LIST
45432: PUSH
45433: LD_INT 1
45435: NEG
45436: PUSH
45437: LD_INT 1
45439: PUSH
45440: EMPTY
45441: LIST
45442: LIST
45443: PUSH
45444: LD_INT 2
45446: NEG
45447: PUSH
45448: LD_INT 0
45450: PUSH
45451: EMPTY
45452: LIST
45453: LIST
45454: PUSH
45455: LD_INT 2
45457: NEG
45458: PUSH
45459: LD_INT 1
45461: NEG
45462: PUSH
45463: EMPTY
45464: LIST
45465: LIST
45466: PUSH
45467: LD_INT 2
45469: NEG
45470: PUSH
45471: LD_INT 2
45473: NEG
45474: PUSH
45475: EMPTY
45476: LIST
45477: LIST
45478: PUSH
45479: LD_INT 2
45481: NEG
45482: PUSH
45483: LD_INT 3
45485: NEG
45486: PUSH
45487: EMPTY
45488: LIST
45489: LIST
45490: PUSH
45491: LD_INT 1
45493: NEG
45494: PUSH
45495: LD_INT 3
45497: NEG
45498: PUSH
45499: EMPTY
45500: LIST
45501: LIST
45502: PUSH
45503: LD_INT 3
45505: NEG
45506: PUSH
45507: LD_INT 1
45509: NEG
45510: PUSH
45511: EMPTY
45512: LIST
45513: LIST
45514: PUSH
45515: LD_INT 3
45517: NEG
45518: PUSH
45519: LD_INT 2
45521: NEG
45522: PUSH
45523: EMPTY
45524: LIST
45525: LIST
45526: PUSH
45527: EMPTY
45528: LIST
45529: LIST
45530: LIST
45531: LIST
45532: LIST
45533: LIST
45534: LIST
45535: LIST
45536: LIST
45537: LIST
45538: LIST
45539: LIST
45540: LIST
45541: LIST
45542: LIST
45543: LIST
45544: LIST
45545: LIST
45546: LIST
45547: LIST
45548: LIST
45549: LIST
45550: LIST
45551: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
45552: LD_ADDR_VAR 0 29
45556: PUSH
45557: LD_INT 0
45559: PUSH
45560: LD_INT 0
45562: PUSH
45563: EMPTY
45564: LIST
45565: LIST
45566: PUSH
45567: LD_INT 0
45569: PUSH
45570: LD_INT 1
45572: NEG
45573: PUSH
45574: EMPTY
45575: LIST
45576: LIST
45577: PUSH
45578: LD_INT 1
45580: PUSH
45581: LD_INT 0
45583: PUSH
45584: EMPTY
45585: LIST
45586: LIST
45587: PUSH
45588: LD_INT 1
45590: PUSH
45591: LD_INT 1
45593: PUSH
45594: EMPTY
45595: LIST
45596: LIST
45597: PUSH
45598: LD_INT 0
45600: PUSH
45601: LD_INT 1
45603: PUSH
45604: EMPTY
45605: LIST
45606: LIST
45607: PUSH
45608: LD_INT 1
45610: NEG
45611: PUSH
45612: LD_INT 0
45614: PUSH
45615: EMPTY
45616: LIST
45617: LIST
45618: PUSH
45619: LD_INT 1
45621: NEG
45622: PUSH
45623: LD_INT 1
45625: NEG
45626: PUSH
45627: EMPTY
45628: LIST
45629: LIST
45630: PUSH
45631: LD_INT 1
45633: NEG
45634: PUSH
45635: LD_INT 2
45637: NEG
45638: PUSH
45639: EMPTY
45640: LIST
45641: LIST
45642: PUSH
45643: LD_INT 0
45645: PUSH
45646: LD_INT 2
45648: NEG
45649: PUSH
45650: EMPTY
45651: LIST
45652: LIST
45653: PUSH
45654: LD_INT 1
45656: PUSH
45657: LD_INT 1
45659: NEG
45660: PUSH
45661: EMPTY
45662: LIST
45663: LIST
45664: PUSH
45665: LD_INT 2
45667: PUSH
45668: LD_INT 0
45670: PUSH
45671: EMPTY
45672: LIST
45673: LIST
45674: PUSH
45675: LD_INT 2
45677: PUSH
45678: LD_INT 1
45680: PUSH
45681: EMPTY
45682: LIST
45683: LIST
45684: PUSH
45685: LD_INT 1
45687: PUSH
45688: LD_INT 2
45690: PUSH
45691: EMPTY
45692: LIST
45693: LIST
45694: PUSH
45695: LD_INT 0
45697: PUSH
45698: LD_INT 2
45700: PUSH
45701: EMPTY
45702: LIST
45703: LIST
45704: PUSH
45705: LD_INT 1
45707: NEG
45708: PUSH
45709: LD_INT 1
45711: PUSH
45712: EMPTY
45713: LIST
45714: LIST
45715: PUSH
45716: LD_INT 2
45718: NEG
45719: PUSH
45720: LD_INT 1
45722: NEG
45723: PUSH
45724: EMPTY
45725: LIST
45726: LIST
45727: PUSH
45728: LD_INT 2
45730: NEG
45731: PUSH
45732: LD_INT 2
45734: NEG
45735: PUSH
45736: EMPTY
45737: LIST
45738: LIST
45739: PUSH
45740: LD_INT 2
45742: NEG
45743: PUSH
45744: LD_INT 3
45746: NEG
45747: PUSH
45748: EMPTY
45749: LIST
45750: LIST
45751: PUSH
45752: LD_INT 2
45754: PUSH
45755: LD_INT 1
45757: NEG
45758: PUSH
45759: EMPTY
45760: LIST
45761: LIST
45762: PUSH
45763: LD_INT 3
45765: PUSH
45766: LD_INT 1
45768: PUSH
45769: EMPTY
45770: LIST
45771: LIST
45772: PUSH
45773: LD_INT 1
45775: PUSH
45776: LD_INT 3
45778: PUSH
45779: EMPTY
45780: LIST
45781: LIST
45782: PUSH
45783: LD_INT 1
45785: NEG
45786: PUSH
45787: LD_INT 2
45789: PUSH
45790: EMPTY
45791: LIST
45792: LIST
45793: PUSH
45794: LD_INT 3
45796: NEG
45797: PUSH
45798: LD_INT 2
45800: NEG
45801: PUSH
45802: EMPTY
45803: LIST
45804: LIST
45805: PUSH
45806: EMPTY
45807: LIST
45808: LIST
45809: LIST
45810: LIST
45811: LIST
45812: LIST
45813: LIST
45814: LIST
45815: LIST
45816: LIST
45817: LIST
45818: LIST
45819: LIST
45820: LIST
45821: LIST
45822: LIST
45823: LIST
45824: LIST
45825: LIST
45826: LIST
45827: LIST
45828: LIST
45829: LIST
45830: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
45831: LD_ADDR_VAR 0 30
45835: PUSH
45836: LD_INT 0
45838: PUSH
45839: LD_INT 0
45841: PUSH
45842: EMPTY
45843: LIST
45844: LIST
45845: PUSH
45846: LD_INT 0
45848: PUSH
45849: LD_INT 1
45851: NEG
45852: PUSH
45853: EMPTY
45854: LIST
45855: LIST
45856: PUSH
45857: LD_INT 1
45859: PUSH
45860: LD_INT 0
45862: PUSH
45863: EMPTY
45864: LIST
45865: LIST
45866: PUSH
45867: LD_INT 1
45869: PUSH
45870: LD_INT 1
45872: PUSH
45873: EMPTY
45874: LIST
45875: LIST
45876: PUSH
45877: LD_INT 0
45879: PUSH
45880: LD_INT 1
45882: PUSH
45883: EMPTY
45884: LIST
45885: LIST
45886: PUSH
45887: LD_INT 1
45889: NEG
45890: PUSH
45891: LD_INT 0
45893: PUSH
45894: EMPTY
45895: LIST
45896: LIST
45897: PUSH
45898: LD_INT 1
45900: NEG
45901: PUSH
45902: LD_INT 1
45904: NEG
45905: PUSH
45906: EMPTY
45907: LIST
45908: LIST
45909: PUSH
45910: LD_INT 1
45912: NEG
45913: PUSH
45914: LD_INT 2
45916: NEG
45917: PUSH
45918: EMPTY
45919: LIST
45920: LIST
45921: PUSH
45922: LD_INT 0
45924: PUSH
45925: LD_INT 2
45927: NEG
45928: PUSH
45929: EMPTY
45930: LIST
45931: LIST
45932: PUSH
45933: LD_INT 1
45935: PUSH
45936: LD_INT 1
45938: NEG
45939: PUSH
45940: EMPTY
45941: LIST
45942: LIST
45943: PUSH
45944: LD_INT 2
45946: PUSH
45947: LD_INT 0
45949: PUSH
45950: EMPTY
45951: LIST
45952: LIST
45953: PUSH
45954: LD_INT 2
45956: PUSH
45957: LD_INT 1
45959: PUSH
45960: EMPTY
45961: LIST
45962: LIST
45963: PUSH
45964: LD_INT 2
45966: PUSH
45967: LD_INT 2
45969: PUSH
45970: EMPTY
45971: LIST
45972: LIST
45973: PUSH
45974: LD_INT 1
45976: PUSH
45977: LD_INT 2
45979: PUSH
45980: EMPTY
45981: LIST
45982: LIST
45983: PUSH
45984: LD_INT 1
45986: NEG
45987: PUSH
45988: LD_INT 1
45990: PUSH
45991: EMPTY
45992: LIST
45993: LIST
45994: PUSH
45995: LD_INT 2
45997: NEG
45998: PUSH
45999: LD_INT 0
46001: PUSH
46002: EMPTY
46003: LIST
46004: LIST
46005: PUSH
46006: LD_INT 2
46008: NEG
46009: PUSH
46010: LD_INT 1
46012: NEG
46013: PUSH
46014: EMPTY
46015: LIST
46016: LIST
46017: PUSH
46018: LD_INT 1
46020: NEG
46021: PUSH
46022: LD_INT 3
46024: NEG
46025: PUSH
46026: EMPTY
46027: LIST
46028: LIST
46029: PUSH
46030: LD_INT 1
46032: PUSH
46033: LD_INT 2
46035: NEG
46036: PUSH
46037: EMPTY
46038: LIST
46039: LIST
46040: PUSH
46041: LD_INT 3
46043: PUSH
46044: LD_INT 2
46046: PUSH
46047: EMPTY
46048: LIST
46049: LIST
46050: PUSH
46051: LD_INT 2
46053: PUSH
46054: LD_INT 3
46056: PUSH
46057: EMPTY
46058: LIST
46059: LIST
46060: PUSH
46061: LD_INT 2
46063: NEG
46064: PUSH
46065: LD_INT 1
46067: PUSH
46068: EMPTY
46069: LIST
46070: LIST
46071: PUSH
46072: LD_INT 3
46074: NEG
46075: PUSH
46076: LD_INT 1
46078: NEG
46079: PUSH
46080: EMPTY
46081: LIST
46082: LIST
46083: PUSH
46084: EMPTY
46085: LIST
46086: LIST
46087: LIST
46088: LIST
46089: LIST
46090: LIST
46091: LIST
46092: LIST
46093: LIST
46094: LIST
46095: LIST
46096: LIST
46097: LIST
46098: LIST
46099: LIST
46100: LIST
46101: LIST
46102: LIST
46103: LIST
46104: LIST
46105: LIST
46106: LIST
46107: LIST
46108: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
46109: LD_ADDR_VAR 0 31
46113: PUSH
46114: LD_INT 0
46116: PUSH
46117: LD_INT 0
46119: PUSH
46120: EMPTY
46121: LIST
46122: LIST
46123: PUSH
46124: LD_INT 0
46126: PUSH
46127: LD_INT 1
46129: NEG
46130: PUSH
46131: EMPTY
46132: LIST
46133: LIST
46134: PUSH
46135: LD_INT 1
46137: PUSH
46138: LD_INT 0
46140: PUSH
46141: EMPTY
46142: LIST
46143: LIST
46144: PUSH
46145: LD_INT 1
46147: PUSH
46148: LD_INT 1
46150: PUSH
46151: EMPTY
46152: LIST
46153: LIST
46154: PUSH
46155: LD_INT 0
46157: PUSH
46158: LD_INT 1
46160: PUSH
46161: EMPTY
46162: LIST
46163: LIST
46164: PUSH
46165: LD_INT 1
46167: NEG
46168: PUSH
46169: LD_INT 0
46171: PUSH
46172: EMPTY
46173: LIST
46174: LIST
46175: PUSH
46176: LD_INT 1
46178: NEG
46179: PUSH
46180: LD_INT 1
46182: NEG
46183: PUSH
46184: EMPTY
46185: LIST
46186: LIST
46187: PUSH
46188: LD_INT 1
46190: NEG
46191: PUSH
46192: LD_INT 2
46194: NEG
46195: PUSH
46196: EMPTY
46197: LIST
46198: LIST
46199: PUSH
46200: LD_INT 1
46202: PUSH
46203: LD_INT 1
46205: NEG
46206: PUSH
46207: EMPTY
46208: LIST
46209: LIST
46210: PUSH
46211: LD_INT 2
46213: PUSH
46214: LD_INT 0
46216: PUSH
46217: EMPTY
46218: LIST
46219: LIST
46220: PUSH
46221: LD_INT 2
46223: PUSH
46224: LD_INT 1
46226: PUSH
46227: EMPTY
46228: LIST
46229: LIST
46230: PUSH
46231: LD_INT 2
46233: PUSH
46234: LD_INT 2
46236: PUSH
46237: EMPTY
46238: LIST
46239: LIST
46240: PUSH
46241: LD_INT 1
46243: PUSH
46244: LD_INT 2
46246: PUSH
46247: EMPTY
46248: LIST
46249: LIST
46250: PUSH
46251: LD_INT 0
46253: PUSH
46254: LD_INT 2
46256: PUSH
46257: EMPTY
46258: LIST
46259: LIST
46260: PUSH
46261: LD_INT 1
46263: NEG
46264: PUSH
46265: LD_INT 1
46267: PUSH
46268: EMPTY
46269: LIST
46270: LIST
46271: PUSH
46272: LD_INT 2
46274: NEG
46275: PUSH
46276: LD_INT 1
46278: NEG
46279: PUSH
46280: EMPTY
46281: LIST
46282: LIST
46283: PUSH
46284: LD_INT 2
46286: NEG
46287: PUSH
46288: LD_INT 2
46290: NEG
46291: PUSH
46292: EMPTY
46293: LIST
46294: LIST
46295: PUSH
46296: LD_INT 2
46298: NEG
46299: PUSH
46300: LD_INT 3
46302: NEG
46303: PUSH
46304: EMPTY
46305: LIST
46306: LIST
46307: PUSH
46308: LD_INT 2
46310: PUSH
46311: LD_INT 1
46313: NEG
46314: PUSH
46315: EMPTY
46316: LIST
46317: LIST
46318: PUSH
46319: LD_INT 3
46321: PUSH
46322: LD_INT 1
46324: PUSH
46325: EMPTY
46326: LIST
46327: LIST
46328: PUSH
46329: LD_INT 1
46331: PUSH
46332: LD_INT 3
46334: PUSH
46335: EMPTY
46336: LIST
46337: LIST
46338: PUSH
46339: LD_INT 1
46341: NEG
46342: PUSH
46343: LD_INT 2
46345: PUSH
46346: EMPTY
46347: LIST
46348: LIST
46349: PUSH
46350: LD_INT 3
46352: NEG
46353: PUSH
46354: LD_INT 2
46356: NEG
46357: PUSH
46358: EMPTY
46359: LIST
46360: LIST
46361: PUSH
46362: EMPTY
46363: LIST
46364: LIST
46365: LIST
46366: LIST
46367: LIST
46368: LIST
46369: LIST
46370: LIST
46371: LIST
46372: LIST
46373: LIST
46374: LIST
46375: LIST
46376: LIST
46377: LIST
46378: LIST
46379: LIST
46380: LIST
46381: LIST
46382: LIST
46383: LIST
46384: LIST
46385: LIST
46386: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
46387: LD_ADDR_VAR 0 32
46391: PUSH
46392: LD_INT 0
46394: PUSH
46395: LD_INT 0
46397: PUSH
46398: EMPTY
46399: LIST
46400: LIST
46401: PUSH
46402: LD_INT 0
46404: PUSH
46405: LD_INT 1
46407: NEG
46408: PUSH
46409: EMPTY
46410: LIST
46411: LIST
46412: PUSH
46413: LD_INT 1
46415: PUSH
46416: LD_INT 0
46418: PUSH
46419: EMPTY
46420: LIST
46421: LIST
46422: PUSH
46423: LD_INT 1
46425: PUSH
46426: LD_INT 1
46428: PUSH
46429: EMPTY
46430: LIST
46431: LIST
46432: PUSH
46433: LD_INT 0
46435: PUSH
46436: LD_INT 1
46438: PUSH
46439: EMPTY
46440: LIST
46441: LIST
46442: PUSH
46443: LD_INT 1
46445: NEG
46446: PUSH
46447: LD_INT 0
46449: PUSH
46450: EMPTY
46451: LIST
46452: LIST
46453: PUSH
46454: LD_INT 1
46456: NEG
46457: PUSH
46458: LD_INT 1
46460: NEG
46461: PUSH
46462: EMPTY
46463: LIST
46464: LIST
46465: PUSH
46466: LD_INT 1
46468: NEG
46469: PUSH
46470: LD_INT 2
46472: NEG
46473: PUSH
46474: EMPTY
46475: LIST
46476: LIST
46477: PUSH
46478: LD_INT 0
46480: PUSH
46481: LD_INT 2
46483: NEG
46484: PUSH
46485: EMPTY
46486: LIST
46487: LIST
46488: PUSH
46489: LD_INT 1
46491: PUSH
46492: LD_INT 1
46494: NEG
46495: PUSH
46496: EMPTY
46497: LIST
46498: LIST
46499: PUSH
46500: LD_INT 2
46502: PUSH
46503: LD_INT 1
46505: PUSH
46506: EMPTY
46507: LIST
46508: LIST
46509: PUSH
46510: LD_INT 2
46512: PUSH
46513: LD_INT 2
46515: PUSH
46516: EMPTY
46517: LIST
46518: LIST
46519: PUSH
46520: LD_INT 1
46522: PUSH
46523: LD_INT 2
46525: PUSH
46526: EMPTY
46527: LIST
46528: LIST
46529: PUSH
46530: LD_INT 0
46532: PUSH
46533: LD_INT 2
46535: PUSH
46536: EMPTY
46537: LIST
46538: LIST
46539: PUSH
46540: LD_INT 1
46542: NEG
46543: PUSH
46544: LD_INT 1
46546: PUSH
46547: EMPTY
46548: LIST
46549: LIST
46550: PUSH
46551: LD_INT 2
46553: NEG
46554: PUSH
46555: LD_INT 0
46557: PUSH
46558: EMPTY
46559: LIST
46560: LIST
46561: PUSH
46562: LD_INT 2
46564: NEG
46565: PUSH
46566: LD_INT 1
46568: NEG
46569: PUSH
46570: EMPTY
46571: LIST
46572: LIST
46573: PUSH
46574: LD_INT 1
46576: NEG
46577: PUSH
46578: LD_INT 3
46580: NEG
46581: PUSH
46582: EMPTY
46583: LIST
46584: LIST
46585: PUSH
46586: LD_INT 1
46588: PUSH
46589: LD_INT 2
46591: NEG
46592: PUSH
46593: EMPTY
46594: LIST
46595: LIST
46596: PUSH
46597: LD_INT 3
46599: PUSH
46600: LD_INT 2
46602: PUSH
46603: EMPTY
46604: LIST
46605: LIST
46606: PUSH
46607: LD_INT 2
46609: PUSH
46610: LD_INT 3
46612: PUSH
46613: EMPTY
46614: LIST
46615: LIST
46616: PUSH
46617: LD_INT 2
46619: NEG
46620: PUSH
46621: LD_INT 1
46623: PUSH
46624: EMPTY
46625: LIST
46626: LIST
46627: PUSH
46628: LD_INT 3
46630: NEG
46631: PUSH
46632: LD_INT 1
46634: NEG
46635: PUSH
46636: EMPTY
46637: LIST
46638: LIST
46639: PUSH
46640: EMPTY
46641: LIST
46642: LIST
46643: LIST
46644: LIST
46645: LIST
46646: LIST
46647: LIST
46648: LIST
46649: LIST
46650: LIST
46651: LIST
46652: LIST
46653: LIST
46654: LIST
46655: LIST
46656: LIST
46657: LIST
46658: LIST
46659: LIST
46660: LIST
46661: LIST
46662: LIST
46663: LIST
46664: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
46665: LD_ADDR_VAR 0 33
46669: PUSH
46670: LD_INT 0
46672: PUSH
46673: LD_INT 0
46675: PUSH
46676: EMPTY
46677: LIST
46678: LIST
46679: PUSH
46680: LD_INT 0
46682: PUSH
46683: LD_INT 1
46685: NEG
46686: PUSH
46687: EMPTY
46688: LIST
46689: LIST
46690: PUSH
46691: LD_INT 1
46693: PUSH
46694: LD_INT 0
46696: PUSH
46697: EMPTY
46698: LIST
46699: LIST
46700: PUSH
46701: LD_INT 1
46703: PUSH
46704: LD_INT 1
46706: PUSH
46707: EMPTY
46708: LIST
46709: LIST
46710: PUSH
46711: LD_INT 0
46713: PUSH
46714: LD_INT 1
46716: PUSH
46717: EMPTY
46718: LIST
46719: LIST
46720: PUSH
46721: LD_INT 1
46723: NEG
46724: PUSH
46725: LD_INT 0
46727: PUSH
46728: EMPTY
46729: LIST
46730: LIST
46731: PUSH
46732: LD_INT 1
46734: NEG
46735: PUSH
46736: LD_INT 1
46738: NEG
46739: PUSH
46740: EMPTY
46741: LIST
46742: LIST
46743: PUSH
46744: LD_INT 1
46746: NEG
46747: PUSH
46748: LD_INT 2
46750: NEG
46751: PUSH
46752: EMPTY
46753: LIST
46754: LIST
46755: PUSH
46756: LD_INT 1
46758: PUSH
46759: LD_INT 1
46761: NEG
46762: PUSH
46763: EMPTY
46764: LIST
46765: LIST
46766: PUSH
46767: LD_INT 2
46769: PUSH
46770: LD_INT 0
46772: PUSH
46773: EMPTY
46774: LIST
46775: LIST
46776: PUSH
46777: LD_INT 2
46779: PUSH
46780: LD_INT 1
46782: PUSH
46783: EMPTY
46784: LIST
46785: LIST
46786: PUSH
46787: LD_INT 1
46789: PUSH
46790: LD_INT 2
46792: PUSH
46793: EMPTY
46794: LIST
46795: LIST
46796: PUSH
46797: LD_INT 0
46799: PUSH
46800: LD_INT 2
46802: PUSH
46803: EMPTY
46804: LIST
46805: LIST
46806: PUSH
46807: LD_INT 1
46809: NEG
46810: PUSH
46811: LD_INT 1
46813: PUSH
46814: EMPTY
46815: LIST
46816: LIST
46817: PUSH
46818: LD_INT 2
46820: NEG
46821: PUSH
46822: LD_INT 0
46824: PUSH
46825: EMPTY
46826: LIST
46827: LIST
46828: PUSH
46829: LD_INT 2
46831: NEG
46832: PUSH
46833: LD_INT 1
46835: NEG
46836: PUSH
46837: EMPTY
46838: LIST
46839: LIST
46840: PUSH
46841: LD_INT 2
46843: NEG
46844: PUSH
46845: LD_INT 2
46847: NEG
46848: PUSH
46849: EMPTY
46850: LIST
46851: LIST
46852: PUSH
46853: LD_INT 2
46855: NEG
46856: PUSH
46857: LD_INT 3
46859: NEG
46860: PUSH
46861: EMPTY
46862: LIST
46863: LIST
46864: PUSH
46865: LD_INT 2
46867: PUSH
46868: LD_INT 1
46870: NEG
46871: PUSH
46872: EMPTY
46873: LIST
46874: LIST
46875: PUSH
46876: LD_INT 3
46878: PUSH
46879: LD_INT 1
46881: PUSH
46882: EMPTY
46883: LIST
46884: LIST
46885: PUSH
46886: LD_INT 1
46888: PUSH
46889: LD_INT 3
46891: PUSH
46892: EMPTY
46893: LIST
46894: LIST
46895: PUSH
46896: LD_INT 1
46898: NEG
46899: PUSH
46900: LD_INT 2
46902: PUSH
46903: EMPTY
46904: LIST
46905: LIST
46906: PUSH
46907: LD_INT 3
46909: NEG
46910: PUSH
46911: LD_INT 2
46913: NEG
46914: PUSH
46915: EMPTY
46916: LIST
46917: LIST
46918: PUSH
46919: EMPTY
46920: LIST
46921: LIST
46922: LIST
46923: LIST
46924: LIST
46925: LIST
46926: LIST
46927: LIST
46928: LIST
46929: LIST
46930: LIST
46931: LIST
46932: LIST
46933: LIST
46934: LIST
46935: LIST
46936: LIST
46937: LIST
46938: LIST
46939: LIST
46940: LIST
46941: LIST
46942: LIST
46943: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
46944: LD_ADDR_VAR 0 34
46948: PUSH
46949: LD_INT 0
46951: PUSH
46952: LD_INT 0
46954: PUSH
46955: EMPTY
46956: LIST
46957: LIST
46958: PUSH
46959: LD_INT 0
46961: PUSH
46962: LD_INT 1
46964: NEG
46965: PUSH
46966: EMPTY
46967: LIST
46968: LIST
46969: PUSH
46970: LD_INT 1
46972: PUSH
46973: LD_INT 0
46975: PUSH
46976: EMPTY
46977: LIST
46978: LIST
46979: PUSH
46980: LD_INT 1
46982: PUSH
46983: LD_INT 1
46985: PUSH
46986: EMPTY
46987: LIST
46988: LIST
46989: PUSH
46990: LD_INT 0
46992: PUSH
46993: LD_INT 1
46995: PUSH
46996: EMPTY
46997: LIST
46998: LIST
46999: PUSH
47000: LD_INT 1
47002: NEG
47003: PUSH
47004: LD_INT 0
47006: PUSH
47007: EMPTY
47008: LIST
47009: LIST
47010: PUSH
47011: LD_INT 1
47013: NEG
47014: PUSH
47015: LD_INT 1
47017: NEG
47018: PUSH
47019: EMPTY
47020: LIST
47021: LIST
47022: PUSH
47023: LD_INT 1
47025: NEG
47026: PUSH
47027: LD_INT 2
47029: NEG
47030: PUSH
47031: EMPTY
47032: LIST
47033: LIST
47034: PUSH
47035: LD_INT 0
47037: PUSH
47038: LD_INT 2
47040: NEG
47041: PUSH
47042: EMPTY
47043: LIST
47044: LIST
47045: PUSH
47046: LD_INT 1
47048: PUSH
47049: LD_INT 1
47051: NEG
47052: PUSH
47053: EMPTY
47054: LIST
47055: LIST
47056: PUSH
47057: LD_INT 2
47059: PUSH
47060: LD_INT 1
47062: PUSH
47063: EMPTY
47064: LIST
47065: LIST
47066: PUSH
47067: LD_INT 2
47069: PUSH
47070: LD_INT 2
47072: PUSH
47073: EMPTY
47074: LIST
47075: LIST
47076: PUSH
47077: LD_INT 1
47079: PUSH
47080: LD_INT 2
47082: PUSH
47083: EMPTY
47084: LIST
47085: LIST
47086: PUSH
47087: LD_INT 1
47089: NEG
47090: PUSH
47091: LD_INT 1
47093: PUSH
47094: EMPTY
47095: LIST
47096: LIST
47097: PUSH
47098: LD_INT 2
47100: NEG
47101: PUSH
47102: LD_INT 0
47104: PUSH
47105: EMPTY
47106: LIST
47107: LIST
47108: PUSH
47109: LD_INT 2
47111: NEG
47112: PUSH
47113: LD_INT 1
47115: NEG
47116: PUSH
47117: EMPTY
47118: LIST
47119: LIST
47120: PUSH
47121: LD_INT 2
47123: NEG
47124: PUSH
47125: LD_INT 2
47127: NEG
47128: PUSH
47129: EMPTY
47130: LIST
47131: LIST
47132: PUSH
47133: LD_INT 1
47135: NEG
47136: PUSH
47137: LD_INT 3
47139: NEG
47140: PUSH
47141: EMPTY
47142: LIST
47143: LIST
47144: PUSH
47145: LD_INT 1
47147: PUSH
47148: LD_INT 2
47150: NEG
47151: PUSH
47152: EMPTY
47153: LIST
47154: LIST
47155: PUSH
47156: LD_INT 3
47158: PUSH
47159: LD_INT 2
47161: PUSH
47162: EMPTY
47163: LIST
47164: LIST
47165: PUSH
47166: LD_INT 2
47168: PUSH
47169: LD_INT 3
47171: PUSH
47172: EMPTY
47173: LIST
47174: LIST
47175: PUSH
47176: LD_INT 2
47178: NEG
47179: PUSH
47180: LD_INT 1
47182: PUSH
47183: EMPTY
47184: LIST
47185: LIST
47186: PUSH
47187: LD_INT 3
47189: NEG
47190: PUSH
47191: LD_INT 1
47193: NEG
47194: PUSH
47195: EMPTY
47196: LIST
47197: LIST
47198: PUSH
47199: EMPTY
47200: LIST
47201: LIST
47202: LIST
47203: LIST
47204: LIST
47205: LIST
47206: LIST
47207: LIST
47208: LIST
47209: LIST
47210: LIST
47211: LIST
47212: LIST
47213: LIST
47214: LIST
47215: LIST
47216: LIST
47217: LIST
47218: LIST
47219: LIST
47220: LIST
47221: LIST
47222: LIST
47223: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
47224: LD_ADDR_VAR 0 35
47228: PUSH
47229: LD_INT 0
47231: PUSH
47232: LD_INT 0
47234: PUSH
47235: EMPTY
47236: LIST
47237: LIST
47238: PUSH
47239: LD_INT 0
47241: PUSH
47242: LD_INT 1
47244: NEG
47245: PUSH
47246: EMPTY
47247: LIST
47248: LIST
47249: PUSH
47250: LD_INT 1
47252: PUSH
47253: LD_INT 0
47255: PUSH
47256: EMPTY
47257: LIST
47258: LIST
47259: PUSH
47260: LD_INT 1
47262: PUSH
47263: LD_INT 1
47265: PUSH
47266: EMPTY
47267: LIST
47268: LIST
47269: PUSH
47270: LD_INT 0
47272: PUSH
47273: LD_INT 1
47275: PUSH
47276: EMPTY
47277: LIST
47278: LIST
47279: PUSH
47280: LD_INT 1
47282: NEG
47283: PUSH
47284: LD_INT 0
47286: PUSH
47287: EMPTY
47288: LIST
47289: LIST
47290: PUSH
47291: LD_INT 1
47293: NEG
47294: PUSH
47295: LD_INT 1
47297: NEG
47298: PUSH
47299: EMPTY
47300: LIST
47301: LIST
47302: PUSH
47303: LD_INT 2
47305: PUSH
47306: LD_INT 1
47308: PUSH
47309: EMPTY
47310: LIST
47311: LIST
47312: PUSH
47313: LD_INT 2
47315: NEG
47316: PUSH
47317: LD_INT 1
47319: NEG
47320: PUSH
47321: EMPTY
47322: LIST
47323: LIST
47324: PUSH
47325: EMPTY
47326: LIST
47327: LIST
47328: LIST
47329: LIST
47330: LIST
47331: LIST
47332: LIST
47333: LIST
47334: LIST
47335: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
47336: LD_ADDR_VAR 0 36
47340: PUSH
47341: LD_INT 0
47343: PUSH
47344: LD_INT 0
47346: PUSH
47347: EMPTY
47348: LIST
47349: LIST
47350: PUSH
47351: LD_INT 0
47353: PUSH
47354: LD_INT 1
47356: NEG
47357: PUSH
47358: EMPTY
47359: LIST
47360: LIST
47361: PUSH
47362: LD_INT 1
47364: PUSH
47365: LD_INT 0
47367: PUSH
47368: EMPTY
47369: LIST
47370: LIST
47371: PUSH
47372: LD_INT 1
47374: PUSH
47375: LD_INT 1
47377: PUSH
47378: EMPTY
47379: LIST
47380: LIST
47381: PUSH
47382: LD_INT 0
47384: PUSH
47385: LD_INT 1
47387: PUSH
47388: EMPTY
47389: LIST
47390: LIST
47391: PUSH
47392: LD_INT 1
47394: NEG
47395: PUSH
47396: LD_INT 0
47398: PUSH
47399: EMPTY
47400: LIST
47401: LIST
47402: PUSH
47403: LD_INT 1
47405: NEG
47406: PUSH
47407: LD_INT 1
47409: NEG
47410: PUSH
47411: EMPTY
47412: LIST
47413: LIST
47414: PUSH
47415: LD_INT 1
47417: NEG
47418: PUSH
47419: LD_INT 2
47421: NEG
47422: PUSH
47423: EMPTY
47424: LIST
47425: LIST
47426: PUSH
47427: LD_INT 1
47429: PUSH
47430: LD_INT 2
47432: PUSH
47433: EMPTY
47434: LIST
47435: LIST
47436: PUSH
47437: EMPTY
47438: LIST
47439: LIST
47440: LIST
47441: LIST
47442: LIST
47443: LIST
47444: LIST
47445: LIST
47446: LIST
47447: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
47448: LD_ADDR_VAR 0 37
47452: PUSH
47453: LD_INT 0
47455: PUSH
47456: LD_INT 0
47458: PUSH
47459: EMPTY
47460: LIST
47461: LIST
47462: PUSH
47463: LD_INT 0
47465: PUSH
47466: LD_INT 1
47468: NEG
47469: PUSH
47470: EMPTY
47471: LIST
47472: LIST
47473: PUSH
47474: LD_INT 1
47476: PUSH
47477: LD_INT 0
47479: PUSH
47480: EMPTY
47481: LIST
47482: LIST
47483: PUSH
47484: LD_INT 1
47486: PUSH
47487: LD_INT 1
47489: PUSH
47490: EMPTY
47491: LIST
47492: LIST
47493: PUSH
47494: LD_INT 0
47496: PUSH
47497: LD_INT 1
47499: PUSH
47500: EMPTY
47501: LIST
47502: LIST
47503: PUSH
47504: LD_INT 1
47506: NEG
47507: PUSH
47508: LD_INT 0
47510: PUSH
47511: EMPTY
47512: LIST
47513: LIST
47514: PUSH
47515: LD_INT 1
47517: NEG
47518: PUSH
47519: LD_INT 1
47521: NEG
47522: PUSH
47523: EMPTY
47524: LIST
47525: LIST
47526: PUSH
47527: LD_INT 1
47529: PUSH
47530: LD_INT 1
47532: NEG
47533: PUSH
47534: EMPTY
47535: LIST
47536: LIST
47537: PUSH
47538: LD_INT 1
47540: NEG
47541: PUSH
47542: LD_INT 1
47544: PUSH
47545: EMPTY
47546: LIST
47547: LIST
47548: PUSH
47549: EMPTY
47550: LIST
47551: LIST
47552: LIST
47553: LIST
47554: LIST
47555: LIST
47556: LIST
47557: LIST
47558: LIST
47559: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
47560: LD_ADDR_VAR 0 38
47564: PUSH
47565: LD_INT 0
47567: PUSH
47568: LD_INT 0
47570: PUSH
47571: EMPTY
47572: LIST
47573: LIST
47574: PUSH
47575: LD_INT 0
47577: PUSH
47578: LD_INT 1
47580: NEG
47581: PUSH
47582: EMPTY
47583: LIST
47584: LIST
47585: PUSH
47586: LD_INT 1
47588: PUSH
47589: LD_INT 0
47591: PUSH
47592: EMPTY
47593: LIST
47594: LIST
47595: PUSH
47596: LD_INT 1
47598: PUSH
47599: LD_INT 1
47601: PUSH
47602: EMPTY
47603: LIST
47604: LIST
47605: PUSH
47606: LD_INT 0
47608: PUSH
47609: LD_INT 1
47611: PUSH
47612: EMPTY
47613: LIST
47614: LIST
47615: PUSH
47616: LD_INT 1
47618: NEG
47619: PUSH
47620: LD_INT 0
47622: PUSH
47623: EMPTY
47624: LIST
47625: LIST
47626: PUSH
47627: LD_INT 1
47629: NEG
47630: PUSH
47631: LD_INT 1
47633: NEG
47634: PUSH
47635: EMPTY
47636: LIST
47637: LIST
47638: PUSH
47639: LD_INT 2
47641: PUSH
47642: LD_INT 1
47644: PUSH
47645: EMPTY
47646: LIST
47647: LIST
47648: PUSH
47649: LD_INT 2
47651: NEG
47652: PUSH
47653: LD_INT 1
47655: NEG
47656: PUSH
47657: EMPTY
47658: LIST
47659: LIST
47660: PUSH
47661: EMPTY
47662: LIST
47663: LIST
47664: LIST
47665: LIST
47666: LIST
47667: LIST
47668: LIST
47669: LIST
47670: LIST
47671: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
47672: LD_ADDR_VAR 0 39
47676: PUSH
47677: LD_INT 0
47679: PUSH
47680: LD_INT 0
47682: PUSH
47683: EMPTY
47684: LIST
47685: LIST
47686: PUSH
47687: LD_INT 0
47689: PUSH
47690: LD_INT 1
47692: NEG
47693: PUSH
47694: EMPTY
47695: LIST
47696: LIST
47697: PUSH
47698: LD_INT 1
47700: PUSH
47701: LD_INT 0
47703: PUSH
47704: EMPTY
47705: LIST
47706: LIST
47707: PUSH
47708: LD_INT 1
47710: PUSH
47711: LD_INT 1
47713: PUSH
47714: EMPTY
47715: LIST
47716: LIST
47717: PUSH
47718: LD_INT 0
47720: PUSH
47721: LD_INT 1
47723: PUSH
47724: EMPTY
47725: LIST
47726: LIST
47727: PUSH
47728: LD_INT 1
47730: NEG
47731: PUSH
47732: LD_INT 0
47734: PUSH
47735: EMPTY
47736: LIST
47737: LIST
47738: PUSH
47739: LD_INT 1
47741: NEG
47742: PUSH
47743: LD_INT 1
47745: NEG
47746: PUSH
47747: EMPTY
47748: LIST
47749: LIST
47750: PUSH
47751: LD_INT 1
47753: NEG
47754: PUSH
47755: LD_INT 2
47757: NEG
47758: PUSH
47759: EMPTY
47760: LIST
47761: LIST
47762: PUSH
47763: LD_INT 1
47765: PUSH
47766: LD_INT 2
47768: PUSH
47769: EMPTY
47770: LIST
47771: LIST
47772: PUSH
47773: EMPTY
47774: LIST
47775: LIST
47776: LIST
47777: LIST
47778: LIST
47779: LIST
47780: LIST
47781: LIST
47782: LIST
47783: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
47784: LD_ADDR_VAR 0 40
47788: PUSH
47789: LD_INT 0
47791: PUSH
47792: LD_INT 0
47794: PUSH
47795: EMPTY
47796: LIST
47797: LIST
47798: PUSH
47799: LD_INT 0
47801: PUSH
47802: LD_INT 1
47804: NEG
47805: PUSH
47806: EMPTY
47807: LIST
47808: LIST
47809: PUSH
47810: LD_INT 1
47812: PUSH
47813: LD_INT 0
47815: PUSH
47816: EMPTY
47817: LIST
47818: LIST
47819: PUSH
47820: LD_INT 1
47822: PUSH
47823: LD_INT 1
47825: PUSH
47826: EMPTY
47827: LIST
47828: LIST
47829: PUSH
47830: LD_INT 0
47832: PUSH
47833: LD_INT 1
47835: PUSH
47836: EMPTY
47837: LIST
47838: LIST
47839: PUSH
47840: LD_INT 1
47842: NEG
47843: PUSH
47844: LD_INT 0
47846: PUSH
47847: EMPTY
47848: LIST
47849: LIST
47850: PUSH
47851: LD_INT 1
47853: NEG
47854: PUSH
47855: LD_INT 1
47857: NEG
47858: PUSH
47859: EMPTY
47860: LIST
47861: LIST
47862: PUSH
47863: LD_INT 1
47865: PUSH
47866: LD_INT 1
47868: NEG
47869: PUSH
47870: EMPTY
47871: LIST
47872: LIST
47873: PUSH
47874: LD_INT 1
47876: NEG
47877: PUSH
47878: LD_INT 1
47880: PUSH
47881: EMPTY
47882: LIST
47883: LIST
47884: PUSH
47885: EMPTY
47886: LIST
47887: LIST
47888: LIST
47889: LIST
47890: LIST
47891: LIST
47892: LIST
47893: LIST
47894: LIST
47895: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47896: LD_ADDR_VAR 0 41
47900: PUSH
47901: LD_INT 0
47903: PUSH
47904: LD_INT 0
47906: PUSH
47907: EMPTY
47908: LIST
47909: LIST
47910: PUSH
47911: LD_INT 0
47913: PUSH
47914: LD_INT 1
47916: NEG
47917: PUSH
47918: EMPTY
47919: LIST
47920: LIST
47921: PUSH
47922: LD_INT 1
47924: PUSH
47925: LD_INT 0
47927: PUSH
47928: EMPTY
47929: LIST
47930: LIST
47931: PUSH
47932: LD_INT 1
47934: PUSH
47935: LD_INT 1
47937: PUSH
47938: EMPTY
47939: LIST
47940: LIST
47941: PUSH
47942: LD_INT 0
47944: PUSH
47945: LD_INT 1
47947: PUSH
47948: EMPTY
47949: LIST
47950: LIST
47951: PUSH
47952: LD_INT 1
47954: NEG
47955: PUSH
47956: LD_INT 0
47958: PUSH
47959: EMPTY
47960: LIST
47961: LIST
47962: PUSH
47963: LD_INT 1
47965: NEG
47966: PUSH
47967: LD_INT 1
47969: NEG
47970: PUSH
47971: EMPTY
47972: LIST
47973: LIST
47974: PUSH
47975: LD_INT 1
47977: NEG
47978: PUSH
47979: LD_INT 2
47981: NEG
47982: PUSH
47983: EMPTY
47984: LIST
47985: LIST
47986: PUSH
47987: LD_INT 1
47989: PUSH
47990: LD_INT 1
47992: NEG
47993: PUSH
47994: EMPTY
47995: LIST
47996: LIST
47997: PUSH
47998: LD_INT 2
48000: PUSH
48001: LD_INT 0
48003: PUSH
48004: EMPTY
48005: LIST
48006: LIST
48007: PUSH
48008: LD_INT 2
48010: PUSH
48011: LD_INT 1
48013: PUSH
48014: EMPTY
48015: LIST
48016: LIST
48017: PUSH
48018: LD_INT 2
48020: PUSH
48021: LD_INT 2
48023: PUSH
48024: EMPTY
48025: LIST
48026: LIST
48027: PUSH
48028: LD_INT 1
48030: PUSH
48031: LD_INT 2
48033: PUSH
48034: EMPTY
48035: LIST
48036: LIST
48037: PUSH
48038: LD_INT 1
48040: NEG
48041: PUSH
48042: LD_INT 1
48044: PUSH
48045: EMPTY
48046: LIST
48047: LIST
48048: PUSH
48049: LD_INT 2
48051: NEG
48052: PUSH
48053: LD_INT 0
48055: PUSH
48056: EMPTY
48057: LIST
48058: LIST
48059: PUSH
48060: LD_INT 2
48062: NEG
48063: PUSH
48064: LD_INT 1
48066: NEG
48067: PUSH
48068: EMPTY
48069: LIST
48070: LIST
48071: PUSH
48072: LD_INT 2
48074: NEG
48075: PUSH
48076: LD_INT 2
48078: NEG
48079: PUSH
48080: EMPTY
48081: LIST
48082: LIST
48083: PUSH
48084: LD_INT 2
48086: NEG
48087: PUSH
48088: LD_INT 3
48090: NEG
48091: PUSH
48092: EMPTY
48093: LIST
48094: LIST
48095: PUSH
48096: LD_INT 2
48098: PUSH
48099: LD_INT 1
48101: NEG
48102: PUSH
48103: EMPTY
48104: LIST
48105: LIST
48106: PUSH
48107: LD_INT 3
48109: PUSH
48110: LD_INT 0
48112: PUSH
48113: EMPTY
48114: LIST
48115: LIST
48116: PUSH
48117: LD_INT 3
48119: PUSH
48120: LD_INT 1
48122: PUSH
48123: EMPTY
48124: LIST
48125: LIST
48126: PUSH
48127: LD_INT 3
48129: PUSH
48130: LD_INT 2
48132: PUSH
48133: EMPTY
48134: LIST
48135: LIST
48136: PUSH
48137: LD_INT 3
48139: PUSH
48140: LD_INT 3
48142: PUSH
48143: EMPTY
48144: LIST
48145: LIST
48146: PUSH
48147: LD_INT 2
48149: PUSH
48150: LD_INT 3
48152: PUSH
48153: EMPTY
48154: LIST
48155: LIST
48156: PUSH
48157: LD_INT 2
48159: NEG
48160: PUSH
48161: LD_INT 1
48163: PUSH
48164: EMPTY
48165: LIST
48166: LIST
48167: PUSH
48168: LD_INT 3
48170: NEG
48171: PUSH
48172: LD_INT 0
48174: PUSH
48175: EMPTY
48176: LIST
48177: LIST
48178: PUSH
48179: LD_INT 3
48181: NEG
48182: PUSH
48183: LD_INT 1
48185: NEG
48186: PUSH
48187: EMPTY
48188: LIST
48189: LIST
48190: PUSH
48191: LD_INT 3
48193: NEG
48194: PUSH
48195: LD_INT 2
48197: NEG
48198: PUSH
48199: EMPTY
48200: LIST
48201: LIST
48202: PUSH
48203: LD_INT 3
48205: NEG
48206: PUSH
48207: LD_INT 3
48209: NEG
48210: PUSH
48211: EMPTY
48212: LIST
48213: LIST
48214: PUSH
48215: EMPTY
48216: LIST
48217: LIST
48218: LIST
48219: LIST
48220: LIST
48221: LIST
48222: LIST
48223: LIST
48224: LIST
48225: LIST
48226: LIST
48227: LIST
48228: LIST
48229: LIST
48230: LIST
48231: LIST
48232: LIST
48233: LIST
48234: LIST
48235: LIST
48236: LIST
48237: LIST
48238: LIST
48239: LIST
48240: LIST
48241: LIST
48242: LIST
48243: LIST
48244: LIST
48245: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48246: LD_ADDR_VAR 0 42
48250: PUSH
48251: LD_INT 0
48253: PUSH
48254: LD_INT 0
48256: PUSH
48257: EMPTY
48258: LIST
48259: LIST
48260: PUSH
48261: LD_INT 0
48263: PUSH
48264: LD_INT 1
48266: NEG
48267: PUSH
48268: EMPTY
48269: LIST
48270: LIST
48271: PUSH
48272: LD_INT 1
48274: PUSH
48275: LD_INT 0
48277: PUSH
48278: EMPTY
48279: LIST
48280: LIST
48281: PUSH
48282: LD_INT 1
48284: PUSH
48285: LD_INT 1
48287: PUSH
48288: EMPTY
48289: LIST
48290: LIST
48291: PUSH
48292: LD_INT 0
48294: PUSH
48295: LD_INT 1
48297: PUSH
48298: EMPTY
48299: LIST
48300: LIST
48301: PUSH
48302: LD_INT 1
48304: NEG
48305: PUSH
48306: LD_INT 0
48308: PUSH
48309: EMPTY
48310: LIST
48311: LIST
48312: PUSH
48313: LD_INT 1
48315: NEG
48316: PUSH
48317: LD_INT 1
48319: NEG
48320: PUSH
48321: EMPTY
48322: LIST
48323: LIST
48324: PUSH
48325: LD_INT 1
48327: NEG
48328: PUSH
48329: LD_INT 2
48331: NEG
48332: PUSH
48333: EMPTY
48334: LIST
48335: LIST
48336: PUSH
48337: LD_INT 0
48339: PUSH
48340: LD_INT 2
48342: NEG
48343: PUSH
48344: EMPTY
48345: LIST
48346: LIST
48347: PUSH
48348: LD_INT 1
48350: PUSH
48351: LD_INT 1
48353: NEG
48354: PUSH
48355: EMPTY
48356: LIST
48357: LIST
48358: PUSH
48359: LD_INT 2
48361: PUSH
48362: LD_INT 1
48364: PUSH
48365: EMPTY
48366: LIST
48367: LIST
48368: PUSH
48369: LD_INT 2
48371: PUSH
48372: LD_INT 2
48374: PUSH
48375: EMPTY
48376: LIST
48377: LIST
48378: PUSH
48379: LD_INT 1
48381: PUSH
48382: LD_INT 2
48384: PUSH
48385: EMPTY
48386: LIST
48387: LIST
48388: PUSH
48389: LD_INT 0
48391: PUSH
48392: LD_INT 2
48394: PUSH
48395: EMPTY
48396: LIST
48397: LIST
48398: PUSH
48399: LD_INT 1
48401: NEG
48402: PUSH
48403: LD_INT 1
48405: PUSH
48406: EMPTY
48407: LIST
48408: LIST
48409: PUSH
48410: LD_INT 2
48412: NEG
48413: PUSH
48414: LD_INT 1
48416: NEG
48417: PUSH
48418: EMPTY
48419: LIST
48420: LIST
48421: PUSH
48422: LD_INT 2
48424: NEG
48425: PUSH
48426: LD_INT 2
48428: NEG
48429: PUSH
48430: EMPTY
48431: LIST
48432: LIST
48433: PUSH
48434: LD_INT 2
48436: NEG
48437: PUSH
48438: LD_INT 3
48440: NEG
48441: PUSH
48442: EMPTY
48443: LIST
48444: LIST
48445: PUSH
48446: LD_INT 1
48448: NEG
48449: PUSH
48450: LD_INT 3
48452: NEG
48453: PUSH
48454: EMPTY
48455: LIST
48456: LIST
48457: PUSH
48458: LD_INT 0
48460: PUSH
48461: LD_INT 3
48463: NEG
48464: PUSH
48465: EMPTY
48466: LIST
48467: LIST
48468: PUSH
48469: LD_INT 1
48471: PUSH
48472: LD_INT 2
48474: NEG
48475: PUSH
48476: EMPTY
48477: LIST
48478: LIST
48479: PUSH
48480: LD_INT 3
48482: PUSH
48483: LD_INT 2
48485: PUSH
48486: EMPTY
48487: LIST
48488: LIST
48489: PUSH
48490: LD_INT 3
48492: PUSH
48493: LD_INT 3
48495: PUSH
48496: EMPTY
48497: LIST
48498: LIST
48499: PUSH
48500: LD_INT 2
48502: PUSH
48503: LD_INT 3
48505: PUSH
48506: EMPTY
48507: LIST
48508: LIST
48509: PUSH
48510: LD_INT 1
48512: PUSH
48513: LD_INT 3
48515: PUSH
48516: EMPTY
48517: LIST
48518: LIST
48519: PUSH
48520: LD_INT 0
48522: PUSH
48523: LD_INT 3
48525: PUSH
48526: EMPTY
48527: LIST
48528: LIST
48529: PUSH
48530: LD_INT 1
48532: NEG
48533: PUSH
48534: LD_INT 2
48536: PUSH
48537: EMPTY
48538: LIST
48539: LIST
48540: PUSH
48541: LD_INT 3
48543: NEG
48544: PUSH
48545: LD_INT 2
48547: NEG
48548: PUSH
48549: EMPTY
48550: LIST
48551: LIST
48552: PUSH
48553: LD_INT 3
48555: NEG
48556: PUSH
48557: LD_INT 3
48559: NEG
48560: PUSH
48561: EMPTY
48562: LIST
48563: LIST
48564: PUSH
48565: EMPTY
48566: LIST
48567: LIST
48568: LIST
48569: LIST
48570: LIST
48571: LIST
48572: LIST
48573: LIST
48574: LIST
48575: LIST
48576: LIST
48577: LIST
48578: LIST
48579: LIST
48580: LIST
48581: LIST
48582: LIST
48583: LIST
48584: LIST
48585: LIST
48586: LIST
48587: LIST
48588: LIST
48589: LIST
48590: LIST
48591: LIST
48592: LIST
48593: LIST
48594: LIST
48595: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48596: LD_ADDR_VAR 0 43
48600: PUSH
48601: LD_INT 0
48603: PUSH
48604: LD_INT 0
48606: PUSH
48607: EMPTY
48608: LIST
48609: LIST
48610: PUSH
48611: LD_INT 0
48613: PUSH
48614: LD_INT 1
48616: NEG
48617: PUSH
48618: EMPTY
48619: LIST
48620: LIST
48621: PUSH
48622: LD_INT 1
48624: PUSH
48625: LD_INT 0
48627: PUSH
48628: EMPTY
48629: LIST
48630: LIST
48631: PUSH
48632: LD_INT 1
48634: PUSH
48635: LD_INT 1
48637: PUSH
48638: EMPTY
48639: LIST
48640: LIST
48641: PUSH
48642: LD_INT 0
48644: PUSH
48645: LD_INT 1
48647: PUSH
48648: EMPTY
48649: LIST
48650: LIST
48651: PUSH
48652: LD_INT 1
48654: NEG
48655: PUSH
48656: LD_INT 0
48658: PUSH
48659: EMPTY
48660: LIST
48661: LIST
48662: PUSH
48663: LD_INT 1
48665: NEG
48666: PUSH
48667: LD_INT 1
48669: NEG
48670: PUSH
48671: EMPTY
48672: LIST
48673: LIST
48674: PUSH
48675: LD_INT 1
48677: NEG
48678: PUSH
48679: LD_INT 2
48681: NEG
48682: PUSH
48683: EMPTY
48684: LIST
48685: LIST
48686: PUSH
48687: LD_INT 0
48689: PUSH
48690: LD_INT 2
48692: NEG
48693: PUSH
48694: EMPTY
48695: LIST
48696: LIST
48697: PUSH
48698: LD_INT 1
48700: PUSH
48701: LD_INT 1
48703: NEG
48704: PUSH
48705: EMPTY
48706: LIST
48707: LIST
48708: PUSH
48709: LD_INT 2
48711: PUSH
48712: LD_INT 0
48714: PUSH
48715: EMPTY
48716: LIST
48717: LIST
48718: PUSH
48719: LD_INT 2
48721: PUSH
48722: LD_INT 1
48724: PUSH
48725: EMPTY
48726: LIST
48727: LIST
48728: PUSH
48729: LD_INT 1
48731: PUSH
48732: LD_INT 2
48734: PUSH
48735: EMPTY
48736: LIST
48737: LIST
48738: PUSH
48739: LD_INT 0
48741: PUSH
48742: LD_INT 2
48744: PUSH
48745: EMPTY
48746: LIST
48747: LIST
48748: PUSH
48749: LD_INT 1
48751: NEG
48752: PUSH
48753: LD_INT 1
48755: PUSH
48756: EMPTY
48757: LIST
48758: LIST
48759: PUSH
48760: LD_INT 2
48762: NEG
48763: PUSH
48764: LD_INT 0
48766: PUSH
48767: EMPTY
48768: LIST
48769: LIST
48770: PUSH
48771: LD_INT 2
48773: NEG
48774: PUSH
48775: LD_INT 1
48777: NEG
48778: PUSH
48779: EMPTY
48780: LIST
48781: LIST
48782: PUSH
48783: LD_INT 1
48785: NEG
48786: PUSH
48787: LD_INT 3
48789: NEG
48790: PUSH
48791: EMPTY
48792: LIST
48793: LIST
48794: PUSH
48795: LD_INT 0
48797: PUSH
48798: LD_INT 3
48800: NEG
48801: PUSH
48802: EMPTY
48803: LIST
48804: LIST
48805: PUSH
48806: LD_INT 1
48808: PUSH
48809: LD_INT 2
48811: NEG
48812: PUSH
48813: EMPTY
48814: LIST
48815: LIST
48816: PUSH
48817: LD_INT 2
48819: PUSH
48820: LD_INT 1
48822: NEG
48823: PUSH
48824: EMPTY
48825: LIST
48826: LIST
48827: PUSH
48828: LD_INT 3
48830: PUSH
48831: LD_INT 0
48833: PUSH
48834: EMPTY
48835: LIST
48836: LIST
48837: PUSH
48838: LD_INT 3
48840: PUSH
48841: LD_INT 1
48843: PUSH
48844: EMPTY
48845: LIST
48846: LIST
48847: PUSH
48848: LD_INT 1
48850: PUSH
48851: LD_INT 3
48853: PUSH
48854: EMPTY
48855: LIST
48856: LIST
48857: PUSH
48858: LD_INT 0
48860: PUSH
48861: LD_INT 3
48863: PUSH
48864: EMPTY
48865: LIST
48866: LIST
48867: PUSH
48868: LD_INT 1
48870: NEG
48871: PUSH
48872: LD_INT 2
48874: PUSH
48875: EMPTY
48876: LIST
48877: LIST
48878: PUSH
48879: LD_INT 2
48881: NEG
48882: PUSH
48883: LD_INT 1
48885: PUSH
48886: EMPTY
48887: LIST
48888: LIST
48889: PUSH
48890: LD_INT 3
48892: NEG
48893: PUSH
48894: LD_INT 0
48896: PUSH
48897: EMPTY
48898: LIST
48899: LIST
48900: PUSH
48901: LD_INT 3
48903: NEG
48904: PUSH
48905: LD_INT 1
48907: NEG
48908: PUSH
48909: EMPTY
48910: LIST
48911: LIST
48912: PUSH
48913: EMPTY
48914: LIST
48915: LIST
48916: LIST
48917: LIST
48918: LIST
48919: LIST
48920: LIST
48921: LIST
48922: LIST
48923: LIST
48924: LIST
48925: LIST
48926: LIST
48927: LIST
48928: LIST
48929: LIST
48930: LIST
48931: LIST
48932: LIST
48933: LIST
48934: LIST
48935: LIST
48936: LIST
48937: LIST
48938: LIST
48939: LIST
48940: LIST
48941: LIST
48942: LIST
48943: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48944: LD_ADDR_VAR 0 44
48948: PUSH
48949: LD_INT 0
48951: PUSH
48952: LD_INT 0
48954: PUSH
48955: EMPTY
48956: LIST
48957: LIST
48958: PUSH
48959: LD_INT 0
48961: PUSH
48962: LD_INT 1
48964: NEG
48965: PUSH
48966: EMPTY
48967: LIST
48968: LIST
48969: PUSH
48970: LD_INT 1
48972: PUSH
48973: LD_INT 0
48975: PUSH
48976: EMPTY
48977: LIST
48978: LIST
48979: PUSH
48980: LD_INT 1
48982: PUSH
48983: LD_INT 1
48985: PUSH
48986: EMPTY
48987: LIST
48988: LIST
48989: PUSH
48990: LD_INT 0
48992: PUSH
48993: LD_INT 1
48995: PUSH
48996: EMPTY
48997: LIST
48998: LIST
48999: PUSH
49000: LD_INT 1
49002: NEG
49003: PUSH
49004: LD_INT 0
49006: PUSH
49007: EMPTY
49008: LIST
49009: LIST
49010: PUSH
49011: LD_INT 1
49013: NEG
49014: PUSH
49015: LD_INT 1
49017: NEG
49018: PUSH
49019: EMPTY
49020: LIST
49021: LIST
49022: PUSH
49023: LD_INT 1
49025: NEG
49026: PUSH
49027: LD_INT 2
49029: NEG
49030: PUSH
49031: EMPTY
49032: LIST
49033: LIST
49034: PUSH
49035: LD_INT 1
49037: PUSH
49038: LD_INT 1
49040: NEG
49041: PUSH
49042: EMPTY
49043: LIST
49044: LIST
49045: PUSH
49046: LD_INT 2
49048: PUSH
49049: LD_INT 0
49051: PUSH
49052: EMPTY
49053: LIST
49054: LIST
49055: PUSH
49056: LD_INT 2
49058: PUSH
49059: LD_INT 1
49061: PUSH
49062: EMPTY
49063: LIST
49064: LIST
49065: PUSH
49066: LD_INT 2
49068: PUSH
49069: LD_INT 2
49071: PUSH
49072: EMPTY
49073: LIST
49074: LIST
49075: PUSH
49076: LD_INT 1
49078: PUSH
49079: LD_INT 2
49081: PUSH
49082: EMPTY
49083: LIST
49084: LIST
49085: PUSH
49086: LD_INT 1
49088: NEG
49089: PUSH
49090: LD_INT 1
49092: PUSH
49093: EMPTY
49094: LIST
49095: LIST
49096: PUSH
49097: LD_INT 2
49099: NEG
49100: PUSH
49101: LD_INT 0
49103: PUSH
49104: EMPTY
49105: LIST
49106: LIST
49107: PUSH
49108: LD_INT 2
49110: NEG
49111: PUSH
49112: LD_INT 1
49114: NEG
49115: PUSH
49116: EMPTY
49117: LIST
49118: LIST
49119: PUSH
49120: LD_INT 2
49122: NEG
49123: PUSH
49124: LD_INT 2
49126: NEG
49127: PUSH
49128: EMPTY
49129: LIST
49130: LIST
49131: PUSH
49132: LD_INT 2
49134: NEG
49135: PUSH
49136: LD_INT 3
49138: NEG
49139: PUSH
49140: EMPTY
49141: LIST
49142: LIST
49143: PUSH
49144: LD_INT 2
49146: PUSH
49147: LD_INT 1
49149: NEG
49150: PUSH
49151: EMPTY
49152: LIST
49153: LIST
49154: PUSH
49155: LD_INT 3
49157: PUSH
49158: LD_INT 0
49160: PUSH
49161: EMPTY
49162: LIST
49163: LIST
49164: PUSH
49165: LD_INT 3
49167: PUSH
49168: LD_INT 1
49170: PUSH
49171: EMPTY
49172: LIST
49173: LIST
49174: PUSH
49175: LD_INT 3
49177: PUSH
49178: LD_INT 2
49180: PUSH
49181: EMPTY
49182: LIST
49183: LIST
49184: PUSH
49185: LD_INT 3
49187: PUSH
49188: LD_INT 3
49190: PUSH
49191: EMPTY
49192: LIST
49193: LIST
49194: PUSH
49195: LD_INT 2
49197: PUSH
49198: LD_INT 3
49200: PUSH
49201: EMPTY
49202: LIST
49203: LIST
49204: PUSH
49205: LD_INT 2
49207: NEG
49208: PUSH
49209: LD_INT 1
49211: PUSH
49212: EMPTY
49213: LIST
49214: LIST
49215: PUSH
49216: LD_INT 3
49218: NEG
49219: PUSH
49220: LD_INT 0
49222: PUSH
49223: EMPTY
49224: LIST
49225: LIST
49226: PUSH
49227: LD_INT 3
49229: NEG
49230: PUSH
49231: LD_INT 1
49233: NEG
49234: PUSH
49235: EMPTY
49236: LIST
49237: LIST
49238: PUSH
49239: LD_INT 3
49241: NEG
49242: PUSH
49243: LD_INT 2
49245: NEG
49246: PUSH
49247: EMPTY
49248: LIST
49249: LIST
49250: PUSH
49251: LD_INT 3
49253: NEG
49254: PUSH
49255: LD_INT 3
49257: NEG
49258: PUSH
49259: EMPTY
49260: LIST
49261: LIST
49262: PUSH
49263: EMPTY
49264: LIST
49265: LIST
49266: LIST
49267: LIST
49268: LIST
49269: LIST
49270: LIST
49271: LIST
49272: LIST
49273: LIST
49274: LIST
49275: LIST
49276: LIST
49277: LIST
49278: LIST
49279: LIST
49280: LIST
49281: LIST
49282: LIST
49283: LIST
49284: LIST
49285: LIST
49286: LIST
49287: LIST
49288: LIST
49289: LIST
49290: LIST
49291: LIST
49292: LIST
49293: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49294: LD_ADDR_VAR 0 45
49298: PUSH
49299: LD_INT 0
49301: PUSH
49302: LD_INT 0
49304: PUSH
49305: EMPTY
49306: LIST
49307: LIST
49308: PUSH
49309: LD_INT 0
49311: PUSH
49312: LD_INT 1
49314: NEG
49315: PUSH
49316: EMPTY
49317: LIST
49318: LIST
49319: PUSH
49320: LD_INT 1
49322: PUSH
49323: LD_INT 0
49325: PUSH
49326: EMPTY
49327: LIST
49328: LIST
49329: PUSH
49330: LD_INT 1
49332: PUSH
49333: LD_INT 1
49335: PUSH
49336: EMPTY
49337: LIST
49338: LIST
49339: PUSH
49340: LD_INT 0
49342: PUSH
49343: LD_INT 1
49345: PUSH
49346: EMPTY
49347: LIST
49348: LIST
49349: PUSH
49350: LD_INT 1
49352: NEG
49353: PUSH
49354: LD_INT 0
49356: PUSH
49357: EMPTY
49358: LIST
49359: LIST
49360: PUSH
49361: LD_INT 1
49363: NEG
49364: PUSH
49365: LD_INT 1
49367: NEG
49368: PUSH
49369: EMPTY
49370: LIST
49371: LIST
49372: PUSH
49373: LD_INT 1
49375: NEG
49376: PUSH
49377: LD_INT 2
49379: NEG
49380: PUSH
49381: EMPTY
49382: LIST
49383: LIST
49384: PUSH
49385: LD_INT 0
49387: PUSH
49388: LD_INT 2
49390: NEG
49391: PUSH
49392: EMPTY
49393: LIST
49394: LIST
49395: PUSH
49396: LD_INT 1
49398: PUSH
49399: LD_INT 1
49401: NEG
49402: PUSH
49403: EMPTY
49404: LIST
49405: LIST
49406: PUSH
49407: LD_INT 2
49409: PUSH
49410: LD_INT 1
49412: PUSH
49413: EMPTY
49414: LIST
49415: LIST
49416: PUSH
49417: LD_INT 2
49419: PUSH
49420: LD_INT 2
49422: PUSH
49423: EMPTY
49424: LIST
49425: LIST
49426: PUSH
49427: LD_INT 1
49429: PUSH
49430: LD_INT 2
49432: PUSH
49433: EMPTY
49434: LIST
49435: LIST
49436: PUSH
49437: LD_INT 0
49439: PUSH
49440: LD_INT 2
49442: PUSH
49443: EMPTY
49444: LIST
49445: LIST
49446: PUSH
49447: LD_INT 1
49449: NEG
49450: PUSH
49451: LD_INT 1
49453: PUSH
49454: EMPTY
49455: LIST
49456: LIST
49457: PUSH
49458: LD_INT 2
49460: NEG
49461: PUSH
49462: LD_INT 1
49464: NEG
49465: PUSH
49466: EMPTY
49467: LIST
49468: LIST
49469: PUSH
49470: LD_INT 2
49472: NEG
49473: PUSH
49474: LD_INT 2
49476: NEG
49477: PUSH
49478: EMPTY
49479: LIST
49480: LIST
49481: PUSH
49482: LD_INT 2
49484: NEG
49485: PUSH
49486: LD_INT 3
49488: NEG
49489: PUSH
49490: EMPTY
49491: LIST
49492: LIST
49493: PUSH
49494: LD_INT 1
49496: NEG
49497: PUSH
49498: LD_INT 3
49500: NEG
49501: PUSH
49502: EMPTY
49503: LIST
49504: LIST
49505: PUSH
49506: LD_INT 0
49508: PUSH
49509: LD_INT 3
49511: NEG
49512: PUSH
49513: EMPTY
49514: LIST
49515: LIST
49516: PUSH
49517: LD_INT 1
49519: PUSH
49520: LD_INT 2
49522: NEG
49523: PUSH
49524: EMPTY
49525: LIST
49526: LIST
49527: PUSH
49528: LD_INT 3
49530: PUSH
49531: LD_INT 2
49533: PUSH
49534: EMPTY
49535: LIST
49536: LIST
49537: PUSH
49538: LD_INT 3
49540: PUSH
49541: LD_INT 3
49543: PUSH
49544: EMPTY
49545: LIST
49546: LIST
49547: PUSH
49548: LD_INT 2
49550: PUSH
49551: LD_INT 3
49553: PUSH
49554: EMPTY
49555: LIST
49556: LIST
49557: PUSH
49558: LD_INT 1
49560: PUSH
49561: LD_INT 3
49563: PUSH
49564: EMPTY
49565: LIST
49566: LIST
49567: PUSH
49568: LD_INT 0
49570: PUSH
49571: LD_INT 3
49573: PUSH
49574: EMPTY
49575: LIST
49576: LIST
49577: PUSH
49578: LD_INT 1
49580: NEG
49581: PUSH
49582: LD_INT 2
49584: PUSH
49585: EMPTY
49586: LIST
49587: LIST
49588: PUSH
49589: LD_INT 3
49591: NEG
49592: PUSH
49593: LD_INT 2
49595: NEG
49596: PUSH
49597: EMPTY
49598: LIST
49599: LIST
49600: PUSH
49601: LD_INT 3
49603: NEG
49604: PUSH
49605: LD_INT 3
49607: NEG
49608: PUSH
49609: EMPTY
49610: LIST
49611: LIST
49612: PUSH
49613: EMPTY
49614: LIST
49615: LIST
49616: LIST
49617: LIST
49618: LIST
49619: LIST
49620: LIST
49621: LIST
49622: LIST
49623: LIST
49624: LIST
49625: LIST
49626: LIST
49627: LIST
49628: LIST
49629: LIST
49630: LIST
49631: LIST
49632: LIST
49633: LIST
49634: LIST
49635: LIST
49636: LIST
49637: LIST
49638: LIST
49639: LIST
49640: LIST
49641: LIST
49642: LIST
49643: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49644: LD_ADDR_VAR 0 46
49648: PUSH
49649: LD_INT 0
49651: PUSH
49652: LD_INT 0
49654: PUSH
49655: EMPTY
49656: LIST
49657: LIST
49658: PUSH
49659: LD_INT 0
49661: PUSH
49662: LD_INT 1
49664: NEG
49665: PUSH
49666: EMPTY
49667: LIST
49668: LIST
49669: PUSH
49670: LD_INT 1
49672: PUSH
49673: LD_INT 0
49675: PUSH
49676: EMPTY
49677: LIST
49678: LIST
49679: PUSH
49680: LD_INT 1
49682: PUSH
49683: LD_INT 1
49685: PUSH
49686: EMPTY
49687: LIST
49688: LIST
49689: PUSH
49690: LD_INT 0
49692: PUSH
49693: LD_INT 1
49695: PUSH
49696: EMPTY
49697: LIST
49698: LIST
49699: PUSH
49700: LD_INT 1
49702: NEG
49703: PUSH
49704: LD_INT 0
49706: PUSH
49707: EMPTY
49708: LIST
49709: LIST
49710: PUSH
49711: LD_INT 1
49713: NEG
49714: PUSH
49715: LD_INT 1
49717: NEG
49718: PUSH
49719: EMPTY
49720: LIST
49721: LIST
49722: PUSH
49723: LD_INT 1
49725: NEG
49726: PUSH
49727: LD_INT 2
49729: NEG
49730: PUSH
49731: EMPTY
49732: LIST
49733: LIST
49734: PUSH
49735: LD_INT 0
49737: PUSH
49738: LD_INT 2
49740: NEG
49741: PUSH
49742: EMPTY
49743: LIST
49744: LIST
49745: PUSH
49746: LD_INT 1
49748: PUSH
49749: LD_INT 1
49751: NEG
49752: PUSH
49753: EMPTY
49754: LIST
49755: LIST
49756: PUSH
49757: LD_INT 2
49759: PUSH
49760: LD_INT 0
49762: PUSH
49763: EMPTY
49764: LIST
49765: LIST
49766: PUSH
49767: LD_INT 2
49769: PUSH
49770: LD_INT 1
49772: PUSH
49773: EMPTY
49774: LIST
49775: LIST
49776: PUSH
49777: LD_INT 1
49779: PUSH
49780: LD_INT 2
49782: PUSH
49783: EMPTY
49784: LIST
49785: LIST
49786: PUSH
49787: LD_INT 0
49789: PUSH
49790: LD_INT 2
49792: PUSH
49793: EMPTY
49794: LIST
49795: LIST
49796: PUSH
49797: LD_INT 1
49799: NEG
49800: PUSH
49801: LD_INT 1
49803: PUSH
49804: EMPTY
49805: LIST
49806: LIST
49807: PUSH
49808: LD_INT 2
49810: NEG
49811: PUSH
49812: LD_INT 0
49814: PUSH
49815: EMPTY
49816: LIST
49817: LIST
49818: PUSH
49819: LD_INT 2
49821: NEG
49822: PUSH
49823: LD_INT 1
49825: NEG
49826: PUSH
49827: EMPTY
49828: LIST
49829: LIST
49830: PUSH
49831: LD_INT 1
49833: NEG
49834: PUSH
49835: LD_INT 3
49837: NEG
49838: PUSH
49839: EMPTY
49840: LIST
49841: LIST
49842: PUSH
49843: LD_INT 0
49845: PUSH
49846: LD_INT 3
49848: NEG
49849: PUSH
49850: EMPTY
49851: LIST
49852: LIST
49853: PUSH
49854: LD_INT 1
49856: PUSH
49857: LD_INT 2
49859: NEG
49860: PUSH
49861: EMPTY
49862: LIST
49863: LIST
49864: PUSH
49865: LD_INT 2
49867: PUSH
49868: LD_INT 1
49870: NEG
49871: PUSH
49872: EMPTY
49873: LIST
49874: LIST
49875: PUSH
49876: LD_INT 3
49878: PUSH
49879: LD_INT 0
49881: PUSH
49882: EMPTY
49883: LIST
49884: LIST
49885: PUSH
49886: LD_INT 3
49888: PUSH
49889: LD_INT 1
49891: PUSH
49892: EMPTY
49893: LIST
49894: LIST
49895: PUSH
49896: LD_INT 1
49898: PUSH
49899: LD_INT 3
49901: PUSH
49902: EMPTY
49903: LIST
49904: LIST
49905: PUSH
49906: LD_INT 0
49908: PUSH
49909: LD_INT 3
49911: PUSH
49912: EMPTY
49913: LIST
49914: LIST
49915: PUSH
49916: LD_INT 1
49918: NEG
49919: PUSH
49920: LD_INT 2
49922: PUSH
49923: EMPTY
49924: LIST
49925: LIST
49926: PUSH
49927: LD_INT 2
49929: NEG
49930: PUSH
49931: LD_INT 1
49933: PUSH
49934: EMPTY
49935: LIST
49936: LIST
49937: PUSH
49938: LD_INT 3
49940: NEG
49941: PUSH
49942: LD_INT 0
49944: PUSH
49945: EMPTY
49946: LIST
49947: LIST
49948: PUSH
49949: LD_INT 3
49951: NEG
49952: PUSH
49953: LD_INT 1
49955: NEG
49956: PUSH
49957: EMPTY
49958: LIST
49959: LIST
49960: PUSH
49961: EMPTY
49962: LIST
49963: LIST
49964: LIST
49965: LIST
49966: LIST
49967: LIST
49968: LIST
49969: LIST
49970: LIST
49971: LIST
49972: LIST
49973: LIST
49974: LIST
49975: LIST
49976: LIST
49977: LIST
49978: LIST
49979: LIST
49980: LIST
49981: LIST
49982: LIST
49983: LIST
49984: LIST
49985: LIST
49986: LIST
49987: LIST
49988: LIST
49989: LIST
49990: LIST
49991: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49992: LD_ADDR_VAR 0 47
49996: PUSH
49997: LD_INT 0
49999: PUSH
50000: LD_INT 0
50002: PUSH
50003: EMPTY
50004: LIST
50005: LIST
50006: PUSH
50007: LD_INT 0
50009: PUSH
50010: LD_INT 1
50012: NEG
50013: PUSH
50014: EMPTY
50015: LIST
50016: LIST
50017: PUSH
50018: LD_INT 1
50020: PUSH
50021: LD_INT 0
50023: PUSH
50024: EMPTY
50025: LIST
50026: LIST
50027: PUSH
50028: LD_INT 1
50030: PUSH
50031: LD_INT 1
50033: PUSH
50034: EMPTY
50035: LIST
50036: LIST
50037: PUSH
50038: LD_INT 0
50040: PUSH
50041: LD_INT 1
50043: PUSH
50044: EMPTY
50045: LIST
50046: LIST
50047: PUSH
50048: LD_INT 1
50050: NEG
50051: PUSH
50052: LD_INT 0
50054: PUSH
50055: EMPTY
50056: LIST
50057: LIST
50058: PUSH
50059: LD_INT 1
50061: NEG
50062: PUSH
50063: LD_INT 1
50065: NEG
50066: PUSH
50067: EMPTY
50068: LIST
50069: LIST
50070: PUSH
50071: LD_INT 1
50073: NEG
50074: PUSH
50075: LD_INT 2
50077: NEG
50078: PUSH
50079: EMPTY
50080: LIST
50081: LIST
50082: PUSH
50083: LD_INT 0
50085: PUSH
50086: LD_INT 2
50088: NEG
50089: PUSH
50090: EMPTY
50091: LIST
50092: LIST
50093: PUSH
50094: LD_INT 1
50096: PUSH
50097: LD_INT 1
50099: NEG
50100: PUSH
50101: EMPTY
50102: LIST
50103: LIST
50104: PUSH
50105: LD_INT 2
50107: NEG
50108: PUSH
50109: LD_INT 1
50111: NEG
50112: PUSH
50113: EMPTY
50114: LIST
50115: LIST
50116: PUSH
50117: LD_INT 2
50119: NEG
50120: PUSH
50121: LD_INT 2
50123: NEG
50124: PUSH
50125: EMPTY
50126: LIST
50127: LIST
50128: PUSH
50129: EMPTY
50130: LIST
50131: LIST
50132: LIST
50133: LIST
50134: LIST
50135: LIST
50136: LIST
50137: LIST
50138: LIST
50139: LIST
50140: LIST
50141: LIST
50142: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
50143: LD_ADDR_VAR 0 48
50147: PUSH
50148: LD_INT 0
50150: PUSH
50151: LD_INT 0
50153: PUSH
50154: EMPTY
50155: LIST
50156: LIST
50157: PUSH
50158: LD_INT 0
50160: PUSH
50161: LD_INT 1
50163: NEG
50164: PUSH
50165: EMPTY
50166: LIST
50167: LIST
50168: PUSH
50169: LD_INT 1
50171: PUSH
50172: LD_INT 0
50174: PUSH
50175: EMPTY
50176: LIST
50177: LIST
50178: PUSH
50179: LD_INT 1
50181: PUSH
50182: LD_INT 1
50184: PUSH
50185: EMPTY
50186: LIST
50187: LIST
50188: PUSH
50189: LD_INT 0
50191: PUSH
50192: LD_INT 1
50194: PUSH
50195: EMPTY
50196: LIST
50197: LIST
50198: PUSH
50199: LD_INT 1
50201: NEG
50202: PUSH
50203: LD_INT 0
50205: PUSH
50206: EMPTY
50207: LIST
50208: LIST
50209: PUSH
50210: LD_INT 1
50212: NEG
50213: PUSH
50214: LD_INT 1
50216: NEG
50217: PUSH
50218: EMPTY
50219: LIST
50220: LIST
50221: PUSH
50222: LD_INT 1
50224: NEG
50225: PUSH
50226: LD_INT 2
50228: NEG
50229: PUSH
50230: EMPTY
50231: LIST
50232: LIST
50233: PUSH
50234: LD_INT 0
50236: PUSH
50237: LD_INT 2
50239: NEG
50240: PUSH
50241: EMPTY
50242: LIST
50243: LIST
50244: PUSH
50245: LD_INT 1
50247: PUSH
50248: LD_INT 1
50250: NEG
50251: PUSH
50252: EMPTY
50253: LIST
50254: LIST
50255: PUSH
50256: LD_INT 2
50258: PUSH
50259: LD_INT 0
50261: PUSH
50262: EMPTY
50263: LIST
50264: LIST
50265: PUSH
50266: LD_INT 2
50268: PUSH
50269: LD_INT 1
50271: PUSH
50272: EMPTY
50273: LIST
50274: LIST
50275: PUSH
50276: EMPTY
50277: LIST
50278: LIST
50279: LIST
50280: LIST
50281: LIST
50282: LIST
50283: LIST
50284: LIST
50285: LIST
50286: LIST
50287: LIST
50288: LIST
50289: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
50290: LD_ADDR_VAR 0 49
50294: PUSH
50295: LD_INT 0
50297: PUSH
50298: LD_INT 0
50300: PUSH
50301: EMPTY
50302: LIST
50303: LIST
50304: PUSH
50305: LD_INT 0
50307: PUSH
50308: LD_INT 1
50310: NEG
50311: PUSH
50312: EMPTY
50313: LIST
50314: LIST
50315: PUSH
50316: LD_INT 1
50318: PUSH
50319: LD_INT 0
50321: PUSH
50322: EMPTY
50323: LIST
50324: LIST
50325: PUSH
50326: LD_INT 1
50328: PUSH
50329: LD_INT 1
50331: PUSH
50332: EMPTY
50333: LIST
50334: LIST
50335: PUSH
50336: LD_INT 0
50338: PUSH
50339: LD_INT 1
50341: PUSH
50342: EMPTY
50343: LIST
50344: LIST
50345: PUSH
50346: LD_INT 1
50348: NEG
50349: PUSH
50350: LD_INT 0
50352: PUSH
50353: EMPTY
50354: LIST
50355: LIST
50356: PUSH
50357: LD_INT 1
50359: NEG
50360: PUSH
50361: LD_INT 1
50363: NEG
50364: PUSH
50365: EMPTY
50366: LIST
50367: LIST
50368: PUSH
50369: LD_INT 1
50371: PUSH
50372: LD_INT 1
50374: NEG
50375: PUSH
50376: EMPTY
50377: LIST
50378: LIST
50379: PUSH
50380: LD_INT 2
50382: PUSH
50383: LD_INT 0
50385: PUSH
50386: EMPTY
50387: LIST
50388: LIST
50389: PUSH
50390: LD_INT 2
50392: PUSH
50393: LD_INT 1
50395: PUSH
50396: EMPTY
50397: LIST
50398: LIST
50399: PUSH
50400: LD_INT 2
50402: PUSH
50403: LD_INT 2
50405: PUSH
50406: EMPTY
50407: LIST
50408: LIST
50409: PUSH
50410: LD_INT 1
50412: PUSH
50413: LD_INT 2
50415: PUSH
50416: EMPTY
50417: LIST
50418: LIST
50419: PUSH
50420: EMPTY
50421: LIST
50422: LIST
50423: LIST
50424: LIST
50425: LIST
50426: LIST
50427: LIST
50428: LIST
50429: LIST
50430: LIST
50431: LIST
50432: LIST
50433: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
50434: LD_ADDR_VAR 0 50
50438: PUSH
50439: LD_INT 0
50441: PUSH
50442: LD_INT 0
50444: PUSH
50445: EMPTY
50446: LIST
50447: LIST
50448: PUSH
50449: LD_INT 0
50451: PUSH
50452: LD_INT 1
50454: NEG
50455: PUSH
50456: EMPTY
50457: LIST
50458: LIST
50459: PUSH
50460: LD_INT 1
50462: PUSH
50463: LD_INT 0
50465: PUSH
50466: EMPTY
50467: LIST
50468: LIST
50469: PUSH
50470: LD_INT 1
50472: PUSH
50473: LD_INT 1
50475: PUSH
50476: EMPTY
50477: LIST
50478: LIST
50479: PUSH
50480: LD_INT 0
50482: PUSH
50483: LD_INT 1
50485: PUSH
50486: EMPTY
50487: LIST
50488: LIST
50489: PUSH
50490: LD_INT 1
50492: NEG
50493: PUSH
50494: LD_INT 0
50496: PUSH
50497: EMPTY
50498: LIST
50499: LIST
50500: PUSH
50501: LD_INT 1
50503: NEG
50504: PUSH
50505: LD_INT 1
50507: NEG
50508: PUSH
50509: EMPTY
50510: LIST
50511: LIST
50512: PUSH
50513: LD_INT 2
50515: PUSH
50516: LD_INT 1
50518: PUSH
50519: EMPTY
50520: LIST
50521: LIST
50522: PUSH
50523: LD_INT 2
50525: PUSH
50526: LD_INT 2
50528: PUSH
50529: EMPTY
50530: LIST
50531: LIST
50532: PUSH
50533: LD_INT 1
50535: PUSH
50536: LD_INT 2
50538: PUSH
50539: EMPTY
50540: LIST
50541: LIST
50542: PUSH
50543: LD_INT 0
50545: PUSH
50546: LD_INT 2
50548: PUSH
50549: EMPTY
50550: LIST
50551: LIST
50552: PUSH
50553: LD_INT 1
50555: NEG
50556: PUSH
50557: LD_INT 1
50559: PUSH
50560: EMPTY
50561: LIST
50562: LIST
50563: PUSH
50564: EMPTY
50565: LIST
50566: LIST
50567: LIST
50568: LIST
50569: LIST
50570: LIST
50571: LIST
50572: LIST
50573: LIST
50574: LIST
50575: LIST
50576: LIST
50577: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
50578: LD_ADDR_VAR 0 51
50582: PUSH
50583: LD_INT 0
50585: PUSH
50586: LD_INT 0
50588: PUSH
50589: EMPTY
50590: LIST
50591: LIST
50592: PUSH
50593: LD_INT 0
50595: PUSH
50596: LD_INT 1
50598: NEG
50599: PUSH
50600: EMPTY
50601: LIST
50602: LIST
50603: PUSH
50604: LD_INT 1
50606: PUSH
50607: LD_INT 0
50609: PUSH
50610: EMPTY
50611: LIST
50612: LIST
50613: PUSH
50614: LD_INT 1
50616: PUSH
50617: LD_INT 1
50619: PUSH
50620: EMPTY
50621: LIST
50622: LIST
50623: PUSH
50624: LD_INT 0
50626: PUSH
50627: LD_INT 1
50629: PUSH
50630: EMPTY
50631: LIST
50632: LIST
50633: PUSH
50634: LD_INT 1
50636: NEG
50637: PUSH
50638: LD_INT 0
50640: PUSH
50641: EMPTY
50642: LIST
50643: LIST
50644: PUSH
50645: LD_INT 1
50647: NEG
50648: PUSH
50649: LD_INT 1
50651: NEG
50652: PUSH
50653: EMPTY
50654: LIST
50655: LIST
50656: PUSH
50657: LD_INT 1
50659: PUSH
50660: LD_INT 2
50662: PUSH
50663: EMPTY
50664: LIST
50665: LIST
50666: PUSH
50667: LD_INT 0
50669: PUSH
50670: LD_INT 2
50672: PUSH
50673: EMPTY
50674: LIST
50675: LIST
50676: PUSH
50677: LD_INT 1
50679: NEG
50680: PUSH
50681: LD_INT 1
50683: PUSH
50684: EMPTY
50685: LIST
50686: LIST
50687: PUSH
50688: LD_INT 2
50690: NEG
50691: PUSH
50692: LD_INT 0
50694: PUSH
50695: EMPTY
50696: LIST
50697: LIST
50698: PUSH
50699: LD_INT 2
50701: NEG
50702: PUSH
50703: LD_INT 1
50705: NEG
50706: PUSH
50707: EMPTY
50708: LIST
50709: LIST
50710: PUSH
50711: EMPTY
50712: LIST
50713: LIST
50714: LIST
50715: LIST
50716: LIST
50717: LIST
50718: LIST
50719: LIST
50720: LIST
50721: LIST
50722: LIST
50723: LIST
50724: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50725: LD_ADDR_VAR 0 52
50729: PUSH
50730: LD_INT 0
50732: PUSH
50733: LD_INT 0
50735: PUSH
50736: EMPTY
50737: LIST
50738: LIST
50739: PUSH
50740: LD_INT 0
50742: PUSH
50743: LD_INT 1
50745: NEG
50746: PUSH
50747: EMPTY
50748: LIST
50749: LIST
50750: PUSH
50751: LD_INT 1
50753: PUSH
50754: LD_INT 0
50756: PUSH
50757: EMPTY
50758: LIST
50759: LIST
50760: PUSH
50761: LD_INT 1
50763: PUSH
50764: LD_INT 1
50766: PUSH
50767: EMPTY
50768: LIST
50769: LIST
50770: PUSH
50771: LD_INT 0
50773: PUSH
50774: LD_INT 1
50776: PUSH
50777: EMPTY
50778: LIST
50779: LIST
50780: PUSH
50781: LD_INT 1
50783: NEG
50784: PUSH
50785: LD_INT 0
50787: PUSH
50788: EMPTY
50789: LIST
50790: LIST
50791: PUSH
50792: LD_INT 1
50794: NEG
50795: PUSH
50796: LD_INT 1
50798: NEG
50799: PUSH
50800: EMPTY
50801: LIST
50802: LIST
50803: PUSH
50804: LD_INT 1
50806: NEG
50807: PUSH
50808: LD_INT 2
50810: NEG
50811: PUSH
50812: EMPTY
50813: LIST
50814: LIST
50815: PUSH
50816: LD_INT 1
50818: NEG
50819: PUSH
50820: LD_INT 1
50822: PUSH
50823: EMPTY
50824: LIST
50825: LIST
50826: PUSH
50827: LD_INT 2
50829: NEG
50830: PUSH
50831: LD_INT 0
50833: PUSH
50834: EMPTY
50835: LIST
50836: LIST
50837: PUSH
50838: LD_INT 2
50840: NEG
50841: PUSH
50842: LD_INT 1
50844: NEG
50845: PUSH
50846: EMPTY
50847: LIST
50848: LIST
50849: PUSH
50850: LD_INT 2
50852: NEG
50853: PUSH
50854: LD_INT 2
50856: NEG
50857: PUSH
50858: EMPTY
50859: LIST
50860: LIST
50861: PUSH
50862: EMPTY
50863: LIST
50864: LIST
50865: LIST
50866: LIST
50867: LIST
50868: LIST
50869: LIST
50870: LIST
50871: LIST
50872: LIST
50873: LIST
50874: LIST
50875: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50876: LD_ADDR_VAR 0 53
50880: PUSH
50881: LD_INT 0
50883: PUSH
50884: LD_INT 0
50886: PUSH
50887: EMPTY
50888: LIST
50889: LIST
50890: PUSH
50891: LD_INT 0
50893: PUSH
50894: LD_INT 1
50896: NEG
50897: PUSH
50898: EMPTY
50899: LIST
50900: LIST
50901: PUSH
50902: LD_INT 1
50904: PUSH
50905: LD_INT 0
50907: PUSH
50908: EMPTY
50909: LIST
50910: LIST
50911: PUSH
50912: LD_INT 1
50914: PUSH
50915: LD_INT 1
50917: PUSH
50918: EMPTY
50919: LIST
50920: LIST
50921: PUSH
50922: LD_INT 0
50924: PUSH
50925: LD_INT 1
50927: PUSH
50928: EMPTY
50929: LIST
50930: LIST
50931: PUSH
50932: LD_INT 1
50934: NEG
50935: PUSH
50936: LD_INT 0
50938: PUSH
50939: EMPTY
50940: LIST
50941: LIST
50942: PUSH
50943: LD_INT 1
50945: NEG
50946: PUSH
50947: LD_INT 1
50949: NEG
50950: PUSH
50951: EMPTY
50952: LIST
50953: LIST
50954: PUSH
50955: LD_INT 1
50957: NEG
50958: PUSH
50959: LD_INT 2
50961: NEG
50962: PUSH
50963: EMPTY
50964: LIST
50965: LIST
50966: PUSH
50967: LD_INT 0
50969: PUSH
50970: LD_INT 2
50972: NEG
50973: PUSH
50974: EMPTY
50975: LIST
50976: LIST
50977: PUSH
50978: LD_INT 1
50980: PUSH
50981: LD_INT 1
50983: NEG
50984: PUSH
50985: EMPTY
50986: LIST
50987: LIST
50988: PUSH
50989: LD_INT 2
50991: PUSH
50992: LD_INT 0
50994: PUSH
50995: EMPTY
50996: LIST
50997: LIST
50998: PUSH
50999: LD_INT 2
51001: PUSH
51002: LD_INT 1
51004: PUSH
51005: EMPTY
51006: LIST
51007: LIST
51008: PUSH
51009: LD_INT 2
51011: PUSH
51012: LD_INT 2
51014: PUSH
51015: EMPTY
51016: LIST
51017: LIST
51018: PUSH
51019: LD_INT 1
51021: PUSH
51022: LD_INT 2
51024: PUSH
51025: EMPTY
51026: LIST
51027: LIST
51028: PUSH
51029: LD_INT 0
51031: PUSH
51032: LD_INT 2
51034: PUSH
51035: EMPTY
51036: LIST
51037: LIST
51038: PUSH
51039: LD_INT 1
51041: NEG
51042: PUSH
51043: LD_INT 1
51045: PUSH
51046: EMPTY
51047: LIST
51048: LIST
51049: PUSH
51050: LD_INT 2
51052: NEG
51053: PUSH
51054: LD_INT 0
51056: PUSH
51057: EMPTY
51058: LIST
51059: LIST
51060: PUSH
51061: LD_INT 2
51063: NEG
51064: PUSH
51065: LD_INT 1
51067: NEG
51068: PUSH
51069: EMPTY
51070: LIST
51071: LIST
51072: PUSH
51073: LD_INT 2
51075: NEG
51076: PUSH
51077: LD_INT 2
51079: NEG
51080: PUSH
51081: EMPTY
51082: LIST
51083: LIST
51084: PUSH
51085: EMPTY
51086: LIST
51087: LIST
51088: LIST
51089: LIST
51090: LIST
51091: LIST
51092: LIST
51093: LIST
51094: LIST
51095: LIST
51096: LIST
51097: LIST
51098: LIST
51099: LIST
51100: LIST
51101: LIST
51102: LIST
51103: LIST
51104: LIST
51105: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51106: LD_ADDR_VAR 0 54
51110: PUSH
51111: LD_INT 0
51113: PUSH
51114: LD_INT 0
51116: PUSH
51117: EMPTY
51118: LIST
51119: LIST
51120: PUSH
51121: LD_INT 0
51123: PUSH
51124: LD_INT 1
51126: NEG
51127: PUSH
51128: EMPTY
51129: LIST
51130: LIST
51131: PUSH
51132: LD_INT 1
51134: PUSH
51135: LD_INT 0
51137: PUSH
51138: EMPTY
51139: LIST
51140: LIST
51141: PUSH
51142: LD_INT 1
51144: PUSH
51145: LD_INT 1
51147: PUSH
51148: EMPTY
51149: LIST
51150: LIST
51151: PUSH
51152: LD_INT 0
51154: PUSH
51155: LD_INT 1
51157: PUSH
51158: EMPTY
51159: LIST
51160: LIST
51161: PUSH
51162: LD_INT 1
51164: NEG
51165: PUSH
51166: LD_INT 0
51168: PUSH
51169: EMPTY
51170: LIST
51171: LIST
51172: PUSH
51173: LD_INT 1
51175: NEG
51176: PUSH
51177: LD_INT 1
51179: NEG
51180: PUSH
51181: EMPTY
51182: LIST
51183: LIST
51184: PUSH
51185: LD_INT 1
51187: NEG
51188: PUSH
51189: LD_INT 2
51191: NEG
51192: PUSH
51193: EMPTY
51194: LIST
51195: LIST
51196: PUSH
51197: LD_INT 0
51199: PUSH
51200: LD_INT 2
51202: NEG
51203: PUSH
51204: EMPTY
51205: LIST
51206: LIST
51207: PUSH
51208: LD_INT 1
51210: PUSH
51211: LD_INT 1
51213: NEG
51214: PUSH
51215: EMPTY
51216: LIST
51217: LIST
51218: PUSH
51219: LD_INT 2
51221: PUSH
51222: LD_INT 0
51224: PUSH
51225: EMPTY
51226: LIST
51227: LIST
51228: PUSH
51229: LD_INT 2
51231: PUSH
51232: LD_INT 1
51234: PUSH
51235: EMPTY
51236: LIST
51237: LIST
51238: PUSH
51239: LD_INT 2
51241: PUSH
51242: LD_INT 2
51244: PUSH
51245: EMPTY
51246: LIST
51247: LIST
51248: PUSH
51249: LD_INT 1
51251: PUSH
51252: LD_INT 2
51254: PUSH
51255: EMPTY
51256: LIST
51257: LIST
51258: PUSH
51259: LD_INT 0
51261: PUSH
51262: LD_INT 2
51264: PUSH
51265: EMPTY
51266: LIST
51267: LIST
51268: PUSH
51269: LD_INT 1
51271: NEG
51272: PUSH
51273: LD_INT 1
51275: PUSH
51276: EMPTY
51277: LIST
51278: LIST
51279: PUSH
51280: LD_INT 2
51282: NEG
51283: PUSH
51284: LD_INT 0
51286: PUSH
51287: EMPTY
51288: LIST
51289: LIST
51290: PUSH
51291: LD_INT 2
51293: NEG
51294: PUSH
51295: LD_INT 1
51297: NEG
51298: PUSH
51299: EMPTY
51300: LIST
51301: LIST
51302: PUSH
51303: LD_INT 2
51305: NEG
51306: PUSH
51307: LD_INT 2
51309: NEG
51310: PUSH
51311: EMPTY
51312: LIST
51313: LIST
51314: PUSH
51315: EMPTY
51316: LIST
51317: LIST
51318: LIST
51319: LIST
51320: LIST
51321: LIST
51322: LIST
51323: LIST
51324: LIST
51325: LIST
51326: LIST
51327: LIST
51328: LIST
51329: LIST
51330: LIST
51331: LIST
51332: LIST
51333: LIST
51334: LIST
51335: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51336: LD_ADDR_VAR 0 55
51340: PUSH
51341: LD_INT 0
51343: PUSH
51344: LD_INT 0
51346: PUSH
51347: EMPTY
51348: LIST
51349: LIST
51350: PUSH
51351: LD_INT 0
51353: PUSH
51354: LD_INT 1
51356: NEG
51357: PUSH
51358: EMPTY
51359: LIST
51360: LIST
51361: PUSH
51362: LD_INT 1
51364: PUSH
51365: LD_INT 0
51367: PUSH
51368: EMPTY
51369: LIST
51370: LIST
51371: PUSH
51372: LD_INT 1
51374: PUSH
51375: LD_INT 1
51377: PUSH
51378: EMPTY
51379: LIST
51380: LIST
51381: PUSH
51382: LD_INT 0
51384: PUSH
51385: LD_INT 1
51387: PUSH
51388: EMPTY
51389: LIST
51390: LIST
51391: PUSH
51392: LD_INT 1
51394: NEG
51395: PUSH
51396: LD_INT 0
51398: PUSH
51399: EMPTY
51400: LIST
51401: LIST
51402: PUSH
51403: LD_INT 1
51405: NEG
51406: PUSH
51407: LD_INT 1
51409: NEG
51410: PUSH
51411: EMPTY
51412: LIST
51413: LIST
51414: PUSH
51415: LD_INT 1
51417: NEG
51418: PUSH
51419: LD_INT 2
51421: NEG
51422: PUSH
51423: EMPTY
51424: LIST
51425: LIST
51426: PUSH
51427: LD_INT 0
51429: PUSH
51430: LD_INT 2
51432: NEG
51433: PUSH
51434: EMPTY
51435: LIST
51436: LIST
51437: PUSH
51438: LD_INT 1
51440: PUSH
51441: LD_INT 1
51443: NEG
51444: PUSH
51445: EMPTY
51446: LIST
51447: LIST
51448: PUSH
51449: LD_INT 2
51451: PUSH
51452: LD_INT 0
51454: PUSH
51455: EMPTY
51456: LIST
51457: LIST
51458: PUSH
51459: LD_INT 2
51461: PUSH
51462: LD_INT 1
51464: PUSH
51465: EMPTY
51466: LIST
51467: LIST
51468: PUSH
51469: LD_INT 2
51471: PUSH
51472: LD_INT 2
51474: PUSH
51475: EMPTY
51476: LIST
51477: LIST
51478: PUSH
51479: LD_INT 1
51481: PUSH
51482: LD_INT 2
51484: PUSH
51485: EMPTY
51486: LIST
51487: LIST
51488: PUSH
51489: LD_INT 0
51491: PUSH
51492: LD_INT 2
51494: PUSH
51495: EMPTY
51496: LIST
51497: LIST
51498: PUSH
51499: LD_INT 1
51501: NEG
51502: PUSH
51503: LD_INT 1
51505: PUSH
51506: EMPTY
51507: LIST
51508: LIST
51509: PUSH
51510: LD_INT 2
51512: NEG
51513: PUSH
51514: LD_INT 0
51516: PUSH
51517: EMPTY
51518: LIST
51519: LIST
51520: PUSH
51521: LD_INT 2
51523: NEG
51524: PUSH
51525: LD_INT 1
51527: NEG
51528: PUSH
51529: EMPTY
51530: LIST
51531: LIST
51532: PUSH
51533: LD_INT 2
51535: NEG
51536: PUSH
51537: LD_INT 2
51539: NEG
51540: PUSH
51541: EMPTY
51542: LIST
51543: LIST
51544: PUSH
51545: EMPTY
51546: LIST
51547: LIST
51548: LIST
51549: LIST
51550: LIST
51551: LIST
51552: LIST
51553: LIST
51554: LIST
51555: LIST
51556: LIST
51557: LIST
51558: LIST
51559: LIST
51560: LIST
51561: LIST
51562: LIST
51563: LIST
51564: LIST
51565: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51566: LD_ADDR_VAR 0 56
51570: PUSH
51571: LD_INT 0
51573: PUSH
51574: LD_INT 0
51576: PUSH
51577: EMPTY
51578: LIST
51579: LIST
51580: PUSH
51581: LD_INT 0
51583: PUSH
51584: LD_INT 1
51586: NEG
51587: PUSH
51588: EMPTY
51589: LIST
51590: LIST
51591: PUSH
51592: LD_INT 1
51594: PUSH
51595: LD_INT 0
51597: PUSH
51598: EMPTY
51599: LIST
51600: LIST
51601: PUSH
51602: LD_INT 1
51604: PUSH
51605: LD_INT 1
51607: PUSH
51608: EMPTY
51609: LIST
51610: LIST
51611: PUSH
51612: LD_INT 0
51614: PUSH
51615: LD_INT 1
51617: PUSH
51618: EMPTY
51619: LIST
51620: LIST
51621: PUSH
51622: LD_INT 1
51624: NEG
51625: PUSH
51626: LD_INT 0
51628: PUSH
51629: EMPTY
51630: LIST
51631: LIST
51632: PUSH
51633: LD_INT 1
51635: NEG
51636: PUSH
51637: LD_INT 1
51639: NEG
51640: PUSH
51641: EMPTY
51642: LIST
51643: LIST
51644: PUSH
51645: LD_INT 1
51647: NEG
51648: PUSH
51649: LD_INT 2
51651: NEG
51652: PUSH
51653: EMPTY
51654: LIST
51655: LIST
51656: PUSH
51657: LD_INT 0
51659: PUSH
51660: LD_INT 2
51662: NEG
51663: PUSH
51664: EMPTY
51665: LIST
51666: LIST
51667: PUSH
51668: LD_INT 1
51670: PUSH
51671: LD_INT 1
51673: NEG
51674: PUSH
51675: EMPTY
51676: LIST
51677: LIST
51678: PUSH
51679: LD_INT 2
51681: PUSH
51682: LD_INT 0
51684: PUSH
51685: EMPTY
51686: LIST
51687: LIST
51688: PUSH
51689: LD_INT 2
51691: PUSH
51692: LD_INT 1
51694: PUSH
51695: EMPTY
51696: LIST
51697: LIST
51698: PUSH
51699: LD_INT 2
51701: PUSH
51702: LD_INT 2
51704: PUSH
51705: EMPTY
51706: LIST
51707: LIST
51708: PUSH
51709: LD_INT 1
51711: PUSH
51712: LD_INT 2
51714: PUSH
51715: EMPTY
51716: LIST
51717: LIST
51718: PUSH
51719: LD_INT 0
51721: PUSH
51722: LD_INT 2
51724: PUSH
51725: EMPTY
51726: LIST
51727: LIST
51728: PUSH
51729: LD_INT 1
51731: NEG
51732: PUSH
51733: LD_INT 1
51735: PUSH
51736: EMPTY
51737: LIST
51738: LIST
51739: PUSH
51740: LD_INT 2
51742: NEG
51743: PUSH
51744: LD_INT 0
51746: PUSH
51747: EMPTY
51748: LIST
51749: LIST
51750: PUSH
51751: LD_INT 2
51753: NEG
51754: PUSH
51755: LD_INT 1
51757: NEG
51758: PUSH
51759: EMPTY
51760: LIST
51761: LIST
51762: PUSH
51763: LD_INT 2
51765: NEG
51766: PUSH
51767: LD_INT 2
51769: NEG
51770: PUSH
51771: EMPTY
51772: LIST
51773: LIST
51774: PUSH
51775: EMPTY
51776: LIST
51777: LIST
51778: LIST
51779: LIST
51780: LIST
51781: LIST
51782: LIST
51783: LIST
51784: LIST
51785: LIST
51786: LIST
51787: LIST
51788: LIST
51789: LIST
51790: LIST
51791: LIST
51792: LIST
51793: LIST
51794: LIST
51795: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51796: LD_ADDR_VAR 0 57
51800: PUSH
51801: LD_INT 0
51803: PUSH
51804: LD_INT 0
51806: PUSH
51807: EMPTY
51808: LIST
51809: LIST
51810: PUSH
51811: LD_INT 0
51813: PUSH
51814: LD_INT 1
51816: NEG
51817: PUSH
51818: EMPTY
51819: LIST
51820: LIST
51821: PUSH
51822: LD_INT 1
51824: PUSH
51825: LD_INT 0
51827: PUSH
51828: EMPTY
51829: LIST
51830: LIST
51831: PUSH
51832: LD_INT 1
51834: PUSH
51835: LD_INT 1
51837: PUSH
51838: EMPTY
51839: LIST
51840: LIST
51841: PUSH
51842: LD_INT 0
51844: PUSH
51845: LD_INT 1
51847: PUSH
51848: EMPTY
51849: LIST
51850: LIST
51851: PUSH
51852: LD_INT 1
51854: NEG
51855: PUSH
51856: LD_INT 0
51858: PUSH
51859: EMPTY
51860: LIST
51861: LIST
51862: PUSH
51863: LD_INT 1
51865: NEG
51866: PUSH
51867: LD_INT 1
51869: NEG
51870: PUSH
51871: EMPTY
51872: LIST
51873: LIST
51874: PUSH
51875: LD_INT 1
51877: NEG
51878: PUSH
51879: LD_INT 2
51881: NEG
51882: PUSH
51883: EMPTY
51884: LIST
51885: LIST
51886: PUSH
51887: LD_INT 0
51889: PUSH
51890: LD_INT 2
51892: NEG
51893: PUSH
51894: EMPTY
51895: LIST
51896: LIST
51897: PUSH
51898: LD_INT 1
51900: PUSH
51901: LD_INT 1
51903: NEG
51904: PUSH
51905: EMPTY
51906: LIST
51907: LIST
51908: PUSH
51909: LD_INT 2
51911: PUSH
51912: LD_INT 0
51914: PUSH
51915: EMPTY
51916: LIST
51917: LIST
51918: PUSH
51919: LD_INT 2
51921: PUSH
51922: LD_INT 1
51924: PUSH
51925: EMPTY
51926: LIST
51927: LIST
51928: PUSH
51929: LD_INT 2
51931: PUSH
51932: LD_INT 2
51934: PUSH
51935: EMPTY
51936: LIST
51937: LIST
51938: PUSH
51939: LD_INT 1
51941: PUSH
51942: LD_INT 2
51944: PUSH
51945: EMPTY
51946: LIST
51947: LIST
51948: PUSH
51949: LD_INT 0
51951: PUSH
51952: LD_INT 2
51954: PUSH
51955: EMPTY
51956: LIST
51957: LIST
51958: PUSH
51959: LD_INT 1
51961: NEG
51962: PUSH
51963: LD_INT 1
51965: PUSH
51966: EMPTY
51967: LIST
51968: LIST
51969: PUSH
51970: LD_INT 2
51972: NEG
51973: PUSH
51974: LD_INT 0
51976: PUSH
51977: EMPTY
51978: LIST
51979: LIST
51980: PUSH
51981: LD_INT 2
51983: NEG
51984: PUSH
51985: LD_INT 1
51987: NEG
51988: PUSH
51989: EMPTY
51990: LIST
51991: LIST
51992: PUSH
51993: LD_INT 2
51995: NEG
51996: PUSH
51997: LD_INT 2
51999: NEG
52000: PUSH
52001: EMPTY
52002: LIST
52003: LIST
52004: PUSH
52005: EMPTY
52006: LIST
52007: LIST
52008: LIST
52009: LIST
52010: LIST
52011: LIST
52012: LIST
52013: LIST
52014: LIST
52015: LIST
52016: LIST
52017: LIST
52018: LIST
52019: LIST
52020: LIST
52021: LIST
52022: LIST
52023: LIST
52024: LIST
52025: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52026: LD_ADDR_VAR 0 58
52030: PUSH
52031: LD_INT 0
52033: PUSH
52034: LD_INT 0
52036: PUSH
52037: EMPTY
52038: LIST
52039: LIST
52040: PUSH
52041: LD_INT 0
52043: PUSH
52044: LD_INT 1
52046: NEG
52047: PUSH
52048: EMPTY
52049: LIST
52050: LIST
52051: PUSH
52052: LD_INT 1
52054: PUSH
52055: LD_INT 0
52057: PUSH
52058: EMPTY
52059: LIST
52060: LIST
52061: PUSH
52062: LD_INT 1
52064: PUSH
52065: LD_INT 1
52067: PUSH
52068: EMPTY
52069: LIST
52070: LIST
52071: PUSH
52072: LD_INT 0
52074: PUSH
52075: LD_INT 1
52077: PUSH
52078: EMPTY
52079: LIST
52080: LIST
52081: PUSH
52082: LD_INT 1
52084: NEG
52085: PUSH
52086: LD_INT 0
52088: PUSH
52089: EMPTY
52090: LIST
52091: LIST
52092: PUSH
52093: LD_INT 1
52095: NEG
52096: PUSH
52097: LD_INT 1
52099: NEG
52100: PUSH
52101: EMPTY
52102: LIST
52103: LIST
52104: PUSH
52105: LD_INT 1
52107: NEG
52108: PUSH
52109: LD_INT 2
52111: NEG
52112: PUSH
52113: EMPTY
52114: LIST
52115: LIST
52116: PUSH
52117: LD_INT 0
52119: PUSH
52120: LD_INT 2
52122: NEG
52123: PUSH
52124: EMPTY
52125: LIST
52126: LIST
52127: PUSH
52128: LD_INT 1
52130: PUSH
52131: LD_INT 1
52133: NEG
52134: PUSH
52135: EMPTY
52136: LIST
52137: LIST
52138: PUSH
52139: LD_INT 2
52141: PUSH
52142: LD_INT 0
52144: PUSH
52145: EMPTY
52146: LIST
52147: LIST
52148: PUSH
52149: LD_INT 2
52151: PUSH
52152: LD_INT 1
52154: PUSH
52155: EMPTY
52156: LIST
52157: LIST
52158: PUSH
52159: LD_INT 2
52161: PUSH
52162: LD_INT 2
52164: PUSH
52165: EMPTY
52166: LIST
52167: LIST
52168: PUSH
52169: LD_INT 1
52171: PUSH
52172: LD_INT 2
52174: PUSH
52175: EMPTY
52176: LIST
52177: LIST
52178: PUSH
52179: LD_INT 0
52181: PUSH
52182: LD_INT 2
52184: PUSH
52185: EMPTY
52186: LIST
52187: LIST
52188: PUSH
52189: LD_INT 1
52191: NEG
52192: PUSH
52193: LD_INT 1
52195: PUSH
52196: EMPTY
52197: LIST
52198: LIST
52199: PUSH
52200: LD_INT 2
52202: NEG
52203: PUSH
52204: LD_INT 0
52206: PUSH
52207: EMPTY
52208: LIST
52209: LIST
52210: PUSH
52211: LD_INT 2
52213: NEG
52214: PUSH
52215: LD_INT 1
52217: NEG
52218: PUSH
52219: EMPTY
52220: LIST
52221: LIST
52222: PUSH
52223: LD_INT 2
52225: NEG
52226: PUSH
52227: LD_INT 2
52229: NEG
52230: PUSH
52231: EMPTY
52232: LIST
52233: LIST
52234: PUSH
52235: EMPTY
52236: LIST
52237: LIST
52238: LIST
52239: LIST
52240: LIST
52241: LIST
52242: LIST
52243: LIST
52244: LIST
52245: LIST
52246: LIST
52247: LIST
52248: LIST
52249: LIST
52250: LIST
52251: LIST
52252: LIST
52253: LIST
52254: LIST
52255: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52256: LD_ADDR_VAR 0 59
52260: PUSH
52261: LD_INT 0
52263: PUSH
52264: LD_INT 0
52266: PUSH
52267: EMPTY
52268: LIST
52269: LIST
52270: PUSH
52271: LD_INT 0
52273: PUSH
52274: LD_INT 1
52276: NEG
52277: PUSH
52278: EMPTY
52279: LIST
52280: LIST
52281: PUSH
52282: LD_INT 1
52284: PUSH
52285: LD_INT 0
52287: PUSH
52288: EMPTY
52289: LIST
52290: LIST
52291: PUSH
52292: LD_INT 1
52294: PUSH
52295: LD_INT 1
52297: PUSH
52298: EMPTY
52299: LIST
52300: LIST
52301: PUSH
52302: LD_INT 0
52304: PUSH
52305: LD_INT 1
52307: PUSH
52308: EMPTY
52309: LIST
52310: LIST
52311: PUSH
52312: LD_INT 1
52314: NEG
52315: PUSH
52316: LD_INT 0
52318: PUSH
52319: EMPTY
52320: LIST
52321: LIST
52322: PUSH
52323: LD_INT 1
52325: NEG
52326: PUSH
52327: LD_INT 1
52329: NEG
52330: PUSH
52331: EMPTY
52332: LIST
52333: LIST
52334: PUSH
52335: EMPTY
52336: LIST
52337: LIST
52338: LIST
52339: LIST
52340: LIST
52341: LIST
52342: LIST
52343: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52344: LD_ADDR_VAR 0 60
52348: PUSH
52349: LD_INT 0
52351: PUSH
52352: LD_INT 0
52354: PUSH
52355: EMPTY
52356: LIST
52357: LIST
52358: PUSH
52359: LD_INT 0
52361: PUSH
52362: LD_INT 1
52364: NEG
52365: PUSH
52366: EMPTY
52367: LIST
52368: LIST
52369: PUSH
52370: LD_INT 1
52372: PUSH
52373: LD_INT 0
52375: PUSH
52376: EMPTY
52377: LIST
52378: LIST
52379: PUSH
52380: LD_INT 1
52382: PUSH
52383: LD_INT 1
52385: PUSH
52386: EMPTY
52387: LIST
52388: LIST
52389: PUSH
52390: LD_INT 0
52392: PUSH
52393: LD_INT 1
52395: PUSH
52396: EMPTY
52397: LIST
52398: LIST
52399: PUSH
52400: LD_INT 1
52402: NEG
52403: PUSH
52404: LD_INT 0
52406: PUSH
52407: EMPTY
52408: LIST
52409: LIST
52410: PUSH
52411: LD_INT 1
52413: NEG
52414: PUSH
52415: LD_INT 1
52417: NEG
52418: PUSH
52419: EMPTY
52420: LIST
52421: LIST
52422: PUSH
52423: EMPTY
52424: LIST
52425: LIST
52426: LIST
52427: LIST
52428: LIST
52429: LIST
52430: LIST
52431: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52432: LD_ADDR_VAR 0 61
52436: PUSH
52437: LD_INT 0
52439: PUSH
52440: LD_INT 0
52442: PUSH
52443: EMPTY
52444: LIST
52445: LIST
52446: PUSH
52447: LD_INT 0
52449: PUSH
52450: LD_INT 1
52452: NEG
52453: PUSH
52454: EMPTY
52455: LIST
52456: LIST
52457: PUSH
52458: LD_INT 1
52460: PUSH
52461: LD_INT 0
52463: PUSH
52464: EMPTY
52465: LIST
52466: LIST
52467: PUSH
52468: LD_INT 1
52470: PUSH
52471: LD_INT 1
52473: PUSH
52474: EMPTY
52475: LIST
52476: LIST
52477: PUSH
52478: LD_INT 0
52480: PUSH
52481: LD_INT 1
52483: PUSH
52484: EMPTY
52485: LIST
52486: LIST
52487: PUSH
52488: LD_INT 1
52490: NEG
52491: PUSH
52492: LD_INT 0
52494: PUSH
52495: EMPTY
52496: LIST
52497: LIST
52498: PUSH
52499: LD_INT 1
52501: NEG
52502: PUSH
52503: LD_INT 1
52505: NEG
52506: PUSH
52507: EMPTY
52508: LIST
52509: LIST
52510: PUSH
52511: EMPTY
52512: LIST
52513: LIST
52514: LIST
52515: LIST
52516: LIST
52517: LIST
52518: LIST
52519: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52520: LD_ADDR_VAR 0 62
52524: PUSH
52525: LD_INT 0
52527: PUSH
52528: LD_INT 0
52530: PUSH
52531: EMPTY
52532: LIST
52533: LIST
52534: PUSH
52535: LD_INT 0
52537: PUSH
52538: LD_INT 1
52540: NEG
52541: PUSH
52542: EMPTY
52543: LIST
52544: LIST
52545: PUSH
52546: LD_INT 1
52548: PUSH
52549: LD_INT 0
52551: PUSH
52552: EMPTY
52553: LIST
52554: LIST
52555: PUSH
52556: LD_INT 1
52558: PUSH
52559: LD_INT 1
52561: PUSH
52562: EMPTY
52563: LIST
52564: LIST
52565: PUSH
52566: LD_INT 0
52568: PUSH
52569: LD_INT 1
52571: PUSH
52572: EMPTY
52573: LIST
52574: LIST
52575: PUSH
52576: LD_INT 1
52578: NEG
52579: PUSH
52580: LD_INT 0
52582: PUSH
52583: EMPTY
52584: LIST
52585: LIST
52586: PUSH
52587: LD_INT 1
52589: NEG
52590: PUSH
52591: LD_INT 1
52593: NEG
52594: PUSH
52595: EMPTY
52596: LIST
52597: LIST
52598: PUSH
52599: EMPTY
52600: LIST
52601: LIST
52602: LIST
52603: LIST
52604: LIST
52605: LIST
52606: LIST
52607: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52608: LD_ADDR_VAR 0 63
52612: PUSH
52613: LD_INT 0
52615: PUSH
52616: LD_INT 0
52618: PUSH
52619: EMPTY
52620: LIST
52621: LIST
52622: PUSH
52623: LD_INT 0
52625: PUSH
52626: LD_INT 1
52628: NEG
52629: PUSH
52630: EMPTY
52631: LIST
52632: LIST
52633: PUSH
52634: LD_INT 1
52636: PUSH
52637: LD_INT 0
52639: PUSH
52640: EMPTY
52641: LIST
52642: LIST
52643: PUSH
52644: LD_INT 1
52646: PUSH
52647: LD_INT 1
52649: PUSH
52650: EMPTY
52651: LIST
52652: LIST
52653: PUSH
52654: LD_INT 0
52656: PUSH
52657: LD_INT 1
52659: PUSH
52660: EMPTY
52661: LIST
52662: LIST
52663: PUSH
52664: LD_INT 1
52666: NEG
52667: PUSH
52668: LD_INT 0
52670: PUSH
52671: EMPTY
52672: LIST
52673: LIST
52674: PUSH
52675: LD_INT 1
52677: NEG
52678: PUSH
52679: LD_INT 1
52681: NEG
52682: PUSH
52683: EMPTY
52684: LIST
52685: LIST
52686: PUSH
52687: EMPTY
52688: LIST
52689: LIST
52690: LIST
52691: LIST
52692: LIST
52693: LIST
52694: LIST
52695: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52696: LD_ADDR_VAR 0 64
52700: PUSH
52701: LD_INT 0
52703: PUSH
52704: LD_INT 0
52706: PUSH
52707: EMPTY
52708: LIST
52709: LIST
52710: PUSH
52711: LD_INT 0
52713: PUSH
52714: LD_INT 1
52716: NEG
52717: PUSH
52718: EMPTY
52719: LIST
52720: LIST
52721: PUSH
52722: LD_INT 1
52724: PUSH
52725: LD_INT 0
52727: PUSH
52728: EMPTY
52729: LIST
52730: LIST
52731: PUSH
52732: LD_INT 1
52734: PUSH
52735: LD_INT 1
52737: PUSH
52738: EMPTY
52739: LIST
52740: LIST
52741: PUSH
52742: LD_INT 0
52744: PUSH
52745: LD_INT 1
52747: PUSH
52748: EMPTY
52749: LIST
52750: LIST
52751: PUSH
52752: LD_INT 1
52754: NEG
52755: PUSH
52756: LD_INT 0
52758: PUSH
52759: EMPTY
52760: LIST
52761: LIST
52762: PUSH
52763: LD_INT 1
52765: NEG
52766: PUSH
52767: LD_INT 1
52769: NEG
52770: PUSH
52771: EMPTY
52772: LIST
52773: LIST
52774: PUSH
52775: EMPTY
52776: LIST
52777: LIST
52778: LIST
52779: LIST
52780: LIST
52781: LIST
52782: LIST
52783: ST_TO_ADDR
// end ; 1 :
52784: GO 58681
52786: LD_INT 1
52788: DOUBLE
52789: EQUAL
52790: IFTRUE 52794
52792: GO 55417
52794: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
52795: LD_ADDR_VAR 0 11
52799: PUSH
52800: LD_INT 1
52802: NEG
52803: PUSH
52804: LD_INT 3
52806: NEG
52807: PUSH
52808: EMPTY
52809: LIST
52810: LIST
52811: PUSH
52812: LD_INT 0
52814: PUSH
52815: LD_INT 3
52817: NEG
52818: PUSH
52819: EMPTY
52820: LIST
52821: LIST
52822: PUSH
52823: LD_INT 1
52825: PUSH
52826: LD_INT 2
52828: NEG
52829: PUSH
52830: EMPTY
52831: LIST
52832: LIST
52833: PUSH
52834: EMPTY
52835: LIST
52836: LIST
52837: LIST
52838: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
52839: LD_ADDR_VAR 0 12
52843: PUSH
52844: LD_INT 2
52846: PUSH
52847: LD_INT 1
52849: NEG
52850: PUSH
52851: EMPTY
52852: LIST
52853: LIST
52854: PUSH
52855: LD_INT 3
52857: PUSH
52858: LD_INT 0
52860: PUSH
52861: EMPTY
52862: LIST
52863: LIST
52864: PUSH
52865: LD_INT 3
52867: PUSH
52868: LD_INT 1
52870: PUSH
52871: EMPTY
52872: LIST
52873: LIST
52874: PUSH
52875: EMPTY
52876: LIST
52877: LIST
52878: LIST
52879: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
52880: LD_ADDR_VAR 0 13
52884: PUSH
52885: LD_INT 3
52887: PUSH
52888: LD_INT 2
52890: PUSH
52891: EMPTY
52892: LIST
52893: LIST
52894: PUSH
52895: LD_INT 3
52897: PUSH
52898: LD_INT 3
52900: PUSH
52901: EMPTY
52902: LIST
52903: LIST
52904: PUSH
52905: LD_INT 2
52907: PUSH
52908: LD_INT 3
52910: PUSH
52911: EMPTY
52912: LIST
52913: LIST
52914: PUSH
52915: EMPTY
52916: LIST
52917: LIST
52918: LIST
52919: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
52920: LD_ADDR_VAR 0 14
52924: PUSH
52925: LD_INT 1
52927: PUSH
52928: LD_INT 3
52930: PUSH
52931: EMPTY
52932: LIST
52933: LIST
52934: PUSH
52935: LD_INT 0
52937: PUSH
52938: LD_INT 3
52940: PUSH
52941: EMPTY
52942: LIST
52943: LIST
52944: PUSH
52945: LD_INT 1
52947: NEG
52948: PUSH
52949: LD_INT 2
52951: PUSH
52952: EMPTY
52953: LIST
52954: LIST
52955: PUSH
52956: EMPTY
52957: LIST
52958: LIST
52959: LIST
52960: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52961: LD_ADDR_VAR 0 15
52965: PUSH
52966: LD_INT 2
52968: NEG
52969: PUSH
52970: LD_INT 1
52972: PUSH
52973: EMPTY
52974: LIST
52975: LIST
52976: PUSH
52977: LD_INT 3
52979: NEG
52980: PUSH
52981: LD_INT 0
52983: PUSH
52984: EMPTY
52985: LIST
52986: LIST
52987: PUSH
52988: LD_INT 3
52990: NEG
52991: PUSH
52992: LD_INT 1
52994: NEG
52995: PUSH
52996: EMPTY
52997: LIST
52998: LIST
52999: PUSH
53000: EMPTY
53001: LIST
53002: LIST
53003: LIST
53004: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53005: LD_ADDR_VAR 0 16
53009: PUSH
53010: LD_INT 2
53012: NEG
53013: PUSH
53014: LD_INT 3
53016: NEG
53017: PUSH
53018: EMPTY
53019: LIST
53020: LIST
53021: PUSH
53022: LD_INT 3
53024: NEG
53025: PUSH
53026: LD_INT 2
53028: NEG
53029: PUSH
53030: EMPTY
53031: LIST
53032: LIST
53033: PUSH
53034: LD_INT 3
53036: NEG
53037: PUSH
53038: LD_INT 3
53040: NEG
53041: PUSH
53042: EMPTY
53043: LIST
53044: LIST
53045: PUSH
53046: EMPTY
53047: LIST
53048: LIST
53049: LIST
53050: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53051: LD_ADDR_VAR 0 17
53055: PUSH
53056: LD_INT 1
53058: NEG
53059: PUSH
53060: LD_INT 3
53062: NEG
53063: PUSH
53064: EMPTY
53065: LIST
53066: LIST
53067: PUSH
53068: LD_INT 0
53070: PUSH
53071: LD_INT 3
53073: NEG
53074: PUSH
53075: EMPTY
53076: LIST
53077: LIST
53078: PUSH
53079: LD_INT 1
53081: PUSH
53082: LD_INT 2
53084: NEG
53085: PUSH
53086: EMPTY
53087: LIST
53088: LIST
53089: PUSH
53090: EMPTY
53091: LIST
53092: LIST
53093: LIST
53094: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53095: LD_ADDR_VAR 0 18
53099: PUSH
53100: LD_INT 2
53102: PUSH
53103: LD_INT 1
53105: NEG
53106: PUSH
53107: EMPTY
53108: LIST
53109: LIST
53110: PUSH
53111: LD_INT 3
53113: PUSH
53114: LD_INT 0
53116: PUSH
53117: EMPTY
53118: LIST
53119: LIST
53120: PUSH
53121: LD_INT 3
53123: PUSH
53124: LD_INT 1
53126: PUSH
53127: EMPTY
53128: LIST
53129: LIST
53130: PUSH
53131: EMPTY
53132: LIST
53133: LIST
53134: LIST
53135: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53136: LD_ADDR_VAR 0 19
53140: PUSH
53141: LD_INT 3
53143: PUSH
53144: LD_INT 2
53146: PUSH
53147: EMPTY
53148: LIST
53149: LIST
53150: PUSH
53151: LD_INT 3
53153: PUSH
53154: LD_INT 3
53156: PUSH
53157: EMPTY
53158: LIST
53159: LIST
53160: PUSH
53161: LD_INT 2
53163: PUSH
53164: LD_INT 3
53166: PUSH
53167: EMPTY
53168: LIST
53169: LIST
53170: PUSH
53171: EMPTY
53172: LIST
53173: LIST
53174: LIST
53175: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53176: LD_ADDR_VAR 0 20
53180: PUSH
53181: LD_INT 1
53183: PUSH
53184: LD_INT 3
53186: PUSH
53187: EMPTY
53188: LIST
53189: LIST
53190: PUSH
53191: LD_INT 0
53193: PUSH
53194: LD_INT 3
53196: PUSH
53197: EMPTY
53198: LIST
53199: LIST
53200: PUSH
53201: LD_INT 1
53203: NEG
53204: PUSH
53205: LD_INT 2
53207: PUSH
53208: EMPTY
53209: LIST
53210: LIST
53211: PUSH
53212: EMPTY
53213: LIST
53214: LIST
53215: LIST
53216: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53217: LD_ADDR_VAR 0 21
53221: PUSH
53222: LD_INT 2
53224: NEG
53225: PUSH
53226: LD_INT 1
53228: PUSH
53229: EMPTY
53230: LIST
53231: LIST
53232: PUSH
53233: LD_INT 3
53235: NEG
53236: PUSH
53237: LD_INT 0
53239: PUSH
53240: EMPTY
53241: LIST
53242: LIST
53243: PUSH
53244: LD_INT 3
53246: NEG
53247: PUSH
53248: LD_INT 1
53250: NEG
53251: PUSH
53252: EMPTY
53253: LIST
53254: LIST
53255: PUSH
53256: EMPTY
53257: LIST
53258: LIST
53259: LIST
53260: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53261: LD_ADDR_VAR 0 22
53265: PUSH
53266: LD_INT 2
53268: NEG
53269: PUSH
53270: LD_INT 3
53272: NEG
53273: PUSH
53274: EMPTY
53275: LIST
53276: LIST
53277: PUSH
53278: LD_INT 3
53280: NEG
53281: PUSH
53282: LD_INT 2
53284: NEG
53285: PUSH
53286: EMPTY
53287: LIST
53288: LIST
53289: PUSH
53290: LD_INT 3
53292: NEG
53293: PUSH
53294: LD_INT 3
53296: NEG
53297: PUSH
53298: EMPTY
53299: LIST
53300: LIST
53301: PUSH
53302: EMPTY
53303: LIST
53304: LIST
53305: LIST
53306: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
53307: LD_ADDR_VAR 0 23
53311: PUSH
53312: LD_INT 0
53314: PUSH
53315: LD_INT 3
53317: NEG
53318: PUSH
53319: EMPTY
53320: LIST
53321: LIST
53322: PUSH
53323: LD_INT 1
53325: NEG
53326: PUSH
53327: LD_INT 4
53329: NEG
53330: PUSH
53331: EMPTY
53332: LIST
53333: LIST
53334: PUSH
53335: LD_INT 1
53337: PUSH
53338: LD_INT 3
53340: NEG
53341: PUSH
53342: EMPTY
53343: LIST
53344: LIST
53345: PUSH
53346: EMPTY
53347: LIST
53348: LIST
53349: LIST
53350: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
53351: LD_ADDR_VAR 0 24
53355: PUSH
53356: LD_INT 3
53358: PUSH
53359: LD_INT 0
53361: PUSH
53362: EMPTY
53363: LIST
53364: LIST
53365: PUSH
53366: LD_INT 3
53368: PUSH
53369: LD_INT 1
53371: NEG
53372: PUSH
53373: EMPTY
53374: LIST
53375: LIST
53376: PUSH
53377: LD_INT 4
53379: PUSH
53380: LD_INT 1
53382: PUSH
53383: EMPTY
53384: LIST
53385: LIST
53386: PUSH
53387: EMPTY
53388: LIST
53389: LIST
53390: LIST
53391: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
53392: LD_ADDR_VAR 0 25
53396: PUSH
53397: LD_INT 3
53399: PUSH
53400: LD_INT 3
53402: PUSH
53403: EMPTY
53404: LIST
53405: LIST
53406: PUSH
53407: LD_INT 4
53409: PUSH
53410: LD_INT 3
53412: PUSH
53413: EMPTY
53414: LIST
53415: LIST
53416: PUSH
53417: LD_INT 3
53419: PUSH
53420: LD_INT 4
53422: PUSH
53423: EMPTY
53424: LIST
53425: LIST
53426: PUSH
53427: EMPTY
53428: LIST
53429: LIST
53430: LIST
53431: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
53432: LD_ADDR_VAR 0 26
53436: PUSH
53437: LD_INT 0
53439: PUSH
53440: LD_INT 3
53442: PUSH
53443: EMPTY
53444: LIST
53445: LIST
53446: PUSH
53447: LD_INT 1
53449: PUSH
53450: LD_INT 4
53452: PUSH
53453: EMPTY
53454: LIST
53455: LIST
53456: PUSH
53457: LD_INT 1
53459: NEG
53460: PUSH
53461: LD_INT 3
53463: PUSH
53464: EMPTY
53465: LIST
53466: LIST
53467: PUSH
53468: EMPTY
53469: LIST
53470: LIST
53471: LIST
53472: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
53473: LD_ADDR_VAR 0 27
53477: PUSH
53478: LD_INT 3
53480: NEG
53481: PUSH
53482: LD_INT 0
53484: PUSH
53485: EMPTY
53486: LIST
53487: LIST
53488: PUSH
53489: LD_INT 3
53491: NEG
53492: PUSH
53493: LD_INT 1
53495: PUSH
53496: EMPTY
53497: LIST
53498: LIST
53499: PUSH
53500: LD_INT 4
53502: NEG
53503: PUSH
53504: LD_INT 1
53506: NEG
53507: PUSH
53508: EMPTY
53509: LIST
53510: LIST
53511: PUSH
53512: EMPTY
53513: LIST
53514: LIST
53515: LIST
53516: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
53517: LD_ADDR_VAR 0 28
53521: PUSH
53522: LD_INT 3
53524: NEG
53525: PUSH
53526: LD_INT 3
53528: NEG
53529: PUSH
53530: EMPTY
53531: LIST
53532: LIST
53533: PUSH
53534: LD_INT 3
53536: NEG
53537: PUSH
53538: LD_INT 4
53540: NEG
53541: PUSH
53542: EMPTY
53543: LIST
53544: LIST
53545: PUSH
53546: LD_INT 4
53548: NEG
53549: PUSH
53550: LD_INT 3
53552: NEG
53553: PUSH
53554: EMPTY
53555: LIST
53556: LIST
53557: PUSH
53558: EMPTY
53559: LIST
53560: LIST
53561: LIST
53562: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
53563: LD_ADDR_VAR 0 29
53567: PUSH
53568: LD_INT 1
53570: NEG
53571: PUSH
53572: LD_INT 3
53574: NEG
53575: PUSH
53576: EMPTY
53577: LIST
53578: LIST
53579: PUSH
53580: LD_INT 0
53582: PUSH
53583: LD_INT 3
53585: NEG
53586: PUSH
53587: EMPTY
53588: LIST
53589: LIST
53590: PUSH
53591: LD_INT 1
53593: PUSH
53594: LD_INT 2
53596: NEG
53597: PUSH
53598: EMPTY
53599: LIST
53600: LIST
53601: PUSH
53602: LD_INT 1
53604: NEG
53605: PUSH
53606: LD_INT 4
53608: NEG
53609: PUSH
53610: EMPTY
53611: LIST
53612: LIST
53613: PUSH
53614: LD_INT 0
53616: PUSH
53617: LD_INT 4
53619: NEG
53620: PUSH
53621: EMPTY
53622: LIST
53623: LIST
53624: PUSH
53625: LD_INT 1
53627: PUSH
53628: LD_INT 3
53630: NEG
53631: PUSH
53632: EMPTY
53633: LIST
53634: LIST
53635: PUSH
53636: LD_INT 1
53638: NEG
53639: PUSH
53640: LD_INT 5
53642: NEG
53643: PUSH
53644: EMPTY
53645: LIST
53646: LIST
53647: PUSH
53648: LD_INT 0
53650: PUSH
53651: LD_INT 5
53653: NEG
53654: PUSH
53655: EMPTY
53656: LIST
53657: LIST
53658: PUSH
53659: LD_INT 1
53661: PUSH
53662: LD_INT 4
53664: NEG
53665: PUSH
53666: EMPTY
53667: LIST
53668: LIST
53669: PUSH
53670: LD_INT 1
53672: NEG
53673: PUSH
53674: LD_INT 6
53676: NEG
53677: PUSH
53678: EMPTY
53679: LIST
53680: LIST
53681: PUSH
53682: LD_INT 0
53684: PUSH
53685: LD_INT 6
53687: NEG
53688: PUSH
53689: EMPTY
53690: LIST
53691: LIST
53692: PUSH
53693: LD_INT 1
53695: PUSH
53696: LD_INT 5
53698: NEG
53699: PUSH
53700: EMPTY
53701: LIST
53702: LIST
53703: PUSH
53704: EMPTY
53705: LIST
53706: LIST
53707: LIST
53708: LIST
53709: LIST
53710: LIST
53711: LIST
53712: LIST
53713: LIST
53714: LIST
53715: LIST
53716: LIST
53717: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
53718: LD_ADDR_VAR 0 30
53722: PUSH
53723: LD_INT 2
53725: PUSH
53726: LD_INT 1
53728: NEG
53729: PUSH
53730: EMPTY
53731: LIST
53732: LIST
53733: PUSH
53734: LD_INT 3
53736: PUSH
53737: LD_INT 0
53739: PUSH
53740: EMPTY
53741: LIST
53742: LIST
53743: PUSH
53744: LD_INT 3
53746: PUSH
53747: LD_INT 1
53749: PUSH
53750: EMPTY
53751: LIST
53752: LIST
53753: PUSH
53754: LD_INT 3
53756: PUSH
53757: LD_INT 1
53759: NEG
53760: PUSH
53761: EMPTY
53762: LIST
53763: LIST
53764: PUSH
53765: LD_INT 4
53767: PUSH
53768: LD_INT 0
53770: PUSH
53771: EMPTY
53772: LIST
53773: LIST
53774: PUSH
53775: LD_INT 4
53777: PUSH
53778: LD_INT 1
53780: PUSH
53781: EMPTY
53782: LIST
53783: LIST
53784: PUSH
53785: LD_INT 4
53787: PUSH
53788: LD_INT 1
53790: NEG
53791: PUSH
53792: EMPTY
53793: LIST
53794: LIST
53795: PUSH
53796: LD_INT 5
53798: PUSH
53799: LD_INT 0
53801: PUSH
53802: EMPTY
53803: LIST
53804: LIST
53805: PUSH
53806: LD_INT 5
53808: PUSH
53809: LD_INT 1
53811: PUSH
53812: EMPTY
53813: LIST
53814: LIST
53815: PUSH
53816: LD_INT 5
53818: PUSH
53819: LD_INT 1
53821: NEG
53822: PUSH
53823: EMPTY
53824: LIST
53825: LIST
53826: PUSH
53827: LD_INT 6
53829: PUSH
53830: LD_INT 0
53832: PUSH
53833: EMPTY
53834: LIST
53835: LIST
53836: PUSH
53837: LD_INT 6
53839: PUSH
53840: LD_INT 1
53842: PUSH
53843: EMPTY
53844: LIST
53845: LIST
53846: PUSH
53847: EMPTY
53848: LIST
53849: LIST
53850: LIST
53851: LIST
53852: LIST
53853: LIST
53854: LIST
53855: LIST
53856: LIST
53857: LIST
53858: LIST
53859: LIST
53860: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
53861: LD_ADDR_VAR 0 31
53865: PUSH
53866: LD_INT 3
53868: PUSH
53869: LD_INT 2
53871: PUSH
53872: EMPTY
53873: LIST
53874: LIST
53875: PUSH
53876: LD_INT 3
53878: PUSH
53879: LD_INT 3
53881: PUSH
53882: EMPTY
53883: LIST
53884: LIST
53885: PUSH
53886: LD_INT 2
53888: PUSH
53889: LD_INT 3
53891: PUSH
53892: EMPTY
53893: LIST
53894: LIST
53895: PUSH
53896: LD_INT 4
53898: PUSH
53899: LD_INT 3
53901: PUSH
53902: EMPTY
53903: LIST
53904: LIST
53905: PUSH
53906: LD_INT 4
53908: PUSH
53909: LD_INT 4
53911: PUSH
53912: EMPTY
53913: LIST
53914: LIST
53915: PUSH
53916: LD_INT 3
53918: PUSH
53919: LD_INT 4
53921: PUSH
53922: EMPTY
53923: LIST
53924: LIST
53925: PUSH
53926: LD_INT 5
53928: PUSH
53929: LD_INT 4
53931: PUSH
53932: EMPTY
53933: LIST
53934: LIST
53935: PUSH
53936: LD_INT 5
53938: PUSH
53939: LD_INT 5
53941: PUSH
53942: EMPTY
53943: LIST
53944: LIST
53945: PUSH
53946: LD_INT 4
53948: PUSH
53949: LD_INT 5
53951: PUSH
53952: EMPTY
53953: LIST
53954: LIST
53955: PUSH
53956: LD_INT 6
53958: PUSH
53959: LD_INT 5
53961: PUSH
53962: EMPTY
53963: LIST
53964: LIST
53965: PUSH
53966: LD_INT 6
53968: PUSH
53969: LD_INT 6
53971: PUSH
53972: EMPTY
53973: LIST
53974: LIST
53975: PUSH
53976: LD_INT 5
53978: PUSH
53979: LD_INT 6
53981: PUSH
53982: EMPTY
53983: LIST
53984: LIST
53985: PUSH
53986: EMPTY
53987: LIST
53988: LIST
53989: LIST
53990: LIST
53991: LIST
53992: LIST
53993: LIST
53994: LIST
53995: LIST
53996: LIST
53997: LIST
53998: LIST
53999: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
54000: LD_ADDR_VAR 0 32
54004: PUSH
54005: LD_INT 1
54007: PUSH
54008: LD_INT 3
54010: PUSH
54011: EMPTY
54012: LIST
54013: LIST
54014: PUSH
54015: LD_INT 0
54017: PUSH
54018: LD_INT 3
54020: PUSH
54021: EMPTY
54022: LIST
54023: LIST
54024: PUSH
54025: LD_INT 1
54027: NEG
54028: PUSH
54029: LD_INT 2
54031: PUSH
54032: EMPTY
54033: LIST
54034: LIST
54035: PUSH
54036: LD_INT 1
54038: PUSH
54039: LD_INT 4
54041: PUSH
54042: EMPTY
54043: LIST
54044: LIST
54045: PUSH
54046: LD_INT 0
54048: PUSH
54049: LD_INT 4
54051: PUSH
54052: EMPTY
54053: LIST
54054: LIST
54055: PUSH
54056: LD_INT 1
54058: NEG
54059: PUSH
54060: LD_INT 3
54062: PUSH
54063: EMPTY
54064: LIST
54065: LIST
54066: PUSH
54067: LD_INT 1
54069: PUSH
54070: LD_INT 5
54072: PUSH
54073: EMPTY
54074: LIST
54075: LIST
54076: PUSH
54077: LD_INT 0
54079: PUSH
54080: LD_INT 5
54082: PUSH
54083: EMPTY
54084: LIST
54085: LIST
54086: PUSH
54087: LD_INT 1
54089: NEG
54090: PUSH
54091: LD_INT 4
54093: PUSH
54094: EMPTY
54095: LIST
54096: LIST
54097: PUSH
54098: LD_INT 1
54100: PUSH
54101: LD_INT 6
54103: PUSH
54104: EMPTY
54105: LIST
54106: LIST
54107: PUSH
54108: LD_INT 0
54110: PUSH
54111: LD_INT 6
54113: PUSH
54114: EMPTY
54115: LIST
54116: LIST
54117: PUSH
54118: LD_INT 1
54120: NEG
54121: PUSH
54122: LD_INT 5
54124: PUSH
54125: EMPTY
54126: LIST
54127: LIST
54128: PUSH
54129: EMPTY
54130: LIST
54131: LIST
54132: LIST
54133: LIST
54134: LIST
54135: LIST
54136: LIST
54137: LIST
54138: LIST
54139: LIST
54140: LIST
54141: LIST
54142: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
54143: LD_ADDR_VAR 0 33
54147: PUSH
54148: LD_INT 2
54150: NEG
54151: PUSH
54152: LD_INT 1
54154: PUSH
54155: EMPTY
54156: LIST
54157: LIST
54158: PUSH
54159: LD_INT 3
54161: NEG
54162: PUSH
54163: LD_INT 0
54165: PUSH
54166: EMPTY
54167: LIST
54168: LIST
54169: PUSH
54170: LD_INT 3
54172: NEG
54173: PUSH
54174: LD_INT 1
54176: NEG
54177: PUSH
54178: EMPTY
54179: LIST
54180: LIST
54181: PUSH
54182: LD_INT 3
54184: NEG
54185: PUSH
54186: LD_INT 1
54188: PUSH
54189: EMPTY
54190: LIST
54191: LIST
54192: PUSH
54193: LD_INT 4
54195: NEG
54196: PUSH
54197: LD_INT 0
54199: PUSH
54200: EMPTY
54201: LIST
54202: LIST
54203: PUSH
54204: LD_INT 4
54206: NEG
54207: PUSH
54208: LD_INT 1
54210: NEG
54211: PUSH
54212: EMPTY
54213: LIST
54214: LIST
54215: PUSH
54216: LD_INT 4
54218: NEG
54219: PUSH
54220: LD_INT 1
54222: PUSH
54223: EMPTY
54224: LIST
54225: LIST
54226: PUSH
54227: LD_INT 5
54229: NEG
54230: PUSH
54231: LD_INT 0
54233: PUSH
54234: EMPTY
54235: LIST
54236: LIST
54237: PUSH
54238: LD_INT 5
54240: NEG
54241: PUSH
54242: LD_INT 1
54244: NEG
54245: PUSH
54246: EMPTY
54247: LIST
54248: LIST
54249: PUSH
54250: LD_INT 5
54252: NEG
54253: PUSH
54254: LD_INT 1
54256: PUSH
54257: EMPTY
54258: LIST
54259: LIST
54260: PUSH
54261: LD_INT 6
54263: NEG
54264: PUSH
54265: LD_INT 0
54267: PUSH
54268: EMPTY
54269: LIST
54270: LIST
54271: PUSH
54272: LD_INT 6
54274: NEG
54275: PUSH
54276: LD_INT 1
54278: NEG
54279: PUSH
54280: EMPTY
54281: LIST
54282: LIST
54283: PUSH
54284: EMPTY
54285: LIST
54286: LIST
54287: LIST
54288: LIST
54289: LIST
54290: LIST
54291: LIST
54292: LIST
54293: LIST
54294: LIST
54295: LIST
54296: LIST
54297: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
54298: LD_ADDR_VAR 0 34
54302: PUSH
54303: LD_INT 2
54305: NEG
54306: PUSH
54307: LD_INT 3
54309: NEG
54310: PUSH
54311: EMPTY
54312: LIST
54313: LIST
54314: PUSH
54315: LD_INT 3
54317: NEG
54318: PUSH
54319: LD_INT 2
54321: NEG
54322: PUSH
54323: EMPTY
54324: LIST
54325: LIST
54326: PUSH
54327: LD_INT 3
54329: NEG
54330: PUSH
54331: LD_INT 3
54333: NEG
54334: PUSH
54335: EMPTY
54336: LIST
54337: LIST
54338: PUSH
54339: LD_INT 3
54341: NEG
54342: PUSH
54343: LD_INT 4
54345: NEG
54346: PUSH
54347: EMPTY
54348: LIST
54349: LIST
54350: PUSH
54351: LD_INT 4
54353: NEG
54354: PUSH
54355: LD_INT 3
54357: NEG
54358: PUSH
54359: EMPTY
54360: LIST
54361: LIST
54362: PUSH
54363: LD_INT 4
54365: NEG
54366: PUSH
54367: LD_INT 4
54369: NEG
54370: PUSH
54371: EMPTY
54372: LIST
54373: LIST
54374: PUSH
54375: LD_INT 4
54377: NEG
54378: PUSH
54379: LD_INT 5
54381: NEG
54382: PUSH
54383: EMPTY
54384: LIST
54385: LIST
54386: PUSH
54387: LD_INT 5
54389: NEG
54390: PUSH
54391: LD_INT 4
54393: NEG
54394: PUSH
54395: EMPTY
54396: LIST
54397: LIST
54398: PUSH
54399: LD_INT 5
54401: NEG
54402: PUSH
54403: LD_INT 5
54405: NEG
54406: PUSH
54407: EMPTY
54408: LIST
54409: LIST
54410: PUSH
54411: LD_INT 5
54413: NEG
54414: PUSH
54415: LD_INT 6
54417: NEG
54418: PUSH
54419: EMPTY
54420: LIST
54421: LIST
54422: PUSH
54423: LD_INT 6
54425: NEG
54426: PUSH
54427: LD_INT 5
54429: NEG
54430: PUSH
54431: EMPTY
54432: LIST
54433: LIST
54434: PUSH
54435: LD_INT 6
54437: NEG
54438: PUSH
54439: LD_INT 6
54441: NEG
54442: PUSH
54443: EMPTY
54444: LIST
54445: LIST
54446: PUSH
54447: EMPTY
54448: LIST
54449: LIST
54450: LIST
54451: LIST
54452: LIST
54453: LIST
54454: LIST
54455: LIST
54456: LIST
54457: LIST
54458: LIST
54459: LIST
54460: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
54461: LD_ADDR_VAR 0 41
54465: PUSH
54466: LD_INT 0
54468: PUSH
54469: LD_INT 2
54471: NEG
54472: PUSH
54473: EMPTY
54474: LIST
54475: LIST
54476: PUSH
54477: LD_INT 1
54479: NEG
54480: PUSH
54481: LD_INT 3
54483: NEG
54484: PUSH
54485: EMPTY
54486: LIST
54487: LIST
54488: PUSH
54489: LD_INT 1
54491: PUSH
54492: LD_INT 2
54494: NEG
54495: PUSH
54496: EMPTY
54497: LIST
54498: LIST
54499: PUSH
54500: EMPTY
54501: LIST
54502: LIST
54503: LIST
54504: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
54505: LD_ADDR_VAR 0 42
54509: PUSH
54510: LD_INT 2
54512: PUSH
54513: LD_INT 0
54515: PUSH
54516: EMPTY
54517: LIST
54518: LIST
54519: PUSH
54520: LD_INT 2
54522: PUSH
54523: LD_INT 1
54525: NEG
54526: PUSH
54527: EMPTY
54528: LIST
54529: LIST
54530: PUSH
54531: LD_INT 3
54533: PUSH
54534: LD_INT 1
54536: PUSH
54537: EMPTY
54538: LIST
54539: LIST
54540: PUSH
54541: EMPTY
54542: LIST
54543: LIST
54544: LIST
54545: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
54546: LD_ADDR_VAR 0 43
54550: PUSH
54551: LD_INT 2
54553: PUSH
54554: LD_INT 2
54556: PUSH
54557: EMPTY
54558: LIST
54559: LIST
54560: PUSH
54561: LD_INT 3
54563: PUSH
54564: LD_INT 2
54566: PUSH
54567: EMPTY
54568: LIST
54569: LIST
54570: PUSH
54571: LD_INT 2
54573: PUSH
54574: LD_INT 3
54576: PUSH
54577: EMPTY
54578: LIST
54579: LIST
54580: PUSH
54581: EMPTY
54582: LIST
54583: LIST
54584: LIST
54585: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
54586: LD_ADDR_VAR 0 44
54590: PUSH
54591: LD_INT 0
54593: PUSH
54594: LD_INT 2
54596: PUSH
54597: EMPTY
54598: LIST
54599: LIST
54600: PUSH
54601: LD_INT 1
54603: PUSH
54604: LD_INT 3
54606: PUSH
54607: EMPTY
54608: LIST
54609: LIST
54610: PUSH
54611: LD_INT 1
54613: NEG
54614: PUSH
54615: LD_INT 2
54617: PUSH
54618: EMPTY
54619: LIST
54620: LIST
54621: PUSH
54622: EMPTY
54623: LIST
54624: LIST
54625: LIST
54626: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
54627: LD_ADDR_VAR 0 45
54631: PUSH
54632: LD_INT 2
54634: NEG
54635: PUSH
54636: LD_INT 0
54638: PUSH
54639: EMPTY
54640: LIST
54641: LIST
54642: PUSH
54643: LD_INT 2
54645: NEG
54646: PUSH
54647: LD_INT 1
54649: PUSH
54650: EMPTY
54651: LIST
54652: LIST
54653: PUSH
54654: LD_INT 3
54656: NEG
54657: PUSH
54658: LD_INT 1
54660: NEG
54661: PUSH
54662: EMPTY
54663: LIST
54664: LIST
54665: PUSH
54666: EMPTY
54667: LIST
54668: LIST
54669: LIST
54670: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
54671: LD_ADDR_VAR 0 46
54675: PUSH
54676: LD_INT 2
54678: NEG
54679: PUSH
54680: LD_INT 2
54682: NEG
54683: PUSH
54684: EMPTY
54685: LIST
54686: LIST
54687: PUSH
54688: LD_INT 2
54690: NEG
54691: PUSH
54692: LD_INT 3
54694: NEG
54695: PUSH
54696: EMPTY
54697: LIST
54698: LIST
54699: PUSH
54700: LD_INT 3
54702: NEG
54703: PUSH
54704: LD_INT 2
54706: NEG
54707: PUSH
54708: EMPTY
54709: LIST
54710: LIST
54711: PUSH
54712: EMPTY
54713: LIST
54714: LIST
54715: LIST
54716: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
54717: LD_ADDR_VAR 0 47
54721: PUSH
54722: LD_INT 2
54724: NEG
54725: PUSH
54726: LD_INT 3
54728: NEG
54729: PUSH
54730: EMPTY
54731: LIST
54732: LIST
54733: PUSH
54734: LD_INT 1
54736: NEG
54737: PUSH
54738: LD_INT 3
54740: NEG
54741: PUSH
54742: EMPTY
54743: LIST
54744: LIST
54745: PUSH
54746: EMPTY
54747: LIST
54748: LIST
54749: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
54750: LD_ADDR_VAR 0 48
54754: PUSH
54755: LD_INT 1
54757: PUSH
54758: LD_INT 2
54760: NEG
54761: PUSH
54762: EMPTY
54763: LIST
54764: LIST
54765: PUSH
54766: LD_INT 2
54768: PUSH
54769: LD_INT 1
54771: NEG
54772: PUSH
54773: EMPTY
54774: LIST
54775: LIST
54776: PUSH
54777: EMPTY
54778: LIST
54779: LIST
54780: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
54781: LD_ADDR_VAR 0 49
54785: PUSH
54786: LD_INT 3
54788: PUSH
54789: LD_INT 1
54791: PUSH
54792: EMPTY
54793: LIST
54794: LIST
54795: PUSH
54796: LD_INT 3
54798: PUSH
54799: LD_INT 2
54801: PUSH
54802: EMPTY
54803: LIST
54804: LIST
54805: PUSH
54806: EMPTY
54807: LIST
54808: LIST
54809: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
54810: LD_ADDR_VAR 0 50
54814: PUSH
54815: LD_INT 2
54817: PUSH
54818: LD_INT 3
54820: PUSH
54821: EMPTY
54822: LIST
54823: LIST
54824: PUSH
54825: LD_INT 1
54827: PUSH
54828: LD_INT 3
54830: PUSH
54831: EMPTY
54832: LIST
54833: LIST
54834: PUSH
54835: EMPTY
54836: LIST
54837: LIST
54838: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
54839: LD_ADDR_VAR 0 51
54843: PUSH
54844: LD_INT 1
54846: NEG
54847: PUSH
54848: LD_INT 2
54850: PUSH
54851: EMPTY
54852: LIST
54853: LIST
54854: PUSH
54855: LD_INT 2
54857: NEG
54858: PUSH
54859: LD_INT 1
54861: PUSH
54862: EMPTY
54863: LIST
54864: LIST
54865: PUSH
54866: EMPTY
54867: LIST
54868: LIST
54869: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
54870: LD_ADDR_VAR 0 52
54874: PUSH
54875: LD_INT 3
54877: NEG
54878: PUSH
54879: LD_INT 1
54881: NEG
54882: PUSH
54883: EMPTY
54884: LIST
54885: LIST
54886: PUSH
54887: LD_INT 3
54889: NEG
54890: PUSH
54891: LD_INT 2
54893: NEG
54894: PUSH
54895: EMPTY
54896: LIST
54897: LIST
54898: PUSH
54899: EMPTY
54900: LIST
54901: LIST
54902: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54903: LD_ADDR_VAR 0 53
54907: PUSH
54908: LD_INT 1
54910: NEG
54911: PUSH
54912: LD_INT 3
54914: NEG
54915: PUSH
54916: EMPTY
54917: LIST
54918: LIST
54919: PUSH
54920: LD_INT 0
54922: PUSH
54923: LD_INT 3
54925: NEG
54926: PUSH
54927: EMPTY
54928: LIST
54929: LIST
54930: PUSH
54931: LD_INT 1
54933: PUSH
54934: LD_INT 2
54936: NEG
54937: PUSH
54938: EMPTY
54939: LIST
54940: LIST
54941: PUSH
54942: EMPTY
54943: LIST
54944: LIST
54945: LIST
54946: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54947: LD_ADDR_VAR 0 54
54951: PUSH
54952: LD_INT 2
54954: PUSH
54955: LD_INT 1
54957: NEG
54958: PUSH
54959: EMPTY
54960: LIST
54961: LIST
54962: PUSH
54963: LD_INT 3
54965: PUSH
54966: LD_INT 0
54968: PUSH
54969: EMPTY
54970: LIST
54971: LIST
54972: PUSH
54973: LD_INT 3
54975: PUSH
54976: LD_INT 1
54978: PUSH
54979: EMPTY
54980: LIST
54981: LIST
54982: PUSH
54983: EMPTY
54984: LIST
54985: LIST
54986: LIST
54987: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54988: LD_ADDR_VAR 0 55
54992: PUSH
54993: LD_INT 3
54995: PUSH
54996: LD_INT 2
54998: PUSH
54999: EMPTY
55000: LIST
55001: LIST
55002: PUSH
55003: LD_INT 3
55005: PUSH
55006: LD_INT 3
55008: PUSH
55009: EMPTY
55010: LIST
55011: LIST
55012: PUSH
55013: LD_INT 2
55015: PUSH
55016: LD_INT 3
55018: PUSH
55019: EMPTY
55020: LIST
55021: LIST
55022: PUSH
55023: EMPTY
55024: LIST
55025: LIST
55026: LIST
55027: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55028: LD_ADDR_VAR 0 56
55032: PUSH
55033: LD_INT 1
55035: PUSH
55036: LD_INT 3
55038: PUSH
55039: EMPTY
55040: LIST
55041: LIST
55042: PUSH
55043: LD_INT 0
55045: PUSH
55046: LD_INT 3
55048: PUSH
55049: EMPTY
55050: LIST
55051: LIST
55052: PUSH
55053: LD_INT 1
55055: NEG
55056: PUSH
55057: LD_INT 2
55059: PUSH
55060: EMPTY
55061: LIST
55062: LIST
55063: PUSH
55064: EMPTY
55065: LIST
55066: LIST
55067: LIST
55068: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55069: LD_ADDR_VAR 0 57
55073: PUSH
55074: LD_INT 2
55076: NEG
55077: PUSH
55078: LD_INT 1
55080: PUSH
55081: EMPTY
55082: LIST
55083: LIST
55084: PUSH
55085: LD_INT 3
55087: NEG
55088: PUSH
55089: LD_INT 0
55091: PUSH
55092: EMPTY
55093: LIST
55094: LIST
55095: PUSH
55096: LD_INT 3
55098: NEG
55099: PUSH
55100: LD_INT 1
55102: NEG
55103: PUSH
55104: EMPTY
55105: LIST
55106: LIST
55107: PUSH
55108: EMPTY
55109: LIST
55110: LIST
55111: LIST
55112: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55113: LD_ADDR_VAR 0 58
55117: PUSH
55118: LD_INT 2
55120: NEG
55121: PUSH
55122: LD_INT 3
55124: NEG
55125: PUSH
55126: EMPTY
55127: LIST
55128: LIST
55129: PUSH
55130: LD_INT 3
55132: NEG
55133: PUSH
55134: LD_INT 2
55136: NEG
55137: PUSH
55138: EMPTY
55139: LIST
55140: LIST
55141: PUSH
55142: LD_INT 3
55144: NEG
55145: PUSH
55146: LD_INT 3
55148: NEG
55149: PUSH
55150: EMPTY
55151: LIST
55152: LIST
55153: PUSH
55154: EMPTY
55155: LIST
55156: LIST
55157: LIST
55158: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
55159: LD_ADDR_VAR 0 59
55163: PUSH
55164: LD_INT 1
55166: NEG
55167: PUSH
55168: LD_INT 2
55170: NEG
55171: PUSH
55172: EMPTY
55173: LIST
55174: LIST
55175: PUSH
55176: LD_INT 0
55178: PUSH
55179: LD_INT 2
55181: NEG
55182: PUSH
55183: EMPTY
55184: LIST
55185: LIST
55186: PUSH
55187: LD_INT 1
55189: PUSH
55190: LD_INT 1
55192: NEG
55193: PUSH
55194: EMPTY
55195: LIST
55196: LIST
55197: PUSH
55198: EMPTY
55199: LIST
55200: LIST
55201: LIST
55202: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
55203: LD_ADDR_VAR 0 60
55207: PUSH
55208: LD_INT 1
55210: PUSH
55211: LD_INT 1
55213: NEG
55214: PUSH
55215: EMPTY
55216: LIST
55217: LIST
55218: PUSH
55219: LD_INT 2
55221: PUSH
55222: LD_INT 0
55224: PUSH
55225: EMPTY
55226: LIST
55227: LIST
55228: PUSH
55229: LD_INT 2
55231: PUSH
55232: LD_INT 1
55234: PUSH
55235: EMPTY
55236: LIST
55237: LIST
55238: PUSH
55239: EMPTY
55240: LIST
55241: LIST
55242: LIST
55243: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
55244: LD_ADDR_VAR 0 61
55248: PUSH
55249: LD_INT 2
55251: PUSH
55252: LD_INT 1
55254: PUSH
55255: EMPTY
55256: LIST
55257: LIST
55258: PUSH
55259: LD_INT 2
55261: PUSH
55262: LD_INT 2
55264: PUSH
55265: EMPTY
55266: LIST
55267: LIST
55268: PUSH
55269: LD_INT 1
55271: PUSH
55272: LD_INT 2
55274: PUSH
55275: EMPTY
55276: LIST
55277: LIST
55278: PUSH
55279: EMPTY
55280: LIST
55281: LIST
55282: LIST
55283: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
55284: LD_ADDR_VAR 0 62
55288: PUSH
55289: LD_INT 1
55291: PUSH
55292: LD_INT 2
55294: PUSH
55295: EMPTY
55296: LIST
55297: LIST
55298: PUSH
55299: LD_INT 0
55301: PUSH
55302: LD_INT 2
55304: PUSH
55305: EMPTY
55306: LIST
55307: LIST
55308: PUSH
55309: LD_INT 1
55311: NEG
55312: PUSH
55313: LD_INT 1
55315: PUSH
55316: EMPTY
55317: LIST
55318: LIST
55319: PUSH
55320: EMPTY
55321: LIST
55322: LIST
55323: LIST
55324: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
55325: LD_ADDR_VAR 0 63
55329: PUSH
55330: LD_INT 1
55332: NEG
55333: PUSH
55334: LD_INT 1
55336: PUSH
55337: EMPTY
55338: LIST
55339: LIST
55340: PUSH
55341: LD_INT 2
55343: NEG
55344: PUSH
55345: LD_INT 0
55347: PUSH
55348: EMPTY
55349: LIST
55350: LIST
55351: PUSH
55352: LD_INT 2
55354: NEG
55355: PUSH
55356: LD_INT 1
55358: NEG
55359: PUSH
55360: EMPTY
55361: LIST
55362: LIST
55363: PUSH
55364: EMPTY
55365: LIST
55366: LIST
55367: LIST
55368: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55369: LD_ADDR_VAR 0 64
55373: PUSH
55374: LD_INT 1
55376: NEG
55377: PUSH
55378: LD_INT 2
55380: NEG
55381: PUSH
55382: EMPTY
55383: LIST
55384: LIST
55385: PUSH
55386: LD_INT 2
55388: NEG
55389: PUSH
55390: LD_INT 1
55392: NEG
55393: PUSH
55394: EMPTY
55395: LIST
55396: LIST
55397: PUSH
55398: LD_INT 2
55400: NEG
55401: PUSH
55402: LD_INT 2
55404: NEG
55405: PUSH
55406: EMPTY
55407: LIST
55408: LIST
55409: PUSH
55410: EMPTY
55411: LIST
55412: LIST
55413: LIST
55414: ST_TO_ADDR
// end ; 2 :
55415: GO 58681
55417: LD_INT 2
55419: DOUBLE
55420: EQUAL
55421: IFTRUE 55425
55423: GO 58680
55425: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
55426: LD_ADDR_VAR 0 29
55430: PUSH
55431: LD_INT 4
55433: PUSH
55434: LD_INT 0
55436: PUSH
55437: EMPTY
55438: LIST
55439: LIST
55440: PUSH
55441: LD_INT 4
55443: PUSH
55444: LD_INT 1
55446: NEG
55447: PUSH
55448: EMPTY
55449: LIST
55450: LIST
55451: PUSH
55452: LD_INT 5
55454: PUSH
55455: LD_INT 0
55457: PUSH
55458: EMPTY
55459: LIST
55460: LIST
55461: PUSH
55462: LD_INT 5
55464: PUSH
55465: LD_INT 1
55467: PUSH
55468: EMPTY
55469: LIST
55470: LIST
55471: PUSH
55472: LD_INT 4
55474: PUSH
55475: LD_INT 1
55477: PUSH
55478: EMPTY
55479: LIST
55480: LIST
55481: PUSH
55482: LD_INT 3
55484: PUSH
55485: LD_INT 0
55487: PUSH
55488: EMPTY
55489: LIST
55490: LIST
55491: PUSH
55492: LD_INT 3
55494: PUSH
55495: LD_INT 1
55497: NEG
55498: PUSH
55499: EMPTY
55500: LIST
55501: LIST
55502: PUSH
55503: LD_INT 3
55505: PUSH
55506: LD_INT 2
55508: NEG
55509: PUSH
55510: EMPTY
55511: LIST
55512: LIST
55513: PUSH
55514: LD_INT 5
55516: PUSH
55517: LD_INT 2
55519: PUSH
55520: EMPTY
55521: LIST
55522: LIST
55523: PUSH
55524: LD_INT 3
55526: PUSH
55527: LD_INT 3
55529: PUSH
55530: EMPTY
55531: LIST
55532: LIST
55533: PUSH
55534: LD_INT 3
55536: PUSH
55537: LD_INT 2
55539: PUSH
55540: EMPTY
55541: LIST
55542: LIST
55543: PUSH
55544: LD_INT 4
55546: PUSH
55547: LD_INT 3
55549: PUSH
55550: EMPTY
55551: LIST
55552: LIST
55553: PUSH
55554: LD_INT 4
55556: PUSH
55557: LD_INT 4
55559: PUSH
55560: EMPTY
55561: LIST
55562: LIST
55563: PUSH
55564: LD_INT 3
55566: PUSH
55567: LD_INT 4
55569: PUSH
55570: EMPTY
55571: LIST
55572: LIST
55573: PUSH
55574: LD_INT 2
55576: PUSH
55577: LD_INT 3
55579: PUSH
55580: EMPTY
55581: LIST
55582: LIST
55583: PUSH
55584: LD_INT 2
55586: PUSH
55587: LD_INT 2
55589: PUSH
55590: EMPTY
55591: LIST
55592: LIST
55593: PUSH
55594: LD_INT 4
55596: PUSH
55597: LD_INT 2
55599: PUSH
55600: EMPTY
55601: LIST
55602: LIST
55603: PUSH
55604: LD_INT 2
55606: PUSH
55607: LD_INT 4
55609: PUSH
55610: EMPTY
55611: LIST
55612: LIST
55613: PUSH
55614: LD_INT 0
55616: PUSH
55617: LD_INT 4
55619: PUSH
55620: EMPTY
55621: LIST
55622: LIST
55623: PUSH
55624: LD_INT 0
55626: PUSH
55627: LD_INT 3
55629: PUSH
55630: EMPTY
55631: LIST
55632: LIST
55633: PUSH
55634: LD_INT 1
55636: PUSH
55637: LD_INT 4
55639: PUSH
55640: EMPTY
55641: LIST
55642: LIST
55643: PUSH
55644: LD_INT 1
55646: PUSH
55647: LD_INT 5
55649: PUSH
55650: EMPTY
55651: LIST
55652: LIST
55653: PUSH
55654: LD_INT 0
55656: PUSH
55657: LD_INT 5
55659: PUSH
55660: EMPTY
55661: LIST
55662: LIST
55663: PUSH
55664: LD_INT 1
55666: NEG
55667: PUSH
55668: LD_INT 4
55670: PUSH
55671: EMPTY
55672: LIST
55673: LIST
55674: PUSH
55675: LD_INT 1
55677: NEG
55678: PUSH
55679: LD_INT 3
55681: PUSH
55682: EMPTY
55683: LIST
55684: LIST
55685: PUSH
55686: LD_INT 2
55688: PUSH
55689: LD_INT 5
55691: PUSH
55692: EMPTY
55693: LIST
55694: LIST
55695: PUSH
55696: LD_INT 2
55698: NEG
55699: PUSH
55700: LD_INT 3
55702: PUSH
55703: EMPTY
55704: LIST
55705: LIST
55706: PUSH
55707: LD_INT 3
55709: NEG
55710: PUSH
55711: LD_INT 0
55713: PUSH
55714: EMPTY
55715: LIST
55716: LIST
55717: PUSH
55718: LD_INT 3
55720: NEG
55721: PUSH
55722: LD_INT 1
55724: NEG
55725: PUSH
55726: EMPTY
55727: LIST
55728: LIST
55729: PUSH
55730: LD_INT 2
55732: NEG
55733: PUSH
55734: LD_INT 0
55736: PUSH
55737: EMPTY
55738: LIST
55739: LIST
55740: PUSH
55741: LD_INT 2
55743: NEG
55744: PUSH
55745: LD_INT 1
55747: PUSH
55748: EMPTY
55749: LIST
55750: LIST
55751: PUSH
55752: LD_INT 3
55754: NEG
55755: PUSH
55756: LD_INT 1
55758: PUSH
55759: EMPTY
55760: LIST
55761: LIST
55762: PUSH
55763: LD_INT 4
55765: NEG
55766: PUSH
55767: LD_INT 0
55769: PUSH
55770: EMPTY
55771: LIST
55772: LIST
55773: PUSH
55774: LD_INT 4
55776: NEG
55777: PUSH
55778: LD_INT 1
55780: NEG
55781: PUSH
55782: EMPTY
55783: LIST
55784: LIST
55785: PUSH
55786: LD_INT 4
55788: NEG
55789: PUSH
55790: LD_INT 2
55792: NEG
55793: PUSH
55794: EMPTY
55795: LIST
55796: LIST
55797: PUSH
55798: LD_INT 2
55800: NEG
55801: PUSH
55802: LD_INT 2
55804: PUSH
55805: EMPTY
55806: LIST
55807: LIST
55808: PUSH
55809: LD_INT 4
55811: NEG
55812: PUSH
55813: LD_INT 4
55815: NEG
55816: PUSH
55817: EMPTY
55818: LIST
55819: LIST
55820: PUSH
55821: LD_INT 4
55823: NEG
55824: PUSH
55825: LD_INT 5
55827: NEG
55828: PUSH
55829: EMPTY
55830: LIST
55831: LIST
55832: PUSH
55833: LD_INT 3
55835: NEG
55836: PUSH
55837: LD_INT 4
55839: NEG
55840: PUSH
55841: EMPTY
55842: LIST
55843: LIST
55844: PUSH
55845: LD_INT 3
55847: NEG
55848: PUSH
55849: LD_INT 3
55851: NEG
55852: PUSH
55853: EMPTY
55854: LIST
55855: LIST
55856: PUSH
55857: LD_INT 4
55859: NEG
55860: PUSH
55861: LD_INT 3
55863: NEG
55864: PUSH
55865: EMPTY
55866: LIST
55867: LIST
55868: PUSH
55869: LD_INT 5
55871: NEG
55872: PUSH
55873: LD_INT 4
55875: NEG
55876: PUSH
55877: EMPTY
55878: LIST
55879: LIST
55880: PUSH
55881: LD_INT 5
55883: NEG
55884: PUSH
55885: LD_INT 5
55887: NEG
55888: PUSH
55889: EMPTY
55890: LIST
55891: LIST
55892: PUSH
55893: LD_INT 3
55895: NEG
55896: PUSH
55897: LD_INT 5
55899: NEG
55900: PUSH
55901: EMPTY
55902: LIST
55903: LIST
55904: PUSH
55905: LD_INT 5
55907: NEG
55908: PUSH
55909: LD_INT 3
55911: NEG
55912: PUSH
55913: EMPTY
55914: LIST
55915: LIST
55916: PUSH
55917: EMPTY
55918: LIST
55919: LIST
55920: LIST
55921: LIST
55922: LIST
55923: LIST
55924: LIST
55925: LIST
55926: LIST
55927: LIST
55928: LIST
55929: LIST
55930: LIST
55931: LIST
55932: LIST
55933: LIST
55934: LIST
55935: LIST
55936: LIST
55937: LIST
55938: LIST
55939: LIST
55940: LIST
55941: LIST
55942: LIST
55943: LIST
55944: LIST
55945: LIST
55946: LIST
55947: LIST
55948: LIST
55949: LIST
55950: LIST
55951: LIST
55952: LIST
55953: LIST
55954: LIST
55955: LIST
55956: LIST
55957: LIST
55958: LIST
55959: LIST
55960: LIST
55961: LIST
55962: LIST
55963: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
55964: LD_ADDR_VAR 0 30
55968: PUSH
55969: LD_INT 4
55971: PUSH
55972: LD_INT 4
55974: PUSH
55975: EMPTY
55976: LIST
55977: LIST
55978: PUSH
55979: LD_INT 4
55981: PUSH
55982: LD_INT 3
55984: PUSH
55985: EMPTY
55986: LIST
55987: LIST
55988: PUSH
55989: LD_INT 5
55991: PUSH
55992: LD_INT 4
55994: PUSH
55995: EMPTY
55996: LIST
55997: LIST
55998: PUSH
55999: LD_INT 5
56001: PUSH
56002: LD_INT 5
56004: PUSH
56005: EMPTY
56006: LIST
56007: LIST
56008: PUSH
56009: LD_INT 4
56011: PUSH
56012: LD_INT 5
56014: PUSH
56015: EMPTY
56016: LIST
56017: LIST
56018: PUSH
56019: LD_INT 3
56021: PUSH
56022: LD_INT 4
56024: PUSH
56025: EMPTY
56026: LIST
56027: LIST
56028: PUSH
56029: LD_INT 3
56031: PUSH
56032: LD_INT 3
56034: PUSH
56035: EMPTY
56036: LIST
56037: LIST
56038: PUSH
56039: LD_INT 5
56041: PUSH
56042: LD_INT 3
56044: PUSH
56045: EMPTY
56046: LIST
56047: LIST
56048: PUSH
56049: LD_INT 3
56051: PUSH
56052: LD_INT 5
56054: PUSH
56055: EMPTY
56056: LIST
56057: LIST
56058: PUSH
56059: LD_INT 0
56061: PUSH
56062: LD_INT 3
56064: PUSH
56065: EMPTY
56066: LIST
56067: LIST
56068: PUSH
56069: LD_INT 0
56071: PUSH
56072: LD_INT 2
56074: PUSH
56075: EMPTY
56076: LIST
56077: LIST
56078: PUSH
56079: LD_INT 1
56081: PUSH
56082: LD_INT 3
56084: PUSH
56085: EMPTY
56086: LIST
56087: LIST
56088: PUSH
56089: LD_INT 1
56091: PUSH
56092: LD_INT 4
56094: PUSH
56095: EMPTY
56096: LIST
56097: LIST
56098: PUSH
56099: LD_INT 0
56101: PUSH
56102: LD_INT 4
56104: PUSH
56105: EMPTY
56106: LIST
56107: LIST
56108: PUSH
56109: LD_INT 1
56111: NEG
56112: PUSH
56113: LD_INT 3
56115: PUSH
56116: EMPTY
56117: LIST
56118: LIST
56119: PUSH
56120: LD_INT 1
56122: NEG
56123: PUSH
56124: LD_INT 2
56126: PUSH
56127: EMPTY
56128: LIST
56129: LIST
56130: PUSH
56131: LD_INT 2
56133: PUSH
56134: LD_INT 4
56136: PUSH
56137: EMPTY
56138: LIST
56139: LIST
56140: PUSH
56141: LD_INT 2
56143: NEG
56144: PUSH
56145: LD_INT 2
56147: PUSH
56148: EMPTY
56149: LIST
56150: LIST
56151: PUSH
56152: LD_INT 4
56154: NEG
56155: PUSH
56156: LD_INT 0
56158: PUSH
56159: EMPTY
56160: LIST
56161: LIST
56162: PUSH
56163: LD_INT 4
56165: NEG
56166: PUSH
56167: LD_INT 1
56169: NEG
56170: PUSH
56171: EMPTY
56172: LIST
56173: LIST
56174: PUSH
56175: LD_INT 3
56177: NEG
56178: PUSH
56179: LD_INT 0
56181: PUSH
56182: EMPTY
56183: LIST
56184: LIST
56185: PUSH
56186: LD_INT 3
56188: NEG
56189: PUSH
56190: LD_INT 1
56192: PUSH
56193: EMPTY
56194: LIST
56195: LIST
56196: PUSH
56197: LD_INT 4
56199: NEG
56200: PUSH
56201: LD_INT 1
56203: PUSH
56204: EMPTY
56205: LIST
56206: LIST
56207: PUSH
56208: LD_INT 5
56210: NEG
56211: PUSH
56212: LD_INT 0
56214: PUSH
56215: EMPTY
56216: LIST
56217: LIST
56218: PUSH
56219: LD_INT 5
56221: NEG
56222: PUSH
56223: LD_INT 1
56225: NEG
56226: PUSH
56227: EMPTY
56228: LIST
56229: LIST
56230: PUSH
56231: LD_INT 5
56233: NEG
56234: PUSH
56235: LD_INT 2
56237: NEG
56238: PUSH
56239: EMPTY
56240: LIST
56241: LIST
56242: PUSH
56243: LD_INT 3
56245: NEG
56246: PUSH
56247: LD_INT 2
56249: PUSH
56250: EMPTY
56251: LIST
56252: LIST
56253: PUSH
56254: LD_INT 3
56256: NEG
56257: PUSH
56258: LD_INT 3
56260: NEG
56261: PUSH
56262: EMPTY
56263: LIST
56264: LIST
56265: PUSH
56266: LD_INT 3
56268: NEG
56269: PUSH
56270: LD_INT 4
56272: NEG
56273: PUSH
56274: EMPTY
56275: LIST
56276: LIST
56277: PUSH
56278: LD_INT 2
56280: NEG
56281: PUSH
56282: LD_INT 3
56284: NEG
56285: PUSH
56286: EMPTY
56287: LIST
56288: LIST
56289: PUSH
56290: LD_INT 2
56292: NEG
56293: PUSH
56294: LD_INT 2
56296: NEG
56297: PUSH
56298: EMPTY
56299: LIST
56300: LIST
56301: PUSH
56302: LD_INT 3
56304: NEG
56305: PUSH
56306: LD_INT 2
56308: NEG
56309: PUSH
56310: EMPTY
56311: LIST
56312: LIST
56313: PUSH
56314: LD_INT 4
56316: NEG
56317: PUSH
56318: LD_INT 3
56320: NEG
56321: PUSH
56322: EMPTY
56323: LIST
56324: LIST
56325: PUSH
56326: LD_INT 4
56328: NEG
56329: PUSH
56330: LD_INT 4
56332: NEG
56333: PUSH
56334: EMPTY
56335: LIST
56336: LIST
56337: PUSH
56338: LD_INT 2
56340: NEG
56341: PUSH
56342: LD_INT 4
56344: NEG
56345: PUSH
56346: EMPTY
56347: LIST
56348: LIST
56349: PUSH
56350: LD_INT 4
56352: NEG
56353: PUSH
56354: LD_INT 2
56356: NEG
56357: PUSH
56358: EMPTY
56359: LIST
56360: LIST
56361: PUSH
56362: LD_INT 0
56364: PUSH
56365: LD_INT 4
56367: NEG
56368: PUSH
56369: EMPTY
56370: LIST
56371: LIST
56372: PUSH
56373: LD_INT 0
56375: PUSH
56376: LD_INT 5
56378: NEG
56379: PUSH
56380: EMPTY
56381: LIST
56382: LIST
56383: PUSH
56384: LD_INT 1
56386: PUSH
56387: LD_INT 4
56389: NEG
56390: PUSH
56391: EMPTY
56392: LIST
56393: LIST
56394: PUSH
56395: LD_INT 1
56397: PUSH
56398: LD_INT 3
56400: NEG
56401: PUSH
56402: EMPTY
56403: LIST
56404: LIST
56405: PUSH
56406: LD_INT 0
56408: PUSH
56409: LD_INT 3
56411: NEG
56412: PUSH
56413: EMPTY
56414: LIST
56415: LIST
56416: PUSH
56417: LD_INT 1
56419: NEG
56420: PUSH
56421: LD_INT 4
56423: NEG
56424: PUSH
56425: EMPTY
56426: LIST
56427: LIST
56428: PUSH
56429: LD_INT 1
56431: NEG
56432: PUSH
56433: LD_INT 5
56435: NEG
56436: PUSH
56437: EMPTY
56438: LIST
56439: LIST
56440: PUSH
56441: LD_INT 2
56443: PUSH
56444: LD_INT 3
56446: NEG
56447: PUSH
56448: EMPTY
56449: LIST
56450: LIST
56451: PUSH
56452: LD_INT 2
56454: NEG
56455: PUSH
56456: LD_INT 5
56458: NEG
56459: PUSH
56460: EMPTY
56461: LIST
56462: LIST
56463: PUSH
56464: EMPTY
56465: LIST
56466: LIST
56467: LIST
56468: LIST
56469: LIST
56470: LIST
56471: LIST
56472: LIST
56473: LIST
56474: LIST
56475: LIST
56476: LIST
56477: LIST
56478: LIST
56479: LIST
56480: LIST
56481: LIST
56482: LIST
56483: LIST
56484: LIST
56485: LIST
56486: LIST
56487: LIST
56488: LIST
56489: LIST
56490: LIST
56491: LIST
56492: LIST
56493: LIST
56494: LIST
56495: LIST
56496: LIST
56497: LIST
56498: LIST
56499: LIST
56500: LIST
56501: LIST
56502: LIST
56503: LIST
56504: LIST
56505: LIST
56506: LIST
56507: LIST
56508: LIST
56509: LIST
56510: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
56511: LD_ADDR_VAR 0 31
56515: PUSH
56516: LD_INT 0
56518: PUSH
56519: LD_INT 4
56521: PUSH
56522: EMPTY
56523: LIST
56524: LIST
56525: PUSH
56526: LD_INT 0
56528: PUSH
56529: LD_INT 3
56531: PUSH
56532: EMPTY
56533: LIST
56534: LIST
56535: PUSH
56536: LD_INT 1
56538: PUSH
56539: LD_INT 4
56541: PUSH
56542: EMPTY
56543: LIST
56544: LIST
56545: PUSH
56546: LD_INT 1
56548: PUSH
56549: LD_INT 5
56551: PUSH
56552: EMPTY
56553: LIST
56554: LIST
56555: PUSH
56556: LD_INT 0
56558: PUSH
56559: LD_INT 5
56561: PUSH
56562: EMPTY
56563: LIST
56564: LIST
56565: PUSH
56566: LD_INT 1
56568: NEG
56569: PUSH
56570: LD_INT 4
56572: PUSH
56573: EMPTY
56574: LIST
56575: LIST
56576: PUSH
56577: LD_INT 1
56579: NEG
56580: PUSH
56581: LD_INT 3
56583: PUSH
56584: EMPTY
56585: LIST
56586: LIST
56587: PUSH
56588: LD_INT 2
56590: PUSH
56591: LD_INT 5
56593: PUSH
56594: EMPTY
56595: LIST
56596: LIST
56597: PUSH
56598: LD_INT 2
56600: NEG
56601: PUSH
56602: LD_INT 3
56604: PUSH
56605: EMPTY
56606: LIST
56607: LIST
56608: PUSH
56609: LD_INT 3
56611: NEG
56612: PUSH
56613: LD_INT 0
56615: PUSH
56616: EMPTY
56617: LIST
56618: LIST
56619: PUSH
56620: LD_INT 3
56622: NEG
56623: PUSH
56624: LD_INT 1
56626: NEG
56627: PUSH
56628: EMPTY
56629: LIST
56630: LIST
56631: PUSH
56632: LD_INT 2
56634: NEG
56635: PUSH
56636: LD_INT 0
56638: PUSH
56639: EMPTY
56640: LIST
56641: LIST
56642: PUSH
56643: LD_INT 2
56645: NEG
56646: PUSH
56647: LD_INT 1
56649: PUSH
56650: EMPTY
56651: LIST
56652: LIST
56653: PUSH
56654: LD_INT 3
56656: NEG
56657: PUSH
56658: LD_INT 1
56660: PUSH
56661: EMPTY
56662: LIST
56663: LIST
56664: PUSH
56665: LD_INT 4
56667: NEG
56668: PUSH
56669: LD_INT 0
56671: PUSH
56672: EMPTY
56673: LIST
56674: LIST
56675: PUSH
56676: LD_INT 4
56678: NEG
56679: PUSH
56680: LD_INT 1
56682: NEG
56683: PUSH
56684: EMPTY
56685: LIST
56686: LIST
56687: PUSH
56688: LD_INT 4
56690: NEG
56691: PUSH
56692: LD_INT 2
56694: NEG
56695: PUSH
56696: EMPTY
56697: LIST
56698: LIST
56699: PUSH
56700: LD_INT 2
56702: NEG
56703: PUSH
56704: LD_INT 2
56706: PUSH
56707: EMPTY
56708: LIST
56709: LIST
56710: PUSH
56711: LD_INT 4
56713: NEG
56714: PUSH
56715: LD_INT 4
56717: NEG
56718: PUSH
56719: EMPTY
56720: LIST
56721: LIST
56722: PUSH
56723: LD_INT 4
56725: NEG
56726: PUSH
56727: LD_INT 5
56729: NEG
56730: PUSH
56731: EMPTY
56732: LIST
56733: LIST
56734: PUSH
56735: LD_INT 3
56737: NEG
56738: PUSH
56739: LD_INT 4
56741: NEG
56742: PUSH
56743: EMPTY
56744: LIST
56745: LIST
56746: PUSH
56747: LD_INT 3
56749: NEG
56750: PUSH
56751: LD_INT 3
56753: NEG
56754: PUSH
56755: EMPTY
56756: LIST
56757: LIST
56758: PUSH
56759: LD_INT 4
56761: NEG
56762: PUSH
56763: LD_INT 3
56765: NEG
56766: PUSH
56767: EMPTY
56768: LIST
56769: LIST
56770: PUSH
56771: LD_INT 5
56773: NEG
56774: PUSH
56775: LD_INT 4
56777: NEG
56778: PUSH
56779: EMPTY
56780: LIST
56781: LIST
56782: PUSH
56783: LD_INT 5
56785: NEG
56786: PUSH
56787: LD_INT 5
56789: NEG
56790: PUSH
56791: EMPTY
56792: LIST
56793: LIST
56794: PUSH
56795: LD_INT 3
56797: NEG
56798: PUSH
56799: LD_INT 5
56801: NEG
56802: PUSH
56803: EMPTY
56804: LIST
56805: LIST
56806: PUSH
56807: LD_INT 5
56809: NEG
56810: PUSH
56811: LD_INT 3
56813: NEG
56814: PUSH
56815: EMPTY
56816: LIST
56817: LIST
56818: PUSH
56819: LD_INT 0
56821: PUSH
56822: LD_INT 3
56824: NEG
56825: PUSH
56826: EMPTY
56827: LIST
56828: LIST
56829: PUSH
56830: LD_INT 0
56832: PUSH
56833: LD_INT 4
56835: NEG
56836: PUSH
56837: EMPTY
56838: LIST
56839: LIST
56840: PUSH
56841: LD_INT 1
56843: PUSH
56844: LD_INT 3
56846: NEG
56847: PUSH
56848: EMPTY
56849: LIST
56850: LIST
56851: PUSH
56852: LD_INT 1
56854: PUSH
56855: LD_INT 2
56857: NEG
56858: PUSH
56859: EMPTY
56860: LIST
56861: LIST
56862: PUSH
56863: LD_INT 0
56865: PUSH
56866: LD_INT 2
56868: NEG
56869: PUSH
56870: EMPTY
56871: LIST
56872: LIST
56873: PUSH
56874: LD_INT 1
56876: NEG
56877: PUSH
56878: LD_INT 3
56880: NEG
56881: PUSH
56882: EMPTY
56883: LIST
56884: LIST
56885: PUSH
56886: LD_INT 1
56888: NEG
56889: PUSH
56890: LD_INT 4
56892: NEG
56893: PUSH
56894: EMPTY
56895: LIST
56896: LIST
56897: PUSH
56898: LD_INT 2
56900: PUSH
56901: LD_INT 2
56903: NEG
56904: PUSH
56905: EMPTY
56906: LIST
56907: LIST
56908: PUSH
56909: LD_INT 2
56911: NEG
56912: PUSH
56913: LD_INT 4
56915: NEG
56916: PUSH
56917: EMPTY
56918: LIST
56919: LIST
56920: PUSH
56921: LD_INT 4
56923: PUSH
56924: LD_INT 0
56926: PUSH
56927: EMPTY
56928: LIST
56929: LIST
56930: PUSH
56931: LD_INT 4
56933: PUSH
56934: LD_INT 1
56936: NEG
56937: PUSH
56938: EMPTY
56939: LIST
56940: LIST
56941: PUSH
56942: LD_INT 5
56944: PUSH
56945: LD_INT 0
56947: PUSH
56948: EMPTY
56949: LIST
56950: LIST
56951: PUSH
56952: LD_INT 5
56954: PUSH
56955: LD_INT 1
56957: PUSH
56958: EMPTY
56959: LIST
56960: LIST
56961: PUSH
56962: LD_INT 4
56964: PUSH
56965: LD_INT 1
56967: PUSH
56968: EMPTY
56969: LIST
56970: LIST
56971: PUSH
56972: LD_INT 3
56974: PUSH
56975: LD_INT 0
56977: PUSH
56978: EMPTY
56979: LIST
56980: LIST
56981: PUSH
56982: LD_INT 3
56984: PUSH
56985: LD_INT 1
56987: NEG
56988: PUSH
56989: EMPTY
56990: LIST
56991: LIST
56992: PUSH
56993: LD_INT 3
56995: PUSH
56996: LD_INT 2
56998: NEG
56999: PUSH
57000: EMPTY
57001: LIST
57002: LIST
57003: PUSH
57004: LD_INT 5
57006: PUSH
57007: LD_INT 2
57009: PUSH
57010: EMPTY
57011: LIST
57012: LIST
57013: PUSH
57014: EMPTY
57015: LIST
57016: LIST
57017: LIST
57018: LIST
57019: LIST
57020: LIST
57021: LIST
57022: LIST
57023: LIST
57024: LIST
57025: LIST
57026: LIST
57027: LIST
57028: LIST
57029: LIST
57030: LIST
57031: LIST
57032: LIST
57033: LIST
57034: LIST
57035: LIST
57036: LIST
57037: LIST
57038: LIST
57039: LIST
57040: LIST
57041: LIST
57042: LIST
57043: LIST
57044: LIST
57045: LIST
57046: LIST
57047: LIST
57048: LIST
57049: LIST
57050: LIST
57051: LIST
57052: LIST
57053: LIST
57054: LIST
57055: LIST
57056: LIST
57057: LIST
57058: LIST
57059: LIST
57060: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
57061: LD_ADDR_VAR 0 32
57065: PUSH
57066: LD_INT 4
57068: NEG
57069: PUSH
57070: LD_INT 0
57072: PUSH
57073: EMPTY
57074: LIST
57075: LIST
57076: PUSH
57077: LD_INT 4
57079: NEG
57080: PUSH
57081: LD_INT 1
57083: NEG
57084: PUSH
57085: EMPTY
57086: LIST
57087: LIST
57088: PUSH
57089: LD_INT 3
57091: NEG
57092: PUSH
57093: LD_INT 0
57095: PUSH
57096: EMPTY
57097: LIST
57098: LIST
57099: PUSH
57100: LD_INT 3
57102: NEG
57103: PUSH
57104: LD_INT 1
57106: PUSH
57107: EMPTY
57108: LIST
57109: LIST
57110: PUSH
57111: LD_INT 4
57113: NEG
57114: PUSH
57115: LD_INT 1
57117: PUSH
57118: EMPTY
57119: LIST
57120: LIST
57121: PUSH
57122: LD_INT 5
57124: NEG
57125: PUSH
57126: LD_INT 0
57128: PUSH
57129: EMPTY
57130: LIST
57131: LIST
57132: PUSH
57133: LD_INT 5
57135: NEG
57136: PUSH
57137: LD_INT 1
57139: NEG
57140: PUSH
57141: EMPTY
57142: LIST
57143: LIST
57144: PUSH
57145: LD_INT 5
57147: NEG
57148: PUSH
57149: LD_INT 2
57151: NEG
57152: PUSH
57153: EMPTY
57154: LIST
57155: LIST
57156: PUSH
57157: LD_INT 3
57159: NEG
57160: PUSH
57161: LD_INT 2
57163: PUSH
57164: EMPTY
57165: LIST
57166: LIST
57167: PUSH
57168: LD_INT 3
57170: NEG
57171: PUSH
57172: LD_INT 3
57174: NEG
57175: PUSH
57176: EMPTY
57177: LIST
57178: LIST
57179: PUSH
57180: LD_INT 3
57182: NEG
57183: PUSH
57184: LD_INT 4
57186: NEG
57187: PUSH
57188: EMPTY
57189: LIST
57190: LIST
57191: PUSH
57192: LD_INT 2
57194: NEG
57195: PUSH
57196: LD_INT 3
57198: NEG
57199: PUSH
57200: EMPTY
57201: LIST
57202: LIST
57203: PUSH
57204: LD_INT 2
57206: NEG
57207: PUSH
57208: LD_INT 2
57210: NEG
57211: PUSH
57212: EMPTY
57213: LIST
57214: LIST
57215: PUSH
57216: LD_INT 3
57218: NEG
57219: PUSH
57220: LD_INT 2
57222: NEG
57223: PUSH
57224: EMPTY
57225: LIST
57226: LIST
57227: PUSH
57228: LD_INT 4
57230: NEG
57231: PUSH
57232: LD_INT 3
57234: NEG
57235: PUSH
57236: EMPTY
57237: LIST
57238: LIST
57239: PUSH
57240: LD_INT 4
57242: NEG
57243: PUSH
57244: LD_INT 4
57246: NEG
57247: PUSH
57248: EMPTY
57249: LIST
57250: LIST
57251: PUSH
57252: LD_INT 2
57254: NEG
57255: PUSH
57256: LD_INT 4
57258: NEG
57259: PUSH
57260: EMPTY
57261: LIST
57262: LIST
57263: PUSH
57264: LD_INT 4
57266: NEG
57267: PUSH
57268: LD_INT 2
57270: NEG
57271: PUSH
57272: EMPTY
57273: LIST
57274: LIST
57275: PUSH
57276: LD_INT 0
57278: PUSH
57279: LD_INT 4
57281: NEG
57282: PUSH
57283: EMPTY
57284: LIST
57285: LIST
57286: PUSH
57287: LD_INT 0
57289: PUSH
57290: LD_INT 5
57292: NEG
57293: PUSH
57294: EMPTY
57295: LIST
57296: LIST
57297: PUSH
57298: LD_INT 1
57300: PUSH
57301: LD_INT 4
57303: NEG
57304: PUSH
57305: EMPTY
57306: LIST
57307: LIST
57308: PUSH
57309: LD_INT 1
57311: PUSH
57312: LD_INT 3
57314: NEG
57315: PUSH
57316: EMPTY
57317: LIST
57318: LIST
57319: PUSH
57320: LD_INT 0
57322: PUSH
57323: LD_INT 3
57325: NEG
57326: PUSH
57327: EMPTY
57328: LIST
57329: LIST
57330: PUSH
57331: LD_INT 1
57333: NEG
57334: PUSH
57335: LD_INT 4
57337: NEG
57338: PUSH
57339: EMPTY
57340: LIST
57341: LIST
57342: PUSH
57343: LD_INT 1
57345: NEG
57346: PUSH
57347: LD_INT 5
57349: NEG
57350: PUSH
57351: EMPTY
57352: LIST
57353: LIST
57354: PUSH
57355: LD_INT 2
57357: PUSH
57358: LD_INT 3
57360: NEG
57361: PUSH
57362: EMPTY
57363: LIST
57364: LIST
57365: PUSH
57366: LD_INT 2
57368: NEG
57369: PUSH
57370: LD_INT 5
57372: NEG
57373: PUSH
57374: EMPTY
57375: LIST
57376: LIST
57377: PUSH
57378: LD_INT 3
57380: PUSH
57381: LD_INT 0
57383: PUSH
57384: EMPTY
57385: LIST
57386: LIST
57387: PUSH
57388: LD_INT 3
57390: PUSH
57391: LD_INT 1
57393: NEG
57394: PUSH
57395: EMPTY
57396: LIST
57397: LIST
57398: PUSH
57399: LD_INT 4
57401: PUSH
57402: LD_INT 0
57404: PUSH
57405: EMPTY
57406: LIST
57407: LIST
57408: PUSH
57409: LD_INT 4
57411: PUSH
57412: LD_INT 1
57414: PUSH
57415: EMPTY
57416: LIST
57417: LIST
57418: PUSH
57419: LD_INT 3
57421: PUSH
57422: LD_INT 1
57424: PUSH
57425: EMPTY
57426: LIST
57427: LIST
57428: PUSH
57429: LD_INT 2
57431: PUSH
57432: LD_INT 0
57434: PUSH
57435: EMPTY
57436: LIST
57437: LIST
57438: PUSH
57439: LD_INT 2
57441: PUSH
57442: LD_INT 1
57444: NEG
57445: PUSH
57446: EMPTY
57447: LIST
57448: LIST
57449: PUSH
57450: LD_INT 2
57452: PUSH
57453: LD_INT 2
57455: NEG
57456: PUSH
57457: EMPTY
57458: LIST
57459: LIST
57460: PUSH
57461: LD_INT 4
57463: PUSH
57464: LD_INT 2
57466: PUSH
57467: EMPTY
57468: LIST
57469: LIST
57470: PUSH
57471: LD_INT 4
57473: PUSH
57474: LD_INT 4
57476: PUSH
57477: EMPTY
57478: LIST
57479: LIST
57480: PUSH
57481: LD_INT 4
57483: PUSH
57484: LD_INT 3
57486: PUSH
57487: EMPTY
57488: LIST
57489: LIST
57490: PUSH
57491: LD_INT 5
57493: PUSH
57494: LD_INT 4
57496: PUSH
57497: EMPTY
57498: LIST
57499: LIST
57500: PUSH
57501: LD_INT 5
57503: PUSH
57504: LD_INT 5
57506: PUSH
57507: EMPTY
57508: LIST
57509: LIST
57510: PUSH
57511: LD_INT 4
57513: PUSH
57514: LD_INT 5
57516: PUSH
57517: EMPTY
57518: LIST
57519: LIST
57520: PUSH
57521: LD_INT 3
57523: PUSH
57524: LD_INT 4
57526: PUSH
57527: EMPTY
57528: LIST
57529: LIST
57530: PUSH
57531: LD_INT 3
57533: PUSH
57534: LD_INT 3
57536: PUSH
57537: EMPTY
57538: LIST
57539: LIST
57540: PUSH
57541: LD_INT 5
57543: PUSH
57544: LD_INT 3
57546: PUSH
57547: EMPTY
57548: LIST
57549: LIST
57550: PUSH
57551: LD_INT 3
57553: PUSH
57554: LD_INT 5
57556: PUSH
57557: EMPTY
57558: LIST
57559: LIST
57560: PUSH
57561: EMPTY
57562: LIST
57563: LIST
57564: LIST
57565: LIST
57566: LIST
57567: LIST
57568: LIST
57569: LIST
57570: LIST
57571: LIST
57572: LIST
57573: LIST
57574: LIST
57575: LIST
57576: LIST
57577: LIST
57578: LIST
57579: LIST
57580: LIST
57581: LIST
57582: LIST
57583: LIST
57584: LIST
57585: LIST
57586: LIST
57587: LIST
57588: LIST
57589: LIST
57590: LIST
57591: LIST
57592: LIST
57593: LIST
57594: LIST
57595: LIST
57596: LIST
57597: LIST
57598: LIST
57599: LIST
57600: LIST
57601: LIST
57602: LIST
57603: LIST
57604: LIST
57605: LIST
57606: LIST
57607: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
57608: LD_ADDR_VAR 0 33
57612: PUSH
57613: LD_INT 4
57615: NEG
57616: PUSH
57617: LD_INT 4
57619: NEG
57620: PUSH
57621: EMPTY
57622: LIST
57623: LIST
57624: PUSH
57625: LD_INT 4
57627: NEG
57628: PUSH
57629: LD_INT 5
57631: NEG
57632: PUSH
57633: EMPTY
57634: LIST
57635: LIST
57636: PUSH
57637: LD_INT 3
57639: NEG
57640: PUSH
57641: LD_INT 4
57643: NEG
57644: PUSH
57645: EMPTY
57646: LIST
57647: LIST
57648: PUSH
57649: LD_INT 3
57651: NEG
57652: PUSH
57653: LD_INT 3
57655: NEG
57656: PUSH
57657: EMPTY
57658: LIST
57659: LIST
57660: PUSH
57661: LD_INT 4
57663: NEG
57664: PUSH
57665: LD_INT 3
57667: NEG
57668: PUSH
57669: EMPTY
57670: LIST
57671: LIST
57672: PUSH
57673: LD_INT 5
57675: NEG
57676: PUSH
57677: LD_INT 4
57679: NEG
57680: PUSH
57681: EMPTY
57682: LIST
57683: LIST
57684: PUSH
57685: LD_INT 5
57687: NEG
57688: PUSH
57689: LD_INT 5
57691: NEG
57692: PUSH
57693: EMPTY
57694: LIST
57695: LIST
57696: PUSH
57697: LD_INT 3
57699: NEG
57700: PUSH
57701: LD_INT 5
57703: NEG
57704: PUSH
57705: EMPTY
57706: LIST
57707: LIST
57708: PUSH
57709: LD_INT 5
57711: NEG
57712: PUSH
57713: LD_INT 3
57715: NEG
57716: PUSH
57717: EMPTY
57718: LIST
57719: LIST
57720: PUSH
57721: LD_INT 0
57723: PUSH
57724: LD_INT 3
57726: NEG
57727: PUSH
57728: EMPTY
57729: LIST
57730: LIST
57731: PUSH
57732: LD_INT 0
57734: PUSH
57735: LD_INT 4
57737: NEG
57738: PUSH
57739: EMPTY
57740: LIST
57741: LIST
57742: PUSH
57743: LD_INT 1
57745: PUSH
57746: LD_INT 3
57748: NEG
57749: PUSH
57750: EMPTY
57751: LIST
57752: LIST
57753: PUSH
57754: LD_INT 1
57756: PUSH
57757: LD_INT 2
57759: NEG
57760: PUSH
57761: EMPTY
57762: LIST
57763: LIST
57764: PUSH
57765: LD_INT 0
57767: PUSH
57768: LD_INT 2
57770: NEG
57771: PUSH
57772: EMPTY
57773: LIST
57774: LIST
57775: PUSH
57776: LD_INT 1
57778: NEG
57779: PUSH
57780: LD_INT 3
57782: NEG
57783: PUSH
57784: EMPTY
57785: LIST
57786: LIST
57787: PUSH
57788: LD_INT 1
57790: NEG
57791: PUSH
57792: LD_INT 4
57794: NEG
57795: PUSH
57796: EMPTY
57797: LIST
57798: LIST
57799: PUSH
57800: LD_INT 2
57802: PUSH
57803: LD_INT 2
57805: NEG
57806: PUSH
57807: EMPTY
57808: LIST
57809: LIST
57810: PUSH
57811: LD_INT 2
57813: NEG
57814: PUSH
57815: LD_INT 4
57817: NEG
57818: PUSH
57819: EMPTY
57820: LIST
57821: LIST
57822: PUSH
57823: LD_INT 4
57825: PUSH
57826: LD_INT 0
57828: PUSH
57829: EMPTY
57830: LIST
57831: LIST
57832: PUSH
57833: LD_INT 4
57835: PUSH
57836: LD_INT 1
57838: NEG
57839: PUSH
57840: EMPTY
57841: LIST
57842: LIST
57843: PUSH
57844: LD_INT 5
57846: PUSH
57847: LD_INT 0
57849: PUSH
57850: EMPTY
57851: LIST
57852: LIST
57853: PUSH
57854: LD_INT 5
57856: PUSH
57857: LD_INT 1
57859: PUSH
57860: EMPTY
57861: LIST
57862: LIST
57863: PUSH
57864: LD_INT 4
57866: PUSH
57867: LD_INT 1
57869: PUSH
57870: EMPTY
57871: LIST
57872: LIST
57873: PUSH
57874: LD_INT 3
57876: PUSH
57877: LD_INT 0
57879: PUSH
57880: EMPTY
57881: LIST
57882: LIST
57883: PUSH
57884: LD_INT 3
57886: PUSH
57887: LD_INT 1
57889: NEG
57890: PUSH
57891: EMPTY
57892: LIST
57893: LIST
57894: PUSH
57895: LD_INT 3
57897: PUSH
57898: LD_INT 2
57900: NEG
57901: PUSH
57902: EMPTY
57903: LIST
57904: LIST
57905: PUSH
57906: LD_INT 5
57908: PUSH
57909: LD_INT 2
57911: PUSH
57912: EMPTY
57913: LIST
57914: LIST
57915: PUSH
57916: LD_INT 3
57918: PUSH
57919: LD_INT 3
57921: PUSH
57922: EMPTY
57923: LIST
57924: LIST
57925: PUSH
57926: LD_INT 3
57928: PUSH
57929: LD_INT 2
57931: PUSH
57932: EMPTY
57933: LIST
57934: LIST
57935: PUSH
57936: LD_INT 4
57938: PUSH
57939: LD_INT 3
57941: PUSH
57942: EMPTY
57943: LIST
57944: LIST
57945: PUSH
57946: LD_INT 4
57948: PUSH
57949: LD_INT 4
57951: PUSH
57952: EMPTY
57953: LIST
57954: LIST
57955: PUSH
57956: LD_INT 3
57958: PUSH
57959: LD_INT 4
57961: PUSH
57962: EMPTY
57963: LIST
57964: LIST
57965: PUSH
57966: LD_INT 2
57968: PUSH
57969: LD_INT 3
57971: PUSH
57972: EMPTY
57973: LIST
57974: LIST
57975: PUSH
57976: LD_INT 2
57978: PUSH
57979: LD_INT 2
57981: PUSH
57982: EMPTY
57983: LIST
57984: LIST
57985: PUSH
57986: LD_INT 4
57988: PUSH
57989: LD_INT 2
57991: PUSH
57992: EMPTY
57993: LIST
57994: LIST
57995: PUSH
57996: LD_INT 2
57998: PUSH
57999: LD_INT 4
58001: PUSH
58002: EMPTY
58003: LIST
58004: LIST
58005: PUSH
58006: LD_INT 0
58008: PUSH
58009: LD_INT 4
58011: PUSH
58012: EMPTY
58013: LIST
58014: LIST
58015: PUSH
58016: LD_INT 0
58018: PUSH
58019: LD_INT 3
58021: PUSH
58022: EMPTY
58023: LIST
58024: LIST
58025: PUSH
58026: LD_INT 1
58028: PUSH
58029: LD_INT 4
58031: PUSH
58032: EMPTY
58033: LIST
58034: LIST
58035: PUSH
58036: LD_INT 1
58038: PUSH
58039: LD_INT 5
58041: PUSH
58042: EMPTY
58043: LIST
58044: LIST
58045: PUSH
58046: LD_INT 0
58048: PUSH
58049: LD_INT 5
58051: PUSH
58052: EMPTY
58053: LIST
58054: LIST
58055: PUSH
58056: LD_INT 1
58058: NEG
58059: PUSH
58060: LD_INT 4
58062: PUSH
58063: EMPTY
58064: LIST
58065: LIST
58066: PUSH
58067: LD_INT 1
58069: NEG
58070: PUSH
58071: LD_INT 3
58073: PUSH
58074: EMPTY
58075: LIST
58076: LIST
58077: PUSH
58078: LD_INT 2
58080: PUSH
58081: LD_INT 5
58083: PUSH
58084: EMPTY
58085: LIST
58086: LIST
58087: PUSH
58088: LD_INT 2
58090: NEG
58091: PUSH
58092: LD_INT 3
58094: PUSH
58095: EMPTY
58096: LIST
58097: LIST
58098: PUSH
58099: EMPTY
58100: LIST
58101: LIST
58102: LIST
58103: LIST
58104: LIST
58105: LIST
58106: LIST
58107: LIST
58108: LIST
58109: LIST
58110: LIST
58111: LIST
58112: LIST
58113: LIST
58114: LIST
58115: LIST
58116: LIST
58117: LIST
58118: LIST
58119: LIST
58120: LIST
58121: LIST
58122: LIST
58123: LIST
58124: LIST
58125: LIST
58126: LIST
58127: LIST
58128: LIST
58129: LIST
58130: LIST
58131: LIST
58132: LIST
58133: LIST
58134: LIST
58135: LIST
58136: LIST
58137: LIST
58138: LIST
58139: LIST
58140: LIST
58141: LIST
58142: LIST
58143: LIST
58144: LIST
58145: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
58146: LD_ADDR_VAR 0 34
58150: PUSH
58151: LD_INT 0
58153: PUSH
58154: LD_INT 4
58156: NEG
58157: PUSH
58158: EMPTY
58159: LIST
58160: LIST
58161: PUSH
58162: LD_INT 0
58164: PUSH
58165: LD_INT 5
58167: NEG
58168: PUSH
58169: EMPTY
58170: LIST
58171: LIST
58172: PUSH
58173: LD_INT 1
58175: PUSH
58176: LD_INT 4
58178: NEG
58179: PUSH
58180: EMPTY
58181: LIST
58182: LIST
58183: PUSH
58184: LD_INT 1
58186: PUSH
58187: LD_INT 3
58189: NEG
58190: PUSH
58191: EMPTY
58192: LIST
58193: LIST
58194: PUSH
58195: LD_INT 0
58197: PUSH
58198: LD_INT 3
58200: NEG
58201: PUSH
58202: EMPTY
58203: LIST
58204: LIST
58205: PUSH
58206: LD_INT 1
58208: NEG
58209: PUSH
58210: LD_INT 4
58212: NEG
58213: PUSH
58214: EMPTY
58215: LIST
58216: LIST
58217: PUSH
58218: LD_INT 1
58220: NEG
58221: PUSH
58222: LD_INT 5
58224: NEG
58225: PUSH
58226: EMPTY
58227: LIST
58228: LIST
58229: PUSH
58230: LD_INT 2
58232: PUSH
58233: LD_INT 3
58235: NEG
58236: PUSH
58237: EMPTY
58238: LIST
58239: LIST
58240: PUSH
58241: LD_INT 2
58243: NEG
58244: PUSH
58245: LD_INT 5
58247: NEG
58248: PUSH
58249: EMPTY
58250: LIST
58251: LIST
58252: PUSH
58253: LD_INT 3
58255: PUSH
58256: LD_INT 0
58258: PUSH
58259: EMPTY
58260: LIST
58261: LIST
58262: PUSH
58263: LD_INT 3
58265: PUSH
58266: LD_INT 1
58268: NEG
58269: PUSH
58270: EMPTY
58271: LIST
58272: LIST
58273: PUSH
58274: LD_INT 4
58276: PUSH
58277: LD_INT 0
58279: PUSH
58280: EMPTY
58281: LIST
58282: LIST
58283: PUSH
58284: LD_INT 4
58286: PUSH
58287: LD_INT 1
58289: PUSH
58290: EMPTY
58291: LIST
58292: LIST
58293: PUSH
58294: LD_INT 3
58296: PUSH
58297: LD_INT 1
58299: PUSH
58300: EMPTY
58301: LIST
58302: LIST
58303: PUSH
58304: LD_INT 2
58306: PUSH
58307: LD_INT 0
58309: PUSH
58310: EMPTY
58311: LIST
58312: LIST
58313: PUSH
58314: LD_INT 2
58316: PUSH
58317: LD_INT 1
58319: NEG
58320: PUSH
58321: EMPTY
58322: LIST
58323: LIST
58324: PUSH
58325: LD_INT 2
58327: PUSH
58328: LD_INT 2
58330: NEG
58331: PUSH
58332: EMPTY
58333: LIST
58334: LIST
58335: PUSH
58336: LD_INT 4
58338: PUSH
58339: LD_INT 2
58341: PUSH
58342: EMPTY
58343: LIST
58344: LIST
58345: PUSH
58346: LD_INT 4
58348: PUSH
58349: LD_INT 4
58351: PUSH
58352: EMPTY
58353: LIST
58354: LIST
58355: PUSH
58356: LD_INT 4
58358: PUSH
58359: LD_INT 3
58361: PUSH
58362: EMPTY
58363: LIST
58364: LIST
58365: PUSH
58366: LD_INT 5
58368: PUSH
58369: LD_INT 4
58371: PUSH
58372: EMPTY
58373: LIST
58374: LIST
58375: PUSH
58376: LD_INT 5
58378: PUSH
58379: LD_INT 5
58381: PUSH
58382: EMPTY
58383: LIST
58384: LIST
58385: PUSH
58386: LD_INT 4
58388: PUSH
58389: LD_INT 5
58391: PUSH
58392: EMPTY
58393: LIST
58394: LIST
58395: PUSH
58396: LD_INT 3
58398: PUSH
58399: LD_INT 4
58401: PUSH
58402: EMPTY
58403: LIST
58404: LIST
58405: PUSH
58406: LD_INT 3
58408: PUSH
58409: LD_INT 3
58411: PUSH
58412: EMPTY
58413: LIST
58414: LIST
58415: PUSH
58416: LD_INT 5
58418: PUSH
58419: LD_INT 3
58421: PUSH
58422: EMPTY
58423: LIST
58424: LIST
58425: PUSH
58426: LD_INT 3
58428: PUSH
58429: LD_INT 5
58431: PUSH
58432: EMPTY
58433: LIST
58434: LIST
58435: PUSH
58436: LD_INT 0
58438: PUSH
58439: LD_INT 3
58441: PUSH
58442: EMPTY
58443: LIST
58444: LIST
58445: PUSH
58446: LD_INT 0
58448: PUSH
58449: LD_INT 2
58451: PUSH
58452: EMPTY
58453: LIST
58454: LIST
58455: PUSH
58456: LD_INT 1
58458: PUSH
58459: LD_INT 3
58461: PUSH
58462: EMPTY
58463: LIST
58464: LIST
58465: PUSH
58466: LD_INT 1
58468: PUSH
58469: LD_INT 4
58471: PUSH
58472: EMPTY
58473: LIST
58474: LIST
58475: PUSH
58476: LD_INT 0
58478: PUSH
58479: LD_INT 4
58481: PUSH
58482: EMPTY
58483: LIST
58484: LIST
58485: PUSH
58486: LD_INT 1
58488: NEG
58489: PUSH
58490: LD_INT 3
58492: PUSH
58493: EMPTY
58494: LIST
58495: LIST
58496: PUSH
58497: LD_INT 1
58499: NEG
58500: PUSH
58501: LD_INT 2
58503: PUSH
58504: EMPTY
58505: LIST
58506: LIST
58507: PUSH
58508: LD_INT 2
58510: PUSH
58511: LD_INT 4
58513: PUSH
58514: EMPTY
58515: LIST
58516: LIST
58517: PUSH
58518: LD_INT 2
58520: NEG
58521: PUSH
58522: LD_INT 2
58524: PUSH
58525: EMPTY
58526: LIST
58527: LIST
58528: PUSH
58529: LD_INT 4
58531: NEG
58532: PUSH
58533: LD_INT 0
58535: PUSH
58536: EMPTY
58537: LIST
58538: LIST
58539: PUSH
58540: LD_INT 4
58542: NEG
58543: PUSH
58544: LD_INT 1
58546: NEG
58547: PUSH
58548: EMPTY
58549: LIST
58550: LIST
58551: PUSH
58552: LD_INT 3
58554: NEG
58555: PUSH
58556: LD_INT 0
58558: PUSH
58559: EMPTY
58560: LIST
58561: LIST
58562: PUSH
58563: LD_INT 3
58565: NEG
58566: PUSH
58567: LD_INT 1
58569: PUSH
58570: EMPTY
58571: LIST
58572: LIST
58573: PUSH
58574: LD_INT 4
58576: NEG
58577: PUSH
58578: LD_INT 1
58580: PUSH
58581: EMPTY
58582: LIST
58583: LIST
58584: PUSH
58585: LD_INT 5
58587: NEG
58588: PUSH
58589: LD_INT 0
58591: PUSH
58592: EMPTY
58593: LIST
58594: LIST
58595: PUSH
58596: LD_INT 5
58598: NEG
58599: PUSH
58600: LD_INT 1
58602: NEG
58603: PUSH
58604: EMPTY
58605: LIST
58606: LIST
58607: PUSH
58608: LD_INT 5
58610: NEG
58611: PUSH
58612: LD_INT 2
58614: NEG
58615: PUSH
58616: EMPTY
58617: LIST
58618: LIST
58619: PUSH
58620: LD_INT 3
58622: NEG
58623: PUSH
58624: LD_INT 2
58626: PUSH
58627: EMPTY
58628: LIST
58629: LIST
58630: PUSH
58631: EMPTY
58632: LIST
58633: LIST
58634: LIST
58635: LIST
58636: LIST
58637: LIST
58638: LIST
58639: LIST
58640: LIST
58641: LIST
58642: LIST
58643: LIST
58644: LIST
58645: LIST
58646: LIST
58647: LIST
58648: LIST
58649: LIST
58650: LIST
58651: LIST
58652: LIST
58653: LIST
58654: LIST
58655: LIST
58656: LIST
58657: LIST
58658: LIST
58659: LIST
58660: LIST
58661: LIST
58662: LIST
58663: LIST
58664: LIST
58665: LIST
58666: LIST
58667: LIST
58668: LIST
58669: LIST
58670: LIST
58671: LIST
58672: LIST
58673: LIST
58674: LIST
58675: LIST
58676: LIST
58677: ST_TO_ADDR
// end ; end ;
58678: GO 58681
58680: POP
// case btype of b_depot , b_warehouse :
58681: LD_VAR 0 1
58685: PUSH
58686: LD_INT 0
58688: DOUBLE
58689: EQUAL
58690: IFTRUE 58700
58692: LD_INT 1
58694: DOUBLE
58695: EQUAL
58696: IFTRUE 58700
58698: GO 58901
58700: POP
// case nation of nation_american :
58701: LD_VAR 0 5
58705: PUSH
58706: LD_INT 1
58708: DOUBLE
58709: EQUAL
58710: IFTRUE 58714
58712: GO 58770
58714: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
58715: LD_ADDR_VAR 0 9
58719: PUSH
58720: LD_VAR 0 11
58724: PUSH
58725: LD_VAR 0 12
58729: PUSH
58730: LD_VAR 0 13
58734: PUSH
58735: LD_VAR 0 14
58739: PUSH
58740: LD_VAR 0 15
58744: PUSH
58745: LD_VAR 0 16
58749: PUSH
58750: EMPTY
58751: LIST
58752: LIST
58753: LIST
58754: LIST
58755: LIST
58756: LIST
58757: PUSH
58758: LD_VAR 0 4
58762: PUSH
58763: LD_INT 1
58765: PLUS
58766: ARRAY
58767: ST_TO_ADDR
58768: GO 58899
58770: LD_INT 2
58772: DOUBLE
58773: EQUAL
58774: IFTRUE 58778
58776: GO 58834
58778: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
58779: LD_ADDR_VAR 0 9
58783: PUSH
58784: LD_VAR 0 17
58788: PUSH
58789: LD_VAR 0 18
58793: PUSH
58794: LD_VAR 0 19
58798: PUSH
58799: LD_VAR 0 20
58803: PUSH
58804: LD_VAR 0 21
58808: PUSH
58809: LD_VAR 0 22
58813: PUSH
58814: EMPTY
58815: LIST
58816: LIST
58817: LIST
58818: LIST
58819: LIST
58820: LIST
58821: PUSH
58822: LD_VAR 0 4
58826: PUSH
58827: LD_INT 1
58829: PLUS
58830: ARRAY
58831: ST_TO_ADDR
58832: GO 58899
58834: LD_INT 3
58836: DOUBLE
58837: EQUAL
58838: IFTRUE 58842
58840: GO 58898
58842: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
58843: LD_ADDR_VAR 0 9
58847: PUSH
58848: LD_VAR 0 23
58852: PUSH
58853: LD_VAR 0 24
58857: PUSH
58858: LD_VAR 0 25
58862: PUSH
58863: LD_VAR 0 26
58867: PUSH
58868: LD_VAR 0 27
58872: PUSH
58873: LD_VAR 0 28
58877: PUSH
58878: EMPTY
58879: LIST
58880: LIST
58881: LIST
58882: LIST
58883: LIST
58884: LIST
58885: PUSH
58886: LD_VAR 0 4
58890: PUSH
58891: LD_INT 1
58893: PLUS
58894: ARRAY
58895: ST_TO_ADDR
58896: GO 58899
58898: POP
58899: GO 59454
58901: LD_INT 2
58903: DOUBLE
58904: EQUAL
58905: IFTRUE 58915
58907: LD_INT 3
58909: DOUBLE
58910: EQUAL
58911: IFTRUE 58915
58913: GO 58971
58915: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
58916: LD_ADDR_VAR 0 9
58920: PUSH
58921: LD_VAR 0 29
58925: PUSH
58926: LD_VAR 0 30
58930: PUSH
58931: LD_VAR 0 31
58935: PUSH
58936: LD_VAR 0 32
58940: PUSH
58941: LD_VAR 0 33
58945: PUSH
58946: LD_VAR 0 34
58950: PUSH
58951: EMPTY
58952: LIST
58953: LIST
58954: LIST
58955: LIST
58956: LIST
58957: LIST
58958: PUSH
58959: LD_VAR 0 4
58963: PUSH
58964: LD_INT 1
58966: PLUS
58967: ARRAY
58968: ST_TO_ADDR
58969: GO 59454
58971: LD_INT 16
58973: DOUBLE
58974: EQUAL
58975: IFTRUE 59033
58977: LD_INT 17
58979: DOUBLE
58980: EQUAL
58981: IFTRUE 59033
58983: LD_INT 18
58985: DOUBLE
58986: EQUAL
58987: IFTRUE 59033
58989: LD_INT 19
58991: DOUBLE
58992: EQUAL
58993: IFTRUE 59033
58995: LD_INT 22
58997: DOUBLE
58998: EQUAL
58999: IFTRUE 59033
59001: LD_INT 20
59003: DOUBLE
59004: EQUAL
59005: IFTRUE 59033
59007: LD_INT 21
59009: DOUBLE
59010: EQUAL
59011: IFTRUE 59033
59013: LD_INT 23
59015: DOUBLE
59016: EQUAL
59017: IFTRUE 59033
59019: LD_INT 24
59021: DOUBLE
59022: EQUAL
59023: IFTRUE 59033
59025: LD_INT 25
59027: DOUBLE
59028: EQUAL
59029: IFTRUE 59033
59031: GO 59089
59033: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
59034: LD_ADDR_VAR 0 9
59038: PUSH
59039: LD_VAR 0 35
59043: PUSH
59044: LD_VAR 0 36
59048: PUSH
59049: LD_VAR 0 37
59053: PUSH
59054: LD_VAR 0 38
59058: PUSH
59059: LD_VAR 0 39
59063: PUSH
59064: LD_VAR 0 40
59068: PUSH
59069: EMPTY
59070: LIST
59071: LIST
59072: LIST
59073: LIST
59074: LIST
59075: LIST
59076: PUSH
59077: LD_VAR 0 4
59081: PUSH
59082: LD_INT 1
59084: PLUS
59085: ARRAY
59086: ST_TO_ADDR
59087: GO 59454
59089: LD_INT 6
59091: DOUBLE
59092: EQUAL
59093: IFTRUE 59145
59095: LD_INT 7
59097: DOUBLE
59098: EQUAL
59099: IFTRUE 59145
59101: LD_INT 8
59103: DOUBLE
59104: EQUAL
59105: IFTRUE 59145
59107: LD_INT 13
59109: DOUBLE
59110: EQUAL
59111: IFTRUE 59145
59113: LD_INT 12
59115: DOUBLE
59116: EQUAL
59117: IFTRUE 59145
59119: LD_INT 15
59121: DOUBLE
59122: EQUAL
59123: IFTRUE 59145
59125: LD_INT 11
59127: DOUBLE
59128: EQUAL
59129: IFTRUE 59145
59131: LD_INT 14
59133: DOUBLE
59134: EQUAL
59135: IFTRUE 59145
59137: LD_INT 10
59139: DOUBLE
59140: EQUAL
59141: IFTRUE 59145
59143: GO 59201
59145: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
59146: LD_ADDR_VAR 0 9
59150: PUSH
59151: LD_VAR 0 41
59155: PUSH
59156: LD_VAR 0 42
59160: PUSH
59161: LD_VAR 0 43
59165: PUSH
59166: LD_VAR 0 44
59170: PUSH
59171: LD_VAR 0 45
59175: PUSH
59176: LD_VAR 0 46
59180: PUSH
59181: EMPTY
59182: LIST
59183: LIST
59184: LIST
59185: LIST
59186: LIST
59187: LIST
59188: PUSH
59189: LD_VAR 0 4
59193: PUSH
59194: LD_INT 1
59196: PLUS
59197: ARRAY
59198: ST_TO_ADDR
59199: GO 59454
59201: LD_INT 36
59203: DOUBLE
59204: EQUAL
59205: IFTRUE 59209
59207: GO 59265
59209: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
59210: LD_ADDR_VAR 0 9
59214: PUSH
59215: LD_VAR 0 47
59219: PUSH
59220: LD_VAR 0 48
59224: PUSH
59225: LD_VAR 0 49
59229: PUSH
59230: LD_VAR 0 50
59234: PUSH
59235: LD_VAR 0 51
59239: PUSH
59240: LD_VAR 0 52
59244: PUSH
59245: EMPTY
59246: LIST
59247: LIST
59248: LIST
59249: LIST
59250: LIST
59251: LIST
59252: PUSH
59253: LD_VAR 0 4
59257: PUSH
59258: LD_INT 1
59260: PLUS
59261: ARRAY
59262: ST_TO_ADDR
59263: GO 59454
59265: LD_INT 4
59267: DOUBLE
59268: EQUAL
59269: IFTRUE 59291
59271: LD_INT 5
59273: DOUBLE
59274: EQUAL
59275: IFTRUE 59291
59277: LD_INT 34
59279: DOUBLE
59280: EQUAL
59281: IFTRUE 59291
59283: LD_INT 37
59285: DOUBLE
59286: EQUAL
59287: IFTRUE 59291
59289: GO 59347
59291: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
59292: LD_ADDR_VAR 0 9
59296: PUSH
59297: LD_VAR 0 53
59301: PUSH
59302: LD_VAR 0 54
59306: PUSH
59307: LD_VAR 0 55
59311: PUSH
59312: LD_VAR 0 56
59316: PUSH
59317: LD_VAR 0 57
59321: PUSH
59322: LD_VAR 0 58
59326: PUSH
59327: EMPTY
59328: LIST
59329: LIST
59330: LIST
59331: LIST
59332: LIST
59333: LIST
59334: PUSH
59335: LD_VAR 0 4
59339: PUSH
59340: LD_INT 1
59342: PLUS
59343: ARRAY
59344: ST_TO_ADDR
59345: GO 59454
59347: LD_INT 31
59349: DOUBLE
59350: EQUAL
59351: IFTRUE 59397
59353: LD_INT 32
59355: DOUBLE
59356: EQUAL
59357: IFTRUE 59397
59359: LD_INT 33
59361: DOUBLE
59362: EQUAL
59363: IFTRUE 59397
59365: LD_INT 27
59367: DOUBLE
59368: EQUAL
59369: IFTRUE 59397
59371: LD_INT 26
59373: DOUBLE
59374: EQUAL
59375: IFTRUE 59397
59377: LD_INT 28
59379: DOUBLE
59380: EQUAL
59381: IFTRUE 59397
59383: LD_INT 29
59385: DOUBLE
59386: EQUAL
59387: IFTRUE 59397
59389: LD_INT 30
59391: DOUBLE
59392: EQUAL
59393: IFTRUE 59397
59395: GO 59453
59397: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
59398: LD_ADDR_VAR 0 9
59402: PUSH
59403: LD_VAR 0 59
59407: PUSH
59408: LD_VAR 0 60
59412: PUSH
59413: LD_VAR 0 61
59417: PUSH
59418: LD_VAR 0 62
59422: PUSH
59423: LD_VAR 0 63
59427: PUSH
59428: LD_VAR 0 64
59432: PUSH
59433: EMPTY
59434: LIST
59435: LIST
59436: LIST
59437: LIST
59438: LIST
59439: LIST
59440: PUSH
59441: LD_VAR 0 4
59445: PUSH
59446: LD_INT 1
59448: PLUS
59449: ARRAY
59450: ST_TO_ADDR
59451: GO 59454
59453: POP
// temp_list2 = [ ] ;
59454: LD_ADDR_VAR 0 10
59458: PUSH
59459: EMPTY
59460: ST_TO_ADDR
// for i in temp_list do
59461: LD_ADDR_VAR 0 8
59465: PUSH
59466: LD_VAR 0 9
59470: PUSH
59471: FOR_IN
59472: IFFALSE 59524
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
59474: LD_ADDR_VAR 0 10
59478: PUSH
59479: LD_VAR 0 10
59483: PUSH
59484: LD_VAR 0 8
59488: PUSH
59489: LD_INT 1
59491: ARRAY
59492: PUSH
59493: LD_VAR 0 2
59497: PLUS
59498: PUSH
59499: LD_VAR 0 8
59503: PUSH
59504: LD_INT 2
59506: ARRAY
59507: PUSH
59508: LD_VAR 0 3
59512: PLUS
59513: PUSH
59514: EMPTY
59515: LIST
59516: LIST
59517: PUSH
59518: EMPTY
59519: LIST
59520: ADD
59521: ST_TO_ADDR
59522: GO 59471
59524: POP
59525: POP
// result = temp_list2 ;
59526: LD_ADDR_VAR 0 7
59530: PUSH
59531: LD_VAR 0 10
59535: ST_TO_ADDR
// end ;
59536: LD_VAR 0 7
59540: RET
// export function EnemyInRange ( unit , dist ) ; begin
59541: LD_INT 0
59543: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
59544: LD_ADDR_VAR 0 3
59548: PUSH
59549: LD_VAR 0 1
59553: PPUSH
59554: CALL_OW 255
59558: PPUSH
59559: LD_VAR 0 1
59563: PPUSH
59564: CALL_OW 250
59568: PPUSH
59569: LD_VAR 0 1
59573: PPUSH
59574: CALL_OW 251
59578: PPUSH
59579: LD_VAR 0 2
59583: PPUSH
59584: CALL 32937 0 4
59588: PUSH
59589: LD_INT 4
59591: ARRAY
59592: ST_TO_ADDR
// end ;
59593: LD_VAR 0 3
59597: RET
// export function PlayerSeeMe ( unit ) ; begin
59598: LD_INT 0
59600: PPUSH
// result := See ( your_side , unit ) ;
59601: LD_ADDR_VAR 0 2
59605: PUSH
59606: LD_OWVAR 2
59610: PPUSH
59611: LD_VAR 0 1
59615: PPUSH
59616: CALL_OW 292
59620: ST_TO_ADDR
// end ;
59621: LD_VAR 0 2
59625: RET
// export function ReverseDir ( unit ) ; begin
59626: LD_INT 0
59628: PPUSH
// if not unit then
59629: LD_VAR 0 1
59633: NOT
59634: IFFALSE 59638
// exit ;
59636: GO 59661
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
59638: LD_ADDR_VAR 0 2
59642: PUSH
59643: LD_VAR 0 1
59647: PPUSH
59648: CALL_OW 254
59652: PUSH
59653: LD_INT 3
59655: PLUS
59656: PUSH
59657: LD_INT 6
59659: MOD
59660: ST_TO_ADDR
// end ;
59661: LD_VAR 0 2
59665: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
59666: LD_INT 0
59668: PPUSH
59669: PPUSH
59670: PPUSH
59671: PPUSH
59672: PPUSH
// if not hexes then
59673: LD_VAR 0 2
59677: NOT
59678: IFFALSE 59682
// exit ;
59680: GO 59830
// dist := 9999 ;
59682: LD_ADDR_VAR 0 5
59686: PUSH
59687: LD_INT 9999
59689: ST_TO_ADDR
// for i = 1 to hexes do
59690: LD_ADDR_VAR 0 4
59694: PUSH
59695: DOUBLE
59696: LD_INT 1
59698: DEC
59699: ST_TO_ADDR
59700: LD_VAR 0 2
59704: PUSH
59705: FOR_TO
59706: IFFALSE 59818
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
59708: LD_VAR 0 1
59712: PPUSH
59713: LD_VAR 0 2
59717: PUSH
59718: LD_VAR 0 4
59722: ARRAY
59723: PUSH
59724: LD_INT 1
59726: ARRAY
59727: PPUSH
59728: LD_VAR 0 2
59732: PUSH
59733: LD_VAR 0 4
59737: ARRAY
59738: PUSH
59739: LD_INT 2
59741: ARRAY
59742: PPUSH
59743: CALL_OW 297
59747: PUSH
59748: LD_VAR 0 5
59752: LESS
59753: IFFALSE 59816
// begin hex := hexes [ i ] ;
59755: LD_ADDR_VAR 0 7
59759: PUSH
59760: LD_VAR 0 2
59764: PUSH
59765: LD_VAR 0 4
59769: ARRAY
59770: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
59771: LD_ADDR_VAR 0 5
59775: PUSH
59776: LD_VAR 0 1
59780: PPUSH
59781: LD_VAR 0 2
59785: PUSH
59786: LD_VAR 0 4
59790: ARRAY
59791: PUSH
59792: LD_INT 1
59794: ARRAY
59795: PPUSH
59796: LD_VAR 0 2
59800: PUSH
59801: LD_VAR 0 4
59805: ARRAY
59806: PUSH
59807: LD_INT 2
59809: ARRAY
59810: PPUSH
59811: CALL_OW 297
59815: ST_TO_ADDR
// end ; end ;
59816: GO 59705
59818: POP
59819: POP
// result := hex ;
59820: LD_ADDR_VAR 0 3
59824: PUSH
59825: LD_VAR 0 7
59829: ST_TO_ADDR
// end ;
59830: LD_VAR 0 3
59834: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
59835: LD_INT 0
59837: PPUSH
59838: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
59839: LD_VAR 0 1
59843: NOT
59844: PUSH
59845: LD_VAR 0 1
59849: PUSH
59850: LD_INT 21
59852: PUSH
59853: LD_INT 2
59855: PUSH
59856: EMPTY
59857: LIST
59858: LIST
59859: PUSH
59860: LD_INT 23
59862: PUSH
59863: LD_INT 2
59865: PUSH
59866: EMPTY
59867: LIST
59868: LIST
59869: PUSH
59870: EMPTY
59871: LIST
59872: LIST
59873: PPUSH
59874: CALL_OW 69
59878: IN
59879: NOT
59880: OR
59881: IFFALSE 59885
// exit ;
59883: GO 59932
// for i = 1 to 3 do
59885: LD_ADDR_VAR 0 3
59889: PUSH
59890: DOUBLE
59891: LD_INT 1
59893: DEC
59894: ST_TO_ADDR
59895: LD_INT 3
59897: PUSH
59898: FOR_TO
59899: IFFALSE 59930
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
59901: LD_VAR 0 1
59905: PPUSH
59906: CALL_OW 250
59910: PPUSH
59911: LD_VAR 0 1
59915: PPUSH
59916: CALL_OW 251
59920: PPUSH
59921: LD_INT 1
59923: PPUSH
59924: CALL_OW 453
59928: GO 59898
59930: POP
59931: POP
// end ;
59932: LD_VAR 0 2
59936: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
59937: LD_INT 0
59939: PPUSH
59940: PPUSH
59941: PPUSH
59942: PPUSH
59943: PPUSH
59944: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
59945: LD_VAR 0 1
59949: NOT
59950: PUSH
59951: LD_VAR 0 2
59955: NOT
59956: OR
59957: PUSH
59958: LD_VAR 0 1
59962: PPUSH
59963: CALL_OW 314
59967: OR
59968: IFFALSE 59972
// exit ;
59970: GO 60413
// x := GetX ( enemy_unit ) ;
59972: LD_ADDR_VAR 0 7
59976: PUSH
59977: LD_VAR 0 2
59981: PPUSH
59982: CALL_OW 250
59986: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
59987: LD_ADDR_VAR 0 8
59991: PUSH
59992: LD_VAR 0 2
59996: PPUSH
59997: CALL_OW 251
60001: ST_TO_ADDR
// if not x or not y then
60002: LD_VAR 0 7
60006: NOT
60007: PUSH
60008: LD_VAR 0 8
60012: NOT
60013: OR
60014: IFFALSE 60018
// exit ;
60016: GO 60413
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
60018: LD_ADDR_VAR 0 6
60022: PUSH
60023: LD_VAR 0 7
60027: PPUSH
60028: LD_INT 0
60030: PPUSH
60031: LD_INT 4
60033: PPUSH
60034: CALL_OW 272
60038: PUSH
60039: LD_VAR 0 8
60043: PPUSH
60044: LD_INT 0
60046: PPUSH
60047: LD_INT 4
60049: PPUSH
60050: CALL_OW 273
60054: PUSH
60055: EMPTY
60056: LIST
60057: LIST
60058: PUSH
60059: LD_VAR 0 7
60063: PPUSH
60064: LD_INT 1
60066: PPUSH
60067: LD_INT 4
60069: PPUSH
60070: CALL_OW 272
60074: PUSH
60075: LD_VAR 0 8
60079: PPUSH
60080: LD_INT 1
60082: PPUSH
60083: LD_INT 4
60085: PPUSH
60086: CALL_OW 273
60090: PUSH
60091: EMPTY
60092: LIST
60093: LIST
60094: PUSH
60095: LD_VAR 0 7
60099: PPUSH
60100: LD_INT 2
60102: PPUSH
60103: LD_INT 4
60105: PPUSH
60106: CALL_OW 272
60110: PUSH
60111: LD_VAR 0 8
60115: PPUSH
60116: LD_INT 2
60118: PPUSH
60119: LD_INT 4
60121: PPUSH
60122: CALL_OW 273
60126: PUSH
60127: EMPTY
60128: LIST
60129: LIST
60130: PUSH
60131: LD_VAR 0 7
60135: PPUSH
60136: LD_INT 3
60138: PPUSH
60139: LD_INT 4
60141: PPUSH
60142: CALL_OW 272
60146: PUSH
60147: LD_VAR 0 8
60151: PPUSH
60152: LD_INT 3
60154: PPUSH
60155: LD_INT 4
60157: PPUSH
60158: CALL_OW 273
60162: PUSH
60163: EMPTY
60164: LIST
60165: LIST
60166: PUSH
60167: LD_VAR 0 7
60171: PPUSH
60172: LD_INT 4
60174: PPUSH
60175: LD_INT 4
60177: PPUSH
60178: CALL_OW 272
60182: PUSH
60183: LD_VAR 0 8
60187: PPUSH
60188: LD_INT 4
60190: PPUSH
60191: LD_INT 4
60193: PPUSH
60194: CALL_OW 273
60198: PUSH
60199: EMPTY
60200: LIST
60201: LIST
60202: PUSH
60203: LD_VAR 0 7
60207: PPUSH
60208: LD_INT 5
60210: PPUSH
60211: LD_INT 4
60213: PPUSH
60214: CALL_OW 272
60218: PUSH
60219: LD_VAR 0 8
60223: PPUSH
60224: LD_INT 5
60226: PPUSH
60227: LD_INT 4
60229: PPUSH
60230: CALL_OW 273
60234: PUSH
60235: EMPTY
60236: LIST
60237: LIST
60238: PUSH
60239: EMPTY
60240: LIST
60241: LIST
60242: LIST
60243: LIST
60244: LIST
60245: LIST
60246: ST_TO_ADDR
// for i = tmp downto 1 do
60247: LD_ADDR_VAR 0 4
60251: PUSH
60252: DOUBLE
60253: LD_VAR 0 6
60257: INC
60258: ST_TO_ADDR
60259: LD_INT 1
60261: PUSH
60262: FOR_DOWNTO
60263: IFFALSE 60364
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
60265: LD_VAR 0 6
60269: PUSH
60270: LD_VAR 0 4
60274: ARRAY
60275: PUSH
60276: LD_INT 1
60278: ARRAY
60279: PPUSH
60280: LD_VAR 0 6
60284: PUSH
60285: LD_VAR 0 4
60289: ARRAY
60290: PUSH
60291: LD_INT 2
60293: ARRAY
60294: PPUSH
60295: CALL_OW 488
60299: NOT
60300: PUSH
60301: LD_VAR 0 6
60305: PUSH
60306: LD_VAR 0 4
60310: ARRAY
60311: PUSH
60312: LD_INT 1
60314: ARRAY
60315: PPUSH
60316: LD_VAR 0 6
60320: PUSH
60321: LD_VAR 0 4
60325: ARRAY
60326: PUSH
60327: LD_INT 2
60329: ARRAY
60330: PPUSH
60331: CALL_OW 428
60335: PUSH
60336: LD_INT 0
60338: NONEQUAL
60339: OR
60340: IFFALSE 60362
// tmp := Delete ( tmp , i ) ;
60342: LD_ADDR_VAR 0 6
60346: PUSH
60347: LD_VAR 0 6
60351: PPUSH
60352: LD_VAR 0 4
60356: PPUSH
60357: CALL_OW 3
60361: ST_TO_ADDR
60362: GO 60262
60364: POP
60365: POP
// j := GetClosestHex ( unit , tmp ) ;
60366: LD_ADDR_VAR 0 5
60370: PUSH
60371: LD_VAR 0 1
60375: PPUSH
60376: LD_VAR 0 6
60380: PPUSH
60381: CALL 59666 0 2
60385: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
60386: LD_VAR 0 1
60390: PPUSH
60391: LD_VAR 0 5
60395: PUSH
60396: LD_INT 1
60398: ARRAY
60399: PPUSH
60400: LD_VAR 0 5
60404: PUSH
60405: LD_INT 2
60407: ARRAY
60408: PPUSH
60409: CALL_OW 111
// end ;
60413: LD_VAR 0 3
60417: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
60418: LD_INT 0
60420: PPUSH
60421: PPUSH
60422: PPUSH
// uc_side = 0 ;
60423: LD_ADDR_OWVAR 20
60427: PUSH
60428: LD_INT 0
60430: ST_TO_ADDR
// uc_nation = 0 ;
60431: LD_ADDR_OWVAR 21
60435: PUSH
60436: LD_INT 0
60438: ST_TO_ADDR
// InitHc_All ( ) ;
60439: CALL_OW 584
// InitVc ;
60443: CALL_OW 20
// if mastodonts then
60447: LD_VAR 0 6
60451: IFFALSE 60518
// for i = 1 to mastodonts do
60453: LD_ADDR_VAR 0 11
60457: PUSH
60458: DOUBLE
60459: LD_INT 1
60461: DEC
60462: ST_TO_ADDR
60463: LD_VAR 0 6
60467: PUSH
60468: FOR_TO
60469: IFFALSE 60516
// begin vc_chassis := 31 ;
60471: LD_ADDR_OWVAR 37
60475: PUSH
60476: LD_INT 31
60478: ST_TO_ADDR
// vc_control := control_rider ;
60479: LD_ADDR_OWVAR 38
60483: PUSH
60484: LD_INT 4
60486: ST_TO_ADDR
// animal := CreateVehicle ;
60487: LD_ADDR_VAR 0 12
60491: PUSH
60492: CALL_OW 45
60496: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60497: LD_VAR 0 12
60501: PPUSH
60502: LD_VAR 0 8
60506: PPUSH
60507: LD_INT 0
60509: PPUSH
60510: CALL 62653 0 3
// end ;
60514: GO 60468
60516: POP
60517: POP
// if horses then
60518: LD_VAR 0 5
60522: IFFALSE 60589
// for i = 1 to horses do
60524: LD_ADDR_VAR 0 11
60528: PUSH
60529: DOUBLE
60530: LD_INT 1
60532: DEC
60533: ST_TO_ADDR
60534: LD_VAR 0 5
60538: PUSH
60539: FOR_TO
60540: IFFALSE 60587
// begin hc_class := 21 ;
60542: LD_ADDR_OWVAR 28
60546: PUSH
60547: LD_INT 21
60549: ST_TO_ADDR
// hc_gallery :=  ;
60550: LD_ADDR_OWVAR 33
60554: PUSH
60555: LD_STRING 
60557: ST_TO_ADDR
// animal := CreateHuman ;
60558: LD_ADDR_VAR 0 12
60562: PUSH
60563: CALL_OW 44
60567: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60568: LD_VAR 0 12
60572: PPUSH
60573: LD_VAR 0 8
60577: PPUSH
60578: LD_INT 0
60580: PPUSH
60581: CALL 62653 0 3
// end ;
60585: GO 60539
60587: POP
60588: POP
// if birds then
60589: LD_VAR 0 1
60593: IFFALSE 60660
// for i = 1 to birds do
60595: LD_ADDR_VAR 0 11
60599: PUSH
60600: DOUBLE
60601: LD_INT 1
60603: DEC
60604: ST_TO_ADDR
60605: LD_VAR 0 1
60609: PUSH
60610: FOR_TO
60611: IFFALSE 60658
// begin hc_class = 18 ;
60613: LD_ADDR_OWVAR 28
60617: PUSH
60618: LD_INT 18
60620: ST_TO_ADDR
// hc_gallery =  ;
60621: LD_ADDR_OWVAR 33
60625: PUSH
60626: LD_STRING 
60628: ST_TO_ADDR
// animal := CreateHuman ;
60629: LD_ADDR_VAR 0 12
60633: PUSH
60634: CALL_OW 44
60638: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60639: LD_VAR 0 12
60643: PPUSH
60644: LD_VAR 0 8
60648: PPUSH
60649: LD_INT 0
60651: PPUSH
60652: CALL 62653 0 3
// end ;
60656: GO 60610
60658: POP
60659: POP
// if tigers then
60660: LD_VAR 0 2
60664: IFFALSE 60748
// for i = 1 to tigers do
60666: LD_ADDR_VAR 0 11
60670: PUSH
60671: DOUBLE
60672: LD_INT 1
60674: DEC
60675: ST_TO_ADDR
60676: LD_VAR 0 2
60680: PUSH
60681: FOR_TO
60682: IFFALSE 60746
// begin hc_class = class_tiger ;
60684: LD_ADDR_OWVAR 28
60688: PUSH
60689: LD_INT 14
60691: ST_TO_ADDR
// hc_gallery =  ;
60692: LD_ADDR_OWVAR 33
60696: PUSH
60697: LD_STRING 
60699: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
60700: LD_ADDR_OWVAR 35
60704: PUSH
60705: LD_INT 7
60707: NEG
60708: PPUSH
60709: LD_INT 7
60711: PPUSH
60712: CALL_OW 12
60716: ST_TO_ADDR
// animal := CreateHuman ;
60717: LD_ADDR_VAR 0 12
60721: PUSH
60722: CALL_OW 44
60726: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60727: LD_VAR 0 12
60731: PPUSH
60732: LD_VAR 0 8
60736: PPUSH
60737: LD_INT 0
60739: PPUSH
60740: CALL 62653 0 3
// end ;
60744: GO 60681
60746: POP
60747: POP
// if apemans then
60748: LD_VAR 0 3
60752: IFFALSE 60875
// for i = 1 to apemans do
60754: LD_ADDR_VAR 0 11
60758: PUSH
60759: DOUBLE
60760: LD_INT 1
60762: DEC
60763: ST_TO_ADDR
60764: LD_VAR 0 3
60768: PUSH
60769: FOR_TO
60770: IFFALSE 60873
// begin hc_class = class_apeman ;
60772: LD_ADDR_OWVAR 28
60776: PUSH
60777: LD_INT 12
60779: ST_TO_ADDR
// hc_gallery =  ;
60780: LD_ADDR_OWVAR 33
60784: PUSH
60785: LD_STRING 
60787: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
60788: LD_ADDR_OWVAR 35
60792: PUSH
60793: LD_INT 2
60795: NEG
60796: PPUSH
60797: LD_INT 2
60799: PPUSH
60800: CALL_OW 12
60804: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
60805: LD_ADDR_OWVAR 31
60809: PUSH
60810: LD_INT 1
60812: PPUSH
60813: LD_INT 3
60815: PPUSH
60816: CALL_OW 12
60820: PUSH
60821: LD_INT 1
60823: PPUSH
60824: LD_INT 3
60826: PPUSH
60827: CALL_OW 12
60831: PUSH
60832: LD_INT 0
60834: PUSH
60835: LD_INT 0
60837: PUSH
60838: EMPTY
60839: LIST
60840: LIST
60841: LIST
60842: LIST
60843: ST_TO_ADDR
// animal := CreateHuman ;
60844: LD_ADDR_VAR 0 12
60848: PUSH
60849: CALL_OW 44
60853: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60854: LD_VAR 0 12
60858: PPUSH
60859: LD_VAR 0 8
60863: PPUSH
60864: LD_INT 0
60866: PPUSH
60867: CALL 62653 0 3
// end ;
60871: GO 60769
60873: POP
60874: POP
// if enchidnas then
60875: LD_VAR 0 4
60879: IFFALSE 60946
// for i = 1 to enchidnas do
60881: LD_ADDR_VAR 0 11
60885: PUSH
60886: DOUBLE
60887: LD_INT 1
60889: DEC
60890: ST_TO_ADDR
60891: LD_VAR 0 4
60895: PUSH
60896: FOR_TO
60897: IFFALSE 60944
// begin hc_class = 13 ;
60899: LD_ADDR_OWVAR 28
60903: PUSH
60904: LD_INT 13
60906: ST_TO_ADDR
// hc_gallery =  ;
60907: LD_ADDR_OWVAR 33
60911: PUSH
60912: LD_STRING 
60914: ST_TO_ADDR
// animal := CreateHuman ;
60915: LD_ADDR_VAR 0 12
60919: PUSH
60920: CALL_OW 44
60924: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60925: LD_VAR 0 12
60929: PPUSH
60930: LD_VAR 0 8
60934: PPUSH
60935: LD_INT 0
60937: PPUSH
60938: CALL 62653 0 3
// end ;
60942: GO 60896
60944: POP
60945: POP
// if fishes then
60946: LD_VAR 0 7
60950: IFFALSE 61017
// for i = 1 to fishes do
60952: LD_ADDR_VAR 0 11
60956: PUSH
60957: DOUBLE
60958: LD_INT 1
60960: DEC
60961: ST_TO_ADDR
60962: LD_VAR 0 7
60966: PUSH
60967: FOR_TO
60968: IFFALSE 61015
// begin hc_class = 20 ;
60970: LD_ADDR_OWVAR 28
60974: PUSH
60975: LD_INT 20
60977: ST_TO_ADDR
// hc_gallery =  ;
60978: LD_ADDR_OWVAR 33
60982: PUSH
60983: LD_STRING 
60985: ST_TO_ADDR
// animal := CreateHuman ;
60986: LD_ADDR_VAR 0 12
60990: PUSH
60991: CALL_OW 44
60995: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
60996: LD_VAR 0 12
61000: PPUSH
61001: LD_VAR 0 9
61005: PPUSH
61006: LD_INT 0
61008: PPUSH
61009: CALL 62653 0 3
// end ;
61013: GO 60967
61015: POP
61016: POP
// end ;
61017: LD_VAR 0 10
61021: RET
// export function WantHeal ( sci , unit ) ; begin
61022: LD_INT 0
61024: PPUSH
// if GetTaskList ( sci ) > 0 then
61025: LD_VAR 0 1
61029: PPUSH
61030: CALL_OW 437
61034: PUSH
61035: LD_INT 0
61037: GREATER
61038: IFFALSE 61108
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
61040: LD_VAR 0 1
61044: PPUSH
61045: CALL_OW 437
61049: PUSH
61050: LD_INT 1
61052: ARRAY
61053: PUSH
61054: LD_INT 1
61056: ARRAY
61057: PUSH
61058: LD_STRING l
61060: EQUAL
61061: PUSH
61062: LD_VAR 0 1
61066: PPUSH
61067: CALL_OW 437
61071: PUSH
61072: LD_INT 1
61074: ARRAY
61075: PUSH
61076: LD_INT 4
61078: ARRAY
61079: PUSH
61080: LD_VAR 0 2
61084: EQUAL
61085: AND
61086: IFFALSE 61098
// result := true else
61088: LD_ADDR_VAR 0 3
61092: PUSH
61093: LD_INT 1
61095: ST_TO_ADDR
61096: GO 61106
// result := false ;
61098: LD_ADDR_VAR 0 3
61102: PUSH
61103: LD_INT 0
61105: ST_TO_ADDR
// end else
61106: GO 61116
// result := false ;
61108: LD_ADDR_VAR 0 3
61112: PUSH
61113: LD_INT 0
61115: ST_TO_ADDR
// end ;
61116: LD_VAR 0 3
61120: RET
// export function HealTarget ( sci ) ; begin
61121: LD_INT 0
61123: PPUSH
// if not sci then
61124: LD_VAR 0 1
61128: NOT
61129: IFFALSE 61133
// exit ;
61131: GO 61198
// result := 0 ;
61133: LD_ADDR_VAR 0 2
61137: PUSH
61138: LD_INT 0
61140: ST_TO_ADDR
// if GetTaskList ( sci ) then
61141: LD_VAR 0 1
61145: PPUSH
61146: CALL_OW 437
61150: IFFALSE 61198
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
61152: LD_VAR 0 1
61156: PPUSH
61157: CALL_OW 437
61161: PUSH
61162: LD_INT 1
61164: ARRAY
61165: PUSH
61166: LD_INT 1
61168: ARRAY
61169: PUSH
61170: LD_STRING l
61172: EQUAL
61173: IFFALSE 61198
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
61175: LD_ADDR_VAR 0 2
61179: PUSH
61180: LD_VAR 0 1
61184: PPUSH
61185: CALL_OW 437
61189: PUSH
61190: LD_INT 1
61192: ARRAY
61193: PUSH
61194: LD_INT 4
61196: ARRAY
61197: ST_TO_ADDR
// end ;
61198: LD_VAR 0 2
61202: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
61203: LD_INT 0
61205: PPUSH
61206: PPUSH
61207: PPUSH
61208: PPUSH
// if not base_units then
61209: LD_VAR 0 1
61213: NOT
61214: IFFALSE 61218
// exit ;
61216: GO 61305
// result := false ;
61218: LD_ADDR_VAR 0 2
61222: PUSH
61223: LD_INT 0
61225: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
61226: LD_ADDR_VAR 0 5
61230: PUSH
61231: LD_VAR 0 1
61235: PPUSH
61236: LD_INT 21
61238: PUSH
61239: LD_INT 3
61241: PUSH
61242: EMPTY
61243: LIST
61244: LIST
61245: PPUSH
61246: CALL_OW 72
61250: ST_TO_ADDR
// if not tmp then
61251: LD_VAR 0 5
61255: NOT
61256: IFFALSE 61260
// exit ;
61258: GO 61305
// for i in tmp do
61260: LD_ADDR_VAR 0 3
61264: PUSH
61265: LD_VAR 0 5
61269: PUSH
61270: FOR_IN
61271: IFFALSE 61303
// begin result := EnemyInRange ( i , 22 ) ;
61273: LD_ADDR_VAR 0 2
61277: PUSH
61278: LD_VAR 0 3
61282: PPUSH
61283: LD_INT 22
61285: PPUSH
61286: CALL 59541 0 2
61290: ST_TO_ADDR
// if result then
61291: LD_VAR 0 2
61295: IFFALSE 61301
// exit ;
61297: POP
61298: POP
61299: GO 61305
// end ;
61301: GO 61270
61303: POP
61304: POP
// end ;
61305: LD_VAR 0 2
61309: RET
// export function FilterByTag ( units , tag ) ; begin
61310: LD_INT 0
61312: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
61313: LD_ADDR_VAR 0 3
61317: PUSH
61318: LD_VAR 0 1
61322: PPUSH
61323: LD_INT 120
61325: PUSH
61326: LD_VAR 0 2
61330: PUSH
61331: EMPTY
61332: LIST
61333: LIST
61334: PPUSH
61335: CALL_OW 72
61339: ST_TO_ADDR
// end ;
61340: LD_VAR 0 3
61344: RET
// export function IsDriver ( un ) ; begin
61345: LD_INT 0
61347: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
61348: LD_ADDR_VAR 0 2
61352: PUSH
61353: LD_VAR 0 1
61357: PUSH
61358: LD_INT 55
61360: PUSH
61361: EMPTY
61362: LIST
61363: PPUSH
61364: CALL_OW 69
61368: IN
61369: ST_TO_ADDR
// end ;
61370: LD_VAR 0 2
61374: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
61375: LD_INT 0
61377: PPUSH
61378: PPUSH
// list := [ ] ;
61379: LD_ADDR_VAR 0 5
61383: PUSH
61384: EMPTY
61385: ST_TO_ADDR
// case d of 0 :
61386: LD_VAR 0 3
61390: PUSH
61391: LD_INT 0
61393: DOUBLE
61394: EQUAL
61395: IFTRUE 61399
61397: GO 61532
61399: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
61400: LD_ADDR_VAR 0 5
61404: PUSH
61405: LD_VAR 0 1
61409: PUSH
61410: LD_INT 4
61412: MINUS
61413: PUSH
61414: LD_VAR 0 2
61418: PUSH
61419: LD_INT 4
61421: MINUS
61422: PUSH
61423: LD_INT 2
61425: PUSH
61426: EMPTY
61427: LIST
61428: LIST
61429: LIST
61430: PUSH
61431: LD_VAR 0 1
61435: PUSH
61436: LD_INT 3
61438: MINUS
61439: PUSH
61440: LD_VAR 0 2
61444: PUSH
61445: LD_INT 1
61447: PUSH
61448: EMPTY
61449: LIST
61450: LIST
61451: LIST
61452: PUSH
61453: LD_VAR 0 1
61457: PUSH
61458: LD_INT 4
61460: PLUS
61461: PUSH
61462: LD_VAR 0 2
61466: PUSH
61467: LD_INT 4
61469: PUSH
61470: EMPTY
61471: LIST
61472: LIST
61473: LIST
61474: PUSH
61475: LD_VAR 0 1
61479: PUSH
61480: LD_INT 3
61482: PLUS
61483: PUSH
61484: LD_VAR 0 2
61488: PUSH
61489: LD_INT 3
61491: PLUS
61492: PUSH
61493: LD_INT 5
61495: PUSH
61496: EMPTY
61497: LIST
61498: LIST
61499: LIST
61500: PUSH
61501: LD_VAR 0 1
61505: PUSH
61506: LD_VAR 0 2
61510: PUSH
61511: LD_INT 4
61513: PLUS
61514: PUSH
61515: LD_INT 0
61517: PUSH
61518: EMPTY
61519: LIST
61520: LIST
61521: LIST
61522: PUSH
61523: EMPTY
61524: LIST
61525: LIST
61526: LIST
61527: LIST
61528: LIST
61529: ST_TO_ADDR
// end ; 1 :
61530: GO 62230
61532: LD_INT 1
61534: DOUBLE
61535: EQUAL
61536: IFTRUE 61540
61538: GO 61673
61540: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
61541: LD_ADDR_VAR 0 5
61545: PUSH
61546: LD_VAR 0 1
61550: PUSH
61551: LD_VAR 0 2
61555: PUSH
61556: LD_INT 4
61558: MINUS
61559: PUSH
61560: LD_INT 3
61562: PUSH
61563: EMPTY
61564: LIST
61565: LIST
61566: LIST
61567: PUSH
61568: LD_VAR 0 1
61572: PUSH
61573: LD_INT 3
61575: MINUS
61576: PUSH
61577: LD_VAR 0 2
61581: PUSH
61582: LD_INT 3
61584: MINUS
61585: PUSH
61586: LD_INT 2
61588: PUSH
61589: EMPTY
61590: LIST
61591: LIST
61592: LIST
61593: PUSH
61594: LD_VAR 0 1
61598: PUSH
61599: LD_INT 4
61601: MINUS
61602: PUSH
61603: LD_VAR 0 2
61607: PUSH
61608: LD_INT 1
61610: PUSH
61611: EMPTY
61612: LIST
61613: LIST
61614: LIST
61615: PUSH
61616: LD_VAR 0 1
61620: PUSH
61621: LD_VAR 0 2
61625: PUSH
61626: LD_INT 3
61628: PLUS
61629: PUSH
61630: LD_INT 0
61632: PUSH
61633: EMPTY
61634: LIST
61635: LIST
61636: LIST
61637: PUSH
61638: LD_VAR 0 1
61642: PUSH
61643: LD_INT 4
61645: PLUS
61646: PUSH
61647: LD_VAR 0 2
61651: PUSH
61652: LD_INT 4
61654: PLUS
61655: PUSH
61656: LD_INT 5
61658: PUSH
61659: EMPTY
61660: LIST
61661: LIST
61662: LIST
61663: PUSH
61664: EMPTY
61665: LIST
61666: LIST
61667: LIST
61668: LIST
61669: LIST
61670: ST_TO_ADDR
// end ; 2 :
61671: GO 62230
61673: LD_INT 2
61675: DOUBLE
61676: EQUAL
61677: IFTRUE 61681
61679: GO 61810
61681: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
61682: LD_ADDR_VAR 0 5
61686: PUSH
61687: LD_VAR 0 1
61691: PUSH
61692: LD_VAR 0 2
61696: PUSH
61697: LD_INT 3
61699: MINUS
61700: PUSH
61701: LD_INT 3
61703: PUSH
61704: EMPTY
61705: LIST
61706: LIST
61707: LIST
61708: PUSH
61709: LD_VAR 0 1
61713: PUSH
61714: LD_INT 4
61716: PLUS
61717: PUSH
61718: LD_VAR 0 2
61722: PUSH
61723: LD_INT 4
61725: PUSH
61726: EMPTY
61727: LIST
61728: LIST
61729: LIST
61730: PUSH
61731: LD_VAR 0 1
61735: PUSH
61736: LD_VAR 0 2
61740: PUSH
61741: LD_INT 4
61743: PLUS
61744: PUSH
61745: LD_INT 0
61747: PUSH
61748: EMPTY
61749: LIST
61750: LIST
61751: LIST
61752: PUSH
61753: LD_VAR 0 1
61757: PUSH
61758: LD_INT 3
61760: MINUS
61761: PUSH
61762: LD_VAR 0 2
61766: PUSH
61767: LD_INT 1
61769: PUSH
61770: EMPTY
61771: LIST
61772: LIST
61773: LIST
61774: PUSH
61775: LD_VAR 0 1
61779: PUSH
61780: LD_INT 4
61782: MINUS
61783: PUSH
61784: LD_VAR 0 2
61788: PUSH
61789: LD_INT 4
61791: MINUS
61792: PUSH
61793: LD_INT 2
61795: PUSH
61796: EMPTY
61797: LIST
61798: LIST
61799: LIST
61800: PUSH
61801: EMPTY
61802: LIST
61803: LIST
61804: LIST
61805: LIST
61806: LIST
61807: ST_TO_ADDR
// end ; 3 :
61808: GO 62230
61810: LD_INT 3
61812: DOUBLE
61813: EQUAL
61814: IFTRUE 61818
61816: GO 61951
61818: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
61819: LD_ADDR_VAR 0 5
61823: PUSH
61824: LD_VAR 0 1
61828: PUSH
61829: LD_INT 3
61831: PLUS
61832: PUSH
61833: LD_VAR 0 2
61837: PUSH
61838: LD_INT 4
61840: PUSH
61841: EMPTY
61842: LIST
61843: LIST
61844: LIST
61845: PUSH
61846: LD_VAR 0 1
61850: PUSH
61851: LD_INT 4
61853: PLUS
61854: PUSH
61855: LD_VAR 0 2
61859: PUSH
61860: LD_INT 4
61862: PLUS
61863: PUSH
61864: LD_INT 5
61866: PUSH
61867: EMPTY
61868: LIST
61869: LIST
61870: LIST
61871: PUSH
61872: LD_VAR 0 1
61876: PUSH
61877: LD_INT 4
61879: MINUS
61880: PUSH
61881: LD_VAR 0 2
61885: PUSH
61886: LD_INT 1
61888: PUSH
61889: EMPTY
61890: LIST
61891: LIST
61892: LIST
61893: PUSH
61894: LD_VAR 0 1
61898: PUSH
61899: LD_VAR 0 2
61903: PUSH
61904: LD_INT 4
61906: MINUS
61907: PUSH
61908: LD_INT 3
61910: PUSH
61911: EMPTY
61912: LIST
61913: LIST
61914: LIST
61915: PUSH
61916: LD_VAR 0 1
61920: PUSH
61921: LD_INT 3
61923: MINUS
61924: PUSH
61925: LD_VAR 0 2
61929: PUSH
61930: LD_INT 3
61932: MINUS
61933: PUSH
61934: LD_INT 2
61936: PUSH
61937: EMPTY
61938: LIST
61939: LIST
61940: LIST
61941: PUSH
61942: EMPTY
61943: LIST
61944: LIST
61945: LIST
61946: LIST
61947: LIST
61948: ST_TO_ADDR
// end ; 4 :
61949: GO 62230
61951: LD_INT 4
61953: DOUBLE
61954: EQUAL
61955: IFTRUE 61959
61957: GO 62092
61959: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
61960: LD_ADDR_VAR 0 5
61964: PUSH
61965: LD_VAR 0 1
61969: PUSH
61970: LD_VAR 0 2
61974: PUSH
61975: LD_INT 4
61977: PLUS
61978: PUSH
61979: LD_INT 0
61981: PUSH
61982: EMPTY
61983: LIST
61984: LIST
61985: LIST
61986: PUSH
61987: LD_VAR 0 1
61991: PUSH
61992: LD_INT 3
61994: PLUS
61995: PUSH
61996: LD_VAR 0 2
62000: PUSH
62001: LD_INT 3
62003: PLUS
62004: PUSH
62005: LD_INT 5
62007: PUSH
62008: EMPTY
62009: LIST
62010: LIST
62011: LIST
62012: PUSH
62013: LD_VAR 0 1
62017: PUSH
62018: LD_INT 4
62020: PLUS
62021: PUSH
62022: LD_VAR 0 2
62026: PUSH
62027: LD_INT 4
62029: PUSH
62030: EMPTY
62031: LIST
62032: LIST
62033: LIST
62034: PUSH
62035: LD_VAR 0 1
62039: PUSH
62040: LD_VAR 0 2
62044: PUSH
62045: LD_INT 3
62047: MINUS
62048: PUSH
62049: LD_INT 3
62051: PUSH
62052: EMPTY
62053: LIST
62054: LIST
62055: LIST
62056: PUSH
62057: LD_VAR 0 1
62061: PUSH
62062: LD_INT 4
62064: MINUS
62065: PUSH
62066: LD_VAR 0 2
62070: PUSH
62071: LD_INT 4
62073: MINUS
62074: PUSH
62075: LD_INT 2
62077: PUSH
62078: EMPTY
62079: LIST
62080: LIST
62081: LIST
62082: PUSH
62083: EMPTY
62084: LIST
62085: LIST
62086: LIST
62087: LIST
62088: LIST
62089: ST_TO_ADDR
// end ; 5 :
62090: GO 62230
62092: LD_INT 5
62094: DOUBLE
62095: EQUAL
62096: IFTRUE 62100
62098: GO 62229
62100: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
62101: LD_ADDR_VAR 0 5
62105: PUSH
62106: LD_VAR 0 1
62110: PUSH
62111: LD_INT 4
62113: MINUS
62114: PUSH
62115: LD_VAR 0 2
62119: PUSH
62120: LD_INT 1
62122: PUSH
62123: EMPTY
62124: LIST
62125: LIST
62126: LIST
62127: PUSH
62128: LD_VAR 0 1
62132: PUSH
62133: LD_VAR 0 2
62137: PUSH
62138: LD_INT 4
62140: MINUS
62141: PUSH
62142: LD_INT 3
62144: PUSH
62145: EMPTY
62146: LIST
62147: LIST
62148: LIST
62149: PUSH
62150: LD_VAR 0 1
62154: PUSH
62155: LD_INT 4
62157: PLUS
62158: PUSH
62159: LD_VAR 0 2
62163: PUSH
62164: LD_INT 4
62166: PLUS
62167: PUSH
62168: LD_INT 5
62170: PUSH
62171: EMPTY
62172: LIST
62173: LIST
62174: LIST
62175: PUSH
62176: LD_VAR 0 1
62180: PUSH
62181: LD_INT 3
62183: PLUS
62184: PUSH
62185: LD_VAR 0 2
62189: PUSH
62190: LD_INT 4
62192: PUSH
62193: EMPTY
62194: LIST
62195: LIST
62196: LIST
62197: PUSH
62198: LD_VAR 0 1
62202: PUSH
62203: LD_VAR 0 2
62207: PUSH
62208: LD_INT 3
62210: PLUS
62211: PUSH
62212: LD_INT 0
62214: PUSH
62215: EMPTY
62216: LIST
62217: LIST
62218: LIST
62219: PUSH
62220: EMPTY
62221: LIST
62222: LIST
62223: LIST
62224: LIST
62225: LIST
62226: ST_TO_ADDR
// end ; end ;
62227: GO 62230
62229: POP
// result := list ;
62230: LD_ADDR_VAR 0 4
62234: PUSH
62235: LD_VAR 0 5
62239: ST_TO_ADDR
// end ;
62240: LD_VAR 0 4
62244: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
62245: LD_INT 0
62247: PPUSH
62248: PPUSH
62249: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
62250: LD_VAR 0 1
62254: NOT
62255: PUSH
62256: LD_VAR 0 2
62260: PUSH
62261: LD_INT 1
62263: PUSH
62264: LD_INT 2
62266: PUSH
62267: LD_INT 3
62269: PUSH
62270: LD_INT 4
62272: PUSH
62273: EMPTY
62274: LIST
62275: LIST
62276: LIST
62277: LIST
62278: IN
62279: NOT
62280: OR
62281: IFFALSE 62285
// exit ;
62283: GO 62377
// tmp := [ ] ;
62285: LD_ADDR_VAR 0 5
62289: PUSH
62290: EMPTY
62291: ST_TO_ADDR
// for i in units do
62292: LD_ADDR_VAR 0 4
62296: PUSH
62297: LD_VAR 0 1
62301: PUSH
62302: FOR_IN
62303: IFFALSE 62346
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
62305: LD_ADDR_VAR 0 5
62309: PUSH
62310: LD_VAR 0 5
62314: PPUSH
62315: LD_VAR 0 5
62319: PUSH
62320: LD_INT 1
62322: PLUS
62323: PPUSH
62324: LD_VAR 0 4
62328: PPUSH
62329: LD_VAR 0 2
62333: PPUSH
62334: CALL_OW 259
62338: PPUSH
62339: CALL_OW 2
62343: ST_TO_ADDR
62344: GO 62302
62346: POP
62347: POP
// if not tmp then
62348: LD_VAR 0 5
62352: NOT
62353: IFFALSE 62357
// exit ;
62355: GO 62377
// result := SortListByListDesc ( units , tmp ) ;
62357: LD_ADDR_VAR 0 3
62361: PUSH
62362: LD_VAR 0 1
62366: PPUSH
62367: LD_VAR 0 5
62371: PPUSH
62372: CALL_OW 77
62376: ST_TO_ADDR
// end ;
62377: LD_VAR 0 3
62381: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
62382: LD_INT 0
62384: PPUSH
62385: PPUSH
62386: PPUSH
// result := false ;
62387: LD_ADDR_VAR 0 3
62391: PUSH
62392: LD_INT 0
62394: ST_TO_ADDR
// x := GetX ( building ) ;
62395: LD_ADDR_VAR 0 4
62399: PUSH
62400: LD_VAR 0 2
62404: PPUSH
62405: CALL_OW 250
62409: ST_TO_ADDR
// y := GetY ( building ) ;
62410: LD_ADDR_VAR 0 5
62414: PUSH
62415: LD_VAR 0 2
62419: PPUSH
62420: CALL_OW 251
62424: ST_TO_ADDR
// if not building or not x or not y then
62425: LD_VAR 0 2
62429: NOT
62430: PUSH
62431: LD_VAR 0 4
62435: NOT
62436: OR
62437: PUSH
62438: LD_VAR 0 5
62442: NOT
62443: OR
62444: IFFALSE 62448
// exit ;
62446: GO 62540
// if GetTaskList ( unit ) then
62448: LD_VAR 0 1
62452: PPUSH
62453: CALL_OW 437
62457: IFFALSE 62540
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
62459: LD_STRING e
62461: PUSH
62462: LD_VAR 0 1
62466: PPUSH
62467: CALL_OW 437
62471: PUSH
62472: LD_INT 1
62474: ARRAY
62475: PUSH
62476: LD_INT 1
62478: ARRAY
62479: EQUAL
62480: PUSH
62481: LD_VAR 0 4
62485: PUSH
62486: LD_VAR 0 1
62490: PPUSH
62491: CALL_OW 437
62495: PUSH
62496: LD_INT 1
62498: ARRAY
62499: PUSH
62500: LD_INT 2
62502: ARRAY
62503: EQUAL
62504: AND
62505: PUSH
62506: LD_VAR 0 5
62510: PUSH
62511: LD_VAR 0 1
62515: PPUSH
62516: CALL_OW 437
62520: PUSH
62521: LD_INT 1
62523: ARRAY
62524: PUSH
62525: LD_INT 3
62527: ARRAY
62528: EQUAL
62529: AND
62530: IFFALSE 62540
// result := true end ;
62532: LD_ADDR_VAR 0 3
62536: PUSH
62537: LD_INT 1
62539: ST_TO_ADDR
// end ;
62540: LD_VAR 0 3
62544: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
62545: LD_INT 0
62547: PPUSH
// result := false ;
62548: LD_ADDR_VAR 0 4
62552: PUSH
62553: LD_INT 0
62555: ST_TO_ADDR
// if GetTaskList ( unit ) then
62556: LD_VAR 0 1
62560: PPUSH
62561: CALL_OW 437
62565: IFFALSE 62648
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
62567: LD_STRING M
62569: PUSH
62570: LD_VAR 0 1
62574: PPUSH
62575: CALL_OW 437
62579: PUSH
62580: LD_INT 1
62582: ARRAY
62583: PUSH
62584: LD_INT 1
62586: ARRAY
62587: EQUAL
62588: PUSH
62589: LD_VAR 0 2
62593: PUSH
62594: LD_VAR 0 1
62598: PPUSH
62599: CALL_OW 437
62603: PUSH
62604: LD_INT 1
62606: ARRAY
62607: PUSH
62608: LD_INT 2
62610: ARRAY
62611: EQUAL
62612: AND
62613: PUSH
62614: LD_VAR 0 3
62618: PUSH
62619: LD_VAR 0 1
62623: PPUSH
62624: CALL_OW 437
62628: PUSH
62629: LD_INT 1
62631: ARRAY
62632: PUSH
62633: LD_INT 3
62635: ARRAY
62636: EQUAL
62637: AND
62638: IFFALSE 62648
// result := true ;
62640: LD_ADDR_VAR 0 4
62644: PUSH
62645: LD_INT 1
62647: ST_TO_ADDR
// end ; end ;
62648: LD_VAR 0 4
62652: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
62653: LD_INT 0
62655: PPUSH
62656: PPUSH
62657: PPUSH
62658: PPUSH
// if not unit or not area then
62659: LD_VAR 0 1
62663: NOT
62664: PUSH
62665: LD_VAR 0 2
62669: NOT
62670: OR
62671: IFFALSE 62675
// exit ;
62673: GO 62839
// tmp := AreaToList ( area , i ) ;
62675: LD_ADDR_VAR 0 6
62679: PUSH
62680: LD_VAR 0 2
62684: PPUSH
62685: LD_VAR 0 5
62689: PPUSH
62690: CALL_OW 517
62694: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
62695: LD_ADDR_VAR 0 5
62699: PUSH
62700: DOUBLE
62701: LD_INT 1
62703: DEC
62704: ST_TO_ADDR
62705: LD_VAR 0 6
62709: PUSH
62710: LD_INT 1
62712: ARRAY
62713: PUSH
62714: FOR_TO
62715: IFFALSE 62837
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
62717: LD_ADDR_VAR 0 7
62721: PUSH
62722: LD_VAR 0 6
62726: PUSH
62727: LD_INT 1
62729: ARRAY
62730: PUSH
62731: LD_VAR 0 5
62735: ARRAY
62736: PUSH
62737: LD_VAR 0 6
62741: PUSH
62742: LD_INT 2
62744: ARRAY
62745: PUSH
62746: LD_VAR 0 5
62750: ARRAY
62751: PUSH
62752: EMPTY
62753: LIST
62754: LIST
62755: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
62756: LD_VAR 0 7
62760: PUSH
62761: LD_INT 1
62763: ARRAY
62764: PPUSH
62765: LD_VAR 0 7
62769: PUSH
62770: LD_INT 2
62772: ARRAY
62773: PPUSH
62774: CALL_OW 428
62778: PUSH
62779: LD_INT 0
62781: EQUAL
62782: IFFALSE 62835
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
62784: LD_VAR 0 1
62788: PPUSH
62789: LD_VAR 0 7
62793: PUSH
62794: LD_INT 1
62796: ARRAY
62797: PPUSH
62798: LD_VAR 0 7
62802: PUSH
62803: LD_INT 2
62805: ARRAY
62806: PPUSH
62807: LD_VAR 0 3
62811: PPUSH
62812: CALL_OW 48
// result := IsPlaced ( unit ) ;
62816: LD_ADDR_VAR 0 4
62820: PUSH
62821: LD_VAR 0 1
62825: PPUSH
62826: CALL_OW 305
62830: ST_TO_ADDR
// exit ;
62831: POP
62832: POP
62833: GO 62839
// end ; end ;
62835: GO 62714
62837: POP
62838: POP
// end ;
62839: LD_VAR 0 4
62843: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
62844: LD_INT 0
62846: PPUSH
62847: PPUSH
62848: PPUSH
// if not side or side > 8 then
62849: LD_VAR 0 1
62853: NOT
62854: PUSH
62855: LD_VAR 0 1
62859: PUSH
62860: LD_INT 8
62862: GREATER
62863: OR
62864: IFFALSE 62868
// exit ;
62866: GO 63055
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
62868: LD_ADDR_VAR 0 4
62872: PUSH
62873: LD_INT 22
62875: PUSH
62876: LD_VAR 0 1
62880: PUSH
62881: EMPTY
62882: LIST
62883: LIST
62884: PUSH
62885: LD_INT 21
62887: PUSH
62888: LD_INT 3
62890: PUSH
62891: EMPTY
62892: LIST
62893: LIST
62894: PUSH
62895: EMPTY
62896: LIST
62897: LIST
62898: PPUSH
62899: CALL_OW 69
62903: ST_TO_ADDR
// if not tmp then
62904: LD_VAR 0 4
62908: NOT
62909: IFFALSE 62913
// exit ;
62911: GO 63055
// enable_addtolog := true ;
62913: LD_ADDR_OWVAR 81
62917: PUSH
62918: LD_INT 1
62920: ST_TO_ADDR
// AddToLog ( [ ) ;
62921: LD_STRING [
62923: PPUSH
62924: CALL_OW 561
// for i in tmp do
62928: LD_ADDR_VAR 0 3
62932: PUSH
62933: LD_VAR 0 4
62937: PUSH
62938: FOR_IN
62939: IFFALSE 63046
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
62941: LD_STRING [
62943: PUSH
62944: LD_VAR 0 3
62948: PPUSH
62949: CALL_OW 266
62953: STR
62954: PUSH
62955: LD_STRING , 
62957: STR
62958: PUSH
62959: LD_VAR 0 3
62963: PPUSH
62964: CALL_OW 250
62968: STR
62969: PUSH
62970: LD_STRING , 
62972: STR
62973: PUSH
62974: LD_VAR 0 3
62978: PPUSH
62979: CALL_OW 251
62983: STR
62984: PUSH
62985: LD_STRING , 
62987: STR
62988: PUSH
62989: LD_VAR 0 3
62993: PPUSH
62994: CALL_OW 254
62998: STR
62999: PUSH
63000: LD_STRING , 
63002: STR
63003: PUSH
63004: LD_VAR 0 3
63008: PPUSH
63009: LD_INT 1
63011: PPUSH
63012: CALL_OW 268
63016: STR
63017: PUSH
63018: LD_STRING , 
63020: STR
63021: PUSH
63022: LD_VAR 0 3
63026: PPUSH
63027: LD_INT 2
63029: PPUSH
63030: CALL_OW 268
63034: STR
63035: PUSH
63036: LD_STRING ],
63038: STR
63039: PPUSH
63040: CALL_OW 561
// end ;
63044: GO 62938
63046: POP
63047: POP
// AddToLog ( ]; ) ;
63048: LD_STRING ];
63050: PPUSH
63051: CALL_OW 561
// end ;
63055: LD_VAR 0 2
63059: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
63060: LD_INT 0
63062: PPUSH
63063: PPUSH
63064: PPUSH
63065: PPUSH
63066: PPUSH
// if not area or not rate or not max then
63067: LD_VAR 0 1
63071: NOT
63072: PUSH
63073: LD_VAR 0 2
63077: NOT
63078: OR
63079: PUSH
63080: LD_VAR 0 4
63084: NOT
63085: OR
63086: IFFALSE 63090
// exit ;
63088: GO 63279
// while 1 do
63090: LD_INT 1
63092: IFFALSE 63279
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
63094: LD_ADDR_VAR 0 9
63098: PUSH
63099: LD_VAR 0 1
63103: PPUSH
63104: LD_INT 1
63106: PPUSH
63107: CALL_OW 287
63111: PUSH
63112: LD_INT 10
63114: MUL
63115: ST_TO_ADDR
// r := rate / 10 ;
63116: LD_ADDR_VAR 0 7
63120: PUSH
63121: LD_VAR 0 2
63125: PUSH
63126: LD_INT 10
63128: DIVREAL
63129: ST_TO_ADDR
// time := 1 1$00 ;
63130: LD_ADDR_VAR 0 8
63134: PUSH
63135: LD_INT 2100
63137: ST_TO_ADDR
// if amount < min then
63138: LD_VAR 0 9
63142: PUSH
63143: LD_VAR 0 3
63147: LESS
63148: IFFALSE 63166
// r := r * 2 else
63150: LD_ADDR_VAR 0 7
63154: PUSH
63155: LD_VAR 0 7
63159: PUSH
63160: LD_INT 2
63162: MUL
63163: ST_TO_ADDR
63164: GO 63192
// if amount > max then
63166: LD_VAR 0 9
63170: PUSH
63171: LD_VAR 0 4
63175: GREATER
63176: IFFALSE 63192
// r := r / 2 ;
63178: LD_ADDR_VAR 0 7
63182: PUSH
63183: LD_VAR 0 7
63187: PUSH
63188: LD_INT 2
63190: DIVREAL
63191: ST_TO_ADDR
// time := time / r ;
63192: LD_ADDR_VAR 0 8
63196: PUSH
63197: LD_VAR 0 8
63201: PUSH
63202: LD_VAR 0 7
63206: DIVREAL
63207: ST_TO_ADDR
// if time < 0 then
63208: LD_VAR 0 8
63212: PUSH
63213: LD_INT 0
63215: LESS
63216: IFFALSE 63233
// time := time * - 1 ;
63218: LD_ADDR_VAR 0 8
63222: PUSH
63223: LD_VAR 0 8
63227: PUSH
63228: LD_INT 1
63230: NEG
63231: MUL
63232: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
63233: LD_VAR 0 8
63237: PUSH
63238: LD_INT 35
63240: PPUSH
63241: LD_INT 875
63243: PPUSH
63244: CALL_OW 12
63248: PLUS
63249: PPUSH
63250: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
63254: LD_INT 1
63256: PPUSH
63257: LD_INT 5
63259: PPUSH
63260: CALL_OW 12
63264: PPUSH
63265: LD_VAR 0 1
63269: PPUSH
63270: LD_INT 1
63272: PPUSH
63273: CALL_OW 55
// end ;
63277: GO 63090
// end ;
63279: LD_VAR 0 5
63283: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
63284: LD_INT 0
63286: PPUSH
63287: PPUSH
63288: PPUSH
63289: PPUSH
63290: PPUSH
63291: PPUSH
63292: PPUSH
63293: PPUSH
// if not turrets or not factories then
63294: LD_VAR 0 1
63298: NOT
63299: PUSH
63300: LD_VAR 0 2
63304: NOT
63305: OR
63306: IFFALSE 63310
// exit ;
63308: GO 63617
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
63310: LD_ADDR_VAR 0 10
63314: PUSH
63315: LD_INT 5
63317: PUSH
63318: LD_INT 6
63320: PUSH
63321: EMPTY
63322: LIST
63323: LIST
63324: PUSH
63325: LD_INT 2
63327: PUSH
63328: LD_INT 4
63330: PUSH
63331: EMPTY
63332: LIST
63333: LIST
63334: PUSH
63335: LD_INT 3
63337: PUSH
63338: LD_INT 5
63340: PUSH
63341: EMPTY
63342: LIST
63343: LIST
63344: PUSH
63345: EMPTY
63346: LIST
63347: LIST
63348: LIST
63349: PUSH
63350: LD_INT 24
63352: PUSH
63353: LD_INT 25
63355: PUSH
63356: EMPTY
63357: LIST
63358: LIST
63359: PUSH
63360: LD_INT 23
63362: PUSH
63363: LD_INT 27
63365: PUSH
63366: EMPTY
63367: LIST
63368: LIST
63369: PUSH
63370: EMPTY
63371: LIST
63372: LIST
63373: PUSH
63374: LD_INT 42
63376: PUSH
63377: LD_INT 43
63379: PUSH
63380: EMPTY
63381: LIST
63382: LIST
63383: PUSH
63384: LD_INT 44
63386: PUSH
63387: LD_INT 46
63389: PUSH
63390: EMPTY
63391: LIST
63392: LIST
63393: PUSH
63394: LD_INT 45
63396: PUSH
63397: LD_INT 47
63399: PUSH
63400: EMPTY
63401: LIST
63402: LIST
63403: PUSH
63404: EMPTY
63405: LIST
63406: LIST
63407: LIST
63408: PUSH
63409: EMPTY
63410: LIST
63411: LIST
63412: LIST
63413: ST_TO_ADDR
// result := [ ] ;
63414: LD_ADDR_VAR 0 3
63418: PUSH
63419: EMPTY
63420: ST_TO_ADDR
// for i in turrets do
63421: LD_ADDR_VAR 0 4
63425: PUSH
63426: LD_VAR 0 1
63430: PUSH
63431: FOR_IN
63432: IFFALSE 63615
// begin nat := GetNation ( i ) ;
63434: LD_ADDR_VAR 0 7
63438: PUSH
63439: LD_VAR 0 4
63443: PPUSH
63444: CALL_OW 248
63448: ST_TO_ADDR
// weapon := 0 ;
63449: LD_ADDR_VAR 0 8
63453: PUSH
63454: LD_INT 0
63456: ST_TO_ADDR
// if not nat then
63457: LD_VAR 0 7
63461: NOT
63462: IFFALSE 63466
// continue ;
63464: GO 63431
// for j in list [ nat ] do
63466: LD_ADDR_VAR 0 5
63470: PUSH
63471: LD_VAR 0 10
63475: PUSH
63476: LD_VAR 0 7
63480: ARRAY
63481: PUSH
63482: FOR_IN
63483: IFFALSE 63524
// if GetBWeapon ( i ) = j [ 1 ] then
63485: LD_VAR 0 4
63489: PPUSH
63490: CALL_OW 269
63494: PUSH
63495: LD_VAR 0 5
63499: PUSH
63500: LD_INT 1
63502: ARRAY
63503: EQUAL
63504: IFFALSE 63522
// begin weapon := j [ 2 ] ;
63506: LD_ADDR_VAR 0 8
63510: PUSH
63511: LD_VAR 0 5
63515: PUSH
63516: LD_INT 2
63518: ARRAY
63519: ST_TO_ADDR
// break ;
63520: GO 63524
// end ;
63522: GO 63482
63524: POP
63525: POP
// if not weapon then
63526: LD_VAR 0 8
63530: NOT
63531: IFFALSE 63535
// continue ;
63533: GO 63431
// for k in factories do
63535: LD_ADDR_VAR 0 6
63539: PUSH
63540: LD_VAR 0 2
63544: PUSH
63545: FOR_IN
63546: IFFALSE 63611
// begin weapons := AvailableWeaponList ( k ) ;
63548: LD_ADDR_VAR 0 9
63552: PUSH
63553: LD_VAR 0 6
63557: PPUSH
63558: CALL_OW 478
63562: ST_TO_ADDR
// if not weapons then
63563: LD_VAR 0 9
63567: NOT
63568: IFFALSE 63572
// continue ;
63570: GO 63545
// if weapon in weapons then
63572: LD_VAR 0 8
63576: PUSH
63577: LD_VAR 0 9
63581: IN
63582: IFFALSE 63609
// begin result := [ i , weapon ] ;
63584: LD_ADDR_VAR 0 3
63588: PUSH
63589: LD_VAR 0 4
63593: PUSH
63594: LD_VAR 0 8
63598: PUSH
63599: EMPTY
63600: LIST
63601: LIST
63602: ST_TO_ADDR
// exit ;
63603: POP
63604: POP
63605: POP
63606: POP
63607: GO 63617
// end ; end ;
63609: GO 63545
63611: POP
63612: POP
// end ;
63613: GO 63431
63615: POP
63616: POP
// end ;
63617: LD_VAR 0 3
63621: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
63622: LD_INT 0
63624: PPUSH
// if not side or side > 8 then
63625: LD_VAR 0 3
63629: NOT
63630: PUSH
63631: LD_VAR 0 3
63635: PUSH
63636: LD_INT 8
63638: GREATER
63639: OR
63640: IFFALSE 63644
// exit ;
63642: GO 63703
// if not range then
63644: LD_VAR 0 4
63648: NOT
63649: IFFALSE 63660
// range := - 12 ;
63651: LD_ADDR_VAR 0 4
63655: PUSH
63656: LD_INT 12
63658: NEG
63659: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
63660: LD_VAR 0 1
63664: PPUSH
63665: LD_VAR 0 2
63669: PPUSH
63670: LD_VAR 0 3
63674: PPUSH
63675: LD_VAR 0 4
63679: PPUSH
63680: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
63684: LD_VAR 0 1
63688: PPUSH
63689: LD_VAR 0 2
63693: PPUSH
63694: LD_VAR 0 3
63698: PPUSH
63699: CALL_OW 331
// end ;
63703: LD_VAR 0 5
63707: RET
// export function Video ( mode ) ; begin
63708: LD_INT 0
63710: PPUSH
// ingame_video = mode ;
63711: LD_ADDR_OWVAR 52
63715: PUSH
63716: LD_VAR 0 1
63720: ST_TO_ADDR
// interface_hidden = mode ;
63721: LD_ADDR_OWVAR 54
63725: PUSH
63726: LD_VAR 0 1
63730: ST_TO_ADDR
// end ;
63731: LD_VAR 0 2
63735: RET
// export function Join ( array , element ) ; begin
63736: LD_INT 0
63738: PPUSH
// result := Replace ( array , array + 1 , element ) ;
63739: LD_ADDR_VAR 0 3
63743: PUSH
63744: LD_VAR 0 1
63748: PPUSH
63749: LD_VAR 0 1
63753: PUSH
63754: LD_INT 1
63756: PLUS
63757: PPUSH
63758: LD_VAR 0 2
63762: PPUSH
63763: CALL_OW 1
63767: ST_TO_ADDR
// end ;
63768: LD_VAR 0 3
63772: RET
// export function JoinUnion ( array , element ) ; begin
63773: LD_INT 0
63775: PPUSH
// result := array union element ;
63776: LD_ADDR_VAR 0 3
63780: PUSH
63781: LD_VAR 0 1
63785: PUSH
63786: LD_VAR 0 2
63790: UNION
63791: ST_TO_ADDR
// end ;
63792: LD_VAR 0 3
63796: RET
// export function GetBehemoths ( side ) ; begin
63797: LD_INT 0
63799: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
63800: LD_ADDR_VAR 0 2
63804: PUSH
63805: LD_INT 22
63807: PUSH
63808: LD_VAR 0 1
63812: PUSH
63813: EMPTY
63814: LIST
63815: LIST
63816: PUSH
63817: LD_INT 31
63819: PUSH
63820: LD_INT 25
63822: PUSH
63823: EMPTY
63824: LIST
63825: LIST
63826: PUSH
63827: EMPTY
63828: LIST
63829: LIST
63830: PPUSH
63831: CALL_OW 69
63835: ST_TO_ADDR
// end ;
63836: LD_VAR 0 2
63840: RET
// export function Shuffle ( array ) ; var i , index ; begin
63841: LD_INT 0
63843: PPUSH
63844: PPUSH
63845: PPUSH
// result := [ ] ;
63846: LD_ADDR_VAR 0 2
63850: PUSH
63851: EMPTY
63852: ST_TO_ADDR
// if not array then
63853: LD_VAR 0 1
63857: NOT
63858: IFFALSE 63862
// exit ;
63860: GO 63961
// Randomize ;
63862: CALL_OW 10
// for i = array downto 1 do
63866: LD_ADDR_VAR 0 3
63870: PUSH
63871: DOUBLE
63872: LD_VAR 0 1
63876: INC
63877: ST_TO_ADDR
63878: LD_INT 1
63880: PUSH
63881: FOR_DOWNTO
63882: IFFALSE 63959
// begin index := rand ( 1 , array ) ;
63884: LD_ADDR_VAR 0 4
63888: PUSH
63889: LD_INT 1
63891: PPUSH
63892: LD_VAR 0 1
63896: PPUSH
63897: CALL_OW 12
63901: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
63902: LD_ADDR_VAR 0 2
63906: PUSH
63907: LD_VAR 0 2
63911: PPUSH
63912: LD_VAR 0 2
63916: PUSH
63917: LD_INT 1
63919: PLUS
63920: PPUSH
63921: LD_VAR 0 1
63925: PUSH
63926: LD_VAR 0 4
63930: ARRAY
63931: PPUSH
63932: CALL_OW 2
63936: ST_TO_ADDR
// array := Delete ( array , index ) ;
63937: LD_ADDR_VAR 0 1
63941: PUSH
63942: LD_VAR 0 1
63946: PPUSH
63947: LD_VAR 0 4
63951: PPUSH
63952: CALL_OW 3
63956: ST_TO_ADDR
// end ;
63957: GO 63881
63959: POP
63960: POP
// end ;
63961: LD_VAR 0 2
63965: RET
// export function GetBaseMaterials ( base ) ; begin
63966: LD_INT 0
63968: PPUSH
// result := [ 0 , 0 , 0 ] ;
63969: LD_ADDR_VAR 0 2
63973: PUSH
63974: LD_INT 0
63976: PUSH
63977: LD_INT 0
63979: PUSH
63980: LD_INT 0
63982: PUSH
63983: EMPTY
63984: LIST
63985: LIST
63986: LIST
63987: ST_TO_ADDR
// if not base then
63988: LD_VAR 0 1
63992: NOT
63993: IFFALSE 63997
// exit ;
63995: GO 64046
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
63997: LD_ADDR_VAR 0 2
64001: PUSH
64002: LD_VAR 0 1
64006: PPUSH
64007: LD_INT 1
64009: PPUSH
64010: CALL_OW 275
64014: PUSH
64015: LD_VAR 0 1
64019: PPUSH
64020: LD_INT 2
64022: PPUSH
64023: CALL_OW 275
64027: PUSH
64028: LD_VAR 0 1
64032: PPUSH
64033: LD_INT 3
64035: PPUSH
64036: CALL_OW 275
64040: PUSH
64041: EMPTY
64042: LIST
64043: LIST
64044: LIST
64045: ST_TO_ADDR
// end ;
64046: LD_VAR 0 2
64050: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
64051: LD_INT 0
64053: PPUSH
64054: PPUSH
// result := array ;
64055: LD_ADDR_VAR 0 3
64059: PUSH
64060: LD_VAR 0 1
64064: ST_TO_ADDR
// if size > 0 then
64065: LD_VAR 0 2
64069: PUSH
64070: LD_INT 0
64072: GREATER
64073: IFFALSE 64119
// for i := array downto size do
64075: LD_ADDR_VAR 0 4
64079: PUSH
64080: DOUBLE
64081: LD_VAR 0 1
64085: INC
64086: ST_TO_ADDR
64087: LD_VAR 0 2
64091: PUSH
64092: FOR_DOWNTO
64093: IFFALSE 64117
// result := Delete ( result , result ) ;
64095: LD_ADDR_VAR 0 3
64099: PUSH
64100: LD_VAR 0 3
64104: PPUSH
64105: LD_VAR 0 3
64109: PPUSH
64110: CALL_OW 3
64114: ST_TO_ADDR
64115: GO 64092
64117: POP
64118: POP
// end ;
64119: LD_VAR 0 3
64123: RET
// export function ComExit ( unit ) ; var tmp ; begin
64124: LD_INT 0
64126: PPUSH
64127: PPUSH
// if not IsInUnit ( unit ) then
64128: LD_VAR 0 1
64132: PPUSH
64133: CALL_OW 310
64137: NOT
64138: IFFALSE 64142
// exit ;
64140: GO 64202
// tmp := IsInUnit ( unit ) ;
64142: LD_ADDR_VAR 0 3
64146: PUSH
64147: LD_VAR 0 1
64151: PPUSH
64152: CALL_OW 310
64156: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
64157: LD_VAR 0 3
64161: PPUSH
64162: CALL_OW 247
64166: PUSH
64167: LD_INT 2
64169: EQUAL
64170: IFFALSE 64183
// ComExitVehicle ( unit ) else
64172: LD_VAR 0 1
64176: PPUSH
64177: CALL_OW 121
64181: GO 64192
// ComExitBuilding ( unit ) ;
64183: LD_VAR 0 1
64187: PPUSH
64188: CALL_OW 122
// result := tmp ;
64192: LD_ADDR_VAR 0 2
64196: PUSH
64197: LD_VAR 0 3
64201: ST_TO_ADDR
// end ;
64202: LD_VAR 0 2
64206: RET
// export function ComExitAll ( units ) ; var i ; begin
64207: LD_INT 0
64209: PPUSH
64210: PPUSH
// if not units then
64211: LD_VAR 0 1
64215: NOT
64216: IFFALSE 64220
// exit ;
64218: GO 64246
// for i in units do
64220: LD_ADDR_VAR 0 3
64224: PUSH
64225: LD_VAR 0 1
64229: PUSH
64230: FOR_IN
64231: IFFALSE 64244
// ComExit ( i ) ;
64233: LD_VAR 0 3
64237: PPUSH
64238: CALL 64124 0 1
64242: GO 64230
64244: POP
64245: POP
// end ;
64246: LD_VAR 0 2
64250: RET
// export function ResetHc ; begin
64251: LD_INT 0
64253: PPUSH
// InitHc ;
64254: CALL_OW 19
// hc_importance := 0 ;
64258: LD_ADDR_OWVAR 32
64262: PUSH
64263: LD_INT 0
64265: ST_TO_ADDR
// end ;
64266: LD_VAR 0 1
64270: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
64271: LD_INT 0
64273: PPUSH
64274: PPUSH
64275: PPUSH
// _x := ( x1 + x2 ) div 2 ;
64276: LD_ADDR_VAR 0 6
64280: PUSH
64281: LD_VAR 0 1
64285: PUSH
64286: LD_VAR 0 3
64290: PLUS
64291: PUSH
64292: LD_INT 2
64294: DIV
64295: ST_TO_ADDR
// if _x < 0 then
64296: LD_VAR 0 6
64300: PUSH
64301: LD_INT 0
64303: LESS
64304: IFFALSE 64321
// _x := _x * - 1 ;
64306: LD_ADDR_VAR 0 6
64310: PUSH
64311: LD_VAR 0 6
64315: PUSH
64316: LD_INT 1
64318: NEG
64319: MUL
64320: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
64321: LD_ADDR_VAR 0 7
64325: PUSH
64326: LD_VAR 0 2
64330: PUSH
64331: LD_VAR 0 4
64335: PLUS
64336: PUSH
64337: LD_INT 2
64339: DIV
64340: ST_TO_ADDR
// if _y < 0 then
64341: LD_VAR 0 7
64345: PUSH
64346: LD_INT 0
64348: LESS
64349: IFFALSE 64366
// _y := _y * - 1 ;
64351: LD_ADDR_VAR 0 7
64355: PUSH
64356: LD_VAR 0 7
64360: PUSH
64361: LD_INT 1
64363: NEG
64364: MUL
64365: ST_TO_ADDR
// result := [ _x , _y ] ;
64366: LD_ADDR_VAR 0 5
64370: PUSH
64371: LD_VAR 0 6
64375: PUSH
64376: LD_VAR 0 7
64380: PUSH
64381: EMPTY
64382: LIST
64383: LIST
64384: ST_TO_ADDR
// end ;
64385: LD_VAR 0 5
64389: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
64390: LD_INT 0
64392: PPUSH
64393: PPUSH
64394: PPUSH
64395: PPUSH
// task := GetTaskList ( unit ) ;
64396: LD_ADDR_VAR 0 7
64400: PUSH
64401: LD_VAR 0 1
64405: PPUSH
64406: CALL_OW 437
64410: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
64411: LD_VAR 0 7
64415: NOT
64416: PUSH
64417: LD_VAR 0 1
64421: PPUSH
64422: LD_VAR 0 2
64426: PPUSH
64427: CALL_OW 308
64431: NOT
64432: AND
64433: IFFALSE 64437
// exit ;
64435: GO 64555
// if IsInArea ( unit , area ) then
64437: LD_VAR 0 1
64441: PPUSH
64442: LD_VAR 0 2
64446: PPUSH
64447: CALL_OW 308
64451: IFFALSE 64469
// begin ComMoveToArea ( unit , goAway ) ;
64453: LD_VAR 0 1
64457: PPUSH
64458: LD_VAR 0 3
64462: PPUSH
64463: CALL_OW 113
// exit ;
64467: GO 64555
// end ; if task [ 1 ] [ 1 ] <> M then
64469: LD_VAR 0 7
64473: PUSH
64474: LD_INT 1
64476: ARRAY
64477: PUSH
64478: LD_INT 1
64480: ARRAY
64481: PUSH
64482: LD_STRING M
64484: NONEQUAL
64485: IFFALSE 64489
// exit ;
64487: GO 64555
// x := task [ 1 ] [ 2 ] ;
64489: LD_ADDR_VAR 0 5
64493: PUSH
64494: LD_VAR 0 7
64498: PUSH
64499: LD_INT 1
64501: ARRAY
64502: PUSH
64503: LD_INT 2
64505: ARRAY
64506: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
64507: LD_ADDR_VAR 0 6
64511: PUSH
64512: LD_VAR 0 7
64516: PUSH
64517: LD_INT 1
64519: ARRAY
64520: PUSH
64521: LD_INT 3
64523: ARRAY
64524: ST_TO_ADDR
// if InArea ( x , y , area ) then
64525: LD_VAR 0 5
64529: PPUSH
64530: LD_VAR 0 6
64534: PPUSH
64535: LD_VAR 0 2
64539: PPUSH
64540: CALL_OW 309
64544: IFFALSE 64555
// ComStop ( unit ) ;
64546: LD_VAR 0 1
64550: PPUSH
64551: CALL_OW 141
// end ;
64555: LD_VAR 0 4
64559: RET
// export function Abs ( value ) ; begin
64560: LD_INT 0
64562: PPUSH
// result := value ;
64563: LD_ADDR_VAR 0 2
64567: PUSH
64568: LD_VAR 0 1
64572: ST_TO_ADDR
// if value < 0 then
64573: LD_VAR 0 1
64577: PUSH
64578: LD_INT 0
64580: LESS
64581: IFFALSE 64598
// result := value * - 1 ;
64583: LD_ADDR_VAR 0 2
64587: PUSH
64588: LD_VAR 0 1
64592: PUSH
64593: LD_INT 1
64595: NEG
64596: MUL
64597: ST_TO_ADDR
// end ;
64598: LD_VAR 0 2
64602: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
64603: LD_INT 0
64605: PPUSH
64606: PPUSH
64607: PPUSH
64608: PPUSH
64609: PPUSH
64610: PPUSH
64611: PPUSH
64612: PPUSH
// if not unit or not building then
64613: LD_VAR 0 1
64617: NOT
64618: PUSH
64619: LD_VAR 0 2
64623: NOT
64624: OR
64625: IFFALSE 64629
// exit ;
64627: GO 64855
// x := GetX ( building ) ;
64629: LD_ADDR_VAR 0 4
64633: PUSH
64634: LD_VAR 0 2
64638: PPUSH
64639: CALL_OW 250
64643: ST_TO_ADDR
// y := GetY ( building ) ;
64644: LD_ADDR_VAR 0 6
64648: PUSH
64649: LD_VAR 0 2
64653: PPUSH
64654: CALL_OW 251
64658: ST_TO_ADDR
// d := GetDir ( building ) ;
64659: LD_ADDR_VAR 0 8
64663: PUSH
64664: LD_VAR 0 2
64668: PPUSH
64669: CALL_OW 254
64673: ST_TO_ADDR
// r := 4 ;
64674: LD_ADDR_VAR 0 9
64678: PUSH
64679: LD_INT 4
64681: ST_TO_ADDR
// for i := 1 to 5 do
64682: LD_ADDR_VAR 0 10
64686: PUSH
64687: DOUBLE
64688: LD_INT 1
64690: DEC
64691: ST_TO_ADDR
64692: LD_INT 5
64694: PUSH
64695: FOR_TO
64696: IFFALSE 64853
// begin _x := ShiftX ( x , d , r + i ) ;
64698: LD_ADDR_VAR 0 5
64702: PUSH
64703: LD_VAR 0 4
64707: PPUSH
64708: LD_VAR 0 8
64712: PPUSH
64713: LD_VAR 0 9
64717: PUSH
64718: LD_VAR 0 10
64722: PLUS
64723: PPUSH
64724: CALL_OW 272
64728: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
64729: LD_ADDR_VAR 0 7
64733: PUSH
64734: LD_VAR 0 6
64738: PPUSH
64739: LD_VAR 0 8
64743: PPUSH
64744: LD_VAR 0 9
64748: PUSH
64749: LD_VAR 0 10
64753: PLUS
64754: PPUSH
64755: CALL_OW 273
64759: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
64760: LD_VAR 0 5
64764: PPUSH
64765: LD_VAR 0 7
64769: PPUSH
64770: CALL_OW 488
64774: PUSH
64775: LD_VAR 0 5
64779: PPUSH
64780: LD_VAR 0 7
64784: PPUSH
64785: CALL_OW 428
64789: PPUSH
64790: CALL_OW 247
64794: PUSH
64795: LD_INT 3
64797: PUSH
64798: LD_INT 2
64800: PUSH
64801: EMPTY
64802: LIST
64803: LIST
64804: IN
64805: NOT
64806: AND
64807: IFFALSE 64851
// begin ComMoveXY ( unit , _x , _y ) ;
64809: LD_VAR 0 1
64813: PPUSH
64814: LD_VAR 0 5
64818: PPUSH
64819: LD_VAR 0 7
64823: PPUSH
64824: CALL_OW 111
// result := [ _x , _y ] ;
64828: LD_ADDR_VAR 0 3
64832: PUSH
64833: LD_VAR 0 5
64837: PUSH
64838: LD_VAR 0 7
64842: PUSH
64843: EMPTY
64844: LIST
64845: LIST
64846: ST_TO_ADDR
// exit ;
64847: POP
64848: POP
64849: GO 64855
// end ; end ;
64851: GO 64695
64853: POP
64854: POP
// end ;
64855: LD_VAR 0 3
64859: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
64860: LD_INT 0
64862: PPUSH
64863: PPUSH
64864: PPUSH
// result := 0 ;
64865: LD_ADDR_VAR 0 3
64869: PUSH
64870: LD_INT 0
64872: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
64873: LD_VAR 0 1
64877: PUSH
64878: LD_INT 0
64880: LESS
64881: PUSH
64882: LD_VAR 0 1
64886: PUSH
64887: LD_INT 8
64889: GREATER
64890: OR
64891: PUSH
64892: LD_VAR 0 2
64896: PUSH
64897: LD_INT 0
64899: LESS
64900: OR
64901: PUSH
64902: LD_VAR 0 2
64906: PUSH
64907: LD_INT 8
64909: GREATER
64910: OR
64911: IFFALSE 64915
// exit ;
64913: GO 64990
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
64915: LD_ADDR_VAR 0 4
64919: PUSH
64920: LD_INT 22
64922: PUSH
64923: LD_VAR 0 2
64927: PUSH
64928: EMPTY
64929: LIST
64930: LIST
64931: PPUSH
64932: CALL_OW 69
64936: PUSH
64937: FOR_IN
64938: IFFALSE 64988
// begin un := UnitShoot ( i ) ;
64940: LD_ADDR_VAR 0 5
64944: PUSH
64945: LD_VAR 0 4
64949: PPUSH
64950: CALL_OW 504
64954: ST_TO_ADDR
// if GetSide ( un ) = side1 then
64955: LD_VAR 0 5
64959: PPUSH
64960: CALL_OW 255
64964: PUSH
64965: LD_VAR 0 1
64969: EQUAL
64970: IFFALSE 64986
// begin result := un ;
64972: LD_ADDR_VAR 0 3
64976: PUSH
64977: LD_VAR 0 5
64981: ST_TO_ADDR
// exit ;
64982: POP
64983: POP
64984: GO 64990
// end ; end ;
64986: GO 64937
64988: POP
64989: POP
// end ;
64990: LD_VAR 0 3
64994: RET
// export function GetCargoBay ( units ) ; begin
64995: LD_INT 0
64997: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
64998: LD_ADDR_VAR 0 2
65002: PUSH
65003: LD_VAR 0 1
65007: PPUSH
65008: LD_INT 2
65010: PUSH
65011: LD_INT 34
65013: PUSH
65014: LD_INT 12
65016: PUSH
65017: EMPTY
65018: LIST
65019: LIST
65020: PUSH
65021: LD_INT 34
65023: PUSH
65024: LD_INT 51
65026: PUSH
65027: EMPTY
65028: LIST
65029: LIST
65030: PUSH
65031: LD_INT 34
65033: PUSH
65034: LD_INT 32
65036: PUSH
65037: EMPTY
65038: LIST
65039: LIST
65040: PUSH
65041: LD_INT 34
65043: PUSH
65044: LD_EXP 30
65048: PUSH
65049: EMPTY
65050: LIST
65051: LIST
65052: PUSH
65053: EMPTY
65054: LIST
65055: LIST
65056: LIST
65057: LIST
65058: LIST
65059: PPUSH
65060: CALL_OW 72
65064: ST_TO_ADDR
// end ;
65065: LD_VAR 0 2
65069: RET
// export function Negate ( value ) ; begin
65070: LD_INT 0
65072: PPUSH
// result := not value ;
65073: LD_ADDR_VAR 0 2
65077: PUSH
65078: LD_VAR 0 1
65082: NOT
65083: ST_TO_ADDR
// end ;
65084: LD_VAR 0 2
65088: RET
// export function Inc ( value ) ; begin
65089: LD_INT 0
65091: PPUSH
// result := value + 1 ;
65092: LD_ADDR_VAR 0 2
65096: PUSH
65097: LD_VAR 0 1
65101: PUSH
65102: LD_INT 1
65104: PLUS
65105: ST_TO_ADDR
// end ;
65106: LD_VAR 0 2
65110: RET
// export function Dec ( value ) ; begin
65111: LD_INT 0
65113: PPUSH
// result := value - 1 ;
65114: LD_ADDR_VAR 0 2
65118: PUSH
65119: LD_VAR 0 1
65123: PUSH
65124: LD_INT 1
65126: MINUS
65127: ST_TO_ADDR
// end ;
65128: LD_VAR 0 2
65132: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
65133: LD_INT 0
65135: PPUSH
65136: PPUSH
65137: PPUSH
65138: PPUSH
65139: PPUSH
65140: PPUSH
65141: PPUSH
65142: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
65143: LD_VAR 0 1
65147: PPUSH
65148: LD_VAR 0 2
65152: PPUSH
65153: CALL_OW 488
65157: NOT
65158: PUSH
65159: LD_VAR 0 3
65163: PPUSH
65164: LD_VAR 0 4
65168: PPUSH
65169: CALL_OW 488
65173: NOT
65174: OR
65175: IFFALSE 65188
// begin result := - 1 ;
65177: LD_ADDR_VAR 0 5
65181: PUSH
65182: LD_INT 1
65184: NEG
65185: ST_TO_ADDR
// exit ;
65186: GO 65423
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
65188: LD_ADDR_VAR 0 12
65192: PUSH
65193: LD_VAR 0 1
65197: PPUSH
65198: LD_VAR 0 2
65202: PPUSH
65203: LD_VAR 0 3
65207: PPUSH
65208: LD_VAR 0 4
65212: PPUSH
65213: CALL 64271 0 4
65217: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
65218: LD_ADDR_VAR 0 11
65222: PUSH
65223: LD_VAR 0 1
65227: PPUSH
65228: LD_VAR 0 2
65232: PPUSH
65233: LD_VAR 0 12
65237: PUSH
65238: LD_INT 1
65240: ARRAY
65241: PPUSH
65242: LD_VAR 0 12
65246: PUSH
65247: LD_INT 2
65249: ARRAY
65250: PPUSH
65251: CALL_OW 298
65255: ST_TO_ADDR
// distance := 9999 ;
65256: LD_ADDR_VAR 0 10
65260: PUSH
65261: LD_INT 9999
65263: ST_TO_ADDR
// for i := 0 to 5 do
65264: LD_ADDR_VAR 0 6
65268: PUSH
65269: DOUBLE
65270: LD_INT 0
65272: DEC
65273: ST_TO_ADDR
65274: LD_INT 5
65276: PUSH
65277: FOR_TO
65278: IFFALSE 65421
// begin _x := ShiftX ( x1 , i , centerDist ) ;
65280: LD_ADDR_VAR 0 7
65284: PUSH
65285: LD_VAR 0 1
65289: PPUSH
65290: LD_VAR 0 6
65294: PPUSH
65295: LD_VAR 0 11
65299: PPUSH
65300: CALL_OW 272
65304: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
65305: LD_ADDR_VAR 0 8
65309: PUSH
65310: LD_VAR 0 2
65314: PPUSH
65315: LD_VAR 0 6
65319: PPUSH
65320: LD_VAR 0 11
65324: PPUSH
65325: CALL_OW 273
65329: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
65330: LD_VAR 0 7
65334: PPUSH
65335: LD_VAR 0 8
65339: PPUSH
65340: CALL_OW 488
65344: NOT
65345: IFFALSE 65349
// continue ;
65347: GO 65277
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
65349: LD_ADDR_VAR 0 9
65353: PUSH
65354: LD_VAR 0 12
65358: PUSH
65359: LD_INT 1
65361: ARRAY
65362: PPUSH
65363: LD_VAR 0 12
65367: PUSH
65368: LD_INT 2
65370: ARRAY
65371: PPUSH
65372: LD_VAR 0 7
65376: PPUSH
65377: LD_VAR 0 8
65381: PPUSH
65382: CALL_OW 298
65386: ST_TO_ADDR
// if tmp < distance then
65387: LD_VAR 0 9
65391: PUSH
65392: LD_VAR 0 10
65396: LESS
65397: IFFALSE 65419
// begin result := i ;
65399: LD_ADDR_VAR 0 5
65403: PUSH
65404: LD_VAR 0 6
65408: ST_TO_ADDR
// distance := tmp ;
65409: LD_ADDR_VAR 0 10
65413: PUSH
65414: LD_VAR 0 9
65418: ST_TO_ADDR
// end ; end ;
65419: GO 65277
65421: POP
65422: POP
// end ;
65423: LD_VAR 0 5
65427: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
65428: LD_INT 0
65430: PPUSH
65431: PPUSH
// if not driver or not IsInUnit ( driver ) then
65432: LD_VAR 0 1
65436: NOT
65437: PUSH
65438: LD_VAR 0 1
65442: PPUSH
65443: CALL_OW 310
65447: NOT
65448: OR
65449: IFFALSE 65453
// exit ;
65451: GO 65543
// vehicle := IsInUnit ( driver ) ;
65453: LD_ADDR_VAR 0 3
65457: PUSH
65458: LD_VAR 0 1
65462: PPUSH
65463: CALL_OW 310
65467: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
65468: LD_VAR 0 1
65472: PPUSH
65473: LD_STRING \
65475: PUSH
65476: LD_INT 0
65478: PUSH
65479: LD_INT 0
65481: PUSH
65482: LD_INT 0
65484: PUSH
65485: LD_INT 0
65487: PUSH
65488: LD_INT 0
65490: PUSH
65491: LD_INT 0
65493: PUSH
65494: EMPTY
65495: LIST
65496: LIST
65497: LIST
65498: LIST
65499: LIST
65500: LIST
65501: LIST
65502: PUSH
65503: LD_STRING E
65505: PUSH
65506: LD_INT 0
65508: PUSH
65509: LD_INT 0
65511: PUSH
65512: LD_VAR 0 3
65516: PUSH
65517: LD_INT 0
65519: PUSH
65520: LD_INT 0
65522: PUSH
65523: LD_INT 0
65525: PUSH
65526: EMPTY
65527: LIST
65528: LIST
65529: LIST
65530: LIST
65531: LIST
65532: LIST
65533: LIST
65534: PUSH
65535: EMPTY
65536: LIST
65537: LIST
65538: PPUSH
65539: CALL_OW 446
// end ;
65543: LD_VAR 0 2
65547: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
65548: LD_INT 0
65550: PPUSH
65551: PPUSH
// if not driver or not IsInUnit ( driver ) then
65552: LD_VAR 0 1
65556: NOT
65557: PUSH
65558: LD_VAR 0 1
65562: PPUSH
65563: CALL_OW 310
65567: NOT
65568: OR
65569: IFFALSE 65573
// exit ;
65571: GO 65663
// vehicle := IsInUnit ( driver ) ;
65573: LD_ADDR_VAR 0 3
65577: PUSH
65578: LD_VAR 0 1
65582: PPUSH
65583: CALL_OW 310
65587: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
65588: LD_VAR 0 1
65592: PPUSH
65593: LD_STRING \
65595: PUSH
65596: LD_INT 0
65598: PUSH
65599: LD_INT 0
65601: PUSH
65602: LD_INT 0
65604: PUSH
65605: LD_INT 0
65607: PUSH
65608: LD_INT 0
65610: PUSH
65611: LD_INT 0
65613: PUSH
65614: EMPTY
65615: LIST
65616: LIST
65617: LIST
65618: LIST
65619: LIST
65620: LIST
65621: LIST
65622: PUSH
65623: LD_STRING E
65625: PUSH
65626: LD_INT 0
65628: PUSH
65629: LD_INT 0
65631: PUSH
65632: LD_VAR 0 3
65636: PUSH
65637: LD_INT 0
65639: PUSH
65640: LD_INT 0
65642: PUSH
65643: LD_INT 0
65645: PUSH
65646: EMPTY
65647: LIST
65648: LIST
65649: LIST
65650: LIST
65651: LIST
65652: LIST
65653: LIST
65654: PUSH
65655: EMPTY
65656: LIST
65657: LIST
65658: PPUSH
65659: CALL_OW 447
// end ;
65663: LD_VAR 0 2
65667: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
65668: LD_INT 0
65670: PPUSH
65671: PPUSH
65672: PPUSH
// tmp := [ ] ;
65673: LD_ADDR_VAR 0 5
65677: PUSH
65678: EMPTY
65679: ST_TO_ADDR
// for i in units do
65680: LD_ADDR_VAR 0 4
65684: PUSH
65685: LD_VAR 0 1
65689: PUSH
65690: FOR_IN
65691: IFFALSE 65729
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
65693: LD_ADDR_VAR 0 5
65697: PUSH
65698: LD_VAR 0 5
65702: PPUSH
65703: LD_VAR 0 5
65707: PUSH
65708: LD_INT 1
65710: PLUS
65711: PPUSH
65712: LD_VAR 0 4
65716: PPUSH
65717: CALL_OW 256
65721: PPUSH
65722: CALL_OW 2
65726: ST_TO_ADDR
65727: GO 65690
65729: POP
65730: POP
// if not tmp then
65731: LD_VAR 0 5
65735: NOT
65736: IFFALSE 65740
// exit ;
65738: GO 65788
// if asc then
65740: LD_VAR 0 2
65744: IFFALSE 65768
// result := SortListByListAsc ( units , tmp ) else
65746: LD_ADDR_VAR 0 3
65750: PUSH
65751: LD_VAR 0 1
65755: PPUSH
65756: LD_VAR 0 5
65760: PPUSH
65761: CALL_OW 76
65765: ST_TO_ADDR
65766: GO 65788
// result := SortListByListDesc ( units , tmp ) ;
65768: LD_ADDR_VAR 0 3
65772: PUSH
65773: LD_VAR 0 1
65777: PPUSH
65778: LD_VAR 0 5
65782: PPUSH
65783: CALL_OW 77
65787: ST_TO_ADDR
// end ;
65788: LD_VAR 0 3
65792: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
65793: LD_INT 0
65795: PPUSH
65796: PPUSH
// task := GetTaskList ( mech ) ;
65797: LD_ADDR_VAR 0 4
65801: PUSH
65802: LD_VAR 0 1
65806: PPUSH
65807: CALL_OW 437
65811: ST_TO_ADDR
// if not task then
65812: LD_VAR 0 4
65816: NOT
65817: IFFALSE 65821
// exit ;
65819: GO 65863
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
65821: LD_ADDR_VAR 0 3
65825: PUSH
65826: LD_VAR 0 4
65830: PUSH
65831: LD_INT 1
65833: ARRAY
65834: PUSH
65835: LD_INT 1
65837: ARRAY
65838: PUSH
65839: LD_STRING r
65841: EQUAL
65842: PUSH
65843: LD_VAR 0 4
65847: PUSH
65848: LD_INT 1
65850: ARRAY
65851: PUSH
65852: LD_INT 4
65854: ARRAY
65855: PUSH
65856: LD_VAR 0 2
65860: EQUAL
65861: AND
65862: ST_TO_ADDR
// end ;
65863: LD_VAR 0 3
65867: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
65868: LD_INT 0
65870: PPUSH
// SetDir ( unit , d ) ;
65871: LD_VAR 0 1
65875: PPUSH
65876: LD_VAR 0 4
65880: PPUSH
65881: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
65885: LD_VAR 0 1
65889: PPUSH
65890: LD_VAR 0 2
65894: PPUSH
65895: LD_VAR 0 3
65899: PPUSH
65900: LD_VAR 0 5
65904: PPUSH
65905: CALL_OW 48
// end ;
65909: LD_VAR 0 6
65913: RET
// export function ToNaturalNumber ( number ) ; begin
65914: LD_INT 0
65916: PPUSH
// result := number div 1 ;
65917: LD_ADDR_VAR 0 2
65921: PUSH
65922: LD_VAR 0 1
65926: PUSH
65927: LD_INT 1
65929: DIV
65930: ST_TO_ADDR
// if number < 0 then
65931: LD_VAR 0 1
65935: PUSH
65936: LD_INT 0
65938: LESS
65939: IFFALSE 65949
// result := 0 ;
65941: LD_ADDR_VAR 0 2
65945: PUSH
65946: LD_INT 0
65948: ST_TO_ADDR
// end ;
65949: LD_VAR 0 2
65953: RET
// export function SortByClass ( units , class ) ; var un ; begin
65954: LD_INT 0
65956: PPUSH
65957: PPUSH
// if not units or not class then
65958: LD_VAR 0 1
65962: NOT
65963: PUSH
65964: LD_VAR 0 2
65968: NOT
65969: OR
65970: IFFALSE 65974
// exit ;
65972: GO 66069
// result := [ ] ;
65974: LD_ADDR_VAR 0 3
65978: PUSH
65979: EMPTY
65980: ST_TO_ADDR
// for un in units do
65981: LD_ADDR_VAR 0 4
65985: PUSH
65986: LD_VAR 0 1
65990: PUSH
65991: FOR_IN
65992: IFFALSE 66067
// if GetClass ( un ) = class then
65994: LD_VAR 0 4
65998: PPUSH
65999: CALL_OW 257
66003: PUSH
66004: LD_VAR 0 2
66008: EQUAL
66009: IFFALSE 66036
// result := Insert ( result , 1 , un ) else
66011: LD_ADDR_VAR 0 3
66015: PUSH
66016: LD_VAR 0 3
66020: PPUSH
66021: LD_INT 1
66023: PPUSH
66024: LD_VAR 0 4
66028: PPUSH
66029: CALL_OW 2
66033: ST_TO_ADDR
66034: GO 66065
// result := Replace ( result , result + 1 , un ) ;
66036: LD_ADDR_VAR 0 3
66040: PUSH
66041: LD_VAR 0 3
66045: PPUSH
66046: LD_VAR 0 3
66050: PUSH
66051: LD_INT 1
66053: PLUS
66054: PPUSH
66055: LD_VAR 0 4
66059: PPUSH
66060: CALL_OW 1
66064: ST_TO_ADDR
66065: GO 65991
66067: POP
66068: POP
// end ;
66069: LD_VAR 0 3
66073: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
66074: LD_INT 0
66076: PPUSH
66077: PPUSH
66078: PPUSH
66079: PPUSH
66080: PPUSH
66081: PPUSH
66082: PPUSH
// result := [ ] ;
66083: LD_ADDR_VAR 0 4
66087: PUSH
66088: EMPTY
66089: ST_TO_ADDR
// if x - r < 0 then
66090: LD_VAR 0 1
66094: PUSH
66095: LD_VAR 0 3
66099: MINUS
66100: PUSH
66101: LD_INT 0
66103: LESS
66104: IFFALSE 66116
// min_x := 0 else
66106: LD_ADDR_VAR 0 8
66110: PUSH
66111: LD_INT 0
66113: ST_TO_ADDR
66114: GO 66132
// min_x := x - r ;
66116: LD_ADDR_VAR 0 8
66120: PUSH
66121: LD_VAR 0 1
66125: PUSH
66126: LD_VAR 0 3
66130: MINUS
66131: ST_TO_ADDR
// if y - r < 0 then
66132: LD_VAR 0 2
66136: PUSH
66137: LD_VAR 0 3
66141: MINUS
66142: PUSH
66143: LD_INT 0
66145: LESS
66146: IFFALSE 66158
// min_y := 0 else
66148: LD_ADDR_VAR 0 7
66152: PUSH
66153: LD_INT 0
66155: ST_TO_ADDR
66156: GO 66174
// min_y := y - r ;
66158: LD_ADDR_VAR 0 7
66162: PUSH
66163: LD_VAR 0 2
66167: PUSH
66168: LD_VAR 0 3
66172: MINUS
66173: ST_TO_ADDR
// max_x := x + r ;
66174: LD_ADDR_VAR 0 9
66178: PUSH
66179: LD_VAR 0 1
66183: PUSH
66184: LD_VAR 0 3
66188: PLUS
66189: ST_TO_ADDR
// max_y := y + r ;
66190: LD_ADDR_VAR 0 10
66194: PUSH
66195: LD_VAR 0 2
66199: PUSH
66200: LD_VAR 0 3
66204: PLUS
66205: ST_TO_ADDR
// for _x = min_x to max_x do
66206: LD_ADDR_VAR 0 5
66210: PUSH
66211: DOUBLE
66212: LD_VAR 0 8
66216: DEC
66217: ST_TO_ADDR
66218: LD_VAR 0 9
66222: PUSH
66223: FOR_TO
66224: IFFALSE 66325
// for _y = min_y to max_y do
66226: LD_ADDR_VAR 0 6
66230: PUSH
66231: DOUBLE
66232: LD_VAR 0 7
66236: DEC
66237: ST_TO_ADDR
66238: LD_VAR 0 10
66242: PUSH
66243: FOR_TO
66244: IFFALSE 66321
// begin if not ValidHex ( _x , _y ) then
66246: LD_VAR 0 5
66250: PPUSH
66251: LD_VAR 0 6
66255: PPUSH
66256: CALL_OW 488
66260: NOT
66261: IFFALSE 66265
// continue ;
66263: GO 66243
// if GetResourceTypeXY ( _x , _y ) then
66265: LD_VAR 0 5
66269: PPUSH
66270: LD_VAR 0 6
66274: PPUSH
66275: CALL_OW 283
66279: IFFALSE 66319
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
66281: LD_ADDR_VAR 0 4
66285: PUSH
66286: LD_VAR 0 4
66290: PPUSH
66291: LD_VAR 0 4
66295: PUSH
66296: LD_INT 1
66298: PLUS
66299: PPUSH
66300: LD_VAR 0 5
66304: PUSH
66305: LD_VAR 0 6
66309: PUSH
66310: EMPTY
66311: LIST
66312: LIST
66313: PPUSH
66314: CALL_OW 1
66318: ST_TO_ADDR
// end ;
66319: GO 66243
66321: POP
66322: POP
66323: GO 66223
66325: POP
66326: POP
// end ;
66327: LD_VAR 0 4
66331: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
66332: LD_INT 0
66334: PPUSH
66335: PPUSH
66336: PPUSH
66337: PPUSH
66338: PPUSH
66339: PPUSH
66340: PPUSH
66341: PPUSH
// if not units then
66342: LD_VAR 0 1
66346: NOT
66347: IFFALSE 66351
// exit ;
66349: GO 66776
// result := UnitFilter ( units , [ f_ok ] ) ;
66351: LD_ADDR_VAR 0 3
66355: PUSH
66356: LD_VAR 0 1
66360: PPUSH
66361: LD_INT 50
66363: PUSH
66364: EMPTY
66365: LIST
66366: PPUSH
66367: CALL_OW 72
66371: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
66372: LD_ADDR_VAR 0 8
66376: PUSH
66377: LD_VAR 0 1
66381: PUSH
66382: LD_INT 1
66384: ARRAY
66385: PPUSH
66386: CALL_OW 255
66390: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb ] ;
66391: LD_ADDR_VAR 0 10
66395: PUSH
66396: LD_INT 29
66398: PUSH
66399: LD_EXP 33
66403: PUSH
66404: EMPTY
66405: LIST
66406: LIST
66407: ST_TO_ADDR
// if not result then
66408: LD_VAR 0 3
66412: NOT
66413: IFFALSE 66417
// exit ;
66415: GO 66776
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
66417: LD_ADDR_VAR 0 5
66421: PUSH
66422: LD_INT 81
66424: PUSH
66425: LD_VAR 0 8
66429: PUSH
66430: EMPTY
66431: LIST
66432: LIST
66433: PPUSH
66434: CALL_OW 69
66438: ST_TO_ADDR
// for i in result do
66439: LD_ADDR_VAR 0 4
66443: PUSH
66444: LD_VAR 0 3
66448: PUSH
66449: FOR_IN
66450: IFFALSE 66774
// begin tag := GetTag ( i ) + 1 ;
66452: LD_ADDR_VAR 0 9
66456: PUSH
66457: LD_VAR 0 4
66461: PPUSH
66462: CALL_OW 110
66466: PUSH
66467: LD_INT 1
66469: PLUS
66470: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
66471: LD_ADDR_VAR 0 7
66475: PUSH
66476: LD_VAR 0 4
66480: PPUSH
66481: CALL_OW 250
66485: PPUSH
66486: LD_VAR 0 4
66490: PPUSH
66491: CALL_OW 251
66495: PPUSH
66496: LD_INT 6
66498: PPUSH
66499: CALL 66074 0 3
66503: ST_TO_ADDR
// if cr and not GetWeapon ( i ) in ignoreCratesWeapon then
66504: LD_VAR 0 7
66508: PUSH
66509: LD_VAR 0 4
66513: PPUSH
66514: CALL_OW 264
66518: PUSH
66519: LD_VAR 0 10
66523: IN
66524: NOT
66525: AND
66526: IFFALSE 66565
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
66528: LD_VAR 0 4
66532: PPUSH
66533: LD_VAR 0 7
66537: PUSH
66538: LD_INT 1
66540: ARRAY
66541: PUSH
66542: LD_INT 1
66544: ARRAY
66545: PPUSH
66546: LD_VAR 0 7
66550: PUSH
66551: LD_INT 1
66553: ARRAY
66554: PUSH
66555: LD_INT 2
66557: ARRAY
66558: PPUSH
66559: CALL_OW 116
66563: GO 66772
// if path > tag then
66565: LD_VAR 0 2
66569: PUSH
66570: LD_VAR 0 9
66574: GREATER
66575: IFFALSE 66742
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 12 ] ) ;
66577: LD_ADDR_VAR 0 6
66581: PUSH
66582: LD_VAR 0 5
66586: PPUSH
66587: LD_INT 91
66589: PUSH
66590: LD_VAR 0 4
66594: PUSH
66595: LD_INT 12
66597: PUSH
66598: EMPTY
66599: LIST
66600: LIST
66601: LIST
66602: PPUSH
66603: CALL_OW 72
66607: ST_TO_ADDR
// if nearEnemy then
66608: LD_VAR 0 6
66612: IFFALSE 66640
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
66614: LD_VAR 0 4
66618: PPUSH
66619: LD_VAR 0 6
66623: PPUSH
66624: LD_VAR 0 4
66628: PPUSH
66629: CALL_OW 74
66633: PPUSH
66634: CALL_OW 115
66638: GO 66740
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
66640: LD_VAR 0 4
66644: PPUSH
66645: LD_VAR 0 2
66649: PUSH
66650: LD_VAR 0 9
66654: ARRAY
66655: PUSH
66656: LD_INT 1
66658: ARRAY
66659: PPUSH
66660: LD_VAR 0 2
66664: PUSH
66665: LD_VAR 0 9
66669: ARRAY
66670: PUSH
66671: LD_INT 2
66673: ARRAY
66674: PPUSH
66675: CALL_OW 297
66679: PUSH
66680: LD_INT 6
66682: GREATER
66683: IFFALSE 66726
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
66685: LD_VAR 0 4
66689: PPUSH
66690: LD_VAR 0 2
66694: PUSH
66695: LD_VAR 0 9
66699: ARRAY
66700: PUSH
66701: LD_INT 1
66703: ARRAY
66704: PPUSH
66705: LD_VAR 0 2
66709: PUSH
66710: LD_VAR 0 9
66714: ARRAY
66715: PUSH
66716: LD_INT 2
66718: ARRAY
66719: PPUSH
66720: CALL_OW 114
66724: GO 66740
// SetTag ( i , tag ) ;
66726: LD_VAR 0 4
66730: PPUSH
66731: LD_VAR 0 9
66735: PPUSH
66736: CALL_OW 109
// end else
66740: GO 66772
// if enemy then
66742: LD_VAR 0 5
66746: IFFALSE 66772
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
66748: LD_VAR 0 4
66752: PPUSH
66753: LD_VAR 0 5
66757: PPUSH
66758: LD_VAR 0 4
66762: PPUSH
66763: CALL_OW 74
66767: PPUSH
66768: CALL_OW 115
// end ;
66772: GO 66449
66774: POP
66775: POP
// end ;
66776: LD_VAR 0 3
66780: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
66781: LD_INT 0
66783: PPUSH
66784: PPUSH
66785: PPUSH
// if not unit or IsInUnit ( unit ) then
66786: LD_VAR 0 1
66790: NOT
66791: PUSH
66792: LD_VAR 0 1
66796: PPUSH
66797: CALL_OW 310
66801: OR
66802: IFFALSE 66806
// exit ;
66804: GO 66897
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
66806: LD_ADDR_VAR 0 4
66810: PUSH
66811: LD_VAR 0 1
66815: PPUSH
66816: CALL_OW 250
66820: PPUSH
66821: LD_VAR 0 2
66825: PPUSH
66826: LD_INT 1
66828: PPUSH
66829: CALL_OW 272
66833: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
66834: LD_ADDR_VAR 0 5
66838: PUSH
66839: LD_VAR 0 1
66843: PPUSH
66844: CALL_OW 251
66848: PPUSH
66849: LD_VAR 0 2
66853: PPUSH
66854: LD_INT 1
66856: PPUSH
66857: CALL_OW 273
66861: ST_TO_ADDR
// if ValidHex ( x , y ) then
66862: LD_VAR 0 4
66866: PPUSH
66867: LD_VAR 0 5
66871: PPUSH
66872: CALL_OW 488
66876: IFFALSE 66897
// ComTurnXY ( unit , x , y ) ;
66878: LD_VAR 0 1
66882: PPUSH
66883: LD_VAR 0 4
66887: PPUSH
66888: LD_VAR 0 5
66892: PPUSH
66893: CALL_OW 118
// end ;
66897: LD_VAR 0 3
66901: RET
// export function SeeUnits ( side , units ) ; var i ; begin
66902: LD_INT 0
66904: PPUSH
66905: PPUSH
// result := false ;
66906: LD_ADDR_VAR 0 3
66910: PUSH
66911: LD_INT 0
66913: ST_TO_ADDR
// if not units then
66914: LD_VAR 0 2
66918: NOT
66919: IFFALSE 66923
// exit ;
66921: GO 66968
// for i in units do
66923: LD_ADDR_VAR 0 4
66927: PUSH
66928: LD_VAR 0 2
66932: PUSH
66933: FOR_IN
66934: IFFALSE 66966
// if See ( side , i ) then
66936: LD_VAR 0 1
66940: PPUSH
66941: LD_VAR 0 4
66945: PPUSH
66946: CALL_OW 292
66950: IFFALSE 66964
// begin result := true ;
66952: LD_ADDR_VAR 0 3
66956: PUSH
66957: LD_INT 1
66959: ST_TO_ADDR
// exit ;
66960: POP
66961: POP
66962: GO 66968
// end ;
66964: GO 66933
66966: POP
66967: POP
// end ;
66968: LD_VAR 0 3
66972: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
66973: LD_INT 0
66975: PPUSH
66976: PPUSH
66977: PPUSH
66978: PPUSH
// if not unit or not points then
66979: LD_VAR 0 1
66983: NOT
66984: PUSH
66985: LD_VAR 0 2
66989: NOT
66990: OR
66991: IFFALSE 66995
// exit ;
66993: GO 67085
// dist := 99999 ;
66995: LD_ADDR_VAR 0 5
66999: PUSH
67000: LD_INT 99999
67002: ST_TO_ADDR
// for i in points do
67003: LD_ADDR_VAR 0 4
67007: PUSH
67008: LD_VAR 0 2
67012: PUSH
67013: FOR_IN
67014: IFFALSE 67083
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
67016: LD_ADDR_VAR 0 6
67020: PUSH
67021: LD_VAR 0 1
67025: PPUSH
67026: LD_VAR 0 4
67030: PUSH
67031: LD_INT 1
67033: ARRAY
67034: PPUSH
67035: LD_VAR 0 4
67039: PUSH
67040: LD_INT 2
67042: ARRAY
67043: PPUSH
67044: CALL_OW 297
67048: ST_TO_ADDR
// if tmpDist < dist then
67049: LD_VAR 0 6
67053: PUSH
67054: LD_VAR 0 5
67058: LESS
67059: IFFALSE 67081
// begin result := i ;
67061: LD_ADDR_VAR 0 3
67065: PUSH
67066: LD_VAR 0 4
67070: ST_TO_ADDR
// dist := tmpDist ;
67071: LD_ADDR_VAR 0 5
67075: PUSH
67076: LD_VAR 0 6
67080: ST_TO_ADDR
// end ; end ;
67081: GO 67013
67083: POP
67084: POP
// end ;
67085: LD_VAR 0 3
67089: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
67090: LD_INT 0
67092: PPUSH
// uc_side := side ;
67093: LD_ADDR_OWVAR 20
67097: PUSH
67098: LD_VAR 0 1
67102: ST_TO_ADDR
// uc_nation := 3 ;
67103: LD_ADDR_OWVAR 21
67107: PUSH
67108: LD_INT 3
67110: ST_TO_ADDR
// vc_chassis := 25 ;
67111: LD_ADDR_OWVAR 37
67115: PUSH
67116: LD_INT 25
67118: ST_TO_ADDR
// vc_engine := engine_siberite ;
67119: LD_ADDR_OWVAR 39
67123: PUSH
67124: LD_INT 3
67126: ST_TO_ADDR
// vc_control := control_computer ;
67127: LD_ADDR_OWVAR 38
67131: PUSH
67132: LD_INT 3
67134: ST_TO_ADDR
// vc_weapon := 59 ;
67135: LD_ADDR_OWVAR 40
67139: PUSH
67140: LD_INT 59
67142: ST_TO_ADDR
// result := CreateVehicle ;
67143: LD_ADDR_VAR 0 5
67147: PUSH
67148: CALL_OW 45
67152: ST_TO_ADDR
// SetDir ( result , d ) ;
67153: LD_VAR 0 5
67157: PPUSH
67158: LD_VAR 0 4
67162: PPUSH
67163: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
67167: LD_VAR 0 5
67171: PPUSH
67172: LD_VAR 0 2
67176: PPUSH
67177: LD_VAR 0 3
67181: PPUSH
67182: LD_INT 0
67184: PPUSH
67185: CALL_OW 48
// end ; end_of_file
67189: LD_VAR 0 5
67193: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
67194: LD_VAR 0 1
67198: PUSH
67199: LD_INT 200
67201: DOUBLE
67202: GREATEREQUAL
67203: IFFALSE 67211
67205: LD_INT 299
67207: DOUBLE
67208: LESSEQUAL
67209: IFTRUE 67213
67211: GO 67245
67213: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
67214: LD_VAR 0 1
67218: PPUSH
67219: LD_VAR 0 2
67223: PPUSH
67224: LD_VAR 0 3
67228: PPUSH
67229: LD_VAR 0 4
67233: PPUSH
67234: LD_VAR 0 5
67238: PPUSH
67239: CALL 22793 0 5
67243: GO 67322
67245: LD_INT 300
67247: DOUBLE
67248: GREATEREQUAL
67249: IFFALSE 67257
67251: LD_INT 399
67253: DOUBLE
67254: LESSEQUAL
67255: IFTRUE 67259
67257: GO 67321
67259: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
67260: LD_VAR 0 1
67264: PPUSH
67265: LD_VAR 0 2
67269: PPUSH
67270: LD_VAR 0 3
67274: PPUSH
67275: LD_VAR 0 4
67279: PPUSH
67280: LD_VAR 0 5
67284: PPUSH
67285: LD_VAR 0 6
67289: PPUSH
67290: LD_VAR 0 7
67294: PPUSH
67295: LD_VAR 0 8
67299: PPUSH
67300: LD_VAR 0 9
67304: PPUSH
67305: LD_VAR 0 10
67309: PPUSH
67310: LD_VAR 0 11
67314: PPUSH
67315: CALL 20435 0 11
67319: GO 67322
67321: POP
// end ;
67322: PPOPN 11
67324: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
67325: LD_VAR 0 1
67329: PPUSH
67330: LD_VAR 0 2
67334: PPUSH
67335: LD_VAR 0 3
67339: PPUSH
67340: LD_VAR 0 4
67344: PPUSH
67345: LD_VAR 0 5
67349: PPUSH
67350: CALL 22529 0 5
// end ; end_of_file
67354: PPOPN 5
67356: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
67357: LD_VAR 0 1
67361: PPUSH
67362: LD_VAR 0 2
67366: PPUSH
67367: LD_VAR 0 3
67371: PPUSH
67372: LD_VAR 0 4
67376: PPUSH
67377: LD_VAR 0 5
67381: PPUSH
67382: LD_VAR 0 6
67386: PPUSH
67387: CALL 8128 0 6
// end ;
67391: PPOPN 6
67393: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
67394: CALL 8103 0 0
// end ;
67398: PPOPN 1
67400: END
