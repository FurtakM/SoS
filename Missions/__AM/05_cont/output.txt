// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RandomizeAll ;
  11: CALL_OW 11
// Init ;
  15: CALL 83 0 0
// InitRestrictions ;
  19: CALL 211 0 0
// if debug then
  23: LD_EXP 1
  27: IFFALSE 33
// DebugMode ;
  29: CALL 292 0 0
// SpawnApeman ( apemanStartArea , 2 ) ;
  33: LD_INT 12
  35: PPUSH
  36: LD_INT 2
  38: PPUSH
  39: CALL 599 0 2
// SpawnApeman ( apemanArea , [ 10 , 8 , 7 , 6 ] [ Difficulty ] ) ;
  43: LD_INT 11
  45: PPUSH
  46: LD_INT 10
  48: PUSH
  49: LD_INT 8
  51: PUSH
  52: LD_INT 7
  54: PUSH
  55: LD_INT 6
  57: PUSH
  58: EMPTY
  59: LIST
  60: LIST
  61: LIST
  62: LIST
  63: PUSH
  64: LD_OWVAR 67
  68: ARRAY
  69: PPUSH
  70: CALL 599 0 2
// PrepareAmericans ;
  74: CALL 1198 0 0
// Action ;
  78: CALL 2134 0 0
// end ;
  82: END
// export debug ; export mission_prefix , mission_prefix_prev ; export deltaBuilded , denisArrives , Delta , radar_allowed , first_apeman_tamed , apeman_army , radar_researched , radar_builded ; export apeman_counter , arab_spotted , end_mission , apeKillCounter ; function Init ; begin
  83: LD_INT 0
  85: PPUSH
// debug := false ;
  86: LD_ADDR_EXP 1
  90: PUSH
  91: LD_INT 0
  93: ST_TO_ADDR
// mission_prefix := 05_ ;
  94: LD_ADDR_EXP 2
  98: PUSH
  99: LD_STRING 05_
 101: ST_TO_ADDR
// mission_prefix_prev := 05a_ ;
 102: LD_ADDR_EXP 3
 106: PUSH
 107: LD_STRING 05a_
 109: ST_TO_ADDR
// deltaBuilded := false ;
 110: LD_ADDR_EXP 4
 114: PUSH
 115: LD_INT 0
 117: ST_TO_ADDR
// denisArrives := false ;
 118: LD_ADDR_EXP 5
 122: PUSH
 123: LD_INT 0
 125: ST_TO_ADDR
// radar_allowed := false ;
 126: LD_ADDR_EXP 7
 130: PUSH
 131: LD_INT 0
 133: ST_TO_ADDR
// first_apeman_tamed := false ;
 134: LD_ADDR_EXP 8
 138: PUSH
 139: LD_INT 0
 141: ST_TO_ADDR
// arab_spotted := false ;
 142: LD_ADDR_EXP 13
 146: PUSH
 147: LD_INT 0
 149: ST_TO_ADDR
// end_mission := false ;
 150: LD_ADDR_EXP 14
 154: PUSH
 155: LD_INT 0
 157: ST_TO_ADDR
// apeman_army := false ;
 158: LD_ADDR_EXP 9
 162: PUSH
 163: LD_INT 0
 165: ST_TO_ADDR
// radar_researched := false ;
 166: LD_ADDR_EXP 10
 170: PUSH
 171: LD_INT 0
 173: ST_TO_ADDR
// radar_builded := false ;
 174: LD_ADDR_EXP 11
 178: PUSH
 179: LD_INT 0
 181: ST_TO_ADDR
// apeman_counter := 0 ;
 182: LD_ADDR_EXP 12
 186: PUSH
 187: LD_INT 0
 189: ST_TO_ADDR
// Delta := 0 ;
 190: LD_ADDR_EXP 6
 194: PUSH
 195: LD_INT 0
 197: ST_TO_ADDR
// apeKillCounter := 0 ;
 198: LD_ADDR_EXP 15
 202: PUSH
 203: LD_INT 0
 205: ST_TO_ADDR
// end ;
 206: LD_VAR 0 1
 210: RET
// function InitRestrictions ; begin
 211: LD_INT 0
 213: PPUSH
// SetRestrict ( b_lab_half , 1 , state_enabled ) ;
 214: LD_INT 7
 216: PPUSH
 217: LD_INT 1
 219: PPUSH
 220: LD_INT 1
 222: PPUSH
 223: CALL_OW 324
// SetRestrict ( b_lab_full , 1 , state_enabled ) ;
 227: LD_INT 8
 229: PPUSH
 230: LD_INT 1
 232: PPUSH
 233: LD_INT 1
 235: PPUSH
 236: CALL_OW 324
// SetRestrict ( b_lab_weapon , 1 , state_enabled ) ;
 240: LD_INT 10
 242: PPUSH
 243: LD_INT 1
 245: PPUSH
 246: LD_INT 1
 248: PPUSH
 249: CALL_OW 324
// SetTech ( tech_gatling , 1 , LoadVariable ( GatlingInGamma , 1 ) ) ;
 253: LD_INT 69
 255: PPUSH
 256: LD_INT 1
 258: PPUSH
 259: LD_STRING GatlingInGamma
 261: PPUSH
 262: LD_INT 1
 264: PPUSH
 265: CALL_OW 30
 269: PPUSH
 270: CALL_OW 322
// SetTech ( tech_weap1 , 1 , state_enabled ) ;
 274: LD_INT 51
 276: PPUSH
 277: LD_INT 1
 279: PPUSH
 280: LD_INT 1
 282: PPUSH
 283: CALL_OW 322
// end ;
 287: LD_VAR 0 1
 291: RET
// function DebugMode ; begin
 292: LD_INT 0
 294: PPUSH
// FogOff ( 1 ) ;
 295: LD_INT 1
 297: PPUSH
 298: CALL_OW 344
// Difficulty := 2 ;
 302: LD_ADDR_OWVAR 67
 306: PUSH
 307: LD_INT 2
 309: ST_TO_ADDR
// end ;
 310: LD_VAR 0 1
 314: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 0 ] ] ) >= 7 do
 315: LD_INT 22
 317: PUSH
 318: LD_INT 1
 320: PUSH
 321: EMPTY
 322: LIST
 323: LIST
 324: PUSH
 325: LD_INT 23
 327: PUSH
 328: LD_INT 0
 330: PUSH
 331: EMPTY
 332: LIST
 333: LIST
 334: PUSH
 335: EMPTY
 336: LIST
 337: LIST
 338: PPUSH
 339: CALL_OW 69
 343: PUSH
 344: LD_INT 7
 346: GREATEREQUAL
 347: IFFALSE 359
 349: GO 351
 351: DISABLE
// SetAchievement ( ACH_TAME ) ;
 352: LD_STRING ACH_TAME
 354: PPUSH
 355: CALL_OW 543
 359: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_bweapon , us_radar ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_radar ] ] ) do
 360: LD_INT 22
 362: PUSH
 363: LD_INT 1
 365: PUSH
 366: EMPTY
 367: LIST
 368: LIST
 369: PUSH
 370: LD_INT 35
 372: PUSH
 373: LD_INT 11
 375: PUSH
 376: EMPTY
 377: LIST
 378: LIST
 379: PUSH
 380: EMPTY
 381: LIST
 382: LIST
 383: PPUSH
 384: CALL_OW 69
 388: PUSH
 389: LD_INT 22
 391: PUSH
 392: LD_INT 1
 394: PUSH
 395: EMPTY
 396: LIST
 397: LIST
 398: PUSH
 399: LD_INT 34
 401: PUSH
 402: LD_INT 11
 404: PUSH
 405: EMPTY
 406: LIST
 407: LIST
 408: PUSH
 409: EMPTY
 410: LIST
 411: LIST
 412: PPUSH
 413: CALL_OW 69
 417: AND
 418: IFFALSE 430
 420: GO 422
 422: DISABLE
// SetAchievement ( ACH_RADAR ) ; end_of_file
 423: LD_STRING ACH_RADAR
 425: PPUSH
 426: CALL_OW 543
 430: END
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 431: LD_INT 0
 433: PPUSH
// uc_side := side ;
 434: LD_ADDR_OWVAR 20
 438: PUSH
 439: LD_VAR 0 1
 443: ST_TO_ADDR
// uc_nation := nation ;
 444: LD_ADDR_OWVAR 21
 448: PUSH
 449: LD_VAR 0 2
 453: ST_TO_ADDR
// vc_chassis := chassis ;
 454: LD_ADDR_OWVAR 37
 458: PUSH
 459: LD_VAR 0 3
 463: ST_TO_ADDR
// vc_engine := engine ;
 464: LD_ADDR_OWVAR 39
 468: PUSH
 469: LD_VAR 0 4
 473: ST_TO_ADDR
// vc_control := control ;
 474: LD_ADDR_OWVAR 38
 478: PUSH
 479: LD_VAR 0 5
 483: ST_TO_ADDR
// vc_weapon := weapon ;
 484: LD_ADDR_OWVAR 40
 488: PUSH
 489: LD_VAR 0 6
 493: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 494: LD_ADDR_OWVAR 41
 498: PUSH
 499: LD_VAR 0 7
 503: ST_TO_ADDR
// result := CreateVehicle ;
 504: LD_ADDR_VAR 0 8
 508: PUSH
 509: CALL_OW 45
 513: ST_TO_ADDR
// end ;
 514: LD_VAR 0 8
 518: RET
// export function SayX ( units , ident ) ; var i ; begin
 519: LD_INT 0
 521: PPUSH
 522: PPUSH
// result := false ;
 523: LD_ADDR_VAR 0 3
 527: PUSH
 528: LD_INT 0
 530: ST_TO_ADDR
// if not units then
 531: LD_VAR 0 1
 535: NOT
 536: IFFALSE 540
// exit ;
 538: GO 594
// for i in units do
 540: LD_ADDR_VAR 0 4
 544: PUSH
 545: LD_VAR 0 1
 549: PUSH
 550: FOR_IN
 551: IFFALSE 592
// if IsOk ( i ) then
 553: LD_VAR 0 4
 557: PPUSH
 558: CALL_OW 302
 562: IFFALSE 590
// begin Say ( i , ident ) ;
 564: LD_VAR 0 4
 568: PPUSH
 569: LD_VAR 0 2
 573: PPUSH
 574: CALL_OW 88
// result := i ;
 578: LD_ADDR_VAR 0 3
 582: PUSH
 583: LD_VAR 0 4
 587: ST_TO_ADDR
// break ;
 588: GO 592
// end ;
 590: GO 550
 592: POP
 593: POP
// end ;
 594: LD_VAR 0 3
 598: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 599: LD_INT 0
 601: PPUSH
 602: PPUSH
// InitUc ;
 603: CALL_OW 18
// InitHc ;
 607: CALL_OW 19
// uc_side := 0 ;
 611: LD_ADDR_OWVAR 20
 615: PUSH
 616: LD_INT 0
 618: ST_TO_ADDR
// uc_nation := 0 ;
 619: LD_ADDR_OWVAR 21
 623: PUSH
 624: LD_INT 0
 626: ST_TO_ADDR
// for i = 1 to amount do
 627: LD_ADDR_VAR 0 4
 631: PUSH
 632: DOUBLE
 633: LD_INT 1
 635: DEC
 636: ST_TO_ADDR
 637: LD_VAR 0 2
 641: PUSH
 642: FOR_TO
 643: IFFALSE 725
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 645: LD_ADDR_OWVAR 29
 649: PUSH
 650: LD_INT 9
 652: PPUSH
 653: LD_INT 12
 655: PPUSH
 656: CALL_OW 12
 660: PUSH
 661: LD_INT 9
 663: PPUSH
 664: LD_INT 12
 666: PPUSH
 667: CALL_OW 12
 671: PUSH
 672: EMPTY
 673: LIST
 674: LIST
 675: ST_TO_ADDR
// hc_agressivity := rand ( - 5 , 5 ) ;
 676: LD_ADDR_OWVAR 35
 680: PUSH
 681: LD_INT 5
 683: NEG
 684: PPUSH
 685: LD_INT 5
 687: PPUSH
 688: CALL_OW 12
 692: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 693: LD_INT 0
 695: PPUSH
 696: LD_INT 12
 698: PPUSH
 699: LD_INT 1
 701: PPUSH
 702: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 706: CALL_OW 44
 710: PPUSH
 711: LD_VAR 0 1
 715: PPUSH
 716: LD_INT 0
 718: PPUSH
 719: CALL_OW 49
// end ;
 723: GO 642
 725: POP
 726: POP
// InitHc ;
 727: CALL_OW 19
// end ;
 731: LD_VAR 0 3
 735: RET
// export function Attack ( unit , enemy_list ) ; var target , targets_list ; begin
 736: LD_INT 0
 738: PPUSH
 739: PPUSH
 740: PPUSH
// if not unit then
 741: LD_VAR 0 1
 745: NOT
 746: IFFALSE 750
// exit ;
 748: GO 1193
// if IsInUnit ( unit ) then
 750: LD_VAR 0 1
 754: PPUSH
 755: CALL_OW 310
 759: IFFALSE 776
// unit := IsDrivenBy ( unit ) ;
 761: LD_ADDR_VAR 0 1
 765: PUSH
 766: LD_VAR 0 1
 770: PPUSH
 771: CALL_OW 311
 775: ST_TO_ADDR
// targets_list := [ ] ;
 776: LD_ADDR_VAR 0 5
 780: PUSH
 781: EMPTY
 782: ST_TO_ADDR
// target := UnitFilter ( enemy_list , [ [ f_lives , 250 ] , [ f_not , [ f_weapon , us_cargo_bay ] ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 783: LD_ADDR_VAR 0 4
 787: PUSH
 788: LD_VAR 0 2
 792: PPUSH
 793: LD_INT 24
 795: PUSH
 796: LD_INT 250
 798: PUSH
 799: EMPTY
 800: LIST
 801: LIST
 802: PUSH
 803: LD_INT 3
 805: PUSH
 806: LD_INT 34
 808: PUSH
 809: LD_INT 12
 811: PUSH
 812: EMPTY
 813: LIST
 814: LIST
 815: PUSH
 816: EMPTY
 817: LIST
 818: LIST
 819: PUSH
 820: LD_INT 21
 822: PUSH
 823: LD_INT 2
 825: PUSH
 826: EMPTY
 827: LIST
 828: LIST
 829: PUSH
 830: LD_INT 58
 832: PUSH
 833: EMPTY
 834: LIST
 835: PUSH
 836: EMPTY
 837: LIST
 838: LIST
 839: LIST
 840: LIST
 841: PPUSH
 842: CALL_OW 72
 846: ST_TO_ADDR
// if GetDistUnits ( NearestUnitToUnit ( target , unit ) , unit ) < 11 and not IsInUnit ( unit ) then
 847: LD_VAR 0 4
 851: PPUSH
 852: LD_VAR 0 1
 856: PPUSH
 857: CALL_OW 74
 861: PPUSH
 862: LD_VAR 0 1
 866: PPUSH
 867: CALL_OW 296
 871: PUSH
 872: LD_INT 11
 874: LESS
 875: PUSH
 876: LD_VAR 0 1
 880: PPUSH
 881: CALL_OW 310
 885: NOT
 886: AND
 887: IFFALSE 915
// begin ComEnterUnit ( unit , NearestUnitToUnit ( target , unit ) ) ;
 889: LD_VAR 0 1
 893: PPUSH
 894: LD_VAR 0 4
 898: PPUSH
 899: LD_VAR 0 1
 903: PPUSH
 904: CALL_OW 74
 908: PPUSH
 909: CALL_OW 120
// exit ;
 913: GO 1193
// end ; targets_list := [ UnitFilter ( enemy_list , [ [ f_type , unit_human ] , [ f_not , [ f_inside ] ] ] ) , UnitFilter ( enemy_list , [ f_type , unit_vehicle ] ) , UnitFilter ( enemy_list , [ [ f_type , unit_building ] , [ f_not , [ f_empty ] ] ] ) , enemy_list ] ;
 915: LD_ADDR_VAR 0 5
 919: PUSH
 920: LD_VAR 0 2
 924: PPUSH
 925: LD_INT 21
 927: PUSH
 928: LD_INT 1
 930: PUSH
 931: EMPTY
 932: LIST
 933: LIST
 934: PUSH
 935: LD_INT 3
 937: PUSH
 938: LD_INT 54
 940: PUSH
 941: EMPTY
 942: LIST
 943: PUSH
 944: EMPTY
 945: LIST
 946: LIST
 947: PUSH
 948: EMPTY
 949: LIST
 950: LIST
 951: PPUSH
 952: CALL_OW 72
 956: PUSH
 957: LD_VAR 0 2
 961: PPUSH
 962: LD_INT 21
 964: PUSH
 965: LD_INT 2
 967: PUSH
 968: EMPTY
 969: LIST
 970: LIST
 971: PPUSH
 972: CALL_OW 72
 976: PUSH
 977: LD_VAR 0 2
 981: PPUSH
 982: LD_INT 21
 984: PUSH
 985: LD_INT 3
 987: PUSH
 988: EMPTY
 989: LIST
 990: LIST
 991: PUSH
 992: LD_INT 3
 994: PUSH
 995: LD_INT 58
 997: PUSH
 998: EMPTY
 999: LIST
1000: PUSH
1001: EMPTY
1002: LIST
1003: LIST
1004: PUSH
1005: EMPTY
1006: LIST
1007: LIST
1008: PPUSH
1009: CALL_OW 72
1013: PUSH
1014: LD_VAR 0 2
1018: PUSH
1019: EMPTY
1020: LIST
1021: LIST
1022: LIST
1023: LIST
1024: ST_TO_ADDR
// for target in targets_list do
1025: LD_ADDR_VAR 0 4
1029: PUSH
1030: LD_VAR 0 5
1034: PUSH
1035: FOR_IN
1036: IFFALSE 1191
// begin if target then
1038: LD_VAR 0 4
1042: IFFALSE 1189
// if GetTag ( unit ) = 11 and ( GetType ( NearestUnitToUnit ( target , unit ) ) = unit_building or GetWeapon ( NearestUnitToUnit ( target , unit ) ) = us_cargo_bay ) then
1044: LD_VAR 0 1
1048: PPUSH
1049: CALL_OW 110
1053: PUSH
1054: LD_INT 11
1056: EQUAL
1057: PUSH
1058: LD_VAR 0 4
1062: PPUSH
1063: LD_VAR 0 1
1067: PPUSH
1068: CALL_OW 74
1072: PPUSH
1073: CALL_OW 247
1077: PUSH
1078: LD_INT 3
1080: EQUAL
1081: PUSH
1082: LD_VAR 0 4
1086: PPUSH
1087: LD_VAR 0 1
1091: PPUSH
1092: CALL_OW 74
1096: PPUSH
1097: CALL_OW 264
1101: PUSH
1102: LD_INT 12
1104: EQUAL
1105: OR
1106: AND
1107: IFFALSE 1153
// begin ComPlaceDelayedCharge ( unit , 0 , 0 , NearestUnitToUnit ( target , unit ) ) ;
1109: LD_VAR 0 1
1113: PPUSH
1114: LD_INT 0
1116: PPUSH
1117: LD_INT 0
1119: PPUSH
1120: LD_VAR 0 4
1124: PPUSH
1125: LD_VAR 0 1
1129: PPUSH
1130: CALL_OW 74
1134: PPUSH
1135: CALL_OW 132
// SetTag ( unit , 0 ) ;
1139: LD_VAR 0 1
1143: PPUSH
1144: LD_INT 0
1146: PPUSH
1147: CALL_OW 109
// end else
1151: GO 1189
// if not HasTask ( unit ) then
1153: LD_VAR 0 1
1157: PPUSH
1158: CALL_OW 314
1162: NOT
1163: IFFALSE 1189
// ComAttackUnit ( unit , NearestUnitToUnit ( target , unit ) ) ;
1165: LD_VAR 0 1
1169: PPUSH
1170: LD_VAR 0 4
1174: PPUSH
1175: LD_VAR 0 1
1179: PPUSH
1180: CALL_OW 74
1184: PPUSH
1185: CALL_OW 115
// end ;
1189: GO 1035
1191: POP
1192: POP
// end ; end_of_file
1193: LD_VAR 0 3
1197: RET
// export JMM , Gladstone , Harrison , Denis , Brown , Donaldson , Lisa , Frank , Bobby , Cyrus ; export others ; export function PrepareAmericans ; var i , points , veh , tmp ; begin
1198: LD_INT 0
1200: PPUSH
1201: PPUSH
1202: PPUSH
1203: PPUSH
1204: PPUSH
// uc_nation := 1 ;
1205: LD_ADDR_OWVAR 21
1209: PUSH
1210: LD_INT 1
1212: ST_TO_ADDR
// uc_side := 4 ;
1213: LD_ADDR_OWVAR 20
1217: PUSH
1218: LD_INT 4
1220: ST_TO_ADDR
// Denis := PrepareUnit ( Denis , false ,  ) ;
1221: LD_ADDR_EXP 19
1225: PUSH
1226: LD_STRING Denis
1228: PPUSH
1229: LD_INT 0
1231: PPUSH
1232: LD_STRING 
1234: PPUSH
1235: CALL 27843 0 3
1239: ST_TO_ADDR
// Harrison := PrepareUnit ( Harisson , false ,  ) ;
1240: LD_ADDR_EXP 18
1244: PUSH
1245: LD_STRING Harisson
1247: PPUSH
1248: LD_INT 0
1250: PPUSH
1251: LD_STRING 
1253: PPUSH
1254: CALL 27843 0 3
1258: ST_TO_ADDR
// uc_side := 1 ;
1259: LD_ADDR_OWVAR 20
1263: PUSH
1264: LD_INT 1
1266: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debug ) , mission_prefix_prev ) ;
1267: LD_ADDR_EXP 16
1271: PUSH
1272: LD_STRING JMM
1274: PPUSH
1275: LD_EXP 1
1279: NOT
1280: PPUSH
1281: LD_EXP 3
1285: PPUSH
1286: CALL 27843 0 3
1290: ST_TO_ADDR
// Gladstone := PrepareUnit ( Gladstone , false , mission_prefix_prev ) ;
1291: LD_ADDR_EXP 17
1295: PUSH
1296: LD_STRING Gladstone
1298: PPUSH
1299: LD_INT 0
1301: PPUSH
1302: LD_EXP 3
1306: PPUSH
1307: CALL 27843 0 3
1311: ST_TO_ADDR
// if LoadVariable ( BrownInDelta , debug ) then
1312: LD_STRING BrownInDelta
1314: PPUSH
1315: LD_EXP 1
1319: PPUSH
1320: CALL_OW 30
1324: IFFALSE 1366
// begin Brown := PrepareUnit ( Brown , ( not debug ) , mission_prefix_prev ) ;
1326: LD_ADDR_EXP 20
1330: PUSH
1331: LD_STRING Brown
1333: PPUSH
1334: LD_EXP 1
1338: NOT
1339: PPUSH
1340: LD_EXP 3
1344: PPUSH
1345: CALL 27843 0 3
1349: ST_TO_ADDR
// tmp := tmp ^ Brown ;
1350: LD_ADDR_VAR 0 5
1354: PUSH
1355: LD_VAR 0 5
1359: PUSH
1360: LD_EXP 20
1364: ADD
1365: ST_TO_ADDR
// end ; if LoadVariable ( DonaldsonInDelta , debug ) then
1366: LD_STRING DonaldsonInDelta
1368: PPUSH
1369: LD_EXP 1
1373: PPUSH
1374: CALL_OW 30
1378: IFFALSE 1420
// begin Donaldson := PrepareUnit ( Donaldson , ( not debug ) , mission_prefix_prev ) ;
1380: LD_ADDR_EXP 21
1384: PUSH
1385: LD_STRING Donaldson
1387: PPUSH
1388: LD_EXP 1
1392: NOT
1393: PPUSH
1394: LD_EXP 3
1398: PPUSH
1399: CALL 27843 0 3
1403: ST_TO_ADDR
// tmp := tmp ^ Donaldson ;
1404: LD_ADDR_VAR 0 5
1408: PUSH
1409: LD_VAR 0 5
1413: PUSH
1414: LD_EXP 21
1418: ADD
1419: ST_TO_ADDR
// end ; if LoadVariable ( LisaInDelta , debug ) then
1420: LD_STRING LisaInDelta
1422: PPUSH
1423: LD_EXP 1
1427: PPUSH
1428: CALL_OW 30
1432: IFFALSE 1474
// begin Lisa := PrepareUnit ( Lisa , ( not debug ) , mission_prefix_prev ) ;
1434: LD_ADDR_EXP 22
1438: PUSH
1439: LD_STRING Lisa
1441: PPUSH
1442: LD_EXP 1
1446: NOT
1447: PPUSH
1448: LD_EXP 3
1452: PPUSH
1453: CALL 27843 0 3
1457: ST_TO_ADDR
// tmp := tmp ^ Lisa ;
1458: LD_ADDR_VAR 0 5
1462: PUSH
1463: LD_VAR 0 5
1467: PUSH
1468: LD_EXP 22
1472: ADD
1473: ST_TO_ADDR
// end ; if LoadVariable ( FrankInDelta , debug ) then
1474: LD_STRING FrankInDelta
1476: PPUSH
1477: LD_EXP 1
1481: PPUSH
1482: CALL_OW 30
1486: IFFALSE 1528
// begin Frank := PrepareUnit ( Frank , ( not debug ) , mission_prefix_prev ) ;
1488: LD_ADDR_EXP 23
1492: PUSH
1493: LD_STRING Frank
1495: PPUSH
1496: LD_EXP 1
1500: NOT
1501: PPUSH
1502: LD_EXP 3
1506: PPUSH
1507: CALL 27843 0 3
1511: ST_TO_ADDR
// tmp := tmp ^ Frank ;
1512: LD_ADDR_VAR 0 5
1516: PUSH
1517: LD_VAR 0 5
1521: PUSH
1522: LD_EXP 23
1526: ADD
1527: ST_TO_ADDR
// end ; if LoadVariable ( BobbyInDelta , 0 ) then
1528: LD_STRING BobbyInDelta
1530: PPUSH
1531: LD_INT 0
1533: PPUSH
1534: CALL_OW 30
1538: IFFALSE 1580
// begin Bobby := PrepareUnit ( Bobby , ( not debug ) , mission_prefix_prev ) ;
1540: LD_ADDR_EXP 24
1544: PUSH
1545: LD_STRING Bobby
1547: PPUSH
1548: LD_EXP 1
1552: NOT
1553: PPUSH
1554: LD_EXP 3
1558: PPUSH
1559: CALL 27843 0 3
1563: ST_TO_ADDR
// tmp := tmp ^ Bobby ;
1564: LD_ADDR_VAR 0 5
1568: PUSH
1569: LD_VAR 0 5
1573: PUSH
1574: LD_EXP 24
1578: ADD
1579: ST_TO_ADDR
// end ; if LoadVariable ( CyrusInDelta , 0 ) then
1580: LD_STRING CyrusInDelta
1582: PPUSH
1583: LD_INT 0
1585: PPUSH
1586: CALL_OW 30
1590: IFFALSE 1632
// begin Cyrus := PrepareUnit ( Cyrus , ( not debug ) , mission_prefix_prev ) ;
1592: LD_ADDR_EXP 25
1596: PUSH
1597: LD_STRING Cyrus
1599: PPUSH
1600: LD_EXP 1
1604: NOT
1605: PPUSH
1606: LD_EXP 3
1610: PPUSH
1611: CALL 27843 0 3
1615: ST_TO_ADDR
// tmp := tmp ^ Cyrus ;
1616: LD_ADDR_VAR 0 5
1620: PUSH
1621: LD_VAR 0 5
1625: PUSH
1626: LD_EXP 25
1630: ADD
1631: ST_TO_ADDR
// end ; others := CreateCharacterSet ( othersDelta ) ;
1632: LD_ADDR_EXP 26
1636: PUSH
1637: LD_STRING othersDelta
1639: PPUSH
1640: CALL_OW 31
1644: ST_TO_ADDR
// if not others and debug then
1645: LD_EXP 26
1649: NOT
1650: PUSH
1651: LD_EXP 1
1655: AND
1656: IFFALSE 1721
// begin InitHc ;
1658: CALL_OW 19
// for i = 1 to 2 do
1662: LD_ADDR_VAR 0 2
1666: PUSH
1667: DOUBLE
1668: LD_INT 1
1670: DEC
1671: ST_TO_ADDR
1672: LD_INT 2
1674: PUSH
1675: FOR_TO
1676: IFFALSE 1719
// begin PrepareHuman ( false , i mod 4 + 1 , 3 ) ;
1678: LD_INT 0
1680: PPUSH
1681: LD_VAR 0 2
1685: PUSH
1686: LD_INT 4
1688: MOD
1689: PUSH
1690: LD_INT 1
1692: PLUS
1693: PPUSH
1694: LD_INT 3
1696: PPUSH
1697: CALL_OW 380
// others := others ^ CreateHuman ;
1701: LD_ADDR_EXP 26
1705: PUSH
1706: LD_EXP 26
1710: PUSH
1711: CALL_OW 44
1715: ADD
1716: ST_TO_ADDR
// end ;
1717: GO 1675
1719: POP
1720: POP
// end ; if others then
1721: LD_EXP 26
1725: IFFALSE 1743
// tmp := tmp ^ others ;
1727: LD_ADDR_VAR 0 5
1731: PUSH
1732: LD_VAR 0 5
1736: PUSH
1737: LD_EXP 26
1741: ADD
1742: ST_TO_ADDR
// points := [ [ 28 , 49 ] , [ 33 , 54 ] , [ 38 , 56 ] ] ;
1743: LD_ADDR_VAR 0 3
1747: PUSH
1748: LD_INT 28
1750: PUSH
1751: LD_INT 49
1753: PUSH
1754: EMPTY
1755: LIST
1756: LIST
1757: PUSH
1758: LD_INT 33
1760: PUSH
1761: LD_INT 54
1763: PUSH
1764: EMPTY
1765: LIST
1766: LIST
1767: PUSH
1768: LD_INT 38
1770: PUSH
1771: LD_INT 56
1773: PUSH
1774: EMPTY
1775: LIST
1776: LIST
1777: PUSH
1778: EMPTY
1779: LIST
1780: LIST
1781: LIST
1782: ST_TO_ADDR
// veh := PrepareTank ( 1 , 1 , us_medium_wheeled , engine_solar , control_manual , us_cargo_bay , 80 ) ;
1783: LD_ADDR_VAR 0 4
1787: PUSH
1788: LD_INT 1
1790: PPUSH
1791: LD_INT 1
1793: PPUSH
1794: LD_INT 2
1796: PPUSH
1797: LD_INT 2
1799: PPUSH
1800: LD_INT 1
1802: PPUSH
1803: LD_INT 12
1805: PPUSH
1806: LD_INT 80
1808: PPUSH
1809: CALL 431 0 7
1813: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
1814: LD_VAR 0 4
1818: PPUSH
1819: LD_INT 1
1821: PPUSH
1822: CALL_OW 233
// PlaceUnitXY ( veh , points [ 1 ] [ 1 ] , points [ 1 ] [ 2 ] , false ) ;
1826: LD_VAR 0 4
1830: PPUSH
1831: LD_VAR 0 3
1835: PUSH
1836: LD_INT 1
1838: ARRAY
1839: PUSH
1840: LD_INT 1
1842: ARRAY
1843: PPUSH
1844: LD_VAR 0 3
1848: PUSH
1849: LD_INT 1
1851: ARRAY
1852: PUSH
1853: LD_INT 2
1855: ARRAY
1856: PPUSH
1857: LD_INT 0
1859: PPUSH
1860: CALL_OW 48
// SetCargo ( veh , mat_cans , 100 ) ;
1864: LD_VAR 0 4
1868: PPUSH
1869: LD_INT 1
1871: PPUSH
1872: LD_INT 100
1874: PPUSH
1875: CALL_OW 290
// PlaceHumanInUnit ( others [ 1 ] , veh ) ;
1879: LD_EXP 26
1883: PUSH
1884: LD_INT 1
1886: ARRAY
1887: PPUSH
1888: LD_VAR 0 4
1892: PPUSH
1893: CALL_OW 52
// veh := PrepareTank ( 1 , 1 , us_light_wheeled , engine_solar , control_manual , us_machine_gun , 80 ) ;
1897: LD_ADDR_VAR 0 4
1901: PUSH
1902: LD_INT 1
1904: PPUSH
1905: LD_INT 1
1907: PPUSH
1908: LD_INT 1
1910: PPUSH
1911: LD_INT 2
1913: PPUSH
1914: LD_INT 1
1916: PPUSH
1917: LD_INT 2
1919: PPUSH
1920: LD_INT 80
1922: PPUSH
1923: CALL 431 0 7
1927: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
1928: LD_VAR 0 4
1932: PPUSH
1933: LD_INT 1
1935: PPUSH
1936: CALL_OW 233
// PlaceUnitXY ( veh , points [ 2 ] [ 1 ] , points [ 2 ] [ 2 ] , false ) ;
1940: LD_VAR 0 4
1944: PPUSH
1945: LD_VAR 0 3
1949: PUSH
1950: LD_INT 2
1952: ARRAY
1953: PUSH
1954: LD_INT 1
1956: ARRAY
1957: PPUSH
1958: LD_VAR 0 3
1962: PUSH
1963: LD_INT 2
1965: ARRAY
1966: PUSH
1967: LD_INT 2
1969: ARRAY
1970: PPUSH
1971: LD_INT 0
1973: PPUSH
1974: CALL_OW 48
// PlaceHumanInUnit ( Gladstone , veh ) ;
1978: LD_EXP 17
1982: PPUSH
1983: LD_VAR 0 4
1987: PPUSH
1988: CALL_OW 52
// veh := PrepareTank ( 1 , 1 , us_light_wheeled , engine_solar , control_manual , us_light_gun , 80 ) ;
1992: LD_ADDR_VAR 0 4
1996: PUSH
1997: LD_INT 1
1999: PPUSH
2000: LD_INT 1
2002: PPUSH
2003: LD_INT 1
2005: PPUSH
2006: LD_INT 2
2008: PPUSH
2009: LD_INT 1
2011: PPUSH
2012: LD_INT 3
2014: PPUSH
2015: LD_INT 80
2017: PPUSH
2018: CALL 431 0 7
2022: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
2023: LD_VAR 0 4
2027: PPUSH
2028: LD_INT 1
2030: PPUSH
2031: CALL_OW 233
// PlaceUnitXY ( veh , points [ 3 ] [ 1 ] , points [ 3 ] [ 2 ] , false ) ;
2035: LD_VAR 0 4
2039: PPUSH
2040: LD_VAR 0 3
2044: PUSH
2045: LD_INT 3
2047: ARRAY
2048: PUSH
2049: LD_INT 1
2051: ARRAY
2052: PPUSH
2053: LD_VAR 0 3
2057: PUSH
2058: LD_INT 3
2060: ARRAY
2061: PUSH
2062: LD_INT 2
2064: ARRAY
2065: PPUSH
2066: LD_INT 0
2068: PPUSH
2069: CALL_OW 48
// PlaceHumanInUnit ( JMM , veh ) ;
2073: LD_EXP 16
2077: PPUSH
2078: LD_VAR 0 4
2082: PPUSH
2083: CALL_OW 52
// for i in tmp diff others [ 1 ] do
2087: LD_ADDR_VAR 0 2
2091: PUSH
2092: LD_VAR 0 5
2096: PUSH
2097: LD_EXP 26
2101: PUSH
2102: LD_INT 1
2104: ARRAY
2105: DIFF
2106: PUSH
2107: FOR_IN
2108: IFFALSE 2127
// PlaceUnitArea ( i , startArea , false ) ;
2110: LD_VAR 0 2
2114: PPUSH
2115: LD_INT 5
2117: PPUSH
2118: LD_INT 0
2120: PPUSH
2121: CALL_OW 49
2125: GO 2107
2127: POP
2128: POP
// end ; end_of_file
2129: LD_VAR 0 1
2133: RET
// export function Action ; var m ; begin
2134: LD_INT 0
2136: PPUSH
2137: PPUSH
// InGameOn ;
2138: CALL_OW 8
// CenterNowOnXY ( 28 , 51 ) ;
2142: LD_INT 28
2144: PPUSH
2145: LD_INT 51
2147: PPUSH
2148: CALL_OW 86
// Wait ( 3 ) ;
2152: LD_INT 3
2154: PPUSH
2155: CALL_OW 67
// Say ( JMM , D1d-JMM-1a ) ;
2159: LD_EXP 16
2163: PPUSH
2164: LD_STRING D1d-JMM-1a
2166: PPUSH
2167: CALL_OW 88
// SayRadio ( Harrison , D1d-Har-1 ) ;
2171: LD_EXP 18
2175: PPUSH
2176: LD_STRING D1d-Har-1
2178: PPUSH
2179: CALL_OW 94
// InGameOff ;
2183: CALL_OW 9
// SaveForQuickRestart ;
2187: CALL_OW 22
// ChangeMissionObjectives ( M1 ) ;
2191: LD_STRING M1
2193: PPUSH
2194: CALL_OW 337
// Wait ( 0 0$2 ) ;
2198: LD_INT 70
2200: PPUSH
2201: CALL_OW 67
// Say ( JMM , D2-JMM-1 ) ;
2205: LD_EXP 16
2209: PPUSH
2210: LD_STRING D2-JMM-1
2212: PPUSH
2213: CALL_OW 88
// Say ( Gladstone , D2-Glad-1 ) ;
2217: LD_EXP 17
2221: PPUSH
2222: LD_STRING D2-Glad-1
2224: PPUSH
2225: CALL_OW 88
// Say ( JMM , D2-JMM-2 ) ;
2229: LD_EXP 16
2233: PPUSH
2234: LD_STRING D2-JMM-2
2236: PPUSH
2237: CALL_OW 88
// Say ( Gladstone , D2-Glad-2 ) ;
2241: LD_EXP 17
2245: PPUSH
2246: LD_STRING D2-Glad-2
2248: PPUSH
2249: CALL_OW 88
// Say ( JMM , D2-JMM-3 ) ;
2253: LD_EXP 16
2257: PPUSH
2258: LD_STRING D2-JMM-3
2260: PPUSH
2261: CALL_OW 88
// Wait ( rand ( 0 0$30 , 1 1$00 ) ) ;
2265: LD_INT 1050
2267: PPUSH
2268: LD_INT 2100
2270: PPUSH
2271: CALL_OW 12
2275: PPUSH
2276: CALL_OW 67
// SetWeather ( 1 , 570 , 350 ) ;
2280: LD_INT 1
2282: PPUSH
2283: LD_INT 570
2285: PPUSH
2286: LD_INT 350
2288: PPUSH
2289: CALL_OW 550
// Wait ( rand ( 3 3$00 , 5 5$00 ) ) ;
2293: LD_INT 6300
2295: PPUSH
2296: LD_INT 10500
2298: PPUSH
2299: CALL_OW 12
2303: PPUSH
2304: CALL_OW 67
// SetWeather ( 0 , 570 , 350 ) ;
2308: LD_INT 0
2310: PPUSH
2311: LD_INT 570
2313: PPUSH
2314: LD_INT 350
2316: PPUSH
2317: CALL_OW 550
// end ;
2321: LD_VAR 0 1
2325: RET
// every 0 0$01 trigger FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_not , [ f_constructed ] ] , [ f_btype , b_depot ] ] ] ) and not deltaBuilded do
2326: LD_INT 22
2328: PUSH
2329: LD_INT 1
2331: PUSH
2332: EMPTY
2333: LIST
2334: LIST
2335: PUSH
2336: LD_INT 3
2338: PUSH
2339: LD_INT 57
2341: PUSH
2342: EMPTY
2343: LIST
2344: PUSH
2345: EMPTY
2346: LIST
2347: LIST
2348: PUSH
2349: LD_INT 30
2351: PUSH
2352: LD_INT 0
2354: PUSH
2355: EMPTY
2356: LIST
2357: LIST
2358: PUSH
2359: EMPTY
2360: LIST
2361: LIST
2362: LIST
2363: PUSH
2364: EMPTY
2365: LIST
2366: PPUSH
2367: CALL_OW 69
2371: PUSH
2372: LD_EXP 4
2376: NOT
2377: AND
2378: IFFALSE 2391
2380: GO 2382
2382: DISABLE
// begin deltaBuilded := true ;
2383: LD_ADDR_EXP 4
2387: PUSH
2388: LD_INT 1
2390: ST_TO_ADDR
// end ;
2391: END
// every 0 0$01 trigger not Delta and deltaBuilded and FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_not , [ f_constructed ] ] , [ f_btype , b_depot ] ] ] ) do
2392: LD_EXP 6
2396: NOT
2397: PUSH
2398: LD_EXP 4
2402: AND
2403: PUSH
2404: LD_INT 22
2406: PUSH
2407: LD_INT 1
2409: PUSH
2410: EMPTY
2411: LIST
2412: LIST
2413: PUSH
2414: LD_INT 3
2416: PUSH
2417: LD_INT 57
2419: PUSH
2420: EMPTY
2421: LIST
2422: PUSH
2423: EMPTY
2424: LIST
2425: LIST
2426: PUSH
2427: LD_INT 30
2429: PUSH
2430: LD_INT 0
2432: PUSH
2433: EMPTY
2434: LIST
2435: LIST
2436: PUSH
2437: EMPTY
2438: LIST
2439: LIST
2440: LIST
2441: PUSH
2442: EMPTY
2443: LIST
2444: PPUSH
2445: CALL_OW 69
2449: AND
2450: IFFALSE 2536
2452: GO 2454
2454: DISABLE
// begin enable ;
2455: ENABLE
// SetRestrict ( b_depot , 1 , state_disabled ) ;
2456: LD_INT 0
2458: PPUSH
2459: LD_INT 1
2461: PPUSH
2462: LD_INT 0
2464: PPUSH
2465: CALL_OW 324
// Delta := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_not , [ f_constructed ] ] , [ f_btype , b_depot ] ] ] ) [ 1 ] ;
2469: LD_ADDR_EXP 6
2473: PUSH
2474: LD_INT 22
2476: PUSH
2477: LD_INT 1
2479: PUSH
2480: EMPTY
2481: LIST
2482: LIST
2483: PUSH
2484: LD_INT 3
2486: PUSH
2487: LD_INT 57
2489: PUSH
2490: EMPTY
2491: LIST
2492: PUSH
2493: EMPTY
2494: LIST
2495: LIST
2496: PUSH
2497: LD_INT 30
2499: PUSH
2500: LD_INT 0
2502: PUSH
2503: EMPTY
2504: LIST
2505: LIST
2506: PUSH
2507: EMPTY
2508: LIST
2509: LIST
2510: LIST
2511: PUSH
2512: EMPTY
2513: LIST
2514: PPUSH
2515: CALL_OW 69
2519: PUSH
2520: LD_INT 1
2522: ARRAY
2523: ST_TO_ADDR
// SetBName ( Delta , Delta ) ;
2524: LD_EXP 6
2528: PPUSH
2529: LD_STRING Delta
2531: PPUSH
2532: CALL_OW 500
// end ;
2536: END
// every 0 0$2 trigger GetTech ( tech_ApeLang , 1 ) = state_researched and IsOk ( Gladstone ) do
2537: LD_INT 1
2539: PPUSH
2540: LD_INT 1
2542: PPUSH
2543: CALL_OW 321
2547: PUSH
2548: LD_INT 2
2550: EQUAL
2551: PUSH
2552: LD_EXP 17
2556: PPUSH
2557: CALL_OW 302
2561: AND
2562: IFFALSE 2623
2564: GO 2566
2566: DISABLE
// begin DialogueOn ;
2567: CALL_OW 6
// Say ( Gladstone , D3-Glad-1 ) ;
2571: LD_EXP 17
2575: PPUSH
2576: LD_STRING D3-Glad-1
2578: PPUSH
2579: CALL_OW 88
// Say ( JMM , D3-JMM-1 ) ;
2583: LD_EXP 16
2587: PPUSH
2588: LD_STRING D3-JMM-1
2590: PPUSH
2591: CALL_OW 88
// Say ( Gladstone , D3-Glad-2 ) ;
2595: LD_EXP 17
2599: PPUSH
2600: LD_STRING D3-Glad-2
2602: PPUSH
2603: CALL_OW 88
// Say ( JMM , D3-JMM-2 ) ;
2607: LD_EXP 16
2611: PPUSH
2612: LD_STRING D3-JMM-2
2614: PPUSH
2615: CALL_OW 88
// DialogueOff ;
2619: CALL_OW 7
// end ;
2623: END
// every 0 0$1 trigger GetTech ( tech_ApePsych , 1 ) = state_researched do var sol ;
2624: LD_INT 2
2626: PPUSH
2627: LD_INT 1
2629: PPUSH
2630: CALL_OW 321
2634: PUSH
2635: LD_INT 2
2637: EQUAL
2638: IFFALSE 2815
2640: GO 2642
2642: DISABLE
2643: LD_INT 0
2645: PPUSH
// begin DialogueOn ;
2646: CALL_OW 6
// if Frank then
2650: LD_EXP 23
2654: IFFALSE 2668
// Say ( Frank , D8a-Frank-1 ) ;
2656: LD_EXP 23
2660: PPUSH
2661: LD_STRING D8a-Frank-1
2663: PPUSH
2664: CALL_OW 88
// sol := SayX ( UnitFilter ( others , [ f_sex , sex_male ] ) , D8a-Sol1-1 ) ;
2668: LD_ADDR_VAR 0 1
2672: PUSH
2673: LD_EXP 26
2677: PPUSH
2678: LD_INT 26
2680: PUSH
2681: LD_INT 1
2683: PUSH
2684: EMPTY
2685: LIST
2686: LIST
2687: PPUSH
2688: CALL_OW 72
2692: PPUSH
2693: LD_STRING D8a-Sol1-1
2695: PPUSH
2696: CALL 519 0 2
2700: ST_TO_ADDR
// if Denis and GetSide ( Denis ) = 1 then
2701: LD_EXP 19
2705: PUSH
2706: LD_EXP 19
2710: PPUSH
2711: CALL_OW 255
2715: PUSH
2716: LD_INT 1
2718: EQUAL
2719: AND
2720: IFFALSE 2734
// Say ( Denis , D8a-Den-1 ) ;
2722: LD_EXP 19
2726: PPUSH
2727: LD_STRING D8a-Den-1
2729: PPUSH
2730: CALL_OW 88
// if sol or Denis or Frank then
2734: LD_VAR 0 1
2738: PUSH
2739: LD_EXP 19
2743: OR
2744: PUSH
2745: LD_EXP 23
2749: OR
2750: IFFALSE 2811
// begin SayX ( UnitFilter ( others , [ [ f_class , 4 ] , [ f_sex , sex_male ] ] ) diff sol , D8a-Sci1-1 ) ;
2752: LD_EXP 26
2756: PPUSH
2757: LD_INT 25
2759: PUSH
2760: LD_INT 4
2762: PUSH
2763: EMPTY
2764: LIST
2765: LIST
2766: PUSH
2767: LD_INT 26
2769: PUSH
2770: LD_INT 1
2772: PUSH
2773: EMPTY
2774: LIST
2775: LIST
2776: PUSH
2777: EMPTY
2778: LIST
2779: LIST
2780: PPUSH
2781: CALL_OW 72
2785: PUSH
2786: LD_VAR 0 1
2790: DIFF
2791: PPUSH
2792: LD_STRING D8a-Sci1-1
2794: PPUSH
2795: CALL 519 0 2
// Say ( JMM , D8a-JMM-1 ) ;
2799: LD_EXP 16
2803: PPUSH
2804: LD_STRING D8a-JMM-1
2806: PPUSH
2807: CALL_OW 88
// end ; DialogueOff ;
2811: CALL_OW 7
// end ;
2815: PPOPN 1
2817: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_apeman_engineer ] ] ) do
2818: LD_INT 22
2820: PUSH
2821: LD_INT 1
2823: PUSH
2824: EMPTY
2825: LIST
2826: LIST
2827: PUSH
2828: LD_INT 25
2830: PUSH
2831: LD_INT 16
2833: PUSH
2834: EMPTY
2835: LIST
2836: LIST
2837: PUSH
2838: EMPTY
2839: LIST
2840: LIST
2841: PPUSH
2842: CALL_OW 69
2846: IFFALSE 2905
2848: GO 2850
2850: DISABLE
// begin ChangeMissionObjectives ( M1a ) ;
2851: LD_STRING M1a
2853: PPUSH
2854: CALL_OW 337
// case Query ( Q2 ) of 1 :
2858: LD_STRING Q2
2860: PPUSH
2861: CALL_OW 97
2865: PUSH
2866: LD_INT 1
2868: DOUBLE
2869: EQUAL
2870: IFTRUE 2874
2872: GO 2885
2874: POP
// end_mission := true ; 2 :
2875: LD_ADDR_EXP 14
2879: PUSH
2880: LD_INT 1
2882: ST_TO_ADDR
2883: GO 2905
2885: LD_INT 2
2887: DOUBLE
2888: EQUAL
2889: IFTRUE 2893
2891: GO 2904
2893: POP
// end_the_mission_allowed := true ; end ;
2894: LD_ADDR_OWVAR 57
2898: PUSH
2899: LD_INT 1
2901: ST_TO_ADDR
2902: GO 2905
2904: POP
// end ;
2905: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) and Delta do
2906: LD_INT 22
2908: PUSH
2909: LD_INT 1
2911: PUSH
2912: EMPTY
2913: LIST
2914: LIST
2915: PUSH
2916: LD_INT 2
2918: PUSH
2919: LD_INT 30
2921: PUSH
2922: LD_INT 6
2924: PUSH
2925: EMPTY
2926: LIST
2927: LIST
2928: PUSH
2929: LD_INT 30
2931: PUSH
2932: LD_INT 7
2934: PUSH
2935: EMPTY
2936: LIST
2937: LIST
2938: PUSH
2939: EMPTY
2940: LIST
2941: LIST
2942: LIST
2943: PUSH
2944: EMPTY
2945: LIST
2946: LIST
2947: PPUSH
2948: CALL_OW 69
2952: PUSH
2953: LD_INT 22
2955: PUSH
2956: LD_INT 1
2958: PUSH
2959: EMPTY
2960: LIST
2961: LIST
2962: PUSH
2963: LD_INT 2
2965: PUSH
2966: LD_INT 30
2968: PUSH
2969: LD_INT 2
2971: PUSH
2972: EMPTY
2973: LIST
2974: LIST
2975: PUSH
2976: LD_INT 30
2978: PUSH
2979: LD_INT 3
2981: PUSH
2982: EMPTY
2983: LIST
2984: LIST
2985: PUSH
2986: EMPTY
2987: LIST
2988: LIST
2989: LIST
2990: PUSH
2991: EMPTY
2992: LIST
2993: LIST
2994: PPUSH
2995: CALL_OW 69
2999: AND
3000: PUSH
3001: LD_EXP 6
3005: AND
3006: IFFALSE 3521
3008: GO 3010
3010: DISABLE
// begin Wait ( rand ( 0 0$30 , 0 0$50 ) ) ;
3011: LD_INT 1050
3013: PPUSH
3014: LD_INT 1750
3016: PPUSH
3017: CALL_OW 12
3021: PPUSH
3022: CALL_OW 67
// PlaceUnitArea ( Denis , [ denisArea1 , denisArea2 , denisArea3 , denisArea4 ] [ Difficulty ] , false ) ;
3026: LD_EXP 19
3030: PPUSH
3031: LD_INT 6
3033: PUSH
3034: LD_INT 9
3036: PUSH
3037: LD_INT 10
3039: PUSH
3040: LD_INT 16
3042: PUSH
3043: EMPTY
3044: LIST
3045: LIST
3046: LIST
3047: LIST
3048: PUSH
3049: LD_OWVAR 67
3053: ARRAY
3054: PPUSH
3055: LD_INT 0
3057: PPUSH
3058: CALL_OW 49
// ComHold ( Denis ) ;
3062: LD_EXP 19
3066: PPUSH
3067: CALL_OW 140
// InGameOn ;
3071: CALL_OW 8
// DialogueOn ;
3075: CALL_OW 6
// if Delta then
3079: LD_EXP 6
3083: IFFALSE 3096
// CenterNowOnUnits ( Delta ) else
3085: LD_EXP 6
3089: PPUSH
3090: CALL_OW 87
3094: GO 3105
// CenterNowOnUnits ( JMM ) ;
3096: LD_EXP 16
3100: PPUSH
3101: CALL_OW 87
// SayRadio ( Denis , DD-Den-1 ) ;
3105: LD_EXP 19
3109: PPUSH
3110: LD_STRING DD-Den-1
3112: PPUSH
3113: CALL_OW 94
// Say ( JMM , DD-JMM-1 ) ;
3117: LD_EXP 16
3121: PPUSH
3122: LD_STRING DD-JMM-1
3124: PPUSH
3125: CALL_OW 88
// SayRadio ( Denis , DD-Den-2 ) ;
3129: LD_EXP 19
3133: PPUSH
3134: LD_STRING DD-Den-2
3136: PPUSH
3137: CALL_OW 94
// Wait ( 3 ) ;
3141: LD_INT 3
3143: PPUSH
3144: CALL_OW 67
// DialogueOff ;
3148: CALL_OW 7
// InGameOff ;
3152: CALL_OW 9
// if Difficulty = 1 then
3156: LD_OWVAR 67
3160: PUSH
3161: LD_INT 1
3163: EQUAL
3164: IFFALSE 3240
// begin PlaceSeeing ( GetX ( Denis ) , GetY ( Denis ) , 1 , - 12 ) ;
3166: LD_EXP 19
3170: PPUSH
3171: CALL_OW 250
3175: PPUSH
3176: LD_EXP 19
3180: PPUSH
3181: CALL_OW 251
3185: PPUSH
3186: LD_INT 1
3188: PPUSH
3189: LD_INT 12
3191: NEG
3192: PPUSH
3193: CALL_OW 330
// CenterNowOnUnits ( Denis ) ;
3197: LD_EXP 19
3201: PPUSH
3202: CALL_OW 87
// wait ( 0 0$5 ) ;
3206: LD_INT 175
3208: PPUSH
3209: CALL_OW 67
// RemoveSeeing ( GetX ( Denis ) , GetY ( Denis ) , 1 ) ;
3213: LD_EXP 19
3217: PPUSH
3218: CALL_OW 250
3222: PPUSH
3223: LD_EXP 19
3227: PPUSH
3228: CALL_OW 251
3232: PPUSH
3233: LD_INT 1
3235: PPUSH
3236: CALL_OW 331
// end ; repeat wait ( 0 0$01 ) ;
3240: LD_INT 35
3242: PPUSH
3243: CALL_OW 67
// until See ( 1 , Denis ) or IsDead ( Denis ) ;
3247: LD_INT 1
3249: PPUSH
3250: LD_EXP 19
3254: PPUSH
3255: CALL_OW 292
3259: PUSH
3260: LD_EXP 19
3264: PPUSH
3265: CALL_OW 301
3269: OR
3270: IFFALSE 3240
// if IsDead ( Denis ) then
3272: LD_EXP 19
3276: PPUSH
3277: CALL_OW 301
3281: IFFALSE 3285
// exit ;
3283: GO 3521
// SetSide ( Denis , 1 ) ;
3285: LD_EXP 19
3289: PPUSH
3290: LD_INT 1
3292: PPUSH
3293: CALL_OW 235
// Say ( Denis , DD-Den-2a ) ;
3297: LD_EXP 19
3301: PPUSH
3302: LD_STRING DD-Den-2a
3304: PPUSH
3305: CALL_OW 88
// repeat wait ( 0 0$01 ) ;
3309: LD_INT 35
3311: PPUSH
3312: CALL_OW 67
// until GetBType ( IsInUnit ( Denis ) ) in [ b_lab , b_lab_half , b_lab_full ] or IsDead ( Denis ) ;
3316: LD_EXP 19
3320: PPUSH
3321: CALL_OW 310
3325: PPUSH
3326: CALL_OW 266
3330: PUSH
3331: LD_INT 6
3333: PUSH
3334: LD_INT 7
3336: PUSH
3337: LD_INT 8
3339: PUSH
3340: EMPTY
3341: LIST
3342: LIST
3343: LIST
3344: IN
3345: PUSH
3346: LD_EXP 19
3350: PPUSH
3351: CALL_OW 301
3355: OR
3356: IFFALSE 3309
// if IsDead ( Denis ) then
3358: LD_EXP 19
3362: PPUSH
3363: CALL_OW 301
3367: IFFALSE 3371
// exit ;
3369: GO 3521
// Say ( Denis , DD-Den-2b ) ;
3371: LD_EXP 19
3375: PPUSH
3376: LD_STRING DD-Den-2b
3378: PPUSH
3379: CALL_OW 88
// ComChangeProfession ( Denis , 4 ) ;
3383: LD_EXP 19
3387: PPUSH
3388: LD_INT 4
3390: PPUSH
3391: CALL_OW 123
// Wait ( 0 0$02 ) ;
3395: LD_INT 70
3397: PPUSH
3398: CALL_OW 67
// DialogueOn ;
3402: CALL_OW 6
// CenterNowOnUnits ( Denis ) ;
3406: LD_EXP 19
3410: PPUSH
3411: CALL_OW 87
// Say ( JMM , D4-JMM-1 ) ;
3415: LD_EXP 16
3419: PPUSH
3420: LD_STRING D4-JMM-1
3422: PPUSH
3423: CALL_OW 88
// Say ( Denis , D4-Den-1 ) ;
3427: LD_EXP 19
3431: PPUSH
3432: LD_STRING D4-Den-1
3434: PPUSH
3435: CALL_OW 88
// Say ( JMM , D4-JMM-2 ) ;
3439: LD_EXP 16
3443: PPUSH
3444: LD_STRING D4-JMM-2
3446: PPUSH
3447: CALL_OW 88
// Say ( Denis , D4-Den-2 ) ;
3451: LD_EXP 19
3455: PPUSH
3456: LD_STRING D4-Den-2
3458: PPUSH
3459: CALL_OW 88
// DialogueOff ;
3463: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
3467: LD_STRING M2
3469: PPUSH
3470: CALL_OW 337
// radar_allowed := true ;
3474: LD_ADDR_EXP 7
3478: PUSH
3479: LD_INT 1
3481: ST_TO_ADDR
// SetTech ( tech_radar , 1 , state_enabled ) ;
3482: LD_INT 6
3484: PPUSH
3485: LD_INT 1
3487: PPUSH
3488: LD_INT 1
3490: PPUSH
3491: CALL_OW 322
// SetRestrict ( b_lab_opto , 1 , state_enabled ) ;
3495: LD_INT 15
3497: PPUSH
3498: LD_INT 1
3500: PPUSH
3501: LD_INT 1
3503: PPUSH
3504: CALL_OW 324
// SetRestrict ( b_ext_radar , 1 , state_enabled ) ;
3508: LD_INT 20
3510: PPUSH
3511: LD_INT 1
3513: PPUSH
3514: LD_INT 1
3516: PPUSH
3517: CALL_OW 324
// end ;
3521: END
// every 0 0$1 trigger arab_spotted do var sol , sol2 ;
3522: LD_EXP 13
3526: IFFALSE 4149
3528: GO 3530
3530: DISABLE
3531: LD_INT 0
3533: PPUSH
3534: PPUSH
// begin sol := SayX ( UnitFilter ( others , [ f_sex , sex_male ] ) , D5-Sol1-1 ) ;
3535: LD_ADDR_VAR 0 1
3539: PUSH
3540: LD_EXP 26
3544: PPUSH
3545: LD_INT 26
3547: PUSH
3548: LD_INT 1
3550: PUSH
3551: EMPTY
3552: LIST
3553: LIST
3554: PPUSH
3555: CALL_OW 72
3559: PPUSH
3560: LD_STRING D5-Sol1-1
3562: PPUSH
3563: CALL 519 0 2
3567: ST_TO_ADDR
// if not sol then
3568: LD_VAR 0 1
3572: NOT
3573: IFFALSE 3577
// exit ;
3575: GO 4149
// repeat wait ( 0 0$01 ) ;
3577: LD_INT 35
3579: PPUSH
3580: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) = 0 ;
3584: LD_INT 22
3586: PUSH
3587: LD_INT 2
3589: PUSH
3590: EMPTY
3591: LIST
3592: LIST
3593: PUSH
3594: LD_INT 21
3596: PUSH
3597: LD_INT 1
3599: PUSH
3600: EMPTY
3601: LIST
3602: LIST
3603: PUSH
3604: EMPTY
3605: LIST
3606: LIST
3607: PPUSH
3608: CALL_OW 69
3612: PUSH
3613: LD_INT 0
3615: EQUAL
3616: IFFALSE 3577
// if IsOk ( sol ) then
3618: LD_VAR 0 1
3622: PPUSH
3623: CALL_OW 302
3627: IFFALSE 3647
// begin sol2 := others diff sol ;
3629: LD_ADDR_VAR 0 2
3633: PUSH
3634: LD_EXP 26
3638: PUSH
3639: LD_VAR 0 1
3643: DIFF
3644: ST_TO_ADDR
// end else
3645: GO 3649
// exit ;
3647: GO 4149
// if not Lisa and not sol2 then
3649: LD_EXP 22
3653: NOT
3654: PUSH
3655: LD_VAR 0 2
3659: NOT
3660: AND
3661: IFFALSE 3665
// exit ;
3663: GO 4149
// DialogueOn ;
3665: CALL_OW 6
// if Lisa then
3669: LD_EXP 22
3673: IFFALSE 3689
// Say ( Lisa , D5a-Lisa-1 ) else
3675: LD_EXP 22
3679: PPUSH
3680: LD_STRING D5a-Lisa-1
3682: PPUSH
3683: CALL_OW 88
3687: GO 3764
// if sol2 then
3689: LD_VAR 0 2
3693: IFFALSE 3764
// case GetSex ( sol2 [ 1 ] ) of sex_male :
3695: LD_VAR 0 2
3699: PUSH
3700: LD_INT 1
3702: ARRAY
3703: PPUSH
3704: CALL_OW 258
3708: PUSH
3709: LD_INT 1
3711: DOUBLE
3712: EQUAL
3713: IFTRUE 3717
3715: GO 3736
3717: POP
// Say ( sol2 [ 1 ] , D5-Sol2-1 ) ; sex_female :
3718: LD_VAR 0 2
3722: PUSH
3723: LD_INT 1
3725: ARRAY
3726: PPUSH
3727: LD_STRING D5-Sol2-1
3729: PPUSH
3730: CALL_OW 88
3734: GO 3764
3736: LD_INT 2
3738: DOUBLE
3739: EQUAL
3740: IFTRUE 3744
3742: GO 3763
3744: POP
// Say ( sol2 [ 1 ] , D5-FSol2-1 ) ; end ;
3745: LD_VAR 0 2
3749: PUSH
3750: LD_INT 1
3752: ARRAY
3753: PPUSH
3754: LD_STRING D5-FSol2-1
3756: PPUSH
3757: CALL_OW 88
3761: GO 3764
3763: POP
// Say ( sol , D5-Sol1-2 ) ;
3764: LD_VAR 0 1
3768: PPUSH
3769: LD_STRING D5-Sol1-2
3771: PPUSH
3772: CALL_OW 88
// if Lisa then
3776: LD_EXP 22
3780: IFFALSE 3796
// Say ( Lisa , D5a-Lisa-2 ) else
3782: LD_EXP 22
3786: PPUSH
3787: LD_STRING D5a-Lisa-2
3789: PPUSH
3790: CALL_OW 88
3794: GO 3871
// if sol2 then
3796: LD_VAR 0 2
3800: IFFALSE 3871
// case GetSex ( sol2 [ 1 ] ) of sex_male :
3802: LD_VAR 0 2
3806: PUSH
3807: LD_INT 1
3809: ARRAY
3810: PPUSH
3811: CALL_OW 258
3815: PUSH
3816: LD_INT 1
3818: DOUBLE
3819: EQUAL
3820: IFTRUE 3824
3822: GO 3843
3824: POP
// Say ( sol2 [ 1 ] , D5-Sol2-2 ) ; sex_female :
3825: LD_VAR 0 2
3829: PUSH
3830: LD_INT 1
3832: ARRAY
3833: PPUSH
3834: LD_STRING D5-Sol2-2
3836: PPUSH
3837: CALL_OW 88
3841: GO 3871
3843: LD_INT 2
3845: DOUBLE
3846: EQUAL
3847: IFTRUE 3851
3849: GO 3870
3851: POP
// Say ( sol2 [ 1 ] , D5-FSol2-2 ) ; end ;
3852: LD_VAR 0 2
3856: PUSH
3857: LD_INT 1
3859: ARRAY
3860: PPUSH
3861: LD_STRING D5-FSol2-2
3863: PPUSH
3864: CALL_OW 88
3868: GO 3871
3870: POP
// Say ( sol , D5a-Sol1-3 ) ;
3871: LD_VAR 0 1
3875: PPUSH
3876: LD_STRING D5a-Sol1-3
3878: PPUSH
3879: CALL_OW 88
// if Lisa then
3883: LD_EXP 22
3887: IFFALSE 3901
// Say ( Lisa , D5a-Lisa-3 ) ;
3889: LD_EXP 22
3893: PPUSH
3894: LD_STRING D5a-Lisa-3
3896: PPUSH
3897: CALL_OW 88
// if not sol2 then
3901: LD_VAR 0 2
3905: NOT
3906: IFFALSE 3914
// begin DialogueOff ;
3908: CALL_OW 7
// exit ;
3912: GO 4149
// end ; case GetSex ( sol2 [ 1 ] ) of sex_male :
3914: LD_VAR 0 2
3918: PUSH
3919: LD_INT 1
3921: ARRAY
3922: PPUSH
3923: CALL_OW 258
3927: PUSH
3928: LD_INT 1
3930: DOUBLE
3931: EQUAL
3932: IFTRUE 3936
3934: GO 3955
3936: POP
// Say ( sol2 [ 1 ] , D5-Sol2-3 ) ; sex_female :
3937: LD_VAR 0 2
3941: PUSH
3942: LD_INT 1
3944: ARRAY
3945: PPUSH
3946: LD_STRING D5-Sol2-3
3948: PPUSH
3949: CALL_OW 88
3953: GO 3983
3955: LD_INT 2
3957: DOUBLE
3958: EQUAL
3959: IFTRUE 3963
3961: GO 3982
3963: POP
// Say ( sol2 [ 1 ] , D5-FSol2-3 ) ; end ;
3964: LD_VAR 0 2
3968: PUSH
3969: LD_INT 1
3971: ARRAY
3972: PPUSH
3973: LD_STRING D5-FSol2-3
3975: PPUSH
3976: CALL_OW 88
3980: GO 3983
3982: POP
// Say ( sol , D5-Sol1-4 ) ;
3983: LD_VAR 0 1
3987: PPUSH
3988: LD_STRING D5-Sol1-4
3990: PPUSH
3991: CALL_OW 88
// case GetSex ( sol2 [ 1 ] ) of sex_male :
3995: LD_VAR 0 2
3999: PUSH
4000: LD_INT 1
4002: ARRAY
4003: PPUSH
4004: CALL_OW 258
4008: PUSH
4009: LD_INT 1
4011: DOUBLE
4012: EQUAL
4013: IFTRUE 4017
4015: GO 4036
4017: POP
// Say ( sol2 [ 1 ] , D5-Sol2-4 ) ; sex_female :
4018: LD_VAR 0 2
4022: PUSH
4023: LD_INT 1
4025: ARRAY
4026: PPUSH
4027: LD_STRING D5-Sol2-4
4029: PPUSH
4030: CALL_OW 88
4034: GO 4064
4036: LD_INT 2
4038: DOUBLE
4039: EQUAL
4040: IFTRUE 4044
4042: GO 4063
4044: POP
// Say ( sol2 [ 1 ] , D5-FSol2-4 ) ; end ;
4045: LD_VAR 0 2
4049: PUSH
4050: LD_INT 1
4052: ARRAY
4053: PPUSH
4054: LD_STRING D5-FSol2-4
4056: PPUSH
4057: CALL_OW 88
4061: GO 4064
4063: POP
// Say ( sol , D5-Sol1-5 ) ;
4064: LD_VAR 0 1
4068: PPUSH
4069: LD_STRING D5-Sol1-5
4071: PPUSH
4072: CALL_OW 88
// case GetSex ( sol2 [ 1 ] ) of sex_male :
4076: LD_VAR 0 2
4080: PUSH
4081: LD_INT 1
4083: ARRAY
4084: PPUSH
4085: CALL_OW 258
4089: PUSH
4090: LD_INT 1
4092: DOUBLE
4093: EQUAL
4094: IFTRUE 4098
4096: GO 4117
4098: POP
// Say ( sol2 [ 1 ] , D5-Sol2-5 ) ; sex_female :
4099: LD_VAR 0 2
4103: PUSH
4104: LD_INT 1
4106: ARRAY
4107: PPUSH
4108: LD_STRING D5-Sol2-5
4110: PPUSH
4111: CALL_OW 88
4115: GO 4145
4117: LD_INT 2
4119: DOUBLE
4120: EQUAL
4121: IFTRUE 4125
4123: GO 4144
4125: POP
// Say ( sol2 [ 1 ] , D5-FSol2-5 ) ; end ;
4126: LD_VAR 0 2
4130: PUSH
4131: LD_INT 1
4133: ARRAY
4134: PPUSH
4135: LD_STRING D5-FSol2-5
4137: PPUSH
4138: CALL_OW 88
4142: GO 4145
4144: POP
// DialogueOff ;
4145: CALL_OW 7
// end ;
4149: PPOPN 2
4151: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_apeman_engineer ] ] ) >= 5 do
4152: LD_INT 22
4154: PUSH
4155: LD_INT 1
4157: PUSH
4158: EMPTY
4159: LIST
4160: LIST
4161: PUSH
4162: LD_INT 25
4164: PUSH
4165: LD_INT 16
4167: PUSH
4168: EMPTY
4169: LIST
4170: LIST
4171: PUSH
4172: EMPTY
4173: LIST
4174: LIST
4175: PPUSH
4176: CALL_OW 69
4180: PUSH
4181: LD_INT 5
4183: GREATEREQUAL
4184: IFFALSE 4204
4186: GO 4188
4188: DISABLE
// begin ChangeMissionObjectives ( M1b ) ;
4189: LD_STRING M1b
4191: PPUSH
4192: CALL_OW 337
// apeman_army := true ;
4196: LD_ADDR_EXP 9
4200: PUSH
4201: LD_INT 1
4203: ST_TO_ADDR
// end ;
4204: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] , [ f_constructed ] ] ) do
4205: LD_INT 22
4207: PUSH
4208: LD_INT 1
4210: PUSH
4211: EMPTY
4212: LIST
4213: LIST
4214: PUSH
4215: LD_INT 30
4217: PUSH
4218: LD_INT 3
4220: PUSH
4221: EMPTY
4222: LIST
4223: LIST
4224: PUSH
4225: LD_INT 57
4227: PUSH
4228: EMPTY
4229: LIST
4230: PUSH
4231: EMPTY
4232: LIST
4233: LIST
4234: LIST
4235: PPUSH
4236: CALL_OW 69
4240: IFFALSE 4252
4242: GO 4244
4244: DISABLE
// ChangeMissionObjectives ( M1c ) ;
4245: LD_STRING M1c
4247: PPUSH
4248: CALL_OW 337
4252: END
// every 0 0$1 trigger GetTech ( tech_radar , 1 ) = state_researched do
4253: LD_INT 6
4255: PPUSH
4256: LD_INT 1
4258: PPUSH
4259: CALL_OW 321
4263: PUSH
4264: LD_INT 2
4266: EQUAL
4267: IFFALSE 4287
4269: GO 4271
4271: DISABLE
// begin ChangeMissionObjectives ( M2a ) ;
4272: LD_STRING M2a
4274: PPUSH
4275: CALL_OW 337
// radar_researched := true ;
4279: LD_ADDR_EXP 10
4283: PUSH
4284: LD_INT 1
4286: ST_TO_ADDR
// end ;
4287: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_weapon , us_radar ] , [ f_bweapon , us_radar ] ] ] ) do
4288: LD_INT 22
4290: PUSH
4291: LD_INT 1
4293: PUSH
4294: EMPTY
4295: LIST
4296: LIST
4297: PUSH
4298: LD_INT 2
4300: PUSH
4301: LD_INT 34
4303: PUSH
4304: LD_INT 11
4306: PUSH
4307: EMPTY
4308: LIST
4309: LIST
4310: PUSH
4311: LD_INT 35
4313: PUSH
4314: LD_INT 11
4316: PUSH
4317: EMPTY
4318: LIST
4319: LIST
4320: PUSH
4321: EMPTY
4322: LIST
4323: LIST
4324: LIST
4325: PUSH
4326: EMPTY
4327: LIST
4328: LIST
4329: PPUSH
4330: CALL_OW 69
4334: IFFALSE 4354
4336: GO 4338
4338: DISABLE
// begin ChangeMissionObjectives ( M2b ) ;
4339: LD_STRING M2b
4341: PPUSH
4342: CALL_OW 337
// radar_builded := true ;
4346: LD_ADDR_EXP 11
4350: PUSH
4351: LD_INT 1
4353: ST_TO_ADDR
// end ;
4354: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) = 0 and not first_apeman_tamed do
4355: LD_INT 22
4357: PUSH
4358: LD_INT 0
4360: PUSH
4361: EMPTY
4362: LIST
4363: LIST
4364: PUSH
4365: LD_INT 25
4367: PUSH
4368: LD_INT 12
4370: PUSH
4371: EMPTY
4372: LIST
4373: LIST
4374: PUSH
4375: EMPTY
4376: LIST
4377: LIST
4378: PPUSH
4379: CALL_OW 69
4383: PUSH
4384: LD_INT 0
4386: EQUAL
4387: PUSH
4388: LD_EXP 8
4392: NOT
4393: AND
4394: IFFALSE 4406
4396: GO 4398
4398: DISABLE
// YouLost ( Apeman ) ;
4399: LD_STRING Apeman
4401: PPUSH
4402: CALL_OW 104
4406: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_apeman_engineer ] ] ) >= 7 do var i , filter ;
4407: LD_INT 22
4409: PUSH
4410: LD_INT 1
4412: PUSH
4413: EMPTY
4414: LIST
4415: LIST
4416: PUSH
4417: LD_INT 25
4419: PUSH
4420: LD_INT 16
4422: PUSH
4423: EMPTY
4424: LIST
4425: LIST
4426: PUSH
4427: EMPTY
4428: LIST
4429: LIST
4430: PPUSH
4431: CALL_OW 69
4435: PUSH
4436: LD_INT 7
4438: GREATEREQUAL
4439: IFFALSE 4537
4441: GO 4443
4443: DISABLE
4444: LD_INT 0
4446: PPUSH
4447: PPUSH
// begin filter := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 4 ] ] ) ^ JMM ;
4448: LD_ADDR_VAR 0 2
4452: PUSH
4453: LD_INT 22
4455: PUSH
4456: LD_INT 1
4458: PUSH
4459: EMPTY
4460: LIST
4461: LIST
4462: PUSH
4463: LD_INT 21
4465: PUSH
4466: LD_INT 1
4468: PUSH
4469: EMPTY
4470: LIST
4471: LIST
4472: PUSH
4473: LD_INT 25
4475: PUSH
4476: LD_INT 4
4478: PUSH
4479: EMPTY
4480: LIST
4481: LIST
4482: PUSH
4483: EMPTY
4484: LIST
4485: LIST
4486: LIST
4487: PPUSH
4488: CALL_OW 69
4492: PUSH
4493: LD_EXP 16
4497: ADD
4498: ST_TO_ADDR
// if filter then
4499: LD_VAR 0 2
4503: IFFALSE 4537
// for i in filter do
4505: LD_ADDR_VAR 0 1
4509: PUSH
4510: LD_VAR 0 2
4514: PUSH
4515: FOR_IN
4516: IFFALSE 4535
// AddExperience ( i , 4 , 3500 ) ;
4518: LD_VAR 0 1
4522: PPUSH
4523: LD_INT 4
4525: PPUSH
4526: LD_INT 3500
4528: PPUSH
4529: CALL_OW 492
4533: GO 4515
4535: POP
4536: POP
// end ;
4537: PPOPN 2
4539: END
// every 0 0$1 trigger end_mission do var i , tmp , m1 , m2 , m3 ;
4540: LD_EXP 14
4544: IFFALSE 5678
4546: GO 4548
4548: DISABLE
4549: LD_INT 0
4551: PPUSH
4552: PPUSH
4553: PPUSH
4554: PPUSH
4555: PPUSH
// begin if apeKillCounter = 0 then
4556: LD_EXP 15
4560: PUSH
4561: LD_INT 0
4563: EQUAL
4564: IFFALSE 4573
// SetAchievement ( ACH_APEKILLER ) ;
4566: LD_STRING ACH_APEKILLER
4568: PPUSH
4569: CALL_OW 543
// if FilterAllUnits ( [ f_side , 2 ] ) then
4573: LD_INT 22
4575: PUSH
4576: LD_INT 2
4578: PUSH
4579: EMPTY
4580: LIST
4581: LIST
4582: PPUSH
4583: CALL_OW 69
4587: IFFALSE 4625
// for i in FilterAllUnits ( [ f_side , 2 ] ) do
4589: LD_ADDR_VAR 0 1
4593: PUSH
4594: LD_INT 22
4596: PUSH
4597: LD_INT 2
4599: PUSH
4600: EMPTY
4601: LIST
4602: LIST
4603: PPUSH
4604: CALL_OW 69
4608: PUSH
4609: FOR_IN
4610: IFFALSE 4623
// RemoveUnit ( i ) ;
4612: LD_VAR 0 1
4616: PPUSH
4617: CALL_OW 64
4621: GO 4609
4623: POP
4624: POP
// m1 := false ;
4625: LD_ADDR_VAR 0 3
4629: PUSH
4630: LD_INT 0
4632: ST_TO_ADDR
// m2 := false ;
4633: LD_ADDR_VAR 0 4
4637: PUSH
4638: LD_INT 0
4640: ST_TO_ADDR
// m3 := false ;
4641: LD_ADDR_VAR 0 5
4645: PUSH
4646: LD_INT 0
4648: ST_TO_ADDR
// if apeman_army then
4649: LD_EXP 9
4653: IFFALSE 4675
// begin AddMedal ( Tame , 1 ) ;
4655: LD_STRING Tame
4657: PPUSH
4658: LD_INT 1
4660: PPUSH
4661: CALL_OW 101
// m1 := true ;
4665: LD_ADDR_VAR 0 3
4669: PUSH
4670: LD_INT 1
4672: ST_TO_ADDR
// end else
4673: GO 4686
// AddMedal ( Tame , - 1 ) ;
4675: LD_STRING Tame
4677: PPUSH
4678: LD_INT 1
4680: NEG
4681: PPUSH
4682: CALL_OW 101
// if radar_researched then
4686: LD_EXP 10
4690: IFFALSE 4722
// begin SaveVariable ( true , radarResInDelta ) ;
4692: LD_INT 1
4694: PPUSH
4695: LD_STRING radarResInDelta
4697: PPUSH
4698: CALL_OW 39
// AddMedal ( Radar , 1 ) ;
4702: LD_STRING Radar
4704: PPUSH
4705: LD_INT 1
4707: PPUSH
4708: CALL_OW 101
// m2 := true ;
4712: LD_ADDR_VAR 0 4
4716: PUSH
4717: LD_INT 1
4719: ST_TO_ADDR
// end else
4720: GO 4752
// if radar_allowed then
4722: LD_EXP 7
4726: IFFALSE 4741
// AddMedal ( Radar , - 2 ) else
4728: LD_STRING Radar
4730: PPUSH
4731: LD_INT 2
4733: NEG
4734: PPUSH
4735: CALL_OW 101
4739: GO 4752
// AddMedal ( Radar , - 1 ) ;
4741: LD_STRING Radar
4743: PPUSH
4744: LD_INT 1
4746: NEG
4747: PPUSH
4748: CALL_OW 101
// if radar_builded then
4752: LD_EXP 11
4756: IFFALSE 4778
// begin AddMedal ( BuildRadar , 1 ) ;
4758: LD_STRING BuildRadar
4760: PPUSH
4761: LD_INT 1
4763: PPUSH
4764: CALL_OW 101
// m3 := true ;
4768: LD_ADDR_VAR 0 5
4772: PUSH
4773: LD_INT 1
4775: ST_TO_ADDR
// end else
4776: GO 4789
// AddMedal ( BuildRadar , - 1 ) ;
4778: LD_STRING BuildRadar
4780: PPUSH
4781: LD_INT 1
4783: NEG
4784: PPUSH
4785: CALL_OW 101
// if tick <= 7 7$00 then
4789: LD_OWVAR 1
4793: PUSH
4794: LD_INT 14700
4796: LESSEQUAL
4797: IFFALSE 4806
// SetAchievement ( ACH_ASPEED_5 ) ;
4799: LD_STRING ACH_ASPEED_5
4801: PPUSH
4802: CALL_OW 543
// if m1 and m2 and m3 and Difficulty >= 3 then
4806: LD_VAR 0 3
4810: PUSH
4811: LD_VAR 0 4
4815: AND
4816: PUSH
4817: LD_VAR 0 5
4821: AND
4822: PUSH
4823: LD_OWVAR 67
4827: PUSH
4828: LD_INT 3
4830: GREATEREQUAL
4831: AND
4832: IFFALSE 4844
// SetAchievementEX ( ACH_AMER , 5 ) ;
4834: LD_STRING ACH_AMER
4836: PPUSH
4837: LD_INT 5
4839: PPUSH
4840: CALL_OW 564
// GiveMedals ( MAIN ) ;
4844: LD_STRING MAIN
4846: PPUSH
4847: CALL_OW 102
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ;
4851: LD_ADDR_VAR 0 2
4855: PUSH
4856: LD_INT 22
4858: PUSH
4859: LD_INT 1
4861: PUSH
4862: EMPTY
4863: LIST
4864: LIST
4865: PUSH
4866: LD_INT 21
4868: PUSH
4869: LD_INT 1
4871: PUSH
4872: EMPTY
4873: LIST
4874: LIST
4875: PUSH
4876: LD_INT 2
4878: PUSH
4879: LD_INT 25
4881: PUSH
4882: LD_INT 1
4884: PUSH
4885: EMPTY
4886: LIST
4887: LIST
4888: PUSH
4889: LD_INT 25
4891: PUSH
4892: LD_INT 2
4894: PUSH
4895: EMPTY
4896: LIST
4897: LIST
4898: PUSH
4899: LD_INT 25
4901: PUSH
4902: LD_INT 3
4904: PUSH
4905: EMPTY
4906: LIST
4907: LIST
4908: PUSH
4909: LD_INT 25
4911: PUSH
4912: LD_INT 4
4914: PUSH
4915: EMPTY
4916: LIST
4917: LIST
4918: PUSH
4919: EMPTY
4920: LIST
4921: LIST
4922: LIST
4923: LIST
4924: LIST
4925: PUSH
4926: EMPTY
4927: LIST
4928: LIST
4929: LIST
4930: PPUSH
4931: CALL_OW 69
4935: ST_TO_ADDR
// RewardPeople ( tmp ) ;
4936: LD_VAR 0 2
4940: PPUSH
4941: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
4945: LD_EXP 16
4949: PPUSH
4950: LD_EXP 2
4954: PUSH
4955: LD_STRING JMM
4957: STR
4958: PPUSH
4959: CALL_OW 38
// if IsOk ( Gladstone ) then
4963: LD_EXP 17
4967: PPUSH
4968: CALL_OW 302
4972: IFFALSE 4992
// begin SaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
4974: LD_EXP 17
4978: PPUSH
4979: LD_EXP 2
4983: PUSH
4984: LD_STRING Gladstone
4986: STR
4987: PPUSH
4988: CALL_OW 38
// end ; if IsOk ( Denis ) and GetSide ( Denis ) = 1 then
4992: LD_EXP 19
4996: PPUSH
4997: CALL_OW 302
5001: PUSH
5002: LD_EXP 19
5006: PPUSH
5007: CALL_OW 255
5011: PUSH
5012: LD_INT 1
5014: EQUAL
5015: AND
5016: IFFALSE 5046
// begin SaveCharacters ( Denis , mission_prefix & Denis ) ;
5018: LD_EXP 19
5022: PPUSH
5023: LD_EXP 2
5027: PUSH
5028: LD_STRING Denis
5030: STR
5031: PPUSH
5032: CALL_OW 38
// SaveVariable ( true , DenisInDelta ) ;
5036: LD_INT 1
5038: PPUSH
5039: LD_STRING DenisInDelta
5041: PPUSH
5042: CALL_OW 39
// end ; if IsOk ( Lisa ) then
5046: LD_EXP 22
5050: PPUSH
5051: CALL_OW 302
5055: IFFALSE 5075
// begin SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
5057: LD_EXP 22
5061: PPUSH
5062: LD_EXP 2
5066: PUSH
5067: LD_STRING Lisa
5069: STR
5070: PPUSH
5071: CALL_OW 38
// end ; if IsOk ( Frank ) then
5075: LD_EXP 23
5079: PPUSH
5080: CALL_OW 302
5084: IFFALSE 5104
// begin SaveCharacters ( Frank , mission_prefix & Frank ) ;
5086: LD_EXP 23
5090: PPUSH
5091: LD_EXP 2
5095: PUSH
5096: LD_STRING Frank
5098: STR
5099: PPUSH
5100: CALL_OW 38
// end ; if IsOk ( Bobby ) then
5104: LD_EXP 24
5108: PPUSH
5109: CALL_OW 302
5113: IFFALSE 5133
// begin SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
5115: LD_EXP 24
5119: PPUSH
5120: LD_EXP 2
5124: PUSH
5125: LD_STRING Bobby
5127: STR
5128: PPUSH
5129: CALL_OW 38
// end ; if IsOk ( Cyrus ) then
5133: LD_EXP 25
5137: PPUSH
5138: CALL_OW 302
5142: IFFALSE 5162
// begin SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
5144: LD_EXP 25
5148: PPUSH
5149: LD_EXP 2
5153: PUSH
5154: LD_STRING Cyrus
5156: STR
5157: PPUSH
5158: CALL_OW 38
// end ; if IsOk ( Brown ) then
5162: LD_EXP 20
5166: PPUSH
5167: CALL_OW 302
5171: IFFALSE 5191
// begin SaveCharacters ( Brown , mission_prefix & Brown ) ;
5173: LD_EXP 20
5177: PPUSH
5178: LD_EXP 2
5182: PUSH
5183: LD_STRING Brown
5185: STR
5186: PPUSH
5187: CALL_OW 38
// end ; if IsOk ( Donaldson ) then
5191: LD_EXP 21
5195: PPUSH
5196: CALL_OW 302
5200: IFFALSE 5220
// begin SaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
5202: LD_EXP 21
5206: PPUSH
5207: LD_EXP 2
5211: PUSH
5212: LD_STRING Donaldson
5214: STR
5215: PPUSH
5216: CALL_OW 38
// end ; if others then
5220: LD_EXP 26
5224: IFFALSE 5238
// SaveCharacters ( others , othersInDelta ) ;
5226: LD_EXP 26
5230: PPUSH
5231: LD_STRING othersInDelta
5233: PPUSH
5234: CALL_OW 38
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_apeman_engineer ] ] ) then
5238: LD_INT 22
5240: PUSH
5241: LD_INT 1
5243: PUSH
5244: EMPTY
5245: LIST
5246: LIST
5247: PUSH
5248: LD_INT 25
5250: PUSH
5251: LD_INT 16
5253: PUSH
5254: EMPTY
5255: LIST
5256: LIST
5257: PUSH
5258: EMPTY
5259: LIST
5260: LIST
5261: PPUSH
5262: CALL_OW 69
5266: IFFALSE 5304
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_apeman_engineer ] ] ) , apeInDelta ) ;
5268: LD_INT 22
5270: PUSH
5271: LD_INT 1
5273: PUSH
5274: EMPTY
5275: LIST
5276: LIST
5277: PUSH
5278: LD_INT 25
5280: PUSH
5281: LD_INT 16
5283: PUSH
5284: EMPTY
5285: LIST
5286: LIST
5287: PUSH
5288: EMPTY
5289: LIST
5290: LIST
5291: PPUSH
5292: CALL_OW 69
5296: PPUSH
5297: LD_STRING apeInDelta
5299: PPUSH
5300: CALL_OW 38
// tmp := [ ] ;
5304: LD_ADDR_VAR 0 2
5308: PUSH
5309: EMPTY
5310: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) then
5311: LD_INT 22
5313: PUSH
5314: LD_INT 1
5316: PUSH
5317: EMPTY
5318: LIST
5319: LIST
5320: PUSH
5321: LD_INT 21
5323: PUSH
5324: LD_INT 2
5326: PUSH
5327: EMPTY
5328: LIST
5329: LIST
5330: PUSH
5331: EMPTY
5332: LIST
5333: LIST
5334: PPUSH
5335: CALL_OW 69
5339: IFFALSE 5450
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) do
5341: LD_ADDR_VAR 0 1
5345: PUSH
5346: LD_INT 22
5348: PUSH
5349: LD_INT 1
5351: PUSH
5352: EMPTY
5353: LIST
5354: LIST
5355: PUSH
5356: LD_INT 21
5358: PUSH
5359: LD_INT 2
5361: PUSH
5362: EMPTY
5363: LIST
5364: LIST
5365: PUSH
5366: EMPTY
5367: LIST
5368: LIST
5369: PPUSH
5370: CALL_OW 69
5374: PUSH
5375: FOR_IN
5376: IFFALSE 5448
// tmp := tmp ^ [ GetNation ( i ) , GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) ] ;
5378: LD_ADDR_VAR 0 2
5382: PUSH
5383: LD_VAR 0 2
5387: PUSH
5388: LD_VAR 0 1
5392: PPUSH
5393: CALL_OW 248
5397: PUSH
5398: LD_VAR 0 1
5402: PPUSH
5403: CALL_OW 265
5407: PUSH
5408: LD_VAR 0 1
5412: PPUSH
5413: CALL_OW 262
5417: PUSH
5418: LD_VAR 0 1
5422: PPUSH
5423: CALL_OW 263
5427: PUSH
5428: LD_VAR 0 1
5432: PPUSH
5433: CALL_OW 264
5437: PUSH
5438: EMPTY
5439: LIST
5440: LIST
5441: LIST
5442: LIST
5443: LIST
5444: ADD
5445: ST_TO_ADDR
5446: GO 5375
5448: POP
5449: POP
// if tmp then
5450: LD_VAR 0 2
5454: IFFALSE 5468
// SaveVariable ( tmp , vehiclesInDelta ) ;
5456: LD_VAR 0 2
5460: PPUSH
5461: LD_STRING vehiclesInDelta
5463: PPUSH
5464: CALL_OW 39
// tmp := [ ] ;
5468: LD_ADDR_VAR 0 2
5472: PUSH
5473: EMPTY
5474: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) then
5475: LD_INT 22
5477: PUSH
5478: LD_INT 1
5480: PUSH
5481: EMPTY
5482: LIST
5483: LIST
5484: PUSH
5485: LD_INT 21
5487: PUSH
5488: LD_INT 3
5490: PUSH
5491: EMPTY
5492: LIST
5493: LIST
5494: PUSH
5495: EMPTY
5496: LIST
5497: LIST
5498: PPUSH
5499: CALL_OW 69
5503: IFFALSE 5656
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) do
5505: LD_ADDR_VAR 0 1
5509: PUSH
5510: LD_INT 22
5512: PUSH
5513: LD_INT 1
5515: PUSH
5516: EMPTY
5517: LIST
5518: LIST
5519: PUSH
5520: LD_INT 21
5522: PUSH
5523: LD_INT 3
5525: PUSH
5526: EMPTY
5527: LIST
5528: LIST
5529: PUSH
5530: EMPTY
5531: LIST
5532: LIST
5533: PPUSH
5534: CALL_OW 69
5538: PUSH
5539: FOR_IN
5540: IFFALSE 5654
// tmp := tmp ^ [ [ GetBType ( i ) , GetBLevel ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) , GetBWeapon ( i ) ] ] ;
5542: LD_ADDR_VAR 0 2
5546: PUSH
5547: LD_VAR 0 2
5551: PUSH
5552: LD_VAR 0 1
5556: PPUSH
5557: CALL_OW 266
5561: PUSH
5562: LD_VAR 0 1
5566: PPUSH
5567: CALL_OW 267
5571: PUSH
5572: LD_VAR 0 1
5576: PPUSH
5577: CALL_OW 250
5581: PUSH
5582: LD_VAR 0 1
5586: PPUSH
5587: CALL_OW 251
5591: PUSH
5592: LD_VAR 0 1
5596: PPUSH
5597: CALL_OW 254
5601: PUSH
5602: LD_VAR 0 1
5606: PPUSH
5607: LD_INT 1
5609: PPUSH
5610: CALL_OW 268
5614: PUSH
5615: LD_VAR 0 1
5619: PPUSH
5620: LD_INT 2
5622: PPUSH
5623: CALL_OW 268
5627: PUSH
5628: LD_VAR 0 1
5632: PPUSH
5633: CALL_OW 269
5637: PUSH
5638: EMPTY
5639: LIST
5640: LIST
5641: LIST
5642: LIST
5643: LIST
5644: LIST
5645: LIST
5646: LIST
5647: PUSH
5648: EMPTY
5649: LIST
5650: ADD
5651: ST_TO_ADDR
5652: GO 5539
5654: POP
5655: POP
// if tmp then
5656: LD_VAR 0 2
5660: IFFALSE 5674
// SaveVariable ( tmp , buildingsInDelta ) ;
5662: LD_VAR 0 2
5666: PPUSH
5667: LD_STRING buildingsInDelta
5669: PPUSH
5670: CALL_OW 39
// YouWin ;
5674: CALL_OW 103
// end ; end_of_file
5678: PPOPN 5
5680: END
// export function PrepareArabianTroops ( amount , skill , area ) ; var i , un , tmp ; begin
5681: LD_INT 0
5683: PPUSH
5684: PPUSH
5685: PPUSH
5686: PPUSH
// InitHc ;
5687: CALL_OW 19
// InitUc ;
5691: CALL_OW 18
// uc_side := 2 ;
5695: LD_ADDR_OWVAR 20
5699: PUSH
5700: LD_INT 2
5702: ST_TO_ADDR
// uc_nation := 2 ;
5703: LD_ADDR_OWVAR 21
5707: PUSH
5708: LD_INT 2
5710: ST_TO_ADDR
// if not amount then
5711: LD_VAR 0 1
5715: NOT
5716: IFFALSE 5720
// exit ;
5718: GO 5843
// for i = 1 to amount do
5720: LD_ADDR_VAR 0 5
5724: PUSH
5725: DOUBLE
5726: LD_INT 1
5728: DEC
5729: ST_TO_ADDR
5730: LD_VAR 0 1
5734: PUSH
5735: FOR_TO
5736: IFFALSE 5831
// begin PrepareHuman ( false , 1 , skill ) ;
5738: LD_INT 0
5740: PPUSH
5741: LD_INT 1
5743: PPUSH
5744: LD_VAR 0 2
5748: PPUSH
5749: CALL_OW 380
// un := CreateHuman ;
5753: LD_ADDR_VAR 0 6
5757: PUSH
5758: CALL_OW 44
5762: ST_TO_ADDR
// tmp := Insert ( tmp , 1 , un ) ;
5763: LD_ADDR_VAR 0 7
5767: PUSH
5768: LD_VAR 0 7
5772: PPUSH
5773: LD_INT 1
5775: PPUSH
5776: LD_VAR 0 6
5780: PPUSH
5781: CALL_OW 2
5785: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
5786: LD_VAR 0 6
5790: PPUSH
5791: LD_VAR 0 3
5795: PPUSH
5796: LD_INT 0
5798: PPUSH
5799: CALL_OW 49
// if i mod 2 = 0 then
5803: LD_VAR 0 5
5807: PUSH
5808: LD_INT 2
5810: MOD
5811: PUSH
5812: LD_INT 0
5814: EQUAL
5815: IFFALSE 5829
// SetTag ( un , 11 ) ;
5817: LD_VAR 0 6
5821: PPUSH
5822: LD_INT 11
5824: PPUSH
5825: CALL_OW 109
// end ;
5829: GO 5735
5831: POP
5832: POP
// result := tmp ;
5833: LD_ADDR_VAR 0 4
5837: PUSH
5838: LD_VAR 0 7
5842: ST_TO_ADDR
// end ;
5843: LD_VAR 0 4
5847: RET
// export ar_forces , ap_killers ; every 0 0$1 trigger Delta do var i , timer , more_troops , skill , eng , un , veh , force ;
5848: LD_EXP 6
5852: IFFALSE 6755
5854: GO 5856
5856: DISABLE
5857: LD_INT 0
5859: PPUSH
5860: PPUSH
5861: PPUSH
5862: PPUSH
5863: PPUSH
5864: PPUSH
5865: PPUSH
5866: PPUSH
// begin more_troops := false ;
5867: LD_ADDR_VAR 0 3
5871: PUSH
5872: LD_INT 0
5874: ST_TO_ADDR
// skill := [ 3 , 4 , 5 , 5 ] [ Difficulty ] ;
5875: LD_ADDR_VAR 0 4
5879: PUSH
5880: LD_INT 3
5882: PUSH
5883: LD_INT 4
5885: PUSH
5886: LD_INT 5
5888: PUSH
5889: LD_INT 5
5891: PUSH
5892: EMPTY
5893: LIST
5894: LIST
5895: LIST
5896: LIST
5897: PUSH
5898: LD_OWVAR 67
5902: ARRAY
5903: ST_TO_ADDR
// timer := [ 5 5$00 , 4 4$00 , 3 3$00 , 2 2$30 ] [ Difficulty ] ;
5904: LD_ADDR_VAR 0 2
5908: PUSH
5909: LD_INT 10500
5911: PUSH
5912: LD_INT 8400
5914: PUSH
5915: LD_INT 6300
5917: PUSH
5918: LD_INT 5250
5920: PUSH
5921: EMPTY
5922: LIST
5923: LIST
5924: LIST
5925: LIST
5926: PUSH
5927: LD_OWVAR 67
5931: ARRAY
5932: ST_TO_ADDR
// force := [ ] ;
5933: LD_ADDR_VAR 0 8
5937: PUSH
5938: EMPTY
5939: ST_TO_ADDR
// ar_forces := [ ] ;
5940: LD_ADDR_EXP 27
5944: PUSH
5945: EMPTY
5946: ST_TO_ADDR
// ap_killers := [ ] ;
5947: LD_ADDR_EXP 28
5951: PUSH
5952: EMPTY
5953: ST_TO_ADDR
// Wait ( timer ) ;
5954: LD_VAR 0 2
5958: PPUSH
5959: CALL_OW 67
// if Denis and GetSide ( Denis ) = 4 then
5963: LD_EXP 19
5967: PUSH
5968: LD_EXP 19
5972: PPUSH
5973: CALL_OW 255
5977: PUSH
5978: LD_INT 4
5980: EQUAL
5981: AND
5982: IFFALSE 5991
// Wait ( 0 0$45 ) ;
5984: LD_INT 1575
5986: PPUSH
5987: CALL_OW 67
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_armoury ] ] ) then
5991: LD_INT 22
5993: PUSH
5994: LD_INT 1
5996: PUSH
5997: EMPTY
5998: LIST
5999: LIST
6000: PUSH
6001: LD_INT 30
6003: PUSH
6004: LD_INT 4
6006: PUSH
6007: EMPTY
6008: LIST
6009: LIST
6010: PUSH
6011: EMPTY
6012: LIST
6013: LIST
6014: PPUSH
6015: CALL_OW 69
6019: IFFALSE 6036
// begin Wait ( 1 1$25 ) ;
6021: LD_INT 2975
6023: PPUSH
6024: CALL_OW 67
// more_troops := true ;
6028: LD_ADDR_VAR 0 3
6032: PUSH
6033: LD_INT 1
6035: ST_TO_ADDR
// end ; if more_troops then
6036: LD_VAR 0 3
6040: IFFALSE 6236
// begin force := PrepareArabianTroops ( [ 4 , 5 , 6 , 7 ] [ Difficulty ] , skill , arArea2 ) ;
6042: LD_ADDR_VAR 0 8
6046: PUSH
6047: LD_INT 4
6049: PUSH
6050: LD_INT 5
6052: PUSH
6053: LD_INT 6
6055: PUSH
6056: LD_INT 7
6058: PUSH
6059: EMPTY
6060: LIST
6061: LIST
6062: LIST
6063: LIST
6064: PUSH
6065: LD_OWVAR 67
6069: ARRAY
6070: PPUSH
6071: LD_VAR 0 4
6075: PPUSH
6076: LD_INT 14
6078: PPUSH
6079: CALL 5681 0 3
6083: ST_TO_ADDR
// veh := PrepareTank ( 2 , 3 , ru_medium_tracked , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_heavy_machine_gun , ru_gatling_gun , ru_gun ] [ Difficulty ] , 90 ) ;
6084: LD_ADDR_VAR 0 7
6088: PUSH
6089: LD_INT 2
6091: PPUSH
6092: LD_INT 3
6094: PPUSH
6095: LD_INT 22
6097: PPUSH
6098: LD_INT 1
6100: PPUSH
6101: LD_INT 1
6103: PPUSH
6104: LD_INT 42
6106: PUSH
6107: LD_INT 42
6109: PUSH
6110: LD_INT 43
6112: PUSH
6113: LD_INT 44
6115: PUSH
6116: EMPTY
6117: LIST
6118: LIST
6119: LIST
6120: LIST
6121: PUSH
6122: LD_OWVAR 67
6126: ARRAY
6127: PPUSH
6128: LD_INT 90
6130: PPUSH
6131: CALL 431 0 7
6135: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
6136: LD_VAR 0 7
6140: PPUSH
6141: LD_INT 4
6143: PPUSH
6144: CALL_OW 233
// PlaceUnitArea ( veh , arArea1 , false ) ;
6148: LD_VAR 0 7
6152: PPUSH
6153: LD_INT 13
6155: PPUSH
6156: LD_INT 0
6158: PPUSH
6159: CALL_OW 49
// uc_side := 2 ;
6163: LD_ADDR_OWVAR 20
6167: PUSH
6168: LD_INT 2
6170: ST_TO_ADDR
// uc_nation := 2 ;
6171: LD_ADDR_OWVAR 21
6175: PUSH
6176: LD_INT 2
6178: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
6179: LD_INT 0
6181: PPUSH
6182: LD_INT 1
6184: PPUSH
6185: LD_VAR 0 4
6189: PPUSH
6190: CALL_OW 380
// un := CreateHuman ;
6194: LD_ADDR_VAR 0 6
6198: PUSH
6199: CALL_OW 44
6203: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6204: LD_VAR 0 6
6208: PPUSH
6209: LD_VAR 0 7
6213: PPUSH
6214: CALL_OW 52
// force := force ^ un ;
6218: LD_ADDR_VAR 0 8
6222: PUSH
6223: LD_VAR 0 8
6227: PUSH
6228: LD_VAR 0 6
6232: ADD
6233: ST_TO_ADDR
// end else
6234: GO 6278
// begin force := PrepareArabianTroops ( [ 3 , 4 , 5 , 6 ] [ Difficulty ] , skill , arArea2 ) ;
6236: LD_ADDR_VAR 0 8
6240: PUSH
6241: LD_INT 3
6243: PUSH
6244: LD_INT 4
6246: PUSH
6247: LD_INT 5
6249: PUSH
6250: LD_INT 6
6252: PUSH
6253: EMPTY
6254: LIST
6255: LIST
6256: LIST
6257: LIST
6258: PUSH
6259: LD_OWVAR 67
6263: ARRAY
6264: PPUSH
6265: LD_VAR 0 4
6269: PPUSH
6270: LD_INT 14
6272: PPUSH
6273: CALL 5681 0 3
6277: ST_TO_ADDR
// end ; if force then
6278: LD_VAR 0 8
6282: IFFALSE 6294
// ar_forces := force ;
6284: LD_ADDR_EXP 27
6288: PUSH
6289: LD_VAR 0 8
6293: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
6294: LD_INT 35
6296: PPUSH
6297: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) = 0 ;
6301: LD_INT 22
6303: PUSH
6304: LD_INT 2
6306: PUSH
6307: EMPTY
6308: LIST
6309: LIST
6310: PUSH
6311: LD_INT 21
6313: PUSH
6314: LD_INT 1
6316: PUSH
6317: EMPTY
6318: LIST
6319: LIST
6320: PUSH
6321: EMPTY
6322: LIST
6323: LIST
6324: PPUSH
6325: CALL_OW 69
6329: PUSH
6330: LD_INT 0
6332: EQUAL
6333: IFFALSE 6294
// Wait ( timer ) ;
6335: LD_VAR 0 2
6339: PPUSH
6340: CALL_OW 67
// force := PrepareArabianTroops ( [ 4 , 5 , 6 , 7 ] [ Difficulty ] , skill , [ arArea1 , arArea2 ] [ rand ( 1 , 2 ) ] ) ;
6344: LD_ADDR_VAR 0 8
6348: PUSH
6349: LD_INT 4
6351: PUSH
6352: LD_INT 5
6354: PUSH
6355: LD_INT 6
6357: PUSH
6358: LD_INT 7
6360: PUSH
6361: EMPTY
6362: LIST
6363: LIST
6364: LIST
6365: LIST
6366: PUSH
6367: LD_OWVAR 67
6371: ARRAY
6372: PPUSH
6373: LD_VAR 0 4
6377: PPUSH
6378: LD_INT 13
6380: PUSH
6381: LD_INT 14
6383: PUSH
6384: EMPTY
6385: LIST
6386: LIST
6387: PUSH
6388: LD_INT 1
6390: PPUSH
6391: LD_INT 2
6393: PPUSH
6394: CALL_OW 12
6398: ARRAY
6399: PPUSH
6400: CALL 5681 0 3
6404: ST_TO_ADDR
// if Difficulty > 1 and Delta then
6405: LD_OWVAR 67
6409: PUSH
6410: LD_INT 1
6412: GREATER
6413: PUSH
6414: LD_EXP 6
6418: AND
6419: IFFALSE 6498
// begin uc_side := 2 ;
6421: LD_ADDR_OWVAR 20
6425: PUSH
6426: LD_INT 2
6428: ST_TO_ADDR
// uc_nation := 2 ;
6429: LD_ADDR_OWVAR 21
6433: PUSH
6434: LD_INT 2
6436: ST_TO_ADDR
// PrepareHuman ( false , 2 , skill ) ;
6437: LD_INT 0
6439: PPUSH
6440: LD_INT 2
6442: PPUSH
6443: LD_VAR 0 4
6447: PPUSH
6448: CALL_OW 380
// eng := CreateHuman ;
6452: LD_ADDR_VAR 0 5
6456: PUSH
6457: CALL_OW 44
6461: ST_TO_ADDR
// PlaceUnitArea ( eng , arArea1 , false ) ;
6462: LD_VAR 0 5
6466: PPUSH
6467: LD_INT 13
6469: PPUSH
6470: LD_INT 0
6472: PPUSH
6473: CALL_OW 49
// Wait ( 3 ) ;
6477: LD_INT 3
6479: PPUSH
6480: CALL_OW 67
// AddComEnterUnit ( eng , Delta ) ;
6484: LD_VAR 0 5
6488: PPUSH
6489: LD_EXP 6
6493: PPUSH
6494: CALL_OW 180
// end ; if force then
6498: LD_VAR 0 8
6502: IFFALSE 6514
// ar_forces := force ;
6504: LD_ADDR_EXP 27
6508: PUSH
6509: LD_VAR 0 8
6513: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
6514: LD_INT 35
6516: PPUSH
6517: CALL_OW 67
// if eng then
6521: LD_VAR 0 5
6525: IFFALSE 6579
// if GetSide ( Delta ) = 2 and IsOk ( eng ) and not IsInUnit ( eng ) then
6527: LD_EXP 6
6531: PPUSH
6532: CALL_OW 255
6536: PUSH
6537: LD_INT 2
6539: EQUAL
6540: PUSH
6541: LD_VAR 0 5
6545: PPUSH
6546: CALL_OW 302
6550: AND
6551: PUSH
6552: LD_VAR 0 5
6556: PPUSH
6557: CALL_OW 310
6561: NOT
6562: AND
6563: IFFALSE 6579
// ComEnterUnit ( eng , Delta ) ;
6565: LD_VAR 0 5
6569: PPUSH
6570: LD_EXP 6
6574: PPUSH
6575: CALL_OW 120
// until FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) = 0 ;
6579: LD_INT 22
6581: PUSH
6582: LD_INT 2
6584: PUSH
6585: EMPTY
6586: LIST
6587: LIST
6588: PUSH
6589: LD_INT 21
6591: PUSH
6592: LD_INT 1
6594: PUSH
6595: EMPTY
6596: LIST
6597: LIST
6598: PUSH
6599: EMPTY
6600: LIST
6601: LIST
6602: PPUSH
6603: CALL_OW 69
6607: PUSH
6608: LD_INT 0
6610: EQUAL
6611: IFFALSE 6514
// Wait ( 2 2$00 ) ;
6613: LD_INT 4200
6615: PPUSH
6616: CALL_OW 67
// ap_killers := PrepareArabianTroops ( [ 1 , 2 , 2 , 2 ] [ Difficulty ] , skill , arArea1 ) ;
6620: LD_ADDR_EXP 28
6624: PUSH
6625: LD_INT 1
6627: PUSH
6628: LD_INT 2
6630: PUSH
6631: LD_INT 2
6633: PUSH
6634: LD_INT 2
6636: PUSH
6637: EMPTY
6638: LIST
6639: LIST
6640: LIST
6641: LIST
6642: PUSH
6643: LD_OWVAR 67
6647: ARRAY
6648: PPUSH
6649: LD_VAR 0 4
6653: PPUSH
6654: LD_INT 13
6656: PPUSH
6657: CALL 5681 0 3
6661: ST_TO_ADDR
// Wait ( timer * 2 ) ;
6662: LD_VAR 0 2
6666: PUSH
6667: LD_INT 2
6669: MUL
6670: PPUSH
6671: CALL_OW 67
// ar_forces := PrepareArabianTroops ( [ 5 , 6 , 7 , 8 ] [ Difficulty ] , skill , arArea1 ) ^ PrepareArabianTroops ( [ 3 , 4 , 4 , 4 ] [ Difficulty ] , skill , arArea2 ) ;
6675: LD_ADDR_EXP 27
6679: PUSH
6680: LD_INT 5
6682: PUSH
6683: LD_INT 6
6685: PUSH
6686: LD_INT 7
6688: PUSH
6689: LD_INT 8
6691: PUSH
6692: EMPTY
6693: LIST
6694: LIST
6695: LIST
6696: LIST
6697: PUSH
6698: LD_OWVAR 67
6702: ARRAY
6703: PPUSH
6704: LD_VAR 0 4
6708: PPUSH
6709: LD_INT 13
6711: PPUSH
6712: CALL 5681 0 3
6716: PUSH
6717: LD_INT 3
6719: PUSH
6720: LD_INT 4
6722: PUSH
6723: LD_INT 4
6725: PUSH
6726: LD_INT 4
6728: PUSH
6729: EMPTY
6730: LIST
6731: LIST
6732: LIST
6733: LIST
6734: PUSH
6735: LD_OWVAR 67
6739: ARRAY
6740: PPUSH
6741: LD_VAR 0 4
6745: PPUSH
6746: LD_INT 14
6748: PPUSH
6749: CALL 5681 0 3
6753: ADD
6754: ST_TO_ADDR
// end ;
6755: PPOPN 8
6757: END
// every 0 0$03 trigger ar_forces do var i , target ;
6758: LD_EXP 27
6762: IFFALSE 6960
6764: GO 6766
6766: DISABLE
6767: LD_INT 0
6769: PPUSH
6770: PPUSH
// begin enable ;
6771: ENABLE
// if not ar_forces then
6772: LD_EXP 27
6776: NOT
6777: IFFALSE 6781
// exit ;
6779: GO 6960
// if Delta then
6781: LD_EXP 6
6785: IFFALSE 6799
// target := Delta else
6787: LD_ADDR_VAR 0 2
6791: PUSH
6792: LD_EXP 6
6796: ST_TO_ADDR
6797: GO 6809
// target := JMM ;
6799: LD_ADDR_VAR 0 2
6803: PUSH
6804: LD_EXP 16
6808: ST_TO_ADDR
// for i in ar_forces do
6809: LD_ADDR_VAR 0 1
6813: PUSH
6814: LD_EXP 27
6818: PUSH
6819: FOR_IN
6820: IFFALSE 6958
// begin if i in FilterAllUnits ( [ f_driving ] ) then
6822: LD_VAR 0 1
6826: PUSH
6827: LD_INT 55
6829: PUSH
6830: EMPTY
6831: LIST
6832: PPUSH
6833: CALL_OW 69
6837: IN
6838: IFFALSE 6881
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , IsInUnit ( i ) ) ) else
6840: LD_VAR 0 1
6844: PPUSH
6845: LD_INT 22
6847: PUSH
6848: LD_INT 1
6850: PUSH
6851: EMPTY
6852: LIST
6853: LIST
6854: PPUSH
6855: CALL_OW 69
6859: PPUSH
6860: LD_VAR 0 1
6864: PPUSH
6865: CALL_OW 310
6869: PPUSH
6870: CALL_OW 74
6874: PPUSH
6875: CALL_OW 115
6879: GO 6956
// if GetDistUnits ( i , target ) > 30 then
6881: LD_VAR 0 1
6885: PPUSH
6886: LD_VAR 0 2
6890: PPUSH
6891: CALL_OW 296
6895: PUSH
6896: LD_INT 30
6898: GREATER
6899: IFFALSE 6932
// ComAgressiveMove ( i , GetX ( target ) , GetY ( target ) ) else
6901: LD_VAR 0 1
6905: PPUSH
6906: LD_VAR 0 2
6910: PPUSH
6911: CALL_OW 250
6915: PPUSH
6916: LD_VAR 0 2
6920: PPUSH
6921: CALL_OW 251
6925: PPUSH
6926: CALL_OW 114
6930: GO 6956
// Attack ( i , FilterAllUnits ( [ f_enemy , 2 ] ) ) ;
6932: LD_VAR 0 1
6936: PPUSH
6937: LD_INT 81
6939: PUSH
6940: LD_INT 2
6942: PUSH
6943: EMPTY
6944: LIST
6945: LIST
6946: PPUSH
6947: CALL_OW 69
6951: PPUSH
6952: CALL 736 0 2
// end ;
6956: GO 6819
6958: POP
6959: POP
// end ;
6960: PPOPN 2
6962: END
// every 0 0$01 trigger ap_killers do var filter , i , target ;
6963: LD_EXP 28
6967: IFFALSE 7127
6969: GO 6971
6971: DISABLE
6972: LD_INT 0
6974: PPUSH
6975: PPUSH
6976: PPUSH
// begin enable ;
6977: ENABLE
// filter := FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) ;
6978: LD_ADDR_VAR 0 1
6982: PUSH
6983: LD_INT 22
6985: PUSH
6986: LD_INT 0
6988: PUSH
6989: EMPTY
6990: LIST
6991: LIST
6992: PUSH
6993: LD_INT 25
6995: PUSH
6996: LD_INT 12
6998: PUSH
6999: EMPTY
7000: LIST
7001: LIST
7002: PUSH
7003: EMPTY
7004: LIST
7005: LIST
7006: PPUSH
7007: CALL_OW 69
7011: ST_TO_ADDR
// if not filter then
7012: LD_VAR 0 1
7016: NOT
7017: IFFALSE 7044
// begin ar_forces := ar_forces ^ ap_killers ;
7019: LD_ADDR_EXP 27
7023: PUSH
7024: LD_EXP 27
7028: PUSH
7029: LD_EXP 28
7033: ADD
7034: ST_TO_ADDR
// ap_killers := [ ] ;
7035: LD_ADDR_EXP 28
7039: PUSH
7040: EMPTY
7041: ST_TO_ADDR
// exit ;
7042: GO 7127
// end ; for i in ap_killers do
7044: LD_ADDR_VAR 0 2
7048: PUSH
7049: LD_EXP 28
7053: PUSH
7054: FOR_IN
7055: IFFALSE 7125
// begin if not IsOk ( i ) then
7057: LD_VAR 0 2
7061: PPUSH
7062: CALL_OW 302
7066: NOT
7067: IFFALSE 7071
// continue ;
7069: GO 7054
// if not HasTask ( i ) then
7071: LD_VAR 0 2
7075: PPUSH
7076: CALL_OW 314
7080: NOT
7081: IFFALSE 7103
// target := NearestUnitToUnit ( filter , i ) ;
7083: LD_ADDR_VAR 0 3
7087: PUSH
7088: LD_VAR 0 1
7092: PPUSH
7093: LD_VAR 0 2
7097: PPUSH
7098: CALL_OW 74
7102: ST_TO_ADDR
// if target then
7103: LD_VAR 0 3
7107: IFFALSE 7123
// ComAttackUnit ( i , target ) ;
7109: LD_VAR 0 2
7113: PPUSH
7114: LD_VAR 0 3
7118: PPUSH
7119: CALL_OW 115
// end ;
7123: GO 7054
7125: POP
7126: POP
// end ; end_of_file
7127: PPOPN 3
7129: END
// every 0 0$40 + 0 0$2 trigger Delta do var i , counter , cr ;
7130: LD_EXP 6
7134: IFFALSE 7270
7136: GO 7138
7138: DISABLE
7139: LD_INT 0
7141: PPUSH
7142: PPUSH
7143: PPUSH
// begin counter := [ 300 , 250 , 220 , 210 ] [ Difficulty ] ;
7144: LD_ADDR_VAR 0 2
7148: PUSH
7149: LD_INT 300
7151: PUSH
7152: LD_INT 250
7154: PUSH
7155: LD_INT 220
7157: PUSH
7158: LD_INT 210
7160: PUSH
7161: EMPTY
7162: LIST
7163: LIST
7164: LIST
7165: LIST
7166: PUSH
7167: LD_OWVAR 67
7171: ARRAY
7172: ST_TO_ADDR
// CreateCratesArea ( Rand ( 1 , 3 ) , cratesArea , true ) ;
7173: LD_INT 1
7175: PPUSH
7176: LD_INT 3
7178: PPUSH
7179: CALL_OW 12
7183: PPUSH
7184: LD_INT 7
7186: PPUSH
7187: LD_INT 1
7189: PPUSH
7190: CALL_OW 55
// repeat wait ( rand ( 1 1$30 , 2 2$20 ) ) ;
7194: LD_INT 3150
7196: PPUSH
7197: LD_INT 4900
7199: PPUSH
7200: CALL_OW 12
7204: PPUSH
7205: CALL_OW 67
// cr := rand ( 1 , 5 ) ;
7209: LD_ADDR_VAR 0 3
7213: PUSH
7214: LD_INT 1
7216: PPUSH
7217: LD_INT 5
7219: PPUSH
7220: CALL_OW 12
7224: ST_TO_ADDR
// CreateCratesArea ( cr , cratesArea , true ) ;
7225: LD_VAR 0 3
7229: PPUSH
7230: LD_INT 7
7232: PPUSH
7233: LD_INT 1
7235: PPUSH
7236: CALL_OW 55
// counter := counter - cr * 10 ;
7240: LD_ADDR_VAR 0 2
7244: PUSH
7245: LD_VAR 0 2
7249: PUSH
7250: LD_VAR 0 3
7254: PUSH
7255: LD_INT 10
7257: MUL
7258: MINUS
7259: ST_TO_ADDR
// until counter <= 0 ;
7260: LD_VAR 0 2
7264: PUSH
7265: LD_INT 0
7267: LESSEQUAL
7268: IFFALSE 7194
// end ;
7270: PPOPN 3
7272: END
// every 0 0$03 trigger not Delta do var i ;
7273: LD_EXP 6
7277: NOT
7278: IFFALSE 7348
7280: GO 7282
7282: DISABLE
7283: LD_INT 0
7285: PPUSH
// begin for i = 1 to 5 - Difficulty do
7286: LD_ADDR_VAR 0 1
7290: PUSH
7291: DOUBLE
7292: LD_INT 1
7294: DEC
7295: ST_TO_ADDR
7296: LD_INT 5
7298: PUSH
7299: LD_OWVAR 67
7303: MINUS
7304: PUSH
7305: FOR_TO
7306: IFFALSE 7346
// begin CreateCratesArea ( rand ( 2 , 5 ) , deltaMainArea , true ) ;
7308: LD_INT 2
7310: PPUSH
7311: LD_INT 5
7313: PPUSH
7314: CALL_OW 12
7318: PPUSH
7319: LD_INT 8
7321: PPUSH
7322: LD_INT 1
7324: PPUSH
7325: CALL_OW 55
// Wait ( rand ( 0 0$16 , 0 0$39 ) ) ;
7329: LD_INT 560
7331: PPUSH
7332: LD_INT 1365
7334: PPUSH
7335: CALL_OW 12
7339: PPUSH
7340: CALL_OW 67
// end ;
7344: GO 7305
7346: POP
7347: POP
// end ;
7348: PPOPN 1
7350: END
// every 3 3$00 trigger tick < 15 15$00 do
7351: LD_OWVAR 1
7355: PUSH
7356: LD_INT 31500
7358: LESS
7359: IFFALSE 7419
7361: GO 7363
7363: DISABLE
// begin enable ;
7364: ENABLE
// CreateCratesAnyWhere ( rand ( 1 , 3 ) , true ) ;
7365: LD_INT 1
7367: PPUSH
7368: LD_INT 3
7370: PPUSH
7371: CALL_OW 12
7375: PPUSH
7376: LD_INT 1
7378: PPUSH
7379: CALL_OW 57
// Wait ( rand ( 0 0$38 , 0 0$59 ) ) ;
7383: LD_INT 1330
7385: PPUSH
7386: LD_INT 2065
7388: PPUSH
7389: CALL_OW 12
7393: PPUSH
7394: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 4 ) , riverArea , true ) ;
7398: LD_INT 1
7400: PPUSH
7401: LD_INT 4
7403: PPUSH
7404: CALL_OW 12
7408: PPUSH
7409: LD_INT 15
7411: PPUSH
7412: LD_INT 1
7414: PPUSH
7415: CALL_OW 55
// end ; end_of_file
7419: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
7420: LD_VAR 0 1
7424: PPUSH
7425: CALL 23554 0 1
// if un = JMM then
7429: LD_VAR 0 1
7433: PUSH
7434: LD_EXP 16
7438: EQUAL
7439: IFFALSE 7448
// YouLost ( JMM ) ;
7441: LD_STRING JMM
7443: PPUSH
7444: CALL_OW 104
// if un = Delta then
7448: LD_VAR 0 1
7452: PUSH
7453: LD_EXP 6
7457: EQUAL
7458: IFFALSE 7481
// begin Delta := 0 ;
7460: LD_ADDR_EXP 6
7464: PUSH
7465: LD_INT 0
7467: ST_TO_ADDR
// SetRestrict ( b_depot , 1 , true ) ;
7468: LD_INT 0
7470: PPUSH
7471: LD_INT 1
7473: PPUSH
7474: LD_INT 1
7476: PPUSH
7477: CALL_OW 324
// end ; if un in ar_forces then
7481: LD_VAR 0 1
7485: PUSH
7486: LD_EXP 27
7490: IN
7491: IFFALSE 7509
// ar_forces := ar_forces diff un ;
7493: LD_ADDR_EXP 27
7497: PUSH
7498: LD_EXP 27
7502: PUSH
7503: LD_VAR 0 1
7507: DIFF
7508: ST_TO_ADDR
// if un in ap_killers then
7509: LD_VAR 0 1
7513: PUSH
7514: LD_EXP 28
7518: IN
7519: IFFALSE 7537
// ap_killers := ap_killers diff un ;
7521: LD_ADDR_EXP 28
7525: PUSH
7526: LD_EXP 28
7530: PUSH
7531: LD_VAR 0 1
7535: DIFF
7536: ST_TO_ADDR
// if un in FilterAllUnits ( [ f_or , [ f_class , class_apeman ] , [ f_class , class_apeman_engineer ] ] ) then
7537: LD_VAR 0 1
7541: PUSH
7542: LD_INT 2
7544: PUSH
7545: LD_INT 25
7547: PUSH
7548: LD_INT 12
7550: PUSH
7551: EMPTY
7552: LIST
7553: LIST
7554: PUSH
7555: LD_INT 25
7557: PUSH
7558: LD_INT 16
7560: PUSH
7561: EMPTY
7562: LIST
7563: LIST
7564: PUSH
7565: EMPTY
7566: LIST
7567: LIST
7568: LIST
7569: PPUSH
7570: CALL_OW 69
7574: IN
7575: IFFALSE 7591
// apeKillCounter := apeKillCounter + 1 ;
7577: LD_ADDR_EXP 15
7581: PUSH
7582: LD_EXP 15
7586: PUSH
7587: LD_INT 1
7589: PLUS
7590: ST_TO_ADDR
// end ;
7591: PPOPN 1
7593: END
// on VehicleConstructed ( veh , fac ) do begin SOS_VehicleConstructed ( veh , fac ) ;
7594: LD_VAR 0 1
7598: PPUSH
7599: LD_VAR 0 2
7603: PPUSH
7604: CALL 23674 0 2
// end ;
7608: PPOPN 2
7610: END
// on Contact ( s1 , s2 ) do begin if s1 = 1 and s2 = 2 and not arab_spotted then
7611: LD_VAR 0 1
7615: PUSH
7616: LD_INT 1
7618: EQUAL
7619: PUSH
7620: LD_VAR 0 2
7624: PUSH
7625: LD_INT 2
7627: EQUAL
7628: AND
7629: PUSH
7630: LD_EXP 13
7634: NOT
7635: AND
7636: IFFALSE 7646
// arab_spotted := true ;
7638: LD_ADDR_EXP 13
7642: PUSH
7643: LD_INT 1
7645: ST_TO_ADDR
// end ;
7646: PPOPN 2
7648: END
// on EndTheMissionRaised ( p ) do begin end_the_mission_allowed := false ;
7649: LD_ADDR_OWVAR 57
7653: PUSH
7654: LD_INT 0
7656: ST_TO_ADDR
// end_mission := true ;
7657: LD_ADDR_EXP 14
7661: PUSH
7662: LD_INT 1
7664: ST_TO_ADDR
// end ;
7665: PPOPN 1
7667: END
// on ApemanTamed ( apeman , sci ) do begin if GetSide ( sci ) = 1 then
7668: LD_VAR 0 2
7672: PPUSH
7673: CALL_OW 255
7677: PUSH
7678: LD_INT 1
7680: EQUAL
7681: IFFALSE 7697
// apeman_counter := apeman_counter + 1 ;
7683: LD_ADDR_EXP 12
7687: PUSH
7688: LD_EXP 12
7692: PUSH
7693: LD_INT 1
7695: PLUS
7696: ST_TO_ADDR
// if not first_apeman_tamed then
7697: LD_EXP 8
7701: NOT
7702: IFFALSE 7902
// begin first_apeman_tamed := true ;
7704: LD_ADDR_EXP 8
7708: PUSH
7709: LD_INT 1
7711: ST_TO_ADDR
// if sci = Gladstone then
7712: LD_VAR 0 2
7716: PUSH
7717: LD_EXP 17
7721: EQUAL
7722: IFFALSE 7736
// Say ( Gladstone , D7b-Glad-1 ) ;
7724: LD_EXP 17
7728: PPUSH
7729: LD_STRING D7b-Glad-1
7731: PPUSH
7732: CALL_OW 88
// if sci = Denis then
7736: LD_VAR 0 2
7740: PUSH
7741: LD_EXP 19
7745: EQUAL
7746: IFFALSE 7760
// Say ( Denis , D7a-Den-1 ) ;
7748: LD_EXP 19
7752: PPUSH
7753: LD_STRING D7a-Den-1
7755: PPUSH
7756: CALL_OW 88
// if not sci in [ JMM , Gladstone , Denis , Lisa , Frank , Bobby , Cyrus , Donaldson ] then
7760: LD_VAR 0 2
7764: PUSH
7765: LD_EXP 16
7769: PUSH
7770: LD_EXP 17
7774: PUSH
7775: LD_EXP 19
7779: PUSH
7780: LD_EXP 22
7784: PUSH
7785: LD_EXP 23
7789: PUSH
7790: LD_EXP 24
7794: PUSH
7795: LD_EXP 25
7799: PUSH
7800: LD_EXP 21
7804: PUSH
7805: EMPTY
7806: LIST
7807: LIST
7808: LIST
7809: LIST
7810: LIST
7811: LIST
7812: LIST
7813: LIST
7814: IN
7815: NOT
7816: IFFALSE 7859
// begin if GetSex ( sci ) = sex_male then
7818: LD_VAR 0 2
7822: PPUSH
7823: CALL_OW 258
7827: PUSH
7828: LD_INT 1
7830: EQUAL
7831: IFFALSE 7847
// Say ( sci , D7c-Sci1-1 ) else
7833: LD_VAR 0 2
7837: PPUSH
7838: LD_STRING D7c-Sci1-1
7840: PPUSH
7841: CALL_OW 88
7845: GO 7859
// Say ( sci , D7c-FSci1-1 ) ;
7847: LD_VAR 0 2
7851: PPUSH
7852: LD_STRING D7c-FSci1-1
7854: PPUSH
7855: CALL_OW 88
// end ; if not sci = Gladstone then
7859: LD_VAR 0 2
7863: PUSH
7864: LD_EXP 17
7868: EQUAL
7869: NOT
7870: IFFALSE 7884
// Say ( Gladstone , D7c-Glad-1 ) ;
7872: LD_EXP 17
7876: PPUSH
7877: LD_STRING D7c-Glad-1
7879: PPUSH
7880: CALL_OW 88
// if Lisa then
7884: LD_EXP 22
7888: IFFALSE 7902
// Say ( Lisa , D8-Lisa-1 ) ;
7890: LD_EXP 22
7894: PPUSH
7895: LD_STRING D8-Lisa-1
7897: PPUSH
7898: CALL_OW 88
// end ; end ; end_of_file end_of_file
7902: PPOPN 2
7904: END
// every 0 0$1 do
7905: GO 7907
7907: DISABLE
// begin enable ;
7908: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
7909: LD_STRING updateTimer(
7911: PUSH
7912: LD_OWVAR 1
7916: STR
7917: PUSH
7918: LD_STRING );
7920: STR
7921: PPUSH
7922: CALL_OW 559
// end ;
7926: END
// export function SOS_MapStart ( ) ; begin
7927: LD_INT 0
7929: PPUSH
// if streamModeActive then
7930: LD_EXP 29
7934: IFFALSE 7943
// DefineStreamItems ( true ) ;
7936: LD_INT 1
7938: PPUSH
7939: CALL 9597 0 1
// UpdateFactoryWaypoints ( ) ;
7943: CALL 22458 0 0
// UpdateWarehouseGatheringPoints ( ) ;
7947: CALL 22715 0 0
// end ;
7951: LD_VAR 0 1
7955: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
7956: LD_INT 0
7958: PPUSH
// if p2 = 100 then
7959: LD_VAR 0 2
7963: PUSH
7964: LD_INT 100
7966: EQUAL
7967: IFFALSE 8970
// begin if not StreamModeActive then
7969: LD_EXP 29
7973: NOT
7974: IFFALSE 7984
// StreamModeActive := true ;
7976: LD_ADDR_EXP 29
7980: PUSH
7981: LD_INT 1
7983: ST_TO_ADDR
// if p3 = 0 then
7984: LD_VAR 0 3
7988: PUSH
7989: LD_INT 0
7991: EQUAL
7992: IFFALSE 7998
// InitStreamMode ;
7994: CALL 9133 0 0
// if p3 = 1 then
7998: LD_VAR 0 3
8002: PUSH
8003: LD_INT 1
8005: EQUAL
8006: IFFALSE 8016
// sRocket := true ;
8008: LD_ADDR_EXP 34
8012: PUSH
8013: LD_INT 1
8015: ST_TO_ADDR
// if p3 = 2 then
8016: LD_VAR 0 3
8020: PUSH
8021: LD_INT 2
8023: EQUAL
8024: IFFALSE 8034
// sSpeed := true ;
8026: LD_ADDR_EXP 33
8030: PUSH
8031: LD_INT 1
8033: ST_TO_ADDR
// if p3 = 3 then
8034: LD_VAR 0 3
8038: PUSH
8039: LD_INT 3
8041: EQUAL
8042: IFFALSE 8052
// sEngine := true ;
8044: LD_ADDR_EXP 35
8048: PUSH
8049: LD_INT 1
8051: ST_TO_ADDR
// if p3 = 4 then
8052: LD_VAR 0 3
8056: PUSH
8057: LD_INT 4
8059: EQUAL
8060: IFFALSE 8070
// sSpec := true ;
8062: LD_ADDR_EXP 32
8066: PUSH
8067: LD_INT 1
8069: ST_TO_ADDR
// if p3 = 5 then
8070: LD_VAR 0 3
8074: PUSH
8075: LD_INT 5
8077: EQUAL
8078: IFFALSE 8088
// sLevel := true ;
8080: LD_ADDR_EXP 36
8084: PUSH
8085: LD_INT 1
8087: ST_TO_ADDR
// if p3 = 6 then
8088: LD_VAR 0 3
8092: PUSH
8093: LD_INT 6
8095: EQUAL
8096: IFFALSE 8106
// sArmoury := true ;
8098: LD_ADDR_EXP 37
8102: PUSH
8103: LD_INT 1
8105: ST_TO_ADDR
// if p3 = 7 then
8106: LD_VAR 0 3
8110: PUSH
8111: LD_INT 7
8113: EQUAL
8114: IFFALSE 8124
// sRadar := true ;
8116: LD_ADDR_EXP 38
8120: PUSH
8121: LD_INT 1
8123: ST_TO_ADDR
// if p3 = 8 then
8124: LD_VAR 0 3
8128: PUSH
8129: LD_INT 8
8131: EQUAL
8132: IFFALSE 8142
// sBunker := true ;
8134: LD_ADDR_EXP 39
8138: PUSH
8139: LD_INT 1
8141: ST_TO_ADDR
// if p3 = 9 then
8142: LD_VAR 0 3
8146: PUSH
8147: LD_INT 9
8149: EQUAL
8150: IFFALSE 8160
// sHack := true ;
8152: LD_ADDR_EXP 40
8156: PUSH
8157: LD_INT 1
8159: ST_TO_ADDR
// if p3 = 10 then
8160: LD_VAR 0 3
8164: PUSH
8165: LD_INT 10
8167: EQUAL
8168: IFFALSE 8178
// sFire := true ;
8170: LD_ADDR_EXP 41
8174: PUSH
8175: LD_INT 1
8177: ST_TO_ADDR
// if p3 = 11 then
8178: LD_VAR 0 3
8182: PUSH
8183: LD_INT 11
8185: EQUAL
8186: IFFALSE 8196
// sRefresh := true ;
8188: LD_ADDR_EXP 42
8192: PUSH
8193: LD_INT 1
8195: ST_TO_ADDR
// if p3 = 12 then
8196: LD_VAR 0 3
8200: PUSH
8201: LD_INT 12
8203: EQUAL
8204: IFFALSE 8214
// sExp := true ;
8206: LD_ADDR_EXP 43
8210: PUSH
8211: LD_INT 1
8213: ST_TO_ADDR
// if p3 = 13 then
8214: LD_VAR 0 3
8218: PUSH
8219: LD_INT 13
8221: EQUAL
8222: IFFALSE 8232
// sDepot := true ;
8224: LD_ADDR_EXP 44
8228: PUSH
8229: LD_INT 1
8231: ST_TO_ADDR
// if p3 = 14 then
8232: LD_VAR 0 3
8236: PUSH
8237: LD_INT 14
8239: EQUAL
8240: IFFALSE 8250
// sFlag := true ;
8242: LD_ADDR_EXP 45
8246: PUSH
8247: LD_INT 1
8249: ST_TO_ADDR
// if p3 = 15 then
8250: LD_VAR 0 3
8254: PUSH
8255: LD_INT 15
8257: EQUAL
8258: IFFALSE 8268
// sKamikadze := true ;
8260: LD_ADDR_EXP 53
8264: PUSH
8265: LD_INT 1
8267: ST_TO_ADDR
// if p3 = 16 then
8268: LD_VAR 0 3
8272: PUSH
8273: LD_INT 16
8275: EQUAL
8276: IFFALSE 8286
// sTroll := true ;
8278: LD_ADDR_EXP 54
8282: PUSH
8283: LD_INT 1
8285: ST_TO_ADDR
// if p3 = 17 then
8286: LD_VAR 0 3
8290: PUSH
8291: LD_INT 17
8293: EQUAL
8294: IFFALSE 8304
// sSlow := true ;
8296: LD_ADDR_EXP 55
8300: PUSH
8301: LD_INT 1
8303: ST_TO_ADDR
// if p3 = 18 then
8304: LD_VAR 0 3
8308: PUSH
8309: LD_INT 18
8311: EQUAL
8312: IFFALSE 8322
// sLack := true ;
8314: LD_ADDR_EXP 56
8318: PUSH
8319: LD_INT 1
8321: ST_TO_ADDR
// if p3 = 19 then
8322: LD_VAR 0 3
8326: PUSH
8327: LD_INT 19
8329: EQUAL
8330: IFFALSE 8340
// sTank := true ;
8332: LD_ADDR_EXP 58
8336: PUSH
8337: LD_INT 1
8339: ST_TO_ADDR
// if p3 = 20 then
8340: LD_VAR 0 3
8344: PUSH
8345: LD_INT 20
8347: EQUAL
8348: IFFALSE 8358
// sRemote := true ;
8350: LD_ADDR_EXP 59
8354: PUSH
8355: LD_INT 1
8357: ST_TO_ADDR
// if p3 = 21 then
8358: LD_VAR 0 3
8362: PUSH
8363: LD_INT 21
8365: EQUAL
8366: IFFALSE 8376
// sPowell := true ;
8368: LD_ADDR_EXP 60
8372: PUSH
8373: LD_INT 1
8375: ST_TO_ADDR
// if p3 = 22 then
8376: LD_VAR 0 3
8380: PUSH
8381: LD_INT 22
8383: EQUAL
8384: IFFALSE 8394
// sTeleport := true ;
8386: LD_ADDR_EXP 63
8390: PUSH
8391: LD_INT 1
8393: ST_TO_ADDR
// if p3 = 23 then
8394: LD_VAR 0 3
8398: PUSH
8399: LD_INT 23
8401: EQUAL
8402: IFFALSE 8412
// sOilTower := true ;
8404: LD_ADDR_EXP 65
8408: PUSH
8409: LD_INT 1
8411: ST_TO_ADDR
// if p3 = 24 then
8412: LD_VAR 0 3
8416: PUSH
8417: LD_INT 24
8419: EQUAL
8420: IFFALSE 8430
// sShovel := true ;
8422: LD_ADDR_EXP 66
8426: PUSH
8427: LD_INT 1
8429: ST_TO_ADDR
// if p3 = 25 then
8430: LD_VAR 0 3
8434: PUSH
8435: LD_INT 25
8437: EQUAL
8438: IFFALSE 8448
// sSheik := true ;
8440: LD_ADDR_EXP 67
8444: PUSH
8445: LD_INT 1
8447: ST_TO_ADDR
// if p3 = 26 then
8448: LD_VAR 0 3
8452: PUSH
8453: LD_INT 26
8455: EQUAL
8456: IFFALSE 8466
// sEarthquake := true ;
8458: LD_ADDR_EXP 69
8462: PUSH
8463: LD_INT 1
8465: ST_TO_ADDR
// if p3 = 27 then
8466: LD_VAR 0 3
8470: PUSH
8471: LD_INT 27
8473: EQUAL
8474: IFFALSE 8484
// sAI := true ;
8476: LD_ADDR_EXP 70
8480: PUSH
8481: LD_INT 1
8483: ST_TO_ADDR
// if p3 = 28 then
8484: LD_VAR 0 3
8488: PUSH
8489: LD_INT 28
8491: EQUAL
8492: IFFALSE 8502
// sCargo := true ;
8494: LD_ADDR_EXP 73
8498: PUSH
8499: LD_INT 1
8501: ST_TO_ADDR
// if p3 = 29 then
8502: LD_VAR 0 3
8506: PUSH
8507: LD_INT 29
8509: EQUAL
8510: IFFALSE 8520
// sDLaser := true ;
8512: LD_ADDR_EXP 74
8516: PUSH
8517: LD_INT 1
8519: ST_TO_ADDR
// if p3 = 30 then
8520: LD_VAR 0 3
8524: PUSH
8525: LD_INT 30
8527: EQUAL
8528: IFFALSE 8538
// sExchange := true ;
8530: LD_ADDR_EXP 75
8534: PUSH
8535: LD_INT 1
8537: ST_TO_ADDR
// if p3 = 31 then
8538: LD_VAR 0 3
8542: PUSH
8543: LD_INT 31
8545: EQUAL
8546: IFFALSE 8556
// sFac := true ;
8548: LD_ADDR_EXP 76
8552: PUSH
8553: LD_INT 1
8555: ST_TO_ADDR
// if p3 = 32 then
8556: LD_VAR 0 3
8560: PUSH
8561: LD_INT 32
8563: EQUAL
8564: IFFALSE 8574
// sPower := true ;
8566: LD_ADDR_EXP 77
8570: PUSH
8571: LD_INT 1
8573: ST_TO_ADDR
// if p3 = 33 then
8574: LD_VAR 0 3
8578: PUSH
8579: LD_INT 33
8581: EQUAL
8582: IFFALSE 8592
// sRandom := true ;
8584: LD_ADDR_EXP 78
8588: PUSH
8589: LD_INT 1
8591: ST_TO_ADDR
// if p3 = 34 then
8592: LD_VAR 0 3
8596: PUSH
8597: LD_INT 34
8599: EQUAL
8600: IFFALSE 8610
// sShield := true ;
8602: LD_ADDR_EXP 79
8606: PUSH
8607: LD_INT 1
8609: ST_TO_ADDR
// if p3 = 35 then
8610: LD_VAR 0 3
8614: PUSH
8615: LD_INT 35
8617: EQUAL
8618: IFFALSE 8628
// sTime := true ;
8620: LD_ADDR_EXP 80
8624: PUSH
8625: LD_INT 1
8627: ST_TO_ADDR
// if p3 = 36 then
8628: LD_VAR 0 3
8632: PUSH
8633: LD_INT 36
8635: EQUAL
8636: IFFALSE 8646
// sTools := true ;
8638: LD_ADDR_EXP 81
8642: PUSH
8643: LD_INT 1
8645: ST_TO_ADDR
// if p3 = 101 then
8646: LD_VAR 0 3
8650: PUSH
8651: LD_INT 101
8653: EQUAL
8654: IFFALSE 8664
// sSold := true ;
8656: LD_ADDR_EXP 46
8660: PUSH
8661: LD_INT 1
8663: ST_TO_ADDR
// if p3 = 102 then
8664: LD_VAR 0 3
8668: PUSH
8669: LD_INT 102
8671: EQUAL
8672: IFFALSE 8682
// sDiff := true ;
8674: LD_ADDR_EXP 47
8678: PUSH
8679: LD_INT 1
8681: ST_TO_ADDR
// if p3 = 103 then
8682: LD_VAR 0 3
8686: PUSH
8687: LD_INT 103
8689: EQUAL
8690: IFFALSE 8700
// sFog := true ;
8692: LD_ADDR_EXP 50
8696: PUSH
8697: LD_INT 1
8699: ST_TO_ADDR
// if p3 = 104 then
8700: LD_VAR 0 3
8704: PUSH
8705: LD_INT 104
8707: EQUAL
8708: IFFALSE 8718
// sReset := true ;
8710: LD_ADDR_EXP 51
8714: PUSH
8715: LD_INT 1
8717: ST_TO_ADDR
// if p3 = 105 then
8718: LD_VAR 0 3
8722: PUSH
8723: LD_INT 105
8725: EQUAL
8726: IFFALSE 8736
// sSun := true ;
8728: LD_ADDR_EXP 52
8732: PUSH
8733: LD_INT 1
8735: ST_TO_ADDR
// if p3 = 106 then
8736: LD_VAR 0 3
8740: PUSH
8741: LD_INT 106
8743: EQUAL
8744: IFFALSE 8754
// sTiger := true ;
8746: LD_ADDR_EXP 48
8750: PUSH
8751: LD_INT 1
8753: ST_TO_ADDR
// if p3 = 107 then
8754: LD_VAR 0 3
8758: PUSH
8759: LD_INT 107
8761: EQUAL
8762: IFFALSE 8772
// sBomb := true ;
8764: LD_ADDR_EXP 49
8768: PUSH
8769: LD_INT 1
8771: ST_TO_ADDR
// if p3 = 108 then
8772: LD_VAR 0 3
8776: PUSH
8777: LD_INT 108
8779: EQUAL
8780: IFFALSE 8790
// sWound := true ;
8782: LD_ADDR_EXP 57
8786: PUSH
8787: LD_INT 1
8789: ST_TO_ADDR
// if p3 = 109 then
8790: LD_VAR 0 3
8794: PUSH
8795: LD_INT 109
8797: EQUAL
8798: IFFALSE 8808
// sBetray := true ;
8800: LD_ADDR_EXP 61
8804: PUSH
8805: LD_INT 1
8807: ST_TO_ADDR
// if p3 = 110 then
8808: LD_VAR 0 3
8812: PUSH
8813: LD_INT 110
8815: EQUAL
8816: IFFALSE 8826
// sContamin := true ;
8818: LD_ADDR_EXP 62
8822: PUSH
8823: LD_INT 1
8825: ST_TO_ADDR
// if p3 = 111 then
8826: LD_VAR 0 3
8830: PUSH
8831: LD_INT 111
8833: EQUAL
8834: IFFALSE 8844
// sOil := true ;
8836: LD_ADDR_EXP 64
8840: PUSH
8841: LD_INT 1
8843: ST_TO_ADDR
// if p3 = 112 then
8844: LD_VAR 0 3
8848: PUSH
8849: LD_INT 112
8851: EQUAL
8852: IFFALSE 8862
// sStu := true ;
8854: LD_ADDR_EXP 68
8858: PUSH
8859: LD_INT 1
8861: ST_TO_ADDR
// if p3 = 113 then
8862: LD_VAR 0 3
8866: PUSH
8867: LD_INT 113
8869: EQUAL
8870: IFFALSE 8880
// sBazooka := true ;
8872: LD_ADDR_EXP 71
8876: PUSH
8877: LD_INT 1
8879: ST_TO_ADDR
// if p3 = 114 then
8880: LD_VAR 0 3
8884: PUSH
8885: LD_INT 114
8887: EQUAL
8888: IFFALSE 8898
// sMortar := true ;
8890: LD_ADDR_EXP 72
8894: PUSH
8895: LD_INT 1
8897: ST_TO_ADDR
// if p3 = 115 then
8898: LD_VAR 0 3
8902: PUSH
8903: LD_INT 115
8905: EQUAL
8906: IFFALSE 8916
// sRanger := true ;
8908: LD_ADDR_EXP 82
8912: PUSH
8913: LD_INT 1
8915: ST_TO_ADDR
// if p3 = 116 then
8916: LD_VAR 0 3
8920: PUSH
8921: LD_INT 116
8923: EQUAL
8924: IFFALSE 8934
// sComputer := true ;
8926: LD_ADDR_EXP 83
8930: PUSH
8931: LD_INT 1
8933: ST_TO_ADDR
// if p3 = 117 then
8934: LD_VAR 0 3
8938: PUSH
8939: LD_INT 117
8941: EQUAL
8942: IFFALSE 8952
// s30 := true ;
8944: LD_ADDR_EXP 84
8948: PUSH
8949: LD_INT 1
8951: ST_TO_ADDR
// if p3 = 118 then
8952: LD_VAR 0 3
8956: PUSH
8957: LD_INT 118
8959: EQUAL
8960: IFFALSE 8970
// s60 := true ;
8962: LD_ADDR_EXP 85
8966: PUSH
8967: LD_INT 1
8969: ST_TO_ADDR
// end ; if p2 = 101 then
8970: LD_VAR 0 2
8974: PUSH
8975: LD_INT 101
8977: EQUAL
8978: IFFALSE 9106
// begin case p3 of 1 :
8980: LD_VAR 0 3
8984: PUSH
8985: LD_INT 1
8987: DOUBLE
8988: EQUAL
8989: IFTRUE 8993
8991: GO 9000
8993: POP
// hHackUnlimitedResources ; 2 :
8994: CALL 21204 0 0
8998: GO 9106
9000: LD_INT 2
9002: DOUBLE
9003: EQUAL
9004: IFTRUE 9008
9006: GO 9015
9008: POP
// hHackSetLevel10 ; 3 :
9009: CALL 21337 0 0
9013: GO 9106
9015: LD_INT 3
9017: DOUBLE
9018: EQUAL
9019: IFTRUE 9023
9021: GO 9030
9023: POP
// hHackSetLevel10YourUnits ; 4 :
9024: CALL 21422 0 0
9028: GO 9106
9030: LD_INT 4
9032: DOUBLE
9033: EQUAL
9034: IFTRUE 9038
9036: GO 9045
9038: POP
// hHackInvincible ; 5 :
9039: CALL 21870 0 0
9043: GO 9106
9045: LD_INT 5
9047: DOUBLE
9048: EQUAL
9049: IFTRUE 9053
9051: GO 9060
9053: POP
// hHackInvisible ; 6 :
9054: CALL 21981 0 0
9058: GO 9106
9060: LD_INT 6
9062: DOUBLE
9063: EQUAL
9064: IFTRUE 9068
9066: GO 9075
9068: POP
// hHackChangeYourSide ; 7 :
9069: CALL 22038 0 0
9073: GO 9106
9075: LD_INT 7
9077: DOUBLE
9078: EQUAL
9079: IFTRUE 9083
9081: GO 9090
9083: POP
// hHackChangeUnitSide ; 8 :
9084: CALL 22080 0 0
9088: GO 9106
9090: LD_INT 8
9092: DOUBLE
9093: EQUAL
9094: IFTRUE 9098
9096: GO 9105
9098: POP
// hHackFog ; end ;
9099: CALL 22181 0 0
9103: GO 9106
9105: POP
// end ; end ;
9106: LD_VAR 0 7
9110: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
9111: GO 9113
9113: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
9114: LD_STRING initStreamRollete();
9116: PPUSH
9117: CALL_OW 559
// InitStreamMode ;
9121: CALL 9133 0 0
// DefineStreamItems ( false ) ;
9125: LD_INT 0
9127: PPUSH
9128: CALL 9597 0 1
// end ;
9132: END
// function InitStreamMode ; begin
9133: LD_INT 0
9135: PPUSH
// streamModeActive := false ;
9136: LD_ADDR_EXP 29
9140: PUSH
9141: LD_INT 0
9143: ST_TO_ADDR
// normalCounter := 36 ;
9144: LD_ADDR_EXP 30
9148: PUSH
9149: LD_INT 36
9151: ST_TO_ADDR
// hardcoreCounter := 18 ;
9152: LD_ADDR_EXP 31
9156: PUSH
9157: LD_INT 18
9159: ST_TO_ADDR
// sRocket := false ;
9160: LD_ADDR_EXP 34
9164: PUSH
9165: LD_INT 0
9167: ST_TO_ADDR
// sSpeed := false ;
9168: LD_ADDR_EXP 33
9172: PUSH
9173: LD_INT 0
9175: ST_TO_ADDR
// sEngine := false ;
9176: LD_ADDR_EXP 35
9180: PUSH
9181: LD_INT 0
9183: ST_TO_ADDR
// sSpec := false ;
9184: LD_ADDR_EXP 32
9188: PUSH
9189: LD_INT 0
9191: ST_TO_ADDR
// sLevel := false ;
9192: LD_ADDR_EXP 36
9196: PUSH
9197: LD_INT 0
9199: ST_TO_ADDR
// sArmoury := false ;
9200: LD_ADDR_EXP 37
9204: PUSH
9205: LD_INT 0
9207: ST_TO_ADDR
// sRadar := false ;
9208: LD_ADDR_EXP 38
9212: PUSH
9213: LD_INT 0
9215: ST_TO_ADDR
// sBunker := false ;
9216: LD_ADDR_EXP 39
9220: PUSH
9221: LD_INT 0
9223: ST_TO_ADDR
// sHack := false ;
9224: LD_ADDR_EXP 40
9228: PUSH
9229: LD_INT 0
9231: ST_TO_ADDR
// sFire := false ;
9232: LD_ADDR_EXP 41
9236: PUSH
9237: LD_INT 0
9239: ST_TO_ADDR
// sRefresh := false ;
9240: LD_ADDR_EXP 42
9244: PUSH
9245: LD_INT 0
9247: ST_TO_ADDR
// sExp := false ;
9248: LD_ADDR_EXP 43
9252: PUSH
9253: LD_INT 0
9255: ST_TO_ADDR
// sDepot := false ;
9256: LD_ADDR_EXP 44
9260: PUSH
9261: LD_INT 0
9263: ST_TO_ADDR
// sFlag := false ;
9264: LD_ADDR_EXP 45
9268: PUSH
9269: LD_INT 0
9271: ST_TO_ADDR
// sKamikadze := false ;
9272: LD_ADDR_EXP 53
9276: PUSH
9277: LD_INT 0
9279: ST_TO_ADDR
// sTroll := false ;
9280: LD_ADDR_EXP 54
9284: PUSH
9285: LD_INT 0
9287: ST_TO_ADDR
// sSlow := false ;
9288: LD_ADDR_EXP 55
9292: PUSH
9293: LD_INT 0
9295: ST_TO_ADDR
// sLack := false ;
9296: LD_ADDR_EXP 56
9300: PUSH
9301: LD_INT 0
9303: ST_TO_ADDR
// sTank := false ;
9304: LD_ADDR_EXP 58
9308: PUSH
9309: LD_INT 0
9311: ST_TO_ADDR
// sRemote := false ;
9312: LD_ADDR_EXP 59
9316: PUSH
9317: LD_INT 0
9319: ST_TO_ADDR
// sPowell := false ;
9320: LD_ADDR_EXP 60
9324: PUSH
9325: LD_INT 0
9327: ST_TO_ADDR
// sTeleport := false ;
9328: LD_ADDR_EXP 63
9332: PUSH
9333: LD_INT 0
9335: ST_TO_ADDR
// sOilTower := false ;
9336: LD_ADDR_EXP 65
9340: PUSH
9341: LD_INT 0
9343: ST_TO_ADDR
// sShovel := false ;
9344: LD_ADDR_EXP 66
9348: PUSH
9349: LD_INT 0
9351: ST_TO_ADDR
// sSheik := false ;
9352: LD_ADDR_EXP 67
9356: PUSH
9357: LD_INT 0
9359: ST_TO_ADDR
// sEarthquake := false ;
9360: LD_ADDR_EXP 69
9364: PUSH
9365: LD_INT 0
9367: ST_TO_ADDR
// sAI := false ;
9368: LD_ADDR_EXP 70
9372: PUSH
9373: LD_INT 0
9375: ST_TO_ADDR
// sCargo := false ;
9376: LD_ADDR_EXP 73
9380: PUSH
9381: LD_INT 0
9383: ST_TO_ADDR
// sDLaser := false ;
9384: LD_ADDR_EXP 74
9388: PUSH
9389: LD_INT 0
9391: ST_TO_ADDR
// sExchange := false ;
9392: LD_ADDR_EXP 75
9396: PUSH
9397: LD_INT 0
9399: ST_TO_ADDR
// sFac := false ;
9400: LD_ADDR_EXP 76
9404: PUSH
9405: LD_INT 0
9407: ST_TO_ADDR
// sPower := false ;
9408: LD_ADDR_EXP 77
9412: PUSH
9413: LD_INT 0
9415: ST_TO_ADDR
// sRandom := false ;
9416: LD_ADDR_EXP 78
9420: PUSH
9421: LD_INT 0
9423: ST_TO_ADDR
// sShield := false ;
9424: LD_ADDR_EXP 79
9428: PUSH
9429: LD_INT 0
9431: ST_TO_ADDR
// sTime := false ;
9432: LD_ADDR_EXP 80
9436: PUSH
9437: LD_INT 0
9439: ST_TO_ADDR
// sTools := false ;
9440: LD_ADDR_EXP 81
9444: PUSH
9445: LD_INT 0
9447: ST_TO_ADDR
// sSold := false ;
9448: LD_ADDR_EXP 46
9452: PUSH
9453: LD_INT 0
9455: ST_TO_ADDR
// sDiff := false ;
9456: LD_ADDR_EXP 47
9460: PUSH
9461: LD_INT 0
9463: ST_TO_ADDR
// sFog := false ;
9464: LD_ADDR_EXP 50
9468: PUSH
9469: LD_INT 0
9471: ST_TO_ADDR
// sReset := false ;
9472: LD_ADDR_EXP 51
9476: PUSH
9477: LD_INT 0
9479: ST_TO_ADDR
// sSun := false ;
9480: LD_ADDR_EXP 52
9484: PUSH
9485: LD_INT 0
9487: ST_TO_ADDR
// sTiger := false ;
9488: LD_ADDR_EXP 48
9492: PUSH
9493: LD_INT 0
9495: ST_TO_ADDR
// sBomb := false ;
9496: LD_ADDR_EXP 49
9500: PUSH
9501: LD_INT 0
9503: ST_TO_ADDR
// sWound := false ;
9504: LD_ADDR_EXP 57
9508: PUSH
9509: LD_INT 0
9511: ST_TO_ADDR
// sBetray := false ;
9512: LD_ADDR_EXP 61
9516: PUSH
9517: LD_INT 0
9519: ST_TO_ADDR
// sContamin := false ;
9520: LD_ADDR_EXP 62
9524: PUSH
9525: LD_INT 0
9527: ST_TO_ADDR
// sOil := false ;
9528: LD_ADDR_EXP 64
9532: PUSH
9533: LD_INT 0
9535: ST_TO_ADDR
// sStu := false ;
9536: LD_ADDR_EXP 68
9540: PUSH
9541: LD_INT 0
9543: ST_TO_ADDR
// sBazooka := false ;
9544: LD_ADDR_EXP 71
9548: PUSH
9549: LD_INT 0
9551: ST_TO_ADDR
// sMortar := false ;
9552: LD_ADDR_EXP 72
9556: PUSH
9557: LD_INT 0
9559: ST_TO_ADDR
// sRanger := false ;
9560: LD_ADDR_EXP 82
9564: PUSH
9565: LD_INT 0
9567: ST_TO_ADDR
// sComputer := false ;
9568: LD_ADDR_EXP 83
9572: PUSH
9573: LD_INT 0
9575: ST_TO_ADDR
// s30 := false ;
9576: LD_ADDR_EXP 84
9580: PUSH
9581: LD_INT 0
9583: ST_TO_ADDR
// s60 := false ;
9584: LD_ADDR_EXP 85
9588: PUSH
9589: LD_INT 0
9591: ST_TO_ADDR
// end ;
9592: LD_VAR 0 1
9596: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
9597: LD_INT 0
9599: PPUSH
9600: PPUSH
9601: PPUSH
9602: PPUSH
9603: PPUSH
9604: PPUSH
9605: PPUSH
// result := [ ] ;
9606: LD_ADDR_VAR 0 2
9610: PUSH
9611: EMPTY
9612: ST_TO_ADDR
// if campaign_id = 1 then
9613: LD_OWVAR 69
9617: PUSH
9618: LD_INT 1
9620: EQUAL
9621: IFFALSE 12787
// begin case mission_number of 1 :
9623: LD_OWVAR 70
9627: PUSH
9628: LD_INT 1
9630: DOUBLE
9631: EQUAL
9632: IFTRUE 9636
9634: GO 9712
9636: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
9637: LD_ADDR_VAR 0 2
9641: PUSH
9642: LD_INT 2
9644: PUSH
9645: LD_INT 4
9647: PUSH
9648: LD_INT 11
9650: PUSH
9651: LD_INT 12
9653: PUSH
9654: LD_INT 15
9656: PUSH
9657: LD_INT 16
9659: PUSH
9660: LD_INT 22
9662: PUSH
9663: LD_INT 23
9665: PUSH
9666: LD_INT 26
9668: PUSH
9669: EMPTY
9670: LIST
9671: LIST
9672: LIST
9673: LIST
9674: LIST
9675: LIST
9676: LIST
9677: LIST
9678: LIST
9679: PUSH
9680: LD_INT 101
9682: PUSH
9683: LD_INT 102
9685: PUSH
9686: LD_INT 106
9688: PUSH
9689: LD_INT 116
9691: PUSH
9692: LD_INT 117
9694: PUSH
9695: LD_INT 118
9697: PUSH
9698: EMPTY
9699: LIST
9700: LIST
9701: LIST
9702: LIST
9703: LIST
9704: LIST
9705: PUSH
9706: EMPTY
9707: LIST
9708: LIST
9709: ST_TO_ADDR
9710: GO 12785
9712: LD_INT 2
9714: DOUBLE
9715: EQUAL
9716: IFTRUE 9720
9718: GO 9804
9720: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
9721: LD_ADDR_VAR 0 2
9725: PUSH
9726: LD_INT 2
9728: PUSH
9729: LD_INT 4
9731: PUSH
9732: LD_INT 11
9734: PUSH
9735: LD_INT 12
9737: PUSH
9738: LD_INT 15
9740: PUSH
9741: LD_INT 16
9743: PUSH
9744: LD_INT 22
9746: PUSH
9747: LD_INT 23
9749: PUSH
9750: LD_INT 26
9752: PUSH
9753: EMPTY
9754: LIST
9755: LIST
9756: LIST
9757: LIST
9758: LIST
9759: LIST
9760: LIST
9761: LIST
9762: LIST
9763: PUSH
9764: LD_INT 101
9766: PUSH
9767: LD_INT 102
9769: PUSH
9770: LD_INT 105
9772: PUSH
9773: LD_INT 106
9775: PUSH
9776: LD_INT 108
9778: PUSH
9779: LD_INT 116
9781: PUSH
9782: LD_INT 117
9784: PUSH
9785: LD_INT 118
9787: PUSH
9788: EMPTY
9789: LIST
9790: LIST
9791: LIST
9792: LIST
9793: LIST
9794: LIST
9795: LIST
9796: LIST
9797: PUSH
9798: EMPTY
9799: LIST
9800: LIST
9801: ST_TO_ADDR
9802: GO 12785
9804: LD_INT 3
9806: DOUBLE
9807: EQUAL
9808: IFTRUE 9812
9810: GO 9900
9812: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
9813: LD_ADDR_VAR 0 2
9817: PUSH
9818: LD_INT 2
9820: PUSH
9821: LD_INT 4
9823: PUSH
9824: LD_INT 5
9826: PUSH
9827: LD_INT 11
9829: PUSH
9830: LD_INT 12
9832: PUSH
9833: LD_INT 15
9835: PUSH
9836: LD_INT 16
9838: PUSH
9839: LD_INT 22
9841: PUSH
9842: LD_INT 26
9844: PUSH
9845: LD_INT 36
9847: PUSH
9848: EMPTY
9849: LIST
9850: LIST
9851: LIST
9852: LIST
9853: LIST
9854: LIST
9855: LIST
9856: LIST
9857: LIST
9858: LIST
9859: PUSH
9860: LD_INT 101
9862: PUSH
9863: LD_INT 102
9865: PUSH
9866: LD_INT 105
9868: PUSH
9869: LD_INT 106
9871: PUSH
9872: LD_INT 108
9874: PUSH
9875: LD_INT 116
9877: PUSH
9878: LD_INT 117
9880: PUSH
9881: LD_INT 118
9883: PUSH
9884: EMPTY
9885: LIST
9886: LIST
9887: LIST
9888: LIST
9889: LIST
9890: LIST
9891: LIST
9892: LIST
9893: PUSH
9894: EMPTY
9895: LIST
9896: LIST
9897: ST_TO_ADDR
9898: GO 12785
9900: LD_INT 4
9902: DOUBLE
9903: EQUAL
9904: IFTRUE 9908
9906: GO 10004
9908: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
9909: LD_ADDR_VAR 0 2
9913: PUSH
9914: LD_INT 2
9916: PUSH
9917: LD_INT 4
9919: PUSH
9920: LD_INT 5
9922: PUSH
9923: LD_INT 8
9925: PUSH
9926: LD_INT 11
9928: PUSH
9929: LD_INT 12
9931: PUSH
9932: LD_INT 15
9934: PUSH
9935: LD_INT 16
9937: PUSH
9938: LD_INT 22
9940: PUSH
9941: LD_INT 23
9943: PUSH
9944: LD_INT 26
9946: PUSH
9947: LD_INT 36
9949: PUSH
9950: EMPTY
9951: LIST
9952: LIST
9953: LIST
9954: LIST
9955: LIST
9956: LIST
9957: LIST
9958: LIST
9959: LIST
9960: LIST
9961: LIST
9962: LIST
9963: PUSH
9964: LD_INT 101
9966: PUSH
9967: LD_INT 102
9969: PUSH
9970: LD_INT 105
9972: PUSH
9973: LD_INT 106
9975: PUSH
9976: LD_INT 108
9978: PUSH
9979: LD_INT 116
9981: PUSH
9982: LD_INT 117
9984: PUSH
9985: LD_INT 118
9987: PUSH
9988: EMPTY
9989: LIST
9990: LIST
9991: LIST
9992: LIST
9993: LIST
9994: LIST
9995: LIST
9996: LIST
9997: PUSH
9998: EMPTY
9999: LIST
10000: LIST
10001: ST_TO_ADDR
10002: GO 12785
10004: LD_INT 5
10006: DOUBLE
10007: EQUAL
10008: IFTRUE 10012
10010: GO 10124
10012: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
10013: LD_ADDR_VAR 0 2
10017: PUSH
10018: LD_INT 2
10020: PUSH
10021: LD_INT 4
10023: PUSH
10024: LD_INT 5
10026: PUSH
10027: LD_INT 6
10029: PUSH
10030: LD_INT 8
10032: PUSH
10033: LD_INT 11
10035: PUSH
10036: LD_INT 12
10038: PUSH
10039: LD_INT 15
10041: PUSH
10042: LD_INT 16
10044: PUSH
10045: LD_INT 22
10047: PUSH
10048: LD_INT 23
10050: PUSH
10051: LD_INT 25
10053: PUSH
10054: LD_INT 26
10056: PUSH
10057: LD_INT 36
10059: PUSH
10060: EMPTY
10061: LIST
10062: LIST
10063: LIST
10064: LIST
10065: LIST
10066: LIST
10067: LIST
10068: LIST
10069: LIST
10070: LIST
10071: LIST
10072: LIST
10073: LIST
10074: LIST
10075: PUSH
10076: LD_INT 101
10078: PUSH
10079: LD_INT 102
10081: PUSH
10082: LD_INT 105
10084: PUSH
10085: LD_INT 106
10087: PUSH
10088: LD_INT 108
10090: PUSH
10091: LD_INT 109
10093: PUSH
10094: LD_INT 112
10096: PUSH
10097: LD_INT 116
10099: PUSH
10100: LD_INT 117
10102: PUSH
10103: LD_INT 118
10105: PUSH
10106: EMPTY
10107: LIST
10108: LIST
10109: LIST
10110: LIST
10111: LIST
10112: LIST
10113: LIST
10114: LIST
10115: LIST
10116: LIST
10117: PUSH
10118: EMPTY
10119: LIST
10120: LIST
10121: ST_TO_ADDR
10122: GO 12785
10124: LD_INT 6
10126: DOUBLE
10127: EQUAL
10128: IFTRUE 10132
10130: GO 10264
10132: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
10133: LD_ADDR_VAR 0 2
10137: PUSH
10138: LD_INT 2
10140: PUSH
10141: LD_INT 4
10143: PUSH
10144: LD_INT 5
10146: PUSH
10147: LD_INT 6
10149: PUSH
10150: LD_INT 8
10152: PUSH
10153: LD_INT 11
10155: PUSH
10156: LD_INT 12
10158: PUSH
10159: LD_INT 15
10161: PUSH
10162: LD_INT 16
10164: PUSH
10165: LD_INT 20
10167: PUSH
10168: LD_INT 21
10170: PUSH
10171: LD_INT 22
10173: PUSH
10174: LD_INT 23
10176: PUSH
10177: LD_INT 25
10179: PUSH
10180: LD_INT 26
10182: PUSH
10183: LD_INT 30
10185: PUSH
10186: LD_INT 31
10188: PUSH
10189: LD_INT 32
10191: PUSH
10192: LD_INT 36
10194: PUSH
10195: EMPTY
10196: LIST
10197: LIST
10198: LIST
10199: LIST
10200: LIST
10201: LIST
10202: LIST
10203: LIST
10204: LIST
10205: LIST
10206: LIST
10207: LIST
10208: LIST
10209: LIST
10210: LIST
10211: LIST
10212: LIST
10213: LIST
10214: LIST
10215: PUSH
10216: LD_INT 101
10218: PUSH
10219: LD_INT 102
10221: PUSH
10222: LD_INT 105
10224: PUSH
10225: LD_INT 106
10227: PUSH
10228: LD_INT 108
10230: PUSH
10231: LD_INT 109
10233: PUSH
10234: LD_INT 112
10236: PUSH
10237: LD_INT 116
10239: PUSH
10240: LD_INT 117
10242: PUSH
10243: LD_INT 118
10245: PUSH
10246: EMPTY
10247: LIST
10248: LIST
10249: LIST
10250: LIST
10251: LIST
10252: LIST
10253: LIST
10254: LIST
10255: LIST
10256: LIST
10257: PUSH
10258: EMPTY
10259: LIST
10260: LIST
10261: ST_TO_ADDR
10262: GO 12785
10264: LD_INT 7
10266: DOUBLE
10267: EQUAL
10268: IFTRUE 10272
10270: GO 10384
10272: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
10273: LD_ADDR_VAR 0 2
10277: PUSH
10278: LD_INT 2
10280: PUSH
10281: LD_INT 4
10283: PUSH
10284: LD_INT 5
10286: PUSH
10287: LD_INT 7
10289: PUSH
10290: LD_INT 11
10292: PUSH
10293: LD_INT 12
10295: PUSH
10296: LD_INT 15
10298: PUSH
10299: LD_INT 16
10301: PUSH
10302: LD_INT 20
10304: PUSH
10305: LD_INT 21
10307: PUSH
10308: LD_INT 22
10310: PUSH
10311: LD_INT 23
10313: PUSH
10314: LD_INT 25
10316: PUSH
10317: LD_INT 26
10319: PUSH
10320: EMPTY
10321: LIST
10322: LIST
10323: LIST
10324: LIST
10325: LIST
10326: LIST
10327: LIST
10328: LIST
10329: LIST
10330: LIST
10331: LIST
10332: LIST
10333: LIST
10334: LIST
10335: PUSH
10336: LD_INT 101
10338: PUSH
10339: LD_INT 102
10341: PUSH
10342: LD_INT 103
10344: PUSH
10345: LD_INT 105
10347: PUSH
10348: LD_INT 106
10350: PUSH
10351: LD_INT 108
10353: PUSH
10354: LD_INT 112
10356: PUSH
10357: LD_INT 116
10359: PUSH
10360: LD_INT 117
10362: PUSH
10363: LD_INT 118
10365: PUSH
10366: EMPTY
10367: LIST
10368: LIST
10369: LIST
10370: LIST
10371: LIST
10372: LIST
10373: LIST
10374: LIST
10375: LIST
10376: LIST
10377: PUSH
10378: EMPTY
10379: LIST
10380: LIST
10381: ST_TO_ADDR
10382: GO 12785
10384: LD_INT 8
10386: DOUBLE
10387: EQUAL
10388: IFTRUE 10392
10390: GO 10532
10392: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
10393: LD_ADDR_VAR 0 2
10397: PUSH
10398: LD_INT 2
10400: PUSH
10401: LD_INT 4
10403: PUSH
10404: LD_INT 5
10406: PUSH
10407: LD_INT 6
10409: PUSH
10410: LD_INT 7
10412: PUSH
10413: LD_INT 8
10415: PUSH
10416: LD_INT 11
10418: PUSH
10419: LD_INT 12
10421: PUSH
10422: LD_INT 15
10424: PUSH
10425: LD_INT 16
10427: PUSH
10428: LD_INT 20
10430: PUSH
10431: LD_INT 21
10433: PUSH
10434: LD_INT 22
10436: PUSH
10437: LD_INT 23
10439: PUSH
10440: LD_INT 25
10442: PUSH
10443: LD_INT 26
10445: PUSH
10446: LD_INT 30
10448: PUSH
10449: LD_INT 31
10451: PUSH
10452: LD_INT 32
10454: PUSH
10455: LD_INT 36
10457: PUSH
10458: EMPTY
10459: LIST
10460: LIST
10461: LIST
10462: LIST
10463: LIST
10464: LIST
10465: LIST
10466: LIST
10467: LIST
10468: LIST
10469: LIST
10470: LIST
10471: LIST
10472: LIST
10473: LIST
10474: LIST
10475: LIST
10476: LIST
10477: LIST
10478: LIST
10479: PUSH
10480: LD_INT 101
10482: PUSH
10483: LD_INT 102
10485: PUSH
10486: LD_INT 103
10488: PUSH
10489: LD_INT 105
10491: PUSH
10492: LD_INT 106
10494: PUSH
10495: LD_INT 108
10497: PUSH
10498: LD_INT 109
10500: PUSH
10501: LD_INT 112
10503: PUSH
10504: LD_INT 116
10506: PUSH
10507: LD_INT 117
10509: PUSH
10510: LD_INT 118
10512: PUSH
10513: EMPTY
10514: LIST
10515: LIST
10516: LIST
10517: LIST
10518: LIST
10519: LIST
10520: LIST
10521: LIST
10522: LIST
10523: LIST
10524: LIST
10525: PUSH
10526: EMPTY
10527: LIST
10528: LIST
10529: ST_TO_ADDR
10530: GO 12785
10532: LD_INT 9
10534: DOUBLE
10535: EQUAL
10536: IFTRUE 10540
10538: GO 10688
10540: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
10541: LD_ADDR_VAR 0 2
10545: PUSH
10546: LD_INT 2
10548: PUSH
10549: LD_INT 4
10551: PUSH
10552: LD_INT 5
10554: PUSH
10555: LD_INT 6
10557: PUSH
10558: LD_INT 7
10560: PUSH
10561: LD_INT 8
10563: PUSH
10564: LD_INT 11
10566: PUSH
10567: LD_INT 12
10569: PUSH
10570: LD_INT 15
10572: PUSH
10573: LD_INT 16
10575: PUSH
10576: LD_INT 20
10578: PUSH
10579: LD_INT 21
10581: PUSH
10582: LD_INT 22
10584: PUSH
10585: LD_INT 23
10587: PUSH
10588: LD_INT 25
10590: PUSH
10591: LD_INT 26
10593: PUSH
10594: LD_INT 28
10596: PUSH
10597: LD_INT 30
10599: PUSH
10600: LD_INT 31
10602: PUSH
10603: LD_INT 32
10605: PUSH
10606: LD_INT 36
10608: PUSH
10609: EMPTY
10610: LIST
10611: LIST
10612: LIST
10613: LIST
10614: LIST
10615: LIST
10616: LIST
10617: LIST
10618: LIST
10619: LIST
10620: LIST
10621: LIST
10622: LIST
10623: LIST
10624: LIST
10625: LIST
10626: LIST
10627: LIST
10628: LIST
10629: LIST
10630: LIST
10631: PUSH
10632: LD_INT 101
10634: PUSH
10635: LD_INT 102
10637: PUSH
10638: LD_INT 103
10640: PUSH
10641: LD_INT 105
10643: PUSH
10644: LD_INT 106
10646: PUSH
10647: LD_INT 108
10649: PUSH
10650: LD_INT 109
10652: PUSH
10653: LD_INT 112
10655: PUSH
10656: LD_INT 114
10658: PUSH
10659: LD_INT 116
10661: PUSH
10662: LD_INT 117
10664: PUSH
10665: LD_INT 118
10667: PUSH
10668: EMPTY
10669: LIST
10670: LIST
10671: LIST
10672: LIST
10673: LIST
10674: LIST
10675: LIST
10676: LIST
10677: LIST
10678: LIST
10679: LIST
10680: LIST
10681: PUSH
10682: EMPTY
10683: LIST
10684: LIST
10685: ST_TO_ADDR
10686: GO 12785
10688: LD_INT 10
10690: DOUBLE
10691: EQUAL
10692: IFTRUE 10696
10694: GO 10892
10696: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
10697: LD_ADDR_VAR 0 2
10701: PUSH
10702: LD_INT 2
10704: PUSH
10705: LD_INT 4
10707: PUSH
10708: LD_INT 5
10710: PUSH
10711: LD_INT 6
10713: PUSH
10714: LD_INT 7
10716: PUSH
10717: LD_INT 8
10719: PUSH
10720: LD_INT 9
10722: PUSH
10723: LD_INT 10
10725: PUSH
10726: LD_INT 11
10728: PUSH
10729: LD_INT 12
10731: PUSH
10732: LD_INT 13
10734: PUSH
10735: LD_INT 14
10737: PUSH
10738: LD_INT 15
10740: PUSH
10741: LD_INT 16
10743: PUSH
10744: LD_INT 17
10746: PUSH
10747: LD_INT 18
10749: PUSH
10750: LD_INT 19
10752: PUSH
10753: LD_INT 20
10755: PUSH
10756: LD_INT 21
10758: PUSH
10759: LD_INT 22
10761: PUSH
10762: LD_INT 23
10764: PUSH
10765: LD_INT 24
10767: PUSH
10768: LD_INT 25
10770: PUSH
10771: LD_INT 26
10773: PUSH
10774: LD_INT 28
10776: PUSH
10777: LD_INT 30
10779: PUSH
10780: LD_INT 31
10782: PUSH
10783: LD_INT 32
10785: PUSH
10786: LD_INT 36
10788: PUSH
10789: EMPTY
10790: LIST
10791: LIST
10792: LIST
10793: LIST
10794: LIST
10795: LIST
10796: LIST
10797: LIST
10798: LIST
10799: LIST
10800: LIST
10801: LIST
10802: LIST
10803: LIST
10804: LIST
10805: LIST
10806: LIST
10807: LIST
10808: LIST
10809: LIST
10810: LIST
10811: LIST
10812: LIST
10813: LIST
10814: LIST
10815: LIST
10816: LIST
10817: LIST
10818: LIST
10819: PUSH
10820: LD_INT 101
10822: PUSH
10823: LD_INT 102
10825: PUSH
10826: LD_INT 103
10828: PUSH
10829: LD_INT 104
10831: PUSH
10832: LD_INT 105
10834: PUSH
10835: LD_INT 106
10837: PUSH
10838: LD_INT 107
10840: PUSH
10841: LD_INT 108
10843: PUSH
10844: LD_INT 109
10846: PUSH
10847: LD_INT 110
10849: PUSH
10850: LD_INT 111
10852: PUSH
10853: LD_INT 112
10855: PUSH
10856: LD_INT 114
10858: PUSH
10859: LD_INT 116
10861: PUSH
10862: LD_INT 117
10864: PUSH
10865: LD_INT 118
10867: PUSH
10868: EMPTY
10869: LIST
10870: LIST
10871: LIST
10872: LIST
10873: LIST
10874: LIST
10875: LIST
10876: LIST
10877: LIST
10878: LIST
10879: LIST
10880: LIST
10881: LIST
10882: LIST
10883: LIST
10884: LIST
10885: PUSH
10886: EMPTY
10887: LIST
10888: LIST
10889: ST_TO_ADDR
10890: GO 12785
10892: LD_INT 11
10894: DOUBLE
10895: EQUAL
10896: IFTRUE 10900
10898: GO 11104
10900: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
10901: LD_ADDR_VAR 0 2
10905: PUSH
10906: LD_INT 2
10908: PUSH
10909: LD_INT 3
10911: PUSH
10912: LD_INT 4
10914: PUSH
10915: LD_INT 5
10917: PUSH
10918: LD_INT 6
10920: PUSH
10921: LD_INT 7
10923: PUSH
10924: LD_INT 8
10926: PUSH
10927: LD_INT 9
10929: PUSH
10930: LD_INT 10
10932: PUSH
10933: LD_INT 11
10935: PUSH
10936: LD_INT 12
10938: PUSH
10939: LD_INT 13
10941: PUSH
10942: LD_INT 14
10944: PUSH
10945: LD_INT 15
10947: PUSH
10948: LD_INT 16
10950: PUSH
10951: LD_INT 17
10953: PUSH
10954: LD_INT 18
10956: PUSH
10957: LD_INT 19
10959: PUSH
10960: LD_INT 20
10962: PUSH
10963: LD_INT 21
10965: PUSH
10966: LD_INT 22
10968: PUSH
10969: LD_INT 23
10971: PUSH
10972: LD_INT 24
10974: PUSH
10975: LD_INT 25
10977: PUSH
10978: LD_INT 26
10980: PUSH
10981: LD_INT 28
10983: PUSH
10984: LD_INT 30
10986: PUSH
10987: LD_INT 31
10989: PUSH
10990: LD_INT 32
10992: PUSH
10993: LD_INT 34
10995: PUSH
10996: LD_INT 36
10998: PUSH
10999: EMPTY
11000: LIST
11001: LIST
11002: LIST
11003: LIST
11004: LIST
11005: LIST
11006: LIST
11007: LIST
11008: LIST
11009: LIST
11010: LIST
11011: LIST
11012: LIST
11013: LIST
11014: LIST
11015: LIST
11016: LIST
11017: LIST
11018: LIST
11019: LIST
11020: LIST
11021: LIST
11022: LIST
11023: LIST
11024: LIST
11025: LIST
11026: LIST
11027: LIST
11028: LIST
11029: LIST
11030: LIST
11031: PUSH
11032: LD_INT 101
11034: PUSH
11035: LD_INT 102
11037: PUSH
11038: LD_INT 103
11040: PUSH
11041: LD_INT 104
11043: PUSH
11044: LD_INT 105
11046: PUSH
11047: LD_INT 106
11049: PUSH
11050: LD_INT 107
11052: PUSH
11053: LD_INT 108
11055: PUSH
11056: LD_INT 109
11058: PUSH
11059: LD_INT 110
11061: PUSH
11062: LD_INT 111
11064: PUSH
11065: LD_INT 112
11067: PUSH
11068: LD_INT 114
11070: PUSH
11071: LD_INT 116
11073: PUSH
11074: LD_INT 117
11076: PUSH
11077: LD_INT 118
11079: PUSH
11080: EMPTY
11081: LIST
11082: LIST
11083: LIST
11084: LIST
11085: LIST
11086: LIST
11087: LIST
11088: LIST
11089: LIST
11090: LIST
11091: LIST
11092: LIST
11093: LIST
11094: LIST
11095: LIST
11096: LIST
11097: PUSH
11098: EMPTY
11099: LIST
11100: LIST
11101: ST_TO_ADDR
11102: GO 12785
11104: LD_INT 12
11106: DOUBLE
11107: EQUAL
11108: IFTRUE 11112
11110: GO 11332
11112: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
11113: LD_ADDR_VAR 0 2
11117: PUSH
11118: LD_INT 1
11120: PUSH
11121: LD_INT 2
11123: PUSH
11124: LD_INT 3
11126: PUSH
11127: LD_INT 4
11129: PUSH
11130: LD_INT 5
11132: PUSH
11133: LD_INT 6
11135: PUSH
11136: LD_INT 7
11138: PUSH
11139: LD_INT 8
11141: PUSH
11142: LD_INT 9
11144: PUSH
11145: LD_INT 10
11147: PUSH
11148: LD_INT 11
11150: PUSH
11151: LD_INT 12
11153: PUSH
11154: LD_INT 13
11156: PUSH
11157: LD_INT 14
11159: PUSH
11160: LD_INT 15
11162: PUSH
11163: LD_INT 16
11165: PUSH
11166: LD_INT 17
11168: PUSH
11169: LD_INT 18
11171: PUSH
11172: LD_INT 19
11174: PUSH
11175: LD_INT 20
11177: PUSH
11178: LD_INT 21
11180: PUSH
11181: LD_INT 22
11183: PUSH
11184: LD_INT 23
11186: PUSH
11187: LD_INT 24
11189: PUSH
11190: LD_INT 25
11192: PUSH
11193: LD_INT 26
11195: PUSH
11196: LD_INT 27
11198: PUSH
11199: LD_INT 28
11201: PUSH
11202: LD_INT 30
11204: PUSH
11205: LD_INT 31
11207: PUSH
11208: LD_INT 32
11210: PUSH
11211: LD_INT 33
11213: PUSH
11214: LD_INT 34
11216: PUSH
11217: LD_INT 36
11219: PUSH
11220: EMPTY
11221: LIST
11222: LIST
11223: LIST
11224: LIST
11225: LIST
11226: LIST
11227: LIST
11228: LIST
11229: LIST
11230: LIST
11231: LIST
11232: LIST
11233: LIST
11234: LIST
11235: LIST
11236: LIST
11237: LIST
11238: LIST
11239: LIST
11240: LIST
11241: LIST
11242: LIST
11243: LIST
11244: LIST
11245: LIST
11246: LIST
11247: LIST
11248: LIST
11249: LIST
11250: LIST
11251: LIST
11252: LIST
11253: LIST
11254: LIST
11255: PUSH
11256: LD_INT 101
11258: PUSH
11259: LD_INT 102
11261: PUSH
11262: LD_INT 103
11264: PUSH
11265: LD_INT 104
11267: PUSH
11268: LD_INT 105
11270: PUSH
11271: LD_INT 106
11273: PUSH
11274: LD_INT 107
11276: PUSH
11277: LD_INT 108
11279: PUSH
11280: LD_INT 109
11282: PUSH
11283: LD_INT 110
11285: PUSH
11286: LD_INT 111
11288: PUSH
11289: LD_INT 112
11291: PUSH
11292: LD_INT 113
11294: PUSH
11295: LD_INT 114
11297: PUSH
11298: LD_INT 116
11300: PUSH
11301: LD_INT 117
11303: PUSH
11304: LD_INT 118
11306: PUSH
11307: EMPTY
11308: LIST
11309: LIST
11310: LIST
11311: LIST
11312: LIST
11313: LIST
11314: LIST
11315: LIST
11316: LIST
11317: LIST
11318: LIST
11319: LIST
11320: LIST
11321: LIST
11322: LIST
11323: LIST
11324: LIST
11325: PUSH
11326: EMPTY
11327: LIST
11328: LIST
11329: ST_TO_ADDR
11330: GO 12785
11332: LD_INT 13
11334: DOUBLE
11335: EQUAL
11336: IFTRUE 11340
11338: GO 11548
11340: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
11341: LD_ADDR_VAR 0 2
11345: PUSH
11346: LD_INT 1
11348: PUSH
11349: LD_INT 2
11351: PUSH
11352: LD_INT 3
11354: PUSH
11355: LD_INT 4
11357: PUSH
11358: LD_INT 5
11360: PUSH
11361: LD_INT 8
11363: PUSH
11364: LD_INT 9
11366: PUSH
11367: LD_INT 10
11369: PUSH
11370: LD_INT 11
11372: PUSH
11373: LD_INT 12
11375: PUSH
11376: LD_INT 14
11378: PUSH
11379: LD_INT 15
11381: PUSH
11382: LD_INT 16
11384: PUSH
11385: LD_INT 17
11387: PUSH
11388: LD_INT 18
11390: PUSH
11391: LD_INT 19
11393: PUSH
11394: LD_INT 20
11396: PUSH
11397: LD_INT 21
11399: PUSH
11400: LD_INT 22
11402: PUSH
11403: LD_INT 23
11405: PUSH
11406: LD_INT 24
11408: PUSH
11409: LD_INT 25
11411: PUSH
11412: LD_INT 26
11414: PUSH
11415: LD_INT 27
11417: PUSH
11418: LD_INT 28
11420: PUSH
11421: LD_INT 30
11423: PUSH
11424: LD_INT 31
11426: PUSH
11427: LD_INT 32
11429: PUSH
11430: LD_INT 33
11432: PUSH
11433: LD_INT 34
11435: PUSH
11436: LD_INT 36
11438: PUSH
11439: EMPTY
11440: LIST
11441: LIST
11442: LIST
11443: LIST
11444: LIST
11445: LIST
11446: LIST
11447: LIST
11448: LIST
11449: LIST
11450: LIST
11451: LIST
11452: LIST
11453: LIST
11454: LIST
11455: LIST
11456: LIST
11457: LIST
11458: LIST
11459: LIST
11460: LIST
11461: LIST
11462: LIST
11463: LIST
11464: LIST
11465: LIST
11466: LIST
11467: LIST
11468: LIST
11469: LIST
11470: LIST
11471: PUSH
11472: LD_INT 101
11474: PUSH
11475: LD_INT 102
11477: PUSH
11478: LD_INT 103
11480: PUSH
11481: LD_INT 104
11483: PUSH
11484: LD_INT 105
11486: PUSH
11487: LD_INT 106
11489: PUSH
11490: LD_INT 107
11492: PUSH
11493: LD_INT 108
11495: PUSH
11496: LD_INT 109
11498: PUSH
11499: LD_INT 110
11501: PUSH
11502: LD_INT 111
11504: PUSH
11505: LD_INT 112
11507: PUSH
11508: LD_INT 113
11510: PUSH
11511: LD_INT 114
11513: PUSH
11514: LD_INT 116
11516: PUSH
11517: LD_INT 117
11519: PUSH
11520: LD_INT 118
11522: PUSH
11523: EMPTY
11524: LIST
11525: LIST
11526: LIST
11527: LIST
11528: LIST
11529: LIST
11530: LIST
11531: LIST
11532: LIST
11533: LIST
11534: LIST
11535: LIST
11536: LIST
11537: LIST
11538: LIST
11539: LIST
11540: LIST
11541: PUSH
11542: EMPTY
11543: LIST
11544: LIST
11545: ST_TO_ADDR
11546: GO 12785
11548: LD_INT 14
11550: DOUBLE
11551: EQUAL
11552: IFTRUE 11556
11554: GO 11780
11556: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
11557: LD_ADDR_VAR 0 2
11561: PUSH
11562: LD_INT 1
11564: PUSH
11565: LD_INT 2
11567: PUSH
11568: LD_INT 3
11570: PUSH
11571: LD_INT 4
11573: PUSH
11574: LD_INT 5
11576: PUSH
11577: LD_INT 6
11579: PUSH
11580: LD_INT 7
11582: PUSH
11583: LD_INT 8
11585: PUSH
11586: LD_INT 9
11588: PUSH
11589: LD_INT 10
11591: PUSH
11592: LD_INT 11
11594: PUSH
11595: LD_INT 12
11597: PUSH
11598: LD_INT 13
11600: PUSH
11601: LD_INT 14
11603: PUSH
11604: LD_INT 15
11606: PUSH
11607: LD_INT 16
11609: PUSH
11610: LD_INT 17
11612: PUSH
11613: LD_INT 18
11615: PUSH
11616: LD_INT 19
11618: PUSH
11619: LD_INT 20
11621: PUSH
11622: LD_INT 21
11624: PUSH
11625: LD_INT 22
11627: PUSH
11628: LD_INT 23
11630: PUSH
11631: LD_INT 24
11633: PUSH
11634: LD_INT 25
11636: PUSH
11637: LD_INT 26
11639: PUSH
11640: LD_INT 27
11642: PUSH
11643: LD_INT 28
11645: PUSH
11646: LD_INT 29
11648: PUSH
11649: LD_INT 30
11651: PUSH
11652: LD_INT 31
11654: PUSH
11655: LD_INT 32
11657: PUSH
11658: LD_INT 33
11660: PUSH
11661: LD_INT 34
11663: PUSH
11664: LD_INT 36
11666: PUSH
11667: EMPTY
11668: LIST
11669: LIST
11670: LIST
11671: LIST
11672: LIST
11673: LIST
11674: LIST
11675: LIST
11676: LIST
11677: LIST
11678: LIST
11679: LIST
11680: LIST
11681: LIST
11682: LIST
11683: LIST
11684: LIST
11685: LIST
11686: LIST
11687: LIST
11688: LIST
11689: LIST
11690: LIST
11691: LIST
11692: LIST
11693: LIST
11694: LIST
11695: LIST
11696: LIST
11697: LIST
11698: LIST
11699: LIST
11700: LIST
11701: LIST
11702: LIST
11703: PUSH
11704: LD_INT 101
11706: PUSH
11707: LD_INT 102
11709: PUSH
11710: LD_INT 103
11712: PUSH
11713: LD_INT 104
11715: PUSH
11716: LD_INT 105
11718: PUSH
11719: LD_INT 106
11721: PUSH
11722: LD_INT 107
11724: PUSH
11725: LD_INT 108
11727: PUSH
11728: LD_INT 109
11730: PUSH
11731: LD_INT 110
11733: PUSH
11734: LD_INT 111
11736: PUSH
11737: LD_INT 112
11739: PUSH
11740: LD_INT 113
11742: PUSH
11743: LD_INT 114
11745: PUSH
11746: LD_INT 116
11748: PUSH
11749: LD_INT 117
11751: PUSH
11752: LD_INT 118
11754: PUSH
11755: EMPTY
11756: LIST
11757: LIST
11758: LIST
11759: LIST
11760: LIST
11761: LIST
11762: LIST
11763: LIST
11764: LIST
11765: LIST
11766: LIST
11767: LIST
11768: LIST
11769: LIST
11770: LIST
11771: LIST
11772: LIST
11773: PUSH
11774: EMPTY
11775: LIST
11776: LIST
11777: ST_TO_ADDR
11778: GO 12785
11780: LD_INT 15
11782: DOUBLE
11783: EQUAL
11784: IFTRUE 11788
11786: GO 12012
11788: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
11789: LD_ADDR_VAR 0 2
11793: PUSH
11794: LD_INT 1
11796: PUSH
11797: LD_INT 2
11799: PUSH
11800: LD_INT 3
11802: PUSH
11803: LD_INT 4
11805: PUSH
11806: LD_INT 5
11808: PUSH
11809: LD_INT 6
11811: PUSH
11812: LD_INT 7
11814: PUSH
11815: LD_INT 8
11817: PUSH
11818: LD_INT 9
11820: PUSH
11821: LD_INT 10
11823: PUSH
11824: LD_INT 11
11826: PUSH
11827: LD_INT 12
11829: PUSH
11830: LD_INT 13
11832: PUSH
11833: LD_INT 14
11835: PUSH
11836: LD_INT 15
11838: PUSH
11839: LD_INT 16
11841: PUSH
11842: LD_INT 17
11844: PUSH
11845: LD_INT 18
11847: PUSH
11848: LD_INT 19
11850: PUSH
11851: LD_INT 20
11853: PUSH
11854: LD_INT 21
11856: PUSH
11857: LD_INT 22
11859: PUSH
11860: LD_INT 23
11862: PUSH
11863: LD_INT 24
11865: PUSH
11866: LD_INT 25
11868: PUSH
11869: LD_INT 26
11871: PUSH
11872: LD_INT 27
11874: PUSH
11875: LD_INT 28
11877: PUSH
11878: LD_INT 29
11880: PUSH
11881: LD_INT 30
11883: PUSH
11884: LD_INT 31
11886: PUSH
11887: LD_INT 32
11889: PUSH
11890: LD_INT 33
11892: PUSH
11893: LD_INT 34
11895: PUSH
11896: LD_INT 36
11898: PUSH
11899: EMPTY
11900: LIST
11901: LIST
11902: LIST
11903: LIST
11904: LIST
11905: LIST
11906: LIST
11907: LIST
11908: LIST
11909: LIST
11910: LIST
11911: LIST
11912: LIST
11913: LIST
11914: LIST
11915: LIST
11916: LIST
11917: LIST
11918: LIST
11919: LIST
11920: LIST
11921: LIST
11922: LIST
11923: LIST
11924: LIST
11925: LIST
11926: LIST
11927: LIST
11928: LIST
11929: LIST
11930: LIST
11931: LIST
11932: LIST
11933: LIST
11934: LIST
11935: PUSH
11936: LD_INT 101
11938: PUSH
11939: LD_INT 102
11941: PUSH
11942: LD_INT 103
11944: PUSH
11945: LD_INT 104
11947: PUSH
11948: LD_INT 105
11950: PUSH
11951: LD_INT 106
11953: PUSH
11954: LD_INT 107
11956: PUSH
11957: LD_INT 108
11959: PUSH
11960: LD_INT 109
11962: PUSH
11963: LD_INT 110
11965: PUSH
11966: LD_INT 111
11968: PUSH
11969: LD_INT 112
11971: PUSH
11972: LD_INT 113
11974: PUSH
11975: LD_INT 114
11977: PUSH
11978: LD_INT 116
11980: PUSH
11981: LD_INT 117
11983: PUSH
11984: LD_INT 118
11986: PUSH
11987: EMPTY
11988: LIST
11989: LIST
11990: LIST
11991: LIST
11992: LIST
11993: LIST
11994: LIST
11995: LIST
11996: LIST
11997: LIST
11998: LIST
11999: LIST
12000: LIST
12001: LIST
12002: LIST
12003: LIST
12004: LIST
12005: PUSH
12006: EMPTY
12007: LIST
12008: LIST
12009: ST_TO_ADDR
12010: GO 12785
12012: LD_INT 16
12014: DOUBLE
12015: EQUAL
12016: IFTRUE 12020
12018: GO 12156
12020: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
12021: LD_ADDR_VAR 0 2
12025: PUSH
12026: LD_INT 2
12028: PUSH
12029: LD_INT 4
12031: PUSH
12032: LD_INT 5
12034: PUSH
12035: LD_INT 7
12037: PUSH
12038: LD_INT 11
12040: PUSH
12041: LD_INT 12
12043: PUSH
12044: LD_INT 15
12046: PUSH
12047: LD_INT 16
12049: PUSH
12050: LD_INT 20
12052: PUSH
12053: LD_INT 21
12055: PUSH
12056: LD_INT 22
12058: PUSH
12059: LD_INT 23
12061: PUSH
12062: LD_INT 25
12064: PUSH
12065: LD_INT 26
12067: PUSH
12068: LD_INT 30
12070: PUSH
12071: LD_INT 31
12073: PUSH
12074: LD_INT 32
12076: PUSH
12077: LD_INT 33
12079: PUSH
12080: LD_INT 34
12082: PUSH
12083: EMPTY
12084: LIST
12085: LIST
12086: LIST
12087: LIST
12088: LIST
12089: LIST
12090: LIST
12091: LIST
12092: LIST
12093: LIST
12094: LIST
12095: LIST
12096: LIST
12097: LIST
12098: LIST
12099: LIST
12100: LIST
12101: LIST
12102: LIST
12103: PUSH
12104: LD_INT 101
12106: PUSH
12107: LD_INT 102
12109: PUSH
12110: LD_INT 103
12112: PUSH
12113: LD_INT 106
12115: PUSH
12116: LD_INT 108
12118: PUSH
12119: LD_INT 112
12121: PUSH
12122: LD_INT 113
12124: PUSH
12125: LD_INT 114
12127: PUSH
12128: LD_INT 116
12130: PUSH
12131: LD_INT 117
12133: PUSH
12134: LD_INT 118
12136: PUSH
12137: EMPTY
12138: LIST
12139: LIST
12140: LIST
12141: LIST
12142: LIST
12143: LIST
12144: LIST
12145: LIST
12146: LIST
12147: LIST
12148: LIST
12149: PUSH
12150: EMPTY
12151: LIST
12152: LIST
12153: ST_TO_ADDR
12154: GO 12785
12156: LD_INT 17
12158: DOUBLE
12159: EQUAL
12160: IFTRUE 12164
12162: GO 12388
12164: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
12165: LD_ADDR_VAR 0 2
12169: PUSH
12170: LD_INT 1
12172: PUSH
12173: LD_INT 2
12175: PUSH
12176: LD_INT 3
12178: PUSH
12179: LD_INT 4
12181: PUSH
12182: LD_INT 5
12184: PUSH
12185: LD_INT 6
12187: PUSH
12188: LD_INT 7
12190: PUSH
12191: LD_INT 8
12193: PUSH
12194: LD_INT 9
12196: PUSH
12197: LD_INT 10
12199: PUSH
12200: LD_INT 11
12202: PUSH
12203: LD_INT 12
12205: PUSH
12206: LD_INT 13
12208: PUSH
12209: LD_INT 14
12211: PUSH
12212: LD_INT 15
12214: PUSH
12215: LD_INT 16
12217: PUSH
12218: LD_INT 17
12220: PUSH
12221: LD_INT 18
12223: PUSH
12224: LD_INT 19
12226: PUSH
12227: LD_INT 20
12229: PUSH
12230: LD_INT 21
12232: PUSH
12233: LD_INT 22
12235: PUSH
12236: LD_INT 23
12238: PUSH
12239: LD_INT 24
12241: PUSH
12242: LD_INT 25
12244: PUSH
12245: LD_INT 26
12247: PUSH
12248: LD_INT 27
12250: PUSH
12251: LD_INT 28
12253: PUSH
12254: LD_INT 29
12256: PUSH
12257: LD_INT 30
12259: PUSH
12260: LD_INT 31
12262: PUSH
12263: LD_INT 32
12265: PUSH
12266: LD_INT 33
12268: PUSH
12269: LD_INT 34
12271: PUSH
12272: LD_INT 36
12274: PUSH
12275: EMPTY
12276: LIST
12277: LIST
12278: LIST
12279: LIST
12280: LIST
12281: LIST
12282: LIST
12283: LIST
12284: LIST
12285: LIST
12286: LIST
12287: LIST
12288: LIST
12289: LIST
12290: LIST
12291: LIST
12292: LIST
12293: LIST
12294: LIST
12295: LIST
12296: LIST
12297: LIST
12298: LIST
12299: LIST
12300: LIST
12301: LIST
12302: LIST
12303: LIST
12304: LIST
12305: LIST
12306: LIST
12307: LIST
12308: LIST
12309: LIST
12310: LIST
12311: PUSH
12312: LD_INT 101
12314: PUSH
12315: LD_INT 102
12317: PUSH
12318: LD_INT 103
12320: PUSH
12321: LD_INT 104
12323: PUSH
12324: LD_INT 105
12326: PUSH
12327: LD_INT 106
12329: PUSH
12330: LD_INT 107
12332: PUSH
12333: LD_INT 108
12335: PUSH
12336: LD_INT 109
12338: PUSH
12339: LD_INT 110
12341: PUSH
12342: LD_INT 111
12344: PUSH
12345: LD_INT 112
12347: PUSH
12348: LD_INT 113
12350: PUSH
12351: LD_INT 114
12353: PUSH
12354: LD_INT 116
12356: PUSH
12357: LD_INT 117
12359: PUSH
12360: LD_INT 118
12362: PUSH
12363: EMPTY
12364: LIST
12365: LIST
12366: LIST
12367: LIST
12368: LIST
12369: LIST
12370: LIST
12371: LIST
12372: LIST
12373: LIST
12374: LIST
12375: LIST
12376: LIST
12377: LIST
12378: LIST
12379: LIST
12380: LIST
12381: PUSH
12382: EMPTY
12383: LIST
12384: LIST
12385: ST_TO_ADDR
12386: GO 12785
12388: LD_INT 18
12390: DOUBLE
12391: EQUAL
12392: IFTRUE 12396
12394: GO 12544
12396: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
12397: LD_ADDR_VAR 0 2
12401: PUSH
12402: LD_INT 2
12404: PUSH
12405: LD_INT 4
12407: PUSH
12408: LD_INT 5
12410: PUSH
12411: LD_INT 7
12413: PUSH
12414: LD_INT 11
12416: PUSH
12417: LD_INT 12
12419: PUSH
12420: LD_INT 15
12422: PUSH
12423: LD_INT 16
12425: PUSH
12426: LD_INT 20
12428: PUSH
12429: LD_INT 21
12431: PUSH
12432: LD_INT 22
12434: PUSH
12435: LD_INT 23
12437: PUSH
12438: LD_INT 25
12440: PUSH
12441: LD_INT 26
12443: PUSH
12444: LD_INT 30
12446: PUSH
12447: LD_INT 31
12449: PUSH
12450: LD_INT 32
12452: PUSH
12453: LD_INT 33
12455: PUSH
12456: LD_INT 34
12458: PUSH
12459: LD_INT 35
12461: PUSH
12462: LD_INT 36
12464: PUSH
12465: EMPTY
12466: LIST
12467: LIST
12468: LIST
12469: LIST
12470: LIST
12471: LIST
12472: LIST
12473: LIST
12474: LIST
12475: LIST
12476: LIST
12477: LIST
12478: LIST
12479: LIST
12480: LIST
12481: LIST
12482: LIST
12483: LIST
12484: LIST
12485: LIST
12486: LIST
12487: PUSH
12488: LD_INT 101
12490: PUSH
12491: LD_INT 102
12493: PUSH
12494: LD_INT 103
12496: PUSH
12497: LD_INT 106
12499: PUSH
12500: LD_INT 108
12502: PUSH
12503: LD_INT 112
12505: PUSH
12506: LD_INT 113
12508: PUSH
12509: LD_INT 114
12511: PUSH
12512: LD_INT 115
12514: PUSH
12515: LD_INT 116
12517: PUSH
12518: LD_INT 117
12520: PUSH
12521: LD_INT 118
12523: PUSH
12524: EMPTY
12525: LIST
12526: LIST
12527: LIST
12528: LIST
12529: LIST
12530: LIST
12531: LIST
12532: LIST
12533: LIST
12534: LIST
12535: LIST
12536: LIST
12537: PUSH
12538: EMPTY
12539: LIST
12540: LIST
12541: ST_TO_ADDR
12542: GO 12785
12544: LD_INT 19
12546: DOUBLE
12547: EQUAL
12548: IFTRUE 12552
12550: GO 12784
12552: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
12553: LD_ADDR_VAR 0 2
12557: PUSH
12558: LD_INT 1
12560: PUSH
12561: LD_INT 2
12563: PUSH
12564: LD_INT 3
12566: PUSH
12567: LD_INT 4
12569: PUSH
12570: LD_INT 5
12572: PUSH
12573: LD_INT 6
12575: PUSH
12576: LD_INT 7
12578: PUSH
12579: LD_INT 8
12581: PUSH
12582: LD_INT 9
12584: PUSH
12585: LD_INT 10
12587: PUSH
12588: LD_INT 11
12590: PUSH
12591: LD_INT 12
12593: PUSH
12594: LD_INT 13
12596: PUSH
12597: LD_INT 14
12599: PUSH
12600: LD_INT 15
12602: PUSH
12603: LD_INT 16
12605: PUSH
12606: LD_INT 17
12608: PUSH
12609: LD_INT 18
12611: PUSH
12612: LD_INT 19
12614: PUSH
12615: LD_INT 20
12617: PUSH
12618: LD_INT 21
12620: PUSH
12621: LD_INT 22
12623: PUSH
12624: LD_INT 23
12626: PUSH
12627: LD_INT 24
12629: PUSH
12630: LD_INT 25
12632: PUSH
12633: LD_INT 26
12635: PUSH
12636: LD_INT 27
12638: PUSH
12639: LD_INT 28
12641: PUSH
12642: LD_INT 29
12644: PUSH
12645: LD_INT 30
12647: PUSH
12648: LD_INT 31
12650: PUSH
12651: LD_INT 32
12653: PUSH
12654: LD_INT 33
12656: PUSH
12657: LD_INT 34
12659: PUSH
12660: LD_INT 35
12662: PUSH
12663: LD_INT 36
12665: PUSH
12666: EMPTY
12667: LIST
12668: LIST
12669: LIST
12670: LIST
12671: LIST
12672: LIST
12673: LIST
12674: LIST
12675: LIST
12676: LIST
12677: LIST
12678: LIST
12679: LIST
12680: LIST
12681: LIST
12682: LIST
12683: LIST
12684: LIST
12685: LIST
12686: LIST
12687: LIST
12688: LIST
12689: LIST
12690: LIST
12691: LIST
12692: LIST
12693: LIST
12694: LIST
12695: LIST
12696: LIST
12697: LIST
12698: LIST
12699: LIST
12700: LIST
12701: LIST
12702: LIST
12703: PUSH
12704: LD_INT 101
12706: PUSH
12707: LD_INT 102
12709: PUSH
12710: LD_INT 103
12712: PUSH
12713: LD_INT 104
12715: PUSH
12716: LD_INT 105
12718: PUSH
12719: LD_INT 106
12721: PUSH
12722: LD_INT 107
12724: PUSH
12725: LD_INT 108
12727: PUSH
12728: LD_INT 109
12730: PUSH
12731: LD_INT 110
12733: PUSH
12734: LD_INT 111
12736: PUSH
12737: LD_INT 112
12739: PUSH
12740: LD_INT 113
12742: PUSH
12743: LD_INT 114
12745: PUSH
12746: LD_INT 115
12748: PUSH
12749: LD_INT 116
12751: PUSH
12752: LD_INT 117
12754: PUSH
12755: LD_INT 118
12757: PUSH
12758: EMPTY
12759: LIST
12760: LIST
12761: LIST
12762: LIST
12763: LIST
12764: LIST
12765: LIST
12766: LIST
12767: LIST
12768: LIST
12769: LIST
12770: LIST
12771: LIST
12772: LIST
12773: LIST
12774: LIST
12775: LIST
12776: LIST
12777: PUSH
12778: EMPTY
12779: LIST
12780: LIST
12781: ST_TO_ADDR
12782: GO 12785
12784: POP
// end else
12785: GO 13016
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
12787: LD_ADDR_VAR 0 2
12791: PUSH
12792: LD_INT 1
12794: PUSH
12795: LD_INT 2
12797: PUSH
12798: LD_INT 3
12800: PUSH
12801: LD_INT 4
12803: PUSH
12804: LD_INT 5
12806: PUSH
12807: LD_INT 6
12809: PUSH
12810: LD_INT 7
12812: PUSH
12813: LD_INT 8
12815: PUSH
12816: LD_INT 9
12818: PUSH
12819: LD_INT 10
12821: PUSH
12822: LD_INT 11
12824: PUSH
12825: LD_INT 12
12827: PUSH
12828: LD_INT 13
12830: PUSH
12831: LD_INT 14
12833: PUSH
12834: LD_INT 15
12836: PUSH
12837: LD_INT 16
12839: PUSH
12840: LD_INT 17
12842: PUSH
12843: LD_INT 18
12845: PUSH
12846: LD_INT 19
12848: PUSH
12849: LD_INT 20
12851: PUSH
12852: LD_INT 21
12854: PUSH
12855: LD_INT 22
12857: PUSH
12858: LD_INT 23
12860: PUSH
12861: LD_INT 24
12863: PUSH
12864: LD_INT 25
12866: PUSH
12867: LD_INT 26
12869: PUSH
12870: LD_INT 27
12872: PUSH
12873: LD_INT 28
12875: PUSH
12876: LD_INT 29
12878: PUSH
12879: LD_INT 30
12881: PUSH
12882: LD_INT 31
12884: PUSH
12885: LD_INT 32
12887: PUSH
12888: LD_INT 33
12890: PUSH
12891: LD_INT 34
12893: PUSH
12894: LD_INT 35
12896: PUSH
12897: LD_INT 36
12899: PUSH
12900: EMPTY
12901: LIST
12902: LIST
12903: LIST
12904: LIST
12905: LIST
12906: LIST
12907: LIST
12908: LIST
12909: LIST
12910: LIST
12911: LIST
12912: LIST
12913: LIST
12914: LIST
12915: LIST
12916: LIST
12917: LIST
12918: LIST
12919: LIST
12920: LIST
12921: LIST
12922: LIST
12923: LIST
12924: LIST
12925: LIST
12926: LIST
12927: LIST
12928: LIST
12929: LIST
12930: LIST
12931: LIST
12932: LIST
12933: LIST
12934: LIST
12935: LIST
12936: LIST
12937: PUSH
12938: LD_INT 101
12940: PUSH
12941: LD_INT 102
12943: PUSH
12944: LD_INT 103
12946: PUSH
12947: LD_INT 104
12949: PUSH
12950: LD_INT 105
12952: PUSH
12953: LD_INT 106
12955: PUSH
12956: LD_INT 107
12958: PUSH
12959: LD_INT 108
12961: PUSH
12962: LD_INT 109
12964: PUSH
12965: LD_INT 110
12967: PUSH
12968: LD_INT 111
12970: PUSH
12971: LD_INT 112
12973: PUSH
12974: LD_INT 113
12976: PUSH
12977: LD_INT 114
12979: PUSH
12980: LD_INT 115
12982: PUSH
12983: LD_INT 116
12985: PUSH
12986: LD_INT 117
12988: PUSH
12989: LD_INT 118
12991: PUSH
12992: EMPTY
12993: LIST
12994: LIST
12995: LIST
12996: LIST
12997: LIST
12998: LIST
12999: LIST
13000: LIST
13001: LIST
13002: LIST
13003: LIST
13004: LIST
13005: LIST
13006: LIST
13007: LIST
13008: LIST
13009: LIST
13010: LIST
13011: PUSH
13012: EMPTY
13013: LIST
13014: LIST
13015: ST_TO_ADDR
// if result then
13016: LD_VAR 0 2
13020: IFFALSE 13806
// begin normal :=  ;
13022: LD_ADDR_VAR 0 5
13026: PUSH
13027: LD_STRING 
13029: ST_TO_ADDR
// hardcore :=  ;
13030: LD_ADDR_VAR 0 6
13034: PUSH
13035: LD_STRING 
13037: ST_TO_ADDR
// active :=  ;
13038: LD_ADDR_VAR 0 7
13042: PUSH
13043: LD_STRING 
13045: ST_TO_ADDR
// for i = 1 to normalCounter do
13046: LD_ADDR_VAR 0 8
13050: PUSH
13051: DOUBLE
13052: LD_INT 1
13054: DEC
13055: ST_TO_ADDR
13056: LD_EXP 30
13060: PUSH
13061: FOR_TO
13062: IFFALSE 13163
// begin tmp := 0 ;
13064: LD_ADDR_VAR 0 3
13068: PUSH
13069: LD_STRING 0
13071: ST_TO_ADDR
// if result [ 1 ] then
13072: LD_VAR 0 2
13076: PUSH
13077: LD_INT 1
13079: ARRAY
13080: IFFALSE 13145
// if result [ 1 ] [ 1 ] = i then
13082: LD_VAR 0 2
13086: PUSH
13087: LD_INT 1
13089: ARRAY
13090: PUSH
13091: LD_INT 1
13093: ARRAY
13094: PUSH
13095: LD_VAR 0 8
13099: EQUAL
13100: IFFALSE 13145
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
13102: LD_ADDR_VAR 0 2
13106: PUSH
13107: LD_VAR 0 2
13111: PPUSH
13112: LD_INT 1
13114: PPUSH
13115: LD_VAR 0 2
13119: PUSH
13120: LD_INT 1
13122: ARRAY
13123: PPUSH
13124: LD_INT 1
13126: PPUSH
13127: CALL_OW 3
13131: PPUSH
13132: CALL_OW 1
13136: ST_TO_ADDR
// tmp := 1 ;
13137: LD_ADDR_VAR 0 3
13141: PUSH
13142: LD_STRING 1
13144: ST_TO_ADDR
// end ; normal := normal & tmp ;
13145: LD_ADDR_VAR 0 5
13149: PUSH
13150: LD_VAR 0 5
13154: PUSH
13155: LD_VAR 0 3
13159: STR
13160: ST_TO_ADDR
// end ;
13161: GO 13061
13163: POP
13164: POP
// for i = 1 to hardcoreCounter do
13165: LD_ADDR_VAR 0 8
13169: PUSH
13170: DOUBLE
13171: LD_INT 1
13173: DEC
13174: ST_TO_ADDR
13175: LD_EXP 31
13179: PUSH
13180: FOR_TO
13181: IFFALSE 13286
// begin tmp := 0 ;
13183: LD_ADDR_VAR 0 3
13187: PUSH
13188: LD_STRING 0
13190: ST_TO_ADDR
// if result [ 2 ] then
13191: LD_VAR 0 2
13195: PUSH
13196: LD_INT 2
13198: ARRAY
13199: IFFALSE 13268
// if result [ 2 ] [ 1 ] = 100 + i then
13201: LD_VAR 0 2
13205: PUSH
13206: LD_INT 2
13208: ARRAY
13209: PUSH
13210: LD_INT 1
13212: ARRAY
13213: PUSH
13214: LD_INT 100
13216: PUSH
13217: LD_VAR 0 8
13221: PLUS
13222: EQUAL
13223: IFFALSE 13268
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
13225: LD_ADDR_VAR 0 2
13229: PUSH
13230: LD_VAR 0 2
13234: PPUSH
13235: LD_INT 2
13237: PPUSH
13238: LD_VAR 0 2
13242: PUSH
13243: LD_INT 2
13245: ARRAY
13246: PPUSH
13247: LD_INT 1
13249: PPUSH
13250: CALL_OW 3
13254: PPUSH
13255: CALL_OW 1
13259: ST_TO_ADDR
// tmp := 1 ;
13260: LD_ADDR_VAR 0 3
13264: PUSH
13265: LD_STRING 1
13267: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
13268: LD_ADDR_VAR 0 6
13272: PUSH
13273: LD_VAR 0 6
13277: PUSH
13278: LD_VAR 0 3
13282: STR
13283: ST_TO_ADDR
// end ;
13284: GO 13180
13286: POP
13287: POP
// if isGameLoad then
13288: LD_VAR 0 1
13292: IFFALSE 13767
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
13294: LD_ADDR_VAR 0 4
13298: PUSH
13299: LD_EXP 34
13303: PUSH
13304: LD_EXP 33
13308: PUSH
13309: LD_EXP 35
13313: PUSH
13314: LD_EXP 32
13318: PUSH
13319: LD_EXP 36
13323: PUSH
13324: LD_EXP 37
13328: PUSH
13329: LD_EXP 38
13333: PUSH
13334: LD_EXP 39
13338: PUSH
13339: LD_EXP 40
13343: PUSH
13344: LD_EXP 41
13348: PUSH
13349: LD_EXP 42
13353: PUSH
13354: LD_EXP 43
13358: PUSH
13359: LD_EXP 44
13363: PUSH
13364: LD_EXP 45
13368: PUSH
13369: LD_EXP 53
13373: PUSH
13374: LD_EXP 54
13378: PUSH
13379: LD_EXP 55
13383: PUSH
13384: LD_EXP 56
13388: PUSH
13389: LD_EXP 58
13393: PUSH
13394: LD_EXP 59
13398: PUSH
13399: LD_EXP 60
13403: PUSH
13404: LD_EXP 63
13408: PUSH
13409: LD_EXP 65
13413: PUSH
13414: LD_EXP 66
13418: PUSH
13419: LD_EXP 67
13423: PUSH
13424: LD_EXP 69
13428: PUSH
13429: LD_EXP 70
13433: PUSH
13434: LD_EXP 73
13438: PUSH
13439: LD_EXP 74
13443: PUSH
13444: LD_EXP 75
13448: PUSH
13449: LD_EXP 76
13453: PUSH
13454: LD_EXP 77
13458: PUSH
13459: LD_EXP 78
13463: PUSH
13464: LD_EXP 79
13468: PUSH
13469: LD_EXP 80
13473: PUSH
13474: LD_EXP 81
13478: PUSH
13479: LD_EXP 46
13483: PUSH
13484: LD_EXP 47
13488: PUSH
13489: LD_EXP 50
13493: PUSH
13494: LD_EXP 51
13498: PUSH
13499: LD_EXP 52
13503: PUSH
13504: LD_EXP 48
13508: PUSH
13509: LD_EXP 49
13513: PUSH
13514: LD_EXP 57
13518: PUSH
13519: LD_EXP 61
13523: PUSH
13524: LD_EXP 62
13528: PUSH
13529: LD_EXP 64
13533: PUSH
13534: LD_EXP 68
13538: PUSH
13539: LD_EXP 71
13543: PUSH
13544: LD_EXP 72
13548: PUSH
13549: LD_EXP 82
13553: PUSH
13554: LD_EXP 83
13558: PUSH
13559: LD_EXP 84
13563: PUSH
13564: LD_EXP 85
13568: PUSH
13569: EMPTY
13570: LIST
13571: LIST
13572: LIST
13573: LIST
13574: LIST
13575: LIST
13576: LIST
13577: LIST
13578: LIST
13579: LIST
13580: LIST
13581: LIST
13582: LIST
13583: LIST
13584: LIST
13585: LIST
13586: LIST
13587: LIST
13588: LIST
13589: LIST
13590: LIST
13591: LIST
13592: LIST
13593: LIST
13594: LIST
13595: LIST
13596: LIST
13597: LIST
13598: LIST
13599: LIST
13600: LIST
13601: LIST
13602: LIST
13603: LIST
13604: LIST
13605: LIST
13606: LIST
13607: LIST
13608: LIST
13609: LIST
13610: LIST
13611: LIST
13612: LIST
13613: LIST
13614: LIST
13615: LIST
13616: LIST
13617: LIST
13618: LIST
13619: LIST
13620: LIST
13621: LIST
13622: LIST
13623: LIST
13624: ST_TO_ADDR
// tmp :=  ;
13625: LD_ADDR_VAR 0 3
13629: PUSH
13630: LD_STRING 
13632: ST_TO_ADDR
// for i = 1 to normalCounter do
13633: LD_ADDR_VAR 0 8
13637: PUSH
13638: DOUBLE
13639: LD_INT 1
13641: DEC
13642: ST_TO_ADDR
13643: LD_EXP 30
13647: PUSH
13648: FOR_TO
13649: IFFALSE 13685
// begin if flags [ i ] then
13651: LD_VAR 0 4
13655: PUSH
13656: LD_VAR 0 8
13660: ARRAY
13661: IFFALSE 13683
// tmp := tmp & i & ; ;
13663: LD_ADDR_VAR 0 3
13667: PUSH
13668: LD_VAR 0 3
13672: PUSH
13673: LD_VAR 0 8
13677: STR
13678: PUSH
13679: LD_STRING ;
13681: STR
13682: ST_TO_ADDR
// end ;
13683: GO 13648
13685: POP
13686: POP
// for i = 1 to hardcoreCounter do
13687: LD_ADDR_VAR 0 8
13691: PUSH
13692: DOUBLE
13693: LD_INT 1
13695: DEC
13696: ST_TO_ADDR
13697: LD_EXP 31
13701: PUSH
13702: FOR_TO
13703: IFFALSE 13749
// begin if flags [ normalCounter + i ] then
13705: LD_VAR 0 4
13709: PUSH
13710: LD_EXP 30
13714: PUSH
13715: LD_VAR 0 8
13719: PLUS
13720: ARRAY
13721: IFFALSE 13747
// tmp := tmp & ( 100 + i ) & ; ;
13723: LD_ADDR_VAR 0 3
13727: PUSH
13728: LD_VAR 0 3
13732: PUSH
13733: LD_INT 100
13735: PUSH
13736: LD_VAR 0 8
13740: PLUS
13741: STR
13742: PUSH
13743: LD_STRING ;
13745: STR
13746: ST_TO_ADDR
// end ;
13747: GO 13702
13749: POP
13750: POP
// if tmp then
13751: LD_VAR 0 3
13755: IFFALSE 13767
// active := tmp ;
13757: LD_ADDR_VAR 0 7
13761: PUSH
13762: LD_VAR 0 3
13766: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
13767: LD_STRING getStreamItemsFromMission("
13769: PUSH
13770: LD_VAR 0 5
13774: STR
13775: PUSH
13776: LD_STRING ","
13778: STR
13779: PUSH
13780: LD_VAR 0 6
13784: STR
13785: PUSH
13786: LD_STRING ","
13788: STR
13789: PUSH
13790: LD_VAR 0 7
13794: STR
13795: PUSH
13796: LD_STRING ")
13798: STR
13799: PPUSH
13800: CALL_OW 559
// end else
13804: GO 13813
// ToLua ( getStreamItemsFromMission("","","") ) ;
13806: LD_STRING getStreamItemsFromMission("","","")
13808: PPUSH
13809: CALL_OW 559
// end ;
13813: LD_VAR 0 2
13817: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
13818: LD_EXP 29
13822: PUSH
13823: LD_EXP 34
13827: AND
13828: IFFALSE 13952
13830: GO 13832
13832: DISABLE
13833: LD_INT 0
13835: PPUSH
13836: PPUSH
// begin enable ;
13837: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
13838: LD_ADDR_VAR 0 2
13842: PUSH
13843: LD_INT 22
13845: PUSH
13846: LD_OWVAR 2
13850: PUSH
13851: EMPTY
13852: LIST
13853: LIST
13854: PUSH
13855: LD_INT 2
13857: PUSH
13858: LD_INT 34
13860: PUSH
13861: LD_INT 7
13863: PUSH
13864: EMPTY
13865: LIST
13866: LIST
13867: PUSH
13868: LD_INT 34
13870: PUSH
13871: LD_INT 45
13873: PUSH
13874: EMPTY
13875: LIST
13876: LIST
13877: PUSH
13878: LD_INT 34
13880: PUSH
13881: LD_INT 28
13883: PUSH
13884: EMPTY
13885: LIST
13886: LIST
13887: PUSH
13888: LD_INT 34
13890: PUSH
13891: LD_INT 47
13893: PUSH
13894: EMPTY
13895: LIST
13896: LIST
13897: PUSH
13898: EMPTY
13899: LIST
13900: LIST
13901: LIST
13902: LIST
13903: LIST
13904: PUSH
13905: EMPTY
13906: LIST
13907: LIST
13908: PPUSH
13909: CALL_OW 69
13913: ST_TO_ADDR
// if not tmp then
13914: LD_VAR 0 2
13918: NOT
13919: IFFALSE 13923
// exit ;
13921: GO 13952
// for i in tmp do
13923: LD_ADDR_VAR 0 1
13927: PUSH
13928: LD_VAR 0 2
13932: PUSH
13933: FOR_IN
13934: IFFALSE 13950
// begin SetLives ( i , 0 ) ;
13936: LD_VAR 0 1
13940: PPUSH
13941: LD_INT 0
13943: PPUSH
13944: CALL_OW 234
// end ;
13948: GO 13933
13950: POP
13951: POP
// end ;
13952: PPOPN 2
13954: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
13955: LD_EXP 29
13959: PUSH
13960: LD_EXP 35
13964: AND
13965: IFFALSE 14049
13967: GO 13969
13969: DISABLE
13970: LD_INT 0
13972: PPUSH
13973: PPUSH
// begin enable ;
13974: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
13975: LD_ADDR_VAR 0 2
13979: PUSH
13980: LD_INT 22
13982: PUSH
13983: LD_OWVAR 2
13987: PUSH
13988: EMPTY
13989: LIST
13990: LIST
13991: PUSH
13992: LD_INT 32
13994: PUSH
13995: LD_INT 3
13997: PUSH
13998: EMPTY
13999: LIST
14000: LIST
14001: PUSH
14002: EMPTY
14003: LIST
14004: LIST
14005: PPUSH
14006: CALL_OW 69
14010: ST_TO_ADDR
// if not tmp then
14011: LD_VAR 0 2
14015: NOT
14016: IFFALSE 14020
// exit ;
14018: GO 14049
// for i in tmp do
14020: LD_ADDR_VAR 0 1
14024: PUSH
14025: LD_VAR 0 2
14029: PUSH
14030: FOR_IN
14031: IFFALSE 14047
// begin SetLives ( i , 0 ) ;
14033: LD_VAR 0 1
14037: PPUSH
14038: LD_INT 0
14040: PPUSH
14041: CALL_OW 234
// end ;
14045: GO 14030
14047: POP
14048: POP
// end ;
14049: PPOPN 2
14051: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
14052: LD_EXP 29
14056: PUSH
14057: LD_EXP 32
14061: AND
14062: IFFALSE 14155
14064: GO 14066
14066: DISABLE
14067: LD_INT 0
14069: PPUSH
// begin enable ;
14070: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
14071: LD_ADDR_VAR 0 1
14075: PUSH
14076: LD_INT 22
14078: PUSH
14079: LD_OWVAR 2
14083: PUSH
14084: EMPTY
14085: LIST
14086: LIST
14087: PUSH
14088: LD_INT 2
14090: PUSH
14091: LD_INT 25
14093: PUSH
14094: LD_INT 5
14096: PUSH
14097: EMPTY
14098: LIST
14099: LIST
14100: PUSH
14101: LD_INT 25
14103: PUSH
14104: LD_INT 9
14106: PUSH
14107: EMPTY
14108: LIST
14109: LIST
14110: PUSH
14111: LD_INT 25
14113: PUSH
14114: LD_INT 8
14116: PUSH
14117: EMPTY
14118: LIST
14119: LIST
14120: PUSH
14121: EMPTY
14122: LIST
14123: LIST
14124: LIST
14125: LIST
14126: PUSH
14127: EMPTY
14128: LIST
14129: LIST
14130: PPUSH
14131: CALL_OW 69
14135: PUSH
14136: FOR_IN
14137: IFFALSE 14153
// begin SetClass ( i , 1 ) ;
14139: LD_VAR 0 1
14143: PPUSH
14144: LD_INT 1
14146: PPUSH
14147: CALL_OW 336
// end ;
14151: GO 14136
14153: POP
14154: POP
// end ;
14155: PPOPN 1
14157: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
14158: LD_EXP 29
14162: PUSH
14163: LD_EXP 33
14167: AND
14168: PUSH
14169: LD_OWVAR 65
14173: PUSH
14174: LD_INT 7
14176: LESS
14177: AND
14178: IFFALSE 14192
14180: GO 14182
14182: DISABLE
// begin enable ;
14183: ENABLE
// game_speed := 7 ;
14184: LD_ADDR_OWVAR 65
14188: PUSH
14189: LD_INT 7
14191: ST_TO_ADDR
// end ;
14192: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
14193: LD_EXP 29
14197: PUSH
14198: LD_EXP 36
14202: AND
14203: IFFALSE 14405
14205: GO 14207
14207: DISABLE
14208: LD_INT 0
14210: PPUSH
14211: PPUSH
14212: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
14213: LD_ADDR_VAR 0 3
14217: PUSH
14218: LD_INT 81
14220: PUSH
14221: LD_OWVAR 2
14225: PUSH
14226: EMPTY
14227: LIST
14228: LIST
14229: PUSH
14230: LD_INT 21
14232: PUSH
14233: LD_INT 1
14235: PUSH
14236: EMPTY
14237: LIST
14238: LIST
14239: PUSH
14240: EMPTY
14241: LIST
14242: LIST
14243: PPUSH
14244: CALL_OW 69
14248: ST_TO_ADDR
// if not tmp then
14249: LD_VAR 0 3
14253: NOT
14254: IFFALSE 14258
// exit ;
14256: GO 14405
// if tmp > 5 then
14258: LD_VAR 0 3
14262: PUSH
14263: LD_INT 5
14265: GREATER
14266: IFFALSE 14278
// k := 5 else
14268: LD_ADDR_VAR 0 2
14272: PUSH
14273: LD_INT 5
14275: ST_TO_ADDR
14276: GO 14288
// k := tmp ;
14278: LD_ADDR_VAR 0 2
14282: PUSH
14283: LD_VAR 0 3
14287: ST_TO_ADDR
// for i := 1 to k do
14288: LD_ADDR_VAR 0 1
14292: PUSH
14293: DOUBLE
14294: LD_INT 1
14296: DEC
14297: ST_TO_ADDR
14298: LD_VAR 0 2
14302: PUSH
14303: FOR_TO
14304: IFFALSE 14403
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
14306: LD_VAR 0 3
14310: PUSH
14311: LD_VAR 0 1
14315: ARRAY
14316: PPUSH
14317: LD_VAR 0 1
14321: PUSH
14322: LD_INT 4
14324: MOD
14325: PUSH
14326: LD_INT 1
14328: PLUS
14329: PPUSH
14330: CALL_OW 259
14334: PUSH
14335: LD_INT 10
14337: LESS
14338: IFFALSE 14401
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
14340: LD_VAR 0 3
14344: PUSH
14345: LD_VAR 0 1
14349: ARRAY
14350: PPUSH
14351: LD_VAR 0 1
14355: PUSH
14356: LD_INT 4
14358: MOD
14359: PUSH
14360: LD_INT 1
14362: PLUS
14363: PPUSH
14364: LD_VAR 0 3
14368: PUSH
14369: LD_VAR 0 1
14373: ARRAY
14374: PPUSH
14375: LD_VAR 0 1
14379: PUSH
14380: LD_INT 4
14382: MOD
14383: PUSH
14384: LD_INT 1
14386: PLUS
14387: PPUSH
14388: CALL_OW 259
14392: PUSH
14393: LD_INT 1
14395: PLUS
14396: PPUSH
14397: CALL_OW 237
14401: GO 14303
14403: POP
14404: POP
// end ;
14405: PPOPN 3
14407: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
14408: LD_EXP 29
14412: PUSH
14413: LD_EXP 37
14417: AND
14418: IFFALSE 14438
14420: GO 14422
14422: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
14423: LD_INT 4
14425: PPUSH
14426: LD_OWVAR 2
14430: PPUSH
14431: LD_INT 0
14433: PPUSH
14434: CALL_OW 324
14438: END
// every 0 0$1 trigger StreamModeActive and sShovel do
14439: LD_EXP 29
14443: PUSH
14444: LD_EXP 66
14448: AND
14449: IFFALSE 14469
14451: GO 14453
14453: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
14454: LD_INT 19
14456: PPUSH
14457: LD_OWVAR 2
14461: PPUSH
14462: LD_INT 0
14464: PPUSH
14465: CALL_OW 324
14469: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
14470: LD_EXP 29
14474: PUSH
14475: LD_EXP 38
14479: AND
14480: IFFALSE 14582
14482: GO 14484
14484: DISABLE
14485: LD_INT 0
14487: PPUSH
14488: PPUSH
// begin enable ;
14489: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
14490: LD_ADDR_VAR 0 2
14494: PUSH
14495: LD_INT 22
14497: PUSH
14498: LD_OWVAR 2
14502: PUSH
14503: EMPTY
14504: LIST
14505: LIST
14506: PUSH
14507: LD_INT 2
14509: PUSH
14510: LD_INT 34
14512: PUSH
14513: LD_INT 11
14515: PUSH
14516: EMPTY
14517: LIST
14518: LIST
14519: PUSH
14520: LD_INT 34
14522: PUSH
14523: LD_INT 30
14525: PUSH
14526: EMPTY
14527: LIST
14528: LIST
14529: PUSH
14530: EMPTY
14531: LIST
14532: LIST
14533: LIST
14534: PUSH
14535: EMPTY
14536: LIST
14537: LIST
14538: PPUSH
14539: CALL_OW 69
14543: ST_TO_ADDR
// if not tmp then
14544: LD_VAR 0 2
14548: NOT
14549: IFFALSE 14553
// exit ;
14551: GO 14582
// for i in tmp do
14553: LD_ADDR_VAR 0 1
14557: PUSH
14558: LD_VAR 0 2
14562: PUSH
14563: FOR_IN
14564: IFFALSE 14580
// begin SetLives ( i , 0 ) ;
14566: LD_VAR 0 1
14570: PPUSH
14571: LD_INT 0
14573: PPUSH
14574: CALL_OW 234
// end ;
14578: GO 14563
14580: POP
14581: POP
// end ;
14582: PPOPN 2
14584: END
// every 0 0$1 trigger StreamModeActive and sBunker do
14585: LD_EXP 29
14589: PUSH
14590: LD_EXP 39
14594: AND
14595: IFFALSE 14615
14597: GO 14599
14599: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
14600: LD_INT 32
14602: PPUSH
14603: LD_OWVAR 2
14607: PPUSH
14608: LD_INT 0
14610: PPUSH
14611: CALL_OW 324
14615: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
14616: LD_EXP 29
14620: PUSH
14621: LD_EXP 40
14625: AND
14626: IFFALSE 14807
14628: GO 14630
14630: DISABLE
14631: LD_INT 0
14633: PPUSH
14634: PPUSH
14635: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
14636: LD_ADDR_VAR 0 2
14640: PUSH
14641: LD_INT 22
14643: PUSH
14644: LD_OWVAR 2
14648: PUSH
14649: EMPTY
14650: LIST
14651: LIST
14652: PUSH
14653: LD_INT 33
14655: PUSH
14656: LD_INT 3
14658: PUSH
14659: EMPTY
14660: LIST
14661: LIST
14662: PUSH
14663: EMPTY
14664: LIST
14665: LIST
14666: PPUSH
14667: CALL_OW 69
14671: ST_TO_ADDR
// if not tmp then
14672: LD_VAR 0 2
14676: NOT
14677: IFFALSE 14681
// exit ;
14679: GO 14807
// side := 0 ;
14681: LD_ADDR_VAR 0 3
14685: PUSH
14686: LD_INT 0
14688: ST_TO_ADDR
// for i := 1 to 8 do
14689: LD_ADDR_VAR 0 1
14693: PUSH
14694: DOUBLE
14695: LD_INT 1
14697: DEC
14698: ST_TO_ADDR
14699: LD_INT 8
14701: PUSH
14702: FOR_TO
14703: IFFALSE 14751
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
14705: LD_OWVAR 2
14709: PUSH
14710: LD_VAR 0 1
14714: NONEQUAL
14715: PUSH
14716: LD_OWVAR 2
14720: PPUSH
14721: LD_VAR 0 1
14725: PPUSH
14726: CALL_OW 81
14730: PUSH
14731: LD_INT 2
14733: EQUAL
14734: AND
14735: IFFALSE 14749
// begin side := i ;
14737: LD_ADDR_VAR 0 3
14741: PUSH
14742: LD_VAR 0 1
14746: ST_TO_ADDR
// break ;
14747: GO 14751
// end ;
14749: GO 14702
14751: POP
14752: POP
// if not side then
14753: LD_VAR 0 3
14757: NOT
14758: IFFALSE 14762
// exit ;
14760: GO 14807
// for i := 1 to tmp do
14762: LD_ADDR_VAR 0 1
14766: PUSH
14767: DOUBLE
14768: LD_INT 1
14770: DEC
14771: ST_TO_ADDR
14772: LD_VAR 0 2
14776: PUSH
14777: FOR_TO
14778: IFFALSE 14805
// if Prob ( 60 ) then
14780: LD_INT 60
14782: PPUSH
14783: CALL_OW 13
14787: IFFALSE 14803
// SetSide ( i , side ) ;
14789: LD_VAR 0 1
14793: PPUSH
14794: LD_VAR 0 3
14798: PPUSH
14799: CALL_OW 235
14803: GO 14777
14805: POP
14806: POP
// end ;
14807: PPOPN 3
14809: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
14810: LD_EXP 29
14814: PUSH
14815: LD_EXP 42
14819: AND
14820: IFFALSE 14939
14822: GO 14824
14824: DISABLE
14825: LD_INT 0
14827: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
14828: LD_ADDR_VAR 0 1
14832: PUSH
14833: LD_INT 22
14835: PUSH
14836: LD_OWVAR 2
14840: PUSH
14841: EMPTY
14842: LIST
14843: LIST
14844: PUSH
14845: LD_INT 21
14847: PUSH
14848: LD_INT 1
14850: PUSH
14851: EMPTY
14852: LIST
14853: LIST
14854: PUSH
14855: LD_INT 3
14857: PUSH
14858: LD_INT 23
14860: PUSH
14861: LD_INT 0
14863: PUSH
14864: EMPTY
14865: LIST
14866: LIST
14867: PUSH
14868: EMPTY
14869: LIST
14870: LIST
14871: PUSH
14872: EMPTY
14873: LIST
14874: LIST
14875: LIST
14876: PPUSH
14877: CALL_OW 69
14881: PUSH
14882: FOR_IN
14883: IFFALSE 14937
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
14885: LD_VAR 0 1
14889: PPUSH
14890: CALL_OW 257
14894: PUSH
14895: LD_INT 1
14897: PUSH
14898: LD_INT 2
14900: PUSH
14901: LD_INT 3
14903: PUSH
14904: LD_INT 4
14906: PUSH
14907: EMPTY
14908: LIST
14909: LIST
14910: LIST
14911: LIST
14912: IN
14913: IFFALSE 14935
// SetClass ( un , rand ( 1 , 4 ) ) ;
14915: LD_VAR 0 1
14919: PPUSH
14920: LD_INT 1
14922: PPUSH
14923: LD_INT 4
14925: PPUSH
14926: CALL_OW 12
14930: PPUSH
14931: CALL_OW 336
14935: GO 14882
14937: POP
14938: POP
// end ;
14939: PPOPN 1
14941: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
14942: LD_EXP 29
14946: PUSH
14947: LD_EXP 41
14951: AND
14952: IFFALSE 15031
14954: GO 14956
14956: DISABLE
14957: LD_INT 0
14959: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
14960: LD_ADDR_VAR 0 1
14964: PUSH
14965: LD_INT 22
14967: PUSH
14968: LD_OWVAR 2
14972: PUSH
14973: EMPTY
14974: LIST
14975: LIST
14976: PUSH
14977: LD_INT 21
14979: PUSH
14980: LD_INT 3
14982: PUSH
14983: EMPTY
14984: LIST
14985: LIST
14986: PUSH
14987: EMPTY
14988: LIST
14989: LIST
14990: PPUSH
14991: CALL_OW 69
14995: ST_TO_ADDR
// if not tmp then
14996: LD_VAR 0 1
15000: NOT
15001: IFFALSE 15005
// exit ;
15003: GO 15031
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
15005: LD_VAR 0 1
15009: PUSH
15010: LD_INT 1
15012: PPUSH
15013: LD_VAR 0 1
15017: PPUSH
15018: CALL_OW 12
15022: ARRAY
15023: PPUSH
15024: LD_INT 100
15026: PPUSH
15027: CALL_OW 234
// end ;
15031: PPOPN 1
15033: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
15034: LD_EXP 29
15038: PUSH
15039: LD_EXP 43
15043: AND
15044: IFFALSE 15142
15046: GO 15048
15048: DISABLE
15049: LD_INT 0
15051: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
15052: LD_ADDR_VAR 0 1
15056: PUSH
15057: LD_INT 22
15059: PUSH
15060: LD_OWVAR 2
15064: PUSH
15065: EMPTY
15066: LIST
15067: LIST
15068: PUSH
15069: LD_INT 21
15071: PUSH
15072: LD_INT 1
15074: PUSH
15075: EMPTY
15076: LIST
15077: LIST
15078: PUSH
15079: EMPTY
15080: LIST
15081: LIST
15082: PPUSH
15083: CALL_OW 69
15087: ST_TO_ADDR
// if not tmp then
15088: LD_VAR 0 1
15092: NOT
15093: IFFALSE 15097
// exit ;
15095: GO 15142
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
15097: LD_VAR 0 1
15101: PUSH
15102: LD_INT 1
15104: PPUSH
15105: LD_VAR 0 1
15109: PPUSH
15110: CALL_OW 12
15114: ARRAY
15115: PPUSH
15116: LD_INT 1
15118: PPUSH
15119: LD_INT 4
15121: PPUSH
15122: CALL_OW 12
15126: PPUSH
15127: LD_INT 3000
15129: PPUSH
15130: LD_INT 9000
15132: PPUSH
15133: CALL_OW 12
15137: PPUSH
15138: CALL_OW 492
// end ;
15142: PPOPN 1
15144: END
// every 0 0$1 trigger StreamModeActive and sDepot do
15145: LD_EXP 29
15149: PUSH
15150: LD_EXP 44
15154: AND
15155: IFFALSE 15175
15157: GO 15159
15159: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
15160: LD_INT 1
15162: PPUSH
15163: LD_OWVAR 2
15167: PPUSH
15168: LD_INT 0
15170: PPUSH
15171: CALL_OW 324
15175: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
15176: LD_EXP 29
15180: PUSH
15181: LD_EXP 45
15185: AND
15186: IFFALSE 15269
15188: GO 15190
15190: DISABLE
15191: LD_INT 0
15193: PPUSH
15194: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
15195: LD_ADDR_VAR 0 2
15199: PUSH
15200: LD_INT 22
15202: PUSH
15203: LD_OWVAR 2
15207: PUSH
15208: EMPTY
15209: LIST
15210: LIST
15211: PUSH
15212: LD_INT 21
15214: PUSH
15215: LD_INT 3
15217: PUSH
15218: EMPTY
15219: LIST
15220: LIST
15221: PUSH
15222: EMPTY
15223: LIST
15224: LIST
15225: PPUSH
15226: CALL_OW 69
15230: ST_TO_ADDR
// if not tmp then
15231: LD_VAR 0 2
15235: NOT
15236: IFFALSE 15240
// exit ;
15238: GO 15269
// for i in tmp do
15240: LD_ADDR_VAR 0 1
15244: PUSH
15245: LD_VAR 0 2
15249: PUSH
15250: FOR_IN
15251: IFFALSE 15267
// SetBLevel ( i , 10 ) ;
15253: LD_VAR 0 1
15257: PPUSH
15258: LD_INT 10
15260: PPUSH
15261: CALL_OW 241
15265: GO 15250
15267: POP
15268: POP
// end ;
15269: PPOPN 2
15271: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
15272: LD_EXP 29
15276: PUSH
15277: LD_EXP 46
15281: AND
15282: IFFALSE 15393
15284: GO 15286
15286: DISABLE
15287: LD_INT 0
15289: PPUSH
15290: PPUSH
15291: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15292: LD_ADDR_VAR 0 3
15296: PUSH
15297: LD_INT 22
15299: PUSH
15300: LD_OWVAR 2
15304: PUSH
15305: EMPTY
15306: LIST
15307: LIST
15308: PUSH
15309: LD_INT 25
15311: PUSH
15312: LD_INT 1
15314: PUSH
15315: EMPTY
15316: LIST
15317: LIST
15318: PUSH
15319: EMPTY
15320: LIST
15321: LIST
15322: PPUSH
15323: CALL_OW 69
15327: ST_TO_ADDR
// if not tmp then
15328: LD_VAR 0 3
15332: NOT
15333: IFFALSE 15337
// exit ;
15335: GO 15393
// un := tmp [ rand ( 1 , tmp ) ] ;
15337: LD_ADDR_VAR 0 2
15341: PUSH
15342: LD_VAR 0 3
15346: PUSH
15347: LD_INT 1
15349: PPUSH
15350: LD_VAR 0 3
15354: PPUSH
15355: CALL_OW 12
15359: ARRAY
15360: ST_TO_ADDR
// if Crawls ( un ) then
15361: LD_VAR 0 2
15365: PPUSH
15366: CALL_OW 318
15370: IFFALSE 15381
// ComWalk ( un ) ;
15372: LD_VAR 0 2
15376: PPUSH
15377: CALL_OW 138
// SetClass ( un , class_sniper ) ;
15381: LD_VAR 0 2
15385: PPUSH
15386: LD_INT 5
15388: PPUSH
15389: CALL_OW 336
// end ;
15393: PPOPN 3
15395: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
15396: LD_EXP 29
15400: PUSH
15401: LD_EXP 47
15405: AND
15406: PUSH
15407: LD_OWVAR 67
15411: PUSH
15412: LD_INT 4
15414: LESS
15415: AND
15416: IFFALSE 15435
15418: GO 15420
15420: DISABLE
// begin Difficulty := Difficulty + 1 ;
15421: LD_ADDR_OWVAR 67
15425: PUSH
15426: LD_OWVAR 67
15430: PUSH
15431: LD_INT 1
15433: PLUS
15434: ST_TO_ADDR
// end ;
15435: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
15436: LD_EXP 29
15440: PUSH
15441: LD_EXP 48
15445: AND
15446: IFFALSE 15549
15448: GO 15450
15450: DISABLE
15451: LD_INT 0
15453: PPUSH
// begin for i := 1 to 5 do
15454: LD_ADDR_VAR 0 1
15458: PUSH
15459: DOUBLE
15460: LD_INT 1
15462: DEC
15463: ST_TO_ADDR
15464: LD_INT 5
15466: PUSH
15467: FOR_TO
15468: IFFALSE 15547
// begin uc_nation := nation_nature ;
15470: LD_ADDR_OWVAR 21
15474: PUSH
15475: LD_INT 0
15477: ST_TO_ADDR
// uc_side := 0 ;
15478: LD_ADDR_OWVAR 20
15482: PUSH
15483: LD_INT 0
15485: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
15486: LD_ADDR_OWVAR 29
15490: PUSH
15491: LD_INT 12
15493: PUSH
15494: LD_INT 12
15496: PUSH
15497: EMPTY
15498: LIST
15499: LIST
15500: ST_TO_ADDR
// hc_agressivity := 20 ;
15501: LD_ADDR_OWVAR 35
15505: PUSH
15506: LD_INT 20
15508: ST_TO_ADDR
// hc_class := class_tiger ;
15509: LD_ADDR_OWVAR 28
15513: PUSH
15514: LD_INT 14
15516: ST_TO_ADDR
// hc_gallery :=  ;
15517: LD_ADDR_OWVAR 33
15521: PUSH
15522: LD_STRING 
15524: ST_TO_ADDR
// hc_name :=  ;
15525: LD_ADDR_OWVAR 26
15529: PUSH
15530: LD_STRING 
15532: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
15533: CALL_OW 44
15537: PPUSH
15538: LD_INT 0
15540: PPUSH
15541: CALL_OW 51
// end ;
15545: GO 15467
15547: POP
15548: POP
// end ;
15549: PPOPN 1
15551: END
// every 0 0$1 trigger StreamModeActive and sBomb do
15552: LD_EXP 29
15556: PUSH
15557: LD_EXP 49
15561: AND
15562: IFFALSE 15571
15564: GO 15566
15566: DISABLE
// StreamSibBomb ;
15567: CALL 15572 0 0
15571: END
// export function StreamSibBomb ; var i , x , y ; begin
15572: LD_INT 0
15574: PPUSH
15575: PPUSH
15576: PPUSH
15577: PPUSH
// result := false ;
15578: LD_ADDR_VAR 0 1
15582: PUSH
15583: LD_INT 0
15585: ST_TO_ADDR
// for i := 1 to 16 do
15586: LD_ADDR_VAR 0 2
15590: PUSH
15591: DOUBLE
15592: LD_INT 1
15594: DEC
15595: ST_TO_ADDR
15596: LD_INT 16
15598: PUSH
15599: FOR_TO
15600: IFFALSE 15799
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
15602: LD_ADDR_VAR 0 3
15606: PUSH
15607: LD_INT 10
15609: PUSH
15610: LD_INT 20
15612: PUSH
15613: LD_INT 30
15615: PUSH
15616: LD_INT 40
15618: PUSH
15619: LD_INT 50
15621: PUSH
15622: LD_INT 60
15624: PUSH
15625: LD_INT 70
15627: PUSH
15628: LD_INT 80
15630: PUSH
15631: LD_INT 90
15633: PUSH
15634: LD_INT 100
15636: PUSH
15637: LD_INT 110
15639: PUSH
15640: LD_INT 120
15642: PUSH
15643: LD_INT 130
15645: PUSH
15646: LD_INT 140
15648: PUSH
15649: LD_INT 150
15651: PUSH
15652: EMPTY
15653: LIST
15654: LIST
15655: LIST
15656: LIST
15657: LIST
15658: LIST
15659: LIST
15660: LIST
15661: LIST
15662: LIST
15663: LIST
15664: LIST
15665: LIST
15666: LIST
15667: LIST
15668: PUSH
15669: LD_INT 1
15671: PPUSH
15672: LD_INT 15
15674: PPUSH
15675: CALL_OW 12
15679: ARRAY
15680: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
15681: LD_ADDR_VAR 0 4
15685: PUSH
15686: LD_INT 10
15688: PUSH
15689: LD_INT 20
15691: PUSH
15692: LD_INT 30
15694: PUSH
15695: LD_INT 40
15697: PUSH
15698: LD_INT 50
15700: PUSH
15701: LD_INT 60
15703: PUSH
15704: LD_INT 70
15706: PUSH
15707: LD_INT 80
15709: PUSH
15710: LD_INT 90
15712: PUSH
15713: LD_INT 100
15715: PUSH
15716: LD_INT 110
15718: PUSH
15719: LD_INT 120
15721: PUSH
15722: LD_INT 130
15724: PUSH
15725: LD_INT 140
15727: PUSH
15728: LD_INT 150
15730: PUSH
15731: EMPTY
15732: LIST
15733: LIST
15734: LIST
15735: LIST
15736: LIST
15737: LIST
15738: LIST
15739: LIST
15740: LIST
15741: LIST
15742: LIST
15743: LIST
15744: LIST
15745: LIST
15746: LIST
15747: PUSH
15748: LD_INT 1
15750: PPUSH
15751: LD_INT 15
15753: PPUSH
15754: CALL_OW 12
15758: ARRAY
15759: ST_TO_ADDR
// if ValidHex ( x , y ) then
15760: LD_VAR 0 3
15764: PPUSH
15765: LD_VAR 0 4
15769: PPUSH
15770: CALL_OW 488
15774: IFFALSE 15797
// begin result := [ x , y ] ;
15776: LD_ADDR_VAR 0 1
15780: PUSH
15781: LD_VAR 0 3
15785: PUSH
15786: LD_VAR 0 4
15790: PUSH
15791: EMPTY
15792: LIST
15793: LIST
15794: ST_TO_ADDR
// break ;
15795: GO 15799
// end ; end ;
15797: GO 15599
15799: POP
15800: POP
// if result then
15801: LD_VAR 0 1
15805: IFFALSE 15865
// begin ToLua ( playSibBomb() ) ;
15807: LD_STRING playSibBomb()
15809: PPUSH
15810: CALL_OW 559
// wait ( 0 0$14 ) ;
15814: LD_INT 490
15816: PPUSH
15817: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
15821: LD_VAR 0 1
15825: PUSH
15826: LD_INT 1
15828: ARRAY
15829: PPUSH
15830: LD_VAR 0 1
15834: PUSH
15835: LD_INT 2
15837: ARRAY
15838: PPUSH
15839: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
15843: LD_VAR 0 1
15847: PUSH
15848: LD_INT 1
15850: ARRAY
15851: PPUSH
15852: LD_VAR 0 1
15856: PUSH
15857: LD_INT 2
15859: ARRAY
15860: PPUSH
15861: CALL_OW 429
// end ; end ;
15865: LD_VAR 0 1
15869: RET
// every 0 0$1 trigger StreamModeActive and sReset do
15870: LD_EXP 29
15874: PUSH
15875: LD_EXP 51
15879: AND
15880: IFFALSE 15892
15882: GO 15884
15884: DISABLE
// YouLost (  ) ;
15885: LD_STRING 
15887: PPUSH
15888: CALL_OW 104
15892: END
// every 0 0$1 trigger StreamModeActive and sFog do
15893: LD_EXP 29
15897: PUSH
15898: LD_EXP 50
15902: AND
15903: IFFALSE 15917
15905: GO 15907
15907: DISABLE
// FogOff ( your_side ) ;
15908: LD_OWVAR 2
15912: PPUSH
15913: CALL_OW 344
15917: END
// every 0 0$1 trigger StreamModeActive and sSun do
15918: LD_EXP 29
15922: PUSH
15923: LD_EXP 52
15927: AND
15928: IFFALSE 15956
15930: GO 15932
15932: DISABLE
// begin solar_recharge_percent := 0 ;
15933: LD_ADDR_OWVAR 79
15937: PUSH
15938: LD_INT 0
15940: ST_TO_ADDR
// wait ( 5 5$00 ) ;
15941: LD_INT 10500
15943: PPUSH
15944: CALL_OW 67
// solar_recharge_percent := 100 ;
15948: LD_ADDR_OWVAR 79
15952: PUSH
15953: LD_INT 100
15955: ST_TO_ADDR
// end ;
15956: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
15957: LD_EXP 29
15961: PUSH
15962: LD_EXP 53
15966: AND
15967: IFFALSE 16206
15969: GO 15971
15971: DISABLE
15972: LD_INT 0
15974: PPUSH
15975: PPUSH
15976: PPUSH
// begin tmp := [ ] ;
15977: LD_ADDR_VAR 0 3
15981: PUSH
15982: EMPTY
15983: ST_TO_ADDR
// for i := 1 to 6 do
15984: LD_ADDR_VAR 0 1
15988: PUSH
15989: DOUBLE
15990: LD_INT 1
15992: DEC
15993: ST_TO_ADDR
15994: LD_INT 6
15996: PUSH
15997: FOR_TO
15998: IFFALSE 16103
// begin uc_nation := nation_nature ;
16000: LD_ADDR_OWVAR 21
16004: PUSH
16005: LD_INT 0
16007: ST_TO_ADDR
// uc_side := 0 ;
16008: LD_ADDR_OWVAR 20
16012: PUSH
16013: LD_INT 0
16015: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
16016: LD_ADDR_OWVAR 29
16020: PUSH
16021: LD_INT 12
16023: PUSH
16024: LD_INT 12
16026: PUSH
16027: EMPTY
16028: LIST
16029: LIST
16030: ST_TO_ADDR
// hc_agressivity := 20 ;
16031: LD_ADDR_OWVAR 35
16035: PUSH
16036: LD_INT 20
16038: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
16039: LD_ADDR_OWVAR 28
16043: PUSH
16044: LD_INT 17
16046: ST_TO_ADDR
// hc_gallery :=  ;
16047: LD_ADDR_OWVAR 33
16051: PUSH
16052: LD_STRING 
16054: ST_TO_ADDR
// hc_name :=  ;
16055: LD_ADDR_OWVAR 26
16059: PUSH
16060: LD_STRING 
16062: ST_TO_ADDR
// un := CreateHuman ;
16063: LD_ADDR_VAR 0 2
16067: PUSH
16068: CALL_OW 44
16072: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
16073: LD_VAR 0 2
16077: PPUSH
16078: LD_INT 1
16080: PPUSH
16081: CALL_OW 51
// tmp := tmp ^ un ;
16085: LD_ADDR_VAR 0 3
16089: PUSH
16090: LD_VAR 0 3
16094: PUSH
16095: LD_VAR 0 2
16099: ADD
16100: ST_TO_ADDR
// end ;
16101: GO 15997
16103: POP
16104: POP
// repeat wait ( 0 0$1 ) ;
16105: LD_INT 35
16107: PPUSH
16108: CALL_OW 67
// for un in tmp do
16112: LD_ADDR_VAR 0 2
16116: PUSH
16117: LD_VAR 0 3
16121: PUSH
16122: FOR_IN
16123: IFFALSE 16197
// begin if IsDead ( un ) then
16125: LD_VAR 0 2
16129: PPUSH
16130: CALL_OW 301
16134: IFFALSE 16154
// begin tmp := tmp diff un ;
16136: LD_ADDR_VAR 0 3
16140: PUSH
16141: LD_VAR 0 3
16145: PUSH
16146: LD_VAR 0 2
16150: DIFF
16151: ST_TO_ADDR
// continue ;
16152: GO 16122
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
16154: LD_VAR 0 2
16158: PPUSH
16159: LD_INT 3
16161: PUSH
16162: LD_INT 22
16164: PUSH
16165: LD_INT 0
16167: PUSH
16168: EMPTY
16169: LIST
16170: LIST
16171: PUSH
16172: EMPTY
16173: LIST
16174: LIST
16175: PPUSH
16176: CALL_OW 69
16180: PPUSH
16181: LD_VAR 0 2
16185: PPUSH
16186: CALL_OW 74
16190: PPUSH
16191: CALL_OW 115
// end ;
16195: GO 16122
16197: POP
16198: POP
// until not tmp ;
16199: LD_VAR 0 3
16203: NOT
16204: IFFALSE 16105
// end ;
16206: PPOPN 3
16208: END
// every 0 0$1 trigger StreamModeActive and sTroll do
16209: LD_EXP 29
16213: PUSH
16214: LD_EXP 54
16218: AND
16219: IFFALSE 16273
16221: GO 16223
16223: DISABLE
// begin ToLua ( displayTroll(); ) ;
16224: LD_STRING displayTroll();
16226: PPUSH
16227: CALL_OW 559
// wait ( 3 3$00 ) ;
16231: LD_INT 6300
16233: PPUSH
16234: CALL_OW 67
// ToLua ( hideTroll(); ) ;
16238: LD_STRING hideTroll();
16240: PPUSH
16241: CALL_OW 559
// wait ( 1 1$00 ) ;
16245: LD_INT 2100
16247: PPUSH
16248: CALL_OW 67
// ToLua ( displayTroll(); ) ;
16252: LD_STRING displayTroll();
16254: PPUSH
16255: CALL_OW 559
// wait ( 1 1$00 ) ;
16259: LD_INT 2100
16261: PPUSH
16262: CALL_OW 67
// ToLua ( hideTroll(); ) ;
16266: LD_STRING hideTroll();
16268: PPUSH
16269: CALL_OW 559
// end ;
16273: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
16274: LD_EXP 29
16278: PUSH
16279: LD_EXP 55
16283: AND
16284: IFFALSE 16347
16286: GO 16288
16288: DISABLE
16289: LD_INT 0
16291: PPUSH
// begin p := 0 ;
16292: LD_ADDR_VAR 0 1
16296: PUSH
16297: LD_INT 0
16299: ST_TO_ADDR
// repeat game_speed := 1 ;
16300: LD_ADDR_OWVAR 65
16304: PUSH
16305: LD_INT 1
16307: ST_TO_ADDR
// wait ( 0 0$1 ) ;
16308: LD_INT 35
16310: PPUSH
16311: CALL_OW 67
// p := p + 1 ;
16315: LD_ADDR_VAR 0 1
16319: PUSH
16320: LD_VAR 0 1
16324: PUSH
16325: LD_INT 1
16327: PLUS
16328: ST_TO_ADDR
// until p >= 60 ;
16329: LD_VAR 0 1
16333: PUSH
16334: LD_INT 60
16336: GREATEREQUAL
16337: IFFALSE 16300
// game_speed := 4 ;
16339: LD_ADDR_OWVAR 65
16343: PUSH
16344: LD_INT 4
16346: ST_TO_ADDR
// end ;
16347: PPOPN 1
16349: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
16350: LD_EXP 29
16354: PUSH
16355: LD_EXP 56
16359: AND
16360: IFFALSE 16506
16362: GO 16364
16364: DISABLE
16365: LD_INT 0
16367: PPUSH
16368: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
16369: LD_ADDR_VAR 0 1
16373: PUSH
16374: LD_INT 22
16376: PUSH
16377: LD_OWVAR 2
16381: PUSH
16382: EMPTY
16383: LIST
16384: LIST
16385: PUSH
16386: LD_INT 2
16388: PUSH
16389: LD_INT 30
16391: PUSH
16392: LD_INT 0
16394: PUSH
16395: EMPTY
16396: LIST
16397: LIST
16398: PUSH
16399: LD_INT 30
16401: PUSH
16402: LD_INT 1
16404: PUSH
16405: EMPTY
16406: LIST
16407: LIST
16408: PUSH
16409: EMPTY
16410: LIST
16411: LIST
16412: LIST
16413: PUSH
16414: EMPTY
16415: LIST
16416: LIST
16417: PPUSH
16418: CALL_OW 69
16422: ST_TO_ADDR
// if not depot then
16423: LD_VAR 0 1
16427: NOT
16428: IFFALSE 16432
// exit ;
16430: GO 16506
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
16432: LD_ADDR_VAR 0 2
16436: PUSH
16437: LD_VAR 0 1
16441: PUSH
16442: LD_INT 1
16444: PPUSH
16445: LD_VAR 0 1
16449: PPUSH
16450: CALL_OW 12
16454: ARRAY
16455: PPUSH
16456: CALL_OW 274
16460: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
16461: LD_VAR 0 2
16465: PPUSH
16466: LD_INT 1
16468: PPUSH
16469: LD_INT 0
16471: PPUSH
16472: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
16476: LD_VAR 0 2
16480: PPUSH
16481: LD_INT 2
16483: PPUSH
16484: LD_INT 0
16486: PPUSH
16487: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
16491: LD_VAR 0 2
16495: PPUSH
16496: LD_INT 3
16498: PPUSH
16499: LD_INT 0
16501: PPUSH
16502: CALL_OW 277
// end ;
16506: PPOPN 2
16508: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
16509: LD_EXP 29
16513: PUSH
16514: LD_EXP 57
16518: AND
16519: IFFALSE 16616
16521: GO 16523
16523: DISABLE
16524: LD_INT 0
16526: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
16527: LD_ADDR_VAR 0 1
16531: PUSH
16532: LD_INT 22
16534: PUSH
16535: LD_OWVAR 2
16539: PUSH
16540: EMPTY
16541: LIST
16542: LIST
16543: PUSH
16544: LD_INT 21
16546: PUSH
16547: LD_INT 1
16549: PUSH
16550: EMPTY
16551: LIST
16552: LIST
16553: PUSH
16554: LD_INT 3
16556: PUSH
16557: LD_INT 23
16559: PUSH
16560: LD_INT 0
16562: PUSH
16563: EMPTY
16564: LIST
16565: LIST
16566: PUSH
16567: EMPTY
16568: LIST
16569: LIST
16570: PUSH
16571: EMPTY
16572: LIST
16573: LIST
16574: LIST
16575: PPUSH
16576: CALL_OW 69
16580: ST_TO_ADDR
// if not tmp then
16581: LD_VAR 0 1
16585: NOT
16586: IFFALSE 16590
// exit ;
16588: GO 16616
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
16590: LD_VAR 0 1
16594: PUSH
16595: LD_INT 1
16597: PPUSH
16598: LD_VAR 0 1
16602: PPUSH
16603: CALL_OW 12
16607: ARRAY
16608: PPUSH
16609: LD_INT 200
16611: PPUSH
16612: CALL_OW 234
// end ;
16616: PPOPN 1
16618: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
16619: LD_EXP 29
16623: PUSH
16624: LD_EXP 58
16628: AND
16629: IFFALSE 16708
16631: GO 16633
16633: DISABLE
16634: LD_INT 0
16636: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
16637: LD_ADDR_VAR 0 1
16641: PUSH
16642: LD_INT 22
16644: PUSH
16645: LD_OWVAR 2
16649: PUSH
16650: EMPTY
16651: LIST
16652: LIST
16653: PUSH
16654: LD_INT 21
16656: PUSH
16657: LD_INT 2
16659: PUSH
16660: EMPTY
16661: LIST
16662: LIST
16663: PUSH
16664: EMPTY
16665: LIST
16666: LIST
16667: PPUSH
16668: CALL_OW 69
16672: ST_TO_ADDR
// if not tmp then
16673: LD_VAR 0 1
16677: NOT
16678: IFFALSE 16682
// exit ;
16680: GO 16708
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
16682: LD_VAR 0 1
16686: PUSH
16687: LD_INT 1
16689: PPUSH
16690: LD_VAR 0 1
16694: PPUSH
16695: CALL_OW 12
16699: ARRAY
16700: PPUSH
16701: LD_INT 60
16703: PPUSH
16704: CALL_OW 234
// end ;
16708: PPOPN 1
16710: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
16711: LD_EXP 29
16715: PUSH
16716: LD_EXP 59
16720: AND
16721: IFFALSE 16820
16723: GO 16725
16725: DISABLE
16726: LD_INT 0
16728: PPUSH
16729: PPUSH
// begin enable ;
16730: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
16731: LD_ADDR_VAR 0 1
16735: PUSH
16736: LD_INT 22
16738: PUSH
16739: LD_OWVAR 2
16743: PUSH
16744: EMPTY
16745: LIST
16746: LIST
16747: PUSH
16748: LD_INT 61
16750: PUSH
16751: EMPTY
16752: LIST
16753: PUSH
16754: LD_INT 33
16756: PUSH
16757: LD_INT 2
16759: PUSH
16760: EMPTY
16761: LIST
16762: LIST
16763: PUSH
16764: EMPTY
16765: LIST
16766: LIST
16767: LIST
16768: PPUSH
16769: CALL_OW 69
16773: ST_TO_ADDR
// if not tmp then
16774: LD_VAR 0 1
16778: NOT
16779: IFFALSE 16783
// exit ;
16781: GO 16820
// for i in tmp do
16783: LD_ADDR_VAR 0 2
16787: PUSH
16788: LD_VAR 0 1
16792: PUSH
16793: FOR_IN
16794: IFFALSE 16818
// if IsControledBy ( i ) then
16796: LD_VAR 0 2
16800: PPUSH
16801: CALL_OW 312
16805: IFFALSE 16816
// ComUnlink ( i ) ;
16807: LD_VAR 0 2
16811: PPUSH
16812: CALL_OW 136
16816: GO 16793
16818: POP
16819: POP
// end ;
16820: PPOPN 2
16822: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
16823: LD_EXP 29
16827: PUSH
16828: LD_EXP 60
16832: AND
16833: IFFALSE 16973
16835: GO 16837
16837: DISABLE
16838: LD_INT 0
16840: PPUSH
16841: PPUSH
// begin ToLua ( displayPowell(); ) ;
16842: LD_STRING displayPowell();
16844: PPUSH
16845: CALL_OW 559
// uc_side := 0 ;
16849: LD_ADDR_OWVAR 20
16853: PUSH
16854: LD_INT 0
16856: ST_TO_ADDR
// uc_nation := 2 ;
16857: LD_ADDR_OWVAR 21
16861: PUSH
16862: LD_INT 2
16864: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
16865: LD_ADDR_OWVAR 37
16869: PUSH
16870: LD_INT 14
16872: ST_TO_ADDR
// vc_engine := engine_siberite ;
16873: LD_ADDR_OWVAR 39
16877: PUSH
16878: LD_INT 3
16880: ST_TO_ADDR
// vc_control := control_apeman ;
16881: LD_ADDR_OWVAR 38
16885: PUSH
16886: LD_INT 5
16888: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
16889: LD_ADDR_OWVAR 40
16893: PUSH
16894: LD_INT 29
16896: ST_TO_ADDR
// un := CreateVehicle ;
16897: LD_ADDR_VAR 0 2
16901: PUSH
16902: CALL_OW 45
16906: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
16907: LD_VAR 0 2
16911: PPUSH
16912: LD_INT 1
16914: PPUSH
16915: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
16919: LD_INT 35
16921: PPUSH
16922: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
16926: LD_VAR 0 2
16930: PPUSH
16931: LD_INT 22
16933: PUSH
16934: LD_OWVAR 2
16938: PUSH
16939: EMPTY
16940: LIST
16941: LIST
16942: PPUSH
16943: CALL_OW 69
16947: PPUSH
16948: LD_VAR 0 2
16952: PPUSH
16953: CALL_OW 74
16957: PPUSH
16958: CALL_OW 115
// until IsDead ( un ) ;
16962: LD_VAR 0 2
16966: PPUSH
16967: CALL_OW 301
16971: IFFALSE 16919
// end ;
16973: PPOPN 2
16975: END
// every 0 0$1 trigger StreamModeActive and sStu do
16976: LD_EXP 29
16980: PUSH
16981: LD_EXP 68
16985: AND
16986: IFFALSE 17002
16988: GO 16990
16990: DISABLE
// begin ToLua ( displayStucuk(); ) ;
16991: LD_STRING displayStucuk();
16993: PPUSH
16994: CALL_OW 559
// ResetFog ;
16998: CALL_OW 335
// end ;
17002: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
17003: LD_EXP 29
17007: PUSH
17008: LD_EXP 61
17012: AND
17013: IFFALSE 17154
17015: GO 17017
17017: DISABLE
17018: LD_INT 0
17020: PPUSH
17021: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
17022: LD_ADDR_VAR 0 2
17026: PUSH
17027: LD_INT 22
17029: PUSH
17030: LD_OWVAR 2
17034: PUSH
17035: EMPTY
17036: LIST
17037: LIST
17038: PUSH
17039: LD_INT 21
17041: PUSH
17042: LD_INT 1
17044: PUSH
17045: EMPTY
17046: LIST
17047: LIST
17048: PUSH
17049: EMPTY
17050: LIST
17051: LIST
17052: PPUSH
17053: CALL_OW 69
17057: ST_TO_ADDR
// if not tmp then
17058: LD_VAR 0 2
17062: NOT
17063: IFFALSE 17067
// exit ;
17065: GO 17154
// un := tmp [ rand ( 1 , tmp ) ] ;
17067: LD_ADDR_VAR 0 1
17071: PUSH
17072: LD_VAR 0 2
17076: PUSH
17077: LD_INT 1
17079: PPUSH
17080: LD_VAR 0 2
17084: PPUSH
17085: CALL_OW 12
17089: ARRAY
17090: ST_TO_ADDR
// SetSide ( un , 0 ) ;
17091: LD_VAR 0 1
17095: PPUSH
17096: LD_INT 0
17098: PPUSH
17099: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
17103: LD_VAR 0 1
17107: PPUSH
17108: LD_OWVAR 3
17112: PUSH
17113: LD_VAR 0 1
17117: DIFF
17118: PPUSH
17119: LD_VAR 0 1
17123: PPUSH
17124: CALL_OW 74
17128: PPUSH
17129: CALL_OW 115
// wait ( 0 0$20 ) ;
17133: LD_INT 700
17135: PPUSH
17136: CALL_OW 67
// SetSide ( un , your_side ) ;
17140: LD_VAR 0 1
17144: PPUSH
17145: LD_OWVAR 2
17149: PPUSH
17150: CALL_OW 235
// end ;
17154: PPOPN 2
17156: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
17157: LD_EXP 29
17161: PUSH
17162: LD_EXP 62
17166: AND
17167: IFFALSE 17273
17169: GO 17171
17171: DISABLE
17172: LD_INT 0
17174: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
17175: LD_ADDR_VAR 0 1
17179: PUSH
17180: LD_INT 22
17182: PUSH
17183: LD_OWVAR 2
17187: PUSH
17188: EMPTY
17189: LIST
17190: LIST
17191: PUSH
17192: LD_INT 2
17194: PUSH
17195: LD_INT 30
17197: PUSH
17198: LD_INT 0
17200: PUSH
17201: EMPTY
17202: LIST
17203: LIST
17204: PUSH
17205: LD_INT 30
17207: PUSH
17208: LD_INT 1
17210: PUSH
17211: EMPTY
17212: LIST
17213: LIST
17214: PUSH
17215: EMPTY
17216: LIST
17217: LIST
17218: LIST
17219: PUSH
17220: EMPTY
17221: LIST
17222: LIST
17223: PPUSH
17224: CALL_OW 69
17228: ST_TO_ADDR
// if not depot then
17229: LD_VAR 0 1
17233: NOT
17234: IFFALSE 17238
// exit ;
17236: GO 17273
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
17238: LD_VAR 0 1
17242: PUSH
17243: LD_INT 1
17245: ARRAY
17246: PPUSH
17247: CALL_OW 250
17251: PPUSH
17252: LD_VAR 0 1
17256: PUSH
17257: LD_INT 1
17259: ARRAY
17260: PPUSH
17261: CALL_OW 251
17265: PPUSH
17266: LD_INT 70
17268: PPUSH
17269: CALL_OW 495
// end ;
17273: PPOPN 1
17275: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
17276: LD_EXP 29
17280: PUSH
17281: LD_EXP 63
17285: AND
17286: IFFALSE 17497
17288: GO 17290
17290: DISABLE
17291: LD_INT 0
17293: PPUSH
17294: PPUSH
17295: PPUSH
17296: PPUSH
17297: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
17298: LD_ADDR_VAR 0 5
17302: PUSH
17303: LD_INT 22
17305: PUSH
17306: LD_OWVAR 2
17310: PUSH
17311: EMPTY
17312: LIST
17313: LIST
17314: PUSH
17315: LD_INT 21
17317: PUSH
17318: LD_INT 1
17320: PUSH
17321: EMPTY
17322: LIST
17323: LIST
17324: PUSH
17325: EMPTY
17326: LIST
17327: LIST
17328: PPUSH
17329: CALL_OW 69
17333: ST_TO_ADDR
// if not tmp then
17334: LD_VAR 0 5
17338: NOT
17339: IFFALSE 17343
// exit ;
17341: GO 17497
// for i in tmp do
17343: LD_ADDR_VAR 0 1
17347: PUSH
17348: LD_VAR 0 5
17352: PUSH
17353: FOR_IN
17354: IFFALSE 17495
// begin d := rand ( 0 , 5 ) ;
17356: LD_ADDR_VAR 0 4
17360: PUSH
17361: LD_INT 0
17363: PPUSH
17364: LD_INT 5
17366: PPUSH
17367: CALL_OW 12
17371: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
17372: LD_ADDR_VAR 0 2
17376: PUSH
17377: LD_VAR 0 1
17381: PPUSH
17382: CALL_OW 250
17386: PPUSH
17387: LD_VAR 0 4
17391: PPUSH
17392: LD_INT 3
17394: PPUSH
17395: LD_INT 12
17397: PPUSH
17398: CALL_OW 12
17402: PPUSH
17403: CALL_OW 272
17407: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
17408: LD_ADDR_VAR 0 3
17412: PUSH
17413: LD_VAR 0 1
17417: PPUSH
17418: CALL_OW 251
17422: PPUSH
17423: LD_VAR 0 4
17427: PPUSH
17428: LD_INT 3
17430: PPUSH
17431: LD_INT 12
17433: PPUSH
17434: CALL_OW 12
17438: PPUSH
17439: CALL_OW 273
17443: ST_TO_ADDR
// if ValidHex ( x , y ) then
17444: LD_VAR 0 2
17448: PPUSH
17449: LD_VAR 0 3
17453: PPUSH
17454: CALL_OW 488
17458: IFFALSE 17493
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
17460: LD_VAR 0 1
17464: PPUSH
17465: LD_VAR 0 2
17469: PPUSH
17470: LD_VAR 0 3
17474: PPUSH
17475: LD_INT 3
17477: PPUSH
17478: LD_INT 6
17480: PPUSH
17481: CALL_OW 12
17485: PPUSH
17486: LD_INT 1
17488: PPUSH
17489: CALL_OW 483
// end ;
17493: GO 17353
17495: POP
17496: POP
// end ;
17497: PPOPN 5
17499: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
17500: LD_EXP 29
17504: PUSH
17505: LD_EXP 64
17509: AND
17510: IFFALSE 17604
17512: GO 17514
17514: DISABLE
17515: LD_INT 0
17517: PPUSH
17518: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
17519: LD_ADDR_VAR 0 2
17523: PUSH
17524: LD_INT 22
17526: PUSH
17527: LD_OWVAR 2
17531: PUSH
17532: EMPTY
17533: LIST
17534: LIST
17535: PUSH
17536: LD_INT 32
17538: PUSH
17539: LD_INT 1
17541: PUSH
17542: EMPTY
17543: LIST
17544: LIST
17545: PUSH
17546: LD_INT 21
17548: PUSH
17549: LD_INT 2
17551: PUSH
17552: EMPTY
17553: LIST
17554: LIST
17555: PUSH
17556: EMPTY
17557: LIST
17558: LIST
17559: LIST
17560: PPUSH
17561: CALL_OW 69
17565: ST_TO_ADDR
// if not tmp then
17566: LD_VAR 0 2
17570: NOT
17571: IFFALSE 17575
// exit ;
17573: GO 17604
// for i in tmp do
17575: LD_ADDR_VAR 0 1
17579: PUSH
17580: LD_VAR 0 2
17584: PUSH
17585: FOR_IN
17586: IFFALSE 17602
// SetFuel ( i , 0 ) ;
17588: LD_VAR 0 1
17592: PPUSH
17593: LD_INT 0
17595: PPUSH
17596: CALL_OW 240
17600: GO 17585
17602: POP
17603: POP
// end ;
17604: PPOPN 2
17606: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
17607: LD_EXP 29
17611: PUSH
17612: LD_EXP 65
17616: AND
17617: IFFALSE 17683
17619: GO 17621
17621: DISABLE
17622: LD_INT 0
17624: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
17625: LD_ADDR_VAR 0 1
17629: PUSH
17630: LD_INT 22
17632: PUSH
17633: LD_OWVAR 2
17637: PUSH
17638: EMPTY
17639: LIST
17640: LIST
17641: PUSH
17642: LD_INT 30
17644: PUSH
17645: LD_INT 29
17647: PUSH
17648: EMPTY
17649: LIST
17650: LIST
17651: PUSH
17652: EMPTY
17653: LIST
17654: LIST
17655: PPUSH
17656: CALL_OW 69
17660: ST_TO_ADDR
// if not tmp then
17661: LD_VAR 0 1
17665: NOT
17666: IFFALSE 17670
// exit ;
17668: GO 17683
// DestroyUnit ( tmp [ 1 ] ) ;
17670: LD_VAR 0 1
17674: PUSH
17675: LD_INT 1
17677: ARRAY
17678: PPUSH
17679: CALL_OW 65
// end ;
17683: PPOPN 1
17685: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
17686: LD_EXP 29
17690: PUSH
17691: LD_EXP 67
17695: AND
17696: IFFALSE 17825
17698: GO 17700
17700: DISABLE
17701: LD_INT 0
17703: PPUSH
// begin uc_side := 0 ;
17704: LD_ADDR_OWVAR 20
17708: PUSH
17709: LD_INT 0
17711: ST_TO_ADDR
// uc_nation := nation_arabian ;
17712: LD_ADDR_OWVAR 21
17716: PUSH
17717: LD_INT 2
17719: ST_TO_ADDR
// hc_gallery :=  ;
17720: LD_ADDR_OWVAR 33
17724: PUSH
17725: LD_STRING 
17727: ST_TO_ADDR
// hc_name :=  ;
17728: LD_ADDR_OWVAR 26
17732: PUSH
17733: LD_STRING 
17735: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
17736: LD_INT 1
17738: PPUSH
17739: LD_INT 11
17741: PPUSH
17742: LD_INT 10
17744: PPUSH
17745: CALL_OW 380
// un := CreateHuman ;
17749: LD_ADDR_VAR 0 1
17753: PUSH
17754: CALL_OW 44
17758: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
17759: LD_VAR 0 1
17763: PPUSH
17764: LD_INT 1
17766: PPUSH
17767: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
17771: LD_INT 35
17773: PPUSH
17774: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
17778: LD_VAR 0 1
17782: PPUSH
17783: LD_INT 22
17785: PUSH
17786: LD_OWVAR 2
17790: PUSH
17791: EMPTY
17792: LIST
17793: LIST
17794: PPUSH
17795: CALL_OW 69
17799: PPUSH
17800: LD_VAR 0 1
17804: PPUSH
17805: CALL_OW 74
17809: PPUSH
17810: CALL_OW 115
// until IsDead ( un ) ;
17814: LD_VAR 0 1
17818: PPUSH
17819: CALL_OW 301
17823: IFFALSE 17771
// end ;
17825: PPOPN 1
17827: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
17828: LD_EXP 29
17832: PUSH
17833: LD_EXP 69
17837: AND
17838: IFFALSE 17850
17840: GO 17842
17842: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
17843: LD_STRING earthquake(getX(game), 0, 32)
17845: PPUSH
17846: CALL_OW 559
17850: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
17851: LD_EXP 29
17855: PUSH
17856: LD_EXP 70
17860: AND
17861: IFFALSE 17952
17863: GO 17865
17865: DISABLE
17866: LD_INT 0
17868: PPUSH
// begin enable ;
17869: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
17870: LD_ADDR_VAR 0 1
17874: PUSH
17875: LD_INT 22
17877: PUSH
17878: LD_OWVAR 2
17882: PUSH
17883: EMPTY
17884: LIST
17885: LIST
17886: PUSH
17887: LD_INT 21
17889: PUSH
17890: LD_INT 2
17892: PUSH
17893: EMPTY
17894: LIST
17895: LIST
17896: PUSH
17897: LD_INT 33
17899: PUSH
17900: LD_INT 3
17902: PUSH
17903: EMPTY
17904: LIST
17905: LIST
17906: PUSH
17907: EMPTY
17908: LIST
17909: LIST
17910: LIST
17911: PPUSH
17912: CALL_OW 69
17916: ST_TO_ADDR
// if not tmp then
17917: LD_VAR 0 1
17921: NOT
17922: IFFALSE 17926
// exit ;
17924: GO 17952
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
17926: LD_VAR 0 1
17930: PUSH
17931: LD_INT 1
17933: PPUSH
17934: LD_VAR 0 1
17938: PPUSH
17939: CALL_OW 12
17943: ARRAY
17944: PPUSH
17945: LD_INT 1
17947: PPUSH
17948: CALL_OW 234
// end ;
17952: PPOPN 1
17954: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
17955: LD_EXP 29
17959: PUSH
17960: LD_EXP 71
17964: AND
17965: IFFALSE 18106
17967: GO 17969
17969: DISABLE
17970: LD_INT 0
17972: PPUSH
17973: PPUSH
17974: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17975: LD_ADDR_VAR 0 3
17979: PUSH
17980: LD_INT 22
17982: PUSH
17983: LD_OWVAR 2
17987: PUSH
17988: EMPTY
17989: LIST
17990: LIST
17991: PUSH
17992: LD_INT 25
17994: PUSH
17995: LD_INT 1
17997: PUSH
17998: EMPTY
17999: LIST
18000: LIST
18001: PUSH
18002: EMPTY
18003: LIST
18004: LIST
18005: PPUSH
18006: CALL_OW 69
18010: ST_TO_ADDR
// if not tmp then
18011: LD_VAR 0 3
18015: NOT
18016: IFFALSE 18020
// exit ;
18018: GO 18106
// un := tmp [ rand ( 1 , tmp ) ] ;
18020: LD_ADDR_VAR 0 2
18024: PUSH
18025: LD_VAR 0 3
18029: PUSH
18030: LD_INT 1
18032: PPUSH
18033: LD_VAR 0 3
18037: PPUSH
18038: CALL_OW 12
18042: ARRAY
18043: ST_TO_ADDR
// if Crawls ( un ) then
18044: LD_VAR 0 2
18048: PPUSH
18049: CALL_OW 318
18053: IFFALSE 18064
// ComWalk ( un ) ;
18055: LD_VAR 0 2
18059: PPUSH
18060: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
18064: LD_VAR 0 2
18068: PPUSH
18069: LD_INT 9
18071: PPUSH
18072: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
18076: LD_INT 28
18078: PPUSH
18079: LD_OWVAR 2
18083: PPUSH
18084: LD_INT 2
18086: PPUSH
18087: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
18091: LD_INT 29
18093: PPUSH
18094: LD_OWVAR 2
18098: PPUSH
18099: LD_INT 2
18101: PPUSH
18102: CALL_OW 322
// end ;
18106: PPOPN 3
18108: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
18109: LD_EXP 29
18113: PUSH
18114: LD_EXP 72
18118: AND
18119: IFFALSE 18230
18121: GO 18123
18123: DISABLE
18124: LD_INT 0
18126: PPUSH
18127: PPUSH
18128: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18129: LD_ADDR_VAR 0 3
18133: PUSH
18134: LD_INT 22
18136: PUSH
18137: LD_OWVAR 2
18141: PUSH
18142: EMPTY
18143: LIST
18144: LIST
18145: PUSH
18146: LD_INT 25
18148: PUSH
18149: LD_INT 1
18151: PUSH
18152: EMPTY
18153: LIST
18154: LIST
18155: PUSH
18156: EMPTY
18157: LIST
18158: LIST
18159: PPUSH
18160: CALL_OW 69
18164: ST_TO_ADDR
// if not tmp then
18165: LD_VAR 0 3
18169: NOT
18170: IFFALSE 18174
// exit ;
18172: GO 18230
// un := tmp [ rand ( 1 , tmp ) ] ;
18174: LD_ADDR_VAR 0 2
18178: PUSH
18179: LD_VAR 0 3
18183: PUSH
18184: LD_INT 1
18186: PPUSH
18187: LD_VAR 0 3
18191: PPUSH
18192: CALL_OW 12
18196: ARRAY
18197: ST_TO_ADDR
// if Crawls ( un ) then
18198: LD_VAR 0 2
18202: PPUSH
18203: CALL_OW 318
18207: IFFALSE 18218
// ComWalk ( un ) ;
18209: LD_VAR 0 2
18213: PPUSH
18214: CALL_OW 138
// SetClass ( un , class_mortar ) ;
18218: LD_VAR 0 2
18222: PPUSH
18223: LD_INT 8
18225: PPUSH
18226: CALL_OW 336
// end ;
18230: PPOPN 3
18232: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
18233: LD_EXP 29
18237: PUSH
18238: LD_EXP 73
18242: AND
18243: IFFALSE 18387
18245: GO 18247
18247: DISABLE
18248: LD_INT 0
18250: PPUSH
18251: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
18252: LD_ADDR_VAR 0 2
18256: PUSH
18257: LD_INT 22
18259: PUSH
18260: LD_OWVAR 2
18264: PUSH
18265: EMPTY
18266: LIST
18267: LIST
18268: PUSH
18269: LD_INT 21
18271: PUSH
18272: LD_INT 2
18274: PUSH
18275: EMPTY
18276: LIST
18277: LIST
18278: PUSH
18279: LD_INT 2
18281: PUSH
18282: LD_INT 34
18284: PUSH
18285: LD_INT 12
18287: PUSH
18288: EMPTY
18289: LIST
18290: LIST
18291: PUSH
18292: LD_INT 34
18294: PUSH
18295: LD_INT 51
18297: PUSH
18298: EMPTY
18299: LIST
18300: LIST
18301: PUSH
18302: LD_INT 34
18304: PUSH
18305: LD_INT 32
18307: PUSH
18308: EMPTY
18309: LIST
18310: LIST
18311: PUSH
18312: EMPTY
18313: LIST
18314: LIST
18315: LIST
18316: LIST
18317: PUSH
18318: EMPTY
18319: LIST
18320: LIST
18321: LIST
18322: PPUSH
18323: CALL_OW 69
18327: ST_TO_ADDR
// if not tmp then
18328: LD_VAR 0 2
18332: NOT
18333: IFFALSE 18337
// exit ;
18335: GO 18387
// for i in tmp do
18337: LD_ADDR_VAR 0 1
18341: PUSH
18342: LD_VAR 0 2
18346: PUSH
18347: FOR_IN
18348: IFFALSE 18385
// if GetCargo ( i , mat_artifact ) = 0 then
18350: LD_VAR 0 1
18354: PPUSH
18355: LD_INT 4
18357: PPUSH
18358: CALL_OW 289
18362: PUSH
18363: LD_INT 0
18365: EQUAL
18366: IFFALSE 18383
// SetCargo ( i , mat_siberit , 100 ) ;
18368: LD_VAR 0 1
18372: PPUSH
18373: LD_INT 3
18375: PPUSH
18376: LD_INT 100
18378: PPUSH
18379: CALL_OW 290
18383: GO 18347
18385: POP
18386: POP
// end ;
18387: PPOPN 2
18389: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
18390: LD_EXP 29
18394: PUSH
18395: LD_EXP 74
18399: AND
18400: IFFALSE 18583
18402: GO 18404
18404: DISABLE
18405: LD_INT 0
18407: PPUSH
18408: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
18409: LD_ADDR_VAR 0 2
18413: PUSH
18414: LD_INT 22
18416: PUSH
18417: LD_OWVAR 2
18421: PUSH
18422: EMPTY
18423: LIST
18424: LIST
18425: PPUSH
18426: CALL_OW 69
18430: ST_TO_ADDR
// if not tmp then
18431: LD_VAR 0 2
18435: NOT
18436: IFFALSE 18440
// exit ;
18438: GO 18583
// for i := 1 to 2 do
18440: LD_ADDR_VAR 0 1
18444: PUSH
18445: DOUBLE
18446: LD_INT 1
18448: DEC
18449: ST_TO_ADDR
18450: LD_INT 2
18452: PUSH
18453: FOR_TO
18454: IFFALSE 18581
// begin uc_side := your_side ;
18456: LD_ADDR_OWVAR 20
18460: PUSH
18461: LD_OWVAR 2
18465: ST_TO_ADDR
// uc_nation := nation_american ;
18466: LD_ADDR_OWVAR 21
18470: PUSH
18471: LD_INT 1
18473: ST_TO_ADDR
// vc_chassis := us_morphling ;
18474: LD_ADDR_OWVAR 37
18478: PUSH
18479: LD_INT 5
18481: ST_TO_ADDR
// vc_engine := engine_siberite ;
18482: LD_ADDR_OWVAR 39
18486: PUSH
18487: LD_INT 3
18489: ST_TO_ADDR
// vc_control := control_computer ;
18490: LD_ADDR_OWVAR 38
18494: PUSH
18495: LD_INT 3
18497: ST_TO_ADDR
// vc_weapon := us_double_laser ;
18498: LD_ADDR_OWVAR 40
18502: PUSH
18503: LD_INT 10
18505: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
18506: LD_VAR 0 2
18510: PUSH
18511: LD_INT 1
18513: ARRAY
18514: PPUSH
18515: CALL_OW 310
18519: NOT
18520: IFFALSE 18567
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
18522: CALL_OW 45
18526: PPUSH
18527: LD_VAR 0 2
18531: PUSH
18532: LD_INT 1
18534: ARRAY
18535: PPUSH
18536: CALL_OW 250
18540: PPUSH
18541: LD_VAR 0 2
18545: PUSH
18546: LD_INT 1
18548: ARRAY
18549: PPUSH
18550: CALL_OW 251
18554: PPUSH
18555: LD_INT 12
18557: PPUSH
18558: LD_INT 1
18560: PPUSH
18561: CALL_OW 50
18565: GO 18579
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
18567: CALL_OW 45
18571: PPUSH
18572: LD_INT 1
18574: PPUSH
18575: CALL_OW 51
// end ;
18579: GO 18453
18581: POP
18582: POP
// end ;
18583: PPOPN 2
18585: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
18586: LD_EXP 29
18590: PUSH
18591: LD_EXP 75
18595: AND
18596: IFFALSE 18818
18598: GO 18600
18600: DISABLE
18601: LD_INT 0
18603: PPUSH
18604: PPUSH
18605: PPUSH
18606: PPUSH
18607: PPUSH
18608: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
18609: LD_ADDR_VAR 0 6
18613: PUSH
18614: LD_INT 22
18616: PUSH
18617: LD_OWVAR 2
18621: PUSH
18622: EMPTY
18623: LIST
18624: LIST
18625: PUSH
18626: LD_INT 21
18628: PUSH
18629: LD_INT 1
18631: PUSH
18632: EMPTY
18633: LIST
18634: LIST
18635: PUSH
18636: LD_INT 3
18638: PUSH
18639: LD_INT 23
18641: PUSH
18642: LD_INT 0
18644: PUSH
18645: EMPTY
18646: LIST
18647: LIST
18648: PUSH
18649: EMPTY
18650: LIST
18651: LIST
18652: PUSH
18653: EMPTY
18654: LIST
18655: LIST
18656: LIST
18657: PPUSH
18658: CALL_OW 69
18662: ST_TO_ADDR
// if not tmp then
18663: LD_VAR 0 6
18667: NOT
18668: IFFALSE 18672
// exit ;
18670: GO 18818
// s1 := rand ( 1 , 4 ) ;
18672: LD_ADDR_VAR 0 2
18676: PUSH
18677: LD_INT 1
18679: PPUSH
18680: LD_INT 4
18682: PPUSH
18683: CALL_OW 12
18687: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
18688: LD_ADDR_VAR 0 4
18692: PUSH
18693: LD_VAR 0 6
18697: PUSH
18698: LD_INT 1
18700: ARRAY
18701: PPUSH
18702: LD_VAR 0 2
18706: PPUSH
18707: CALL_OW 259
18711: ST_TO_ADDR
// if s1 = 1 then
18712: LD_VAR 0 2
18716: PUSH
18717: LD_INT 1
18719: EQUAL
18720: IFFALSE 18740
// s2 := rand ( 2 , 4 ) else
18722: LD_ADDR_VAR 0 3
18726: PUSH
18727: LD_INT 2
18729: PPUSH
18730: LD_INT 4
18732: PPUSH
18733: CALL_OW 12
18737: ST_TO_ADDR
18738: GO 18748
// s2 := 1 ;
18740: LD_ADDR_VAR 0 3
18744: PUSH
18745: LD_INT 1
18747: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
18748: LD_ADDR_VAR 0 5
18752: PUSH
18753: LD_VAR 0 6
18757: PUSH
18758: LD_INT 1
18760: ARRAY
18761: PPUSH
18762: LD_VAR 0 3
18766: PPUSH
18767: CALL_OW 259
18771: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
18772: LD_VAR 0 6
18776: PUSH
18777: LD_INT 1
18779: ARRAY
18780: PPUSH
18781: LD_VAR 0 2
18785: PPUSH
18786: LD_VAR 0 5
18790: PPUSH
18791: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
18795: LD_VAR 0 6
18799: PUSH
18800: LD_INT 1
18802: ARRAY
18803: PPUSH
18804: LD_VAR 0 3
18808: PPUSH
18809: LD_VAR 0 4
18813: PPUSH
18814: CALL_OW 237
// end ;
18818: PPOPN 6
18820: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
18821: LD_EXP 29
18825: PUSH
18826: LD_EXP 76
18830: AND
18831: IFFALSE 18910
18833: GO 18835
18835: DISABLE
18836: LD_INT 0
18838: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
18839: LD_ADDR_VAR 0 1
18843: PUSH
18844: LD_INT 22
18846: PUSH
18847: LD_OWVAR 2
18851: PUSH
18852: EMPTY
18853: LIST
18854: LIST
18855: PUSH
18856: LD_INT 30
18858: PUSH
18859: LD_INT 3
18861: PUSH
18862: EMPTY
18863: LIST
18864: LIST
18865: PUSH
18866: EMPTY
18867: LIST
18868: LIST
18869: PPUSH
18870: CALL_OW 69
18874: ST_TO_ADDR
// if not tmp then
18875: LD_VAR 0 1
18879: NOT
18880: IFFALSE 18884
// exit ;
18882: GO 18910
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
18884: LD_VAR 0 1
18888: PUSH
18889: LD_INT 1
18891: PPUSH
18892: LD_VAR 0 1
18896: PPUSH
18897: CALL_OW 12
18901: ARRAY
18902: PPUSH
18903: LD_INT 1
18905: PPUSH
18906: CALL_OW 234
// end ;
18910: PPOPN 1
18912: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
18913: LD_EXP 29
18917: PUSH
18918: LD_EXP 77
18922: AND
18923: IFFALSE 19035
18925: GO 18927
18927: DISABLE
18928: LD_INT 0
18930: PPUSH
18931: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
18932: LD_ADDR_VAR 0 2
18936: PUSH
18937: LD_INT 22
18939: PUSH
18940: LD_OWVAR 2
18944: PUSH
18945: EMPTY
18946: LIST
18947: LIST
18948: PUSH
18949: LD_INT 2
18951: PUSH
18952: LD_INT 30
18954: PUSH
18955: LD_INT 27
18957: PUSH
18958: EMPTY
18959: LIST
18960: LIST
18961: PUSH
18962: LD_INT 30
18964: PUSH
18965: LD_INT 26
18967: PUSH
18968: EMPTY
18969: LIST
18970: LIST
18971: PUSH
18972: LD_INT 30
18974: PUSH
18975: LD_INT 28
18977: PUSH
18978: EMPTY
18979: LIST
18980: LIST
18981: PUSH
18982: EMPTY
18983: LIST
18984: LIST
18985: LIST
18986: LIST
18987: PUSH
18988: EMPTY
18989: LIST
18990: LIST
18991: PPUSH
18992: CALL_OW 69
18996: ST_TO_ADDR
// if not tmp then
18997: LD_VAR 0 2
19001: NOT
19002: IFFALSE 19006
// exit ;
19004: GO 19035
// for i in tmp do
19006: LD_ADDR_VAR 0 1
19010: PUSH
19011: LD_VAR 0 2
19015: PUSH
19016: FOR_IN
19017: IFFALSE 19033
// SetLives ( i , 1 ) ;
19019: LD_VAR 0 1
19023: PPUSH
19024: LD_INT 1
19026: PPUSH
19027: CALL_OW 234
19031: GO 19016
19033: POP
19034: POP
// end ;
19035: PPOPN 2
19037: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
19038: LD_EXP 29
19042: PUSH
19043: LD_EXP 78
19047: AND
19048: IFFALSE 19335
19050: GO 19052
19052: DISABLE
19053: LD_INT 0
19055: PPUSH
19056: PPUSH
19057: PPUSH
// begin i := rand ( 1 , 7 ) ;
19058: LD_ADDR_VAR 0 1
19062: PUSH
19063: LD_INT 1
19065: PPUSH
19066: LD_INT 7
19068: PPUSH
19069: CALL_OW 12
19073: ST_TO_ADDR
// case i of 1 :
19074: LD_VAR 0 1
19078: PUSH
19079: LD_INT 1
19081: DOUBLE
19082: EQUAL
19083: IFTRUE 19087
19085: GO 19097
19087: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
19088: LD_STRING earthquake(getX(game), 0, 32)
19090: PPUSH
19091: CALL_OW 559
19095: GO 19335
19097: LD_INT 2
19099: DOUBLE
19100: EQUAL
19101: IFTRUE 19105
19103: GO 19119
19105: POP
// begin ToLua ( displayStucuk(); ) ;
19106: LD_STRING displayStucuk();
19108: PPUSH
19109: CALL_OW 559
// ResetFog ;
19113: CALL_OW 335
// end ; 3 :
19117: GO 19335
19119: LD_INT 3
19121: DOUBLE
19122: EQUAL
19123: IFTRUE 19127
19125: GO 19231
19127: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
19128: LD_ADDR_VAR 0 2
19132: PUSH
19133: LD_INT 22
19135: PUSH
19136: LD_OWVAR 2
19140: PUSH
19141: EMPTY
19142: LIST
19143: LIST
19144: PUSH
19145: LD_INT 25
19147: PUSH
19148: LD_INT 1
19150: PUSH
19151: EMPTY
19152: LIST
19153: LIST
19154: PUSH
19155: EMPTY
19156: LIST
19157: LIST
19158: PPUSH
19159: CALL_OW 69
19163: ST_TO_ADDR
// if not tmp then
19164: LD_VAR 0 2
19168: NOT
19169: IFFALSE 19173
// exit ;
19171: GO 19335
// un := tmp [ rand ( 1 , tmp ) ] ;
19173: LD_ADDR_VAR 0 3
19177: PUSH
19178: LD_VAR 0 2
19182: PUSH
19183: LD_INT 1
19185: PPUSH
19186: LD_VAR 0 2
19190: PPUSH
19191: CALL_OW 12
19195: ARRAY
19196: ST_TO_ADDR
// if Crawls ( un ) then
19197: LD_VAR 0 3
19201: PPUSH
19202: CALL_OW 318
19206: IFFALSE 19217
// ComWalk ( un ) ;
19208: LD_VAR 0 3
19212: PPUSH
19213: CALL_OW 138
// SetClass ( un , class_mortar ) ;
19217: LD_VAR 0 3
19221: PPUSH
19222: LD_INT 8
19224: PPUSH
19225: CALL_OW 336
// end ; 4 :
19229: GO 19335
19231: LD_INT 4
19233: DOUBLE
19234: EQUAL
19235: IFTRUE 19239
19237: GO 19313
19239: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
19240: LD_ADDR_VAR 0 2
19244: PUSH
19245: LD_INT 22
19247: PUSH
19248: LD_OWVAR 2
19252: PUSH
19253: EMPTY
19254: LIST
19255: LIST
19256: PUSH
19257: LD_INT 30
19259: PUSH
19260: LD_INT 29
19262: PUSH
19263: EMPTY
19264: LIST
19265: LIST
19266: PUSH
19267: EMPTY
19268: LIST
19269: LIST
19270: PPUSH
19271: CALL_OW 69
19275: ST_TO_ADDR
// if not tmp then
19276: LD_VAR 0 2
19280: NOT
19281: IFFALSE 19285
// exit ;
19283: GO 19335
// CenterNowOnUnits ( tmp [ 1 ] ) ;
19285: LD_VAR 0 2
19289: PUSH
19290: LD_INT 1
19292: ARRAY
19293: PPUSH
19294: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
19298: LD_VAR 0 2
19302: PUSH
19303: LD_INT 1
19305: ARRAY
19306: PPUSH
19307: CALL_OW 65
// end ; 5 .. 7 :
19311: GO 19335
19313: LD_INT 5
19315: DOUBLE
19316: GREATEREQUAL
19317: IFFALSE 19325
19319: LD_INT 7
19321: DOUBLE
19322: LESSEQUAL
19323: IFTRUE 19327
19325: GO 19334
19327: POP
// StreamSibBomb ; end ;
19328: CALL 15572 0 0
19332: GO 19335
19334: POP
// end ;
19335: PPOPN 3
19337: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
19338: LD_EXP 29
19342: PUSH
19343: LD_EXP 79
19347: AND
19348: IFFALSE 19504
19350: GO 19352
19352: DISABLE
19353: LD_INT 0
19355: PPUSH
19356: PPUSH
19357: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
19358: LD_ADDR_VAR 0 2
19362: PUSH
19363: LD_INT 81
19365: PUSH
19366: LD_OWVAR 2
19370: PUSH
19371: EMPTY
19372: LIST
19373: LIST
19374: PUSH
19375: LD_INT 2
19377: PUSH
19378: LD_INT 21
19380: PUSH
19381: LD_INT 1
19383: PUSH
19384: EMPTY
19385: LIST
19386: LIST
19387: PUSH
19388: LD_INT 21
19390: PUSH
19391: LD_INT 2
19393: PUSH
19394: EMPTY
19395: LIST
19396: LIST
19397: PUSH
19398: EMPTY
19399: LIST
19400: LIST
19401: LIST
19402: PUSH
19403: EMPTY
19404: LIST
19405: LIST
19406: PPUSH
19407: CALL_OW 69
19411: ST_TO_ADDR
// if not tmp then
19412: LD_VAR 0 2
19416: NOT
19417: IFFALSE 19421
// exit ;
19419: GO 19504
// p := 0 ;
19421: LD_ADDR_VAR 0 3
19425: PUSH
19426: LD_INT 0
19428: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
19429: LD_INT 35
19431: PPUSH
19432: CALL_OW 67
// p := p + 1 ;
19436: LD_ADDR_VAR 0 3
19440: PUSH
19441: LD_VAR 0 3
19445: PUSH
19446: LD_INT 1
19448: PLUS
19449: ST_TO_ADDR
// for i in tmp do
19450: LD_ADDR_VAR 0 1
19454: PUSH
19455: LD_VAR 0 2
19459: PUSH
19460: FOR_IN
19461: IFFALSE 19492
// if GetLives ( i ) < 1000 then
19463: LD_VAR 0 1
19467: PPUSH
19468: CALL_OW 256
19472: PUSH
19473: LD_INT 1000
19475: LESS
19476: IFFALSE 19490
// SetLives ( i , 1000 ) ;
19478: LD_VAR 0 1
19482: PPUSH
19483: LD_INT 1000
19485: PPUSH
19486: CALL_OW 234
19490: GO 19460
19492: POP
19493: POP
// until p > 20 ;
19494: LD_VAR 0 3
19498: PUSH
19499: LD_INT 20
19501: GREATER
19502: IFFALSE 19429
// end ;
19504: PPOPN 3
19506: END
// every 0 0$1 trigger StreamModeActive and sTime do
19507: LD_EXP 29
19511: PUSH
19512: LD_EXP 80
19516: AND
19517: IFFALSE 19552
19519: GO 19521
19521: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
19522: LD_INT 28
19524: PPUSH
19525: LD_OWVAR 2
19529: PPUSH
19530: LD_INT 2
19532: PPUSH
19533: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
19537: LD_INT 30
19539: PPUSH
19540: LD_OWVAR 2
19544: PPUSH
19545: LD_INT 2
19547: PPUSH
19548: CALL_OW 322
// end ;
19552: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
19553: LD_EXP 29
19557: PUSH
19558: LD_EXP 81
19562: AND
19563: IFFALSE 19684
19565: GO 19567
19567: DISABLE
19568: LD_INT 0
19570: PPUSH
19571: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
19572: LD_ADDR_VAR 0 2
19576: PUSH
19577: LD_INT 22
19579: PUSH
19580: LD_OWVAR 2
19584: PUSH
19585: EMPTY
19586: LIST
19587: LIST
19588: PUSH
19589: LD_INT 21
19591: PUSH
19592: LD_INT 1
19594: PUSH
19595: EMPTY
19596: LIST
19597: LIST
19598: PUSH
19599: LD_INT 3
19601: PUSH
19602: LD_INT 23
19604: PUSH
19605: LD_INT 0
19607: PUSH
19608: EMPTY
19609: LIST
19610: LIST
19611: PUSH
19612: EMPTY
19613: LIST
19614: LIST
19615: PUSH
19616: EMPTY
19617: LIST
19618: LIST
19619: LIST
19620: PPUSH
19621: CALL_OW 69
19625: ST_TO_ADDR
// if not tmp then
19626: LD_VAR 0 2
19630: NOT
19631: IFFALSE 19635
// exit ;
19633: GO 19684
// for i in tmp do
19635: LD_ADDR_VAR 0 1
19639: PUSH
19640: LD_VAR 0 2
19644: PUSH
19645: FOR_IN
19646: IFFALSE 19682
// begin if Crawls ( i ) then
19648: LD_VAR 0 1
19652: PPUSH
19653: CALL_OW 318
19657: IFFALSE 19668
// ComWalk ( i ) ;
19659: LD_VAR 0 1
19663: PPUSH
19664: CALL_OW 138
// SetClass ( i , 2 ) ;
19668: LD_VAR 0 1
19672: PPUSH
19673: LD_INT 2
19675: PPUSH
19676: CALL_OW 336
// end ;
19680: GO 19645
19682: POP
19683: POP
// end ;
19684: PPOPN 2
19686: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
19687: LD_EXP 29
19691: PUSH
19692: LD_EXP 82
19696: AND
19697: IFFALSE 19985
19699: GO 19701
19701: DISABLE
19702: LD_INT 0
19704: PPUSH
19705: PPUSH
19706: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
19707: LD_OWVAR 2
19711: PPUSH
19712: LD_INT 9
19714: PPUSH
19715: LD_INT 1
19717: PPUSH
19718: LD_INT 1
19720: PPUSH
19721: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
19725: LD_INT 9
19727: PPUSH
19728: LD_OWVAR 2
19732: PPUSH
19733: CALL_OW 343
// uc_side := 9 ;
19737: LD_ADDR_OWVAR 20
19741: PUSH
19742: LD_INT 9
19744: ST_TO_ADDR
// uc_nation := 2 ;
19745: LD_ADDR_OWVAR 21
19749: PUSH
19750: LD_INT 2
19752: ST_TO_ADDR
// hc_name := Dark Warrior ;
19753: LD_ADDR_OWVAR 26
19757: PUSH
19758: LD_STRING Dark Warrior
19760: ST_TO_ADDR
// hc_gallery :=  ;
19761: LD_ADDR_OWVAR 33
19765: PUSH
19766: LD_STRING 
19768: ST_TO_ADDR
// hc_noskilllimit := true ;
19769: LD_ADDR_OWVAR 76
19773: PUSH
19774: LD_INT 1
19776: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
19777: LD_ADDR_OWVAR 31
19781: PUSH
19782: LD_INT 30
19784: PUSH
19785: LD_INT 30
19787: PUSH
19788: LD_INT 30
19790: PUSH
19791: LD_INT 30
19793: PUSH
19794: EMPTY
19795: LIST
19796: LIST
19797: LIST
19798: LIST
19799: ST_TO_ADDR
// un := CreateHuman ;
19800: LD_ADDR_VAR 0 3
19804: PUSH
19805: CALL_OW 44
19809: ST_TO_ADDR
// hc_noskilllimit := false ;
19810: LD_ADDR_OWVAR 76
19814: PUSH
19815: LD_INT 0
19817: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
19818: LD_VAR 0 3
19822: PPUSH
19823: LD_INT 1
19825: PPUSH
19826: CALL_OW 51
// ToLua ( playRanger() ) ;
19830: LD_STRING playRanger()
19832: PPUSH
19833: CALL_OW 559
// p := 0 ;
19837: LD_ADDR_VAR 0 2
19841: PUSH
19842: LD_INT 0
19844: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
19845: LD_INT 35
19847: PPUSH
19848: CALL_OW 67
// p := p + 1 ;
19852: LD_ADDR_VAR 0 2
19856: PUSH
19857: LD_VAR 0 2
19861: PUSH
19862: LD_INT 1
19864: PLUS
19865: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
19866: LD_VAR 0 3
19870: PPUSH
19871: CALL_OW 256
19875: PUSH
19876: LD_INT 1000
19878: LESS
19879: IFFALSE 19893
// SetLives ( un , 1000 ) ;
19881: LD_VAR 0 3
19885: PPUSH
19886: LD_INT 1000
19888: PPUSH
19889: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
19893: LD_VAR 0 3
19897: PPUSH
19898: LD_INT 81
19900: PUSH
19901: LD_OWVAR 2
19905: PUSH
19906: EMPTY
19907: LIST
19908: LIST
19909: PUSH
19910: LD_INT 91
19912: PUSH
19913: LD_VAR 0 3
19917: PUSH
19918: LD_INT 30
19920: PUSH
19921: EMPTY
19922: LIST
19923: LIST
19924: LIST
19925: PUSH
19926: EMPTY
19927: LIST
19928: LIST
19929: PPUSH
19930: CALL_OW 69
19934: PPUSH
19935: LD_VAR 0 3
19939: PPUSH
19940: CALL_OW 74
19944: PPUSH
19945: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
19949: LD_VAR 0 2
19953: PUSH
19954: LD_INT 80
19956: GREATER
19957: PUSH
19958: LD_VAR 0 3
19962: PPUSH
19963: CALL_OW 301
19967: OR
19968: IFFALSE 19845
// if un then
19970: LD_VAR 0 3
19974: IFFALSE 19985
// RemoveUnit ( un ) ;
19976: LD_VAR 0 3
19980: PPUSH
19981: CALL_OW 64
// end ;
19985: PPOPN 3
19987: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
19988: LD_EXP 83
19992: IFFALSE 20108
19994: GO 19996
19996: DISABLE
19997: LD_INT 0
19999: PPUSH
20000: PPUSH
20001: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
20002: LD_ADDR_VAR 0 2
20006: PUSH
20007: LD_INT 81
20009: PUSH
20010: LD_OWVAR 2
20014: PUSH
20015: EMPTY
20016: LIST
20017: LIST
20018: PUSH
20019: LD_INT 21
20021: PUSH
20022: LD_INT 1
20024: PUSH
20025: EMPTY
20026: LIST
20027: LIST
20028: PUSH
20029: EMPTY
20030: LIST
20031: LIST
20032: PPUSH
20033: CALL_OW 69
20037: ST_TO_ADDR
// ToLua ( playComputer() ) ;
20038: LD_STRING playComputer()
20040: PPUSH
20041: CALL_OW 559
// if not tmp then
20045: LD_VAR 0 2
20049: NOT
20050: IFFALSE 20054
// exit ;
20052: GO 20108
// for i in tmp do
20054: LD_ADDR_VAR 0 1
20058: PUSH
20059: LD_VAR 0 2
20063: PUSH
20064: FOR_IN
20065: IFFALSE 20106
// for j := 1 to 4 do
20067: LD_ADDR_VAR 0 3
20071: PUSH
20072: DOUBLE
20073: LD_INT 1
20075: DEC
20076: ST_TO_ADDR
20077: LD_INT 4
20079: PUSH
20080: FOR_TO
20081: IFFALSE 20102
// SetSkill ( i , j , 10 ) ;
20083: LD_VAR 0 1
20087: PPUSH
20088: LD_VAR 0 3
20092: PPUSH
20093: LD_INT 10
20095: PPUSH
20096: CALL_OW 237
20100: GO 20080
20102: POP
20103: POP
20104: GO 20064
20106: POP
20107: POP
// end ;
20108: PPOPN 3
20110: END
// every 0 0$1 trigger s30 do var i , tmp ;
20111: LD_EXP 84
20115: IFFALSE 20184
20117: GO 20119
20119: DISABLE
20120: LD_INT 0
20122: PPUSH
20123: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
20124: LD_ADDR_VAR 0 2
20128: PUSH
20129: LD_INT 22
20131: PUSH
20132: LD_OWVAR 2
20136: PUSH
20137: EMPTY
20138: LIST
20139: LIST
20140: PPUSH
20141: CALL_OW 69
20145: ST_TO_ADDR
// if not tmp then
20146: LD_VAR 0 2
20150: NOT
20151: IFFALSE 20155
// exit ;
20153: GO 20184
// for i in tmp do
20155: LD_ADDR_VAR 0 1
20159: PUSH
20160: LD_VAR 0 2
20164: PUSH
20165: FOR_IN
20166: IFFALSE 20182
// SetLives ( i , 300 ) ;
20168: LD_VAR 0 1
20172: PPUSH
20173: LD_INT 300
20175: PPUSH
20176: CALL_OW 234
20180: GO 20165
20182: POP
20183: POP
// end ;
20184: PPOPN 2
20186: END
// every 0 0$1 trigger s60 do var i , tmp ;
20187: LD_EXP 85
20191: IFFALSE 20260
20193: GO 20195
20195: DISABLE
20196: LD_INT 0
20198: PPUSH
20199: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
20200: LD_ADDR_VAR 0 2
20204: PUSH
20205: LD_INT 22
20207: PUSH
20208: LD_OWVAR 2
20212: PUSH
20213: EMPTY
20214: LIST
20215: LIST
20216: PPUSH
20217: CALL_OW 69
20221: ST_TO_ADDR
// if not tmp then
20222: LD_VAR 0 2
20226: NOT
20227: IFFALSE 20231
// exit ;
20229: GO 20260
// for i in tmp do
20231: LD_ADDR_VAR 0 1
20235: PUSH
20236: LD_VAR 0 2
20240: PUSH
20241: FOR_IN
20242: IFFALSE 20258
// SetLives ( i , 600 ) ;
20244: LD_VAR 0 1
20248: PPUSH
20249: LD_INT 600
20251: PPUSH
20252: CALL_OW 234
20256: GO 20241
20258: POP
20259: POP
// end ;
20260: PPOPN 2
20262: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
20263: LD_INT 0
20265: PPUSH
// case cmd of 301 :
20266: LD_VAR 0 1
20270: PUSH
20271: LD_INT 301
20273: DOUBLE
20274: EQUAL
20275: IFTRUE 20279
20277: GO 20311
20279: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
20280: LD_VAR 0 6
20284: PPUSH
20285: LD_VAR 0 7
20289: PPUSH
20290: LD_VAR 0 8
20294: PPUSH
20295: LD_VAR 0 4
20299: PPUSH
20300: LD_VAR 0 5
20304: PPUSH
20305: CALL 21512 0 5
20309: GO 20432
20311: LD_INT 302
20313: DOUBLE
20314: EQUAL
20315: IFTRUE 20319
20317: GO 20356
20319: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
20320: LD_VAR 0 6
20324: PPUSH
20325: LD_VAR 0 7
20329: PPUSH
20330: LD_VAR 0 8
20334: PPUSH
20335: LD_VAR 0 9
20339: PPUSH
20340: LD_VAR 0 4
20344: PPUSH
20345: LD_VAR 0 5
20349: PPUSH
20350: CALL 21603 0 6
20354: GO 20432
20356: LD_INT 303
20358: DOUBLE
20359: EQUAL
20360: IFTRUE 20364
20362: GO 20401
20364: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
20365: LD_VAR 0 6
20369: PPUSH
20370: LD_VAR 0 7
20374: PPUSH
20375: LD_VAR 0 8
20379: PPUSH
20380: LD_VAR 0 9
20384: PPUSH
20385: LD_VAR 0 4
20389: PPUSH
20390: LD_VAR 0 5
20394: PPUSH
20395: CALL 20437 0 6
20399: GO 20432
20401: LD_INT 304
20403: DOUBLE
20404: EQUAL
20405: IFTRUE 20409
20407: GO 20431
20409: POP
// hHackTeleport ( unit , x , y ) ; end ;
20410: LD_VAR 0 2
20414: PPUSH
20415: LD_VAR 0 4
20419: PPUSH
20420: LD_VAR 0 5
20424: PPUSH
20425: CALL 22196 0 3
20429: GO 20432
20431: POP
// end ;
20432: LD_VAR 0 12
20436: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
20437: LD_INT 0
20439: PPUSH
20440: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
20441: LD_VAR 0 1
20445: PUSH
20446: LD_INT 1
20448: LESS
20449: PUSH
20450: LD_VAR 0 1
20454: PUSH
20455: LD_INT 3
20457: GREATER
20458: OR
20459: PUSH
20460: LD_VAR 0 5
20464: PPUSH
20465: LD_VAR 0 6
20469: PPUSH
20470: CALL_OW 428
20474: OR
20475: IFFALSE 20479
// exit ;
20477: GO 21199
// uc_side := your_side ;
20479: LD_ADDR_OWVAR 20
20483: PUSH
20484: LD_OWVAR 2
20488: ST_TO_ADDR
// uc_nation := nation ;
20489: LD_ADDR_OWVAR 21
20493: PUSH
20494: LD_VAR 0 1
20498: ST_TO_ADDR
// bc_level = 1 ;
20499: LD_ADDR_OWVAR 43
20503: PUSH
20504: LD_INT 1
20506: ST_TO_ADDR
// case btype of 1 :
20507: LD_VAR 0 2
20511: PUSH
20512: LD_INT 1
20514: DOUBLE
20515: EQUAL
20516: IFTRUE 20520
20518: GO 20531
20520: POP
// bc_type := b_depot ; 2 :
20521: LD_ADDR_OWVAR 42
20525: PUSH
20526: LD_INT 0
20528: ST_TO_ADDR
20529: GO 21143
20531: LD_INT 2
20533: DOUBLE
20534: EQUAL
20535: IFTRUE 20539
20537: GO 20550
20539: POP
// bc_type := b_warehouse ; 3 :
20540: LD_ADDR_OWVAR 42
20544: PUSH
20545: LD_INT 1
20547: ST_TO_ADDR
20548: GO 21143
20550: LD_INT 3
20552: DOUBLE
20553: EQUAL
20554: IFTRUE 20558
20556: GO 20569
20558: POP
// bc_type := b_lab ; 4 .. 9 :
20559: LD_ADDR_OWVAR 42
20563: PUSH
20564: LD_INT 6
20566: ST_TO_ADDR
20567: GO 21143
20569: LD_INT 4
20571: DOUBLE
20572: GREATEREQUAL
20573: IFFALSE 20581
20575: LD_INT 9
20577: DOUBLE
20578: LESSEQUAL
20579: IFTRUE 20583
20581: GO 20635
20583: POP
// begin bc_type := b_lab_half ;
20584: LD_ADDR_OWVAR 42
20588: PUSH
20589: LD_INT 7
20591: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
20592: LD_ADDR_OWVAR 44
20596: PUSH
20597: LD_INT 10
20599: PUSH
20600: LD_INT 11
20602: PUSH
20603: LD_INT 12
20605: PUSH
20606: LD_INT 15
20608: PUSH
20609: LD_INT 14
20611: PUSH
20612: LD_INT 13
20614: PUSH
20615: EMPTY
20616: LIST
20617: LIST
20618: LIST
20619: LIST
20620: LIST
20621: LIST
20622: PUSH
20623: LD_VAR 0 2
20627: PUSH
20628: LD_INT 3
20630: MINUS
20631: ARRAY
20632: ST_TO_ADDR
// end ; 10 .. 13 :
20633: GO 21143
20635: LD_INT 10
20637: DOUBLE
20638: GREATEREQUAL
20639: IFFALSE 20647
20641: LD_INT 13
20643: DOUBLE
20644: LESSEQUAL
20645: IFTRUE 20649
20647: GO 20726
20649: POP
// begin bc_type := b_lab_full ;
20650: LD_ADDR_OWVAR 42
20654: PUSH
20655: LD_INT 8
20657: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
20658: LD_ADDR_OWVAR 44
20662: PUSH
20663: LD_INT 10
20665: PUSH
20666: LD_INT 12
20668: PUSH
20669: LD_INT 14
20671: PUSH
20672: LD_INT 13
20674: PUSH
20675: EMPTY
20676: LIST
20677: LIST
20678: LIST
20679: LIST
20680: PUSH
20681: LD_VAR 0 2
20685: PUSH
20686: LD_INT 9
20688: MINUS
20689: ARRAY
20690: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
20691: LD_ADDR_OWVAR 45
20695: PUSH
20696: LD_INT 11
20698: PUSH
20699: LD_INT 15
20701: PUSH
20702: LD_INT 12
20704: PUSH
20705: LD_INT 15
20707: PUSH
20708: EMPTY
20709: LIST
20710: LIST
20711: LIST
20712: LIST
20713: PUSH
20714: LD_VAR 0 2
20718: PUSH
20719: LD_INT 9
20721: MINUS
20722: ARRAY
20723: ST_TO_ADDR
// end ; 14 :
20724: GO 21143
20726: LD_INT 14
20728: DOUBLE
20729: EQUAL
20730: IFTRUE 20734
20732: GO 20745
20734: POP
// bc_type := b_workshop ; 15 :
20735: LD_ADDR_OWVAR 42
20739: PUSH
20740: LD_INT 2
20742: ST_TO_ADDR
20743: GO 21143
20745: LD_INT 15
20747: DOUBLE
20748: EQUAL
20749: IFTRUE 20753
20751: GO 20764
20753: POP
// bc_type := b_factory ; 16 :
20754: LD_ADDR_OWVAR 42
20758: PUSH
20759: LD_INT 3
20761: ST_TO_ADDR
20762: GO 21143
20764: LD_INT 16
20766: DOUBLE
20767: EQUAL
20768: IFTRUE 20772
20770: GO 20783
20772: POP
// bc_type := b_ext_gun ; 17 :
20773: LD_ADDR_OWVAR 42
20777: PUSH
20778: LD_INT 17
20780: ST_TO_ADDR
20781: GO 21143
20783: LD_INT 17
20785: DOUBLE
20786: EQUAL
20787: IFTRUE 20791
20789: GO 20819
20791: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
20792: LD_ADDR_OWVAR 42
20796: PUSH
20797: LD_INT 19
20799: PUSH
20800: LD_INT 23
20802: PUSH
20803: LD_INT 19
20805: PUSH
20806: EMPTY
20807: LIST
20808: LIST
20809: LIST
20810: PUSH
20811: LD_VAR 0 1
20815: ARRAY
20816: ST_TO_ADDR
20817: GO 21143
20819: LD_INT 18
20821: DOUBLE
20822: EQUAL
20823: IFTRUE 20827
20825: GO 20838
20827: POP
// bc_type := b_ext_radar ; 19 :
20828: LD_ADDR_OWVAR 42
20832: PUSH
20833: LD_INT 20
20835: ST_TO_ADDR
20836: GO 21143
20838: LD_INT 19
20840: DOUBLE
20841: EQUAL
20842: IFTRUE 20846
20844: GO 20857
20846: POP
// bc_type := b_ext_radio ; 20 :
20847: LD_ADDR_OWVAR 42
20851: PUSH
20852: LD_INT 22
20854: ST_TO_ADDR
20855: GO 21143
20857: LD_INT 20
20859: DOUBLE
20860: EQUAL
20861: IFTRUE 20865
20863: GO 20876
20865: POP
// bc_type := b_ext_siberium ; 21 :
20866: LD_ADDR_OWVAR 42
20870: PUSH
20871: LD_INT 21
20873: ST_TO_ADDR
20874: GO 21143
20876: LD_INT 21
20878: DOUBLE
20879: EQUAL
20880: IFTRUE 20884
20882: GO 20895
20884: POP
// bc_type := b_ext_computer ; 22 :
20885: LD_ADDR_OWVAR 42
20889: PUSH
20890: LD_INT 24
20892: ST_TO_ADDR
20893: GO 21143
20895: LD_INT 22
20897: DOUBLE
20898: EQUAL
20899: IFTRUE 20903
20901: GO 20914
20903: POP
// bc_type := b_ext_track ; 23 :
20904: LD_ADDR_OWVAR 42
20908: PUSH
20909: LD_INT 16
20911: ST_TO_ADDR
20912: GO 21143
20914: LD_INT 23
20916: DOUBLE
20917: EQUAL
20918: IFTRUE 20922
20920: GO 20933
20922: POP
// bc_type := b_ext_laser ; 24 :
20923: LD_ADDR_OWVAR 42
20927: PUSH
20928: LD_INT 25
20930: ST_TO_ADDR
20931: GO 21143
20933: LD_INT 24
20935: DOUBLE
20936: EQUAL
20937: IFTRUE 20941
20939: GO 20952
20941: POP
// bc_type := b_control_tower ; 25 :
20942: LD_ADDR_OWVAR 42
20946: PUSH
20947: LD_INT 36
20949: ST_TO_ADDR
20950: GO 21143
20952: LD_INT 25
20954: DOUBLE
20955: EQUAL
20956: IFTRUE 20960
20958: GO 20971
20960: POP
// bc_type := b_breastwork ; 26 :
20961: LD_ADDR_OWVAR 42
20965: PUSH
20966: LD_INT 31
20968: ST_TO_ADDR
20969: GO 21143
20971: LD_INT 26
20973: DOUBLE
20974: EQUAL
20975: IFTRUE 20979
20977: GO 20990
20979: POP
// bc_type := b_bunker ; 27 :
20980: LD_ADDR_OWVAR 42
20984: PUSH
20985: LD_INT 32
20987: ST_TO_ADDR
20988: GO 21143
20990: LD_INT 27
20992: DOUBLE
20993: EQUAL
20994: IFTRUE 20998
20996: GO 21009
20998: POP
// bc_type := b_turret ; 28 :
20999: LD_ADDR_OWVAR 42
21003: PUSH
21004: LD_INT 33
21006: ST_TO_ADDR
21007: GO 21143
21009: LD_INT 28
21011: DOUBLE
21012: EQUAL
21013: IFTRUE 21017
21015: GO 21028
21017: POP
// bc_type := b_armoury ; 29 :
21018: LD_ADDR_OWVAR 42
21022: PUSH
21023: LD_INT 4
21025: ST_TO_ADDR
21026: GO 21143
21028: LD_INT 29
21030: DOUBLE
21031: EQUAL
21032: IFTRUE 21036
21034: GO 21047
21036: POP
// bc_type := b_barracks ; 30 :
21037: LD_ADDR_OWVAR 42
21041: PUSH
21042: LD_INT 5
21044: ST_TO_ADDR
21045: GO 21143
21047: LD_INT 30
21049: DOUBLE
21050: EQUAL
21051: IFTRUE 21055
21053: GO 21066
21055: POP
// bc_type := b_solar_power ; 31 :
21056: LD_ADDR_OWVAR 42
21060: PUSH
21061: LD_INT 27
21063: ST_TO_ADDR
21064: GO 21143
21066: LD_INT 31
21068: DOUBLE
21069: EQUAL
21070: IFTRUE 21074
21072: GO 21085
21074: POP
// bc_type := b_oil_power ; 32 :
21075: LD_ADDR_OWVAR 42
21079: PUSH
21080: LD_INT 26
21082: ST_TO_ADDR
21083: GO 21143
21085: LD_INT 32
21087: DOUBLE
21088: EQUAL
21089: IFTRUE 21093
21091: GO 21104
21093: POP
// bc_type := b_siberite_power ; 33 :
21094: LD_ADDR_OWVAR 42
21098: PUSH
21099: LD_INT 28
21101: ST_TO_ADDR
21102: GO 21143
21104: LD_INT 33
21106: DOUBLE
21107: EQUAL
21108: IFTRUE 21112
21110: GO 21123
21112: POP
// bc_type := b_oil_mine ; 34 :
21113: LD_ADDR_OWVAR 42
21117: PUSH
21118: LD_INT 29
21120: ST_TO_ADDR
21121: GO 21143
21123: LD_INT 34
21125: DOUBLE
21126: EQUAL
21127: IFTRUE 21131
21129: GO 21142
21131: POP
// bc_type := b_siberite_mine ; end ;
21132: LD_ADDR_OWVAR 42
21136: PUSH
21137: LD_INT 30
21139: ST_TO_ADDR
21140: GO 21143
21142: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
21143: LD_ADDR_VAR 0 8
21147: PUSH
21148: LD_VAR 0 5
21152: PPUSH
21153: LD_VAR 0 6
21157: PPUSH
21158: LD_VAR 0 3
21162: PPUSH
21163: CALL_OW 47
21167: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
21168: LD_OWVAR 42
21172: PUSH
21173: LD_INT 32
21175: PUSH
21176: LD_INT 33
21178: PUSH
21179: EMPTY
21180: LIST
21181: LIST
21182: IN
21183: IFFALSE 21199
// PlaceWeaponTurret ( b , weapon ) ;
21185: LD_VAR 0 8
21189: PPUSH
21190: LD_VAR 0 4
21194: PPUSH
21195: CALL_OW 431
// end ;
21199: LD_VAR 0 7
21203: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
21204: LD_INT 0
21206: PPUSH
21207: PPUSH
21208: PPUSH
21209: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
21210: LD_ADDR_VAR 0 4
21214: PUSH
21215: LD_INT 22
21217: PUSH
21218: LD_OWVAR 2
21222: PUSH
21223: EMPTY
21224: LIST
21225: LIST
21226: PUSH
21227: LD_INT 2
21229: PUSH
21230: LD_INT 30
21232: PUSH
21233: LD_INT 0
21235: PUSH
21236: EMPTY
21237: LIST
21238: LIST
21239: PUSH
21240: LD_INT 30
21242: PUSH
21243: LD_INT 1
21245: PUSH
21246: EMPTY
21247: LIST
21248: LIST
21249: PUSH
21250: EMPTY
21251: LIST
21252: LIST
21253: LIST
21254: PUSH
21255: EMPTY
21256: LIST
21257: LIST
21258: PPUSH
21259: CALL_OW 69
21263: ST_TO_ADDR
// if not tmp then
21264: LD_VAR 0 4
21268: NOT
21269: IFFALSE 21273
// exit ;
21271: GO 21332
// for i in tmp do
21273: LD_ADDR_VAR 0 2
21277: PUSH
21278: LD_VAR 0 4
21282: PUSH
21283: FOR_IN
21284: IFFALSE 21330
// for j = 1 to 3 do
21286: LD_ADDR_VAR 0 3
21290: PUSH
21291: DOUBLE
21292: LD_INT 1
21294: DEC
21295: ST_TO_ADDR
21296: LD_INT 3
21298: PUSH
21299: FOR_TO
21300: IFFALSE 21326
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
21302: LD_VAR 0 2
21306: PPUSH
21307: CALL_OW 274
21311: PPUSH
21312: LD_VAR 0 3
21316: PPUSH
21317: LD_INT 99999
21319: PPUSH
21320: CALL_OW 277
21324: GO 21299
21326: POP
21327: POP
21328: GO 21283
21330: POP
21331: POP
// end ;
21332: LD_VAR 0 1
21336: RET
// export function hHackSetLevel10 ; var i , j ; begin
21337: LD_INT 0
21339: PPUSH
21340: PPUSH
21341: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
21342: LD_ADDR_VAR 0 2
21346: PUSH
21347: LD_INT 21
21349: PUSH
21350: LD_INT 1
21352: PUSH
21353: EMPTY
21354: LIST
21355: LIST
21356: PPUSH
21357: CALL_OW 69
21361: PUSH
21362: FOR_IN
21363: IFFALSE 21415
// if IsSelected ( i ) then
21365: LD_VAR 0 2
21369: PPUSH
21370: CALL_OW 306
21374: IFFALSE 21413
// begin for j := 1 to 4 do
21376: LD_ADDR_VAR 0 3
21380: PUSH
21381: DOUBLE
21382: LD_INT 1
21384: DEC
21385: ST_TO_ADDR
21386: LD_INT 4
21388: PUSH
21389: FOR_TO
21390: IFFALSE 21411
// SetSkill ( i , j , 10 ) ;
21392: LD_VAR 0 2
21396: PPUSH
21397: LD_VAR 0 3
21401: PPUSH
21402: LD_INT 10
21404: PPUSH
21405: CALL_OW 237
21409: GO 21389
21411: POP
21412: POP
// end ;
21413: GO 21362
21415: POP
21416: POP
// end ;
21417: LD_VAR 0 1
21421: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
21422: LD_INT 0
21424: PPUSH
21425: PPUSH
21426: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
21427: LD_ADDR_VAR 0 2
21431: PUSH
21432: LD_INT 22
21434: PUSH
21435: LD_OWVAR 2
21439: PUSH
21440: EMPTY
21441: LIST
21442: LIST
21443: PUSH
21444: LD_INT 21
21446: PUSH
21447: LD_INT 1
21449: PUSH
21450: EMPTY
21451: LIST
21452: LIST
21453: PUSH
21454: EMPTY
21455: LIST
21456: LIST
21457: PPUSH
21458: CALL_OW 69
21462: PUSH
21463: FOR_IN
21464: IFFALSE 21505
// begin for j := 1 to 4 do
21466: LD_ADDR_VAR 0 3
21470: PUSH
21471: DOUBLE
21472: LD_INT 1
21474: DEC
21475: ST_TO_ADDR
21476: LD_INT 4
21478: PUSH
21479: FOR_TO
21480: IFFALSE 21501
// SetSkill ( i , j , 10 ) ;
21482: LD_VAR 0 2
21486: PPUSH
21487: LD_VAR 0 3
21491: PPUSH
21492: LD_INT 10
21494: PPUSH
21495: CALL_OW 237
21499: GO 21479
21501: POP
21502: POP
// end ;
21503: GO 21463
21505: POP
21506: POP
// end ;
21507: LD_VAR 0 1
21511: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
21512: LD_INT 0
21514: PPUSH
// uc_side := your_side ;
21515: LD_ADDR_OWVAR 20
21519: PUSH
21520: LD_OWVAR 2
21524: ST_TO_ADDR
// uc_nation := nation ;
21525: LD_ADDR_OWVAR 21
21529: PUSH
21530: LD_VAR 0 1
21534: ST_TO_ADDR
// InitHc ;
21535: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
21539: LD_INT 0
21541: PPUSH
21542: LD_VAR 0 2
21546: PPUSH
21547: LD_VAR 0 3
21551: PPUSH
21552: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
21556: LD_VAR 0 4
21560: PPUSH
21561: LD_VAR 0 5
21565: PPUSH
21566: CALL_OW 428
21570: PUSH
21571: LD_INT 0
21573: EQUAL
21574: IFFALSE 21598
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
21576: CALL_OW 44
21580: PPUSH
21581: LD_VAR 0 4
21585: PPUSH
21586: LD_VAR 0 5
21590: PPUSH
21591: LD_INT 1
21593: PPUSH
21594: CALL_OW 48
// end ;
21598: LD_VAR 0 6
21602: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
21603: LD_INT 0
21605: PPUSH
21606: PPUSH
// uc_side := your_side ;
21607: LD_ADDR_OWVAR 20
21611: PUSH
21612: LD_OWVAR 2
21616: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
21617: LD_VAR 0 1
21621: PUSH
21622: LD_INT 1
21624: PUSH
21625: LD_INT 2
21627: PUSH
21628: LD_INT 3
21630: PUSH
21631: LD_INT 4
21633: PUSH
21634: LD_INT 5
21636: PUSH
21637: EMPTY
21638: LIST
21639: LIST
21640: LIST
21641: LIST
21642: LIST
21643: IN
21644: IFFALSE 21656
// uc_nation := nation_american else
21646: LD_ADDR_OWVAR 21
21650: PUSH
21651: LD_INT 1
21653: ST_TO_ADDR
21654: GO 21699
// if chassis in [ 11 , 12 , 13 , 14 ] then
21656: LD_VAR 0 1
21660: PUSH
21661: LD_INT 11
21663: PUSH
21664: LD_INT 12
21666: PUSH
21667: LD_INT 13
21669: PUSH
21670: LD_INT 14
21672: PUSH
21673: EMPTY
21674: LIST
21675: LIST
21676: LIST
21677: LIST
21678: IN
21679: IFFALSE 21691
// uc_nation := nation_arabian else
21681: LD_ADDR_OWVAR 21
21685: PUSH
21686: LD_INT 2
21688: ST_TO_ADDR
21689: GO 21699
// uc_nation := nation_russian ;
21691: LD_ADDR_OWVAR 21
21695: PUSH
21696: LD_INT 3
21698: ST_TO_ADDR
// vc_chassis := chassis ;
21699: LD_ADDR_OWVAR 37
21703: PUSH
21704: LD_VAR 0 1
21708: ST_TO_ADDR
// vc_engine := engine ;
21709: LD_ADDR_OWVAR 39
21713: PUSH
21714: LD_VAR 0 2
21718: ST_TO_ADDR
// vc_control := control ;
21719: LD_ADDR_OWVAR 38
21723: PUSH
21724: LD_VAR 0 3
21728: ST_TO_ADDR
// vc_weapon := weapon ;
21729: LD_ADDR_OWVAR 40
21733: PUSH
21734: LD_VAR 0 4
21738: ST_TO_ADDR
// un := CreateVehicle ;
21739: LD_ADDR_VAR 0 8
21743: PUSH
21744: CALL_OW 45
21748: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
21749: LD_VAR 0 8
21753: PPUSH
21754: LD_INT 0
21756: PPUSH
21757: LD_INT 5
21759: PPUSH
21760: CALL_OW 12
21764: PPUSH
21765: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
21769: LD_VAR 0 8
21773: PPUSH
21774: LD_VAR 0 5
21778: PPUSH
21779: LD_VAR 0 6
21783: PPUSH
21784: LD_INT 1
21786: PPUSH
21787: CALL_OW 48
// end ;
21791: LD_VAR 0 7
21795: RET
// export hInvincible ; every 1 do
21796: GO 21798
21798: DISABLE
// hInvincible := [ ] ;
21799: LD_ADDR_EXP 86
21803: PUSH
21804: EMPTY
21805: ST_TO_ADDR
21806: END
// every 10 do var i ;
21807: GO 21809
21809: DISABLE
21810: LD_INT 0
21812: PPUSH
// begin enable ;
21813: ENABLE
// if not hInvincible then
21814: LD_EXP 86
21818: NOT
21819: IFFALSE 21823
// exit ;
21821: GO 21867
// for i in hInvincible do
21823: LD_ADDR_VAR 0 1
21827: PUSH
21828: LD_EXP 86
21832: PUSH
21833: FOR_IN
21834: IFFALSE 21865
// if GetLives ( i ) < 1000 then
21836: LD_VAR 0 1
21840: PPUSH
21841: CALL_OW 256
21845: PUSH
21846: LD_INT 1000
21848: LESS
21849: IFFALSE 21863
// SetLives ( i , 1000 ) ;
21851: LD_VAR 0 1
21855: PPUSH
21856: LD_INT 1000
21858: PPUSH
21859: CALL_OW 234
21863: GO 21833
21865: POP
21866: POP
// end ;
21867: PPOPN 1
21869: END
// export function hHackInvincible ; var i ; begin
21870: LD_INT 0
21872: PPUSH
21873: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
21874: LD_ADDR_VAR 0 2
21878: PUSH
21879: LD_INT 2
21881: PUSH
21882: LD_INT 21
21884: PUSH
21885: LD_INT 1
21887: PUSH
21888: EMPTY
21889: LIST
21890: LIST
21891: PUSH
21892: LD_INT 21
21894: PUSH
21895: LD_INT 2
21897: PUSH
21898: EMPTY
21899: LIST
21900: LIST
21901: PUSH
21902: EMPTY
21903: LIST
21904: LIST
21905: LIST
21906: PPUSH
21907: CALL_OW 69
21911: PUSH
21912: FOR_IN
21913: IFFALSE 21974
// if IsSelected ( i ) then
21915: LD_VAR 0 2
21919: PPUSH
21920: CALL_OW 306
21924: IFFALSE 21972
// begin if i in hInvincible then
21926: LD_VAR 0 2
21930: PUSH
21931: LD_EXP 86
21935: IN
21936: IFFALSE 21956
// hInvincible := hInvincible diff i else
21938: LD_ADDR_EXP 86
21942: PUSH
21943: LD_EXP 86
21947: PUSH
21948: LD_VAR 0 2
21952: DIFF
21953: ST_TO_ADDR
21954: GO 21972
// hInvincible := hInvincible union i ;
21956: LD_ADDR_EXP 86
21960: PUSH
21961: LD_EXP 86
21965: PUSH
21966: LD_VAR 0 2
21970: UNION
21971: ST_TO_ADDR
// end ;
21972: GO 21912
21974: POP
21975: POP
// end ;
21976: LD_VAR 0 1
21980: RET
// export function hHackInvisible ; var i , j ; begin
21981: LD_INT 0
21983: PPUSH
21984: PPUSH
21985: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
21986: LD_ADDR_VAR 0 2
21990: PUSH
21991: LD_INT 21
21993: PUSH
21994: LD_INT 1
21996: PUSH
21997: EMPTY
21998: LIST
21999: LIST
22000: PPUSH
22001: CALL_OW 69
22005: PUSH
22006: FOR_IN
22007: IFFALSE 22031
// if IsSelected ( i ) then
22009: LD_VAR 0 2
22013: PPUSH
22014: CALL_OW 306
22018: IFFALSE 22029
// ComForceInvisible ( i ) ;
22020: LD_VAR 0 2
22024: PPUSH
22025: CALL_OW 496
22029: GO 22006
22031: POP
22032: POP
// end ;
22033: LD_VAR 0 1
22037: RET
// export function hHackChangeYourSide ; begin
22038: LD_INT 0
22040: PPUSH
// if your_side = 8 then
22041: LD_OWVAR 2
22045: PUSH
22046: LD_INT 8
22048: EQUAL
22049: IFFALSE 22061
// your_side := 0 else
22051: LD_ADDR_OWVAR 2
22055: PUSH
22056: LD_INT 0
22058: ST_TO_ADDR
22059: GO 22075
// your_side := your_side + 1 ;
22061: LD_ADDR_OWVAR 2
22065: PUSH
22066: LD_OWVAR 2
22070: PUSH
22071: LD_INT 1
22073: PLUS
22074: ST_TO_ADDR
// end ;
22075: LD_VAR 0 1
22079: RET
// export function hHackChangeUnitSide ; var i , j ; begin
22080: LD_INT 0
22082: PPUSH
22083: PPUSH
22084: PPUSH
// for i in all_units do
22085: LD_ADDR_VAR 0 2
22089: PUSH
22090: LD_OWVAR 3
22094: PUSH
22095: FOR_IN
22096: IFFALSE 22174
// if IsSelected ( i ) then
22098: LD_VAR 0 2
22102: PPUSH
22103: CALL_OW 306
22107: IFFALSE 22172
// begin j := GetSide ( i ) ;
22109: LD_ADDR_VAR 0 3
22113: PUSH
22114: LD_VAR 0 2
22118: PPUSH
22119: CALL_OW 255
22123: ST_TO_ADDR
// if j = 8 then
22124: LD_VAR 0 3
22128: PUSH
22129: LD_INT 8
22131: EQUAL
22132: IFFALSE 22144
// j := 0 else
22134: LD_ADDR_VAR 0 3
22138: PUSH
22139: LD_INT 0
22141: ST_TO_ADDR
22142: GO 22158
// j := j + 1 ;
22144: LD_ADDR_VAR 0 3
22148: PUSH
22149: LD_VAR 0 3
22153: PUSH
22154: LD_INT 1
22156: PLUS
22157: ST_TO_ADDR
// SetSide ( i , j ) ;
22158: LD_VAR 0 2
22162: PPUSH
22163: LD_VAR 0 3
22167: PPUSH
22168: CALL_OW 235
// end ;
22172: GO 22095
22174: POP
22175: POP
// end ;
22176: LD_VAR 0 1
22180: RET
// export function hHackFog ; begin
22181: LD_INT 0
22183: PPUSH
// FogOff ( true ) ;
22184: LD_INT 1
22186: PPUSH
22187: CALL_OW 344
// end ;
22191: LD_VAR 0 1
22195: RET
// export function hHackTeleport ( unit , x , y ) ; begin
22196: LD_INT 0
22198: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
22199: LD_VAR 0 1
22203: PPUSH
22204: LD_VAR 0 2
22208: PPUSH
22209: LD_VAR 0 3
22213: PPUSH
22214: LD_INT 1
22216: PPUSH
22217: LD_INT 1
22219: PPUSH
22220: CALL_OW 483
// CenterOnXY ( x , y ) ;
22224: LD_VAR 0 2
22228: PPUSH
22229: LD_VAR 0 3
22233: PPUSH
22234: CALL_OW 84
// end ;
22238: LD_VAR 0 4
22242: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
22243: LD_INT 0
22245: PPUSH
22246: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
22247: LD_VAR 0 1
22251: NOT
22252: PUSH
22253: LD_VAR 0 2
22257: PPUSH
22258: LD_VAR 0 3
22262: PPUSH
22263: CALL_OW 488
22267: NOT
22268: OR
22269: PUSH
22270: LD_VAR 0 1
22274: PPUSH
22275: CALL_OW 266
22279: PUSH
22280: LD_INT 3
22282: NONEQUAL
22283: PUSH
22284: LD_VAR 0 1
22288: PPUSH
22289: CALL_OW 247
22293: PUSH
22294: LD_INT 1
22296: EQUAL
22297: NOT
22298: AND
22299: OR
22300: IFFALSE 22304
// exit ;
22302: GO 22453
// if GetType ( factory ) = unit_human then
22304: LD_VAR 0 1
22308: PPUSH
22309: CALL_OW 247
22313: PUSH
22314: LD_INT 1
22316: EQUAL
22317: IFFALSE 22334
// factory := IsInUnit ( factory ) ;
22319: LD_ADDR_VAR 0 1
22323: PUSH
22324: LD_VAR 0 1
22328: PPUSH
22329: CALL_OW 310
22333: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
22334: LD_VAR 0 1
22338: PPUSH
22339: CALL_OW 266
22343: PUSH
22344: LD_INT 3
22346: NONEQUAL
22347: IFFALSE 22351
// exit ;
22349: GO 22453
// if HexInfo ( x , y ) = factory then
22351: LD_VAR 0 2
22355: PPUSH
22356: LD_VAR 0 3
22360: PPUSH
22361: CALL_OW 428
22365: PUSH
22366: LD_VAR 0 1
22370: EQUAL
22371: IFFALSE 22398
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
22373: LD_ADDR_EXP 87
22377: PUSH
22378: LD_EXP 87
22382: PPUSH
22383: LD_VAR 0 1
22387: PPUSH
22388: LD_INT 0
22390: PPUSH
22391: CALL_OW 1
22395: ST_TO_ADDR
22396: GO 22449
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
22398: LD_ADDR_EXP 87
22402: PUSH
22403: LD_EXP 87
22407: PPUSH
22408: LD_VAR 0 1
22412: PPUSH
22413: LD_VAR 0 1
22417: PPUSH
22418: CALL_OW 255
22422: PUSH
22423: LD_VAR 0 1
22427: PUSH
22428: LD_VAR 0 2
22432: PUSH
22433: LD_VAR 0 3
22437: PUSH
22438: EMPTY
22439: LIST
22440: LIST
22441: LIST
22442: LIST
22443: PPUSH
22444: CALL_OW 1
22448: ST_TO_ADDR
// UpdateFactoryWaypoints ;
22449: CALL 22458 0 0
// end ;
22453: LD_VAR 0 4
22457: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
22458: LD_INT 0
22460: PPUSH
22461: PPUSH
22462: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
22463: LD_STRING resetFactoryWaypoint();
22465: PPUSH
22466: CALL_OW 559
// if factoryWaypoints then
22470: LD_EXP 87
22474: IFFALSE 22600
// begin list := PrepareArray ( factoryWaypoints ) ;
22476: LD_ADDR_VAR 0 3
22480: PUSH
22481: LD_EXP 87
22485: PPUSH
22486: CALL 68977 0 1
22490: ST_TO_ADDR
// for i := 1 to list do
22491: LD_ADDR_VAR 0 2
22495: PUSH
22496: DOUBLE
22497: LD_INT 1
22499: DEC
22500: ST_TO_ADDR
22501: LD_VAR 0 3
22505: PUSH
22506: FOR_TO
22507: IFFALSE 22598
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
22509: LD_STRING setFactoryWaypointXY(
22511: PUSH
22512: LD_VAR 0 3
22516: PUSH
22517: LD_VAR 0 2
22521: ARRAY
22522: PUSH
22523: LD_INT 1
22525: ARRAY
22526: STR
22527: PUSH
22528: LD_STRING ,
22530: STR
22531: PUSH
22532: LD_VAR 0 3
22536: PUSH
22537: LD_VAR 0 2
22541: ARRAY
22542: PUSH
22543: LD_INT 2
22545: ARRAY
22546: STR
22547: PUSH
22548: LD_STRING ,
22550: STR
22551: PUSH
22552: LD_VAR 0 3
22556: PUSH
22557: LD_VAR 0 2
22561: ARRAY
22562: PUSH
22563: LD_INT 3
22565: ARRAY
22566: STR
22567: PUSH
22568: LD_STRING ,
22570: STR
22571: PUSH
22572: LD_VAR 0 3
22576: PUSH
22577: LD_VAR 0 2
22581: ARRAY
22582: PUSH
22583: LD_INT 4
22585: ARRAY
22586: STR
22587: PUSH
22588: LD_STRING )
22590: STR
22591: PPUSH
22592: CALL_OW 559
22596: GO 22506
22598: POP
22599: POP
// end ; end ;
22600: LD_VAR 0 1
22604: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
22605: LD_INT 0
22607: PPUSH
// if HexInfo ( x , y ) = warehouse then
22608: LD_VAR 0 2
22612: PPUSH
22613: LD_VAR 0 3
22617: PPUSH
22618: CALL_OW 428
22622: PUSH
22623: LD_VAR 0 1
22627: EQUAL
22628: IFFALSE 22655
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
22630: LD_ADDR_EXP 88
22634: PUSH
22635: LD_EXP 88
22639: PPUSH
22640: LD_VAR 0 1
22644: PPUSH
22645: LD_INT 0
22647: PPUSH
22648: CALL_OW 1
22652: ST_TO_ADDR
22653: GO 22706
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
22655: LD_ADDR_EXP 88
22659: PUSH
22660: LD_EXP 88
22664: PPUSH
22665: LD_VAR 0 1
22669: PPUSH
22670: LD_VAR 0 1
22674: PPUSH
22675: CALL_OW 255
22679: PUSH
22680: LD_VAR 0 1
22684: PUSH
22685: LD_VAR 0 2
22689: PUSH
22690: LD_VAR 0 3
22694: PUSH
22695: EMPTY
22696: LIST
22697: LIST
22698: LIST
22699: LIST
22700: PPUSH
22701: CALL_OW 1
22705: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
22706: CALL 22715 0 0
// end ;
22710: LD_VAR 0 4
22714: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
22715: LD_INT 0
22717: PPUSH
22718: PPUSH
22719: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
22720: LD_STRING resetWarehouseGatheringPoints();
22722: PPUSH
22723: CALL_OW 559
// if warehouseGatheringPoints then
22727: LD_EXP 88
22731: IFFALSE 22857
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
22733: LD_ADDR_VAR 0 3
22737: PUSH
22738: LD_EXP 88
22742: PPUSH
22743: CALL 68977 0 1
22747: ST_TO_ADDR
// for i := 1 to list do
22748: LD_ADDR_VAR 0 2
22752: PUSH
22753: DOUBLE
22754: LD_INT 1
22756: DEC
22757: ST_TO_ADDR
22758: LD_VAR 0 3
22762: PUSH
22763: FOR_TO
22764: IFFALSE 22855
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
22766: LD_STRING setWarehouseGatheringPointXY(
22768: PUSH
22769: LD_VAR 0 3
22773: PUSH
22774: LD_VAR 0 2
22778: ARRAY
22779: PUSH
22780: LD_INT 1
22782: ARRAY
22783: STR
22784: PUSH
22785: LD_STRING ,
22787: STR
22788: PUSH
22789: LD_VAR 0 3
22793: PUSH
22794: LD_VAR 0 2
22798: ARRAY
22799: PUSH
22800: LD_INT 2
22802: ARRAY
22803: STR
22804: PUSH
22805: LD_STRING ,
22807: STR
22808: PUSH
22809: LD_VAR 0 3
22813: PUSH
22814: LD_VAR 0 2
22818: ARRAY
22819: PUSH
22820: LD_INT 3
22822: ARRAY
22823: STR
22824: PUSH
22825: LD_STRING ,
22827: STR
22828: PUSH
22829: LD_VAR 0 3
22833: PUSH
22834: LD_VAR 0 2
22838: ARRAY
22839: PUSH
22840: LD_INT 4
22842: ARRAY
22843: STR
22844: PUSH
22845: LD_STRING )
22847: STR
22848: PPUSH
22849: CALL_OW 559
22853: GO 22763
22855: POP
22856: POP
// end ; end ;
22857: LD_VAR 0 1
22861: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
22862: LD_EXP 88
22866: IFFALSE 23551
22868: GO 22870
22870: DISABLE
22871: LD_INT 0
22873: PPUSH
22874: PPUSH
22875: PPUSH
22876: PPUSH
22877: PPUSH
22878: PPUSH
22879: PPUSH
22880: PPUSH
22881: PPUSH
// begin enable ;
22882: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
22883: LD_ADDR_VAR 0 3
22887: PUSH
22888: LD_EXP 88
22892: PPUSH
22893: CALL 68977 0 1
22897: ST_TO_ADDR
// if not list then
22898: LD_VAR 0 3
22902: NOT
22903: IFFALSE 22907
// exit ;
22905: GO 23551
// for i := 1 to list do
22907: LD_ADDR_VAR 0 1
22911: PUSH
22912: DOUBLE
22913: LD_INT 1
22915: DEC
22916: ST_TO_ADDR
22917: LD_VAR 0 3
22921: PUSH
22922: FOR_TO
22923: IFFALSE 23549
// begin depot := list [ i ] [ 2 ] ;
22925: LD_ADDR_VAR 0 8
22929: PUSH
22930: LD_VAR 0 3
22934: PUSH
22935: LD_VAR 0 1
22939: ARRAY
22940: PUSH
22941: LD_INT 2
22943: ARRAY
22944: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
22945: LD_ADDR_VAR 0 5
22949: PUSH
22950: LD_VAR 0 3
22954: PUSH
22955: LD_VAR 0 1
22959: ARRAY
22960: PUSH
22961: LD_INT 1
22963: ARRAY
22964: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
22965: LD_VAR 0 8
22969: PPUSH
22970: CALL_OW 301
22974: PUSH
22975: LD_VAR 0 5
22979: PUSH
22980: LD_VAR 0 8
22984: PPUSH
22985: CALL_OW 255
22989: NONEQUAL
22990: OR
22991: IFFALSE 23020
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
22993: LD_ADDR_EXP 88
22997: PUSH
22998: LD_EXP 88
23002: PPUSH
23003: LD_VAR 0 8
23007: PPUSH
23008: LD_INT 0
23010: PPUSH
23011: CALL_OW 1
23015: ST_TO_ADDR
// exit ;
23016: POP
23017: POP
23018: GO 23551
// end ; x := list [ i ] [ 3 ] ;
23020: LD_ADDR_VAR 0 6
23024: PUSH
23025: LD_VAR 0 3
23029: PUSH
23030: LD_VAR 0 1
23034: ARRAY
23035: PUSH
23036: LD_INT 3
23038: ARRAY
23039: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
23040: LD_ADDR_VAR 0 7
23044: PUSH
23045: LD_VAR 0 3
23049: PUSH
23050: LD_VAR 0 1
23054: ARRAY
23055: PUSH
23056: LD_INT 4
23058: ARRAY
23059: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
23060: LD_ADDR_VAR 0 9
23064: PUSH
23065: LD_VAR 0 6
23069: PPUSH
23070: LD_VAR 0 7
23074: PPUSH
23075: LD_INT 16
23077: PPUSH
23078: CALL 67565 0 3
23082: ST_TO_ADDR
// if not cratesNearbyPoint then
23083: LD_VAR 0 9
23087: NOT
23088: IFFALSE 23094
// exit ;
23090: POP
23091: POP
23092: GO 23551
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
23094: LD_ADDR_VAR 0 4
23098: PUSH
23099: LD_INT 22
23101: PUSH
23102: LD_VAR 0 5
23106: PUSH
23107: EMPTY
23108: LIST
23109: LIST
23110: PUSH
23111: LD_INT 3
23113: PUSH
23114: LD_INT 60
23116: PUSH
23117: EMPTY
23118: LIST
23119: PUSH
23120: EMPTY
23121: LIST
23122: LIST
23123: PUSH
23124: LD_INT 91
23126: PUSH
23127: LD_VAR 0 8
23131: PUSH
23132: LD_INT 6
23134: PUSH
23135: EMPTY
23136: LIST
23137: LIST
23138: LIST
23139: PUSH
23140: LD_INT 2
23142: PUSH
23143: LD_INT 25
23145: PUSH
23146: LD_INT 2
23148: PUSH
23149: EMPTY
23150: LIST
23151: LIST
23152: PUSH
23153: LD_INT 25
23155: PUSH
23156: LD_INT 16
23158: PUSH
23159: EMPTY
23160: LIST
23161: LIST
23162: PUSH
23163: EMPTY
23164: LIST
23165: LIST
23166: LIST
23167: PUSH
23168: EMPTY
23169: LIST
23170: LIST
23171: LIST
23172: LIST
23173: PPUSH
23174: CALL_OW 69
23178: PUSH
23179: LD_VAR 0 8
23183: PPUSH
23184: CALL_OW 313
23188: PPUSH
23189: LD_INT 3
23191: PUSH
23192: LD_INT 60
23194: PUSH
23195: EMPTY
23196: LIST
23197: PUSH
23198: EMPTY
23199: LIST
23200: LIST
23201: PUSH
23202: LD_INT 2
23204: PUSH
23205: LD_INT 25
23207: PUSH
23208: LD_INT 2
23210: PUSH
23211: EMPTY
23212: LIST
23213: LIST
23214: PUSH
23215: LD_INT 25
23217: PUSH
23218: LD_INT 16
23220: PUSH
23221: EMPTY
23222: LIST
23223: LIST
23224: PUSH
23225: EMPTY
23226: LIST
23227: LIST
23228: LIST
23229: PUSH
23230: EMPTY
23231: LIST
23232: LIST
23233: PPUSH
23234: CALL_OW 72
23238: UNION
23239: ST_TO_ADDR
// if tmp then
23240: LD_VAR 0 4
23244: IFFALSE 23324
// begin tmp := ShrinkArray ( tmp , 3 ) ;
23246: LD_ADDR_VAR 0 4
23250: PUSH
23251: LD_VAR 0 4
23255: PPUSH
23256: LD_INT 3
23258: PPUSH
23259: CALL 65534 0 2
23263: ST_TO_ADDR
// for j in tmp do
23264: LD_ADDR_VAR 0 2
23268: PUSH
23269: LD_VAR 0 4
23273: PUSH
23274: FOR_IN
23275: IFFALSE 23318
// begin if IsInUnit ( j ) then
23277: LD_VAR 0 2
23281: PPUSH
23282: CALL_OW 310
23286: IFFALSE 23297
// ComExit ( j ) ;
23288: LD_VAR 0 2
23292: PPUSH
23293: CALL 65617 0 1
// AddComCollect ( j , x , y ) ;
23297: LD_VAR 0 2
23301: PPUSH
23302: LD_VAR 0 6
23306: PPUSH
23307: LD_VAR 0 7
23311: PPUSH
23312: CALL_OW 177
// end ;
23316: GO 23274
23318: POP
23319: POP
// exit ;
23320: POP
23321: POP
23322: GO 23551
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
23324: LD_ADDR_VAR 0 4
23328: PUSH
23329: LD_INT 22
23331: PUSH
23332: LD_VAR 0 5
23336: PUSH
23337: EMPTY
23338: LIST
23339: LIST
23340: PUSH
23341: LD_INT 91
23343: PUSH
23344: LD_VAR 0 8
23348: PUSH
23349: LD_INT 8
23351: PUSH
23352: EMPTY
23353: LIST
23354: LIST
23355: LIST
23356: PUSH
23357: LD_INT 2
23359: PUSH
23360: LD_INT 34
23362: PUSH
23363: LD_INT 12
23365: PUSH
23366: EMPTY
23367: LIST
23368: LIST
23369: PUSH
23370: LD_INT 34
23372: PUSH
23373: LD_INT 51
23375: PUSH
23376: EMPTY
23377: LIST
23378: LIST
23379: PUSH
23380: LD_INT 34
23382: PUSH
23383: LD_INT 32
23385: PUSH
23386: EMPTY
23387: LIST
23388: LIST
23389: PUSH
23390: LD_INT 34
23392: PUSH
23393: LD_INT 89
23395: PUSH
23396: EMPTY
23397: LIST
23398: LIST
23399: PUSH
23400: EMPTY
23401: LIST
23402: LIST
23403: LIST
23404: LIST
23405: LIST
23406: PUSH
23407: EMPTY
23408: LIST
23409: LIST
23410: LIST
23411: PPUSH
23412: CALL_OW 69
23416: ST_TO_ADDR
// if tmp then
23417: LD_VAR 0 4
23421: IFFALSE 23547
// begin for j in tmp do
23423: LD_ADDR_VAR 0 2
23427: PUSH
23428: LD_VAR 0 4
23432: PUSH
23433: FOR_IN
23434: IFFALSE 23545
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
23436: LD_VAR 0 2
23440: PPUSH
23441: CALL_OW 262
23445: PUSH
23446: LD_INT 3
23448: EQUAL
23449: PUSH
23450: LD_VAR 0 2
23454: PPUSH
23455: CALL_OW 261
23459: PUSH
23460: LD_INT 20
23462: GREATER
23463: OR
23464: PUSH
23465: LD_VAR 0 2
23469: PPUSH
23470: CALL_OW 314
23474: NOT
23475: AND
23476: PUSH
23477: LD_VAR 0 2
23481: PPUSH
23482: CALL_OW 263
23486: PUSH
23487: LD_INT 1
23489: NONEQUAL
23490: PUSH
23491: LD_VAR 0 2
23495: PPUSH
23496: CALL_OW 311
23500: OR
23501: AND
23502: IFFALSE 23543
// begin ComCollect ( j , x , y ) ;
23504: LD_VAR 0 2
23508: PPUSH
23509: LD_VAR 0 6
23513: PPUSH
23514: LD_VAR 0 7
23518: PPUSH
23519: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
23523: LD_VAR 0 2
23527: PPUSH
23528: LD_VAR 0 8
23532: PPUSH
23533: CALL_OW 172
// exit ;
23537: POP
23538: POP
23539: POP
23540: POP
23541: GO 23551
// end ;
23543: GO 23433
23545: POP
23546: POP
// end ; end ;
23547: GO 22922
23549: POP
23550: POP
// end ; end_of_file
23551: PPOPN 9
23553: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
23554: LD_INT 0
23556: PPUSH
23557: PPUSH
23558: PPUSH
23559: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
23560: LD_VAR 0 1
23564: PPUSH
23565: CALL_OW 264
23569: PUSH
23570: LD_INT 91
23572: EQUAL
23573: IFFALSE 23645
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
23575: LD_INT 68
23577: PPUSH
23578: LD_VAR 0 1
23582: PPUSH
23583: CALL_OW 255
23587: PPUSH
23588: CALL_OW 321
23592: PUSH
23593: LD_INT 2
23595: EQUAL
23596: IFFALSE 23608
// eff := 70 else
23598: LD_ADDR_VAR 0 4
23602: PUSH
23603: LD_INT 70
23605: ST_TO_ADDR
23606: GO 23616
// eff := 30 ;
23608: LD_ADDR_VAR 0 4
23612: PUSH
23613: LD_INT 30
23615: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
23616: LD_VAR 0 1
23620: PPUSH
23621: CALL_OW 250
23625: PPUSH
23626: LD_VAR 0 1
23630: PPUSH
23631: CALL_OW 251
23635: PPUSH
23636: LD_VAR 0 4
23640: PPUSH
23641: CALL_OW 495
// end ; end ;
23645: LD_VAR 0 2
23649: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
23650: LD_INT 0
23652: PPUSH
// end ;
23653: LD_VAR 0 4
23657: RET
// export function SOS_Command ( cmd ) ; begin
23658: LD_INT 0
23660: PPUSH
// end ;
23661: LD_VAR 0 2
23665: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
23666: LD_INT 0
23668: PPUSH
// end ;
23669: LD_VAR 0 6
23673: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
23674: LD_INT 0
23676: PPUSH
23677: PPUSH
// if not vehicle or not factory then
23678: LD_VAR 0 1
23682: NOT
23683: PUSH
23684: LD_VAR 0 2
23688: NOT
23689: OR
23690: IFFALSE 23694
// exit ;
23692: GO 23925
// if factoryWaypoints >= factory then
23694: LD_EXP 87
23698: PUSH
23699: LD_VAR 0 2
23703: GREATEREQUAL
23704: IFFALSE 23925
// if factoryWaypoints [ factory ] then
23706: LD_EXP 87
23710: PUSH
23711: LD_VAR 0 2
23715: ARRAY
23716: IFFALSE 23925
// begin if GetControl ( vehicle ) = control_manual then
23718: LD_VAR 0 1
23722: PPUSH
23723: CALL_OW 263
23727: PUSH
23728: LD_INT 1
23730: EQUAL
23731: IFFALSE 23812
// begin driver := IsDrivenBy ( vehicle ) ;
23733: LD_ADDR_VAR 0 4
23737: PUSH
23738: LD_VAR 0 1
23742: PPUSH
23743: CALL_OW 311
23747: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
23748: LD_VAR 0 4
23752: PPUSH
23753: LD_EXP 87
23757: PUSH
23758: LD_VAR 0 2
23762: ARRAY
23763: PUSH
23764: LD_INT 3
23766: ARRAY
23767: PPUSH
23768: LD_EXP 87
23772: PUSH
23773: LD_VAR 0 2
23777: ARRAY
23778: PUSH
23779: LD_INT 4
23781: ARRAY
23782: PPUSH
23783: CALL_OW 171
// AddComExitVehicle ( driver ) ;
23787: LD_VAR 0 4
23791: PPUSH
23792: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
23796: LD_VAR 0 4
23800: PPUSH
23801: LD_VAR 0 2
23805: PPUSH
23806: CALL_OW 180
// end else
23810: GO 23925
// if GetControl ( vehicle ) = control_remote then
23812: LD_VAR 0 1
23816: PPUSH
23817: CALL_OW 263
23821: PUSH
23822: LD_INT 2
23824: EQUAL
23825: IFFALSE 23886
// begin wait ( 0 0$2 ) ;
23827: LD_INT 70
23829: PPUSH
23830: CALL_OW 67
// if Connect ( vehicle ) then
23834: LD_VAR 0 1
23838: PPUSH
23839: CALL 35949 0 1
23843: IFFALSE 23884
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
23845: LD_VAR 0 1
23849: PPUSH
23850: LD_EXP 87
23854: PUSH
23855: LD_VAR 0 2
23859: ARRAY
23860: PUSH
23861: LD_INT 3
23863: ARRAY
23864: PPUSH
23865: LD_EXP 87
23869: PUSH
23870: LD_VAR 0 2
23874: ARRAY
23875: PUSH
23876: LD_INT 4
23878: ARRAY
23879: PPUSH
23880: CALL_OW 171
// end else
23884: GO 23925
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
23886: LD_VAR 0 1
23890: PPUSH
23891: LD_EXP 87
23895: PUSH
23896: LD_VAR 0 2
23900: ARRAY
23901: PUSH
23902: LD_INT 3
23904: ARRAY
23905: PPUSH
23906: LD_EXP 87
23910: PUSH
23911: LD_VAR 0 2
23915: ARRAY
23916: PUSH
23917: LD_INT 4
23919: ARRAY
23920: PPUSH
23921: CALL_OW 171
// end ; end ;
23925: LD_VAR 0 3
23929: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
23930: LD_INT 0
23932: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
23933: LD_VAR 0 1
23937: PUSH
23938: LD_INT 250
23940: EQUAL
23941: PUSH
23942: LD_VAR 0 2
23946: PPUSH
23947: CALL_OW 264
23951: PUSH
23952: LD_INT 81
23954: EQUAL
23955: AND
23956: IFFALSE 23977
// MinerPlaceMine ( unit , x , y ) ;
23958: LD_VAR 0 2
23962: PPUSH
23963: LD_VAR 0 4
23967: PPUSH
23968: LD_VAR 0 5
23972: PPUSH
23973: CALL 26362 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
23977: LD_VAR 0 1
23981: PUSH
23982: LD_INT 251
23984: EQUAL
23985: PUSH
23986: LD_VAR 0 2
23990: PPUSH
23991: CALL_OW 264
23995: PUSH
23996: LD_INT 81
23998: EQUAL
23999: AND
24000: IFFALSE 24021
// MinerDetonateMine ( unit , x , y ) ;
24002: LD_VAR 0 2
24006: PPUSH
24007: LD_VAR 0 4
24011: PPUSH
24012: LD_VAR 0 5
24016: PPUSH
24017: CALL 26637 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
24021: LD_VAR 0 1
24025: PUSH
24026: LD_INT 252
24028: EQUAL
24029: PUSH
24030: LD_VAR 0 2
24034: PPUSH
24035: CALL_OW 264
24039: PUSH
24040: LD_INT 81
24042: EQUAL
24043: AND
24044: IFFALSE 24065
// MinerCreateMinefield ( unit , x , y ) ;
24046: LD_VAR 0 2
24050: PPUSH
24051: LD_VAR 0 4
24055: PPUSH
24056: LD_VAR 0 5
24060: PPUSH
24061: CALL 27054 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
24065: LD_VAR 0 1
24069: PUSH
24070: LD_INT 253
24072: EQUAL
24073: PUSH
24074: LD_VAR 0 2
24078: PPUSH
24079: CALL_OW 257
24083: PUSH
24084: LD_INT 5
24086: EQUAL
24087: AND
24088: IFFALSE 24109
// ComBinocular ( unit , x , y ) ;
24090: LD_VAR 0 2
24094: PPUSH
24095: LD_VAR 0 4
24099: PPUSH
24100: LD_VAR 0 5
24104: PPUSH
24105: CALL 27423 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
24109: LD_VAR 0 1
24113: PUSH
24114: LD_INT 254
24116: EQUAL
24117: PUSH
24118: LD_VAR 0 2
24122: PPUSH
24123: CALL_OW 264
24127: PUSH
24128: LD_INT 99
24130: EQUAL
24131: AND
24132: PUSH
24133: LD_VAR 0 3
24137: PPUSH
24138: CALL_OW 263
24142: PUSH
24143: LD_INT 3
24145: EQUAL
24146: AND
24147: IFFALSE 24163
// HackDestroyVehicle ( unit , selectedUnit ) ;
24149: LD_VAR 0 2
24153: PPUSH
24154: LD_VAR 0 3
24158: PPUSH
24159: CALL 25726 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
24163: LD_VAR 0 1
24167: PUSH
24168: LD_INT 255
24170: EQUAL
24171: PUSH
24172: LD_VAR 0 2
24176: PPUSH
24177: CALL_OW 264
24181: PUSH
24182: LD_INT 14
24184: PUSH
24185: LD_INT 53
24187: PUSH
24188: EMPTY
24189: LIST
24190: LIST
24191: IN
24192: AND
24193: PUSH
24194: LD_VAR 0 4
24198: PPUSH
24199: LD_VAR 0 5
24203: PPUSH
24204: CALL_OW 488
24208: AND
24209: IFFALSE 24233
// CutTreeXYR ( unit , x , y , 12 ) ;
24211: LD_VAR 0 2
24215: PPUSH
24216: LD_VAR 0 4
24220: PPUSH
24221: LD_VAR 0 5
24225: PPUSH
24226: LD_INT 12
24228: PPUSH
24229: CALL 24296 0 4
// if cmd = 256 then
24233: LD_VAR 0 1
24237: PUSH
24238: LD_INT 256
24240: EQUAL
24241: IFFALSE 24262
// SetFactoryWaypoint ( unit , x , y ) ;
24243: LD_VAR 0 2
24247: PPUSH
24248: LD_VAR 0 4
24252: PPUSH
24253: LD_VAR 0 5
24257: PPUSH
24258: CALL 22243 0 3
// if cmd = 257 then
24262: LD_VAR 0 1
24266: PUSH
24267: LD_INT 257
24269: EQUAL
24270: IFFALSE 24291
// SetWarehouseGatheringPoint ( unit , x , y ) ;
24272: LD_VAR 0 2
24276: PPUSH
24277: LD_VAR 0 4
24281: PPUSH
24282: LD_VAR 0 5
24286: PPUSH
24287: CALL 22605 0 3
// end ;
24291: LD_VAR 0 6
24295: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
24296: LD_INT 0
24298: PPUSH
24299: PPUSH
24300: PPUSH
24301: PPUSH
24302: PPUSH
24303: PPUSH
24304: PPUSH
24305: PPUSH
24306: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
24307: LD_VAR 0 1
24311: NOT
24312: PUSH
24313: LD_VAR 0 2
24317: PPUSH
24318: LD_VAR 0 3
24322: PPUSH
24323: CALL_OW 488
24327: NOT
24328: OR
24329: PUSH
24330: LD_VAR 0 4
24334: NOT
24335: OR
24336: IFFALSE 24340
// exit ;
24338: GO 24680
// list := [ ] ;
24340: LD_ADDR_VAR 0 13
24344: PUSH
24345: EMPTY
24346: ST_TO_ADDR
// if x - r < 0 then
24347: LD_VAR 0 2
24351: PUSH
24352: LD_VAR 0 4
24356: MINUS
24357: PUSH
24358: LD_INT 0
24360: LESS
24361: IFFALSE 24373
// min_x := 0 else
24363: LD_ADDR_VAR 0 7
24367: PUSH
24368: LD_INT 0
24370: ST_TO_ADDR
24371: GO 24389
// min_x := x - r ;
24373: LD_ADDR_VAR 0 7
24377: PUSH
24378: LD_VAR 0 2
24382: PUSH
24383: LD_VAR 0 4
24387: MINUS
24388: ST_TO_ADDR
// if y - r < 0 then
24389: LD_VAR 0 3
24393: PUSH
24394: LD_VAR 0 4
24398: MINUS
24399: PUSH
24400: LD_INT 0
24402: LESS
24403: IFFALSE 24415
// min_y := 0 else
24405: LD_ADDR_VAR 0 8
24409: PUSH
24410: LD_INT 0
24412: ST_TO_ADDR
24413: GO 24431
// min_y := y - r ;
24415: LD_ADDR_VAR 0 8
24419: PUSH
24420: LD_VAR 0 3
24424: PUSH
24425: LD_VAR 0 4
24429: MINUS
24430: ST_TO_ADDR
// max_x := x + r ;
24431: LD_ADDR_VAR 0 9
24435: PUSH
24436: LD_VAR 0 2
24440: PUSH
24441: LD_VAR 0 4
24445: PLUS
24446: ST_TO_ADDR
// max_y := y + r ;
24447: LD_ADDR_VAR 0 10
24451: PUSH
24452: LD_VAR 0 3
24456: PUSH
24457: LD_VAR 0 4
24461: PLUS
24462: ST_TO_ADDR
// for _x = min_x to max_x do
24463: LD_ADDR_VAR 0 11
24467: PUSH
24468: DOUBLE
24469: LD_VAR 0 7
24473: DEC
24474: ST_TO_ADDR
24475: LD_VAR 0 9
24479: PUSH
24480: FOR_TO
24481: IFFALSE 24598
// for _y = min_y to max_y do
24483: LD_ADDR_VAR 0 12
24487: PUSH
24488: DOUBLE
24489: LD_VAR 0 8
24493: DEC
24494: ST_TO_ADDR
24495: LD_VAR 0 10
24499: PUSH
24500: FOR_TO
24501: IFFALSE 24594
// begin if not ValidHex ( _x , _y ) then
24503: LD_VAR 0 11
24507: PPUSH
24508: LD_VAR 0 12
24512: PPUSH
24513: CALL_OW 488
24517: NOT
24518: IFFALSE 24522
// continue ;
24520: GO 24500
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
24522: LD_VAR 0 11
24526: PPUSH
24527: LD_VAR 0 12
24531: PPUSH
24532: CALL_OW 351
24536: PUSH
24537: LD_VAR 0 11
24541: PPUSH
24542: LD_VAR 0 12
24546: PPUSH
24547: CALL_OW 554
24551: AND
24552: IFFALSE 24592
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
24554: LD_ADDR_VAR 0 13
24558: PUSH
24559: LD_VAR 0 13
24563: PPUSH
24564: LD_VAR 0 13
24568: PUSH
24569: LD_INT 1
24571: PLUS
24572: PPUSH
24573: LD_VAR 0 11
24577: PUSH
24578: LD_VAR 0 12
24582: PUSH
24583: EMPTY
24584: LIST
24585: LIST
24586: PPUSH
24587: CALL_OW 2
24591: ST_TO_ADDR
// end ;
24592: GO 24500
24594: POP
24595: POP
24596: GO 24480
24598: POP
24599: POP
// if not list then
24600: LD_VAR 0 13
24604: NOT
24605: IFFALSE 24609
// exit ;
24607: GO 24680
// for i in list do
24609: LD_ADDR_VAR 0 6
24613: PUSH
24614: LD_VAR 0 13
24618: PUSH
24619: FOR_IN
24620: IFFALSE 24678
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
24622: LD_VAR 0 1
24626: PPUSH
24627: LD_STRING M
24629: PUSH
24630: LD_VAR 0 6
24634: PUSH
24635: LD_INT 1
24637: ARRAY
24638: PUSH
24639: LD_VAR 0 6
24643: PUSH
24644: LD_INT 2
24646: ARRAY
24647: PUSH
24648: LD_INT 0
24650: PUSH
24651: LD_INT 0
24653: PUSH
24654: LD_INT 0
24656: PUSH
24657: LD_INT 0
24659: PUSH
24660: EMPTY
24661: LIST
24662: LIST
24663: LIST
24664: LIST
24665: LIST
24666: LIST
24667: LIST
24668: PUSH
24669: EMPTY
24670: LIST
24671: PPUSH
24672: CALL_OW 447
24676: GO 24619
24678: POP
24679: POP
// end ;
24680: LD_VAR 0 5
24684: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
24685: LD_EXP 90
24689: NOT
24690: IFFALSE 24740
24692: GO 24694
24694: DISABLE
// begin initHack := true ;
24695: LD_ADDR_EXP 90
24699: PUSH
24700: LD_INT 1
24702: ST_TO_ADDR
// hackTanks := [ ] ;
24703: LD_ADDR_EXP 91
24707: PUSH
24708: EMPTY
24709: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
24710: LD_ADDR_EXP 92
24714: PUSH
24715: EMPTY
24716: ST_TO_ADDR
// hackLimit := 3 ;
24717: LD_ADDR_EXP 93
24721: PUSH
24722: LD_INT 3
24724: ST_TO_ADDR
// hackDist := 12 ;
24725: LD_ADDR_EXP 94
24729: PUSH
24730: LD_INT 12
24732: ST_TO_ADDR
// hackCounter := [ ] ;
24733: LD_ADDR_EXP 95
24737: PUSH
24738: EMPTY
24739: ST_TO_ADDR
// end ;
24740: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
24741: LD_EXP 90
24745: PUSH
24746: LD_INT 34
24748: PUSH
24749: LD_INT 99
24751: PUSH
24752: EMPTY
24753: LIST
24754: LIST
24755: PPUSH
24756: CALL_OW 69
24760: AND
24761: IFFALSE 25014
24763: GO 24765
24765: DISABLE
24766: LD_INT 0
24768: PPUSH
24769: PPUSH
// begin enable ;
24770: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
24771: LD_ADDR_VAR 0 1
24775: PUSH
24776: LD_INT 34
24778: PUSH
24779: LD_INT 99
24781: PUSH
24782: EMPTY
24783: LIST
24784: LIST
24785: PPUSH
24786: CALL_OW 69
24790: PUSH
24791: FOR_IN
24792: IFFALSE 25012
// begin if not i in hackTanks then
24794: LD_VAR 0 1
24798: PUSH
24799: LD_EXP 91
24803: IN
24804: NOT
24805: IFFALSE 24888
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
24807: LD_ADDR_EXP 91
24811: PUSH
24812: LD_EXP 91
24816: PPUSH
24817: LD_EXP 91
24821: PUSH
24822: LD_INT 1
24824: PLUS
24825: PPUSH
24826: LD_VAR 0 1
24830: PPUSH
24831: CALL_OW 1
24835: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
24836: LD_ADDR_EXP 92
24840: PUSH
24841: LD_EXP 92
24845: PPUSH
24846: LD_EXP 92
24850: PUSH
24851: LD_INT 1
24853: PLUS
24854: PPUSH
24855: EMPTY
24856: PPUSH
24857: CALL_OW 1
24861: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
24862: LD_ADDR_EXP 95
24866: PUSH
24867: LD_EXP 95
24871: PPUSH
24872: LD_EXP 95
24876: PUSH
24877: LD_INT 1
24879: PLUS
24880: PPUSH
24881: EMPTY
24882: PPUSH
24883: CALL_OW 1
24887: ST_TO_ADDR
// end ; if not IsOk ( i ) then
24888: LD_VAR 0 1
24892: PPUSH
24893: CALL_OW 302
24897: NOT
24898: IFFALSE 24911
// begin HackUnlinkAll ( i ) ;
24900: LD_VAR 0 1
24904: PPUSH
24905: CALL 25017 0 1
// continue ;
24909: GO 24791
// end ; HackCheckCapturedStatus ( i ) ;
24911: LD_VAR 0 1
24915: PPUSH
24916: CALL 25460 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
24920: LD_ADDR_VAR 0 2
24924: PUSH
24925: LD_INT 81
24927: PUSH
24928: LD_VAR 0 1
24932: PPUSH
24933: CALL_OW 255
24937: PUSH
24938: EMPTY
24939: LIST
24940: LIST
24941: PUSH
24942: LD_INT 33
24944: PUSH
24945: LD_INT 3
24947: PUSH
24948: EMPTY
24949: LIST
24950: LIST
24951: PUSH
24952: LD_INT 91
24954: PUSH
24955: LD_VAR 0 1
24959: PUSH
24960: LD_EXP 94
24964: PUSH
24965: EMPTY
24966: LIST
24967: LIST
24968: LIST
24969: PUSH
24970: LD_INT 50
24972: PUSH
24973: EMPTY
24974: LIST
24975: PUSH
24976: EMPTY
24977: LIST
24978: LIST
24979: LIST
24980: LIST
24981: PPUSH
24982: CALL_OW 69
24986: ST_TO_ADDR
// if not tmp then
24987: LD_VAR 0 2
24991: NOT
24992: IFFALSE 24996
// continue ;
24994: GO 24791
// HackLink ( i , tmp ) ;
24996: LD_VAR 0 1
25000: PPUSH
25001: LD_VAR 0 2
25005: PPUSH
25006: CALL 25153 0 2
// end ;
25010: GO 24791
25012: POP
25013: POP
// end ;
25014: PPOPN 2
25016: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
25017: LD_INT 0
25019: PPUSH
25020: PPUSH
25021: PPUSH
// if not hack in hackTanks then
25022: LD_VAR 0 1
25026: PUSH
25027: LD_EXP 91
25031: IN
25032: NOT
25033: IFFALSE 25037
// exit ;
25035: GO 25148
// index := GetElementIndex ( hackTanks , hack ) ;
25037: LD_ADDR_VAR 0 4
25041: PUSH
25042: LD_EXP 91
25046: PPUSH
25047: LD_VAR 0 1
25051: PPUSH
25052: CALL 32765 0 2
25056: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
25057: LD_EXP 92
25061: PUSH
25062: LD_VAR 0 4
25066: ARRAY
25067: IFFALSE 25148
// begin for i in hackTanksCaptured [ index ] do
25069: LD_ADDR_VAR 0 3
25073: PUSH
25074: LD_EXP 92
25078: PUSH
25079: LD_VAR 0 4
25083: ARRAY
25084: PUSH
25085: FOR_IN
25086: IFFALSE 25112
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
25088: LD_VAR 0 3
25092: PUSH
25093: LD_INT 1
25095: ARRAY
25096: PPUSH
25097: LD_VAR 0 3
25101: PUSH
25102: LD_INT 2
25104: ARRAY
25105: PPUSH
25106: CALL_OW 235
25110: GO 25085
25112: POP
25113: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
25114: LD_ADDR_EXP 92
25118: PUSH
25119: LD_EXP 92
25123: PPUSH
25124: LD_VAR 0 4
25128: PPUSH
25129: EMPTY
25130: PPUSH
25131: CALL_OW 1
25135: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
25136: LD_VAR 0 1
25140: PPUSH
25141: LD_INT 0
25143: PPUSH
25144: CALL_OW 505
// end ; end ;
25148: LD_VAR 0 2
25152: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
25153: LD_INT 0
25155: PPUSH
25156: PPUSH
25157: PPUSH
// if not hack in hackTanks or not vehicles then
25158: LD_VAR 0 1
25162: PUSH
25163: LD_EXP 91
25167: IN
25168: NOT
25169: PUSH
25170: LD_VAR 0 2
25174: NOT
25175: OR
25176: IFFALSE 25180
// exit ;
25178: GO 25455
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
25180: LD_ADDR_VAR 0 2
25184: PUSH
25185: LD_VAR 0 1
25189: PPUSH
25190: LD_VAR 0 2
25194: PPUSH
25195: LD_INT 1
25197: PPUSH
25198: LD_INT 1
25200: PPUSH
25201: CALL 33415 0 4
25205: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
25206: LD_ADDR_VAR 0 5
25210: PUSH
25211: LD_EXP 91
25215: PPUSH
25216: LD_VAR 0 1
25220: PPUSH
25221: CALL 32765 0 2
25225: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
25226: LD_EXP 92
25230: PUSH
25231: LD_VAR 0 5
25235: ARRAY
25236: PUSH
25237: LD_EXP 93
25241: LESS
25242: IFFALSE 25431
// begin for i := 1 to vehicles do
25244: LD_ADDR_VAR 0 4
25248: PUSH
25249: DOUBLE
25250: LD_INT 1
25252: DEC
25253: ST_TO_ADDR
25254: LD_VAR 0 2
25258: PUSH
25259: FOR_TO
25260: IFFALSE 25429
// begin if hackTanksCaptured [ index ] = hackLimit then
25262: LD_EXP 92
25266: PUSH
25267: LD_VAR 0 5
25271: ARRAY
25272: PUSH
25273: LD_EXP 93
25277: EQUAL
25278: IFFALSE 25282
// break ;
25280: GO 25429
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
25282: LD_ADDR_EXP 95
25286: PUSH
25287: LD_EXP 95
25291: PPUSH
25292: LD_VAR 0 5
25296: PPUSH
25297: LD_EXP 95
25301: PUSH
25302: LD_VAR 0 5
25306: ARRAY
25307: PUSH
25308: LD_INT 1
25310: PLUS
25311: PPUSH
25312: CALL_OW 1
25316: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
25317: LD_ADDR_EXP 92
25321: PUSH
25322: LD_EXP 92
25326: PPUSH
25327: LD_VAR 0 5
25331: PUSH
25332: LD_EXP 92
25336: PUSH
25337: LD_VAR 0 5
25341: ARRAY
25342: PUSH
25343: LD_INT 1
25345: PLUS
25346: PUSH
25347: EMPTY
25348: LIST
25349: LIST
25350: PPUSH
25351: LD_VAR 0 2
25355: PUSH
25356: LD_VAR 0 4
25360: ARRAY
25361: PUSH
25362: LD_VAR 0 2
25366: PUSH
25367: LD_VAR 0 4
25371: ARRAY
25372: PPUSH
25373: CALL_OW 255
25377: PUSH
25378: EMPTY
25379: LIST
25380: LIST
25381: PPUSH
25382: CALL 32980 0 3
25386: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
25387: LD_VAR 0 2
25391: PUSH
25392: LD_VAR 0 4
25396: ARRAY
25397: PPUSH
25398: LD_VAR 0 1
25402: PPUSH
25403: CALL_OW 255
25407: PPUSH
25408: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
25412: LD_VAR 0 2
25416: PUSH
25417: LD_VAR 0 4
25421: ARRAY
25422: PPUSH
25423: CALL_OW 141
// end ;
25427: GO 25259
25429: POP
25430: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
25431: LD_VAR 0 1
25435: PPUSH
25436: LD_EXP 92
25440: PUSH
25441: LD_VAR 0 5
25445: ARRAY
25446: PUSH
25447: LD_INT 0
25449: PLUS
25450: PPUSH
25451: CALL_OW 505
// end ;
25455: LD_VAR 0 3
25459: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
25460: LD_INT 0
25462: PPUSH
25463: PPUSH
25464: PPUSH
25465: PPUSH
// if not hack in hackTanks then
25466: LD_VAR 0 1
25470: PUSH
25471: LD_EXP 91
25475: IN
25476: NOT
25477: IFFALSE 25481
// exit ;
25479: GO 25721
// index := GetElementIndex ( hackTanks , hack ) ;
25481: LD_ADDR_VAR 0 4
25485: PUSH
25486: LD_EXP 91
25490: PPUSH
25491: LD_VAR 0 1
25495: PPUSH
25496: CALL 32765 0 2
25500: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
25501: LD_ADDR_VAR 0 3
25505: PUSH
25506: DOUBLE
25507: LD_EXP 92
25511: PUSH
25512: LD_VAR 0 4
25516: ARRAY
25517: INC
25518: ST_TO_ADDR
25519: LD_INT 1
25521: PUSH
25522: FOR_DOWNTO
25523: IFFALSE 25695
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
25525: LD_ADDR_VAR 0 5
25529: PUSH
25530: LD_EXP 92
25534: PUSH
25535: LD_VAR 0 4
25539: ARRAY
25540: PUSH
25541: LD_VAR 0 3
25545: ARRAY
25546: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
25547: LD_VAR 0 5
25551: PUSH
25552: LD_INT 1
25554: ARRAY
25555: PPUSH
25556: CALL_OW 302
25560: NOT
25561: PUSH
25562: LD_VAR 0 5
25566: PUSH
25567: LD_INT 1
25569: ARRAY
25570: PPUSH
25571: CALL_OW 255
25575: PUSH
25576: LD_VAR 0 1
25580: PPUSH
25581: CALL_OW 255
25585: NONEQUAL
25586: OR
25587: IFFALSE 25693
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
25589: LD_VAR 0 5
25593: PUSH
25594: LD_INT 1
25596: ARRAY
25597: PPUSH
25598: CALL_OW 305
25602: PUSH
25603: LD_VAR 0 5
25607: PUSH
25608: LD_INT 1
25610: ARRAY
25611: PPUSH
25612: CALL_OW 255
25616: PUSH
25617: LD_VAR 0 1
25621: PPUSH
25622: CALL_OW 255
25626: EQUAL
25627: AND
25628: IFFALSE 25652
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
25630: LD_VAR 0 5
25634: PUSH
25635: LD_INT 1
25637: ARRAY
25638: PPUSH
25639: LD_VAR 0 5
25643: PUSH
25644: LD_INT 2
25646: ARRAY
25647: PPUSH
25648: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
25652: LD_ADDR_EXP 92
25656: PUSH
25657: LD_EXP 92
25661: PPUSH
25662: LD_VAR 0 4
25666: PPUSH
25667: LD_EXP 92
25671: PUSH
25672: LD_VAR 0 4
25676: ARRAY
25677: PPUSH
25678: LD_VAR 0 3
25682: PPUSH
25683: CALL_OW 3
25687: PPUSH
25688: CALL_OW 1
25692: ST_TO_ADDR
// end ; end ;
25693: GO 25522
25695: POP
25696: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
25697: LD_VAR 0 1
25701: PPUSH
25702: LD_EXP 92
25706: PUSH
25707: LD_VAR 0 4
25711: ARRAY
25712: PUSH
25713: LD_INT 0
25715: PLUS
25716: PPUSH
25717: CALL_OW 505
// end ;
25721: LD_VAR 0 2
25725: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
25726: LD_INT 0
25728: PPUSH
25729: PPUSH
25730: PPUSH
25731: PPUSH
// if not hack in hackTanks then
25732: LD_VAR 0 1
25736: PUSH
25737: LD_EXP 91
25741: IN
25742: NOT
25743: IFFALSE 25747
// exit ;
25745: GO 25832
// index := GetElementIndex ( hackTanks , hack ) ;
25747: LD_ADDR_VAR 0 5
25751: PUSH
25752: LD_EXP 91
25756: PPUSH
25757: LD_VAR 0 1
25761: PPUSH
25762: CALL 32765 0 2
25766: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
25767: LD_ADDR_VAR 0 4
25771: PUSH
25772: DOUBLE
25773: LD_INT 1
25775: DEC
25776: ST_TO_ADDR
25777: LD_EXP 92
25781: PUSH
25782: LD_VAR 0 5
25786: ARRAY
25787: PUSH
25788: FOR_TO
25789: IFFALSE 25830
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
25791: LD_EXP 92
25795: PUSH
25796: LD_VAR 0 5
25800: ARRAY
25801: PUSH
25802: LD_VAR 0 4
25806: ARRAY
25807: PUSH
25808: LD_INT 1
25810: ARRAY
25811: PUSH
25812: LD_VAR 0 2
25816: EQUAL
25817: IFFALSE 25828
// KillUnit ( vehicle ) ;
25819: LD_VAR 0 2
25823: PPUSH
25824: CALL_OW 66
25828: GO 25788
25830: POP
25831: POP
// end ;
25832: LD_VAR 0 3
25836: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
25837: LD_EXP 96
25841: NOT
25842: IFFALSE 25877
25844: GO 25846
25846: DISABLE
// begin initMiner := true ;
25847: LD_ADDR_EXP 96
25851: PUSH
25852: LD_INT 1
25854: ST_TO_ADDR
// minersList := [ ] ;
25855: LD_ADDR_EXP 97
25859: PUSH
25860: EMPTY
25861: ST_TO_ADDR
// minerMinesList := [ ] ;
25862: LD_ADDR_EXP 98
25866: PUSH
25867: EMPTY
25868: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
25869: LD_ADDR_EXP 99
25873: PUSH
25874: LD_INT 5
25876: ST_TO_ADDR
// end ;
25877: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
25878: LD_EXP 96
25882: PUSH
25883: LD_INT 34
25885: PUSH
25886: LD_INT 81
25888: PUSH
25889: EMPTY
25890: LIST
25891: LIST
25892: PPUSH
25893: CALL_OW 69
25897: AND
25898: IFFALSE 26359
25900: GO 25902
25902: DISABLE
25903: LD_INT 0
25905: PPUSH
25906: PPUSH
25907: PPUSH
25908: PPUSH
// begin enable ;
25909: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
25910: LD_ADDR_VAR 0 1
25914: PUSH
25915: LD_INT 34
25917: PUSH
25918: LD_INT 81
25920: PUSH
25921: EMPTY
25922: LIST
25923: LIST
25924: PPUSH
25925: CALL_OW 69
25929: PUSH
25930: FOR_IN
25931: IFFALSE 26003
// begin if not i in minersList then
25933: LD_VAR 0 1
25937: PUSH
25938: LD_EXP 97
25942: IN
25943: NOT
25944: IFFALSE 26001
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
25946: LD_ADDR_EXP 97
25950: PUSH
25951: LD_EXP 97
25955: PPUSH
25956: LD_EXP 97
25960: PUSH
25961: LD_INT 1
25963: PLUS
25964: PPUSH
25965: LD_VAR 0 1
25969: PPUSH
25970: CALL_OW 1
25974: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
25975: LD_ADDR_EXP 98
25979: PUSH
25980: LD_EXP 98
25984: PPUSH
25985: LD_EXP 98
25989: PUSH
25990: LD_INT 1
25992: PLUS
25993: PPUSH
25994: EMPTY
25995: PPUSH
25996: CALL_OW 1
26000: ST_TO_ADDR
// end end ;
26001: GO 25930
26003: POP
26004: POP
// for i := minerMinesList downto 1 do
26005: LD_ADDR_VAR 0 1
26009: PUSH
26010: DOUBLE
26011: LD_EXP 98
26015: INC
26016: ST_TO_ADDR
26017: LD_INT 1
26019: PUSH
26020: FOR_DOWNTO
26021: IFFALSE 26357
// begin if IsLive ( minersList [ i ] ) then
26023: LD_EXP 97
26027: PUSH
26028: LD_VAR 0 1
26032: ARRAY
26033: PPUSH
26034: CALL_OW 300
26038: IFFALSE 26066
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
26040: LD_EXP 97
26044: PUSH
26045: LD_VAR 0 1
26049: ARRAY
26050: PPUSH
26051: LD_EXP 98
26055: PUSH
26056: LD_VAR 0 1
26060: ARRAY
26061: PPUSH
26062: CALL_OW 505
// if not minerMinesList [ i ] then
26066: LD_EXP 98
26070: PUSH
26071: LD_VAR 0 1
26075: ARRAY
26076: NOT
26077: IFFALSE 26081
// continue ;
26079: GO 26020
// for j := minerMinesList [ i ] downto 1 do
26081: LD_ADDR_VAR 0 2
26085: PUSH
26086: DOUBLE
26087: LD_EXP 98
26091: PUSH
26092: LD_VAR 0 1
26096: ARRAY
26097: INC
26098: ST_TO_ADDR
26099: LD_INT 1
26101: PUSH
26102: FOR_DOWNTO
26103: IFFALSE 26353
// begin side := GetSide ( minersList [ i ] ) ;
26105: LD_ADDR_VAR 0 3
26109: PUSH
26110: LD_EXP 97
26114: PUSH
26115: LD_VAR 0 1
26119: ARRAY
26120: PPUSH
26121: CALL_OW 255
26125: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
26126: LD_ADDR_VAR 0 4
26130: PUSH
26131: LD_EXP 98
26135: PUSH
26136: LD_VAR 0 1
26140: ARRAY
26141: PUSH
26142: LD_VAR 0 2
26146: ARRAY
26147: PUSH
26148: LD_INT 1
26150: ARRAY
26151: PPUSH
26152: LD_EXP 98
26156: PUSH
26157: LD_VAR 0 1
26161: ARRAY
26162: PUSH
26163: LD_VAR 0 2
26167: ARRAY
26168: PUSH
26169: LD_INT 2
26171: ARRAY
26172: PPUSH
26173: CALL_OW 428
26177: ST_TO_ADDR
// if not tmp then
26178: LD_VAR 0 4
26182: NOT
26183: IFFALSE 26187
// continue ;
26185: GO 26102
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
26187: LD_VAR 0 4
26191: PUSH
26192: LD_INT 81
26194: PUSH
26195: LD_VAR 0 3
26199: PUSH
26200: EMPTY
26201: LIST
26202: LIST
26203: PPUSH
26204: CALL_OW 69
26208: IN
26209: PUSH
26210: LD_EXP 98
26214: PUSH
26215: LD_VAR 0 1
26219: ARRAY
26220: PUSH
26221: LD_VAR 0 2
26225: ARRAY
26226: PUSH
26227: LD_INT 1
26229: ARRAY
26230: PPUSH
26231: LD_EXP 98
26235: PUSH
26236: LD_VAR 0 1
26240: ARRAY
26241: PUSH
26242: LD_VAR 0 2
26246: ARRAY
26247: PUSH
26248: LD_INT 2
26250: ARRAY
26251: PPUSH
26252: CALL_OW 458
26256: AND
26257: IFFALSE 26351
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
26259: LD_EXP 98
26263: PUSH
26264: LD_VAR 0 1
26268: ARRAY
26269: PUSH
26270: LD_VAR 0 2
26274: ARRAY
26275: PUSH
26276: LD_INT 1
26278: ARRAY
26279: PPUSH
26280: LD_EXP 98
26284: PUSH
26285: LD_VAR 0 1
26289: ARRAY
26290: PUSH
26291: LD_VAR 0 2
26295: ARRAY
26296: PUSH
26297: LD_INT 2
26299: ARRAY
26300: PPUSH
26301: LD_VAR 0 3
26305: PPUSH
26306: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
26310: LD_ADDR_EXP 98
26314: PUSH
26315: LD_EXP 98
26319: PPUSH
26320: LD_VAR 0 1
26324: PPUSH
26325: LD_EXP 98
26329: PUSH
26330: LD_VAR 0 1
26334: ARRAY
26335: PPUSH
26336: LD_VAR 0 2
26340: PPUSH
26341: CALL_OW 3
26345: PPUSH
26346: CALL_OW 1
26350: ST_TO_ADDR
// end ; end ;
26351: GO 26102
26353: POP
26354: POP
// end ;
26355: GO 26020
26357: POP
26358: POP
// end ;
26359: PPOPN 4
26361: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
26362: LD_INT 0
26364: PPUSH
26365: PPUSH
// result := false ;
26366: LD_ADDR_VAR 0 4
26370: PUSH
26371: LD_INT 0
26373: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
26374: LD_VAR 0 1
26378: PPUSH
26379: CALL_OW 264
26383: PUSH
26384: LD_INT 81
26386: EQUAL
26387: NOT
26388: IFFALSE 26392
// exit ;
26390: GO 26632
// index := GetElementIndex ( minersList , unit ) ;
26392: LD_ADDR_VAR 0 5
26396: PUSH
26397: LD_EXP 97
26401: PPUSH
26402: LD_VAR 0 1
26406: PPUSH
26407: CALL 32765 0 2
26411: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
26412: LD_EXP 98
26416: PUSH
26417: LD_VAR 0 5
26421: ARRAY
26422: PUSH
26423: LD_EXP 99
26427: GREATEREQUAL
26428: IFFALSE 26432
// exit ;
26430: GO 26632
// ComMoveXY ( unit , x , y ) ;
26432: LD_VAR 0 1
26436: PPUSH
26437: LD_VAR 0 2
26441: PPUSH
26442: LD_VAR 0 3
26446: PPUSH
26447: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
26451: LD_INT 35
26453: PPUSH
26454: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
26458: LD_VAR 0 1
26462: PPUSH
26463: LD_VAR 0 2
26467: PPUSH
26468: LD_VAR 0 3
26472: PPUSH
26473: CALL 64028 0 3
26477: NOT
26478: PUSH
26479: LD_VAR 0 1
26483: PPUSH
26484: CALL_OW 314
26488: AND
26489: IFFALSE 26493
// exit ;
26491: GO 26632
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
26493: LD_VAR 0 2
26497: PPUSH
26498: LD_VAR 0 3
26502: PPUSH
26503: CALL_OW 428
26507: PUSH
26508: LD_VAR 0 1
26512: EQUAL
26513: PUSH
26514: LD_VAR 0 1
26518: PPUSH
26519: CALL_OW 314
26523: NOT
26524: AND
26525: IFFALSE 26451
// PlaySoundXY ( x , y , PlantMine ) ;
26527: LD_VAR 0 2
26531: PPUSH
26532: LD_VAR 0 3
26536: PPUSH
26537: LD_STRING PlantMine
26539: PPUSH
26540: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
26544: LD_VAR 0 2
26548: PPUSH
26549: LD_VAR 0 3
26553: PPUSH
26554: LD_VAR 0 1
26558: PPUSH
26559: CALL_OW 255
26563: PPUSH
26564: LD_INT 0
26566: PPUSH
26567: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
26571: LD_ADDR_EXP 98
26575: PUSH
26576: LD_EXP 98
26580: PPUSH
26581: LD_VAR 0 5
26585: PUSH
26586: LD_EXP 98
26590: PUSH
26591: LD_VAR 0 5
26595: ARRAY
26596: PUSH
26597: LD_INT 1
26599: PLUS
26600: PUSH
26601: EMPTY
26602: LIST
26603: LIST
26604: PPUSH
26605: LD_VAR 0 2
26609: PUSH
26610: LD_VAR 0 3
26614: PUSH
26615: EMPTY
26616: LIST
26617: LIST
26618: PPUSH
26619: CALL 32980 0 3
26623: ST_TO_ADDR
// result := true ;
26624: LD_ADDR_VAR 0 4
26628: PUSH
26629: LD_INT 1
26631: ST_TO_ADDR
// end ;
26632: LD_VAR 0 4
26636: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
26637: LD_INT 0
26639: PPUSH
26640: PPUSH
26641: PPUSH
// if not unit in minersList then
26642: LD_VAR 0 1
26646: PUSH
26647: LD_EXP 97
26651: IN
26652: NOT
26653: IFFALSE 26657
// exit ;
26655: GO 27049
// index := GetElementIndex ( minersList , unit ) ;
26657: LD_ADDR_VAR 0 6
26661: PUSH
26662: LD_EXP 97
26666: PPUSH
26667: LD_VAR 0 1
26671: PPUSH
26672: CALL 32765 0 2
26676: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
26677: LD_ADDR_VAR 0 5
26681: PUSH
26682: DOUBLE
26683: LD_EXP 98
26687: PUSH
26688: LD_VAR 0 6
26692: ARRAY
26693: INC
26694: ST_TO_ADDR
26695: LD_INT 1
26697: PUSH
26698: FOR_DOWNTO
26699: IFFALSE 26860
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
26701: LD_EXP 98
26705: PUSH
26706: LD_VAR 0 6
26710: ARRAY
26711: PUSH
26712: LD_VAR 0 5
26716: ARRAY
26717: PUSH
26718: LD_INT 1
26720: ARRAY
26721: PUSH
26722: LD_VAR 0 2
26726: EQUAL
26727: PUSH
26728: LD_EXP 98
26732: PUSH
26733: LD_VAR 0 6
26737: ARRAY
26738: PUSH
26739: LD_VAR 0 5
26743: ARRAY
26744: PUSH
26745: LD_INT 2
26747: ARRAY
26748: PUSH
26749: LD_VAR 0 3
26753: EQUAL
26754: AND
26755: IFFALSE 26858
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
26757: LD_EXP 98
26761: PUSH
26762: LD_VAR 0 6
26766: ARRAY
26767: PUSH
26768: LD_VAR 0 5
26772: ARRAY
26773: PUSH
26774: LD_INT 1
26776: ARRAY
26777: PPUSH
26778: LD_EXP 98
26782: PUSH
26783: LD_VAR 0 6
26787: ARRAY
26788: PUSH
26789: LD_VAR 0 5
26793: ARRAY
26794: PUSH
26795: LD_INT 2
26797: ARRAY
26798: PPUSH
26799: LD_VAR 0 1
26803: PPUSH
26804: CALL_OW 255
26808: PPUSH
26809: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
26813: LD_ADDR_EXP 98
26817: PUSH
26818: LD_EXP 98
26822: PPUSH
26823: LD_VAR 0 6
26827: PPUSH
26828: LD_EXP 98
26832: PUSH
26833: LD_VAR 0 6
26837: ARRAY
26838: PPUSH
26839: LD_VAR 0 5
26843: PPUSH
26844: CALL_OW 3
26848: PPUSH
26849: CALL_OW 1
26853: ST_TO_ADDR
// exit ;
26854: POP
26855: POP
26856: GO 27049
// end ; end ;
26858: GO 26698
26860: POP
26861: POP
// for i := minerMinesList [ index ] downto 1 do
26862: LD_ADDR_VAR 0 5
26866: PUSH
26867: DOUBLE
26868: LD_EXP 98
26872: PUSH
26873: LD_VAR 0 6
26877: ARRAY
26878: INC
26879: ST_TO_ADDR
26880: LD_INT 1
26882: PUSH
26883: FOR_DOWNTO
26884: IFFALSE 27047
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
26886: LD_EXP 98
26890: PUSH
26891: LD_VAR 0 6
26895: ARRAY
26896: PUSH
26897: LD_VAR 0 5
26901: ARRAY
26902: PUSH
26903: LD_INT 1
26905: ARRAY
26906: PPUSH
26907: LD_EXP 98
26911: PUSH
26912: LD_VAR 0 6
26916: ARRAY
26917: PUSH
26918: LD_VAR 0 5
26922: ARRAY
26923: PUSH
26924: LD_INT 2
26926: ARRAY
26927: PPUSH
26928: LD_VAR 0 2
26932: PPUSH
26933: LD_VAR 0 3
26937: PPUSH
26938: CALL_OW 298
26942: PUSH
26943: LD_INT 6
26945: LESS
26946: IFFALSE 27045
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
26948: LD_EXP 98
26952: PUSH
26953: LD_VAR 0 6
26957: ARRAY
26958: PUSH
26959: LD_VAR 0 5
26963: ARRAY
26964: PUSH
26965: LD_INT 1
26967: ARRAY
26968: PPUSH
26969: LD_EXP 98
26973: PUSH
26974: LD_VAR 0 6
26978: ARRAY
26979: PUSH
26980: LD_VAR 0 5
26984: ARRAY
26985: PUSH
26986: LD_INT 2
26988: ARRAY
26989: PPUSH
26990: LD_VAR 0 1
26994: PPUSH
26995: CALL_OW 255
26999: PPUSH
27000: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
27004: LD_ADDR_EXP 98
27008: PUSH
27009: LD_EXP 98
27013: PPUSH
27014: LD_VAR 0 6
27018: PPUSH
27019: LD_EXP 98
27023: PUSH
27024: LD_VAR 0 6
27028: ARRAY
27029: PPUSH
27030: LD_VAR 0 5
27034: PPUSH
27035: CALL_OW 3
27039: PPUSH
27040: CALL_OW 1
27044: ST_TO_ADDR
// end ; end ;
27045: GO 26883
27047: POP
27048: POP
// end ;
27049: LD_VAR 0 4
27053: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
27054: LD_INT 0
27056: PPUSH
27057: PPUSH
27058: PPUSH
27059: PPUSH
27060: PPUSH
27061: PPUSH
27062: PPUSH
27063: PPUSH
27064: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
27065: LD_VAR 0 1
27069: PPUSH
27070: CALL_OW 264
27074: PUSH
27075: LD_INT 81
27077: EQUAL
27078: NOT
27079: PUSH
27080: LD_VAR 0 1
27084: PUSH
27085: LD_EXP 97
27089: IN
27090: NOT
27091: OR
27092: IFFALSE 27096
// exit ;
27094: GO 27418
// index := GetElementIndex ( minersList , unit ) ;
27096: LD_ADDR_VAR 0 6
27100: PUSH
27101: LD_EXP 97
27105: PPUSH
27106: LD_VAR 0 1
27110: PPUSH
27111: CALL 32765 0 2
27115: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
27116: LD_ADDR_VAR 0 8
27120: PUSH
27121: LD_EXP 99
27125: PUSH
27126: LD_EXP 98
27130: PUSH
27131: LD_VAR 0 6
27135: ARRAY
27136: MINUS
27137: ST_TO_ADDR
// if not minesFreeAmount then
27138: LD_VAR 0 8
27142: NOT
27143: IFFALSE 27147
// exit ;
27145: GO 27418
// tmp := [ ] ;
27147: LD_ADDR_VAR 0 7
27151: PUSH
27152: EMPTY
27153: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
27154: LD_ADDR_VAR 0 5
27158: PUSH
27159: DOUBLE
27160: LD_INT 1
27162: DEC
27163: ST_TO_ADDR
27164: LD_VAR 0 8
27168: PUSH
27169: FOR_TO
27170: IFFALSE 27365
// begin _d := rand ( 0 , 5 ) ;
27172: LD_ADDR_VAR 0 11
27176: PUSH
27177: LD_INT 0
27179: PPUSH
27180: LD_INT 5
27182: PPUSH
27183: CALL_OW 12
27187: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
27188: LD_ADDR_VAR 0 12
27192: PUSH
27193: LD_INT 2
27195: PPUSH
27196: LD_INT 6
27198: PPUSH
27199: CALL_OW 12
27203: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
27204: LD_ADDR_VAR 0 9
27208: PUSH
27209: LD_VAR 0 2
27213: PPUSH
27214: LD_VAR 0 11
27218: PPUSH
27219: LD_VAR 0 12
27223: PPUSH
27224: CALL_OW 272
27228: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
27229: LD_ADDR_VAR 0 10
27233: PUSH
27234: LD_VAR 0 3
27238: PPUSH
27239: LD_VAR 0 11
27243: PPUSH
27244: LD_VAR 0 12
27248: PPUSH
27249: CALL_OW 273
27253: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
27254: LD_VAR 0 9
27258: PPUSH
27259: LD_VAR 0 10
27263: PPUSH
27264: CALL_OW 488
27268: PUSH
27269: LD_VAR 0 9
27273: PUSH
27274: LD_VAR 0 10
27278: PUSH
27279: EMPTY
27280: LIST
27281: LIST
27282: PUSH
27283: LD_VAR 0 7
27287: IN
27288: NOT
27289: AND
27290: PUSH
27291: LD_VAR 0 9
27295: PPUSH
27296: LD_VAR 0 10
27300: PPUSH
27301: CALL_OW 458
27305: NOT
27306: AND
27307: IFFALSE 27349
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
27309: LD_ADDR_VAR 0 7
27313: PUSH
27314: LD_VAR 0 7
27318: PPUSH
27319: LD_VAR 0 7
27323: PUSH
27324: LD_INT 1
27326: PLUS
27327: PPUSH
27328: LD_VAR 0 9
27332: PUSH
27333: LD_VAR 0 10
27337: PUSH
27338: EMPTY
27339: LIST
27340: LIST
27341: PPUSH
27342: CALL_OW 1
27346: ST_TO_ADDR
27347: GO 27363
// i := i - 1 ;
27349: LD_ADDR_VAR 0 5
27353: PUSH
27354: LD_VAR 0 5
27358: PUSH
27359: LD_INT 1
27361: MINUS
27362: ST_TO_ADDR
// end ;
27363: GO 27169
27365: POP
27366: POP
// for i in tmp do
27367: LD_ADDR_VAR 0 5
27371: PUSH
27372: LD_VAR 0 7
27376: PUSH
27377: FOR_IN
27378: IFFALSE 27416
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
27380: LD_VAR 0 1
27384: PPUSH
27385: LD_VAR 0 5
27389: PUSH
27390: LD_INT 1
27392: ARRAY
27393: PPUSH
27394: LD_VAR 0 5
27398: PUSH
27399: LD_INT 2
27401: ARRAY
27402: PPUSH
27403: CALL 26362 0 3
27407: NOT
27408: IFFALSE 27414
// exit ;
27410: POP
27411: POP
27412: GO 27418
27414: GO 27377
27416: POP
27417: POP
// end ;
27418: LD_VAR 0 4
27422: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
27423: LD_INT 0
27425: PPUSH
27426: PPUSH
27427: PPUSH
27428: PPUSH
27429: PPUSH
27430: PPUSH
27431: PPUSH
// if not GetClass ( unit ) = class_sniper then
27432: LD_VAR 0 1
27436: PPUSH
27437: CALL_OW 257
27441: PUSH
27442: LD_INT 5
27444: EQUAL
27445: NOT
27446: IFFALSE 27450
// exit ;
27448: GO 27838
// dist := 8 ;
27450: LD_ADDR_VAR 0 5
27454: PUSH
27455: LD_INT 8
27457: ST_TO_ADDR
// viewRange := 12 ;
27458: LD_ADDR_VAR 0 7
27462: PUSH
27463: LD_INT 12
27465: ST_TO_ADDR
// side := GetSide ( unit ) ;
27466: LD_ADDR_VAR 0 6
27470: PUSH
27471: LD_VAR 0 1
27475: PPUSH
27476: CALL_OW 255
27480: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
27481: LD_INT 61
27483: PPUSH
27484: LD_VAR 0 6
27488: PPUSH
27489: CALL_OW 321
27493: PUSH
27494: LD_INT 2
27496: EQUAL
27497: IFFALSE 27507
// viewRange := 16 ;
27499: LD_ADDR_VAR 0 7
27503: PUSH
27504: LD_INT 16
27506: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
27507: LD_VAR 0 1
27511: PPUSH
27512: LD_VAR 0 2
27516: PPUSH
27517: LD_VAR 0 3
27521: PPUSH
27522: CALL_OW 297
27526: PUSH
27527: LD_VAR 0 5
27531: GREATER
27532: IFFALSE 27611
// begin ComMoveXY ( unit , x , y ) ;
27534: LD_VAR 0 1
27538: PPUSH
27539: LD_VAR 0 2
27543: PPUSH
27544: LD_VAR 0 3
27548: PPUSH
27549: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
27553: LD_INT 35
27555: PPUSH
27556: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
27560: LD_VAR 0 1
27564: PPUSH
27565: LD_VAR 0 2
27569: PPUSH
27570: LD_VAR 0 3
27574: PPUSH
27575: CALL 64028 0 3
27579: NOT
27580: IFFALSE 27584
// exit ;
27582: GO 27838
// until GetDistUnitXY ( unit , x , y ) < dist ;
27584: LD_VAR 0 1
27588: PPUSH
27589: LD_VAR 0 2
27593: PPUSH
27594: LD_VAR 0 3
27598: PPUSH
27599: CALL_OW 297
27603: PUSH
27604: LD_VAR 0 5
27608: LESS
27609: IFFALSE 27553
// end ; ComTurnXY ( unit , x , y ) ;
27611: LD_VAR 0 1
27615: PPUSH
27616: LD_VAR 0 2
27620: PPUSH
27621: LD_VAR 0 3
27625: PPUSH
27626: CALL_OW 118
// wait ( 5 ) ;
27630: LD_INT 5
27632: PPUSH
27633: CALL_OW 67
// _d := GetDir ( unit ) ;
27637: LD_ADDR_VAR 0 10
27641: PUSH
27642: LD_VAR 0 1
27646: PPUSH
27647: CALL_OW 254
27651: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
27652: LD_ADDR_VAR 0 8
27656: PUSH
27657: LD_VAR 0 1
27661: PPUSH
27662: CALL_OW 250
27666: PPUSH
27667: LD_VAR 0 10
27671: PPUSH
27672: LD_VAR 0 5
27676: PPUSH
27677: CALL_OW 272
27681: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
27682: LD_ADDR_VAR 0 9
27686: PUSH
27687: LD_VAR 0 1
27691: PPUSH
27692: CALL_OW 251
27696: PPUSH
27697: LD_VAR 0 10
27701: PPUSH
27702: LD_VAR 0 5
27706: PPUSH
27707: CALL_OW 273
27711: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
27712: LD_VAR 0 8
27716: PPUSH
27717: LD_VAR 0 9
27721: PPUSH
27722: CALL_OW 488
27726: NOT
27727: IFFALSE 27731
// exit ;
27729: GO 27838
// ComAnimCustom ( unit , 1 ) ;
27731: LD_VAR 0 1
27735: PPUSH
27736: LD_INT 1
27738: PPUSH
27739: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
27743: LD_VAR 0 8
27747: PPUSH
27748: LD_VAR 0 9
27752: PPUSH
27753: LD_VAR 0 6
27757: PPUSH
27758: LD_VAR 0 7
27762: PPUSH
27763: CALL_OW 330
// repeat wait ( 1 ) ;
27767: LD_INT 1
27769: PPUSH
27770: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
27774: LD_VAR 0 1
27778: PPUSH
27779: CALL_OW 316
27783: PUSH
27784: LD_VAR 0 1
27788: PPUSH
27789: CALL_OW 314
27793: OR
27794: PUSH
27795: LD_VAR 0 1
27799: PPUSH
27800: CALL_OW 302
27804: NOT
27805: OR
27806: PUSH
27807: LD_VAR 0 1
27811: PPUSH
27812: CALL_OW 301
27816: OR
27817: IFFALSE 27767
// RemoveSeeing ( _x , _y , side ) ;
27819: LD_VAR 0 8
27823: PPUSH
27824: LD_VAR 0 9
27828: PPUSH
27829: LD_VAR 0 6
27833: PPUSH
27834: CALL_OW 331
// end ; end_of_file
27838: LD_VAR 0 4
27842: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
27843: LD_INT 0
27845: PPUSH
27846: PPUSH
// if exist_mode then
27847: LD_VAR 0 2
27851: IFFALSE 27876
// unit := CreateCharacter ( prefix & ident ) else
27853: LD_ADDR_VAR 0 5
27857: PUSH
27858: LD_VAR 0 3
27862: PUSH
27863: LD_VAR 0 1
27867: STR
27868: PPUSH
27869: CALL_OW 34
27873: ST_TO_ADDR
27874: GO 27891
// unit := NewCharacter ( ident ) ;
27876: LD_ADDR_VAR 0 5
27880: PUSH
27881: LD_VAR 0 1
27885: PPUSH
27886: CALL_OW 25
27890: ST_TO_ADDR
// result := unit ;
27891: LD_ADDR_VAR 0 4
27895: PUSH
27896: LD_VAR 0 5
27900: ST_TO_ADDR
// end ;
27901: LD_VAR 0 4
27905: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
27906: LD_INT 0
27908: PPUSH
27909: PPUSH
// if not side or not nation then
27910: LD_VAR 0 1
27914: NOT
27915: PUSH
27916: LD_VAR 0 2
27920: NOT
27921: OR
27922: IFFALSE 27926
// exit ;
27924: GO 28694
// case nation of nation_american :
27926: LD_VAR 0 2
27930: PUSH
27931: LD_INT 1
27933: DOUBLE
27934: EQUAL
27935: IFTRUE 27939
27937: GO 28153
27939: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
27940: LD_ADDR_VAR 0 4
27944: PUSH
27945: LD_INT 35
27947: PUSH
27948: LD_INT 45
27950: PUSH
27951: LD_INT 46
27953: PUSH
27954: LD_INT 47
27956: PUSH
27957: LD_INT 82
27959: PUSH
27960: LD_INT 83
27962: PUSH
27963: LD_INT 84
27965: PUSH
27966: LD_INT 85
27968: PUSH
27969: LD_INT 86
27971: PUSH
27972: LD_INT 1
27974: PUSH
27975: LD_INT 2
27977: PUSH
27978: LD_INT 6
27980: PUSH
27981: LD_INT 15
27983: PUSH
27984: LD_INT 16
27986: PUSH
27987: LD_INT 7
27989: PUSH
27990: LD_INT 12
27992: PUSH
27993: LD_INT 13
27995: PUSH
27996: LD_INT 10
27998: PUSH
27999: LD_INT 14
28001: PUSH
28002: LD_INT 20
28004: PUSH
28005: LD_INT 21
28007: PUSH
28008: LD_INT 22
28010: PUSH
28011: LD_INT 25
28013: PUSH
28014: LD_INT 32
28016: PUSH
28017: LD_INT 27
28019: PUSH
28020: LD_INT 36
28022: PUSH
28023: LD_INT 69
28025: PUSH
28026: LD_INT 39
28028: PUSH
28029: LD_INT 34
28031: PUSH
28032: LD_INT 40
28034: PUSH
28035: LD_INT 48
28037: PUSH
28038: LD_INT 49
28040: PUSH
28041: LD_INT 50
28043: PUSH
28044: LD_INT 51
28046: PUSH
28047: LD_INT 52
28049: PUSH
28050: LD_INT 53
28052: PUSH
28053: LD_INT 54
28055: PUSH
28056: LD_INT 55
28058: PUSH
28059: LD_INT 56
28061: PUSH
28062: LD_INT 57
28064: PUSH
28065: LD_INT 58
28067: PUSH
28068: LD_INT 59
28070: PUSH
28071: LD_INT 60
28073: PUSH
28074: LD_INT 61
28076: PUSH
28077: LD_INT 62
28079: PUSH
28080: LD_INT 80
28082: PUSH
28083: LD_INT 82
28085: PUSH
28086: LD_INT 83
28088: PUSH
28089: LD_INT 84
28091: PUSH
28092: LD_INT 85
28094: PUSH
28095: LD_INT 86
28097: PUSH
28098: EMPTY
28099: LIST
28100: LIST
28101: LIST
28102: LIST
28103: LIST
28104: LIST
28105: LIST
28106: LIST
28107: LIST
28108: LIST
28109: LIST
28110: LIST
28111: LIST
28112: LIST
28113: LIST
28114: LIST
28115: LIST
28116: LIST
28117: LIST
28118: LIST
28119: LIST
28120: LIST
28121: LIST
28122: LIST
28123: LIST
28124: LIST
28125: LIST
28126: LIST
28127: LIST
28128: LIST
28129: LIST
28130: LIST
28131: LIST
28132: LIST
28133: LIST
28134: LIST
28135: LIST
28136: LIST
28137: LIST
28138: LIST
28139: LIST
28140: LIST
28141: LIST
28142: LIST
28143: LIST
28144: LIST
28145: LIST
28146: LIST
28147: LIST
28148: LIST
28149: LIST
28150: ST_TO_ADDR
28151: GO 28618
28153: LD_INT 2
28155: DOUBLE
28156: EQUAL
28157: IFTRUE 28161
28159: GO 28387
28161: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
28162: LD_ADDR_VAR 0 4
28166: PUSH
28167: LD_INT 35
28169: PUSH
28170: LD_INT 45
28172: PUSH
28173: LD_INT 46
28175: PUSH
28176: LD_INT 47
28178: PUSH
28179: LD_INT 82
28181: PUSH
28182: LD_INT 83
28184: PUSH
28185: LD_INT 84
28187: PUSH
28188: LD_INT 85
28190: PUSH
28191: LD_INT 87
28193: PUSH
28194: LD_INT 70
28196: PUSH
28197: LD_INT 1
28199: PUSH
28200: LD_INT 11
28202: PUSH
28203: LD_INT 3
28205: PUSH
28206: LD_INT 4
28208: PUSH
28209: LD_INT 5
28211: PUSH
28212: LD_INT 6
28214: PUSH
28215: LD_INT 15
28217: PUSH
28218: LD_INT 18
28220: PUSH
28221: LD_INT 7
28223: PUSH
28224: LD_INT 17
28226: PUSH
28227: LD_INT 8
28229: PUSH
28230: LD_INT 20
28232: PUSH
28233: LD_INT 21
28235: PUSH
28236: LD_INT 22
28238: PUSH
28239: LD_INT 72
28241: PUSH
28242: LD_INT 26
28244: PUSH
28245: LD_INT 69
28247: PUSH
28248: LD_INT 39
28250: PUSH
28251: LD_INT 40
28253: PUSH
28254: LD_INT 41
28256: PUSH
28257: LD_INT 42
28259: PUSH
28260: LD_INT 43
28262: PUSH
28263: LD_INT 48
28265: PUSH
28266: LD_INT 49
28268: PUSH
28269: LD_INT 50
28271: PUSH
28272: LD_INT 51
28274: PUSH
28275: LD_INT 52
28277: PUSH
28278: LD_INT 53
28280: PUSH
28281: LD_INT 54
28283: PUSH
28284: LD_INT 55
28286: PUSH
28287: LD_INT 56
28289: PUSH
28290: LD_INT 60
28292: PUSH
28293: LD_INT 61
28295: PUSH
28296: LD_INT 62
28298: PUSH
28299: LD_INT 66
28301: PUSH
28302: LD_INT 67
28304: PUSH
28305: LD_INT 68
28307: PUSH
28308: LD_INT 81
28310: PUSH
28311: LD_INT 82
28313: PUSH
28314: LD_INT 83
28316: PUSH
28317: LD_INT 84
28319: PUSH
28320: LD_INT 85
28322: PUSH
28323: LD_INT 87
28325: PUSH
28326: LD_INT 88
28328: PUSH
28329: EMPTY
28330: LIST
28331: LIST
28332: LIST
28333: LIST
28334: LIST
28335: LIST
28336: LIST
28337: LIST
28338: LIST
28339: LIST
28340: LIST
28341: LIST
28342: LIST
28343: LIST
28344: LIST
28345: LIST
28346: LIST
28347: LIST
28348: LIST
28349: LIST
28350: LIST
28351: LIST
28352: LIST
28353: LIST
28354: LIST
28355: LIST
28356: LIST
28357: LIST
28358: LIST
28359: LIST
28360: LIST
28361: LIST
28362: LIST
28363: LIST
28364: LIST
28365: LIST
28366: LIST
28367: LIST
28368: LIST
28369: LIST
28370: LIST
28371: LIST
28372: LIST
28373: LIST
28374: LIST
28375: LIST
28376: LIST
28377: LIST
28378: LIST
28379: LIST
28380: LIST
28381: LIST
28382: LIST
28383: LIST
28384: ST_TO_ADDR
28385: GO 28618
28387: LD_INT 3
28389: DOUBLE
28390: EQUAL
28391: IFTRUE 28395
28393: GO 28617
28395: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
28396: LD_ADDR_VAR 0 4
28400: PUSH
28401: LD_INT 46
28403: PUSH
28404: LD_INT 47
28406: PUSH
28407: LD_INT 1
28409: PUSH
28410: LD_INT 2
28412: PUSH
28413: LD_INT 82
28415: PUSH
28416: LD_INT 83
28418: PUSH
28419: LD_INT 84
28421: PUSH
28422: LD_INT 85
28424: PUSH
28425: LD_INT 86
28427: PUSH
28428: LD_INT 11
28430: PUSH
28431: LD_INT 9
28433: PUSH
28434: LD_INT 20
28436: PUSH
28437: LD_INT 19
28439: PUSH
28440: LD_INT 21
28442: PUSH
28443: LD_INT 24
28445: PUSH
28446: LD_INT 22
28448: PUSH
28449: LD_INT 25
28451: PUSH
28452: LD_INT 28
28454: PUSH
28455: LD_INT 29
28457: PUSH
28458: LD_INT 30
28460: PUSH
28461: LD_INT 31
28463: PUSH
28464: LD_INT 37
28466: PUSH
28467: LD_INT 38
28469: PUSH
28470: LD_INT 32
28472: PUSH
28473: LD_INT 27
28475: PUSH
28476: LD_INT 33
28478: PUSH
28479: LD_INT 69
28481: PUSH
28482: LD_INT 39
28484: PUSH
28485: LD_INT 34
28487: PUSH
28488: LD_INT 40
28490: PUSH
28491: LD_INT 71
28493: PUSH
28494: LD_INT 23
28496: PUSH
28497: LD_INT 44
28499: PUSH
28500: LD_INT 48
28502: PUSH
28503: LD_INT 49
28505: PUSH
28506: LD_INT 50
28508: PUSH
28509: LD_INT 51
28511: PUSH
28512: LD_INT 52
28514: PUSH
28515: LD_INT 53
28517: PUSH
28518: LD_INT 54
28520: PUSH
28521: LD_INT 55
28523: PUSH
28524: LD_INT 56
28526: PUSH
28527: LD_INT 57
28529: PUSH
28530: LD_INT 58
28532: PUSH
28533: LD_INT 59
28535: PUSH
28536: LD_INT 63
28538: PUSH
28539: LD_INT 64
28541: PUSH
28542: LD_INT 65
28544: PUSH
28545: LD_INT 82
28547: PUSH
28548: LD_INT 83
28550: PUSH
28551: LD_INT 84
28553: PUSH
28554: LD_INT 85
28556: PUSH
28557: LD_INT 86
28559: PUSH
28560: EMPTY
28561: LIST
28562: LIST
28563: LIST
28564: LIST
28565: LIST
28566: LIST
28567: LIST
28568: LIST
28569: LIST
28570: LIST
28571: LIST
28572: LIST
28573: LIST
28574: LIST
28575: LIST
28576: LIST
28577: LIST
28578: LIST
28579: LIST
28580: LIST
28581: LIST
28582: LIST
28583: LIST
28584: LIST
28585: LIST
28586: LIST
28587: LIST
28588: LIST
28589: LIST
28590: LIST
28591: LIST
28592: LIST
28593: LIST
28594: LIST
28595: LIST
28596: LIST
28597: LIST
28598: LIST
28599: LIST
28600: LIST
28601: LIST
28602: LIST
28603: LIST
28604: LIST
28605: LIST
28606: LIST
28607: LIST
28608: LIST
28609: LIST
28610: LIST
28611: LIST
28612: LIST
28613: LIST
28614: ST_TO_ADDR
28615: GO 28618
28617: POP
// if state > - 1 and state < 3 then
28618: LD_VAR 0 3
28622: PUSH
28623: LD_INT 1
28625: NEG
28626: GREATER
28627: PUSH
28628: LD_VAR 0 3
28632: PUSH
28633: LD_INT 3
28635: LESS
28636: AND
28637: IFFALSE 28694
// for i in result do
28639: LD_ADDR_VAR 0 5
28643: PUSH
28644: LD_VAR 0 4
28648: PUSH
28649: FOR_IN
28650: IFFALSE 28692
// if GetTech ( i , side ) <> state then
28652: LD_VAR 0 5
28656: PPUSH
28657: LD_VAR 0 1
28661: PPUSH
28662: CALL_OW 321
28666: PUSH
28667: LD_VAR 0 3
28671: NONEQUAL
28672: IFFALSE 28690
// result := result diff i ;
28674: LD_ADDR_VAR 0 4
28678: PUSH
28679: LD_VAR 0 4
28683: PUSH
28684: LD_VAR 0 5
28688: DIFF
28689: ST_TO_ADDR
28690: GO 28649
28692: POP
28693: POP
// end ;
28694: LD_VAR 0 4
28698: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
28699: LD_INT 0
28701: PPUSH
28702: PPUSH
28703: PPUSH
// result := true ;
28704: LD_ADDR_VAR 0 3
28708: PUSH
28709: LD_INT 1
28711: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
28712: LD_ADDR_VAR 0 5
28716: PUSH
28717: LD_VAR 0 2
28721: PPUSH
28722: CALL_OW 480
28726: ST_TO_ADDR
// if not tmp then
28727: LD_VAR 0 5
28731: NOT
28732: IFFALSE 28736
// exit ;
28734: GO 28785
// for i in tmp do
28736: LD_ADDR_VAR 0 4
28740: PUSH
28741: LD_VAR 0 5
28745: PUSH
28746: FOR_IN
28747: IFFALSE 28783
// if GetTech ( i , side ) <> state_researched then
28749: LD_VAR 0 4
28753: PPUSH
28754: LD_VAR 0 1
28758: PPUSH
28759: CALL_OW 321
28763: PUSH
28764: LD_INT 2
28766: NONEQUAL
28767: IFFALSE 28781
// begin result := false ;
28769: LD_ADDR_VAR 0 3
28773: PUSH
28774: LD_INT 0
28776: ST_TO_ADDR
// exit ;
28777: POP
28778: POP
28779: GO 28785
// end ;
28781: GO 28746
28783: POP
28784: POP
// end ;
28785: LD_VAR 0 3
28789: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
28790: LD_INT 0
28792: PPUSH
28793: PPUSH
28794: PPUSH
28795: PPUSH
28796: PPUSH
28797: PPUSH
28798: PPUSH
28799: PPUSH
28800: PPUSH
28801: PPUSH
28802: PPUSH
28803: PPUSH
28804: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
28805: LD_VAR 0 1
28809: NOT
28810: PUSH
28811: LD_VAR 0 1
28815: PPUSH
28816: CALL_OW 257
28820: PUSH
28821: LD_INT 9
28823: NONEQUAL
28824: OR
28825: IFFALSE 28829
// exit ;
28827: GO 29402
// side := GetSide ( unit ) ;
28829: LD_ADDR_VAR 0 9
28833: PUSH
28834: LD_VAR 0 1
28838: PPUSH
28839: CALL_OW 255
28843: ST_TO_ADDR
// tech_space := tech_spacanom ;
28844: LD_ADDR_VAR 0 12
28848: PUSH
28849: LD_INT 29
28851: ST_TO_ADDR
// tech_time := tech_taurad ;
28852: LD_ADDR_VAR 0 13
28856: PUSH
28857: LD_INT 28
28859: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
28860: LD_ADDR_VAR 0 11
28864: PUSH
28865: LD_VAR 0 1
28869: PPUSH
28870: CALL_OW 310
28874: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
28875: LD_VAR 0 11
28879: PPUSH
28880: CALL_OW 247
28884: PUSH
28885: LD_INT 2
28887: EQUAL
28888: IFFALSE 28892
// exit ;
28890: GO 29402
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
28892: LD_ADDR_VAR 0 8
28896: PUSH
28897: LD_INT 81
28899: PUSH
28900: LD_VAR 0 9
28904: PUSH
28905: EMPTY
28906: LIST
28907: LIST
28908: PUSH
28909: LD_INT 3
28911: PUSH
28912: LD_INT 21
28914: PUSH
28915: LD_INT 3
28917: PUSH
28918: EMPTY
28919: LIST
28920: LIST
28921: PUSH
28922: EMPTY
28923: LIST
28924: LIST
28925: PUSH
28926: EMPTY
28927: LIST
28928: LIST
28929: PPUSH
28930: CALL_OW 69
28934: ST_TO_ADDR
// if not tmp then
28935: LD_VAR 0 8
28939: NOT
28940: IFFALSE 28944
// exit ;
28942: GO 29402
// if in_unit then
28944: LD_VAR 0 11
28948: IFFALSE 28972
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
28950: LD_ADDR_VAR 0 10
28954: PUSH
28955: LD_VAR 0 8
28959: PPUSH
28960: LD_VAR 0 11
28964: PPUSH
28965: CALL_OW 74
28969: ST_TO_ADDR
28970: GO 28992
// enemy := NearestUnitToUnit ( tmp , unit ) ;
28972: LD_ADDR_VAR 0 10
28976: PUSH
28977: LD_VAR 0 8
28981: PPUSH
28982: LD_VAR 0 1
28986: PPUSH
28987: CALL_OW 74
28991: ST_TO_ADDR
// if not enemy then
28992: LD_VAR 0 10
28996: NOT
28997: IFFALSE 29001
// exit ;
28999: GO 29402
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
29001: LD_VAR 0 11
29005: PUSH
29006: LD_VAR 0 11
29010: PPUSH
29011: LD_VAR 0 10
29015: PPUSH
29016: CALL_OW 296
29020: PUSH
29021: LD_INT 13
29023: GREATER
29024: AND
29025: PUSH
29026: LD_VAR 0 1
29030: PPUSH
29031: LD_VAR 0 10
29035: PPUSH
29036: CALL_OW 296
29040: PUSH
29041: LD_INT 12
29043: GREATER
29044: OR
29045: IFFALSE 29049
// exit ;
29047: GO 29402
// missile := [ 1 ] ;
29049: LD_ADDR_VAR 0 14
29053: PUSH
29054: LD_INT 1
29056: PUSH
29057: EMPTY
29058: LIST
29059: ST_TO_ADDR
// if Researched ( side , tech_space ) then
29060: LD_VAR 0 9
29064: PPUSH
29065: LD_VAR 0 12
29069: PPUSH
29070: CALL_OW 325
29074: IFFALSE 29103
// missile := Replace ( missile , missile + 1 , 2 ) ;
29076: LD_ADDR_VAR 0 14
29080: PUSH
29081: LD_VAR 0 14
29085: PPUSH
29086: LD_VAR 0 14
29090: PUSH
29091: LD_INT 1
29093: PLUS
29094: PPUSH
29095: LD_INT 2
29097: PPUSH
29098: CALL_OW 1
29102: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
29103: LD_VAR 0 9
29107: PPUSH
29108: LD_VAR 0 13
29112: PPUSH
29113: CALL_OW 325
29117: PUSH
29118: LD_VAR 0 10
29122: PPUSH
29123: CALL_OW 255
29127: PPUSH
29128: LD_VAR 0 13
29132: PPUSH
29133: CALL_OW 325
29137: NOT
29138: AND
29139: IFFALSE 29168
// missile := Replace ( missile , missile + 1 , 3 ) ;
29141: LD_ADDR_VAR 0 14
29145: PUSH
29146: LD_VAR 0 14
29150: PPUSH
29151: LD_VAR 0 14
29155: PUSH
29156: LD_INT 1
29158: PLUS
29159: PPUSH
29160: LD_INT 3
29162: PPUSH
29163: CALL_OW 1
29167: ST_TO_ADDR
// if missile < 2 then
29168: LD_VAR 0 14
29172: PUSH
29173: LD_INT 2
29175: LESS
29176: IFFALSE 29180
// exit ;
29178: GO 29402
// x := GetX ( enemy ) ;
29180: LD_ADDR_VAR 0 4
29184: PUSH
29185: LD_VAR 0 10
29189: PPUSH
29190: CALL_OW 250
29194: ST_TO_ADDR
// y := GetY ( enemy ) ;
29195: LD_ADDR_VAR 0 5
29199: PUSH
29200: LD_VAR 0 10
29204: PPUSH
29205: CALL_OW 251
29209: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
29210: LD_ADDR_VAR 0 6
29214: PUSH
29215: LD_VAR 0 4
29219: PUSH
29220: LD_INT 1
29222: NEG
29223: PPUSH
29224: LD_INT 1
29226: PPUSH
29227: CALL_OW 12
29231: PLUS
29232: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
29233: LD_ADDR_VAR 0 7
29237: PUSH
29238: LD_VAR 0 5
29242: PUSH
29243: LD_INT 1
29245: NEG
29246: PPUSH
29247: LD_INT 1
29249: PPUSH
29250: CALL_OW 12
29254: PLUS
29255: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
29256: LD_VAR 0 6
29260: PPUSH
29261: LD_VAR 0 7
29265: PPUSH
29266: CALL_OW 488
29270: NOT
29271: IFFALSE 29293
// begin _x := x ;
29273: LD_ADDR_VAR 0 6
29277: PUSH
29278: LD_VAR 0 4
29282: ST_TO_ADDR
// _y := y ;
29283: LD_ADDR_VAR 0 7
29287: PUSH
29288: LD_VAR 0 5
29292: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
29293: LD_ADDR_VAR 0 3
29297: PUSH
29298: LD_INT 1
29300: PPUSH
29301: LD_VAR 0 14
29305: PPUSH
29306: CALL_OW 12
29310: ST_TO_ADDR
// case i of 1 :
29311: LD_VAR 0 3
29315: PUSH
29316: LD_INT 1
29318: DOUBLE
29319: EQUAL
29320: IFTRUE 29324
29322: GO 29341
29324: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
29325: LD_VAR 0 1
29329: PPUSH
29330: LD_VAR 0 10
29334: PPUSH
29335: CALL_OW 115
29339: GO 29402
29341: LD_INT 2
29343: DOUBLE
29344: EQUAL
29345: IFTRUE 29349
29347: GO 29371
29349: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
29350: LD_VAR 0 1
29354: PPUSH
29355: LD_VAR 0 6
29359: PPUSH
29360: LD_VAR 0 7
29364: PPUSH
29365: CALL_OW 153
29369: GO 29402
29371: LD_INT 3
29373: DOUBLE
29374: EQUAL
29375: IFTRUE 29379
29377: GO 29401
29379: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
29380: LD_VAR 0 1
29384: PPUSH
29385: LD_VAR 0 6
29389: PPUSH
29390: LD_VAR 0 7
29394: PPUSH
29395: CALL_OW 154
29399: GO 29402
29401: POP
// end ;
29402: LD_VAR 0 2
29406: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
29407: LD_INT 0
29409: PPUSH
29410: PPUSH
29411: PPUSH
29412: PPUSH
29413: PPUSH
29414: PPUSH
// if not unit or not building then
29415: LD_VAR 0 1
29419: NOT
29420: PUSH
29421: LD_VAR 0 2
29425: NOT
29426: OR
29427: IFFALSE 29431
// exit ;
29429: GO 29589
// x := GetX ( building ) ;
29431: LD_ADDR_VAR 0 5
29435: PUSH
29436: LD_VAR 0 2
29440: PPUSH
29441: CALL_OW 250
29445: ST_TO_ADDR
// y := GetY ( building ) ;
29446: LD_ADDR_VAR 0 6
29450: PUSH
29451: LD_VAR 0 2
29455: PPUSH
29456: CALL_OW 251
29460: ST_TO_ADDR
// for i = 0 to 5 do
29461: LD_ADDR_VAR 0 4
29465: PUSH
29466: DOUBLE
29467: LD_INT 0
29469: DEC
29470: ST_TO_ADDR
29471: LD_INT 5
29473: PUSH
29474: FOR_TO
29475: IFFALSE 29587
// begin _x := ShiftX ( x , i , 3 ) ;
29477: LD_ADDR_VAR 0 7
29481: PUSH
29482: LD_VAR 0 5
29486: PPUSH
29487: LD_VAR 0 4
29491: PPUSH
29492: LD_INT 3
29494: PPUSH
29495: CALL_OW 272
29499: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
29500: LD_ADDR_VAR 0 8
29504: PUSH
29505: LD_VAR 0 6
29509: PPUSH
29510: LD_VAR 0 4
29514: PPUSH
29515: LD_INT 3
29517: PPUSH
29518: CALL_OW 273
29522: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
29523: LD_VAR 0 7
29527: PPUSH
29528: LD_VAR 0 8
29532: PPUSH
29533: CALL_OW 488
29537: NOT
29538: IFFALSE 29542
// continue ;
29540: GO 29474
// if HexInfo ( _x , _y ) = 0 then
29542: LD_VAR 0 7
29546: PPUSH
29547: LD_VAR 0 8
29551: PPUSH
29552: CALL_OW 428
29556: PUSH
29557: LD_INT 0
29559: EQUAL
29560: IFFALSE 29585
// begin ComMoveXY ( unit , _x , _y ) ;
29562: LD_VAR 0 1
29566: PPUSH
29567: LD_VAR 0 7
29571: PPUSH
29572: LD_VAR 0 8
29576: PPUSH
29577: CALL_OW 111
// exit ;
29581: POP
29582: POP
29583: GO 29589
// end ; end ;
29585: GO 29474
29587: POP
29588: POP
// end ;
29589: LD_VAR 0 3
29593: RET
// export function ScanBase ( side , base_area ) ; begin
29594: LD_INT 0
29596: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
29597: LD_ADDR_VAR 0 3
29601: PUSH
29602: LD_VAR 0 2
29606: PPUSH
29607: LD_INT 81
29609: PUSH
29610: LD_VAR 0 1
29614: PUSH
29615: EMPTY
29616: LIST
29617: LIST
29618: PPUSH
29619: CALL_OW 70
29623: ST_TO_ADDR
// end ;
29624: LD_VAR 0 3
29628: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
29629: LD_INT 0
29631: PPUSH
29632: PPUSH
29633: PPUSH
29634: PPUSH
// result := false ;
29635: LD_ADDR_VAR 0 2
29639: PUSH
29640: LD_INT 0
29642: ST_TO_ADDR
// side := GetSide ( unit ) ;
29643: LD_ADDR_VAR 0 3
29647: PUSH
29648: LD_VAR 0 1
29652: PPUSH
29653: CALL_OW 255
29657: ST_TO_ADDR
// nat := GetNation ( unit ) ;
29658: LD_ADDR_VAR 0 4
29662: PUSH
29663: LD_VAR 0 1
29667: PPUSH
29668: CALL_OW 248
29672: ST_TO_ADDR
// case nat of 1 :
29673: LD_VAR 0 4
29677: PUSH
29678: LD_INT 1
29680: DOUBLE
29681: EQUAL
29682: IFTRUE 29686
29684: GO 29697
29686: POP
// tech := tech_lassight ; 2 :
29687: LD_ADDR_VAR 0 5
29691: PUSH
29692: LD_INT 12
29694: ST_TO_ADDR
29695: GO 29736
29697: LD_INT 2
29699: DOUBLE
29700: EQUAL
29701: IFTRUE 29705
29703: GO 29716
29705: POP
// tech := tech_mortar ; 3 :
29706: LD_ADDR_VAR 0 5
29710: PUSH
29711: LD_INT 41
29713: ST_TO_ADDR
29714: GO 29736
29716: LD_INT 3
29718: DOUBLE
29719: EQUAL
29720: IFTRUE 29724
29722: GO 29735
29724: POP
// tech := tech_bazooka ; end ;
29725: LD_ADDR_VAR 0 5
29729: PUSH
29730: LD_INT 44
29732: ST_TO_ADDR
29733: GO 29736
29735: POP
// if Researched ( side , tech ) then
29736: LD_VAR 0 3
29740: PPUSH
29741: LD_VAR 0 5
29745: PPUSH
29746: CALL_OW 325
29750: IFFALSE 29777
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
29752: LD_ADDR_VAR 0 2
29756: PUSH
29757: LD_INT 5
29759: PUSH
29760: LD_INT 8
29762: PUSH
29763: LD_INT 9
29765: PUSH
29766: EMPTY
29767: LIST
29768: LIST
29769: LIST
29770: PUSH
29771: LD_VAR 0 4
29775: ARRAY
29776: ST_TO_ADDR
// end ;
29777: LD_VAR 0 2
29781: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
29782: LD_INT 0
29784: PPUSH
29785: PPUSH
29786: PPUSH
// if not mines then
29787: LD_VAR 0 2
29791: NOT
29792: IFFALSE 29796
// exit ;
29794: GO 29940
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
29796: LD_ADDR_VAR 0 5
29800: PUSH
29801: LD_INT 81
29803: PUSH
29804: LD_VAR 0 1
29808: PUSH
29809: EMPTY
29810: LIST
29811: LIST
29812: PUSH
29813: LD_INT 3
29815: PUSH
29816: LD_INT 21
29818: PUSH
29819: LD_INT 3
29821: PUSH
29822: EMPTY
29823: LIST
29824: LIST
29825: PUSH
29826: EMPTY
29827: LIST
29828: LIST
29829: PUSH
29830: EMPTY
29831: LIST
29832: LIST
29833: PPUSH
29834: CALL_OW 69
29838: ST_TO_ADDR
// for i in mines do
29839: LD_ADDR_VAR 0 4
29843: PUSH
29844: LD_VAR 0 2
29848: PUSH
29849: FOR_IN
29850: IFFALSE 29938
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
29852: LD_VAR 0 4
29856: PUSH
29857: LD_INT 1
29859: ARRAY
29860: PPUSH
29861: LD_VAR 0 4
29865: PUSH
29866: LD_INT 2
29868: ARRAY
29869: PPUSH
29870: CALL_OW 458
29874: NOT
29875: IFFALSE 29879
// continue ;
29877: GO 29849
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
29879: LD_VAR 0 4
29883: PUSH
29884: LD_INT 1
29886: ARRAY
29887: PPUSH
29888: LD_VAR 0 4
29892: PUSH
29893: LD_INT 2
29895: ARRAY
29896: PPUSH
29897: CALL_OW 428
29901: PUSH
29902: LD_VAR 0 5
29906: IN
29907: IFFALSE 29936
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
29909: LD_VAR 0 4
29913: PUSH
29914: LD_INT 1
29916: ARRAY
29917: PPUSH
29918: LD_VAR 0 4
29922: PUSH
29923: LD_INT 2
29925: ARRAY
29926: PPUSH
29927: LD_VAR 0 1
29931: PPUSH
29932: CALL_OW 456
// end ;
29936: GO 29849
29938: POP
29939: POP
// end ;
29940: LD_VAR 0 3
29944: RET
// export function Count ( array ) ; var i ; begin
29945: LD_INT 0
29947: PPUSH
29948: PPUSH
// result := 0 ;
29949: LD_ADDR_VAR 0 2
29953: PUSH
29954: LD_INT 0
29956: ST_TO_ADDR
// for i in array do
29957: LD_ADDR_VAR 0 3
29961: PUSH
29962: LD_VAR 0 1
29966: PUSH
29967: FOR_IN
29968: IFFALSE 29992
// if i then
29970: LD_VAR 0 3
29974: IFFALSE 29990
// result := result + 1 ;
29976: LD_ADDR_VAR 0 2
29980: PUSH
29981: LD_VAR 0 2
29985: PUSH
29986: LD_INT 1
29988: PLUS
29989: ST_TO_ADDR
29990: GO 29967
29992: POP
29993: POP
// end ;
29994: LD_VAR 0 2
29998: RET
// export function IsEmpty ( building ) ; begin
29999: LD_INT 0
30001: PPUSH
// if not building then
30002: LD_VAR 0 1
30006: NOT
30007: IFFALSE 30011
// exit ;
30009: GO 30054
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
30011: LD_ADDR_VAR 0 2
30015: PUSH
30016: LD_VAR 0 1
30020: PUSH
30021: LD_INT 22
30023: PUSH
30024: LD_VAR 0 1
30028: PPUSH
30029: CALL_OW 255
30033: PUSH
30034: EMPTY
30035: LIST
30036: LIST
30037: PUSH
30038: LD_INT 58
30040: PUSH
30041: EMPTY
30042: LIST
30043: PUSH
30044: EMPTY
30045: LIST
30046: LIST
30047: PPUSH
30048: CALL_OW 69
30052: IN
30053: ST_TO_ADDR
// end ;
30054: LD_VAR 0 2
30058: RET
// export function IsNotFull ( building ) ; var places ; begin
30059: LD_INT 0
30061: PPUSH
30062: PPUSH
// if not building then
30063: LD_VAR 0 1
30067: NOT
30068: IFFALSE 30072
// exit ;
30070: GO 30243
// result := false ;
30072: LD_ADDR_VAR 0 2
30076: PUSH
30077: LD_INT 0
30079: ST_TO_ADDR
// places := 0 ;
30080: LD_ADDR_VAR 0 3
30084: PUSH
30085: LD_INT 0
30087: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
30088: LD_VAR 0 1
30092: PPUSH
30093: CALL_OW 266
30097: PUSH
30098: LD_INT 0
30100: DOUBLE
30101: EQUAL
30102: IFTRUE 30160
30104: LD_INT 1
30106: DOUBLE
30107: EQUAL
30108: IFTRUE 30160
30110: LD_INT 6
30112: DOUBLE
30113: EQUAL
30114: IFTRUE 30160
30116: LD_INT 7
30118: DOUBLE
30119: EQUAL
30120: IFTRUE 30160
30122: LD_INT 8
30124: DOUBLE
30125: EQUAL
30126: IFTRUE 30160
30128: LD_INT 4
30130: DOUBLE
30131: EQUAL
30132: IFTRUE 30160
30134: LD_INT 5
30136: DOUBLE
30137: EQUAL
30138: IFTRUE 30160
30140: LD_INT 2
30142: DOUBLE
30143: EQUAL
30144: IFTRUE 30160
30146: LD_INT 3
30148: DOUBLE
30149: EQUAL
30150: IFTRUE 30160
30152: LD_INT 35
30154: DOUBLE
30155: EQUAL
30156: IFTRUE 30160
30158: GO 30171
30160: POP
// places := 6 ; b_bunker , b_breastwork :
30161: LD_ADDR_VAR 0 3
30165: PUSH
30166: LD_INT 6
30168: ST_TO_ADDR
30169: GO 30216
30171: LD_INT 32
30173: DOUBLE
30174: EQUAL
30175: IFTRUE 30185
30177: LD_INT 31
30179: DOUBLE
30180: EQUAL
30181: IFTRUE 30185
30183: GO 30196
30185: POP
// places := 1 ; b_control_tower :
30186: LD_ADDR_VAR 0 3
30190: PUSH
30191: LD_INT 1
30193: ST_TO_ADDR
30194: GO 30216
30196: LD_INT 36
30198: DOUBLE
30199: EQUAL
30200: IFTRUE 30204
30202: GO 30215
30204: POP
// places := 3 ; end ;
30205: LD_ADDR_VAR 0 3
30209: PUSH
30210: LD_INT 3
30212: ST_TO_ADDR
30213: GO 30216
30215: POP
// if places then
30216: LD_VAR 0 3
30220: IFFALSE 30243
// result := UnitsInside ( building ) < places ;
30222: LD_ADDR_VAR 0 2
30226: PUSH
30227: LD_VAR 0 1
30231: PPUSH
30232: CALL_OW 313
30236: PUSH
30237: LD_VAR 0 3
30241: LESS
30242: ST_TO_ADDR
// end ;
30243: LD_VAR 0 2
30247: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
30248: LD_INT 0
30250: PPUSH
30251: PPUSH
30252: PPUSH
30253: PPUSH
// tmp := [ ] ;
30254: LD_ADDR_VAR 0 3
30258: PUSH
30259: EMPTY
30260: ST_TO_ADDR
// list := [ ] ;
30261: LD_ADDR_VAR 0 5
30265: PUSH
30266: EMPTY
30267: ST_TO_ADDR
// for i = 16 to 25 do
30268: LD_ADDR_VAR 0 4
30272: PUSH
30273: DOUBLE
30274: LD_INT 16
30276: DEC
30277: ST_TO_ADDR
30278: LD_INT 25
30280: PUSH
30281: FOR_TO
30282: IFFALSE 30355
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
30284: LD_ADDR_VAR 0 3
30288: PUSH
30289: LD_VAR 0 3
30293: PUSH
30294: LD_INT 22
30296: PUSH
30297: LD_VAR 0 1
30301: PPUSH
30302: CALL_OW 255
30306: PUSH
30307: EMPTY
30308: LIST
30309: LIST
30310: PUSH
30311: LD_INT 91
30313: PUSH
30314: LD_VAR 0 1
30318: PUSH
30319: LD_INT 6
30321: PUSH
30322: EMPTY
30323: LIST
30324: LIST
30325: LIST
30326: PUSH
30327: LD_INT 30
30329: PUSH
30330: LD_VAR 0 4
30334: PUSH
30335: EMPTY
30336: LIST
30337: LIST
30338: PUSH
30339: EMPTY
30340: LIST
30341: LIST
30342: LIST
30343: PUSH
30344: EMPTY
30345: LIST
30346: PPUSH
30347: CALL_OW 69
30351: ADD
30352: ST_TO_ADDR
30353: GO 30281
30355: POP
30356: POP
// for i = 1 to tmp do
30357: LD_ADDR_VAR 0 4
30361: PUSH
30362: DOUBLE
30363: LD_INT 1
30365: DEC
30366: ST_TO_ADDR
30367: LD_VAR 0 3
30371: PUSH
30372: FOR_TO
30373: IFFALSE 30461
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
30375: LD_ADDR_VAR 0 5
30379: PUSH
30380: LD_VAR 0 5
30384: PUSH
30385: LD_VAR 0 3
30389: PUSH
30390: LD_VAR 0 4
30394: ARRAY
30395: PPUSH
30396: CALL_OW 266
30400: PUSH
30401: LD_VAR 0 3
30405: PUSH
30406: LD_VAR 0 4
30410: ARRAY
30411: PPUSH
30412: CALL_OW 250
30416: PUSH
30417: LD_VAR 0 3
30421: PUSH
30422: LD_VAR 0 4
30426: ARRAY
30427: PPUSH
30428: CALL_OW 251
30432: PUSH
30433: LD_VAR 0 3
30437: PUSH
30438: LD_VAR 0 4
30442: ARRAY
30443: PPUSH
30444: CALL_OW 254
30448: PUSH
30449: EMPTY
30450: LIST
30451: LIST
30452: LIST
30453: LIST
30454: PUSH
30455: EMPTY
30456: LIST
30457: ADD
30458: ST_TO_ADDR
30459: GO 30372
30461: POP
30462: POP
// result := list ;
30463: LD_ADDR_VAR 0 2
30467: PUSH
30468: LD_VAR 0 5
30472: ST_TO_ADDR
// end ;
30473: LD_VAR 0 2
30477: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
30478: LD_INT 0
30480: PPUSH
30481: PPUSH
30482: PPUSH
30483: PPUSH
30484: PPUSH
30485: PPUSH
30486: PPUSH
// if not factory then
30487: LD_VAR 0 1
30491: NOT
30492: IFFALSE 30496
// exit ;
30494: GO 31089
// if control = control_apeman then
30496: LD_VAR 0 4
30500: PUSH
30501: LD_INT 5
30503: EQUAL
30504: IFFALSE 30613
// begin tmp := UnitsInside ( factory ) ;
30506: LD_ADDR_VAR 0 8
30510: PUSH
30511: LD_VAR 0 1
30515: PPUSH
30516: CALL_OW 313
30520: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
30521: LD_VAR 0 8
30525: PPUSH
30526: LD_INT 25
30528: PUSH
30529: LD_INT 12
30531: PUSH
30532: EMPTY
30533: LIST
30534: LIST
30535: PPUSH
30536: CALL_OW 72
30540: NOT
30541: IFFALSE 30551
// control := control_manual ;
30543: LD_ADDR_VAR 0 4
30547: PUSH
30548: LD_INT 1
30550: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
30551: LD_ADDR_VAR 0 8
30555: PUSH
30556: LD_VAR 0 1
30560: PPUSH
30561: CALL 30248 0 1
30565: ST_TO_ADDR
// if tmp then
30566: LD_VAR 0 8
30570: IFFALSE 30613
// begin for i in tmp do
30572: LD_ADDR_VAR 0 7
30576: PUSH
30577: LD_VAR 0 8
30581: PUSH
30582: FOR_IN
30583: IFFALSE 30611
// if i [ 1 ] = b_ext_radio then
30585: LD_VAR 0 7
30589: PUSH
30590: LD_INT 1
30592: ARRAY
30593: PUSH
30594: LD_INT 22
30596: EQUAL
30597: IFFALSE 30609
// begin control := control_remote ;
30599: LD_ADDR_VAR 0 4
30603: PUSH
30604: LD_INT 2
30606: ST_TO_ADDR
// break ;
30607: GO 30611
// end ;
30609: GO 30582
30611: POP
30612: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
30613: LD_VAR 0 1
30617: PPUSH
30618: LD_VAR 0 2
30622: PPUSH
30623: LD_VAR 0 3
30627: PPUSH
30628: LD_VAR 0 4
30632: PPUSH
30633: LD_VAR 0 5
30637: PPUSH
30638: CALL_OW 448
30642: IFFALSE 30677
// begin result := [ chassis , engine , control , weapon ] ;
30644: LD_ADDR_VAR 0 6
30648: PUSH
30649: LD_VAR 0 2
30653: PUSH
30654: LD_VAR 0 3
30658: PUSH
30659: LD_VAR 0 4
30663: PUSH
30664: LD_VAR 0 5
30668: PUSH
30669: EMPTY
30670: LIST
30671: LIST
30672: LIST
30673: LIST
30674: ST_TO_ADDR
// exit ;
30675: GO 31089
// end ; _chassis := AvailableChassisList ( factory ) ;
30677: LD_ADDR_VAR 0 9
30681: PUSH
30682: LD_VAR 0 1
30686: PPUSH
30687: CALL_OW 475
30691: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
30692: LD_ADDR_VAR 0 11
30696: PUSH
30697: LD_VAR 0 1
30701: PPUSH
30702: CALL_OW 476
30706: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
30707: LD_ADDR_VAR 0 12
30711: PUSH
30712: LD_VAR 0 1
30716: PPUSH
30717: CALL_OW 477
30721: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
30722: LD_ADDR_VAR 0 10
30726: PUSH
30727: LD_VAR 0 1
30731: PPUSH
30732: CALL_OW 478
30736: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
30737: LD_VAR 0 9
30741: NOT
30742: PUSH
30743: LD_VAR 0 11
30747: NOT
30748: OR
30749: PUSH
30750: LD_VAR 0 12
30754: NOT
30755: OR
30756: PUSH
30757: LD_VAR 0 10
30761: NOT
30762: OR
30763: IFFALSE 30798
// begin result := [ chassis , engine , control , weapon ] ;
30765: LD_ADDR_VAR 0 6
30769: PUSH
30770: LD_VAR 0 2
30774: PUSH
30775: LD_VAR 0 3
30779: PUSH
30780: LD_VAR 0 4
30784: PUSH
30785: LD_VAR 0 5
30789: PUSH
30790: EMPTY
30791: LIST
30792: LIST
30793: LIST
30794: LIST
30795: ST_TO_ADDR
// exit ;
30796: GO 31089
// end ; if not chassis in _chassis then
30798: LD_VAR 0 2
30802: PUSH
30803: LD_VAR 0 9
30807: IN
30808: NOT
30809: IFFALSE 30835
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
30811: LD_ADDR_VAR 0 2
30815: PUSH
30816: LD_VAR 0 9
30820: PUSH
30821: LD_INT 1
30823: PPUSH
30824: LD_VAR 0 9
30828: PPUSH
30829: CALL_OW 12
30833: ARRAY
30834: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
30835: LD_VAR 0 2
30839: PPUSH
30840: LD_VAR 0 3
30844: PPUSH
30845: CALL 31094 0 2
30849: NOT
30850: IFFALSE 30909
// repeat engine := _engine [ 1 ] ;
30852: LD_ADDR_VAR 0 3
30856: PUSH
30857: LD_VAR 0 11
30861: PUSH
30862: LD_INT 1
30864: ARRAY
30865: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
30866: LD_ADDR_VAR 0 11
30870: PUSH
30871: LD_VAR 0 11
30875: PPUSH
30876: LD_INT 1
30878: PPUSH
30879: CALL_OW 3
30883: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
30884: LD_VAR 0 2
30888: PPUSH
30889: LD_VAR 0 3
30893: PPUSH
30894: CALL 31094 0 2
30898: PUSH
30899: LD_VAR 0 11
30903: PUSH
30904: EMPTY
30905: EQUAL
30906: OR
30907: IFFALSE 30852
// if not control in _control then
30909: LD_VAR 0 4
30913: PUSH
30914: LD_VAR 0 12
30918: IN
30919: NOT
30920: IFFALSE 30946
// control := _control [ rand ( 1 , _control ) ] ;
30922: LD_ADDR_VAR 0 4
30926: PUSH
30927: LD_VAR 0 12
30931: PUSH
30932: LD_INT 1
30934: PPUSH
30935: LD_VAR 0 12
30939: PPUSH
30940: CALL_OW 12
30944: ARRAY
30945: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
30946: LD_VAR 0 2
30950: PPUSH
30951: LD_VAR 0 5
30955: PPUSH
30956: CALL 31314 0 2
30960: NOT
30961: IFFALSE 31020
// repeat weapon := _weapon [ 1 ] ;
30963: LD_ADDR_VAR 0 5
30967: PUSH
30968: LD_VAR 0 10
30972: PUSH
30973: LD_INT 1
30975: ARRAY
30976: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
30977: LD_ADDR_VAR 0 10
30981: PUSH
30982: LD_VAR 0 10
30986: PPUSH
30987: LD_INT 1
30989: PPUSH
30990: CALL_OW 3
30994: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
30995: LD_VAR 0 2
30999: PPUSH
31000: LD_VAR 0 5
31004: PPUSH
31005: CALL 31314 0 2
31009: PUSH
31010: LD_VAR 0 10
31014: PUSH
31015: EMPTY
31016: EQUAL
31017: OR
31018: IFFALSE 30963
// result := [ ] ;
31020: LD_ADDR_VAR 0 6
31024: PUSH
31025: EMPTY
31026: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
31027: LD_VAR 0 1
31031: PPUSH
31032: LD_VAR 0 2
31036: PPUSH
31037: LD_VAR 0 3
31041: PPUSH
31042: LD_VAR 0 4
31046: PPUSH
31047: LD_VAR 0 5
31051: PPUSH
31052: CALL_OW 448
31056: IFFALSE 31089
// result := [ chassis , engine , control , weapon ] ;
31058: LD_ADDR_VAR 0 6
31062: PUSH
31063: LD_VAR 0 2
31067: PUSH
31068: LD_VAR 0 3
31072: PUSH
31073: LD_VAR 0 4
31077: PUSH
31078: LD_VAR 0 5
31082: PUSH
31083: EMPTY
31084: LIST
31085: LIST
31086: LIST
31087: LIST
31088: ST_TO_ADDR
// end ;
31089: LD_VAR 0 6
31093: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
31094: LD_INT 0
31096: PPUSH
// if not chassis or not engine then
31097: LD_VAR 0 1
31101: NOT
31102: PUSH
31103: LD_VAR 0 2
31107: NOT
31108: OR
31109: IFFALSE 31113
// exit ;
31111: GO 31309
// case engine of engine_solar :
31113: LD_VAR 0 2
31117: PUSH
31118: LD_INT 2
31120: DOUBLE
31121: EQUAL
31122: IFTRUE 31126
31124: GO 31164
31126: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
31127: LD_ADDR_VAR 0 3
31131: PUSH
31132: LD_INT 11
31134: PUSH
31135: LD_INT 12
31137: PUSH
31138: LD_INT 13
31140: PUSH
31141: LD_INT 14
31143: PUSH
31144: LD_INT 1
31146: PUSH
31147: LD_INT 2
31149: PUSH
31150: LD_INT 3
31152: PUSH
31153: EMPTY
31154: LIST
31155: LIST
31156: LIST
31157: LIST
31158: LIST
31159: LIST
31160: LIST
31161: ST_TO_ADDR
31162: GO 31293
31164: LD_INT 1
31166: DOUBLE
31167: EQUAL
31168: IFTRUE 31172
31170: GO 31234
31172: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
31173: LD_ADDR_VAR 0 3
31177: PUSH
31178: LD_INT 11
31180: PUSH
31181: LD_INT 12
31183: PUSH
31184: LD_INT 13
31186: PUSH
31187: LD_INT 14
31189: PUSH
31190: LD_INT 1
31192: PUSH
31193: LD_INT 2
31195: PUSH
31196: LD_INT 3
31198: PUSH
31199: LD_INT 4
31201: PUSH
31202: LD_INT 5
31204: PUSH
31205: LD_INT 21
31207: PUSH
31208: LD_INT 23
31210: PUSH
31211: LD_INT 22
31213: PUSH
31214: LD_INT 24
31216: PUSH
31217: EMPTY
31218: LIST
31219: LIST
31220: LIST
31221: LIST
31222: LIST
31223: LIST
31224: LIST
31225: LIST
31226: LIST
31227: LIST
31228: LIST
31229: LIST
31230: LIST
31231: ST_TO_ADDR
31232: GO 31293
31234: LD_INT 3
31236: DOUBLE
31237: EQUAL
31238: IFTRUE 31242
31240: GO 31292
31242: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
31243: LD_ADDR_VAR 0 3
31247: PUSH
31248: LD_INT 13
31250: PUSH
31251: LD_INT 14
31253: PUSH
31254: LD_INT 2
31256: PUSH
31257: LD_INT 3
31259: PUSH
31260: LD_INT 4
31262: PUSH
31263: LD_INT 5
31265: PUSH
31266: LD_INT 21
31268: PUSH
31269: LD_INT 22
31271: PUSH
31272: LD_INT 23
31274: PUSH
31275: LD_INT 24
31277: PUSH
31278: EMPTY
31279: LIST
31280: LIST
31281: LIST
31282: LIST
31283: LIST
31284: LIST
31285: LIST
31286: LIST
31287: LIST
31288: LIST
31289: ST_TO_ADDR
31290: GO 31293
31292: POP
// result := ( chassis in result ) ;
31293: LD_ADDR_VAR 0 3
31297: PUSH
31298: LD_VAR 0 1
31302: PUSH
31303: LD_VAR 0 3
31307: IN
31308: ST_TO_ADDR
// end ;
31309: LD_VAR 0 3
31313: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
31314: LD_INT 0
31316: PPUSH
// if not chassis or not weapon then
31317: LD_VAR 0 1
31321: NOT
31322: PUSH
31323: LD_VAR 0 2
31327: NOT
31328: OR
31329: IFFALSE 31333
// exit ;
31331: GO 32393
// case weapon of us_machine_gun :
31333: LD_VAR 0 2
31337: PUSH
31338: LD_INT 2
31340: DOUBLE
31341: EQUAL
31342: IFTRUE 31346
31344: GO 31376
31346: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
31347: LD_ADDR_VAR 0 3
31351: PUSH
31352: LD_INT 1
31354: PUSH
31355: LD_INT 2
31357: PUSH
31358: LD_INT 3
31360: PUSH
31361: LD_INT 4
31363: PUSH
31364: LD_INT 5
31366: PUSH
31367: EMPTY
31368: LIST
31369: LIST
31370: LIST
31371: LIST
31372: LIST
31373: ST_TO_ADDR
31374: GO 32377
31376: LD_INT 3
31378: DOUBLE
31379: EQUAL
31380: IFTRUE 31384
31382: GO 31414
31384: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
31385: LD_ADDR_VAR 0 3
31389: PUSH
31390: LD_INT 1
31392: PUSH
31393: LD_INT 2
31395: PUSH
31396: LD_INT 3
31398: PUSH
31399: LD_INT 4
31401: PUSH
31402: LD_INT 5
31404: PUSH
31405: EMPTY
31406: LIST
31407: LIST
31408: LIST
31409: LIST
31410: LIST
31411: ST_TO_ADDR
31412: GO 32377
31414: LD_INT 11
31416: DOUBLE
31417: EQUAL
31418: IFTRUE 31422
31420: GO 31452
31422: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
31423: LD_ADDR_VAR 0 3
31427: PUSH
31428: LD_INT 1
31430: PUSH
31431: LD_INT 2
31433: PUSH
31434: LD_INT 3
31436: PUSH
31437: LD_INT 4
31439: PUSH
31440: LD_INT 5
31442: PUSH
31443: EMPTY
31444: LIST
31445: LIST
31446: LIST
31447: LIST
31448: LIST
31449: ST_TO_ADDR
31450: GO 32377
31452: LD_INT 4
31454: DOUBLE
31455: EQUAL
31456: IFTRUE 31460
31458: GO 31486
31460: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
31461: LD_ADDR_VAR 0 3
31465: PUSH
31466: LD_INT 2
31468: PUSH
31469: LD_INT 3
31471: PUSH
31472: LD_INT 4
31474: PUSH
31475: LD_INT 5
31477: PUSH
31478: EMPTY
31479: LIST
31480: LIST
31481: LIST
31482: LIST
31483: ST_TO_ADDR
31484: GO 32377
31486: LD_INT 5
31488: DOUBLE
31489: EQUAL
31490: IFTRUE 31494
31492: GO 31520
31494: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
31495: LD_ADDR_VAR 0 3
31499: PUSH
31500: LD_INT 2
31502: PUSH
31503: LD_INT 3
31505: PUSH
31506: LD_INT 4
31508: PUSH
31509: LD_INT 5
31511: PUSH
31512: EMPTY
31513: LIST
31514: LIST
31515: LIST
31516: LIST
31517: ST_TO_ADDR
31518: GO 32377
31520: LD_INT 9
31522: DOUBLE
31523: EQUAL
31524: IFTRUE 31528
31526: GO 31554
31528: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
31529: LD_ADDR_VAR 0 3
31533: PUSH
31534: LD_INT 2
31536: PUSH
31537: LD_INT 3
31539: PUSH
31540: LD_INT 4
31542: PUSH
31543: LD_INT 5
31545: PUSH
31546: EMPTY
31547: LIST
31548: LIST
31549: LIST
31550: LIST
31551: ST_TO_ADDR
31552: GO 32377
31554: LD_INT 7
31556: DOUBLE
31557: EQUAL
31558: IFTRUE 31562
31560: GO 31588
31562: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
31563: LD_ADDR_VAR 0 3
31567: PUSH
31568: LD_INT 2
31570: PUSH
31571: LD_INT 3
31573: PUSH
31574: LD_INT 4
31576: PUSH
31577: LD_INT 5
31579: PUSH
31580: EMPTY
31581: LIST
31582: LIST
31583: LIST
31584: LIST
31585: ST_TO_ADDR
31586: GO 32377
31588: LD_INT 12
31590: DOUBLE
31591: EQUAL
31592: IFTRUE 31596
31594: GO 31622
31596: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
31597: LD_ADDR_VAR 0 3
31601: PUSH
31602: LD_INT 2
31604: PUSH
31605: LD_INT 3
31607: PUSH
31608: LD_INT 4
31610: PUSH
31611: LD_INT 5
31613: PUSH
31614: EMPTY
31615: LIST
31616: LIST
31617: LIST
31618: LIST
31619: ST_TO_ADDR
31620: GO 32377
31622: LD_INT 13
31624: DOUBLE
31625: EQUAL
31626: IFTRUE 31630
31628: GO 31656
31630: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
31631: LD_ADDR_VAR 0 3
31635: PUSH
31636: LD_INT 2
31638: PUSH
31639: LD_INT 3
31641: PUSH
31642: LD_INT 4
31644: PUSH
31645: LD_INT 5
31647: PUSH
31648: EMPTY
31649: LIST
31650: LIST
31651: LIST
31652: LIST
31653: ST_TO_ADDR
31654: GO 32377
31656: LD_INT 14
31658: DOUBLE
31659: EQUAL
31660: IFTRUE 31664
31662: GO 31682
31664: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
31665: LD_ADDR_VAR 0 3
31669: PUSH
31670: LD_INT 4
31672: PUSH
31673: LD_INT 5
31675: PUSH
31676: EMPTY
31677: LIST
31678: LIST
31679: ST_TO_ADDR
31680: GO 32377
31682: LD_INT 6
31684: DOUBLE
31685: EQUAL
31686: IFTRUE 31690
31688: GO 31708
31690: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
31691: LD_ADDR_VAR 0 3
31695: PUSH
31696: LD_INT 4
31698: PUSH
31699: LD_INT 5
31701: PUSH
31702: EMPTY
31703: LIST
31704: LIST
31705: ST_TO_ADDR
31706: GO 32377
31708: LD_INT 10
31710: DOUBLE
31711: EQUAL
31712: IFTRUE 31716
31714: GO 31734
31716: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
31717: LD_ADDR_VAR 0 3
31721: PUSH
31722: LD_INT 4
31724: PUSH
31725: LD_INT 5
31727: PUSH
31728: EMPTY
31729: LIST
31730: LIST
31731: ST_TO_ADDR
31732: GO 32377
31734: LD_INT 22
31736: DOUBLE
31737: EQUAL
31738: IFTRUE 31742
31740: GO 31768
31742: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
31743: LD_ADDR_VAR 0 3
31747: PUSH
31748: LD_INT 11
31750: PUSH
31751: LD_INT 12
31753: PUSH
31754: LD_INT 13
31756: PUSH
31757: LD_INT 14
31759: PUSH
31760: EMPTY
31761: LIST
31762: LIST
31763: LIST
31764: LIST
31765: ST_TO_ADDR
31766: GO 32377
31768: LD_INT 23
31770: DOUBLE
31771: EQUAL
31772: IFTRUE 31776
31774: GO 31802
31776: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
31777: LD_ADDR_VAR 0 3
31781: PUSH
31782: LD_INT 11
31784: PUSH
31785: LD_INT 12
31787: PUSH
31788: LD_INT 13
31790: PUSH
31791: LD_INT 14
31793: PUSH
31794: EMPTY
31795: LIST
31796: LIST
31797: LIST
31798: LIST
31799: ST_TO_ADDR
31800: GO 32377
31802: LD_INT 24
31804: DOUBLE
31805: EQUAL
31806: IFTRUE 31810
31808: GO 31836
31810: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
31811: LD_ADDR_VAR 0 3
31815: PUSH
31816: LD_INT 11
31818: PUSH
31819: LD_INT 12
31821: PUSH
31822: LD_INT 13
31824: PUSH
31825: LD_INT 14
31827: PUSH
31828: EMPTY
31829: LIST
31830: LIST
31831: LIST
31832: LIST
31833: ST_TO_ADDR
31834: GO 32377
31836: LD_INT 30
31838: DOUBLE
31839: EQUAL
31840: IFTRUE 31844
31842: GO 31870
31844: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
31845: LD_ADDR_VAR 0 3
31849: PUSH
31850: LD_INT 11
31852: PUSH
31853: LD_INT 12
31855: PUSH
31856: LD_INT 13
31858: PUSH
31859: LD_INT 14
31861: PUSH
31862: EMPTY
31863: LIST
31864: LIST
31865: LIST
31866: LIST
31867: ST_TO_ADDR
31868: GO 32377
31870: LD_INT 25
31872: DOUBLE
31873: EQUAL
31874: IFTRUE 31878
31876: GO 31896
31878: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
31879: LD_ADDR_VAR 0 3
31883: PUSH
31884: LD_INT 13
31886: PUSH
31887: LD_INT 14
31889: PUSH
31890: EMPTY
31891: LIST
31892: LIST
31893: ST_TO_ADDR
31894: GO 32377
31896: LD_INT 27
31898: DOUBLE
31899: EQUAL
31900: IFTRUE 31904
31902: GO 31922
31904: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
31905: LD_ADDR_VAR 0 3
31909: PUSH
31910: LD_INT 13
31912: PUSH
31913: LD_INT 14
31915: PUSH
31916: EMPTY
31917: LIST
31918: LIST
31919: ST_TO_ADDR
31920: GO 32377
31922: LD_INT 92
31924: DOUBLE
31925: EQUAL
31926: IFTRUE 31930
31928: GO 31956
31930: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
31931: LD_ADDR_VAR 0 3
31935: PUSH
31936: LD_INT 11
31938: PUSH
31939: LD_INT 12
31941: PUSH
31942: LD_INT 13
31944: PUSH
31945: LD_INT 14
31947: PUSH
31948: EMPTY
31949: LIST
31950: LIST
31951: LIST
31952: LIST
31953: ST_TO_ADDR
31954: GO 32377
31956: LD_INT 28
31958: DOUBLE
31959: EQUAL
31960: IFTRUE 31964
31962: GO 31982
31964: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
31965: LD_ADDR_VAR 0 3
31969: PUSH
31970: LD_INT 13
31972: PUSH
31973: LD_INT 14
31975: PUSH
31976: EMPTY
31977: LIST
31978: LIST
31979: ST_TO_ADDR
31980: GO 32377
31982: LD_INT 29
31984: DOUBLE
31985: EQUAL
31986: IFTRUE 31990
31988: GO 32008
31990: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
31991: LD_ADDR_VAR 0 3
31995: PUSH
31996: LD_INT 13
31998: PUSH
31999: LD_INT 14
32001: PUSH
32002: EMPTY
32003: LIST
32004: LIST
32005: ST_TO_ADDR
32006: GO 32377
32008: LD_INT 31
32010: DOUBLE
32011: EQUAL
32012: IFTRUE 32016
32014: GO 32034
32016: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
32017: LD_ADDR_VAR 0 3
32021: PUSH
32022: LD_INT 13
32024: PUSH
32025: LD_INT 14
32027: PUSH
32028: EMPTY
32029: LIST
32030: LIST
32031: ST_TO_ADDR
32032: GO 32377
32034: LD_INT 26
32036: DOUBLE
32037: EQUAL
32038: IFTRUE 32042
32040: GO 32060
32042: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
32043: LD_ADDR_VAR 0 3
32047: PUSH
32048: LD_INT 13
32050: PUSH
32051: LD_INT 14
32053: PUSH
32054: EMPTY
32055: LIST
32056: LIST
32057: ST_TO_ADDR
32058: GO 32377
32060: LD_INT 42
32062: DOUBLE
32063: EQUAL
32064: IFTRUE 32068
32066: GO 32094
32068: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
32069: LD_ADDR_VAR 0 3
32073: PUSH
32074: LD_INT 21
32076: PUSH
32077: LD_INT 22
32079: PUSH
32080: LD_INT 23
32082: PUSH
32083: LD_INT 24
32085: PUSH
32086: EMPTY
32087: LIST
32088: LIST
32089: LIST
32090: LIST
32091: ST_TO_ADDR
32092: GO 32377
32094: LD_INT 43
32096: DOUBLE
32097: EQUAL
32098: IFTRUE 32102
32100: GO 32128
32102: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
32103: LD_ADDR_VAR 0 3
32107: PUSH
32108: LD_INT 21
32110: PUSH
32111: LD_INT 22
32113: PUSH
32114: LD_INT 23
32116: PUSH
32117: LD_INT 24
32119: PUSH
32120: EMPTY
32121: LIST
32122: LIST
32123: LIST
32124: LIST
32125: ST_TO_ADDR
32126: GO 32377
32128: LD_INT 44
32130: DOUBLE
32131: EQUAL
32132: IFTRUE 32136
32134: GO 32162
32136: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
32137: LD_ADDR_VAR 0 3
32141: PUSH
32142: LD_INT 21
32144: PUSH
32145: LD_INT 22
32147: PUSH
32148: LD_INT 23
32150: PUSH
32151: LD_INT 24
32153: PUSH
32154: EMPTY
32155: LIST
32156: LIST
32157: LIST
32158: LIST
32159: ST_TO_ADDR
32160: GO 32377
32162: LD_INT 45
32164: DOUBLE
32165: EQUAL
32166: IFTRUE 32170
32168: GO 32196
32170: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
32171: LD_ADDR_VAR 0 3
32175: PUSH
32176: LD_INT 21
32178: PUSH
32179: LD_INT 22
32181: PUSH
32182: LD_INT 23
32184: PUSH
32185: LD_INT 24
32187: PUSH
32188: EMPTY
32189: LIST
32190: LIST
32191: LIST
32192: LIST
32193: ST_TO_ADDR
32194: GO 32377
32196: LD_INT 49
32198: DOUBLE
32199: EQUAL
32200: IFTRUE 32204
32202: GO 32230
32204: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
32205: LD_ADDR_VAR 0 3
32209: PUSH
32210: LD_INT 21
32212: PUSH
32213: LD_INT 22
32215: PUSH
32216: LD_INT 23
32218: PUSH
32219: LD_INT 24
32221: PUSH
32222: EMPTY
32223: LIST
32224: LIST
32225: LIST
32226: LIST
32227: ST_TO_ADDR
32228: GO 32377
32230: LD_INT 51
32232: DOUBLE
32233: EQUAL
32234: IFTRUE 32238
32236: GO 32264
32238: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
32239: LD_ADDR_VAR 0 3
32243: PUSH
32244: LD_INT 21
32246: PUSH
32247: LD_INT 22
32249: PUSH
32250: LD_INT 23
32252: PUSH
32253: LD_INT 24
32255: PUSH
32256: EMPTY
32257: LIST
32258: LIST
32259: LIST
32260: LIST
32261: ST_TO_ADDR
32262: GO 32377
32264: LD_INT 52
32266: DOUBLE
32267: EQUAL
32268: IFTRUE 32272
32270: GO 32298
32272: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
32273: LD_ADDR_VAR 0 3
32277: PUSH
32278: LD_INT 21
32280: PUSH
32281: LD_INT 22
32283: PUSH
32284: LD_INT 23
32286: PUSH
32287: LD_INT 24
32289: PUSH
32290: EMPTY
32291: LIST
32292: LIST
32293: LIST
32294: LIST
32295: ST_TO_ADDR
32296: GO 32377
32298: LD_INT 53
32300: DOUBLE
32301: EQUAL
32302: IFTRUE 32306
32304: GO 32324
32306: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
32307: LD_ADDR_VAR 0 3
32311: PUSH
32312: LD_INT 23
32314: PUSH
32315: LD_INT 24
32317: PUSH
32318: EMPTY
32319: LIST
32320: LIST
32321: ST_TO_ADDR
32322: GO 32377
32324: LD_INT 46
32326: DOUBLE
32327: EQUAL
32328: IFTRUE 32332
32330: GO 32350
32332: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
32333: LD_ADDR_VAR 0 3
32337: PUSH
32338: LD_INT 23
32340: PUSH
32341: LD_INT 24
32343: PUSH
32344: EMPTY
32345: LIST
32346: LIST
32347: ST_TO_ADDR
32348: GO 32377
32350: LD_INT 47
32352: DOUBLE
32353: EQUAL
32354: IFTRUE 32358
32356: GO 32376
32358: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
32359: LD_ADDR_VAR 0 3
32363: PUSH
32364: LD_INT 23
32366: PUSH
32367: LD_INT 24
32369: PUSH
32370: EMPTY
32371: LIST
32372: LIST
32373: ST_TO_ADDR
32374: GO 32377
32376: POP
// result := ( chassis in result ) ;
32377: LD_ADDR_VAR 0 3
32381: PUSH
32382: LD_VAR 0 1
32386: PUSH
32387: LD_VAR 0 3
32391: IN
32392: ST_TO_ADDR
// end ;
32393: LD_VAR 0 3
32397: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
32398: LD_INT 0
32400: PPUSH
32401: PPUSH
32402: PPUSH
32403: PPUSH
32404: PPUSH
32405: PPUSH
32406: PPUSH
// result := array ;
32407: LD_ADDR_VAR 0 5
32411: PUSH
32412: LD_VAR 0 1
32416: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
32417: LD_VAR 0 1
32421: NOT
32422: PUSH
32423: LD_VAR 0 2
32427: NOT
32428: OR
32429: PUSH
32430: LD_VAR 0 3
32434: NOT
32435: OR
32436: PUSH
32437: LD_VAR 0 2
32441: PUSH
32442: LD_VAR 0 1
32446: GREATER
32447: OR
32448: PUSH
32449: LD_VAR 0 3
32453: PUSH
32454: LD_VAR 0 1
32458: GREATER
32459: OR
32460: IFFALSE 32464
// exit ;
32462: GO 32760
// if direction then
32464: LD_VAR 0 4
32468: IFFALSE 32532
// begin d := 1 ;
32470: LD_ADDR_VAR 0 9
32474: PUSH
32475: LD_INT 1
32477: ST_TO_ADDR
// if i_from > i_to then
32478: LD_VAR 0 2
32482: PUSH
32483: LD_VAR 0 3
32487: GREATER
32488: IFFALSE 32514
// length := ( array - i_from ) + i_to else
32490: LD_ADDR_VAR 0 11
32494: PUSH
32495: LD_VAR 0 1
32499: PUSH
32500: LD_VAR 0 2
32504: MINUS
32505: PUSH
32506: LD_VAR 0 3
32510: PLUS
32511: ST_TO_ADDR
32512: GO 32530
// length := i_to - i_from ;
32514: LD_ADDR_VAR 0 11
32518: PUSH
32519: LD_VAR 0 3
32523: PUSH
32524: LD_VAR 0 2
32528: MINUS
32529: ST_TO_ADDR
// end else
32530: GO 32593
// begin d := - 1 ;
32532: LD_ADDR_VAR 0 9
32536: PUSH
32537: LD_INT 1
32539: NEG
32540: ST_TO_ADDR
// if i_from > i_to then
32541: LD_VAR 0 2
32545: PUSH
32546: LD_VAR 0 3
32550: GREATER
32551: IFFALSE 32571
// length := i_from - i_to else
32553: LD_ADDR_VAR 0 11
32557: PUSH
32558: LD_VAR 0 2
32562: PUSH
32563: LD_VAR 0 3
32567: MINUS
32568: ST_TO_ADDR
32569: GO 32593
// length := ( array - i_to ) + i_from ;
32571: LD_ADDR_VAR 0 11
32575: PUSH
32576: LD_VAR 0 1
32580: PUSH
32581: LD_VAR 0 3
32585: MINUS
32586: PUSH
32587: LD_VAR 0 2
32591: PLUS
32592: ST_TO_ADDR
// end ; if not length then
32593: LD_VAR 0 11
32597: NOT
32598: IFFALSE 32602
// exit ;
32600: GO 32760
// tmp := array ;
32602: LD_ADDR_VAR 0 10
32606: PUSH
32607: LD_VAR 0 1
32611: ST_TO_ADDR
// for i = 1 to length do
32612: LD_ADDR_VAR 0 6
32616: PUSH
32617: DOUBLE
32618: LD_INT 1
32620: DEC
32621: ST_TO_ADDR
32622: LD_VAR 0 11
32626: PUSH
32627: FOR_TO
32628: IFFALSE 32748
// begin for j = 1 to array do
32630: LD_ADDR_VAR 0 7
32634: PUSH
32635: DOUBLE
32636: LD_INT 1
32638: DEC
32639: ST_TO_ADDR
32640: LD_VAR 0 1
32644: PUSH
32645: FOR_TO
32646: IFFALSE 32734
// begin k := j + d ;
32648: LD_ADDR_VAR 0 8
32652: PUSH
32653: LD_VAR 0 7
32657: PUSH
32658: LD_VAR 0 9
32662: PLUS
32663: ST_TO_ADDR
// if k > array then
32664: LD_VAR 0 8
32668: PUSH
32669: LD_VAR 0 1
32673: GREATER
32674: IFFALSE 32684
// k := 1 ;
32676: LD_ADDR_VAR 0 8
32680: PUSH
32681: LD_INT 1
32683: ST_TO_ADDR
// if not k then
32684: LD_VAR 0 8
32688: NOT
32689: IFFALSE 32701
// k := array ;
32691: LD_ADDR_VAR 0 8
32695: PUSH
32696: LD_VAR 0 1
32700: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
32701: LD_ADDR_VAR 0 10
32705: PUSH
32706: LD_VAR 0 10
32710: PPUSH
32711: LD_VAR 0 8
32715: PPUSH
32716: LD_VAR 0 1
32720: PUSH
32721: LD_VAR 0 7
32725: ARRAY
32726: PPUSH
32727: CALL_OW 1
32731: ST_TO_ADDR
// end ;
32732: GO 32645
32734: POP
32735: POP
// array := tmp ;
32736: LD_ADDR_VAR 0 1
32740: PUSH
32741: LD_VAR 0 10
32745: ST_TO_ADDR
// end ;
32746: GO 32627
32748: POP
32749: POP
// result := array ;
32750: LD_ADDR_VAR 0 5
32754: PUSH
32755: LD_VAR 0 1
32759: ST_TO_ADDR
// end ;
32760: LD_VAR 0 5
32764: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
32765: LD_INT 0
32767: PPUSH
32768: PPUSH
// result := 0 ;
32769: LD_ADDR_VAR 0 3
32773: PUSH
32774: LD_INT 0
32776: ST_TO_ADDR
// if not array or not value in array then
32777: LD_VAR 0 1
32781: NOT
32782: PUSH
32783: LD_VAR 0 2
32787: PUSH
32788: LD_VAR 0 1
32792: IN
32793: NOT
32794: OR
32795: IFFALSE 32799
// exit ;
32797: GO 32853
// for i = 1 to array do
32799: LD_ADDR_VAR 0 4
32803: PUSH
32804: DOUBLE
32805: LD_INT 1
32807: DEC
32808: ST_TO_ADDR
32809: LD_VAR 0 1
32813: PUSH
32814: FOR_TO
32815: IFFALSE 32851
// if value = array [ i ] then
32817: LD_VAR 0 2
32821: PUSH
32822: LD_VAR 0 1
32826: PUSH
32827: LD_VAR 0 4
32831: ARRAY
32832: EQUAL
32833: IFFALSE 32849
// begin result := i ;
32835: LD_ADDR_VAR 0 3
32839: PUSH
32840: LD_VAR 0 4
32844: ST_TO_ADDR
// exit ;
32845: POP
32846: POP
32847: GO 32853
// end ;
32849: GO 32814
32851: POP
32852: POP
// end ;
32853: LD_VAR 0 3
32857: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
32858: LD_INT 0
32860: PPUSH
// vc_chassis := chassis ;
32861: LD_ADDR_OWVAR 37
32865: PUSH
32866: LD_VAR 0 1
32870: ST_TO_ADDR
// vc_engine := engine ;
32871: LD_ADDR_OWVAR 39
32875: PUSH
32876: LD_VAR 0 2
32880: ST_TO_ADDR
// vc_control := control ;
32881: LD_ADDR_OWVAR 38
32885: PUSH
32886: LD_VAR 0 3
32890: ST_TO_ADDR
// vc_weapon := weapon ;
32891: LD_ADDR_OWVAR 40
32895: PUSH
32896: LD_VAR 0 4
32900: ST_TO_ADDR
// vc_fuel_battery := fuel ;
32901: LD_ADDR_OWVAR 41
32905: PUSH
32906: LD_VAR 0 5
32910: ST_TO_ADDR
// end ;
32911: LD_VAR 0 6
32915: RET
// export function WantPlant ( unit ) ; var task ; begin
32916: LD_INT 0
32918: PPUSH
32919: PPUSH
// result := false ;
32920: LD_ADDR_VAR 0 2
32924: PUSH
32925: LD_INT 0
32927: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
32928: LD_ADDR_VAR 0 3
32932: PUSH
32933: LD_VAR 0 1
32937: PPUSH
32938: CALL_OW 437
32942: ST_TO_ADDR
// if task then
32943: LD_VAR 0 3
32947: IFFALSE 32975
// if task [ 1 ] [ 1 ] = p then
32949: LD_VAR 0 3
32953: PUSH
32954: LD_INT 1
32956: ARRAY
32957: PUSH
32958: LD_INT 1
32960: ARRAY
32961: PUSH
32962: LD_STRING p
32964: EQUAL
32965: IFFALSE 32975
// result := true ;
32967: LD_ADDR_VAR 0 2
32971: PUSH
32972: LD_INT 1
32974: ST_TO_ADDR
// end ;
32975: LD_VAR 0 2
32979: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
32980: LD_INT 0
32982: PPUSH
32983: PPUSH
32984: PPUSH
32985: PPUSH
// if pos < 1 then
32986: LD_VAR 0 2
32990: PUSH
32991: LD_INT 1
32993: LESS
32994: IFFALSE 32998
// exit ;
32996: GO 33301
// if pos = 1 then
32998: LD_VAR 0 2
33002: PUSH
33003: LD_INT 1
33005: EQUAL
33006: IFFALSE 33039
// result := Replace ( arr , pos [ 1 ] , value ) else
33008: LD_ADDR_VAR 0 4
33012: PUSH
33013: LD_VAR 0 1
33017: PPUSH
33018: LD_VAR 0 2
33022: PUSH
33023: LD_INT 1
33025: ARRAY
33026: PPUSH
33027: LD_VAR 0 3
33031: PPUSH
33032: CALL_OW 1
33036: ST_TO_ADDR
33037: GO 33301
// begin tmp := arr ;
33039: LD_ADDR_VAR 0 6
33043: PUSH
33044: LD_VAR 0 1
33048: ST_TO_ADDR
// s_arr := [ tmp ] ;
33049: LD_ADDR_VAR 0 7
33053: PUSH
33054: LD_VAR 0 6
33058: PUSH
33059: EMPTY
33060: LIST
33061: ST_TO_ADDR
// for i = 1 to pos - 1 do
33062: LD_ADDR_VAR 0 5
33066: PUSH
33067: DOUBLE
33068: LD_INT 1
33070: DEC
33071: ST_TO_ADDR
33072: LD_VAR 0 2
33076: PUSH
33077: LD_INT 1
33079: MINUS
33080: PUSH
33081: FOR_TO
33082: IFFALSE 33127
// begin tmp := tmp [ pos [ i ] ] ;
33084: LD_ADDR_VAR 0 6
33088: PUSH
33089: LD_VAR 0 6
33093: PUSH
33094: LD_VAR 0 2
33098: PUSH
33099: LD_VAR 0 5
33103: ARRAY
33104: ARRAY
33105: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
33106: LD_ADDR_VAR 0 7
33110: PUSH
33111: LD_VAR 0 7
33115: PUSH
33116: LD_VAR 0 6
33120: PUSH
33121: EMPTY
33122: LIST
33123: ADD
33124: ST_TO_ADDR
// end ;
33125: GO 33081
33127: POP
33128: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
33129: LD_ADDR_VAR 0 6
33133: PUSH
33134: LD_VAR 0 6
33138: PPUSH
33139: LD_VAR 0 2
33143: PUSH
33144: LD_VAR 0 2
33148: ARRAY
33149: PPUSH
33150: LD_VAR 0 3
33154: PPUSH
33155: CALL_OW 1
33159: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
33160: LD_ADDR_VAR 0 7
33164: PUSH
33165: LD_VAR 0 7
33169: PPUSH
33170: LD_VAR 0 7
33174: PPUSH
33175: LD_VAR 0 6
33179: PPUSH
33180: CALL_OW 1
33184: ST_TO_ADDR
// for i = s_arr downto 2 do
33185: LD_ADDR_VAR 0 5
33189: PUSH
33190: DOUBLE
33191: LD_VAR 0 7
33195: INC
33196: ST_TO_ADDR
33197: LD_INT 2
33199: PUSH
33200: FOR_DOWNTO
33201: IFFALSE 33285
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
33203: LD_ADDR_VAR 0 6
33207: PUSH
33208: LD_VAR 0 7
33212: PUSH
33213: LD_VAR 0 5
33217: PUSH
33218: LD_INT 1
33220: MINUS
33221: ARRAY
33222: PPUSH
33223: LD_VAR 0 2
33227: PUSH
33228: LD_VAR 0 5
33232: PUSH
33233: LD_INT 1
33235: MINUS
33236: ARRAY
33237: PPUSH
33238: LD_VAR 0 7
33242: PUSH
33243: LD_VAR 0 5
33247: ARRAY
33248: PPUSH
33249: CALL_OW 1
33253: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
33254: LD_ADDR_VAR 0 7
33258: PUSH
33259: LD_VAR 0 7
33263: PPUSH
33264: LD_VAR 0 5
33268: PUSH
33269: LD_INT 1
33271: MINUS
33272: PPUSH
33273: LD_VAR 0 6
33277: PPUSH
33278: CALL_OW 1
33282: ST_TO_ADDR
// end ;
33283: GO 33200
33285: POP
33286: POP
// result := s_arr [ 1 ] ;
33287: LD_ADDR_VAR 0 4
33291: PUSH
33292: LD_VAR 0 7
33296: PUSH
33297: LD_INT 1
33299: ARRAY
33300: ST_TO_ADDR
// end ; end ;
33301: LD_VAR 0 4
33305: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
33306: LD_INT 0
33308: PPUSH
33309: PPUSH
// if not list then
33310: LD_VAR 0 1
33314: NOT
33315: IFFALSE 33319
// exit ;
33317: GO 33410
// i := list [ pos1 ] ;
33319: LD_ADDR_VAR 0 5
33323: PUSH
33324: LD_VAR 0 1
33328: PUSH
33329: LD_VAR 0 2
33333: ARRAY
33334: ST_TO_ADDR
// if not i then
33335: LD_VAR 0 5
33339: NOT
33340: IFFALSE 33344
// exit ;
33342: GO 33410
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
33344: LD_ADDR_VAR 0 1
33348: PUSH
33349: LD_VAR 0 1
33353: PPUSH
33354: LD_VAR 0 2
33358: PPUSH
33359: LD_VAR 0 1
33363: PUSH
33364: LD_VAR 0 3
33368: ARRAY
33369: PPUSH
33370: CALL_OW 1
33374: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
33375: LD_ADDR_VAR 0 1
33379: PUSH
33380: LD_VAR 0 1
33384: PPUSH
33385: LD_VAR 0 3
33389: PPUSH
33390: LD_VAR 0 5
33394: PPUSH
33395: CALL_OW 1
33399: ST_TO_ADDR
// result := list ;
33400: LD_ADDR_VAR 0 4
33404: PUSH
33405: LD_VAR 0 1
33409: ST_TO_ADDR
// end ;
33410: LD_VAR 0 4
33414: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
33415: LD_INT 0
33417: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
33418: LD_ADDR_VAR 0 5
33422: PUSH
33423: LD_VAR 0 1
33427: PPUSH
33428: CALL_OW 250
33432: PPUSH
33433: LD_VAR 0 1
33437: PPUSH
33438: CALL_OW 251
33442: PPUSH
33443: LD_VAR 0 2
33447: PPUSH
33448: LD_VAR 0 3
33452: PPUSH
33453: LD_VAR 0 4
33457: PPUSH
33458: CALL 33468 0 5
33462: ST_TO_ADDR
// end ;
33463: LD_VAR 0 5
33467: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
33468: LD_INT 0
33470: PPUSH
33471: PPUSH
33472: PPUSH
33473: PPUSH
// if not list then
33474: LD_VAR 0 3
33478: NOT
33479: IFFALSE 33483
// exit ;
33481: GO 33871
// result := [ ] ;
33483: LD_ADDR_VAR 0 6
33487: PUSH
33488: EMPTY
33489: ST_TO_ADDR
// for i in list do
33490: LD_ADDR_VAR 0 7
33494: PUSH
33495: LD_VAR 0 3
33499: PUSH
33500: FOR_IN
33501: IFFALSE 33703
// begin tmp := GetDistUnitXY ( i , x , y ) ;
33503: LD_ADDR_VAR 0 9
33507: PUSH
33508: LD_VAR 0 7
33512: PPUSH
33513: LD_VAR 0 1
33517: PPUSH
33518: LD_VAR 0 2
33522: PPUSH
33523: CALL_OW 297
33527: ST_TO_ADDR
// if not result then
33528: LD_VAR 0 6
33532: NOT
33533: IFFALSE 33559
// result := [ [ i , tmp ] ] else
33535: LD_ADDR_VAR 0 6
33539: PUSH
33540: LD_VAR 0 7
33544: PUSH
33545: LD_VAR 0 9
33549: PUSH
33550: EMPTY
33551: LIST
33552: LIST
33553: PUSH
33554: EMPTY
33555: LIST
33556: ST_TO_ADDR
33557: GO 33701
// begin if result [ result ] [ 2 ] < tmp then
33559: LD_VAR 0 6
33563: PUSH
33564: LD_VAR 0 6
33568: ARRAY
33569: PUSH
33570: LD_INT 2
33572: ARRAY
33573: PUSH
33574: LD_VAR 0 9
33578: LESS
33579: IFFALSE 33621
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
33581: LD_ADDR_VAR 0 6
33585: PUSH
33586: LD_VAR 0 6
33590: PPUSH
33591: LD_VAR 0 6
33595: PUSH
33596: LD_INT 1
33598: PLUS
33599: PPUSH
33600: LD_VAR 0 7
33604: PUSH
33605: LD_VAR 0 9
33609: PUSH
33610: EMPTY
33611: LIST
33612: LIST
33613: PPUSH
33614: CALL_OW 2
33618: ST_TO_ADDR
33619: GO 33701
// for j = 1 to result do
33621: LD_ADDR_VAR 0 8
33625: PUSH
33626: DOUBLE
33627: LD_INT 1
33629: DEC
33630: ST_TO_ADDR
33631: LD_VAR 0 6
33635: PUSH
33636: FOR_TO
33637: IFFALSE 33699
// begin if tmp < result [ j ] [ 2 ] then
33639: LD_VAR 0 9
33643: PUSH
33644: LD_VAR 0 6
33648: PUSH
33649: LD_VAR 0 8
33653: ARRAY
33654: PUSH
33655: LD_INT 2
33657: ARRAY
33658: LESS
33659: IFFALSE 33697
// begin result := Insert ( result , j , [ i , tmp ] ) ;
33661: LD_ADDR_VAR 0 6
33665: PUSH
33666: LD_VAR 0 6
33670: PPUSH
33671: LD_VAR 0 8
33675: PPUSH
33676: LD_VAR 0 7
33680: PUSH
33681: LD_VAR 0 9
33685: PUSH
33686: EMPTY
33687: LIST
33688: LIST
33689: PPUSH
33690: CALL_OW 2
33694: ST_TO_ADDR
// break ;
33695: GO 33699
// end ; end ;
33697: GO 33636
33699: POP
33700: POP
// end ; end ;
33701: GO 33500
33703: POP
33704: POP
// if result and not asc then
33705: LD_VAR 0 6
33709: PUSH
33710: LD_VAR 0 4
33714: NOT
33715: AND
33716: IFFALSE 33791
// begin tmp := result ;
33718: LD_ADDR_VAR 0 9
33722: PUSH
33723: LD_VAR 0 6
33727: ST_TO_ADDR
// for i = tmp downto 1 do
33728: LD_ADDR_VAR 0 7
33732: PUSH
33733: DOUBLE
33734: LD_VAR 0 9
33738: INC
33739: ST_TO_ADDR
33740: LD_INT 1
33742: PUSH
33743: FOR_DOWNTO
33744: IFFALSE 33789
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
33746: LD_ADDR_VAR 0 6
33750: PUSH
33751: LD_VAR 0 6
33755: PPUSH
33756: LD_VAR 0 9
33760: PUSH
33761: LD_VAR 0 7
33765: MINUS
33766: PUSH
33767: LD_INT 1
33769: PLUS
33770: PPUSH
33771: LD_VAR 0 9
33775: PUSH
33776: LD_VAR 0 7
33780: ARRAY
33781: PPUSH
33782: CALL_OW 1
33786: ST_TO_ADDR
33787: GO 33743
33789: POP
33790: POP
// end ; tmp := [ ] ;
33791: LD_ADDR_VAR 0 9
33795: PUSH
33796: EMPTY
33797: ST_TO_ADDR
// if mode then
33798: LD_VAR 0 5
33802: IFFALSE 33871
// begin for i = 1 to result do
33804: LD_ADDR_VAR 0 7
33808: PUSH
33809: DOUBLE
33810: LD_INT 1
33812: DEC
33813: ST_TO_ADDR
33814: LD_VAR 0 6
33818: PUSH
33819: FOR_TO
33820: IFFALSE 33859
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
33822: LD_ADDR_VAR 0 9
33826: PUSH
33827: LD_VAR 0 9
33831: PPUSH
33832: LD_VAR 0 7
33836: PPUSH
33837: LD_VAR 0 6
33841: PUSH
33842: LD_VAR 0 7
33846: ARRAY
33847: PUSH
33848: LD_INT 1
33850: ARRAY
33851: PPUSH
33852: CALL_OW 1
33856: ST_TO_ADDR
33857: GO 33819
33859: POP
33860: POP
// result := tmp ;
33861: LD_ADDR_VAR 0 6
33865: PUSH
33866: LD_VAR 0 9
33870: ST_TO_ADDR
// end ; end ;
33871: LD_VAR 0 6
33875: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
33876: LD_INT 0
33878: PPUSH
33879: PPUSH
33880: PPUSH
33881: PPUSH
33882: PPUSH
33883: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
33884: LD_ADDR_VAR 0 5
33888: PUSH
33889: LD_INT 0
33891: PUSH
33892: LD_INT 0
33894: PUSH
33895: LD_INT 0
33897: PUSH
33898: EMPTY
33899: PUSH
33900: EMPTY
33901: LIST
33902: LIST
33903: LIST
33904: LIST
33905: ST_TO_ADDR
// if not x or not y then
33906: LD_VAR 0 2
33910: NOT
33911: PUSH
33912: LD_VAR 0 3
33916: NOT
33917: OR
33918: IFFALSE 33922
// exit ;
33920: GO 35572
// if not range then
33922: LD_VAR 0 4
33926: NOT
33927: IFFALSE 33937
// range := 10 ;
33929: LD_ADDR_VAR 0 4
33933: PUSH
33934: LD_INT 10
33936: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
33937: LD_ADDR_VAR 0 8
33941: PUSH
33942: LD_INT 81
33944: PUSH
33945: LD_VAR 0 1
33949: PUSH
33950: EMPTY
33951: LIST
33952: LIST
33953: PUSH
33954: LD_INT 92
33956: PUSH
33957: LD_VAR 0 2
33961: PUSH
33962: LD_VAR 0 3
33966: PUSH
33967: LD_VAR 0 4
33971: PUSH
33972: EMPTY
33973: LIST
33974: LIST
33975: LIST
33976: LIST
33977: PUSH
33978: LD_INT 3
33980: PUSH
33981: LD_INT 21
33983: PUSH
33984: LD_INT 3
33986: PUSH
33987: EMPTY
33988: LIST
33989: LIST
33990: PUSH
33991: EMPTY
33992: LIST
33993: LIST
33994: PUSH
33995: EMPTY
33996: LIST
33997: LIST
33998: LIST
33999: PPUSH
34000: CALL_OW 69
34004: ST_TO_ADDR
// if not tmp then
34005: LD_VAR 0 8
34009: NOT
34010: IFFALSE 34014
// exit ;
34012: GO 35572
// for i in tmp do
34014: LD_ADDR_VAR 0 6
34018: PUSH
34019: LD_VAR 0 8
34023: PUSH
34024: FOR_IN
34025: IFFALSE 35547
// begin points := [ 0 , 0 , 0 ] ;
34027: LD_ADDR_VAR 0 9
34031: PUSH
34032: LD_INT 0
34034: PUSH
34035: LD_INT 0
34037: PUSH
34038: LD_INT 0
34040: PUSH
34041: EMPTY
34042: LIST
34043: LIST
34044: LIST
34045: ST_TO_ADDR
// bpoints := 1 ;
34046: LD_ADDR_VAR 0 10
34050: PUSH
34051: LD_INT 1
34053: ST_TO_ADDR
// case GetType ( i ) of unit_human :
34054: LD_VAR 0 6
34058: PPUSH
34059: CALL_OW 247
34063: PUSH
34064: LD_INT 1
34066: DOUBLE
34067: EQUAL
34068: IFTRUE 34072
34070: GO 34650
34072: POP
// begin if GetClass ( i ) = 1 then
34073: LD_VAR 0 6
34077: PPUSH
34078: CALL_OW 257
34082: PUSH
34083: LD_INT 1
34085: EQUAL
34086: IFFALSE 34107
// points := [ 10 , 5 , 3 ] ;
34088: LD_ADDR_VAR 0 9
34092: PUSH
34093: LD_INT 10
34095: PUSH
34096: LD_INT 5
34098: PUSH
34099: LD_INT 3
34101: PUSH
34102: EMPTY
34103: LIST
34104: LIST
34105: LIST
34106: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
34107: LD_VAR 0 6
34111: PPUSH
34112: CALL_OW 257
34116: PUSH
34117: LD_INT 2
34119: PUSH
34120: LD_INT 3
34122: PUSH
34123: LD_INT 4
34125: PUSH
34126: EMPTY
34127: LIST
34128: LIST
34129: LIST
34130: IN
34131: IFFALSE 34152
// points := [ 3 , 2 , 1 ] ;
34133: LD_ADDR_VAR 0 9
34137: PUSH
34138: LD_INT 3
34140: PUSH
34141: LD_INT 2
34143: PUSH
34144: LD_INT 1
34146: PUSH
34147: EMPTY
34148: LIST
34149: LIST
34150: LIST
34151: ST_TO_ADDR
// if GetClass ( i ) = 5 then
34152: LD_VAR 0 6
34156: PPUSH
34157: CALL_OW 257
34161: PUSH
34162: LD_INT 5
34164: EQUAL
34165: IFFALSE 34186
// points := [ 130 , 5 , 2 ] ;
34167: LD_ADDR_VAR 0 9
34171: PUSH
34172: LD_INT 130
34174: PUSH
34175: LD_INT 5
34177: PUSH
34178: LD_INT 2
34180: PUSH
34181: EMPTY
34182: LIST
34183: LIST
34184: LIST
34185: ST_TO_ADDR
// if GetClass ( i ) = 8 then
34186: LD_VAR 0 6
34190: PPUSH
34191: CALL_OW 257
34195: PUSH
34196: LD_INT 8
34198: EQUAL
34199: IFFALSE 34220
// points := [ 35 , 35 , 30 ] ;
34201: LD_ADDR_VAR 0 9
34205: PUSH
34206: LD_INT 35
34208: PUSH
34209: LD_INT 35
34211: PUSH
34212: LD_INT 30
34214: PUSH
34215: EMPTY
34216: LIST
34217: LIST
34218: LIST
34219: ST_TO_ADDR
// if GetClass ( i ) = 9 then
34220: LD_VAR 0 6
34224: PPUSH
34225: CALL_OW 257
34229: PUSH
34230: LD_INT 9
34232: EQUAL
34233: IFFALSE 34254
// points := [ 20 , 55 , 40 ] ;
34235: LD_ADDR_VAR 0 9
34239: PUSH
34240: LD_INT 20
34242: PUSH
34243: LD_INT 55
34245: PUSH
34246: LD_INT 40
34248: PUSH
34249: EMPTY
34250: LIST
34251: LIST
34252: LIST
34253: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
34254: LD_VAR 0 6
34258: PPUSH
34259: CALL_OW 257
34263: PUSH
34264: LD_INT 12
34266: PUSH
34267: LD_INT 16
34269: PUSH
34270: EMPTY
34271: LIST
34272: LIST
34273: IN
34274: IFFALSE 34295
// points := [ 5 , 3 , 2 ] ;
34276: LD_ADDR_VAR 0 9
34280: PUSH
34281: LD_INT 5
34283: PUSH
34284: LD_INT 3
34286: PUSH
34287: LD_INT 2
34289: PUSH
34290: EMPTY
34291: LIST
34292: LIST
34293: LIST
34294: ST_TO_ADDR
// if GetClass ( i ) = 17 then
34295: LD_VAR 0 6
34299: PPUSH
34300: CALL_OW 257
34304: PUSH
34305: LD_INT 17
34307: EQUAL
34308: IFFALSE 34329
// points := [ 100 , 50 , 75 ] ;
34310: LD_ADDR_VAR 0 9
34314: PUSH
34315: LD_INT 100
34317: PUSH
34318: LD_INT 50
34320: PUSH
34321: LD_INT 75
34323: PUSH
34324: EMPTY
34325: LIST
34326: LIST
34327: LIST
34328: ST_TO_ADDR
// if GetClass ( i ) = 15 then
34329: LD_VAR 0 6
34333: PPUSH
34334: CALL_OW 257
34338: PUSH
34339: LD_INT 15
34341: EQUAL
34342: IFFALSE 34363
// points := [ 10 , 5 , 3 ] ;
34344: LD_ADDR_VAR 0 9
34348: PUSH
34349: LD_INT 10
34351: PUSH
34352: LD_INT 5
34354: PUSH
34355: LD_INT 3
34357: PUSH
34358: EMPTY
34359: LIST
34360: LIST
34361: LIST
34362: ST_TO_ADDR
// if GetClass ( i ) = 14 then
34363: LD_VAR 0 6
34367: PPUSH
34368: CALL_OW 257
34372: PUSH
34373: LD_INT 14
34375: EQUAL
34376: IFFALSE 34397
// points := [ 10 , 0 , 0 ] ;
34378: LD_ADDR_VAR 0 9
34382: PUSH
34383: LD_INT 10
34385: PUSH
34386: LD_INT 0
34388: PUSH
34389: LD_INT 0
34391: PUSH
34392: EMPTY
34393: LIST
34394: LIST
34395: LIST
34396: ST_TO_ADDR
// if GetClass ( i ) = 11 then
34397: LD_VAR 0 6
34401: PPUSH
34402: CALL_OW 257
34406: PUSH
34407: LD_INT 11
34409: EQUAL
34410: IFFALSE 34431
// points := [ 30 , 10 , 5 ] ;
34412: LD_ADDR_VAR 0 9
34416: PUSH
34417: LD_INT 30
34419: PUSH
34420: LD_INT 10
34422: PUSH
34423: LD_INT 5
34425: PUSH
34426: EMPTY
34427: LIST
34428: LIST
34429: LIST
34430: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
34431: LD_VAR 0 1
34435: PPUSH
34436: LD_INT 5
34438: PPUSH
34439: CALL_OW 321
34443: PUSH
34444: LD_INT 2
34446: EQUAL
34447: IFFALSE 34464
// bpoints := bpoints * 1.8 ;
34449: LD_ADDR_VAR 0 10
34453: PUSH
34454: LD_VAR 0 10
34458: PUSH
34459: LD_REAL  1.80000000000000E+0000
34462: MUL
34463: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
34464: LD_VAR 0 6
34468: PPUSH
34469: CALL_OW 257
34473: PUSH
34474: LD_INT 1
34476: PUSH
34477: LD_INT 2
34479: PUSH
34480: LD_INT 3
34482: PUSH
34483: LD_INT 4
34485: PUSH
34486: EMPTY
34487: LIST
34488: LIST
34489: LIST
34490: LIST
34491: IN
34492: PUSH
34493: LD_VAR 0 1
34497: PPUSH
34498: LD_INT 51
34500: PPUSH
34501: CALL_OW 321
34505: PUSH
34506: LD_INT 2
34508: EQUAL
34509: AND
34510: IFFALSE 34527
// bpoints := bpoints * 1.2 ;
34512: LD_ADDR_VAR 0 10
34516: PUSH
34517: LD_VAR 0 10
34521: PUSH
34522: LD_REAL  1.20000000000000E+0000
34525: MUL
34526: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
34527: LD_VAR 0 6
34531: PPUSH
34532: CALL_OW 257
34536: PUSH
34537: LD_INT 5
34539: PUSH
34540: LD_INT 7
34542: PUSH
34543: LD_INT 9
34545: PUSH
34546: EMPTY
34547: LIST
34548: LIST
34549: LIST
34550: IN
34551: PUSH
34552: LD_VAR 0 1
34556: PPUSH
34557: LD_INT 52
34559: PPUSH
34560: CALL_OW 321
34564: PUSH
34565: LD_INT 2
34567: EQUAL
34568: AND
34569: IFFALSE 34586
// bpoints := bpoints * 1.5 ;
34571: LD_ADDR_VAR 0 10
34575: PUSH
34576: LD_VAR 0 10
34580: PUSH
34581: LD_REAL  1.50000000000000E+0000
34584: MUL
34585: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
34586: LD_VAR 0 1
34590: PPUSH
34591: LD_INT 66
34593: PPUSH
34594: CALL_OW 321
34598: PUSH
34599: LD_INT 2
34601: EQUAL
34602: IFFALSE 34619
// bpoints := bpoints * 1.1 ;
34604: LD_ADDR_VAR 0 10
34608: PUSH
34609: LD_VAR 0 10
34613: PUSH
34614: LD_REAL  1.10000000000000E+0000
34617: MUL
34618: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
34619: LD_ADDR_VAR 0 10
34623: PUSH
34624: LD_VAR 0 10
34628: PUSH
34629: LD_VAR 0 6
34633: PPUSH
34634: LD_INT 1
34636: PPUSH
34637: CALL_OW 259
34641: PUSH
34642: LD_REAL  1.15000000000000E+0000
34645: MUL
34646: MUL
34647: ST_TO_ADDR
// end ; unit_vehicle :
34648: GO 35476
34650: LD_INT 2
34652: DOUBLE
34653: EQUAL
34654: IFTRUE 34658
34656: GO 35464
34658: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
34659: LD_VAR 0 6
34663: PPUSH
34664: CALL_OW 264
34668: PUSH
34669: LD_INT 2
34671: PUSH
34672: LD_INT 42
34674: PUSH
34675: LD_INT 24
34677: PUSH
34678: EMPTY
34679: LIST
34680: LIST
34681: LIST
34682: IN
34683: IFFALSE 34704
// points := [ 25 , 5 , 3 ] ;
34685: LD_ADDR_VAR 0 9
34689: PUSH
34690: LD_INT 25
34692: PUSH
34693: LD_INT 5
34695: PUSH
34696: LD_INT 3
34698: PUSH
34699: EMPTY
34700: LIST
34701: LIST
34702: LIST
34703: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
34704: LD_VAR 0 6
34708: PPUSH
34709: CALL_OW 264
34713: PUSH
34714: LD_INT 4
34716: PUSH
34717: LD_INT 43
34719: PUSH
34720: LD_INT 25
34722: PUSH
34723: EMPTY
34724: LIST
34725: LIST
34726: LIST
34727: IN
34728: IFFALSE 34749
// points := [ 40 , 15 , 5 ] ;
34730: LD_ADDR_VAR 0 9
34734: PUSH
34735: LD_INT 40
34737: PUSH
34738: LD_INT 15
34740: PUSH
34741: LD_INT 5
34743: PUSH
34744: EMPTY
34745: LIST
34746: LIST
34747: LIST
34748: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
34749: LD_VAR 0 6
34753: PPUSH
34754: CALL_OW 264
34758: PUSH
34759: LD_INT 3
34761: PUSH
34762: LD_INT 23
34764: PUSH
34765: EMPTY
34766: LIST
34767: LIST
34768: IN
34769: IFFALSE 34790
// points := [ 7 , 25 , 8 ] ;
34771: LD_ADDR_VAR 0 9
34775: PUSH
34776: LD_INT 7
34778: PUSH
34779: LD_INT 25
34781: PUSH
34782: LD_INT 8
34784: PUSH
34785: EMPTY
34786: LIST
34787: LIST
34788: LIST
34789: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
34790: LD_VAR 0 6
34794: PPUSH
34795: CALL_OW 264
34799: PUSH
34800: LD_INT 5
34802: PUSH
34803: LD_INT 27
34805: PUSH
34806: LD_INT 44
34808: PUSH
34809: EMPTY
34810: LIST
34811: LIST
34812: LIST
34813: IN
34814: IFFALSE 34835
// points := [ 14 , 50 , 16 ] ;
34816: LD_ADDR_VAR 0 9
34820: PUSH
34821: LD_INT 14
34823: PUSH
34824: LD_INT 50
34826: PUSH
34827: LD_INT 16
34829: PUSH
34830: EMPTY
34831: LIST
34832: LIST
34833: LIST
34834: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
34835: LD_VAR 0 6
34839: PPUSH
34840: CALL_OW 264
34844: PUSH
34845: LD_INT 6
34847: PUSH
34848: LD_INT 46
34850: PUSH
34851: EMPTY
34852: LIST
34853: LIST
34854: IN
34855: IFFALSE 34876
// points := [ 32 , 120 , 70 ] ;
34857: LD_ADDR_VAR 0 9
34861: PUSH
34862: LD_INT 32
34864: PUSH
34865: LD_INT 120
34867: PUSH
34868: LD_INT 70
34870: PUSH
34871: EMPTY
34872: LIST
34873: LIST
34874: LIST
34875: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
34876: LD_VAR 0 6
34880: PPUSH
34881: CALL_OW 264
34885: PUSH
34886: LD_INT 7
34888: PUSH
34889: LD_INT 28
34891: PUSH
34892: LD_INT 45
34894: PUSH
34895: LD_INT 92
34897: PUSH
34898: EMPTY
34899: LIST
34900: LIST
34901: LIST
34902: LIST
34903: IN
34904: IFFALSE 34925
// points := [ 35 , 20 , 45 ] ;
34906: LD_ADDR_VAR 0 9
34910: PUSH
34911: LD_INT 35
34913: PUSH
34914: LD_INT 20
34916: PUSH
34917: LD_INT 45
34919: PUSH
34920: EMPTY
34921: LIST
34922: LIST
34923: LIST
34924: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
34925: LD_VAR 0 6
34929: PPUSH
34930: CALL_OW 264
34934: PUSH
34935: LD_INT 47
34937: PUSH
34938: EMPTY
34939: LIST
34940: IN
34941: IFFALSE 34962
// points := [ 67 , 45 , 75 ] ;
34943: LD_ADDR_VAR 0 9
34947: PUSH
34948: LD_INT 67
34950: PUSH
34951: LD_INT 45
34953: PUSH
34954: LD_INT 75
34956: PUSH
34957: EMPTY
34958: LIST
34959: LIST
34960: LIST
34961: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
34962: LD_VAR 0 6
34966: PPUSH
34967: CALL_OW 264
34971: PUSH
34972: LD_INT 26
34974: PUSH
34975: EMPTY
34976: LIST
34977: IN
34978: IFFALSE 34999
// points := [ 120 , 30 , 80 ] ;
34980: LD_ADDR_VAR 0 9
34984: PUSH
34985: LD_INT 120
34987: PUSH
34988: LD_INT 30
34990: PUSH
34991: LD_INT 80
34993: PUSH
34994: EMPTY
34995: LIST
34996: LIST
34997: LIST
34998: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
34999: LD_VAR 0 6
35003: PPUSH
35004: CALL_OW 264
35008: PUSH
35009: LD_INT 22
35011: PUSH
35012: EMPTY
35013: LIST
35014: IN
35015: IFFALSE 35036
// points := [ 40 , 1 , 1 ] ;
35017: LD_ADDR_VAR 0 9
35021: PUSH
35022: LD_INT 40
35024: PUSH
35025: LD_INT 1
35027: PUSH
35028: LD_INT 1
35030: PUSH
35031: EMPTY
35032: LIST
35033: LIST
35034: LIST
35035: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
35036: LD_VAR 0 6
35040: PPUSH
35041: CALL_OW 264
35045: PUSH
35046: LD_INT 29
35048: PUSH
35049: EMPTY
35050: LIST
35051: IN
35052: IFFALSE 35073
// points := [ 70 , 200 , 400 ] ;
35054: LD_ADDR_VAR 0 9
35058: PUSH
35059: LD_INT 70
35061: PUSH
35062: LD_INT 200
35064: PUSH
35065: LD_INT 400
35067: PUSH
35068: EMPTY
35069: LIST
35070: LIST
35071: LIST
35072: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
35073: LD_VAR 0 6
35077: PPUSH
35078: CALL_OW 264
35082: PUSH
35083: LD_INT 14
35085: PUSH
35086: LD_INT 53
35088: PUSH
35089: EMPTY
35090: LIST
35091: LIST
35092: IN
35093: IFFALSE 35114
// points := [ 40 , 10 , 20 ] ;
35095: LD_ADDR_VAR 0 9
35099: PUSH
35100: LD_INT 40
35102: PUSH
35103: LD_INT 10
35105: PUSH
35106: LD_INT 20
35108: PUSH
35109: EMPTY
35110: LIST
35111: LIST
35112: LIST
35113: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
35114: LD_VAR 0 6
35118: PPUSH
35119: CALL_OW 264
35123: PUSH
35124: LD_INT 9
35126: PUSH
35127: EMPTY
35128: LIST
35129: IN
35130: IFFALSE 35151
// points := [ 5 , 70 , 20 ] ;
35132: LD_ADDR_VAR 0 9
35136: PUSH
35137: LD_INT 5
35139: PUSH
35140: LD_INT 70
35142: PUSH
35143: LD_INT 20
35145: PUSH
35146: EMPTY
35147: LIST
35148: LIST
35149: LIST
35150: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
35151: LD_VAR 0 6
35155: PPUSH
35156: CALL_OW 264
35160: PUSH
35161: LD_INT 10
35163: PUSH
35164: EMPTY
35165: LIST
35166: IN
35167: IFFALSE 35188
// points := [ 35 , 110 , 70 ] ;
35169: LD_ADDR_VAR 0 9
35173: PUSH
35174: LD_INT 35
35176: PUSH
35177: LD_INT 110
35179: PUSH
35180: LD_INT 70
35182: PUSH
35183: EMPTY
35184: LIST
35185: LIST
35186: LIST
35187: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
35188: LD_VAR 0 6
35192: PPUSH
35193: CALL_OW 265
35197: PUSH
35198: LD_INT 25
35200: EQUAL
35201: IFFALSE 35222
// points := [ 80 , 65 , 100 ] ;
35203: LD_ADDR_VAR 0 9
35207: PUSH
35208: LD_INT 80
35210: PUSH
35211: LD_INT 65
35213: PUSH
35214: LD_INT 100
35216: PUSH
35217: EMPTY
35218: LIST
35219: LIST
35220: LIST
35221: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
35222: LD_VAR 0 6
35226: PPUSH
35227: CALL_OW 263
35231: PUSH
35232: LD_INT 1
35234: EQUAL
35235: IFFALSE 35270
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
35237: LD_ADDR_VAR 0 10
35241: PUSH
35242: LD_VAR 0 10
35246: PUSH
35247: LD_VAR 0 6
35251: PPUSH
35252: CALL_OW 311
35256: PPUSH
35257: LD_INT 3
35259: PPUSH
35260: CALL_OW 259
35264: PUSH
35265: LD_INT 4
35267: MUL
35268: MUL
35269: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
35270: LD_VAR 0 6
35274: PPUSH
35275: CALL_OW 263
35279: PUSH
35280: LD_INT 2
35282: EQUAL
35283: IFFALSE 35334
// begin j := IsControledBy ( i ) ;
35285: LD_ADDR_VAR 0 7
35289: PUSH
35290: LD_VAR 0 6
35294: PPUSH
35295: CALL_OW 312
35299: ST_TO_ADDR
// if j then
35300: LD_VAR 0 7
35304: IFFALSE 35334
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
35306: LD_ADDR_VAR 0 10
35310: PUSH
35311: LD_VAR 0 10
35315: PUSH
35316: LD_VAR 0 7
35320: PPUSH
35321: LD_INT 3
35323: PPUSH
35324: CALL_OW 259
35328: PUSH
35329: LD_INT 3
35331: MUL
35332: MUL
35333: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
35334: LD_VAR 0 6
35338: PPUSH
35339: CALL_OW 264
35343: PUSH
35344: LD_INT 5
35346: PUSH
35347: LD_INT 6
35349: PUSH
35350: LD_INT 46
35352: PUSH
35353: LD_INT 44
35355: PUSH
35356: LD_INT 47
35358: PUSH
35359: LD_INT 45
35361: PUSH
35362: LD_INT 28
35364: PUSH
35365: LD_INT 7
35367: PUSH
35368: LD_INT 27
35370: PUSH
35371: LD_INT 29
35373: PUSH
35374: EMPTY
35375: LIST
35376: LIST
35377: LIST
35378: LIST
35379: LIST
35380: LIST
35381: LIST
35382: LIST
35383: LIST
35384: LIST
35385: IN
35386: PUSH
35387: LD_VAR 0 1
35391: PPUSH
35392: LD_INT 52
35394: PPUSH
35395: CALL_OW 321
35399: PUSH
35400: LD_INT 2
35402: EQUAL
35403: AND
35404: IFFALSE 35421
// bpoints := bpoints * 1.2 ;
35406: LD_ADDR_VAR 0 10
35410: PUSH
35411: LD_VAR 0 10
35415: PUSH
35416: LD_REAL  1.20000000000000E+0000
35419: MUL
35420: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
35421: LD_VAR 0 6
35425: PPUSH
35426: CALL_OW 264
35430: PUSH
35431: LD_INT 6
35433: PUSH
35434: LD_INT 46
35436: PUSH
35437: LD_INT 47
35439: PUSH
35440: EMPTY
35441: LIST
35442: LIST
35443: LIST
35444: IN
35445: IFFALSE 35462
// bpoints := bpoints * 1.2 ;
35447: LD_ADDR_VAR 0 10
35451: PUSH
35452: LD_VAR 0 10
35456: PUSH
35457: LD_REAL  1.20000000000000E+0000
35460: MUL
35461: ST_TO_ADDR
// end ; unit_building :
35462: GO 35476
35464: LD_INT 3
35466: DOUBLE
35467: EQUAL
35468: IFTRUE 35472
35470: GO 35475
35472: POP
// ; end ;
35473: GO 35476
35475: POP
// for j = 1 to 3 do
35476: LD_ADDR_VAR 0 7
35480: PUSH
35481: DOUBLE
35482: LD_INT 1
35484: DEC
35485: ST_TO_ADDR
35486: LD_INT 3
35488: PUSH
35489: FOR_TO
35490: IFFALSE 35543
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
35492: LD_ADDR_VAR 0 5
35496: PUSH
35497: LD_VAR 0 5
35501: PPUSH
35502: LD_VAR 0 7
35506: PPUSH
35507: LD_VAR 0 5
35511: PUSH
35512: LD_VAR 0 7
35516: ARRAY
35517: PUSH
35518: LD_VAR 0 9
35522: PUSH
35523: LD_VAR 0 7
35527: ARRAY
35528: PUSH
35529: LD_VAR 0 10
35533: MUL
35534: PLUS
35535: PPUSH
35536: CALL_OW 1
35540: ST_TO_ADDR
35541: GO 35489
35543: POP
35544: POP
// end ;
35545: GO 34024
35547: POP
35548: POP
// result := Replace ( result , 4 , tmp ) ;
35549: LD_ADDR_VAR 0 5
35553: PUSH
35554: LD_VAR 0 5
35558: PPUSH
35559: LD_INT 4
35561: PPUSH
35562: LD_VAR 0 8
35566: PPUSH
35567: CALL_OW 1
35571: ST_TO_ADDR
// end ;
35572: LD_VAR 0 5
35576: RET
// export function DangerAtRange ( unit , range ) ; begin
35577: LD_INT 0
35579: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
35580: LD_ADDR_VAR 0 3
35584: PUSH
35585: LD_VAR 0 1
35589: PPUSH
35590: CALL_OW 255
35594: PPUSH
35595: LD_VAR 0 1
35599: PPUSH
35600: CALL_OW 250
35604: PPUSH
35605: LD_VAR 0 1
35609: PPUSH
35610: CALL_OW 251
35614: PPUSH
35615: LD_VAR 0 2
35619: PPUSH
35620: CALL 33876 0 4
35624: ST_TO_ADDR
// end ;
35625: LD_VAR 0 3
35629: RET
// export function DangerInArea ( side , area ) ; begin
35630: LD_INT 0
35632: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
35633: LD_ADDR_VAR 0 3
35637: PUSH
35638: LD_VAR 0 2
35642: PPUSH
35643: LD_INT 81
35645: PUSH
35646: LD_VAR 0 1
35650: PUSH
35651: EMPTY
35652: LIST
35653: LIST
35654: PPUSH
35655: CALL_OW 70
35659: ST_TO_ADDR
// end ;
35660: LD_VAR 0 3
35664: RET
// export function IsExtension ( b ) ; begin
35665: LD_INT 0
35667: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
35668: LD_ADDR_VAR 0 2
35672: PUSH
35673: LD_VAR 0 1
35677: PUSH
35678: LD_INT 23
35680: PUSH
35681: LD_INT 20
35683: PUSH
35684: LD_INT 22
35686: PUSH
35687: LD_INT 17
35689: PUSH
35690: LD_INT 24
35692: PUSH
35693: LD_INT 21
35695: PUSH
35696: LD_INT 19
35698: PUSH
35699: LD_INT 16
35701: PUSH
35702: LD_INT 25
35704: PUSH
35705: LD_INT 18
35707: PUSH
35708: EMPTY
35709: LIST
35710: LIST
35711: LIST
35712: LIST
35713: LIST
35714: LIST
35715: LIST
35716: LIST
35717: LIST
35718: LIST
35719: IN
35720: ST_TO_ADDR
// end ;
35721: LD_VAR 0 2
35725: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
35726: LD_INT 0
35728: PPUSH
35729: PPUSH
35730: PPUSH
// result := [ ] ;
35731: LD_ADDR_VAR 0 4
35735: PUSH
35736: EMPTY
35737: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
35738: LD_ADDR_VAR 0 5
35742: PUSH
35743: LD_VAR 0 2
35747: PPUSH
35748: LD_INT 21
35750: PUSH
35751: LD_INT 3
35753: PUSH
35754: EMPTY
35755: LIST
35756: LIST
35757: PPUSH
35758: CALL_OW 70
35762: ST_TO_ADDR
// if not tmp then
35763: LD_VAR 0 5
35767: NOT
35768: IFFALSE 35772
// exit ;
35770: GO 35836
// if checkLink then
35772: LD_VAR 0 3
35776: IFFALSE 35826
// begin for i in tmp do
35778: LD_ADDR_VAR 0 6
35782: PUSH
35783: LD_VAR 0 5
35787: PUSH
35788: FOR_IN
35789: IFFALSE 35824
// if GetBase ( i ) <> base then
35791: LD_VAR 0 6
35795: PPUSH
35796: CALL_OW 274
35800: PUSH
35801: LD_VAR 0 1
35805: NONEQUAL
35806: IFFALSE 35822
// ComLinkToBase ( base , i ) ;
35808: LD_VAR 0 1
35812: PPUSH
35813: LD_VAR 0 6
35817: PPUSH
35818: CALL_OW 169
35822: GO 35788
35824: POP
35825: POP
// end ; result := tmp ;
35826: LD_ADDR_VAR 0 4
35830: PUSH
35831: LD_VAR 0 5
35835: ST_TO_ADDR
// end ;
35836: LD_VAR 0 4
35840: RET
// export function ComComplete ( units , b ) ; var i ; begin
35841: LD_INT 0
35843: PPUSH
35844: PPUSH
// if not units then
35845: LD_VAR 0 1
35849: NOT
35850: IFFALSE 35854
// exit ;
35852: GO 35944
// for i in units do
35854: LD_ADDR_VAR 0 4
35858: PUSH
35859: LD_VAR 0 1
35863: PUSH
35864: FOR_IN
35865: IFFALSE 35942
// if BuildingStatus ( b ) = bs_build then
35867: LD_VAR 0 2
35871: PPUSH
35872: CALL_OW 461
35876: PUSH
35877: LD_INT 1
35879: EQUAL
35880: IFFALSE 35940
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
35882: LD_VAR 0 4
35886: PPUSH
35887: LD_STRING h
35889: PUSH
35890: LD_VAR 0 2
35894: PPUSH
35895: CALL_OW 250
35899: PUSH
35900: LD_VAR 0 2
35904: PPUSH
35905: CALL_OW 251
35909: PUSH
35910: LD_VAR 0 2
35914: PUSH
35915: LD_INT 0
35917: PUSH
35918: LD_INT 0
35920: PUSH
35921: LD_INT 0
35923: PUSH
35924: EMPTY
35925: LIST
35926: LIST
35927: LIST
35928: LIST
35929: LIST
35930: LIST
35931: LIST
35932: PUSH
35933: EMPTY
35934: LIST
35935: PPUSH
35936: CALL_OW 446
35940: GO 35864
35942: POP
35943: POP
// end ;
35944: LD_VAR 0 3
35948: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
35949: LD_INT 0
35951: PPUSH
35952: PPUSH
35953: PPUSH
35954: PPUSH
35955: PPUSH
35956: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
35957: LD_VAR 0 1
35961: NOT
35962: PUSH
35963: LD_VAR 0 1
35967: PPUSH
35968: CALL_OW 263
35972: PUSH
35973: LD_INT 2
35975: NONEQUAL
35976: OR
35977: IFFALSE 35981
// exit ;
35979: GO 36297
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
35981: LD_ADDR_VAR 0 6
35985: PUSH
35986: LD_INT 22
35988: PUSH
35989: LD_VAR 0 1
35993: PPUSH
35994: CALL_OW 255
35998: PUSH
35999: EMPTY
36000: LIST
36001: LIST
36002: PUSH
36003: LD_INT 2
36005: PUSH
36006: LD_INT 30
36008: PUSH
36009: LD_INT 36
36011: PUSH
36012: EMPTY
36013: LIST
36014: LIST
36015: PUSH
36016: LD_INT 34
36018: PUSH
36019: LD_INT 31
36021: PUSH
36022: EMPTY
36023: LIST
36024: LIST
36025: PUSH
36026: EMPTY
36027: LIST
36028: LIST
36029: LIST
36030: PUSH
36031: EMPTY
36032: LIST
36033: LIST
36034: PPUSH
36035: CALL_OW 69
36039: ST_TO_ADDR
// if not tmp then
36040: LD_VAR 0 6
36044: NOT
36045: IFFALSE 36049
// exit ;
36047: GO 36297
// result := [ ] ;
36049: LD_ADDR_VAR 0 2
36053: PUSH
36054: EMPTY
36055: ST_TO_ADDR
// for i in tmp do
36056: LD_ADDR_VAR 0 3
36060: PUSH
36061: LD_VAR 0 6
36065: PUSH
36066: FOR_IN
36067: IFFALSE 36138
// begin t := UnitsInside ( i ) ;
36069: LD_ADDR_VAR 0 4
36073: PUSH
36074: LD_VAR 0 3
36078: PPUSH
36079: CALL_OW 313
36083: ST_TO_ADDR
// if t then
36084: LD_VAR 0 4
36088: IFFALSE 36136
// for j in t do
36090: LD_ADDR_VAR 0 7
36094: PUSH
36095: LD_VAR 0 4
36099: PUSH
36100: FOR_IN
36101: IFFALSE 36134
// result := Replace ( result , result + 1 , j ) ;
36103: LD_ADDR_VAR 0 2
36107: PUSH
36108: LD_VAR 0 2
36112: PPUSH
36113: LD_VAR 0 2
36117: PUSH
36118: LD_INT 1
36120: PLUS
36121: PPUSH
36122: LD_VAR 0 7
36126: PPUSH
36127: CALL_OW 1
36131: ST_TO_ADDR
36132: GO 36100
36134: POP
36135: POP
// end ;
36136: GO 36066
36138: POP
36139: POP
// if not result then
36140: LD_VAR 0 2
36144: NOT
36145: IFFALSE 36149
// exit ;
36147: GO 36297
// mech := result [ 1 ] ;
36149: LD_ADDR_VAR 0 5
36153: PUSH
36154: LD_VAR 0 2
36158: PUSH
36159: LD_INT 1
36161: ARRAY
36162: ST_TO_ADDR
// if result > 1 then
36163: LD_VAR 0 2
36167: PUSH
36168: LD_INT 1
36170: GREATER
36171: IFFALSE 36283
// begin for i = 2 to result do
36173: LD_ADDR_VAR 0 3
36177: PUSH
36178: DOUBLE
36179: LD_INT 2
36181: DEC
36182: ST_TO_ADDR
36183: LD_VAR 0 2
36187: PUSH
36188: FOR_TO
36189: IFFALSE 36281
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
36191: LD_ADDR_VAR 0 4
36195: PUSH
36196: LD_VAR 0 2
36200: PUSH
36201: LD_VAR 0 3
36205: ARRAY
36206: PPUSH
36207: LD_INT 3
36209: PPUSH
36210: CALL_OW 259
36214: PUSH
36215: LD_VAR 0 2
36219: PUSH
36220: LD_VAR 0 3
36224: ARRAY
36225: PPUSH
36226: CALL_OW 432
36230: MINUS
36231: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
36232: LD_VAR 0 4
36236: PUSH
36237: LD_VAR 0 5
36241: PPUSH
36242: LD_INT 3
36244: PPUSH
36245: CALL_OW 259
36249: PUSH
36250: LD_VAR 0 5
36254: PPUSH
36255: CALL_OW 432
36259: MINUS
36260: GREATEREQUAL
36261: IFFALSE 36279
// mech := result [ i ] ;
36263: LD_ADDR_VAR 0 5
36267: PUSH
36268: LD_VAR 0 2
36272: PUSH
36273: LD_VAR 0 3
36277: ARRAY
36278: ST_TO_ADDR
// end ;
36279: GO 36188
36281: POP
36282: POP
// end ; ComLinkTo ( vehicle , mech ) ;
36283: LD_VAR 0 1
36287: PPUSH
36288: LD_VAR 0 5
36292: PPUSH
36293: CALL_OW 135
// end ;
36297: LD_VAR 0 2
36301: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
36302: LD_INT 0
36304: PPUSH
36305: PPUSH
36306: PPUSH
36307: PPUSH
36308: PPUSH
36309: PPUSH
36310: PPUSH
36311: PPUSH
36312: PPUSH
36313: PPUSH
36314: PPUSH
36315: PPUSH
36316: PPUSH
// result := [ ] ;
36317: LD_ADDR_VAR 0 7
36321: PUSH
36322: EMPTY
36323: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
36324: LD_VAR 0 1
36328: PPUSH
36329: CALL_OW 266
36333: PUSH
36334: LD_INT 0
36336: PUSH
36337: LD_INT 1
36339: PUSH
36340: EMPTY
36341: LIST
36342: LIST
36343: IN
36344: NOT
36345: IFFALSE 36349
// exit ;
36347: GO 37983
// if name then
36349: LD_VAR 0 3
36353: IFFALSE 36369
// SetBName ( base_dep , name ) ;
36355: LD_VAR 0 1
36359: PPUSH
36360: LD_VAR 0 3
36364: PPUSH
36365: CALL_OW 500
// base := GetBase ( base_dep ) ;
36369: LD_ADDR_VAR 0 15
36373: PUSH
36374: LD_VAR 0 1
36378: PPUSH
36379: CALL_OW 274
36383: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
36384: LD_ADDR_VAR 0 16
36388: PUSH
36389: LD_VAR 0 1
36393: PPUSH
36394: CALL_OW 255
36398: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
36399: LD_ADDR_VAR 0 17
36403: PUSH
36404: LD_VAR 0 1
36408: PPUSH
36409: CALL_OW 248
36413: ST_TO_ADDR
// if sources then
36414: LD_VAR 0 5
36418: IFFALSE 36465
// for i = 1 to 3 do
36420: LD_ADDR_VAR 0 8
36424: PUSH
36425: DOUBLE
36426: LD_INT 1
36428: DEC
36429: ST_TO_ADDR
36430: LD_INT 3
36432: PUSH
36433: FOR_TO
36434: IFFALSE 36463
// AddResourceType ( base , i , sources [ i ] ) ;
36436: LD_VAR 0 15
36440: PPUSH
36441: LD_VAR 0 8
36445: PPUSH
36446: LD_VAR 0 5
36450: PUSH
36451: LD_VAR 0 8
36455: ARRAY
36456: PPUSH
36457: CALL_OW 276
36461: GO 36433
36463: POP
36464: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
36465: LD_ADDR_VAR 0 18
36469: PUSH
36470: LD_VAR 0 15
36474: PPUSH
36475: LD_VAR 0 2
36479: PPUSH
36480: LD_INT 1
36482: PPUSH
36483: CALL 35726 0 3
36487: ST_TO_ADDR
// InitHc ;
36488: CALL_OW 19
// InitUc ;
36492: CALL_OW 18
// uc_side := side ;
36496: LD_ADDR_OWVAR 20
36500: PUSH
36501: LD_VAR 0 16
36505: ST_TO_ADDR
// uc_nation := nation ;
36506: LD_ADDR_OWVAR 21
36510: PUSH
36511: LD_VAR 0 17
36515: ST_TO_ADDR
// if buildings then
36516: LD_VAR 0 18
36520: IFFALSE 37842
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
36522: LD_ADDR_VAR 0 19
36526: PUSH
36527: LD_VAR 0 18
36531: PPUSH
36532: LD_INT 2
36534: PUSH
36535: LD_INT 30
36537: PUSH
36538: LD_INT 29
36540: PUSH
36541: EMPTY
36542: LIST
36543: LIST
36544: PUSH
36545: LD_INT 30
36547: PUSH
36548: LD_INT 30
36550: PUSH
36551: EMPTY
36552: LIST
36553: LIST
36554: PUSH
36555: EMPTY
36556: LIST
36557: LIST
36558: LIST
36559: PPUSH
36560: CALL_OW 72
36564: ST_TO_ADDR
// if tmp then
36565: LD_VAR 0 19
36569: IFFALSE 36617
// for i in tmp do
36571: LD_ADDR_VAR 0 8
36575: PUSH
36576: LD_VAR 0 19
36580: PUSH
36581: FOR_IN
36582: IFFALSE 36615
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
36584: LD_VAR 0 8
36588: PPUSH
36589: CALL_OW 250
36593: PPUSH
36594: LD_VAR 0 8
36598: PPUSH
36599: CALL_OW 251
36603: PPUSH
36604: LD_VAR 0 16
36608: PPUSH
36609: CALL_OW 441
36613: GO 36581
36615: POP
36616: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
36617: LD_VAR 0 18
36621: PPUSH
36622: LD_INT 2
36624: PUSH
36625: LD_INT 30
36627: PUSH
36628: LD_INT 32
36630: PUSH
36631: EMPTY
36632: LIST
36633: LIST
36634: PUSH
36635: LD_INT 30
36637: PUSH
36638: LD_INT 33
36640: PUSH
36641: EMPTY
36642: LIST
36643: LIST
36644: PUSH
36645: EMPTY
36646: LIST
36647: LIST
36648: LIST
36649: PPUSH
36650: CALL_OW 72
36654: IFFALSE 36742
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
36656: LD_ADDR_VAR 0 8
36660: PUSH
36661: LD_VAR 0 18
36665: PPUSH
36666: LD_INT 2
36668: PUSH
36669: LD_INT 30
36671: PUSH
36672: LD_INT 32
36674: PUSH
36675: EMPTY
36676: LIST
36677: LIST
36678: PUSH
36679: LD_INT 30
36681: PUSH
36682: LD_INT 33
36684: PUSH
36685: EMPTY
36686: LIST
36687: LIST
36688: PUSH
36689: EMPTY
36690: LIST
36691: LIST
36692: LIST
36693: PPUSH
36694: CALL_OW 72
36698: PUSH
36699: FOR_IN
36700: IFFALSE 36740
// begin if not GetBWeapon ( i ) then
36702: LD_VAR 0 8
36706: PPUSH
36707: CALL_OW 269
36711: NOT
36712: IFFALSE 36738
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
36714: LD_VAR 0 8
36718: PPUSH
36719: LD_VAR 0 8
36723: PPUSH
36724: LD_VAR 0 2
36728: PPUSH
36729: CALL 37988 0 2
36733: PPUSH
36734: CALL_OW 431
// end ;
36738: GO 36699
36740: POP
36741: POP
// end ; for i = 1 to personel do
36742: LD_ADDR_VAR 0 8
36746: PUSH
36747: DOUBLE
36748: LD_INT 1
36750: DEC
36751: ST_TO_ADDR
36752: LD_VAR 0 6
36756: PUSH
36757: FOR_TO
36758: IFFALSE 37822
// begin if i > 4 then
36760: LD_VAR 0 8
36764: PUSH
36765: LD_INT 4
36767: GREATER
36768: IFFALSE 36772
// break ;
36770: GO 37822
// case i of 1 :
36772: LD_VAR 0 8
36776: PUSH
36777: LD_INT 1
36779: DOUBLE
36780: EQUAL
36781: IFTRUE 36785
36783: GO 36865
36785: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
36786: LD_ADDR_VAR 0 12
36790: PUSH
36791: LD_VAR 0 18
36795: PPUSH
36796: LD_INT 22
36798: PUSH
36799: LD_VAR 0 16
36803: PUSH
36804: EMPTY
36805: LIST
36806: LIST
36807: PUSH
36808: LD_INT 58
36810: PUSH
36811: EMPTY
36812: LIST
36813: PUSH
36814: LD_INT 2
36816: PUSH
36817: LD_INT 30
36819: PUSH
36820: LD_INT 32
36822: PUSH
36823: EMPTY
36824: LIST
36825: LIST
36826: PUSH
36827: LD_INT 30
36829: PUSH
36830: LD_INT 4
36832: PUSH
36833: EMPTY
36834: LIST
36835: LIST
36836: PUSH
36837: LD_INT 30
36839: PUSH
36840: LD_INT 5
36842: PUSH
36843: EMPTY
36844: LIST
36845: LIST
36846: PUSH
36847: EMPTY
36848: LIST
36849: LIST
36850: LIST
36851: LIST
36852: PUSH
36853: EMPTY
36854: LIST
36855: LIST
36856: LIST
36857: PPUSH
36858: CALL_OW 72
36862: ST_TO_ADDR
36863: GO 37087
36865: LD_INT 2
36867: DOUBLE
36868: EQUAL
36869: IFTRUE 36873
36871: GO 36935
36873: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
36874: LD_ADDR_VAR 0 12
36878: PUSH
36879: LD_VAR 0 18
36883: PPUSH
36884: LD_INT 22
36886: PUSH
36887: LD_VAR 0 16
36891: PUSH
36892: EMPTY
36893: LIST
36894: LIST
36895: PUSH
36896: LD_INT 2
36898: PUSH
36899: LD_INT 30
36901: PUSH
36902: LD_INT 0
36904: PUSH
36905: EMPTY
36906: LIST
36907: LIST
36908: PUSH
36909: LD_INT 30
36911: PUSH
36912: LD_INT 1
36914: PUSH
36915: EMPTY
36916: LIST
36917: LIST
36918: PUSH
36919: EMPTY
36920: LIST
36921: LIST
36922: LIST
36923: PUSH
36924: EMPTY
36925: LIST
36926: LIST
36927: PPUSH
36928: CALL_OW 72
36932: ST_TO_ADDR
36933: GO 37087
36935: LD_INT 3
36937: DOUBLE
36938: EQUAL
36939: IFTRUE 36943
36941: GO 37005
36943: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
36944: LD_ADDR_VAR 0 12
36948: PUSH
36949: LD_VAR 0 18
36953: PPUSH
36954: LD_INT 22
36956: PUSH
36957: LD_VAR 0 16
36961: PUSH
36962: EMPTY
36963: LIST
36964: LIST
36965: PUSH
36966: LD_INT 2
36968: PUSH
36969: LD_INT 30
36971: PUSH
36972: LD_INT 2
36974: PUSH
36975: EMPTY
36976: LIST
36977: LIST
36978: PUSH
36979: LD_INT 30
36981: PUSH
36982: LD_INT 3
36984: PUSH
36985: EMPTY
36986: LIST
36987: LIST
36988: PUSH
36989: EMPTY
36990: LIST
36991: LIST
36992: LIST
36993: PUSH
36994: EMPTY
36995: LIST
36996: LIST
36997: PPUSH
36998: CALL_OW 72
37002: ST_TO_ADDR
37003: GO 37087
37005: LD_INT 4
37007: DOUBLE
37008: EQUAL
37009: IFTRUE 37013
37011: GO 37086
37013: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
37014: LD_ADDR_VAR 0 12
37018: PUSH
37019: LD_VAR 0 18
37023: PPUSH
37024: LD_INT 22
37026: PUSH
37027: LD_VAR 0 16
37031: PUSH
37032: EMPTY
37033: LIST
37034: LIST
37035: PUSH
37036: LD_INT 2
37038: PUSH
37039: LD_INT 30
37041: PUSH
37042: LD_INT 6
37044: PUSH
37045: EMPTY
37046: LIST
37047: LIST
37048: PUSH
37049: LD_INT 30
37051: PUSH
37052: LD_INT 7
37054: PUSH
37055: EMPTY
37056: LIST
37057: LIST
37058: PUSH
37059: LD_INT 30
37061: PUSH
37062: LD_INT 8
37064: PUSH
37065: EMPTY
37066: LIST
37067: LIST
37068: PUSH
37069: EMPTY
37070: LIST
37071: LIST
37072: LIST
37073: LIST
37074: PUSH
37075: EMPTY
37076: LIST
37077: LIST
37078: PPUSH
37079: CALL_OW 72
37083: ST_TO_ADDR
37084: GO 37087
37086: POP
// if i = 1 then
37087: LD_VAR 0 8
37091: PUSH
37092: LD_INT 1
37094: EQUAL
37095: IFFALSE 37206
// begin tmp := [ ] ;
37097: LD_ADDR_VAR 0 19
37101: PUSH
37102: EMPTY
37103: ST_TO_ADDR
// for j in f do
37104: LD_ADDR_VAR 0 9
37108: PUSH
37109: LD_VAR 0 12
37113: PUSH
37114: FOR_IN
37115: IFFALSE 37188
// if GetBType ( j ) = b_bunker then
37117: LD_VAR 0 9
37121: PPUSH
37122: CALL_OW 266
37126: PUSH
37127: LD_INT 32
37129: EQUAL
37130: IFFALSE 37157
// tmp := Insert ( tmp , 1 , j ) else
37132: LD_ADDR_VAR 0 19
37136: PUSH
37137: LD_VAR 0 19
37141: PPUSH
37142: LD_INT 1
37144: PPUSH
37145: LD_VAR 0 9
37149: PPUSH
37150: CALL_OW 2
37154: ST_TO_ADDR
37155: GO 37186
// tmp := Insert ( tmp , tmp + 1 , j ) ;
37157: LD_ADDR_VAR 0 19
37161: PUSH
37162: LD_VAR 0 19
37166: PPUSH
37167: LD_VAR 0 19
37171: PUSH
37172: LD_INT 1
37174: PLUS
37175: PPUSH
37176: LD_VAR 0 9
37180: PPUSH
37181: CALL_OW 2
37185: ST_TO_ADDR
37186: GO 37114
37188: POP
37189: POP
// if tmp then
37190: LD_VAR 0 19
37194: IFFALSE 37206
// f := tmp ;
37196: LD_ADDR_VAR 0 12
37200: PUSH
37201: LD_VAR 0 19
37205: ST_TO_ADDR
// end ; x := personel [ i ] ;
37206: LD_ADDR_VAR 0 13
37210: PUSH
37211: LD_VAR 0 6
37215: PUSH
37216: LD_VAR 0 8
37220: ARRAY
37221: ST_TO_ADDR
// if x = - 1 then
37222: LD_VAR 0 13
37226: PUSH
37227: LD_INT 1
37229: NEG
37230: EQUAL
37231: IFFALSE 37440
// begin for j in f do
37233: LD_ADDR_VAR 0 9
37237: PUSH
37238: LD_VAR 0 12
37242: PUSH
37243: FOR_IN
37244: IFFALSE 37436
// repeat InitHc ;
37246: CALL_OW 19
// if GetBType ( j ) = b_barracks then
37250: LD_VAR 0 9
37254: PPUSH
37255: CALL_OW 266
37259: PUSH
37260: LD_INT 5
37262: EQUAL
37263: IFFALSE 37333
// begin if UnitsInside ( j ) < 3 then
37265: LD_VAR 0 9
37269: PPUSH
37270: CALL_OW 313
37274: PUSH
37275: LD_INT 3
37277: LESS
37278: IFFALSE 37314
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
37280: LD_INT 0
37282: PPUSH
37283: LD_INT 5
37285: PUSH
37286: LD_INT 8
37288: PUSH
37289: LD_INT 9
37291: PUSH
37292: EMPTY
37293: LIST
37294: LIST
37295: LIST
37296: PUSH
37297: LD_VAR 0 17
37301: ARRAY
37302: PPUSH
37303: LD_VAR 0 4
37307: PPUSH
37308: CALL_OW 380
37312: GO 37331
// PrepareHuman ( false , i , skill ) ;
37314: LD_INT 0
37316: PPUSH
37317: LD_VAR 0 8
37321: PPUSH
37322: LD_VAR 0 4
37326: PPUSH
37327: CALL_OW 380
// end else
37331: GO 37350
// PrepareHuman ( false , i , skill ) ;
37333: LD_INT 0
37335: PPUSH
37336: LD_VAR 0 8
37340: PPUSH
37341: LD_VAR 0 4
37345: PPUSH
37346: CALL_OW 380
// un := CreateHuman ;
37350: LD_ADDR_VAR 0 14
37354: PUSH
37355: CALL_OW 44
37359: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
37360: LD_ADDR_VAR 0 7
37364: PUSH
37365: LD_VAR 0 7
37369: PPUSH
37370: LD_INT 1
37372: PPUSH
37373: LD_VAR 0 14
37377: PPUSH
37378: CALL_OW 2
37382: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
37383: LD_VAR 0 14
37387: PPUSH
37388: LD_VAR 0 9
37392: PPUSH
37393: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
37397: LD_VAR 0 9
37401: PPUSH
37402: CALL_OW 313
37406: PUSH
37407: LD_INT 6
37409: EQUAL
37410: PUSH
37411: LD_VAR 0 9
37415: PPUSH
37416: CALL_OW 266
37420: PUSH
37421: LD_INT 32
37423: PUSH
37424: LD_INT 31
37426: PUSH
37427: EMPTY
37428: LIST
37429: LIST
37430: IN
37431: OR
37432: IFFALSE 37246
37434: GO 37243
37436: POP
37437: POP
// end else
37438: GO 37820
// for j = 1 to x do
37440: LD_ADDR_VAR 0 9
37444: PUSH
37445: DOUBLE
37446: LD_INT 1
37448: DEC
37449: ST_TO_ADDR
37450: LD_VAR 0 13
37454: PUSH
37455: FOR_TO
37456: IFFALSE 37818
// begin InitHc ;
37458: CALL_OW 19
// if not f then
37462: LD_VAR 0 12
37466: NOT
37467: IFFALSE 37556
// begin PrepareHuman ( false , i , skill ) ;
37469: LD_INT 0
37471: PPUSH
37472: LD_VAR 0 8
37476: PPUSH
37477: LD_VAR 0 4
37481: PPUSH
37482: CALL_OW 380
// un := CreateHuman ;
37486: LD_ADDR_VAR 0 14
37490: PUSH
37491: CALL_OW 44
37495: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
37496: LD_ADDR_VAR 0 7
37500: PUSH
37501: LD_VAR 0 7
37505: PPUSH
37506: LD_INT 1
37508: PPUSH
37509: LD_VAR 0 14
37513: PPUSH
37514: CALL_OW 2
37518: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
37519: LD_VAR 0 14
37523: PPUSH
37524: LD_VAR 0 1
37528: PPUSH
37529: CALL_OW 250
37533: PPUSH
37534: LD_VAR 0 1
37538: PPUSH
37539: CALL_OW 251
37543: PPUSH
37544: LD_INT 10
37546: PPUSH
37547: LD_INT 0
37549: PPUSH
37550: CALL_OW 50
// continue ;
37554: GO 37455
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
37556: LD_VAR 0 12
37560: PUSH
37561: LD_INT 1
37563: ARRAY
37564: PPUSH
37565: CALL_OW 313
37569: PUSH
37570: LD_VAR 0 12
37574: PUSH
37575: LD_INT 1
37577: ARRAY
37578: PPUSH
37579: CALL_OW 266
37583: PUSH
37584: LD_INT 32
37586: PUSH
37587: LD_INT 31
37589: PUSH
37590: EMPTY
37591: LIST
37592: LIST
37593: IN
37594: AND
37595: PUSH
37596: LD_VAR 0 12
37600: PUSH
37601: LD_INT 1
37603: ARRAY
37604: PPUSH
37605: CALL_OW 313
37609: PUSH
37610: LD_INT 6
37612: EQUAL
37613: OR
37614: IFFALSE 37634
// f := Delete ( f , 1 ) ;
37616: LD_ADDR_VAR 0 12
37620: PUSH
37621: LD_VAR 0 12
37625: PPUSH
37626: LD_INT 1
37628: PPUSH
37629: CALL_OW 3
37633: ST_TO_ADDR
// if not f then
37634: LD_VAR 0 12
37638: NOT
37639: IFFALSE 37657
// begin x := x + 2 ;
37641: LD_ADDR_VAR 0 13
37645: PUSH
37646: LD_VAR 0 13
37650: PUSH
37651: LD_INT 2
37653: PLUS
37654: ST_TO_ADDR
// continue ;
37655: GO 37455
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
37657: LD_VAR 0 12
37661: PUSH
37662: LD_INT 1
37664: ARRAY
37665: PPUSH
37666: CALL_OW 266
37670: PUSH
37671: LD_INT 5
37673: EQUAL
37674: IFFALSE 37748
// begin if UnitsInside ( f [ 1 ] ) < 3 then
37676: LD_VAR 0 12
37680: PUSH
37681: LD_INT 1
37683: ARRAY
37684: PPUSH
37685: CALL_OW 313
37689: PUSH
37690: LD_INT 3
37692: LESS
37693: IFFALSE 37729
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
37695: LD_INT 0
37697: PPUSH
37698: LD_INT 5
37700: PUSH
37701: LD_INT 8
37703: PUSH
37704: LD_INT 9
37706: PUSH
37707: EMPTY
37708: LIST
37709: LIST
37710: LIST
37711: PUSH
37712: LD_VAR 0 17
37716: ARRAY
37717: PPUSH
37718: LD_VAR 0 4
37722: PPUSH
37723: CALL_OW 380
37727: GO 37746
// PrepareHuman ( false , i , skill ) ;
37729: LD_INT 0
37731: PPUSH
37732: LD_VAR 0 8
37736: PPUSH
37737: LD_VAR 0 4
37741: PPUSH
37742: CALL_OW 380
// end else
37746: GO 37765
// PrepareHuman ( false , i , skill ) ;
37748: LD_INT 0
37750: PPUSH
37751: LD_VAR 0 8
37755: PPUSH
37756: LD_VAR 0 4
37760: PPUSH
37761: CALL_OW 380
// un := CreateHuman ;
37765: LD_ADDR_VAR 0 14
37769: PUSH
37770: CALL_OW 44
37774: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
37775: LD_ADDR_VAR 0 7
37779: PUSH
37780: LD_VAR 0 7
37784: PPUSH
37785: LD_INT 1
37787: PPUSH
37788: LD_VAR 0 14
37792: PPUSH
37793: CALL_OW 2
37797: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
37798: LD_VAR 0 14
37802: PPUSH
37803: LD_VAR 0 12
37807: PUSH
37808: LD_INT 1
37810: ARRAY
37811: PPUSH
37812: CALL_OW 52
// end ;
37816: GO 37455
37818: POP
37819: POP
// end ;
37820: GO 36757
37822: POP
37823: POP
// result := result ^ buildings ;
37824: LD_ADDR_VAR 0 7
37828: PUSH
37829: LD_VAR 0 7
37833: PUSH
37834: LD_VAR 0 18
37838: ADD
37839: ST_TO_ADDR
// end else
37840: GO 37983
// begin for i = 1 to personel do
37842: LD_ADDR_VAR 0 8
37846: PUSH
37847: DOUBLE
37848: LD_INT 1
37850: DEC
37851: ST_TO_ADDR
37852: LD_VAR 0 6
37856: PUSH
37857: FOR_TO
37858: IFFALSE 37981
// begin if i > 4 then
37860: LD_VAR 0 8
37864: PUSH
37865: LD_INT 4
37867: GREATER
37868: IFFALSE 37872
// break ;
37870: GO 37981
// x := personel [ i ] ;
37872: LD_ADDR_VAR 0 13
37876: PUSH
37877: LD_VAR 0 6
37881: PUSH
37882: LD_VAR 0 8
37886: ARRAY
37887: ST_TO_ADDR
// if x = - 1 then
37888: LD_VAR 0 13
37892: PUSH
37893: LD_INT 1
37895: NEG
37896: EQUAL
37897: IFFALSE 37901
// continue ;
37899: GO 37857
// PrepareHuman ( false , i , skill ) ;
37901: LD_INT 0
37903: PPUSH
37904: LD_VAR 0 8
37908: PPUSH
37909: LD_VAR 0 4
37913: PPUSH
37914: CALL_OW 380
// un := CreateHuman ;
37918: LD_ADDR_VAR 0 14
37922: PUSH
37923: CALL_OW 44
37927: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
37928: LD_VAR 0 14
37932: PPUSH
37933: LD_VAR 0 1
37937: PPUSH
37938: CALL_OW 250
37942: PPUSH
37943: LD_VAR 0 1
37947: PPUSH
37948: CALL_OW 251
37952: PPUSH
37953: LD_INT 10
37955: PPUSH
37956: LD_INT 0
37958: PPUSH
37959: CALL_OW 50
// result := result ^ un ;
37963: LD_ADDR_VAR 0 7
37967: PUSH
37968: LD_VAR 0 7
37972: PUSH
37973: LD_VAR 0 14
37977: ADD
37978: ST_TO_ADDR
// end ;
37979: GO 37857
37981: POP
37982: POP
// end ; end ;
37983: LD_VAR 0 7
37987: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
37988: LD_INT 0
37990: PPUSH
37991: PPUSH
37992: PPUSH
37993: PPUSH
37994: PPUSH
37995: PPUSH
37996: PPUSH
37997: PPUSH
37998: PPUSH
37999: PPUSH
38000: PPUSH
38001: PPUSH
38002: PPUSH
38003: PPUSH
38004: PPUSH
38005: PPUSH
// result := false ;
38006: LD_ADDR_VAR 0 3
38010: PUSH
38011: LD_INT 0
38013: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
38014: LD_VAR 0 1
38018: NOT
38019: PUSH
38020: LD_VAR 0 1
38024: PPUSH
38025: CALL_OW 266
38029: PUSH
38030: LD_INT 32
38032: PUSH
38033: LD_INT 33
38035: PUSH
38036: EMPTY
38037: LIST
38038: LIST
38039: IN
38040: NOT
38041: OR
38042: IFFALSE 38046
// exit ;
38044: GO 39155
// nat := GetNation ( tower ) ;
38046: LD_ADDR_VAR 0 12
38050: PUSH
38051: LD_VAR 0 1
38055: PPUSH
38056: CALL_OW 248
38060: ST_TO_ADDR
// side := GetSide ( tower ) ;
38061: LD_ADDR_VAR 0 16
38065: PUSH
38066: LD_VAR 0 1
38070: PPUSH
38071: CALL_OW 255
38075: ST_TO_ADDR
// x := GetX ( tower ) ;
38076: LD_ADDR_VAR 0 10
38080: PUSH
38081: LD_VAR 0 1
38085: PPUSH
38086: CALL_OW 250
38090: ST_TO_ADDR
// y := GetY ( tower ) ;
38091: LD_ADDR_VAR 0 11
38095: PUSH
38096: LD_VAR 0 1
38100: PPUSH
38101: CALL_OW 251
38105: ST_TO_ADDR
// if not x or not y then
38106: LD_VAR 0 10
38110: NOT
38111: PUSH
38112: LD_VAR 0 11
38116: NOT
38117: OR
38118: IFFALSE 38122
// exit ;
38120: GO 39155
// weapon := 0 ;
38122: LD_ADDR_VAR 0 18
38126: PUSH
38127: LD_INT 0
38129: ST_TO_ADDR
// fac_list := [ ] ;
38130: LD_ADDR_VAR 0 17
38134: PUSH
38135: EMPTY
38136: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
38137: LD_ADDR_VAR 0 6
38141: PUSH
38142: LD_VAR 0 1
38146: PPUSH
38147: CALL_OW 274
38151: PPUSH
38152: LD_VAR 0 2
38156: PPUSH
38157: LD_INT 0
38159: PPUSH
38160: CALL 35726 0 3
38164: PPUSH
38165: LD_INT 30
38167: PUSH
38168: LD_INT 3
38170: PUSH
38171: EMPTY
38172: LIST
38173: LIST
38174: PPUSH
38175: CALL_OW 72
38179: ST_TO_ADDR
// if not factories then
38180: LD_VAR 0 6
38184: NOT
38185: IFFALSE 38189
// exit ;
38187: GO 39155
// for i in factories do
38189: LD_ADDR_VAR 0 8
38193: PUSH
38194: LD_VAR 0 6
38198: PUSH
38199: FOR_IN
38200: IFFALSE 38225
// fac_list := fac_list union AvailableWeaponList ( i ) ;
38202: LD_ADDR_VAR 0 17
38206: PUSH
38207: LD_VAR 0 17
38211: PUSH
38212: LD_VAR 0 8
38216: PPUSH
38217: CALL_OW 478
38221: UNION
38222: ST_TO_ADDR
38223: GO 38199
38225: POP
38226: POP
// if not fac_list then
38227: LD_VAR 0 17
38231: NOT
38232: IFFALSE 38236
// exit ;
38234: GO 39155
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
38236: LD_ADDR_VAR 0 5
38240: PUSH
38241: LD_INT 4
38243: PUSH
38244: LD_INT 5
38246: PUSH
38247: LD_INT 9
38249: PUSH
38250: LD_INT 10
38252: PUSH
38253: LD_INT 6
38255: PUSH
38256: LD_INT 7
38258: PUSH
38259: LD_INT 11
38261: PUSH
38262: EMPTY
38263: LIST
38264: LIST
38265: LIST
38266: LIST
38267: LIST
38268: LIST
38269: LIST
38270: PUSH
38271: LD_INT 27
38273: PUSH
38274: LD_INT 28
38276: PUSH
38277: LD_INT 26
38279: PUSH
38280: LD_INT 30
38282: PUSH
38283: EMPTY
38284: LIST
38285: LIST
38286: LIST
38287: LIST
38288: PUSH
38289: LD_INT 43
38291: PUSH
38292: LD_INT 44
38294: PUSH
38295: LD_INT 46
38297: PUSH
38298: LD_INT 45
38300: PUSH
38301: LD_INT 47
38303: PUSH
38304: LD_INT 49
38306: PUSH
38307: EMPTY
38308: LIST
38309: LIST
38310: LIST
38311: LIST
38312: LIST
38313: LIST
38314: PUSH
38315: EMPTY
38316: LIST
38317: LIST
38318: LIST
38319: PUSH
38320: LD_VAR 0 12
38324: ARRAY
38325: ST_TO_ADDR
// list := list isect fac_list ;
38326: LD_ADDR_VAR 0 5
38330: PUSH
38331: LD_VAR 0 5
38335: PUSH
38336: LD_VAR 0 17
38340: ISECT
38341: ST_TO_ADDR
// if not list then
38342: LD_VAR 0 5
38346: NOT
38347: IFFALSE 38351
// exit ;
38349: GO 39155
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
38351: LD_VAR 0 12
38355: PUSH
38356: LD_INT 3
38358: EQUAL
38359: PUSH
38360: LD_INT 49
38362: PUSH
38363: LD_VAR 0 5
38367: IN
38368: AND
38369: PUSH
38370: LD_INT 31
38372: PPUSH
38373: LD_VAR 0 16
38377: PPUSH
38378: CALL_OW 321
38382: PUSH
38383: LD_INT 2
38385: EQUAL
38386: AND
38387: IFFALSE 38447
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
38389: LD_INT 22
38391: PUSH
38392: LD_VAR 0 16
38396: PUSH
38397: EMPTY
38398: LIST
38399: LIST
38400: PUSH
38401: LD_INT 35
38403: PUSH
38404: LD_INT 49
38406: PUSH
38407: EMPTY
38408: LIST
38409: LIST
38410: PUSH
38411: LD_INT 91
38413: PUSH
38414: LD_VAR 0 1
38418: PUSH
38419: LD_INT 10
38421: PUSH
38422: EMPTY
38423: LIST
38424: LIST
38425: LIST
38426: PUSH
38427: EMPTY
38428: LIST
38429: LIST
38430: LIST
38431: PPUSH
38432: CALL_OW 69
38436: NOT
38437: IFFALSE 38447
// weapon := ru_time_lapser ;
38439: LD_ADDR_VAR 0 18
38443: PUSH
38444: LD_INT 49
38446: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
38447: LD_VAR 0 12
38451: PUSH
38452: LD_INT 1
38454: PUSH
38455: LD_INT 2
38457: PUSH
38458: EMPTY
38459: LIST
38460: LIST
38461: IN
38462: PUSH
38463: LD_INT 11
38465: PUSH
38466: LD_VAR 0 5
38470: IN
38471: PUSH
38472: LD_INT 30
38474: PUSH
38475: LD_VAR 0 5
38479: IN
38480: OR
38481: AND
38482: PUSH
38483: LD_INT 6
38485: PPUSH
38486: LD_VAR 0 16
38490: PPUSH
38491: CALL_OW 321
38495: PUSH
38496: LD_INT 2
38498: EQUAL
38499: AND
38500: IFFALSE 38665
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
38502: LD_INT 22
38504: PUSH
38505: LD_VAR 0 16
38509: PUSH
38510: EMPTY
38511: LIST
38512: LIST
38513: PUSH
38514: LD_INT 2
38516: PUSH
38517: LD_INT 35
38519: PUSH
38520: LD_INT 11
38522: PUSH
38523: EMPTY
38524: LIST
38525: LIST
38526: PUSH
38527: LD_INT 35
38529: PUSH
38530: LD_INT 30
38532: PUSH
38533: EMPTY
38534: LIST
38535: LIST
38536: PUSH
38537: EMPTY
38538: LIST
38539: LIST
38540: LIST
38541: PUSH
38542: LD_INT 91
38544: PUSH
38545: LD_VAR 0 1
38549: PUSH
38550: LD_INT 18
38552: PUSH
38553: EMPTY
38554: LIST
38555: LIST
38556: LIST
38557: PUSH
38558: EMPTY
38559: LIST
38560: LIST
38561: LIST
38562: PPUSH
38563: CALL_OW 69
38567: NOT
38568: PUSH
38569: LD_INT 22
38571: PUSH
38572: LD_VAR 0 16
38576: PUSH
38577: EMPTY
38578: LIST
38579: LIST
38580: PUSH
38581: LD_INT 2
38583: PUSH
38584: LD_INT 30
38586: PUSH
38587: LD_INT 32
38589: PUSH
38590: EMPTY
38591: LIST
38592: LIST
38593: PUSH
38594: LD_INT 30
38596: PUSH
38597: LD_INT 33
38599: PUSH
38600: EMPTY
38601: LIST
38602: LIST
38603: PUSH
38604: EMPTY
38605: LIST
38606: LIST
38607: LIST
38608: PUSH
38609: LD_INT 91
38611: PUSH
38612: LD_VAR 0 1
38616: PUSH
38617: LD_INT 12
38619: PUSH
38620: EMPTY
38621: LIST
38622: LIST
38623: LIST
38624: PUSH
38625: EMPTY
38626: LIST
38627: LIST
38628: LIST
38629: PUSH
38630: EMPTY
38631: LIST
38632: PPUSH
38633: CALL_OW 69
38637: PUSH
38638: LD_INT 2
38640: GREATER
38641: AND
38642: IFFALSE 38665
// weapon := [ us_radar , ar_radar ] [ nat ] ;
38644: LD_ADDR_VAR 0 18
38648: PUSH
38649: LD_INT 11
38651: PUSH
38652: LD_INT 30
38654: PUSH
38655: EMPTY
38656: LIST
38657: LIST
38658: PUSH
38659: LD_VAR 0 12
38663: ARRAY
38664: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
38665: LD_VAR 0 18
38669: NOT
38670: PUSH
38671: LD_INT 40
38673: PPUSH
38674: LD_VAR 0 16
38678: PPUSH
38679: CALL_OW 321
38683: PUSH
38684: LD_INT 2
38686: EQUAL
38687: AND
38688: PUSH
38689: LD_INT 7
38691: PUSH
38692: LD_VAR 0 5
38696: IN
38697: PUSH
38698: LD_INT 28
38700: PUSH
38701: LD_VAR 0 5
38705: IN
38706: OR
38707: PUSH
38708: LD_INT 45
38710: PUSH
38711: LD_VAR 0 5
38715: IN
38716: OR
38717: AND
38718: IFFALSE 38972
// begin hex := GetHexInfo ( x , y ) ;
38720: LD_ADDR_VAR 0 4
38724: PUSH
38725: LD_VAR 0 10
38729: PPUSH
38730: LD_VAR 0 11
38734: PPUSH
38735: CALL_OW 546
38739: ST_TO_ADDR
// if hex [ 1 ] then
38740: LD_VAR 0 4
38744: PUSH
38745: LD_INT 1
38747: ARRAY
38748: IFFALSE 38752
// exit ;
38750: GO 39155
// height := hex [ 2 ] ;
38752: LD_ADDR_VAR 0 15
38756: PUSH
38757: LD_VAR 0 4
38761: PUSH
38762: LD_INT 2
38764: ARRAY
38765: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
38766: LD_ADDR_VAR 0 14
38770: PUSH
38771: LD_INT 0
38773: PUSH
38774: LD_INT 2
38776: PUSH
38777: LD_INT 3
38779: PUSH
38780: LD_INT 5
38782: PUSH
38783: EMPTY
38784: LIST
38785: LIST
38786: LIST
38787: LIST
38788: ST_TO_ADDR
// for i in tmp do
38789: LD_ADDR_VAR 0 8
38793: PUSH
38794: LD_VAR 0 14
38798: PUSH
38799: FOR_IN
38800: IFFALSE 38970
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
38802: LD_ADDR_VAR 0 9
38806: PUSH
38807: LD_VAR 0 10
38811: PPUSH
38812: LD_VAR 0 8
38816: PPUSH
38817: LD_INT 5
38819: PPUSH
38820: CALL_OW 272
38824: PUSH
38825: LD_VAR 0 11
38829: PPUSH
38830: LD_VAR 0 8
38834: PPUSH
38835: LD_INT 5
38837: PPUSH
38838: CALL_OW 273
38842: PUSH
38843: EMPTY
38844: LIST
38845: LIST
38846: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
38847: LD_VAR 0 9
38851: PUSH
38852: LD_INT 1
38854: ARRAY
38855: PPUSH
38856: LD_VAR 0 9
38860: PUSH
38861: LD_INT 2
38863: ARRAY
38864: PPUSH
38865: CALL_OW 488
38869: IFFALSE 38968
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
38871: LD_ADDR_VAR 0 4
38875: PUSH
38876: LD_VAR 0 9
38880: PUSH
38881: LD_INT 1
38883: ARRAY
38884: PPUSH
38885: LD_VAR 0 9
38889: PUSH
38890: LD_INT 2
38892: ARRAY
38893: PPUSH
38894: CALL_OW 546
38898: ST_TO_ADDR
// if hex [ 1 ] then
38899: LD_VAR 0 4
38903: PUSH
38904: LD_INT 1
38906: ARRAY
38907: IFFALSE 38911
// continue ;
38909: GO 38799
// h := hex [ 2 ] ;
38911: LD_ADDR_VAR 0 13
38915: PUSH
38916: LD_VAR 0 4
38920: PUSH
38921: LD_INT 2
38923: ARRAY
38924: ST_TO_ADDR
// if h + 7 < height then
38925: LD_VAR 0 13
38929: PUSH
38930: LD_INT 7
38932: PLUS
38933: PUSH
38934: LD_VAR 0 15
38938: LESS
38939: IFFALSE 38968
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
38941: LD_ADDR_VAR 0 18
38945: PUSH
38946: LD_INT 7
38948: PUSH
38949: LD_INT 28
38951: PUSH
38952: LD_INT 45
38954: PUSH
38955: EMPTY
38956: LIST
38957: LIST
38958: LIST
38959: PUSH
38960: LD_VAR 0 12
38964: ARRAY
38965: ST_TO_ADDR
// break ;
38966: GO 38970
// end ; end ; end ;
38968: GO 38799
38970: POP
38971: POP
// end ; if not weapon then
38972: LD_VAR 0 18
38976: NOT
38977: IFFALSE 39037
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
38979: LD_ADDR_VAR 0 5
38983: PUSH
38984: LD_VAR 0 5
38988: PUSH
38989: LD_INT 11
38991: PUSH
38992: LD_INT 30
38994: PUSH
38995: LD_INT 49
38997: PUSH
38998: EMPTY
38999: LIST
39000: LIST
39001: LIST
39002: DIFF
39003: ST_TO_ADDR
// if not list then
39004: LD_VAR 0 5
39008: NOT
39009: IFFALSE 39013
// exit ;
39011: GO 39155
// weapon := list [ rand ( 1 , list ) ] ;
39013: LD_ADDR_VAR 0 18
39017: PUSH
39018: LD_VAR 0 5
39022: PUSH
39023: LD_INT 1
39025: PPUSH
39026: LD_VAR 0 5
39030: PPUSH
39031: CALL_OW 12
39035: ARRAY
39036: ST_TO_ADDR
// end ; if weapon then
39037: LD_VAR 0 18
39041: IFFALSE 39155
// begin tmp := CostOfWeapon ( weapon ) ;
39043: LD_ADDR_VAR 0 14
39047: PUSH
39048: LD_VAR 0 18
39052: PPUSH
39053: CALL_OW 451
39057: ST_TO_ADDR
// j := GetBase ( tower ) ;
39058: LD_ADDR_VAR 0 9
39062: PUSH
39063: LD_VAR 0 1
39067: PPUSH
39068: CALL_OW 274
39072: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
39073: LD_VAR 0 9
39077: PPUSH
39078: LD_INT 1
39080: PPUSH
39081: CALL_OW 275
39085: PUSH
39086: LD_VAR 0 14
39090: PUSH
39091: LD_INT 1
39093: ARRAY
39094: GREATEREQUAL
39095: PUSH
39096: LD_VAR 0 9
39100: PPUSH
39101: LD_INT 2
39103: PPUSH
39104: CALL_OW 275
39108: PUSH
39109: LD_VAR 0 14
39113: PUSH
39114: LD_INT 2
39116: ARRAY
39117: GREATEREQUAL
39118: AND
39119: PUSH
39120: LD_VAR 0 9
39124: PPUSH
39125: LD_INT 3
39127: PPUSH
39128: CALL_OW 275
39132: PUSH
39133: LD_VAR 0 14
39137: PUSH
39138: LD_INT 3
39140: ARRAY
39141: GREATEREQUAL
39142: AND
39143: IFFALSE 39155
// result := weapon ;
39145: LD_ADDR_VAR 0 3
39149: PUSH
39150: LD_VAR 0 18
39154: ST_TO_ADDR
// end ; end ;
39155: LD_VAR 0 3
39159: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
39160: LD_INT 0
39162: PPUSH
39163: PPUSH
// result := true ;
39164: LD_ADDR_VAR 0 3
39168: PUSH
39169: LD_INT 1
39171: ST_TO_ADDR
// if array1 = array2 then
39172: LD_VAR 0 1
39176: PUSH
39177: LD_VAR 0 2
39181: EQUAL
39182: IFFALSE 39242
// begin for i = 1 to array1 do
39184: LD_ADDR_VAR 0 4
39188: PUSH
39189: DOUBLE
39190: LD_INT 1
39192: DEC
39193: ST_TO_ADDR
39194: LD_VAR 0 1
39198: PUSH
39199: FOR_TO
39200: IFFALSE 39238
// if array1 [ i ] <> array2 [ i ] then
39202: LD_VAR 0 1
39206: PUSH
39207: LD_VAR 0 4
39211: ARRAY
39212: PUSH
39213: LD_VAR 0 2
39217: PUSH
39218: LD_VAR 0 4
39222: ARRAY
39223: NONEQUAL
39224: IFFALSE 39236
// begin result := false ;
39226: LD_ADDR_VAR 0 3
39230: PUSH
39231: LD_INT 0
39233: ST_TO_ADDR
// break ;
39234: GO 39238
// end ;
39236: GO 39199
39238: POP
39239: POP
// end else
39240: GO 39250
// result := false ;
39242: LD_ADDR_VAR 0 3
39246: PUSH
39247: LD_INT 0
39249: ST_TO_ADDR
// end ;
39250: LD_VAR 0 3
39254: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
39255: LD_INT 0
39257: PPUSH
39258: PPUSH
// if not array1 or not array2 then
39259: LD_VAR 0 1
39263: NOT
39264: PUSH
39265: LD_VAR 0 2
39269: NOT
39270: OR
39271: IFFALSE 39275
// exit ;
39273: GO 39339
// result := true ;
39275: LD_ADDR_VAR 0 3
39279: PUSH
39280: LD_INT 1
39282: ST_TO_ADDR
// for i = 1 to array1 do
39283: LD_ADDR_VAR 0 4
39287: PUSH
39288: DOUBLE
39289: LD_INT 1
39291: DEC
39292: ST_TO_ADDR
39293: LD_VAR 0 1
39297: PUSH
39298: FOR_TO
39299: IFFALSE 39337
// if array1 [ i ] <> array2 [ i ] then
39301: LD_VAR 0 1
39305: PUSH
39306: LD_VAR 0 4
39310: ARRAY
39311: PUSH
39312: LD_VAR 0 2
39316: PUSH
39317: LD_VAR 0 4
39321: ARRAY
39322: NONEQUAL
39323: IFFALSE 39335
// begin result := false ;
39325: LD_ADDR_VAR 0 3
39329: PUSH
39330: LD_INT 0
39332: ST_TO_ADDR
// break ;
39333: GO 39337
// end ;
39335: GO 39298
39337: POP
39338: POP
// end ;
39339: LD_VAR 0 3
39343: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
39344: LD_INT 0
39346: PPUSH
39347: PPUSH
39348: PPUSH
// pom := GetBase ( fac ) ;
39349: LD_ADDR_VAR 0 5
39353: PUSH
39354: LD_VAR 0 1
39358: PPUSH
39359: CALL_OW 274
39363: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
39364: LD_ADDR_VAR 0 4
39368: PUSH
39369: LD_VAR 0 2
39373: PUSH
39374: LD_INT 1
39376: ARRAY
39377: PPUSH
39378: LD_VAR 0 2
39382: PUSH
39383: LD_INT 2
39385: ARRAY
39386: PPUSH
39387: LD_VAR 0 2
39391: PUSH
39392: LD_INT 3
39394: ARRAY
39395: PPUSH
39396: LD_VAR 0 2
39400: PUSH
39401: LD_INT 4
39403: ARRAY
39404: PPUSH
39405: CALL_OW 449
39409: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
39410: LD_ADDR_VAR 0 3
39414: PUSH
39415: LD_VAR 0 5
39419: PPUSH
39420: LD_INT 1
39422: PPUSH
39423: CALL_OW 275
39427: PUSH
39428: LD_VAR 0 4
39432: PUSH
39433: LD_INT 1
39435: ARRAY
39436: GREATEREQUAL
39437: PUSH
39438: LD_VAR 0 5
39442: PPUSH
39443: LD_INT 2
39445: PPUSH
39446: CALL_OW 275
39450: PUSH
39451: LD_VAR 0 4
39455: PUSH
39456: LD_INT 2
39458: ARRAY
39459: GREATEREQUAL
39460: AND
39461: PUSH
39462: LD_VAR 0 5
39466: PPUSH
39467: LD_INT 3
39469: PPUSH
39470: CALL_OW 275
39474: PUSH
39475: LD_VAR 0 4
39479: PUSH
39480: LD_INT 3
39482: ARRAY
39483: GREATEREQUAL
39484: AND
39485: ST_TO_ADDR
// end ;
39486: LD_VAR 0 3
39490: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
39491: LD_INT 0
39493: PPUSH
39494: PPUSH
39495: PPUSH
39496: PPUSH
// pom := GetBase ( building ) ;
39497: LD_ADDR_VAR 0 3
39501: PUSH
39502: LD_VAR 0 1
39506: PPUSH
39507: CALL_OW 274
39511: ST_TO_ADDR
// if not pom then
39512: LD_VAR 0 3
39516: NOT
39517: IFFALSE 39521
// exit ;
39519: GO 39691
// btype := GetBType ( building ) ;
39521: LD_ADDR_VAR 0 5
39525: PUSH
39526: LD_VAR 0 1
39530: PPUSH
39531: CALL_OW 266
39535: ST_TO_ADDR
// if btype = b_armoury then
39536: LD_VAR 0 5
39540: PUSH
39541: LD_INT 4
39543: EQUAL
39544: IFFALSE 39554
// btype := b_barracks ;
39546: LD_ADDR_VAR 0 5
39550: PUSH
39551: LD_INT 5
39553: ST_TO_ADDR
// if btype = b_depot then
39554: LD_VAR 0 5
39558: PUSH
39559: LD_INT 0
39561: EQUAL
39562: IFFALSE 39572
// btype := b_warehouse ;
39564: LD_ADDR_VAR 0 5
39568: PUSH
39569: LD_INT 1
39571: ST_TO_ADDR
// if btype = b_workshop then
39572: LD_VAR 0 5
39576: PUSH
39577: LD_INT 2
39579: EQUAL
39580: IFFALSE 39590
// btype := b_factory ;
39582: LD_ADDR_VAR 0 5
39586: PUSH
39587: LD_INT 3
39589: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
39590: LD_ADDR_VAR 0 4
39594: PUSH
39595: LD_VAR 0 5
39599: PPUSH
39600: LD_VAR 0 1
39604: PPUSH
39605: CALL_OW 248
39609: PPUSH
39610: CALL_OW 450
39614: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
39615: LD_ADDR_VAR 0 2
39619: PUSH
39620: LD_VAR 0 3
39624: PPUSH
39625: LD_INT 1
39627: PPUSH
39628: CALL_OW 275
39632: PUSH
39633: LD_VAR 0 4
39637: PUSH
39638: LD_INT 1
39640: ARRAY
39641: GREATEREQUAL
39642: PUSH
39643: LD_VAR 0 3
39647: PPUSH
39648: LD_INT 2
39650: PPUSH
39651: CALL_OW 275
39655: PUSH
39656: LD_VAR 0 4
39660: PUSH
39661: LD_INT 2
39663: ARRAY
39664: GREATEREQUAL
39665: AND
39666: PUSH
39667: LD_VAR 0 3
39671: PPUSH
39672: LD_INT 3
39674: PPUSH
39675: CALL_OW 275
39679: PUSH
39680: LD_VAR 0 4
39684: PUSH
39685: LD_INT 3
39687: ARRAY
39688: GREATEREQUAL
39689: AND
39690: ST_TO_ADDR
// end ;
39691: LD_VAR 0 2
39695: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
39696: LD_INT 0
39698: PPUSH
39699: PPUSH
39700: PPUSH
// pom := GetBase ( building ) ;
39701: LD_ADDR_VAR 0 4
39705: PUSH
39706: LD_VAR 0 1
39710: PPUSH
39711: CALL_OW 274
39715: ST_TO_ADDR
// if not pom then
39716: LD_VAR 0 4
39720: NOT
39721: IFFALSE 39725
// exit ;
39723: GO 39826
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
39725: LD_ADDR_VAR 0 5
39729: PUSH
39730: LD_VAR 0 2
39734: PPUSH
39735: LD_VAR 0 1
39739: PPUSH
39740: CALL_OW 248
39744: PPUSH
39745: CALL_OW 450
39749: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
39750: LD_ADDR_VAR 0 3
39754: PUSH
39755: LD_VAR 0 4
39759: PPUSH
39760: LD_INT 1
39762: PPUSH
39763: CALL_OW 275
39767: PUSH
39768: LD_VAR 0 5
39772: PUSH
39773: LD_INT 1
39775: ARRAY
39776: GREATEREQUAL
39777: PUSH
39778: LD_VAR 0 4
39782: PPUSH
39783: LD_INT 2
39785: PPUSH
39786: CALL_OW 275
39790: PUSH
39791: LD_VAR 0 5
39795: PUSH
39796: LD_INT 2
39798: ARRAY
39799: GREATEREQUAL
39800: AND
39801: PUSH
39802: LD_VAR 0 4
39806: PPUSH
39807: LD_INT 3
39809: PPUSH
39810: CALL_OW 275
39814: PUSH
39815: LD_VAR 0 5
39819: PUSH
39820: LD_INT 3
39822: ARRAY
39823: GREATEREQUAL
39824: AND
39825: ST_TO_ADDR
// end ;
39826: LD_VAR 0 3
39830: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
39831: LD_INT 0
39833: PPUSH
39834: PPUSH
39835: PPUSH
39836: PPUSH
39837: PPUSH
39838: PPUSH
39839: PPUSH
39840: PPUSH
39841: PPUSH
39842: PPUSH
39843: PPUSH
// result := false ;
39844: LD_ADDR_VAR 0 8
39848: PUSH
39849: LD_INT 0
39851: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
39852: LD_VAR 0 5
39856: NOT
39857: PUSH
39858: LD_VAR 0 1
39862: NOT
39863: OR
39864: PUSH
39865: LD_VAR 0 2
39869: NOT
39870: OR
39871: PUSH
39872: LD_VAR 0 3
39876: NOT
39877: OR
39878: IFFALSE 39882
// exit ;
39880: GO 40696
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
39882: LD_ADDR_VAR 0 14
39886: PUSH
39887: LD_VAR 0 1
39891: PPUSH
39892: LD_VAR 0 2
39896: PPUSH
39897: LD_VAR 0 3
39901: PPUSH
39902: LD_VAR 0 4
39906: PPUSH
39907: LD_VAR 0 5
39911: PUSH
39912: LD_INT 1
39914: ARRAY
39915: PPUSH
39916: CALL_OW 248
39920: PPUSH
39921: LD_INT 0
39923: PPUSH
39924: CALL 41929 0 6
39928: ST_TO_ADDR
// if not hexes then
39929: LD_VAR 0 14
39933: NOT
39934: IFFALSE 39938
// exit ;
39936: GO 40696
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
39938: LD_ADDR_VAR 0 17
39942: PUSH
39943: LD_VAR 0 5
39947: PPUSH
39948: LD_INT 22
39950: PUSH
39951: LD_VAR 0 13
39955: PPUSH
39956: CALL_OW 255
39960: PUSH
39961: EMPTY
39962: LIST
39963: LIST
39964: PUSH
39965: LD_INT 2
39967: PUSH
39968: LD_INT 30
39970: PUSH
39971: LD_INT 0
39973: PUSH
39974: EMPTY
39975: LIST
39976: LIST
39977: PUSH
39978: LD_INT 30
39980: PUSH
39981: LD_INT 1
39983: PUSH
39984: EMPTY
39985: LIST
39986: LIST
39987: PUSH
39988: EMPTY
39989: LIST
39990: LIST
39991: LIST
39992: PUSH
39993: EMPTY
39994: LIST
39995: LIST
39996: PPUSH
39997: CALL_OW 72
40001: ST_TO_ADDR
// for i = 1 to hexes do
40002: LD_ADDR_VAR 0 9
40006: PUSH
40007: DOUBLE
40008: LD_INT 1
40010: DEC
40011: ST_TO_ADDR
40012: LD_VAR 0 14
40016: PUSH
40017: FOR_TO
40018: IFFALSE 40694
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
40020: LD_ADDR_VAR 0 13
40024: PUSH
40025: LD_VAR 0 14
40029: PUSH
40030: LD_VAR 0 9
40034: ARRAY
40035: PUSH
40036: LD_INT 1
40038: ARRAY
40039: PPUSH
40040: LD_VAR 0 14
40044: PUSH
40045: LD_VAR 0 9
40049: ARRAY
40050: PUSH
40051: LD_INT 2
40053: ARRAY
40054: PPUSH
40055: CALL_OW 428
40059: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
40060: LD_VAR 0 14
40064: PUSH
40065: LD_VAR 0 9
40069: ARRAY
40070: PUSH
40071: LD_INT 1
40073: ARRAY
40074: PPUSH
40075: LD_VAR 0 14
40079: PUSH
40080: LD_VAR 0 9
40084: ARRAY
40085: PUSH
40086: LD_INT 2
40088: ARRAY
40089: PPUSH
40090: CALL_OW 351
40094: PUSH
40095: LD_VAR 0 14
40099: PUSH
40100: LD_VAR 0 9
40104: ARRAY
40105: PUSH
40106: LD_INT 1
40108: ARRAY
40109: PPUSH
40110: LD_VAR 0 14
40114: PUSH
40115: LD_VAR 0 9
40119: ARRAY
40120: PUSH
40121: LD_INT 2
40123: ARRAY
40124: PPUSH
40125: CALL_OW 488
40129: NOT
40130: OR
40131: PUSH
40132: LD_VAR 0 13
40136: PPUSH
40137: CALL_OW 247
40141: PUSH
40142: LD_INT 3
40144: EQUAL
40145: OR
40146: IFFALSE 40152
// exit ;
40148: POP
40149: POP
40150: GO 40696
// if not tmp then
40152: LD_VAR 0 13
40156: NOT
40157: IFFALSE 40161
// continue ;
40159: GO 40017
// result := true ;
40161: LD_ADDR_VAR 0 8
40165: PUSH
40166: LD_INT 1
40168: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
40169: LD_VAR 0 6
40173: PUSH
40174: LD_VAR 0 13
40178: PPUSH
40179: CALL_OW 247
40183: PUSH
40184: LD_INT 2
40186: EQUAL
40187: AND
40188: PUSH
40189: LD_VAR 0 13
40193: PPUSH
40194: CALL_OW 263
40198: PUSH
40199: LD_INT 1
40201: EQUAL
40202: AND
40203: IFFALSE 40367
// begin if IsDrivenBy ( tmp ) then
40205: LD_VAR 0 13
40209: PPUSH
40210: CALL_OW 311
40214: IFFALSE 40218
// continue ;
40216: GO 40017
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
40218: LD_VAR 0 6
40222: PPUSH
40223: LD_INT 3
40225: PUSH
40226: LD_INT 60
40228: PUSH
40229: EMPTY
40230: LIST
40231: PUSH
40232: EMPTY
40233: LIST
40234: LIST
40235: PUSH
40236: LD_INT 3
40238: PUSH
40239: LD_INT 55
40241: PUSH
40242: EMPTY
40243: LIST
40244: PUSH
40245: EMPTY
40246: LIST
40247: LIST
40248: PUSH
40249: EMPTY
40250: LIST
40251: LIST
40252: PPUSH
40253: CALL_OW 72
40257: IFFALSE 40365
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
40259: LD_ADDR_VAR 0 18
40263: PUSH
40264: LD_VAR 0 6
40268: PPUSH
40269: LD_INT 3
40271: PUSH
40272: LD_INT 60
40274: PUSH
40275: EMPTY
40276: LIST
40277: PUSH
40278: EMPTY
40279: LIST
40280: LIST
40281: PUSH
40282: LD_INT 3
40284: PUSH
40285: LD_INT 55
40287: PUSH
40288: EMPTY
40289: LIST
40290: PUSH
40291: EMPTY
40292: LIST
40293: LIST
40294: PUSH
40295: EMPTY
40296: LIST
40297: LIST
40298: PPUSH
40299: CALL_OW 72
40303: PUSH
40304: LD_INT 1
40306: ARRAY
40307: ST_TO_ADDR
// if IsInUnit ( driver ) then
40308: LD_VAR 0 18
40312: PPUSH
40313: CALL_OW 310
40317: IFFALSE 40328
// ComExit ( driver ) ;
40319: LD_VAR 0 18
40323: PPUSH
40324: CALL 65617 0 1
// AddComEnterUnit ( driver , tmp ) ;
40328: LD_VAR 0 18
40332: PPUSH
40333: LD_VAR 0 13
40337: PPUSH
40338: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
40342: LD_VAR 0 18
40346: PPUSH
40347: LD_VAR 0 7
40351: PPUSH
40352: CALL_OW 173
// AddComExitVehicle ( driver ) ;
40356: LD_VAR 0 18
40360: PPUSH
40361: CALL_OW 181
// end ; continue ;
40365: GO 40017
// end ; if not cleaners or not tmp in cleaners then
40367: LD_VAR 0 6
40371: NOT
40372: PUSH
40373: LD_VAR 0 13
40377: PUSH
40378: LD_VAR 0 6
40382: IN
40383: NOT
40384: OR
40385: IFFALSE 40692
// begin if dep then
40387: LD_VAR 0 17
40391: IFFALSE 40527
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
40393: LD_ADDR_VAR 0 16
40397: PUSH
40398: LD_VAR 0 17
40402: PUSH
40403: LD_INT 1
40405: ARRAY
40406: PPUSH
40407: CALL_OW 250
40411: PPUSH
40412: LD_VAR 0 17
40416: PUSH
40417: LD_INT 1
40419: ARRAY
40420: PPUSH
40421: CALL_OW 254
40425: PPUSH
40426: LD_INT 5
40428: PPUSH
40429: CALL_OW 272
40433: PUSH
40434: LD_VAR 0 17
40438: PUSH
40439: LD_INT 1
40441: ARRAY
40442: PPUSH
40443: CALL_OW 251
40447: PPUSH
40448: LD_VAR 0 17
40452: PUSH
40453: LD_INT 1
40455: ARRAY
40456: PPUSH
40457: CALL_OW 254
40461: PPUSH
40462: LD_INT 5
40464: PPUSH
40465: CALL_OW 273
40469: PUSH
40470: EMPTY
40471: LIST
40472: LIST
40473: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
40474: LD_VAR 0 16
40478: PUSH
40479: LD_INT 1
40481: ARRAY
40482: PPUSH
40483: LD_VAR 0 16
40487: PUSH
40488: LD_INT 2
40490: ARRAY
40491: PPUSH
40492: CALL_OW 488
40496: IFFALSE 40527
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
40498: LD_VAR 0 13
40502: PPUSH
40503: LD_VAR 0 16
40507: PUSH
40508: LD_INT 1
40510: ARRAY
40511: PPUSH
40512: LD_VAR 0 16
40516: PUSH
40517: LD_INT 2
40519: ARRAY
40520: PPUSH
40521: CALL_OW 111
// continue ;
40525: GO 40017
// end ; end ; r := GetDir ( tmp ) ;
40527: LD_ADDR_VAR 0 15
40531: PUSH
40532: LD_VAR 0 13
40536: PPUSH
40537: CALL_OW 254
40541: ST_TO_ADDR
// if r = 5 then
40542: LD_VAR 0 15
40546: PUSH
40547: LD_INT 5
40549: EQUAL
40550: IFFALSE 40560
// r := 0 ;
40552: LD_ADDR_VAR 0 15
40556: PUSH
40557: LD_INT 0
40559: ST_TO_ADDR
// for j = r to 5 do
40560: LD_ADDR_VAR 0 10
40564: PUSH
40565: DOUBLE
40566: LD_VAR 0 15
40570: DEC
40571: ST_TO_ADDR
40572: LD_INT 5
40574: PUSH
40575: FOR_TO
40576: IFFALSE 40690
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
40578: LD_ADDR_VAR 0 11
40582: PUSH
40583: LD_VAR 0 13
40587: PPUSH
40588: CALL_OW 250
40592: PPUSH
40593: LD_VAR 0 10
40597: PPUSH
40598: LD_INT 2
40600: PPUSH
40601: CALL_OW 272
40605: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
40606: LD_ADDR_VAR 0 12
40610: PUSH
40611: LD_VAR 0 13
40615: PPUSH
40616: CALL_OW 251
40620: PPUSH
40621: LD_VAR 0 10
40625: PPUSH
40626: LD_INT 2
40628: PPUSH
40629: CALL_OW 273
40633: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
40634: LD_VAR 0 11
40638: PPUSH
40639: LD_VAR 0 12
40643: PPUSH
40644: CALL_OW 488
40648: PUSH
40649: LD_VAR 0 11
40653: PPUSH
40654: LD_VAR 0 12
40658: PPUSH
40659: CALL_OW 428
40663: NOT
40664: AND
40665: IFFALSE 40688
// begin ComMoveXY ( tmp , _x , _y ) ;
40667: LD_VAR 0 13
40671: PPUSH
40672: LD_VAR 0 11
40676: PPUSH
40677: LD_VAR 0 12
40681: PPUSH
40682: CALL_OW 111
// break ;
40686: GO 40690
// end ; end ;
40688: GO 40575
40690: POP
40691: POP
// end ; end ;
40692: GO 40017
40694: POP
40695: POP
// end ;
40696: LD_VAR 0 8
40700: RET
// export function BuildingTechInvented ( side , btype ) ; begin
40701: LD_INT 0
40703: PPUSH
// result := true ;
40704: LD_ADDR_VAR 0 3
40708: PUSH
40709: LD_INT 1
40711: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
40712: LD_VAR 0 2
40716: PUSH
40717: LD_INT 24
40719: DOUBLE
40720: EQUAL
40721: IFTRUE 40731
40723: LD_INT 33
40725: DOUBLE
40726: EQUAL
40727: IFTRUE 40731
40729: GO 40756
40731: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
40732: LD_ADDR_VAR 0 3
40736: PUSH
40737: LD_INT 32
40739: PPUSH
40740: LD_VAR 0 1
40744: PPUSH
40745: CALL_OW 321
40749: PUSH
40750: LD_INT 2
40752: EQUAL
40753: ST_TO_ADDR
40754: GO 41072
40756: LD_INT 20
40758: DOUBLE
40759: EQUAL
40760: IFTRUE 40764
40762: GO 40789
40764: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
40765: LD_ADDR_VAR 0 3
40769: PUSH
40770: LD_INT 6
40772: PPUSH
40773: LD_VAR 0 1
40777: PPUSH
40778: CALL_OW 321
40782: PUSH
40783: LD_INT 2
40785: EQUAL
40786: ST_TO_ADDR
40787: GO 41072
40789: LD_INT 22
40791: DOUBLE
40792: EQUAL
40793: IFTRUE 40803
40795: LD_INT 36
40797: DOUBLE
40798: EQUAL
40799: IFTRUE 40803
40801: GO 40828
40803: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
40804: LD_ADDR_VAR 0 3
40808: PUSH
40809: LD_INT 15
40811: PPUSH
40812: LD_VAR 0 1
40816: PPUSH
40817: CALL_OW 321
40821: PUSH
40822: LD_INT 2
40824: EQUAL
40825: ST_TO_ADDR
40826: GO 41072
40828: LD_INT 30
40830: DOUBLE
40831: EQUAL
40832: IFTRUE 40836
40834: GO 40861
40836: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
40837: LD_ADDR_VAR 0 3
40841: PUSH
40842: LD_INT 20
40844: PPUSH
40845: LD_VAR 0 1
40849: PPUSH
40850: CALL_OW 321
40854: PUSH
40855: LD_INT 2
40857: EQUAL
40858: ST_TO_ADDR
40859: GO 41072
40861: LD_INT 28
40863: DOUBLE
40864: EQUAL
40865: IFTRUE 40875
40867: LD_INT 21
40869: DOUBLE
40870: EQUAL
40871: IFTRUE 40875
40873: GO 40900
40875: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
40876: LD_ADDR_VAR 0 3
40880: PUSH
40881: LD_INT 21
40883: PPUSH
40884: LD_VAR 0 1
40888: PPUSH
40889: CALL_OW 321
40893: PUSH
40894: LD_INT 2
40896: EQUAL
40897: ST_TO_ADDR
40898: GO 41072
40900: LD_INT 16
40902: DOUBLE
40903: EQUAL
40904: IFTRUE 40908
40906: GO 40933
40908: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
40909: LD_ADDR_VAR 0 3
40913: PUSH
40914: LD_INT 84
40916: PPUSH
40917: LD_VAR 0 1
40921: PPUSH
40922: CALL_OW 321
40926: PUSH
40927: LD_INT 2
40929: EQUAL
40930: ST_TO_ADDR
40931: GO 41072
40933: LD_INT 19
40935: DOUBLE
40936: EQUAL
40937: IFTRUE 40947
40939: LD_INT 23
40941: DOUBLE
40942: EQUAL
40943: IFTRUE 40947
40945: GO 40972
40947: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
40948: LD_ADDR_VAR 0 3
40952: PUSH
40953: LD_INT 83
40955: PPUSH
40956: LD_VAR 0 1
40960: PPUSH
40961: CALL_OW 321
40965: PUSH
40966: LD_INT 2
40968: EQUAL
40969: ST_TO_ADDR
40970: GO 41072
40972: LD_INT 17
40974: DOUBLE
40975: EQUAL
40976: IFTRUE 40980
40978: GO 41005
40980: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
40981: LD_ADDR_VAR 0 3
40985: PUSH
40986: LD_INT 39
40988: PPUSH
40989: LD_VAR 0 1
40993: PPUSH
40994: CALL_OW 321
40998: PUSH
40999: LD_INT 2
41001: EQUAL
41002: ST_TO_ADDR
41003: GO 41072
41005: LD_INT 18
41007: DOUBLE
41008: EQUAL
41009: IFTRUE 41013
41011: GO 41038
41013: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
41014: LD_ADDR_VAR 0 3
41018: PUSH
41019: LD_INT 40
41021: PPUSH
41022: LD_VAR 0 1
41026: PPUSH
41027: CALL_OW 321
41031: PUSH
41032: LD_INT 2
41034: EQUAL
41035: ST_TO_ADDR
41036: GO 41072
41038: LD_INT 27
41040: DOUBLE
41041: EQUAL
41042: IFTRUE 41046
41044: GO 41071
41046: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
41047: LD_ADDR_VAR 0 3
41051: PUSH
41052: LD_INT 35
41054: PPUSH
41055: LD_VAR 0 1
41059: PPUSH
41060: CALL_OW 321
41064: PUSH
41065: LD_INT 2
41067: EQUAL
41068: ST_TO_ADDR
41069: GO 41072
41071: POP
// end ;
41072: LD_VAR 0 3
41076: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
41077: LD_INT 0
41079: PPUSH
41080: PPUSH
41081: PPUSH
41082: PPUSH
41083: PPUSH
41084: PPUSH
41085: PPUSH
41086: PPUSH
41087: PPUSH
41088: PPUSH
41089: PPUSH
// result := false ;
41090: LD_ADDR_VAR 0 6
41094: PUSH
41095: LD_INT 0
41097: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
41098: LD_VAR 0 1
41102: NOT
41103: PUSH
41104: LD_VAR 0 1
41108: PPUSH
41109: CALL_OW 266
41113: PUSH
41114: LD_INT 0
41116: PUSH
41117: LD_INT 1
41119: PUSH
41120: EMPTY
41121: LIST
41122: LIST
41123: IN
41124: NOT
41125: OR
41126: PUSH
41127: LD_VAR 0 2
41131: NOT
41132: OR
41133: PUSH
41134: LD_VAR 0 5
41138: PUSH
41139: LD_INT 0
41141: PUSH
41142: LD_INT 1
41144: PUSH
41145: LD_INT 2
41147: PUSH
41148: LD_INT 3
41150: PUSH
41151: LD_INT 4
41153: PUSH
41154: LD_INT 5
41156: PUSH
41157: EMPTY
41158: LIST
41159: LIST
41160: LIST
41161: LIST
41162: LIST
41163: LIST
41164: IN
41165: NOT
41166: OR
41167: PUSH
41168: LD_VAR 0 3
41172: PPUSH
41173: LD_VAR 0 4
41177: PPUSH
41178: CALL_OW 488
41182: NOT
41183: OR
41184: IFFALSE 41188
// exit ;
41186: GO 41924
// side := GetSide ( depot ) ;
41188: LD_ADDR_VAR 0 9
41192: PUSH
41193: LD_VAR 0 1
41197: PPUSH
41198: CALL_OW 255
41202: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
41203: LD_VAR 0 9
41207: PPUSH
41208: LD_VAR 0 2
41212: PPUSH
41213: CALL 40701 0 2
41217: NOT
41218: IFFALSE 41222
// exit ;
41220: GO 41924
// pom := GetBase ( depot ) ;
41222: LD_ADDR_VAR 0 10
41226: PUSH
41227: LD_VAR 0 1
41231: PPUSH
41232: CALL_OW 274
41236: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
41237: LD_ADDR_VAR 0 11
41241: PUSH
41242: LD_VAR 0 2
41246: PPUSH
41247: LD_VAR 0 1
41251: PPUSH
41252: CALL_OW 248
41256: PPUSH
41257: CALL_OW 450
41261: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
41262: LD_VAR 0 10
41266: PPUSH
41267: LD_INT 1
41269: PPUSH
41270: CALL_OW 275
41274: PUSH
41275: LD_VAR 0 11
41279: PUSH
41280: LD_INT 1
41282: ARRAY
41283: GREATEREQUAL
41284: PUSH
41285: LD_VAR 0 10
41289: PPUSH
41290: LD_INT 2
41292: PPUSH
41293: CALL_OW 275
41297: PUSH
41298: LD_VAR 0 11
41302: PUSH
41303: LD_INT 2
41305: ARRAY
41306: GREATEREQUAL
41307: AND
41308: PUSH
41309: LD_VAR 0 10
41313: PPUSH
41314: LD_INT 3
41316: PPUSH
41317: CALL_OW 275
41321: PUSH
41322: LD_VAR 0 11
41326: PUSH
41327: LD_INT 3
41329: ARRAY
41330: GREATEREQUAL
41331: AND
41332: NOT
41333: IFFALSE 41337
// exit ;
41335: GO 41924
// if GetBType ( depot ) = b_depot then
41337: LD_VAR 0 1
41341: PPUSH
41342: CALL_OW 266
41346: PUSH
41347: LD_INT 0
41349: EQUAL
41350: IFFALSE 41362
// dist := 28 else
41352: LD_ADDR_VAR 0 14
41356: PUSH
41357: LD_INT 28
41359: ST_TO_ADDR
41360: GO 41370
// dist := 36 ;
41362: LD_ADDR_VAR 0 14
41366: PUSH
41367: LD_INT 36
41369: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
41370: LD_VAR 0 1
41374: PPUSH
41375: LD_VAR 0 3
41379: PPUSH
41380: LD_VAR 0 4
41384: PPUSH
41385: CALL_OW 297
41389: PUSH
41390: LD_VAR 0 14
41394: GREATER
41395: IFFALSE 41399
// exit ;
41397: GO 41924
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
41399: LD_ADDR_VAR 0 12
41403: PUSH
41404: LD_VAR 0 2
41408: PPUSH
41409: LD_VAR 0 3
41413: PPUSH
41414: LD_VAR 0 4
41418: PPUSH
41419: LD_VAR 0 5
41423: PPUSH
41424: LD_VAR 0 1
41428: PPUSH
41429: CALL_OW 248
41433: PPUSH
41434: LD_INT 0
41436: PPUSH
41437: CALL 41929 0 6
41441: ST_TO_ADDR
// if not hexes then
41442: LD_VAR 0 12
41446: NOT
41447: IFFALSE 41451
// exit ;
41449: GO 41924
// hex := GetHexInfo ( x , y ) ;
41451: LD_ADDR_VAR 0 15
41455: PUSH
41456: LD_VAR 0 3
41460: PPUSH
41461: LD_VAR 0 4
41465: PPUSH
41466: CALL_OW 546
41470: ST_TO_ADDR
// if hex [ 1 ] then
41471: LD_VAR 0 15
41475: PUSH
41476: LD_INT 1
41478: ARRAY
41479: IFFALSE 41483
// exit ;
41481: GO 41924
// height := hex [ 2 ] ;
41483: LD_ADDR_VAR 0 13
41487: PUSH
41488: LD_VAR 0 15
41492: PUSH
41493: LD_INT 2
41495: ARRAY
41496: ST_TO_ADDR
// for i = 1 to hexes do
41497: LD_ADDR_VAR 0 7
41501: PUSH
41502: DOUBLE
41503: LD_INT 1
41505: DEC
41506: ST_TO_ADDR
41507: LD_VAR 0 12
41511: PUSH
41512: FOR_TO
41513: IFFALSE 41843
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
41515: LD_VAR 0 12
41519: PUSH
41520: LD_VAR 0 7
41524: ARRAY
41525: PUSH
41526: LD_INT 1
41528: ARRAY
41529: PPUSH
41530: LD_VAR 0 12
41534: PUSH
41535: LD_VAR 0 7
41539: ARRAY
41540: PUSH
41541: LD_INT 2
41543: ARRAY
41544: PPUSH
41545: CALL_OW 488
41549: NOT
41550: PUSH
41551: LD_VAR 0 12
41555: PUSH
41556: LD_VAR 0 7
41560: ARRAY
41561: PUSH
41562: LD_INT 1
41564: ARRAY
41565: PPUSH
41566: LD_VAR 0 12
41570: PUSH
41571: LD_VAR 0 7
41575: ARRAY
41576: PUSH
41577: LD_INT 2
41579: ARRAY
41580: PPUSH
41581: CALL_OW 428
41585: PUSH
41586: LD_INT 0
41588: GREATER
41589: OR
41590: PUSH
41591: LD_VAR 0 12
41595: PUSH
41596: LD_VAR 0 7
41600: ARRAY
41601: PUSH
41602: LD_INT 1
41604: ARRAY
41605: PPUSH
41606: LD_VAR 0 12
41610: PUSH
41611: LD_VAR 0 7
41615: ARRAY
41616: PUSH
41617: LD_INT 2
41619: ARRAY
41620: PPUSH
41621: CALL_OW 351
41625: OR
41626: IFFALSE 41632
// exit ;
41628: POP
41629: POP
41630: GO 41924
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
41632: LD_ADDR_VAR 0 8
41636: PUSH
41637: LD_VAR 0 12
41641: PUSH
41642: LD_VAR 0 7
41646: ARRAY
41647: PUSH
41648: LD_INT 1
41650: ARRAY
41651: PPUSH
41652: LD_VAR 0 12
41656: PUSH
41657: LD_VAR 0 7
41661: ARRAY
41662: PUSH
41663: LD_INT 2
41665: ARRAY
41666: PPUSH
41667: CALL_OW 546
41671: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
41672: LD_VAR 0 8
41676: PUSH
41677: LD_INT 1
41679: ARRAY
41680: PUSH
41681: LD_VAR 0 8
41685: PUSH
41686: LD_INT 2
41688: ARRAY
41689: PUSH
41690: LD_VAR 0 13
41694: PUSH
41695: LD_INT 2
41697: PLUS
41698: GREATER
41699: OR
41700: PUSH
41701: LD_VAR 0 8
41705: PUSH
41706: LD_INT 2
41708: ARRAY
41709: PUSH
41710: LD_VAR 0 13
41714: PUSH
41715: LD_INT 2
41717: MINUS
41718: LESS
41719: OR
41720: PUSH
41721: LD_VAR 0 8
41725: PUSH
41726: LD_INT 3
41728: ARRAY
41729: PUSH
41730: LD_INT 0
41732: PUSH
41733: LD_INT 8
41735: PUSH
41736: LD_INT 9
41738: PUSH
41739: LD_INT 10
41741: PUSH
41742: LD_INT 11
41744: PUSH
41745: LD_INT 12
41747: PUSH
41748: LD_INT 13
41750: PUSH
41751: LD_INT 16
41753: PUSH
41754: LD_INT 17
41756: PUSH
41757: LD_INT 18
41759: PUSH
41760: LD_INT 19
41762: PUSH
41763: LD_INT 20
41765: PUSH
41766: LD_INT 21
41768: PUSH
41769: EMPTY
41770: LIST
41771: LIST
41772: LIST
41773: LIST
41774: LIST
41775: LIST
41776: LIST
41777: LIST
41778: LIST
41779: LIST
41780: LIST
41781: LIST
41782: LIST
41783: IN
41784: NOT
41785: OR
41786: PUSH
41787: LD_VAR 0 8
41791: PUSH
41792: LD_INT 5
41794: ARRAY
41795: NOT
41796: OR
41797: PUSH
41798: LD_VAR 0 8
41802: PUSH
41803: LD_INT 6
41805: ARRAY
41806: PUSH
41807: LD_INT 1
41809: PUSH
41810: LD_INT 2
41812: PUSH
41813: LD_INT 7
41815: PUSH
41816: LD_INT 9
41818: PUSH
41819: LD_INT 10
41821: PUSH
41822: LD_INT 11
41824: PUSH
41825: EMPTY
41826: LIST
41827: LIST
41828: LIST
41829: LIST
41830: LIST
41831: LIST
41832: IN
41833: NOT
41834: OR
41835: IFFALSE 41841
// exit ;
41837: POP
41838: POP
41839: GO 41924
// end ;
41841: GO 41512
41843: POP
41844: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
41845: LD_VAR 0 9
41849: PPUSH
41850: LD_VAR 0 3
41854: PPUSH
41855: LD_VAR 0 4
41859: PPUSH
41860: LD_INT 20
41862: PPUSH
41863: CALL 33876 0 4
41867: PUSH
41868: LD_INT 4
41870: ARRAY
41871: IFFALSE 41875
// exit ;
41873: GO 41924
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
41875: LD_VAR 0 2
41879: PUSH
41880: LD_INT 29
41882: PUSH
41883: LD_INT 30
41885: PUSH
41886: EMPTY
41887: LIST
41888: LIST
41889: IN
41890: PUSH
41891: LD_VAR 0 3
41895: PPUSH
41896: LD_VAR 0 4
41900: PPUSH
41901: LD_VAR 0 9
41905: PPUSH
41906: CALL_OW 440
41910: NOT
41911: AND
41912: IFFALSE 41916
// exit ;
41914: GO 41924
// result := true ;
41916: LD_ADDR_VAR 0 6
41920: PUSH
41921: LD_INT 1
41923: ST_TO_ADDR
// end ;
41924: LD_VAR 0 6
41928: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
41929: LD_INT 0
41931: PPUSH
41932: PPUSH
41933: PPUSH
41934: PPUSH
41935: PPUSH
41936: PPUSH
41937: PPUSH
41938: PPUSH
41939: PPUSH
41940: PPUSH
41941: PPUSH
41942: PPUSH
41943: PPUSH
41944: PPUSH
41945: PPUSH
41946: PPUSH
41947: PPUSH
41948: PPUSH
41949: PPUSH
41950: PPUSH
41951: PPUSH
41952: PPUSH
41953: PPUSH
41954: PPUSH
41955: PPUSH
41956: PPUSH
41957: PPUSH
41958: PPUSH
41959: PPUSH
41960: PPUSH
41961: PPUSH
41962: PPUSH
41963: PPUSH
41964: PPUSH
41965: PPUSH
41966: PPUSH
41967: PPUSH
41968: PPUSH
41969: PPUSH
41970: PPUSH
41971: PPUSH
41972: PPUSH
41973: PPUSH
41974: PPUSH
41975: PPUSH
41976: PPUSH
41977: PPUSH
41978: PPUSH
41979: PPUSH
41980: PPUSH
41981: PPUSH
41982: PPUSH
41983: PPUSH
41984: PPUSH
41985: PPUSH
41986: PPUSH
41987: PPUSH
41988: PPUSH
// result = [ ] ;
41989: LD_ADDR_VAR 0 7
41993: PUSH
41994: EMPTY
41995: ST_TO_ADDR
// temp_list = [ ] ;
41996: LD_ADDR_VAR 0 9
42000: PUSH
42001: EMPTY
42002: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
42003: LD_VAR 0 4
42007: PUSH
42008: LD_INT 0
42010: PUSH
42011: LD_INT 1
42013: PUSH
42014: LD_INT 2
42016: PUSH
42017: LD_INT 3
42019: PUSH
42020: LD_INT 4
42022: PUSH
42023: LD_INT 5
42025: PUSH
42026: EMPTY
42027: LIST
42028: LIST
42029: LIST
42030: LIST
42031: LIST
42032: LIST
42033: IN
42034: NOT
42035: PUSH
42036: LD_VAR 0 1
42040: PUSH
42041: LD_INT 0
42043: PUSH
42044: LD_INT 1
42046: PUSH
42047: EMPTY
42048: LIST
42049: LIST
42050: IN
42051: PUSH
42052: LD_VAR 0 5
42056: PUSH
42057: LD_INT 1
42059: PUSH
42060: LD_INT 2
42062: PUSH
42063: LD_INT 3
42065: PUSH
42066: EMPTY
42067: LIST
42068: LIST
42069: LIST
42070: IN
42071: NOT
42072: AND
42073: OR
42074: IFFALSE 42078
// exit ;
42076: GO 60469
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
42078: LD_VAR 0 1
42082: PUSH
42083: LD_INT 6
42085: PUSH
42086: LD_INT 7
42088: PUSH
42089: LD_INT 8
42091: PUSH
42092: LD_INT 13
42094: PUSH
42095: LD_INT 12
42097: PUSH
42098: LD_INT 15
42100: PUSH
42101: LD_INT 11
42103: PUSH
42104: LD_INT 14
42106: PUSH
42107: LD_INT 10
42109: PUSH
42110: EMPTY
42111: LIST
42112: LIST
42113: LIST
42114: LIST
42115: LIST
42116: LIST
42117: LIST
42118: LIST
42119: LIST
42120: IN
42121: IFFALSE 42131
// btype = b_lab ;
42123: LD_ADDR_VAR 0 1
42127: PUSH
42128: LD_INT 6
42130: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
42131: LD_VAR 0 6
42135: PUSH
42136: LD_INT 0
42138: PUSH
42139: LD_INT 1
42141: PUSH
42142: LD_INT 2
42144: PUSH
42145: EMPTY
42146: LIST
42147: LIST
42148: LIST
42149: IN
42150: NOT
42151: PUSH
42152: LD_VAR 0 1
42156: PUSH
42157: LD_INT 0
42159: PUSH
42160: LD_INT 1
42162: PUSH
42163: LD_INT 2
42165: PUSH
42166: LD_INT 3
42168: PUSH
42169: LD_INT 6
42171: PUSH
42172: LD_INT 36
42174: PUSH
42175: LD_INT 4
42177: PUSH
42178: LD_INT 5
42180: PUSH
42181: LD_INT 31
42183: PUSH
42184: LD_INT 32
42186: PUSH
42187: LD_INT 33
42189: PUSH
42190: EMPTY
42191: LIST
42192: LIST
42193: LIST
42194: LIST
42195: LIST
42196: LIST
42197: LIST
42198: LIST
42199: LIST
42200: LIST
42201: LIST
42202: IN
42203: NOT
42204: PUSH
42205: LD_VAR 0 6
42209: PUSH
42210: LD_INT 1
42212: EQUAL
42213: AND
42214: OR
42215: PUSH
42216: LD_VAR 0 1
42220: PUSH
42221: LD_INT 2
42223: PUSH
42224: LD_INT 3
42226: PUSH
42227: EMPTY
42228: LIST
42229: LIST
42230: IN
42231: NOT
42232: PUSH
42233: LD_VAR 0 6
42237: PUSH
42238: LD_INT 2
42240: EQUAL
42241: AND
42242: OR
42243: IFFALSE 42253
// mode = 0 ;
42245: LD_ADDR_VAR 0 6
42249: PUSH
42250: LD_INT 0
42252: ST_TO_ADDR
// case mode of 0 :
42253: LD_VAR 0 6
42257: PUSH
42258: LD_INT 0
42260: DOUBLE
42261: EQUAL
42262: IFTRUE 42266
42264: GO 53719
42266: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
42267: LD_ADDR_VAR 0 11
42271: PUSH
42272: LD_INT 0
42274: PUSH
42275: LD_INT 0
42277: PUSH
42278: EMPTY
42279: LIST
42280: LIST
42281: PUSH
42282: LD_INT 0
42284: PUSH
42285: LD_INT 1
42287: NEG
42288: PUSH
42289: EMPTY
42290: LIST
42291: LIST
42292: PUSH
42293: LD_INT 1
42295: PUSH
42296: LD_INT 0
42298: PUSH
42299: EMPTY
42300: LIST
42301: LIST
42302: PUSH
42303: LD_INT 1
42305: PUSH
42306: LD_INT 1
42308: PUSH
42309: EMPTY
42310: LIST
42311: LIST
42312: PUSH
42313: LD_INT 0
42315: PUSH
42316: LD_INT 1
42318: PUSH
42319: EMPTY
42320: LIST
42321: LIST
42322: PUSH
42323: LD_INT 1
42325: NEG
42326: PUSH
42327: LD_INT 0
42329: PUSH
42330: EMPTY
42331: LIST
42332: LIST
42333: PUSH
42334: LD_INT 1
42336: NEG
42337: PUSH
42338: LD_INT 1
42340: NEG
42341: PUSH
42342: EMPTY
42343: LIST
42344: LIST
42345: PUSH
42346: LD_INT 1
42348: NEG
42349: PUSH
42350: LD_INT 2
42352: NEG
42353: PUSH
42354: EMPTY
42355: LIST
42356: LIST
42357: PUSH
42358: LD_INT 0
42360: PUSH
42361: LD_INT 2
42363: NEG
42364: PUSH
42365: EMPTY
42366: LIST
42367: LIST
42368: PUSH
42369: LD_INT 1
42371: PUSH
42372: LD_INT 1
42374: NEG
42375: PUSH
42376: EMPTY
42377: LIST
42378: LIST
42379: PUSH
42380: LD_INT 1
42382: PUSH
42383: LD_INT 2
42385: PUSH
42386: EMPTY
42387: LIST
42388: LIST
42389: PUSH
42390: LD_INT 0
42392: PUSH
42393: LD_INT 2
42395: PUSH
42396: EMPTY
42397: LIST
42398: LIST
42399: PUSH
42400: LD_INT 1
42402: NEG
42403: PUSH
42404: LD_INT 1
42406: PUSH
42407: EMPTY
42408: LIST
42409: LIST
42410: PUSH
42411: LD_INT 1
42413: PUSH
42414: LD_INT 3
42416: PUSH
42417: EMPTY
42418: LIST
42419: LIST
42420: PUSH
42421: LD_INT 0
42423: PUSH
42424: LD_INT 3
42426: PUSH
42427: EMPTY
42428: LIST
42429: LIST
42430: PUSH
42431: LD_INT 1
42433: NEG
42434: PUSH
42435: LD_INT 2
42437: PUSH
42438: EMPTY
42439: LIST
42440: LIST
42441: PUSH
42442: EMPTY
42443: LIST
42444: LIST
42445: LIST
42446: LIST
42447: LIST
42448: LIST
42449: LIST
42450: LIST
42451: LIST
42452: LIST
42453: LIST
42454: LIST
42455: LIST
42456: LIST
42457: LIST
42458: LIST
42459: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42460: LD_ADDR_VAR 0 12
42464: PUSH
42465: LD_INT 0
42467: PUSH
42468: LD_INT 0
42470: PUSH
42471: EMPTY
42472: LIST
42473: LIST
42474: PUSH
42475: LD_INT 0
42477: PUSH
42478: LD_INT 1
42480: NEG
42481: PUSH
42482: EMPTY
42483: LIST
42484: LIST
42485: PUSH
42486: LD_INT 1
42488: PUSH
42489: LD_INT 0
42491: PUSH
42492: EMPTY
42493: LIST
42494: LIST
42495: PUSH
42496: LD_INT 1
42498: PUSH
42499: LD_INT 1
42501: PUSH
42502: EMPTY
42503: LIST
42504: LIST
42505: PUSH
42506: LD_INT 0
42508: PUSH
42509: LD_INT 1
42511: PUSH
42512: EMPTY
42513: LIST
42514: LIST
42515: PUSH
42516: LD_INT 1
42518: NEG
42519: PUSH
42520: LD_INT 0
42522: PUSH
42523: EMPTY
42524: LIST
42525: LIST
42526: PUSH
42527: LD_INT 1
42529: NEG
42530: PUSH
42531: LD_INT 1
42533: NEG
42534: PUSH
42535: EMPTY
42536: LIST
42537: LIST
42538: PUSH
42539: LD_INT 1
42541: PUSH
42542: LD_INT 1
42544: NEG
42545: PUSH
42546: EMPTY
42547: LIST
42548: LIST
42549: PUSH
42550: LD_INT 2
42552: PUSH
42553: LD_INT 0
42555: PUSH
42556: EMPTY
42557: LIST
42558: LIST
42559: PUSH
42560: LD_INT 2
42562: PUSH
42563: LD_INT 1
42565: PUSH
42566: EMPTY
42567: LIST
42568: LIST
42569: PUSH
42570: LD_INT 1
42572: NEG
42573: PUSH
42574: LD_INT 1
42576: PUSH
42577: EMPTY
42578: LIST
42579: LIST
42580: PUSH
42581: LD_INT 2
42583: NEG
42584: PUSH
42585: LD_INT 0
42587: PUSH
42588: EMPTY
42589: LIST
42590: LIST
42591: PUSH
42592: LD_INT 2
42594: NEG
42595: PUSH
42596: LD_INT 1
42598: NEG
42599: PUSH
42600: EMPTY
42601: LIST
42602: LIST
42603: PUSH
42604: LD_INT 2
42606: NEG
42607: PUSH
42608: LD_INT 1
42610: PUSH
42611: EMPTY
42612: LIST
42613: LIST
42614: PUSH
42615: LD_INT 3
42617: NEG
42618: PUSH
42619: LD_INT 0
42621: PUSH
42622: EMPTY
42623: LIST
42624: LIST
42625: PUSH
42626: LD_INT 3
42628: NEG
42629: PUSH
42630: LD_INT 1
42632: NEG
42633: PUSH
42634: EMPTY
42635: LIST
42636: LIST
42637: PUSH
42638: EMPTY
42639: LIST
42640: LIST
42641: LIST
42642: LIST
42643: LIST
42644: LIST
42645: LIST
42646: LIST
42647: LIST
42648: LIST
42649: LIST
42650: LIST
42651: LIST
42652: LIST
42653: LIST
42654: LIST
42655: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42656: LD_ADDR_VAR 0 13
42660: PUSH
42661: LD_INT 0
42663: PUSH
42664: LD_INT 0
42666: PUSH
42667: EMPTY
42668: LIST
42669: LIST
42670: PUSH
42671: LD_INT 0
42673: PUSH
42674: LD_INT 1
42676: NEG
42677: PUSH
42678: EMPTY
42679: LIST
42680: LIST
42681: PUSH
42682: LD_INT 1
42684: PUSH
42685: LD_INT 0
42687: PUSH
42688: EMPTY
42689: LIST
42690: LIST
42691: PUSH
42692: LD_INT 1
42694: PUSH
42695: LD_INT 1
42697: PUSH
42698: EMPTY
42699: LIST
42700: LIST
42701: PUSH
42702: LD_INT 0
42704: PUSH
42705: LD_INT 1
42707: PUSH
42708: EMPTY
42709: LIST
42710: LIST
42711: PUSH
42712: LD_INT 1
42714: NEG
42715: PUSH
42716: LD_INT 0
42718: PUSH
42719: EMPTY
42720: LIST
42721: LIST
42722: PUSH
42723: LD_INT 1
42725: NEG
42726: PUSH
42727: LD_INT 1
42729: NEG
42730: PUSH
42731: EMPTY
42732: LIST
42733: LIST
42734: PUSH
42735: LD_INT 1
42737: NEG
42738: PUSH
42739: LD_INT 2
42741: NEG
42742: PUSH
42743: EMPTY
42744: LIST
42745: LIST
42746: PUSH
42747: LD_INT 2
42749: PUSH
42750: LD_INT 1
42752: PUSH
42753: EMPTY
42754: LIST
42755: LIST
42756: PUSH
42757: LD_INT 2
42759: PUSH
42760: LD_INT 2
42762: PUSH
42763: EMPTY
42764: LIST
42765: LIST
42766: PUSH
42767: LD_INT 1
42769: PUSH
42770: LD_INT 2
42772: PUSH
42773: EMPTY
42774: LIST
42775: LIST
42776: PUSH
42777: LD_INT 2
42779: NEG
42780: PUSH
42781: LD_INT 1
42783: NEG
42784: PUSH
42785: EMPTY
42786: LIST
42787: LIST
42788: PUSH
42789: LD_INT 2
42791: NEG
42792: PUSH
42793: LD_INT 2
42795: NEG
42796: PUSH
42797: EMPTY
42798: LIST
42799: LIST
42800: PUSH
42801: LD_INT 2
42803: NEG
42804: PUSH
42805: LD_INT 3
42807: NEG
42808: PUSH
42809: EMPTY
42810: LIST
42811: LIST
42812: PUSH
42813: LD_INT 3
42815: NEG
42816: PUSH
42817: LD_INT 2
42819: NEG
42820: PUSH
42821: EMPTY
42822: LIST
42823: LIST
42824: PUSH
42825: LD_INT 3
42827: NEG
42828: PUSH
42829: LD_INT 3
42831: NEG
42832: PUSH
42833: EMPTY
42834: LIST
42835: LIST
42836: PUSH
42837: EMPTY
42838: LIST
42839: LIST
42840: LIST
42841: LIST
42842: LIST
42843: LIST
42844: LIST
42845: LIST
42846: LIST
42847: LIST
42848: LIST
42849: LIST
42850: LIST
42851: LIST
42852: LIST
42853: LIST
42854: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
42855: LD_ADDR_VAR 0 14
42859: PUSH
42860: LD_INT 0
42862: PUSH
42863: LD_INT 0
42865: PUSH
42866: EMPTY
42867: LIST
42868: LIST
42869: PUSH
42870: LD_INT 0
42872: PUSH
42873: LD_INT 1
42875: NEG
42876: PUSH
42877: EMPTY
42878: LIST
42879: LIST
42880: PUSH
42881: LD_INT 1
42883: PUSH
42884: LD_INT 0
42886: PUSH
42887: EMPTY
42888: LIST
42889: LIST
42890: PUSH
42891: LD_INT 1
42893: PUSH
42894: LD_INT 1
42896: PUSH
42897: EMPTY
42898: LIST
42899: LIST
42900: PUSH
42901: LD_INT 0
42903: PUSH
42904: LD_INT 1
42906: PUSH
42907: EMPTY
42908: LIST
42909: LIST
42910: PUSH
42911: LD_INT 1
42913: NEG
42914: PUSH
42915: LD_INT 0
42917: PUSH
42918: EMPTY
42919: LIST
42920: LIST
42921: PUSH
42922: LD_INT 1
42924: NEG
42925: PUSH
42926: LD_INT 1
42928: NEG
42929: PUSH
42930: EMPTY
42931: LIST
42932: LIST
42933: PUSH
42934: LD_INT 1
42936: NEG
42937: PUSH
42938: LD_INT 2
42940: NEG
42941: PUSH
42942: EMPTY
42943: LIST
42944: LIST
42945: PUSH
42946: LD_INT 0
42948: PUSH
42949: LD_INT 2
42951: NEG
42952: PUSH
42953: EMPTY
42954: LIST
42955: LIST
42956: PUSH
42957: LD_INT 1
42959: PUSH
42960: LD_INT 1
42962: NEG
42963: PUSH
42964: EMPTY
42965: LIST
42966: LIST
42967: PUSH
42968: LD_INT 1
42970: PUSH
42971: LD_INT 2
42973: PUSH
42974: EMPTY
42975: LIST
42976: LIST
42977: PUSH
42978: LD_INT 0
42980: PUSH
42981: LD_INT 2
42983: PUSH
42984: EMPTY
42985: LIST
42986: LIST
42987: PUSH
42988: LD_INT 1
42990: NEG
42991: PUSH
42992: LD_INT 1
42994: PUSH
42995: EMPTY
42996: LIST
42997: LIST
42998: PUSH
42999: LD_INT 1
43001: NEG
43002: PUSH
43003: LD_INT 3
43005: NEG
43006: PUSH
43007: EMPTY
43008: LIST
43009: LIST
43010: PUSH
43011: LD_INT 0
43013: PUSH
43014: LD_INT 3
43016: NEG
43017: PUSH
43018: EMPTY
43019: LIST
43020: LIST
43021: PUSH
43022: LD_INT 1
43024: PUSH
43025: LD_INT 2
43027: NEG
43028: PUSH
43029: EMPTY
43030: LIST
43031: LIST
43032: PUSH
43033: EMPTY
43034: LIST
43035: LIST
43036: LIST
43037: LIST
43038: LIST
43039: LIST
43040: LIST
43041: LIST
43042: LIST
43043: LIST
43044: LIST
43045: LIST
43046: LIST
43047: LIST
43048: LIST
43049: LIST
43050: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
43051: LD_ADDR_VAR 0 15
43055: PUSH
43056: LD_INT 0
43058: PUSH
43059: LD_INT 0
43061: PUSH
43062: EMPTY
43063: LIST
43064: LIST
43065: PUSH
43066: LD_INT 0
43068: PUSH
43069: LD_INT 1
43071: NEG
43072: PUSH
43073: EMPTY
43074: LIST
43075: LIST
43076: PUSH
43077: LD_INT 1
43079: PUSH
43080: LD_INT 0
43082: PUSH
43083: EMPTY
43084: LIST
43085: LIST
43086: PUSH
43087: LD_INT 1
43089: PUSH
43090: LD_INT 1
43092: PUSH
43093: EMPTY
43094: LIST
43095: LIST
43096: PUSH
43097: LD_INT 0
43099: PUSH
43100: LD_INT 1
43102: PUSH
43103: EMPTY
43104: LIST
43105: LIST
43106: PUSH
43107: LD_INT 1
43109: NEG
43110: PUSH
43111: LD_INT 0
43113: PUSH
43114: EMPTY
43115: LIST
43116: LIST
43117: PUSH
43118: LD_INT 1
43120: NEG
43121: PUSH
43122: LD_INT 1
43124: NEG
43125: PUSH
43126: EMPTY
43127: LIST
43128: LIST
43129: PUSH
43130: LD_INT 1
43132: PUSH
43133: LD_INT 1
43135: NEG
43136: PUSH
43137: EMPTY
43138: LIST
43139: LIST
43140: PUSH
43141: LD_INT 2
43143: PUSH
43144: LD_INT 0
43146: PUSH
43147: EMPTY
43148: LIST
43149: LIST
43150: PUSH
43151: LD_INT 2
43153: PUSH
43154: LD_INT 1
43156: PUSH
43157: EMPTY
43158: LIST
43159: LIST
43160: PUSH
43161: LD_INT 1
43163: NEG
43164: PUSH
43165: LD_INT 1
43167: PUSH
43168: EMPTY
43169: LIST
43170: LIST
43171: PUSH
43172: LD_INT 2
43174: NEG
43175: PUSH
43176: LD_INT 0
43178: PUSH
43179: EMPTY
43180: LIST
43181: LIST
43182: PUSH
43183: LD_INT 2
43185: NEG
43186: PUSH
43187: LD_INT 1
43189: NEG
43190: PUSH
43191: EMPTY
43192: LIST
43193: LIST
43194: PUSH
43195: LD_INT 2
43197: PUSH
43198: LD_INT 1
43200: NEG
43201: PUSH
43202: EMPTY
43203: LIST
43204: LIST
43205: PUSH
43206: LD_INT 3
43208: PUSH
43209: LD_INT 0
43211: PUSH
43212: EMPTY
43213: LIST
43214: LIST
43215: PUSH
43216: LD_INT 3
43218: PUSH
43219: LD_INT 1
43221: PUSH
43222: EMPTY
43223: LIST
43224: LIST
43225: PUSH
43226: EMPTY
43227: LIST
43228: LIST
43229: LIST
43230: LIST
43231: LIST
43232: LIST
43233: LIST
43234: LIST
43235: LIST
43236: LIST
43237: LIST
43238: LIST
43239: LIST
43240: LIST
43241: LIST
43242: LIST
43243: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
43244: LD_ADDR_VAR 0 16
43248: PUSH
43249: LD_INT 0
43251: PUSH
43252: LD_INT 0
43254: PUSH
43255: EMPTY
43256: LIST
43257: LIST
43258: PUSH
43259: LD_INT 0
43261: PUSH
43262: LD_INT 1
43264: NEG
43265: PUSH
43266: EMPTY
43267: LIST
43268: LIST
43269: PUSH
43270: LD_INT 1
43272: PUSH
43273: LD_INT 0
43275: PUSH
43276: EMPTY
43277: LIST
43278: LIST
43279: PUSH
43280: LD_INT 1
43282: PUSH
43283: LD_INT 1
43285: PUSH
43286: EMPTY
43287: LIST
43288: LIST
43289: PUSH
43290: LD_INT 0
43292: PUSH
43293: LD_INT 1
43295: PUSH
43296: EMPTY
43297: LIST
43298: LIST
43299: PUSH
43300: LD_INT 1
43302: NEG
43303: PUSH
43304: LD_INT 0
43306: PUSH
43307: EMPTY
43308: LIST
43309: LIST
43310: PUSH
43311: LD_INT 1
43313: NEG
43314: PUSH
43315: LD_INT 1
43317: NEG
43318: PUSH
43319: EMPTY
43320: LIST
43321: LIST
43322: PUSH
43323: LD_INT 1
43325: NEG
43326: PUSH
43327: LD_INT 2
43329: NEG
43330: PUSH
43331: EMPTY
43332: LIST
43333: LIST
43334: PUSH
43335: LD_INT 2
43337: PUSH
43338: LD_INT 1
43340: PUSH
43341: EMPTY
43342: LIST
43343: LIST
43344: PUSH
43345: LD_INT 2
43347: PUSH
43348: LD_INT 2
43350: PUSH
43351: EMPTY
43352: LIST
43353: LIST
43354: PUSH
43355: LD_INT 1
43357: PUSH
43358: LD_INT 2
43360: PUSH
43361: EMPTY
43362: LIST
43363: LIST
43364: PUSH
43365: LD_INT 2
43367: NEG
43368: PUSH
43369: LD_INT 1
43371: NEG
43372: PUSH
43373: EMPTY
43374: LIST
43375: LIST
43376: PUSH
43377: LD_INT 2
43379: NEG
43380: PUSH
43381: LD_INT 2
43383: NEG
43384: PUSH
43385: EMPTY
43386: LIST
43387: LIST
43388: PUSH
43389: LD_INT 3
43391: PUSH
43392: LD_INT 2
43394: PUSH
43395: EMPTY
43396: LIST
43397: LIST
43398: PUSH
43399: LD_INT 3
43401: PUSH
43402: LD_INT 3
43404: PUSH
43405: EMPTY
43406: LIST
43407: LIST
43408: PUSH
43409: LD_INT 2
43411: PUSH
43412: LD_INT 3
43414: PUSH
43415: EMPTY
43416: LIST
43417: LIST
43418: PUSH
43419: EMPTY
43420: LIST
43421: LIST
43422: LIST
43423: LIST
43424: LIST
43425: LIST
43426: LIST
43427: LIST
43428: LIST
43429: LIST
43430: LIST
43431: LIST
43432: LIST
43433: LIST
43434: LIST
43435: LIST
43436: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43437: LD_ADDR_VAR 0 17
43441: PUSH
43442: LD_INT 0
43444: PUSH
43445: LD_INT 0
43447: PUSH
43448: EMPTY
43449: LIST
43450: LIST
43451: PUSH
43452: LD_INT 0
43454: PUSH
43455: LD_INT 1
43457: NEG
43458: PUSH
43459: EMPTY
43460: LIST
43461: LIST
43462: PUSH
43463: LD_INT 1
43465: PUSH
43466: LD_INT 0
43468: PUSH
43469: EMPTY
43470: LIST
43471: LIST
43472: PUSH
43473: LD_INT 1
43475: PUSH
43476: LD_INT 1
43478: PUSH
43479: EMPTY
43480: LIST
43481: LIST
43482: PUSH
43483: LD_INT 0
43485: PUSH
43486: LD_INT 1
43488: PUSH
43489: EMPTY
43490: LIST
43491: LIST
43492: PUSH
43493: LD_INT 1
43495: NEG
43496: PUSH
43497: LD_INT 0
43499: PUSH
43500: EMPTY
43501: LIST
43502: LIST
43503: PUSH
43504: LD_INT 1
43506: NEG
43507: PUSH
43508: LD_INT 1
43510: NEG
43511: PUSH
43512: EMPTY
43513: LIST
43514: LIST
43515: PUSH
43516: LD_INT 1
43518: NEG
43519: PUSH
43520: LD_INT 2
43522: NEG
43523: PUSH
43524: EMPTY
43525: LIST
43526: LIST
43527: PUSH
43528: LD_INT 0
43530: PUSH
43531: LD_INT 2
43533: NEG
43534: PUSH
43535: EMPTY
43536: LIST
43537: LIST
43538: PUSH
43539: LD_INT 1
43541: PUSH
43542: LD_INT 1
43544: NEG
43545: PUSH
43546: EMPTY
43547: LIST
43548: LIST
43549: PUSH
43550: LD_INT 2
43552: PUSH
43553: LD_INT 0
43555: PUSH
43556: EMPTY
43557: LIST
43558: LIST
43559: PUSH
43560: LD_INT 2
43562: PUSH
43563: LD_INT 1
43565: PUSH
43566: EMPTY
43567: LIST
43568: LIST
43569: PUSH
43570: LD_INT 2
43572: PUSH
43573: LD_INT 2
43575: PUSH
43576: EMPTY
43577: LIST
43578: LIST
43579: PUSH
43580: LD_INT 1
43582: PUSH
43583: LD_INT 2
43585: PUSH
43586: EMPTY
43587: LIST
43588: LIST
43589: PUSH
43590: LD_INT 0
43592: PUSH
43593: LD_INT 2
43595: PUSH
43596: EMPTY
43597: LIST
43598: LIST
43599: PUSH
43600: LD_INT 1
43602: NEG
43603: PUSH
43604: LD_INT 1
43606: PUSH
43607: EMPTY
43608: LIST
43609: LIST
43610: PUSH
43611: LD_INT 2
43613: NEG
43614: PUSH
43615: LD_INT 0
43617: PUSH
43618: EMPTY
43619: LIST
43620: LIST
43621: PUSH
43622: LD_INT 2
43624: NEG
43625: PUSH
43626: LD_INT 1
43628: NEG
43629: PUSH
43630: EMPTY
43631: LIST
43632: LIST
43633: PUSH
43634: LD_INT 2
43636: NEG
43637: PUSH
43638: LD_INT 2
43640: NEG
43641: PUSH
43642: EMPTY
43643: LIST
43644: LIST
43645: PUSH
43646: EMPTY
43647: LIST
43648: LIST
43649: LIST
43650: LIST
43651: LIST
43652: LIST
43653: LIST
43654: LIST
43655: LIST
43656: LIST
43657: LIST
43658: LIST
43659: LIST
43660: LIST
43661: LIST
43662: LIST
43663: LIST
43664: LIST
43665: LIST
43666: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43667: LD_ADDR_VAR 0 18
43671: PUSH
43672: LD_INT 0
43674: PUSH
43675: LD_INT 0
43677: PUSH
43678: EMPTY
43679: LIST
43680: LIST
43681: PUSH
43682: LD_INT 0
43684: PUSH
43685: LD_INT 1
43687: NEG
43688: PUSH
43689: EMPTY
43690: LIST
43691: LIST
43692: PUSH
43693: LD_INT 1
43695: PUSH
43696: LD_INT 0
43698: PUSH
43699: EMPTY
43700: LIST
43701: LIST
43702: PUSH
43703: LD_INT 1
43705: PUSH
43706: LD_INT 1
43708: PUSH
43709: EMPTY
43710: LIST
43711: LIST
43712: PUSH
43713: LD_INT 0
43715: PUSH
43716: LD_INT 1
43718: PUSH
43719: EMPTY
43720: LIST
43721: LIST
43722: PUSH
43723: LD_INT 1
43725: NEG
43726: PUSH
43727: LD_INT 0
43729: PUSH
43730: EMPTY
43731: LIST
43732: LIST
43733: PUSH
43734: LD_INT 1
43736: NEG
43737: PUSH
43738: LD_INT 1
43740: NEG
43741: PUSH
43742: EMPTY
43743: LIST
43744: LIST
43745: PUSH
43746: LD_INT 1
43748: NEG
43749: PUSH
43750: LD_INT 2
43752: NEG
43753: PUSH
43754: EMPTY
43755: LIST
43756: LIST
43757: PUSH
43758: LD_INT 0
43760: PUSH
43761: LD_INT 2
43763: NEG
43764: PUSH
43765: EMPTY
43766: LIST
43767: LIST
43768: PUSH
43769: LD_INT 1
43771: PUSH
43772: LD_INT 1
43774: NEG
43775: PUSH
43776: EMPTY
43777: LIST
43778: LIST
43779: PUSH
43780: LD_INT 2
43782: PUSH
43783: LD_INT 0
43785: PUSH
43786: EMPTY
43787: LIST
43788: LIST
43789: PUSH
43790: LD_INT 2
43792: PUSH
43793: LD_INT 1
43795: PUSH
43796: EMPTY
43797: LIST
43798: LIST
43799: PUSH
43800: LD_INT 2
43802: PUSH
43803: LD_INT 2
43805: PUSH
43806: EMPTY
43807: LIST
43808: LIST
43809: PUSH
43810: LD_INT 1
43812: PUSH
43813: LD_INT 2
43815: PUSH
43816: EMPTY
43817: LIST
43818: LIST
43819: PUSH
43820: LD_INT 0
43822: PUSH
43823: LD_INT 2
43825: PUSH
43826: EMPTY
43827: LIST
43828: LIST
43829: PUSH
43830: LD_INT 1
43832: NEG
43833: PUSH
43834: LD_INT 1
43836: PUSH
43837: EMPTY
43838: LIST
43839: LIST
43840: PUSH
43841: LD_INT 2
43843: NEG
43844: PUSH
43845: LD_INT 0
43847: PUSH
43848: EMPTY
43849: LIST
43850: LIST
43851: PUSH
43852: LD_INT 2
43854: NEG
43855: PUSH
43856: LD_INT 1
43858: NEG
43859: PUSH
43860: EMPTY
43861: LIST
43862: LIST
43863: PUSH
43864: LD_INT 2
43866: NEG
43867: PUSH
43868: LD_INT 2
43870: NEG
43871: PUSH
43872: EMPTY
43873: LIST
43874: LIST
43875: PUSH
43876: EMPTY
43877: LIST
43878: LIST
43879: LIST
43880: LIST
43881: LIST
43882: LIST
43883: LIST
43884: LIST
43885: LIST
43886: LIST
43887: LIST
43888: LIST
43889: LIST
43890: LIST
43891: LIST
43892: LIST
43893: LIST
43894: LIST
43895: LIST
43896: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43897: LD_ADDR_VAR 0 19
43901: PUSH
43902: LD_INT 0
43904: PUSH
43905: LD_INT 0
43907: PUSH
43908: EMPTY
43909: LIST
43910: LIST
43911: PUSH
43912: LD_INT 0
43914: PUSH
43915: LD_INT 1
43917: NEG
43918: PUSH
43919: EMPTY
43920: LIST
43921: LIST
43922: PUSH
43923: LD_INT 1
43925: PUSH
43926: LD_INT 0
43928: PUSH
43929: EMPTY
43930: LIST
43931: LIST
43932: PUSH
43933: LD_INT 1
43935: PUSH
43936: LD_INT 1
43938: PUSH
43939: EMPTY
43940: LIST
43941: LIST
43942: PUSH
43943: LD_INT 0
43945: PUSH
43946: LD_INT 1
43948: PUSH
43949: EMPTY
43950: LIST
43951: LIST
43952: PUSH
43953: LD_INT 1
43955: NEG
43956: PUSH
43957: LD_INT 0
43959: PUSH
43960: EMPTY
43961: LIST
43962: LIST
43963: PUSH
43964: LD_INT 1
43966: NEG
43967: PUSH
43968: LD_INT 1
43970: NEG
43971: PUSH
43972: EMPTY
43973: LIST
43974: LIST
43975: PUSH
43976: LD_INT 1
43978: NEG
43979: PUSH
43980: LD_INT 2
43982: NEG
43983: PUSH
43984: EMPTY
43985: LIST
43986: LIST
43987: PUSH
43988: LD_INT 0
43990: PUSH
43991: LD_INT 2
43993: NEG
43994: PUSH
43995: EMPTY
43996: LIST
43997: LIST
43998: PUSH
43999: LD_INT 1
44001: PUSH
44002: LD_INT 1
44004: NEG
44005: PUSH
44006: EMPTY
44007: LIST
44008: LIST
44009: PUSH
44010: LD_INT 2
44012: PUSH
44013: LD_INT 0
44015: PUSH
44016: EMPTY
44017: LIST
44018: LIST
44019: PUSH
44020: LD_INT 2
44022: PUSH
44023: LD_INT 1
44025: PUSH
44026: EMPTY
44027: LIST
44028: LIST
44029: PUSH
44030: LD_INT 2
44032: PUSH
44033: LD_INT 2
44035: PUSH
44036: EMPTY
44037: LIST
44038: LIST
44039: PUSH
44040: LD_INT 1
44042: PUSH
44043: LD_INT 2
44045: PUSH
44046: EMPTY
44047: LIST
44048: LIST
44049: PUSH
44050: LD_INT 0
44052: PUSH
44053: LD_INT 2
44055: PUSH
44056: EMPTY
44057: LIST
44058: LIST
44059: PUSH
44060: LD_INT 1
44062: NEG
44063: PUSH
44064: LD_INT 1
44066: PUSH
44067: EMPTY
44068: LIST
44069: LIST
44070: PUSH
44071: LD_INT 2
44073: NEG
44074: PUSH
44075: LD_INT 0
44077: PUSH
44078: EMPTY
44079: LIST
44080: LIST
44081: PUSH
44082: LD_INT 2
44084: NEG
44085: PUSH
44086: LD_INT 1
44088: NEG
44089: PUSH
44090: EMPTY
44091: LIST
44092: LIST
44093: PUSH
44094: LD_INT 2
44096: NEG
44097: PUSH
44098: LD_INT 2
44100: NEG
44101: PUSH
44102: EMPTY
44103: LIST
44104: LIST
44105: PUSH
44106: EMPTY
44107: LIST
44108: LIST
44109: LIST
44110: LIST
44111: LIST
44112: LIST
44113: LIST
44114: LIST
44115: LIST
44116: LIST
44117: LIST
44118: LIST
44119: LIST
44120: LIST
44121: LIST
44122: LIST
44123: LIST
44124: LIST
44125: LIST
44126: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44127: LD_ADDR_VAR 0 20
44131: PUSH
44132: LD_INT 0
44134: PUSH
44135: LD_INT 0
44137: PUSH
44138: EMPTY
44139: LIST
44140: LIST
44141: PUSH
44142: LD_INT 0
44144: PUSH
44145: LD_INT 1
44147: NEG
44148: PUSH
44149: EMPTY
44150: LIST
44151: LIST
44152: PUSH
44153: LD_INT 1
44155: PUSH
44156: LD_INT 0
44158: PUSH
44159: EMPTY
44160: LIST
44161: LIST
44162: PUSH
44163: LD_INT 1
44165: PUSH
44166: LD_INT 1
44168: PUSH
44169: EMPTY
44170: LIST
44171: LIST
44172: PUSH
44173: LD_INT 0
44175: PUSH
44176: LD_INT 1
44178: PUSH
44179: EMPTY
44180: LIST
44181: LIST
44182: PUSH
44183: LD_INT 1
44185: NEG
44186: PUSH
44187: LD_INT 0
44189: PUSH
44190: EMPTY
44191: LIST
44192: LIST
44193: PUSH
44194: LD_INT 1
44196: NEG
44197: PUSH
44198: LD_INT 1
44200: NEG
44201: PUSH
44202: EMPTY
44203: LIST
44204: LIST
44205: PUSH
44206: LD_INT 1
44208: NEG
44209: PUSH
44210: LD_INT 2
44212: NEG
44213: PUSH
44214: EMPTY
44215: LIST
44216: LIST
44217: PUSH
44218: LD_INT 0
44220: PUSH
44221: LD_INT 2
44223: NEG
44224: PUSH
44225: EMPTY
44226: LIST
44227: LIST
44228: PUSH
44229: LD_INT 1
44231: PUSH
44232: LD_INT 1
44234: NEG
44235: PUSH
44236: EMPTY
44237: LIST
44238: LIST
44239: PUSH
44240: LD_INT 2
44242: PUSH
44243: LD_INT 0
44245: PUSH
44246: EMPTY
44247: LIST
44248: LIST
44249: PUSH
44250: LD_INT 2
44252: PUSH
44253: LD_INT 1
44255: PUSH
44256: EMPTY
44257: LIST
44258: LIST
44259: PUSH
44260: LD_INT 2
44262: PUSH
44263: LD_INT 2
44265: PUSH
44266: EMPTY
44267: LIST
44268: LIST
44269: PUSH
44270: LD_INT 1
44272: PUSH
44273: LD_INT 2
44275: PUSH
44276: EMPTY
44277: LIST
44278: LIST
44279: PUSH
44280: LD_INT 0
44282: PUSH
44283: LD_INT 2
44285: PUSH
44286: EMPTY
44287: LIST
44288: LIST
44289: PUSH
44290: LD_INT 1
44292: NEG
44293: PUSH
44294: LD_INT 1
44296: PUSH
44297: EMPTY
44298: LIST
44299: LIST
44300: PUSH
44301: LD_INT 2
44303: NEG
44304: PUSH
44305: LD_INT 0
44307: PUSH
44308: EMPTY
44309: LIST
44310: LIST
44311: PUSH
44312: LD_INT 2
44314: NEG
44315: PUSH
44316: LD_INT 1
44318: NEG
44319: PUSH
44320: EMPTY
44321: LIST
44322: LIST
44323: PUSH
44324: LD_INT 2
44326: NEG
44327: PUSH
44328: LD_INT 2
44330: NEG
44331: PUSH
44332: EMPTY
44333: LIST
44334: LIST
44335: PUSH
44336: EMPTY
44337: LIST
44338: LIST
44339: LIST
44340: LIST
44341: LIST
44342: LIST
44343: LIST
44344: LIST
44345: LIST
44346: LIST
44347: LIST
44348: LIST
44349: LIST
44350: LIST
44351: LIST
44352: LIST
44353: LIST
44354: LIST
44355: LIST
44356: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44357: LD_ADDR_VAR 0 21
44361: PUSH
44362: LD_INT 0
44364: PUSH
44365: LD_INT 0
44367: PUSH
44368: EMPTY
44369: LIST
44370: LIST
44371: PUSH
44372: LD_INT 0
44374: PUSH
44375: LD_INT 1
44377: NEG
44378: PUSH
44379: EMPTY
44380: LIST
44381: LIST
44382: PUSH
44383: LD_INT 1
44385: PUSH
44386: LD_INT 0
44388: PUSH
44389: EMPTY
44390: LIST
44391: LIST
44392: PUSH
44393: LD_INT 1
44395: PUSH
44396: LD_INT 1
44398: PUSH
44399: EMPTY
44400: LIST
44401: LIST
44402: PUSH
44403: LD_INT 0
44405: PUSH
44406: LD_INT 1
44408: PUSH
44409: EMPTY
44410: LIST
44411: LIST
44412: PUSH
44413: LD_INT 1
44415: NEG
44416: PUSH
44417: LD_INT 0
44419: PUSH
44420: EMPTY
44421: LIST
44422: LIST
44423: PUSH
44424: LD_INT 1
44426: NEG
44427: PUSH
44428: LD_INT 1
44430: NEG
44431: PUSH
44432: EMPTY
44433: LIST
44434: LIST
44435: PUSH
44436: LD_INT 1
44438: NEG
44439: PUSH
44440: LD_INT 2
44442: NEG
44443: PUSH
44444: EMPTY
44445: LIST
44446: LIST
44447: PUSH
44448: LD_INT 0
44450: PUSH
44451: LD_INT 2
44453: NEG
44454: PUSH
44455: EMPTY
44456: LIST
44457: LIST
44458: PUSH
44459: LD_INT 1
44461: PUSH
44462: LD_INT 1
44464: NEG
44465: PUSH
44466: EMPTY
44467: LIST
44468: LIST
44469: PUSH
44470: LD_INT 2
44472: PUSH
44473: LD_INT 0
44475: PUSH
44476: EMPTY
44477: LIST
44478: LIST
44479: PUSH
44480: LD_INT 2
44482: PUSH
44483: LD_INT 1
44485: PUSH
44486: EMPTY
44487: LIST
44488: LIST
44489: PUSH
44490: LD_INT 2
44492: PUSH
44493: LD_INT 2
44495: PUSH
44496: EMPTY
44497: LIST
44498: LIST
44499: PUSH
44500: LD_INT 1
44502: PUSH
44503: LD_INT 2
44505: PUSH
44506: EMPTY
44507: LIST
44508: LIST
44509: PUSH
44510: LD_INT 0
44512: PUSH
44513: LD_INT 2
44515: PUSH
44516: EMPTY
44517: LIST
44518: LIST
44519: PUSH
44520: LD_INT 1
44522: NEG
44523: PUSH
44524: LD_INT 1
44526: PUSH
44527: EMPTY
44528: LIST
44529: LIST
44530: PUSH
44531: LD_INT 2
44533: NEG
44534: PUSH
44535: LD_INT 0
44537: PUSH
44538: EMPTY
44539: LIST
44540: LIST
44541: PUSH
44542: LD_INT 2
44544: NEG
44545: PUSH
44546: LD_INT 1
44548: NEG
44549: PUSH
44550: EMPTY
44551: LIST
44552: LIST
44553: PUSH
44554: LD_INT 2
44556: NEG
44557: PUSH
44558: LD_INT 2
44560: NEG
44561: PUSH
44562: EMPTY
44563: LIST
44564: LIST
44565: PUSH
44566: EMPTY
44567: LIST
44568: LIST
44569: LIST
44570: LIST
44571: LIST
44572: LIST
44573: LIST
44574: LIST
44575: LIST
44576: LIST
44577: LIST
44578: LIST
44579: LIST
44580: LIST
44581: LIST
44582: LIST
44583: LIST
44584: LIST
44585: LIST
44586: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44587: LD_ADDR_VAR 0 22
44591: PUSH
44592: LD_INT 0
44594: PUSH
44595: LD_INT 0
44597: PUSH
44598: EMPTY
44599: LIST
44600: LIST
44601: PUSH
44602: LD_INT 0
44604: PUSH
44605: LD_INT 1
44607: NEG
44608: PUSH
44609: EMPTY
44610: LIST
44611: LIST
44612: PUSH
44613: LD_INT 1
44615: PUSH
44616: LD_INT 0
44618: PUSH
44619: EMPTY
44620: LIST
44621: LIST
44622: PUSH
44623: LD_INT 1
44625: PUSH
44626: LD_INT 1
44628: PUSH
44629: EMPTY
44630: LIST
44631: LIST
44632: PUSH
44633: LD_INT 0
44635: PUSH
44636: LD_INT 1
44638: PUSH
44639: EMPTY
44640: LIST
44641: LIST
44642: PUSH
44643: LD_INT 1
44645: NEG
44646: PUSH
44647: LD_INT 0
44649: PUSH
44650: EMPTY
44651: LIST
44652: LIST
44653: PUSH
44654: LD_INT 1
44656: NEG
44657: PUSH
44658: LD_INT 1
44660: NEG
44661: PUSH
44662: EMPTY
44663: LIST
44664: LIST
44665: PUSH
44666: LD_INT 1
44668: NEG
44669: PUSH
44670: LD_INT 2
44672: NEG
44673: PUSH
44674: EMPTY
44675: LIST
44676: LIST
44677: PUSH
44678: LD_INT 0
44680: PUSH
44681: LD_INT 2
44683: NEG
44684: PUSH
44685: EMPTY
44686: LIST
44687: LIST
44688: PUSH
44689: LD_INT 1
44691: PUSH
44692: LD_INT 1
44694: NEG
44695: PUSH
44696: EMPTY
44697: LIST
44698: LIST
44699: PUSH
44700: LD_INT 2
44702: PUSH
44703: LD_INT 0
44705: PUSH
44706: EMPTY
44707: LIST
44708: LIST
44709: PUSH
44710: LD_INT 2
44712: PUSH
44713: LD_INT 1
44715: PUSH
44716: EMPTY
44717: LIST
44718: LIST
44719: PUSH
44720: LD_INT 2
44722: PUSH
44723: LD_INT 2
44725: PUSH
44726: EMPTY
44727: LIST
44728: LIST
44729: PUSH
44730: LD_INT 1
44732: PUSH
44733: LD_INT 2
44735: PUSH
44736: EMPTY
44737: LIST
44738: LIST
44739: PUSH
44740: LD_INT 0
44742: PUSH
44743: LD_INT 2
44745: PUSH
44746: EMPTY
44747: LIST
44748: LIST
44749: PUSH
44750: LD_INT 1
44752: NEG
44753: PUSH
44754: LD_INT 1
44756: PUSH
44757: EMPTY
44758: LIST
44759: LIST
44760: PUSH
44761: LD_INT 2
44763: NEG
44764: PUSH
44765: LD_INT 0
44767: PUSH
44768: EMPTY
44769: LIST
44770: LIST
44771: PUSH
44772: LD_INT 2
44774: NEG
44775: PUSH
44776: LD_INT 1
44778: NEG
44779: PUSH
44780: EMPTY
44781: LIST
44782: LIST
44783: PUSH
44784: LD_INT 2
44786: NEG
44787: PUSH
44788: LD_INT 2
44790: NEG
44791: PUSH
44792: EMPTY
44793: LIST
44794: LIST
44795: PUSH
44796: EMPTY
44797: LIST
44798: LIST
44799: LIST
44800: LIST
44801: LIST
44802: LIST
44803: LIST
44804: LIST
44805: LIST
44806: LIST
44807: LIST
44808: LIST
44809: LIST
44810: LIST
44811: LIST
44812: LIST
44813: LIST
44814: LIST
44815: LIST
44816: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
44817: LD_ADDR_VAR 0 23
44821: PUSH
44822: LD_INT 0
44824: PUSH
44825: LD_INT 0
44827: PUSH
44828: EMPTY
44829: LIST
44830: LIST
44831: PUSH
44832: LD_INT 0
44834: PUSH
44835: LD_INT 1
44837: NEG
44838: PUSH
44839: EMPTY
44840: LIST
44841: LIST
44842: PUSH
44843: LD_INT 1
44845: PUSH
44846: LD_INT 0
44848: PUSH
44849: EMPTY
44850: LIST
44851: LIST
44852: PUSH
44853: LD_INT 1
44855: PUSH
44856: LD_INT 1
44858: PUSH
44859: EMPTY
44860: LIST
44861: LIST
44862: PUSH
44863: LD_INT 0
44865: PUSH
44866: LD_INT 1
44868: PUSH
44869: EMPTY
44870: LIST
44871: LIST
44872: PUSH
44873: LD_INT 1
44875: NEG
44876: PUSH
44877: LD_INT 0
44879: PUSH
44880: EMPTY
44881: LIST
44882: LIST
44883: PUSH
44884: LD_INT 1
44886: NEG
44887: PUSH
44888: LD_INT 1
44890: NEG
44891: PUSH
44892: EMPTY
44893: LIST
44894: LIST
44895: PUSH
44896: LD_INT 1
44898: NEG
44899: PUSH
44900: LD_INT 2
44902: NEG
44903: PUSH
44904: EMPTY
44905: LIST
44906: LIST
44907: PUSH
44908: LD_INT 0
44910: PUSH
44911: LD_INT 2
44913: NEG
44914: PUSH
44915: EMPTY
44916: LIST
44917: LIST
44918: PUSH
44919: LD_INT 1
44921: PUSH
44922: LD_INT 1
44924: NEG
44925: PUSH
44926: EMPTY
44927: LIST
44928: LIST
44929: PUSH
44930: LD_INT 2
44932: PUSH
44933: LD_INT 0
44935: PUSH
44936: EMPTY
44937: LIST
44938: LIST
44939: PUSH
44940: LD_INT 2
44942: PUSH
44943: LD_INT 1
44945: PUSH
44946: EMPTY
44947: LIST
44948: LIST
44949: PUSH
44950: LD_INT 2
44952: PUSH
44953: LD_INT 2
44955: PUSH
44956: EMPTY
44957: LIST
44958: LIST
44959: PUSH
44960: LD_INT 1
44962: PUSH
44963: LD_INT 2
44965: PUSH
44966: EMPTY
44967: LIST
44968: LIST
44969: PUSH
44970: LD_INT 0
44972: PUSH
44973: LD_INT 2
44975: PUSH
44976: EMPTY
44977: LIST
44978: LIST
44979: PUSH
44980: LD_INT 1
44982: NEG
44983: PUSH
44984: LD_INT 1
44986: PUSH
44987: EMPTY
44988: LIST
44989: LIST
44990: PUSH
44991: LD_INT 2
44993: NEG
44994: PUSH
44995: LD_INT 0
44997: PUSH
44998: EMPTY
44999: LIST
45000: LIST
45001: PUSH
45002: LD_INT 2
45004: NEG
45005: PUSH
45006: LD_INT 1
45008: NEG
45009: PUSH
45010: EMPTY
45011: LIST
45012: LIST
45013: PUSH
45014: LD_INT 2
45016: NEG
45017: PUSH
45018: LD_INT 2
45020: NEG
45021: PUSH
45022: EMPTY
45023: LIST
45024: LIST
45025: PUSH
45026: LD_INT 2
45028: NEG
45029: PUSH
45030: LD_INT 3
45032: NEG
45033: PUSH
45034: EMPTY
45035: LIST
45036: LIST
45037: PUSH
45038: LD_INT 1
45040: NEG
45041: PUSH
45042: LD_INT 3
45044: NEG
45045: PUSH
45046: EMPTY
45047: LIST
45048: LIST
45049: PUSH
45050: LD_INT 1
45052: PUSH
45053: LD_INT 2
45055: NEG
45056: PUSH
45057: EMPTY
45058: LIST
45059: LIST
45060: PUSH
45061: LD_INT 2
45063: PUSH
45064: LD_INT 1
45066: NEG
45067: PUSH
45068: EMPTY
45069: LIST
45070: LIST
45071: PUSH
45072: EMPTY
45073: LIST
45074: LIST
45075: LIST
45076: LIST
45077: LIST
45078: LIST
45079: LIST
45080: LIST
45081: LIST
45082: LIST
45083: LIST
45084: LIST
45085: LIST
45086: LIST
45087: LIST
45088: LIST
45089: LIST
45090: LIST
45091: LIST
45092: LIST
45093: LIST
45094: LIST
45095: LIST
45096: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
45097: LD_ADDR_VAR 0 24
45101: PUSH
45102: LD_INT 0
45104: PUSH
45105: LD_INT 0
45107: PUSH
45108: EMPTY
45109: LIST
45110: LIST
45111: PUSH
45112: LD_INT 0
45114: PUSH
45115: LD_INT 1
45117: NEG
45118: PUSH
45119: EMPTY
45120: LIST
45121: LIST
45122: PUSH
45123: LD_INT 1
45125: PUSH
45126: LD_INT 0
45128: PUSH
45129: EMPTY
45130: LIST
45131: LIST
45132: PUSH
45133: LD_INT 1
45135: PUSH
45136: LD_INT 1
45138: PUSH
45139: EMPTY
45140: LIST
45141: LIST
45142: PUSH
45143: LD_INT 0
45145: PUSH
45146: LD_INT 1
45148: PUSH
45149: EMPTY
45150: LIST
45151: LIST
45152: PUSH
45153: LD_INT 1
45155: NEG
45156: PUSH
45157: LD_INT 0
45159: PUSH
45160: EMPTY
45161: LIST
45162: LIST
45163: PUSH
45164: LD_INT 1
45166: NEG
45167: PUSH
45168: LD_INT 1
45170: NEG
45171: PUSH
45172: EMPTY
45173: LIST
45174: LIST
45175: PUSH
45176: LD_INT 1
45178: NEG
45179: PUSH
45180: LD_INT 2
45182: NEG
45183: PUSH
45184: EMPTY
45185: LIST
45186: LIST
45187: PUSH
45188: LD_INT 0
45190: PUSH
45191: LD_INT 2
45193: NEG
45194: PUSH
45195: EMPTY
45196: LIST
45197: LIST
45198: PUSH
45199: LD_INT 1
45201: PUSH
45202: LD_INT 1
45204: NEG
45205: PUSH
45206: EMPTY
45207: LIST
45208: LIST
45209: PUSH
45210: LD_INT 2
45212: PUSH
45213: LD_INT 0
45215: PUSH
45216: EMPTY
45217: LIST
45218: LIST
45219: PUSH
45220: LD_INT 2
45222: PUSH
45223: LD_INT 1
45225: PUSH
45226: EMPTY
45227: LIST
45228: LIST
45229: PUSH
45230: LD_INT 2
45232: PUSH
45233: LD_INT 2
45235: PUSH
45236: EMPTY
45237: LIST
45238: LIST
45239: PUSH
45240: LD_INT 1
45242: PUSH
45243: LD_INT 2
45245: PUSH
45246: EMPTY
45247: LIST
45248: LIST
45249: PUSH
45250: LD_INT 0
45252: PUSH
45253: LD_INT 2
45255: PUSH
45256: EMPTY
45257: LIST
45258: LIST
45259: PUSH
45260: LD_INT 1
45262: NEG
45263: PUSH
45264: LD_INT 1
45266: PUSH
45267: EMPTY
45268: LIST
45269: LIST
45270: PUSH
45271: LD_INT 2
45273: NEG
45274: PUSH
45275: LD_INT 0
45277: PUSH
45278: EMPTY
45279: LIST
45280: LIST
45281: PUSH
45282: LD_INT 2
45284: NEG
45285: PUSH
45286: LD_INT 1
45288: NEG
45289: PUSH
45290: EMPTY
45291: LIST
45292: LIST
45293: PUSH
45294: LD_INT 2
45296: NEG
45297: PUSH
45298: LD_INT 2
45300: NEG
45301: PUSH
45302: EMPTY
45303: LIST
45304: LIST
45305: PUSH
45306: LD_INT 1
45308: PUSH
45309: LD_INT 2
45311: NEG
45312: PUSH
45313: EMPTY
45314: LIST
45315: LIST
45316: PUSH
45317: LD_INT 2
45319: PUSH
45320: LD_INT 1
45322: NEG
45323: PUSH
45324: EMPTY
45325: LIST
45326: LIST
45327: PUSH
45328: LD_INT 3
45330: PUSH
45331: LD_INT 1
45333: PUSH
45334: EMPTY
45335: LIST
45336: LIST
45337: PUSH
45338: LD_INT 3
45340: PUSH
45341: LD_INT 2
45343: PUSH
45344: EMPTY
45345: LIST
45346: LIST
45347: PUSH
45348: EMPTY
45349: LIST
45350: LIST
45351: LIST
45352: LIST
45353: LIST
45354: LIST
45355: LIST
45356: LIST
45357: LIST
45358: LIST
45359: LIST
45360: LIST
45361: LIST
45362: LIST
45363: LIST
45364: LIST
45365: LIST
45366: LIST
45367: LIST
45368: LIST
45369: LIST
45370: LIST
45371: LIST
45372: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
45373: LD_ADDR_VAR 0 25
45377: PUSH
45378: LD_INT 0
45380: PUSH
45381: LD_INT 0
45383: PUSH
45384: EMPTY
45385: LIST
45386: LIST
45387: PUSH
45388: LD_INT 0
45390: PUSH
45391: LD_INT 1
45393: NEG
45394: PUSH
45395: EMPTY
45396: LIST
45397: LIST
45398: PUSH
45399: LD_INT 1
45401: PUSH
45402: LD_INT 0
45404: PUSH
45405: EMPTY
45406: LIST
45407: LIST
45408: PUSH
45409: LD_INT 1
45411: PUSH
45412: LD_INT 1
45414: PUSH
45415: EMPTY
45416: LIST
45417: LIST
45418: PUSH
45419: LD_INT 0
45421: PUSH
45422: LD_INT 1
45424: PUSH
45425: EMPTY
45426: LIST
45427: LIST
45428: PUSH
45429: LD_INT 1
45431: NEG
45432: PUSH
45433: LD_INT 0
45435: PUSH
45436: EMPTY
45437: LIST
45438: LIST
45439: PUSH
45440: LD_INT 1
45442: NEG
45443: PUSH
45444: LD_INT 1
45446: NEG
45447: PUSH
45448: EMPTY
45449: LIST
45450: LIST
45451: PUSH
45452: LD_INT 1
45454: NEG
45455: PUSH
45456: LD_INT 2
45458: NEG
45459: PUSH
45460: EMPTY
45461: LIST
45462: LIST
45463: PUSH
45464: LD_INT 0
45466: PUSH
45467: LD_INT 2
45469: NEG
45470: PUSH
45471: EMPTY
45472: LIST
45473: LIST
45474: PUSH
45475: LD_INT 1
45477: PUSH
45478: LD_INT 1
45480: NEG
45481: PUSH
45482: EMPTY
45483: LIST
45484: LIST
45485: PUSH
45486: LD_INT 2
45488: PUSH
45489: LD_INT 0
45491: PUSH
45492: EMPTY
45493: LIST
45494: LIST
45495: PUSH
45496: LD_INT 2
45498: PUSH
45499: LD_INT 1
45501: PUSH
45502: EMPTY
45503: LIST
45504: LIST
45505: PUSH
45506: LD_INT 2
45508: PUSH
45509: LD_INT 2
45511: PUSH
45512: EMPTY
45513: LIST
45514: LIST
45515: PUSH
45516: LD_INT 1
45518: PUSH
45519: LD_INT 2
45521: PUSH
45522: EMPTY
45523: LIST
45524: LIST
45525: PUSH
45526: LD_INT 0
45528: PUSH
45529: LD_INT 2
45531: PUSH
45532: EMPTY
45533: LIST
45534: LIST
45535: PUSH
45536: LD_INT 1
45538: NEG
45539: PUSH
45540: LD_INT 1
45542: PUSH
45543: EMPTY
45544: LIST
45545: LIST
45546: PUSH
45547: LD_INT 2
45549: NEG
45550: PUSH
45551: LD_INT 0
45553: PUSH
45554: EMPTY
45555: LIST
45556: LIST
45557: PUSH
45558: LD_INT 2
45560: NEG
45561: PUSH
45562: LD_INT 1
45564: NEG
45565: PUSH
45566: EMPTY
45567: LIST
45568: LIST
45569: PUSH
45570: LD_INT 2
45572: NEG
45573: PUSH
45574: LD_INT 2
45576: NEG
45577: PUSH
45578: EMPTY
45579: LIST
45580: LIST
45581: PUSH
45582: LD_INT 3
45584: PUSH
45585: LD_INT 1
45587: PUSH
45588: EMPTY
45589: LIST
45590: LIST
45591: PUSH
45592: LD_INT 3
45594: PUSH
45595: LD_INT 2
45597: PUSH
45598: EMPTY
45599: LIST
45600: LIST
45601: PUSH
45602: LD_INT 2
45604: PUSH
45605: LD_INT 3
45607: PUSH
45608: EMPTY
45609: LIST
45610: LIST
45611: PUSH
45612: LD_INT 1
45614: PUSH
45615: LD_INT 3
45617: PUSH
45618: EMPTY
45619: LIST
45620: LIST
45621: PUSH
45622: EMPTY
45623: LIST
45624: LIST
45625: LIST
45626: LIST
45627: LIST
45628: LIST
45629: LIST
45630: LIST
45631: LIST
45632: LIST
45633: LIST
45634: LIST
45635: LIST
45636: LIST
45637: LIST
45638: LIST
45639: LIST
45640: LIST
45641: LIST
45642: LIST
45643: LIST
45644: LIST
45645: LIST
45646: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
45647: LD_ADDR_VAR 0 26
45651: PUSH
45652: LD_INT 0
45654: PUSH
45655: LD_INT 0
45657: PUSH
45658: EMPTY
45659: LIST
45660: LIST
45661: PUSH
45662: LD_INT 0
45664: PUSH
45665: LD_INT 1
45667: NEG
45668: PUSH
45669: EMPTY
45670: LIST
45671: LIST
45672: PUSH
45673: LD_INT 1
45675: PUSH
45676: LD_INT 0
45678: PUSH
45679: EMPTY
45680: LIST
45681: LIST
45682: PUSH
45683: LD_INT 1
45685: PUSH
45686: LD_INT 1
45688: PUSH
45689: EMPTY
45690: LIST
45691: LIST
45692: PUSH
45693: LD_INT 0
45695: PUSH
45696: LD_INT 1
45698: PUSH
45699: EMPTY
45700: LIST
45701: LIST
45702: PUSH
45703: LD_INT 1
45705: NEG
45706: PUSH
45707: LD_INT 0
45709: PUSH
45710: EMPTY
45711: LIST
45712: LIST
45713: PUSH
45714: LD_INT 1
45716: NEG
45717: PUSH
45718: LD_INT 1
45720: NEG
45721: PUSH
45722: EMPTY
45723: LIST
45724: LIST
45725: PUSH
45726: LD_INT 1
45728: NEG
45729: PUSH
45730: LD_INT 2
45732: NEG
45733: PUSH
45734: EMPTY
45735: LIST
45736: LIST
45737: PUSH
45738: LD_INT 0
45740: PUSH
45741: LD_INT 2
45743: NEG
45744: PUSH
45745: EMPTY
45746: LIST
45747: LIST
45748: PUSH
45749: LD_INT 1
45751: PUSH
45752: LD_INT 1
45754: NEG
45755: PUSH
45756: EMPTY
45757: LIST
45758: LIST
45759: PUSH
45760: LD_INT 2
45762: PUSH
45763: LD_INT 0
45765: PUSH
45766: EMPTY
45767: LIST
45768: LIST
45769: PUSH
45770: LD_INT 2
45772: PUSH
45773: LD_INT 1
45775: PUSH
45776: EMPTY
45777: LIST
45778: LIST
45779: PUSH
45780: LD_INT 2
45782: PUSH
45783: LD_INT 2
45785: PUSH
45786: EMPTY
45787: LIST
45788: LIST
45789: PUSH
45790: LD_INT 1
45792: PUSH
45793: LD_INT 2
45795: PUSH
45796: EMPTY
45797: LIST
45798: LIST
45799: PUSH
45800: LD_INT 0
45802: PUSH
45803: LD_INT 2
45805: PUSH
45806: EMPTY
45807: LIST
45808: LIST
45809: PUSH
45810: LD_INT 1
45812: NEG
45813: PUSH
45814: LD_INT 1
45816: PUSH
45817: EMPTY
45818: LIST
45819: LIST
45820: PUSH
45821: LD_INT 2
45823: NEG
45824: PUSH
45825: LD_INT 0
45827: PUSH
45828: EMPTY
45829: LIST
45830: LIST
45831: PUSH
45832: LD_INT 2
45834: NEG
45835: PUSH
45836: LD_INT 1
45838: NEG
45839: PUSH
45840: EMPTY
45841: LIST
45842: LIST
45843: PUSH
45844: LD_INT 2
45846: NEG
45847: PUSH
45848: LD_INT 2
45850: NEG
45851: PUSH
45852: EMPTY
45853: LIST
45854: LIST
45855: PUSH
45856: LD_INT 2
45858: PUSH
45859: LD_INT 3
45861: PUSH
45862: EMPTY
45863: LIST
45864: LIST
45865: PUSH
45866: LD_INT 1
45868: PUSH
45869: LD_INT 3
45871: PUSH
45872: EMPTY
45873: LIST
45874: LIST
45875: PUSH
45876: LD_INT 1
45878: NEG
45879: PUSH
45880: LD_INT 2
45882: PUSH
45883: EMPTY
45884: LIST
45885: LIST
45886: PUSH
45887: LD_INT 2
45889: NEG
45890: PUSH
45891: LD_INT 1
45893: PUSH
45894: EMPTY
45895: LIST
45896: LIST
45897: PUSH
45898: EMPTY
45899: LIST
45900: LIST
45901: LIST
45902: LIST
45903: LIST
45904: LIST
45905: LIST
45906: LIST
45907: LIST
45908: LIST
45909: LIST
45910: LIST
45911: LIST
45912: LIST
45913: LIST
45914: LIST
45915: LIST
45916: LIST
45917: LIST
45918: LIST
45919: LIST
45920: LIST
45921: LIST
45922: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
45923: LD_ADDR_VAR 0 27
45927: PUSH
45928: LD_INT 0
45930: PUSH
45931: LD_INT 0
45933: PUSH
45934: EMPTY
45935: LIST
45936: LIST
45937: PUSH
45938: LD_INT 0
45940: PUSH
45941: LD_INT 1
45943: NEG
45944: PUSH
45945: EMPTY
45946: LIST
45947: LIST
45948: PUSH
45949: LD_INT 1
45951: PUSH
45952: LD_INT 0
45954: PUSH
45955: EMPTY
45956: LIST
45957: LIST
45958: PUSH
45959: LD_INT 1
45961: PUSH
45962: LD_INT 1
45964: PUSH
45965: EMPTY
45966: LIST
45967: LIST
45968: PUSH
45969: LD_INT 0
45971: PUSH
45972: LD_INT 1
45974: PUSH
45975: EMPTY
45976: LIST
45977: LIST
45978: PUSH
45979: LD_INT 1
45981: NEG
45982: PUSH
45983: LD_INT 0
45985: PUSH
45986: EMPTY
45987: LIST
45988: LIST
45989: PUSH
45990: LD_INT 1
45992: NEG
45993: PUSH
45994: LD_INT 1
45996: NEG
45997: PUSH
45998: EMPTY
45999: LIST
46000: LIST
46001: PUSH
46002: LD_INT 1
46004: NEG
46005: PUSH
46006: LD_INT 2
46008: NEG
46009: PUSH
46010: EMPTY
46011: LIST
46012: LIST
46013: PUSH
46014: LD_INT 0
46016: PUSH
46017: LD_INT 2
46019: NEG
46020: PUSH
46021: EMPTY
46022: LIST
46023: LIST
46024: PUSH
46025: LD_INT 1
46027: PUSH
46028: LD_INT 1
46030: NEG
46031: PUSH
46032: EMPTY
46033: LIST
46034: LIST
46035: PUSH
46036: LD_INT 2
46038: PUSH
46039: LD_INT 0
46041: PUSH
46042: EMPTY
46043: LIST
46044: LIST
46045: PUSH
46046: LD_INT 2
46048: PUSH
46049: LD_INT 1
46051: PUSH
46052: EMPTY
46053: LIST
46054: LIST
46055: PUSH
46056: LD_INT 2
46058: PUSH
46059: LD_INT 2
46061: PUSH
46062: EMPTY
46063: LIST
46064: LIST
46065: PUSH
46066: LD_INT 1
46068: PUSH
46069: LD_INT 2
46071: PUSH
46072: EMPTY
46073: LIST
46074: LIST
46075: PUSH
46076: LD_INT 0
46078: PUSH
46079: LD_INT 2
46081: PUSH
46082: EMPTY
46083: LIST
46084: LIST
46085: PUSH
46086: LD_INT 1
46088: NEG
46089: PUSH
46090: LD_INT 1
46092: PUSH
46093: EMPTY
46094: LIST
46095: LIST
46096: PUSH
46097: LD_INT 2
46099: NEG
46100: PUSH
46101: LD_INT 0
46103: PUSH
46104: EMPTY
46105: LIST
46106: LIST
46107: PUSH
46108: LD_INT 2
46110: NEG
46111: PUSH
46112: LD_INT 1
46114: NEG
46115: PUSH
46116: EMPTY
46117: LIST
46118: LIST
46119: PUSH
46120: LD_INT 2
46122: NEG
46123: PUSH
46124: LD_INT 2
46126: NEG
46127: PUSH
46128: EMPTY
46129: LIST
46130: LIST
46131: PUSH
46132: LD_INT 1
46134: NEG
46135: PUSH
46136: LD_INT 2
46138: PUSH
46139: EMPTY
46140: LIST
46141: LIST
46142: PUSH
46143: LD_INT 2
46145: NEG
46146: PUSH
46147: LD_INT 1
46149: PUSH
46150: EMPTY
46151: LIST
46152: LIST
46153: PUSH
46154: LD_INT 3
46156: NEG
46157: PUSH
46158: LD_INT 1
46160: NEG
46161: PUSH
46162: EMPTY
46163: LIST
46164: LIST
46165: PUSH
46166: LD_INT 3
46168: NEG
46169: PUSH
46170: LD_INT 2
46172: NEG
46173: PUSH
46174: EMPTY
46175: LIST
46176: LIST
46177: PUSH
46178: EMPTY
46179: LIST
46180: LIST
46181: LIST
46182: LIST
46183: LIST
46184: LIST
46185: LIST
46186: LIST
46187: LIST
46188: LIST
46189: LIST
46190: LIST
46191: LIST
46192: LIST
46193: LIST
46194: LIST
46195: LIST
46196: LIST
46197: LIST
46198: LIST
46199: LIST
46200: LIST
46201: LIST
46202: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
46203: LD_ADDR_VAR 0 28
46207: PUSH
46208: LD_INT 0
46210: PUSH
46211: LD_INT 0
46213: PUSH
46214: EMPTY
46215: LIST
46216: LIST
46217: PUSH
46218: LD_INT 0
46220: PUSH
46221: LD_INT 1
46223: NEG
46224: PUSH
46225: EMPTY
46226: LIST
46227: LIST
46228: PUSH
46229: LD_INT 1
46231: PUSH
46232: LD_INT 0
46234: PUSH
46235: EMPTY
46236: LIST
46237: LIST
46238: PUSH
46239: LD_INT 1
46241: PUSH
46242: LD_INT 1
46244: PUSH
46245: EMPTY
46246: LIST
46247: LIST
46248: PUSH
46249: LD_INT 0
46251: PUSH
46252: LD_INT 1
46254: PUSH
46255: EMPTY
46256: LIST
46257: LIST
46258: PUSH
46259: LD_INT 1
46261: NEG
46262: PUSH
46263: LD_INT 0
46265: PUSH
46266: EMPTY
46267: LIST
46268: LIST
46269: PUSH
46270: LD_INT 1
46272: NEG
46273: PUSH
46274: LD_INT 1
46276: NEG
46277: PUSH
46278: EMPTY
46279: LIST
46280: LIST
46281: PUSH
46282: LD_INT 1
46284: NEG
46285: PUSH
46286: LD_INT 2
46288: NEG
46289: PUSH
46290: EMPTY
46291: LIST
46292: LIST
46293: PUSH
46294: LD_INT 0
46296: PUSH
46297: LD_INT 2
46299: NEG
46300: PUSH
46301: EMPTY
46302: LIST
46303: LIST
46304: PUSH
46305: LD_INT 1
46307: PUSH
46308: LD_INT 1
46310: NEG
46311: PUSH
46312: EMPTY
46313: LIST
46314: LIST
46315: PUSH
46316: LD_INT 2
46318: PUSH
46319: LD_INT 0
46321: PUSH
46322: EMPTY
46323: LIST
46324: LIST
46325: PUSH
46326: LD_INT 2
46328: PUSH
46329: LD_INT 1
46331: PUSH
46332: EMPTY
46333: LIST
46334: LIST
46335: PUSH
46336: LD_INT 2
46338: PUSH
46339: LD_INT 2
46341: PUSH
46342: EMPTY
46343: LIST
46344: LIST
46345: PUSH
46346: LD_INT 1
46348: PUSH
46349: LD_INT 2
46351: PUSH
46352: EMPTY
46353: LIST
46354: LIST
46355: PUSH
46356: LD_INT 0
46358: PUSH
46359: LD_INT 2
46361: PUSH
46362: EMPTY
46363: LIST
46364: LIST
46365: PUSH
46366: LD_INT 1
46368: NEG
46369: PUSH
46370: LD_INT 1
46372: PUSH
46373: EMPTY
46374: LIST
46375: LIST
46376: PUSH
46377: LD_INT 2
46379: NEG
46380: PUSH
46381: LD_INT 0
46383: PUSH
46384: EMPTY
46385: LIST
46386: LIST
46387: PUSH
46388: LD_INT 2
46390: NEG
46391: PUSH
46392: LD_INT 1
46394: NEG
46395: PUSH
46396: EMPTY
46397: LIST
46398: LIST
46399: PUSH
46400: LD_INT 2
46402: NEG
46403: PUSH
46404: LD_INT 2
46406: NEG
46407: PUSH
46408: EMPTY
46409: LIST
46410: LIST
46411: PUSH
46412: LD_INT 2
46414: NEG
46415: PUSH
46416: LD_INT 3
46418: NEG
46419: PUSH
46420: EMPTY
46421: LIST
46422: LIST
46423: PUSH
46424: LD_INT 1
46426: NEG
46427: PUSH
46428: LD_INT 3
46430: NEG
46431: PUSH
46432: EMPTY
46433: LIST
46434: LIST
46435: PUSH
46436: LD_INT 3
46438: NEG
46439: PUSH
46440: LD_INT 1
46442: NEG
46443: PUSH
46444: EMPTY
46445: LIST
46446: LIST
46447: PUSH
46448: LD_INT 3
46450: NEG
46451: PUSH
46452: LD_INT 2
46454: NEG
46455: PUSH
46456: EMPTY
46457: LIST
46458: LIST
46459: PUSH
46460: EMPTY
46461: LIST
46462: LIST
46463: LIST
46464: LIST
46465: LIST
46466: LIST
46467: LIST
46468: LIST
46469: LIST
46470: LIST
46471: LIST
46472: LIST
46473: LIST
46474: LIST
46475: LIST
46476: LIST
46477: LIST
46478: LIST
46479: LIST
46480: LIST
46481: LIST
46482: LIST
46483: LIST
46484: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
46485: LD_ADDR_VAR 0 29
46489: PUSH
46490: LD_INT 0
46492: PUSH
46493: LD_INT 0
46495: PUSH
46496: EMPTY
46497: LIST
46498: LIST
46499: PUSH
46500: LD_INT 0
46502: PUSH
46503: LD_INT 1
46505: NEG
46506: PUSH
46507: EMPTY
46508: LIST
46509: LIST
46510: PUSH
46511: LD_INT 1
46513: PUSH
46514: LD_INT 0
46516: PUSH
46517: EMPTY
46518: LIST
46519: LIST
46520: PUSH
46521: LD_INT 1
46523: PUSH
46524: LD_INT 1
46526: PUSH
46527: EMPTY
46528: LIST
46529: LIST
46530: PUSH
46531: LD_INT 0
46533: PUSH
46534: LD_INT 1
46536: PUSH
46537: EMPTY
46538: LIST
46539: LIST
46540: PUSH
46541: LD_INT 1
46543: NEG
46544: PUSH
46545: LD_INT 0
46547: PUSH
46548: EMPTY
46549: LIST
46550: LIST
46551: PUSH
46552: LD_INT 1
46554: NEG
46555: PUSH
46556: LD_INT 1
46558: NEG
46559: PUSH
46560: EMPTY
46561: LIST
46562: LIST
46563: PUSH
46564: LD_INT 1
46566: NEG
46567: PUSH
46568: LD_INT 2
46570: NEG
46571: PUSH
46572: EMPTY
46573: LIST
46574: LIST
46575: PUSH
46576: LD_INT 0
46578: PUSH
46579: LD_INT 2
46581: NEG
46582: PUSH
46583: EMPTY
46584: LIST
46585: LIST
46586: PUSH
46587: LD_INT 1
46589: PUSH
46590: LD_INT 1
46592: NEG
46593: PUSH
46594: EMPTY
46595: LIST
46596: LIST
46597: PUSH
46598: LD_INT 2
46600: PUSH
46601: LD_INT 0
46603: PUSH
46604: EMPTY
46605: LIST
46606: LIST
46607: PUSH
46608: LD_INT 2
46610: PUSH
46611: LD_INT 1
46613: PUSH
46614: EMPTY
46615: LIST
46616: LIST
46617: PUSH
46618: LD_INT 1
46620: PUSH
46621: LD_INT 2
46623: PUSH
46624: EMPTY
46625: LIST
46626: LIST
46627: PUSH
46628: LD_INT 0
46630: PUSH
46631: LD_INT 2
46633: PUSH
46634: EMPTY
46635: LIST
46636: LIST
46637: PUSH
46638: LD_INT 1
46640: NEG
46641: PUSH
46642: LD_INT 1
46644: PUSH
46645: EMPTY
46646: LIST
46647: LIST
46648: PUSH
46649: LD_INT 2
46651: NEG
46652: PUSH
46653: LD_INT 1
46655: NEG
46656: PUSH
46657: EMPTY
46658: LIST
46659: LIST
46660: PUSH
46661: LD_INT 2
46663: NEG
46664: PUSH
46665: LD_INT 2
46667: NEG
46668: PUSH
46669: EMPTY
46670: LIST
46671: LIST
46672: PUSH
46673: LD_INT 2
46675: NEG
46676: PUSH
46677: LD_INT 3
46679: NEG
46680: PUSH
46681: EMPTY
46682: LIST
46683: LIST
46684: PUSH
46685: LD_INT 2
46687: PUSH
46688: LD_INT 1
46690: NEG
46691: PUSH
46692: EMPTY
46693: LIST
46694: LIST
46695: PUSH
46696: LD_INT 3
46698: PUSH
46699: LD_INT 1
46701: PUSH
46702: EMPTY
46703: LIST
46704: LIST
46705: PUSH
46706: LD_INT 1
46708: PUSH
46709: LD_INT 3
46711: PUSH
46712: EMPTY
46713: LIST
46714: LIST
46715: PUSH
46716: LD_INT 1
46718: NEG
46719: PUSH
46720: LD_INT 2
46722: PUSH
46723: EMPTY
46724: LIST
46725: LIST
46726: PUSH
46727: LD_INT 3
46729: NEG
46730: PUSH
46731: LD_INT 2
46733: NEG
46734: PUSH
46735: EMPTY
46736: LIST
46737: LIST
46738: PUSH
46739: EMPTY
46740: LIST
46741: LIST
46742: LIST
46743: LIST
46744: LIST
46745: LIST
46746: LIST
46747: LIST
46748: LIST
46749: LIST
46750: LIST
46751: LIST
46752: LIST
46753: LIST
46754: LIST
46755: LIST
46756: LIST
46757: LIST
46758: LIST
46759: LIST
46760: LIST
46761: LIST
46762: LIST
46763: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
46764: LD_ADDR_VAR 0 30
46768: PUSH
46769: LD_INT 0
46771: PUSH
46772: LD_INT 0
46774: PUSH
46775: EMPTY
46776: LIST
46777: LIST
46778: PUSH
46779: LD_INT 0
46781: PUSH
46782: LD_INT 1
46784: NEG
46785: PUSH
46786: EMPTY
46787: LIST
46788: LIST
46789: PUSH
46790: LD_INT 1
46792: PUSH
46793: LD_INT 0
46795: PUSH
46796: EMPTY
46797: LIST
46798: LIST
46799: PUSH
46800: LD_INT 1
46802: PUSH
46803: LD_INT 1
46805: PUSH
46806: EMPTY
46807: LIST
46808: LIST
46809: PUSH
46810: LD_INT 0
46812: PUSH
46813: LD_INT 1
46815: PUSH
46816: EMPTY
46817: LIST
46818: LIST
46819: PUSH
46820: LD_INT 1
46822: NEG
46823: PUSH
46824: LD_INT 0
46826: PUSH
46827: EMPTY
46828: LIST
46829: LIST
46830: PUSH
46831: LD_INT 1
46833: NEG
46834: PUSH
46835: LD_INT 1
46837: NEG
46838: PUSH
46839: EMPTY
46840: LIST
46841: LIST
46842: PUSH
46843: LD_INT 1
46845: NEG
46846: PUSH
46847: LD_INT 2
46849: NEG
46850: PUSH
46851: EMPTY
46852: LIST
46853: LIST
46854: PUSH
46855: LD_INT 0
46857: PUSH
46858: LD_INT 2
46860: NEG
46861: PUSH
46862: EMPTY
46863: LIST
46864: LIST
46865: PUSH
46866: LD_INT 1
46868: PUSH
46869: LD_INT 1
46871: NEG
46872: PUSH
46873: EMPTY
46874: LIST
46875: LIST
46876: PUSH
46877: LD_INT 2
46879: PUSH
46880: LD_INT 0
46882: PUSH
46883: EMPTY
46884: LIST
46885: LIST
46886: PUSH
46887: LD_INT 2
46889: PUSH
46890: LD_INT 1
46892: PUSH
46893: EMPTY
46894: LIST
46895: LIST
46896: PUSH
46897: LD_INT 2
46899: PUSH
46900: LD_INT 2
46902: PUSH
46903: EMPTY
46904: LIST
46905: LIST
46906: PUSH
46907: LD_INT 1
46909: PUSH
46910: LD_INT 2
46912: PUSH
46913: EMPTY
46914: LIST
46915: LIST
46916: PUSH
46917: LD_INT 1
46919: NEG
46920: PUSH
46921: LD_INT 1
46923: PUSH
46924: EMPTY
46925: LIST
46926: LIST
46927: PUSH
46928: LD_INT 2
46930: NEG
46931: PUSH
46932: LD_INT 0
46934: PUSH
46935: EMPTY
46936: LIST
46937: LIST
46938: PUSH
46939: LD_INT 2
46941: NEG
46942: PUSH
46943: LD_INT 1
46945: NEG
46946: PUSH
46947: EMPTY
46948: LIST
46949: LIST
46950: PUSH
46951: LD_INT 1
46953: NEG
46954: PUSH
46955: LD_INT 3
46957: NEG
46958: PUSH
46959: EMPTY
46960: LIST
46961: LIST
46962: PUSH
46963: LD_INT 1
46965: PUSH
46966: LD_INT 2
46968: NEG
46969: PUSH
46970: EMPTY
46971: LIST
46972: LIST
46973: PUSH
46974: LD_INT 3
46976: PUSH
46977: LD_INT 2
46979: PUSH
46980: EMPTY
46981: LIST
46982: LIST
46983: PUSH
46984: LD_INT 2
46986: PUSH
46987: LD_INT 3
46989: PUSH
46990: EMPTY
46991: LIST
46992: LIST
46993: PUSH
46994: LD_INT 2
46996: NEG
46997: PUSH
46998: LD_INT 1
47000: PUSH
47001: EMPTY
47002: LIST
47003: LIST
47004: PUSH
47005: LD_INT 3
47007: NEG
47008: PUSH
47009: LD_INT 1
47011: NEG
47012: PUSH
47013: EMPTY
47014: LIST
47015: LIST
47016: PUSH
47017: EMPTY
47018: LIST
47019: LIST
47020: LIST
47021: LIST
47022: LIST
47023: LIST
47024: LIST
47025: LIST
47026: LIST
47027: LIST
47028: LIST
47029: LIST
47030: LIST
47031: LIST
47032: LIST
47033: LIST
47034: LIST
47035: LIST
47036: LIST
47037: LIST
47038: LIST
47039: LIST
47040: LIST
47041: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
47042: LD_ADDR_VAR 0 31
47046: PUSH
47047: LD_INT 0
47049: PUSH
47050: LD_INT 0
47052: PUSH
47053: EMPTY
47054: LIST
47055: LIST
47056: PUSH
47057: LD_INT 0
47059: PUSH
47060: LD_INT 1
47062: NEG
47063: PUSH
47064: EMPTY
47065: LIST
47066: LIST
47067: PUSH
47068: LD_INT 1
47070: PUSH
47071: LD_INT 0
47073: PUSH
47074: EMPTY
47075: LIST
47076: LIST
47077: PUSH
47078: LD_INT 1
47080: PUSH
47081: LD_INT 1
47083: PUSH
47084: EMPTY
47085: LIST
47086: LIST
47087: PUSH
47088: LD_INT 0
47090: PUSH
47091: LD_INT 1
47093: PUSH
47094: EMPTY
47095: LIST
47096: LIST
47097: PUSH
47098: LD_INT 1
47100: NEG
47101: PUSH
47102: LD_INT 0
47104: PUSH
47105: EMPTY
47106: LIST
47107: LIST
47108: PUSH
47109: LD_INT 1
47111: NEG
47112: PUSH
47113: LD_INT 1
47115: NEG
47116: PUSH
47117: EMPTY
47118: LIST
47119: LIST
47120: PUSH
47121: LD_INT 1
47123: NEG
47124: PUSH
47125: LD_INT 2
47127: NEG
47128: PUSH
47129: EMPTY
47130: LIST
47131: LIST
47132: PUSH
47133: LD_INT 1
47135: PUSH
47136: LD_INT 1
47138: NEG
47139: PUSH
47140: EMPTY
47141: LIST
47142: LIST
47143: PUSH
47144: LD_INT 2
47146: PUSH
47147: LD_INT 0
47149: PUSH
47150: EMPTY
47151: LIST
47152: LIST
47153: PUSH
47154: LD_INT 2
47156: PUSH
47157: LD_INT 1
47159: PUSH
47160: EMPTY
47161: LIST
47162: LIST
47163: PUSH
47164: LD_INT 2
47166: PUSH
47167: LD_INT 2
47169: PUSH
47170: EMPTY
47171: LIST
47172: LIST
47173: PUSH
47174: LD_INT 1
47176: PUSH
47177: LD_INT 2
47179: PUSH
47180: EMPTY
47181: LIST
47182: LIST
47183: PUSH
47184: LD_INT 0
47186: PUSH
47187: LD_INT 2
47189: PUSH
47190: EMPTY
47191: LIST
47192: LIST
47193: PUSH
47194: LD_INT 1
47196: NEG
47197: PUSH
47198: LD_INT 1
47200: PUSH
47201: EMPTY
47202: LIST
47203: LIST
47204: PUSH
47205: LD_INT 2
47207: NEG
47208: PUSH
47209: LD_INT 1
47211: NEG
47212: PUSH
47213: EMPTY
47214: LIST
47215: LIST
47216: PUSH
47217: LD_INT 2
47219: NEG
47220: PUSH
47221: LD_INT 2
47223: NEG
47224: PUSH
47225: EMPTY
47226: LIST
47227: LIST
47228: PUSH
47229: LD_INT 2
47231: NEG
47232: PUSH
47233: LD_INT 3
47235: NEG
47236: PUSH
47237: EMPTY
47238: LIST
47239: LIST
47240: PUSH
47241: LD_INT 2
47243: PUSH
47244: LD_INT 1
47246: NEG
47247: PUSH
47248: EMPTY
47249: LIST
47250: LIST
47251: PUSH
47252: LD_INT 3
47254: PUSH
47255: LD_INT 1
47257: PUSH
47258: EMPTY
47259: LIST
47260: LIST
47261: PUSH
47262: LD_INT 1
47264: PUSH
47265: LD_INT 3
47267: PUSH
47268: EMPTY
47269: LIST
47270: LIST
47271: PUSH
47272: LD_INT 1
47274: NEG
47275: PUSH
47276: LD_INT 2
47278: PUSH
47279: EMPTY
47280: LIST
47281: LIST
47282: PUSH
47283: LD_INT 3
47285: NEG
47286: PUSH
47287: LD_INT 2
47289: NEG
47290: PUSH
47291: EMPTY
47292: LIST
47293: LIST
47294: PUSH
47295: EMPTY
47296: LIST
47297: LIST
47298: LIST
47299: LIST
47300: LIST
47301: LIST
47302: LIST
47303: LIST
47304: LIST
47305: LIST
47306: LIST
47307: LIST
47308: LIST
47309: LIST
47310: LIST
47311: LIST
47312: LIST
47313: LIST
47314: LIST
47315: LIST
47316: LIST
47317: LIST
47318: LIST
47319: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
47320: LD_ADDR_VAR 0 32
47324: PUSH
47325: LD_INT 0
47327: PUSH
47328: LD_INT 0
47330: PUSH
47331: EMPTY
47332: LIST
47333: LIST
47334: PUSH
47335: LD_INT 0
47337: PUSH
47338: LD_INT 1
47340: NEG
47341: PUSH
47342: EMPTY
47343: LIST
47344: LIST
47345: PUSH
47346: LD_INT 1
47348: PUSH
47349: LD_INT 0
47351: PUSH
47352: EMPTY
47353: LIST
47354: LIST
47355: PUSH
47356: LD_INT 1
47358: PUSH
47359: LD_INT 1
47361: PUSH
47362: EMPTY
47363: LIST
47364: LIST
47365: PUSH
47366: LD_INT 0
47368: PUSH
47369: LD_INT 1
47371: PUSH
47372: EMPTY
47373: LIST
47374: LIST
47375: PUSH
47376: LD_INT 1
47378: NEG
47379: PUSH
47380: LD_INT 0
47382: PUSH
47383: EMPTY
47384: LIST
47385: LIST
47386: PUSH
47387: LD_INT 1
47389: NEG
47390: PUSH
47391: LD_INT 1
47393: NEG
47394: PUSH
47395: EMPTY
47396: LIST
47397: LIST
47398: PUSH
47399: LD_INT 1
47401: NEG
47402: PUSH
47403: LD_INT 2
47405: NEG
47406: PUSH
47407: EMPTY
47408: LIST
47409: LIST
47410: PUSH
47411: LD_INT 0
47413: PUSH
47414: LD_INT 2
47416: NEG
47417: PUSH
47418: EMPTY
47419: LIST
47420: LIST
47421: PUSH
47422: LD_INT 1
47424: PUSH
47425: LD_INT 1
47427: NEG
47428: PUSH
47429: EMPTY
47430: LIST
47431: LIST
47432: PUSH
47433: LD_INT 2
47435: PUSH
47436: LD_INT 1
47438: PUSH
47439: EMPTY
47440: LIST
47441: LIST
47442: PUSH
47443: LD_INT 2
47445: PUSH
47446: LD_INT 2
47448: PUSH
47449: EMPTY
47450: LIST
47451: LIST
47452: PUSH
47453: LD_INT 1
47455: PUSH
47456: LD_INT 2
47458: PUSH
47459: EMPTY
47460: LIST
47461: LIST
47462: PUSH
47463: LD_INT 0
47465: PUSH
47466: LD_INT 2
47468: PUSH
47469: EMPTY
47470: LIST
47471: LIST
47472: PUSH
47473: LD_INT 1
47475: NEG
47476: PUSH
47477: LD_INT 1
47479: PUSH
47480: EMPTY
47481: LIST
47482: LIST
47483: PUSH
47484: LD_INT 2
47486: NEG
47487: PUSH
47488: LD_INT 0
47490: PUSH
47491: EMPTY
47492: LIST
47493: LIST
47494: PUSH
47495: LD_INT 2
47497: NEG
47498: PUSH
47499: LD_INT 1
47501: NEG
47502: PUSH
47503: EMPTY
47504: LIST
47505: LIST
47506: PUSH
47507: LD_INT 1
47509: NEG
47510: PUSH
47511: LD_INT 3
47513: NEG
47514: PUSH
47515: EMPTY
47516: LIST
47517: LIST
47518: PUSH
47519: LD_INT 1
47521: PUSH
47522: LD_INT 2
47524: NEG
47525: PUSH
47526: EMPTY
47527: LIST
47528: LIST
47529: PUSH
47530: LD_INT 3
47532: PUSH
47533: LD_INT 2
47535: PUSH
47536: EMPTY
47537: LIST
47538: LIST
47539: PUSH
47540: LD_INT 2
47542: PUSH
47543: LD_INT 3
47545: PUSH
47546: EMPTY
47547: LIST
47548: LIST
47549: PUSH
47550: LD_INT 2
47552: NEG
47553: PUSH
47554: LD_INT 1
47556: PUSH
47557: EMPTY
47558: LIST
47559: LIST
47560: PUSH
47561: LD_INT 3
47563: NEG
47564: PUSH
47565: LD_INT 1
47567: NEG
47568: PUSH
47569: EMPTY
47570: LIST
47571: LIST
47572: PUSH
47573: EMPTY
47574: LIST
47575: LIST
47576: LIST
47577: LIST
47578: LIST
47579: LIST
47580: LIST
47581: LIST
47582: LIST
47583: LIST
47584: LIST
47585: LIST
47586: LIST
47587: LIST
47588: LIST
47589: LIST
47590: LIST
47591: LIST
47592: LIST
47593: LIST
47594: LIST
47595: LIST
47596: LIST
47597: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
47598: LD_ADDR_VAR 0 33
47602: PUSH
47603: LD_INT 0
47605: PUSH
47606: LD_INT 0
47608: PUSH
47609: EMPTY
47610: LIST
47611: LIST
47612: PUSH
47613: LD_INT 0
47615: PUSH
47616: LD_INT 1
47618: NEG
47619: PUSH
47620: EMPTY
47621: LIST
47622: LIST
47623: PUSH
47624: LD_INT 1
47626: PUSH
47627: LD_INT 0
47629: PUSH
47630: EMPTY
47631: LIST
47632: LIST
47633: PUSH
47634: LD_INT 1
47636: PUSH
47637: LD_INT 1
47639: PUSH
47640: EMPTY
47641: LIST
47642: LIST
47643: PUSH
47644: LD_INT 0
47646: PUSH
47647: LD_INT 1
47649: PUSH
47650: EMPTY
47651: LIST
47652: LIST
47653: PUSH
47654: LD_INT 1
47656: NEG
47657: PUSH
47658: LD_INT 0
47660: PUSH
47661: EMPTY
47662: LIST
47663: LIST
47664: PUSH
47665: LD_INT 1
47667: NEG
47668: PUSH
47669: LD_INT 1
47671: NEG
47672: PUSH
47673: EMPTY
47674: LIST
47675: LIST
47676: PUSH
47677: LD_INT 1
47679: NEG
47680: PUSH
47681: LD_INT 2
47683: NEG
47684: PUSH
47685: EMPTY
47686: LIST
47687: LIST
47688: PUSH
47689: LD_INT 1
47691: PUSH
47692: LD_INT 1
47694: NEG
47695: PUSH
47696: EMPTY
47697: LIST
47698: LIST
47699: PUSH
47700: LD_INT 2
47702: PUSH
47703: LD_INT 0
47705: PUSH
47706: EMPTY
47707: LIST
47708: LIST
47709: PUSH
47710: LD_INT 2
47712: PUSH
47713: LD_INT 1
47715: PUSH
47716: EMPTY
47717: LIST
47718: LIST
47719: PUSH
47720: LD_INT 1
47722: PUSH
47723: LD_INT 2
47725: PUSH
47726: EMPTY
47727: LIST
47728: LIST
47729: PUSH
47730: LD_INT 0
47732: PUSH
47733: LD_INT 2
47735: PUSH
47736: EMPTY
47737: LIST
47738: LIST
47739: PUSH
47740: LD_INT 1
47742: NEG
47743: PUSH
47744: LD_INT 1
47746: PUSH
47747: EMPTY
47748: LIST
47749: LIST
47750: PUSH
47751: LD_INT 2
47753: NEG
47754: PUSH
47755: LD_INT 0
47757: PUSH
47758: EMPTY
47759: LIST
47760: LIST
47761: PUSH
47762: LD_INT 2
47764: NEG
47765: PUSH
47766: LD_INT 1
47768: NEG
47769: PUSH
47770: EMPTY
47771: LIST
47772: LIST
47773: PUSH
47774: LD_INT 2
47776: NEG
47777: PUSH
47778: LD_INT 2
47780: NEG
47781: PUSH
47782: EMPTY
47783: LIST
47784: LIST
47785: PUSH
47786: LD_INT 2
47788: NEG
47789: PUSH
47790: LD_INT 3
47792: NEG
47793: PUSH
47794: EMPTY
47795: LIST
47796: LIST
47797: PUSH
47798: LD_INT 2
47800: PUSH
47801: LD_INT 1
47803: NEG
47804: PUSH
47805: EMPTY
47806: LIST
47807: LIST
47808: PUSH
47809: LD_INT 3
47811: PUSH
47812: LD_INT 1
47814: PUSH
47815: EMPTY
47816: LIST
47817: LIST
47818: PUSH
47819: LD_INT 1
47821: PUSH
47822: LD_INT 3
47824: PUSH
47825: EMPTY
47826: LIST
47827: LIST
47828: PUSH
47829: LD_INT 1
47831: NEG
47832: PUSH
47833: LD_INT 2
47835: PUSH
47836: EMPTY
47837: LIST
47838: LIST
47839: PUSH
47840: LD_INT 3
47842: NEG
47843: PUSH
47844: LD_INT 2
47846: NEG
47847: PUSH
47848: EMPTY
47849: LIST
47850: LIST
47851: PUSH
47852: EMPTY
47853: LIST
47854: LIST
47855: LIST
47856: LIST
47857: LIST
47858: LIST
47859: LIST
47860: LIST
47861: LIST
47862: LIST
47863: LIST
47864: LIST
47865: LIST
47866: LIST
47867: LIST
47868: LIST
47869: LIST
47870: LIST
47871: LIST
47872: LIST
47873: LIST
47874: LIST
47875: LIST
47876: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
47877: LD_ADDR_VAR 0 34
47881: PUSH
47882: LD_INT 0
47884: PUSH
47885: LD_INT 0
47887: PUSH
47888: EMPTY
47889: LIST
47890: LIST
47891: PUSH
47892: LD_INT 0
47894: PUSH
47895: LD_INT 1
47897: NEG
47898: PUSH
47899: EMPTY
47900: LIST
47901: LIST
47902: PUSH
47903: LD_INT 1
47905: PUSH
47906: LD_INT 0
47908: PUSH
47909: EMPTY
47910: LIST
47911: LIST
47912: PUSH
47913: LD_INT 1
47915: PUSH
47916: LD_INT 1
47918: PUSH
47919: EMPTY
47920: LIST
47921: LIST
47922: PUSH
47923: LD_INT 0
47925: PUSH
47926: LD_INT 1
47928: PUSH
47929: EMPTY
47930: LIST
47931: LIST
47932: PUSH
47933: LD_INT 1
47935: NEG
47936: PUSH
47937: LD_INT 0
47939: PUSH
47940: EMPTY
47941: LIST
47942: LIST
47943: PUSH
47944: LD_INT 1
47946: NEG
47947: PUSH
47948: LD_INT 1
47950: NEG
47951: PUSH
47952: EMPTY
47953: LIST
47954: LIST
47955: PUSH
47956: LD_INT 1
47958: NEG
47959: PUSH
47960: LD_INT 2
47962: NEG
47963: PUSH
47964: EMPTY
47965: LIST
47966: LIST
47967: PUSH
47968: LD_INT 0
47970: PUSH
47971: LD_INT 2
47973: NEG
47974: PUSH
47975: EMPTY
47976: LIST
47977: LIST
47978: PUSH
47979: LD_INT 1
47981: PUSH
47982: LD_INT 1
47984: NEG
47985: PUSH
47986: EMPTY
47987: LIST
47988: LIST
47989: PUSH
47990: LD_INT 2
47992: PUSH
47993: LD_INT 1
47995: PUSH
47996: EMPTY
47997: LIST
47998: LIST
47999: PUSH
48000: LD_INT 2
48002: PUSH
48003: LD_INT 2
48005: PUSH
48006: EMPTY
48007: LIST
48008: LIST
48009: PUSH
48010: LD_INT 1
48012: PUSH
48013: LD_INT 2
48015: PUSH
48016: EMPTY
48017: LIST
48018: LIST
48019: PUSH
48020: LD_INT 1
48022: NEG
48023: PUSH
48024: LD_INT 1
48026: PUSH
48027: EMPTY
48028: LIST
48029: LIST
48030: PUSH
48031: LD_INT 2
48033: NEG
48034: PUSH
48035: LD_INT 0
48037: PUSH
48038: EMPTY
48039: LIST
48040: LIST
48041: PUSH
48042: LD_INT 2
48044: NEG
48045: PUSH
48046: LD_INT 1
48048: NEG
48049: PUSH
48050: EMPTY
48051: LIST
48052: LIST
48053: PUSH
48054: LD_INT 2
48056: NEG
48057: PUSH
48058: LD_INT 2
48060: NEG
48061: PUSH
48062: EMPTY
48063: LIST
48064: LIST
48065: PUSH
48066: LD_INT 1
48068: NEG
48069: PUSH
48070: LD_INT 3
48072: NEG
48073: PUSH
48074: EMPTY
48075: LIST
48076: LIST
48077: PUSH
48078: LD_INT 1
48080: PUSH
48081: LD_INT 2
48083: NEG
48084: PUSH
48085: EMPTY
48086: LIST
48087: LIST
48088: PUSH
48089: LD_INT 3
48091: PUSH
48092: LD_INT 2
48094: PUSH
48095: EMPTY
48096: LIST
48097: LIST
48098: PUSH
48099: LD_INT 2
48101: PUSH
48102: LD_INT 3
48104: PUSH
48105: EMPTY
48106: LIST
48107: LIST
48108: PUSH
48109: LD_INT 2
48111: NEG
48112: PUSH
48113: LD_INT 1
48115: PUSH
48116: EMPTY
48117: LIST
48118: LIST
48119: PUSH
48120: LD_INT 3
48122: NEG
48123: PUSH
48124: LD_INT 1
48126: NEG
48127: PUSH
48128: EMPTY
48129: LIST
48130: LIST
48131: PUSH
48132: EMPTY
48133: LIST
48134: LIST
48135: LIST
48136: LIST
48137: LIST
48138: LIST
48139: LIST
48140: LIST
48141: LIST
48142: LIST
48143: LIST
48144: LIST
48145: LIST
48146: LIST
48147: LIST
48148: LIST
48149: LIST
48150: LIST
48151: LIST
48152: LIST
48153: LIST
48154: LIST
48155: LIST
48156: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
48157: LD_ADDR_VAR 0 35
48161: PUSH
48162: LD_INT 0
48164: PUSH
48165: LD_INT 0
48167: PUSH
48168: EMPTY
48169: LIST
48170: LIST
48171: PUSH
48172: LD_INT 0
48174: PUSH
48175: LD_INT 1
48177: NEG
48178: PUSH
48179: EMPTY
48180: LIST
48181: LIST
48182: PUSH
48183: LD_INT 1
48185: PUSH
48186: LD_INT 0
48188: PUSH
48189: EMPTY
48190: LIST
48191: LIST
48192: PUSH
48193: LD_INT 1
48195: PUSH
48196: LD_INT 1
48198: PUSH
48199: EMPTY
48200: LIST
48201: LIST
48202: PUSH
48203: LD_INT 0
48205: PUSH
48206: LD_INT 1
48208: PUSH
48209: EMPTY
48210: LIST
48211: LIST
48212: PUSH
48213: LD_INT 1
48215: NEG
48216: PUSH
48217: LD_INT 0
48219: PUSH
48220: EMPTY
48221: LIST
48222: LIST
48223: PUSH
48224: LD_INT 1
48226: NEG
48227: PUSH
48228: LD_INT 1
48230: NEG
48231: PUSH
48232: EMPTY
48233: LIST
48234: LIST
48235: PUSH
48236: LD_INT 2
48238: PUSH
48239: LD_INT 1
48241: PUSH
48242: EMPTY
48243: LIST
48244: LIST
48245: PUSH
48246: LD_INT 2
48248: NEG
48249: PUSH
48250: LD_INT 1
48252: NEG
48253: PUSH
48254: EMPTY
48255: LIST
48256: LIST
48257: PUSH
48258: EMPTY
48259: LIST
48260: LIST
48261: LIST
48262: LIST
48263: LIST
48264: LIST
48265: LIST
48266: LIST
48267: LIST
48268: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
48269: LD_ADDR_VAR 0 36
48273: PUSH
48274: LD_INT 0
48276: PUSH
48277: LD_INT 0
48279: PUSH
48280: EMPTY
48281: LIST
48282: LIST
48283: PUSH
48284: LD_INT 0
48286: PUSH
48287: LD_INT 1
48289: NEG
48290: PUSH
48291: EMPTY
48292: LIST
48293: LIST
48294: PUSH
48295: LD_INT 1
48297: PUSH
48298: LD_INT 0
48300: PUSH
48301: EMPTY
48302: LIST
48303: LIST
48304: PUSH
48305: LD_INT 1
48307: PUSH
48308: LD_INT 1
48310: PUSH
48311: EMPTY
48312: LIST
48313: LIST
48314: PUSH
48315: LD_INT 0
48317: PUSH
48318: LD_INT 1
48320: PUSH
48321: EMPTY
48322: LIST
48323: LIST
48324: PUSH
48325: LD_INT 1
48327: NEG
48328: PUSH
48329: LD_INT 0
48331: PUSH
48332: EMPTY
48333: LIST
48334: LIST
48335: PUSH
48336: LD_INT 1
48338: NEG
48339: PUSH
48340: LD_INT 1
48342: NEG
48343: PUSH
48344: EMPTY
48345: LIST
48346: LIST
48347: PUSH
48348: LD_INT 1
48350: NEG
48351: PUSH
48352: LD_INT 2
48354: NEG
48355: PUSH
48356: EMPTY
48357: LIST
48358: LIST
48359: PUSH
48360: LD_INT 1
48362: PUSH
48363: LD_INT 2
48365: PUSH
48366: EMPTY
48367: LIST
48368: LIST
48369: PUSH
48370: EMPTY
48371: LIST
48372: LIST
48373: LIST
48374: LIST
48375: LIST
48376: LIST
48377: LIST
48378: LIST
48379: LIST
48380: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
48381: LD_ADDR_VAR 0 37
48385: PUSH
48386: LD_INT 0
48388: PUSH
48389: LD_INT 0
48391: PUSH
48392: EMPTY
48393: LIST
48394: LIST
48395: PUSH
48396: LD_INT 0
48398: PUSH
48399: LD_INT 1
48401: NEG
48402: PUSH
48403: EMPTY
48404: LIST
48405: LIST
48406: PUSH
48407: LD_INT 1
48409: PUSH
48410: LD_INT 0
48412: PUSH
48413: EMPTY
48414: LIST
48415: LIST
48416: PUSH
48417: LD_INT 1
48419: PUSH
48420: LD_INT 1
48422: PUSH
48423: EMPTY
48424: LIST
48425: LIST
48426: PUSH
48427: LD_INT 0
48429: PUSH
48430: LD_INT 1
48432: PUSH
48433: EMPTY
48434: LIST
48435: LIST
48436: PUSH
48437: LD_INT 1
48439: NEG
48440: PUSH
48441: LD_INT 0
48443: PUSH
48444: EMPTY
48445: LIST
48446: LIST
48447: PUSH
48448: LD_INT 1
48450: NEG
48451: PUSH
48452: LD_INT 1
48454: NEG
48455: PUSH
48456: EMPTY
48457: LIST
48458: LIST
48459: PUSH
48460: LD_INT 1
48462: PUSH
48463: LD_INT 1
48465: NEG
48466: PUSH
48467: EMPTY
48468: LIST
48469: LIST
48470: PUSH
48471: LD_INT 1
48473: NEG
48474: PUSH
48475: LD_INT 1
48477: PUSH
48478: EMPTY
48479: LIST
48480: LIST
48481: PUSH
48482: EMPTY
48483: LIST
48484: LIST
48485: LIST
48486: LIST
48487: LIST
48488: LIST
48489: LIST
48490: LIST
48491: LIST
48492: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
48493: LD_ADDR_VAR 0 38
48497: PUSH
48498: LD_INT 0
48500: PUSH
48501: LD_INT 0
48503: PUSH
48504: EMPTY
48505: LIST
48506: LIST
48507: PUSH
48508: LD_INT 0
48510: PUSH
48511: LD_INT 1
48513: NEG
48514: PUSH
48515: EMPTY
48516: LIST
48517: LIST
48518: PUSH
48519: LD_INT 1
48521: PUSH
48522: LD_INT 0
48524: PUSH
48525: EMPTY
48526: LIST
48527: LIST
48528: PUSH
48529: LD_INT 1
48531: PUSH
48532: LD_INT 1
48534: PUSH
48535: EMPTY
48536: LIST
48537: LIST
48538: PUSH
48539: LD_INT 0
48541: PUSH
48542: LD_INT 1
48544: PUSH
48545: EMPTY
48546: LIST
48547: LIST
48548: PUSH
48549: LD_INT 1
48551: NEG
48552: PUSH
48553: LD_INT 0
48555: PUSH
48556: EMPTY
48557: LIST
48558: LIST
48559: PUSH
48560: LD_INT 1
48562: NEG
48563: PUSH
48564: LD_INT 1
48566: NEG
48567: PUSH
48568: EMPTY
48569: LIST
48570: LIST
48571: PUSH
48572: LD_INT 2
48574: PUSH
48575: LD_INT 1
48577: PUSH
48578: EMPTY
48579: LIST
48580: LIST
48581: PUSH
48582: LD_INT 2
48584: NEG
48585: PUSH
48586: LD_INT 1
48588: NEG
48589: PUSH
48590: EMPTY
48591: LIST
48592: LIST
48593: PUSH
48594: EMPTY
48595: LIST
48596: LIST
48597: LIST
48598: LIST
48599: LIST
48600: LIST
48601: LIST
48602: LIST
48603: LIST
48604: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
48605: LD_ADDR_VAR 0 39
48609: PUSH
48610: LD_INT 0
48612: PUSH
48613: LD_INT 0
48615: PUSH
48616: EMPTY
48617: LIST
48618: LIST
48619: PUSH
48620: LD_INT 0
48622: PUSH
48623: LD_INT 1
48625: NEG
48626: PUSH
48627: EMPTY
48628: LIST
48629: LIST
48630: PUSH
48631: LD_INT 1
48633: PUSH
48634: LD_INT 0
48636: PUSH
48637: EMPTY
48638: LIST
48639: LIST
48640: PUSH
48641: LD_INT 1
48643: PUSH
48644: LD_INT 1
48646: PUSH
48647: EMPTY
48648: LIST
48649: LIST
48650: PUSH
48651: LD_INT 0
48653: PUSH
48654: LD_INT 1
48656: PUSH
48657: EMPTY
48658: LIST
48659: LIST
48660: PUSH
48661: LD_INT 1
48663: NEG
48664: PUSH
48665: LD_INT 0
48667: PUSH
48668: EMPTY
48669: LIST
48670: LIST
48671: PUSH
48672: LD_INT 1
48674: NEG
48675: PUSH
48676: LD_INT 1
48678: NEG
48679: PUSH
48680: EMPTY
48681: LIST
48682: LIST
48683: PUSH
48684: LD_INT 1
48686: NEG
48687: PUSH
48688: LD_INT 2
48690: NEG
48691: PUSH
48692: EMPTY
48693: LIST
48694: LIST
48695: PUSH
48696: LD_INT 1
48698: PUSH
48699: LD_INT 2
48701: PUSH
48702: EMPTY
48703: LIST
48704: LIST
48705: PUSH
48706: EMPTY
48707: LIST
48708: LIST
48709: LIST
48710: LIST
48711: LIST
48712: LIST
48713: LIST
48714: LIST
48715: LIST
48716: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
48717: LD_ADDR_VAR 0 40
48721: PUSH
48722: LD_INT 0
48724: PUSH
48725: LD_INT 0
48727: PUSH
48728: EMPTY
48729: LIST
48730: LIST
48731: PUSH
48732: LD_INT 0
48734: PUSH
48735: LD_INT 1
48737: NEG
48738: PUSH
48739: EMPTY
48740: LIST
48741: LIST
48742: PUSH
48743: LD_INT 1
48745: PUSH
48746: LD_INT 0
48748: PUSH
48749: EMPTY
48750: LIST
48751: LIST
48752: PUSH
48753: LD_INT 1
48755: PUSH
48756: LD_INT 1
48758: PUSH
48759: EMPTY
48760: LIST
48761: LIST
48762: PUSH
48763: LD_INT 0
48765: PUSH
48766: LD_INT 1
48768: PUSH
48769: EMPTY
48770: LIST
48771: LIST
48772: PUSH
48773: LD_INT 1
48775: NEG
48776: PUSH
48777: LD_INT 0
48779: PUSH
48780: EMPTY
48781: LIST
48782: LIST
48783: PUSH
48784: LD_INT 1
48786: NEG
48787: PUSH
48788: LD_INT 1
48790: NEG
48791: PUSH
48792: EMPTY
48793: LIST
48794: LIST
48795: PUSH
48796: LD_INT 1
48798: PUSH
48799: LD_INT 1
48801: NEG
48802: PUSH
48803: EMPTY
48804: LIST
48805: LIST
48806: PUSH
48807: LD_INT 1
48809: NEG
48810: PUSH
48811: LD_INT 1
48813: PUSH
48814: EMPTY
48815: LIST
48816: LIST
48817: PUSH
48818: EMPTY
48819: LIST
48820: LIST
48821: LIST
48822: LIST
48823: LIST
48824: LIST
48825: LIST
48826: LIST
48827: LIST
48828: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48829: LD_ADDR_VAR 0 41
48833: PUSH
48834: LD_INT 0
48836: PUSH
48837: LD_INT 0
48839: PUSH
48840: EMPTY
48841: LIST
48842: LIST
48843: PUSH
48844: LD_INT 0
48846: PUSH
48847: LD_INT 1
48849: NEG
48850: PUSH
48851: EMPTY
48852: LIST
48853: LIST
48854: PUSH
48855: LD_INT 1
48857: PUSH
48858: LD_INT 0
48860: PUSH
48861: EMPTY
48862: LIST
48863: LIST
48864: PUSH
48865: LD_INT 1
48867: PUSH
48868: LD_INT 1
48870: PUSH
48871: EMPTY
48872: LIST
48873: LIST
48874: PUSH
48875: LD_INT 0
48877: PUSH
48878: LD_INT 1
48880: PUSH
48881: EMPTY
48882: LIST
48883: LIST
48884: PUSH
48885: LD_INT 1
48887: NEG
48888: PUSH
48889: LD_INT 0
48891: PUSH
48892: EMPTY
48893: LIST
48894: LIST
48895: PUSH
48896: LD_INT 1
48898: NEG
48899: PUSH
48900: LD_INT 1
48902: NEG
48903: PUSH
48904: EMPTY
48905: LIST
48906: LIST
48907: PUSH
48908: LD_INT 1
48910: NEG
48911: PUSH
48912: LD_INT 2
48914: NEG
48915: PUSH
48916: EMPTY
48917: LIST
48918: LIST
48919: PUSH
48920: LD_INT 1
48922: PUSH
48923: LD_INT 1
48925: NEG
48926: PUSH
48927: EMPTY
48928: LIST
48929: LIST
48930: PUSH
48931: LD_INT 2
48933: PUSH
48934: LD_INT 0
48936: PUSH
48937: EMPTY
48938: LIST
48939: LIST
48940: PUSH
48941: LD_INT 2
48943: PUSH
48944: LD_INT 1
48946: PUSH
48947: EMPTY
48948: LIST
48949: LIST
48950: PUSH
48951: LD_INT 2
48953: PUSH
48954: LD_INT 2
48956: PUSH
48957: EMPTY
48958: LIST
48959: LIST
48960: PUSH
48961: LD_INT 1
48963: PUSH
48964: LD_INT 2
48966: PUSH
48967: EMPTY
48968: LIST
48969: LIST
48970: PUSH
48971: LD_INT 1
48973: NEG
48974: PUSH
48975: LD_INT 1
48977: PUSH
48978: EMPTY
48979: LIST
48980: LIST
48981: PUSH
48982: LD_INT 2
48984: NEG
48985: PUSH
48986: LD_INT 0
48988: PUSH
48989: EMPTY
48990: LIST
48991: LIST
48992: PUSH
48993: LD_INT 2
48995: NEG
48996: PUSH
48997: LD_INT 1
48999: NEG
49000: PUSH
49001: EMPTY
49002: LIST
49003: LIST
49004: PUSH
49005: LD_INT 2
49007: NEG
49008: PUSH
49009: LD_INT 2
49011: NEG
49012: PUSH
49013: EMPTY
49014: LIST
49015: LIST
49016: PUSH
49017: LD_INT 2
49019: NEG
49020: PUSH
49021: LD_INT 3
49023: NEG
49024: PUSH
49025: EMPTY
49026: LIST
49027: LIST
49028: PUSH
49029: LD_INT 2
49031: PUSH
49032: LD_INT 1
49034: NEG
49035: PUSH
49036: EMPTY
49037: LIST
49038: LIST
49039: PUSH
49040: LD_INT 3
49042: PUSH
49043: LD_INT 0
49045: PUSH
49046: EMPTY
49047: LIST
49048: LIST
49049: PUSH
49050: LD_INT 3
49052: PUSH
49053: LD_INT 1
49055: PUSH
49056: EMPTY
49057: LIST
49058: LIST
49059: PUSH
49060: LD_INT 3
49062: PUSH
49063: LD_INT 2
49065: PUSH
49066: EMPTY
49067: LIST
49068: LIST
49069: PUSH
49070: LD_INT 3
49072: PUSH
49073: LD_INT 3
49075: PUSH
49076: EMPTY
49077: LIST
49078: LIST
49079: PUSH
49080: LD_INT 2
49082: PUSH
49083: LD_INT 3
49085: PUSH
49086: EMPTY
49087: LIST
49088: LIST
49089: PUSH
49090: LD_INT 2
49092: NEG
49093: PUSH
49094: LD_INT 1
49096: PUSH
49097: EMPTY
49098: LIST
49099: LIST
49100: PUSH
49101: LD_INT 3
49103: NEG
49104: PUSH
49105: LD_INT 0
49107: PUSH
49108: EMPTY
49109: LIST
49110: LIST
49111: PUSH
49112: LD_INT 3
49114: NEG
49115: PUSH
49116: LD_INT 1
49118: NEG
49119: PUSH
49120: EMPTY
49121: LIST
49122: LIST
49123: PUSH
49124: LD_INT 3
49126: NEG
49127: PUSH
49128: LD_INT 2
49130: NEG
49131: PUSH
49132: EMPTY
49133: LIST
49134: LIST
49135: PUSH
49136: LD_INT 3
49138: NEG
49139: PUSH
49140: LD_INT 3
49142: NEG
49143: PUSH
49144: EMPTY
49145: LIST
49146: LIST
49147: PUSH
49148: EMPTY
49149: LIST
49150: LIST
49151: LIST
49152: LIST
49153: LIST
49154: LIST
49155: LIST
49156: LIST
49157: LIST
49158: LIST
49159: LIST
49160: LIST
49161: LIST
49162: LIST
49163: LIST
49164: LIST
49165: LIST
49166: LIST
49167: LIST
49168: LIST
49169: LIST
49170: LIST
49171: LIST
49172: LIST
49173: LIST
49174: LIST
49175: LIST
49176: LIST
49177: LIST
49178: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49179: LD_ADDR_VAR 0 42
49183: PUSH
49184: LD_INT 0
49186: PUSH
49187: LD_INT 0
49189: PUSH
49190: EMPTY
49191: LIST
49192: LIST
49193: PUSH
49194: LD_INT 0
49196: PUSH
49197: LD_INT 1
49199: NEG
49200: PUSH
49201: EMPTY
49202: LIST
49203: LIST
49204: PUSH
49205: LD_INT 1
49207: PUSH
49208: LD_INT 0
49210: PUSH
49211: EMPTY
49212: LIST
49213: LIST
49214: PUSH
49215: LD_INT 1
49217: PUSH
49218: LD_INT 1
49220: PUSH
49221: EMPTY
49222: LIST
49223: LIST
49224: PUSH
49225: LD_INT 0
49227: PUSH
49228: LD_INT 1
49230: PUSH
49231: EMPTY
49232: LIST
49233: LIST
49234: PUSH
49235: LD_INT 1
49237: NEG
49238: PUSH
49239: LD_INT 0
49241: PUSH
49242: EMPTY
49243: LIST
49244: LIST
49245: PUSH
49246: LD_INT 1
49248: NEG
49249: PUSH
49250: LD_INT 1
49252: NEG
49253: PUSH
49254: EMPTY
49255: LIST
49256: LIST
49257: PUSH
49258: LD_INT 1
49260: NEG
49261: PUSH
49262: LD_INT 2
49264: NEG
49265: PUSH
49266: EMPTY
49267: LIST
49268: LIST
49269: PUSH
49270: LD_INT 0
49272: PUSH
49273: LD_INT 2
49275: NEG
49276: PUSH
49277: EMPTY
49278: LIST
49279: LIST
49280: PUSH
49281: LD_INT 1
49283: PUSH
49284: LD_INT 1
49286: NEG
49287: PUSH
49288: EMPTY
49289: LIST
49290: LIST
49291: PUSH
49292: LD_INT 2
49294: PUSH
49295: LD_INT 1
49297: PUSH
49298: EMPTY
49299: LIST
49300: LIST
49301: PUSH
49302: LD_INT 2
49304: PUSH
49305: LD_INT 2
49307: PUSH
49308: EMPTY
49309: LIST
49310: LIST
49311: PUSH
49312: LD_INT 1
49314: PUSH
49315: LD_INT 2
49317: PUSH
49318: EMPTY
49319: LIST
49320: LIST
49321: PUSH
49322: LD_INT 0
49324: PUSH
49325: LD_INT 2
49327: PUSH
49328: EMPTY
49329: LIST
49330: LIST
49331: PUSH
49332: LD_INT 1
49334: NEG
49335: PUSH
49336: LD_INT 1
49338: PUSH
49339: EMPTY
49340: LIST
49341: LIST
49342: PUSH
49343: LD_INT 2
49345: NEG
49346: PUSH
49347: LD_INT 1
49349: NEG
49350: PUSH
49351: EMPTY
49352: LIST
49353: LIST
49354: PUSH
49355: LD_INT 2
49357: NEG
49358: PUSH
49359: LD_INT 2
49361: NEG
49362: PUSH
49363: EMPTY
49364: LIST
49365: LIST
49366: PUSH
49367: LD_INT 2
49369: NEG
49370: PUSH
49371: LD_INT 3
49373: NEG
49374: PUSH
49375: EMPTY
49376: LIST
49377: LIST
49378: PUSH
49379: LD_INT 1
49381: NEG
49382: PUSH
49383: LD_INT 3
49385: NEG
49386: PUSH
49387: EMPTY
49388: LIST
49389: LIST
49390: PUSH
49391: LD_INT 0
49393: PUSH
49394: LD_INT 3
49396: NEG
49397: PUSH
49398: EMPTY
49399: LIST
49400: LIST
49401: PUSH
49402: LD_INT 1
49404: PUSH
49405: LD_INT 2
49407: NEG
49408: PUSH
49409: EMPTY
49410: LIST
49411: LIST
49412: PUSH
49413: LD_INT 3
49415: PUSH
49416: LD_INT 2
49418: PUSH
49419: EMPTY
49420: LIST
49421: LIST
49422: PUSH
49423: LD_INT 3
49425: PUSH
49426: LD_INT 3
49428: PUSH
49429: EMPTY
49430: LIST
49431: LIST
49432: PUSH
49433: LD_INT 2
49435: PUSH
49436: LD_INT 3
49438: PUSH
49439: EMPTY
49440: LIST
49441: LIST
49442: PUSH
49443: LD_INT 1
49445: PUSH
49446: LD_INT 3
49448: PUSH
49449: EMPTY
49450: LIST
49451: LIST
49452: PUSH
49453: LD_INT 0
49455: PUSH
49456: LD_INT 3
49458: PUSH
49459: EMPTY
49460: LIST
49461: LIST
49462: PUSH
49463: LD_INT 1
49465: NEG
49466: PUSH
49467: LD_INT 2
49469: PUSH
49470: EMPTY
49471: LIST
49472: LIST
49473: PUSH
49474: LD_INT 3
49476: NEG
49477: PUSH
49478: LD_INT 2
49480: NEG
49481: PUSH
49482: EMPTY
49483: LIST
49484: LIST
49485: PUSH
49486: LD_INT 3
49488: NEG
49489: PUSH
49490: LD_INT 3
49492: NEG
49493: PUSH
49494: EMPTY
49495: LIST
49496: LIST
49497: PUSH
49498: EMPTY
49499: LIST
49500: LIST
49501: LIST
49502: LIST
49503: LIST
49504: LIST
49505: LIST
49506: LIST
49507: LIST
49508: LIST
49509: LIST
49510: LIST
49511: LIST
49512: LIST
49513: LIST
49514: LIST
49515: LIST
49516: LIST
49517: LIST
49518: LIST
49519: LIST
49520: LIST
49521: LIST
49522: LIST
49523: LIST
49524: LIST
49525: LIST
49526: LIST
49527: LIST
49528: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49529: LD_ADDR_VAR 0 43
49533: PUSH
49534: LD_INT 0
49536: PUSH
49537: LD_INT 0
49539: PUSH
49540: EMPTY
49541: LIST
49542: LIST
49543: PUSH
49544: LD_INT 0
49546: PUSH
49547: LD_INT 1
49549: NEG
49550: PUSH
49551: EMPTY
49552: LIST
49553: LIST
49554: PUSH
49555: LD_INT 1
49557: PUSH
49558: LD_INT 0
49560: PUSH
49561: EMPTY
49562: LIST
49563: LIST
49564: PUSH
49565: LD_INT 1
49567: PUSH
49568: LD_INT 1
49570: PUSH
49571: EMPTY
49572: LIST
49573: LIST
49574: PUSH
49575: LD_INT 0
49577: PUSH
49578: LD_INT 1
49580: PUSH
49581: EMPTY
49582: LIST
49583: LIST
49584: PUSH
49585: LD_INT 1
49587: NEG
49588: PUSH
49589: LD_INT 0
49591: PUSH
49592: EMPTY
49593: LIST
49594: LIST
49595: PUSH
49596: LD_INT 1
49598: NEG
49599: PUSH
49600: LD_INT 1
49602: NEG
49603: PUSH
49604: EMPTY
49605: LIST
49606: LIST
49607: PUSH
49608: LD_INT 1
49610: NEG
49611: PUSH
49612: LD_INT 2
49614: NEG
49615: PUSH
49616: EMPTY
49617: LIST
49618: LIST
49619: PUSH
49620: LD_INT 0
49622: PUSH
49623: LD_INT 2
49625: NEG
49626: PUSH
49627: EMPTY
49628: LIST
49629: LIST
49630: PUSH
49631: LD_INT 1
49633: PUSH
49634: LD_INT 1
49636: NEG
49637: PUSH
49638: EMPTY
49639: LIST
49640: LIST
49641: PUSH
49642: LD_INT 2
49644: PUSH
49645: LD_INT 0
49647: PUSH
49648: EMPTY
49649: LIST
49650: LIST
49651: PUSH
49652: LD_INT 2
49654: PUSH
49655: LD_INT 1
49657: PUSH
49658: EMPTY
49659: LIST
49660: LIST
49661: PUSH
49662: LD_INT 1
49664: PUSH
49665: LD_INT 2
49667: PUSH
49668: EMPTY
49669: LIST
49670: LIST
49671: PUSH
49672: LD_INT 0
49674: PUSH
49675: LD_INT 2
49677: PUSH
49678: EMPTY
49679: LIST
49680: LIST
49681: PUSH
49682: LD_INT 1
49684: NEG
49685: PUSH
49686: LD_INT 1
49688: PUSH
49689: EMPTY
49690: LIST
49691: LIST
49692: PUSH
49693: LD_INT 2
49695: NEG
49696: PUSH
49697: LD_INT 0
49699: PUSH
49700: EMPTY
49701: LIST
49702: LIST
49703: PUSH
49704: LD_INT 2
49706: NEG
49707: PUSH
49708: LD_INT 1
49710: NEG
49711: PUSH
49712: EMPTY
49713: LIST
49714: LIST
49715: PUSH
49716: LD_INT 1
49718: NEG
49719: PUSH
49720: LD_INT 3
49722: NEG
49723: PUSH
49724: EMPTY
49725: LIST
49726: LIST
49727: PUSH
49728: LD_INT 0
49730: PUSH
49731: LD_INT 3
49733: NEG
49734: PUSH
49735: EMPTY
49736: LIST
49737: LIST
49738: PUSH
49739: LD_INT 1
49741: PUSH
49742: LD_INT 2
49744: NEG
49745: PUSH
49746: EMPTY
49747: LIST
49748: LIST
49749: PUSH
49750: LD_INT 2
49752: PUSH
49753: LD_INT 1
49755: NEG
49756: PUSH
49757: EMPTY
49758: LIST
49759: LIST
49760: PUSH
49761: LD_INT 3
49763: PUSH
49764: LD_INT 0
49766: PUSH
49767: EMPTY
49768: LIST
49769: LIST
49770: PUSH
49771: LD_INT 3
49773: PUSH
49774: LD_INT 1
49776: PUSH
49777: EMPTY
49778: LIST
49779: LIST
49780: PUSH
49781: LD_INT 1
49783: PUSH
49784: LD_INT 3
49786: PUSH
49787: EMPTY
49788: LIST
49789: LIST
49790: PUSH
49791: LD_INT 0
49793: PUSH
49794: LD_INT 3
49796: PUSH
49797: EMPTY
49798: LIST
49799: LIST
49800: PUSH
49801: LD_INT 1
49803: NEG
49804: PUSH
49805: LD_INT 2
49807: PUSH
49808: EMPTY
49809: LIST
49810: LIST
49811: PUSH
49812: LD_INT 2
49814: NEG
49815: PUSH
49816: LD_INT 1
49818: PUSH
49819: EMPTY
49820: LIST
49821: LIST
49822: PUSH
49823: LD_INT 3
49825: NEG
49826: PUSH
49827: LD_INT 0
49829: PUSH
49830: EMPTY
49831: LIST
49832: LIST
49833: PUSH
49834: LD_INT 3
49836: NEG
49837: PUSH
49838: LD_INT 1
49840: NEG
49841: PUSH
49842: EMPTY
49843: LIST
49844: LIST
49845: PUSH
49846: EMPTY
49847: LIST
49848: LIST
49849: LIST
49850: LIST
49851: LIST
49852: LIST
49853: LIST
49854: LIST
49855: LIST
49856: LIST
49857: LIST
49858: LIST
49859: LIST
49860: LIST
49861: LIST
49862: LIST
49863: LIST
49864: LIST
49865: LIST
49866: LIST
49867: LIST
49868: LIST
49869: LIST
49870: LIST
49871: LIST
49872: LIST
49873: LIST
49874: LIST
49875: LIST
49876: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49877: LD_ADDR_VAR 0 44
49881: PUSH
49882: LD_INT 0
49884: PUSH
49885: LD_INT 0
49887: PUSH
49888: EMPTY
49889: LIST
49890: LIST
49891: PUSH
49892: LD_INT 0
49894: PUSH
49895: LD_INT 1
49897: NEG
49898: PUSH
49899: EMPTY
49900: LIST
49901: LIST
49902: PUSH
49903: LD_INT 1
49905: PUSH
49906: LD_INT 0
49908: PUSH
49909: EMPTY
49910: LIST
49911: LIST
49912: PUSH
49913: LD_INT 1
49915: PUSH
49916: LD_INT 1
49918: PUSH
49919: EMPTY
49920: LIST
49921: LIST
49922: PUSH
49923: LD_INT 0
49925: PUSH
49926: LD_INT 1
49928: PUSH
49929: EMPTY
49930: LIST
49931: LIST
49932: PUSH
49933: LD_INT 1
49935: NEG
49936: PUSH
49937: LD_INT 0
49939: PUSH
49940: EMPTY
49941: LIST
49942: LIST
49943: PUSH
49944: LD_INT 1
49946: NEG
49947: PUSH
49948: LD_INT 1
49950: NEG
49951: PUSH
49952: EMPTY
49953: LIST
49954: LIST
49955: PUSH
49956: LD_INT 1
49958: NEG
49959: PUSH
49960: LD_INT 2
49962: NEG
49963: PUSH
49964: EMPTY
49965: LIST
49966: LIST
49967: PUSH
49968: LD_INT 1
49970: PUSH
49971: LD_INT 1
49973: NEG
49974: PUSH
49975: EMPTY
49976: LIST
49977: LIST
49978: PUSH
49979: LD_INT 2
49981: PUSH
49982: LD_INT 0
49984: PUSH
49985: EMPTY
49986: LIST
49987: LIST
49988: PUSH
49989: LD_INT 2
49991: PUSH
49992: LD_INT 1
49994: PUSH
49995: EMPTY
49996: LIST
49997: LIST
49998: PUSH
49999: LD_INT 2
50001: PUSH
50002: LD_INT 2
50004: PUSH
50005: EMPTY
50006: LIST
50007: LIST
50008: PUSH
50009: LD_INT 1
50011: PUSH
50012: LD_INT 2
50014: PUSH
50015: EMPTY
50016: LIST
50017: LIST
50018: PUSH
50019: LD_INT 1
50021: NEG
50022: PUSH
50023: LD_INT 1
50025: PUSH
50026: EMPTY
50027: LIST
50028: LIST
50029: PUSH
50030: LD_INT 2
50032: NEG
50033: PUSH
50034: LD_INT 0
50036: PUSH
50037: EMPTY
50038: LIST
50039: LIST
50040: PUSH
50041: LD_INT 2
50043: NEG
50044: PUSH
50045: LD_INT 1
50047: NEG
50048: PUSH
50049: EMPTY
50050: LIST
50051: LIST
50052: PUSH
50053: LD_INT 2
50055: NEG
50056: PUSH
50057: LD_INT 2
50059: NEG
50060: PUSH
50061: EMPTY
50062: LIST
50063: LIST
50064: PUSH
50065: LD_INT 2
50067: NEG
50068: PUSH
50069: LD_INT 3
50071: NEG
50072: PUSH
50073: EMPTY
50074: LIST
50075: LIST
50076: PUSH
50077: LD_INT 2
50079: PUSH
50080: LD_INT 1
50082: NEG
50083: PUSH
50084: EMPTY
50085: LIST
50086: LIST
50087: PUSH
50088: LD_INT 3
50090: PUSH
50091: LD_INT 0
50093: PUSH
50094: EMPTY
50095: LIST
50096: LIST
50097: PUSH
50098: LD_INT 3
50100: PUSH
50101: LD_INT 1
50103: PUSH
50104: EMPTY
50105: LIST
50106: LIST
50107: PUSH
50108: LD_INT 3
50110: PUSH
50111: LD_INT 2
50113: PUSH
50114: EMPTY
50115: LIST
50116: LIST
50117: PUSH
50118: LD_INT 3
50120: PUSH
50121: LD_INT 3
50123: PUSH
50124: EMPTY
50125: LIST
50126: LIST
50127: PUSH
50128: LD_INT 2
50130: PUSH
50131: LD_INT 3
50133: PUSH
50134: EMPTY
50135: LIST
50136: LIST
50137: PUSH
50138: LD_INT 2
50140: NEG
50141: PUSH
50142: LD_INT 1
50144: PUSH
50145: EMPTY
50146: LIST
50147: LIST
50148: PUSH
50149: LD_INT 3
50151: NEG
50152: PUSH
50153: LD_INT 0
50155: PUSH
50156: EMPTY
50157: LIST
50158: LIST
50159: PUSH
50160: LD_INT 3
50162: NEG
50163: PUSH
50164: LD_INT 1
50166: NEG
50167: PUSH
50168: EMPTY
50169: LIST
50170: LIST
50171: PUSH
50172: LD_INT 3
50174: NEG
50175: PUSH
50176: LD_INT 2
50178: NEG
50179: PUSH
50180: EMPTY
50181: LIST
50182: LIST
50183: PUSH
50184: LD_INT 3
50186: NEG
50187: PUSH
50188: LD_INT 3
50190: NEG
50191: PUSH
50192: EMPTY
50193: LIST
50194: LIST
50195: PUSH
50196: EMPTY
50197: LIST
50198: LIST
50199: LIST
50200: LIST
50201: LIST
50202: LIST
50203: LIST
50204: LIST
50205: LIST
50206: LIST
50207: LIST
50208: LIST
50209: LIST
50210: LIST
50211: LIST
50212: LIST
50213: LIST
50214: LIST
50215: LIST
50216: LIST
50217: LIST
50218: LIST
50219: LIST
50220: LIST
50221: LIST
50222: LIST
50223: LIST
50224: LIST
50225: LIST
50226: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50227: LD_ADDR_VAR 0 45
50231: PUSH
50232: LD_INT 0
50234: PUSH
50235: LD_INT 0
50237: PUSH
50238: EMPTY
50239: LIST
50240: LIST
50241: PUSH
50242: LD_INT 0
50244: PUSH
50245: LD_INT 1
50247: NEG
50248: PUSH
50249: EMPTY
50250: LIST
50251: LIST
50252: PUSH
50253: LD_INT 1
50255: PUSH
50256: LD_INT 0
50258: PUSH
50259: EMPTY
50260: LIST
50261: LIST
50262: PUSH
50263: LD_INT 1
50265: PUSH
50266: LD_INT 1
50268: PUSH
50269: EMPTY
50270: LIST
50271: LIST
50272: PUSH
50273: LD_INT 0
50275: PUSH
50276: LD_INT 1
50278: PUSH
50279: EMPTY
50280: LIST
50281: LIST
50282: PUSH
50283: LD_INT 1
50285: NEG
50286: PUSH
50287: LD_INT 0
50289: PUSH
50290: EMPTY
50291: LIST
50292: LIST
50293: PUSH
50294: LD_INT 1
50296: NEG
50297: PUSH
50298: LD_INT 1
50300: NEG
50301: PUSH
50302: EMPTY
50303: LIST
50304: LIST
50305: PUSH
50306: LD_INT 1
50308: NEG
50309: PUSH
50310: LD_INT 2
50312: NEG
50313: PUSH
50314: EMPTY
50315: LIST
50316: LIST
50317: PUSH
50318: LD_INT 0
50320: PUSH
50321: LD_INT 2
50323: NEG
50324: PUSH
50325: EMPTY
50326: LIST
50327: LIST
50328: PUSH
50329: LD_INT 1
50331: PUSH
50332: LD_INT 1
50334: NEG
50335: PUSH
50336: EMPTY
50337: LIST
50338: LIST
50339: PUSH
50340: LD_INT 2
50342: PUSH
50343: LD_INT 1
50345: PUSH
50346: EMPTY
50347: LIST
50348: LIST
50349: PUSH
50350: LD_INT 2
50352: PUSH
50353: LD_INT 2
50355: PUSH
50356: EMPTY
50357: LIST
50358: LIST
50359: PUSH
50360: LD_INT 1
50362: PUSH
50363: LD_INT 2
50365: PUSH
50366: EMPTY
50367: LIST
50368: LIST
50369: PUSH
50370: LD_INT 0
50372: PUSH
50373: LD_INT 2
50375: PUSH
50376: EMPTY
50377: LIST
50378: LIST
50379: PUSH
50380: LD_INT 1
50382: NEG
50383: PUSH
50384: LD_INT 1
50386: PUSH
50387: EMPTY
50388: LIST
50389: LIST
50390: PUSH
50391: LD_INT 2
50393: NEG
50394: PUSH
50395: LD_INT 1
50397: NEG
50398: PUSH
50399: EMPTY
50400: LIST
50401: LIST
50402: PUSH
50403: LD_INT 2
50405: NEG
50406: PUSH
50407: LD_INT 2
50409: NEG
50410: PUSH
50411: EMPTY
50412: LIST
50413: LIST
50414: PUSH
50415: LD_INT 2
50417: NEG
50418: PUSH
50419: LD_INT 3
50421: NEG
50422: PUSH
50423: EMPTY
50424: LIST
50425: LIST
50426: PUSH
50427: LD_INT 1
50429: NEG
50430: PUSH
50431: LD_INT 3
50433: NEG
50434: PUSH
50435: EMPTY
50436: LIST
50437: LIST
50438: PUSH
50439: LD_INT 0
50441: PUSH
50442: LD_INT 3
50444: NEG
50445: PUSH
50446: EMPTY
50447: LIST
50448: LIST
50449: PUSH
50450: LD_INT 1
50452: PUSH
50453: LD_INT 2
50455: NEG
50456: PUSH
50457: EMPTY
50458: LIST
50459: LIST
50460: PUSH
50461: LD_INT 3
50463: PUSH
50464: LD_INT 2
50466: PUSH
50467: EMPTY
50468: LIST
50469: LIST
50470: PUSH
50471: LD_INT 3
50473: PUSH
50474: LD_INT 3
50476: PUSH
50477: EMPTY
50478: LIST
50479: LIST
50480: PUSH
50481: LD_INT 2
50483: PUSH
50484: LD_INT 3
50486: PUSH
50487: EMPTY
50488: LIST
50489: LIST
50490: PUSH
50491: LD_INT 1
50493: PUSH
50494: LD_INT 3
50496: PUSH
50497: EMPTY
50498: LIST
50499: LIST
50500: PUSH
50501: LD_INT 0
50503: PUSH
50504: LD_INT 3
50506: PUSH
50507: EMPTY
50508: LIST
50509: LIST
50510: PUSH
50511: LD_INT 1
50513: NEG
50514: PUSH
50515: LD_INT 2
50517: PUSH
50518: EMPTY
50519: LIST
50520: LIST
50521: PUSH
50522: LD_INT 3
50524: NEG
50525: PUSH
50526: LD_INT 2
50528: NEG
50529: PUSH
50530: EMPTY
50531: LIST
50532: LIST
50533: PUSH
50534: LD_INT 3
50536: NEG
50537: PUSH
50538: LD_INT 3
50540: NEG
50541: PUSH
50542: EMPTY
50543: LIST
50544: LIST
50545: PUSH
50546: EMPTY
50547: LIST
50548: LIST
50549: LIST
50550: LIST
50551: LIST
50552: LIST
50553: LIST
50554: LIST
50555: LIST
50556: LIST
50557: LIST
50558: LIST
50559: LIST
50560: LIST
50561: LIST
50562: LIST
50563: LIST
50564: LIST
50565: LIST
50566: LIST
50567: LIST
50568: LIST
50569: LIST
50570: LIST
50571: LIST
50572: LIST
50573: LIST
50574: LIST
50575: LIST
50576: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50577: LD_ADDR_VAR 0 46
50581: PUSH
50582: LD_INT 0
50584: PUSH
50585: LD_INT 0
50587: PUSH
50588: EMPTY
50589: LIST
50590: LIST
50591: PUSH
50592: LD_INT 0
50594: PUSH
50595: LD_INT 1
50597: NEG
50598: PUSH
50599: EMPTY
50600: LIST
50601: LIST
50602: PUSH
50603: LD_INT 1
50605: PUSH
50606: LD_INT 0
50608: PUSH
50609: EMPTY
50610: LIST
50611: LIST
50612: PUSH
50613: LD_INT 1
50615: PUSH
50616: LD_INT 1
50618: PUSH
50619: EMPTY
50620: LIST
50621: LIST
50622: PUSH
50623: LD_INT 0
50625: PUSH
50626: LD_INT 1
50628: PUSH
50629: EMPTY
50630: LIST
50631: LIST
50632: PUSH
50633: LD_INT 1
50635: NEG
50636: PUSH
50637: LD_INT 0
50639: PUSH
50640: EMPTY
50641: LIST
50642: LIST
50643: PUSH
50644: LD_INT 1
50646: NEG
50647: PUSH
50648: LD_INT 1
50650: NEG
50651: PUSH
50652: EMPTY
50653: LIST
50654: LIST
50655: PUSH
50656: LD_INT 1
50658: NEG
50659: PUSH
50660: LD_INT 2
50662: NEG
50663: PUSH
50664: EMPTY
50665: LIST
50666: LIST
50667: PUSH
50668: LD_INT 0
50670: PUSH
50671: LD_INT 2
50673: NEG
50674: PUSH
50675: EMPTY
50676: LIST
50677: LIST
50678: PUSH
50679: LD_INT 1
50681: PUSH
50682: LD_INT 1
50684: NEG
50685: PUSH
50686: EMPTY
50687: LIST
50688: LIST
50689: PUSH
50690: LD_INT 2
50692: PUSH
50693: LD_INT 0
50695: PUSH
50696: EMPTY
50697: LIST
50698: LIST
50699: PUSH
50700: LD_INT 2
50702: PUSH
50703: LD_INT 1
50705: PUSH
50706: EMPTY
50707: LIST
50708: LIST
50709: PUSH
50710: LD_INT 1
50712: PUSH
50713: LD_INT 2
50715: PUSH
50716: EMPTY
50717: LIST
50718: LIST
50719: PUSH
50720: LD_INT 0
50722: PUSH
50723: LD_INT 2
50725: PUSH
50726: EMPTY
50727: LIST
50728: LIST
50729: PUSH
50730: LD_INT 1
50732: NEG
50733: PUSH
50734: LD_INT 1
50736: PUSH
50737: EMPTY
50738: LIST
50739: LIST
50740: PUSH
50741: LD_INT 2
50743: NEG
50744: PUSH
50745: LD_INT 0
50747: PUSH
50748: EMPTY
50749: LIST
50750: LIST
50751: PUSH
50752: LD_INT 2
50754: NEG
50755: PUSH
50756: LD_INT 1
50758: NEG
50759: PUSH
50760: EMPTY
50761: LIST
50762: LIST
50763: PUSH
50764: LD_INT 1
50766: NEG
50767: PUSH
50768: LD_INT 3
50770: NEG
50771: PUSH
50772: EMPTY
50773: LIST
50774: LIST
50775: PUSH
50776: LD_INT 0
50778: PUSH
50779: LD_INT 3
50781: NEG
50782: PUSH
50783: EMPTY
50784: LIST
50785: LIST
50786: PUSH
50787: LD_INT 1
50789: PUSH
50790: LD_INT 2
50792: NEG
50793: PUSH
50794: EMPTY
50795: LIST
50796: LIST
50797: PUSH
50798: LD_INT 2
50800: PUSH
50801: LD_INT 1
50803: NEG
50804: PUSH
50805: EMPTY
50806: LIST
50807: LIST
50808: PUSH
50809: LD_INT 3
50811: PUSH
50812: LD_INT 0
50814: PUSH
50815: EMPTY
50816: LIST
50817: LIST
50818: PUSH
50819: LD_INT 3
50821: PUSH
50822: LD_INT 1
50824: PUSH
50825: EMPTY
50826: LIST
50827: LIST
50828: PUSH
50829: LD_INT 1
50831: PUSH
50832: LD_INT 3
50834: PUSH
50835: EMPTY
50836: LIST
50837: LIST
50838: PUSH
50839: LD_INT 0
50841: PUSH
50842: LD_INT 3
50844: PUSH
50845: EMPTY
50846: LIST
50847: LIST
50848: PUSH
50849: LD_INT 1
50851: NEG
50852: PUSH
50853: LD_INT 2
50855: PUSH
50856: EMPTY
50857: LIST
50858: LIST
50859: PUSH
50860: LD_INT 2
50862: NEG
50863: PUSH
50864: LD_INT 1
50866: PUSH
50867: EMPTY
50868: LIST
50869: LIST
50870: PUSH
50871: LD_INT 3
50873: NEG
50874: PUSH
50875: LD_INT 0
50877: PUSH
50878: EMPTY
50879: LIST
50880: LIST
50881: PUSH
50882: LD_INT 3
50884: NEG
50885: PUSH
50886: LD_INT 1
50888: NEG
50889: PUSH
50890: EMPTY
50891: LIST
50892: LIST
50893: PUSH
50894: EMPTY
50895: LIST
50896: LIST
50897: LIST
50898: LIST
50899: LIST
50900: LIST
50901: LIST
50902: LIST
50903: LIST
50904: LIST
50905: LIST
50906: LIST
50907: LIST
50908: LIST
50909: LIST
50910: LIST
50911: LIST
50912: LIST
50913: LIST
50914: LIST
50915: LIST
50916: LIST
50917: LIST
50918: LIST
50919: LIST
50920: LIST
50921: LIST
50922: LIST
50923: LIST
50924: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50925: LD_ADDR_VAR 0 47
50929: PUSH
50930: LD_INT 0
50932: PUSH
50933: LD_INT 0
50935: PUSH
50936: EMPTY
50937: LIST
50938: LIST
50939: PUSH
50940: LD_INT 0
50942: PUSH
50943: LD_INT 1
50945: NEG
50946: PUSH
50947: EMPTY
50948: LIST
50949: LIST
50950: PUSH
50951: LD_INT 1
50953: PUSH
50954: LD_INT 0
50956: PUSH
50957: EMPTY
50958: LIST
50959: LIST
50960: PUSH
50961: LD_INT 1
50963: PUSH
50964: LD_INT 1
50966: PUSH
50967: EMPTY
50968: LIST
50969: LIST
50970: PUSH
50971: LD_INT 0
50973: PUSH
50974: LD_INT 1
50976: PUSH
50977: EMPTY
50978: LIST
50979: LIST
50980: PUSH
50981: LD_INT 1
50983: NEG
50984: PUSH
50985: LD_INT 0
50987: PUSH
50988: EMPTY
50989: LIST
50990: LIST
50991: PUSH
50992: LD_INT 1
50994: NEG
50995: PUSH
50996: LD_INT 1
50998: NEG
50999: PUSH
51000: EMPTY
51001: LIST
51002: LIST
51003: PUSH
51004: LD_INT 1
51006: NEG
51007: PUSH
51008: LD_INT 2
51010: NEG
51011: PUSH
51012: EMPTY
51013: LIST
51014: LIST
51015: PUSH
51016: LD_INT 0
51018: PUSH
51019: LD_INT 2
51021: NEG
51022: PUSH
51023: EMPTY
51024: LIST
51025: LIST
51026: PUSH
51027: LD_INT 1
51029: PUSH
51030: LD_INT 1
51032: NEG
51033: PUSH
51034: EMPTY
51035: LIST
51036: LIST
51037: PUSH
51038: LD_INT 2
51040: NEG
51041: PUSH
51042: LD_INT 1
51044: NEG
51045: PUSH
51046: EMPTY
51047: LIST
51048: LIST
51049: PUSH
51050: LD_INT 2
51052: NEG
51053: PUSH
51054: LD_INT 2
51056: NEG
51057: PUSH
51058: EMPTY
51059: LIST
51060: LIST
51061: PUSH
51062: EMPTY
51063: LIST
51064: LIST
51065: LIST
51066: LIST
51067: LIST
51068: LIST
51069: LIST
51070: LIST
51071: LIST
51072: LIST
51073: LIST
51074: LIST
51075: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
51076: LD_ADDR_VAR 0 48
51080: PUSH
51081: LD_INT 0
51083: PUSH
51084: LD_INT 0
51086: PUSH
51087: EMPTY
51088: LIST
51089: LIST
51090: PUSH
51091: LD_INT 0
51093: PUSH
51094: LD_INT 1
51096: NEG
51097: PUSH
51098: EMPTY
51099: LIST
51100: LIST
51101: PUSH
51102: LD_INT 1
51104: PUSH
51105: LD_INT 0
51107: PUSH
51108: EMPTY
51109: LIST
51110: LIST
51111: PUSH
51112: LD_INT 1
51114: PUSH
51115: LD_INT 1
51117: PUSH
51118: EMPTY
51119: LIST
51120: LIST
51121: PUSH
51122: LD_INT 0
51124: PUSH
51125: LD_INT 1
51127: PUSH
51128: EMPTY
51129: LIST
51130: LIST
51131: PUSH
51132: LD_INT 1
51134: NEG
51135: PUSH
51136: LD_INT 0
51138: PUSH
51139: EMPTY
51140: LIST
51141: LIST
51142: PUSH
51143: LD_INT 1
51145: NEG
51146: PUSH
51147: LD_INT 1
51149: NEG
51150: PUSH
51151: EMPTY
51152: LIST
51153: LIST
51154: PUSH
51155: LD_INT 1
51157: NEG
51158: PUSH
51159: LD_INT 2
51161: NEG
51162: PUSH
51163: EMPTY
51164: LIST
51165: LIST
51166: PUSH
51167: LD_INT 0
51169: PUSH
51170: LD_INT 2
51172: NEG
51173: PUSH
51174: EMPTY
51175: LIST
51176: LIST
51177: PUSH
51178: LD_INT 1
51180: PUSH
51181: LD_INT 1
51183: NEG
51184: PUSH
51185: EMPTY
51186: LIST
51187: LIST
51188: PUSH
51189: LD_INT 2
51191: PUSH
51192: LD_INT 0
51194: PUSH
51195: EMPTY
51196: LIST
51197: LIST
51198: PUSH
51199: LD_INT 2
51201: PUSH
51202: LD_INT 1
51204: PUSH
51205: EMPTY
51206: LIST
51207: LIST
51208: PUSH
51209: EMPTY
51210: LIST
51211: LIST
51212: LIST
51213: LIST
51214: LIST
51215: LIST
51216: LIST
51217: LIST
51218: LIST
51219: LIST
51220: LIST
51221: LIST
51222: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
51223: LD_ADDR_VAR 0 49
51227: PUSH
51228: LD_INT 0
51230: PUSH
51231: LD_INT 0
51233: PUSH
51234: EMPTY
51235: LIST
51236: LIST
51237: PUSH
51238: LD_INT 0
51240: PUSH
51241: LD_INT 1
51243: NEG
51244: PUSH
51245: EMPTY
51246: LIST
51247: LIST
51248: PUSH
51249: LD_INT 1
51251: PUSH
51252: LD_INT 0
51254: PUSH
51255: EMPTY
51256: LIST
51257: LIST
51258: PUSH
51259: LD_INT 1
51261: PUSH
51262: LD_INT 1
51264: PUSH
51265: EMPTY
51266: LIST
51267: LIST
51268: PUSH
51269: LD_INT 0
51271: PUSH
51272: LD_INT 1
51274: PUSH
51275: EMPTY
51276: LIST
51277: LIST
51278: PUSH
51279: LD_INT 1
51281: NEG
51282: PUSH
51283: LD_INT 0
51285: PUSH
51286: EMPTY
51287: LIST
51288: LIST
51289: PUSH
51290: LD_INT 1
51292: NEG
51293: PUSH
51294: LD_INT 1
51296: NEG
51297: PUSH
51298: EMPTY
51299: LIST
51300: LIST
51301: PUSH
51302: LD_INT 1
51304: PUSH
51305: LD_INT 1
51307: NEG
51308: PUSH
51309: EMPTY
51310: LIST
51311: LIST
51312: PUSH
51313: LD_INT 2
51315: PUSH
51316: LD_INT 0
51318: PUSH
51319: EMPTY
51320: LIST
51321: LIST
51322: PUSH
51323: LD_INT 2
51325: PUSH
51326: LD_INT 1
51328: PUSH
51329: EMPTY
51330: LIST
51331: LIST
51332: PUSH
51333: LD_INT 2
51335: PUSH
51336: LD_INT 2
51338: PUSH
51339: EMPTY
51340: LIST
51341: LIST
51342: PUSH
51343: LD_INT 1
51345: PUSH
51346: LD_INT 2
51348: PUSH
51349: EMPTY
51350: LIST
51351: LIST
51352: PUSH
51353: EMPTY
51354: LIST
51355: LIST
51356: LIST
51357: LIST
51358: LIST
51359: LIST
51360: LIST
51361: LIST
51362: LIST
51363: LIST
51364: LIST
51365: LIST
51366: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
51367: LD_ADDR_VAR 0 50
51371: PUSH
51372: LD_INT 0
51374: PUSH
51375: LD_INT 0
51377: PUSH
51378: EMPTY
51379: LIST
51380: LIST
51381: PUSH
51382: LD_INT 0
51384: PUSH
51385: LD_INT 1
51387: NEG
51388: PUSH
51389: EMPTY
51390: LIST
51391: LIST
51392: PUSH
51393: LD_INT 1
51395: PUSH
51396: LD_INT 0
51398: PUSH
51399: EMPTY
51400: LIST
51401: LIST
51402: PUSH
51403: LD_INT 1
51405: PUSH
51406: LD_INT 1
51408: PUSH
51409: EMPTY
51410: LIST
51411: LIST
51412: PUSH
51413: LD_INT 0
51415: PUSH
51416: LD_INT 1
51418: PUSH
51419: EMPTY
51420: LIST
51421: LIST
51422: PUSH
51423: LD_INT 1
51425: NEG
51426: PUSH
51427: LD_INT 0
51429: PUSH
51430: EMPTY
51431: LIST
51432: LIST
51433: PUSH
51434: LD_INT 1
51436: NEG
51437: PUSH
51438: LD_INT 1
51440: NEG
51441: PUSH
51442: EMPTY
51443: LIST
51444: LIST
51445: PUSH
51446: LD_INT 2
51448: PUSH
51449: LD_INT 1
51451: PUSH
51452: EMPTY
51453: LIST
51454: LIST
51455: PUSH
51456: LD_INT 2
51458: PUSH
51459: LD_INT 2
51461: PUSH
51462: EMPTY
51463: LIST
51464: LIST
51465: PUSH
51466: LD_INT 1
51468: PUSH
51469: LD_INT 2
51471: PUSH
51472: EMPTY
51473: LIST
51474: LIST
51475: PUSH
51476: LD_INT 0
51478: PUSH
51479: LD_INT 2
51481: PUSH
51482: EMPTY
51483: LIST
51484: LIST
51485: PUSH
51486: LD_INT 1
51488: NEG
51489: PUSH
51490: LD_INT 1
51492: PUSH
51493: EMPTY
51494: LIST
51495: LIST
51496: PUSH
51497: EMPTY
51498: LIST
51499: LIST
51500: LIST
51501: LIST
51502: LIST
51503: LIST
51504: LIST
51505: LIST
51506: LIST
51507: LIST
51508: LIST
51509: LIST
51510: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
51511: LD_ADDR_VAR 0 51
51515: PUSH
51516: LD_INT 0
51518: PUSH
51519: LD_INT 0
51521: PUSH
51522: EMPTY
51523: LIST
51524: LIST
51525: PUSH
51526: LD_INT 0
51528: PUSH
51529: LD_INT 1
51531: NEG
51532: PUSH
51533: EMPTY
51534: LIST
51535: LIST
51536: PUSH
51537: LD_INT 1
51539: PUSH
51540: LD_INT 0
51542: PUSH
51543: EMPTY
51544: LIST
51545: LIST
51546: PUSH
51547: LD_INT 1
51549: PUSH
51550: LD_INT 1
51552: PUSH
51553: EMPTY
51554: LIST
51555: LIST
51556: PUSH
51557: LD_INT 0
51559: PUSH
51560: LD_INT 1
51562: PUSH
51563: EMPTY
51564: LIST
51565: LIST
51566: PUSH
51567: LD_INT 1
51569: NEG
51570: PUSH
51571: LD_INT 0
51573: PUSH
51574: EMPTY
51575: LIST
51576: LIST
51577: PUSH
51578: LD_INT 1
51580: NEG
51581: PUSH
51582: LD_INT 1
51584: NEG
51585: PUSH
51586: EMPTY
51587: LIST
51588: LIST
51589: PUSH
51590: LD_INT 1
51592: PUSH
51593: LD_INT 2
51595: PUSH
51596: EMPTY
51597: LIST
51598: LIST
51599: PUSH
51600: LD_INT 0
51602: PUSH
51603: LD_INT 2
51605: PUSH
51606: EMPTY
51607: LIST
51608: LIST
51609: PUSH
51610: LD_INT 1
51612: NEG
51613: PUSH
51614: LD_INT 1
51616: PUSH
51617: EMPTY
51618: LIST
51619: LIST
51620: PUSH
51621: LD_INT 2
51623: NEG
51624: PUSH
51625: LD_INT 0
51627: PUSH
51628: EMPTY
51629: LIST
51630: LIST
51631: PUSH
51632: LD_INT 2
51634: NEG
51635: PUSH
51636: LD_INT 1
51638: NEG
51639: PUSH
51640: EMPTY
51641: LIST
51642: LIST
51643: PUSH
51644: EMPTY
51645: LIST
51646: LIST
51647: LIST
51648: LIST
51649: LIST
51650: LIST
51651: LIST
51652: LIST
51653: LIST
51654: LIST
51655: LIST
51656: LIST
51657: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51658: LD_ADDR_VAR 0 52
51662: PUSH
51663: LD_INT 0
51665: PUSH
51666: LD_INT 0
51668: PUSH
51669: EMPTY
51670: LIST
51671: LIST
51672: PUSH
51673: LD_INT 0
51675: PUSH
51676: LD_INT 1
51678: NEG
51679: PUSH
51680: EMPTY
51681: LIST
51682: LIST
51683: PUSH
51684: LD_INT 1
51686: PUSH
51687: LD_INT 0
51689: PUSH
51690: EMPTY
51691: LIST
51692: LIST
51693: PUSH
51694: LD_INT 1
51696: PUSH
51697: LD_INT 1
51699: PUSH
51700: EMPTY
51701: LIST
51702: LIST
51703: PUSH
51704: LD_INT 0
51706: PUSH
51707: LD_INT 1
51709: PUSH
51710: EMPTY
51711: LIST
51712: LIST
51713: PUSH
51714: LD_INT 1
51716: NEG
51717: PUSH
51718: LD_INT 0
51720: PUSH
51721: EMPTY
51722: LIST
51723: LIST
51724: PUSH
51725: LD_INT 1
51727: NEG
51728: PUSH
51729: LD_INT 1
51731: NEG
51732: PUSH
51733: EMPTY
51734: LIST
51735: LIST
51736: PUSH
51737: LD_INT 1
51739: NEG
51740: PUSH
51741: LD_INT 2
51743: NEG
51744: PUSH
51745: EMPTY
51746: LIST
51747: LIST
51748: PUSH
51749: LD_INT 1
51751: NEG
51752: PUSH
51753: LD_INT 1
51755: PUSH
51756: EMPTY
51757: LIST
51758: LIST
51759: PUSH
51760: LD_INT 2
51762: NEG
51763: PUSH
51764: LD_INT 0
51766: PUSH
51767: EMPTY
51768: LIST
51769: LIST
51770: PUSH
51771: LD_INT 2
51773: NEG
51774: PUSH
51775: LD_INT 1
51777: NEG
51778: PUSH
51779: EMPTY
51780: LIST
51781: LIST
51782: PUSH
51783: LD_INT 2
51785: NEG
51786: PUSH
51787: LD_INT 2
51789: NEG
51790: PUSH
51791: EMPTY
51792: LIST
51793: LIST
51794: PUSH
51795: EMPTY
51796: LIST
51797: LIST
51798: LIST
51799: LIST
51800: LIST
51801: LIST
51802: LIST
51803: LIST
51804: LIST
51805: LIST
51806: LIST
51807: LIST
51808: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51809: LD_ADDR_VAR 0 53
51813: PUSH
51814: LD_INT 0
51816: PUSH
51817: LD_INT 0
51819: PUSH
51820: EMPTY
51821: LIST
51822: LIST
51823: PUSH
51824: LD_INT 0
51826: PUSH
51827: LD_INT 1
51829: NEG
51830: PUSH
51831: EMPTY
51832: LIST
51833: LIST
51834: PUSH
51835: LD_INT 1
51837: PUSH
51838: LD_INT 0
51840: PUSH
51841: EMPTY
51842: LIST
51843: LIST
51844: PUSH
51845: LD_INT 1
51847: PUSH
51848: LD_INT 1
51850: PUSH
51851: EMPTY
51852: LIST
51853: LIST
51854: PUSH
51855: LD_INT 0
51857: PUSH
51858: LD_INT 1
51860: PUSH
51861: EMPTY
51862: LIST
51863: LIST
51864: PUSH
51865: LD_INT 1
51867: NEG
51868: PUSH
51869: LD_INT 0
51871: PUSH
51872: EMPTY
51873: LIST
51874: LIST
51875: PUSH
51876: LD_INT 1
51878: NEG
51879: PUSH
51880: LD_INT 1
51882: NEG
51883: PUSH
51884: EMPTY
51885: LIST
51886: LIST
51887: PUSH
51888: LD_INT 1
51890: NEG
51891: PUSH
51892: LD_INT 2
51894: NEG
51895: PUSH
51896: EMPTY
51897: LIST
51898: LIST
51899: PUSH
51900: LD_INT 0
51902: PUSH
51903: LD_INT 2
51905: NEG
51906: PUSH
51907: EMPTY
51908: LIST
51909: LIST
51910: PUSH
51911: LD_INT 1
51913: PUSH
51914: LD_INT 1
51916: NEG
51917: PUSH
51918: EMPTY
51919: LIST
51920: LIST
51921: PUSH
51922: LD_INT 2
51924: PUSH
51925: LD_INT 0
51927: PUSH
51928: EMPTY
51929: LIST
51930: LIST
51931: PUSH
51932: LD_INT 2
51934: PUSH
51935: LD_INT 1
51937: PUSH
51938: EMPTY
51939: LIST
51940: LIST
51941: PUSH
51942: LD_INT 2
51944: PUSH
51945: LD_INT 2
51947: PUSH
51948: EMPTY
51949: LIST
51950: LIST
51951: PUSH
51952: LD_INT 1
51954: PUSH
51955: LD_INT 2
51957: PUSH
51958: EMPTY
51959: LIST
51960: LIST
51961: PUSH
51962: LD_INT 0
51964: PUSH
51965: LD_INT 2
51967: PUSH
51968: EMPTY
51969: LIST
51970: LIST
51971: PUSH
51972: LD_INT 1
51974: NEG
51975: PUSH
51976: LD_INT 1
51978: PUSH
51979: EMPTY
51980: LIST
51981: LIST
51982: PUSH
51983: LD_INT 2
51985: NEG
51986: PUSH
51987: LD_INT 0
51989: PUSH
51990: EMPTY
51991: LIST
51992: LIST
51993: PUSH
51994: LD_INT 2
51996: NEG
51997: PUSH
51998: LD_INT 1
52000: NEG
52001: PUSH
52002: EMPTY
52003: LIST
52004: LIST
52005: PUSH
52006: LD_INT 2
52008: NEG
52009: PUSH
52010: LD_INT 2
52012: NEG
52013: PUSH
52014: EMPTY
52015: LIST
52016: LIST
52017: PUSH
52018: EMPTY
52019: LIST
52020: LIST
52021: LIST
52022: LIST
52023: LIST
52024: LIST
52025: LIST
52026: LIST
52027: LIST
52028: LIST
52029: LIST
52030: LIST
52031: LIST
52032: LIST
52033: LIST
52034: LIST
52035: LIST
52036: LIST
52037: LIST
52038: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52039: LD_ADDR_VAR 0 54
52043: PUSH
52044: LD_INT 0
52046: PUSH
52047: LD_INT 0
52049: PUSH
52050: EMPTY
52051: LIST
52052: LIST
52053: PUSH
52054: LD_INT 0
52056: PUSH
52057: LD_INT 1
52059: NEG
52060: PUSH
52061: EMPTY
52062: LIST
52063: LIST
52064: PUSH
52065: LD_INT 1
52067: PUSH
52068: LD_INT 0
52070: PUSH
52071: EMPTY
52072: LIST
52073: LIST
52074: PUSH
52075: LD_INT 1
52077: PUSH
52078: LD_INT 1
52080: PUSH
52081: EMPTY
52082: LIST
52083: LIST
52084: PUSH
52085: LD_INT 0
52087: PUSH
52088: LD_INT 1
52090: PUSH
52091: EMPTY
52092: LIST
52093: LIST
52094: PUSH
52095: LD_INT 1
52097: NEG
52098: PUSH
52099: LD_INT 0
52101: PUSH
52102: EMPTY
52103: LIST
52104: LIST
52105: PUSH
52106: LD_INT 1
52108: NEG
52109: PUSH
52110: LD_INT 1
52112: NEG
52113: PUSH
52114: EMPTY
52115: LIST
52116: LIST
52117: PUSH
52118: LD_INT 1
52120: NEG
52121: PUSH
52122: LD_INT 2
52124: NEG
52125: PUSH
52126: EMPTY
52127: LIST
52128: LIST
52129: PUSH
52130: LD_INT 0
52132: PUSH
52133: LD_INT 2
52135: NEG
52136: PUSH
52137: EMPTY
52138: LIST
52139: LIST
52140: PUSH
52141: LD_INT 1
52143: PUSH
52144: LD_INT 1
52146: NEG
52147: PUSH
52148: EMPTY
52149: LIST
52150: LIST
52151: PUSH
52152: LD_INT 2
52154: PUSH
52155: LD_INT 0
52157: PUSH
52158: EMPTY
52159: LIST
52160: LIST
52161: PUSH
52162: LD_INT 2
52164: PUSH
52165: LD_INT 1
52167: PUSH
52168: EMPTY
52169: LIST
52170: LIST
52171: PUSH
52172: LD_INT 2
52174: PUSH
52175: LD_INT 2
52177: PUSH
52178: EMPTY
52179: LIST
52180: LIST
52181: PUSH
52182: LD_INT 1
52184: PUSH
52185: LD_INT 2
52187: PUSH
52188: EMPTY
52189: LIST
52190: LIST
52191: PUSH
52192: LD_INT 0
52194: PUSH
52195: LD_INT 2
52197: PUSH
52198: EMPTY
52199: LIST
52200: LIST
52201: PUSH
52202: LD_INT 1
52204: NEG
52205: PUSH
52206: LD_INT 1
52208: PUSH
52209: EMPTY
52210: LIST
52211: LIST
52212: PUSH
52213: LD_INT 2
52215: NEG
52216: PUSH
52217: LD_INT 0
52219: PUSH
52220: EMPTY
52221: LIST
52222: LIST
52223: PUSH
52224: LD_INT 2
52226: NEG
52227: PUSH
52228: LD_INT 1
52230: NEG
52231: PUSH
52232: EMPTY
52233: LIST
52234: LIST
52235: PUSH
52236: LD_INT 2
52238: NEG
52239: PUSH
52240: LD_INT 2
52242: NEG
52243: PUSH
52244: EMPTY
52245: LIST
52246: LIST
52247: PUSH
52248: EMPTY
52249: LIST
52250: LIST
52251: LIST
52252: LIST
52253: LIST
52254: LIST
52255: LIST
52256: LIST
52257: LIST
52258: LIST
52259: LIST
52260: LIST
52261: LIST
52262: LIST
52263: LIST
52264: LIST
52265: LIST
52266: LIST
52267: LIST
52268: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52269: LD_ADDR_VAR 0 55
52273: PUSH
52274: LD_INT 0
52276: PUSH
52277: LD_INT 0
52279: PUSH
52280: EMPTY
52281: LIST
52282: LIST
52283: PUSH
52284: LD_INT 0
52286: PUSH
52287: LD_INT 1
52289: NEG
52290: PUSH
52291: EMPTY
52292: LIST
52293: LIST
52294: PUSH
52295: LD_INT 1
52297: PUSH
52298: LD_INT 0
52300: PUSH
52301: EMPTY
52302: LIST
52303: LIST
52304: PUSH
52305: LD_INT 1
52307: PUSH
52308: LD_INT 1
52310: PUSH
52311: EMPTY
52312: LIST
52313: LIST
52314: PUSH
52315: LD_INT 0
52317: PUSH
52318: LD_INT 1
52320: PUSH
52321: EMPTY
52322: LIST
52323: LIST
52324: PUSH
52325: LD_INT 1
52327: NEG
52328: PUSH
52329: LD_INT 0
52331: PUSH
52332: EMPTY
52333: LIST
52334: LIST
52335: PUSH
52336: LD_INT 1
52338: NEG
52339: PUSH
52340: LD_INT 1
52342: NEG
52343: PUSH
52344: EMPTY
52345: LIST
52346: LIST
52347: PUSH
52348: LD_INT 1
52350: NEG
52351: PUSH
52352: LD_INT 2
52354: NEG
52355: PUSH
52356: EMPTY
52357: LIST
52358: LIST
52359: PUSH
52360: LD_INT 0
52362: PUSH
52363: LD_INT 2
52365: NEG
52366: PUSH
52367: EMPTY
52368: LIST
52369: LIST
52370: PUSH
52371: LD_INT 1
52373: PUSH
52374: LD_INT 1
52376: NEG
52377: PUSH
52378: EMPTY
52379: LIST
52380: LIST
52381: PUSH
52382: LD_INT 2
52384: PUSH
52385: LD_INT 0
52387: PUSH
52388: EMPTY
52389: LIST
52390: LIST
52391: PUSH
52392: LD_INT 2
52394: PUSH
52395: LD_INT 1
52397: PUSH
52398: EMPTY
52399: LIST
52400: LIST
52401: PUSH
52402: LD_INT 2
52404: PUSH
52405: LD_INT 2
52407: PUSH
52408: EMPTY
52409: LIST
52410: LIST
52411: PUSH
52412: LD_INT 1
52414: PUSH
52415: LD_INT 2
52417: PUSH
52418: EMPTY
52419: LIST
52420: LIST
52421: PUSH
52422: LD_INT 0
52424: PUSH
52425: LD_INT 2
52427: PUSH
52428: EMPTY
52429: LIST
52430: LIST
52431: PUSH
52432: LD_INT 1
52434: NEG
52435: PUSH
52436: LD_INT 1
52438: PUSH
52439: EMPTY
52440: LIST
52441: LIST
52442: PUSH
52443: LD_INT 2
52445: NEG
52446: PUSH
52447: LD_INT 0
52449: PUSH
52450: EMPTY
52451: LIST
52452: LIST
52453: PUSH
52454: LD_INT 2
52456: NEG
52457: PUSH
52458: LD_INT 1
52460: NEG
52461: PUSH
52462: EMPTY
52463: LIST
52464: LIST
52465: PUSH
52466: LD_INT 2
52468: NEG
52469: PUSH
52470: LD_INT 2
52472: NEG
52473: PUSH
52474: EMPTY
52475: LIST
52476: LIST
52477: PUSH
52478: EMPTY
52479: LIST
52480: LIST
52481: LIST
52482: LIST
52483: LIST
52484: LIST
52485: LIST
52486: LIST
52487: LIST
52488: LIST
52489: LIST
52490: LIST
52491: LIST
52492: LIST
52493: LIST
52494: LIST
52495: LIST
52496: LIST
52497: LIST
52498: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52499: LD_ADDR_VAR 0 56
52503: PUSH
52504: LD_INT 0
52506: PUSH
52507: LD_INT 0
52509: PUSH
52510: EMPTY
52511: LIST
52512: LIST
52513: PUSH
52514: LD_INT 0
52516: PUSH
52517: LD_INT 1
52519: NEG
52520: PUSH
52521: EMPTY
52522: LIST
52523: LIST
52524: PUSH
52525: LD_INT 1
52527: PUSH
52528: LD_INT 0
52530: PUSH
52531: EMPTY
52532: LIST
52533: LIST
52534: PUSH
52535: LD_INT 1
52537: PUSH
52538: LD_INT 1
52540: PUSH
52541: EMPTY
52542: LIST
52543: LIST
52544: PUSH
52545: LD_INT 0
52547: PUSH
52548: LD_INT 1
52550: PUSH
52551: EMPTY
52552: LIST
52553: LIST
52554: PUSH
52555: LD_INT 1
52557: NEG
52558: PUSH
52559: LD_INT 0
52561: PUSH
52562: EMPTY
52563: LIST
52564: LIST
52565: PUSH
52566: LD_INT 1
52568: NEG
52569: PUSH
52570: LD_INT 1
52572: NEG
52573: PUSH
52574: EMPTY
52575: LIST
52576: LIST
52577: PUSH
52578: LD_INT 1
52580: NEG
52581: PUSH
52582: LD_INT 2
52584: NEG
52585: PUSH
52586: EMPTY
52587: LIST
52588: LIST
52589: PUSH
52590: LD_INT 0
52592: PUSH
52593: LD_INT 2
52595: NEG
52596: PUSH
52597: EMPTY
52598: LIST
52599: LIST
52600: PUSH
52601: LD_INT 1
52603: PUSH
52604: LD_INT 1
52606: NEG
52607: PUSH
52608: EMPTY
52609: LIST
52610: LIST
52611: PUSH
52612: LD_INT 2
52614: PUSH
52615: LD_INT 0
52617: PUSH
52618: EMPTY
52619: LIST
52620: LIST
52621: PUSH
52622: LD_INT 2
52624: PUSH
52625: LD_INT 1
52627: PUSH
52628: EMPTY
52629: LIST
52630: LIST
52631: PUSH
52632: LD_INT 2
52634: PUSH
52635: LD_INT 2
52637: PUSH
52638: EMPTY
52639: LIST
52640: LIST
52641: PUSH
52642: LD_INT 1
52644: PUSH
52645: LD_INT 2
52647: PUSH
52648: EMPTY
52649: LIST
52650: LIST
52651: PUSH
52652: LD_INT 0
52654: PUSH
52655: LD_INT 2
52657: PUSH
52658: EMPTY
52659: LIST
52660: LIST
52661: PUSH
52662: LD_INT 1
52664: NEG
52665: PUSH
52666: LD_INT 1
52668: PUSH
52669: EMPTY
52670: LIST
52671: LIST
52672: PUSH
52673: LD_INT 2
52675: NEG
52676: PUSH
52677: LD_INT 0
52679: PUSH
52680: EMPTY
52681: LIST
52682: LIST
52683: PUSH
52684: LD_INT 2
52686: NEG
52687: PUSH
52688: LD_INT 1
52690: NEG
52691: PUSH
52692: EMPTY
52693: LIST
52694: LIST
52695: PUSH
52696: LD_INT 2
52698: NEG
52699: PUSH
52700: LD_INT 2
52702: NEG
52703: PUSH
52704: EMPTY
52705: LIST
52706: LIST
52707: PUSH
52708: EMPTY
52709: LIST
52710: LIST
52711: LIST
52712: LIST
52713: LIST
52714: LIST
52715: LIST
52716: LIST
52717: LIST
52718: LIST
52719: LIST
52720: LIST
52721: LIST
52722: LIST
52723: LIST
52724: LIST
52725: LIST
52726: LIST
52727: LIST
52728: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52729: LD_ADDR_VAR 0 57
52733: PUSH
52734: LD_INT 0
52736: PUSH
52737: LD_INT 0
52739: PUSH
52740: EMPTY
52741: LIST
52742: LIST
52743: PUSH
52744: LD_INT 0
52746: PUSH
52747: LD_INT 1
52749: NEG
52750: PUSH
52751: EMPTY
52752: LIST
52753: LIST
52754: PUSH
52755: LD_INT 1
52757: PUSH
52758: LD_INT 0
52760: PUSH
52761: EMPTY
52762: LIST
52763: LIST
52764: PUSH
52765: LD_INT 1
52767: PUSH
52768: LD_INT 1
52770: PUSH
52771: EMPTY
52772: LIST
52773: LIST
52774: PUSH
52775: LD_INT 0
52777: PUSH
52778: LD_INT 1
52780: PUSH
52781: EMPTY
52782: LIST
52783: LIST
52784: PUSH
52785: LD_INT 1
52787: NEG
52788: PUSH
52789: LD_INT 0
52791: PUSH
52792: EMPTY
52793: LIST
52794: LIST
52795: PUSH
52796: LD_INT 1
52798: NEG
52799: PUSH
52800: LD_INT 1
52802: NEG
52803: PUSH
52804: EMPTY
52805: LIST
52806: LIST
52807: PUSH
52808: LD_INT 1
52810: NEG
52811: PUSH
52812: LD_INT 2
52814: NEG
52815: PUSH
52816: EMPTY
52817: LIST
52818: LIST
52819: PUSH
52820: LD_INT 0
52822: PUSH
52823: LD_INT 2
52825: NEG
52826: PUSH
52827: EMPTY
52828: LIST
52829: LIST
52830: PUSH
52831: LD_INT 1
52833: PUSH
52834: LD_INT 1
52836: NEG
52837: PUSH
52838: EMPTY
52839: LIST
52840: LIST
52841: PUSH
52842: LD_INT 2
52844: PUSH
52845: LD_INT 0
52847: PUSH
52848: EMPTY
52849: LIST
52850: LIST
52851: PUSH
52852: LD_INT 2
52854: PUSH
52855: LD_INT 1
52857: PUSH
52858: EMPTY
52859: LIST
52860: LIST
52861: PUSH
52862: LD_INT 2
52864: PUSH
52865: LD_INT 2
52867: PUSH
52868: EMPTY
52869: LIST
52870: LIST
52871: PUSH
52872: LD_INT 1
52874: PUSH
52875: LD_INT 2
52877: PUSH
52878: EMPTY
52879: LIST
52880: LIST
52881: PUSH
52882: LD_INT 0
52884: PUSH
52885: LD_INT 2
52887: PUSH
52888: EMPTY
52889: LIST
52890: LIST
52891: PUSH
52892: LD_INT 1
52894: NEG
52895: PUSH
52896: LD_INT 1
52898: PUSH
52899: EMPTY
52900: LIST
52901: LIST
52902: PUSH
52903: LD_INT 2
52905: NEG
52906: PUSH
52907: LD_INT 0
52909: PUSH
52910: EMPTY
52911: LIST
52912: LIST
52913: PUSH
52914: LD_INT 2
52916: NEG
52917: PUSH
52918: LD_INT 1
52920: NEG
52921: PUSH
52922: EMPTY
52923: LIST
52924: LIST
52925: PUSH
52926: LD_INT 2
52928: NEG
52929: PUSH
52930: LD_INT 2
52932: NEG
52933: PUSH
52934: EMPTY
52935: LIST
52936: LIST
52937: PUSH
52938: EMPTY
52939: LIST
52940: LIST
52941: LIST
52942: LIST
52943: LIST
52944: LIST
52945: LIST
52946: LIST
52947: LIST
52948: LIST
52949: LIST
52950: LIST
52951: LIST
52952: LIST
52953: LIST
52954: LIST
52955: LIST
52956: LIST
52957: LIST
52958: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52959: LD_ADDR_VAR 0 58
52963: PUSH
52964: LD_INT 0
52966: PUSH
52967: LD_INT 0
52969: PUSH
52970: EMPTY
52971: LIST
52972: LIST
52973: PUSH
52974: LD_INT 0
52976: PUSH
52977: LD_INT 1
52979: NEG
52980: PUSH
52981: EMPTY
52982: LIST
52983: LIST
52984: PUSH
52985: LD_INT 1
52987: PUSH
52988: LD_INT 0
52990: PUSH
52991: EMPTY
52992: LIST
52993: LIST
52994: PUSH
52995: LD_INT 1
52997: PUSH
52998: LD_INT 1
53000: PUSH
53001: EMPTY
53002: LIST
53003: LIST
53004: PUSH
53005: LD_INT 0
53007: PUSH
53008: LD_INT 1
53010: PUSH
53011: EMPTY
53012: LIST
53013: LIST
53014: PUSH
53015: LD_INT 1
53017: NEG
53018: PUSH
53019: LD_INT 0
53021: PUSH
53022: EMPTY
53023: LIST
53024: LIST
53025: PUSH
53026: LD_INT 1
53028: NEG
53029: PUSH
53030: LD_INT 1
53032: NEG
53033: PUSH
53034: EMPTY
53035: LIST
53036: LIST
53037: PUSH
53038: LD_INT 1
53040: NEG
53041: PUSH
53042: LD_INT 2
53044: NEG
53045: PUSH
53046: EMPTY
53047: LIST
53048: LIST
53049: PUSH
53050: LD_INT 0
53052: PUSH
53053: LD_INT 2
53055: NEG
53056: PUSH
53057: EMPTY
53058: LIST
53059: LIST
53060: PUSH
53061: LD_INT 1
53063: PUSH
53064: LD_INT 1
53066: NEG
53067: PUSH
53068: EMPTY
53069: LIST
53070: LIST
53071: PUSH
53072: LD_INT 2
53074: PUSH
53075: LD_INT 0
53077: PUSH
53078: EMPTY
53079: LIST
53080: LIST
53081: PUSH
53082: LD_INT 2
53084: PUSH
53085: LD_INT 1
53087: PUSH
53088: EMPTY
53089: LIST
53090: LIST
53091: PUSH
53092: LD_INT 2
53094: PUSH
53095: LD_INT 2
53097: PUSH
53098: EMPTY
53099: LIST
53100: LIST
53101: PUSH
53102: LD_INT 1
53104: PUSH
53105: LD_INT 2
53107: PUSH
53108: EMPTY
53109: LIST
53110: LIST
53111: PUSH
53112: LD_INT 0
53114: PUSH
53115: LD_INT 2
53117: PUSH
53118: EMPTY
53119: LIST
53120: LIST
53121: PUSH
53122: LD_INT 1
53124: NEG
53125: PUSH
53126: LD_INT 1
53128: PUSH
53129: EMPTY
53130: LIST
53131: LIST
53132: PUSH
53133: LD_INT 2
53135: NEG
53136: PUSH
53137: LD_INT 0
53139: PUSH
53140: EMPTY
53141: LIST
53142: LIST
53143: PUSH
53144: LD_INT 2
53146: NEG
53147: PUSH
53148: LD_INT 1
53150: NEG
53151: PUSH
53152: EMPTY
53153: LIST
53154: LIST
53155: PUSH
53156: LD_INT 2
53158: NEG
53159: PUSH
53160: LD_INT 2
53162: NEG
53163: PUSH
53164: EMPTY
53165: LIST
53166: LIST
53167: PUSH
53168: EMPTY
53169: LIST
53170: LIST
53171: LIST
53172: LIST
53173: LIST
53174: LIST
53175: LIST
53176: LIST
53177: LIST
53178: LIST
53179: LIST
53180: LIST
53181: LIST
53182: LIST
53183: LIST
53184: LIST
53185: LIST
53186: LIST
53187: LIST
53188: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53189: LD_ADDR_VAR 0 59
53193: PUSH
53194: LD_INT 0
53196: PUSH
53197: LD_INT 0
53199: PUSH
53200: EMPTY
53201: LIST
53202: LIST
53203: PUSH
53204: LD_INT 0
53206: PUSH
53207: LD_INT 1
53209: NEG
53210: PUSH
53211: EMPTY
53212: LIST
53213: LIST
53214: PUSH
53215: LD_INT 1
53217: PUSH
53218: LD_INT 0
53220: PUSH
53221: EMPTY
53222: LIST
53223: LIST
53224: PUSH
53225: LD_INT 1
53227: PUSH
53228: LD_INT 1
53230: PUSH
53231: EMPTY
53232: LIST
53233: LIST
53234: PUSH
53235: LD_INT 0
53237: PUSH
53238: LD_INT 1
53240: PUSH
53241: EMPTY
53242: LIST
53243: LIST
53244: PUSH
53245: LD_INT 1
53247: NEG
53248: PUSH
53249: LD_INT 0
53251: PUSH
53252: EMPTY
53253: LIST
53254: LIST
53255: PUSH
53256: LD_INT 1
53258: NEG
53259: PUSH
53260: LD_INT 1
53262: NEG
53263: PUSH
53264: EMPTY
53265: LIST
53266: LIST
53267: PUSH
53268: EMPTY
53269: LIST
53270: LIST
53271: LIST
53272: LIST
53273: LIST
53274: LIST
53275: LIST
53276: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53277: LD_ADDR_VAR 0 60
53281: PUSH
53282: LD_INT 0
53284: PUSH
53285: LD_INT 0
53287: PUSH
53288: EMPTY
53289: LIST
53290: LIST
53291: PUSH
53292: LD_INT 0
53294: PUSH
53295: LD_INT 1
53297: NEG
53298: PUSH
53299: EMPTY
53300: LIST
53301: LIST
53302: PUSH
53303: LD_INT 1
53305: PUSH
53306: LD_INT 0
53308: PUSH
53309: EMPTY
53310: LIST
53311: LIST
53312: PUSH
53313: LD_INT 1
53315: PUSH
53316: LD_INT 1
53318: PUSH
53319: EMPTY
53320: LIST
53321: LIST
53322: PUSH
53323: LD_INT 0
53325: PUSH
53326: LD_INT 1
53328: PUSH
53329: EMPTY
53330: LIST
53331: LIST
53332: PUSH
53333: LD_INT 1
53335: NEG
53336: PUSH
53337: LD_INT 0
53339: PUSH
53340: EMPTY
53341: LIST
53342: LIST
53343: PUSH
53344: LD_INT 1
53346: NEG
53347: PUSH
53348: LD_INT 1
53350: NEG
53351: PUSH
53352: EMPTY
53353: LIST
53354: LIST
53355: PUSH
53356: EMPTY
53357: LIST
53358: LIST
53359: LIST
53360: LIST
53361: LIST
53362: LIST
53363: LIST
53364: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53365: LD_ADDR_VAR 0 61
53369: PUSH
53370: LD_INT 0
53372: PUSH
53373: LD_INT 0
53375: PUSH
53376: EMPTY
53377: LIST
53378: LIST
53379: PUSH
53380: LD_INT 0
53382: PUSH
53383: LD_INT 1
53385: NEG
53386: PUSH
53387: EMPTY
53388: LIST
53389: LIST
53390: PUSH
53391: LD_INT 1
53393: PUSH
53394: LD_INT 0
53396: PUSH
53397: EMPTY
53398: LIST
53399: LIST
53400: PUSH
53401: LD_INT 1
53403: PUSH
53404: LD_INT 1
53406: PUSH
53407: EMPTY
53408: LIST
53409: LIST
53410: PUSH
53411: LD_INT 0
53413: PUSH
53414: LD_INT 1
53416: PUSH
53417: EMPTY
53418: LIST
53419: LIST
53420: PUSH
53421: LD_INT 1
53423: NEG
53424: PUSH
53425: LD_INT 0
53427: PUSH
53428: EMPTY
53429: LIST
53430: LIST
53431: PUSH
53432: LD_INT 1
53434: NEG
53435: PUSH
53436: LD_INT 1
53438: NEG
53439: PUSH
53440: EMPTY
53441: LIST
53442: LIST
53443: PUSH
53444: EMPTY
53445: LIST
53446: LIST
53447: LIST
53448: LIST
53449: LIST
53450: LIST
53451: LIST
53452: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53453: LD_ADDR_VAR 0 62
53457: PUSH
53458: LD_INT 0
53460: PUSH
53461: LD_INT 0
53463: PUSH
53464: EMPTY
53465: LIST
53466: LIST
53467: PUSH
53468: LD_INT 0
53470: PUSH
53471: LD_INT 1
53473: NEG
53474: PUSH
53475: EMPTY
53476: LIST
53477: LIST
53478: PUSH
53479: LD_INT 1
53481: PUSH
53482: LD_INT 0
53484: PUSH
53485: EMPTY
53486: LIST
53487: LIST
53488: PUSH
53489: LD_INT 1
53491: PUSH
53492: LD_INT 1
53494: PUSH
53495: EMPTY
53496: LIST
53497: LIST
53498: PUSH
53499: LD_INT 0
53501: PUSH
53502: LD_INT 1
53504: PUSH
53505: EMPTY
53506: LIST
53507: LIST
53508: PUSH
53509: LD_INT 1
53511: NEG
53512: PUSH
53513: LD_INT 0
53515: PUSH
53516: EMPTY
53517: LIST
53518: LIST
53519: PUSH
53520: LD_INT 1
53522: NEG
53523: PUSH
53524: LD_INT 1
53526: NEG
53527: PUSH
53528: EMPTY
53529: LIST
53530: LIST
53531: PUSH
53532: EMPTY
53533: LIST
53534: LIST
53535: LIST
53536: LIST
53537: LIST
53538: LIST
53539: LIST
53540: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53541: LD_ADDR_VAR 0 63
53545: PUSH
53546: LD_INT 0
53548: PUSH
53549: LD_INT 0
53551: PUSH
53552: EMPTY
53553: LIST
53554: LIST
53555: PUSH
53556: LD_INT 0
53558: PUSH
53559: LD_INT 1
53561: NEG
53562: PUSH
53563: EMPTY
53564: LIST
53565: LIST
53566: PUSH
53567: LD_INT 1
53569: PUSH
53570: LD_INT 0
53572: PUSH
53573: EMPTY
53574: LIST
53575: LIST
53576: PUSH
53577: LD_INT 1
53579: PUSH
53580: LD_INT 1
53582: PUSH
53583: EMPTY
53584: LIST
53585: LIST
53586: PUSH
53587: LD_INT 0
53589: PUSH
53590: LD_INT 1
53592: PUSH
53593: EMPTY
53594: LIST
53595: LIST
53596: PUSH
53597: LD_INT 1
53599: NEG
53600: PUSH
53601: LD_INT 0
53603: PUSH
53604: EMPTY
53605: LIST
53606: LIST
53607: PUSH
53608: LD_INT 1
53610: NEG
53611: PUSH
53612: LD_INT 1
53614: NEG
53615: PUSH
53616: EMPTY
53617: LIST
53618: LIST
53619: PUSH
53620: EMPTY
53621: LIST
53622: LIST
53623: LIST
53624: LIST
53625: LIST
53626: LIST
53627: LIST
53628: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53629: LD_ADDR_VAR 0 64
53633: PUSH
53634: LD_INT 0
53636: PUSH
53637: LD_INT 0
53639: PUSH
53640: EMPTY
53641: LIST
53642: LIST
53643: PUSH
53644: LD_INT 0
53646: PUSH
53647: LD_INT 1
53649: NEG
53650: PUSH
53651: EMPTY
53652: LIST
53653: LIST
53654: PUSH
53655: LD_INT 1
53657: PUSH
53658: LD_INT 0
53660: PUSH
53661: EMPTY
53662: LIST
53663: LIST
53664: PUSH
53665: LD_INT 1
53667: PUSH
53668: LD_INT 1
53670: PUSH
53671: EMPTY
53672: LIST
53673: LIST
53674: PUSH
53675: LD_INT 0
53677: PUSH
53678: LD_INT 1
53680: PUSH
53681: EMPTY
53682: LIST
53683: LIST
53684: PUSH
53685: LD_INT 1
53687: NEG
53688: PUSH
53689: LD_INT 0
53691: PUSH
53692: EMPTY
53693: LIST
53694: LIST
53695: PUSH
53696: LD_INT 1
53698: NEG
53699: PUSH
53700: LD_INT 1
53702: NEG
53703: PUSH
53704: EMPTY
53705: LIST
53706: LIST
53707: PUSH
53708: EMPTY
53709: LIST
53710: LIST
53711: LIST
53712: LIST
53713: LIST
53714: LIST
53715: LIST
53716: ST_TO_ADDR
// end ; 1 :
53717: GO 59614
53719: LD_INT 1
53721: DOUBLE
53722: EQUAL
53723: IFTRUE 53727
53725: GO 56350
53727: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53728: LD_ADDR_VAR 0 11
53732: PUSH
53733: LD_INT 1
53735: NEG
53736: PUSH
53737: LD_INT 3
53739: NEG
53740: PUSH
53741: EMPTY
53742: LIST
53743: LIST
53744: PUSH
53745: LD_INT 0
53747: PUSH
53748: LD_INT 3
53750: NEG
53751: PUSH
53752: EMPTY
53753: LIST
53754: LIST
53755: PUSH
53756: LD_INT 1
53758: PUSH
53759: LD_INT 2
53761: NEG
53762: PUSH
53763: EMPTY
53764: LIST
53765: LIST
53766: PUSH
53767: EMPTY
53768: LIST
53769: LIST
53770: LIST
53771: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53772: LD_ADDR_VAR 0 12
53776: PUSH
53777: LD_INT 2
53779: PUSH
53780: LD_INT 1
53782: NEG
53783: PUSH
53784: EMPTY
53785: LIST
53786: LIST
53787: PUSH
53788: LD_INT 3
53790: PUSH
53791: LD_INT 0
53793: PUSH
53794: EMPTY
53795: LIST
53796: LIST
53797: PUSH
53798: LD_INT 3
53800: PUSH
53801: LD_INT 1
53803: PUSH
53804: EMPTY
53805: LIST
53806: LIST
53807: PUSH
53808: EMPTY
53809: LIST
53810: LIST
53811: LIST
53812: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53813: LD_ADDR_VAR 0 13
53817: PUSH
53818: LD_INT 3
53820: PUSH
53821: LD_INT 2
53823: PUSH
53824: EMPTY
53825: LIST
53826: LIST
53827: PUSH
53828: LD_INT 3
53830: PUSH
53831: LD_INT 3
53833: PUSH
53834: EMPTY
53835: LIST
53836: LIST
53837: PUSH
53838: LD_INT 2
53840: PUSH
53841: LD_INT 3
53843: PUSH
53844: EMPTY
53845: LIST
53846: LIST
53847: PUSH
53848: EMPTY
53849: LIST
53850: LIST
53851: LIST
53852: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53853: LD_ADDR_VAR 0 14
53857: PUSH
53858: LD_INT 1
53860: PUSH
53861: LD_INT 3
53863: PUSH
53864: EMPTY
53865: LIST
53866: LIST
53867: PUSH
53868: LD_INT 0
53870: PUSH
53871: LD_INT 3
53873: PUSH
53874: EMPTY
53875: LIST
53876: LIST
53877: PUSH
53878: LD_INT 1
53880: NEG
53881: PUSH
53882: LD_INT 2
53884: PUSH
53885: EMPTY
53886: LIST
53887: LIST
53888: PUSH
53889: EMPTY
53890: LIST
53891: LIST
53892: LIST
53893: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53894: LD_ADDR_VAR 0 15
53898: PUSH
53899: LD_INT 2
53901: NEG
53902: PUSH
53903: LD_INT 1
53905: PUSH
53906: EMPTY
53907: LIST
53908: LIST
53909: PUSH
53910: LD_INT 3
53912: NEG
53913: PUSH
53914: LD_INT 0
53916: PUSH
53917: EMPTY
53918: LIST
53919: LIST
53920: PUSH
53921: LD_INT 3
53923: NEG
53924: PUSH
53925: LD_INT 1
53927: NEG
53928: PUSH
53929: EMPTY
53930: LIST
53931: LIST
53932: PUSH
53933: EMPTY
53934: LIST
53935: LIST
53936: LIST
53937: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53938: LD_ADDR_VAR 0 16
53942: PUSH
53943: LD_INT 2
53945: NEG
53946: PUSH
53947: LD_INT 3
53949: NEG
53950: PUSH
53951: EMPTY
53952: LIST
53953: LIST
53954: PUSH
53955: LD_INT 3
53957: NEG
53958: PUSH
53959: LD_INT 2
53961: NEG
53962: PUSH
53963: EMPTY
53964: LIST
53965: LIST
53966: PUSH
53967: LD_INT 3
53969: NEG
53970: PUSH
53971: LD_INT 3
53973: NEG
53974: PUSH
53975: EMPTY
53976: LIST
53977: LIST
53978: PUSH
53979: EMPTY
53980: LIST
53981: LIST
53982: LIST
53983: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53984: LD_ADDR_VAR 0 17
53988: PUSH
53989: LD_INT 1
53991: NEG
53992: PUSH
53993: LD_INT 3
53995: NEG
53996: PUSH
53997: EMPTY
53998: LIST
53999: LIST
54000: PUSH
54001: LD_INT 0
54003: PUSH
54004: LD_INT 3
54006: NEG
54007: PUSH
54008: EMPTY
54009: LIST
54010: LIST
54011: PUSH
54012: LD_INT 1
54014: PUSH
54015: LD_INT 2
54017: NEG
54018: PUSH
54019: EMPTY
54020: LIST
54021: LIST
54022: PUSH
54023: EMPTY
54024: LIST
54025: LIST
54026: LIST
54027: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54028: LD_ADDR_VAR 0 18
54032: PUSH
54033: LD_INT 2
54035: PUSH
54036: LD_INT 1
54038: NEG
54039: PUSH
54040: EMPTY
54041: LIST
54042: LIST
54043: PUSH
54044: LD_INT 3
54046: PUSH
54047: LD_INT 0
54049: PUSH
54050: EMPTY
54051: LIST
54052: LIST
54053: PUSH
54054: LD_INT 3
54056: PUSH
54057: LD_INT 1
54059: PUSH
54060: EMPTY
54061: LIST
54062: LIST
54063: PUSH
54064: EMPTY
54065: LIST
54066: LIST
54067: LIST
54068: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54069: LD_ADDR_VAR 0 19
54073: PUSH
54074: LD_INT 3
54076: PUSH
54077: LD_INT 2
54079: PUSH
54080: EMPTY
54081: LIST
54082: LIST
54083: PUSH
54084: LD_INT 3
54086: PUSH
54087: LD_INT 3
54089: PUSH
54090: EMPTY
54091: LIST
54092: LIST
54093: PUSH
54094: LD_INT 2
54096: PUSH
54097: LD_INT 3
54099: PUSH
54100: EMPTY
54101: LIST
54102: LIST
54103: PUSH
54104: EMPTY
54105: LIST
54106: LIST
54107: LIST
54108: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54109: LD_ADDR_VAR 0 20
54113: PUSH
54114: LD_INT 1
54116: PUSH
54117: LD_INT 3
54119: PUSH
54120: EMPTY
54121: LIST
54122: LIST
54123: PUSH
54124: LD_INT 0
54126: PUSH
54127: LD_INT 3
54129: PUSH
54130: EMPTY
54131: LIST
54132: LIST
54133: PUSH
54134: LD_INT 1
54136: NEG
54137: PUSH
54138: LD_INT 2
54140: PUSH
54141: EMPTY
54142: LIST
54143: LIST
54144: PUSH
54145: EMPTY
54146: LIST
54147: LIST
54148: LIST
54149: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54150: LD_ADDR_VAR 0 21
54154: PUSH
54155: LD_INT 2
54157: NEG
54158: PUSH
54159: LD_INT 1
54161: PUSH
54162: EMPTY
54163: LIST
54164: LIST
54165: PUSH
54166: LD_INT 3
54168: NEG
54169: PUSH
54170: LD_INT 0
54172: PUSH
54173: EMPTY
54174: LIST
54175: LIST
54176: PUSH
54177: LD_INT 3
54179: NEG
54180: PUSH
54181: LD_INT 1
54183: NEG
54184: PUSH
54185: EMPTY
54186: LIST
54187: LIST
54188: PUSH
54189: EMPTY
54190: LIST
54191: LIST
54192: LIST
54193: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54194: LD_ADDR_VAR 0 22
54198: PUSH
54199: LD_INT 2
54201: NEG
54202: PUSH
54203: LD_INT 3
54205: NEG
54206: PUSH
54207: EMPTY
54208: LIST
54209: LIST
54210: PUSH
54211: LD_INT 3
54213: NEG
54214: PUSH
54215: LD_INT 2
54217: NEG
54218: PUSH
54219: EMPTY
54220: LIST
54221: LIST
54222: PUSH
54223: LD_INT 3
54225: NEG
54226: PUSH
54227: LD_INT 3
54229: NEG
54230: PUSH
54231: EMPTY
54232: LIST
54233: LIST
54234: PUSH
54235: EMPTY
54236: LIST
54237: LIST
54238: LIST
54239: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
54240: LD_ADDR_VAR 0 23
54244: PUSH
54245: LD_INT 0
54247: PUSH
54248: LD_INT 3
54250: NEG
54251: PUSH
54252: EMPTY
54253: LIST
54254: LIST
54255: PUSH
54256: LD_INT 1
54258: NEG
54259: PUSH
54260: LD_INT 4
54262: NEG
54263: PUSH
54264: EMPTY
54265: LIST
54266: LIST
54267: PUSH
54268: LD_INT 1
54270: PUSH
54271: LD_INT 3
54273: NEG
54274: PUSH
54275: EMPTY
54276: LIST
54277: LIST
54278: PUSH
54279: EMPTY
54280: LIST
54281: LIST
54282: LIST
54283: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
54284: LD_ADDR_VAR 0 24
54288: PUSH
54289: LD_INT 3
54291: PUSH
54292: LD_INT 0
54294: PUSH
54295: EMPTY
54296: LIST
54297: LIST
54298: PUSH
54299: LD_INT 3
54301: PUSH
54302: LD_INT 1
54304: NEG
54305: PUSH
54306: EMPTY
54307: LIST
54308: LIST
54309: PUSH
54310: LD_INT 4
54312: PUSH
54313: LD_INT 1
54315: PUSH
54316: EMPTY
54317: LIST
54318: LIST
54319: PUSH
54320: EMPTY
54321: LIST
54322: LIST
54323: LIST
54324: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
54325: LD_ADDR_VAR 0 25
54329: PUSH
54330: LD_INT 3
54332: PUSH
54333: LD_INT 3
54335: PUSH
54336: EMPTY
54337: LIST
54338: LIST
54339: PUSH
54340: LD_INT 4
54342: PUSH
54343: LD_INT 3
54345: PUSH
54346: EMPTY
54347: LIST
54348: LIST
54349: PUSH
54350: LD_INT 3
54352: PUSH
54353: LD_INT 4
54355: PUSH
54356: EMPTY
54357: LIST
54358: LIST
54359: PUSH
54360: EMPTY
54361: LIST
54362: LIST
54363: LIST
54364: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
54365: LD_ADDR_VAR 0 26
54369: PUSH
54370: LD_INT 0
54372: PUSH
54373: LD_INT 3
54375: PUSH
54376: EMPTY
54377: LIST
54378: LIST
54379: PUSH
54380: LD_INT 1
54382: PUSH
54383: LD_INT 4
54385: PUSH
54386: EMPTY
54387: LIST
54388: LIST
54389: PUSH
54390: LD_INT 1
54392: NEG
54393: PUSH
54394: LD_INT 3
54396: PUSH
54397: EMPTY
54398: LIST
54399: LIST
54400: PUSH
54401: EMPTY
54402: LIST
54403: LIST
54404: LIST
54405: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
54406: LD_ADDR_VAR 0 27
54410: PUSH
54411: LD_INT 3
54413: NEG
54414: PUSH
54415: LD_INT 0
54417: PUSH
54418: EMPTY
54419: LIST
54420: LIST
54421: PUSH
54422: LD_INT 3
54424: NEG
54425: PUSH
54426: LD_INT 1
54428: PUSH
54429: EMPTY
54430: LIST
54431: LIST
54432: PUSH
54433: LD_INT 4
54435: NEG
54436: PUSH
54437: LD_INT 1
54439: NEG
54440: PUSH
54441: EMPTY
54442: LIST
54443: LIST
54444: PUSH
54445: EMPTY
54446: LIST
54447: LIST
54448: LIST
54449: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
54450: LD_ADDR_VAR 0 28
54454: PUSH
54455: LD_INT 3
54457: NEG
54458: PUSH
54459: LD_INT 3
54461: NEG
54462: PUSH
54463: EMPTY
54464: LIST
54465: LIST
54466: PUSH
54467: LD_INT 3
54469: NEG
54470: PUSH
54471: LD_INT 4
54473: NEG
54474: PUSH
54475: EMPTY
54476: LIST
54477: LIST
54478: PUSH
54479: LD_INT 4
54481: NEG
54482: PUSH
54483: LD_INT 3
54485: NEG
54486: PUSH
54487: EMPTY
54488: LIST
54489: LIST
54490: PUSH
54491: EMPTY
54492: LIST
54493: LIST
54494: LIST
54495: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
54496: LD_ADDR_VAR 0 29
54500: PUSH
54501: LD_INT 1
54503: NEG
54504: PUSH
54505: LD_INT 3
54507: NEG
54508: PUSH
54509: EMPTY
54510: LIST
54511: LIST
54512: PUSH
54513: LD_INT 0
54515: PUSH
54516: LD_INT 3
54518: NEG
54519: PUSH
54520: EMPTY
54521: LIST
54522: LIST
54523: PUSH
54524: LD_INT 1
54526: PUSH
54527: LD_INT 2
54529: NEG
54530: PUSH
54531: EMPTY
54532: LIST
54533: LIST
54534: PUSH
54535: LD_INT 1
54537: NEG
54538: PUSH
54539: LD_INT 4
54541: NEG
54542: PUSH
54543: EMPTY
54544: LIST
54545: LIST
54546: PUSH
54547: LD_INT 0
54549: PUSH
54550: LD_INT 4
54552: NEG
54553: PUSH
54554: EMPTY
54555: LIST
54556: LIST
54557: PUSH
54558: LD_INT 1
54560: PUSH
54561: LD_INT 3
54563: NEG
54564: PUSH
54565: EMPTY
54566: LIST
54567: LIST
54568: PUSH
54569: LD_INT 1
54571: NEG
54572: PUSH
54573: LD_INT 5
54575: NEG
54576: PUSH
54577: EMPTY
54578: LIST
54579: LIST
54580: PUSH
54581: LD_INT 0
54583: PUSH
54584: LD_INT 5
54586: NEG
54587: PUSH
54588: EMPTY
54589: LIST
54590: LIST
54591: PUSH
54592: LD_INT 1
54594: PUSH
54595: LD_INT 4
54597: NEG
54598: PUSH
54599: EMPTY
54600: LIST
54601: LIST
54602: PUSH
54603: LD_INT 1
54605: NEG
54606: PUSH
54607: LD_INT 6
54609: NEG
54610: PUSH
54611: EMPTY
54612: LIST
54613: LIST
54614: PUSH
54615: LD_INT 0
54617: PUSH
54618: LD_INT 6
54620: NEG
54621: PUSH
54622: EMPTY
54623: LIST
54624: LIST
54625: PUSH
54626: LD_INT 1
54628: PUSH
54629: LD_INT 5
54631: NEG
54632: PUSH
54633: EMPTY
54634: LIST
54635: LIST
54636: PUSH
54637: EMPTY
54638: LIST
54639: LIST
54640: LIST
54641: LIST
54642: LIST
54643: LIST
54644: LIST
54645: LIST
54646: LIST
54647: LIST
54648: LIST
54649: LIST
54650: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
54651: LD_ADDR_VAR 0 30
54655: PUSH
54656: LD_INT 2
54658: PUSH
54659: LD_INT 1
54661: NEG
54662: PUSH
54663: EMPTY
54664: LIST
54665: LIST
54666: PUSH
54667: LD_INT 3
54669: PUSH
54670: LD_INT 0
54672: PUSH
54673: EMPTY
54674: LIST
54675: LIST
54676: PUSH
54677: LD_INT 3
54679: PUSH
54680: LD_INT 1
54682: PUSH
54683: EMPTY
54684: LIST
54685: LIST
54686: PUSH
54687: LD_INT 3
54689: PUSH
54690: LD_INT 1
54692: NEG
54693: PUSH
54694: EMPTY
54695: LIST
54696: LIST
54697: PUSH
54698: LD_INT 4
54700: PUSH
54701: LD_INT 0
54703: PUSH
54704: EMPTY
54705: LIST
54706: LIST
54707: PUSH
54708: LD_INT 4
54710: PUSH
54711: LD_INT 1
54713: PUSH
54714: EMPTY
54715: LIST
54716: LIST
54717: PUSH
54718: LD_INT 4
54720: PUSH
54721: LD_INT 1
54723: NEG
54724: PUSH
54725: EMPTY
54726: LIST
54727: LIST
54728: PUSH
54729: LD_INT 5
54731: PUSH
54732: LD_INT 0
54734: PUSH
54735: EMPTY
54736: LIST
54737: LIST
54738: PUSH
54739: LD_INT 5
54741: PUSH
54742: LD_INT 1
54744: PUSH
54745: EMPTY
54746: LIST
54747: LIST
54748: PUSH
54749: LD_INT 5
54751: PUSH
54752: LD_INT 1
54754: NEG
54755: PUSH
54756: EMPTY
54757: LIST
54758: LIST
54759: PUSH
54760: LD_INT 6
54762: PUSH
54763: LD_INT 0
54765: PUSH
54766: EMPTY
54767: LIST
54768: LIST
54769: PUSH
54770: LD_INT 6
54772: PUSH
54773: LD_INT 1
54775: PUSH
54776: EMPTY
54777: LIST
54778: LIST
54779: PUSH
54780: EMPTY
54781: LIST
54782: LIST
54783: LIST
54784: LIST
54785: LIST
54786: LIST
54787: LIST
54788: LIST
54789: LIST
54790: LIST
54791: LIST
54792: LIST
54793: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
54794: LD_ADDR_VAR 0 31
54798: PUSH
54799: LD_INT 3
54801: PUSH
54802: LD_INT 2
54804: PUSH
54805: EMPTY
54806: LIST
54807: LIST
54808: PUSH
54809: LD_INT 3
54811: PUSH
54812: LD_INT 3
54814: PUSH
54815: EMPTY
54816: LIST
54817: LIST
54818: PUSH
54819: LD_INT 2
54821: PUSH
54822: LD_INT 3
54824: PUSH
54825: EMPTY
54826: LIST
54827: LIST
54828: PUSH
54829: LD_INT 4
54831: PUSH
54832: LD_INT 3
54834: PUSH
54835: EMPTY
54836: LIST
54837: LIST
54838: PUSH
54839: LD_INT 4
54841: PUSH
54842: LD_INT 4
54844: PUSH
54845: EMPTY
54846: LIST
54847: LIST
54848: PUSH
54849: LD_INT 3
54851: PUSH
54852: LD_INT 4
54854: PUSH
54855: EMPTY
54856: LIST
54857: LIST
54858: PUSH
54859: LD_INT 5
54861: PUSH
54862: LD_INT 4
54864: PUSH
54865: EMPTY
54866: LIST
54867: LIST
54868: PUSH
54869: LD_INT 5
54871: PUSH
54872: LD_INT 5
54874: PUSH
54875: EMPTY
54876: LIST
54877: LIST
54878: PUSH
54879: LD_INT 4
54881: PUSH
54882: LD_INT 5
54884: PUSH
54885: EMPTY
54886: LIST
54887: LIST
54888: PUSH
54889: LD_INT 6
54891: PUSH
54892: LD_INT 5
54894: PUSH
54895: EMPTY
54896: LIST
54897: LIST
54898: PUSH
54899: LD_INT 6
54901: PUSH
54902: LD_INT 6
54904: PUSH
54905: EMPTY
54906: LIST
54907: LIST
54908: PUSH
54909: LD_INT 5
54911: PUSH
54912: LD_INT 6
54914: PUSH
54915: EMPTY
54916: LIST
54917: LIST
54918: PUSH
54919: EMPTY
54920: LIST
54921: LIST
54922: LIST
54923: LIST
54924: LIST
54925: LIST
54926: LIST
54927: LIST
54928: LIST
54929: LIST
54930: LIST
54931: LIST
54932: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
54933: LD_ADDR_VAR 0 32
54937: PUSH
54938: LD_INT 1
54940: PUSH
54941: LD_INT 3
54943: PUSH
54944: EMPTY
54945: LIST
54946: LIST
54947: PUSH
54948: LD_INT 0
54950: PUSH
54951: LD_INT 3
54953: PUSH
54954: EMPTY
54955: LIST
54956: LIST
54957: PUSH
54958: LD_INT 1
54960: NEG
54961: PUSH
54962: LD_INT 2
54964: PUSH
54965: EMPTY
54966: LIST
54967: LIST
54968: PUSH
54969: LD_INT 1
54971: PUSH
54972: LD_INT 4
54974: PUSH
54975: EMPTY
54976: LIST
54977: LIST
54978: PUSH
54979: LD_INT 0
54981: PUSH
54982: LD_INT 4
54984: PUSH
54985: EMPTY
54986: LIST
54987: LIST
54988: PUSH
54989: LD_INT 1
54991: NEG
54992: PUSH
54993: LD_INT 3
54995: PUSH
54996: EMPTY
54997: LIST
54998: LIST
54999: PUSH
55000: LD_INT 1
55002: PUSH
55003: LD_INT 5
55005: PUSH
55006: EMPTY
55007: LIST
55008: LIST
55009: PUSH
55010: LD_INT 0
55012: PUSH
55013: LD_INT 5
55015: PUSH
55016: EMPTY
55017: LIST
55018: LIST
55019: PUSH
55020: LD_INT 1
55022: NEG
55023: PUSH
55024: LD_INT 4
55026: PUSH
55027: EMPTY
55028: LIST
55029: LIST
55030: PUSH
55031: LD_INT 1
55033: PUSH
55034: LD_INT 6
55036: PUSH
55037: EMPTY
55038: LIST
55039: LIST
55040: PUSH
55041: LD_INT 0
55043: PUSH
55044: LD_INT 6
55046: PUSH
55047: EMPTY
55048: LIST
55049: LIST
55050: PUSH
55051: LD_INT 1
55053: NEG
55054: PUSH
55055: LD_INT 5
55057: PUSH
55058: EMPTY
55059: LIST
55060: LIST
55061: PUSH
55062: EMPTY
55063: LIST
55064: LIST
55065: LIST
55066: LIST
55067: LIST
55068: LIST
55069: LIST
55070: LIST
55071: LIST
55072: LIST
55073: LIST
55074: LIST
55075: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
55076: LD_ADDR_VAR 0 33
55080: PUSH
55081: LD_INT 2
55083: NEG
55084: PUSH
55085: LD_INT 1
55087: PUSH
55088: EMPTY
55089: LIST
55090: LIST
55091: PUSH
55092: LD_INT 3
55094: NEG
55095: PUSH
55096: LD_INT 0
55098: PUSH
55099: EMPTY
55100: LIST
55101: LIST
55102: PUSH
55103: LD_INT 3
55105: NEG
55106: PUSH
55107: LD_INT 1
55109: NEG
55110: PUSH
55111: EMPTY
55112: LIST
55113: LIST
55114: PUSH
55115: LD_INT 3
55117: NEG
55118: PUSH
55119: LD_INT 1
55121: PUSH
55122: EMPTY
55123: LIST
55124: LIST
55125: PUSH
55126: LD_INT 4
55128: NEG
55129: PUSH
55130: LD_INT 0
55132: PUSH
55133: EMPTY
55134: LIST
55135: LIST
55136: PUSH
55137: LD_INT 4
55139: NEG
55140: PUSH
55141: LD_INT 1
55143: NEG
55144: PUSH
55145: EMPTY
55146: LIST
55147: LIST
55148: PUSH
55149: LD_INT 4
55151: NEG
55152: PUSH
55153: LD_INT 1
55155: PUSH
55156: EMPTY
55157: LIST
55158: LIST
55159: PUSH
55160: LD_INT 5
55162: NEG
55163: PUSH
55164: LD_INT 0
55166: PUSH
55167: EMPTY
55168: LIST
55169: LIST
55170: PUSH
55171: LD_INT 5
55173: NEG
55174: PUSH
55175: LD_INT 1
55177: NEG
55178: PUSH
55179: EMPTY
55180: LIST
55181: LIST
55182: PUSH
55183: LD_INT 5
55185: NEG
55186: PUSH
55187: LD_INT 1
55189: PUSH
55190: EMPTY
55191: LIST
55192: LIST
55193: PUSH
55194: LD_INT 6
55196: NEG
55197: PUSH
55198: LD_INT 0
55200: PUSH
55201: EMPTY
55202: LIST
55203: LIST
55204: PUSH
55205: LD_INT 6
55207: NEG
55208: PUSH
55209: LD_INT 1
55211: NEG
55212: PUSH
55213: EMPTY
55214: LIST
55215: LIST
55216: PUSH
55217: EMPTY
55218: LIST
55219: LIST
55220: LIST
55221: LIST
55222: LIST
55223: LIST
55224: LIST
55225: LIST
55226: LIST
55227: LIST
55228: LIST
55229: LIST
55230: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
55231: LD_ADDR_VAR 0 34
55235: PUSH
55236: LD_INT 2
55238: NEG
55239: PUSH
55240: LD_INT 3
55242: NEG
55243: PUSH
55244: EMPTY
55245: LIST
55246: LIST
55247: PUSH
55248: LD_INT 3
55250: NEG
55251: PUSH
55252: LD_INT 2
55254: NEG
55255: PUSH
55256: EMPTY
55257: LIST
55258: LIST
55259: PUSH
55260: LD_INT 3
55262: NEG
55263: PUSH
55264: LD_INT 3
55266: NEG
55267: PUSH
55268: EMPTY
55269: LIST
55270: LIST
55271: PUSH
55272: LD_INT 3
55274: NEG
55275: PUSH
55276: LD_INT 4
55278: NEG
55279: PUSH
55280: EMPTY
55281: LIST
55282: LIST
55283: PUSH
55284: LD_INT 4
55286: NEG
55287: PUSH
55288: LD_INT 3
55290: NEG
55291: PUSH
55292: EMPTY
55293: LIST
55294: LIST
55295: PUSH
55296: LD_INT 4
55298: NEG
55299: PUSH
55300: LD_INT 4
55302: NEG
55303: PUSH
55304: EMPTY
55305: LIST
55306: LIST
55307: PUSH
55308: LD_INT 4
55310: NEG
55311: PUSH
55312: LD_INT 5
55314: NEG
55315: PUSH
55316: EMPTY
55317: LIST
55318: LIST
55319: PUSH
55320: LD_INT 5
55322: NEG
55323: PUSH
55324: LD_INT 4
55326: NEG
55327: PUSH
55328: EMPTY
55329: LIST
55330: LIST
55331: PUSH
55332: LD_INT 5
55334: NEG
55335: PUSH
55336: LD_INT 5
55338: NEG
55339: PUSH
55340: EMPTY
55341: LIST
55342: LIST
55343: PUSH
55344: LD_INT 5
55346: NEG
55347: PUSH
55348: LD_INT 6
55350: NEG
55351: PUSH
55352: EMPTY
55353: LIST
55354: LIST
55355: PUSH
55356: LD_INT 6
55358: NEG
55359: PUSH
55360: LD_INT 5
55362: NEG
55363: PUSH
55364: EMPTY
55365: LIST
55366: LIST
55367: PUSH
55368: LD_INT 6
55370: NEG
55371: PUSH
55372: LD_INT 6
55374: NEG
55375: PUSH
55376: EMPTY
55377: LIST
55378: LIST
55379: PUSH
55380: EMPTY
55381: LIST
55382: LIST
55383: LIST
55384: LIST
55385: LIST
55386: LIST
55387: LIST
55388: LIST
55389: LIST
55390: LIST
55391: LIST
55392: LIST
55393: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
55394: LD_ADDR_VAR 0 41
55398: PUSH
55399: LD_INT 0
55401: PUSH
55402: LD_INT 2
55404: NEG
55405: PUSH
55406: EMPTY
55407: LIST
55408: LIST
55409: PUSH
55410: LD_INT 1
55412: NEG
55413: PUSH
55414: LD_INT 3
55416: NEG
55417: PUSH
55418: EMPTY
55419: LIST
55420: LIST
55421: PUSH
55422: LD_INT 1
55424: PUSH
55425: LD_INT 2
55427: NEG
55428: PUSH
55429: EMPTY
55430: LIST
55431: LIST
55432: PUSH
55433: EMPTY
55434: LIST
55435: LIST
55436: LIST
55437: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
55438: LD_ADDR_VAR 0 42
55442: PUSH
55443: LD_INT 2
55445: PUSH
55446: LD_INT 0
55448: PUSH
55449: EMPTY
55450: LIST
55451: LIST
55452: PUSH
55453: LD_INT 2
55455: PUSH
55456: LD_INT 1
55458: NEG
55459: PUSH
55460: EMPTY
55461: LIST
55462: LIST
55463: PUSH
55464: LD_INT 3
55466: PUSH
55467: LD_INT 1
55469: PUSH
55470: EMPTY
55471: LIST
55472: LIST
55473: PUSH
55474: EMPTY
55475: LIST
55476: LIST
55477: LIST
55478: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
55479: LD_ADDR_VAR 0 43
55483: PUSH
55484: LD_INT 2
55486: PUSH
55487: LD_INT 2
55489: PUSH
55490: EMPTY
55491: LIST
55492: LIST
55493: PUSH
55494: LD_INT 3
55496: PUSH
55497: LD_INT 2
55499: PUSH
55500: EMPTY
55501: LIST
55502: LIST
55503: PUSH
55504: LD_INT 2
55506: PUSH
55507: LD_INT 3
55509: PUSH
55510: EMPTY
55511: LIST
55512: LIST
55513: PUSH
55514: EMPTY
55515: LIST
55516: LIST
55517: LIST
55518: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
55519: LD_ADDR_VAR 0 44
55523: PUSH
55524: LD_INT 0
55526: PUSH
55527: LD_INT 2
55529: PUSH
55530: EMPTY
55531: LIST
55532: LIST
55533: PUSH
55534: LD_INT 1
55536: PUSH
55537: LD_INT 3
55539: PUSH
55540: EMPTY
55541: LIST
55542: LIST
55543: PUSH
55544: LD_INT 1
55546: NEG
55547: PUSH
55548: LD_INT 2
55550: PUSH
55551: EMPTY
55552: LIST
55553: LIST
55554: PUSH
55555: EMPTY
55556: LIST
55557: LIST
55558: LIST
55559: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
55560: LD_ADDR_VAR 0 45
55564: PUSH
55565: LD_INT 2
55567: NEG
55568: PUSH
55569: LD_INT 0
55571: PUSH
55572: EMPTY
55573: LIST
55574: LIST
55575: PUSH
55576: LD_INT 2
55578: NEG
55579: PUSH
55580: LD_INT 1
55582: PUSH
55583: EMPTY
55584: LIST
55585: LIST
55586: PUSH
55587: LD_INT 3
55589: NEG
55590: PUSH
55591: LD_INT 1
55593: NEG
55594: PUSH
55595: EMPTY
55596: LIST
55597: LIST
55598: PUSH
55599: EMPTY
55600: LIST
55601: LIST
55602: LIST
55603: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
55604: LD_ADDR_VAR 0 46
55608: PUSH
55609: LD_INT 2
55611: NEG
55612: PUSH
55613: LD_INT 2
55615: NEG
55616: PUSH
55617: EMPTY
55618: LIST
55619: LIST
55620: PUSH
55621: LD_INT 2
55623: NEG
55624: PUSH
55625: LD_INT 3
55627: NEG
55628: PUSH
55629: EMPTY
55630: LIST
55631: LIST
55632: PUSH
55633: LD_INT 3
55635: NEG
55636: PUSH
55637: LD_INT 2
55639: NEG
55640: PUSH
55641: EMPTY
55642: LIST
55643: LIST
55644: PUSH
55645: EMPTY
55646: LIST
55647: LIST
55648: LIST
55649: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
55650: LD_ADDR_VAR 0 47
55654: PUSH
55655: LD_INT 2
55657: NEG
55658: PUSH
55659: LD_INT 3
55661: NEG
55662: PUSH
55663: EMPTY
55664: LIST
55665: LIST
55666: PUSH
55667: LD_INT 1
55669: NEG
55670: PUSH
55671: LD_INT 3
55673: NEG
55674: PUSH
55675: EMPTY
55676: LIST
55677: LIST
55678: PUSH
55679: EMPTY
55680: LIST
55681: LIST
55682: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
55683: LD_ADDR_VAR 0 48
55687: PUSH
55688: LD_INT 1
55690: PUSH
55691: LD_INT 2
55693: NEG
55694: PUSH
55695: EMPTY
55696: LIST
55697: LIST
55698: PUSH
55699: LD_INT 2
55701: PUSH
55702: LD_INT 1
55704: NEG
55705: PUSH
55706: EMPTY
55707: LIST
55708: LIST
55709: PUSH
55710: EMPTY
55711: LIST
55712: LIST
55713: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
55714: LD_ADDR_VAR 0 49
55718: PUSH
55719: LD_INT 3
55721: PUSH
55722: LD_INT 1
55724: PUSH
55725: EMPTY
55726: LIST
55727: LIST
55728: PUSH
55729: LD_INT 3
55731: PUSH
55732: LD_INT 2
55734: PUSH
55735: EMPTY
55736: LIST
55737: LIST
55738: PUSH
55739: EMPTY
55740: LIST
55741: LIST
55742: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
55743: LD_ADDR_VAR 0 50
55747: PUSH
55748: LD_INT 2
55750: PUSH
55751: LD_INT 3
55753: PUSH
55754: EMPTY
55755: LIST
55756: LIST
55757: PUSH
55758: LD_INT 1
55760: PUSH
55761: LD_INT 3
55763: PUSH
55764: EMPTY
55765: LIST
55766: LIST
55767: PUSH
55768: EMPTY
55769: LIST
55770: LIST
55771: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
55772: LD_ADDR_VAR 0 51
55776: PUSH
55777: LD_INT 1
55779: NEG
55780: PUSH
55781: LD_INT 2
55783: PUSH
55784: EMPTY
55785: LIST
55786: LIST
55787: PUSH
55788: LD_INT 2
55790: NEG
55791: PUSH
55792: LD_INT 1
55794: PUSH
55795: EMPTY
55796: LIST
55797: LIST
55798: PUSH
55799: EMPTY
55800: LIST
55801: LIST
55802: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
55803: LD_ADDR_VAR 0 52
55807: PUSH
55808: LD_INT 3
55810: NEG
55811: PUSH
55812: LD_INT 1
55814: NEG
55815: PUSH
55816: EMPTY
55817: LIST
55818: LIST
55819: PUSH
55820: LD_INT 3
55822: NEG
55823: PUSH
55824: LD_INT 2
55826: NEG
55827: PUSH
55828: EMPTY
55829: LIST
55830: LIST
55831: PUSH
55832: EMPTY
55833: LIST
55834: LIST
55835: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55836: LD_ADDR_VAR 0 53
55840: PUSH
55841: LD_INT 1
55843: NEG
55844: PUSH
55845: LD_INT 3
55847: NEG
55848: PUSH
55849: EMPTY
55850: LIST
55851: LIST
55852: PUSH
55853: LD_INT 0
55855: PUSH
55856: LD_INT 3
55858: NEG
55859: PUSH
55860: EMPTY
55861: LIST
55862: LIST
55863: PUSH
55864: LD_INT 1
55866: PUSH
55867: LD_INT 2
55869: NEG
55870: PUSH
55871: EMPTY
55872: LIST
55873: LIST
55874: PUSH
55875: EMPTY
55876: LIST
55877: LIST
55878: LIST
55879: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55880: LD_ADDR_VAR 0 54
55884: PUSH
55885: LD_INT 2
55887: PUSH
55888: LD_INT 1
55890: NEG
55891: PUSH
55892: EMPTY
55893: LIST
55894: LIST
55895: PUSH
55896: LD_INT 3
55898: PUSH
55899: LD_INT 0
55901: PUSH
55902: EMPTY
55903: LIST
55904: LIST
55905: PUSH
55906: LD_INT 3
55908: PUSH
55909: LD_INT 1
55911: PUSH
55912: EMPTY
55913: LIST
55914: LIST
55915: PUSH
55916: EMPTY
55917: LIST
55918: LIST
55919: LIST
55920: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55921: LD_ADDR_VAR 0 55
55925: PUSH
55926: LD_INT 3
55928: PUSH
55929: LD_INT 2
55931: PUSH
55932: EMPTY
55933: LIST
55934: LIST
55935: PUSH
55936: LD_INT 3
55938: PUSH
55939: LD_INT 3
55941: PUSH
55942: EMPTY
55943: LIST
55944: LIST
55945: PUSH
55946: LD_INT 2
55948: PUSH
55949: LD_INT 3
55951: PUSH
55952: EMPTY
55953: LIST
55954: LIST
55955: PUSH
55956: EMPTY
55957: LIST
55958: LIST
55959: LIST
55960: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55961: LD_ADDR_VAR 0 56
55965: PUSH
55966: LD_INT 1
55968: PUSH
55969: LD_INT 3
55971: PUSH
55972: EMPTY
55973: LIST
55974: LIST
55975: PUSH
55976: LD_INT 0
55978: PUSH
55979: LD_INT 3
55981: PUSH
55982: EMPTY
55983: LIST
55984: LIST
55985: PUSH
55986: LD_INT 1
55988: NEG
55989: PUSH
55990: LD_INT 2
55992: PUSH
55993: EMPTY
55994: LIST
55995: LIST
55996: PUSH
55997: EMPTY
55998: LIST
55999: LIST
56000: LIST
56001: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56002: LD_ADDR_VAR 0 57
56006: PUSH
56007: LD_INT 2
56009: NEG
56010: PUSH
56011: LD_INT 1
56013: PUSH
56014: EMPTY
56015: LIST
56016: LIST
56017: PUSH
56018: LD_INT 3
56020: NEG
56021: PUSH
56022: LD_INT 0
56024: PUSH
56025: EMPTY
56026: LIST
56027: LIST
56028: PUSH
56029: LD_INT 3
56031: NEG
56032: PUSH
56033: LD_INT 1
56035: NEG
56036: PUSH
56037: EMPTY
56038: LIST
56039: LIST
56040: PUSH
56041: EMPTY
56042: LIST
56043: LIST
56044: LIST
56045: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56046: LD_ADDR_VAR 0 58
56050: PUSH
56051: LD_INT 2
56053: NEG
56054: PUSH
56055: LD_INT 3
56057: NEG
56058: PUSH
56059: EMPTY
56060: LIST
56061: LIST
56062: PUSH
56063: LD_INT 3
56065: NEG
56066: PUSH
56067: LD_INT 2
56069: NEG
56070: PUSH
56071: EMPTY
56072: LIST
56073: LIST
56074: PUSH
56075: LD_INT 3
56077: NEG
56078: PUSH
56079: LD_INT 3
56081: NEG
56082: PUSH
56083: EMPTY
56084: LIST
56085: LIST
56086: PUSH
56087: EMPTY
56088: LIST
56089: LIST
56090: LIST
56091: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
56092: LD_ADDR_VAR 0 59
56096: PUSH
56097: LD_INT 1
56099: NEG
56100: PUSH
56101: LD_INT 2
56103: NEG
56104: PUSH
56105: EMPTY
56106: LIST
56107: LIST
56108: PUSH
56109: LD_INT 0
56111: PUSH
56112: LD_INT 2
56114: NEG
56115: PUSH
56116: EMPTY
56117: LIST
56118: LIST
56119: PUSH
56120: LD_INT 1
56122: PUSH
56123: LD_INT 1
56125: NEG
56126: PUSH
56127: EMPTY
56128: LIST
56129: LIST
56130: PUSH
56131: EMPTY
56132: LIST
56133: LIST
56134: LIST
56135: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
56136: LD_ADDR_VAR 0 60
56140: PUSH
56141: LD_INT 1
56143: PUSH
56144: LD_INT 1
56146: NEG
56147: PUSH
56148: EMPTY
56149: LIST
56150: LIST
56151: PUSH
56152: LD_INT 2
56154: PUSH
56155: LD_INT 0
56157: PUSH
56158: EMPTY
56159: LIST
56160: LIST
56161: PUSH
56162: LD_INT 2
56164: PUSH
56165: LD_INT 1
56167: PUSH
56168: EMPTY
56169: LIST
56170: LIST
56171: PUSH
56172: EMPTY
56173: LIST
56174: LIST
56175: LIST
56176: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
56177: LD_ADDR_VAR 0 61
56181: PUSH
56182: LD_INT 2
56184: PUSH
56185: LD_INT 1
56187: PUSH
56188: EMPTY
56189: LIST
56190: LIST
56191: PUSH
56192: LD_INT 2
56194: PUSH
56195: LD_INT 2
56197: PUSH
56198: EMPTY
56199: LIST
56200: LIST
56201: PUSH
56202: LD_INT 1
56204: PUSH
56205: LD_INT 2
56207: PUSH
56208: EMPTY
56209: LIST
56210: LIST
56211: PUSH
56212: EMPTY
56213: LIST
56214: LIST
56215: LIST
56216: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
56217: LD_ADDR_VAR 0 62
56221: PUSH
56222: LD_INT 1
56224: PUSH
56225: LD_INT 2
56227: PUSH
56228: EMPTY
56229: LIST
56230: LIST
56231: PUSH
56232: LD_INT 0
56234: PUSH
56235: LD_INT 2
56237: PUSH
56238: EMPTY
56239: LIST
56240: LIST
56241: PUSH
56242: LD_INT 1
56244: NEG
56245: PUSH
56246: LD_INT 1
56248: PUSH
56249: EMPTY
56250: LIST
56251: LIST
56252: PUSH
56253: EMPTY
56254: LIST
56255: LIST
56256: LIST
56257: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
56258: LD_ADDR_VAR 0 63
56262: PUSH
56263: LD_INT 1
56265: NEG
56266: PUSH
56267: LD_INT 1
56269: PUSH
56270: EMPTY
56271: LIST
56272: LIST
56273: PUSH
56274: LD_INT 2
56276: NEG
56277: PUSH
56278: LD_INT 0
56280: PUSH
56281: EMPTY
56282: LIST
56283: LIST
56284: PUSH
56285: LD_INT 2
56287: NEG
56288: PUSH
56289: LD_INT 1
56291: NEG
56292: PUSH
56293: EMPTY
56294: LIST
56295: LIST
56296: PUSH
56297: EMPTY
56298: LIST
56299: LIST
56300: LIST
56301: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56302: LD_ADDR_VAR 0 64
56306: PUSH
56307: LD_INT 1
56309: NEG
56310: PUSH
56311: LD_INT 2
56313: NEG
56314: PUSH
56315: EMPTY
56316: LIST
56317: LIST
56318: PUSH
56319: LD_INT 2
56321: NEG
56322: PUSH
56323: LD_INT 1
56325: NEG
56326: PUSH
56327: EMPTY
56328: LIST
56329: LIST
56330: PUSH
56331: LD_INT 2
56333: NEG
56334: PUSH
56335: LD_INT 2
56337: NEG
56338: PUSH
56339: EMPTY
56340: LIST
56341: LIST
56342: PUSH
56343: EMPTY
56344: LIST
56345: LIST
56346: LIST
56347: ST_TO_ADDR
// end ; 2 :
56348: GO 59614
56350: LD_INT 2
56352: DOUBLE
56353: EQUAL
56354: IFTRUE 56358
56356: GO 59613
56358: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
56359: LD_ADDR_VAR 0 29
56363: PUSH
56364: LD_INT 4
56366: PUSH
56367: LD_INT 0
56369: PUSH
56370: EMPTY
56371: LIST
56372: LIST
56373: PUSH
56374: LD_INT 4
56376: PUSH
56377: LD_INT 1
56379: NEG
56380: PUSH
56381: EMPTY
56382: LIST
56383: LIST
56384: PUSH
56385: LD_INT 5
56387: PUSH
56388: LD_INT 0
56390: PUSH
56391: EMPTY
56392: LIST
56393: LIST
56394: PUSH
56395: LD_INT 5
56397: PUSH
56398: LD_INT 1
56400: PUSH
56401: EMPTY
56402: LIST
56403: LIST
56404: PUSH
56405: LD_INT 4
56407: PUSH
56408: LD_INT 1
56410: PUSH
56411: EMPTY
56412: LIST
56413: LIST
56414: PUSH
56415: LD_INT 3
56417: PUSH
56418: LD_INT 0
56420: PUSH
56421: EMPTY
56422: LIST
56423: LIST
56424: PUSH
56425: LD_INT 3
56427: PUSH
56428: LD_INT 1
56430: NEG
56431: PUSH
56432: EMPTY
56433: LIST
56434: LIST
56435: PUSH
56436: LD_INT 3
56438: PUSH
56439: LD_INT 2
56441: NEG
56442: PUSH
56443: EMPTY
56444: LIST
56445: LIST
56446: PUSH
56447: LD_INT 5
56449: PUSH
56450: LD_INT 2
56452: PUSH
56453: EMPTY
56454: LIST
56455: LIST
56456: PUSH
56457: LD_INT 3
56459: PUSH
56460: LD_INT 3
56462: PUSH
56463: EMPTY
56464: LIST
56465: LIST
56466: PUSH
56467: LD_INT 3
56469: PUSH
56470: LD_INT 2
56472: PUSH
56473: EMPTY
56474: LIST
56475: LIST
56476: PUSH
56477: LD_INT 4
56479: PUSH
56480: LD_INT 3
56482: PUSH
56483: EMPTY
56484: LIST
56485: LIST
56486: PUSH
56487: LD_INT 4
56489: PUSH
56490: LD_INT 4
56492: PUSH
56493: EMPTY
56494: LIST
56495: LIST
56496: PUSH
56497: LD_INT 3
56499: PUSH
56500: LD_INT 4
56502: PUSH
56503: EMPTY
56504: LIST
56505: LIST
56506: PUSH
56507: LD_INT 2
56509: PUSH
56510: LD_INT 3
56512: PUSH
56513: EMPTY
56514: LIST
56515: LIST
56516: PUSH
56517: LD_INT 2
56519: PUSH
56520: LD_INT 2
56522: PUSH
56523: EMPTY
56524: LIST
56525: LIST
56526: PUSH
56527: LD_INT 4
56529: PUSH
56530: LD_INT 2
56532: PUSH
56533: EMPTY
56534: LIST
56535: LIST
56536: PUSH
56537: LD_INT 2
56539: PUSH
56540: LD_INT 4
56542: PUSH
56543: EMPTY
56544: LIST
56545: LIST
56546: PUSH
56547: LD_INT 0
56549: PUSH
56550: LD_INT 4
56552: PUSH
56553: EMPTY
56554: LIST
56555: LIST
56556: PUSH
56557: LD_INT 0
56559: PUSH
56560: LD_INT 3
56562: PUSH
56563: EMPTY
56564: LIST
56565: LIST
56566: PUSH
56567: LD_INT 1
56569: PUSH
56570: LD_INT 4
56572: PUSH
56573: EMPTY
56574: LIST
56575: LIST
56576: PUSH
56577: LD_INT 1
56579: PUSH
56580: LD_INT 5
56582: PUSH
56583: EMPTY
56584: LIST
56585: LIST
56586: PUSH
56587: LD_INT 0
56589: PUSH
56590: LD_INT 5
56592: PUSH
56593: EMPTY
56594: LIST
56595: LIST
56596: PUSH
56597: LD_INT 1
56599: NEG
56600: PUSH
56601: LD_INT 4
56603: PUSH
56604: EMPTY
56605: LIST
56606: LIST
56607: PUSH
56608: LD_INT 1
56610: NEG
56611: PUSH
56612: LD_INT 3
56614: PUSH
56615: EMPTY
56616: LIST
56617: LIST
56618: PUSH
56619: LD_INT 2
56621: PUSH
56622: LD_INT 5
56624: PUSH
56625: EMPTY
56626: LIST
56627: LIST
56628: PUSH
56629: LD_INT 2
56631: NEG
56632: PUSH
56633: LD_INT 3
56635: PUSH
56636: EMPTY
56637: LIST
56638: LIST
56639: PUSH
56640: LD_INT 3
56642: NEG
56643: PUSH
56644: LD_INT 0
56646: PUSH
56647: EMPTY
56648: LIST
56649: LIST
56650: PUSH
56651: LD_INT 3
56653: NEG
56654: PUSH
56655: LD_INT 1
56657: NEG
56658: PUSH
56659: EMPTY
56660: LIST
56661: LIST
56662: PUSH
56663: LD_INT 2
56665: NEG
56666: PUSH
56667: LD_INT 0
56669: PUSH
56670: EMPTY
56671: LIST
56672: LIST
56673: PUSH
56674: LD_INT 2
56676: NEG
56677: PUSH
56678: LD_INT 1
56680: PUSH
56681: EMPTY
56682: LIST
56683: LIST
56684: PUSH
56685: LD_INT 3
56687: NEG
56688: PUSH
56689: LD_INT 1
56691: PUSH
56692: EMPTY
56693: LIST
56694: LIST
56695: PUSH
56696: LD_INT 4
56698: NEG
56699: PUSH
56700: LD_INT 0
56702: PUSH
56703: EMPTY
56704: LIST
56705: LIST
56706: PUSH
56707: LD_INT 4
56709: NEG
56710: PUSH
56711: LD_INT 1
56713: NEG
56714: PUSH
56715: EMPTY
56716: LIST
56717: LIST
56718: PUSH
56719: LD_INT 4
56721: NEG
56722: PUSH
56723: LD_INT 2
56725: NEG
56726: PUSH
56727: EMPTY
56728: LIST
56729: LIST
56730: PUSH
56731: LD_INT 2
56733: NEG
56734: PUSH
56735: LD_INT 2
56737: PUSH
56738: EMPTY
56739: LIST
56740: LIST
56741: PUSH
56742: LD_INT 4
56744: NEG
56745: PUSH
56746: LD_INT 4
56748: NEG
56749: PUSH
56750: EMPTY
56751: LIST
56752: LIST
56753: PUSH
56754: LD_INT 4
56756: NEG
56757: PUSH
56758: LD_INT 5
56760: NEG
56761: PUSH
56762: EMPTY
56763: LIST
56764: LIST
56765: PUSH
56766: LD_INT 3
56768: NEG
56769: PUSH
56770: LD_INT 4
56772: NEG
56773: PUSH
56774: EMPTY
56775: LIST
56776: LIST
56777: PUSH
56778: LD_INT 3
56780: NEG
56781: PUSH
56782: LD_INT 3
56784: NEG
56785: PUSH
56786: EMPTY
56787: LIST
56788: LIST
56789: PUSH
56790: LD_INT 4
56792: NEG
56793: PUSH
56794: LD_INT 3
56796: NEG
56797: PUSH
56798: EMPTY
56799: LIST
56800: LIST
56801: PUSH
56802: LD_INT 5
56804: NEG
56805: PUSH
56806: LD_INT 4
56808: NEG
56809: PUSH
56810: EMPTY
56811: LIST
56812: LIST
56813: PUSH
56814: LD_INT 5
56816: NEG
56817: PUSH
56818: LD_INT 5
56820: NEG
56821: PUSH
56822: EMPTY
56823: LIST
56824: LIST
56825: PUSH
56826: LD_INT 3
56828: NEG
56829: PUSH
56830: LD_INT 5
56832: NEG
56833: PUSH
56834: EMPTY
56835: LIST
56836: LIST
56837: PUSH
56838: LD_INT 5
56840: NEG
56841: PUSH
56842: LD_INT 3
56844: NEG
56845: PUSH
56846: EMPTY
56847: LIST
56848: LIST
56849: PUSH
56850: EMPTY
56851: LIST
56852: LIST
56853: LIST
56854: LIST
56855: LIST
56856: LIST
56857: LIST
56858: LIST
56859: LIST
56860: LIST
56861: LIST
56862: LIST
56863: LIST
56864: LIST
56865: LIST
56866: LIST
56867: LIST
56868: LIST
56869: LIST
56870: LIST
56871: LIST
56872: LIST
56873: LIST
56874: LIST
56875: LIST
56876: LIST
56877: LIST
56878: LIST
56879: LIST
56880: LIST
56881: LIST
56882: LIST
56883: LIST
56884: LIST
56885: LIST
56886: LIST
56887: LIST
56888: LIST
56889: LIST
56890: LIST
56891: LIST
56892: LIST
56893: LIST
56894: LIST
56895: LIST
56896: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
56897: LD_ADDR_VAR 0 30
56901: PUSH
56902: LD_INT 4
56904: PUSH
56905: LD_INT 4
56907: PUSH
56908: EMPTY
56909: LIST
56910: LIST
56911: PUSH
56912: LD_INT 4
56914: PUSH
56915: LD_INT 3
56917: PUSH
56918: EMPTY
56919: LIST
56920: LIST
56921: PUSH
56922: LD_INT 5
56924: PUSH
56925: LD_INT 4
56927: PUSH
56928: EMPTY
56929: LIST
56930: LIST
56931: PUSH
56932: LD_INT 5
56934: PUSH
56935: LD_INT 5
56937: PUSH
56938: EMPTY
56939: LIST
56940: LIST
56941: PUSH
56942: LD_INT 4
56944: PUSH
56945: LD_INT 5
56947: PUSH
56948: EMPTY
56949: LIST
56950: LIST
56951: PUSH
56952: LD_INT 3
56954: PUSH
56955: LD_INT 4
56957: PUSH
56958: EMPTY
56959: LIST
56960: LIST
56961: PUSH
56962: LD_INT 3
56964: PUSH
56965: LD_INT 3
56967: PUSH
56968: EMPTY
56969: LIST
56970: LIST
56971: PUSH
56972: LD_INT 5
56974: PUSH
56975: LD_INT 3
56977: PUSH
56978: EMPTY
56979: LIST
56980: LIST
56981: PUSH
56982: LD_INT 3
56984: PUSH
56985: LD_INT 5
56987: PUSH
56988: EMPTY
56989: LIST
56990: LIST
56991: PUSH
56992: LD_INT 0
56994: PUSH
56995: LD_INT 3
56997: PUSH
56998: EMPTY
56999: LIST
57000: LIST
57001: PUSH
57002: LD_INT 0
57004: PUSH
57005: LD_INT 2
57007: PUSH
57008: EMPTY
57009: LIST
57010: LIST
57011: PUSH
57012: LD_INT 1
57014: PUSH
57015: LD_INT 3
57017: PUSH
57018: EMPTY
57019: LIST
57020: LIST
57021: PUSH
57022: LD_INT 1
57024: PUSH
57025: LD_INT 4
57027: PUSH
57028: EMPTY
57029: LIST
57030: LIST
57031: PUSH
57032: LD_INT 0
57034: PUSH
57035: LD_INT 4
57037: PUSH
57038: EMPTY
57039: LIST
57040: LIST
57041: PUSH
57042: LD_INT 1
57044: NEG
57045: PUSH
57046: LD_INT 3
57048: PUSH
57049: EMPTY
57050: LIST
57051: LIST
57052: PUSH
57053: LD_INT 1
57055: NEG
57056: PUSH
57057: LD_INT 2
57059: PUSH
57060: EMPTY
57061: LIST
57062: LIST
57063: PUSH
57064: LD_INT 2
57066: PUSH
57067: LD_INT 4
57069: PUSH
57070: EMPTY
57071: LIST
57072: LIST
57073: PUSH
57074: LD_INT 2
57076: NEG
57077: PUSH
57078: LD_INT 2
57080: PUSH
57081: EMPTY
57082: LIST
57083: LIST
57084: PUSH
57085: LD_INT 4
57087: NEG
57088: PUSH
57089: LD_INT 0
57091: PUSH
57092: EMPTY
57093: LIST
57094: LIST
57095: PUSH
57096: LD_INT 4
57098: NEG
57099: PUSH
57100: LD_INT 1
57102: NEG
57103: PUSH
57104: EMPTY
57105: LIST
57106: LIST
57107: PUSH
57108: LD_INT 3
57110: NEG
57111: PUSH
57112: LD_INT 0
57114: PUSH
57115: EMPTY
57116: LIST
57117: LIST
57118: PUSH
57119: LD_INT 3
57121: NEG
57122: PUSH
57123: LD_INT 1
57125: PUSH
57126: EMPTY
57127: LIST
57128: LIST
57129: PUSH
57130: LD_INT 4
57132: NEG
57133: PUSH
57134: LD_INT 1
57136: PUSH
57137: EMPTY
57138: LIST
57139: LIST
57140: PUSH
57141: LD_INT 5
57143: NEG
57144: PUSH
57145: LD_INT 0
57147: PUSH
57148: EMPTY
57149: LIST
57150: LIST
57151: PUSH
57152: LD_INT 5
57154: NEG
57155: PUSH
57156: LD_INT 1
57158: NEG
57159: PUSH
57160: EMPTY
57161: LIST
57162: LIST
57163: PUSH
57164: LD_INT 5
57166: NEG
57167: PUSH
57168: LD_INT 2
57170: NEG
57171: PUSH
57172: EMPTY
57173: LIST
57174: LIST
57175: PUSH
57176: LD_INT 3
57178: NEG
57179: PUSH
57180: LD_INT 2
57182: PUSH
57183: EMPTY
57184: LIST
57185: LIST
57186: PUSH
57187: LD_INT 3
57189: NEG
57190: PUSH
57191: LD_INT 3
57193: NEG
57194: PUSH
57195: EMPTY
57196: LIST
57197: LIST
57198: PUSH
57199: LD_INT 3
57201: NEG
57202: PUSH
57203: LD_INT 4
57205: NEG
57206: PUSH
57207: EMPTY
57208: LIST
57209: LIST
57210: PUSH
57211: LD_INT 2
57213: NEG
57214: PUSH
57215: LD_INT 3
57217: NEG
57218: PUSH
57219: EMPTY
57220: LIST
57221: LIST
57222: PUSH
57223: LD_INT 2
57225: NEG
57226: PUSH
57227: LD_INT 2
57229: NEG
57230: PUSH
57231: EMPTY
57232: LIST
57233: LIST
57234: PUSH
57235: LD_INT 3
57237: NEG
57238: PUSH
57239: LD_INT 2
57241: NEG
57242: PUSH
57243: EMPTY
57244: LIST
57245: LIST
57246: PUSH
57247: LD_INT 4
57249: NEG
57250: PUSH
57251: LD_INT 3
57253: NEG
57254: PUSH
57255: EMPTY
57256: LIST
57257: LIST
57258: PUSH
57259: LD_INT 4
57261: NEG
57262: PUSH
57263: LD_INT 4
57265: NEG
57266: PUSH
57267: EMPTY
57268: LIST
57269: LIST
57270: PUSH
57271: LD_INT 2
57273: NEG
57274: PUSH
57275: LD_INT 4
57277: NEG
57278: PUSH
57279: EMPTY
57280: LIST
57281: LIST
57282: PUSH
57283: LD_INT 4
57285: NEG
57286: PUSH
57287: LD_INT 2
57289: NEG
57290: PUSH
57291: EMPTY
57292: LIST
57293: LIST
57294: PUSH
57295: LD_INT 0
57297: PUSH
57298: LD_INT 4
57300: NEG
57301: PUSH
57302: EMPTY
57303: LIST
57304: LIST
57305: PUSH
57306: LD_INT 0
57308: PUSH
57309: LD_INT 5
57311: NEG
57312: PUSH
57313: EMPTY
57314: LIST
57315: LIST
57316: PUSH
57317: LD_INT 1
57319: PUSH
57320: LD_INT 4
57322: NEG
57323: PUSH
57324: EMPTY
57325: LIST
57326: LIST
57327: PUSH
57328: LD_INT 1
57330: PUSH
57331: LD_INT 3
57333: NEG
57334: PUSH
57335: EMPTY
57336: LIST
57337: LIST
57338: PUSH
57339: LD_INT 0
57341: PUSH
57342: LD_INT 3
57344: NEG
57345: PUSH
57346: EMPTY
57347: LIST
57348: LIST
57349: PUSH
57350: LD_INT 1
57352: NEG
57353: PUSH
57354: LD_INT 4
57356: NEG
57357: PUSH
57358: EMPTY
57359: LIST
57360: LIST
57361: PUSH
57362: LD_INT 1
57364: NEG
57365: PUSH
57366: LD_INT 5
57368: NEG
57369: PUSH
57370: EMPTY
57371: LIST
57372: LIST
57373: PUSH
57374: LD_INT 2
57376: PUSH
57377: LD_INT 3
57379: NEG
57380: PUSH
57381: EMPTY
57382: LIST
57383: LIST
57384: PUSH
57385: LD_INT 2
57387: NEG
57388: PUSH
57389: LD_INT 5
57391: NEG
57392: PUSH
57393: EMPTY
57394: LIST
57395: LIST
57396: PUSH
57397: EMPTY
57398: LIST
57399: LIST
57400: LIST
57401: LIST
57402: LIST
57403: LIST
57404: LIST
57405: LIST
57406: LIST
57407: LIST
57408: LIST
57409: LIST
57410: LIST
57411: LIST
57412: LIST
57413: LIST
57414: LIST
57415: LIST
57416: LIST
57417: LIST
57418: LIST
57419: LIST
57420: LIST
57421: LIST
57422: LIST
57423: LIST
57424: LIST
57425: LIST
57426: LIST
57427: LIST
57428: LIST
57429: LIST
57430: LIST
57431: LIST
57432: LIST
57433: LIST
57434: LIST
57435: LIST
57436: LIST
57437: LIST
57438: LIST
57439: LIST
57440: LIST
57441: LIST
57442: LIST
57443: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
57444: LD_ADDR_VAR 0 31
57448: PUSH
57449: LD_INT 0
57451: PUSH
57452: LD_INT 4
57454: PUSH
57455: EMPTY
57456: LIST
57457: LIST
57458: PUSH
57459: LD_INT 0
57461: PUSH
57462: LD_INT 3
57464: PUSH
57465: EMPTY
57466: LIST
57467: LIST
57468: PUSH
57469: LD_INT 1
57471: PUSH
57472: LD_INT 4
57474: PUSH
57475: EMPTY
57476: LIST
57477: LIST
57478: PUSH
57479: LD_INT 1
57481: PUSH
57482: LD_INT 5
57484: PUSH
57485: EMPTY
57486: LIST
57487: LIST
57488: PUSH
57489: LD_INT 0
57491: PUSH
57492: LD_INT 5
57494: PUSH
57495: EMPTY
57496: LIST
57497: LIST
57498: PUSH
57499: LD_INT 1
57501: NEG
57502: PUSH
57503: LD_INT 4
57505: PUSH
57506: EMPTY
57507: LIST
57508: LIST
57509: PUSH
57510: LD_INT 1
57512: NEG
57513: PUSH
57514: LD_INT 3
57516: PUSH
57517: EMPTY
57518: LIST
57519: LIST
57520: PUSH
57521: LD_INT 2
57523: PUSH
57524: LD_INT 5
57526: PUSH
57527: EMPTY
57528: LIST
57529: LIST
57530: PUSH
57531: LD_INT 2
57533: NEG
57534: PUSH
57535: LD_INT 3
57537: PUSH
57538: EMPTY
57539: LIST
57540: LIST
57541: PUSH
57542: LD_INT 3
57544: NEG
57545: PUSH
57546: LD_INT 0
57548: PUSH
57549: EMPTY
57550: LIST
57551: LIST
57552: PUSH
57553: LD_INT 3
57555: NEG
57556: PUSH
57557: LD_INT 1
57559: NEG
57560: PUSH
57561: EMPTY
57562: LIST
57563: LIST
57564: PUSH
57565: LD_INT 2
57567: NEG
57568: PUSH
57569: LD_INT 0
57571: PUSH
57572: EMPTY
57573: LIST
57574: LIST
57575: PUSH
57576: LD_INT 2
57578: NEG
57579: PUSH
57580: LD_INT 1
57582: PUSH
57583: EMPTY
57584: LIST
57585: LIST
57586: PUSH
57587: LD_INT 3
57589: NEG
57590: PUSH
57591: LD_INT 1
57593: PUSH
57594: EMPTY
57595: LIST
57596: LIST
57597: PUSH
57598: LD_INT 4
57600: NEG
57601: PUSH
57602: LD_INT 0
57604: PUSH
57605: EMPTY
57606: LIST
57607: LIST
57608: PUSH
57609: LD_INT 4
57611: NEG
57612: PUSH
57613: LD_INT 1
57615: NEG
57616: PUSH
57617: EMPTY
57618: LIST
57619: LIST
57620: PUSH
57621: LD_INT 4
57623: NEG
57624: PUSH
57625: LD_INT 2
57627: NEG
57628: PUSH
57629: EMPTY
57630: LIST
57631: LIST
57632: PUSH
57633: LD_INT 2
57635: NEG
57636: PUSH
57637: LD_INT 2
57639: PUSH
57640: EMPTY
57641: LIST
57642: LIST
57643: PUSH
57644: LD_INT 4
57646: NEG
57647: PUSH
57648: LD_INT 4
57650: NEG
57651: PUSH
57652: EMPTY
57653: LIST
57654: LIST
57655: PUSH
57656: LD_INT 4
57658: NEG
57659: PUSH
57660: LD_INT 5
57662: NEG
57663: PUSH
57664: EMPTY
57665: LIST
57666: LIST
57667: PUSH
57668: LD_INT 3
57670: NEG
57671: PUSH
57672: LD_INT 4
57674: NEG
57675: PUSH
57676: EMPTY
57677: LIST
57678: LIST
57679: PUSH
57680: LD_INT 3
57682: NEG
57683: PUSH
57684: LD_INT 3
57686: NEG
57687: PUSH
57688: EMPTY
57689: LIST
57690: LIST
57691: PUSH
57692: LD_INT 4
57694: NEG
57695: PUSH
57696: LD_INT 3
57698: NEG
57699: PUSH
57700: EMPTY
57701: LIST
57702: LIST
57703: PUSH
57704: LD_INT 5
57706: NEG
57707: PUSH
57708: LD_INT 4
57710: NEG
57711: PUSH
57712: EMPTY
57713: LIST
57714: LIST
57715: PUSH
57716: LD_INT 5
57718: NEG
57719: PUSH
57720: LD_INT 5
57722: NEG
57723: PUSH
57724: EMPTY
57725: LIST
57726: LIST
57727: PUSH
57728: LD_INT 3
57730: NEG
57731: PUSH
57732: LD_INT 5
57734: NEG
57735: PUSH
57736: EMPTY
57737: LIST
57738: LIST
57739: PUSH
57740: LD_INT 5
57742: NEG
57743: PUSH
57744: LD_INT 3
57746: NEG
57747: PUSH
57748: EMPTY
57749: LIST
57750: LIST
57751: PUSH
57752: LD_INT 0
57754: PUSH
57755: LD_INT 3
57757: NEG
57758: PUSH
57759: EMPTY
57760: LIST
57761: LIST
57762: PUSH
57763: LD_INT 0
57765: PUSH
57766: LD_INT 4
57768: NEG
57769: PUSH
57770: EMPTY
57771: LIST
57772: LIST
57773: PUSH
57774: LD_INT 1
57776: PUSH
57777: LD_INT 3
57779: NEG
57780: PUSH
57781: EMPTY
57782: LIST
57783: LIST
57784: PUSH
57785: LD_INT 1
57787: PUSH
57788: LD_INT 2
57790: NEG
57791: PUSH
57792: EMPTY
57793: LIST
57794: LIST
57795: PUSH
57796: LD_INT 0
57798: PUSH
57799: LD_INT 2
57801: NEG
57802: PUSH
57803: EMPTY
57804: LIST
57805: LIST
57806: PUSH
57807: LD_INT 1
57809: NEG
57810: PUSH
57811: LD_INT 3
57813: NEG
57814: PUSH
57815: EMPTY
57816: LIST
57817: LIST
57818: PUSH
57819: LD_INT 1
57821: NEG
57822: PUSH
57823: LD_INT 4
57825: NEG
57826: PUSH
57827: EMPTY
57828: LIST
57829: LIST
57830: PUSH
57831: LD_INT 2
57833: PUSH
57834: LD_INT 2
57836: NEG
57837: PUSH
57838: EMPTY
57839: LIST
57840: LIST
57841: PUSH
57842: LD_INT 2
57844: NEG
57845: PUSH
57846: LD_INT 4
57848: NEG
57849: PUSH
57850: EMPTY
57851: LIST
57852: LIST
57853: PUSH
57854: LD_INT 4
57856: PUSH
57857: LD_INT 0
57859: PUSH
57860: EMPTY
57861: LIST
57862: LIST
57863: PUSH
57864: LD_INT 4
57866: PUSH
57867: LD_INT 1
57869: NEG
57870: PUSH
57871: EMPTY
57872: LIST
57873: LIST
57874: PUSH
57875: LD_INT 5
57877: PUSH
57878: LD_INT 0
57880: PUSH
57881: EMPTY
57882: LIST
57883: LIST
57884: PUSH
57885: LD_INT 5
57887: PUSH
57888: LD_INT 1
57890: PUSH
57891: EMPTY
57892: LIST
57893: LIST
57894: PUSH
57895: LD_INT 4
57897: PUSH
57898: LD_INT 1
57900: PUSH
57901: EMPTY
57902: LIST
57903: LIST
57904: PUSH
57905: LD_INT 3
57907: PUSH
57908: LD_INT 0
57910: PUSH
57911: EMPTY
57912: LIST
57913: LIST
57914: PUSH
57915: LD_INT 3
57917: PUSH
57918: LD_INT 1
57920: NEG
57921: PUSH
57922: EMPTY
57923: LIST
57924: LIST
57925: PUSH
57926: LD_INT 3
57928: PUSH
57929: LD_INT 2
57931: NEG
57932: PUSH
57933: EMPTY
57934: LIST
57935: LIST
57936: PUSH
57937: LD_INT 5
57939: PUSH
57940: LD_INT 2
57942: PUSH
57943: EMPTY
57944: LIST
57945: LIST
57946: PUSH
57947: EMPTY
57948: LIST
57949: LIST
57950: LIST
57951: LIST
57952: LIST
57953: LIST
57954: LIST
57955: LIST
57956: LIST
57957: LIST
57958: LIST
57959: LIST
57960: LIST
57961: LIST
57962: LIST
57963: LIST
57964: LIST
57965: LIST
57966: LIST
57967: LIST
57968: LIST
57969: LIST
57970: LIST
57971: LIST
57972: LIST
57973: LIST
57974: LIST
57975: LIST
57976: LIST
57977: LIST
57978: LIST
57979: LIST
57980: LIST
57981: LIST
57982: LIST
57983: LIST
57984: LIST
57985: LIST
57986: LIST
57987: LIST
57988: LIST
57989: LIST
57990: LIST
57991: LIST
57992: LIST
57993: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
57994: LD_ADDR_VAR 0 32
57998: PUSH
57999: LD_INT 4
58001: NEG
58002: PUSH
58003: LD_INT 0
58005: PUSH
58006: EMPTY
58007: LIST
58008: LIST
58009: PUSH
58010: LD_INT 4
58012: NEG
58013: PUSH
58014: LD_INT 1
58016: NEG
58017: PUSH
58018: EMPTY
58019: LIST
58020: LIST
58021: PUSH
58022: LD_INT 3
58024: NEG
58025: PUSH
58026: LD_INT 0
58028: PUSH
58029: EMPTY
58030: LIST
58031: LIST
58032: PUSH
58033: LD_INT 3
58035: NEG
58036: PUSH
58037: LD_INT 1
58039: PUSH
58040: EMPTY
58041: LIST
58042: LIST
58043: PUSH
58044: LD_INT 4
58046: NEG
58047: PUSH
58048: LD_INT 1
58050: PUSH
58051: EMPTY
58052: LIST
58053: LIST
58054: PUSH
58055: LD_INT 5
58057: NEG
58058: PUSH
58059: LD_INT 0
58061: PUSH
58062: EMPTY
58063: LIST
58064: LIST
58065: PUSH
58066: LD_INT 5
58068: NEG
58069: PUSH
58070: LD_INT 1
58072: NEG
58073: PUSH
58074: EMPTY
58075: LIST
58076: LIST
58077: PUSH
58078: LD_INT 5
58080: NEG
58081: PUSH
58082: LD_INT 2
58084: NEG
58085: PUSH
58086: EMPTY
58087: LIST
58088: LIST
58089: PUSH
58090: LD_INT 3
58092: NEG
58093: PUSH
58094: LD_INT 2
58096: PUSH
58097: EMPTY
58098: LIST
58099: LIST
58100: PUSH
58101: LD_INT 3
58103: NEG
58104: PUSH
58105: LD_INT 3
58107: NEG
58108: PUSH
58109: EMPTY
58110: LIST
58111: LIST
58112: PUSH
58113: LD_INT 3
58115: NEG
58116: PUSH
58117: LD_INT 4
58119: NEG
58120: PUSH
58121: EMPTY
58122: LIST
58123: LIST
58124: PUSH
58125: LD_INT 2
58127: NEG
58128: PUSH
58129: LD_INT 3
58131: NEG
58132: PUSH
58133: EMPTY
58134: LIST
58135: LIST
58136: PUSH
58137: LD_INT 2
58139: NEG
58140: PUSH
58141: LD_INT 2
58143: NEG
58144: PUSH
58145: EMPTY
58146: LIST
58147: LIST
58148: PUSH
58149: LD_INT 3
58151: NEG
58152: PUSH
58153: LD_INT 2
58155: NEG
58156: PUSH
58157: EMPTY
58158: LIST
58159: LIST
58160: PUSH
58161: LD_INT 4
58163: NEG
58164: PUSH
58165: LD_INT 3
58167: NEG
58168: PUSH
58169: EMPTY
58170: LIST
58171: LIST
58172: PUSH
58173: LD_INT 4
58175: NEG
58176: PUSH
58177: LD_INT 4
58179: NEG
58180: PUSH
58181: EMPTY
58182: LIST
58183: LIST
58184: PUSH
58185: LD_INT 2
58187: NEG
58188: PUSH
58189: LD_INT 4
58191: NEG
58192: PUSH
58193: EMPTY
58194: LIST
58195: LIST
58196: PUSH
58197: LD_INT 4
58199: NEG
58200: PUSH
58201: LD_INT 2
58203: NEG
58204: PUSH
58205: EMPTY
58206: LIST
58207: LIST
58208: PUSH
58209: LD_INT 0
58211: PUSH
58212: LD_INT 4
58214: NEG
58215: PUSH
58216: EMPTY
58217: LIST
58218: LIST
58219: PUSH
58220: LD_INT 0
58222: PUSH
58223: LD_INT 5
58225: NEG
58226: PUSH
58227: EMPTY
58228: LIST
58229: LIST
58230: PUSH
58231: LD_INT 1
58233: PUSH
58234: LD_INT 4
58236: NEG
58237: PUSH
58238: EMPTY
58239: LIST
58240: LIST
58241: PUSH
58242: LD_INT 1
58244: PUSH
58245: LD_INT 3
58247: NEG
58248: PUSH
58249: EMPTY
58250: LIST
58251: LIST
58252: PUSH
58253: LD_INT 0
58255: PUSH
58256: LD_INT 3
58258: NEG
58259: PUSH
58260: EMPTY
58261: LIST
58262: LIST
58263: PUSH
58264: LD_INT 1
58266: NEG
58267: PUSH
58268: LD_INT 4
58270: NEG
58271: PUSH
58272: EMPTY
58273: LIST
58274: LIST
58275: PUSH
58276: LD_INT 1
58278: NEG
58279: PUSH
58280: LD_INT 5
58282: NEG
58283: PUSH
58284: EMPTY
58285: LIST
58286: LIST
58287: PUSH
58288: LD_INT 2
58290: PUSH
58291: LD_INT 3
58293: NEG
58294: PUSH
58295: EMPTY
58296: LIST
58297: LIST
58298: PUSH
58299: LD_INT 2
58301: NEG
58302: PUSH
58303: LD_INT 5
58305: NEG
58306: PUSH
58307: EMPTY
58308: LIST
58309: LIST
58310: PUSH
58311: LD_INT 3
58313: PUSH
58314: LD_INT 0
58316: PUSH
58317: EMPTY
58318: LIST
58319: LIST
58320: PUSH
58321: LD_INT 3
58323: PUSH
58324: LD_INT 1
58326: NEG
58327: PUSH
58328: EMPTY
58329: LIST
58330: LIST
58331: PUSH
58332: LD_INT 4
58334: PUSH
58335: LD_INT 0
58337: PUSH
58338: EMPTY
58339: LIST
58340: LIST
58341: PUSH
58342: LD_INT 4
58344: PUSH
58345: LD_INT 1
58347: PUSH
58348: EMPTY
58349: LIST
58350: LIST
58351: PUSH
58352: LD_INT 3
58354: PUSH
58355: LD_INT 1
58357: PUSH
58358: EMPTY
58359: LIST
58360: LIST
58361: PUSH
58362: LD_INT 2
58364: PUSH
58365: LD_INT 0
58367: PUSH
58368: EMPTY
58369: LIST
58370: LIST
58371: PUSH
58372: LD_INT 2
58374: PUSH
58375: LD_INT 1
58377: NEG
58378: PUSH
58379: EMPTY
58380: LIST
58381: LIST
58382: PUSH
58383: LD_INT 2
58385: PUSH
58386: LD_INT 2
58388: NEG
58389: PUSH
58390: EMPTY
58391: LIST
58392: LIST
58393: PUSH
58394: LD_INT 4
58396: PUSH
58397: LD_INT 2
58399: PUSH
58400: EMPTY
58401: LIST
58402: LIST
58403: PUSH
58404: LD_INT 4
58406: PUSH
58407: LD_INT 4
58409: PUSH
58410: EMPTY
58411: LIST
58412: LIST
58413: PUSH
58414: LD_INT 4
58416: PUSH
58417: LD_INT 3
58419: PUSH
58420: EMPTY
58421: LIST
58422: LIST
58423: PUSH
58424: LD_INT 5
58426: PUSH
58427: LD_INT 4
58429: PUSH
58430: EMPTY
58431: LIST
58432: LIST
58433: PUSH
58434: LD_INT 5
58436: PUSH
58437: LD_INT 5
58439: PUSH
58440: EMPTY
58441: LIST
58442: LIST
58443: PUSH
58444: LD_INT 4
58446: PUSH
58447: LD_INT 5
58449: PUSH
58450: EMPTY
58451: LIST
58452: LIST
58453: PUSH
58454: LD_INT 3
58456: PUSH
58457: LD_INT 4
58459: PUSH
58460: EMPTY
58461: LIST
58462: LIST
58463: PUSH
58464: LD_INT 3
58466: PUSH
58467: LD_INT 3
58469: PUSH
58470: EMPTY
58471: LIST
58472: LIST
58473: PUSH
58474: LD_INT 5
58476: PUSH
58477: LD_INT 3
58479: PUSH
58480: EMPTY
58481: LIST
58482: LIST
58483: PUSH
58484: LD_INT 3
58486: PUSH
58487: LD_INT 5
58489: PUSH
58490: EMPTY
58491: LIST
58492: LIST
58493: PUSH
58494: EMPTY
58495: LIST
58496: LIST
58497: LIST
58498: LIST
58499: LIST
58500: LIST
58501: LIST
58502: LIST
58503: LIST
58504: LIST
58505: LIST
58506: LIST
58507: LIST
58508: LIST
58509: LIST
58510: LIST
58511: LIST
58512: LIST
58513: LIST
58514: LIST
58515: LIST
58516: LIST
58517: LIST
58518: LIST
58519: LIST
58520: LIST
58521: LIST
58522: LIST
58523: LIST
58524: LIST
58525: LIST
58526: LIST
58527: LIST
58528: LIST
58529: LIST
58530: LIST
58531: LIST
58532: LIST
58533: LIST
58534: LIST
58535: LIST
58536: LIST
58537: LIST
58538: LIST
58539: LIST
58540: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
58541: LD_ADDR_VAR 0 33
58545: PUSH
58546: LD_INT 4
58548: NEG
58549: PUSH
58550: LD_INT 4
58552: NEG
58553: PUSH
58554: EMPTY
58555: LIST
58556: LIST
58557: PUSH
58558: LD_INT 4
58560: NEG
58561: PUSH
58562: LD_INT 5
58564: NEG
58565: PUSH
58566: EMPTY
58567: LIST
58568: LIST
58569: PUSH
58570: LD_INT 3
58572: NEG
58573: PUSH
58574: LD_INT 4
58576: NEG
58577: PUSH
58578: EMPTY
58579: LIST
58580: LIST
58581: PUSH
58582: LD_INT 3
58584: NEG
58585: PUSH
58586: LD_INT 3
58588: NEG
58589: PUSH
58590: EMPTY
58591: LIST
58592: LIST
58593: PUSH
58594: LD_INT 4
58596: NEG
58597: PUSH
58598: LD_INT 3
58600: NEG
58601: PUSH
58602: EMPTY
58603: LIST
58604: LIST
58605: PUSH
58606: LD_INT 5
58608: NEG
58609: PUSH
58610: LD_INT 4
58612: NEG
58613: PUSH
58614: EMPTY
58615: LIST
58616: LIST
58617: PUSH
58618: LD_INT 5
58620: NEG
58621: PUSH
58622: LD_INT 5
58624: NEG
58625: PUSH
58626: EMPTY
58627: LIST
58628: LIST
58629: PUSH
58630: LD_INT 3
58632: NEG
58633: PUSH
58634: LD_INT 5
58636: NEG
58637: PUSH
58638: EMPTY
58639: LIST
58640: LIST
58641: PUSH
58642: LD_INT 5
58644: NEG
58645: PUSH
58646: LD_INT 3
58648: NEG
58649: PUSH
58650: EMPTY
58651: LIST
58652: LIST
58653: PUSH
58654: LD_INT 0
58656: PUSH
58657: LD_INT 3
58659: NEG
58660: PUSH
58661: EMPTY
58662: LIST
58663: LIST
58664: PUSH
58665: LD_INT 0
58667: PUSH
58668: LD_INT 4
58670: NEG
58671: PUSH
58672: EMPTY
58673: LIST
58674: LIST
58675: PUSH
58676: LD_INT 1
58678: PUSH
58679: LD_INT 3
58681: NEG
58682: PUSH
58683: EMPTY
58684: LIST
58685: LIST
58686: PUSH
58687: LD_INT 1
58689: PUSH
58690: LD_INT 2
58692: NEG
58693: PUSH
58694: EMPTY
58695: LIST
58696: LIST
58697: PUSH
58698: LD_INT 0
58700: PUSH
58701: LD_INT 2
58703: NEG
58704: PUSH
58705: EMPTY
58706: LIST
58707: LIST
58708: PUSH
58709: LD_INT 1
58711: NEG
58712: PUSH
58713: LD_INT 3
58715: NEG
58716: PUSH
58717: EMPTY
58718: LIST
58719: LIST
58720: PUSH
58721: LD_INT 1
58723: NEG
58724: PUSH
58725: LD_INT 4
58727: NEG
58728: PUSH
58729: EMPTY
58730: LIST
58731: LIST
58732: PUSH
58733: LD_INT 2
58735: PUSH
58736: LD_INT 2
58738: NEG
58739: PUSH
58740: EMPTY
58741: LIST
58742: LIST
58743: PUSH
58744: LD_INT 2
58746: NEG
58747: PUSH
58748: LD_INT 4
58750: NEG
58751: PUSH
58752: EMPTY
58753: LIST
58754: LIST
58755: PUSH
58756: LD_INT 4
58758: PUSH
58759: LD_INT 0
58761: PUSH
58762: EMPTY
58763: LIST
58764: LIST
58765: PUSH
58766: LD_INT 4
58768: PUSH
58769: LD_INT 1
58771: NEG
58772: PUSH
58773: EMPTY
58774: LIST
58775: LIST
58776: PUSH
58777: LD_INT 5
58779: PUSH
58780: LD_INT 0
58782: PUSH
58783: EMPTY
58784: LIST
58785: LIST
58786: PUSH
58787: LD_INT 5
58789: PUSH
58790: LD_INT 1
58792: PUSH
58793: EMPTY
58794: LIST
58795: LIST
58796: PUSH
58797: LD_INT 4
58799: PUSH
58800: LD_INT 1
58802: PUSH
58803: EMPTY
58804: LIST
58805: LIST
58806: PUSH
58807: LD_INT 3
58809: PUSH
58810: LD_INT 0
58812: PUSH
58813: EMPTY
58814: LIST
58815: LIST
58816: PUSH
58817: LD_INT 3
58819: PUSH
58820: LD_INT 1
58822: NEG
58823: PUSH
58824: EMPTY
58825: LIST
58826: LIST
58827: PUSH
58828: LD_INT 3
58830: PUSH
58831: LD_INT 2
58833: NEG
58834: PUSH
58835: EMPTY
58836: LIST
58837: LIST
58838: PUSH
58839: LD_INT 5
58841: PUSH
58842: LD_INT 2
58844: PUSH
58845: EMPTY
58846: LIST
58847: LIST
58848: PUSH
58849: LD_INT 3
58851: PUSH
58852: LD_INT 3
58854: PUSH
58855: EMPTY
58856: LIST
58857: LIST
58858: PUSH
58859: LD_INT 3
58861: PUSH
58862: LD_INT 2
58864: PUSH
58865: EMPTY
58866: LIST
58867: LIST
58868: PUSH
58869: LD_INT 4
58871: PUSH
58872: LD_INT 3
58874: PUSH
58875: EMPTY
58876: LIST
58877: LIST
58878: PUSH
58879: LD_INT 4
58881: PUSH
58882: LD_INT 4
58884: PUSH
58885: EMPTY
58886: LIST
58887: LIST
58888: PUSH
58889: LD_INT 3
58891: PUSH
58892: LD_INT 4
58894: PUSH
58895: EMPTY
58896: LIST
58897: LIST
58898: PUSH
58899: LD_INT 2
58901: PUSH
58902: LD_INT 3
58904: PUSH
58905: EMPTY
58906: LIST
58907: LIST
58908: PUSH
58909: LD_INT 2
58911: PUSH
58912: LD_INT 2
58914: PUSH
58915: EMPTY
58916: LIST
58917: LIST
58918: PUSH
58919: LD_INT 4
58921: PUSH
58922: LD_INT 2
58924: PUSH
58925: EMPTY
58926: LIST
58927: LIST
58928: PUSH
58929: LD_INT 2
58931: PUSH
58932: LD_INT 4
58934: PUSH
58935: EMPTY
58936: LIST
58937: LIST
58938: PUSH
58939: LD_INT 0
58941: PUSH
58942: LD_INT 4
58944: PUSH
58945: EMPTY
58946: LIST
58947: LIST
58948: PUSH
58949: LD_INT 0
58951: PUSH
58952: LD_INT 3
58954: PUSH
58955: EMPTY
58956: LIST
58957: LIST
58958: PUSH
58959: LD_INT 1
58961: PUSH
58962: LD_INT 4
58964: PUSH
58965: EMPTY
58966: LIST
58967: LIST
58968: PUSH
58969: LD_INT 1
58971: PUSH
58972: LD_INT 5
58974: PUSH
58975: EMPTY
58976: LIST
58977: LIST
58978: PUSH
58979: LD_INT 0
58981: PUSH
58982: LD_INT 5
58984: PUSH
58985: EMPTY
58986: LIST
58987: LIST
58988: PUSH
58989: LD_INT 1
58991: NEG
58992: PUSH
58993: LD_INT 4
58995: PUSH
58996: EMPTY
58997: LIST
58998: LIST
58999: PUSH
59000: LD_INT 1
59002: NEG
59003: PUSH
59004: LD_INT 3
59006: PUSH
59007: EMPTY
59008: LIST
59009: LIST
59010: PUSH
59011: LD_INT 2
59013: PUSH
59014: LD_INT 5
59016: PUSH
59017: EMPTY
59018: LIST
59019: LIST
59020: PUSH
59021: LD_INT 2
59023: NEG
59024: PUSH
59025: LD_INT 3
59027: PUSH
59028: EMPTY
59029: LIST
59030: LIST
59031: PUSH
59032: EMPTY
59033: LIST
59034: LIST
59035: LIST
59036: LIST
59037: LIST
59038: LIST
59039: LIST
59040: LIST
59041: LIST
59042: LIST
59043: LIST
59044: LIST
59045: LIST
59046: LIST
59047: LIST
59048: LIST
59049: LIST
59050: LIST
59051: LIST
59052: LIST
59053: LIST
59054: LIST
59055: LIST
59056: LIST
59057: LIST
59058: LIST
59059: LIST
59060: LIST
59061: LIST
59062: LIST
59063: LIST
59064: LIST
59065: LIST
59066: LIST
59067: LIST
59068: LIST
59069: LIST
59070: LIST
59071: LIST
59072: LIST
59073: LIST
59074: LIST
59075: LIST
59076: LIST
59077: LIST
59078: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
59079: LD_ADDR_VAR 0 34
59083: PUSH
59084: LD_INT 0
59086: PUSH
59087: LD_INT 4
59089: NEG
59090: PUSH
59091: EMPTY
59092: LIST
59093: LIST
59094: PUSH
59095: LD_INT 0
59097: PUSH
59098: LD_INT 5
59100: NEG
59101: PUSH
59102: EMPTY
59103: LIST
59104: LIST
59105: PUSH
59106: LD_INT 1
59108: PUSH
59109: LD_INT 4
59111: NEG
59112: PUSH
59113: EMPTY
59114: LIST
59115: LIST
59116: PUSH
59117: LD_INT 1
59119: PUSH
59120: LD_INT 3
59122: NEG
59123: PUSH
59124: EMPTY
59125: LIST
59126: LIST
59127: PUSH
59128: LD_INT 0
59130: PUSH
59131: LD_INT 3
59133: NEG
59134: PUSH
59135: EMPTY
59136: LIST
59137: LIST
59138: PUSH
59139: LD_INT 1
59141: NEG
59142: PUSH
59143: LD_INT 4
59145: NEG
59146: PUSH
59147: EMPTY
59148: LIST
59149: LIST
59150: PUSH
59151: LD_INT 1
59153: NEG
59154: PUSH
59155: LD_INT 5
59157: NEG
59158: PUSH
59159: EMPTY
59160: LIST
59161: LIST
59162: PUSH
59163: LD_INT 2
59165: PUSH
59166: LD_INT 3
59168: NEG
59169: PUSH
59170: EMPTY
59171: LIST
59172: LIST
59173: PUSH
59174: LD_INT 2
59176: NEG
59177: PUSH
59178: LD_INT 5
59180: NEG
59181: PUSH
59182: EMPTY
59183: LIST
59184: LIST
59185: PUSH
59186: LD_INT 3
59188: PUSH
59189: LD_INT 0
59191: PUSH
59192: EMPTY
59193: LIST
59194: LIST
59195: PUSH
59196: LD_INT 3
59198: PUSH
59199: LD_INT 1
59201: NEG
59202: PUSH
59203: EMPTY
59204: LIST
59205: LIST
59206: PUSH
59207: LD_INT 4
59209: PUSH
59210: LD_INT 0
59212: PUSH
59213: EMPTY
59214: LIST
59215: LIST
59216: PUSH
59217: LD_INT 4
59219: PUSH
59220: LD_INT 1
59222: PUSH
59223: EMPTY
59224: LIST
59225: LIST
59226: PUSH
59227: LD_INT 3
59229: PUSH
59230: LD_INT 1
59232: PUSH
59233: EMPTY
59234: LIST
59235: LIST
59236: PUSH
59237: LD_INT 2
59239: PUSH
59240: LD_INT 0
59242: PUSH
59243: EMPTY
59244: LIST
59245: LIST
59246: PUSH
59247: LD_INT 2
59249: PUSH
59250: LD_INT 1
59252: NEG
59253: PUSH
59254: EMPTY
59255: LIST
59256: LIST
59257: PUSH
59258: LD_INT 2
59260: PUSH
59261: LD_INT 2
59263: NEG
59264: PUSH
59265: EMPTY
59266: LIST
59267: LIST
59268: PUSH
59269: LD_INT 4
59271: PUSH
59272: LD_INT 2
59274: PUSH
59275: EMPTY
59276: LIST
59277: LIST
59278: PUSH
59279: LD_INT 4
59281: PUSH
59282: LD_INT 4
59284: PUSH
59285: EMPTY
59286: LIST
59287: LIST
59288: PUSH
59289: LD_INT 4
59291: PUSH
59292: LD_INT 3
59294: PUSH
59295: EMPTY
59296: LIST
59297: LIST
59298: PUSH
59299: LD_INT 5
59301: PUSH
59302: LD_INT 4
59304: PUSH
59305: EMPTY
59306: LIST
59307: LIST
59308: PUSH
59309: LD_INT 5
59311: PUSH
59312: LD_INT 5
59314: PUSH
59315: EMPTY
59316: LIST
59317: LIST
59318: PUSH
59319: LD_INT 4
59321: PUSH
59322: LD_INT 5
59324: PUSH
59325: EMPTY
59326: LIST
59327: LIST
59328: PUSH
59329: LD_INT 3
59331: PUSH
59332: LD_INT 4
59334: PUSH
59335: EMPTY
59336: LIST
59337: LIST
59338: PUSH
59339: LD_INT 3
59341: PUSH
59342: LD_INT 3
59344: PUSH
59345: EMPTY
59346: LIST
59347: LIST
59348: PUSH
59349: LD_INT 5
59351: PUSH
59352: LD_INT 3
59354: PUSH
59355: EMPTY
59356: LIST
59357: LIST
59358: PUSH
59359: LD_INT 3
59361: PUSH
59362: LD_INT 5
59364: PUSH
59365: EMPTY
59366: LIST
59367: LIST
59368: PUSH
59369: LD_INT 0
59371: PUSH
59372: LD_INT 3
59374: PUSH
59375: EMPTY
59376: LIST
59377: LIST
59378: PUSH
59379: LD_INT 0
59381: PUSH
59382: LD_INT 2
59384: PUSH
59385: EMPTY
59386: LIST
59387: LIST
59388: PUSH
59389: LD_INT 1
59391: PUSH
59392: LD_INT 3
59394: PUSH
59395: EMPTY
59396: LIST
59397: LIST
59398: PUSH
59399: LD_INT 1
59401: PUSH
59402: LD_INT 4
59404: PUSH
59405: EMPTY
59406: LIST
59407: LIST
59408: PUSH
59409: LD_INT 0
59411: PUSH
59412: LD_INT 4
59414: PUSH
59415: EMPTY
59416: LIST
59417: LIST
59418: PUSH
59419: LD_INT 1
59421: NEG
59422: PUSH
59423: LD_INT 3
59425: PUSH
59426: EMPTY
59427: LIST
59428: LIST
59429: PUSH
59430: LD_INT 1
59432: NEG
59433: PUSH
59434: LD_INT 2
59436: PUSH
59437: EMPTY
59438: LIST
59439: LIST
59440: PUSH
59441: LD_INT 2
59443: PUSH
59444: LD_INT 4
59446: PUSH
59447: EMPTY
59448: LIST
59449: LIST
59450: PUSH
59451: LD_INT 2
59453: NEG
59454: PUSH
59455: LD_INT 2
59457: PUSH
59458: EMPTY
59459: LIST
59460: LIST
59461: PUSH
59462: LD_INT 4
59464: NEG
59465: PUSH
59466: LD_INT 0
59468: PUSH
59469: EMPTY
59470: LIST
59471: LIST
59472: PUSH
59473: LD_INT 4
59475: NEG
59476: PUSH
59477: LD_INT 1
59479: NEG
59480: PUSH
59481: EMPTY
59482: LIST
59483: LIST
59484: PUSH
59485: LD_INT 3
59487: NEG
59488: PUSH
59489: LD_INT 0
59491: PUSH
59492: EMPTY
59493: LIST
59494: LIST
59495: PUSH
59496: LD_INT 3
59498: NEG
59499: PUSH
59500: LD_INT 1
59502: PUSH
59503: EMPTY
59504: LIST
59505: LIST
59506: PUSH
59507: LD_INT 4
59509: NEG
59510: PUSH
59511: LD_INT 1
59513: PUSH
59514: EMPTY
59515: LIST
59516: LIST
59517: PUSH
59518: LD_INT 5
59520: NEG
59521: PUSH
59522: LD_INT 0
59524: PUSH
59525: EMPTY
59526: LIST
59527: LIST
59528: PUSH
59529: LD_INT 5
59531: NEG
59532: PUSH
59533: LD_INT 1
59535: NEG
59536: PUSH
59537: EMPTY
59538: LIST
59539: LIST
59540: PUSH
59541: LD_INT 5
59543: NEG
59544: PUSH
59545: LD_INT 2
59547: NEG
59548: PUSH
59549: EMPTY
59550: LIST
59551: LIST
59552: PUSH
59553: LD_INT 3
59555: NEG
59556: PUSH
59557: LD_INT 2
59559: PUSH
59560: EMPTY
59561: LIST
59562: LIST
59563: PUSH
59564: EMPTY
59565: LIST
59566: LIST
59567: LIST
59568: LIST
59569: LIST
59570: LIST
59571: LIST
59572: LIST
59573: LIST
59574: LIST
59575: LIST
59576: LIST
59577: LIST
59578: LIST
59579: LIST
59580: LIST
59581: LIST
59582: LIST
59583: LIST
59584: LIST
59585: LIST
59586: LIST
59587: LIST
59588: LIST
59589: LIST
59590: LIST
59591: LIST
59592: LIST
59593: LIST
59594: LIST
59595: LIST
59596: LIST
59597: LIST
59598: LIST
59599: LIST
59600: LIST
59601: LIST
59602: LIST
59603: LIST
59604: LIST
59605: LIST
59606: LIST
59607: LIST
59608: LIST
59609: LIST
59610: ST_TO_ADDR
// end ; end ;
59611: GO 59614
59613: POP
// case btype of b_depot , b_warehouse :
59614: LD_VAR 0 1
59618: PUSH
59619: LD_INT 0
59621: DOUBLE
59622: EQUAL
59623: IFTRUE 59633
59625: LD_INT 1
59627: DOUBLE
59628: EQUAL
59629: IFTRUE 59633
59631: GO 59834
59633: POP
// case nation of nation_american :
59634: LD_VAR 0 5
59638: PUSH
59639: LD_INT 1
59641: DOUBLE
59642: EQUAL
59643: IFTRUE 59647
59645: GO 59703
59647: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
59648: LD_ADDR_VAR 0 9
59652: PUSH
59653: LD_VAR 0 11
59657: PUSH
59658: LD_VAR 0 12
59662: PUSH
59663: LD_VAR 0 13
59667: PUSH
59668: LD_VAR 0 14
59672: PUSH
59673: LD_VAR 0 15
59677: PUSH
59678: LD_VAR 0 16
59682: PUSH
59683: EMPTY
59684: LIST
59685: LIST
59686: LIST
59687: LIST
59688: LIST
59689: LIST
59690: PUSH
59691: LD_VAR 0 4
59695: PUSH
59696: LD_INT 1
59698: PLUS
59699: ARRAY
59700: ST_TO_ADDR
59701: GO 59832
59703: LD_INT 2
59705: DOUBLE
59706: EQUAL
59707: IFTRUE 59711
59709: GO 59767
59711: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
59712: LD_ADDR_VAR 0 9
59716: PUSH
59717: LD_VAR 0 17
59721: PUSH
59722: LD_VAR 0 18
59726: PUSH
59727: LD_VAR 0 19
59731: PUSH
59732: LD_VAR 0 20
59736: PUSH
59737: LD_VAR 0 21
59741: PUSH
59742: LD_VAR 0 22
59746: PUSH
59747: EMPTY
59748: LIST
59749: LIST
59750: LIST
59751: LIST
59752: LIST
59753: LIST
59754: PUSH
59755: LD_VAR 0 4
59759: PUSH
59760: LD_INT 1
59762: PLUS
59763: ARRAY
59764: ST_TO_ADDR
59765: GO 59832
59767: LD_INT 3
59769: DOUBLE
59770: EQUAL
59771: IFTRUE 59775
59773: GO 59831
59775: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
59776: LD_ADDR_VAR 0 9
59780: PUSH
59781: LD_VAR 0 23
59785: PUSH
59786: LD_VAR 0 24
59790: PUSH
59791: LD_VAR 0 25
59795: PUSH
59796: LD_VAR 0 26
59800: PUSH
59801: LD_VAR 0 27
59805: PUSH
59806: LD_VAR 0 28
59810: PUSH
59811: EMPTY
59812: LIST
59813: LIST
59814: LIST
59815: LIST
59816: LIST
59817: LIST
59818: PUSH
59819: LD_VAR 0 4
59823: PUSH
59824: LD_INT 1
59826: PLUS
59827: ARRAY
59828: ST_TO_ADDR
59829: GO 59832
59831: POP
59832: GO 60387
59834: LD_INT 2
59836: DOUBLE
59837: EQUAL
59838: IFTRUE 59848
59840: LD_INT 3
59842: DOUBLE
59843: EQUAL
59844: IFTRUE 59848
59846: GO 59904
59848: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
59849: LD_ADDR_VAR 0 9
59853: PUSH
59854: LD_VAR 0 29
59858: PUSH
59859: LD_VAR 0 30
59863: PUSH
59864: LD_VAR 0 31
59868: PUSH
59869: LD_VAR 0 32
59873: PUSH
59874: LD_VAR 0 33
59878: PUSH
59879: LD_VAR 0 34
59883: PUSH
59884: EMPTY
59885: LIST
59886: LIST
59887: LIST
59888: LIST
59889: LIST
59890: LIST
59891: PUSH
59892: LD_VAR 0 4
59896: PUSH
59897: LD_INT 1
59899: PLUS
59900: ARRAY
59901: ST_TO_ADDR
59902: GO 60387
59904: LD_INT 16
59906: DOUBLE
59907: EQUAL
59908: IFTRUE 59966
59910: LD_INT 17
59912: DOUBLE
59913: EQUAL
59914: IFTRUE 59966
59916: LD_INT 18
59918: DOUBLE
59919: EQUAL
59920: IFTRUE 59966
59922: LD_INT 19
59924: DOUBLE
59925: EQUAL
59926: IFTRUE 59966
59928: LD_INT 22
59930: DOUBLE
59931: EQUAL
59932: IFTRUE 59966
59934: LD_INT 20
59936: DOUBLE
59937: EQUAL
59938: IFTRUE 59966
59940: LD_INT 21
59942: DOUBLE
59943: EQUAL
59944: IFTRUE 59966
59946: LD_INT 23
59948: DOUBLE
59949: EQUAL
59950: IFTRUE 59966
59952: LD_INT 24
59954: DOUBLE
59955: EQUAL
59956: IFTRUE 59966
59958: LD_INT 25
59960: DOUBLE
59961: EQUAL
59962: IFTRUE 59966
59964: GO 60022
59966: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
59967: LD_ADDR_VAR 0 9
59971: PUSH
59972: LD_VAR 0 35
59976: PUSH
59977: LD_VAR 0 36
59981: PUSH
59982: LD_VAR 0 37
59986: PUSH
59987: LD_VAR 0 38
59991: PUSH
59992: LD_VAR 0 39
59996: PUSH
59997: LD_VAR 0 40
60001: PUSH
60002: EMPTY
60003: LIST
60004: LIST
60005: LIST
60006: LIST
60007: LIST
60008: LIST
60009: PUSH
60010: LD_VAR 0 4
60014: PUSH
60015: LD_INT 1
60017: PLUS
60018: ARRAY
60019: ST_TO_ADDR
60020: GO 60387
60022: LD_INT 6
60024: DOUBLE
60025: EQUAL
60026: IFTRUE 60078
60028: LD_INT 7
60030: DOUBLE
60031: EQUAL
60032: IFTRUE 60078
60034: LD_INT 8
60036: DOUBLE
60037: EQUAL
60038: IFTRUE 60078
60040: LD_INT 13
60042: DOUBLE
60043: EQUAL
60044: IFTRUE 60078
60046: LD_INT 12
60048: DOUBLE
60049: EQUAL
60050: IFTRUE 60078
60052: LD_INT 15
60054: DOUBLE
60055: EQUAL
60056: IFTRUE 60078
60058: LD_INT 11
60060: DOUBLE
60061: EQUAL
60062: IFTRUE 60078
60064: LD_INT 14
60066: DOUBLE
60067: EQUAL
60068: IFTRUE 60078
60070: LD_INT 10
60072: DOUBLE
60073: EQUAL
60074: IFTRUE 60078
60076: GO 60134
60078: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
60079: LD_ADDR_VAR 0 9
60083: PUSH
60084: LD_VAR 0 41
60088: PUSH
60089: LD_VAR 0 42
60093: PUSH
60094: LD_VAR 0 43
60098: PUSH
60099: LD_VAR 0 44
60103: PUSH
60104: LD_VAR 0 45
60108: PUSH
60109: LD_VAR 0 46
60113: PUSH
60114: EMPTY
60115: LIST
60116: LIST
60117: LIST
60118: LIST
60119: LIST
60120: LIST
60121: PUSH
60122: LD_VAR 0 4
60126: PUSH
60127: LD_INT 1
60129: PLUS
60130: ARRAY
60131: ST_TO_ADDR
60132: GO 60387
60134: LD_INT 36
60136: DOUBLE
60137: EQUAL
60138: IFTRUE 60142
60140: GO 60198
60142: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
60143: LD_ADDR_VAR 0 9
60147: PUSH
60148: LD_VAR 0 47
60152: PUSH
60153: LD_VAR 0 48
60157: PUSH
60158: LD_VAR 0 49
60162: PUSH
60163: LD_VAR 0 50
60167: PUSH
60168: LD_VAR 0 51
60172: PUSH
60173: LD_VAR 0 52
60177: PUSH
60178: EMPTY
60179: LIST
60180: LIST
60181: LIST
60182: LIST
60183: LIST
60184: LIST
60185: PUSH
60186: LD_VAR 0 4
60190: PUSH
60191: LD_INT 1
60193: PLUS
60194: ARRAY
60195: ST_TO_ADDR
60196: GO 60387
60198: LD_INT 4
60200: DOUBLE
60201: EQUAL
60202: IFTRUE 60224
60204: LD_INT 5
60206: DOUBLE
60207: EQUAL
60208: IFTRUE 60224
60210: LD_INT 34
60212: DOUBLE
60213: EQUAL
60214: IFTRUE 60224
60216: LD_INT 37
60218: DOUBLE
60219: EQUAL
60220: IFTRUE 60224
60222: GO 60280
60224: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
60225: LD_ADDR_VAR 0 9
60229: PUSH
60230: LD_VAR 0 53
60234: PUSH
60235: LD_VAR 0 54
60239: PUSH
60240: LD_VAR 0 55
60244: PUSH
60245: LD_VAR 0 56
60249: PUSH
60250: LD_VAR 0 57
60254: PUSH
60255: LD_VAR 0 58
60259: PUSH
60260: EMPTY
60261: LIST
60262: LIST
60263: LIST
60264: LIST
60265: LIST
60266: LIST
60267: PUSH
60268: LD_VAR 0 4
60272: PUSH
60273: LD_INT 1
60275: PLUS
60276: ARRAY
60277: ST_TO_ADDR
60278: GO 60387
60280: LD_INT 31
60282: DOUBLE
60283: EQUAL
60284: IFTRUE 60330
60286: LD_INT 32
60288: DOUBLE
60289: EQUAL
60290: IFTRUE 60330
60292: LD_INT 33
60294: DOUBLE
60295: EQUAL
60296: IFTRUE 60330
60298: LD_INT 27
60300: DOUBLE
60301: EQUAL
60302: IFTRUE 60330
60304: LD_INT 26
60306: DOUBLE
60307: EQUAL
60308: IFTRUE 60330
60310: LD_INT 28
60312: DOUBLE
60313: EQUAL
60314: IFTRUE 60330
60316: LD_INT 29
60318: DOUBLE
60319: EQUAL
60320: IFTRUE 60330
60322: LD_INT 30
60324: DOUBLE
60325: EQUAL
60326: IFTRUE 60330
60328: GO 60386
60330: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
60331: LD_ADDR_VAR 0 9
60335: PUSH
60336: LD_VAR 0 59
60340: PUSH
60341: LD_VAR 0 60
60345: PUSH
60346: LD_VAR 0 61
60350: PUSH
60351: LD_VAR 0 62
60355: PUSH
60356: LD_VAR 0 63
60360: PUSH
60361: LD_VAR 0 64
60365: PUSH
60366: EMPTY
60367: LIST
60368: LIST
60369: LIST
60370: LIST
60371: LIST
60372: LIST
60373: PUSH
60374: LD_VAR 0 4
60378: PUSH
60379: LD_INT 1
60381: PLUS
60382: ARRAY
60383: ST_TO_ADDR
60384: GO 60387
60386: POP
// temp_list2 = [ ] ;
60387: LD_ADDR_VAR 0 10
60391: PUSH
60392: EMPTY
60393: ST_TO_ADDR
// for i in temp_list do
60394: LD_ADDR_VAR 0 8
60398: PUSH
60399: LD_VAR 0 9
60403: PUSH
60404: FOR_IN
60405: IFFALSE 60457
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
60407: LD_ADDR_VAR 0 10
60411: PUSH
60412: LD_VAR 0 10
60416: PUSH
60417: LD_VAR 0 8
60421: PUSH
60422: LD_INT 1
60424: ARRAY
60425: PUSH
60426: LD_VAR 0 2
60430: PLUS
60431: PUSH
60432: LD_VAR 0 8
60436: PUSH
60437: LD_INT 2
60439: ARRAY
60440: PUSH
60441: LD_VAR 0 3
60445: PLUS
60446: PUSH
60447: EMPTY
60448: LIST
60449: LIST
60450: PUSH
60451: EMPTY
60452: LIST
60453: ADD
60454: ST_TO_ADDR
60455: GO 60404
60457: POP
60458: POP
// result = temp_list2 ;
60459: LD_ADDR_VAR 0 7
60463: PUSH
60464: LD_VAR 0 10
60468: ST_TO_ADDR
// end ;
60469: LD_VAR 0 7
60473: RET
// export function EnemyInRange ( unit , dist ) ; begin
60474: LD_INT 0
60476: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
60477: LD_ADDR_VAR 0 3
60481: PUSH
60482: LD_VAR 0 1
60486: PPUSH
60487: CALL_OW 255
60491: PPUSH
60492: LD_VAR 0 1
60496: PPUSH
60497: CALL_OW 250
60501: PPUSH
60502: LD_VAR 0 1
60506: PPUSH
60507: CALL_OW 251
60511: PPUSH
60512: LD_VAR 0 2
60516: PPUSH
60517: CALL 33876 0 4
60521: PUSH
60522: LD_INT 4
60524: ARRAY
60525: ST_TO_ADDR
// end ;
60526: LD_VAR 0 3
60530: RET
// export function PlayerSeeMe ( unit ) ; begin
60531: LD_INT 0
60533: PPUSH
// result := See ( your_side , unit ) ;
60534: LD_ADDR_VAR 0 2
60538: PUSH
60539: LD_OWVAR 2
60543: PPUSH
60544: LD_VAR 0 1
60548: PPUSH
60549: CALL_OW 292
60553: ST_TO_ADDR
// end ;
60554: LD_VAR 0 2
60558: RET
// export function ReverseDir ( unit ) ; begin
60559: LD_INT 0
60561: PPUSH
// if not unit then
60562: LD_VAR 0 1
60566: NOT
60567: IFFALSE 60571
// exit ;
60569: GO 60594
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
60571: LD_ADDR_VAR 0 2
60575: PUSH
60576: LD_VAR 0 1
60580: PPUSH
60581: CALL_OW 254
60585: PUSH
60586: LD_INT 3
60588: PLUS
60589: PUSH
60590: LD_INT 6
60592: MOD
60593: ST_TO_ADDR
// end ;
60594: LD_VAR 0 2
60598: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
60599: LD_INT 0
60601: PPUSH
60602: PPUSH
60603: PPUSH
60604: PPUSH
60605: PPUSH
60606: PPUSH
// if not unit or not hexes then
60607: LD_VAR 0 1
60611: NOT
60612: PUSH
60613: LD_VAR 0 2
60617: NOT
60618: OR
60619: IFFALSE 60623
// exit ;
60621: GO 60746
// dist := 9999 ;
60623: LD_ADDR_VAR 0 5
60627: PUSH
60628: LD_INT 9999
60630: ST_TO_ADDR
// for i = 1 to hexes do
60631: LD_ADDR_VAR 0 4
60635: PUSH
60636: DOUBLE
60637: LD_INT 1
60639: DEC
60640: ST_TO_ADDR
60641: LD_VAR 0 2
60645: PUSH
60646: FOR_TO
60647: IFFALSE 60734
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
60649: LD_ADDR_VAR 0 6
60653: PUSH
60654: LD_VAR 0 1
60658: PPUSH
60659: LD_VAR 0 2
60663: PUSH
60664: LD_VAR 0 4
60668: ARRAY
60669: PUSH
60670: LD_INT 1
60672: ARRAY
60673: PPUSH
60674: LD_VAR 0 2
60678: PUSH
60679: LD_VAR 0 4
60683: ARRAY
60684: PUSH
60685: LD_INT 2
60687: ARRAY
60688: PPUSH
60689: CALL_OW 297
60693: ST_TO_ADDR
// if tdist < dist then
60694: LD_VAR 0 6
60698: PUSH
60699: LD_VAR 0 5
60703: LESS
60704: IFFALSE 60732
// begin hex := hexes [ i ] ;
60706: LD_ADDR_VAR 0 8
60710: PUSH
60711: LD_VAR 0 2
60715: PUSH
60716: LD_VAR 0 4
60720: ARRAY
60721: ST_TO_ADDR
// dist := tdist ;
60722: LD_ADDR_VAR 0 5
60726: PUSH
60727: LD_VAR 0 6
60731: ST_TO_ADDR
// end ; end ;
60732: GO 60646
60734: POP
60735: POP
// result := hex ;
60736: LD_ADDR_VAR 0 3
60740: PUSH
60741: LD_VAR 0 8
60745: ST_TO_ADDR
// end ;
60746: LD_VAR 0 3
60750: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
60751: LD_INT 0
60753: PPUSH
60754: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
60755: LD_VAR 0 1
60759: NOT
60760: PUSH
60761: LD_VAR 0 1
60765: PUSH
60766: LD_INT 21
60768: PUSH
60769: LD_INT 2
60771: PUSH
60772: EMPTY
60773: LIST
60774: LIST
60775: PUSH
60776: LD_INT 23
60778: PUSH
60779: LD_INT 2
60781: PUSH
60782: EMPTY
60783: LIST
60784: LIST
60785: PUSH
60786: EMPTY
60787: LIST
60788: LIST
60789: PPUSH
60790: CALL_OW 69
60794: IN
60795: NOT
60796: OR
60797: IFFALSE 60801
// exit ;
60799: GO 60848
// for i = 1 to 3 do
60801: LD_ADDR_VAR 0 3
60805: PUSH
60806: DOUBLE
60807: LD_INT 1
60809: DEC
60810: ST_TO_ADDR
60811: LD_INT 3
60813: PUSH
60814: FOR_TO
60815: IFFALSE 60846
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
60817: LD_VAR 0 1
60821: PPUSH
60822: CALL_OW 250
60826: PPUSH
60827: LD_VAR 0 1
60831: PPUSH
60832: CALL_OW 251
60836: PPUSH
60837: LD_INT 1
60839: PPUSH
60840: CALL_OW 453
60844: GO 60814
60846: POP
60847: POP
// end ;
60848: LD_VAR 0 2
60852: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
60853: LD_INT 0
60855: PPUSH
60856: PPUSH
60857: PPUSH
60858: PPUSH
60859: PPUSH
60860: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
60861: LD_VAR 0 1
60865: NOT
60866: PUSH
60867: LD_VAR 0 2
60871: NOT
60872: OR
60873: PUSH
60874: LD_VAR 0 1
60878: PPUSH
60879: CALL_OW 314
60883: OR
60884: IFFALSE 60888
// exit ;
60886: GO 61329
// x := GetX ( enemy_unit ) ;
60888: LD_ADDR_VAR 0 7
60892: PUSH
60893: LD_VAR 0 2
60897: PPUSH
60898: CALL_OW 250
60902: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
60903: LD_ADDR_VAR 0 8
60907: PUSH
60908: LD_VAR 0 2
60912: PPUSH
60913: CALL_OW 251
60917: ST_TO_ADDR
// if not x or not y then
60918: LD_VAR 0 7
60922: NOT
60923: PUSH
60924: LD_VAR 0 8
60928: NOT
60929: OR
60930: IFFALSE 60934
// exit ;
60932: GO 61329
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
60934: LD_ADDR_VAR 0 6
60938: PUSH
60939: LD_VAR 0 7
60943: PPUSH
60944: LD_INT 0
60946: PPUSH
60947: LD_INT 4
60949: PPUSH
60950: CALL_OW 272
60954: PUSH
60955: LD_VAR 0 8
60959: PPUSH
60960: LD_INT 0
60962: PPUSH
60963: LD_INT 4
60965: PPUSH
60966: CALL_OW 273
60970: PUSH
60971: EMPTY
60972: LIST
60973: LIST
60974: PUSH
60975: LD_VAR 0 7
60979: PPUSH
60980: LD_INT 1
60982: PPUSH
60983: LD_INT 4
60985: PPUSH
60986: CALL_OW 272
60990: PUSH
60991: LD_VAR 0 8
60995: PPUSH
60996: LD_INT 1
60998: PPUSH
60999: LD_INT 4
61001: PPUSH
61002: CALL_OW 273
61006: PUSH
61007: EMPTY
61008: LIST
61009: LIST
61010: PUSH
61011: LD_VAR 0 7
61015: PPUSH
61016: LD_INT 2
61018: PPUSH
61019: LD_INT 4
61021: PPUSH
61022: CALL_OW 272
61026: PUSH
61027: LD_VAR 0 8
61031: PPUSH
61032: LD_INT 2
61034: PPUSH
61035: LD_INT 4
61037: PPUSH
61038: CALL_OW 273
61042: PUSH
61043: EMPTY
61044: LIST
61045: LIST
61046: PUSH
61047: LD_VAR 0 7
61051: PPUSH
61052: LD_INT 3
61054: PPUSH
61055: LD_INT 4
61057: PPUSH
61058: CALL_OW 272
61062: PUSH
61063: LD_VAR 0 8
61067: PPUSH
61068: LD_INT 3
61070: PPUSH
61071: LD_INT 4
61073: PPUSH
61074: CALL_OW 273
61078: PUSH
61079: EMPTY
61080: LIST
61081: LIST
61082: PUSH
61083: LD_VAR 0 7
61087: PPUSH
61088: LD_INT 4
61090: PPUSH
61091: LD_INT 4
61093: PPUSH
61094: CALL_OW 272
61098: PUSH
61099: LD_VAR 0 8
61103: PPUSH
61104: LD_INT 4
61106: PPUSH
61107: LD_INT 4
61109: PPUSH
61110: CALL_OW 273
61114: PUSH
61115: EMPTY
61116: LIST
61117: LIST
61118: PUSH
61119: LD_VAR 0 7
61123: PPUSH
61124: LD_INT 5
61126: PPUSH
61127: LD_INT 4
61129: PPUSH
61130: CALL_OW 272
61134: PUSH
61135: LD_VAR 0 8
61139: PPUSH
61140: LD_INT 5
61142: PPUSH
61143: LD_INT 4
61145: PPUSH
61146: CALL_OW 273
61150: PUSH
61151: EMPTY
61152: LIST
61153: LIST
61154: PUSH
61155: EMPTY
61156: LIST
61157: LIST
61158: LIST
61159: LIST
61160: LIST
61161: LIST
61162: ST_TO_ADDR
// for i = tmp downto 1 do
61163: LD_ADDR_VAR 0 4
61167: PUSH
61168: DOUBLE
61169: LD_VAR 0 6
61173: INC
61174: ST_TO_ADDR
61175: LD_INT 1
61177: PUSH
61178: FOR_DOWNTO
61179: IFFALSE 61280
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
61181: LD_VAR 0 6
61185: PUSH
61186: LD_VAR 0 4
61190: ARRAY
61191: PUSH
61192: LD_INT 1
61194: ARRAY
61195: PPUSH
61196: LD_VAR 0 6
61200: PUSH
61201: LD_VAR 0 4
61205: ARRAY
61206: PUSH
61207: LD_INT 2
61209: ARRAY
61210: PPUSH
61211: CALL_OW 488
61215: NOT
61216: PUSH
61217: LD_VAR 0 6
61221: PUSH
61222: LD_VAR 0 4
61226: ARRAY
61227: PUSH
61228: LD_INT 1
61230: ARRAY
61231: PPUSH
61232: LD_VAR 0 6
61236: PUSH
61237: LD_VAR 0 4
61241: ARRAY
61242: PUSH
61243: LD_INT 2
61245: ARRAY
61246: PPUSH
61247: CALL_OW 428
61251: PUSH
61252: LD_INT 0
61254: NONEQUAL
61255: OR
61256: IFFALSE 61278
// tmp := Delete ( tmp , i ) ;
61258: LD_ADDR_VAR 0 6
61262: PUSH
61263: LD_VAR 0 6
61267: PPUSH
61268: LD_VAR 0 4
61272: PPUSH
61273: CALL_OW 3
61277: ST_TO_ADDR
61278: GO 61178
61280: POP
61281: POP
// j := GetClosestHex ( unit , tmp ) ;
61282: LD_ADDR_VAR 0 5
61286: PUSH
61287: LD_VAR 0 1
61291: PPUSH
61292: LD_VAR 0 6
61296: PPUSH
61297: CALL 60599 0 2
61301: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
61302: LD_VAR 0 1
61306: PPUSH
61307: LD_VAR 0 5
61311: PUSH
61312: LD_INT 1
61314: ARRAY
61315: PPUSH
61316: LD_VAR 0 5
61320: PUSH
61321: LD_INT 2
61323: ARRAY
61324: PPUSH
61325: CALL_OW 111
// end ;
61329: LD_VAR 0 3
61333: RET
// export function PrepareApemanSoldier ( ) ; begin
61334: LD_INT 0
61336: PPUSH
// uc_nation := 0 ;
61337: LD_ADDR_OWVAR 21
61341: PUSH
61342: LD_INT 0
61344: ST_TO_ADDR
// hc_sex := sex_male ;
61345: LD_ADDR_OWVAR 27
61349: PUSH
61350: LD_INT 1
61352: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
61353: LD_ADDR_OWVAR 28
61357: PUSH
61358: LD_INT 15
61360: ST_TO_ADDR
// hc_gallery :=  ;
61361: LD_ADDR_OWVAR 33
61365: PUSH
61366: LD_STRING 
61368: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
61369: LD_ADDR_OWVAR 31
61373: PUSH
61374: LD_INT 0
61376: PPUSH
61377: LD_INT 3
61379: PPUSH
61380: CALL_OW 12
61384: PUSH
61385: LD_INT 0
61387: PPUSH
61388: LD_INT 3
61390: PPUSH
61391: CALL_OW 12
61395: PUSH
61396: LD_INT 0
61398: PUSH
61399: LD_INT 0
61401: PUSH
61402: EMPTY
61403: LIST
61404: LIST
61405: LIST
61406: LIST
61407: ST_TO_ADDR
// end ;
61408: LD_VAR 0 1
61412: RET
// export function PrepareApemanEngineer ( ) ; begin
61413: LD_INT 0
61415: PPUSH
// uc_nation := 0 ;
61416: LD_ADDR_OWVAR 21
61420: PUSH
61421: LD_INT 0
61423: ST_TO_ADDR
// hc_sex := sex_male ;
61424: LD_ADDR_OWVAR 27
61428: PUSH
61429: LD_INT 1
61431: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
61432: LD_ADDR_OWVAR 28
61436: PUSH
61437: LD_INT 16
61439: ST_TO_ADDR
// hc_gallery :=  ;
61440: LD_ADDR_OWVAR 33
61444: PUSH
61445: LD_STRING 
61447: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
61448: LD_ADDR_OWVAR 31
61452: PUSH
61453: LD_INT 0
61455: PPUSH
61456: LD_INT 3
61458: PPUSH
61459: CALL_OW 12
61463: PUSH
61464: LD_INT 0
61466: PPUSH
61467: LD_INT 3
61469: PPUSH
61470: CALL_OW 12
61474: PUSH
61475: LD_INT 0
61477: PUSH
61478: LD_INT 0
61480: PUSH
61481: EMPTY
61482: LIST
61483: LIST
61484: LIST
61485: LIST
61486: ST_TO_ADDR
// end ;
61487: LD_VAR 0 1
61491: RET
// export function PrepareApeman ( agressivity ) ; begin
61492: LD_INT 0
61494: PPUSH
// uc_side := 0 ;
61495: LD_ADDR_OWVAR 20
61499: PUSH
61500: LD_INT 0
61502: ST_TO_ADDR
// uc_nation := 0 ;
61503: LD_ADDR_OWVAR 21
61507: PUSH
61508: LD_INT 0
61510: ST_TO_ADDR
// hc_sex := sex_male ;
61511: LD_ADDR_OWVAR 27
61515: PUSH
61516: LD_INT 1
61518: ST_TO_ADDR
// hc_class := class_apeman ;
61519: LD_ADDR_OWVAR 28
61523: PUSH
61524: LD_INT 12
61526: ST_TO_ADDR
// hc_gallery :=  ;
61527: LD_ADDR_OWVAR 33
61531: PUSH
61532: LD_STRING 
61534: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
61535: LD_ADDR_OWVAR 35
61539: PUSH
61540: LD_VAR 0 1
61544: NEG
61545: PPUSH
61546: LD_VAR 0 1
61550: PPUSH
61551: CALL_OW 12
61555: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
61556: LD_ADDR_OWVAR 31
61560: PUSH
61561: LD_INT 0
61563: PPUSH
61564: LD_INT 3
61566: PPUSH
61567: CALL_OW 12
61571: PUSH
61572: LD_INT 0
61574: PPUSH
61575: LD_INT 3
61577: PPUSH
61578: CALL_OW 12
61582: PUSH
61583: LD_INT 0
61585: PUSH
61586: LD_INT 0
61588: PUSH
61589: EMPTY
61590: LIST
61591: LIST
61592: LIST
61593: LIST
61594: ST_TO_ADDR
// end ;
61595: LD_VAR 0 2
61599: RET
// export function PrepareTiger ( agressivity ) ; begin
61600: LD_INT 0
61602: PPUSH
// uc_side := 0 ;
61603: LD_ADDR_OWVAR 20
61607: PUSH
61608: LD_INT 0
61610: ST_TO_ADDR
// uc_nation := 0 ;
61611: LD_ADDR_OWVAR 21
61615: PUSH
61616: LD_INT 0
61618: ST_TO_ADDR
// hc_class := class_tiger ;
61619: LD_ADDR_OWVAR 28
61623: PUSH
61624: LD_INT 14
61626: ST_TO_ADDR
// hc_gallery :=  ;
61627: LD_ADDR_OWVAR 33
61631: PUSH
61632: LD_STRING 
61634: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
61635: LD_ADDR_OWVAR 35
61639: PUSH
61640: LD_VAR 0 1
61644: NEG
61645: PPUSH
61646: LD_VAR 0 1
61650: PPUSH
61651: CALL_OW 12
61655: ST_TO_ADDR
// end ;
61656: LD_VAR 0 2
61660: RET
// export function PrepareEnchidna ( ) ; begin
61661: LD_INT 0
61663: PPUSH
// uc_side := 0 ;
61664: LD_ADDR_OWVAR 20
61668: PUSH
61669: LD_INT 0
61671: ST_TO_ADDR
// uc_nation := 0 ;
61672: LD_ADDR_OWVAR 21
61676: PUSH
61677: LD_INT 0
61679: ST_TO_ADDR
// hc_class := class_baggie ;
61680: LD_ADDR_OWVAR 28
61684: PUSH
61685: LD_INT 13
61687: ST_TO_ADDR
// hc_gallery :=  ;
61688: LD_ADDR_OWVAR 33
61692: PUSH
61693: LD_STRING 
61695: ST_TO_ADDR
// end ;
61696: LD_VAR 0 1
61700: RET
// export function PrepareFrog ( ) ; begin
61701: LD_INT 0
61703: PPUSH
// uc_side := 0 ;
61704: LD_ADDR_OWVAR 20
61708: PUSH
61709: LD_INT 0
61711: ST_TO_ADDR
// uc_nation := 0 ;
61712: LD_ADDR_OWVAR 21
61716: PUSH
61717: LD_INT 0
61719: ST_TO_ADDR
// hc_class := class_frog ;
61720: LD_ADDR_OWVAR 28
61724: PUSH
61725: LD_INT 19
61727: ST_TO_ADDR
// hc_gallery :=  ;
61728: LD_ADDR_OWVAR 33
61732: PUSH
61733: LD_STRING 
61735: ST_TO_ADDR
// end ;
61736: LD_VAR 0 1
61740: RET
// export function PrepareFish ( ) ; begin
61741: LD_INT 0
61743: PPUSH
// uc_side := 0 ;
61744: LD_ADDR_OWVAR 20
61748: PUSH
61749: LD_INT 0
61751: ST_TO_ADDR
// uc_nation := 0 ;
61752: LD_ADDR_OWVAR 21
61756: PUSH
61757: LD_INT 0
61759: ST_TO_ADDR
// hc_class := class_fish ;
61760: LD_ADDR_OWVAR 28
61764: PUSH
61765: LD_INT 20
61767: ST_TO_ADDR
// hc_gallery :=  ;
61768: LD_ADDR_OWVAR 33
61772: PUSH
61773: LD_STRING 
61775: ST_TO_ADDR
// end ;
61776: LD_VAR 0 1
61780: RET
// export function PrepareBird ( ) ; begin
61781: LD_INT 0
61783: PPUSH
// uc_side := 0 ;
61784: LD_ADDR_OWVAR 20
61788: PUSH
61789: LD_INT 0
61791: ST_TO_ADDR
// uc_nation := 0 ;
61792: LD_ADDR_OWVAR 21
61796: PUSH
61797: LD_INT 0
61799: ST_TO_ADDR
// hc_class := class_phororhacos ;
61800: LD_ADDR_OWVAR 28
61804: PUSH
61805: LD_INT 18
61807: ST_TO_ADDR
// hc_gallery :=  ;
61808: LD_ADDR_OWVAR 33
61812: PUSH
61813: LD_STRING 
61815: ST_TO_ADDR
// end ;
61816: LD_VAR 0 1
61820: RET
// export function PrepareHorse ( ) ; begin
61821: LD_INT 0
61823: PPUSH
// uc_side := 0 ;
61824: LD_ADDR_OWVAR 20
61828: PUSH
61829: LD_INT 0
61831: ST_TO_ADDR
// uc_nation := 0 ;
61832: LD_ADDR_OWVAR 21
61836: PUSH
61837: LD_INT 0
61839: ST_TO_ADDR
// hc_class := class_horse ;
61840: LD_ADDR_OWVAR 28
61844: PUSH
61845: LD_INT 21
61847: ST_TO_ADDR
// hc_gallery :=  ;
61848: LD_ADDR_OWVAR 33
61852: PUSH
61853: LD_STRING 
61855: ST_TO_ADDR
// end ;
61856: LD_VAR 0 1
61860: RET
// export function PrepareMastodont ( ) ; begin
61861: LD_INT 0
61863: PPUSH
// uc_side := 0 ;
61864: LD_ADDR_OWVAR 20
61868: PUSH
61869: LD_INT 0
61871: ST_TO_ADDR
// uc_nation := 0 ;
61872: LD_ADDR_OWVAR 21
61876: PUSH
61877: LD_INT 0
61879: ST_TO_ADDR
// vc_chassis := class_mastodont ;
61880: LD_ADDR_OWVAR 37
61884: PUSH
61885: LD_INT 31
61887: ST_TO_ADDR
// vc_control := control_rider ;
61888: LD_ADDR_OWVAR 38
61892: PUSH
61893: LD_INT 4
61895: ST_TO_ADDR
// end ;
61896: LD_VAR 0 1
61900: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
61901: LD_INT 0
61903: PPUSH
61904: PPUSH
61905: PPUSH
// uc_side = 0 ;
61906: LD_ADDR_OWVAR 20
61910: PUSH
61911: LD_INT 0
61913: ST_TO_ADDR
// uc_nation = 0 ;
61914: LD_ADDR_OWVAR 21
61918: PUSH
61919: LD_INT 0
61921: ST_TO_ADDR
// InitHc_All ( ) ;
61922: CALL_OW 584
// InitVc ;
61926: CALL_OW 20
// if mastodonts then
61930: LD_VAR 0 6
61934: IFFALSE 62001
// for i = 1 to mastodonts do
61936: LD_ADDR_VAR 0 11
61940: PUSH
61941: DOUBLE
61942: LD_INT 1
61944: DEC
61945: ST_TO_ADDR
61946: LD_VAR 0 6
61950: PUSH
61951: FOR_TO
61952: IFFALSE 61999
// begin vc_chassis := 31 ;
61954: LD_ADDR_OWVAR 37
61958: PUSH
61959: LD_INT 31
61961: ST_TO_ADDR
// vc_control := control_rider ;
61962: LD_ADDR_OWVAR 38
61966: PUSH
61967: LD_INT 4
61969: ST_TO_ADDR
// animal := CreateVehicle ;
61970: LD_ADDR_VAR 0 12
61974: PUSH
61975: CALL_OW 45
61979: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61980: LD_VAR 0 12
61984: PPUSH
61985: LD_VAR 0 8
61989: PPUSH
61990: LD_INT 0
61992: PPUSH
61993: CALL 64136 0 3
// end ;
61997: GO 61951
61999: POP
62000: POP
// if horses then
62001: LD_VAR 0 5
62005: IFFALSE 62072
// for i = 1 to horses do
62007: LD_ADDR_VAR 0 11
62011: PUSH
62012: DOUBLE
62013: LD_INT 1
62015: DEC
62016: ST_TO_ADDR
62017: LD_VAR 0 5
62021: PUSH
62022: FOR_TO
62023: IFFALSE 62070
// begin hc_class := 21 ;
62025: LD_ADDR_OWVAR 28
62029: PUSH
62030: LD_INT 21
62032: ST_TO_ADDR
// hc_gallery :=  ;
62033: LD_ADDR_OWVAR 33
62037: PUSH
62038: LD_STRING 
62040: ST_TO_ADDR
// animal := CreateHuman ;
62041: LD_ADDR_VAR 0 12
62045: PUSH
62046: CALL_OW 44
62050: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62051: LD_VAR 0 12
62055: PPUSH
62056: LD_VAR 0 8
62060: PPUSH
62061: LD_INT 0
62063: PPUSH
62064: CALL 64136 0 3
// end ;
62068: GO 62022
62070: POP
62071: POP
// if birds then
62072: LD_VAR 0 1
62076: IFFALSE 62143
// for i = 1 to birds do
62078: LD_ADDR_VAR 0 11
62082: PUSH
62083: DOUBLE
62084: LD_INT 1
62086: DEC
62087: ST_TO_ADDR
62088: LD_VAR 0 1
62092: PUSH
62093: FOR_TO
62094: IFFALSE 62141
// begin hc_class = 18 ;
62096: LD_ADDR_OWVAR 28
62100: PUSH
62101: LD_INT 18
62103: ST_TO_ADDR
// hc_gallery =  ;
62104: LD_ADDR_OWVAR 33
62108: PUSH
62109: LD_STRING 
62111: ST_TO_ADDR
// animal := CreateHuman ;
62112: LD_ADDR_VAR 0 12
62116: PUSH
62117: CALL_OW 44
62121: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62122: LD_VAR 0 12
62126: PPUSH
62127: LD_VAR 0 8
62131: PPUSH
62132: LD_INT 0
62134: PPUSH
62135: CALL 64136 0 3
// end ;
62139: GO 62093
62141: POP
62142: POP
// if tigers then
62143: LD_VAR 0 2
62147: IFFALSE 62231
// for i = 1 to tigers do
62149: LD_ADDR_VAR 0 11
62153: PUSH
62154: DOUBLE
62155: LD_INT 1
62157: DEC
62158: ST_TO_ADDR
62159: LD_VAR 0 2
62163: PUSH
62164: FOR_TO
62165: IFFALSE 62229
// begin hc_class = class_tiger ;
62167: LD_ADDR_OWVAR 28
62171: PUSH
62172: LD_INT 14
62174: ST_TO_ADDR
// hc_gallery =  ;
62175: LD_ADDR_OWVAR 33
62179: PUSH
62180: LD_STRING 
62182: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
62183: LD_ADDR_OWVAR 35
62187: PUSH
62188: LD_INT 7
62190: NEG
62191: PPUSH
62192: LD_INT 7
62194: PPUSH
62195: CALL_OW 12
62199: ST_TO_ADDR
// animal := CreateHuman ;
62200: LD_ADDR_VAR 0 12
62204: PUSH
62205: CALL_OW 44
62209: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62210: LD_VAR 0 12
62214: PPUSH
62215: LD_VAR 0 8
62219: PPUSH
62220: LD_INT 0
62222: PPUSH
62223: CALL 64136 0 3
// end ;
62227: GO 62164
62229: POP
62230: POP
// if apemans then
62231: LD_VAR 0 3
62235: IFFALSE 62358
// for i = 1 to apemans do
62237: LD_ADDR_VAR 0 11
62241: PUSH
62242: DOUBLE
62243: LD_INT 1
62245: DEC
62246: ST_TO_ADDR
62247: LD_VAR 0 3
62251: PUSH
62252: FOR_TO
62253: IFFALSE 62356
// begin hc_class = class_apeman ;
62255: LD_ADDR_OWVAR 28
62259: PUSH
62260: LD_INT 12
62262: ST_TO_ADDR
// hc_gallery =  ;
62263: LD_ADDR_OWVAR 33
62267: PUSH
62268: LD_STRING 
62270: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
62271: LD_ADDR_OWVAR 35
62275: PUSH
62276: LD_INT 2
62278: NEG
62279: PPUSH
62280: LD_INT 2
62282: PPUSH
62283: CALL_OW 12
62287: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
62288: LD_ADDR_OWVAR 31
62292: PUSH
62293: LD_INT 1
62295: PPUSH
62296: LD_INT 3
62298: PPUSH
62299: CALL_OW 12
62303: PUSH
62304: LD_INT 1
62306: PPUSH
62307: LD_INT 3
62309: PPUSH
62310: CALL_OW 12
62314: PUSH
62315: LD_INT 0
62317: PUSH
62318: LD_INT 0
62320: PUSH
62321: EMPTY
62322: LIST
62323: LIST
62324: LIST
62325: LIST
62326: ST_TO_ADDR
// animal := CreateHuman ;
62327: LD_ADDR_VAR 0 12
62331: PUSH
62332: CALL_OW 44
62336: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62337: LD_VAR 0 12
62341: PPUSH
62342: LD_VAR 0 8
62346: PPUSH
62347: LD_INT 0
62349: PPUSH
62350: CALL 64136 0 3
// end ;
62354: GO 62252
62356: POP
62357: POP
// if enchidnas then
62358: LD_VAR 0 4
62362: IFFALSE 62429
// for i = 1 to enchidnas do
62364: LD_ADDR_VAR 0 11
62368: PUSH
62369: DOUBLE
62370: LD_INT 1
62372: DEC
62373: ST_TO_ADDR
62374: LD_VAR 0 4
62378: PUSH
62379: FOR_TO
62380: IFFALSE 62427
// begin hc_class = 13 ;
62382: LD_ADDR_OWVAR 28
62386: PUSH
62387: LD_INT 13
62389: ST_TO_ADDR
// hc_gallery =  ;
62390: LD_ADDR_OWVAR 33
62394: PUSH
62395: LD_STRING 
62397: ST_TO_ADDR
// animal := CreateHuman ;
62398: LD_ADDR_VAR 0 12
62402: PUSH
62403: CALL_OW 44
62407: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62408: LD_VAR 0 12
62412: PPUSH
62413: LD_VAR 0 8
62417: PPUSH
62418: LD_INT 0
62420: PPUSH
62421: CALL 64136 0 3
// end ;
62425: GO 62379
62427: POP
62428: POP
// if fishes then
62429: LD_VAR 0 7
62433: IFFALSE 62500
// for i = 1 to fishes do
62435: LD_ADDR_VAR 0 11
62439: PUSH
62440: DOUBLE
62441: LD_INT 1
62443: DEC
62444: ST_TO_ADDR
62445: LD_VAR 0 7
62449: PUSH
62450: FOR_TO
62451: IFFALSE 62498
// begin hc_class = 20 ;
62453: LD_ADDR_OWVAR 28
62457: PUSH
62458: LD_INT 20
62460: ST_TO_ADDR
// hc_gallery =  ;
62461: LD_ADDR_OWVAR 33
62465: PUSH
62466: LD_STRING 
62468: ST_TO_ADDR
// animal := CreateHuman ;
62469: LD_ADDR_VAR 0 12
62473: PUSH
62474: CALL_OW 44
62478: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
62479: LD_VAR 0 12
62483: PPUSH
62484: LD_VAR 0 9
62488: PPUSH
62489: LD_INT 0
62491: PPUSH
62492: CALL 64136 0 3
// end ;
62496: GO 62450
62498: POP
62499: POP
// end ;
62500: LD_VAR 0 10
62504: RET
// export function WantHeal ( sci , unit ) ; begin
62505: LD_INT 0
62507: PPUSH
// if GetTaskList ( sci ) > 0 then
62508: LD_VAR 0 1
62512: PPUSH
62513: CALL_OW 437
62517: PUSH
62518: LD_INT 0
62520: GREATER
62521: IFFALSE 62591
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
62523: LD_VAR 0 1
62527: PPUSH
62528: CALL_OW 437
62532: PUSH
62533: LD_INT 1
62535: ARRAY
62536: PUSH
62537: LD_INT 1
62539: ARRAY
62540: PUSH
62541: LD_STRING l
62543: EQUAL
62544: PUSH
62545: LD_VAR 0 1
62549: PPUSH
62550: CALL_OW 437
62554: PUSH
62555: LD_INT 1
62557: ARRAY
62558: PUSH
62559: LD_INT 4
62561: ARRAY
62562: PUSH
62563: LD_VAR 0 2
62567: EQUAL
62568: AND
62569: IFFALSE 62581
// result := true else
62571: LD_ADDR_VAR 0 3
62575: PUSH
62576: LD_INT 1
62578: ST_TO_ADDR
62579: GO 62589
// result := false ;
62581: LD_ADDR_VAR 0 3
62585: PUSH
62586: LD_INT 0
62588: ST_TO_ADDR
// end else
62589: GO 62599
// result := false ;
62591: LD_ADDR_VAR 0 3
62595: PUSH
62596: LD_INT 0
62598: ST_TO_ADDR
// end ;
62599: LD_VAR 0 3
62603: RET
// export function HealTarget ( sci ) ; begin
62604: LD_INT 0
62606: PPUSH
// if not sci then
62607: LD_VAR 0 1
62611: NOT
62612: IFFALSE 62616
// exit ;
62614: GO 62681
// result := 0 ;
62616: LD_ADDR_VAR 0 2
62620: PUSH
62621: LD_INT 0
62623: ST_TO_ADDR
// if GetTaskList ( sci ) then
62624: LD_VAR 0 1
62628: PPUSH
62629: CALL_OW 437
62633: IFFALSE 62681
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
62635: LD_VAR 0 1
62639: PPUSH
62640: CALL_OW 437
62644: PUSH
62645: LD_INT 1
62647: ARRAY
62648: PUSH
62649: LD_INT 1
62651: ARRAY
62652: PUSH
62653: LD_STRING l
62655: EQUAL
62656: IFFALSE 62681
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
62658: LD_ADDR_VAR 0 2
62662: PUSH
62663: LD_VAR 0 1
62667: PPUSH
62668: CALL_OW 437
62672: PUSH
62673: LD_INT 1
62675: ARRAY
62676: PUSH
62677: LD_INT 4
62679: ARRAY
62680: ST_TO_ADDR
// end ;
62681: LD_VAR 0 2
62685: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
62686: LD_INT 0
62688: PPUSH
62689: PPUSH
62690: PPUSH
62691: PPUSH
// if not base_units then
62692: LD_VAR 0 1
62696: NOT
62697: IFFALSE 62701
// exit ;
62699: GO 62788
// result := false ;
62701: LD_ADDR_VAR 0 2
62705: PUSH
62706: LD_INT 0
62708: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
62709: LD_ADDR_VAR 0 5
62713: PUSH
62714: LD_VAR 0 1
62718: PPUSH
62719: LD_INT 21
62721: PUSH
62722: LD_INT 3
62724: PUSH
62725: EMPTY
62726: LIST
62727: LIST
62728: PPUSH
62729: CALL_OW 72
62733: ST_TO_ADDR
// if not tmp then
62734: LD_VAR 0 5
62738: NOT
62739: IFFALSE 62743
// exit ;
62741: GO 62788
// for i in tmp do
62743: LD_ADDR_VAR 0 3
62747: PUSH
62748: LD_VAR 0 5
62752: PUSH
62753: FOR_IN
62754: IFFALSE 62786
// begin result := EnemyInRange ( i , 22 ) ;
62756: LD_ADDR_VAR 0 2
62760: PUSH
62761: LD_VAR 0 3
62765: PPUSH
62766: LD_INT 22
62768: PPUSH
62769: CALL 60474 0 2
62773: ST_TO_ADDR
// if result then
62774: LD_VAR 0 2
62778: IFFALSE 62784
// exit ;
62780: POP
62781: POP
62782: GO 62788
// end ;
62784: GO 62753
62786: POP
62787: POP
// end ;
62788: LD_VAR 0 2
62792: RET
// export function FilterByTag ( units , tag ) ; begin
62793: LD_INT 0
62795: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
62796: LD_ADDR_VAR 0 3
62800: PUSH
62801: LD_VAR 0 1
62805: PPUSH
62806: LD_INT 120
62808: PUSH
62809: LD_VAR 0 2
62813: PUSH
62814: EMPTY
62815: LIST
62816: LIST
62817: PPUSH
62818: CALL_OW 72
62822: ST_TO_ADDR
// end ;
62823: LD_VAR 0 3
62827: RET
// export function IsDriver ( un ) ; begin
62828: LD_INT 0
62830: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
62831: LD_ADDR_VAR 0 2
62835: PUSH
62836: LD_VAR 0 1
62840: PUSH
62841: LD_INT 55
62843: PUSH
62844: EMPTY
62845: LIST
62846: PPUSH
62847: CALL_OW 69
62851: IN
62852: ST_TO_ADDR
// end ;
62853: LD_VAR 0 2
62857: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
62858: LD_INT 0
62860: PPUSH
62861: PPUSH
// list := [ ] ;
62862: LD_ADDR_VAR 0 5
62866: PUSH
62867: EMPTY
62868: ST_TO_ADDR
// case d of 0 :
62869: LD_VAR 0 3
62873: PUSH
62874: LD_INT 0
62876: DOUBLE
62877: EQUAL
62878: IFTRUE 62882
62880: GO 63015
62882: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
62883: LD_ADDR_VAR 0 5
62887: PUSH
62888: LD_VAR 0 1
62892: PUSH
62893: LD_INT 4
62895: MINUS
62896: PUSH
62897: LD_VAR 0 2
62901: PUSH
62902: LD_INT 4
62904: MINUS
62905: PUSH
62906: LD_INT 2
62908: PUSH
62909: EMPTY
62910: LIST
62911: LIST
62912: LIST
62913: PUSH
62914: LD_VAR 0 1
62918: PUSH
62919: LD_INT 3
62921: MINUS
62922: PUSH
62923: LD_VAR 0 2
62927: PUSH
62928: LD_INT 1
62930: PUSH
62931: EMPTY
62932: LIST
62933: LIST
62934: LIST
62935: PUSH
62936: LD_VAR 0 1
62940: PUSH
62941: LD_INT 4
62943: PLUS
62944: PUSH
62945: LD_VAR 0 2
62949: PUSH
62950: LD_INT 4
62952: PUSH
62953: EMPTY
62954: LIST
62955: LIST
62956: LIST
62957: PUSH
62958: LD_VAR 0 1
62962: PUSH
62963: LD_INT 3
62965: PLUS
62966: PUSH
62967: LD_VAR 0 2
62971: PUSH
62972: LD_INT 3
62974: PLUS
62975: PUSH
62976: LD_INT 5
62978: PUSH
62979: EMPTY
62980: LIST
62981: LIST
62982: LIST
62983: PUSH
62984: LD_VAR 0 1
62988: PUSH
62989: LD_VAR 0 2
62993: PUSH
62994: LD_INT 4
62996: PLUS
62997: PUSH
62998: LD_INT 0
63000: PUSH
63001: EMPTY
63002: LIST
63003: LIST
63004: LIST
63005: PUSH
63006: EMPTY
63007: LIST
63008: LIST
63009: LIST
63010: LIST
63011: LIST
63012: ST_TO_ADDR
// end ; 1 :
63013: GO 63713
63015: LD_INT 1
63017: DOUBLE
63018: EQUAL
63019: IFTRUE 63023
63021: GO 63156
63023: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
63024: LD_ADDR_VAR 0 5
63028: PUSH
63029: LD_VAR 0 1
63033: PUSH
63034: LD_VAR 0 2
63038: PUSH
63039: LD_INT 4
63041: MINUS
63042: PUSH
63043: LD_INT 3
63045: PUSH
63046: EMPTY
63047: LIST
63048: LIST
63049: LIST
63050: PUSH
63051: LD_VAR 0 1
63055: PUSH
63056: LD_INT 3
63058: MINUS
63059: PUSH
63060: LD_VAR 0 2
63064: PUSH
63065: LD_INT 3
63067: MINUS
63068: PUSH
63069: LD_INT 2
63071: PUSH
63072: EMPTY
63073: LIST
63074: LIST
63075: LIST
63076: PUSH
63077: LD_VAR 0 1
63081: PUSH
63082: LD_INT 4
63084: MINUS
63085: PUSH
63086: LD_VAR 0 2
63090: PUSH
63091: LD_INT 1
63093: PUSH
63094: EMPTY
63095: LIST
63096: LIST
63097: LIST
63098: PUSH
63099: LD_VAR 0 1
63103: PUSH
63104: LD_VAR 0 2
63108: PUSH
63109: LD_INT 3
63111: PLUS
63112: PUSH
63113: LD_INT 0
63115: PUSH
63116: EMPTY
63117: LIST
63118: LIST
63119: LIST
63120: PUSH
63121: LD_VAR 0 1
63125: PUSH
63126: LD_INT 4
63128: PLUS
63129: PUSH
63130: LD_VAR 0 2
63134: PUSH
63135: LD_INT 4
63137: PLUS
63138: PUSH
63139: LD_INT 5
63141: PUSH
63142: EMPTY
63143: LIST
63144: LIST
63145: LIST
63146: PUSH
63147: EMPTY
63148: LIST
63149: LIST
63150: LIST
63151: LIST
63152: LIST
63153: ST_TO_ADDR
// end ; 2 :
63154: GO 63713
63156: LD_INT 2
63158: DOUBLE
63159: EQUAL
63160: IFTRUE 63164
63162: GO 63293
63164: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
63165: LD_ADDR_VAR 0 5
63169: PUSH
63170: LD_VAR 0 1
63174: PUSH
63175: LD_VAR 0 2
63179: PUSH
63180: LD_INT 3
63182: MINUS
63183: PUSH
63184: LD_INT 3
63186: PUSH
63187: EMPTY
63188: LIST
63189: LIST
63190: LIST
63191: PUSH
63192: LD_VAR 0 1
63196: PUSH
63197: LD_INT 4
63199: PLUS
63200: PUSH
63201: LD_VAR 0 2
63205: PUSH
63206: LD_INT 4
63208: PUSH
63209: EMPTY
63210: LIST
63211: LIST
63212: LIST
63213: PUSH
63214: LD_VAR 0 1
63218: PUSH
63219: LD_VAR 0 2
63223: PUSH
63224: LD_INT 4
63226: PLUS
63227: PUSH
63228: LD_INT 0
63230: PUSH
63231: EMPTY
63232: LIST
63233: LIST
63234: LIST
63235: PUSH
63236: LD_VAR 0 1
63240: PUSH
63241: LD_INT 3
63243: MINUS
63244: PUSH
63245: LD_VAR 0 2
63249: PUSH
63250: LD_INT 1
63252: PUSH
63253: EMPTY
63254: LIST
63255: LIST
63256: LIST
63257: PUSH
63258: LD_VAR 0 1
63262: PUSH
63263: LD_INT 4
63265: MINUS
63266: PUSH
63267: LD_VAR 0 2
63271: PUSH
63272: LD_INT 4
63274: MINUS
63275: PUSH
63276: LD_INT 2
63278: PUSH
63279: EMPTY
63280: LIST
63281: LIST
63282: LIST
63283: PUSH
63284: EMPTY
63285: LIST
63286: LIST
63287: LIST
63288: LIST
63289: LIST
63290: ST_TO_ADDR
// end ; 3 :
63291: GO 63713
63293: LD_INT 3
63295: DOUBLE
63296: EQUAL
63297: IFTRUE 63301
63299: GO 63434
63301: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
63302: LD_ADDR_VAR 0 5
63306: PUSH
63307: LD_VAR 0 1
63311: PUSH
63312: LD_INT 3
63314: PLUS
63315: PUSH
63316: LD_VAR 0 2
63320: PUSH
63321: LD_INT 4
63323: PUSH
63324: EMPTY
63325: LIST
63326: LIST
63327: LIST
63328: PUSH
63329: LD_VAR 0 1
63333: PUSH
63334: LD_INT 4
63336: PLUS
63337: PUSH
63338: LD_VAR 0 2
63342: PUSH
63343: LD_INT 4
63345: PLUS
63346: PUSH
63347: LD_INT 5
63349: PUSH
63350: EMPTY
63351: LIST
63352: LIST
63353: LIST
63354: PUSH
63355: LD_VAR 0 1
63359: PUSH
63360: LD_INT 4
63362: MINUS
63363: PUSH
63364: LD_VAR 0 2
63368: PUSH
63369: LD_INT 1
63371: PUSH
63372: EMPTY
63373: LIST
63374: LIST
63375: LIST
63376: PUSH
63377: LD_VAR 0 1
63381: PUSH
63382: LD_VAR 0 2
63386: PUSH
63387: LD_INT 4
63389: MINUS
63390: PUSH
63391: LD_INT 3
63393: PUSH
63394: EMPTY
63395: LIST
63396: LIST
63397: LIST
63398: PUSH
63399: LD_VAR 0 1
63403: PUSH
63404: LD_INT 3
63406: MINUS
63407: PUSH
63408: LD_VAR 0 2
63412: PUSH
63413: LD_INT 3
63415: MINUS
63416: PUSH
63417: LD_INT 2
63419: PUSH
63420: EMPTY
63421: LIST
63422: LIST
63423: LIST
63424: PUSH
63425: EMPTY
63426: LIST
63427: LIST
63428: LIST
63429: LIST
63430: LIST
63431: ST_TO_ADDR
// end ; 4 :
63432: GO 63713
63434: LD_INT 4
63436: DOUBLE
63437: EQUAL
63438: IFTRUE 63442
63440: GO 63575
63442: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
63443: LD_ADDR_VAR 0 5
63447: PUSH
63448: LD_VAR 0 1
63452: PUSH
63453: LD_VAR 0 2
63457: PUSH
63458: LD_INT 4
63460: PLUS
63461: PUSH
63462: LD_INT 0
63464: PUSH
63465: EMPTY
63466: LIST
63467: LIST
63468: LIST
63469: PUSH
63470: LD_VAR 0 1
63474: PUSH
63475: LD_INT 3
63477: PLUS
63478: PUSH
63479: LD_VAR 0 2
63483: PUSH
63484: LD_INT 3
63486: PLUS
63487: PUSH
63488: LD_INT 5
63490: PUSH
63491: EMPTY
63492: LIST
63493: LIST
63494: LIST
63495: PUSH
63496: LD_VAR 0 1
63500: PUSH
63501: LD_INT 4
63503: PLUS
63504: PUSH
63505: LD_VAR 0 2
63509: PUSH
63510: LD_INT 4
63512: PUSH
63513: EMPTY
63514: LIST
63515: LIST
63516: LIST
63517: PUSH
63518: LD_VAR 0 1
63522: PUSH
63523: LD_VAR 0 2
63527: PUSH
63528: LD_INT 3
63530: MINUS
63531: PUSH
63532: LD_INT 3
63534: PUSH
63535: EMPTY
63536: LIST
63537: LIST
63538: LIST
63539: PUSH
63540: LD_VAR 0 1
63544: PUSH
63545: LD_INT 4
63547: MINUS
63548: PUSH
63549: LD_VAR 0 2
63553: PUSH
63554: LD_INT 4
63556: MINUS
63557: PUSH
63558: LD_INT 2
63560: PUSH
63561: EMPTY
63562: LIST
63563: LIST
63564: LIST
63565: PUSH
63566: EMPTY
63567: LIST
63568: LIST
63569: LIST
63570: LIST
63571: LIST
63572: ST_TO_ADDR
// end ; 5 :
63573: GO 63713
63575: LD_INT 5
63577: DOUBLE
63578: EQUAL
63579: IFTRUE 63583
63581: GO 63712
63583: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
63584: LD_ADDR_VAR 0 5
63588: PUSH
63589: LD_VAR 0 1
63593: PUSH
63594: LD_INT 4
63596: MINUS
63597: PUSH
63598: LD_VAR 0 2
63602: PUSH
63603: LD_INT 1
63605: PUSH
63606: EMPTY
63607: LIST
63608: LIST
63609: LIST
63610: PUSH
63611: LD_VAR 0 1
63615: PUSH
63616: LD_VAR 0 2
63620: PUSH
63621: LD_INT 4
63623: MINUS
63624: PUSH
63625: LD_INT 3
63627: PUSH
63628: EMPTY
63629: LIST
63630: LIST
63631: LIST
63632: PUSH
63633: LD_VAR 0 1
63637: PUSH
63638: LD_INT 4
63640: PLUS
63641: PUSH
63642: LD_VAR 0 2
63646: PUSH
63647: LD_INT 4
63649: PLUS
63650: PUSH
63651: LD_INT 5
63653: PUSH
63654: EMPTY
63655: LIST
63656: LIST
63657: LIST
63658: PUSH
63659: LD_VAR 0 1
63663: PUSH
63664: LD_INT 3
63666: PLUS
63667: PUSH
63668: LD_VAR 0 2
63672: PUSH
63673: LD_INT 4
63675: PUSH
63676: EMPTY
63677: LIST
63678: LIST
63679: LIST
63680: PUSH
63681: LD_VAR 0 1
63685: PUSH
63686: LD_VAR 0 2
63690: PUSH
63691: LD_INT 3
63693: PLUS
63694: PUSH
63695: LD_INT 0
63697: PUSH
63698: EMPTY
63699: LIST
63700: LIST
63701: LIST
63702: PUSH
63703: EMPTY
63704: LIST
63705: LIST
63706: LIST
63707: LIST
63708: LIST
63709: ST_TO_ADDR
// end ; end ;
63710: GO 63713
63712: POP
// result := list ;
63713: LD_ADDR_VAR 0 4
63717: PUSH
63718: LD_VAR 0 5
63722: ST_TO_ADDR
// end ;
63723: LD_VAR 0 4
63727: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
63728: LD_INT 0
63730: PPUSH
63731: PPUSH
63732: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
63733: LD_VAR 0 1
63737: NOT
63738: PUSH
63739: LD_VAR 0 2
63743: PUSH
63744: LD_INT 1
63746: PUSH
63747: LD_INT 2
63749: PUSH
63750: LD_INT 3
63752: PUSH
63753: LD_INT 4
63755: PUSH
63756: EMPTY
63757: LIST
63758: LIST
63759: LIST
63760: LIST
63761: IN
63762: NOT
63763: OR
63764: IFFALSE 63768
// exit ;
63766: GO 63860
// tmp := [ ] ;
63768: LD_ADDR_VAR 0 5
63772: PUSH
63773: EMPTY
63774: ST_TO_ADDR
// for i in units do
63775: LD_ADDR_VAR 0 4
63779: PUSH
63780: LD_VAR 0 1
63784: PUSH
63785: FOR_IN
63786: IFFALSE 63829
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
63788: LD_ADDR_VAR 0 5
63792: PUSH
63793: LD_VAR 0 5
63797: PPUSH
63798: LD_VAR 0 5
63802: PUSH
63803: LD_INT 1
63805: PLUS
63806: PPUSH
63807: LD_VAR 0 4
63811: PPUSH
63812: LD_VAR 0 2
63816: PPUSH
63817: CALL_OW 259
63821: PPUSH
63822: CALL_OW 2
63826: ST_TO_ADDR
63827: GO 63785
63829: POP
63830: POP
// if not tmp then
63831: LD_VAR 0 5
63835: NOT
63836: IFFALSE 63840
// exit ;
63838: GO 63860
// result := SortListByListDesc ( units , tmp ) ;
63840: LD_ADDR_VAR 0 3
63844: PUSH
63845: LD_VAR 0 1
63849: PPUSH
63850: LD_VAR 0 5
63854: PPUSH
63855: CALL_OW 77
63859: ST_TO_ADDR
// end ;
63860: LD_VAR 0 3
63864: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
63865: LD_INT 0
63867: PPUSH
63868: PPUSH
63869: PPUSH
// result := false ;
63870: LD_ADDR_VAR 0 3
63874: PUSH
63875: LD_INT 0
63877: ST_TO_ADDR
// x := GetX ( building ) ;
63878: LD_ADDR_VAR 0 4
63882: PUSH
63883: LD_VAR 0 2
63887: PPUSH
63888: CALL_OW 250
63892: ST_TO_ADDR
// y := GetY ( building ) ;
63893: LD_ADDR_VAR 0 5
63897: PUSH
63898: LD_VAR 0 2
63902: PPUSH
63903: CALL_OW 251
63907: ST_TO_ADDR
// if not building or not x or not y then
63908: LD_VAR 0 2
63912: NOT
63913: PUSH
63914: LD_VAR 0 4
63918: NOT
63919: OR
63920: PUSH
63921: LD_VAR 0 5
63925: NOT
63926: OR
63927: IFFALSE 63931
// exit ;
63929: GO 64023
// if GetTaskList ( unit ) then
63931: LD_VAR 0 1
63935: PPUSH
63936: CALL_OW 437
63940: IFFALSE 64023
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
63942: LD_STRING e
63944: PUSH
63945: LD_VAR 0 1
63949: PPUSH
63950: CALL_OW 437
63954: PUSH
63955: LD_INT 1
63957: ARRAY
63958: PUSH
63959: LD_INT 1
63961: ARRAY
63962: EQUAL
63963: PUSH
63964: LD_VAR 0 4
63968: PUSH
63969: LD_VAR 0 1
63973: PPUSH
63974: CALL_OW 437
63978: PUSH
63979: LD_INT 1
63981: ARRAY
63982: PUSH
63983: LD_INT 2
63985: ARRAY
63986: EQUAL
63987: AND
63988: PUSH
63989: LD_VAR 0 5
63993: PUSH
63994: LD_VAR 0 1
63998: PPUSH
63999: CALL_OW 437
64003: PUSH
64004: LD_INT 1
64006: ARRAY
64007: PUSH
64008: LD_INT 3
64010: ARRAY
64011: EQUAL
64012: AND
64013: IFFALSE 64023
// result := true end ;
64015: LD_ADDR_VAR 0 3
64019: PUSH
64020: LD_INT 1
64022: ST_TO_ADDR
// end ;
64023: LD_VAR 0 3
64027: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
64028: LD_INT 0
64030: PPUSH
// result := false ;
64031: LD_ADDR_VAR 0 4
64035: PUSH
64036: LD_INT 0
64038: ST_TO_ADDR
// if GetTaskList ( unit ) then
64039: LD_VAR 0 1
64043: PPUSH
64044: CALL_OW 437
64048: IFFALSE 64131
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
64050: LD_STRING M
64052: PUSH
64053: LD_VAR 0 1
64057: PPUSH
64058: CALL_OW 437
64062: PUSH
64063: LD_INT 1
64065: ARRAY
64066: PUSH
64067: LD_INT 1
64069: ARRAY
64070: EQUAL
64071: PUSH
64072: LD_VAR 0 2
64076: PUSH
64077: LD_VAR 0 1
64081: PPUSH
64082: CALL_OW 437
64086: PUSH
64087: LD_INT 1
64089: ARRAY
64090: PUSH
64091: LD_INT 2
64093: ARRAY
64094: EQUAL
64095: AND
64096: PUSH
64097: LD_VAR 0 3
64101: PUSH
64102: LD_VAR 0 1
64106: PPUSH
64107: CALL_OW 437
64111: PUSH
64112: LD_INT 1
64114: ARRAY
64115: PUSH
64116: LD_INT 3
64118: ARRAY
64119: EQUAL
64120: AND
64121: IFFALSE 64131
// result := true ;
64123: LD_ADDR_VAR 0 4
64127: PUSH
64128: LD_INT 1
64130: ST_TO_ADDR
// end ; end ;
64131: LD_VAR 0 4
64135: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
64136: LD_INT 0
64138: PPUSH
64139: PPUSH
64140: PPUSH
64141: PPUSH
// if not unit or not area then
64142: LD_VAR 0 1
64146: NOT
64147: PUSH
64148: LD_VAR 0 2
64152: NOT
64153: OR
64154: IFFALSE 64158
// exit ;
64156: GO 64322
// tmp := AreaToList ( area , i ) ;
64158: LD_ADDR_VAR 0 6
64162: PUSH
64163: LD_VAR 0 2
64167: PPUSH
64168: LD_VAR 0 5
64172: PPUSH
64173: CALL_OW 517
64177: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
64178: LD_ADDR_VAR 0 5
64182: PUSH
64183: DOUBLE
64184: LD_INT 1
64186: DEC
64187: ST_TO_ADDR
64188: LD_VAR 0 6
64192: PUSH
64193: LD_INT 1
64195: ARRAY
64196: PUSH
64197: FOR_TO
64198: IFFALSE 64320
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
64200: LD_ADDR_VAR 0 7
64204: PUSH
64205: LD_VAR 0 6
64209: PUSH
64210: LD_INT 1
64212: ARRAY
64213: PUSH
64214: LD_VAR 0 5
64218: ARRAY
64219: PUSH
64220: LD_VAR 0 6
64224: PUSH
64225: LD_INT 2
64227: ARRAY
64228: PUSH
64229: LD_VAR 0 5
64233: ARRAY
64234: PUSH
64235: EMPTY
64236: LIST
64237: LIST
64238: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
64239: LD_VAR 0 7
64243: PUSH
64244: LD_INT 1
64246: ARRAY
64247: PPUSH
64248: LD_VAR 0 7
64252: PUSH
64253: LD_INT 2
64255: ARRAY
64256: PPUSH
64257: CALL_OW 428
64261: PUSH
64262: LD_INT 0
64264: EQUAL
64265: IFFALSE 64318
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
64267: LD_VAR 0 1
64271: PPUSH
64272: LD_VAR 0 7
64276: PUSH
64277: LD_INT 1
64279: ARRAY
64280: PPUSH
64281: LD_VAR 0 7
64285: PUSH
64286: LD_INT 2
64288: ARRAY
64289: PPUSH
64290: LD_VAR 0 3
64294: PPUSH
64295: CALL_OW 48
// result := IsPlaced ( unit ) ;
64299: LD_ADDR_VAR 0 4
64303: PUSH
64304: LD_VAR 0 1
64308: PPUSH
64309: CALL_OW 305
64313: ST_TO_ADDR
// exit ;
64314: POP
64315: POP
64316: GO 64322
// end ; end ;
64318: GO 64197
64320: POP
64321: POP
// end ;
64322: LD_VAR 0 4
64326: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
64327: LD_INT 0
64329: PPUSH
64330: PPUSH
64331: PPUSH
// if not side or side > 8 then
64332: LD_VAR 0 1
64336: NOT
64337: PUSH
64338: LD_VAR 0 1
64342: PUSH
64343: LD_INT 8
64345: GREATER
64346: OR
64347: IFFALSE 64351
// exit ;
64349: GO 64538
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
64351: LD_ADDR_VAR 0 4
64355: PUSH
64356: LD_INT 22
64358: PUSH
64359: LD_VAR 0 1
64363: PUSH
64364: EMPTY
64365: LIST
64366: LIST
64367: PUSH
64368: LD_INT 21
64370: PUSH
64371: LD_INT 3
64373: PUSH
64374: EMPTY
64375: LIST
64376: LIST
64377: PUSH
64378: EMPTY
64379: LIST
64380: LIST
64381: PPUSH
64382: CALL_OW 69
64386: ST_TO_ADDR
// if not tmp then
64387: LD_VAR 0 4
64391: NOT
64392: IFFALSE 64396
// exit ;
64394: GO 64538
// enable_addtolog := true ;
64396: LD_ADDR_OWVAR 81
64400: PUSH
64401: LD_INT 1
64403: ST_TO_ADDR
// AddToLog ( [ ) ;
64404: LD_STRING [
64406: PPUSH
64407: CALL_OW 561
// for i in tmp do
64411: LD_ADDR_VAR 0 3
64415: PUSH
64416: LD_VAR 0 4
64420: PUSH
64421: FOR_IN
64422: IFFALSE 64529
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
64424: LD_STRING [
64426: PUSH
64427: LD_VAR 0 3
64431: PPUSH
64432: CALL_OW 266
64436: STR
64437: PUSH
64438: LD_STRING , 
64440: STR
64441: PUSH
64442: LD_VAR 0 3
64446: PPUSH
64447: CALL_OW 250
64451: STR
64452: PUSH
64453: LD_STRING , 
64455: STR
64456: PUSH
64457: LD_VAR 0 3
64461: PPUSH
64462: CALL_OW 251
64466: STR
64467: PUSH
64468: LD_STRING , 
64470: STR
64471: PUSH
64472: LD_VAR 0 3
64476: PPUSH
64477: CALL_OW 254
64481: STR
64482: PUSH
64483: LD_STRING , 
64485: STR
64486: PUSH
64487: LD_VAR 0 3
64491: PPUSH
64492: LD_INT 1
64494: PPUSH
64495: CALL_OW 268
64499: STR
64500: PUSH
64501: LD_STRING , 
64503: STR
64504: PUSH
64505: LD_VAR 0 3
64509: PPUSH
64510: LD_INT 2
64512: PPUSH
64513: CALL_OW 268
64517: STR
64518: PUSH
64519: LD_STRING ],
64521: STR
64522: PPUSH
64523: CALL_OW 561
// end ;
64527: GO 64421
64529: POP
64530: POP
// AddToLog ( ]; ) ;
64531: LD_STRING ];
64533: PPUSH
64534: CALL_OW 561
// end ;
64538: LD_VAR 0 2
64542: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
64543: LD_INT 0
64545: PPUSH
64546: PPUSH
64547: PPUSH
64548: PPUSH
64549: PPUSH
// if not area or not rate or not max then
64550: LD_VAR 0 1
64554: NOT
64555: PUSH
64556: LD_VAR 0 2
64560: NOT
64561: OR
64562: PUSH
64563: LD_VAR 0 4
64567: NOT
64568: OR
64569: IFFALSE 64573
// exit ;
64571: GO 64762
// while 1 do
64573: LD_INT 1
64575: IFFALSE 64762
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
64577: LD_ADDR_VAR 0 9
64581: PUSH
64582: LD_VAR 0 1
64586: PPUSH
64587: LD_INT 1
64589: PPUSH
64590: CALL_OW 287
64594: PUSH
64595: LD_INT 10
64597: MUL
64598: ST_TO_ADDR
// r := rate / 10 ;
64599: LD_ADDR_VAR 0 7
64603: PUSH
64604: LD_VAR 0 2
64608: PUSH
64609: LD_INT 10
64611: DIVREAL
64612: ST_TO_ADDR
// time := 1 1$00 ;
64613: LD_ADDR_VAR 0 8
64617: PUSH
64618: LD_INT 2100
64620: ST_TO_ADDR
// if amount < min then
64621: LD_VAR 0 9
64625: PUSH
64626: LD_VAR 0 3
64630: LESS
64631: IFFALSE 64649
// r := r * 2 else
64633: LD_ADDR_VAR 0 7
64637: PUSH
64638: LD_VAR 0 7
64642: PUSH
64643: LD_INT 2
64645: MUL
64646: ST_TO_ADDR
64647: GO 64675
// if amount > max then
64649: LD_VAR 0 9
64653: PUSH
64654: LD_VAR 0 4
64658: GREATER
64659: IFFALSE 64675
// r := r / 2 ;
64661: LD_ADDR_VAR 0 7
64665: PUSH
64666: LD_VAR 0 7
64670: PUSH
64671: LD_INT 2
64673: DIVREAL
64674: ST_TO_ADDR
// time := time / r ;
64675: LD_ADDR_VAR 0 8
64679: PUSH
64680: LD_VAR 0 8
64684: PUSH
64685: LD_VAR 0 7
64689: DIVREAL
64690: ST_TO_ADDR
// if time < 0 then
64691: LD_VAR 0 8
64695: PUSH
64696: LD_INT 0
64698: LESS
64699: IFFALSE 64716
// time := time * - 1 ;
64701: LD_ADDR_VAR 0 8
64705: PUSH
64706: LD_VAR 0 8
64710: PUSH
64711: LD_INT 1
64713: NEG
64714: MUL
64715: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
64716: LD_VAR 0 8
64720: PUSH
64721: LD_INT 35
64723: PPUSH
64724: LD_INT 875
64726: PPUSH
64727: CALL_OW 12
64731: PLUS
64732: PPUSH
64733: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
64737: LD_INT 1
64739: PPUSH
64740: LD_INT 5
64742: PPUSH
64743: CALL_OW 12
64747: PPUSH
64748: LD_VAR 0 1
64752: PPUSH
64753: LD_INT 1
64755: PPUSH
64756: CALL_OW 55
// end ;
64760: GO 64573
// end ;
64762: LD_VAR 0 5
64766: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
64767: LD_INT 0
64769: PPUSH
64770: PPUSH
64771: PPUSH
64772: PPUSH
64773: PPUSH
64774: PPUSH
64775: PPUSH
64776: PPUSH
// if not turrets or not factories then
64777: LD_VAR 0 1
64781: NOT
64782: PUSH
64783: LD_VAR 0 2
64787: NOT
64788: OR
64789: IFFALSE 64793
// exit ;
64791: GO 65100
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
64793: LD_ADDR_VAR 0 10
64797: PUSH
64798: LD_INT 5
64800: PUSH
64801: LD_INT 6
64803: PUSH
64804: EMPTY
64805: LIST
64806: LIST
64807: PUSH
64808: LD_INT 2
64810: PUSH
64811: LD_INT 4
64813: PUSH
64814: EMPTY
64815: LIST
64816: LIST
64817: PUSH
64818: LD_INT 3
64820: PUSH
64821: LD_INT 5
64823: PUSH
64824: EMPTY
64825: LIST
64826: LIST
64827: PUSH
64828: EMPTY
64829: LIST
64830: LIST
64831: LIST
64832: PUSH
64833: LD_INT 24
64835: PUSH
64836: LD_INT 25
64838: PUSH
64839: EMPTY
64840: LIST
64841: LIST
64842: PUSH
64843: LD_INT 23
64845: PUSH
64846: LD_INT 27
64848: PUSH
64849: EMPTY
64850: LIST
64851: LIST
64852: PUSH
64853: EMPTY
64854: LIST
64855: LIST
64856: PUSH
64857: LD_INT 42
64859: PUSH
64860: LD_INT 43
64862: PUSH
64863: EMPTY
64864: LIST
64865: LIST
64866: PUSH
64867: LD_INT 44
64869: PUSH
64870: LD_INT 46
64872: PUSH
64873: EMPTY
64874: LIST
64875: LIST
64876: PUSH
64877: LD_INT 45
64879: PUSH
64880: LD_INT 47
64882: PUSH
64883: EMPTY
64884: LIST
64885: LIST
64886: PUSH
64887: EMPTY
64888: LIST
64889: LIST
64890: LIST
64891: PUSH
64892: EMPTY
64893: LIST
64894: LIST
64895: LIST
64896: ST_TO_ADDR
// result := [ ] ;
64897: LD_ADDR_VAR 0 3
64901: PUSH
64902: EMPTY
64903: ST_TO_ADDR
// for i in turrets do
64904: LD_ADDR_VAR 0 4
64908: PUSH
64909: LD_VAR 0 1
64913: PUSH
64914: FOR_IN
64915: IFFALSE 65098
// begin nat := GetNation ( i ) ;
64917: LD_ADDR_VAR 0 7
64921: PUSH
64922: LD_VAR 0 4
64926: PPUSH
64927: CALL_OW 248
64931: ST_TO_ADDR
// weapon := 0 ;
64932: LD_ADDR_VAR 0 8
64936: PUSH
64937: LD_INT 0
64939: ST_TO_ADDR
// if not nat then
64940: LD_VAR 0 7
64944: NOT
64945: IFFALSE 64949
// continue ;
64947: GO 64914
// for j in list [ nat ] do
64949: LD_ADDR_VAR 0 5
64953: PUSH
64954: LD_VAR 0 10
64958: PUSH
64959: LD_VAR 0 7
64963: ARRAY
64964: PUSH
64965: FOR_IN
64966: IFFALSE 65007
// if GetBWeapon ( i ) = j [ 1 ] then
64968: LD_VAR 0 4
64972: PPUSH
64973: CALL_OW 269
64977: PUSH
64978: LD_VAR 0 5
64982: PUSH
64983: LD_INT 1
64985: ARRAY
64986: EQUAL
64987: IFFALSE 65005
// begin weapon := j [ 2 ] ;
64989: LD_ADDR_VAR 0 8
64993: PUSH
64994: LD_VAR 0 5
64998: PUSH
64999: LD_INT 2
65001: ARRAY
65002: ST_TO_ADDR
// break ;
65003: GO 65007
// end ;
65005: GO 64965
65007: POP
65008: POP
// if not weapon then
65009: LD_VAR 0 8
65013: NOT
65014: IFFALSE 65018
// continue ;
65016: GO 64914
// for k in factories do
65018: LD_ADDR_VAR 0 6
65022: PUSH
65023: LD_VAR 0 2
65027: PUSH
65028: FOR_IN
65029: IFFALSE 65094
// begin weapons := AvailableWeaponList ( k ) ;
65031: LD_ADDR_VAR 0 9
65035: PUSH
65036: LD_VAR 0 6
65040: PPUSH
65041: CALL_OW 478
65045: ST_TO_ADDR
// if not weapons then
65046: LD_VAR 0 9
65050: NOT
65051: IFFALSE 65055
// continue ;
65053: GO 65028
// if weapon in weapons then
65055: LD_VAR 0 8
65059: PUSH
65060: LD_VAR 0 9
65064: IN
65065: IFFALSE 65092
// begin result := [ i , weapon ] ;
65067: LD_ADDR_VAR 0 3
65071: PUSH
65072: LD_VAR 0 4
65076: PUSH
65077: LD_VAR 0 8
65081: PUSH
65082: EMPTY
65083: LIST
65084: LIST
65085: ST_TO_ADDR
// exit ;
65086: POP
65087: POP
65088: POP
65089: POP
65090: GO 65100
// end ; end ;
65092: GO 65028
65094: POP
65095: POP
// end ;
65096: GO 64914
65098: POP
65099: POP
// end ;
65100: LD_VAR 0 3
65104: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
65105: LD_INT 0
65107: PPUSH
// if not side or side > 8 then
65108: LD_VAR 0 3
65112: NOT
65113: PUSH
65114: LD_VAR 0 3
65118: PUSH
65119: LD_INT 8
65121: GREATER
65122: OR
65123: IFFALSE 65127
// exit ;
65125: GO 65186
// if not range then
65127: LD_VAR 0 4
65131: NOT
65132: IFFALSE 65143
// range := - 12 ;
65134: LD_ADDR_VAR 0 4
65138: PUSH
65139: LD_INT 12
65141: NEG
65142: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
65143: LD_VAR 0 1
65147: PPUSH
65148: LD_VAR 0 2
65152: PPUSH
65153: LD_VAR 0 3
65157: PPUSH
65158: LD_VAR 0 4
65162: PPUSH
65163: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
65167: LD_VAR 0 1
65171: PPUSH
65172: LD_VAR 0 2
65176: PPUSH
65177: LD_VAR 0 3
65181: PPUSH
65182: CALL_OW 331
// end ;
65186: LD_VAR 0 5
65190: RET
// export function Video ( mode ) ; begin
65191: LD_INT 0
65193: PPUSH
// ingame_video = mode ;
65194: LD_ADDR_OWVAR 52
65198: PUSH
65199: LD_VAR 0 1
65203: ST_TO_ADDR
// interface_hidden = mode ;
65204: LD_ADDR_OWVAR 54
65208: PUSH
65209: LD_VAR 0 1
65213: ST_TO_ADDR
// end ;
65214: LD_VAR 0 2
65218: RET
// export function Join ( array , element ) ; begin
65219: LD_INT 0
65221: PPUSH
// result := Replace ( array , array + 1 , element ) ;
65222: LD_ADDR_VAR 0 3
65226: PUSH
65227: LD_VAR 0 1
65231: PPUSH
65232: LD_VAR 0 1
65236: PUSH
65237: LD_INT 1
65239: PLUS
65240: PPUSH
65241: LD_VAR 0 2
65245: PPUSH
65246: CALL_OW 1
65250: ST_TO_ADDR
// end ;
65251: LD_VAR 0 3
65255: RET
// export function JoinUnion ( array , element ) ; begin
65256: LD_INT 0
65258: PPUSH
// result := array union element ;
65259: LD_ADDR_VAR 0 3
65263: PUSH
65264: LD_VAR 0 1
65268: PUSH
65269: LD_VAR 0 2
65273: UNION
65274: ST_TO_ADDR
// end ;
65275: LD_VAR 0 3
65279: RET
// export function GetBehemoths ( side ) ; begin
65280: LD_INT 0
65282: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
65283: LD_ADDR_VAR 0 2
65287: PUSH
65288: LD_INT 22
65290: PUSH
65291: LD_VAR 0 1
65295: PUSH
65296: EMPTY
65297: LIST
65298: LIST
65299: PUSH
65300: LD_INT 31
65302: PUSH
65303: LD_INT 25
65305: PUSH
65306: EMPTY
65307: LIST
65308: LIST
65309: PUSH
65310: EMPTY
65311: LIST
65312: LIST
65313: PPUSH
65314: CALL_OW 69
65318: ST_TO_ADDR
// end ;
65319: LD_VAR 0 2
65323: RET
// export function Shuffle ( array ) ; var i , index ; begin
65324: LD_INT 0
65326: PPUSH
65327: PPUSH
65328: PPUSH
// result := [ ] ;
65329: LD_ADDR_VAR 0 2
65333: PUSH
65334: EMPTY
65335: ST_TO_ADDR
// if not array then
65336: LD_VAR 0 1
65340: NOT
65341: IFFALSE 65345
// exit ;
65343: GO 65444
// Randomize ;
65345: CALL_OW 10
// for i = array downto 1 do
65349: LD_ADDR_VAR 0 3
65353: PUSH
65354: DOUBLE
65355: LD_VAR 0 1
65359: INC
65360: ST_TO_ADDR
65361: LD_INT 1
65363: PUSH
65364: FOR_DOWNTO
65365: IFFALSE 65442
// begin index := rand ( 1 , array ) ;
65367: LD_ADDR_VAR 0 4
65371: PUSH
65372: LD_INT 1
65374: PPUSH
65375: LD_VAR 0 1
65379: PPUSH
65380: CALL_OW 12
65384: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
65385: LD_ADDR_VAR 0 2
65389: PUSH
65390: LD_VAR 0 2
65394: PPUSH
65395: LD_VAR 0 2
65399: PUSH
65400: LD_INT 1
65402: PLUS
65403: PPUSH
65404: LD_VAR 0 1
65408: PUSH
65409: LD_VAR 0 4
65413: ARRAY
65414: PPUSH
65415: CALL_OW 2
65419: ST_TO_ADDR
// array := Delete ( array , index ) ;
65420: LD_ADDR_VAR 0 1
65424: PUSH
65425: LD_VAR 0 1
65429: PPUSH
65430: LD_VAR 0 4
65434: PPUSH
65435: CALL_OW 3
65439: ST_TO_ADDR
// end ;
65440: GO 65364
65442: POP
65443: POP
// end ;
65444: LD_VAR 0 2
65448: RET
// export function GetBaseMaterials ( base ) ; begin
65449: LD_INT 0
65451: PPUSH
// result := [ 0 , 0 , 0 ] ;
65452: LD_ADDR_VAR 0 2
65456: PUSH
65457: LD_INT 0
65459: PUSH
65460: LD_INT 0
65462: PUSH
65463: LD_INT 0
65465: PUSH
65466: EMPTY
65467: LIST
65468: LIST
65469: LIST
65470: ST_TO_ADDR
// if not base then
65471: LD_VAR 0 1
65475: NOT
65476: IFFALSE 65480
// exit ;
65478: GO 65529
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
65480: LD_ADDR_VAR 0 2
65484: PUSH
65485: LD_VAR 0 1
65489: PPUSH
65490: LD_INT 1
65492: PPUSH
65493: CALL_OW 275
65497: PUSH
65498: LD_VAR 0 1
65502: PPUSH
65503: LD_INT 2
65505: PPUSH
65506: CALL_OW 275
65510: PUSH
65511: LD_VAR 0 1
65515: PPUSH
65516: LD_INT 3
65518: PPUSH
65519: CALL_OW 275
65523: PUSH
65524: EMPTY
65525: LIST
65526: LIST
65527: LIST
65528: ST_TO_ADDR
// end ;
65529: LD_VAR 0 2
65533: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
65534: LD_INT 0
65536: PPUSH
65537: PPUSH
// result := array ;
65538: LD_ADDR_VAR 0 3
65542: PUSH
65543: LD_VAR 0 1
65547: ST_TO_ADDR
// if size >= result then
65548: LD_VAR 0 2
65552: PUSH
65553: LD_VAR 0 3
65557: GREATEREQUAL
65558: IFFALSE 65562
// exit ;
65560: GO 65612
// if size then
65562: LD_VAR 0 2
65566: IFFALSE 65612
// for i := array downto size do
65568: LD_ADDR_VAR 0 4
65572: PUSH
65573: DOUBLE
65574: LD_VAR 0 1
65578: INC
65579: ST_TO_ADDR
65580: LD_VAR 0 2
65584: PUSH
65585: FOR_DOWNTO
65586: IFFALSE 65610
// result := Delete ( result , result ) ;
65588: LD_ADDR_VAR 0 3
65592: PUSH
65593: LD_VAR 0 3
65597: PPUSH
65598: LD_VAR 0 3
65602: PPUSH
65603: CALL_OW 3
65607: ST_TO_ADDR
65608: GO 65585
65610: POP
65611: POP
// end ;
65612: LD_VAR 0 3
65616: RET
// export function ComExit ( unit ) ; var tmp ; begin
65617: LD_INT 0
65619: PPUSH
65620: PPUSH
// if not IsInUnit ( unit ) then
65621: LD_VAR 0 1
65625: PPUSH
65626: CALL_OW 310
65630: NOT
65631: IFFALSE 65635
// exit ;
65633: GO 65695
// tmp := IsInUnit ( unit ) ;
65635: LD_ADDR_VAR 0 3
65639: PUSH
65640: LD_VAR 0 1
65644: PPUSH
65645: CALL_OW 310
65649: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
65650: LD_VAR 0 3
65654: PPUSH
65655: CALL_OW 247
65659: PUSH
65660: LD_INT 2
65662: EQUAL
65663: IFFALSE 65676
// ComExitVehicle ( unit ) else
65665: LD_VAR 0 1
65669: PPUSH
65670: CALL_OW 121
65674: GO 65685
// ComExitBuilding ( unit ) ;
65676: LD_VAR 0 1
65680: PPUSH
65681: CALL_OW 122
// result := tmp ;
65685: LD_ADDR_VAR 0 2
65689: PUSH
65690: LD_VAR 0 3
65694: ST_TO_ADDR
// end ;
65695: LD_VAR 0 2
65699: RET
// export function ComExitAll ( units ) ; var i ; begin
65700: LD_INT 0
65702: PPUSH
65703: PPUSH
// if not units then
65704: LD_VAR 0 1
65708: NOT
65709: IFFALSE 65713
// exit ;
65711: GO 65739
// for i in units do
65713: LD_ADDR_VAR 0 3
65717: PUSH
65718: LD_VAR 0 1
65722: PUSH
65723: FOR_IN
65724: IFFALSE 65737
// ComExit ( i ) ;
65726: LD_VAR 0 3
65730: PPUSH
65731: CALL 65617 0 1
65735: GO 65723
65737: POP
65738: POP
// end ;
65739: LD_VAR 0 2
65743: RET
// export function ResetHc ; begin
65744: LD_INT 0
65746: PPUSH
// InitHc ;
65747: CALL_OW 19
// hc_importance := 0 ;
65751: LD_ADDR_OWVAR 32
65755: PUSH
65756: LD_INT 0
65758: ST_TO_ADDR
// end ;
65759: LD_VAR 0 1
65763: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
65764: LD_INT 0
65766: PPUSH
65767: PPUSH
65768: PPUSH
// _x := ( x1 + x2 ) div 2 ;
65769: LD_ADDR_VAR 0 6
65773: PUSH
65774: LD_VAR 0 1
65778: PUSH
65779: LD_VAR 0 3
65783: PLUS
65784: PUSH
65785: LD_INT 2
65787: DIV
65788: ST_TO_ADDR
// if _x < 0 then
65789: LD_VAR 0 6
65793: PUSH
65794: LD_INT 0
65796: LESS
65797: IFFALSE 65814
// _x := _x * - 1 ;
65799: LD_ADDR_VAR 0 6
65803: PUSH
65804: LD_VAR 0 6
65808: PUSH
65809: LD_INT 1
65811: NEG
65812: MUL
65813: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
65814: LD_ADDR_VAR 0 7
65818: PUSH
65819: LD_VAR 0 2
65823: PUSH
65824: LD_VAR 0 4
65828: PLUS
65829: PUSH
65830: LD_INT 2
65832: DIV
65833: ST_TO_ADDR
// if _y < 0 then
65834: LD_VAR 0 7
65838: PUSH
65839: LD_INT 0
65841: LESS
65842: IFFALSE 65859
// _y := _y * - 1 ;
65844: LD_ADDR_VAR 0 7
65848: PUSH
65849: LD_VAR 0 7
65853: PUSH
65854: LD_INT 1
65856: NEG
65857: MUL
65858: ST_TO_ADDR
// result := [ _x , _y ] ;
65859: LD_ADDR_VAR 0 5
65863: PUSH
65864: LD_VAR 0 6
65868: PUSH
65869: LD_VAR 0 7
65873: PUSH
65874: EMPTY
65875: LIST
65876: LIST
65877: ST_TO_ADDR
// end ;
65878: LD_VAR 0 5
65882: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
65883: LD_INT 0
65885: PPUSH
65886: PPUSH
65887: PPUSH
65888: PPUSH
// task := GetTaskList ( unit ) ;
65889: LD_ADDR_VAR 0 7
65893: PUSH
65894: LD_VAR 0 1
65898: PPUSH
65899: CALL_OW 437
65903: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
65904: LD_VAR 0 7
65908: NOT
65909: PUSH
65910: LD_VAR 0 1
65914: PPUSH
65915: LD_VAR 0 2
65919: PPUSH
65920: CALL_OW 308
65924: NOT
65925: AND
65926: IFFALSE 65930
// exit ;
65928: GO 66048
// if IsInArea ( unit , area ) then
65930: LD_VAR 0 1
65934: PPUSH
65935: LD_VAR 0 2
65939: PPUSH
65940: CALL_OW 308
65944: IFFALSE 65962
// begin ComMoveToArea ( unit , goAway ) ;
65946: LD_VAR 0 1
65950: PPUSH
65951: LD_VAR 0 3
65955: PPUSH
65956: CALL_OW 113
// exit ;
65960: GO 66048
// end ; if task [ 1 ] [ 1 ] <> M then
65962: LD_VAR 0 7
65966: PUSH
65967: LD_INT 1
65969: ARRAY
65970: PUSH
65971: LD_INT 1
65973: ARRAY
65974: PUSH
65975: LD_STRING M
65977: NONEQUAL
65978: IFFALSE 65982
// exit ;
65980: GO 66048
// x := task [ 1 ] [ 2 ] ;
65982: LD_ADDR_VAR 0 5
65986: PUSH
65987: LD_VAR 0 7
65991: PUSH
65992: LD_INT 1
65994: ARRAY
65995: PUSH
65996: LD_INT 2
65998: ARRAY
65999: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
66000: LD_ADDR_VAR 0 6
66004: PUSH
66005: LD_VAR 0 7
66009: PUSH
66010: LD_INT 1
66012: ARRAY
66013: PUSH
66014: LD_INT 3
66016: ARRAY
66017: ST_TO_ADDR
// if InArea ( x , y , area ) then
66018: LD_VAR 0 5
66022: PPUSH
66023: LD_VAR 0 6
66027: PPUSH
66028: LD_VAR 0 2
66032: PPUSH
66033: CALL_OW 309
66037: IFFALSE 66048
// ComStop ( unit ) ;
66039: LD_VAR 0 1
66043: PPUSH
66044: CALL_OW 141
// end ;
66048: LD_VAR 0 4
66052: RET
// export function Abs ( value ) ; begin
66053: LD_INT 0
66055: PPUSH
// result := value ;
66056: LD_ADDR_VAR 0 2
66060: PUSH
66061: LD_VAR 0 1
66065: ST_TO_ADDR
// if value < 0 then
66066: LD_VAR 0 1
66070: PUSH
66071: LD_INT 0
66073: LESS
66074: IFFALSE 66091
// result := value * - 1 ;
66076: LD_ADDR_VAR 0 2
66080: PUSH
66081: LD_VAR 0 1
66085: PUSH
66086: LD_INT 1
66088: NEG
66089: MUL
66090: ST_TO_ADDR
// end ;
66091: LD_VAR 0 2
66095: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
66096: LD_INT 0
66098: PPUSH
66099: PPUSH
66100: PPUSH
66101: PPUSH
66102: PPUSH
66103: PPUSH
66104: PPUSH
66105: PPUSH
// if not unit or not building then
66106: LD_VAR 0 1
66110: NOT
66111: PUSH
66112: LD_VAR 0 2
66116: NOT
66117: OR
66118: IFFALSE 66122
// exit ;
66120: GO 66348
// x := GetX ( building ) ;
66122: LD_ADDR_VAR 0 4
66126: PUSH
66127: LD_VAR 0 2
66131: PPUSH
66132: CALL_OW 250
66136: ST_TO_ADDR
// y := GetY ( building ) ;
66137: LD_ADDR_VAR 0 6
66141: PUSH
66142: LD_VAR 0 2
66146: PPUSH
66147: CALL_OW 251
66151: ST_TO_ADDR
// d := GetDir ( building ) ;
66152: LD_ADDR_VAR 0 8
66156: PUSH
66157: LD_VAR 0 2
66161: PPUSH
66162: CALL_OW 254
66166: ST_TO_ADDR
// r := 4 ;
66167: LD_ADDR_VAR 0 9
66171: PUSH
66172: LD_INT 4
66174: ST_TO_ADDR
// for i := 1 to 5 do
66175: LD_ADDR_VAR 0 10
66179: PUSH
66180: DOUBLE
66181: LD_INT 1
66183: DEC
66184: ST_TO_ADDR
66185: LD_INT 5
66187: PUSH
66188: FOR_TO
66189: IFFALSE 66346
// begin _x := ShiftX ( x , d , r + i ) ;
66191: LD_ADDR_VAR 0 5
66195: PUSH
66196: LD_VAR 0 4
66200: PPUSH
66201: LD_VAR 0 8
66205: PPUSH
66206: LD_VAR 0 9
66210: PUSH
66211: LD_VAR 0 10
66215: PLUS
66216: PPUSH
66217: CALL_OW 272
66221: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
66222: LD_ADDR_VAR 0 7
66226: PUSH
66227: LD_VAR 0 6
66231: PPUSH
66232: LD_VAR 0 8
66236: PPUSH
66237: LD_VAR 0 9
66241: PUSH
66242: LD_VAR 0 10
66246: PLUS
66247: PPUSH
66248: CALL_OW 273
66252: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
66253: LD_VAR 0 5
66257: PPUSH
66258: LD_VAR 0 7
66262: PPUSH
66263: CALL_OW 488
66267: PUSH
66268: LD_VAR 0 5
66272: PPUSH
66273: LD_VAR 0 7
66277: PPUSH
66278: CALL_OW 428
66282: PPUSH
66283: CALL_OW 247
66287: PUSH
66288: LD_INT 3
66290: PUSH
66291: LD_INT 2
66293: PUSH
66294: EMPTY
66295: LIST
66296: LIST
66297: IN
66298: NOT
66299: AND
66300: IFFALSE 66344
// begin ComMoveXY ( unit , _x , _y ) ;
66302: LD_VAR 0 1
66306: PPUSH
66307: LD_VAR 0 5
66311: PPUSH
66312: LD_VAR 0 7
66316: PPUSH
66317: CALL_OW 111
// result := [ _x , _y ] ;
66321: LD_ADDR_VAR 0 3
66325: PUSH
66326: LD_VAR 0 5
66330: PUSH
66331: LD_VAR 0 7
66335: PUSH
66336: EMPTY
66337: LIST
66338: LIST
66339: ST_TO_ADDR
// exit ;
66340: POP
66341: POP
66342: GO 66348
// end ; end ;
66344: GO 66188
66346: POP
66347: POP
// end ;
66348: LD_VAR 0 3
66352: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
66353: LD_INT 0
66355: PPUSH
66356: PPUSH
66357: PPUSH
// result := 0 ;
66358: LD_ADDR_VAR 0 3
66362: PUSH
66363: LD_INT 0
66365: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
66366: LD_VAR 0 1
66370: PUSH
66371: LD_INT 0
66373: LESS
66374: PUSH
66375: LD_VAR 0 1
66379: PUSH
66380: LD_INT 8
66382: GREATER
66383: OR
66384: PUSH
66385: LD_VAR 0 2
66389: PUSH
66390: LD_INT 0
66392: LESS
66393: OR
66394: PUSH
66395: LD_VAR 0 2
66399: PUSH
66400: LD_INT 8
66402: GREATER
66403: OR
66404: IFFALSE 66408
// exit ;
66406: GO 66483
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
66408: LD_ADDR_VAR 0 4
66412: PUSH
66413: LD_INT 22
66415: PUSH
66416: LD_VAR 0 2
66420: PUSH
66421: EMPTY
66422: LIST
66423: LIST
66424: PPUSH
66425: CALL_OW 69
66429: PUSH
66430: FOR_IN
66431: IFFALSE 66481
// begin un := UnitShoot ( i ) ;
66433: LD_ADDR_VAR 0 5
66437: PUSH
66438: LD_VAR 0 4
66442: PPUSH
66443: CALL_OW 504
66447: ST_TO_ADDR
// if GetSide ( un ) = side1 then
66448: LD_VAR 0 5
66452: PPUSH
66453: CALL_OW 255
66457: PUSH
66458: LD_VAR 0 1
66462: EQUAL
66463: IFFALSE 66479
// begin result := un ;
66465: LD_ADDR_VAR 0 3
66469: PUSH
66470: LD_VAR 0 5
66474: ST_TO_ADDR
// exit ;
66475: POP
66476: POP
66477: GO 66483
// end ; end ;
66479: GO 66430
66481: POP
66482: POP
// end ;
66483: LD_VAR 0 3
66487: RET
// export function GetCargoBay ( units ) ; begin
66488: LD_INT 0
66490: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
66491: LD_ADDR_VAR 0 2
66495: PUSH
66496: LD_VAR 0 1
66500: PPUSH
66501: LD_INT 2
66503: PUSH
66504: LD_INT 34
66506: PUSH
66507: LD_INT 12
66509: PUSH
66510: EMPTY
66511: LIST
66512: LIST
66513: PUSH
66514: LD_INT 34
66516: PUSH
66517: LD_INT 51
66519: PUSH
66520: EMPTY
66521: LIST
66522: LIST
66523: PUSH
66524: LD_INT 34
66526: PUSH
66527: LD_INT 32
66529: PUSH
66530: EMPTY
66531: LIST
66532: LIST
66533: PUSH
66534: LD_INT 34
66536: PUSH
66537: LD_INT 89
66539: PUSH
66540: EMPTY
66541: LIST
66542: LIST
66543: PUSH
66544: EMPTY
66545: LIST
66546: LIST
66547: LIST
66548: LIST
66549: LIST
66550: PPUSH
66551: CALL_OW 72
66555: ST_TO_ADDR
// end ;
66556: LD_VAR 0 2
66560: RET
// export function Negate ( value ) ; begin
66561: LD_INT 0
66563: PPUSH
// result := not value ;
66564: LD_ADDR_VAR 0 2
66568: PUSH
66569: LD_VAR 0 1
66573: NOT
66574: ST_TO_ADDR
// end ;
66575: LD_VAR 0 2
66579: RET
// export function Inc ( value ) ; begin
66580: LD_INT 0
66582: PPUSH
// result := value + 1 ;
66583: LD_ADDR_VAR 0 2
66587: PUSH
66588: LD_VAR 0 1
66592: PUSH
66593: LD_INT 1
66595: PLUS
66596: ST_TO_ADDR
// end ;
66597: LD_VAR 0 2
66601: RET
// export function Dec ( value ) ; begin
66602: LD_INT 0
66604: PPUSH
// result := value - 1 ;
66605: LD_ADDR_VAR 0 2
66609: PUSH
66610: LD_VAR 0 1
66614: PUSH
66615: LD_INT 1
66617: MINUS
66618: ST_TO_ADDR
// end ;
66619: LD_VAR 0 2
66623: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
66624: LD_INT 0
66626: PPUSH
66627: PPUSH
66628: PPUSH
66629: PPUSH
66630: PPUSH
66631: PPUSH
66632: PPUSH
66633: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
66634: LD_VAR 0 1
66638: PPUSH
66639: LD_VAR 0 2
66643: PPUSH
66644: CALL_OW 488
66648: NOT
66649: PUSH
66650: LD_VAR 0 3
66654: PPUSH
66655: LD_VAR 0 4
66659: PPUSH
66660: CALL_OW 488
66664: NOT
66665: OR
66666: IFFALSE 66679
// begin result := - 1 ;
66668: LD_ADDR_VAR 0 5
66672: PUSH
66673: LD_INT 1
66675: NEG
66676: ST_TO_ADDR
// exit ;
66677: GO 66914
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
66679: LD_ADDR_VAR 0 12
66683: PUSH
66684: LD_VAR 0 1
66688: PPUSH
66689: LD_VAR 0 2
66693: PPUSH
66694: LD_VAR 0 3
66698: PPUSH
66699: LD_VAR 0 4
66703: PPUSH
66704: CALL 65764 0 4
66708: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
66709: LD_ADDR_VAR 0 11
66713: PUSH
66714: LD_VAR 0 1
66718: PPUSH
66719: LD_VAR 0 2
66723: PPUSH
66724: LD_VAR 0 12
66728: PUSH
66729: LD_INT 1
66731: ARRAY
66732: PPUSH
66733: LD_VAR 0 12
66737: PUSH
66738: LD_INT 2
66740: ARRAY
66741: PPUSH
66742: CALL_OW 298
66746: ST_TO_ADDR
// distance := 9999 ;
66747: LD_ADDR_VAR 0 10
66751: PUSH
66752: LD_INT 9999
66754: ST_TO_ADDR
// for i := 0 to 5 do
66755: LD_ADDR_VAR 0 6
66759: PUSH
66760: DOUBLE
66761: LD_INT 0
66763: DEC
66764: ST_TO_ADDR
66765: LD_INT 5
66767: PUSH
66768: FOR_TO
66769: IFFALSE 66912
// begin _x := ShiftX ( x1 , i , centerDist ) ;
66771: LD_ADDR_VAR 0 7
66775: PUSH
66776: LD_VAR 0 1
66780: PPUSH
66781: LD_VAR 0 6
66785: PPUSH
66786: LD_VAR 0 11
66790: PPUSH
66791: CALL_OW 272
66795: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
66796: LD_ADDR_VAR 0 8
66800: PUSH
66801: LD_VAR 0 2
66805: PPUSH
66806: LD_VAR 0 6
66810: PPUSH
66811: LD_VAR 0 11
66815: PPUSH
66816: CALL_OW 273
66820: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
66821: LD_VAR 0 7
66825: PPUSH
66826: LD_VAR 0 8
66830: PPUSH
66831: CALL_OW 488
66835: NOT
66836: IFFALSE 66840
// continue ;
66838: GO 66768
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
66840: LD_ADDR_VAR 0 9
66844: PUSH
66845: LD_VAR 0 12
66849: PUSH
66850: LD_INT 1
66852: ARRAY
66853: PPUSH
66854: LD_VAR 0 12
66858: PUSH
66859: LD_INT 2
66861: ARRAY
66862: PPUSH
66863: LD_VAR 0 7
66867: PPUSH
66868: LD_VAR 0 8
66872: PPUSH
66873: CALL_OW 298
66877: ST_TO_ADDR
// if tmp < distance then
66878: LD_VAR 0 9
66882: PUSH
66883: LD_VAR 0 10
66887: LESS
66888: IFFALSE 66910
// begin result := i ;
66890: LD_ADDR_VAR 0 5
66894: PUSH
66895: LD_VAR 0 6
66899: ST_TO_ADDR
// distance := tmp ;
66900: LD_ADDR_VAR 0 10
66904: PUSH
66905: LD_VAR 0 9
66909: ST_TO_ADDR
// end ; end ;
66910: GO 66768
66912: POP
66913: POP
// end ;
66914: LD_VAR 0 5
66918: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
66919: LD_INT 0
66921: PPUSH
66922: PPUSH
// if not driver or not IsInUnit ( driver ) then
66923: LD_VAR 0 1
66927: NOT
66928: PUSH
66929: LD_VAR 0 1
66933: PPUSH
66934: CALL_OW 310
66938: NOT
66939: OR
66940: IFFALSE 66944
// exit ;
66942: GO 67034
// vehicle := IsInUnit ( driver ) ;
66944: LD_ADDR_VAR 0 3
66948: PUSH
66949: LD_VAR 0 1
66953: PPUSH
66954: CALL_OW 310
66958: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
66959: LD_VAR 0 1
66963: PPUSH
66964: LD_STRING \
66966: PUSH
66967: LD_INT 0
66969: PUSH
66970: LD_INT 0
66972: PUSH
66973: LD_INT 0
66975: PUSH
66976: LD_INT 0
66978: PUSH
66979: LD_INT 0
66981: PUSH
66982: LD_INT 0
66984: PUSH
66985: EMPTY
66986: LIST
66987: LIST
66988: LIST
66989: LIST
66990: LIST
66991: LIST
66992: LIST
66993: PUSH
66994: LD_STRING E
66996: PUSH
66997: LD_INT 0
66999: PUSH
67000: LD_INT 0
67002: PUSH
67003: LD_VAR 0 3
67007: PUSH
67008: LD_INT 0
67010: PUSH
67011: LD_INT 0
67013: PUSH
67014: LD_INT 0
67016: PUSH
67017: EMPTY
67018: LIST
67019: LIST
67020: LIST
67021: LIST
67022: LIST
67023: LIST
67024: LIST
67025: PUSH
67026: EMPTY
67027: LIST
67028: LIST
67029: PPUSH
67030: CALL_OW 446
// end ;
67034: LD_VAR 0 2
67038: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
67039: LD_INT 0
67041: PPUSH
67042: PPUSH
// if not driver or not IsInUnit ( driver ) then
67043: LD_VAR 0 1
67047: NOT
67048: PUSH
67049: LD_VAR 0 1
67053: PPUSH
67054: CALL_OW 310
67058: NOT
67059: OR
67060: IFFALSE 67064
// exit ;
67062: GO 67154
// vehicle := IsInUnit ( driver ) ;
67064: LD_ADDR_VAR 0 3
67068: PUSH
67069: LD_VAR 0 1
67073: PPUSH
67074: CALL_OW 310
67078: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
67079: LD_VAR 0 1
67083: PPUSH
67084: LD_STRING \
67086: PUSH
67087: LD_INT 0
67089: PUSH
67090: LD_INT 0
67092: PUSH
67093: LD_INT 0
67095: PUSH
67096: LD_INT 0
67098: PUSH
67099: LD_INT 0
67101: PUSH
67102: LD_INT 0
67104: PUSH
67105: EMPTY
67106: LIST
67107: LIST
67108: LIST
67109: LIST
67110: LIST
67111: LIST
67112: LIST
67113: PUSH
67114: LD_STRING E
67116: PUSH
67117: LD_INT 0
67119: PUSH
67120: LD_INT 0
67122: PUSH
67123: LD_VAR 0 3
67127: PUSH
67128: LD_INT 0
67130: PUSH
67131: LD_INT 0
67133: PUSH
67134: LD_INT 0
67136: PUSH
67137: EMPTY
67138: LIST
67139: LIST
67140: LIST
67141: LIST
67142: LIST
67143: LIST
67144: LIST
67145: PUSH
67146: EMPTY
67147: LIST
67148: LIST
67149: PPUSH
67150: CALL_OW 447
// end ;
67154: LD_VAR 0 2
67158: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
67159: LD_INT 0
67161: PPUSH
67162: PPUSH
67163: PPUSH
// tmp := [ ] ;
67164: LD_ADDR_VAR 0 5
67168: PUSH
67169: EMPTY
67170: ST_TO_ADDR
// for i in units do
67171: LD_ADDR_VAR 0 4
67175: PUSH
67176: LD_VAR 0 1
67180: PUSH
67181: FOR_IN
67182: IFFALSE 67220
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
67184: LD_ADDR_VAR 0 5
67188: PUSH
67189: LD_VAR 0 5
67193: PPUSH
67194: LD_VAR 0 5
67198: PUSH
67199: LD_INT 1
67201: PLUS
67202: PPUSH
67203: LD_VAR 0 4
67207: PPUSH
67208: CALL_OW 256
67212: PPUSH
67213: CALL_OW 2
67217: ST_TO_ADDR
67218: GO 67181
67220: POP
67221: POP
// if not tmp then
67222: LD_VAR 0 5
67226: NOT
67227: IFFALSE 67231
// exit ;
67229: GO 67279
// if asc then
67231: LD_VAR 0 2
67235: IFFALSE 67259
// result := SortListByListAsc ( units , tmp ) else
67237: LD_ADDR_VAR 0 3
67241: PUSH
67242: LD_VAR 0 1
67246: PPUSH
67247: LD_VAR 0 5
67251: PPUSH
67252: CALL_OW 76
67256: ST_TO_ADDR
67257: GO 67279
// result := SortListByListDesc ( units , tmp ) ;
67259: LD_ADDR_VAR 0 3
67263: PUSH
67264: LD_VAR 0 1
67268: PPUSH
67269: LD_VAR 0 5
67273: PPUSH
67274: CALL_OW 77
67278: ST_TO_ADDR
// end ;
67279: LD_VAR 0 3
67283: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
67284: LD_INT 0
67286: PPUSH
67287: PPUSH
// task := GetTaskList ( mech ) ;
67288: LD_ADDR_VAR 0 4
67292: PUSH
67293: LD_VAR 0 1
67297: PPUSH
67298: CALL_OW 437
67302: ST_TO_ADDR
// if not task then
67303: LD_VAR 0 4
67307: NOT
67308: IFFALSE 67312
// exit ;
67310: GO 67354
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
67312: LD_ADDR_VAR 0 3
67316: PUSH
67317: LD_VAR 0 4
67321: PUSH
67322: LD_INT 1
67324: ARRAY
67325: PUSH
67326: LD_INT 1
67328: ARRAY
67329: PUSH
67330: LD_STRING r
67332: EQUAL
67333: PUSH
67334: LD_VAR 0 4
67338: PUSH
67339: LD_INT 1
67341: ARRAY
67342: PUSH
67343: LD_INT 4
67345: ARRAY
67346: PUSH
67347: LD_VAR 0 2
67351: EQUAL
67352: AND
67353: ST_TO_ADDR
// end ;
67354: LD_VAR 0 3
67358: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
67359: LD_INT 0
67361: PPUSH
// SetDir ( unit , d ) ;
67362: LD_VAR 0 1
67366: PPUSH
67367: LD_VAR 0 4
67371: PPUSH
67372: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
67376: LD_VAR 0 1
67380: PPUSH
67381: LD_VAR 0 2
67385: PPUSH
67386: LD_VAR 0 3
67390: PPUSH
67391: LD_VAR 0 5
67395: PPUSH
67396: CALL_OW 48
// end ;
67400: LD_VAR 0 6
67404: RET
// export function ToNaturalNumber ( number ) ; begin
67405: LD_INT 0
67407: PPUSH
// result := number div 1 ;
67408: LD_ADDR_VAR 0 2
67412: PUSH
67413: LD_VAR 0 1
67417: PUSH
67418: LD_INT 1
67420: DIV
67421: ST_TO_ADDR
// if number < 0 then
67422: LD_VAR 0 1
67426: PUSH
67427: LD_INT 0
67429: LESS
67430: IFFALSE 67440
// result := 0 ;
67432: LD_ADDR_VAR 0 2
67436: PUSH
67437: LD_INT 0
67439: ST_TO_ADDR
// end ;
67440: LD_VAR 0 2
67444: RET
// export function SortByClass ( units , class ) ; var un ; begin
67445: LD_INT 0
67447: PPUSH
67448: PPUSH
// if not units or not class then
67449: LD_VAR 0 1
67453: NOT
67454: PUSH
67455: LD_VAR 0 2
67459: NOT
67460: OR
67461: IFFALSE 67465
// exit ;
67463: GO 67560
// result := [ ] ;
67465: LD_ADDR_VAR 0 3
67469: PUSH
67470: EMPTY
67471: ST_TO_ADDR
// for un in units do
67472: LD_ADDR_VAR 0 4
67476: PUSH
67477: LD_VAR 0 1
67481: PUSH
67482: FOR_IN
67483: IFFALSE 67558
// if GetClass ( un ) = class then
67485: LD_VAR 0 4
67489: PPUSH
67490: CALL_OW 257
67494: PUSH
67495: LD_VAR 0 2
67499: EQUAL
67500: IFFALSE 67527
// result := Insert ( result , 1 , un ) else
67502: LD_ADDR_VAR 0 3
67506: PUSH
67507: LD_VAR 0 3
67511: PPUSH
67512: LD_INT 1
67514: PPUSH
67515: LD_VAR 0 4
67519: PPUSH
67520: CALL_OW 2
67524: ST_TO_ADDR
67525: GO 67556
// result := Replace ( result , result + 1 , un ) ;
67527: LD_ADDR_VAR 0 3
67531: PUSH
67532: LD_VAR 0 3
67536: PPUSH
67537: LD_VAR 0 3
67541: PUSH
67542: LD_INT 1
67544: PLUS
67545: PPUSH
67546: LD_VAR 0 4
67550: PPUSH
67551: CALL_OW 1
67555: ST_TO_ADDR
67556: GO 67482
67558: POP
67559: POP
// end ;
67560: LD_VAR 0 3
67564: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
67565: LD_INT 0
67567: PPUSH
67568: PPUSH
67569: PPUSH
67570: PPUSH
67571: PPUSH
67572: PPUSH
67573: PPUSH
// result := [ ] ;
67574: LD_ADDR_VAR 0 4
67578: PUSH
67579: EMPTY
67580: ST_TO_ADDR
// if x - r < 0 then
67581: LD_VAR 0 1
67585: PUSH
67586: LD_VAR 0 3
67590: MINUS
67591: PUSH
67592: LD_INT 0
67594: LESS
67595: IFFALSE 67607
// min_x := 0 else
67597: LD_ADDR_VAR 0 8
67601: PUSH
67602: LD_INT 0
67604: ST_TO_ADDR
67605: GO 67623
// min_x := x - r ;
67607: LD_ADDR_VAR 0 8
67611: PUSH
67612: LD_VAR 0 1
67616: PUSH
67617: LD_VAR 0 3
67621: MINUS
67622: ST_TO_ADDR
// if y - r < 0 then
67623: LD_VAR 0 2
67627: PUSH
67628: LD_VAR 0 3
67632: MINUS
67633: PUSH
67634: LD_INT 0
67636: LESS
67637: IFFALSE 67649
// min_y := 0 else
67639: LD_ADDR_VAR 0 7
67643: PUSH
67644: LD_INT 0
67646: ST_TO_ADDR
67647: GO 67665
// min_y := y - r ;
67649: LD_ADDR_VAR 0 7
67653: PUSH
67654: LD_VAR 0 2
67658: PUSH
67659: LD_VAR 0 3
67663: MINUS
67664: ST_TO_ADDR
// max_x := x + r ;
67665: LD_ADDR_VAR 0 9
67669: PUSH
67670: LD_VAR 0 1
67674: PUSH
67675: LD_VAR 0 3
67679: PLUS
67680: ST_TO_ADDR
// max_y := y + r ;
67681: LD_ADDR_VAR 0 10
67685: PUSH
67686: LD_VAR 0 2
67690: PUSH
67691: LD_VAR 0 3
67695: PLUS
67696: ST_TO_ADDR
// for _x = min_x to max_x do
67697: LD_ADDR_VAR 0 5
67701: PUSH
67702: DOUBLE
67703: LD_VAR 0 8
67707: DEC
67708: ST_TO_ADDR
67709: LD_VAR 0 9
67713: PUSH
67714: FOR_TO
67715: IFFALSE 67816
// for _y = min_y to max_y do
67717: LD_ADDR_VAR 0 6
67721: PUSH
67722: DOUBLE
67723: LD_VAR 0 7
67727: DEC
67728: ST_TO_ADDR
67729: LD_VAR 0 10
67733: PUSH
67734: FOR_TO
67735: IFFALSE 67812
// begin if not ValidHex ( _x , _y ) then
67737: LD_VAR 0 5
67741: PPUSH
67742: LD_VAR 0 6
67746: PPUSH
67747: CALL_OW 488
67751: NOT
67752: IFFALSE 67756
// continue ;
67754: GO 67734
// if GetResourceTypeXY ( _x , _y ) then
67756: LD_VAR 0 5
67760: PPUSH
67761: LD_VAR 0 6
67765: PPUSH
67766: CALL_OW 283
67770: IFFALSE 67810
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
67772: LD_ADDR_VAR 0 4
67776: PUSH
67777: LD_VAR 0 4
67781: PPUSH
67782: LD_VAR 0 4
67786: PUSH
67787: LD_INT 1
67789: PLUS
67790: PPUSH
67791: LD_VAR 0 5
67795: PUSH
67796: LD_VAR 0 6
67800: PUSH
67801: EMPTY
67802: LIST
67803: LIST
67804: PPUSH
67805: CALL_OW 1
67809: ST_TO_ADDR
// end ;
67810: GO 67734
67812: POP
67813: POP
67814: GO 67714
67816: POP
67817: POP
// end ;
67818: LD_VAR 0 4
67822: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
67823: LD_INT 0
67825: PPUSH
67826: PPUSH
67827: PPUSH
67828: PPUSH
67829: PPUSH
67830: PPUSH
67831: PPUSH
67832: PPUSH
// if not units then
67833: LD_VAR 0 1
67837: NOT
67838: IFFALSE 67842
// exit ;
67840: GO 68366
// result := UnitFilter ( units , [ f_ok ] ) ;
67842: LD_ADDR_VAR 0 3
67846: PUSH
67847: LD_VAR 0 1
67851: PPUSH
67852: LD_INT 50
67854: PUSH
67855: EMPTY
67856: LIST
67857: PPUSH
67858: CALL_OW 72
67862: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
67863: LD_ADDR_VAR 0 8
67867: PUSH
67868: LD_VAR 0 1
67872: PUSH
67873: LD_INT 1
67875: ARRAY
67876: PPUSH
67877: CALL_OW 255
67881: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
67882: LD_ADDR_VAR 0 10
67886: PUSH
67887: LD_INT 29
67889: PUSH
67890: LD_INT 91
67892: PUSH
67893: LD_INT 49
67895: PUSH
67896: EMPTY
67897: LIST
67898: LIST
67899: LIST
67900: ST_TO_ADDR
// if not result then
67901: LD_VAR 0 3
67905: NOT
67906: IFFALSE 67910
// exit ;
67908: GO 68366
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
67910: LD_ADDR_VAR 0 5
67914: PUSH
67915: LD_INT 81
67917: PUSH
67918: LD_VAR 0 8
67922: PUSH
67923: EMPTY
67924: LIST
67925: LIST
67926: PPUSH
67927: CALL_OW 69
67931: ST_TO_ADDR
// for i in result do
67932: LD_ADDR_VAR 0 4
67936: PUSH
67937: LD_VAR 0 3
67941: PUSH
67942: FOR_IN
67943: IFFALSE 68364
// begin tag := GetTag ( i ) + 1 ;
67945: LD_ADDR_VAR 0 9
67949: PUSH
67950: LD_VAR 0 4
67954: PPUSH
67955: CALL_OW 110
67959: PUSH
67960: LD_INT 1
67962: PLUS
67963: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
67964: LD_ADDR_VAR 0 7
67968: PUSH
67969: LD_VAR 0 4
67973: PPUSH
67974: CALL_OW 250
67978: PPUSH
67979: LD_VAR 0 4
67983: PPUSH
67984: CALL_OW 251
67988: PPUSH
67989: LD_INT 6
67991: PPUSH
67992: CALL 67565 0 3
67996: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
67997: LD_VAR 0 4
68001: PPUSH
68002: CALL_OW 247
68006: PUSH
68007: LD_INT 2
68009: EQUAL
68010: PUSH
68011: LD_VAR 0 7
68015: AND
68016: PUSH
68017: LD_VAR 0 4
68021: PPUSH
68022: CALL_OW 264
68026: PUSH
68027: LD_VAR 0 10
68031: IN
68032: NOT
68033: AND
68034: IFFALSE 68073
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
68036: LD_VAR 0 4
68040: PPUSH
68041: LD_VAR 0 7
68045: PUSH
68046: LD_INT 1
68048: ARRAY
68049: PUSH
68050: LD_INT 1
68052: ARRAY
68053: PPUSH
68054: LD_VAR 0 7
68058: PUSH
68059: LD_INT 1
68061: ARRAY
68062: PUSH
68063: LD_INT 2
68065: ARRAY
68066: PPUSH
68067: CALL_OW 116
68071: GO 68362
// if path > tag then
68073: LD_VAR 0 2
68077: PUSH
68078: LD_VAR 0 9
68082: GREATER
68083: IFFALSE 68291
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
68085: LD_ADDR_VAR 0 6
68089: PUSH
68090: LD_VAR 0 5
68094: PPUSH
68095: LD_INT 91
68097: PUSH
68098: LD_VAR 0 4
68102: PUSH
68103: LD_INT 8
68105: PUSH
68106: EMPTY
68107: LIST
68108: LIST
68109: LIST
68110: PPUSH
68111: CALL_OW 72
68115: ST_TO_ADDR
// if nearEnemy then
68116: LD_VAR 0 6
68120: IFFALSE 68189
// begin if GetWeapon ( i ) = ru_time_lapser then
68122: LD_VAR 0 4
68126: PPUSH
68127: CALL_OW 264
68131: PUSH
68132: LD_INT 49
68134: EQUAL
68135: IFFALSE 68163
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
68137: LD_VAR 0 4
68141: PPUSH
68142: LD_VAR 0 6
68146: PPUSH
68147: LD_VAR 0 4
68151: PPUSH
68152: CALL_OW 74
68156: PPUSH
68157: CALL_OW 112
68161: GO 68187
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
68163: LD_VAR 0 4
68167: PPUSH
68168: LD_VAR 0 6
68172: PPUSH
68173: LD_VAR 0 4
68177: PPUSH
68178: CALL_OW 74
68182: PPUSH
68183: CALL_OW 115
// end else
68187: GO 68289
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
68189: LD_VAR 0 4
68193: PPUSH
68194: LD_VAR 0 2
68198: PUSH
68199: LD_VAR 0 9
68203: ARRAY
68204: PUSH
68205: LD_INT 1
68207: ARRAY
68208: PPUSH
68209: LD_VAR 0 2
68213: PUSH
68214: LD_VAR 0 9
68218: ARRAY
68219: PUSH
68220: LD_INT 2
68222: ARRAY
68223: PPUSH
68224: CALL_OW 297
68228: PUSH
68229: LD_INT 6
68231: GREATER
68232: IFFALSE 68275
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
68234: LD_VAR 0 4
68238: PPUSH
68239: LD_VAR 0 2
68243: PUSH
68244: LD_VAR 0 9
68248: ARRAY
68249: PUSH
68250: LD_INT 1
68252: ARRAY
68253: PPUSH
68254: LD_VAR 0 2
68258: PUSH
68259: LD_VAR 0 9
68263: ARRAY
68264: PUSH
68265: LD_INT 2
68267: ARRAY
68268: PPUSH
68269: CALL_OW 114
68273: GO 68289
// SetTag ( i , tag ) ;
68275: LD_VAR 0 4
68279: PPUSH
68280: LD_VAR 0 9
68284: PPUSH
68285: CALL_OW 109
// end else
68289: GO 68362
// if enemy then
68291: LD_VAR 0 5
68295: IFFALSE 68362
// begin if GetWeapon ( i ) = ru_time_lapser then
68297: LD_VAR 0 4
68301: PPUSH
68302: CALL_OW 264
68306: PUSH
68307: LD_INT 49
68309: EQUAL
68310: IFFALSE 68338
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
68312: LD_VAR 0 4
68316: PPUSH
68317: LD_VAR 0 5
68321: PPUSH
68322: LD_VAR 0 4
68326: PPUSH
68327: CALL_OW 74
68331: PPUSH
68332: CALL_OW 112
68336: GO 68362
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
68338: LD_VAR 0 4
68342: PPUSH
68343: LD_VAR 0 5
68347: PPUSH
68348: LD_VAR 0 4
68352: PPUSH
68353: CALL_OW 74
68357: PPUSH
68358: CALL_OW 115
// end ; end ;
68362: GO 67942
68364: POP
68365: POP
// end ;
68366: LD_VAR 0 3
68370: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
68371: LD_INT 0
68373: PPUSH
68374: PPUSH
68375: PPUSH
// if not unit or IsInUnit ( unit ) then
68376: LD_VAR 0 1
68380: NOT
68381: PUSH
68382: LD_VAR 0 1
68386: PPUSH
68387: CALL_OW 310
68391: OR
68392: IFFALSE 68396
// exit ;
68394: GO 68487
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
68396: LD_ADDR_VAR 0 4
68400: PUSH
68401: LD_VAR 0 1
68405: PPUSH
68406: CALL_OW 250
68410: PPUSH
68411: LD_VAR 0 2
68415: PPUSH
68416: LD_INT 1
68418: PPUSH
68419: CALL_OW 272
68423: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
68424: LD_ADDR_VAR 0 5
68428: PUSH
68429: LD_VAR 0 1
68433: PPUSH
68434: CALL_OW 251
68438: PPUSH
68439: LD_VAR 0 2
68443: PPUSH
68444: LD_INT 1
68446: PPUSH
68447: CALL_OW 273
68451: ST_TO_ADDR
// if ValidHex ( x , y ) then
68452: LD_VAR 0 4
68456: PPUSH
68457: LD_VAR 0 5
68461: PPUSH
68462: CALL_OW 488
68466: IFFALSE 68487
// ComTurnXY ( unit , x , y ) ;
68468: LD_VAR 0 1
68472: PPUSH
68473: LD_VAR 0 4
68477: PPUSH
68478: LD_VAR 0 5
68482: PPUSH
68483: CALL_OW 118
// end ;
68487: LD_VAR 0 3
68491: RET
// export function SeeUnits ( side , units ) ; var i ; begin
68492: LD_INT 0
68494: PPUSH
68495: PPUSH
// result := false ;
68496: LD_ADDR_VAR 0 3
68500: PUSH
68501: LD_INT 0
68503: ST_TO_ADDR
// if not units then
68504: LD_VAR 0 2
68508: NOT
68509: IFFALSE 68513
// exit ;
68511: GO 68558
// for i in units do
68513: LD_ADDR_VAR 0 4
68517: PUSH
68518: LD_VAR 0 2
68522: PUSH
68523: FOR_IN
68524: IFFALSE 68556
// if See ( side , i ) then
68526: LD_VAR 0 1
68530: PPUSH
68531: LD_VAR 0 4
68535: PPUSH
68536: CALL_OW 292
68540: IFFALSE 68554
// begin result := true ;
68542: LD_ADDR_VAR 0 3
68546: PUSH
68547: LD_INT 1
68549: ST_TO_ADDR
// exit ;
68550: POP
68551: POP
68552: GO 68558
// end ;
68554: GO 68523
68556: POP
68557: POP
// end ;
68558: LD_VAR 0 3
68562: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
68563: LD_INT 0
68565: PPUSH
68566: PPUSH
68567: PPUSH
68568: PPUSH
// if not unit or not points then
68569: LD_VAR 0 1
68573: NOT
68574: PUSH
68575: LD_VAR 0 2
68579: NOT
68580: OR
68581: IFFALSE 68585
// exit ;
68583: GO 68675
// dist := 99999 ;
68585: LD_ADDR_VAR 0 5
68589: PUSH
68590: LD_INT 99999
68592: ST_TO_ADDR
// for i in points do
68593: LD_ADDR_VAR 0 4
68597: PUSH
68598: LD_VAR 0 2
68602: PUSH
68603: FOR_IN
68604: IFFALSE 68673
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
68606: LD_ADDR_VAR 0 6
68610: PUSH
68611: LD_VAR 0 1
68615: PPUSH
68616: LD_VAR 0 4
68620: PUSH
68621: LD_INT 1
68623: ARRAY
68624: PPUSH
68625: LD_VAR 0 4
68629: PUSH
68630: LD_INT 2
68632: ARRAY
68633: PPUSH
68634: CALL_OW 297
68638: ST_TO_ADDR
// if tmpDist < dist then
68639: LD_VAR 0 6
68643: PUSH
68644: LD_VAR 0 5
68648: LESS
68649: IFFALSE 68671
// begin result := i ;
68651: LD_ADDR_VAR 0 3
68655: PUSH
68656: LD_VAR 0 4
68660: ST_TO_ADDR
// dist := tmpDist ;
68661: LD_ADDR_VAR 0 5
68665: PUSH
68666: LD_VAR 0 6
68670: ST_TO_ADDR
// end ; end ;
68671: GO 68603
68673: POP
68674: POP
// end ;
68675: LD_VAR 0 3
68679: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
68680: LD_INT 0
68682: PPUSH
// uc_side := side ;
68683: LD_ADDR_OWVAR 20
68687: PUSH
68688: LD_VAR 0 1
68692: ST_TO_ADDR
// uc_nation := 3 ;
68693: LD_ADDR_OWVAR 21
68697: PUSH
68698: LD_INT 3
68700: ST_TO_ADDR
// vc_chassis := 25 ;
68701: LD_ADDR_OWVAR 37
68705: PUSH
68706: LD_INT 25
68708: ST_TO_ADDR
// vc_engine := engine_siberite ;
68709: LD_ADDR_OWVAR 39
68713: PUSH
68714: LD_INT 3
68716: ST_TO_ADDR
// vc_control := control_computer ;
68717: LD_ADDR_OWVAR 38
68721: PUSH
68722: LD_INT 3
68724: ST_TO_ADDR
// vc_weapon := 59 ;
68725: LD_ADDR_OWVAR 40
68729: PUSH
68730: LD_INT 59
68732: ST_TO_ADDR
// result := CreateVehicle ;
68733: LD_ADDR_VAR 0 5
68737: PUSH
68738: CALL_OW 45
68742: ST_TO_ADDR
// SetDir ( result , d ) ;
68743: LD_VAR 0 5
68747: PPUSH
68748: LD_VAR 0 4
68752: PPUSH
68753: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
68757: LD_VAR 0 5
68761: PPUSH
68762: LD_VAR 0 2
68766: PPUSH
68767: LD_VAR 0 3
68771: PPUSH
68772: LD_INT 0
68774: PPUSH
68775: CALL_OW 48
// end ;
68779: LD_VAR 0 5
68783: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
68784: LD_INT 0
68786: PPUSH
68787: PPUSH
68788: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
68789: LD_ADDR_VAR 0 2
68793: PUSH
68794: LD_INT 0
68796: PUSH
68797: LD_INT 0
68799: PUSH
68800: LD_INT 0
68802: PUSH
68803: LD_INT 0
68805: PUSH
68806: EMPTY
68807: LIST
68808: LIST
68809: LIST
68810: LIST
68811: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
68812: LD_VAR 0 1
68816: NOT
68817: PUSH
68818: LD_VAR 0 1
68822: PPUSH
68823: CALL_OW 264
68827: PUSH
68828: LD_INT 12
68830: PUSH
68831: LD_INT 51
68833: PUSH
68834: LD_INT 32
68836: PUSH
68837: LD_INT 89
68839: PUSH
68840: EMPTY
68841: LIST
68842: LIST
68843: LIST
68844: LIST
68845: IN
68846: NOT
68847: OR
68848: IFFALSE 68852
// exit ;
68850: GO 68950
// for i := 1 to 3 do
68852: LD_ADDR_VAR 0 3
68856: PUSH
68857: DOUBLE
68858: LD_INT 1
68860: DEC
68861: ST_TO_ADDR
68862: LD_INT 3
68864: PUSH
68865: FOR_TO
68866: IFFALSE 68948
// begin tmp := GetCargo ( cargo , i ) ;
68868: LD_ADDR_VAR 0 4
68872: PUSH
68873: LD_VAR 0 1
68877: PPUSH
68878: LD_VAR 0 3
68882: PPUSH
68883: CALL_OW 289
68887: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
68888: LD_ADDR_VAR 0 2
68892: PUSH
68893: LD_VAR 0 2
68897: PPUSH
68898: LD_VAR 0 3
68902: PPUSH
68903: LD_VAR 0 4
68907: PPUSH
68908: CALL_OW 1
68912: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
68913: LD_ADDR_VAR 0 2
68917: PUSH
68918: LD_VAR 0 2
68922: PPUSH
68923: LD_INT 4
68925: PPUSH
68926: LD_VAR 0 2
68930: PUSH
68931: LD_INT 4
68933: ARRAY
68934: PUSH
68935: LD_VAR 0 4
68939: PLUS
68940: PPUSH
68941: CALL_OW 1
68945: ST_TO_ADDR
// end ;
68946: GO 68865
68948: POP
68949: POP
// end ;
68950: LD_VAR 0 2
68954: RET
// export function Length ( array ) ; begin
68955: LD_INT 0
68957: PPUSH
// result := array + 0 ;
68958: LD_ADDR_VAR 0 2
68962: PUSH
68963: LD_VAR 0 1
68967: PUSH
68968: LD_INT 0
68970: PLUS
68971: ST_TO_ADDR
// end ;
68972: LD_VAR 0 2
68976: RET
// export function PrepareArray ( array ) ; begin
68977: LD_INT 0
68979: PPUSH
// result := array diff 0 ;
68980: LD_ADDR_VAR 0 2
68984: PUSH
68985: LD_VAR 0 1
68989: PUSH
68990: LD_INT 0
68992: DIFF
68993: ST_TO_ADDR
// if not result [ 1 ] then
68994: LD_VAR 0 2
68998: PUSH
68999: LD_INT 1
69001: ARRAY
69002: NOT
69003: IFFALSE 69023
// result := Delete ( result , 1 ) ;
69005: LD_ADDR_VAR 0 2
69009: PUSH
69010: LD_VAR 0 2
69014: PPUSH
69015: LD_INT 1
69017: PPUSH
69018: CALL_OW 3
69022: ST_TO_ADDR
// end ; end_of_file
69023: LD_VAR 0 2
69027: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
69028: LD_VAR 0 1
69032: PUSH
69033: LD_INT 200
69035: DOUBLE
69036: GREATEREQUAL
69037: IFFALSE 69045
69039: LD_INT 299
69041: DOUBLE
69042: LESSEQUAL
69043: IFTRUE 69047
69045: GO 69079
69047: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
69048: LD_VAR 0 1
69052: PPUSH
69053: LD_VAR 0 2
69057: PPUSH
69058: LD_VAR 0 3
69062: PPUSH
69063: LD_VAR 0 4
69067: PPUSH
69068: LD_VAR 0 5
69072: PPUSH
69073: CALL 23930 0 5
69077: GO 69156
69079: LD_INT 300
69081: DOUBLE
69082: GREATEREQUAL
69083: IFFALSE 69091
69085: LD_INT 399
69087: DOUBLE
69088: LESSEQUAL
69089: IFTRUE 69093
69091: GO 69155
69093: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
69094: LD_VAR 0 1
69098: PPUSH
69099: LD_VAR 0 2
69103: PPUSH
69104: LD_VAR 0 3
69108: PPUSH
69109: LD_VAR 0 4
69113: PPUSH
69114: LD_VAR 0 5
69118: PPUSH
69119: LD_VAR 0 6
69123: PPUSH
69124: LD_VAR 0 7
69128: PPUSH
69129: LD_VAR 0 8
69133: PPUSH
69134: LD_VAR 0 9
69138: PPUSH
69139: LD_VAR 0 10
69143: PPUSH
69144: LD_VAR 0 11
69148: PPUSH
69149: CALL 20263 0 11
69153: GO 69156
69155: POP
// end ;
69156: PPOPN 11
69158: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
69159: LD_VAR 0 1
69163: PPUSH
69164: LD_VAR 0 2
69168: PPUSH
69169: LD_VAR 0 3
69173: PPUSH
69174: LD_VAR 0 4
69178: PPUSH
69179: LD_VAR 0 5
69183: PPUSH
69184: CALL 23666 0 5
// end ; end_of_file
69188: PPOPN 5
69190: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
69191: LD_VAR 0 1
69195: PPUSH
69196: LD_VAR 0 2
69200: PPUSH
69201: LD_VAR 0 3
69205: PPUSH
69206: LD_VAR 0 4
69210: PPUSH
69211: LD_VAR 0 5
69215: PPUSH
69216: LD_VAR 0 6
69220: PPUSH
69221: CALL 7956 0 6
// end ;
69225: PPOPN 6
69227: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
69228: LD_INT 0
69230: PPUSH
// begin if not units then
69231: LD_VAR 0 1
69235: NOT
69236: IFFALSE 69240
// exit ;
69238: GO 69240
// end ;
69240: PPOPN 7
69242: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
69243: CALL 7927 0 0
// end ;
69247: PPOPN 1
69249: END
