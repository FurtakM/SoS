// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RandomizeAll ;
  11: CALL_OW 11
// Init ;
  15: CALL 79 0 0
// InitRestrictions ;
  19: CALL 207 0 0
// if debug then
  23: LD_EXP 1
  27: IFFALSE 33
// DebugMode ;
  29: CALL 288 0 0
// SpawnApeman ( apemanStartArea , 2 ) ;
  33: LD_INT 12
  35: PPUSH
  36: LD_INT 2
  38: PPUSH
  39: CALL 595 0 2
// SpawnApeman ( apemanArea , [ 10 , 8 , 7 ] [ Difficulty ] ) ;
  43: LD_INT 11
  45: PPUSH
  46: LD_INT 10
  48: PUSH
  49: LD_INT 8
  51: PUSH
  52: LD_INT 7
  54: PUSH
  55: EMPTY
  56: LIST
  57: LIST
  58: LIST
  59: PUSH
  60: LD_OWVAR 67
  64: ARRAY
  65: PPUSH
  66: CALL 595 0 2
// PrepareAmericans ;
  70: CALL 1194 0 0
// Action ;
  74: CALL 2130 0 0
// end ;
  78: END
// export debug ; export mission_prefix , mission_prefix_prev ; export deltaBuilded , denisArrives , Delta , radar_allowed , first_apeman_tamed , apeman_army , radar_researched , radar_builded ; export apeman_counter , arab_spotted , end_mission , apeKillCounter ; function Init ; begin
  79: LD_INT 0
  81: PPUSH
// debug := false ;
  82: LD_ADDR_EXP 1
  86: PUSH
  87: LD_INT 0
  89: ST_TO_ADDR
// mission_prefix := 05_ ;
  90: LD_ADDR_EXP 2
  94: PUSH
  95: LD_STRING 05_
  97: ST_TO_ADDR
// mission_prefix_prev := 05a_ ;
  98: LD_ADDR_EXP 3
 102: PUSH
 103: LD_STRING 05a_
 105: ST_TO_ADDR
// deltaBuilded := false ;
 106: LD_ADDR_EXP 4
 110: PUSH
 111: LD_INT 0
 113: ST_TO_ADDR
// denisArrives := false ;
 114: LD_ADDR_EXP 5
 118: PUSH
 119: LD_INT 0
 121: ST_TO_ADDR
// radar_allowed := false ;
 122: LD_ADDR_EXP 7
 126: PUSH
 127: LD_INT 0
 129: ST_TO_ADDR
// first_apeman_tamed := false ;
 130: LD_ADDR_EXP 8
 134: PUSH
 135: LD_INT 0
 137: ST_TO_ADDR
// arab_spotted := false ;
 138: LD_ADDR_EXP 13
 142: PUSH
 143: LD_INT 0
 145: ST_TO_ADDR
// end_mission := false ;
 146: LD_ADDR_EXP 14
 150: PUSH
 151: LD_INT 0
 153: ST_TO_ADDR
// apeman_army := false ;
 154: LD_ADDR_EXP 9
 158: PUSH
 159: LD_INT 0
 161: ST_TO_ADDR
// radar_researched := false ;
 162: LD_ADDR_EXP 10
 166: PUSH
 167: LD_INT 0
 169: ST_TO_ADDR
// radar_builded := false ;
 170: LD_ADDR_EXP 11
 174: PUSH
 175: LD_INT 0
 177: ST_TO_ADDR
// apeman_counter := 0 ;
 178: LD_ADDR_EXP 12
 182: PUSH
 183: LD_INT 0
 185: ST_TO_ADDR
// Delta := 0 ;
 186: LD_ADDR_EXP 6
 190: PUSH
 191: LD_INT 0
 193: ST_TO_ADDR
// apeKillCounter := 0 ;
 194: LD_ADDR_EXP 15
 198: PUSH
 199: LD_INT 0
 201: ST_TO_ADDR
// end ;
 202: LD_VAR 0 1
 206: RET
// function InitRestrictions ; begin
 207: LD_INT 0
 209: PPUSH
// SetRestrict ( b_lab_half , 1 , state_enabled ) ;
 210: LD_INT 7
 212: PPUSH
 213: LD_INT 1
 215: PPUSH
 216: LD_INT 1
 218: PPUSH
 219: CALL_OW 324
// SetRestrict ( b_lab_full , 1 , state_enabled ) ;
 223: LD_INT 8
 225: PPUSH
 226: LD_INT 1
 228: PPUSH
 229: LD_INT 1
 231: PPUSH
 232: CALL_OW 324
// SetRestrict ( b_lab_weapon , 1 , state_enabled ) ;
 236: LD_INT 10
 238: PPUSH
 239: LD_INT 1
 241: PPUSH
 242: LD_INT 1
 244: PPUSH
 245: CALL_OW 324
// SetTech ( tech_gatling , 1 , LoadVariable ( GatlingInGamma , 1 ) ) ;
 249: LD_INT 69
 251: PPUSH
 252: LD_INT 1
 254: PPUSH
 255: LD_STRING GatlingInGamma
 257: PPUSH
 258: LD_INT 1
 260: PPUSH
 261: CALL_OW 30
 265: PPUSH
 266: CALL_OW 322
// SetTech ( tech_weap1 , 1 , state_enabled ) ;
 270: LD_INT 51
 272: PPUSH
 273: LD_INT 1
 275: PPUSH
 276: LD_INT 1
 278: PPUSH
 279: CALL_OW 322
// end ;
 283: LD_VAR 0 1
 287: RET
// function DebugMode ; begin
 288: LD_INT 0
 290: PPUSH
// FogOff ( 1 ) ;
 291: LD_INT 1
 293: PPUSH
 294: CALL_OW 344
// Difficulty := 2 ;
 298: LD_ADDR_OWVAR 67
 302: PUSH
 303: LD_INT 2
 305: ST_TO_ADDR
// end ;
 306: LD_VAR 0 1
 310: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 0 ] ] ) >= 7 do
 311: LD_INT 22
 313: PUSH
 314: LD_INT 1
 316: PUSH
 317: EMPTY
 318: LIST
 319: LIST
 320: PUSH
 321: LD_INT 23
 323: PUSH
 324: LD_INT 0
 326: PUSH
 327: EMPTY
 328: LIST
 329: LIST
 330: PUSH
 331: EMPTY
 332: LIST
 333: LIST
 334: PPUSH
 335: CALL_OW 69
 339: PUSH
 340: LD_INT 7
 342: GREATEREQUAL
 343: IFFALSE 355
 345: GO 347
 347: DISABLE
// SetAchievement ( ACH_TAME ) ;
 348: LD_STRING ACH_TAME
 350: PPUSH
 351: CALL_OW 543
 355: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_bweapon , us_radar ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_radar ] ] ) do
 356: LD_INT 22
 358: PUSH
 359: LD_INT 1
 361: PUSH
 362: EMPTY
 363: LIST
 364: LIST
 365: PUSH
 366: LD_INT 35
 368: PUSH
 369: LD_INT 11
 371: PUSH
 372: EMPTY
 373: LIST
 374: LIST
 375: PUSH
 376: EMPTY
 377: LIST
 378: LIST
 379: PPUSH
 380: CALL_OW 69
 384: PUSH
 385: LD_INT 22
 387: PUSH
 388: LD_INT 1
 390: PUSH
 391: EMPTY
 392: LIST
 393: LIST
 394: PUSH
 395: LD_INT 34
 397: PUSH
 398: LD_INT 11
 400: PUSH
 401: EMPTY
 402: LIST
 403: LIST
 404: PUSH
 405: EMPTY
 406: LIST
 407: LIST
 408: PPUSH
 409: CALL_OW 69
 413: AND
 414: IFFALSE 426
 416: GO 418
 418: DISABLE
// SetAchievement ( ACH_RADAR ) ; end_of_file
 419: LD_STRING ACH_RADAR
 421: PPUSH
 422: CALL_OW 543
 426: END
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 427: LD_INT 0
 429: PPUSH
// uc_side := side ;
 430: LD_ADDR_OWVAR 20
 434: PUSH
 435: LD_VAR 0 1
 439: ST_TO_ADDR
// uc_nation := nation ;
 440: LD_ADDR_OWVAR 21
 444: PUSH
 445: LD_VAR 0 2
 449: ST_TO_ADDR
// vc_chassis := chassis ;
 450: LD_ADDR_OWVAR 37
 454: PUSH
 455: LD_VAR 0 3
 459: ST_TO_ADDR
// vc_engine := engine ;
 460: LD_ADDR_OWVAR 39
 464: PUSH
 465: LD_VAR 0 4
 469: ST_TO_ADDR
// vc_control := control ;
 470: LD_ADDR_OWVAR 38
 474: PUSH
 475: LD_VAR 0 5
 479: ST_TO_ADDR
// vc_weapon := weapon ;
 480: LD_ADDR_OWVAR 40
 484: PUSH
 485: LD_VAR 0 6
 489: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 490: LD_ADDR_OWVAR 41
 494: PUSH
 495: LD_VAR 0 7
 499: ST_TO_ADDR
// result := CreateVehicle ;
 500: LD_ADDR_VAR 0 8
 504: PUSH
 505: CALL_OW 45
 509: ST_TO_ADDR
// end ;
 510: LD_VAR 0 8
 514: RET
// export function SayX ( units , ident ) ; var i ; begin
 515: LD_INT 0
 517: PPUSH
 518: PPUSH
// result := false ;
 519: LD_ADDR_VAR 0 3
 523: PUSH
 524: LD_INT 0
 526: ST_TO_ADDR
// if not units then
 527: LD_VAR 0 1
 531: NOT
 532: IFFALSE 536
// exit ;
 534: GO 590
// for i in units do
 536: LD_ADDR_VAR 0 4
 540: PUSH
 541: LD_VAR 0 1
 545: PUSH
 546: FOR_IN
 547: IFFALSE 588
// if IsOk ( i ) then
 549: LD_VAR 0 4
 553: PPUSH
 554: CALL_OW 302
 558: IFFALSE 586
// begin Say ( i , ident ) ;
 560: LD_VAR 0 4
 564: PPUSH
 565: LD_VAR 0 2
 569: PPUSH
 570: CALL_OW 88
// result := i ;
 574: LD_ADDR_VAR 0 3
 578: PUSH
 579: LD_VAR 0 4
 583: ST_TO_ADDR
// break ;
 584: GO 588
// end ;
 586: GO 546
 588: POP
 589: POP
// end ;
 590: LD_VAR 0 3
 594: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 595: LD_INT 0
 597: PPUSH
 598: PPUSH
// InitUc ;
 599: CALL_OW 18
// InitHc ;
 603: CALL_OW 19
// uc_side := 0 ;
 607: LD_ADDR_OWVAR 20
 611: PUSH
 612: LD_INT 0
 614: ST_TO_ADDR
// uc_nation := 0 ;
 615: LD_ADDR_OWVAR 21
 619: PUSH
 620: LD_INT 0
 622: ST_TO_ADDR
// for i = 1 to amount do
 623: LD_ADDR_VAR 0 4
 627: PUSH
 628: DOUBLE
 629: LD_INT 1
 631: DEC
 632: ST_TO_ADDR
 633: LD_VAR 0 2
 637: PUSH
 638: FOR_TO
 639: IFFALSE 721
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 641: LD_ADDR_OWVAR 29
 645: PUSH
 646: LD_INT 9
 648: PPUSH
 649: LD_INT 12
 651: PPUSH
 652: CALL_OW 12
 656: PUSH
 657: LD_INT 9
 659: PPUSH
 660: LD_INT 12
 662: PPUSH
 663: CALL_OW 12
 667: PUSH
 668: EMPTY
 669: LIST
 670: LIST
 671: ST_TO_ADDR
// hc_agressivity := rand ( - 5 , 5 ) ;
 672: LD_ADDR_OWVAR 35
 676: PUSH
 677: LD_INT 5
 679: NEG
 680: PPUSH
 681: LD_INT 5
 683: PPUSH
 684: CALL_OW 12
 688: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 689: LD_INT 0
 691: PPUSH
 692: LD_INT 12
 694: PPUSH
 695: LD_INT 1
 697: PPUSH
 698: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 702: CALL_OW 44
 706: PPUSH
 707: LD_VAR 0 1
 711: PPUSH
 712: LD_INT 0
 714: PPUSH
 715: CALL_OW 49
// end ;
 719: GO 638
 721: POP
 722: POP
// InitHc ;
 723: CALL_OW 19
// end ;
 727: LD_VAR 0 3
 731: RET
// export function Attack ( unit , enemy_list ) ; var target , targets_list ; begin
 732: LD_INT 0
 734: PPUSH
 735: PPUSH
 736: PPUSH
// if not unit then
 737: LD_VAR 0 1
 741: NOT
 742: IFFALSE 746
// exit ;
 744: GO 1189
// if IsInUnit ( unit ) then
 746: LD_VAR 0 1
 750: PPUSH
 751: CALL_OW 310
 755: IFFALSE 772
// unit := IsDrivenBy ( unit ) ;
 757: LD_ADDR_VAR 0 1
 761: PUSH
 762: LD_VAR 0 1
 766: PPUSH
 767: CALL_OW 311
 771: ST_TO_ADDR
// targets_list := [ ] ;
 772: LD_ADDR_VAR 0 5
 776: PUSH
 777: EMPTY
 778: ST_TO_ADDR
// target := UnitFilter ( enemy_list , [ [ f_lives , 250 ] , [ f_not , [ f_weapon , us_cargo_bay ] ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 779: LD_ADDR_VAR 0 4
 783: PUSH
 784: LD_VAR 0 2
 788: PPUSH
 789: LD_INT 24
 791: PUSH
 792: LD_INT 250
 794: PUSH
 795: EMPTY
 796: LIST
 797: LIST
 798: PUSH
 799: LD_INT 3
 801: PUSH
 802: LD_INT 34
 804: PUSH
 805: LD_INT 12
 807: PUSH
 808: EMPTY
 809: LIST
 810: LIST
 811: PUSH
 812: EMPTY
 813: LIST
 814: LIST
 815: PUSH
 816: LD_INT 21
 818: PUSH
 819: LD_INT 2
 821: PUSH
 822: EMPTY
 823: LIST
 824: LIST
 825: PUSH
 826: LD_INT 58
 828: PUSH
 829: EMPTY
 830: LIST
 831: PUSH
 832: EMPTY
 833: LIST
 834: LIST
 835: LIST
 836: LIST
 837: PPUSH
 838: CALL_OW 72
 842: ST_TO_ADDR
// if GetDistUnits ( NearestUnitToUnit ( target , unit ) , unit ) < 11 and not IsInUnit ( unit ) then
 843: LD_VAR 0 4
 847: PPUSH
 848: LD_VAR 0 1
 852: PPUSH
 853: CALL_OW 74
 857: PPUSH
 858: LD_VAR 0 1
 862: PPUSH
 863: CALL_OW 296
 867: PUSH
 868: LD_INT 11
 870: LESS
 871: PUSH
 872: LD_VAR 0 1
 876: PPUSH
 877: CALL_OW 310
 881: NOT
 882: AND
 883: IFFALSE 911
// begin ComEnterUnit ( unit , NearestUnitToUnit ( target , unit ) ) ;
 885: LD_VAR 0 1
 889: PPUSH
 890: LD_VAR 0 4
 894: PPUSH
 895: LD_VAR 0 1
 899: PPUSH
 900: CALL_OW 74
 904: PPUSH
 905: CALL_OW 120
// exit ;
 909: GO 1189
// end ; targets_list := [ UnitFilter ( enemy_list , [ [ f_type , unit_human ] , [ f_not , [ f_inside ] ] ] ) , UnitFilter ( enemy_list , [ f_type , unit_vehicle ] ) , UnitFilter ( enemy_list , [ [ f_type , unit_building ] , [ f_not , [ f_empty ] ] ] ) , enemy_list ] ;
 911: LD_ADDR_VAR 0 5
 915: PUSH
 916: LD_VAR 0 2
 920: PPUSH
 921: LD_INT 21
 923: PUSH
 924: LD_INT 1
 926: PUSH
 927: EMPTY
 928: LIST
 929: LIST
 930: PUSH
 931: LD_INT 3
 933: PUSH
 934: LD_INT 54
 936: PUSH
 937: EMPTY
 938: LIST
 939: PUSH
 940: EMPTY
 941: LIST
 942: LIST
 943: PUSH
 944: EMPTY
 945: LIST
 946: LIST
 947: PPUSH
 948: CALL_OW 72
 952: PUSH
 953: LD_VAR 0 2
 957: PPUSH
 958: LD_INT 21
 960: PUSH
 961: LD_INT 2
 963: PUSH
 964: EMPTY
 965: LIST
 966: LIST
 967: PPUSH
 968: CALL_OW 72
 972: PUSH
 973: LD_VAR 0 2
 977: PPUSH
 978: LD_INT 21
 980: PUSH
 981: LD_INT 3
 983: PUSH
 984: EMPTY
 985: LIST
 986: LIST
 987: PUSH
 988: LD_INT 3
 990: PUSH
 991: LD_INT 58
 993: PUSH
 994: EMPTY
 995: LIST
 996: PUSH
 997: EMPTY
 998: LIST
 999: LIST
1000: PUSH
1001: EMPTY
1002: LIST
1003: LIST
1004: PPUSH
1005: CALL_OW 72
1009: PUSH
1010: LD_VAR 0 2
1014: PUSH
1015: EMPTY
1016: LIST
1017: LIST
1018: LIST
1019: LIST
1020: ST_TO_ADDR
// for target in targets_list do
1021: LD_ADDR_VAR 0 4
1025: PUSH
1026: LD_VAR 0 5
1030: PUSH
1031: FOR_IN
1032: IFFALSE 1187
// begin if target then
1034: LD_VAR 0 4
1038: IFFALSE 1185
// if GetTag ( unit ) = 11 and ( GetType ( NearestUnitToUnit ( target , unit ) ) = unit_building or GetWeapon ( NearestUnitToUnit ( target , unit ) ) = us_cargo_bay ) then
1040: LD_VAR 0 1
1044: PPUSH
1045: CALL_OW 110
1049: PUSH
1050: LD_INT 11
1052: EQUAL
1053: PUSH
1054: LD_VAR 0 4
1058: PPUSH
1059: LD_VAR 0 1
1063: PPUSH
1064: CALL_OW 74
1068: PPUSH
1069: CALL_OW 247
1073: PUSH
1074: LD_INT 3
1076: EQUAL
1077: PUSH
1078: LD_VAR 0 4
1082: PPUSH
1083: LD_VAR 0 1
1087: PPUSH
1088: CALL_OW 74
1092: PPUSH
1093: CALL_OW 264
1097: PUSH
1098: LD_INT 12
1100: EQUAL
1101: OR
1102: AND
1103: IFFALSE 1149
// begin ComPlaceDelayedCharge ( unit , 0 , 0 , NearestUnitToUnit ( target , unit ) ) ;
1105: LD_VAR 0 1
1109: PPUSH
1110: LD_INT 0
1112: PPUSH
1113: LD_INT 0
1115: PPUSH
1116: LD_VAR 0 4
1120: PPUSH
1121: LD_VAR 0 1
1125: PPUSH
1126: CALL_OW 74
1130: PPUSH
1131: CALL_OW 132
// SetTag ( unit , 0 ) ;
1135: LD_VAR 0 1
1139: PPUSH
1140: LD_INT 0
1142: PPUSH
1143: CALL_OW 109
// end else
1147: GO 1185
// if not HasTask ( unit ) then
1149: LD_VAR 0 1
1153: PPUSH
1154: CALL_OW 314
1158: NOT
1159: IFFALSE 1185
// ComAttackUnit ( unit , NearestUnitToUnit ( target , unit ) ) ;
1161: LD_VAR 0 1
1165: PPUSH
1166: LD_VAR 0 4
1170: PPUSH
1171: LD_VAR 0 1
1175: PPUSH
1176: CALL_OW 74
1180: PPUSH
1181: CALL_OW 115
// end ;
1185: GO 1031
1187: POP
1188: POP
// end ; end_of_file
1189: LD_VAR 0 3
1193: RET
// export JMM , Gladstone , Harrison , Denis , Brown , Donaldson , Lisa , Frank , Bobby , Cyrus ; export others ; export function PrepareAmericans ; var i , points , veh , tmp ; begin
1194: LD_INT 0
1196: PPUSH
1197: PPUSH
1198: PPUSH
1199: PPUSH
1200: PPUSH
// uc_nation := 1 ;
1201: LD_ADDR_OWVAR 21
1205: PUSH
1206: LD_INT 1
1208: ST_TO_ADDR
// uc_side := 4 ;
1209: LD_ADDR_OWVAR 20
1213: PUSH
1214: LD_INT 4
1216: ST_TO_ADDR
// Denis := PrepareUnit ( Denis , false ,  ) ;
1217: LD_ADDR_EXP 19
1221: PUSH
1222: LD_STRING Denis
1224: PPUSH
1225: LD_INT 0
1227: PPUSH
1228: LD_STRING 
1230: PPUSH
1231: CALL 25178 0 3
1235: ST_TO_ADDR
// Harrison := PrepareUnit ( Harisson , false ,  ) ;
1236: LD_ADDR_EXP 18
1240: PUSH
1241: LD_STRING Harisson
1243: PPUSH
1244: LD_INT 0
1246: PPUSH
1247: LD_STRING 
1249: PPUSH
1250: CALL 25178 0 3
1254: ST_TO_ADDR
// uc_side := 1 ;
1255: LD_ADDR_OWVAR 20
1259: PUSH
1260: LD_INT 1
1262: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debug ) , mission_prefix_prev ) ;
1263: LD_ADDR_EXP 16
1267: PUSH
1268: LD_STRING JMM
1270: PPUSH
1271: LD_EXP 1
1275: NOT
1276: PPUSH
1277: LD_EXP 3
1281: PPUSH
1282: CALL 25178 0 3
1286: ST_TO_ADDR
// Gladstone := PrepareUnit ( Gladstone , false , mission_prefix_prev ) ;
1287: LD_ADDR_EXP 17
1291: PUSH
1292: LD_STRING Gladstone
1294: PPUSH
1295: LD_INT 0
1297: PPUSH
1298: LD_EXP 3
1302: PPUSH
1303: CALL 25178 0 3
1307: ST_TO_ADDR
// if LoadVariable ( BrownInDelta , debug ) then
1308: LD_STRING BrownInDelta
1310: PPUSH
1311: LD_EXP 1
1315: PPUSH
1316: CALL_OW 30
1320: IFFALSE 1362
// begin Brown := PrepareUnit ( Brown , ( not debug ) , mission_prefix_prev ) ;
1322: LD_ADDR_EXP 20
1326: PUSH
1327: LD_STRING Brown
1329: PPUSH
1330: LD_EXP 1
1334: NOT
1335: PPUSH
1336: LD_EXP 3
1340: PPUSH
1341: CALL 25178 0 3
1345: ST_TO_ADDR
// tmp := tmp ^ Brown ;
1346: LD_ADDR_VAR 0 5
1350: PUSH
1351: LD_VAR 0 5
1355: PUSH
1356: LD_EXP 20
1360: ADD
1361: ST_TO_ADDR
// end ; if LoadVariable ( DonaldsonInDelta , debug ) then
1362: LD_STRING DonaldsonInDelta
1364: PPUSH
1365: LD_EXP 1
1369: PPUSH
1370: CALL_OW 30
1374: IFFALSE 1416
// begin Donaldson := PrepareUnit ( Donaldson , ( not debug ) , mission_prefix_prev ) ;
1376: LD_ADDR_EXP 21
1380: PUSH
1381: LD_STRING Donaldson
1383: PPUSH
1384: LD_EXP 1
1388: NOT
1389: PPUSH
1390: LD_EXP 3
1394: PPUSH
1395: CALL 25178 0 3
1399: ST_TO_ADDR
// tmp := tmp ^ Donaldson ;
1400: LD_ADDR_VAR 0 5
1404: PUSH
1405: LD_VAR 0 5
1409: PUSH
1410: LD_EXP 21
1414: ADD
1415: ST_TO_ADDR
// end ; if LoadVariable ( LisaInDelta , debug ) then
1416: LD_STRING LisaInDelta
1418: PPUSH
1419: LD_EXP 1
1423: PPUSH
1424: CALL_OW 30
1428: IFFALSE 1470
// begin Lisa := PrepareUnit ( Lisa , ( not debug ) , mission_prefix_prev ) ;
1430: LD_ADDR_EXP 22
1434: PUSH
1435: LD_STRING Lisa
1437: PPUSH
1438: LD_EXP 1
1442: NOT
1443: PPUSH
1444: LD_EXP 3
1448: PPUSH
1449: CALL 25178 0 3
1453: ST_TO_ADDR
// tmp := tmp ^ Lisa ;
1454: LD_ADDR_VAR 0 5
1458: PUSH
1459: LD_VAR 0 5
1463: PUSH
1464: LD_EXP 22
1468: ADD
1469: ST_TO_ADDR
// end ; if LoadVariable ( FrankInDelta , debug ) then
1470: LD_STRING FrankInDelta
1472: PPUSH
1473: LD_EXP 1
1477: PPUSH
1478: CALL_OW 30
1482: IFFALSE 1524
// begin Frank := PrepareUnit ( Frank , ( not debug ) , mission_prefix_prev ) ;
1484: LD_ADDR_EXP 23
1488: PUSH
1489: LD_STRING Frank
1491: PPUSH
1492: LD_EXP 1
1496: NOT
1497: PPUSH
1498: LD_EXP 3
1502: PPUSH
1503: CALL 25178 0 3
1507: ST_TO_ADDR
// tmp := tmp ^ Frank ;
1508: LD_ADDR_VAR 0 5
1512: PUSH
1513: LD_VAR 0 5
1517: PUSH
1518: LD_EXP 23
1522: ADD
1523: ST_TO_ADDR
// end ; if LoadVariable ( BobbyInDelta , 0 ) then
1524: LD_STRING BobbyInDelta
1526: PPUSH
1527: LD_INT 0
1529: PPUSH
1530: CALL_OW 30
1534: IFFALSE 1576
// begin Bobby := PrepareUnit ( Bobby , ( not debug ) , mission_prefix_prev ) ;
1536: LD_ADDR_EXP 24
1540: PUSH
1541: LD_STRING Bobby
1543: PPUSH
1544: LD_EXP 1
1548: NOT
1549: PPUSH
1550: LD_EXP 3
1554: PPUSH
1555: CALL 25178 0 3
1559: ST_TO_ADDR
// tmp := tmp ^ Bobby ;
1560: LD_ADDR_VAR 0 5
1564: PUSH
1565: LD_VAR 0 5
1569: PUSH
1570: LD_EXP 24
1574: ADD
1575: ST_TO_ADDR
// end ; if LoadVariable ( CyrusInDelta , 0 ) then
1576: LD_STRING CyrusInDelta
1578: PPUSH
1579: LD_INT 0
1581: PPUSH
1582: CALL_OW 30
1586: IFFALSE 1628
// begin Cyrus := PrepareUnit ( Cyrus , ( not debug ) , mission_prefix_prev ) ;
1588: LD_ADDR_EXP 25
1592: PUSH
1593: LD_STRING Cyrus
1595: PPUSH
1596: LD_EXP 1
1600: NOT
1601: PPUSH
1602: LD_EXP 3
1606: PPUSH
1607: CALL 25178 0 3
1611: ST_TO_ADDR
// tmp := tmp ^ Cyrus ;
1612: LD_ADDR_VAR 0 5
1616: PUSH
1617: LD_VAR 0 5
1621: PUSH
1622: LD_EXP 25
1626: ADD
1627: ST_TO_ADDR
// end ; others := CreateCharacterSet ( othersDelta ) ;
1628: LD_ADDR_EXP 26
1632: PUSH
1633: LD_STRING othersDelta
1635: PPUSH
1636: CALL_OW 31
1640: ST_TO_ADDR
// if not others and debug then
1641: LD_EXP 26
1645: NOT
1646: PUSH
1647: LD_EXP 1
1651: AND
1652: IFFALSE 1717
// begin InitHc ;
1654: CALL_OW 19
// for i = 1 to 2 do
1658: LD_ADDR_VAR 0 2
1662: PUSH
1663: DOUBLE
1664: LD_INT 1
1666: DEC
1667: ST_TO_ADDR
1668: LD_INT 2
1670: PUSH
1671: FOR_TO
1672: IFFALSE 1715
// begin PrepareHuman ( false , i mod 4 + 1 , 3 ) ;
1674: LD_INT 0
1676: PPUSH
1677: LD_VAR 0 2
1681: PUSH
1682: LD_INT 4
1684: MOD
1685: PUSH
1686: LD_INT 1
1688: PLUS
1689: PPUSH
1690: LD_INT 3
1692: PPUSH
1693: CALL_OW 380
// others := others ^ CreateHuman ;
1697: LD_ADDR_EXP 26
1701: PUSH
1702: LD_EXP 26
1706: PUSH
1707: CALL_OW 44
1711: ADD
1712: ST_TO_ADDR
// end ;
1713: GO 1671
1715: POP
1716: POP
// end ; if others then
1717: LD_EXP 26
1721: IFFALSE 1739
// tmp := tmp ^ others ;
1723: LD_ADDR_VAR 0 5
1727: PUSH
1728: LD_VAR 0 5
1732: PUSH
1733: LD_EXP 26
1737: ADD
1738: ST_TO_ADDR
// points := [ [ 28 , 49 ] , [ 33 , 54 ] , [ 38 , 56 ] ] ;
1739: LD_ADDR_VAR 0 3
1743: PUSH
1744: LD_INT 28
1746: PUSH
1747: LD_INT 49
1749: PUSH
1750: EMPTY
1751: LIST
1752: LIST
1753: PUSH
1754: LD_INT 33
1756: PUSH
1757: LD_INT 54
1759: PUSH
1760: EMPTY
1761: LIST
1762: LIST
1763: PUSH
1764: LD_INT 38
1766: PUSH
1767: LD_INT 56
1769: PUSH
1770: EMPTY
1771: LIST
1772: LIST
1773: PUSH
1774: EMPTY
1775: LIST
1776: LIST
1777: LIST
1778: ST_TO_ADDR
// veh := PrepareTank ( 1 , 1 , us_medium_wheeled , engine_solar , control_manual , us_cargo_bay , 80 ) ;
1779: LD_ADDR_VAR 0 4
1783: PUSH
1784: LD_INT 1
1786: PPUSH
1787: LD_INT 1
1789: PPUSH
1790: LD_INT 2
1792: PPUSH
1793: LD_INT 2
1795: PPUSH
1796: LD_INT 1
1798: PPUSH
1799: LD_INT 12
1801: PPUSH
1802: LD_INT 80
1804: PPUSH
1805: CALL 427 0 7
1809: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
1810: LD_VAR 0 4
1814: PPUSH
1815: LD_INT 1
1817: PPUSH
1818: CALL_OW 233
// PlaceUnitXY ( veh , points [ 1 ] [ 1 ] , points [ 1 ] [ 2 ] , false ) ;
1822: LD_VAR 0 4
1826: PPUSH
1827: LD_VAR 0 3
1831: PUSH
1832: LD_INT 1
1834: ARRAY
1835: PUSH
1836: LD_INT 1
1838: ARRAY
1839: PPUSH
1840: LD_VAR 0 3
1844: PUSH
1845: LD_INT 1
1847: ARRAY
1848: PUSH
1849: LD_INT 2
1851: ARRAY
1852: PPUSH
1853: LD_INT 0
1855: PPUSH
1856: CALL_OW 48
// SetCargo ( veh , mat_cans , 100 ) ;
1860: LD_VAR 0 4
1864: PPUSH
1865: LD_INT 1
1867: PPUSH
1868: LD_INT 100
1870: PPUSH
1871: CALL_OW 290
// PlaceHumanInUnit ( others [ 1 ] , veh ) ;
1875: LD_EXP 26
1879: PUSH
1880: LD_INT 1
1882: ARRAY
1883: PPUSH
1884: LD_VAR 0 4
1888: PPUSH
1889: CALL_OW 52
// veh := PrepareTank ( 1 , 1 , us_light_wheeled , engine_solar , control_manual , us_machine_gun , 80 ) ;
1893: LD_ADDR_VAR 0 4
1897: PUSH
1898: LD_INT 1
1900: PPUSH
1901: LD_INT 1
1903: PPUSH
1904: LD_INT 1
1906: PPUSH
1907: LD_INT 2
1909: PPUSH
1910: LD_INT 1
1912: PPUSH
1913: LD_INT 2
1915: PPUSH
1916: LD_INT 80
1918: PPUSH
1919: CALL 427 0 7
1923: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
1924: LD_VAR 0 4
1928: PPUSH
1929: LD_INT 1
1931: PPUSH
1932: CALL_OW 233
// PlaceUnitXY ( veh , points [ 2 ] [ 1 ] , points [ 2 ] [ 2 ] , false ) ;
1936: LD_VAR 0 4
1940: PPUSH
1941: LD_VAR 0 3
1945: PUSH
1946: LD_INT 2
1948: ARRAY
1949: PUSH
1950: LD_INT 1
1952: ARRAY
1953: PPUSH
1954: LD_VAR 0 3
1958: PUSH
1959: LD_INT 2
1961: ARRAY
1962: PUSH
1963: LD_INT 2
1965: ARRAY
1966: PPUSH
1967: LD_INT 0
1969: PPUSH
1970: CALL_OW 48
// PlaceHumanInUnit ( Gladstone , veh ) ;
1974: LD_EXP 17
1978: PPUSH
1979: LD_VAR 0 4
1983: PPUSH
1984: CALL_OW 52
// veh := PrepareTank ( 1 , 1 , us_light_wheeled , engine_solar , control_manual , us_light_gun , 80 ) ;
1988: LD_ADDR_VAR 0 4
1992: PUSH
1993: LD_INT 1
1995: PPUSH
1996: LD_INT 1
1998: PPUSH
1999: LD_INT 1
2001: PPUSH
2002: LD_INT 2
2004: PPUSH
2005: LD_INT 1
2007: PPUSH
2008: LD_INT 3
2010: PPUSH
2011: LD_INT 80
2013: PPUSH
2014: CALL 427 0 7
2018: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
2019: LD_VAR 0 4
2023: PPUSH
2024: LD_INT 1
2026: PPUSH
2027: CALL_OW 233
// PlaceUnitXY ( veh , points [ 3 ] [ 1 ] , points [ 3 ] [ 2 ] , false ) ;
2031: LD_VAR 0 4
2035: PPUSH
2036: LD_VAR 0 3
2040: PUSH
2041: LD_INT 3
2043: ARRAY
2044: PUSH
2045: LD_INT 1
2047: ARRAY
2048: PPUSH
2049: LD_VAR 0 3
2053: PUSH
2054: LD_INT 3
2056: ARRAY
2057: PUSH
2058: LD_INT 2
2060: ARRAY
2061: PPUSH
2062: LD_INT 0
2064: PPUSH
2065: CALL_OW 48
// PlaceHumanInUnit ( JMM , veh ) ;
2069: LD_EXP 16
2073: PPUSH
2074: LD_VAR 0 4
2078: PPUSH
2079: CALL_OW 52
// for i in tmp diff others [ 1 ] do
2083: LD_ADDR_VAR 0 2
2087: PUSH
2088: LD_VAR 0 5
2092: PUSH
2093: LD_EXP 26
2097: PUSH
2098: LD_INT 1
2100: ARRAY
2101: DIFF
2102: PUSH
2103: FOR_IN
2104: IFFALSE 2123
// PlaceUnitArea ( i , startArea , false ) ;
2106: LD_VAR 0 2
2110: PPUSH
2111: LD_INT 5
2113: PPUSH
2114: LD_INT 0
2116: PPUSH
2117: CALL_OW 49
2121: GO 2103
2123: POP
2124: POP
// end ; end_of_file
2125: LD_VAR 0 1
2129: RET
// export function Action ; var m ; begin
2130: LD_INT 0
2132: PPUSH
2133: PPUSH
// InGameOn ;
2134: CALL_OW 8
// CenterNowOnXY ( 28 , 51 ) ;
2138: LD_INT 28
2140: PPUSH
2141: LD_INT 51
2143: PPUSH
2144: CALL_OW 86
// Wait ( 3 ) ;
2148: LD_INT 3
2150: PPUSH
2151: CALL_OW 67
// Say ( JMM , D1d-JMM-1a ) ;
2155: LD_EXP 16
2159: PPUSH
2160: LD_STRING D1d-JMM-1a
2162: PPUSH
2163: CALL_OW 88
// SayRadio ( Harrison , D1d-Har-1 ) ;
2167: LD_EXP 18
2171: PPUSH
2172: LD_STRING D1d-Har-1
2174: PPUSH
2175: CALL_OW 94
// InGameOff ;
2179: CALL_OW 9
// SaveForQuickRestart ;
2183: CALL_OW 22
// ChangeMissionObjectives ( M1 ) ;
2187: LD_STRING M1
2189: PPUSH
2190: CALL_OW 337
// Wait ( 0 0$2 ) ;
2194: LD_INT 70
2196: PPUSH
2197: CALL_OW 67
// Say ( JMM , D2-JMM-1 ) ;
2201: LD_EXP 16
2205: PPUSH
2206: LD_STRING D2-JMM-1
2208: PPUSH
2209: CALL_OW 88
// Say ( Gladstone , D2-Glad-1 ) ;
2213: LD_EXP 17
2217: PPUSH
2218: LD_STRING D2-Glad-1
2220: PPUSH
2221: CALL_OW 88
// Say ( JMM , D2-JMM-2 ) ;
2225: LD_EXP 16
2229: PPUSH
2230: LD_STRING D2-JMM-2
2232: PPUSH
2233: CALL_OW 88
// Say ( Gladstone , D2-Glad-2 ) ;
2237: LD_EXP 17
2241: PPUSH
2242: LD_STRING D2-Glad-2
2244: PPUSH
2245: CALL_OW 88
// Say ( JMM , D2-JMM-3 ) ;
2249: LD_EXP 16
2253: PPUSH
2254: LD_STRING D2-JMM-3
2256: PPUSH
2257: CALL_OW 88
// Wait ( rand ( 0 0$30 , 1 1$00 ) ) ;
2261: LD_INT 1050
2263: PPUSH
2264: LD_INT 2100
2266: PPUSH
2267: CALL_OW 12
2271: PPUSH
2272: CALL_OW 67
// SetWeather ( 1 , 570 , 350 ) ;
2276: LD_INT 1
2278: PPUSH
2279: LD_INT 570
2281: PPUSH
2282: LD_INT 350
2284: PPUSH
2285: CALL_OW 550
// Wait ( rand ( 3 3$00 , 5 5$00 ) ) ;
2289: LD_INT 6300
2291: PPUSH
2292: LD_INT 10500
2294: PPUSH
2295: CALL_OW 12
2299: PPUSH
2300: CALL_OW 67
// SetWeather ( 0 , 570 , 350 ) ;
2304: LD_INT 0
2306: PPUSH
2307: LD_INT 570
2309: PPUSH
2310: LD_INT 350
2312: PPUSH
2313: CALL_OW 550
// end ;
2317: LD_VAR 0 1
2321: RET
// every 0 0$01 trigger FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_not , [ f_constructed ] ] , [ f_btype , b_depot ] ] ] ) and not deltaBuilded do
2322: LD_INT 22
2324: PUSH
2325: LD_INT 1
2327: PUSH
2328: EMPTY
2329: LIST
2330: LIST
2331: PUSH
2332: LD_INT 3
2334: PUSH
2335: LD_INT 57
2337: PUSH
2338: EMPTY
2339: LIST
2340: PUSH
2341: EMPTY
2342: LIST
2343: LIST
2344: PUSH
2345: LD_INT 30
2347: PUSH
2348: LD_INT 0
2350: PUSH
2351: EMPTY
2352: LIST
2353: LIST
2354: PUSH
2355: EMPTY
2356: LIST
2357: LIST
2358: LIST
2359: PUSH
2360: EMPTY
2361: LIST
2362: PPUSH
2363: CALL_OW 69
2367: PUSH
2368: LD_EXP 4
2372: NOT
2373: AND
2374: IFFALSE 2387
2376: GO 2378
2378: DISABLE
// begin deltaBuilded := true ;
2379: LD_ADDR_EXP 4
2383: PUSH
2384: LD_INT 1
2386: ST_TO_ADDR
// end ;
2387: END
// every 0 0$01 trigger not Delta and deltaBuilded and FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_not , [ f_constructed ] ] , [ f_btype , b_depot ] ] ] ) do
2388: LD_EXP 6
2392: NOT
2393: PUSH
2394: LD_EXP 4
2398: AND
2399: PUSH
2400: LD_INT 22
2402: PUSH
2403: LD_INT 1
2405: PUSH
2406: EMPTY
2407: LIST
2408: LIST
2409: PUSH
2410: LD_INT 3
2412: PUSH
2413: LD_INT 57
2415: PUSH
2416: EMPTY
2417: LIST
2418: PUSH
2419: EMPTY
2420: LIST
2421: LIST
2422: PUSH
2423: LD_INT 30
2425: PUSH
2426: LD_INT 0
2428: PUSH
2429: EMPTY
2430: LIST
2431: LIST
2432: PUSH
2433: EMPTY
2434: LIST
2435: LIST
2436: LIST
2437: PUSH
2438: EMPTY
2439: LIST
2440: PPUSH
2441: CALL_OW 69
2445: AND
2446: IFFALSE 2532
2448: GO 2450
2450: DISABLE
// begin enable ;
2451: ENABLE
// SetRestrict ( b_depot , 1 , state_disabled ) ;
2452: LD_INT 0
2454: PPUSH
2455: LD_INT 1
2457: PPUSH
2458: LD_INT 0
2460: PPUSH
2461: CALL_OW 324
// Delta := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_not , [ f_constructed ] ] , [ f_btype , b_depot ] ] ] ) [ 1 ] ;
2465: LD_ADDR_EXP 6
2469: PUSH
2470: LD_INT 22
2472: PUSH
2473: LD_INT 1
2475: PUSH
2476: EMPTY
2477: LIST
2478: LIST
2479: PUSH
2480: LD_INT 3
2482: PUSH
2483: LD_INT 57
2485: PUSH
2486: EMPTY
2487: LIST
2488: PUSH
2489: EMPTY
2490: LIST
2491: LIST
2492: PUSH
2493: LD_INT 30
2495: PUSH
2496: LD_INT 0
2498: PUSH
2499: EMPTY
2500: LIST
2501: LIST
2502: PUSH
2503: EMPTY
2504: LIST
2505: LIST
2506: LIST
2507: PUSH
2508: EMPTY
2509: LIST
2510: PPUSH
2511: CALL_OW 69
2515: PUSH
2516: LD_INT 1
2518: ARRAY
2519: ST_TO_ADDR
// SetBName ( Delta , Delta ) ;
2520: LD_EXP 6
2524: PPUSH
2525: LD_STRING Delta
2527: PPUSH
2528: CALL_OW 500
// end ;
2532: END
// every 0 0$2 trigger GetTech ( tech_ApeLang , 1 ) = state_researched and IsOk ( Gladstone ) do
2533: LD_INT 1
2535: PPUSH
2536: LD_INT 1
2538: PPUSH
2539: CALL_OW 321
2543: PUSH
2544: LD_INT 2
2546: EQUAL
2547: PUSH
2548: LD_EXP 17
2552: PPUSH
2553: CALL_OW 302
2557: AND
2558: IFFALSE 2619
2560: GO 2562
2562: DISABLE
// begin DialogueOn ;
2563: CALL_OW 6
// Say ( Gladstone , D3-Glad-1 ) ;
2567: LD_EXP 17
2571: PPUSH
2572: LD_STRING D3-Glad-1
2574: PPUSH
2575: CALL_OW 88
// Say ( JMM , D3-JMM-1 ) ;
2579: LD_EXP 16
2583: PPUSH
2584: LD_STRING D3-JMM-1
2586: PPUSH
2587: CALL_OW 88
// Say ( Gladstone , D3-Glad-2 ) ;
2591: LD_EXP 17
2595: PPUSH
2596: LD_STRING D3-Glad-2
2598: PPUSH
2599: CALL_OW 88
// Say ( JMM , D3-JMM-2 ) ;
2603: LD_EXP 16
2607: PPUSH
2608: LD_STRING D3-JMM-2
2610: PPUSH
2611: CALL_OW 88
// DialogueOff ;
2615: CALL_OW 7
// end ;
2619: END
// every 0 0$1 trigger GetTech ( tech_ApePsych , 1 ) = state_researched do var sol ;
2620: LD_INT 2
2622: PPUSH
2623: LD_INT 1
2625: PPUSH
2626: CALL_OW 321
2630: PUSH
2631: LD_INT 2
2633: EQUAL
2634: IFFALSE 2811
2636: GO 2638
2638: DISABLE
2639: LD_INT 0
2641: PPUSH
// begin DialogueOn ;
2642: CALL_OW 6
// if Frank then
2646: LD_EXP 23
2650: IFFALSE 2664
// Say ( Frank , D8a-Frank-1 ) ;
2652: LD_EXP 23
2656: PPUSH
2657: LD_STRING D8a-Frank-1
2659: PPUSH
2660: CALL_OW 88
// sol := SayX ( UnitFilter ( others , [ f_sex , sex_male ] ) , D8a-Sol1-1 ) ;
2664: LD_ADDR_VAR 0 1
2668: PUSH
2669: LD_EXP 26
2673: PPUSH
2674: LD_INT 26
2676: PUSH
2677: LD_INT 1
2679: PUSH
2680: EMPTY
2681: LIST
2682: LIST
2683: PPUSH
2684: CALL_OW 72
2688: PPUSH
2689: LD_STRING D8a-Sol1-1
2691: PPUSH
2692: CALL 515 0 2
2696: ST_TO_ADDR
// if Denis and GetSide ( Denis ) = 1 then
2697: LD_EXP 19
2701: PUSH
2702: LD_EXP 19
2706: PPUSH
2707: CALL_OW 255
2711: PUSH
2712: LD_INT 1
2714: EQUAL
2715: AND
2716: IFFALSE 2730
// Say ( Denis , D8a-Den-1 ) ;
2718: LD_EXP 19
2722: PPUSH
2723: LD_STRING D8a-Den-1
2725: PPUSH
2726: CALL_OW 88
// if sol or Denis or Frank then
2730: LD_VAR 0 1
2734: PUSH
2735: LD_EXP 19
2739: OR
2740: PUSH
2741: LD_EXP 23
2745: OR
2746: IFFALSE 2807
// begin SayX ( UnitFilter ( others , [ [ f_class , 4 ] , [ f_sex , sex_male ] ] ) diff sol , D8a-Sci1-1 ) ;
2748: LD_EXP 26
2752: PPUSH
2753: LD_INT 25
2755: PUSH
2756: LD_INT 4
2758: PUSH
2759: EMPTY
2760: LIST
2761: LIST
2762: PUSH
2763: LD_INT 26
2765: PUSH
2766: LD_INT 1
2768: PUSH
2769: EMPTY
2770: LIST
2771: LIST
2772: PUSH
2773: EMPTY
2774: LIST
2775: LIST
2776: PPUSH
2777: CALL_OW 72
2781: PUSH
2782: LD_VAR 0 1
2786: DIFF
2787: PPUSH
2788: LD_STRING D8a-Sci1-1
2790: PPUSH
2791: CALL 515 0 2
// Say ( JMM , D8a-JMM-1 ) ;
2795: LD_EXP 16
2799: PPUSH
2800: LD_STRING D8a-JMM-1
2802: PPUSH
2803: CALL_OW 88
// end ; DialogueOff ;
2807: CALL_OW 7
// end ;
2811: PPOPN 1
2813: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_apeman_engineer ] ] ) do
2814: LD_INT 22
2816: PUSH
2817: LD_INT 1
2819: PUSH
2820: EMPTY
2821: LIST
2822: LIST
2823: PUSH
2824: LD_INT 25
2826: PUSH
2827: LD_INT 16
2829: PUSH
2830: EMPTY
2831: LIST
2832: LIST
2833: PUSH
2834: EMPTY
2835: LIST
2836: LIST
2837: PPUSH
2838: CALL_OW 69
2842: IFFALSE 2901
2844: GO 2846
2846: DISABLE
// begin ChangeMissionObjectives ( M1a ) ;
2847: LD_STRING M1a
2849: PPUSH
2850: CALL_OW 337
// case Query ( Q2 ) of 1 :
2854: LD_STRING Q2
2856: PPUSH
2857: CALL_OW 97
2861: PUSH
2862: LD_INT 1
2864: DOUBLE
2865: EQUAL
2866: IFTRUE 2870
2868: GO 2881
2870: POP
// end_mission := true ; 2 :
2871: LD_ADDR_EXP 14
2875: PUSH
2876: LD_INT 1
2878: ST_TO_ADDR
2879: GO 2901
2881: LD_INT 2
2883: DOUBLE
2884: EQUAL
2885: IFTRUE 2889
2887: GO 2900
2889: POP
// end_the_mission_allowed := true ; end ;
2890: LD_ADDR_OWVAR 57
2894: PUSH
2895: LD_INT 1
2897: ST_TO_ADDR
2898: GO 2901
2900: POP
// end ;
2901: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) and Delta do
2902: LD_INT 22
2904: PUSH
2905: LD_INT 1
2907: PUSH
2908: EMPTY
2909: LIST
2910: LIST
2911: PUSH
2912: LD_INT 2
2914: PUSH
2915: LD_INT 30
2917: PUSH
2918: LD_INT 6
2920: PUSH
2921: EMPTY
2922: LIST
2923: LIST
2924: PUSH
2925: LD_INT 30
2927: PUSH
2928: LD_INT 7
2930: PUSH
2931: EMPTY
2932: LIST
2933: LIST
2934: PUSH
2935: EMPTY
2936: LIST
2937: LIST
2938: LIST
2939: PUSH
2940: EMPTY
2941: LIST
2942: LIST
2943: PPUSH
2944: CALL_OW 69
2948: PUSH
2949: LD_INT 22
2951: PUSH
2952: LD_INT 1
2954: PUSH
2955: EMPTY
2956: LIST
2957: LIST
2958: PUSH
2959: LD_INT 2
2961: PUSH
2962: LD_INT 30
2964: PUSH
2965: LD_INT 2
2967: PUSH
2968: EMPTY
2969: LIST
2970: LIST
2971: PUSH
2972: LD_INT 30
2974: PUSH
2975: LD_INT 3
2977: PUSH
2978: EMPTY
2979: LIST
2980: LIST
2981: PUSH
2982: EMPTY
2983: LIST
2984: LIST
2985: LIST
2986: PUSH
2987: EMPTY
2988: LIST
2989: LIST
2990: PPUSH
2991: CALL_OW 69
2995: AND
2996: PUSH
2997: LD_EXP 6
3001: AND
3002: IFFALSE 3513
3004: GO 3006
3006: DISABLE
// begin Wait ( rand ( 0 0$30 , 0 0$50 ) ) ;
3007: LD_INT 1050
3009: PPUSH
3010: LD_INT 1750
3012: PPUSH
3013: CALL_OW 12
3017: PPUSH
3018: CALL_OW 67
// PlaceUnitArea ( Denis , [ denisArea1 , denisArea2 , denisArea3 ] [ Difficulty ] , false ) ;
3022: LD_EXP 19
3026: PPUSH
3027: LD_INT 6
3029: PUSH
3030: LD_INT 9
3032: PUSH
3033: LD_INT 10
3035: PUSH
3036: EMPTY
3037: LIST
3038: LIST
3039: LIST
3040: PUSH
3041: LD_OWVAR 67
3045: ARRAY
3046: PPUSH
3047: LD_INT 0
3049: PPUSH
3050: CALL_OW 49
// ComHold ( Denis ) ;
3054: LD_EXP 19
3058: PPUSH
3059: CALL_OW 140
// InGameOn ;
3063: CALL_OW 8
// DialogueOn ;
3067: CALL_OW 6
// if Delta then
3071: LD_EXP 6
3075: IFFALSE 3088
// CenterNowOnUnits ( Delta ) else
3077: LD_EXP 6
3081: PPUSH
3082: CALL_OW 87
3086: GO 3097
// CenterNowOnUnits ( JMM ) ;
3088: LD_EXP 16
3092: PPUSH
3093: CALL_OW 87
// SayRadio ( Denis , DD-Den-1 ) ;
3097: LD_EXP 19
3101: PPUSH
3102: LD_STRING DD-Den-1
3104: PPUSH
3105: CALL_OW 94
// Say ( JMM , DD-JMM-1 ) ;
3109: LD_EXP 16
3113: PPUSH
3114: LD_STRING DD-JMM-1
3116: PPUSH
3117: CALL_OW 88
// SayRadio ( Denis , DD-Den-2 ) ;
3121: LD_EXP 19
3125: PPUSH
3126: LD_STRING DD-Den-2
3128: PPUSH
3129: CALL_OW 94
// Wait ( 3 ) ;
3133: LD_INT 3
3135: PPUSH
3136: CALL_OW 67
// DialogueOff ;
3140: CALL_OW 7
// InGameOff ;
3144: CALL_OW 9
// if Difficulty = 1 then
3148: LD_OWVAR 67
3152: PUSH
3153: LD_INT 1
3155: EQUAL
3156: IFFALSE 3232
// begin PlaceSeeing ( GetX ( Denis ) , GetY ( Denis ) , 1 , - 12 ) ;
3158: LD_EXP 19
3162: PPUSH
3163: CALL_OW 250
3167: PPUSH
3168: LD_EXP 19
3172: PPUSH
3173: CALL_OW 251
3177: PPUSH
3178: LD_INT 1
3180: PPUSH
3181: LD_INT 12
3183: NEG
3184: PPUSH
3185: CALL_OW 330
// CenterNowOnUnits ( Denis ) ;
3189: LD_EXP 19
3193: PPUSH
3194: CALL_OW 87
// wait ( 0 0$5 ) ;
3198: LD_INT 175
3200: PPUSH
3201: CALL_OW 67
// RemoveSeeing ( GetX ( Denis ) , GetY ( Denis ) , 1 ) ;
3205: LD_EXP 19
3209: PPUSH
3210: CALL_OW 250
3214: PPUSH
3215: LD_EXP 19
3219: PPUSH
3220: CALL_OW 251
3224: PPUSH
3225: LD_INT 1
3227: PPUSH
3228: CALL_OW 331
// end ; repeat wait ( 0 0$01 ) ;
3232: LD_INT 35
3234: PPUSH
3235: CALL_OW 67
// until See ( 1 , Denis ) or IsDead ( Denis ) ;
3239: LD_INT 1
3241: PPUSH
3242: LD_EXP 19
3246: PPUSH
3247: CALL_OW 292
3251: PUSH
3252: LD_EXP 19
3256: PPUSH
3257: CALL_OW 301
3261: OR
3262: IFFALSE 3232
// if IsDead ( Denis ) then
3264: LD_EXP 19
3268: PPUSH
3269: CALL_OW 301
3273: IFFALSE 3277
// exit ;
3275: GO 3513
// SetSide ( Denis , 1 ) ;
3277: LD_EXP 19
3281: PPUSH
3282: LD_INT 1
3284: PPUSH
3285: CALL_OW 235
// Say ( Denis , DD-Den-2a ) ;
3289: LD_EXP 19
3293: PPUSH
3294: LD_STRING DD-Den-2a
3296: PPUSH
3297: CALL_OW 88
// repeat wait ( 0 0$01 ) ;
3301: LD_INT 35
3303: PPUSH
3304: CALL_OW 67
// until GetBType ( IsInUnit ( Denis ) ) in [ b_lab , b_lab_half , b_lab_full ] or IsDead ( Denis ) ;
3308: LD_EXP 19
3312: PPUSH
3313: CALL_OW 310
3317: PPUSH
3318: CALL_OW 266
3322: PUSH
3323: LD_INT 6
3325: PUSH
3326: LD_INT 7
3328: PUSH
3329: LD_INT 8
3331: PUSH
3332: EMPTY
3333: LIST
3334: LIST
3335: LIST
3336: IN
3337: PUSH
3338: LD_EXP 19
3342: PPUSH
3343: CALL_OW 301
3347: OR
3348: IFFALSE 3301
// if IsDead ( Denis ) then
3350: LD_EXP 19
3354: PPUSH
3355: CALL_OW 301
3359: IFFALSE 3363
// exit ;
3361: GO 3513
// Say ( Denis , DD-Den-2b ) ;
3363: LD_EXP 19
3367: PPUSH
3368: LD_STRING DD-Den-2b
3370: PPUSH
3371: CALL_OW 88
// ComChangeProfession ( Denis , 4 ) ;
3375: LD_EXP 19
3379: PPUSH
3380: LD_INT 4
3382: PPUSH
3383: CALL_OW 123
// Wait ( 0 0$02 ) ;
3387: LD_INT 70
3389: PPUSH
3390: CALL_OW 67
// DialogueOn ;
3394: CALL_OW 6
// CenterNowOnUnits ( Denis ) ;
3398: LD_EXP 19
3402: PPUSH
3403: CALL_OW 87
// Say ( JMM , D4-JMM-1 ) ;
3407: LD_EXP 16
3411: PPUSH
3412: LD_STRING D4-JMM-1
3414: PPUSH
3415: CALL_OW 88
// Say ( Denis , D4-Den-1 ) ;
3419: LD_EXP 19
3423: PPUSH
3424: LD_STRING D4-Den-1
3426: PPUSH
3427: CALL_OW 88
// Say ( JMM , D4-JMM-2 ) ;
3431: LD_EXP 16
3435: PPUSH
3436: LD_STRING D4-JMM-2
3438: PPUSH
3439: CALL_OW 88
// Say ( Denis , D4-Den-2 ) ;
3443: LD_EXP 19
3447: PPUSH
3448: LD_STRING D4-Den-2
3450: PPUSH
3451: CALL_OW 88
// DialogueOff ;
3455: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
3459: LD_STRING M2
3461: PPUSH
3462: CALL_OW 337
// radar_allowed := true ;
3466: LD_ADDR_EXP 7
3470: PUSH
3471: LD_INT 1
3473: ST_TO_ADDR
// SetTech ( tech_radar , 1 , state_enabled ) ;
3474: LD_INT 6
3476: PPUSH
3477: LD_INT 1
3479: PPUSH
3480: LD_INT 1
3482: PPUSH
3483: CALL_OW 322
// SetRestrict ( b_lab_opto , 1 , state_enabled ) ;
3487: LD_INT 15
3489: PPUSH
3490: LD_INT 1
3492: PPUSH
3493: LD_INT 1
3495: PPUSH
3496: CALL_OW 324
// SetRestrict ( b_ext_radar , 1 , state_enabled ) ;
3500: LD_INT 20
3502: PPUSH
3503: LD_INT 1
3505: PPUSH
3506: LD_INT 1
3508: PPUSH
3509: CALL_OW 324
// end ;
3513: END
// every 0 0$1 trigger arab_spotted do var sol , sol2 ;
3514: LD_EXP 13
3518: IFFALSE 4141
3520: GO 3522
3522: DISABLE
3523: LD_INT 0
3525: PPUSH
3526: PPUSH
// begin sol := SayX ( UnitFilter ( others , [ f_sex , sex_male ] ) , D5-Sol1-1 ) ;
3527: LD_ADDR_VAR 0 1
3531: PUSH
3532: LD_EXP 26
3536: PPUSH
3537: LD_INT 26
3539: PUSH
3540: LD_INT 1
3542: PUSH
3543: EMPTY
3544: LIST
3545: LIST
3546: PPUSH
3547: CALL_OW 72
3551: PPUSH
3552: LD_STRING D5-Sol1-1
3554: PPUSH
3555: CALL 515 0 2
3559: ST_TO_ADDR
// if not sol then
3560: LD_VAR 0 1
3564: NOT
3565: IFFALSE 3569
// exit ;
3567: GO 4141
// repeat wait ( 0 0$01 ) ;
3569: LD_INT 35
3571: PPUSH
3572: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) = 0 ;
3576: LD_INT 22
3578: PUSH
3579: LD_INT 2
3581: PUSH
3582: EMPTY
3583: LIST
3584: LIST
3585: PUSH
3586: LD_INT 21
3588: PUSH
3589: LD_INT 1
3591: PUSH
3592: EMPTY
3593: LIST
3594: LIST
3595: PUSH
3596: EMPTY
3597: LIST
3598: LIST
3599: PPUSH
3600: CALL_OW 69
3604: PUSH
3605: LD_INT 0
3607: EQUAL
3608: IFFALSE 3569
// if IsOk ( sol ) then
3610: LD_VAR 0 1
3614: PPUSH
3615: CALL_OW 302
3619: IFFALSE 3639
// begin sol2 := others diff sol ;
3621: LD_ADDR_VAR 0 2
3625: PUSH
3626: LD_EXP 26
3630: PUSH
3631: LD_VAR 0 1
3635: DIFF
3636: ST_TO_ADDR
// end else
3637: GO 3641
// exit ;
3639: GO 4141
// if not Lisa and not sol2 then
3641: LD_EXP 22
3645: NOT
3646: PUSH
3647: LD_VAR 0 2
3651: NOT
3652: AND
3653: IFFALSE 3657
// exit ;
3655: GO 4141
// DialogueOn ;
3657: CALL_OW 6
// if Lisa then
3661: LD_EXP 22
3665: IFFALSE 3681
// Say ( Lisa , D5a-Lisa-1 ) else
3667: LD_EXP 22
3671: PPUSH
3672: LD_STRING D5a-Lisa-1
3674: PPUSH
3675: CALL_OW 88
3679: GO 3756
// if sol2 then
3681: LD_VAR 0 2
3685: IFFALSE 3756
// case GetSex ( sol2 [ 1 ] ) of sex_male :
3687: LD_VAR 0 2
3691: PUSH
3692: LD_INT 1
3694: ARRAY
3695: PPUSH
3696: CALL_OW 258
3700: PUSH
3701: LD_INT 1
3703: DOUBLE
3704: EQUAL
3705: IFTRUE 3709
3707: GO 3728
3709: POP
// Say ( sol2 [ 1 ] , D5-Sol2-1 ) ; sex_female :
3710: LD_VAR 0 2
3714: PUSH
3715: LD_INT 1
3717: ARRAY
3718: PPUSH
3719: LD_STRING D5-Sol2-1
3721: PPUSH
3722: CALL_OW 88
3726: GO 3756
3728: LD_INT 2
3730: DOUBLE
3731: EQUAL
3732: IFTRUE 3736
3734: GO 3755
3736: POP
// Say ( sol2 [ 1 ] , D5-FSol2-1 ) ; end ;
3737: LD_VAR 0 2
3741: PUSH
3742: LD_INT 1
3744: ARRAY
3745: PPUSH
3746: LD_STRING D5-FSol2-1
3748: PPUSH
3749: CALL_OW 88
3753: GO 3756
3755: POP
// Say ( sol , D5-Sol1-2 ) ;
3756: LD_VAR 0 1
3760: PPUSH
3761: LD_STRING D5-Sol1-2
3763: PPUSH
3764: CALL_OW 88
// if Lisa then
3768: LD_EXP 22
3772: IFFALSE 3788
// Say ( Lisa , D5a-Lisa-2 ) else
3774: LD_EXP 22
3778: PPUSH
3779: LD_STRING D5a-Lisa-2
3781: PPUSH
3782: CALL_OW 88
3786: GO 3863
// if sol2 then
3788: LD_VAR 0 2
3792: IFFALSE 3863
// case GetSex ( sol2 [ 1 ] ) of sex_male :
3794: LD_VAR 0 2
3798: PUSH
3799: LD_INT 1
3801: ARRAY
3802: PPUSH
3803: CALL_OW 258
3807: PUSH
3808: LD_INT 1
3810: DOUBLE
3811: EQUAL
3812: IFTRUE 3816
3814: GO 3835
3816: POP
// Say ( sol2 [ 1 ] , D5-Sol2-2 ) ; sex_female :
3817: LD_VAR 0 2
3821: PUSH
3822: LD_INT 1
3824: ARRAY
3825: PPUSH
3826: LD_STRING D5-Sol2-2
3828: PPUSH
3829: CALL_OW 88
3833: GO 3863
3835: LD_INT 2
3837: DOUBLE
3838: EQUAL
3839: IFTRUE 3843
3841: GO 3862
3843: POP
// Say ( sol2 [ 1 ] , D5-FSol2-2 ) ; end ;
3844: LD_VAR 0 2
3848: PUSH
3849: LD_INT 1
3851: ARRAY
3852: PPUSH
3853: LD_STRING D5-FSol2-2
3855: PPUSH
3856: CALL_OW 88
3860: GO 3863
3862: POP
// Say ( sol , D5a-Sol1-3 ) ;
3863: LD_VAR 0 1
3867: PPUSH
3868: LD_STRING D5a-Sol1-3
3870: PPUSH
3871: CALL_OW 88
// if Lisa then
3875: LD_EXP 22
3879: IFFALSE 3893
// Say ( Lisa , D5a-Lisa-3 ) ;
3881: LD_EXP 22
3885: PPUSH
3886: LD_STRING D5a-Lisa-3
3888: PPUSH
3889: CALL_OW 88
// if not sol2 then
3893: LD_VAR 0 2
3897: NOT
3898: IFFALSE 3906
// begin DialogueOff ;
3900: CALL_OW 7
// exit ;
3904: GO 4141
// end ; case GetSex ( sol2 [ 1 ] ) of sex_male :
3906: LD_VAR 0 2
3910: PUSH
3911: LD_INT 1
3913: ARRAY
3914: PPUSH
3915: CALL_OW 258
3919: PUSH
3920: LD_INT 1
3922: DOUBLE
3923: EQUAL
3924: IFTRUE 3928
3926: GO 3947
3928: POP
// Say ( sol2 [ 1 ] , D5-Sol2-3 ) ; sex_female :
3929: LD_VAR 0 2
3933: PUSH
3934: LD_INT 1
3936: ARRAY
3937: PPUSH
3938: LD_STRING D5-Sol2-3
3940: PPUSH
3941: CALL_OW 88
3945: GO 3975
3947: LD_INT 2
3949: DOUBLE
3950: EQUAL
3951: IFTRUE 3955
3953: GO 3974
3955: POP
// Say ( sol2 [ 1 ] , D5-FSol2-3 ) ; end ;
3956: LD_VAR 0 2
3960: PUSH
3961: LD_INT 1
3963: ARRAY
3964: PPUSH
3965: LD_STRING D5-FSol2-3
3967: PPUSH
3968: CALL_OW 88
3972: GO 3975
3974: POP
// Say ( sol , D5-Sol1-4 ) ;
3975: LD_VAR 0 1
3979: PPUSH
3980: LD_STRING D5-Sol1-4
3982: PPUSH
3983: CALL_OW 88
// case GetSex ( sol2 [ 1 ] ) of sex_male :
3987: LD_VAR 0 2
3991: PUSH
3992: LD_INT 1
3994: ARRAY
3995: PPUSH
3996: CALL_OW 258
4000: PUSH
4001: LD_INT 1
4003: DOUBLE
4004: EQUAL
4005: IFTRUE 4009
4007: GO 4028
4009: POP
// Say ( sol2 [ 1 ] , D5-Sol2-4 ) ; sex_female :
4010: LD_VAR 0 2
4014: PUSH
4015: LD_INT 1
4017: ARRAY
4018: PPUSH
4019: LD_STRING D5-Sol2-4
4021: PPUSH
4022: CALL_OW 88
4026: GO 4056
4028: LD_INT 2
4030: DOUBLE
4031: EQUAL
4032: IFTRUE 4036
4034: GO 4055
4036: POP
// Say ( sol2 [ 1 ] , D5-FSol2-4 ) ; end ;
4037: LD_VAR 0 2
4041: PUSH
4042: LD_INT 1
4044: ARRAY
4045: PPUSH
4046: LD_STRING D5-FSol2-4
4048: PPUSH
4049: CALL_OW 88
4053: GO 4056
4055: POP
// Say ( sol , D5-Sol1-5 ) ;
4056: LD_VAR 0 1
4060: PPUSH
4061: LD_STRING D5-Sol1-5
4063: PPUSH
4064: CALL_OW 88
// case GetSex ( sol2 [ 1 ] ) of sex_male :
4068: LD_VAR 0 2
4072: PUSH
4073: LD_INT 1
4075: ARRAY
4076: PPUSH
4077: CALL_OW 258
4081: PUSH
4082: LD_INT 1
4084: DOUBLE
4085: EQUAL
4086: IFTRUE 4090
4088: GO 4109
4090: POP
// Say ( sol2 [ 1 ] , D5-Sol2-5 ) ; sex_female :
4091: LD_VAR 0 2
4095: PUSH
4096: LD_INT 1
4098: ARRAY
4099: PPUSH
4100: LD_STRING D5-Sol2-5
4102: PPUSH
4103: CALL_OW 88
4107: GO 4137
4109: LD_INT 2
4111: DOUBLE
4112: EQUAL
4113: IFTRUE 4117
4115: GO 4136
4117: POP
// Say ( sol2 [ 1 ] , D5-FSol2-5 ) ; end ;
4118: LD_VAR 0 2
4122: PUSH
4123: LD_INT 1
4125: ARRAY
4126: PPUSH
4127: LD_STRING D5-FSol2-5
4129: PPUSH
4130: CALL_OW 88
4134: GO 4137
4136: POP
// DialogueOff ;
4137: CALL_OW 7
// end ;
4141: PPOPN 2
4143: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_apeman_engineer ] ] ) >= 5 do
4144: LD_INT 22
4146: PUSH
4147: LD_INT 1
4149: PUSH
4150: EMPTY
4151: LIST
4152: LIST
4153: PUSH
4154: LD_INT 25
4156: PUSH
4157: LD_INT 16
4159: PUSH
4160: EMPTY
4161: LIST
4162: LIST
4163: PUSH
4164: EMPTY
4165: LIST
4166: LIST
4167: PPUSH
4168: CALL_OW 69
4172: PUSH
4173: LD_INT 5
4175: GREATEREQUAL
4176: IFFALSE 4196
4178: GO 4180
4180: DISABLE
// begin ChangeMissionObjectives ( M1b ) ;
4181: LD_STRING M1b
4183: PPUSH
4184: CALL_OW 337
// apeman_army := true ;
4188: LD_ADDR_EXP 9
4192: PUSH
4193: LD_INT 1
4195: ST_TO_ADDR
// end ;
4196: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] , [ f_constructed ] ] ) do
4197: LD_INT 22
4199: PUSH
4200: LD_INT 1
4202: PUSH
4203: EMPTY
4204: LIST
4205: LIST
4206: PUSH
4207: LD_INT 30
4209: PUSH
4210: LD_INT 3
4212: PUSH
4213: EMPTY
4214: LIST
4215: LIST
4216: PUSH
4217: LD_INT 57
4219: PUSH
4220: EMPTY
4221: LIST
4222: PUSH
4223: EMPTY
4224: LIST
4225: LIST
4226: LIST
4227: PPUSH
4228: CALL_OW 69
4232: IFFALSE 4244
4234: GO 4236
4236: DISABLE
// ChangeMissionObjectives ( M1c ) ;
4237: LD_STRING M1c
4239: PPUSH
4240: CALL_OW 337
4244: END
// every 0 0$1 trigger GetTech ( tech_radar , 1 ) = state_researched do
4245: LD_INT 6
4247: PPUSH
4248: LD_INT 1
4250: PPUSH
4251: CALL_OW 321
4255: PUSH
4256: LD_INT 2
4258: EQUAL
4259: IFFALSE 4279
4261: GO 4263
4263: DISABLE
// begin ChangeMissionObjectives ( M2a ) ;
4264: LD_STRING M2a
4266: PPUSH
4267: CALL_OW 337
// radar_researched := true ;
4271: LD_ADDR_EXP 10
4275: PUSH
4276: LD_INT 1
4278: ST_TO_ADDR
// end ;
4279: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_weapon , us_radar ] , [ f_bweapon , us_radar ] ] ] ) do
4280: LD_INT 22
4282: PUSH
4283: LD_INT 1
4285: PUSH
4286: EMPTY
4287: LIST
4288: LIST
4289: PUSH
4290: LD_INT 2
4292: PUSH
4293: LD_INT 34
4295: PUSH
4296: LD_INT 11
4298: PUSH
4299: EMPTY
4300: LIST
4301: LIST
4302: PUSH
4303: LD_INT 35
4305: PUSH
4306: LD_INT 11
4308: PUSH
4309: EMPTY
4310: LIST
4311: LIST
4312: PUSH
4313: EMPTY
4314: LIST
4315: LIST
4316: LIST
4317: PUSH
4318: EMPTY
4319: LIST
4320: LIST
4321: PPUSH
4322: CALL_OW 69
4326: IFFALSE 4346
4328: GO 4330
4330: DISABLE
// begin ChangeMissionObjectives ( M2b ) ;
4331: LD_STRING M2b
4333: PPUSH
4334: CALL_OW 337
// radar_builded := true ;
4338: LD_ADDR_EXP 11
4342: PUSH
4343: LD_INT 1
4345: ST_TO_ADDR
// end ;
4346: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) = 0 and not first_apeman_tamed do
4347: LD_INT 22
4349: PUSH
4350: LD_INT 0
4352: PUSH
4353: EMPTY
4354: LIST
4355: LIST
4356: PUSH
4357: LD_INT 25
4359: PUSH
4360: LD_INT 12
4362: PUSH
4363: EMPTY
4364: LIST
4365: LIST
4366: PUSH
4367: EMPTY
4368: LIST
4369: LIST
4370: PPUSH
4371: CALL_OW 69
4375: PUSH
4376: LD_INT 0
4378: EQUAL
4379: PUSH
4380: LD_EXP 8
4384: NOT
4385: AND
4386: IFFALSE 4398
4388: GO 4390
4390: DISABLE
// YouLost ( Apeman ) ;
4391: LD_STRING Apeman
4393: PPUSH
4394: CALL_OW 104
4398: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_apeman_engineer ] ] ) >= 7 do var i , filter ;
4399: LD_INT 22
4401: PUSH
4402: LD_INT 1
4404: PUSH
4405: EMPTY
4406: LIST
4407: LIST
4408: PUSH
4409: LD_INT 25
4411: PUSH
4412: LD_INT 16
4414: PUSH
4415: EMPTY
4416: LIST
4417: LIST
4418: PUSH
4419: EMPTY
4420: LIST
4421: LIST
4422: PPUSH
4423: CALL_OW 69
4427: PUSH
4428: LD_INT 7
4430: GREATEREQUAL
4431: IFFALSE 4529
4433: GO 4435
4435: DISABLE
4436: LD_INT 0
4438: PPUSH
4439: PPUSH
// begin filter := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 4 ] ] ) ^ JMM ;
4440: LD_ADDR_VAR 0 2
4444: PUSH
4445: LD_INT 22
4447: PUSH
4448: LD_INT 1
4450: PUSH
4451: EMPTY
4452: LIST
4453: LIST
4454: PUSH
4455: LD_INT 21
4457: PUSH
4458: LD_INT 1
4460: PUSH
4461: EMPTY
4462: LIST
4463: LIST
4464: PUSH
4465: LD_INT 25
4467: PUSH
4468: LD_INT 4
4470: PUSH
4471: EMPTY
4472: LIST
4473: LIST
4474: PUSH
4475: EMPTY
4476: LIST
4477: LIST
4478: LIST
4479: PPUSH
4480: CALL_OW 69
4484: PUSH
4485: LD_EXP 16
4489: ADD
4490: ST_TO_ADDR
// if filter then
4491: LD_VAR 0 2
4495: IFFALSE 4529
// for i in filter do
4497: LD_ADDR_VAR 0 1
4501: PUSH
4502: LD_VAR 0 2
4506: PUSH
4507: FOR_IN
4508: IFFALSE 4527
// AddExperience ( i , 4 , 3500 ) ;
4510: LD_VAR 0 1
4514: PPUSH
4515: LD_INT 4
4517: PPUSH
4518: LD_INT 3500
4520: PPUSH
4521: CALL_OW 492
4525: GO 4507
4527: POP
4528: POP
// end ;
4529: PPOPN 2
4531: END
// every 0 0$1 trigger end_mission do var i , tmp , m1 , m2 , m3 ;
4532: LD_EXP 14
4536: IFFALSE 5670
4538: GO 4540
4540: DISABLE
4541: LD_INT 0
4543: PPUSH
4544: PPUSH
4545: PPUSH
4546: PPUSH
4547: PPUSH
// begin if apeKillCounter = 0 then
4548: LD_EXP 15
4552: PUSH
4553: LD_INT 0
4555: EQUAL
4556: IFFALSE 4565
// SetAchievement ( ACH_APEKILLER ) ;
4558: LD_STRING ACH_APEKILLER
4560: PPUSH
4561: CALL_OW 543
// if FilterAllUnits ( [ f_side , 2 ] ) then
4565: LD_INT 22
4567: PUSH
4568: LD_INT 2
4570: PUSH
4571: EMPTY
4572: LIST
4573: LIST
4574: PPUSH
4575: CALL_OW 69
4579: IFFALSE 4617
// for i in FilterAllUnits ( [ f_side , 2 ] ) do
4581: LD_ADDR_VAR 0 1
4585: PUSH
4586: LD_INT 22
4588: PUSH
4589: LD_INT 2
4591: PUSH
4592: EMPTY
4593: LIST
4594: LIST
4595: PPUSH
4596: CALL_OW 69
4600: PUSH
4601: FOR_IN
4602: IFFALSE 4615
// RemoveUnit ( i ) ;
4604: LD_VAR 0 1
4608: PPUSH
4609: CALL_OW 64
4613: GO 4601
4615: POP
4616: POP
// m1 := false ;
4617: LD_ADDR_VAR 0 3
4621: PUSH
4622: LD_INT 0
4624: ST_TO_ADDR
// m2 := false ;
4625: LD_ADDR_VAR 0 4
4629: PUSH
4630: LD_INT 0
4632: ST_TO_ADDR
// m3 := false ;
4633: LD_ADDR_VAR 0 5
4637: PUSH
4638: LD_INT 0
4640: ST_TO_ADDR
// if apeman_army then
4641: LD_EXP 9
4645: IFFALSE 4667
// begin AddMedal ( Tame , 1 ) ;
4647: LD_STRING Tame
4649: PPUSH
4650: LD_INT 1
4652: PPUSH
4653: CALL_OW 101
// m1 := true ;
4657: LD_ADDR_VAR 0 3
4661: PUSH
4662: LD_INT 1
4664: ST_TO_ADDR
// end else
4665: GO 4678
// AddMedal ( Tame , - 1 ) ;
4667: LD_STRING Tame
4669: PPUSH
4670: LD_INT 1
4672: NEG
4673: PPUSH
4674: CALL_OW 101
// if radar_researched then
4678: LD_EXP 10
4682: IFFALSE 4714
// begin SaveVariable ( true , radarResInDelta ) ;
4684: LD_INT 1
4686: PPUSH
4687: LD_STRING radarResInDelta
4689: PPUSH
4690: CALL_OW 39
// AddMedal ( Radar , 1 ) ;
4694: LD_STRING Radar
4696: PPUSH
4697: LD_INT 1
4699: PPUSH
4700: CALL_OW 101
// m2 := true ;
4704: LD_ADDR_VAR 0 4
4708: PUSH
4709: LD_INT 1
4711: ST_TO_ADDR
// end else
4712: GO 4744
// if radar_allowed then
4714: LD_EXP 7
4718: IFFALSE 4733
// AddMedal ( Radar , - 2 ) else
4720: LD_STRING Radar
4722: PPUSH
4723: LD_INT 2
4725: NEG
4726: PPUSH
4727: CALL_OW 101
4731: GO 4744
// AddMedal ( Radar , - 1 ) ;
4733: LD_STRING Radar
4735: PPUSH
4736: LD_INT 1
4738: NEG
4739: PPUSH
4740: CALL_OW 101
// if radar_builded then
4744: LD_EXP 11
4748: IFFALSE 4770
// begin AddMedal ( BuildRadar , 1 ) ;
4750: LD_STRING BuildRadar
4752: PPUSH
4753: LD_INT 1
4755: PPUSH
4756: CALL_OW 101
// m3 := true ;
4760: LD_ADDR_VAR 0 5
4764: PUSH
4765: LD_INT 1
4767: ST_TO_ADDR
// end else
4768: GO 4781
// AddMedal ( BuildRadar , - 1 ) ;
4770: LD_STRING BuildRadar
4772: PPUSH
4773: LD_INT 1
4775: NEG
4776: PPUSH
4777: CALL_OW 101
// if tick <= 7 7$00 then
4781: LD_OWVAR 1
4785: PUSH
4786: LD_INT 14700
4788: LESSEQUAL
4789: IFFALSE 4798
// SetAchievement ( ACH_ASPEED_5 ) ;
4791: LD_STRING ACH_ASPEED_5
4793: PPUSH
4794: CALL_OW 543
// if m1 and m2 and m3 and Difficulty = 3 then
4798: LD_VAR 0 3
4802: PUSH
4803: LD_VAR 0 4
4807: AND
4808: PUSH
4809: LD_VAR 0 5
4813: AND
4814: PUSH
4815: LD_OWVAR 67
4819: PUSH
4820: LD_INT 3
4822: EQUAL
4823: AND
4824: IFFALSE 4836
// SetAchievementEX ( ACH_AMER , 5 ) ;
4826: LD_STRING ACH_AMER
4828: PPUSH
4829: LD_INT 5
4831: PPUSH
4832: CALL_OW 564
// GiveMedals ( MAIN ) ;
4836: LD_STRING MAIN
4838: PPUSH
4839: CALL_OW 102
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ;
4843: LD_ADDR_VAR 0 2
4847: PUSH
4848: LD_INT 22
4850: PUSH
4851: LD_INT 1
4853: PUSH
4854: EMPTY
4855: LIST
4856: LIST
4857: PUSH
4858: LD_INT 21
4860: PUSH
4861: LD_INT 1
4863: PUSH
4864: EMPTY
4865: LIST
4866: LIST
4867: PUSH
4868: LD_INT 2
4870: PUSH
4871: LD_INT 25
4873: PUSH
4874: LD_INT 1
4876: PUSH
4877: EMPTY
4878: LIST
4879: LIST
4880: PUSH
4881: LD_INT 25
4883: PUSH
4884: LD_INT 2
4886: PUSH
4887: EMPTY
4888: LIST
4889: LIST
4890: PUSH
4891: LD_INT 25
4893: PUSH
4894: LD_INT 3
4896: PUSH
4897: EMPTY
4898: LIST
4899: LIST
4900: PUSH
4901: LD_INT 25
4903: PUSH
4904: LD_INT 4
4906: PUSH
4907: EMPTY
4908: LIST
4909: LIST
4910: PUSH
4911: EMPTY
4912: LIST
4913: LIST
4914: LIST
4915: LIST
4916: LIST
4917: PUSH
4918: EMPTY
4919: LIST
4920: LIST
4921: LIST
4922: PPUSH
4923: CALL_OW 69
4927: ST_TO_ADDR
// RewardPeople ( tmp ) ;
4928: LD_VAR 0 2
4932: PPUSH
4933: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
4937: LD_EXP 16
4941: PPUSH
4942: LD_EXP 2
4946: PUSH
4947: LD_STRING JMM
4949: STR
4950: PPUSH
4951: CALL_OW 38
// if IsOk ( Gladstone ) then
4955: LD_EXP 17
4959: PPUSH
4960: CALL_OW 302
4964: IFFALSE 4984
// begin SaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
4966: LD_EXP 17
4970: PPUSH
4971: LD_EXP 2
4975: PUSH
4976: LD_STRING Gladstone
4978: STR
4979: PPUSH
4980: CALL_OW 38
// end ; if IsOk ( Denis ) and GetSide ( Denis ) = 1 then
4984: LD_EXP 19
4988: PPUSH
4989: CALL_OW 302
4993: PUSH
4994: LD_EXP 19
4998: PPUSH
4999: CALL_OW 255
5003: PUSH
5004: LD_INT 1
5006: EQUAL
5007: AND
5008: IFFALSE 5038
// begin SaveCharacters ( Denis , mission_prefix & Denis ) ;
5010: LD_EXP 19
5014: PPUSH
5015: LD_EXP 2
5019: PUSH
5020: LD_STRING Denis
5022: STR
5023: PPUSH
5024: CALL_OW 38
// SaveVariable ( true , DenisInDelta ) ;
5028: LD_INT 1
5030: PPUSH
5031: LD_STRING DenisInDelta
5033: PPUSH
5034: CALL_OW 39
// end ; if IsOk ( Lisa ) then
5038: LD_EXP 22
5042: PPUSH
5043: CALL_OW 302
5047: IFFALSE 5067
// begin SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
5049: LD_EXP 22
5053: PPUSH
5054: LD_EXP 2
5058: PUSH
5059: LD_STRING Lisa
5061: STR
5062: PPUSH
5063: CALL_OW 38
// end ; if IsOk ( Frank ) then
5067: LD_EXP 23
5071: PPUSH
5072: CALL_OW 302
5076: IFFALSE 5096
// begin SaveCharacters ( Frank , mission_prefix & Frank ) ;
5078: LD_EXP 23
5082: PPUSH
5083: LD_EXP 2
5087: PUSH
5088: LD_STRING Frank
5090: STR
5091: PPUSH
5092: CALL_OW 38
// end ; if IsOk ( Bobby ) then
5096: LD_EXP 24
5100: PPUSH
5101: CALL_OW 302
5105: IFFALSE 5125
// begin SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
5107: LD_EXP 24
5111: PPUSH
5112: LD_EXP 2
5116: PUSH
5117: LD_STRING Bobby
5119: STR
5120: PPUSH
5121: CALL_OW 38
// end ; if IsOk ( Cyrus ) then
5125: LD_EXP 25
5129: PPUSH
5130: CALL_OW 302
5134: IFFALSE 5154
// begin SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
5136: LD_EXP 25
5140: PPUSH
5141: LD_EXP 2
5145: PUSH
5146: LD_STRING Cyrus
5148: STR
5149: PPUSH
5150: CALL_OW 38
// end ; if IsOk ( Brown ) then
5154: LD_EXP 20
5158: PPUSH
5159: CALL_OW 302
5163: IFFALSE 5183
// begin SaveCharacters ( Brown , mission_prefix & Brown ) ;
5165: LD_EXP 20
5169: PPUSH
5170: LD_EXP 2
5174: PUSH
5175: LD_STRING Brown
5177: STR
5178: PPUSH
5179: CALL_OW 38
// end ; if IsOk ( Donaldson ) then
5183: LD_EXP 21
5187: PPUSH
5188: CALL_OW 302
5192: IFFALSE 5212
// begin SaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
5194: LD_EXP 21
5198: PPUSH
5199: LD_EXP 2
5203: PUSH
5204: LD_STRING Donaldson
5206: STR
5207: PPUSH
5208: CALL_OW 38
// end ; if others then
5212: LD_EXP 26
5216: IFFALSE 5230
// SaveCharacters ( others , othersInDelta ) ;
5218: LD_EXP 26
5222: PPUSH
5223: LD_STRING othersInDelta
5225: PPUSH
5226: CALL_OW 38
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_apeman_engineer ] ] ) then
5230: LD_INT 22
5232: PUSH
5233: LD_INT 1
5235: PUSH
5236: EMPTY
5237: LIST
5238: LIST
5239: PUSH
5240: LD_INT 25
5242: PUSH
5243: LD_INT 16
5245: PUSH
5246: EMPTY
5247: LIST
5248: LIST
5249: PUSH
5250: EMPTY
5251: LIST
5252: LIST
5253: PPUSH
5254: CALL_OW 69
5258: IFFALSE 5296
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_apeman_engineer ] ] ) , apeInDelta ) ;
5260: LD_INT 22
5262: PUSH
5263: LD_INT 1
5265: PUSH
5266: EMPTY
5267: LIST
5268: LIST
5269: PUSH
5270: LD_INT 25
5272: PUSH
5273: LD_INT 16
5275: PUSH
5276: EMPTY
5277: LIST
5278: LIST
5279: PUSH
5280: EMPTY
5281: LIST
5282: LIST
5283: PPUSH
5284: CALL_OW 69
5288: PPUSH
5289: LD_STRING apeInDelta
5291: PPUSH
5292: CALL_OW 38
// tmp := [ ] ;
5296: LD_ADDR_VAR 0 2
5300: PUSH
5301: EMPTY
5302: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) then
5303: LD_INT 22
5305: PUSH
5306: LD_INT 1
5308: PUSH
5309: EMPTY
5310: LIST
5311: LIST
5312: PUSH
5313: LD_INT 21
5315: PUSH
5316: LD_INT 2
5318: PUSH
5319: EMPTY
5320: LIST
5321: LIST
5322: PUSH
5323: EMPTY
5324: LIST
5325: LIST
5326: PPUSH
5327: CALL_OW 69
5331: IFFALSE 5442
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) do
5333: LD_ADDR_VAR 0 1
5337: PUSH
5338: LD_INT 22
5340: PUSH
5341: LD_INT 1
5343: PUSH
5344: EMPTY
5345: LIST
5346: LIST
5347: PUSH
5348: LD_INT 21
5350: PUSH
5351: LD_INT 2
5353: PUSH
5354: EMPTY
5355: LIST
5356: LIST
5357: PUSH
5358: EMPTY
5359: LIST
5360: LIST
5361: PPUSH
5362: CALL_OW 69
5366: PUSH
5367: FOR_IN
5368: IFFALSE 5440
// tmp := tmp ^ [ GetNation ( i ) , GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) ] ;
5370: LD_ADDR_VAR 0 2
5374: PUSH
5375: LD_VAR 0 2
5379: PUSH
5380: LD_VAR 0 1
5384: PPUSH
5385: CALL_OW 248
5389: PUSH
5390: LD_VAR 0 1
5394: PPUSH
5395: CALL_OW 265
5399: PUSH
5400: LD_VAR 0 1
5404: PPUSH
5405: CALL_OW 262
5409: PUSH
5410: LD_VAR 0 1
5414: PPUSH
5415: CALL_OW 263
5419: PUSH
5420: LD_VAR 0 1
5424: PPUSH
5425: CALL_OW 264
5429: PUSH
5430: EMPTY
5431: LIST
5432: LIST
5433: LIST
5434: LIST
5435: LIST
5436: ADD
5437: ST_TO_ADDR
5438: GO 5367
5440: POP
5441: POP
// if tmp then
5442: LD_VAR 0 2
5446: IFFALSE 5460
// SaveVariable ( tmp , vehiclesInDelta ) ;
5448: LD_VAR 0 2
5452: PPUSH
5453: LD_STRING vehiclesInDelta
5455: PPUSH
5456: CALL_OW 39
// tmp := [ ] ;
5460: LD_ADDR_VAR 0 2
5464: PUSH
5465: EMPTY
5466: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) then
5467: LD_INT 22
5469: PUSH
5470: LD_INT 1
5472: PUSH
5473: EMPTY
5474: LIST
5475: LIST
5476: PUSH
5477: LD_INT 21
5479: PUSH
5480: LD_INT 3
5482: PUSH
5483: EMPTY
5484: LIST
5485: LIST
5486: PUSH
5487: EMPTY
5488: LIST
5489: LIST
5490: PPUSH
5491: CALL_OW 69
5495: IFFALSE 5648
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) do
5497: LD_ADDR_VAR 0 1
5501: PUSH
5502: LD_INT 22
5504: PUSH
5505: LD_INT 1
5507: PUSH
5508: EMPTY
5509: LIST
5510: LIST
5511: PUSH
5512: LD_INT 21
5514: PUSH
5515: LD_INT 3
5517: PUSH
5518: EMPTY
5519: LIST
5520: LIST
5521: PUSH
5522: EMPTY
5523: LIST
5524: LIST
5525: PPUSH
5526: CALL_OW 69
5530: PUSH
5531: FOR_IN
5532: IFFALSE 5646
// tmp := tmp ^ [ [ GetBType ( i ) , GetBLevel ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) , GetBWeapon ( i ) ] ] ;
5534: LD_ADDR_VAR 0 2
5538: PUSH
5539: LD_VAR 0 2
5543: PUSH
5544: LD_VAR 0 1
5548: PPUSH
5549: CALL_OW 266
5553: PUSH
5554: LD_VAR 0 1
5558: PPUSH
5559: CALL_OW 267
5563: PUSH
5564: LD_VAR 0 1
5568: PPUSH
5569: CALL_OW 250
5573: PUSH
5574: LD_VAR 0 1
5578: PPUSH
5579: CALL_OW 251
5583: PUSH
5584: LD_VAR 0 1
5588: PPUSH
5589: CALL_OW 254
5593: PUSH
5594: LD_VAR 0 1
5598: PPUSH
5599: LD_INT 1
5601: PPUSH
5602: CALL_OW 268
5606: PUSH
5607: LD_VAR 0 1
5611: PPUSH
5612: LD_INT 2
5614: PPUSH
5615: CALL_OW 268
5619: PUSH
5620: LD_VAR 0 1
5624: PPUSH
5625: CALL_OW 269
5629: PUSH
5630: EMPTY
5631: LIST
5632: LIST
5633: LIST
5634: LIST
5635: LIST
5636: LIST
5637: LIST
5638: LIST
5639: PUSH
5640: EMPTY
5641: LIST
5642: ADD
5643: ST_TO_ADDR
5644: GO 5531
5646: POP
5647: POP
// if tmp then
5648: LD_VAR 0 2
5652: IFFALSE 5666
// SaveVariable ( tmp , buildingsInDelta ) ;
5654: LD_VAR 0 2
5658: PPUSH
5659: LD_STRING buildingsInDelta
5661: PPUSH
5662: CALL_OW 39
// YouWin ;
5666: CALL_OW 103
// end ; end_of_file
5670: PPOPN 5
5672: END
// export function PrepareArabianTroops ( amount , skill , area ) ; var i , un , tmp ; begin
5673: LD_INT 0
5675: PPUSH
5676: PPUSH
5677: PPUSH
5678: PPUSH
// InitHc ;
5679: CALL_OW 19
// InitUc ;
5683: CALL_OW 18
// uc_side := 2 ;
5687: LD_ADDR_OWVAR 20
5691: PUSH
5692: LD_INT 2
5694: ST_TO_ADDR
// uc_nation := 2 ;
5695: LD_ADDR_OWVAR 21
5699: PUSH
5700: LD_INT 2
5702: ST_TO_ADDR
// if not amount then
5703: LD_VAR 0 1
5707: NOT
5708: IFFALSE 5712
// exit ;
5710: GO 5835
// for i = 1 to amount do
5712: LD_ADDR_VAR 0 5
5716: PUSH
5717: DOUBLE
5718: LD_INT 1
5720: DEC
5721: ST_TO_ADDR
5722: LD_VAR 0 1
5726: PUSH
5727: FOR_TO
5728: IFFALSE 5823
// begin PrepareHuman ( false , 1 , skill ) ;
5730: LD_INT 0
5732: PPUSH
5733: LD_INT 1
5735: PPUSH
5736: LD_VAR 0 2
5740: PPUSH
5741: CALL_OW 380
// un := CreateHuman ;
5745: LD_ADDR_VAR 0 6
5749: PUSH
5750: CALL_OW 44
5754: ST_TO_ADDR
// tmp := Insert ( tmp , 1 , un ) ;
5755: LD_ADDR_VAR 0 7
5759: PUSH
5760: LD_VAR 0 7
5764: PPUSH
5765: LD_INT 1
5767: PPUSH
5768: LD_VAR 0 6
5772: PPUSH
5773: CALL_OW 2
5777: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
5778: LD_VAR 0 6
5782: PPUSH
5783: LD_VAR 0 3
5787: PPUSH
5788: LD_INT 0
5790: PPUSH
5791: CALL_OW 49
// if i mod 2 = 0 then
5795: LD_VAR 0 5
5799: PUSH
5800: LD_INT 2
5802: MOD
5803: PUSH
5804: LD_INT 0
5806: EQUAL
5807: IFFALSE 5821
// SetTag ( un , 11 ) ;
5809: LD_VAR 0 6
5813: PPUSH
5814: LD_INT 11
5816: PPUSH
5817: CALL_OW 109
// end ;
5821: GO 5727
5823: POP
5824: POP
// result := tmp ;
5825: LD_ADDR_VAR 0 4
5829: PUSH
5830: LD_VAR 0 7
5834: ST_TO_ADDR
// end ;
5835: LD_VAR 0 4
5839: RET
// export ar_forces , ap_killers ; every 0 0$1 trigger Delta do var i , timer , more_troops , skill , eng , un , veh , force ;
5840: LD_EXP 6
5844: IFFALSE 6711
5846: GO 5848
5848: DISABLE
5849: LD_INT 0
5851: PPUSH
5852: PPUSH
5853: PPUSH
5854: PPUSH
5855: PPUSH
5856: PPUSH
5857: PPUSH
5858: PPUSH
// begin more_troops := false ;
5859: LD_ADDR_VAR 0 3
5863: PUSH
5864: LD_INT 0
5866: ST_TO_ADDR
// skill := [ 3 , 4 , 5 ] [ Difficulty ] ;
5867: LD_ADDR_VAR 0 4
5871: PUSH
5872: LD_INT 3
5874: PUSH
5875: LD_INT 4
5877: PUSH
5878: LD_INT 5
5880: PUSH
5881: EMPTY
5882: LIST
5883: LIST
5884: LIST
5885: PUSH
5886: LD_OWVAR 67
5890: ARRAY
5891: ST_TO_ADDR
// timer := [ 5 5$00 , 4 4$00 , 3 3$00 ] [ Difficulty ] ;
5892: LD_ADDR_VAR 0 2
5896: PUSH
5897: LD_INT 10500
5899: PUSH
5900: LD_INT 8400
5902: PUSH
5903: LD_INT 6300
5905: PUSH
5906: EMPTY
5907: LIST
5908: LIST
5909: LIST
5910: PUSH
5911: LD_OWVAR 67
5915: ARRAY
5916: ST_TO_ADDR
// force := [ ] ;
5917: LD_ADDR_VAR 0 8
5921: PUSH
5922: EMPTY
5923: ST_TO_ADDR
// ar_forces := [ ] ;
5924: LD_ADDR_EXP 27
5928: PUSH
5929: EMPTY
5930: ST_TO_ADDR
// ap_killers := [ ] ;
5931: LD_ADDR_EXP 28
5935: PUSH
5936: EMPTY
5937: ST_TO_ADDR
// Wait ( timer ) ;
5938: LD_VAR 0 2
5942: PPUSH
5943: CALL_OW 67
// if Denis and GetSide ( Denis ) = 4 then
5947: LD_EXP 19
5951: PUSH
5952: LD_EXP 19
5956: PPUSH
5957: CALL_OW 255
5961: PUSH
5962: LD_INT 4
5964: EQUAL
5965: AND
5966: IFFALSE 5975
// Wait ( 0 0$45 ) ;
5968: LD_INT 1575
5970: PPUSH
5971: CALL_OW 67
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_armoury ] ] ) then
5975: LD_INT 22
5977: PUSH
5978: LD_INT 1
5980: PUSH
5981: EMPTY
5982: LIST
5983: LIST
5984: PUSH
5985: LD_INT 30
5987: PUSH
5988: LD_INT 4
5990: PUSH
5991: EMPTY
5992: LIST
5993: LIST
5994: PUSH
5995: EMPTY
5996: LIST
5997: LIST
5998: PPUSH
5999: CALL_OW 69
6003: IFFALSE 6020
// begin Wait ( 1 1$25 ) ;
6005: LD_INT 2975
6007: PPUSH
6008: CALL_OW 67
// more_troops := true ;
6012: LD_ADDR_VAR 0 3
6016: PUSH
6017: LD_INT 1
6019: ST_TO_ADDR
// end ; if more_troops then
6020: LD_VAR 0 3
6024: IFFALSE 6212
// begin force := PrepareArabianTroops ( [ 4 , 5 , 6 ] [ Difficulty ] , skill , arArea2 ) ;
6026: LD_ADDR_VAR 0 8
6030: PUSH
6031: LD_INT 4
6033: PUSH
6034: LD_INT 5
6036: PUSH
6037: LD_INT 6
6039: PUSH
6040: EMPTY
6041: LIST
6042: LIST
6043: LIST
6044: PUSH
6045: LD_OWVAR 67
6049: ARRAY
6050: PPUSH
6051: LD_VAR 0 4
6055: PPUSH
6056: LD_INT 14
6058: PPUSH
6059: CALL 5673 0 3
6063: ST_TO_ADDR
// veh := PrepareTank ( 2 , 3 , ru_medium_tracked , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_heavy_machine_gun , ru_gatling_gun ] [ Difficulty ] , 90 ) ;
6064: LD_ADDR_VAR 0 7
6068: PUSH
6069: LD_INT 2
6071: PPUSH
6072: LD_INT 3
6074: PPUSH
6075: LD_INT 22
6077: PPUSH
6078: LD_INT 1
6080: PPUSH
6081: LD_INT 1
6083: PPUSH
6084: LD_INT 42
6086: PUSH
6087: LD_INT 42
6089: PUSH
6090: LD_INT 43
6092: PUSH
6093: EMPTY
6094: LIST
6095: LIST
6096: LIST
6097: PUSH
6098: LD_OWVAR 67
6102: ARRAY
6103: PPUSH
6104: LD_INT 90
6106: PPUSH
6107: CALL 427 0 7
6111: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
6112: LD_VAR 0 7
6116: PPUSH
6117: LD_INT 4
6119: PPUSH
6120: CALL_OW 233
// PlaceUnitArea ( veh , arArea1 , false ) ;
6124: LD_VAR 0 7
6128: PPUSH
6129: LD_INT 13
6131: PPUSH
6132: LD_INT 0
6134: PPUSH
6135: CALL_OW 49
// uc_side := 2 ;
6139: LD_ADDR_OWVAR 20
6143: PUSH
6144: LD_INT 2
6146: ST_TO_ADDR
// uc_nation := 2 ;
6147: LD_ADDR_OWVAR 21
6151: PUSH
6152: LD_INT 2
6154: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
6155: LD_INT 0
6157: PPUSH
6158: LD_INT 1
6160: PPUSH
6161: LD_VAR 0 4
6165: PPUSH
6166: CALL_OW 380
// un := CreateHuman ;
6170: LD_ADDR_VAR 0 6
6174: PUSH
6175: CALL_OW 44
6179: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6180: LD_VAR 0 6
6184: PPUSH
6185: LD_VAR 0 7
6189: PPUSH
6190: CALL_OW 52
// force := force ^ un ;
6194: LD_ADDR_VAR 0 8
6198: PUSH
6199: LD_VAR 0 8
6203: PUSH
6204: LD_VAR 0 6
6208: ADD
6209: ST_TO_ADDR
// end else
6210: GO 6250
// begin force := PrepareArabianTroops ( [ 3 , 4 , 5 ] [ Difficulty ] , skill , arArea2 ) ;
6212: LD_ADDR_VAR 0 8
6216: PUSH
6217: LD_INT 3
6219: PUSH
6220: LD_INT 4
6222: PUSH
6223: LD_INT 5
6225: PUSH
6226: EMPTY
6227: LIST
6228: LIST
6229: LIST
6230: PUSH
6231: LD_OWVAR 67
6235: ARRAY
6236: PPUSH
6237: LD_VAR 0 4
6241: PPUSH
6242: LD_INT 14
6244: PPUSH
6245: CALL 5673 0 3
6249: ST_TO_ADDR
// end ; if force then
6250: LD_VAR 0 8
6254: IFFALSE 6266
// ar_forces := force ;
6256: LD_ADDR_EXP 27
6260: PUSH
6261: LD_VAR 0 8
6265: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
6266: LD_INT 35
6268: PPUSH
6269: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) = 0 ;
6273: LD_INT 22
6275: PUSH
6276: LD_INT 2
6278: PUSH
6279: EMPTY
6280: LIST
6281: LIST
6282: PUSH
6283: LD_INT 21
6285: PUSH
6286: LD_INT 1
6288: PUSH
6289: EMPTY
6290: LIST
6291: LIST
6292: PUSH
6293: EMPTY
6294: LIST
6295: LIST
6296: PPUSH
6297: CALL_OW 69
6301: PUSH
6302: LD_INT 0
6304: EQUAL
6305: IFFALSE 6266
// Wait ( timer ) ;
6307: LD_VAR 0 2
6311: PPUSH
6312: CALL_OW 67
// force := PrepareArabianTroops ( [ 4 , 5 , 6 ] [ Difficulty ] , skill , [ arArea1 , arArea2 ] [ rand ( 1 , 2 ) ] ) ;
6316: LD_ADDR_VAR 0 8
6320: PUSH
6321: LD_INT 4
6323: PUSH
6324: LD_INT 5
6326: PUSH
6327: LD_INT 6
6329: PUSH
6330: EMPTY
6331: LIST
6332: LIST
6333: LIST
6334: PUSH
6335: LD_OWVAR 67
6339: ARRAY
6340: PPUSH
6341: LD_VAR 0 4
6345: PPUSH
6346: LD_INT 13
6348: PUSH
6349: LD_INT 14
6351: PUSH
6352: EMPTY
6353: LIST
6354: LIST
6355: PUSH
6356: LD_INT 1
6358: PPUSH
6359: LD_INT 2
6361: PPUSH
6362: CALL_OW 12
6366: ARRAY
6367: PPUSH
6368: CALL 5673 0 3
6372: ST_TO_ADDR
// if Difficulty > 1 and Delta then
6373: LD_OWVAR 67
6377: PUSH
6378: LD_INT 1
6380: GREATER
6381: PUSH
6382: LD_EXP 6
6386: AND
6387: IFFALSE 6466
// begin uc_side := 2 ;
6389: LD_ADDR_OWVAR 20
6393: PUSH
6394: LD_INT 2
6396: ST_TO_ADDR
// uc_nation := 2 ;
6397: LD_ADDR_OWVAR 21
6401: PUSH
6402: LD_INT 2
6404: ST_TO_ADDR
// PrepareHuman ( false , 2 , skill ) ;
6405: LD_INT 0
6407: PPUSH
6408: LD_INT 2
6410: PPUSH
6411: LD_VAR 0 4
6415: PPUSH
6416: CALL_OW 380
// eng := CreateHuman ;
6420: LD_ADDR_VAR 0 5
6424: PUSH
6425: CALL_OW 44
6429: ST_TO_ADDR
// PlaceUnitArea ( eng , arArea1 , false ) ;
6430: LD_VAR 0 5
6434: PPUSH
6435: LD_INT 13
6437: PPUSH
6438: LD_INT 0
6440: PPUSH
6441: CALL_OW 49
// Wait ( 3 ) ;
6445: LD_INT 3
6447: PPUSH
6448: CALL_OW 67
// AddComEnterUnit ( eng , Delta ) ;
6452: LD_VAR 0 5
6456: PPUSH
6457: LD_EXP 6
6461: PPUSH
6462: CALL_OW 180
// end ; if force then
6466: LD_VAR 0 8
6470: IFFALSE 6482
// ar_forces := force ;
6472: LD_ADDR_EXP 27
6476: PUSH
6477: LD_VAR 0 8
6481: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
6482: LD_INT 35
6484: PPUSH
6485: CALL_OW 67
// if eng then
6489: LD_VAR 0 5
6493: IFFALSE 6547
// if GetSide ( Delta ) = 2 and IsOk ( eng ) and not IsInUnit ( eng ) then
6495: LD_EXP 6
6499: PPUSH
6500: CALL_OW 255
6504: PUSH
6505: LD_INT 2
6507: EQUAL
6508: PUSH
6509: LD_VAR 0 5
6513: PPUSH
6514: CALL_OW 302
6518: AND
6519: PUSH
6520: LD_VAR 0 5
6524: PPUSH
6525: CALL_OW 310
6529: NOT
6530: AND
6531: IFFALSE 6547
// ComEnterUnit ( eng , Delta ) ;
6533: LD_VAR 0 5
6537: PPUSH
6538: LD_EXP 6
6542: PPUSH
6543: CALL_OW 120
// until FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) = 0 ;
6547: LD_INT 22
6549: PUSH
6550: LD_INT 2
6552: PUSH
6553: EMPTY
6554: LIST
6555: LIST
6556: PUSH
6557: LD_INT 21
6559: PUSH
6560: LD_INT 1
6562: PUSH
6563: EMPTY
6564: LIST
6565: LIST
6566: PUSH
6567: EMPTY
6568: LIST
6569: LIST
6570: PPUSH
6571: CALL_OW 69
6575: PUSH
6576: LD_INT 0
6578: EQUAL
6579: IFFALSE 6482
// Wait ( 2 2$00 ) ;
6581: LD_INT 4200
6583: PPUSH
6584: CALL_OW 67
// ap_killers := PrepareArabianTroops ( [ 1 , 2 , 2 ] [ Difficulty ] , skill , arArea1 ) ;
6588: LD_ADDR_EXP 28
6592: PUSH
6593: LD_INT 1
6595: PUSH
6596: LD_INT 2
6598: PUSH
6599: LD_INT 2
6601: PUSH
6602: EMPTY
6603: LIST
6604: LIST
6605: LIST
6606: PUSH
6607: LD_OWVAR 67
6611: ARRAY
6612: PPUSH
6613: LD_VAR 0 4
6617: PPUSH
6618: LD_INT 13
6620: PPUSH
6621: CALL 5673 0 3
6625: ST_TO_ADDR
// Wait ( timer * 2 ) ;
6626: LD_VAR 0 2
6630: PUSH
6631: LD_INT 2
6633: MUL
6634: PPUSH
6635: CALL_OW 67
// ar_forces := PrepareArabianTroops ( [ 5 , 6 , 7 ] [ Difficulty ] , skill , arArea1 ) ^ PrepareArabianTroops ( [ 3 , 4 , 4 ] [ Difficulty ] , skill , arArea2 ) ;
6639: LD_ADDR_EXP 27
6643: PUSH
6644: LD_INT 5
6646: PUSH
6647: LD_INT 6
6649: PUSH
6650: LD_INT 7
6652: PUSH
6653: EMPTY
6654: LIST
6655: LIST
6656: LIST
6657: PUSH
6658: LD_OWVAR 67
6662: ARRAY
6663: PPUSH
6664: LD_VAR 0 4
6668: PPUSH
6669: LD_INT 13
6671: PPUSH
6672: CALL 5673 0 3
6676: PUSH
6677: LD_INT 3
6679: PUSH
6680: LD_INT 4
6682: PUSH
6683: LD_INT 4
6685: PUSH
6686: EMPTY
6687: LIST
6688: LIST
6689: LIST
6690: PUSH
6691: LD_OWVAR 67
6695: ARRAY
6696: PPUSH
6697: LD_VAR 0 4
6701: PPUSH
6702: LD_INT 14
6704: PPUSH
6705: CALL 5673 0 3
6709: ADD
6710: ST_TO_ADDR
// end ;
6711: PPOPN 8
6713: END
// every 0 0$03 trigger ar_forces do var i , target ;
6714: LD_EXP 27
6718: IFFALSE 6916
6720: GO 6722
6722: DISABLE
6723: LD_INT 0
6725: PPUSH
6726: PPUSH
// begin enable ;
6727: ENABLE
// if not ar_forces then
6728: LD_EXP 27
6732: NOT
6733: IFFALSE 6737
// exit ;
6735: GO 6916
// if Delta then
6737: LD_EXP 6
6741: IFFALSE 6755
// target := Delta else
6743: LD_ADDR_VAR 0 2
6747: PUSH
6748: LD_EXP 6
6752: ST_TO_ADDR
6753: GO 6765
// target := JMM ;
6755: LD_ADDR_VAR 0 2
6759: PUSH
6760: LD_EXP 16
6764: ST_TO_ADDR
// for i in ar_forces do
6765: LD_ADDR_VAR 0 1
6769: PUSH
6770: LD_EXP 27
6774: PUSH
6775: FOR_IN
6776: IFFALSE 6914
// begin if i in FilterAllUnits ( [ f_driving ] ) then
6778: LD_VAR 0 1
6782: PUSH
6783: LD_INT 55
6785: PUSH
6786: EMPTY
6787: LIST
6788: PPUSH
6789: CALL_OW 69
6793: IN
6794: IFFALSE 6837
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , IsInUnit ( i ) ) ) else
6796: LD_VAR 0 1
6800: PPUSH
6801: LD_INT 22
6803: PUSH
6804: LD_INT 1
6806: PUSH
6807: EMPTY
6808: LIST
6809: LIST
6810: PPUSH
6811: CALL_OW 69
6815: PPUSH
6816: LD_VAR 0 1
6820: PPUSH
6821: CALL_OW 310
6825: PPUSH
6826: CALL_OW 74
6830: PPUSH
6831: CALL_OW 115
6835: GO 6912
// if GetDistUnits ( i , target ) > 30 then
6837: LD_VAR 0 1
6841: PPUSH
6842: LD_VAR 0 2
6846: PPUSH
6847: CALL_OW 296
6851: PUSH
6852: LD_INT 30
6854: GREATER
6855: IFFALSE 6888
// ComAgressiveMove ( i , GetX ( target ) , GetY ( target ) ) else
6857: LD_VAR 0 1
6861: PPUSH
6862: LD_VAR 0 2
6866: PPUSH
6867: CALL_OW 250
6871: PPUSH
6872: LD_VAR 0 2
6876: PPUSH
6877: CALL_OW 251
6881: PPUSH
6882: CALL_OW 114
6886: GO 6912
// Attack ( i , FilterAllUnits ( [ f_enemy , 2 ] ) ) ;
6888: LD_VAR 0 1
6892: PPUSH
6893: LD_INT 81
6895: PUSH
6896: LD_INT 2
6898: PUSH
6899: EMPTY
6900: LIST
6901: LIST
6902: PPUSH
6903: CALL_OW 69
6907: PPUSH
6908: CALL 732 0 2
// end ;
6912: GO 6775
6914: POP
6915: POP
// end ;
6916: PPOPN 2
6918: END
// every 0 0$01 trigger ap_killers do var filter , i , target ;
6919: LD_EXP 28
6923: IFFALSE 7083
6925: GO 6927
6927: DISABLE
6928: LD_INT 0
6930: PPUSH
6931: PPUSH
6932: PPUSH
// begin enable ;
6933: ENABLE
// filter := FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) ;
6934: LD_ADDR_VAR 0 1
6938: PUSH
6939: LD_INT 22
6941: PUSH
6942: LD_INT 0
6944: PUSH
6945: EMPTY
6946: LIST
6947: LIST
6948: PUSH
6949: LD_INT 25
6951: PUSH
6952: LD_INT 12
6954: PUSH
6955: EMPTY
6956: LIST
6957: LIST
6958: PUSH
6959: EMPTY
6960: LIST
6961: LIST
6962: PPUSH
6963: CALL_OW 69
6967: ST_TO_ADDR
// if not filter then
6968: LD_VAR 0 1
6972: NOT
6973: IFFALSE 7000
// begin ar_forces := ar_forces ^ ap_killers ;
6975: LD_ADDR_EXP 27
6979: PUSH
6980: LD_EXP 27
6984: PUSH
6985: LD_EXP 28
6989: ADD
6990: ST_TO_ADDR
// ap_killers := [ ] ;
6991: LD_ADDR_EXP 28
6995: PUSH
6996: EMPTY
6997: ST_TO_ADDR
// exit ;
6998: GO 7083
// end ; for i in ap_killers do
7000: LD_ADDR_VAR 0 2
7004: PUSH
7005: LD_EXP 28
7009: PUSH
7010: FOR_IN
7011: IFFALSE 7081
// begin if not IsOk ( i ) then
7013: LD_VAR 0 2
7017: PPUSH
7018: CALL_OW 302
7022: NOT
7023: IFFALSE 7027
// continue ;
7025: GO 7010
// if not HasTask ( i ) then
7027: LD_VAR 0 2
7031: PPUSH
7032: CALL_OW 314
7036: NOT
7037: IFFALSE 7059
// target := NearestUnitToUnit ( filter , i ) ;
7039: LD_ADDR_VAR 0 3
7043: PUSH
7044: LD_VAR 0 1
7048: PPUSH
7049: LD_VAR 0 2
7053: PPUSH
7054: CALL_OW 74
7058: ST_TO_ADDR
// if target then
7059: LD_VAR 0 3
7063: IFFALSE 7079
// ComAttackUnit ( i , target ) ;
7065: LD_VAR 0 2
7069: PPUSH
7070: LD_VAR 0 3
7074: PPUSH
7075: CALL_OW 115
// end ;
7079: GO 7010
7081: POP
7082: POP
// end ; end_of_file
7083: PPOPN 3
7085: END
// every 0 0$40 + 0 0$2 trigger Delta do var i , counter , cr ;
7086: LD_EXP 6
7090: IFFALSE 7222
7092: GO 7094
7094: DISABLE
7095: LD_INT 0
7097: PPUSH
7098: PPUSH
7099: PPUSH
// begin counter := [ 300 , 250 , 220 ] [ Difficulty ] ;
7100: LD_ADDR_VAR 0 2
7104: PUSH
7105: LD_INT 300
7107: PUSH
7108: LD_INT 250
7110: PUSH
7111: LD_INT 220
7113: PUSH
7114: EMPTY
7115: LIST
7116: LIST
7117: LIST
7118: PUSH
7119: LD_OWVAR 67
7123: ARRAY
7124: ST_TO_ADDR
// CreateCratesArea ( Rand ( 1 , 3 ) , cratesArea , true ) ;
7125: LD_INT 1
7127: PPUSH
7128: LD_INT 3
7130: PPUSH
7131: CALL_OW 12
7135: PPUSH
7136: LD_INT 7
7138: PPUSH
7139: LD_INT 1
7141: PPUSH
7142: CALL_OW 55
// repeat wait ( rand ( 1 1$30 , 2 2$20 ) ) ;
7146: LD_INT 3150
7148: PPUSH
7149: LD_INT 4900
7151: PPUSH
7152: CALL_OW 12
7156: PPUSH
7157: CALL_OW 67
// cr := rand ( 1 , 5 ) ;
7161: LD_ADDR_VAR 0 3
7165: PUSH
7166: LD_INT 1
7168: PPUSH
7169: LD_INT 5
7171: PPUSH
7172: CALL_OW 12
7176: ST_TO_ADDR
// CreateCratesArea ( cr , cratesArea , true ) ;
7177: LD_VAR 0 3
7181: PPUSH
7182: LD_INT 7
7184: PPUSH
7185: LD_INT 1
7187: PPUSH
7188: CALL_OW 55
// counter := counter - cr * 10 ;
7192: LD_ADDR_VAR 0 2
7196: PUSH
7197: LD_VAR 0 2
7201: PUSH
7202: LD_VAR 0 3
7206: PUSH
7207: LD_INT 10
7209: MUL
7210: MINUS
7211: ST_TO_ADDR
// until counter <= 0 ;
7212: LD_VAR 0 2
7216: PUSH
7217: LD_INT 0
7219: LESSEQUAL
7220: IFFALSE 7146
// end ;
7222: PPOPN 3
7224: END
// every 0 0$03 trigger not Delta do var i ;
7225: LD_EXP 6
7229: NOT
7230: IFFALSE 7300
7232: GO 7234
7234: DISABLE
7235: LD_INT 0
7237: PPUSH
// begin for i = 1 to 4 - Difficulty do
7238: LD_ADDR_VAR 0 1
7242: PUSH
7243: DOUBLE
7244: LD_INT 1
7246: DEC
7247: ST_TO_ADDR
7248: LD_INT 4
7250: PUSH
7251: LD_OWVAR 67
7255: MINUS
7256: PUSH
7257: FOR_TO
7258: IFFALSE 7298
// begin CreateCratesArea ( rand ( 2 , 5 ) , deltaMainArea , true ) ;
7260: LD_INT 2
7262: PPUSH
7263: LD_INT 5
7265: PPUSH
7266: CALL_OW 12
7270: PPUSH
7271: LD_INT 8
7273: PPUSH
7274: LD_INT 1
7276: PPUSH
7277: CALL_OW 55
// Wait ( rand ( 0 0$16 , 0 0$39 ) ) ;
7281: LD_INT 560
7283: PPUSH
7284: LD_INT 1365
7286: PPUSH
7287: CALL_OW 12
7291: PPUSH
7292: CALL_OW 67
// end ;
7296: GO 7257
7298: POP
7299: POP
// end ;
7300: PPOPN 1
7302: END
// every 3 3$00 trigger tick < 15 15$00 do
7303: LD_OWVAR 1
7307: PUSH
7308: LD_INT 31500
7310: LESS
7311: IFFALSE 7371
7313: GO 7315
7315: DISABLE
// begin enable ;
7316: ENABLE
// CreateCratesAnyWhere ( rand ( 1 , 3 ) , true ) ;
7317: LD_INT 1
7319: PPUSH
7320: LD_INT 3
7322: PPUSH
7323: CALL_OW 12
7327: PPUSH
7328: LD_INT 1
7330: PPUSH
7331: CALL_OW 57
// Wait ( rand ( 0 0$38 , 0 0$59 ) ) ;
7335: LD_INT 1330
7337: PPUSH
7338: LD_INT 2065
7340: PPUSH
7341: CALL_OW 12
7345: PPUSH
7346: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 4 ) , riverArea , true ) ;
7350: LD_INT 1
7352: PPUSH
7353: LD_INT 4
7355: PPUSH
7356: CALL_OW 12
7360: PPUSH
7361: LD_INT 15
7363: PPUSH
7364: LD_INT 1
7366: PPUSH
7367: CALL_OW 55
// end ; end_of_file
7371: END
// on UnitDestroyed ( un ) do begin if un = JMM then
7372: LD_VAR 0 1
7376: PUSH
7377: LD_EXP 16
7381: EQUAL
7382: IFFALSE 7391
// YouLost ( JMM ) ;
7384: LD_STRING JMM
7386: PPUSH
7387: CALL_OW 104
// if un = Delta then
7391: LD_VAR 0 1
7395: PUSH
7396: LD_EXP 6
7400: EQUAL
7401: IFFALSE 7424
// begin Delta := 0 ;
7403: LD_ADDR_EXP 6
7407: PUSH
7408: LD_INT 0
7410: ST_TO_ADDR
// SetRestrict ( b_depot , 1 , true ) ;
7411: LD_INT 0
7413: PPUSH
7414: LD_INT 1
7416: PPUSH
7417: LD_INT 1
7419: PPUSH
7420: CALL_OW 324
// end ; if un in ar_forces then
7424: LD_VAR 0 1
7428: PUSH
7429: LD_EXP 27
7433: IN
7434: IFFALSE 7452
// ar_forces := ar_forces diff un ;
7436: LD_ADDR_EXP 27
7440: PUSH
7441: LD_EXP 27
7445: PUSH
7446: LD_VAR 0 1
7450: DIFF
7451: ST_TO_ADDR
// if un in ap_killers then
7452: LD_VAR 0 1
7456: PUSH
7457: LD_EXP 28
7461: IN
7462: IFFALSE 7480
// ap_killers := ap_killers diff un ;
7464: LD_ADDR_EXP 28
7468: PUSH
7469: LD_EXP 28
7473: PUSH
7474: LD_VAR 0 1
7478: DIFF
7479: ST_TO_ADDR
// if un in FilterAllUnits ( [ f_or , [ f_class , class_apeman ] , [ f_class , class_apeman_engineer ] ] ) then
7480: LD_VAR 0 1
7484: PUSH
7485: LD_INT 2
7487: PUSH
7488: LD_INT 25
7490: PUSH
7491: LD_INT 12
7493: PUSH
7494: EMPTY
7495: LIST
7496: LIST
7497: PUSH
7498: LD_INT 25
7500: PUSH
7501: LD_INT 16
7503: PUSH
7504: EMPTY
7505: LIST
7506: LIST
7507: PUSH
7508: EMPTY
7509: LIST
7510: LIST
7511: LIST
7512: PPUSH
7513: CALL_OW 69
7517: IN
7518: IFFALSE 7534
// apeKillCounter := apeKillCounter + 1 ;
7520: LD_ADDR_EXP 15
7524: PUSH
7525: LD_EXP 15
7529: PUSH
7530: LD_INT 1
7532: PLUS
7533: ST_TO_ADDR
// end ;
7534: PPOPN 1
7536: END
// on Contact ( s1 , s2 ) do if s1 = 1 and s2 = 2 and not arab_spotted then
7537: LD_VAR 0 1
7541: PUSH
7542: LD_INT 1
7544: EQUAL
7545: PUSH
7546: LD_VAR 0 2
7550: PUSH
7551: LD_INT 2
7553: EQUAL
7554: AND
7555: PUSH
7556: LD_EXP 13
7560: NOT
7561: AND
7562: IFFALSE 7572
// arab_spotted := true ;
7564: LD_ADDR_EXP 13
7568: PUSH
7569: LD_INT 1
7571: ST_TO_ADDR
7572: PPOPN 2
7574: END
// on EndTheMissionRaised ( p ) do begin end_the_mission_allowed := false ;
7575: LD_ADDR_OWVAR 57
7579: PUSH
7580: LD_INT 0
7582: ST_TO_ADDR
// end_mission := true ;
7583: LD_ADDR_EXP 14
7587: PUSH
7588: LD_INT 1
7590: ST_TO_ADDR
// end ;
7591: PPOPN 1
7593: END
// on ApemanTamed ( apeman , sci ) do begin if GetSide ( sci ) = 1 then
7594: LD_VAR 0 2
7598: PPUSH
7599: CALL_OW 255
7603: PUSH
7604: LD_INT 1
7606: EQUAL
7607: IFFALSE 7623
// apeman_counter := apeman_counter + 1 ;
7609: LD_ADDR_EXP 12
7613: PUSH
7614: LD_EXP 12
7618: PUSH
7619: LD_INT 1
7621: PLUS
7622: ST_TO_ADDR
// if not first_apeman_tamed then
7623: LD_EXP 8
7627: NOT
7628: IFFALSE 7828
// begin first_apeman_tamed := true ;
7630: LD_ADDR_EXP 8
7634: PUSH
7635: LD_INT 1
7637: ST_TO_ADDR
// if sci = Gladstone then
7638: LD_VAR 0 2
7642: PUSH
7643: LD_EXP 17
7647: EQUAL
7648: IFFALSE 7662
// Say ( Gladstone , D7b-Glad-1 ) ;
7650: LD_EXP 17
7654: PPUSH
7655: LD_STRING D7b-Glad-1
7657: PPUSH
7658: CALL_OW 88
// if sci = Denis then
7662: LD_VAR 0 2
7666: PUSH
7667: LD_EXP 19
7671: EQUAL
7672: IFFALSE 7686
// Say ( Denis , D7a-Den-1 ) ;
7674: LD_EXP 19
7678: PPUSH
7679: LD_STRING D7a-Den-1
7681: PPUSH
7682: CALL_OW 88
// if not sci in [ JMM , Gladstone , Denis , Lisa , Frank , Bobby , Cyrus , Donaldson ] then
7686: LD_VAR 0 2
7690: PUSH
7691: LD_EXP 16
7695: PUSH
7696: LD_EXP 17
7700: PUSH
7701: LD_EXP 19
7705: PUSH
7706: LD_EXP 22
7710: PUSH
7711: LD_EXP 23
7715: PUSH
7716: LD_EXP 24
7720: PUSH
7721: LD_EXP 25
7725: PUSH
7726: LD_EXP 21
7730: PUSH
7731: EMPTY
7732: LIST
7733: LIST
7734: LIST
7735: LIST
7736: LIST
7737: LIST
7738: LIST
7739: LIST
7740: IN
7741: NOT
7742: IFFALSE 7785
// begin if GetSex ( sci ) = sex_male then
7744: LD_VAR 0 2
7748: PPUSH
7749: CALL_OW 258
7753: PUSH
7754: LD_INT 1
7756: EQUAL
7757: IFFALSE 7773
// Say ( sci , D7c-Sci1-1 ) else
7759: LD_VAR 0 2
7763: PPUSH
7764: LD_STRING D7c-Sci1-1
7766: PPUSH
7767: CALL_OW 88
7771: GO 7785
// Say ( sci , D7c-FSci1-1 ) ;
7773: LD_VAR 0 2
7777: PPUSH
7778: LD_STRING D7c-FSci1-1
7780: PPUSH
7781: CALL_OW 88
// end ; if not sci = Gladstone then
7785: LD_VAR 0 2
7789: PUSH
7790: LD_EXP 17
7794: EQUAL
7795: NOT
7796: IFFALSE 7810
// Say ( Gladstone , D7c-Glad-1 ) ;
7798: LD_EXP 17
7802: PPUSH
7803: LD_STRING D7c-Glad-1
7805: PPUSH
7806: CALL_OW 88
// if Lisa then
7810: LD_EXP 22
7814: IFFALSE 7828
// Say ( Lisa , D8-Lisa-1 ) ;
7816: LD_EXP 22
7820: PPUSH
7821: LD_STRING D8-Lisa-1
7823: PPUSH
7824: CALL_OW 88
// end ; end ; end_of_file
7828: PPOPN 2
7830: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
7831: LD_INT 0
7833: PPUSH
// ar_miner := 81 ;
7834: LD_ADDR_EXP 36
7838: PUSH
7839: LD_INT 81
7841: ST_TO_ADDR
// ar_crane := 88 ;
7842: LD_ADDR_EXP 35
7846: PUSH
7847: LD_INT 88
7849: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
7850: LD_ADDR_EXP 30
7854: PUSH
7855: LD_INT 89
7857: ST_TO_ADDR
// us_hack := 99 ;
7858: LD_ADDR_EXP 31
7862: PUSH
7863: LD_INT 99
7865: ST_TO_ADDR
// us_artillery := 97 ;
7866: LD_ADDR_EXP 32
7870: PUSH
7871: LD_INT 97
7873: ST_TO_ADDR
// ar_bio_bomb := 91 ;
7874: LD_ADDR_EXP 33
7878: PUSH
7879: LD_INT 91
7881: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
7882: LD_ADDR_EXP 34
7886: PUSH
7887: LD_INT 92
7889: ST_TO_ADDR
// ru_radar := 98 ;
7890: LD_ADDR_EXP 29
7894: PUSH
7895: LD_INT 98
7897: ST_TO_ADDR
// tech_Artillery := 80 ;
7898: LD_ADDR_EXP 37
7902: PUSH
7903: LD_INT 80
7905: ST_TO_ADDR
// tech_RadMat := 81 ;
7906: LD_ADDR_EXP 38
7910: PUSH
7911: LD_INT 81
7913: ST_TO_ADDR
// tech_BasicTools := 82 ;
7914: LD_ADDR_EXP 39
7918: PUSH
7919: LD_INT 82
7921: ST_TO_ADDR
// tech_Cargo := 83 ;
7922: LD_ADDR_EXP 40
7926: PUSH
7927: LD_INT 83
7929: ST_TO_ADDR
// tech_Track := 84 ;
7930: LD_ADDR_EXP 41
7934: PUSH
7935: LD_INT 84
7937: ST_TO_ADDR
// tech_Crane := 85 ;
7938: LD_ADDR_EXP 42
7942: PUSH
7943: LD_INT 85
7945: ST_TO_ADDR
// tech_Bulldozer := 86 ;
7946: LD_ADDR_EXP 43
7950: PUSH
7951: LD_INT 86
7953: ST_TO_ADDR
// tech_Hovercraft := 87 ;
7954: LD_ADDR_EXP 44
7958: PUSH
7959: LD_INT 87
7961: ST_TO_ADDR
// class_mastodont := 31 ;
7962: LD_ADDR_EXP 45
7966: PUSH
7967: LD_INT 31
7969: ST_TO_ADDR
// class_horse := 21 ;
7970: LD_ADDR_EXP 46
7974: PUSH
7975: LD_INT 21
7977: ST_TO_ADDR
// end ;
7978: LD_VAR 0 1
7982: RET
// every 1 do
7983: GO 7985
7985: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
7986: CALL 7831 0 0
7990: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
7991: LD_INT 0
7993: PPUSH
// if p2 = 100 then
7994: LD_VAR 0 2
7998: PUSH
7999: LD_INT 100
8001: EQUAL
8002: IFFALSE 8951
// begin if not StreamModeActive then
8004: LD_EXP 47
8008: NOT
8009: IFFALSE 8019
// StreamModeActive := true ;
8011: LD_ADDR_EXP 47
8015: PUSH
8016: LD_INT 1
8018: ST_TO_ADDR
// if p3 = 0 then
8019: LD_VAR 0 3
8023: PUSH
8024: LD_INT 0
8026: EQUAL
8027: IFFALSE 8033
// InitStreamMode ;
8029: CALL 9111 0 0
// if p3 = 1 then
8033: LD_VAR 0 3
8037: PUSH
8038: LD_INT 1
8040: EQUAL
8041: IFFALSE 8051
// sRocket := true ;
8043: LD_ADDR_EXP 52
8047: PUSH
8048: LD_INT 1
8050: ST_TO_ADDR
// if p3 = 2 then
8051: LD_VAR 0 3
8055: PUSH
8056: LD_INT 2
8058: EQUAL
8059: IFFALSE 8069
// sSpeed := true ;
8061: LD_ADDR_EXP 51
8065: PUSH
8066: LD_INT 1
8068: ST_TO_ADDR
// if p3 = 3 then
8069: LD_VAR 0 3
8073: PUSH
8074: LD_INT 3
8076: EQUAL
8077: IFFALSE 8087
// sEngine := true ;
8079: LD_ADDR_EXP 53
8083: PUSH
8084: LD_INT 1
8086: ST_TO_ADDR
// if p3 = 4 then
8087: LD_VAR 0 3
8091: PUSH
8092: LD_INT 4
8094: EQUAL
8095: IFFALSE 8105
// sSpec := true ;
8097: LD_ADDR_EXP 50
8101: PUSH
8102: LD_INT 1
8104: ST_TO_ADDR
// if p3 = 5 then
8105: LD_VAR 0 3
8109: PUSH
8110: LD_INT 5
8112: EQUAL
8113: IFFALSE 8123
// sLevel := true ;
8115: LD_ADDR_EXP 54
8119: PUSH
8120: LD_INT 1
8122: ST_TO_ADDR
// if p3 = 6 then
8123: LD_VAR 0 3
8127: PUSH
8128: LD_INT 6
8130: EQUAL
8131: IFFALSE 8141
// sArmoury := true ;
8133: LD_ADDR_EXP 55
8137: PUSH
8138: LD_INT 1
8140: ST_TO_ADDR
// if p3 = 7 then
8141: LD_VAR 0 3
8145: PUSH
8146: LD_INT 7
8148: EQUAL
8149: IFFALSE 8159
// sRadar := true ;
8151: LD_ADDR_EXP 56
8155: PUSH
8156: LD_INT 1
8158: ST_TO_ADDR
// if p3 = 8 then
8159: LD_VAR 0 3
8163: PUSH
8164: LD_INT 8
8166: EQUAL
8167: IFFALSE 8177
// sBunker := true ;
8169: LD_ADDR_EXP 57
8173: PUSH
8174: LD_INT 1
8176: ST_TO_ADDR
// if p3 = 9 then
8177: LD_VAR 0 3
8181: PUSH
8182: LD_INT 9
8184: EQUAL
8185: IFFALSE 8195
// sHack := true ;
8187: LD_ADDR_EXP 58
8191: PUSH
8192: LD_INT 1
8194: ST_TO_ADDR
// if p3 = 10 then
8195: LD_VAR 0 3
8199: PUSH
8200: LD_INT 10
8202: EQUAL
8203: IFFALSE 8213
// sFire := true ;
8205: LD_ADDR_EXP 59
8209: PUSH
8210: LD_INT 1
8212: ST_TO_ADDR
// if p3 = 11 then
8213: LD_VAR 0 3
8217: PUSH
8218: LD_INT 11
8220: EQUAL
8221: IFFALSE 8231
// sRefresh := true ;
8223: LD_ADDR_EXP 60
8227: PUSH
8228: LD_INT 1
8230: ST_TO_ADDR
// if p3 = 12 then
8231: LD_VAR 0 3
8235: PUSH
8236: LD_INT 12
8238: EQUAL
8239: IFFALSE 8249
// sExp := true ;
8241: LD_ADDR_EXP 61
8245: PUSH
8246: LD_INT 1
8248: ST_TO_ADDR
// if p3 = 13 then
8249: LD_VAR 0 3
8253: PUSH
8254: LD_INT 13
8256: EQUAL
8257: IFFALSE 8267
// sDepot := true ;
8259: LD_ADDR_EXP 62
8263: PUSH
8264: LD_INT 1
8266: ST_TO_ADDR
// if p3 = 14 then
8267: LD_VAR 0 3
8271: PUSH
8272: LD_INT 14
8274: EQUAL
8275: IFFALSE 8285
// sFlag := true ;
8277: LD_ADDR_EXP 63
8281: PUSH
8282: LD_INT 1
8284: ST_TO_ADDR
// if p3 = 15 then
8285: LD_VAR 0 3
8289: PUSH
8290: LD_INT 15
8292: EQUAL
8293: IFFALSE 8303
// sKamikadze := true ;
8295: LD_ADDR_EXP 71
8299: PUSH
8300: LD_INT 1
8302: ST_TO_ADDR
// if p3 = 16 then
8303: LD_VAR 0 3
8307: PUSH
8308: LD_INT 16
8310: EQUAL
8311: IFFALSE 8321
// sTroll := true ;
8313: LD_ADDR_EXP 72
8317: PUSH
8318: LD_INT 1
8320: ST_TO_ADDR
// if p3 = 17 then
8321: LD_VAR 0 3
8325: PUSH
8326: LD_INT 17
8328: EQUAL
8329: IFFALSE 8339
// sSlow := true ;
8331: LD_ADDR_EXP 73
8335: PUSH
8336: LD_INT 1
8338: ST_TO_ADDR
// if p3 = 18 then
8339: LD_VAR 0 3
8343: PUSH
8344: LD_INT 18
8346: EQUAL
8347: IFFALSE 8357
// sLack := true ;
8349: LD_ADDR_EXP 74
8353: PUSH
8354: LD_INT 1
8356: ST_TO_ADDR
// if p3 = 19 then
8357: LD_VAR 0 3
8361: PUSH
8362: LD_INT 19
8364: EQUAL
8365: IFFALSE 8375
// sTank := true ;
8367: LD_ADDR_EXP 76
8371: PUSH
8372: LD_INT 1
8374: ST_TO_ADDR
// if p3 = 20 then
8375: LD_VAR 0 3
8379: PUSH
8380: LD_INT 20
8382: EQUAL
8383: IFFALSE 8393
// sRemote := true ;
8385: LD_ADDR_EXP 77
8389: PUSH
8390: LD_INT 1
8392: ST_TO_ADDR
// if p3 = 21 then
8393: LD_VAR 0 3
8397: PUSH
8398: LD_INT 21
8400: EQUAL
8401: IFFALSE 8411
// sPowell := true ;
8403: LD_ADDR_EXP 78
8407: PUSH
8408: LD_INT 1
8410: ST_TO_ADDR
// if p3 = 22 then
8411: LD_VAR 0 3
8415: PUSH
8416: LD_INT 22
8418: EQUAL
8419: IFFALSE 8429
// sTeleport := true ;
8421: LD_ADDR_EXP 81
8425: PUSH
8426: LD_INT 1
8428: ST_TO_ADDR
// if p3 = 23 then
8429: LD_VAR 0 3
8433: PUSH
8434: LD_INT 23
8436: EQUAL
8437: IFFALSE 8447
// sOilTower := true ;
8439: LD_ADDR_EXP 83
8443: PUSH
8444: LD_INT 1
8446: ST_TO_ADDR
// if p3 = 24 then
8447: LD_VAR 0 3
8451: PUSH
8452: LD_INT 24
8454: EQUAL
8455: IFFALSE 8465
// sShovel := true ;
8457: LD_ADDR_EXP 84
8461: PUSH
8462: LD_INT 1
8464: ST_TO_ADDR
// if p3 = 25 then
8465: LD_VAR 0 3
8469: PUSH
8470: LD_INT 25
8472: EQUAL
8473: IFFALSE 8483
// sSheik := true ;
8475: LD_ADDR_EXP 85
8479: PUSH
8480: LD_INT 1
8482: ST_TO_ADDR
// if p3 = 26 then
8483: LD_VAR 0 3
8487: PUSH
8488: LD_INT 26
8490: EQUAL
8491: IFFALSE 8501
// sEarthquake := true ;
8493: LD_ADDR_EXP 87
8497: PUSH
8498: LD_INT 1
8500: ST_TO_ADDR
// if p3 = 27 then
8501: LD_VAR 0 3
8505: PUSH
8506: LD_INT 27
8508: EQUAL
8509: IFFALSE 8519
// sAI := true ;
8511: LD_ADDR_EXP 88
8515: PUSH
8516: LD_INT 1
8518: ST_TO_ADDR
// if p3 = 28 then
8519: LD_VAR 0 3
8523: PUSH
8524: LD_INT 28
8526: EQUAL
8527: IFFALSE 8537
// sCargo := true ;
8529: LD_ADDR_EXP 91
8533: PUSH
8534: LD_INT 1
8536: ST_TO_ADDR
// if p3 = 29 then
8537: LD_VAR 0 3
8541: PUSH
8542: LD_INT 29
8544: EQUAL
8545: IFFALSE 8555
// sDLaser := true ;
8547: LD_ADDR_EXP 92
8551: PUSH
8552: LD_INT 1
8554: ST_TO_ADDR
// if p3 = 30 then
8555: LD_VAR 0 3
8559: PUSH
8560: LD_INT 30
8562: EQUAL
8563: IFFALSE 8573
// sExchange := true ;
8565: LD_ADDR_EXP 93
8569: PUSH
8570: LD_INT 1
8572: ST_TO_ADDR
// if p3 = 31 then
8573: LD_VAR 0 3
8577: PUSH
8578: LD_INT 31
8580: EQUAL
8581: IFFALSE 8591
// sFac := true ;
8583: LD_ADDR_EXP 94
8587: PUSH
8588: LD_INT 1
8590: ST_TO_ADDR
// if p3 = 32 then
8591: LD_VAR 0 3
8595: PUSH
8596: LD_INT 32
8598: EQUAL
8599: IFFALSE 8609
// sPower := true ;
8601: LD_ADDR_EXP 95
8605: PUSH
8606: LD_INT 1
8608: ST_TO_ADDR
// if p3 = 33 then
8609: LD_VAR 0 3
8613: PUSH
8614: LD_INT 33
8616: EQUAL
8617: IFFALSE 8627
// sRandom := true ;
8619: LD_ADDR_EXP 96
8623: PUSH
8624: LD_INT 1
8626: ST_TO_ADDR
// if p3 = 34 then
8627: LD_VAR 0 3
8631: PUSH
8632: LD_INT 34
8634: EQUAL
8635: IFFALSE 8645
// sShield := true ;
8637: LD_ADDR_EXP 97
8641: PUSH
8642: LD_INT 1
8644: ST_TO_ADDR
// if p3 = 35 then
8645: LD_VAR 0 3
8649: PUSH
8650: LD_INT 35
8652: EQUAL
8653: IFFALSE 8663
// sTime := true ;
8655: LD_ADDR_EXP 98
8659: PUSH
8660: LD_INT 1
8662: ST_TO_ADDR
// if p3 = 36 then
8663: LD_VAR 0 3
8667: PUSH
8668: LD_INT 36
8670: EQUAL
8671: IFFALSE 8681
// sTools := true ;
8673: LD_ADDR_EXP 99
8677: PUSH
8678: LD_INT 1
8680: ST_TO_ADDR
// if p3 = 101 then
8681: LD_VAR 0 3
8685: PUSH
8686: LD_INT 101
8688: EQUAL
8689: IFFALSE 8699
// sSold := true ;
8691: LD_ADDR_EXP 64
8695: PUSH
8696: LD_INT 1
8698: ST_TO_ADDR
// if p3 = 102 then
8699: LD_VAR 0 3
8703: PUSH
8704: LD_INT 102
8706: EQUAL
8707: IFFALSE 8717
// sDiff := true ;
8709: LD_ADDR_EXP 65
8713: PUSH
8714: LD_INT 1
8716: ST_TO_ADDR
// if p3 = 103 then
8717: LD_VAR 0 3
8721: PUSH
8722: LD_INT 103
8724: EQUAL
8725: IFFALSE 8735
// sFog := true ;
8727: LD_ADDR_EXP 68
8731: PUSH
8732: LD_INT 1
8734: ST_TO_ADDR
// if p3 = 104 then
8735: LD_VAR 0 3
8739: PUSH
8740: LD_INT 104
8742: EQUAL
8743: IFFALSE 8753
// sReset := true ;
8745: LD_ADDR_EXP 69
8749: PUSH
8750: LD_INT 1
8752: ST_TO_ADDR
// if p3 = 105 then
8753: LD_VAR 0 3
8757: PUSH
8758: LD_INT 105
8760: EQUAL
8761: IFFALSE 8771
// sSun := true ;
8763: LD_ADDR_EXP 70
8767: PUSH
8768: LD_INT 1
8770: ST_TO_ADDR
// if p3 = 106 then
8771: LD_VAR 0 3
8775: PUSH
8776: LD_INT 106
8778: EQUAL
8779: IFFALSE 8789
// sTiger := true ;
8781: LD_ADDR_EXP 66
8785: PUSH
8786: LD_INT 1
8788: ST_TO_ADDR
// if p3 = 107 then
8789: LD_VAR 0 3
8793: PUSH
8794: LD_INT 107
8796: EQUAL
8797: IFFALSE 8807
// sBomb := true ;
8799: LD_ADDR_EXP 67
8803: PUSH
8804: LD_INT 1
8806: ST_TO_ADDR
// if p3 = 108 then
8807: LD_VAR 0 3
8811: PUSH
8812: LD_INT 108
8814: EQUAL
8815: IFFALSE 8825
// sWound := true ;
8817: LD_ADDR_EXP 75
8821: PUSH
8822: LD_INT 1
8824: ST_TO_ADDR
// if p3 = 109 then
8825: LD_VAR 0 3
8829: PUSH
8830: LD_INT 109
8832: EQUAL
8833: IFFALSE 8843
// sBetray := true ;
8835: LD_ADDR_EXP 79
8839: PUSH
8840: LD_INT 1
8842: ST_TO_ADDR
// if p3 = 110 then
8843: LD_VAR 0 3
8847: PUSH
8848: LD_INT 110
8850: EQUAL
8851: IFFALSE 8861
// sContamin := true ;
8853: LD_ADDR_EXP 80
8857: PUSH
8858: LD_INT 1
8860: ST_TO_ADDR
// if p3 = 111 then
8861: LD_VAR 0 3
8865: PUSH
8866: LD_INT 111
8868: EQUAL
8869: IFFALSE 8879
// sOil := true ;
8871: LD_ADDR_EXP 82
8875: PUSH
8876: LD_INT 1
8878: ST_TO_ADDR
// if p3 = 112 then
8879: LD_VAR 0 3
8883: PUSH
8884: LD_INT 112
8886: EQUAL
8887: IFFALSE 8897
// sStu := true ;
8889: LD_ADDR_EXP 86
8893: PUSH
8894: LD_INT 1
8896: ST_TO_ADDR
// if p3 = 113 then
8897: LD_VAR 0 3
8901: PUSH
8902: LD_INT 113
8904: EQUAL
8905: IFFALSE 8915
// sBazooka := true ;
8907: LD_ADDR_EXP 89
8911: PUSH
8912: LD_INT 1
8914: ST_TO_ADDR
// if p3 = 114 then
8915: LD_VAR 0 3
8919: PUSH
8920: LD_INT 114
8922: EQUAL
8923: IFFALSE 8933
// sMortar := true ;
8925: LD_ADDR_EXP 90
8929: PUSH
8930: LD_INT 1
8932: ST_TO_ADDR
// if p3 = 115 then
8933: LD_VAR 0 3
8937: PUSH
8938: LD_INT 115
8940: EQUAL
8941: IFFALSE 8951
// sRanger := true ;
8943: LD_ADDR_EXP 100
8947: PUSH
8948: LD_INT 1
8950: ST_TO_ADDR
// end ; if p2 = 101 then
8951: LD_VAR 0 2
8955: PUSH
8956: LD_INT 101
8958: EQUAL
8959: IFFALSE 9087
// begin case p3 of 1 :
8961: LD_VAR 0 3
8965: PUSH
8966: LD_INT 1
8968: DOUBLE
8969: EQUAL
8970: IFTRUE 8974
8972: GO 8981
8974: POP
// hHackUnlimitedResources ; 2 :
8975: CALL 20124 0 0
8979: GO 9087
8981: LD_INT 2
8983: DOUBLE
8984: EQUAL
8985: IFTRUE 8989
8987: GO 8996
8989: POP
// hHackSetLevel10 ; 3 :
8990: CALL 20257 0 0
8994: GO 9087
8996: LD_INT 3
8998: DOUBLE
8999: EQUAL
9000: IFTRUE 9004
9002: GO 9011
9004: POP
// hHackSetLevel10YourUnits ; 4 :
9005: CALL 20342 0 0
9009: GO 9087
9011: LD_INT 4
9013: DOUBLE
9014: EQUAL
9015: IFTRUE 9019
9017: GO 9026
9019: POP
// hHackInvincible ; 5 :
9020: CALL 20790 0 0
9024: GO 9087
9026: LD_INT 5
9028: DOUBLE
9029: EQUAL
9030: IFTRUE 9034
9032: GO 9041
9034: POP
// hHackInvisible ; 6 :
9035: CALL 20901 0 0
9039: GO 9087
9041: LD_INT 6
9043: DOUBLE
9044: EQUAL
9045: IFTRUE 9049
9047: GO 9056
9049: POP
// hHackChangeYourSide ; 7 :
9050: CALL 20958 0 0
9054: GO 9087
9056: LD_INT 7
9058: DOUBLE
9059: EQUAL
9060: IFTRUE 9064
9062: GO 9071
9064: POP
// hHackChangeUnitSide ; 8 :
9065: CALL 21000 0 0
9069: GO 9087
9071: LD_INT 8
9073: DOUBLE
9074: EQUAL
9075: IFTRUE 9079
9077: GO 9086
9079: POP
// hHackFog ; end ;
9080: CALL 21101 0 0
9084: GO 9087
9086: POP
// end ; end ;
9087: LD_VAR 0 7
9091: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
9092: GO 9094
9094: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
9095: LD_STRING initStreamRollete();
9097: PPUSH
9098: CALL_OW 559
// InitStreamMode ;
9102: CALL 9111 0 0
// DefineStreamItems ( ) ;
9106: CALL 9551 0 0
// end ;
9110: END
// function InitStreamMode ; begin
9111: LD_INT 0
9113: PPUSH
// streamModeActive := false ;
9114: LD_ADDR_EXP 47
9118: PUSH
9119: LD_INT 0
9121: ST_TO_ADDR
// normalCounter := 36 ;
9122: LD_ADDR_EXP 48
9126: PUSH
9127: LD_INT 36
9129: ST_TO_ADDR
// hardcoreCounter := 16 ;
9130: LD_ADDR_EXP 49
9134: PUSH
9135: LD_INT 16
9137: ST_TO_ADDR
// sRocket := false ;
9138: LD_ADDR_EXP 52
9142: PUSH
9143: LD_INT 0
9145: ST_TO_ADDR
// sSpeed := false ;
9146: LD_ADDR_EXP 51
9150: PUSH
9151: LD_INT 0
9153: ST_TO_ADDR
// sEngine := false ;
9154: LD_ADDR_EXP 53
9158: PUSH
9159: LD_INT 0
9161: ST_TO_ADDR
// sSpec := false ;
9162: LD_ADDR_EXP 50
9166: PUSH
9167: LD_INT 0
9169: ST_TO_ADDR
// sLevel := false ;
9170: LD_ADDR_EXP 54
9174: PUSH
9175: LD_INT 0
9177: ST_TO_ADDR
// sArmoury := false ;
9178: LD_ADDR_EXP 55
9182: PUSH
9183: LD_INT 0
9185: ST_TO_ADDR
// sRadar := false ;
9186: LD_ADDR_EXP 56
9190: PUSH
9191: LD_INT 0
9193: ST_TO_ADDR
// sBunker := false ;
9194: LD_ADDR_EXP 57
9198: PUSH
9199: LD_INT 0
9201: ST_TO_ADDR
// sHack := false ;
9202: LD_ADDR_EXP 58
9206: PUSH
9207: LD_INT 0
9209: ST_TO_ADDR
// sFire := false ;
9210: LD_ADDR_EXP 59
9214: PUSH
9215: LD_INT 0
9217: ST_TO_ADDR
// sRefresh := false ;
9218: LD_ADDR_EXP 60
9222: PUSH
9223: LD_INT 0
9225: ST_TO_ADDR
// sExp := false ;
9226: LD_ADDR_EXP 61
9230: PUSH
9231: LD_INT 0
9233: ST_TO_ADDR
// sDepot := false ;
9234: LD_ADDR_EXP 62
9238: PUSH
9239: LD_INT 0
9241: ST_TO_ADDR
// sFlag := false ;
9242: LD_ADDR_EXP 63
9246: PUSH
9247: LD_INT 0
9249: ST_TO_ADDR
// sKamikadze := false ;
9250: LD_ADDR_EXP 71
9254: PUSH
9255: LD_INT 0
9257: ST_TO_ADDR
// sTroll := false ;
9258: LD_ADDR_EXP 72
9262: PUSH
9263: LD_INT 0
9265: ST_TO_ADDR
// sSlow := false ;
9266: LD_ADDR_EXP 73
9270: PUSH
9271: LD_INT 0
9273: ST_TO_ADDR
// sLack := false ;
9274: LD_ADDR_EXP 74
9278: PUSH
9279: LD_INT 0
9281: ST_TO_ADDR
// sTank := false ;
9282: LD_ADDR_EXP 76
9286: PUSH
9287: LD_INT 0
9289: ST_TO_ADDR
// sRemote := false ;
9290: LD_ADDR_EXP 77
9294: PUSH
9295: LD_INT 0
9297: ST_TO_ADDR
// sPowell := false ;
9298: LD_ADDR_EXP 78
9302: PUSH
9303: LD_INT 0
9305: ST_TO_ADDR
// sTeleport := false ;
9306: LD_ADDR_EXP 81
9310: PUSH
9311: LD_INT 0
9313: ST_TO_ADDR
// sOilTower := false ;
9314: LD_ADDR_EXP 83
9318: PUSH
9319: LD_INT 0
9321: ST_TO_ADDR
// sShovel := false ;
9322: LD_ADDR_EXP 84
9326: PUSH
9327: LD_INT 0
9329: ST_TO_ADDR
// sSheik := false ;
9330: LD_ADDR_EXP 85
9334: PUSH
9335: LD_INT 0
9337: ST_TO_ADDR
// sEarthquake := false ;
9338: LD_ADDR_EXP 87
9342: PUSH
9343: LD_INT 0
9345: ST_TO_ADDR
// sAI := false ;
9346: LD_ADDR_EXP 88
9350: PUSH
9351: LD_INT 0
9353: ST_TO_ADDR
// sCargo := false ;
9354: LD_ADDR_EXP 91
9358: PUSH
9359: LD_INT 0
9361: ST_TO_ADDR
// sDLaser := false ;
9362: LD_ADDR_EXP 92
9366: PUSH
9367: LD_INT 0
9369: ST_TO_ADDR
// sExchange := false ;
9370: LD_ADDR_EXP 93
9374: PUSH
9375: LD_INT 0
9377: ST_TO_ADDR
// sFac := false ;
9378: LD_ADDR_EXP 94
9382: PUSH
9383: LD_INT 0
9385: ST_TO_ADDR
// sPower := false ;
9386: LD_ADDR_EXP 95
9390: PUSH
9391: LD_INT 0
9393: ST_TO_ADDR
// sRandom := false ;
9394: LD_ADDR_EXP 96
9398: PUSH
9399: LD_INT 0
9401: ST_TO_ADDR
// sShield := false ;
9402: LD_ADDR_EXP 97
9406: PUSH
9407: LD_INT 0
9409: ST_TO_ADDR
// sTime := false ;
9410: LD_ADDR_EXP 98
9414: PUSH
9415: LD_INT 0
9417: ST_TO_ADDR
// sTools := false ;
9418: LD_ADDR_EXP 99
9422: PUSH
9423: LD_INT 0
9425: ST_TO_ADDR
// sSold := false ;
9426: LD_ADDR_EXP 64
9430: PUSH
9431: LD_INT 0
9433: ST_TO_ADDR
// sDiff := false ;
9434: LD_ADDR_EXP 65
9438: PUSH
9439: LD_INT 0
9441: ST_TO_ADDR
// sFog := false ;
9442: LD_ADDR_EXP 68
9446: PUSH
9447: LD_INT 0
9449: ST_TO_ADDR
// sReset := false ;
9450: LD_ADDR_EXP 69
9454: PUSH
9455: LD_INT 0
9457: ST_TO_ADDR
// sSun := false ;
9458: LD_ADDR_EXP 70
9462: PUSH
9463: LD_INT 0
9465: ST_TO_ADDR
// sTiger := false ;
9466: LD_ADDR_EXP 66
9470: PUSH
9471: LD_INT 0
9473: ST_TO_ADDR
// sBomb := false ;
9474: LD_ADDR_EXP 67
9478: PUSH
9479: LD_INT 0
9481: ST_TO_ADDR
// sWound := false ;
9482: LD_ADDR_EXP 75
9486: PUSH
9487: LD_INT 0
9489: ST_TO_ADDR
// sBetray := false ;
9490: LD_ADDR_EXP 79
9494: PUSH
9495: LD_INT 0
9497: ST_TO_ADDR
// sContamin := false ;
9498: LD_ADDR_EXP 80
9502: PUSH
9503: LD_INT 0
9505: ST_TO_ADDR
// sOil := false ;
9506: LD_ADDR_EXP 82
9510: PUSH
9511: LD_INT 0
9513: ST_TO_ADDR
// sStu := false ;
9514: LD_ADDR_EXP 86
9518: PUSH
9519: LD_INT 0
9521: ST_TO_ADDR
// sBazooka := false ;
9522: LD_ADDR_EXP 89
9526: PUSH
9527: LD_INT 0
9529: ST_TO_ADDR
// sMortar := false ;
9530: LD_ADDR_EXP 90
9534: PUSH
9535: LD_INT 0
9537: ST_TO_ADDR
// sRanger := false ;
9538: LD_ADDR_EXP 100
9542: PUSH
9543: LD_INT 0
9545: ST_TO_ADDR
// end ;
9546: LD_VAR 0 1
9550: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
9551: LD_INT 0
9553: PPUSH
9554: PPUSH
9555: PPUSH
9556: PPUSH
9557: PPUSH
// result := [ ] ;
9558: LD_ADDR_VAR 0 1
9562: PUSH
9563: EMPTY
9564: ST_TO_ADDR
// if campaign_id = 1 then
9565: LD_OWVAR 69
9569: PUSH
9570: LD_INT 1
9572: EQUAL
9573: IFFALSE 12511
// begin case mission_number of 1 :
9575: LD_OWVAR 70
9579: PUSH
9580: LD_INT 1
9582: DOUBLE
9583: EQUAL
9584: IFTRUE 9588
9586: GO 9652
9588: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
9589: LD_ADDR_VAR 0 1
9593: PUSH
9594: LD_INT 2
9596: PUSH
9597: LD_INT 4
9599: PUSH
9600: LD_INT 11
9602: PUSH
9603: LD_INT 12
9605: PUSH
9606: LD_INT 15
9608: PUSH
9609: LD_INT 16
9611: PUSH
9612: LD_INT 22
9614: PUSH
9615: LD_INT 23
9617: PUSH
9618: LD_INT 26
9620: PUSH
9621: EMPTY
9622: LIST
9623: LIST
9624: LIST
9625: LIST
9626: LIST
9627: LIST
9628: LIST
9629: LIST
9630: LIST
9631: PUSH
9632: LD_INT 101
9634: PUSH
9635: LD_INT 102
9637: PUSH
9638: LD_INT 106
9640: PUSH
9641: EMPTY
9642: LIST
9643: LIST
9644: LIST
9645: PUSH
9646: EMPTY
9647: LIST
9648: LIST
9649: ST_TO_ADDR
9650: GO 12509
9652: LD_INT 2
9654: DOUBLE
9655: EQUAL
9656: IFTRUE 9660
9658: GO 9732
9660: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
9661: LD_ADDR_VAR 0 1
9665: PUSH
9666: LD_INT 2
9668: PUSH
9669: LD_INT 4
9671: PUSH
9672: LD_INT 11
9674: PUSH
9675: LD_INT 12
9677: PUSH
9678: LD_INT 15
9680: PUSH
9681: LD_INT 16
9683: PUSH
9684: LD_INT 22
9686: PUSH
9687: LD_INT 23
9689: PUSH
9690: LD_INT 26
9692: PUSH
9693: EMPTY
9694: LIST
9695: LIST
9696: LIST
9697: LIST
9698: LIST
9699: LIST
9700: LIST
9701: LIST
9702: LIST
9703: PUSH
9704: LD_INT 101
9706: PUSH
9707: LD_INT 102
9709: PUSH
9710: LD_INT 105
9712: PUSH
9713: LD_INT 106
9715: PUSH
9716: LD_INT 108
9718: PUSH
9719: EMPTY
9720: LIST
9721: LIST
9722: LIST
9723: LIST
9724: LIST
9725: PUSH
9726: EMPTY
9727: LIST
9728: LIST
9729: ST_TO_ADDR
9730: GO 12509
9732: LD_INT 3
9734: DOUBLE
9735: EQUAL
9736: IFTRUE 9740
9738: GO 9816
9740: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
9741: LD_ADDR_VAR 0 1
9745: PUSH
9746: LD_INT 2
9748: PUSH
9749: LD_INT 4
9751: PUSH
9752: LD_INT 5
9754: PUSH
9755: LD_INT 11
9757: PUSH
9758: LD_INT 12
9760: PUSH
9761: LD_INT 15
9763: PUSH
9764: LD_INT 16
9766: PUSH
9767: LD_INT 22
9769: PUSH
9770: LD_INT 26
9772: PUSH
9773: LD_INT 36
9775: PUSH
9776: EMPTY
9777: LIST
9778: LIST
9779: LIST
9780: LIST
9781: LIST
9782: LIST
9783: LIST
9784: LIST
9785: LIST
9786: LIST
9787: PUSH
9788: LD_INT 101
9790: PUSH
9791: LD_INT 102
9793: PUSH
9794: LD_INT 105
9796: PUSH
9797: LD_INT 106
9799: PUSH
9800: LD_INT 108
9802: PUSH
9803: EMPTY
9804: LIST
9805: LIST
9806: LIST
9807: LIST
9808: LIST
9809: PUSH
9810: EMPTY
9811: LIST
9812: LIST
9813: ST_TO_ADDR
9814: GO 12509
9816: LD_INT 4
9818: DOUBLE
9819: EQUAL
9820: IFTRUE 9824
9822: GO 9908
9824: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
9825: LD_ADDR_VAR 0 1
9829: PUSH
9830: LD_INT 2
9832: PUSH
9833: LD_INT 4
9835: PUSH
9836: LD_INT 5
9838: PUSH
9839: LD_INT 8
9841: PUSH
9842: LD_INT 11
9844: PUSH
9845: LD_INT 12
9847: PUSH
9848: LD_INT 15
9850: PUSH
9851: LD_INT 16
9853: PUSH
9854: LD_INT 22
9856: PUSH
9857: LD_INT 23
9859: PUSH
9860: LD_INT 26
9862: PUSH
9863: LD_INT 36
9865: PUSH
9866: EMPTY
9867: LIST
9868: LIST
9869: LIST
9870: LIST
9871: LIST
9872: LIST
9873: LIST
9874: LIST
9875: LIST
9876: LIST
9877: LIST
9878: LIST
9879: PUSH
9880: LD_INT 101
9882: PUSH
9883: LD_INT 102
9885: PUSH
9886: LD_INT 105
9888: PUSH
9889: LD_INT 106
9891: PUSH
9892: LD_INT 108
9894: PUSH
9895: EMPTY
9896: LIST
9897: LIST
9898: LIST
9899: LIST
9900: LIST
9901: PUSH
9902: EMPTY
9903: LIST
9904: LIST
9905: ST_TO_ADDR
9906: GO 12509
9908: LD_INT 5
9910: DOUBLE
9911: EQUAL
9912: IFTRUE 9916
9914: GO 10016
9916: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
9917: LD_ADDR_VAR 0 1
9921: PUSH
9922: LD_INT 2
9924: PUSH
9925: LD_INT 4
9927: PUSH
9928: LD_INT 5
9930: PUSH
9931: LD_INT 6
9933: PUSH
9934: LD_INT 8
9936: PUSH
9937: LD_INT 11
9939: PUSH
9940: LD_INT 12
9942: PUSH
9943: LD_INT 15
9945: PUSH
9946: LD_INT 16
9948: PUSH
9949: LD_INT 22
9951: PUSH
9952: LD_INT 23
9954: PUSH
9955: LD_INT 25
9957: PUSH
9958: LD_INT 26
9960: PUSH
9961: LD_INT 36
9963: PUSH
9964: EMPTY
9965: LIST
9966: LIST
9967: LIST
9968: LIST
9969: LIST
9970: LIST
9971: LIST
9972: LIST
9973: LIST
9974: LIST
9975: LIST
9976: LIST
9977: LIST
9978: LIST
9979: PUSH
9980: LD_INT 101
9982: PUSH
9983: LD_INT 102
9985: PUSH
9986: LD_INT 105
9988: PUSH
9989: LD_INT 106
9991: PUSH
9992: LD_INT 108
9994: PUSH
9995: LD_INT 109
9997: PUSH
9998: LD_INT 112
10000: PUSH
10001: EMPTY
10002: LIST
10003: LIST
10004: LIST
10005: LIST
10006: LIST
10007: LIST
10008: LIST
10009: PUSH
10010: EMPTY
10011: LIST
10012: LIST
10013: ST_TO_ADDR
10014: GO 12509
10016: LD_INT 6
10018: DOUBLE
10019: EQUAL
10020: IFTRUE 10024
10022: GO 10144
10024: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
10025: LD_ADDR_VAR 0 1
10029: PUSH
10030: LD_INT 2
10032: PUSH
10033: LD_INT 4
10035: PUSH
10036: LD_INT 5
10038: PUSH
10039: LD_INT 6
10041: PUSH
10042: LD_INT 8
10044: PUSH
10045: LD_INT 11
10047: PUSH
10048: LD_INT 12
10050: PUSH
10051: LD_INT 15
10053: PUSH
10054: LD_INT 16
10056: PUSH
10057: LD_INT 20
10059: PUSH
10060: LD_INT 21
10062: PUSH
10063: LD_INT 22
10065: PUSH
10066: LD_INT 23
10068: PUSH
10069: LD_INT 25
10071: PUSH
10072: LD_INT 26
10074: PUSH
10075: LD_INT 30
10077: PUSH
10078: LD_INT 31
10080: PUSH
10081: LD_INT 32
10083: PUSH
10084: LD_INT 36
10086: PUSH
10087: EMPTY
10088: LIST
10089: LIST
10090: LIST
10091: LIST
10092: LIST
10093: LIST
10094: LIST
10095: LIST
10096: LIST
10097: LIST
10098: LIST
10099: LIST
10100: LIST
10101: LIST
10102: LIST
10103: LIST
10104: LIST
10105: LIST
10106: LIST
10107: PUSH
10108: LD_INT 101
10110: PUSH
10111: LD_INT 102
10113: PUSH
10114: LD_INT 105
10116: PUSH
10117: LD_INT 106
10119: PUSH
10120: LD_INT 108
10122: PUSH
10123: LD_INT 109
10125: PUSH
10126: LD_INT 112
10128: PUSH
10129: EMPTY
10130: LIST
10131: LIST
10132: LIST
10133: LIST
10134: LIST
10135: LIST
10136: LIST
10137: PUSH
10138: EMPTY
10139: LIST
10140: LIST
10141: ST_TO_ADDR
10142: GO 12509
10144: LD_INT 7
10146: DOUBLE
10147: EQUAL
10148: IFTRUE 10152
10150: GO 10252
10152: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
10153: LD_ADDR_VAR 0 1
10157: PUSH
10158: LD_INT 2
10160: PUSH
10161: LD_INT 4
10163: PUSH
10164: LD_INT 5
10166: PUSH
10167: LD_INT 7
10169: PUSH
10170: LD_INT 11
10172: PUSH
10173: LD_INT 12
10175: PUSH
10176: LD_INT 15
10178: PUSH
10179: LD_INT 16
10181: PUSH
10182: LD_INT 20
10184: PUSH
10185: LD_INT 21
10187: PUSH
10188: LD_INT 22
10190: PUSH
10191: LD_INT 23
10193: PUSH
10194: LD_INT 25
10196: PUSH
10197: LD_INT 26
10199: PUSH
10200: EMPTY
10201: LIST
10202: LIST
10203: LIST
10204: LIST
10205: LIST
10206: LIST
10207: LIST
10208: LIST
10209: LIST
10210: LIST
10211: LIST
10212: LIST
10213: LIST
10214: LIST
10215: PUSH
10216: LD_INT 101
10218: PUSH
10219: LD_INT 102
10221: PUSH
10222: LD_INT 103
10224: PUSH
10225: LD_INT 105
10227: PUSH
10228: LD_INT 106
10230: PUSH
10231: LD_INT 108
10233: PUSH
10234: LD_INT 112
10236: PUSH
10237: EMPTY
10238: LIST
10239: LIST
10240: LIST
10241: LIST
10242: LIST
10243: LIST
10244: LIST
10245: PUSH
10246: EMPTY
10247: LIST
10248: LIST
10249: ST_TO_ADDR
10250: GO 12509
10252: LD_INT 8
10254: DOUBLE
10255: EQUAL
10256: IFTRUE 10260
10258: GO 10388
10260: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
10261: LD_ADDR_VAR 0 1
10265: PUSH
10266: LD_INT 2
10268: PUSH
10269: LD_INT 4
10271: PUSH
10272: LD_INT 5
10274: PUSH
10275: LD_INT 6
10277: PUSH
10278: LD_INT 7
10280: PUSH
10281: LD_INT 8
10283: PUSH
10284: LD_INT 11
10286: PUSH
10287: LD_INT 12
10289: PUSH
10290: LD_INT 15
10292: PUSH
10293: LD_INT 16
10295: PUSH
10296: LD_INT 20
10298: PUSH
10299: LD_INT 21
10301: PUSH
10302: LD_INT 22
10304: PUSH
10305: LD_INT 23
10307: PUSH
10308: LD_INT 25
10310: PUSH
10311: LD_INT 26
10313: PUSH
10314: LD_INT 30
10316: PUSH
10317: LD_INT 31
10319: PUSH
10320: LD_INT 32
10322: PUSH
10323: LD_INT 36
10325: PUSH
10326: EMPTY
10327: LIST
10328: LIST
10329: LIST
10330: LIST
10331: LIST
10332: LIST
10333: LIST
10334: LIST
10335: LIST
10336: LIST
10337: LIST
10338: LIST
10339: LIST
10340: LIST
10341: LIST
10342: LIST
10343: LIST
10344: LIST
10345: LIST
10346: LIST
10347: PUSH
10348: LD_INT 101
10350: PUSH
10351: LD_INT 102
10353: PUSH
10354: LD_INT 103
10356: PUSH
10357: LD_INT 105
10359: PUSH
10360: LD_INT 106
10362: PUSH
10363: LD_INT 108
10365: PUSH
10366: LD_INT 109
10368: PUSH
10369: LD_INT 112
10371: PUSH
10372: EMPTY
10373: LIST
10374: LIST
10375: LIST
10376: LIST
10377: LIST
10378: LIST
10379: LIST
10380: LIST
10381: PUSH
10382: EMPTY
10383: LIST
10384: LIST
10385: ST_TO_ADDR
10386: GO 12509
10388: LD_INT 9
10390: DOUBLE
10391: EQUAL
10392: IFTRUE 10396
10394: GO 10532
10396: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
10397: LD_ADDR_VAR 0 1
10401: PUSH
10402: LD_INT 2
10404: PUSH
10405: LD_INT 4
10407: PUSH
10408: LD_INT 5
10410: PUSH
10411: LD_INT 6
10413: PUSH
10414: LD_INT 7
10416: PUSH
10417: LD_INT 8
10419: PUSH
10420: LD_INT 11
10422: PUSH
10423: LD_INT 12
10425: PUSH
10426: LD_INT 15
10428: PUSH
10429: LD_INT 16
10431: PUSH
10432: LD_INT 20
10434: PUSH
10435: LD_INT 21
10437: PUSH
10438: LD_INT 22
10440: PUSH
10441: LD_INT 23
10443: PUSH
10444: LD_INT 25
10446: PUSH
10447: LD_INT 26
10449: PUSH
10450: LD_INT 28
10452: PUSH
10453: LD_INT 30
10455: PUSH
10456: LD_INT 31
10458: PUSH
10459: LD_INT 32
10461: PUSH
10462: LD_INT 36
10464: PUSH
10465: EMPTY
10466: LIST
10467: LIST
10468: LIST
10469: LIST
10470: LIST
10471: LIST
10472: LIST
10473: LIST
10474: LIST
10475: LIST
10476: LIST
10477: LIST
10478: LIST
10479: LIST
10480: LIST
10481: LIST
10482: LIST
10483: LIST
10484: LIST
10485: LIST
10486: LIST
10487: PUSH
10488: LD_INT 101
10490: PUSH
10491: LD_INT 102
10493: PUSH
10494: LD_INT 103
10496: PUSH
10497: LD_INT 105
10499: PUSH
10500: LD_INT 106
10502: PUSH
10503: LD_INT 108
10505: PUSH
10506: LD_INT 109
10508: PUSH
10509: LD_INT 112
10511: PUSH
10512: LD_INT 114
10514: PUSH
10515: EMPTY
10516: LIST
10517: LIST
10518: LIST
10519: LIST
10520: LIST
10521: LIST
10522: LIST
10523: LIST
10524: LIST
10525: PUSH
10526: EMPTY
10527: LIST
10528: LIST
10529: ST_TO_ADDR
10530: GO 12509
10532: LD_INT 10
10534: DOUBLE
10535: EQUAL
10536: IFTRUE 10540
10538: GO 10724
10540: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
10541: LD_ADDR_VAR 0 1
10545: PUSH
10546: LD_INT 2
10548: PUSH
10549: LD_INT 4
10551: PUSH
10552: LD_INT 5
10554: PUSH
10555: LD_INT 6
10557: PUSH
10558: LD_INT 7
10560: PUSH
10561: LD_INT 8
10563: PUSH
10564: LD_INT 9
10566: PUSH
10567: LD_INT 10
10569: PUSH
10570: LD_INT 11
10572: PUSH
10573: LD_INT 12
10575: PUSH
10576: LD_INT 13
10578: PUSH
10579: LD_INT 14
10581: PUSH
10582: LD_INT 15
10584: PUSH
10585: LD_INT 16
10587: PUSH
10588: LD_INT 17
10590: PUSH
10591: LD_INT 18
10593: PUSH
10594: LD_INT 19
10596: PUSH
10597: LD_INT 20
10599: PUSH
10600: LD_INT 21
10602: PUSH
10603: LD_INT 22
10605: PUSH
10606: LD_INT 23
10608: PUSH
10609: LD_INT 24
10611: PUSH
10612: LD_INT 25
10614: PUSH
10615: LD_INT 26
10617: PUSH
10618: LD_INT 28
10620: PUSH
10621: LD_INT 30
10623: PUSH
10624: LD_INT 31
10626: PUSH
10627: LD_INT 32
10629: PUSH
10630: LD_INT 36
10632: PUSH
10633: EMPTY
10634: LIST
10635: LIST
10636: LIST
10637: LIST
10638: LIST
10639: LIST
10640: LIST
10641: LIST
10642: LIST
10643: LIST
10644: LIST
10645: LIST
10646: LIST
10647: LIST
10648: LIST
10649: LIST
10650: LIST
10651: LIST
10652: LIST
10653: LIST
10654: LIST
10655: LIST
10656: LIST
10657: LIST
10658: LIST
10659: LIST
10660: LIST
10661: LIST
10662: LIST
10663: PUSH
10664: LD_INT 101
10666: PUSH
10667: LD_INT 102
10669: PUSH
10670: LD_INT 103
10672: PUSH
10673: LD_INT 104
10675: PUSH
10676: LD_INT 105
10678: PUSH
10679: LD_INT 106
10681: PUSH
10682: LD_INT 107
10684: PUSH
10685: LD_INT 108
10687: PUSH
10688: LD_INT 109
10690: PUSH
10691: LD_INT 110
10693: PUSH
10694: LD_INT 111
10696: PUSH
10697: LD_INT 112
10699: PUSH
10700: LD_INT 114
10702: PUSH
10703: EMPTY
10704: LIST
10705: LIST
10706: LIST
10707: LIST
10708: LIST
10709: LIST
10710: LIST
10711: LIST
10712: LIST
10713: LIST
10714: LIST
10715: LIST
10716: LIST
10717: PUSH
10718: EMPTY
10719: LIST
10720: LIST
10721: ST_TO_ADDR
10722: GO 12509
10724: LD_INT 11
10726: DOUBLE
10727: EQUAL
10728: IFTRUE 10732
10730: GO 10924
10732: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
10733: LD_ADDR_VAR 0 1
10737: PUSH
10738: LD_INT 2
10740: PUSH
10741: LD_INT 3
10743: PUSH
10744: LD_INT 4
10746: PUSH
10747: LD_INT 5
10749: PUSH
10750: LD_INT 6
10752: PUSH
10753: LD_INT 7
10755: PUSH
10756: LD_INT 8
10758: PUSH
10759: LD_INT 9
10761: PUSH
10762: LD_INT 10
10764: PUSH
10765: LD_INT 11
10767: PUSH
10768: LD_INT 12
10770: PUSH
10771: LD_INT 13
10773: PUSH
10774: LD_INT 14
10776: PUSH
10777: LD_INT 15
10779: PUSH
10780: LD_INT 16
10782: PUSH
10783: LD_INT 17
10785: PUSH
10786: LD_INT 18
10788: PUSH
10789: LD_INT 19
10791: PUSH
10792: LD_INT 20
10794: PUSH
10795: LD_INT 21
10797: PUSH
10798: LD_INT 22
10800: PUSH
10801: LD_INT 23
10803: PUSH
10804: LD_INT 24
10806: PUSH
10807: LD_INT 25
10809: PUSH
10810: LD_INT 26
10812: PUSH
10813: LD_INT 28
10815: PUSH
10816: LD_INT 30
10818: PUSH
10819: LD_INT 31
10821: PUSH
10822: LD_INT 32
10824: PUSH
10825: LD_INT 34
10827: PUSH
10828: LD_INT 36
10830: PUSH
10831: EMPTY
10832: LIST
10833: LIST
10834: LIST
10835: LIST
10836: LIST
10837: LIST
10838: LIST
10839: LIST
10840: LIST
10841: LIST
10842: LIST
10843: LIST
10844: LIST
10845: LIST
10846: LIST
10847: LIST
10848: LIST
10849: LIST
10850: LIST
10851: LIST
10852: LIST
10853: LIST
10854: LIST
10855: LIST
10856: LIST
10857: LIST
10858: LIST
10859: LIST
10860: LIST
10861: LIST
10862: LIST
10863: PUSH
10864: LD_INT 101
10866: PUSH
10867: LD_INT 102
10869: PUSH
10870: LD_INT 103
10872: PUSH
10873: LD_INT 104
10875: PUSH
10876: LD_INT 105
10878: PUSH
10879: LD_INT 106
10881: PUSH
10882: LD_INT 107
10884: PUSH
10885: LD_INT 108
10887: PUSH
10888: LD_INT 109
10890: PUSH
10891: LD_INT 110
10893: PUSH
10894: LD_INT 111
10896: PUSH
10897: LD_INT 112
10899: PUSH
10900: LD_INT 114
10902: PUSH
10903: EMPTY
10904: LIST
10905: LIST
10906: LIST
10907: LIST
10908: LIST
10909: LIST
10910: LIST
10911: LIST
10912: LIST
10913: LIST
10914: LIST
10915: LIST
10916: LIST
10917: PUSH
10918: EMPTY
10919: LIST
10920: LIST
10921: ST_TO_ADDR
10922: GO 12509
10924: LD_INT 12
10926: DOUBLE
10927: EQUAL
10928: IFTRUE 10932
10930: GO 11140
10932: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
10933: LD_ADDR_VAR 0 1
10937: PUSH
10938: LD_INT 1
10940: PUSH
10941: LD_INT 2
10943: PUSH
10944: LD_INT 3
10946: PUSH
10947: LD_INT 4
10949: PUSH
10950: LD_INT 5
10952: PUSH
10953: LD_INT 6
10955: PUSH
10956: LD_INT 7
10958: PUSH
10959: LD_INT 8
10961: PUSH
10962: LD_INT 9
10964: PUSH
10965: LD_INT 10
10967: PUSH
10968: LD_INT 11
10970: PUSH
10971: LD_INT 12
10973: PUSH
10974: LD_INT 13
10976: PUSH
10977: LD_INT 14
10979: PUSH
10980: LD_INT 15
10982: PUSH
10983: LD_INT 16
10985: PUSH
10986: LD_INT 17
10988: PUSH
10989: LD_INT 18
10991: PUSH
10992: LD_INT 19
10994: PUSH
10995: LD_INT 20
10997: PUSH
10998: LD_INT 21
11000: PUSH
11001: LD_INT 22
11003: PUSH
11004: LD_INT 23
11006: PUSH
11007: LD_INT 24
11009: PUSH
11010: LD_INT 25
11012: PUSH
11013: LD_INT 26
11015: PUSH
11016: LD_INT 27
11018: PUSH
11019: LD_INT 28
11021: PUSH
11022: LD_INT 30
11024: PUSH
11025: LD_INT 31
11027: PUSH
11028: LD_INT 32
11030: PUSH
11031: LD_INT 33
11033: PUSH
11034: LD_INT 34
11036: PUSH
11037: LD_INT 36
11039: PUSH
11040: EMPTY
11041: LIST
11042: LIST
11043: LIST
11044: LIST
11045: LIST
11046: LIST
11047: LIST
11048: LIST
11049: LIST
11050: LIST
11051: LIST
11052: LIST
11053: LIST
11054: LIST
11055: LIST
11056: LIST
11057: LIST
11058: LIST
11059: LIST
11060: LIST
11061: LIST
11062: LIST
11063: LIST
11064: LIST
11065: LIST
11066: LIST
11067: LIST
11068: LIST
11069: LIST
11070: LIST
11071: LIST
11072: LIST
11073: LIST
11074: LIST
11075: PUSH
11076: LD_INT 101
11078: PUSH
11079: LD_INT 102
11081: PUSH
11082: LD_INT 103
11084: PUSH
11085: LD_INT 104
11087: PUSH
11088: LD_INT 105
11090: PUSH
11091: LD_INT 106
11093: PUSH
11094: LD_INT 107
11096: PUSH
11097: LD_INT 108
11099: PUSH
11100: LD_INT 109
11102: PUSH
11103: LD_INT 110
11105: PUSH
11106: LD_INT 111
11108: PUSH
11109: LD_INT 112
11111: PUSH
11112: LD_INT 113
11114: PUSH
11115: LD_INT 114
11117: PUSH
11118: EMPTY
11119: LIST
11120: LIST
11121: LIST
11122: LIST
11123: LIST
11124: LIST
11125: LIST
11126: LIST
11127: LIST
11128: LIST
11129: LIST
11130: LIST
11131: LIST
11132: LIST
11133: PUSH
11134: EMPTY
11135: LIST
11136: LIST
11137: ST_TO_ADDR
11138: GO 12509
11140: LD_INT 13
11142: DOUBLE
11143: EQUAL
11144: IFTRUE 11148
11146: GO 11344
11148: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
11149: LD_ADDR_VAR 0 1
11153: PUSH
11154: LD_INT 1
11156: PUSH
11157: LD_INT 2
11159: PUSH
11160: LD_INT 3
11162: PUSH
11163: LD_INT 4
11165: PUSH
11166: LD_INT 5
11168: PUSH
11169: LD_INT 8
11171: PUSH
11172: LD_INT 9
11174: PUSH
11175: LD_INT 10
11177: PUSH
11178: LD_INT 11
11180: PUSH
11181: LD_INT 12
11183: PUSH
11184: LD_INT 14
11186: PUSH
11187: LD_INT 15
11189: PUSH
11190: LD_INT 16
11192: PUSH
11193: LD_INT 17
11195: PUSH
11196: LD_INT 18
11198: PUSH
11199: LD_INT 19
11201: PUSH
11202: LD_INT 20
11204: PUSH
11205: LD_INT 21
11207: PUSH
11208: LD_INT 22
11210: PUSH
11211: LD_INT 23
11213: PUSH
11214: LD_INT 24
11216: PUSH
11217: LD_INT 25
11219: PUSH
11220: LD_INT 26
11222: PUSH
11223: LD_INT 27
11225: PUSH
11226: LD_INT 28
11228: PUSH
11229: LD_INT 30
11231: PUSH
11232: LD_INT 31
11234: PUSH
11235: LD_INT 32
11237: PUSH
11238: LD_INT 33
11240: PUSH
11241: LD_INT 34
11243: PUSH
11244: LD_INT 36
11246: PUSH
11247: EMPTY
11248: LIST
11249: LIST
11250: LIST
11251: LIST
11252: LIST
11253: LIST
11254: LIST
11255: LIST
11256: LIST
11257: LIST
11258: LIST
11259: LIST
11260: LIST
11261: LIST
11262: LIST
11263: LIST
11264: LIST
11265: LIST
11266: LIST
11267: LIST
11268: LIST
11269: LIST
11270: LIST
11271: LIST
11272: LIST
11273: LIST
11274: LIST
11275: LIST
11276: LIST
11277: LIST
11278: LIST
11279: PUSH
11280: LD_INT 101
11282: PUSH
11283: LD_INT 102
11285: PUSH
11286: LD_INT 103
11288: PUSH
11289: LD_INT 104
11291: PUSH
11292: LD_INT 105
11294: PUSH
11295: LD_INT 106
11297: PUSH
11298: LD_INT 107
11300: PUSH
11301: LD_INT 108
11303: PUSH
11304: LD_INT 109
11306: PUSH
11307: LD_INT 110
11309: PUSH
11310: LD_INT 111
11312: PUSH
11313: LD_INT 112
11315: PUSH
11316: LD_INT 113
11318: PUSH
11319: LD_INT 114
11321: PUSH
11322: EMPTY
11323: LIST
11324: LIST
11325: LIST
11326: LIST
11327: LIST
11328: LIST
11329: LIST
11330: LIST
11331: LIST
11332: LIST
11333: LIST
11334: LIST
11335: LIST
11336: LIST
11337: PUSH
11338: EMPTY
11339: LIST
11340: LIST
11341: ST_TO_ADDR
11342: GO 12509
11344: LD_INT 14
11346: DOUBLE
11347: EQUAL
11348: IFTRUE 11352
11350: GO 11564
11352: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
11353: LD_ADDR_VAR 0 1
11357: PUSH
11358: LD_INT 1
11360: PUSH
11361: LD_INT 2
11363: PUSH
11364: LD_INT 3
11366: PUSH
11367: LD_INT 4
11369: PUSH
11370: LD_INT 5
11372: PUSH
11373: LD_INT 6
11375: PUSH
11376: LD_INT 7
11378: PUSH
11379: LD_INT 8
11381: PUSH
11382: LD_INT 9
11384: PUSH
11385: LD_INT 10
11387: PUSH
11388: LD_INT 11
11390: PUSH
11391: LD_INT 12
11393: PUSH
11394: LD_INT 13
11396: PUSH
11397: LD_INT 14
11399: PUSH
11400: LD_INT 15
11402: PUSH
11403: LD_INT 16
11405: PUSH
11406: LD_INT 17
11408: PUSH
11409: LD_INT 18
11411: PUSH
11412: LD_INT 19
11414: PUSH
11415: LD_INT 20
11417: PUSH
11418: LD_INT 21
11420: PUSH
11421: LD_INT 22
11423: PUSH
11424: LD_INT 23
11426: PUSH
11427: LD_INT 24
11429: PUSH
11430: LD_INT 25
11432: PUSH
11433: LD_INT 26
11435: PUSH
11436: LD_INT 27
11438: PUSH
11439: LD_INT 28
11441: PUSH
11442: LD_INT 29
11444: PUSH
11445: LD_INT 30
11447: PUSH
11448: LD_INT 31
11450: PUSH
11451: LD_INT 32
11453: PUSH
11454: LD_INT 33
11456: PUSH
11457: LD_INT 34
11459: PUSH
11460: LD_INT 36
11462: PUSH
11463: EMPTY
11464: LIST
11465: LIST
11466: LIST
11467: LIST
11468: LIST
11469: LIST
11470: LIST
11471: LIST
11472: LIST
11473: LIST
11474: LIST
11475: LIST
11476: LIST
11477: LIST
11478: LIST
11479: LIST
11480: LIST
11481: LIST
11482: LIST
11483: LIST
11484: LIST
11485: LIST
11486: LIST
11487: LIST
11488: LIST
11489: LIST
11490: LIST
11491: LIST
11492: LIST
11493: LIST
11494: LIST
11495: LIST
11496: LIST
11497: LIST
11498: LIST
11499: PUSH
11500: LD_INT 101
11502: PUSH
11503: LD_INT 102
11505: PUSH
11506: LD_INT 103
11508: PUSH
11509: LD_INT 104
11511: PUSH
11512: LD_INT 105
11514: PUSH
11515: LD_INT 106
11517: PUSH
11518: LD_INT 107
11520: PUSH
11521: LD_INT 108
11523: PUSH
11524: LD_INT 109
11526: PUSH
11527: LD_INT 110
11529: PUSH
11530: LD_INT 111
11532: PUSH
11533: LD_INT 112
11535: PUSH
11536: LD_INT 113
11538: PUSH
11539: LD_INT 114
11541: PUSH
11542: EMPTY
11543: LIST
11544: LIST
11545: LIST
11546: LIST
11547: LIST
11548: LIST
11549: LIST
11550: LIST
11551: LIST
11552: LIST
11553: LIST
11554: LIST
11555: LIST
11556: LIST
11557: PUSH
11558: EMPTY
11559: LIST
11560: LIST
11561: ST_TO_ADDR
11562: GO 12509
11564: LD_INT 15
11566: DOUBLE
11567: EQUAL
11568: IFTRUE 11572
11570: GO 11784
11572: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
11573: LD_ADDR_VAR 0 1
11577: PUSH
11578: LD_INT 1
11580: PUSH
11581: LD_INT 2
11583: PUSH
11584: LD_INT 3
11586: PUSH
11587: LD_INT 4
11589: PUSH
11590: LD_INT 5
11592: PUSH
11593: LD_INT 6
11595: PUSH
11596: LD_INT 7
11598: PUSH
11599: LD_INT 8
11601: PUSH
11602: LD_INT 9
11604: PUSH
11605: LD_INT 10
11607: PUSH
11608: LD_INT 11
11610: PUSH
11611: LD_INT 12
11613: PUSH
11614: LD_INT 13
11616: PUSH
11617: LD_INT 14
11619: PUSH
11620: LD_INT 15
11622: PUSH
11623: LD_INT 16
11625: PUSH
11626: LD_INT 17
11628: PUSH
11629: LD_INT 18
11631: PUSH
11632: LD_INT 19
11634: PUSH
11635: LD_INT 20
11637: PUSH
11638: LD_INT 21
11640: PUSH
11641: LD_INT 22
11643: PUSH
11644: LD_INT 23
11646: PUSH
11647: LD_INT 24
11649: PUSH
11650: LD_INT 25
11652: PUSH
11653: LD_INT 26
11655: PUSH
11656: LD_INT 27
11658: PUSH
11659: LD_INT 28
11661: PUSH
11662: LD_INT 29
11664: PUSH
11665: LD_INT 30
11667: PUSH
11668: LD_INT 31
11670: PUSH
11671: LD_INT 32
11673: PUSH
11674: LD_INT 33
11676: PUSH
11677: LD_INT 34
11679: PUSH
11680: LD_INT 36
11682: PUSH
11683: EMPTY
11684: LIST
11685: LIST
11686: LIST
11687: LIST
11688: LIST
11689: LIST
11690: LIST
11691: LIST
11692: LIST
11693: LIST
11694: LIST
11695: LIST
11696: LIST
11697: LIST
11698: LIST
11699: LIST
11700: LIST
11701: LIST
11702: LIST
11703: LIST
11704: LIST
11705: LIST
11706: LIST
11707: LIST
11708: LIST
11709: LIST
11710: LIST
11711: LIST
11712: LIST
11713: LIST
11714: LIST
11715: LIST
11716: LIST
11717: LIST
11718: LIST
11719: PUSH
11720: LD_INT 101
11722: PUSH
11723: LD_INT 102
11725: PUSH
11726: LD_INT 103
11728: PUSH
11729: LD_INT 104
11731: PUSH
11732: LD_INT 105
11734: PUSH
11735: LD_INT 106
11737: PUSH
11738: LD_INT 107
11740: PUSH
11741: LD_INT 108
11743: PUSH
11744: LD_INT 109
11746: PUSH
11747: LD_INT 110
11749: PUSH
11750: LD_INT 111
11752: PUSH
11753: LD_INT 112
11755: PUSH
11756: LD_INT 113
11758: PUSH
11759: LD_INT 114
11761: PUSH
11762: EMPTY
11763: LIST
11764: LIST
11765: LIST
11766: LIST
11767: LIST
11768: LIST
11769: LIST
11770: LIST
11771: LIST
11772: LIST
11773: LIST
11774: LIST
11775: LIST
11776: LIST
11777: PUSH
11778: EMPTY
11779: LIST
11780: LIST
11781: ST_TO_ADDR
11782: GO 12509
11784: LD_INT 16
11786: DOUBLE
11787: EQUAL
11788: IFTRUE 11792
11790: GO 11916
11792: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
11793: LD_ADDR_VAR 0 1
11797: PUSH
11798: LD_INT 2
11800: PUSH
11801: LD_INT 4
11803: PUSH
11804: LD_INT 5
11806: PUSH
11807: LD_INT 7
11809: PUSH
11810: LD_INT 11
11812: PUSH
11813: LD_INT 12
11815: PUSH
11816: LD_INT 15
11818: PUSH
11819: LD_INT 16
11821: PUSH
11822: LD_INT 20
11824: PUSH
11825: LD_INT 21
11827: PUSH
11828: LD_INT 22
11830: PUSH
11831: LD_INT 23
11833: PUSH
11834: LD_INT 25
11836: PUSH
11837: LD_INT 26
11839: PUSH
11840: LD_INT 30
11842: PUSH
11843: LD_INT 31
11845: PUSH
11846: LD_INT 32
11848: PUSH
11849: LD_INT 33
11851: PUSH
11852: LD_INT 34
11854: PUSH
11855: EMPTY
11856: LIST
11857: LIST
11858: LIST
11859: LIST
11860: LIST
11861: LIST
11862: LIST
11863: LIST
11864: LIST
11865: LIST
11866: LIST
11867: LIST
11868: LIST
11869: LIST
11870: LIST
11871: LIST
11872: LIST
11873: LIST
11874: LIST
11875: PUSH
11876: LD_INT 101
11878: PUSH
11879: LD_INT 102
11881: PUSH
11882: LD_INT 103
11884: PUSH
11885: LD_INT 106
11887: PUSH
11888: LD_INT 108
11890: PUSH
11891: LD_INT 112
11893: PUSH
11894: LD_INT 113
11896: PUSH
11897: LD_INT 114
11899: PUSH
11900: EMPTY
11901: LIST
11902: LIST
11903: LIST
11904: LIST
11905: LIST
11906: LIST
11907: LIST
11908: LIST
11909: PUSH
11910: EMPTY
11911: LIST
11912: LIST
11913: ST_TO_ADDR
11914: GO 12509
11916: LD_INT 17
11918: DOUBLE
11919: EQUAL
11920: IFTRUE 11924
11922: GO 12136
11924: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
11925: LD_ADDR_VAR 0 1
11929: PUSH
11930: LD_INT 1
11932: PUSH
11933: LD_INT 2
11935: PUSH
11936: LD_INT 3
11938: PUSH
11939: LD_INT 4
11941: PUSH
11942: LD_INT 5
11944: PUSH
11945: LD_INT 6
11947: PUSH
11948: LD_INT 7
11950: PUSH
11951: LD_INT 8
11953: PUSH
11954: LD_INT 9
11956: PUSH
11957: LD_INT 10
11959: PUSH
11960: LD_INT 11
11962: PUSH
11963: LD_INT 12
11965: PUSH
11966: LD_INT 13
11968: PUSH
11969: LD_INT 14
11971: PUSH
11972: LD_INT 15
11974: PUSH
11975: LD_INT 16
11977: PUSH
11978: LD_INT 17
11980: PUSH
11981: LD_INT 18
11983: PUSH
11984: LD_INT 19
11986: PUSH
11987: LD_INT 20
11989: PUSH
11990: LD_INT 21
11992: PUSH
11993: LD_INT 22
11995: PUSH
11996: LD_INT 23
11998: PUSH
11999: LD_INT 24
12001: PUSH
12002: LD_INT 25
12004: PUSH
12005: LD_INT 26
12007: PUSH
12008: LD_INT 27
12010: PUSH
12011: LD_INT 28
12013: PUSH
12014: LD_INT 29
12016: PUSH
12017: LD_INT 30
12019: PUSH
12020: LD_INT 31
12022: PUSH
12023: LD_INT 32
12025: PUSH
12026: LD_INT 33
12028: PUSH
12029: LD_INT 34
12031: PUSH
12032: LD_INT 36
12034: PUSH
12035: EMPTY
12036: LIST
12037: LIST
12038: LIST
12039: LIST
12040: LIST
12041: LIST
12042: LIST
12043: LIST
12044: LIST
12045: LIST
12046: LIST
12047: LIST
12048: LIST
12049: LIST
12050: LIST
12051: LIST
12052: LIST
12053: LIST
12054: LIST
12055: LIST
12056: LIST
12057: LIST
12058: LIST
12059: LIST
12060: LIST
12061: LIST
12062: LIST
12063: LIST
12064: LIST
12065: LIST
12066: LIST
12067: LIST
12068: LIST
12069: LIST
12070: LIST
12071: PUSH
12072: LD_INT 101
12074: PUSH
12075: LD_INT 102
12077: PUSH
12078: LD_INT 103
12080: PUSH
12081: LD_INT 104
12083: PUSH
12084: LD_INT 105
12086: PUSH
12087: LD_INT 106
12089: PUSH
12090: LD_INT 107
12092: PUSH
12093: LD_INT 108
12095: PUSH
12096: LD_INT 109
12098: PUSH
12099: LD_INT 110
12101: PUSH
12102: LD_INT 111
12104: PUSH
12105: LD_INT 112
12107: PUSH
12108: LD_INT 113
12110: PUSH
12111: LD_INT 114
12113: PUSH
12114: EMPTY
12115: LIST
12116: LIST
12117: LIST
12118: LIST
12119: LIST
12120: LIST
12121: LIST
12122: LIST
12123: LIST
12124: LIST
12125: LIST
12126: LIST
12127: LIST
12128: LIST
12129: PUSH
12130: EMPTY
12131: LIST
12132: LIST
12133: ST_TO_ADDR
12134: GO 12509
12136: LD_INT 18
12138: DOUBLE
12139: EQUAL
12140: IFTRUE 12144
12142: GO 12280
12144: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
12145: LD_ADDR_VAR 0 1
12149: PUSH
12150: LD_INT 2
12152: PUSH
12153: LD_INT 4
12155: PUSH
12156: LD_INT 5
12158: PUSH
12159: LD_INT 7
12161: PUSH
12162: LD_INT 11
12164: PUSH
12165: LD_INT 12
12167: PUSH
12168: LD_INT 15
12170: PUSH
12171: LD_INT 16
12173: PUSH
12174: LD_INT 20
12176: PUSH
12177: LD_INT 21
12179: PUSH
12180: LD_INT 22
12182: PUSH
12183: LD_INT 23
12185: PUSH
12186: LD_INT 25
12188: PUSH
12189: LD_INT 26
12191: PUSH
12192: LD_INT 30
12194: PUSH
12195: LD_INT 31
12197: PUSH
12198: LD_INT 32
12200: PUSH
12201: LD_INT 33
12203: PUSH
12204: LD_INT 34
12206: PUSH
12207: LD_INT 35
12209: PUSH
12210: LD_INT 36
12212: PUSH
12213: EMPTY
12214: LIST
12215: LIST
12216: LIST
12217: LIST
12218: LIST
12219: LIST
12220: LIST
12221: LIST
12222: LIST
12223: LIST
12224: LIST
12225: LIST
12226: LIST
12227: LIST
12228: LIST
12229: LIST
12230: LIST
12231: LIST
12232: LIST
12233: LIST
12234: LIST
12235: PUSH
12236: LD_INT 101
12238: PUSH
12239: LD_INT 102
12241: PUSH
12242: LD_INT 103
12244: PUSH
12245: LD_INT 106
12247: PUSH
12248: LD_INT 108
12250: PUSH
12251: LD_INT 112
12253: PUSH
12254: LD_INT 113
12256: PUSH
12257: LD_INT 114
12259: PUSH
12260: LD_INT 115
12262: PUSH
12263: EMPTY
12264: LIST
12265: LIST
12266: LIST
12267: LIST
12268: LIST
12269: LIST
12270: LIST
12271: LIST
12272: LIST
12273: PUSH
12274: EMPTY
12275: LIST
12276: LIST
12277: ST_TO_ADDR
12278: GO 12509
12280: LD_INT 19
12282: DOUBLE
12283: EQUAL
12284: IFTRUE 12288
12286: GO 12508
12288: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
12289: LD_ADDR_VAR 0 1
12293: PUSH
12294: LD_INT 1
12296: PUSH
12297: LD_INT 2
12299: PUSH
12300: LD_INT 3
12302: PUSH
12303: LD_INT 4
12305: PUSH
12306: LD_INT 5
12308: PUSH
12309: LD_INT 6
12311: PUSH
12312: LD_INT 7
12314: PUSH
12315: LD_INT 8
12317: PUSH
12318: LD_INT 9
12320: PUSH
12321: LD_INT 10
12323: PUSH
12324: LD_INT 11
12326: PUSH
12327: LD_INT 12
12329: PUSH
12330: LD_INT 13
12332: PUSH
12333: LD_INT 14
12335: PUSH
12336: LD_INT 15
12338: PUSH
12339: LD_INT 16
12341: PUSH
12342: LD_INT 17
12344: PUSH
12345: LD_INT 18
12347: PUSH
12348: LD_INT 19
12350: PUSH
12351: LD_INT 20
12353: PUSH
12354: LD_INT 21
12356: PUSH
12357: LD_INT 22
12359: PUSH
12360: LD_INT 23
12362: PUSH
12363: LD_INT 24
12365: PUSH
12366: LD_INT 25
12368: PUSH
12369: LD_INT 26
12371: PUSH
12372: LD_INT 27
12374: PUSH
12375: LD_INT 28
12377: PUSH
12378: LD_INT 29
12380: PUSH
12381: LD_INT 30
12383: PUSH
12384: LD_INT 31
12386: PUSH
12387: LD_INT 32
12389: PUSH
12390: LD_INT 33
12392: PUSH
12393: LD_INT 34
12395: PUSH
12396: LD_INT 35
12398: PUSH
12399: LD_INT 36
12401: PUSH
12402: EMPTY
12403: LIST
12404: LIST
12405: LIST
12406: LIST
12407: LIST
12408: LIST
12409: LIST
12410: LIST
12411: LIST
12412: LIST
12413: LIST
12414: LIST
12415: LIST
12416: LIST
12417: LIST
12418: LIST
12419: LIST
12420: LIST
12421: LIST
12422: LIST
12423: LIST
12424: LIST
12425: LIST
12426: LIST
12427: LIST
12428: LIST
12429: LIST
12430: LIST
12431: LIST
12432: LIST
12433: LIST
12434: LIST
12435: LIST
12436: LIST
12437: LIST
12438: LIST
12439: PUSH
12440: LD_INT 101
12442: PUSH
12443: LD_INT 102
12445: PUSH
12446: LD_INT 103
12448: PUSH
12449: LD_INT 104
12451: PUSH
12452: LD_INT 105
12454: PUSH
12455: LD_INT 106
12457: PUSH
12458: LD_INT 107
12460: PUSH
12461: LD_INT 108
12463: PUSH
12464: LD_INT 109
12466: PUSH
12467: LD_INT 110
12469: PUSH
12470: LD_INT 111
12472: PUSH
12473: LD_INT 112
12475: PUSH
12476: LD_INT 113
12478: PUSH
12479: LD_INT 114
12481: PUSH
12482: LD_INT 115
12484: PUSH
12485: EMPTY
12486: LIST
12487: LIST
12488: LIST
12489: LIST
12490: LIST
12491: LIST
12492: LIST
12493: LIST
12494: LIST
12495: LIST
12496: LIST
12497: LIST
12498: LIST
12499: LIST
12500: LIST
12501: PUSH
12502: EMPTY
12503: LIST
12504: LIST
12505: ST_TO_ADDR
12506: GO 12509
12508: POP
// end else
12509: GO 12728
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
12511: LD_ADDR_VAR 0 1
12515: PUSH
12516: LD_INT 1
12518: PUSH
12519: LD_INT 2
12521: PUSH
12522: LD_INT 3
12524: PUSH
12525: LD_INT 4
12527: PUSH
12528: LD_INT 5
12530: PUSH
12531: LD_INT 6
12533: PUSH
12534: LD_INT 7
12536: PUSH
12537: LD_INT 8
12539: PUSH
12540: LD_INT 9
12542: PUSH
12543: LD_INT 10
12545: PUSH
12546: LD_INT 11
12548: PUSH
12549: LD_INT 12
12551: PUSH
12552: LD_INT 13
12554: PUSH
12555: LD_INT 14
12557: PUSH
12558: LD_INT 15
12560: PUSH
12561: LD_INT 16
12563: PUSH
12564: LD_INT 17
12566: PUSH
12567: LD_INT 18
12569: PUSH
12570: LD_INT 19
12572: PUSH
12573: LD_INT 20
12575: PUSH
12576: LD_INT 21
12578: PUSH
12579: LD_INT 22
12581: PUSH
12582: LD_INT 23
12584: PUSH
12585: LD_INT 24
12587: PUSH
12588: LD_INT 25
12590: PUSH
12591: LD_INT 26
12593: PUSH
12594: LD_INT 27
12596: PUSH
12597: LD_INT 28
12599: PUSH
12600: LD_INT 29
12602: PUSH
12603: LD_INT 30
12605: PUSH
12606: LD_INT 31
12608: PUSH
12609: LD_INT 32
12611: PUSH
12612: LD_INT 33
12614: PUSH
12615: LD_INT 34
12617: PUSH
12618: LD_INT 35
12620: PUSH
12621: LD_INT 36
12623: PUSH
12624: EMPTY
12625: LIST
12626: LIST
12627: LIST
12628: LIST
12629: LIST
12630: LIST
12631: LIST
12632: LIST
12633: LIST
12634: LIST
12635: LIST
12636: LIST
12637: LIST
12638: LIST
12639: LIST
12640: LIST
12641: LIST
12642: LIST
12643: LIST
12644: LIST
12645: LIST
12646: LIST
12647: LIST
12648: LIST
12649: LIST
12650: LIST
12651: LIST
12652: LIST
12653: LIST
12654: LIST
12655: LIST
12656: LIST
12657: LIST
12658: LIST
12659: LIST
12660: LIST
12661: PUSH
12662: LD_INT 101
12664: PUSH
12665: LD_INT 102
12667: PUSH
12668: LD_INT 103
12670: PUSH
12671: LD_INT 104
12673: PUSH
12674: LD_INT 105
12676: PUSH
12677: LD_INT 106
12679: PUSH
12680: LD_INT 107
12682: PUSH
12683: LD_INT 108
12685: PUSH
12686: LD_INT 109
12688: PUSH
12689: LD_INT 110
12691: PUSH
12692: LD_INT 111
12694: PUSH
12695: LD_INT 112
12697: PUSH
12698: LD_INT 113
12700: PUSH
12701: LD_INT 114
12703: PUSH
12704: LD_INT 115
12706: PUSH
12707: EMPTY
12708: LIST
12709: LIST
12710: LIST
12711: LIST
12712: LIST
12713: LIST
12714: LIST
12715: LIST
12716: LIST
12717: LIST
12718: LIST
12719: LIST
12720: LIST
12721: LIST
12722: LIST
12723: PUSH
12724: EMPTY
12725: LIST
12726: LIST
12727: ST_TO_ADDR
// if result then
12728: LD_VAR 0 1
12732: IFFALSE 13021
// begin normal :=  ;
12734: LD_ADDR_VAR 0 3
12738: PUSH
12739: LD_STRING 
12741: ST_TO_ADDR
// hardcore :=  ;
12742: LD_ADDR_VAR 0 4
12746: PUSH
12747: LD_STRING 
12749: ST_TO_ADDR
// for i = 1 to normalCounter do
12750: LD_ADDR_VAR 0 5
12754: PUSH
12755: DOUBLE
12756: LD_INT 1
12758: DEC
12759: ST_TO_ADDR
12760: LD_EXP 48
12764: PUSH
12765: FOR_TO
12766: IFFALSE 12867
// begin tmp := 0 ;
12768: LD_ADDR_VAR 0 2
12772: PUSH
12773: LD_STRING 0
12775: ST_TO_ADDR
// if result [ 1 ] then
12776: LD_VAR 0 1
12780: PUSH
12781: LD_INT 1
12783: ARRAY
12784: IFFALSE 12849
// if result [ 1 ] [ 1 ] = i then
12786: LD_VAR 0 1
12790: PUSH
12791: LD_INT 1
12793: ARRAY
12794: PUSH
12795: LD_INT 1
12797: ARRAY
12798: PUSH
12799: LD_VAR 0 5
12803: EQUAL
12804: IFFALSE 12849
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
12806: LD_ADDR_VAR 0 1
12810: PUSH
12811: LD_VAR 0 1
12815: PPUSH
12816: LD_INT 1
12818: PPUSH
12819: LD_VAR 0 1
12823: PUSH
12824: LD_INT 1
12826: ARRAY
12827: PPUSH
12828: LD_INT 1
12830: PPUSH
12831: CALL_OW 3
12835: PPUSH
12836: CALL_OW 1
12840: ST_TO_ADDR
// tmp := 1 ;
12841: LD_ADDR_VAR 0 2
12845: PUSH
12846: LD_STRING 1
12848: ST_TO_ADDR
// end ; normal := normal & tmp ;
12849: LD_ADDR_VAR 0 3
12853: PUSH
12854: LD_VAR 0 3
12858: PUSH
12859: LD_VAR 0 2
12863: STR
12864: ST_TO_ADDR
// end ;
12865: GO 12765
12867: POP
12868: POP
// for i = 1 to hardcoreCounter do
12869: LD_ADDR_VAR 0 5
12873: PUSH
12874: DOUBLE
12875: LD_INT 1
12877: DEC
12878: ST_TO_ADDR
12879: LD_EXP 49
12883: PUSH
12884: FOR_TO
12885: IFFALSE 12990
// begin tmp := 0 ;
12887: LD_ADDR_VAR 0 2
12891: PUSH
12892: LD_STRING 0
12894: ST_TO_ADDR
// if result [ 2 ] then
12895: LD_VAR 0 1
12899: PUSH
12900: LD_INT 2
12902: ARRAY
12903: IFFALSE 12972
// if result [ 2 ] [ 1 ] = 100 + i then
12905: LD_VAR 0 1
12909: PUSH
12910: LD_INT 2
12912: ARRAY
12913: PUSH
12914: LD_INT 1
12916: ARRAY
12917: PUSH
12918: LD_INT 100
12920: PUSH
12921: LD_VAR 0 5
12925: PLUS
12926: EQUAL
12927: IFFALSE 12972
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
12929: LD_ADDR_VAR 0 1
12933: PUSH
12934: LD_VAR 0 1
12938: PPUSH
12939: LD_INT 2
12941: PPUSH
12942: LD_VAR 0 1
12946: PUSH
12947: LD_INT 2
12949: ARRAY
12950: PPUSH
12951: LD_INT 1
12953: PPUSH
12954: CALL_OW 3
12958: PPUSH
12959: CALL_OW 1
12963: ST_TO_ADDR
// tmp := 1 ;
12964: LD_ADDR_VAR 0 2
12968: PUSH
12969: LD_STRING 1
12971: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
12972: LD_ADDR_VAR 0 4
12976: PUSH
12977: LD_VAR 0 4
12981: PUSH
12982: LD_VAR 0 2
12986: STR
12987: ST_TO_ADDR
// end ;
12988: GO 12884
12990: POP
12991: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
12992: LD_STRING getStreamItemsFromMission("
12994: PUSH
12995: LD_VAR 0 3
12999: STR
13000: PUSH
13001: LD_STRING ","
13003: STR
13004: PUSH
13005: LD_VAR 0 4
13009: STR
13010: PUSH
13011: LD_STRING ")
13013: STR
13014: PPUSH
13015: CALL_OW 559
// end else
13019: GO 13028
// ToLua ( getStreamItemsFromMission("","") ) ;
13021: LD_STRING getStreamItemsFromMission("","")
13023: PPUSH
13024: CALL_OW 559
// end ;
13028: LD_VAR 0 1
13032: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
13033: LD_EXP 47
13037: PUSH
13038: LD_EXP 52
13042: AND
13043: IFFALSE 13167
13045: GO 13047
13047: DISABLE
13048: LD_INT 0
13050: PPUSH
13051: PPUSH
// begin enable ;
13052: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
13053: LD_ADDR_VAR 0 2
13057: PUSH
13058: LD_INT 22
13060: PUSH
13061: LD_OWVAR 2
13065: PUSH
13066: EMPTY
13067: LIST
13068: LIST
13069: PUSH
13070: LD_INT 2
13072: PUSH
13073: LD_INT 34
13075: PUSH
13076: LD_INT 7
13078: PUSH
13079: EMPTY
13080: LIST
13081: LIST
13082: PUSH
13083: LD_INT 34
13085: PUSH
13086: LD_INT 45
13088: PUSH
13089: EMPTY
13090: LIST
13091: LIST
13092: PUSH
13093: LD_INT 34
13095: PUSH
13096: LD_INT 28
13098: PUSH
13099: EMPTY
13100: LIST
13101: LIST
13102: PUSH
13103: LD_INT 34
13105: PUSH
13106: LD_INT 47
13108: PUSH
13109: EMPTY
13110: LIST
13111: LIST
13112: PUSH
13113: EMPTY
13114: LIST
13115: LIST
13116: LIST
13117: LIST
13118: LIST
13119: PUSH
13120: EMPTY
13121: LIST
13122: LIST
13123: PPUSH
13124: CALL_OW 69
13128: ST_TO_ADDR
// if not tmp then
13129: LD_VAR 0 2
13133: NOT
13134: IFFALSE 13138
// exit ;
13136: GO 13167
// for i in tmp do
13138: LD_ADDR_VAR 0 1
13142: PUSH
13143: LD_VAR 0 2
13147: PUSH
13148: FOR_IN
13149: IFFALSE 13165
// begin SetLives ( i , 0 ) ;
13151: LD_VAR 0 1
13155: PPUSH
13156: LD_INT 0
13158: PPUSH
13159: CALL_OW 234
// end ;
13163: GO 13148
13165: POP
13166: POP
// end ;
13167: PPOPN 2
13169: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
13170: LD_EXP 47
13174: PUSH
13175: LD_EXP 53
13179: AND
13180: IFFALSE 13264
13182: GO 13184
13184: DISABLE
13185: LD_INT 0
13187: PPUSH
13188: PPUSH
// begin enable ;
13189: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
13190: LD_ADDR_VAR 0 2
13194: PUSH
13195: LD_INT 22
13197: PUSH
13198: LD_OWVAR 2
13202: PUSH
13203: EMPTY
13204: LIST
13205: LIST
13206: PUSH
13207: LD_INT 32
13209: PUSH
13210: LD_INT 3
13212: PUSH
13213: EMPTY
13214: LIST
13215: LIST
13216: PUSH
13217: EMPTY
13218: LIST
13219: LIST
13220: PPUSH
13221: CALL_OW 69
13225: ST_TO_ADDR
// if not tmp then
13226: LD_VAR 0 2
13230: NOT
13231: IFFALSE 13235
// exit ;
13233: GO 13264
// for i in tmp do
13235: LD_ADDR_VAR 0 1
13239: PUSH
13240: LD_VAR 0 2
13244: PUSH
13245: FOR_IN
13246: IFFALSE 13262
// begin SetLives ( i , 0 ) ;
13248: LD_VAR 0 1
13252: PPUSH
13253: LD_INT 0
13255: PPUSH
13256: CALL_OW 234
// end ;
13260: GO 13245
13262: POP
13263: POP
// end ;
13264: PPOPN 2
13266: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
13267: LD_EXP 47
13271: PUSH
13272: LD_EXP 50
13276: AND
13277: IFFALSE 13370
13279: GO 13281
13281: DISABLE
13282: LD_INT 0
13284: PPUSH
// begin enable ;
13285: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
13286: LD_ADDR_VAR 0 1
13290: PUSH
13291: LD_INT 22
13293: PUSH
13294: LD_OWVAR 2
13298: PUSH
13299: EMPTY
13300: LIST
13301: LIST
13302: PUSH
13303: LD_INT 2
13305: PUSH
13306: LD_INT 25
13308: PUSH
13309: LD_INT 5
13311: PUSH
13312: EMPTY
13313: LIST
13314: LIST
13315: PUSH
13316: LD_INT 25
13318: PUSH
13319: LD_INT 9
13321: PUSH
13322: EMPTY
13323: LIST
13324: LIST
13325: PUSH
13326: LD_INT 25
13328: PUSH
13329: LD_INT 8
13331: PUSH
13332: EMPTY
13333: LIST
13334: LIST
13335: PUSH
13336: EMPTY
13337: LIST
13338: LIST
13339: LIST
13340: LIST
13341: PUSH
13342: EMPTY
13343: LIST
13344: LIST
13345: PPUSH
13346: CALL_OW 69
13350: PUSH
13351: FOR_IN
13352: IFFALSE 13368
// begin SetClass ( i , 1 ) ;
13354: LD_VAR 0 1
13358: PPUSH
13359: LD_INT 1
13361: PPUSH
13362: CALL_OW 336
// end ;
13366: GO 13351
13368: POP
13369: POP
// end ;
13370: PPOPN 1
13372: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
13373: LD_EXP 47
13377: PUSH
13378: LD_EXP 51
13382: AND
13383: PUSH
13384: LD_OWVAR 65
13388: PUSH
13389: LD_INT 7
13391: LESS
13392: AND
13393: IFFALSE 13407
13395: GO 13397
13397: DISABLE
// begin enable ;
13398: ENABLE
// game_speed := 7 ;
13399: LD_ADDR_OWVAR 65
13403: PUSH
13404: LD_INT 7
13406: ST_TO_ADDR
// end ;
13407: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
13408: LD_EXP 47
13412: PUSH
13413: LD_EXP 54
13417: AND
13418: IFFALSE 13620
13420: GO 13422
13422: DISABLE
13423: LD_INT 0
13425: PPUSH
13426: PPUSH
13427: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
13428: LD_ADDR_VAR 0 3
13432: PUSH
13433: LD_INT 81
13435: PUSH
13436: LD_OWVAR 2
13440: PUSH
13441: EMPTY
13442: LIST
13443: LIST
13444: PUSH
13445: LD_INT 21
13447: PUSH
13448: LD_INT 1
13450: PUSH
13451: EMPTY
13452: LIST
13453: LIST
13454: PUSH
13455: EMPTY
13456: LIST
13457: LIST
13458: PPUSH
13459: CALL_OW 69
13463: ST_TO_ADDR
// if not tmp then
13464: LD_VAR 0 3
13468: NOT
13469: IFFALSE 13473
// exit ;
13471: GO 13620
// if tmp > 5 then
13473: LD_VAR 0 3
13477: PUSH
13478: LD_INT 5
13480: GREATER
13481: IFFALSE 13493
// k := 5 else
13483: LD_ADDR_VAR 0 2
13487: PUSH
13488: LD_INT 5
13490: ST_TO_ADDR
13491: GO 13503
// k := tmp ;
13493: LD_ADDR_VAR 0 2
13497: PUSH
13498: LD_VAR 0 3
13502: ST_TO_ADDR
// for i := 1 to k do
13503: LD_ADDR_VAR 0 1
13507: PUSH
13508: DOUBLE
13509: LD_INT 1
13511: DEC
13512: ST_TO_ADDR
13513: LD_VAR 0 2
13517: PUSH
13518: FOR_TO
13519: IFFALSE 13618
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
13521: LD_VAR 0 3
13525: PUSH
13526: LD_VAR 0 1
13530: ARRAY
13531: PPUSH
13532: LD_VAR 0 1
13536: PUSH
13537: LD_INT 4
13539: MOD
13540: PUSH
13541: LD_INT 1
13543: PLUS
13544: PPUSH
13545: CALL_OW 259
13549: PUSH
13550: LD_INT 10
13552: LESS
13553: IFFALSE 13616
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
13555: LD_VAR 0 3
13559: PUSH
13560: LD_VAR 0 1
13564: ARRAY
13565: PPUSH
13566: LD_VAR 0 1
13570: PUSH
13571: LD_INT 4
13573: MOD
13574: PUSH
13575: LD_INT 1
13577: PLUS
13578: PPUSH
13579: LD_VAR 0 3
13583: PUSH
13584: LD_VAR 0 1
13588: ARRAY
13589: PPUSH
13590: LD_VAR 0 1
13594: PUSH
13595: LD_INT 4
13597: MOD
13598: PUSH
13599: LD_INT 1
13601: PLUS
13602: PPUSH
13603: CALL_OW 259
13607: PUSH
13608: LD_INT 1
13610: PLUS
13611: PPUSH
13612: CALL_OW 237
13616: GO 13518
13618: POP
13619: POP
// end ;
13620: PPOPN 3
13622: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
13623: LD_EXP 47
13627: PUSH
13628: LD_EXP 55
13632: AND
13633: IFFALSE 13653
13635: GO 13637
13637: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
13638: LD_INT 4
13640: PPUSH
13641: LD_OWVAR 2
13645: PPUSH
13646: LD_INT 0
13648: PPUSH
13649: CALL_OW 324
13653: END
// every 0 0$1 trigger StreamModeActive and sShovel do
13654: LD_EXP 47
13658: PUSH
13659: LD_EXP 84
13663: AND
13664: IFFALSE 13684
13666: GO 13668
13668: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
13669: LD_INT 19
13671: PPUSH
13672: LD_OWVAR 2
13676: PPUSH
13677: LD_INT 0
13679: PPUSH
13680: CALL_OW 324
13684: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
13685: LD_EXP 47
13689: PUSH
13690: LD_EXP 56
13694: AND
13695: IFFALSE 13797
13697: GO 13699
13699: DISABLE
13700: LD_INT 0
13702: PPUSH
13703: PPUSH
// begin enable ;
13704: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
13705: LD_ADDR_VAR 0 2
13709: PUSH
13710: LD_INT 22
13712: PUSH
13713: LD_OWVAR 2
13717: PUSH
13718: EMPTY
13719: LIST
13720: LIST
13721: PUSH
13722: LD_INT 2
13724: PUSH
13725: LD_INT 34
13727: PUSH
13728: LD_INT 11
13730: PUSH
13731: EMPTY
13732: LIST
13733: LIST
13734: PUSH
13735: LD_INT 34
13737: PUSH
13738: LD_INT 30
13740: PUSH
13741: EMPTY
13742: LIST
13743: LIST
13744: PUSH
13745: EMPTY
13746: LIST
13747: LIST
13748: LIST
13749: PUSH
13750: EMPTY
13751: LIST
13752: LIST
13753: PPUSH
13754: CALL_OW 69
13758: ST_TO_ADDR
// if not tmp then
13759: LD_VAR 0 2
13763: NOT
13764: IFFALSE 13768
// exit ;
13766: GO 13797
// for i in tmp do
13768: LD_ADDR_VAR 0 1
13772: PUSH
13773: LD_VAR 0 2
13777: PUSH
13778: FOR_IN
13779: IFFALSE 13795
// begin SetLives ( i , 0 ) ;
13781: LD_VAR 0 1
13785: PPUSH
13786: LD_INT 0
13788: PPUSH
13789: CALL_OW 234
// end ;
13793: GO 13778
13795: POP
13796: POP
// end ;
13797: PPOPN 2
13799: END
// every 0 0$1 trigger StreamModeActive and sBunker do
13800: LD_EXP 47
13804: PUSH
13805: LD_EXP 57
13809: AND
13810: IFFALSE 13830
13812: GO 13814
13814: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
13815: LD_INT 32
13817: PPUSH
13818: LD_OWVAR 2
13822: PPUSH
13823: LD_INT 0
13825: PPUSH
13826: CALL_OW 324
13830: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
13831: LD_EXP 47
13835: PUSH
13836: LD_EXP 58
13840: AND
13841: IFFALSE 14022
13843: GO 13845
13845: DISABLE
13846: LD_INT 0
13848: PPUSH
13849: PPUSH
13850: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
13851: LD_ADDR_VAR 0 2
13855: PUSH
13856: LD_INT 22
13858: PUSH
13859: LD_OWVAR 2
13863: PUSH
13864: EMPTY
13865: LIST
13866: LIST
13867: PUSH
13868: LD_INT 33
13870: PUSH
13871: LD_INT 3
13873: PUSH
13874: EMPTY
13875: LIST
13876: LIST
13877: PUSH
13878: EMPTY
13879: LIST
13880: LIST
13881: PPUSH
13882: CALL_OW 69
13886: ST_TO_ADDR
// if not tmp then
13887: LD_VAR 0 2
13891: NOT
13892: IFFALSE 13896
// exit ;
13894: GO 14022
// side := 0 ;
13896: LD_ADDR_VAR 0 3
13900: PUSH
13901: LD_INT 0
13903: ST_TO_ADDR
// for i := 1 to 8 do
13904: LD_ADDR_VAR 0 1
13908: PUSH
13909: DOUBLE
13910: LD_INT 1
13912: DEC
13913: ST_TO_ADDR
13914: LD_INT 8
13916: PUSH
13917: FOR_TO
13918: IFFALSE 13966
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
13920: LD_OWVAR 2
13924: PUSH
13925: LD_VAR 0 1
13929: NONEQUAL
13930: PUSH
13931: LD_OWVAR 2
13935: PPUSH
13936: LD_VAR 0 1
13940: PPUSH
13941: CALL_OW 81
13945: PUSH
13946: LD_INT 2
13948: EQUAL
13949: AND
13950: IFFALSE 13964
// begin side := i ;
13952: LD_ADDR_VAR 0 3
13956: PUSH
13957: LD_VAR 0 1
13961: ST_TO_ADDR
// break ;
13962: GO 13966
// end ;
13964: GO 13917
13966: POP
13967: POP
// if not side then
13968: LD_VAR 0 3
13972: NOT
13973: IFFALSE 13977
// exit ;
13975: GO 14022
// for i := 1 to tmp do
13977: LD_ADDR_VAR 0 1
13981: PUSH
13982: DOUBLE
13983: LD_INT 1
13985: DEC
13986: ST_TO_ADDR
13987: LD_VAR 0 2
13991: PUSH
13992: FOR_TO
13993: IFFALSE 14020
// if Prob ( 60 ) then
13995: LD_INT 60
13997: PPUSH
13998: CALL_OW 13
14002: IFFALSE 14018
// SetSide ( i , side ) ;
14004: LD_VAR 0 1
14008: PPUSH
14009: LD_VAR 0 3
14013: PPUSH
14014: CALL_OW 235
14018: GO 13992
14020: POP
14021: POP
// end ;
14022: PPOPN 3
14024: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
14025: LD_EXP 47
14029: PUSH
14030: LD_EXP 60
14034: AND
14035: IFFALSE 14154
14037: GO 14039
14039: DISABLE
14040: LD_INT 0
14042: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
14043: LD_ADDR_VAR 0 1
14047: PUSH
14048: LD_INT 22
14050: PUSH
14051: LD_OWVAR 2
14055: PUSH
14056: EMPTY
14057: LIST
14058: LIST
14059: PUSH
14060: LD_INT 21
14062: PUSH
14063: LD_INT 1
14065: PUSH
14066: EMPTY
14067: LIST
14068: LIST
14069: PUSH
14070: LD_INT 3
14072: PUSH
14073: LD_INT 23
14075: PUSH
14076: LD_INT 0
14078: PUSH
14079: EMPTY
14080: LIST
14081: LIST
14082: PUSH
14083: EMPTY
14084: LIST
14085: LIST
14086: PUSH
14087: EMPTY
14088: LIST
14089: LIST
14090: LIST
14091: PPUSH
14092: CALL_OW 69
14096: PUSH
14097: FOR_IN
14098: IFFALSE 14152
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
14100: LD_VAR 0 1
14104: PPUSH
14105: CALL_OW 257
14109: PUSH
14110: LD_INT 1
14112: PUSH
14113: LD_INT 2
14115: PUSH
14116: LD_INT 3
14118: PUSH
14119: LD_INT 4
14121: PUSH
14122: EMPTY
14123: LIST
14124: LIST
14125: LIST
14126: LIST
14127: IN
14128: IFFALSE 14150
// SetClass ( un , rand ( 1 , 4 ) ) ;
14130: LD_VAR 0 1
14134: PPUSH
14135: LD_INT 1
14137: PPUSH
14138: LD_INT 4
14140: PPUSH
14141: CALL_OW 12
14145: PPUSH
14146: CALL_OW 336
14150: GO 14097
14152: POP
14153: POP
// end ;
14154: PPOPN 1
14156: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
14157: LD_EXP 47
14161: PUSH
14162: LD_EXP 59
14166: AND
14167: IFFALSE 14246
14169: GO 14171
14171: DISABLE
14172: LD_INT 0
14174: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
14175: LD_ADDR_VAR 0 1
14179: PUSH
14180: LD_INT 22
14182: PUSH
14183: LD_OWVAR 2
14187: PUSH
14188: EMPTY
14189: LIST
14190: LIST
14191: PUSH
14192: LD_INT 21
14194: PUSH
14195: LD_INT 3
14197: PUSH
14198: EMPTY
14199: LIST
14200: LIST
14201: PUSH
14202: EMPTY
14203: LIST
14204: LIST
14205: PPUSH
14206: CALL_OW 69
14210: ST_TO_ADDR
// if not tmp then
14211: LD_VAR 0 1
14215: NOT
14216: IFFALSE 14220
// exit ;
14218: GO 14246
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
14220: LD_VAR 0 1
14224: PUSH
14225: LD_INT 1
14227: PPUSH
14228: LD_VAR 0 1
14232: PPUSH
14233: CALL_OW 12
14237: ARRAY
14238: PPUSH
14239: LD_INT 100
14241: PPUSH
14242: CALL_OW 234
// end ;
14246: PPOPN 1
14248: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
14249: LD_EXP 47
14253: PUSH
14254: LD_EXP 61
14258: AND
14259: IFFALSE 14357
14261: GO 14263
14263: DISABLE
14264: LD_INT 0
14266: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
14267: LD_ADDR_VAR 0 1
14271: PUSH
14272: LD_INT 22
14274: PUSH
14275: LD_OWVAR 2
14279: PUSH
14280: EMPTY
14281: LIST
14282: LIST
14283: PUSH
14284: LD_INT 21
14286: PUSH
14287: LD_INT 1
14289: PUSH
14290: EMPTY
14291: LIST
14292: LIST
14293: PUSH
14294: EMPTY
14295: LIST
14296: LIST
14297: PPUSH
14298: CALL_OW 69
14302: ST_TO_ADDR
// if not tmp then
14303: LD_VAR 0 1
14307: NOT
14308: IFFALSE 14312
// exit ;
14310: GO 14357
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
14312: LD_VAR 0 1
14316: PUSH
14317: LD_INT 1
14319: PPUSH
14320: LD_VAR 0 1
14324: PPUSH
14325: CALL_OW 12
14329: ARRAY
14330: PPUSH
14331: LD_INT 1
14333: PPUSH
14334: LD_INT 4
14336: PPUSH
14337: CALL_OW 12
14341: PPUSH
14342: LD_INT 3000
14344: PPUSH
14345: LD_INT 9000
14347: PPUSH
14348: CALL_OW 12
14352: PPUSH
14353: CALL_OW 492
// end ;
14357: PPOPN 1
14359: END
// every 0 0$1 trigger StreamModeActive and sDepot do
14360: LD_EXP 47
14364: PUSH
14365: LD_EXP 62
14369: AND
14370: IFFALSE 14390
14372: GO 14374
14374: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
14375: LD_INT 1
14377: PPUSH
14378: LD_OWVAR 2
14382: PPUSH
14383: LD_INT 0
14385: PPUSH
14386: CALL_OW 324
14390: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
14391: LD_EXP 47
14395: PUSH
14396: LD_EXP 63
14400: AND
14401: IFFALSE 14484
14403: GO 14405
14405: DISABLE
14406: LD_INT 0
14408: PPUSH
14409: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
14410: LD_ADDR_VAR 0 2
14414: PUSH
14415: LD_INT 22
14417: PUSH
14418: LD_OWVAR 2
14422: PUSH
14423: EMPTY
14424: LIST
14425: LIST
14426: PUSH
14427: LD_INT 21
14429: PUSH
14430: LD_INT 3
14432: PUSH
14433: EMPTY
14434: LIST
14435: LIST
14436: PUSH
14437: EMPTY
14438: LIST
14439: LIST
14440: PPUSH
14441: CALL_OW 69
14445: ST_TO_ADDR
// if not tmp then
14446: LD_VAR 0 2
14450: NOT
14451: IFFALSE 14455
// exit ;
14453: GO 14484
// for i in tmp do
14455: LD_ADDR_VAR 0 1
14459: PUSH
14460: LD_VAR 0 2
14464: PUSH
14465: FOR_IN
14466: IFFALSE 14482
// SetBLevel ( i , 10 ) ;
14468: LD_VAR 0 1
14472: PPUSH
14473: LD_INT 10
14475: PPUSH
14476: CALL_OW 241
14480: GO 14465
14482: POP
14483: POP
// end ;
14484: PPOPN 2
14486: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
14487: LD_EXP 47
14491: PUSH
14492: LD_EXP 64
14496: AND
14497: IFFALSE 14608
14499: GO 14501
14501: DISABLE
14502: LD_INT 0
14504: PPUSH
14505: PPUSH
14506: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
14507: LD_ADDR_VAR 0 3
14511: PUSH
14512: LD_INT 22
14514: PUSH
14515: LD_OWVAR 2
14519: PUSH
14520: EMPTY
14521: LIST
14522: LIST
14523: PUSH
14524: LD_INT 25
14526: PUSH
14527: LD_INT 1
14529: PUSH
14530: EMPTY
14531: LIST
14532: LIST
14533: PUSH
14534: EMPTY
14535: LIST
14536: LIST
14537: PPUSH
14538: CALL_OW 69
14542: ST_TO_ADDR
// if not tmp then
14543: LD_VAR 0 3
14547: NOT
14548: IFFALSE 14552
// exit ;
14550: GO 14608
// un := tmp [ rand ( 1 , tmp ) ] ;
14552: LD_ADDR_VAR 0 2
14556: PUSH
14557: LD_VAR 0 3
14561: PUSH
14562: LD_INT 1
14564: PPUSH
14565: LD_VAR 0 3
14569: PPUSH
14570: CALL_OW 12
14574: ARRAY
14575: ST_TO_ADDR
// if Crawls ( un ) then
14576: LD_VAR 0 2
14580: PPUSH
14581: CALL_OW 318
14585: IFFALSE 14596
// ComWalk ( un ) ;
14587: LD_VAR 0 2
14591: PPUSH
14592: CALL_OW 138
// SetClass ( un , class_sniper ) ;
14596: LD_VAR 0 2
14600: PPUSH
14601: LD_INT 5
14603: PPUSH
14604: CALL_OW 336
// end ;
14608: PPOPN 3
14610: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
14611: LD_EXP 47
14615: PUSH
14616: LD_EXP 65
14620: AND
14621: PUSH
14622: LD_OWVAR 67
14626: PUSH
14627: LD_INT 3
14629: LESS
14630: AND
14631: IFFALSE 14650
14633: GO 14635
14635: DISABLE
// Difficulty := Difficulty + 1 ;
14636: LD_ADDR_OWVAR 67
14640: PUSH
14641: LD_OWVAR 67
14645: PUSH
14646: LD_INT 1
14648: PLUS
14649: ST_TO_ADDR
14650: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
14651: LD_EXP 47
14655: PUSH
14656: LD_EXP 66
14660: AND
14661: IFFALSE 14764
14663: GO 14665
14665: DISABLE
14666: LD_INT 0
14668: PPUSH
// begin for i := 1 to 5 do
14669: LD_ADDR_VAR 0 1
14673: PUSH
14674: DOUBLE
14675: LD_INT 1
14677: DEC
14678: ST_TO_ADDR
14679: LD_INT 5
14681: PUSH
14682: FOR_TO
14683: IFFALSE 14762
// begin uc_nation := nation_nature ;
14685: LD_ADDR_OWVAR 21
14689: PUSH
14690: LD_INT 0
14692: ST_TO_ADDR
// uc_side := 0 ;
14693: LD_ADDR_OWVAR 20
14697: PUSH
14698: LD_INT 0
14700: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
14701: LD_ADDR_OWVAR 29
14705: PUSH
14706: LD_INT 12
14708: PUSH
14709: LD_INT 12
14711: PUSH
14712: EMPTY
14713: LIST
14714: LIST
14715: ST_TO_ADDR
// hc_agressivity := 20 ;
14716: LD_ADDR_OWVAR 35
14720: PUSH
14721: LD_INT 20
14723: ST_TO_ADDR
// hc_class := class_tiger ;
14724: LD_ADDR_OWVAR 28
14728: PUSH
14729: LD_INT 14
14731: ST_TO_ADDR
// hc_gallery :=  ;
14732: LD_ADDR_OWVAR 33
14736: PUSH
14737: LD_STRING 
14739: ST_TO_ADDR
// hc_name :=  ;
14740: LD_ADDR_OWVAR 26
14744: PUSH
14745: LD_STRING 
14747: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
14748: CALL_OW 44
14752: PPUSH
14753: LD_INT 0
14755: PPUSH
14756: CALL_OW 51
// end ;
14760: GO 14682
14762: POP
14763: POP
// end ;
14764: PPOPN 1
14766: END
// every 0 0$1 trigger StreamModeActive and sBomb do
14767: LD_EXP 47
14771: PUSH
14772: LD_EXP 67
14776: AND
14777: IFFALSE 14786
14779: GO 14781
14781: DISABLE
// StreamSibBomb ;
14782: CALL 14787 0 0
14786: END
// export function StreamSibBomb ; var i , x , y ; begin
14787: LD_INT 0
14789: PPUSH
14790: PPUSH
14791: PPUSH
14792: PPUSH
// result := false ;
14793: LD_ADDR_VAR 0 1
14797: PUSH
14798: LD_INT 0
14800: ST_TO_ADDR
// for i := 1 to 16 do
14801: LD_ADDR_VAR 0 2
14805: PUSH
14806: DOUBLE
14807: LD_INT 1
14809: DEC
14810: ST_TO_ADDR
14811: LD_INT 16
14813: PUSH
14814: FOR_TO
14815: IFFALSE 15014
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
14817: LD_ADDR_VAR 0 3
14821: PUSH
14822: LD_INT 10
14824: PUSH
14825: LD_INT 20
14827: PUSH
14828: LD_INT 30
14830: PUSH
14831: LD_INT 40
14833: PUSH
14834: LD_INT 50
14836: PUSH
14837: LD_INT 60
14839: PUSH
14840: LD_INT 70
14842: PUSH
14843: LD_INT 80
14845: PUSH
14846: LD_INT 90
14848: PUSH
14849: LD_INT 100
14851: PUSH
14852: LD_INT 110
14854: PUSH
14855: LD_INT 120
14857: PUSH
14858: LD_INT 130
14860: PUSH
14861: LD_INT 140
14863: PUSH
14864: LD_INT 150
14866: PUSH
14867: EMPTY
14868: LIST
14869: LIST
14870: LIST
14871: LIST
14872: LIST
14873: LIST
14874: LIST
14875: LIST
14876: LIST
14877: LIST
14878: LIST
14879: LIST
14880: LIST
14881: LIST
14882: LIST
14883: PUSH
14884: LD_INT 1
14886: PPUSH
14887: LD_INT 15
14889: PPUSH
14890: CALL_OW 12
14894: ARRAY
14895: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
14896: LD_ADDR_VAR 0 4
14900: PUSH
14901: LD_INT 10
14903: PUSH
14904: LD_INT 20
14906: PUSH
14907: LD_INT 30
14909: PUSH
14910: LD_INT 40
14912: PUSH
14913: LD_INT 50
14915: PUSH
14916: LD_INT 60
14918: PUSH
14919: LD_INT 70
14921: PUSH
14922: LD_INT 80
14924: PUSH
14925: LD_INT 90
14927: PUSH
14928: LD_INT 100
14930: PUSH
14931: LD_INT 110
14933: PUSH
14934: LD_INT 120
14936: PUSH
14937: LD_INT 130
14939: PUSH
14940: LD_INT 140
14942: PUSH
14943: LD_INT 150
14945: PUSH
14946: EMPTY
14947: LIST
14948: LIST
14949: LIST
14950: LIST
14951: LIST
14952: LIST
14953: LIST
14954: LIST
14955: LIST
14956: LIST
14957: LIST
14958: LIST
14959: LIST
14960: LIST
14961: LIST
14962: PUSH
14963: LD_INT 1
14965: PPUSH
14966: LD_INT 15
14968: PPUSH
14969: CALL_OW 12
14973: ARRAY
14974: ST_TO_ADDR
// if ValidHex ( x , y ) then
14975: LD_VAR 0 3
14979: PPUSH
14980: LD_VAR 0 4
14984: PPUSH
14985: CALL_OW 488
14989: IFFALSE 15012
// begin result := [ x , y ] ;
14991: LD_ADDR_VAR 0 1
14995: PUSH
14996: LD_VAR 0 3
15000: PUSH
15001: LD_VAR 0 4
15005: PUSH
15006: EMPTY
15007: LIST
15008: LIST
15009: ST_TO_ADDR
// break ;
15010: GO 15014
// end ; end ;
15012: GO 14814
15014: POP
15015: POP
// if result then
15016: LD_VAR 0 1
15020: IFFALSE 15080
// begin ToLua ( playSibBomb() ) ;
15022: LD_STRING playSibBomb()
15024: PPUSH
15025: CALL_OW 559
// wait ( 0 0$14 ) ;
15029: LD_INT 490
15031: PPUSH
15032: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
15036: LD_VAR 0 1
15040: PUSH
15041: LD_INT 1
15043: ARRAY
15044: PPUSH
15045: LD_VAR 0 1
15049: PUSH
15050: LD_INT 2
15052: ARRAY
15053: PPUSH
15054: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
15058: LD_VAR 0 1
15062: PUSH
15063: LD_INT 1
15065: ARRAY
15066: PPUSH
15067: LD_VAR 0 1
15071: PUSH
15072: LD_INT 2
15074: ARRAY
15075: PPUSH
15076: CALL_OW 429
// end ; end ;
15080: LD_VAR 0 1
15084: RET
// every 0 0$1 trigger StreamModeActive and sReset do
15085: LD_EXP 47
15089: PUSH
15090: LD_EXP 69
15094: AND
15095: IFFALSE 15107
15097: GO 15099
15099: DISABLE
// YouLost (  ) ;
15100: LD_STRING 
15102: PPUSH
15103: CALL_OW 104
15107: END
// every 0 0$1 trigger StreamModeActive and sFog do
15108: LD_EXP 47
15112: PUSH
15113: LD_EXP 68
15117: AND
15118: IFFALSE 15132
15120: GO 15122
15122: DISABLE
// FogOff ( your_side ) ;
15123: LD_OWVAR 2
15127: PPUSH
15128: CALL_OW 344
15132: END
// every 0 0$1 trigger StreamModeActive and sSun do
15133: LD_EXP 47
15137: PUSH
15138: LD_EXP 70
15142: AND
15143: IFFALSE 15171
15145: GO 15147
15147: DISABLE
// begin solar_recharge_percent := 0 ;
15148: LD_ADDR_OWVAR 79
15152: PUSH
15153: LD_INT 0
15155: ST_TO_ADDR
// wait ( 5 5$00 ) ;
15156: LD_INT 10500
15158: PPUSH
15159: CALL_OW 67
// solar_recharge_percent := 100 ;
15163: LD_ADDR_OWVAR 79
15167: PUSH
15168: LD_INT 100
15170: ST_TO_ADDR
// end ;
15171: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
15172: LD_EXP 47
15176: PUSH
15177: LD_EXP 71
15181: AND
15182: IFFALSE 15421
15184: GO 15186
15186: DISABLE
15187: LD_INT 0
15189: PPUSH
15190: PPUSH
15191: PPUSH
// begin tmp := [ ] ;
15192: LD_ADDR_VAR 0 3
15196: PUSH
15197: EMPTY
15198: ST_TO_ADDR
// for i := 1 to 6 do
15199: LD_ADDR_VAR 0 1
15203: PUSH
15204: DOUBLE
15205: LD_INT 1
15207: DEC
15208: ST_TO_ADDR
15209: LD_INT 6
15211: PUSH
15212: FOR_TO
15213: IFFALSE 15318
// begin uc_nation := nation_nature ;
15215: LD_ADDR_OWVAR 21
15219: PUSH
15220: LD_INT 0
15222: ST_TO_ADDR
// uc_side := 0 ;
15223: LD_ADDR_OWVAR 20
15227: PUSH
15228: LD_INT 0
15230: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
15231: LD_ADDR_OWVAR 29
15235: PUSH
15236: LD_INT 12
15238: PUSH
15239: LD_INT 12
15241: PUSH
15242: EMPTY
15243: LIST
15244: LIST
15245: ST_TO_ADDR
// hc_agressivity := 20 ;
15246: LD_ADDR_OWVAR 35
15250: PUSH
15251: LD_INT 20
15253: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
15254: LD_ADDR_OWVAR 28
15258: PUSH
15259: LD_INT 17
15261: ST_TO_ADDR
// hc_gallery :=  ;
15262: LD_ADDR_OWVAR 33
15266: PUSH
15267: LD_STRING 
15269: ST_TO_ADDR
// hc_name :=  ;
15270: LD_ADDR_OWVAR 26
15274: PUSH
15275: LD_STRING 
15277: ST_TO_ADDR
// un := CreateHuman ;
15278: LD_ADDR_VAR 0 2
15282: PUSH
15283: CALL_OW 44
15287: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
15288: LD_VAR 0 2
15292: PPUSH
15293: LD_INT 1
15295: PPUSH
15296: CALL_OW 51
// tmp := tmp ^ un ;
15300: LD_ADDR_VAR 0 3
15304: PUSH
15305: LD_VAR 0 3
15309: PUSH
15310: LD_VAR 0 2
15314: ADD
15315: ST_TO_ADDR
// end ;
15316: GO 15212
15318: POP
15319: POP
// repeat wait ( 0 0$1 ) ;
15320: LD_INT 35
15322: PPUSH
15323: CALL_OW 67
// for un in tmp do
15327: LD_ADDR_VAR 0 2
15331: PUSH
15332: LD_VAR 0 3
15336: PUSH
15337: FOR_IN
15338: IFFALSE 15412
// begin if IsDead ( un ) then
15340: LD_VAR 0 2
15344: PPUSH
15345: CALL_OW 301
15349: IFFALSE 15369
// begin tmp := tmp diff un ;
15351: LD_ADDR_VAR 0 3
15355: PUSH
15356: LD_VAR 0 3
15360: PUSH
15361: LD_VAR 0 2
15365: DIFF
15366: ST_TO_ADDR
// continue ;
15367: GO 15337
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
15369: LD_VAR 0 2
15373: PPUSH
15374: LD_INT 3
15376: PUSH
15377: LD_INT 22
15379: PUSH
15380: LD_INT 0
15382: PUSH
15383: EMPTY
15384: LIST
15385: LIST
15386: PUSH
15387: EMPTY
15388: LIST
15389: LIST
15390: PPUSH
15391: CALL_OW 69
15395: PPUSH
15396: LD_VAR 0 2
15400: PPUSH
15401: CALL_OW 74
15405: PPUSH
15406: CALL_OW 115
// end ;
15410: GO 15337
15412: POP
15413: POP
// until not tmp ;
15414: LD_VAR 0 3
15418: NOT
15419: IFFALSE 15320
// end ;
15421: PPOPN 3
15423: END
// every 0 0$1 trigger StreamModeActive and sTroll do
15424: LD_EXP 47
15428: PUSH
15429: LD_EXP 72
15433: AND
15434: IFFALSE 15488
15436: GO 15438
15438: DISABLE
// begin ToLua ( displayTroll(); ) ;
15439: LD_STRING displayTroll();
15441: PPUSH
15442: CALL_OW 559
// wait ( 3 3$00 ) ;
15446: LD_INT 6300
15448: PPUSH
15449: CALL_OW 67
// ToLua ( hideTroll(); ) ;
15453: LD_STRING hideTroll();
15455: PPUSH
15456: CALL_OW 559
// wait ( 1 1$00 ) ;
15460: LD_INT 2100
15462: PPUSH
15463: CALL_OW 67
// ToLua ( displayTroll(); ) ;
15467: LD_STRING displayTroll();
15469: PPUSH
15470: CALL_OW 559
// wait ( 1 1$00 ) ;
15474: LD_INT 2100
15476: PPUSH
15477: CALL_OW 67
// ToLua ( hideTroll(); ) ;
15481: LD_STRING hideTroll();
15483: PPUSH
15484: CALL_OW 559
// end ;
15488: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
15489: LD_EXP 47
15493: PUSH
15494: LD_EXP 73
15498: AND
15499: IFFALSE 15562
15501: GO 15503
15503: DISABLE
15504: LD_INT 0
15506: PPUSH
// begin p := 0 ;
15507: LD_ADDR_VAR 0 1
15511: PUSH
15512: LD_INT 0
15514: ST_TO_ADDR
// repeat game_speed := 1 ;
15515: LD_ADDR_OWVAR 65
15519: PUSH
15520: LD_INT 1
15522: ST_TO_ADDR
// wait ( 0 0$1 ) ;
15523: LD_INT 35
15525: PPUSH
15526: CALL_OW 67
// p := p + 1 ;
15530: LD_ADDR_VAR 0 1
15534: PUSH
15535: LD_VAR 0 1
15539: PUSH
15540: LD_INT 1
15542: PLUS
15543: ST_TO_ADDR
// until p >= 60 ;
15544: LD_VAR 0 1
15548: PUSH
15549: LD_INT 60
15551: GREATEREQUAL
15552: IFFALSE 15515
// game_speed := 4 ;
15554: LD_ADDR_OWVAR 65
15558: PUSH
15559: LD_INT 4
15561: ST_TO_ADDR
// end ;
15562: PPOPN 1
15564: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
15565: LD_EXP 47
15569: PUSH
15570: LD_EXP 74
15574: AND
15575: IFFALSE 15721
15577: GO 15579
15579: DISABLE
15580: LD_INT 0
15582: PPUSH
15583: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15584: LD_ADDR_VAR 0 1
15588: PUSH
15589: LD_INT 22
15591: PUSH
15592: LD_OWVAR 2
15596: PUSH
15597: EMPTY
15598: LIST
15599: LIST
15600: PUSH
15601: LD_INT 2
15603: PUSH
15604: LD_INT 30
15606: PUSH
15607: LD_INT 0
15609: PUSH
15610: EMPTY
15611: LIST
15612: LIST
15613: PUSH
15614: LD_INT 30
15616: PUSH
15617: LD_INT 1
15619: PUSH
15620: EMPTY
15621: LIST
15622: LIST
15623: PUSH
15624: EMPTY
15625: LIST
15626: LIST
15627: LIST
15628: PUSH
15629: EMPTY
15630: LIST
15631: LIST
15632: PPUSH
15633: CALL_OW 69
15637: ST_TO_ADDR
// if not depot then
15638: LD_VAR 0 1
15642: NOT
15643: IFFALSE 15647
// exit ;
15645: GO 15721
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
15647: LD_ADDR_VAR 0 2
15651: PUSH
15652: LD_VAR 0 1
15656: PUSH
15657: LD_INT 1
15659: PPUSH
15660: LD_VAR 0 1
15664: PPUSH
15665: CALL_OW 12
15669: ARRAY
15670: PPUSH
15671: CALL_OW 274
15675: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
15676: LD_VAR 0 2
15680: PPUSH
15681: LD_INT 1
15683: PPUSH
15684: LD_INT 0
15686: PPUSH
15687: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
15691: LD_VAR 0 2
15695: PPUSH
15696: LD_INT 2
15698: PPUSH
15699: LD_INT 0
15701: PPUSH
15702: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
15706: LD_VAR 0 2
15710: PPUSH
15711: LD_INT 3
15713: PPUSH
15714: LD_INT 0
15716: PPUSH
15717: CALL_OW 277
// end ;
15721: PPOPN 2
15723: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
15724: LD_EXP 47
15728: PUSH
15729: LD_EXP 75
15733: AND
15734: IFFALSE 15831
15736: GO 15738
15738: DISABLE
15739: LD_INT 0
15741: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
15742: LD_ADDR_VAR 0 1
15746: PUSH
15747: LD_INT 22
15749: PUSH
15750: LD_OWVAR 2
15754: PUSH
15755: EMPTY
15756: LIST
15757: LIST
15758: PUSH
15759: LD_INT 21
15761: PUSH
15762: LD_INT 1
15764: PUSH
15765: EMPTY
15766: LIST
15767: LIST
15768: PUSH
15769: LD_INT 3
15771: PUSH
15772: LD_INT 23
15774: PUSH
15775: LD_INT 0
15777: PUSH
15778: EMPTY
15779: LIST
15780: LIST
15781: PUSH
15782: EMPTY
15783: LIST
15784: LIST
15785: PUSH
15786: EMPTY
15787: LIST
15788: LIST
15789: LIST
15790: PPUSH
15791: CALL_OW 69
15795: ST_TO_ADDR
// if not tmp then
15796: LD_VAR 0 1
15800: NOT
15801: IFFALSE 15805
// exit ;
15803: GO 15831
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
15805: LD_VAR 0 1
15809: PUSH
15810: LD_INT 1
15812: PPUSH
15813: LD_VAR 0 1
15817: PPUSH
15818: CALL_OW 12
15822: ARRAY
15823: PPUSH
15824: LD_INT 200
15826: PPUSH
15827: CALL_OW 234
// end ;
15831: PPOPN 1
15833: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
15834: LD_EXP 47
15838: PUSH
15839: LD_EXP 76
15843: AND
15844: IFFALSE 15923
15846: GO 15848
15848: DISABLE
15849: LD_INT 0
15851: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
15852: LD_ADDR_VAR 0 1
15856: PUSH
15857: LD_INT 22
15859: PUSH
15860: LD_OWVAR 2
15864: PUSH
15865: EMPTY
15866: LIST
15867: LIST
15868: PUSH
15869: LD_INT 21
15871: PUSH
15872: LD_INT 2
15874: PUSH
15875: EMPTY
15876: LIST
15877: LIST
15878: PUSH
15879: EMPTY
15880: LIST
15881: LIST
15882: PPUSH
15883: CALL_OW 69
15887: ST_TO_ADDR
// if not tmp then
15888: LD_VAR 0 1
15892: NOT
15893: IFFALSE 15897
// exit ;
15895: GO 15923
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
15897: LD_VAR 0 1
15901: PUSH
15902: LD_INT 1
15904: PPUSH
15905: LD_VAR 0 1
15909: PPUSH
15910: CALL_OW 12
15914: ARRAY
15915: PPUSH
15916: LD_INT 60
15918: PPUSH
15919: CALL_OW 234
// end ;
15923: PPOPN 1
15925: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
15926: LD_EXP 47
15930: PUSH
15931: LD_EXP 77
15935: AND
15936: IFFALSE 16035
15938: GO 15940
15940: DISABLE
15941: LD_INT 0
15943: PPUSH
15944: PPUSH
// begin enable ;
15945: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
15946: LD_ADDR_VAR 0 1
15950: PUSH
15951: LD_INT 22
15953: PUSH
15954: LD_OWVAR 2
15958: PUSH
15959: EMPTY
15960: LIST
15961: LIST
15962: PUSH
15963: LD_INT 61
15965: PUSH
15966: EMPTY
15967: LIST
15968: PUSH
15969: LD_INT 33
15971: PUSH
15972: LD_INT 2
15974: PUSH
15975: EMPTY
15976: LIST
15977: LIST
15978: PUSH
15979: EMPTY
15980: LIST
15981: LIST
15982: LIST
15983: PPUSH
15984: CALL_OW 69
15988: ST_TO_ADDR
// if not tmp then
15989: LD_VAR 0 1
15993: NOT
15994: IFFALSE 15998
// exit ;
15996: GO 16035
// for i in tmp do
15998: LD_ADDR_VAR 0 2
16002: PUSH
16003: LD_VAR 0 1
16007: PUSH
16008: FOR_IN
16009: IFFALSE 16033
// if IsControledBy ( i ) then
16011: LD_VAR 0 2
16015: PPUSH
16016: CALL_OW 312
16020: IFFALSE 16031
// ComUnlink ( i ) ;
16022: LD_VAR 0 2
16026: PPUSH
16027: CALL_OW 136
16031: GO 16008
16033: POP
16034: POP
// end ;
16035: PPOPN 2
16037: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
16038: LD_EXP 47
16042: PUSH
16043: LD_EXP 78
16047: AND
16048: IFFALSE 16188
16050: GO 16052
16052: DISABLE
16053: LD_INT 0
16055: PPUSH
16056: PPUSH
// begin ToLua ( displayPowell(); ) ;
16057: LD_STRING displayPowell();
16059: PPUSH
16060: CALL_OW 559
// uc_side := 0 ;
16064: LD_ADDR_OWVAR 20
16068: PUSH
16069: LD_INT 0
16071: ST_TO_ADDR
// uc_nation := 2 ;
16072: LD_ADDR_OWVAR 21
16076: PUSH
16077: LD_INT 2
16079: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
16080: LD_ADDR_OWVAR 37
16084: PUSH
16085: LD_INT 14
16087: ST_TO_ADDR
// vc_engine := engine_siberite ;
16088: LD_ADDR_OWVAR 39
16092: PUSH
16093: LD_INT 3
16095: ST_TO_ADDR
// vc_control := control_apeman ;
16096: LD_ADDR_OWVAR 38
16100: PUSH
16101: LD_INT 5
16103: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
16104: LD_ADDR_OWVAR 40
16108: PUSH
16109: LD_INT 29
16111: ST_TO_ADDR
// un := CreateVehicle ;
16112: LD_ADDR_VAR 0 2
16116: PUSH
16117: CALL_OW 45
16121: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
16122: LD_VAR 0 2
16126: PPUSH
16127: LD_INT 1
16129: PPUSH
16130: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
16134: LD_INT 35
16136: PPUSH
16137: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
16141: LD_VAR 0 2
16145: PPUSH
16146: LD_INT 22
16148: PUSH
16149: LD_OWVAR 2
16153: PUSH
16154: EMPTY
16155: LIST
16156: LIST
16157: PPUSH
16158: CALL_OW 69
16162: PPUSH
16163: LD_VAR 0 2
16167: PPUSH
16168: CALL_OW 74
16172: PPUSH
16173: CALL_OW 115
// until IsDead ( un ) ;
16177: LD_VAR 0 2
16181: PPUSH
16182: CALL_OW 301
16186: IFFALSE 16134
// end ;
16188: PPOPN 2
16190: END
// every 0 0$1 trigger StreamModeActive and sStu do
16191: LD_EXP 47
16195: PUSH
16196: LD_EXP 86
16200: AND
16201: IFFALSE 16217
16203: GO 16205
16205: DISABLE
// begin ToLua ( displayStucuk(); ) ;
16206: LD_STRING displayStucuk();
16208: PPUSH
16209: CALL_OW 559
// ResetFog ;
16213: CALL_OW 335
// end ;
16217: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
16218: LD_EXP 47
16222: PUSH
16223: LD_EXP 79
16227: AND
16228: IFFALSE 16369
16230: GO 16232
16232: DISABLE
16233: LD_INT 0
16235: PPUSH
16236: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
16237: LD_ADDR_VAR 0 2
16241: PUSH
16242: LD_INT 22
16244: PUSH
16245: LD_OWVAR 2
16249: PUSH
16250: EMPTY
16251: LIST
16252: LIST
16253: PUSH
16254: LD_INT 21
16256: PUSH
16257: LD_INT 1
16259: PUSH
16260: EMPTY
16261: LIST
16262: LIST
16263: PUSH
16264: EMPTY
16265: LIST
16266: LIST
16267: PPUSH
16268: CALL_OW 69
16272: ST_TO_ADDR
// if not tmp then
16273: LD_VAR 0 2
16277: NOT
16278: IFFALSE 16282
// exit ;
16280: GO 16369
// un := tmp [ rand ( 1 , tmp ) ] ;
16282: LD_ADDR_VAR 0 1
16286: PUSH
16287: LD_VAR 0 2
16291: PUSH
16292: LD_INT 1
16294: PPUSH
16295: LD_VAR 0 2
16299: PPUSH
16300: CALL_OW 12
16304: ARRAY
16305: ST_TO_ADDR
// SetSide ( un , 0 ) ;
16306: LD_VAR 0 1
16310: PPUSH
16311: LD_INT 0
16313: PPUSH
16314: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
16318: LD_VAR 0 1
16322: PPUSH
16323: LD_OWVAR 3
16327: PUSH
16328: LD_VAR 0 1
16332: DIFF
16333: PPUSH
16334: LD_VAR 0 1
16338: PPUSH
16339: CALL_OW 74
16343: PPUSH
16344: CALL_OW 115
// wait ( 0 0$20 ) ;
16348: LD_INT 700
16350: PPUSH
16351: CALL_OW 67
// SetSide ( un , your_side ) ;
16355: LD_VAR 0 1
16359: PPUSH
16360: LD_OWVAR 2
16364: PPUSH
16365: CALL_OW 235
// end ;
16369: PPOPN 2
16371: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
16372: LD_EXP 47
16376: PUSH
16377: LD_EXP 80
16381: AND
16382: IFFALSE 16488
16384: GO 16386
16386: DISABLE
16387: LD_INT 0
16389: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
16390: LD_ADDR_VAR 0 1
16394: PUSH
16395: LD_INT 22
16397: PUSH
16398: LD_OWVAR 2
16402: PUSH
16403: EMPTY
16404: LIST
16405: LIST
16406: PUSH
16407: LD_INT 2
16409: PUSH
16410: LD_INT 30
16412: PUSH
16413: LD_INT 0
16415: PUSH
16416: EMPTY
16417: LIST
16418: LIST
16419: PUSH
16420: LD_INT 30
16422: PUSH
16423: LD_INT 1
16425: PUSH
16426: EMPTY
16427: LIST
16428: LIST
16429: PUSH
16430: EMPTY
16431: LIST
16432: LIST
16433: LIST
16434: PUSH
16435: EMPTY
16436: LIST
16437: LIST
16438: PPUSH
16439: CALL_OW 69
16443: ST_TO_ADDR
// if not depot then
16444: LD_VAR 0 1
16448: NOT
16449: IFFALSE 16453
// exit ;
16451: GO 16488
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
16453: LD_VAR 0 1
16457: PUSH
16458: LD_INT 1
16460: ARRAY
16461: PPUSH
16462: CALL_OW 250
16466: PPUSH
16467: LD_VAR 0 1
16471: PUSH
16472: LD_INT 1
16474: ARRAY
16475: PPUSH
16476: CALL_OW 251
16480: PPUSH
16481: LD_INT 70
16483: PPUSH
16484: CALL_OW 495
// end ;
16488: PPOPN 1
16490: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
16491: LD_EXP 47
16495: PUSH
16496: LD_EXP 81
16500: AND
16501: IFFALSE 16712
16503: GO 16505
16505: DISABLE
16506: LD_INT 0
16508: PPUSH
16509: PPUSH
16510: PPUSH
16511: PPUSH
16512: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
16513: LD_ADDR_VAR 0 5
16517: PUSH
16518: LD_INT 22
16520: PUSH
16521: LD_OWVAR 2
16525: PUSH
16526: EMPTY
16527: LIST
16528: LIST
16529: PUSH
16530: LD_INT 21
16532: PUSH
16533: LD_INT 1
16535: PUSH
16536: EMPTY
16537: LIST
16538: LIST
16539: PUSH
16540: EMPTY
16541: LIST
16542: LIST
16543: PPUSH
16544: CALL_OW 69
16548: ST_TO_ADDR
// if not tmp then
16549: LD_VAR 0 5
16553: NOT
16554: IFFALSE 16558
// exit ;
16556: GO 16712
// for i in tmp do
16558: LD_ADDR_VAR 0 1
16562: PUSH
16563: LD_VAR 0 5
16567: PUSH
16568: FOR_IN
16569: IFFALSE 16710
// begin d := rand ( 0 , 5 ) ;
16571: LD_ADDR_VAR 0 4
16575: PUSH
16576: LD_INT 0
16578: PPUSH
16579: LD_INT 5
16581: PPUSH
16582: CALL_OW 12
16586: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
16587: LD_ADDR_VAR 0 2
16591: PUSH
16592: LD_VAR 0 1
16596: PPUSH
16597: CALL_OW 250
16601: PPUSH
16602: LD_VAR 0 4
16606: PPUSH
16607: LD_INT 3
16609: PPUSH
16610: LD_INT 12
16612: PPUSH
16613: CALL_OW 12
16617: PPUSH
16618: CALL_OW 272
16622: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
16623: LD_ADDR_VAR 0 3
16627: PUSH
16628: LD_VAR 0 1
16632: PPUSH
16633: CALL_OW 251
16637: PPUSH
16638: LD_VAR 0 4
16642: PPUSH
16643: LD_INT 3
16645: PPUSH
16646: LD_INT 12
16648: PPUSH
16649: CALL_OW 12
16653: PPUSH
16654: CALL_OW 273
16658: ST_TO_ADDR
// if ValidHex ( x , y ) then
16659: LD_VAR 0 2
16663: PPUSH
16664: LD_VAR 0 3
16668: PPUSH
16669: CALL_OW 488
16673: IFFALSE 16708
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
16675: LD_VAR 0 1
16679: PPUSH
16680: LD_VAR 0 2
16684: PPUSH
16685: LD_VAR 0 3
16689: PPUSH
16690: LD_INT 3
16692: PPUSH
16693: LD_INT 6
16695: PPUSH
16696: CALL_OW 12
16700: PPUSH
16701: LD_INT 1
16703: PPUSH
16704: CALL_OW 483
// end ;
16708: GO 16568
16710: POP
16711: POP
// end ;
16712: PPOPN 5
16714: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
16715: LD_EXP 47
16719: PUSH
16720: LD_EXP 82
16724: AND
16725: IFFALSE 16819
16727: GO 16729
16729: DISABLE
16730: LD_INT 0
16732: PPUSH
16733: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
16734: LD_ADDR_VAR 0 2
16738: PUSH
16739: LD_INT 22
16741: PUSH
16742: LD_OWVAR 2
16746: PUSH
16747: EMPTY
16748: LIST
16749: LIST
16750: PUSH
16751: LD_INT 32
16753: PUSH
16754: LD_INT 1
16756: PUSH
16757: EMPTY
16758: LIST
16759: LIST
16760: PUSH
16761: LD_INT 21
16763: PUSH
16764: LD_INT 2
16766: PUSH
16767: EMPTY
16768: LIST
16769: LIST
16770: PUSH
16771: EMPTY
16772: LIST
16773: LIST
16774: LIST
16775: PPUSH
16776: CALL_OW 69
16780: ST_TO_ADDR
// if not tmp then
16781: LD_VAR 0 2
16785: NOT
16786: IFFALSE 16790
// exit ;
16788: GO 16819
// for i in tmp do
16790: LD_ADDR_VAR 0 1
16794: PUSH
16795: LD_VAR 0 2
16799: PUSH
16800: FOR_IN
16801: IFFALSE 16817
// SetFuel ( i , 0 ) ;
16803: LD_VAR 0 1
16807: PPUSH
16808: LD_INT 0
16810: PPUSH
16811: CALL_OW 240
16815: GO 16800
16817: POP
16818: POP
// end ;
16819: PPOPN 2
16821: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
16822: LD_EXP 47
16826: PUSH
16827: LD_EXP 83
16831: AND
16832: IFFALSE 16898
16834: GO 16836
16836: DISABLE
16837: LD_INT 0
16839: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
16840: LD_ADDR_VAR 0 1
16844: PUSH
16845: LD_INT 22
16847: PUSH
16848: LD_OWVAR 2
16852: PUSH
16853: EMPTY
16854: LIST
16855: LIST
16856: PUSH
16857: LD_INT 30
16859: PUSH
16860: LD_INT 29
16862: PUSH
16863: EMPTY
16864: LIST
16865: LIST
16866: PUSH
16867: EMPTY
16868: LIST
16869: LIST
16870: PPUSH
16871: CALL_OW 69
16875: ST_TO_ADDR
// if not tmp then
16876: LD_VAR 0 1
16880: NOT
16881: IFFALSE 16885
// exit ;
16883: GO 16898
// DestroyUnit ( tmp [ 1 ] ) ;
16885: LD_VAR 0 1
16889: PUSH
16890: LD_INT 1
16892: ARRAY
16893: PPUSH
16894: CALL_OW 65
// end ;
16898: PPOPN 1
16900: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
16901: LD_EXP 47
16905: PUSH
16906: LD_EXP 85
16910: AND
16911: IFFALSE 17040
16913: GO 16915
16915: DISABLE
16916: LD_INT 0
16918: PPUSH
// begin uc_side := 0 ;
16919: LD_ADDR_OWVAR 20
16923: PUSH
16924: LD_INT 0
16926: ST_TO_ADDR
// uc_nation := nation_arabian ;
16927: LD_ADDR_OWVAR 21
16931: PUSH
16932: LD_INT 2
16934: ST_TO_ADDR
// hc_gallery :=  ;
16935: LD_ADDR_OWVAR 33
16939: PUSH
16940: LD_STRING 
16942: ST_TO_ADDR
// hc_name :=  ;
16943: LD_ADDR_OWVAR 26
16947: PUSH
16948: LD_STRING 
16950: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
16951: LD_INT 1
16953: PPUSH
16954: LD_INT 11
16956: PPUSH
16957: LD_INT 10
16959: PPUSH
16960: CALL_OW 380
// un := CreateHuman ;
16964: LD_ADDR_VAR 0 1
16968: PUSH
16969: CALL_OW 44
16973: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
16974: LD_VAR 0 1
16978: PPUSH
16979: LD_INT 1
16981: PPUSH
16982: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
16986: LD_INT 35
16988: PPUSH
16989: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
16993: LD_VAR 0 1
16997: PPUSH
16998: LD_INT 22
17000: PUSH
17001: LD_OWVAR 2
17005: PUSH
17006: EMPTY
17007: LIST
17008: LIST
17009: PPUSH
17010: CALL_OW 69
17014: PPUSH
17015: LD_VAR 0 1
17019: PPUSH
17020: CALL_OW 74
17024: PPUSH
17025: CALL_OW 115
// until IsDead ( un ) ;
17029: LD_VAR 0 1
17033: PPUSH
17034: CALL_OW 301
17038: IFFALSE 16986
// end ;
17040: PPOPN 1
17042: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
17043: LD_EXP 47
17047: PUSH
17048: LD_EXP 87
17052: AND
17053: IFFALSE 17065
17055: GO 17057
17057: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
17058: LD_STRING earthquake(getX(game), 0, 32)
17060: PPUSH
17061: CALL_OW 559
17065: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
17066: LD_EXP 47
17070: PUSH
17071: LD_EXP 88
17075: AND
17076: IFFALSE 17167
17078: GO 17080
17080: DISABLE
17081: LD_INT 0
17083: PPUSH
// begin enable ;
17084: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
17085: LD_ADDR_VAR 0 1
17089: PUSH
17090: LD_INT 22
17092: PUSH
17093: LD_OWVAR 2
17097: PUSH
17098: EMPTY
17099: LIST
17100: LIST
17101: PUSH
17102: LD_INT 21
17104: PUSH
17105: LD_INT 2
17107: PUSH
17108: EMPTY
17109: LIST
17110: LIST
17111: PUSH
17112: LD_INT 33
17114: PUSH
17115: LD_INT 3
17117: PUSH
17118: EMPTY
17119: LIST
17120: LIST
17121: PUSH
17122: EMPTY
17123: LIST
17124: LIST
17125: LIST
17126: PPUSH
17127: CALL_OW 69
17131: ST_TO_ADDR
// if not tmp then
17132: LD_VAR 0 1
17136: NOT
17137: IFFALSE 17141
// exit ;
17139: GO 17167
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
17141: LD_VAR 0 1
17145: PUSH
17146: LD_INT 1
17148: PPUSH
17149: LD_VAR 0 1
17153: PPUSH
17154: CALL_OW 12
17158: ARRAY
17159: PPUSH
17160: LD_INT 1
17162: PPUSH
17163: CALL_OW 234
// end ;
17167: PPOPN 1
17169: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
17170: LD_EXP 47
17174: PUSH
17175: LD_EXP 89
17179: AND
17180: IFFALSE 17321
17182: GO 17184
17184: DISABLE
17185: LD_INT 0
17187: PPUSH
17188: PPUSH
17189: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17190: LD_ADDR_VAR 0 3
17194: PUSH
17195: LD_INT 22
17197: PUSH
17198: LD_OWVAR 2
17202: PUSH
17203: EMPTY
17204: LIST
17205: LIST
17206: PUSH
17207: LD_INT 25
17209: PUSH
17210: LD_INT 1
17212: PUSH
17213: EMPTY
17214: LIST
17215: LIST
17216: PUSH
17217: EMPTY
17218: LIST
17219: LIST
17220: PPUSH
17221: CALL_OW 69
17225: ST_TO_ADDR
// if not tmp then
17226: LD_VAR 0 3
17230: NOT
17231: IFFALSE 17235
// exit ;
17233: GO 17321
// un := tmp [ rand ( 1 , tmp ) ] ;
17235: LD_ADDR_VAR 0 2
17239: PUSH
17240: LD_VAR 0 3
17244: PUSH
17245: LD_INT 1
17247: PPUSH
17248: LD_VAR 0 3
17252: PPUSH
17253: CALL_OW 12
17257: ARRAY
17258: ST_TO_ADDR
// if Crawls ( un ) then
17259: LD_VAR 0 2
17263: PPUSH
17264: CALL_OW 318
17268: IFFALSE 17279
// ComWalk ( un ) ;
17270: LD_VAR 0 2
17274: PPUSH
17275: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
17279: LD_VAR 0 2
17283: PPUSH
17284: LD_INT 9
17286: PPUSH
17287: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
17291: LD_INT 28
17293: PPUSH
17294: LD_OWVAR 2
17298: PPUSH
17299: LD_INT 2
17301: PPUSH
17302: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
17306: LD_INT 29
17308: PPUSH
17309: LD_OWVAR 2
17313: PPUSH
17314: LD_INT 2
17316: PPUSH
17317: CALL_OW 322
// end ;
17321: PPOPN 3
17323: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
17324: LD_EXP 47
17328: PUSH
17329: LD_EXP 90
17333: AND
17334: IFFALSE 17445
17336: GO 17338
17338: DISABLE
17339: LD_INT 0
17341: PPUSH
17342: PPUSH
17343: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17344: LD_ADDR_VAR 0 3
17348: PUSH
17349: LD_INT 22
17351: PUSH
17352: LD_OWVAR 2
17356: PUSH
17357: EMPTY
17358: LIST
17359: LIST
17360: PUSH
17361: LD_INT 25
17363: PUSH
17364: LD_INT 1
17366: PUSH
17367: EMPTY
17368: LIST
17369: LIST
17370: PUSH
17371: EMPTY
17372: LIST
17373: LIST
17374: PPUSH
17375: CALL_OW 69
17379: ST_TO_ADDR
// if not tmp then
17380: LD_VAR 0 3
17384: NOT
17385: IFFALSE 17389
// exit ;
17387: GO 17445
// un := tmp [ rand ( 1 , tmp ) ] ;
17389: LD_ADDR_VAR 0 2
17393: PUSH
17394: LD_VAR 0 3
17398: PUSH
17399: LD_INT 1
17401: PPUSH
17402: LD_VAR 0 3
17406: PPUSH
17407: CALL_OW 12
17411: ARRAY
17412: ST_TO_ADDR
// if Crawls ( un ) then
17413: LD_VAR 0 2
17417: PPUSH
17418: CALL_OW 318
17422: IFFALSE 17433
// ComWalk ( un ) ;
17424: LD_VAR 0 2
17428: PPUSH
17429: CALL_OW 138
// SetClass ( un , class_mortar ) ;
17433: LD_VAR 0 2
17437: PPUSH
17438: LD_INT 8
17440: PPUSH
17441: CALL_OW 336
// end ;
17445: PPOPN 3
17447: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
17448: LD_EXP 47
17452: PUSH
17453: LD_EXP 91
17457: AND
17458: IFFALSE 17602
17460: GO 17462
17462: DISABLE
17463: LD_INT 0
17465: PPUSH
17466: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
17467: LD_ADDR_VAR 0 2
17471: PUSH
17472: LD_INT 22
17474: PUSH
17475: LD_OWVAR 2
17479: PUSH
17480: EMPTY
17481: LIST
17482: LIST
17483: PUSH
17484: LD_INT 21
17486: PUSH
17487: LD_INT 2
17489: PUSH
17490: EMPTY
17491: LIST
17492: LIST
17493: PUSH
17494: LD_INT 2
17496: PUSH
17497: LD_INT 34
17499: PUSH
17500: LD_INT 12
17502: PUSH
17503: EMPTY
17504: LIST
17505: LIST
17506: PUSH
17507: LD_INT 34
17509: PUSH
17510: LD_INT 51
17512: PUSH
17513: EMPTY
17514: LIST
17515: LIST
17516: PUSH
17517: LD_INT 34
17519: PUSH
17520: LD_INT 32
17522: PUSH
17523: EMPTY
17524: LIST
17525: LIST
17526: PUSH
17527: EMPTY
17528: LIST
17529: LIST
17530: LIST
17531: LIST
17532: PUSH
17533: EMPTY
17534: LIST
17535: LIST
17536: LIST
17537: PPUSH
17538: CALL_OW 69
17542: ST_TO_ADDR
// if not tmp then
17543: LD_VAR 0 2
17547: NOT
17548: IFFALSE 17552
// exit ;
17550: GO 17602
// for i in tmp do
17552: LD_ADDR_VAR 0 1
17556: PUSH
17557: LD_VAR 0 2
17561: PUSH
17562: FOR_IN
17563: IFFALSE 17600
// if GetCargo ( i , mat_artifact ) = 0 then
17565: LD_VAR 0 1
17569: PPUSH
17570: LD_INT 4
17572: PPUSH
17573: CALL_OW 289
17577: PUSH
17578: LD_INT 0
17580: EQUAL
17581: IFFALSE 17598
// SetCargo ( i , mat_siberit , 100 ) ;
17583: LD_VAR 0 1
17587: PPUSH
17588: LD_INT 3
17590: PPUSH
17591: LD_INT 100
17593: PPUSH
17594: CALL_OW 290
17598: GO 17562
17600: POP
17601: POP
// end ;
17602: PPOPN 2
17604: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
17605: LD_EXP 47
17609: PUSH
17610: LD_EXP 92
17614: AND
17615: IFFALSE 17798
17617: GO 17619
17619: DISABLE
17620: LD_INT 0
17622: PPUSH
17623: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
17624: LD_ADDR_VAR 0 2
17628: PUSH
17629: LD_INT 22
17631: PUSH
17632: LD_OWVAR 2
17636: PUSH
17637: EMPTY
17638: LIST
17639: LIST
17640: PPUSH
17641: CALL_OW 69
17645: ST_TO_ADDR
// if not tmp then
17646: LD_VAR 0 2
17650: NOT
17651: IFFALSE 17655
// exit ;
17653: GO 17798
// for i := 1 to 2 do
17655: LD_ADDR_VAR 0 1
17659: PUSH
17660: DOUBLE
17661: LD_INT 1
17663: DEC
17664: ST_TO_ADDR
17665: LD_INT 2
17667: PUSH
17668: FOR_TO
17669: IFFALSE 17796
// begin uc_side := your_side ;
17671: LD_ADDR_OWVAR 20
17675: PUSH
17676: LD_OWVAR 2
17680: ST_TO_ADDR
// uc_nation := nation_american ;
17681: LD_ADDR_OWVAR 21
17685: PUSH
17686: LD_INT 1
17688: ST_TO_ADDR
// vc_chassis := us_morphling ;
17689: LD_ADDR_OWVAR 37
17693: PUSH
17694: LD_INT 5
17696: ST_TO_ADDR
// vc_engine := engine_siberite ;
17697: LD_ADDR_OWVAR 39
17701: PUSH
17702: LD_INT 3
17704: ST_TO_ADDR
// vc_control := control_computer ;
17705: LD_ADDR_OWVAR 38
17709: PUSH
17710: LD_INT 3
17712: ST_TO_ADDR
// vc_weapon := us_double_laser ;
17713: LD_ADDR_OWVAR 40
17717: PUSH
17718: LD_INT 10
17720: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
17721: LD_VAR 0 2
17725: PUSH
17726: LD_INT 1
17728: ARRAY
17729: PPUSH
17730: CALL_OW 310
17734: NOT
17735: IFFALSE 17782
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
17737: CALL_OW 45
17741: PPUSH
17742: LD_VAR 0 2
17746: PUSH
17747: LD_INT 1
17749: ARRAY
17750: PPUSH
17751: CALL_OW 250
17755: PPUSH
17756: LD_VAR 0 2
17760: PUSH
17761: LD_INT 1
17763: ARRAY
17764: PPUSH
17765: CALL_OW 251
17769: PPUSH
17770: LD_INT 12
17772: PPUSH
17773: LD_INT 1
17775: PPUSH
17776: CALL_OW 50
17780: GO 17794
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
17782: CALL_OW 45
17786: PPUSH
17787: LD_INT 1
17789: PPUSH
17790: CALL_OW 51
// end ;
17794: GO 17668
17796: POP
17797: POP
// end ;
17798: PPOPN 2
17800: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
17801: LD_EXP 47
17805: PUSH
17806: LD_EXP 93
17810: AND
17811: IFFALSE 18033
17813: GO 17815
17815: DISABLE
17816: LD_INT 0
17818: PPUSH
17819: PPUSH
17820: PPUSH
17821: PPUSH
17822: PPUSH
17823: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
17824: LD_ADDR_VAR 0 6
17828: PUSH
17829: LD_INT 22
17831: PUSH
17832: LD_OWVAR 2
17836: PUSH
17837: EMPTY
17838: LIST
17839: LIST
17840: PUSH
17841: LD_INT 21
17843: PUSH
17844: LD_INT 1
17846: PUSH
17847: EMPTY
17848: LIST
17849: LIST
17850: PUSH
17851: LD_INT 3
17853: PUSH
17854: LD_INT 23
17856: PUSH
17857: LD_INT 0
17859: PUSH
17860: EMPTY
17861: LIST
17862: LIST
17863: PUSH
17864: EMPTY
17865: LIST
17866: LIST
17867: PUSH
17868: EMPTY
17869: LIST
17870: LIST
17871: LIST
17872: PPUSH
17873: CALL_OW 69
17877: ST_TO_ADDR
// if not tmp then
17878: LD_VAR 0 6
17882: NOT
17883: IFFALSE 17887
// exit ;
17885: GO 18033
// s1 := rand ( 1 , 4 ) ;
17887: LD_ADDR_VAR 0 2
17891: PUSH
17892: LD_INT 1
17894: PPUSH
17895: LD_INT 4
17897: PPUSH
17898: CALL_OW 12
17902: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
17903: LD_ADDR_VAR 0 4
17907: PUSH
17908: LD_VAR 0 6
17912: PUSH
17913: LD_INT 1
17915: ARRAY
17916: PPUSH
17917: LD_VAR 0 2
17921: PPUSH
17922: CALL_OW 259
17926: ST_TO_ADDR
// if s1 = 1 then
17927: LD_VAR 0 2
17931: PUSH
17932: LD_INT 1
17934: EQUAL
17935: IFFALSE 17955
// s2 := rand ( 2 , 4 ) else
17937: LD_ADDR_VAR 0 3
17941: PUSH
17942: LD_INT 2
17944: PPUSH
17945: LD_INT 4
17947: PPUSH
17948: CALL_OW 12
17952: ST_TO_ADDR
17953: GO 17963
// s2 := 1 ;
17955: LD_ADDR_VAR 0 3
17959: PUSH
17960: LD_INT 1
17962: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
17963: LD_ADDR_VAR 0 5
17967: PUSH
17968: LD_VAR 0 6
17972: PUSH
17973: LD_INT 1
17975: ARRAY
17976: PPUSH
17977: LD_VAR 0 3
17981: PPUSH
17982: CALL_OW 259
17986: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
17987: LD_VAR 0 6
17991: PUSH
17992: LD_INT 1
17994: ARRAY
17995: PPUSH
17996: LD_VAR 0 2
18000: PPUSH
18001: LD_VAR 0 5
18005: PPUSH
18006: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
18010: LD_VAR 0 6
18014: PUSH
18015: LD_INT 1
18017: ARRAY
18018: PPUSH
18019: LD_VAR 0 3
18023: PPUSH
18024: LD_VAR 0 4
18028: PPUSH
18029: CALL_OW 237
// end ;
18033: PPOPN 6
18035: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
18036: LD_EXP 47
18040: PUSH
18041: LD_EXP 94
18045: AND
18046: IFFALSE 18125
18048: GO 18050
18050: DISABLE
18051: LD_INT 0
18053: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
18054: LD_ADDR_VAR 0 1
18058: PUSH
18059: LD_INT 22
18061: PUSH
18062: LD_OWVAR 2
18066: PUSH
18067: EMPTY
18068: LIST
18069: LIST
18070: PUSH
18071: LD_INT 30
18073: PUSH
18074: LD_INT 3
18076: PUSH
18077: EMPTY
18078: LIST
18079: LIST
18080: PUSH
18081: EMPTY
18082: LIST
18083: LIST
18084: PPUSH
18085: CALL_OW 69
18089: ST_TO_ADDR
// if not tmp then
18090: LD_VAR 0 1
18094: NOT
18095: IFFALSE 18099
// exit ;
18097: GO 18125
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
18099: LD_VAR 0 1
18103: PUSH
18104: LD_INT 1
18106: PPUSH
18107: LD_VAR 0 1
18111: PPUSH
18112: CALL_OW 12
18116: ARRAY
18117: PPUSH
18118: LD_INT 1
18120: PPUSH
18121: CALL_OW 234
// end ;
18125: PPOPN 1
18127: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
18128: LD_EXP 47
18132: PUSH
18133: LD_EXP 95
18137: AND
18138: IFFALSE 18250
18140: GO 18142
18142: DISABLE
18143: LD_INT 0
18145: PPUSH
18146: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
18147: LD_ADDR_VAR 0 2
18151: PUSH
18152: LD_INT 22
18154: PUSH
18155: LD_OWVAR 2
18159: PUSH
18160: EMPTY
18161: LIST
18162: LIST
18163: PUSH
18164: LD_INT 2
18166: PUSH
18167: LD_INT 30
18169: PUSH
18170: LD_INT 27
18172: PUSH
18173: EMPTY
18174: LIST
18175: LIST
18176: PUSH
18177: LD_INT 30
18179: PUSH
18180: LD_INT 26
18182: PUSH
18183: EMPTY
18184: LIST
18185: LIST
18186: PUSH
18187: LD_INT 30
18189: PUSH
18190: LD_INT 28
18192: PUSH
18193: EMPTY
18194: LIST
18195: LIST
18196: PUSH
18197: EMPTY
18198: LIST
18199: LIST
18200: LIST
18201: LIST
18202: PUSH
18203: EMPTY
18204: LIST
18205: LIST
18206: PPUSH
18207: CALL_OW 69
18211: ST_TO_ADDR
// if not tmp then
18212: LD_VAR 0 2
18216: NOT
18217: IFFALSE 18221
// exit ;
18219: GO 18250
// for i in tmp do
18221: LD_ADDR_VAR 0 1
18225: PUSH
18226: LD_VAR 0 2
18230: PUSH
18231: FOR_IN
18232: IFFALSE 18248
// SetLives ( i , 1 ) ;
18234: LD_VAR 0 1
18238: PPUSH
18239: LD_INT 1
18241: PPUSH
18242: CALL_OW 234
18246: GO 18231
18248: POP
18249: POP
// end ;
18250: PPOPN 2
18252: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
18253: LD_EXP 47
18257: PUSH
18258: LD_EXP 96
18262: AND
18263: IFFALSE 18537
18265: GO 18267
18267: DISABLE
18268: LD_INT 0
18270: PPUSH
18271: PPUSH
18272: PPUSH
// begin i := rand ( 1 , 7 ) ;
18273: LD_ADDR_VAR 0 1
18277: PUSH
18278: LD_INT 1
18280: PPUSH
18281: LD_INT 7
18283: PPUSH
18284: CALL_OW 12
18288: ST_TO_ADDR
// case i of 1 :
18289: LD_VAR 0 1
18293: PUSH
18294: LD_INT 1
18296: DOUBLE
18297: EQUAL
18298: IFTRUE 18302
18300: GO 18312
18302: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
18303: LD_STRING earthquake(getX(game), 0, 32)
18305: PPUSH
18306: CALL_OW 559
18310: GO 18537
18312: LD_INT 2
18314: DOUBLE
18315: EQUAL
18316: IFTRUE 18320
18318: GO 18334
18320: POP
// begin ToLua ( displayStucuk(); ) ;
18321: LD_STRING displayStucuk();
18323: PPUSH
18324: CALL_OW 559
// ResetFog ;
18328: CALL_OW 335
// end ; 3 :
18332: GO 18537
18334: LD_INT 3
18336: DOUBLE
18337: EQUAL
18338: IFTRUE 18342
18340: GO 18446
18342: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18343: LD_ADDR_VAR 0 2
18347: PUSH
18348: LD_INT 22
18350: PUSH
18351: LD_OWVAR 2
18355: PUSH
18356: EMPTY
18357: LIST
18358: LIST
18359: PUSH
18360: LD_INT 25
18362: PUSH
18363: LD_INT 1
18365: PUSH
18366: EMPTY
18367: LIST
18368: LIST
18369: PUSH
18370: EMPTY
18371: LIST
18372: LIST
18373: PPUSH
18374: CALL_OW 69
18378: ST_TO_ADDR
// if not tmp then
18379: LD_VAR 0 2
18383: NOT
18384: IFFALSE 18388
// exit ;
18386: GO 18537
// un := tmp [ rand ( 1 , tmp ) ] ;
18388: LD_ADDR_VAR 0 3
18392: PUSH
18393: LD_VAR 0 2
18397: PUSH
18398: LD_INT 1
18400: PPUSH
18401: LD_VAR 0 2
18405: PPUSH
18406: CALL_OW 12
18410: ARRAY
18411: ST_TO_ADDR
// if Crawls ( un ) then
18412: LD_VAR 0 3
18416: PPUSH
18417: CALL_OW 318
18421: IFFALSE 18432
// ComWalk ( un ) ;
18423: LD_VAR 0 3
18427: PPUSH
18428: CALL_OW 138
// SetClass ( un , class_mortar ) ;
18432: LD_VAR 0 3
18436: PPUSH
18437: LD_INT 8
18439: PPUSH
18440: CALL_OW 336
// end ; 4 :
18444: GO 18537
18446: LD_INT 4
18448: DOUBLE
18449: EQUAL
18450: IFTRUE 18454
18452: GO 18515
18454: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
18455: LD_ADDR_VAR 0 2
18459: PUSH
18460: LD_INT 22
18462: PUSH
18463: LD_OWVAR 2
18467: PUSH
18468: EMPTY
18469: LIST
18470: LIST
18471: PUSH
18472: LD_INT 30
18474: PUSH
18475: LD_INT 29
18477: PUSH
18478: EMPTY
18479: LIST
18480: LIST
18481: PUSH
18482: EMPTY
18483: LIST
18484: LIST
18485: PPUSH
18486: CALL_OW 69
18490: ST_TO_ADDR
// if not tmp then
18491: LD_VAR 0 2
18495: NOT
18496: IFFALSE 18500
// exit ;
18498: GO 18537
// DestroyUnit ( tmp [ 1 ] ) ;
18500: LD_VAR 0 2
18504: PUSH
18505: LD_INT 1
18507: ARRAY
18508: PPUSH
18509: CALL_OW 65
// end ; 5 .. 7 :
18513: GO 18537
18515: LD_INT 5
18517: DOUBLE
18518: GREATEREQUAL
18519: IFFALSE 18527
18521: LD_INT 7
18523: DOUBLE
18524: LESSEQUAL
18525: IFTRUE 18529
18527: GO 18536
18529: POP
// StreamSibBomb ; end ;
18530: CALL 14787 0 0
18534: GO 18537
18536: POP
// end ;
18537: PPOPN 3
18539: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
18540: LD_EXP 47
18544: PUSH
18545: LD_EXP 97
18549: AND
18550: IFFALSE 18706
18552: GO 18554
18554: DISABLE
18555: LD_INT 0
18557: PPUSH
18558: PPUSH
18559: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
18560: LD_ADDR_VAR 0 2
18564: PUSH
18565: LD_INT 81
18567: PUSH
18568: LD_OWVAR 2
18572: PUSH
18573: EMPTY
18574: LIST
18575: LIST
18576: PUSH
18577: LD_INT 2
18579: PUSH
18580: LD_INT 21
18582: PUSH
18583: LD_INT 1
18585: PUSH
18586: EMPTY
18587: LIST
18588: LIST
18589: PUSH
18590: LD_INT 21
18592: PUSH
18593: LD_INT 2
18595: PUSH
18596: EMPTY
18597: LIST
18598: LIST
18599: PUSH
18600: EMPTY
18601: LIST
18602: LIST
18603: LIST
18604: PUSH
18605: EMPTY
18606: LIST
18607: LIST
18608: PPUSH
18609: CALL_OW 69
18613: ST_TO_ADDR
// if not tmp then
18614: LD_VAR 0 2
18618: NOT
18619: IFFALSE 18623
// exit ;
18621: GO 18706
// p := 0 ;
18623: LD_ADDR_VAR 0 3
18627: PUSH
18628: LD_INT 0
18630: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
18631: LD_INT 35
18633: PPUSH
18634: CALL_OW 67
// p := p + 1 ;
18638: LD_ADDR_VAR 0 3
18642: PUSH
18643: LD_VAR 0 3
18647: PUSH
18648: LD_INT 1
18650: PLUS
18651: ST_TO_ADDR
// for i in tmp do
18652: LD_ADDR_VAR 0 1
18656: PUSH
18657: LD_VAR 0 2
18661: PUSH
18662: FOR_IN
18663: IFFALSE 18694
// if GetLives ( i ) < 1000 then
18665: LD_VAR 0 1
18669: PPUSH
18670: CALL_OW 256
18674: PUSH
18675: LD_INT 1000
18677: LESS
18678: IFFALSE 18692
// SetLives ( i , 1000 ) ;
18680: LD_VAR 0 1
18684: PPUSH
18685: LD_INT 1000
18687: PPUSH
18688: CALL_OW 234
18692: GO 18662
18694: POP
18695: POP
// until p > 20 ;
18696: LD_VAR 0 3
18700: PUSH
18701: LD_INT 20
18703: GREATER
18704: IFFALSE 18631
// end ;
18706: PPOPN 3
18708: END
// every 0 0$1 trigger StreamModeActive and sTime do
18709: LD_EXP 47
18713: PUSH
18714: LD_EXP 98
18718: AND
18719: IFFALSE 18754
18721: GO 18723
18723: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
18724: LD_INT 28
18726: PPUSH
18727: LD_OWVAR 2
18731: PPUSH
18732: LD_INT 2
18734: PPUSH
18735: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
18739: LD_INT 30
18741: PPUSH
18742: LD_OWVAR 2
18746: PPUSH
18747: LD_INT 2
18749: PPUSH
18750: CALL_OW 322
// end ;
18754: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
18755: LD_EXP 47
18759: PUSH
18760: LD_EXP 99
18764: AND
18765: IFFALSE 18886
18767: GO 18769
18769: DISABLE
18770: LD_INT 0
18772: PPUSH
18773: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
18774: LD_ADDR_VAR 0 2
18778: PUSH
18779: LD_INT 22
18781: PUSH
18782: LD_OWVAR 2
18786: PUSH
18787: EMPTY
18788: LIST
18789: LIST
18790: PUSH
18791: LD_INT 21
18793: PUSH
18794: LD_INT 1
18796: PUSH
18797: EMPTY
18798: LIST
18799: LIST
18800: PUSH
18801: LD_INT 3
18803: PUSH
18804: LD_INT 23
18806: PUSH
18807: LD_INT 0
18809: PUSH
18810: EMPTY
18811: LIST
18812: LIST
18813: PUSH
18814: EMPTY
18815: LIST
18816: LIST
18817: PUSH
18818: EMPTY
18819: LIST
18820: LIST
18821: LIST
18822: PPUSH
18823: CALL_OW 69
18827: ST_TO_ADDR
// if not tmp then
18828: LD_VAR 0 2
18832: NOT
18833: IFFALSE 18837
// exit ;
18835: GO 18886
// for i in tmp do
18837: LD_ADDR_VAR 0 1
18841: PUSH
18842: LD_VAR 0 2
18846: PUSH
18847: FOR_IN
18848: IFFALSE 18884
// begin if Crawls ( i ) then
18850: LD_VAR 0 1
18854: PPUSH
18855: CALL_OW 318
18859: IFFALSE 18870
// ComWalk ( i ) ;
18861: LD_VAR 0 1
18865: PPUSH
18866: CALL_OW 138
// SetClass ( i , 2 ) ;
18870: LD_VAR 0 1
18874: PPUSH
18875: LD_INT 2
18877: PPUSH
18878: CALL_OW 336
// end ;
18882: GO 18847
18884: POP
18885: POP
// end ;
18886: PPOPN 2
18888: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
18889: LD_EXP 47
18893: PUSH
18894: LD_EXP 100
18898: AND
18899: IFFALSE 19180
18901: GO 18903
18903: DISABLE
18904: LD_INT 0
18906: PPUSH
18907: PPUSH
18908: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
18909: LD_OWVAR 2
18913: PPUSH
18914: LD_INT 9
18916: PPUSH
18917: LD_INT 1
18919: PPUSH
18920: LD_INT 1
18922: PPUSH
18923: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
18927: LD_INT 9
18929: PPUSH
18930: LD_OWVAR 2
18934: PPUSH
18935: CALL_OW 343
// uc_side := 9 ;
18939: LD_ADDR_OWVAR 20
18943: PUSH
18944: LD_INT 9
18946: ST_TO_ADDR
// uc_nation := 2 ;
18947: LD_ADDR_OWVAR 21
18951: PUSH
18952: LD_INT 2
18954: ST_TO_ADDR
// hc_name := Dark Warrior ;
18955: LD_ADDR_OWVAR 26
18959: PUSH
18960: LD_STRING Dark Warrior
18962: ST_TO_ADDR
// hc_gallery :=  ;
18963: LD_ADDR_OWVAR 33
18967: PUSH
18968: LD_STRING 
18970: ST_TO_ADDR
// hc_noskilllimit := true ;
18971: LD_ADDR_OWVAR 76
18975: PUSH
18976: LD_INT 1
18978: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
18979: LD_ADDR_OWVAR 31
18983: PUSH
18984: LD_INT 30
18986: PUSH
18987: LD_INT 30
18989: PUSH
18990: LD_INT 30
18992: PUSH
18993: LD_INT 30
18995: PUSH
18996: EMPTY
18997: LIST
18998: LIST
18999: LIST
19000: LIST
19001: ST_TO_ADDR
// un := CreateHuman ;
19002: LD_ADDR_VAR 0 3
19006: PUSH
19007: CALL_OW 44
19011: ST_TO_ADDR
// hc_noskilllimit := false ;
19012: LD_ADDR_OWVAR 76
19016: PUSH
19017: LD_INT 0
19019: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
19020: LD_VAR 0 3
19024: PPUSH
19025: LD_INT 1
19027: PPUSH
19028: CALL_OW 51
// p := 0 ;
19032: LD_ADDR_VAR 0 2
19036: PUSH
19037: LD_INT 0
19039: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
19040: LD_INT 35
19042: PPUSH
19043: CALL_OW 67
// p := p + 1 ;
19047: LD_ADDR_VAR 0 2
19051: PUSH
19052: LD_VAR 0 2
19056: PUSH
19057: LD_INT 1
19059: PLUS
19060: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
19061: LD_VAR 0 3
19065: PPUSH
19066: CALL_OW 256
19070: PUSH
19071: LD_INT 1000
19073: LESS
19074: IFFALSE 19088
// SetLives ( un , 1000 ) ;
19076: LD_VAR 0 3
19080: PPUSH
19081: LD_INT 1000
19083: PPUSH
19084: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
19088: LD_VAR 0 3
19092: PPUSH
19093: LD_INT 81
19095: PUSH
19096: LD_OWVAR 2
19100: PUSH
19101: EMPTY
19102: LIST
19103: LIST
19104: PUSH
19105: LD_INT 91
19107: PUSH
19108: LD_VAR 0 3
19112: PUSH
19113: LD_INT 30
19115: PUSH
19116: EMPTY
19117: LIST
19118: LIST
19119: LIST
19120: PUSH
19121: EMPTY
19122: LIST
19123: LIST
19124: PPUSH
19125: CALL_OW 69
19129: PPUSH
19130: LD_VAR 0 3
19134: PPUSH
19135: CALL_OW 74
19139: PPUSH
19140: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
19144: LD_VAR 0 2
19148: PUSH
19149: LD_INT 60
19151: GREATER
19152: PUSH
19153: LD_VAR 0 3
19157: PPUSH
19158: CALL_OW 301
19162: OR
19163: IFFALSE 19040
// if un then
19165: LD_VAR 0 3
19169: IFFALSE 19180
// RemoveUnit ( un ) ;
19171: LD_VAR 0 3
19175: PPUSH
19176: CALL_OW 64
// end ;
19180: PPOPN 3
19182: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
19183: LD_INT 0
19185: PPUSH
// case cmd of 301 :
19186: LD_VAR 0 1
19190: PUSH
19191: LD_INT 301
19193: DOUBLE
19194: EQUAL
19195: IFTRUE 19199
19197: GO 19231
19199: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
19200: LD_VAR 0 6
19204: PPUSH
19205: LD_VAR 0 7
19209: PPUSH
19210: LD_VAR 0 8
19214: PPUSH
19215: LD_VAR 0 4
19219: PPUSH
19220: LD_VAR 0 5
19224: PPUSH
19225: CALL 20432 0 5
19229: GO 19352
19231: LD_INT 302
19233: DOUBLE
19234: EQUAL
19235: IFTRUE 19239
19237: GO 19276
19239: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
19240: LD_VAR 0 6
19244: PPUSH
19245: LD_VAR 0 7
19249: PPUSH
19250: LD_VAR 0 8
19254: PPUSH
19255: LD_VAR 0 9
19259: PPUSH
19260: LD_VAR 0 4
19264: PPUSH
19265: LD_VAR 0 5
19269: PPUSH
19270: CALL 20523 0 6
19274: GO 19352
19276: LD_INT 303
19278: DOUBLE
19279: EQUAL
19280: IFTRUE 19284
19282: GO 19321
19284: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
19285: LD_VAR 0 6
19289: PPUSH
19290: LD_VAR 0 7
19294: PPUSH
19295: LD_VAR 0 8
19299: PPUSH
19300: LD_VAR 0 9
19304: PPUSH
19305: LD_VAR 0 4
19309: PPUSH
19310: LD_VAR 0 5
19314: PPUSH
19315: CALL 19357 0 6
19319: GO 19352
19321: LD_INT 304
19323: DOUBLE
19324: EQUAL
19325: IFTRUE 19329
19327: GO 19351
19329: POP
// hHackTeleport ( unit , x , y ) ; end ;
19330: LD_VAR 0 2
19334: PPUSH
19335: LD_VAR 0 4
19339: PPUSH
19340: LD_VAR 0 5
19344: PPUSH
19345: CALL 21116 0 3
19349: GO 19352
19351: POP
// end ;
19352: LD_VAR 0 12
19356: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
19357: LD_INT 0
19359: PPUSH
19360: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
19361: LD_VAR 0 1
19365: PUSH
19366: LD_INT 1
19368: LESS
19369: PUSH
19370: LD_VAR 0 1
19374: PUSH
19375: LD_INT 3
19377: GREATER
19378: OR
19379: PUSH
19380: LD_VAR 0 5
19384: PPUSH
19385: LD_VAR 0 6
19389: PPUSH
19390: CALL_OW 428
19394: OR
19395: IFFALSE 19399
// exit ;
19397: GO 20119
// uc_side := your_side ;
19399: LD_ADDR_OWVAR 20
19403: PUSH
19404: LD_OWVAR 2
19408: ST_TO_ADDR
// uc_nation := nation ;
19409: LD_ADDR_OWVAR 21
19413: PUSH
19414: LD_VAR 0 1
19418: ST_TO_ADDR
// bc_level = 1 ;
19419: LD_ADDR_OWVAR 43
19423: PUSH
19424: LD_INT 1
19426: ST_TO_ADDR
// case btype of 1 :
19427: LD_VAR 0 2
19431: PUSH
19432: LD_INT 1
19434: DOUBLE
19435: EQUAL
19436: IFTRUE 19440
19438: GO 19451
19440: POP
// bc_type := b_depot ; 2 :
19441: LD_ADDR_OWVAR 42
19445: PUSH
19446: LD_INT 0
19448: ST_TO_ADDR
19449: GO 20063
19451: LD_INT 2
19453: DOUBLE
19454: EQUAL
19455: IFTRUE 19459
19457: GO 19470
19459: POP
// bc_type := b_warehouse ; 3 :
19460: LD_ADDR_OWVAR 42
19464: PUSH
19465: LD_INT 1
19467: ST_TO_ADDR
19468: GO 20063
19470: LD_INT 3
19472: DOUBLE
19473: EQUAL
19474: IFTRUE 19478
19476: GO 19489
19478: POP
// bc_type := b_lab ; 4 .. 9 :
19479: LD_ADDR_OWVAR 42
19483: PUSH
19484: LD_INT 6
19486: ST_TO_ADDR
19487: GO 20063
19489: LD_INT 4
19491: DOUBLE
19492: GREATEREQUAL
19493: IFFALSE 19501
19495: LD_INT 9
19497: DOUBLE
19498: LESSEQUAL
19499: IFTRUE 19503
19501: GO 19555
19503: POP
// begin bc_type := b_lab_half ;
19504: LD_ADDR_OWVAR 42
19508: PUSH
19509: LD_INT 7
19511: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
19512: LD_ADDR_OWVAR 44
19516: PUSH
19517: LD_INT 10
19519: PUSH
19520: LD_INT 11
19522: PUSH
19523: LD_INT 12
19525: PUSH
19526: LD_INT 15
19528: PUSH
19529: LD_INT 14
19531: PUSH
19532: LD_INT 13
19534: PUSH
19535: EMPTY
19536: LIST
19537: LIST
19538: LIST
19539: LIST
19540: LIST
19541: LIST
19542: PUSH
19543: LD_VAR 0 2
19547: PUSH
19548: LD_INT 3
19550: MINUS
19551: ARRAY
19552: ST_TO_ADDR
// end ; 10 .. 13 :
19553: GO 20063
19555: LD_INT 10
19557: DOUBLE
19558: GREATEREQUAL
19559: IFFALSE 19567
19561: LD_INT 13
19563: DOUBLE
19564: LESSEQUAL
19565: IFTRUE 19569
19567: GO 19646
19569: POP
// begin bc_type := b_lab_full ;
19570: LD_ADDR_OWVAR 42
19574: PUSH
19575: LD_INT 8
19577: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
19578: LD_ADDR_OWVAR 44
19582: PUSH
19583: LD_INT 10
19585: PUSH
19586: LD_INT 12
19588: PUSH
19589: LD_INT 14
19591: PUSH
19592: LD_INT 13
19594: PUSH
19595: EMPTY
19596: LIST
19597: LIST
19598: LIST
19599: LIST
19600: PUSH
19601: LD_VAR 0 2
19605: PUSH
19606: LD_INT 9
19608: MINUS
19609: ARRAY
19610: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
19611: LD_ADDR_OWVAR 45
19615: PUSH
19616: LD_INT 11
19618: PUSH
19619: LD_INT 15
19621: PUSH
19622: LD_INT 12
19624: PUSH
19625: LD_INT 15
19627: PUSH
19628: EMPTY
19629: LIST
19630: LIST
19631: LIST
19632: LIST
19633: PUSH
19634: LD_VAR 0 2
19638: PUSH
19639: LD_INT 9
19641: MINUS
19642: ARRAY
19643: ST_TO_ADDR
// end ; 14 :
19644: GO 20063
19646: LD_INT 14
19648: DOUBLE
19649: EQUAL
19650: IFTRUE 19654
19652: GO 19665
19654: POP
// bc_type := b_workshop ; 15 :
19655: LD_ADDR_OWVAR 42
19659: PUSH
19660: LD_INT 2
19662: ST_TO_ADDR
19663: GO 20063
19665: LD_INT 15
19667: DOUBLE
19668: EQUAL
19669: IFTRUE 19673
19671: GO 19684
19673: POP
// bc_type := b_factory ; 16 :
19674: LD_ADDR_OWVAR 42
19678: PUSH
19679: LD_INT 3
19681: ST_TO_ADDR
19682: GO 20063
19684: LD_INT 16
19686: DOUBLE
19687: EQUAL
19688: IFTRUE 19692
19690: GO 19703
19692: POP
// bc_type := b_ext_gun ; 17 :
19693: LD_ADDR_OWVAR 42
19697: PUSH
19698: LD_INT 17
19700: ST_TO_ADDR
19701: GO 20063
19703: LD_INT 17
19705: DOUBLE
19706: EQUAL
19707: IFTRUE 19711
19709: GO 19739
19711: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
19712: LD_ADDR_OWVAR 42
19716: PUSH
19717: LD_INT 19
19719: PUSH
19720: LD_INT 23
19722: PUSH
19723: LD_INT 19
19725: PUSH
19726: EMPTY
19727: LIST
19728: LIST
19729: LIST
19730: PUSH
19731: LD_VAR 0 1
19735: ARRAY
19736: ST_TO_ADDR
19737: GO 20063
19739: LD_INT 18
19741: DOUBLE
19742: EQUAL
19743: IFTRUE 19747
19745: GO 19758
19747: POP
// bc_type := b_ext_radar ; 19 :
19748: LD_ADDR_OWVAR 42
19752: PUSH
19753: LD_INT 20
19755: ST_TO_ADDR
19756: GO 20063
19758: LD_INT 19
19760: DOUBLE
19761: EQUAL
19762: IFTRUE 19766
19764: GO 19777
19766: POP
// bc_type := b_ext_radio ; 20 :
19767: LD_ADDR_OWVAR 42
19771: PUSH
19772: LD_INT 22
19774: ST_TO_ADDR
19775: GO 20063
19777: LD_INT 20
19779: DOUBLE
19780: EQUAL
19781: IFTRUE 19785
19783: GO 19796
19785: POP
// bc_type := b_ext_siberium ; 21 :
19786: LD_ADDR_OWVAR 42
19790: PUSH
19791: LD_INT 21
19793: ST_TO_ADDR
19794: GO 20063
19796: LD_INT 21
19798: DOUBLE
19799: EQUAL
19800: IFTRUE 19804
19802: GO 19815
19804: POP
// bc_type := b_ext_computer ; 22 :
19805: LD_ADDR_OWVAR 42
19809: PUSH
19810: LD_INT 24
19812: ST_TO_ADDR
19813: GO 20063
19815: LD_INT 22
19817: DOUBLE
19818: EQUAL
19819: IFTRUE 19823
19821: GO 19834
19823: POP
// bc_type := b_ext_track ; 23 :
19824: LD_ADDR_OWVAR 42
19828: PUSH
19829: LD_INT 16
19831: ST_TO_ADDR
19832: GO 20063
19834: LD_INT 23
19836: DOUBLE
19837: EQUAL
19838: IFTRUE 19842
19840: GO 19853
19842: POP
// bc_type := b_ext_laser ; 24 :
19843: LD_ADDR_OWVAR 42
19847: PUSH
19848: LD_INT 25
19850: ST_TO_ADDR
19851: GO 20063
19853: LD_INT 24
19855: DOUBLE
19856: EQUAL
19857: IFTRUE 19861
19859: GO 19872
19861: POP
// bc_type := b_control_tower ; 25 :
19862: LD_ADDR_OWVAR 42
19866: PUSH
19867: LD_INT 36
19869: ST_TO_ADDR
19870: GO 20063
19872: LD_INT 25
19874: DOUBLE
19875: EQUAL
19876: IFTRUE 19880
19878: GO 19891
19880: POP
// bc_type := b_breastwork ; 26 :
19881: LD_ADDR_OWVAR 42
19885: PUSH
19886: LD_INT 31
19888: ST_TO_ADDR
19889: GO 20063
19891: LD_INT 26
19893: DOUBLE
19894: EQUAL
19895: IFTRUE 19899
19897: GO 19910
19899: POP
// bc_type := b_bunker ; 27 :
19900: LD_ADDR_OWVAR 42
19904: PUSH
19905: LD_INT 32
19907: ST_TO_ADDR
19908: GO 20063
19910: LD_INT 27
19912: DOUBLE
19913: EQUAL
19914: IFTRUE 19918
19916: GO 19929
19918: POP
// bc_type := b_turret ; 28 :
19919: LD_ADDR_OWVAR 42
19923: PUSH
19924: LD_INT 33
19926: ST_TO_ADDR
19927: GO 20063
19929: LD_INT 28
19931: DOUBLE
19932: EQUAL
19933: IFTRUE 19937
19935: GO 19948
19937: POP
// bc_type := b_armoury ; 29 :
19938: LD_ADDR_OWVAR 42
19942: PUSH
19943: LD_INT 4
19945: ST_TO_ADDR
19946: GO 20063
19948: LD_INT 29
19950: DOUBLE
19951: EQUAL
19952: IFTRUE 19956
19954: GO 19967
19956: POP
// bc_type := b_barracks ; 30 :
19957: LD_ADDR_OWVAR 42
19961: PUSH
19962: LD_INT 5
19964: ST_TO_ADDR
19965: GO 20063
19967: LD_INT 30
19969: DOUBLE
19970: EQUAL
19971: IFTRUE 19975
19973: GO 19986
19975: POP
// bc_type := b_solar_power ; 31 :
19976: LD_ADDR_OWVAR 42
19980: PUSH
19981: LD_INT 27
19983: ST_TO_ADDR
19984: GO 20063
19986: LD_INT 31
19988: DOUBLE
19989: EQUAL
19990: IFTRUE 19994
19992: GO 20005
19994: POP
// bc_type := b_oil_power ; 32 :
19995: LD_ADDR_OWVAR 42
19999: PUSH
20000: LD_INT 26
20002: ST_TO_ADDR
20003: GO 20063
20005: LD_INT 32
20007: DOUBLE
20008: EQUAL
20009: IFTRUE 20013
20011: GO 20024
20013: POP
// bc_type := b_siberite_power ; 33 :
20014: LD_ADDR_OWVAR 42
20018: PUSH
20019: LD_INT 28
20021: ST_TO_ADDR
20022: GO 20063
20024: LD_INT 33
20026: DOUBLE
20027: EQUAL
20028: IFTRUE 20032
20030: GO 20043
20032: POP
// bc_type := b_oil_mine ; 34 :
20033: LD_ADDR_OWVAR 42
20037: PUSH
20038: LD_INT 29
20040: ST_TO_ADDR
20041: GO 20063
20043: LD_INT 34
20045: DOUBLE
20046: EQUAL
20047: IFTRUE 20051
20049: GO 20062
20051: POP
// bc_type := b_siberite_mine ; end ;
20052: LD_ADDR_OWVAR 42
20056: PUSH
20057: LD_INT 30
20059: ST_TO_ADDR
20060: GO 20063
20062: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
20063: LD_ADDR_VAR 0 8
20067: PUSH
20068: LD_VAR 0 5
20072: PPUSH
20073: LD_VAR 0 6
20077: PPUSH
20078: LD_VAR 0 3
20082: PPUSH
20083: CALL_OW 47
20087: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
20088: LD_OWVAR 42
20092: PUSH
20093: LD_INT 32
20095: PUSH
20096: LD_INT 33
20098: PUSH
20099: EMPTY
20100: LIST
20101: LIST
20102: IN
20103: IFFALSE 20119
// PlaceWeaponTurret ( b , weapon ) ;
20105: LD_VAR 0 8
20109: PPUSH
20110: LD_VAR 0 4
20114: PPUSH
20115: CALL_OW 431
// end ;
20119: LD_VAR 0 7
20123: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
20124: LD_INT 0
20126: PPUSH
20127: PPUSH
20128: PPUSH
20129: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20130: LD_ADDR_VAR 0 4
20134: PUSH
20135: LD_INT 22
20137: PUSH
20138: LD_OWVAR 2
20142: PUSH
20143: EMPTY
20144: LIST
20145: LIST
20146: PUSH
20147: LD_INT 2
20149: PUSH
20150: LD_INT 30
20152: PUSH
20153: LD_INT 0
20155: PUSH
20156: EMPTY
20157: LIST
20158: LIST
20159: PUSH
20160: LD_INT 30
20162: PUSH
20163: LD_INT 1
20165: PUSH
20166: EMPTY
20167: LIST
20168: LIST
20169: PUSH
20170: EMPTY
20171: LIST
20172: LIST
20173: LIST
20174: PUSH
20175: EMPTY
20176: LIST
20177: LIST
20178: PPUSH
20179: CALL_OW 69
20183: ST_TO_ADDR
// if not tmp then
20184: LD_VAR 0 4
20188: NOT
20189: IFFALSE 20193
// exit ;
20191: GO 20252
// for i in tmp do
20193: LD_ADDR_VAR 0 2
20197: PUSH
20198: LD_VAR 0 4
20202: PUSH
20203: FOR_IN
20204: IFFALSE 20250
// for j = 1 to 3 do
20206: LD_ADDR_VAR 0 3
20210: PUSH
20211: DOUBLE
20212: LD_INT 1
20214: DEC
20215: ST_TO_ADDR
20216: LD_INT 3
20218: PUSH
20219: FOR_TO
20220: IFFALSE 20246
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
20222: LD_VAR 0 2
20226: PPUSH
20227: CALL_OW 274
20231: PPUSH
20232: LD_VAR 0 3
20236: PPUSH
20237: LD_INT 99999
20239: PPUSH
20240: CALL_OW 277
20244: GO 20219
20246: POP
20247: POP
20248: GO 20203
20250: POP
20251: POP
// end ;
20252: LD_VAR 0 1
20256: RET
// export function hHackSetLevel10 ; var i , j ; begin
20257: LD_INT 0
20259: PPUSH
20260: PPUSH
20261: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
20262: LD_ADDR_VAR 0 2
20266: PUSH
20267: LD_INT 21
20269: PUSH
20270: LD_INT 1
20272: PUSH
20273: EMPTY
20274: LIST
20275: LIST
20276: PPUSH
20277: CALL_OW 69
20281: PUSH
20282: FOR_IN
20283: IFFALSE 20335
// if IsSelected ( i ) then
20285: LD_VAR 0 2
20289: PPUSH
20290: CALL_OW 306
20294: IFFALSE 20333
// begin for j := 1 to 4 do
20296: LD_ADDR_VAR 0 3
20300: PUSH
20301: DOUBLE
20302: LD_INT 1
20304: DEC
20305: ST_TO_ADDR
20306: LD_INT 4
20308: PUSH
20309: FOR_TO
20310: IFFALSE 20331
// SetSkill ( i , j , 10 ) ;
20312: LD_VAR 0 2
20316: PPUSH
20317: LD_VAR 0 3
20321: PPUSH
20322: LD_INT 10
20324: PPUSH
20325: CALL_OW 237
20329: GO 20309
20331: POP
20332: POP
// end ;
20333: GO 20282
20335: POP
20336: POP
// end ;
20337: LD_VAR 0 1
20341: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
20342: LD_INT 0
20344: PPUSH
20345: PPUSH
20346: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
20347: LD_ADDR_VAR 0 2
20351: PUSH
20352: LD_INT 22
20354: PUSH
20355: LD_OWVAR 2
20359: PUSH
20360: EMPTY
20361: LIST
20362: LIST
20363: PUSH
20364: LD_INT 21
20366: PUSH
20367: LD_INT 1
20369: PUSH
20370: EMPTY
20371: LIST
20372: LIST
20373: PUSH
20374: EMPTY
20375: LIST
20376: LIST
20377: PPUSH
20378: CALL_OW 69
20382: PUSH
20383: FOR_IN
20384: IFFALSE 20425
// begin for j := 1 to 4 do
20386: LD_ADDR_VAR 0 3
20390: PUSH
20391: DOUBLE
20392: LD_INT 1
20394: DEC
20395: ST_TO_ADDR
20396: LD_INT 4
20398: PUSH
20399: FOR_TO
20400: IFFALSE 20421
// SetSkill ( i , j , 10 ) ;
20402: LD_VAR 0 2
20406: PPUSH
20407: LD_VAR 0 3
20411: PPUSH
20412: LD_INT 10
20414: PPUSH
20415: CALL_OW 237
20419: GO 20399
20421: POP
20422: POP
// end ;
20423: GO 20383
20425: POP
20426: POP
// end ;
20427: LD_VAR 0 1
20431: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
20432: LD_INT 0
20434: PPUSH
// uc_side := your_side ;
20435: LD_ADDR_OWVAR 20
20439: PUSH
20440: LD_OWVAR 2
20444: ST_TO_ADDR
// uc_nation := nation ;
20445: LD_ADDR_OWVAR 21
20449: PUSH
20450: LD_VAR 0 1
20454: ST_TO_ADDR
// InitHc ;
20455: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
20459: LD_INT 0
20461: PPUSH
20462: LD_VAR 0 2
20466: PPUSH
20467: LD_VAR 0 3
20471: PPUSH
20472: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
20476: LD_VAR 0 4
20480: PPUSH
20481: LD_VAR 0 5
20485: PPUSH
20486: CALL_OW 428
20490: PUSH
20491: LD_INT 0
20493: EQUAL
20494: IFFALSE 20518
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
20496: CALL_OW 44
20500: PPUSH
20501: LD_VAR 0 4
20505: PPUSH
20506: LD_VAR 0 5
20510: PPUSH
20511: LD_INT 1
20513: PPUSH
20514: CALL_OW 48
// end ;
20518: LD_VAR 0 6
20522: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
20523: LD_INT 0
20525: PPUSH
20526: PPUSH
// uc_side := your_side ;
20527: LD_ADDR_OWVAR 20
20531: PUSH
20532: LD_OWVAR 2
20536: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
20537: LD_VAR 0 1
20541: PUSH
20542: LD_INT 1
20544: PUSH
20545: LD_INT 2
20547: PUSH
20548: LD_INT 3
20550: PUSH
20551: LD_INT 4
20553: PUSH
20554: LD_INT 5
20556: PUSH
20557: EMPTY
20558: LIST
20559: LIST
20560: LIST
20561: LIST
20562: LIST
20563: IN
20564: IFFALSE 20576
// uc_nation := nation_american else
20566: LD_ADDR_OWVAR 21
20570: PUSH
20571: LD_INT 1
20573: ST_TO_ADDR
20574: GO 20619
// if chassis in [ 11 , 12 , 13 , 14 ] then
20576: LD_VAR 0 1
20580: PUSH
20581: LD_INT 11
20583: PUSH
20584: LD_INT 12
20586: PUSH
20587: LD_INT 13
20589: PUSH
20590: LD_INT 14
20592: PUSH
20593: EMPTY
20594: LIST
20595: LIST
20596: LIST
20597: LIST
20598: IN
20599: IFFALSE 20611
// uc_nation := nation_arabian else
20601: LD_ADDR_OWVAR 21
20605: PUSH
20606: LD_INT 2
20608: ST_TO_ADDR
20609: GO 20619
// uc_nation := nation_russian ;
20611: LD_ADDR_OWVAR 21
20615: PUSH
20616: LD_INT 3
20618: ST_TO_ADDR
// vc_chassis := chassis ;
20619: LD_ADDR_OWVAR 37
20623: PUSH
20624: LD_VAR 0 1
20628: ST_TO_ADDR
// vc_engine := engine ;
20629: LD_ADDR_OWVAR 39
20633: PUSH
20634: LD_VAR 0 2
20638: ST_TO_ADDR
// vc_control := control ;
20639: LD_ADDR_OWVAR 38
20643: PUSH
20644: LD_VAR 0 3
20648: ST_TO_ADDR
// vc_weapon := weapon ;
20649: LD_ADDR_OWVAR 40
20653: PUSH
20654: LD_VAR 0 4
20658: ST_TO_ADDR
// un := CreateVehicle ;
20659: LD_ADDR_VAR 0 8
20663: PUSH
20664: CALL_OW 45
20668: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
20669: LD_VAR 0 8
20673: PPUSH
20674: LD_INT 0
20676: PPUSH
20677: LD_INT 5
20679: PPUSH
20680: CALL_OW 12
20684: PPUSH
20685: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
20689: LD_VAR 0 8
20693: PPUSH
20694: LD_VAR 0 5
20698: PPUSH
20699: LD_VAR 0 6
20703: PPUSH
20704: LD_INT 1
20706: PPUSH
20707: CALL_OW 48
// end ;
20711: LD_VAR 0 7
20715: RET
// export hInvincible ; every 1 do
20716: GO 20718
20718: DISABLE
// hInvincible := [ ] ;
20719: LD_ADDR_EXP 101
20723: PUSH
20724: EMPTY
20725: ST_TO_ADDR
20726: END
// every 10 do var i ;
20727: GO 20729
20729: DISABLE
20730: LD_INT 0
20732: PPUSH
// begin enable ;
20733: ENABLE
// if not hInvincible then
20734: LD_EXP 101
20738: NOT
20739: IFFALSE 20743
// exit ;
20741: GO 20787
// for i in hInvincible do
20743: LD_ADDR_VAR 0 1
20747: PUSH
20748: LD_EXP 101
20752: PUSH
20753: FOR_IN
20754: IFFALSE 20785
// if GetLives ( i ) < 1000 then
20756: LD_VAR 0 1
20760: PPUSH
20761: CALL_OW 256
20765: PUSH
20766: LD_INT 1000
20768: LESS
20769: IFFALSE 20783
// SetLives ( i , 1000 ) ;
20771: LD_VAR 0 1
20775: PPUSH
20776: LD_INT 1000
20778: PPUSH
20779: CALL_OW 234
20783: GO 20753
20785: POP
20786: POP
// end ;
20787: PPOPN 1
20789: END
// export function hHackInvincible ; var i ; begin
20790: LD_INT 0
20792: PPUSH
20793: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
20794: LD_ADDR_VAR 0 2
20798: PUSH
20799: LD_INT 2
20801: PUSH
20802: LD_INT 21
20804: PUSH
20805: LD_INT 1
20807: PUSH
20808: EMPTY
20809: LIST
20810: LIST
20811: PUSH
20812: LD_INT 21
20814: PUSH
20815: LD_INT 2
20817: PUSH
20818: EMPTY
20819: LIST
20820: LIST
20821: PUSH
20822: EMPTY
20823: LIST
20824: LIST
20825: LIST
20826: PPUSH
20827: CALL_OW 69
20831: PUSH
20832: FOR_IN
20833: IFFALSE 20894
// if IsSelected ( i ) then
20835: LD_VAR 0 2
20839: PPUSH
20840: CALL_OW 306
20844: IFFALSE 20892
// begin if i in hInvincible then
20846: LD_VAR 0 2
20850: PUSH
20851: LD_EXP 101
20855: IN
20856: IFFALSE 20876
// hInvincible := hInvincible diff i else
20858: LD_ADDR_EXP 101
20862: PUSH
20863: LD_EXP 101
20867: PUSH
20868: LD_VAR 0 2
20872: DIFF
20873: ST_TO_ADDR
20874: GO 20892
// hInvincible := hInvincible union i ;
20876: LD_ADDR_EXP 101
20880: PUSH
20881: LD_EXP 101
20885: PUSH
20886: LD_VAR 0 2
20890: UNION
20891: ST_TO_ADDR
// end ;
20892: GO 20832
20894: POP
20895: POP
// end ;
20896: LD_VAR 0 1
20900: RET
// export function hHackInvisible ; var i , j ; begin
20901: LD_INT 0
20903: PPUSH
20904: PPUSH
20905: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
20906: LD_ADDR_VAR 0 2
20910: PUSH
20911: LD_INT 21
20913: PUSH
20914: LD_INT 1
20916: PUSH
20917: EMPTY
20918: LIST
20919: LIST
20920: PPUSH
20921: CALL_OW 69
20925: PUSH
20926: FOR_IN
20927: IFFALSE 20951
// if IsSelected ( i ) then
20929: LD_VAR 0 2
20933: PPUSH
20934: CALL_OW 306
20938: IFFALSE 20949
// ComForceInvisible ( i ) ;
20940: LD_VAR 0 2
20944: PPUSH
20945: CALL_OW 496
20949: GO 20926
20951: POP
20952: POP
// end ;
20953: LD_VAR 0 1
20957: RET
// export function hHackChangeYourSide ; begin
20958: LD_INT 0
20960: PPUSH
// if your_side = 8 then
20961: LD_OWVAR 2
20965: PUSH
20966: LD_INT 8
20968: EQUAL
20969: IFFALSE 20981
// your_side := 0 else
20971: LD_ADDR_OWVAR 2
20975: PUSH
20976: LD_INT 0
20978: ST_TO_ADDR
20979: GO 20995
// your_side := your_side + 1 ;
20981: LD_ADDR_OWVAR 2
20985: PUSH
20986: LD_OWVAR 2
20990: PUSH
20991: LD_INT 1
20993: PLUS
20994: ST_TO_ADDR
// end ;
20995: LD_VAR 0 1
20999: RET
// export function hHackChangeUnitSide ; var i , j ; begin
21000: LD_INT 0
21002: PPUSH
21003: PPUSH
21004: PPUSH
// for i in all_units do
21005: LD_ADDR_VAR 0 2
21009: PUSH
21010: LD_OWVAR 3
21014: PUSH
21015: FOR_IN
21016: IFFALSE 21094
// if IsSelected ( i ) then
21018: LD_VAR 0 2
21022: PPUSH
21023: CALL_OW 306
21027: IFFALSE 21092
// begin j := GetSide ( i ) ;
21029: LD_ADDR_VAR 0 3
21033: PUSH
21034: LD_VAR 0 2
21038: PPUSH
21039: CALL_OW 255
21043: ST_TO_ADDR
// if j = 8 then
21044: LD_VAR 0 3
21048: PUSH
21049: LD_INT 8
21051: EQUAL
21052: IFFALSE 21064
// j := 0 else
21054: LD_ADDR_VAR 0 3
21058: PUSH
21059: LD_INT 0
21061: ST_TO_ADDR
21062: GO 21078
// j := j + 1 ;
21064: LD_ADDR_VAR 0 3
21068: PUSH
21069: LD_VAR 0 3
21073: PUSH
21074: LD_INT 1
21076: PLUS
21077: ST_TO_ADDR
// SetSide ( i , j ) ;
21078: LD_VAR 0 2
21082: PPUSH
21083: LD_VAR 0 3
21087: PPUSH
21088: CALL_OW 235
// end ;
21092: GO 21015
21094: POP
21095: POP
// end ;
21096: LD_VAR 0 1
21100: RET
// export function hHackFog ; begin
21101: LD_INT 0
21103: PPUSH
// FogOff ( true ) ;
21104: LD_INT 1
21106: PPUSH
21107: CALL_OW 344
// end ;
21111: LD_VAR 0 1
21115: RET
// export function hHackTeleport ( unit , x , y ) ; begin
21116: LD_INT 0
21118: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
21119: LD_VAR 0 1
21123: PPUSH
21124: LD_VAR 0 2
21128: PPUSH
21129: LD_VAR 0 3
21133: PPUSH
21134: LD_INT 1
21136: PPUSH
21137: LD_INT 1
21139: PPUSH
21140: CALL_OW 483
// CenterOnXY ( x , y ) ;
21144: LD_VAR 0 2
21148: PPUSH
21149: LD_VAR 0 3
21153: PPUSH
21154: CALL_OW 84
// end ; end_of_file
21158: LD_VAR 0 4
21162: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
21163: LD_INT 0
21165: PPUSH
21166: PPUSH
21167: PPUSH
21168: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
21169: LD_VAR 0 1
21173: PPUSH
21174: CALL_OW 264
21178: PUSH
21179: LD_EXP 33
21183: EQUAL
21184: IFFALSE 21256
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
21186: LD_INT 68
21188: PPUSH
21189: LD_VAR 0 1
21193: PPUSH
21194: CALL_OW 255
21198: PPUSH
21199: CALL_OW 321
21203: PUSH
21204: LD_INT 2
21206: EQUAL
21207: IFFALSE 21219
// eff := 70 else
21209: LD_ADDR_VAR 0 4
21213: PUSH
21214: LD_INT 70
21216: ST_TO_ADDR
21217: GO 21227
// eff := 30 ;
21219: LD_ADDR_VAR 0 4
21223: PUSH
21224: LD_INT 30
21226: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
21227: LD_VAR 0 1
21231: PPUSH
21232: CALL_OW 250
21236: PPUSH
21237: LD_VAR 0 1
21241: PPUSH
21242: CALL_OW 251
21246: PPUSH
21247: LD_VAR 0 4
21251: PPUSH
21252: CALL_OW 495
// end ; end ;
21256: LD_VAR 0 2
21260: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
21261: LD_INT 0
21263: PPUSH
// end ;
21264: LD_VAR 0 4
21268: RET
// export function SOS_Command ( cmd ) ; begin
21269: LD_INT 0
21271: PPUSH
// end ;
21272: LD_VAR 0 2
21276: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
21277: LD_INT 0
21279: PPUSH
// if cmd = 121 then
21280: LD_VAR 0 1
21284: PUSH
21285: LD_INT 121
21287: EQUAL
21288: IFFALSE 21290
// end ;
21290: LD_VAR 0 6
21294: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
21295: LD_INT 0
21297: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
21298: LD_VAR 0 1
21302: PUSH
21303: LD_INT 250
21305: EQUAL
21306: PUSH
21307: LD_VAR 0 2
21311: PPUSH
21312: CALL_OW 264
21316: PUSH
21317: LD_EXP 36
21321: EQUAL
21322: AND
21323: IFFALSE 21344
// MinerPlaceMine ( unit , x , y ) ;
21325: LD_VAR 0 2
21329: PPUSH
21330: LD_VAR 0 4
21334: PPUSH
21335: LD_VAR 0 5
21339: PPUSH
21340: CALL 23693 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
21344: LD_VAR 0 1
21348: PUSH
21349: LD_INT 251
21351: EQUAL
21352: PUSH
21353: LD_VAR 0 2
21357: PPUSH
21358: CALL_OW 264
21362: PUSH
21363: LD_EXP 36
21367: EQUAL
21368: AND
21369: IFFALSE 21390
// MinerDetonateMine ( unit , x , y ) ;
21371: LD_VAR 0 2
21375: PPUSH
21376: LD_VAR 0 4
21380: PPUSH
21381: LD_VAR 0 5
21385: PPUSH
21386: CALL 23970 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
21390: LD_VAR 0 1
21394: PUSH
21395: LD_INT 252
21397: EQUAL
21398: PUSH
21399: LD_VAR 0 2
21403: PPUSH
21404: CALL_OW 264
21408: PUSH
21409: LD_EXP 36
21413: EQUAL
21414: AND
21415: IFFALSE 21436
// MinerCreateMinefield ( unit , x , y ) ;
21417: LD_VAR 0 2
21421: PPUSH
21422: LD_VAR 0 4
21426: PPUSH
21427: LD_VAR 0 5
21431: PPUSH
21432: CALL 24387 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
21436: LD_VAR 0 1
21440: PUSH
21441: LD_INT 253
21443: EQUAL
21444: PUSH
21445: LD_VAR 0 2
21449: PPUSH
21450: CALL_OW 257
21454: PUSH
21455: LD_INT 5
21457: EQUAL
21458: AND
21459: IFFALSE 21480
// ComBinocular ( unit , x , y ) ;
21461: LD_VAR 0 2
21465: PPUSH
21466: LD_VAR 0 4
21470: PPUSH
21471: LD_VAR 0 5
21475: PPUSH
21476: CALL 24758 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
21480: LD_VAR 0 1
21484: PUSH
21485: LD_INT 254
21487: EQUAL
21488: PUSH
21489: LD_VAR 0 2
21493: PPUSH
21494: CALL_OW 264
21498: PUSH
21499: LD_EXP 31
21503: EQUAL
21504: AND
21505: PUSH
21506: LD_VAR 0 3
21510: PPUSH
21511: CALL_OW 263
21515: PUSH
21516: LD_INT 3
21518: EQUAL
21519: AND
21520: IFFALSE 21536
// HackDestroyVehicle ( unit , selectedUnit ) ;
21522: LD_VAR 0 2
21526: PPUSH
21527: LD_VAR 0 3
21531: PPUSH
21532: CALL 23053 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
21536: LD_VAR 0 1
21540: PUSH
21541: LD_INT 255
21543: EQUAL
21544: PUSH
21545: LD_VAR 0 2
21549: PPUSH
21550: CALL_OW 264
21554: PUSH
21555: LD_INT 14
21557: PUSH
21558: LD_INT 53
21560: PUSH
21561: EMPTY
21562: LIST
21563: LIST
21564: IN
21565: AND
21566: PUSH
21567: LD_VAR 0 4
21571: PPUSH
21572: LD_VAR 0 5
21576: PPUSH
21577: CALL_OW 488
21581: AND
21582: IFFALSE 21606
// CutTreeXYR ( unit , x , y , 12 ) ;
21584: LD_VAR 0 2
21588: PPUSH
21589: LD_VAR 0 4
21593: PPUSH
21594: LD_VAR 0 5
21598: PPUSH
21599: LD_INT 12
21601: PPUSH
21602: CALL 21619 0 4
// end ;
21606: LD_VAR 0 6
21610: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
21611: LD_INT 0
21613: PPUSH
// end ;
21614: LD_VAR 0 4
21618: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
21619: LD_INT 0
21621: PPUSH
21622: PPUSH
21623: PPUSH
21624: PPUSH
21625: PPUSH
21626: PPUSH
21627: PPUSH
21628: PPUSH
21629: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
21630: LD_VAR 0 1
21634: NOT
21635: PUSH
21636: LD_VAR 0 2
21640: PPUSH
21641: LD_VAR 0 3
21645: PPUSH
21646: CALL_OW 488
21650: NOT
21651: OR
21652: PUSH
21653: LD_VAR 0 4
21657: NOT
21658: OR
21659: IFFALSE 21663
// exit ;
21661: GO 22003
// list := [ ] ;
21663: LD_ADDR_VAR 0 13
21667: PUSH
21668: EMPTY
21669: ST_TO_ADDR
// if x - r < 0 then
21670: LD_VAR 0 2
21674: PUSH
21675: LD_VAR 0 4
21679: MINUS
21680: PUSH
21681: LD_INT 0
21683: LESS
21684: IFFALSE 21696
// min_x := 0 else
21686: LD_ADDR_VAR 0 7
21690: PUSH
21691: LD_INT 0
21693: ST_TO_ADDR
21694: GO 21712
// min_x := x - r ;
21696: LD_ADDR_VAR 0 7
21700: PUSH
21701: LD_VAR 0 2
21705: PUSH
21706: LD_VAR 0 4
21710: MINUS
21711: ST_TO_ADDR
// if y - r < 0 then
21712: LD_VAR 0 3
21716: PUSH
21717: LD_VAR 0 4
21721: MINUS
21722: PUSH
21723: LD_INT 0
21725: LESS
21726: IFFALSE 21738
// min_y := 0 else
21728: LD_ADDR_VAR 0 8
21732: PUSH
21733: LD_INT 0
21735: ST_TO_ADDR
21736: GO 21754
// min_y := y - r ;
21738: LD_ADDR_VAR 0 8
21742: PUSH
21743: LD_VAR 0 3
21747: PUSH
21748: LD_VAR 0 4
21752: MINUS
21753: ST_TO_ADDR
// max_x := x + r ;
21754: LD_ADDR_VAR 0 9
21758: PUSH
21759: LD_VAR 0 2
21763: PUSH
21764: LD_VAR 0 4
21768: PLUS
21769: ST_TO_ADDR
// max_y := y + r ;
21770: LD_ADDR_VAR 0 10
21774: PUSH
21775: LD_VAR 0 3
21779: PUSH
21780: LD_VAR 0 4
21784: PLUS
21785: ST_TO_ADDR
// for _x = min_x to max_x do
21786: LD_ADDR_VAR 0 11
21790: PUSH
21791: DOUBLE
21792: LD_VAR 0 7
21796: DEC
21797: ST_TO_ADDR
21798: LD_VAR 0 9
21802: PUSH
21803: FOR_TO
21804: IFFALSE 21921
// for _y = min_y to max_y do
21806: LD_ADDR_VAR 0 12
21810: PUSH
21811: DOUBLE
21812: LD_VAR 0 8
21816: DEC
21817: ST_TO_ADDR
21818: LD_VAR 0 10
21822: PUSH
21823: FOR_TO
21824: IFFALSE 21917
// begin if not ValidHex ( _x , _y ) then
21826: LD_VAR 0 11
21830: PPUSH
21831: LD_VAR 0 12
21835: PPUSH
21836: CALL_OW 488
21840: NOT
21841: IFFALSE 21845
// continue ;
21843: GO 21823
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
21845: LD_VAR 0 11
21849: PPUSH
21850: LD_VAR 0 12
21854: PPUSH
21855: CALL_OW 351
21859: PUSH
21860: LD_VAR 0 11
21864: PPUSH
21865: LD_VAR 0 12
21869: PPUSH
21870: CALL_OW 554
21874: AND
21875: IFFALSE 21915
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
21877: LD_ADDR_VAR 0 13
21881: PUSH
21882: LD_VAR 0 13
21886: PPUSH
21887: LD_VAR 0 13
21891: PUSH
21892: LD_INT 1
21894: PLUS
21895: PPUSH
21896: LD_VAR 0 11
21900: PUSH
21901: LD_VAR 0 12
21905: PUSH
21906: EMPTY
21907: LIST
21908: LIST
21909: PPUSH
21910: CALL_OW 2
21914: ST_TO_ADDR
// end ;
21915: GO 21823
21917: POP
21918: POP
21919: GO 21803
21921: POP
21922: POP
// if not list then
21923: LD_VAR 0 13
21927: NOT
21928: IFFALSE 21932
// exit ;
21930: GO 22003
// for i in list do
21932: LD_ADDR_VAR 0 6
21936: PUSH
21937: LD_VAR 0 13
21941: PUSH
21942: FOR_IN
21943: IFFALSE 22001
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
21945: LD_VAR 0 1
21949: PPUSH
21950: LD_STRING M
21952: PUSH
21953: LD_VAR 0 6
21957: PUSH
21958: LD_INT 1
21960: ARRAY
21961: PUSH
21962: LD_VAR 0 6
21966: PUSH
21967: LD_INT 2
21969: ARRAY
21970: PUSH
21971: LD_INT 0
21973: PUSH
21974: LD_INT 0
21976: PUSH
21977: LD_INT 0
21979: PUSH
21980: LD_INT 0
21982: PUSH
21983: EMPTY
21984: LIST
21985: LIST
21986: LIST
21987: LIST
21988: LIST
21989: LIST
21990: LIST
21991: PUSH
21992: EMPTY
21993: LIST
21994: PPUSH
21995: CALL_OW 447
21999: GO 21942
22001: POP
22002: POP
// end ;
22003: LD_VAR 0 5
22007: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
22008: LD_EXP 104
22012: NOT
22013: IFFALSE 22063
22015: GO 22017
22017: DISABLE
// begin initHack := true ;
22018: LD_ADDR_EXP 104
22022: PUSH
22023: LD_INT 1
22025: ST_TO_ADDR
// hackTanks := [ ] ;
22026: LD_ADDR_EXP 105
22030: PUSH
22031: EMPTY
22032: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
22033: LD_ADDR_EXP 106
22037: PUSH
22038: EMPTY
22039: ST_TO_ADDR
// hackLimit := 3 ;
22040: LD_ADDR_EXP 107
22044: PUSH
22045: LD_INT 3
22047: ST_TO_ADDR
// hackDist := 12 ;
22048: LD_ADDR_EXP 108
22052: PUSH
22053: LD_INT 12
22055: ST_TO_ADDR
// hackCounter := [ ] ;
22056: LD_ADDR_EXP 109
22060: PUSH
22061: EMPTY
22062: ST_TO_ADDR
// end ;
22063: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
22064: LD_EXP 104
22068: PUSH
22069: LD_INT 34
22071: PUSH
22072: LD_EXP 31
22076: PUSH
22077: EMPTY
22078: LIST
22079: LIST
22080: PPUSH
22081: CALL_OW 69
22085: AND
22086: IFFALSE 22341
22088: GO 22090
22090: DISABLE
22091: LD_INT 0
22093: PPUSH
22094: PPUSH
// begin enable ;
22095: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
22096: LD_ADDR_VAR 0 1
22100: PUSH
22101: LD_INT 34
22103: PUSH
22104: LD_EXP 31
22108: PUSH
22109: EMPTY
22110: LIST
22111: LIST
22112: PPUSH
22113: CALL_OW 69
22117: PUSH
22118: FOR_IN
22119: IFFALSE 22339
// begin if not i in hackTanks then
22121: LD_VAR 0 1
22125: PUSH
22126: LD_EXP 105
22130: IN
22131: NOT
22132: IFFALSE 22215
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
22134: LD_ADDR_EXP 105
22138: PUSH
22139: LD_EXP 105
22143: PPUSH
22144: LD_EXP 105
22148: PUSH
22149: LD_INT 1
22151: PLUS
22152: PPUSH
22153: LD_VAR 0 1
22157: PPUSH
22158: CALL_OW 1
22162: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
22163: LD_ADDR_EXP 106
22167: PUSH
22168: LD_EXP 106
22172: PPUSH
22173: LD_EXP 106
22177: PUSH
22178: LD_INT 1
22180: PLUS
22181: PPUSH
22182: EMPTY
22183: PPUSH
22184: CALL_OW 1
22188: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
22189: LD_ADDR_EXP 109
22193: PUSH
22194: LD_EXP 109
22198: PPUSH
22199: LD_EXP 109
22203: PUSH
22204: LD_INT 1
22206: PLUS
22207: PPUSH
22208: EMPTY
22209: PPUSH
22210: CALL_OW 1
22214: ST_TO_ADDR
// end ; if not IsOk ( i ) then
22215: LD_VAR 0 1
22219: PPUSH
22220: CALL_OW 302
22224: NOT
22225: IFFALSE 22238
// begin HackUnlinkAll ( i ) ;
22227: LD_VAR 0 1
22231: PPUSH
22232: CALL 22344 0 1
// continue ;
22236: GO 22118
// end ; HackCheckCapturedStatus ( i ) ;
22238: LD_VAR 0 1
22242: PPUSH
22243: CALL 22787 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
22247: LD_ADDR_VAR 0 2
22251: PUSH
22252: LD_INT 81
22254: PUSH
22255: LD_VAR 0 1
22259: PPUSH
22260: CALL_OW 255
22264: PUSH
22265: EMPTY
22266: LIST
22267: LIST
22268: PUSH
22269: LD_INT 33
22271: PUSH
22272: LD_INT 3
22274: PUSH
22275: EMPTY
22276: LIST
22277: LIST
22278: PUSH
22279: LD_INT 91
22281: PUSH
22282: LD_VAR 0 1
22286: PUSH
22287: LD_EXP 108
22291: PUSH
22292: EMPTY
22293: LIST
22294: LIST
22295: LIST
22296: PUSH
22297: LD_INT 50
22299: PUSH
22300: EMPTY
22301: LIST
22302: PUSH
22303: EMPTY
22304: LIST
22305: LIST
22306: LIST
22307: LIST
22308: PPUSH
22309: CALL_OW 69
22313: ST_TO_ADDR
// if not tmp then
22314: LD_VAR 0 2
22318: NOT
22319: IFFALSE 22323
// continue ;
22321: GO 22118
// HackLink ( i , tmp ) ;
22323: LD_VAR 0 1
22327: PPUSH
22328: LD_VAR 0 2
22332: PPUSH
22333: CALL 22480 0 2
// end ;
22337: GO 22118
22339: POP
22340: POP
// end ;
22341: PPOPN 2
22343: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
22344: LD_INT 0
22346: PPUSH
22347: PPUSH
22348: PPUSH
// if not hack in hackTanks then
22349: LD_VAR 0 1
22353: PUSH
22354: LD_EXP 105
22358: IN
22359: NOT
22360: IFFALSE 22364
// exit ;
22362: GO 22475
// index := GetElementIndex ( hackTanks , hack ) ;
22364: LD_ADDR_VAR 0 4
22368: PUSH
22369: LD_EXP 105
22373: PPUSH
22374: LD_VAR 0 1
22378: PPUSH
22379: CALL 29909 0 2
22383: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
22384: LD_EXP 106
22388: PUSH
22389: LD_VAR 0 4
22393: ARRAY
22394: IFFALSE 22475
// begin for i in hackTanksCaptured [ index ] do
22396: LD_ADDR_VAR 0 3
22400: PUSH
22401: LD_EXP 106
22405: PUSH
22406: LD_VAR 0 4
22410: ARRAY
22411: PUSH
22412: FOR_IN
22413: IFFALSE 22439
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
22415: LD_VAR 0 3
22419: PUSH
22420: LD_INT 1
22422: ARRAY
22423: PPUSH
22424: LD_VAR 0 3
22428: PUSH
22429: LD_INT 2
22431: ARRAY
22432: PPUSH
22433: CALL_OW 235
22437: GO 22412
22439: POP
22440: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
22441: LD_ADDR_EXP 106
22445: PUSH
22446: LD_EXP 106
22450: PPUSH
22451: LD_VAR 0 4
22455: PPUSH
22456: EMPTY
22457: PPUSH
22458: CALL_OW 1
22462: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
22463: LD_VAR 0 1
22467: PPUSH
22468: LD_INT 0
22470: PPUSH
22471: CALL_OW 505
// end ; end ;
22475: LD_VAR 0 2
22479: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
22480: LD_INT 0
22482: PPUSH
22483: PPUSH
22484: PPUSH
// if not hack in hackTanks or not vehicles then
22485: LD_VAR 0 1
22489: PUSH
22490: LD_EXP 105
22494: IN
22495: NOT
22496: PUSH
22497: LD_VAR 0 2
22501: NOT
22502: OR
22503: IFFALSE 22507
// exit ;
22505: GO 22782
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
22507: LD_ADDR_VAR 0 2
22511: PUSH
22512: LD_VAR 0 1
22516: PPUSH
22517: LD_VAR 0 2
22521: PPUSH
22522: LD_INT 1
22524: PPUSH
22525: LD_INT 1
22527: PPUSH
22528: CALL 30559 0 4
22532: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
22533: LD_ADDR_VAR 0 5
22537: PUSH
22538: LD_EXP 105
22542: PPUSH
22543: LD_VAR 0 1
22547: PPUSH
22548: CALL 29909 0 2
22552: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
22553: LD_EXP 106
22557: PUSH
22558: LD_VAR 0 5
22562: ARRAY
22563: PUSH
22564: LD_EXP 107
22568: LESS
22569: IFFALSE 22758
// begin for i := 1 to vehicles do
22571: LD_ADDR_VAR 0 4
22575: PUSH
22576: DOUBLE
22577: LD_INT 1
22579: DEC
22580: ST_TO_ADDR
22581: LD_VAR 0 2
22585: PUSH
22586: FOR_TO
22587: IFFALSE 22756
// begin if hackTanksCaptured [ index ] = hackLimit then
22589: LD_EXP 106
22593: PUSH
22594: LD_VAR 0 5
22598: ARRAY
22599: PUSH
22600: LD_EXP 107
22604: EQUAL
22605: IFFALSE 22609
// break ;
22607: GO 22756
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
22609: LD_ADDR_EXP 109
22613: PUSH
22614: LD_EXP 109
22618: PPUSH
22619: LD_VAR 0 5
22623: PPUSH
22624: LD_EXP 109
22628: PUSH
22629: LD_VAR 0 5
22633: ARRAY
22634: PUSH
22635: LD_INT 1
22637: PLUS
22638: PPUSH
22639: CALL_OW 1
22643: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
22644: LD_ADDR_EXP 106
22648: PUSH
22649: LD_EXP 106
22653: PPUSH
22654: LD_VAR 0 5
22658: PUSH
22659: LD_EXP 106
22663: PUSH
22664: LD_VAR 0 5
22668: ARRAY
22669: PUSH
22670: LD_INT 1
22672: PLUS
22673: PUSH
22674: EMPTY
22675: LIST
22676: LIST
22677: PPUSH
22678: LD_VAR 0 2
22682: PUSH
22683: LD_VAR 0 4
22687: ARRAY
22688: PUSH
22689: LD_VAR 0 2
22693: PUSH
22694: LD_VAR 0 4
22698: ARRAY
22699: PPUSH
22700: CALL_OW 255
22704: PUSH
22705: EMPTY
22706: LIST
22707: LIST
22708: PPUSH
22709: CALL 30124 0 3
22713: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
22714: LD_VAR 0 2
22718: PUSH
22719: LD_VAR 0 4
22723: ARRAY
22724: PPUSH
22725: LD_VAR 0 1
22729: PPUSH
22730: CALL_OW 255
22734: PPUSH
22735: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
22739: LD_VAR 0 2
22743: PUSH
22744: LD_VAR 0 4
22748: ARRAY
22749: PPUSH
22750: CALL_OW 141
// end ;
22754: GO 22586
22756: POP
22757: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
22758: LD_VAR 0 1
22762: PPUSH
22763: LD_EXP 106
22767: PUSH
22768: LD_VAR 0 5
22772: ARRAY
22773: PUSH
22774: LD_INT 0
22776: PLUS
22777: PPUSH
22778: CALL_OW 505
// end ;
22782: LD_VAR 0 3
22786: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
22787: LD_INT 0
22789: PPUSH
22790: PPUSH
22791: PPUSH
22792: PPUSH
// if not hack in hackTanks then
22793: LD_VAR 0 1
22797: PUSH
22798: LD_EXP 105
22802: IN
22803: NOT
22804: IFFALSE 22808
// exit ;
22806: GO 23048
// index := GetElementIndex ( hackTanks , hack ) ;
22808: LD_ADDR_VAR 0 4
22812: PUSH
22813: LD_EXP 105
22817: PPUSH
22818: LD_VAR 0 1
22822: PPUSH
22823: CALL 29909 0 2
22827: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
22828: LD_ADDR_VAR 0 3
22832: PUSH
22833: DOUBLE
22834: LD_EXP 106
22838: PUSH
22839: LD_VAR 0 4
22843: ARRAY
22844: INC
22845: ST_TO_ADDR
22846: LD_INT 1
22848: PUSH
22849: FOR_DOWNTO
22850: IFFALSE 23022
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
22852: LD_ADDR_VAR 0 5
22856: PUSH
22857: LD_EXP 106
22861: PUSH
22862: LD_VAR 0 4
22866: ARRAY
22867: PUSH
22868: LD_VAR 0 3
22872: ARRAY
22873: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
22874: LD_VAR 0 5
22878: PUSH
22879: LD_INT 1
22881: ARRAY
22882: PPUSH
22883: CALL_OW 302
22887: NOT
22888: PUSH
22889: LD_VAR 0 5
22893: PUSH
22894: LD_INT 1
22896: ARRAY
22897: PPUSH
22898: CALL_OW 255
22902: PUSH
22903: LD_VAR 0 1
22907: PPUSH
22908: CALL_OW 255
22912: NONEQUAL
22913: OR
22914: IFFALSE 23020
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
22916: LD_VAR 0 5
22920: PUSH
22921: LD_INT 1
22923: ARRAY
22924: PPUSH
22925: CALL_OW 305
22929: PUSH
22930: LD_VAR 0 5
22934: PUSH
22935: LD_INT 1
22937: ARRAY
22938: PPUSH
22939: CALL_OW 255
22943: PUSH
22944: LD_VAR 0 1
22948: PPUSH
22949: CALL_OW 255
22953: EQUAL
22954: AND
22955: IFFALSE 22979
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
22957: LD_VAR 0 5
22961: PUSH
22962: LD_INT 1
22964: ARRAY
22965: PPUSH
22966: LD_VAR 0 5
22970: PUSH
22971: LD_INT 2
22973: ARRAY
22974: PPUSH
22975: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
22979: LD_ADDR_EXP 106
22983: PUSH
22984: LD_EXP 106
22988: PPUSH
22989: LD_VAR 0 4
22993: PPUSH
22994: LD_EXP 106
22998: PUSH
22999: LD_VAR 0 4
23003: ARRAY
23004: PPUSH
23005: LD_VAR 0 3
23009: PPUSH
23010: CALL_OW 3
23014: PPUSH
23015: CALL_OW 1
23019: ST_TO_ADDR
// end ; end ;
23020: GO 22849
23022: POP
23023: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
23024: LD_VAR 0 1
23028: PPUSH
23029: LD_EXP 106
23033: PUSH
23034: LD_VAR 0 4
23038: ARRAY
23039: PUSH
23040: LD_INT 0
23042: PLUS
23043: PPUSH
23044: CALL_OW 505
// end ;
23048: LD_VAR 0 2
23052: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
23053: LD_INT 0
23055: PPUSH
23056: PPUSH
23057: PPUSH
23058: PPUSH
// if not hack in hackTanks then
23059: LD_VAR 0 1
23063: PUSH
23064: LD_EXP 105
23068: IN
23069: NOT
23070: IFFALSE 23074
// exit ;
23072: GO 23159
// index := GetElementIndex ( hackTanks , hack ) ;
23074: LD_ADDR_VAR 0 5
23078: PUSH
23079: LD_EXP 105
23083: PPUSH
23084: LD_VAR 0 1
23088: PPUSH
23089: CALL 29909 0 2
23093: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
23094: LD_ADDR_VAR 0 4
23098: PUSH
23099: DOUBLE
23100: LD_INT 1
23102: DEC
23103: ST_TO_ADDR
23104: LD_EXP 106
23108: PUSH
23109: LD_VAR 0 5
23113: ARRAY
23114: PUSH
23115: FOR_TO
23116: IFFALSE 23157
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
23118: LD_EXP 106
23122: PUSH
23123: LD_VAR 0 5
23127: ARRAY
23128: PUSH
23129: LD_VAR 0 4
23133: ARRAY
23134: PUSH
23135: LD_INT 1
23137: ARRAY
23138: PUSH
23139: LD_VAR 0 2
23143: EQUAL
23144: IFFALSE 23155
// KillUnit ( vehicle ) ;
23146: LD_VAR 0 2
23150: PPUSH
23151: CALL_OW 66
23155: GO 23115
23157: POP
23158: POP
// end ;
23159: LD_VAR 0 3
23163: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
23164: LD_EXP 110
23168: NOT
23169: IFFALSE 23204
23171: GO 23173
23173: DISABLE
// begin initMiner := true ;
23174: LD_ADDR_EXP 110
23178: PUSH
23179: LD_INT 1
23181: ST_TO_ADDR
// minersList := [ ] ;
23182: LD_ADDR_EXP 111
23186: PUSH
23187: EMPTY
23188: ST_TO_ADDR
// minerMinesList := [ ] ;
23189: LD_ADDR_EXP 112
23193: PUSH
23194: EMPTY
23195: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
23196: LD_ADDR_EXP 113
23200: PUSH
23201: LD_INT 5
23203: ST_TO_ADDR
// end ;
23204: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
23205: LD_EXP 110
23209: PUSH
23210: LD_INT 34
23212: PUSH
23213: LD_EXP 36
23217: PUSH
23218: EMPTY
23219: LIST
23220: LIST
23221: PPUSH
23222: CALL_OW 69
23226: AND
23227: IFFALSE 23690
23229: GO 23231
23231: DISABLE
23232: LD_INT 0
23234: PPUSH
23235: PPUSH
23236: PPUSH
23237: PPUSH
// begin enable ;
23238: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
23239: LD_ADDR_VAR 0 1
23243: PUSH
23244: LD_INT 34
23246: PUSH
23247: LD_EXP 36
23251: PUSH
23252: EMPTY
23253: LIST
23254: LIST
23255: PPUSH
23256: CALL_OW 69
23260: PUSH
23261: FOR_IN
23262: IFFALSE 23334
// begin if not i in minersList then
23264: LD_VAR 0 1
23268: PUSH
23269: LD_EXP 111
23273: IN
23274: NOT
23275: IFFALSE 23332
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
23277: LD_ADDR_EXP 111
23281: PUSH
23282: LD_EXP 111
23286: PPUSH
23287: LD_EXP 111
23291: PUSH
23292: LD_INT 1
23294: PLUS
23295: PPUSH
23296: LD_VAR 0 1
23300: PPUSH
23301: CALL_OW 1
23305: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
23306: LD_ADDR_EXP 112
23310: PUSH
23311: LD_EXP 112
23315: PPUSH
23316: LD_EXP 112
23320: PUSH
23321: LD_INT 1
23323: PLUS
23324: PPUSH
23325: EMPTY
23326: PPUSH
23327: CALL_OW 1
23331: ST_TO_ADDR
// end end ;
23332: GO 23261
23334: POP
23335: POP
// for i := minerMinesList downto 1 do
23336: LD_ADDR_VAR 0 1
23340: PUSH
23341: DOUBLE
23342: LD_EXP 112
23346: INC
23347: ST_TO_ADDR
23348: LD_INT 1
23350: PUSH
23351: FOR_DOWNTO
23352: IFFALSE 23688
// begin if IsLive ( minersList [ i ] ) then
23354: LD_EXP 111
23358: PUSH
23359: LD_VAR 0 1
23363: ARRAY
23364: PPUSH
23365: CALL_OW 300
23369: IFFALSE 23397
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
23371: LD_EXP 111
23375: PUSH
23376: LD_VAR 0 1
23380: ARRAY
23381: PPUSH
23382: LD_EXP 112
23386: PUSH
23387: LD_VAR 0 1
23391: ARRAY
23392: PPUSH
23393: CALL_OW 505
// if not minerMinesList [ i ] then
23397: LD_EXP 112
23401: PUSH
23402: LD_VAR 0 1
23406: ARRAY
23407: NOT
23408: IFFALSE 23412
// continue ;
23410: GO 23351
// for j := minerMinesList [ i ] downto 1 do
23412: LD_ADDR_VAR 0 2
23416: PUSH
23417: DOUBLE
23418: LD_EXP 112
23422: PUSH
23423: LD_VAR 0 1
23427: ARRAY
23428: INC
23429: ST_TO_ADDR
23430: LD_INT 1
23432: PUSH
23433: FOR_DOWNTO
23434: IFFALSE 23684
// begin side := GetSide ( minersList [ i ] ) ;
23436: LD_ADDR_VAR 0 3
23440: PUSH
23441: LD_EXP 111
23445: PUSH
23446: LD_VAR 0 1
23450: ARRAY
23451: PPUSH
23452: CALL_OW 255
23456: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
23457: LD_ADDR_VAR 0 4
23461: PUSH
23462: LD_EXP 112
23466: PUSH
23467: LD_VAR 0 1
23471: ARRAY
23472: PUSH
23473: LD_VAR 0 2
23477: ARRAY
23478: PUSH
23479: LD_INT 1
23481: ARRAY
23482: PPUSH
23483: LD_EXP 112
23487: PUSH
23488: LD_VAR 0 1
23492: ARRAY
23493: PUSH
23494: LD_VAR 0 2
23498: ARRAY
23499: PUSH
23500: LD_INT 2
23502: ARRAY
23503: PPUSH
23504: CALL_OW 428
23508: ST_TO_ADDR
// if not tmp then
23509: LD_VAR 0 4
23513: NOT
23514: IFFALSE 23518
// continue ;
23516: GO 23433
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
23518: LD_VAR 0 4
23522: PUSH
23523: LD_INT 81
23525: PUSH
23526: LD_VAR 0 3
23530: PUSH
23531: EMPTY
23532: LIST
23533: LIST
23534: PPUSH
23535: CALL_OW 69
23539: IN
23540: PUSH
23541: LD_EXP 112
23545: PUSH
23546: LD_VAR 0 1
23550: ARRAY
23551: PUSH
23552: LD_VAR 0 2
23556: ARRAY
23557: PUSH
23558: LD_INT 1
23560: ARRAY
23561: PPUSH
23562: LD_EXP 112
23566: PUSH
23567: LD_VAR 0 1
23571: ARRAY
23572: PUSH
23573: LD_VAR 0 2
23577: ARRAY
23578: PUSH
23579: LD_INT 2
23581: ARRAY
23582: PPUSH
23583: CALL_OW 458
23587: AND
23588: IFFALSE 23682
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
23590: LD_EXP 112
23594: PUSH
23595: LD_VAR 0 1
23599: ARRAY
23600: PUSH
23601: LD_VAR 0 2
23605: ARRAY
23606: PUSH
23607: LD_INT 1
23609: ARRAY
23610: PPUSH
23611: LD_EXP 112
23615: PUSH
23616: LD_VAR 0 1
23620: ARRAY
23621: PUSH
23622: LD_VAR 0 2
23626: ARRAY
23627: PUSH
23628: LD_INT 2
23630: ARRAY
23631: PPUSH
23632: LD_VAR 0 3
23636: PPUSH
23637: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
23641: LD_ADDR_EXP 112
23645: PUSH
23646: LD_EXP 112
23650: PPUSH
23651: LD_VAR 0 1
23655: PPUSH
23656: LD_EXP 112
23660: PUSH
23661: LD_VAR 0 1
23665: ARRAY
23666: PPUSH
23667: LD_VAR 0 2
23671: PPUSH
23672: CALL_OW 3
23676: PPUSH
23677: CALL_OW 1
23681: ST_TO_ADDR
// end ; end ;
23682: GO 23433
23684: POP
23685: POP
// end ;
23686: GO 23351
23688: POP
23689: POP
// end ;
23690: PPOPN 4
23692: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
23693: LD_INT 0
23695: PPUSH
23696: PPUSH
// result := false ;
23697: LD_ADDR_VAR 0 4
23701: PUSH
23702: LD_INT 0
23704: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
23705: LD_VAR 0 1
23709: PPUSH
23710: CALL_OW 264
23714: PUSH
23715: LD_EXP 36
23719: EQUAL
23720: NOT
23721: IFFALSE 23725
// exit ;
23723: GO 23965
// index := GetElementIndex ( minersList , unit ) ;
23725: LD_ADDR_VAR 0 5
23729: PUSH
23730: LD_EXP 111
23734: PPUSH
23735: LD_VAR 0 1
23739: PPUSH
23740: CALL 29909 0 2
23744: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
23745: LD_EXP 112
23749: PUSH
23750: LD_VAR 0 5
23754: ARRAY
23755: PUSH
23756: LD_EXP 113
23760: GREATEREQUAL
23761: IFFALSE 23765
// exit ;
23763: GO 23965
// ComMoveXY ( unit , x , y ) ;
23765: LD_VAR 0 1
23769: PPUSH
23770: LD_VAR 0 2
23774: PPUSH
23775: LD_VAR 0 3
23779: PPUSH
23780: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
23784: LD_INT 35
23786: PPUSH
23787: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
23791: LD_VAR 0 1
23795: PPUSH
23796: LD_VAR 0 2
23800: PPUSH
23801: LD_VAR 0 3
23805: PPUSH
23806: CALL 60306 0 3
23810: NOT
23811: PUSH
23812: LD_VAR 0 1
23816: PPUSH
23817: CALL_OW 314
23821: AND
23822: IFFALSE 23826
// exit ;
23824: GO 23965
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
23826: LD_VAR 0 2
23830: PPUSH
23831: LD_VAR 0 3
23835: PPUSH
23836: CALL_OW 428
23840: PUSH
23841: LD_VAR 0 1
23845: EQUAL
23846: PUSH
23847: LD_VAR 0 1
23851: PPUSH
23852: CALL_OW 314
23856: NOT
23857: AND
23858: IFFALSE 23784
// PlaySoundXY ( x , y , PlantMine ) ;
23860: LD_VAR 0 2
23864: PPUSH
23865: LD_VAR 0 3
23869: PPUSH
23870: LD_STRING PlantMine
23872: PPUSH
23873: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
23877: LD_VAR 0 2
23881: PPUSH
23882: LD_VAR 0 3
23886: PPUSH
23887: LD_VAR 0 1
23891: PPUSH
23892: CALL_OW 255
23896: PPUSH
23897: LD_INT 0
23899: PPUSH
23900: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
23904: LD_ADDR_EXP 112
23908: PUSH
23909: LD_EXP 112
23913: PPUSH
23914: LD_VAR 0 5
23918: PUSH
23919: LD_EXP 112
23923: PUSH
23924: LD_VAR 0 5
23928: ARRAY
23929: PUSH
23930: LD_INT 1
23932: PLUS
23933: PUSH
23934: EMPTY
23935: LIST
23936: LIST
23937: PPUSH
23938: LD_VAR 0 2
23942: PUSH
23943: LD_VAR 0 3
23947: PUSH
23948: EMPTY
23949: LIST
23950: LIST
23951: PPUSH
23952: CALL 30124 0 3
23956: ST_TO_ADDR
// result := true ;
23957: LD_ADDR_VAR 0 4
23961: PUSH
23962: LD_INT 1
23964: ST_TO_ADDR
// end ;
23965: LD_VAR 0 4
23969: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
23970: LD_INT 0
23972: PPUSH
23973: PPUSH
23974: PPUSH
// if not unit in minersList then
23975: LD_VAR 0 1
23979: PUSH
23980: LD_EXP 111
23984: IN
23985: NOT
23986: IFFALSE 23990
// exit ;
23988: GO 24382
// index := GetElementIndex ( minersList , unit ) ;
23990: LD_ADDR_VAR 0 6
23994: PUSH
23995: LD_EXP 111
23999: PPUSH
24000: LD_VAR 0 1
24004: PPUSH
24005: CALL 29909 0 2
24009: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
24010: LD_ADDR_VAR 0 5
24014: PUSH
24015: DOUBLE
24016: LD_EXP 112
24020: PUSH
24021: LD_VAR 0 6
24025: ARRAY
24026: INC
24027: ST_TO_ADDR
24028: LD_INT 1
24030: PUSH
24031: FOR_DOWNTO
24032: IFFALSE 24193
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
24034: LD_EXP 112
24038: PUSH
24039: LD_VAR 0 6
24043: ARRAY
24044: PUSH
24045: LD_VAR 0 5
24049: ARRAY
24050: PUSH
24051: LD_INT 1
24053: ARRAY
24054: PUSH
24055: LD_VAR 0 2
24059: EQUAL
24060: PUSH
24061: LD_EXP 112
24065: PUSH
24066: LD_VAR 0 6
24070: ARRAY
24071: PUSH
24072: LD_VAR 0 5
24076: ARRAY
24077: PUSH
24078: LD_INT 2
24080: ARRAY
24081: PUSH
24082: LD_VAR 0 3
24086: EQUAL
24087: AND
24088: IFFALSE 24191
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
24090: LD_EXP 112
24094: PUSH
24095: LD_VAR 0 6
24099: ARRAY
24100: PUSH
24101: LD_VAR 0 5
24105: ARRAY
24106: PUSH
24107: LD_INT 1
24109: ARRAY
24110: PPUSH
24111: LD_EXP 112
24115: PUSH
24116: LD_VAR 0 6
24120: ARRAY
24121: PUSH
24122: LD_VAR 0 5
24126: ARRAY
24127: PUSH
24128: LD_INT 2
24130: ARRAY
24131: PPUSH
24132: LD_VAR 0 1
24136: PPUSH
24137: CALL_OW 255
24141: PPUSH
24142: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
24146: LD_ADDR_EXP 112
24150: PUSH
24151: LD_EXP 112
24155: PPUSH
24156: LD_VAR 0 6
24160: PPUSH
24161: LD_EXP 112
24165: PUSH
24166: LD_VAR 0 6
24170: ARRAY
24171: PPUSH
24172: LD_VAR 0 5
24176: PPUSH
24177: CALL_OW 3
24181: PPUSH
24182: CALL_OW 1
24186: ST_TO_ADDR
// exit ;
24187: POP
24188: POP
24189: GO 24382
// end ; end ;
24191: GO 24031
24193: POP
24194: POP
// for i := minerMinesList [ index ] downto 1 do
24195: LD_ADDR_VAR 0 5
24199: PUSH
24200: DOUBLE
24201: LD_EXP 112
24205: PUSH
24206: LD_VAR 0 6
24210: ARRAY
24211: INC
24212: ST_TO_ADDR
24213: LD_INT 1
24215: PUSH
24216: FOR_DOWNTO
24217: IFFALSE 24380
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
24219: LD_EXP 112
24223: PUSH
24224: LD_VAR 0 6
24228: ARRAY
24229: PUSH
24230: LD_VAR 0 5
24234: ARRAY
24235: PUSH
24236: LD_INT 1
24238: ARRAY
24239: PPUSH
24240: LD_EXP 112
24244: PUSH
24245: LD_VAR 0 6
24249: ARRAY
24250: PUSH
24251: LD_VAR 0 5
24255: ARRAY
24256: PUSH
24257: LD_INT 2
24259: ARRAY
24260: PPUSH
24261: LD_VAR 0 2
24265: PPUSH
24266: LD_VAR 0 3
24270: PPUSH
24271: CALL_OW 298
24275: PUSH
24276: LD_INT 6
24278: LESS
24279: IFFALSE 24378
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
24281: LD_EXP 112
24285: PUSH
24286: LD_VAR 0 6
24290: ARRAY
24291: PUSH
24292: LD_VAR 0 5
24296: ARRAY
24297: PUSH
24298: LD_INT 1
24300: ARRAY
24301: PPUSH
24302: LD_EXP 112
24306: PUSH
24307: LD_VAR 0 6
24311: ARRAY
24312: PUSH
24313: LD_VAR 0 5
24317: ARRAY
24318: PUSH
24319: LD_INT 2
24321: ARRAY
24322: PPUSH
24323: LD_VAR 0 1
24327: PPUSH
24328: CALL_OW 255
24332: PPUSH
24333: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
24337: LD_ADDR_EXP 112
24341: PUSH
24342: LD_EXP 112
24346: PPUSH
24347: LD_VAR 0 6
24351: PPUSH
24352: LD_EXP 112
24356: PUSH
24357: LD_VAR 0 6
24361: ARRAY
24362: PPUSH
24363: LD_VAR 0 5
24367: PPUSH
24368: CALL_OW 3
24372: PPUSH
24373: CALL_OW 1
24377: ST_TO_ADDR
// end ; end ;
24378: GO 24216
24380: POP
24381: POP
// end ;
24382: LD_VAR 0 4
24386: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
24387: LD_INT 0
24389: PPUSH
24390: PPUSH
24391: PPUSH
24392: PPUSH
24393: PPUSH
24394: PPUSH
24395: PPUSH
24396: PPUSH
24397: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
24398: LD_VAR 0 1
24402: PPUSH
24403: CALL_OW 264
24407: PUSH
24408: LD_EXP 36
24412: EQUAL
24413: NOT
24414: PUSH
24415: LD_VAR 0 1
24419: PUSH
24420: LD_EXP 111
24424: IN
24425: NOT
24426: OR
24427: IFFALSE 24431
// exit ;
24429: GO 24753
// index := GetElementIndex ( minersList , unit ) ;
24431: LD_ADDR_VAR 0 6
24435: PUSH
24436: LD_EXP 111
24440: PPUSH
24441: LD_VAR 0 1
24445: PPUSH
24446: CALL 29909 0 2
24450: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
24451: LD_ADDR_VAR 0 8
24455: PUSH
24456: LD_EXP 113
24460: PUSH
24461: LD_EXP 112
24465: PUSH
24466: LD_VAR 0 6
24470: ARRAY
24471: MINUS
24472: ST_TO_ADDR
// if not minesFreeAmount then
24473: LD_VAR 0 8
24477: NOT
24478: IFFALSE 24482
// exit ;
24480: GO 24753
// tmp := [ ] ;
24482: LD_ADDR_VAR 0 7
24486: PUSH
24487: EMPTY
24488: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
24489: LD_ADDR_VAR 0 5
24493: PUSH
24494: DOUBLE
24495: LD_INT 1
24497: DEC
24498: ST_TO_ADDR
24499: LD_VAR 0 8
24503: PUSH
24504: FOR_TO
24505: IFFALSE 24700
// begin _d := rand ( 0 , 5 ) ;
24507: LD_ADDR_VAR 0 11
24511: PUSH
24512: LD_INT 0
24514: PPUSH
24515: LD_INT 5
24517: PPUSH
24518: CALL_OW 12
24522: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
24523: LD_ADDR_VAR 0 12
24527: PUSH
24528: LD_INT 2
24530: PPUSH
24531: LD_INT 6
24533: PPUSH
24534: CALL_OW 12
24538: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
24539: LD_ADDR_VAR 0 9
24543: PUSH
24544: LD_VAR 0 2
24548: PPUSH
24549: LD_VAR 0 11
24553: PPUSH
24554: LD_VAR 0 12
24558: PPUSH
24559: CALL_OW 272
24563: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
24564: LD_ADDR_VAR 0 10
24568: PUSH
24569: LD_VAR 0 3
24573: PPUSH
24574: LD_VAR 0 11
24578: PPUSH
24579: LD_VAR 0 12
24583: PPUSH
24584: CALL_OW 273
24588: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
24589: LD_VAR 0 9
24593: PPUSH
24594: LD_VAR 0 10
24598: PPUSH
24599: CALL_OW 488
24603: PUSH
24604: LD_VAR 0 9
24608: PUSH
24609: LD_VAR 0 10
24613: PUSH
24614: EMPTY
24615: LIST
24616: LIST
24617: PUSH
24618: LD_VAR 0 7
24622: IN
24623: NOT
24624: AND
24625: PUSH
24626: LD_VAR 0 9
24630: PPUSH
24631: LD_VAR 0 10
24635: PPUSH
24636: CALL_OW 458
24640: NOT
24641: AND
24642: IFFALSE 24684
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
24644: LD_ADDR_VAR 0 7
24648: PUSH
24649: LD_VAR 0 7
24653: PPUSH
24654: LD_VAR 0 7
24658: PUSH
24659: LD_INT 1
24661: PLUS
24662: PPUSH
24663: LD_VAR 0 9
24667: PUSH
24668: LD_VAR 0 10
24672: PUSH
24673: EMPTY
24674: LIST
24675: LIST
24676: PPUSH
24677: CALL_OW 1
24681: ST_TO_ADDR
24682: GO 24698
// i := i - 1 ;
24684: LD_ADDR_VAR 0 5
24688: PUSH
24689: LD_VAR 0 5
24693: PUSH
24694: LD_INT 1
24696: MINUS
24697: ST_TO_ADDR
// end ;
24698: GO 24504
24700: POP
24701: POP
// for i in tmp do
24702: LD_ADDR_VAR 0 5
24706: PUSH
24707: LD_VAR 0 7
24711: PUSH
24712: FOR_IN
24713: IFFALSE 24751
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
24715: LD_VAR 0 1
24719: PPUSH
24720: LD_VAR 0 5
24724: PUSH
24725: LD_INT 1
24727: ARRAY
24728: PPUSH
24729: LD_VAR 0 5
24733: PUSH
24734: LD_INT 2
24736: ARRAY
24737: PPUSH
24738: CALL 23693 0 3
24742: NOT
24743: IFFALSE 24749
// exit ;
24745: POP
24746: POP
24747: GO 24753
24749: GO 24712
24751: POP
24752: POP
// end ;
24753: LD_VAR 0 4
24757: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
24758: LD_INT 0
24760: PPUSH
24761: PPUSH
24762: PPUSH
24763: PPUSH
24764: PPUSH
24765: PPUSH
24766: PPUSH
// if not GetClass ( unit ) = class_sniper then
24767: LD_VAR 0 1
24771: PPUSH
24772: CALL_OW 257
24776: PUSH
24777: LD_INT 5
24779: EQUAL
24780: NOT
24781: IFFALSE 24785
// exit ;
24783: GO 25173
// dist := 8 ;
24785: LD_ADDR_VAR 0 5
24789: PUSH
24790: LD_INT 8
24792: ST_TO_ADDR
// viewRange := 12 ;
24793: LD_ADDR_VAR 0 7
24797: PUSH
24798: LD_INT 12
24800: ST_TO_ADDR
// side := GetSide ( unit ) ;
24801: LD_ADDR_VAR 0 6
24805: PUSH
24806: LD_VAR 0 1
24810: PPUSH
24811: CALL_OW 255
24815: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
24816: LD_INT 61
24818: PPUSH
24819: LD_VAR 0 6
24823: PPUSH
24824: CALL_OW 321
24828: PUSH
24829: LD_INT 2
24831: EQUAL
24832: IFFALSE 24842
// viewRange := 16 ;
24834: LD_ADDR_VAR 0 7
24838: PUSH
24839: LD_INT 16
24841: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
24842: LD_VAR 0 1
24846: PPUSH
24847: LD_VAR 0 2
24851: PPUSH
24852: LD_VAR 0 3
24856: PPUSH
24857: CALL_OW 297
24861: PUSH
24862: LD_VAR 0 5
24866: GREATER
24867: IFFALSE 24946
// begin ComMoveXY ( unit , x , y ) ;
24869: LD_VAR 0 1
24873: PPUSH
24874: LD_VAR 0 2
24878: PPUSH
24879: LD_VAR 0 3
24883: PPUSH
24884: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
24888: LD_INT 35
24890: PPUSH
24891: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
24895: LD_VAR 0 1
24899: PPUSH
24900: LD_VAR 0 2
24904: PPUSH
24905: LD_VAR 0 3
24909: PPUSH
24910: CALL 60306 0 3
24914: NOT
24915: IFFALSE 24919
// exit ;
24917: GO 25173
// until GetDistUnitXY ( unit , x , y ) < dist ;
24919: LD_VAR 0 1
24923: PPUSH
24924: LD_VAR 0 2
24928: PPUSH
24929: LD_VAR 0 3
24933: PPUSH
24934: CALL_OW 297
24938: PUSH
24939: LD_VAR 0 5
24943: LESS
24944: IFFALSE 24888
// end ; ComTurnXY ( unit , x , y ) ;
24946: LD_VAR 0 1
24950: PPUSH
24951: LD_VAR 0 2
24955: PPUSH
24956: LD_VAR 0 3
24960: PPUSH
24961: CALL_OW 118
// wait ( 5 ) ;
24965: LD_INT 5
24967: PPUSH
24968: CALL_OW 67
// _d := GetDir ( unit ) ;
24972: LD_ADDR_VAR 0 10
24976: PUSH
24977: LD_VAR 0 1
24981: PPUSH
24982: CALL_OW 254
24986: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
24987: LD_ADDR_VAR 0 8
24991: PUSH
24992: LD_VAR 0 1
24996: PPUSH
24997: CALL_OW 250
25001: PPUSH
25002: LD_VAR 0 10
25006: PPUSH
25007: LD_VAR 0 5
25011: PPUSH
25012: CALL_OW 272
25016: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
25017: LD_ADDR_VAR 0 9
25021: PUSH
25022: LD_VAR 0 1
25026: PPUSH
25027: CALL_OW 251
25031: PPUSH
25032: LD_VAR 0 10
25036: PPUSH
25037: LD_VAR 0 5
25041: PPUSH
25042: CALL_OW 273
25046: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
25047: LD_VAR 0 8
25051: PPUSH
25052: LD_VAR 0 9
25056: PPUSH
25057: CALL_OW 488
25061: NOT
25062: IFFALSE 25066
// exit ;
25064: GO 25173
// ComAnimCustom ( unit , 1 ) ;
25066: LD_VAR 0 1
25070: PPUSH
25071: LD_INT 1
25073: PPUSH
25074: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
25078: LD_VAR 0 8
25082: PPUSH
25083: LD_VAR 0 9
25087: PPUSH
25088: LD_VAR 0 6
25092: PPUSH
25093: LD_VAR 0 7
25097: PPUSH
25098: CALL_OW 330
// repeat wait ( 1 ) ;
25102: LD_INT 1
25104: PPUSH
25105: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
25109: LD_VAR 0 1
25113: PPUSH
25114: CALL_OW 316
25118: PUSH
25119: LD_VAR 0 1
25123: PPUSH
25124: CALL_OW 314
25128: OR
25129: PUSH
25130: LD_VAR 0 1
25134: PPUSH
25135: CALL_OW 302
25139: NOT
25140: OR
25141: PUSH
25142: LD_VAR 0 1
25146: PPUSH
25147: CALL_OW 301
25151: OR
25152: IFFALSE 25102
// RemoveSeeing ( _x , _y , side ) ;
25154: LD_VAR 0 8
25158: PPUSH
25159: LD_VAR 0 9
25163: PPUSH
25164: LD_VAR 0 6
25168: PPUSH
25169: CALL_OW 331
// end ; end_of_file
25173: LD_VAR 0 4
25177: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
25178: LD_INT 0
25180: PPUSH
25181: PPUSH
// if exist_mode then
25182: LD_VAR 0 2
25186: IFFALSE 25211
// unit := CreateCharacter ( prefix & ident ) else
25188: LD_ADDR_VAR 0 5
25192: PUSH
25193: LD_VAR 0 3
25197: PUSH
25198: LD_VAR 0 1
25202: STR
25203: PPUSH
25204: CALL_OW 34
25208: ST_TO_ADDR
25209: GO 25226
// unit := NewCharacter ( ident ) ;
25211: LD_ADDR_VAR 0 5
25215: PUSH
25216: LD_VAR 0 1
25220: PPUSH
25221: CALL_OW 25
25225: ST_TO_ADDR
// result := unit ;
25226: LD_ADDR_VAR 0 4
25230: PUSH
25231: LD_VAR 0 5
25235: ST_TO_ADDR
// end ;
25236: LD_VAR 0 4
25240: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
25241: LD_INT 0
25243: PPUSH
25244: PPUSH
// if not side or not nation then
25245: LD_VAR 0 1
25249: NOT
25250: PUSH
25251: LD_VAR 0 2
25255: NOT
25256: OR
25257: IFFALSE 25261
// exit ;
25259: GO 26025
// case nation of nation_american :
25261: LD_VAR 0 2
25265: PUSH
25266: LD_INT 1
25268: DOUBLE
25269: EQUAL
25270: IFTRUE 25274
25272: GO 25488
25274: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
25275: LD_ADDR_VAR 0 4
25279: PUSH
25280: LD_INT 35
25282: PUSH
25283: LD_INT 45
25285: PUSH
25286: LD_INT 46
25288: PUSH
25289: LD_INT 47
25291: PUSH
25292: LD_INT 82
25294: PUSH
25295: LD_INT 83
25297: PUSH
25298: LD_INT 84
25300: PUSH
25301: LD_INT 85
25303: PUSH
25304: LD_INT 86
25306: PUSH
25307: LD_INT 1
25309: PUSH
25310: LD_INT 2
25312: PUSH
25313: LD_INT 6
25315: PUSH
25316: LD_INT 15
25318: PUSH
25319: LD_INT 16
25321: PUSH
25322: LD_INT 7
25324: PUSH
25325: LD_INT 12
25327: PUSH
25328: LD_INT 13
25330: PUSH
25331: LD_INT 10
25333: PUSH
25334: LD_INT 14
25336: PUSH
25337: LD_INT 20
25339: PUSH
25340: LD_INT 21
25342: PUSH
25343: LD_INT 22
25345: PUSH
25346: LD_INT 25
25348: PUSH
25349: LD_INT 32
25351: PUSH
25352: LD_INT 27
25354: PUSH
25355: LD_INT 36
25357: PUSH
25358: LD_INT 69
25360: PUSH
25361: LD_INT 39
25363: PUSH
25364: LD_INT 34
25366: PUSH
25367: LD_INT 40
25369: PUSH
25370: LD_INT 48
25372: PUSH
25373: LD_INT 49
25375: PUSH
25376: LD_INT 50
25378: PUSH
25379: LD_INT 51
25381: PUSH
25382: LD_INT 52
25384: PUSH
25385: LD_INT 53
25387: PUSH
25388: LD_INT 54
25390: PUSH
25391: LD_INT 55
25393: PUSH
25394: LD_INT 56
25396: PUSH
25397: LD_INT 57
25399: PUSH
25400: LD_INT 58
25402: PUSH
25403: LD_INT 59
25405: PUSH
25406: LD_INT 60
25408: PUSH
25409: LD_INT 61
25411: PUSH
25412: LD_INT 62
25414: PUSH
25415: LD_INT 80
25417: PUSH
25418: LD_INT 82
25420: PUSH
25421: LD_INT 83
25423: PUSH
25424: LD_INT 84
25426: PUSH
25427: LD_INT 85
25429: PUSH
25430: LD_INT 86
25432: PUSH
25433: EMPTY
25434: LIST
25435: LIST
25436: LIST
25437: LIST
25438: LIST
25439: LIST
25440: LIST
25441: LIST
25442: LIST
25443: LIST
25444: LIST
25445: LIST
25446: LIST
25447: LIST
25448: LIST
25449: LIST
25450: LIST
25451: LIST
25452: LIST
25453: LIST
25454: LIST
25455: LIST
25456: LIST
25457: LIST
25458: LIST
25459: LIST
25460: LIST
25461: LIST
25462: LIST
25463: LIST
25464: LIST
25465: LIST
25466: LIST
25467: LIST
25468: LIST
25469: LIST
25470: LIST
25471: LIST
25472: LIST
25473: LIST
25474: LIST
25475: LIST
25476: LIST
25477: LIST
25478: LIST
25479: LIST
25480: LIST
25481: LIST
25482: LIST
25483: LIST
25484: LIST
25485: ST_TO_ADDR
25486: GO 25949
25488: LD_INT 2
25490: DOUBLE
25491: EQUAL
25492: IFTRUE 25496
25494: GO 25718
25496: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
25497: LD_ADDR_VAR 0 4
25501: PUSH
25502: LD_INT 35
25504: PUSH
25505: LD_INT 45
25507: PUSH
25508: LD_INT 46
25510: PUSH
25511: LD_INT 47
25513: PUSH
25514: LD_INT 82
25516: PUSH
25517: LD_INT 83
25519: PUSH
25520: LD_INT 84
25522: PUSH
25523: LD_INT 85
25525: PUSH
25526: LD_INT 87
25528: PUSH
25529: LD_INT 70
25531: PUSH
25532: LD_INT 1
25534: PUSH
25535: LD_INT 11
25537: PUSH
25538: LD_INT 3
25540: PUSH
25541: LD_INT 4
25543: PUSH
25544: LD_INT 5
25546: PUSH
25547: LD_INT 6
25549: PUSH
25550: LD_INT 15
25552: PUSH
25553: LD_INT 18
25555: PUSH
25556: LD_INT 7
25558: PUSH
25559: LD_INT 17
25561: PUSH
25562: LD_INT 8
25564: PUSH
25565: LD_INT 20
25567: PUSH
25568: LD_INT 21
25570: PUSH
25571: LD_INT 22
25573: PUSH
25574: LD_INT 72
25576: PUSH
25577: LD_INT 26
25579: PUSH
25580: LD_INT 69
25582: PUSH
25583: LD_INT 39
25585: PUSH
25586: LD_INT 40
25588: PUSH
25589: LD_INT 41
25591: PUSH
25592: LD_INT 42
25594: PUSH
25595: LD_INT 43
25597: PUSH
25598: LD_INT 48
25600: PUSH
25601: LD_INT 49
25603: PUSH
25604: LD_INT 50
25606: PUSH
25607: LD_INT 51
25609: PUSH
25610: LD_INT 52
25612: PUSH
25613: LD_INT 53
25615: PUSH
25616: LD_INT 54
25618: PUSH
25619: LD_INT 55
25621: PUSH
25622: LD_INT 56
25624: PUSH
25625: LD_INT 60
25627: PUSH
25628: LD_INT 61
25630: PUSH
25631: LD_INT 62
25633: PUSH
25634: LD_INT 66
25636: PUSH
25637: LD_INT 67
25639: PUSH
25640: LD_INT 68
25642: PUSH
25643: LD_INT 81
25645: PUSH
25646: LD_INT 82
25648: PUSH
25649: LD_INT 83
25651: PUSH
25652: LD_INT 84
25654: PUSH
25655: LD_INT 85
25657: PUSH
25658: LD_INT 87
25660: PUSH
25661: EMPTY
25662: LIST
25663: LIST
25664: LIST
25665: LIST
25666: LIST
25667: LIST
25668: LIST
25669: LIST
25670: LIST
25671: LIST
25672: LIST
25673: LIST
25674: LIST
25675: LIST
25676: LIST
25677: LIST
25678: LIST
25679: LIST
25680: LIST
25681: LIST
25682: LIST
25683: LIST
25684: LIST
25685: LIST
25686: LIST
25687: LIST
25688: LIST
25689: LIST
25690: LIST
25691: LIST
25692: LIST
25693: LIST
25694: LIST
25695: LIST
25696: LIST
25697: LIST
25698: LIST
25699: LIST
25700: LIST
25701: LIST
25702: LIST
25703: LIST
25704: LIST
25705: LIST
25706: LIST
25707: LIST
25708: LIST
25709: LIST
25710: LIST
25711: LIST
25712: LIST
25713: LIST
25714: LIST
25715: ST_TO_ADDR
25716: GO 25949
25718: LD_INT 3
25720: DOUBLE
25721: EQUAL
25722: IFTRUE 25726
25724: GO 25948
25726: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
25727: LD_ADDR_VAR 0 4
25731: PUSH
25732: LD_INT 46
25734: PUSH
25735: LD_INT 47
25737: PUSH
25738: LD_INT 1
25740: PUSH
25741: LD_INT 2
25743: PUSH
25744: LD_INT 82
25746: PUSH
25747: LD_INT 83
25749: PUSH
25750: LD_INT 84
25752: PUSH
25753: LD_INT 85
25755: PUSH
25756: LD_INT 86
25758: PUSH
25759: LD_INT 11
25761: PUSH
25762: LD_INT 9
25764: PUSH
25765: LD_INT 20
25767: PUSH
25768: LD_INT 19
25770: PUSH
25771: LD_INT 21
25773: PUSH
25774: LD_INT 24
25776: PUSH
25777: LD_INT 22
25779: PUSH
25780: LD_INT 25
25782: PUSH
25783: LD_INT 28
25785: PUSH
25786: LD_INT 29
25788: PUSH
25789: LD_INT 30
25791: PUSH
25792: LD_INT 31
25794: PUSH
25795: LD_INT 37
25797: PUSH
25798: LD_INT 38
25800: PUSH
25801: LD_INT 32
25803: PUSH
25804: LD_INT 27
25806: PUSH
25807: LD_INT 33
25809: PUSH
25810: LD_INT 69
25812: PUSH
25813: LD_INT 39
25815: PUSH
25816: LD_INT 34
25818: PUSH
25819: LD_INT 40
25821: PUSH
25822: LD_INT 71
25824: PUSH
25825: LD_INT 23
25827: PUSH
25828: LD_INT 44
25830: PUSH
25831: LD_INT 48
25833: PUSH
25834: LD_INT 49
25836: PUSH
25837: LD_INT 50
25839: PUSH
25840: LD_INT 51
25842: PUSH
25843: LD_INT 52
25845: PUSH
25846: LD_INT 53
25848: PUSH
25849: LD_INT 54
25851: PUSH
25852: LD_INT 55
25854: PUSH
25855: LD_INT 56
25857: PUSH
25858: LD_INT 57
25860: PUSH
25861: LD_INT 58
25863: PUSH
25864: LD_INT 59
25866: PUSH
25867: LD_INT 63
25869: PUSH
25870: LD_INT 64
25872: PUSH
25873: LD_INT 65
25875: PUSH
25876: LD_INT 82
25878: PUSH
25879: LD_INT 83
25881: PUSH
25882: LD_INT 84
25884: PUSH
25885: LD_INT 85
25887: PUSH
25888: LD_INT 86
25890: PUSH
25891: EMPTY
25892: LIST
25893: LIST
25894: LIST
25895: LIST
25896: LIST
25897: LIST
25898: LIST
25899: LIST
25900: LIST
25901: LIST
25902: LIST
25903: LIST
25904: LIST
25905: LIST
25906: LIST
25907: LIST
25908: LIST
25909: LIST
25910: LIST
25911: LIST
25912: LIST
25913: LIST
25914: LIST
25915: LIST
25916: LIST
25917: LIST
25918: LIST
25919: LIST
25920: LIST
25921: LIST
25922: LIST
25923: LIST
25924: LIST
25925: LIST
25926: LIST
25927: LIST
25928: LIST
25929: LIST
25930: LIST
25931: LIST
25932: LIST
25933: LIST
25934: LIST
25935: LIST
25936: LIST
25937: LIST
25938: LIST
25939: LIST
25940: LIST
25941: LIST
25942: LIST
25943: LIST
25944: LIST
25945: ST_TO_ADDR
25946: GO 25949
25948: POP
// if state > - 1 and state < 3 then
25949: LD_VAR 0 3
25953: PUSH
25954: LD_INT 1
25956: NEG
25957: GREATER
25958: PUSH
25959: LD_VAR 0 3
25963: PUSH
25964: LD_INT 3
25966: LESS
25967: AND
25968: IFFALSE 26025
// for i in result do
25970: LD_ADDR_VAR 0 5
25974: PUSH
25975: LD_VAR 0 4
25979: PUSH
25980: FOR_IN
25981: IFFALSE 26023
// if GetTech ( i , side ) <> state then
25983: LD_VAR 0 5
25987: PPUSH
25988: LD_VAR 0 1
25992: PPUSH
25993: CALL_OW 321
25997: PUSH
25998: LD_VAR 0 3
26002: NONEQUAL
26003: IFFALSE 26021
// result := result diff i ;
26005: LD_ADDR_VAR 0 4
26009: PUSH
26010: LD_VAR 0 4
26014: PUSH
26015: LD_VAR 0 5
26019: DIFF
26020: ST_TO_ADDR
26021: GO 25980
26023: POP
26024: POP
// end ;
26025: LD_VAR 0 4
26029: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
26030: LD_INT 0
26032: PPUSH
26033: PPUSH
26034: PPUSH
// result := true ;
26035: LD_ADDR_VAR 0 3
26039: PUSH
26040: LD_INT 1
26042: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
26043: LD_ADDR_VAR 0 5
26047: PUSH
26048: LD_VAR 0 2
26052: PPUSH
26053: CALL_OW 480
26057: ST_TO_ADDR
// if not tmp then
26058: LD_VAR 0 5
26062: NOT
26063: IFFALSE 26067
// exit ;
26065: GO 26116
// for i in tmp do
26067: LD_ADDR_VAR 0 4
26071: PUSH
26072: LD_VAR 0 5
26076: PUSH
26077: FOR_IN
26078: IFFALSE 26114
// if GetTech ( i , side ) <> state_researched then
26080: LD_VAR 0 4
26084: PPUSH
26085: LD_VAR 0 1
26089: PPUSH
26090: CALL_OW 321
26094: PUSH
26095: LD_INT 2
26097: NONEQUAL
26098: IFFALSE 26112
// begin result := false ;
26100: LD_ADDR_VAR 0 3
26104: PUSH
26105: LD_INT 0
26107: ST_TO_ADDR
// exit ;
26108: POP
26109: POP
26110: GO 26116
// end ;
26112: GO 26077
26114: POP
26115: POP
// end ;
26116: LD_VAR 0 3
26120: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
26121: LD_INT 0
26123: PPUSH
26124: PPUSH
26125: PPUSH
26126: PPUSH
26127: PPUSH
26128: PPUSH
26129: PPUSH
26130: PPUSH
26131: PPUSH
26132: PPUSH
26133: PPUSH
26134: PPUSH
26135: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
26136: LD_VAR 0 1
26140: NOT
26141: PUSH
26142: LD_VAR 0 1
26146: PPUSH
26147: CALL_OW 257
26151: PUSH
26152: LD_INT 9
26154: NONEQUAL
26155: OR
26156: IFFALSE 26160
// exit ;
26158: GO 26733
// side := GetSide ( unit ) ;
26160: LD_ADDR_VAR 0 9
26164: PUSH
26165: LD_VAR 0 1
26169: PPUSH
26170: CALL_OW 255
26174: ST_TO_ADDR
// tech_space := tech_spacanom ;
26175: LD_ADDR_VAR 0 12
26179: PUSH
26180: LD_INT 29
26182: ST_TO_ADDR
// tech_time := tech_taurad ;
26183: LD_ADDR_VAR 0 13
26187: PUSH
26188: LD_INT 28
26190: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
26191: LD_ADDR_VAR 0 11
26195: PUSH
26196: LD_VAR 0 1
26200: PPUSH
26201: CALL_OW 310
26205: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
26206: LD_VAR 0 11
26210: PPUSH
26211: CALL_OW 247
26215: PUSH
26216: LD_INT 2
26218: EQUAL
26219: IFFALSE 26223
// exit ;
26221: GO 26733
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
26223: LD_ADDR_VAR 0 8
26227: PUSH
26228: LD_INT 81
26230: PUSH
26231: LD_VAR 0 9
26235: PUSH
26236: EMPTY
26237: LIST
26238: LIST
26239: PUSH
26240: LD_INT 3
26242: PUSH
26243: LD_INT 21
26245: PUSH
26246: LD_INT 3
26248: PUSH
26249: EMPTY
26250: LIST
26251: LIST
26252: PUSH
26253: EMPTY
26254: LIST
26255: LIST
26256: PUSH
26257: EMPTY
26258: LIST
26259: LIST
26260: PPUSH
26261: CALL_OW 69
26265: ST_TO_ADDR
// if not tmp then
26266: LD_VAR 0 8
26270: NOT
26271: IFFALSE 26275
// exit ;
26273: GO 26733
// if in_unit then
26275: LD_VAR 0 11
26279: IFFALSE 26303
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
26281: LD_ADDR_VAR 0 10
26285: PUSH
26286: LD_VAR 0 8
26290: PPUSH
26291: LD_VAR 0 11
26295: PPUSH
26296: CALL_OW 74
26300: ST_TO_ADDR
26301: GO 26323
// enemy := NearestUnitToUnit ( tmp , unit ) ;
26303: LD_ADDR_VAR 0 10
26307: PUSH
26308: LD_VAR 0 8
26312: PPUSH
26313: LD_VAR 0 1
26317: PPUSH
26318: CALL_OW 74
26322: ST_TO_ADDR
// if not enemy then
26323: LD_VAR 0 10
26327: NOT
26328: IFFALSE 26332
// exit ;
26330: GO 26733
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
26332: LD_VAR 0 11
26336: PUSH
26337: LD_VAR 0 11
26341: PPUSH
26342: LD_VAR 0 10
26346: PPUSH
26347: CALL_OW 296
26351: PUSH
26352: LD_INT 13
26354: GREATER
26355: AND
26356: PUSH
26357: LD_VAR 0 1
26361: PPUSH
26362: LD_VAR 0 10
26366: PPUSH
26367: CALL_OW 296
26371: PUSH
26372: LD_INT 12
26374: GREATER
26375: OR
26376: IFFALSE 26380
// exit ;
26378: GO 26733
// missile := [ 1 ] ;
26380: LD_ADDR_VAR 0 14
26384: PUSH
26385: LD_INT 1
26387: PUSH
26388: EMPTY
26389: LIST
26390: ST_TO_ADDR
// if Researched ( side , tech_space ) then
26391: LD_VAR 0 9
26395: PPUSH
26396: LD_VAR 0 12
26400: PPUSH
26401: CALL_OW 325
26405: IFFALSE 26434
// missile := Insert ( missile , missile + 1 , 2 ) ;
26407: LD_ADDR_VAR 0 14
26411: PUSH
26412: LD_VAR 0 14
26416: PPUSH
26417: LD_VAR 0 14
26421: PUSH
26422: LD_INT 1
26424: PLUS
26425: PPUSH
26426: LD_INT 2
26428: PPUSH
26429: CALL_OW 2
26433: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
26434: LD_VAR 0 9
26438: PPUSH
26439: LD_VAR 0 13
26443: PPUSH
26444: CALL_OW 325
26448: PUSH
26449: LD_VAR 0 10
26453: PPUSH
26454: CALL_OW 255
26458: PPUSH
26459: LD_VAR 0 13
26463: PPUSH
26464: CALL_OW 325
26468: NOT
26469: AND
26470: IFFALSE 26499
// missile := Insert ( missile , missile + 1 , 3 ) ;
26472: LD_ADDR_VAR 0 14
26476: PUSH
26477: LD_VAR 0 14
26481: PPUSH
26482: LD_VAR 0 14
26486: PUSH
26487: LD_INT 1
26489: PLUS
26490: PPUSH
26491: LD_INT 3
26493: PPUSH
26494: CALL_OW 2
26498: ST_TO_ADDR
// if missile < 2 then
26499: LD_VAR 0 14
26503: PUSH
26504: LD_INT 2
26506: LESS
26507: IFFALSE 26511
// exit ;
26509: GO 26733
// x := GetX ( enemy ) ;
26511: LD_ADDR_VAR 0 4
26515: PUSH
26516: LD_VAR 0 10
26520: PPUSH
26521: CALL_OW 250
26525: ST_TO_ADDR
// y := GetY ( enemy ) ;
26526: LD_ADDR_VAR 0 5
26530: PUSH
26531: LD_VAR 0 10
26535: PPUSH
26536: CALL_OW 251
26540: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
26541: LD_ADDR_VAR 0 6
26545: PUSH
26546: LD_VAR 0 4
26550: PUSH
26551: LD_INT 1
26553: NEG
26554: PPUSH
26555: LD_INT 1
26557: PPUSH
26558: CALL_OW 12
26562: PLUS
26563: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
26564: LD_ADDR_VAR 0 7
26568: PUSH
26569: LD_VAR 0 5
26573: PUSH
26574: LD_INT 1
26576: NEG
26577: PPUSH
26578: LD_INT 1
26580: PPUSH
26581: CALL_OW 12
26585: PLUS
26586: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
26587: LD_VAR 0 6
26591: PPUSH
26592: LD_VAR 0 7
26596: PPUSH
26597: CALL_OW 488
26601: NOT
26602: IFFALSE 26624
// begin _x := x ;
26604: LD_ADDR_VAR 0 6
26608: PUSH
26609: LD_VAR 0 4
26613: ST_TO_ADDR
// _y := y ;
26614: LD_ADDR_VAR 0 7
26618: PUSH
26619: LD_VAR 0 5
26623: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
26624: LD_ADDR_VAR 0 3
26628: PUSH
26629: LD_INT 1
26631: PPUSH
26632: LD_VAR 0 14
26636: PPUSH
26637: CALL_OW 12
26641: ST_TO_ADDR
// case i of 1 :
26642: LD_VAR 0 3
26646: PUSH
26647: LD_INT 1
26649: DOUBLE
26650: EQUAL
26651: IFTRUE 26655
26653: GO 26672
26655: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
26656: LD_VAR 0 1
26660: PPUSH
26661: LD_VAR 0 10
26665: PPUSH
26666: CALL_OW 115
26670: GO 26733
26672: LD_INT 2
26674: DOUBLE
26675: EQUAL
26676: IFTRUE 26680
26678: GO 26702
26680: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
26681: LD_VAR 0 1
26685: PPUSH
26686: LD_VAR 0 6
26690: PPUSH
26691: LD_VAR 0 7
26695: PPUSH
26696: CALL_OW 153
26700: GO 26733
26702: LD_INT 3
26704: DOUBLE
26705: EQUAL
26706: IFTRUE 26710
26708: GO 26732
26710: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
26711: LD_VAR 0 1
26715: PPUSH
26716: LD_VAR 0 6
26720: PPUSH
26721: LD_VAR 0 7
26725: PPUSH
26726: CALL_OW 154
26730: GO 26733
26732: POP
// end ;
26733: LD_VAR 0 2
26737: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
26738: LD_INT 0
26740: PPUSH
26741: PPUSH
26742: PPUSH
26743: PPUSH
26744: PPUSH
26745: PPUSH
// if not unit or not building then
26746: LD_VAR 0 1
26750: NOT
26751: PUSH
26752: LD_VAR 0 2
26756: NOT
26757: OR
26758: IFFALSE 26762
// exit ;
26760: GO 26920
// x := GetX ( building ) ;
26762: LD_ADDR_VAR 0 5
26766: PUSH
26767: LD_VAR 0 2
26771: PPUSH
26772: CALL_OW 250
26776: ST_TO_ADDR
// y := GetY ( building ) ;
26777: LD_ADDR_VAR 0 6
26781: PUSH
26782: LD_VAR 0 2
26786: PPUSH
26787: CALL_OW 251
26791: ST_TO_ADDR
// for i = 0 to 5 do
26792: LD_ADDR_VAR 0 4
26796: PUSH
26797: DOUBLE
26798: LD_INT 0
26800: DEC
26801: ST_TO_ADDR
26802: LD_INT 5
26804: PUSH
26805: FOR_TO
26806: IFFALSE 26918
// begin _x := ShiftX ( x , i , 3 ) ;
26808: LD_ADDR_VAR 0 7
26812: PUSH
26813: LD_VAR 0 5
26817: PPUSH
26818: LD_VAR 0 4
26822: PPUSH
26823: LD_INT 3
26825: PPUSH
26826: CALL_OW 272
26830: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
26831: LD_ADDR_VAR 0 8
26835: PUSH
26836: LD_VAR 0 6
26840: PPUSH
26841: LD_VAR 0 4
26845: PPUSH
26846: LD_INT 3
26848: PPUSH
26849: CALL_OW 273
26853: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
26854: LD_VAR 0 7
26858: PPUSH
26859: LD_VAR 0 8
26863: PPUSH
26864: CALL_OW 488
26868: NOT
26869: IFFALSE 26873
// continue ;
26871: GO 26805
// if HexInfo ( _x , _y ) = 0 then
26873: LD_VAR 0 7
26877: PPUSH
26878: LD_VAR 0 8
26882: PPUSH
26883: CALL_OW 428
26887: PUSH
26888: LD_INT 0
26890: EQUAL
26891: IFFALSE 26916
// begin ComMoveXY ( unit , _x , _y ) ;
26893: LD_VAR 0 1
26897: PPUSH
26898: LD_VAR 0 7
26902: PPUSH
26903: LD_VAR 0 8
26907: PPUSH
26908: CALL_OW 111
// exit ;
26912: POP
26913: POP
26914: GO 26920
// end ; end ;
26916: GO 26805
26918: POP
26919: POP
// end ;
26920: LD_VAR 0 3
26924: RET
// export function ScanBase ( side , base_area ) ; begin
26925: LD_INT 0
26927: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
26928: LD_ADDR_VAR 0 3
26932: PUSH
26933: LD_VAR 0 2
26937: PPUSH
26938: LD_INT 81
26940: PUSH
26941: LD_VAR 0 1
26945: PUSH
26946: EMPTY
26947: LIST
26948: LIST
26949: PPUSH
26950: CALL_OW 70
26954: ST_TO_ADDR
// end ;
26955: LD_VAR 0 3
26959: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
26960: LD_INT 0
26962: PPUSH
26963: PPUSH
26964: PPUSH
26965: PPUSH
// result := false ;
26966: LD_ADDR_VAR 0 2
26970: PUSH
26971: LD_INT 0
26973: ST_TO_ADDR
// side := GetSide ( unit ) ;
26974: LD_ADDR_VAR 0 3
26978: PUSH
26979: LD_VAR 0 1
26983: PPUSH
26984: CALL_OW 255
26988: ST_TO_ADDR
// nat := GetNation ( unit ) ;
26989: LD_ADDR_VAR 0 4
26993: PUSH
26994: LD_VAR 0 1
26998: PPUSH
26999: CALL_OW 248
27003: ST_TO_ADDR
// case nat of 1 :
27004: LD_VAR 0 4
27008: PUSH
27009: LD_INT 1
27011: DOUBLE
27012: EQUAL
27013: IFTRUE 27017
27015: GO 27028
27017: POP
// tech := tech_lassight ; 2 :
27018: LD_ADDR_VAR 0 5
27022: PUSH
27023: LD_INT 12
27025: ST_TO_ADDR
27026: GO 27067
27028: LD_INT 2
27030: DOUBLE
27031: EQUAL
27032: IFTRUE 27036
27034: GO 27047
27036: POP
// tech := tech_mortar ; 3 :
27037: LD_ADDR_VAR 0 5
27041: PUSH
27042: LD_INT 41
27044: ST_TO_ADDR
27045: GO 27067
27047: LD_INT 3
27049: DOUBLE
27050: EQUAL
27051: IFTRUE 27055
27053: GO 27066
27055: POP
// tech := tech_bazooka ; end ;
27056: LD_ADDR_VAR 0 5
27060: PUSH
27061: LD_INT 44
27063: ST_TO_ADDR
27064: GO 27067
27066: POP
// if Researched ( side , tech ) then
27067: LD_VAR 0 3
27071: PPUSH
27072: LD_VAR 0 5
27076: PPUSH
27077: CALL_OW 325
27081: IFFALSE 27108
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
27083: LD_ADDR_VAR 0 2
27087: PUSH
27088: LD_INT 5
27090: PUSH
27091: LD_INT 8
27093: PUSH
27094: LD_INT 9
27096: PUSH
27097: EMPTY
27098: LIST
27099: LIST
27100: LIST
27101: PUSH
27102: LD_VAR 0 4
27106: ARRAY
27107: ST_TO_ADDR
// end ;
27108: LD_VAR 0 2
27112: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
27113: LD_INT 0
27115: PPUSH
27116: PPUSH
27117: PPUSH
// if not mines then
27118: LD_VAR 0 2
27122: NOT
27123: IFFALSE 27127
// exit ;
27125: GO 27271
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
27127: LD_ADDR_VAR 0 5
27131: PUSH
27132: LD_INT 81
27134: PUSH
27135: LD_VAR 0 1
27139: PUSH
27140: EMPTY
27141: LIST
27142: LIST
27143: PUSH
27144: LD_INT 3
27146: PUSH
27147: LD_INT 21
27149: PUSH
27150: LD_INT 3
27152: PUSH
27153: EMPTY
27154: LIST
27155: LIST
27156: PUSH
27157: EMPTY
27158: LIST
27159: LIST
27160: PUSH
27161: EMPTY
27162: LIST
27163: LIST
27164: PPUSH
27165: CALL_OW 69
27169: ST_TO_ADDR
// for i in mines do
27170: LD_ADDR_VAR 0 4
27174: PUSH
27175: LD_VAR 0 2
27179: PUSH
27180: FOR_IN
27181: IFFALSE 27269
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
27183: LD_VAR 0 4
27187: PUSH
27188: LD_INT 1
27190: ARRAY
27191: PPUSH
27192: LD_VAR 0 4
27196: PUSH
27197: LD_INT 2
27199: ARRAY
27200: PPUSH
27201: CALL_OW 458
27205: NOT
27206: IFFALSE 27210
// continue ;
27208: GO 27180
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
27210: LD_VAR 0 4
27214: PUSH
27215: LD_INT 1
27217: ARRAY
27218: PPUSH
27219: LD_VAR 0 4
27223: PUSH
27224: LD_INT 2
27226: ARRAY
27227: PPUSH
27228: CALL_OW 428
27232: PUSH
27233: LD_VAR 0 5
27237: IN
27238: IFFALSE 27267
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
27240: LD_VAR 0 4
27244: PUSH
27245: LD_INT 1
27247: ARRAY
27248: PPUSH
27249: LD_VAR 0 4
27253: PUSH
27254: LD_INT 2
27256: ARRAY
27257: PPUSH
27258: LD_VAR 0 1
27262: PPUSH
27263: CALL_OW 456
// end ;
27267: GO 27180
27269: POP
27270: POP
// end ;
27271: LD_VAR 0 3
27275: RET
// export function Count ( array ) ; var i ; begin
27276: LD_INT 0
27278: PPUSH
27279: PPUSH
// result := 0 ;
27280: LD_ADDR_VAR 0 2
27284: PUSH
27285: LD_INT 0
27287: ST_TO_ADDR
// for i in array do
27288: LD_ADDR_VAR 0 3
27292: PUSH
27293: LD_VAR 0 1
27297: PUSH
27298: FOR_IN
27299: IFFALSE 27323
// if i then
27301: LD_VAR 0 3
27305: IFFALSE 27321
// result := result + 1 ;
27307: LD_ADDR_VAR 0 2
27311: PUSH
27312: LD_VAR 0 2
27316: PUSH
27317: LD_INT 1
27319: PLUS
27320: ST_TO_ADDR
27321: GO 27298
27323: POP
27324: POP
// end ;
27325: LD_VAR 0 2
27329: RET
// export function IsEmpty ( building ) ; begin
27330: LD_INT 0
27332: PPUSH
// if not building then
27333: LD_VAR 0 1
27337: NOT
27338: IFFALSE 27342
// exit ;
27340: GO 27385
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
27342: LD_ADDR_VAR 0 2
27346: PUSH
27347: LD_VAR 0 1
27351: PUSH
27352: LD_INT 22
27354: PUSH
27355: LD_VAR 0 1
27359: PPUSH
27360: CALL_OW 255
27364: PUSH
27365: EMPTY
27366: LIST
27367: LIST
27368: PUSH
27369: LD_INT 58
27371: PUSH
27372: EMPTY
27373: LIST
27374: PUSH
27375: EMPTY
27376: LIST
27377: LIST
27378: PPUSH
27379: CALL_OW 69
27383: IN
27384: ST_TO_ADDR
// end ;
27385: LD_VAR 0 2
27389: RET
// export function IsNotFull ( building ) ; begin
27390: LD_INT 0
27392: PPUSH
// if not building then
27393: LD_VAR 0 1
27397: NOT
27398: IFFALSE 27402
// exit ;
27400: GO 27421
// result := UnitsInside ( building ) < 6 ;
27402: LD_ADDR_VAR 0 2
27406: PUSH
27407: LD_VAR 0 1
27411: PPUSH
27412: CALL_OW 313
27416: PUSH
27417: LD_INT 6
27419: LESS
27420: ST_TO_ADDR
// end ;
27421: LD_VAR 0 2
27425: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
27426: LD_INT 0
27428: PPUSH
27429: PPUSH
27430: PPUSH
27431: PPUSH
// tmp := [ ] ;
27432: LD_ADDR_VAR 0 3
27436: PUSH
27437: EMPTY
27438: ST_TO_ADDR
// list := [ ] ;
27439: LD_ADDR_VAR 0 5
27443: PUSH
27444: EMPTY
27445: ST_TO_ADDR
// for i = 16 to 25 do
27446: LD_ADDR_VAR 0 4
27450: PUSH
27451: DOUBLE
27452: LD_INT 16
27454: DEC
27455: ST_TO_ADDR
27456: LD_INT 25
27458: PUSH
27459: FOR_TO
27460: IFFALSE 27533
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
27462: LD_ADDR_VAR 0 3
27466: PUSH
27467: LD_VAR 0 3
27471: PUSH
27472: LD_INT 22
27474: PUSH
27475: LD_VAR 0 1
27479: PPUSH
27480: CALL_OW 255
27484: PUSH
27485: EMPTY
27486: LIST
27487: LIST
27488: PUSH
27489: LD_INT 91
27491: PUSH
27492: LD_VAR 0 1
27496: PUSH
27497: LD_INT 6
27499: PUSH
27500: EMPTY
27501: LIST
27502: LIST
27503: LIST
27504: PUSH
27505: LD_INT 30
27507: PUSH
27508: LD_VAR 0 4
27512: PUSH
27513: EMPTY
27514: LIST
27515: LIST
27516: PUSH
27517: EMPTY
27518: LIST
27519: LIST
27520: LIST
27521: PUSH
27522: EMPTY
27523: LIST
27524: PPUSH
27525: CALL_OW 69
27529: ADD
27530: ST_TO_ADDR
27531: GO 27459
27533: POP
27534: POP
// for i = 1 to tmp do
27535: LD_ADDR_VAR 0 4
27539: PUSH
27540: DOUBLE
27541: LD_INT 1
27543: DEC
27544: ST_TO_ADDR
27545: LD_VAR 0 3
27549: PUSH
27550: FOR_TO
27551: IFFALSE 27639
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
27553: LD_ADDR_VAR 0 5
27557: PUSH
27558: LD_VAR 0 5
27562: PUSH
27563: LD_VAR 0 3
27567: PUSH
27568: LD_VAR 0 4
27572: ARRAY
27573: PPUSH
27574: CALL_OW 266
27578: PUSH
27579: LD_VAR 0 3
27583: PUSH
27584: LD_VAR 0 4
27588: ARRAY
27589: PPUSH
27590: CALL_OW 250
27594: PUSH
27595: LD_VAR 0 3
27599: PUSH
27600: LD_VAR 0 4
27604: ARRAY
27605: PPUSH
27606: CALL_OW 251
27610: PUSH
27611: LD_VAR 0 3
27615: PUSH
27616: LD_VAR 0 4
27620: ARRAY
27621: PPUSH
27622: CALL_OW 254
27626: PUSH
27627: EMPTY
27628: LIST
27629: LIST
27630: LIST
27631: LIST
27632: PUSH
27633: EMPTY
27634: LIST
27635: ADD
27636: ST_TO_ADDR
27637: GO 27550
27639: POP
27640: POP
// result := list ;
27641: LD_ADDR_VAR 0 2
27645: PUSH
27646: LD_VAR 0 5
27650: ST_TO_ADDR
// end ;
27651: LD_VAR 0 2
27655: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
27656: LD_INT 0
27658: PPUSH
27659: PPUSH
27660: PPUSH
27661: PPUSH
27662: PPUSH
27663: PPUSH
27664: PPUSH
// if not factory then
27665: LD_VAR 0 1
27669: NOT
27670: IFFALSE 27674
// exit ;
27672: GO 28267
// if control = control_apeman then
27674: LD_VAR 0 4
27678: PUSH
27679: LD_INT 5
27681: EQUAL
27682: IFFALSE 27791
// begin tmp := UnitsInside ( factory ) ;
27684: LD_ADDR_VAR 0 8
27688: PUSH
27689: LD_VAR 0 1
27693: PPUSH
27694: CALL_OW 313
27698: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
27699: LD_VAR 0 8
27703: PPUSH
27704: LD_INT 25
27706: PUSH
27707: LD_INT 12
27709: PUSH
27710: EMPTY
27711: LIST
27712: LIST
27713: PPUSH
27714: CALL_OW 72
27718: NOT
27719: IFFALSE 27729
// control := control_manual ;
27721: LD_ADDR_VAR 0 4
27725: PUSH
27726: LD_INT 1
27728: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
27729: LD_ADDR_VAR 0 8
27733: PUSH
27734: LD_VAR 0 1
27738: PPUSH
27739: CALL 27426 0 1
27743: ST_TO_ADDR
// if tmp then
27744: LD_VAR 0 8
27748: IFFALSE 27791
// begin for i in tmp do
27750: LD_ADDR_VAR 0 7
27754: PUSH
27755: LD_VAR 0 8
27759: PUSH
27760: FOR_IN
27761: IFFALSE 27789
// if i [ 1 ] = b_ext_radio then
27763: LD_VAR 0 7
27767: PUSH
27768: LD_INT 1
27770: ARRAY
27771: PUSH
27772: LD_INT 22
27774: EQUAL
27775: IFFALSE 27787
// begin control := control_remote ;
27777: LD_ADDR_VAR 0 4
27781: PUSH
27782: LD_INT 2
27784: ST_TO_ADDR
// break ;
27785: GO 27789
// end ;
27787: GO 27760
27789: POP
27790: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
27791: LD_VAR 0 1
27795: PPUSH
27796: LD_VAR 0 2
27800: PPUSH
27801: LD_VAR 0 3
27805: PPUSH
27806: LD_VAR 0 4
27810: PPUSH
27811: LD_VAR 0 5
27815: PPUSH
27816: CALL_OW 448
27820: IFFALSE 27855
// begin result := [ chassis , engine , control , weapon ] ;
27822: LD_ADDR_VAR 0 6
27826: PUSH
27827: LD_VAR 0 2
27831: PUSH
27832: LD_VAR 0 3
27836: PUSH
27837: LD_VAR 0 4
27841: PUSH
27842: LD_VAR 0 5
27846: PUSH
27847: EMPTY
27848: LIST
27849: LIST
27850: LIST
27851: LIST
27852: ST_TO_ADDR
// exit ;
27853: GO 28267
// end ; _chassis := AvailableChassisList ( factory ) ;
27855: LD_ADDR_VAR 0 9
27859: PUSH
27860: LD_VAR 0 1
27864: PPUSH
27865: CALL_OW 475
27869: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
27870: LD_ADDR_VAR 0 11
27874: PUSH
27875: LD_VAR 0 1
27879: PPUSH
27880: CALL_OW 476
27884: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
27885: LD_ADDR_VAR 0 12
27889: PUSH
27890: LD_VAR 0 1
27894: PPUSH
27895: CALL_OW 477
27899: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
27900: LD_ADDR_VAR 0 10
27904: PUSH
27905: LD_VAR 0 1
27909: PPUSH
27910: CALL_OW 478
27914: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
27915: LD_VAR 0 9
27919: NOT
27920: PUSH
27921: LD_VAR 0 11
27925: NOT
27926: OR
27927: PUSH
27928: LD_VAR 0 12
27932: NOT
27933: OR
27934: PUSH
27935: LD_VAR 0 10
27939: NOT
27940: OR
27941: IFFALSE 27976
// begin result := [ chassis , engine , control , weapon ] ;
27943: LD_ADDR_VAR 0 6
27947: PUSH
27948: LD_VAR 0 2
27952: PUSH
27953: LD_VAR 0 3
27957: PUSH
27958: LD_VAR 0 4
27962: PUSH
27963: LD_VAR 0 5
27967: PUSH
27968: EMPTY
27969: LIST
27970: LIST
27971: LIST
27972: LIST
27973: ST_TO_ADDR
// exit ;
27974: GO 28267
// end ; if not chassis in _chassis then
27976: LD_VAR 0 2
27980: PUSH
27981: LD_VAR 0 9
27985: IN
27986: NOT
27987: IFFALSE 28013
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
27989: LD_ADDR_VAR 0 2
27993: PUSH
27994: LD_VAR 0 9
27998: PUSH
27999: LD_INT 1
28001: PPUSH
28002: LD_VAR 0 9
28006: PPUSH
28007: CALL_OW 12
28011: ARRAY
28012: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
28013: LD_VAR 0 2
28017: PPUSH
28018: LD_VAR 0 3
28022: PPUSH
28023: CALL 28272 0 2
28027: NOT
28028: IFFALSE 28087
// repeat engine := _engine [ 1 ] ;
28030: LD_ADDR_VAR 0 3
28034: PUSH
28035: LD_VAR 0 11
28039: PUSH
28040: LD_INT 1
28042: ARRAY
28043: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
28044: LD_ADDR_VAR 0 11
28048: PUSH
28049: LD_VAR 0 11
28053: PPUSH
28054: LD_INT 1
28056: PPUSH
28057: CALL_OW 3
28061: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
28062: LD_VAR 0 2
28066: PPUSH
28067: LD_VAR 0 3
28071: PPUSH
28072: CALL 28272 0 2
28076: PUSH
28077: LD_VAR 0 11
28081: PUSH
28082: EMPTY
28083: EQUAL
28084: OR
28085: IFFALSE 28030
// if not control in _control then
28087: LD_VAR 0 4
28091: PUSH
28092: LD_VAR 0 12
28096: IN
28097: NOT
28098: IFFALSE 28124
// control := _control [ rand ( 1 , _control ) ] ;
28100: LD_ADDR_VAR 0 4
28104: PUSH
28105: LD_VAR 0 12
28109: PUSH
28110: LD_INT 1
28112: PPUSH
28113: LD_VAR 0 12
28117: PPUSH
28118: CALL_OW 12
28122: ARRAY
28123: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
28124: LD_VAR 0 2
28128: PPUSH
28129: LD_VAR 0 5
28133: PPUSH
28134: CALL 28492 0 2
28138: NOT
28139: IFFALSE 28198
// repeat weapon := _weapon [ 1 ] ;
28141: LD_ADDR_VAR 0 5
28145: PUSH
28146: LD_VAR 0 10
28150: PUSH
28151: LD_INT 1
28153: ARRAY
28154: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
28155: LD_ADDR_VAR 0 10
28159: PUSH
28160: LD_VAR 0 10
28164: PPUSH
28165: LD_INT 1
28167: PPUSH
28168: CALL_OW 3
28172: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
28173: LD_VAR 0 2
28177: PPUSH
28178: LD_VAR 0 5
28182: PPUSH
28183: CALL 28492 0 2
28187: PUSH
28188: LD_VAR 0 10
28192: PUSH
28193: EMPTY
28194: EQUAL
28195: OR
28196: IFFALSE 28141
// result := [ ] ;
28198: LD_ADDR_VAR 0 6
28202: PUSH
28203: EMPTY
28204: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
28205: LD_VAR 0 1
28209: PPUSH
28210: LD_VAR 0 2
28214: PPUSH
28215: LD_VAR 0 3
28219: PPUSH
28220: LD_VAR 0 4
28224: PPUSH
28225: LD_VAR 0 5
28229: PPUSH
28230: CALL_OW 448
28234: IFFALSE 28267
// result := [ chassis , engine , control , weapon ] ;
28236: LD_ADDR_VAR 0 6
28240: PUSH
28241: LD_VAR 0 2
28245: PUSH
28246: LD_VAR 0 3
28250: PUSH
28251: LD_VAR 0 4
28255: PUSH
28256: LD_VAR 0 5
28260: PUSH
28261: EMPTY
28262: LIST
28263: LIST
28264: LIST
28265: LIST
28266: ST_TO_ADDR
// end ;
28267: LD_VAR 0 6
28271: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
28272: LD_INT 0
28274: PPUSH
// if not chassis or not engine then
28275: LD_VAR 0 1
28279: NOT
28280: PUSH
28281: LD_VAR 0 2
28285: NOT
28286: OR
28287: IFFALSE 28291
// exit ;
28289: GO 28487
// case engine of engine_solar :
28291: LD_VAR 0 2
28295: PUSH
28296: LD_INT 2
28298: DOUBLE
28299: EQUAL
28300: IFTRUE 28304
28302: GO 28342
28304: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
28305: LD_ADDR_VAR 0 3
28309: PUSH
28310: LD_INT 11
28312: PUSH
28313: LD_INT 12
28315: PUSH
28316: LD_INT 13
28318: PUSH
28319: LD_INT 14
28321: PUSH
28322: LD_INT 1
28324: PUSH
28325: LD_INT 2
28327: PUSH
28328: LD_INT 3
28330: PUSH
28331: EMPTY
28332: LIST
28333: LIST
28334: LIST
28335: LIST
28336: LIST
28337: LIST
28338: LIST
28339: ST_TO_ADDR
28340: GO 28471
28342: LD_INT 1
28344: DOUBLE
28345: EQUAL
28346: IFTRUE 28350
28348: GO 28412
28350: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
28351: LD_ADDR_VAR 0 3
28355: PUSH
28356: LD_INT 11
28358: PUSH
28359: LD_INT 12
28361: PUSH
28362: LD_INT 13
28364: PUSH
28365: LD_INT 14
28367: PUSH
28368: LD_INT 1
28370: PUSH
28371: LD_INT 2
28373: PUSH
28374: LD_INT 3
28376: PUSH
28377: LD_INT 4
28379: PUSH
28380: LD_INT 5
28382: PUSH
28383: LD_INT 21
28385: PUSH
28386: LD_INT 23
28388: PUSH
28389: LD_INT 22
28391: PUSH
28392: LD_INT 24
28394: PUSH
28395: EMPTY
28396: LIST
28397: LIST
28398: LIST
28399: LIST
28400: LIST
28401: LIST
28402: LIST
28403: LIST
28404: LIST
28405: LIST
28406: LIST
28407: LIST
28408: LIST
28409: ST_TO_ADDR
28410: GO 28471
28412: LD_INT 3
28414: DOUBLE
28415: EQUAL
28416: IFTRUE 28420
28418: GO 28470
28420: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
28421: LD_ADDR_VAR 0 3
28425: PUSH
28426: LD_INT 13
28428: PUSH
28429: LD_INT 14
28431: PUSH
28432: LD_INT 2
28434: PUSH
28435: LD_INT 3
28437: PUSH
28438: LD_INT 4
28440: PUSH
28441: LD_INT 5
28443: PUSH
28444: LD_INT 21
28446: PUSH
28447: LD_INT 22
28449: PUSH
28450: LD_INT 23
28452: PUSH
28453: LD_INT 24
28455: PUSH
28456: EMPTY
28457: LIST
28458: LIST
28459: LIST
28460: LIST
28461: LIST
28462: LIST
28463: LIST
28464: LIST
28465: LIST
28466: LIST
28467: ST_TO_ADDR
28468: GO 28471
28470: POP
// result := ( chassis in result ) ;
28471: LD_ADDR_VAR 0 3
28475: PUSH
28476: LD_VAR 0 1
28480: PUSH
28481: LD_VAR 0 3
28485: IN
28486: ST_TO_ADDR
// end ;
28487: LD_VAR 0 3
28491: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
28492: LD_INT 0
28494: PPUSH
// if not chassis or not weapon then
28495: LD_VAR 0 1
28499: NOT
28500: PUSH
28501: LD_VAR 0 2
28505: NOT
28506: OR
28507: IFFALSE 28511
// exit ;
28509: GO 29537
// case weapon of us_machine_gun :
28511: LD_VAR 0 2
28515: PUSH
28516: LD_INT 2
28518: DOUBLE
28519: EQUAL
28520: IFTRUE 28524
28522: GO 28554
28524: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
28525: LD_ADDR_VAR 0 3
28529: PUSH
28530: LD_INT 1
28532: PUSH
28533: LD_INT 2
28535: PUSH
28536: LD_INT 3
28538: PUSH
28539: LD_INT 4
28541: PUSH
28542: LD_INT 5
28544: PUSH
28545: EMPTY
28546: LIST
28547: LIST
28548: LIST
28549: LIST
28550: LIST
28551: ST_TO_ADDR
28552: GO 29521
28554: LD_INT 3
28556: DOUBLE
28557: EQUAL
28558: IFTRUE 28562
28560: GO 28592
28562: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
28563: LD_ADDR_VAR 0 3
28567: PUSH
28568: LD_INT 1
28570: PUSH
28571: LD_INT 2
28573: PUSH
28574: LD_INT 3
28576: PUSH
28577: LD_INT 4
28579: PUSH
28580: LD_INT 5
28582: PUSH
28583: EMPTY
28584: LIST
28585: LIST
28586: LIST
28587: LIST
28588: LIST
28589: ST_TO_ADDR
28590: GO 29521
28592: LD_INT 11
28594: DOUBLE
28595: EQUAL
28596: IFTRUE 28600
28598: GO 28630
28600: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
28601: LD_ADDR_VAR 0 3
28605: PUSH
28606: LD_INT 1
28608: PUSH
28609: LD_INT 2
28611: PUSH
28612: LD_INT 3
28614: PUSH
28615: LD_INT 4
28617: PUSH
28618: LD_INT 5
28620: PUSH
28621: EMPTY
28622: LIST
28623: LIST
28624: LIST
28625: LIST
28626: LIST
28627: ST_TO_ADDR
28628: GO 29521
28630: LD_INT 4
28632: DOUBLE
28633: EQUAL
28634: IFTRUE 28638
28636: GO 28664
28638: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
28639: LD_ADDR_VAR 0 3
28643: PUSH
28644: LD_INT 2
28646: PUSH
28647: LD_INT 3
28649: PUSH
28650: LD_INT 4
28652: PUSH
28653: LD_INT 5
28655: PUSH
28656: EMPTY
28657: LIST
28658: LIST
28659: LIST
28660: LIST
28661: ST_TO_ADDR
28662: GO 29521
28664: LD_INT 5
28666: DOUBLE
28667: EQUAL
28668: IFTRUE 28672
28670: GO 28698
28672: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
28673: LD_ADDR_VAR 0 3
28677: PUSH
28678: LD_INT 2
28680: PUSH
28681: LD_INT 3
28683: PUSH
28684: LD_INT 4
28686: PUSH
28687: LD_INT 5
28689: PUSH
28690: EMPTY
28691: LIST
28692: LIST
28693: LIST
28694: LIST
28695: ST_TO_ADDR
28696: GO 29521
28698: LD_INT 9
28700: DOUBLE
28701: EQUAL
28702: IFTRUE 28706
28704: GO 28732
28706: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
28707: LD_ADDR_VAR 0 3
28711: PUSH
28712: LD_INT 2
28714: PUSH
28715: LD_INT 3
28717: PUSH
28718: LD_INT 4
28720: PUSH
28721: LD_INT 5
28723: PUSH
28724: EMPTY
28725: LIST
28726: LIST
28727: LIST
28728: LIST
28729: ST_TO_ADDR
28730: GO 29521
28732: LD_INT 7
28734: DOUBLE
28735: EQUAL
28736: IFTRUE 28740
28738: GO 28766
28740: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
28741: LD_ADDR_VAR 0 3
28745: PUSH
28746: LD_INT 2
28748: PUSH
28749: LD_INT 3
28751: PUSH
28752: LD_INT 4
28754: PUSH
28755: LD_INT 5
28757: PUSH
28758: EMPTY
28759: LIST
28760: LIST
28761: LIST
28762: LIST
28763: ST_TO_ADDR
28764: GO 29521
28766: LD_INT 12
28768: DOUBLE
28769: EQUAL
28770: IFTRUE 28774
28772: GO 28800
28774: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
28775: LD_ADDR_VAR 0 3
28779: PUSH
28780: LD_INT 2
28782: PUSH
28783: LD_INT 3
28785: PUSH
28786: LD_INT 4
28788: PUSH
28789: LD_INT 5
28791: PUSH
28792: EMPTY
28793: LIST
28794: LIST
28795: LIST
28796: LIST
28797: ST_TO_ADDR
28798: GO 29521
28800: LD_INT 13
28802: DOUBLE
28803: EQUAL
28804: IFTRUE 28808
28806: GO 28834
28808: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
28809: LD_ADDR_VAR 0 3
28813: PUSH
28814: LD_INT 2
28816: PUSH
28817: LD_INT 3
28819: PUSH
28820: LD_INT 4
28822: PUSH
28823: LD_INT 5
28825: PUSH
28826: EMPTY
28827: LIST
28828: LIST
28829: LIST
28830: LIST
28831: ST_TO_ADDR
28832: GO 29521
28834: LD_INT 14
28836: DOUBLE
28837: EQUAL
28838: IFTRUE 28842
28840: GO 28860
28842: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
28843: LD_ADDR_VAR 0 3
28847: PUSH
28848: LD_INT 4
28850: PUSH
28851: LD_INT 5
28853: PUSH
28854: EMPTY
28855: LIST
28856: LIST
28857: ST_TO_ADDR
28858: GO 29521
28860: LD_INT 6
28862: DOUBLE
28863: EQUAL
28864: IFTRUE 28868
28866: GO 28886
28868: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
28869: LD_ADDR_VAR 0 3
28873: PUSH
28874: LD_INT 4
28876: PUSH
28877: LD_INT 5
28879: PUSH
28880: EMPTY
28881: LIST
28882: LIST
28883: ST_TO_ADDR
28884: GO 29521
28886: LD_INT 10
28888: DOUBLE
28889: EQUAL
28890: IFTRUE 28894
28892: GO 28912
28894: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
28895: LD_ADDR_VAR 0 3
28899: PUSH
28900: LD_INT 4
28902: PUSH
28903: LD_INT 5
28905: PUSH
28906: EMPTY
28907: LIST
28908: LIST
28909: ST_TO_ADDR
28910: GO 29521
28912: LD_INT 22
28914: DOUBLE
28915: EQUAL
28916: IFTRUE 28920
28918: GO 28946
28920: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
28921: LD_ADDR_VAR 0 3
28925: PUSH
28926: LD_INT 11
28928: PUSH
28929: LD_INT 12
28931: PUSH
28932: LD_INT 13
28934: PUSH
28935: LD_INT 14
28937: PUSH
28938: EMPTY
28939: LIST
28940: LIST
28941: LIST
28942: LIST
28943: ST_TO_ADDR
28944: GO 29521
28946: LD_INT 23
28948: DOUBLE
28949: EQUAL
28950: IFTRUE 28954
28952: GO 28980
28954: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
28955: LD_ADDR_VAR 0 3
28959: PUSH
28960: LD_INT 11
28962: PUSH
28963: LD_INT 12
28965: PUSH
28966: LD_INT 13
28968: PUSH
28969: LD_INT 14
28971: PUSH
28972: EMPTY
28973: LIST
28974: LIST
28975: LIST
28976: LIST
28977: ST_TO_ADDR
28978: GO 29521
28980: LD_INT 24
28982: DOUBLE
28983: EQUAL
28984: IFTRUE 28988
28986: GO 29014
28988: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
28989: LD_ADDR_VAR 0 3
28993: PUSH
28994: LD_INT 11
28996: PUSH
28997: LD_INT 12
28999: PUSH
29000: LD_INT 13
29002: PUSH
29003: LD_INT 14
29005: PUSH
29006: EMPTY
29007: LIST
29008: LIST
29009: LIST
29010: LIST
29011: ST_TO_ADDR
29012: GO 29521
29014: LD_INT 30
29016: DOUBLE
29017: EQUAL
29018: IFTRUE 29022
29020: GO 29048
29022: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
29023: LD_ADDR_VAR 0 3
29027: PUSH
29028: LD_INT 11
29030: PUSH
29031: LD_INT 12
29033: PUSH
29034: LD_INT 13
29036: PUSH
29037: LD_INT 14
29039: PUSH
29040: EMPTY
29041: LIST
29042: LIST
29043: LIST
29044: LIST
29045: ST_TO_ADDR
29046: GO 29521
29048: LD_INT 25
29050: DOUBLE
29051: EQUAL
29052: IFTRUE 29056
29054: GO 29074
29056: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
29057: LD_ADDR_VAR 0 3
29061: PUSH
29062: LD_INT 13
29064: PUSH
29065: LD_INT 14
29067: PUSH
29068: EMPTY
29069: LIST
29070: LIST
29071: ST_TO_ADDR
29072: GO 29521
29074: LD_INT 27
29076: DOUBLE
29077: EQUAL
29078: IFTRUE 29082
29080: GO 29100
29082: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
29083: LD_ADDR_VAR 0 3
29087: PUSH
29088: LD_INT 13
29090: PUSH
29091: LD_INT 14
29093: PUSH
29094: EMPTY
29095: LIST
29096: LIST
29097: ST_TO_ADDR
29098: GO 29521
29100: LD_INT 28
29102: DOUBLE
29103: EQUAL
29104: IFTRUE 29108
29106: GO 29126
29108: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
29109: LD_ADDR_VAR 0 3
29113: PUSH
29114: LD_INT 13
29116: PUSH
29117: LD_INT 14
29119: PUSH
29120: EMPTY
29121: LIST
29122: LIST
29123: ST_TO_ADDR
29124: GO 29521
29126: LD_INT 29
29128: DOUBLE
29129: EQUAL
29130: IFTRUE 29134
29132: GO 29152
29134: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
29135: LD_ADDR_VAR 0 3
29139: PUSH
29140: LD_INT 13
29142: PUSH
29143: LD_INT 14
29145: PUSH
29146: EMPTY
29147: LIST
29148: LIST
29149: ST_TO_ADDR
29150: GO 29521
29152: LD_INT 31
29154: DOUBLE
29155: EQUAL
29156: IFTRUE 29160
29158: GO 29178
29160: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
29161: LD_ADDR_VAR 0 3
29165: PUSH
29166: LD_INT 13
29168: PUSH
29169: LD_INT 14
29171: PUSH
29172: EMPTY
29173: LIST
29174: LIST
29175: ST_TO_ADDR
29176: GO 29521
29178: LD_INT 26
29180: DOUBLE
29181: EQUAL
29182: IFTRUE 29186
29184: GO 29204
29186: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
29187: LD_ADDR_VAR 0 3
29191: PUSH
29192: LD_INT 13
29194: PUSH
29195: LD_INT 14
29197: PUSH
29198: EMPTY
29199: LIST
29200: LIST
29201: ST_TO_ADDR
29202: GO 29521
29204: LD_INT 42
29206: DOUBLE
29207: EQUAL
29208: IFTRUE 29212
29210: GO 29238
29212: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
29213: LD_ADDR_VAR 0 3
29217: PUSH
29218: LD_INT 21
29220: PUSH
29221: LD_INT 22
29223: PUSH
29224: LD_INT 23
29226: PUSH
29227: LD_INT 24
29229: PUSH
29230: EMPTY
29231: LIST
29232: LIST
29233: LIST
29234: LIST
29235: ST_TO_ADDR
29236: GO 29521
29238: LD_INT 43
29240: DOUBLE
29241: EQUAL
29242: IFTRUE 29246
29244: GO 29272
29246: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
29247: LD_ADDR_VAR 0 3
29251: PUSH
29252: LD_INT 21
29254: PUSH
29255: LD_INT 22
29257: PUSH
29258: LD_INT 23
29260: PUSH
29261: LD_INT 24
29263: PUSH
29264: EMPTY
29265: LIST
29266: LIST
29267: LIST
29268: LIST
29269: ST_TO_ADDR
29270: GO 29521
29272: LD_INT 44
29274: DOUBLE
29275: EQUAL
29276: IFTRUE 29280
29278: GO 29306
29280: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
29281: LD_ADDR_VAR 0 3
29285: PUSH
29286: LD_INT 21
29288: PUSH
29289: LD_INT 22
29291: PUSH
29292: LD_INT 23
29294: PUSH
29295: LD_INT 24
29297: PUSH
29298: EMPTY
29299: LIST
29300: LIST
29301: LIST
29302: LIST
29303: ST_TO_ADDR
29304: GO 29521
29306: LD_INT 45
29308: DOUBLE
29309: EQUAL
29310: IFTRUE 29314
29312: GO 29340
29314: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
29315: LD_ADDR_VAR 0 3
29319: PUSH
29320: LD_INT 21
29322: PUSH
29323: LD_INT 22
29325: PUSH
29326: LD_INT 23
29328: PUSH
29329: LD_INT 24
29331: PUSH
29332: EMPTY
29333: LIST
29334: LIST
29335: LIST
29336: LIST
29337: ST_TO_ADDR
29338: GO 29521
29340: LD_INT 49
29342: DOUBLE
29343: EQUAL
29344: IFTRUE 29348
29346: GO 29374
29348: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
29349: LD_ADDR_VAR 0 3
29353: PUSH
29354: LD_INT 21
29356: PUSH
29357: LD_INT 22
29359: PUSH
29360: LD_INT 23
29362: PUSH
29363: LD_INT 24
29365: PUSH
29366: EMPTY
29367: LIST
29368: LIST
29369: LIST
29370: LIST
29371: ST_TO_ADDR
29372: GO 29521
29374: LD_INT 51
29376: DOUBLE
29377: EQUAL
29378: IFTRUE 29382
29380: GO 29408
29382: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
29383: LD_ADDR_VAR 0 3
29387: PUSH
29388: LD_INT 21
29390: PUSH
29391: LD_INT 22
29393: PUSH
29394: LD_INT 23
29396: PUSH
29397: LD_INT 24
29399: PUSH
29400: EMPTY
29401: LIST
29402: LIST
29403: LIST
29404: LIST
29405: ST_TO_ADDR
29406: GO 29521
29408: LD_INT 52
29410: DOUBLE
29411: EQUAL
29412: IFTRUE 29416
29414: GO 29442
29416: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
29417: LD_ADDR_VAR 0 3
29421: PUSH
29422: LD_INT 21
29424: PUSH
29425: LD_INT 22
29427: PUSH
29428: LD_INT 23
29430: PUSH
29431: LD_INT 24
29433: PUSH
29434: EMPTY
29435: LIST
29436: LIST
29437: LIST
29438: LIST
29439: ST_TO_ADDR
29440: GO 29521
29442: LD_INT 53
29444: DOUBLE
29445: EQUAL
29446: IFTRUE 29450
29448: GO 29468
29450: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
29451: LD_ADDR_VAR 0 3
29455: PUSH
29456: LD_INT 23
29458: PUSH
29459: LD_INT 24
29461: PUSH
29462: EMPTY
29463: LIST
29464: LIST
29465: ST_TO_ADDR
29466: GO 29521
29468: LD_INT 46
29470: DOUBLE
29471: EQUAL
29472: IFTRUE 29476
29474: GO 29494
29476: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
29477: LD_ADDR_VAR 0 3
29481: PUSH
29482: LD_INT 23
29484: PUSH
29485: LD_INT 24
29487: PUSH
29488: EMPTY
29489: LIST
29490: LIST
29491: ST_TO_ADDR
29492: GO 29521
29494: LD_INT 47
29496: DOUBLE
29497: EQUAL
29498: IFTRUE 29502
29500: GO 29520
29502: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
29503: LD_ADDR_VAR 0 3
29507: PUSH
29508: LD_INT 23
29510: PUSH
29511: LD_INT 24
29513: PUSH
29514: EMPTY
29515: LIST
29516: LIST
29517: ST_TO_ADDR
29518: GO 29521
29520: POP
// result := ( chassis in result ) ;
29521: LD_ADDR_VAR 0 3
29525: PUSH
29526: LD_VAR 0 1
29530: PUSH
29531: LD_VAR 0 3
29535: IN
29536: ST_TO_ADDR
// end ;
29537: LD_VAR 0 3
29541: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
29542: LD_INT 0
29544: PPUSH
29545: PPUSH
29546: PPUSH
29547: PPUSH
29548: PPUSH
29549: PPUSH
29550: PPUSH
// result := array ;
29551: LD_ADDR_VAR 0 5
29555: PUSH
29556: LD_VAR 0 1
29560: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
29561: LD_VAR 0 1
29565: NOT
29566: PUSH
29567: LD_VAR 0 2
29571: NOT
29572: OR
29573: PUSH
29574: LD_VAR 0 3
29578: NOT
29579: OR
29580: PUSH
29581: LD_VAR 0 2
29585: PUSH
29586: LD_VAR 0 1
29590: GREATER
29591: OR
29592: PUSH
29593: LD_VAR 0 3
29597: PUSH
29598: LD_VAR 0 1
29602: GREATER
29603: OR
29604: IFFALSE 29608
// exit ;
29606: GO 29904
// if direction then
29608: LD_VAR 0 4
29612: IFFALSE 29676
// begin d := 1 ;
29614: LD_ADDR_VAR 0 9
29618: PUSH
29619: LD_INT 1
29621: ST_TO_ADDR
// if i_from > i_to then
29622: LD_VAR 0 2
29626: PUSH
29627: LD_VAR 0 3
29631: GREATER
29632: IFFALSE 29658
// length := ( array - i_from ) + i_to else
29634: LD_ADDR_VAR 0 11
29638: PUSH
29639: LD_VAR 0 1
29643: PUSH
29644: LD_VAR 0 2
29648: MINUS
29649: PUSH
29650: LD_VAR 0 3
29654: PLUS
29655: ST_TO_ADDR
29656: GO 29674
// length := i_to - i_from ;
29658: LD_ADDR_VAR 0 11
29662: PUSH
29663: LD_VAR 0 3
29667: PUSH
29668: LD_VAR 0 2
29672: MINUS
29673: ST_TO_ADDR
// end else
29674: GO 29737
// begin d := - 1 ;
29676: LD_ADDR_VAR 0 9
29680: PUSH
29681: LD_INT 1
29683: NEG
29684: ST_TO_ADDR
// if i_from > i_to then
29685: LD_VAR 0 2
29689: PUSH
29690: LD_VAR 0 3
29694: GREATER
29695: IFFALSE 29715
// length := i_from - i_to else
29697: LD_ADDR_VAR 0 11
29701: PUSH
29702: LD_VAR 0 2
29706: PUSH
29707: LD_VAR 0 3
29711: MINUS
29712: ST_TO_ADDR
29713: GO 29737
// length := ( array - i_to ) + i_from ;
29715: LD_ADDR_VAR 0 11
29719: PUSH
29720: LD_VAR 0 1
29724: PUSH
29725: LD_VAR 0 3
29729: MINUS
29730: PUSH
29731: LD_VAR 0 2
29735: PLUS
29736: ST_TO_ADDR
// end ; if not length then
29737: LD_VAR 0 11
29741: NOT
29742: IFFALSE 29746
// exit ;
29744: GO 29904
// tmp := array ;
29746: LD_ADDR_VAR 0 10
29750: PUSH
29751: LD_VAR 0 1
29755: ST_TO_ADDR
// for i = 1 to length do
29756: LD_ADDR_VAR 0 6
29760: PUSH
29761: DOUBLE
29762: LD_INT 1
29764: DEC
29765: ST_TO_ADDR
29766: LD_VAR 0 11
29770: PUSH
29771: FOR_TO
29772: IFFALSE 29892
// begin for j = 1 to array do
29774: LD_ADDR_VAR 0 7
29778: PUSH
29779: DOUBLE
29780: LD_INT 1
29782: DEC
29783: ST_TO_ADDR
29784: LD_VAR 0 1
29788: PUSH
29789: FOR_TO
29790: IFFALSE 29878
// begin k := j + d ;
29792: LD_ADDR_VAR 0 8
29796: PUSH
29797: LD_VAR 0 7
29801: PUSH
29802: LD_VAR 0 9
29806: PLUS
29807: ST_TO_ADDR
// if k > array then
29808: LD_VAR 0 8
29812: PUSH
29813: LD_VAR 0 1
29817: GREATER
29818: IFFALSE 29828
// k := 1 ;
29820: LD_ADDR_VAR 0 8
29824: PUSH
29825: LD_INT 1
29827: ST_TO_ADDR
// if not k then
29828: LD_VAR 0 8
29832: NOT
29833: IFFALSE 29845
// k := array ;
29835: LD_ADDR_VAR 0 8
29839: PUSH
29840: LD_VAR 0 1
29844: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
29845: LD_ADDR_VAR 0 10
29849: PUSH
29850: LD_VAR 0 10
29854: PPUSH
29855: LD_VAR 0 8
29859: PPUSH
29860: LD_VAR 0 1
29864: PUSH
29865: LD_VAR 0 7
29869: ARRAY
29870: PPUSH
29871: CALL_OW 1
29875: ST_TO_ADDR
// end ;
29876: GO 29789
29878: POP
29879: POP
// array := tmp ;
29880: LD_ADDR_VAR 0 1
29884: PUSH
29885: LD_VAR 0 10
29889: ST_TO_ADDR
// end ;
29890: GO 29771
29892: POP
29893: POP
// result := array ;
29894: LD_ADDR_VAR 0 5
29898: PUSH
29899: LD_VAR 0 1
29903: ST_TO_ADDR
// end ;
29904: LD_VAR 0 5
29908: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
29909: LD_INT 0
29911: PPUSH
29912: PPUSH
// result := 0 ;
29913: LD_ADDR_VAR 0 3
29917: PUSH
29918: LD_INT 0
29920: ST_TO_ADDR
// if not array or not value in array then
29921: LD_VAR 0 1
29925: NOT
29926: PUSH
29927: LD_VAR 0 2
29931: PUSH
29932: LD_VAR 0 1
29936: IN
29937: NOT
29938: OR
29939: IFFALSE 29943
// exit ;
29941: GO 29997
// for i = 1 to array do
29943: LD_ADDR_VAR 0 4
29947: PUSH
29948: DOUBLE
29949: LD_INT 1
29951: DEC
29952: ST_TO_ADDR
29953: LD_VAR 0 1
29957: PUSH
29958: FOR_TO
29959: IFFALSE 29995
// if value = array [ i ] then
29961: LD_VAR 0 2
29965: PUSH
29966: LD_VAR 0 1
29970: PUSH
29971: LD_VAR 0 4
29975: ARRAY
29976: EQUAL
29977: IFFALSE 29993
// begin result := i ;
29979: LD_ADDR_VAR 0 3
29983: PUSH
29984: LD_VAR 0 4
29988: ST_TO_ADDR
// exit ;
29989: POP
29990: POP
29991: GO 29997
// end ;
29993: GO 29958
29995: POP
29996: POP
// end ;
29997: LD_VAR 0 3
30001: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
30002: LD_INT 0
30004: PPUSH
// vc_chassis := chassis ;
30005: LD_ADDR_OWVAR 37
30009: PUSH
30010: LD_VAR 0 1
30014: ST_TO_ADDR
// vc_engine := engine ;
30015: LD_ADDR_OWVAR 39
30019: PUSH
30020: LD_VAR 0 2
30024: ST_TO_ADDR
// vc_control := control ;
30025: LD_ADDR_OWVAR 38
30029: PUSH
30030: LD_VAR 0 3
30034: ST_TO_ADDR
// vc_weapon := weapon ;
30035: LD_ADDR_OWVAR 40
30039: PUSH
30040: LD_VAR 0 4
30044: ST_TO_ADDR
// vc_fuel_battery := fuel ;
30045: LD_ADDR_OWVAR 41
30049: PUSH
30050: LD_VAR 0 5
30054: ST_TO_ADDR
// end ;
30055: LD_VAR 0 6
30059: RET
// export function WantPlant ( unit ) ; var task ; begin
30060: LD_INT 0
30062: PPUSH
30063: PPUSH
// result := false ;
30064: LD_ADDR_VAR 0 2
30068: PUSH
30069: LD_INT 0
30071: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
30072: LD_ADDR_VAR 0 3
30076: PUSH
30077: LD_VAR 0 1
30081: PPUSH
30082: CALL_OW 437
30086: ST_TO_ADDR
// if task then
30087: LD_VAR 0 3
30091: IFFALSE 30119
// if task [ 1 ] [ 1 ] = p then
30093: LD_VAR 0 3
30097: PUSH
30098: LD_INT 1
30100: ARRAY
30101: PUSH
30102: LD_INT 1
30104: ARRAY
30105: PUSH
30106: LD_STRING p
30108: EQUAL
30109: IFFALSE 30119
// result := true ;
30111: LD_ADDR_VAR 0 2
30115: PUSH
30116: LD_INT 1
30118: ST_TO_ADDR
// end ;
30119: LD_VAR 0 2
30123: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
30124: LD_INT 0
30126: PPUSH
30127: PPUSH
30128: PPUSH
30129: PPUSH
// if pos < 1 then
30130: LD_VAR 0 2
30134: PUSH
30135: LD_INT 1
30137: LESS
30138: IFFALSE 30142
// exit ;
30140: GO 30445
// if pos = 1 then
30142: LD_VAR 0 2
30146: PUSH
30147: LD_INT 1
30149: EQUAL
30150: IFFALSE 30183
// result := Replace ( arr , pos [ 1 ] , value ) else
30152: LD_ADDR_VAR 0 4
30156: PUSH
30157: LD_VAR 0 1
30161: PPUSH
30162: LD_VAR 0 2
30166: PUSH
30167: LD_INT 1
30169: ARRAY
30170: PPUSH
30171: LD_VAR 0 3
30175: PPUSH
30176: CALL_OW 1
30180: ST_TO_ADDR
30181: GO 30445
// begin tmp := arr ;
30183: LD_ADDR_VAR 0 6
30187: PUSH
30188: LD_VAR 0 1
30192: ST_TO_ADDR
// s_arr := [ tmp ] ;
30193: LD_ADDR_VAR 0 7
30197: PUSH
30198: LD_VAR 0 6
30202: PUSH
30203: EMPTY
30204: LIST
30205: ST_TO_ADDR
// for i = 1 to pos - 1 do
30206: LD_ADDR_VAR 0 5
30210: PUSH
30211: DOUBLE
30212: LD_INT 1
30214: DEC
30215: ST_TO_ADDR
30216: LD_VAR 0 2
30220: PUSH
30221: LD_INT 1
30223: MINUS
30224: PUSH
30225: FOR_TO
30226: IFFALSE 30271
// begin tmp := tmp [ pos [ i ] ] ;
30228: LD_ADDR_VAR 0 6
30232: PUSH
30233: LD_VAR 0 6
30237: PUSH
30238: LD_VAR 0 2
30242: PUSH
30243: LD_VAR 0 5
30247: ARRAY
30248: ARRAY
30249: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
30250: LD_ADDR_VAR 0 7
30254: PUSH
30255: LD_VAR 0 7
30259: PUSH
30260: LD_VAR 0 6
30264: PUSH
30265: EMPTY
30266: LIST
30267: ADD
30268: ST_TO_ADDR
// end ;
30269: GO 30225
30271: POP
30272: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
30273: LD_ADDR_VAR 0 6
30277: PUSH
30278: LD_VAR 0 6
30282: PPUSH
30283: LD_VAR 0 2
30287: PUSH
30288: LD_VAR 0 2
30292: ARRAY
30293: PPUSH
30294: LD_VAR 0 3
30298: PPUSH
30299: CALL_OW 1
30303: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
30304: LD_ADDR_VAR 0 7
30308: PUSH
30309: LD_VAR 0 7
30313: PPUSH
30314: LD_VAR 0 7
30318: PPUSH
30319: LD_VAR 0 6
30323: PPUSH
30324: CALL_OW 1
30328: ST_TO_ADDR
// for i = s_arr downto 2 do
30329: LD_ADDR_VAR 0 5
30333: PUSH
30334: DOUBLE
30335: LD_VAR 0 7
30339: INC
30340: ST_TO_ADDR
30341: LD_INT 2
30343: PUSH
30344: FOR_DOWNTO
30345: IFFALSE 30429
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
30347: LD_ADDR_VAR 0 6
30351: PUSH
30352: LD_VAR 0 7
30356: PUSH
30357: LD_VAR 0 5
30361: PUSH
30362: LD_INT 1
30364: MINUS
30365: ARRAY
30366: PPUSH
30367: LD_VAR 0 2
30371: PUSH
30372: LD_VAR 0 5
30376: PUSH
30377: LD_INT 1
30379: MINUS
30380: ARRAY
30381: PPUSH
30382: LD_VAR 0 7
30386: PUSH
30387: LD_VAR 0 5
30391: ARRAY
30392: PPUSH
30393: CALL_OW 1
30397: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
30398: LD_ADDR_VAR 0 7
30402: PUSH
30403: LD_VAR 0 7
30407: PPUSH
30408: LD_VAR 0 5
30412: PUSH
30413: LD_INT 1
30415: MINUS
30416: PPUSH
30417: LD_VAR 0 6
30421: PPUSH
30422: CALL_OW 1
30426: ST_TO_ADDR
// end ;
30427: GO 30344
30429: POP
30430: POP
// result := s_arr [ 1 ] ;
30431: LD_ADDR_VAR 0 4
30435: PUSH
30436: LD_VAR 0 7
30440: PUSH
30441: LD_INT 1
30443: ARRAY
30444: ST_TO_ADDR
// end ; end ;
30445: LD_VAR 0 4
30449: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
30450: LD_INT 0
30452: PPUSH
30453: PPUSH
// if not list then
30454: LD_VAR 0 1
30458: NOT
30459: IFFALSE 30463
// exit ;
30461: GO 30554
// i := list [ pos1 ] ;
30463: LD_ADDR_VAR 0 5
30467: PUSH
30468: LD_VAR 0 1
30472: PUSH
30473: LD_VAR 0 2
30477: ARRAY
30478: ST_TO_ADDR
// if not i then
30479: LD_VAR 0 5
30483: NOT
30484: IFFALSE 30488
// exit ;
30486: GO 30554
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
30488: LD_ADDR_VAR 0 1
30492: PUSH
30493: LD_VAR 0 1
30497: PPUSH
30498: LD_VAR 0 2
30502: PPUSH
30503: LD_VAR 0 1
30507: PUSH
30508: LD_VAR 0 3
30512: ARRAY
30513: PPUSH
30514: CALL_OW 1
30518: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
30519: LD_ADDR_VAR 0 1
30523: PUSH
30524: LD_VAR 0 1
30528: PPUSH
30529: LD_VAR 0 3
30533: PPUSH
30534: LD_VAR 0 5
30538: PPUSH
30539: CALL_OW 1
30543: ST_TO_ADDR
// result := list ;
30544: LD_ADDR_VAR 0 4
30548: PUSH
30549: LD_VAR 0 1
30553: ST_TO_ADDR
// end ;
30554: LD_VAR 0 4
30558: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
30559: LD_INT 0
30561: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
30562: LD_ADDR_VAR 0 5
30566: PUSH
30567: LD_VAR 0 1
30571: PPUSH
30572: CALL_OW 250
30576: PPUSH
30577: LD_VAR 0 1
30581: PPUSH
30582: CALL_OW 251
30586: PPUSH
30587: LD_VAR 0 2
30591: PPUSH
30592: LD_VAR 0 3
30596: PPUSH
30597: LD_VAR 0 4
30601: PPUSH
30602: CALL 30612 0 5
30606: ST_TO_ADDR
// end ;
30607: LD_VAR 0 5
30611: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
30612: LD_INT 0
30614: PPUSH
30615: PPUSH
30616: PPUSH
30617: PPUSH
// if not list then
30618: LD_VAR 0 3
30622: NOT
30623: IFFALSE 30627
// exit ;
30625: GO 31015
// result := [ ] ;
30627: LD_ADDR_VAR 0 6
30631: PUSH
30632: EMPTY
30633: ST_TO_ADDR
// for i in list do
30634: LD_ADDR_VAR 0 7
30638: PUSH
30639: LD_VAR 0 3
30643: PUSH
30644: FOR_IN
30645: IFFALSE 30847
// begin tmp := GetDistUnitXY ( i , x , y ) ;
30647: LD_ADDR_VAR 0 9
30651: PUSH
30652: LD_VAR 0 7
30656: PPUSH
30657: LD_VAR 0 1
30661: PPUSH
30662: LD_VAR 0 2
30666: PPUSH
30667: CALL_OW 297
30671: ST_TO_ADDR
// if not result then
30672: LD_VAR 0 6
30676: NOT
30677: IFFALSE 30703
// result := [ [ i , tmp ] ] else
30679: LD_ADDR_VAR 0 6
30683: PUSH
30684: LD_VAR 0 7
30688: PUSH
30689: LD_VAR 0 9
30693: PUSH
30694: EMPTY
30695: LIST
30696: LIST
30697: PUSH
30698: EMPTY
30699: LIST
30700: ST_TO_ADDR
30701: GO 30845
// begin if result [ result ] [ 2 ] < tmp then
30703: LD_VAR 0 6
30707: PUSH
30708: LD_VAR 0 6
30712: ARRAY
30713: PUSH
30714: LD_INT 2
30716: ARRAY
30717: PUSH
30718: LD_VAR 0 9
30722: LESS
30723: IFFALSE 30765
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
30725: LD_ADDR_VAR 0 6
30729: PUSH
30730: LD_VAR 0 6
30734: PPUSH
30735: LD_VAR 0 6
30739: PUSH
30740: LD_INT 1
30742: PLUS
30743: PPUSH
30744: LD_VAR 0 7
30748: PUSH
30749: LD_VAR 0 9
30753: PUSH
30754: EMPTY
30755: LIST
30756: LIST
30757: PPUSH
30758: CALL_OW 2
30762: ST_TO_ADDR
30763: GO 30845
// for j = 1 to result do
30765: LD_ADDR_VAR 0 8
30769: PUSH
30770: DOUBLE
30771: LD_INT 1
30773: DEC
30774: ST_TO_ADDR
30775: LD_VAR 0 6
30779: PUSH
30780: FOR_TO
30781: IFFALSE 30843
// begin if tmp < result [ j ] [ 2 ] then
30783: LD_VAR 0 9
30787: PUSH
30788: LD_VAR 0 6
30792: PUSH
30793: LD_VAR 0 8
30797: ARRAY
30798: PUSH
30799: LD_INT 2
30801: ARRAY
30802: LESS
30803: IFFALSE 30841
// begin result := Insert ( result , j , [ i , tmp ] ) ;
30805: LD_ADDR_VAR 0 6
30809: PUSH
30810: LD_VAR 0 6
30814: PPUSH
30815: LD_VAR 0 8
30819: PPUSH
30820: LD_VAR 0 7
30824: PUSH
30825: LD_VAR 0 9
30829: PUSH
30830: EMPTY
30831: LIST
30832: LIST
30833: PPUSH
30834: CALL_OW 2
30838: ST_TO_ADDR
// break ;
30839: GO 30843
// end ; end ;
30841: GO 30780
30843: POP
30844: POP
// end ; end ;
30845: GO 30644
30847: POP
30848: POP
// if result and not asc then
30849: LD_VAR 0 6
30853: PUSH
30854: LD_VAR 0 4
30858: NOT
30859: AND
30860: IFFALSE 30935
// begin tmp := result ;
30862: LD_ADDR_VAR 0 9
30866: PUSH
30867: LD_VAR 0 6
30871: ST_TO_ADDR
// for i = tmp downto 1 do
30872: LD_ADDR_VAR 0 7
30876: PUSH
30877: DOUBLE
30878: LD_VAR 0 9
30882: INC
30883: ST_TO_ADDR
30884: LD_INT 1
30886: PUSH
30887: FOR_DOWNTO
30888: IFFALSE 30933
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
30890: LD_ADDR_VAR 0 6
30894: PUSH
30895: LD_VAR 0 6
30899: PPUSH
30900: LD_VAR 0 9
30904: PUSH
30905: LD_VAR 0 7
30909: MINUS
30910: PUSH
30911: LD_INT 1
30913: PLUS
30914: PPUSH
30915: LD_VAR 0 9
30919: PUSH
30920: LD_VAR 0 7
30924: ARRAY
30925: PPUSH
30926: CALL_OW 1
30930: ST_TO_ADDR
30931: GO 30887
30933: POP
30934: POP
// end ; tmp := [ ] ;
30935: LD_ADDR_VAR 0 9
30939: PUSH
30940: EMPTY
30941: ST_TO_ADDR
// if mode then
30942: LD_VAR 0 5
30946: IFFALSE 31015
// begin for i = 1 to result do
30948: LD_ADDR_VAR 0 7
30952: PUSH
30953: DOUBLE
30954: LD_INT 1
30956: DEC
30957: ST_TO_ADDR
30958: LD_VAR 0 6
30962: PUSH
30963: FOR_TO
30964: IFFALSE 31003
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
30966: LD_ADDR_VAR 0 9
30970: PUSH
30971: LD_VAR 0 9
30975: PPUSH
30976: LD_VAR 0 7
30980: PPUSH
30981: LD_VAR 0 6
30985: PUSH
30986: LD_VAR 0 7
30990: ARRAY
30991: PUSH
30992: LD_INT 1
30994: ARRAY
30995: PPUSH
30996: CALL_OW 1
31000: ST_TO_ADDR
31001: GO 30963
31003: POP
31004: POP
// result := tmp ;
31005: LD_ADDR_VAR 0 6
31009: PUSH
31010: LD_VAR 0 9
31014: ST_TO_ADDR
// end ; end ;
31015: LD_VAR 0 6
31019: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
31020: LD_INT 0
31022: PPUSH
31023: PPUSH
31024: PPUSH
31025: PPUSH
31026: PPUSH
31027: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
31028: LD_ADDR_VAR 0 5
31032: PUSH
31033: LD_INT 0
31035: PUSH
31036: LD_INT 0
31038: PUSH
31039: LD_INT 0
31041: PUSH
31042: EMPTY
31043: PUSH
31044: EMPTY
31045: LIST
31046: LIST
31047: LIST
31048: LIST
31049: ST_TO_ADDR
// if not x or not y then
31050: LD_VAR 0 2
31054: NOT
31055: PUSH
31056: LD_VAR 0 3
31060: NOT
31061: OR
31062: IFFALSE 31066
// exit ;
31064: GO 32712
// if not range then
31066: LD_VAR 0 4
31070: NOT
31071: IFFALSE 31081
// range := 10 ;
31073: LD_ADDR_VAR 0 4
31077: PUSH
31078: LD_INT 10
31080: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
31081: LD_ADDR_VAR 0 8
31085: PUSH
31086: LD_INT 81
31088: PUSH
31089: LD_VAR 0 1
31093: PUSH
31094: EMPTY
31095: LIST
31096: LIST
31097: PUSH
31098: LD_INT 92
31100: PUSH
31101: LD_VAR 0 2
31105: PUSH
31106: LD_VAR 0 3
31110: PUSH
31111: LD_VAR 0 4
31115: PUSH
31116: EMPTY
31117: LIST
31118: LIST
31119: LIST
31120: LIST
31121: PUSH
31122: LD_INT 3
31124: PUSH
31125: LD_INT 21
31127: PUSH
31128: LD_INT 3
31130: PUSH
31131: EMPTY
31132: LIST
31133: LIST
31134: PUSH
31135: EMPTY
31136: LIST
31137: LIST
31138: PUSH
31139: EMPTY
31140: LIST
31141: LIST
31142: LIST
31143: PPUSH
31144: CALL_OW 69
31148: ST_TO_ADDR
// if not tmp then
31149: LD_VAR 0 8
31153: NOT
31154: IFFALSE 31158
// exit ;
31156: GO 32712
// for i in tmp do
31158: LD_ADDR_VAR 0 6
31162: PUSH
31163: LD_VAR 0 8
31167: PUSH
31168: FOR_IN
31169: IFFALSE 32687
// begin points := [ 0 , 0 , 0 ] ;
31171: LD_ADDR_VAR 0 9
31175: PUSH
31176: LD_INT 0
31178: PUSH
31179: LD_INT 0
31181: PUSH
31182: LD_INT 0
31184: PUSH
31185: EMPTY
31186: LIST
31187: LIST
31188: LIST
31189: ST_TO_ADDR
// bpoints := 1 ;
31190: LD_ADDR_VAR 0 10
31194: PUSH
31195: LD_INT 1
31197: ST_TO_ADDR
// case GetType ( i ) of unit_human :
31198: LD_VAR 0 6
31202: PPUSH
31203: CALL_OW 247
31207: PUSH
31208: LD_INT 1
31210: DOUBLE
31211: EQUAL
31212: IFTRUE 31216
31214: GO 31794
31216: POP
// begin if GetClass ( i ) = 1 then
31217: LD_VAR 0 6
31221: PPUSH
31222: CALL_OW 257
31226: PUSH
31227: LD_INT 1
31229: EQUAL
31230: IFFALSE 31251
// points := [ 10 , 5 , 3 ] ;
31232: LD_ADDR_VAR 0 9
31236: PUSH
31237: LD_INT 10
31239: PUSH
31240: LD_INT 5
31242: PUSH
31243: LD_INT 3
31245: PUSH
31246: EMPTY
31247: LIST
31248: LIST
31249: LIST
31250: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
31251: LD_VAR 0 6
31255: PPUSH
31256: CALL_OW 257
31260: PUSH
31261: LD_INT 2
31263: PUSH
31264: LD_INT 3
31266: PUSH
31267: LD_INT 4
31269: PUSH
31270: EMPTY
31271: LIST
31272: LIST
31273: LIST
31274: IN
31275: IFFALSE 31296
// points := [ 3 , 2 , 1 ] ;
31277: LD_ADDR_VAR 0 9
31281: PUSH
31282: LD_INT 3
31284: PUSH
31285: LD_INT 2
31287: PUSH
31288: LD_INT 1
31290: PUSH
31291: EMPTY
31292: LIST
31293: LIST
31294: LIST
31295: ST_TO_ADDR
// if GetClass ( i ) = 5 then
31296: LD_VAR 0 6
31300: PPUSH
31301: CALL_OW 257
31305: PUSH
31306: LD_INT 5
31308: EQUAL
31309: IFFALSE 31330
// points := [ 130 , 5 , 2 ] ;
31311: LD_ADDR_VAR 0 9
31315: PUSH
31316: LD_INT 130
31318: PUSH
31319: LD_INT 5
31321: PUSH
31322: LD_INT 2
31324: PUSH
31325: EMPTY
31326: LIST
31327: LIST
31328: LIST
31329: ST_TO_ADDR
// if GetClass ( i ) = 8 then
31330: LD_VAR 0 6
31334: PPUSH
31335: CALL_OW 257
31339: PUSH
31340: LD_INT 8
31342: EQUAL
31343: IFFALSE 31364
// points := [ 35 , 35 , 30 ] ;
31345: LD_ADDR_VAR 0 9
31349: PUSH
31350: LD_INT 35
31352: PUSH
31353: LD_INT 35
31355: PUSH
31356: LD_INT 30
31358: PUSH
31359: EMPTY
31360: LIST
31361: LIST
31362: LIST
31363: ST_TO_ADDR
// if GetClass ( i ) = 9 then
31364: LD_VAR 0 6
31368: PPUSH
31369: CALL_OW 257
31373: PUSH
31374: LD_INT 9
31376: EQUAL
31377: IFFALSE 31398
// points := [ 20 , 55 , 40 ] ;
31379: LD_ADDR_VAR 0 9
31383: PUSH
31384: LD_INT 20
31386: PUSH
31387: LD_INT 55
31389: PUSH
31390: LD_INT 40
31392: PUSH
31393: EMPTY
31394: LIST
31395: LIST
31396: LIST
31397: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
31398: LD_VAR 0 6
31402: PPUSH
31403: CALL_OW 257
31407: PUSH
31408: LD_INT 12
31410: PUSH
31411: LD_INT 16
31413: PUSH
31414: EMPTY
31415: LIST
31416: LIST
31417: IN
31418: IFFALSE 31439
// points := [ 5 , 3 , 2 ] ;
31420: LD_ADDR_VAR 0 9
31424: PUSH
31425: LD_INT 5
31427: PUSH
31428: LD_INT 3
31430: PUSH
31431: LD_INT 2
31433: PUSH
31434: EMPTY
31435: LIST
31436: LIST
31437: LIST
31438: ST_TO_ADDR
// if GetClass ( i ) = 17 then
31439: LD_VAR 0 6
31443: PPUSH
31444: CALL_OW 257
31448: PUSH
31449: LD_INT 17
31451: EQUAL
31452: IFFALSE 31473
// points := [ 100 , 50 , 75 ] ;
31454: LD_ADDR_VAR 0 9
31458: PUSH
31459: LD_INT 100
31461: PUSH
31462: LD_INT 50
31464: PUSH
31465: LD_INT 75
31467: PUSH
31468: EMPTY
31469: LIST
31470: LIST
31471: LIST
31472: ST_TO_ADDR
// if GetClass ( i ) = 15 then
31473: LD_VAR 0 6
31477: PPUSH
31478: CALL_OW 257
31482: PUSH
31483: LD_INT 15
31485: EQUAL
31486: IFFALSE 31507
// points := [ 10 , 5 , 3 ] ;
31488: LD_ADDR_VAR 0 9
31492: PUSH
31493: LD_INT 10
31495: PUSH
31496: LD_INT 5
31498: PUSH
31499: LD_INT 3
31501: PUSH
31502: EMPTY
31503: LIST
31504: LIST
31505: LIST
31506: ST_TO_ADDR
// if GetClass ( i ) = 14 then
31507: LD_VAR 0 6
31511: PPUSH
31512: CALL_OW 257
31516: PUSH
31517: LD_INT 14
31519: EQUAL
31520: IFFALSE 31541
// points := [ 10 , 0 , 0 ] ;
31522: LD_ADDR_VAR 0 9
31526: PUSH
31527: LD_INT 10
31529: PUSH
31530: LD_INT 0
31532: PUSH
31533: LD_INT 0
31535: PUSH
31536: EMPTY
31537: LIST
31538: LIST
31539: LIST
31540: ST_TO_ADDR
// if GetClass ( i ) = 11 then
31541: LD_VAR 0 6
31545: PPUSH
31546: CALL_OW 257
31550: PUSH
31551: LD_INT 11
31553: EQUAL
31554: IFFALSE 31575
// points := [ 30 , 10 , 5 ] ;
31556: LD_ADDR_VAR 0 9
31560: PUSH
31561: LD_INT 30
31563: PUSH
31564: LD_INT 10
31566: PUSH
31567: LD_INT 5
31569: PUSH
31570: EMPTY
31571: LIST
31572: LIST
31573: LIST
31574: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
31575: LD_VAR 0 1
31579: PPUSH
31580: LD_INT 5
31582: PPUSH
31583: CALL_OW 321
31587: PUSH
31588: LD_INT 2
31590: EQUAL
31591: IFFALSE 31608
// bpoints := bpoints * 1.8 ;
31593: LD_ADDR_VAR 0 10
31597: PUSH
31598: LD_VAR 0 10
31602: PUSH
31603: LD_REAL  1.80000000000000E+0000
31606: MUL
31607: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
31608: LD_VAR 0 6
31612: PPUSH
31613: CALL_OW 257
31617: PUSH
31618: LD_INT 1
31620: PUSH
31621: LD_INT 2
31623: PUSH
31624: LD_INT 3
31626: PUSH
31627: LD_INT 4
31629: PUSH
31630: EMPTY
31631: LIST
31632: LIST
31633: LIST
31634: LIST
31635: IN
31636: PUSH
31637: LD_VAR 0 1
31641: PPUSH
31642: LD_INT 51
31644: PPUSH
31645: CALL_OW 321
31649: PUSH
31650: LD_INT 2
31652: EQUAL
31653: AND
31654: IFFALSE 31671
// bpoints := bpoints * 1.2 ;
31656: LD_ADDR_VAR 0 10
31660: PUSH
31661: LD_VAR 0 10
31665: PUSH
31666: LD_REAL  1.20000000000000E+0000
31669: MUL
31670: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
31671: LD_VAR 0 6
31675: PPUSH
31676: CALL_OW 257
31680: PUSH
31681: LD_INT 5
31683: PUSH
31684: LD_INT 7
31686: PUSH
31687: LD_INT 9
31689: PUSH
31690: EMPTY
31691: LIST
31692: LIST
31693: LIST
31694: IN
31695: PUSH
31696: LD_VAR 0 1
31700: PPUSH
31701: LD_INT 52
31703: PPUSH
31704: CALL_OW 321
31708: PUSH
31709: LD_INT 2
31711: EQUAL
31712: AND
31713: IFFALSE 31730
// bpoints := bpoints * 1.5 ;
31715: LD_ADDR_VAR 0 10
31719: PUSH
31720: LD_VAR 0 10
31724: PUSH
31725: LD_REAL  1.50000000000000E+0000
31728: MUL
31729: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
31730: LD_VAR 0 1
31734: PPUSH
31735: LD_INT 66
31737: PPUSH
31738: CALL_OW 321
31742: PUSH
31743: LD_INT 2
31745: EQUAL
31746: IFFALSE 31763
// bpoints := bpoints * 1.1 ;
31748: LD_ADDR_VAR 0 10
31752: PUSH
31753: LD_VAR 0 10
31757: PUSH
31758: LD_REAL  1.10000000000000E+0000
31761: MUL
31762: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
31763: LD_ADDR_VAR 0 10
31767: PUSH
31768: LD_VAR 0 10
31772: PUSH
31773: LD_VAR 0 6
31777: PPUSH
31778: LD_INT 1
31780: PPUSH
31781: CALL_OW 259
31785: PUSH
31786: LD_REAL  1.15000000000000E+0000
31789: MUL
31790: MUL
31791: ST_TO_ADDR
// end ; unit_vehicle :
31792: GO 32616
31794: LD_INT 2
31796: DOUBLE
31797: EQUAL
31798: IFTRUE 31802
31800: GO 32604
31802: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
31803: LD_VAR 0 6
31807: PPUSH
31808: CALL_OW 264
31812: PUSH
31813: LD_INT 2
31815: PUSH
31816: LD_INT 42
31818: PUSH
31819: LD_INT 24
31821: PUSH
31822: EMPTY
31823: LIST
31824: LIST
31825: LIST
31826: IN
31827: IFFALSE 31848
// points := [ 25 , 5 , 3 ] ;
31829: LD_ADDR_VAR 0 9
31833: PUSH
31834: LD_INT 25
31836: PUSH
31837: LD_INT 5
31839: PUSH
31840: LD_INT 3
31842: PUSH
31843: EMPTY
31844: LIST
31845: LIST
31846: LIST
31847: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
31848: LD_VAR 0 6
31852: PPUSH
31853: CALL_OW 264
31857: PUSH
31858: LD_INT 4
31860: PUSH
31861: LD_INT 43
31863: PUSH
31864: LD_INT 25
31866: PUSH
31867: EMPTY
31868: LIST
31869: LIST
31870: LIST
31871: IN
31872: IFFALSE 31893
// points := [ 40 , 15 , 5 ] ;
31874: LD_ADDR_VAR 0 9
31878: PUSH
31879: LD_INT 40
31881: PUSH
31882: LD_INT 15
31884: PUSH
31885: LD_INT 5
31887: PUSH
31888: EMPTY
31889: LIST
31890: LIST
31891: LIST
31892: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
31893: LD_VAR 0 6
31897: PPUSH
31898: CALL_OW 264
31902: PUSH
31903: LD_INT 3
31905: PUSH
31906: LD_INT 23
31908: PUSH
31909: EMPTY
31910: LIST
31911: LIST
31912: IN
31913: IFFALSE 31934
// points := [ 7 , 25 , 8 ] ;
31915: LD_ADDR_VAR 0 9
31919: PUSH
31920: LD_INT 7
31922: PUSH
31923: LD_INT 25
31925: PUSH
31926: LD_INT 8
31928: PUSH
31929: EMPTY
31930: LIST
31931: LIST
31932: LIST
31933: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
31934: LD_VAR 0 6
31938: PPUSH
31939: CALL_OW 264
31943: PUSH
31944: LD_INT 5
31946: PUSH
31947: LD_INT 27
31949: PUSH
31950: LD_INT 44
31952: PUSH
31953: EMPTY
31954: LIST
31955: LIST
31956: LIST
31957: IN
31958: IFFALSE 31979
// points := [ 14 , 50 , 16 ] ;
31960: LD_ADDR_VAR 0 9
31964: PUSH
31965: LD_INT 14
31967: PUSH
31968: LD_INT 50
31970: PUSH
31971: LD_INT 16
31973: PUSH
31974: EMPTY
31975: LIST
31976: LIST
31977: LIST
31978: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
31979: LD_VAR 0 6
31983: PPUSH
31984: CALL_OW 264
31988: PUSH
31989: LD_INT 6
31991: PUSH
31992: LD_INT 46
31994: PUSH
31995: EMPTY
31996: LIST
31997: LIST
31998: IN
31999: IFFALSE 32020
// points := [ 32 , 120 , 70 ] ;
32001: LD_ADDR_VAR 0 9
32005: PUSH
32006: LD_INT 32
32008: PUSH
32009: LD_INT 120
32011: PUSH
32012: LD_INT 70
32014: PUSH
32015: EMPTY
32016: LIST
32017: LIST
32018: LIST
32019: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
32020: LD_VAR 0 6
32024: PPUSH
32025: CALL_OW 264
32029: PUSH
32030: LD_INT 7
32032: PUSH
32033: LD_INT 28
32035: PUSH
32036: LD_INT 45
32038: PUSH
32039: EMPTY
32040: LIST
32041: LIST
32042: LIST
32043: IN
32044: IFFALSE 32065
// points := [ 35 , 20 , 45 ] ;
32046: LD_ADDR_VAR 0 9
32050: PUSH
32051: LD_INT 35
32053: PUSH
32054: LD_INT 20
32056: PUSH
32057: LD_INT 45
32059: PUSH
32060: EMPTY
32061: LIST
32062: LIST
32063: LIST
32064: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
32065: LD_VAR 0 6
32069: PPUSH
32070: CALL_OW 264
32074: PUSH
32075: LD_INT 47
32077: PUSH
32078: EMPTY
32079: LIST
32080: IN
32081: IFFALSE 32102
// points := [ 67 , 45 , 75 ] ;
32083: LD_ADDR_VAR 0 9
32087: PUSH
32088: LD_INT 67
32090: PUSH
32091: LD_INT 45
32093: PUSH
32094: LD_INT 75
32096: PUSH
32097: EMPTY
32098: LIST
32099: LIST
32100: LIST
32101: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
32102: LD_VAR 0 6
32106: PPUSH
32107: CALL_OW 264
32111: PUSH
32112: LD_INT 26
32114: PUSH
32115: EMPTY
32116: LIST
32117: IN
32118: IFFALSE 32139
// points := [ 120 , 30 , 80 ] ;
32120: LD_ADDR_VAR 0 9
32124: PUSH
32125: LD_INT 120
32127: PUSH
32128: LD_INT 30
32130: PUSH
32131: LD_INT 80
32133: PUSH
32134: EMPTY
32135: LIST
32136: LIST
32137: LIST
32138: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
32139: LD_VAR 0 6
32143: PPUSH
32144: CALL_OW 264
32148: PUSH
32149: LD_INT 22
32151: PUSH
32152: EMPTY
32153: LIST
32154: IN
32155: IFFALSE 32176
// points := [ 40 , 1 , 1 ] ;
32157: LD_ADDR_VAR 0 9
32161: PUSH
32162: LD_INT 40
32164: PUSH
32165: LD_INT 1
32167: PUSH
32168: LD_INT 1
32170: PUSH
32171: EMPTY
32172: LIST
32173: LIST
32174: LIST
32175: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
32176: LD_VAR 0 6
32180: PPUSH
32181: CALL_OW 264
32185: PUSH
32186: LD_INT 29
32188: PUSH
32189: EMPTY
32190: LIST
32191: IN
32192: IFFALSE 32213
// points := [ 70 , 200 , 400 ] ;
32194: LD_ADDR_VAR 0 9
32198: PUSH
32199: LD_INT 70
32201: PUSH
32202: LD_INT 200
32204: PUSH
32205: LD_INT 400
32207: PUSH
32208: EMPTY
32209: LIST
32210: LIST
32211: LIST
32212: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
32213: LD_VAR 0 6
32217: PPUSH
32218: CALL_OW 264
32222: PUSH
32223: LD_INT 14
32225: PUSH
32226: LD_INT 53
32228: PUSH
32229: EMPTY
32230: LIST
32231: LIST
32232: IN
32233: IFFALSE 32254
// points := [ 40 , 10 , 20 ] ;
32235: LD_ADDR_VAR 0 9
32239: PUSH
32240: LD_INT 40
32242: PUSH
32243: LD_INT 10
32245: PUSH
32246: LD_INT 20
32248: PUSH
32249: EMPTY
32250: LIST
32251: LIST
32252: LIST
32253: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
32254: LD_VAR 0 6
32258: PPUSH
32259: CALL_OW 264
32263: PUSH
32264: LD_INT 9
32266: PUSH
32267: EMPTY
32268: LIST
32269: IN
32270: IFFALSE 32291
// points := [ 5 , 70 , 20 ] ;
32272: LD_ADDR_VAR 0 9
32276: PUSH
32277: LD_INT 5
32279: PUSH
32280: LD_INT 70
32282: PUSH
32283: LD_INT 20
32285: PUSH
32286: EMPTY
32287: LIST
32288: LIST
32289: LIST
32290: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
32291: LD_VAR 0 6
32295: PPUSH
32296: CALL_OW 264
32300: PUSH
32301: LD_INT 10
32303: PUSH
32304: EMPTY
32305: LIST
32306: IN
32307: IFFALSE 32328
// points := [ 35 , 110 , 70 ] ;
32309: LD_ADDR_VAR 0 9
32313: PUSH
32314: LD_INT 35
32316: PUSH
32317: LD_INT 110
32319: PUSH
32320: LD_INT 70
32322: PUSH
32323: EMPTY
32324: LIST
32325: LIST
32326: LIST
32327: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
32328: LD_VAR 0 6
32332: PPUSH
32333: CALL_OW 265
32337: PUSH
32338: LD_INT 25
32340: EQUAL
32341: IFFALSE 32362
// points := [ 80 , 65 , 100 ] ;
32343: LD_ADDR_VAR 0 9
32347: PUSH
32348: LD_INT 80
32350: PUSH
32351: LD_INT 65
32353: PUSH
32354: LD_INT 100
32356: PUSH
32357: EMPTY
32358: LIST
32359: LIST
32360: LIST
32361: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
32362: LD_VAR 0 6
32366: PPUSH
32367: CALL_OW 263
32371: PUSH
32372: LD_INT 1
32374: EQUAL
32375: IFFALSE 32410
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
32377: LD_ADDR_VAR 0 10
32381: PUSH
32382: LD_VAR 0 10
32386: PUSH
32387: LD_VAR 0 6
32391: PPUSH
32392: CALL_OW 311
32396: PPUSH
32397: LD_INT 3
32399: PPUSH
32400: CALL_OW 259
32404: PUSH
32405: LD_INT 4
32407: MUL
32408: MUL
32409: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
32410: LD_VAR 0 6
32414: PPUSH
32415: CALL_OW 263
32419: PUSH
32420: LD_INT 2
32422: EQUAL
32423: IFFALSE 32474
// begin j := IsControledBy ( i ) ;
32425: LD_ADDR_VAR 0 7
32429: PUSH
32430: LD_VAR 0 6
32434: PPUSH
32435: CALL_OW 312
32439: ST_TO_ADDR
// if j then
32440: LD_VAR 0 7
32444: IFFALSE 32474
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
32446: LD_ADDR_VAR 0 10
32450: PUSH
32451: LD_VAR 0 10
32455: PUSH
32456: LD_VAR 0 7
32460: PPUSH
32461: LD_INT 3
32463: PPUSH
32464: CALL_OW 259
32468: PUSH
32469: LD_INT 3
32471: MUL
32472: MUL
32473: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
32474: LD_VAR 0 6
32478: PPUSH
32479: CALL_OW 264
32483: PUSH
32484: LD_INT 5
32486: PUSH
32487: LD_INT 6
32489: PUSH
32490: LD_INT 46
32492: PUSH
32493: LD_INT 44
32495: PUSH
32496: LD_INT 47
32498: PUSH
32499: LD_INT 45
32501: PUSH
32502: LD_INT 28
32504: PUSH
32505: LD_INT 7
32507: PUSH
32508: LD_INT 27
32510: PUSH
32511: LD_INT 29
32513: PUSH
32514: EMPTY
32515: LIST
32516: LIST
32517: LIST
32518: LIST
32519: LIST
32520: LIST
32521: LIST
32522: LIST
32523: LIST
32524: LIST
32525: IN
32526: PUSH
32527: LD_VAR 0 1
32531: PPUSH
32532: LD_INT 52
32534: PPUSH
32535: CALL_OW 321
32539: PUSH
32540: LD_INT 2
32542: EQUAL
32543: AND
32544: IFFALSE 32561
// bpoints := bpoints * 1.2 ;
32546: LD_ADDR_VAR 0 10
32550: PUSH
32551: LD_VAR 0 10
32555: PUSH
32556: LD_REAL  1.20000000000000E+0000
32559: MUL
32560: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
32561: LD_VAR 0 6
32565: PPUSH
32566: CALL_OW 264
32570: PUSH
32571: LD_INT 6
32573: PUSH
32574: LD_INT 46
32576: PUSH
32577: LD_INT 47
32579: PUSH
32580: EMPTY
32581: LIST
32582: LIST
32583: LIST
32584: IN
32585: IFFALSE 32602
// bpoints := bpoints * 1.2 ;
32587: LD_ADDR_VAR 0 10
32591: PUSH
32592: LD_VAR 0 10
32596: PUSH
32597: LD_REAL  1.20000000000000E+0000
32600: MUL
32601: ST_TO_ADDR
// end ; unit_building :
32602: GO 32616
32604: LD_INT 3
32606: DOUBLE
32607: EQUAL
32608: IFTRUE 32612
32610: GO 32615
32612: POP
// ; end ;
32613: GO 32616
32615: POP
// for j = 1 to 3 do
32616: LD_ADDR_VAR 0 7
32620: PUSH
32621: DOUBLE
32622: LD_INT 1
32624: DEC
32625: ST_TO_ADDR
32626: LD_INT 3
32628: PUSH
32629: FOR_TO
32630: IFFALSE 32683
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
32632: LD_ADDR_VAR 0 5
32636: PUSH
32637: LD_VAR 0 5
32641: PPUSH
32642: LD_VAR 0 7
32646: PPUSH
32647: LD_VAR 0 5
32651: PUSH
32652: LD_VAR 0 7
32656: ARRAY
32657: PUSH
32658: LD_VAR 0 9
32662: PUSH
32663: LD_VAR 0 7
32667: ARRAY
32668: PUSH
32669: LD_VAR 0 10
32673: MUL
32674: PLUS
32675: PPUSH
32676: CALL_OW 1
32680: ST_TO_ADDR
32681: GO 32629
32683: POP
32684: POP
// end ;
32685: GO 31168
32687: POP
32688: POP
// result := Replace ( result , 4 , tmp ) ;
32689: LD_ADDR_VAR 0 5
32693: PUSH
32694: LD_VAR 0 5
32698: PPUSH
32699: LD_INT 4
32701: PPUSH
32702: LD_VAR 0 8
32706: PPUSH
32707: CALL_OW 1
32711: ST_TO_ADDR
// end ;
32712: LD_VAR 0 5
32716: RET
// export function DangerAtRange ( unit , range ) ; begin
32717: LD_INT 0
32719: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
32720: LD_ADDR_VAR 0 3
32724: PUSH
32725: LD_VAR 0 1
32729: PPUSH
32730: CALL_OW 255
32734: PPUSH
32735: LD_VAR 0 1
32739: PPUSH
32740: CALL_OW 250
32744: PPUSH
32745: LD_VAR 0 1
32749: PPUSH
32750: CALL_OW 251
32754: PPUSH
32755: LD_VAR 0 2
32759: PPUSH
32760: CALL 31020 0 4
32764: ST_TO_ADDR
// end ;
32765: LD_VAR 0 3
32769: RET
// export function DangerInArea ( side , area ) ; begin
32770: LD_INT 0
32772: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
32773: LD_ADDR_VAR 0 3
32777: PUSH
32778: LD_VAR 0 2
32782: PPUSH
32783: LD_INT 81
32785: PUSH
32786: LD_VAR 0 1
32790: PUSH
32791: EMPTY
32792: LIST
32793: LIST
32794: PPUSH
32795: CALL_OW 70
32799: ST_TO_ADDR
// end ;
32800: LD_VAR 0 3
32804: RET
// export function IsExtension ( b ) ; begin
32805: LD_INT 0
32807: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
32808: LD_ADDR_VAR 0 2
32812: PUSH
32813: LD_VAR 0 1
32817: PUSH
32818: LD_INT 23
32820: PUSH
32821: LD_INT 20
32823: PUSH
32824: LD_INT 22
32826: PUSH
32827: LD_INT 17
32829: PUSH
32830: LD_INT 24
32832: PUSH
32833: LD_INT 21
32835: PUSH
32836: LD_INT 19
32838: PUSH
32839: LD_INT 16
32841: PUSH
32842: LD_INT 25
32844: PUSH
32845: LD_INT 18
32847: PUSH
32848: EMPTY
32849: LIST
32850: LIST
32851: LIST
32852: LIST
32853: LIST
32854: LIST
32855: LIST
32856: LIST
32857: LIST
32858: LIST
32859: IN
32860: ST_TO_ADDR
// end ;
32861: LD_VAR 0 2
32865: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
32866: LD_INT 0
32868: PPUSH
32869: PPUSH
32870: PPUSH
// result := [ ] ;
32871: LD_ADDR_VAR 0 4
32875: PUSH
32876: EMPTY
32877: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
32878: LD_ADDR_VAR 0 5
32882: PUSH
32883: LD_VAR 0 2
32887: PPUSH
32888: LD_INT 21
32890: PUSH
32891: LD_INT 3
32893: PUSH
32894: EMPTY
32895: LIST
32896: LIST
32897: PPUSH
32898: CALL_OW 70
32902: ST_TO_ADDR
// if not tmp then
32903: LD_VAR 0 5
32907: NOT
32908: IFFALSE 32912
// exit ;
32910: GO 32976
// if checkLink then
32912: LD_VAR 0 3
32916: IFFALSE 32966
// begin for i in tmp do
32918: LD_ADDR_VAR 0 6
32922: PUSH
32923: LD_VAR 0 5
32927: PUSH
32928: FOR_IN
32929: IFFALSE 32964
// if GetBase ( i ) <> base then
32931: LD_VAR 0 6
32935: PPUSH
32936: CALL_OW 274
32940: PUSH
32941: LD_VAR 0 1
32945: NONEQUAL
32946: IFFALSE 32962
// ComLinkToBase ( base , i ) ;
32948: LD_VAR 0 1
32952: PPUSH
32953: LD_VAR 0 6
32957: PPUSH
32958: CALL_OW 169
32962: GO 32928
32964: POP
32965: POP
// end ; result := tmp ;
32966: LD_ADDR_VAR 0 4
32970: PUSH
32971: LD_VAR 0 5
32975: ST_TO_ADDR
// end ;
32976: LD_VAR 0 4
32980: RET
// export function ComComplete ( units , b ) ; var i ; begin
32981: LD_INT 0
32983: PPUSH
32984: PPUSH
// if not units then
32985: LD_VAR 0 1
32989: NOT
32990: IFFALSE 32994
// exit ;
32992: GO 33084
// for i in units do
32994: LD_ADDR_VAR 0 4
32998: PUSH
32999: LD_VAR 0 1
33003: PUSH
33004: FOR_IN
33005: IFFALSE 33082
// if BuildingStatus ( b ) = bs_build then
33007: LD_VAR 0 2
33011: PPUSH
33012: CALL_OW 461
33016: PUSH
33017: LD_INT 1
33019: EQUAL
33020: IFFALSE 33080
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
33022: LD_VAR 0 4
33026: PPUSH
33027: LD_STRING h
33029: PUSH
33030: LD_VAR 0 2
33034: PPUSH
33035: CALL_OW 250
33039: PUSH
33040: LD_VAR 0 2
33044: PPUSH
33045: CALL_OW 251
33049: PUSH
33050: LD_VAR 0 2
33054: PUSH
33055: LD_INT 0
33057: PUSH
33058: LD_INT 0
33060: PUSH
33061: LD_INT 0
33063: PUSH
33064: EMPTY
33065: LIST
33066: LIST
33067: LIST
33068: LIST
33069: LIST
33070: LIST
33071: LIST
33072: PUSH
33073: EMPTY
33074: LIST
33075: PPUSH
33076: CALL_OW 446
33080: GO 33004
33082: POP
33083: POP
// end ;
33084: LD_VAR 0 3
33088: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
33089: LD_INT 0
33091: PPUSH
33092: PPUSH
33093: PPUSH
33094: PPUSH
33095: PPUSH
33096: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
33097: LD_VAR 0 1
33101: NOT
33102: PUSH
33103: LD_VAR 0 1
33107: PPUSH
33108: CALL_OW 263
33112: PUSH
33113: LD_INT 2
33115: EQUAL
33116: NOT
33117: OR
33118: IFFALSE 33122
// exit ;
33120: GO 33438
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
33122: LD_ADDR_VAR 0 6
33126: PUSH
33127: LD_INT 22
33129: PUSH
33130: LD_VAR 0 1
33134: PPUSH
33135: CALL_OW 255
33139: PUSH
33140: EMPTY
33141: LIST
33142: LIST
33143: PUSH
33144: LD_INT 2
33146: PUSH
33147: LD_INT 30
33149: PUSH
33150: LD_INT 36
33152: PUSH
33153: EMPTY
33154: LIST
33155: LIST
33156: PUSH
33157: LD_INT 34
33159: PUSH
33160: LD_INT 31
33162: PUSH
33163: EMPTY
33164: LIST
33165: LIST
33166: PUSH
33167: EMPTY
33168: LIST
33169: LIST
33170: LIST
33171: PUSH
33172: EMPTY
33173: LIST
33174: LIST
33175: PPUSH
33176: CALL_OW 69
33180: ST_TO_ADDR
// if not tmp then
33181: LD_VAR 0 6
33185: NOT
33186: IFFALSE 33190
// exit ;
33188: GO 33438
// result := [ ] ;
33190: LD_ADDR_VAR 0 2
33194: PUSH
33195: EMPTY
33196: ST_TO_ADDR
// for i in tmp do
33197: LD_ADDR_VAR 0 3
33201: PUSH
33202: LD_VAR 0 6
33206: PUSH
33207: FOR_IN
33208: IFFALSE 33279
// begin t := UnitsInside ( i ) ;
33210: LD_ADDR_VAR 0 4
33214: PUSH
33215: LD_VAR 0 3
33219: PPUSH
33220: CALL_OW 313
33224: ST_TO_ADDR
// if t then
33225: LD_VAR 0 4
33229: IFFALSE 33277
// for j in t do
33231: LD_ADDR_VAR 0 7
33235: PUSH
33236: LD_VAR 0 4
33240: PUSH
33241: FOR_IN
33242: IFFALSE 33275
// result := Insert ( result , result + 1 , j ) ;
33244: LD_ADDR_VAR 0 2
33248: PUSH
33249: LD_VAR 0 2
33253: PPUSH
33254: LD_VAR 0 2
33258: PUSH
33259: LD_INT 1
33261: PLUS
33262: PPUSH
33263: LD_VAR 0 7
33267: PPUSH
33268: CALL_OW 2
33272: ST_TO_ADDR
33273: GO 33241
33275: POP
33276: POP
// end ;
33277: GO 33207
33279: POP
33280: POP
// if not result then
33281: LD_VAR 0 2
33285: NOT
33286: IFFALSE 33290
// exit ;
33288: GO 33438
// mech := result [ 1 ] ;
33290: LD_ADDR_VAR 0 5
33294: PUSH
33295: LD_VAR 0 2
33299: PUSH
33300: LD_INT 1
33302: ARRAY
33303: ST_TO_ADDR
// if result > 1 then
33304: LD_VAR 0 2
33308: PUSH
33309: LD_INT 1
33311: GREATER
33312: IFFALSE 33424
// for i = 2 to result do
33314: LD_ADDR_VAR 0 3
33318: PUSH
33319: DOUBLE
33320: LD_INT 2
33322: DEC
33323: ST_TO_ADDR
33324: LD_VAR 0 2
33328: PUSH
33329: FOR_TO
33330: IFFALSE 33422
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
33332: LD_ADDR_VAR 0 4
33336: PUSH
33337: LD_VAR 0 2
33341: PUSH
33342: LD_VAR 0 3
33346: ARRAY
33347: PPUSH
33348: LD_INT 3
33350: PPUSH
33351: CALL_OW 259
33355: PUSH
33356: LD_VAR 0 2
33360: PUSH
33361: LD_VAR 0 3
33365: ARRAY
33366: PPUSH
33367: CALL_OW 432
33371: MINUS
33372: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
33373: LD_VAR 0 4
33377: PUSH
33378: LD_VAR 0 5
33382: PPUSH
33383: LD_INT 3
33385: PPUSH
33386: CALL_OW 259
33390: PUSH
33391: LD_VAR 0 5
33395: PPUSH
33396: CALL_OW 432
33400: MINUS
33401: GREATEREQUAL
33402: IFFALSE 33420
// mech := result [ i ] ;
33404: LD_ADDR_VAR 0 5
33408: PUSH
33409: LD_VAR 0 2
33413: PUSH
33414: LD_VAR 0 3
33418: ARRAY
33419: ST_TO_ADDR
// end ;
33420: GO 33329
33422: POP
33423: POP
// ComLinkTo ( vehicle , mech ) ;
33424: LD_VAR 0 1
33428: PPUSH
33429: LD_VAR 0 5
33433: PPUSH
33434: CALL_OW 135
// end ;
33438: LD_VAR 0 2
33442: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
33443: LD_INT 0
33445: PPUSH
33446: PPUSH
33447: PPUSH
33448: PPUSH
33449: PPUSH
33450: PPUSH
33451: PPUSH
33452: PPUSH
33453: PPUSH
33454: PPUSH
33455: PPUSH
33456: PPUSH
33457: PPUSH
// result := [ ] ;
33458: LD_ADDR_VAR 0 7
33462: PUSH
33463: EMPTY
33464: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
33465: LD_VAR 0 1
33469: PPUSH
33470: CALL_OW 266
33474: PUSH
33475: LD_INT 0
33477: PUSH
33478: LD_INT 1
33480: PUSH
33481: EMPTY
33482: LIST
33483: LIST
33484: IN
33485: NOT
33486: IFFALSE 33490
// exit ;
33488: GO 35124
// if name then
33490: LD_VAR 0 3
33494: IFFALSE 33510
// SetBName ( base_dep , name ) ;
33496: LD_VAR 0 1
33500: PPUSH
33501: LD_VAR 0 3
33505: PPUSH
33506: CALL_OW 500
// base := GetBase ( base_dep ) ;
33510: LD_ADDR_VAR 0 15
33514: PUSH
33515: LD_VAR 0 1
33519: PPUSH
33520: CALL_OW 274
33524: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
33525: LD_ADDR_VAR 0 16
33529: PUSH
33530: LD_VAR 0 1
33534: PPUSH
33535: CALL_OW 255
33539: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
33540: LD_ADDR_VAR 0 17
33544: PUSH
33545: LD_VAR 0 1
33549: PPUSH
33550: CALL_OW 248
33554: ST_TO_ADDR
// if sources then
33555: LD_VAR 0 5
33559: IFFALSE 33606
// for i = 1 to 3 do
33561: LD_ADDR_VAR 0 8
33565: PUSH
33566: DOUBLE
33567: LD_INT 1
33569: DEC
33570: ST_TO_ADDR
33571: LD_INT 3
33573: PUSH
33574: FOR_TO
33575: IFFALSE 33604
// AddResourceType ( base , i , sources [ i ] ) ;
33577: LD_VAR 0 15
33581: PPUSH
33582: LD_VAR 0 8
33586: PPUSH
33587: LD_VAR 0 5
33591: PUSH
33592: LD_VAR 0 8
33596: ARRAY
33597: PPUSH
33598: CALL_OW 276
33602: GO 33574
33604: POP
33605: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
33606: LD_ADDR_VAR 0 18
33610: PUSH
33611: LD_VAR 0 15
33615: PPUSH
33616: LD_VAR 0 2
33620: PPUSH
33621: LD_INT 1
33623: PPUSH
33624: CALL 32866 0 3
33628: ST_TO_ADDR
// InitHc ;
33629: CALL_OW 19
// InitUc ;
33633: CALL_OW 18
// uc_side := side ;
33637: LD_ADDR_OWVAR 20
33641: PUSH
33642: LD_VAR 0 16
33646: ST_TO_ADDR
// uc_nation := nation ;
33647: LD_ADDR_OWVAR 21
33651: PUSH
33652: LD_VAR 0 17
33656: ST_TO_ADDR
// if buildings then
33657: LD_VAR 0 18
33661: IFFALSE 34983
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
33663: LD_ADDR_VAR 0 19
33667: PUSH
33668: LD_VAR 0 18
33672: PPUSH
33673: LD_INT 2
33675: PUSH
33676: LD_INT 30
33678: PUSH
33679: LD_INT 29
33681: PUSH
33682: EMPTY
33683: LIST
33684: LIST
33685: PUSH
33686: LD_INT 30
33688: PUSH
33689: LD_INT 30
33691: PUSH
33692: EMPTY
33693: LIST
33694: LIST
33695: PUSH
33696: EMPTY
33697: LIST
33698: LIST
33699: LIST
33700: PPUSH
33701: CALL_OW 72
33705: ST_TO_ADDR
// if tmp then
33706: LD_VAR 0 19
33710: IFFALSE 33758
// for i in tmp do
33712: LD_ADDR_VAR 0 8
33716: PUSH
33717: LD_VAR 0 19
33721: PUSH
33722: FOR_IN
33723: IFFALSE 33756
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
33725: LD_VAR 0 8
33729: PPUSH
33730: CALL_OW 250
33734: PPUSH
33735: LD_VAR 0 8
33739: PPUSH
33740: CALL_OW 251
33744: PPUSH
33745: LD_VAR 0 16
33749: PPUSH
33750: CALL_OW 441
33754: GO 33722
33756: POP
33757: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
33758: LD_VAR 0 18
33762: PPUSH
33763: LD_INT 2
33765: PUSH
33766: LD_INT 30
33768: PUSH
33769: LD_INT 32
33771: PUSH
33772: EMPTY
33773: LIST
33774: LIST
33775: PUSH
33776: LD_INT 30
33778: PUSH
33779: LD_INT 33
33781: PUSH
33782: EMPTY
33783: LIST
33784: LIST
33785: PUSH
33786: EMPTY
33787: LIST
33788: LIST
33789: LIST
33790: PPUSH
33791: CALL_OW 72
33795: IFFALSE 33883
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
33797: LD_ADDR_VAR 0 8
33801: PUSH
33802: LD_VAR 0 18
33806: PPUSH
33807: LD_INT 2
33809: PUSH
33810: LD_INT 30
33812: PUSH
33813: LD_INT 32
33815: PUSH
33816: EMPTY
33817: LIST
33818: LIST
33819: PUSH
33820: LD_INT 30
33822: PUSH
33823: LD_INT 33
33825: PUSH
33826: EMPTY
33827: LIST
33828: LIST
33829: PUSH
33830: EMPTY
33831: LIST
33832: LIST
33833: LIST
33834: PPUSH
33835: CALL_OW 72
33839: PUSH
33840: FOR_IN
33841: IFFALSE 33881
// begin if not GetBWeapon ( i ) then
33843: LD_VAR 0 8
33847: PPUSH
33848: CALL_OW 269
33852: NOT
33853: IFFALSE 33879
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
33855: LD_VAR 0 8
33859: PPUSH
33860: LD_VAR 0 8
33864: PPUSH
33865: LD_VAR 0 2
33869: PPUSH
33870: CALL 35129 0 2
33874: PPUSH
33875: CALL_OW 431
// end ;
33879: GO 33840
33881: POP
33882: POP
// end ; for i = 1 to personel do
33883: LD_ADDR_VAR 0 8
33887: PUSH
33888: DOUBLE
33889: LD_INT 1
33891: DEC
33892: ST_TO_ADDR
33893: LD_VAR 0 6
33897: PUSH
33898: FOR_TO
33899: IFFALSE 34963
// begin if i > 4 then
33901: LD_VAR 0 8
33905: PUSH
33906: LD_INT 4
33908: GREATER
33909: IFFALSE 33913
// break ;
33911: GO 34963
// case i of 1 :
33913: LD_VAR 0 8
33917: PUSH
33918: LD_INT 1
33920: DOUBLE
33921: EQUAL
33922: IFTRUE 33926
33924: GO 34006
33926: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
33927: LD_ADDR_VAR 0 12
33931: PUSH
33932: LD_VAR 0 18
33936: PPUSH
33937: LD_INT 22
33939: PUSH
33940: LD_VAR 0 16
33944: PUSH
33945: EMPTY
33946: LIST
33947: LIST
33948: PUSH
33949: LD_INT 58
33951: PUSH
33952: EMPTY
33953: LIST
33954: PUSH
33955: LD_INT 2
33957: PUSH
33958: LD_INT 30
33960: PUSH
33961: LD_INT 32
33963: PUSH
33964: EMPTY
33965: LIST
33966: LIST
33967: PUSH
33968: LD_INT 30
33970: PUSH
33971: LD_INT 4
33973: PUSH
33974: EMPTY
33975: LIST
33976: LIST
33977: PUSH
33978: LD_INT 30
33980: PUSH
33981: LD_INT 5
33983: PUSH
33984: EMPTY
33985: LIST
33986: LIST
33987: PUSH
33988: EMPTY
33989: LIST
33990: LIST
33991: LIST
33992: LIST
33993: PUSH
33994: EMPTY
33995: LIST
33996: LIST
33997: LIST
33998: PPUSH
33999: CALL_OW 72
34003: ST_TO_ADDR
34004: GO 34228
34006: LD_INT 2
34008: DOUBLE
34009: EQUAL
34010: IFTRUE 34014
34012: GO 34076
34014: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
34015: LD_ADDR_VAR 0 12
34019: PUSH
34020: LD_VAR 0 18
34024: PPUSH
34025: LD_INT 22
34027: PUSH
34028: LD_VAR 0 16
34032: PUSH
34033: EMPTY
34034: LIST
34035: LIST
34036: PUSH
34037: LD_INT 2
34039: PUSH
34040: LD_INT 30
34042: PUSH
34043: LD_INT 0
34045: PUSH
34046: EMPTY
34047: LIST
34048: LIST
34049: PUSH
34050: LD_INT 30
34052: PUSH
34053: LD_INT 1
34055: PUSH
34056: EMPTY
34057: LIST
34058: LIST
34059: PUSH
34060: EMPTY
34061: LIST
34062: LIST
34063: LIST
34064: PUSH
34065: EMPTY
34066: LIST
34067: LIST
34068: PPUSH
34069: CALL_OW 72
34073: ST_TO_ADDR
34074: GO 34228
34076: LD_INT 3
34078: DOUBLE
34079: EQUAL
34080: IFTRUE 34084
34082: GO 34146
34084: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
34085: LD_ADDR_VAR 0 12
34089: PUSH
34090: LD_VAR 0 18
34094: PPUSH
34095: LD_INT 22
34097: PUSH
34098: LD_VAR 0 16
34102: PUSH
34103: EMPTY
34104: LIST
34105: LIST
34106: PUSH
34107: LD_INT 2
34109: PUSH
34110: LD_INT 30
34112: PUSH
34113: LD_INT 2
34115: PUSH
34116: EMPTY
34117: LIST
34118: LIST
34119: PUSH
34120: LD_INT 30
34122: PUSH
34123: LD_INT 3
34125: PUSH
34126: EMPTY
34127: LIST
34128: LIST
34129: PUSH
34130: EMPTY
34131: LIST
34132: LIST
34133: LIST
34134: PUSH
34135: EMPTY
34136: LIST
34137: LIST
34138: PPUSH
34139: CALL_OW 72
34143: ST_TO_ADDR
34144: GO 34228
34146: LD_INT 4
34148: DOUBLE
34149: EQUAL
34150: IFTRUE 34154
34152: GO 34227
34154: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
34155: LD_ADDR_VAR 0 12
34159: PUSH
34160: LD_VAR 0 18
34164: PPUSH
34165: LD_INT 22
34167: PUSH
34168: LD_VAR 0 16
34172: PUSH
34173: EMPTY
34174: LIST
34175: LIST
34176: PUSH
34177: LD_INT 2
34179: PUSH
34180: LD_INT 30
34182: PUSH
34183: LD_INT 6
34185: PUSH
34186: EMPTY
34187: LIST
34188: LIST
34189: PUSH
34190: LD_INT 30
34192: PUSH
34193: LD_INT 7
34195: PUSH
34196: EMPTY
34197: LIST
34198: LIST
34199: PUSH
34200: LD_INT 30
34202: PUSH
34203: LD_INT 8
34205: PUSH
34206: EMPTY
34207: LIST
34208: LIST
34209: PUSH
34210: EMPTY
34211: LIST
34212: LIST
34213: LIST
34214: LIST
34215: PUSH
34216: EMPTY
34217: LIST
34218: LIST
34219: PPUSH
34220: CALL_OW 72
34224: ST_TO_ADDR
34225: GO 34228
34227: POP
// if i = 1 then
34228: LD_VAR 0 8
34232: PUSH
34233: LD_INT 1
34235: EQUAL
34236: IFFALSE 34347
// begin tmp := [ ] ;
34238: LD_ADDR_VAR 0 19
34242: PUSH
34243: EMPTY
34244: ST_TO_ADDR
// for j in f do
34245: LD_ADDR_VAR 0 9
34249: PUSH
34250: LD_VAR 0 12
34254: PUSH
34255: FOR_IN
34256: IFFALSE 34329
// if GetBType ( j ) = b_bunker then
34258: LD_VAR 0 9
34262: PPUSH
34263: CALL_OW 266
34267: PUSH
34268: LD_INT 32
34270: EQUAL
34271: IFFALSE 34298
// tmp := Insert ( tmp , 1 , j ) else
34273: LD_ADDR_VAR 0 19
34277: PUSH
34278: LD_VAR 0 19
34282: PPUSH
34283: LD_INT 1
34285: PPUSH
34286: LD_VAR 0 9
34290: PPUSH
34291: CALL_OW 2
34295: ST_TO_ADDR
34296: GO 34327
// tmp := Insert ( tmp , tmp + 1 , j ) ;
34298: LD_ADDR_VAR 0 19
34302: PUSH
34303: LD_VAR 0 19
34307: PPUSH
34308: LD_VAR 0 19
34312: PUSH
34313: LD_INT 1
34315: PLUS
34316: PPUSH
34317: LD_VAR 0 9
34321: PPUSH
34322: CALL_OW 2
34326: ST_TO_ADDR
34327: GO 34255
34329: POP
34330: POP
// if tmp then
34331: LD_VAR 0 19
34335: IFFALSE 34347
// f := tmp ;
34337: LD_ADDR_VAR 0 12
34341: PUSH
34342: LD_VAR 0 19
34346: ST_TO_ADDR
// end ; x := personel [ i ] ;
34347: LD_ADDR_VAR 0 13
34351: PUSH
34352: LD_VAR 0 6
34356: PUSH
34357: LD_VAR 0 8
34361: ARRAY
34362: ST_TO_ADDR
// if x = - 1 then
34363: LD_VAR 0 13
34367: PUSH
34368: LD_INT 1
34370: NEG
34371: EQUAL
34372: IFFALSE 34581
// begin for j in f do
34374: LD_ADDR_VAR 0 9
34378: PUSH
34379: LD_VAR 0 12
34383: PUSH
34384: FOR_IN
34385: IFFALSE 34577
// repeat InitHc ;
34387: CALL_OW 19
// if GetBType ( j ) = b_barracks then
34391: LD_VAR 0 9
34395: PPUSH
34396: CALL_OW 266
34400: PUSH
34401: LD_INT 5
34403: EQUAL
34404: IFFALSE 34474
// begin if UnitsInside ( j ) < 3 then
34406: LD_VAR 0 9
34410: PPUSH
34411: CALL_OW 313
34415: PUSH
34416: LD_INT 3
34418: LESS
34419: IFFALSE 34455
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
34421: LD_INT 0
34423: PPUSH
34424: LD_INT 5
34426: PUSH
34427: LD_INT 8
34429: PUSH
34430: LD_INT 9
34432: PUSH
34433: EMPTY
34434: LIST
34435: LIST
34436: LIST
34437: PUSH
34438: LD_VAR 0 17
34442: ARRAY
34443: PPUSH
34444: LD_VAR 0 4
34448: PPUSH
34449: CALL_OW 380
34453: GO 34472
// PrepareHuman ( false , i , skill ) ;
34455: LD_INT 0
34457: PPUSH
34458: LD_VAR 0 8
34462: PPUSH
34463: LD_VAR 0 4
34467: PPUSH
34468: CALL_OW 380
// end else
34472: GO 34491
// PrepareHuman ( false , i , skill ) ;
34474: LD_INT 0
34476: PPUSH
34477: LD_VAR 0 8
34481: PPUSH
34482: LD_VAR 0 4
34486: PPUSH
34487: CALL_OW 380
// un := CreateHuman ;
34491: LD_ADDR_VAR 0 14
34495: PUSH
34496: CALL_OW 44
34500: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
34501: LD_ADDR_VAR 0 7
34505: PUSH
34506: LD_VAR 0 7
34510: PPUSH
34511: LD_INT 1
34513: PPUSH
34514: LD_VAR 0 14
34518: PPUSH
34519: CALL_OW 2
34523: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
34524: LD_VAR 0 14
34528: PPUSH
34529: LD_VAR 0 9
34533: PPUSH
34534: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
34538: LD_VAR 0 9
34542: PPUSH
34543: CALL_OW 313
34547: PUSH
34548: LD_INT 6
34550: EQUAL
34551: PUSH
34552: LD_VAR 0 9
34556: PPUSH
34557: CALL_OW 266
34561: PUSH
34562: LD_INT 32
34564: PUSH
34565: LD_INT 31
34567: PUSH
34568: EMPTY
34569: LIST
34570: LIST
34571: IN
34572: OR
34573: IFFALSE 34387
34575: GO 34384
34577: POP
34578: POP
// end else
34579: GO 34961
// for j = 1 to x do
34581: LD_ADDR_VAR 0 9
34585: PUSH
34586: DOUBLE
34587: LD_INT 1
34589: DEC
34590: ST_TO_ADDR
34591: LD_VAR 0 13
34595: PUSH
34596: FOR_TO
34597: IFFALSE 34959
// begin InitHc ;
34599: CALL_OW 19
// if not f then
34603: LD_VAR 0 12
34607: NOT
34608: IFFALSE 34697
// begin PrepareHuman ( false , i , skill ) ;
34610: LD_INT 0
34612: PPUSH
34613: LD_VAR 0 8
34617: PPUSH
34618: LD_VAR 0 4
34622: PPUSH
34623: CALL_OW 380
// un := CreateHuman ;
34627: LD_ADDR_VAR 0 14
34631: PUSH
34632: CALL_OW 44
34636: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
34637: LD_ADDR_VAR 0 7
34641: PUSH
34642: LD_VAR 0 7
34646: PPUSH
34647: LD_INT 1
34649: PPUSH
34650: LD_VAR 0 14
34654: PPUSH
34655: CALL_OW 2
34659: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
34660: LD_VAR 0 14
34664: PPUSH
34665: LD_VAR 0 1
34669: PPUSH
34670: CALL_OW 250
34674: PPUSH
34675: LD_VAR 0 1
34679: PPUSH
34680: CALL_OW 251
34684: PPUSH
34685: LD_INT 10
34687: PPUSH
34688: LD_INT 0
34690: PPUSH
34691: CALL_OW 50
// continue ;
34695: GO 34596
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
34697: LD_VAR 0 12
34701: PUSH
34702: LD_INT 1
34704: ARRAY
34705: PPUSH
34706: CALL_OW 313
34710: PUSH
34711: LD_VAR 0 12
34715: PUSH
34716: LD_INT 1
34718: ARRAY
34719: PPUSH
34720: CALL_OW 266
34724: PUSH
34725: LD_INT 32
34727: PUSH
34728: LD_INT 31
34730: PUSH
34731: EMPTY
34732: LIST
34733: LIST
34734: IN
34735: AND
34736: PUSH
34737: LD_VAR 0 12
34741: PUSH
34742: LD_INT 1
34744: ARRAY
34745: PPUSH
34746: CALL_OW 313
34750: PUSH
34751: LD_INT 6
34753: EQUAL
34754: OR
34755: IFFALSE 34775
// f := Delete ( f , 1 ) ;
34757: LD_ADDR_VAR 0 12
34761: PUSH
34762: LD_VAR 0 12
34766: PPUSH
34767: LD_INT 1
34769: PPUSH
34770: CALL_OW 3
34774: ST_TO_ADDR
// if not f then
34775: LD_VAR 0 12
34779: NOT
34780: IFFALSE 34798
// begin x := x + 2 ;
34782: LD_ADDR_VAR 0 13
34786: PUSH
34787: LD_VAR 0 13
34791: PUSH
34792: LD_INT 2
34794: PLUS
34795: ST_TO_ADDR
// continue ;
34796: GO 34596
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
34798: LD_VAR 0 12
34802: PUSH
34803: LD_INT 1
34805: ARRAY
34806: PPUSH
34807: CALL_OW 266
34811: PUSH
34812: LD_INT 5
34814: EQUAL
34815: IFFALSE 34889
// begin if UnitsInside ( f [ 1 ] ) < 3 then
34817: LD_VAR 0 12
34821: PUSH
34822: LD_INT 1
34824: ARRAY
34825: PPUSH
34826: CALL_OW 313
34830: PUSH
34831: LD_INT 3
34833: LESS
34834: IFFALSE 34870
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
34836: LD_INT 0
34838: PPUSH
34839: LD_INT 5
34841: PUSH
34842: LD_INT 8
34844: PUSH
34845: LD_INT 9
34847: PUSH
34848: EMPTY
34849: LIST
34850: LIST
34851: LIST
34852: PUSH
34853: LD_VAR 0 17
34857: ARRAY
34858: PPUSH
34859: LD_VAR 0 4
34863: PPUSH
34864: CALL_OW 380
34868: GO 34887
// PrepareHuman ( false , i , skill ) ;
34870: LD_INT 0
34872: PPUSH
34873: LD_VAR 0 8
34877: PPUSH
34878: LD_VAR 0 4
34882: PPUSH
34883: CALL_OW 380
// end else
34887: GO 34906
// PrepareHuman ( false , i , skill ) ;
34889: LD_INT 0
34891: PPUSH
34892: LD_VAR 0 8
34896: PPUSH
34897: LD_VAR 0 4
34901: PPUSH
34902: CALL_OW 380
// un := CreateHuman ;
34906: LD_ADDR_VAR 0 14
34910: PUSH
34911: CALL_OW 44
34915: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
34916: LD_ADDR_VAR 0 7
34920: PUSH
34921: LD_VAR 0 7
34925: PPUSH
34926: LD_INT 1
34928: PPUSH
34929: LD_VAR 0 14
34933: PPUSH
34934: CALL_OW 2
34938: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
34939: LD_VAR 0 14
34943: PPUSH
34944: LD_VAR 0 12
34948: PUSH
34949: LD_INT 1
34951: ARRAY
34952: PPUSH
34953: CALL_OW 52
// end ;
34957: GO 34596
34959: POP
34960: POP
// end ;
34961: GO 33898
34963: POP
34964: POP
// result := result ^ buildings ;
34965: LD_ADDR_VAR 0 7
34969: PUSH
34970: LD_VAR 0 7
34974: PUSH
34975: LD_VAR 0 18
34979: ADD
34980: ST_TO_ADDR
// end else
34981: GO 35124
// begin for i = 1 to personel do
34983: LD_ADDR_VAR 0 8
34987: PUSH
34988: DOUBLE
34989: LD_INT 1
34991: DEC
34992: ST_TO_ADDR
34993: LD_VAR 0 6
34997: PUSH
34998: FOR_TO
34999: IFFALSE 35122
// begin if i > 4 then
35001: LD_VAR 0 8
35005: PUSH
35006: LD_INT 4
35008: GREATER
35009: IFFALSE 35013
// break ;
35011: GO 35122
// x := personel [ i ] ;
35013: LD_ADDR_VAR 0 13
35017: PUSH
35018: LD_VAR 0 6
35022: PUSH
35023: LD_VAR 0 8
35027: ARRAY
35028: ST_TO_ADDR
// if x = - 1 then
35029: LD_VAR 0 13
35033: PUSH
35034: LD_INT 1
35036: NEG
35037: EQUAL
35038: IFFALSE 35042
// continue ;
35040: GO 34998
// PrepareHuman ( false , i , skill ) ;
35042: LD_INT 0
35044: PPUSH
35045: LD_VAR 0 8
35049: PPUSH
35050: LD_VAR 0 4
35054: PPUSH
35055: CALL_OW 380
// un := CreateHuman ;
35059: LD_ADDR_VAR 0 14
35063: PUSH
35064: CALL_OW 44
35068: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
35069: LD_VAR 0 14
35073: PPUSH
35074: LD_VAR 0 1
35078: PPUSH
35079: CALL_OW 250
35083: PPUSH
35084: LD_VAR 0 1
35088: PPUSH
35089: CALL_OW 251
35093: PPUSH
35094: LD_INT 10
35096: PPUSH
35097: LD_INT 0
35099: PPUSH
35100: CALL_OW 50
// result := result ^ un ;
35104: LD_ADDR_VAR 0 7
35108: PUSH
35109: LD_VAR 0 7
35113: PUSH
35114: LD_VAR 0 14
35118: ADD
35119: ST_TO_ADDR
// end ;
35120: GO 34998
35122: POP
35123: POP
// end ; end ;
35124: LD_VAR 0 7
35128: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
35129: LD_INT 0
35131: PPUSH
35132: PPUSH
35133: PPUSH
35134: PPUSH
35135: PPUSH
35136: PPUSH
35137: PPUSH
35138: PPUSH
35139: PPUSH
35140: PPUSH
35141: PPUSH
35142: PPUSH
35143: PPUSH
35144: PPUSH
35145: PPUSH
35146: PPUSH
// result := false ;
35147: LD_ADDR_VAR 0 3
35151: PUSH
35152: LD_INT 0
35154: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
35155: LD_VAR 0 1
35159: NOT
35160: PUSH
35161: LD_VAR 0 1
35165: PPUSH
35166: CALL_OW 266
35170: PUSH
35171: LD_INT 32
35173: PUSH
35174: LD_INT 33
35176: PUSH
35177: EMPTY
35178: LIST
35179: LIST
35180: IN
35181: NOT
35182: OR
35183: IFFALSE 35187
// exit ;
35185: GO 36326
// nat := GetNation ( tower ) ;
35187: LD_ADDR_VAR 0 12
35191: PUSH
35192: LD_VAR 0 1
35196: PPUSH
35197: CALL_OW 248
35201: ST_TO_ADDR
// side := GetSide ( tower ) ;
35202: LD_ADDR_VAR 0 16
35206: PUSH
35207: LD_VAR 0 1
35211: PPUSH
35212: CALL_OW 255
35216: ST_TO_ADDR
// x := GetX ( tower ) ;
35217: LD_ADDR_VAR 0 10
35221: PUSH
35222: LD_VAR 0 1
35226: PPUSH
35227: CALL_OW 250
35231: ST_TO_ADDR
// y := GetY ( tower ) ;
35232: LD_ADDR_VAR 0 11
35236: PUSH
35237: LD_VAR 0 1
35241: PPUSH
35242: CALL_OW 251
35246: ST_TO_ADDR
// if not x or not y then
35247: LD_VAR 0 10
35251: NOT
35252: PUSH
35253: LD_VAR 0 11
35257: NOT
35258: OR
35259: IFFALSE 35263
// exit ;
35261: GO 36326
// weapon := 0 ;
35263: LD_ADDR_VAR 0 18
35267: PUSH
35268: LD_INT 0
35270: ST_TO_ADDR
// fac_list := [ ] ;
35271: LD_ADDR_VAR 0 17
35275: PUSH
35276: EMPTY
35277: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
35278: LD_ADDR_VAR 0 6
35282: PUSH
35283: LD_VAR 0 1
35287: PPUSH
35288: CALL_OW 274
35292: PPUSH
35293: LD_VAR 0 2
35297: PPUSH
35298: LD_INT 0
35300: PPUSH
35301: CALL 32866 0 3
35305: PPUSH
35306: LD_INT 30
35308: PUSH
35309: LD_INT 3
35311: PUSH
35312: EMPTY
35313: LIST
35314: LIST
35315: PPUSH
35316: CALL_OW 72
35320: ST_TO_ADDR
// if not factories then
35321: LD_VAR 0 6
35325: NOT
35326: IFFALSE 35330
// exit ;
35328: GO 36326
// for i in factories do
35330: LD_ADDR_VAR 0 8
35334: PUSH
35335: LD_VAR 0 6
35339: PUSH
35340: FOR_IN
35341: IFFALSE 35366
// fac_list := fac_list union AvailableWeaponList ( i ) ;
35343: LD_ADDR_VAR 0 17
35347: PUSH
35348: LD_VAR 0 17
35352: PUSH
35353: LD_VAR 0 8
35357: PPUSH
35358: CALL_OW 478
35362: UNION
35363: ST_TO_ADDR
35364: GO 35340
35366: POP
35367: POP
// if not fac_list then
35368: LD_VAR 0 17
35372: NOT
35373: IFFALSE 35377
// exit ;
35375: GO 36326
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
35377: LD_ADDR_VAR 0 5
35381: PUSH
35382: LD_INT 4
35384: PUSH
35385: LD_INT 5
35387: PUSH
35388: LD_INT 9
35390: PUSH
35391: LD_INT 10
35393: PUSH
35394: LD_INT 6
35396: PUSH
35397: LD_INT 7
35399: PUSH
35400: LD_INT 11
35402: PUSH
35403: EMPTY
35404: LIST
35405: LIST
35406: LIST
35407: LIST
35408: LIST
35409: LIST
35410: LIST
35411: PUSH
35412: LD_INT 27
35414: PUSH
35415: LD_INT 28
35417: PUSH
35418: LD_INT 26
35420: PUSH
35421: LD_INT 30
35423: PUSH
35424: EMPTY
35425: LIST
35426: LIST
35427: LIST
35428: LIST
35429: PUSH
35430: LD_INT 43
35432: PUSH
35433: LD_INT 44
35435: PUSH
35436: LD_INT 46
35438: PUSH
35439: LD_INT 45
35441: PUSH
35442: LD_INT 47
35444: PUSH
35445: LD_INT 49
35447: PUSH
35448: EMPTY
35449: LIST
35450: LIST
35451: LIST
35452: LIST
35453: LIST
35454: LIST
35455: PUSH
35456: EMPTY
35457: LIST
35458: LIST
35459: LIST
35460: PUSH
35461: LD_VAR 0 12
35465: ARRAY
35466: ST_TO_ADDR
// for i in list do
35467: LD_ADDR_VAR 0 8
35471: PUSH
35472: LD_VAR 0 5
35476: PUSH
35477: FOR_IN
35478: IFFALSE 35511
// if not i in fac_list then
35480: LD_VAR 0 8
35484: PUSH
35485: LD_VAR 0 17
35489: IN
35490: NOT
35491: IFFALSE 35509
// list := list diff i ;
35493: LD_ADDR_VAR 0 5
35497: PUSH
35498: LD_VAR 0 5
35502: PUSH
35503: LD_VAR 0 8
35507: DIFF
35508: ST_TO_ADDR
35509: GO 35477
35511: POP
35512: POP
// if not list then
35513: LD_VAR 0 5
35517: NOT
35518: IFFALSE 35522
// exit ;
35520: GO 36326
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
35522: LD_VAR 0 12
35526: PUSH
35527: LD_INT 3
35529: EQUAL
35530: PUSH
35531: LD_INT 49
35533: PUSH
35534: LD_VAR 0 5
35538: IN
35539: AND
35540: PUSH
35541: LD_INT 31
35543: PPUSH
35544: LD_VAR 0 16
35548: PPUSH
35549: CALL_OW 321
35553: PUSH
35554: LD_INT 2
35556: EQUAL
35557: AND
35558: IFFALSE 35618
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
35560: LD_INT 22
35562: PUSH
35563: LD_VAR 0 16
35567: PUSH
35568: EMPTY
35569: LIST
35570: LIST
35571: PUSH
35572: LD_INT 35
35574: PUSH
35575: LD_INT 49
35577: PUSH
35578: EMPTY
35579: LIST
35580: LIST
35581: PUSH
35582: LD_INT 91
35584: PUSH
35585: LD_VAR 0 1
35589: PUSH
35590: LD_INT 10
35592: PUSH
35593: EMPTY
35594: LIST
35595: LIST
35596: LIST
35597: PUSH
35598: EMPTY
35599: LIST
35600: LIST
35601: LIST
35602: PPUSH
35603: CALL_OW 69
35607: NOT
35608: IFFALSE 35618
// weapon := ru_time_lapser ;
35610: LD_ADDR_VAR 0 18
35614: PUSH
35615: LD_INT 49
35617: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
35618: LD_VAR 0 12
35622: PUSH
35623: LD_INT 1
35625: PUSH
35626: LD_INT 2
35628: PUSH
35629: EMPTY
35630: LIST
35631: LIST
35632: IN
35633: PUSH
35634: LD_INT 11
35636: PUSH
35637: LD_VAR 0 5
35641: IN
35642: PUSH
35643: LD_INT 30
35645: PUSH
35646: LD_VAR 0 5
35650: IN
35651: OR
35652: AND
35653: PUSH
35654: LD_INT 6
35656: PPUSH
35657: LD_VAR 0 16
35661: PPUSH
35662: CALL_OW 321
35666: PUSH
35667: LD_INT 2
35669: EQUAL
35670: AND
35671: IFFALSE 35836
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
35673: LD_INT 22
35675: PUSH
35676: LD_VAR 0 16
35680: PUSH
35681: EMPTY
35682: LIST
35683: LIST
35684: PUSH
35685: LD_INT 2
35687: PUSH
35688: LD_INT 35
35690: PUSH
35691: LD_INT 11
35693: PUSH
35694: EMPTY
35695: LIST
35696: LIST
35697: PUSH
35698: LD_INT 35
35700: PUSH
35701: LD_INT 30
35703: PUSH
35704: EMPTY
35705: LIST
35706: LIST
35707: PUSH
35708: EMPTY
35709: LIST
35710: LIST
35711: LIST
35712: PUSH
35713: LD_INT 91
35715: PUSH
35716: LD_VAR 0 1
35720: PUSH
35721: LD_INT 18
35723: PUSH
35724: EMPTY
35725: LIST
35726: LIST
35727: LIST
35728: PUSH
35729: EMPTY
35730: LIST
35731: LIST
35732: LIST
35733: PPUSH
35734: CALL_OW 69
35738: NOT
35739: PUSH
35740: LD_INT 22
35742: PUSH
35743: LD_VAR 0 16
35747: PUSH
35748: EMPTY
35749: LIST
35750: LIST
35751: PUSH
35752: LD_INT 2
35754: PUSH
35755: LD_INT 30
35757: PUSH
35758: LD_INT 32
35760: PUSH
35761: EMPTY
35762: LIST
35763: LIST
35764: PUSH
35765: LD_INT 30
35767: PUSH
35768: LD_INT 33
35770: PUSH
35771: EMPTY
35772: LIST
35773: LIST
35774: PUSH
35775: EMPTY
35776: LIST
35777: LIST
35778: LIST
35779: PUSH
35780: LD_INT 91
35782: PUSH
35783: LD_VAR 0 1
35787: PUSH
35788: LD_INT 12
35790: PUSH
35791: EMPTY
35792: LIST
35793: LIST
35794: LIST
35795: PUSH
35796: EMPTY
35797: LIST
35798: LIST
35799: LIST
35800: PUSH
35801: EMPTY
35802: LIST
35803: PPUSH
35804: CALL_OW 69
35808: PUSH
35809: LD_INT 2
35811: GREATER
35812: AND
35813: IFFALSE 35836
// weapon := [ us_radar , ar_radar ] [ nat ] ;
35815: LD_ADDR_VAR 0 18
35819: PUSH
35820: LD_INT 11
35822: PUSH
35823: LD_INT 30
35825: PUSH
35826: EMPTY
35827: LIST
35828: LIST
35829: PUSH
35830: LD_VAR 0 12
35834: ARRAY
35835: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
35836: LD_VAR 0 18
35840: NOT
35841: PUSH
35842: LD_INT 40
35844: PPUSH
35845: LD_VAR 0 16
35849: PPUSH
35850: CALL_OW 321
35854: PUSH
35855: LD_INT 2
35857: EQUAL
35858: AND
35859: PUSH
35860: LD_INT 7
35862: PUSH
35863: LD_VAR 0 5
35867: IN
35868: PUSH
35869: LD_INT 28
35871: PUSH
35872: LD_VAR 0 5
35876: IN
35877: OR
35878: PUSH
35879: LD_INT 45
35881: PUSH
35882: LD_VAR 0 5
35886: IN
35887: OR
35888: AND
35889: IFFALSE 36143
// begin hex := GetHexInfo ( x , y ) ;
35891: LD_ADDR_VAR 0 4
35895: PUSH
35896: LD_VAR 0 10
35900: PPUSH
35901: LD_VAR 0 11
35905: PPUSH
35906: CALL_OW 546
35910: ST_TO_ADDR
// if hex [ 1 ] then
35911: LD_VAR 0 4
35915: PUSH
35916: LD_INT 1
35918: ARRAY
35919: IFFALSE 35923
// exit ;
35921: GO 36326
// height := hex [ 2 ] ;
35923: LD_ADDR_VAR 0 15
35927: PUSH
35928: LD_VAR 0 4
35932: PUSH
35933: LD_INT 2
35935: ARRAY
35936: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
35937: LD_ADDR_VAR 0 14
35941: PUSH
35942: LD_INT 0
35944: PUSH
35945: LD_INT 2
35947: PUSH
35948: LD_INT 3
35950: PUSH
35951: LD_INT 5
35953: PUSH
35954: EMPTY
35955: LIST
35956: LIST
35957: LIST
35958: LIST
35959: ST_TO_ADDR
// for i in tmp do
35960: LD_ADDR_VAR 0 8
35964: PUSH
35965: LD_VAR 0 14
35969: PUSH
35970: FOR_IN
35971: IFFALSE 36141
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
35973: LD_ADDR_VAR 0 9
35977: PUSH
35978: LD_VAR 0 10
35982: PPUSH
35983: LD_VAR 0 8
35987: PPUSH
35988: LD_INT 5
35990: PPUSH
35991: CALL_OW 272
35995: PUSH
35996: LD_VAR 0 11
36000: PPUSH
36001: LD_VAR 0 8
36005: PPUSH
36006: LD_INT 5
36008: PPUSH
36009: CALL_OW 273
36013: PUSH
36014: EMPTY
36015: LIST
36016: LIST
36017: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
36018: LD_VAR 0 9
36022: PUSH
36023: LD_INT 1
36025: ARRAY
36026: PPUSH
36027: LD_VAR 0 9
36031: PUSH
36032: LD_INT 2
36034: ARRAY
36035: PPUSH
36036: CALL_OW 488
36040: IFFALSE 36139
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
36042: LD_ADDR_VAR 0 4
36046: PUSH
36047: LD_VAR 0 9
36051: PUSH
36052: LD_INT 1
36054: ARRAY
36055: PPUSH
36056: LD_VAR 0 9
36060: PUSH
36061: LD_INT 2
36063: ARRAY
36064: PPUSH
36065: CALL_OW 546
36069: ST_TO_ADDR
// if hex [ 1 ] then
36070: LD_VAR 0 4
36074: PUSH
36075: LD_INT 1
36077: ARRAY
36078: IFFALSE 36082
// continue ;
36080: GO 35970
// h := hex [ 2 ] ;
36082: LD_ADDR_VAR 0 13
36086: PUSH
36087: LD_VAR 0 4
36091: PUSH
36092: LD_INT 2
36094: ARRAY
36095: ST_TO_ADDR
// if h + 7 < height then
36096: LD_VAR 0 13
36100: PUSH
36101: LD_INT 7
36103: PLUS
36104: PUSH
36105: LD_VAR 0 15
36109: LESS
36110: IFFALSE 36139
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
36112: LD_ADDR_VAR 0 18
36116: PUSH
36117: LD_INT 7
36119: PUSH
36120: LD_INT 28
36122: PUSH
36123: LD_INT 45
36125: PUSH
36126: EMPTY
36127: LIST
36128: LIST
36129: LIST
36130: PUSH
36131: LD_VAR 0 12
36135: ARRAY
36136: ST_TO_ADDR
// break ;
36137: GO 36141
// end ; end ; end ;
36139: GO 35970
36141: POP
36142: POP
// end ; if not weapon then
36143: LD_VAR 0 18
36147: NOT
36148: IFFALSE 36208
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
36150: LD_ADDR_VAR 0 5
36154: PUSH
36155: LD_VAR 0 5
36159: PUSH
36160: LD_INT 11
36162: PUSH
36163: LD_INT 30
36165: PUSH
36166: LD_INT 49
36168: PUSH
36169: EMPTY
36170: LIST
36171: LIST
36172: LIST
36173: DIFF
36174: ST_TO_ADDR
// if not list then
36175: LD_VAR 0 5
36179: NOT
36180: IFFALSE 36184
// exit ;
36182: GO 36326
// weapon := list [ rand ( 1 , list ) ] ;
36184: LD_ADDR_VAR 0 18
36188: PUSH
36189: LD_VAR 0 5
36193: PUSH
36194: LD_INT 1
36196: PPUSH
36197: LD_VAR 0 5
36201: PPUSH
36202: CALL_OW 12
36206: ARRAY
36207: ST_TO_ADDR
// end ; if weapon then
36208: LD_VAR 0 18
36212: IFFALSE 36326
// begin tmp := CostOfWeapon ( weapon ) ;
36214: LD_ADDR_VAR 0 14
36218: PUSH
36219: LD_VAR 0 18
36223: PPUSH
36224: CALL_OW 451
36228: ST_TO_ADDR
// j := GetBase ( tower ) ;
36229: LD_ADDR_VAR 0 9
36233: PUSH
36234: LD_VAR 0 1
36238: PPUSH
36239: CALL_OW 274
36243: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
36244: LD_VAR 0 9
36248: PPUSH
36249: LD_INT 1
36251: PPUSH
36252: CALL_OW 275
36256: PUSH
36257: LD_VAR 0 14
36261: PUSH
36262: LD_INT 1
36264: ARRAY
36265: GREATEREQUAL
36266: PUSH
36267: LD_VAR 0 9
36271: PPUSH
36272: LD_INT 2
36274: PPUSH
36275: CALL_OW 275
36279: PUSH
36280: LD_VAR 0 14
36284: PUSH
36285: LD_INT 2
36287: ARRAY
36288: GREATEREQUAL
36289: AND
36290: PUSH
36291: LD_VAR 0 9
36295: PPUSH
36296: LD_INT 3
36298: PPUSH
36299: CALL_OW 275
36303: PUSH
36304: LD_VAR 0 14
36308: PUSH
36309: LD_INT 3
36311: ARRAY
36312: GREATEREQUAL
36313: AND
36314: IFFALSE 36326
// result := weapon ;
36316: LD_ADDR_VAR 0 3
36320: PUSH
36321: LD_VAR 0 18
36325: ST_TO_ADDR
// end ; end ;
36326: LD_VAR 0 3
36330: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
36331: LD_INT 0
36333: PPUSH
36334: PPUSH
// result := true ;
36335: LD_ADDR_VAR 0 3
36339: PUSH
36340: LD_INT 1
36342: ST_TO_ADDR
// if array1 = array2 then
36343: LD_VAR 0 1
36347: PUSH
36348: LD_VAR 0 2
36352: EQUAL
36353: IFFALSE 36413
// begin for i = 1 to array1 do
36355: LD_ADDR_VAR 0 4
36359: PUSH
36360: DOUBLE
36361: LD_INT 1
36363: DEC
36364: ST_TO_ADDR
36365: LD_VAR 0 1
36369: PUSH
36370: FOR_TO
36371: IFFALSE 36409
// if array1 [ i ] <> array2 [ i ] then
36373: LD_VAR 0 1
36377: PUSH
36378: LD_VAR 0 4
36382: ARRAY
36383: PUSH
36384: LD_VAR 0 2
36388: PUSH
36389: LD_VAR 0 4
36393: ARRAY
36394: NONEQUAL
36395: IFFALSE 36407
// begin result := false ;
36397: LD_ADDR_VAR 0 3
36401: PUSH
36402: LD_INT 0
36404: ST_TO_ADDR
// break ;
36405: GO 36409
// end ;
36407: GO 36370
36409: POP
36410: POP
// end else
36411: GO 36421
// result := false ;
36413: LD_ADDR_VAR 0 3
36417: PUSH
36418: LD_INT 0
36420: ST_TO_ADDR
// end ;
36421: LD_VAR 0 3
36425: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
36426: LD_INT 0
36428: PPUSH
36429: PPUSH
// if not array1 or not array2 then
36430: LD_VAR 0 1
36434: NOT
36435: PUSH
36436: LD_VAR 0 2
36440: NOT
36441: OR
36442: IFFALSE 36446
// exit ;
36444: GO 36510
// result := true ;
36446: LD_ADDR_VAR 0 3
36450: PUSH
36451: LD_INT 1
36453: ST_TO_ADDR
// for i = 1 to array1 do
36454: LD_ADDR_VAR 0 4
36458: PUSH
36459: DOUBLE
36460: LD_INT 1
36462: DEC
36463: ST_TO_ADDR
36464: LD_VAR 0 1
36468: PUSH
36469: FOR_TO
36470: IFFALSE 36508
// if array1 [ i ] <> array2 [ i ] then
36472: LD_VAR 0 1
36476: PUSH
36477: LD_VAR 0 4
36481: ARRAY
36482: PUSH
36483: LD_VAR 0 2
36487: PUSH
36488: LD_VAR 0 4
36492: ARRAY
36493: NONEQUAL
36494: IFFALSE 36506
// begin result := false ;
36496: LD_ADDR_VAR 0 3
36500: PUSH
36501: LD_INT 0
36503: ST_TO_ADDR
// break ;
36504: GO 36508
// end ;
36506: GO 36469
36508: POP
36509: POP
// end ;
36510: LD_VAR 0 3
36514: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
36515: LD_INT 0
36517: PPUSH
36518: PPUSH
36519: PPUSH
// pom := GetBase ( fac ) ;
36520: LD_ADDR_VAR 0 5
36524: PUSH
36525: LD_VAR 0 1
36529: PPUSH
36530: CALL_OW 274
36534: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
36535: LD_ADDR_VAR 0 4
36539: PUSH
36540: LD_VAR 0 2
36544: PUSH
36545: LD_INT 1
36547: ARRAY
36548: PPUSH
36549: LD_VAR 0 2
36553: PUSH
36554: LD_INT 2
36556: ARRAY
36557: PPUSH
36558: LD_VAR 0 2
36562: PUSH
36563: LD_INT 3
36565: ARRAY
36566: PPUSH
36567: LD_VAR 0 2
36571: PUSH
36572: LD_INT 4
36574: ARRAY
36575: PPUSH
36576: CALL_OW 449
36580: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
36581: LD_ADDR_VAR 0 3
36585: PUSH
36586: LD_VAR 0 5
36590: PPUSH
36591: LD_INT 1
36593: PPUSH
36594: CALL_OW 275
36598: PUSH
36599: LD_VAR 0 4
36603: PUSH
36604: LD_INT 1
36606: ARRAY
36607: GREATEREQUAL
36608: PUSH
36609: LD_VAR 0 5
36613: PPUSH
36614: LD_INT 2
36616: PPUSH
36617: CALL_OW 275
36621: PUSH
36622: LD_VAR 0 4
36626: PUSH
36627: LD_INT 2
36629: ARRAY
36630: GREATEREQUAL
36631: AND
36632: PUSH
36633: LD_VAR 0 5
36637: PPUSH
36638: LD_INT 3
36640: PPUSH
36641: CALL_OW 275
36645: PUSH
36646: LD_VAR 0 4
36650: PUSH
36651: LD_INT 3
36653: ARRAY
36654: GREATEREQUAL
36655: AND
36656: ST_TO_ADDR
// end ;
36657: LD_VAR 0 3
36661: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
36662: LD_INT 0
36664: PPUSH
36665: PPUSH
36666: PPUSH
36667: PPUSH
// pom := GetBase ( building ) ;
36668: LD_ADDR_VAR 0 3
36672: PUSH
36673: LD_VAR 0 1
36677: PPUSH
36678: CALL_OW 274
36682: ST_TO_ADDR
// if not pom then
36683: LD_VAR 0 3
36687: NOT
36688: IFFALSE 36692
// exit ;
36690: GO 36862
// btype := GetBType ( building ) ;
36692: LD_ADDR_VAR 0 5
36696: PUSH
36697: LD_VAR 0 1
36701: PPUSH
36702: CALL_OW 266
36706: ST_TO_ADDR
// if btype = b_armoury then
36707: LD_VAR 0 5
36711: PUSH
36712: LD_INT 4
36714: EQUAL
36715: IFFALSE 36725
// btype := b_barracks ;
36717: LD_ADDR_VAR 0 5
36721: PUSH
36722: LD_INT 5
36724: ST_TO_ADDR
// if btype = b_depot then
36725: LD_VAR 0 5
36729: PUSH
36730: LD_INT 0
36732: EQUAL
36733: IFFALSE 36743
// btype := b_warehouse ;
36735: LD_ADDR_VAR 0 5
36739: PUSH
36740: LD_INT 1
36742: ST_TO_ADDR
// if btype = b_workshop then
36743: LD_VAR 0 5
36747: PUSH
36748: LD_INT 2
36750: EQUAL
36751: IFFALSE 36761
// btype := b_factory ;
36753: LD_ADDR_VAR 0 5
36757: PUSH
36758: LD_INT 3
36760: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
36761: LD_ADDR_VAR 0 4
36765: PUSH
36766: LD_VAR 0 5
36770: PPUSH
36771: LD_VAR 0 1
36775: PPUSH
36776: CALL_OW 248
36780: PPUSH
36781: CALL_OW 450
36785: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
36786: LD_ADDR_VAR 0 2
36790: PUSH
36791: LD_VAR 0 3
36795: PPUSH
36796: LD_INT 1
36798: PPUSH
36799: CALL_OW 275
36803: PUSH
36804: LD_VAR 0 4
36808: PUSH
36809: LD_INT 1
36811: ARRAY
36812: GREATEREQUAL
36813: PUSH
36814: LD_VAR 0 3
36818: PPUSH
36819: LD_INT 2
36821: PPUSH
36822: CALL_OW 275
36826: PUSH
36827: LD_VAR 0 4
36831: PUSH
36832: LD_INT 2
36834: ARRAY
36835: GREATEREQUAL
36836: AND
36837: PUSH
36838: LD_VAR 0 3
36842: PPUSH
36843: LD_INT 3
36845: PPUSH
36846: CALL_OW 275
36850: PUSH
36851: LD_VAR 0 4
36855: PUSH
36856: LD_INT 3
36858: ARRAY
36859: GREATEREQUAL
36860: AND
36861: ST_TO_ADDR
// end ;
36862: LD_VAR 0 2
36866: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
36867: LD_INT 0
36869: PPUSH
36870: PPUSH
36871: PPUSH
// pom := GetBase ( building ) ;
36872: LD_ADDR_VAR 0 4
36876: PUSH
36877: LD_VAR 0 1
36881: PPUSH
36882: CALL_OW 274
36886: ST_TO_ADDR
// if not pom then
36887: LD_VAR 0 4
36891: NOT
36892: IFFALSE 36896
// exit ;
36894: GO 36997
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
36896: LD_ADDR_VAR 0 5
36900: PUSH
36901: LD_VAR 0 2
36905: PPUSH
36906: LD_VAR 0 1
36910: PPUSH
36911: CALL_OW 248
36915: PPUSH
36916: CALL_OW 450
36920: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
36921: LD_ADDR_VAR 0 3
36925: PUSH
36926: LD_VAR 0 4
36930: PPUSH
36931: LD_INT 1
36933: PPUSH
36934: CALL_OW 275
36938: PUSH
36939: LD_VAR 0 5
36943: PUSH
36944: LD_INT 1
36946: ARRAY
36947: GREATEREQUAL
36948: PUSH
36949: LD_VAR 0 4
36953: PPUSH
36954: LD_INT 2
36956: PPUSH
36957: CALL_OW 275
36961: PUSH
36962: LD_VAR 0 5
36966: PUSH
36967: LD_INT 2
36969: ARRAY
36970: GREATEREQUAL
36971: AND
36972: PUSH
36973: LD_VAR 0 4
36977: PPUSH
36978: LD_INT 3
36980: PPUSH
36981: CALL_OW 275
36985: PUSH
36986: LD_VAR 0 5
36990: PUSH
36991: LD_INT 3
36993: ARRAY
36994: GREATEREQUAL
36995: AND
36996: ST_TO_ADDR
// end ;
36997: LD_VAR 0 3
37001: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
37002: LD_INT 0
37004: PPUSH
37005: PPUSH
37006: PPUSH
37007: PPUSH
37008: PPUSH
37009: PPUSH
37010: PPUSH
37011: PPUSH
37012: PPUSH
37013: PPUSH
37014: PPUSH
// result := false ;
37015: LD_ADDR_VAR 0 8
37019: PUSH
37020: LD_INT 0
37022: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
37023: LD_VAR 0 5
37027: NOT
37028: PUSH
37029: LD_VAR 0 1
37033: NOT
37034: OR
37035: PUSH
37036: LD_VAR 0 2
37040: NOT
37041: OR
37042: PUSH
37043: LD_VAR 0 3
37047: NOT
37048: OR
37049: IFFALSE 37053
// exit ;
37051: GO 37867
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
37053: LD_ADDR_VAR 0 14
37057: PUSH
37058: LD_VAR 0 1
37062: PPUSH
37063: LD_VAR 0 2
37067: PPUSH
37068: LD_VAR 0 3
37072: PPUSH
37073: LD_VAR 0 4
37077: PPUSH
37078: LD_VAR 0 5
37082: PUSH
37083: LD_INT 1
37085: ARRAY
37086: PPUSH
37087: CALL_OW 248
37091: PPUSH
37092: LD_INT 0
37094: PPUSH
37095: CALL 38704 0 6
37099: ST_TO_ADDR
// if not hexes then
37100: LD_VAR 0 14
37104: NOT
37105: IFFALSE 37109
// exit ;
37107: GO 37867
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
37109: LD_ADDR_VAR 0 17
37113: PUSH
37114: LD_VAR 0 5
37118: PPUSH
37119: LD_INT 22
37121: PUSH
37122: LD_VAR 0 13
37126: PPUSH
37127: CALL_OW 255
37131: PUSH
37132: EMPTY
37133: LIST
37134: LIST
37135: PUSH
37136: LD_INT 2
37138: PUSH
37139: LD_INT 30
37141: PUSH
37142: LD_INT 0
37144: PUSH
37145: EMPTY
37146: LIST
37147: LIST
37148: PUSH
37149: LD_INT 30
37151: PUSH
37152: LD_INT 1
37154: PUSH
37155: EMPTY
37156: LIST
37157: LIST
37158: PUSH
37159: EMPTY
37160: LIST
37161: LIST
37162: LIST
37163: PUSH
37164: EMPTY
37165: LIST
37166: LIST
37167: PPUSH
37168: CALL_OW 72
37172: ST_TO_ADDR
// for i = 1 to hexes do
37173: LD_ADDR_VAR 0 9
37177: PUSH
37178: DOUBLE
37179: LD_INT 1
37181: DEC
37182: ST_TO_ADDR
37183: LD_VAR 0 14
37187: PUSH
37188: FOR_TO
37189: IFFALSE 37865
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
37191: LD_ADDR_VAR 0 13
37195: PUSH
37196: LD_VAR 0 14
37200: PUSH
37201: LD_VAR 0 9
37205: ARRAY
37206: PUSH
37207: LD_INT 1
37209: ARRAY
37210: PPUSH
37211: LD_VAR 0 14
37215: PUSH
37216: LD_VAR 0 9
37220: ARRAY
37221: PUSH
37222: LD_INT 2
37224: ARRAY
37225: PPUSH
37226: CALL_OW 428
37230: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
37231: LD_VAR 0 14
37235: PUSH
37236: LD_VAR 0 9
37240: ARRAY
37241: PUSH
37242: LD_INT 1
37244: ARRAY
37245: PPUSH
37246: LD_VAR 0 14
37250: PUSH
37251: LD_VAR 0 9
37255: ARRAY
37256: PUSH
37257: LD_INT 2
37259: ARRAY
37260: PPUSH
37261: CALL_OW 351
37265: PUSH
37266: LD_VAR 0 14
37270: PUSH
37271: LD_VAR 0 9
37275: ARRAY
37276: PUSH
37277: LD_INT 1
37279: ARRAY
37280: PPUSH
37281: LD_VAR 0 14
37285: PUSH
37286: LD_VAR 0 9
37290: ARRAY
37291: PUSH
37292: LD_INT 2
37294: ARRAY
37295: PPUSH
37296: CALL_OW 488
37300: NOT
37301: OR
37302: PUSH
37303: LD_VAR 0 13
37307: PPUSH
37308: CALL_OW 247
37312: PUSH
37313: LD_INT 3
37315: EQUAL
37316: OR
37317: IFFALSE 37323
// exit ;
37319: POP
37320: POP
37321: GO 37867
// if not tmp then
37323: LD_VAR 0 13
37327: NOT
37328: IFFALSE 37332
// continue ;
37330: GO 37188
// result := true ;
37332: LD_ADDR_VAR 0 8
37336: PUSH
37337: LD_INT 1
37339: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
37340: LD_VAR 0 6
37344: PUSH
37345: LD_VAR 0 13
37349: PPUSH
37350: CALL_OW 247
37354: PUSH
37355: LD_INT 2
37357: EQUAL
37358: AND
37359: PUSH
37360: LD_VAR 0 13
37364: PPUSH
37365: CALL_OW 263
37369: PUSH
37370: LD_INT 1
37372: EQUAL
37373: AND
37374: IFFALSE 37538
// begin if IsDrivenBy ( tmp ) then
37376: LD_VAR 0 13
37380: PPUSH
37381: CALL_OW 311
37385: IFFALSE 37389
// continue ;
37387: GO 37188
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
37389: LD_VAR 0 6
37393: PPUSH
37394: LD_INT 3
37396: PUSH
37397: LD_INT 60
37399: PUSH
37400: EMPTY
37401: LIST
37402: PUSH
37403: EMPTY
37404: LIST
37405: LIST
37406: PUSH
37407: LD_INT 3
37409: PUSH
37410: LD_INT 55
37412: PUSH
37413: EMPTY
37414: LIST
37415: PUSH
37416: EMPTY
37417: LIST
37418: LIST
37419: PUSH
37420: EMPTY
37421: LIST
37422: LIST
37423: PPUSH
37424: CALL_OW 72
37428: IFFALSE 37536
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
37430: LD_ADDR_VAR 0 18
37434: PUSH
37435: LD_VAR 0 6
37439: PPUSH
37440: LD_INT 3
37442: PUSH
37443: LD_INT 60
37445: PUSH
37446: EMPTY
37447: LIST
37448: PUSH
37449: EMPTY
37450: LIST
37451: LIST
37452: PUSH
37453: LD_INT 3
37455: PUSH
37456: LD_INT 55
37458: PUSH
37459: EMPTY
37460: LIST
37461: PUSH
37462: EMPTY
37463: LIST
37464: LIST
37465: PUSH
37466: EMPTY
37467: LIST
37468: LIST
37469: PPUSH
37470: CALL_OW 72
37474: PUSH
37475: LD_INT 1
37477: ARRAY
37478: ST_TO_ADDR
// if IsInUnit ( driver ) then
37479: LD_VAR 0 18
37483: PPUSH
37484: CALL_OW 310
37488: IFFALSE 37499
// ComExit ( driver ) ;
37490: LD_VAR 0 18
37494: PPUSH
37495: CALL 61888 0 1
// AddComEnterUnit ( driver , tmp ) ;
37499: LD_VAR 0 18
37503: PPUSH
37504: LD_VAR 0 13
37508: PPUSH
37509: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
37513: LD_VAR 0 18
37517: PPUSH
37518: LD_VAR 0 7
37522: PPUSH
37523: CALL_OW 173
// AddComExitVehicle ( driver ) ;
37527: LD_VAR 0 18
37531: PPUSH
37532: CALL_OW 181
// end ; continue ;
37536: GO 37188
// end ; if not cleaners or not tmp in cleaners then
37538: LD_VAR 0 6
37542: NOT
37543: PUSH
37544: LD_VAR 0 13
37548: PUSH
37549: LD_VAR 0 6
37553: IN
37554: NOT
37555: OR
37556: IFFALSE 37863
// begin if dep then
37558: LD_VAR 0 17
37562: IFFALSE 37698
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
37564: LD_ADDR_VAR 0 16
37568: PUSH
37569: LD_VAR 0 17
37573: PUSH
37574: LD_INT 1
37576: ARRAY
37577: PPUSH
37578: CALL_OW 250
37582: PPUSH
37583: LD_VAR 0 17
37587: PUSH
37588: LD_INT 1
37590: ARRAY
37591: PPUSH
37592: CALL_OW 254
37596: PPUSH
37597: LD_INT 5
37599: PPUSH
37600: CALL_OW 272
37604: PUSH
37605: LD_VAR 0 17
37609: PUSH
37610: LD_INT 1
37612: ARRAY
37613: PPUSH
37614: CALL_OW 251
37618: PPUSH
37619: LD_VAR 0 17
37623: PUSH
37624: LD_INT 1
37626: ARRAY
37627: PPUSH
37628: CALL_OW 254
37632: PPUSH
37633: LD_INT 5
37635: PPUSH
37636: CALL_OW 273
37640: PUSH
37641: EMPTY
37642: LIST
37643: LIST
37644: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
37645: LD_VAR 0 16
37649: PUSH
37650: LD_INT 1
37652: ARRAY
37653: PPUSH
37654: LD_VAR 0 16
37658: PUSH
37659: LD_INT 2
37661: ARRAY
37662: PPUSH
37663: CALL_OW 488
37667: IFFALSE 37698
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
37669: LD_VAR 0 13
37673: PPUSH
37674: LD_VAR 0 16
37678: PUSH
37679: LD_INT 1
37681: ARRAY
37682: PPUSH
37683: LD_VAR 0 16
37687: PUSH
37688: LD_INT 2
37690: ARRAY
37691: PPUSH
37692: CALL_OW 111
// continue ;
37696: GO 37188
// end ; end ; r := GetDir ( tmp ) ;
37698: LD_ADDR_VAR 0 15
37702: PUSH
37703: LD_VAR 0 13
37707: PPUSH
37708: CALL_OW 254
37712: ST_TO_ADDR
// if r = 5 then
37713: LD_VAR 0 15
37717: PUSH
37718: LD_INT 5
37720: EQUAL
37721: IFFALSE 37731
// r := 0 ;
37723: LD_ADDR_VAR 0 15
37727: PUSH
37728: LD_INT 0
37730: ST_TO_ADDR
// for j = r to 5 do
37731: LD_ADDR_VAR 0 10
37735: PUSH
37736: DOUBLE
37737: LD_VAR 0 15
37741: DEC
37742: ST_TO_ADDR
37743: LD_INT 5
37745: PUSH
37746: FOR_TO
37747: IFFALSE 37861
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
37749: LD_ADDR_VAR 0 11
37753: PUSH
37754: LD_VAR 0 13
37758: PPUSH
37759: CALL_OW 250
37763: PPUSH
37764: LD_VAR 0 10
37768: PPUSH
37769: LD_INT 2
37771: PPUSH
37772: CALL_OW 272
37776: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
37777: LD_ADDR_VAR 0 12
37781: PUSH
37782: LD_VAR 0 13
37786: PPUSH
37787: CALL_OW 251
37791: PPUSH
37792: LD_VAR 0 10
37796: PPUSH
37797: LD_INT 2
37799: PPUSH
37800: CALL_OW 273
37804: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
37805: LD_VAR 0 11
37809: PPUSH
37810: LD_VAR 0 12
37814: PPUSH
37815: CALL_OW 488
37819: PUSH
37820: LD_VAR 0 11
37824: PPUSH
37825: LD_VAR 0 12
37829: PPUSH
37830: CALL_OW 428
37834: NOT
37835: AND
37836: IFFALSE 37859
// begin ComMoveXY ( tmp , _x , _y ) ;
37838: LD_VAR 0 13
37842: PPUSH
37843: LD_VAR 0 11
37847: PPUSH
37848: LD_VAR 0 12
37852: PPUSH
37853: CALL_OW 111
// break ;
37857: GO 37861
// end ; end ;
37859: GO 37746
37861: POP
37862: POP
// end ; end ;
37863: GO 37188
37865: POP
37866: POP
// end ;
37867: LD_VAR 0 8
37871: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
37872: LD_INT 0
37874: PPUSH
37875: PPUSH
37876: PPUSH
37877: PPUSH
37878: PPUSH
37879: PPUSH
37880: PPUSH
37881: PPUSH
37882: PPUSH
37883: PPUSH
// result := false ;
37884: LD_ADDR_VAR 0 6
37888: PUSH
37889: LD_INT 0
37891: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
37892: LD_VAR 0 1
37896: NOT
37897: PUSH
37898: LD_VAR 0 1
37902: PPUSH
37903: CALL_OW 266
37907: PUSH
37908: LD_INT 0
37910: PUSH
37911: LD_INT 1
37913: PUSH
37914: EMPTY
37915: LIST
37916: LIST
37917: IN
37918: NOT
37919: OR
37920: PUSH
37921: LD_VAR 0 2
37925: NOT
37926: OR
37927: PUSH
37928: LD_VAR 0 5
37932: PUSH
37933: LD_INT 0
37935: PUSH
37936: LD_INT 1
37938: PUSH
37939: LD_INT 2
37941: PUSH
37942: LD_INT 3
37944: PUSH
37945: LD_INT 4
37947: PUSH
37948: LD_INT 5
37950: PUSH
37951: EMPTY
37952: LIST
37953: LIST
37954: LIST
37955: LIST
37956: LIST
37957: LIST
37958: IN
37959: NOT
37960: OR
37961: PUSH
37962: LD_VAR 0 3
37966: PPUSH
37967: LD_VAR 0 4
37971: PPUSH
37972: CALL_OW 488
37976: NOT
37977: OR
37978: IFFALSE 37982
// exit ;
37980: GO 38699
// pom := GetBase ( depot ) ;
37982: LD_ADDR_VAR 0 10
37986: PUSH
37987: LD_VAR 0 1
37991: PPUSH
37992: CALL_OW 274
37996: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
37997: LD_ADDR_VAR 0 11
38001: PUSH
38002: LD_VAR 0 2
38006: PPUSH
38007: LD_VAR 0 1
38011: PPUSH
38012: CALL_OW 248
38016: PPUSH
38017: CALL_OW 450
38021: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
38022: LD_VAR 0 10
38026: PPUSH
38027: LD_INT 1
38029: PPUSH
38030: CALL_OW 275
38034: PUSH
38035: LD_VAR 0 11
38039: PUSH
38040: LD_INT 1
38042: ARRAY
38043: GREATEREQUAL
38044: PUSH
38045: LD_VAR 0 10
38049: PPUSH
38050: LD_INT 2
38052: PPUSH
38053: CALL_OW 275
38057: PUSH
38058: LD_VAR 0 11
38062: PUSH
38063: LD_INT 2
38065: ARRAY
38066: GREATEREQUAL
38067: AND
38068: PUSH
38069: LD_VAR 0 10
38073: PPUSH
38074: LD_INT 3
38076: PPUSH
38077: CALL_OW 275
38081: PUSH
38082: LD_VAR 0 11
38086: PUSH
38087: LD_INT 3
38089: ARRAY
38090: GREATEREQUAL
38091: AND
38092: NOT
38093: IFFALSE 38097
// exit ;
38095: GO 38699
// if GetBType ( depot ) = b_depot then
38097: LD_VAR 0 1
38101: PPUSH
38102: CALL_OW 266
38106: PUSH
38107: LD_INT 0
38109: EQUAL
38110: IFFALSE 38122
// dist := 28 else
38112: LD_ADDR_VAR 0 14
38116: PUSH
38117: LD_INT 28
38119: ST_TO_ADDR
38120: GO 38130
// dist := 36 ;
38122: LD_ADDR_VAR 0 14
38126: PUSH
38127: LD_INT 36
38129: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
38130: LD_VAR 0 1
38134: PPUSH
38135: LD_VAR 0 3
38139: PPUSH
38140: LD_VAR 0 4
38144: PPUSH
38145: CALL_OW 297
38149: PUSH
38150: LD_VAR 0 14
38154: GREATER
38155: IFFALSE 38159
// exit ;
38157: GO 38699
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
38159: LD_ADDR_VAR 0 12
38163: PUSH
38164: LD_VAR 0 2
38168: PPUSH
38169: LD_VAR 0 3
38173: PPUSH
38174: LD_VAR 0 4
38178: PPUSH
38179: LD_VAR 0 5
38183: PPUSH
38184: LD_VAR 0 1
38188: PPUSH
38189: CALL_OW 248
38193: PPUSH
38194: LD_INT 0
38196: PPUSH
38197: CALL 38704 0 6
38201: ST_TO_ADDR
// if not hexes then
38202: LD_VAR 0 12
38206: NOT
38207: IFFALSE 38211
// exit ;
38209: GO 38699
// hex := GetHexInfo ( x , y ) ;
38211: LD_ADDR_VAR 0 15
38215: PUSH
38216: LD_VAR 0 3
38220: PPUSH
38221: LD_VAR 0 4
38225: PPUSH
38226: CALL_OW 546
38230: ST_TO_ADDR
// if hex [ 1 ] then
38231: LD_VAR 0 15
38235: PUSH
38236: LD_INT 1
38238: ARRAY
38239: IFFALSE 38243
// exit ;
38241: GO 38699
// height := hex [ 2 ] ;
38243: LD_ADDR_VAR 0 13
38247: PUSH
38248: LD_VAR 0 15
38252: PUSH
38253: LD_INT 2
38255: ARRAY
38256: ST_TO_ADDR
// for i = 1 to hexes do
38257: LD_ADDR_VAR 0 7
38261: PUSH
38262: DOUBLE
38263: LD_INT 1
38265: DEC
38266: ST_TO_ADDR
38267: LD_VAR 0 12
38271: PUSH
38272: FOR_TO
38273: IFFALSE 38603
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
38275: LD_VAR 0 12
38279: PUSH
38280: LD_VAR 0 7
38284: ARRAY
38285: PUSH
38286: LD_INT 1
38288: ARRAY
38289: PPUSH
38290: LD_VAR 0 12
38294: PUSH
38295: LD_VAR 0 7
38299: ARRAY
38300: PUSH
38301: LD_INT 2
38303: ARRAY
38304: PPUSH
38305: CALL_OW 488
38309: NOT
38310: PUSH
38311: LD_VAR 0 12
38315: PUSH
38316: LD_VAR 0 7
38320: ARRAY
38321: PUSH
38322: LD_INT 1
38324: ARRAY
38325: PPUSH
38326: LD_VAR 0 12
38330: PUSH
38331: LD_VAR 0 7
38335: ARRAY
38336: PUSH
38337: LD_INT 2
38339: ARRAY
38340: PPUSH
38341: CALL_OW 428
38345: PUSH
38346: LD_INT 0
38348: GREATER
38349: OR
38350: PUSH
38351: LD_VAR 0 12
38355: PUSH
38356: LD_VAR 0 7
38360: ARRAY
38361: PUSH
38362: LD_INT 1
38364: ARRAY
38365: PPUSH
38366: LD_VAR 0 12
38370: PUSH
38371: LD_VAR 0 7
38375: ARRAY
38376: PUSH
38377: LD_INT 2
38379: ARRAY
38380: PPUSH
38381: CALL_OW 351
38385: OR
38386: IFFALSE 38392
// exit ;
38388: POP
38389: POP
38390: GO 38699
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
38392: LD_ADDR_VAR 0 8
38396: PUSH
38397: LD_VAR 0 12
38401: PUSH
38402: LD_VAR 0 7
38406: ARRAY
38407: PUSH
38408: LD_INT 1
38410: ARRAY
38411: PPUSH
38412: LD_VAR 0 12
38416: PUSH
38417: LD_VAR 0 7
38421: ARRAY
38422: PUSH
38423: LD_INT 2
38425: ARRAY
38426: PPUSH
38427: CALL_OW 546
38431: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
38432: LD_VAR 0 8
38436: PUSH
38437: LD_INT 1
38439: ARRAY
38440: PUSH
38441: LD_VAR 0 8
38445: PUSH
38446: LD_INT 2
38448: ARRAY
38449: PUSH
38450: LD_VAR 0 13
38454: PUSH
38455: LD_INT 2
38457: PLUS
38458: GREATER
38459: OR
38460: PUSH
38461: LD_VAR 0 8
38465: PUSH
38466: LD_INT 2
38468: ARRAY
38469: PUSH
38470: LD_VAR 0 13
38474: PUSH
38475: LD_INT 2
38477: MINUS
38478: LESS
38479: OR
38480: PUSH
38481: LD_VAR 0 8
38485: PUSH
38486: LD_INT 3
38488: ARRAY
38489: PUSH
38490: LD_INT 0
38492: PUSH
38493: LD_INT 8
38495: PUSH
38496: LD_INT 9
38498: PUSH
38499: LD_INT 10
38501: PUSH
38502: LD_INT 11
38504: PUSH
38505: LD_INT 12
38507: PUSH
38508: LD_INT 13
38510: PUSH
38511: LD_INT 16
38513: PUSH
38514: LD_INT 17
38516: PUSH
38517: LD_INT 18
38519: PUSH
38520: LD_INT 19
38522: PUSH
38523: LD_INT 20
38525: PUSH
38526: LD_INT 21
38528: PUSH
38529: EMPTY
38530: LIST
38531: LIST
38532: LIST
38533: LIST
38534: LIST
38535: LIST
38536: LIST
38537: LIST
38538: LIST
38539: LIST
38540: LIST
38541: LIST
38542: LIST
38543: IN
38544: NOT
38545: OR
38546: PUSH
38547: LD_VAR 0 8
38551: PUSH
38552: LD_INT 5
38554: ARRAY
38555: NOT
38556: OR
38557: PUSH
38558: LD_VAR 0 8
38562: PUSH
38563: LD_INT 6
38565: ARRAY
38566: PUSH
38567: LD_INT 1
38569: PUSH
38570: LD_INT 2
38572: PUSH
38573: LD_INT 7
38575: PUSH
38576: LD_INT 9
38578: PUSH
38579: LD_INT 10
38581: PUSH
38582: LD_INT 11
38584: PUSH
38585: EMPTY
38586: LIST
38587: LIST
38588: LIST
38589: LIST
38590: LIST
38591: LIST
38592: IN
38593: NOT
38594: OR
38595: IFFALSE 38601
// exit ;
38597: POP
38598: POP
38599: GO 38699
// end ;
38601: GO 38272
38603: POP
38604: POP
// side := GetSide ( depot ) ;
38605: LD_ADDR_VAR 0 9
38609: PUSH
38610: LD_VAR 0 1
38614: PPUSH
38615: CALL_OW 255
38619: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
38620: LD_VAR 0 9
38624: PPUSH
38625: LD_VAR 0 3
38629: PPUSH
38630: LD_VAR 0 4
38634: PPUSH
38635: LD_INT 20
38637: PPUSH
38638: CALL 31020 0 4
38642: PUSH
38643: LD_INT 4
38645: ARRAY
38646: IFFALSE 38650
// exit ;
38648: GO 38699
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
38650: LD_VAR 0 2
38654: PUSH
38655: LD_INT 29
38657: PUSH
38658: LD_INT 30
38660: PUSH
38661: EMPTY
38662: LIST
38663: LIST
38664: IN
38665: PUSH
38666: LD_VAR 0 3
38670: PPUSH
38671: LD_VAR 0 4
38675: PPUSH
38676: LD_VAR 0 9
38680: PPUSH
38681: CALL_OW 440
38685: NOT
38686: AND
38687: IFFALSE 38691
// exit ;
38689: GO 38699
// result := true ;
38691: LD_ADDR_VAR 0 6
38695: PUSH
38696: LD_INT 1
38698: ST_TO_ADDR
// end ;
38699: LD_VAR 0 6
38703: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
38704: LD_INT 0
38706: PPUSH
38707: PPUSH
38708: PPUSH
38709: PPUSH
38710: PPUSH
38711: PPUSH
38712: PPUSH
38713: PPUSH
38714: PPUSH
38715: PPUSH
38716: PPUSH
38717: PPUSH
38718: PPUSH
38719: PPUSH
38720: PPUSH
38721: PPUSH
38722: PPUSH
38723: PPUSH
38724: PPUSH
38725: PPUSH
38726: PPUSH
38727: PPUSH
38728: PPUSH
38729: PPUSH
38730: PPUSH
38731: PPUSH
38732: PPUSH
38733: PPUSH
38734: PPUSH
38735: PPUSH
38736: PPUSH
38737: PPUSH
38738: PPUSH
38739: PPUSH
38740: PPUSH
38741: PPUSH
38742: PPUSH
38743: PPUSH
38744: PPUSH
38745: PPUSH
38746: PPUSH
38747: PPUSH
38748: PPUSH
38749: PPUSH
38750: PPUSH
38751: PPUSH
38752: PPUSH
38753: PPUSH
38754: PPUSH
38755: PPUSH
38756: PPUSH
38757: PPUSH
38758: PPUSH
38759: PPUSH
38760: PPUSH
38761: PPUSH
38762: PPUSH
38763: PPUSH
// result = [ ] ;
38764: LD_ADDR_VAR 0 7
38768: PUSH
38769: EMPTY
38770: ST_TO_ADDR
// temp_list = [ ] ;
38771: LD_ADDR_VAR 0 9
38775: PUSH
38776: EMPTY
38777: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
38778: LD_VAR 0 4
38782: PUSH
38783: LD_INT 0
38785: PUSH
38786: LD_INT 1
38788: PUSH
38789: LD_INT 2
38791: PUSH
38792: LD_INT 3
38794: PUSH
38795: LD_INT 4
38797: PUSH
38798: LD_INT 5
38800: PUSH
38801: EMPTY
38802: LIST
38803: LIST
38804: LIST
38805: LIST
38806: LIST
38807: LIST
38808: IN
38809: NOT
38810: PUSH
38811: LD_VAR 0 1
38815: PUSH
38816: LD_INT 0
38818: PUSH
38819: LD_INT 1
38821: PUSH
38822: EMPTY
38823: LIST
38824: LIST
38825: IN
38826: PUSH
38827: LD_VAR 0 5
38831: PUSH
38832: LD_INT 1
38834: PUSH
38835: LD_INT 2
38837: PUSH
38838: LD_INT 3
38840: PUSH
38841: EMPTY
38842: LIST
38843: LIST
38844: LIST
38845: IN
38846: NOT
38847: AND
38848: OR
38849: IFFALSE 38853
// exit ;
38851: GO 57244
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
38853: LD_VAR 0 1
38857: PUSH
38858: LD_INT 6
38860: PUSH
38861: LD_INT 7
38863: PUSH
38864: LD_INT 8
38866: PUSH
38867: LD_INT 13
38869: PUSH
38870: LD_INT 12
38872: PUSH
38873: LD_INT 15
38875: PUSH
38876: LD_INT 11
38878: PUSH
38879: LD_INT 14
38881: PUSH
38882: LD_INT 10
38884: PUSH
38885: EMPTY
38886: LIST
38887: LIST
38888: LIST
38889: LIST
38890: LIST
38891: LIST
38892: LIST
38893: LIST
38894: LIST
38895: IN
38896: IFFALSE 38906
// btype = b_lab ;
38898: LD_ADDR_VAR 0 1
38902: PUSH
38903: LD_INT 6
38905: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
38906: LD_VAR 0 6
38910: PUSH
38911: LD_INT 0
38913: PUSH
38914: LD_INT 1
38916: PUSH
38917: LD_INT 2
38919: PUSH
38920: EMPTY
38921: LIST
38922: LIST
38923: LIST
38924: IN
38925: NOT
38926: PUSH
38927: LD_VAR 0 1
38931: PUSH
38932: LD_INT 0
38934: PUSH
38935: LD_INT 1
38937: PUSH
38938: LD_INT 2
38940: PUSH
38941: LD_INT 3
38943: PUSH
38944: LD_INT 6
38946: PUSH
38947: LD_INT 36
38949: PUSH
38950: LD_INT 4
38952: PUSH
38953: LD_INT 5
38955: PUSH
38956: LD_INT 31
38958: PUSH
38959: LD_INT 32
38961: PUSH
38962: LD_INT 33
38964: PUSH
38965: EMPTY
38966: LIST
38967: LIST
38968: LIST
38969: LIST
38970: LIST
38971: LIST
38972: LIST
38973: LIST
38974: LIST
38975: LIST
38976: LIST
38977: IN
38978: NOT
38979: PUSH
38980: LD_VAR 0 6
38984: PUSH
38985: LD_INT 1
38987: EQUAL
38988: AND
38989: OR
38990: PUSH
38991: LD_VAR 0 1
38995: PUSH
38996: LD_INT 2
38998: PUSH
38999: LD_INT 3
39001: PUSH
39002: EMPTY
39003: LIST
39004: LIST
39005: IN
39006: NOT
39007: PUSH
39008: LD_VAR 0 6
39012: PUSH
39013: LD_INT 2
39015: EQUAL
39016: AND
39017: OR
39018: IFFALSE 39028
// mode = 0 ;
39020: LD_ADDR_VAR 0 6
39024: PUSH
39025: LD_INT 0
39027: ST_TO_ADDR
// case mode of 0 :
39028: LD_VAR 0 6
39032: PUSH
39033: LD_INT 0
39035: DOUBLE
39036: EQUAL
39037: IFTRUE 39041
39039: GO 50494
39041: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
39042: LD_ADDR_VAR 0 11
39046: PUSH
39047: LD_INT 0
39049: PUSH
39050: LD_INT 0
39052: PUSH
39053: EMPTY
39054: LIST
39055: LIST
39056: PUSH
39057: LD_INT 0
39059: PUSH
39060: LD_INT 1
39062: NEG
39063: PUSH
39064: EMPTY
39065: LIST
39066: LIST
39067: PUSH
39068: LD_INT 1
39070: PUSH
39071: LD_INT 0
39073: PUSH
39074: EMPTY
39075: LIST
39076: LIST
39077: PUSH
39078: LD_INT 1
39080: PUSH
39081: LD_INT 1
39083: PUSH
39084: EMPTY
39085: LIST
39086: LIST
39087: PUSH
39088: LD_INT 0
39090: PUSH
39091: LD_INT 1
39093: PUSH
39094: EMPTY
39095: LIST
39096: LIST
39097: PUSH
39098: LD_INT 1
39100: NEG
39101: PUSH
39102: LD_INT 0
39104: PUSH
39105: EMPTY
39106: LIST
39107: LIST
39108: PUSH
39109: LD_INT 1
39111: NEG
39112: PUSH
39113: LD_INT 1
39115: NEG
39116: PUSH
39117: EMPTY
39118: LIST
39119: LIST
39120: PUSH
39121: LD_INT 1
39123: NEG
39124: PUSH
39125: LD_INT 2
39127: NEG
39128: PUSH
39129: EMPTY
39130: LIST
39131: LIST
39132: PUSH
39133: LD_INT 0
39135: PUSH
39136: LD_INT 2
39138: NEG
39139: PUSH
39140: EMPTY
39141: LIST
39142: LIST
39143: PUSH
39144: LD_INT 1
39146: PUSH
39147: LD_INT 1
39149: NEG
39150: PUSH
39151: EMPTY
39152: LIST
39153: LIST
39154: PUSH
39155: LD_INT 1
39157: PUSH
39158: LD_INT 2
39160: PUSH
39161: EMPTY
39162: LIST
39163: LIST
39164: PUSH
39165: LD_INT 0
39167: PUSH
39168: LD_INT 2
39170: PUSH
39171: EMPTY
39172: LIST
39173: LIST
39174: PUSH
39175: LD_INT 1
39177: NEG
39178: PUSH
39179: LD_INT 1
39181: PUSH
39182: EMPTY
39183: LIST
39184: LIST
39185: PUSH
39186: LD_INT 1
39188: PUSH
39189: LD_INT 3
39191: PUSH
39192: EMPTY
39193: LIST
39194: LIST
39195: PUSH
39196: LD_INT 0
39198: PUSH
39199: LD_INT 3
39201: PUSH
39202: EMPTY
39203: LIST
39204: LIST
39205: PUSH
39206: LD_INT 1
39208: NEG
39209: PUSH
39210: LD_INT 2
39212: PUSH
39213: EMPTY
39214: LIST
39215: LIST
39216: PUSH
39217: EMPTY
39218: LIST
39219: LIST
39220: LIST
39221: LIST
39222: LIST
39223: LIST
39224: LIST
39225: LIST
39226: LIST
39227: LIST
39228: LIST
39229: LIST
39230: LIST
39231: LIST
39232: LIST
39233: LIST
39234: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
39235: LD_ADDR_VAR 0 12
39239: PUSH
39240: LD_INT 0
39242: PUSH
39243: LD_INT 0
39245: PUSH
39246: EMPTY
39247: LIST
39248: LIST
39249: PUSH
39250: LD_INT 0
39252: PUSH
39253: LD_INT 1
39255: NEG
39256: PUSH
39257: EMPTY
39258: LIST
39259: LIST
39260: PUSH
39261: LD_INT 1
39263: PUSH
39264: LD_INT 0
39266: PUSH
39267: EMPTY
39268: LIST
39269: LIST
39270: PUSH
39271: LD_INT 1
39273: PUSH
39274: LD_INT 1
39276: PUSH
39277: EMPTY
39278: LIST
39279: LIST
39280: PUSH
39281: LD_INT 0
39283: PUSH
39284: LD_INT 1
39286: PUSH
39287: EMPTY
39288: LIST
39289: LIST
39290: PUSH
39291: LD_INT 1
39293: NEG
39294: PUSH
39295: LD_INT 0
39297: PUSH
39298: EMPTY
39299: LIST
39300: LIST
39301: PUSH
39302: LD_INT 1
39304: NEG
39305: PUSH
39306: LD_INT 1
39308: NEG
39309: PUSH
39310: EMPTY
39311: LIST
39312: LIST
39313: PUSH
39314: LD_INT 1
39316: PUSH
39317: LD_INT 1
39319: NEG
39320: PUSH
39321: EMPTY
39322: LIST
39323: LIST
39324: PUSH
39325: LD_INT 2
39327: PUSH
39328: LD_INT 0
39330: PUSH
39331: EMPTY
39332: LIST
39333: LIST
39334: PUSH
39335: LD_INT 2
39337: PUSH
39338: LD_INT 1
39340: PUSH
39341: EMPTY
39342: LIST
39343: LIST
39344: PUSH
39345: LD_INT 1
39347: NEG
39348: PUSH
39349: LD_INT 1
39351: PUSH
39352: EMPTY
39353: LIST
39354: LIST
39355: PUSH
39356: LD_INT 2
39358: NEG
39359: PUSH
39360: LD_INT 0
39362: PUSH
39363: EMPTY
39364: LIST
39365: LIST
39366: PUSH
39367: LD_INT 2
39369: NEG
39370: PUSH
39371: LD_INT 1
39373: NEG
39374: PUSH
39375: EMPTY
39376: LIST
39377: LIST
39378: PUSH
39379: LD_INT 2
39381: NEG
39382: PUSH
39383: LD_INT 1
39385: PUSH
39386: EMPTY
39387: LIST
39388: LIST
39389: PUSH
39390: LD_INT 3
39392: NEG
39393: PUSH
39394: LD_INT 0
39396: PUSH
39397: EMPTY
39398: LIST
39399: LIST
39400: PUSH
39401: LD_INT 3
39403: NEG
39404: PUSH
39405: LD_INT 1
39407: NEG
39408: PUSH
39409: EMPTY
39410: LIST
39411: LIST
39412: PUSH
39413: EMPTY
39414: LIST
39415: LIST
39416: LIST
39417: LIST
39418: LIST
39419: LIST
39420: LIST
39421: LIST
39422: LIST
39423: LIST
39424: LIST
39425: LIST
39426: LIST
39427: LIST
39428: LIST
39429: LIST
39430: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
39431: LD_ADDR_VAR 0 13
39435: PUSH
39436: LD_INT 0
39438: PUSH
39439: LD_INT 0
39441: PUSH
39442: EMPTY
39443: LIST
39444: LIST
39445: PUSH
39446: LD_INT 0
39448: PUSH
39449: LD_INT 1
39451: NEG
39452: PUSH
39453: EMPTY
39454: LIST
39455: LIST
39456: PUSH
39457: LD_INT 1
39459: PUSH
39460: LD_INT 0
39462: PUSH
39463: EMPTY
39464: LIST
39465: LIST
39466: PUSH
39467: LD_INT 1
39469: PUSH
39470: LD_INT 1
39472: PUSH
39473: EMPTY
39474: LIST
39475: LIST
39476: PUSH
39477: LD_INT 0
39479: PUSH
39480: LD_INT 1
39482: PUSH
39483: EMPTY
39484: LIST
39485: LIST
39486: PUSH
39487: LD_INT 1
39489: NEG
39490: PUSH
39491: LD_INT 0
39493: PUSH
39494: EMPTY
39495: LIST
39496: LIST
39497: PUSH
39498: LD_INT 1
39500: NEG
39501: PUSH
39502: LD_INT 1
39504: NEG
39505: PUSH
39506: EMPTY
39507: LIST
39508: LIST
39509: PUSH
39510: LD_INT 1
39512: NEG
39513: PUSH
39514: LD_INT 2
39516: NEG
39517: PUSH
39518: EMPTY
39519: LIST
39520: LIST
39521: PUSH
39522: LD_INT 2
39524: PUSH
39525: LD_INT 1
39527: PUSH
39528: EMPTY
39529: LIST
39530: LIST
39531: PUSH
39532: LD_INT 2
39534: PUSH
39535: LD_INT 2
39537: PUSH
39538: EMPTY
39539: LIST
39540: LIST
39541: PUSH
39542: LD_INT 1
39544: PUSH
39545: LD_INT 2
39547: PUSH
39548: EMPTY
39549: LIST
39550: LIST
39551: PUSH
39552: LD_INT 2
39554: NEG
39555: PUSH
39556: LD_INT 1
39558: NEG
39559: PUSH
39560: EMPTY
39561: LIST
39562: LIST
39563: PUSH
39564: LD_INT 2
39566: NEG
39567: PUSH
39568: LD_INT 2
39570: NEG
39571: PUSH
39572: EMPTY
39573: LIST
39574: LIST
39575: PUSH
39576: LD_INT 2
39578: NEG
39579: PUSH
39580: LD_INT 3
39582: NEG
39583: PUSH
39584: EMPTY
39585: LIST
39586: LIST
39587: PUSH
39588: LD_INT 3
39590: NEG
39591: PUSH
39592: LD_INT 2
39594: NEG
39595: PUSH
39596: EMPTY
39597: LIST
39598: LIST
39599: PUSH
39600: LD_INT 3
39602: NEG
39603: PUSH
39604: LD_INT 3
39606: NEG
39607: PUSH
39608: EMPTY
39609: LIST
39610: LIST
39611: PUSH
39612: EMPTY
39613: LIST
39614: LIST
39615: LIST
39616: LIST
39617: LIST
39618: LIST
39619: LIST
39620: LIST
39621: LIST
39622: LIST
39623: LIST
39624: LIST
39625: LIST
39626: LIST
39627: LIST
39628: LIST
39629: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
39630: LD_ADDR_VAR 0 14
39634: PUSH
39635: LD_INT 0
39637: PUSH
39638: LD_INT 0
39640: PUSH
39641: EMPTY
39642: LIST
39643: LIST
39644: PUSH
39645: LD_INT 0
39647: PUSH
39648: LD_INT 1
39650: NEG
39651: PUSH
39652: EMPTY
39653: LIST
39654: LIST
39655: PUSH
39656: LD_INT 1
39658: PUSH
39659: LD_INT 0
39661: PUSH
39662: EMPTY
39663: LIST
39664: LIST
39665: PUSH
39666: LD_INT 1
39668: PUSH
39669: LD_INT 1
39671: PUSH
39672: EMPTY
39673: LIST
39674: LIST
39675: PUSH
39676: LD_INT 0
39678: PUSH
39679: LD_INT 1
39681: PUSH
39682: EMPTY
39683: LIST
39684: LIST
39685: PUSH
39686: LD_INT 1
39688: NEG
39689: PUSH
39690: LD_INT 0
39692: PUSH
39693: EMPTY
39694: LIST
39695: LIST
39696: PUSH
39697: LD_INT 1
39699: NEG
39700: PUSH
39701: LD_INT 1
39703: NEG
39704: PUSH
39705: EMPTY
39706: LIST
39707: LIST
39708: PUSH
39709: LD_INT 1
39711: NEG
39712: PUSH
39713: LD_INT 2
39715: NEG
39716: PUSH
39717: EMPTY
39718: LIST
39719: LIST
39720: PUSH
39721: LD_INT 0
39723: PUSH
39724: LD_INT 2
39726: NEG
39727: PUSH
39728: EMPTY
39729: LIST
39730: LIST
39731: PUSH
39732: LD_INT 1
39734: PUSH
39735: LD_INT 1
39737: NEG
39738: PUSH
39739: EMPTY
39740: LIST
39741: LIST
39742: PUSH
39743: LD_INT 1
39745: PUSH
39746: LD_INT 2
39748: PUSH
39749: EMPTY
39750: LIST
39751: LIST
39752: PUSH
39753: LD_INT 0
39755: PUSH
39756: LD_INT 2
39758: PUSH
39759: EMPTY
39760: LIST
39761: LIST
39762: PUSH
39763: LD_INT 1
39765: NEG
39766: PUSH
39767: LD_INT 1
39769: PUSH
39770: EMPTY
39771: LIST
39772: LIST
39773: PUSH
39774: LD_INT 1
39776: NEG
39777: PUSH
39778: LD_INT 3
39780: NEG
39781: PUSH
39782: EMPTY
39783: LIST
39784: LIST
39785: PUSH
39786: LD_INT 0
39788: PUSH
39789: LD_INT 3
39791: NEG
39792: PUSH
39793: EMPTY
39794: LIST
39795: LIST
39796: PUSH
39797: LD_INT 1
39799: PUSH
39800: LD_INT 2
39802: NEG
39803: PUSH
39804: EMPTY
39805: LIST
39806: LIST
39807: PUSH
39808: EMPTY
39809: LIST
39810: LIST
39811: LIST
39812: LIST
39813: LIST
39814: LIST
39815: LIST
39816: LIST
39817: LIST
39818: LIST
39819: LIST
39820: LIST
39821: LIST
39822: LIST
39823: LIST
39824: LIST
39825: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
39826: LD_ADDR_VAR 0 15
39830: PUSH
39831: LD_INT 0
39833: PUSH
39834: LD_INT 0
39836: PUSH
39837: EMPTY
39838: LIST
39839: LIST
39840: PUSH
39841: LD_INT 0
39843: PUSH
39844: LD_INT 1
39846: NEG
39847: PUSH
39848: EMPTY
39849: LIST
39850: LIST
39851: PUSH
39852: LD_INT 1
39854: PUSH
39855: LD_INT 0
39857: PUSH
39858: EMPTY
39859: LIST
39860: LIST
39861: PUSH
39862: LD_INT 1
39864: PUSH
39865: LD_INT 1
39867: PUSH
39868: EMPTY
39869: LIST
39870: LIST
39871: PUSH
39872: LD_INT 0
39874: PUSH
39875: LD_INT 1
39877: PUSH
39878: EMPTY
39879: LIST
39880: LIST
39881: PUSH
39882: LD_INT 1
39884: NEG
39885: PUSH
39886: LD_INT 0
39888: PUSH
39889: EMPTY
39890: LIST
39891: LIST
39892: PUSH
39893: LD_INT 1
39895: NEG
39896: PUSH
39897: LD_INT 1
39899: NEG
39900: PUSH
39901: EMPTY
39902: LIST
39903: LIST
39904: PUSH
39905: LD_INT 1
39907: PUSH
39908: LD_INT 1
39910: NEG
39911: PUSH
39912: EMPTY
39913: LIST
39914: LIST
39915: PUSH
39916: LD_INT 2
39918: PUSH
39919: LD_INT 0
39921: PUSH
39922: EMPTY
39923: LIST
39924: LIST
39925: PUSH
39926: LD_INT 2
39928: PUSH
39929: LD_INT 1
39931: PUSH
39932: EMPTY
39933: LIST
39934: LIST
39935: PUSH
39936: LD_INT 1
39938: NEG
39939: PUSH
39940: LD_INT 1
39942: PUSH
39943: EMPTY
39944: LIST
39945: LIST
39946: PUSH
39947: LD_INT 2
39949: NEG
39950: PUSH
39951: LD_INT 0
39953: PUSH
39954: EMPTY
39955: LIST
39956: LIST
39957: PUSH
39958: LD_INT 2
39960: NEG
39961: PUSH
39962: LD_INT 1
39964: NEG
39965: PUSH
39966: EMPTY
39967: LIST
39968: LIST
39969: PUSH
39970: LD_INT 2
39972: PUSH
39973: LD_INT 1
39975: NEG
39976: PUSH
39977: EMPTY
39978: LIST
39979: LIST
39980: PUSH
39981: LD_INT 3
39983: PUSH
39984: LD_INT 0
39986: PUSH
39987: EMPTY
39988: LIST
39989: LIST
39990: PUSH
39991: LD_INT 3
39993: PUSH
39994: LD_INT 1
39996: PUSH
39997: EMPTY
39998: LIST
39999: LIST
40000: PUSH
40001: EMPTY
40002: LIST
40003: LIST
40004: LIST
40005: LIST
40006: LIST
40007: LIST
40008: LIST
40009: LIST
40010: LIST
40011: LIST
40012: LIST
40013: LIST
40014: LIST
40015: LIST
40016: LIST
40017: LIST
40018: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
40019: LD_ADDR_VAR 0 16
40023: PUSH
40024: LD_INT 0
40026: PUSH
40027: LD_INT 0
40029: PUSH
40030: EMPTY
40031: LIST
40032: LIST
40033: PUSH
40034: LD_INT 0
40036: PUSH
40037: LD_INT 1
40039: NEG
40040: PUSH
40041: EMPTY
40042: LIST
40043: LIST
40044: PUSH
40045: LD_INT 1
40047: PUSH
40048: LD_INT 0
40050: PUSH
40051: EMPTY
40052: LIST
40053: LIST
40054: PUSH
40055: LD_INT 1
40057: PUSH
40058: LD_INT 1
40060: PUSH
40061: EMPTY
40062: LIST
40063: LIST
40064: PUSH
40065: LD_INT 0
40067: PUSH
40068: LD_INT 1
40070: PUSH
40071: EMPTY
40072: LIST
40073: LIST
40074: PUSH
40075: LD_INT 1
40077: NEG
40078: PUSH
40079: LD_INT 0
40081: PUSH
40082: EMPTY
40083: LIST
40084: LIST
40085: PUSH
40086: LD_INT 1
40088: NEG
40089: PUSH
40090: LD_INT 1
40092: NEG
40093: PUSH
40094: EMPTY
40095: LIST
40096: LIST
40097: PUSH
40098: LD_INT 1
40100: NEG
40101: PUSH
40102: LD_INT 2
40104: NEG
40105: PUSH
40106: EMPTY
40107: LIST
40108: LIST
40109: PUSH
40110: LD_INT 2
40112: PUSH
40113: LD_INT 1
40115: PUSH
40116: EMPTY
40117: LIST
40118: LIST
40119: PUSH
40120: LD_INT 2
40122: PUSH
40123: LD_INT 2
40125: PUSH
40126: EMPTY
40127: LIST
40128: LIST
40129: PUSH
40130: LD_INT 1
40132: PUSH
40133: LD_INT 2
40135: PUSH
40136: EMPTY
40137: LIST
40138: LIST
40139: PUSH
40140: LD_INT 2
40142: NEG
40143: PUSH
40144: LD_INT 1
40146: NEG
40147: PUSH
40148: EMPTY
40149: LIST
40150: LIST
40151: PUSH
40152: LD_INT 2
40154: NEG
40155: PUSH
40156: LD_INT 2
40158: NEG
40159: PUSH
40160: EMPTY
40161: LIST
40162: LIST
40163: PUSH
40164: LD_INT 3
40166: PUSH
40167: LD_INT 2
40169: PUSH
40170: EMPTY
40171: LIST
40172: LIST
40173: PUSH
40174: LD_INT 3
40176: PUSH
40177: LD_INT 3
40179: PUSH
40180: EMPTY
40181: LIST
40182: LIST
40183: PUSH
40184: LD_INT 2
40186: PUSH
40187: LD_INT 3
40189: PUSH
40190: EMPTY
40191: LIST
40192: LIST
40193: PUSH
40194: EMPTY
40195: LIST
40196: LIST
40197: LIST
40198: LIST
40199: LIST
40200: LIST
40201: LIST
40202: LIST
40203: LIST
40204: LIST
40205: LIST
40206: LIST
40207: LIST
40208: LIST
40209: LIST
40210: LIST
40211: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40212: LD_ADDR_VAR 0 17
40216: PUSH
40217: LD_INT 0
40219: PUSH
40220: LD_INT 0
40222: PUSH
40223: EMPTY
40224: LIST
40225: LIST
40226: PUSH
40227: LD_INT 0
40229: PUSH
40230: LD_INT 1
40232: NEG
40233: PUSH
40234: EMPTY
40235: LIST
40236: LIST
40237: PUSH
40238: LD_INT 1
40240: PUSH
40241: LD_INT 0
40243: PUSH
40244: EMPTY
40245: LIST
40246: LIST
40247: PUSH
40248: LD_INT 1
40250: PUSH
40251: LD_INT 1
40253: PUSH
40254: EMPTY
40255: LIST
40256: LIST
40257: PUSH
40258: LD_INT 0
40260: PUSH
40261: LD_INT 1
40263: PUSH
40264: EMPTY
40265: LIST
40266: LIST
40267: PUSH
40268: LD_INT 1
40270: NEG
40271: PUSH
40272: LD_INT 0
40274: PUSH
40275: EMPTY
40276: LIST
40277: LIST
40278: PUSH
40279: LD_INT 1
40281: NEG
40282: PUSH
40283: LD_INT 1
40285: NEG
40286: PUSH
40287: EMPTY
40288: LIST
40289: LIST
40290: PUSH
40291: LD_INT 1
40293: NEG
40294: PUSH
40295: LD_INT 2
40297: NEG
40298: PUSH
40299: EMPTY
40300: LIST
40301: LIST
40302: PUSH
40303: LD_INT 0
40305: PUSH
40306: LD_INT 2
40308: NEG
40309: PUSH
40310: EMPTY
40311: LIST
40312: LIST
40313: PUSH
40314: LD_INT 1
40316: PUSH
40317: LD_INT 1
40319: NEG
40320: PUSH
40321: EMPTY
40322: LIST
40323: LIST
40324: PUSH
40325: LD_INT 2
40327: PUSH
40328: LD_INT 0
40330: PUSH
40331: EMPTY
40332: LIST
40333: LIST
40334: PUSH
40335: LD_INT 2
40337: PUSH
40338: LD_INT 1
40340: PUSH
40341: EMPTY
40342: LIST
40343: LIST
40344: PUSH
40345: LD_INT 2
40347: PUSH
40348: LD_INT 2
40350: PUSH
40351: EMPTY
40352: LIST
40353: LIST
40354: PUSH
40355: LD_INT 1
40357: PUSH
40358: LD_INT 2
40360: PUSH
40361: EMPTY
40362: LIST
40363: LIST
40364: PUSH
40365: LD_INT 0
40367: PUSH
40368: LD_INT 2
40370: PUSH
40371: EMPTY
40372: LIST
40373: LIST
40374: PUSH
40375: LD_INT 1
40377: NEG
40378: PUSH
40379: LD_INT 1
40381: PUSH
40382: EMPTY
40383: LIST
40384: LIST
40385: PUSH
40386: LD_INT 2
40388: NEG
40389: PUSH
40390: LD_INT 0
40392: PUSH
40393: EMPTY
40394: LIST
40395: LIST
40396: PUSH
40397: LD_INT 2
40399: NEG
40400: PUSH
40401: LD_INT 1
40403: NEG
40404: PUSH
40405: EMPTY
40406: LIST
40407: LIST
40408: PUSH
40409: LD_INT 2
40411: NEG
40412: PUSH
40413: LD_INT 2
40415: NEG
40416: PUSH
40417: EMPTY
40418: LIST
40419: LIST
40420: PUSH
40421: EMPTY
40422: LIST
40423: LIST
40424: LIST
40425: LIST
40426: LIST
40427: LIST
40428: LIST
40429: LIST
40430: LIST
40431: LIST
40432: LIST
40433: LIST
40434: LIST
40435: LIST
40436: LIST
40437: LIST
40438: LIST
40439: LIST
40440: LIST
40441: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40442: LD_ADDR_VAR 0 18
40446: PUSH
40447: LD_INT 0
40449: PUSH
40450: LD_INT 0
40452: PUSH
40453: EMPTY
40454: LIST
40455: LIST
40456: PUSH
40457: LD_INT 0
40459: PUSH
40460: LD_INT 1
40462: NEG
40463: PUSH
40464: EMPTY
40465: LIST
40466: LIST
40467: PUSH
40468: LD_INT 1
40470: PUSH
40471: LD_INT 0
40473: PUSH
40474: EMPTY
40475: LIST
40476: LIST
40477: PUSH
40478: LD_INT 1
40480: PUSH
40481: LD_INT 1
40483: PUSH
40484: EMPTY
40485: LIST
40486: LIST
40487: PUSH
40488: LD_INT 0
40490: PUSH
40491: LD_INT 1
40493: PUSH
40494: EMPTY
40495: LIST
40496: LIST
40497: PUSH
40498: LD_INT 1
40500: NEG
40501: PUSH
40502: LD_INT 0
40504: PUSH
40505: EMPTY
40506: LIST
40507: LIST
40508: PUSH
40509: LD_INT 1
40511: NEG
40512: PUSH
40513: LD_INT 1
40515: NEG
40516: PUSH
40517: EMPTY
40518: LIST
40519: LIST
40520: PUSH
40521: LD_INT 1
40523: NEG
40524: PUSH
40525: LD_INT 2
40527: NEG
40528: PUSH
40529: EMPTY
40530: LIST
40531: LIST
40532: PUSH
40533: LD_INT 0
40535: PUSH
40536: LD_INT 2
40538: NEG
40539: PUSH
40540: EMPTY
40541: LIST
40542: LIST
40543: PUSH
40544: LD_INT 1
40546: PUSH
40547: LD_INT 1
40549: NEG
40550: PUSH
40551: EMPTY
40552: LIST
40553: LIST
40554: PUSH
40555: LD_INT 2
40557: PUSH
40558: LD_INT 0
40560: PUSH
40561: EMPTY
40562: LIST
40563: LIST
40564: PUSH
40565: LD_INT 2
40567: PUSH
40568: LD_INT 1
40570: PUSH
40571: EMPTY
40572: LIST
40573: LIST
40574: PUSH
40575: LD_INT 2
40577: PUSH
40578: LD_INT 2
40580: PUSH
40581: EMPTY
40582: LIST
40583: LIST
40584: PUSH
40585: LD_INT 1
40587: PUSH
40588: LD_INT 2
40590: PUSH
40591: EMPTY
40592: LIST
40593: LIST
40594: PUSH
40595: LD_INT 0
40597: PUSH
40598: LD_INT 2
40600: PUSH
40601: EMPTY
40602: LIST
40603: LIST
40604: PUSH
40605: LD_INT 1
40607: NEG
40608: PUSH
40609: LD_INT 1
40611: PUSH
40612: EMPTY
40613: LIST
40614: LIST
40615: PUSH
40616: LD_INT 2
40618: NEG
40619: PUSH
40620: LD_INT 0
40622: PUSH
40623: EMPTY
40624: LIST
40625: LIST
40626: PUSH
40627: LD_INT 2
40629: NEG
40630: PUSH
40631: LD_INT 1
40633: NEG
40634: PUSH
40635: EMPTY
40636: LIST
40637: LIST
40638: PUSH
40639: LD_INT 2
40641: NEG
40642: PUSH
40643: LD_INT 2
40645: NEG
40646: PUSH
40647: EMPTY
40648: LIST
40649: LIST
40650: PUSH
40651: EMPTY
40652: LIST
40653: LIST
40654: LIST
40655: LIST
40656: LIST
40657: LIST
40658: LIST
40659: LIST
40660: LIST
40661: LIST
40662: LIST
40663: LIST
40664: LIST
40665: LIST
40666: LIST
40667: LIST
40668: LIST
40669: LIST
40670: LIST
40671: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40672: LD_ADDR_VAR 0 19
40676: PUSH
40677: LD_INT 0
40679: PUSH
40680: LD_INT 0
40682: PUSH
40683: EMPTY
40684: LIST
40685: LIST
40686: PUSH
40687: LD_INT 0
40689: PUSH
40690: LD_INT 1
40692: NEG
40693: PUSH
40694: EMPTY
40695: LIST
40696: LIST
40697: PUSH
40698: LD_INT 1
40700: PUSH
40701: LD_INT 0
40703: PUSH
40704: EMPTY
40705: LIST
40706: LIST
40707: PUSH
40708: LD_INT 1
40710: PUSH
40711: LD_INT 1
40713: PUSH
40714: EMPTY
40715: LIST
40716: LIST
40717: PUSH
40718: LD_INT 0
40720: PUSH
40721: LD_INT 1
40723: PUSH
40724: EMPTY
40725: LIST
40726: LIST
40727: PUSH
40728: LD_INT 1
40730: NEG
40731: PUSH
40732: LD_INT 0
40734: PUSH
40735: EMPTY
40736: LIST
40737: LIST
40738: PUSH
40739: LD_INT 1
40741: NEG
40742: PUSH
40743: LD_INT 1
40745: NEG
40746: PUSH
40747: EMPTY
40748: LIST
40749: LIST
40750: PUSH
40751: LD_INT 1
40753: NEG
40754: PUSH
40755: LD_INT 2
40757: NEG
40758: PUSH
40759: EMPTY
40760: LIST
40761: LIST
40762: PUSH
40763: LD_INT 0
40765: PUSH
40766: LD_INT 2
40768: NEG
40769: PUSH
40770: EMPTY
40771: LIST
40772: LIST
40773: PUSH
40774: LD_INT 1
40776: PUSH
40777: LD_INT 1
40779: NEG
40780: PUSH
40781: EMPTY
40782: LIST
40783: LIST
40784: PUSH
40785: LD_INT 2
40787: PUSH
40788: LD_INT 0
40790: PUSH
40791: EMPTY
40792: LIST
40793: LIST
40794: PUSH
40795: LD_INT 2
40797: PUSH
40798: LD_INT 1
40800: PUSH
40801: EMPTY
40802: LIST
40803: LIST
40804: PUSH
40805: LD_INT 2
40807: PUSH
40808: LD_INT 2
40810: PUSH
40811: EMPTY
40812: LIST
40813: LIST
40814: PUSH
40815: LD_INT 1
40817: PUSH
40818: LD_INT 2
40820: PUSH
40821: EMPTY
40822: LIST
40823: LIST
40824: PUSH
40825: LD_INT 0
40827: PUSH
40828: LD_INT 2
40830: PUSH
40831: EMPTY
40832: LIST
40833: LIST
40834: PUSH
40835: LD_INT 1
40837: NEG
40838: PUSH
40839: LD_INT 1
40841: PUSH
40842: EMPTY
40843: LIST
40844: LIST
40845: PUSH
40846: LD_INT 2
40848: NEG
40849: PUSH
40850: LD_INT 0
40852: PUSH
40853: EMPTY
40854: LIST
40855: LIST
40856: PUSH
40857: LD_INT 2
40859: NEG
40860: PUSH
40861: LD_INT 1
40863: NEG
40864: PUSH
40865: EMPTY
40866: LIST
40867: LIST
40868: PUSH
40869: LD_INT 2
40871: NEG
40872: PUSH
40873: LD_INT 2
40875: NEG
40876: PUSH
40877: EMPTY
40878: LIST
40879: LIST
40880: PUSH
40881: EMPTY
40882: LIST
40883: LIST
40884: LIST
40885: LIST
40886: LIST
40887: LIST
40888: LIST
40889: LIST
40890: LIST
40891: LIST
40892: LIST
40893: LIST
40894: LIST
40895: LIST
40896: LIST
40897: LIST
40898: LIST
40899: LIST
40900: LIST
40901: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40902: LD_ADDR_VAR 0 20
40906: PUSH
40907: LD_INT 0
40909: PUSH
40910: LD_INT 0
40912: PUSH
40913: EMPTY
40914: LIST
40915: LIST
40916: PUSH
40917: LD_INT 0
40919: PUSH
40920: LD_INT 1
40922: NEG
40923: PUSH
40924: EMPTY
40925: LIST
40926: LIST
40927: PUSH
40928: LD_INT 1
40930: PUSH
40931: LD_INT 0
40933: PUSH
40934: EMPTY
40935: LIST
40936: LIST
40937: PUSH
40938: LD_INT 1
40940: PUSH
40941: LD_INT 1
40943: PUSH
40944: EMPTY
40945: LIST
40946: LIST
40947: PUSH
40948: LD_INT 0
40950: PUSH
40951: LD_INT 1
40953: PUSH
40954: EMPTY
40955: LIST
40956: LIST
40957: PUSH
40958: LD_INT 1
40960: NEG
40961: PUSH
40962: LD_INT 0
40964: PUSH
40965: EMPTY
40966: LIST
40967: LIST
40968: PUSH
40969: LD_INT 1
40971: NEG
40972: PUSH
40973: LD_INT 1
40975: NEG
40976: PUSH
40977: EMPTY
40978: LIST
40979: LIST
40980: PUSH
40981: LD_INT 1
40983: NEG
40984: PUSH
40985: LD_INT 2
40987: NEG
40988: PUSH
40989: EMPTY
40990: LIST
40991: LIST
40992: PUSH
40993: LD_INT 0
40995: PUSH
40996: LD_INT 2
40998: NEG
40999: PUSH
41000: EMPTY
41001: LIST
41002: LIST
41003: PUSH
41004: LD_INT 1
41006: PUSH
41007: LD_INT 1
41009: NEG
41010: PUSH
41011: EMPTY
41012: LIST
41013: LIST
41014: PUSH
41015: LD_INT 2
41017: PUSH
41018: LD_INT 0
41020: PUSH
41021: EMPTY
41022: LIST
41023: LIST
41024: PUSH
41025: LD_INT 2
41027: PUSH
41028: LD_INT 1
41030: PUSH
41031: EMPTY
41032: LIST
41033: LIST
41034: PUSH
41035: LD_INT 2
41037: PUSH
41038: LD_INT 2
41040: PUSH
41041: EMPTY
41042: LIST
41043: LIST
41044: PUSH
41045: LD_INT 1
41047: PUSH
41048: LD_INT 2
41050: PUSH
41051: EMPTY
41052: LIST
41053: LIST
41054: PUSH
41055: LD_INT 0
41057: PUSH
41058: LD_INT 2
41060: PUSH
41061: EMPTY
41062: LIST
41063: LIST
41064: PUSH
41065: LD_INT 1
41067: NEG
41068: PUSH
41069: LD_INT 1
41071: PUSH
41072: EMPTY
41073: LIST
41074: LIST
41075: PUSH
41076: LD_INT 2
41078: NEG
41079: PUSH
41080: LD_INT 0
41082: PUSH
41083: EMPTY
41084: LIST
41085: LIST
41086: PUSH
41087: LD_INT 2
41089: NEG
41090: PUSH
41091: LD_INT 1
41093: NEG
41094: PUSH
41095: EMPTY
41096: LIST
41097: LIST
41098: PUSH
41099: LD_INT 2
41101: NEG
41102: PUSH
41103: LD_INT 2
41105: NEG
41106: PUSH
41107: EMPTY
41108: LIST
41109: LIST
41110: PUSH
41111: EMPTY
41112: LIST
41113: LIST
41114: LIST
41115: LIST
41116: LIST
41117: LIST
41118: LIST
41119: LIST
41120: LIST
41121: LIST
41122: LIST
41123: LIST
41124: LIST
41125: LIST
41126: LIST
41127: LIST
41128: LIST
41129: LIST
41130: LIST
41131: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41132: LD_ADDR_VAR 0 21
41136: PUSH
41137: LD_INT 0
41139: PUSH
41140: LD_INT 0
41142: PUSH
41143: EMPTY
41144: LIST
41145: LIST
41146: PUSH
41147: LD_INT 0
41149: PUSH
41150: LD_INT 1
41152: NEG
41153: PUSH
41154: EMPTY
41155: LIST
41156: LIST
41157: PUSH
41158: LD_INT 1
41160: PUSH
41161: LD_INT 0
41163: PUSH
41164: EMPTY
41165: LIST
41166: LIST
41167: PUSH
41168: LD_INT 1
41170: PUSH
41171: LD_INT 1
41173: PUSH
41174: EMPTY
41175: LIST
41176: LIST
41177: PUSH
41178: LD_INT 0
41180: PUSH
41181: LD_INT 1
41183: PUSH
41184: EMPTY
41185: LIST
41186: LIST
41187: PUSH
41188: LD_INT 1
41190: NEG
41191: PUSH
41192: LD_INT 0
41194: PUSH
41195: EMPTY
41196: LIST
41197: LIST
41198: PUSH
41199: LD_INT 1
41201: NEG
41202: PUSH
41203: LD_INT 1
41205: NEG
41206: PUSH
41207: EMPTY
41208: LIST
41209: LIST
41210: PUSH
41211: LD_INT 1
41213: NEG
41214: PUSH
41215: LD_INT 2
41217: NEG
41218: PUSH
41219: EMPTY
41220: LIST
41221: LIST
41222: PUSH
41223: LD_INT 0
41225: PUSH
41226: LD_INT 2
41228: NEG
41229: PUSH
41230: EMPTY
41231: LIST
41232: LIST
41233: PUSH
41234: LD_INT 1
41236: PUSH
41237: LD_INT 1
41239: NEG
41240: PUSH
41241: EMPTY
41242: LIST
41243: LIST
41244: PUSH
41245: LD_INT 2
41247: PUSH
41248: LD_INT 0
41250: PUSH
41251: EMPTY
41252: LIST
41253: LIST
41254: PUSH
41255: LD_INT 2
41257: PUSH
41258: LD_INT 1
41260: PUSH
41261: EMPTY
41262: LIST
41263: LIST
41264: PUSH
41265: LD_INT 2
41267: PUSH
41268: LD_INT 2
41270: PUSH
41271: EMPTY
41272: LIST
41273: LIST
41274: PUSH
41275: LD_INT 1
41277: PUSH
41278: LD_INT 2
41280: PUSH
41281: EMPTY
41282: LIST
41283: LIST
41284: PUSH
41285: LD_INT 0
41287: PUSH
41288: LD_INT 2
41290: PUSH
41291: EMPTY
41292: LIST
41293: LIST
41294: PUSH
41295: LD_INT 1
41297: NEG
41298: PUSH
41299: LD_INT 1
41301: PUSH
41302: EMPTY
41303: LIST
41304: LIST
41305: PUSH
41306: LD_INT 2
41308: NEG
41309: PUSH
41310: LD_INT 0
41312: PUSH
41313: EMPTY
41314: LIST
41315: LIST
41316: PUSH
41317: LD_INT 2
41319: NEG
41320: PUSH
41321: LD_INT 1
41323: NEG
41324: PUSH
41325: EMPTY
41326: LIST
41327: LIST
41328: PUSH
41329: LD_INT 2
41331: NEG
41332: PUSH
41333: LD_INT 2
41335: NEG
41336: PUSH
41337: EMPTY
41338: LIST
41339: LIST
41340: PUSH
41341: EMPTY
41342: LIST
41343: LIST
41344: LIST
41345: LIST
41346: LIST
41347: LIST
41348: LIST
41349: LIST
41350: LIST
41351: LIST
41352: LIST
41353: LIST
41354: LIST
41355: LIST
41356: LIST
41357: LIST
41358: LIST
41359: LIST
41360: LIST
41361: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41362: LD_ADDR_VAR 0 22
41366: PUSH
41367: LD_INT 0
41369: PUSH
41370: LD_INT 0
41372: PUSH
41373: EMPTY
41374: LIST
41375: LIST
41376: PUSH
41377: LD_INT 0
41379: PUSH
41380: LD_INT 1
41382: NEG
41383: PUSH
41384: EMPTY
41385: LIST
41386: LIST
41387: PUSH
41388: LD_INT 1
41390: PUSH
41391: LD_INT 0
41393: PUSH
41394: EMPTY
41395: LIST
41396: LIST
41397: PUSH
41398: LD_INT 1
41400: PUSH
41401: LD_INT 1
41403: PUSH
41404: EMPTY
41405: LIST
41406: LIST
41407: PUSH
41408: LD_INT 0
41410: PUSH
41411: LD_INT 1
41413: PUSH
41414: EMPTY
41415: LIST
41416: LIST
41417: PUSH
41418: LD_INT 1
41420: NEG
41421: PUSH
41422: LD_INT 0
41424: PUSH
41425: EMPTY
41426: LIST
41427: LIST
41428: PUSH
41429: LD_INT 1
41431: NEG
41432: PUSH
41433: LD_INT 1
41435: NEG
41436: PUSH
41437: EMPTY
41438: LIST
41439: LIST
41440: PUSH
41441: LD_INT 1
41443: NEG
41444: PUSH
41445: LD_INT 2
41447: NEG
41448: PUSH
41449: EMPTY
41450: LIST
41451: LIST
41452: PUSH
41453: LD_INT 0
41455: PUSH
41456: LD_INT 2
41458: NEG
41459: PUSH
41460: EMPTY
41461: LIST
41462: LIST
41463: PUSH
41464: LD_INT 1
41466: PUSH
41467: LD_INT 1
41469: NEG
41470: PUSH
41471: EMPTY
41472: LIST
41473: LIST
41474: PUSH
41475: LD_INT 2
41477: PUSH
41478: LD_INT 0
41480: PUSH
41481: EMPTY
41482: LIST
41483: LIST
41484: PUSH
41485: LD_INT 2
41487: PUSH
41488: LD_INT 1
41490: PUSH
41491: EMPTY
41492: LIST
41493: LIST
41494: PUSH
41495: LD_INT 2
41497: PUSH
41498: LD_INT 2
41500: PUSH
41501: EMPTY
41502: LIST
41503: LIST
41504: PUSH
41505: LD_INT 1
41507: PUSH
41508: LD_INT 2
41510: PUSH
41511: EMPTY
41512: LIST
41513: LIST
41514: PUSH
41515: LD_INT 0
41517: PUSH
41518: LD_INT 2
41520: PUSH
41521: EMPTY
41522: LIST
41523: LIST
41524: PUSH
41525: LD_INT 1
41527: NEG
41528: PUSH
41529: LD_INT 1
41531: PUSH
41532: EMPTY
41533: LIST
41534: LIST
41535: PUSH
41536: LD_INT 2
41538: NEG
41539: PUSH
41540: LD_INT 0
41542: PUSH
41543: EMPTY
41544: LIST
41545: LIST
41546: PUSH
41547: LD_INT 2
41549: NEG
41550: PUSH
41551: LD_INT 1
41553: NEG
41554: PUSH
41555: EMPTY
41556: LIST
41557: LIST
41558: PUSH
41559: LD_INT 2
41561: NEG
41562: PUSH
41563: LD_INT 2
41565: NEG
41566: PUSH
41567: EMPTY
41568: LIST
41569: LIST
41570: PUSH
41571: EMPTY
41572: LIST
41573: LIST
41574: LIST
41575: LIST
41576: LIST
41577: LIST
41578: LIST
41579: LIST
41580: LIST
41581: LIST
41582: LIST
41583: LIST
41584: LIST
41585: LIST
41586: LIST
41587: LIST
41588: LIST
41589: LIST
41590: LIST
41591: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
41592: LD_ADDR_VAR 0 23
41596: PUSH
41597: LD_INT 0
41599: PUSH
41600: LD_INT 0
41602: PUSH
41603: EMPTY
41604: LIST
41605: LIST
41606: PUSH
41607: LD_INT 0
41609: PUSH
41610: LD_INT 1
41612: NEG
41613: PUSH
41614: EMPTY
41615: LIST
41616: LIST
41617: PUSH
41618: LD_INT 1
41620: PUSH
41621: LD_INT 0
41623: PUSH
41624: EMPTY
41625: LIST
41626: LIST
41627: PUSH
41628: LD_INT 1
41630: PUSH
41631: LD_INT 1
41633: PUSH
41634: EMPTY
41635: LIST
41636: LIST
41637: PUSH
41638: LD_INT 0
41640: PUSH
41641: LD_INT 1
41643: PUSH
41644: EMPTY
41645: LIST
41646: LIST
41647: PUSH
41648: LD_INT 1
41650: NEG
41651: PUSH
41652: LD_INT 0
41654: PUSH
41655: EMPTY
41656: LIST
41657: LIST
41658: PUSH
41659: LD_INT 1
41661: NEG
41662: PUSH
41663: LD_INT 1
41665: NEG
41666: PUSH
41667: EMPTY
41668: LIST
41669: LIST
41670: PUSH
41671: LD_INT 1
41673: NEG
41674: PUSH
41675: LD_INT 2
41677: NEG
41678: PUSH
41679: EMPTY
41680: LIST
41681: LIST
41682: PUSH
41683: LD_INT 0
41685: PUSH
41686: LD_INT 2
41688: NEG
41689: PUSH
41690: EMPTY
41691: LIST
41692: LIST
41693: PUSH
41694: LD_INT 1
41696: PUSH
41697: LD_INT 1
41699: NEG
41700: PUSH
41701: EMPTY
41702: LIST
41703: LIST
41704: PUSH
41705: LD_INT 2
41707: PUSH
41708: LD_INT 0
41710: PUSH
41711: EMPTY
41712: LIST
41713: LIST
41714: PUSH
41715: LD_INT 2
41717: PUSH
41718: LD_INT 1
41720: PUSH
41721: EMPTY
41722: LIST
41723: LIST
41724: PUSH
41725: LD_INT 2
41727: PUSH
41728: LD_INT 2
41730: PUSH
41731: EMPTY
41732: LIST
41733: LIST
41734: PUSH
41735: LD_INT 1
41737: PUSH
41738: LD_INT 2
41740: PUSH
41741: EMPTY
41742: LIST
41743: LIST
41744: PUSH
41745: LD_INT 0
41747: PUSH
41748: LD_INT 2
41750: PUSH
41751: EMPTY
41752: LIST
41753: LIST
41754: PUSH
41755: LD_INT 1
41757: NEG
41758: PUSH
41759: LD_INT 1
41761: PUSH
41762: EMPTY
41763: LIST
41764: LIST
41765: PUSH
41766: LD_INT 2
41768: NEG
41769: PUSH
41770: LD_INT 0
41772: PUSH
41773: EMPTY
41774: LIST
41775: LIST
41776: PUSH
41777: LD_INT 2
41779: NEG
41780: PUSH
41781: LD_INT 1
41783: NEG
41784: PUSH
41785: EMPTY
41786: LIST
41787: LIST
41788: PUSH
41789: LD_INT 2
41791: NEG
41792: PUSH
41793: LD_INT 2
41795: NEG
41796: PUSH
41797: EMPTY
41798: LIST
41799: LIST
41800: PUSH
41801: LD_INT 2
41803: NEG
41804: PUSH
41805: LD_INT 3
41807: NEG
41808: PUSH
41809: EMPTY
41810: LIST
41811: LIST
41812: PUSH
41813: LD_INT 1
41815: NEG
41816: PUSH
41817: LD_INT 3
41819: NEG
41820: PUSH
41821: EMPTY
41822: LIST
41823: LIST
41824: PUSH
41825: LD_INT 1
41827: PUSH
41828: LD_INT 2
41830: NEG
41831: PUSH
41832: EMPTY
41833: LIST
41834: LIST
41835: PUSH
41836: LD_INT 2
41838: PUSH
41839: LD_INT 1
41841: NEG
41842: PUSH
41843: EMPTY
41844: LIST
41845: LIST
41846: PUSH
41847: EMPTY
41848: LIST
41849: LIST
41850: LIST
41851: LIST
41852: LIST
41853: LIST
41854: LIST
41855: LIST
41856: LIST
41857: LIST
41858: LIST
41859: LIST
41860: LIST
41861: LIST
41862: LIST
41863: LIST
41864: LIST
41865: LIST
41866: LIST
41867: LIST
41868: LIST
41869: LIST
41870: LIST
41871: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
41872: LD_ADDR_VAR 0 24
41876: PUSH
41877: LD_INT 0
41879: PUSH
41880: LD_INT 0
41882: PUSH
41883: EMPTY
41884: LIST
41885: LIST
41886: PUSH
41887: LD_INT 0
41889: PUSH
41890: LD_INT 1
41892: NEG
41893: PUSH
41894: EMPTY
41895: LIST
41896: LIST
41897: PUSH
41898: LD_INT 1
41900: PUSH
41901: LD_INT 0
41903: PUSH
41904: EMPTY
41905: LIST
41906: LIST
41907: PUSH
41908: LD_INT 1
41910: PUSH
41911: LD_INT 1
41913: PUSH
41914: EMPTY
41915: LIST
41916: LIST
41917: PUSH
41918: LD_INT 0
41920: PUSH
41921: LD_INT 1
41923: PUSH
41924: EMPTY
41925: LIST
41926: LIST
41927: PUSH
41928: LD_INT 1
41930: NEG
41931: PUSH
41932: LD_INT 0
41934: PUSH
41935: EMPTY
41936: LIST
41937: LIST
41938: PUSH
41939: LD_INT 1
41941: NEG
41942: PUSH
41943: LD_INT 1
41945: NEG
41946: PUSH
41947: EMPTY
41948: LIST
41949: LIST
41950: PUSH
41951: LD_INT 1
41953: NEG
41954: PUSH
41955: LD_INT 2
41957: NEG
41958: PUSH
41959: EMPTY
41960: LIST
41961: LIST
41962: PUSH
41963: LD_INT 0
41965: PUSH
41966: LD_INT 2
41968: NEG
41969: PUSH
41970: EMPTY
41971: LIST
41972: LIST
41973: PUSH
41974: LD_INT 1
41976: PUSH
41977: LD_INT 1
41979: NEG
41980: PUSH
41981: EMPTY
41982: LIST
41983: LIST
41984: PUSH
41985: LD_INT 2
41987: PUSH
41988: LD_INT 0
41990: PUSH
41991: EMPTY
41992: LIST
41993: LIST
41994: PUSH
41995: LD_INT 2
41997: PUSH
41998: LD_INT 1
42000: PUSH
42001: EMPTY
42002: LIST
42003: LIST
42004: PUSH
42005: LD_INT 2
42007: PUSH
42008: LD_INT 2
42010: PUSH
42011: EMPTY
42012: LIST
42013: LIST
42014: PUSH
42015: LD_INT 1
42017: PUSH
42018: LD_INT 2
42020: PUSH
42021: EMPTY
42022: LIST
42023: LIST
42024: PUSH
42025: LD_INT 0
42027: PUSH
42028: LD_INT 2
42030: PUSH
42031: EMPTY
42032: LIST
42033: LIST
42034: PUSH
42035: LD_INT 1
42037: NEG
42038: PUSH
42039: LD_INT 1
42041: PUSH
42042: EMPTY
42043: LIST
42044: LIST
42045: PUSH
42046: LD_INT 2
42048: NEG
42049: PUSH
42050: LD_INT 0
42052: PUSH
42053: EMPTY
42054: LIST
42055: LIST
42056: PUSH
42057: LD_INT 2
42059: NEG
42060: PUSH
42061: LD_INT 1
42063: NEG
42064: PUSH
42065: EMPTY
42066: LIST
42067: LIST
42068: PUSH
42069: LD_INT 2
42071: NEG
42072: PUSH
42073: LD_INT 2
42075: NEG
42076: PUSH
42077: EMPTY
42078: LIST
42079: LIST
42080: PUSH
42081: LD_INT 1
42083: PUSH
42084: LD_INT 2
42086: NEG
42087: PUSH
42088: EMPTY
42089: LIST
42090: LIST
42091: PUSH
42092: LD_INT 2
42094: PUSH
42095: LD_INT 1
42097: NEG
42098: PUSH
42099: EMPTY
42100: LIST
42101: LIST
42102: PUSH
42103: LD_INT 3
42105: PUSH
42106: LD_INT 1
42108: PUSH
42109: EMPTY
42110: LIST
42111: LIST
42112: PUSH
42113: LD_INT 3
42115: PUSH
42116: LD_INT 2
42118: PUSH
42119: EMPTY
42120: LIST
42121: LIST
42122: PUSH
42123: EMPTY
42124: LIST
42125: LIST
42126: LIST
42127: LIST
42128: LIST
42129: LIST
42130: LIST
42131: LIST
42132: LIST
42133: LIST
42134: LIST
42135: LIST
42136: LIST
42137: LIST
42138: LIST
42139: LIST
42140: LIST
42141: LIST
42142: LIST
42143: LIST
42144: LIST
42145: LIST
42146: LIST
42147: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
42148: LD_ADDR_VAR 0 25
42152: PUSH
42153: LD_INT 0
42155: PUSH
42156: LD_INT 0
42158: PUSH
42159: EMPTY
42160: LIST
42161: LIST
42162: PUSH
42163: LD_INT 0
42165: PUSH
42166: LD_INT 1
42168: NEG
42169: PUSH
42170: EMPTY
42171: LIST
42172: LIST
42173: PUSH
42174: LD_INT 1
42176: PUSH
42177: LD_INT 0
42179: PUSH
42180: EMPTY
42181: LIST
42182: LIST
42183: PUSH
42184: LD_INT 1
42186: PUSH
42187: LD_INT 1
42189: PUSH
42190: EMPTY
42191: LIST
42192: LIST
42193: PUSH
42194: LD_INT 0
42196: PUSH
42197: LD_INT 1
42199: PUSH
42200: EMPTY
42201: LIST
42202: LIST
42203: PUSH
42204: LD_INT 1
42206: NEG
42207: PUSH
42208: LD_INT 0
42210: PUSH
42211: EMPTY
42212: LIST
42213: LIST
42214: PUSH
42215: LD_INT 1
42217: NEG
42218: PUSH
42219: LD_INT 1
42221: NEG
42222: PUSH
42223: EMPTY
42224: LIST
42225: LIST
42226: PUSH
42227: LD_INT 1
42229: NEG
42230: PUSH
42231: LD_INT 2
42233: NEG
42234: PUSH
42235: EMPTY
42236: LIST
42237: LIST
42238: PUSH
42239: LD_INT 0
42241: PUSH
42242: LD_INT 2
42244: NEG
42245: PUSH
42246: EMPTY
42247: LIST
42248: LIST
42249: PUSH
42250: LD_INT 1
42252: PUSH
42253: LD_INT 1
42255: NEG
42256: PUSH
42257: EMPTY
42258: LIST
42259: LIST
42260: PUSH
42261: LD_INT 2
42263: PUSH
42264: LD_INT 0
42266: PUSH
42267: EMPTY
42268: LIST
42269: LIST
42270: PUSH
42271: LD_INT 2
42273: PUSH
42274: LD_INT 1
42276: PUSH
42277: EMPTY
42278: LIST
42279: LIST
42280: PUSH
42281: LD_INT 2
42283: PUSH
42284: LD_INT 2
42286: PUSH
42287: EMPTY
42288: LIST
42289: LIST
42290: PUSH
42291: LD_INT 1
42293: PUSH
42294: LD_INT 2
42296: PUSH
42297: EMPTY
42298: LIST
42299: LIST
42300: PUSH
42301: LD_INT 0
42303: PUSH
42304: LD_INT 2
42306: PUSH
42307: EMPTY
42308: LIST
42309: LIST
42310: PUSH
42311: LD_INT 1
42313: NEG
42314: PUSH
42315: LD_INT 1
42317: PUSH
42318: EMPTY
42319: LIST
42320: LIST
42321: PUSH
42322: LD_INT 2
42324: NEG
42325: PUSH
42326: LD_INT 0
42328: PUSH
42329: EMPTY
42330: LIST
42331: LIST
42332: PUSH
42333: LD_INT 2
42335: NEG
42336: PUSH
42337: LD_INT 1
42339: NEG
42340: PUSH
42341: EMPTY
42342: LIST
42343: LIST
42344: PUSH
42345: LD_INT 2
42347: NEG
42348: PUSH
42349: LD_INT 2
42351: NEG
42352: PUSH
42353: EMPTY
42354: LIST
42355: LIST
42356: PUSH
42357: LD_INT 3
42359: PUSH
42360: LD_INT 1
42362: PUSH
42363: EMPTY
42364: LIST
42365: LIST
42366: PUSH
42367: LD_INT 3
42369: PUSH
42370: LD_INT 2
42372: PUSH
42373: EMPTY
42374: LIST
42375: LIST
42376: PUSH
42377: LD_INT 2
42379: PUSH
42380: LD_INT 3
42382: PUSH
42383: EMPTY
42384: LIST
42385: LIST
42386: PUSH
42387: LD_INT 1
42389: PUSH
42390: LD_INT 3
42392: PUSH
42393: EMPTY
42394: LIST
42395: LIST
42396: PUSH
42397: EMPTY
42398: LIST
42399: LIST
42400: LIST
42401: LIST
42402: LIST
42403: LIST
42404: LIST
42405: LIST
42406: LIST
42407: LIST
42408: LIST
42409: LIST
42410: LIST
42411: LIST
42412: LIST
42413: LIST
42414: LIST
42415: LIST
42416: LIST
42417: LIST
42418: LIST
42419: LIST
42420: LIST
42421: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
42422: LD_ADDR_VAR 0 26
42426: PUSH
42427: LD_INT 0
42429: PUSH
42430: LD_INT 0
42432: PUSH
42433: EMPTY
42434: LIST
42435: LIST
42436: PUSH
42437: LD_INT 0
42439: PUSH
42440: LD_INT 1
42442: NEG
42443: PUSH
42444: EMPTY
42445: LIST
42446: LIST
42447: PUSH
42448: LD_INT 1
42450: PUSH
42451: LD_INT 0
42453: PUSH
42454: EMPTY
42455: LIST
42456: LIST
42457: PUSH
42458: LD_INT 1
42460: PUSH
42461: LD_INT 1
42463: PUSH
42464: EMPTY
42465: LIST
42466: LIST
42467: PUSH
42468: LD_INT 0
42470: PUSH
42471: LD_INT 1
42473: PUSH
42474: EMPTY
42475: LIST
42476: LIST
42477: PUSH
42478: LD_INT 1
42480: NEG
42481: PUSH
42482: LD_INT 0
42484: PUSH
42485: EMPTY
42486: LIST
42487: LIST
42488: PUSH
42489: LD_INT 1
42491: NEG
42492: PUSH
42493: LD_INT 1
42495: NEG
42496: PUSH
42497: EMPTY
42498: LIST
42499: LIST
42500: PUSH
42501: LD_INT 1
42503: NEG
42504: PUSH
42505: LD_INT 2
42507: NEG
42508: PUSH
42509: EMPTY
42510: LIST
42511: LIST
42512: PUSH
42513: LD_INT 0
42515: PUSH
42516: LD_INT 2
42518: NEG
42519: PUSH
42520: EMPTY
42521: LIST
42522: LIST
42523: PUSH
42524: LD_INT 1
42526: PUSH
42527: LD_INT 1
42529: NEG
42530: PUSH
42531: EMPTY
42532: LIST
42533: LIST
42534: PUSH
42535: LD_INT 2
42537: PUSH
42538: LD_INT 0
42540: PUSH
42541: EMPTY
42542: LIST
42543: LIST
42544: PUSH
42545: LD_INT 2
42547: PUSH
42548: LD_INT 1
42550: PUSH
42551: EMPTY
42552: LIST
42553: LIST
42554: PUSH
42555: LD_INT 2
42557: PUSH
42558: LD_INT 2
42560: PUSH
42561: EMPTY
42562: LIST
42563: LIST
42564: PUSH
42565: LD_INT 1
42567: PUSH
42568: LD_INT 2
42570: PUSH
42571: EMPTY
42572: LIST
42573: LIST
42574: PUSH
42575: LD_INT 0
42577: PUSH
42578: LD_INT 2
42580: PUSH
42581: EMPTY
42582: LIST
42583: LIST
42584: PUSH
42585: LD_INT 1
42587: NEG
42588: PUSH
42589: LD_INT 1
42591: PUSH
42592: EMPTY
42593: LIST
42594: LIST
42595: PUSH
42596: LD_INT 2
42598: NEG
42599: PUSH
42600: LD_INT 0
42602: PUSH
42603: EMPTY
42604: LIST
42605: LIST
42606: PUSH
42607: LD_INT 2
42609: NEG
42610: PUSH
42611: LD_INT 1
42613: NEG
42614: PUSH
42615: EMPTY
42616: LIST
42617: LIST
42618: PUSH
42619: LD_INT 2
42621: NEG
42622: PUSH
42623: LD_INT 2
42625: NEG
42626: PUSH
42627: EMPTY
42628: LIST
42629: LIST
42630: PUSH
42631: LD_INT 2
42633: PUSH
42634: LD_INT 3
42636: PUSH
42637: EMPTY
42638: LIST
42639: LIST
42640: PUSH
42641: LD_INT 1
42643: PUSH
42644: LD_INT 3
42646: PUSH
42647: EMPTY
42648: LIST
42649: LIST
42650: PUSH
42651: LD_INT 1
42653: NEG
42654: PUSH
42655: LD_INT 2
42657: PUSH
42658: EMPTY
42659: LIST
42660: LIST
42661: PUSH
42662: LD_INT 2
42664: NEG
42665: PUSH
42666: LD_INT 1
42668: PUSH
42669: EMPTY
42670: LIST
42671: LIST
42672: PUSH
42673: EMPTY
42674: LIST
42675: LIST
42676: LIST
42677: LIST
42678: LIST
42679: LIST
42680: LIST
42681: LIST
42682: LIST
42683: LIST
42684: LIST
42685: LIST
42686: LIST
42687: LIST
42688: LIST
42689: LIST
42690: LIST
42691: LIST
42692: LIST
42693: LIST
42694: LIST
42695: LIST
42696: LIST
42697: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
42698: LD_ADDR_VAR 0 27
42702: PUSH
42703: LD_INT 0
42705: PUSH
42706: LD_INT 0
42708: PUSH
42709: EMPTY
42710: LIST
42711: LIST
42712: PUSH
42713: LD_INT 0
42715: PUSH
42716: LD_INT 1
42718: NEG
42719: PUSH
42720: EMPTY
42721: LIST
42722: LIST
42723: PUSH
42724: LD_INT 1
42726: PUSH
42727: LD_INT 0
42729: PUSH
42730: EMPTY
42731: LIST
42732: LIST
42733: PUSH
42734: LD_INT 1
42736: PUSH
42737: LD_INT 1
42739: PUSH
42740: EMPTY
42741: LIST
42742: LIST
42743: PUSH
42744: LD_INT 0
42746: PUSH
42747: LD_INT 1
42749: PUSH
42750: EMPTY
42751: LIST
42752: LIST
42753: PUSH
42754: LD_INT 1
42756: NEG
42757: PUSH
42758: LD_INT 0
42760: PUSH
42761: EMPTY
42762: LIST
42763: LIST
42764: PUSH
42765: LD_INT 1
42767: NEG
42768: PUSH
42769: LD_INT 1
42771: NEG
42772: PUSH
42773: EMPTY
42774: LIST
42775: LIST
42776: PUSH
42777: LD_INT 1
42779: NEG
42780: PUSH
42781: LD_INT 2
42783: NEG
42784: PUSH
42785: EMPTY
42786: LIST
42787: LIST
42788: PUSH
42789: LD_INT 0
42791: PUSH
42792: LD_INT 2
42794: NEG
42795: PUSH
42796: EMPTY
42797: LIST
42798: LIST
42799: PUSH
42800: LD_INT 1
42802: PUSH
42803: LD_INT 1
42805: NEG
42806: PUSH
42807: EMPTY
42808: LIST
42809: LIST
42810: PUSH
42811: LD_INT 2
42813: PUSH
42814: LD_INT 0
42816: PUSH
42817: EMPTY
42818: LIST
42819: LIST
42820: PUSH
42821: LD_INT 2
42823: PUSH
42824: LD_INT 1
42826: PUSH
42827: EMPTY
42828: LIST
42829: LIST
42830: PUSH
42831: LD_INT 2
42833: PUSH
42834: LD_INT 2
42836: PUSH
42837: EMPTY
42838: LIST
42839: LIST
42840: PUSH
42841: LD_INT 1
42843: PUSH
42844: LD_INT 2
42846: PUSH
42847: EMPTY
42848: LIST
42849: LIST
42850: PUSH
42851: LD_INT 0
42853: PUSH
42854: LD_INT 2
42856: PUSH
42857: EMPTY
42858: LIST
42859: LIST
42860: PUSH
42861: LD_INT 1
42863: NEG
42864: PUSH
42865: LD_INT 1
42867: PUSH
42868: EMPTY
42869: LIST
42870: LIST
42871: PUSH
42872: LD_INT 2
42874: NEG
42875: PUSH
42876: LD_INT 0
42878: PUSH
42879: EMPTY
42880: LIST
42881: LIST
42882: PUSH
42883: LD_INT 2
42885: NEG
42886: PUSH
42887: LD_INT 1
42889: NEG
42890: PUSH
42891: EMPTY
42892: LIST
42893: LIST
42894: PUSH
42895: LD_INT 2
42897: NEG
42898: PUSH
42899: LD_INT 2
42901: NEG
42902: PUSH
42903: EMPTY
42904: LIST
42905: LIST
42906: PUSH
42907: LD_INT 1
42909: NEG
42910: PUSH
42911: LD_INT 2
42913: PUSH
42914: EMPTY
42915: LIST
42916: LIST
42917: PUSH
42918: LD_INT 2
42920: NEG
42921: PUSH
42922: LD_INT 1
42924: PUSH
42925: EMPTY
42926: LIST
42927: LIST
42928: PUSH
42929: LD_INT 3
42931: NEG
42932: PUSH
42933: LD_INT 1
42935: NEG
42936: PUSH
42937: EMPTY
42938: LIST
42939: LIST
42940: PUSH
42941: LD_INT 3
42943: NEG
42944: PUSH
42945: LD_INT 2
42947: NEG
42948: PUSH
42949: EMPTY
42950: LIST
42951: LIST
42952: PUSH
42953: EMPTY
42954: LIST
42955: LIST
42956: LIST
42957: LIST
42958: LIST
42959: LIST
42960: LIST
42961: LIST
42962: LIST
42963: LIST
42964: LIST
42965: LIST
42966: LIST
42967: LIST
42968: LIST
42969: LIST
42970: LIST
42971: LIST
42972: LIST
42973: LIST
42974: LIST
42975: LIST
42976: LIST
42977: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
42978: LD_ADDR_VAR 0 28
42982: PUSH
42983: LD_INT 0
42985: PUSH
42986: LD_INT 0
42988: PUSH
42989: EMPTY
42990: LIST
42991: LIST
42992: PUSH
42993: LD_INT 0
42995: PUSH
42996: LD_INT 1
42998: NEG
42999: PUSH
43000: EMPTY
43001: LIST
43002: LIST
43003: PUSH
43004: LD_INT 1
43006: PUSH
43007: LD_INT 0
43009: PUSH
43010: EMPTY
43011: LIST
43012: LIST
43013: PUSH
43014: LD_INT 1
43016: PUSH
43017: LD_INT 1
43019: PUSH
43020: EMPTY
43021: LIST
43022: LIST
43023: PUSH
43024: LD_INT 0
43026: PUSH
43027: LD_INT 1
43029: PUSH
43030: EMPTY
43031: LIST
43032: LIST
43033: PUSH
43034: LD_INT 1
43036: NEG
43037: PUSH
43038: LD_INT 0
43040: PUSH
43041: EMPTY
43042: LIST
43043: LIST
43044: PUSH
43045: LD_INT 1
43047: NEG
43048: PUSH
43049: LD_INT 1
43051: NEG
43052: PUSH
43053: EMPTY
43054: LIST
43055: LIST
43056: PUSH
43057: LD_INT 1
43059: NEG
43060: PUSH
43061: LD_INT 2
43063: NEG
43064: PUSH
43065: EMPTY
43066: LIST
43067: LIST
43068: PUSH
43069: LD_INT 0
43071: PUSH
43072: LD_INT 2
43074: NEG
43075: PUSH
43076: EMPTY
43077: LIST
43078: LIST
43079: PUSH
43080: LD_INT 1
43082: PUSH
43083: LD_INT 1
43085: NEG
43086: PUSH
43087: EMPTY
43088: LIST
43089: LIST
43090: PUSH
43091: LD_INT 2
43093: PUSH
43094: LD_INT 0
43096: PUSH
43097: EMPTY
43098: LIST
43099: LIST
43100: PUSH
43101: LD_INT 2
43103: PUSH
43104: LD_INT 1
43106: PUSH
43107: EMPTY
43108: LIST
43109: LIST
43110: PUSH
43111: LD_INT 2
43113: PUSH
43114: LD_INT 2
43116: PUSH
43117: EMPTY
43118: LIST
43119: LIST
43120: PUSH
43121: LD_INT 1
43123: PUSH
43124: LD_INT 2
43126: PUSH
43127: EMPTY
43128: LIST
43129: LIST
43130: PUSH
43131: LD_INT 0
43133: PUSH
43134: LD_INT 2
43136: PUSH
43137: EMPTY
43138: LIST
43139: LIST
43140: PUSH
43141: LD_INT 1
43143: NEG
43144: PUSH
43145: LD_INT 1
43147: PUSH
43148: EMPTY
43149: LIST
43150: LIST
43151: PUSH
43152: LD_INT 2
43154: NEG
43155: PUSH
43156: LD_INT 0
43158: PUSH
43159: EMPTY
43160: LIST
43161: LIST
43162: PUSH
43163: LD_INT 2
43165: NEG
43166: PUSH
43167: LD_INT 1
43169: NEG
43170: PUSH
43171: EMPTY
43172: LIST
43173: LIST
43174: PUSH
43175: LD_INT 2
43177: NEG
43178: PUSH
43179: LD_INT 2
43181: NEG
43182: PUSH
43183: EMPTY
43184: LIST
43185: LIST
43186: PUSH
43187: LD_INT 2
43189: NEG
43190: PUSH
43191: LD_INT 3
43193: NEG
43194: PUSH
43195: EMPTY
43196: LIST
43197: LIST
43198: PUSH
43199: LD_INT 1
43201: NEG
43202: PUSH
43203: LD_INT 3
43205: NEG
43206: PUSH
43207: EMPTY
43208: LIST
43209: LIST
43210: PUSH
43211: LD_INT 3
43213: NEG
43214: PUSH
43215: LD_INT 1
43217: NEG
43218: PUSH
43219: EMPTY
43220: LIST
43221: LIST
43222: PUSH
43223: LD_INT 3
43225: NEG
43226: PUSH
43227: LD_INT 2
43229: NEG
43230: PUSH
43231: EMPTY
43232: LIST
43233: LIST
43234: PUSH
43235: EMPTY
43236: LIST
43237: LIST
43238: LIST
43239: LIST
43240: LIST
43241: LIST
43242: LIST
43243: LIST
43244: LIST
43245: LIST
43246: LIST
43247: LIST
43248: LIST
43249: LIST
43250: LIST
43251: LIST
43252: LIST
43253: LIST
43254: LIST
43255: LIST
43256: LIST
43257: LIST
43258: LIST
43259: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
43260: LD_ADDR_VAR 0 29
43264: PUSH
43265: LD_INT 0
43267: PUSH
43268: LD_INT 0
43270: PUSH
43271: EMPTY
43272: LIST
43273: LIST
43274: PUSH
43275: LD_INT 0
43277: PUSH
43278: LD_INT 1
43280: NEG
43281: PUSH
43282: EMPTY
43283: LIST
43284: LIST
43285: PUSH
43286: LD_INT 1
43288: PUSH
43289: LD_INT 0
43291: PUSH
43292: EMPTY
43293: LIST
43294: LIST
43295: PUSH
43296: LD_INT 1
43298: PUSH
43299: LD_INT 1
43301: PUSH
43302: EMPTY
43303: LIST
43304: LIST
43305: PUSH
43306: LD_INT 0
43308: PUSH
43309: LD_INT 1
43311: PUSH
43312: EMPTY
43313: LIST
43314: LIST
43315: PUSH
43316: LD_INT 1
43318: NEG
43319: PUSH
43320: LD_INT 0
43322: PUSH
43323: EMPTY
43324: LIST
43325: LIST
43326: PUSH
43327: LD_INT 1
43329: NEG
43330: PUSH
43331: LD_INT 1
43333: NEG
43334: PUSH
43335: EMPTY
43336: LIST
43337: LIST
43338: PUSH
43339: LD_INT 1
43341: NEG
43342: PUSH
43343: LD_INT 2
43345: NEG
43346: PUSH
43347: EMPTY
43348: LIST
43349: LIST
43350: PUSH
43351: LD_INT 0
43353: PUSH
43354: LD_INT 2
43356: NEG
43357: PUSH
43358: EMPTY
43359: LIST
43360: LIST
43361: PUSH
43362: LD_INT 1
43364: PUSH
43365: LD_INT 1
43367: NEG
43368: PUSH
43369: EMPTY
43370: LIST
43371: LIST
43372: PUSH
43373: LD_INT 2
43375: PUSH
43376: LD_INT 0
43378: PUSH
43379: EMPTY
43380: LIST
43381: LIST
43382: PUSH
43383: LD_INT 2
43385: PUSH
43386: LD_INT 1
43388: PUSH
43389: EMPTY
43390: LIST
43391: LIST
43392: PUSH
43393: LD_INT 1
43395: PUSH
43396: LD_INT 2
43398: PUSH
43399: EMPTY
43400: LIST
43401: LIST
43402: PUSH
43403: LD_INT 0
43405: PUSH
43406: LD_INT 2
43408: PUSH
43409: EMPTY
43410: LIST
43411: LIST
43412: PUSH
43413: LD_INT 1
43415: NEG
43416: PUSH
43417: LD_INT 1
43419: PUSH
43420: EMPTY
43421: LIST
43422: LIST
43423: PUSH
43424: LD_INT 2
43426: NEG
43427: PUSH
43428: LD_INT 1
43430: NEG
43431: PUSH
43432: EMPTY
43433: LIST
43434: LIST
43435: PUSH
43436: LD_INT 2
43438: NEG
43439: PUSH
43440: LD_INT 2
43442: NEG
43443: PUSH
43444: EMPTY
43445: LIST
43446: LIST
43447: PUSH
43448: LD_INT 2
43450: NEG
43451: PUSH
43452: LD_INT 3
43454: NEG
43455: PUSH
43456: EMPTY
43457: LIST
43458: LIST
43459: PUSH
43460: LD_INT 2
43462: PUSH
43463: LD_INT 1
43465: NEG
43466: PUSH
43467: EMPTY
43468: LIST
43469: LIST
43470: PUSH
43471: LD_INT 3
43473: PUSH
43474: LD_INT 1
43476: PUSH
43477: EMPTY
43478: LIST
43479: LIST
43480: PUSH
43481: LD_INT 1
43483: PUSH
43484: LD_INT 3
43486: PUSH
43487: EMPTY
43488: LIST
43489: LIST
43490: PUSH
43491: LD_INT 1
43493: NEG
43494: PUSH
43495: LD_INT 2
43497: PUSH
43498: EMPTY
43499: LIST
43500: LIST
43501: PUSH
43502: LD_INT 3
43504: NEG
43505: PUSH
43506: LD_INT 2
43508: NEG
43509: PUSH
43510: EMPTY
43511: LIST
43512: LIST
43513: PUSH
43514: EMPTY
43515: LIST
43516: LIST
43517: LIST
43518: LIST
43519: LIST
43520: LIST
43521: LIST
43522: LIST
43523: LIST
43524: LIST
43525: LIST
43526: LIST
43527: LIST
43528: LIST
43529: LIST
43530: LIST
43531: LIST
43532: LIST
43533: LIST
43534: LIST
43535: LIST
43536: LIST
43537: LIST
43538: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
43539: LD_ADDR_VAR 0 30
43543: PUSH
43544: LD_INT 0
43546: PUSH
43547: LD_INT 0
43549: PUSH
43550: EMPTY
43551: LIST
43552: LIST
43553: PUSH
43554: LD_INT 0
43556: PUSH
43557: LD_INT 1
43559: NEG
43560: PUSH
43561: EMPTY
43562: LIST
43563: LIST
43564: PUSH
43565: LD_INT 1
43567: PUSH
43568: LD_INT 0
43570: PUSH
43571: EMPTY
43572: LIST
43573: LIST
43574: PUSH
43575: LD_INT 1
43577: PUSH
43578: LD_INT 1
43580: PUSH
43581: EMPTY
43582: LIST
43583: LIST
43584: PUSH
43585: LD_INT 0
43587: PUSH
43588: LD_INT 1
43590: PUSH
43591: EMPTY
43592: LIST
43593: LIST
43594: PUSH
43595: LD_INT 1
43597: NEG
43598: PUSH
43599: LD_INT 0
43601: PUSH
43602: EMPTY
43603: LIST
43604: LIST
43605: PUSH
43606: LD_INT 1
43608: NEG
43609: PUSH
43610: LD_INT 1
43612: NEG
43613: PUSH
43614: EMPTY
43615: LIST
43616: LIST
43617: PUSH
43618: LD_INT 1
43620: NEG
43621: PUSH
43622: LD_INT 2
43624: NEG
43625: PUSH
43626: EMPTY
43627: LIST
43628: LIST
43629: PUSH
43630: LD_INT 0
43632: PUSH
43633: LD_INT 2
43635: NEG
43636: PUSH
43637: EMPTY
43638: LIST
43639: LIST
43640: PUSH
43641: LD_INT 1
43643: PUSH
43644: LD_INT 1
43646: NEG
43647: PUSH
43648: EMPTY
43649: LIST
43650: LIST
43651: PUSH
43652: LD_INT 2
43654: PUSH
43655: LD_INT 0
43657: PUSH
43658: EMPTY
43659: LIST
43660: LIST
43661: PUSH
43662: LD_INT 2
43664: PUSH
43665: LD_INT 1
43667: PUSH
43668: EMPTY
43669: LIST
43670: LIST
43671: PUSH
43672: LD_INT 2
43674: PUSH
43675: LD_INT 2
43677: PUSH
43678: EMPTY
43679: LIST
43680: LIST
43681: PUSH
43682: LD_INT 1
43684: PUSH
43685: LD_INT 2
43687: PUSH
43688: EMPTY
43689: LIST
43690: LIST
43691: PUSH
43692: LD_INT 1
43694: NEG
43695: PUSH
43696: LD_INT 1
43698: PUSH
43699: EMPTY
43700: LIST
43701: LIST
43702: PUSH
43703: LD_INT 2
43705: NEG
43706: PUSH
43707: LD_INT 0
43709: PUSH
43710: EMPTY
43711: LIST
43712: LIST
43713: PUSH
43714: LD_INT 2
43716: NEG
43717: PUSH
43718: LD_INT 1
43720: NEG
43721: PUSH
43722: EMPTY
43723: LIST
43724: LIST
43725: PUSH
43726: LD_INT 1
43728: NEG
43729: PUSH
43730: LD_INT 3
43732: NEG
43733: PUSH
43734: EMPTY
43735: LIST
43736: LIST
43737: PUSH
43738: LD_INT 1
43740: PUSH
43741: LD_INT 2
43743: NEG
43744: PUSH
43745: EMPTY
43746: LIST
43747: LIST
43748: PUSH
43749: LD_INT 3
43751: PUSH
43752: LD_INT 2
43754: PUSH
43755: EMPTY
43756: LIST
43757: LIST
43758: PUSH
43759: LD_INT 2
43761: PUSH
43762: LD_INT 3
43764: PUSH
43765: EMPTY
43766: LIST
43767: LIST
43768: PUSH
43769: LD_INT 2
43771: NEG
43772: PUSH
43773: LD_INT 1
43775: PUSH
43776: EMPTY
43777: LIST
43778: LIST
43779: PUSH
43780: LD_INT 3
43782: NEG
43783: PUSH
43784: LD_INT 1
43786: NEG
43787: PUSH
43788: EMPTY
43789: LIST
43790: LIST
43791: PUSH
43792: EMPTY
43793: LIST
43794: LIST
43795: LIST
43796: LIST
43797: LIST
43798: LIST
43799: LIST
43800: LIST
43801: LIST
43802: LIST
43803: LIST
43804: LIST
43805: LIST
43806: LIST
43807: LIST
43808: LIST
43809: LIST
43810: LIST
43811: LIST
43812: LIST
43813: LIST
43814: LIST
43815: LIST
43816: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
43817: LD_ADDR_VAR 0 31
43821: PUSH
43822: LD_INT 0
43824: PUSH
43825: LD_INT 0
43827: PUSH
43828: EMPTY
43829: LIST
43830: LIST
43831: PUSH
43832: LD_INT 0
43834: PUSH
43835: LD_INT 1
43837: NEG
43838: PUSH
43839: EMPTY
43840: LIST
43841: LIST
43842: PUSH
43843: LD_INT 1
43845: PUSH
43846: LD_INT 0
43848: PUSH
43849: EMPTY
43850: LIST
43851: LIST
43852: PUSH
43853: LD_INT 1
43855: PUSH
43856: LD_INT 1
43858: PUSH
43859: EMPTY
43860: LIST
43861: LIST
43862: PUSH
43863: LD_INT 0
43865: PUSH
43866: LD_INT 1
43868: PUSH
43869: EMPTY
43870: LIST
43871: LIST
43872: PUSH
43873: LD_INT 1
43875: NEG
43876: PUSH
43877: LD_INT 0
43879: PUSH
43880: EMPTY
43881: LIST
43882: LIST
43883: PUSH
43884: LD_INT 1
43886: NEG
43887: PUSH
43888: LD_INT 1
43890: NEG
43891: PUSH
43892: EMPTY
43893: LIST
43894: LIST
43895: PUSH
43896: LD_INT 1
43898: NEG
43899: PUSH
43900: LD_INT 2
43902: NEG
43903: PUSH
43904: EMPTY
43905: LIST
43906: LIST
43907: PUSH
43908: LD_INT 1
43910: PUSH
43911: LD_INT 1
43913: NEG
43914: PUSH
43915: EMPTY
43916: LIST
43917: LIST
43918: PUSH
43919: LD_INT 2
43921: PUSH
43922: LD_INT 0
43924: PUSH
43925: EMPTY
43926: LIST
43927: LIST
43928: PUSH
43929: LD_INT 2
43931: PUSH
43932: LD_INT 1
43934: PUSH
43935: EMPTY
43936: LIST
43937: LIST
43938: PUSH
43939: LD_INT 2
43941: PUSH
43942: LD_INT 2
43944: PUSH
43945: EMPTY
43946: LIST
43947: LIST
43948: PUSH
43949: LD_INT 1
43951: PUSH
43952: LD_INT 2
43954: PUSH
43955: EMPTY
43956: LIST
43957: LIST
43958: PUSH
43959: LD_INT 0
43961: PUSH
43962: LD_INT 2
43964: PUSH
43965: EMPTY
43966: LIST
43967: LIST
43968: PUSH
43969: LD_INT 1
43971: NEG
43972: PUSH
43973: LD_INT 1
43975: PUSH
43976: EMPTY
43977: LIST
43978: LIST
43979: PUSH
43980: LD_INT 2
43982: NEG
43983: PUSH
43984: LD_INT 1
43986: NEG
43987: PUSH
43988: EMPTY
43989: LIST
43990: LIST
43991: PUSH
43992: LD_INT 2
43994: NEG
43995: PUSH
43996: LD_INT 2
43998: NEG
43999: PUSH
44000: EMPTY
44001: LIST
44002: LIST
44003: PUSH
44004: LD_INT 2
44006: NEG
44007: PUSH
44008: LD_INT 3
44010: NEG
44011: PUSH
44012: EMPTY
44013: LIST
44014: LIST
44015: PUSH
44016: LD_INT 2
44018: PUSH
44019: LD_INT 1
44021: NEG
44022: PUSH
44023: EMPTY
44024: LIST
44025: LIST
44026: PUSH
44027: LD_INT 3
44029: PUSH
44030: LD_INT 1
44032: PUSH
44033: EMPTY
44034: LIST
44035: LIST
44036: PUSH
44037: LD_INT 1
44039: PUSH
44040: LD_INT 3
44042: PUSH
44043: EMPTY
44044: LIST
44045: LIST
44046: PUSH
44047: LD_INT 1
44049: NEG
44050: PUSH
44051: LD_INT 2
44053: PUSH
44054: EMPTY
44055: LIST
44056: LIST
44057: PUSH
44058: LD_INT 3
44060: NEG
44061: PUSH
44062: LD_INT 2
44064: NEG
44065: PUSH
44066: EMPTY
44067: LIST
44068: LIST
44069: PUSH
44070: EMPTY
44071: LIST
44072: LIST
44073: LIST
44074: LIST
44075: LIST
44076: LIST
44077: LIST
44078: LIST
44079: LIST
44080: LIST
44081: LIST
44082: LIST
44083: LIST
44084: LIST
44085: LIST
44086: LIST
44087: LIST
44088: LIST
44089: LIST
44090: LIST
44091: LIST
44092: LIST
44093: LIST
44094: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
44095: LD_ADDR_VAR 0 32
44099: PUSH
44100: LD_INT 0
44102: PUSH
44103: LD_INT 0
44105: PUSH
44106: EMPTY
44107: LIST
44108: LIST
44109: PUSH
44110: LD_INT 0
44112: PUSH
44113: LD_INT 1
44115: NEG
44116: PUSH
44117: EMPTY
44118: LIST
44119: LIST
44120: PUSH
44121: LD_INT 1
44123: PUSH
44124: LD_INT 0
44126: PUSH
44127: EMPTY
44128: LIST
44129: LIST
44130: PUSH
44131: LD_INT 1
44133: PUSH
44134: LD_INT 1
44136: PUSH
44137: EMPTY
44138: LIST
44139: LIST
44140: PUSH
44141: LD_INT 0
44143: PUSH
44144: LD_INT 1
44146: PUSH
44147: EMPTY
44148: LIST
44149: LIST
44150: PUSH
44151: LD_INT 1
44153: NEG
44154: PUSH
44155: LD_INT 0
44157: PUSH
44158: EMPTY
44159: LIST
44160: LIST
44161: PUSH
44162: LD_INT 1
44164: NEG
44165: PUSH
44166: LD_INT 1
44168: NEG
44169: PUSH
44170: EMPTY
44171: LIST
44172: LIST
44173: PUSH
44174: LD_INT 1
44176: NEG
44177: PUSH
44178: LD_INT 2
44180: NEG
44181: PUSH
44182: EMPTY
44183: LIST
44184: LIST
44185: PUSH
44186: LD_INT 0
44188: PUSH
44189: LD_INT 2
44191: NEG
44192: PUSH
44193: EMPTY
44194: LIST
44195: LIST
44196: PUSH
44197: LD_INT 1
44199: PUSH
44200: LD_INT 1
44202: NEG
44203: PUSH
44204: EMPTY
44205: LIST
44206: LIST
44207: PUSH
44208: LD_INT 2
44210: PUSH
44211: LD_INT 1
44213: PUSH
44214: EMPTY
44215: LIST
44216: LIST
44217: PUSH
44218: LD_INT 2
44220: PUSH
44221: LD_INT 2
44223: PUSH
44224: EMPTY
44225: LIST
44226: LIST
44227: PUSH
44228: LD_INT 1
44230: PUSH
44231: LD_INT 2
44233: PUSH
44234: EMPTY
44235: LIST
44236: LIST
44237: PUSH
44238: LD_INT 0
44240: PUSH
44241: LD_INT 2
44243: PUSH
44244: EMPTY
44245: LIST
44246: LIST
44247: PUSH
44248: LD_INT 1
44250: NEG
44251: PUSH
44252: LD_INT 1
44254: PUSH
44255: EMPTY
44256: LIST
44257: LIST
44258: PUSH
44259: LD_INT 2
44261: NEG
44262: PUSH
44263: LD_INT 0
44265: PUSH
44266: EMPTY
44267: LIST
44268: LIST
44269: PUSH
44270: LD_INT 2
44272: NEG
44273: PUSH
44274: LD_INT 1
44276: NEG
44277: PUSH
44278: EMPTY
44279: LIST
44280: LIST
44281: PUSH
44282: LD_INT 1
44284: NEG
44285: PUSH
44286: LD_INT 3
44288: NEG
44289: PUSH
44290: EMPTY
44291: LIST
44292: LIST
44293: PUSH
44294: LD_INT 1
44296: PUSH
44297: LD_INT 2
44299: NEG
44300: PUSH
44301: EMPTY
44302: LIST
44303: LIST
44304: PUSH
44305: LD_INT 3
44307: PUSH
44308: LD_INT 2
44310: PUSH
44311: EMPTY
44312: LIST
44313: LIST
44314: PUSH
44315: LD_INT 2
44317: PUSH
44318: LD_INT 3
44320: PUSH
44321: EMPTY
44322: LIST
44323: LIST
44324: PUSH
44325: LD_INT 2
44327: NEG
44328: PUSH
44329: LD_INT 1
44331: PUSH
44332: EMPTY
44333: LIST
44334: LIST
44335: PUSH
44336: LD_INT 3
44338: NEG
44339: PUSH
44340: LD_INT 1
44342: NEG
44343: PUSH
44344: EMPTY
44345: LIST
44346: LIST
44347: PUSH
44348: EMPTY
44349: LIST
44350: LIST
44351: LIST
44352: LIST
44353: LIST
44354: LIST
44355: LIST
44356: LIST
44357: LIST
44358: LIST
44359: LIST
44360: LIST
44361: LIST
44362: LIST
44363: LIST
44364: LIST
44365: LIST
44366: LIST
44367: LIST
44368: LIST
44369: LIST
44370: LIST
44371: LIST
44372: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
44373: LD_ADDR_VAR 0 33
44377: PUSH
44378: LD_INT 0
44380: PUSH
44381: LD_INT 0
44383: PUSH
44384: EMPTY
44385: LIST
44386: LIST
44387: PUSH
44388: LD_INT 0
44390: PUSH
44391: LD_INT 1
44393: NEG
44394: PUSH
44395: EMPTY
44396: LIST
44397: LIST
44398: PUSH
44399: LD_INT 1
44401: PUSH
44402: LD_INT 0
44404: PUSH
44405: EMPTY
44406: LIST
44407: LIST
44408: PUSH
44409: LD_INT 1
44411: PUSH
44412: LD_INT 1
44414: PUSH
44415: EMPTY
44416: LIST
44417: LIST
44418: PUSH
44419: LD_INT 0
44421: PUSH
44422: LD_INT 1
44424: PUSH
44425: EMPTY
44426: LIST
44427: LIST
44428: PUSH
44429: LD_INT 1
44431: NEG
44432: PUSH
44433: LD_INT 0
44435: PUSH
44436: EMPTY
44437: LIST
44438: LIST
44439: PUSH
44440: LD_INT 1
44442: NEG
44443: PUSH
44444: LD_INT 1
44446: NEG
44447: PUSH
44448: EMPTY
44449: LIST
44450: LIST
44451: PUSH
44452: LD_INT 1
44454: NEG
44455: PUSH
44456: LD_INT 2
44458: NEG
44459: PUSH
44460: EMPTY
44461: LIST
44462: LIST
44463: PUSH
44464: LD_INT 1
44466: PUSH
44467: LD_INT 1
44469: NEG
44470: PUSH
44471: EMPTY
44472: LIST
44473: LIST
44474: PUSH
44475: LD_INT 2
44477: PUSH
44478: LD_INT 0
44480: PUSH
44481: EMPTY
44482: LIST
44483: LIST
44484: PUSH
44485: LD_INT 2
44487: PUSH
44488: LD_INT 1
44490: PUSH
44491: EMPTY
44492: LIST
44493: LIST
44494: PUSH
44495: LD_INT 1
44497: PUSH
44498: LD_INT 2
44500: PUSH
44501: EMPTY
44502: LIST
44503: LIST
44504: PUSH
44505: LD_INT 0
44507: PUSH
44508: LD_INT 2
44510: PUSH
44511: EMPTY
44512: LIST
44513: LIST
44514: PUSH
44515: LD_INT 1
44517: NEG
44518: PUSH
44519: LD_INT 1
44521: PUSH
44522: EMPTY
44523: LIST
44524: LIST
44525: PUSH
44526: LD_INT 2
44528: NEG
44529: PUSH
44530: LD_INT 0
44532: PUSH
44533: EMPTY
44534: LIST
44535: LIST
44536: PUSH
44537: LD_INT 2
44539: NEG
44540: PUSH
44541: LD_INT 1
44543: NEG
44544: PUSH
44545: EMPTY
44546: LIST
44547: LIST
44548: PUSH
44549: LD_INT 2
44551: NEG
44552: PUSH
44553: LD_INT 2
44555: NEG
44556: PUSH
44557: EMPTY
44558: LIST
44559: LIST
44560: PUSH
44561: LD_INT 2
44563: NEG
44564: PUSH
44565: LD_INT 3
44567: NEG
44568: PUSH
44569: EMPTY
44570: LIST
44571: LIST
44572: PUSH
44573: LD_INT 2
44575: PUSH
44576: LD_INT 1
44578: NEG
44579: PUSH
44580: EMPTY
44581: LIST
44582: LIST
44583: PUSH
44584: LD_INT 3
44586: PUSH
44587: LD_INT 1
44589: PUSH
44590: EMPTY
44591: LIST
44592: LIST
44593: PUSH
44594: LD_INT 1
44596: PUSH
44597: LD_INT 3
44599: PUSH
44600: EMPTY
44601: LIST
44602: LIST
44603: PUSH
44604: LD_INT 1
44606: NEG
44607: PUSH
44608: LD_INT 2
44610: PUSH
44611: EMPTY
44612: LIST
44613: LIST
44614: PUSH
44615: LD_INT 3
44617: NEG
44618: PUSH
44619: LD_INT 2
44621: NEG
44622: PUSH
44623: EMPTY
44624: LIST
44625: LIST
44626: PUSH
44627: EMPTY
44628: LIST
44629: LIST
44630: LIST
44631: LIST
44632: LIST
44633: LIST
44634: LIST
44635: LIST
44636: LIST
44637: LIST
44638: LIST
44639: LIST
44640: LIST
44641: LIST
44642: LIST
44643: LIST
44644: LIST
44645: LIST
44646: LIST
44647: LIST
44648: LIST
44649: LIST
44650: LIST
44651: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
44652: LD_ADDR_VAR 0 34
44656: PUSH
44657: LD_INT 0
44659: PUSH
44660: LD_INT 0
44662: PUSH
44663: EMPTY
44664: LIST
44665: LIST
44666: PUSH
44667: LD_INT 0
44669: PUSH
44670: LD_INT 1
44672: NEG
44673: PUSH
44674: EMPTY
44675: LIST
44676: LIST
44677: PUSH
44678: LD_INT 1
44680: PUSH
44681: LD_INT 0
44683: PUSH
44684: EMPTY
44685: LIST
44686: LIST
44687: PUSH
44688: LD_INT 1
44690: PUSH
44691: LD_INT 1
44693: PUSH
44694: EMPTY
44695: LIST
44696: LIST
44697: PUSH
44698: LD_INT 0
44700: PUSH
44701: LD_INT 1
44703: PUSH
44704: EMPTY
44705: LIST
44706: LIST
44707: PUSH
44708: LD_INT 1
44710: NEG
44711: PUSH
44712: LD_INT 0
44714: PUSH
44715: EMPTY
44716: LIST
44717: LIST
44718: PUSH
44719: LD_INT 1
44721: NEG
44722: PUSH
44723: LD_INT 1
44725: NEG
44726: PUSH
44727: EMPTY
44728: LIST
44729: LIST
44730: PUSH
44731: LD_INT 1
44733: NEG
44734: PUSH
44735: LD_INT 2
44737: NEG
44738: PUSH
44739: EMPTY
44740: LIST
44741: LIST
44742: PUSH
44743: LD_INT 0
44745: PUSH
44746: LD_INT 2
44748: NEG
44749: PUSH
44750: EMPTY
44751: LIST
44752: LIST
44753: PUSH
44754: LD_INT 1
44756: PUSH
44757: LD_INT 1
44759: NEG
44760: PUSH
44761: EMPTY
44762: LIST
44763: LIST
44764: PUSH
44765: LD_INT 2
44767: PUSH
44768: LD_INT 1
44770: PUSH
44771: EMPTY
44772: LIST
44773: LIST
44774: PUSH
44775: LD_INT 2
44777: PUSH
44778: LD_INT 2
44780: PUSH
44781: EMPTY
44782: LIST
44783: LIST
44784: PUSH
44785: LD_INT 1
44787: PUSH
44788: LD_INT 2
44790: PUSH
44791: EMPTY
44792: LIST
44793: LIST
44794: PUSH
44795: LD_INT 1
44797: NEG
44798: PUSH
44799: LD_INT 1
44801: PUSH
44802: EMPTY
44803: LIST
44804: LIST
44805: PUSH
44806: LD_INT 2
44808: NEG
44809: PUSH
44810: LD_INT 0
44812: PUSH
44813: EMPTY
44814: LIST
44815: LIST
44816: PUSH
44817: LD_INT 2
44819: NEG
44820: PUSH
44821: LD_INT 1
44823: NEG
44824: PUSH
44825: EMPTY
44826: LIST
44827: LIST
44828: PUSH
44829: LD_INT 2
44831: NEG
44832: PUSH
44833: LD_INT 2
44835: NEG
44836: PUSH
44837: EMPTY
44838: LIST
44839: LIST
44840: PUSH
44841: LD_INT 1
44843: NEG
44844: PUSH
44845: LD_INT 3
44847: NEG
44848: PUSH
44849: EMPTY
44850: LIST
44851: LIST
44852: PUSH
44853: LD_INT 1
44855: PUSH
44856: LD_INT 2
44858: NEG
44859: PUSH
44860: EMPTY
44861: LIST
44862: LIST
44863: PUSH
44864: LD_INT 3
44866: PUSH
44867: LD_INT 2
44869: PUSH
44870: EMPTY
44871: LIST
44872: LIST
44873: PUSH
44874: LD_INT 2
44876: PUSH
44877: LD_INT 3
44879: PUSH
44880: EMPTY
44881: LIST
44882: LIST
44883: PUSH
44884: LD_INT 2
44886: NEG
44887: PUSH
44888: LD_INT 1
44890: PUSH
44891: EMPTY
44892: LIST
44893: LIST
44894: PUSH
44895: LD_INT 3
44897: NEG
44898: PUSH
44899: LD_INT 1
44901: NEG
44902: PUSH
44903: EMPTY
44904: LIST
44905: LIST
44906: PUSH
44907: EMPTY
44908: LIST
44909: LIST
44910: LIST
44911: LIST
44912: LIST
44913: LIST
44914: LIST
44915: LIST
44916: LIST
44917: LIST
44918: LIST
44919: LIST
44920: LIST
44921: LIST
44922: LIST
44923: LIST
44924: LIST
44925: LIST
44926: LIST
44927: LIST
44928: LIST
44929: LIST
44930: LIST
44931: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
44932: LD_ADDR_VAR 0 35
44936: PUSH
44937: LD_INT 0
44939: PUSH
44940: LD_INT 0
44942: PUSH
44943: EMPTY
44944: LIST
44945: LIST
44946: PUSH
44947: LD_INT 0
44949: PUSH
44950: LD_INT 1
44952: NEG
44953: PUSH
44954: EMPTY
44955: LIST
44956: LIST
44957: PUSH
44958: LD_INT 1
44960: PUSH
44961: LD_INT 0
44963: PUSH
44964: EMPTY
44965: LIST
44966: LIST
44967: PUSH
44968: LD_INT 1
44970: PUSH
44971: LD_INT 1
44973: PUSH
44974: EMPTY
44975: LIST
44976: LIST
44977: PUSH
44978: LD_INT 0
44980: PUSH
44981: LD_INT 1
44983: PUSH
44984: EMPTY
44985: LIST
44986: LIST
44987: PUSH
44988: LD_INT 1
44990: NEG
44991: PUSH
44992: LD_INT 0
44994: PUSH
44995: EMPTY
44996: LIST
44997: LIST
44998: PUSH
44999: LD_INT 1
45001: NEG
45002: PUSH
45003: LD_INT 1
45005: NEG
45006: PUSH
45007: EMPTY
45008: LIST
45009: LIST
45010: PUSH
45011: LD_INT 2
45013: PUSH
45014: LD_INT 1
45016: PUSH
45017: EMPTY
45018: LIST
45019: LIST
45020: PUSH
45021: LD_INT 2
45023: NEG
45024: PUSH
45025: LD_INT 1
45027: NEG
45028: PUSH
45029: EMPTY
45030: LIST
45031: LIST
45032: PUSH
45033: EMPTY
45034: LIST
45035: LIST
45036: LIST
45037: LIST
45038: LIST
45039: LIST
45040: LIST
45041: LIST
45042: LIST
45043: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
45044: LD_ADDR_VAR 0 36
45048: PUSH
45049: LD_INT 0
45051: PUSH
45052: LD_INT 0
45054: PUSH
45055: EMPTY
45056: LIST
45057: LIST
45058: PUSH
45059: LD_INT 0
45061: PUSH
45062: LD_INT 1
45064: NEG
45065: PUSH
45066: EMPTY
45067: LIST
45068: LIST
45069: PUSH
45070: LD_INT 1
45072: PUSH
45073: LD_INT 0
45075: PUSH
45076: EMPTY
45077: LIST
45078: LIST
45079: PUSH
45080: LD_INT 1
45082: PUSH
45083: LD_INT 1
45085: PUSH
45086: EMPTY
45087: LIST
45088: LIST
45089: PUSH
45090: LD_INT 0
45092: PUSH
45093: LD_INT 1
45095: PUSH
45096: EMPTY
45097: LIST
45098: LIST
45099: PUSH
45100: LD_INT 1
45102: NEG
45103: PUSH
45104: LD_INT 0
45106: PUSH
45107: EMPTY
45108: LIST
45109: LIST
45110: PUSH
45111: LD_INT 1
45113: NEG
45114: PUSH
45115: LD_INT 1
45117: NEG
45118: PUSH
45119: EMPTY
45120: LIST
45121: LIST
45122: PUSH
45123: LD_INT 1
45125: NEG
45126: PUSH
45127: LD_INT 2
45129: NEG
45130: PUSH
45131: EMPTY
45132: LIST
45133: LIST
45134: PUSH
45135: LD_INT 1
45137: PUSH
45138: LD_INT 2
45140: PUSH
45141: EMPTY
45142: LIST
45143: LIST
45144: PUSH
45145: EMPTY
45146: LIST
45147: LIST
45148: LIST
45149: LIST
45150: LIST
45151: LIST
45152: LIST
45153: LIST
45154: LIST
45155: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
45156: LD_ADDR_VAR 0 37
45160: PUSH
45161: LD_INT 0
45163: PUSH
45164: LD_INT 0
45166: PUSH
45167: EMPTY
45168: LIST
45169: LIST
45170: PUSH
45171: LD_INT 0
45173: PUSH
45174: LD_INT 1
45176: NEG
45177: PUSH
45178: EMPTY
45179: LIST
45180: LIST
45181: PUSH
45182: LD_INT 1
45184: PUSH
45185: LD_INT 0
45187: PUSH
45188: EMPTY
45189: LIST
45190: LIST
45191: PUSH
45192: LD_INT 1
45194: PUSH
45195: LD_INT 1
45197: PUSH
45198: EMPTY
45199: LIST
45200: LIST
45201: PUSH
45202: LD_INT 0
45204: PUSH
45205: LD_INT 1
45207: PUSH
45208: EMPTY
45209: LIST
45210: LIST
45211: PUSH
45212: LD_INT 1
45214: NEG
45215: PUSH
45216: LD_INT 0
45218: PUSH
45219: EMPTY
45220: LIST
45221: LIST
45222: PUSH
45223: LD_INT 1
45225: NEG
45226: PUSH
45227: LD_INT 1
45229: NEG
45230: PUSH
45231: EMPTY
45232: LIST
45233: LIST
45234: PUSH
45235: LD_INT 1
45237: PUSH
45238: LD_INT 1
45240: NEG
45241: PUSH
45242: EMPTY
45243: LIST
45244: LIST
45245: PUSH
45246: LD_INT 1
45248: NEG
45249: PUSH
45250: LD_INT 1
45252: PUSH
45253: EMPTY
45254: LIST
45255: LIST
45256: PUSH
45257: EMPTY
45258: LIST
45259: LIST
45260: LIST
45261: LIST
45262: LIST
45263: LIST
45264: LIST
45265: LIST
45266: LIST
45267: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
45268: LD_ADDR_VAR 0 38
45272: PUSH
45273: LD_INT 0
45275: PUSH
45276: LD_INT 0
45278: PUSH
45279: EMPTY
45280: LIST
45281: LIST
45282: PUSH
45283: LD_INT 0
45285: PUSH
45286: LD_INT 1
45288: NEG
45289: PUSH
45290: EMPTY
45291: LIST
45292: LIST
45293: PUSH
45294: LD_INT 1
45296: PUSH
45297: LD_INT 0
45299: PUSH
45300: EMPTY
45301: LIST
45302: LIST
45303: PUSH
45304: LD_INT 1
45306: PUSH
45307: LD_INT 1
45309: PUSH
45310: EMPTY
45311: LIST
45312: LIST
45313: PUSH
45314: LD_INT 0
45316: PUSH
45317: LD_INT 1
45319: PUSH
45320: EMPTY
45321: LIST
45322: LIST
45323: PUSH
45324: LD_INT 1
45326: NEG
45327: PUSH
45328: LD_INT 0
45330: PUSH
45331: EMPTY
45332: LIST
45333: LIST
45334: PUSH
45335: LD_INT 1
45337: NEG
45338: PUSH
45339: LD_INT 1
45341: NEG
45342: PUSH
45343: EMPTY
45344: LIST
45345: LIST
45346: PUSH
45347: LD_INT 2
45349: PUSH
45350: LD_INT 1
45352: PUSH
45353: EMPTY
45354: LIST
45355: LIST
45356: PUSH
45357: LD_INT 2
45359: NEG
45360: PUSH
45361: LD_INT 1
45363: NEG
45364: PUSH
45365: EMPTY
45366: LIST
45367: LIST
45368: PUSH
45369: EMPTY
45370: LIST
45371: LIST
45372: LIST
45373: LIST
45374: LIST
45375: LIST
45376: LIST
45377: LIST
45378: LIST
45379: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
45380: LD_ADDR_VAR 0 39
45384: PUSH
45385: LD_INT 0
45387: PUSH
45388: LD_INT 0
45390: PUSH
45391: EMPTY
45392: LIST
45393: LIST
45394: PUSH
45395: LD_INT 0
45397: PUSH
45398: LD_INT 1
45400: NEG
45401: PUSH
45402: EMPTY
45403: LIST
45404: LIST
45405: PUSH
45406: LD_INT 1
45408: PUSH
45409: LD_INT 0
45411: PUSH
45412: EMPTY
45413: LIST
45414: LIST
45415: PUSH
45416: LD_INT 1
45418: PUSH
45419: LD_INT 1
45421: PUSH
45422: EMPTY
45423: LIST
45424: LIST
45425: PUSH
45426: LD_INT 0
45428: PUSH
45429: LD_INT 1
45431: PUSH
45432: EMPTY
45433: LIST
45434: LIST
45435: PUSH
45436: LD_INT 1
45438: NEG
45439: PUSH
45440: LD_INT 0
45442: PUSH
45443: EMPTY
45444: LIST
45445: LIST
45446: PUSH
45447: LD_INT 1
45449: NEG
45450: PUSH
45451: LD_INT 1
45453: NEG
45454: PUSH
45455: EMPTY
45456: LIST
45457: LIST
45458: PUSH
45459: LD_INT 1
45461: NEG
45462: PUSH
45463: LD_INT 2
45465: NEG
45466: PUSH
45467: EMPTY
45468: LIST
45469: LIST
45470: PUSH
45471: LD_INT 1
45473: PUSH
45474: LD_INT 2
45476: PUSH
45477: EMPTY
45478: LIST
45479: LIST
45480: PUSH
45481: EMPTY
45482: LIST
45483: LIST
45484: LIST
45485: LIST
45486: LIST
45487: LIST
45488: LIST
45489: LIST
45490: LIST
45491: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
45492: LD_ADDR_VAR 0 40
45496: PUSH
45497: LD_INT 0
45499: PUSH
45500: LD_INT 0
45502: PUSH
45503: EMPTY
45504: LIST
45505: LIST
45506: PUSH
45507: LD_INT 0
45509: PUSH
45510: LD_INT 1
45512: NEG
45513: PUSH
45514: EMPTY
45515: LIST
45516: LIST
45517: PUSH
45518: LD_INT 1
45520: PUSH
45521: LD_INT 0
45523: PUSH
45524: EMPTY
45525: LIST
45526: LIST
45527: PUSH
45528: LD_INT 1
45530: PUSH
45531: LD_INT 1
45533: PUSH
45534: EMPTY
45535: LIST
45536: LIST
45537: PUSH
45538: LD_INT 0
45540: PUSH
45541: LD_INT 1
45543: PUSH
45544: EMPTY
45545: LIST
45546: LIST
45547: PUSH
45548: LD_INT 1
45550: NEG
45551: PUSH
45552: LD_INT 0
45554: PUSH
45555: EMPTY
45556: LIST
45557: LIST
45558: PUSH
45559: LD_INT 1
45561: NEG
45562: PUSH
45563: LD_INT 1
45565: NEG
45566: PUSH
45567: EMPTY
45568: LIST
45569: LIST
45570: PUSH
45571: LD_INT 1
45573: PUSH
45574: LD_INT 1
45576: NEG
45577: PUSH
45578: EMPTY
45579: LIST
45580: LIST
45581: PUSH
45582: LD_INT 1
45584: NEG
45585: PUSH
45586: LD_INT 1
45588: PUSH
45589: EMPTY
45590: LIST
45591: LIST
45592: PUSH
45593: EMPTY
45594: LIST
45595: LIST
45596: LIST
45597: LIST
45598: LIST
45599: LIST
45600: LIST
45601: LIST
45602: LIST
45603: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45604: LD_ADDR_VAR 0 41
45608: PUSH
45609: LD_INT 0
45611: PUSH
45612: LD_INT 0
45614: PUSH
45615: EMPTY
45616: LIST
45617: LIST
45618: PUSH
45619: LD_INT 0
45621: PUSH
45622: LD_INT 1
45624: NEG
45625: PUSH
45626: EMPTY
45627: LIST
45628: LIST
45629: PUSH
45630: LD_INT 1
45632: PUSH
45633: LD_INT 0
45635: PUSH
45636: EMPTY
45637: LIST
45638: LIST
45639: PUSH
45640: LD_INT 1
45642: PUSH
45643: LD_INT 1
45645: PUSH
45646: EMPTY
45647: LIST
45648: LIST
45649: PUSH
45650: LD_INT 0
45652: PUSH
45653: LD_INT 1
45655: PUSH
45656: EMPTY
45657: LIST
45658: LIST
45659: PUSH
45660: LD_INT 1
45662: NEG
45663: PUSH
45664: LD_INT 0
45666: PUSH
45667: EMPTY
45668: LIST
45669: LIST
45670: PUSH
45671: LD_INT 1
45673: NEG
45674: PUSH
45675: LD_INT 1
45677: NEG
45678: PUSH
45679: EMPTY
45680: LIST
45681: LIST
45682: PUSH
45683: LD_INT 1
45685: NEG
45686: PUSH
45687: LD_INT 2
45689: NEG
45690: PUSH
45691: EMPTY
45692: LIST
45693: LIST
45694: PUSH
45695: LD_INT 1
45697: PUSH
45698: LD_INT 1
45700: NEG
45701: PUSH
45702: EMPTY
45703: LIST
45704: LIST
45705: PUSH
45706: LD_INT 2
45708: PUSH
45709: LD_INT 0
45711: PUSH
45712: EMPTY
45713: LIST
45714: LIST
45715: PUSH
45716: LD_INT 2
45718: PUSH
45719: LD_INT 1
45721: PUSH
45722: EMPTY
45723: LIST
45724: LIST
45725: PUSH
45726: LD_INT 2
45728: PUSH
45729: LD_INT 2
45731: PUSH
45732: EMPTY
45733: LIST
45734: LIST
45735: PUSH
45736: LD_INT 1
45738: PUSH
45739: LD_INT 2
45741: PUSH
45742: EMPTY
45743: LIST
45744: LIST
45745: PUSH
45746: LD_INT 1
45748: NEG
45749: PUSH
45750: LD_INT 1
45752: PUSH
45753: EMPTY
45754: LIST
45755: LIST
45756: PUSH
45757: LD_INT 2
45759: NEG
45760: PUSH
45761: LD_INT 0
45763: PUSH
45764: EMPTY
45765: LIST
45766: LIST
45767: PUSH
45768: LD_INT 2
45770: NEG
45771: PUSH
45772: LD_INT 1
45774: NEG
45775: PUSH
45776: EMPTY
45777: LIST
45778: LIST
45779: PUSH
45780: LD_INT 2
45782: NEG
45783: PUSH
45784: LD_INT 2
45786: NEG
45787: PUSH
45788: EMPTY
45789: LIST
45790: LIST
45791: PUSH
45792: LD_INT 2
45794: NEG
45795: PUSH
45796: LD_INT 3
45798: NEG
45799: PUSH
45800: EMPTY
45801: LIST
45802: LIST
45803: PUSH
45804: LD_INT 2
45806: PUSH
45807: LD_INT 1
45809: NEG
45810: PUSH
45811: EMPTY
45812: LIST
45813: LIST
45814: PUSH
45815: LD_INT 3
45817: PUSH
45818: LD_INT 0
45820: PUSH
45821: EMPTY
45822: LIST
45823: LIST
45824: PUSH
45825: LD_INT 3
45827: PUSH
45828: LD_INT 1
45830: PUSH
45831: EMPTY
45832: LIST
45833: LIST
45834: PUSH
45835: LD_INT 3
45837: PUSH
45838: LD_INT 2
45840: PUSH
45841: EMPTY
45842: LIST
45843: LIST
45844: PUSH
45845: LD_INT 3
45847: PUSH
45848: LD_INT 3
45850: PUSH
45851: EMPTY
45852: LIST
45853: LIST
45854: PUSH
45855: LD_INT 2
45857: PUSH
45858: LD_INT 3
45860: PUSH
45861: EMPTY
45862: LIST
45863: LIST
45864: PUSH
45865: LD_INT 2
45867: NEG
45868: PUSH
45869: LD_INT 1
45871: PUSH
45872: EMPTY
45873: LIST
45874: LIST
45875: PUSH
45876: LD_INT 3
45878: NEG
45879: PUSH
45880: LD_INT 0
45882: PUSH
45883: EMPTY
45884: LIST
45885: LIST
45886: PUSH
45887: LD_INT 3
45889: NEG
45890: PUSH
45891: LD_INT 1
45893: NEG
45894: PUSH
45895: EMPTY
45896: LIST
45897: LIST
45898: PUSH
45899: LD_INT 3
45901: NEG
45902: PUSH
45903: LD_INT 2
45905: NEG
45906: PUSH
45907: EMPTY
45908: LIST
45909: LIST
45910: PUSH
45911: LD_INT 3
45913: NEG
45914: PUSH
45915: LD_INT 3
45917: NEG
45918: PUSH
45919: EMPTY
45920: LIST
45921: LIST
45922: PUSH
45923: EMPTY
45924: LIST
45925: LIST
45926: LIST
45927: LIST
45928: LIST
45929: LIST
45930: LIST
45931: LIST
45932: LIST
45933: LIST
45934: LIST
45935: LIST
45936: LIST
45937: LIST
45938: LIST
45939: LIST
45940: LIST
45941: LIST
45942: LIST
45943: LIST
45944: LIST
45945: LIST
45946: LIST
45947: LIST
45948: LIST
45949: LIST
45950: LIST
45951: LIST
45952: LIST
45953: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45954: LD_ADDR_VAR 0 42
45958: PUSH
45959: LD_INT 0
45961: PUSH
45962: LD_INT 0
45964: PUSH
45965: EMPTY
45966: LIST
45967: LIST
45968: PUSH
45969: LD_INT 0
45971: PUSH
45972: LD_INT 1
45974: NEG
45975: PUSH
45976: EMPTY
45977: LIST
45978: LIST
45979: PUSH
45980: LD_INT 1
45982: PUSH
45983: LD_INT 0
45985: PUSH
45986: EMPTY
45987: LIST
45988: LIST
45989: PUSH
45990: LD_INT 1
45992: PUSH
45993: LD_INT 1
45995: PUSH
45996: EMPTY
45997: LIST
45998: LIST
45999: PUSH
46000: LD_INT 0
46002: PUSH
46003: LD_INT 1
46005: PUSH
46006: EMPTY
46007: LIST
46008: LIST
46009: PUSH
46010: LD_INT 1
46012: NEG
46013: PUSH
46014: LD_INT 0
46016: PUSH
46017: EMPTY
46018: LIST
46019: LIST
46020: PUSH
46021: LD_INT 1
46023: NEG
46024: PUSH
46025: LD_INT 1
46027: NEG
46028: PUSH
46029: EMPTY
46030: LIST
46031: LIST
46032: PUSH
46033: LD_INT 1
46035: NEG
46036: PUSH
46037: LD_INT 2
46039: NEG
46040: PUSH
46041: EMPTY
46042: LIST
46043: LIST
46044: PUSH
46045: LD_INT 0
46047: PUSH
46048: LD_INT 2
46050: NEG
46051: PUSH
46052: EMPTY
46053: LIST
46054: LIST
46055: PUSH
46056: LD_INT 1
46058: PUSH
46059: LD_INT 1
46061: NEG
46062: PUSH
46063: EMPTY
46064: LIST
46065: LIST
46066: PUSH
46067: LD_INT 2
46069: PUSH
46070: LD_INT 1
46072: PUSH
46073: EMPTY
46074: LIST
46075: LIST
46076: PUSH
46077: LD_INT 2
46079: PUSH
46080: LD_INT 2
46082: PUSH
46083: EMPTY
46084: LIST
46085: LIST
46086: PUSH
46087: LD_INT 1
46089: PUSH
46090: LD_INT 2
46092: PUSH
46093: EMPTY
46094: LIST
46095: LIST
46096: PUSH
46097: LD_INT 0
46099: PUSH
46100: LD_INT 2
46102: PUSH
46103: EMPTY
46104: LIST
46105: LIST
46106: PUSH
46107: LD_INT 1
46109: NEG
46110: PUSH
46111: LD_INT 1
46113: PUSH
46114: EMPTY
46115: LIST
46116: LIST
46117: PUSH
46118: LD_INT 2
46120: NEG
46121: PUSH
46122: LD_INT 1
46124: NEG
46125: PUSH
46126: EMPTY
46127: LIST
46128: LIST
46129: PUSH
46130: LD_INT 2
46132: NEG
46133: PUSH
46134: LD_INT 2
46136: NEG
46137: PUSH
46138: EMPTY
46139: LIST
46140: LIST
46141: PUSH
46142: LD_INT 2
46144: NEG
46145: PUSH
46146: LD_INT 3
46148: NEG
46149: PUSH
46150: EMPTY
46151: LIST
46152: LIST
46153: PUSH
46154: LD_INT 1
46156: NEG
46157: PUSH
46158: LD_INT 3
46160: NEG
46161: PUSH
46162: EMPTY
46163: LIST
46164: LIST
46165: PUSH
46166: LD_INT 0
46168: PUSH
46169: LD_INT 3
46171: NEG
46172: PUSH
46173: EMPTY
46174: LIST
46175: LIST
46176: PUSH
46177: LD_INT 1
46179: PUSH
46180: LD_INT 2
46182: NEG
46183: PUSH
46184: EMPTY
46185: LIST
46186: LIST
46187: PUSH
46188: LD_INT 3
46190: PUSH
46191: LD_INT 2
46193: PUSH
46194: EMPTY
46195: LIST
46196: LIST
46197: PUSH
46198: LD_INT 3
46200: PUSH
46201: LD_INT 3
46203: PUSH
46204: EMPTY
46205: LIST
46206: LIST
46207: PUSH
46208: LD_INT 2
46210: PUSH
46211: LD_INT 3
46213: PUSH
46214: EMPTY
46215: LIST
46216: LIST
46217: PUSH
46218: LD_INT 1
46220: PUSH
46221: LD_INT 3
46223: PUSH
46224: EMPTY
46225: LIST
46226: LIST
46227: PUSH
46228: LD_INT 0
46230: PUSH
46231: LD_INT 3
46233: PUSH
46234: EMPTY
46235: LIST
46236: LIST
46237: PUSH
46238: LD_INT 1
46240: NEG
46241: PUSH
46242: LD_INT 2
46244: PUSH
46245: EMPTY
46246: LIST
46247: LIST
46248: PUSH
46249: LD_INT 3
46251: NEG
46252: PUSH
46253: LD_INT 2
46255: NEG
46256: PUSH
46257: EMPTY
46258: LIST
46259: LIST
46260: PUSH
46261: LD_INT 3
46263: NEG
46264: PUSH
46265: LD_INT 3
46267: NEG
46268: PUSH
46269: EMPTY
46270: LIST
46271: LIST
46272: PUSH
46273: EMPTY
46274: LIST
46275: LIST
46276: LIST
46277: LIST
46278: LIST
46279: LIST
46280: LIST
46281: LIST
46282: LIST
46283: LIST
46284: LIST
46285: LIST
46286: LIST
46287: LIST
46288: LIST
46289: LIST
46290: LIST
46291: LIST
46292: LIST
46293: LIST
46294: LIST
46295: LIST
46296: LIST
46297: LIST
46298: LIST
46299: LIST
46300: LIST
46301: LIST
46302: LIST
46303: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46304: LD_ADDR_VAR 0 43
46308: PUSH
46309: LD_INT 0
46311: PUSH
46312: LD_INT 0
46314: PUSH
46315: EMPTY
46316: LIST
46317: LIST
46318: PUSH
46319: LD_INT 0
46321: PUSH
46322: LD_INT 1
46324: NEG
46325: PUSH
46326: EMPTY
46327: LIST
46328: LIST
46329: PUSH
46330: LD_INT 1
46332: PUSH
46333: LD_INT 0
46335: PUSH
46336: EMPTY
46337: LIST
46338: LIST
46339: PUSH
46340: LD_INT 1
46342: PUSH
46343: LD_INT 1
46345: PUSH
46346: EMPTY
46347: LIST
46348: LIST
46349: PUSH
46350: LD_INT 0
46352: PUSH
46353: LD_INT 1
46355: PUSH
46356: EMPTY
46357: LIST
46358: LIST
46359: PUSH
46360: LD_INT 1
46362: NEG
46363: PUSH
46364: LD_INT 0
46366: PUSH
46367: EMPTY
46368: LIST
46369: LIST
46370: PUSH
46371: LD_INT 1
46373: NEG
46374: PUSH
46375: LD_INT 1
46377: NEG
46378: PUSH
46379: EMPTY
46380: LIST
46381: LIST
46382: PUSH
46383: LD_INT 1
46385: NEG
46386: PUSH
46387: LD_INT 2
46389: NEG
46390: PUSH
46391: EMPTY
46392: LIST
46393: LIST
46394: PUSH
46395: LD_INT 0
46397: PUSH
46398: LD_INT 2
46400: NEG
46401: PUSH
46402: EMPTY
46403: LIST
46404: LIST
46405: PUSH
46406: LD_INT 1
46408: PUSH
46409: LD_INT 1
46411: NEG
46412: PUSH
46413: EMPTY
46414: LIST
46415: LIST
46416: PUSH
46417: LD_INT 2
46419: PUSH
46420: LD_INT 0
46422: PUSH
46423: EMPTY
46424: LIST
46425: LIST
46426: PUSH
46427: LD_INT 2
46429: PUSH
46430: LD_INT 1
46432: PUSH
46433: EMPTY
46434: LIST
46435: LIST
46436: PUSH
46437: LD_INT 1
46439: PUSH
46440: LD_INT 2
46442: PUSH
46443: EMPTY
46444: LIST
46445: LIST
46446: PUSH
46447: LD_INT 0
46449: PUSH
46450: LD_INT 2
46452: PUSH
46453: EMPTY
46454: LIST
46455: LIST
46456: PUSH
46457: LD_INT 1
46459: NEG
46460: PUSH
46461: LD_INT 1
46463: PUSH
46464: EMPTY
46465: LIST
46466: LIST
46467: PUSH
46468: LD_INT 2
46470: NEG
46471: PUSH
46472: LD_INT 0
46474: PUSH
46475: EMPTY
46476: LIST
46477: LIST
46478: PUSH
46479: LD_INT 2
46481: NEG
46482: PUSH
46483: LD_INT 1
46485: NEG
46486: PUSH
46487: EMPTY
46488: LIST
46489: LIST
46490: PUSH
46491: LD_INT 1
46493: NEG
46494: PUSH
46495: LD_INT 3
46497: NEG
46498: PUSH
46499: EMPTY
46500: LIST
46501: LIST
46502: PUSH
46503: LD_INT 0
46505: PUSH
46506: LD_INT 3
46508: NEG
46509: PUSH
46510: EMPTY
46511: LIST
46512: LIST
46513: PUSH
46514: LD_INT 1
46516: PUSH
46517: LD_INT 2
46519: NEG
46520: PUSH
46521: EMPTY
46522: LIST
46523: LIST
46524: PUSH
46525: LD_INT 2
46527: PUSH
46528: LD_INT 1
46530: NEG
46531: PUSH
46532: EMPTY
46533: LIST
46534: LIST
46535: PUSH
46536: LD_INT 3
46538: PUSH
46539: LD_INT 0
46541: PUSH
46542: EMPTY
46543: LIST
46544: LIST
46545: PUSH
46546: LD_INT 3
46548: PUSH
46549: LD_INT 1
46551: PUSH
46552: EMPTY
46553: LIST
46554: LIST
46555: PUSH
46556: LD_INT 1
46558: PUSH
46559: LD_INT 3
46561: PUSH
46562: EMPTY
46563: LIST
46564: LIST
46565: PUSH
46566: LD_INT 0
46568: PUSH
46569: LD_INT 3
46571: PUSH
46572: EMPTY
46573: LIST
46574: LIST
46575: PUSH
46576: LD_INT 1
46578: NEG
46579: PUSH
46580: LD_INT 2
46582: PUSH
46583: EMPTY
46584: LIST
46585: LIST
46586: PUSH
46587: LD_INT 2
46589: NEG
46590: PUSH
46591: LD_INT 1
46593: PUSH
46594: EMPTY
46595: LIST
46596: LIST
46597: PUSH
46598: LD_INT 3
46600: NEG
46601: PUSH
46602: LD_INT 0
46604: PUSH
46605: EMPTY
46606: LIST
46607: LIST
46608: PUSH
46609: LD_INT 3
46611: NEG
46612: PUSH
46613: LD_INT 1
46615: NEG
46616: PUSH
46617: EMPTY
46618: LIST
46619: LIST
46620: PUSH
46621: EMPTY
46622: LIST
46623: LIST
46624: LIST
46625: LIST
46626: LIST
46627: LIST
46628: LIST
46629: LIST
46630: LIST
46631: LIST
46632: LIST
46633: LIST
46634: LIST
46635: LIST
46636: LIST
46637: LIST
46638: LIST
46639: LIST
46640: LIST
46641: LIST
46642: LIST
46643: LIST
46644: LIST
46645: LIST
46646: LIST
46647: LIST
46648: LIST
46649: LIST
46650: LIST
46651: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46652: LD_ADDR_VAR 0 44
46656: PUSH
46657: LD_INT 0
46659: PUSH
46660: LD_INT 0
46662: PUSH
46663: EMPTY
46664: LIST
46665: LIST
46666: PUSH
46667: LD_INT 0
46669: PUSH
46670: LD_INT 1
46672: NEG
46673: PUSH
46674: EMPTY
46675: LIST
46676: LIST
46677: PUSH
46678: LD_INT 1
46680: PUSH
46681: LD_INT 0
46683: PUSH
46684: EMPTY
46685: LIST
46686: LIST
46687: PUSH
46688: LD_INT 1
46690: PUSH
46691: LD_INT 1
46693: PUSH
46694: EMPTY
46695: LIST
46696: LIST
46697: PUSH
46698: LD_INT 0
46700: PUSH
46701: LD_INT 1
46703: PUSH
46704: EMPTY
46705: LIST
46706: LIST
46707: PUSH
46708: LD_INT 1
46710: NEG
46711: PUSH
46712: LD_INT 0
46714: PUSH
46715: EMPTY
46716: LIST
46717: LIST
46718: PUSH
46719: LD_INT 1
46721: NEG
46722: PUSH
46723: LD_INT 1
46725: NEG
46726: PUSH
46727: EMPTY
46728: LIST
46729: LIST
46730: PUSH
46731: LD_INT 1
46733: NEG
46734: PUSH
46735: LD_INT 2
46737: NEG
46738: PUSH
46739: EMPTY
46740: LIST
46741: LIST
46742: PUSH
46743: LD_INT 1
46745: PUSH
46746: LD_INT 1
46748: NEG
46749: PUSH
46750: EMPTY
46751: LIST
46752: LIST
46753: PUSH
46754: LD_INT 2
46756: PUSH
46757: LD_INT 0
46759: PUSH
46760: EMPTY
46761: LIST
46762: LIST
46763: PUSH
46764: LD_INT 2
46766: PUSH
46767: LD_INT 1
46769: PUSH
46770: EMPTY
46771: LIST
46772: LIST
46773: PUSH
46774: LD_INT 2
46776: PUSH
46777: LD_INT 2
46779: PUSH
46780: EMPTY
46781: LIST
46782: LIST
46783: PUSH
46784: LD_INT 1
46786: PUSH
46787: LD_INT 2
46789: PUSH
46790: EMPTY
46791: LIST
46792: LIST
46793: PUSH
46794: LD_INT 1
46796: NEG
46797: PUSH
46798: LD_INT 1
46800: PUSH
46801: EMPTY
46802: LIST
46803: LIST
46804: PUSH
46805: LD_INT 2
46807: NEG
46808: PUSH
46809: LD_INT 0
46811: PUSH
46812: EMPTY
46813: LIST
46814: LIST
46815: PUSH
46816: LD_INT 2
46818: NEG
46819: PUSH
46820: LD_INT 1
46822: NEG
46823: PUSH
46824: EMPTY
46825: LIST
46826: LIST
46827: PUSH
46828: LD_INT 2
46830: NEG
46831: PUSH
46832: LD_INT 2
46834: NEG
46835: PUSH
46836: EMPTY
46837: LIST
46838: LIST
46839: PUSH
46840: LD_INT 2
46842: NEG
46843: PUSH
46844: LD_INT 3
46846: NEG
46847: PUSH
46848: EMPTY
46849: LIST
46850: LIST
46851: PUSH
46852: LD_INT 2
46854: PUSH
46855: LD_INT 1
46857: NEG
46858: PUSH
46859: EMPTY
46860: LIST
46861: LIST
46862: PUSH
46863: LD_INT 3
46865: PUSH
46866: LD_INT 0
46868: PUSH
46869: EMPTY
46870: LIST
46871: LIST
46872: PUSH
46873: LD_INT 3
46875: PUSH
46876: LD_INT 1
46878: PUSH
46879: EMPTY
46880: LIST
46881: LIST
46882: PUSH
46883: LD_INT 3
46885: PUSH
46886: LD_INT 2
46888: PUSH
46889: EMPTY
46890: LIST
46891: LIST
46892: PUSH
46893: LD_INT 3
46895: PUSH
46896: LD_INT 3
46898: PUSH
46899: EMPTY
46900: LIST
46901: LIST
46902: PUSH
46903: LD_INT 2
46905: PUSH
46906: LD_INT 3
46908: PUSH
46909: EMPTY
46910: LIST
46911: LIST
46912: PUSH
46913: LD_INT 2
46915: NEG
46916: PUSH
46917: LD_INT 1
46919: PUSH
46920: EMPTY
46921: LIST
46922: LIST
46923: PUSH
46924: LD_INT 3
46926: NEG
46927: PUSH
46928: LD_INT 0
46930: PUSH
46931: EMPTY
46932: LIST
46933: LIST
46934: PUSH
46935: LD_INT 3
46937: NEG
46938: PUSH
46939: LD_INT 1
46941: NEG
46942: PUSH
46943: EMPTY
46944: LIST
46945: LIST
46946: PUSH
46947: LD_INT 3
46949: NEG
46950: PUSH
46951: LD_INT 2
46953: NEG
46954: PUSH
46955: EMPTY
46956: LIST
46957: LIST
46958: PUSH
46959: LD_INT 3
46961: NEG
46962: PUSH
46963: LD_INT 3
46965: NEG
46966: PUSH
46967: EMPTY
46968: LIST
46969: LIST
46970: PUSH
46971: EMPTY
46972: LIST
46973: LIST
46974: LIST
46975: LIST
46976: LIST
46977: LIST
46978: LIST
46979: LIST
46980: LIST
46981: LIST
46982: LIST
46983: LIST
46984: LIST
46985: LIST
46986: LIST
46987: LIST
46988: LIST
46989: LIST
46990: LIST
46991: LIST
46992: LIST
46993: LIST
46994: LIST
46995: LIST
46996: LIST
46997: LIST
46998: LIST
46999: LIST
47000: LIST
47001: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47002: LD_ADDR_VAR 0 45
47006: PUSH
47007: LD_INT 0
47009: PUSH
47010: LD_INT 0
47012: PUSH
47013: EMPTY
47014: LIST
47015: LIST
47016: PUSH
47017: LD_INT 0
47019: PUSH
47020: LD_INT 1
47022: NEG
47023: PUSH
47024: EMPTY
47025: LIST
47026: LIST
47027: PUSH
47028: LD_INT 1
47030: PUSH
47031: LD_INT 0
47033: PUSH
47034: EMPTY
47035: LIST
47036: LIST
47037: PUSH
47038: LD_INT 1
47040: PUSH
47041: LD_INT 1
47043: PUSH
47044: EMPTY
47045: LIST
47046: LIST
47047: PUSH
47048: LD_INT 0
47050: PUSH
47051: LD_INT 1
47053: PUSH
47054: EMPTY
47055: LIST
47056: LIST
47057: PUSH
47058: LD_INT 1
47060: NEG
47061: PUSH
47062: LD_INT 0
47064: PUSH
47065: EMPTY
47066: LIST
47067: LIST
47068: PUSH
47069: LD_INT 1
47071: NEG
47072: PUSH
47073: LD_INT 1
47075: NEG
47076: PUSH
47077: EMPTY
47078: LIST
47079: LIST
47080: PUSH
47081: LD_INT 1
47083: NEG
47084: PUSH
47085: LD_INT 2
47087: NEG
47088: PUSH
47089: EMPTY
47090: LIST
47091: LIST
47092: PUSH
47093: LD_INT 0
47095: PUSH
47096: LD_INT 2
47098: NEG
47099: PUSH
47100: EMPTY
47101: LIST
47102: LIST
47103: PUSH
47104: LD_INT 1
47106: PUSH
47107: LD_INT 1
47109: NEG
47110: PUSH
47111: EMPTY
47112: LIST
47113: LIST
47114: PUSH
47115: LD_INT 2
47117: PUSH
47118: LD_INT 1
47120: PUSH
47121: EMPTY
47122: LIST
47123: LIST
47124: PUSH
47125: LD_INT 2
47127: PUSH
47128: LD_INT 2
47130: PUSH
47131: EMPTY
47132: LIST
47133: LIST
47134: PUSH
47135: LD_INT 1
47137: PUSH
47138: LD_INT 2
47140: PUSH
47141: EMPTY
47142: LIST
47143: LIST
47144: PUSH
47145: LD_INT 0
47147: PUSH
47148: LD_INT 2
47150: PUSH
47151: EMPTY
47152: LIST
47153: LIST
47154: PUSH
47155: LD_INT 1
47157: NEG
47158: PUSH
47159: LD_INT 1
47161: PUSH
47162: EMPTY
47163: LIST
47164: LIST
47165: PUSH
47166: LD_INT 2
47168: NEG
47169: PUSH
47170: LD_INT 1
47172: NEG
47173: PUSH
47174: EMPTY
47175: LIST
47176: LIST
47177: PUSH
47178: LD_INT 2
47180: NEG
47181: PUSH
47182: LD_INT 2
47184: NEG
47185: PUSH
47186: EMPTY
47187: LIST
47188: LIST
47189: PUSH
47190: LD_INT 2
47192: NEG
47193: PUSH
47194: LD_INT 3
47196: NEG
47197: PUSH
47198: EMPTY
47199: LIST
47200: LIST
47201: PUSH
47202: LD_INT 1
47204: NEG
47205: PUSH
47206: LD_INT 3
47208: NEG
47209: PUSH
47210: EMPTY
47211: LIST
47212: LIST
47213: PUSH
47214: LD_INT 0
47216: PUSH
47217: LD_INT 3
47219: NEG
47220: PUSH
47221: EMPTY
47222: LIST
47223: LIST
47224: PUSH
47225: LD_INT 1
47227: PUSH
47228: LD_INT 2
47230: NEG
47231: PUSH
47232: EMPTY
47233: LIST
47234: LIST
47235: PUSH
47236: LD_INT 3
47238: PUSH
47239: LD_INT 2
47241: PUSH
47242: EMPTY
47243: LIST
47244: LIST
47245: PUSH
47246: LD_INT 3
47248: PUSH
47249: LD_INT 3
47251: PUSH
47252: EMPTY
47253: LIST
47254: LIST
47255: PUSH
47256: LD_INT 2
47258: PUSH
47259: LD_INT 3
47261: PUSH
47262: EMPTY
47263: LIST
47264: LIST
47265: PUSH
47266: LD_INT 1
47268: PUSH
47269: LD_INT 3
47271: PUSH
47272: EMPTY
47273: LIST
47274: LIST
47275: PUSH
47276: LD_INT 0
47278: PUSH
47279: LD_INT 3
47281: PUSH
47282: EMPTY
47283: LIST
47284: LIST
47285: PUSH
47286: LD_INT 1
47288: NEG
47289: PUSH
47290: LD_INT 2
47292: PUSH
47293: EMPTY
47294: LIST
47295: LIST
47296: PUSH
47297: LD_INT 3
47299: NEG
47300: PUSH
47301: LD_INT 2
47303: NEG
47304: PUSH
47305: EMPTY
47306: LIST
47307: LIST
47308: PUSH
47309: LD_INT 3
47311: NEG
47312: PUSH
47313: LD_INT 3
47315: NEG
47316: PUSH
47317: EMPTY
47318: LIST
47319: LIST
47320: PUSH
47321: EMPTY
47322: LIST
47323: LIST
47324: LIST
47325: LIST
47326: LIST
47327: LIST
47328: LIST
47329: LIST
47330: LIST
47331: LIST
47332: LIST
47333: LIST
47334: LIST
47335: LIST
47336: LIST
47337: LIST
47338: LIST
47339: LIST
47340: LIST
47341: LIST
47342: LIST
47343: LIST
47344: LIST
47345: LIST
47346: LIST
47347: LIST
47348: LIST
47349: LIST
47350: LIST
47351: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47352: LD_ADDR_VAR 0 46
47356: PUSH
47357: LD_INT 0
47359: PUSH
47360: LD_INT 0
47362: PUSH
47363: EMPTY
47364: LIST
47365: LIST
47366: PUSH
47367: LD_INT 0
47369: PUSH
47370: LD_INT 1
47372: NEG
47373: PUSH
47374: EMPTY
47375: LIST
47376: LIST
47377: PUSH
47378: LD_INT 1
47380: PUSH
47381: LD_INT 0
47383: PUSH
47384: EMPTY
47385: LIST
47386: LIST
47387: PUSH
47388: LD_INT 1
47390: PUSH
47391: LD_INT 1
47393: PUSH
47394: EMPTY
47395: LIST
47396: LIST
47397: PUSH
47398: LD_INT 0
47400: PUSH
47401: LD_INT 1
47403: PUSH
47404: EMPTY
47405: LIST
47406: LIST
47407: PUSH
47408: LD_INT 1
47410: NEG
47411: PUSH
47412: LD_INT 0
47414: PUSH
47415: EMPTY
47416: LIST
47417: LIST
47418: PUSH
47419: LD_INT 1
47421: NEG
47422: PUSH
47423: LD_INT 1
47425: NEG
47426: PUSH
47427: EMPTY
47428: LIST
47429: LIST
47430: PUSH
47431: LD_INT 1
47433: NEG
47434: PUSH
47435: LD_INT 2
47437: NEG
47438: PUSH
47439: EMPTY
47440: LIST
47441: LIST
47442: PUSH
47443: LD_INT 0
47445: PUSH
47446: LD_INT 2
47448: NEG
47449: PUSH
47450: EMPTY
47451: LIST
47452: LIST
47453: PUSH
47454: LD_INT 1
47456: PUSH
47457: LD_INT 1
47459: NEG
47460: PUSH
47461: EMPTY
47462: LIST
47463: LIST
47464: PUSH
47465: LD_INT 2
47467: PUSH
47468: LD_INT 0
47470: PUSH
47471: EMPTY
47472: LIST
47473: LIST
47474: PUSH
47475: LD_INT 2
47477: PUSH
47478: LD_INT 1
47480: PUSH
47481: EMPTY
47482: LIST
47483: LIST
47484: PUSH
47485: LD_INT 1
47487: PUSH
47488: LD_INT 2
47490: PUSH
47491: EMPTY
47492: LIST
47493: LIST
47494: PUSH
47495: LD_INT 0
47497: PUSH
47498: LD_INT 2
47500: PUSH
47501: EMPTY
47502: LIST
47503: LIST
47504: PUSH
47505: LD_INT 1
47507: NEG
47508: PUSH
47509: LD_INT 1
47511: PUSH
47512: EMPTY
47513: LIST
47514: LIST
47515: PUSH
47516: LD_INT 2
47518: NEG
47519: PUSH
47520: LD_INT 0
47522: PUSH
47523: EMPTY
47524: LIST
47525: LIST
47526: PUSH
47527: LD_INT 2
47529: NEG
47530: PUSH
47531: LD_INT 1
47533: NEG
47534: PUSH
47535: EMPTY
47536: LIST
47537: LIST
47538: PUSH
47539: LD_INT 1
47541: NEG
47542: PUSH
47543: LD_INT 3
47545: NEG
47546: PUSH
47547: EMPTY
47548: LIST
47549: LIST
47550: PUSH
47551: LD_INT 0
47553: PUSH
47554: LD_INT 3
47556: NEG
47557: PUSH
47558: EMPTY
47559: LIST
47560: LIST
47561: PUSH
47562: LD_INT 1
47564: PUSH
47565: LD_INT 2
47567: NEG
47568: PUSH
47569: EMPTY
47570: LIST
47571: LIST
47572: PUSH
47573: LD_INT 2
47575: PUSH
47576: LD_INT 1
47578: NEG
47579: PUSH
47580: EMPTY
47581: LIST
47582: LIST
47583: PUSH
47584: LD_INT 3
47586: PUSH
47587: LD_INT 0
47589: PUSH
47590: EMPTY
47591: LIST
47592: LIST
47593: PUSH
47594: LD_INT 3
47596: PUSH
47597: LD_INT 1
47599: PUSH
47600: EMPTY
47601: LIST
47602: LIST
47603: PUSH
47604: LD_INT 1
47606: PUSH
47607: LD_INT 3
47609: PUSH
47610: EMPTY
47611: LIST
47612: LIST
47613: PUSH
47614: LD_INT 0
47616: PUSH
47617: LD_INT 3
47619: PUSH
47620: EMPTY
47621: LIST
47622: LIST
47623: PUSH
47624: LD_INT 1
47626: NEG
47627: PUSH
47628: LD_INT 2
47630: PUSH
47631: EMPTY
47632: LIST
47633: LIST
47634: PUSH
47635: LD_INT 2
47637: NEG
47638: PUSH
47639: LD_INT 1
47641: PUSH
47642: EMPTY
47643: LIST
47644: LIST
47645: PUSH
47646: LD_INT 3
47648: NEG
47649: PUSH
47650: LD_INT 0
47652: PUSH
47653: EMPTY
47654: LIST
47655: LIST
47656: PUSH
47657: LD_INT 3
47659: NEG
47660: PUSH
47661: LD_INT 1
47663: NEG
47664: PUSH
47665: EMPTY
47666: LIST
47667: LIST
47668: PUSH
47669: EMPTY
47670: LIST
47671: LIST
47672: LIST
47673: LIST
47674: LIST
47675: LIST
47676: LIST
47677: LIST
47678: LIST
47679: LIST
47680: LIST
47681: LIST
47682: LIST
47683: LIST
47684: LIST
47685: LIST
47686: LIST
47687: LIST
47688: LIST
47689: LIST
47690: LIST
47691: LIST
47692: LIST
47693: LIST
47694: LIST
47695: LIST
47696: LIST
47697: LIST
47698: LIST
47699: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47700: LD_ADDR_VAR 0 47
47704: PUSH
47705: LD_INT 0
47707: PUSH
47708: LD_INT 0
47710: PUSH
47711: EMPTY
47712: LIST
47713: LIST
47714: PUSH
47715: LD_INT 0
47717: PUSH
47718: LD_INT 1
47720: NEG
47721: PUSH
47722: EMPTY
47723: LIST
47724: LIST
47725: PUSH
47726: LD_INT 1
47728: PUSH
47729: LD_INT 0
47731: PUSH
47732: EMPTY
47733: LIST
47734: LIST
47735: PUSH
47736: LD_INT 1
47738: PUSH
47739: LD_INT 1
47741: PUSH
47742: EMPTY
47743: LIST
47744: LIST
47745: PUSH
47746: LD_INT 0
47748: PUSH
47749: LD_INT 1
47751: PUSH
47752: EMPTY
47753: LIST
47754: LIST
47755: PUSH
47756: LD_INT 1
47758: NEG
47759: PUSH
47760: LD_INT 0
47762: PUSH
47763: EMPTY
47764: LIST
47765: LIST
47766: PUSH
47767: LD_INT 1
47769: NEG
47770: PUSH
47771: LD_INT 1
47773: NEG
47774: PUSH
47775: EMPTY
47776: LIST
47777: LIST
47778: PUSH
47779: LD_INT 1
47781: NEG
47782: PUSH
47783: LD_INT 2
47785: NEG
47786: PUSH
47787: EMPTY
47788: LIST
47789: LIST
47790: PUSH
47791: LD_INT 0
47793: PUSH
47794: LD_INT 2
47796: NEG
47797: PUSH
47798: EMPTY
47799: LIST
47800: LIST
47801: PUSH
47802: LD_INT 1
47804: PUSH
47805: LD_INT 1
47807: NEG
47808: PUSH
47809: EMPTY
47810: LIST
47811: LIST
47812: PUSH
47813: LD_INT 2
47815: NEG
47816: PUSH
47817: LD_INT 1
47819: NEG
47820: PUSH
47821: EMPTY
47822: LIST
47823: LIST
47824: PUSH
47825: LD_INT 2
47827: NEG
47828: PUSH
47829: LD_INT 2
47831: NEG
47832: PUSH
47833: EMPTY
47834: LIST
47835: LIST
47836: PUSH
47837: EMPTY
47838: LIST
47839: LIST
47840: LIST
47841: LIST
47842: LIST
47843: LIST
47844: LIST
47845: LIST
47846: LIST
47847: LIST
47848: LIST
47849: LIST
47850: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
47851: LD_ADDR_VAR 0 48
47855: PUSH
47856: LD_INT 0
47858: PUSH
47859: LD_INT 0
47861: PUSH
47862: EMPTY
47863: LIST
47864: LIST
47865: PUSH
47866: LD_INT 0
47868: PUSH
47869: LD_INT 1
47871: NEG
47872: PUSH
47873: EMPTY
47874: LIST
47875: LIST
47876: PUSH
47877: LD_INT 1
47879: PUSH
47880: LD_INT 0
47882: PUSH
47883: EMPTY
47884: LIST
47885: LIST
47886: PUSH
47887: LD_INT 1
47889: PUSH
47890: LD_INT 1
47892: PUSH
47893: EMPTY
47894: LIST
47895: LIST
47896: PUSH
47897: LD_INT 0
47899: PUSH
47900: LD_INT 1
47902: PUSH
47903: EMPTY
47904: LIST
47905: LIST
47906: PUSH
47907: LD_INT 1
47909: NEG
47910: PUSH
47911: LD_INT 0
47913: PUSH
47914: EMPTY
47915: LIST
47916: LIST
47917: PUSH
47918: LD_INT 1
47920: NEG
47921: PUSH
47922: LD_INT 1
47924: NEG
47925: PUSH
47926: EMPTY
47927: LIST
47928: LIST
47929: PUSH
47930: LD_INT 1
47932: NEG
47933: PUSH
47934: LD_INT 2
47936: NEG
47937: PUSH
47938: EMPTY
47939: LIST
47940: LIST
47941: PUSH
47942: LD_INT 0
47944: PUSH
47945: LD_INT 2
47947: NEG
47948: PUSH
47949: EMPTY
47950: LIST
47951: LIST
47952: PUSH
47953: LD_INT 1
47955: PUSH
47956: LD_INT 1
47958: NEG
47959: PUSH
47960: EMPTY
47961: LIST
47962: LIST
47963: PUSH
47964: LD_INT 2
47966: PUSH
47967: LD_INT 0
47969: PUSH
47970: EMPTY
47971: LIST
47972: LIST
47973: PUSH
47974: LD_INT 2
47976: PUSH
47977: LD_INT 1
47979: PUSH
47980: EMPTY
47981: LIST
47982: LIST
47983: PUSH
47984: EMPTY
47985: LIST
47986: LIST
47987: LIST
47988: LIST
47989: LIST
47990: LIST
47991: LIST
47992: LIST
47993: LIST
47994: LIST
47995: LIST
47996: LIST
47997: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
47998: LD_ADDR_VAR 0 49
48002: PUSH
48003: LD_INT 0
48005: PUSH
48006: LD_INT 0
48008: PUSH
48009: EMPTY
48010: LIST
48011: LIST
48012: PUSH
48013: LD_INT 0
48015: PUSH
48016: LD_INT 1
48018: NEG
48019: PUSH
48020: EMPTY
48021: LIST
48022: LIST
48023: PUSH
48024: LD_INT 1
48026: PUSH
48027: LD_INT 0
48029: PUSH
48030: EMPTY
48031: LIST
48032: LIST
48033: PUSH
48034: LD_INT 1
48036: PUSH
48037: LD_INT 1
48039: PUSH
48040: EMPTY
48041: LIST
48042: LIST
48043: PUSH
48044: LD_INT 0
48046: PUSH
48047: LD_INT 1
48049: PUSH
48050: EMPTY
48051: LIST
48052: LIST
48053: PUSH
48054: LD_INT 1
48056: NEG
48057: PUSH
48058: LD_INT 0
48060: PUSH
48061: EMPTY
48062: LIST
48063: LIST
48064: PUSH
48065: LD_INT 1
48067: NEG
48068: PUSH
48069: LD_INT 1
48071: NEG
48072: PUSH
48073: EMPTY
48074: LIST
48075: LIST
48076: PUSH
48077: LD_INT 1
48079: PUSH
48080: LD_INT 1
48082: NEG
48083: PUSH
48084: EMPTY
48085: LIST
48086: LIST
48087: PUSH
48088: LD_INT 2
48090: PUSH
48091: LD_INT 0
48093: PUSH
48094: EMPTY
48095: LIST
48096: LIST
48097: PUSH
48098: LD_INT 2
48100: PUSH
48101: LD_INT 1
48103: PUSH
48104: EMPTY
48105: LIST
48106: LIST
48107: PUSH
48108: LD_INT 2
48110: PUSH
48111: LD_INT 2
48113: PUSH
48114: EMPTY
48115: LIST
48116: LIST
48117: PUSH
48118: LD_INT 1
48120: PUSH
48121: LD_INT 2
48123: PUSH
48124: EMPTY
48125: LIST
48126: LIST
48127: PUSH
48128: EMPTY
48129: LIST
48130: LIST
48131: LIST
48132: LIST
48133: LIST
48134: LIST
48135: LIST
48136: LIST
48137: LIST
48138: LIST
48139: LIST
48140: LIST
48141: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
48142: LD_ADDR_VAR 0 50
48146: PUSH
48147: LD_INT 0
48149: PUSH
48150: LD_INT 0
48152: PUSH
48153: EMPTY
48154: LIST
48155: LIST
48156: PUSH
48157: LD_INT 0
48159: PUSH
48160: LD_INT 1
48162: NEG
48163: PUSH
48164: EMPTY
48165: LIST
48166: LIST
48167: PUSH
48168: LD_INT 1
48170: PUSH
48171: LD_INT 0
48173: PUSH
48174: EMPTY
48175: LIST
48176: LIST
48177: PUSH
48178: LD_INT 1
48180: PUSH
48181: LD_INT 1
48183: PUSH
48184: EMPTY
48185: LIST
48186: LIST
48187: PUSH
48188: LD_INT 0
48190: PUSH
48191: LD_INT 1
48193: PUSH
48194: EMPTY
48195: LIST
48196: LIST
48197: PUSH
48198: LD_INT 1
48200: NEG
48201: PUSH
48202: LD_INT 0
48204: PUSH
48205: EMPTY
48206: LIST
48207: LIST
48208: PUSH
48209: LD_INT 1
48211: NEG
48212: PUSH
48213: LD_INT 1
48215: NEG
48216: PUSH
48217: EMPTY
48218: LIST
48219: LIST
48220: PUSH
48221: LD_INT 2
48223: PUSH
48224: LD_INT 1
48226: PUSH
48227: EMPTY
48228: LIST
48229: LIST
48230: PUSH
48231: LD_INT 2
48233: PUSH
48234: LD_INT 2
48236: PUSH
48237: EMPTY
48238: LIST
48239: LIST
48240: PUSH
48241: LD_INT 1
48243: PUSH
48244: LD_INT 2
48246: PUSH
48247: EMPTY
48248: LIST
48249: LIST
48250: PUSH
48251: LD_INT 0
48253: PUSH
48254: LD_INT 2
48256: PUSH
48257: EMPTY
48258: LIST
48259: LIST
48260: PUSH
48261: LD_INT 1
48263: NEG
48264: PUSH
48265: LD_INT 1
48267: PUSH
48268: EMPTY
48269: LIST
48270: LIST
48271: PUSH
48272: EMPTY
48273: LIST
48274: LIST
48275: LIST
48276: LIST
48277: LIST
48278: LIST
48279: LIST
48280: LIST
48281: LIST
48282: LIST
48283: LIST
48284: LIST
48285: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
48286: LD_ADDR_VAR 0 51
48290: PUSH
48291: LD_INT 0
48293: PUSH
48294: LD_INT 0
48296: PUSH
48297: EMPTY
48298: LIST
48299: LIST
48300: PUSH
48301: LD_INT 0
48303: PUSH
48304: LD_INT 1
48306: NEG
48307: PUSH
48308: EMPTY
48309: LIST
48310: LIST
48311: PUSH
48312: LD_INT 1
48314: PUSH
48315: LD_INT 0
48317: PUSH
48318: EMPTY
48319: LIST
48320: LIST
48321: PUSH
48322: LD_INT 1
48324: PUSH
48325: LD_INT 1
48327: PUSH
48328: EMPTY
48329: LIST
48330: LIST
48331: PUSH
48332: LD_INT 0
48334: PUSH
48335: LD_INT 1
48337: PUSH
48338: EMPTY
48339: LIST
48340: LIST
48341: PUSH
48342: LD_INT 1
48344: NEG
48345: PUSH
48346: LD_INT 0
48348: PUSH
48349: EMPTY
48350: LIST
48351: LIST
48352: PUSH
48353: LD_INT 1
48355: NEG
48356: PUSH
48357: LD_INT 1
48359: NEG
48360: PUSH
48361: EMPTY
48362: LIST
48363: LIST
48364: PUSH
48365: LD_INT 1
48367: PUSH
48368: LD_INT 2
48370: PUSH
48371: EMPTY
48372: LIST
48373: LIST
48374: PUSH
48375: LD_INT 0
48377: PUSH
48378: LD_INT 2
48380: PUSH
48381: EMPTY
48382: LIST
48383: LIST
48384: PUSH
48385: LD_INT 1
48387: NEG
48388: PUSH
48389: LD_INT 1
48391: PUSH
48392: EMPTY
48393: LIST
48394: LIST
48395: PUSH
48396: LD_INT 2
48398: NEG
48399: PUSH
48400: LD_INT 0
48402: PUSH
48403: EMPTY
48404: LIST
48405: LIST
48406: PUSH
48407: LD_INT 2
48409: NEG
48410: PUSH
48411: LD_INT 1
48413: NEG
48414: PUSH
48415: EMPTY
48416: LIST
48417: LIST
48418: PUSH
48419: EMPTY
48420: LIST
48421: LIST
48422: LIST
48423: LIST
48424: LIST
48425: LIST
48426: LIST
48427: LIST
48428: LIST
48429: LIST
48430: LIST
48431: LIST
48432: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48433: LD_ADDR_VAR 0 52
48437: PUSH
48438: LD_INT 0
48440: PUSH
48441: LD_INT 0
48443: PUSH
48444: EMPTY
48445: LIST
48446: LIST
48447: PUSH
48448: LD_INT 0
48450: PUSH
48451: LD_INT 1
48453: NEG
48454: PUSH
48455: EMPTY
48456: LIST
48457: LIST
48458: PUSH
48459: LD_INT 1
48461: PUSH
48462: LD_INT 0
48464: PUSH
48465: EMPTY
48466: LIST
48467: LIST
48468: PUSH
48469: LD_INT 1
48471: PUSH
48472: LD_INT 1
48474: PUSH
48475: EMPTY
48476: LIST
48477: LIST
48478: PUSH
48479: LD_INT 0
48481: PUSH
48482: LD_INT 1
48484: PUSH
48485: EMPTY
48486: LIST
48487: LIST
48488: PUSH
48489: LD_INT 1
48491: NEG
48492: PUSH
48493: LD_INT 0
48495: PUSH
48496: EMPTY
48497: LIST
48498: LIST
48499: PUSH
48500: LD_INT 1
48502: NEG
48503: PUSH
48504: LD_INT 1
48506: NEG
48507: PUSH
48508: EMPTY
48509: LIST
48510: LIST
48511: PUSH
48512: LD_INT 1
48514: NEG
48515: PUSH
48516: LD_INT 2
48518: NEG
48519: PUSH
48520: EMPTY
48521: LIST
48522: LIST
48523: PUSH
48524: LD_INT 1
48526: NEG
48527: PUSH
48528: LD_INT 1
48530: PUSH
48531: EMPTY
48532: LIST
48533: LIST
48534: PUSH
48535: LD_INT 2
48537: NEG
48538: PUSH
48539: LD_INT 0
48541: PUSH
48542: EMPTY
48543: LIST
48544: LIST
48545: PUSH
48546: LD_INT 2
48548: NEG
48549: PUSH
48550: LD_INT 1
48552: NEG
48553: PUSH
48554: EMPTY
48555: LIST
48556: LIST
48557: PUSH
48558: LD_INT 2
48560: NEG
48561: PUSH
48562: LD_INT 2
48564: NEG
48565: PUSH
48566: EMPTY
48567: LIST
48568: LIST
48569: PUSH
48570: EMPTY
48571: LIST
48572: LIST
48573: LIST
48574: LIST
48575: LIST
48576: LIST
48577: LIST
48578: LIST
48579: LIST
48580: LIST
48581: LIST
48582: LIST
48583: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48584: LD_ADDR_VAR 0 53
48588: PUSH
48589: LD_INT 0
48591: PUSH
48592: LD_INT 0
48594: PUSH
48595: EMPTY
48596: LIST
48597: LIST
48598: PUSH
48599: LD_INT 0
48601: PUSH
48602: LD_INT 1
48604: NEG
48605: PUSH
48606: EMPTY
48607: LIST
48608: LIST
48609: PUSH
48610: LD_INT 1
48612: PUSH
48613: LD_INT 0
48615: PUSH
48616: EMPTY
48617: LIST
48618: LIST
48619: PUSH
48620: LD_INT 1
48622: PUSH
48623: LD_INT 1
48625: PUSH
48626: EMPTY
48627: LIST
48628: LIST
48629: PUSH
48630: LD_INT 0
48632: PUSH
48633: LD_INT 1
48635: PUSH
48636: EMPTY
48637: LIST
48638: LIST
48639: PUSH
48640: LD_INT 1
48642: NEG
48643: PUSH
48644: LD_INT 0
48646: PUSH
48647: EMPTY
48648: LIST
48649: LIST
48650: PUSH
48651: LD_INT 1
48653: NEG
48654: PUSH
48655: LD_INT 1
48657: NEG
48658: PUSH
48659: EMPTY
48660: LIST
48661: LIST
48662: PUSH
48663: LD_INT 1
48665: NEG
48666: PUSH
48667: LD_INT 2
48669: NEG
48670: PUSH
48671: EMPTY
48672: LIST
48673: LIST
48674: PUSH
48675: LD_INT 0
48677: PUSH
48678: LD_INT 2
48680: NEG
48681: PUSH
48682: EMPTY
48683: LIST
48684: LIST
48685: PUSH
48686: LD_INT 1
48688: PUSH
48689: LD_INT 1
48691: NEG
48692: PUSH
48693: EMPTY
48694: LIST
48695: LIST
48696: PUSH
48697: LD_INT 2
48699: PUSH
48700: LD_INT 0
48702: PUSH
48703: EMPTY
48704: LIST
48705: LIST
48706: PUSH
48707: LD_INT 2
48709: PUSH
48710: LD_INT 1
48712: PUSH
48713: EMPTY
48714: LIST
48715: LIST
48716: PUSH
48717: LD_INT 2
48719: PUSH
48720: LD_INT 2
48722: PUSH
48723: EMPTY
48724: LIST
48725: LIST
48726: PUSH
48727: LD_INT 1
48729: PUSH
48730: LD_INT 2
48732: PUSH
48733: EMPTY
48734: LIST
48735: LIST
48736: PUSH
48737: LD_INT 0
48739: PUSH
48740: LD_INT 2
48742: PUSH
48743: EMPTY
48744: LIST
48745: LIST
48746: PUSH
48747: LD_INT 1
48749: NEG
48750: PUSH
48751: LD_INT 1
48753: PUSH
48754: EMPTY
48755: LIST
48756: LIST
48757: PUSH
48758: LD_INT 2
48760: NEG
48761: PUSH
48762: LD_INT 0
48764: PUSH
48765: EMPTY
48766: LIST
48767: LIST
48768: PUSH
48769: LD_INT 2
48771: NEG
48772: PUSH
48773: LD_INT 1
48775: NEG
48776: PUSH
48777: EMPTY
48778: LIST
48779: LIST
48780: PUSH
48781: LD_INT 2
48783: NEG
48784: PUSH
48785: LD_INT 2
48787: NEG
48788: PUSH
48789: EMPTY
48790: LIST
48791: LIST
48792: PUSH
48793: EMPTY
48794: LIST
48795: LIST
48796: LIST
48797: LIST
48798: LIST
48799: LIST
48800: LIST
48801: LIST
48802: LIST
48803: LIST
48804: LIST
48805: LIST
48806: LIST
48807: LIST
48808: LIST
48809: LIST
48810: LIST
48811: LIST
48812: LIST
48813: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48814: LD_ADDR_VAR 0 54
48818: PUSH
48819: LD_INT 0
48821: PUSH
48822: LD_INT 0
48824: PUSH
48825: EMPTY
48826: LIST
48827: LIST
48828: PUSH
48829: LD_INT 0
48831: PUSH
48832: LD_INT 1
48834: NEG
48835: PUSH
48836: EMPTY
48837: LIST
48838: LIST
48839: PUSH
48840: LD_INT 1
48842: PUSH
48843: LD_INT 0
48845: PUSH
48846: EMPTY
48847: LIST
48848: LIST
48849: PUSH
48850: LD_INT 1
48852: PUSH
48853: LD_INT 1
48855: PUSH
48856: EMPTY
48857: LIST
48858: LIST
48859: PUSH
48860: LD_INT 0
48862: PUSH
48863: LD_INT 1
48865: PUSH
48866: EMPTY
48867: LIST
48868: LIST
48869: PUSH
48870: LD_INT 1
48872: NEG
48873: PUSH
48874: LD_INT 0
48876: PUSH
48877: EMPTY
48878: LIST
48879: LIST
48880: PUSH
48881: LD_INT 1
48883: NEG
48884: PUSH
48885: LD_INT 1
48887: NEG
48888: PUSH
48889: EMPTY
48890: LIST
48891: LIST
48892: PUSH
48893: LD_INT 1
48895: NEG
48896: PUSH
48897: LD_INT 2
48899: NEG
48900: PUSH
48901: EMPTY
48902: LIST
48903: LIST
48904: PUSH
48905: LD_INT 0
48907: PUSH
48908: LD_INT 2
48910: NEG
48911: PUSH
48912: EMPTY
48913: LIST
48914: LIST
48915: PUSH
48916: LD_INT 1
48918: PUSH
48919: LD_INT 1
48921: NEG
48922: PUSH
48923: EMPTY
48924: LIST
48925: LIST
48926: PUSH
48927: LD_INT 2
48929: PUSH
48930: LD_INT 0
48932: PUSH
48933: EMPTY
48934: LIST
48935: LIST
48936: PUSH
48937: LD_INT 2
48939: PUSH
48940: LD_INT 1
48942: PUSH
48943: EMPTY
48944: LIST
48945: LIST
48946: PUSH
48947: LD_INT 2
48949: PUSH
48950: LD_INT 2
48952: PUSH
48953: EMPTY
48954: LIST
48955: LIST
48956: PUSH
48957: LD_INT 1
48959: PUSH
48960: LD_INT 2
48962: PUSH
48963: EMPTY
48964: LIST
48965: LIST
48966: PUSH
48967: LD_INT 0
48969: PUSH
48970: LD_INT 2
48972: PUSH
48973: EMPTY
48974: LIST
48975: LIST
48976: PUSH
48977: LD_INT 1
48979: NEG
48980: PUSH
48981: LD_INT 1
48983: PUSH
48984: EMPTY
48985: LIST
48986: LIST
48987: PUSH
48988: LD_INT 2
48990: NEG
48991: PUSH
48992: LD_INT 0
48994: PUSH
48995: EMPTY
48996: LIST
48997: LIST
48998: PUSH
48999: LD_INT 2
49001: NEG
49002: PUSH
49003: LD_INT 1
49005: NEG
49006: PUSH
49007: EMPTY
49008: LIST
49009: LIST
49010: PUSH
49011: LD_INT 2
49013: NEG
49014: PUSH
49015: LD_INT 2
49017: NEG
49018: PUSH
49019: EMPTY
49020: LIST
49021: LIST
49022: PUSH
49023: EMPTY
49024: LIST
49025: LIST
49026: LIST
49027: LIST
49028: LIST
49029: LIST
49030: LIST
49031: LIST
49032: LIST
49033: LIST
49034: LIST
49035: LIST
49036: LIST
49037: LIST
49038: LIST
49039: LIST
49040: LIST
49041: LIST
49042: LIST
49043: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49044: LD_ADDR_VAR 0 55
49048: PUSH
49049: LD_INT 0
49051: PUSH
49052: LD_INT 0
49054: PUSH
49055: EMPTY
49056: LIST
49057: LIST
49058: PUSH
49059: LD_INT 0
49061: PUSH
49062: LD_INT 1
49064: NEG
49065: PUSH
49066: EMPTY
49067: LIST
49068: LIST
49069: PUSH
49070: LD_INT 1
49072: PUSH
49073: LD_INT 0
49075: PUSH
49076: EMPTY
49077: LIST
49078: LIST
49079: PUSH
49080: LD_INT 1
49082: PUSH
49083: LD_INT 1
49085: PUSH
49086: EMPTY
49087: LIST
49088: LIST
49089: PUSH
49090: LD_INT 0
49092: PUSH
49093: LD_INT 1
49095: PUSH
49096: EMPTY
49097: LIST
49098: LIST
49099: PUSH
49100: LD_INT 1
49102: NEG
49103: PUSH
49104: LD_INT 0
49106: PUSH
49107: EMPTY
49108: LIST
49109: LIST
49110: PUSH
49111: LD_INT 1
49113: NEG
49114: PUSH
49115: LD_INT 1
49117: NEG
49118: PUSH
49119: EMPTY
49120: LIST
49121: LIST
49122: PUSH
49123: LD_INT 1
49125: NEG
49126: PUSH
49127: LD_INT 2
49129: NEG
49130: PUSH
49131: EMPTY
49132: LIST
49133: LIST
49134: PUSH
49135: LD_INT 0
49137: PUSH
49138: LD_INT 2
49140: NEG
49141: PUSH
49142: EMPTY
49143: LIST
49144: LIST
49145: PUSH
49146: LD_INT 1
49148: PUSH
49149: LD_INT 1
49151: NEG
49152: PUSH
49153: EMPTY
49154: LIST
49155: LIST
49156: PUSH
49157: LD_INT 2
49159: PUSH
49160: LD_INT 0
49162: PUSH
49163: EMPTY
49164: LIST
49165: LIST
49166: PUSH
49167: LD_INT 2
49169: PUSH
49170: LD_INT 1
49172: PUSH
49173: EMPTY
49174: LIST
49175: LIST
49176: PUSH
49177: LD_INT 2
49179: PUSH
49180: LD_INT 2
49182: PUSH
49183: EMPTY
49184: LIST
49185: LIST
49186: PUSH
49187: LD_INT 1
49189: PUSH
49190: LD_INT 2
49192: PUSH
49193: EMPTY
49194: LIST
49195: LIST
49196: PUSH
49197: LD_INT 0
49199: PUSH
49200: LD_INT 2
49202: PUSH
49203: EMPTY
49204: LIST
49205: LIST
49206: PUSH
49207: LD_INT 1
49209: NEG
49210: PUSH
49211: LD_INT 1
49213: PUSH
49214: EMPTY
49215: LIST
49216: LIST
49217: PUSH
49218: LD_INT 2
49220: NEG
49221: PUSH
49222: LD_INT 0
49224: PUSH
49225: EMPTY
49226: LIST
49227: LIST
49228: PUSH
49229: LD_INT 2
49231: NEG
49232: PUSH
49233: LD_INT 1
49235: NEG
49236: PUSH
49237: EMPTY
49238: LIST
49239: LIST
49240: PUSH
49241: LD_INT 2
49243: NEG
49244: PUSH
49245: LD_INT 2
49247: NEG
49248: PUSH
49249: EMPTY
49250: LIST
49251: LIST
49252: PUSH
49253: EMPTY
49254: LIST
49255: LIST
49256: LIST
49257: LIST
49258: LIST
49259: LIST
49260: LIST
49261: LIST
49262: LIST
49263: LIST
49264: LIST
49265: LIST
49266: LIST
49267: LIST
49268: LIST
49269: LIST
49270: LIST
49271: LIST
49272: LIST
49273: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49274: LD_ADDR_VAR 0 56
49278: PUSH
49279: LD_INT 0
49281: PUSH
49282: LD_INT 0
49284: PUSH
49285: EMPTY
49286: LIST
49287: LIST
49288: PUSH
49289: LD_INT 0
49291: PUSH
49292: LD_INT 1
49294: NEG
49295: PUSH
49296: EMPTY
49297: LIST
49298: LIST
49299: PUSH
49300: LD_INT 1
49302: PUSH
49303: LD_INT 0
49305: PUSH
49306: EMPTY
49307: LIST
49308: LIST
49309: PUSH
49310: LD_INT 1
49312: PUSH
49313: LD_INT 1
49315: PUSH
49316: EMPTY
49317: LIST
49318: LIST
49319: PUSH
49320: LD_INT 0
49322: PUSH
49323: LD_INT 1
49325: PUSH
49326: EMPTY
49327: LIST
49328: LIST
49329: PUSH
49330: LD_INT 1
49332: NEG
49333: PUSH
49334: LD_INT 0
49336: PUSH
49337: EMPTY
49338: LIST
49339: LIST
49340: PUSH
49341: LD_INT 1
49343: NEG
49344: PUSH
49345: LD_INT 1
49347: NEG
49348: PUSH
49349: EMPTY
49350: LIST
49351: LIST
49352: PUSH
49353: LD_INT 1
49355: NEG
49356: PUSH
49357: LD_INT 2
49359: NEG
49360: PUSH
49361: EMPTY
49362: LIST
49363: LIST
49364: PUSH
49365: LD_INT 0
49367: PUSH
49368: LD_INT 2
49370: NEG
49371: PUSH
49372: EMPTY
49373: LIST
49374: LIST
49375: PUSH
49376: LD_INT 1
49378: PUSH
49379: LD_INT 1
49381: NEG
49382: PUSH
49383: EMPTY
49384: LIST
49385: LIST
49386: PUSH
49387: LD_INT 2
49389: PUSH
49390: LD_INT 0
49392: PUSH
49393: EMPTY
49394: LIST
49395: LIST
49396: PUSH
49397: LD_INT 2
49399: PUSH
49400: LD_INT 1
49402: PUSH
49403: EMPTY
49404: LIST
49405: LIST
49406: PUSH
49407: LD_INT 2
49409: PUSH
49410: LD_INT 2
49412: PUSH
49413: EMPTY
49414: LIST
49415: LIST
49416: PUSH
49417: LD_INT 1
49419: PUSH
49420: LD_INT 2
49422: PUSH
49423: EMPTY
49424: LIST
49425: LIST
49426: PUSH
49427: LD_INT 0
49429: PUSH
49430: LD_INT 2
49432: PUSH
49433: EMPTY
49434: LIST
49435: LIST
49436: PUSH
49437: LD_INT 1
49439: NEG
49440: PUSH
49441: LD_INT 1
49443: PUSH
49444: EMPTY
49445: LIST
49446: LIST
49447: PUSH
49448: LD_INT 2
49450: NEG
49451: PUSH
49452: LD_INT 0
49454: PUSH
49455: EMPTY
49456: LIST
49457: LIST
49458: PUSH
49459: LD_INT 2
49461: NEG
49462: PUSH
49463: LD_INT 1
49465: NEG
49466: PUSH
49467: EMPTY
49468: LIST
49469: LIST
49470: PUSH
49471: LD_INT 2
49473: NEG
49474: PUSH
49475: LD_INT 2
49477: NEG
49478: PUSH
49479: EMPTY
49480: LIST
49481: LIST
49482: PUSH
49483: EMPTY
49484: LIST
49485: LIST
49486: LIST
49487: LIST
49488: LIST
49489: LIST
49490: LIST
49491: LIST
49492: LIST
49493: LIST
49494: LIST
49495: LIST
49496: LIST
49497: LIST
49498: LIST
49499: LIST
49500: LIST
49501: LIST
49502: LIST
49503: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49504: LD_ADDR_VAR 0 57
49508: PUSH
49509: LD_INT 0
49511: PUSH
49512: LD_INT 0
49514: PUSH
49515: EMPTY
49516: LIST
49517: LIST
49518: PUSH
49519: LD_INT 0
49521: PUSH
49522: LD_INT 1
49524: NEG
49525: PUSH
49526: EMPTY
49527: LIST
49528: LIST
49529: PUSH
49530: LD_INT 1
49532: PUSH
49533: LD_INT 0
49535: PUSH
49536: EMPTY
49537: LIST
49538: LIST
49539: PUSH
49540: LD_INT 1
49542: PUSH
49543: LD_INT 1
49545: PUSH
49546: EMPTY
49547: LIST
49548: LIST
49549: PUSH
49550: LD_INT 0
49552: PUSH
49553: LD_INT 1
49555: PUSH
49556: EMPTY
49557: LIST
49558: LIST
49559: PUSH
49560: LD_INT 1
49562: NEG
49563: PUSH
49564: LD_INT 0
49566: PUSH
49567: EMPTY
49568: LIST
49569: LIST
49570: PUSH
49571: LD_INT 1
49573: NEG
49574: PUSH
49575: LD_INT 1
49577: NEG
49578: PUSH
49579: EMPTY
49580: LIST
49581: LIST
49582: PUSH
49583: LD_INT 1
49585: NEG
49586: PUSH
49587: LD_INT 2
49589: NEG
49590: PUSH
49591: EMPTY
49592: LIST
49593: LIST
49594: PUSH
49595: LD_INT 0
49597: PUSH
49598: LD_INT 2
49600: NEG
49601: PUSH
49602: EMPTY
49603: LIST
49604: LIST
49605: PUSH
49606: LD_INT 1
49608: PUSH
49609: LD_INT 1
49611: NEG
49612: PUSH
49613: EMPTY
49614: LIST
49615: LIST
49616: PUSH
49617: LD_INT 2
49619: PUSH
49620: LD_INT 0
49622: PUSH
49623: EMPTY
49624: LIST
49625: LIST
49626: PUSH
49627: LD_INT 2
49629: PUSH
49630: LD_INT 1
49632: PUSH
49633: EMPTY
49634: LIST
49635: LIST
49636: PUSH
49637: LD_INT 2
49639: PUSH
49640: LD_INT 2
49642: PUSH
49643: EMPTY
49644: LIST
49645: LIST
49646: PUSH
49647: LD_INT 1
49649: PUSH
49650: LD_INT 2
49652: PUSH
49653: EMPTY
49654: LIST
49655: LIST
49656: PUSH
49657: LD_INT 0
49659: PUSH
49660: LD_INT 2
49662: PUSH
49663: EMPTY
49664: LIST
49665: LIST
49666: PUSH
49667: LD_INT 1
49669: NEG
49670: PUSH
49671: LD_INT 1
49673: PUSH
49674: EMPTY
49675: LIST
49676: LIST
49677: PUSH
49678: LD_INT 2
49680: NEG
49681: PUSH
49682: LD_INT 0
49684: PUSH
49685: EMPTY
49686: LIST
49687: LIST
49688: PUSH
49689: LD_INT 2
49691: NEG
49692: PUSH
49693: LD_INT 1
49695: NEG
49696: PUSH
49697: EMPTY
49698: LIST
49699: LIST
49700: PUSH
49701: LD_INT 2
49703: NEG
49704: PUSH
49705: LD_INT 2
49707: NEG
49708: PUSH
49709: EMPTY
49710: LIST
49711: LIST
49712: PUSH
49713: EMPTY
49714: LIST
49715: LIST
49716: LIST
49717: LIST
49718: LIST
49719: LIST
49720: LIST
49721: LIST
49722: LIST
49723: LIST
49724: LIST
49725: LIST
49726: LIST
49727: LIST
49728: LIST
49729: LIST
49730: LIST
49731: LIST
49732: LIST
49733: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49734: LD_ADDR_VAR 0 58
49738: PUSH
49739: LD_INT 0
49741: PUSH
49742: LD_INT 0
49744: PUSH
49745: EMPTY
49746: LIST
49747: LIST
49748: PUSH
49749: LD_INT 0
49751: PUSH
49752: LD_INT 1
49754: NEG
49755: PUSH
49756: EMPTY
49757: LIST
49758: LIST
49759: PUSH
49760: LD_INT 1
49762: PUSH
49763: LD_INT 0
49765: PUSH
49766: EMPTY
49767: LIST
49768: LIST
49769: PUSH
49770: LD_INT 1
49772: PUSH
49773: LD_INT 1
49775: PUSH
49776: EMPTY
49777: LIST
49778: LIST
49779: PUSH
49780: LD_INT 0
49782: PUSH
49783: LD_INT 1
49785: PUSH
49786: EMPTY
49787: LIST
49788: LIST
49789: PUSH
49790: LD_INT 1
49792: NEG
49793: PUSH
49794: LD_INT 0
49796: PUSH
49797: EMPTY
49798: LIST
49799: LIST
49800: PUSH
49801: LD_INT 1
49803: NEG
49804: PUSH
49805: LD_INT 1
49807: NEG
49808: PUSH
49809: EMPTY
49810: LIST
49811: LIST
49812: PUSH
49813: LD_INT 1
49815: NEG
49816: PUSH
49817: LD_INT 2
49819: NEG
49820: PUSH
49821: EMPTY
49822: LIST
49823: LIST
49824: PUSH
49825: LD_INT 0
49827: PUSH
49828: LD_INT 2
49830: NEG
49831: PUSH
49832: EMPTY
49833: LIST
49834: LIST
49835: PUSH
49836: LD_INT 1
49838: PUSH
49839: LD_INT 1
49841: NEG
49842: PUSH
49843: EMPTY
49844: LIST
49845: LIST
49846: PUSH
49847: LD_INT 2
49849: PUSH
49850: LD_INT 0
49852: PUSH
49853: EMPTY
49854: LIST
49855: LIST
49856: PUSH
49857: LD_INT 2
49859: PUSH
49860: LD_INT 1
49862: PUSH
49863: EMPTY
49864: LIST
49865: LIST
49866: PUSH
49867: LD_INT 2
49869: PUSH
49870: LD_INT 2
49872: PUSH
49873: EMPTY
49874: LIST
49875: LIST
49876: PUSH
49877: LD_INT 1
49879: PUSH
49880: LD_INT 2
49882: PUSH
49883: EMPTY
49884: LIST
49885: LIST
49886: PUSH
49887: LD_INT 0
49889: PUSH
49890: LD_INT 2
49892: PUSH
49893: EMPTY
49894: LIST
49895: LIST
49896: PUSH
49897: LD_INT 1
49899: NEG
49900: PUSH
49901: LD_INT 1
49903: PUSH
49904: EMPTY
49905: LIST
49906: LIST
49907: PUSH
49908: LD_INT 2
49910: NEG
49911: PUSH
49912: LD_INT 0
49914: PUSH
49915: EMPTY
49916: LIST
49917: LIST
49918: PUSH
49919: LD_INT 2
49921: NEG
49922: PUSH
49923: LD_INT 1
49925: NEG
49926: PUSH
49927: EMPTY
49928: LIST
49929: LIST
49930: PUSH
49931: LD_INT 2
49933: NEG
49934: PUSH
49935: LD_INT 2
49937: NEG
49938: PUSH
49939: EMPTY
49940: LIST
49941: LIST
49942: PUSH
49943: EMPTY
49944: LIST
49945: LIST
49946: LIST
49947: LIST
49948: LIST
49949: LIST
49950: LIST
49951: LIST
49952: LIST
49953: LIST
49954: LIST
49955: LIST
49956: LIST
49957: LIST
49958: LIST
49959: LIST
49960: LIST
49961: LIST
49962: LIST
49963: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49964: LD_ADDR_VAR 0 59
49968: PUSH
49969: LD_INT 0
49971: PUSH
49972: LD_INT 0
49974: PUSH
49975: EMPTY
49976: LIST
49977: LIST
49978: PUSH
49979: LD_INT 0
49981: PUSH
49982: LD_INT 1
49984: NEG
49985: PUSH
49986: EMPTY
49987: LIST
49988: LIST
49989: PUSH
49990: LD_INT 1
49992: PUSH
49993: LD_INT 0
49995: PUSH
49996: EMPTY
49997: LIST
49998: LIST
49999: PUSH
50000: LD_INT 1
50002: PUSH
50003: LD_INT 1
50005: PUSH
50006: EMPTY
50007: LIST
50008: LIST
50009: PUSH
50010: LD_INT 0
50012: PUSH
50013: LD_INT 1
50015: PUSH
50016: EMPTY
50017: LIST
50018: LIST
50019: PUSH
50020: LD_INT 1
50022: NEG
50023: PUSH
50024: LD_INT 0
50026: PUSH
50027: EMPTY
50028: LIST
50029: LIST
50030: PUSH
50031: LD_INT 1
50033: NEG
50034: PUSH
50035: LD_INT 1
50037: NEG
50038: PUSH
50039: EMPTY
50040: LIST
50041: LIST
50042: PUSH
50043: EMPTY
50044: LIST
50045: LIST
50046: LIST
50047: LIST
50048: LIST
50049: LIST
50050: LIST
50051: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50052: LD_ADDR_VAR 0 60
50056: PUSH
50057: LD_INT 0
50059: PUSH
50060: LD_INT 0
50062: PUSH
50063: EMPTY
50064: LIST
50065: LIST
50066: PUSH
50067: LD_INT 0
50069: PUSH
50070: LD_INT 1
50072: NEG
50073: PUSH
50074: EMPTY
50075: LIST
50076: LIST
50077: PUSH
50078: LD_INT 1
50080: PUSH
50081: LD_INT 0
50083: PUSH
50084: EMPTY
50085: LIST
50086: LIST
50087: PUSH
50088: LD_INT 1
50090: PUSH
50091: LD_INT 1
50093: PUSH
50094: EMPTY
50095: LIST
50096: LIST
50097: PUSH
50098: LD_INT 0
50100: PUSH
50101: LD_INT 1
50103: PUSH
50104: EMPTY
50105: LIST
50106: LIST
50107: PUSH
50108: LD_INT 1
50110: NEG
50111: PUSH
50112: LD_INT 0
50114: PUSH
50115: EMPTY
50116: LIST
50117: LIST
50118: PUSH
50119: LD_INT 1
50121: NEG
50122: PUSH
50123: LD_INT 1
50125: NEG
50126: PUSH
50127: EMPTY
50128: LIST
50129: LIST
50130: PUSH
50131: EMPTY
50132: LIST
50133: LIST
50134: LIST
50135: LIST
50136: LIST
50137: LIST
50138: LIST
50139: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50140: LD_ADDR_VAR 0 61
50144: PUSH
50145: LD_INT 0
50147: PUSH
50148: LD_INT 0
50150: PUSH
50151: EMPTY
50152: LIST
50153: LIST
50154: PUSH
50155: LD_INT 0
50157: PUSH
50158: LD_INT 1
50160: NEG
50161: PUSH
50162: EMPTY
50163: LIST
50164: LIST
50165: PUSH
50166: LD_INT 1
50168: PUSH
50169: LD_INT 0
50171: PUSH
50172: EMPTY
50173: LIST
50174: LIST
50175: PUSH
50176: LD_INT 1
50178: PUSH
50179: LD_INT 1
50181: PUSH
50182: EMPTY
50183: LIST
50184: LIST
50185: PUSH
50186: LD_INT 0
50188: PUSH
50189: LD_INT 1
50191: PUSH
50192: EMPTY
50193: LIST
50194: LIST
50195: PUSH
50196: LD_INT 1
50198: NEG
50199: PUSH
50200: LD_INT 0
50202: PUSH
50203: EMPTY
50204: LIST
50205: LIST
50206: PUSH
50207: LD_INT 1
50209: NEG
50210: PUSH
50211: LD_INT 1
50213: NEG
50214: PUSH
50215: EMPTY
50216: LIST
50217: LIST
50218: PUSH
50219: EMPTY
50220: LIST
50221: LIST
50222: LIST
50223: LIST
50224: LIST
50225: LIST
50226: LIST
50227: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50228: LD_ADDR_VAR 0 62
50232: PUSH
50233: LD_INT 0
50235: PUSH
50236: LD_INT 0
50238: PUSH
50239: EMPTY
50240: LIST
50241: LIST
50242: PUSH
50243: LD_INT 0
50245: PUSH
50246: LD_INT 1
50248: NEG
50249: PUSH
50250: EMPTY
50251: LIST
50252: LIST
50253: PUSH
50254: LD_INT 1
50256: PUSH
50257: LD_INT 0
50259: PUSH
50260: EMPTY
50261: LIST
50262: LIST
50263: PUSH
50264: LD_INT 1
50266: PUSH
50267: LD_INT 1
50269: PUSH
50270: EMPTY
50271: LIST
50272: LIST
50273: PUSH
50274: LD_INT 0
50276: PUSH
50277: LD_INT 1
50279: PUSH
50280: EMPTY
50281: LIST
50282: LIST
50283: PUSH
50284: LD_INT 1
50286: NEG
50287: PUSH
50288: LD_INT 0
50290: PUSH
50291: EMPTY
50292: LIST
50293: LIST
50294: PUSH
50295: LD_INT 1
50297: NEG
50298: PUSH
50299: LD_INT 1
50301: NEG
50302: PUSH
50303: EMPTY
50304: LIST
50305: LIST
50306: PUSH
50307: EMPTY
50308: LIST
50309: LIST
50310: LIST
50311: LIST
50312: LIST
50313: LIST
50314: LIST
50315: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50316: LD_ADDR_VAR 0 63
50320: PUSH
50321: LD_INT 0
50323: PUSH
50324: LD_INT 0
50326: PUSH
50327: EMPTY
50328: LIST
50329: LIST
50330: PUSH
50331: LD_INT 0
50333: PUSH
50334: LD_INT 1
50336: NEG
50337: PUSH
50338: EMPTY
50339: LIST
50340: LIST
50341: PUSH
50342: LD_INT 1
50344: PUSH
50345: LD_INT 0
50347: PUSH
50348: EMPTY
50349: LIST
50350: LIST
50351: PUSH
50352: LD_INT 1
50354: PUSH
50355: LD_INT 1
50357: PUSH
50358: EMPTY
50359: LIST
50360: LIST
50361: PUSH
50362: LD_INT 0
50364: PUSH
50365: LD_INT 1
50367: PUSH
50368: EMPTY
50369: LIST
50370: LIST
50371: PUSH
50372: LD_INT 1
50374: NEG
50375: PUSH
50376: LD_INT 0
50378: PUSH
50379: EMPTY
50380: LIST
50381: LIST
50382: PUSH
50383: LD_INT 1
50385: NEG
50386: PUSH
50387: LD_INT 1
50389: NEG
50390: PUSH
50391: EMPTY
50392: LIST
50393: LIST
50394: PUSH
50395: EMPTY
50396: LIST
50397: LIST
50398: LIST
50399: LIST
50400: LIST
50401: LIST
50402: LIST
50403: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50404: LD_ADDR_VAR 0 64
50408: PUSH
50409: LD_INT 0
50411: PUSH
50412: LD_INT 0
50414: PUSH
50415: EMPTY
50416: LIST
50417: LIST
50418: PUSH
50419: LD_INT 0
50421: PUSH
50422: LD_INT 1
50424: NEG
50425: PUSH
50426: EMPTY
50427: LIST
50428: LIST
50429: PUSH
50430: LD_INT 1
50432: PUSH
50433: LD_INT 0
50435: PUSH
50436: EMPTY
50437: LIST
50438: LIST
50439: PUSH
50440: LD_INT 1
50442: PUSH
50443: LD_INT 1
50445: PUSH
50446: EMPTY
50447: LIST
50448: LIST
50449: PUSH
50450: LD_INT 0
50452: PUSH
50453: LD_INT 1
50455: PUSH
50456: EMPTY
50457: LIST
50458: LIST
50459: PUSH
50460: LD_INT 1
50462: NEG
50463: PUSH
50464: LD_INT 0
50466: PUSH
50467: EMPTY
50468: LIST
50469: LIST
50470: PUSH
50471: LD_INT 1
50473: NEG
50474: PUSH
50475: LD_INT 1
50477: NEG
50478: PUSH
50479: EMPTY
50480: LIST
50481: LIST
50482: PUSH
50483: EMPTY
50484: LIST
50485: LIST
50486: LIST
50487: LIST
50488: LIST
50489: LIST
50490: LIST
50491: ST_TO_ADDR
// end ; 1 :
50492: GO 56389
50494: LD_INT 1
50496: DOUBLE
50497: EQUAL
50498: IFTRUE 50502
50500: GO 53125
50502: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
50503: LD_ADDR_VAR 0 11
50507: PUSH
50508: LD_INT 1
50510: NEG
50511: PUSH
50512: LD_INT 3
50514: NEG
50515: PUSH
50516: EMPTY
50517: LIST
50518: LIST
50519: PUSH
50520: LD_INT 0
50522: PUSH
50523: LD_INT 3
50525: NEG
50526: PUSH
50527: EMPTY
50528: LIST
50529: LIST
50530: PUSH
50531: LD_INT 1
50533: PUSH
50534: LD_INT 2
50536: NEG
50537: PUSH
50538: EMPTY
50539: LIST
50540: LIST
50541: PUSH
50542: EMPTY
50543: LIST
50544: LIST
50545: LIST
50546: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
50547: LD_ADDR_VAR 0 12
50551: PUSH
50552: LD_INT 2
50554: PUSH
50555: LD_INT 1
50557: NEG
50558: PUSH
50559: EMPTY
50560: LIST
50561: LIST
50562: PUSH
50563: LD_INT 3
50565: PUSH
50566: LD_INT 0
50568: PUSH
50569: EMPTY
50570: LIST
50571: LIST
50572: PUSH
50573: LD_INT 3
50575: PUSH
50576: LD_INT 1
50578: PUSH
50579: EMPTY
50580: LIST
50581: LIST
50582: PUSH
50583: EMPTY
50584: LIST
50585: LIST
50586: LIST
50587: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
50588: LD_ADDR_VAR 0 13
50592: PUSH
50593: LD_INT 3
50595: PUSH
50596: LD_INT 2
50598: PUSH
50599: EMPTY
50600: LIST
50601: LIST
50602: PUSH
50603: LD_INT 3
50605: PUSH
50606: LD_INT 3
50608: PUSH
50609: EMPTY
50610: LIST
50611: LIST
50612: PUSH
50613: LD_INT 2
50615: PUSH
50616: LD_INT 3
50618: PUSH
50619: EMPTY
50620: LIST
50621: LIST
50622: PUSH
50623: EMPTY
50624: LIST
50625: LIST
50626: LIST
50627: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
50628: LD_ADDR_VAR 0 14
50632: PUSH
50633: LD_INT 1
50635: PUSH
50636: LD_INT 3
50638: PUSH
50639: EMPTY
50640: LIST
50641: LIST
50642: PUSH
50643: LD_INT 0
50645: PUSH
50646: LD_INT 3
50648: PUSH
50649: EMPTY
50650: LIST
50651: LIST
50652: PUSH
50653: LD_INT 1
50655: NEG
50656: PUSH
50657: LD_INT 2
50659: PUSH
50660: EMPTY
50661: LIST
50662: LIST
50663: PUSH
50664: EMPTY
50665: LIST
50666: LIST
50667: LIST
50668: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50669: LD_ADDR_VAR 0 15
50673: PUSH
50674: LD_INT 2
50676: NEG
50677: PUSH
50678: LD_INT 1
50680: PUSH
50681: EMPTY
50682: LIST
50683: LIST
50684: PUSH
50685: LD_INT 3
50687: NEG
50688: PUSH
50689: LD_INT 0
50691: PUSH
50692: EMPTY
50693: LIST
50694: LIST
50695: PUSH
50696: LD_INT 3
50698: NEG
50699: PUSH
50700: LD_INT 1
50702: NEG
50703: PUSH
50704: EMPTY
50705: LIST
50706: LIST
50707: PUSH
50708: EMPTY
50709: LIST
50710: LIST
50711: LIST
50712: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50713: LD_ADDR_VAR 0 16
50717: PUSH
50718: LD_INT 2
50720: NEG
50721: PUSH
50722: LD_INT 3
50724: NEG
50725: PUSH
50726: EMPTY
50727: LIST
50728: LIST
50729: PUSH
50730: LD_INT 3
50732: NEG
50733: PUSH
50734: LD_INT 2
50736: NEG
50737: PUSH
50738: EMPTY
50739: LIST
50740: LIST
50741: PUSH
50742: LD_INT 3
50744: NEG
50745: PUSH
50746: LD_INT 3
50748: NEG
50749: PUSH
50750: EMPTY
50751: LIST
50752: LIST
50753: PUSH
50754: EMPTY
50755: LIST
50756: LIST
50757: LIST
50758: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
50759: LD_ADDR_VAR 0 17
50763: PUSH
50764: LD_INT 1
50766: NEG
50767: PUSH
50768: LD_INT 3
50770: NEG
50771: PUSH
50772: EMPTY
50773: LIST
50774: LIST
50775: PUSH
50776: LD_INT 0
50778: PUSH
50779: LD_INT 3
50781: NEG
50782: PUSH
50783: EMPTY
50784: LIST
50785: LIST
50786: PUSH
50787: LD_INT 1
50789: PUSH
50790: LD_INT 2
50792: NEG
50793: PUSH
50794: EMPTY
50795: LIST
50796: LIST
50797: PUSH
50798: EMPTY
50799: LIST
50800: LIST
50801: LIST
50802: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
50803: LD_ADDR_VAR 0 18
50807: PUSH
50808: LD_INT 2
50810: PUSH
50811: LD_INT 1
50813: NEG
50814: PUSH
50815: EMPTY
50816: LIST
50817: LIST
50818: PUSH
50819: LD_INT 3
50821: PUSH
50822: LD_INT 0
50824: PUSH
50825: EMPTY
50826: LIST
50827: LIST
50828: PUSH
50829: LD_INT 3
50831: PUSH
50832: LD_INT 1
50834: PUSH
50835: EMPTY
50836: LIST
50837: LIST
50838: PUSH
50839: EMPTY
50840: LIST
50841: LIST
50842: LIST
50843: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
50844: LD_ADDR_VAR 0 19
50848: PUSH
50849: LD_INT 3
50851: PUSH
50852: LD_INT 2
50854: PUSH
50855: EMPTY
50856: LIST
50857: LIST
50858: PUSH
50859: LD_INT 3
50861: PUSH
50862: LD_INT 3
50864: PUSH
50865: EMPTY
50866: LIST
50867: LIST
50868: PUSH
50869: LD_INT 2
50871: PUSH
50872: LD_INT 3
50874: PUSH
50875: EMPTY
50876: LIST
50877: LIST
50878: PUSH
50879: EMPTY
50880: LIST
50881: LIST
50882: LIST
50883: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
50884: LD_ADDR_VAR 0 20
50888: PUSH
50889: LD_INT 1
50891: PUSH
50892: LD_INT 3
50894: PUSH
50895: EMPTY
50896: LIST
50897: LIST
50898: PUSH
50899: LD_INT 0
50901: PUSH
50902: LD_INT 3
50904: PUSH
50905: EMPTY
50906: LIST
50907: LIST
50908: PUSH
50909: LD_INT 1
50911: NEG
50912: PUSH
50913: LD_INT 2
50915: PUSH
50916: EMPTY
50917: LIST
50918: LIST
50919: PUSH
50920: EMPTY
50921: LIST
50922: LIST
50923: LIST
50924: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50925: LD_ADDR_VAR 0 21
50929: PUSH
50930: LD_INT 2
50932: NEG
50933: PUSH
50934: LD_INT 1
50936: PUSH
50937: EMPTY
50938: LIST
50939: LIST
50940: PUSH
50941: LD_INT 3
50943: NEG
50944: PUSH
50945: LD_INT 0
50947: PUSH
50948: EMPTY
50949: LIST
50950: LIST
50951: PUSH
50952: LD_INT 3
50954: NEG
50955: PUSH
50956: LD_INT 1
50958: NEG
50959: PUSH
50960: EMPTY
50961: LIST
50962: LIST
50963: PUSH
50964: EMPTY
50965: LIST
50966: LIST
50967: LIST
50968: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50969: LD_ADDR_VAR 0 22
50973: PUSH
50974: LD_INT 2
50976: NEG
50977: PUSH
50978: LD_INT 3
50980: NEG
50981: PUSH
50982: EMPTY
50983: LIST
50984: LIST
50985: PUSH
50986: LD_INT 3
50988: NEG
50989: PUSH
50990: LD_INT 2
50992: NEG
50993: PUSH
50994: EMPTY
50995: LIST
50996: LIST
50997: PUSH
50998: LD_INT 3
51000: NEG
51001: PUSH
51002: LD_INT 3
51004: NEG
51005: PUSH
51006: EMPTY
51007: LIST
51008: LIST
51009: PUSH
51010: EMPTY
51011: LIST
51012: LIST
51013: LIST
51014: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
51015: LD_ADDR_VAR 0 23
51019: PUSH
51020: LD_INT 0
51022: PUSH
51023: LD_INT 3
51025: NEG
51026: PUSH
51027: EMPTY
51028: LIST
51029: LIST
51030: PUSH
51031: LD_INT 1
51033: NEG
51034: PUSH
51035: LD_INT 4
51037: NEG
51038: PUSH
51039: EMPTY
51040: LIST
51041: LIST
51042: PUSH
51043: LD_INT 1
51045: PUSH
51046: LD_INT 3
51048: NEG
51049: PUSH
51050: EMPTY
51051: LIST
51052: LIST
51053: PUSH
51054: EMPTY
51055: LIST
51056: LIST
51057: LIST
51058: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
51059: LD_ADDR_VAR 0 24
51063: PUSH
51064: LD_INT 3
51066: PUSH
51067: LD_INT 0
51069: PUSH
51070: EMPTY
51071: LIST
51072: LIST
51073: PUSH
51074: LD_INT 3
51076: PUSH
51077: LD_INT 1
51079: NEG
51080: PUSH
51081: EMPTY
51082: LIST
51083: LIST
51084: PUSH
51085: LD_INT 4
51087: PUSH
51088: LD_INT 1
51090: PUSH
51091: EMPTY
51092: LIST
51093: LIST
51094: PUSH
51095: EMPTY
51096: LIST
51097: LIST
51098: LIST
51099: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
51100: LD_ADDR_VAR 0 25
51104: PUSH
51105: LD_INT 3
51107: PUSH
51108: LD_INT 3
51110: PUSH
51111: EMPTY
51112: LIST
51113: LIST
51114: PUSH
51115: LD_INT 4
51117: PUSH
51118: LD_INT 3
51120: PUSH
51121: EMPTY
51122: LIST
51123: LIST
51124: PUSH
51125: LD_INT 3
51127: PUSH
51128: LD_INT 4
51130: PUSH
51131: EMPTY
51132: LIST
51133: LIST
51134: PUSH
51135: EMPTY
51136: LIST
51137: LIST
51138: LIST
51139: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
51140: LD_ADDR_VAR 0 26
51144: PUSH
51145: LD_INT 0
51147: PUSH
51148: LD_INT 3
51150: PUSH
51151: EMPTY
51152: LIST
51153: LIST
51154: PUSH
51155: LD_INT 1
51157: PUSH
51158: LD_INT 4
51160: PUSH
51161: EMPTY
51162: LIST
51163: LIST
51164: PUSH
51165: LD_INT 1
51167: NEG
51168: PUSH
51169: LD_INT 3
51171: PUSH
51172: EMPTY
51173: LIST
51174: LIST
51175: PUSH
51176: EMPTY
51177: LIST
51178: LIST
51179: LIST
51180: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
51181: LD_ADDR_VAR 0 27
51185: PUSH
51186: LD_INT 3
51188: NEG
51189: PUSH
51190: LD_INT 0
51192: PUSH
51193: EMPTY
51194: LIST
51195: LIST
51196: PUSH
51197: LD_INT 3
51199: NEG
51200: PUSH
51201: LD_INT 1
51203: PUSH
51204: EMPTY
51205: LIST
51206: LIST
51207: PUSH
51208: LD_INT 4
51210: NEG
51211: PUSH
51212: LD_INT 1
51214: NEG
51215: PUSH
51216: EMPTY
51217: LIST
51218: LIST
51219: PUSH
51220: EMPTY
51221: LIST
51222: LIST
51223: LIST
51224: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
51225: LD_ADDR_VAR 0 28
51229: PUSH
51230: LD_INT 3
51232: NEG
51233: PUSH
51234: LD_INT 3
51236: NEG
51237: PUSH
51238: EMPTY
51239: LIST
51240: LIST
51241: PUSH
51242: LD_INT 3
51244: NEG
51245: PUSH
51246: LD_INT 4
51248: NEG
51249: PUSH
51250: EMPTY
51251: LIST
51252: LIST
51253: PUSH
51254: LD_INT 4
51256: NEG
51257: PUSH
51258: LD_INT 3
51260: NEG
51261: PUSH
51262: EMPTY
51263: LIST
51264: LIST
51265: PUSH
51266: EMPTY
51267: LIST
51268: LIST
51269: LIST
51270: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
51271: LD_ADDR_VAR 0 29
51275: PUSH
51276: LD_INT 1
51278: NEG
51279: PUSH
51280: LD_INT 3
51282: NEG
51283: PUSH
51284: EMPTY
51285: LIST
51286: LIST
51287: PUSH
51288: LD_INT 0
51290: PUSH
51291: LD_INT 3
51293: NEG
51294: PUSH
51295: EMPTY
51296: LIST
51297: LIST
51298: PUSH
51299: LD_INT 1
51301: PUSH
51302: LD_INT 2
51304: NEG
51305: PUSH
51306: EMPTY
51307: LIST
51308: LIST
51309: PUSH
51310: LD_INT 1
51312: NEG
51313: PUSH
51314: LD_INT 4
51316: NEG
51317: PUSH
51318: EMPTY
51319: LIST
51320: LIST
51321: PUSH
51322: LD_INT 0
51324: PUSH
51325: LD_INT 4
51327: NEG
51328: PUSH
51329: EMPTY
51330: LIST
51331: LIST
51332: PUSH
51333: LD_INT 1
51335: PUSH
51336: LD_INT 3
51338: NEG
51339: PUSH
51340: EMPTY
51341: LIST
51342: LIST
51343: PUSH
51344: LD_INT 1
51346: NEG
51347: PUSH
51348: LD_INT 5
51350: NEG
51351: PUSH
51352: EMPTY
51353: LIST
51354: LIST
51355: PUSH
51356: LD_INT 0
51358: PUSH
51359: LD_INT 5
51361: NEG
51362: PUSH
51363: EMPTY
51364: LIST
51365: LIST
51366: PUSH
51367: LD_INT 1
51369: PUSH
51370: LD_INT 4
51372: NEG
51373: PUSH
51374: EMPTY
51375: LIST
51376: LIST
51377: PUSH
51378: LD_INT 1
51380: NEG
51381: PUSH
51382: LD_INT 6
51384: NEG
51385: PUSH
51386: EMPTY
51387: LIST
51388: LIST
51389: PUSH
51390: LD_INT 0
51392: PUSH
51393: LD_INT 6
51395: NEG
51396: PUSH
51397: EMPTY
51398: LIST
51399: LIST
51400: PUSH
51401: LD_INT 1
51403: PUSH
51404: LD_INT 5
51406: NEG
51407: PUSH
51408: EMPTY
51409: LIST
51410: LIST
51411: PUSH
51412: EMPTY
51413: LIST
51414: LIST
51415: LIST
51416: LIST
51417: LIST
51418: LIST
51419: LIST
51420: LIST
51421: LIST
51422: LIST
51423: LIST
51424: LIST
51425: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
51426: LD_ADDR_VAR 0 30
51430: PUSH
51431: LD_INT 2
51433: PUSH
51434: LD_INT 1
51436: NEG
51437: PUSH
51438: EMPTY
51439: LIST
51440: LIST
51441: PUSH
51442: LD_INT 3
51444: PUSH
51445: LD_INT 0
51447: PUSH
51448: EMPTY
51449: LIST
51450: LIST
51451: PUSH
51452: LD_INT 3
51454: PUSH
51455: LD_INT 1
51457: PUSH
51458: EMPTY
51459: LIST
51460: LIST
51461: PUSH
51462: LD_INT 3
51464: PUSH
51465: LD_INT 1
51467: NEG
51468: PUSH
51469: EMPTY
51470: LIST
51471: LIST
51472: PUSH
51473: LD_INT 4
51475: PUSH
51476: LD_INT 0
51478: PUSH
51479: EMPTY
51480: LIST
51481: LIST
51482: PUSH
51483: LD_INT 4
51485: PUSH
51486: LD_INT 1
51488: PUSH
51489: EMPTY
51490: LIST
51491: LIST
51492: PUSH
51493: LD_INT 4
51495: PUSH
51496: LD_INT 1
51498: NEG
51499: PUSH
51500: EMPTY
51501: LIST
51502: LIST
51503: PUSH
51504: LD_INT 5
51506: PUSH
51507: LD_INT 0
51509: PUSH
51510: EMPTY
51511: LIST
51512: LIST
51513: PUSH
51514: LD_INT 5
51516: PUSH
51517: LD_INT 1
51519: PUSH
51520: EMPTY
51521: LIST
51522: LIST
51523: PUSH
51524: LD_INT 5
51526: PUSH
51527: LD_INT 1
51529: NEG
51530: PUSH
51531: EMPTY
51532: LIST
51533: LIST
51534: PUSH
51535: LD_INT 6
51537: PUSH
51538: LD_INT 0
51540: PUSH
51541: EMPTY
51542: LIST
51543: LIST
51544: PUSH
51545: LD_INT 6
51547: PUSH
51548: LD_INT 1
51550: PUSH
51551: EMPTY
51552: LIST
51553: LIST
51554: PUSH
51555: EMPTY
51556: LIST
51557: LIST
51558: LIST
51559: LIST
51560: LIST
51561: LIST
51562: LIST
51563: LIST
51564: LIST
51565: LIST
51566: LIST
51567: LIST
51568: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
51569: LD_ADDR_VAR 0 31
51573: PUSH
51574: LD_INT 3
51576: PUSH
51577: LD_INT 2
51579: PUSH
51580: EMPTY
51581: LIST
51582: LIST
51583: PUSH
51584: LD_INT 3
51586: PUSH
51587: LD_INT 3
51589: PUSH
51590: EMPTY
51591: LIST
51592: LIST
51593: PUSH
51594: LD_INT 2
51596: PUSH
51597: LD_INT 3
51599: PUSH
51600: EMPTY
51601: LIST
51602: LIST
51603: PUSH
51604: LD_INT 4
51606: PUSH
51607: LD_INT 3
51609: PUSH
51610: EMPTY
51611: LIST
51612: LIST
51613: PUSH
51614: LD_INT 4
51616: PUSH
51617: LD_INT 4
51619: PUSH
51620: EMPTY
51621: LIST
51622: LIST
51623: PUSH
51624: LD_INT 3
51626: PUSH
51627: LD_INT 4
51629: PUSH
51630: EMPTY
51631: LIST
51632: LIST
51633: PUSH
51634: LD_INT 5
51636: PUSH
51637: LD_INT 4
51639: PUSH
51640: EMPTY
51641: LIST
51642: LIST
51643: PUSH
51644: LD_INT 5
51646: PUSH
51647: LD_INT 5
51649: PUSH
51650: EMPTY
51651: LIST
51652: LIST
51653: PUSH
51654: LD_INT 4
51656: PUSH
51657: LD_INT 5
51659: PUSH
51660: EMPTY
51661: LIST
51662: LIST
51663: PUSH
51664: LD_INT 6
51666: PUSH
51667: LD_INT 5
51669: PUSH
51670: EMPTY
51671: LIST
51672: LIST
51673: PUSH
51674: LD_INT 6
51676: PUSH
51677: LD_INT 6
51679: PUSH
51680: EMPTY
51681: LIST
51682: LIST
51683: PUSH
51684: LD_INT 5
51686: PUSH
51687: LD_INT 6
51689: PUSH
51690: EMPTY
51691: LIST
51692: LIST
51693: PUSH
51694: EMPTY
51695: LIST
51696: LIST
51697: LIST
51698: LIST
51699: LIST
51700: LIST
51701: LIST
51702: LIST
51703: LIST
51704: LIST
51705: LIST
51706: LIST
51707: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
51708: LD_ADDR_VAR 0 32
51712: PUSH
51713: LD_INT 1
51715: PUSH
51716: LD_INT 3
51718: PUSH
51719: EMPTY
51720: LIST
51721: LIST
51722: PUSH
51723: LD_INT 0
51725: PUSH
51726: LD_INT 3
51728: PUSH
51729: EMPTY
51730: LIST
51731: LIST
51732: PUSH
51733: LD_INT 1
51735: NEG
51736: PUSH
51737: LD_INT 2
51739: PUSH
51740: EMPTY
51741: LIST
51742: LIST
51743: PUSH
51744: LD_INT 1
51746: PUSH
51747: LD_INT 4
51749: PUSH
51750: EMPTY
51751: LIST
51752: LIST
51753: PUSH
51754: LD_INT 0
51756: PUSH
51757: LD_INT 4
51759: PUSH
51760: EMPTY
51761: LIST
51762: LIST
51763: PUSH
51764: LD_INT 1
51766: NEG
51767: PUSH
51768: LD_INT 3
51770: PUSH
51771: EMPTY
51772: LIST
51773: LIST
51774: PUSH
51775: LD_INT 1
51777: PUSH
51778: LD_INT 5
51780: PUSH
51781: EMPTY
51782: LIST
51783: LIST
51784: PUSH
51785: LD_INT 0
51787: PUSH
51788: LD_INT 5
51790: PUSH
51791: EMPTY
51792: LIST
51793: LIST
51794: PUSH
51795: LD_INT 1
51797: NEG
51798: PUSH
51799: LD_INT 4
51801: PUSH
51802: EMPTY
51803: LIST
51804: LIST
51805: PUSH
51806: LD_INT 1
51808: PUSH
51809: LD_INT 6
51811: PUSH
51812: EMPTY
51813: LIST
51814: LIST
51815: PUSH
51816: LD_INT 0
51818: PUSH
51819: LD_INT 6
51821: PUSH
51822: EMPTY
51823: LIST
51824: LIST
51825: PUSH
51826: LD_INT 1
51828: NEG
51829: PUSH
51830: LD_INT 5
51832: PUSH
51833: EMPTY
51834: LIST
51835: LIST
51836: PUSH
51837: EMPTY
51838: LIST
51839: LIST
51840: LIST
51841: LIST
51842: LIST
51843: LIST
51844: LIST
51845: LIST
51846: LIST
51847: LIST
51848: LIST
51849: LIST
51850: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
51851: LD_ADDR_VAR 0 33
51855: PUSH
51856: LD_INT 2
51858: NEG
51859: PUSH
51860: LD_INT 1
51862: PUSH
51863: EMPTY
51864: LIST
51865: LIST
51866: PUSH
51867: LD_INT 3
51869: NEG
51870: PUSH
51871: LD_INT 0
51873: PUSH
51874: EMPTY
51875: LIST
51876: LIST
51877: PUSH
51878: LD_INT 3
51880: NEG
51881: PUSH
51882: LD_INT 1
51884: NEG
51885: PUSH
51886: EMPTY
51887: LIST
51888: LIST
51889: PUSH
51890: LD_INT 3
51892: NEG
51893: PUSH
51894: LD_INT 1
51896: PUSH
51897: EMPTY
51898: LIST
51899: LIST
51900: PUSH
51901: LD_INT 4
51903: NEG
51904: PUSH
51905: LD_INT 0
51907: PUSH
51908: EMPTY
51909: LIST
51910: LIST
51911: PUSH
51912: LD_INT 4
51914: NEG
51915: PUSH
51916: LD_INT 1
51918: NEG
51919: PUSH
51920: EMPTY
51921: LIST
51922: LIST
51923: PUSH
51924: LD_INT 4
51926: NEG
51927: PUSH
51928: LD_INT 1
51930: PUSH
51931: EMPTY
51932: LIST
51933: LIST
51934: PUSH
51935: LD_INT 5
51937: NEG
51938: PUSH
51939: LD_INT 0
51941: PUSH
51942: EMPTY
51943: LIST
51944: LIST
51945: PUSH
51946: LD_INT 5
51948: NEG
51949: PUSH
51950: LD_INT 1
51952: NEG
51953: PUSH
51954: EMPTY
51955: LIST
51956: LIST
51957: PUSH
51958: LD_INT 5
51960: NEG
51961: PUSH
51962: LD_INT 1
51964: PUSH
51965: EMPTY
51966: LIST
51967: LIST
51968: PUSH
51969: LD_INT 6
51971: NEG
51972: PUSH
51973: LD_INT 0
51975: PUSH
51976: EMPTY
51977: LIST
51978: LIST
51979: PUSH
51980: LD_INT 6
51982: NEG
51983: PUSH
51984: LD_INT 1
51986: NEG
51987: PUSH
51988: EMPTY
51989: LIST
51990: LIST
51991: PUSH
51992: EMPTY
51993: LIST
51994: LIST
51995: LIST
51996: LIST
51997: LIST
51998: LIST
51999: LIST
52000: LIST
52001: LIST
52002: LIST
52003: LIST
52004: LIST
52005: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
52006: LD_ADDR_VAR 0 34
52010: PUSH
52011: LD_INT 2
52013: NEG
52014: PUSH
52015: LD_INT 3
52017: NEG
52018: PUSH
52019: EMPTY
52020: LIST
52021: LIST
52022: PUSH
52023: LD_INT 3
52025: NEG
52026: PUSH
52027: LD_INT 2
52029: NEG
52030: PUSH
52031: EMPTY
52032: LIST
52033: LIST
52034: PUSH
52035: LD_INT 3
52037: NEG
52038: PUSH
52039: LD_INT 3
52041: NEG
52042: PUSH
52043: EMPTY
52044: LIST
52045: LIST
52046: PUSH
52047: LD_INT 3
52049: NEG
52050: PUSH
52051: LD_INT 4
52053: NEG
52054: PUSH
52055: EMPTY
52056: LIST
52057: LIST
52058: PUSH
52059: LD_INT 4
52061: NEG
52062: PUSH
52063: LD_INT 3
52065: NEG
52066: PUSH
52067: EMPTY
52068: LIST
52069: LIST
52070: PUSH
52071: LD_INT 4
52073: NEG
52074: PUSH
52075: LD_INT 4
52077: NEG
52078: PUSH
52079: EMPTY
52080: LIST
52081: LIST
52082: PUSH
52083: LD_INT 4
52085: NEG
52086: PUSH
52087: LD_INT 5
52089: NEG
52090: PUSH
52091: EMPTY
52092: LIST
52093: LIST
52094: PUSH
52095: LD_INT 5
52097: NEG
52098: PUSH
52099: LD_INT 4
52101: NEG
52102: PUSH
52103: EMPTY
52104: LIST
52105: LIST
52106: PUSH
52107: LD_INT 5
52109: NEG
52110: PUSH
52111: LD_INT 5
52113: NEG
52114: PUSH
52115: EMPTY
52116: LIST
52117: LIST
52118: PUSH
52119: LD_INT 5
52121: NEG
52122: PUSH
52123: LD_INT 6
52125: NEG
52126: PUSH
52127: EMPTY
52128: LIST
52129: LIST
52130: PUSH
52131: LD_INT 6
52133: NEG
52134: PUSH
52135: LD_INT 5
52137: NEG
52138: PUSH
52139: EMPTY
52140: LIST
52141: LIST
52142: PUSH
52143: LD_INT 6
52145: NEG
52146: PUSH
52147: LD_INT 6
52149: NEG
52150: PUSH
52151: EMPTY
52152: LIST
52153: LIST
52154: PUSH
52155: EMPTY
52156: LIST
52157: LIST
52158: LIST
52159: LIST
52160: LIST
52161: LIST
52162: LIST
52163: LIST
52164: LIST
52165: LIST
52166: LIST
52167: LIST
52168: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
52169: LD_ADDR_VAR 0 41
52173: PUSH
52174: LD_INT 0
52176: PUSH
52177: LD_INT 2
52179: NEG
52180: PUSH
52181: EMPTY
52182: LIST
52183: LIST
52184: PUSH
52185: LD_INT 1
52187: NEG
52188: PUSH
52189: LD_INT 3
52191: NEG
52192: PUSH
52193: EMPTY
52194: LIST
52195: LIST
52196: PUSH
52197: LD_INT 1
52199: PUSH
52200: LD_INT 2
52202: NEG
52203: PUSH
52204: EMPTY
52205: LIST
52206: LIST
52207: PUSH
52208: EMPTY
52209: LIST
52210: LIST
52211: LIST
52212: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
52213: LD_ADDR_VAR 0 42
52217: PUSH
52218: LD_INT 2
52220: PUSH
52221: LD_INT 0
52223: PUSH
52224: EMPTY
52225: LIST
52226: LIST
52227: PUSH
52228: LD_INT 2
52230: PUSH
52231: LD_INT 1
52233: NEG
52234: PUSH
52235: EMPTY
52236: LIST
52237: LIST
52238: PUSH
52239: LD_INT 3
52241: PUSH
52242: LD_INT 1
52244: PUSH
52245: EMPTY
52246: LIST
52247: LIST
52248: PUSH
52249: EMPTY
52250: LIST
52251: LIST
52252: LIST
52253: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
52254: LD_ADDR_VAR 0 43
52258: PUSH
52259: LD_INT 2
52261: PUSH
52262: LD_INT 2
52264: PUSH
52265: EMPTY
52266: LIST
52267: LIST
52268: PUSH
52269: LD_INT 3
52271: PUSH
52272: LD_INT 2
52274: PUSH
52275: EMPTY
52276: LIST
52277: LIST
52278: PUSH
52279: LD_INT 2
52281: PUSH
52282: LD_INT 3
52284: PUSH
52285: EMPTY
52286: LIST
52287: LIST
52288: PUSH
52289: EMPTY
52290: LIST
52291: LIST
52292: LIST
52293: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
52294: LD_ADDR_VAR 0 44
52298: PUSH
52299: LD_INT 0
52301: PUSH
52302: LD_INT 2
52304: PUSH
52305: EMPTY
52306: LIST
52307: LIST
52308: PUSH
52309: LD_INT 1
52311: PUSH
52312: LD_INT 3
52314: PUSH
52315: EMPTY
52316: LIST
52317: LIST
52318: PUSH
52319: LD_INT 1
52321: NEG
52322: PUSH
52323: LD_INT 2
52325: PUSH
52326: EMPTY
52327: LIST
52328: LIST
52329: PUSH
52330: EMPTY
52331: LIST
52332: LIST
52333: LIST
52334: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
52335: LD_ADDR_VAR 0 45
52339: PUSH
52340: LD_INT 2
52342: NEG
52343: PUSH
52344: LD_INT 0
52346: PUSH
52347: EMPTY
52348: LIST
52349: LIST
52350: PUSH
52351: LD_INT 2
52353: NEG
52354: PUSH
52355: LD_INT 1
52357: PUSH
52358: EMPTY
52359: LIST
52360: LIST
52361: PUSH
52362: LD_INT 3
52364: NEG
52365: PUSH
52366: LD_INT 1
52368: NEG
52369: PUSH
52370: EMPTY
52371: LIST
52372: LIST
52373: PUSH
52374: EMPTY
52375: LIST
52376: LIST
52377: LIST
52378: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
52379: LD_ADDR_VAR 0 46
52383: PUSH
52384: LD_INT 2
52386: NEG
52387: PUSH
52388: LD_INT 2
52390: NEG
52391: PUSH
52392: EMPTY
52393: LIST
52394: LIST
52395: PUSH
52396: LD_INT 2
52398: NEG
52399: PUSH
52400: LD_INT 3
52402: NEG
52403: PUSH
52404: EMPTY
52405: LIST
52406: LIST
52407: PUSH
52408: LD_INT 3
52410: NEG
52411: PUSH
52412: LD_INT 2
52414: NEG
52415: PUSH
52416: EMPTY
52417: LIST
52418: LIST
52419: PUSH
52420: EMPTY
52421: LIST
52422: LIST
52423: LIST
52424: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
52425: LD_ADDR_VAR 0 47
52429: PUSH
52430: LD_INT 2
52432: NEG
52433: PUSH
52434: LD_INT 3
52436: NEG
52437: PUSH
52438: EMPTY
52439: LIST
52440: LIST
52441: PUSH
52442: LD_INT 1
52444: NEG
52445: PUSH
52446: LD_INT 3
52448: NEG
52449: PUSH
52450: EMPTY
52451: LIST
52452: LIST
52453: PUSH
52454: EMPTY
52455: LIST
52456: LIST
52457: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
52458: LD_ADDR_VAR 0 48
52462: PUSH
52463: LD_INT 1
52465: PUSH
52466: LD_INT 2
52468: NEG
52469: PUSH
52470: EMPTY
52471: LIST
52472: LIST
52473: PUSH
52474: LD_INT 2
52476: PUSH
52477: LD_INT 1
52479: NEG
52480: PUSH
52481: EMPTY
52482: LIST
52483: LIST
52484: PUSH
52485: EMPTY
52486: LIST
52487: LIST
52488: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
52489: LD_ADDR_VAR 0 49
52493: PUSH
52494: LD_INT 3
52496: PUSH
52497: LD_INT 1
52499: PUSH
52500: EMPTY
52501: LIST
52502: LIST
52503: PUSH
52504: LD_INT 3
52506: PUSH
52507: LD_INT 2
52509: PUSH
52510: EMPTY
52511: LIST
52512: LIST
52513: PUSH
52514: EMPTY
52515: LIST
52516: LIST
52517: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
52518: LD_ADDR_VAR 0 50
52522: PUSH
52523: LD_INT 2
52525: PUSH
52526: LD_INT 3
52528: PUSH
52529: EMPTY
52530: LIST
52531: LIST
52532: PUSH
52533: LD_INT 1
52535: PUSH
52536: LD_INT 3
52538: PUSH
52539: EMPTY
52540: LIST
52541: LIST
52542: PUSH
52543: EMPTY
52544: LIST
52545: LIST
52546: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
52547: LD_ADDR_VAR 0 51
52551: PUSH
52552: LD_INT 1
52554: NEG
52555: PUSH
52556: LD_INT 2
52558: PUSH
52559: EMPTY
52560: LIST
52561: LIST
52562: PUSH
52563: LD_INT 2
52565: NEG
52566: PUSH
52567: LD_INT 1
52569: PUSH
52570: EMPTY
52571: LIST
52572: LIST
52573: PUSH
52574: EMPTY
52575: LIST
52576: LIST
52577: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
52578: LD_ADDR_VAR 0 52
52582: PUSH
52583: LD_INT 3
52585: NEG
52586: PUSH
52587: LD_INT 1
52589: NEG
52590: PUSH
52591: EMPTY
52592: LIST
52593: LIST
52594: PUSH
52595: LD_INT 3
52597: NEG
52598: PUSH
52599: LD_INT 2
52601: NEG
52602: PUSH
52603: EMPTY
52604: LIST
52605: LIST
52606: PUSH
52607: EMPTY
52608: LIST
52609: LIST
52610: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
52611: LD_ADDR_VAR 0 53
52615: PUSH
52616: LD_INT 1
52618: NEG
52619: PUSH
52620: LD_INT 3
52622: NEG
52623: PUSH
52624: EMPTY
52625: LIST
52626: LIST
52627: PUSH
52628: LD_INT 0
52630: PUSH
52631: LD_INT 3
52633: NEG
52634: PUSH
52635: EMPTY
52636: LIST
52637: LIST
52638: PUSH
52639: LD_INT 1
52641: PUSH
52642: LD_INT 2
52644: NEG
52645: PUSH
52646: EMPTY
52647: LIST
52648: LIST
52649: PUSH
52650: EMPTY
52651: LIST
52652: LIST
52653: LIST
52654: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
52655: LD_ADDR_VAR 0 54
52659: PUSH
52660: LD_INT 2
52662: PUSH
52663: LD_INT 1
52665: NEG
52666: PUSH
52667: EMPTY
52668: LIST
52669: LIST
52670: PUSH
52671: LD_INT 3
52673: PUSH
52674: LD_INT 0
52676: PUSH
52677: EMPTY
52678: LIST
52679: LIST
52680: PUSH
52681: LD_INT 3
52683: PUSH
52684: LD_INT 1
52686: PUSH
52687: EMPTY
52688: LIST
52689: LIST
52690: PUSH
52691: EMPTY
52692: LIST
52693: LIST
52694: LIST
52695: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
52696: LD_ADDR_VAR 0 55
52700: PUSH
52701: LD_INT 3
52703: PUSH
52704: LD_INT 2
52706: PUSH
52707: EMPTY
52708: LIST
52709: LIST
52710: PUSH
52711: LD_INT 3
52713: PUSH
52714: LD_INT 3
52716: PUSH
52717: EMPTY
52718: LIST
52719: LIST
52720: PUSH
52721: LD_INT 2
52723: PUSH
52724: LD_INT 3
52726: PUSH
52727: EMPTY
52728: LIST
52729: LIST
52730: PUSH
52731: EMPTY
52732: LIST
52733: LIST
52734: LIST
52735: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
52736: LD_ADDR_VAR 0 56
52740: PUSH
52741: LD_INT 1
52743: PUSH
52744: LD_INT 3
52746: PUSH
52747: EMPTY
52748: LIST
52749: LIST
52750: PUSH
52751: LD_INT 0
52753: PUSH
52754: LD_INT 3
52756: PUSH
52757: EMPTY
52758: LIST
52759: LIST
52760: PUSH
52761: LD_INT 1
52763: NEG
52764: PUSH
52765: LD_INT 2
52767: PUSH
52768: EMPTY
52769: LIST
52770: LIST
52771: PUSH
52772: EMPTY
52773: LIST
52774: LIST
52775: LIST
52776: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52777: LD_ADDR_VAR 0 57
52781: PUSH
52782: LD_INT 2
52784: NEG
52785: PUSH
52786: LD_INT 1
52788: PUSH
52789: EMPTY
52790: LIST
52791: LIST
52792: PUSH
52793: LD_INT 3
52795: NEG
52796: PUSH
52797: LD_INT 0
52799: PUSH
52800: EMPTY
52801: LIST
52802: LIST
52803: PUSH
52804: LD_INT 3
52806: NEG
52807: PUSH
52808: LD_INT 1
52810: NEG
52811: PUSH
52812: EMPTY
52813: LIST
52814: LIST
52815: PUSH
52816: EMPTY
52817: LIST
52818: LIST
52819: LIST
52820: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52821: LD_ADDR_VAR 0 58
52825: PUSH
52826: LD_INT 2
52828: NEG
52829: PUSH
52830: LD_INT 3
52832: NEG
52833: PUSH
52834: EMPTY
52835: LIST
52836: LIST
52837: PUSH
52838: LD_INT 3
52840: NEG
52841: PUSH
52842: LD_INT 2
52844: NEG
52845: PUSH
52846: EMPTY
52847: LIST
52848: LIST
52849: PUSH
52850: LD_INT 3
52852: NEG
52853: PUSH
52854: LD_INT 3
52856: NEG
52857: PUSH
52858: EMPTY
52859: LIST
52860: LIST
52861: PUSH
52862: EMPTY
52863: LIST
52864: LIST
52865: LIST
52866: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
52867: LD_ADDR_VAR 0 59
52871: PUSH
52872: LD_INT 1
52874: NEG
52875: PUSH
52876: LD_INT 2
52878: NEG
52879: PUSH
52880: EMPTY
52881: LIST
52882: LIST
52883: PUSH
52884: LD_INT 0
52886: PUSH
52887: LD_INT 2
52889: NEG
52890: PUSH
52891: EMPTY
52892: LIST
52893: LIST
52894: PUSH
52895: LD_INT 1
52897: PUSH
52898: LD_INT 1
52900: NEG
52901: PUSH
52902: EMPTY
52903: LIST
52904: LIST
52905: PUSH
52906: EMPTY
52907: LIST
52908: LIST
52909: LIST
52910: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
52911: LD_ADDR_VAR 0 60
52915: PUSH
52916: LD_INT 1
52918: PUSH
52919: LD_INT 1
52921: NEG
52922: PUSH
52923: EMPTY
52924: LIST
52925: LIST
52926: PUSH
52927: LD_INT 2
52929: PUSH
52930: LD_INT 0
52932: PUSH
52933: EMPTY
52934: LIST
52935: LIST
52936: PUSH
52937: LD_INT 2
52939: PUSH
52940: LD_INT 1
52942: PUSH
52943: EMPTY
52944: LIST
52945: LIST
52946: PUSH
52947: EMPTY
52948: LIST
52949: LIST
52950: LIST
52951: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
52952: LD_ADDR_VAR 0 61
52956: PUSH
52957: LD_INT 2
52959: PUSH
52960: LD_INT 1
52962: PUSH
52963: EMPTY
52964: LIST
52965: LIST
52966: PUSH
52967: LD_INT 2
52969: PUSH
52970: LD_INT 2
52972: PUSH
52973: EMPTY
52974: LIST
52975: LIST
52976: PUSH
52977: LD_INT 1
52979: PUSH
52980: LD_INT 2
52982: PUSH
52983: EMPTY
52984: LIST
52985: LIST
52986: PUSH
52987: EMPTY
52988: LIST
52989: LIST
52990: LIST
52991: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
52992: LD_ADDR_VAR 0 62
52996: PUSH
52997: LD_INT 1
52999: PUSH
53000: LD_INT 2
53002: PUSH
53003: EMPTY
53004: LIST
53005: LIST
53006: PUSH
53007: LD_INT 0
53009: PUSH
53010: LD_INT 2
53012: PUSH
53013: EMPTY
53014: LIST
53015: LIST
53016: PUSH
53017: LD_INT 1
53019: NEG
53020: PUSH
53021: LD_INT 1
53023: PUSH
53024: EMPTY
53025: LIST
53026: LIST
53027: PUSH
53028: EMPTY
53029: LIST
53030: LIST
53031: LIST
53032: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
53033: LD_ADDR_VAR 0 63
53037: PUSH
53038: LD_INT 1
53040: NEG
53041: PUSH
53042: LD_INT 1
53044: PUSH
53045: EMPTY
53046: LIST
53047: LIST
53048: PUSH
53049: LD_INT 2
53051: NEG
53052: PUSH
53053: LD_INT 0
53055: PUSH
53056: EMPTY
53057: LIST
53058: LIST
53059: PUSH
53060: LD_INT 2
53062: NEG
53063: PUSH
53064: LD_INT 1
53066: NEG
53067: PUSH
53068: EMPTY
53069: LIST
53070: LIST
53071: PUSH
53072: EMPTY
53073: LIST
53074: LIST
53075: LIST
53076: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53077: LD_ADDR_VAR 0 64
53081: PUSH
53082: LD_INT 1
53084: NEG
53085: PUSH
53086: LD_INT 2
53088: NEG
53089: PUSH
53090: EMPTY
53091: LIST
53092: LIST
53093: PUSH
53094: LD_INT 2
53096: NEG
53097: PUSH
53098: LD_INT 1
53100: NEG
53101: PUSH
53102: EMPTY
53103: LIST
53104: LIST
53105: PUSH
53106: LD_INT 2
53108: NEG
53109: PUSH
53110: LD_INT 2
53112: NEG
53113: PUSH
53114: EMPTY
53115: LIST
53116: LIST
53117: PUSH
53118: EMPTY
53119: LIST
53120: LIST
53121: LIST
53122: ST_TO_ADDR
// end ; 2 :
53123: GO 56389
53125: LD_INT 2
53127: DOUBLE
53128: EQUAL
53129: IFTRUE 53133
53131: GO 56388
53133: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
53134: LD_ADDR_VAR 0 29
53138: PUSH
53139: LD_INT 4
53141: PUSH
53142: LD_INT 0
53144: PUSH
53145: EMPTY
53146: LIST
53147: LIST
53148: PUSH
53149: LD_INT 4
53151: PUSH
53152: LD_INT 1
53154: NEG
53155: PUSH
53156: EMPTY
53157: LIST
53158: LIST
53159: PUSH
53160: LD_INT 5
53162: PUSH
53163: LD_INT 0
53165: PUSH
53166: EMPTY
53167: LIST
53168: LIST
53169: PUSH
53170: LD_INT 5
53172: PUSH
53173: LD_INT 1
53175: PUSH
53176: EMPTY
53177: LIST
53178: LIST
53179: PUSH
53180: LD_INT 4
53182: PUSH
53183: LD_INT 1
53185: PUSH
53186: EMPTY
53187: LIST
53188: LIST
53189: PUSH
53190: LD_INT 3
53192: PUSH
53193: LD_INT 0
53195: PUSH
53196: EMPTY
53197: LIST
53198: LIST
53199: PUSH
53200: LD_INT 3
53202: PUSH
53203: LD_INT 1
53205: NEG
53206: PUSH
53207: EMPTY
53208: LIST
53209: LIST
53210: PUSH
53211: LD_INT 3
53213: PUSH
53214: LD_INT 2
53216: NEG
53217: PUSH
53218: EMPTY
53219: LIST
53220: LIST
53221: PUSH
53222: LD_INT 5
53224: PUSH
53225: LD_INT 2
53227: PUSH
53228: EMPTY
53229: LIST
53230: LIST
53231: PUSH
53232: LD_INT 3
53234: PUSH
53235: LD_INT 3
53237: PUSH
53238: EMPTY
53239: LIST
53240: LIST
53241: PUSH
53242: LD_INT 3
53244: PUSH
53245: LD_INT 2
53247: PUSH
53248: EMPTY
53249: LIST
53250: LIST
53251: PUSH
53252: LD_INT 4
53254: PUSH
53255: LD_INT 3
53257: PUSH
53258: EMPTY
53259: LIST
53260: LIST
53261: PUSH
53262: LD_INT 4
53264: PUSH
53265: LD_INT 4
53267: PUSH
53268: EMPTY
53269: LIST
53270: LIST
53271: PUSH
53272: LD_INT 3
53274: PUSH
53275: LD_INT 4
53277: PUSH
53278: EMPTY
53279: LIST
53280: LIST
53281: PUSH
53282: LD_INT 2
53284: PUSH
53285: LD_INT 3
53287: PUSH
53288: EMPTY
53289: LIST
53290: LIST
53291: PUSH
53292: LD_INT 2
53294: PUSH
53295: LD_INT 2
53297: PUSH
53298: EMPTY
53299: LIST
53300: LIST
53301: PUSH
53302: LD_INT 4
53304: PUSH
53305: LD_INT 2
53307: PUSH
53308: EMPTY
53309: LIST
53310: LIST
53311: PUSH
53312: LD_INT 2
53314: PUSH
53315: LD_INT 4
53317: PUSH
53318: EMPTY
53319: LIST
53320: LIST
53321: PUSH
53322: LD_INT 0
53324: PUSH
53325: LD_INT 4
53327: PUSH
53328: EMPTY
53329: LIST
53330: LIST
53331: PUSH
53332: LD_INT 0
53334: PUSH
53335: LD_INT 3
53337: PUSH
53338: EMPTY
53339: LIST
53340: LIST
53341: PUSH
53342: LD_INT 1
53344: PUSH
53345: LD_INT 4
53347: PUSH
53348: EMPTY
53349: LIST
53350: LIST
53351: PUSH
53352: LD_INT 1
53354: PUSH
53355: LD_INT 5
53357: PUSH
53358: EMPTY
53359: LIST
53360: LIST
53361: PUSH
53362: LD_INT 0
53364: PUSH
53365: LD_INT 5
53367: PUSH
53368: EMPTY
53369: LIST
53370: LIST
53371: PUSH
53372: LD_INT 1
53374: NEG
53375: PUSH
53376: LD_INT 4
53378: PUSH
53379: EMPTY
53380: LIST
53381: LIST
53382: PUSH
53383: LD_INT 1
53385: NEG
53386: PUSH
53387: LD_INT 3
53389: PUSH
53390: EMPTY
53391: LIST
53392: LIST
53393: PUSH
53394: LD_INT 2
53396: PUSH
53397: LD_INT 5
53399: PUSH
53400: EMPTY
53401: LIST
53402: LIST
53403: PUSH
53404: LD_INT 2
53406: NEG
53407: PUSH
53408: LD_INT 3
53410: PUSH
53411: EMPTY
53412: LIST
53413: LIST
53414: PUSH
53415: LD_INT 3
53417: NEG
53418: PUSH
53419: LD_INT 0
53421: PUSH
53422: EMPTY
53423: LIST
53424: LIST
53425: PUSH
53426: LD_INT 3
53428: NEG
53429: PUSH
53430: LD_INT 1
53432: NEG
53433: PUSH
53434: EMPTY
53435: LIST
53436: LIST
53437: PUSH
53438: LD_INT 2
53440: NEG
53441: PUSH
53442: LD_INT 0
53444: PUSH
53445: EMPTY
53446: LIST
53447: LIST
53448: PUSH
53449: LD_INT 2
53451: NEG
53452: PUSH
53453: LD_INT 1
53455: PUSH
53456: EMPTY
53457: LIST
53458: LIST
53459: PUSH
53460: LD_INT 3
53462: NEG
53463: PUSH
53464: LD_INT 1
53466: PUSH
53467: EMPTY
53468: LIST
53469: LIST
53470: PUSH
53471: LD_INT 4
53473: NEG
53474: PUSH
53475: LD_INT 0
53477: PUSH
53478: EMPTY
53479: LIST
53480: LIST
53481: PUSH
53482: LD_INT 4
53484: NEG
53485: PUSH
53486: LD_INT 1
53488: NEG
53489: PUSH
53490: EMPTY
53491: LIST
53492: LIST
53493: PUSH
53494: LD_INT 4
53496: NEG
53497: PUSH
53498: LD_INT 2
53500: NEG
53501: PUSH
53502: EMPTY
53503: LIST
53504: LIST
53505: PUSH
53506: LD_INT 2
53508: NEG
53509: PUSH
53510: LD_INT 2
53512: PUSH
53513: EMPTY
53514: LIST
53515: LIST
53516: PUSH
53517: LD_INT 4
53519: NEG
53520: PUSH
53521: LD_INT 4
53523: NEG
53524: PUSH
53525: EMPTY
53526: LIST
53527: LIST
53528: PUSH
53529: LD_INT 4
53531: NEG
53532: PUSH
53533: LD_INT 5
53535: NEG
53536: PUSH
53537: EMPTY
53538: LIST
53539: LIST
53540: PUSH
53541: LD_INT 3
53543: NEG
53544: PUSH
53545: LD_INT 4
53547: NEG
53548: PUSH
53549: EMPTY
53550: LIST
53551: LIST
53552: PUSH
53553: LD_INT 3
53555: NEG
53556: PUSH
53557: LD_INT 3
53559: NEG
53560: PUSH
53561: EMPTY
53562: LIST
53563: LIST
53564: PUSH
53565: LD_INT 4
53567: NEG
53568: PUSH
53569: LD_INT 3
53571: NEG
53572: PUSH
53573: EMPTY
53574: LIST
53575: LIST
53576: PUSH
53577: LD_INT 5
53579: NEG
53580: PUSH
53581: LD_INT 4
53583: NEG
53584: PUSH
53585: EMPTY
53586: LIST
53587: LIST
53588: PUSH
53589: LD_INT 5
53591: NEG
53592: PUSH
53593: LD_INT 5
53595: NEG
53596: PUSH
53597: EMPTY
53598: LIST
53599: LIST
53600: PUSH
53601: LD_INT 3
53603: NEG
53604: PUSH
53605: LD_INT 5
53607: NEG
53608: PUSH
53609: EMPTY
53610: LIST
53611: LIST
53612: PUSH
53613: LD_INT 5
53615: NEG
53616: PUSH
53617: LD_INT 3
53619: NEG
53620: PUSH
53621: EMPTY
53622: LIST
53623: LIST
53624: PUSH
53625: EMPTY
53626: LIST
53627: LIST
53628: LIST
53629: LIST
53630: LIST
53631: LIST
53632: LIST
53633: LIST
53634: LIST
53635: LIST
53636: LIST
53637: LIST
53638: LIST
53639: LIST
53640: LIST
53641: LIST
53642: LIST
53643: LIST
53644: LIST
53645: LIST
53646: LIST
53647: LIST
53648: LIST
53649: LIST
53650: LIST
53651: LIST
53652: LIST
53653: LIST
53654: LIST
53655: LIST
53656: LIST
53657: LIST
53658: LIST
53659: LIST
53660: LIST
53661: LIST
53662: LIST
53663: LIST
53664: LIST
53665: LIST
53666: LIST
53667: LIST
53668: LIST
53669: LIST
53670: LIST
53671: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
53672: LD_ADDR_VAR 0 30
53676: PUSH
53677: LD_INT 4
53679: PUSH
53680: LD_INT 4
53682: PUSH
53683: EMPTY
53684: LIST
53685: LIST
53686: PUSH
53687: LD_INT 4
53689: PUSH
53690: LD_INT 3
53692: PUSH
53693: EMPTY
53694: LIST
53695: LIST
53696: PUSH
53697: LD_INT 5
53699: PUSH
53700: LD_INT 4
53702: PUSH
53703: EMPTY
53704: LIST
53705: LIST
53706: PUSH
53707: LD_INT 5
53709: PUSH
53710: LD_INT 5
53712: PUSH
53713: EMPTY
53714: LIST
53715: LIST
53716: PUSH
53717: LD_INT 4
53719: PUSH
53720: LD_INT 5
53722: PUSH
53723: EMPTY
53724: LIST
53725: LIST
53726: PUSH
53727: LD_INT 3
53729: PUSH
53730: LD_INT 4
53732: PUSH
53733: EMPTY
53734: LIST
53735: LIST
53736: PUSH
53737: LD_INT 3
53739: PUSH
53740: LD_INT 3
53742: PUSH
53743: EMPTY
53744: LIST
53745: LIST
53746: PUSH
53747: LD_INT 5
53749: PUSH
53750: LD_INT 3
53752: PUSH
53753: EMPTY
53754: LIST
53755: LIST
53756: PUSH
53757: LD_INT 3
53759: PUSH
53760: LD_INT 5
53762: PUSH
53763: EMPTY
53764: LIST
53765: LIST
53766: PUSH
53767: LD_INT 0
53769: PUSH
53770: LD_INT 3
53772: PUSH
53773: EMPTY
53774: LIST
53775: LIST
53776: PUSH
53777: LD_INT 0
53779: PUSH
53780: LD_INT 2
53782: PUSH
53783: EMPTY
53784: LIST
53785: LIST
53786: PUSH
53787: LD_INT 1
53789: PUSH
53790: LD_INT 3
53792: PUSH
53793: EMPTY
53794: LIST
53795: LIST
53796: PUSH
53797: LD_INT 1
53799: PUSH
53800: LD_INT 4
53802: PUSH
53803: EMPTY
53804: LIST
53805: LIST
53806: PUSH
53807: LD_INT 0
53809: PUSH
53810: LD_INT 4
53812: PUSH
53813: EMPTY
53814: LIST
53815: LIST
53816: PUSH
53817: LD_INT 1
53819: NEG
53820: PUSH
53821: LD_INT 3
53823: PUSH
53824: EMPTY
53825: LIST
53826: LIST
53827: PUSH
53828: LD_INT 1
53830: NEG
53831: PUSH
53832: LD_INT 2
53834: PUSH
53835: EMPTY
53836: LIST
53837: LIST
53838: PUSH
53839: LD_INT 2
53841: PUSH
53842: LD_INT 4
53844: PUSH
53845: EMPTY
53846: LIST
53847: LIST
53848: PUSH
53849: LD_INT 2
53851: NEG
53852: PUSH
53853: LD_INT 2
53855: PUSH
53856: EMPTY
53857: LIST
53858: LIST
53859: PUSH
53860: LD_INT 4
53862: NEG
53863: PUSH
53864: LD_INT 0
53866: PUSH
53867: EMPTY
53868: LIST
53869: LIST
53870: PUSH
53871: LD_INT 4
53873: NEG
53874: PUSH
53875: LD_INT 1
53877: NEG
53878: PUSH
53879: EMPTY
53880: LIST
53881: LIST
53882: PUSH
53883: LD_INT 3
53885: NEG
53886: PUSH
53887: LD_INT 0
53889: PUSH
53890: EMPTY
53891: LIST
53892: LIST
53893: PUSH
53894: LD_INT 3
53896: NEG
53897: PUSH
53898: LD_INT 1
53900: PUSH
53901: EMPTY
53902: LIST
53903: LIST
53904: PUSH
53905: LD_INT 4
53907: NEG
53908: PUSH
53909: LD_INT 1
53911: PUSH
53912: EMPTY
53913: LIST
53914: LIST
53915: PUSH
53916: LD_INT 5
53918: NEG
53919: PUSH
53920: LD_INT 0
53922: PUSH
53923: EMPTY
53924: LIST
53925: LIST
53926: PUSH
53927: LD_INT 5
53929: NEG
53930: PUSH
53931: LD_INT 1
53933: NEG
53934: PUSH
53935: EMPTY
53936: LIST
53937: LIST
53938: PUSH
53939: LD_INT 5
53941: NEG
53942: PUSH
53943: LD_INT 2
53945: NEG
53946: PUSH
53947: EMPTY
53948: LIST
53949: LIST
53950: PUSH
53951: LD_INT 3
53953: NEG
53954: PUSH
53955: LD_INT 2
53957: PUSH
53958: EMPTY
53959: LIST
53960: LIST
53961: PUSH
53962: LD_INT 3
53964: NEG
53965: PUSH
53966: LD_INT 3
53968: NEG
53969: PUSH
53970: EMPTY
53971: LIST
53972: LIST
53973: PUSH
53974: LD_INT 3
53976: NEG
53977: PUSH
53978: LD_INT 4
53980: NEG
53981: PUSH
53982: EMPTY
53983: LIST
53984: LIST
53985: PUSH
53986: LD_INT 2
53988: NEG
53989: PUSH
53990: LD_INT 3
53992: NEG
53993: PUSH
53994: EMPTY
53995: LIST
53996: LIST
53997: PUSH
53998: LD_INT 2
54000: NEG
54001: PUSH
54002: LD_INT 2
54004: NEG
54005: PUSH
54006: EMPTY
54007: LIST
54008: LIST
54009: PUSH
54010: LD_INT 3
54012: NEG
54013: PUSH
54014: LD_INT 2
54016: NEG
54017: PUSH
54018: EMPTY
54019: LIST
54020: LIST
54021: PUSH
54022: LD_INT 4
54024: NEG
54025: PUSH
54026: LD_INT 3
54028: NEG
54029: PUSH
54030: EMPTY
54031: LIST
54032: LIST
54033: PUSH
54034: LD_INT 4
54036: NEG
54037: PUSH
54038: LD_INT 4
54040: NEG
54041: PUSH
54042: EMPTY
54043: LIST
54044: LIST
54045: PUSH
54046: LD_INT 2
54048: NEG
54049: PUSH
54050: LD_INT 4
54052: NEG
54053: PUSH
54054: EMPTY
54055: LIST
54056: LIST
54057: PUSH
54058: LD_INT 4
54060: NEG
54061: PUSH
54062: LD_INT 2
54064: NEG
54065: PUSH
54066: EMPTY
54067: LIST
54068: LIST
54069: PUSH
54070: LD_INT 0
54072: PUSH
54073: LD_INT 4
54075: NEG
54076: PUSH
54077: EMPTY
54078: LIST
54079: LIST
54080: PUSH
54081: LD_INT 0
54083: PUSH
54084: LD_INT 5
54086: NEG
54087: PUSH
54088: EMPTY
54089: LIST
54090: LIST
54091: PUSH
54092: LD_INT 1
54094: PUSH
54095: LD_INT 4
54097: NEG
54098: PUSH
54099: EMPTY
54100: LIST
54101: LIST
54102: PUSH
54103: LD_INT 1
54105: PUSH
54106: LD_INT 3
54108: NEG
54109: PUSH
54110: EMPTY
54111: LIST
54112: LIST
54113: PUSH
54114: LD_INT 0
54116: PUSH
54117: LD_INT 3
54119: NEG
54120: PUSH
54121: EMPTY
54122: LIST
54123: LIST
54124: PUSH
54125: LD_INT 1
54127: NEG
54128: PUSH
54129: LD_INT 4
54131: NEG
54132: PUSH
54133: EMPTY
54134: LIST
54135: LIST
54136: PUSH
54137: LD_INT 1
54139: NEG
54140: PUSH
54141: LD_INT 5
54143: NEG
54144: PUSH
54145: EMPTY
54146: LIST
54147: LIST
54148: PUSH
54149: LD_INT 2
54151: PUSH
54152: LD_INT 3
54154: NEG
54155: PUSH
54156: EMPTY
54157: LIST
54158: LIST
54159: PUSH
54160: LD_INT 2
54162: NEG
54163: PUSH
54164: LD_INT 5
54166: NEG
54167: PUSH
54168: EMPTY
54169: LIST
54170: LIST
54171: PUSH
54172: EMPTY
54173: LIST
54174: LIST
54175: LIST
54176: LIST
54177: LIST
54178: LIST
54179: LIST
54180: LIST
54181: LIST
54182: LIST
54183: LIST
54184: LIST
54185: LIST
54186: LIST
54187: LIST
54188: LIST
54189: LIST
54190: LIST
54191: LIST
54192: LIST
54193: LIST
54194: LIST
54195: LIST
54196: LIST
54197: LIST
54198: LIST
54199: LIST
54200: LIST
54201: LIST
54202: LIST
54203: LIST
54204: LIST
54205: LIST
54206: LIST
54207: LIST
54208: LIST
54209: LIST
54210: LIST
54211: LIST
54212: LIST
54213: LIST
54214: LIST
54215: LIST
54216: LIST
54217: LIST
54218: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
54219: LD_ADDR_VAR 0 31
54223: PUSH
54224: LD_INT 0
54226: PUSH
54227: LD_INT 4
54229: PUSH
54230: EMPTY
54231: LIST
54232: LIST
54233: PUSH
54234: LD_INT 0
54236: PUSH
54237: LD_INT 3
54239: PUSH
54240: EMPTY
54241: LIST
54242: LIST
54243: PUSH
54244: LD_INT 1
54246: PUSH
54247: LD_INT 4
54249: PUSH
54250: EMPTY
54251: LIST
54252: LIST
54253: PUSH
54254: LD_INT 1
54256: PUSH
54257: LD_INT 5
54259: PUSH
54260: EMPTY
54261: LIST
54262: LIST
54263: PUSH
54264: LD_INT 0
54266: PUSH
54267: LD_INT 5
54269: PUSH
54270: EMPTY
54271: LIST
54272: LIST
54273: PUSH
54274: LD_INT 1
54276: NEG
54277: PUSH
54278: LD_INT 4
54280: PUSH
54281: EMPTY
54282: LIST
54283: LIST
54284: PUSH
54285: LD_INT 1
54287: NEG
54288: PUSH
54289: LD_INT 3
54291: PUSH
54292: EMPTY
54293: LIST
54294: LIST
54295: PUSH
54296: LD_INT 2
54298: PUSH
54299: LD_INT 5
54301: PUSH
54302: EMPTY
54303: LIST
54304: LIST
54305: PUSH
54306: LD_INT 2
54308: NEG
54309: PUSH
54310: LD_INT 3
54312: PUSH
54313: EMPTY
54314: LIST
54315: LIST
54316: PUSH
54317: LD_INT 3
54319: NEG
54320: PUSH
54321: LD_INT 0
54323: PUSH
54324: EMPTY
54325: LIST
54326: LIST
54327: PUSH
54328: LD_INT 3
54330: NEG
54331: PUSH
54332: LD_INT 1
54334: NEG
54335: PUSH
54336: EMPTY
54337: LIST
54338: LIST
54339: PUSH
54340: LD_INT 2
54342: NEG
54343: PUSH
54344: LD_INT 0
54346: PUSH
54347: EMPTY
54348: LIST
54349: LIST
54350: PUSH
54351: LD_INT 2
54353: NEG
54354: PUSH
54355: LD_INT 1
54357: PUSH
54358: EMPTY
54359: LIST
54360: LIST
54361: PUSH
54362: LD_INT 3
54364: NEG
54365: PUSH
54366: LD_INT 1
54368: PUSH
54369: EMPTY
54370: LIST
54371: LIST
54372: PUSH
54373: LD_INT 4
54375: NEG
54376: PUSH
54377: LD_INT 0
54379: PUSH
54380: EMPTY
54381: LIST
54382: LIST
54383: PUSH
54384: LD_INT 4
54386: NEG
54387: PUSH
54388: LD_INT 1
54390: NEG
54391: PUSH
54392: EMPTY
54393: LIST
54394: LIST
54395: PUSH
54396: LD_INT 4
54398: NEG
54399: PUSH
54400: LD_INT 2
54402: NEG
54403: PUSH
54404: EMPTY
54405: LIST
54406: LIST
54407: PUSH
54408: LD_INT 2
54410: NEG
54411: PUSH
54412: LD_INT 2
54414: PUSH
54415: EMPTY
54416: LIST
54417: LIST
54418: PUSH
54419: LD_INT 4
54421: NEG
54422: PUSH
54423: LD_INT 4
54425: NEG
54426: PUSH
54427: EMPTY
54428: LIST
54429: LIST
54430: PUSH
54431: LD_INT 4
54433: NEG
54434: PUSH
54435: LD_INT 5
54437: NEG
54438: PUSH
54439: EMPTY
54440: LIST
54441: LIST
54442: PUSH
54443: LD_INT 3
54445: NEG
54446: PUSH
54447: LD_INT 4
54449: NEG
54450: PUSH
54451: EMPTY
54452: LIST
54453: LIST
54454: PUSH
54455: LD_INT 3
54457: NEG
54458: PUSH
54459: LD_INT 3
54461: NEG
54462: PUSH
54463: EMPTY
54464: LIST
54465: LIST
54466: PUSH
54467: LD_INT 4
54469: NEG
54470: PUSH
54471: LD_INT 3
54473: NEG
54474: PUSH
54475: EMPTY
54476: LIST
54477: LIST
54478: PUSH
54479: LD_INT 5
54481: NEG
54482: PUSH
54483: LD_INT 4
54485: NEG
54486: PUSH
54487: EMPTY
54488: LIST
54489: LIST
54490: PUSH
54491: LD_INT 5
54493: NEG
54494: PUSH
54495: LD_INT 5
54497: NEG
54498: PUSH
54499: EMPTY
54500: LIST
54501: LIST
54502: PUSH
54503: LD_INT 3
54505: NEG
54506: PUSH
54507: LD_INT 5
54509: NEG
54510: PUSH
54511: EMPTY
54512: LIST
54513: LIST
54514: PUSH
54515: LD_INT 5
54517: NEG
54518: PUSH
54519: LD_INT 3
54521: NEG
54522: PUSH
54523: EMPTY
54524: LIST
54525: LIST
54526: PUSH
54527: LD_INT 0
54529: PUSH
54530: LD_INT 3
54532: NEG
54533: PUSH
54534: EMPTY
54535: LIST
54536: LIST
54537: PUSH
54538: LD_INT 0
54540: PUSH
54541: LD_INT 4
54543: NEG
54544: PUSH
54545: EMPTY
54546: LIST
54547: LIST
54548: PUSH
54549: LD_INT 1
54551: PUSH
54552: LD_INT 3
54554: NEG
54555: PUSH
54556: EMPTY
54557: LIST
54558: LIST
54559: PUSH
54560: LD_INT 1
54562: PUSH
54563: LD_INT 2
54565: NEG
54566: PUSH
54567: EMPTY
54568: LIST
54569: LIST
54570: PUSH
54571: LD_INT 0
54573: PUSH
54574: LD_INT 2
54576: NEG
54577: PUSH
54578: EMPTY
54579: LIST
54580: LIST
54581: PUSH
54582: LD_INT 1
54584: NEG
54585: PUSH
54586: LD_INT 3
54588: NEG
54589: PUSH
54590: EMPTY
54591: LIST
54592: LIST
54593: PUSH
54594: LD_INT 1
54596: NEG
54597: PUSH
54598: LD_INT 4
54600: NEG
54601: PUSH
54602: EMPTY
54603: LIST
54604: LIST
54605: PUSH
54606: LD_INT 2
54608: PUSH
54609: LD_INT 2
54611: NEG
54612: PUSH
54613: EMPTY
54614: LIST
54615: LIST
54616: PUSH
54617: LD_INT 2
54619: NEG
54620: PUSH
54621: LD_INT 4
54623: NEG
54624: PUSH
54625: EMPTY
54626: LIST
54627: LIST
54628: PUSH
54629: LD_INT 4
54631: PUSH
54632: LD_INT 0
54634: PUSH
54635: EMPTY
54636: LIST
54637: LIST
54638: PUSH
54639: LD_INT 4
54641: PUSH
54642: LD_INT 1
54644: NEG
54645: PUSH
54646: EMPTY
54647: LIST
54648: LIST
54649: PUSH
54650: LD_INT 5
54652: PUSH
54653: LD_INT 0
54655: PUSH
54656: EMPTY
54657: LIST
54658: LIST
54659: PUSH
54660: LD_INT 5
54662: PUSH
54663: LD_INT 1
54665: PUSH
54666: EMPTY
54667: LIST
54668: LIST
54669: PUSH
54670: LD_INT 4
54672: PUSH
54673: LD_INT 1
54675: PUSH
54676: EMPTY
54677: LIST
54678: LIST
54679: PUSH
54680: LD_INT 3
54682: PUSH
54683: LD_INT 0
54685: PUSH
54686: EMPTY
54687: LIST
54688: LIST
54689: PUSH
54690: LD_INT 3
54692: PUSH
54693: LD_INT 1
54695: NEG
54696: PUSH
54697: EMPTY
54698: LIST
54699: LIST
54700: PUSH
54701: LD_INT 3
54703: PUSH
54704: LD_INT 2
54706: NEG
54707: PUSH
54708: EMPTY
54709: LIST
54710: LIST
54711: PUSH
54712: LD_INT 5
54714: PUSH
54715: LD_INT 2
54717: PUSH
54718: EMPTY
54719: LIST
54720: LIST
54721: PUSH
54722: EMPTY
54723: LIST
54724: LIST
54725: LIST
54726: LIST
54727: LIST
54728: LIST
54729: LIST
54730: LIST
54731: LIST
54732: LIST
54733: LIST
54734: LIST
54735: LIST
54736: LIST
54737: LIST
54738: LIST
54739: LIST
54740: LIST
54741: LIST
54742: LIST
54743: LIST
54744: LIST
54745: LIST
54746: LIST
54747: LIST
54748: LIST
54749: LIST
54750: LIST
54751: LIST
54752: LIST
54753: LIST
54754: LIST
54755: LIST
54756: LIST
54757: LIST
54758: LIST
54759: LIST
54760: LIST
54761: LIST
54762: LIST
54763: LIST
54764: LIST
54765: LIST
54766: LIST
54767: LIST
54768: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
54769: LD_ADDR_VAR 0 32
54773: PUSH
54774: LD_INT 4
54776: NEG
54777: PUSH
54778: LD_INT 0
54780: PUSH
54781: EMPTY
54782: LIST
54783: LIST
54784: PUSH
54785: LD_INT 4
54787: NEG
54788: PUSH
54789: LD_INT 1
54791: NEG
54792: PUSH
54793: EMPTY
54794: LIST
54795: LIST
54796: PUSH
54797: LD_INT 3
54799: NEG
54800: PUSH
54801: LD_INT 0
54803: PUSH
54804: EMPTY
54805: LIST
54806: LIST
54807: PUSH
54808: LD_INT 3
54810: NEG
54811: PUSH
54812: LD_INT 1
54814: PUSH
54815: EMPTY
54816: LIST
54817: LIST
54818: PUSH
54819: LD_INT 4
54821: NEG
54822: PUSH
54823: LD_INT 1
54825: PUSH
54826: EMPTY
54827: LIST
54828: LIST
54829: PUSH
54830: LD_INT 5
54832: NEG
54833: PUSH
54834: LD_INT 0
54836: PUSH
54837: EMPTY
54838: LIST
54839: LIST
54840: PUSH
54841: LD_INT 5
54843: NEG
54844: PUSH
54845: LD_INT 1
54847: NEG
54848: PUSH
54849: EMPTY
54850: LIST
54851: LIST
54852: PUSH
54853: LD_INT 5
54855: NEG
54856: PUSH
54857: LD_INT 2
54859: NEG
54860: PUSH
54861: EMPTY
54862: LIST
54863: LIST
54864: PUSH
54865: LD_INT 3
54867: NEG
54868: PUSH
54869: LD_INT 2
54871: PUSH
54872: EMPTY
54873: LIST
54874: LIST
54875: PUSH
54876: LD_INT 3
54878: NEG
54879: PUSH
54880: LD_INT 3
54882: NEG
54883: PUSH
54884: EMPTY
54885: LIST
54886: LIST
54887: PUSH
54888: LD_INT 3
54890: NEG
54891: PUSH
54892: LD_INT 4
54894: NEG
54895: PUSH
54896: EMPTY
54897: LIST
54898: LIST
54899: PUSH
54900: LD_INT 2
54902: NEG
54903: PUSH
54904: LD_INT 3
54906: NEG
54907: PUSH
54908: EMPTY
54909: LIST
54910: LIST
54911: PUSH
54912: LD_INT 2
54914: NEG
54915: PUSH
54916: LD_INT 2
54918: NEG
54919: PUSH
54920: EMPTY
54921: LIST
54922: LIST
54923: PUSH
54924: LD_INT 3
54926: NEG
54927: PUSH
54928: LD_INT 2
54930: NEG
54931: PUSH
54932: EMPTY
54933: LIST
54934: LIST
54935: PUSH
54936: LD_INT 4
54938: NEG
54939: PUSH
54940: LD_INT 3
54942: NEG
54943: PUSH
54944: EMPTY
54945: LIST
54946: LIST
54947: PUSH
54948: LD_INT 4
54950: NEG
54951: PUSH
54952: LD_INT 4
54954: NEG
54955: PUSH
54956: EMPTY
54957: LIST
54958: LIST
54959: PUSH
54960: LD_INT 2
54962: NEG
54963: PUSH
54964: LD_INT 4
54966: NEG
54967: PUSH
54968: EMPTY
54969: LIST
54970: LIST
54971: PUSH
54972: LD_INT 4
54974: NEG
54975: PUSH
54976: LD_INT 2
54978: NEG
54979: PUSH
54980: EMPTY
54981: LIST
54982: LIST
54983: PUSH
54984: LD_INT 0
54986: PUSH
54987: LD_INT 4
54989: NEG
54990: PUSH
54991: EMPTY
54992: LIST
54993: LIST
54994: PUSH
54995: LD_INT 0
54997: PUSH
54998: LD_INT 5
55000: NEG
55001: PUSH
55002: EMPTY
55003: LIST
55004: LIST
55005: PUSH
55006: LD_INT 1
55008: PUSH
55009: LD_INT 4
55011: NEG
55012: PUSH
55013: EMPTY
55014: LIST
55015: LIST
55016: PUSH
55017: LD_INT 1
55019: PUSH
55020: LD_INT 3
55022: NEG
55023: PUSH
55024: EMPTY
55025: LIST
55026: LIST
55027: PUSH
55028: LD_INT 0
55030: PUSH
55031: LD_INT 3
55033: NEG
55034: PUSH
55035: EMPTY
55036: LIST
55037: LIST
55038: PUSH
55039: LD_INT 1
55041: NEG
55042: PUSH
55043: LD_INT 4
55045: NEG
55046: PUSH
55047: EMPTY
55048: LIST
55049: LIST
55050: PUSH
55051: LD_INT 1
55053: NEG
55054: PUSH
55055: LD_INT 5
55057: NEG
55058: PUSH
55059: EMPTY
55060: LIST
55061: LIST
55062: PUSH
55063: LD_INT 2
55065: PUSH
55066: LD_INT 3
55068: NEG
55069: PUSH
55070: EMPTY
55071: LIST
55072: LIST
55073: PUSH
55074: LD_INT 2
55076: NEG
55077: PUSH
55078: LD_INT 5
55080: NEG
55081: PUSH
55082: EMPTY
55083: LIST
55084: LIST
55085: PUSH
55086: LD_INT 3
55088: PUSH
55089: LD_INT 0
55091: PUSH
55092: EMPTY
55093: LIST
55094: LIST
55095: PUSH
55096: LD_INT 3
55098: PUSH
55099: LD_INT 1
55101: NEG
55102: PUSH
55103: EMPTY
55104: LIST
55105: LIST
55106: PUSH
55107: LD_INT 4
55109: PUSH
55110: LD_INT 0
55112: PUSH
55113: EMPTY
55114: LIST
55115: LIST
55116: PUSH
55117: LD_INT 4
55119: PUSH
55120: LD_INT 1
55122: PUSH
55123: EMPTY
55124: LIST
55125: LIST
55126: PUSH
55127: LD_INT 3
55129: PUSH
55130: LD_INT 1
55132: PUSH
55133: EMPTY
55134: LIST
55135: LIST
55136: PUSH
55137: LD_INT 2
55139: PUSH
55140: LD_INT 0
55142: PUSH
55143: EMPTY
55144: LIST
55145: LIST
55146: PUSH
55147: LD_INT 2
55149: PUSH
55150: LD_INT 1
55152: NEG
55153: PUSH
55154: EMPTY
55155: LIST
55156: LIST
55157: PUSH
55158: LD_INT 2
55160: PUSH
55161: LD_INT 2
55163: NEG
55164: PUSH
55165: EMPTY
55166: LIST
55167: LIST
55168: PUSH
55169: LD_INT 4
55171: PUSH
55172: LD_INT 2
55174: PUSH
55175: EMPTY
55176: LIST
55177: LIST
55178: PUSH
55179: LD_INT 4
55181: PUSH
55182: LD_INT 4
55184: PUSH
55185: EMPTY
55186: LIST
55187: LIST
55188: PUSH
55189: LD_INT 4
55191: PUSH
55192: LD_INT 3
55194: PUSH
55195: EMPTY
55196: LIST
55197: LIST
55198: PUSH
55199: LD_INT 5
55201: PUSH
55202: LD_INT 4
55204: PUSH
55205: EMPTY
55206: LIST
55207: LIST
55208: PUSH
55209: LD_INT 5
55211: PUSH
55212: LD_INT 5
55214: PUSH
55215: EMPTY
55216: LIST
55217: LIST
55218: PUSH
55219: LD_INT 4
55221: PUSH
55222: LD_INT 5
55224: PUSH
55225: EMPTY
55226: LIST
55227: LIST
55228: PUSH
55229: LD_INT 3
55231: PUSH
55232: LD_INT 4
55234: PUSH
55235: EMPTY
55236: LIST
55237: LIST
55238: PUSH
55239: LD_INT 3
55241: PUSH
55242: LD_INT 3
55244: PUSH
55245: EMPTY
55246: LIST
55247: LIST
55248: PUSH
55249: LD_INT 5
55251: PUSH
55252: LD_INT 3
55254: PUSH
55255: EMPTY
55256: LIST
55257: LIST
55258: PUSH
55259: LD_INT 3
55261: PUSH
55262: LD_INT 5
55264: PUSH
55265: EMPTY
55266: LIST
55267: LIST
55268: PUSH
55269: EMPTY
55270: LIST
55271: LIST
55272: LIST
55273: LIST
55274: LIST
55275: LIST
55276: LIST
55277: LIST
55278: LIST
55279: LIST
55280: LIST
55281: LIST
55282: LIST
55283: LIST
55284: LIST
55285: LIST
55286: LIST
55287: LIST
55288: LIST
55289: LIST
55290: LIST
55291: LIST
55292: LIST
55293: LIST
55294: LIST
55295: LIST
55296: LIST
55297: LIST
55298: LIST
55299: LIST
55300: LIST
55301: LIST
55302: LIST
55303: LIST
55304: LIST
55305: LIST
55306: LIST
55307: LIST
55308: LIST
55309: LIST
55310: LIST
55311: LIST
55312: LIST
55313: LIST
55314: LIST
55315: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
55316: LD_ADDR_VAR 0 33
55320: PUSH
55321: LD_INT 4
55323: NEG
55324: PUSH
55325: LD_INT 4
55327: NEG
55328: PUSH
55329: EMPTY
55330: LIST
55331: LIST
55332: PUSH
55333: LD_INT 4
55335: NEG
55336: PUSH
55337: LD_INT 5
55339: NEG
55340: PUSH
55341: EMPTY
55342: LIST
55343: LIST
55344: PUSH
55345: LD_INT 3
55347: NEG
55348: PUSH
55349: LD_INT 4
55351: NEG
55352: PUSH
55353: EMPTY
55354: LIST
55355: LIST
55356: PUSH
55357: LD_INT 3
55359: NEG
55360: PUSH
55361: LD_INT 3
55363: NEG
55364: PUSH
55365: EMPTY
55366: LIST
55367: LIST
55368: PUSH
55369: LD_INT 4
55371: NEG
55372: PUSH
55373: LD_INT 3
55375: NEG
55376: PUSH
55377: EMPTY
55378: LIST
55379: LIST
55380: PUSH
55381: LD_INT 5
55383: NEG
55384: PUSH
55385: LD_INT 4
55387: NEG
55388: PUSH
55389: EMPTY
55390: LIST
55391: LIST
55392: PUSH
55393: LD_INT 5
55395: NEG
55396: PUSH
55397: LD_INT 5
55399: NEG
55400: PUSH
55401: EMPTY
55402: LIST
55403: LIST
55404: PUSH
55405: LD_INT 3
55407: NEG
55408: PUSH
55409: LD_INT 5
55411: NEG
55412: PUSH
55413: EMPTY
55414: LIST
55415: LIST
55416: PUSH
55417: LD_INT 5
55419: NEG
55420: PUSH
55421: LD_INT 3
55423: NEG
55424: PUSH
55425: EMPTY
55426: LIST
55427: LIST
55428: PUSH
55429: LD_INT 0
55431: PUSH
55432: LD_INT 3
55434: NEG
55435: PUSH
55436: EMPTY
55437: LIST
55438: LIST
55439: PUSH
55440: LD_INT 0
55442: PUSH
55443: LD_INT 4
55445: NEG
55446: PUSH
55447: EMPTY
55448: LIST
55449: LIST
55450: PUSH
55451: LD_INT 1
55453: PUSH
55454: LD_INT 3
55456: NEG
55457: PUSH
55458: EMPTY
55459: LIST
55460: LIST
55461: PUSH
55462: LD_INT 1
55464: PUSH
55465: LD_INT 2
55467: NEG
55468: PUSH
55469: EMPTY
55470: LIST
55471: LIST
55472: PUSH
55473: LD_INT 0
55475: PUSH
55476: LD_INT 2
55478: NEG
55479: PUSH
55480: EMPTY
55481: LIST
55482: LIST
55483: PUSH
55484: LD_INT 1
55486: NEG
55487: PUSH
55488: LD_INT 3
55490: NEG
55491: PUSH
55492: EMPTY
55493: LIST
55494: LIST
55495: PUSH
55496: LD_INT 1
55498: NEG
55499: PUSH
55500: LD_INT 4
55502: NEG
55503: PUSH
55504: EMPTY
55505: LIST
55506: LIST
55507: PUSH
55508: LD_INT 2
55510: PUSH
55511: LD_INT 2
55513: NEG
55514: PUSH
55515: EMPTY
55516: LIST
55517: LIST
55518: PUSH
55519: LD_INT 2
55521: NEG
55522: PUSH
55523: LD_INT 4
55525: NEG
55526: PUSH
55527: EMPTY
55528: LIST
55529: LIST
55530: PUSH
55531: LD_INT 4
55533: PUSH
55534: LD_INT 0
55536: PUSH
55537: EMPTY
55538: LIST
55539: LIST
55540: PUSH
55541: LD_INT 4
55543: PUSH
55544: LD_INT 1
55546: NEG
55547: PUSH
55548: EMPTY
55549: LIST
55550: LIST
55551: PUSH
55552: LD_INT 5
55554: PUSH
55555: LD_INT 0
55557: PUSH
55558: EMPTY
55559: LIST
55560: LIST
55561: PUSH
55562: LD_INT 5
55564: PUSH
55565: LD_INT 1
55567: PUSH
55568: EMPTY
55569: LIST
55570: LIST
55571: PUSH
55572: LD_INT 4
55574: PUSH
55575: LD_INT 1
55577: PUSH
55578: EMPTY
55579: LIST
55580: LIST
55581: PUSH
55582: LD_INT 3
55584: PUSH
55585: LD_INT 0
55587: PUSH
55588: EMPTY
55589: LIST
55590: LIST
55591: PUSH
55592: LD_INT 3
55594: PUSH
55595: LD_INT 1
55597: NEG
55598: PUSH
55599: EMPTY
55600: LIST
55601: LIST
55602: PUSH
55603: LD_INT 3
55605: PUSH
55606: LD_INT 2
55608: NEG
55609: PUSH
55610: EMPTY
55611: LIST
55612: LIST
55613: PUSH
55614: LD_INT 5
55616: PUSH
55617: LD_INT 2
55619: PUSH
55620: EMPTY
55621: LIST
55622: LIST
55623: PUSH
55624: LD_INT 3
55626: PUSH
55627: LD_INT 3
55629: PUSH
55630: EMPTY
55631: LIST
55632: LIST
55633: PUSH
55634: LD_INT 3
55636: PUSH
55637: LD_INT 2
55639: PUSH
55640: EMPTY
55641: LIST
55642: LIST
55643: PUSH
55644: LD_INT 4
55646: PUSH
55647: LD_INT 3
55649: PUSH
55650: EMPTY
55651: LIST
55652: LIST
55653: PUSH
55654: LD_INT 4
55656: PUSH
55657: LD_INT 4
55659: PUSH
55660: EMPTY
55661: LIST
55662: LIST
55663: PUSH
55664: LD_INT 3
55666: PUSH
55667: LD_INT 4
55669: PUSH
55670: EMPTY
55671: LIST
55672: LIST
55673: PUSH
55674: LD_INT 2
55676: PUSH
55677: LD_INT 3
55679: PUSH
55680: EMPTY
55681: LIST
55682: LIST
55683: PUSH
55684: LD_INT 2
55686: PUSH
55687: LD_INT 2
55689: PUSH
55690: EMPTY
55691: LIST
55692: LIST
55693: PUSH
55694: LD_INT 4
55696: PUSH
55697: LD_INT 2
55699: PUSH
55700: EMPTY
55701: LIST
55702: LIST
55703: PUSH
55704: LD_INT 2
55706: PUSH
55707: LD_INT 4
55709: PUSH
55710: EMPTY
55711: LIST
55712: LIST
55713: PUSH
55714: LD_INT 0
55716: PUSH
55717: LD_INT 4
55719: PUSH
55720: EMPTY
55721: LIST
55722: LIST
55723: PUSH
55724: LD_INT 0
55726: PUSH
55727: LD_INT 3
55729: PUSH
55730: EMPTY
55731: LIST
55732: LIST
55733: PUSH
55734: LD_INT 1
55736: PUSH
55737: LD_INT 4
55739: PUSH
55740: EMPTY
55741: LIST
55742: LIST
55743: PUSH
55744: LD_INT 1
55746: PUSH
55747: LD_INT 5
55749: PUSH
55750: EMPTY
55751: LIST
55752: LIST
55753: PUSH
55754: LD_INT 0
55756: PUSH
55757: LD_INT 5
55759: PUSH
55760: EMPTY
55761: LIST
55762: LIST
55763: PUSH
55764: LD_INT 1
55766: NEG
55767: PUSH
55768: LD_INT 4
55770: PUSH
55771: EMPTY
55772: LIST
55773: LIST
55774: PUSH
55775: LD_INT 1
55777: NEG
55778: PUSH
55779: LD_INT 3
55781: PUSH
55782: EMPTY
55783: LIST
55784: LIST
55785: PUSH
55786: LD_INT 2
55788: PUSH
55789: LD_INT 5
55791: PUSH
55792: EMPTY
55793: LIST
55794: LIST
55795: PUSH
55796: LD_INT 2
55798: NEG
55799: PUSH
55800: LD_INT 3
55802: PUSH
55803: EMPTY
55804: LIST
55805: LIST
55806: PUSH
55807: EMPTY
55808: LIST
55809: LIST
55810: LIST
55811: LIST
55812: LIST
55813: LIST
55814: LIST
55815: LIST
55816: LIST
55817: LIST
55818: LIST
55819: LIST
55820: LIST
55821: LIST
55822: LIST
55823: LIST
55824: LIST
55825: LIST
55826: LIST
55827: LIST
55828: LIST
55829: LIST
55830: LIST
55831: LIST
55832: LIST
55833: LIST
55834: LIST
55835: LIST
55836: LIST
55837: LIST
55838: LIST
55839: LIST
55840: LIST
55841: LIST
55842: LIST
55843: LIST
55844: LIST
55845: LIST
55846: LIST
55847: LIST
55848: LIST
55849: LIST
55850: LIST
55851: LIST
55852: LIST
55853: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
55854: LD_ADDR_VAR 0 34
55858: PUSH
55859: LD_INT 0
55861: PUSH
55862: LD_INT 4
55864: NEG
55865: PUSH
55866: EMPTY
55867: LIST
55868: LIST
55869: PUSH
55870: LD_INT 0
55872: PUSH
55873: LD_INT 5
55875: NEG
55876: PUSH
55877: EMPTY
55878: LIST
55879: LIST
55880: PUSH
55881: LD_INT 1
55883: PUSH
55884: LD_INT 4
55886: NEG
55887: PUSH
55888: EMPTY
55889: LIST
55890: LIST
55891: PUSH
55892: LD_INT 1
55894: PUSH
55895: LD_INT 3
55897: NEG
55898: PUSH
55899: EMPTY
55900: LIST
55901: LIST
55902: PUSH
55903: LD_INT 0
55905: PUSH
55906: LD_INT 3
55908: NEG
55909: PUSH
55910: EMPTY
55911: LIST
55912: LIST
55913: PUSH
55914: LD_INT 1
55916: NEG
55917: PUSH
55918: LD_INT 4
55920: NEG
55921: PUSH
55922: EMPTY
55923: LIST
55924: LIST
55925: PUSH
55926: LD_INT 1
55928: NEG
55929: PUSH
55930: LD_INT 5
55932: NEG
55933: PUSH
55934: EMPTY
55935: LIST
55936: LIST
55937: PUSH
55938: LD_INT 2
55940: PUSH
55941: LD_INT 3
55943: NEG
55944: PUSH
55945: EMPTY
55946: LIST
55947: LIST
55948: PUSH
55949: LD_INT 2
55951: NEG
55952: PUSH
55953: LD_INT 5
55955: NEG
55956: PUSH
55957: EMPTY
55958: LIST
55959: LIST
55960: PUSH
55961: LD_INT 3
55963: PUSH
55964: LD_INT 0
55966: PUSH
55967: EMPTY
55968: LIST
55969: LIST
55970: PUSH
55971: LD_INT 3
55973: PUSH
55974: LD_INT 1
55976: NEG
55977: PUSH
55978: EMPTY
55979: LIST
55980: LIST
55981: PUSH
55982: LD_INT 4
55984: PUSH
55985: LD_INT 0
55987: PUSH
55988: EMPTY
55989: LIST
55990: LIST
55991: PUSH
55992: LD_INT 4
55994: PUSH
55995: LD_INT 1
55997: PUSH
55998: EMPTY
55999: LIST
56000: LIST
56001: PUSH
56002: LD_INT 3
56004: PUSH
56005: LD_INT 1
56007: PUSH
56008: EMPTY
56009: LIST
56010: LIST
56011: PUSH
56012: LD_INT 2
56014: PUSH
56015: LD_INT 0
56017: PUSH
56018: EMPTY
56019: LIST
56020: LIST
56021: PUSH
56022: LD_INT 2
56024: PUSH
56025: LD_INT 1
56027: NEG
56028: PUSH
56029: EMPTY
56030: LIST
56031: LIST
56032: PUSH
56033: LD_INT 2
56035: PUSH
56036: LD_INT 2
56038: NEG
56039: PUSH
56040: EMPTY
56041: LIST
56042: LIST
56043: PUSH
56044: LD_INT 4
56046: PUSH
56047: LD_INT 2
56049: PUSH
56050: EMPTY
56051: LIST
56052: LIST
56053: PUSH
56054: LD_INT 4
56056: PUSH
56057: LD_INT 4
56059: PUSH
56060: EMPTY
56061: LIST
56062: LIST
56063: PUSH
56064: LD_INT 4
56066: PUSH
56067: LD_INT 3
56069: PUSH
56070: EMPTY
56071: LIST
56072: LIST
56073: PUSH
56074: LD_INT 5
56076: PUSH
56077: LD_INT 4
56079: PUSH
56080: EMPTY
56081: LIST
56082: LIST
56083: PUSH
56084: LD_INT 5
56086: PUSH
56087: LD_INT 5
56089: PUSH
56090: EMPTY
56091: LIST
56092: LIST
56093: PUSH
56094: LD_INT 4
56096: PUSH
56097: LD_INT 5
56099: PUSH
56100: EMPTY
56101: LIST
56102: LIST
56103: PUSH
56104: LD_INT 3
56106: PUSH
56107: LD_INT 4
56109: PUSH
56110: EMPTY
56111: LIST
56112: LIST
56113: PUSH
56114: LD_INT 3
56116: PUSH
56117: LD_INT 3
56119: PUSH
56120: EMPTY
56121: LIST
56122: LIST
56123: PUSH
56124: LD_INT 5
56126: PUSH
56127: LD_INT 3
56129: PUSH
56130: EMPTY
56131: LIST
56132: LIST
56133: PUSH
56134: LD_INT 3
56136: PUSH
56137: LD_INT 5
56139: PUSH
56140: EMPTY
56141: LIST
56142: LIST
56143: PUSH
56144: LD_INT 0
56146: PUSH
56147: LD_INT 3
56149: PUSH
56150: EMPTY
56151: LIST
56152: LIST
56153: PUSH
56154: LD_INT 0
56156: PUSH
56157: LD_INT 2
56159: PUSH
56160: EMPTY
56161: LIST
56162: LIST
56163: PUSH
56164: LD_INT 1
56166: PUSH
56167: LD_INT 3
56169: PUSH
56170: EMPTY
56171: LIST
56172: LIST
56173: PUSH
56174: LD_INT 1
56176: PUSH
56177: LD_INT 4
56179: PUSH
56180: EMPTY
56181: LIST
56182: LIST
56183: PUSH
56184: LD_INT 0
56186: PUSH
56187: LD_INT 4
56189: PUSH
56190: EMPTY
56191: LIST
56192: LIST
56193: PUSH
56194: LD_INT 1
56196: NEG
56197: PUSH
56198: LD_INT 3
56200: PUSH
56201: EMPTY
56202: LIST
56203: LIST
56204: PUSH
56205: LD_INT 1
56207: NEG
56208: PUSH
56209: LD_INT 2
56211: PUSH
56212: EMPTY
56213: LIST
56214: LIST
56215: PUSH
56216: LD_INT 2
56218: PUSH
56219: LD_INT 4
56221: PUSH
56222: EMPTY
56223: LIST
56224: LIST
56225: PUSH
56226: LD_INT 2
56228: NEG
56229: PUSH
56230: LD_INT 2
56232: PUSH
56233: EMPTY
56234: LIST
56235: LIST
56236: PUSH
56237: LD_INT 4
56239: NEG
56240: PUSH
56241: LD_INT 0
56243: PUSH
56244: EMPTY
56245: LIST
56246: LIST
56247: PUSH
56248: LD_INT 4
56250: NEG
56251: PUSH
56252: LD_INT 1
56254: NEG
56255: PUSH
56256: EMPTY
56257: LIST
56258: LIST
56259: PUSH
56260: LD_INT 3
56262: NEG
56263: PUSH
56264: LD_INT 0
56266: PUSH
56267: EMPTY
56268: LIST
56269: LIST
56270: PUSH
56271: LD_INT 3
56273: NEG
56274: PUSH
56275: LD_INT 1
56277: PUSH
56278: EMPTY
56279: LIST
56280: LIST
56281: PUSH
56282: LD_INT 4
56284: NEG
56285: PUSH
56286: LD_INT 1
56288: PUSH
56289: EMPTY
56290: LIST
56291: LIST
56292: PUSH
56293: LD_INT 5
56295: NEG
56296: PUSH
56297: LD_INT 0
56299: PUSH
56300: EMPTY
56301: LIST
56302: LIST
56303: PUSH
56304: LD_INT 5
56306: NEG
56307: PUSH
56308: LD_INT 1
56310: NEG
56311: PUSH
56312: EMPTY
56313: LIST
56314: LIST
56315: PUSH
56316: LD_INT 5
56318: NEG
56319: PUSH
56320: LD_INT 2
56322: NEG
56323: PUSH
56324: EMPTY
56325: LIST
56326: LIST
56327: PUSH
56328: LD_INT 3
56330: NEG
56331: PUSH
56332: LD_INT 2
56334: PUSH
56335: EMPTY
56336: LIST
56337: LIST
56338: PUSH
56339: EMPTY
56340: LIST
56341: LIST
56342: LIST
56343: LIST
56344: LIST
56345: LIST
56346: LIST
56347: LIST
56348: LIST
56349: LIST
56350: LIST
56351: LIST
56352: LIST
56353: LIST
56354: LIST
56355: LIST
56356: LIST
56357: LIST
56358: LIST
56359: LIST
56360: LIST
56361: LIST
56362: LIST
56363: LIST
56364: LIST
56365: LIST
56366: LIST
56367: LIST
56368: LIST
56369: LIST
56370: LIST
56371: LIST
56372: LIST
56373: LIST
56374: LIST
56375: LIST
56376: LIST
56377: LIST
56378: LIST
56379: LIST
56380: LIST
56381: LIST
56382: LIST
56383: LIST
56384: LIST
56385: ST_TO_ADDR
// end ; end ;
56386: GO 56389
56388: POP
// case btype of b_depot , b_warehouse :
56389: LD_VAR 0 1
56393: PUSH
56394: LD_INT 0
56396: DOUBLE
56397: EQUAL
56398: IFTRUE 56408
56400: LD_INT 1
56402: DOUBLE
56403: EQUAL
56404: IFTRUE 56408
56406: GO 56609
56408: POP
// case nation of nation_american :
56409: LD_VAR 0 5
56413: PUSH
56414: LD_INT 1
56416: DOUBLE
56417: EQUAL
56418: IFTRUE 56422
56420: GO 56478
56422: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
56423: LD_ADDR_VAR 0 9
56427: PUSH
56428: LD_VAR 0 11
56432: PUSH
56433: LD_VAR 0 12
56437: PUSH
56438: LD_VAR 0 13
56442: PUSH
56443: LD_VAR 0 14
56447: PUSH
56448: LD_VAR 0 15
56452: PUSH
56453: LD_VAR 0 16
56457: PUSH
56458: EMPTY
56459: LIST
56460: LIST
56461: LIST
56462: LIST
56463: LIST
56464: LIST
56465: PUSH
56466: LD_VAR 0 4
56470: PUSH
56471: LD_INT 1
56473: PLUS
56474: ARRAY
56475: ST_TO_ADDR
56476: GO 56607
56478: LD_INT 2
56480: DOUBLE
56481: EQUAL
56482: IFTRUE 56486
56484: GO 56542
56486: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
56487: LD_ADDR_VAR 0 9
56491: PUSH
56492: LD_VAR 0 17
56496: PUSH
56497: LD_VAR 0 18
56501: PUSH
56502: LD_VAR 0 19
56506: PUSH
56507: LD_VAR 0 20
56511: PUSH
56512: LD_VAR 0 21
56516: PUSH
56517: LD_VAR 0 22
56521: PUSH
56522: EMPTY
56523: LIST
56524: LIST
56525: LIST
56526: LIST
56527: LIST
56528: LIST
56529: PUSH
56530: LD_VAR 0 4
56534: PUSH
56535: LD_INT 1
56537: PLUS
56538: ARRAY
56539: ST_TO_ADDR
56540: GO 56607
56542: LD_INT 3
56544: DOUBLE
56545: EQUAL
56546: IFTRUE 56550
56548: GO 56606
56550: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
56551: LD_ADDR_VAR 0 9
56555: PUSH
56556: LD_VAR 0 23
56560: PUSH
56561: LD_VAR 0 24
56565: PUSH
56566: LD_VAR 0 25
56570: PUSH
56571: LD_VAR 0 26
56575: PUSH
56576: LD_VAR 0 27
56580: PUSH
56581: LD_VAR 0 28
56585: PUSH
56586: EMPTY
56587: LIST
56588: LIST
56589: LIST
56590: LIST
56591: LIST
56592: LIST
56593: PUSH
56594: LD_VAR 0 4
56598: PUSH
56599: LD_INT 1
56601: PLUS
56602: ARRAY
56603: ST_TO_ADDR
56604: GO 56607
56606: POP
56607: GO 57162
56609: LD_INT 2
56611: DOUBLE
56612: EQUAL
56613: IFTRUE 56623
56615: LD_INT 3
56617: DOUBLE
56618: EQUAL
56619: IFTRUE 56623
56621: GO 56679
56623: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
56624: LD_ADDR_VAR 0 9
56628: PUSH
56629: LD_VAR 0 29
56633: PUSH
56634: LD_VAR 0 30
56638: PUSH
56639: LD_VAR 0 31
56643: PUSH
56644: LD_VAR 0 32
56648: PUSH
56649: LD_VAR 0 33
56653: PUSH
56654: LD_VAR 0 34
56658: PUSH
56659: EMPTY
56660: LIST
56661: LIST
56662: LIST
56663: LIST
56664: LIST
56665: LIST
56666: PUSH
56667: LD_VAR 0 4
56671: PUSH
56672: LD_INT 1
56674: PLUS
56675: ARRAY
56676: ST_TO_ADDR
56677: GO 57162
56679: LD_INT 16
56681: DOUBLE
56682: EQUAL
56683: IFTRUE 56741
56685: LD_INT 17
56687: DOUBLE
56688: EQUAL
56689: IFTRUE 56741
56691: LD_INT 18
56693: DOUBLE
56694: EQUAL
56695: IFTRUE 56741
56697: LD_INT 19
56699: DOUBLE
56700: EQUAL
56701: IFTRUE 56741
56703: LD_INT 22
56705: DOUBLE
56706: EQUAL
56707: IFTRUE 56741
56709: LD_INT 20
56711: DOUBLE
56712: EQUAL
56713: IFTRUE 56741
56715: LD_INT 21
56717: DOUBLE
56718: EQUAL
56719: IFTRUE 56741
56721: LD_INT 23
56723: DOUBLE
56724: EQUAL
56725: IFTRUE 56741
56727: LD_INT 24
56729: DOUBLE
56730: EQUAL
56731: IFTRUE 56741
56733: LD_INT 25
56735: DOUBLE
56736: EQUAL
56737: IFTRUE 56741
56739: GO 56797
56741: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
56742: LD_ADDR_VAR 0 9
56746: PUSH
56747: LD_VAR 0 35
56751: PUSH
56752: LD_VAR 0 36
56756: PUSH
56757: LD_VAR 0 37
56761: PUSH
56762: LD_VAR 0 38
56766: PUSH
56767: LD_VAR 0 39
56771: PUSH
56772: LD_VAR 0 40
56776: PUSH
56777: EMPTY
56778: LIST
56779: LIST
56780: LIST
56781: LIST
56782: LIST
56783: LIST
56784: PUSH
56785: LD_VAR 0 4
56789: PUSH
56790: LD_INT 1
56792: PLUS
56793: ARRAY
56794: ST_TO_ADDR
56795: GO 57162
56797: LD_INT 6
56799: DOUBLE
56800: EQUAL
56801: IFTRUE 56853
56803: LD_INT 7
56805: DOUBLE
56806: EQUAL
56807: IFTRUE 56853
56809: LD_INT 8
56811: DOUBLE
56812: EQUAL
56813: IFTRUE 56853
56815: LD_INT 13
56817: DOUBLE
56818: EQUAL
56819: IFTRUE 56853
56821: LD_INT 12
56823: DOUBLE
56824: EQUAL
56825: IFTRUE 56853
56827: LD_INT 15
56829: DOUBLE
56830: EQUAL
56831: IFTRUE 56853
56833: LD_INT 11
56835: DOUBLE
56836: EQUAL
56837: IFTRUE 56853
56839: LD_INT 14
56841: DOUBLE
56842: EQUAL
56843: IFTRUE 56853
56845: LD_INT 10
56847: DOUBLE
56848: EQUAL
56849: IFTRUE 56853
56851: GO 56909
56853: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
56854: LD_ADDR_VAR 0 9
56858: PUSH
56859: LD_VAR 0 41
56863: PUSH
56864: LD_VAR 0 42
56868: PUSH
56869: LD_VAR 0 43
56873: PUSH
56874: LD_VAR 0 44
56878: PUSH
56879: LD_VAR 0 45
56883: PUSH
56884: LD_VAR 0 46
56888: PUSH
56889: EMPTY
56890: LIST
56891: LIST
56892: LIST
56893: LIST
56894: LIST
56895: LIST
56896: PUSH
56897: LD_VAR 0 4
56901: PUSH
56902: LD_INT 1
56904: PLUS
56905: ARRAY
56906: ST_TO_ADDR
56907: GO 57162
56909: LD_INT 36
56911: DOUBLE
56912: EQUAL
56913: IFTRUE 56917
56915: GO 56973
56917: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
56918: LD_ADDR_VAR 0 9
56922: PUSH
56923: LD_VAR 0 47
56927: PUSH
56928: LD_VAR 0 48
56932: PUSH
56933: LD_VAR 0 49
56937: PUSH
56938: LD_VAR 0 50
56942: PUSH
56943: LD_VAR 0 51
56947: PUSH
56948: LD_VAR 0 52
56952: PUSH
56953: EMPTY
56954: LIST
56955: LIST
56956: LIST
56957: LIST
56958: LIST
56959: LIST
56960: PUSH
56961: LD_VAR 0 4
56965: PUSH
56966: LD_INT 1
56968: PLUS
56969: ARRAY
56970: ST_TO_ADDR
56971: GO 57162
56973: LD_INT 4
56975: DOUBLE
56976: EQUAL
56977: IFTRUE 56999
56979: LD_INT 5
56981: DOUBLE
56982: EQUAL
56983: IFTRUE 56999
56985: LD_INT 34
56987: DOUBLE
56988: EQUAL
56989: IFTRUE 56999
56991: LD_INT 37
56993: DOUBLE
56994: EQUAL
56995: IFTRUE 56999
56997: GO 57055
56999: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
57000: LD_ADDR_VAR 0 9
57004: PUSH
57005: LD_VAR 0 53
57009: PUSH
57010: LD_VAR 0 54
57014: PUSH
57015: LD_VAR 0 55
57019: PUSH
57020: LD_VAR 0 56
57024: PUSH
57025: LD_VAR 0 57
57029: PUSH
57030: LD_VAR 0 58
57034: PUSH
57035: EMPTY
57036: LIST
57037: LIST
57038: LIST
57039: LIST
57040: LIST
57041: LIST
57042: PUSH
57043: LD_VAR 0 4
57047: PUSH
57048: LD_INT 1
57050: PLUS
57051: ARRAY
57052: ST_TO_ADDR
57053: GO 57162
57055: LD_INT 31
57057: DOUBLE
57058: EQUAL
57059: IFTRUE 57105
57061: LD_INT 32
57063: DOUBLE
57064: EQUAL
57065: IFTRUE 57105
57067: LD_INT 33
57069: DOUBLE
57070: EQUAL
57071: IFTRUE 57105
57073: LD_INT 27
57075: DOUBLE
57076: EQUAL
57077: IFTRUE 57105
57079: LD_INT 26
57081: DOUBLE
57082: EQUAL
57083: IFTRUE 57105
57085: LD_INT 28
57087: DOUBLE
57088: EQUAL
57089: IFTRUE 57105
57091: LD_INT 29
57093: DOUBLE
57094: EQUAL
57095: IFTRUE 57105
57097: LD_INT 30
57099: DOUBLE
57100: EQUAL
57101: IFTRUE 57105
57103: GO 57161
57105: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
57106: LD_ADDR_VAR 0 9
57110: PUSH
57111: LD_VAR 0 59
57115: PUSH
57116: LD_VAR 0 60
57120: PUSH
57121: LD_VAR 0 61
57125: PUSH
57126: LD_VAR 0 62
57130: PUSH
57131: LD_VAR 0 63
57135: PUSH
57136: LD_VAR 0 64
57140: PUSH
57141: EMPTY
57142: LIST
57143: LIST
57144: LIST
57145: LIST
57146: LIST
57147: LIST
57148: PUSH
57149: LD_VAR 0 4
57153: PUSH
57154: LD_INT 1
57156: PLUS
57157: ARRAY
57158: ST_TO_ADDR
57159: GO 57162
57161: POP
// temp_list2 = [ ] ;
57162: LD_ADDR_VAR 0 10
57166: PUSH
57167: EMPTY
57168: ST_TO_ADDR
// for i in temp_list do
57169: LD_ADDR_VAR 0 8
57173: PUSH
57174: LD_VAR 0 9
57178: PUSH
57179: FOR_IN
57180: IFFALSE 57232
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
57182: LD_ADDR_VAR 0 10
57186: PUSH
57187: LD_VAR 0 10
57191: PUSH
57192: LD_VAR 0 8
57196: PUSH
57197: LD_INT 1
57199: ARRAY
57200: PUSH
57201: LD_VAR 0 2
57205: PLUS
57206: PUSH
57207: LD_VAR 0 8
57211: PUSH
57212: LD_INT 2
57214: ARRAY
57215: PUSH
57216: LD_VAR 0 3
57220: PLUS
57221: PUSH
57222: EMPTY
57223: LIST
57224: LIST
57225: PUSH
57226: EMPTY
57227: LIST
57228: ADD
57229: ST_TO_ADDR
57230: GO 57179
57232: POP
57233: POP
// result = temp_list2 ;
57234: LD_ADDR_VAR 0 7
57238: PUSH
57239: LD_VAR 0 10
57243: ST_TO_ADDR
// end ;
57244: LD_VAR 0 7
57248: RET
// export function EnemyInRange ( unit , dist ) ; begin
57249: LD_INT 0
57251: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
57252: LD_ADDR_VAR 0 3
57256: PUSH
57257: LD_VAR 0 1
57261: PPUSH
57262: CALL_OW 255
57266: PPUSH
57267: LD_VAR 0 1
57271: PPUSH
57272: CALL_OW 250
57276: PPUSH
57277: LD_VAR 0 1
57281: PPUSH
57282: CALL_OW 251
57286: PPUSH
57287: LD_VAR 0 2
57291: PPUSH
57292: CALL 31020 0 4
57296: PUSH
57297: LD_INT 4
57299: ARRAY
57300: ST_TO_ADDR
// end ;
57301: LD_VAR 0 3
57305: RET
// export function PlayerSeeMe ( unit ) ; begin
57306: LD_INT 0
57308: PPUSH
// result := See ( your_side , unit ) ;
57309: LD_ADDR_VAR 0 2
57313: PUSH
57314: LD_OWVAR 2
57318: PPUSH
57319: LD_VAR 0 1
57323: PPUSH
57324: CALL_OW 292
57328: ST_TO_ADDR
// end ;
57329: LD_VAR 0 2
57333: RET
// export function ReverseDir ( unit ) ; begin
57334: LD_INT 0
57336: PPUSH
// if not unit then
57337: LD_VAR 0 1
57341: NOT
57342: IFFALSE 57346
// exit ;
57344: GO 57369
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
57346: LD_ADDR_VAR 0 2
57350: PUSH
57351: LD_VAR 0 1
57355: PPUSH
57356: CALL_OW 254
57360: PUSH
57361: LD_INT 3
57363: PLUS
57364: PUSH
57365: LD_INT 6
57367: MOD
57368: ST_TO_ADDR
// end ;
57369: LD_VAR 0 2
57373: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
57374: LD_INT 0
57376: PPUSH
57377: PPUSH
57378: PPUSH
57379: PPUSH
57380: PPUSH
// if not hexes then
57381: LD_VAR 0 2
57385: NOT
57386: IFFALSE 57390
// exit ;
57388: GO 57538
// dist := 9999 ;
57390: LD_ADDR_VAR 0 5
57394: PUSH
57395: LD_INT 9999
57397: ST_TO_ADDR
// for i = 1 to hexes do
57398: LD_ADDR_VAR 0 4
57402: PUSH
57403: DOUBLE
57404: LD_INT 1
57406: DEC
57407: ST_TO_ADDR
57408: LD_VAR 0 2
57412: PUSH
57413: FOR_TO
57414: IFFALSE 57526
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
57416: LD_VAR 0 1
57420: PPUSH
57421: LD_VAR 0 2
57425: PUSH
57426: LD_VAR 0 4
57430: ARRAY
57431: PUSH
57432: LD_INT 1
57434: ARRAY
57435: PPUSH
57436: LD_VAR 0 2
57440: PUSH
57441: LD_VAR 0 4
57445: ARRAY
57446: PUSH
57447: LD_INT 2
57449: ARRAY
57450: PPUSH
57451: CALL_OW 297
57455: PUSH
57456: LD_VAR 0 5
57460: LESS
57461: IFFALSE 57524
// begin hex := hexes [ i ] ;
57463: LD_ADDR_VAR 0 7
57467: PUSH
57468: LD_VAR 0 2
57472: PUSH
57473: LD_VAR 0 4
57477: ARRAY
57478: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
57479: LD_ADDR_VAR 0 5
57483: PUSH
57484: LD_VAR 0 1
57488: PPUSH
57489: LD_VAR 0 2
57493: PUSH
57494: LD_VAR 0 4
57498: ARRAY
57499: PUSH
57500: LD_INT 1
57502: ARRAY
57503: PPUSH
57504: LD_VAR 0 2
57508: PUSH
57509: LD_VAR 0 4
57513: ARRAY
57514: PUSH
57515: LD_INT 2
57517: ARRAY
57518: PPUSH
57519: CALL_OW 297
57523: ST_TO_ADDR
// end ; end ;
57524: GO 57413
57526: POP
57527: POP
// result := hex ;
57528: LD_ADDR_VAR 0 3
57532: PUSH
57533: LD_VAR 0 7
57537: ST_TO_ADDR
// end ;
57538: LD_VAR 0 3
57542: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
57543: LD_INT 0
57545: PPUSH
57546: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
57547: LD_VAR 0 1
57551: NOT
57552: PUSH
57553: LD_VAR 0 1
57557: PUSH
57558: LD_INT 21
57560: PUSH
57561: LD_INT 2
57563: PUSH
57564: EMPTY
57565: LIST
57566: LIST
57567: PUSH
57568: LD_INT 23
57570: PUSH
57571: LD_INT 2
57573: PUSH
57574: EMPTY
57575: LIST
57576: LIST
57577: PUSH
57578: EMPTY
57579: LIST
57580: LIST
57581: PPUSH
57582: CALL_OW 69
57586: IN
57587: NOT
57588: OR
57589: IFFALSE 57593
// exit ;
57591: GO 57640
// for i = 1 to 3 do
57593: LD_ADDR_VAR 0 3
57597: PUSH
57598: DOUBLE
57599: LD_INT 1
57601: DEC
57602: ST_TO_ADDR
57603: LD_INT 3
57605: PUSH
57606: FOR_TO
57607: IFFALSE 57638
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
57609: LD_VAR 0 1
57613: PPUSH
57614: CALL_OW 250
57618: PPUSH
57619: LD_VAR 0 1
57623: PPUSH
57624: CALL_OW 251
57628: PPUSH
57629: LD_INT 1
57631: PPUSH
57632: CALL_OW 453
57636: GO 57606
57638: POP
57639: POP
// end ;
57640: LD_VAR 0 2
57644: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
57645: LD_INT 0
57647: PPUSH
57648: PPUSH
57649: PPUSH
57650: PPUSH
57651: PPUSH
57652: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
57653: LD_VAR 0 1
57657: NOT
57658: PUSH
57659: LD_VAR 0 2
57663: NOT
57664: OR
57665: PUSH
57666: LD_VAR 0 1
57670: PPUSH
57671: CALL_OW 314
57675: OR
57676: IFFALSE 57680
// exit ;
57678: GO 58121
// x := GetX ( enemy_unit ) ;
57680: LD_ADDR_VAR 0 7
57684: PUSH
57685: LD_VAR 0 2
57689: PPUSH
57690: CALL_OW 250
57694: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
57695: LD_ADDR_VAR 0 8
57699: PUSH
57700: LD_VAR 0 2
57704: PPUSH
57705: CALL_OW 251
57709: ST_TO_ADDR
// if not x or not y then
57710: LD_VAR 0 7
57714: NOT
57715: PUSH
57716: LD_VAR 0 8
57720: NOT
57721: OR
57722: IFFALSE 57726
// exit ;
57724: GO 58121
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
57726: LD_ADDR_VAR 0 6
57730: PUSH
57731: LD_VAR 0 7
57735: PPUSH
57736: LD_INT 0
57738: PPUSH
57739: LD_INT 4
57741: PPUSH
57742: CALL_OW 272
57746: PUSH
57747: LD_VAR 0 8
57751: PPUSH
57752: LD_INT 0
57754: PPUSH
57755: LD_INT 4
57757: PPUSH
57758: CALL_OW 273
57762: PUSH
57763: EMPTY
57764: LIST
57765: LIST
57766: PUSH
57767: LD_VAR 0 7
57771: PPUSH
57772: LD_INT 1
57774: PPUSH
57775: LD_INT 4
57777: PPUSH
57778: CALL_OW 272
57782: PUSH
57783: LD_VAR 0 8
57787: PPUSH
57788: LD_INT 1
57790: PPUSH
57791: LD_INT 4
57793: PPUSH
57794: CALL_OW 273
57798: PUSH
57799: EMPTY
57800: LIST
57801: LIST
57802: PUSH
57803: LD_VAR 0 7
57807: PPUSH
57808: LD_INT 2
57810: PPUSH
57811: LD_INT 4
57813: PPUSH
57814: CALL_OW 272
57818: PUSH
57819: LD_VAR 0 8
57823: PPUSH
57824: LD_INT 2
57826: PPUSH
57827: LD_INT 4
57829: PPUSH
57830: CALL_OW 273
57834: PUSH
57835: EMPTY
57836: LIST
57837: LIST
57838: PUSH
57839: LD_VAR 0 7
57843: PPUSH
57844: LD_INT 3
57846: PPUSH
57847: LD_INT 4
57849: PPUSH
57850: CALL_OW 272
57854: PUSH
57855: LD_VAR 0 8
57859: PPUSH
57860: LD_INT 3
57862: PPUSH
57863: LD_INT 4
57865: PPUSH
57866: CALL_OW 273
57870: PUSH
57871: EMPTY
57872: LIST
57873: LIST
57874: PUSH
57875: LD_VAR 0 7
57879: PPUSH
57880: LD_INT 4
57882: PPUSH
57883: LD_INT 4
57885: PPUSH
57886: CALL_OW 272
57890: PUSH
57891: LD_VAR 0 8
57895: PPUSH
57896: LD_INT 4
57898: PPUSH
57899: LD_INT 4
57901: PPUSH
57902: CALL_OW 273
57906: PUSH
57907: EMPTY
57908: LIST
57909: LIST
57910: PUSH
57911: LD_VAR 0 7
57915: PPUSH
57916: LD_INT 5
57918: PPUSH
57919: LD_INT 4
57921: PPUSH
57922: CALL_OW 272
57926: PUSH
57927: LD_VAR 0 8
57931: PPUSH
57932: LD_INT 5
57934: PPUSH
57935: LD_INT 4
57937: PPUSH
57938: CALL_OW 273
57942: PUSH
57943: EMPTY
57944: LIST
57945: LIST
57946: PUSH
57947: EMPTY
57948: LIST
57949: LIST
57950: LIST
57951: LIST
57952: LIST
57953: LIST
57954: ST_TO_ADDR
// for i = tmp downto 1 do
57955: LD_ADDR_VAR 0 4
57959: PUSH
57960: DOUBLE
57961: LD_VAR 0 6
57965: INC
57966: ST_TO_ADDR
57967: LD_INT 1
57969: PUSH
57970: FOR_DOWNTO
57971: IFFALSE 58072
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
57973: LD_VAR 0 6
57977: PUSH
57978: LD_VAR 0 4
57982: ARRAY
57983: PUSH
57984: LD_INT 1
57986: ARRAY
57987: PPUSH
57988: LD_VAR 0 6
57992: PUSH
57993: LD_VAR 0 4
57997: ARRAY
57998: PUSH
57999: LD_INT 2
58001: ARRAY
58002: PPUSH
58003: CALL_OW 488
58007: NOT
58008: PUSH
58009: LD_VAR 0 6
58013: PUSH
58014: LD_VAR 0 4
58018: ARRAY
58019: PUSH
58020: LD_INT 1
58022: ARRAY
58023: PPUSH
58024: LD_VAR 0 6
58028: PUSH
58029: LD_VAR 0 4
58033: ARRAY
58034: PUSH
58035: LD_INT 2
58037: ARRAY
58038: PPUSH
58039: CALL_OW 428
58043: PUSH
58044: LD_INT 0
58046: NONEQUAL
58047: OR
58048: IFFALSE 58070
// tmp := Delete ( tmp , i ) ;
58050: LD_ADDR_VAR 0 6
58054: PUSH
58055: LD_VAR 0 6
58059: PPUSH
58060: LD_VAR 0 4
58064: PPUSH
58065: CALL_OW 3
58069: ST_TO_ADDR
58070: GO 57970
58072: POP
58073: POP
// j := GetClosestHex ( unit , tmp ) ;
58074: LD_ADDR_VAR 0 5
58078: PUSH
58079: LD_VAR 0 1
58083: PPUSH
58084: LD_VAR 0 6
58088: PPUSH
58089: CALL 57374 0 2
58093: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
58094: LD_VAR 0 1
58098: PPUSH
58099: LD_VAR 0 5
58103: PUSH
58104: LD_INT 1
58106: ARRAY
58107: PPUSH
58108: LD_VAR 0 5
58112: PUSH
58113: LD_INT 2
58115: ARRAY
58116: PPUSH
58117: CALL_OW 111
// end ;
58121: LD_VAR 0 3
58125: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
58126: LD_INT 0
58128: PPUSH
58129: PPUSH
58130: PPUSH
// uc_side = 0 ;
58131: LD_ADDR_OWVAR 20
58135: PUSH
58136: LD_INT 0
58138: ST_TO_ADDR
// uc_nation = 0 ;
58139: LD_ADDR_OWVAR 21
58143: PUSH
58144: LD_INT 0
58146: ST_TO_ADDR
// InitHc_All ( ) ;
58147: CALL_OW 584
// InitVc ;
58151: CALL_OW 20
// if mastodonts then
58155: LD_VAR 0 6
58159: IFFALSE 58226
// for i = 1 to mastodonts do
58161: LD_ADDR_VAR 0 11
58165: PUSH
58166: DOUBLE
58167: LD_INT 1
58169: DEC
58170: ST_TO_ADDR
58171: LD_VAR 0 6
58175: PUSH
58176: FOR_TO
58177: IFFALSE 58224
// begin vc_chassis := 31 ;
58179: LD_ADDR_OWVAR 37
58183: PUSH
58184: LD_INT 31
58186: ST_TO_ADDR
// vc_control := control_rider ;
58187: LD_ADDR_OWVAR 38
58191: PUSH
58192: LD_INT 4
58194: ST_TO_ADDR
// animal := CreateVehicle ;
58195: LD_ADDR_VAR 0 12
58199: PUSH
58200: CALL_OW 45
58204: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58205: LD_VAR 0 12
58209: PPUSH
58210: LD_VAR 0 8
58214: PPUSH
58215: LD_INT 0
58217: PPUSH
58218: CALL 60414 0 3
// end ;
58222: GO 58176
58224: POP
58225: POP
// if horses then
58226: LD_VAR 0 5
58230: IFFALSE 58297
// for i = 1 to horses do
58232: LD_ADDR_VAR 0 11
58236: PUSH
58237: DOUBLE
58238: LD_INT 1
58240: DEC
58241: ST_TO_ADDR
58242: LD_VAR 0 5
58246: PUSH
58247: FOR_TO
58248: IFFALSE 58295
// begin hc_class := 21 ;
58250: LD_ADDR_OWVAR 28
58254: PUSH
58255: LD_INT 21
58257: ST_TO_ADDR
// hc_gallery :=  ;
58258: LD_ADDR_OWVAR 33
58262: PUSH
58263: LD_STRING 
58265: ST_TO_ADDR
// animal := CreateHuman ;
58266: LD_ADDR_VAR 0 12
58270: PUSH
58271: CALL_OW 44
58275: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58276: LD_VAR 0 12
58280: PPUSH
58281: LD_VAR 0 8
58285: PPUSH
58286: LD_INT 0
58288: PPUSH
58289: CALL 60414 0 3
// end ;
58293: GO 58247
58295: POP
58296: POP
// if birds then
58297: LD_VAR 0 1
58301: IFFALSE 58368
// for i = 1 to birds do
58303: LD_ADDR_VAR 0 11
58307: PUSH
58308: DOUBLE
58309: LD_INT 1
58311: DEC
58312: ST_TO_ADDR
58313: LD_VAR 0 1
58317: PUSH
58318: FOR_TO
58319: IFFALSE 58366
// begin hc_class = 18 ;
58321: LD_ADDR_OWVAR 28
58325: PUSH
58326: LD_INT 18
58328: ST_TO_ADDR
// hc_gallery =  ;
58329: LD_ADDR_OWVAR 33
58333: PUSH
58334: LD_STRING 
58336: ST_TO_ADDR
// animal := CreateHuman ;
58337: LD_ADDR_VAR 0 12
58341: PUSH
58342: CALL_OW 44
58346: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58347: LD_VAR 0 12
58351: PPUSH
58352: LD_VAR 0 8
58356: PPUSH
58357: LD_INT 0
58359: PPUSH
58360: CALL 60414 0 3
// end ;
58364: GO 58318
58366: POP
58367: POP
// if tigers then
58368: LD_VAR 0 2
58372: IFFALSE 58456
// for i = 1 to tigers do
58374: LD_ADDR_VAR 0 11
58378: PUSH
58379: DOUBLE
58380: LD_INT 1
58382: DEC
58383: ST_TO_ADDR
58384: LD_VAR 0 2
58388: PUSH
58389: FOR_TO
58390: IFFALSE 58454
// begin hc_class = class_tiger ;
58392: LD_ADDR_OWVAR 28
58396: PUSH
58397: LD_INT 14
58399: ST_TO_ADDR
// hc_gallery =  ;
58400: LD_ADDR_OWVAR 33
58404: PUSH
58405: LD_STRING 
58407: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
58408: LD_ADDR_OWVAR 35
58412: PUSH
58413: LD_INT 7
58415: NEG
58416: PPUSH
58417: LD_INT 7
58419: PPUSH
58420: CALL_OW 12
58424: ST_TO_ADDR
// animal := CreateHuman ;
58425: LD_ADDR_VAR 0 12
58429: PUSH
58430: CALL_OW 44
58434: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58435: LD_VAR 0 12
58439: PPUSH
58440: LD_VAR 0 8
58444: PPUSH
58445: LD_INT 0
58447: PPUSH
58448: CALL 60414 0 3
// end ;
58452: GO 58389
58454: POP
58455: POP
// if apemans then
58456: LD_VAR 0 3
58460: IFFALSE 58583
// for i = 1 to apemans do
58462: LD_ADDR_VAR 0 11
58466: PUSH
58467: DOUBLE
58468: LD_INT 1
58470: DEC
58471: ST_TO_ADDR
58472: LD_VAR 0 3
58476: PUSH
58477: FOR_TO
58478: IFFALSE 58581
// begin hc_class = class_apeman ;
58480: LD_ADDR_OWVAR 28
58484: PUSH
58485: LD_INT 12
58487: ST_TO_ADDR
// hc_gallery =  ;
58488: LD_ADDR_OWVAR 33
58492: PUSH
58493: LD_STRING 
58495: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
58496: LD_ADDR_OWVAR 35
58500: PUSH
58501: LD_INT 5
58503: NEG
58504: PPUSH
58505: LD_INT 5
58507: PPUSH
58508: CALL_OW 12
58512: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
58513: LD_ADDR_OWVAR 31
58517: PUSH
58518: LD_INT 1
58520: PPUSH
58521: LD_INT 3
58523: PPUSH
58524: CALL_OW 12
58528: PUSH
58529: LD_INT 1
58531: PPUSH
58532: LD_INT 3
58534: PPUSH
58535: CALL_OW 12
58539: PUSH
58540: LD_INT 0
58542: PUSH
58543: LD_INT 0
58545: PUSH
58546: EMPTY
58547: LIST
58548: LIST
58549: LIST
58550: LIST
58551: ST_TO_ADDR
// animal := CreateHuman ;
58552: LD_ADDR_VAR 0 12
58556: PUSH
58557: CALL_OW 44
58561: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58562: LD_VAR 0 12
58566: PPUSH
58567: LD_VAR 0 8
58571: PPUSH
58572: LD_INT 0
58574: PPUSH
58575: CALL 60414 0 3
// end ;
58579: GO 58477
58581: POP
58582: POP
// if enchidnas then
58583: LD_VAR 0 4
58587: IFFALSE 58654
// for i = 1 to enchidnas do
58589: LD_ADDR_VAR 0 11
58593: PUSH
58594: DOUBLE
58595: LD_INT 1
58597: DEC
58598: ST_TO_ADDR
58599: LD_VAR 0 4
58603: PUSH
58604: FOR_TO
58605: IFFALSE 58652
// begin hc_class = 13 ;
58607: LD_ADDR_OWVAR 28
58611: PUSH
58612: LD_INT 13
58614: ST_TO_ADDR
// hc_gallery =  ;
58615: LD_ADDR_OWVAR 33
58619: PUSH
58620: LD_STRING 
58622: ST_TO_ADDR
// animal := CreateHuman ;
58623: LD_ADDR_VAR 0 12
58627: PUSH
58628: CALL_OW 44
58632: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58633: LD_VAR 0 12
58637: PPUSH
58638: LD_VAR 0 8
58642: PPUSH
58643: LD_INT 0
58645: PPUSH
58646: CALL 60414 0 3
// end ;
58650: GO 58604
58652: POP
58653: POP
// if fishes then
58654: LD_VAR 0 7
58658: IFFALSE 58725
// for i = 1 to fishes do
58660: LD_ADDR_VAR 0 11
58664: PUSH
58665: DOUBLE
58666: LD_INT 1
58668: DEC
58669: ST_TO_ADDR
58670: LD_VAR 0 7
58674: PUSH
58675: FOR_TO
58676: IFFALSE 58723
// begin hc_class = 20 ;
58678: LD_ADDR_OWVAR 28
58682: PUSH
58683: LD_INT 20
58685: ST_TO_ADDR
// hc_gallery =  ;
58686: LD_ADDR_OWVAR 33
58690: PUSH
58691: LD_STRING 
58693: ST_TO_ADDR
// animal := CreateHuman ;
58694: LD_ADDR_VAR 0 12
58698: PUSH
58699: CALL_OW 44
58703: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
58704: LD_VAR 0 12
58708: PPUSH
58709: LD_VAR 0 9
58713: PPUSH
58714: LD_INT 0
58716: PPUSH
58717: CALL 60414 0 3
// end ;
58721: GO 58675
58723: POP
58724: POP
// end ;
58725: LD_VAR 0 10
58729: RET
// export function WantHeal ( sci , unit ) ; begin
58730: LD_INT 0
58732: PPUSH
// if GetTaskList ( sci ) > 0 then
58733: LD_VAR 0 1
58737: PPUSH
58738: CALL_OW 437
58742: PUSH
58743: LD_INT 0
58745: GREATER
58746: IFFALSE 58816
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
58748: LD_VAR 0 1
58752: PPUSH
58753: CALL_OW 437
58757: PUSH
58758: LD_INT 1
58760: ARRAY
58761: PUSH
58762: LD_INT 1
58764: ARRAY
58765: PUSH
58766: LD_STRING l
58768: EQUAL
58769: PUSH
58770: LD_VAR 0 1
58774: PPUSH
58775: CALL_OW 437
58779: PUSH
58780: LD_INT 1
58782: ARRAY
58783: PUSH
58784: LD_INT 4
58786: ARRAY
58787: PUSH
58788: LD_VAR 0 2
58792: EQUAL
58793: AND
58794: IFFALSE 58806
// result := true else
58796: LD_ADDR_VAR 0 3
58800: PUSH
58801: LD_INT 1
58803: ST_TO_ADDR
58804: GO 58814
// result := false ;
58806: LD_ADDR_VAR 0 3
58810: PUSH
58811: LD_INT 0
58813: ST_TO_ADDR
// end else
58814: GO 58824
// result := false ;
58816: LD_ADDR_VAR 0 3
58820: PUSH
58821: LD_INT 0
58823: ST_TO_ADDR
// end ;
58824: LD_VAR 0 3
58828: RET
// export function HealTarget ( sci ) ; begin
58829: LD_INT 0
58831: PPUSH
// if not sci then
58832: LD_VAR 0 1
58836: NOT
58837: IFFALSE 58841
// exit ;
58839: GO 58906
// result := 0 ;
58841: LD_ADDR_VAR 0 2
58845: PUSH
58846: LD_INT 0
58848: ST_TO_ADDR
// if GetTaskList ( sci ) then
58849: LD_VAR 0 1
58853: PPUSH
58854: CALL_OW 437
58858: IFFALSE 58906
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
58860: LD_VAR 0 1
58864: PPUSH
58865: CALL_OW 437
58869: PUSH
58870: LD_INT 1
58872: ARRAY
58873: PUSH
58874: LD_INT 1
58876: ARRAY
58877: PUSH
58878: LD_STRING l
58880: EQUAL
58881: IFFALSE 58906
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
58883: LD_ADDR_VAR 0 2
58887: PUSH
58888: LD_VAR 0 1
58892: PPUSH
58893: CALL_OW 437
58897: PUSH
58898: LD_INT 1
58900: ARRAY
58901: PUSH
58902: LD_INT 4
58904: ARRAY
58905: ST_TO_ADDR
// end ;
58906: LD_VAR 0 2
58910: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
58911: LD_INT 0
58913: PPUSH
58914: PPUSH
58915: PPUSH
58916: PPUSH
// if not base_units then
58917: LD_VAR 0 1
58921: NOT
58922: IFFALSE 58926
// exit ;
58924: GO 59013
// result := false ;
58926: LD_ADDR_VAR 0 2
58930: PUSH
58931: LD_INT 0
58933: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
58934: LD_ADDR_VAR 0 5
58938: PUSH
58939: LD_VAR 0 1
58943: PPUSH
58944: LD_INT 21
58946: PUSH
58947: LD_INT 3
58949: PUSH
58950: EMPTY
58951: LIST
58952: LIST
58953: PPUSH
58954: CALL_OW 72
58958: ST_TO_ADDR
// if not tmp then
58959: LD_VAR 0 5
58963: NOT
58964: IFFALSE 58968
// exit ;
58966: GO 59013
// for i in tmp do
58968: LD_ADDR_VAR 0 3
58972: PUSH
58973: LD_VAR 0 5
58977: PUSH
58978: FOR_IN
58979: IFFALSE 59011
// begin result := EnemyInRange ( i , 22 ) ;
58981: LD_ADDR_VAR 0 2
58985: PUSH
58986: LD_VAR 0 3
58990: PPUSH
58991: LD_INT 22
58993: PPUSH
58994: CALL 57249 0 2
58998: ST_TO_ADDR
// if result then
58999: LD_VAR 0 2
59003: IFFALSE 59009
// exit ;
59005: POP
59006: POP
59007: GO 59013
// end ;
59009: GO 58978
59011: POP
59012: POP
// end ;
59013: LD_VAR 0 2
59017: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
59018: LD_INT 0
59020: PPUSH
59021: PPUSH
// if not units then
59022: LD_VAR 0 1
59026: NOT
59027: IFFALSE 59031
// exit ;
59029: GO 59101
// result := [ ] ;
59031: LD_ADDR_VAR 0 3
59035: PUSH
59036: EMPTY
59037: ST_TO_ADDR
// for i in units do
59038: LD_ADDR_VAR 0 4
59042: PUSH
59043: LD_VAR 0 1
59047: PUSH
59048: FOR_IN
59049: IFFALSE 59099
// if GetTag ( i ) = tag then
59051: LD_VAR 0 4
59055: PPUSH
59056: CALL_OW 110
59060: PUSH
59061: LD_VAR 0 2
59065: EQUAL
59066: IFFALSE 59097
// result := Insert ( result , result + 1 , i ) ;
59068: LD_ADDR_VAR 0 3
59072: PUSH
59073: LD_VAR 0 3
59077: PPUSH
59078: LD_VAR 0 3
59082: PUSH
59083: LD_INT 1
59085: PLUS
59086: PPUSH
59087: LD_VAR 0 4
59091: PPUSH
59092: CALL_OW 2
59096: ST_TO_ADDR
59097: GO 59048
59099: POP
59100: POP
// end ;
59101: LD_VAR 0 3
59105: RET
// export function IsDriver ( un ) ; begin
59106: LD_INT 0
59108: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
59109: LD_ADDR_VAR 0 2
59113: PUSH
59114: LD_VAR 0 1
59118: PUSH
59119: LD_INT 55
59121: PUSH
59122: EMPTY
59123: LIST
59124: PPUSH
59125: CALL_OW 69
59129: IN
59130: ST_TO_ADDR
// end ;
59131: LD_VAR 0 2
59135: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
59136: LD_INT 0
59138: PPUSH
59139: PPUSH
// list := [ ] ;
59140: LD_ADDR_VAR 0 5
59144: PUSH
59145: EMPTY
59146: ST_TO_ADDR
// case d of 0 :
59147: LD_VAR 0 3
59151: PUSH
59152: LD_INT 0
59154: DOUBLE
59155: EQUAL
59156: IFTRUE 59160
59158: GO 59293
59160: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
59161: LD_ADDR_VAR 0 5
59165: PUSH
59166: LD_VAR 0 1
59170: PUSH
59171: LD_INT 4
59173: MINUS
59174: PUSH
59175: LD_VAR 0 2
59179: PUSH
59180: LD_INT 4
59182: MINUS
59183: PUSH
59184: LD_INT 2
59186: PUSH
59187: EMPTY
59188: LIST
59189: LIST
59190: LIST
59191: PUSH
59192: LD_VAR 0 1
59196: PUSH
59197: LD_INT 3
59199: MINUS
59200: PUSH
59201: LD_VAR 0 2
59205: PUSH
59206: LD_INT 1
59208: PUSH
59209: EMPTY
59210: LIST
59211: LIST
59212: LIST
59213: PUSH
59214: LD_VAR 0 1
59218: PUSH
59219: LD_INT 4
59221: PLUS
59222: PUSH
59223: LD_VAR 0 2
59227: PUSH
59228: LD_INT 4
59230: PUSH
59231: EMPTY
59232: LIST
59233: LIST
59234: LIST
59235: PUSH
59236: LD_VAR 0 1
59240: PUSH
59241: LD_INT 3
59243: PLUS
59244: PUSH
59245: LD_VAR 0 2
59249: PUSH
59250: LD_INT 3
59252: PLUS
59253: PUSH
59254: LD_INT 5
59256: PUSH
59257: EMPTY
59258: LIST
59259: LIST
59260: LIST
59261: PUSH
59262: LD_VAR 0 1
59266: PUSH
59267: LD_VAR 0 2
59271: PUSH
59272: LD_INT 4
59274: PLUS
59275: PUSH
59276: LD_INT 0
59278: PUSH
59279: EMPTY
59280: LIST
59281: LIST
59282: LIST
59283: PUSH
59284: EMPTY
59285: LIST
59286: LIST
59287: LIST
59288: LIST
59289: LIST
59290: ST_TO_ADDR
// end ; 1 :
59291: GO 59991
59293: LD_INT 1
59295: DOUBLE
59296: EQUAL
59297: IFTRUE 59301
59299: GO 59434
59301: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
59302: LD_ADDR_VAR 0 5
59306: PUSH
59307: LD_VAR 0 1
59311: PUSH
59312: LD_VAR 0 2
59316: PUSH
59317: LD_INT 4
59319: MINUS
59320: PUSH
59321: LD_INT 3
59323: PUSH
59324: EMPTY
59325: LIST
59326: LIST
59327: LIST
59328: PUSH
59329: LD_VAR 0 1
59333: PUSH
59334: LD_INT 3
59336: MINUS
59337: PUSH
59338: LD_VAR 0 2
59342: PUSH
59343: LD_INT 3
59345: MINUS
59346: PUSH
59347: LD_INT 2
59349: PUSH
59350: EMPTY
59351: LIST
59352: LIST
59353: LIST
59354: PUSH
59355: LD_VAR 0 1
59359: PUSH
59360: LD_INT 4
59362: MINUS
59363: PUSH
59364: LD_VAR 0 2
59368: PUSH
59369: LD_INT 1
59371: PUSH
59372: EMPTY
59373: LIST
59374: LIST
59375: LIST
59376: PUSH
59377: LD_VAR 0 1
59381: PUSH
59382: LD_VAR 0 2
59386: PUSH
59387: LD_INT 3
59389: PLUS
59390: PUSH
59391: LD_INT 0
59393: PUSH
59394: EMPTY
59395: LIST
59396: LIST
59397: LIST
59398: PUSH
59399: LD_VAR 0 1
59403: PUSH
59404: LD_INT 4
59406: PLUS
59407: PUSH
59408: LD_VAR 0 2
59412: PUSH
59413: LD_INT 4
59415: PLUS
59416: PUSH
59417: LD_INT 5
59419: PUSH
59420: EMPTY
59421: LIST
59422: LIST
59423: LIST
59424: PUSH
59425: EMPTY
59426: LIST
59427: LIST
59428: LIST
59429: LIST
59430: LIST
59431: ST_TO_ADDR
// end ; 2 :
59432: GO 59991
59434: LD_INT 2
59436: DOUBLE
59437: EQUAL
59438: IFTRUE 59442
59440: GO 59571
59442: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
59443: LD_ADDR_VAR 0 5
59447: PUSH
59448: LD_VAR 0 1
59452: PUSH
59453: LD_VAR 0 2
59457: PUSH
59458: LD_INT 3
59460: MINUS
59461: PUSH
59462: LD_INT 3
59464: PUSH
59465: EMPTY
59466: LIST
59467: LIST
59468: LIST
59469: PUSH
59470: LD_VAR 0 1
59474: PUSH
59475: LD_INT 4
59477: PLUS
59478: PUSH
59479: LD_VAR 0 2
59483: PUSH
59484: LD_INT 4
59486: PUSH
59487: EMPTY
59488: LIST
59489: LIST
59490: LIST
59491: PUSH
59492: LD_VAR 0 1
59496: PUSH
59497: LD_VAR 0 2
59501: PUSH
59502: LD_INT 4
59504: PLUS
59505: PUSH
59506: LD_INT 0
59508: PUSH
59509: EMPTY
59510: LIST
59511: LIST
59512: LIST
59513: PUSH
59514: LD_VAR 0 1
59518: PUSH
59519: LD_INT 3
59521: MINUS
59522: PUSH
59523: LD_VAR 0 2
59527: PUSH
59528: LD_INT 1
59530: PUSH
59531: EMPTY
59532: LIST
59533: LIST
59534: LIST
59535: PUSH
59536: LD_VAR 0 1
59540: PUSH
59541: LD_INT 4
59543: MINUS
59544: PUSH
59545: LD_VAR 0 2
59549: PUSH
59550: LD_INT 4
59552: MINUS
59553: PUSH
59554: LD_INT 2
59556: PUSH
59557: EMPTY
59558: LIST
59559: LIST
59560: LIST
59561: PUSH
59562: EMPTY
59563: LIST
59564: LIST
59565: LIST
59566: LIST
59567: LIST
59568: ST_TO_ADDR
// end ; 3 :
59569: GO 59991
59571: LD_INT 3
59573: DOUBLE
59574: EQUAL
59575: IFTRUE 59579
59577: GO 59712
59579: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
59580: LD_ADDR_VAR 0 5
59584: PUSH
59585: LD_VAR 0 1
59589: PUSH
59590: LD_INT 3
59592: PLUS
59593: PUSH
59594: LD_VAR 0 2
59598: PUSH
59599: LD_INT 4
59601: PUSH
59602: EMPTY
59603: LIST
59604: LIST
59605: LIST
59606: PUSH
59607: LD_VAR 0 1
59611: PUSH
59612: LD_INT 4
59614: PLUS
59615: PUSH
59616: LD_VAR 0 2
59620: PUSH
59621: LD_INT 4
59623: PLUS
59624: PUSH
59625: LD_INT 5
59627: PUSH
59628: EMPTY
59629: LIST
59630: LIST
59631: LIST
59632: PUSH
59633: LD_VAR 0 1
59637: PUSH
59638: LD_INT 4
59640: MINUS
59641: PUSH
59642: LD_VAR 0 2
59646: PUSH
59647: LD_INT 1
59649: PUSH
59650: EMPTY
59651: LIST
59652: LIST
59653: LIST
59654: PUSH
59655: LD_VAR 0 1
59659: PUSH
59660: LD_VAR 0 2
59664: PUSH
59665: LD_INT 4
59667: MINUS
59668: PUSH
59669: LD_INT 3
59671: PUSH
59672: EMPTY
59673: LIST
59674: LIST
59675: LIST
59676: PUSH
59677: LD_VAR 0 1
59681: PUSH
59682: LD_INT 3
59684: MINUS
59685: PUSH
59686: LD_VAR 0 2
59690: PUSH
59691: LD_INT 3
59693: MINUS
59694: PUSH
59695: LD_INT 2
59697: PUSH
59698: EMPTY
59699: LIST
59700: LIST
59701: LIST
59702: PUSH
59703: EMPTY
59704: LIST
59705: LIST
59706: LIST
59707: LIST
59708: LIST
59709: ST_TO_ADDR
// end ; 4 :
59710: GO 59991
59712: LD_INT 4
59714: DOUBLE
59715: EQUAL
59716: IFTRUE 59720
59718: GO 59853
59720: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
59721: LD_ADDR_VAR 0 5
59725: PUSH
59726: LD_VAR 0 1
59730: PUSH
59731: LD_VAR 0 2
59735: PUSH
59736: LD_INT 4
59738: PLUS
59739: PUSH
59740: LD_INT 0
59742: PUSH
59743: EMPTY
59744: LIST
59745: LIST
59746: LIST
59747: PUSH
59748: LD_VAR 0 1
59752: PUSH
59753: LD_INT 3
59755: PLUS
59756: PUSH
59757: LD_VAR 0 2
59761: PUSH
59762: LD_INT 3
59764: PLUS
59765: PUSH
59766: LD_INT 5
59768: PUSH
59769: EMPTY
59770: LIST
59771: LIST
59772: LIST
59773: PUSH
59774: LD_VAR 0 1
59778: PUSH
59779: LD_INT 4
59781: PLUS
59782: PUSH
59783: LD_VAR 0 2
59787: PUSH
59788: LD_INT 4
59790: PUSH
59791: EMPTY
59792: LIST
59793: LIST
59794: LIST
59795: PUSH
59796: LD_VAR 0 1
59800: PUSH
59801: LD_VAR 0 2
59805: PUSH
59806: LD_INT 3
59808: MINUS
59809: PUSH
59810: LD_INT 3
59812: PUSH
59813: EMPTY
59814: LIST
59815: LIST
59816: LIST
59817: PUSH
59818: LD_VAR 0 1
59822: PUSH
59823: LD_INT 4
59825: MINUS
59826: PUSH
59827: LD_VAR 0 2
59831: PUSH
59832: LD_INT 4
59834: MINUS
59835: PUSH
59836: LD_INT 2
59838: PUSH
59839: EMPTY
59840: LIST
59841: LIST
59842: LIST
59843: PUSH
59844: EMPTY
59845: LIST
59846: LIST
59847: LIST
59848: LIST
59849: LIST
59850: ST_TO_ADDR
// end ; 5 :
59851: GO 59991
59853: LD_INT 5
59855: DOUBLE
59856: EQUAL
59857: IFTRUE 59861
59859: GO 59990
59861: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
59862: LD_ADDR_VAR 0 5
59866: PUSH
59867: LD_VAR 0 1
59871: PUSH
59872: LD_INT 4
59874: MINUS
59875: PUSH
59876: LD_VAR 0 2
59880: PUSH
59881: LD_INT 1
59883: PUSH
59884: EMPTY
59885: LIST
59886: LIST
59887: LIST
59888: PUSH
59889: LD_VAR 0 1
59893: PUSH
59894: LD_VAR 0 2
59898: PUSH
59899: LD_INT 4
59901: MINUS
59902: PUSH
59903: LD_INT 3
59905: PUSH
59906: EMPTY
59907: LIST
59908: LIST
59909: LIST
59910: PUSH
59911: LD_VAR 0 1
59915: PUSH
59916: LD_INT 4
59918: PLUS
59919: PUSH
59920: LD_VAR 0 2
59924: PUSH
59925: LD_INT 4
59927: PLUS
59928: PUSH
59929: LD_INT 5
59931: PUSH
59932: EMPTY
59933: LIST
59934: LIST
59935: LIST
59936: PUSH
59937: LD_VAR 0 1
59941: PUSH
59942: LD_INT 3
59944: PLUS
59945: PUSH
59946: LD_VAR 0 2
59950: PUSH
59951: LD_INT 4
59953: PUSH
59954: EMPTY
59955: LIST
59956: LIST
59957: LIST
59958: PUSH
59959: LD_VAR 0 1
59963: PUSH
59964: LD_VAR 0 2
59968: PUSH
59969: LD_INT 3
59971: PLUS
59972: PUSH
59973: LD_INT 0
59975: PUSH
59976: EMPTY
59977: LIST
59978: LIST
59979: LIST
59980: PUSH
59981: EMPTY
59982: LIST
59983: LIST
59984: LIST
59985: LIST
59986: LIST
59987: ST_TO_ADDR
// end ; end ;
59988: GO 59991
59990: POP
// result := list ;
59991: LD_ADDR_VAR 0 4
59995: PUSH
59996: LD_VAR 0 5
60000: ST_TO_ADDR
// end ;
60001: LD_VAR 0 4
60005: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
60006: LD_INT 0
60008: PPUSH
60009: PPUSH
60010: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
60011: LD_VAR 0 1
60015: NOT
60016: PUSH
60017: LD_VAR 0 2
60021: PUSH
60022: LD_INT 1
60024: PUSH
60025: LD_INT 2
60027: PUSH
60028: LD_INT 3
60030: PUSH
60031: LD_INT 4
60033: PUSH
60034: EMPTY
60035: LIST
60036: LIST
60037: LIST
60038: LIST
60039: IN
60040: NOT
60041: OR
60042: IFFALSE 60046
// exit ;
60044: GO 60138
// tmp := [ ] ;
60046: LD_ADDR_VAR 0 5
60050: PUSH
60051: EMPTY
60052: ST_TO_ADDR
// for i in units do
60053: LD_ADDR_VAR 0 4
60057: PUSH
60058: LD_VAR 0 1
60062: PUSH
60063: FOR_IN
60064: IFFALSE 60107
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
60066: LD_ADDR_VAR 0 5
60070: PUSH
60071: LD_VAR 0 5
60075: PPUSH
60076: LD_VAR 0 5
60080: PUSH
60081: LD_INT 1
60083: PLUS
60084: PPUSH
60085: LD_VAR 0 4
60089: PPUSH
60090: LD_VAR 0 2
60094: PPUSH
60095: CALL_OW 259
60099: PPUSH
60100: CALL_OW 2
60104: ST_TO_ADDR
60105: GO 60063
60107: POP
60108: POP
// if not tmp then
60109: LD_VAR 0 5
60113: NOT
60114: IFFALSE 60118
// exit ;
60116: GO 60138
// result := SortListByListDesc ( units , tmp ) ;
60118: LD_ADDR_VAR 0 3
60122: PUSH
60123: LD_VAR 0 1
60127: PPUSH
60128: LD_VAR 0 5
60132: PPUSH
60133: CALL_OW 77
60137: ST_TO_ADDR
// end ;
60138: LD_VAR 0 3
60142: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
60143: LD_INT 0
60145: PPUSH
60146: PPUSH
60147: PPUSH
// result := false ;
60148: LD_ADDR_VAR 0 3
60152: PUSH
60153: LD_INT 0
60155: ST_TO_ADDR
// x := GetX ( building ) ;
60156: LD_ADDR_VAR 0 4
60160: PUSH
60161: LD_VAR 0 2
60165: PPUSH
60166: CALL_OW 250
60170: ST_TO_ADDR
// y := GetY ( building ) ;
60171: LD_ADDR_VAR 0 5
60175: PUSH
60176: LD_VAR 0 2
60180: PPUSH
60181: CALL_OW 251
60185: ST_TO_ADDR
// if not building or not x or not y then
60186: LD_VAR 0 2
60190: NOT
60191: PUSH
60192: LD_VAR 0 4
60196: NOT
60197: OR
60198: PUSH
60199: LD_VAR 0 5
60203: NOT
60204: OR
60205: IFFALSE 60209
// exit ;
60207: GO 60301
// if GetTaskList ( unit ) then
60209: LD_VAR 0 1
60213: PPUSH
60214: CALL_OW 437
60218: IFFALSE 60301
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
60220: LD_STRING e
60222: PUSH
60223: LD_VAR 0 1
60227: PPUSH
60228: CALL_OW 437
60232: PUSH
60233: LD_INT 1
60235: ARRAY
60236: PUSH
60237: LD_INT 1
60239: ARRAY
60240: EQUAL
60241: PUSH
60242: LD_VAR 0 4
60246: PUSH
60247: LD_VAR 0 1
60251: PPUSH
60252: CALL_OW 437
60256: PUSH
60257: LD_INT 1
60259: ARRAY
60260: PUSH
60261: LD_INT 2
60263: ARRAY
60264: EQUAL
60265: AND
60266: PUSH
60267: LD_VAR 0 5
60271: PUSH
60272: LD_VAR 0 1
60276: PPUSH
60277: CALL_OW 437
60281: PUSH
60282: LD_INT 1
60284: ARRAY
60285: PUSH
60286: LD_INT 3
60288: ARRAY
60289: EQUAL
60290: AND
60291: IFFALSE 60301
// result := true end ;
60293: LD_ADDR_VAR 0 3
60297: PUSH
60298: LD_INT 1
60300: ST_TO_ADDR
// end ;
60301: LD_VAR 0 3
60305: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
60306: LD_INT 0
60308: PPUSH
// result := false ;
60309: LD_ADDR_VAR 0 4
60313: PUSH
60314: LD_INT 0
60316: ST_TO_ADDR
// if GetTaskList ( unit ) then
60317: LD_VAR 0 1
60321: PPUSH
60322: CALL_OW 437
60326: IFFALSE 60409
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
60328: LD_STRING M
60330: PUSH
60331: LD_VAR 0 1
60335: PPUSH
60336: CALL_OW 437
60340: PUSH
60341: LD_INT 1
60343: ARRAY
60344: PUSH
60345: LD_INT 1
60347: ARRAY
60348: EQUAL
60349: PUSH
60350: LD_VAR 0 2
60354: PUSH
60355: LD_VAR 0 1
60359: PPUSH
60360: CALL_OW 437
60364: PUSH
60365: LD_INT 1
60367: ARRAY
60368: PUSH
60369: LD_INT 2
60371: ARRAY
60372: EQUAL
60373: AND
60374: PUSH
60375: LD_VAR 0 3
60379: PUSH
60380: LD_VAR 0 1
60384: PPUSH
60385: CALL_OW 437
60389: PUSH
60390: LD_INT 1
60392: ARRAY
60393: PUSH
60394: LD_INT 3
60396: ARRAY
60397: EQUAL
60398: AND
60399: IFFALSE 60409
// result := true ;
60401: LD_ADDR_VAR 0 4
60405: PUSH
60406: LD_INT 1
60408: ST_TO_ADDR
// end ; end ;
60409: LD_VAR 0 4
60413: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
60414: LD_INT 0
60416: PPUSH
60417: PPUSH
60418: PPUSH
60419: PPUSH
// if not unit or not area then
60420: LD_VAR 0 1
60424: NOT
60425: PUSH
60426: LD_VAR 0 2
60430: NOT
60431: OR
60432: IFFALSE 60436
// exit ;
60434: GO 60600
// tmp := AreaToList ( area , i ) ;
60436: LD_ADDR_VAR 0 6
60440: PUSH
60441: LD_VAR 0 2
60445: PPUSH
60446: LD_VAR 0 5
60450: PPUSH
60451: CALL_OW 517
60455: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
60456: LD_ADDR_VAR 0 5
60460: PUSH
60461: DOUBLE
60462: LD_INT 1
60464: DEC
60465: ST_TO_ADDR
60466: LD_VAR 0 6
60470: PUSH
60471: LD_INT 1
60473: ARRAY
60474: PUSH
60475: FOR_TO
60476: IFFALSE 60598
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
60478: LD_ADDR_VAR 0 7
60482: PUSH
60483: LD_VAR 0 6
60487: PUSH
60488: LD_INT 1
60490: ARRAY
60491: PUSH
60492: LD_VAR 0 5
60496: ARRAY
60497: PUSH
60498: LD_VAR 0 6
60502: PUSH
60503: LD_INT 2
60505: ARRAY
60506: PUSH
60507: LD_VAR 0 5
60511: ARRAY
60512: PUSH
60513: EMPTY
60514: LIST
60515: LIST
60516: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
60517: LD_VAR 0 7
60521: PUSH
60522: LD_INT 1
60524: ARRAY
60525: PPUSH
60526: LD_VAR 0 7
60530: PUSH
60531: LD_INT 2
60533: ARRAY
60534: PPUSH
60535: CALL_OW 428
60539: PUSH
60540: LD_INT 0
60542: EQUAL
60543: IFFALSE 60596
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
60545: LD_VAR 0 1
60549: PPUSH
60550: LD_VAR 0 7
60554: PUSH
60555: LD_INT 1
60557: ARRAY
60558: PPUSH
60559: LD_VAR 0 7
60563: PUSH
60564: LD_INT 2
60566: ARRAY
60567: PPUSH
60568: LD_VAR 0 3
60572: PPUSH
60573: CALL_OW 48
// result := IsPlaced ( unit ) ;
60577: LD_ADDR_VAR 0 4
60581: PUSH
60582: LD_VAR 0 1
60586: PPUSH
60587: CALL_OW 305
60591: ST_TO_ADDR
// exit ;
60592: POP
60593: POP
60594: GO 60600
// end ; end ;
60596: GO 60475
60598: POP
60599: POP
// end ;
60600: LD_VAR 0 4
60604: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
60605: LD_INT 0
60607: PPUSH
60608: PPUSH
60609: PPUSH
// if not side or side > 8 then
60610: LD_VAR 0 1
60614: NOT
60615: PUSH
60616: LD_VAR 0 1
60620: PUSH
60621: LD_INT 8
60623: GREATER
60624: OR
60625: IFFALSE 60629
// exit ;
60627: GO 60816
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
60629: LD_ADDR_VAR 0 4
60633: PUSH
60634: LD_INT 22
60636: PUSH
60637: LD_VAR 0 1
60641: PUSH
60642: EMPTY
60643: LIST
60644: LIST
60645: PUSH
60646: LD_INT 21
60648: PUSH
60649: LD_INT 3
60651: PUSH
60652: EMPTY
60653: LIST
60654: LIST
60655: PUSH
60656: EMPTY
60657: LIST
60658: LIST
60659: PPUSH
60660: CALL_OW 69
60664: ST_TO_ADDR
// if not tmp then
60665: LD_VAR 0 4
60669: NOT
60670: IFFALSE 60674
// exit ;
60672: GO 60816
// enable_addtolog := true ;
60674: LD_ADDR_OWVAR 81
60678: PUSH
60679: LD_INT 1
60681: ST_TO_ADDR
// AddToLog ( [ ) ;
60682: LD_STRING [
60684: PPUSH
60685: CALL_OW 561
// for i in tmp do
60689: LD_ADDR_VAR 0 3
60693: PUSH
60694: LD_VAR 0 4
60698: PUSH
60699: FOR_IN
60700: IFFALSE 60807
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
60702: LD_STRING [
60704: PUSH
60705: LD_VAR 0 3
60709: PPUSH
60710: CALL_OW 266
60714: STR
60715: PUSH
60716: LD_STRING , 
60718: STR
60719: PUSH
60720: LD_VAR 0 3
60724: PPUSH
60725: CALL_OW 250
60729: STR
60730: PUSH
60731: LD_STRING , 
60733: STR
60734: PUSH
60735: LD_VAR 0 3
60739: PPUSH
60740: CALL_OW 251
60744: STR
60745: PUSH
60746: LD_STRING , 
60748: STR
60749: PUSH
60750: LD_VAR 0 3
60754: PPUSH
60755: CALL_OW 254
60759: STR
60760: PUSH
60761: LD_STRING , 
60763: STR
60764: PUSH
60765: LD_VAR 0 3
60769: PPUSH
60770: LD_INT 1
60772: PPUSH
60773: CALL_OW 268
60777: STR
60778: PUSH
60779: LD_STRING , 
60781: STR
60782: PUSH
60783: LD_VAR 0 3
60787: PPUSH
60788: LD_INT 2
60790: PPUSH
60791: CALL_OW 268
60795: STR
60796: PUSH
60797: LD_STRING ],
60799: STR
60800: PPUSH
60801: CALL_OW 561
// end ;
60805: GO 60699
60807: POP
60808: POP
// AddToLog ( ]; ) ;
60809: LD_STRING ];
60811: PPUSH
60812: CALL_OW 561
// end ;
60816: LD_VAR 0 2
60820: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
60821: LD_INT 0
60823: PPUSH
60824: PPUSH
60825: PPUSH
60826: PPUSH
60827: PPUSH
// if not area or not rate or not max then
60828: LD_VAR 0 1
60832: NOT
60833: PUSH
60834: LD_VAR 0 2
60838: NOT
60839: OR
60840: PUSH
60841: LD_VAR 0 4
60845: NOT
60846: OR
60847: IFFALSE 60851
// exit ;
60849: GO 61043
// while 1 do
60851: LD_INT 1
60853: IFFALSE 61043
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
60855: LD_ADDR_VAR 0 9
60859: PUSH
60860: LD_VAR 0 1
60864: PPUSH
60865: LD_INT 1
60867: PPUSH
60868: CALL_OW 287
60872: PUSH
60873: LD_INT 10
60875: MUL
60876: ST_TO_ADDR
// r := rate / 10 ;
60877: LD_ADDR_VAR 0 7
60881: PUSH
60882: LD_VAR 0 2
60886: PUSH
60887: LD_INT 10
60889: DIVREAL
60890: ST_TO_ADDR
// time := 1 1$00 ;
60891: LD_ADDR_VAR 0 8
60895: PUSH
60896: LD_INT 2100
60898: ST_TO_ADDR
// if amount < min then
60899: LD_VAR 0 9
60903: PUSH
60904: LD_VAR 0 3
60908: LESS
60909: IFFALSE 60927
// r := r * 2 else
60911: LD_ADDR_VAR 0 7
60915: PUSH
60916: LD_VAR 0 7
60920: PUSH
60921: LD_INT 2
60923: MUL
60924: ST_TO_ADDR
60925: GO 60953
// if amount > max then
60927: LD_VAR 0 9
60931: PUSH
60932: LD_VAR 0 4
60936: GREATER
60937: IFFALSE 60953
// r := r / 2 ;
60939: LD_ADDR_VAR 0 7
60943: PUSH
60944: LD_VAR 0 7
60948: PUSH
60949: LD_INT 2
60951: DIVREAL
60952: ST_TO_ADDR
// time := time / r ;
60953: LD_ADDR_VAR 0 8
60957: PUSH
60958: LD_VAR 0 8
60962: PUSH
60963: LD_VAR 0 7
60967: DIVREAL
60968: ST_TO_ADDR
// if time < 0 then
60969: LD_VAR 0 8
60973: PUSH
60974: LD_INT 0
60976: LESS
60977: IFFALSE 60994
// time := time * - 1 ;
60979: LD_ADDR_VAR 0 8
60983: PUSH
60984: LD_VAR 0 8
60988: PUSH
60989: LD_INT 1
60991: NEG
60992: MUL
60993: ST_TO_ADDR
// wait ( time ) ;
60994: LD_VAR 0 8
60998: PPUSH
60999: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
61003: LD_INT 35
61005: PPUSH
61006: LD_INT 875
61008: PPUSH
61009: CALL_OW 12
61013: PPUSH
61014: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
61018: LD_INT 1
61020: PPUSH
61021: LD_INT 5
61023: PPUSH
61024: CALL_OW 12
61028: PPUSH
61029: LD_VAR 0 1
61033: PPUSH
61034: LD_INT 1
61036: PPUSH
61037: CALL_OW 55
// end ;
61041: GO 60851
// end ;
61043: LD_VAR 0 5
61047: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
61048: LD_INT 0
61050: PPUSH
61051: PPUSH
61052: PPUSH
61053: PPUSH
61054: PPUSH
61055: PPUSH
61056: PPUSH
61057: PPUSH
// if not turrets or not factories then
61058: LD_VAR 0 1
61062: NOT
61063: PUSH
61064: LD_VAR 0 2
61068: NOT
61069: OR
61070: IFFALSE 61074
// exit ;
61072: GO 61381
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
61074: LD_ADDR_VAR 0 10
61078: PUSH
61079: LD_INT 5
61081: PUSH
61082: LD_INT 6
61084: PUSH
61085: EMPTY
61086: LIST
61087: LIST
61088: PUSH
61089: LD_INT 2
61091: PUSH
61092: LD_INT 4
61094: PUSH
61095: EMPTY
61096: LIST
61097: LIST
61098: PUSH
61099: LD_INT 3
61101: PUSH
61102: LD_INT 5
61104: PUSH
61105: EMPTY
61106: LIST
61107: LIST
61108: PUSH
61109: EMPTY
61110: LIST
61111: LIST
61112: LIST
61113: PUSH
61114: LD_INT 24
61116: PUSH
61117: LD_INT 25
61119: PUSH
61120: EMPTY
61121: LIST
61122: LIST
61123: PUSH
61124: LD_INT 23
61126: PUSH
61127: LD_INT 27
61129: PUSH
61130: EMPTY
61131: LIST
61132: LIST
61133: PUSH
61134: EMPTY
61135: LIST
61136: LIST
61137: PUSH
61138: LD_INT 42
61140: PUSH
61141: LD_INT 43
61143: PUSH
61144: EMPTY
61145: LIST
61146: LIST
61147: PUSH
61148: LD_INT 44
61150: PUSH
61151: LD_INT 46
61153: PUSH
61154: EMPTY
61155: LIST
61156: LIST
61157: PUSH
61158: LD_INT 45
61160: PUSH
61161: LD_INT 47
61163: PUSH
61164: EMPTY
61165: LIST
61166: LIST
61167: PUSH
61168: EMPTY
61169: LIST
61170: LIST
61171: LIST
61172: PUSH
61173: EMPTY
61174: LIST
61175: LIST
61176: LIST
61177: ST_TO_ADDR
// result := [ ] ;
61178: LD_ADDR_VAR 0 3
61182: PUSH
61183: EMPTY
61184: ST_TO_ADDR
// for i in turrets do
61185: LD_ADDR_VAR 0 4
61189: PUSH
61190: LD_VAR 0 1
61194: PUSH
61195: FOR_IN
61196: IFFALSE 61379
// begin nat := GetNation ( i ) ;
61198: LD_ADDR_VAR 0 7
61202: PUSH
61203: LD_VAR 0 4
61207: PPUSH
61208: CALL_OW 248
61212: ST_TO_ADDR
// weapon := 0 ;
61213: LD_ADDR_VAR 0 8
61217: PUSH
61218: LD_INT 0
61220: ST_TO_ADDR
// if not nat then
61221: LD_VAR 0 7
61225: NOT
61226: IFFALSE 61230
// continue ;
61228: GO 61195
// for j in list [ nat ] do
61230: LD_ADDR_VAR 0 5
61234: PUSH
61235: LD_VAR 0 10
61239: PUSH
61240: LD_VAR 0 7
61244: ARRAY
61245: PUSH
61246: FOR_IN
61247: IFFALSE 61288
// if GetBWeapon ( i ) = j [ 1 ] then
61249: LD_VAR 0 4
61253: PPUSH
61254: CALL_OW 269
61258: PUSH
61259: LD_VAR 0 5
61263: PUSH
61264: LD_INT 1
61266: ARRAY
61267: EQUAL
61268: IFFALSE 61286
// begin weapon := j [ 2 ] ;
61270: LD_ADDR_VAR 0 8
61274: PUSH
61275: LD_VAR 0 5
61279: PUSH
61280: LD_INT 2
61282: ARRAY
61283: ST_TO_ADDR
// break ;
61284: GO 61288
// end ;
61286: GO 61246
61288: POP
61289: POP
// if not weapon then
61290: LD_VAR 0 8
61294: NOT
61295: IFFALSE 61299
// continue ;
61297: GO 61195
// for k in factories do
61299: LD_ADDR_VAR 0 6
61303: PUSH
61304: LD_VAR 0 2
61308: PUSH
61309: FOR_IN
61310: IFFALSE 61375
// begin weapons := AvailableWeaponList ( k ) ;
61312: LD_ADDR_VAR 0 9
61316: PUSH
61317: LD_VAR 0 6
61321: PPUSH
61322: CALL_OW 478
61326: ST_TO_ADDR
// if not weapons then
61327: LD_VAR 0 9
61331: NOT
61332: IFFALSE 61336
// continue ;
61334: GO 61309
// if weapon in weapons then
61336: LD_VAR 0 8
61340: PUSH
61341: LD_VAR 0 9
61345: IN
61346: IFFALSE 61373
// begin result := [ i , weapon ] ;
61348: LD_ADDR_VAR 0 3
61352: PUSH
61353: LD_VAR 0 4
61357: PUSH
61358: LD_VAR 0 8
61362: PUSH
61363: EMPTY
61364: LIST
61365: LIST
61366: ST_TO_ADDR
// exit ;
61367: POP
61368: POP
61369: POP
61370: POP
61371: GO 61381
// end ; end ;
61373: GO 61309
61375: POP
61376: POP
// end ;
61377: GO 61195
61379: POP
61380: POP
// end ;
61381: LD_VAR 0 3
61385: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
61386: LD_INT 0
61388: PPUSH
// if not side or side > 8 then
61389: LD_VAR 0 3
61393: NOT
61394: PUSH
61395: LD_VAR 0 3
61399: PUSH
61400: LD_INT 8
61402: GREATER
61403: OR
61404: IFFALSE 61408
// exit ;
61406: GO 61467
// if not range then
61408: LD_VAR 0 4
61412: NOT
61413: IFFALSE 61424
// range := - 12 ;
61415: LD_ADDR_VAR 0 4
61419: PUSH
61420: LD_INT 12
61422: NEG
61423: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
61424: LD_VAR 0 1
61428: PPUSH
61429: LD_VAR 0 2
61433: PPUSH
61434: LD_VAR 0 3
61438: PPUSH
61439: LD_VAR 0 4
61443: PPUSH
61444: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
61448: LD_VAR 0 1
61452: PPUSH
61453: LD_VAR 0 2
61457: PPUSH
61458: LD_VAR 0 3
61462: PPUSH
61463: CALL_OW 331
// end ;
61467: LD_VAR 0 5
61471: RET
// export function Video ( mode ) ; begin
61472: LD_INT 0
61474: PPUSH
// ingame_video = mode ;
61475: LD_ADDR_OWVAR 52
61479: PUSH
61480: LD_VAR 0 1
61484: ST_TO_ADDR
// interface_hidden = mode ;
61485: LD_ADDR_OWVAR 54
61489: PUSH
61490: LD_VAR 0 1
61494: ST_TO_ADDR
// end ;
61495: LD_VAR 0 2
61499: RET
// export function Join ( array , element ) ; begin
61500: LD_INT 0
61502: PPUSH
// result := Replace ( array , array + 1 , element ) ;
61503: LD_ADDR_VAR 0 3
61507: PUSH
61508: LD_VAR 0 1
61512: PPUSH
61513: LD_VAR 0 1
61517: PUSH
61518: LD_INT 1
61520: PLUS
61521: PPUSH
61522: LD_VAR 0 2
61526: PPUSH
61527: CALL_OW 1
61531: ST_TO_ADDR
// end ;
61532: LD_VAR 0 3
61536: RET
// export function JoinUnion ( array , element ) ; begin
61537: LD_INT 0
61539: PPUSH
// result := array union element ;
61540: LD_ADDR_VAR 0 3
61544: PUSH
61545: LD_VAR 0 1
61549: PUSH
61550: LD_VAR 0 2
61554: UNION
61555: ST_TO_ADDR
// end ;
61556: LD_VAR 0 3
61560: RET
// export function GetBehemoths ( side ) ; begin
61561: LD_INT 0
61563: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
61564: LD_ADDR_VAR 0 2
61568: PUSH
61569: LD_INT 22
61571: PUSH
61572: LD_VAR 0 1
61576: PUSH
61577: EMPTY
61578: LIST
61579: LIST
61580: PUSH
61581: LD_INT 31
61583: PUSH
61584: LD_INT 25
61586: PUSH
61587: EMPTY
61588: LIST
61589: LIST
61590: PUSH
61591: EMPTY
61592: LIST
61593: LIST
61594: PPUSH
61595: CALL_OW 69
61599: ST_TO_ADDR
// end ;
61600: LD_VAR 0 2
61604: RET
// export function Shuffle ( array ) ; var i , index ; begin
61605: LD_INT 0
61607: PPUSH
61608: PPUSH
61609: PPUSH
// result := [ ] ;
61610: LD_ADDR_VAR 0 2
61614: PUSH
61615: EMPTY
61616: ST_TO_ADDR
// if not array then
61617: LD_VAR 0 1
61621: NOT
61622: IFFALSE 61626
// exit ;
61624: GO 61725
// Randomize ;
61626: CALL_OW 10
// for i = array downto 1 do
61630: LD_ADDR_VAR 0 3
61634: PUSH
61635: DOUBLE
61636: LD_VAR 0 1
61640: INC
61641: ST_TO_ADDR
61642: LD_INT 1
61644: PUSH
61645: FOR_DOWNTO
61646: IFFALSE 61723
// begin index := rand ( 1 , array ) ;
61648: LD_ADDR_VAR 0 4
61652: PUSH
61653: LD_INT 1
61655: PPUSH
61656: LD_VAR 0 1
61660: PPUSH
61661: CALL_OW 12
61665: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
61666: LD_ADDR_VAR 0 2
61670: PUSH
61671: LD_VAR 0 2
61675: PPUSH
61676: LD_VAR 0 2
61680: PUSH
61681: LD_INT 1
61683: PLUS
61684: PPUSH
61685: LD_VAR 0 1
61689: PUSH
61690: LD_VAR 0 4
61694: ARRAY
61695: PPUSH
61696: CALL_OW 2
61700: ST_TO_ADDR
// array := Delete ( array , index ) ;
61701: LD_ADDR_VAR 0 1
61705: PUSH
61706: LD_VAR 0 1
61710: PPUSH
61711: LD_VAR 0 4
61715: PPUSH
61716: CALL_OW 3
61720: ST_TO_ADDR
// end ;
61721: GO 61645
61723: POP
61724: POP
// end ;
61725: LD_VAR 0 2
61729: RET
// export function GetBaseMaterials ( base ) ; begin
61730: LD_INT 0
61732: PPUSH
// result := [ 0 , 0 , 0 ] ;
61733: LD_ADDR_VAR 0 2
61737: PUSH
61738: LD_INT 0
61740: PUSH
61741: LD_INT 0
61743: PUSH
61744: LD_INT 0
61746: PUSH
61747: EMPTY
61748: LIST
61749: LIST
61750: LIST
61751: ST_TO_ADDR
// if not base then
61752: LD_VAR 0 1
61756: NOT
61757: IFFALSE 61761
// exit ;
61759: GO 61810
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
61761: LD_ADDR_VAR 0 2
61765: PUSH
61766: LD_VAR 0 1
61770: PPUSH
61771: LD_INT 1
61773: PPUSH
61774: CALL_OW 275
61778: PUSH
61779: LD_VAR 0 1
61783: PPUSH
61784: LD_INT 2
61786: PPUSH
61787: CALL_OW 275
61791: PUSH
61792: LD_VAR 0 1
61796: PPUSH
61797: LD_INT 3
61799: PPUSH
61800: CALL_OW 275
61804: PUSH
61805: EMPTY
61806: LIST
61807: LIST
61808: LIST
61809: ST_TO_ADDR
// end ;
61810: LD_VAR 0 2
61814: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
61815: LD_INT 0
61817: PPUSH
61818: PPUSH
// result := array ;
61819: LD_ADDR_VAR 0 3
61823: PUSH
61824: LD_VAR 0 1
61828: ST_TO_ADDR
// if size > 0 then
61829: LD_VAR 0 2
61833: PUSH
61834: LD_INT 0
61836: GREATER
61837: IFFALSE 61883
// for i := array downto size do
61839: LD_ADDR_VAR 0 4
61843: PUSH
61844: DOUBLE
61845: LD_VAR 0 1
61849: INC
61850: ST_TO_ADDR
61851: LD_VAR 0 2
61855: PUSH
61856: FOR_DOWNTO
61857: IFFALSE 61881
// result := Delete ( result , result ) ;
61859: LD_ADDR_VAR 0 3
61863: PUSH
61864: LD_VAR 0 3
61868: PPUSH
61869: LD_VAR 0 3
61873: PPUSH
61874: CALL_OW 3
61878: ST_TO_ADDR
61879: GO 61856
61881: POP
61882: POP
// end ;
61883: LD_VAR 0 3
61887: RET
// export function ComExit ( unit ) ; var tmp ; begin
61888: LD_INT 0
61890: PPUSH
61891: PPUSH
// if not IsInUnit ( unit ) then
61892: LD_VAR 0 1
61896: PPUSH
61897: CALL_OW 310
61901: NOT
61902: IFFALSE 61906
// exit ;
61904: GO 61966
// tmp := IsInUnit ( unit ) ;
61906: LD_ADDR_VAR 0 3
61910: PUSH
61911: LD_VAR 0 1
61915: PPUSH
61916: CALL_OW 310
61920: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
61921: LD_VAR 0 3
61925: PPUSH
61926: CALL_OW 247
61930: PUSH
61931: LD_INT 2
61933: EQUAL
61934: IFFALSE 61947
// ComExitVehicle ( unit ) else
61936: LD_VAR 0 1
61940: PPUSH
61941: CALL_OW 121
61945: GO 61956
// ComExitBuilding ( unit ) ;
61947: LD_VAR 0 1
61951: PPUSH
61952: CALL_OW 122
// result := tmp ;
61956: LD_ADDR_VAR 0 2
61960: PUSH
61961: LD_VAR 0 3
61965: ST_TO_ADDR
// end ;
61966: LD_VAR 0 2
61970: RET
// export function ComExitAll ( units ) ; var i ; begin
61971: LD_INT 0
61973: PPUSH
61974: PPUSH
// if not units then
61975: LD_VAR 0 1
61979: NOT
61980: IFFALSE 61984
// exit ;
61982: GO 62010
// for i in units do
61984: LD_ADDR_VAR 0 3
61988: PUSH
61989: LD_VAR 0 1
61993: PUSH
61994: FOR_IN
61995: IFFALSE 62008
// ComExit ( i ) ;
61997: LD_VAR 0 3
62001: PPUSH
62002: CALL 61888 0 1
62006: GO 61994
62008: POP
62009: POP
// end ;
62010: LD_VAR 0 2
62014: RET
// export function ResetHc ; begin
62015: LD_INT 0
62017: PPUSH
// InitHc ;
62018: CALL_OW 19
// hc_importance := 0 ;
62022: LD_ADDR_OWVAR 32
62026: PUSH
62027: LD_INT 0
62029: ST_TO_ADDR
// end ;
62030: LD_VAR 0 1
62034: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
62035: LD_INT 0
62037: PPUSH
62038: PPUSH
62039: PPUSH
// _x := ( x1 + x2 ) div 2 ;
62040: LD_ADDR_VAR 0 6
62044: PUSH
62045: LD_VAR 0 1
62049: PUSH
62050: LD_VAR 0 3
62054: PLUS
62055: PUSH
62056: LD_INT 2
62058: DIV
62059: ST_TO_ADDR
// if _x < 0 then
62060: LD_VAR 0 6
62064: PUSH
62065: LD_INT 0
62067: LESS
62068: IFFALSE 62085
// _x := _x * - 1 ;
62070: LD_ADDR_VAR 0 6
62074: PUSH
62075: LD_VAR 0 6
62079: PUSH
62080: LD_INT 1
62082: NEG
62083: MUL
62084: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
62085: LD_ADDR_VAR 0 7
62089: PUSH
62090: LD_VAR 0 2
62094: PUSH
62095: LD_VAR 0 4
62099: PLUS
62100: PUSH
62101: LD_INT 2
62103: DIV
62104: ST_TO_ADDR
// if _y < 0 then
62105: LD_VAR 0 7
62109: PUSH
62110: LD_INT 0
62112: LESS
62113: IFFALSE 62130
// _y := _y * - 1 ;
62115: LD_ADDR_VAR 0 7
62119: PUSH
62120: LD_VAR 0 7
62124: PUSH
62125: LD_INT 1
62127: NEG
62128: MUL
62129: ST_TO_ADDR
// result := [ _x , _y ] ;
62130: LD_ADDR_VAR 0 5
62134: PUSH
62135: LD_VAR 0 6
62139: PUSH
62140: LD_VAR 0 7
62144: PUSH
62145: EMPTY
62146: LIST
62147: LIST
62148: ST_TO_ADDR
// end ;
62149: LD_VAR 0 5
62153: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
62154: LD_INT 0
62156: PPUSH
62157: PPUSH
62158: PPUSH
62159: PPUSH
// task := GetTaskList ( unit ) ;
62160: LD_ADDR_VAR 0 7
62164: PUSH
62165: LD_VAR 0 1
62169: PPUSH
62170: CALL_OW 437
62174: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
62175: LD_VAR 0 7
62179: NOT
62180: PUSH
62181: LD_VAR 0 1
62185: PPUSH
62186: LD_VAR 0 2
62190: PPUSH
62191: CALL_OW 308
62195: NOT
62196: AND
62197: IFFALSE 62201
// exit ;
62199: GO 62319
// if IsInArea ( unit , area ) then
62201: LD_VAR 0 1
62205: PPUSH
62206: LD_VAR 0 2
62210: PPUSH
62211: CALL_OW 308
62215: IFFALSE 62233
// begin ComMoveToArea ( unit , goAway ) ;
62217: LD_VAR 0 1
62221: PPUSH
62222: LD_VAR 0 3
62226: PPUSH
62227: CALL_OW 113
// exit ;
62231: GO 62319
// end ; if task [ 1 ] [ 1 ] <> M then
62233: LD_VAR 0 7
62237: PUSH
62238: LD_INT 1
62240: ARRAY
62241: PUSH
62242: LD_INT 1
62244: ARRAY
62245: PUSH
62246: LD_STRING M
62248: NONEQUAL
62249: IFFALSE 62253
// exit ;
62251: GO 62319
// x := task [ 1 ] [ 2 ] ;
62253: LD_ADDR_VAR 0 5
62257: PUSH
62258: LD_VAR 0 7
62262: PUSH
62263: LD_INT 1
62265: ARRAY
62266: PUSH
62267: LD_INT 2
62269: ARRAY
62270: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
62271: LD_ADDR_VAR 0 6
62275: PUSH
62276: LD_VAR 0 7
62280: PUSH
62281: LD_INT 1
62283: ARRAY
62284: PUSH
62285: LD_INT 3
62287: ARRAY
62288: ST_TO_ADDR
// if InArea ( x , y , area ) then
62289: LD_VAR 0 5
62293: PPUSH
62294: LD_VAR 0 6
62298: PPUSH
62299: LD_VAR 0 2
62303: PPUSH
62304: CALL_OW 309
62308: IFFALSE 62319
// ComStop ( unit ) ;
62310: LD_VAR 0 1
62314: PPUSH
62315: CALL_OW 141
// end ;
62319: LD_VAR 0 4
62323: RET
// export function Abs ( value ) ; begin
62324: LD_INT 0
62326: PPUSH
// result := value ;
62327: LD_ADDR_VAR 0 2
62331: PUSH
62332: LD_VAR 0 1
62336: ST_TO_ADDR
// if value < 0 then
62337: LD_VAR 0 1
62341: PUSH
62342: LD_INT 0
62344: LESS
62345: IFFALSE 62362
// result := value * - 1 ;
62347: LD_ADDR_VAR 0 2
62351: PUSH
62352: LD_VAR 0 1
62356: PUSH
62357: LD_INT 1
62359: NEG
62360: MUL
62361: ST_TO_ADDR
// end ;
62362: LD_VAR 0 2
62366: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
62367: LD_INT 0
62369: PPUSH
62370: PPUSH
62371: PPUSH
62372: PPUSH
62373: PPUSH
62374: PPUSH
62375: PPUSH
62376: PPUSH
// if not unit or not building then
62377: LD_VAR 0 1
62381: NOT
62382: PUSH
62383: LD_VAR 0 2
62387: NOT
62388: OR
62389: IFFALSE 62393
// exit ;
62391: GO 62619
// x := GetX ( building ) ;
62393: LD_ADDR_VAR 0 4
62397: PUSH
62398: LD_VAR 0 2
62402: PPUSH
62403: CALL_OW 250
62407: ST_TO_ADDR
// y := GetY ( building ) ;
62408: LD_ADDR_VAR 0 6
62412: PUSH
62413: LD_VAR 0 2
62417: PPUSH
62418: CALL_OW 251
62422: ST_TO_ADDR
// d := GetDir ( building ) ;
62423: LD_ADDR_VAR 0 8
62427: PUSH
62428: LD_VAR 0 2
62432: PPUSH
62433: CALL_OW 254
62437: ST_TO_ADDR
// r := 4 ;
62438: LD_ADDR_VAR 0 9
62442: PUSH
62443: LD_INT 4
62445: ST_TO_ADDR
// for i := 1 to 5 do
62446: LD_ADDR_VAR 0 10
62450: PUSH
62451: DOUBLE
62452: LD_INT 1
62454: DEC
62455: ST_TO_ADDR
62456: LD_INT 5
62458: PUSH
62459: FOR_TO
62460: IFFALSE 62617
// begin _x := ShiftX ( x , d , r + i ) ;
62462: LD_ADDR_VAR 0 5
62466: PUSH
62467: LD_VAR 0 4
62471: PPUSH
62472: LD_VAR 0 8
62476: PPUSH
62477: LD_VAR 0 9
62481: PUSH
62482: LD_VAR 0 10
62486: PLUS
62487: PPUSH
62488: CALL_OW 272
62492: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
62493: LD_ADDR_VAR 0 7
62497: PUSH
62498: LD_VAR 0 6
62502: PPUSH
62503: LD_VAR 0 8
62507: PPUSH
62508: LD_VAR 0 9
62512: PUSH
62513: LD_VAR 0 10
62517: PLUS
62518: PPUSH
62519: CALL_OW 273
62523: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
62524: LD_VAR 0 5
62528: PPUSH
62529: LD_VAR 0 7
62533: PPUSH
62534: CALL_OW 488
62538: PUSH
62539: LD_VAR 0 5
62543: PPUSH
62544: LD_VAR 0 7
62548: PPUSH
62549: CALL_OW 428
62553: PPUSH
62554: CALL_OW 247
62558: PUSH
62559: LD_INT 3
62561: PUSH
62562: LD_INT 2
62564: PUSH
62565: EMPTY
62566: LIST
62567: LIST
62568: IN
62569: NOT
62570: AND
62571: IFFALSE 62615
// begin ComMoveXY ( unit , _x , _y ) ;
62573: LD_VAR 0 1
62577: PPUSH
62578: LD_VAR 0 5
62582: PPUSH
62583: LD_VAR 0 7
62587: PPUSH
62588: CALL_OW 111
// result := [ _x , _y ] ;
62592: LD_ADDR_VAR 0 3
62596: PUSH
62597: LD_VAR 0 5
62601: PUSH
62602: LD_VAR 0 7
62606: PUSH
62607: EMPTY
62608: LIST
62609: LIST
62610: ST_TO_ADDR
// exit ;
62611: POP
62612: POP
62613: GO 62619
// end ; end ;
62615: GO 62459
62617: POP
62618: POP
// end ;
62619: LD_VAR 0 3
62623: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
62624: LD_INT 0
62626: PPUSH
62627: PPUSH
62628: PPUSH
// result := 0 ;
62629: LD_ADDR_VAR 0 3
62633: PUSH
62634: LD_INT 0
62636: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
62637: LD_VAR 0 1
62641: PUSH
62642: LD_INT 0
62644: LESS
62645: PUSH
62646: LD_VAR 0 1
62650: PUSH
62651: LD_INT 8
62653: GREATER
62654: OR
62655: PUSH
62656: LD_VAR 0 2
62660: PUSH
62661: LD_INT 0
62663: LESS
62664: OR
62665: PUSH
62666: LD_VAR 0 2
62670: PUSH
62671: LD_INT 8
62673: GREATER
62674: OR
62675: IFFALSE 62679
// exit ;
62677: GO 62754
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
62679: LD_ADDR_VAR 0 4
62683: PUSH
62684: LD_INT 22
62686: PUSH
62687: LD_VAR 0 2
62691: PUSH
62692: EMPTY
62693: LIST
62694: LIST
62695: PPUSH
62696: CALL_OW 69
62700: PUSH
62701: FOR_IN
62702: IFFALSE 62752
// begin un := UnitShoot ( i ) ;
62704: LD_ADDR_VAR 0 5
62708: PUSH
62709: LD_VAR 0 4
62713: PPUSH
62714: CALL_OW 504
62718: ST_TO_ADDR
// if GetSide ( un ) = side1 then
62719: LD_VAR 0 5
62723: PPUSH
62724: CALL_OW 255
62728: PUSH
62729: LD_VAR 0 1
62733: EQUAL
62734: IFFALSE 62750
// begin result := un ;
62736: LD_ADDR_VAR 0 3
62740: PUSH
62741: LD_VAR 0 5
62745: ST_TO_ADDR
// exit ;
62746: POP
62747: POP
62748: GO 62754
// end ; end ;
62750: GO 62701
62752: POP
62753: POP
// end ;
62754: LD_VAR 0 3
62758: RET
// export function GetCargoBay ( units ) ; begin
62759: LD_INT 0
62761: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
62762: LD_ADDR_VAR 0 2
62766: PUSH
62767: LD_VAR 0 1
62771: PPUSH
62772: LD_INT 2
62774: PUSH
62775: LD_INT 34
62777: PUSH
62778: LD_INT 12
62780: PUSH
62781: EMPTY
62782: LIST
62783: LIST
62784: PUSH
62785: LD_INT 34
62787: PUSH
62788: LD_INT 51
62790: PUSH
62791: EMPTY
62792: LIST
62793: LIST
62794: PUSH
62795: LD_INT 34
62797: PUSH
62798: LD_INT 32
62800: PUSH
62801: EMPTY
62802: LIST
62803: LIST
62804: PUSH
62805: LD_INT 34
62807: PUSH
62808: LD_EXP 30
62812: PUSH
62813: EMPTY
62814: LIST
62815: LIST
62816: PUSH
62817: EMPTY
62818: LIST
62819: LIST
62820: LIST
62821: LIST
62822: LIST
62823: PPUSH
62824: CALL_OW 72
62828: ST_TO_ADDR
// end ; end_of_file
62829: LD_VAR 0 2
62833: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
62834: LD_VAR 0 1
62838: PUSH
62839: LD_INT 200
62841: DOUBLE
62842: GREATEREQUAL
62843: IFFALSE 62851
62845: LD_INT 299
62847: DOUBLE
62848: LESSEQUAL
62849: IFTRUE 62853
62851: GO 62885
62853: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
62854: LD_VAR 0 1
62858: PPUSH
62859: LD_VAR 0 2
62863: PPUSH
62864: LD_VAR 0 3
62868: PPUSH
62869: LD_VAR 0 4
62873: PPUSH
62874: LD_VAR 0 5
62878: PPUSH
62879: CALL 21295 0 5
62883: GO 62962
62885: LD_INT 300
62887: DOUBLE
62888: GREATEREQUAL
62889: IFFALSE 62897
62891: LD_INT 399
62893: DOUBLE
62894: LESSEQUAL
62895: IFTRUE 62899
62897: GO 62961
62899: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
62900: LD_VAR 0 1
62904: PPUSH
62905: LD_VAR 0 2
62909: PPUSH
62910: LD_VAR 0 3
62914: PPUSH
62915: LD_VAR 0 4
62919: PPUSH
62920: LD_VAR 0 5
62924: PPUSH
62925: LD_VAR 0 6
62929: PPUSH
62930: LD_VAR 0 7
62934: PPUSH
62935: LD_VAR 0 8
62939: PPUSH
62940: LD_VAR 0 9
62944: PPUSH
62945: LD_VAR 0 10
62949: PPUSH
62950: LD_VAR 0 11
62954: PPUSH
62955: CALL 19183 0 11
62959: GO 62962
62961: POP
// end ;
62962: PPOPN 11
62964: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
62965: LD_VAR 0 1
62969: PPUSH
62970: LD_VAR 0 2
62974: PPUSH
62975: LD_VAR 0 3
62979: PPUSH
62980: LD_VAR 0 4
62984: PPUSH
62985: LD_VAR 0 5
62989: PPUSH
62990: CALL 21277 0 5
// end ; end_of_file
62994: PPOPN 5
62996: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
62997: LD_VAR 0 1
63001: PPUSH
63002: LD_VAR 0 2
63006: PPUSH
63007: LD_VAR 0 3
63011: PPUSH
63012: LD_VAR 0 4
63016: PPUSH
63017: LD_VAR 0 5
63021: PPUSH
63022: LD_VAR 0 6
63026: PPUSH
63027: CALL 7991 0 6
// end ;
63031: PPOPN 6
63033: END
