// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RandomizeAll ;
  11: CALL_OW 11
// Init ;
  15: CALL 87 0 0
// InitRestrictions ;
  19: CALL 215 0 0
// if debug then
  23: LD_EXP 1
  27: IFFALSE 33
// DebugMode ;
  29: CALL 296 0 0
// SpawnApeman ( apemanStartArea , 2 ) ;
  33: LD_INT 12
  35: PPUSH
  36: LD_INT 2
  38: PPUSH
  39: CALL 790 0 2
// SpawnApeman ( apemanArea , [ 10 , 8 , 7 , 6 ] [ Difficulty ] ) ;
  43: LD_INT 11
  45: PPUSH
  46: LD_INT 10
  48: PUSH
  49: LD_INT 8
  51: PUSH
  52: LD_INT 7
  54: PUSH
  55: LD_INT 6
  57: PUSH
  58: EMPTY
  59: LIST
  60: LIST
  61: LIST
  62: LIST
  63: PUSH
  64: LD_OWVAR 67
  68: ARRAY
  69: PPUSH
  70: CALL 790 0 2
// CreateNature ;
  74: CALL 523 0 0
// PrepareAmericans ;
  78: CALL 1389 0 0
// Action ;
  82: CALL 2325 0 0
// end ;
  86: END
// export debug ; export mission_prefix , mission_prefix_prev ; export deltaBuilded , denisArrives , Delta , radar_allowed , first_apeman_tamed , apeman_army , radar_researched , radar_builded ; export apeman_counter , arab_spotted , end_mission , apeKillCounter ; function Init ; begin
  87: LD_INT 0
  89: PPUSH
// debug := false ;
  90: LD_ADDR_EXP 1
  94: PUSH
  95: LD_INT 0
  97: ST_TO_ADDR
// mission_prefix := 05_ ;
  98: LD_ADDR_EXP 2
 102: PUSH
 103: LD_STRING 05_
 105: ST_TO_ADDR
// mission_prefix_prev := 05a_ ;
 106: LD_ADDR_EXP 3
 110: PUSH
 111: LD_STRING 05a_
 113: ST_TO_ADDR
// deltaBuilded := false ;
 114: LD_ADDR_EXP 4
 118: PUSH
 119: LD_INT 0
 121: ST_TO_ADDR
// denisArrives := false ;
 122: LD_ADDR_EXP 5
 126: PUSH
 127: LD_INT 0
 129: ST_TO_ADDR
// radar_allowed := false ;
 130: LD_ADDR_EXP 7
 134: PUSH
 135: LD_INT 0
 137: ST_TO_ADDR
// first_apeman_tamed := false ;
 138: LD_ADDR_EXP 8
 142: PUSH
 143: LD_INT 0
 145: ST_TO_ADDR
// arab_spotted := false ;
 146: LD_ADDR_EXP 13
 150: PUSH
 151: LD_INT 0
 153: ST_TO_ADDR
// end_mission := false ;
 154: LD_ADDR_EXP 14
 158: PUSH
 159: LD_INT 0
 161: ST_TO_ADDR
// apeman_army := false ;
 162: LD_ADDR_EXP 9
 166: PUSH
 167: LD_INT 0
 169: ST_TO_ADDR
// radar_researched := false ;
 170: LD_ADDR_EXP 10
 174: PUSH
 175: LD_INT 0
 177: ST_TO_ADDR
// radar_builded := false ;
 178: LD_ADDR_EXP 11
 182: PUSH
 183: LD_INT 0
 185: ST_TO_ADDR
// apeman_counter := 0 ;
 186: LD_ADDR_EXP 12
 190: PUSH
 191: LD_INT 0
 193: ST_TO_ADDR
// Delta := 0 ;
 194: LD_ADDR_EXP 6
 198: PUSH
 199: LD_INT 0
 201: ST_TO_ADDR
// apeKillCounter := 0 ;
 202: LD_ADDR_EXP 15
 206: PUSH
 207: LD_INT 0
 209: ST_TO_ADDR
// end ;
 210: LD_VAR 0 1
 214: RET
// function InitRestrictions ; begin
 215: LD_INT 0
 217: PPUSH
// SetRestrict ( b_lab_half , 1 , state_enabled ) ;
 218: LD_INT 7
 220: PPUSH
 221: LD_INT 1
 223: PPUSH
 224: LD_INT 1
 226: PPUSH
 227: CALL_OW 324
// SetRestrict ( b_lab_full , 1 , state_enabled ) ;
 231: LD_INT 8
 233: PPUSH
 234: LD_INT 1
 236: PPUSH
 237: LD_INT 1
 239: PPUSH
 240: CALL_OW 324
// SetRestrict ( b_lab_weapon , 1 , state_enabled ) ;
 244: LD_INT 10
 246: PPUSH
 247: LD_INT 1
 249: PPUSH
 250: LD_INT 1
 252: PPUSH
 253: CALL_OW 324
// SetTech ( tech_gatling , 1 , LoadVariable ( GatlingInGamma , 1 ) ) ;
 257: LD_INT 69
 259: PPUSH
 260: LD_INT 1
 262: PPUSH
 263: LD_STRING GatlingInGamma
 265: PPUSH
 266: LD_INT 1
 268: PPUSH
 269: CALL_OW 30
 273: PPUSH
 274: CALL_OW 322
// SetTech ( tech_weap1 , 1 , state_enabled ) ;
 278: LD_INT 51
 280: PPUSH
 281: LD_INT 1
 283: PPUSH
 284: LD_INT 1
 286: PPUSH
 287: CALL_OW 322
// end ;
 291: LD_VAR 0 1
 295: RET
// function DebugMode ; begin
 296: LD_INT 0
 298: PPUSH
// FogOff ( 1 ) ;
 299: LD_INT 1
 301: PPUSH
 302: CALL_OW 344
// Difficulty := 2 ;
 306: LD_ADDR_OWVAR 67
 310: PUSH
 311: LD_INT 2
 313: ST_TO_ADDR
// end ;
 314: LD_VAR 0 1
 318: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 0 ] ] ) >= 7 do
 319: LD_INT 22
 321: PUSH
 322: LD_INT 1
 324: PUSH
 325: EMPTY
 326: LIST
 327: LIST
 328: PUSH
 329: LD_INT 23
 331: PUSH
 332: LD_INT 0
 334: PUSH
 335: EMPTY
 336: LIST
 337: LIST
 338: PUSH
 339: EMPTY
 340: LIST
 341: LIST
 342: PPUSH
 343: CALL_OW 69
 347: PUSH
 348: LD_INT 7
 350: GREATEREQUAL
 351: IFFALSE 363
 353: GO 355
 355: DISABLE
// SetAchievement ( ACH_TAME ) ;
 356: LD_STRING ACH_TAME
 358: PPUSH
 359: CALL_OW 543
 363: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_bweapon , us_radar ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_radar ] ] ) do
 364: LD_INT 22
 366: PUSH
 367: LD_INT 1
 369: PUSH
 370: EMPTY
 371: LIST
 372: LIST
 373: PUSH
 374: LD_INT 35
 376: PUSH
 377: LD_INT 11
 379: PUSH
 380: EMPTY
 381: LIST
 382: LIST
 383: PUSH
 384: EMPTY
 385: LIST
 386: LIST
 387: PPUSH
 388: CALL_OW 69
 392: PUSH
 393: LD_INT 22
 395: PUSH
 396: LD_INT 1
 398: PUSH
 399: EMPTY
 400: LIST
 401: LIST
 402: PUSH
 403: LD_INT 34
 405: PUSH
 406: LD_INT 11
 408: PUSH
 409: EMPTY
 410: LIST
 411: LIST
 412: PUSH
 413: EMPTY
 414: LIST
 415: LIST
 416: PPUSH
 417: CALL_OW 69
 421: AND
 422: IFFALSE 434
 424: GO 426
 426: DISABLE
// SetAchievement ( ACH_RADAR ) ; end_of_file
 427: LD_STRING ACH_RADAR
 429: PPUSH
 430: CALL_OW 543
 434: END
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 435: LD_INT 0
 437: PPUSH
// uc_side := side ;
 438: LD_ADDR_OWVAR 20
 442: PUSH
 443: LD_VAR 0 1
 447: ST_TO_ADDR
// uc_nation := nation ;
 448: LD_ADDR_OWVAR 21
 452: PUSH
 453: LD_VAR 0 2
 457: ST_TO_ADDR
// vc_chassis := chassis ;
 458: LD_ADDR_OWVAR 37
 462: PUSH
 463: LD_VAR 0 3
 467: ST_TO_ADDR
// vc_engine := engine ;
 468: LD_ADDR_OWVAR 39
 472: PUSH
 473: LD_VAR 0 4
 477: ST_TO_ADDR
// vc_control := control ;
 478: LD_ADDR_OWVAR 38
 482: PUSH
 483: LD_VAR 0 5
 487: ST_TO_ADDR
// vc_weapon := weapon ;
 488: LD_ADDR_OWVAR 40
 492: PUSH
 493: LD_VAR 0 6
 497: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 498: LD_ADDR_OWVAR 41
 502: PUSH
 503: LD_VAR 0 7
 507: ST_TO_ADDR
// result := CreateVehicle ;
 508: LD_ADDR_VAR 0 8
 512: PUSH
 513: CALL_OW 45
 517: ST_TO_ADDR
// end ;
 518: LD_VAR 0 8
 522: RET
// export function CreateNature ; var i ; begin
 523: LD_INT 0
 525: PPUSH
 526: PPUSH
// for i := 1 to 4 do
 527: LD_ADDR_VAR 0 2
 531: PUSH
 532: DOUBLE
 533: LD_INT 1
 535: DEC
 536: ST_TO_ADDR
 537: LD_INT 4
 539: PUSH
 540: FOR_TO
 541: IFFALSE 564
// begin PrepareFrog ( ) ;
 543: CALL 62767 0 0
// PlaceUnitArea ( CreateHuman , swampArea , false ) ;
 547: CALL_OW 44
 551: PPUSH
 552: LD_INT 17
 554: PPUSH
 555: LD_INT 0
 557: PPUSH
 558: CALL_OW 49
// end ;
 562: GO 540
 564: POP
 565: POP
// for i := 1 to 6 do
 566: LD_ADDR_VAR 0 2
 570: PUSH
 571: DOUBLE
 572: LD_INT 1
 574: DEC
 575: ST_TO_ADDR
 576: LD_INT 6
 578: PUSH
 579: FOR_TO
 580: IFFALSE 603
// begin PrepareBird ( ) ;
 582: CALL 62847 0 0
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 586: CALL_OW 44
 590: PPUSH
 591: LD_INT 1
 593: PPUSH
 594: LD_INT 0
 596: PPUSH
 597: CALL_OW 49
// end ;
 601: GO 579
 603: POP
 604: POP
// for i := 1 to 11 do
 605: LD_ADDR_VAR 0 2
 609: PUSH
 610: DOUBLE
 611: LD_INT 1
 613: DEC
 614: ST_TO_ADDR
 615: LD_INT 11
 617: PUSH
 618: FOR_TO
 619: IFFALSE 642
// begin PrepareEnchidna ( ) ;
 621: CALL 62727 0 0
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 625: CALL_OW 44
 629: PPUSH
 630: LD_INT 1
 632: PPUSH
 633: LD_INT 0
 635: PPUSH
 636: CALL_OW 49
// end ;
 640: GO 618
 642: POP
 643: POP
// for i := 1 to 3 do
 644: LD_ADDR_VAR 0 2
 648: PUSH
 649: DOUBLE
 650: LD_INT 1
 652: DEC
 653: ST_TO_ADDR
 654: LD_INT 3
 656: PUSH
 657: FOR_TO
 658: IFFALSE 684
// begin PrepareTiger ( 10 ) ;
 660: LD_INT 10
 662: PPUSH
 663: CALL 62666 0 1
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 667: CALL_OW 44
 671: PPUSH
 672: LD_INT 1
 674: PPUSH
 675: LD_INT 0
 677: PPUSH
 678: CALL_OW 49
// end ;
 682: GO 657
 684: POP
 685: POP
// PrepareMastodont ( ) ;
 686: CALL 62927 0 0
// PlaceUnitArea ( CreateVehicle , mastodontArea , false ) ;
 690: CALL_OW 45
 694: PPUSH
 695: LD_INT 18
 697: PPUSH
 698: LD_INT 0
 700: PPUSH
 701: CALL_OW 49
// end ;
 705: LD_VAR 0 1
 709: RET
// export function SayX ( units , ident ) ; var i ; begin
 710: LD_INT 0
 712: PPUSH
 713: PPUSH
// result := false ;
 714: LD_ADDR_VAR 0 3
 718: PUSH
 719: LD_INT 0
 721: ST_TO_ADDR
// if not units then
 722: LD_VAR 0 1
 726: NOT
 727: IFFALSE 731
// exit ;
 729: GO 785
// for i in units do
 731: LD_ADDR_VAR 0 4
 735: PUSH
 736: LD_VAR 0 1
 740: PUSH
 741: FOR_IN
 742: IFFALSE 783
// if IsOk ( i ) then
 744: LD_VAR 0 4
 748: PPUSH
 749: CALL_OW 302
 753: IFFALSE 781
// begin Say ( i , ident ) ;
 755: LD_VAR 0 4
 759: PPUSH
 760: LD_VAR 0 2
 764: PPUSH
 765: CALL_OW 88
// result := i ;
 769: LD_ADDR_VAR 0 3
 773: PUSH
 774: LD_VAR 0 4
 778: ST_TO_ADDR
// break ;
 779: GO 783
// end ;
 781: GO 741
 783: POP
 784: POP
// end ;
 785: LD_VAR 0 3
 789: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 790: LD_INT 0
 792: PPUSH
 793: PPUSH
// InitUc ;
 794: CALL_OW 18
// InitHc ;
 798: CALL_OW 19
// uc_side := 0 ;
 802: LD_ADDR_OWVAR 20
 806: PUSH
 807: LD_INT 0
 809: ST_TO_ADDR
// uc_nation := 0 ;
 810: LD_ADDR_OWVAR 21
 814: PUSH
 815: LD_INT 0
 817: ST_TO_ADDR
// for i = 1 to amount do
 818: LD_ADDR_VAR 0 4
 822: PUSH
 823: DOUBLE
 824: LD_INT 1
 826: DEC
 827: ST_TO_ADDR
 828: LD_VAR 0 2
 832: PUSH
 833: FOR_TO
 834: IFFALSE 916
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 836: LD_ADDR_OWVAR 29
 840: PUSH
 841: LD_INT 9
 843: PPUSH
 844: LD_INT 12
 846: PPUSH
 847: CALL_OW 12
 851: PUSH
 852: LD_INT 9
 854: PPUSH
 855: LD_INT 12
 857: PPUSH
 858: CALL_OW 12
 862: PUSH
 863: EMPTY
 864: LIST
 865: LIST
 866: ST_TO_ADDR
// hc_agressivity := rand ( - 5 , 5 ) ;
 867: LD_ADDR_OWVAR 35
 871: PUSH
 872: LD_INT 5
 874: NEG
 875: PPUSH
 876: LD_INT 5
 878: PPUSH
 879: CALL_OW 12
 883: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 884: LD_INT 0
 886: PPUSH
 887: LD_INT 12
 889: PPUSH
 890: LD_INT 1
 892: PPUSH
 893: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 897: CALL_OW 44
 901: PPUSH
 902: LD_VAR 0 1
 906: PPUSH
 907: LD_INT 0
 909: PPUSH
 910: CALL_OW 49
// end ;
 914: GO 833
 916: POP
 917: POP
// InitHc ;
 918: CALL_OW 19
// end ;
 922: LD_VAR 0 3
 926: RET
// export function Attack ( unit , enemy_list ) ; var target , targets_list ; begin
 927: LD_INT 0
 929: PPUSH
 930: PPUSH
 931: PPUSH
// if not unit then
 932: LD_VAR 0 1
 936: NOT
 937: IFFALSE 941
// exit ;
 939: GO 1384
// if IsInUnit ( unit ) then
 941: LD_VAR 0 1
 945: PPUSH
 946: CALL_OW 310
 950: IFFALSE 967
// unit := IsDrivenBy ( unit ) ;
 952: LD_ADDR_VAR 0 1
 956: PUSH
 957: LD_VAR 0 1
 961: PPUSH
 962: CALL_OW 311
 966: ST_TO_ADDR
// targets_list := [ ] ;
 967: LD_ADDR_VAR 0 5
 971: PUSH
 972: EMPTY
 973: ST_TO_ADDR
// target := UnitFilter ( enemy_list , [ [ f_lives , 250 ] , [ f_not , [ f_weapon , us_cargo_bay ] ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 974: LD_ADDR_VAR 0 4
 978: PUSH
 979: LD_VAR 0 2
 983: PPUSH
 984: LD_INT 24
 986: PUSH
 987: LD_INT 250
 989: PUSH
 990: EMPTY
 991: LIST
 992: LIST
 993: PUSH
 994: LD_INT 3
 996: PUSH
 997: LD_INT 34
 999: PUSH
1000: LD_INT 12
1002: PUSH
1003: EMPTY
1004: LIST
1005: LIST
1006: PUSH
1007: EMPTY
1008: LIST
1009: LIST
1010: PUSH
1011: LD_INT 21
1013: PUSH
1014: LD_INT 2
1016: PUSH
1017: EMPTY
1018: LIST
1019: LIST
1020: PUSH
1021: LD_INT 58
1023: PUSH
1024: EMPTY
1025: LIST
1026: PUSH
1027: EMPTY
1028: LIST
1029: LIST
1030: LIST
1031: LIST
1032: PPUSH
1033: CALL_OW 72
1037: ST_TO_ADDR
// if GetDistUnits ( NearestUnitToUnit ( target , unit ) , unit ) < 11 and not IsInUnit ( unit ) then
1038: LD_VAR 0 4
1042: PPUSH
1043: LD_VAR 0 1
1047: PPUSH
1048: CALL_OW 74
1052: PPUSH
1053: LD_VAR 0 1
1057: PPUSH
1058: CALL_OW 296
1062: PUSH
1063: LD_INT 11
1065: LESS
1066: PUSH
1067: LD_VAR 0 1
1071: PPUSH
1072: CALL_OW 310
1076: NOT
1077: AND
1078: IFFALSE 1106
// begin ComEnterUnit ( unit , NearestUnitToUnit ( target , unit ) ) ;
1080: LD_VAR 0 1
1084: PPUSH
1085: LD_VAR 0 4
1089: PPUSH
1090: LD_VAR 0 1
1094: PPUSH
1095: CALL_OW 74
1099: PPUSH
1100: CALL_OW 120
// exit ;
1104: GO 1384
// end ; targets_list := [ UnitFilter ( enemy_list , [ [ f_type , unit_human ] , [ f_not , [ f_inside ] ] ] ) , UnitFilter ( enemy_list , [ f_type , unit_vehicle ] ) , UnitFilter ( enemy_list , [ [ f_type , unit_building ] , [ f_not , [ f_empty ] ] ] ) , enemy_list ] ;
1106: LD_ADDR_VAR 0 5
1110: PUSH
1111: LD_VAR 0 2
1115: PPUSH
1116: LD_INT 21
1118: PUSH
1119: LD_INT 1
1121: PUSH
1122: EMPTY
1123: LIST
1124: LIST
1125: PUSH
1126: LD_INT 3
1128: PUSH
1129: LD_INT 54
1131: PUSH
1132: EMPTY
1133: LIST
1134: PUSH
1135: EMPTY
1136: LIST
1137: LIST
1138: PUSH
1139: EMPTY
1140: LIST
1141: LIST
1142: PPUSH
1143: CALL_OW 72
1147: PUSH
1148: LD_VAR 0 2
1152: PPUSH
1153: LD_INT 21
1155: PUSH
1156: LD_INT 2
1158: PUSH
1159: EMPTY
1160: LIST
1161: LIST
1162: PPUSH
1163: CALL_OW 72
1167: PUSH
1168: LD_VAR 0 2
1172: PPUSH
1173: LD_INT 21
1175: PUSH
1176: LD_INT 3
1178: PUSH
1179: EMPTY
1180: LIST
1181: LIST
1182: PUSH
1183: LD_INT 3
1185: PUSH
1186: LD_INT 58
1188: PUSH
1189: EMPTY
1190: LIST
1191: PUSH
1192: EMPTY
1193: LIST
1194: LIST
1195: PUSH
1196: EMPTY
1197: LIST
1198: LIST
1199: PPUSH
1200: CALL_OW 72
1204: PUSH
1205: LD_VAR 0 2
1209: PUSH
1210: EMPTY
1211: LIST
1212: LIST
1213: LIST
1214: LIST
1215: ST_TO_ADDR
// for target in targets_list do
1216: LD_ADDR_VAR 0 4
1220: PUSH
1221: LD_VAR 0 5
1225: PUSH
1226: FOR_IN
1227: IFFALSE 1382
// begin if target then
1229: LD_VAR 0 4
1233: IFFALSE 1380
// if GetTag ( unit ) = 11 and ( GetType ( NearestUnitToUnit ( target , unit ) ) = unit_building or GetWeapon ( NearestUnitToUnit ( target , unit ) ) = us_cargo_bay ) then
1235: LD_VAR 0 1
1239: PPUSH
1240: CALL_OW 110
1244: PUSH
1245: LD_INT 11
1247: EQUAL
1248: PUSH
1249: LD_VAR 0 4
1253: PPUSH
1254: LD_VAR 0 1
1258: PPUSH
1259: CALL_OW 74
1263: PPUSH
1264: CALL_OW 247
1268: PUSH
1269: LD_INT 3
1271: EQUAL
1272: PUSH
1273: LD_VAR 0 4
1277: PPUSH
1278: LD_VAR 0 1
1282: PPUSH
1283: CALL_OW 74
1287: PPUSH
1288: CALL_OW 264
1292: PUSH
1293: LD_INT 12
1295: EQUAL
1296: OR
1297: AND
1298: IFFALSE 1344
// begin ComPlaceDelayedCharge ( unit , 0 , 0 , NearestUnitToUnit ( target , unit ) ) ;
1300: LD_VAR 0 1
1304: PPUSH
1305: LD_INT 0
1307: PPUSH
1308: LD_INT 0
1310: PPUSH
1311: LD_VAR 0 4
1315: PPUSH
1316: LD_VAR 0 1
1320: PPUSH
1321: CALL_OW 74
1325: PPUSH
1326: CALL_OW 132
// SetTag ( unit , 0 ) ;
1330: LD_VAR 0 1
1334: PPUSH
1335: LD_INT 0
1337: PPUSH
1338: CALL_OW 109
// end else
1342: GO 1380
// if not HasTask ( unit ) then
1344: LD_VAR 0 1
1348: PPUSH
1349: CALL_OW 314
1353: NOT
1354: IFFALSE 1380
// ComAttackUnit ( unit , NearestUnitToUnit ( target , unit ) ) ;
1356: LD_VAR 0 1
1360: PPUSH
1361: LD_VAR 0 4
1365: PPUSH
1366: LD_VAR 0 1
1370: PPUSH
1371: CALL_OW 74
1375: PPUSH
1376: CALL_OW 115
// end ;
1380: GO 1226
1382: POP
1383: POP
// end ; end_of_file
1384: LD_VAR 0 3
1388: RET
// export JMM , Gladstone , Harrison , Denis , Brown , Donaldson , Lisa , Frank , Bobby , Cyrus , Mike ; export others ; export function PrepareAmericans ; var i , points , veh , tmp ; begin
1389: LD_INT 0
1391: PPUSH
1392: PPUSH
1393: PPUSH
1394: PPUSH
1395: PPUSH
// uc_nation := 1 ;
1396: LD_ADDR_OWVAR 21
1400: PUSH
1401: LD_INT 1
1403: ST_TO_ADDR
// uc_side := 4 ;
1404: LD_ADDR_OWVAR 20
1408: PUSH
1409: LD_INT 4
1411: ST_TO_ADDR
// Denis := PrepareUnit ( Denis , false ,  ) ;
1412: LD_ADDR_EXP 19
1416: PUSH
1417: LD_STRING Denis
1419: PPUSH
1420: LD_INT 0
1422: PPUSH
1423: LD_STRING 
1425: PPUSH
1426: CALL 28810 0 3
1430: ST_TO_ADDR
// Harrison := PrepareUnit ( Harisson , false ,  ) ;
1431: LD_ADDR_EXP 18
1435: PUSH
1436: LD_STRING Harisson
1438: PPUSH
1439: LD_INT 0
1441: PPUSH
1442: LD_STRING 
1444: PPUSH
1445: CALL 28810 0 3
1449: ST_TO_ADDR
// uc_side := 1 ;
1450: LD_ADDR_OWVAR 20
1454: PUSH
1455: LD_INT 1
1457: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debug ) , mission_prefix_prev ) ;
1458: LD_ADDR_EXP 16
1462: PUSH
1463: LD_STRING JMM
1465: PPUSH
1466: LD_EXP 1
1470: NOT
1471: PPUSH
1472: LD_EXP 3
1476: PPUSH
1477: CALL 28810 0 3
1481: ST_TO_ADDR
// Gladstone := PrepareUnit ( Gladstone , false , mission_prefix_prev ) ;
1482: LD_ADDR_EXP 17
1486: PUSH
1487: LD_STRING Gladstone
1489: PPUSH
1490: LD_INT 0
1492: PPUSH
1493: LD_EXP 3
1497: PPUSH
1498: CALL 28810 0 3
1502: ST_TO_ADDR
// if LoadVariable ( BrownInDelta , debug ) then
1503: LD_STRING BrownInDelta
1505: PPUSH
1506: LD_EXP 1
1510: PPUSH
1511: CALL_OW 30
1515: IFFALSE 1557
// begin Brown := PrepareUnit ( Brown , ( not debug ) , mission_prefix_prev ) ;
1517: LD_ADDR_EXP 20
1521: PUSH
1522: LD_STRING Brown
1524: PPUSH
1525: LD_EXP 1
1529: NOT
1530: PPUSH
1531: LD_EXP 3
1535: PPUSH
1536: CALL 28810 0 3
1540: ST_TO_ADDR
// tmp := tmp ^ Brown ;
1541: LD_ADDR_VAR 0 5
1545: PUSH
1546: LD_VAR 0 5
1550: PUSH
1551: LD_EXP 20
1555: ADD
1556: ST_TO_ADDR
// end ; if LoadVariable ( DonaldsonInDelta , debug ) then
1557: LD_STRING DonaldsonInDelta
1559: PPUSH
1560: LD_EXP 1
1564: PPUSH
1565: CALL_OW 30
1569: IFFALSE 1611
// begin Donaldson := PrepareUnit ( Donaldson , ( not debug ) , mission_prefix_prev ) ;
1571: LD_ADDR_EXP 21
1575: PUSH
1576: LD_STRING Donaldson
1578: PPUSH
1579: LD_EXP 1
1583: NOT
1584: PPUSH
1585: LD_EXP 3
1589: PPUSH
1590: CALL 28810 0 3
1594: ST_TO_ADDR
// tmp := tmp ^ Donaldson ;
1595: LD_ADDR_VAR 0 5
1599: PUSH
1600: LD_VAR 0 5
1604: PUSH
1605: LD_EXP 21
1609: ADD
1610: ST_TO_ADDR
// end ; if LoadVariable ( LisaInDelta , debug ) then
1611: LD_STRING LisaInDelta
1613: PPUSH
1614: LD_EXP 1
1618: PPUSH
1619: CALL_OW 30
1623: IFFALSE 1665
// begin Lisa := PrepareUnit ( Lisa , ( not debug ) , mission_prefix_prev ) ;
1625: LD_ADDR_EXP 22
1629: PUSH
1630: LD_STRING Lisa
1632: PPUSH
1633: LD_EXP 1
1637: NOT
1638: PPUSH
1639: LD_EXP 3
1643: PPUSH
1644: CALL 28810 0 3
1648: ST_TO_ADDR
// tmp := tmp ^ Lisa ;
1649: LD_ADDR_VAR 0 5
1653: PUSH
1654: LD_VAR 0 5
1658: PUSH
1659: LD_EXP 22
1663: ADD
1664: ST_TO_ADDR
// end ; if LoadVariable ( FrankInDelta , debug ) then
1665: LD_STRING FrankInDelta
1667: PPUSH
1668: LD_EXP 1
1672: PPUSH
1673: CALL_OW 30
1677: IFFALSE 1719
// begin Frank := PrepareUnit ( Frank , ( not debug ) , mission_prefix_prev ) ;
1679: LD_ADDR_EXP 23
1683: PUSH
1684: LD_STRING Frank
1686: PPUSH
1687: LD_EXP 1
1691: NOT
1692: PPUSH
1693: LD_EXP 3
1697: PPUSH
1698: CALL 28810 0 3
1702: ST_TO_ADDR
// tmp := tmp ^ Frank ;
1703: LD_ADDR_VAR 0 5
1707: PUSH
1708: LD_VAR 0 5
1712: PUSH
1713: LD_EXP 23
1717: ADD
1718: ST_TO_ADDR
// end ; if LoadVariable ( BobbyInDelta , 0 ) then
1719: LD_STRING BobbyInDelta
1721: PPUSH
1722: LD_INT 0
1724: PPUSH
1725: CALL_OW 30
1729: IFFALSE 1771
// begin Bobby := PrepareUnit ( Bobby , ( not debug ) , mission_prefix_prev ) ;
1731: LD_ADDR_EXP 24
1735: PUSH
1736: LD_STRING Bobby
1738: PPUSH
1739: LD_EXP 1
1743: NOT
1744: PPUSH
1745: LD_EXP 3
1749: PPUSH
1750: CALL 28810 0 3
1754: ST_TO_ADDR
// tmp := tmp ^ Bobby ;
1755: LD_ADDR_VAR 0 5
1759: PUSH
1760: LD_VAR 0 5
1764: PUSH
1765: LD_EXP 24
1769: ADD
1770: ST_TO_ADDR
// end ; if LoadVariable ( CyrusInDelta , 0 ) then
1771: LD_STRING CyrusInDelta
1773: PPUSH
1774: LD_INT 0
1776: PPUSH
1777: CALL_OW 30
1781: IFFALSE 1823
// begin Cyrus := PrepareUnit ( Cyrus , ( not debug ) , mission_prefix_prev ) ;
1783: LD_ADDR_EXP 25
1787: PUSH
1788: LD_STRING Cyrus
1790: PPUSH
1791: LD_EXP 1
1795: NOT
1796: PPUSH
1797: LD_EXP 3
1801: PPUSH
1802: CALL 28810 0 3
1806: ST_TO_ADDR
// tmp := tmp ^ Cyrus ;
1807: LD_ADDR_VAR 0 5
1811: PUSH
1812: LD_VAR 0 5
1816: PUSH
1817: LD_EXP 25
1821: ADD
1822: ST_TO_ADDR
// end ; others := CreateCharacterSet ( othersDelta ) ;
1823: LD_ADDR_EXP 27
1827: PUSH
1828: LD_STRING othersDelta
1830: PPUSH
1831: CALL_OW 31
1835: ST_TO_ADDR
// if not others and debug then
1836: LD_EXP 27
1840: NOT
1841: PUSH
1842: LD_EXP 1
1846: AND
1847: IFFALSE 1912
// begin InitHc ;
1849: CALL_OW 19
// for i = 1 to 2 do
1853: LD_ADDR_VAR 0 2
1857: PUSH
1858: DOUBLE
1859: LD_INT 1
1861: DEC
1862: ST_TO_ADDR
1863: LD_INT 2
1865: PUSH
1866: FOR_TO
1867: IFFALSE 1910
// begin PrepareHuman ( false , i mod 4 + 1 , 3 ) ;
1869: LD_INT 0
1871: PPUSH
1872: LD_VAR 0 2
1876: PUSH
1877: LD_INT 4
1879: MOD
1880: PUSH
1881: LD_INT 1
1883: PLUS
1884: PPUSH
1885: LD_INT 3
1887: PPUSH
1888: CALL_OW 380
// others := others ^ CreateHuman ;
1892: LD_ADDR_EXP 27
1896: PUSH
1897: LD_EXP 27
1901: PUSH
1902: CALL_OW 44
1906: ADD
1907: ST_TO_ADDR
// end ;
1908: GO 1866
1910: POP
1911: POP
// end ; if others then
1912: LD_EXP 27
1916: IFFALSE 1934
// tmp := tmp ^ others ;
1918: LD_ADDR_VAR 0 5
1922: PUSH
1923: LD_VAR 0 5
1927: PUSH
1928: LD_EXP 27
1932: ADD
1933: ST_TO_ADDR
// points := [ [ 28 , 49 ] , [ 33 , 54 ] , [ 38 , 56 ] ] ;
1934: LD_ADDR_VAR 0 3
1938: PUSH
1939: LD_INT 28
1941: PUSH
1942: LD_INT 49
1944: PUSH
1945: EMPTY
1946: LIST
1947: LIST
1948: PUSH
1949: LD_INT 33
1951: PUSH
1952: LD_INT 54
1954: PUSH
1955: EMPTY
1956: LIST
1957: LIST
1958: PUSH
1959: LD_INT 38
1961: PUSH
1962: LD_INT 56
1964: PUSH
1965: EMPTY
1966: LIST
1967: LIST
1968: PUSH
1969: EMPTY
1970: LIST
1971: LIST
1972: LIST
1973: ST_TO_ADDR
// veh := PrepareTank ( 1 , 1 , us_medium_wheeled , engine_solar , control_manual , us_cargo_bay , 80 ) ;
1974: LD_ADDR_VAR 0 4
1978: PUSH
1979: LD_INT 1
1981: PPUSH
1982: LD_INT 1
1984: PPUSH
1985: LD_INT 2
1987: PPUSH
1988: LD_INT 2
1990: PPUSH
1991: LD_INT 1
1993: PPUSH
1994: LD_INT 12
1996: PPUSH
1997: LD_INT 80
1999: PPUSH
2000: CALL 435 0 7
2004: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
2005: LD_VAR 0 4
2009: PPUSH
2010: LD_INT 1
2012: PPUSH
2013: CALL_OW 233
// PlaceUnitXY ( veh , points [ 1 ] [ 1 ] , points [ 1 ] [ 2 ] , false ) ;
2017: LD_VAR 0 4
2021: PPUSH
2022: LD_VAR 0 3
2026: PUSH
2027: LD_INT 1
2029: ARRAY
2030: PUSH
2031: LD_INT 1
2033: ARRAY
2034: PPUSH
2035: LD_VAR 0 3
2039: PUSH
2040: LD_INT 1
2042: ARRAY
2043: PUSH
2044: LD_INT 2
2046: ARRAY
2047: PPUSH
2048: LD_INT 0
2050: PPUSH
2051: CALL_OW 48
// SetCargo ( veh , mat_cans , 100 ) ;
2055: LD_VAR 0 4
2059: PPUSH
2060: LD_INT 1
2062: PPUSH
2063: LD_INT 100
2065: PPUSH
2066: CALL_OW 290
// PlaceHumanInUnit ( others [ 1 ] , veh ) ;
2070: LD_EXP 27
2074: PUSH
2075: LD_INT 1
2077: ARRAY
2078: PPUSH
2079: LD_VAR 0 4
2083: PPUSH
2084: CALL_OW 52
// veh := PrepareTank ( 1 , 1 , us_light_wheeled , engine_solar , control_manual , us_machine_gun , 80 ) ;
2088: LD_ADDR_VAR 0 4
2092: PUSH
2093: LD_INT 1
2095: PPUSH
2096: LD_INT 1
2098: PPUSH
2099: LD_INT 1
2101: PPUSH
2102: LD_INT 2
2104: PPUSH
2105: LD_INT 1
2107: PPUSH
2108: LD_INT 2
2110: PPUSH
2111: LD_INT 80
2113: PPUSH
2114: CALL 435 0 7
2118: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
2119: LD_VAR 0 4
2123: PPUSH
2124: LD_INT 1
2126: PPUSH
2127: CALL_OW 233
// PlaceUnitXY ( veh , points [ 2 ] [ 1 ] , points [ 2 ] [ 2 ] , false ) ;
2131: LD_VAR 0 4
2135: PPUSH
2136: LD_VAR 0 3
2140: PUSH
2141: LD_INT 2
2143: ARRAY
2144: PUSH
2145: LD_INT 1
2147: ARRAY
2148: PPUSH
2149: LD_VAR 0 3
2153: PUSH
2154: LD_INT 2
2156: ARRAY
2157: PUSH
2158: LD_INT 2
2160: ARRAY
2161: PPUSH
2162: LD_INT 0
2164: PPUSH
2165: CALL_OW 48
// PlaceHumanInUnit ( Gladstone , veh ) ;
2169: LD_EXP 17
2173: PPUSH
2174: LD_VAR 0 4
2178: PPUSH
2179: CALL_OW 52
// veh := PrepareTank ( 1 , 1 , us_light_wheeled , engine_solar , control_manual , us_light_gun , 80 ) ;
2183: LD_ADDR_VAR 0 4
2187: PUSH
2188: LD_INT 1
2190: PPUSH
2191: LD_INT 1
2193: PPUSH
2194: LD_INT 1
2196: PPUSH
2197: LD_INT 2
2199: PPUSH
2200: LD_INT 1
2202: PPUSH
2203: LD_INT 3
2205: PPUSH
2206: LD_INT 80
2208: PPUSH
2209: CALL 435 0 7
2213: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
2214: LD_VAR 0 4
2218: PPUSH
2219: LD_INT 1
2221: PPUSH
2222: CALL_OW 233
// PlaceUnitXY ( veh , points [ 3 ] [ 1 ] , points [ 3 ] [ 2 ] , false ) ;
2226: LD_VAR 0 4
2230: PPUSH
2231: LD_VAR 0 3
2235: PUSH
2236: LD_INT 3
2238: ARRAY
2239: PUSH
2240: LD_INT 1
2242: ARRAY
2243: PPUSH
2244: LD_VAR 0 3
2248: PUSH
2249: LD_INT 3
2251: ARRAY
2252: PUSH
2253: LD_INT 2
2255: ARRAY
2256: PPUSH
2257: LD_INT 0
2259: PPUSH
2260: CALL_OW 48
// PlaceHumanInUnit ( JMM , veh ) ;
2264: LD_EXP 16
2268: PPUSH
2269: LD_VAR 0 4
2273: PPUSH
2274: CALL_OW 52
// for i in tmp diff others [ 1 ] do
2278: LD_ADDR_VAR 0 2
2282: PUSH
2283: LD_VAR 0 5
2287: PUSH
2288: LD_EXP 27
2292: PUSH
2293: LD_INT 1
2295: ARRAY
2296: DIFF
2297: PUSH
2298: FOR_IN
2299: IFFALSE 2318
// PlaceUnitArea ( i , startArea , false ) ;
2301: LD_VAR 0 2
2305: PPUSH
2306: LD_INT 5
2308: PPUSH
2309: LD_INT 0
2311: PPUSH
2312: CALL_OW 49
2316: GO 2298
2318: POP
2319: POP
// end ; end_of_file
2320: LD_VAR 0 1
2324: RET
// export function Action ; var m ; begin
2325: LD_INT 0
2327: PPUSH
2328: PPUSH
// InGameOn ;
2329: CALL_OW 8
// CenterNowOnXY ( 28 , 51 ) ;
2333: LD_INT 28
2335: PPUSH
2336: LD_INT 51
2338: PPUSH
2339: CALL_OW 86
// Wait ( 3 ) ;
2343: LD_INT 3
2345: PPUSH
2346: CALL_OW 67
// Say ( JMM , D1d-JMM-1a ) ;
2350: LD_EXP 16
2354: PPUSH
2355: LD_STRING D1d-JMM-1a
2357: PPUSH
2358: CALL_OW 88
// SayRadio ( Harrison , D1d-Har-1 ) ;
2362: LD_EXP 18
2366: PPUSH
2367: LD_STRING D1d-Har-1
2369: PPUSH
2370: CALL_OW 94
// InGameOff ;
2374: CALL_OW 9
// SaveForQuickRestart ;
2378: CALL_OW 22
// ChangeMissionObjectives ( M1 ) ;
2382: LD_STRING M1
2384: PPUSH
2385: CALL_OW 337
// Wait ( 0 0$2 ) ;
2389: LD_INT 70
2391: PPUSH
2392: CALL_OW 67
// Say ( JMM , D2-JMM-1 ) ;
2396: LD_EXP 16
2400: PPUSH
2401: LD_STRING D2-JMM-1
2403: PPUSH
2404: CALL_OW 88
// Say ( Gladstone , D2-Glad-1 ) ;
2408: LD_EXP 17
2412: PPUSH
2413: LD_STRING D2-Glad-1
2415: PPUSH
2416: CALL_OW 88
// Say ( JMM , D2-JMM-2 ) ;
2420: LD_EXP 16
2424: PPUSH
2425: LD_STRING D2-JMM-2
2427: PPUSH
2428: CALL_OW 88
// Say ( Gladstone , D2-Glad-2 ) ;
2432: LD_EXP 17
2436: PPUSH
2437: LD_STRING D2-Glad-2
2439: PPUSH
2440: CALL_OW 88
// Say ( JMM , D2-JMM-3 ) ;
2444: LD_EXP 16
2448: PPUSH
2449: LD_STRING D2-JMM-3
2451: PPUSH
2452: CALL_OW 88
// Wait ( rand ( 0 0$30 , 1 1$00 ) ) ;
2456: LD_INT 1050
2458: PPUSH
2459: LD_INT 2100
2461: PPUSH
2462: CALL_OW 12
2466: PPUSH
2467: CALL_OW 67
// SetWeather ( 1 , 570 , 350 ) ;
2471: LD_INT 1
2473: PPUSH
2474: LD_INT 570
2476: PPUSH
2477: LD_INT 350
2479: PPUSH
2480: CALL_OW 550
// Wait ( rand ( 3 3$00 , 5 5$00 ) ) ;
2484: LD_INT 6300
2486: PPUSH
2487: LD_INT 10500
2489: PPUSH
2490: CALL_OW 12
2494: PPUSH
2495: CALL_OW 67
// SetWeather ( 0 , 570 , 350 ) ;
2499: LD_INT 0
2501: PPUSH
2502: LD_INT 570
2504: PPUSH
2505: LD_INT 350
2507: PPUSH
2508: CALL_OW 550
// end ;
2512: LD_VAR 0 1
2516: RET
// every 0 0$01 trigger FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_not , [ f_constructed ] ] , [ f_btype , b_depot ] ] ] ) and not deltaBuilded do
2517: LD_INT 22
2519: PUSH
2520: LD_INT 1
2522: PUSH
2523: EMPTY
2524: LIST
2525: LIST
2526: PUSH
2527: LD_INT 3
2529: PUSH
2530: LD_INT 57
2532: PUSH
2533: EMPTY
2534: LIST
2535: PUSH
2536: EMPTY
2537: LIST
2538: LIST
2539: PUSH
2540: LD_INT 30
2542: PUSH
2543: LD_INT 0
2545: PUSH
2546: EMPTY
2547: LIST
2548: LIST
2549: PUSH
2550: EMPTY
2551: LIST
2552: LIST
2553: LIST
2554: PUSH
2555: EMPTY
2556: LIST
2557: PPUSH
2558: CALL_OW 69
2562: PUSH
2563: LD_EXP 4
2567: NOT
2568: AND
2569: IFFALSE 2582
2571: GO 2573
2573: DISABLE
// begin deltaBuilded := true ;
2574: LD_ADDR_EXP 4
2578: PUSH
2579: LD_INT 1
2581: ST_TO_ADDR
// end ;
2582: END
// every 0 0$01 trigger not Delta and deltaBuilded and FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_not , [ f_constructed ] ] , [ f_btype , b_depot ] ] ] ) do
2583: LD_EXP 6
2587: NOT
2588: PUSH
2589: LD_EXP 4
2593: AND
2594: PUSH
2595: LD_INT 22
2597: PUSH
2598: LD_INT 1
2600: PUSH
2601: EMPTY
2602: LIST
2603: LIST
2604: PUSH
2605: LD_INT 3
2607: PUSH
2608: LD_INT 57
2610: PUSH
2611: EMPTY
2612: LIST
2613: PUSH
2614: EMPTY
2615: LIST
2616: LIST
2617: PUSH
2618: LD_INT 30
2620: PUSH
2621: LD_INT 0
2623: PUSH
2624: EMPTY
2625: LIST
2626: LIST
2627: PUSH
2628: EMPTY
2629: LIST
2630: LIST
2631: LIST
2632: PUSH
2633: EMPTY
2634: LIST
2635: PPUSH
2636: CALL_OW 69
2640: AND
2641: IFFALSE 2727
2643: GO 2645
2645: DISABLE
// begin enable ;
2646: ENABLE
// SetRestrict ( b_depot , 1 , state_disabled ) ;
2647: LD_INT 0
2649: PPUSH
2650: LD_INT 1
2652: PPUSH
2653: LD_INT 0
2655: PPUSH
2656: CALL_OW 324
// Delta := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_not , [ f_constructed ] ] , [ f_btype , b_depot ] ] ] ) [ 1 ] ;
2660: LD_ADDR_EXP 6
2664: PUSH
2665: LD_INT 22
2667: PUSH
2668: LD_INT 1
2670: PUSH
2671: EMPTY
2672: LIST
2673: LIST
2674: PUSH
2675: LD_INT 3
2677: PUSH
2678: LD_INT 57
2680: PUSH
2681: EMPTY
2682: LIST
2683: PUSH
2684: EMPTY
2685: LIST
2686: LIST
2687: PUSH
2688: LD_INT 30
2690: PUSH
2691: LD_INT 0
2693: PUSH
2694: EMPTY
2695: LIST
2696: LIST
2697: PUSH
2698: EMPTY
2699: LIST
2700: LIST
2701: LIST
2702: PUSH
2703: EMPTY
2704: LIST
2705: PPUSH
2706: CALL_OW 69
2710: PUSH
2711: LD_INT 1
2713: ARRAY
2714: ST_TO_ADDR
// SetBName ( Delta , Delta ) ;
2715: LD_EXP 6
2719: PPUSH
2720: LD_STRING Delta
2722: PPUSH
2723: CALL_OW 500
// end ;
2727: END
// every 0 0$2 trigger GetTech ( tech_ApeLang , 1 ) = state_researched and IsOk ( Gladstone ) do
2728: LD_INT 1
2730: PPUSH
2731: LD_INT 1
2733: PPUSH
2734: CALL_OW 321
2738: PUSH
2739: LD_INT 2
2741: EQUAL
2742: PUSH
2743: LD_EXP 17
2747: PPUSH
2748: CALL_OW 302
2752: AND
2753: IFFALSE 2814
2755: GO 2757
2757: DISABLE
// begin DialogueOn ;
2758: CALL_OW 6
// Say ( Gladstone , D3-Glad-1 ) ;
2762: LD_EXP 17
2766: PPUSH
2767: LD_STRING D3-Glad-1
2769: PPUSH
2770: CALL_OW 88
// Say ( JMM , D3-JMM-1 ) ;
2774: LD_EXP 16
2778: PPUSH
2779: LD_STRING D3-JMM-1
2781: PPUSH
2782: CALL_OW 88
// Say ( Gladstone , D3-Glad-2 ) ;
2786: LD_EXP 17
2790: PPUSH
2791: LD_STRING D3-Glad-2
2793: PPUSH
2794: CALL_OW 88
// Say ( JMM , D3-JMM-2 ) ;
2798: LD_EXP 16
2802: PPUSH
2803: LD_STRING D3-JMM-2
2805: PPUSH
2806: CALL_OW 88
// DialogueOff ;
2810: CALL_OW 7
// end ;
2814: END
// every 0 0$1 trigger GetTech ( tech_ApePsych , 1 ) = state_researched and ( IsOk ( Frank ) or ( IsOk ( Denis ) and GetSide ( Denis ) = 1 ) or UnitFilter ( others , [ f_sex , sex_male ] ) ) do var i , sol , ape , b ;
2815: LD_INT 2
2817: PPUSH
2818: LD_INT 1
2820: PPUSH
2821: CALL_OW 321
2825: PUSH
2826: LD_INT 2
2828: EQUAL
2829: PUSH
2830: LD_EXP 23
2834: PPUSH
2835: CALL_OW 302
2839: PUSH
2840: LD_EXP 19
2844: PPUSH
2845: CALL_OW 302
2849: PUSH
2850: LD_EXP 19
2854: PPUSH
2855: CALL_OW 255
2859: PUSH
2860: LD_INT 1
2862: EQUAL
2863: AND
2864: OR
2865: PUSH
2866: LD_EXP 27
2870: PPUSH
2871: LD_INT 26
2873: PUSH
2874: LD_INT 1
2876: PUSH
2877: EMPTY
2878: LIST
2879: LIST
2880: PPUSH
2881: CALL_OW 72
2885: OR
2886: AND
2887: IFFALSE 3428
2889: GO 2891
2891: DISABLE
2892: LD_INT 0
2894: PPUSH
2895: PPUSH
2896: PPUSH
2897: PPUSH
// begin InGameOn ;
2898: CALL_OW 8
// DialogueOn ;
2902: CALL_OW 6
// if Frank then
2906: LD_EXP 23
2910: IFFALSE 2924
// Say ( Frank , D8a-Frank-1 ) ;
2912: LD_EXP 23
2916: PPUSH
2917: LD_STRING D8a-Frank-1
2919: PPUSH
2920: CALL_OW 88
// sol := SayX ( UnitFilter ( others , [ f_sex , sex_male ] ) , D8a-Sol1-1 ) ;
2924: LD_ADDR_VAR 0 2
2928: PUSH
2929: LD_EXP 27
2933: PPUSH
2934: LD_INT 26
2936: PUSH
2937: LD_INT 1
2939: PUSH
2940: EMPTY
2941: LIST
2942: LIST
2943: PPUSH
2944: CALL_OW 72
2948: PPUSH
2949: LD_STRING D8a-Sol1-1
2951: PPUSH
2952: CALL 710 0 2
2956: ST_TO_ADDR
// if Denis and GetSide ( Denis ) = 1 then
2957: LD_EXP 19
2961: PUSH
2962: LD_EXP 19
2966: PPUSH
2967: CALL_OW 255
2971: PUSH
2972: LD_INT 1
2974: EQUAL
2975: AND
2976: IFFALSE 2990
// Say ( Denis , D8a-Den-1 ) ;
2978: LD_EXP 19
2982: PPUSH
2983: LD_STRING D8a-Den-1
2985: PPUSH
2986: CALL_OW 88
// if sol or Denis or Frank then
2990: LD_VAR 0 2
2994: PUSH
2995: LD_EXP 19
2999: OR
3000: PUSH
3001: LD_EXP 23
3005: OR
3006: IFFALSE 3067
// begin SayX ( UnitFilter ( others , [ [ f_class , 4 ] , [ f_sex , sex_male ] ] ) diff sol , D8a-Sci1-1 ) ;
3008: LD_EXP 27
3012: PPUSH
3013: LD_INT 25
3015: PUSH
3016: LD_INT 4
3018: PUSH
3019: EMPTY
3020: LIST
3021: LIST
3022: PUSH
3023: LD_INT 26
3025: PUSH
3026: LD_INT 1
3028: PUSH
3029: EMPTY
3030: LIST
3031: LIST
3032: PUSH
3033: EMPTY
3034: LIST
3035: LIST
3036: PPUSH
3037: CALL_OW 72
3041: PUSH
3042: LD_VAR 0 2
3046: DIFF
3047: PPUSH
3048: LD_STRING D8a-Sci1-1
3050: PPUSH
3051: CALL 710 0 2
// Say ( JMM , D8a-JMM-1 ) ;
3055: LD_EXP 16
3059: PPUSH
3060: LD_STRING D8a-JMM-1
3062: PPUSH
3063: CALL_OW 88
// end ; ape := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_apeman ] , [ f_inside ] ] ) ;
3067: LD_ADDR_VAR 0 3
3071: PUSH
3072: LD_INT 22
3074: PUSH
3075: LD_INT 1
3077: PUSH
3078: EMPTY
3079: LIST
3080: LIST
3081: PUSH
3082: LD_INT 25
3084: PUSH
3085: LD_INT 12
3087: PUSH
3088: EMPTY
3089: LIST
3090: LIST
3091: PUSH
3092: LD_INT 54
3094: PUSH
3095: EMPTY
3096: LIST
3097: PUSH
3098: EMPTY
3099: LIST
3100: LIST
3101: LIST
3102: PPUSH
3103: CALL_OW 69
3107: ST_TO_ADDR
// b := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) [ 1 ] ;
3108: LD_ADDR_VAR 0 4
3112: PUSH
3113: LD_INT 22
3115: PUSH
3116: LD_INT 1
3118: PUSH
3119: EMPTY
3120: LIST
3121: LIST
3122: PUSH
3123: LD_INT 2
3125: PUSH
3126: LD_INT 30
3128: PUSH
3129: LD_INT 6
3131: PUSH
3132: EMPTY
3133: LIST
3134: LIST
3135: PUSH
3136: LD_INT 30
3138: PUSH
3139: LD_INT 7
3141: PUSH
3142: EMPTY
3143: LIST
3144: LIST
3145: PUSH
3146: LD_INT 30
3148: PUSH
3149: LD_INT 8
3151: PUSH
3152: EMPTY
3153: LIST
3154: LIST
3155: PUSH
3156: EMPTY
3157: LIST
3158: LIST
3159: LIST
3160: LIST
3161: PUSH
3162: EMPTY
3163: LIST
3164: LIST
3165: PPUSH
3166: CALL_OW 69
3170: PUSH
3171: LD_INT 1
3173: ARRAY
3174: ST_TO_ADDR
// for i in ape do
3175: LD_ADDR_VAR 0 1
3179: PUSH
3180: LD_VAR 0 3
3184: PUSH
3185: FOR_IN
3186: IFFALSE 3219
// if i in UnitsInside ( b ) then
3188: LD_VAR 0 1
3192: PUSH
3193: LD_VAR 0 4
3197: PPUSH
3198: CALL_OW 313
3202: IN
3203: IFFALSE 3217
// begin ape := i ;
3205: LD_ADDR_VAR 0 3
3209: PUSH
3210: LD_VAR 0 1
3214: ST_TO_ADDR
// break ;
3215: GO 3219
// end ;
3217: GO 3185
3219: POP
3220: POP
// if not ape then
3221: LD_VAR 0 3
3225: NOT
3226: IFFALSE 3238
// begin DialogueOff ;
3228: CALL_OW 7
// InGameOff ;
3232: CALL_OW 9
// exit ;
3236: GO 3428
// end ; RemoveUnit ( ape ) ;
3238: LD_VAR 0 3
3242: PPUSH
3243: CALL_OW 64
// PrepareApeman ( 0 ) ;
3247: LD_INT 0
3249: PPUSH
3250: CALL 62558 0 1
// uc_side := 1 ;
3254: LD_ADDR_OWVAR 20
3258: PUSH
3259: LD_INT 1
3261: ST_TO_ADDR
// hc_name := Mike  ;
3262: LD_ADDR_OWVAR 26
3266: PUSH
3267: LD_STRING Mike 
3269: ST_TO_ADDR
// hc_gallery := us ;
3270: LD_ADDR_OWVAR 33
3274: PUSH
3275: LD_STRING us
3277: ST_TO_ADDR
// hc_face_number := 30 ;
3278: LD_ADDR_OWVAR 34
3282: PUSH
3283: LD_INT 30
3285: ST_TO_ADDR
// hc_attr := [ GetAttr ( ape , attr_stamina ) , GetAttr ( ape , attr_speed ) ] ;
3286: LD_ADDR_OWVAR 29
3290: PUSH
3291: LD_VAR 0 3
3295: PPUSH
3296: LD_INT 1
3298: PPUSH
3299: CALL_OW 260
3303: PUSH
3304: LD_VAR 0 3
3308: PPUSH
3309: LD_INT 2
3311: PPUSH
3312: CALL_OW 260
3316: PUSH
3317: EMPTY
3318: LIST
3319: LIST
3320: ST_TO_ADDR
// hc_skills := [ GetSkill ( ape , 1 ) , GetSkill ( ape , 2 ) , GetSkill ( ape , 3 ) , GetSkill ( ape , 4 ) ] ;
3321: LD_ADDR_OWVAR 31
3325: PUSH
3326: LD_VAR 0 3
3330: PPUSH
3331: LD_INT 1
3333: PPUSH
3334: CALL_OW 259
3338: PUSH
3339: LD_VAR 0 3
3343: PPUSH
3344: LD_INT 2
3346: PPUSH
3347: CALL_OW 259
3351: PUSH
3352: LD_VAR 0 3
3356: PPUSH
3357: LD_INT 3
3359: PPUSH
3360: CALL_OW 259
3364: PUSH
3365: LD_VAR 0 3
3369: PPUSH
3370: LD_INT 4
3372: PPUSH
3373: CALL_OW 259
3377: PUSH
3378: EMPTY
3379: LIST
3380: LIST
3381: LIST
3382: LIST
3383: ST_TO_ADDR
// hc_sex := sex_male ;
3384: LD_ADDR_OWVAR 27
3388: PUSH
3389: LD_INT 1
3391: ST_TO_ADDR
// Mike := CreateHuman ;
3392: LD_ADDR_EXP 26
3396: PUSH
3397: CALL_OW 44
3401: ST_TO_ADDR
// PlaceHumanInUnit ( Mike , b ) ;
3402: LD_EXP 26
3406: PPUSH
3407: LD_VAR 0 4
3411: PPUSH
3412: CALL_OW 52
// InitHc_All ( ) ;
3416: CALL_OW 584
// DialogueOff ;
3420: CALL_OW 7
// InGameOff ;
3424: CALL_OW 9
// end ;
3428: PPOPN 4
3430: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_apeman_engineer ] ] ) do
3431: LD_INT 22
3433: PUSH
3434: LD_INT 1
3436: PUSH
3437: EMPTY
3438: LIST
3439: LIST
3440: PUSH
3441: LD_INT 25
3443: PUSH
3444: LD_INT 16
3446: PUSH
3447: EMPTY
3448: LIST
3449: LIST
3450: PUSH
3451: EMPTY
3452: LIST
3453: LIST
3454: PPUSH
3455: CALL_OW 69
3459: IFFALSE 3518
3461: GO 3463
3463: DISABLE
// begin ChangeMissionObjectives ( M1a ) ;
3464: LD_STRING M1a
3466: PPUSH
3467: CALL_OW 337
// case Query ( Q2 ) of 1 :
3471: LD_STRING Q2
3473: PPUSH
3474: CALL_OW 97
3478: PUSH
3479: LD_INT 1
3481: DOUBLE
3482: EQUAL
3483: IFTRUE 3487
3485: GO 3498
3487: POP
// end_mission := true ; 2 :
3488: LD_ADDR_EXP 14
3492: PUSH
3493: LD_INT 1
3495: ST_TO_ADDR
3496: GO 3518
3498: LD_INT 2
3500: DOUBLE
3501: EQUAL
3502: IFTRUE 3506
3504: GO 3517
3506: POP
// end_the_mission_allowed := true ; end ;
3507: LD_ADDR_OWVAR 57
3511: PUSH
3512: LD_INT 1
3514: ST_TO_ADDR
3515: GO 3518
3517: POP
// end ;
3518: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) and Delta do
3519: LD_INT 22
3521: PUSH
3522: LD_INT 1
3524: PUSH
3525: EMPTY
3526: LIST
3527: LIST
3528: PUSH
3529: LD_INT 2
3531: PUSH
3532: LD_INT 30
3534: PUSH
3535: LD_INT 6
3537: PUSH
3538: EMPTY
3539: LIST
3540: LIST
3541: PUSH
3542: LD_INT 30
3544: PUSH
3545: LD_INT 7
3547: PUSH
3548: EMPTY
3549: LIST
3550: LIST
3551: PUSH
3552: EMPTY
3553: LIST
3554: LIST
3555: LIST
3556: PUSH
3557: EMPTY
3558: LIST
3559: LIST
3560: PPUSH
3561: CALL_OW 69
3565: PUSH
3566: LD_INT 22
3568: PUSH
3569: LD_INT 1
3571: PUSH
3572: EMPTY
3573: LIST
3574: LIST
3575: PUSH
3576: LD_INT 2
3578: PUSH
3579: LD_INT 30
3581: PUSH
3582: LD_INT 2
3584: PUSH
3585: EMPTY
3586: LIST
3587: LIST
3588: PUSH
3589: LD_INT 30
3591: PUSH
3592: LD_INT 3
3594: PUSH
3595: EMPTY
3596: LIST
3597: LIST
3598: PUSH
3599: EMPTY
3600: LIST
3601: LIST
3602: LIST
3603: PUSH
3604: EMPTY
3605: LIST
3606: LIST
3607: PPUSH
3608: CALL_OW 69
3612: AND
3613: PUSH
3614: LD_EXP 6
3618: AND
3619: IFFALSE 4134
3621: GO 3623
3623: DISABLE
// begin Wait ( rand ( 0 0$30 , 0 0$50 ) ) ;
3624: LD_INT 1050
3626: PPUSH
3627: LD_INT 1750
3629: PPUSH
3630: CALL_OW 12
3634: PPUSH
3635: CALL_OW 67
// PlaceUnitArea ( Denis , [ denisArea1 , denisArea2 , denisArea3 , denisArea4 ] [ Difficulty ] , false ) ;
3639: LD_EXP 19
3643: PPUSH
3644: LD_INT 6
3646: PUSH
3647: LD_INT 9
3649: PUSH
3650: LD_INT 10
3652: PUSH
3653: LD_INT 16
3655: PUSH
3656: EMPTY
3657: LIST
3658: LIST
3659: LIST
3660: LIST
3661: PUSH
3662: LD_OWVAR 67
3666: ARRAY
3667: PPUSH
3668: LD_INT 0
3670: PPUSH
3671: CALL_OW 49
// ComHold ( Denis ) ;
3675: LD_EXP 19
3679: PPUSH
3680: CALL_OW 140
// InGameOn ;
3684: CALL_OW 8
// DialogueOn ;
3688: CALL_OW 6
// if Delta then
3692: LD_EXP 6
3696: IFFALSE 3709
// CenterNowOnUnits ( Delta ) else
3698: LD_EXP 6
3702: PPUSH
3703: CALL_OW 87
3707: GO 3718
// CenterNowOnUnits ( JMM ) ;
3709: LD_EXP 16
3713: PPUSH
3714: CALL_OW 87
// SayRadioNoFaceNoName ( Denis , DD-Den-1 ) ;
3718: LD_EXP 19
3722: PPUSH
3723: LD_STRING DD-Den-1
3725: PPUSH
3726: CALL 70197 0 2
// Say ( JMM , DD-JMM-1 ) ;
3730: LD_EXP 16
3734: PPUSH
3735: LD_STRING DD-JMM-1
3737: PPUSH
3738: CALL_OW 88
// SayRadioNoFaceNoName ( Denis , DD-Den-2 ) ;
3742: LD_EXP 19
3746: PPUSH
3747: LD_STRING DD-Den-2
3749: PPUSH
3750: CALL 70197 0 2
// Wait ( 3 ) ;
3754: LD_INT 3
3756: PPUSH
3757: CALL_OW 67
// DialogueOff ;
3761: CALL_OW 7
// InGameOff ;
3765: CALL_OW 9
// if Difficulty = 1 then
3769: LD_OWVAR 67
3773: PUSH
3774: LD_INT 1
3776: EQUAL
3777: IFFALSE 3853
// begin PlaceSeeing ( GetX ( Denis ) , GetY ( Denis ) , 1 , - 12 ) ;
3779: LD_EXP 19
3783: PPUSH
3784: CALL_OW 250
3788: PPUSH
3789: LD_EXP 19
3793: PPUSH
3794: CALL_OW 251
3798: PPUSH
3799: LD_INT 1
3801: PPUSH
3802: LD_INT 12
3804: NEG
3805: PPUSH
3806: CALL_OW 330
// CenterNowOnUnits ( Denis ) ;
3810: LD_EXP 19
3814: PPUSH
3815: CALL_OW 87
// wait ( 0 0$5 ) ;
3819: LD_INT 175
3821: PPUSH
3822: CALL_OW 67
// RemoveSeeing ( GetX ( Denis ) , GetY ( Denis ) , 1 ) ;
3826: LD_EXP 19
3830: PPUSH
3831: CALL_OW 250
3835: PPUSH
3836: LD_EXP 19
3840: PPUSH
3841: CALL_OW 251
3845: PPUSH
3846: LD_INT 1
3848: PPUSH
3849: CALL_OW 331
// end ; repeat wait ( 0 0$01 ) ;
3853: LD_INT 35
3855: PPUSH
3856: CALL_OW 67
// until See ( 1 , Denis ) or IsDead ( Denis ) ;
3860: LD_INT 1
3862: PPUSH
3863: LD_EXP 19
3867: PPUSH
3868: CALL_OW 292
3872: PUSH
3873: LD_EXP 19
3877: PPUSH
3878: CALL_OW 301
3882: OR
3883: IFFALSE 3853
// if IsDead ( Denis ) then
3885: LD_EXP 19
3889: PPUSH
3890: CALL_OW 301
3894: IFFALSE 3898
// exit ;
3896: GO 4134
// SetSide ( Denis , 1 ) ;
3898: LD_EXP 19
3902: PPUSH
3903: LD_INT 1
3905: PPUSH
3906: CALL_OW 235
// Say ( Denis , DD-Den-2a ) ;
3910: LD_EXP 19
3914: PPUSH
3915: LD_STRING DD-Den-2a
3917: PPUSH
3918: CALL_OW 88
// repeat wait ( 0 0$01 ) ;
3922: LD_INT 35
3924: PPUSH
3925: CALL_OW 67
// until GetBType ( IsInUnit ( Denis ) ) in [ b_lab , b_lab_half , b_lab_full ] or IsDead ( Denis ) ;
3929: LD_EXP 19
3933: PPUSH
3934: CALL_OW 310
3938: PPUSH
3939: CALL_OW 266
3943: PUSH
3944: LD_INT 6
3946: PUSH
3947: LD_INT 7
3949: PUSH
3950: LD_INT 8
3952: PUSH
3953: EMPTY
3954: LIST
3955: LIST
3956: LIST
3957: IN
3958: PUSH
3959: LD_EXP 19
3963: PPUSH
3964: CALL_OW 301
3968: OR
3969: IFFALSE 3922
// if IsDead ( Denis ) then
3971: LD_EXP 19
3975: PPUSH
3976: CALL_OW 301
3980: IFFALSE 3984
// exit ;
3982: GO 4134
// Say ( Denis , DD-Den-2b ) ;
3984: LD_EXP 19
3988: PPUSH
3989: LD_STRING DD-Den-2b
3991: PPUSH
3992: CALL_OW 88
// ComChangeProfession ( Denis , 4 ) ;
3996: LD_EXP 19
4000: PPUSH
4001: LD_INT 4
4003: PPUSH
4004: CALL_OW 123
// Wait ( 0 0$02 ) ;
4008: LD_INT 70
4010: PPUSH
4011: CALL_OW 67
// DialogueOn ;
4015: CALL_OW 6
// CenterNowOnUnits ( Denis ) ;
4019: LD_EXP 19
4023: PPUSH
4024: CALL_OW 87
// Say ( JMM , D4-JMM-1 ) ;
4028: LD_EXP 16
4032: PPUSH
4033: LD_STRING D4-JMM-1
4035: PPUSH
4036: CALL_OW 88
// Say ( Denis , D4-Den-1 ) ;
4040: LD_EXP 19
4044: PPUSH
4045: LD_STRING D4-Den-1
4047: PPUSH
4048: CALL_OW 88
// Say ( JMM , D4-JMM-2 ) ;
4052: LD_EXP 16
4056: PPUSH
4057: LD_STRING D4-JMM-2
4059: PPUSH
4060: CALL_OW 88
// Say ( Denis , D4-Den-2 ) ;
4064: LD_EXP 19
4068: PPUSH
4069: LD_STRING D4-Den-2
4071: PPUSH
4072: CALL_OW 88
// DialogueOff ;
4076: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
4080: LD_STRING M2
4082: PPUSH
4083: CALL_OW 337
// radar_allowed := true ;
4087: LD_ADDR_EXP 7
4091: PUSH
4092: LD_INT 1
4094: ST_TO_ADDR
// SetTech ( tech_radar , 1 , state_enabled ) ;
4095: LD_INT 6
4097: PPUSH
4098: LD_INT 1
4100: PPUSH
4101: LD_INT 1
4103: PPUSH
4104: CALL_OW 322
// SetRestrict ( b_lab_opto , 1 , state_enabled ) ;
4108: LD_INT 15
4110: PPUSH
4111: LD_INT 1
4113: PPUSH
4114: LD_INT 1
4116: PPUSH
4117: CALL_OW 324
// SetRestrict ( b_ext_radar , 1 , state_enabled ) ;
4121: LD_INT 20
4123: PPUSH
4124: LD_INT 1
4126: PPUSH
4127: LD_INT 1
4129: PPUSH
4130: CALL_OW 324
// end ;
4134: END
// every 0 0$1 trigger arab_spotted do var sol , sol2 ;
4135: LD_EXP 13
4139: IFFALSE 4762
4141: GO 4143
4143: DISABLE
4144: LD_INT 0
4146: PPUSH
4147: PPUSH
// begin sol := SayX ( UnitFilter ( others , [ f_sex , sex_male ] ) , D5-Sol1-1 ) ;
4148: LD_ADDR_VAR 0 1
4152: PUSH
4153: LD_EXP 27
4157: PPUSH
4158: LD_INT 26
4160: PUSH
4161: LD_INT 1
4163: PUSH
4164: EMPTY
4165: LIST
4166: LIST
4167: PPUSH
4168: CALL_OW 72
4172: PPUSH
4173: LD_STRING D5-Sol1-1
4175: PPUSH
4176: CALL 710 0 2
4180: ST_TO_ADDR
// if not sol then
4181: LD_VAR 0 1
4185: NOT
4186: IFFALSE 4190
// exit ;
4188: GO 4762
// repeat wait ( 0 0$01 ) ;
4190: LD_INT 35
4192: PPUSH
4193: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) = 0 ;
4197: LD_INT 22
4199: PUSH
4200: LD_INT 2
4202: PUSH
4203: EMPTY
4204: LIST
4205: LIST
4206: PUSH
4207: LD_INT 21
4209: PUSH
4210: LD_INT 1
4212: PUSH
4213: EMPTY
4214: LIST
4215: LIST
4216: PUSH
4217: EMPTY
4218: LIST
4219: LIST
4220: PPUSH
4221: CALL_OW 69
4225: PUSH
4226: LD_INT 0
4228: EQUAL
4229: IFFALSE 4190
// if IsOk ( sol ) then
4231: LD_VAR 0 1
4235: PPUSH
4236: CALL_OW 302
4240: IFFALSE 4260
// begin sol2 := others diff sol ;
4242: LD_ADDR_VAR 0 2
4246: PUSH
4247: LD_EXP 27
4251: PUSH
4252: LD_VAR 0 1
4256: DIFF
4257: ST_TO_ADDR
// end else
4258: GO 4262
// exit ;
4260: GO 4762
// if not Lisa and not sol2 then
4262: LD_EXP 22
4266: NOT
4267: PUSH
4268: LD_VAR 0 2
4272: NOT
4273: AND
4274: IFFALSE 4278
// exit ;
4276: GO 4762
// DialogueOn ;
4278: CALL_OW 6
// if Lisa then
4282: LD_EXP 22
4286: IFFALSE 4302
// Say ( Lisa , D5a-Lisa-1 ) else
4288: LD_EXP 22
4292: PPUSH
4293: LD_STRING D5a-Lisa-1
4295: PPUSH
4296: CALL_OW 88
4300: GO 4377
// if sol2 then
4302: LD_VAR 0 2
4306: IFFALSE 4377
// case GetSex ( sol2 [ 1 ] ) of sex_male :
4308: LD_VAR 0 2
4312: PUSH
4313: LD_INT 1
4315: ARRAY
4316: PPUSH
4317: CALL_OW 258
4321: PUSH
4322: LD_INT 1
4324: DOUBLE
4325: EQUAL
4326: IFTRUE 4330
4328: GO 4349
4330: POP
// Say ( sol2 [ 1 ] , D5-Sol2-1 ) ; sex_female :
4331: LD_VAR 0 2
4335: PUSH
4336: LD_INT 1
4338: ARRAY
4339: PPUSH
4340: LD_STRING D5-Sol2-1
4342: PPUSH
4343: CALL_OW 88
4347: GO 4377
4349: LD_INT 2
4351: DOUBLE
4352: EQUAL
4353: IFTRUE 4357
4355: GO 4376
4357: POP
// Say ( sol2 [ 1 ] , D5-FSol2-1 ) ; end ;
4358: LD_VAR 0 2
4362: PUSH
4363: LD_INT 1
4365: ARRAY
4366: PPUSH
4367: LD_STRING D5-FSol2-1
4369: PPUSH
4370: CALL_OW 88
4374: GO 4377
4376: POP
// Say ( sol , D5-Sol1-2 ) ;
4377: LD_VAR 0 1
4381: PPUSH
4382: LD_STRING D5-Sol1-2
4384: PPUSH
4385: CALL_OW 88
// if Lisa then
4389: LD_EXP 22
4393: IFFALSE 4409
// Say ( Lisa , D5a-Lisa-2 ) else
4395: LD_EXP 22
4399: PPUSH
4400: LD_STRING D5a-Lisa-2
4402: PPUSH
4403: CALL_OW 88
4407: GO 4484
// if sol2 then
4409: LD_VAR 0 2
4413: IFFALSE 4484
// case GetSex ( sol2 [ 1 ] ) of sex_male :
4415: LD_VAR 0 2
4419: PUSH
4420: LD_INT 1
4422: ARRAY
4423: PPUSH
4424: CALL_OW 258
4428: PUSH
4429: LD_INT 1
4431: DOUBLE
4432: EQUAL
4433: IFTRUE 4437
4435: GO 4456
4437: POP
// Say ( sol2 [ 1 ] , D5-Sol2-2 ) ; sex_female :
4438: LD_VAR 0 2
4442: PUSH
4443: LD_INT 1
4445: ARRAY
4446: PPUSH
4447: LD_STRING D5-Sol2-2
4449: PPUSH
4450: CALL_OW 88
4454: GO 4484
4456: LD_INT 2
4458: DOUBLE
4459: EQUAL
4460: IFTRUE 4464
4462: GO 4483
4464: POP
// Say ( sol2 [ 1 ] , D5-FSol2-2 ) ; end ;
4465: LD_VAR 0 2
4469: PUSH
4470: LD_INT 1
4472: ARRAY
4473: PPUSH
4474: LD_STRING D5-FSol2-2
4476: PPUSH
4477: CALL_OW 88
4481: GO 4484
4483: POP
// Say ( sol , D5a-Sol1-3 ) ;
4484: LD_VAR 0 1
4488: PPUSH
4489: LD_STRING D5a-Sol1-3
4491: PPUSH
4492: CALL_OW 88
// if Lisa then
4496: LD_EXP 22
4500: IFFALSE 4514
// Say ( Lisa , D5a-Lisa-3 ) ;
4502: LD_EXP 22
4506: PPUSH
4507: LD_STRING D5a-Lisa-3
4509: PPUSH
4510: CALL_OW 88
// if not sol2 then
4514: LD_VAR 0 2
4518: NOT
4519: IFFALSE 4527
// begin DialogueOff ;
4521: CALL_OW 7
// exit ;
4525: GO 4762
// end ; case GetSex ( sol2 [ 1 ] ) of sex_male :
4527: LD_VAR 0 2
4531: PUSH
4532: LD_INT 1
4534: ARRAY
4535: PPUSH
4536: CALL_OW 258
4540: PUSH
4541: LD_INT 1
4543: DOUBLE
4544: EQUAL
4545: IFTRUE 4549
4547: GO 4568
4549: POP
// Say ( sol2 [ 1 ] , D5-Sol2-3 ) ; sex_female :
4550: LD_VAR 0 2
4554: PUSH
4555: LD_INT 1
4557: ARRAY
4558: PPUSH
4559: LD_STRING D5-Sol2-3
4561: PPUSH
4562: CALL_OW 88
4566: GO 4596
4568: LD_INT 2
4570: DOUBLE
4571: EQUAL
4572: IFTRUE 4576
4574: GO 4595
4576: POP
// Say ( sol2 [ 1 ] , D5-FSol2-3 ) ; end ;
4577: LD_VAR 0 2
4581: PUSH
4582: LD_INT 1
4584: ARRAY
4585: PPUSH
4586: LD_STRING D5-FSol2-3
4588: PPUSH
4589: CALL_OW 88
4593: GO 4596
4595: POP
// Say ( sol , D5-Sol1-4 ) ;
4596: LD_VAR 0 1
4600: PPUSH
4601: LD_STRING D5-Sol1-4
4603: PPUSH
4604: CALL_OW 88
// case GetSex ( sol2 [ 1 ] ) of sex_male :
4608: LD_VAR 0 2
4612: PUSH
4613: LD_INT 1
4615: ARRAY
4616: PPUSH
4617: CALL_OW 258
4621: PUSH
4622: LD_INT 1
4624: DOUBLE
4625: EQUAL
4626: IFTRUE 4630
4628: GO 4649
4630: POP
// Say ( sol2 [ 1 ] , D5-Sol2-4 ) ; sex_female :
4631: LD_VAR 0 2
4635: PUSH
4636: LD_INT 1
4638: ARRAY
4639: PPUSH
4640: LD_STRING D5-Sol2-4
4642: PPUSH
4643: CALL_OW 88
4647: GO 4677
4649: LD_INT 2
4651: DOUBLE
4652: EQUAL
4653: IFTRUE 4657
4655: GO 4676
4657: POP
// Say ( sol2 [ 1 ] , D5-FSol2-4 ) ; end ;
4658: LD_VAR 0 2
4662: PUSH
4663: LD_INT 1
4665: ARRAY
4666: PPUSH
4667: LD_STRING D5-FSol2-4
4669: PPUSH
4670: CALL_OW 88
4674: GO 4677
4676: POP
// Say ( sol , D5-Sol1-5 ) ;
4677: LD_VAR 0 1
4681: PPUSH
4682: LD_STRING D5-Sol1-5
4684: PPUSH
4685: CALL_OW 88
// case GetSex ( sol2 [ 1 ] ) of sex_male :
4689: LD_VAR 0 2
4693: PUSH
4694: LD_INT 1
4696: ARRAY
4697: PPUSH
4698: CALL_OW 258
4702: PUSH
4703: LD_INT 1
4705: DOUBLE
4706: EQUAL
4707: IFTRUE 4711
4709: GO 4730
4711: POP
// Say ( sol2 [ 1 ] , D5-Sol2-5 ) ; sex_female :
4712: LD_VAR 0 2
4716: PUSH
4717: LD_INT 1
4719: ARRAY
4720: PPUSH
4721: LD_STRING D5-Sol2-5
4723: PPUSH
4724: CALL_OW 88
4728: GO 4758
4730: LD_INT 2
4732: DOUBLE
4733: EQUAL
4734: IFTRUE 4738
4736: GO 4757
4738: POP
// Say ( sol2 [ 1 ] , D5-FSol2-5 ) ; end ;
4739: LD_VAR 0 2
4743: PUSH
4744: LD_INT 1
4746: ARRAY
4747: PPUSH
4748: LD_STRING D5-FSol2-5
4750: PPUSH
4751: CALL_OW 88
4755: GO 4758
4757: POP
// DialogueOff ;
4758: CALL_OW 7
// end ;
4762: PPOPN 2
4764: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_apeman_engineer ] ] ) >= 5 do
4765: LD_INT 22
4767: PUSH
4768: LD_INT 1
4770: PUSH
4771: EMPTY
4772: LIST
4773: LIST
4774: PUSH
4775: LD_INT 25
4777: PUSH
4778: LD_INT 16
4780: PUSH
4781: EMPTY
4782: LIST
4783: LIST
4784: PUSH
4785: EMPTY
4786: LIST
4787: LIST
4788: PPUSH
4789: CALL_OW 69
4793: PUSH
4794: LD_INT 5
4796: GREATEREQUAL
4797: IFFALSE 4817
4799: GO 4801
4801: DISABLE
// begin ChangeMissionObjectives ( M1b ) ;
4802: LD_STRING M1b
4804: PPUSH
4805: CALL_OW 337
// apeman_army := true ;
4809: LD_ADDR_EXP 9
4813: PUSH
4814: LD_INT 1
4816: ST_TO_ADDR
// end ;
4817: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] , [ f_constructed ] ] ) do
4818: LD_INT 22
4820: PUSH
4821: LD_INT 1
4823: PUSH
4824: EMPTY
4825: LIST
4826: LIST
4827: PUSH
4828: LD_INT 30
4830: PUSH
4831: LD_INT 3
4833: PUSH
4834: EMPTY
4835: LIST
4836: LIST
4837: PUSH
4838: LD_INT 57
4840: PUSH
4841: EMPTY
4842: LIST
4843: PUSH
4844: EMPTY
4845: LIST
4846: LIST
4847: LIST
4848: PPUSH
4849: CALL_OW 69
4853: IFFALSE 4865
4855: GO 4857
4857: DISABLE
// ChangeMissionObjectives ( M1c ) ;
4858: LD_STRING M1c
4860: PPUSH
4861: CALL_OW 337
4865: END
// every 0 0$1 trigger GetTech ( tech_radar , 1 ) = state_researched do
4866: LD_INT 6
4868: PPUSH
4869: LD_INT 1
4871: PPUSH
4872: CALL_OW 321
4876: PUSH
4877: LD_INT 2
4879: EQUAL
4880: IFFALSE 4900
4882: GO 4884
4884: DISABLE
// begin ChangeMissionObjectives ( M2a ) ;
4885: LD_STRING M2a
4887: PPUSH
4888: CALL_OW 337
// radar_researched := true ;
4892: LD_ADDR_EXP 10
4896: PUSH
4897: LD_INT 1
4899: ST_TO_ADDR
// end ;
4900: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_weapon , us_radar ] , [ f_bweapon , us_radar ] ] ] ) do
4901: LD_INT 22
4903: PUSH
4904: LD_INT 1
4906: PUSH
4907: EMPTY
4908: LIST
4909: LIST
4910: PUSH
4911: LD_INT 2
4913: PUSH
4914: LD_INT 34
4916: PUSH
4917: LD_INT 11
4919: PUSH
4920: EMPTY
4921: LIST
4922: LIST
4923: PUSH
4924: LD_INT 35
4926: PUSH
4927: LD_INT 11
4929: PUSH
4930: EMPTY
4931: LIST
4932: LIST
4933: PUSH
4934: EMPTY
4935: LIST
4936: LIST
4937: LIST
4938: PUSH
4939: EMPTY
4940: LIST
4941: LIST
4942: PPUSH
4943: CALL_OW 69
4947: IFFALSE 4967
4949: GO 4951
4951: DISABLE
// begin ChangeMissionObjectives ( M2b ) ;
4952: LD_STRING M2b
4954: PPUSH
4955: CALL_OW 337
// radar_builded := true ;
4959: LD_ADDR_EXP 11
4963: PUSH
4964: LD_INT 1
4966: ST_TO_ADDR
// end ;
4967: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) = 0 and not first_apeman_tamed do
4968: LD_INT 22
4970: PUSH
4971: LD_INT 0
4973: PUSH
4974: EMPTY
4975: LIST
4976: LIST
4977: PUSH
4978: LD_INT 25
4980: PUSH
4981: LD_INT 12
4983: PUSH
4984: EMPTY
4985: LIST
4986: LIST
4987: PUSH
4988: EMPTY
4989: LIST
4990: LIST
4991: PPUSH
4992: CALL_OW 69
4996: PUSH
4997: LD_INT 0
4999: EQUAL
5000: PUSH
5001: LD_EXP 8
5005: NOT
5006: AND
5007: IFFALSE 5019
5009: GO 5011
5011: DISABLE
// YouLost ( Apeman ) ;
5012: LD_STRING Apeman
5014: PPUSH
5015: CALL_OW 104
5019: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_apeman_engineer ] ] ) >= 7 do var i , filter ;
5020: LD_INT 22
5022: PUSH
5023: LD_INT 1
5025: PUSH
5026: EMPTY
5027: LIST
5028: LIST
5029: PUSH
5030: LD_INT 25
5032: PUSH
5033: LD_INT 16
5035: PUSH
5036: EMPTY
5037: LIST
5038: LIST
5039: PUSH
5040: EMPTY
5041: LIST
5042: LIST
5043: PPUSH
5044: CALL_OW 69
5048: PUSH
5049: LD_INT 7
5051: GREATEREQUAL
5052: IFFALSE 5150
5054: GO 5056
5056: DISABLE
5057: LD_INT 0
5059: PPUSH
5060: PPUSH
// begin filter := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 4 ] ] ) ^ JMM ;
5061: LD_ADDR_VAR 0 2
5065: PUSH
5066: LD_INT 22
5068: PUSH
5069: LD_INT 1
5071: PUSH
5072: EMPTY
5073: LIST
5074: LIST
5075: PUSH
5076: LD_INT 21
5078: PUSH
5079: LD_INT 1
5081: PUSH
5082: EMPTY
5083: LIST
5084: LIST
5085: PUSH
5086: LD_INT 25
5088: PUSH
5089: LD_INT 4
5091: PUSH
5092: EMPTY
5093: LIST
5094: LIST
5095: PUSH
5096: EMPTY
5097: LIST
5098: LIST
5099: LIST
5100: PPUSH
5101: CALL_OW 69
5105: PUSH
5106: LD_EXP 16
5110: ADD
5111: ST_TO_ADDR
// if filter then
5112: LD_VAR 0 2
5116: IFFALSE 5150
// for i in filter do
5118: LD_ADDR_VAR 0 1
5122: PUSH
5123: LD_VAR 0 2
5127: PUSH
5128: FOR_IN
5129: IFFALSE 5148
// AddExperience ( i , 4 , 3500 ) ;
5131: LD_VAR 0 1
5135: PPUSH
5136: LD_INT 4
5138: PPUSH
5139: LD_INT 3500
5141: PPUSH
5142: CALL_OW 492
5146: GO 5128
5148: POP
5149: POP
// end ;
5150: PPOPN 2
5152: END
// every 0 0$1 trigger end_mission do var i , tmp , m1 , m2 , m3 ;
5153: LD_EXP 14
5157: IFFALSE 6326
5159: GO 5161
5161: DISABLE
5162: LD_INT 0
5164: PPUSH
5165: PPUSH
5166: PPUSH
5167: PPUSH
5168: PPUSH
// begin if apeKillCounter = 0 then
5169: LD_EXP 15
5173: PUSH
5174: LD_INT 0
5176: EQUAL
5177: IFFALSE 5186
// SetAchievement ( ACH_APEKILLER ) ;
5179: LD_STRING ACH_APEKILLER
5181: PPUSH
5182: CALL_OW 543
// if FilterAllUnits ( [ f_side , 2 ] ) then
5186: LD_INT 22
5188: PUSH
5189: LD_INT 2
5191: PUSH
5192: EMPTY
5193: LIST
5194: LIST
5195: PPUSH
5196: CALL_OW 69
5200: IFFALSE 5238
// for i in FilterAllUnits ( [ f_side , 2 ] ) do
5202: LD_ADDR_VAR 0 1
5206: PUSH
5207: LD_INT 22
5209: PUSH
5210: LD_INT 2
5212: PUSH
5213: EMPTY
5214: LIST
5215: LIST
5216: PPUSH
5217: CALL_OW 69
5221: PUSH
5222: FOR_IN
5223: IFFALSE 5236
// RemoveUnit ( i ) ;
5225: LD_VAR 0 1
5229: PPUSH
5230: CALL_OW 64
5234: GO 5222
5236: POP
5237: POP
// m1 := false ;
5238: LD_ADDR_VAR 0 3
5242: PUSH
5243: LD_INT 0
5245: ST_TO_ADDR
// m2 := false ;
5246: LD_ADDR_VAR 0 4
5250: PUSH
5251: LD_INT 0
5253: ST_TO_ADDR
// m3 := false ;
5254: LD_ADDR_VAR 0 5
5258: PUSH
5259: LD_INT 0
5261: ST_TO_ADDR
// if apeman_army then
5262: LD_EXP 9
5266: IFFALSE 5288
// begin AddMedal ( Tame , 1 ) ;
5268: LD_STRING Tame
5270: PPUSH
5271: LD_INT 1
5273: PPUSH
5274: CALL_OW 101
// m1 := true ;
5278: LD_ADDR_VAR 0 3
5282: PUSH
5283: LD_INT 1
5285: ST_TO_ADDR
// end else
5286: GO 5299
// AddMedal ( Tame , - 1 ) ;
5288: LD_STRING Tame
5290: PPUSH
5291: LD_INT 1
5293: NEG
5294: PPUSH
5295: CALL_OW 101
// if radar_researched then
5299: LD_EXP 10
5303: IFFALSE 5335
// begin SaveVariable ( true , radarResInDelta ) ;
5305: LD_INT 1
5307: PPUSH
5308: LD_STRING radarResInDelta
5310: PPUSH
5311: CALL_OW 39
// AddMedal ( Radar , 1 ) ;
5315: LD_STRING Radar
5317: PPUSH
5318: LD_INT 1
5320: PPUSH
5321: CALL_OW 101
// m2 := true ;
5325: LD_ADDR_VAR 0 4
5329: PUSH
5330: LD_INT 1
5332: ST_TO_ADDR
// end else
5333: GO 5365
// if radar_allowed then
5335: LD_EXP 7
5339: IFFALSE 5354
// AddMedal ( Radar , - 2 ) else
5341: LD_STRING Radar
5343: PPUSH
5344: LD_INT 2
5346: NEG
5347: PPUSH
5348: CALL_OW 101
5352: GO 5365
// AddMedal ( Radar , - 1 ) ;
5354: LD_STRING Radar
5356: PPUSH
5357: LD_INT 1
5359: NEG
5360: PPUSH
5361: CALL_OW 101
// if radar_builded then
5365: LD_EXP 11
5369: IFFALSE 5391
// begin AddMedal ( BuildRadar , 1 ) ;
5371: LD_STRING BuildRadar
5373: PPUSH
5374: LD_INT 1
5376: PPUSH
5377: CALL_OW 101
// m3 := true ;
5381: LD_ADDR_VAR 0 5
5385: PUSH
5386: LD_INT 1
5388: ST_TO_ADDR
// end else
5389: GO 5402
// AddMedal ( BuildRadar , - 1 ) ;
5391: LD_STRING BuildRadar
5393: PPUSH
5394: LD_INT 1
5396: NEG
5397: PPUSH
5398: CALL_OW 101
// if tick <= 7 7$00 then
5402: LD_OWVAR 1
5406: PUSH
5407: LD_INT 14700
5409: LESSEQUAL
5410: IFFALSE 5419
// SetAchievement ( ACH_ASPEED_5 ) ;
5412: LD_STRING ACH_ASPEED_5
5414: PPUSH
5415: CALL_OW 543
// if m1 and m2 and m3 and Difficulty >= 3 then
5419: LD_VAR 0 3
5423: PUSH
5424: LD_VAR 0 4
5428: AND
5429: PUSH
5430: LD_VAR 0 5
5434: AND
5435: PUSH
5436: LD_OWVAR 67
5440: PUSH
5441: LD_INT 3
5443: GREATEREQUAL
5444: AND
5445: IFFALSE 5457
// SetAchievementEX ( ACH_AMER , 5 ) ;
5447: LD_STRING ACH_AMER
5449: PPUSH
5450: LD_INT 5
5452: PPUSH
5453: CALL_OW 564
// GiveMedals ( MAIN ) ;
5457: LD_STRING MAIN
5459: PPUSH
5460: CALL_OW 102
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ;
5464: LD_ADDR_VAR 0 2
5468: PUSH
5469: LD_INT 22
5471: PUSH
5472: LD_INT 1
5474: PUSH
5475: EMPTY
5476: LIST
5477: LIST
5478: PUSH
5479: LD_INT 21
5481: PUSH
5482: LD_INT 1
5484: PUSH
5485: EMPTY
5486: LIST
5487: LIST
5488: PUSH
5489: LD_INT 2
5491: PUSH
5492: LD_INT 25
5494: PUSH
5495: LD_INT 1
5497: PUSH
5498: EMPTY
5499: LIST
5500: LIST
5501: PUSH
5502: LD_INT 25
5504: PUSH
5505: LD_INT 2
5507: PUSH
5508: EMPTY
5509: LIST
5510: LIST
5511: PUSH
5512: LD_INT 25
5514: PUSH
5515: LD_INT 3
5517: PUSH
5518: EMPTY
5519: LIST
5520: LIST
5521: PUSH
5522: LD_INT 25
5524: PUSH
5525: LD_INT 4
5527: PUSH
5528: EMPTY
5529: LIST
5530: LIST
5531: PUSH
5532: EMPTY
5533: LIST
5534: LIST
5535: LIST
5536: LIST
5537: LIST
5538: PUSH
5539: EMPTY
5540: LIST
5541: LIST
5542: LIST
5543: PPUSH
5544: CALL_OW 69
5548: ST_TO_ADDR
// RewardPeople ( tmp ) ;
5549: LD_VAR 0 2
5553: PPUSH
5554: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
5558: LD_EXP 16
5562: PPUSH
5563: LD_EXP 2
5567: PUSH
5568: LD_STRING JMM
5570: STR
5571: PPUSH
5572: CALL_OW 38
// if IsOk ( Gladstone ) then
5576: LD_EXP 17
5580: PPUSH
5581: CALL_OW 302
5585: IFFALSE 5605
// begin SaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
5587: LD_EXP 17
5591: PPUSH
5592: LD_EXP 2
5596: PUSH
5597: LD_STRING Gladstone
5599: STR
5600: PPUSH
5601: CALL_OW 38
// end ; if IsOk ( Denis ) and GetSide ( Denis ) = 1 then
5605: LD_EXP 19
5609: PPUSH
5610: CALL_OW 302
5614: PUSH
5615: LD_EXP 19
5619: PPUSH
5620: CALL_OW 255
5624: PUSH
5625: LD_INT 1
5627: EQUAL
5628: AND
5629: IFFALSE 5659
// begin SaveCharacters ( Denis , mission_prefix & Denis ) ;
5631: LD_EXP 19
5635: PPUSH
5636: LD_EXP 2
5640: PUSH
5641: LD_STRING Denis
5643: STR
5644: PPUSH
5645: CALL_OW 38
// SaveVariable ( true , DenisInDelta ) ;
5649: LD_INT 1
5651: PPUSH
5652: LD_STRING DenisInDelta
5654: PPUSH
5655: CALL_OW 39
// end ; if IsOk ( Lisa ) then
5659: LD_EXP 22
5663: PPUSH
5664: CALL_OW 302
5668: IFFALSE 5688
// begin SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
5670: LD_EXP 22
5674: PPUSH
5675: LD_EXP 2
5679: PUSH
5680: LD_STRING Lisa
5682: STR
5683: PPUSH
5684: CALL_OW 38
// end ; if IsOk ( Frank ) then
5688: LD_EXP 23
5692: PPUSH
5693: CALL_OW 302
5697: IFFALSE 5717
// begin SaveCharacters ( Frank , mission_prefix & Frank ) ;
5699: LD_EXP 23
5703: PPUSH
5704: LD_EXP 2
5708: PUSH
5709: LD_STRING Frank
5711: STR
5712: PPUSH
5713: CALL_OW 38
// end ; if IsOk ( Bobby ) then
5717: LD_EXP 24
5721: PPUSH
5722: CALL_OW 302
5726: IFFALSE 5746
// begin SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
5728: LD_EXP 24
5732: PPUSH
5733: LD_EXP 2
5737: PUSH
5738: LD_STRING Bobby
5740: STR
5741: PPUSH
5742: CALL_OW 38
// end ; if IsOk ( Cyrus ) then
5746: LD_EXP 25
5750: PPUSH
5751: CALL_OW 302
5755: IFFALSE 5775
// begin SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
5757: LD_EXP 25
5761: PPUSH
5762: LD_EXP 2
5766: PUSH
5767: LD_STRING Cyrus
5769: STR
5770: PPUSH
5771: CALL_OW 38
// end ; if IsOk ( Brown ) then
5775: LD_EXP 20
5779: PPUSH
5780: CALL_OW 302
5784: IFFALSE 5804
// begin SaveCharacters ( Brown , mission_prefix & Brown ) ;
5786: LD_EXP 20
5790: PPUSH
5791: LD_EXP 2
5795: PUSH
5796: LD_STRING Brown
5798: STR
5799: PPUSH
5800: CALL_OW 38
// end ; if IsOk ( Donaldson ) then
5804: LD_EXP 21
5808: PPUSH
5809: CALL_OW 302
5813: IFFALSE 5833
// begin SaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
5815: LD_EXP 21
5819: PPUSH
5820: LD_EXP 2
5824: PUSH
5825: LD_STRING Donaldson
5827: STR
5828: PPUSH
5829: CALL_OW 38
// end ; if IsOk ( Mike ) then
5833: LD_EXP 26
5837: PPUSH
5838: CALL_OW 302
5842: IFFALSE 5862
// SaveCharacters ( Mike , mission_prefix & Mike ) ;
5844: LD_EXP 26
5848: PPUSH
5849: LD_EXP 2
5853: PUSH
5854: LD_STRING Mike
5856: STR
5857: PPUSH
5858: CALL_OW 38
// if others then
5862: LD_EXP 27
5866: IFFALSE 5880
// SaveCharacters ( others , othersInDelta ) ;
5868: LD_EXP 27
5872: PPUSH
5873: LD_STRING othersInDelta
5875: PPUSH
5876: CALL_OW 38
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_apeman_engineer ] ] ) then
5880: LD_INT 22
5882: PUSH
5883: LD_INT 1
5885: PUSH
5886: EMPTY
5887: LIST
5888: LIST
5889: PUSH
5890: LD_INT 25
5892: PUSH
5893: LD_INT 16
5895: PUSH
5896: EMPTY
5897: LIST
5898: LIST
5899: PUSH
5900: EMPTY
5901: LIST
5902: LIST
5903: PPUSH
5904: CALL_OW 69
5908: IFFALSE 5952
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_apeman_engineer ] ] ) diff Mike , apeInDelta ) ;
5910: LD_INT 22
5912: PUSH
5913: LD_INT 1
5915: PUSH
5916: EMPTY
5917: LIST
5918: LIST
5919: PUSH
5920: LD_INT 25
5922: PUSH
5923: LD_INT 16
5925: PUSH
5926: EMPTY
5927: LIST
5928: LIST
5929: PUSH
5930: EMPTY
5931: LIST
5932: LIST
5933: PPUSH
5934: CALL_OW 69
5938: PUSH
5939: LD_EXP 26
5943: DIFF
5944: PPUSH
5945: LD_STRING apeInDelta
5947: PPUSH
5948: CALL_OW 38
// tmp := [ ] ;
5952: LD_ADDR_VAR 0 2
5956: PUSH
5957: EMPTY
5958: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) then
5959: LD_INT 22
5961: PUSH
5962: LD_INT 1
5964: PUSH
5965: EMPTY
5966: LIST
5967: LIST
5968: PUSH
5969: LD_INT 21
5971: PUSH
5972: LD_INT 2
5974: PUSH
5975: EMPTY
5976: LIST
5977: LIST
5978: PUSH
5979: EMPTY
5980: LIST
5981: LIST
5982: PPUSH
5983: CALL_OW 69
5987: IFFALSE 6098
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) do
5989: LD_ADDR_VAR 0 1
5993: PUSH
5994: LD_INT 22
5996: PUSH
5997: LD_INT 1
5999: PUSH
6000: EMPTY
6001: LIST
6002: LIST
6003: PUSH
6004: LD_INT 21
6006: PUSH
6007: LD_INT 2
6009: PUSH
6010: EMPTY
6011: LIST
6012: LIST
6013: PUSH
6014: EMPTY
6015: LIST
6016: LIST
6017: PPUSH
6018: CALL_OW 69
6022: PUSH
6023: FOR_IN
6024: IFFALSE 6096
// tmp := tmp ^ [ GetNation ( i ) , GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) ] ;
6026: LD_ADDR_VAR 0 2
6030: PUSH
6031: LD_VAR 0 2
6035: PUSH
6036: LD_VAR 0 1
6040: PPUSH
6041: CALL_OW 248
6045: PUSH
6046: LD_VAR 0 1
6050: PPUSH
6051: CALL_OW 265
6055: PUSH
6056: LD_VAR 0 1
6060: PPUSH
6061: CALL_OW 262
6065: PUSH
6066: LD_VAR 0 1
6070: PPUSH
6071: CALL_OW 263
6075: PUSH
6076: LD_VAR 0 1
6080: PPUSH
6081: CALL_OW 264
6085: PUSH
6086: EMPTY
6087: LIST
6088: LIST
6089: LIST
6090: LIST
6091: LIST
6092: ADD
6093: ST_TO_ADDR
6094: GO 6023
6096: POP
6097: POP
// if tmp then
6098: LD_VAR 0 2
6102: IFFALSE 6116
// SaveVariable ( tmp , vehiclesInDelta ) ;
6104: LD_VAR 0 2
6108: PPUSH
6109: LD_STRING vehiclesInDelta
6111: PPUSH
6112: CALL_OW 39
// tmp := [ ] ;
6116: LD_ADDR_VAR 0 2
6120: PUSH
6121: EMPTY
6122: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) then
6123: LD_INT 22
6125: PUSH
6126: LD_INT 1
6128: PUSH
6129: EMPTY
6130: LIST
6131: LIST
6132: PUSH
6133: LD_INT 21
6135: PUSH
6136: LD_INT 3
6138: PUSH
6139: EMPTY
6140: LIST
6141: LIST
6142: PUSH
6143: EMPTY
6144: LIST
6145: LIST
6146: PPUSH
6147: CALL_OW 69
6151: IFFALSE 6304
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) do
6153: LD_ADDR_VAR 0 1
6157: PUSH
6158: LD_INT 22
6160: PUSH
6161: LD_INT 1
6163: PUSH
6164: EMPTY
6165: LIST
6166: LIST
6167: PUSH
6168: LD_INT 21
6170: PUSH
6171: LD_INT 3
6173: PUSH
6174: EMPTY
6175: LIST
6176: LIST
6177: PUSH
6178: EMPTY
6179: LIST
6180: LIST
6181: PPUSH
6182: CALL_OW 69
6186: PUSH
6187: FOR_IN
6188: IFFALSE 6302
// tmp := tmp ^ [ [ GetBType ( i ) , GetBLevel ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) , GetBWeapon ( i ) ] ] ;
6190: LD_ADDR_VAR 0 2
6194: PUSH
6195: LD_VAR 0 2
6199: PUSH
6200: LD_VAR 0 1
6204: PPUSH
6205: CALL_OW 266
6209: PUSH
6210: LD_VAR 0 1
6214: PPUSH
6215: CALL_OW 267
6219: PUSH
6220: LD_VAR 0 1
6224: PPUSH
6225: CALL_OW 250
6229: PUSH
6230: LD_VAR 0 1
6234: PPUSH
6235: CALL_OW 251
6239: PUSH
6240: LD_VAR 0 1
6244: PPUSH
6245: CALL_OW 254
6249: PUSH
6250: LD_VAR 0 1
6254: PPUSH
6255: LD_INT 1
6257: PPUSH
6258: CALL_OW 268
6262: PUSH
6263: LD_VAR 0 1
6267: PPUSH
6268: LD_INT 2
6270: PPUSH
6271: CALL_OW 268
6275: PUSH
6276: LD_VAR 0 1
6280: PPUSH
6281: CALL_OW 269
6285: PUSH
6286: EMPTY
6287: LIST
6288: LIST
6289: LIST
6290: LIST
6291: LIST
6292: LIST
6293: LIST
6294: LIST
6295: PUSH
6296: EMPTY
6297: LIST
6298: ADD
6299: ST_TO_ADDR
6300: GO 6187
6302: POP
6303: POP
// if tmp then
6304: LD_VAR 0 2
6308: IFFALSE 6322
// SaveVariable ( tmp , buildingsInDelta ) ;
6310: LD_VAR 0 2
6314: PPUSH
6315: LD_STRING buildingsInDelta
6317: PPUSH
6318: CALL_OW 39
// YouWin ;
6322: CALL_OW 103
// end ; end_of_file
6326: PPOPN 5
6328: END
// export function PrepareArabianTroops ( amount , skill , area ) ; var i , un , tmp ; begin
6329: LD_INT 0
6331: PPUSH
6332: PPUSH
6333: PPUSH
6334: PPUSH
// InitHc ;
6335: CALL_OW 19
// InitUc ;
6339: CALL_OW 18
// uc_side := 2 ;
6343: LD_ADDR_OWVAR 20
6347: PUSH
6348: LD_INT 2
6350: ST_TO_ADDR
// uc_nation := 2 ;
6351: LD_ADDR_OWVAR 21
6355: PUSH
6356: LD_INT 2
6358: ST_TO_ADDR
// if not amount then
6359: LD_VAR 0 1
6363: NOT
6364: IFFALSE 6368
// exit ;
6366: GO 6491
// for i = 1 to amount do
6368: LD_ADDR_VAR 0 5
6372: PUSH
6373: DOUBLE
6374: LD_INT 1
6376: DEC
6377: ST_TO_ADDR
6378: LD_VAR 0 1
6382: PUSH
6383: FOR_TO
6384: IFFALSE 6479
// begin PrepareHuman ( false , 1 , skill ) ;
6386: LD_INT 0
6388: PPUSH
6389: LD_INT 1
6391: PPUSH
6392: LD_VAR 0 2
6396: PPUSH
6397: CALL_OW 380
// un := CreateHuman ;
6401: LD_ADDR_VAR 0 6
6405: PUSH
6406: CALL_OW 44
6410: ST_TO_ADDR
// tmp := Insert ( tmp , 1 , un ) ;
6411: LD_ADDR_VAR 0 7
6415: PUSH
6416: LD_VAR 0 7
6420: PPUSH
6421: LD_INT 1
6423: PPUSH
6424: LD_VAR 0 6
6428: PPUSH
6429: CALL_OW 2
6433: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
6434: LD_VAR 0 6
6438: PPUSH
6439: LD_VAR 0 3
6443: PPUSH
6444: LD_INT 0
6446: PPUSH
6447: CALL_OW 49
// if i mod 2 = 0 then
6451: LD_VAR 0 5
6455: PUSH
6456: LD_INT 2
6458: MOD
6459: PUSH
6460: LD_INT 0
6462: EQUAL
6463: IFFALSE 6477
// SetTag ( un , 11 ) ;
6465: LD_VAR 0 6
6469: PPUSH
6470: LD_INT 11
6472: PPUSH
6473: CALL_OW 109
// end ;
6477: GO 6383
6479: POP
6480: POP
// result := tmp ;
6481: LD_ADDR_VAR 0 4
6485: PUSH
6486: LD_VAR 0 7
6490: ST_TO_ADDR
// end ;
6491: LD_VAR 0 4
6495: RET
// export ar_forces , ap_killers ; every 0 0$1 trigger Delta do var i , timer , more_troops , skill , eng , un , veh , force ;
6496: LD_EXP 6
6500: IFFALSE 7578
6502: GO 6504
6504: DISABLE
6505: LD_INT 0
6507: PPUSH
6508: PPUSH
6509: PPUSH
6510: PPUSH
6511: PPUSH
6512: PPUSH
6513: PPUSH
6514: PPUSH
// begin more_troops := false ;
6515: LD_ADDR_VAR 0 3
6519: PUSH
6520: LD_INT 0
6522: ST_TO_ADDR
// skill := [ 3 , 4 , 5 , 5 ] [ Difficulty ] ;
6523: LD_ADDR_VAR 0 4
6527: PUSH
6528: LD_INT 3
6530: PUSH
6531: LD_INT 4
6533: PUSH
6534: LD_INT 5
6536: PUSH
6537: LD_INT 5
6539: PUSH
6540: EMPTY
6541: LIST
6542: LIST
6543: LIST
6544: LIST
6545: PUSH
6546: LD_OWVAR 67
6550: ARRAY
6551: ST_TO_ADDR
// timer := [ 5 5$00 , 4 4$00 , 3 3$00 , 2 2$30 ] [ Difficulty ] ;
6552: LD_ADDR_VAR 0 2
6556: PUSH
6557: LD_INT 10500
6559: PUSH
6560: LD_INT 8400
6562: PUSH
6563: LD_INT 6300
6565: PUSH
6566: LD_INT 5250
6568: PUSH
6569: EMPTY
6570: LIST
6571: LIST
6572: LIST
6573: LIST
6574: PUSH
6575: LD_OWVAR 67
6579: ARRAY
6580: ST_TO_ADDR
// force := [ ] ;
6581: LD_ADDR_VAR 0 8
6585: PUSH
6586: EMPTY
6587: ST_TO_ADDR
// ar_forces := [ ] ;
6588: LD_ADDR_EXP 28
6592: PUSH
6593: EMPTY
6594: ST_TO_ADDR
// ap_killers := [ ] ;
6595: LD_ADDR_EXP 29
6599: PUSH
6600: EMPTY
6601: ST_TO_ADDR
// Wait ( timer ) ;
6602: LD_VAR 0 2
6606: PPUSH
6607: CALL_OW 67
// if Denis and GetSide ( Denis ) = 4 then
6611: LD_EXP 19
6615: PUSH
6616: LD_EXP 19
6620: PPUSH
6621: CALL_OW 255
6625: PUSH
6626: LD_INT 4
6628: EQUAL
6629: AND
6630: IFFALSE 6639
// Wait ( 0 0$45 ) ;
6632: LD_INT 1575
6634: PPUSH
6635: CALL_OW 67
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_armoury ] ] ) then
6639: LD_INT 22
6641: PUSH
6642: LD_INT 1
6644: PUSH
6645: EMPTY
6646: LIST
6647: LIST
6648: PUSH
6649: LD_INT 30
6651: PUSH
6652: LD_INT 4
6654: PUSH
6655: EMPTY
6656: LIST
6657: LIST
6658: PUSH
6659: EMPTY
6660: LIST
6661: LIST
6662: PPUSH
6663: CALL_OW 69
6667: IFFALSE 6684
// begin wait ( 1 1$25 ) ;
6669: LD_INT 2975
6671: PPUSH
6672: CALL_OW 67
// more_troops := true ;
6676: LD_ADDR_VAR 0 3
6680: PUSH
6681: LD_INT 1
6683: ST_TO_ADDR
// end ; if more_troops then
6684: LD_VAR 0 3
6688: IFFALSE 6884
// begin force := PrepareArabianTroops ( [ 4 , 5 , 6 , 7 ] [ Difficulty ] , skill , arArea2 ) ;
6690: LD_ADDR_VAR 0 8
6694: PUSH
6695: LD_INT 4
6697: PUSH
6698: LD_INT 5
6700: PUSH
6701: LD_INT 6
6703: PUSH
6704: LD_INT 7
6706: PUSH
6707: EMPTY
6708: LIST
6709: LIST
6710: LIST
6711: LIST
6712: PUSH
6713: LD_OWVAR 67
6717: ARRAY
6718: PPUSH
6719: LD_VAR 0 4
6723: PPUSH
6724: LD_INT 14
6726: PPUSH
6727: CALL 6329 0 3
6731: ST_TO_ADDR
// veh := PrepareTank ( 2 , 3 , ru_medium_tracked , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_heavy_machine_gun , ru_gatling_gun , ru_gun ] [ Difficulty ] , 90 ) ;
6732: LD_ADDR_VAR 0 7
6736: PUSH
6737: LD_INT 2
6739: PPUSH
6740: LD_INT 3
6742: PPUSH
6743: LD_INT 22
6745: PPUSH
6746: LD_INT 1
6748: PPUSH
6749: LD_INT 1
6751: PPUSH
6752: LD_INT 42
6754: PUSH
6755: LD_INT 42
6757: PUSH
6758: LD_INT 43
6760: PUSH
6761: LD_INT 44
6763: PUSH
6764: EMPTY
6765: LIST
6766: LIST
6767: LIST
6768: LIST
6769: PUSH
6770: LD_OWVAR 67
6774: ARRAY
6775: PPUSH
6776: LD_INT 90
6778: PPUSH
6779: CALL 435 0 7
6783: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
6784: LD_VAR 0 7
6788: PPUSH
6789: LD_INT 4
6791: PPUSH
6792: CALL_OW 233
// PlaceUnitArea ( veh , arArea1 , false ) ;
6796: LD_VAR 0 7
6800: PPUSH
6801: LD_INT 13
6803: PPUSH
6804: LD_INT 0
6806: PPUSH
6807: CALL_OW 49
// uc_side := 2 ;
6811: LD_ADDR_OWVAR 20
6815: PUSH
6816: LD_INT 2
6818: ST_TO_ADDR
// uc_nation := 2 ;
6819: LD_ADDR_OWVAR 21
6823: PUSH
6824: LD_INT 2
6826: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
6827: LD_INT 0
6829: PPUSH
6830: LD_INT 1
6832: PPUSH
6833: LD_VAR 0 4
6837: PPUSH
6838: CALL_OW 380
// un := CreateHuman ;
6842: LD_ADDR_VAR 0 6
6846: PUSH
6847: CALL_OW 44
6851: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6852: LD_VAR 0 6
6856: PPUSH
6857: LD_VAR 0 7
6861: PPUSH
6862: CALL_OW 52
// force := force ^ un ;
6866: LD_ADDR_VAR 0 8
6870: PUSH
6871: LD_VAR 0 8
6875: PUSH
6876: LD_VAR 0 6
6880: ADD
6881: ST_TO_ADDR
// end else
6882: GO 6926
// begin force := PrepareArabianTroops ( [ 3 , 4 , 5 , 6 ] [ Difficulty ] , skill , arArea2 ) ;
6884: LD_ADDR_VAR 0 8
6888: PUSH
6889: LD_INT 3
6891: PUSH
6892: LD_INT 4
6894: PUSH
6895: LD_INT 5
6897: PUSH
6898: LD_INT 6
6900: PUSH
6901: EMPTY
6902: LIST
6903: LIST
6904: LIST
6905: LIST
6906: PUSH
6907: LD_OWVAR 67
6911: ARRAY
6912: PPUSH
6913: LD_VAR 0 4
6917: PPUSH
6918: LD_INT 14
6920: PPUSH
6921: CALL 6329 0 3
6925: ST_TO_ADDR
// end ; if force then
6926: LD_VAR 0 8
6930: IFFALSE 6942
// ar_forces := force ;
6932: LD_ADDR_EXP 28
6936: PUSH
6937: LD_VAR 0 8
6941: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
6942: LD_INT 35
6944: PPUSH
6945: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) = 0 ;
6949: LD_INT 22
6951: PUSH
6952: LD_INT 2
6954: PUSH
6955: EMPTY
6956: LIST
6957: LIST
6958: PUSH
6959: LD_INT 21
6961: PUSH
6962: LD_INT 1
6964: PUSH
6965: EMPTY
6966: LIST
6967: LIST
6968: PUSH
6969: EMPTY
6970: LIST
6971: LIST
6972: PPUSH
6973: CALL_OW 69
6977: PUSH
6978: LD_INT 0
6980: EQUAL
6981: IFFALSE 6942
// wait ( timer ) ;
6983: LD_VAR 0 2
6987: PPUSH
6988: CALL_OW 67
// force := PrepareArabianTroops ( [ 4 , 5 , 6 , 7 ] [ Difficulty ] , skill , [ arArea1 , arArea2 ] [ rand ( 1 , 2 ) ] ) ;
6992: LD_ADDR_VAR 0 8
6996: PUSH
6997: LD_INT 4
6999: PUSH
7000: LD_INT 5
7002: PUSH
7003: LD_INT 6
7005: PUSH
7006: LD_INT 7
7008: PUSH
7009: EMPTY
7010: LIST
7011: LIST
7012: LIST
7013: LIST
7014: PUSH
7015: LD_OWVAR 67
7019: ARRAY
7020: PPUSH
7021: LD_VAR 0 4
7025: PPUSH
7026: LD_INT 13
7028: PUSH
7029: LD_INT 14
7031: PUSH
7032: EMPTY
7033: LIST
7034: LIST
7035: PUSH
7036: LD_INT 1
7038: PPUSH
7039: LD_INT 2
7041: PPUSH
7042: CALL_OW 12
7046: ARRAY
7047: PPUSH
7048: CALL 6329 0 3
7052: ST_TO_ADDR
// if Difficulty > 1 and Delta then
7053: LD_OWVAR 67
7057: PUSH
7058: LD_INT 1
7060: GREATER
7061: PUSH
7062: LD_EXP 6
7066: AND
7067: IFFALSE 7146
// begin uc_side := 2 ;
7069: LD_ADDR_OWVAR 20
7073: PUSH
7074: LD_INT 2
7076: ST_TO_ADDR
// uc_nation := 2 ;
7077: LD_ADDR_OWVAR 21
7081: PUSH
7082: LD_INT 2
7084: ST_TO_ADDR
// PrepareHuman ( false , 2 , skill ) ;
7085: LD_INT 0
7087: PPUSH
7088: LD_INT 2
7090: PPUSH
7091: LD_VAR 0 4
7095: PPUSH
7096: CALL_OW 380
// eng := CreateHuman ;
7100: LD_ADDR_VAR 0 5
7104: PUSH
7105: CALL_OW 44
7109: ST_TO_ADDR
// PlaceUnitArea ( eng , arArea1 , false ) ;
7110: LD_VAR 0 5
7114: PPUSH
7115: LD_INT 13
7117: PPUSH
7118: LD_INT 0
7120: PPUSH
7121: CALL_OW 49
// Wait ( 3 ) ;
7125: LD_INT 3
7127: PPUSH
7128: CALL_OW 67
// AddComEnterUnit ( eng , Delta ) ;
7132: LD_VAR 0 5
7136: PPUSH
7137: LD_EXP 6
7141: PPUSH
7142: CALL_OW 180
// end ; if force then
7146: LD_VAR 0 8
7150: IFFALSE 7162
// ar_forces := force ;
7152: LD_ADDR_EXP 28
7156: PUSH
7157: LD_VAR 0 8
7161: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
7162: LD_INT 35
7164: PPUSH
7165: CALL_OW 67
// if eng then
7169: LD_VAR 0 5
7173: IFFALSE 7227
// if GetSide ( Delta ) = 2 and IsOk ( eng ) and not IsInUnit ( eng ) then
7175: LD_EXP 6
7179: PPUSH
7180: CALL_OW 255
7184: PUSH
7185: LD_INT 2
7187: EQUAL
7188: PUSH
7189: LD_VAR 0 5
7193: PPUSH
7194: CALL_OW 302
7198: AND
7199: PUSH
7200: LD_VAR 0 5
7204: PPUSH
7205: CALL_OW 310
7209: NOT
7210: AND
7211: IFFALSE 7227
// ComEnterUnit ( eng , Delta ) ;
7213: LD_VAR 0 5
7217: PPUSH
7218: LD_EXP 6
7222: PPUSH
7223: CALL_OW 120
// until FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) = 0 ;
7227: LD_INT 22
7229: PUSH
7230: LD_INT 2
7232: PUSH
7233: EMPTY
7234: LIST
7235: LIST
7236: PUSH
7237: LD_INT 21
7239: PUSH
7240: LD_INT 1
7242: PUSH
7243: EMPTY
7244: LIST
7245: LIST
7246: PUSH
7247: EMPTY
7248: LIST
7249: LIST
7250: PPUSH
7251: CALL_OW 69
7255: PUSH
7256: LD_INT 0
7258: EQUAL
7259: IFFALSE 7162
// Wait ( 2 2$00 ) ;
7261: LD_INT 4200
7263: PPUSH
7264: CALL_OW 67
// ap_killers := PrepareArabianTroops ( [ 1 , 2 , 2 , 2 ] [ Difficulty ] , skill , arArea1 ) ;
7268: LD_ADDR_EXP 29
7272: PUSH
7273: LD_INT 1
7275: PUSH
7276: LD_INT 2
7278: PUSH
7279: LD_INT 2
7281: PUSH
7282: LD_INT 2
7284: PUSH
7285: EMPTY
7286: LIST
7287: LIST
7288: LIST
7289: LIST
7290: PUSH
7291: LD_OWVAR 67
7295: ARRAY
7296: PPUSH
7297: LD_VAR 0 4
7301: PPUSH
7302: LD_INT 13
7304: PPUSH
7305: CALL 6329 0 3
7309: ST_TO_ADDR
// Wait ( timer * 2 ) ;
7310: LD_VAR 0 2
7314: PUSH
7315: LD_INT 2
7317: MUL
7318: PPUSH
7319: CALL_OW 67
// ar_forces := PrepareArabianTroops ( [ 5 , 6 , 7 , 8 ] [ Difficulty ] , skill , arArea1 ) ^ PrepareArabianTroops ( [ 3 , 4 , 4 , 4 ] [ Difficulty ] , skill , arArea2 ) ;
7323: LD_ADDR_EXP 28
7327: PUSH
7328: LD_INT 5
7330: PUSH
7331: LD_INT 6
7333: PUSH
7334: LD_INT 7
7336: PUSH
7337: LD_INT 8
7339: PUSH
7340: EMPTY
7341: LIST
7342: LIST
7343: LIST
7344: LIST
7345: PUSH
7346: LD_OWVAR 67
7350: ARRAY
7351: PPUSH
7352: LD_VAR 0 4
7356: PPUSH
7357: LD_INT 13
7359: PPUSH
7360: CALL 6329 0 3
7364: PUSH
7365: LD_INT 3
7367: PUSH
7368: LD_INT 4
7370: PUSH
7371: LD_INT 4
7373: PUSH
7374: LD_INT 4
7376: PUSH
7377: EMPTY
7378: LIST
7379: LIST
7380: LIST
7381: LIST
7382: PUSH
7383: LD_OWVAR 67
7387: ARRAY
7388: PPUSH
7389: LD_VAR 0 4
7393: PPUSH
7394: LD_INT 14
7396: PPUSH
7397: CALL 6329 0 3
7401: ADD
7402: ST_TO_ADDR
// if Difficulty < 4 then
7403: LD_OWVAR 67
7407: PUSH
7408: LD_INT 4
7410: LESS
7411: IFFALSE 7415
// exit ;
7413: GO 7578
// veh := PrepareTank ( 2 , 3 , ru_medium_tracked , engine_combustion , control_manual , ru_gun , 90 ) ;
7415: LD_ADDR_VAR 0 7
7419: PUSH
7420: LD_INT 2
7422: PPUSH
7423: LD_INT 3
7425: PPUSH
7426: LD_INT 22
7428: PPUSH
7429: LD_INT 1
7431: PPUSH
7432: LD_INT 1
7434: PPUSH
7435: LD_INT 44
7437: PPUSH
7438: LD_INT 90
7440: PPUSH
7441: CALL 435 0 7
7445: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
7446: LD_VAR 0 7
7450: PPUSH
7451: LD_INT 1
7453: PPUSH
7454: CALL_OW 233
// PlaceUnitXY ( veh , 28 , 51 , false ) ;
7458: LD_VAR 0 7
7462: PPUSH
7463: LD_INT 28
7465: PPUSH
7466: LD_INT 51
7468: PPUSH
7469: LD_INT 0
7471: PPUSH
7472: CALL_OW 48
// uc_side := 2 ;
7476: LD_ADDR_OWVAR 20
7480: PUSH
7481: LD_INT 2
7483: ST_TO_ADDR
// uc_nation := 2 ;
7484: LD_ADDR_OWVAR 21
7488: PUSH
7489: LD_INT 2
7491: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
7492: LD_INT 0
7494: PPUSH
7495: LD_INT 1
7497: PPUSH
7498: LD_VAR 0 4
7502: PPUSH
7503: CALL_OW 380
// un := CreateHuman ;
7507: LD_ADDR_VAR 0 6
7511: PUSH
7512: CALL_OW 44
7516: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
7517: LD_VAR 0 6
7521: PPUSH
7522: LD_VAR 0 7
7526: PPUSH
7527: CALL_OW 52
// ar_forces := Join ( ar_forces , un ) ;
7531: LD_ADDR_EXP 28
7535: PUSH
7536: LD_EXP 28
7540: PPUSH
7541: LD_VAR 0 6
7545: PPUSH
7546: CALL 66278 0 2
7550: ST_TO_ADDR
// ar_forces := ar_forces union PrepareArabianTroops ( 4 , skill , arArea3 ) ;
7551: LD_ADDR_EXP 28
7555: PUSH
7556: LD_EXP 28
7560: PUSH
7561: LD_INT 4
7563: PPUSH
7564: LD_VAR 0 4
7568: PPUSH
7569: LD_INT 19
7571: PPUSH
7572: CALL 6329 0 3
7576: UNION
7577: ST_TO_ADDR
// end ;
7578: PPOPN 8
7580: END
// every 0 0$03 trigger ar_forces do var i , target ;
7581: LD_EXP 28
7585: IFFALSE 7783
7587: GO 7589
7589: DISABLE
7590: LD_INT 0
7592: PPUSH
7593: PPUSH
// begin enable ;
7594: ENABLE
// if not ar_forces then
7595: LD_EXP 28
7599: NOT
7600: IFFALSE 7604
// exit ;
7602: GO 7783
// if Delta then
7604: LD_EXP 6
7608: IFFALSE 7622
// target := Delta else
7610: LD_ADDR_VAR 0 2
7614: PUSH
7615: LD_EXP 6
7619: ST_TO_ADDR
7620: GO 7632
// target := JMM ;
7622: LD_ADDR_VAR 0 2
7626: PUSH
7627: LD_EXP 16
7631: ST_TO_ADDR
// for i in ar_forces do
7632: LD_ADDR_VAR 0 1
7636: PUSH
7637: LD_EXP 28
7641: PUSH
7642: FOR_IN
7643: IFFALSE 7781
// begin if i in FilterAllUnits ( [ f_driving ] ) then
7645: LD_VAR 0 1
7649: PUSH
7650: LD_INT 55
7652: PUSH
7653: EMPTY
7654: LIST
7655: PPUSH
7656: CALL_OW 69
7660: IN
7661: IFFALSE 7704
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , IsInUnit ( i ) ) ) else
7663: LD_VAR 0 1
7667: PPUSH
7668: LD_INT 22
7670: PUSH
7671: LD_INT 1
7673: PUSH
7674: EMPTY
7675: LIST
7676: LIST
7677: PPUSH
7678: CALL_OW 69
7682: PPUSH
7683: LD_VAR 0 1
7687: PPUSH
7688: CALL_OW 310
7692: PPUSH
7693: CALL_OW 74
7697: PPUSH
7698: CALL_OW 115
7702: GO 7779
// if GetDistUnits ( i , target ) > 30 then
7704: LD_VAR 0 1
7708: PPUSH
7709: LD_VAR 0 2
7713: PPUSH
7714: CALL_OW 296
7718: PUSH
7719: LD_INT 30
7721: GREATER
7722: IFFALSE 7755
// ComAgressiveMove ( i , GetX ( target ) , GetY ( target ) ) else
7724: LD_VAR 0 1
7728: PPUSH
7729: LD_VAR 0 2
7733: PPUSH
7734: CALL_OW 250
7738: PPUSH
7739: LD_VAR 0 2
7743: PPUSH
7744: CALL_OW 251
7748: PPUSH
7749: CALL_OW 114
7753: GO 7779
// Attack ( i , FilterAllUnits ( [ f_enemy , 2 ] ) ) ;
7755: LD_VAR 0 1
7759: PPUSH
7760: LD_INT 81
7762: PUSH
7763: LD_INT 2
7765: PUSH
7766: EMPTY
7767: LIST
7768: LIST
7769: PPUSH
7770: CALL_OW 69
7774: PPUSH
7775: CALL 927 0 2
// end ;
7779: GO 7642
7781: POP
7782: POP
// end ;
7783: PPOPN 2
7785: END
// every 0 0$01 trigger ap_killers do var filter , i , target ;
7786: LD_EXP 29
7790: IFFALSE 7950
7792: GO 7794
7794: DISABLE
7795: LD_INT 0
7797: PPUSH
7798: PPUSH
7799: PPUSH
// begin enable ;
7800: ENABLE
// filter := FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) ;
7801: LD_ADDR_VAR 0 1
7805: PUSH
7806: LD_INT 22
7808: PUSH
7809: LD_INT 0
7811: PUSH
7812: EMPTY
7813: LIST
7814: LIST
7815: PUSH
7816: LD_INT 25
7818: PUSH
7819: LD_INT 12
7821: PUSH
7822: EMPTY
7823: LIST
7824: LIST
7825: PUSH
7826: EMPTY
7827: LIST
7828: LIST
7829: PPUSH
7830: CALL_OW 69
7834: ST_TO_ADDR
// if not filter then
7835: LD_VAR 0 1
7839: NOT
7840: IFFALSE 7867
// begin ar_forces := ar_forces ^ ap_killers ;
7842: LD_ADDR_EXP 28
7846: PUSH
7847: LD_EXP 28
7851: PUSH
7852: LD_EXP 29
7856: ADD
7857: ST_TO_ADDR
// ap_killers := [ ] ;
7858: LD_ADDR_EXP 29
7862: PUSH
7863: EMPTY
7864: ST_TO_ADDR
// exit ;
7865: GO 7950
// end ; for i in ap_killers do
7867: LD_ADDR_VAR 0 2
7871: PUSH
7872: LD_EXP 29
7876: PUSH
7877: FOR_IN
7878: IFFALSE 7948
// begin if not IsOk ( i ) then
7880: LD_VAR 0 2
7884: PPUSH
7885: CALL_OW 302
7889: NOT
7890: IFFALSE 7894
// continue ;
7892: GO 7877
// if not HasTask ( i ) then
7894: LD_VAR 0 2
7898: PPUSH
7899: CALL_OW 314
7903: NOT
7904: IFFALSE 7926
// target := NearestUnitToUnit ( filter , i ) ;
7906: LD_ADDR_VAR 0 3
7910: PUSH
7911: LD_VAR 0 1
7915: PPUSH
7916: LD_VAR 0 2
7920: PPUSH
7921: CALL_OW 74
7925: ST_TO_ADDR
// if target then
7926: LD_VAR 0 3
7930: IFFALSE 7946
// ComAttackUnit ( i , target ) ;
7932: LD_VAR 0 2
7936: PPUSH
7937: LD_VAR 0 3
7941: PPUSH
7942: CALL_OW 115
// end ;
7946: GO 7877
7948: POP
7949: POP
// end ; end_of_file
7950: PPOPN 3
7952: END
// every 0 0$40 + 0 0$2 trigger Delta do var i , counter , cr ;
7953: LD_EXP 6
7957: IFFALSE 8093
7959: GO 7961
7961: DISABLE
7962: LD_INT 0
7964: PPUSH
7965: PPUSH
7966: PPUSH
// begin counter := [ 300 , 250 , 220 , 210 ] [ Difficulty ] ;
7967: LD_ADDR_VAR 0 2
7971: PUSH
7972: LD_INT 300
7974: PUSH
7975: LD_INT 250
7977: PUSH
7978: LD_INT 220
7980: PUSH
7981: LD_INT 210
7983: PUSH
7984: EMPTY
7985: LIST
7986: LIST
7987: LIST
7988: LIST
7989: PUSH
7990: LD_OWVAR 67
7994: ARRAY
7995: ST_TO_ADDR
// CreateCratesArea ( Rand ( 1 , 3 ) , cratesArea , true ) ;
7996: LD_INT 1
7998: PPUSH
7999: LD_INT 3
8001: PPUSH
8002: CALL_OW 12
8006: PPUSH
8007: LD_INT 7
8009: PPUSH
8010: LD_INT 1
8012: PPUSH
8013: CALL_OW 55
// repeat wait ( rand ( 1 1$30 , 2 2$20 ) ) ;
8017: LD_INT 3150
8019: PPUSH
8020: LD_INT 4900
8022: PPUSH
8023: CALL_OW 12
8027: PPUSH
8028: CALL_OW 67
// cr := rand ( 1 , 5 ) ;
8032: LD_ADDR_VAR 0 3
8036: PUSH
8037: LD_INT 1
8039: PPUSH
8040: LD_INT 5
8042: PPUSH
8043: CALL_OW 12
8047: ST_TO_ADDR
// CreateCratesArea ( cr , cratesArea , true ) ;
8048: LD_VAR 0 3
8052: PPUSH
8053: LD_INT 7
8055: PPUSH
8056: LD_INT 1
8058: PPUSH
8059: CALL_OW 55
// counter := counter - cr * 10 ;
8063: LD_ADDR_VAR 0 2
8067: PUSH
8068: LD_VAR 0 2
8072: PUSH
8073: LD_VAR 0 3
8077: PUSH
8078: LD_INT 10
8080: MUL
8081: MINUS
8082: ST_TO_ADDR
// until counter <= 0 ;
8083: LD_VAR 0 2
8087: PUSH
8088: LD_INT 0
8090: LESSEQUAL
8091: IFFALSE 8017
// end ;
8093: PPOPN 3
8095: END
// every 0 0$03 trigger not Delta do var i ;
8096: LD_EXP 6
8100: NOT
8101: IFFALSE 8171
8103: GO 8105
8105: DISABLE
8106: LD_INT 0
8108: PPUSH
// begin for i = 1 to 5 - Difficulty do
8109: LD_ADDR_VAR 0 1
8113: PUSH
8114: DOUBLE
8115: LD_INT 1
8117: DEC
8118: ST_TO_ADDR
8119: LD_INT 5
8121: PUSH
8122: LD_OWVAR 67
8126: MINUS
8127: PUSH
8128: FOR_TO
8129: IFFALSE 8169
// begin CreateCratesArea ( rand ( 2 , 5 ) , deltaMainArea , true ) ;
8131: LD_INT 2
8133: PPUSH
8134: LD_INT 5
8136: PPUSH
8137: CALL_OW 12
8141: PPUSH
8142: LD_INT 8
8144: PPUSH
8145: LD_INT 1
8147: PPUSH
8148: CALL_OW 55
// Wait ( rand ( 0 0$16 , 0 0$39 ) ) ;
8152: LD_INT 560
8154: PPUSH
8155: LD_INT 1365
8157: PPUSH
8158: CALL_OW 12
8162: PPUSH
8163: CALL_OW 67
// end ;
8167: GO 8128
8169: POP
8170: POP
// end ;
8171: PPOPN 1
8173: END
// every 3 3$00 trigger tick < 15 15$00 do
8174: LD_OWVAR 1
8178: PUSH
8179: LD_INT 31500
8181: LESS
8182: IFFALSE 8242
8184: GO 8186
8186: DISABLE
// begin enable ;
8187: ENABLE
// CreateCratesAnyWhere ( rand ( 1 , 3 ) , true ) ;
8188: LD_INT 1
8190: PPUSH
8191: LD_INT 3
8193: PPUSH
8194: CALL_OW 12
8198: PPUSH
8199: LD_INT 1
8201: PPUSH
8202: CALL_OW 57
// Wait ( rand ( 0 0$38 , 0 0$59 ) ) ;
8206: LD_INT 1330
8208: PPUSH
8209: LD_INT 2065
8211: PPUSH
8212: CALL_OW 12
8216: PPUSH
8217: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 4 ) , riverArea , true ) ;
8221: LD_INT 1
8223: PPUSH
8224: LD_INT 4
8226: PPUSH
8227: CALL_OW 12
8231: PPUSH
8232: LD_INT 15
8234: PPUSH
8235: LD_INT 1
8237: PPUSH
8238: CALL_OW 55
// end ; end_of_file
8242: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
8243: LD_VAR 0 1
8247: PPUSH
8248: CALL 24521 0 1
// if un = JMM then
8252: LD_VAR 0 1
8256: PUSH
8257: LD_EXP 16
8261: EQUAL
8262: IFFALSE 8271
// YouLost ( JMM ) ;
8264: LD_STRING JMM
8266: PPUSH
8267: CALL_OW 104
// if un = Delta then
8271: LD_VAR 0 1
8275: PUSH
8276: LD_EXP 6
8280: EQUAL
8281: IFFALSE 8304
// begin Delta := 0 ;
8283: LD_ADDR_EXP 6
8287: PUSH
8288: LD_INT 0
8290: ST_TO_ADDR
// SetRestrict ( b_depot , 1 , true ) ;
8291: LD_INT 0
8293: PPUSH
8294: LD_INT 1
8296: PPUSH
8297: LD_INT 1
8299: PPUSH
8300: CALL_OW 324
// end ; if un in ar_forces then
8304: LD_VAR 0 1
8308: PUSH
8309: LD_EXP 28
8313: IN
8314: IFFALSE 8332
// ar_forces := ar_forces diff un ;
8316: LD_ADDR_EXP 28
8320: PUSH
8321: LD_EXP 28
8325: PUSH
8326: LD_VAR 0 1
8330: DIFF
8331: ST_TO_ADDR
// if un in ap_killers then
8332: LD_VAR 0 1
8336: PUSH
8337: LD_EXP 29
8341: IN
8342: IFFALSE 8360
// ap_killers := ap_killers diff un ;
8344: LD_ADDR_EXP 29
8348: PUSH
8349: LD_EXP 29
8353: PUSH
8354: LD_VAR 0 1
8358: DIFF
8359: ST_TO_ADDR
// if un in FilterAllUnits ( [ f_or , [ f_class , class_apeman ] , [ f_class , class_apeman_engineer ] ] ) then
8360: LD_VAR 0 1
8364: PUSH
8365: LD_INT 2
8367: PUSH
8368: LD_INT 25
8370: PUSH
8371: LD_INT 12
8373: PUSH
8374: EMPTY
8375: LIST
8376: LIST
8377: PUSH
8378: LD_INT 25
8380: PUSH
8381: LD_INT 16
8383: PUSH
8384: EMPTY
8385: LIST
8386: LIST
8387: PUSH
8388: EMPTY
8389: LIST
8390: LIST
8391: LIST
8392: PPUSH
8393: CALL_OW 69
8397: IN
8398: IFFALSE 8414
// apeKillCounter := apeKillCounter + 1 ;
8400: LD_ADDR_EXP 15
8404: PUSH
8405: LD_EXP 15
8409: PUSH
8410: LD_INT 1
8412: PLUS
8413: ST_TO_ADDR
// end ;
8414: PPOPN 1
8416: END
// on VehicleConstructed ( veh , fac ) do begin SOS_VehicleConstructed ( veh , fac ) ;
8417: LD_VAR 0 1
8421: PPUSH
8422: LD_VAR 0 2
8426: PPUSH
8427: CALL 24641 0 2
// end ;
8431: PPOPN 2
8433: END
// on Contact ( s1 , s2 ) do begin if s1 = 1 and s2 = 2 and not arab_spotted then
8434: LD_VAR 0 1
8438: PUSH
8439: LD_INT 1
8441: EQUAL
8442: PUSH
8443: LD_VAR 0 2
8447: PUSH
8448: LD_INT 2
8450: EQUAL
8451: AND
8452: PUSH
8453: LD_EXP 13
8457: NOT
8458: AND
8459: IFFALSE 8469
// arab_spotted := true ;
8461: LD_ADDR_EXP 13
8465: PUSH
8466: LD_INT 1
8468: ST_TO_ADDR
// end ;
8469: PPOPN 2
8471: END
// on EndTheMissionRaised ( p ) do begin end_the_mission_allowed := false ;
8472: LD_ADDR_OWVAR 57
8476: PUSH
8477: LD_INT 0
8479: ST_TO_ADDR
// end_mission := true ;
8480: LD_ADDR_EXP 14
8484: PUSH
8485: LD_INT 1
8487: ST_TO_ADDR
// end ;
8488: PPOPN 1
8490: END
// on ApemanTamed ( apeman , sci ) do begin if GetSide ( sci ) = 1 then
8491: LD_VAR 0 2
8495: PPUSH
8496: CALL_OW 255
8500: PUSH
8501: LD_INT 1
8503: EQUAL
8504: IFFALSE 8520
// apeman_counter := apeman_counter + 1 ;
8506: LD_ADDR_EXP 12
8510: PUSH
8511: LD_EXP 12
8515: PUSH
8516: LD_INT 1
8518: PLUS
8519: ST_TO_ADDR
// if not first_apeman_tamed then
8520: LD_EXP 8
8524: NOT
8525: IFFALSE 8724
// begin first_apeman_tamed := true ;
8527: LD_ADDR_EXP 8
8531: PUSH
8532: LD_INT 1
8534: ST_TO_ADDR
// if sci = Gladstone then
8535: LD_VAR 0 2
8539: PUSH
8540: LD_EXP 17
8544: EQUAL
8545: IFFALSE 8559
// Say ( Gladstone , D7b-Glad-1 ) ;
8547: LD_EXP 17
8551: PPUSH
8552: LD_STRING D7b-Glad-1
8554: PPUSH
8555: CALL_OW 88
// if sci = Denis then
8559: LD_VAR 0 2
8563: PUSH
8564: LD_EXP 19
8568: EQUAL
8569: IFFALSE 8583
// Say ( Denis , D7a-Den-1 ) ;
8571: LD_EXP 19
8575: PPUSH
8576: LD_STRING D7a-Den-1
8578: PPUSH
8579: CALL_OW 88
// if not sci in [ JMM , Gladstone , Denis , Lisa , Frank , Bobby , Cyrus , Donaldson ] then
8583: LD_VAR 0 2
8587: PUSH
8588: LD_EXP 16
8592: PUSH
8593: LD_EXP 17
8597: PUSH
8598: LD_EXP 19
8602: PUSH
8603: LD_EXP 22
8607: PUSH
8608: LD_EXP 23
8612: PUSH
8613: LD_EXP 24
8617: PUSH
8618: LD_EXP 25
8622: PUSH
8623: LD_EXP 21
8627: PUSH
8628: EMPTY
8629: LIST
8630: LIST
8631: LIST
8632: LIST
8633: LIST
8634: LIST
8635: LIST
8636: LIST
8637: IN
8638: NOT
8639: IFFALSE 8682
// begin if GetSex ( sci ) = sex_male then
8641: LD_VAR 0 2
8645: PPUSH
8646: CALL_OW 258
8650: PUSH
8651: LD_INT 1
8653: EQUAL
8654: IFFALSE 8670
// Say ( sci , D7c-Sci1-1 ) else
8656: LD_VAR 0 2
8660: PPUSH
8661: LD_STRING D7c-Sci1-1
8663: PPUSH
8664: CALL_OW 88
8668: GO 8682
// Say ( sci , D7c-FSci1-1 ) ;
8670: LD_VAR 0 2
8674: PPUSH
8675: LD_STRING D7c-FSci1-1
8677: PPUSH
8678: CALL_OW 88
// end ; if sci <> Gladstone then
8682: LD_VAR 0 2
8686: PUSH
8687: LD_EXP 17
8691: NONEQUAL
8692: IFFALSE 8706
// Say ( Gladstone , D7c-Glad-1 ) ;
8694: LD_EXP 17
8698: PPUSH
8699: LD_STRING D7c-Glad-1
8701: PPUSH
8702: CALL_OW 88
// if Lisa then
8706: LD_EXP 22
8710: IFFALSE 8724
// Say ( Lisa , D8-Lisa-1 ) ;
8712: LD_EXP 22
8716: PPUSH
8717: LD_STRING D8-Lisa-1
8719: PPUSH
8720: CALL_OW 88
// end ; end ; end_of_file end_of_file
8724: PPOPN 2
8726: END
// export globalGameSaveCounter ; every 0 0$1 do
8727: GO 8729
8729: DISABLE
// begin enable ;
8730: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
8731: LD_STRING updateTimer(
8733: PUSH
8734: LD_OWVAR 1
8738: STR
8739: PUSH
8740: LD_STRING );
8742: STR
8743: PPUSH
8744: CALL_OW 559
// end ;
8748: END
// every 0 0$1 do
8749: GO 8751
8751: DISABLE
// begin globalGameSaveCounter := 0 ;
8752: LD_ADDR_EXP 30
8756: PUSH
8757: LD_INT 0
8759: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
8760: LD_STRING setGameSaveCounter(0)
8762: PPUSH
8763: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
8767: LD_STRING initStreamRollete();
8769: PPUSH
8770: CALL_OW 559
// InitStreamMode ;
8774: CALL 10100 0 0
// DefineStreamItems ( false ) ;
8778: LD_INT 0
8780: PPUSH
8781: CALL 10564 0 1
// end ;
8785: END
// export function SOS_MapStart ( ) ; begin
8786: LD_INT 0
8788: PPUSH
// if streamModeActive then
8789: LD_EXP 31
8793: IFFALSE 8802
// DefineStreamItems ( true ) ;
8795: LD_INT 1
8797: PPUSH
8798: CALL 10564 0 1
// UpdateLuaVariables ( ) ;
8802: CALL 8819 0 0
// UpdateFactoryWaypoints ( ) ;
8806: CALL 23425 0 0
// UpdateWarehouseGatheringPoints ( ) ;
8810: CALL 23682 0 0
// end ;
8814: LD_VAR 0 1
8818: RET
// function UpdateLuaVariables ( ) ; begin
8819: LD_INT 0
8821: PPUSH
// if globalGameSaveCounter then
8822: LD_EXP 30
8826: IFFALSE 8860
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
8828: LD_ADDR_EXP 30
8832: PUSH
8833: LD_EXP 30
8837: PPUSH
8838: CALL 67639 0 1
8842: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
8843: LD_STRING setGameSaveCounter(
8845: PUSH
8846: LD_EXP 30
8850: STR
8851: PUSH
8852: LD_STRING )
8854: STR
8855: PPUSH
8856: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
8860: LD_STRING setGameDifficulty(
8862: PUSH
8863: LD_OWVAR 67
8867: STR
8868: PUSH
8869: LD_STRING )
8871: STR
8872: PPUSH
8873: CALL_OW 559
// end ;
8877: LD_VAR 0 1
8881: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
8882: LD_INT 0
8884: PPUSH
// if p2 = stream_mode then
8885: LD_VAR 0 2
8889: PUSH
8890: LD_INT 100
8892: EQUAL
8893: IFFALSE 9896
// begin if not StreamModeActive then
8895: LD_EXP 31
8899: NOT
8900: IFFALSE 8910
// StreamModeActive := true ;
8902: LD_ADDR_EXP 31
8906: PUSH
8907: LD_INT 1
8909: ST_TO_ADDR
// if p3 = 0 then
8910: LD_VAR 0 3
8914: PUSH
8915: LD_INT 0
8917: EQUAL
8918: IFFALSE 8924
// InitStreamMode ;
8920: CALL 10100 0 0
// if p3 = 1 then
8924: LD_VAR 0 3
8928: PUSH
8929: LD_INT 1
8931: EQUAL
8932: IFFALSE 8942
// sRocket := true ;
8934: LD_ADDR_EXP 36
8938: PUSH
8939: LD_INT 1
8941: ST_TO_ADDR
// if p3 = 2 then
8942: LD_VAR 0 3
8946: PUSH
8947: LD_INT 2
8949: EQUAL
8950: IFFALSE 8960
// sSpeed := true ;
8952: LD_ADDR_EXP 35
8956: PUSH
8957: LD_INT 1
8959: ST_TO_ADDR
// if p3 = 3 then
8960: LD_VAR 0 3
8964: PUSH
8965: LD_INT 3
8967: EQUAL
8968: IFFALSE 8978
// sEngine := true ;
8970: LD_ADDR_EXP 37
8974: PUSH
8975: LD_INT 1
8977: ST_TO_ADDR
// if p3 = 4 then
8978: LD_VAR 0 3
8982: PUSH
8983: LD_INT 4
8985: EQUAL
8986: IFFALSE 8996
// sSpec := true ;
8988: LD_ADDR_EXP 34
8992: PUSH
8993: LD_INT 1
8995: ST_TO_ADDR
// if p3 = 5 then
8996: LD_VAR 0 3
9000: PUSH
9001: LD_INT 5
9003: EQUAL
9004: IFFALSE 9014
// sLevel := true ;
9006: LD_ADDR_EXP 38
9010: PUSH
9011: LD_INT 1
9013: ST_TO_ADDR
// if p3 = 6 then
9014: LD_VAR 0 3
9018: PUSH
9019: LD_INT 6
9021: EQUAL
9022: IFFALSE 9032
// sArmoury := true ;
9024: LD_ADDR_EXP 39
9028: PUSH
9029: LD_INT 1
9031: ST_TO_ADDR
// if p3 = 7 then
9032: LD_VAR 0 3
9036: PUSH
9037: LD_INT 7
9039: EQUAL
9040: IFFALSE 9050
// sRadar := true ;
9042: LD_ADDR_EXP 40
9046: PUSH
9047: LD_INT 1
9049: ST_TO_ADDR
// if p3 = 8 then
9050: LD_VAR 0 3
9054: PUSH
9055: LD_INT 8
9057: EQUAL
9058: IFFALSE 9068
// sBunker := true ;
9060: LD_ADDR_EXP 41
9064: PUSH
9065: LD_INT 1
9067: ST_TO_ADDR
// if p3 = 9 then
9068: LD_VAR 0 3
9072: PUSH
9073: LD_INT 9
9075: EQUAL
9076: IFFALSE 9086
// sHack := true ;
9078: LD_ADDR_EXP 42
9082: PUSH
9083: LD_INT 1
9085: ST_TO_ADDR
// if p3 = 10 then
9086: LD_VAR 0 3
9090: PUSH
9091: LD_INT 10
9093: EQUAL
9094: IFFALSE 9104
// sFire := true ;
9096: LD_ADDR_EXP 43
9100: PUSH
9101: LD_INT 1
9103: ST_TO_ADDR
// if p3 = 11 then
9104: LD_VAR 0 3
9108: PUSH
9109: LD_INT 11
9111: EQUAL
9112: IFFALSE 9122
// sRefresh := true ;
9114: LD_ADDR_EXP 44
9118: PUSH
9119: LD_INT 1
9121: ST_TO_ADDR
// if p3 = 12 then
9122: LD_VAR 0 3
9126: PUSH
9127: LD_INT 12
9129: EQUAL
9130: IFFALSE 9140
// sExp := true ;
9132: LD_ADDR_EXP 45
9136: PUSH
9137: LD_INT 1
9139: ST_TO_ADDR
// if p3 = 13 then
9140: LD_VAR 0 3
9144: PUSH
9145: LD_INT 13
9147: EQUAL
9148: IFFALSE 9158
// sDepot := true ;
9150: LD_ADDR_EXP 46
9154: PUSH
9155: LD_INT 1
9157: ST_TO_ADDR
// if p3 = 14 then
9158: LD_VAR 0 3
9162: PUSH
9163: LD_INT 14
9165: EQUAL
9166: IFFALSE 9176
// sFlag := true ;
9168: LD_ADDR_EXP 47
9172: PUSH
9173: LD_INT 1
9175: ST_TO_ADDR
// if p3 = 15 then
9176: LD_VAR 0 3
9180: PUSH
9181: LD_INT 15
9183: EQUAL
9184: IFFALSE 9194
// sKamikadze := true ;
9186: LD_ADDR_EXP 55
9190: PUSH
9191: LD_INT 1
9193: ST_TO_ADDR
// if p3 = 16 then
9194: LD_VAR 0 3
9198: PUSH
9199: LD_INT 16
9201: EQUAL
9202: IFFALSE 9212
// sTroll := true ;
9204: LD_ADDR_EXP 56
9208: PUSH
9209: LD_INT 1
9211: ST_TO_ADDR
// if p3 = 17 then
9212: LD_VAR 0 3
9216: PUSH
9217: LD_INT 17
9219: EQUAL
9220: IFFALSE 9230
// sSlow := true ;
9222: LD_ADDR_EXP 57
9226: PUSH
9227: LD_INT 1
9229: ST_TO_ADDR
// if p3 = 18 then
9230: LD_VAR 0 3
9234: PUSH
9235: LD_INT 18
9237: EQUAL
9238: IFFALSE 9248
// sLack := true ;
9240: LD_ADDR_EXP 58
9244: PUSH
9245: LD_INT 1
9247: ST_TO_ADDR
// if p3 = 19 then
9248: LD_VAR 0 3
9252: PUSH
9253: LD_INT 19
9255: EQUAL
9256: IFFALSE 9266
// sTank := true ;
9258: LD_ADDR_EXP 60
9262: PUSH
9263: LD_INT 1
9265: ST_TO_ADDR
// if p3 = 20 then
9266: LD_VAR 0 3
9270: PUSH
9271: LD_INT 20
9273: EQUAL
9274: IFFALSE 9284
// sRemote := true ;
9276: LD_ADDR_EXP 61
9280: PUSH
9281: LD_INT 1
9283: ST_TO_ADDR
// if p3 = 21 then
9284: LD_VAR 0 3
9288: PUSH
9289: LD_INT 21
9291: EQUAL
9292: IFFALSE 9302
// sPowell := true ;
9294: LD_ADDR_EXP 62
9298: PUSH
9299: LD_INT 1
9301: ST_TO_ADDR
// if p3 = 22 then
9302: LD_VAR 0 3
9306: PUSH
9307: LD_INT 22
9309: EQUAL
9310: IFFALSE 9320
// sTeleport := true ;
9312: LD_ADDR_EXP 65
9316: PUSH
9317: LD_INT 1
9319: ST_TO_ADDR
// if p3 = 23 then
9320: LD_VAR 0 3
9324: PUSH
9325: LD_INT 23
9327: EQUAL
9328: IFFALSE 9338
// sOilTower := true ;
9330: LD_ADDR_EXP 67
9334: PUSH
9335: LD_INT 1
9337: ST_TO_ADDR
// if p3 = 24 then
9338: LD_VAR 0 3
9342: PUSH
9343: LD_INT 24
9345: EQUAL
9346: IFFALSE 9356
// sShovel := true ;
9348: LD_ADDR_EXP 68
9352: PUSH
9353: LD_INT 1
9355: ST_TO_ADDR
// if p3 = 25 then
9356: LD_VAR 0 3
9360: PUSH
9361: LD_INT 25
9363: EQUAL
9364: IFFALSE 9374
// sSheik := true ;
9366: LD_ADDR_EXP 69
9370: PUSH
9371: LD_INT 1
9373: ST_TO_ADDR
// if p3 = 26 then
9374: LD_VAR 0 3
9378: PUSH
9379: LD_INT 26
9381: EQUAL
9382: IFFALSE 9392
// sEarthquake := true ;
9384: LD_ADDR_EXP 71
9388: PUSH
9389: LD_INT 1
9391: ST_TO_ADDR
// if p3 = 27 then
9392: LD_VAR 0 3
9396: PUSH
9397: LD_INT 27
9399: EQUAL
9400: IFFALSE 9410
// sAI := true ;
9402: LD_ADDR_EXP 72
9406: PUSH
9407: LD_INT 1
9409: ST_TO_ADDR
// if p3 = 28 then
9410: LD_VAR 0 3
9414: PUSH
9415: LD_INT 28
9417: EQUAL
9418: IFFALSE 9428
// sCargo := true ;
9420: LD_ADDR_EXP 75
9424: PUSH
9425: LD_INT 1
9427: ST_TO_ADDR
// if p3 = 29 then
9428: LD_VAR 0 3
9432: PUSH
9433: LD_INT 29
9435: EQUAL
9436: IFFALSE 9446
// sDLaser := true ;
9438: LD_ADDR_EXP 76
9442: PUSH
9443: LD_INT 1
9445: ST_TO_ADDR
// if p3 = 30 then
9446: LD_VAR 0 3
9450: PUSH
9451: LD_INT 30
9453: EQUAL
9454: IFFALSE 9464
// sExchange := true ;
9456: LD_ADDR_EXP 77
9460: PUSH
9461: LD_INT 1
9463: ST_TO_ADDR
// if p3 = 31 then
9464: LD_VAR 0 3
9468: PUSH
9469: LD_INT 31
9471: EQUAL
9472: IFFALSE 9482
// sFac := true ;
9474: LD_ADDR_EXP 78
9478: PUSH
9479: LD_INT 1
9481: ST_TO_ADDR
// if p3 = 32 then
9482: LD_VAR 0 3
9486: PUSH
9487: LD_INT 32
9489: EQUAL
9490: IFFALSE 9500
// sPower := true ;
9492: LD_ADDR_EXP 79
9496: PUSH
9497: LD_INT 1
9499: ST_TO_ADDR
// if p3 = 33 then
9500: LD_VAR 0 3
9504: PUSH
9505: LD_INT 33
9507: EQUAL
9508: IFFALSE 9518
// sRandom := true ;
9510: LD_ADDR_EXP 80
9514: PUSH
9515: LD_INT 1
9517: ST_TO_ADDR
// if p3 = 34 then
9518: LD_VAR 0 3
9522: PUSH
9523: LD_INT 34
9525: EQUAL
9526: IFFALSE 9536
// sShield := true ;
9528: LD_ADDR_EXP 81
9532: PUSH
9533: LD_INT 1
9535: ST_TO_ADDR
// if p3 = 35 then
9536: LD_VAR 0 3
9540: PUSH
9541: LD_INT 35
9543: EQUAL
9544: IFFALSE 9554
// sTime := true ;
9546: LD_ADDR_EXP 82
9550: PUSH
9551: LD_INT 1
9553: ST_TO_ADDR
// if p3 = 36 then
9554: LD_VAR 0 3
9558: PUSH
9559: LD_INT 36
9561: EQUAL
9562: IFFALSE 9572
// sTools := true ;
9564: LD_ADDR_EXP 83
9568: PUSH
9569: LD_INT 1
9571: ST_TO_ADDR
// if p3 = 101 then
9572: LD_VAR 0 3
9576: PUSH
9577: LD_INT 101
9579: EQUAL
9580: IFFALSE 9590
// sSold := true ;
9582: LD_ADDR_EXP 48
9586: PUSH
9587: LD_INT 1
9589: ST_TO_ADDR
// if p3 = 102 then
9590: LD_VAR 0 3
9594: PUSH
9595: LD_INT 102
9597: EQUAL
9598: IFFALSE 9608
// sDiff := true ;
9600: LD_ADDR_EXP 49
9604: PUSH
9605: LD_INT 1
9607: ST_TO_ADDR
// if p3 = 103 then
9608: LD_VAR 0 3
9612: PUSH
9613: LD_INT 103
9615: EQUAL
9616: IFFALSE 9626
// sFog := true ;
9618: LD_ADDR_EXP 52
9622: PUSH
9623: LD_INT 1
9625: ST_TO_ADDR
// if p3 = 104 then
9626: LD_VAR 0 3
9630: PUSH
9631: LD_INT 104
9633: EQUAL
9634: IFFALSE 9644
// sReset := true ;
9636: LD_ADDR_EXP 53
9640: PUSH
9641: LD_INT 1
9643: ST_TO_ADDR
// if p3 = 105 then
9644: LD_VAR 0 3
9648: PUSH
9649: LD_INT 105
9651: EQUAL
9652: IFFALSE 9662
// sSun := true ;
9654: LD_ADDR_EXP 54
9658: PUSH
9659: LD_INT 1
9661: ST_TO_ADDR
// if p3 = 106 then
9662: LD_VAR 0 3
9666: PUSH
9667: LD_INT 106
9669: EQUAL
9670: IFFALSE 9680
// sTiger := true ;
9672: LD_ADDR_EXP 50
9676: PUSH
9677: LD_INT 1
9679: ST_TO_ADDR
// if p3 = 107 then
9680: LD_VAR 0 3
9684: PUSH
9685: LD_INT 107
9687: EQUAL
9688: IFFALSE 9698
// sBomb := true ;
9690: LD_ADDR_EXP 51
9694: PUSH
9695: LD_INT 1
9697: ST_TO_ADDR
// if p3 = 108 then
9698: LD_VAR 0 3
9702: PUSH
9703: LD_INT 108
9705: EQUAL
9706: IFFALSE 9716
// sWound := true ;
9708: LD_ADDR_EXP 59
9712: PUSH
9713: LD_INT 1
9715: ST_TO_ADDR
// if p3 = 109 then
9716: LD_VAR 0 3
9720: PUSH
9721: LD_INT 109
9723: EQUAL
9724: IFFALSE 9734
// sBetray := true ;
9726: LD_ADDR_EXP 63
9730: PUSH
9731: LD_INT 1
9733: ST_TO_ADDR
// if p3 = 110 then
9734: LD_VAR 0 3
9738: PUSH
9739: LD_INT 110
9741: EQUAL
9742: IFFALSE 9752
// sContamin := true ;
9744: LD_ADDR_EXP 64
9748: PUSH
9749: LD_INT 1
9751: ST_TO_ADDR
// if p3 = 111 then
9752: LD_VAR 0 3
9756: PUSH
9757: LD_INT 111
9759: EQUAL
9760: IFFALSE 9770
// sOil := true ;
9762: LD_ADDR_EXP 66
9766: PUSH
9767: LD_INT 1
9769: ST_TO_ADDR
// if p3 = 112 then
9770: LD_VAR 0 3
9774: PUSH
9775: LD_INT 112
9777: EQUAL
9778: IFFALSE 9788
// sStu := true ;
9780: LD_ADDR_EXP 70
9784: PUSH
9785: LD_INT 1
9787: ST_TO_ADDR
// if p3 = 113 then
9788: LD_VAR 0 3
9792: PUSH
9793: LD_INT 113
9795: EQUAL
9796: IFFALSE 9806
// sBazooka := true ;
9798: LD_ADDR_EXP 73
9802: PUSH
9803: LD_INT 1
9805: ST_TO_ADDR
// if p3 = 114 then
9806: LD_VAR 0 3
9810: PUSH
9811: LD_INT 114
9813: EQUAL
9814: IFFALSE 9824
// sMortar := true ;
9816: LD_ADDR_EXP 74
9820: PUSH
9821: LD_INT 1
9823: ST_TO_ADDR
// if p3 = 115 then
9824: LD_VAR 0 3
9828: PUSH
9829: LD_INT 115
9831: EQUAL
9832: IFFALSE 9842
// sRanger := true ;
9834: LD_ADDR_EXP 84
9838: PUSH
9839: LD_INT 1
9841: ST_TO_ADDR
// if p3 = 116 then
9842: LD_VAR 0 3
9846: PUSH
9847: LD_INT 116
9849: EQUAL
9850: IFFALSE 9860
// sComputer := true ;
9852: LD_ADDR_EXP 85
9856: PUSH
9857: LD_INT 1
9859: ST_TO_ADDR
// if p3 = 117 then
9860: LD_VAR 0 3
9864: PUSH
9865: LD_INT 117
9867: EQUAL
9868: IFFALSE 9878
// s30 := true ;
9870: LD_ADDR_EXP 86
9874: PUSH
9875: LD_INT 1
9877: ST_TO_ADDR
// if p3 = 118 then
9878: LD_VAR 0 3
9882: PUSH
9883: LD_INT 118
9885: EQUAL
9886: IFFALSE 9896
// s60 := true ;
9888: LD_ADDR_EXP 87
9892: PUSH
9893: LD_INT 1
9895: ST_TO_ADDR
// end ; if p2 = hack_mode then
9896: LD_VAR 0 2
9900: PUSH
9901: LD_INT 101
9903: EQUAL
9904: IFFALSE 10032
// begin case p3 of 1 :
9906: LD_VAR 0 3
9910: PUSH
9911: LD_INT 1
9913: DOUBLE
9914: EQUAL
9915: IFTRUE 9919
9917: GO 9926
9919: POP
// hHackUnlimitedResources ; 2 :
9920: CALL 22171 0 0
9924: GO 10032
9926: LD_INT 2
9928: DOUBLE
9929: EQUAL
9930: IFTRUE 9934
9932: GO 9941
9934: POP
// hHackSetLevel10 ; 3 :
9935: CALL 22304 0 0
9939: GO 10032
9941: LD_INT 3
9943: DOUBLE
9944: EQUAL
9945: IFTRUE 9949
9947: GO 9956
9949: POP
// hHackSetLevel10YourUnits ; 4 :
9950: CALL 22389 0 0
9954: GO 10032
9956: LD_INT 4
9958: DOUBLE
9959: EQUAL
9960: IFTRUE 9964
9962: GO 9971
9964: POP
// hHackInvincible ; 5 :
9965: CALL 22837 0 0
9969: GO 10032
9971: LD_INT 5
9973: DOUBLE
9974: EQUAL
9975: IFTRUE 9979
9977: GO 9986
9979: POP
// hHackInvisible ; 6 :
9980: CALL 22948 0 0
9984: GO 10032
9986: LD_INT 6
9988: DOUBLE
9989: EQUAL
9990: IFTRUE 9994
9992: GO 10001
9994: POP
// hHackChangeYourSide ; 7 :
9995: CALL 23005 0 0
9999: GO 10032
10001: LD_INT 7
10003: DOUBLE
10004: EQUAL
10005: IFTRUE 10009
10007: GO 10016
10009: POP
// hHackChangeUnitSide ; 8 :
10010: CALL 23047 0 0
10014: GO 10032
10016: LD_INT 8
10018: DOUBLE
10019: EQUAL
10020: IFTRUE 10024
10022: GO 10031
10024: POP
// hHackFog ; end ;
10025: CALL 23148 0 0
10029: GO 10032
10031: POP
// end ; if p2 = game_save_mode then
10032: LD_VAR 0 2
10036: PUSH
10037: LD_INT 102
10039: EQUAL
10040: IFFALSE 10095
// begin if p3 = 1 then
10042: LD_VAR 0 3
10046: PUSH
10047: LD_INT 1
10049: EQUAL
10050: IFFALSE 10062
// globalGameSaveCounter := p4 ;
10052: LD_ADDR_EXP 30
10056: PUSH
10057: LD_VAR 0 4
10061: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
10062: LD_VAR 0 3
10066: PUSH
10067: LD_INT 2
10069: EQUAL
10070: PUSH
10071: LD_EXP 30
10075: AND
10076: IFFALSE 10095
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
10078: LD_STRING setGameSaveCounter(
10080: PUSH
10081: LD_EXP 30
10085: STR
10086: PUSH
10087: LD_STRING )
10089: STR
10090: PPUSH
10091: CALL_OW 559
// end ; end ;
10095: LD_VAR 0 7
10099: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
10100: LD_INT 0
10102: PPUSH
// streamModeActive := false ;
10103: LD_ADDR_EXP 31
10107: PUSH
10108: LD_INT 0
10110: ST_TO_ADDR
// normalCounter := 36 ;
10111: LD_ADDR_EXP 32
10115: PUSH
10116: LD_INT 36
10118: ST_TO_ADDR
// hardcoreCounter := 18 ;
10119: LD_ADDR_EXP 33
10123: PUSH
10124: LD_INT 18
10126: ST_TO_ADDR
// sRocket := false ;
10127: LD_ADDR_EXP 36
10131: PUSH
10132: LD_INT 0
10134: ST_TO_ADDR
// sSpeed := false ;
10135: LD_ADDR_EXP 35
10139: PUSH
10140: LD_INT 0
10142: ST_TO_ADDR
// sEngine := false ;
10143: LD_ADDR_EXP 37
10147: PUSH
10148: LD_INT 0
10150: ST_TO_ADDR
// sSpec := false ;
10151: LD_ADDR_EXP 34
10155: PUSH
10156: LD_INT 0
10158: ST_TO_ADDR
// sLevel := false ;
10159: LD_ADDR_EXP 38
10163: PUSH
10164: LD_INT 0
10166: ST_TO_ADDR
// sArmoury := false ;
10167: LD_ADDR_EXP 39
10171: PUSH
10172: LD_INT 0
10174: ST_TO_ADDR
// sRadar := false ;
10175: LD_ADDR_EXP 40
10179: PUSH
10180: LD_INT 0
10182: ST_TO_ADDR
// sBunker := false ;
10183: LD_ADDR_EXP 41
10187: PUSH
10188: LD_INT 0
10190: ST_TO_ADDR
// sHack := false ;
10191: LD_ADDR_EXP 42
10195: PUSH
10196: LD_INT 0
10198: ST_TO_ADDR
// sFire := false ;
10199: LD_ADDR_EXP 43
10203: PUSH
10204: LD_INT 0
10206: ST_TO_ADDR
// sRefresh := false ;
10207: LD_ADDR_EXP 44
10211: PUSH
10212: LD_INT 0
10214: ST_TO_ADDR
// sExp := false ;
10215: LD_ADDR_EXP 45
10219: PUSH
10220: LD_INT 0
10222: ST_TO_ADDR
// sDepot := false ;
10223: LD_ADDR_EXP 46
10227: PUSH
10228: LD_INT 0
10230: ST_TO_ADDR
// sFlag := false ;
10231: LD_ADDR_EXP 47
10235: PUSH
10236: LD_INT 0
10238: ST_TO_ADDR
// sKamikadze := false ;
10239: LD_ADDR_EXP 55
10243: PUSH
10244: LD_INT 0
10246: ST_TO_ADDR
// sTroll := false ;
10247: LD_ADDR_EXP 56
10251: PUSH
10252: LD_INT 0
10254: ST_TO_ADDR
// sSlow := false ;
10255: LD_ADDR_EXP 57
10259: PUSH
10260: LD_INT 0
10262: ST_TO_ADDR
// sLack := false ;
10263: LD_ADDR_EXP 58
10267: PUSH
10268: LD_INT 0
10270: ST_TO_ADDR
// sTank := false ;
10271: LD_ADDR_EXP 60
10275: PUSH
10276: LD_INT 0
10278: ST_TO_ADDR
// sRemote := false ;
10279: LD_ADDR_EXP 61
10283: PUSH
10284: LD_INT 0
10286: ST_TO_ADDR
// sPowell := false ;
10287: LD_ADDR_EXP 62
10291: PUSH
10292: LD_INT 0
10294: ST_TO_ADDR
// sTeleport := false ;
10295: LD_ADDR_EXP 65
10299: PUSH
10300: LD_INT 0
10302: ST_TO_ADDR
// sOilTower := false ;
10303: LD_ADDR_EXP 67
10307: PUSH
10308: LD_INT 0
10310: ST_TO_ADDR
// sShovel := false ;
10311: LD_ADDR_EXP 68
10315: PUSH
10316: LD_INT 0
10318: ST_TO_ADDR
// sSheik := false ;
10319: LD_ADDR_EXP 69
10323: PUSH
10324: LD_INT 0
10326: ST_TO_ADDR
// sEarthquake := false ;
10327: LD_ADDR_EXP 71
10331: PUSH
10332: LD_INT 0
10334: ST_TO_ADDR
// sAI := false ;
10335: LD_ADDR_EXP 72
10339: PUSH
10340: LD_INT 0
10342: ST_TO_ADDR
// sCargo := false ;
10343: LD_ADDR_EXP 75
10347: PUSH
10348: LD_INT 0
10350: ST_TO_ADDR
// sDLaser := false ;
10351: LD_ADDR_EXP 76
10355: PUSH
10356: LD_INT 0
10358: ST_TO_ADDR
// sExchange := false ;
10359: LD_ADDR_EXP 77
10363: PUSH
10364: LD_INT 0
10366: ST_TO_ADDR
// sFac := false ;
10367: LD_ADDR_EXP 78
10371: PUSH
10372: LD_INT 0
10374: ST_TO_ADDR
// sPower := false ;
10375: LD_ADDR_EXP 79
10379: PUSH
10380: LD_INT 0
10382: ST_TO_ADDR
// sRandom := false ;
10383: LD_ADDR_EXP 80
10387: PUSH
10388: LD_INT 0
10390: ST_TO_ADDR
// sShield := false ;
10391: LD_ADDR_EXP 81
10395: PUSH
10396: LD_INT 0
10398: ST_TO_ADDR
// sTime := false ;
10399: LD_ADDR_EXP 82
10403: PUSH
10404: LD_INT 0
10406: ST_TO_ADDR
// sTools := false ;
10407: LD_ADDR_EXP 83
10411: PUSH
10412: LD_INT 0
10414: ST_TO_ADDR
// sSold := false ;
10415: LD_ADDR_EXP 48
10419: PUSH
10420: LD_INT 0
10422: ST_TO_ADDR
// sDiff := false ;
10423: LD_ADDR_EXP 49
10427: PUSH
10428: LD_INT 0
10430: ST_TO_ADDR
// sFog := false ;
10431: LD_ADDR_EXP 52
10435: PUSH
10436: LD_INT 0
10438: ST_TO_ADDR
// sReset := false ;
10439: LD_ADDR_EXP 53
10443: PUSH
10444: LD_INT 0
10446: ST_TO_ADDR
// sSun := false ;
10447: LD_ADDR_EXP 54
10451: PUSH
10452: LD_INT 0
10454: ST_TO_ADDR
// sTiger := false ;
10455: LD_ADDR_EXP 50
10459: PUSH
10460: LD_INT 0
10462: ST_TO_ADDR
// sBomb := false ;
10463: LD_ADDR_EXP 51
10467: PUSH
10468: LD_INT 0
10470: ST_TO_ADDR
// sWound := false ;
10471: LD_ADDR_EXP 59
10475: PUSH
10476: LD_INT 0
10478: ST_TO_ADDR
// sBetray := false ;
10479: LD_ADDR_EXP 63
10483: PUSH
10484: LD_INT 0
10486: ST_TO_ADDR
// sContamin := false ;
10487: LD_ADDR_EXP 64
10491: PUSH
10492: LD_INT 0
10494: ST_TO_ADDR
// sOil := false ;
10495: LD_ADDR_EXP 66
10499: PUSH
10500: LD_INT 0
10502: ST_TO_ADDR
// sStu := false ;
10503: LD_ADDR_EXP 70
10507: PUSH
10508: LD_INT 0
10510: ST_TO_ADDR
// sBazooka := false ;
10511: LD_ADDR_EXP 73
10515: PUSH
10516: LD_INT 0
10518: ST_TO_ADDR
// sMortar := false ;
10519: LD_ADDR_EXP 74
10523: PUSH
10524: LD_INT 0
10526: ST_TO_ADDR
// sRanger := false ;
10527: LD_ADDR_EXP 84
10531: PUSH
10532: LD_INT 0
10534: ST_TO_ADDR
// sComputer := false ;
10535: LD_ADDR_EXP 85
10539: PUSH
10540: LD_INT 0
10542: ST_TO_ADDR
// s30 := false ;
10543: LD_ADDR_EXP 86
10547: PUSH
10548: LD_INT 0
10550: ST_TO_ADDR
// s60 := false ;
10551: LD_ADDR_EXP 87
10555: PUSH
10556: LD_INT 0
10558: ST_TO_ADDR
// end ;
10559: LD_VAR 0 1
10563: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
10564: LD_INT 0
10566: PPUSH
10567: PPUSH
10568: PPUSH
10569: PPUSH
10570: PPUSH
10571: PPUSH
10572: PPUSH
// result := [ ] ;
10573: LD_ADDR_VAR 0 2
10577: PUSH
10578: EMPTY
10579: ST_TO_ADDR
// if campaign_id = 1 then
10580: LD_OWVAR 69
10584: PUSH
10585: LD_INT 1
10587: EQUAL
10588: IFFALSE 13754
// begin case mission_number of 1 :
10590: LD_OWVAR 70
10594: PUSH
10595: LD_INT 1
10597: DOUBLE
10598: EQUAL
10599: IFTRUE 10603
10601: GO 10679
10603: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
10604: LD_ADDR_VAR 0 2
10608: PUSH
10609: LD_INT 2
10611: PUSH
10612: LD_INT 4
10614: PUSH
10615: LD_INT 11
10617: PUSH
10618: LD_INT 12
10620: PUSH
10621: LD_INT 15
10623: PUSH
10624: LD_INT 16
10626: PUSH
10627: LD_INT 22
10629: PUSH
10630: LD_INT 23
10632: PUSH
10633: LD_INT 26
10635: PUSH
10636: EMPTY
10637: LIST
10638: LIST
10639: LIST
10640: LIST
10641: LIST
10642: LIST
10643: LIST
10644: LIST
10645: LIST
10646: PUSH
10647: LD_INT 101
10649: PUSH
10650: LD_INT 102
10652: PUSH
10653: LD_INT 106
10655: PUSH
10656: LD_INT 116
10658: PUSH
10659: LD_INT 117
10661: PUSH
10662: LD_INT 118
10664: PUSH
10665: EMPTY
10666: LIST
10667: LIST
10668: LIST
10669: LIST
10670: LIST
10671: LIST
10672: PUSH
10673: EMPTY
10674: LIST
10675: LIST
10676: ST_TO_ADDR
10677: GO 13752
10679: LD_INT 2
10681: DOUBLE
10682: EQUAL
10683: IFTRUE 10687
10685: GO 10771
10687: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
10688: LD_ADDR_VAR 0 2
10692: PUSH
10693: LD_INT 2
10695: PUSH
10696: LD_INT 4
10698: PUSH
10699: LD_INT 11
10701: PUSH
10702: LD_INT 12
10704: PUSH
10705: LD_INT 15
10707: PUSH
10708: LD_INT 16
10710: PUSH
10711: LD_INT 22
10713: PUSH
10714: LD_INT 23
10716: PUSH
10717: LD_INT 26
10719: PUSH
10720: EMPTY
10721: LIST
10722: LIST
10723: LIST
10724: LIST
10725: LIST
10726: LIST
10727: LIST
10728: LIST
10729: LIST
10730: PUSH
10731: LD_INT 101
10733: PUSH
10734: LD_INT 102
10736: PUSH
10737: LD_INT 105
10739: PUSH
10740: LD_INT 106
10742: PUSH
10743: LD_INT 108
10745: PUSH
10746: LD_INT 116
10748: PUSH
10749: LD_INT 117
10751: PUSH
10752: LD_INT 118
10754: PUSH
10755: EMPTY
10756: LIST
10757: LIST
10758: LIST
10759: LIST
10760: LIST
10761: LIST
10762: LIST
10763: LIST
10764: PUSH
10765: EMPTY
10766: LIST
10767: LIST
10768: ST_TO_ADDR
10769: GO 13752
10771: LD_INT 3
10773: DOUBLE
10774: EQUAL
10775: IFTRUE 10779
10777: GO 10867
10779: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
10780: LD_ADDR_VAR 0 2
10784: PUSH
10785: LD_INT 2
10787: PUSH
10788: LD_INT 4
10790: PUSH
10791: LD_INT 5
10793: PUSH
10794: LD_INT 11
10796: PUSH
10797: LD_INT 12
10799: PUSH
10800: LD_INT 15
10802: PUSH
10803: LD_INT 16
10805: PUSH
10806: LD_INT 22
10808: PUSH
10809: LD_INT 26
10811: PUSH
10812: LD_INT 36
10814: PUSH
10815: EMPTY
10816: LIST
10817: LIST
10818: LIST
10819: LIST
10820: LIST
10821: LIST
10822: LIST
10823: LIST
10824: LIST
10825: LIST
10826: PUSH
10827: LD_INT 101
10829: PUSH
10830: LD_INT 102
10832: PUSH
10833: LD_INT 105
10835: PUSH
10836: LD_INT 106
10838: PUSH
10839: LD_INT 108
10841: PUSH
10842: LD_INT 116
10844: PUSH
10845: LD_INT 117
10847: PUSH
10848: LD_INT 118
10850: PUSH
10851: EMPTY
10852: LIST
10853: LIST
10854: LIST
10855: LIST
10856: LIST
10857: LIST
10858: LIST
10859: LIST
10860: PUSH
10861: EMPTY
10862: LIST
10863: LIST
10864: ST_TO_ADDR
10865: GO 13752
10867: LD_INT 4
10869: DOUBLE
10870: EQUAL
10871: IFTRUE 10875
10873: GO 10971
10875: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
10876: LD_ADDR_VAR 0 2
10880: PUSH
10881: LD_INT 2
10883: PUSH
10884: LD_INT 4
10886: PUSH
10887: LD_INT 5
10889: PUSH
10890: LD_INT 8
10892: PUSH
10893: LD_INT 11
10895: PUSH
10896: LD_INT 12
10898: PUSH
10899: LD_INT 15
10901: PUSH
10902: LD_INT 16
10904: PUSH
10905: LD_INT 22
10907: PUSH
10908: LD_INT 23
10910: PUSH
10911: LD_INT 26
10913: PUSH
10914: LD_INT 36
10916: PUSH
10917: EMPTY
10918: LIST
10919: LIST
10920: LIST
10921: LIST
10922: LIST
10923: LIST
10924: LIST
10925: LIST
10926: LIST
10927: LIST
10928: LIST
10929: LIST
10930: PUSH
10931: LD_INT 101
10933: PUSH
10934: LD_INT 102
10936: PUSH
10937: LD_INT 105
10939: PUSH
10940: LD_INT 106
10942: PUSH
10943: LD_INT 108
10945: PUSH
10946: LD_INT 116
10948: PUSH
10949: LD_INT 117
10951: PUSH
10952: LD_INT 118
10954: PUSH
10955: EMPTY
10956: LIST
10957: LIST
10958: LIST
10959: LIST
10960: LIST
10961: LIST
10962: LIST
10963: LIST
10964: PUSH
10965: EMPTY
10966: LIST
10967: LIST
10968: ST_TO_ADDR
10969: GO 13752
10971: LD_INT 5
10973: DOUBLE
10974: EQUAL
10975: IFTRUE 10979
10977: GO 11091
10979: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
10980: LD_ADDR_VAR 0 2
10984: PUSH
10985: LD_INT 2
10987: PUSH
10988: LD_INT 4
10990: PUSH
10991: LD_INT 5
10993: PUSH
10994: LD_INT 6
10996: PUSH
10997: LD_INT 8
10999: PUSH
11000: LD_INT 11
11002: PUSH
11003: LD_INT 12
11005: PUSH
11006: LD_INT 15
11008: PUSH
11009: LD_INT 16
11011: PUSH
11012: LD_INT 22
11014: PUSH
11015: LD_INT 23
11017: PUSH
11018: LD_INT 25
11020: PUSH
11021: LD_INT 26
11023: PUSH
11024: LD_INT 36
11026: PUSH
11027: EMPTY
11028: LIST
11029: LIST
11030: LIST
11031: LIST
11032: LIST
11033: LIST
11034: LIST
11035: LIST
11036: LIST
11037: LIST
11038: LIST
11039: LIST
11040: LIST
11041: LIST
11042: PUSH
11043: LD_INT 101
11045: PUSH
11046: LD_INT 102
11048: PUSH
11049: LD_INT 105
11051: PUSH
11052: LD_INT 106
11054: PUSH
11055: LD_INT 108
11057: PUSH
11058: LD_INT 109
11060: PUSH
11061: LD_INT 112
11063: PUSH
11064: LD_INT 116
11066: PUSH
11067: LD_INT 117
11069: PUSH
11070: LD_INT 118
11072: PUSH
11073: EMPTY
11074: LIST
11075: LIST
11076: LIST
11077: LIST
11078: LIST
11079: LIST
11080: LIST
11081: LIST
11082: LIST
11083: LIST
11084: PUSH
11085: EMPTY
11086: LIST
11087: LIST
11088: ST_TO_ADDR
11089: GO 13752
11091: LD_INT 6
11093: DOUBLE
11094: EQUAL
11095: IFTRUE 11099
11097: GO 11231
11099: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
11100: LD_ADDR_VAR 0 2
11104: PUSH
11105: LD_INT 2
11107: PUSH
11108: LD_INT 4
11110: PUSH
11111: LD_INT 5
11113: PUSH
11114: LD_INT 6
11116: PUSH
11117: LD_INT 8
11119: PUSH
11120: LD_INT 11
11122: PUSH
11123: LD_INT 12
11125: PUSH
11126: LD_INT 15
11128: PUSH
11129: LD_INT 16
11131: PUSH
11132: LD_INT 20
11134: PUSH
11135: LD_INT 21
11137: PUSH
11138: LD_INT 22
11140: PUSH
11141: LD_INT 23
11143: PUSH
11144: LD_INT 25
11146: PUSH
11147: LD_INT 26
11149: PUSH
11150: LD_INT 30
11152: PUSH
11153: LD_INT 31
11155: PUSH
11156: LD_INT 32
11158: PUSH
11159: LD_INT 36
11161: PUSH
11162: EMPTY
11163: LIST
11164: LIST
11165: LIST
11166: LIST
11167: LIST
11168: LIST
11169: LIST
11170: LIST
11171: LIST
11172: LIST
11173: LIST
11174: LIST
11175: LIST
11176: LIST
11177: LIST
11178: LIST
11179: LIST
11180: LIST
11181: LIST
11182: PUSH
11183: LD_INT 101
11185: PUSH
11186: LD_INT 102
11188: PUSH
11189: LD_INT 105
11191: PUSH
11192: LD_INT 106
11194: PUSH
11195: LD_INT 108
11197: PUSH
11198: LD_INT 109
11200: PUSH
11201: LD_INT 112
11203: PUSH
11204: LD_INT 116
11206: PUSH
11207: LD_INT 117
11209: PUSH
11210: LD_INT 118
11212: PUSH
11213: EMPTY
11214: LIST
11215: LIST
11216: LIST
11217: LIST
11218: LIST
11219: LIST
11220: LIST
11221: LIST
11222: LIST
11223: LIST
11224: PUSH
11225: EMPTY
11226: LIST
11227: LIST
11228: ST_TO_ADDR
11229: GO 13752
11231: LD_INT 7
11233: DOUBLE
11234: EQUAL
11235: IFTRUE 11239
11237: GO 11351
11239: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
11240: LD_ADDR_VAR 0 2
11244: PUSH
11245: LD_INT 2
11247: PUSH
11248: LD_INT 4
11250: PUSH
11251: LD_INT 5
11253: PUSH
11254: LD_INT 7
11256: PUSH
11257: LD_INT 11
11259: PUSH
11260: LD_INT 12
11262: PUSH
11263: LD_INT 15
11265: PUSH
11266: LD_INT 16
11268: PUSH
11269: LD_INT 20
11271: PUSH
11272: LD_INT 21
11274: PUSH
11275: LD_INT 22
11277: PUSH
11278: LD_INT 23
11280: PUSH
11281: LD_INT 25
11283: PUSH
11284: LD_INT 26
11286: PUSH
11287: EMPTY
11288: LIST
11289: LIST
11290: LIST
11291: LIST
11292: LIST
11293: LIST
11294: LIST
11295: LIST
11296: LIST
11297: LIST
11298: LIST
11299: LIST
11300: LIST
11301: LIST
11302: PUSH
11303: LD_INT 101
11305: PUSH
11306: LD_INT 102
11308: PUSH
11309: LD_INT 103
11311: PUSH
11312: LD_INT 105
11314: PUSH
11315: LD_INT 106
11317: PUSH
11318: LD_INT 108
11320: PUSH
11321: LD_INT 112
11323: PUSH
11324: LD_INT 116
11326: PUSH
11327: LD_INT 117
11329: PUSH
11330: LD_INT 118
11332: PUSH
11333: EMPTY
11334: LIST
11335: LIST
11336: LIST
11337: LIST
11338: LIST
11339: LIST
11340: LIST
11341: LIST
11342: LIST
11343: LIST
11344: PUSH
11345: EMPTY
11346: LIST
11347: LIST
11348: ST_TO_ADDR
11349: GO 13752
11351: LD_INT 8
11353: DOUBLE
11354: EQUAL
11355: IFTRUE 11359
11357: GO 11499
11359: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
11360: LD_ADDR_VAR 0 2
11364: PUSH
11365: LD_INT 2
11367: PUSH
11368: LD_INT 4
11370: PUSH
11371: LD_INT 5
11373: PUSH
11374: LD_INT 6
11376: PUSH
11377: LD_INT 7
11379: PUSH
11380: LD_INT 8
11382: PUSH
11383: LD_INT 11
11385: PUSH
11386: LD_INT 12
11388: PUSH
11389: LD_INT 15
11391: PUSH
11392: LD_INT 16
11394: PUSH
11395: LD_INT 20
11397: PUSH
11398: LD_INT 21
11400: PUSH
11401: LD_INT 22
11403: PUSH
11404: LD_INT 23
11406: PUSH
11407: LD_INT 25
11409: PUSH
11410: LD_INT 26
11412: PUSH
11413: LD_INT 30
11415: PUSH
11416: LD_INT 31
11418: PUSH
11419: LD_INT 32
11421: PUSH
11422: LD_INT 36
11424: PUSH
11425: EMPTY
11426: LIST
11427: LIST
11428: LIST
11429: LIST
11430: LIST
11431: LIST
11432: LIST
11433: LIST
11434: LIST
11435: LIST
11436: LIST
11437: LIST
11438: LIST
11439: LIST
11440: LIST
11441: LIST
11442: LIST
11443: LIST
11444: LIST
11445: LIST
11446: PUSH
11447: LD_INT 101
11449: PUSH
11450: LD_INT 102
11452: PUSH
11453: LD_INT 103
11455: PUSH
11456: LD_INT 105
11458: PUSH
11459: LD_INT 106
11461: PUSH
11462: LD_INT 108
11464: PUSH
11465: LD_INT 109
11467: PUSH
11468: LD_INT 112
11470: PUSH
11471: LD_INT 116
11473: PUSH
11474: LD_INT 117
11476: PUSH
11477: LD_INT 118
11479: PUSH
11480: EMPTY
11481: LIST
11482: LIST
11483: LIST
11484: LIST
11485: LIST
11486: LIST
11487: LIST
11488: LIST
11489: LIST
11490: LIST
11491: LIST
11492: PUSH
11493: EMPTY
11494: LIST
11495: LIST
11496: ST_TO_ADDR
11497: GO 13752
11499: LD_INT 9
11501: DOUBLE
11502: EQUAL
11503: IFTRUE 11507
11505: GO 11655
11507: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
11508: LD_ADDR_VAR 0 2
11512: PUSH
11513: LD_INT 2
11515: PUSH
11516: LD_INT 4
11518: PUSH
11519: LD_INT 5
11521: PUSH
11522: LD_INT 6
11524: PUSH
11525: LD_INT 7
11527: PUSH
11528: LD_INT 8
11530: PUSH
11531: LD_INT 11
11533: PUSH
11534: LD_INT 12
11536: PUSH
11537: LD_INT 15
11539: PUSH
11540: LD_INT 16
11542: PUSH
11543: LD_INT 20
11545: PUSH
11546: LD_INT 21
11548: PUSH
11549: LD_INT 22
11551: PUSH
11552: LD_INT 23
11554: PUSH
11555: LD_INT 25
11557: PUSH
11558: LD_INT 26
11560: PUSH
11561: LD_INT 28
11563: PUSH
11564: LD_INT 30
11566: PUSH
11567: LD_INT 31
11569: PUSH
11570: LD_INT 32
11572: PUSH
11573: LD_INT 36
11575: PUSH
11576: EMPTY
11577: LIST
11578: LIST
11579: LIST
11580: LIST
11581: LIST
11582: LIST
11583: LIST
11584: LIST
11585: LIST
11586: LIST
11587: LIST
11588: LIST
11589: LIST
11590: LIST
11591: LIST
11592: LIST
11593: LIST
11594: LIST
11595: LIST
11596: LIST
11597: LIST
11598: PUSH
11599: LD_INT 101
11601: PUSH
11602: LD_INT 102
11604: PUSH
11605: LD_INT 103
11607: PUSH
11608: LD_INT 105
11610: PUSH
11611: LD_INT 106
11613: PUSH
11614: LD_INT 108
11616: PUSH
11617: LD_INT 109
11619: PUSH
11620: LD_INT 112
11622: PUSH
11623: LD_INT 114
11625: PUSH
11626: LD_INT 116
11628: PUSH
11629: LD_INT 117
11631: PUSH
11632: LD_INT 118
11634: PUSH
11635: EMPTY
11636: LIST
11637: LIST
11638: LIST
11639: LIST
11640: LIST
11641: LIST
11642: LIST
11643: LIST
11644: LIST
11645: LIST
11646: LIST
11647: LIST
11648: PUSH
11649: EMPTY
11650: LIST
11651: LIST
11652: ST_TO_ADDR
11653: GO 13752
11655: LD_INT 10
11657: DOUBLE
11658: EQUAL
11659: IFTRUE 11663
11661: GO 11859
11663: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
11664: LD_ADDR_VAR 0 2
11668: PUSH
11669: LD_INT 2
11671: PUSH
11672: LD_INT 4
11674: PUSH
11675: LD_INT 5
11677: PUSH
11678: LD_INT 6
11680: PUSH
11681: LD_INT 7
11683: PUSH
11684: LD_INT 8
11686: PUSH
11687: LD_INT 9
11689: PUSH
11690: LD_INT 10
11692: PUSH
11693: LD_INT 11
11695: PUSH
11696: LD_INT 12
11698: PUSH
11699: LD_INT 13
11701: PUSH
11702: LD_INT 14
11704: PUSH
11705: LD_INT 15
11707: PUSH
11708: LD_INT 16
11710: PUSH
11711: LD_INT 17
11713: PUSH
11714: LD_INT 18
11716: PUSH
11717: LD_INT 19
11719: PUSH
11720: LD_INT 20
11722: PUSH
11723: LD_INT 21
11725: PUSH
11726: LD_INT 22
11728: PUSH
11729: LD_INT 23
11731: PUSH
11732: LD_INT 24
11734: PUSH
11735: LD_INT 25
11737: PUSH
11738: LD_INT 26
11740: PUSH
11741: LD_INT 28
11743: PUSH
11744: LD_INT 30
11746: PUSH
11747: LD_INT 31
11749: PUSH
11750: LD_INT 32
11752: PUSH
11753: LD_INT 36
11755: PUSH
11756: EMPTY
11757: LIST
11758: LIST
11759: LIST
11760: LIST
11761: LIST
11762: LIST
11763: LIST
11764: LIST
11765: LIST
11766: LIST
11767: LIST
11768: LIST
11769: LIST
11770: LIST
11771: LIST
11772: LIST
11773: LIST
11774: LIST
11775: LIST
11776: LIST
11777: LIST
11778: LIST
11779: LIST
11780: LIST
11781: LIST
11782: LIST
11783: LIST
11784: LIST
11785: LIST
11786: PUSH
11787: LD_INT 101
11789: PUSH
11790: LD_INT 102
11792: PUSH
11793: LD_INT 103
11795: PUSH
11796: LD_INT 104
11798: PUSH
11799: LD_INT 105
11801: PUSH
11802: LD_INT 106
11804: PUSH
11805: LD_INT 107
11807: PUSH
11808: LD_INT 108
11810: PUSH
11811: LD_INT 109
11813: PUSH
11814: LD_INT 110
11816: PUSH
11817: LD_INT 111
11819: PUSH
11820: LD_INT 112
11822: PUSH
11823: LD_INT 114
11825: PUSH
11826: LD_INT 116
11828: PUSH
11829: LD_INT 117
11831: PUSH
11832: LD_INT 118
11834: PUSH
11835: EMPTY
11836: LIST
11837: LIST
11838: LIST
11839: LIST
11840: LIST
11841: LIST
11842: LIST
11843: LIST
11844: LIST
11845: LIST
11846: LIST
11847: LIST
11848: LIST
11849: LIST
11850: LIST
11851: LIST
11852: PUSH
11853: EMPTY
11854: LIST
11855: LIST
11856: ST_TO_ADDR
11857: GO 13752
11859: LD_INT 11
11861: DOUBLE
11862: EQUAL
11863: IFTRUE 11867
11865: GO 12071
11867: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
11868: LD_ADDR_VAR 0 2
11872: PUSH
11873: LD_INT 2
11875: PUSH
11876: LD_INT 3
11878: PUSH
11879: LD_INT 4
11881: PUSH
11882: LD_INT 5
11884: PUSH
11885: LD_INT 6
11887: PUSH
11888: LD_INT 7
11890: PUSH
11891: LD_INT 8
11893: PUSH
11894: LD_INT 9
11896: PUSH
11897: LD_INT 10
11899: PUSH
11900: LD_INT 11
11902: PUSH
11903: LD_INT 12
11905: PUSH
11906: LD_INT 13
11908: PUSH
11909: LD_INT 14
11911: PUSH
11912: LD_INT 15
11914: PUSH
11915: LD_INT 16
11917: PUSH
11918: LD_INT 17
11920: PUSH
11921: LD_INT 18
11923: PUSH
11924: LD_INT 19
11926: PUSH
11927: LD_INT 20
11929: PUSH
11930: LD_INT 21
11932: PUSH
11933: LD_INT 22
11935: PUSH
11936: LD_INT 23
11938: PUSH
11939: LD_INT 24
11941: PUSH
11942: LD_INT 25
11944: PUSH
11945: LD_INT 26
11947: PUSH
11948: LD_INT 28
11950: PUSH
11951: LD_INT 30
11953: PUSH
11954: LD_INT 31
11956: PUSH
11957: LD_INT 32
11959: PUSH
11960: LD_INT 34
11962: PUSH
11963: LD_INT 36
11965: PUSH
11966: EMPTY
11967: LIST
11968: LIST
11969: LIST
11970: LIST
11971: LIST
11972: LIST
11973: LIST
11974: LIST
11975: LIST
11976: LIST
11977: LIST
11978: LIST
11979: LIST
11980: LIST
11981: LIST
11982: LIST
11983: LIST
11984: LIST
11985: LIST
11986: LIST
11987: LIST
11988: LIST
11989: LIST
11990: LIST
11991: LIST
11992: LIST
11993: LIST
11994: LIST
11995: LIST
11996: LIST
11997: LIST
11998: PUSH
11999: LD_INT 101
12001: PUSH
12002: LD_INT 102
12004: PUSH
12005: LD_INT 103
12007: PUSH
12008: LD_INT 104
12010: PUSH
12011: LD_INT 105
12013: PUSH
12014: LD_INT 106
12016: PUSH
12017: LD_INT 107
12019: PUSH
12020: LD_INT 108
12022: PUSH
12023: LD_INT 109
12025: PUSH
12026: LD_INT 110
12028: PUSH
12029: LD_INT 111
12031: PUSH
12032: LD_INT 112
12034: PUSH
12035: LD_INT 114
12037: PUSH
12038: LD_INT 116
12040: PUSH
12041: LD_INT 117
12043: PUSH
12044: LD_INT 118
12046: PUSH
12047: EMPTY
12048: LIST
12049: LIST
12050: LIST
12051: LIST
12052: LIST
12053: LIST
12054: LIST
12055: LIST
12056: LIST
12057: LIST
12058: LIST
12059: LIST
12060: LIST
12061: LIST
12062: LIST
12063: LIST
12064: PUSH
12065: EMPTY
12066: LIST
12067: LIST
12068: ST_TO_ADDR
12069: GO 13752
12071: LD_INT 12
12073: DOUBLE
12074: EQUAL
12075: IFTRUE 12079
12077: GO 12299
12079: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
12080: LD_ADDR_VAR 0 2
12084: PUSH
12085: LD_INT 1
12087: PUSH
12088: LD_INT 2
12090: PUSH
12091: LD_INT 3
12093: PUSH
12094: LD_INT 4
12096: PUSH
12097: LD_INT 5
12099: PUSH
12100: LD_INT 6
12102: PUSH
12103: LD_INT 7
12105: PUSH
12106: LD_INT 8
12108: PUSH
12109: LD_INT 9
12111: PUSH
12112: LD_INT 10
12114: PUSH
12115: LD_INT 11
12117: PUSH
12118: LD_INT 12
12120: PUSH
12121: LD_INT 13
12123: PUSH
12124: LD_INT 14
12126: PUSH
12127: LD_INT 15
12129: PUSH
12130: LD_INT 16
12132: PUSH
12133: LD_INT 17
12135: PUSH
12136: LD_INT 18
12138: PUSH
12139: LD_INT 19
12141: PUSH
12142: LD_INT 20
12144: PUSH
12145: LD_INT 21
12147: PUSH
12148: LD_INT 22
12150: PUSH
12151: LD_INT 23
12153: PUSH
12154: LD_INT 24
12156: PUSH
12157: LD_INT 25
12159: PUSH
12160: LD_INT 26
12162: PUSH
12163: LD_INT 27
12165: PUSH
12166: LD_INT 28
12168: PUSH
12169: LD_INT 30
12171: PUSH
12172: LD_INT 31
12174: PUSH
12175: LD_INT 32
12177: PUSH
12178: LD_INT 33
12180: PUSH
12181: LD_INT 34
12183: PUSH
12184: LD_INT 36
12186: PUSH
12187: EMPTY
12188: LIST
12189: LIST
12190: LIST
12191: LIST
12192: LIST
12193: LIST
12194: LIST
12195: LIST
12196: LIST
12197: LIST
12198: LIST
12199: LIST
12200: LIST
12201: LIST
12202: LIST
12203: LIST
12204: LIST
12205: LIST
12206: LIST
12207: LIST
12208: LIST
12209: LIST
12210: LIST
12211: LIST
12212: LIST
12213: LIST
12214: LIST
12215: LIST
12216: LIST
12217: LIST
12218: LIST
12219: LIST
12220: LIST
12221: LIST
12222: PUSH
12223: LD_INT 101
12225: PUSH
12226: LD_INT 102
12228: PUSH
12229: LD_INT 103
12231: PUSH
12232: LD_INT 104
12234: PUSH
12235: LD_INT 105
12237: PUSH
12238: LD_INT 106
12240: PUSH
12241: LD_INT 107
12243: PUSH
12244: LD_INT 108
12246: PUSH
12247: LD_INT 109
12249: PUSH
12250: LD_INT 110
12252: PUSH
12253: LD_INT 111
12255: PUSH
12256: LD_INT 112
12258: PUSH
12259: LD_INT 113
12261: PUSH
12262: LD_INT 114
12264: PUSH
12265: LD_INT 116
12267: PUSH
12268: LD_INT 117
12270: PUSH
12271: LD_INT 118
12273: PUSH
12274: EMPTY
12275: LIST
12276: LIST
12277: LIST
12278: LIST
12279: LIST
12280: LIST
12281: LIST
12282: LIST
12283: LIST
12284: LIST
12285: LIST
12286: LIST
12287: LIST
12288: LIST
12289: LIST
12290: LIST
12291: LIST
12292: PUSH
12293: EMPTY
12294: LIST
12295: LIST
12296: ST_TO_ADDR
12297: GO 13752
12299: LD_INT 13
12301: DOUBLE
12302: EQUAL
12303: IFTRUE 12307
12305: GO 12515
12307: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
12308: LD_ADDR_VAR 0 2
12312: PUSH
12313: LD_INT 1
12315: PUSH
12316: LD_INT 2
12318: PUSH
12319: LD_INT 3
12321: PUSH
12322: LD_INT 4
12324: PUSH
12325: LD_INT 5
12327: PUSH
12328: LD_INT 8
12330: PUSH
12331: LD_INT 9
12333: PUSH
12334: LD_INT 10
12336: PUSH
12337: LD_INT 11
12339: PUSH
12340: LD_INT 12
12342: PUSH
12343: LD_INT 14
12345: PUSH
12346: LD_INT 15
12348: PUSH
12349: LD_INT 16
12351: PUSH
12352: LD_INT 17
12354: PUSH
12355: LD_INT 18
12357: PUSH
12358: LD_INT 19
12360: PUSH
12361: LD_INT 20
12363: PUSH
12364: LD_INT 21
12366: PUSH
12367: LD_INT 22
12369: PUSH
12370: LD_INT 23
12372: PUSH
12373: LD_INT 24
12375: PUSH
12376: LD_INT 25
12378: PUSH
12379: LD_INT 26
12381: PUSH
12382: LD_INT 27
12384: PUSH
12385: LD_INT 28
12387: PUSH
12388: LD_INT 30
12390: PUSH
12391: LD_INT 31
12393: PUSH
12394: LD_INT 32
12396: PUSH
12397: LD_INT 33
12399: PUSH
12400: LD_INT 34
12402: PUSH
12403: LD_INT 36
12405: PUSH
12406: EMPTY
12407: LIST
12408: LIST
12409: LIST
12410: LIST
12411: LIST
12412: LIST
12413: LIST
12414: LIST
12415: LIST
12416: LIST
12417: LIST
12418: LIST
12419: LIST
12420: LIST
12421: LIST
12422: LIST
12423: LIST
12424: LIST
12425: LIST
12426: LIST
12427: LIST
12428: LIST
12429: LIST
12430: LIST
12431: LIST
12432: LIST
12433: LIST
12434: LIST
12435: LIST
12436: LIST
12437: LIST
12438: PUSH
12439: LD_INT 101
12441: PUSH
12442: LD_INT 102
12444: PUSH
12445: LD_INT 103
12447: PUSH
12448: LD_INT 104
12450: PUSH
12451: LD_INT 105
12453: PUSH
12454: LD_INT 106
12456: PUSH
12457: LD_INT 107
12459: PUSH
12460: LD_INT 108
12462: PUSH
12463: LD_INT 109
12465: PUSH
12466: LD_INT 110
12468: PUSH
12469: LD_INT 111
12471: PUSH
12472: LD_INT 112
12474: PUSH
12475: LD_INT 113
12477: PUSH
12478: LD_INT 114
12480: PUSH
12481: LD_INT 116
12483: PUSH
12484: LD_INT 117
12486: PUSH
12487: LD_INT 118
12489: PUSH
12490: EMPTY
12491: LIST
12492: LIST
12493: LIST
12494: LIST
12495: LIST
12496: LIST
12497: LIST
12498: LIST
12499: LIST
12500: LIST
12501: LIST
12502: LIST
12503: LIST
12504: LIST
12505: LIST
12506: LIST
12507: LIST
12508: PUSH
12509: EMPTY
12510: LIST
12511: LIST
12512: ST_TO_ADDR
12513: GO 13752
12515: LD_INT 14
12517: DOUBLE
12518: EQUAL
12519: IFTRUE 12523
12521: GO 12747
12523: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
12524: LD_ADDR_VAR 0 2
12528: PUSH
12529: LD_INT 1
12531: PUSH
12532: LD_INT 2
12534: PUSH
12535: LD_INT 3
12537: PUSH
12538: LD_INT 4
12540: PUSH
12541: LD_INT 5
12543: PUSH
12544: LD_INT 6
12546: PUSH
12547: LD_INT 7
12549: PUSH
12550: LD_INT 8
12552: PUSH
12553: LD_INT 9
12555: PUSH
12556: LD_INT 10
12558: PUSH
12559: LD_INT 11
12561: PUSH
12562: LD_INT 12
12564: PUSH
12565: LD_INT 13
12567: PUSH
12568: LD_INT 14
12570: PUSH
12571: LD_INT 15
12573: PUSH
12574: LD_INT 16
12576: PUSH
12577: LD_INT 17
12579: PUSH
12580: LD_INT 18
12582: PUSH
12583: LD_INT 19
12585: PUSH
12586: LD_INT 20
12588: PUSH
12589: LD_INT 21
12591: PUSH
12592: LD_INT 22
12594: PUSH
12595: LD_INT 23
12597: PUSH
12598: LD_INT 24
12600: PUSH
12601: LD_INT 25
12603: PUSH
12604: LD_INT 26
12606: PUSH
12607: LD_INT 27
12609: PUSH
12610: LD_INT 28
12612: PUSH
12613: LD_INT 29
12615: PUSH
12616: LD_INT 30
12618: PUSH
12619: LD_INT 31
12621: PUSH
12622: LD_INT 32
12624: PUSH
12625: LD_INT 33
12627: PUSH
12628: LD_INT 34
12630: PUSH
12631: LD_INT 36
12633: PUSH
12634: EMPTY
12635: LIST
12636: LIST
12637: LIST
12638: LIST
12639: LIST
12640: LIST
12641: LIST
12642: LIST
12643: LIST
12644: LIST
12645: LIST
12646: LIST
12647: LIST
12648: LIST
12649: LIST
12650: LIST
12651: LIST
12652: LIST
12653: LIST
12654: LIST
12655: LIST
12656: LIST
12657: LIST
12658: LIST
12659: LIST
12660: LIST
12661: LIST
12662: LIST
12663: LIST
12664: LIST
12665: LIST
12666: LIST
12667: LIST
12668: LIST
12669: LIST
12670: PUSH
12671: LD_INT 101
12673: PUSH
12674: LD_INT 102
12676: PUSH
12677: LD_INT 103
12679: PUSH
12680: LD_INT 104
12682: PUSH
12683: LD_INT 105
12685: PUSH
12686: LD_INT 106
12688: PUSH
12689: LD_INT 107
12691: PUSH
12692: LD_INT 108
12694: PUSH
12695: LD_INT 109
12697: PUSH
12698: LD_INT 110
12700: PUSH
12701: LD_INT 111
12703: PUSH
12704: LD_INT 112
12706: PUSH
12707: LD_INT 113
12709: PUSH
12710: LD_INT 114
12712: PUSH
12713: LD_INT 116
12715: PUSH
12716: LD_INT 117
12718: PUSH
12719: LD_INT 118
12721: PUSH
12722: EMPTY
12723: LIST
12724: LIST
12725: LIST
12726: LIST
12727: LIST
12728: LIST
12729: LIST
12730: LIST
12731: LIST
12732: LIST
12733: LIST
12734: LIST
12735: LIST
12736: LIST
12737: LIST
12738: LIST
12739: LIST
12740: PUSH
12741: EMPTY
12742: LIST
12743: LIST
12744: ST_TO_ADDR
12745: GO 13752
12747: LD_INT 15
12749: DOUBLE
12750: EQUAL
12751: IFTRUE 12755
12753: GO 12979
12755: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
12756: LD_ADDR_VAR 0 2
12760: PUSH
12761: LD_INT 1
12763: PUSH
12764: LD_INT 2
12766: PUSH
12767: LD_INT 3
12769: PUSH
12770: LD_INT 4
12772: PUSH
12773: LD_INT 5
12775: PUSH
12776: LD_INT 6
12778: PUSH
12779: LD_INT 7
12781: PUSH
12782: LD_INT 8
12784: PUSH
12785: LD_INT 9
12787: PUSH
12788: LD_INT 10
12790: PUSH
12791: LD_INT 11
12793: PUSH
12794: LD_INT 12
12796: PUSH
12797: LD_INT 13
12799: PUSH
12800: LD_INT 14
12802: PUSH
12803: LD_INT 15
12805: PUSH
12806: LD_INT 16
12808: PUSH
12809: LD_INT 17
12811: PUSH
12812: LD_INT 18
12814: PUSH
12815: LD_INT 19
12817: PUSH
12818: LD_INT 20
12820: PUSH
12821: LD_INT 21
12823: PUSH
12824: LD_INT 22
12826: PUSH
12827: LD_INT 23
12829: PUSH
12830: LD_INT 24
12832: PUSH
12833: LD_INT 25
12835: PUSH
12836: LD_INT 26
12838: PUSH
12839: LD_INT 27
12841: PUSH
12842: LD_INT 28
12844: PUSH
12845: LD_INT 29
12847: PUSH
12848: LD_INT 30
12850: PUSH
12851: LD_INT 31
12853: PUSH
12854: LD_INT 32
12856: PUSH
12857: LD_INT 33
12859: PUSH
12860: LD_INT 34
12862: PUSH
12863: LD_INT 36
12865: PUSH
12866: EMPTY
12867: LIST
12868: LIST
12869: LIST
12870: LIST
12871: LIST
12872: LIST
12873: LIST
12874: LIST
12875: LIST
12876: LIST
12877: LIST
12878: LIST
12879: LIST
12880: LIST
12881: LIST
12882: LIST
12883: LIST
12884: LIST
12885: LIST
12886: LIST
12887: LIST
12888: LIST
12889: LIST
12890: LIST
12891: LIST
12892: LIST
12893: LIST
12894: LIST
12895: LIST
12896: LIST
12897: LIST
12898: LIST
12899: LIST
12900: LIST
12901: LIST
12902: PUSH
12903: LD_INT 101
12905: PUSH
12906: LD_INT 102
12908: PUSH
12909: LD_INT 103
12911: PUSH
12912: LD_INT 104
12914: PUSH
12915: LD_INT 105
12917: PUSH
12918: LD_INT 106
12920: PUSH
12921: LD_INT 107
12923: PUSH
12924: LD_INT 108
12926: PUSH
12927: LD_INT 109
12929: PUSH
12930: LD_INT 110
12932: PUSH
12933: LD_INT 111
12935: PUSH
12936: LD_INT 112
12938: PUSH
12939: LD_INT 113
12941: PUSH
12942: LD_INT 114
12944: PUSH
12945: LD_INT 116
12947: PUSH
12948: LD_INT 117
12950: PUSH
12951: LD_INT 118
12953: PUSH
12954: EMPTY
12955: LIST
12956: LIST
12957: LIST
12958: LIST
12959: LIST
12960: LIST
12961: LIST
12962: LIST
12963: LIST
12964: LIST
12965: LIST
12966: LIST
12967: LIST
12968: LIST
12969: LIST
12970: LIST
12971: LIST
12972: PUSH
12973: EMPTY
12974: LIST
12975: LIST
12976: ST_TO_ADDR
12977: GO 13752
12979: LD_INT 16
12981: DOUBLE
12982: EQUAL
12983: IFTRUE 12987
12985: GO 13123
12987: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
12988: LD_ADDR_VAR 0 2
12992: PUSH
12993: LD_INT 2
12995: PUSH
12996: LD_INT 4
12998: PUSH
12999: LD_INT 5
13001: PUSH
13002: LD_INT 7
13004: PUSH
13005: LD_INT 11
13007: PUSH
13008: LD_INT 12
13010: PUSH
13011: LD_INT 15
13013: PUSH
13014: LD_INT 16
13016: PUSH
13017: LD_INT 20
13019: PUSH
13020: LD_INT 21
13022: PUSH
13023: LD_INT 22
13025: PUSH
13026: LD_INT 23
13028: PUSH
13029: LD_INT 25
13031: PUSH
13032: LD_INT 26
13034: PUSH
13035: LD_INT 30
13037: PUSH
13038: LD_INT 31
13040: PUSH
13041: LD_INT 32
13043: PUSH
13044: LD_INT 33
13046: PUSH
13047: LD_INT 34
13049: PUSH
13050: EMPTY
13051: LIST
13052: LIST
13053: LIST
13054: LIST
13055: LIST
13056: LIST
13057: LIST
13058: LIST
13059: LIST
13060: LIST
13061: LIST
13062: LIST
13063: LIST
13064: LIST
13065: LIST
13066: LIST
13067: LIST
13068: LIST
13069: LIST
13070: PUSH
13071: LD_INT 101
13073: PUSH
13074: LD_INT 102
13076: PUSH
13077: LD_INT 103
13079: PUSH
13080: LD_INT 106
13082: PUSH
13083: LD_INT 108
13085: PUSH
13086: LD_INT 112
13088: PUSH
13089: LD_INT 113
13091: PUSH
13092: LD_INT 114
13094: PUSH
13095: LD_INT 116
13097: PUSH
13098: LD_INT 117
13100: PUSH
13101: LD_INT 118
13103: PUSH
13104: EMPTY
13105: LIST
13106: LIST
13107: LIST
13108: LIST
13109: LIST
13110: LIST
13111: LIST
13112: LIST
13113: LIST
13114: LIST
13115: LIST
13116: PUSH
13117: EMPTY
13118: LIST
13119: LIST
13120: ST_TO_ADDR
13121: GO 13752
13123: LD_INT 17
13125: DOUBLE
13126: EQUAL
13127: IFTRUE 13131
13129: GO 13355
13131: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
13132: LD_ADDR_VAR 0 2
13136: PUSH
13137: LD_INT 1
13139: PUSH
13140: LD_INT 2
13142: PUSH
13143: LD_INT 3
13145: PUSH
13146: LD_INT 4
13148: PUSH
13149: LD_INT 5
13151: PUSH
13152: LD_INT 6
13154: PUSH
13155: LD_INT 7
13157: PUSH
13158: LD_INT 8
13160: PUSH
13161: LD_INT 9
13163: PUSH
13164: LD_INT 10
13166: PUSH
13167: LD_INT 11
13169: PUSH
13170: LD_INT 12
13172: PUSH
13173: LD_INT 13
13175: PUSH
13176: LD_INT 14
13178: PUSH
13179: LD_INT 15
13181: PUSH
13182: LD_INT 16
13184: PUSH
13185: LD_INT 17
13187: PUSH
13188: LD_INT 18
13190: PUSH
13191: LD_INT 19
13193: PUSH
13194: LD_INT 20
13196: PUSH
13197: LD_INT 21
13199: PUSH
13200: LD_INT 22
13202: PUSH
13203: LD_INT 23
13205: PUSH
13206: LD_INT 24
13208: PUSH
13209: LD_INT 25
13211: PUSH
13212: LD_INT 26
13214: PUSH
13215: LD_INT 27
13217: PUSH
13218: LD_INT 28
13220: PUSH
13221: LD_INT 29
13223: PUSH
13224: LD_INT 30
13226: PUSH
13227: LD_INT 31
13229: PUSH
13230: LD_INT 32
13232: PUSH
13233: LD_INT 33
13235: PUSH
13236: LD_INT 34
13238: PUSH
13239: LD_INT 36
13241: PUSH
13242: EMPTY
13243: LIST
13244: LIST
13245: LIST
13246: LIST
13247: LIST
13248: LIST
13249: LIST
13250: LIST
13251: LIST
13252: LIST
13253: LIST
13254: LIST
13255: LIST
13256: LIST
13257: LIST
13258: LIST
13259: LIST
13260: LIST
13261: LIST
13262: LIST
13263: LIST
13264: LIST
13265: LIST
13266: LIST
13267: LIST
13268: LIST
13269: LIST
13270: LIST
13271: LIST
13272: LIST
13273: LIST
13274: LIST
13275: LIST
13276: LIST
13277: LIST
13278: PUSH
13279: LD_INT 101
13281: PUSH
13282: LD_INT 102
13284: PUSH
13285: LD_INT 103
13287: PUSH
13288: LD_INT 104
13290: PUSH
13291: LD_INT 105
13293: PUSH
13294: LD_INT 106
13296: PUSH
13297: LD_INT 107
13299: PUSH
13300: LD_INT 108
13302: PUSH
13303: LD_INT 109
13305: PUSH
13306: LD_INT 110
13308: PUSH
13309: LD_INT 111
13311: PUSH
13312: LD_INT 112
13314: PUSH
13315: LD_INT 113
13317: PUSH
13318: LD_INT 114
13320: PUSH
13321: LD_INT 116
13323: PUSH
13324: LD_INT 117
13326: PUSH
13327: LD_INT 118
13329: PUSH
13330: EMPTY
13331: LIST
13332: LIST
13333: LIST
13334: LIST
13335: LIST
13336: LIST
13337: LIST
13338: LIST
13339: LIST
13340: LIST
13341: LIST
13342: LIST
13343: LIST
13344: LIST
13345: LIST
13346: LIST
13347: LIST
13348: PUSH
13349: EMPTY
13350: LIST
13351: LIST
13352: ST_TO_ADDR
13353: GO 13752
13355: LD_INT 18
13357: DOUBLE
13358: EQUAL
13359: IFTRUE 13363
13361: GO 13511
13363: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
13364: LD_ADDR_VAR 0 2
13368: PUSH
13369: LD_INT 2
13371: PUSH
13372: LD_INT 4
13374: PUSH
13375: LD_INT 5
13377: PUSH
13378: LD_INT 7
13380: PUSH
13381: LD_INT 11
13383: PUSH
13384: LD_INT 12
13386: PUSH
13387: LD_INT 15
13389: PUSH
13390: LD_INT 16
13392: PUSH
13393: LD_INT 20
13395: PUSH
13396: LD_INT 21
13398: PUSH
13399: LD_INT 22
13401: PUSH
13402: LD_INT 23
13404: PUSH
13405: LD_INT 25
13407: PUSH
13408: LD_INT 26
13410: PUSH
13411: LD_INT 30
13413: PUSH
13414: LD_INT 31
13416: PUSH
13417: LD_INT 32
13419: PUSH
13420: LD_INT 33
13422: PUSH
13423: LD_INT 34
13425: PUSH
13426: LD_INT 35
13428: PUSH
13429: LD_INT 36
13431: PUSH
13432: EMPTY
13433: LIST
13434: LIST
13435: LIST
13436: LIST
13437: LIST
13438: LIST
13439: LIST
13440: LIST
13441: LIST
13442: LIST
13443: LIST
13444: LIST
13445: LIST
13446: LIST
13447: LIST
13448: LIST
13449: LIST
13450: LIST
13451: LIST
13452: LIST
13453: LIST
13454: PUSH
13455: LD_INT 101
13457: PUSH
13458: LD_INT 102
13460: PUSH
13461: LD_INT 103
13463: PUSH
13464: LD_INT 106
13466: PUSH
13467: LD_INT 108
13469: PUSH
13470: LD_INT 112
13472: PUSH
13473: LD_INT 113
13475: PUSH
13476: LD_INT 114
13478: PUSH
13479: LD_INT 115
13481: PUSH
13482: LD_INT 116
13484: PUSH
13485: LD_INT 117
13487: PUSH
13488: LD_INT 118
13490: PUSH
13491: EMPTY
13492: LIST
13493: LIST
13494: LIST
13495: LIST
13496: LIST
13497: LIST
13498: LIST
13499: LIST
13500: LIST
13501: LIST
13502: LIST
13503: LIST
13504: PUSH
13505: EMPTY
13506: LIST
13507: LIST
13508: ST_TO_ADDR
13509: GO 13752
13511: LD_INT 19
13513: DOUBLE
13514: EQUAL
13515: IFTRUE 13519
13517: GO 13751
13519: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
13520: LD_ADDR_VAR 0 2
13524: PUSH
13525: LD_INT 1
13527: PUSH
13528: LD_INT 2
13530: PUSH
13531: LD_INT 3
13533: PUSH
13534: LD_INT 4
13536: PUSH
13537: LD_INT 5
13539: PUSH
13540: LD_INT 6
13542: PUSH
13543: LD_INT 7
13545: PUSH
13546: LD_INT 8
13548: PUSH
13549: LD_INT 9
13551: PUSH
13552: LD_INT 10
13554: PUSH
13555: LD_INT 11
13557: PUSH
13558: LD_INT 12
13560: PUSH
13561: LD_INT 13
13563: PUSH
13564: LD_INT 14
13566: PUSH
13567: LD_INT 15
13569: PUSH
13570: LD_INT 16
13572: PUSH
13573: LD_INT 17
13575: PUSH
13576: LD_INT 18
13578: PUSH
13579: LD_INT 19
13581: PUSH
13582: LD_INT 20
13584: PUSH
13585: LD_INT 21
13587: PUSH
13588: LD_INT 22
13590: PUSH
13591: LD_INT 23
13593: PUSH
13594: LD_INT 24
13596: PUSH
13597: LD_INT 25
13599: PUSH
13600: LD_INT 26
13602: PUSH
13603: LD_INT 27
13605: PUSH
13606: LD_INT 28
13608: PUSH
13609: LD_INT 29
13611: PUSH
13612: LD_INT 30
13614: PUSH
13615: LD_INT 31
13617: PUSH
13618: LD_INT 32
13620: PUSH
13621: LD_INT 33
13623: PUSH
13624: LD_INT 34
13626: PUSH
13627: LD_INT 35
13629: PUSH
13630: LD_INT 36
13632: PUSH
13633: EMPTY
13634: LIST
13635: LIST
13636: LIST
13637: LIST
13638: LIST
13639: LIST
13640: LIST
13641: LIST
13642: LIST
13643: LIST
13644: LIST
13645: LIST
13646: LIST
13647: LIST
13648: LIST
13649: LIST
13650: LIST
13651: LIST
13652: LIST
13653: LIST
13654: LIST
13655: LIST
13656: LIST
13657: LIST
13658: LIST
13659: LIST
13660: LIST
13661: LIST
13662: LIST
13663: LIST
13664: LIST
13665: LIST
13666: LIST
13667: LIST
13668: LIST
13669: LIST
13670: PUSH
13671: LD_INT 101
13673: PUSH
13674: LD_INT 102
13676: PUSH
13677: LD_INT 103
13679: PUSH
13680: LD_INT 104
13682: PUSH
13683: LD_INT 105
13685: PUSH
13686: LD_INT 106
13688: PUSH
13689: LD_INT 107
13691: PUSH
13692: LD_INT 108
13694: PUSH
13695: LD_INT 109
13697: PUSH
13698: LD_INT 110
13700: PUSH
13701: LD_INT 111
13703: PUSH
13704: LD_INT 112
13706: PUSH
13707: LD_INT 113
13709: PUSH
13710: LD_INT 114
13712: PUSH
13713: LD_INT 115
13715: PUSH
13716: LD_INT 116
13718: PUSH
13719: LD_INT 117
13721: PUSH
13722: LD_INT 118
13724: PUSH
13725: EMPTY
13726: LIST
13727: LIST
13728: LIST
13729: LIST
13730: LIST
13731: LIST
13732: LIST
13733: LIST
13734: LIST
13735: LIST
13736: LIST
13737: LIST
13738: LIST
13739: LIST
13740: LIST
13741: LIST
13742: LIST
13743: LIST
13744: PUSH
13745: EMPTY
13746: LIST
13747: LIST
13748: ST_TO_ADDR
13749: GO 13752
13751: POP
// end else
13752: GO 13983
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
13754: LD_ADDR_VAR 0 2
13758: PUSH
13759: LD_INT 1
13761: PUSH
13762: LD_INT 2
13764: PUSH
13765: LD_INT 3
13767: PUSH
13768: LD_INT 4
13770: PUSH
13771: LD_INT 5
13773: PUSH
13774: LD_INT 6
13776: PUSH
13777: LD_INT 7
13779: PUSH
13780: LD_INT 8
13782: PUSH
13783: LD_INT 9
13785: PUSH
13786: LD_INT 10
13788: PUSH
13789: LD_INT 11
13791: PUSH
13792: LD_INT 12
13794: PUSH
13795: LD_INT 13
13797: PUSH
13798: LD_INT 14
13800: PUSH
13801: LD_INT 15
13803: PUSH
13804: LD_INT 16
13806: PUSH
13807: LD_INT 17
13809: PUSH
13810: LD_INT 18
13812: PUSH
13813: LD_INT 19
13815: PUSH
13816: LD_INT 20
13818: PUSH
13819: LD_INT 21
13821: PUSH
13822: LD_INT 22
13824: PUSH
13825: LD_INT 23
13827: PUSH
13828: LD_INT 24
13830: PUSH
13831: LD_INT 25
13833: PUSH
13834: LD_INT 26
13836: PUSH
13837: LD_INT 27
13839: PUSH
13840: LD_INT 28
13842: PUSH
13843: LD_INT 29
13845: PUSH
13846: LD_INT 30
13848: PUSH
13849: LD_INT 31
13851: PUSH
13852: LD_INT 32
13854: PUSH
13855: LD_INT 33
13857: PUSH
13858: LD_INT 34
13860: PUSH
13861: LD_INT 35
13863: PUSH
13864: LD_INT 36
13866: PUSH
13867: EMPTY
13868: LIST
13869: LIST
13870: LIST
13871: LIST
13872: LIST
13873: LIST
13874: LIST
13875: LIST
13876: LIST
13877: LIST
13878: LIST
13879: LIST
13880: LIST
13881: LIST
13882: LIST
13883: LIST
13884: LIST
13885: LIST
13886: LIST
13887: LIST
13888: LIST
13889: LIST
13890: LIST
13891: LIST
13892: LIST
13893: LIST
13894: LIST
13895: LIST
13896: LIST
13897: LIST
13898: LIST
13899: LIST
13900: LIST
13901: LIST
13902: LIST
13903: LIST
13904: PUSH
13905: LD_INT 101
13907: PUSH
13908: LD_INT 102
13910: PUSH
13911: LD_INT 103
13913: PUSH
13914: LD_INT 104
13916: PUSH
13917: LD_INT 105
13919: PUSH
13920: LD_INT 106
13922: PUSH
13923: LD_INT 107
13925: PUSH
13926: LD_INT 108
13928: PUSH
13929: LD_INT 109
13931: PUSH
13932: LD_INT 110
13934: PUSH
13935: LD_INT 111
13937: PUSH
13938: LD_INT 112
13940: PUSH
13941: LD_INT 113
13943: PUSH
13944: LD_INT 114
13946: PUSH
13947: LD_INT 115
13949: PUSH
13950: LD_INT 116
13952: PUSH
13953: LD_INT 117
13955: PUSH
13956: LD_INT 118
13958: PUSH
13959: EMPTY
13960: LIST
13961: LIST
13962: LIST
13963: LIST
13964: LIST
13965: LIST
13966: LIST
13967: LIST
13968: LIST
13969: LIST
13970: LIST
13971: LIST
13972: LIST
13973: LIST
13974: LIST
13975: LIST
13976: LIST
13977: LIST
13978: PUSH
13979: EMPTY
13980: LIST
13981: LIST
13982: ST_TO_ADDR
// if result then
13983: LD_VAR 0 2
13987: IFFALSE 14773
// begin normal :=  ;
13989: LD_ADDR_VAR 0 5
13993: PUSH
13994: LD_STRING 
13996: ST_TO_ADDR
// hardcore :=  ;
13997: LD_ADDR_VAR 0 6
14001: PUSH
14002: LD_STRING 
14004: ST_TO_ADDR
// active :=  ;
14005: LD_ADDR_VAR 0 7
14009: PUSH
14010: LD_STRING 
14012: ST_TO_ADDR
// for i = 1 to normalCounter do
14013: LD_ADDR_VAR 0 8
14017: PUSH
14018: DOUBLE
14019: LD_INT 1
14021: DEC
14022: ST_TO_ADDR
14023: LD_EXP 32
14027: PUSH
14028: FOR_TO
14029: IFFALSE 14130
// begin tmp := 0 ;
14031: LD_ADDR_VAR 0 3
14035: PUSH
14036: LD_STRING 0
14038: ST_TO_ADDR
// if result [ 1 ] then
14039: LD_VAR 0 2
14043: PUSH
14044: LD_INT 1
14046: ARRAY
14047: IFFALSE 14112
// if result [ 1 ] [ 1 ] = i then
14049: LD_VAR 0 2
14053: PUSH
14054: LD_INT 1
14056: ARRAY
14057: PUSH
14058: LD_INT 1
14060: ARRAY
14061: PUSH
14062: LD_VAR 0 8
14066: EQUAL
14067: IFFALSE 14112
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
14069: LD_ADDR_VAR 0 2
14073: PUSH
14074: LD_VAR 0 2
14078: PPUSH
14079: LD_INT 1
14081: PPUSH
14082: LD_VAR 0 2
14086: PUSH
14087: LD_INT 1
14089: ARRAY
14090: PPUSH
14091: LD_INT 1
14093: PPUSH
14094: CALL_OW 3
14098: PPUSH
14099: CALL_OW 1
14103: ST_TO_ADDR
// tmp := 1 ;
14104: LD_ADDR_VAR 0 3
14108: PUSH
14109: LD_STRING 1
14111: ST_TO_ADDR
// end ; normal := normal & tmp ;
14112: LD_ADDR_VAR 0 5
14116: PUSH
14117: LD_VAR 0 5
14121: PUSH
14122: LD_VAR 0 3
14126: STR
14127: ST_TO_ADDR
// end ;
14128: GO 14028
14130: POP
14131: POP
// for i = 1 to hardcoreCounter do
14132: LD_ADDR_VAR 0 8
14136: PUSH
14137: DOUBLE
14138: LD_INT 1
14140: DEC
14141: ST_TO_ADDR
14142: LD_EXP 33
14146: PUSH
14147: FOR_TO
14148: IFFALSE 14253
// begin tmp := 0 ;
14150: LD_ADDR_VAR 0 3
14154: PUSH
14155: LD_STRING 0
14157: ST_TO_ADDR
// if result [ 2 ] then
14158: LD_VAR 0 2
14162: PUSH
14163: LD_INT 2
14165: ARRAY
14166: IFFALSE 14235
// if result [ 2 ] [ 1 ] = 100 + i then
14168: LD_VAR 0 2
14172: PUSH
14173: LD_INT 2
14175: ARRAY
14176: PUSH
14177: LD_INT 1
14179: ARRAY
14180: PUSH
14181: LD_INT 100
14183: PUSH
14184: LD_VAR 0 8
14188: PLUS
14189: EQUAL
14190: IFFALSE 14235
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
14192: LD_ADDR_VAR 0 2
14196: PUSH
14197: LD_VAR 0 2
14201: PPUSH
14202: LD_INT 2
14204: PPUSH
14205: LD_VAR 0 2
14209: PUSH
14210: LD_INT 2
14212: ARRAY
14213: PPUSH
14214: LD_INT 1
14216: PPUSH
14217: CALL_OW 3
14221: PPUSH
14222: CALL_OW 1
14226: ST_TO_ADDR
// tmp := 1 ;
14227: LD_ADDR_VAR 0 3
14231: PUSH
14232: LD_STRING 1
14234: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
14235: LD_ADDR_VAR 0 6
14239: PUSH
14240: LD_VAR 0 6
14244: PUSH
14245: LD_VAR 0 3
14249: STR
14250: ST_TO_ADDR
// end ;
14251: GO 14147
14253: POP
14254: POP
// if isGameLoad then
14255: LD_VAR 0 1
14259: IFFALSE 14734
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
14261: LD_ADDR_VAR 0 4
14265: PUSH
14266: LD_EXP 36
14270: PUSH
14271: LD_EXP 35
14275: PUSH
14276: LD_EXP 37
14280: PUSH
14281: LD_EXP 34
14285: PUSH
14286: LD_EXP 38
14290: PUSH
14291: LD_EXP 39
14295: PUSH
14296: LD_EXP 40
14300: PUSH
14301: LD_EXP 41
14305: PUSH
14306: LD_EXP 42
14310: PUSH
14311: LD_EXP 43
14315: PUSH
14316: LD_EXP 44
14320: PUSH
14321: LD_EXP 45
14325: PUSH
14326: LD_EXP 46
14330: PUSH
14331: LD_EXP 47
14335: PUSH
14336: LD_EXP 55
14340: PUSH
14341: LD_EXP 56
14345: PUSH
14346: LD_EXP 57
14350: PUSH
14351: LD_EXP 58
14355: PUSH
14356: LD_EXP 60
14360: PUSH
14361: LD_EXP 61
14365: PUSH
14366: LD_EXP 62
14370: PUSH
14371: LD_EXP 65
14375: PUSH
14376: LD_EXP 67
14380: PUSH
14381: LD_EXP 68
14385: PUSH
14386: LD_EXP 69
14390: PUSH
14391: LD_EXP 71
14395: PUSH
14396: LD_EXP 72
14400: PUSH
14401: LD_EXP 75
14405: PUSH
14406: LD_EXP 76
14410: PUSH
14411: LD_EXP 77
14415: PUSH
14416: LD_EXP 78
14420: PUSH
14421: LD_EXP 79
14425: PUSH
14426: LD_EXP 80
14430: PUSH
14431: LD_EXP 81
14435: PUSH
14436: LD_EXP 82
14440: PUSH
14441: LD_EXP 83
14445: PUSH
14446: LD_EXP 48
14450: PUSH
14451: LD_EXP 49
14455: PUSH
14456: LD_EXP 52
14460: PUSH
14461: LD_EXP 53
14465: PUSH
14466: LD_EXP 54
14470: PUSH
14471: LD_EXP 50
14475: PUSH
14476: LD_EXP 51
14480: PUSH
14481: LD_EXP 59
14485: PUSH
14486: LD_EXP 63
14490: PUSH
14491: LD_EXP 64
14495: PUSH
14496: LD_EXP 66
14500: PUSH
14501: LD_EXP 70
14505: PUSH
14506: LD_EXP 73
14510: PUSH
14511: LD_EXP 74
14515: PUSH
14516: LD_EXP 84
14520: PUSH
14521: LD_EXP 85
14525: PUSH
14526: LD_EXP 86
14530: PUSH
14531: LD_EXP 87
14535: PUSH
14536: EMPTY
14537: LIST
14538: LIST
14539: LIST
14540: LIST
14541: LIST
14542: LIST
14543: LIST
14544: LIST
14545: LIST
14546: LIST
14547: LIST
14548: LIST
14549: LIST
14550: LIST
14551: LIST
14552: LIST
14553: LIST
14554: LIST
14555: LIST
14556: LIST
14557: LIST
14558: LIST
14559: LIST
14560: LIST
14561: LIST
14562: LIST
14563: LIST
14564: LIST
14565: LIST
14566: LIST
14567: LIST
14568: LIST
14569: LIST
14570: LIST
14571: LIST
14572: LIST
14573: LIST
14574: LIST
14575: LIST
14576: LIST
14577: LIST
14578: LIST
14579: LIST
14580: LIST
14581: LIST
14582: LIST
14583: LIST
14584: LIST
14585: LIST
14586: LIST
14587: LIST
14588: LIST
14589: LIST
14590: LIST
14591: ST_TO_ADDR
// tmp :=  ;
14592: LD_ADDR_VAR 0 3
14596: PUSH
14597: LD_STRING 
14599: ST_TO_ADDR
// for i = 1 to normalCounter do
14600: LD_ADDR_VAR 0 8
14604: PUSH
14605: DOUBLE
14606: LD_INT 1
14608: DEC
14609: ST_TO_ADDR
14610: LD_EXP 32
14614: PUSH
14615: FOR_TO
14616: IFFALSE 14652
// begin if flags [ i ] then
14618: LD_VAR 0 4
14622: PUSH
14623: LD_VAR 0 8
14627: ARRAY
14628: IFFALSE 14650
// tmp := tmp & i & ; ;
14630: LD_ADDR_VAR 0 3
14634: PUSH
14635: LD_VAR 0 3
14639: PUSH
14640: LD_VAR 0 8
14644: STR
14645: PUSH
14646: LD_STRING ;
14648: STR
14649: ST_TO_ADDR
// end ;
14650: GO 14615
14652: POP
14653: POP
// for i = 1 to hardcoreCounter do
14654: LD_ADDR_VAR 0 8
14658: PUSH
14659: DOUBLE
14660: LD_INT 1
14662: DEC
14663: ST_TO_ADDR
14664: LD_EXP 33
14668: PUSH
14669: FOR_TO
14670: IFFALSE 14716
// begin if flags [ normalCounter + i ] then
14672: LD_VAR 0 4
14676: PUSH
14677: LD_EXP 32
14681: PUSH
14682: LD_VAR 0 8
14686: PLUS
14687: ARRAY
14688: IFFALSE 14714
// tmp := tmp & ( 100 + i ) & ; ;
14690: LD_ADDR_VAR 0 3
14694: PUSH
14695: LD_VAR 0 3
14699: PUSH
14700: LD_INT 100
14702: PUSH
14703: LD_VAR 0 8
14707: PLUS
14708: STR
14709: PUSH
14710: LD_STRING ;
14712: STR
14713: ST_TO_ADDR
// end ;
14714: GO 14669
14716: POP
14717: POP
// if tmp then
14718: LD_VAR 0 3
14722: IFFALSE 14734
// active := tmp ;
14724: LD_ADDR_VAR 0 7
14728: PUSH
14729: LD_VAR 0 3
14733: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
14734: LD_STRING getStreamItemsFromMission("
14736: PUSH
14737: LD_VAR 0 5
14741: STR
14742: PUSH
14743: LD_STRING ","
14745: STR
14746: PUSH
14747: LD_VAR 0 6
14751: STR
14752: PUSH
14753: LD_STRING ","
14755: STR
14756: PUSH
14757: LD_VAR 0 7
14761: STR
14762: PUSH
14763: LD_STRING ")
14765: STR
14766: PPUSH
14767: CALL_OW 559
// end else
14771: GO 14780
// ToLua ( getStreamItemsFromMission("","","") ) ;
14773: LD_STRING getStreamItemsFromMission("","","")
14775: PPUSH
14776: CALL_OW 559
// end ;
14780: LD_VAR 0 2
14784: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
14785: LD_EXP 31
14789: PUSH
14790: LD_EXP 36
14794: AND
14795: IFFALSE 14919
14797: GO 14799
14799: DISABLE
14800: LD_INT 0
14802: PPUSH
14803: PPUSH
// begin enable ;
14804: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
14805: LD_ADDR_VAR 0 2
14809: PUSH
14810: LD_INT 22
14812: PUSH
14813: LD_OWVAR 2
14817: PUSH
14818: EMPTY
14819: LIST
14820: LIST
14821: PUSH
14822: LD_INT 2
14824: PUSH
14825: LD_INT 34
14827: PUSH
14828: LD_INT 7
14830: PUSH
14831: EMPTY
14832: LIST
14833: LIST
14834: PUSH
14835: LD_INT 34
14837: PUSH
14838: LD_INT 45
14840: PUSH
14841: EMPTY
14842: LIST
14843: LIST
14844: PUSH
14845: LD_INT 34
14847: PUSH
14848: LD_INT 28
14850: PUSH
14851: EMPTY
14852: LIST
14853: LIST
14854: PUSH
14855: LD_INT 34
14857: PUSH
14858: LD_INT 47
14860: PUSH
14861: EMPTY
14862: LIST
14863: LIST
14864: PUSH
14865: EMPTY
14866: LIST
14867: LIST
14868: LIST
14869: LIST
14870: LIST
14871: PUSH
14872: EMPTY
14873: LIST
14874: LIST
14875: PPUSH
14876: CALL_OW 69
14880: ST_TO_ADDR
// if not tmp then
14881: LD_VAR 0 2
14885: NOT
14886: IFFALSE 14890
// exit ;
14888: GO 14919
// for i in tmp do
14890: LD_ADDR_VAR 0 1
14894: PUSH
14895: LD_VAR 0 2
14899: PUSH
14900: FOR_IN
14901: IFFALSE 14917
// begin SetLives ( i , 0 ) ;
14903: LD_VAR 0 1
14907: PPUSH
14908: LD_INT 0
14910: PPUSH
14911: CALL_OW 234
// end ;
14915: GO 14900
14917: POP
14918: POP
// end ;
14919: PPOPN 2
14921: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
14922: LD_EXP 31
14926: PUSH
14927: LD_EXP 37
14931: AND
14932: IFFALSE 15016
14934: GO 14936
14936: DISABLE
14937: LD_INT 0
14939: PPUSH
14940: PPUSH
// begin enable ;
14941: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
14942: LD_ADDR_VAR 0 2
14946: PUSH
14947: LD_INT 22
14949: PUSH
14950: LD_OWVAR 2
14954: PUSH
14955: EMPTY
14956: LIST
14957: LIST
14958: PUSH
14959: LD_INT 32
14961: PUSH
14962: LD_INT 3
14964: PUSH
14965: EMPTY
14966: LIST
14967: LIST
14968: PUSH
14969: EMPTY
14970: LIST
14971: LIST
14972: PPUSH
14973: CALL_OW 69
14977: ST_TO_ADDR
// if not tmp then
14978: LD_VAR 0 2
14982: NOT
14983: IFFALSE 14987
// exit ;
14985: GO 15016
// for i in tmp do
14987: LD_ADDR_VAR 0 1
14991: PUSH
14992: LD_VAR 0 2
14996: PUSH
14997: FOR_IN
14998: IFFALSE 15014
// begin SetLives ( i , 0 ) ;
15000: LD_VAR 0 1
15004: PPUSH
15005: LD_INT 0
15007: PPUSH
15008: CALL_OW 234
// end ;
15012: GO 14997
15014: POP
15015: POP
// end ;
15016: PPOPN 2
15018: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
15019: LD_EXP 31
15023: PUSH
15024: LD_EXP 34
15028: AND
15029: IFFALSE 15122
15031: GO 15033
15033: DISABLE
15034: LD_INT 0
15036: PPUSH
// begin enable ;
15037: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
15038: LD_ADDR_VAR 0 1
15042: PUSH
15043: LD_INT 22
15045: PUSH
15046: LD_OWVAR 2
15050: PUSH
15051: EMPTY
15052: LIST
15053: LIST
15054: PUSH
15055: LD_INT 2
15057: PUSH
15058: LD_INT 25
15060: PUSH
15061: LD_INT 5
15063: PUSH
15064: EMPTY
15065: LIST
15066: LIST
15067: PUSH
15068: LD_INT 25
15070: PUSH
15071: LD_INT 9
15073: PUSH
15074: EMPTY
15075: LIST
15076: LIST
15077: PUSH
15078: LD_INT 25
15080: PUSH
15081: LD_INT 8
15083: PUSH
15084: EMPTY
15085: LIST
15086: LIST
15087: PUSH
15088: EMPTY
15089: LIST
15090: LIST
15091: LIST
15092: LIST
15093: PUSH
15094: EMPTY
15095: LIST
15096: LIST
15097: PPUSH
15098: CALL_OW 69
15102: PUSH
15103: FOR_IN
15104: IFFALSE 15120
// begin SetClass ( i , 1 ) ;
15106: LD_VAR 0 1
15110: PPUSH
15111: LD_INT 1
15113: PPUSH
15114: CALL_OW 336
// end ;
15118: GO 15103
15120: POP
15121: POP
// end ;
15122: PPOPN 1
15124: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
15125: LD_EXP 31
15129: PUSH
15130: LD_EXP 35
15134: AND
15135: PUSH
15136: LD_OWVAR 65
15140: PUSH
15141: LD_INT 7
15143: LESS
15144: AND
15145: IFFALSE 15159
15147: GO 15149
15149: DISABLE
// begin enable ;
15150: ENABLE
// game_speed := 7 ;
15151: LD_ADDR_OWVAR 65
15155: PUSH
15156: LD_INT 7
15158: ST_TO_ADDR
// end ;
15159: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
15160: LD_EXP 31
15164: PUSH
15165: LD_EXP 38
15169: AND
15170: IFFALSE 15372
15172: GO 15174
15174: DISABLE
15175: LD_INT 0
15177: PPUSH
15178: PPUSH
15179: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
15180: LD_ADDR_VAR 0 3
15184: PUSH
15185: LD_INT 81
15187: PUSH
15188: LD_OWVAR 2
15192: PUSH
15193: EMPTY
15194: LIST
15195: LIST
15196: PUSH
15197: LD_INT 21
15199: PUSH
15200: LD_INT 1
15202: PUSH
15203: EMPTY
15204: LIST
15205: LIST
15206: PUSH
15207: EMPTY
15208: LIST
15209: LIST
15210: PPUSH
15211: CALL_OW 69
15215: ST_TO_ADDR
// if not tmp then
15216: LD_VAR 0 3
15220: NOT
15221: IFFALSE 15225
// exit ;
15223: GO 15372
// if tmp > 5 then
15225: LD_VAR 0 3
15229: PUSH
15230: LD_INT 5
15232: GREATER
15233: IFFALSE 15245
// k := 5 else
15235: LD_ADDR_VAR 0 2
15239: PUSH
15240: LD_INT 5
15242: ST_TO_ADDR
15243: GO 15255
// k := tmp ;
15245: LD_ADDR_VAR 0 2
15249: PUSH
15250: LD_VAR 0 3
15254: ST_TO_ADDR
// for i := 1 to k do
15255: LD_ADDR_VAR 0 1
15259: PUSH
15260: DOUBLE
15261: LD_INT 1
15263: DEC
15264: ST_TO_ADDR
15265: LD_VAR 0 2
15269: PUSH
15270: FOR_TO
15271: IFFALSE 15370
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
15273: LD_VAR 0 3
15277: PUSH
15278: LD_VAR 0 1
15282: ARRAY
15283: PPUSH
15284: LD_VAR 0 1
15288: PUSH
15289: LD_INT 4
15291: MOD
15292: PUSH
15293: LD_INT 1
15295: PLUS
15296: PPUSH
15297: CALL_OW 259
15301: PUSH
15302: LD_INT 10
15304: LESS
15305: IFFALSE 15368
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
15307: LD_VAR 0 3
15311: PUSH
15312: LD_VAR 0 1
15316: ARRAY
15317: PPUSH
15318: LD_VAR 0 1
15322: PUSH
15323: LD_INT 4
15325: MOD
15326: PUSH
15327: LD_INT 1
15329: PLUS
15330: PPUSH
15331: LD_VAR 0 3
15335: PUSH
15336: LD_VAR 0 1
15340: ARRAY
15341: PPUSH
15342: LD_VAR 0 1
15346: PUSH
15347: LD_INT 4
15349: MOD
15350: PUSH
15351: LD_INT 1
15353: PLUS
15354: PPUSH
15355: CALL_OW 259
15359: PUSH
15360: LD_INT 1
15362: PLUS
15363: PPUSH
15364: CALL_OW 237
15368: GO 15270
15370: POP
15371: POP
// end ;
15372: PPOPN 3
15374: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
15375: LD_EXP 31
15379: PUSH
15380: LD_EXP 39
15384: AND
15385: IFFALSE 15405
15387: GO 15389
15389: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
15390: LD_INT 4
15392: PPUSH
15393: LD_OWVAR 2
15397: PPUSH
15398: LD_INT 0
15400: PPUSH
15401: CALL_OW 324
15405: END
// every 0 0$1 trigger StreamModeActive and sShovel do
15406: LD_EXP 31
15410: PUSH
15411: LD_EXP 68
15415: AND
15416: IFFALSE 15436
15418: GO 15420
15420: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
15421: LD_INT 19
15423: PPUSH
15424: LD_OWVAR 2
15428: PPUSH
15429: LD_INT 0
15431: PPUSH
15432: CALL_OW 324
15436: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
15437: LD_EXP 31
15441: PUSH
15442: LD_EXP 40
15446: AND
15447: IFFALSE 15549
15449: GO 15451
15451: DISABLE
15452: LD_INT 0
15454: PPUSH
15455: PPUSH
// begin enable ;
15456: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
15457: LD_ADDR_VAR 0 2
15461: PUSH
15462: LD_INT 22
15464: PUSH
15465: LD_OWVAR 2
15469: PUSH
15470: EMPTY
15471: LIST
15472: LIST
15473: PUSH
15474: LD_INT 2
15476: PUSH
15477: LD_INT 34
15479: PUSH
15480: LD_INT 11
15482: PUSH
15483: EMPTY
15484: LIST
15485: LIST
15486: PUSH
15487: LD_INT 34
15489: PUSH
15490: LD_INT 30
15492: PUSH
15493: EMPTY
15494: LIST
15495: LIST
15496: PUSH
15497: EMPTY
15498: LIST
15499: LIST
15500: LIST
15501: PUSH
15502: EMPTY
15503: LIST
15504: LIST
15505: PPUSH
15506: CALL_OW 69
15510: ST_TO_ADDR
// if not tmp then
15511: LD_VAR 0 2
15515: NOT
15516: IFFALSE 15520
// exit ;
15518: GO 15549
// for i in tmp do
15520: LD_ADDR_VAR 0 1
15524: PUSH
15525: LD_VAR 0 2
15529: PUSH
15530: FOR_IN
15531: IFFALSE 15547
// begin SetLives ( i , 0 ) ;
15533: LD_VAR 0 1
15537: PPUSH
15538: LD_INT 0
15540: PPUSH
15541: CALL_OW 234
// end ;
15545: GO 15530
15547: POP
15548: POP
// end ;
15549: PPOPN 2
15551: END
// every 0 0$1 trigger StreamModeActive and sBunker do
15552: LD_EXP 31
15556: PUSH
15557: LD_EXP 41
15561: AND
15562: IFFALSE 15582
15564: GO 15566
15566: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
15567: LD_INT 32
15569: PPUSH
15570: LD_OWVAR 2
15574: PPUSH
15575: LD_INT 0
15577: PPUSH
15578: CALL_OW 324
15582: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
15583: LD_EXP 31
15587: PUSH
15588: LD_EXP 42
15592: AND
15593: IFFALSE 15774
15595: GO 15597
15597: DISABLE
15598: LD_INT 0
15600: PPUSH
15601: PPUSH
15602: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
15603: LD_ADDR_VAR 0 2
15607: PUSH
15608: LD_INT 22
15610: PUSH
15611: LD_OWVAR 2
15615: PUSH
15616: EMPTY
15617: LIST
15618: LIST
15619: PUSH
15620: LD_INT 33
15622: PUSH
15623: LD_INT 3
15625: PUSH
15626: EMPTY
15627: LIST
15628: LIST
15629: PUSH
15630: EMPTY
15631: LIST
15632: LIST
15633: PPUSH
15634: CALL_OW 69
15638: ST_TO_ADDR
// if not tmp then
15639: LD_VAR 0 2
15643: NOT
15644: IFFALSE 15648
// exit ;
15646: GO 15774
// side := 0 ;
15648: LD_ADDR_VAR 0 3
15652: PUSH
15653: LD_INT 0
15655: ST_TO_ADDR
// for i := 1 to 8 do
15656: LD_ADDR_VAR 0 1
15660: PUSH
15661: DOUBLE
15662: LD_INT 1
15664: DEC
15665: ST_TO_ADDR
15666: LD_INT 8
15668: PUSH
15669: FOR_TO
15670: IFFALSE 15718
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
15672: LD_OWVAR 2
15676: PUSH
15677: LD_VAR 0 1
15681: NONEQUAL
15682: PUSH
15683: LD_OWVAR 2
15687: PPUSH
15688: LD_VAR 0 1
15692: PPUSH
15693: CALL_OW 81
15697: PUSH
15698: LD_INT 2
15700: EQUAL
15701: AND
15702: IFFALSE 15716
// begin side := i ;
15704: LD_ADDR_VAR 0 3
15708: PUSH
15709: LD_VAR 0 1
15713: ST_TO_ADDR
// break ;
15714: GO 15718
// end ;
15716: GO 15669
15718: POP
15719: POP
// if not side then
15720: LD_VAR 0 3
15724: NOT
15725: IFFALSE 15729
// exit ;
15727: GO 15774
// for i := 1 to tmp do
15729: LD_ADDR_VAR 0 1
15733: PUSH
15734: DOUBLE
15735: LD_INT 1
15737: DEC
15738: ST_TO_ADDR
15739: LD_VAR 0 2
15743: PUSH
15744: FOR_TO
15745: IFFALSE 15772
// if Prob ( 60 ) then
15747: LD_INT 60
15749: PPUSH
15750: CALL_OW 13
15754: IFFALSE 15770
// SetSide ( i , side ) ;
15756: LD_VAR 0 1
15760: PPUSH
15761: LD_VAR 0 3
15765: PPUSH
15766: CALL_OW 235
15770: GO 15744
15772: POP
15773: POP
// end ;
15774: PPOPN 3
15776: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
15777: LD_EXP 31
15781: PUSH
15782: LD_EXP 44
15786: AND
15787: IFFALSE 15906
15789: GO 15791
15791: DISABLE
15792: LD_INT 0
15794: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
15795: LD_ADDR_VAR 0 1
15799: PUSH
15800: LD_INT 22
15802: PUSH
15803: LD_OWVAR 2
15807: PUSH
15808: EMPTY
15809: LIST
15810: LIST
15811: PUSH
15812: LD_INT 21
15814: PUSH
15815: LD_INT 1
15817: PUSH
15818: EMPTY
15819: LIST
15820: LIST
15821: PUSH
15822: LD_INT 3
15824: PUSH
15825: LD_INT 23
15827: PUSH
15828: LD_INT 0
15830: PUSH
15831: EMPTY
15832: LIST
15833: LIST
15834: PUSH
15835: EMPTY
15836: LIST
15837: LIST
15838: PUSH
15839: EMPTY
15840: LIST
15841: LIST
15842: LIST
15843: PPUSH
15844: CALL_OW 69
15848: PUSH
15849: FOR_IN
15850: IFFALSE 15904
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
15852: LD_VAR 0 1
15856: PPUSH
15857: CALL_OW 257
15861: PUSH
15862: LD_INT 1
15864: PUSH
15865: LD_INT 2
15867: PUSH
15868: LD_INT 3
15870: PUSH
15871: LD_INT 4
15873: PUSH
15874: EMPTY
15875: LIST
15876: LIST
15877: LIST
15878: LIST
15879: IN
15880: IFFALSE 15902
// SetClass ( un , rand ( 1 , 4 ) ) ;
15882: LD_VAR 0 1
15886: PPUSH
15887: LD_INT 1
15889: PPUSH
15890: LD_INT 4
15892: PPUSH
15893: CALL_OW 12
15897: PPUSH
15898: CALL_OW 336
15902: GO 15849
15904: POP
15905: POP
// end ;
15906: PPOPN 1
15908: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
15909: LD_EXP 31
15913: PUSH
15914: LD_EXP 43
15918: AND
15919: IFFALSE 15998
15921: GO 15923
15923: DISABLE
15924: LD_INT 0
15926: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
15927: LD_ADDR_VAR 0 1
15931: PUSH
15932: LD_INT 22
15934: PUSH
15935: LD_OWVAR 2
15939: PUSH
15940: EMPTY
15941: LIST
15942: LIST
15943: PUSH
15944: LD_INT 21
15946: PUSH
15947: LD_INT 3
15949: PUSH
15950: EMPTY
15951: LIST
15952: LIST
15953: PUSH
15954: EMPTY
15955: LIST
15956: LIST
15957: PPUSH
15958: CALL_OW 69
15962: ST_TO_ADDR
// if not tmp then
15963: LD_VAR 0 1
15967: NOT
15968: IFFALSE 15972
// exit ;
15970: GO 15998
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
15972: LD_VAR 0 1
15976: PUSH
15977: LD_INT 1
15979: PPUSH
15980: LD_VAR 0 1
15984: PPUSH
15985: CALL_OW 12
15989: ARRAY
15990: PPUSH
15991: LD_INT 100
15993: PPUSH
15994: CALL_OW 234
// end ;
15998: PPOPN 1
16000: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
16001: LD_EXP 31
16005: PUSH
16006: LD_EXP 45
16010: AND
16011: IFFALSE 16109
16013: GO 16015
16015: DISABLE
16016: LD_INT 0
16018: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
16019: LD_ADDR_VAR 0 1
16023: PUSH
16024: LD_INT 22
16026: PUSH
16027: LD_OWVAR 2
16031: PUSH
16032: EMPTY
16033: LIST
16034: LIST
16035: PUSH
16036: LD_INT 21
16038: PUSH
16039: LD_INT 1
16041: PUSH
16042: EMPTY
16043: LIST
16044: LIST
16045: PUSH
16046: EMPTY
16047: LIST
16048: LIST
16049: PPUSH
16050: CALL_OW 69
16054: ST_TO_ADDR
// if not tmp then
16055: LD_VAR 0 1
16059: NOT
16060: IFFALSE 16064
// exit ;
16062: GO 16109
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
16064: LD_VAR 0 1
16068: PUSH
16069: LD_INT 1
16071: PPUSH
16072: LD_VAR 0 1
16076: PPUSH
16077: CALL_OW 12
16081: ARRAY
16082: PPUSH
16083: LD_INT 1
16085: PPUSH
16086: LD_INT 4
16088: PPUSH
16089: CALL_OW 12
16093: PPUSH
16094: LD_INT 3000
16096: PPUSH
16097: LD_INT 9000
16099: PPUSH
16100: CALL_OW 12
16104: PPUSH
16105: CALL_OW 492
// end ;
16109: PPOPN 1
16111: END
// every 0 0$1 trigger StreamModeActive and sDepot do
16112: LD_EXP 31
16116: PUSH
16117: LD_EXP 46
16121: AND
16122: IFFALSE 16142
16124: GO 16126
16126: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
16127: LD_INT 1
16129: PPUSH
16130: LD_OWVAR 2
16134: PPUSH
16135: LD_INT 0
16137: PPUSH
16138: CALL_OW 324
16142: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
16143: LD_EXP 31
16147: PUSH
16148: LD_EXP 47
16152: AND
16153: IFFALSE 16236
16155: GO 16157
16157: DISABLE
16158: LD_INT 0
16160: PPUSH
16161: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
16162: LD_ADDR_VAR 0 2
16166: PUSH
16167: LD_INT 22
16169: PUSH
16170: LD_OWVAR 2
16174: PUSH
16175: EMPTY
16176: LIST
16177: LIST
16178: PUSH
16179: LD_INT 21
16181: PUSH
16182: LD_INT 3
16184: PUSH
16185: EMPTY
16186: LIST
16187: LIST
16188: PUSH
16189: EMPTY
16190: LIST
16191: LIST
16192: PPUSH
16193: CALL_OW 69
16197: ST_TO_ADDR
// if not tmp then
16198: LD_VAR 0 2
16202: NOT
16203: IFFALSE 16207
// exit ;
16205: GO 16236
// for i in tmp do
16207: LD_ADDR_VAR 0 1
16211: PUSH
16212: LD_VAR 0 2
16216: PUSH
16217: FOR_IN
16218: IFFALSE 16234
// SetBLevel ( i , 10 ) ;
16220: LD_VAR 0 1
16224: PPUSH
16225: LD_INT 10
16227: PPUSH
16228: CALL_OW 241
16232: GO 16217
16234: POP
16235: POP
// end ;
16236: PPOPN 2
16238: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
16239: LD_EXP 31
16243: PUSH
16244: LD_EXP 48
16248: AND
16249: IFFALSE 16360
16251: GO 16253
16253: DISABLE
16254: LD_INT 0
16256: PPUSH
16257: PPUSH
16258: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
16259: LD_ADDR_VAR 0 3
16263: PUSH
16264: LD_INT 22
16266: PUSH
16267: LD_OWVAR 2
16271: PUSH
16272: EMPTY
16273: LIST
16274: LIST
16275: PUSH
16276: LD_INT 25
16278: PUSH
16279: LD_INT 1
16281: PUSH
16282: EMPTY
16283: LIST
16284: LIST
16285: PUSH
16286: EMPTY
16287: LIST
16288: LIST
16289: PPUSH
16290: CALL_OW 69
16294: ST_TO_ADDR
// if not tmp then
16295: LD_VAR 0 3
16299: NOT
16300: IFFALSE 16304
// exit ;
16302: GO 16360
// un := tmp [ rand ( 1 , tmp ) ] ;
16304: LD_ADDR_VAR 0 2
16308: PUSH
16309: LD_VAR 0 3
16313: PUSH
16314: LD_INT 1
16316: PPUSH
16317: LD_VAR 0 3
16321: PPUSH
16322: CALL_OW 12
16326: ARRAY
16327: ST_TO_ADDR
// if Crawls ( un ) then
16328: LD_VAR 0 2
16332: PPUSH
16333: CALL_OW 318
16337: IFFALSE 16348
// ComWalk ( un ) ;
16339: LD_VAR 0 2
16343: PPUSH
16344: CALL_OW 138
// SetClass ( un , class_sniper ) ;
16348: LD_VAR 0 2
16352: PPUSH
16353: LD_INT 5
16355: PPUSH
16356: CALL_OW 336
// end ;
16360: PPOPN 3
16362: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
16363: LD_EXP 31
16367: PUSH
16368: LD_EXP 49
16372: AND
16373: PUSH
16374: LD_OWVAR 67
16378: PUSH
16379: LD_INT 4
16381: LESS
16382: AND
16383: IFFALSE 16402
16385: GO 16387
16387: DISABLE
// begin Difficulty := Difficulty + 1 ;
16388: LD_ADDR_OWVAR 67
16392: PUSH
16393: LD_OWVAR 67
16397: PUSH
16398: LD_INT 1
16400: PLUS
16401: ST_TO_ADDR
// end ;
16402: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
16403: LD_EXP 31
16407: PUSH
16408: LD_EXP 50
16412: AND
16413: IFFALSE 16516
16415: GO 16417
16417: DISABLE
16418: LD_INT 0
16420: PPUSH
// begin for i := 1 to 5 do
16421: LD_ADDR_VAR 0 1
16425: PUSH
16426: DOUBLE
16427: LD_INT 1
16429: DEC
16430: ST_TO_ADDR
16431: LD_INT 5
16433: PUSH
16434: FOR_TO
16435: IFFALSE 16514
// begin uc_nation := nation_nature ;
16437: LD_ADDR_OWVAR 21
16441: PUSH
16442: LD_INT 0
16444: ST_TO_ADDR
// uc_side := 0 ;
16445: LD_ADDR_OWVAR 20
16449: PUSH
16450: LD_INT 0
16452: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
16453: LD_ADDR_OWVAR 29
16457: PUSH
16458: LD_INT 12
16460: PUSH
16461: LD_INT 12
16463: PUSH
16464: EMPTY
16465: LIST
16466: LIST
16467: ST_TO_ADDR
// hc_agressivity := 20 ;
16468: LD_ADDR_OWVAR 35
16472: PUSH
16473: LD_INT 20
16475: ST_TO_ADDR
// hc_class := class_tiger ;
16476: LD_ADDR_OWVAR 28
16480: PUSH
16481: LD_INT 14
16483: ST_TO_ADDR
// hc_gallery :=  ;
16484: LD_ADDR_OWVAR 33
16488: PUSH
16489: LD_STRING 
16491: ST_TO_ADDR
// hc_name :=  ;
16492: LD_ADDR_OWVAR 26
16496: PUSH
16497: LD_STRING 
16499: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
16500: CALL_OW 44
16504: PPUSH
16505: LD_INT 0
16507: PPUSH
16508: CALL_OW 51
// end ;
16512: GO 16434
16514: POP
16515: POP
// end ;
16516: PPOPN 1
16518: END
// every 0 0$1 trigger StreamModeActive and sBomb do
16519: LD_EXP 31
16523: PUSH
16524: LD_EXP 51
16528: AND
16529: IFFALSE 16538
16531: GO 16533
16533: DISABLE
// StreamSibBomb ;
16534: CALL 16539 0 0
16538: END
// export function StreamSibBomb ; var i , x , y ; begin
16539: LD_INT 0
16541: PPUSH
16542: PPUSH
16543: PPUSH
16544: PPUSH
// result := false ;
16545: LD_ADDR_VAR 0 1
16549: PUSH
16550: LD_INT 0
16552: ST_TO_ADDR
// for i := 1 to 16 do
16553: LD_ADDR_VAR 0 2
16557: PUSH
16558: DOUBLE
16559: LD_INT 1
16561: DEC
16562: ST_TO_ADDR
16563: LD_INT 16
16565: PUSH
16566: FOR_TO
16567: IFFALSE 16766
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
16569: LD_ADDR_VAR 0 3
16573: PUSH
16574: LD_INT 10
16576: PUSH
16577: LD_INT 20
16579: PUSH
16580: LD_INT 30
16582: PUSH
16583: LD_INT 40
16585: PUSH
16586: LD_INT 50
16588: PUSH
16589: LD_INT 60
16591: PUSH
16592: LD_INT 70
16594: PUSH
16595: LD_INT 80
16597: PUSH
16598: LD_INT 90
16600: PUSH
16601: LD_INT 100
16603: PUSH
16604: LD_INT 110
16606: PUSH
16607: LD_INT 120
16609: PUSH
16610: LD_INT 130
16612: PUSH
16613: LD_INT 140
16615: PUSH
16616: LD_INT 150
16618: PUSH
16619: EMPTY
16620: LIST
16621: LIST
16622: LIST
16623: LIST
16624: LIST
16625: LIST
16626: LIST
16627: LIST
16628: LIST
16629: LIST
16630: LIST
16631: LIST
16632: LIST
16633: LIST
16634: LIST
16635: PUSH
16636: LD_INT 1
16638: PPUSH
16639: LD_INT 15
16641: PPUSH
16642: CALL_OW 12
16646: ARRAY
16647: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
16648: LD_ADDR_VAR 0 4
16652: PUSH
16653: LD_INT 10
16655: PUSH
16656: LD_INT 20
16658: PUSH
16659: LD_INT 30
16661: PUSH
16662: LD_INT 40
16664: PUSH
16665: LD_INT 50
16667: PUSH
16668: LD_INT 60
16670: PUSH
16671: LD_INT 70
16673: PUSH
16674: LD_INT 80
16676: PUSH
16677: LD_INT 90
16679: PUSH
16680: LD_INT 100
16682: PUSH
16683: LD_INT 110
16685: PUSH
16686: LD_INT 120
16688: PUSH
16689: LD_INT 130
16691: PUSH
16692: LD_INT 140
16694: PUSH
16695: LD_INT 150
16697: PUSH
16698: EMPTY
16699: LIST
16700: LIST
16701: LIST
16702: LIST
16703: LIST
16704: LIST
16705: LIST
16706: LIST
16707: LIST
16708: LIST
16709: LIST
16710: LIST
16711: LIST
16712: LIST
16713: LIST
16714: PUSH
16715: LD_INT 1
16717: PPUSH
16718: LD_INT 15
16720: PPUSH
16721: CALL_OW 12
16725: ARRAY
16726: ST_TO_ADDR
// if ValidHex ( x , y ) then
16727: LD_VAR 0 3
16731: PPUSH
16732: LD_VAR 0 4
16736: PPUSH
16737: CALL_OW 488
16741: IFFALSE 16764
// begin result := [ x , y ] ;
16743: LD_ADDR_VAR 0 1
16747: PUSH
16748: LD_VAR 0 3
16752: PUSH
16753: LD_VAR 0 4
16757: PUSH
16758: EMPTY
16759: LIST
16760: LIST
16761: ST_TO_ADDR
// break ;
16762: GO 16766
// end ; end ;
16764: GO 16566
16766: POP
16767: POP
// if result then
16768: LD_VAR 0 1
16772: IFFALSE 16832
// begin ToLua ( playSibBomb() ) ;
16774: LD_STRING playSibBomb()
16776: PPUSH
16777: CALL_OW 559
// wait ( 0 0$14 ) ;
16781: LD_INT 490
16783: PPUSH
16784: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
16788: LD_VAR 0 1
16792: PUSH
16793: LD_INT 1
16795: ARRAY
16796: PPUSH
16797: LD_VAR 0 1
16801: PUSH
16802: LD_INT 2
16804: ARRAY
16805: PPUSH
16806: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
16810: LD_VAR 0 1
16814: PUSH
16815: LD_INT 1
16817: ARRAY
16818: PPUSH
16819: LD_VAR 0 1
16823: PUSH
16824: LD_INT 2
16826: ARRAY
16827: PPUSH
16828: CALL_OW 429
// end ; end ;
16832: LD_VAR 0 1
16836: RET
// every 0 0$1 trigger StreamModeActive and sReset do
16837: LD_EXP 31
16841: PUSH
16842: LD_EXP 53
16846: AND
16847: IFFALSE 16859
16849: GO 16851
16851: DISABLE
// YouLost (  ) ;
16852: LD_STRING 
16854: PPUSH
16855: CALL_OW 104
16859: END
// every 0 0$1 trigger StreamModeActive and sFog do
16860: LD_EXP 31
16864: PUSH
16865: LD_EXP 52
16869: AND
16870: IFFALSE 16884
16872: GO 16874
16874: DISABLE
// FogOff ( your_side ) ;
16875: LD_OWVAR 2
16879: PPUSH
16880: CALL_OW 344
16884: END
// every 0 0$1 trigger StreamModeActive and sSun do
16885: LD_EXP 31
16889: PUSH
16890: LD_EXP 54
16894: AND
16895: IFFALSE 16923
16897: GO 16899
16899: DISABLE
// begin solar_recharge_percent := 0 ;
16900: LD_ADDR_OWVAR 79
16904: PUSH
16905: LD_INT 0
16907: ST_TO_ADDR
// wait ( 5 5$00 ) ;
16908: LD_INT 10500
16910: PPUSH
16911: CALL_OW 67
// solar_recharge_percent := 100 ;
16915: LD_ADDR_OWVAR 79
16919: PUSH
16920: LD_INT 100
16922: ST_TO_ADDR
// end ;
16923: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
16924: LD_EXP 31
16928: PUSH
16929: LD_EXP 55
16933: AND
16934: IFFALSE 17173
16936: GO 16938
16938: DISABLE
16939: LD_INT 0
16941: PPUSH
16942: PPUSH
16943: PPUSH
// begin tmp := [ ] ;
16944: LD_ADDR_VAR 0 3
16948: PUSH
16949: EMPTY
16950: ST_TO_ADDR
// for i := 1 to 6 do
16951: LD_ADDR_VAR 0 1
16955: PUSH
16956: DOUBLE
16957: LD_INT 1
16959: DEC
16960: ST_TO_ADDR
16961: LD_INT 6
16963: PUSH
16964: FOR_TO
16965: IFFALSE 17070
// begin uc_nation := nation_nature ;
16967: LD_ADDR_OWVAR 21
16971: PUSH
16972: LD_INT 0
16974: ST_TO_ADDR
// uc_side := 0 ;
16975: LD_ADDR_OWVAR 20
16979: PUSH
16980: LD_INT 0
16982: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
16983: LD_ADDR_OWVAR 29
16987: PUSH
16988: LD_INT 12
16990: PUSH
16991: LD_INT 12
16993: PUSH
16994: EMPTY
16995: LIST
16996: LIST
16997: ST_TO_ADDR
// hc_agressivity := 20 ;
16998: LD_ADDR_OWVAR 35
17002: PUSH
17003: LD_INT 20
17005: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
17006: LD_ADDR_OWVAR 28
17010: PUSH
17011: LD_INT 17
17013: ST_TO_ADDR
// hc_gallery :=  ;
17014: LD_ADDR_OWVAR 33
17018: PUSH
17019: LD_STRING 
17021: ST_TO_ADDR
// hc_name :=  ;
17022: LD_ADDR_OWVAR 26
17026: PUSH
17027: LD_STRING 
17029: ST_TO_ADDR
// un := CreateHuman ;
17030: LD_ADDR_VAR 0 2
17034: PUSH
17035: CALL_OW 44
17039: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
17040: LD_VAR 0 2
17044: PPUSH
17045: LD_INT 1
17047: PPUSH
17048: CALL_OW 51
// tmp := tmp ^ un ;
17052: LD_ADDR_VAR 0 3
17056: PUSH
17057: LD_VAR 0 3
17061: PUSH
17062: LD_VAR 0 2
17066: ADD
17067: ST_TO_ADDR
// end ;
17068: GO 16964
17070: POP
17071: POP
// repeat wait ( 0 0$1 ) ;
17072: LD_INT 35
17074: PPUSH
17075: CALL_OW 67
// for un in tmp do
17079: LD_ADDR_VAR 0 2
17083: PUSH
17084: LD_VAR 0 3
17088: PUSH
17089: FOR_IN
17090: IFFALSE 17164
// begin if IsDead ( un ) then
17092: LD_VAR 0 2
17096: PPUSH
17097: CALL_OW 301
17101: IFFALSE 17121
// begin tmp := tmp diff un ;
17103: LD_ADDR_VAR 0 3
17107: PUSH
17108: LD_VAR 0 3
17112: PUSH
17113: LD_VAR 0 2
17117: DIFF
17118: ST_TO_ADDR
// continue ;
17119: GO 17089
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
17121: LD_VAR 0 2
17125: PPUSH
17126: LD_INT 3
17128: PUSH
17129: LD_INT 22
17131: PUSH
17132: LD_INT 0
17134: PUSH
17135: EMPTY
17136: LIST
17137: LIST
17138: PUSH
17139: EMPTY
17140: LIST
17141: LIST
17142: PPUSH
17143: CALL_OW 69
17147: PPUSH
17148: LD_VAR 0 2
17152: PPUSH
17153: CALL_OW 74
17157: PPUSH
17158: CALL_OW 115
// end ;
17162: GO 17089
17164: POP
17165: POP
// until not tmp ;
17166: LD_VAR 0 3
17170: NOT
17171: IFFALSE 17072
// end ;
17173: PPOPN 3
17175: END
// every 0 0$1 trigger StreamModeActive and sTroll do
17176: LD_EXP 31
17180: PUSH
17181: LD_EXP 56
17185: AND
17186: IFFALSE 17240
17188: GO 17190
17190: DISABLE
// begin ToLua ( displayTroll(); ) ;
17191: LD_STRING displayTroll();
17193: PPUSH
17194: CALL_OW 559
// wait ( 3 3$00 ) ;
17198: LD_INT 6300
17200: PPUSH
17201: CALL_OW 67
// ToLua ( hideTroll(); ) ;
17205: LD_STRING hideTroll();
17207: PPUSH
17208: CALL_OW 559
// wait ( 1 1$00 ) ;
17212: LD_INT 2100
17214: PPUSH
17215: CALL_OW 67
// ToLua ( displayTroll(); ) ;
17219: LD_STRING displayTroll();
17221: PPUSH
17222: CALL_OW 559
// wait ( 1 1$00 ) ;
17226: LD_INT 2100
17228: PPUSH
17229: CALL_OW 67
// ToLua ( hideTroll(); ) ;
17233: LD_STRING hideTroll();
17235: PPUSH
17236: CALL_OW 559
// end ;
17240: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
17241: LD_EXP 31
17245: PUSH
17246: LD_EXP 57
17250: AND
17251: IFFALSE 17314
17253: GO 17255
17255: DISABLE
17256: LD_INT 0
17258: PPUSH
// begin p := 0 ;
17259: LD_ADDR_VAR 0 1
17263: PUSH
17264: LD_INT 0
17266: ST_TO_ADDR
// repeat game_speed := 1 ;
17267: LD_ADDR_OWVAR 65
17271: PUSH
17272: LD_INT 1
17274: ST_TO_ADDR
// wait ( 0 0$1 ) ;
17275: LD_INT 35
17277: PPUSH
17278: CALL_OW 67
// p := p + 1 ;
17282: LD_ADDR_VAR 0 1
17286: PUSH
17287: LD_VAR 0 1
17291: PUSH
17292: LD_INT 1
17294: PLUS
17295: ST_TO_ADDR
// until p >= 60 ;
17296: LD_VAR 0 1
17300: PUSH
17301: LD_INT 60
17303: GREATEREQUAL
17304: IFFALSE 17267
// game_speed := 4 ;
17306: LD_ADDR_OWVAR 65
17310: PUSH
17311: LD_INT 4
17313: ST_TO_ADDR
// end ;
17314: PPOPN 1
17316: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
17317: LD_EXP 31
17321: PUSH
17322: LD_EXP 58
17326: AND
17327: IFFALSE 17473
17329: GO 17331
17331: DISABLE
17332: LD_INT 0
17334: PPUSH
17335: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
17336: LD_ADDR_VAR 0 1
17340: PUSH
17341: LD_INT 22
17343: PUSH
17344: LD_OWVAR 2
17348: PUSH
17349: EMPTY
17350: LIST
17351: LIST
17352: PUSH
17353: LD_INT 2
17355: PUSH
17356: LD_INT 30
17358: PUSH
17359: LD_INT 0
17361: PUSH
17362: EMPTY
17363: LIST
17364: LIST
17365: PUSH
17366: LD_INT 30
17368: PUSH
17369: LD_INT 1
17371: PUSH
17372: EMPTY
17373: LIST
17374: LIST
17375: PUSH
17376: EMPTY
17377: LIST
17378: LIST
17379: LIST
17380: PUSH
17381: EMPTY
17382: LIST
17383: LIST
17384: PPUSH
17385: CALL_OW 69
17389: ST_TO_ADDR
// if not depot then
17390: LD_VAR 0 1
17394: NOT
17395: IFFALSE 17399
// exit ;
17397: GO 17473
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
17399: LD_ADDR_VAR 0 2
17403: PUSH
17404: LD_VAR 0 1
17408: PUSH
17409: LD_INT 1
17411: PPUSH
17412: LD_VAR 0 1
17416: PPUSH
17417: CALL_OW 12
17421: ARRAY
17422: PPUSH
17423: CALL_OW 274
17427: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
17428: LD_VAR 0 2
17432: PPUSH
17433: LD_INT 1
17435: PPUSH
17436: LD_INT 0
17438: PPUSH
17439: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
17443: LD_VAR 0 2
17447: PPUSH
17448: LD_INT 2
17450: PPUSH
17451: LD_INT 0
17453: PPUSH
17454: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
17458: LD_VAR 0 2
17462: PPUSH
17463: LD_INT 3
17465: PPUSH
17466: LD_INT 0
17468: PPUSH
17469: CALL_OW 277
// end ;
17473: PPOPN 2
17475: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
17476: LD_EXP 31
17480: PUSH
17481: LD_EXP 59
17485: AND
17486: IFFALSE 17583
17488: GO 17490
17490: DISABLE
17491: LD_INT 0
17493: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
17494: LD_ADDR_VAR 0 1
17498: PUSH
17499: LD_INT 22
17501: PUSH
17502: LD_OWVAR 2
17506: PUSH
17507: EMPTY
17508: LIST
17509: LIST
17510: PUSH
17511: LD_INT 21
17513: PUSH
17514: LD_INT 1
17516: PUSH
17517: EMPTY
17518: LIST
17519: LIST
17520: PUSH
17521: LD_INT 3
17523: PUSH
17524: LD_INT 23
17526: PUSH
17527: LD_INT 0
17529: PUSH
17530: EMPTY
17531: LIST
17532: LIST
17533: PUSH
17534: EMPTY
17535: LIST
17536: LIST
17537: PUSH
17538: EMPTY
17539: LIST
17540: LIST
17541: LIST
17542: PPUSH
17543: CALL_OW 69
17547: ST_TO_ADDR
// if not tmp then
17548: LD_VAR 0 1
17552: NOT
17553: IFFALSE 17557
// exit ;
17555: GO 17583
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
17557: LD_VAR 0 1
17561: PUSH
17562: LD_INT 1
17564: PPUSH
17565: LD_VAR 0 1
17569: PPUSH
17570: CALL_OW 12
17574: ARRAY
17575: PPUSH
17576: LD_INT 200
17578: PPUSH
17579: CALL_OW 234
// end ;
17583: PPOPN 1
17585: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
17586: LD_EXP 31
17590: PUSH
17591: LD_EXP 60
17595: AND
17596: IFFALSE 17675
17598: GO 17600
17600: DISABLE
17601: LD_INT 0
17603: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
17604: LD_ADDR_VAR 0 1
17608: PUSH
17609: LD_INT 22
17611: PUSH
17612: LD_OWVAR 2
17616: PUSH
17617: EMPTY
17618: LIST
17619: LIST
17620: PUSH
17621: LD_INT 21
17623: PUSH
17624: LD_INT 2
17626: PUSH
17627: EMPTY
17628: LIST
17629: LIST
17630: PUSH
17631: EMPTY
17632: LIST
17633: LIST
17634: PPUSH
17635: CALL_OW 69
17639: ST_TO_ADDR
// if not tmp then
17640: LD_VAR 0 1
17644: NOT
17645: IFFALSE 17649
// exit ;
17647: GO 17675
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
17649: LD_VAR 0 1
17653: PUSH
17654: LD_INT 1
17656: PPUSH
17657: LD_VAR 0 1
17661: PPUSH
17662: CALL_OW 12
17666: ARRAY
17667: PPUSH
17668: LD_INT 60
17670: PPUSH
17671: CALL_OW 234
// end ;
17675: PPOPN 1
17677: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
17678: LD_EXP 31
17682: PUSH
17683: LD_EXP 61
17687: AND
17688: IFFALSE 17787
17690: GO 17692
17692: DISABLE
17693: LD_INT 0
17695: PPUSH
17696: PPUSH
// begin enable ;
17697: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
17698: LD_ADDR_VAR 0 1
17702: PUSH
17703: LD_INT 22
17705: PUSH
17706: LD_OWVAR 2
17710: PUSH
17711: EMPTY
17712: LIST
17713: LIST
17714: PUSH
17715: LD_INT 61
17717: PUSH
17718: EMPTY
17719: LIST
17720: PUSH
17721: LD_INT 33
17723: PUSH
17724: LD_INT 2
17726: PUSH
17727: EMPTY
17728: LIST
17729: LIST
17730: PUSH
17731: EMPTY
17732: LIST
17733: LIST
17734: LIST
17735: PPUSH
17736: CALL_OW 69
17740: ST_TO_ADDR
// if not tmp then
17741: LD_VAR 0 1
17745: NOT
17746: IFFALSE 17750
// exit ;
17748: GO 17787
// for i in tmp do
17750: LD_ADDR_VAR 0 2
17754: PUSH
17755: LD_VAR 0 1
17759: PUSH
17760: FOR_IN
17761: IFFALSE 17785
// if IsControledBy ( i ) then
17763: LD_VAR 0 2
17767: PPUSH
17768: CALL_OW 312
17772: IFFALSE 17783
// ComUnlink ( i ) ;
17774: LD_VAR 0 2
17778: PPUSH
17779: CALL_OW 136
17783: GO 17760
17785: POP
17786: POP
// end ;
17787: PPOPN 2
17789: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
17790: LD_EXP 31
17794: PUSH
17795: LD_EXP 62
17799: AND
17800: IFFALSE 17940
17802: GO 17804
17804: DISABLE
17805: LD_INT 0
17807: PPUSH
17808: PPUSH
// begin ToLua ( displayPowell(); ) ;
17809: LD_STRING displayPowell();
17811: PPUSH
17812: CALL_OW 559
// uc_side := 0 ;
17816: LD_ADDR_OWVAR 20
17820: PUSH
17821: LD_INT 0
17823: ST_TO_ADDR
// uc_nation := 2 ;
17824: LD_ADDR_OWVAR 21
17828: PUSH
17829: LD_INT 2
17831: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
17832: LD_ADDR_OWVAR 37
17836: PUSH
17837: LD_INT 14
17839: ST_TO_ADDR
// vc_engine := engine_siberite ;
17840: LD_ADDR_OWVAR 39
17844: PUSH
17845: LD_INT 3
17847: ST_TO_ADDR
// vc_control := control_apeman ;
17848: LD_ADDR_OWVAR 38
17852: PUSH
17853: LD_INT 5
17855: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
17856: LD_ADDR_OWVAR 40
17860: PUSH
17861: LD_INT 29
17863: ST_TO_ADDR
// un := CreateVehicle ;
17864: LD_ADDR_VAR 0 2
17868: PUSH
17869: CALL_OW 45
17873: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
17874: LD_VAR 0 2
17878: PPUSH
17879: LD_INT 1
17881: PPUSH
17882: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
17886: LD_INT 35
17888: PPUSH
17889: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
17893: LD_VAR 0 2
17897: PPUSH
17898: LD_INT 22
17900: PUSH
17901: LD_OWVAR 2
17905: PUSH
17906: EMPTY
17907: LIST
17908: LIST
17909: PPUSH
17910: CALL_OW 69
17914: PPUSH
17915: LD_VAR 0 2
17919: PPUSH
17920: CALL_OW 74
17924: PPUSH
17925: CALL_OW 115
// until IsDead ( un ) ;
17929: LD_VAR 0 2
17933: PPUSH
17934: CALL_OW 301
17938: IFFALSE 17886
// end ;
17940: PPOPN 2
17942: END
// every 0 0$1 trigger StreamModeActive and sStu do
17943: LD_EXP 31
17947: PUSH
17948: LD_EXP 70
17952: AND
17953: IFFALSE 17969
17955: GO 17957
17957: DISABLE
// begin ToLua ( displayStucuk(); ) ;
17958: LD_STRING displayStucuk();
17960: PPUSH
17961: CALL_OW 559
// ResetFog ;
17965: CALL_OW 335
// end ;
17969: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
17970: LD_EXP 31
17974: PUSH
17975: LD_EXP 63
17979: AND
17980: IFFALSE 18121
17982: GO 17984
17984: DISABLE
17985: LD_INT 0
17987: PPUSH
17988: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
17989: LD_ADDR_VAR 0 2
17993: PUSH
17994: LD_INT 22
17996: PUSH
17997: LD_OWVAR 2
18001: PUSH
18002: EMPTY
18003: LIST
18004: LIST
18005: PUSH
18006: LD_INT 21
18008: PUSH
18009: LD_INT 1
18011: PUSH
18012: EMPTY
18013: LIST
18014: LIST
18015: PUSH
18016: EMPTY
18017: LIST
18018: LIST
18019: PPUSH
18020: CALL_OW 69
18024: ST_TO_ADDR
// if not tmp then
18025: LD_VAR 0 2
18029: NOT
18030: IFFALSE 18034
// exit ;
18032: GO 18121
// un := tmp [ rand ( 1 , tmp ) ] ;
18034: LD_ADDR_VAR 0 1
18038: PUSH
18039: LD_VAR 0 2
18043: PUSH
18044: LD_INT 1
18046: PPUSH
18047: LD_VAR 0 2
18051: PPUSH
18052: CALL_OW 12
18056: ARRAY
18057: ST_TO_ADDR
// SetSide ( un , 0 ) ;
18058: LD_VAR 0 1
18062: PPUSH
18063: LD_INT 0
18065: PPUSH
18066: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
18070: LD_VAR 0 1
18074: PPUSH
18075: LD_OWVAR 3
18079: PUSH
18080: LD_VAR 0 1
18084: DIFF
18085: PPUSH
18086: LD_VAR 0 1
18090: PPUSH
18091: CALL_OW 74
18095: PPUSH
18096: CALL_OW 115
// wait ( 0 0$20 ) ;
18100: LD_INT 700
18102: PPUSH
18103: CALL_OW 67
// SetSide ( un , your_side ) ;
18107: LD_VAR 0 1
18111: PPUSH
18112: LD_OWVAR 2
18116: PPUSH
18117: CALL_OW 235
// end ;
18121: PPOPN 2
18123: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
18124: LD_EXP 31
18128: PUSH
18129: LD_EXP 64
18133: AND
18134: IFFALSE 18240
18136: GO 18138
18138: DISABLE
18139: LD_INT 0
18141: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18142: LD_ADDR_VAR 0 1
18146: PUSH
18147: LD_INT 22
18149: PUSH
18150: LD_OWVAR 2
18154: PUSH
18155: EMPTY
18156: LIST
18157: LIST
18158: PUSH
18159: LD_INT 2
18161: PUSH
18162: LD_INT 30
18164: PUSH
18165: LD_INT 0
18167: PUSH
18168: EMPTY
18169: LIST
18170: LIST
18171: PUSH
18172: LD_INT 30
18174: PUSH
18175: LD_INT 1
18177: PUSH
18178: EMPTY
18179: LIST
18180: LIST
18181: PUSH
18182: EMPTY
18183: LIST
18184: LIST
18185: LIST
18186: PUSH
18187: EMPTY
18188: LIST
18189: LIST
18190: PPUSH
18191: CALL_OW 69
18195: ST_TO_ADDR
// if not depot then
18196: LD_VAR 0 1
18200: NOT
18201: IFFALSE 18205
// exit ;
18203: GO 18240
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
18205: LD_VAR 0 1
18209: PUSH
18210: LD_INT 1
18212: ARRAY
18213: PPUSH
18214: CALL_OW 250
18218: PPUSH
18219: LD_VAR 0 1
18223: PUSH
18224: LD_INT 1
18226: ARRAY
18227: PPUSH
18228: CALL_OW 251
18232: PPUSH
18233: LD_INT 70
18235: PPUSH
18236: CALL_OW 495
// end ;
18240: PPOPN 1
18242: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
18243: LD_EXP 31
18247: PUSH
18248: LD_EXP 65
18252: AND
18253: IFFALSE 18464
18255: GO 18257
18257: DISABLE
18258: LD_INT 0
18260: PPUSH
18261: PPUSH
18262: PPUSH
18263: PPUSH
18264: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
18265: LD_ADDR_VAR 0 5
18269: PUSH
18270: LD_INT 22
18272: PUSH
18273: LD_OWVAR 2
18277: PUSH
18278: EMPTY
18279: LIST
18280: LIST
18281: PUSH
18282: LD_INT 21
18284: PUSH
18285: LD_INT 1
18287: PUSH
18288: EMPTY
18289: LIST
18290: LIST
18291: PUSH
18292: EMPTY
18293: LIST
18294: LIST
18295: PPUSH
18296: CALL_OW 69
18300: ST_TO_ADDR
// if not tmp then
18301: LD_VAR 0 5
18305: NOT
18306: IFFALSE 18310
// exit ;
18308: GO 18464
// for i in tmp do
18310: LD_ADDR_VAR 0 1
18314: PUSH
18315: LD_VAR 0 5
18319: PUSH
18320: FOR_IN
18321: IFFALSE 18462
// begin d := rand ( 0 , 5 ) ;
18323: LD_ADDR_VAR 0 4
18327: PUSH
18328: LD_INT 0
18330: PPUSH
18331: LD_INT 5
18333: PPUSH
18334: CALL_OW 12
18338: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
18339: LD_ADDR_VAR 0 2
18343: PUSH
18344: LD_VAR 0 1
18348: PPUSH
18349: CALL_OW 250
18353: PPUSH
18354: LD_VAR 0 4
18358: PPUSH
18359: LD_INT 3
18361: PPUSH
18362: LD_INT 12
18364: PPUSH
18365: CALL_OW 12
18369: PPUSH
18370: CALL_OW 272
18374: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
18375: LD_ADDR_VAR 0 3
18379: PUSH
18380: LD_VAR 0 1
18384: PPUSH
18385: CALL_OW 251
18389: PPUSH
18390: LD_VAR 0 4
18394: PPUSH
18395: LD_INT 3
18397: PPUSH
18398: LD_INT 12
18400: PPUSH
18401: CALL_OW 12
18405: PPUSH
18406: CALL_OW 273
18410: ST_TO_ADDR
// if ValidHex ( x , y ) then
18411: LD_VAR 0 2
18415: PPUSH
18416: LD_VAR 0 3
18420: PPUSH
18421: CALL_OW 488
18425: IFFALSE 18460
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
18427: LD_VAR 0 1
18431: PPUSH
18432: LD_VAR 0 2
18436: PPUSH
18437: LD_VAR 0 3
18441: PPUSH
18442: LD_INT 3
18444: PPUSH
18445: LD_INT 6
18447: PPUSH
18448: CALL_OW 12
18452: PPUSH
18453: LD_INT 1
18455: PPUSH
18456: CALL_OW 483
// end ;
18460: GO 18320
18462: POP
18463: POP
// end ;
18464: PPOPN 5
18466: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
18467: LD_EXP 31
18471: PUSH
18472: LD_EXP 66
18476: AND
18477: IFFALSE 18571
18479: GO 18481
18481: DISABLE
18482: LD_INT 0
18484: PPUSH
18485: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
18486: LD_ADDR_VAR 0 2
18490: PUSH
18491: LD_INT 22
18493: PUSH
18494: LD_OWVAR 2
18498: PUSH
18499: EMPTY
18500: LIST
18501: LIST
18502: PUSH
18503: LD_INT 32
18505: PUSH
18506: LD_INT 1
18508: PUSH
18509: EMPTY
18510: LIST
18511: LIST
18512: PUSH
18513: LD_INT 21
18515: PUSH
18516: LD_INT 2
18518: PUSH
18519: EMPTY
18520: LIST
18521: LIST
18522: PUSH
18523: EMPTY
18524: LIST
18525: LIST
18526: LIST
18527: PPUSH
18528: CALL_OW 69
18532: ST_TO_ADDR
// if not tmp then
18533: LD_VAR 0 2
18537: NOT
18538: IFFALSE 18542
// exit ;
18540: GO 18571
// for i in tmp do
18542: LD_ADDR_VAR 0 1
18546: PUSH
18547: LD_VAR 0 2
18551: PUSH
18552: FOR_IN
18553: IFFALSE 18569
// SetFuel ( i , 0 ) ;
18555: LD_VAR 0 1
18559: PPUSH
18560: LD_INT 0
18562: PPUSH
18563: CALL_OW 240
18567: GO 18552
18569: POP
18570: POP
// end ;
18571: PPOPN 2
18573: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
18574: LD_EXP 31
18578: PUSH
18579: LD_EXP 67
18583: AND
18584: IFFALSE 18650
18586: GO 18588
18588: DISABLE
18589: LD_INT 0
18591: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
18592: LD_ADDR_VAR 0 1
18596: PUSH
18597: LD_INT 22
18599: PUSH
18600: LD_OWVAR 2
18604: PUSH
18605: EMPTY
18606: LIST
18607: LIST
18608: PUSH
18609: LD_INT 30
18611: PUSH
18612: LD_INT 29
18614: PUSH
18615: EMPTY
18616: LIST
18617: LIST
18618: PUSH
18619: EMPTY
18620: LIST
18621: LIST
18622: PPUSH
18623: CALL_OW 69
18627: ST_TO_ADDR
// if not tmp then
18628: LD_VAR 0 1
18632: NOT
18633: IFFALSE 18637
// exit ;
18635: GO 18650
// DestroyUnit ( tmp [ 1 ] ) ;
18637: LD_VAR 0 1
18641: PUSH
18642: LD_INT 1
18644: ARRAY
18645: PPUSH
18646: CALL_OW 65
// end ;
18650: PPOPN 1
18652: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
18653: LD_EXP 31
18657: PUSH
18658: LD_EXP 69
18662: AND
18663: IFFALSE 18792
18665: GO 18667
18667: DISABLE
18668: LD_INT 0
18670: PPUSH
// begin uc_side := 0 ;
18671: LD_ADDR_OWVAR 20
18675: PUSH
18676: LD_INT 0
18678: ST_TO_ADDR
// uc_nation := nation_arabian ;
18679: LD_ADDR_OWVAR 21
18683: PUSH
18684: LD_INT 2
18686: ST_TO_ADDR
// hc_gallery :=  ;
18687: LD_ADDR_OWVAR 33
18691: PUSH
18692: LD_STRING 
18694: ST_TO_ADDR
// hc_name :=  ;
18695: LD_ADDR_OWVAR 26
18699: PUSH
18700: LD_STRING 
18702: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
18703: LD_INT 1
18705: PPUSH
18706: LD_INT 11
18708: PPUSH
18709: LD_INT 10
18711: PPUSH
18712: CALL_OW 380
// un := CreateHuman ;
18716: LD_ADDR_VAR 0 1
18720: PUSH
18721: CALL_OW 44
18725: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
18726: LD_VAR 0 1
18730: PPUSH
18731: LD_INT 1
18733: PPUSH
18734: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
18738: LD_INT 35
18740: PPUSH
18741: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
18745: LD_VAR 0 1
18749: PPUSH
18750: LD_INT 22
18752: PUSH
18753: LD_OWVAR 2
18757: PUSH
18758: EMPTY
18759: LIST
18760: LIST
18761: PPUSH
18762: CALL_OW 69
18766: PPUSH
18767: LD_VAR 0 1
18771: PPUSH
18772: CALL_OW 74
18776: PPUSH
18777: CALL_OW 115
// until IsDead ( un ) ;
18781: LD_VAR 0 1
18785: PPUSH
18786: CALL_OW 301
18790: IFFALSE 18738
// end ;
18792: PPOPN 1
18794: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
18795: LD_EXP 31
18799: PUSH
18800: LD_EXP 71
18804: AND
18805: IFFALSE 18817
18807: GO 18809
18809: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
18810: LD_STRING earthquake(getX(game), 0, 32)
18812: PPUSH
18813: CALL_OW 559
18817: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
18818: LD_EXP 31
18822: PUSH
18823: LD_EXP 72
18827: AND
18828: IFFALSE 18919
18830: GO 18832
18832: DISABLE
18833: LD_INT 0
18835: PPUSH
// begin enable ;
18836: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
18837: LD_ADDR_VAR 0 1
18841: PUSH
18842: LD_INT 22
18844: PUSH
18845: LD_OWVAR 2
18849: PUSH
18850: EMPTY
18851: LIST
18852: LIST
18853: PUSH
18854: LD_INT 21
18856: PUSH
18857: LD_INT 2
18859: PUSH
18860: EMPTY
18861: LIST
18862: LIST
18863: PUSH
18864: LD_INT 33
18866: PUSH
18867: LD_INT 3
18869: PUSH
18870: EMPTY
18871: LIST
18872: LIST
18873: PUSH
18874: EMPTY
18875: LIST
18876: LIST
18877: LIST
18878: PPUSH
18879: CALL_OW 69
18883: ST_TO_ADDR
// if not tmp then
18884: LD_VAR 0 1
18888: NOT
18889: IFFALSE 18893
// exit ;
18891: GO 18919
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
18893: LD_VAR 0 1
18897: PUSH
18898: LD_INT 1
18900: PPUSH
18901: LD_VAR 0 1
18905: PPUSH
18906: CALL_OW 12
18910: ARRAY
18911: PPUSH
18912: LD_INT 1
18914: PPUSH
18915: CALL_OW 234
// end ;
18919: PPOPN 1
18921: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
18922: LD_EXP 31
18926: PUSH
18927: LD_EXP 73
18931: AND
18932: IFFALSE 19073
18934: GO 18936
18936: DISABLE
18937: LD_INT 0
18939: PPUSH
18940: PPUSH
18941: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18942: LD_ADDR_VAR 0 3
18946: PUSH
18947: LD_INT 22
18949: PUSH
18950: LD_OWVAR 2
18954: PUSH
18955: EMPTY
18956: LIST
18957: LIST
18958: PUSH
18959: LD_INT 25
18961: PUSH
18962: LD_INT 1
18964: PUSH
18965: EMPTY
18966: LIST
18967: LIST
18968: PUSH
18969: EMPTY
18970: LIST
18971: LIST
18972: PPUSH
18973: CALL_OW 69
18977: ST_TO_ADDR
// if not tmp then
18978: LD_VAR 0 3
18982: NOT
18983: IFFALSE 18987
// exit ;
18985: GO 19073
// un := tmp [ rand ( 1 , tmp ) ] ;
18987: LD_ADDR_VAR 0 2
18991: PUSH
18992: LD_VAR 0 3
18996: PUSH
18997: LD_INT 1
18999: PPUSH
19000: LD_VAR 0 3
19004: PPUSH
19005: CALL_OW 12
19009: ARRAY
19010: ST_TO_ADDR
// if Crawls ( un ) then
19011: LD_VAR 0 2
19015: PPUSH
19016: CALL_OW 318
19020: IFFALSE 19031
// ComWalk ( un ) ;
19022: LD_VAR 0 2
19026: PPUSH
19027: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
19031: LD_VAR 0 2
19035: PPUSH
19036: LD_INT 9
19038: PPUSH
19039: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
19043: LD_INT 28
19045: PPUSH
19046: LD_OWVAR 2
19050: PPUSH
19051: LD_INT 2
19053: PPUSH
19054: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
19058: LD_INT 29
19060: PPUSH
19061: LD_OWVAR 2
19065: PPUSH
19066: LD_INT 2
19068: PPUSH
19069: CALL_OW 322
// end ;
19073: PPOPN 3
19075: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
19076: LD_EXP 31
19080: PUSH
19081: LD_EXP 74
19085: AND
19086: IFFALSE 19197
19088: GO 19090
19090: DISABLE
19091: LD_INT 0
19093: PPUSH
19094: PPUSH
19095: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
19096: LD_ADDR_VAR 0 3
19100: PUSH
19101: LD_INT 22
19103: PUSH
19104: LD_OWVAR 2
19108: PUSH
19109: EMPTY
19110: LIST
19111: LIST
19112: PUSH
19113: LD_INT 25
19115: PUSH
19116: LD_INT 1
19118: PUSH
19119: EMPTY
19120: LIST
19121: LIST
19122: PUSH
19123: EMPTY
19124: LIST
19125: LIST
19126: PPUSH
19127: CALL_OW 69
19131: ST_TO_ADDR
// if not tmp then
19132: LD_VAR 0 3
19136: NOT
19137: IFFALSE 19141
// exit ;
19139: GO 19197
// un := tmp [ rand ( 1 , tmp ) ] ;
19141: LD_ADDR_VAR 0 2
19145: PUSH
19146: LD_VAR 0 3
19150: PUSH
19151: LD_INT 1
19153: PPUSH
19154: LD_VAR 0 3
19158: PPUSH
19159: CALL_OW 12
19163: ARRAY
19164: ST_TO_ADDR
// if Crawls ( un ) then
19165: LD_VAR 0 2
19169: PPUSH
19170: CALL_OW 318
19174: IFFALSE 19185
// ComWalk ( un ) ;
19176: LD_VAR 0 2
19180: PPUSH
19181: CALL_OW 138
// SetClass ( un , class_mortar ) ;
19185: LD_VAR 0 2
19189: PPUSH
19190: LD_INT 8
19192: PPUSH
19193: CALL_OW 336
// end ;
19197: PPOPN 3
19199: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
19200: LD_EXP 31
19204: PUSH
19205: LD_EXP 75
19209: AND
19210: IFFALSE 19354
19212: GO 19214
19214: DISABLE
19215: LD_INT 0
19217: PPUSH
19218: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
19219: LD_ADDR_VAR 0 2
19223: PUSH
19224: LD_INT 22
19226: PUSH
19227: LD_OWVAR 2
19231: PUSH
19232: EMPTY
19233: LIST
19234: LIST
19235: PUSH
19236: LD_INT 21
19238: PUSH
19239: LD_INT 2
19241: PUSH
19242: EMPTY
19243: LIST
19244: LIST
19245: PUSH
19246: LD_INT 2
19248: PUSH
19249: LD_INT 34
19251: PUSH
19252: LD_INT 12
19254: PUSH
19255: EMPTY
19256: LIST
19257: LIST
19258: PUSH
19259: LD_INT 34
19261: PUSH
19262: LD_INT 51
19264: PUSH
19265: EMPTY
19266: LIST
19267: LIST
19268: PUSH
19269: LD_INT 34
19271: PUSH
19272: LD_INT 32
19274: PUSH
19275: EMPTY
19276: LIST
19277: LIST
19278: PUSH
19279: EMPTY
19280: LIST
19281: LIST
19282: LIST
19283: LIST
19284: PUSH
19285: EMPTY
19286: LIST
19287: LIST
19288: LIST
19289: PPUSH
19290: CALL_OW 69
19294: ST_TO_ADDR
// if not tmp then
19295: LD_VAR 0 2
19299: NOT
19300: IFFALSE 19304
// exit ;
19302: GO 19354
// for i in tmp do
19304: LD_ADDR_VAR 0 1
19308: PUSH
19309: LD_VAR 0 2
19313: PUSH
19314: FOR_IN
19315: IFFALSE 19352
// if GetCargo ( i , mat_artifact ) = 0 then
19317: LD_VAR 0 1
19321: PPUSH
19322: LD_INT 4
19324: PPUSH
19325: CALL_OW 289
19329: PUSH
19330: LD_INT 0
19332: EQUAL
19333: IFFALSE 19350
// SetCargo ( i , mat_siberit , 100 ) ;
19335: LD_VAR 0 1
19339: PPUSH
19340: LD_INT 3
19342: PPUSH
19343: LD_INT 100
19345: PPUSH
19346: CALL_OW 290
19350: GO 19314
19352: POP
19353: POP
// end ;
19354: PPOPN 2
19356: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
19357: LD_EXP 31
19361: PUSH
19362: LD_EXP 76
19366: AND
19367: IFFALSE 19550
19369: GO 19371
19371: DISABLE
19372: LD_INT 0
19374: PPUSH
19375: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
19376: LD_ADDR_VAR 0 2
19380: PUSH
19381: LD_INT 22
19383: PUSH
19384: LD_OWVAR 2
19388: PUSH
19389: EMPTY
19390: LIST
19391: LIST
19392: PPUSH
19393: CALL_OW 69
19397: ST_TO_ADDR
// if not tmp then
19398: LD_VAR 0 2
19402: NOT
19403: IFFALSE 19407
// exit ;
19405: GO 19550
// for i := 1 to 2 do
19407: LD_ADDR_VAR 0 1
19411: PUSH
19412: DOUBLE
19413: LD_INT 1
19415: DEC
19416: ST_TO_ADDR
19417: LD_INT 2
19419: PUSH
19420: FOR_TO
19421: IFFALSE 19548
// begin uc_side := your_side ;
19423: LD_ADDR_OWVAR 20
19427: PUSH
19428: LD_OWVAR 2
19432: ST_TO_ADDR
// uc_nation := nation_american ;
19433: LD_ADDR_OWVAR 21
19437: PUSH
19438: LD_INT 1
19440: ST_TO_ADDR
// vc_chassis := us_morphling ;
19441: LD_ADDR_OWVAR 37
19445: PUSH
19446: LD_INT 5
19448: ST_TO_ADDR
// vc_engine := engine_siberite ;
19449: LD_ADDR_OWVAR 39
19453: PUSH
19454: LD_INT 3
19456: ST_TO_ADDR
// vc_control := control_computer ;
19457: LD_ADDR_OWVAR 38
19461: PUSH
19462: LD_INT 3
19464: ST_TO_ADDR
// vc_weapon := us_double_laser ;
19465: LD_ADDR_OWVAR 40
19469: PUSH
19470: LD_INT 10
19472: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
19473: LD_VAR 0 2
19477: PUSH
19478: LD_INT 1
19480: ARRAY
19481: PPUSH
19482: CALL_OW 310
19486: NOT
19487: IFFALSE 19534
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
19489: CALL_OW 45
19493: PPUSH
19494: LD_VAR 0 2
19498: PUSH
19499: LD_INT 1
19501: ARRAY
19502: PPUSH
19503: CALL_OW 250
19507: PPUSH
19508: LD_VAR 0 2
19512: PUSH
19513: LD_INT 1
19515: ARRAY
19516: PPUSH
19517: CALL_OW 251
19521: PPUSH
19522: LD_INT 12
19524: PPUSH
19525: LD_INT 1
19527: PPUSH
19528: CALL_OW 50
19532: GO 19546
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
19534: CALL_OW 45
19538: PPUSH
19539: LD_INT 1
19541: PPUSH
19542: CALL_OW 51
// end ;
19546: GO 19420
19548: POP
19549: POP
// end ;
19550: PPOPN 2
19552: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
19553: LD_EXP 31
19557: PUSH
19558: LD_EXP 77
19562: AND
19563: IFFALSE 19785
19565: GO 19567
19567: DISABLE
19568: LD_INT 0
19570: PPUSH
19571: PPUSH
19572: PPUSH
19573: PPUSH
19574: PPUSH
19575: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
19576: LD_ADDR_VAR 0 6
19580: PUSH
19581: LD_INT 22
19583: PUSH
19584: LD_OWVAR 2
19588: PUSH
19589: EMPTY
19590: LIST
19591: LIST
19592: PUSH
19593: LD_INT 21
19595: PUSH
19596: LD_INT 1
19598: PUSH
19599: EMPTY
19600: LIST
19601: LIST
19602: PUSH
19603: LD_INT 3
19605: PUSH
19606: LD_INT 23
19608: PUSH
19609: LD_INT 0
19611: PUSH
19612: EMPTY
19613: LIST
19614: LIST
19615: PUSH
19616: EMPTY
19617: LIST
19618: LIST
19619: PUSH
19620: EMPTY
19621: LIST
19622: LIST
19623: LIST
19624: PPUSH
19625: CALL_OW 69
19629: ST_TO_ADDR
// if not tmp then
19630: LD_VAR 0 6
19634: NOT
19635: IFFALSE 19639
// exit ;
19637: GO 19785
// s1 := rand ( 1 , 4 ) ;
19639: LD_ADDR_VAR 0 2
19643: PUSH
19644: LD_INT 1
19646: PPUSH
19647: LD_INT 4
19649: PPUSH
19650: CALL_OW 12
19654: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
19655: LD_ADDR_VAR 0 4
19659: PUSH
19660: LD_VAR 0 6
19664: PUSH
19665: LD_INT 1
19667: ARRAY
19668: PPUSH
19669: LD_VAR 0 2
19673: PPUSH
19674: CALL_OW 259
19678: ST_TO_ADDR
// if s1 = 1 then
19679: LD_VAR 0 2
19683: PUSH
19684: LD_INT 1
19686: EQUAL
19687: IFFALSE 19707
// s2 := rand ( 2 , 4 ) else
19689: LD_ADDR_VAR 0 3
19693: PUSH
19694: LD_INT 2
19696: PPUSH
19697: LD_INT 4
19699: PPUSH
19700: CALL_OW 12
19704: ST_TO_ADDR
19705: GO 19715
// s2 := 1 ;
19707: LD_ADDR_VAR 0 3
19711: PUSH
19712: LD_INT 1
19714: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
19715: LD_ADDR_VAR 0 5
19719: PUSH
19720: LD_VAR 0 6
19724: PUSH
19725: LD_INT 1
19727: ARRAY
19728: PPUSH
19729: LD_VAR 0 3
19733: PPUSH
19734: CALL_OW 259
19738: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
19739: LD_VAR 0 6
19743: PUSH
19744: LD_INT 1
19746: ARRAY
19747: PPUSH
19748: LD_VAR 0 2
19752: PPUSH
19753: LD_VAR 0 5
19757: PPUSH
19758: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
19762: LD_VAR 0 6
19766: PUSH
19767: LD_INT 1
19769: ARRAY
19770: PPUSH
19771: LD_VAR 0 3
19775: PPUSH
19776: LD_VAR 0 4
19780: PPUSH
19781: CALL_OW 237
// end ;
19785: PPOPN 6
19787: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
19788: LD_EXP 31
19792: PUSH
19793: LD_EXP 78
19797: AND
19798: IFFALSE 19877
19800: GO 19802
19802: DISABLE
19803: LD_INT 0
19805: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
19806: LD_ADDR_VAR 0 1
19810: PUSH
19811: LD_INT 22
19813: PUSH
19814: LD_OWVAR 2
19818: PUSH
19819: EMPTY
19820: LIST
19821: LIST
19822: PUSH
19823: LD_INT 30
19825: PUSH
19826: LD_INT 3
19828: PUSH
19829: EMPTY
19830: LIST
19831: LIST
19832: PUSH
19833: EMPTY
19834: LIST
19835: LIST
19836: PPUSH
19837: CALL_OW 69
19841: ST_TO_ADDR
// if not tmp then
19842: LD_VAR 0 1
19846: NOT
19847: IFFALSE 19851
// exit ;
19849: GO 19877
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
19851: LD_VAR 0 1
19855: PUSH
19856: LD_INT 1
19858: PPUSH
19859: LD_VAR 0 1
19863: PPUSH
19864: CALL_OW 12
19868: ARRAY
19869: PPUSH
19870: LD_INT 1
19872: PPUSH
19873: CALL_OW 234
// end ;
19877: PPOPN 1
19879: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
19880: LD_EXP 31
19884: PUSH
19885: LD_EXP 79
19889: AND
19890: IFFALSE 20002
19892: GO 19894
19894: DISABLE
19895: LD_INT 0
19897: PPUSH
19898: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
19899: LD_ADDR_VAR 0 2
19903: PUSH
19904: LD_INT 22
19906: PUSH
19907: LD_OWVAR 2
19911: PUSH
19912: EMPTY
19913: LIST
19914: LIST
19915: PUSH
19916: LD_INT 2
19918: PUSH
19919: LD_INT 30
19921: PUSH
19922: LD_INT 27
19924: PUSH
19925: EMPTY
19926: LIST
19927: LIST
19928: PUSH
19929: LD_INT 30
19931: PUSH
19932: LD_INT 26
19934: PUSH
19935: EMPTY
19936: LIST
19937: LIST
19938: PUSH
19939: LD_INT 30
19941: PUSH
19942: LD_INT 28
19944: PUSH
19945: EMPTY
19946: LIST
19947: LIST
19948: PUSH
19949: EMPTY
19950: LIST
19951: LIST
19952: LIST
19953: LIST
19954: PUSH
19955: EMPTY
19956: LIST
19957: LIST
19958: PPUSH
19959: CALL_OW 69
19963: ST_TO_ADDR
// if not tmp then
19964: LD_VAR 0 2
19968: NOT
19969: IFFALSE 19973
// exit ;
19971: GO 20002
// for i in tmp do
19973: LD_ADDR_VAR 0 1
19977: PUSH
19978: LD_VAR 0 2
19982: PUSH
19983: FOR_IN
19984: IFFALSE 20000
// SetLives ( i , 1 ) ;
19986: LD_VAR 0 1
19990: PPUSH
19991: LD_INT 1
19993: PPUSH
19994: CALL_OW 234
19998: GO 19983
20000: POP
20001: POP
// end ;
20002: PPOPN 2
20004: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
20005: LD_EXP 31
20009: PUSH
20010: LD_EXP 80
20014: AND
20015: IFFALSE 20302
20017: GO 20019
20019: DISABLE
20020: LD_INT 0
20022: PPUSH
20023: PPUSH
20024: PPUSH
// begin i := rand ( 1 , 7 ) ;
20025: LD_ADDR_VAR 0 1
20029: PUSH
20030: LD_INT 1
20032: PPUSH
20033: LD_INT 7
20035: PPUSH
20036: CALL_OW 12
20040: ST_TO_ADDR
// case i of 1 :
20041: LD_VAR 0 1
20045: PUSH
20046: LD_INT 1
20048: DOUBLE
20049: EQUAL
20050: IFTRUE 20054
20052: GO 20064
20054: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
20055: LD_STRING earthquake(getX(game), 0, 32)
20057: PPUSH
20058: CALL_OW 559
20062: GO 20302
20064: LD_INT 2
20066: DOUBLE
20067: EQUAL
20068: IFTRUE 20072
20070: GO 20086
20072: POP
// begin ToLua ( displayStucuk(); ) ;
20073: LD_STRING displayStucuk();
20075: PPUSH
20076: CALL_OW 559
// ResetFog ;
20080: CALL_OW 335
// end ; 3 :
20084: GO 20302
20086: LD_INT 3
20088: DOUBLE
20089: EQUAL
20090: IFTRUE 20094
20092: GO 20198
20094: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
20095: LD_ADDR_VAR 0 2
20099: PUSH
20100: LD_INT 22
20102: PUSH
20103: LD_OWVAR 2
20107: PUSH
20108: EMPTY
20109: LIST
20110: LIST
20111: PUSH
20112: LD_INT 25
20114: PUSH
20115: LD_INT 1
20117: PUSH
20118: EMPTY
20119: LIST
20120: LIST
20121: PUSH
20122: EMPTY
20123: LIST
20124: LIST
20125: PPUSH
20126: CALL_OW 69
20130: ST_TO_ADDR
// if not tmp then
20131: LD_VAR 0 2
20135: NOT
20136: IFFALSE 20140
// exit ;
20138: GO 20302
// un := tmp [ rand ( 1 , tmp ) ] ;
20140: LD_ADDR_VAR 0 3
20144: PUSH
20145: LD_VAR 0 2
20149: PUSH
20150: LD_INT 1
20152: PPUSH
20153: LD_VAR 0 2
20157: PPUSH
20158: CALL_OW 12
20162: ARRAY
20163: ST_TO_ADDR
// if Crawls ( un ) then
20164: LD_VAR 0 3
20168: PPUSH
20169: CALL_OW 318
20173: IFFALSE 20184
// ComWalk ( un ) ;
20175: LD_VAR 0 3
20179: PPUSH
20180: CALL_OW 138
// SetClass ( un , class_mortar ) ;
20184: LD_VAR 0 3
20188: PPUSH
20189: LD_INT 8
20191: PPUSH
20192: CALL_OW 336
// end ; 4 :
20196: GO 20302
20198: LD_INT 4
20200: DOUBLE
20201: EQUAL
20202: IFTRUE 20206
20204: GO 20280
20206: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
20207: LD_ADDR_VAR 0 2
20211: PUSH
20212: LD_INT 22
20214: PUSH
20215: LD_OWVAR 2
20219: PUSH
20220: EMPTY
20221: LIST
20222: LIST
20223: PUSH
20224: LD_INT 30
20226: PUSH
20227: LD_INT 29
20229: PUSH
20230: EMPTY
20231: LIST
20232: LIST
20233: PUSH
20234: EMPTY
20235: LIST
20236: LIST
20237: PPUSH
20238: CALL_OW 69
20242: ST_TO_ADDR
// if not tmp then
20243: LD_VAR 0 2
20247: NOT
20248: IFFALSE 20252
// exit ;
20250: GO 20302
// CenterNowOnUnits ( tmp [ 1 ] ) ;
20252: LD_VAR 0 2
20256: PUSH
20257: LD_INT 1
20259: ARRAY
20260: PPUSH
20261: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
20265: LD_VAR 0 2
20269: PUSH
20270: LD_INT 1
20272: ARRAY
20273: PPUSH
20274: CALL_OW 65
// end ; 5 .. 7 :
20278: GO 20302
20280: LD_INT 5
20282: DOUBLE
20283: GREATEREQUAL
20284: IFFALSE 20292
20286: LD_INT 7
20288: DOUBLE
20289: LESSEQUAL
20290: IFTRUE 20294
20292: GO 20301
20294: POP
// StreamSibBomb ; end ;
20295: CALL 16539 0 0
20299: GO 20302
20301: POP
// end ;
20302: PPOPN 3
20304: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
20305: LD_EXP 31
20309: PUSH
20310: LD_EXP 81
20314: AND
20315: IFFALSE 20471
20317: GO 20319
20319: DISABLE
20320: LD_INT 0
20322: PPUSH
20323: PPUSH
20324: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
20325: LD_ADDR_VAR 0 2
20329: PUSH
20330: LD_INT 81
20332: PUSH
20333: LD_OWVAR 2
20337: PUSH
20338: EMPTY
20339: LIST
20340: LIST
20341: PUSH
20342: LD_INT 2
20344: PUSH
20345: LD_INT 21
20347: PUSH
20348: LD_INT 1
20350: PUSH
20351: EMPTY
20352: LIST
20353: LIST
20354: PUSH
20355: LD_INT 21
20357: PUSH
20358: LD_INT 2
20360: PUSH
20361: EMPTY
20362: LIST
20363: LIST
20364: PUSH
20365: EMPTY
20366: LIST
20367: LIST
20368: LIST
20369: PUSH
20370: EMPTY
20371: LIST
20372: LIST
20373: PPUSH
20374: CALL_OW 69
20378: ST_TO_ADDR
// if not tmp then
20379: LD_VAR 0 2
20383: NOT
20384: IFFALSE 20388
// exit ;
20386: GO 20471
// p := 0 ;
20388: LD_ADDR_VAR 0 3
20392: PUSH
20393: LD_INT 0
20395: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
20396: LD_INT 35
20398: PPUSH
20399: CALL_OW 67
// p := p + 1 ;
20403: LD_ADDR_VAR 0 3
20407: PUSH
20408: LD_VAR 0 3
20412: PUSH
20413: LD_INT 1
20415: PLUS
20416: ST_TO_ADDR
// for i in tmp do
20417: LD_ADDR_VAR 0 1
20421: PUSH
20422: LD_VAR 0 2
20426: PUSH
20427: FOR_IN
20428: IFFALSE 20459
// if GetLives ( i ) < 1000 then
20430: LD_VAR 0 1
20434: PPUSH
20435: CALL_OW 256
20439: PUSH
20440: LD_INT 1000
20442: LESS
20443: IFFALSE 20457
// SetLives ( i , 1000 ) ;
20445: LD_VAR 0 1
20449: PPUSH
20450: LD_INT 1000
20452: PPUSH
20453: CALL_OW 234
20457: GO 20427
20459: POP
20460: POP
// until p > 20 ;
20461: LD_VAR 0 3
20465: PUSH
20466: LD_INT 20
20468: GREATER
20469: IFFALSE 20396
// end ;
20471: PPOPN 3
20473: END
// every 0 0$1 trigger StreamModeActive and sTime do
20474: LD_EXP 31
20478: PUSH
20479: LD_EXP 82
20483: AND
20484: IFFALSE 20519
20486: GO 20488
20488: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
20489: LD_INT 28
20491: PPUSH
20492: LD_OWVAR 2
20496: PPUSH
20497: LD_INT 2
20499: PPUSH
20500: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
20504: LD_INT 30
20506: PPUSH
20507: LD_OWVAR 2
20511: PPUSH
20512: LD_INT 2
20514: PPUSH
20515: CALL_OW 322
// end ;
20519: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
20520: LD_EXP 31
20524: PUSH
20525: LD_EXP 83
20529: AND
20530: IFFALSE 20651
20532: GO 20534
20534: DISABLE
20535: LD_INT 0
20537: PPUSH
20538: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
20539: LD_ADDR_VAR 0 2
20543: PUSH
20544: LD_INT 22
20546: PUSH
20547: LD_OWVAR 2
20551: PUSH
20552: EMPTY
20553: LIST
20554: LIST
20555: PUSH
20556: LD_INT 21
20558: PUSH
20559: LD_INT 1
20561: PUSH
20562: EMPTY
20563: LIST
20564: LIST
20565: PUSH
20566: LD_INT 3
20568: PUSH
20569: LD_INT 23
20571: PUSH
20572: LD_INT 0
20574: PUSH
20575: EMPTY
20576: LIST
20577: LIST
20578: PUSH
20579: EMPTY
20580: LIST
20581: LIST
20582: PUSH
20583: EMPTY
20584: LIST
20585: LIST
20586: LIST
20587: PPUSH
20588: CALL_OW 69
20592: ST_TO_ADDR
// if not tmp then
20593: LD_VAR 0 2
20597: NOT
20598: IFFALSE 20602
// exit ;
20600: GO 20651
// for i in tmp do
20602: LD_ADDR_VAR 0 1
20606: PUSH
20607: LD_VAR 0 2
20611: PUSH
20612: FOR_IN
20613: IFFALSE 20649
// begin if Crawls ( i ) then
20615: LD_VAR 0 1
20619: PPUSH
20620: CALL_OW 318
20624: IFFALSE 20635
// ComWalk ( i ) ;
20626: LD_VAR 0 1
20630: PPUSH
20631: CALL_OW 138
// SetClass ( i , 2 ) ;
20635: LD_VAR 0 1
20639: PPUSH
20640: LD_INT 2
20642: PPUSH
20643: CALL_OW 336
// end ;
20647: GO 20612
20649: POP
20650: POP
// end ;
20651: PPOPN 2
20653: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
20654: LD_EXP 31
20658: PUSH
20659: LD_EXP 84
20663: AND
20664: IFFALSE 20952
20666: GO 20668
20668: DISABLE
20669: LD_INT 0
20671: PPUSH
20672: PPUSH
20673: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
20674: LD_OWVAR 2
20678: PPUSH
20679: LD_INT 9
20681: PPUSH
20682: LD_INT 1
20684: PPUSH
20685: LD_INT 1
20687: PPUSH
20688: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
20692: LD_INT 9
20694: PPUSH
20695: LD_OWVAR 2
20699: PPUSH
20700: CALL_OW 343
// uc_side := 9 ;
20704: LD_ADDR_OWVAR 20
20708: PUSH
20709: LD_INT 9
20711: ST_TO_ADDR
// uc_nation := 2 ;
20712: LD_ADDR_OWVAR 21
20716: PUSH
20717: LD_INT 2
20719: ST_TO_ADDR
// hc_name := Dark Warrior ;
20720: LD_ADDR_OWVAR 26
20724: PUSH
20725: LD_STRING Dark Warrior
20727: ST_TO_ADDR
// hc_gallery :=  ;
20728: LD_ADDR_OWVAR 33
20732: PUSH
20733: LD_STRING 
20735: ST_TO_ADDR
// hc_noskilllimit := true ;
20736: LD_ADDR_OWVAR 76
20740: PUSH
20741: LD_INT 1
20743: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
20744: LD_ADDR_OWVAR 31
20748: PUSH
20749: LD_INT 30
20751: PUSH
20752: LD_INT 30
20754: PUSH
20755: LD_INT 30
20757: PUSH
20758: LD_INT 30
20760: PUSH
20761: EMPTY
20762: LIST
20763: LIST
20764: LIST
20765: LIST
20766: ST_TO_ADDR
// un := CreateHuman ;
20767: LD_ADDR_VAR 0 3
20771: PUSH
20772: CALL_OW 44
20776: ST_TO_ADDR
// hc_noskilllimit := false ;
20777: LD_ADDR_OWVAR 76
20781: PUSH
20782: LD_INT 0
20784: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
20785: LD_VAR 0 3
20789: PPUSH
20790: LD_INT 1
20792: PPUSH
20793: CALL_OW 51
// ToLua ( playRanger() ) ;
20797: LD_STRING playRanger()
20799: PPUSH
20800: CALL_OW 559
// p := 0 ;
20804: LD_ADDR_VAR 0 2
20808: PUSH
20809: LD_INT 0
20811: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
20812: LD_INT 35
20814: PPUSH
20815: CALL_OW 67
// p := p + 1 ;
20819: LD_ADDR_VAR 0 2
20823: PUSH
20824: LD_VAR 0 2
20828: PUSH
20829: LD_INT 1
20831: PLUS
20832: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
20833: LD_VAR 0 3
20837: PPUSH
20838: CALL_OW 256
20842: PUSH
20843: LD_INT 1000
20845: LESS
20846: IFFALSE 20860
// SetLives ( un , 1000 ) ;
20848: LD_VAR 0 3
20852: PPUSH
20853: LD_INT 1000
20855: PPUSH
20856: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
20860: LD_VAR 0 3
20864: PPUSH
20865: LD_INT 81
20867: PUSH
20868: LD_OWVAR 2
20872: PUSH
20873: EMPTY
20874: LIST
20875: LIST
20876: PUSH
20877: LD_INT 91
20879: PUSH
20880: LD_VAR 0 3
20884: PUSH
20885: LD_INT 30
20887: PUSH
20888: EMPTY
20889: LIST
20890: LIST
20891: LIST
20892: PUSH
20893: EMPTY
20894: LIST
20895: LIST
20896: PPUSH
20897: CALL_OW 69
20901: PPUSH
20902: LD_VAR 0 3
20906: PPUSH
20907: CALL_OW 74
20911: PPUSH
20912: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
20916: LD_VAR 0 2
20920: PUSH
20921: LD_INT 80
20923: GREATER
20924: PUSH
20925: LD_VAR 0 3
20929: PPUSH
20930: CALL_OW 301
20934: OR
20935: IFFALSE 20812
// if un then
20937: LD_VAR 0 3
20941: IFFALSE 20952
// RemoveUnit ( un ) ;
20943: LD_VAR 0 3
20947: PPUSH
20948: CALL_OW 64
// end ;
20952: PPOPN 3
20954: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
20955: LD_EXP 85
20959: IFFALSE 21075
20961: GO 20963
20963: DISABLE
20964: LD_INT 0
20966: PPUSH
20967: PPUSH
20968: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
20969: LD_ADDR_VAR 0 2
20973: PUSH
20974: LD_INT 81
20976: PUSH
20977: LD_OWVAR 2
20981: PUSH
20982: EMPTY
20983: LIST
20984: LIST
20985: PUSH
20986: LD_INT 21
20988: PUSH
20989: LD_INT 1
20991: PUSH
20992: EMPTY
20993: LIST
20994: LIST
20995: PUSH
20996: EMPTY
20997: LIST
20998: LIST
20999: PPUSH
21000: CALL_OW 69
21004: ST_TO_ADDR
// ToLua ( playComputer() ) ;
21005: LD_STRING playComputer()
21007: PPUSH
21008: CALL_OW 559
// if not tmp then
21012: LD_VAR 0 2
21016: NOT
21017: IFFALSE 21021
// exit ;
21019: GO 21075
// for i in tmp do
21021: LD_ADDR_VAR 0 1
21025: PUSH
21026: LD_VAR 0 2
21030: PUSH
21031: FOR_IN
21032: IFFALSE 21073
// for j := 1 to 4 do
21034: LD_ADDR_VAR 0 3
21038: PUSH
21039: DOUBLE
21040: LD_INT 1
21042: DEC
21043: ST_TO_ADDR
21044: LD_INT 4
21046: PUSH
21047: FOR_TO
21048: IFFALSE 21069
// SetSkill ( i , j , 10 ) ;
21050: LD_VAR 0 1
21054: PPUSH
21055: LD_VAR 0 3
21059: PPUSH
21060: LD_INT 10
21062: PPUSH
21063: CALL_OW 237
21067: GO 21047
21069: POP
21070: POP
21071: GO 21031
21073: POP
21074: POP
// end ;
21075: PPOPN 3
21077: END
// every 0 0$1 trigger s30 do var i , tmp ;
21078: LD_EXP 86
21082: IFFALSE 21151
21084: GO 21086
21086: DISABLE
21087: LD_INT 0
21089: PPUSH
21090: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
21091: LD_ADDR_VAR 0 2
21095: PUSH
21096: LD_INT 22
21098: PUSH
21099: LD_OWVAR 2
21103: PUSH
21104: EMPTY
21105: LIST
21106: LIST
21107: PPUSH
21108: CALL_OW 69
21112: ST_TO_ADDR
// if not tmp then
21113: LD_VAR 0 2
21117: NOT
21118: IFFALSE 21122
// exit ;
21120: GO 21151
// for i in tmp do
21122: LD_ADDR_VAR 0 1
21126: PUSH
21127: LD_VAR 0 2
21131: PUSH
21132: FOR_IN
21133: IFFALSE 21149
// SetLives ( i , 300 ) ;
21135: LD_VAR 0 1
21139: PPUSH
21140: LD_INT 300
21142: PPUSH
21143: CALL_OW 234
21147: GO 21132
21149: POP
21150: POP
// end ;
21151: PPOPN 2
21153: END
// every 0 0$1 trigger s60 do var i , tmp ;
21154: LD_EXP 87
21158: IFFALSE 21227
21160: GO 21162
21162: DISABLE
21163: LD_INT 0
21165: PPUSH
21166: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
21167: LD_ADDR_VAR 0 2
21171: PUSH
21172: LD_INT 22
21174: PUSH
21175: LD_OWVAR 2
21179: PUSH
21180: EMPTY
21181: LIST
21182: LIST
21183: PPUSH
21184: CALL_OW 69
21188: ST_TO_ADDR
// if not tmp then
21189: LD_VAR 0 2
21193: NOT
21194: IFFALSE 21198
// exit ;
21196: GO 21227
// for i in tmp do
21198: LD_ADDR_VAR 0 1
21202: PUSH
21203: LD_VAR 0 2
21207: PUSH
21208: FOR_IN
21209: IFFALSE 21225
// SetLives ( i , 600 ) ;
21211: LD_VAR 0 1
21215: PPUSH
21216: LD_INT 600
21218: PPUSH
21219: CALL_OW 234
21223: GO 21208
21225: POP
21226: POP
// end ;
21227: PPOPN 2
21229: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
21230: LD_INT 0
21232: PPUSH
// case cmd of 301 :
21233: LD_VAR 0 1
21237: PUSH
21238: LD_INT 301
21240: DOUBLE
21241: EQUAL
21242: IFTRUE 21246
21244: GO 21278
21246: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
21247: LD_VAR 0 6
21251: PPUSH
21252: LD_VAR 0 7
21256: PPUSH
21257: LD_VAR 0 8
21261: PPUSH
21262: LD_VAR 0 4
21266: PPUSH
21267: LD_VAR 0 5
21271: PPUSH
21272: CALL 22479 0 5
21276: GO 21399
21278: LD_INT 302
21280: DOUBLE
21281: EQUAL
21282: IFTRUE 21286
21284: GO 21323
21286: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
21287: LD_VAR 0 6
21291: PPUSH
21292: LD_VAR 0 7
21296: PPUSH
21297: LD_VAR 0 8
21301: PPUSH
21302: LD_VAR 0 9
21306: PPUSH
21307: LD_VAR 0 4
21311: PPUSH
21312: LD_VAR 0 5
21316: PPUSH
21317: CALL 22570 0 6
21321: GO 21399
21323: LD_INT 303
21325: DOUBLE
21326: EQUAL
21327: IFTRUE 21331
21329: GO 21368
21331: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
21332: LD_VAR 0 6
21336: PPUSH
21337: LD_VAR 0 7
21341: PPUSH
21342: LD_VAR 0 8
21346: PPUSH
21347: LD_VAR 0 9
21351: PPUSH
21352: LD_VAR 0 4
21356: PPUSH
21357: LD_VAR 0 5
21361: PPUSH
21362: CALL 21404 0 6
21366: GO 21399
21368: LD_INT 304
21370: DOUBLE
21371: EQUAL
21372: IFTRUE 21376
21374: GO 21398
21376: POP
// hHackTeleport ( unit , x , y ) ; end ;
21377: LD_VAR 0 2
21381: PPUSH
21382: LD_VAR 0 4
21386: PPUSH
21387: LD_VAR 0 5
21391: PPUSH
21392: CALL 23163 0 3
21396: GO 21399
21398: POP
// end ;
21399: LD_VAR 0 12
21403: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
21404: LD_INT 0
21406: PPUSH
21407: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
21408: LD_VAR 0 1
21412: PUSH
21413: LD_INT 1
21415: LESS
21416: PUSH
21417: LD_VAR 0 1
21421: PUSH
21422: LD_INT 3
21424: GREATER
21425: OR
21426: PUSH
21427: LD_VAR 0 5
21431: PPUSH
21432: LD_VAR 0 6
21436: PPUSH
21437: CALL_OW 428
21441: OR
21442: IFFALSE 21446
// exit ;
21444: GO 22166
// uc_side := your_side ;
21446: LD_ADDR_OWVAR 20
21450: PUSH
21451: LD_OWVAR 2
21455: ST_TO_ADDR
// uc_nation := nation ;
21456: LD_ADDR_OWVAR 21
21460: PUSH
21461: LD_VAR 0 1
21465: ST_TO_ADDR
// bc_level = 1 ;
21466: LD_ADDR_OWVAR 43
21470: PUSH
21471: LD_INT 1
21473: ST_TO_ADDR
// case btype of 1 :
21474: LD_VAR 0 2
21478: PUSH
21479: LD_INT 1
21481: DOUBLE
21482: EQUAL
21483: IFTRUE 21487
21485: GO 21498
21487: POP
// bc_type := b_depot ; 2 :
21488: LD_ADDR_OWVAR 42
21492: PUSH
21493: LD_INT 0
21495: ST_TO_ADDR
21496: GO 22110
21498: LD_INT 2
21500: DOUBLE
21501: EQUAL
21502: IFTRUE 21506
21504: GO 21517
21506: POP
// bc_type := b_warehouse ; 3 :
21507: LD_ADDR_OWVAR 42
21511: PUSH
21512: LD_INT 1
21514: ST_TO_ADDR
21515: GO 22110
21517: LD_INT 3
21519: DOUBLE
21520: EQUAL
21521: IFTRUE 21525
21523: GO 21536
21525: POP
// bc_type := b_lab ; 4 .. 9 :
21526: LD_ADDR_OWVAR 42
21530: PUSH
21531: LD_INT 6
21533: ST_TO_ADDR
21534: GO 22110
21536: LD_INT 4
21538: DOUBLE
21539: GREATEREQUAL
21540: IFFALSE 21548
21542: LD_INT 9
21544: DOUBLE
21545: LESSEQUAL
21546: IFTRUE 21550
21548: GO 21602
21550: POP
// begin bc_type := b_lab_half ;
21551: LD_ADDR_OWVAR 42
21555: PUSH
21556: LD_INT 7
21558: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
21559: LD_ADDR_OWVAR 44
21563: PUSH
21564: LD_INT 10
21566: PUSH
21567: LD_INT 11
21569: PUSH
21570: LD_INT 12
21572: PUSH
21573: LD_INT 15
21575: PUSH
21576: LD_INT 14
21578: PUSH
21579: LD_INT 13
21581: PUSH
21582: EMPTY
21583: LIST
21584: LIST
21585: LIST
21586: LIST
21587: LIST
21588: LIST
21589: PUSH
21590: LD_VAR 0 2
21594: PUSH
21595: LD_INT 3
21597: MINUS
21598: ARRAY
21599: ST_TO_ADDR
// end ; 10 .. 13 :
21600: GO 22110
21602: LD_INT 10
21604: DOUBLE
21605: GREATEREQUAL
21606: IFFALSE 21614
21608: LD_INT 13
21610: DOUBLE
21611: LESSEQUAL
21612: IFTRUE 21616
21614: GO 21693
21616: POP
// begin bc_type := b_lab_full ;
21617: LD_ADDR_OWVAR 42
21621: PUSH
21622: LD_INT 8
21624: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
21625: LD_ADDR_OWVAR 44
21629: PUSH
21630: LD_INT 10
21632: PUSH
21633: LD_INT 12
21635: PUSH
21636: LD_INT 14
21638: PUSH
21639: LD_INT 13
21641: PUSH
21642: EMPTY
21643: LIST
21644: LIST
21645: LIST
21646: LIST
21647: PUSH
21648: LD_VAR 0 2
21652: PUSH
21653: LD_INT 9
21655: MINUS
21656: ARRAY
21657: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
21658: LD_ADDR_OWVAR 45
21662: PUSH
21663: LD_INT 11
21665: PUSH
21666: LD_INT 15
21668: PUSH
21669: LD_INT 12
21671: PUSH
21672: LD_INT 15
21674: PUSH
21675: EMPTY
21676: LIST
21677: LIST
21678: LIST
21679: LIST
21680: PUSH
21681: LD_VAR 0 2
21685: PUSH
21686: LD_INT 9
21688: MINUS
21689: ARRAY
21690: ST_TO_ADDR
// end ; 14 :
21691: GO 22110
21693: LD_INT 14
21695: DOUBLE
21696: EQUAL
21697: IFTRUE 21701
21699: GO 21712
21701: POP
// bc_type := b_workshop ; 15 :
21702: LD_ADDR_OWVAR 42
21706: PUSH
21707: LD_INT 2
21709: ST_TO_ADDR
21710: GO 22110
21712: LD_INT 15
21714: DOUBLE
21715: EQUAL
21716: IFTRUE 21720
21718: GO 21731
21720: POP
// bc_type := b_factory ; 16 :
21721: LD_ADDR_OWVAR 42
21725: PUSH
21726: LD_INT 3
21728: ST_TO_ADDR
21729: GO 22110
21731: LD_INT 16
21733: DOUBLE
21734: EQUAL
21735: IFTRUE 21739
21737: GO 21750
21739: POP
// bc_type := b_ext_gun ; 17 :
21740: LD_ADDR_OWVAR 42
21744: PUSH
21745: LD_INT 17
21747: ST_TO_ADDR
21748: GO 22110
21750: LD_INT 17
21752: DOUBLE
21753: EQUAL
21754: IFTRUE 21758
21756: GO 21786
21758: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
21759: LD_ADDR_OWVAR 42
21763: PUSH
21764: LD_INT 19
21766: PUSH
21767: LD_INT 23
21769: PUSH
21770: LD_INT 19
21772: PUSH
21773: EMPTY
21774: LIST
21775: LIST
21776: LIST
21777: PUSH
21778: LD_VAR 0 1
21782: ARRAY
21783: ST_TO_ADDR
21784: GO 22110
21786: LD_INT 18
21788: DOUBLE
21789: EQUAL
21790: IFTRUE 21794
21792: GO 21805
21794: POP
// bc_type := b_ext_radar ; 19 :
21795: LD_ADDR_OWVAR 42
21799: PUSH
21800: LD_INT 20
21802: ST_TO_ADDR
21803: GO 22110
21805: LD_INT 19
21807: DOUBLE
21808: EQUAL
21809: IFTRUE 21813
21811: GO 21824
21813: POP
// bc_type := b_ext_radio ; 20 :
21814: LD_ADDR_OWVAR 42
21818: PUSH
21819: LD_INT 22
21821: ST_TO_ADDR
21822: GO 22110
21824: LD_INT 20
21826: DOUBLE
21827: EQUAL
21828: IFTRUE 21832
21830: GO 21843
21832: POP
// bc_type := b_ext_siberium ; 21 :
21833: LD_ADDR_OWVAR 42
21837: PUSH
21838: LD_INT 21
21840: ST_TO_ADDR
21841: GO 22110
21843: LD_INT 21
21845: DOUBLE
21846: EQUAL
21847: IFTRUE 21851
21849: GO 21862
21851: POP
// bc_type := b_ext_computer ; 22 :
21852: LD_ADDR_OWVAR 42
21856: PUSH
21857: LD_INT 24
21859: ST_TO_ADDR
21860: GO 22110
21862: LD_INT 22
21864: DOUBLE
21865: EQUAL
21866: IFTRUE 21870
21868: GO 21881
21870: POP
// bc_type := b_ext_track ; 23 :
21871: LD_ADDR_OWVAR 42
21875: PUSH
21876: LD_INT 16
21878: ST_TO_ADDR
21879: GO 22110
21881: LD_INT 23
21883: DOUBLE
21884: EQUAL
21885: IFTRUE 21889
21887: GO 21900
21889: POP
// bc_type := b_ext_laser ; 24 :
21890: LD_ADDR_OWVAR 42
21894: PUSH
21895: LD_INT 25
21897: ST_TO_ADDR
21898: GO 22110
21900: LD_INT 24
21902: DOUBLE
21903: EQUAL
21904: IFTRUE 21908
21906: GO 21919
21908: POP
// bc_type := b_control_tower ; 25 :
21909: LD_ADDR_OWVAR 42
21913: PUSH
21914: LD_INT 36
21916: ST_TO_ADDR
21917: GO 22110
21919: LD_INT 25
21921: DOUBLE
21922: EQUAL
21923: IFTRUE 21927
21925: GO 21938
21927: POP
// bc_type := b_breastwork ; 26 :
21928: LD_ADDR_OWVAR 42
21932: PUSH
21933: LD_INT 31
21935: ST_TO_ADDR
21936: GO 22110
21938: LD_INT 26
21940: DOUBLE
21941: EQUAL
21942: IFTRUE 21946
21944: GO 21957
21946: POP
// bc_type := b_bunker ; 27 :
21947: LD_ADDR_OWVAR 42
21951: PUSH
21952: LD_INT 32
21954: ST_TO_ADDR
21955: GO 22110
21957: LD_INT 27
21959: DOUBLE
21960: EQUAL
21961: IFTRUE 21965
21963: GO 21976
21965: POP
// bc_type := b_turret ; 28 :
21966: LD_ADDR_OWVAR 42
21970: PUSH
21971: LD_INT 33
21973: ST_TO_ADDR
21974: GO 22110
21976: LD_INT 28
21978: DOUBLE
21979: EQUAL
21980: IFTRUE 21984
21982: GO 21995
21984: POP
// bc_type := b_armoury ; 29 :
21985: LD_ADDR_OWVAR 42
21989: PUSH
21990: LD_INT 4
21992: ST_TO_ADDR
21993: GO 22110
21995: LD_INT 29
21997: DOUBLE
21998: EQUAL
21999: IFTRUE 22003
22001: GO 22014
22003: POP
// bc_type := b_barracks ; 30 :
22004: LD_ADDR_OWVAR 42
22008: PUSH
22009: LD_INT 5
22011: ST_TO_ADDR
22012: GO 22110
22014: LD_INT 30
22016: DOUBLE
22017: EQUAL
22018: IFTRUE 22022
22020: GO 22033
22022: POP
// bc_type := b_solar_power ; 31 :
22023: LD_ADDR_OWVAR 42
22027: PUSH
22028: LD_INT 27
22030: ST_TO_ADDR
22031: GO 22110
22033: LD_INT 31
22035: DOUBLE
22036: EQUAL
22037: IFTRUE 22041
22039: GO 22052
22041: POP
// bc_type := b_oil_power ; 32 :
22042: LD_ADDR_OWVAR 42
22046: PUSH
22047: LD_INT 26
22049: ST_TO_ADDR
22050: GO 22110
22052: LD_INT 32
22054: DOUBLE
22055: EQUAL
22056: IFTRUE 22060
22058: GO 22071
22060: POP
// bc_type := b_siberite_power ; 33 :
22061: LD_ADDR_OWVAR 42
22065: PUSH
22066: LD_INT 28
22068: ST_TO_ADDR
22069: GO 22110
22071: LD_INT 33
22073: DOUBLE
22074: EQUAL
22075: IFTRUE 22079
22077: GO 22090
22079: POP
// bc_type := b_oil_mine ; 34 :
22080: LD_ADDR_OWVAR 42
22084: PUSH
22085: LD_INT 29
22087: ST_TO_ADDR
22088: GO 22110
22090: LD_INT 34
22092: DOUBLE
22093: EQUAL
22094: IFTRUE 22098
22096: GO 22109
22098: POP
// bc_type := b_siberite_mine ; end ;
22099: LD_ADDR_OWVAR 42
22103: PUSH
22104: LD_INT 30
22106: ST_TO_ADDR
22107: GO 22110
22109: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
22110: LD_ADDR_VAR 0 8
22114: PUSH
22115: LD_VAR 0 5
22119: PPUSH
22120: LD_VAR 0 6
22124: PPUSH
22125: LD_VAR 0 3
22129: PPUSH
22130: CALL_OW 47
22134: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
22135: LD_OWVAR 42
22139: PUSH
22140: LD_INT 32
22142: PUSH
22143: LD_INT 33
22145: PUSH
22146: EMPTY
22147: LIST
22148: LIST
22149: IN
22150: IFFALSE 22166
// PlaceWeaponTurret ( b , weapon ) ;
22152: LD_VAR 0 8
22156: PPUSH
22157: LD_VAR 0 4
22161: PPUSH
22162: CALL_OW 431
// end ;
22166: LD_VAR 0 7
22170: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
22171: LD_INT 0
22173: PPUSH
22174: PPUSH
22175: PPUSH
22176: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
22177: LD_ADDR_VAR 0 4
22181: PUSH
22182: LD_INT 22
22184: PUSH
22185: LD_OWVAR 2
22189: PUSH
22190: EMPTY
22191: LIST
22192: LIST
22193: PUSH
22194: LD_INT 2
22196: PUSH
22197: LD_INT 30
22199: PUSH
22200: LD_INT 0
22202: PUSH
22203: EMPTY
22204: LIST
22205: LIST
22206: PUSH
22207: LD_INT 30
22209: PUSH
22210: LD_INT 1
22212: PUSH
22213: EMPTY
22214: LIST
22215: LIST
22216: PUSH
22217: EMPTY
22218: LIST
22219: LIST
22220: LIST
22221: PUSH
22222: EMPTY
22223: LIST
22224: LIST
22225: PPUSH
22226: CALL_OW 69
22230: ST_TO_ADDR
// if not tmp then
22231: LD_VAR 0 4
22235: NOT
22236: IFFALSE 22240
// exit ;
22238: GO 22299
// for i in tmp do
22240: LD_ADDR_VAR 0 2
22244: PUSH
22245: LD_VAR 0 4
22249: PUSH
22250: FOR_IN
22251: IFFALSE 22297
// for j = 1 to 3 do
22253: LD_ADDR_VAR 0 3
22257: PUSH
22258: DOUBLE
22259: LD_INT 1
22261: DEC
22262: ST_TO_ADDR
22263: LD_INT 3
22265: PUSH
22266: FOR_TO
22267: IFFALSE 22293
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
22269: LD_VAR 0 2
22273: PPUSH
22274: CALL_OW 274
22278: PPUSH
22279: LD_VAR 0 3
22283: PPUSH
22284: LD_INT 99999
22286: PPUSH
22287: CALL_OW 277
22291: GO 22266
22293: POP
22294: POP
22295: GO 22250
22297: POP
22298: POP
// end ;
22299: LD_VAR 0 1
22303: RET
// export function hHackSetLevel10 ; var i , j ; begin
22304: LD_INT 0
22306: PPUSH
22307: PPUSH
22308: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
22309: LD_ADDR_VAR 0 2
22313: PUSH
22314: LD_INT 21
22316: PUSH
22317: LD_INT 1
22319: PUSH
22320: EMPTY
22321: LIST
22322: LIST
22323: PPUSH
22324: CALL_OW 69
22328: PUSH
22329: FOR_IN
22330: IFFALSE 22382
// if IsSelected ( i ) then
22332: LD_VAR 0 2
22336: PPUSH
22337: CALL_OW 306
22341: IFFALSE 22380
// begin for j := 1 to 4 do
22343: LD_ADDR_VAR 0 3
22347: PUSH
22348: DOUBLE
22349: LD_INT 1
22351: DEC
22352: ST_TO_ADDR
22353: LD_INT 4
22355: PUSH
22356: FOR_TO
22357: IFFALSE 22378
// SetSkill ( i , j , 10 ) ;
22359: LD_VAR 0 2
22363: PPUSH
22364: LD_VAR 0 3
22368: PPUSH
22369: LD_INT 10
22371: PPUSH
22372: CALL_OW 237
22376: GO 22356
22378: POP
22379: POP
// end ;
22380: GO 22329
22382: POP
22383: POP
// end ;
22384: LD_VAR 0 1
22388: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
22389: LD_INT 0
22391: PPUSH
22392: PPUSH
22393: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
22394: LD_ADDR_VAR 0 2
22398: PUSH
22399: LD_INT 22
22401: PUSH
22402: LD_OWVAR 2
22406: PUSH
22407: EMPTY
22408: LIST
22409: LIST
22410: PUSH
22411: LD_INT 21
22413: PUSH
22414: LD_INT 1
22416: PUSH
22417: EMPTY
22418: LIST
22419: LIST
22420: PUSH
22421: EMPTY
22422: LIST
22423: LIST
22424: PPUSH
22425: CALL_OW 69
22429: PUSH
22430: FOR_IN
22431: IFFALSE 22472
// begin for j := 1 to 4 do
22433: LD_ADDR_VAR 0 3
22437: PUSH
22438: DOUBLE
22439: LD_INT 1
22441: DEC
22442: ST_TO_ADDR
22443: LD_INT 4
22445: PUSH
22446: FOR_TO
22447: IFFALSE 22468
// SetSkill ( i , j , 10 ) ;
22449: LD_VAR 0 2
22453: PPUSH
22454: LD_VAR 0 3
22458: PPUSH
22459: LD_INT 10
22461: PPUSH
22462: CALL_OW 237
22466: GO 22446
22468: POP
22469: POP
// end ;
22470: GO 22430
22472: POP
22473: POP
// end ;
22474: LD_VAR 0 1
22478: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
22479: LD_INT 0
22481: PPUSH
// uc_side := your_side ;
22482: LD_ADDR_OWVAR 20
22486: PUSH
22487: LD_OWVAR 2
22491: ST_TO_ADDR
// uc_nation := nation ;
22492: LD_ADDR_OWVAR 21
22496: PUSH
22497: LD_VAR 0 1
22501: ST_TO_ADDR
// InitHc ;
22502: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
22506: LD_INT 0
22508: PPUSH
22509: LD_VAR 0 2
22513: PPUSH
22514: LD_VAR 0 3
22518: PPUSH
22519: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
22523: LD_VAR 0 4
22527: PPUSH
22528: LD_VAR 0 5
22532: PPUSH
22533: CALL_OW 428
22537: PUSH
22538: LD_INT 0
22540: EQUAL
22541: IFFALSE 22565
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
22543: CALL_OW 44
22547: PPUSH
22548: LD_VAR 0 4
22552: PPUSH
22553: LD_VAR 0 5
22557: PPUSH
22558: LD_INT 1
22560: PPUSH
22561: CALL_OW 48
// end ;
22565: LD_VAR 0 6
22569: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
22570: LD_INT 0
22572: PPUSH
22573: PPUSH
// uc_side := your_side ;
22574: LD_ADDR_OWVAR 20
22578: PUSH
22579: LD_OWVAR 2
22583: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
22584: LD_VAR 0 1
22588: PUSH
22589: LD_INT 1
22591: PUSH
22592: LD_INT 2
22594: PUSH
22595: LD_INT 3
22597: PUSH
22598: LD_INT 4
22600: PUSH
22601: LD_INT 5
22603: PUSH
22604: EMPTY
22605: LIST
22606: LIST
22607: LIST
22608: LIST
22609: LIST
22610: IN
22611: IFFALSE 22623
// uc_nation := nation_american else
22613: LD_ADDR_OWVAR 21
22617: PUSH
22618: LD_INT 1
22620: ST_TO_ADDR
22621: GO 22666
// if chassis in [ 11 , 12 , 13 , 14 ] then
22623: LD_VAR 0 1
22627: PUSH
22628: LD_INT 11
22630: PUSH
22631: LD_INT 12
22633: PUSH
22634: LD_INT 13
22636: PUSH
22637: LD_INT 14
22639: PUSH
22640: EMPTY
22641: LIST
22642: LIST
22643: LIST
22644: LIST
22645: IN
22646: IFFALSE 22658
// uc_nation := nation_arabian else
22648: LD_ADDR_OWVAR 21
22652: PUSH
22653: LD_INT 2
22655: ST_TO_ADDR
22656: GO 22666
// uc_nation := nation_russian ;
22658: LD_ADDR_OWVAR 21
22662: PUSH
22663: LD_INT 3
22665: ST_TO_ADDR
// vc_chassis := chassis ;
22666: LD_ADDR_OWVAR 37
22670: PUSH
22671: LD_VAR 0 1
22675: ST_TO_ADDR
// vc_engine := engine ;
22676: LD_ADDR_OWVAR 39
22680: PUSH
22681: LD_VAR 0 2
22685: ST_TO_ADDR
// vc_control := control ;
22686: LD_ADDR_OWVAR 38
22690: PUSH
22691: LD_VAR 0 3
22695: ST_TO_ADDR
// vc_weapon := weapon ;
22696: LD_ADDR_OWVAR 40
22700: PUSH
22701: LD_VAR 0 4
22705: ST_TO_ADDR
// un := CreateVehicle ;
22706: LD_ADDR_VAR 0 8
22710: PUSH
22711: CALL_OW 45
22715: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
22716: LD_VAR 0 8
22720: PPUSH
22721: LD_INT 0
22723: PPUSH
22724: LD_INT 5
22726: PPUSH
22727: CALL_OW 12
22731: PPUSH
22732: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
22736: LD_VAR 0 8
22740: PPUSH
22741: LD_VAR 0 5
22745: PPUSH
22746: LD_VAR 0 6
22750: PPUSH
22751: LD_INT 1
22753: PPUSH
22754: CALL_OW 48
// end ;
22758: LD_VAR 0 7
22762: RET
// export hInvincible ; every 1 do
22763: GO 22765
22765: DISABLE
// hInvincible := [ ] ;
22766: LD_ADDR_EXP 88
22770: PUSH
22771: EMPTY
22772: ST_TO_ADDR
22773: END
// every 10 do var i ;
22774: GO 22776
22776: DISABLE
22777: LD_INT 0
22779: PPUSH
// begin enable ;
22780: ENABLE
// if not hInvincible then
22781: LD_EXP 88
22785: NOT
22786: IFFALSE 22790
// exit ;
22788: GO 22834
// for i in hInvincible do
22790: LD_ADDR_VAR 0 1
22794: PUSH
22795: LD_EXP 88
22799: PUSH
22800: FOR_IN
22801: IFFALSE 22832
// if GetLives ( i ) < 1000 then
22803: LD_VAR 0 1
22807: PPUSH
22808: CALL_OW 256
22812: PUSH
22813: LD_INT 1000
22815: LESS
22816: IFFALSE 22830
// SetLives ( i , 1000 ) ;
22818: LD_VAR 0 1
22822: PPUSH
22823: LD_INT 1000
22825: PPUSH
22826: CALL_OW 234
22830: GO 22800
22832: POP
22833: POP
// end ;
22834: PPOPN 1
22836: END
// export function hHackInvincible ; var i ; begin
22837: LD_INT 0
22839: PPUSH
22840: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
22841: LD_ADDR_VAR 0 2
22845: PUSH
22846: LD_INT 2
22848: PUSH
22849: LD_INT 21
22851: PUSH
22852: LD_INT 1
22854: PUSH
22855: EMPTY
22856: LIST
22857: LIST
22858: PUSH
22859: LD_INT 21
22861: PUSH
22862: LD_INT 2
22864: PUSH
22865: EMPTY
22866: LIST
22867: LIST
22868: PUSH
22869: EMPTY
22870: LIST
22871: LIST
22872: LIST
22873: PPUSH
22874: CALL_OW 69
22878: PUSH
22879: FOR_IN
22880: IFFALSE 22941
// if IsSelected ( i ) then
22882: LD_VAR 0 2
22886: PPUSH
22887: CALL_OW 306
22891: IFFALSE 22939
// begin if i in hInvincible then
22893: LD_VAR 0 2
22897: PUSH
22898: LD_EXP 88
22902: IN
22903: IFFALSE 22923
// hInvincible := hInvincible diff i else
22905: LD_ADDR_EXP 88
22909: PUSH
22910: LD_EXP 88
22914: PUSH
22915: LD_VAR 0 2
22919: DIFF
22920: ST_TO_ADDR
22921: GO 22939
// hInvincible := hInvincible union i ;
22923: LD_ADDR_EXP 88
22927: PUSH
22928: LD_EXP 88
22932: PUSH
22933: LD_VAR 0 2
22937: UNION
22938: ST_TO_ADDR
// end ;
22939: GO 22879
22941: POP
22942: POP
// end ;
22943: LD_VAR 0 1
22947: RET
// export function hHackInvisible ; var i , j ; begin
22948: LD_INT 0
22950: PPUSH
22951: PPUSH
22952: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
22953: LD_ADDR_VAR 0 2
22957: PUSH
22958: LD_INT 21
22960: PUSH
22961: LD_INT 1
22963: PUSH
22964: EMPTY
22965: LIST
22966: LIST
22967: PPUSH
22968: CALL_OW 69
22972: PUSH
22973: FOR_IN
22974: IFFALSE 22998
// if IsSelected ( i ) then
22976: LD_VAR 0 2
22980: PPUSH
22981: CALL_OW 306
22985: IFFALSE 22996
// ComForceInvisible ( i ) ;
22987: LD_VAR 0 2
22991: PPUSH
22992: CALL_OW 496
22996: GO 22973
22998: POP
22999: POP
// end ;
23000: LD_VAR 0 1
23004: RET
// export function hHackChangeYourSide ; begin
23005: LD_INT 0
23007: PPUSH
// if your_side = 8 then
23008: LD_OWVAR 2
23012: PUSH
23013: LD_INT 8
23015: EQUAL
23016: IFFALSE 23028
// your_side := 0 else
23018: LD_ADDR_OWVAR 2
23022: PUSH
23023: LD_INT 0
23025: ST_TO_ADDR
23026: GO 23042
// your_side := your_side + 1 ;
23028: LD_ADDR_OWVAR 2
23032: PUSH
23033: LD_OWVAR 2
23037: PUSH
23038: LD_INT 1
23040: PLUS
23041: ST_TO_ADDR
// end ;
23042: LD_VAR 0 1
23046: RET
// export function hHackChangeUnitSide ; var i , j ; begin
23047: LD_INT 0
23049: PPUSH
23050: PPUSH
23051: PPUSH
// for i in all_units do
23052: LD_ADDR_VAR 0 2
23056: PUSH
23057: LD_OWVAR 3
23061: PUSH
23062: FOR_IN
23063: IFFALSE 23141
// if IsSelected ( i ) then
23065: LD_VAR 0 2
23069: PPUSH
23070: CALL_OW 306
23074: IFFALSE 23139
// begin j := GetSide ( i ) ;
23076: LD_ADDR_VAR 0 3
23080: PUSH
23081: LD_VAR 0 2
23085: PPUSH
23086: CALL_OW 255
23090: ST_TO_ADDR
// if j = 8 then
23091: LD_VAR 0 3
23095: PUSH
23096: LD_INT 8
23098: EQUAL
23099: IFFALSE 23111
// j := 0 else
23101: LD_ADDR_VAR 0 3
23105: PUSH
23106: LD_INT 0
23108: ST_TO_ADDR
23109: GO 23125
// j := j + 1 ;
23111: LD_ADDR_VAR 0 3
23115: PUSH
23116: LD_VAR 0 3
23120: PUSH
23121: LD_INT 1
23123: PLUS
23124: ST_TO_ADDR
// SetSide ( i , j ) ;
23125: LD_VAR 0 2
23129: PPUSH
23130: LD_VAR 0 3
23134: PPUSH
23135: CALL_OW 235
// end ;
23139: GO 23062
23141: POP
23142: POP
// end ;
23143: LD_VAR 0 1
23147: RET
// export function hHackFog ; begin
23148: LD_INT 0
23150: PPUSH
// FogOff ( true ) ;
23151: LD_INT 1
23153: PPUSH
23154: CALL_OW 344
// end ;
23158: LD_VAR 0 1
23162: RET
// export function hHackTeleport ( unit , x , y ) ; begin
23163: LD_INT 0
23165: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
23166: LD_VAR 0 1
23170: PPUSH
23171: LD_VAR 0 2
23175: PPUSH
23176: LD_VAR 0 3
23180: PPUSH
23181: LD_INT 1
23183: PPUSH
23184: LD_INT 1
23186: PPUSH
23187: CALL_OW 483
// CenterOnXY ( x , y ) ;
23191: LD_VAR 0 2
23195: PPUSH
23196: LD_VAR 0 3
23200: PPUSH
23201: CALL_OW 84
// end ;
23205: LD_VAR 0 4
23209: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
23210: LD_INT 0
23212: PPUSH
23213: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
23214: LD_VAR 0 1
23218: NOT
23219: PUSH
23220: LD_VAR 0 2
23224: PPUSH
23225: LD_VAR 0 3
23229: PPUSH
23230: CALL_OW 488
23234: NOT
23235: OR
23236: PUSH
23237: LD_VAR 0 1
23241: PPUSH
23242: CALL_OW 266
23246: PUSH
23247: LD_INT 3
23249: NONEQUAL
23250: PUSH
23251: LD_VAR 0 1
23255: PPUSH
23256: CALL_OW 247
23260: PUSH
23261: LD_INT 1
23263: EQUAL
23264: NOT
23265: AND
23266: OR
23267: IFFALSE 23271
// exit ;
23269: GO 23420
// if GetType ( factory ) = unit_human then
23271: LD_VAR 0 1
23275: PPUSH
23276: CALL_OW 247
23280: PUSH
23281: LD_INT 1
23283: EQUAL
23284: IFFALSE 23301
// factory := IsInUnit ( factory ) ;
23286: LD_ADDR_VAR 0 1
23290: PUSH
23291: LD_VAR 0 1
23295: PPUSH
23296: CALL_OW 310
23300: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
23301: LD_VAR 0 1
23305: PPUSH
23306: CALL_OW 266
23310: PUSH
23311: LD_INT 3
23313: NONEQUAL
23314: IFFALSE 23318
// exit ;
23316: GO 23420
// if HexInfo ( x , y ) = factory then
23318: LD_VAR 0 2
23322: PPUSH
23323: LD_VAR 0 3
23327: PPUSH
23328: CALL_OW 428
23332: PUSH
23333: LD_VAR 0 1
23337: EQUAL
23338: IFFALSE 23365
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
23340: LD_ADDR_EXP 89
23344: PUSH
23345: LD_EXP 89
23349: PPUSH
23350: LD_VAR 0 1
23354: PPUSH
23355: LD_INT 0
23357: PPUSH
23358: CALL_OW 1
23362: ST_TO_ADDR
23363: GO 23416
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
23365: LD_ADDR_EXP 89
23369: PUSH
23370: LD_EXP 89
23374: PPUSH
23375: LD_VAR 0 1
23379: PPUSH
23380: LD_VAR 0 1
23384: PPUSH
23385: CALL_OW 255
23389: PUSH
23390: LD_VAR 0 1
23394: PUSH
23395: LD_VAR 0 2
23399: PUSH
23400: LD_VAR 0 3
23404: PUSH
23405: EMPTY
23406: LIST
23407: LIST
23408: LIST
23409: LIST
23410: PPUSH
23411: CALL_OW 1
23415: ST_TO_ADDR
// UpdateFactoryWaypoints ;
23416: CALL 23425 0 0
// end ;
23420: LD_VAR 0 4
23424: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
23425: LD_INT 0
23427: PPUSH
23428: PPUSH
23429: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
23430: LD_STRING resetFactoryWaypoint();
23432: PPUSH
23433: CALL_OW 559
// if factoryWaypoints then
23437: LD_EXP 89
23441: IFFALSE 23567
// begin list := PrepareArray ( factoryWaypoints ) ;
23443: LD_ADDR_VAR 0 3
23447: PUSH
23448: LD_EXP 89
23452: PPUSH
23453: CALL 70036 0 1
23457: ST_TO_ADDR
// for i := 1 to list do
23458: LD_ADDR_VAR 0 2
23462: PUSH
23463: DOUBLE
23464: LD_INT 1
23466: DEC
23467: ST_TO_ADDR
23468: LD_VAR 0 3
23472: PUSH
23473: FOR_TO
23474: IFFALSE 23565
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
23476: LD_STRING setFactoryWaypointXY(
23478: PUSH
23479: LD_VAR 0 3
23483: PUSH
23484: LD_VAR 0 2
23488: ARRAY
23489: PUSH
23490: LD_INT 1
23492: ARRAY
23493: STR
23494: PUSH
23495: LD_STRING ,
23497: STR
23498: PUSH
23499: LD_VAR 0 3
23503: PUSH
23504: LD_VAR 0 2
23508: ARRAY
23509: PUSH
23510: LD_INT 2
23512: ARRAY
23513: STR
23514: PUSH
23515: LD_STRING ,
23517: STR
23518: PUSH
23519: LD_VAR 0 3
23523: PUSH
23524: LD_VAR 0 2
23528: ARRAY
23529: PUSH
23530: LD_INT 3
23532: ARRAY
23533: STR
23534: PUSH
23535: LD_STRING ,
23537: STR
23538: PUSH
23539: LD_VAR 0 3
23543: PUSH
23544: LD_VAR 0 2
23548: ARRAY
23549: PUSH
23550: LD_INT 4
23552: ARRAY
23553: STR
23554: PUSH
23555: LD_STRING )
23557: STR
23558: PPUSH
23559: CALL_OW 559
23563: GO 23473
23565: POP
23566: POP
// end ; end ;
23567: LD_VAR 0 1
23571: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
23572: LD_INT 0
23574: PPUSH
// if HexInfo ( x , y ) = warehouse then
23575: LD_VAR 0 2
23579: PPUSH
23580: LD_VAR 0 3
23584: PPUSH
23585: CALL_OW 428
23589: PUSH
23590: LD_VAR 0 1
23594: EQUAL
23595: IFFALSE 23622
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
23597: LD_ADDR_EXP 90
23601: PUSH
23602: LD_EXP 90
23606: PPUSH
23607: LD_VAR 0 1
23611: PPUSH
23612: LD_INT 0
23614: PPUSH
23615: CALL_OW 1
23619: ST_TO_ADDR
23620: GO 23673
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
23622: LD_ADDR_EXP 90
23626: PUSH
23627: LD_EXP 90
23631: PPUSH
23632: LD_VAR 0 1
23636: PPUSH
23637: LD_VAR 0 1
23641: PPUSH
23642: CALL_OW 255
23646: PUSH
23647: LD_VAR 0 1
23651: PUSH
23652: LD_VAR 0 2
23656: PUSH
23657: LD_VAR 0 3
23661: PUSH
23662: EMPTY
23663: LIST
23664: LIST
23665: LIST
23666: LIST
23667: PPUSH
23668: CALL_OW 1
23672: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
23673: CALL 23682 0 0
// end ;
23677: LD_VAR 0 4
23681: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
23682: LD_INT 0
23684: PPUSH
23685: PPUSH
23686: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
23687: LD_STRING resetWarehouseGatheringPoints();
23689: PPUSH
23690: CALL_OW 559
// if warehouseGatheringPoints then
23694: LD_EXP 90
23698: IFFALSE 23824
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
23700: LD_ADDR_VAR 0 3
23704: PUSH
23705: LD_EXP 90
23709: PPUSH
23710: CALL 70036 0 1
23714: ST_TO_ADDR
// for i := 1 to list do
23715: LD_ADDR_VAR 0 2
23719: PUSH
23720: DOUBLE
23721: LD_INT 1
23723: DEC
23724: ST_TO_ADDR
23725: LD_VAR 0 3
23729: PUSH
23730: FOR_TO
23731: IFFALSE 23822
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
23733: LD_STRING setWarehouseGatheringPointXY(
23735: PUSH
23736: LD_VAR 0 3
23740: PUSH
23741: LD_VAR 0 2
23745: ARRAY
23746: PUSH
23747: LD_INT 1
23749: ARRAY
23750: STR
23751: PUSH
23752: LD_STRING ,
23754: STR
23755: PUSH
23756: LD_VAR 0 3
23760: PUSH
23761: LD_VAR 0 2
23765: ARRAY
23766: PUSH
23767: LD_INT 2
23769: ARRAY
23770: STR
23771: PUSH
23772: LD_STRING ,
23774: STR
23775: PUSH
23776: LD_VAR 0 3
23780: PUSH
23781: LD_VAR 0 2
23785: ARRAY
23786: PUSH
23787: LD_INT 3
23789: ARRAY
23790: STR
23791: PUSH
23792: LD_STRING ,
23794: STR
23795: PUSH
23796: LD_VAR 0 3
23800: PUSH
23801: LD_VAR 0 2
23805: ARRAY
23806: PUSH
23807: LD_INT 4
23809: ARRAY
23810: STR
23811: PUSH
23812: LD_STRING )
23814: STR
23815: PPUSH
23816: CALL_OW 559
23820: GO 23730
23822: POP
23823: POP
// end ; end ;
23824: LD_VAR 0 1
23828: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
23829: LD_EXP 90
23833: IFFALSE 24518
23835: GO 23837
23837: DISABLE
23838: LD_INT 0
23840: PPUSH
23841: PPUSH
23842: PPUSH
23843: PPUSH
23844: PPUSH
23845: PPUSH
23846: PPUSH
23847: PPUSH
23848: PPUSH
// begin enable ;
23849: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
23850: LD_ADDR_VAR 0 3
23854: PUSH
23855: LD_EXP 90
23859: PPUSH
23860: CALL 70036 0 1
23864: ST_TO_ADDR
// if not list then
23865: LD_VAR 0 3
23869: NOT
23870: IFFALSE 23874
// exit ;
23872: GO 24518
// for i := 1 to list do
23874: LD_ADDR_VAR 0 1
23878: PUSH
23879: DOUBLE
23880: LD_INT 1
23882: DEC
23883: ST_TO_ADDR
23884: LD_VAR 0 3
23888: PUSH
23889: FOR_TO
23890: IFFALSE 24516
// begin depot := list [ i ] [ 2 ] ;
23892: LD_ADDR_VAR 0 8
23896: PUSH
23897: LD_VAR 0 3
23901: PUSH
23902: LD_VAR 0 1
23906: ARRAY
23907: PUSH
23908: LD_INT 2
23910: ARRAY
23911: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
23912: LD_ADDR_VAR 0 5
23916: PUSH
23917: LD_VAR 0 3
23921: PUSH
23922: LD_VAR 0 1
23926: ARRAY
23927: PUSH
23928: LD_INT 1
23930: ARRAY
23931: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
23932: LD_VAR 0 8
23936: PPUSH
23937: CALL_OW 301
23941: PUSH
23942: LD_VAR 0 5
23946: PUSH
23947: LD_VAR 0 8
23951: PPUSH
23952: CALL_OW 255
23956: NONEQUAL
23957: OR
23958: IFFALSE 23987
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
23960: LD_ADDR_EXP 90
23964: PUSH
23965: LD_EXP 90
23969: PPUSH
23970: LD_VAR 0 8
23974: PPUSH
23975: LD_INT 0
23977: PPUSH
23978: CALL_OW 1
23982: ST_TO_ADDR
// exit ;
23983: POP
23984: POP
23985: GO 24518
// end ; x := list [ i ] [ 3 ] ;
23987: LD_ADDR_VAR 0 6
23991: PUSH
23992: LD_VAR 0 3
23996: PUSH
23997: LD_VAR 0 1
24001: ARRAY
24002: PUSH
24003: LD_INT 3
24005: ARRAY
24006: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
24007: LD_ADDR_VAR 0 7
24011: PUSH
24012: LD_VAR 0 3
24016: PUSH
24017: LD_VAR 0 1
24021: ARRAY
24022: PUSH
24023: LD_INT 4
24025: ARRAY
24026: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
24027: LD_ADDR_VAR 0 9
24031: PUSH
24032: LD_VAR 0 6
24036: PPUSH
24037: LD_VAR 0 7
24041: PPUSH
24042: LD_INT 16
24044: PPUSH
24045: CALL 68624 0 3
24049: ST_TO_ADDR
// if not cratesNearbyPoint then
24050: LD_VAR 0 9
24054: NOT
24055: IFFALSE 24061
// exit ;
24057: POP
24058: POP
24059: GO 24518
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
24061: LD_ADDR_VAR 0 4
24065: PUSH
24066: LD_INT 22
24068: PUSH
24069: LD_VAR 0 5
24073: PUSH
24074: EMPTY
24075: LIST
24076: LIST
24077: PUSH
24078: LD_INT 3
24080: PUSH
24081: LD_INT 60
24083: PUSH
24084: EMPTY
24085: LIST
24086: PUSH
24087: EMPTY
24088: LIST
24089: LIST
24090: PUSH
24091: LD_INT 91
24093: PUSH
24094: LD_VAR 0 8
24098: PUSH
24099: LD_INT 6
24101: PUSH
24102: EMPTY
24103: LIST
24104: LIST
24105: LIST
24106: PUSH
24107: LD_INT 2
24109: PUSH
24110: LD_INT 25
24112: PUSH
24113: LD_INT 2
24115: PUSH
24116: EMPTY
24117: LIST
24118: LIST
24119: PUSH
24120: LD_INT 25
24122: PUSH
24123: LD_INT 16
24125: PUSH
24126: EMPTY
24127: LIST
24128: LIST
24129: PUSH
24130: EMPTY
24131: LIST
24132: LIST
24133: LIST
24134: PUSH
24135: EMPTY
24136: LIST
24137: LIST
24138: LIST
24139: LIST
24140: PPUSH
24141: CALL_OW 69
24145: PUSH
24146: LD_VAR 0 8
24150: PPUSH
24151: CALL_OW 313
24155: PPUSH
24156: LD_INT 3
24158: PUSH
24159: LD_INT 60
24161: PUSH
24162: EMPTY
24163: LIST
24164: PUSH
24165: EMPTY
24166: LIST
24167: LIST
24168: PUSH
24169: LD_INT 2
24171: PUSH
24172: LD_INT 25
24174: PUSH
24175: LD_INT 2
24177: PUSH
24178: EMPTY
24179: LIST
24180: LIST
24181: PUSH
24182: LD_INT 25
24184: PUSH
24185: LD_INT 16
24187: PUSH
24188: EMPTY
24189: LIST
24190: LIST
24191: PUSH
24192: EMPTY
24193: LIST
24194: LIST
24195: LIST
24196: PUSH
24197: EMPTY
24198: LIST
24199: LIST
24200: PPUSH
24201: CALL_OW 72
24205: UNION
24206: ST_TO_ADDR
// if tmp then
24207: LD_VAR 0 4
24211: IFFALSE 24291
// begin tmp := ShrinkArray ( tmp , 3 ) ;
24213: LD_ADDR_VAR 0 4
24217: PUSH
24218: LD_VAR 0 4
24222: PPUSH
24223: LD_INT 3
24225: PPUSH
24226: CALL 66593 0 2
24230: ST_TO_ADDR
// for j in tmp do
24231: LD_ADDR_VAR 0 2
24235: PUSH
24236: LD_VAR 0 4
24240: PUSH
24241: FOR_IN
24242: IFFALSE 24285
// begin if IsInUnit ( j ) then
24244: LD_VAR 0 2
24248: PPUSH
24249: CALL_OW 310
24253: IFFALSE 24264
// ComExit ( j ) ;
24255: LD_VAR 0 2
24259: PPUSH
24260: CALL 66676 0 1
// AddComCollect ( j , x , y ) ;
24264: LD_VAR 0 2
24268: PPUSH
24269: LD_VAR 0 6
24273: PPUSH
24274: LD_VAR 0 7
24278: PPUSH
24279: CALL_OW 177
// end ;
24283: GO 24241
24285: POP
24286: POP
// exit ;
24287: POP
24288: POP
24289: GO 24518
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
24291: LD_ADDR_VAR 0 4
24295: PUSH
24296: LD_INT 22
24298: PUSH
24299: LD_VAR 0 5
24303: PUSH
24304: EMPTY
24305: LIST
24306: LIST
24307: PUSH
24308: LD_INT 91
24310: PUSH
24311: LD_VAR 0 8
24315: PUSH
24316: LD_INT 8
24318: PUSH
24319: EMPTY
24320: LIST
24321: LIST
24322: LIST
24323: PUSH
24324: LD_INT 2
24326: PUSH
24327: LD_INT 34
24329: PUSH
24330: LD_INT 12
24332: PUSH
24333: EMPTY
24334: LIST
24335: LIST
24336: PUSH
24337: LD_INT 34
24339: PUSH
24340: LD_INT 51
24342: PUSH
24343: EMPTY
24344: LIST
24345: LIST
24346: PUSH
24347: LD_INT 34
24349: PUSH
24350: LD_INT 32
24352: PUSH
24353: EMPTY
24354: LIST
24355: LIST
24356: PUSH
24357: LD_INT 34
24359: PUSH
24360: LD_INT 89
24362: PUSH
24363: EMPTY
24364: LIST
24365: LIST
24366: PUSH
24367: EMPTY
24368: LIST
24369: LIST
24370: LIST
24371: LIST
24372: LIST
24373: PUSH
24374: EMPTY
24375: LIST
24376: LIST
24377: LIST
24378: PPUSH
24379: CALL_OW 69
24383: ST_TO_ADDR
// if tmp then
24384: LD_VAR 0 4
24388: IFFALSE 24514
// begin for j in tmp do
24390: LD_ADDR_VAR 0 2
24394: PUSH
24395: LD_VAR 0 4
24399: PUSH
24400: FOR_IN
24401: IFFALSE 24512
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
24403: LD_VAR 0 2
24407: PPUSH
24408: CALL_OW 262
24412: PUSH
24413: LD_INT 3
24415: EQUAL
24416: PUSH
24417: LD_VAR 0 2
24421: PPUSH
24422: CALL_OW 261
24426: PUSH
24427: LD_INT 20
24429: GREATER
24430: OR
24431: PUSH
24432: LD_VAR 0 2
24436: PPUSH
24437: CALL_OW 314
24441: NOT
24442: AND
24443: PUSH
24444: LD_VAR 0 2
24448: PPUSH
24449: CALL_OW 263
24453: PUSH
24454: LD_INT 1
24456: NONEQUAL
24457: PUSH
24458: LD_VAR 0 2
24462: PPUSH
24463: CALL_OW 311
24467: OR
24468: AND
24469: IFFALSE 24510
// begin ComCollect ( j , x , y ) ;
24471: LD_VAR 0 2
24475: PPUSH
24476: LD_VAR 0 6
24480: PPUSH
24481: LD_VAR 0 7
24485: PPUSH
24486: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
24490: LD_VAR 0 2
24494: PPUSH
24495: LD_VAR 0 8
24499: PPUSH
24500: CALL_OW 172
// exit ;
24504: POP
24505: POP
24506: POP
24507: POP
24508: GO 24518
// end ;
24510: GO 24400
24512: POP
24513: POP
// end ; end ;
24514: GO 23889
24516: POP
24517: POP
// end ; end_of_file
24518: PPOPN 9
24520: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
24521: LD_INT 0
24523: PPUSH
24524: PPUSH
24525: PPUSH
24526: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
24527: LD_VAR 0 1
24531: PPUSH
24532: CALL_OW 264
24536: PUSH
24537: LD_INT 91
24539: EQUAL
24540: IFFALSE 24612
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
24542: LD_INT 68
24544: PPUSH
24545: LD_VAR 0 1
24549: PPUSH
24550: CALL_OW 255
24554: PPUSH
24555: CALL_OW 321
24559: PUSH
24560: LD_INT 2
24562: EQUAL
24563: IFFALSE 24575
// eff := 70 else
24565: LD_ADDR_VAR 0 4
24569: PUSH
24570: LD_INT 70
24572: ST_TO_ADDR
24573: GO 24583
// eff := 30 ;
24575: LD_ADDR_VAR 0 4
24579: PUSH
24580: LD_INT 30
24582: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
24583: LD_VAR 0 1
24587: PPUSH
24588: CALL_OW 250
24592: PPUSH
24593: LD_VAR 0 1
24597: PPUSH
24598: CALL_OW 251
24602: PPUSH
24603: LD_VAR 0 4
24607: PPUSH
24608: CALL_OW 495
// end ; end ;
24612: LD_VAR 0 2
24616: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
24617: LD_INT 0
24619: PPUSH
// end ;
24620: LD_VAR 0 4
24624: RET
// export function SOS_Command ( cmd ) ; begin
24625: LD_INT 0
24627: PPUSH
// end ;
24628: LD_VAR 0 2
24632: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
24633: LD_INT 0
24635: PPUSH
// end ;
24636: LD_VAR 0 6
24640: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
24641: LD_INT 0
24643: PPUSH
24644: PPUSH
// if not vehicle or not factory then
24645: LD_VAR 0 1
24649: NOT
24650: PUSH
24651: LD_VAR 0 2
24655: NOT
24656: OR
24657: IFFALSE 24661
// exit ;
24659: GO 24892
// if factoryWaypoints >= factory then
24661: LD_EXP 89
24665: PUSH
24666: LD_VAR 0 2
24670: GREATEREQUAL
24671: IFFALSE 24892
// if factoryWaypoints [ factory ] then
24673: LD_EXP 89
24677: PUSH
24678: LD_VAR 0 2
24682: ARRAY
24683: IFFALSE 24892
// begin if GetControl ( vehicle ) = control_manual then
24685: LD_VAR 0 1
24689: PPUSH
24690: CALL_OW 263
24694: PUSH
24695: LD_INT 1
24697: EQUAL
24698: IFFALSE 24779
// begin driver := IsDrivenBy ( vehicle ) ;
24700: LD_ADDR_VAR 0 4
24704: PUSH
24705: LD_VAR 0 1
24709: PPUSH
24710: CALL_OW 311
24714: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
24715: LD_VAR 0 4
24719: PPUSH
24720: LD_EXP 89
24724: PUSH
24725: LD_VAR 0 2
24729: ARRAY
24730: PUSH
24731: LD_INT 3
24733: ARRAY
24734: PPUSH
24735: LD_EXP 89
24739: PUSH
24740: LD_VAR 0 2
24744: ARRAY
24745: PUSH
24746: LD_INT 4
24748: ARRAY
24749: PPUSH
24750: CALL_OW 171
// AddComExitVehicle ( driver ) ;
24754: LD_VAR 0 4
24758: PPUSH
24759: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
24763: LD_VAR 0 4
24767: PPUSH
24768: LD_VAR 0 2
24772: PPUSH
24773: CALL_OW 180
// end else
24777: GO 24892
// if GetControl ( vehicle ) = control_remote then
24779: LD_VAR 0 1
24783: PPUSH
24784: CALL_OW 263
24788: PUSH
24789: LD_INT 2
24791: EQUAL
24792: IFFALSE 24853
// begin wait ( 0 0$2 ) ;
24794: LD_INT 70
24796: PPUSH
24797: CALL_OW 67
// if Connect ( vehicle ) then
24801: LD_VAR 0 1
24805: PPUSH
24806: CALL 36916 0 1
24810: IFFALSE 24851
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
24812: LD_VAR 0 1
24816: PPUSH
24817: LD_EXP 89
24821: PUSH
24822: LD_VAR 0 2
24826: ARRAY
24827: PUSH
24828: LD_INT 3
24830: ARRAY
24831: PPUSH
24832: LD_EXP 89
24836: PUSH
24837: LD_VAR 0 2
24841: ARRAY
24842: PUSH
24843: LD_INT 4
24845: ARRAY
24846: PPUSH
24847: CALL_OW 171
// end else
24851: GO 24892
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
24853: LD_VAR 0 1
24857: PPUSH
24858: LD_EXP 89
24862: PUSH
24863: LD_VAR 0 2
24867: ARRAY
24868: PUSH
24869: LD_INT 3
24871: ARRAY
24872: PPUSH
24873: LD_EXP 89
24877: PUSH
24878: LD_VAR 0 2
24882: ARRAY
24883: PUSH
24884: LD_INT 4
24886: ARRAY
24887: PPUSH
24888: CALL_OW 171
// end ; end ;
24892: LD_VAR 0 3
24896: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
24897: LD_INT 0
24899: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
24900: LD_VAR 0 1
24904: PUSH
24905: LD_INT 250
24907: EQUAL
24908: PUSH
24909: LD_VAR 0 2
24913: PPUSH
24914: CALL_OW 264
24918: PUSH
24919: LD_INT 81
24921: EQUAL
24922: AND
24923: IFFALSE 24944
// MinerPlaceMine ( unit , x , y ) ;
24925: LD_VAR 0 2
24929: PPUSH
24930: LD_VAR 0 4
24934: PPUSH
24935: LD_VAR 0 5
24939: PPUSH
24940: CALL 27329 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
24944: LD_VAR 0 1
24948: PUSH
24949: LD_INT 251
24951: EQUAL
24952: PUSH
24953: LD_VAR 0 2
24957: PPUSH
24958: CALL_OW 264
24962: PUSH
24963: LD_INT 81
24965: EQUAL
24966: AND
24967: IFFALSE 24988
// MinerDetonateMine ( unit , x , y ) ;
24969: LD_VAR 0 2
24973: PPUSH
24974: LD_VAR 0 4
24978: PPUSH
24979: LD_VAR 0 5
24983: PPUSH
24984: CALL 27604 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
24988: LD_VAR 0 1
24992: PUSH
24993: LD_INT 252
24995: EQUAL
24996: PUSH
24997: LD_VAR 0 2
25001: PPUSH
25002: CALL_OW 264
25006: PUSH
25007: LD_INT 81
25009: EQUAL
25010: AND
25011: IFFALSE 25032
// MinerCreateMinefield ( unit , x , y ) ;
25013: LD_VAR 0 2
25017: PPUSH
25018: LD_VAR 0 4
25022: PPUSH
25023: LD_VAR 0 5
25027: PPUSH
25028: CALL 28021 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
25032: LD_VAR 0 1
25036: PUSH
25037: LD_INT 253
25039: EQUAL
25040: PUSH
25041: LD_VAR 0 2
25045: PPUSH
25046: CALL_OW 257
25050: PUSH
25051: LD_INT 5
25053: EQUAL
25054: AND
25055: IFFALSE 25076
// ComBinocular ( unit , x , y ) ;
25057: LD_VAR 0 2
25061: PPUSH
25062: LD_VAR 0 4
25066: PPUSH
25067: LD_VAR 0 5
25071: PPUSH
25072: CALL 28390 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
25076: LD_VAR 0 1
25080: PUSH
25081: LD_INT 254
25083: EQUAL
25084: PUSH
25085: LD_VAR 0 2
25089: PPUSH
25090: CALL_OW 264
25094: PUSH
25095: LD_INT 99
25097: EQUAL
25098: AND
25099: PUSH
25100: LD_VAR 0 3
25104: PPUSH
25105: CALL_OW 263
25109: PUSH
25110: LD_INT 3
25112: EQUAL
25113: AND
25114: IFFALSE 25130
// HackDestroyVehicle ( unit , selectedUnit ) ;
25116: LD_VAR 0 2
25120: PPUSH
25121: LD_VAR 0 3
25125: PPUSH
25126: CALL 26693 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
25130: LD_VAR 0 1
25134: PUSH
25135: LD_INT 255
25137: EQUAL
25138: PUSH
25139: LD_VAR 0 2
25143: PPUSH
25144: CALL_OW 264
25148: PUSH
25149: LD_INT 14
25151: PUSH
25152: LD_INT 53
25154: PUSH
25155: EMPTY
25156: LIST
25157: LIST
25158: IN
25159: AND
25160: PUSH
25161: LD_VAR 0 4
25165: PPUSH
25166: LD_VAR 0 5
25170: PPUSH
25171: CALL_OW 488
25175: AND
25176: IFFALSE 25200
// CutTreeXYR ( unit , x , y , 12 ) ;
25178: LD_VAR 0 2
25182: PPUSH
25183: LD_VAR 0 4
25187: PPUSH
25188: LD_VAR 0 5
25192: PPUSH
25193: LD_INT 12
25195: PPUSH
25196: CALL 25263 0 4
// if cmd = 256 then
25200: LD_VAR 0 1
25204: PUSH
25205: LD_INT 256
25207: EQUAL
25208: IFFALSE 25229
// SetFactoryWaypoint ( unit , x , y ) ;
25210: LD_VAR 0 2
25214: PPUSH
25215: LD_VAR 0 4
25219: PPUSH
25220: LD_VAR 0 5
25224: PPUSH
25225: CALL 23210 0 3
// if cmd = 257 then
25229: LD_VAR 0 1
25233: PUSH
25234: LD_INT 257
25236: EQUAL
25237: IFFALSE 25258
// SetWarehouseGatheringPoint ( unit , x , y ) ;
25239: LD_VAR 0 2
25243: PPUSH
25244: LD_VAR 0 4
25248: PPUSH
25249: LD_VAR 0 5
25253: PPUSH
25254: CALL 23572 0 3
// end ;
25258: LD_VAR 0 6
25262: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
25263: LD_INT 0
25265: PPUSH
25266: PPUSH
25267: PPUSH
25268: PPUSH
25269: PPUSH
25270: PPUSH
25271: PPUSH
25272: PPUSH
25273: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
25274: LD_VAR 0 1
25278: NOT
25279: PUSH
25280: LD_VAR 0 2
25284: PPUSH
25285: LD_VAR 0 3
25289: PPUSH
25290: CALL_OW 488
25294: NOT
25295: OR
25296: PUSH
25297: LD_VAR 0 4
25301: NOT
25302: OR
25303: IFFALSE 25307
// exit ;
25305: GO 25647
// list := [ ] ;
25307: LD_ADDR_VAR 0 13
25311: PUSH
25312: EMPTY
25313: ST_TO_ADDR
// if x - r < 0 then
25314: LD_VAR 0 2
25318: PUSH
25319: LD_VAR 0 4
25323: MINUS
25324: PUSH
25325: LD_INT 0
25327: LESS
25328: IFFALSE 25340
// min_x := 0 else
25330: LD_ADDR_VAR 0 7
25334: PUSH
25335: LD_INT 0
25337: ST_TO_ADDR
25338: GO 25356
// min_x := x - r ;
25340: LD_ADDR_VAR 0 7
25344: PUSH
25345: LD_VAR 0 2
25349: PUSH
25350: LD_VAR 0 4
25354: MINUS
25355: ST_TO_ADDR
// if y - r < 0 then
25356: LD_VAR 0 3
25360: PUSH
25361: LD_VAR 0 4
25365: MINUS
25366: PUSH
25367: LD_INT 0
25369: LESS
25370: IFFALSE 25382
// min_y := 0 else
25372: LD_ADDR_VAR 0 8
25376: PUSH
25377: LD_INT 0
25379: ST_TO_ADDR
25380: GO 25398
// min_y := y - r ;
25382: LD_ADDR_VAR 0 8
25386: PUSH
25387: LD_VAR 0 3
25391: PUSH
25392: LD_VAR 0 4
25396: MINUS
25397: ST_TO_ADDR
// max_x := x + r ;
25398: LD_ADDR_VAR 0 9
25402: PUSH
25403: LD_VAR 0 2
25407: PUSH
25408: LD_VAR 0 4
25412: PLUS
25413: ST_TO_ADDR
// max_y := y + r ;
25414: LD_ADDR_VAR 0 10
25418: PUSH
25419: LD_VAR 0 3
25423: PUSH
25424: LD_VAR 0 4
25428: PLUS
25429: ST_TO_ADDR
// for _x = min_x to max_x do
25430: LD_ADDR_VAR 0 11
25434: PUSH
25435: DOUBLE
25436: LD_VAR 0 7
25440: DEC
25441: ST_TO_ADDR
25442: LD_VAR 0 9
25446: PUSH
25447: FOR_TO
25448: IFFALSE 25565
// for _y = min_y to max_y do
25450: LD_ADDR_VAR 0 12
25454: PUSH
25455: DOUBLE
25456: LD_VAR 0 8
25460: DEC
25461: ST_TO_ADDR
25462: LD_VAR 0 10
25466: PUSH
25467: FOR_TO
25468: IFFALSE 25561
// begin if not ValidHex ( _x , _y ) then
25470: LD_VAR 0 11
25474: PPUSH
25475: LD_VAR 0 12
25479: PPUSH
25480: CALL_OW 488
25484: NOT
25485: IFFALSE 25489
// continue ;
25487: GO 25467
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
25489: LD_VAR 0 11
25493: PPUSH
25494: LD_VAR 0 12
25498: PPUSH
25499: CALL_OW 351
25503: PUSH
25504: LD_VAR 0 11
25508: PPUSH
25509: LD_VAR 0 12
25513: PPUSH
25514: CALL_OW 554
25518: AND
25519: IFFALSE 25559
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
25521: LD_ADDR_VAR 0 13
25525: PUSH
25526: LD_VAR 0 13
25530: PPUSH
25531: LD_VAR 0 13
25535: PUSH
25536: LD_INT 1
25538: PLUS
25539: PPUSH
25540: LD_VAR 0 11
25544: PUSH
25545: LD_VAR 0 12
25549: PUSH
25550: EMPTY
25551: LIST
25552: LIST
25553: PPUSH
25554: CALL_OW 2
25558: ST_TO_ADDR
// end ;
25559: GO 25467
25561: POP
25562: POP
25563: GO 25447
25565: POP
25566: POP
// if not list then
25567: LD_VAR 0 13
25571: NOT
25572: IFFALSE 25576
// exit ;
25574: GO 25647
// for i in list do
25576: LD_ADDR_VAR 0 6
25580: PUSH
25581: LD_VAR 0 13
25585: PUSH
25586: FOR_IN
25587: IFFALSE 25645
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
25589: LD_VAR 0 1
25593: PPUSH
25594: LD_STRING M
25596: PUSH
25597: LD_VAR 0 6
25601: PUSH
25602: LD_INT 1
25604: ARRAY
25605: PUSH
25606: LD_VAR 0 6
25610: PUSH
25611: LD_INT 2
25613: ARRAY
25614: PUSH
25615: LD_INT 0
25617: PUSH
25618: LD_INT 0
25620: PUSH
25621: LD_INT 0
25623: PUSH
25624: LD_INT 0
25626: PUSH
25627: EMPTY
25628: LIST
25629: LIST
25630: LIST
25631: LIST
25632: LIST
25633: LIST
25634: LIST
25635: PUSH
25636: EMPTY
25637: LIST
25638: PPUSH
25639: CALL_OW 447
25643: GO 25586
25645: POP
25646: POP
// end ;
25647: LD_VAR 0 5
25651: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
25652: LD_EXP 92
25656: NOT
25657: IFFALSE 25707
25659: GO 25661
25661: DISABLE
// begin initHack := true ;
25662: LD_ADDR_EXP 92
25666: PUSH
25667: LD_INT 1
25669: ST_TO_ADDR
// hackTanks := [ ] ;
25670: LD_ADDR_EXP 93
25674: PUSH
25675: EMPTY
25676: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
25677: LD_ADDR_EXP 94
25681: PUSH
25682: EMPTY
25683: ST_TO_ADDR
// hackLimit := 3 ;
25684: LD_ADDR_EXP 95
25688: PUSH
25689: LD_INT 3
25691: ST_TO_ADDR
// hackDist := 12 ;
25692: LD_ADDR_EXP 96
25696: PUSH
25697: LD_INT 12
25699: ST_TO_ADDR
// hackCounter := [ ] ;
25700: LD_ADDR_EXP 97
25704: PUSH
25705: EMPTY
25706: ST_TO_ADDR
// end ;
25707: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
25708: LD_EXP 92
25712: PUSH
25713: LD_INT 34
25715: PUSH
25716: LD_INT 99
25718: PUSH
25719: EMPTY
25720: LIST
25721: LIST
25722: PPUSH
25723: CALL_OW 69
25727: AND
25728: IFFALSE 25981
25730: GO 25732
25732: DISABLE
25733: LD_INT 0
25735: PPUSH
25736: PPUSH
// begin enable ;
25737: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
25738: LD_ADDR_VAR 0 1
25742: PUSH
25743: LD_INT 34
25745: PUSH
25746: LD_INT 99
25748: PUSH
25749: EMPTY
25750: LIST
25751: LIST
25752: PPUSH
25753: CALL_OW 69
25757: PUSH
25758: FOR_IN
25759: IFFALSE 25979
// begin if not i in hackTanks then
25761: LD_VAR 0 1
25765: PUSH
25766: LD_EXP 93
25770: IN
25771: NOT
25772: IFFALSE 25855
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
25774: LD_ADDR_EXP 93
25778: PUSH
25779: LD_EXP 93
25783: PPUSH
25784: LD_EXP 93
25788: PUSH
25789: LD_INT 1
25791: PLUS
25792: PPUSH
25793: LD_VAR 0 1
25797: PPUSH
25798: CALL_OW 1
25802: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
25803: LD_ADDR_EXP 94
25807: PUSH
25808: LD_EXP 94
25812: PPUSH
25813: LD_EXP 94
25817: PUSH
25818: LD_INT 1
25820: PLUS
25821: PPUSH
25822: EMPTY
25823: PPUSH
25824: CALL_OW 1
25828: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
25829: LD_ADDR_EXP 97
25833: PUSH
25834: LD_EXP 97
25838: PPUSH
25839: LD_EXP 97
25843: PUSH
25844: LD_INT 1
25846: PLUS
25847: PPUSH
25848: EMPTY
25849: PPUSH
25850: CALL_OW 1
25854: ST_TO_ADDR
// end ; if not IsOk ( i ) then
25855: LD_VAR 0 1
25859: PPUSH
25860: CALL_OW 302
25864: NOT
25865: IFFALSE 25878
// begin HackUnlinkAll ( i ) ;
25867: LD_VAR 0 1
25871: PPUSH
25872: CALL 25984 0 1
// continue ;
25876: GO 25758
// end ; HackCheckCapturedStatus ( i ) ;
25878: LD_VAR 0 1
25882: PPUSH
25883: CALL 26427 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
25887: LD_ADDR_VAR 0 2
25891: PUSH
25892: LD_INT 81
25894: PUSH
25895: LD_VAR 0 1
25899: PPUSH
25900: CALL_OW 255
25904: PUSH
25905: EMPTY
25906: LIST
25907: LIST
25908: PUSH
25909: LD_INT 33
25911: PUSH
25912: LD_INT 3
25914: PUSH
25915: EMPTY
25916: LIST
25917: LIST
25918: PUSH
25919: LD_INT 91
25921: PUSH
25922: LD_VAR 0 1
25926: PUSH
25927: LD_EXP 96
25931: PUSH
25932: EMPTY
25933: LIST
25934: LIST
25935: LIST
25936: PUSH
25937: LD_INT 50
25939: PUSH
25940: EMPTY
25941: LIST
25942: PUSH
25943: EMPTY
25944: LIST
25945: LIST
25946: LIST
25947: LIST
25948: PPUSH
25949: CALL_OW 69
25953: ST_TO_ADDR
// if not tmp then
25954: LD_VAR 0 2
25958: NOT
25959: IFFALSE 25963
// continue ;
25961: GO 25758
// HackLink ( i , tmp ) ;
25963: LD_VAR 0 1
25967: PPUSH
25968: LD_VAR 0 2
25972: PPUSH
25973: CALL 26120 0 2
// end ;
25977: GO 25758
25979: POP
25980: POP
// end ;
25981: PPOPN 2
25983: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
25984: LD_INT 0
25986: PPUSH
25987: PPUSH
25988: PPUSH
// if not hack in hackTanks then
25989: LD_VAR 0 1
25993: PUSH
25994: LD_EXP 93
25998: IN
25999: NOT
26000: IFFALSE 26004
// exit ;
26002: GO 26115
// index := GetElementIndex ( hackTanks , hack ) ;
26004: LD_ADDR_VAR 0 4
26008: PUSH
26009: LD_EXP 93
26013: PPUSH
26014: LD_VAR 0 1
26018: PPUSH
26019: CALL 33732 0 2
26023: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
26024: LD_EXP 94
26028: PUSH
26029: LD_VAR 0 4
26033: ARRAY
26034: IFFALSE 26115
// begin for i in hackTanksCaptured [ index ] do
26036: LD_ADDR_VAR 0 3
26040: PUSH
26041: LD_EXP 94
26045: PUSH
26046: LD_VAR 0 4
26050: ARRAY
26051: PUSH
26052: FOR_IN
26053: IFFALSE 26079
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
26055: LD_VAR 0 3
26059: PUSH
26060: LD_INT 1
26062: ARRAY
26063: PPUSH
26064: LD_VAR 0 3
26068: PUSH
26069: LD_INT 2
26071: ARRAY
26072: PPUSH
26073: CALL_OW 235
26077: GO 26052
26079: POP
26080: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
26081: LD_ADDR_EXP 94
26085: PUSH
26086: LD_EXP 94
26090: PPUSH
26091: LD_VAR 0 4
26095: PPUSH
26096: EMPTY
26097: PPUSH
26098: CALL_OW 1
26102: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
26103: LD_VAR 0 1
26107: PPUSH
26108: LD_INT 0
26110: PPUSH
26111: CALL_OW 505
// end ; end ;
26115: LD_VAR 0 2
26119: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
26120: LD_INT 0
26122: PPUSH
26123: PPUSH
26124: PPUSH
// if not hack in hackTanks or not vehicles then
26125: LD_VAR 0 1
26129: PUSH
26130: LD_EXP 93
26134: IN
26135: NOT
26136: PUSH
26137: LD_VAR 0 2
26141: NOT
26142: OR
26143: IFFALSE 26147
// exit ;
26145: GO 26422
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
26147: LD_ADDR_VAR 0 2
26151: PUSH
26152: LD_VAR 0 1
26156: PPUSH
26157: LD_VAR 0 2
26161: PPUSH
26162: LD_INT 1
26164: PPUSH
26165: LD_INT 1
26167: PPUSH
26168: CALL 34382 0 4
26172: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
26173: LD_ADDR_VAR 0 5
26177: PUSH
26178: LD_EXP 93
26182: PPUSH
26183: LD_VAR 0 1
26187: PPUSH
26188: CALL 33732 0 2
26192: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
26193: LD_EXP 94
26197: PUSH
26198: LD_VAR 0 5
26202: ARRAY
26203: PUSH
26204: LD_EXP 95
26208: LESS
26209: IFFALSE 26398
// begin for i := 1 to vehicles do
26211: LD_ADDR_VAR 0 4
26215: PUSH
26216: DOUBLE
26217: LD_INT 1
26219: DEC
26220: ST_TO_ADDR
26221: LD_VAR 0 2
26225: PUSH
26226: FOR_TO
26227: IFFALSE 26396
// begin if hackTanksCaptured [ index ] = hackLimit then
26229: LD_EXP 94
26233: PUSH
26234: LD_VAR 0 5
26238: ARRAY
26239: PUSH
26240: LD_EXP 95
26244: EQUAL
26245: IFFALSE 26249
// break ;
26247: GO 26396
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
26249: LD_ADDR_EXP 97
26253: PUSH
26254: LD_EXP 97
26258: PPUSH
26259: LD_VAR 0 5
26263: PPUSH
26264: LD_EXP 97
26268: PUSH
26269: LD_VAR 0 5
26273: ARRAY
26274: PUSH
26275: LD_INT 1
26277: PLUS
26278: PPUSH
26279: CALL_OW 1
26283: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
26284: LD_ADDR_EXP 94
26288: PUSH
26289: LD_EXP 94
26293: PPUSH
26294: LD_VAR 0 5
26298: PUSH
26299: LD_EXP 94
26303: PUSH
26304: LD_VAR 0 5
26308: ARRAY
26309: PUSH
26310: LD_INT 1
26312: PLUS
26313: PUSH
26314: EMPTY
26315: LIST
26316: LIST
26317: PPUSH
26318: LD_VAR 0 2
26322: PUSH
26323: LD_VAR 0 4
26327: ARRAY
26328: PUSH
26329: LD_VAR 0 2
26333: PUSH
26334: LD_VAR 0 4
26338: ARRAY
26339: PPUSH
26340: CALL_OW 255
26344: PUSH
26345: EMPTY
26346: LIST
26347: LIST
26348: PPUSH
26349: CALL 33947 0 3
26353: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
26354: LD_VAR 0 2
26358: PUSH
26359: LD_VAR 0 4
26363: ARRAY
26364: PPUSH
26365: LD_VAR 0 1
26369: PPUSH
26370: CALL_OW 255
26374: PPUSH
26375: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
26379: LD_VAR 0 2
26383: PUSH
26384: LD_VAR 0 4
26388: ARRAY
26389: PPUSH
26390: CALL_OW 141
// end ;
26394: GO 26226
26396: POP
26397: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
26398: LD_VAR 0 1
26402: PPUSH
26403: LD_EXP 94
26407: PUSH
26408: LD_VAR 0 5
26412: ARRAY
26413: PUSH
26414: LD_INT 0
26416: PLUS
26417: PPUSH
26418: CALL_OW 505
// end ;
26422: LD_VAR 0 3
26426: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
26427: LD_INT 0
26429: PPUSH
26430: PPUSH
26431: PPUSH
26432: PPUSH
// if not hack in hackTanks then
26433: LD_VAR 0 1
26437: PUSH
26438: LD_EXP 93
26442: IN
26443: NOT
26444: IFFALSE 26448
// exit ;
26446: GO 26688
// index := GetElementIndex ( hackTanks , hack ) ;
26448: LD_ADDR_VAR 0 4
26452: PUSH
26453: LD_EXP 93
26457: PPUSH
26458: LD_VAR 0 1
26462: PPUSH
26463: CALL 33732 0 2
26467: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
26468: LD_ADDR_VAR 0 3
26472: PUSH
26473: DOUBLE
26474: LD_EXP 94
26478: PUSH
26479: LD_VAR 0 4
26483: ARRAY
26484: INC
26485: ST_TO_ADDR
26486: LD_INT 1
26488: PUSH
26489: FOR_DOWNTO
26490: IFFALSE 26662
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
26492: LD_ADDR_VAR 0 5
26496: PUSH
26497: LD_EXP 94
26501: PUSH
26502: LD_VAR 0 4
26506: ARRAY
26507: PUSH
26508: LD_VAR 0 3
26512: ARRAY
26513: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
26514: LD_VAR 0 5
26518: PUSH
26519: LD_INT 1
26521: ARRAY
26522: PPUSH
26523: CALL_OW 302
26527: NOT
26528: PUSH
26529: LD_VAR 0 5
26533: PUSH
26534: LD_INT 1
26536: ARRAY
26537: PPUSH
26538: CALL_OW 255
26542: PUSH
26543: LD_VAR 0 1
26547: PPUSH
26548: CALL_OW 255
26552: NONEQUAL
26553: OR
26554: IFFALSE 26660
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
26556: LD_VAR 0 5
26560: PUSH
26561: LD_INT 1
26563: ARRAY
26564: PPUSH
26565: CALL_OW 305
26569: PUSH
26570: LD_VAR 0 5
26574: PUSH
26575: LD_INT 1
26577: ARRAY
26578: PPUSH
26579: CALL_OW 255
26583: PUSH
26584: LD_VAR 0 1
26588: PPUSH
26589: CALL_OW 255
26593: EQUAL
26594: AND
26595: IFFALSE 26619
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
26597: LD_VAR 0 5
26601: PUSH
26602: LD_INT 1
26604: ARRAY
26605: PPUSH
26606: LD_VAR 0 5
26610: PUSH
26611: LD_INT 2
26613: ARRAY
26614: PPUSH
26615: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
26619: LD_ADDR_EXP 94
26623: PUSH
26624: LD_EXP 94
26628: PPUSH
26629: LD_VAR 0 4
26633: PPUSH
26634: LD_EXP 94
26638: PUSH
26639: LD_VAR 0 4
26643: ARRAY
26644: PPUSH
26645: LD_VAR 0 3
26649: PPUSH
26650: CALL_OW 3
26654: PPUSH
26655: CALL_OW 1
26659: ST_TO_ADDR
// end ; end ;
26660: GO 26489
26662: POP
26663: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
26664: LD_VAR 0 1
26668: PPUSH
26669: LD_EXP 94
26673: PUSH
26674: LD_VAR 0 4
26678: ARRAY
26679: PUSH
26680: LD_INT 0
26682: PLUS
26683: PPUSH
26684: CALL_OW 505
// end ;
26688: LD_VAR 0 2
26692: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
26693: LD_INT 0
26695: PPUSH
26696: PPUSH
26697: PPUSH
26698: PPUSH
// if not hack in hackTanks then
26699: LD_VAR 0 1
26703: PUSH
26704: LD_EXP 93
26708: IN
26709: NOT
26710: IFFALSE 26714
// exit ;
26712: GO 26799
// index := GetElementIndex ( hackTanks , hack ) ;
26714: LD_ADDR_VAR 0 5
26718: PUSH
26719: LD_EXP 93
26723: PPUSH
26724: LD_VAR 0 1
26728: PPUSH
26729: CALL 33732 0 2
26733: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
26734: LD_ADDR_VAR 0 4
26738: PUSH
26739: DOUBLE
26740: LD_INT 1
26742: DEC
26743: ST_TO_ADDR
26744: LD_EXP 94
26748: PUSH
26749: LD_VAR 0 5
26753: ARRAY
26754: PUSH
26755: FOR_TO
26756: IFFALSE 26797
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
26758: LD_EXP 94
26762: PUSH
26763: LD_VAR 0 5
26767: ARRAY
26768: PUSH
26769: LD_VAR 0 4
26773: ARRAY
26774: PUSH
26775: LD_INT 1
26777: ARRAY
26778: PUSH
26779: LD_VAR 0 2
26783: EQUAL
26784: IFFALSE 26795
// KillUnit ( vehicle ) ;
26786: LD_VAR 0 2
26790: PPUSH
26791: CALL_OW 66
26795: GO 26755
26797: POP
26798: POP
// end ;
26799: LD_VAR 0 3
26803: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
26804: LD_EXP 98
26808: NOT
26809: IFFALSE 26844
26811: GO 26813
26813: DISABLE
// begin initMiner := true ;
26814: LD_ADDR_EXP 98
26818: PUSH
26819: LD_INT 1
26821: ST_TO_ADDR
// minersList := [ ] ;
26822: LD_ADDR_EXP 99
26826: PUSH
26827: EMPTY
26828: ST_TO_ADDR
// minerMinesList := [ ] ;
26829: LD_ADDR_EXP 100
26833: PUSH
26834: EMPTY
26835: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
26836: LD_ADDR_EXP 101
26840: PUSH
26841: LD_INT 5
26843: ST_TO_ADDR
// end ;
26844: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
26845: LD_EXP 98
26849: PUSH
26850: LD_INT 34
26852: PUSH
26853: LD_INT 81
26855: PUSH
26856: EMPTY
26857: LIST
26858: LIST
26859: PPUSH
26860: CALL_OW 69
26864: AND
26865: IFFALSE 27326
26867: GO 26869
26869: DISABLE
26870: LD_INT 0
26872: PPUSH
26873: PPUSH
26874: PPUSH
26875: PPUSH
// begin enable ;
26876: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
26877: LD_ADDR_VAR 0 1
26881: PUSH
26882: LD_INT 34
26884: PUSH
26885: LD_INT 81
26887: PUSH
26888: EMPTY
26889: LIST
26890: LIST
26891: PPUSH
26892: CALL_OW 69
26896: PUSH
26897: FOR_IN
26898: IFFALSE 26970
// begin if not i in minersList then
26900: LD_VAR 0 1
26904: PUSH
26905: LD_EXP 99
26909: IN
26910: NOT
26911: IFFALSE 26968
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
26913: LD_ADDR_EXP 99
26917: PUSH
26918: LD_EXP 99
26922: PPUSH
26923: LD_EXP 99
26927: PUSH
26928: LD_INT 1
26930: PLUS
26931: PPUSH
26932: LD_VAR 0 1
26936: PPUSH
26937: CALL_OW 1
26941: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
26942: LD_ADDR_EXP 100
26946: PUSH
26947: LD_EXP 100
26951: PPUSH
26952: LD_EXP 100
26956: PUSH
26957: LD_INT 1
26959: PLUS
26960: PPUSH
26961: EMPTY
26962: PPUSH
26963: CALL_OW 1
26967: ST_TO_ADDR
// end end ;
26968: GO 26897
26970: POP
26971: POP
// for i := minerMinesList downto 1 do
26972: LD_ADDR_VAR 0 1
26976: PUSH
26977: DOUBLE
26978: LD_EXP 100
26982: INC
26983: ST_TO_ADDR
26984: LD_INT 1
26986: PUSH
26987: FOR_DOWNTO
26988: IFFALSE 27324
// begin if IsLive ( minersList [ i ] ) then
26990: LD_EXP 99
26994: PUSH
26995: LD_VAR 0 1
26999: ARRAY
27000: PPUSH
27001: CALL_OW 300
27005: IFFALSE 27033
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
27007: LD_EXP 99
27011: PUSH
27012: LD_VAR 0 1
27016: ARRAY
27017: PPUSH
27018: LD_EXP 100
27022: PUSH
27023: LD_VAR 0 1
27027: ARRAY
27028: PPUSH
27029: CALL_OW 505
// if not minerMinesList [ i ] then
27033: LD_EXP 100
27037: PUSH
27038: LD_VAR 0 1
27042: ARRAY
27043: NOT
27044: IFFALSE 27048
// continue ;
27046: GO 26987
// for j := minerMinesList [ i ] downto 1 do
27048: LD_ADDR_VAR 0 2
27052: PUSH
27053: DOUBLE
27054: LD_EXP 100
27058: PUSH
27059: LD_VAR 0 1
27063: ARRAY
27064: INC
27065: ST_TO_ADDR
27066: LD_INT 1
27068: PUSH
27069: FOR_DOWNTO
27070: IFFALSE 27320
// begin side := GetSide ( minersList [ i ] ) ;
27072: LD_ADDR_VAR 0 3
27076: PUSH
27077: LD_EXP 99
27081: PUSH
27082: LD_VAR 0 1
27086: ARRAY
27087: PPUSH
27088: CALL_OW 255
27092: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
27093: LD_ADDR_VAR 0 4
27097: PUSH
27098: LD_EXP 100
27102: PUSH
27103: LD_VAR 0 1
27107: ARRAY
27108: PUSH
27109: LD_VAR 0 2
27113: ARRAY
27114: PUSH
27115: LD_INT 1
27117: ARRAY
27118: PPUSH
27119: LD_EXP 100
27123: PUSH
27124: LD_VAR 0 1
27128: ARRAY
27129: PUSH
27130: LD_VAR 0 2
27134: ARRAY
27135: PUSH
27136: LD_INT 2
27138: ARRAY
27139: PPUSH
27140: CALL_OW 428
27144: ST_TO_ADDR
// if not tmp then
27145: LD_VAR 0 4
27149: NOT
27150: IFFALSE 27154
// continue ;
27152: GO 27069
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
27154: LD_VAR 0 4
27158: PUSH
27159: LD_INT 81
27161: PUSH
27162: LD_VAR 0 3
27166: PUSH
27167: EMPTY
27168: LIST
27169: LIST
27170: PPUSH
27171: CALL_OW 69
27175: IN
27176: PUSH
27177: LD_EXP 100
27181: PUSH
27182: LD_VAR 0 1
27186: ARRAY
27187: PUSH
27188: LD_VAR 0 2
27192: ARRAY
27193: PUSH
27194: LD_INT 1
27196: ARRAY
27197: PPUSH
27198: LD_EXP 100
27202: PUSH
27203: LD_VAR 0 1
27207: ARRAY
27208: PUSH
27209: LD_VAR 0 2
27213: ARRAY
27214: PUSH
27215: LD_INT 2
27217: ARRAY
27218: PPUSH
27219: CALL_OW 458
27223: AND
27224: IFFALSE 27318
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
27226: LD_EXP 100
27230: PUSH
27231: LD_VAR 0 1
27235: ARRAY
27236: PUSH
27237: LD_VAR 0 2
27241: ARRAY
27242: PUSH
27243: LD_INT 1
27245: ARRAY
27246: PPUSH
27247: LD_EXP 100
27251: PUSH
27252: LD_VAR 0 1
27256: ARRAY
27257: PUSH
27258: LD_VAR 0 2
27262: ARRAY
27263: PUSH
27264: LD_INT 2
27266: ARRAY
27267: PPUSH
27268: LD_VAR 0 3
27272: PPUSH
27273: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
27277: LD_ADDR_EXP 100
27281: PUSH
27282: LD_EXP 100
27286: PPUSH
27287: LD_VAR 0 1
27291: PPUSH
27292: LD_EXP 100
27296: PUSH
27297: LD_VAR 0 1
27301: ARRAY
27302: PPUSH
27303: LD_VAR 0 2
27307: PPUSH
27308: CALL_OW 3
27312: PPUSH
27313: CALL_OW 1
27317: ST_TO_ADDR
// end ; end ;
27318: GO 27069
27320: POP
27321: POP
// end ;
27322: GO 26987
27324: POP
27325: POP
// end ;
27326: PPOPN 4
27328: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
27329: LD_INT 0
27331: PPUSH
27332: PPUSH
// result := false ;
27333: LD_ADDR_VAR 0 4
27337: PUSH
27338: LD_INT 0
27340: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
27341: LD_VAR 0 1
27345: PPUSH
27346: CALL_OW 264
27350: PUSH
27351: LD_INT 81
27353: EQUAL
27354: NOT
27355: IFFALSE 27359
// exit ;
27357: GO 27599
// index := GetElementIndex ( minersList , unit ) ;
27359: LD_ADDR_VAR 0 5
27363: PUSH
27364: LD_EXP 99
27368: PPUSH
27369: LD_VAR 0 1
27373: PPUSH
27374: CALL 33732 0 2
27378: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
27379: LD_EXP 100
27383: PUSH
27384: LD_VAR 0 5
27388: ARRAY
27389: PUSH
27390: LD_EXP 101
27394: GREATEREQUAL
27395: IFFALSE 27399
// exit ;
27397: GO 27599
// ComMoveXY ( unit , x , y ) ;
27399: LD_VAR 0 1
27403: PPUSH
27404: LD_VAR 0 2
27408: PPUSH
27409: LD_VAR 0 3
27413: PPUSH
27414: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
27418: LD_INT 35
27420: PPUSH
27421: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
27425: LD_VAR 0 1
27429: PPUSH
27430: LD_VAR 0 2
27434: PPUSH
27435: LD_VAR 0 3
27439: PPUSH
27440: CALL 65087 0 3
27444: NOT
27445: PUSH
27446: LD_VAR 0 1
27450: PPUSH
27451: CALL_OW 314
27455: AND
27456: IFFALSE 27460
// exit ;
27458: GO 27599
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
27460: LD_VAR 0 2
27464: PPUSH
27465: LD_VAR 0 3
27469: PPUSH
27470: CALL_OW 428
27474: PUSH
27475: LD_VAR 0 1
27479: EQUAL
27480: PUSH
27481: LD_VAR 0 1
27485: PPUSH
27486: CALL_OW 314
27490: NOT
27491: AND
27492: IFFALSE 27418
// PlaySoundXY ( x , y , PlantMine ) ;
27494: LD_VAR 0 2
27498: PPUSH
27499: LD_VAR 0 3
27503: PPUSH
27504: LD_STRING PlantMine
27506: PPUSH
27507: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
27511: LD_VAR 0 2
27515: PPUSH
27516: LD_VAR 0 3
27520: PPUSH
27521: LD_VAR 0 1
27525: PPUSH
27526: CALL_OW 255
27530: PPUSH
27531: LD_INT 0
27533: PPUSH
27534: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
27538: LD_ADDR_EXP 100
27542: PUSH
27543: LD_EXP 100
27547: PPUSH
27548: LD_VAR 0 5
27552: PUSH
27553: LD_EXP 100
27557: PUSH
27558: LD_VAR 0 5
27562: ARRAY
27563: PUSH
27564: LD_INT 1
27566: PLUS
27567: PUSH
27568: EMPTY
27569: LIST
27570: LIST
27571: PPUSH
27572: LD_VAR 0 2
27576: PUSH
27577: LD_VAR 0 3
27581: PUSH
27582: EMPTY
27583: LIST
27584: LIST
27585: PPUSH
27586: CALL 33947 0 3
27590: ST_TO_ADDR
// result := true ;
27591: LD_ADDR_VAR 0 4
27595: PUSH
27596: LD_INT 1
27598: ST_TO_ADDR
// end ;
27599: LD_VAR 0 4
27603: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
27604: LD_INT 0
27606: PPUSH
27607: PPUSH
27608: PPUSH
// if not unit in minersList then
27609: LD_VAR 0 1
27613: PUSH
27614: LD_EXP 99
27618: IN
27619: NOT
27620: IFFALSE 27624
// exit ;
27622: GO 28016
// index := GetElementIndex ( minersList , unit ) ;
27624: LD_ADDR_VAR 0 6
27628: PUSH
27629: LD_EXP 99
27633: PPUSH
27634: LD_VAR 0 1
27638: PPUSH
27639: CALL 33732 0 2
27643: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
27644: LD_ADDR_VAR 0 5
27648: PUSH
27649: DOUBLE
27650: LD_EXP 100
27654: PUSH
27655: LD_VAR 0 6
27659: ARRAY
27660: INC
27661: ST_TO_ADDR
27662: LD_INT 1
27664: PUSH
27665: FOR_DOWNTO
27666: IFFALSE 27827
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
27668: LD_EXP 100
27672: PUSH
27673: LD_VAR 0 6
27677: ARRAY
27678: PUSH
27679: LD_VAR 0 5
27683: ARRAY
27684: PUSH
27685: LD_INT 1
27687: ARRAY
27688: PUSH
27689: LD_VAR 0 2
27693: EQUAL
27694: PUSH
27695: LD_EXP 100
27699: PUSH
27700: LD_VAR 0 6
27704: ARRAY
27705: PUSH
27706: LD_VAR 0 5
27710: ARRAY
27711: PUSH
27712: LD_INT 2
27714: ARRAY
27715: PUSH
27716: LD_VAR 0 3
27720: EQUAL
27721: AND
27722: IFFALSE 27825
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
27724: LD_EXP 100
27728: PUSH
27729: LD_VAR 0 6
27733: ARRAY
27734: PUSH
27735: LD_VAR 0 5
27739: ARRAY
27740: PUSH
27741: LD_INT 1
27743: ARRAY
27744: PPUSH
27745: LD_EXP 100
27749: PUSH
27750: LD_VAR 0 6
27754: ARRAY
27755: PUSH
27756: LD_VAR 0 5
27760: ARRAY
27761: PUSH
27762: LD_INT 2
27764: ARRAY
27765: PPUSH
27766: LD_VAR 0 1
27770: PPUSH
27771: CALL_OW 255
27775: PPUSH
27776: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
27780: LD_ADDR_EXP 100
27784: PUSH
27785: LD_EXP 100
27789: PPUSH
27790: LD_VAR 0 6
27794: PPUSH
27795: LD_EXP 100
27799: PUSH
27800: LD_VAR 0 6
27804: ARRAY
27805: PPUSH
27806: LD_VAR 0 5
27810: PPUSH
27811: CALL_OW 3
27815: PPUSH
27816: CALL_OW 1
27820: ST_TO_ADDR
// exit ;
27821: POP
27822: POP
27823: GO 28016
// end ; end ;
27825: GO 27665
27827: POP
27828: POP
// for i := minerMinesList [ index ] downto 1 do
27829: LD_ADDR_VAR 0 5
27833: PUSH
27834: DOUBLE
27835: LD_EXP 100
27839: PUSH
27840: LD_VAR 0 6
27844: ARRAY
27845: INC
27846: ST_TO_ADDR
27847: LD_INT 1
27849: PUSH
27850: FOR_DOWNTO
27851: IFFALSE 28014
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
27853: LD_EXP 100
27857: PUSH
27858: LD_VAR 0 6
27862: ARRAY
27863: PUSH
27864: LD_VAR 0 5
27868: ARRAY
27869: PUSH
27870: LD_INT 1
27872: ARRAY
27873: PPUSH
27874: LD_EXP 100
27878: PUSH
27879: LD_VAR 0 6
27883: ARRAY
27884: PUSH
27885: LD_VAR 0 5
27889: ARRAY
27890: PUSH
27891: LD_INT 2
27893: ARRAY
27894: PPUSH
27895: LD_VAR 0 2
27899: PPUSH
27900: LD_VAR 0 3
27904: PPUSH
27905: CALL_OW 298
27909: PUSH
27910: LD_INT 6
27912: LESS
27913: IFFALSE 28012
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
27915: LD_EXP 100
27919: PUSH
27920: LD_VAR 0 6
27924: ARRAY
27925: PUSH
27926: LD_VAR 0 5
27930: ARRAY
27931: PUSH
27932: LD_INT 1
27934: ARRAY
27935: PPUSH
27936: LD_EXP 100
27940: PUSH
27941: LD_VAR 0 6
27945: ARRAY
27946: PUSH
27947: LD_VAR 0 5
27951: ARRAY
27952: PUSH
27953: LD_INT 2
27955: ARRAY
27956: PPUSH
27957: LD_VAR 0 1
27961: PPUSH
27962: CALL_OW 255
27966: PPUSH
27967: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
27971: LD_ADDR_EXP 100
27975: PUSH
27976: LD_EXP 100
27980: PPUSH
27981: LD_VAR 0 6
27985: PPUSH
27986: LD_EXP 100
27990: PUSH
27991: LD_VAR 0 6
27995: ARRAY
27996: PPUSH
27997: LD_VAR 0 5
28001: PPUSH
28002: CALL_OW 3
28006: PPUSH
28007: CALL_OW 1
28011: ST_TO_ADDR
// end ; end ;
28012: GO 27850
28014: POP
28015: POP
// end ;
28016: LD_VAR 0 4
28020: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
28021: LD_INT 0
28023: PPUSH
28024: PPUSH
28025: PPUSH
28026: PPUSH
28027: PPUSH
28028: PPUSH
28029: PPUSH
28030: PPUSH
28031: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
28032: LD_VAR 0 1
28036: PPUSH
28037: CALL_OW 264
28041: PUSH
28042: LD_INT 81
28044: EQUAL
28045: NOT
28046: PUSH
28047: LD_VAR 0 1
28051: PUSH
28052: LD_EXP 99
28056: IN
28057: NOT
28058: OR
28059: IFFALSE 28063
// exit ;
28061: GO 28385
// index := GetElementIndex ( minersList , unit ) ;
28063: LD_ADDR_VAR 0 6
28067: PUSH
28068: LD_EXP 99
28072: PPUSH
28073: LD_VAR 0 1
28077: PPUSH
28078: CALL 33732 0 2
28082: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
28083: LD_ADDR_VAR 0 8
28087: PUSH
28088: LD_EXP 101
28092: PUSH
28093: LD_EXP 100
28097: PUSH
28098: LD_VAR 0 6
28102: ARRAY
28103: MINUS
28104: ST_TO_ADDR
// if not minesFreeAmount then
28105: LD_VAR 0 8
28109: NOT
28110: IFFALSE 28114
// exit ;
28112: GO 28385
// tmp := [ ] ;
28114: LD_ADDR_VAR 0 7
28118: PUSH
28119: EMPTY
28120: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
28121: LD_ADDR_VAR 0 5
28125: PUSH
28126: DOUBLE
28127: LD_INT 1
28129: DEC
28130: ST_TO_ADDR
28131: LD_VAR 0 8
28135: PUSH
28136: FOR_TO
28137: IFFALSE 28332
// begin _d := rand ( 0 , 5 ) ;
28139: LD_ADDR_VAR 0 11
28143: PUSH
28144: LD_INT 0
28146: PPUSH
28147: LD_INT 5
28149: PPUSH
28150: CALL_OW 12
28154: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
28155: LD_ADDR_VAR 0 12
28159: PUSH
28160: LD_INT 2
28162: PPUSH
28163: LD_INT 6
28165: PPUSH
28166: CALL_OW 12
28170: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
28171: LD_ADDR_VAR 0 9
28175: PUSH
28176: LD_VAR 0 2
28180: PPUSH
28181: LD_VAR 0 11
28185: PPUSH
28186: LD_VAR 0 12
28190: PPUSH
28191: CALL_OW 272
28195: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
28196: LD_ADDR_VAR 0 10
28200: PUSH
28201: LD_VAR 0 3
28205: PPUSH
28206: LD_VAR 0 11
28210: PPUSH
28211: LD_VAR 0 12
28215: PPUSH
28216: CALL_OW 273
28220: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
28221: LD_VAR 0 9
28225: PPUSH
28226: LD_VAR 0 10
28230: PPUSH
28231: CALL_OW 488
28235: PUSH
28236: LD_VAR 0 9
28240: PUSH
28241: LD_VAR 0 10
28245: PUSH
28246: EMPTY
28247: LIST
28248: LIST
28249: PUSH
28250: LD_VAR 0 7
28254: IN
28255: NOT
28256: AND
28257: PUSH
28258: LD_VAR 0 9
28262: PPUSH
28263: LD_VAR 0 10
28267: PPUSH
28268: CALL_OW 458
28272: NOT
28273: AND
28274: IFFALSE 28316
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
28276: LD_ADDR_VAR 0 7
28280: PUSH
28281: LD_VAR 0 7
28285: PPUSH
28286: LD_VAR 0 7
28290: PUSH
28291: LD_INT 1
28293: PLUS
28294: PPUSH
28295: LD_VAR 0 9
28299: PUSH
28300: LD_VAR 0 10
28304: PUSH
28305: EMPTY
28306: LIST
28307: LIST
28308: PPUSH
28309: CALL_OW 1
28313: ST_TO_ADDR
28314: GO 28330
// i := i - 1 ;
28316: LD_ADDR_VAR 0 5
28320: PUSH
28321: LD_VAR 0 5
28325: PUSH
28326: LD_INT 1
28328: MINUS
28329: ST_TO_ADDR
// end ;
28330: GO 28136
28332: POP
28333: POP
// for i in tmp do
28334: LD_ADDR_VAR 0 5
28338: PUSH
28339: LD_VAR 0 7
28343: PUSH
28344: FOR_IN
28345: IFFALSE 28383
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
28347: LD_VAR 0 1
28351: PPUSH
28352: LD_VAR 0 5
28356: PUSH
28357: LD_INT 1
28359: ARRAY
28360: PPUSH
28361: LD_VAR 0 5
28365: PUSH
28366: LD_INT 2
28368: ARRAY
28369: PPUSH
28370: CALL 27329 0 3
28374: NOT
28375: IFFALSE 28381
// exit ;
28377: POP
28378: POP
28379: GO 28385
28381: GO 28344
28383: POP
28384: POP
// end ;
28385: LD_VAR 0 4
28389: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
28390: LD_INT 0
28392: PPUSH
28393: PPUSH
28394: PPUSH
28395: PPUSH
28396: PPUSH
28397: PPUSH
28398: PPUSH
// if not GetClass ( unit ) = class_sniper then
28399: LD_VAR 0 1
28403: PPUSH
28404: CALL_OW 257
28408: PUSH
28409: LD_INT 5
28411: EQUAL
28412: NOT
28413: IFFALSE 28417
// exit ;
28415: GO 28805
// dist := 8 ;
28417: LD_ADDR_VAR 0 5
28421: PUSH
28422: LD_INT 8
28424: ST_TO_ADDR
// viewRange := 12 ;
28425: LD_ADDR_VAR 0 7
28429: PUSH
28430: LD_INT 12
28432: ST_TO_ADDR
// side := GetSide ( unit ) ;
28433: LD_ADDR_VAR 0 6
28437: PUSH
28438: LD_VAR 0 1
28442: PPUSH
28443: CALL_OW 255
28447: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
28448: LD_INT 61
28450: PPUSH
28451: LD_VAR 0 6
28455: PPUSH
28456: CALL_OW 321
28460: PUSH
28461: LD_INT 2
28463: EQUAL
28464: IFFALSE 28474
// viewRange := 16 ;
28466: LD_ADDR_VAR 0 7
28470: PUSH
28471: LD_INT 16
28473: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
28474: LD_VAR 0 1
28478: PPUSH
28479: LD_VAR 0 2
28483: PPUSH
28484: LD_VAR 0 3
28488: PPUSH
28489: CALL_OW 297
28493: PUSH
28494: LD_VAR 0 5
28498: GREATER
28499: IFFALSE 28578
// begin ComMoveXY ( unit , x , y ) ;
28501: LD_VAR 0 1
28505: PPUSH
28506: LD_VAR 0 2
28510: PPUSH
28511: LD_VAR 0 3
28515: PPUSH
28516: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
28520: LD_INT 35
28522: PPUSH
28523: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
28527: LD_VAR 0 1
28531: PPUSH
28532: LD_VAR 0 2
28536: PPUSH
28537: LD_VAR 0 3
28541: PPUSH
28542: CALL 65087 0 3
28546: NOT
28547: IFFALSE 28551
// exit ;
28549: GO 28805
// until GetDistUnitXY ( unit , x , y ) < dist ;
28551: LD_VAR 0 1
28555: PPUSH
28556: LD_VAR 0 2
28560: PPUSH
28561: LD_VAR 0 3
28565: PPUSH
28566: CALL_OW 297
28570: PUSH
28571: LD_VAR 0 5
28575: LESS
28576: IFFALSE 28520
// end ; ComTurnXY ( unit , x , y ) ;
28578: LD_VAR 0 1
28582: PPUSH
28583: LD_VAR 0 2
28587: PPUSH
28588: LD_VAR 0 3
28592: PPUSH
28593: CALL_OW 118
// wait ( 5 ) ;
28597: LD_INT 5
28599: PPUSH
28600: CALL_OW 67
// _d := GetDir ( unit ) ;
28604: LD_ADDR_VAR 0 10
28608: PUSH
28609: LD_VAR 0 1
28613: PPUSH
28614: CALL_OW 254
28618: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
28619: LD_ADDR_VAR 0 8
28623: PUSH
28624: LD_VAR 0 1
28628: PPUSH
28629: CALL_OW 250
28633: PPUSH
28634: LD_VAR 0 10
28638: PPUSH
28639: LD_VAR 0 5
28643: PPUSH
28644: CALL_OW 272
28648: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
28649: LD_ADDR_VAR 0 9
28653: PUSH
28654: LD_VAR 0 1
28658: PPUSH
28659: CALL_OW 251
28663: PPUSH
28664: LD_VAR 0 10
28668: PPUSH
28669: LD_VAR 0 5
28673: PPUSH
28674: CALL_OW 273
28678: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
28679: LD_VAR 0 8
28683: PPUSH
28684: LD_VAR 0 9
28688: PPUSH
28689: CALL_OW 488
28693: NOT
28694: IFFALSE 28698
// exit ;
28696: GO 28805
// ComAnimCustom ( unit , 1 ) ;
28698: LD_VAR 0 1
28702: PPUSH
28703: LD_INT 1
28705: PPUSH
28706: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
28710: LD_VAR 0 8
28714: PPUSH
28715: LD_VAR 0 9
28719: PPUSH
28720: LD_VAR 0 6
28724: PPUSH
28725: LD_VAR 0 7
28729: PPUSH
28730: CALL_OW 330
// repeat wait ( 1 ) ;
28734: LD_INT 1
28736: PPUSH
28737: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
28741: LD_VAR 0 1
28745: PPUSH
28746: CALL_OW 316
28750: PUSH
28751: LD_VAR 0 1
28755: PPUSH
28756: CALL_OW 314
28760: OR
28761: PUSH
28762: LD_VAR 0 1
28766: PPUSH
28767: CALL_OW 302
28771: NOT
28772: OR
28773: PUSH
28774: LD_VAR 0 1
28778: PPUSH
28779: CALL_OW 301
28783: OR
28784: IFFALSE 28734
// RemoveSeeing ( _x , _y , side ) ;
28786: LD_VAR 0 8
28790: PPUSH
28791: LD_VAR 0 9
28795: PPUSH
28796: LD_VAR 0 6
28800: PPUSH
28801: CALL_OW 331
// end ; end_of_file
28805: LD_VAR 0 4
28809: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
28810: LD_INT 0
28812: PPUSH
28813: PPUSH
// if exist_mode then
28814: LD_VAR 0 2
28818: IFFALSE 28843
// unit := CreateCharacter ( prefix & ident ) else
28820: LD_ADDR_VAR 0 5
28824: PUSH
28825: LD_VAR 0 3
28829: PUSH
28830: LD_VAR 0 1
28834: STR
28835: PPUSH
28836: CALL_OW 34
28840: ST_TO_ADDR
28841: GO 28858
// unit := NewCharacter ( ident ) ;
28843: LD_ADDR_VAR 0 5
28847: PUSH
28848: LD_VAR 0 1
28852: PPUSH
28853: CALL_OW 25
28857: ST_TO_ADDR
// result := unit ;
28858: LD_ADDR_VAR 0 4
28862: PUSH
28863: LD_VAR 0 5
28867: ST_TO_ADDR
// end ;
28868: LD_VAR 0 4
28872: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
28873: LD_INT 0
28875: PPUSH
28876: PPUSH
// if not side or not nation then
28877: LD_VAR 0 1
28881: NOT
28882: PUSH
28883: LD_VAR 0 2
28887: NOT
28888: OR
28889: IFFALSE 28893
// exit ;
28891: GO 29661
// case nation of nation_american :
28893: LD_VAR 0 2
28897: PUSH
28898: LD_INT 1
28900: DOUBLE
28901: EQUAL
28902: IFTRUE 28906
28904: GO 29120
28906: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
28907: LD_ADDR_VAR 0 4
28911: PUSH
28912: LD_INT 35
28914: PUSH
28915: LD_INT 45
28917: PUSH
28918: LD_INT 46
28920: PUSH
28921: LD_INT 47
28923: PUSH
28924: LD_INT 82
28926: PUSH
28927: LD_INT 83
28929: PUSH
28930: LD_INT 84
28932: PUSH
28933: LD_INT 85
28935: PUSH
28936: LD_INT 86
28938: PUSH
28939: LD_INT 1
28941: PUSH
28942: LD_INT 2
28944: PUSH
28945: LD_INT 6
28947: PUSH
28948: LD_INT 15
28950: PUSH
28951: LD_INT 16
28953: PUSH
28954: LD_INT 7
28956: PUSH
28957: LD_INT 12
28959: PUSH
28960: LD_INT 13
28962: PUSH
28963: LD_INT 10
28965: PUSH
28966: LD_INT 14
28968: PUSH
28969: LD_INT 20
28971: PUSH
28972: LD_INT 21
28974: PUSH
28975: LD_INT 22
28977: PUSH
28978: LD_INT 25
28980: PUSH
28981: LD_INT 32
28983: PUSH
28984: LD_INT 27
28986: PUSH
28987: LD_INT 36
28989: PUSH
28990: LD_INT 69
28992: PUSH
28993: LD_INT 39
28995: PUSH
28996: LD_INT 34
28998: PUSH
28999: LD_INT 40
29001: PUSH
29002: LD_INT 48
29004: PUSH
29005: LD_INT 49
29007: PUSH
29008: LD_INT 50
29010: PUSH
29011: LD_INT 51
29013: PUSH
29014: LD_INT 52
29016: PUSH
29017: LD_INT 53
29019: PUSH
29020: LD_INT 54
29022: PUSH
29023: LD_INT 55
29025: PUSH
29026: LD_INT 56
29028: PUSH
29029: LD_INT 57
29031: PUSH
29032: LD_INT 58
29034: PUSH
29035: LD_INT 59
29037: PUSH
29038: LD_INT 60
29040: PUSH
29041: LD_INT 61
29043: PUSH
29044: LD_INT 62
29046: PUSH
29047: LD_INT 80
29049: PUSH
29050: LD_INT 82
29052: PUSH
29053: LD_INT 83
29055: PUSH
29056: LD_INT 84
29058: PUSH
29059: LD_INT 85
29061: PUSH
29062: LD_INT 86
29064: PUSH
29065: EMPTY
29066: LIST
29067: LIST
29068: LIST
29069: LIST
29070: LIST
29071: LIST
29072: LIST
29073: LIST
29074: LIST
29075: LIST
29076: LIST
29077: LIST
29078: LIST
29079: LIST
29080: LIST
29081: LIST
29082: LIST
29083: LIST
29084: LIST
29085: LIST
29086: LIST
29087: LIST
29088: LIST
29089: LIST
29090: LIST
29091: LIST
29092: LIST
29093: LIST
29094: LIST
29095: LIST
29096: LIST
29097: LIST
29098: LIST
29099: LIST
29100: LIST
29101: LIST
29102: LIST
29103: LIST
29104: LIST
29105: LIST
29106: LIST
29107: LIST
29108: LIST
29109: LIST
29110: LIST
29111: LIST
29112: LIST
29113: LIST
29114: LIST
29115: LIST
29116: LIST
29117: ST_TO_ADDR
29118: GO 29585
29120: LD_INT 2
29122: DOUBLE
29123: EQUAL
29124: IFTRUE 29128
29126: GO 29354
29128: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
29129: LD_ADDR_VAR 0 4
29133: PUSH
29134: LD_INT 35
29136: PUSH
29137: LD_INT 45
29139: PUSH
29140: LD_INT 46
29142: PUSH
29143: LD_INT 47
29145: PUSH
29146: LD_INT 82
29148: PUSH
29149: LD_INT 83
29151: PUSH
29152: LD_INT 84
29154: PUSH
29155: LD_INT 85
29157: PUSH
29158: LD_INT 87
29160: PUSH
29161: LD_INT 70
29163: PUSH
29164: LD_INT 1
29166: PUSH
29167: LD_INT 11
29169: PUSH
29170: LD_INT 3
29172: PUSH
29173: LD_INT 4
29175: PUSH
29176: LD_INT 5
29178: PUSH
29179: LD_INT 6
29181: PUSH
29182: LD_INT 15
29184: PUSH
29185: LD_INT 18
29187: PUSH
29188: LD_INT 7
29190: PUSH
29191: LD_INT 17
29193: PUSH
29194: LD_INT 8
29196: PUSH
29197: LD_INT 20
29199: PUSH
29200: LD_INT 21
29202: PUSH
29203: LD_INT 22
29205: PUSH
29206: LD_INT 72
29208: PUSH
29209: LD_INT 26
29211: PUSH
29212: LD_INT 69
29214: PUSH
29215: LD_INT 39
29217: PUSH
29218: LD_INT 40
29220: PUSH
29221: LD_INT 41
29223: PUSH
29224: LD_INT 42
29226: PUSH
29227: LD_INT 43
29229: PUSH
29230: LD_INT 48
29232: PUSH
29233: LD_INT 49
29235: PUSH
29236: LD_INT 50
29238: PUSH
29239: LD_INT 51
29241: PUSH
29242: LD_INT 52
29244: PUSH
29245: LD_INT 53
29247: PUSH
29248: LD_INT 54
29250: PUSH
29251: LD_INT 55
29253: PUSH
29254: LD_INT 56
29256: PUSH
29257: LD_INT 60
29259: PUSH
29260: LD_INT 61
29262: PUSH
29263: LD_INT 62
29265: PUSH
29266: LD_INT 66
29268: PUSH
29269: LD_INT 67
29271: PUSH
29272: LD_INT 68
29274: PUSH
29275: LD_INT 81
29277: PUSH
29278: LD_INT 82
29280: PUSH
29281: LD_INT 83
29283: PUSH
29284: LD_INT 84
29286: PUSH
29287: LD_INT 85
29289: PUSH
29290: LD_INT 87
29292: PUSH
29293: LD_INT 88
29295: PUSH
29296: EMPTY
29297: LIST
29298: LIST
29299: LIST
29300: LIST
29301: LIST
29302: LIST
29303: LIST
29304: LIST
29305: LIST
29306: LIST
29307: LIST
29308: LIST
29309: LIST
29310: LIST
29311: LIST
29312: LIST
29313: LIST
29314: LIST
29315: LIST
29316: LIST
29317: LIST
29318: LIST
29319: LIST
29320: LIST
29321: LIST
29322: LIST
29323: LIST
29324: LIST
29325: LIST
29326: LIST
29327: LIST
29328: LIST
29329: LIST
29330: LIST
29331: LIST
29332: LIST
29333: LIST
29334: LIST
29335: LIST
29336: LIST
29337: LIST
29338: LIST
29339: LIST
29340: LIST
29341: LIST
29342: LIST
29343: LIST
29344: LIST
29345: LIST
29346: LIST
29347: LIST
29348: LIST
29349: LIST
29350: LIST
29351: ST_TO_ADDR
29352: GO 29585
29354: LD_INT 3
29356: DOUBLE
29357: EQUAL
29358: IFTRUE 29362
29360: GO 29584
29362: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
29363: LD_ADDR_VAR 0 4
29367: PUSH
29368: LD_INT 46
29370: PUSH
29371: LD_INT 47
29373: PUSH
29374: LD_INT 1
29376: PUSH
29377: LD_INT 2
29379: PUSH
29380: LD_INT 82
29382: PUSH
29383: LD_INT 83
29385: PUSH
29386: LD_INT 84
29388: PUSH
29389: LD_INT 85
29391: PUSH
29392: LD_INT 86
29394: PUSH
29395: LD_INT 11
29397: PUSH
29398: LD_INT 9
29400: PUSH
29401: LD_INT 20
29403: PUSH
29404: LD_INT 19
29406: PUSH
29407: LD_INT 21
29409: PUSH
29410: LD_INT 24
29412: PUSH
29413: LD_INT 22
29415: PUSH
29416: LD_INT 25
29418: PUSH
29419: LD_INT 28
29421: PUSH
29422: LD_INT 29
29424: PUSH
29425: LD_INT 30
29427: PUSH
29428: LD_INT 31
29430: PUSH
29431: LD_INT 37
29433: PUSH
29434: LD_INT 38
29436: PUSH
29437: LD_INT 32
29439: PUSH
29440: LD_INT 27
29442: PUSH
29443: LD_INT 33
29445: PUSH
29446: LD_INT 69
29448: PUSH
29449: LD_INT 39
29451: PUSH
29452: LD_INT 34
29454: PUSH
29455: LD_INT 40
29457: PUSH
29458: LD_INT 71
29460: PUSH
29461: LD_INT 23
29463: PUSH
29464: LD_INT 44
29466: PUSH
29467: LD_INT 48
29469: PUSH
29470: LD_INT 49
29472: PUSH
29473: LD_INT 50
29475: PUSH
29476: LD_INT 51
29478: PUSH
29479: LD_INT 52
29481: PUSH
29482: LD_INT 53
29484: PUSH
29485: LD_INT 54
29487: PUSH
29488: LD_INT 55
29490: PUSH
29491: LD_INT 56
29493: PUSH
29494: LD_INT 57
29496: PUSH
29497: LD_INT 58
29499: PUSH
29500: LD_INT 59
29502: PUSH
29503: LD_INT 63
29505: PUSH
29506: LD_INT 64
29508: PUSH
29509: LD_INT 65
29511: PUSH
29512: LD_INT 82
29514: PUSH
29515: LD_INT 83
29517: PUSH
29518: LD_INT 84
29520: PUSH
29521: LD_INT 85
29523: PUSH
29524: LD_INT 86
29526: PUSH
29527: EMPTY
29528: LIST
29529: LIST
29530: LIST
29531: LIST
29532: LIST
29533: LIST
29534: LIST
29535: LIST
29536: LIST
29537: LIST
29538: LIST
29539: LIST
29540: LIST
29541: LIST
29542: LIST
29543: LIST
29544: LIST
29545: LIST
29546: LIST
29547: LIST
29548: LIST
29549: LIST
29550: LIST
29551: LIST
29552: LIST
29553: LIST
29554: LIST
29555: LIST
29556: LIST
29557: LIST
29558: LIST
29559: LIST
29560: LIST
29561: LIST
29562: LIST
29563: LIST
29564: LIST
29565: LIST
29566: LIST
29567: LIST
29568: LIST
29569: LIST
29570: LIST
29571: LIST
29572: LIST
29573: LIST
29574: LIST
29575: LIST
29576: LIST
29577: LIST
29578: LIST
29579: LIST
29580: LIST
29581: ST_TO_ADDR
29582: GO 29585
29584: POP
// if state > - 1 and state < 3 then
29585: LD_VAR 0 3
29589: PUSH
29590: LD_INT 1
29592: NEG
29593: GREATER
29594: PUSH
29595: LD_VAR 0 3
29599: PUSH
29600: LD_INT 3
29602: LESS
29603: AND
29604: IFFALSE 29661
// for i in result do
29606: LD_ADDR_VAR 0 5
29610: PUSH
29611: LD_VAR 0 4
29615: PUSH
29616: FOR_IN
29617: IFFALSE 29659
// if GetTech ( i , side ) <> state then
29619: LD_VAR 0 5
29623: PPUSH
29624: LD_VAR 0 1
29628: PPUSH
29629: CALL_OW 321
29633: PUSH
29634: LD_VAR 0 3
29638: NONEQUAL
29639: IFFALSE 29657
// result := result diff i ;
29641: LD_ADDR_VAR 0 4
29645: PUSH
29646: LD_VAR 0 4
29650: PUSH
29651: LD_VAR 0 5
29655: DIFF
29656: ST_TO_ADDR
29657: GO 29616
29659: POP
29660: POP
// end ;
29661: LD_VAR 0 4
29665: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
29666: LD_INT 0
29668: PPUSH
29669: PPUSH
29670: PPUSH
// result := true ;
29671: LD_ADDR_VAR 0 3
29675: PUSH
29676: LD_INT 1
29678: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
29679: LD_ADDR_VAR 0 5
29683: PUSH
29684: LD_VAR 0 2
29688: PPUSH
29689: CALL_OW 480
29693: ST_TO_ADDR
// if not tmp then
29694: LD_VAR 0 5
29698: NOT
29699: IFFALSE 29703
// exit ;
29701: GO 29752
// for i in tmp do
29703: LD_ADDR_VAR 0 4
29707: PUSH
29708: LD_VAR 0 5
29712: PUSH
29713: FOR_IN
29714: IFFALSE 29750
// if GetTech ( i , side ) <> state_researched then
29716: LD_VAR 0 4
29720: PPUSH
29721: LD_VAR 0 1
29725: PPUSH
29726: CALL_OW 321
29730: PUSH
29731: LD_INT 2
29733: NONEQUAL
29734: IFFALSE 29748
// begin result := false ;
29736: LD_ADDR_VAR 0 3
29740: PUSH
29741: LD_INT 0
29743: ST_TO_ADDR
// exit ;
29744: POP
29745: POP
29746: GO 29752
// end ;
29748: GO 29713
29750: POP
29751: POP
// end ;
29752: LD_VAR 0 3
29756: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
29757: LD_INT 0
29759: PPUSH
29760: PPUSH
29761: PPUSH
29762: PPUSH
29763: PPUSH
29764: PPUSH
29765: PPUSH
29766: PPUSH
29767: PPUSH
29768: PPUSH
29769: PPUSH
29770: PPUSH
29771: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
29772: LD_VAR 0 1
29776: NOT
29777: PUSH
29778: LD_VAR 0 1
29782: PPUSH
29783: CALL_OW 257
29787: PUSH
29788: LD_INT 9
29790: NONEQUAL
29791: OR
29792: IFFALSE 29796
// exit ;
29794: GO 30369
// side := GetSide ( unit ) ;
29796: LD_ADDR_VAR 0 9
29800: PUSH
29801: LD_VAR 0 1
29805: PPUSH
29806: CALL_OW 255
29810: ST_TO_ADDR
// tech_space := tech_spacanom ;
29811: LD_ADDR_VAR 0 12
29815: PUSH
29816: LD_INT 29
29818: ST_TO_ADDR
// tech_time := tech_taurad ;
29819: LD_ADDR_VAR 0 13
29823: PUSH
29824: LD_INT 28
29826: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
29827: LD_ADDR_VAR 0 11
29831: PUSH
29832: LD_VAR 0 1
29836: PPUSH
29837: CALL_OW 310
29841: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
29842: LD_VAR 0 11
29846: PPUSH
29847: CALL_OW 247
29851: PUSH
29852: LD_INT 2
29854: EQUAL
29855: IFFALSE 29859
// exit ;
29857: GO 30369
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
29859: LD_ADDR_VAR 0 8
29863: PUSH
29864: LD_INT 81
29866: PUSH
29867: LD_VAR 0 9
29871: PUSH
29872: EMPTY
29873: LIST
29874: LIST
29875: PUSH
29876: LD_INT 3
29878: PUSH
29879: LD_INT 21
29881: PUSH
29882: LD_INT 3
29884: PUSH
29885: EMPTY
29886: LIST
29887: LIST
29888: PUSH
29889: EMPTY
29890: LIST
29891: LIST
29892: PUSH
29893: EMPTY
29894: LIST
29895: LIST
29896: PPUSH
29897: CALL_OW 69
29901: ST_TO_ADDR
// if not tmp then
29902: LD_VAR 0 8
29906: NOT
29907: IFFALSE 29911
// exit ;
29909: GO 30369
// if in_unit then
29911: LD_VAR 0 11
29915: IFFALSE 29939
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
29917: LD_ADDR_VAR 0 10
29921: PUSH
29922: LD_VAR 0 8
29926: PPUSH
29927: LD_VAR 0 11
29931: PPUSH
29932: CALL_OW 74
29936: ST_TO_ADDR
29937: GO 29959
// enemy := NearestUnitToUnit ( tmp , unit ) ;
29939: LD_ADDR_VAR 0 10
29943: PUSH
29944: LD_VAR 0 8
29948: PPUSH
29949: LD_VAR 0 1
29953: PPUSH
29954: CALL_OW 74
29958: ST_TO_ADDR
// if not enemy then
29959: LD_VAR 0 10
29963: NOT
29964: IFFALSE 29968
// exit ;
29966: GO 30369
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
29968: LD_VAR 0 11
29972: PUSH
29973: LD_VAR 0 11
29977: PPUSH
29978: LD_VAR 0 10
29982: PPUSH
29983: CALL_OW 296
29987: PUSH
29988: LD_INT 13
29990: GREATER
29991: AND
29992: PUSH
29993: LD_VAR 0 1
29997: PPUSH
29998: LD_VAR 0 10
30002: PPUSH
30003: CALL_OW 296
30007: PUSH
30008: LD_INT 12
30010: GREATER
30011: OR
30012: IFFALSE 30016
// exit ;
30014: GO 30369
// missile := [ 1 ] ;
30016: LD_ADDR_VAR 0 14
30020: PUSH
30021: LD_INT 1
30023: PUSH
30024: EMPTY
30025: LIST
30026: ST_TO_ADDR
// if Researched ( side , tech_space ) then
30027: LD_VAR 0 9
30031: PPUSH
30032: LD_VAR 0 12
30036: PPUSH
30037: CALL_OW 325
30041: IFFALSE 30070
// missile := Replace ( missile , missile + 1 , 2 ) ;
30043: LD_ADDR_VAR 0 14
30047: PUSH
30048: LD_VAR 0 14
30052: PPUSH
30053: LD_VAR 0 14
30057: PUSH
30058: LD_INT 1
30060: PLUS
30061: PPUSH
30062: LD_INT 2
30064: PPUSH
30065: CALL_OW 1
30069: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
30070: LD_VAR 0 9
30074: PPUSH
30075: LD_VAR 0 13
30079: PPUSH
30080: CALL_OW 325
30084: PUSH
30085: LD_VAR 0 10
30089: PPUSH
30090: CALL_OW 255
30094: PPUSH
30095: LD_VAR 0 13
30099: PPUSH
30100: CALL_OW 325
30104: NOT
30105: AND
30106: IFFALSE 30135
// missile := Replace ( missile , missile + 1 , 3 ) ;
30108: LD_ADDR_VAR 0 14
30112: PUSH
30113: LD_VAR 0 14
30117: PPUSH
30118: LD_VAR 0 14
30122: PUSH
30123: LD_INT 1
30125: PLUS
30126: PPUSH
30127: LD_INT 3
30129: PPUSH
30130: CALL_OW 1
30134: ST_TO_ADDR
// if missile < 2 then
30135: LD_VAR 0 14
30139: PUSH
30140: LD_INT 2
30142: LESS
30143: IFFALSE 30147
// exit ;
30145: GO 30369
// x := GetX ( enemy ) ;
30147: LD_ADDR_VAR 0 4
30151: PUSH
30152: LD_VAR 0 10
30156: PPUSH
30157: CALL_OW 250
30161: ST_TO_ADDR
// y := GetY ( enemy ) ;
30162: LD_ADDR_VAR 0 5
30166: PUSH
30167: LD_VAR 0 10
30171: PPUSH
30172: CALL_OW 251
30176: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
30177: LD_ADDR_VAR 0 6
30181: PUSH
30182: LD_VAR 0 4
30186: PUSH
30187: LD_INT 1
30189: NEG
30190: PPUSH
30191: LD_INT 1
30193: PPUSH
30194: CALL_OW 12
30198: PLUS
30199: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
30200: LD_ADDR_VAR 0 7
30204: PUSH
30205: LD_VAR 0 5
30209: PUSH
30210: LD_INT 1
30212: NEG
30213: PPUSH
30214: LD_INT 1
30216: PPUSH
30217: CALL_OW 12
30221: PLUS
30222: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
30223: LD_VAR 0 6
30227: PPUSH
30228: LD_VAR 0 7
30232: PPUSH
30233: CALL_OW 488
30237: NOT
30238: IFFALSE 30260
// begin _x := x ;
30240: LD_ADDR_VAR 0 6
30244: PUSH
30245: LD_VAR 0 4
30249: ST_TO_ADDR
// _y := y ;
30250: LD_ADDR_VAR 0 7
30254: PUSH
30255: LD_VAR 0 5
30259: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
30260: LD_ADDR_VAR 0 3
30264: PUSH
30265: LD_INT 1
30267: PPUSH
30268: LD_VAR 0 14
30272: PPUSH
30273: CALL_OW 12
30277: ST_TO_ADDR
// case i of 1 :
30278: LD_VAR 0 3
30282: PUSH
30283: LD_INT 1
30285: DOUBLE
30286: EQUAL
30287: IFTRUE 30291
30289: GO 30308
30291: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
30292: LD_VAR 0 1
30296: PPUSH
30297: LD_VAR 0 10
30301: PPUSH
30302: CALL_OW 115
30306: GO 30369
30308: LD_INT 2
30310: DOUBLE
30311: EQUAL
30312: IFTRUE 30316
30314: GO 30338
30316: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
30317: LD_VAR 0 1
30321: PPUSH
30322: LD_VAR 0 6
30326: PPUSH
30327: LD_VAR 0 7
30331: PPUSH
30332: CALL_OW 153
30336: GO 30369
30338: LD_INT 3
30340: DOUBLE
30341: EQUAL
30342: IFTRUE 30346
30344: GO 30368
30346: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
30347: LD_VAR 0 1
30351: PPUSH
30352: LD_VAR 0 6
30356: PPUSH
30357: LD_VAR 0 7
30361: PPUSH
30362: CALL_OW 154
30366: GO 30369
30368: POP
// end ;
30369: LD_VAR 0 2
30373: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
30374: LD_INT 0
30376: PPUSH
30377: PPUSH
30378: PPUSH
30379: PPUSH
30380: PPUSH
30381: PPUSH
// if not unit or not building then
30382: LD_VAR 0 1
30386: NOT
30387: PUSH
30388: LD_VAR 0 2
30392: NOT
30393: OR
30394: IFFALSE 30398
// exit ;
30396: GO 30556
// x := GetX ( building ) ;
30398: LD_ADDR_VAR 0 5
30402: PUSH
30403: LD_VAR 0 2
30407: PPUSH
30408: CALL_OW 250
30412: ST_TO_ADDR
// y := GetY ( building ) ;
30413: LD_ADDR_VAR 0 6
30417: PUSH
30418: LD_VAR 0 2
30422: PPUSH
30423: CALL_OW 251
30427: ST_TO_ADDR
// for i = 0 to 5 do
30428: LD_ADDR_VAR 0 4
30432: PUSH
30433: DOUBLE
30434: LD_INT 0
30436: DEC
30437: ST_TO_ADDR
30438: LD_INT 5
30440: PUSH
30441: FOR_TO
30442: IFFALSE 30554
// begin _x := ShiftX ( x , i , 3 ) ;
30444: LD_ADDR_VAR 0 7
30448: PUSH
30449: LD_VAR 0 5
30453: PPUSH
30454: LD_VAR 0 4
30458: PPUSH
30459: LD_INT 3
30461: PPUSH
30462: CALL_OW 272
30466: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
30467: LD_ADDR_VAR 0 8
30471: PUSH
30472: LD_VAR 0 6
30476: PPUSH
30477: LD_VAR 0 4
30481: PPUSH
30482: LD_INT 3
30484: PPUSH
30485: CALL_OW 273
30489: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
30490: LD_VAR 0 7
30494: PPUSH
30495: LD_VAR 0 8
30499: PPUSH
30500: CALL_OW 488
30504: NOT
30505: IFFALSE 30509
// continue ;
30507: GO 30441
// if HexInfo ( _x , _y ) = 0 then
30509: LD_VAR 0 7
30513: PPUSH
30514: LD_VAR 0 8
30518: PPUSH
30519: CALL_OW 428
30523: PUSH
30524: LD_INT 0
30526: EQUAL
30527: IFFALSE 30552
// begin ComMoveXY ( unit , _x , _y ) ;
30529: LD_VAR 0 1
30533: PPUSH
30534: LD_VAR 0 7
30538: PPUSH
30539: LD_VAR 0 8
30543: PPUSH
30544: CALL_OW 111
// exit ;
30548: POP
30549: POP
30550: GO 30556
// end ; end ;
30552: GO 30441
30554: POP
30555: POP
// end ;
30556: LD_VAR 0 3
30560: RET
// export function ScanBase ( side , base_area ) ; begin
30561: LD_INT 0
30563: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
30564: LD_ADDR_VAR 0 3
30568: PUSH
30569: LD_VAR 0 2
30573: PPUSH
30574: LD_INT 81
30576: PUSH
30577: LD_VAR 0 1
30581: PUSH
30582: EMPTY
30583: LIST
30584: LIST
30585: PPUSH
30586: CALL_OW 70
30590: ST_TO_ADDR
// end ;
30591: LD_VAR 0 3
30595: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
30596: LD_INT 0
30598: PPUSH
30599: PPUSH
30600: PPUSH
30601: PPUSH
// result := false ;
30602: LD_ADDR_VAR 0 2
30606: PUSH
30607: LD_INT 0
30609: ST_TO_ADDR
// side := GetSide ( unit ) ;
30610: LD_ADDR_VAR 0 3
30614: PUSH
30615: LD_VAR 0 1
30619: PPUSH
30620: CALL_OW 255
30624: ST_TO_ADDR
// nat := GetNation ( unit ) ;
30625: LD_ADDR_VAR 0 4
30629: PUSH
30630: LD_VAR 0 1
30634: PPUSH
30635: CALL_OW 248
30639: ST_TO_ADDR
// case nat of 1 :
30640: LD_VAR 0 4
30644: PUSH
30645: LD_INT 1
30647: DOUBLE
30648: EQUAL
30649: IFTRUE 30653
30651: GO 30664
30653: POP
// tech := tech_lassight ; 2 :
30654: LD_ADDR_VAR 0 5
30658: PUSH
30659: LD_INT 12
30661: ST_TO_ADDR
30662: GO 30703
30664: LD_INT 2
30666: DOUBLE
30667: EQUAL
30668: IFTRUE 30672
30670: GO 30683
30672: POP
// tech := tech_mortar ; 3 :
30673: LD_ADDR_VAR 0 5
30677: PUSH
30678: LD_INT 41
30680: ST_TO_ADDR
30681: GO 30703
30683: LD_INT 3
30685: DOUBLE
30686: EQUAL
30687: IFTRUE 30691
30689: GO 30702
30691: POP
// tech := tech_bazooka ; end ;
30692: LD_ADDR_VAR 0 5
30696: PUSH
30697: LD_INT 44
30699: ST_TO_ADDR
30700: GO 30703
30702: POP
// if Researched ( side , tech ) then
30703: LD_VAR 0 3
30707: PPUSH
30708: LD_VAR 0 5
30712: PPUSH
30713: CALL_OW 325
30717: IFFALSE 30744
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
30719: LD_ADDR_VAR 0 2
30723: PUSH
30724: LD_INT 5
30726: PUSH
30727: LD_INT 8
30729: PUSH
30730: LD_INT 9
30732: PUSH
30733: EMPTY
30734: LIST
30735: LIST
30736: LIST
30737: PUSH
30738: LD_VAR 0 4
30742: ARRAY
30743: ST_TO_ADDR
// end ;
30744: LD_VAR 0 2
30748: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
30749: LD_INT 0
30751: PPUSH
30752: PPUSH
30753: PPUSH
// if not mines then
30754: LD_VAR 0 2
30758: NOT
30759: IFFALSE 30763
// exit ;
30761: GO 30907
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
30763: LD_ADDR_VAR 0 5
30767: PUSH
30768: LD_INT 81
30770: PUSH
30771: LD_VAR 0 1
30775: PUSH
30776: EMPTY
30777: LIST
30778: LIST
30779: PUSH
30780: LD_INT 3
30782: PUSH
30783: LD_INT 21
30785: PUSH
30786: LD_INT 3
30788: PUSH
30789: EMPTY
30790: LIST
30791: LIST
30792: PUSH
30793: EMPTY
30794: LIST
30795: LIST
30796: PUSH
30797: EMPTY
30798: LIST
30799: LIST
30800: PPUSH
30801: CALL_OW 69
30805: ST_TO_ADDR
// for i in mines do
30806: LD_ADDR_VAR 0 4
30810: PUSH
30811: LD_VAR 0 2
30815: PUSH
30816: FOR_IN
30817: IFFALSE 30905
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
30819: LD_VAR 0 4
30823: PUSH
30824: LD_INT 1
30826: ARRAY
30827: PPUSH
30828: LD_VAR 0 4
30832: PUSH
30833: LD_INT 2
30835: ARRAY
30836: PPUSH
30837: CALL_OW 458
30841: NOT
30842: IFFALSE 30846
// continue ;
30844: GO 30816
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
30846: LD_VAR 0 4
30850: PUSH
30851: LD_INT 1
30853: ARRAY
30854: PPUSH
30855: LD_VAR 0 4
30859: PUSH
30860: LD_INT 2
30862: ARRAY
30863: PPUSH
30864: CALL_OW 428
30868: PUSH
30869: LD_VAR 0 5
30873: IN
30874: IFFALSE 30903
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
30876: LD_VAR 0 4
30880: PUSH
30881: LD_INT 1
30883: ARRAY
30884: PPUSH
30885: LD_VAR 0 4
30889: PUSH
30890: LD_INT 2
30892: ARRAY
30893: PPUSH
30894: LD_VAR 0 1
30898: PPUSH
30899: CALL_OW 456
// end ;
30903: GO 30816
30905: POP
30906: POP
// end ;
30907: LD_VAR 0 3
30911: RET
// export function Count ( array ) ; var i ; begin
30912: LD_INT 0
30914: PPUSH
30915: PPUSH
// result := 0 ;
30916: LD_ADDR_VAR 0 2
30920: PUSH
30921: LD_INT 0
30923: ST_TO_ADDR
// for i in array do
30924: LD_ADDR_VAR 0 3
30928: PUSH
30929: LD_VAR 0 1
30933: PUSH
30934: FOR_IN
30935: IFFALSE 30959
// if i then
30937: LD_VAR 0 3
30941: IFFALSE 30957
// result := result + 1 ;
30943: LD_ADDR_VAR 0 2
30947: PUSH
30948: LD_VAR 0 2
30952: PUSH
30953: LD_INT 1
30955: PLUS
30956: ST_TO_ADDR
30957: GO 30934
30959: POP
30960: POP
// end ;
30961: LD_VAR 0 2
30965: RET
// export function IsEmpty ( building ) ; begin
30966: LD_INT 0
30968: PPUSH
// if not building then
30969: LD_VAR 0 1
30973: NOT
30974: IFFALSE 30978
// exit ;
30976: GO 31021
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
30978: LD_ADDR_VAR 0 2
30982: PUSH
30983: LD_VAR 0 1
30987: PUSH
30988: LD_INT 22
30990: PUSH
30991: LD_VAR 0 1
30995: PPUSH
30996: CALL_OW 255
31000: PUSH
31001: EMPTY
31002: LIST
31003: LIST
31004: PUSH
31005: LD_INT 58
31007: PUSH
31008: EMPTY
31009: LIST
31010: PUSH
31011: EMPTY
31012: LIST
31013: LIST
31014: PPUSH
31015: CALL_OW 69
31019: IN
31020: ST_TO_ADDR
// end ;
31021: LD_VAR 0 2
31025: RET
// export function IsNotFull ( building ) ; var places ; begin
31026: LD_INT 0
31028: PPUSH
31029: PPUSH
// if not building then
31030: LD_VAR 0 1
31034: NOT
31035: IFFALSE 31039
// exit ;
31037: GO 31210
// result := false ;
31039: LD_ADDR_VAR 0 2
31043: PUSH
31044: LD_INT 0
31046: ST_TO_ADDR
// places := 0 ;
31047: LD_ADDR_VAR 0 3
31051: PUSH
31052: LD_INT 0
31054: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
31055: LD_VAR 0 1
31059: PPUSH
31060: CALL_OW 266
31064: PUSH
31065: LD_INT 0
31067: DOUBLE
31068: EQUAL
31069: IFTRUE 31127
31071: LD_INT 1
31073: DOUBLE
31074: EQUAL
31075: IFTRUE 31127
31077: LD_INT 6
31079: DOUBLE
31080: EQUAL
31081: IFTRUE 31127
31083: LD_INT 7
31085: DOUBLE
31086: EQUAL
31087: IFTRUE 31127
31089: LD_INT 8
31091: DOUBLE
31092: EQUAL
31093: IFTRUE 31127
31095: LD_INT 4
31097: DOUBLE
31098: EQUAL
31099: IFTRUE 31127
31101: LD_INT 5
31103: DOUBLE
31104: EQUAL
31105: IFTRUE 31127
31107: LD_INT 2
31109: DOUBLE
31110: EQUAL
31111: IFTRUE 31127
31113: LD_INT 3
31115: DOUBLE
31116: EQUAL
31117: IFTRUE 31127
31119: LD_INT 35
31121: DOUBLE
31122: EQUAL
31123: IFTRUE 31127
31125: GO 31138
31127: POP
// places := 6 ; b_bunker , b_breastwork :
31128: LD_ADDR_VAR 0 3
31132: PUSH
31133: LD_INT 6
31135: ST_TO_ADDR
31136: GO 31183
31138: LD_INT 32
31140: DOUBLE
31141: EQUAL
31142: IFTRUE 31152
31144: LD_INT 31
31146: DOUBLE
31147: EQUAL
31148: IFTRUE 31152
31150: GO 31163
31152: POP
// places := 1 ; b_control_tower :
31153: LD_ADDR_VAR 0 3
31157: PUSH
31158: LD_INT 1
31160: ST_TO_ADDR
31161: GO 31183
31163: LD_INT 36
31165: DOUBLE
31166: EQUAL
31167: IFTRUE 31171
31169: GO 31182
31171: POP
// places := 3 ; end ;
31172: LD_ADDR_VAR 0 3
31176: PUSH
31177: LD_INT 3
31179: ST_TO_ADDR
31180: GO 31183
31182: POP
// if places then
31183: LD_VAR 0 3
31187: IFFALSE 31210
// result := UnitsInside ( building ) < places ;
31189: LD_ADDR_VAR 0 2
31193: PUSH
31194: LD_VAR 0 1
31198: PPUSH
31199: CALL_OW 313
31203: PUSH
31204: LD_VAR 0 3
31208: LESS
31209: ST_TO_ADDR
// end ;
31210: LD_VAR 0 2
31214: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
31215: LD_INT 0
31217: PPUSH
31218: PPUSH
31219: PPUSH
31220: PPUSH
// tmp := [ ] ;
31221: LD_ADDR_VAR 0 3
31225: PUSH
31226: EMPTY
31227: ST_TO_ADDR
// list := [ ] ;
31228: LD_ADDR_VAR 0 5
31232: PUSH
31233: EMPTY
31234: ST_TO_ADDR
// for i = 16 to 25 do
31235: LD_ADDR_VAR 0 4
31239: PUSH
31240: DOUBLE
31241: LD_INT 16
31243: DEC
31244: ST_TO_ADDR
31245: LD_INT 25
31247: PUSH
31248: FOR_TO
31249: IFFALSE 31322
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
31251: LD_ADDR_VAR 0 3
31255: PUSH
31256: LD_VAR 0 3
31260: PUSH
31261: LD_INT 22
31263: PUSH
31264: LD_VAR 0 1
31268: PPUSH
31269: CALL_OW 255
31273: PUSH
31274: EMPTY
31275: LIST
31276: LIST
31277: PUSH
31278: LD_INT 91
31280: PUSH
31281: LD_VAR 0 1
31285: PUSH
31286: LD_INT 6
31288: PUSH
31289: EMPTY
31290: LIST
31291: LIST
31292: LIST
31293: PUSH
31294: LD_INT 30
31296: PUSH
31297: LD_VAR 0 4
31301: PUSH
31302: EMPTY
31303: LIST
31304: LIST
31305: PUSH
31306: EMPTY
31307: LIST
31308: LIST
31309: LIST
31310: PUSH
31311: EMPTY
31312: LIST
31313: PPUSH
31314: CALL_OW 69
31318: ADD
31319: ST_TO_ADDR
31320: GO 31248
31322: POP
31323: POP
// for i = 1 to tmp do
31324: LD_ADDR_VAR 0 4
31328: PUSH
31329: DOUBLE
31330: LD_INT 1
31332: DEC
31333: ST_TO_ADDR
31334: LD_VAR 0 3
31338: PUSH
31339: FOR_TO
31340: IFFALSE 31428
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
31342: LD_ADDR_VAR 0 5
31346: PUSH
31347: LD_VAR 0 5
31351: PUSH
31352: LD_VAR 0 3
31356: PUSH
31357: LD_VAR 0 4
31361: ARRAY
31362: PPUSH
31363: CALL_OW 266
31367: PUSH
31368: LD_VAR 0 3
31372: PUSH
31373: LD_VAR 0 4
31377: ARRAY
31378: PPUSH
31379: CALL_OW 250
31383: PUSH
31384: LD_VAR 0 3
31388: PUSH
31389: LD_VAR 0 4
31393: ARRAY
31394: PPUSH
31395: CALL_OW 251
31399: PUSH
31400: LD_VAR 0 3
31404: PUSH
31405: LD_VAR 0 4
31409: ARRAY
31410: PPUSH
31411: CALL_OW 254
31415: PUSH
31416: EMPTY
31417: LIST
31418: LIST
31419: LIST
31420: LIST
31421: PUSH
31422: EMPTY
31423: LIST
31424: ADD
31425: ST_TO_ADDR
31426: GO 31339
31428: POP
31429: POP
// result := list ;
31430: LD_ADDR_VAR 0 2
31434: PUSH
31435: LD_VAR 0 5
31439: ST_TO_ADDR
// end ;
31440: LD_VAR 0 2
31444: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
31445: LD_INT 0
31447: PPUSH
31448: PPUSH
31449: PPUSH
31450: PPUSH
31451: PPUSH
31452: PPUSH
31453: PPUSH
// if not factory then
31454: LD_VAR 0 1
31458: NOT
31459: IFFALSE 31463
// exit ;
31461: GO 32056
// if control = control_apeman then
31463: LD_VAR 0 4
31467: PUSH
31468: LD_INT 5
31470: EQUAL
31471: IFFALSE 31580
// begin tmp := UnitsInside ( factory ) ;
31473: LD_ADDR_VAR 0 8
31477: PUSH
31478: LD_VAR 0 1
31482: PPUSH
31483: CALL_OW 313
31487: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
31488: LD_VAR 0 8
31492: PPUSH
31493: LD_INT 25
31495: PUSH
31496: LD_INT 12
31498: PUSH
31499: EMPTY
31500: LIST
31501: LIST
31502: PPUSH
31503: CALL_OW 72
31507: NOT
31508: IFFALSE 31518
// control := control_manual ;
31510: LD_ADDR_VAR 0 4
31514: PUSH
31515: LD_INT 1
31517: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
31518: LD_ADDR_VAR 0 8
31522: PUSH
31523: LD_VAR 0 1
31527: PPUSH
31528: CALL 31215 0 1
31532: ST_TO_ADDR
// if tmp then
31533: LD_VAR 0 8
31537: IFFALSE 31580
// begin for i in tmp do
31539: LD_ADDR_VAR 0 7
31543: PUSH
31544: LD_VAR 0 8
31548: PUSH
31549: FOR_IN
31550: IFFALSE 31578
// if i [ 1 ] = b_ext_radio then
31552: LD_VAR 0 7
31556: PUSH
31557: LD_INT 1
31559: ARRAY
31560: PUSH
31561: LD_INT 22
31563: EQUAL
31564: IFFALSE 31576
// begin control := control_remote ;
31566: LD_ADDR_VAR 0 4
31570: PUSH
31571: LD_INT 2
31573: ST_TO_ADDR
// break ;
31574: GO 31578
// end ;
31576: GO 31549
31578: POP
31579: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
31580: LD_VAR 0 1
31584: PPUSH
31585: LD_VAR 0 2
31589: PPUSH
31590: LD_VAR 0 3
31594: PPUSH
31595: LD_VAR 0 4
31599: PPUSH
31600: LD_VAR 0 5
31604: PPUSH
31605: CALL_OW 448
31609: IFFALSE 31644
// begin result := [ chassis , engine , control , weapon ] ;
31611: LD_ADDR_VAR 0 6
31615: PUSH
31616: LD_VAR 0 2
31620: PUSH
31621: LD_VAR 0 3
31625: PUSH
31626: LD_VAR 0 4
31630: PUSH
31631: LD_VAR 0 5
31635: PUSH
31636: EMPTY
31637: LIST
31638: LIST
31639: LIST
31640: LIST
31641: ST_TO_ADDR
// exit ;
31642: GO 32056
// end ; _chassis := AvailableChassisList ( factory ) ;
31644: LD_ADDR_VAR 0 9
31648: PUSH
31649: LD_VAR 0 1
31653: PPUSH
31654: CALL_OW 475
31658: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
31659: LD_ADDR_VAR 0 11
31663: PUSH
31664: LD_VAR 0 1
31668: PPUSH
31669: CALL_OW 476
31673: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
31674: LD_ADDR_VAR 0 12
31678: PUSH
31679: LD_VAR 0 1
31683: PPUSH
31684: CALL_OW 477
31688: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
31689: LD_ADDR_VAR 0 10
31693: PUSH
31694: LD_VAR 0 1
31698: PPUSH
31699: CALL_OW 478
31703: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
31704: LD_VAR 0 9
31708: NOT
31709: PUSH
31710: LD_VAR 0 11
31714: NOT
31715: OR
31716: PUSH
31717: LD_VAR 0 12
31721: NOT
31722: OR
31723: PUSH
31724: LD_VAR 0 10
31728: NOT
31729: OR
31730: IFFALSE 31765
// begin result := [ chassis , engine , control , weapon ] ;
31732: LD_ADDR_VAR 0 6
31736: PUSH
31737: LD_VAR 0 2
31741: PUSH
31742: LD_VAR 0 3
31746: PUSH
31747: LD_VAR 0 4
31751: PUSH
31752: LD_VAR 0 5
31756: PUSH
31757: EMPTY
31758: LIST
31759: LIST
31760: LIST
31761: LIST
31762: ST_TO_ADDR
// exit ;
31763: GO 32056
// end ; if not chassis in _chassis then
31765: LD_VAR 0 2
31769: PUSH
31770: LD_VAR 0 9
31774: IN
31775: NOT
31776: IFFALSE 31802
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
31778: LD_ADDR_VAR 0 2
31782: PUSH
31783: LD_VAR 0 9
31787: PUSH
31788: LD_INT 1
31790: PPUSH
31791: LD_VAR 0 9
31795: PPUSH
31796: CALL_OW 12
31800: ARRAY
31801: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
31802: LD_VAR 0 2
31806: PPUSH
31807: LD_VAR 0 3
31811: PPUSH
31812: CALL 32061 0 2
31816: NOT
31817: IFFALSE 31876
// repeat engine := _engine [ 1 ] ;
31819: LD_ADDR_VAR 0 3
31823: PUSH
31824: LD_VAR 0 11
31828: PUSH
31829: LD_INT 1
31831: ARRAY
31832: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
31833: LD_ADDR_VAR 0 11
31837: PUSH
31838: LD_VAR 0 11
31842: PPUSH
31843: LD_INT 1
31845: PPUSH
31846: CALL_OW 3
31850: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
31851: LD_VAR 0 2
31855: PPUSH
31856: LD_VAR 0 3
31860: PPUSH
31861: CALL 32061 0 2
31865: PUSH
31866: LD_VAR 0 11
31870: PUSH
31871: EMPTY
31872: EQUAL
31873: OR
31874: IFFALSE 31819
// if not control in _control then
31876: LD_VAR 0 4
31880: PUSH
31881: LD_VAR 0 12
31885: IN
31886: NOT
31887: IFFALSE 31913
// control := _control [ rand ( 1 , _control ) ] ;
31889: LD_ADDR_VAR 0 4
31893: PUSH
31894: LD_VAR 0 12
31898: PUSH
31899: LD_INT 1
31901: PPUSH
31902: LD_VAR 0 12
31906: PPUSH
31907: CALL_OW 12
31911: ARRAY
31912: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
31913: LD_VAR 0 2
31917: PPUSH
31918: LD_VAR 0 5
31922: PPUSH
31923: CALL 32281 0 2
31927: NOT
31928: IFFALSE 31987
// repeat weapon := _weapon [ 1 ] ;
31930: LD_ADDR_VAR 0 5
31934: PUSH
31935: LD_VAR 0 10
31939: PUSH
31940: LD_INT 1
31942: ARRAY
31943: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
31944: LD_ADDR_VAR 0 10
31948: PUSH
31949: LD_VAR 0 10
31953: PPUSH
31954: LD_INT 1
31956: PPUSH
31957: CALL_OW 3
31961: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
31962: LD_VAR 0 2
31966: PPUSH
31967: LD_VAR 0 5
31971: PPUSH
31972: CALL 32281 0 2
31976: PUSH
31977: LD_VAR 0 10
31981: PUSH
31982: EMPTY
31983: EQUAL
31984: OR
31985: IFFALSE 31930
// result := [ ] ;
31987: LD_ADDR_VAR 0 6
31991: PUSH
31992: EMPTY
31993: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
31994: LD_VAR 0 1
31998: PPUSH
31999: LD_VAR 0 2
32003: PPUSH
32004: LD_VAR 0 3
32008: PPUSH
32009: LD_VAR 0 4
32013: PPUSH
32014: LD_VAR 0 5
32018: PPUSH
32019: CALL_OW 448
32023: IFFALSE 32056
// result := [ chassis , engine , control , weapon ] ;
32025: LD_ADDR_VAR 0 6
32029: PUSH
32030: LD_VAR 0 2
32034: PUSH
32035: LD_VAR 0 3
32039: PUSH
32040: LD_VAR 0 4
32044: PUSH
32045: LD_VAR 0 5
32049: PUSH
32050: EMPTY
32051: LIST
32052: LIST
32053: LIST
32054: LIST
32055: ST_TO_ADDR
// end ;
32056: LD_VAR 0 6
32060: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
32061: LD_INT 0
32063: PPUSH
// if not chassis or not engine then
32064: LD_VAR 0 1
32068: NOT
32069: PUSH
32070: LD_VAR 0 2
32074: NOT
32075: OR
32076: IFFALSE 32080
// exit ;
32078: GO 32276
// case engine of engine_solar :
32080: LD_VAR 0 2
32084: PUSH
32085: LD_INT 2
32087: DOUBLE
32088: EQUAL
32089: IFTRUE 32093
32091: GO 32131
32093: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
32094: LD_ADDR_VAR 0 3
32098: PUSH
32099: LD_INT 11
32101: PUSH
32102: LD_INT 12
32104: PUSH
32105: LD_INT 13
32107: PUSH
32108: LD_INT 14
32110: PUSH
32111: LD_INT 1
32113: PUSH
32114: LD_INT 2
32116: PUSH
32117: LD_INT 3
32119: PUSH
32120: EMPTY
32121: LIST
32122: LIST
32123: LIST
32124: LIST
32125: LIST
32126: LIST
32127: LIST
32128: ST_TO_ADDR
32129: GO 32260
32131: LD_INT 1
32133: DOUBLE
32134: EQUAL
32135: IFTRUE 32139
32137: GO 32201
32139: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
32140: LD_ADDR_VAR 0 3
32144: PUSH
32145: LD_INT 11
32147: PUSH
32148: LD_INT 12
32150: PUSH
32151: LD_INT 13
32153: PUSH
32154: LD_INT 14
32156: PUSH
32157: LD_INT 1
32159: PUSH
32160: LD_INT 2
32162: PUSH
32163: LD_INT 3
32165: PUSH
32166: LD_INT 4
32168: PUSH
32169: LD_INT 5
32171: PUSH
32172: LD_INT 21
32174: PUSH
32175: LD_INT 23
32177: PUSH
32178: LD_INT 22
32180: PUSH
32181: LD_INT 24
32183: PUSH
32184: EMPTY
32185: LIST
32186: LIST
32187: LIST
32188: LIST
32189: LIST
32190: LIST
32191: LIST
32192: LIST
32193: LIST
32194: LIST
32195: LIST
32196: LIST
32197: LIST
32198: ST_TO_ADDR
32199: GO 32260
32201: LD_INT 3
32203: DOUBLE
32204: EQUAL
32205: IFTRUE 32209
32207: GO 32259
32209: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
32210: LD_ADDR_VAR 0 3
32214: PUSH
32215: LD_INT 13
32217: PUSH
32218: LD_INT 14
32220: PUSH
32221: LD_INT 2
32223: PUSH
32224: LD_INT 3
32226: PUSH
32227: LD_INT 4
32229: PUSH
32230: LD_INT 5
32232: PUSH
32233: LD_INT 21
32235: PUSH
32236: LD_INT 22
32238: PUSH
32239: LD_INT 23
32241: PUSH
32242: LD_INT 24
32244: PUSH
32245: EMPTY
32246: LIST
32247: LIST
32248: LIST
32249: LIST
32250: LIST
32251: LIST
32252: LIST
32253: LIST
32254: LIST
32255: LIST
32256: ST_TO_ADDR
32257: GO 32260
32259: POP
// result := ( chassis in result ) ;
32260: LD_ADDR_VAR 0 3
32264: PUSH
32265: LD_VAR 0 1
32269: PUSH
32270: LD_VAR 0 3
32274: IN
32275: ST_TO_ADDR
// end ;
32276: LD_VAR 0 3
32280: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
32281: LD_INT 0
32283: PPUSH
// if not chassis or not weapon then
32284: LD_VAR 0 1
32288: NOT
32289: PUSH
32290: LD_VAR 0 2
32294: NOT
32295: OR
32296: IFFALSE 32300
// exit ;
32298: GO 33360
// case weapon of us_machine_gun :
32300: LD_VAR 0 2
32304: PUSH
32305: LD_INT 2
32307: DOUBLE
32308: EQUAL
32309: IFTRUE 32313
32311: GO 32343
32313: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
32314: LD_ADDR_VAR 0 3
32318: PUSH
32319: LD_INT 1
32321: PUSH
32322: LD_INT 2
32324: PUSH
32325: LD_INT 3
32327: PUSH
32328: LD_INT 4
32330: PUSH
32331: LD_INT 5
32333: PUSH
32334: EMPTY
32335: LIST
32336: LIST
32337: LIST
32338: LIST
32339: LIST
32340: ST_TO_ADDR
32341: GO 33344
32343: LD_INT 3
32345: DOUBLE
32346: EQUAL
32347: IFTRUE 32351
32349: GO 32381
32351: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
32352: LD_ADDR_VAR 0 3
32356: PUSH
32357: LD_INT 1
32359: PUSH
32360: LD_INT 2
32362: PUSH
32363: LD_INT 3
32365: PUSH
32366: LD_INT 4
32368: PUSH
32369: LD_INT 5
32371: PUSH
32372: EMPTY
32373: LIST
32374: LIST
32375: LIST
32376: LIST
32377: LIST
32378: ST_TO_ADDR
32379: GO 33344
32381: LD_INT 11
32383: DOUBLE
32384: EQUAL
32385: IFTRUE 32389
32387: GO 32419
32389: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
32390: LD_ADDR_VAR 0 3
32394: PUSH
32395: LD_INT 1
32397: PUSH
32398: LD_INT 2
32400: PUSH
32401: LD_INT 3
32403: PUSH
32404: LD_INT 4
32406: PUSH
32407: LD_INT 5
32409: PUSH
32410: EMPTY
32411: LIST
32412: LIST
32413: LIST
32414: LIST
32415: LIST
32416: ST_TO_ADDR
32417: GO 33344
32419: LD_INT 4
32421: DOUBLE
32422: EQUAL
32423: IFTRUE 32427
32425: GO 32453
32427: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
32428: LD_ADDR_VAR 0 3
32432: PUSH
32433: LD_INT 2
32435: PUSH
32436: LD_INT 3
32438: PUSH
32439: LD_INT 4
32441: PUSH
32442: LD_INT 5
32444: PUSH
32445: EMPTY
32446: LIST
32447: LIST
32448: LIST
32449: LIST
32450: ST_TO_ADDR
32451: GO 33344
32453: LD_INT 5
32455: DOUBLE
32456: EQUAL
32457: IFTRUE 32461
32459: GO 32487
32461: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
32462: LD_ADDR_VAR 0 3
32466: PUSH
32467: LD_INT 2
32469: PUSH
32470: LD_INT 3
32472: PUSH
32473: LD_INT 4
32475: PUSH
32476: LD_INT 5
32478: PUSH
32479: EMPTY
32480: LIST
32481: LIST
32482: LIST
32483: LIST
32484: ST_TO_ADDR
32485: GO 33344
32487: LD_INT 9
32489: DOUBLE
32490: EQUAL
32491: IFTRUE 32495
32493: GO 32521
32495: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
32496: LD_ADDR_VAR 0 3
32500: PUSH
32501: LD_INT 2
32503: PUSH
32504: LD_INT 3
32506: PUSH
32507: LD_INT 4
32509: PUSH
32510: LD_INT 5
32512: PUSH
32513: EMPTY
32514: LIST
32515: LIST
32516: LIST
32517: LIST
32518: ST_TO_ADDR
32519: GO 33344
32521: LD_INT 7
32523: DOUBLE
32524: EQUAL
32525: IFTRUE 32529
32527: GO 32555
32529: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
32530: LD_ADDR_VAR 0 3
32534: PUSH
32535: LD_INT 2
32537: PUSH
32538: LD_INT 3
32540: PUSH
32541: LD_INT 4
32543: PUSH
32544: LD_INT 5
32546: PUSH
32547: EMPTY
32548: LIST
32549: LIST
32550: LIST
32551: LIST
32552: ST_TO_ADDR
32553: GO 33344
32555: LD_INT 12
32557: DOUBLE
32558: EQUAL
32559: IFTRUE 32563
32561: GO 32589
32563: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
32564: LD_ADDR_VAR 0 3
32568: PUSH
32569: LD_INT 2
32571: PUSH
32572: LD_INT 3
32574: PUSH
32575: LD_INT 4
32577: PUSH
32578: LD_INT 5
32580: PUSH
32581: EMPTY
32582: LIST
32583: LIST
32584: LIST
32585: LIST
32586: ST_TO_ADDR
32587: GO 33344
32589: LD_INT 13
32591: DOUBLE
32592: EQUAL
32593: IFTRUE 32597
32595: GO 32623
32597: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
32598: LD_ADDR_VAR 0 3
32602: PUSH
32603: LD_INT 2
32605: PUSH
32606: LD_INT 3
32608: PUSH
32609: LD_INT 4
32611: PUSH
32612: LD_INT 5
32614: PUSH
32615: EMPTY
32616: LIST
32617: LIST
32618: LIST
32619: LIST
32620: ST_TO_ADDR
32621: GO 33344
32623: LD_INT 14
32625: DOUBLE
32626: EQUAL
32627: IFTRUE 32631
32629: GO 32649
32631: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
32632: LD_ADDR_VAR 0 3
32636: PUSH
32637: LD_INT 4
32639: PUSH
32640: LD_INT 5
32642: PUSH
32643: EMPTY
32644: LIST
32645: LIST
32646: ST_TO_ADDR
32647: GO 33344
32649: LD_INT 6
32651: DOUBLE
32652: EQUAL
32653: IFTRUE 32657
32655: GO 32675
32657: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
32658: LD_ADDR_VAR 0 3
32662: PUSH
32663: LD_INT 4
32665: PUSH
32666: LD_INT 5
32668: PUSH
32669: EMPTY
32670: LIST
32671: LIST
32672: ST_TO_ADDR
32673: GO 33344
32675: LD_INT 10
32677: DOUBLE
32678: EQUAL
32679: IFTRUE 32683
32681: GO 32701
32683: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
32684: LD_ADDR_VAR 0 3
32688: PUSH
32689: LD_INT 4
32691: PUSH
32692: LD_INT 5
32694: PUSH
32695: EMPTY
32696: LIST
32697: LIST
32698: ST_TO_ADDR
32699: GO 33344
32701: LD_INT 22
32703: DOUBLE
32704: EQUAL
32705: IFTRUE 32709
32707: GO 32735
32709: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
32710: LD_ADDR_VAR 0 3
32714: PUSH
32715: LD_INT 11
32717: PUSH
32718: LD_INT 12
32720: PUSH
32721: LD_INT 13
32723: PUSH
32724: LD_INT 14
32726: PUSH
32727: EMPTY
32728: LIST
32729: LIST
32730: LIST
32731: LIST
32732: ST_TO_ADDR
32733: GO 33344
32735: LD_INT 23
32737: DOUBLE
32738: EQUAL
32739: IFTRUE 32743
32741: GO 32769
32743: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
32744: LD_ADDR_VAR 0 3
32748: PUSH
32749: LD_INT 11
32751: PUSH
32752: LD_INT 12
32754: PUSH
32755: LD_INT 13
32757: PUSH
32758: LD_INT 14
32760: PUSH
32761: EMPTY
32762: LIST
32763: LIST
32764: LIST
32765: LIST
32766: ST_TO_ADDR
32767: GO 33344
32769: LD_INT 24
32771: DOUBLE
32772: EQUAL
32773: IFTRUE 32777
32775: GO 32803
32777: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
32778: LD_ADDR_VAR 0 3
32782: PUSH
32783: LD_INT 11
32785: PUSH
32786: LD_INT 12
32788: PUSH
32789: LD_INT 13
32791: PUSH
32792: LD_INT 14
32794: PUSH
32795: EMPTY
32796: LIST
32797: LIST
32798: LIST
32799: LIST
32800: ST_TO_ADDR
32801: GO 33344
32803: LD_INT 30
32805: DOUBLE
32806: EQUAL
32807: IFTRUE 32811
32809: GO 32837
32811: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
32812: LD_ADDR_VAR 0 3
32816: PUSH
32817: LD_INT 11
32819: PUSH
32820: LD_INT 12
32822: PUSH
32823: LD_INT 13
32825: PUSH
32826: LD_INT 14
32828: PUSH
32829: EMPTY
32830: LIST
32831: LIST
32832: LIST
32833: LIST
32834: ST_TO_ADDR
32835: GO 33344
32837: LD_INT 25
32839: DOUBLE
32840: EQUAL
32841: IFTRUE 32845
32843: GO 32863
32845: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
32846: LD_ADDR_VAR 0 3
32850: PUSH
32851: LD_INT 13
32853: PUSH
32854: LD_INT 14
32856: PUSH
32857: EMPTY
32858: LIST
32859: LIST
32860: ST_TO_ADDR
32861: GO 33344
32863: LD_INT 27
32865: DOUBLE
32866: EQUAL
32867: IFTRUE 32871
32869: GO 32889
32871: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
32872: LD_ADDR_VAR 0 3
32876: PUSH
32877: LD_INT 13
32879: PUSH
32880: LD_INT 14
32882: PUSH
32883: EMPTY
32884: LIST
32885: LIST
32886: ST_TO_ADDR
32887: GO 33344
32889: LD_INT 92
32891: DOUBLE
32892: EQUAL
32893: IFTRUE 32897
32895: GO 32923
32897: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
32898: LD_ADDR_VAR 0 3
32902: PUSH
32903: LD_INT 11
32905: PUSH
32906: LD_INT 12
32908: PUSH
32909: LD_INT 13
32911: PUSH
32912: LD_INT 14
32914: PUSH
32915: EMPTY
32916: LIST
32917: LIST
32918: LIST
32919: LIST
32920: ST_TO_ADDR
32921: GO 33344
32923: LD_INT 28
32925: DOUBLE
32926: EQUAL
32927: IFTRUE 32931
32929: GO 32949
32931: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
32932: LD_ADDR_VAR 0 3
32936: PUSH
32937: LD_INT 13
32939: PUSH
32940: LD_INT 14
32942: PUSH
32943: EMPTY
32944: LIST
32945: LIST
32946: ST_TO_ADDR
32947: GO 33344
32949: LD_INT 29
32951: DOUBLE
32952: EQUAL
32953: IFTRUE 32957
32955: GO 32975
32957: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
32958: LD_ADDR_VAR 0 3
32962: PUSH
32963: LD_INT 13
32965: PUSH
32966: LD_INT 14
32968: PUSH
32969: EMPTY
32970: LIST
32971: LIST
32972: ST_TO_ADDR
32973: GO 33344
32975: LD_INT 31
32977: DOUBLE
32978: EQUAL
32979: IFTRUE 32983
32981: GO 33001
32983: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
32984: LD_ADDR_VAR 0 3
32988: PUSH
32989: LD_INT 13
32991: PUSH
32992: LD_INT 14
32994: PUSH
32995: EMPTY
32996: LIST
32997: LIST
32998: ST_TO_ADDR
32999: GO 33344
33001: LD_INT 26
33003: DOUBLE
33004: EQUAL
33005: IFTRUE 33009
33007: GO 33027
33009: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
33010: LD_ADDR_VAR 0 3
33014: PUSH
33015: LD_INT 13
33017: PUSH
33018: LD_INT 14
33020: PUSH
33021: EMPTY
33022: LIST
33023: LIST
33024: ST_TO_ADDR
33025: GO 33344
33027: LD_INT 42
33029: DOUBLE
33030: EQUAL
33031: IFTRUE 33035
33033: GO 33061
33035: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
33036: LD_ADDR_VAR 0 3
33040: PUSH
33041: LD_INT 21
33043: PUSH
33044: LD_INT 22
33046: PUSH
33047: LD_INT 23
33049: PUSH
33050: LD_INT 24
33052: PUSH
33053: EMPTY
33054: LIST
33055: LIST
33056: LIST
33057: LIST
33058: ST_TO_ADDR
33059: GO 33344
33061: LD_INT 43
33063: DOUBLE
33064: EQUAL
33065: IFTRUE 33069
33067: GO 33095
33069: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
33070: LD_ADDR_VAR 0 3
33074: PUSH
33075: LD_INT 21
33077: PUSH
33078: LD_INT 22
33080: PUSH
33081: LD_INT 23
33083: PUSH
33084: LD_INT 24
33086: PUSH
33087: EMPTY
33088: LIST
33089: LIST
33090: LIST
33091: LIST
33092: ST_TO_ADDR
33093: GO 33344
33095: LD_INT 44
33097: DOUBLE
33098: EQUAL
33099: IFTRUE 33103
33101: GO 33129
33103: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
33104: LD_ADDR_VAR 0 3
33108: PUSH
33109: LD_INT 21
33111: PUSH
33112: LD_INT 22
33114: PUSH
33115: LD_INT 23
33117: PUSH
33118: LD_INT 24
33120: PUSH
33121: EMPTY
33122: LIST
33123: LIST
33124: LIST
33125: LIST
33126: ST_TO_ADDR
33127: GO 33344
33129: LD_INT 45
33131: DOUBLE
33132: EQUAL
33133: IFTRUE 33137
33135: GO 33163
33137: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
33138: LD_ADDR_VAR 0 3
33142: PUSH
33143: LD_INT 21
33145: PUSH
33146: LD_INT 22
33148: PUSH
33149: LD_INT 23
33151: PUSH
33152: LD_INT 24
33154: PUSH
33155: EMPTY
33156: LIST
33157: LIST
33158: LIST
33159: LIST
33160: ST_TO_ADDR
33161: GO 33344
33163: LD_INT 49
33165: DOUBLE
33166: EQUAL
33167: IFTRUE 33171
33169: GO 33197
33171: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
33172: LD_ADDR_VAR 0 3
33176: PUSH
33177: LD_INT 21
33179: PUSH
33180: LD_INT 22
33182: PUSH
33183: LD_INT 23
33185: PUSH
33186: LD_INT 24
33188: PUSH
33189: EMPTY
33190: LIST
33191: LIST
33192: LIST
33193: LIST
33194: ST_TO_ADDR
33195: GO 33344
33197: LD_INT 51
33199: DOUBLE
33200: EQUAL
33201: IFTRUE 33205
33203: GO 33231
33205: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
33206: LD_ADDR_VAR 0 3
33210: PUSH
33211: LD_INT 21
33213: PUSH
33214: LD_INT 22
33216: PUSH
33217: LD_INT 23
33219: PUSH
33220: LD_INT 24
33222: PUSH
33223: EMPTY
33224: LIST
33225: LIST
33226: LIST
33227: LIST
33228: ST_TO_ADDR
33229: GO 33344
33231: LD_INT 52
33233: DOUBLE
33234: EQUAL
33235: IFTRUE 33239
33237: GO 33265
33239: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
33240: LD_ADDR_VAR 0 3
33244: PUSH
33245: LD_INT 21
33247: PUSH
33248: LD_INT 22
33250: PUSH
33251: LD_INT 23
33253: PUSH
33254: LD_INT 24
33256: PUSH
33257: EMPTY
33258: LIST
33259: LIST
33260: LIST
33261: LIST
33262: ST_TO_ADDR
33263: GO 33344
33265: LD_INT 53
33267: DOUBLE
33268: EQUAL
33269: IFTRUE 33273
33271: GO 33291
33273: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
33274: LD_ADDR_VAR 0 3
33278: PUSH
33279: LD_INT 23
33281: PUSH
33282: LD_INT 24
33284: PUSH
33285: EMPTY
33286: LIST
33287: LIST
33288: ST_TO_ADDR
33289: GO 33344
33291: LD_INT 46
33293: DOUBLE
33294: EQUAL
33295: IFTRUE 33299
33297: GO 33317
33299: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
33300: LD_ADDR_VAR 0 3
33304: PUSH
33305: LD_INT 23
33307: PUSH
33308: LD_INT 24
33310: PUSH
33311: EMPTY
33312: LIST
33313: LIST
33314: ST_TO_ADDR
33315: GO 33344
33317: LD_INT 47
33319: DOUBLE
33320: EQUAL
33321: IFTRUE 33325
33323: GO 33343
33325: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
33326: LD_ADDR_VAR 0 3
33330: PUSH
33331: LD_INT 23
33333: PUSH
33334: LD_INT 24
33336: PUSH
33337: EMPTY
33338: LIST
33339: LIST
33340: ST_TO_ADDR
33341: GO 33344
33343: POP
// result := ( chassis in result ) ;
33344: LD_ADDR_VAR 0 3
33348: PUSH
33349: LD_VAR 0 1
33353: PUSH
33354: LD_VAR 0 3
33358: IN
33359: ST_TO_ADDR
// end ;
33360: LD_VAR 0 3
33364: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
33365: LD_INT 0
33367: PPUSH
33368: PPUSH
33369: PPUSH
33370: PPUSH
33371: PPUSH
33372: PPUSH
33373: PPUSH
// result := array ;
33374: LD_ADDR_VAR 0 5
33378: PUSH
33379: LD_VAR 0 1
33383: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
33384: LD_VAR 0 1
33388: NOT
33389: PUSH
33390: LD_VAR 0 2
33394: NOT
33395: OR
33396: PUSH
33397: LD_VAR 0 3
33401: NOT
33402: OR
33403: PUSH
33404: LD_VAR 0 2
33408: PUSH
33409: LD_VAR 0 1
33413: GREATER
33414: OR
33415: PUSH
33416: LD_VAR 0 3
33420: PUSH
33421: LD_VAR 0 1
33425: GREATER
33426: OR
33427: IFFALSE 33431
// exit ;
33429: GO 33727
// if direction then
33431: LD_VAR 0 4
33435: IFFALSE 33499
// begin d := 1 ;
33437: LD_ADDR_VAR 0 9
33441: PUSH
33442: LD_INT 1
33444: ST_TO_ADDR
// if i_from > i_to then
33445: LD_VAR 0 2
33449: PUSH
33450: LD_VAR 0 3
33454: GREATER
33455: IFFALSE 33481
// length := ( array - i_from ) + i_to else
33457: LD_ADDR_VAR 0 11
33461: PUSH
33462: LD_VAR 0 1
33466: PUSH
33467: LD_VAR 0 2
33471: MINUS
33472: PUSH
33473: LD_VAR 0 3
33477: PLUS
33478: ST_TO_ADDR
33479: GO 33497
// length := i_to - i_from ;
33481: LD_ADDR_VAR 0 11
33485: PUSH
33486: LD_VAR 0 3
33490: PUSH
33491: LD_VAR 0 2
33495: MINUS
33496: ST_TO_ADDR
// end else
33497: GO 33560
// begin d := - 1 ;
33499: LD_ADDR_VAR 0 9
33503: PUSH
33504: LD_INT 1
33506: NEG
33507: ST_TO_ADDR
// if i_from > i_to then
33508: LD_VAR 0 2
33512: PUSH
33513: LD_VAR 0 3
33517: GREATER
33518: IFFALSE 33538
// length := i_from - i_to else
33520: LD_ADDR_VAR 0 11
33524: PUSH
33525: LD_VAR 0 2
33529: PUSH
33530: LD_VAR 0 3
33534: MINUS
33535: ST_TO_ADDR
33536: GO 33560
// length := ( array - i_to ) + i_from ;
33538: LD_ADDR_VAR 0 11
33542: PUSH
33543: LD_VAR 0 1
33547: PUSH
33548: LD_VAR 0 3
33552: MINUS
33553: PUSH
33554: LD_VAR 0 2
33558: PLUS
33559: ST_TO_ADDR
// end ; if not length then
33560: LD_VAR 0 11
33564: NOT
33565: IFFALSE 33569
// exit ;
33567: GO 33727
// tmp := array ;
33569: LD_ADDR_VAR 0 10
33573: PUSH
33574: LD_VAR 0 1
33578: ST_TO_ADDR
// for i = 1 to length do
33579: LD_ADDR_VAR 0 6
33583: PUSH
33584: DOUBLE
33585: LD_INT 1
33587: DEC
33588: ST_TO_ADDR
33589: LD_VAR 0 11
33593: PUSH
33594: FOR_TO
33595: IFFALSE 33715
// begin for j = 1 to array do
33597: LD_ADDR_VAR 0 7
33601: PUSH
33602: DOUBLE
33603: LD_INT 1
33605: DEC
33606: ST_TO_ADDR
33607: LD_VAR 0 1
33611: PUSH
33612: FOR_TO
33613: IFFALSE 33701
// begin k := j + d ;
33615: LD_ADDR_VAR 0 8
33619: PUSH
33620: LD_VAR 0 7
33624: PUSH
33625: LD_VAR 0 9
33629: PLUS
33630: ST_TO_ADDR
// if k > array then
33631: LD_VAR 0 8
33635: PUSH
33636: LD_VAR 0 1
33640: GREATER
33641: IFFALSE 33651
// k := 1 ;
33643: LD_ADDR_VAR 0 8
33647: PUSH
33648: LD_INT 1
33650: ST_TO_ADDR
// if not k then
33651: LD_VAR 0 8
33655: NOT
33656: IFFALSE 33668
// k := array ;
33658: LD_ADDR_VAR 0 8
33662: PUSH
33663: LD_VAR 0 1
33667: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
33668: LD_ADDR_VAR 0 10
33672: PUSH
33673: LD_VAR 0 10
33677: PPUSH
33678: LD_VAR 0 8
33682: PPUSH
33683: LD_VAR 0 1
33687: PUSH
33688: LD_VAR 0 7
33692: ARRAY
33693: PPUSH
33694: CALL_OW 1
33698: ST_TO_ADDR
// end ;
33699: GO 33612
33701: POP
33702: POP
// array := tmp ;
33703: LD_ADDR_VAR 0 1
33707: PUSH
33708: LD_VAR 0 10
33712: ST_TO_ADDR
// end ;
33713: GO 33594
33715: POP
33716: POP
// result := array ;
33717: LD_ADDR_VAR 0 5
33721: PUSH
33722: LD_VAR 0 1
33726: ST_TO_ADDR
// end ;
33727: LD_VAR 0 5
33731: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
33732: LD_INT 0
33734: PPUSH
33735: PPUSH
// result := 0 ;
33736: LD_ADDR_VAR 0 3
33740: PUSH
33741: LD_INT 0
33743: ST_TO_ADDR
// if not array or not value in array then
33744: LD_VAR 0 1
33748: NOT
33749: PUSH
33750: LD_VAR 0 2
33754: PUSH
33755: LD_VAR 0 1
33759: IN
33760: NOT
33761: OR
33762: IFFALSE 33766
// exit ;
33764: GO 33820
// for i = 1 to array do
33766: LD_ADDR_VAR 0 4
33770: PUSH
33771: DOUBLE
33772: LD_INT 1
33774: DEC
33775: ST_TO_ADDR
33776: LD_VAR 0 1
33780: PUSH
33781: FOR_TO
33782: IFFALSE 33818
// if value = array [ i ] then
33784: LD_VAR 0 2
33788: PUSH
33789: LD_VAR 0 1
33793: PUSH
33794: LD_VAR 0 4
33798: ARRAY
33799: EQUAL
33800: IFFALSE 33816
// begin result := i ;
33802: LD_ADDR_VAR 0 3
33806: PUSH
33807: LD_VAR 0 4
33811: ST_TO_ADDR
// exit ;
33812: POP
33813: POP
33814: GO 33820
// end ;
33816: GO 33781
33818: POP
33819: POP
// end ;
33820: LD_VAR 0 3
33824: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
33825: LD_INT 0
33827: PPUSH
// vc_chassis := chassis ;
33828: LD_ADDR_OWVAR 37
33832: PUSH
33833: LD_VAR 0 1
33837: ST_TO_ADDR
// vc_engine := engine ;
33838: LD_ADDR_OWVAR 39
33842: PUSH
33843: LD_VAR 0 2
33847: ST_TO_ADDR
// vc_control := control ;
33848: LD_ADDR_OWVAR 38
33852: PUSH
33853: LD_VAR 0 3
33857: ST_TO_ADDR
// vc_weapon := weapon ;
33858: LD_ADDR_OWVAR 40
33862: PUSH
33863: LD_VAR 0 4
33867: ST_TO_ADDR
// vc_fuel_battery := fuel ;
33868: LD_ADDR_OWVAR 41
33872: PUSH
33873: LD_VAR 0 5
33877: ST_TO_ADDR
// end ;
33878: LD_VAR 0 6
33882: RET
// export function WantPlant ( unit ) ; var task ; begin
33883: LD_INT 0
33885: PPUSH
33886: PPUSH
// result := false ;
33887: LD_ADDR_VAR 0 2
33891: PUSH
33892: LD_INT 0
33894: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
33895: LD_ADDR_VAR 0 3
33899: PUSH
33900: LD_VAR 0 1
33904: PPUSH
33905: CALL_OW 437
33909: ST_TO_ADDR
// if task then
33910: LD_VAR 0 3
33914: IFFALSE 33942
// if task [ 1 ] [ 1 ] = p then
33916: LD_VAR 0 3
33920: PUSH
33921: LD_INT 1
33923: ARRAY
33924: PUSH
33925: LD_INT 1
33927: ARRAY
33928: PUSH
33929: LD_STRING p
33931: EQUAL
33932: IFFALSE 33942
// result := true ;
33934: LD_ADDR_VAR 0 2
33938: PUSH
33939: LD_INT 1
33941: ST_TO_ADDR
// end ;
33942: LD_VAR 0 2
33946: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
33947: LD_INT 0
33949: PPUSH
33950: PPUSH
33951: PPUSH
33952: PPUSH
// if pos < 1 then
33953: LD_VAR 0 2
33957: PUSH
33958: LD_INT 1
33960: LESS
33961: IFFALSE 33965
// exit ;
33963: GO 34268
// if pos = 1 then
33965: LD_VAR 0 2
33969: PUSH
33970: LD_INT 1
33972: EQUAL
33973: IFFALSE 34006
// result := Replace ( arr , pos [ 1 ] , value ) else
33975: LD_ADDR_VAR 0 4
33979: PUSH
33980: LD_VAR 0 1
33984: PPUSH
33985: LD_VAR 0 2
33989: PUSH
33990: LD_INT 1
33992: ARRAY
33993: PPUSH
33994: LD_VAR 0 3
33998: PPUSH
33999: CALL_OW 1
34003: ST_TO_ADDR
34004: GO 34268
// begin tmp := arr ;
34006: LD_ADDR_VAR 0 6
34010: PUSH
34011: LD_VAR 0 1
34015: ST_TO_ADDR
// s_arr := [ tmp ] ;
34016: LD_ADDR_VAR 0 7
34020: PUSH
34021: LD_VAR 0 6
34025: PUSH
34026: EMPTY
34027: LIST
34028: ST_TO_ADDR
// for i = 1 to pos - 1 do
34029: LD_ADDR_VAR 0 5
34033: PUSH
34034: DOUBLE
34035: LD_INT 1
34037: DEC
34038: ST_TO_ADDR
34039: LD_VAR 0 2
34043: PUSH
34044: LD_INT 1
34046: MINUS
34047: PUSH
34048: FOR_TO
34049: IFFALSE 34094
// begin tmp := tmp [ pos [ i ] ] ;
34051: LD_ADDR_VAR 0 6
34055: PUSH
34056: LD_VAR 0 6
34060: PUSH
34061: LD_VAR 0 2
34065: PUSH
34066: LD_VAR 0 5
34070: ARRAY
34071: ARRAY
34072: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
34073: LD_ADDR_VAR 0 7
34077: PUSH
34078: LD_VAR 0 7
34082: PUSH
34083: LD_VAR 0 6
34087: PUSH
34088: EMPTY
34089: LIST
34090: ADD
34091: ST_TO_ADDR
// end ;
34092: GO 34048
34094: POP
34095: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
34096: LD_ADDR_VAR 0 6
34100: PUSH
34101: LD_VAR 0 6
34105: PPUSH
34106: LD_VAR 0 2
34110: PUSH
34111: LD_VAR 0 2
34115: ARRAY
34116: PPUSH
34117: LD_VAR 0 3
34121: PPUSH
34122: CALL_OW 1
34126: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
34127: LD_ADDR_VAR 0 7
34131: PUSH
34132: LD_VAR 0 7
34136: PPUSH
34137: LD_VAR 0 7
34141: PPUSH
34142: LD_VAR 0 6
34146: PPUSH
34147: CALL_OW 1
34151: ST_TO_ADDR
// for i = s_arr downto 2 do
34152: LD_ADDR_VAR 0 5
34156: PUSH
34157: DOUBLE
34158: LD_VAR 0 7
34162: INC
34163: ST_TO_ADDR
34164: LD_INT 2
34166: PUSH
34167: FOR_DOWNTO
34168: IFFALSE 34252
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
34170: LD_ADDR_VAR 0 6
34174: PUSH
34175: LD_VAR 0 7
34179: PUSH
34180: LD_VAR 0 5
34184: PUSH
34185: LD_INT 1
34187: MINUS
34188: ARRAY
34189: PPUSH
34190: LD_VAR 0 2
34194: PUSH
34195: LD_VAR 0 5
34199: PUSH
34200: LD_INT 1
34202: MINUS
34203: ARRAY
34204: PPUSH
34205: LD_VAR 0 7
34209: PUSH
34210: LD_VAR 0 5
34214: ARRAY
34215: PPUSH
34216: CALL_OW 1
34220: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
34221: LD_ADDR_VAR 0 7
34225: PUSH
34226: LD_VAR 0 7
34230: PPUSH
34231: LD_VAR 0 5
34235: PUSH
34236: LD_INT 1
34238: MINUS
34239: PPUSH
34240: LD_VAR 0 6
34244: PPUSH
34245: CALL_OW 1
34249: ST_TO_ADDR
// end ;
34250: GO 34167
34252: POP
34253: POP
// result := s_arr [ 1 ] ;
34254: LD_ADDR_VAR 0 4
34258: PUSH
34259: LD_VAR 0 7
34263: PUSH
34264: LD_INT 1
34266: ARRAY
34267: ST_TO_ADDR
// end ; end ;
34268: LD_VAR 0 4
34272: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
34273: LD_INT 0
34275: PPUSH
34276: PPUSH
// if not list then
34277: LD_VAR 0 1
34281: NOT
34282: IFFALSE 34286
// exit ;
34284: GO 34377
// i := list [ pos1 ] ;
34286: LD_ADDR_VAR 0 5
34290: PUSH
34291: LD_VAR 0 1
34295: PUSH
34296: LD_VAR 0 2
34300: ARRAY
34301: ST_TO_ADDR
// if not i then
34302: LD_VAR 0 5
34306: NOT
34307: IFFALSE 34311
// exit ;
34309: GO 34377
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
34311: LD_ADDR_VAR 0 1
34315: PUSH
34316: LD_VAR 0 1
34320: PPUSH
34321: LD_VAR 0 2
34325: PPUSH
34326: LD_VAR 0 1
34330: PUSH
34331: LD_VAR 0 3
34335: ARRAY
34336: PPUSH
34337: CALL_OW 1
34341: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
34342: LD_ADDR_VAR 0 1
34346: PUSH
34347: LD_VAR 0 1
34351: PPUSH
34352: LD_VAR 0 3
34356: PPUSH
34357: LD_VAR 0 5
34361: PPUSH
34362: CALL_OW 1
34366: ST_TO_ADDR
// result := list ;
34367: LD_ADDR_VAR 0 4
34371: PUSH
34372: LD_VAR 0 1
34376: ST_TO_ADDR
// end ;
34377: LD_VAR 0 4
34381: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
34382: LD_INT 0
34384: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
34385: LD_ADDR_VAR 0 5
34389: PUSH
34390: LD_VAR 0 1
34394: PPUSH
34395: CALL_OW 250
34399: PPUSH
34400: LD_VAR 0 1
34404: PPUSH
34405: CALL_OW 251
34409: PPUSH
34410: LD_VAR 0 2
34414: PPUSH
34415: LD_VAR 0 3
34419: PPUSH
34420: LD_VAR 0 4
34424: PPUSH
34425: CALL 34435 0 5
34429: ST_TO_ADDR
// end ;
34430: LD_VAR 0 5
34434: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
34435: LD_INT 0
34437: PPUSH
34438: PPUSH
34439: PPUSH
34440: PPUSH
// if not list then
34441: LD_VAR 0 3
34445: NOT
34446: IFFALSE 34450
// exit ;
34448: GO 34838
// result := [ ] ;
34450: LD_ADDR_VAR 0 6
34454: PUSH
34455: EMPTY
34456: ST_TO_ADDR
// for i in list do
34457: LD_ADDR_VAR 0 7
34461: PUSH
34462: LD_VAR 0 3
34466: PUSH
34467: FOR_IN
34468: IFFALSE 34670
// begin tmp := GetDistUnitXY ( i , x , y ) ;
34470: LD_ADDR_VAR 0 9
34474: PUSH
34475: LD_VAR 0 7
34479: PPUSH
34480: LD_VAR 0 1
34484: PPUSH
34485: LD_VAR 0 2
34489: PPUSH
34490: CALL_OW 297
34494: ST_TO_ADDR
// if not result then
34495: LD_VAR 0 6
34499: NOT
34500: IFFALSE 34526
// result := [ [ i , tmp ] ] else
34502: LD_ADDR_VAR 0 6
34506: PUSH
34507: LD_VAR 0 7
34511: PUSH
34512: LD_VAR 0 9
34516: PUSH
34517: EMPTY
34518: LIST
34519: LIST
34520: PUSH
34521: EMPTY
34522: LIST
34523: ST_TO_ADDR
34524: GO 34668
// begin if result [ result ] [ 2 ] < tmp then
34526: LD_VAR 0 6
34530: PUSH
34531: LD_VAR 0 6
34535: ARRAY
34536: PUSH
34537: LD_INT 2
34539: ARRAY
34540: PUSH
34541: LD_VAR 0 9
34545: LESS
34546: IFFALSE 34588
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
34548: LD_ADDR_VAR 0 6
34552: PUSH
34553: LD_VAR 0 6
34557: PPUSH
34558: LD_VAR 0 6
34562: PUSH
34563: LD_INT 1
34565: PLUS
34566: PPUSH
34567: LD_VAR 0 7
34571: PUSH
34572: LD_VAR 0 9
34576: PUSH
34577: EMPTY
34578: LIST
34579: LIST
34580: PPUSH
34581: CALL_OW 2
34585: ST_TO_ADDR
34586: GO 34668
// for j = 1 to result do
34588: LD_ADDR_VAR 0 8
34592: PUSH
34593: DOUBLE
34594: LD_INT 1
34596: DEC
34597: ST_TO_ADDR
34598: LD_VAR 0 6
34602: PUSH
34603: FOR_TO
34604: IFFALSE 34666
// begin if tmp < result [ j ] [ 2 ] then
34606: LD_VAR 0 9
34610: PUSH
34611: LD_VAR 0 6
34615: PUSH
34616: LD_VAR 0 8
34620: ARRAY
34621: PUSH
34622: LD_INT 2
34624: ARRAY
34625: LESS
34626: IFFALSE 34664
// begin result := Insert ( result , j , [ i , tmp ] ) ;
34628: LD_ADDR_VAR 0 6
34632: PUSH
34633: LD_VAR 0 6
34637: PPUSH
34638: LD_VAR 0 8
34642: PPUSH
34643: LD_VAR 0 7
34647: PUSH
34648: LD_VAR 0 9
34652: PUSH
34653: EMPTY
34654: LIST
34655: LIST
34656: PPUSH
34657: CALL_OW 2
34661: ST_TO_ADDR
// break ;
34662: GO 34666
// end ; end ;
34664: GO 34603
34666: POP
34667: POP
// end ; end ;
34668: GO 34467
34670: POP
34671: POP
// if result and not asc then
34672: LD_VAR 0 6
34676: PUSH
34677: LD_VAR 0 4
34681: NOT
34682: AND
34683: IFFALSE 34758
// begin tmp := result ;
34685: LD_ADDR_VAR 0 9
34689: PUSH
34690: LD_VAR 0 6
34694: ST_TO_ADDR
// for i = tmp downto 1 do
34695: LD_ADDR_VAR 0 7
34699: PUSH
34700: DOUBLE
34701: LD_VAR 0 9
34705: INC
34706: ST_TO_ADDR
34707: LD_INT 1
34709: PUSH
34710: FOR_DOWNTO
34711: IFFALSE 34756
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
34713: LD_ADDR_VAR 0 6
34717: PUSH
34718: LD_VAR 0 6
34722: PPUSH
34723: LD_VAR 0 9
34727: PUSH
34728: LD_VAR 0 7
34732: MINUS
34733: PUSH
34734: LD_INT 1
34736: PLUS
34737: PPUSH
34738: LD_VAR 0 9
34742: PUSH
34743: LD_VAR 0 7
34747: ARRAY
34748: PPUSH
34749: CALL_OW 1
34753: ST_TO_ADDR
34754: GO 34710
34756: POP
34757: POP
// end ; tmp := [ ] ;
34758: LD_ADDR_VAR 0 9
34762: PUSH
34763: EMPTY
34764: ST_TO_ADDR
// if mode then
34765: LD_VAR 0 5
34769: IFFALSE 34838
// begin for i = 1 to result do
34771: LD_ADDR_VAR 0 7
34775: PUSH
34776: DOUBLE
34777: LD_INT 1
34779: DEC
34780: ST_TO_ADDR
34781: LD_VAR 0 6
34785: PUSH
34786: FOR_TO
34787: IFFALSE 34826
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
34789: LD_ADDR_VAR 0 9
34793: PUSH
34794: LD_VAR 0 9
34798: PPUSH
34799: LD_VAR 0 7
34803: PPUSH
34804: LD_VAR 0 6
34808: PUSH
34809: LD_VAR 0 7
34813: ARRAY
34814: PUSH
34815: LD_INT 1
34817: ARRAY
34818: PPUSH
34819: CALL_OW 1
34823: ST_TO_ADDR
34824: GO 34786
34826: POP
34827: POP
// result := tmp ;
34828: LD_ADDR_VAR 0 6
34832: PUSH
34833: LD_VAR 0 9
34837: ST_TO_ADDR
// end ; end ;
34838: LD_VAR 0 6
34842: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
34843: LD_INT 0
34845: PPUSH
34846: PPUSH
34847: PPUSH
34848: PPUSH
34849: PPUSH
34850: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
34851: LD_ADDR_VAR 0 5
34855: PUSH
34856: LD_INT 0
34858: PUSH
34859: LD_INT 0
34861: PUSH
34862: LD_INT 0
34864: PUSH
34865: EMPTY
34866: PUSH
34867: EMPTY
34868: LIST
34869: LIST
34870: LIST
34871: LIST
34872: ST_TO_ADDR
// if not x or not y then
34873: LD_VAR 0 2
34877: NOT
34878: PUSH
34879: LD_VAR 0 3
34883: NOT
34884: OR
34885: IFFALSE 34889
// exit ;
34887: GO 36539
// if not range then
34889: LD_VAR 0 4
34893: NOT
34894: IFFALSE 34904
// range := 10 ;
34896: LD_ADDR_VAR 0 4
34900: PUSH
34901: LD_INT 10
34903: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
34904: LD_ADDR_VAR 0 8
34908: PUSH
34909: LD_INT 81
34911: PUSH
34912: LD_VAR 0 1
34916: PUSH
34917: EMPTY
34918: LIST
34919: LIST
34920: PUSH
34921: LD_INT 92
34923: PUSH
34924: LD_VAR 0 2
34928: PUSH
34929: LD_VAR 0 3
34933: PUSH
34934: LD_VAR 0 4
34938: PUSH
34939: EMPTY
34940: LIST
34941: LIST
34942: LIST
34943: LIST
34944: PUSH
34945: LD_INT 3
34947: PUSH
34948: LD_INT 21
34950: PUSH
34951: LD_INT 3
34953: PUSH
34954: EMPTY
34955: LIST
34956: LIST
34957: PUSH
34958: EMPTY
34959: LIST
34960: LIST
34961: PUSH
34962: EMPTY
34963: LIST
34964: LIST
34965: LIST
34966: PPUSH
34967: CALL_OW 69
34971: ST_TO_ADDR
// if not tmp then
34972: LD_VAR 0 8
34976: NOT
34977: IFFALSE 34981
// exit ;
34979: GO 36539
// for i in tmp do
34981: LD_ADDR_VAR 0 6
34985: PUSH
34986: LD_VAR 0 8
34990: PUSH
34991: FOR_IN
34992: IFFALSE 36514
// begin points := [ 0 , 0 , 0 ] ;
34994: LD_ADDR_VAR 0 9
34998: PUSH
34999: LD_INT 0
35001: PUSH
35002: LD_INT 0
35004: PUSH
35005: LD_INT 0
35007: PUSH
35008: EMPTY
35009: LIST
35010: LIST
35011: LIST
35012: ST_TO_ADDR
// bpoints := 1 ;
35013: LD_ADDR_VAR 0 10
35017: PUSH
35018: LD_INT 1
35020: ST_TO_ADDR
// case GetType ( i ) of unit_human :
35021: LD_VAR 0 6
35025: PPUSH
35026: CALL_OW 247
35030: PUSH
35031: LD_INT 1
35033: DOUBLE
35034: EQUAL
35035: IFTRUE 35039
35037: GO 35617
35039: POP
// begin if GetClass ( i ) = 1 then
35040: LD_VAR 0 6
35044: PPUSH
35045: CALL_OW 257
35049: PUSH
35050: LD_INT 1
35052: EQUAL
35053: IFFALSE 35074
// points := [ 10 , 5 , 3 ] ;
35055: LD_ADDR_VAR 0 9
35059: PUSH
35060: LD_INT 10
35062: PUSH
35063: LD_INT 5
35065: PUSH
35066: LD_INT 3
35068: PUSH
35069: EMPTY
35070: LIST
35071: LIST
35072: LIST
35073: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
35074: LD_VAR 0 6
35078: PPUSH
35079: CALL_OW 257
35083: PUSH
35084: LD_INT 2
35086: PUSH
35087: LD_INT 3
35089: PUSH
35090: LD_INT 4
35092: PUSH
35093: EMPTY
35094: LIST
35095: LIST
35096: LIST
35097: IN
35098: IFFALSE 35119
// points := [ 3 , 2 , 1 ] ;
35100: LD_ADDR_VAR 0 9
35104: PUSH
35105: LD_INT 3
35107: PUSH
35108: LD_INT 2
35110: PUSH
35111: LD_INT 1
35113: PUSH
35114: EMPTY
35115: LIST
35116: LIST
35117: LIST
35118: ST_TO_ADDR
// if GetClass ( i ) = 5 then
35119: LD_VAR 0 6
35123: PPUSH
35124: CALL_OW 257
35128: PUSH
35129: LD_INT 5
35131: EQUAL
35132: IFFALSE 35153
// points := [ 130 , 5 , 2 ] ;
35134: LD_ADDR_VAR 0 9
35138: PUSH
35139: LD_INT 130
35141: PUSH
35142: LD_INT 5
35144: PUSH
35145: LD_INT 2
35147: PUSH
35148: EMPTY
35149: LIST
35150: LIST
35151: LIST
35152: ST_TO_ADDR
// if GetClass ( i ) = 8 then
35153: LD_VAR 0 6
35157: PPUSH
35158: CALL_OW 257
35162: PUSH
35163: LD_INT 8
35165: EQUAL
35166: IFFALSE 35187
// points := [ 35 , 35 , 30 ] ;
35168: LD_ADDR_VAR 0 9
35172: PUSH
35173: LD_INT 35
35175: PUSH
35176: LD_INT 35
35178: PUSH
35179: LD_INT 30
35181: PUSH
35182: EMPTY
35183: LIST
35184: LIST
35185: LIST
35186: ST_TO_ADDR
// if GetClass ( i ) = 9 then
35187: LD_VAR 0 6
35191: PPUSH
35192: CALL_OW 257
35196: PUSH
35197: LD_INT 9
35199: EQUAL
35200: IFFALSE 35221
// points := [ 20 , 55 , 40 ] ;
35202: LD_ADDR_VAR 0 9
35206: PUSH
35207: LD_INT 20
35209: PUSH
35210: LD_INT 55
35212: PUSH
35213: LD_INT 40
35215: PUSH
35216: EMPTY
35217: LIST
35218: LIST
35219: LIST
35220: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
35221: LD_VAR 0 6
35225: PPUSH
35226: CALL_OW 257
35230: PUSH
35231: LD_INT 12
35233: PUSH
35234: LD_INT 16
35236: PUSH
35237: EMPTY
35238: LIST
35239: LIST
35240: IN
35241: IFFALSE 35262
// points := [ 5 , 3 , 2 ] ;
35243: LD_ADDR_VAR 0 9
35247: PUSH
35248: LD_INT 5
35250: PUSH
35251: LD_INT 3
35253: PUSH
35254: LD_INT 2
35256: PUSH
35257: EMPTY
35258: LIST
35259: LIST
35260: LIST
35261: ST_TO_ADDR
// if GetClass ( i ) = 17 then
35262: LD_VAR 0 6
35266: PPUSH
35267: CALL_OW 257
35271: PUSH
35272: LD_INT 17
35274: EQUAL
35275: IFFALSE 35296
// points := [ 100 , 50 , 75 ] ;
35277: LD_ADDR_VAR 0 9
35281: PUSH
35282: LD_INT 100
35284: PUSH
35285: LD_INT 50
35287: PUSH
35288: LD_INT 75
35290: PUSH
35291: EMPTY
35292: LIST
35293: LIST
35294: LIST
35295: ST_TO_ADDR
// if GetClass ( i ) = 15 then
35296: LD_VAR 0 6
35300: PPUSH
35301: CALL_OW 257
35305: PUSH
35306: LD_INT 15
35308: EQUAL
35309: IFFALSE 35330
// points := [ 10 , 5 , 3 ] ;
35311: LD_ADDR_VAR 0 9
35315: PUSH
35316: LD_INT 10
35318: PUSH
35319: LD_INT 5
35321: PUSH
35322: LD_INT 3
35324: PUSH
35325: EMPTY
35326: LIST
35327: LIST
35328: LIST
35329: ST_TO_ADDR
// if GetClass ( i ) = 14 then
35330: LD_VAR 0 6
35334: PPUSH
35335: CALL_OW 257
35339: PUSH
35340: LD_INT 14
35342: EQUAL
35343: IFFALSE 35364
// points := [ 10 , 0 , 0 ] ;
35345: LD_ADDR_VAR 0 9
35349: PUSH
35350: LD_INT 10
35352: PUSH
35353: LD_INT 0
35355: PUSH
35356: LD_INT 0
35358: PUSH
35359: EMPTY
35360: LIST
35361: LIST
35362: LIST
35363: ST_TO_ADDR
// if GetClass ( i ) = 11 then
35364: LD_VAR 0 6
35368: PPUSH
35369: CALL_OW 257
35373: PUSH
35374: LD_INT 11
35376: EQUAL
35377: IFFALSE 35398
// points := [ 30 , 10 , 5 ] ;
35379: LD_ADDR_VAR 0 9
35383: PUSH
35384: LD_INT 30
35386: PUSH
35387: LD_INT 10
35389: PUSH
35390: LD_INT 5
35392: PUSH
35393: EMPTY
35394: LIST
35395: LIST
35396: LIST
35397: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
35398: LD_VAR 0 1
35402: PPUSH
35403: LD_INT 5
35405: PPUSH
35406: CALL_OW 321
35410: PUSH
35411: LD_INT 2
35413: EQUAL
35414: IFFALSE 35431
// bpoints := bpoints * 1.8 ;
35416: LD_ADDR_VAR 0 10
35420: PUSH
35421: LD_VAR 0 10
35425: PUSH
35426: LD_REAL  1.80000000000000E+0000
35429: MUL
35430: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
35431: LD_VAR 0 6
35435: PPUSH
35436: CALL_OW 257
35440: PUSH
35441: LD_INT 1
35443: PUSH
35444: LD_INT 2
35446: PUSH
35447: LD_INT 3
35449: PUSH
35450: LD_INT 4
35452: PUSH
35453: EMPTY
35454: LIST
35455: LIST
35456: LIST
35457: LIST
35458: IN
35459: PUSH
35460: LD_VAR 0 1
35464: PPUSH
35465: LD_INT 51
35467: PPUSH
35468: CALL_OW 321
35472: PUSH
35473: LD_INT 2
35475: EQUAL
35476: AND
35477: IFFALSE 35494
// bpoints := bpoints * 1.2 ;
35479: LD_ADDR_VAR 0 10
35483: PUSH
35484: LD_VAR 0 10
35488: PUSH
35489: LD_REAL  1.20000000000000E+0000
35492: MUL
35493: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
35494: LD_VAR 0 6
35498: PPUSH
35499: CALL_OW 257
35503: PUSH
35504: LD_INT 5
35506: PUSH
35507: LD_INT 7
35509: PUSH
35510: LD_INT 9
35512: PUSH
35513: EMPTY
35514: LIST
35515: LIST
35516: LIST
35517: IN
35518: PUSH
35519: LD_VAR 0 1
35523: PPUSH
35524: LD_INT 52
35526: PPUSH
35527: CALL_OW 321
35531: PUSH
35532: LD_INT 2
35534: EQUAL
35535: AND
35536: IFFALSE 35553
// bpoints := bpoints * 1.5 ;
35538: LD_ADDR_VAR 0 10
35542: PUSH
35543: LD_VAR 0 10
35547: PUSH
35548: LD_REAL  1.50000000000000E+0000
35551: MUL
35552: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
35553: LD_VAR 0 1
35557: PPUSH
35558: LD_INT 66
35560: PPUSH
35561: CALL_OW 321
35565: PUSH
35566: LD_INT 2
35568: EQUAL
35569: IFFALSE 35586
// bpoints := bpoints * 1.1 ;
35571: LD_ADDR_VAR 0 10
35575: PUSH
35576: LD_VAR 0 10
35580: PUSH
35581: LD_REAL  1.10000000000000E+0000
35584: MUL
35585: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
35586: LD_ADDR_VAR 0 10
35590: PUSH
35591: LD_VAR 0 10
35595: PUSH
35596: LD_VAR 0 6
35600: PPUSH
35601: LD_INT 1
35603: PPUSH
35604: CALL_OW 259
35608: PUSH
35609: LD_REAL  1.15000000000000E+0000
35612: MUL
35613: MUL
35614: ST_TO_ADDR
// end ; unit_vehicle :
35615: GO 36443
35617: LD_INT 2
35619: DOUBLE
35620: EQUAL
35621: IFTRUE 35625
35623: GO 36431
35625: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
35626: LD_VAR 0 6
35630: PPUSH
35631: CALL_OW 264
35635: PUSH
35636: LD_INT 2
35638: PUSH
35639: LD_INT 42
35641: PUSH
35642: LD_INT 24
35644: PUSH
35645: EMPTY
35646: LIST
35647: LIST
35648: LIST
35649: IN
35650: IFFALSE 35671
// points := [ 25 , 5 , 3 ] ;
35652: LD_ADDR_VAR 0 9
35656: PUSH
35657: LD_INT 25
35659: PUSH
35660: LD_INT 5
35662: PUSH
35663: LD_INT 3
35665: PUSH
35666: EMPTY
35667: LIST
35668: LIST
35669: LIST
35670: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
35671: LD_VAR 0 6
35675: PPUSH
35676: CALL_OW 264
35680: PUSH
35681: LD_INT 4
35683: PUSH
35684: LD_INT 43
35686: PUSH
35687: LD_INT 25
35689: PUSH
35690: EMPTY
35691: LIST
35692: LIST
35693: LIST
35694: IN
35695: IFFALSE 35716
// points := [ 40 , 15 , 5 ] ;
35697: LD_ADDR_VAR 0 9
35701: PUSH
35702: LD_INT 40
35704: PUSH
35705: LD_INT 15
35707: PUSH
35708: LD_INT 5
35710: PUSH
35711: EMPTY
35712: LIST
35713: LIST
35714: LIST
35715: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
35716: LD_VAR 0 6
35720: PPUSH
35721: CALL_OW 264
35725: PUSH
35726: LD_INT 3
35728: PUSH
35729: LD_INT 23
35731: PUSH
35732: EMPTY
35733: LIST
35734: LIST
35735: IN
35736: IFFALSE 35757
// points := [ 7 , 25 , 8 ] ;
35738: LD_ADDR_VAR 0 9
35742: PUSH
35743: LD_INT 7
35745: PUSH
35746: LD_INT 25
35748: PUSH
35749: LD_INT 8
35751: PUSH
35752: EMPTY
35753: LIST
35754: LIST
35755: LIST
35756: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
35757: LD_VAR 0 6
35761: PPUSH
35762: CALL_OW 264
35766: PUSH
35767: LD_INT 5
35769: PUSH
35770: LD_INT 27
35772: PUSH
35773: LD_INT 44
35775: PUSH
35776: EMPTY
35777: LIST
35778: LIST
35779: LIST
35780: IN
35781: IFFALSE 35802
// points := [ 14 , 50 , 16 ] ;
35783: LD_ADDR_VAR 0 9
35787: PUSH
35788: LD_INT 14
35790: PUSH
35791: LD_INT 50
35793: PUSH
35794: LD_INT 16
35796: PUSH
35797: EMPTY
35798: LIST
35799: LIST
35800: LIST
35801: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
35802: LD_VAR 0 6
35806: PPUSH
35807: CALL_OW 264
35811: PUSH
35812: LD_INT 6
35814: PUSH
35815: LD_INT 46
35817: PUSH
35818: EMPTY
35819: LIST
35820: LIST
35821: IN
35822: IFFALSE 35843
// points := [ 32 , 120 , 70 ] ;
35824: LD_ADDR_VAR 0 9
35828: PUSH
35829: LD_INT 32
35831: PUSH
35832: LD_INT 120
35834: PUSH
35835: LD_INT 70
35837: PUSH
35838: EMPTY
35839: LIST
35840: LIST
35841: LIST
35842: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
35843: LD_VAR 0 6
35847: PPUSH
35848: CALL_OW 264
35852: PUSH
35853: LD_INT 7
35855: PUSH
35856: LD_INT 28
35858: PUSH
35859: LD_INT 45
35861: PUSH
35862: LD_INT 92
35864: PUSH
35865: EMPTY
35866: LIST
35867: LIST
35868: LIST
35869: LIST
35870: IN
35871: IFFALSE 35892
// points := [ 35 , 20 , 45 ] ;
35873: LD_ADDR_VAR 0 9
35877: PUSH
35878: LD_INT 35
35880: PUSH
35881: LD_INT 20
35883: PUSH
35884: LD_INT 45
35886: PUSH
35887: EMPTY
35888: LIST
35889: LIST
35890: LIST
35891: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
35892: LD_VAR 0 6
35896: PPUSH
35897: CALL_OW 264
35901: PUSH
35902: LD_INT 47
35904: PUSH
35905: EMPTY
35906: LIST
35907: IN
35908: IFFALSE 35929
// points := [ 67 , 45 , 75 ] ;
35910: LD_ADDR_VAR 0 9
35914: PUSH
35915: LD_INT 67
35917: PUSH
35918: LD_INT 45
35920: PUSH
35921: LD_INT 75
35923: PUSH
35924: EMPTY
35925: LIST
35926: LIST
35927: LIST
35928: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
35929: LD_VAR 0 6
35933: PPUSH
35934: CALL_OW 264
35938: PUSH
35939: LD_INT 26
35941: PUSH
35942: EMPTY
35943: LIST
35944: IN
35945: IFFALSE 35966
// points := [ 120 , 30 , 80 ] ;
35947: LD_ADDR_VAR 0 9
35951: PUSH
35952: LD_INT 120
35954: PUSH
35955: LD_INT 30
35957: PUSH
35958: LD_INT 80
35960: PUSH
35961: EMPTY
35962: LIST
35963: LIST
35964: LIST
35965: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
35966: LD_VAR 0 6
35970: PPUSH
35971: CALL_OW 264
35975: PUSH
35976: LD_INT 22
35978: PUSH
35979: EMPTY
35980: LIST
35981: IN
35982: IFFALSE 36003
// points := [ 40 , 1 , 1 ] ;
35984: LD_ADDR_VAR 0 9
35988: PUSH
35989: LD_INT 40
35991: PUSH
35992: LD_INT 1
35994: PUSH
35995: LD_INT 1
35997: PUSH
35998: EMPTY
35999: LIST
36000: LIST
36001: LIST
36002: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
36003: LD_VAR 0 6
36007: PPUSH
36008: CALL_OW 264
36012: PUSH
36013: LD_INT 29
36015: PUSH
36016: EMPTY
36017: LIST
36018: IN
36019: IFFALSE 36040
// points := [ 70 , 200 , 400 ] ;
36021: LD_ADDR_VAR 0 9
36025: PUSH
36026: LD_INT 70
36028: PUSH
36029: LD_INT 200
36031: PUSH
36032: LD_INT 400
36034: PUSH
36035: EMPTY
36036: LIST
36037: LIST
36038: LIST
36039: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
36040: LD_VAR 0 6
36044: PPUSH
36045: CALL_OW 264
36049: PUSH
36050: LD_INT 14
36052: PUSH
36053: LD_INT 53
36055: PUSH
36056: EMPTY
36057: LIST
36058: LIST
36059: IN
36060: IFFALSE 36081
// points := [ 40 , 10 , 20 ] ;
36062: LD_ADDR_VAR 0 9
36066: PUSH
36067: LD_INT 40
36069: PUSH
36070: LD_INT 10
36072: PUSH
36073: LD_INT 20
36075: PUSH
36076: EMPTY
36077: LIST
36078: LIST
36079: LIST
36080: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
36081: LD_VAR 0 6
36085: PPUSH
36086: CALL_OW 264
36090: PUSH
36091: LD_INT 9
36093: PUSH
36094: EMPTY
36095: LIST
36096: IN
36097: IFFALSE 36118
// points := [ 5 , 70 , 20 ] ;
36099: LD_ADDR_VAR 0 9
36103: PUSH
36104: LD_INT 5
36106: PUSH
36107: LD_INT 70
36109: PUSH
36110: LD_INT 20
36112: PUSH
36113: EMPTY
36114: LIST
36115: LIST
36116: LIST
36117: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
36118: LD_VAR 0 6
36122: PPUSH
36123: CALL_OW 264
36127: PUSH
36128: LD_INT 10
36130: PUSH
36131: EMPTY
36132: LIST
36133: IN
36134: IFFALSE 36155
// points := [ 35 , 110 , 70 ] ;
36136: LD_ADDR_VAR 0 9
36140: PUSH
36141: LD_INT 35
36143: PUSH
36144: LD_INT 110
36146: PUSH
36147: LD_INT 70
36149: PUSH
36150: EMPTY
36151: LIST
36152: LIST
36153: LIST
36154: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
36155: LD_VAR 0 6
36159: PPUSH
36160: CALL_OW 265
36164: PUSH
36165: LD_INT 25
36167: EQUAL
36168: IFFALSE 36189
// points := [ 80 , 65 , 100 ] ;
36170: LD_ADDR_VAR 0 9
36174: PUSH
36175: LD_INT 80
36177: PUSH
36178: LD_INT 65
36180: PUSH
36181: LD_INT 100
36183: PUSH
36184: EMPTY
36185: LIST
36186: LIST
36187: LIST
36188: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
36189: LD_VAR 0 6
36193: PPUSH
36194: CALL_OW 263
36198: PUSH
36199: LD_INT 1
36201: EQUAL
36202: IFFALSE 36237
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
36204: LD_ADDR_VAR 0 10
36208: PUSH
36209: LD_VAR 0 10
36213: PUSH
36214: LD_VAR 0 6
36218: PPUSH
36219: CALL_OW 311
36223: PPUSH
36224: LD_INT 3
36226: PPUSH
36227: CALL_OW 259
36231: PUSH
36232: LD_INT 4
36234: MUL
36235: MUL
36236: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
36237: LD_VAR 0 6
36241: PPUSH
36242: CALL_OW 263
36246: PUSH
36247: LD_INT 2
36249: EQUAL
36250: IFFALSE 36301
// begin j := IsControledBy ( i ) ;
36252: LD_ADDR_VAR 0 7
36256: PUSH
36257: LD_VAR 0 6
36261: PPUSH
36262: CALL_OW 312
36266: ST_TO_ADDR
// if j then
36267: LD_VAR 0 7
36271: IFFALSE 36301
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
36273: LD_ADDR_VAR 0 10
36277: PUSH
36278: LD_VAR 0 10
36282: PUSH
36283: LD_VAR 0 7
36287: PPUSH
36288: LD_INT 3
36290: PPUSH
36291: CALL_OW 259
36295: PUSH
36296: LD_INT 3
36298: MUL
36299: MUL
36300: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
36301: LD_VAR 0 6
36305: PPUSH
36306: CALL_OW 264
36310: PUSH
36311: LD_INT 5
36313: PUSH
36314: LD_INT 6
36316: PUSH
36317: LD_INT 46
36319: PUSH
36320: LD_INT 44
36322: PUSH
36323: LD_INT 47
36325: PUSH
36326: LD_INT 45
36328: PUSH
36329: LD_INT 28
36331: PUSH
36332: LD_INT 7
36334: PUSH
36335: LD_INT 27
36337: PUSH
36338: LD_INT 29
36340: PUSH
36341: EMPTY
36342: LIST
36343: LIST
36344: LIST
36345: LIST
36346: LIST
36347: LIST
36348: LIST
36349: LIST
36350: LIST
36351: LIST
36352: IN
36353: PUSH
36354: LD_VAR 0 1
36358: PPUSH
36359: LD_INT 52
36361: PPUSH
36362: CALL_OW 321
36366: PUSH
36367: LD_INT 2
36369: EQUAL
36370: AND
36371: IFFALSE 36388
// bpoints := bpoints * 1.2 ;
36373: LD_ADDR_VAR 0 10
36377: PUSH
36378: LD_VAR 0 10
36382: PUSH
36383: LD_REAL  1.20000000000000E+0000
36386: MUL
36387: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
36388: LD_VAR 0 6
36392: PPUSH
36393: CALL_OW 264
36397: PUSH
36398: LD_INT 6
36400: PUSH
36401: LD_INT 46
36403: PUSH
36404: LD_INT 47
36406: PUSH
36407: EMPTY
36408: LIST
36409: LIST
36410: LIST
36411: IN
36412: IFFALSE 36429
// bpoints := bpoints * 1.2 ;
36414: LD_ADDR_VAR 0 10
36418: PUSH
36419: LD_VAR 0 10
36423: PUSH
36424: LD_REAL  1.20000000000000E+0000
36427: MUL
36428: ST_TO_ADDR
// end ; unit_building :
36429: GO 36443
36431: LD_INT 3
36433: DOUBLE
36434: EQUAL
36435: IFTRUE 36439
36437: GO 36442
36439: POP
// ; end ;
36440: GO 36443
36442: POP
// for j = 1 to 3 do
36443: LD_ADDR_VAR 0 7
36447: PUSH
36448: DOUBLE
36449: LD_INT 1
36451: DEC
36452: ST_TO_ADDR
36453: LD_INT 3
36455: PUSH
36456: FOR_TO
36457: IFFALSE 36510
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
36459: LD_ADDR_VAR 0 5
36463: PUSH
36464: LD_VAR 0 5
36468: PPUSH
36469: LD_VAR 0 7
36473: PPUSH
36474: LD_VAR 0 5
36478: PUSH
36479: LD_VAR 0 7
36483: ARRAY
36484: PUSH
36485: LD_VAR 0 9
36489: PUSH
36490: LD_VAR 0 7
36494: ARRAY
36495: PUSH
36496: LD_VAR 0 10
36500: MUL
36501: PLUS
36502: PPUSH
36503: CALL_OW 1
36507: ST_TO_ADDR
36508: GO 36456
36510: POP
36511: POP
// end ;
36512: GO 34991
36514: POP
36515: POP
// result := Replace ( result , 4 , tmp ) ;
36516: LD_ADDR_VAR 0 5
36520: PUSH
36521: LD_VAR 0 5
36525: PPUSH
36526: LD_INT 4
36528: PPUSH
36529: LD_VAR 0 8
36533: PPUSH
36534: CALL_OW 1
36538: ST_TO_ADDR
// end ;
36539: LD_VAR 0 5
36543: RET
// export function DangerAtRange ( unit , range ) ; begin
36544: LD_INT 0
36546: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
36547: LD_ADDR_VAR 0 3
36551: PUSH
36552: LD_VAR 0 1
36556: PPUSH
36557: CALL_OW 255
36561: PPUSH
36562: LD_VAR 0 1
36566: PPUSH
36567: CALL_OW 250
36571: PPUSH
36572: LD_VAR 0 1
36576: PPUSH
36577: CALL_OW 251
36581: PPUSH
36582: LD_VAR 0 2
36586: PPUSH
36587: CALL 34843 0 4
36591: ST_TO_ADDR
// end ;
36592: LD_VAR 0 3
36596: RET
// export function DangerInArea ( side , area ) ; begin
36597: LD_INT 0
36599: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
36600: LD_ADDR_VAR 0 3
36604: PUSH
36605: LD_VAR 0 2
36609: PPUSH
36610: LD_INT 81
36612: PUSH
36613: LD_VAR 0 1
36617: PUSH
36618: EMPTY
36619: LIST
36620: LIST
36621: PPUSH
36622: CALL_OW 70
36626: ST_TO_ADDR
// end ;
36627: LD_VAR 0 3
36631: RET
// export function IsExtension ( b ) ; begin
36632: LD_INT 0
36634: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
36635: LD_ADDR_VAR 0 2
36639: PUSH
36640: LD_VAR 0 1
36644: PUSH
36645: LD_INT 23
36647: PUSH
36648: LD_INT 20
36650: PUSH
36651: LD_INT 22
36653: PUSH
36654: LD_INT 17
36656: PUSH
36657: LD_INT 24
36659: PUSH
36660: LD_INT 21
36662: PUSH
36663: LD_INT 19
36665: PUSH
36666: LD_INT 16
36668: PUSH
36669: LD_INT 25
36671: PUSH
36672: LD_INT 18
36674: PUSH
36675: EMPTY
36676: LIST
36677: LIST
36678: LIST
36679: LIST
36680: LIST
36681: LIST
36682: LIST
36683: LIST
36684: LIST
36685: LIST
36686: IN
36687: ST_TO_ADDR
// end ;
36688: LD_VAR 0 2
36692: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
36693: LD_INT 0
36695: PPUSH
36696: PPUSH
36697: PPUSH
// result := [ ] ;
36698: LD_ADDR_VAR 0 4
36702: PUSH
36703: EMPTY
36704: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
36705: LD_ADDR_VAR 0 5
36709: PUSH
36710: LD_VAR 0 2
36714: PPUSH
36715: LD_INT 21
36717: PUSH
36718: LD_INT 3
36720: PUSH
36721: EMPTY
36722: LIST
36723: LIST
36724: PPUSH
36725: CALL_OW 70
36729: ST_TO_ADDR
// if not tmp then
36730: LD_VAR 0 5
36734: NOT
36735: IFFALSE 36739
// exit ;
36737: GO 36803
// if checkLink then
36739: LD_VAR 0 3
36743: IFFALSE 36793
// begin for i in tmp do
36745: LD_ADDR_VAR 0 6
36749: PUSH
36750: LD_VAR 0 5
36754: PUSH
36755: FOR_IN
36756: IFFALSE 36791
// if GetBase ( i ) <> base then
36758: LD_VAR 0 6
36762: PPUSH
36763: CALL_OW 274
36767: PUSH
36768: LD_VAR 0 1
36772: NONEQUAL
36773: IFFALSE 36789
// ComLinkToBase ( base , i ) ;
36775: LD_VAR 0 1
36779: PPUSH
36780: LD_VAR 0 6
36784: PPUSH
36785: CALL_OW 169
36789: GO 36755
36791: POP
36792: POP
// end ; result := tmp ;
36793: LD_ADDR_VAR 0 4
36797: PUSH
36798: LD_VAR 0 5
36802: ST_TO_ADDR
// end ;
36803: LD_VAR 0 4
36807: RET
// export function ComComplete ( units , b ) ; var i ; begin
36808: LD_INT 0
36810: PPUSH
36811: PPUSH
// if not units then
36812: LD_VAR 0 1
36816: NOT
36817: IFFALSE 36821
// exit ;
36819: GO 36911
// for i in units do
36821: LD_ADDR_VAR 0 4
36825: PUSH
36826: LD_VAR 0 1
36830: PUSH
36831: FOR_IN
36832: IFFALSE 36909
// if BuildingStatus ( b ) = bs_build then
36834: LD_VAR 0 2
36838: PPUSH
36839: CALL_OW 461
36843: PUSH
36844: LD_INT 1
36846: EQUAL
36847: IFFALSE 36907
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
36849: LD_VAR 0 4
36853: PPUSH
36854: LD_STRING h
36856: PUSH
36857: LD_VAR 0 2
36861: PPUSH
36862: CALL_OW 250
36866: PUSH
36867: LD_VAR 0 2
36871: PPUSH
36872: CALL_OW 251
36876: PUSH
36877: LD_VAR 0 2
36881: PUSH
36882: LD_INT 0
36884: PUSH
36885: LD_INT 0
36887: PUSH
36888: LD_INT 0
36890: PUSH
36891: EMPTY
36892: LIST
36893: LIST
36894: LIST
36895: LIST
36896: LIST
36897: LIST
36898: LIST
36899: PUSH
36900: EMPTY
36901: LIST
36902: PPUSH
36903: CALL_OW 446
36907: GO 36831
36909: POP
36910: POP
// end ;
36911: LD_VAR 0 3
36915: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
36916: LD_INT 0
36918: PPUSH
36919: PPUSH
36920: PPUSH
36921: PPUSH
36922: PPUSH
36923: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
36924: LD_VAR 0 1
36928: NOT
36929: PUSH
36930: LD_VAR 0 1
36934: PPUSH
36935: CALL_OW 263
36939: PUSH
36940: LD_INT 2
36942: NONEQUAL
36943: OR
36944: IFFALSE 36948
// exit ;
36946: GO 37264
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
36948: LD_ADDR_VAR 0 6
36952: PUSH
36953: LD_INT 22
36955: PUSH
36956: LD_VAR 0 1
36960: PPUSH
36961: CALL_OW 255
36965: PUSH
36966: EMPTY
36967: LIST
36968: LIST
36969: PUSH
36970: LD_INT 2
36972: PUSH
36973: LD_INT 30
36975: PUSH
36976: LD_INT 36
36978: PUSH
36979: EMPTY
36980: LIST
36981: LIST
36982: PUSH
36983: LD_INT 34
36985: PUSH
36986: LD_INT 31
36988: PUSH
36989: EMPTY
36990: LIST
36991: LIST
36992: PUSH
36993: EMPTY
36994: LIST
36995: LIST
36996: LIST
36997: PUSH
36998: EMPTY
36999: LIST
37000: LIST
37001: PPUSH
37002: CALL_OW 69
37006: ST_TO_ADDR
// if not tmp then
37007: LD_VAR 0 6
37011: NOT
37012: IFFALSE 37016
// exit ;
37014: GO 37264
// result := [ ] ;
37016: LD_ADDR_VAR 0 2
37020: PUSH
37021: EMPTY
37022: ST_TO_ADDR
// for i in tmp do
37023: LD_ADDR_VAR 0 3
37027: PUSH
37028: LD_VAR 0 6
37032: PUSH
37033: FOR_IN
37034: IFFALSE 37105
// begin t := UnitsInside ( i ) ;
37036: LD_ADDR_VAR 0 4
37040: PUSH
37041: LD_VAR 0 3
37045: PPUSH
37046: CALL_OW 313
37050: ST_TO_ADDR
// if t then
37051: LD_VAR 0 4
37055: IFFALSE 37103
// for j in t do
37057: LD_ADDR_VAR 0 7
37061: PUSH
37062: LD_VAR 0 4
37066: PUSH
37067: FOR_IN
37068: IFFALSE 37101
// result := Replace ( result , result + 1 , j ) ;
37070: LD_ADDR_VAR 0 2
37074: PUSH
37075: LD_VAR 0 2
37079: PPUSH
37080: LD_VAR 0 2
37084: PUSH
37085: LD_INT 1
37087: PLUS
37088: PPUSH
37089: LD_VAR 0 7
37093: PPUSH
37094: CALL_OW 1
37098: ST_TO_ADDR
37099: GO 37067
37101: POP
37102: POP
// end ;
37103: GO 37033
37105: POP
37106: POP
// if not result then
37107: LD_VAR 0 2
37111: NOT
37112: IFFALSE 37116
// exit ;
37114: GO 37264
// mech := result [ 1 ] ;
37116: LD_ADDR_VAR 0 5
37120: PUSH
37121: LD_VAR 0 2
37125: PUSH
37126: LD_INT 1
37128: ARRAY
37129: ST_TO_ADDR
// if result > 1 then
37130: LD_VAR 0 2
37134: PUSH
37135: LD_INT 1
37137: GREATER
37138: IFFALSE 37250
// begin for i = 2 to result do
37140: LD_ADDR_VAR 0 3
37144: PUSH
37145: DOUBLE
37146: LD_INT 2
37148: DEC
37149: ST_TO_ADDR
37150: LD_VAR 0 2
37154: PUSH
37155: FOR_TO
37156: IFFALSE 37248
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
37158: LD_ADDR_VAR 0 4
37162: PUSH
37163: LD_VAR 0 2
37167: PUSH
37168: LD_VAR 0 3
37172: ARRAY
37173: PPUSH
37174: LD_INT 3
37176: PPUSH
37177: CALL_OW 259
37181: PUSH
37182: LD_VAR 0 2
37186: PUSH
37187: LD_VAR 0 3
37191: ARRAY
37192: PPUSH
37193: CALL_OW 432
37197: MINUS
37198: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
37199: LD_VAR 0 4
37203: PUSH
37204: LD_VAR 0 5
37208: PPUSH
37209: LD_INT 3
37211: PPUSH
37212: CALL_OW 259
37216: PUSH
37217: LD_VAR 0 5
37221: PPUSH
37222: CALL_OW 432
37226: MINUS
37227: GREATEREQUAL
37228: IFFALSE 37246
// mech := result [ i ] ;
37230: LD_ADDR_VAR 0 5
37234: PUSH
37235: LD_VAR 0 2
37239: PUSH
37240: LD_VAR 0 3
37244: ARRAY
37245: ST_TO_ADDR
// end ;
37246: GO 37155
37248: POP
37249: POP
// end ; ComLinkTo ( vehicle , mech ) ;
37250: LD_VAR 0 1
37254: PPUSH
37255: LD_VAR 0 5
37259: PPUSH
37260: CALL_OW 135
// end ;
37264: LD_VAR 0 2
37268: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
37269: LD_INT 0
37271: PPUSH
37272: PPUSH
37273: PPUSH
37274: PPUSH
37275: PPUSH
37276: PPUSH
37277: PPUSH
37278: PPUSH
37279: PPUSH
37280: PPUSH
37281: PPUSH
37282: PPUSH
37283: PPUSH
// result := [ ] ;
37284: LD_ADDR_VAR 0 7
37288: PUSH
37289: EMPTY
37290: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
37291: LD_VAR 0 1
37295: PPUSH
37296: CALL_OW 266
37300: PUSH
37301: LD_INT 0
37303: PUSH
37304: LD_INT 1
37306: PUSH
37307: EMPTY
37308: LIST
37309: LIST
37310: IN
37311: NOT
37312: IFFALSE 37316
// exit ;
37314: GO 38950
// if name then
37316: LD_VAR 0 3
37320: IFFALSE 37336
// SetBName ( base_dep , name ) ;
37322: LD_VAR 0 1
37326: PPUSH
37327: LD_VAR 0 3
37331: PPUSH
37332: CALL_OW 500
// base := GetBase ( base_dep ) ;
37336: LD_ADDR_VAR 0 15
37340: PUSH
37341: LD_VAR 0 1
37345: PPUSH
37346: CALL_OW 274
37350: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
37351: LD_ADDR_VAR 0 16
37355: PUSH
37356: LD_VAR 0 1
37360: PPUSH
37361: CALL_OW 255
37365: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
37366: LD_ADDR_VAR 0 17
37370: PUSH
37371: LD_VAR 0 1
37375: PPUSH
37376: CALL_OW 248
37380: ST_TO_ADDR
// if sources then
37381: LD_VAR 0 5
37385: IFFALSE 37432
// for i = 1 to 3 do
37387: LD_ADDR_VAR 0 8
37391: PUSH
37392: DOUBLE
37393: LD_INT 1
37395: DEC
37396: ST_TO_ADDR
37397: LD_INT 3
37399: PUSH
37400: FOR_TO
37401: IFFALSE 37430
// AddResourceType ( base , i , sources [ i ] ) ;
37403: LD_VAR 0 15
37407: PPUSH
37408: LD_VAR 0 8
37412: PPUSH
37413: LD_VAR 0 5
37417: PUSH
37418: LD_VAR 0 8
37422: ARRAY
37423: PPUSH
37424: CALL_OW 276
37428: GO 37400
37430: POP
37431: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
37432: LD_ADDR_VAR 0 18
37436: PUSH
37437: LD_VAR 0 15
37441: PPUSH
37442: LD_VAR 0 2
37446: PPUSH
37447: LD_INT 1
37449: PPUSH
37450: CALL 36693 0 3
37454: ST_TO_ADDR
// InitHc ;
37455: CALL_OW 19
// InitUc ;
37459: CALL_OW 18
// uc_side := side ;
37463: LD_ADDR_OWVAR 20
37467: PUSH
37468: LD_VAR 0 16
37472: ST_TO_ADDR
// uc_nation := nation ;
37473: LD_ADDR_OWVAR 21
37477: PUSH
37478: LD_VAR 0 17
37482: ST_TO_ADDR
// if buildings then
37483: LD_VAR 0 18
37487: IFFALSE 38809
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
37489: LD_ADDR_VAR 0 19
37493: PUSH
37494: LD_VAR 0 18
37498: PPUSH
37499: LD_INT 2
37501: PUSH
37502: LD_INT 30
37504: PUSH
37505: LD_INT 29
37507: PUSH
37508: EMPTY
37509: LIST
37510: LIST
37511: PUSH
37512: LD_INT 30
37514: PUSH
37515: LD_INT 30
37517: PUSH
37518: EMPTY
37519: LIST
37520: LIST
37521: PUSH
37522: EMPTY
37523: LIST
37524: LIST
37525: LIST
37526: PPUSH
37527: CALL_OW 72
37531: ST_TO_ADDR
// if tmp then
37532: LD_VAR 0 19
37536: IFFALSE 37584
// for i in tmp do
37538: LD_ADDR_VAR 0 8
37542: PUSH
37543: LD_VAR 0 19
37547: PUSH
37548: FOR_IN
37549: IFFALSE 37582
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
37551: LD_VAR 0 8
37555: PPUSH
37556: CALL_OW 250
37560: PPUSH
37561: LD_VAR 0 8
37565: PPUSH
37566: CALL_OW 251
37570: PPUSH
37571: LD_VAR 0 16
37575: PPUSH
37576: CALL_OW 441
37580: GO 37548
37582: POP
37583: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
37584: LD_VAR 0 18
37588: PPUSH
37589: LD_INT 2
37591: PUSH
37592: LD_INT 30
37594: PUSH
37595: LD_INT 32
37597: PUSH
37598: EMPTY
37599: LIST
37600: LIST
37601: PUSH
37602: LD_INT 30
37604: PUSH
37605: LD_INT 33
37607: PUSH
37608: EMPTY
37609: LIST
37610: LIST
37611: PUSH
37612: EMPTY
37613: LIST
37614: LIST
37615: LIST
37616: PPUSH
37617: CALL_OW 72
37621: IFFALSE 37709
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
37623: LD_ADDR_VAR 0 8
37627: PUSH
37628: LD_VAR 0 18
37632: PPUSH
37633: LD_INT 2
37635: PUSH
37636: LD_INT 30
37638: PUSH
37639: LD_INT 32
37641: PUSH
37642: EMPTY
37643: LIST
37644: LIST
37645: PUSH
37646: LD_INT 30
37648: PUSH
37649: LD_INT 33
37651: PUSH
37652: EMPTY
37653: LIST
37654: LIST
37655: PUSH
37656: EMPTY
37657: LIST
37658: LIST
37659: LIST
37660: PPUSH
37661: CALL_OW 72
37665: PUSH
37666: FOR_IN
37667: IFFALSE 37707
// begin if not GetBWeapon ( i ) then
37669: LD_VAR 0 8
37673: PPUSH
37674: CALL_OW 269
37678: NOT
37679: IFFALSE 37705
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
37681: LD_VAR 0 8
37685: PPUSH
37686: LD_VAR 0 8
37690: PPUSH
37691: LD_VAR 0 2
37695: PPUSH
37696: CALL 38955 0 2
37700: PPUSH
37701: CALL_OW 431
// end ;
37705: GO 37666
37707: POP
37708: POP
// end ; for i = 1 to personel do
37709: LD_ADDR_VAR 0 8
37713: PUSH
37714: DOUBLE
37715: LD_INT 1
37717: DEC
37718: ST_TO_ADDR
37719: LD_VAR 0 6
37723: PUSH
37724: FOR_TO
37725: IFFALSE 38789
// begin if i > 4 then
37727: LD_VAR 0 8
37731: PUSH
37732: LD_INT 4
37734: GREATER
37735: IFFALSE 37739
// break ;
37737: GO 38789
// case i of 1 :
37739: LD_VAR 0 8
37743: PUSH
37744: LD_INT 1
37746: DOUBLE
37747: EQUAL
37748: IFTRUE 37752
37750: GO 37832
37752: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
37753: LD_ADDR_VAR 0 12
37757: PUSH
37758: LD_VAR 0 18
37762: PPUSH
37763: LD_INT 22
37765: PUSH
37766: LD_VAR 0 16
37770: PUSH
37771: EMPTY
37772: LIST
37773: LIST
37774: PUSH
37775: LD_INT 58
37777: PUSH
37778: EMPTY
37779: LIST
37780: PUSH
37781: LD_INT 2
37783: PUSH
37784: LD_INT 30
37786: PUSH
37787: LD_INT 32
37789: PUSH
37790: EMPTY
37791: LIST
37792: LIST
37793: PUSH
37794: LD_INT 30
37796: PUSH
37797: LD_INT 4
37799: PUSH
37800: EMPTY
37801: LIST
37802: LIST
37803: PUSH
37804: LD_INT 30
37806: PUSH
37807: LD_INT 5
37809: PUSH
37810: EMPTY
37811: LIST
37812: LIST
37813: PUSH
37814: EMPTY
37815: LIST
37816: LIST
37817: LIST
37818: LIST
37819: PUSH
37820: EMPTY
37821: LIST
37822: LIST
37823: LIST
37824: PPUSH
37825: CALL_OW 72
37829: ST_TO_ADDR
37830: GO 38054
37832: LD_INT 2
37834: DOUBLE
37835: EQUAL
37836: IFTRUE 37840
37838: GO 37902
37840: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
37841: LD_ADDR_VAR 0 12
37845: PUSH
37846: LD_VAR 0 18
37850: PPUSH
37851: LD_INT 22
37853: PUSH
37854: LD_VAR 0 16
37858: PUSH
37859: EMPTY
37860: LIST
37861: LIST
37862: PUSH
37863: LD_INT 2
37865: PUSH
37866: LD_INT 30
37868: PUSH
37869: LD_INT 0
37871: PUSH
37872: EMPTY
37873: LIST
37874: LIST
37875: PUSH
37876: LD_INT 30
37878: PUSH
37879: LD_INT 1
37881: PUSH
37882: EMPTY
37883: LIST
37884: LIST
37885: PUSH
37886: EMPTY
37887: LIST
37888: LIST
37889: LIST
37890: PUSH
37891: EMPTY
37892: LIST
37893: LIST
37894: PPUSH
37895: CALL_OW 72
37899: ST_TO_ADDR
37900: GO 38054
37902: LD_INT 3
37904: DOUBLE
37905: EQUAL
37906: IFTRUE 37910
37908: GO 37972
37910: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
37911: LD_ADDR_VAR 0 12
37915: PUSH
37916: LD_VAR 0 18
37920: PPUSH
37921: LD_INT 22
37923: PUSH
37924: LD_VAR 0 16
37928: PUSH
37929: EMPTY
37930: LIST
37931: LIST
37932: PUSH
37933: LD_INT 2
37935: PUSH
37936: LD_INT 30
37938: PUSH
37939: LD_INT 2
37941: PUSH
37942: EMPTY
37943: LIST
37944: LIST
37945: PUSH
37946: LD_INT 30
37948: PUSH
37949: LD_INT 3
37951: PUSH
37952: EMPTY
37953: LIST
37954: LIST
37955: PUSH
37956: EMPTY
37957: LIST
37958: LIST
37959: LIST
37960: PUSH
37961: EMPTY
37962: LIST
37963: LIST
37964: PPUSH
37965: CALL_OW 72
37969: ST_TO_ADDR
37970: GO 38054
37972: LD_INT 4
37974: DOUBLE
37975: EQUAL
37976: IFTRUE 37980
37978: GO 38053
37980: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
37981: LD_ADDR_VAR 0 12
37985: PUSH
37986: LD_VAR 0 18
37990: PPUSH
37991: LD_INT 22
37993: PUSH
37994: LD_VAR 0 16
37998: PUSH
37999: EMPTY
38000: LIST
38001: LIST
38002: PUSH
38003: LD_INT 2
38005: PUSH
38006: LD_INT 30
38008: PUSH
38009: LD_INT 6
38011: PUSH
38012: EMPTY
38013: LIST
38014: LIST
38015: PUSH
38016: LD_INT 30
38018: PUSH
38019: LD_INT 7
38021: PUSH
38022: EMPTY
38023: LIST
38024: LIST
38025: PUSH
38026: LD_INT 30
38028: PUSH
38029: LD_INT 8
38031: PUSH
38032: EMPTY
38033: LIST
38034: LIST
38035: PUSH
38036: EMPTY
38037: LIST
38038: LIST
38039: LIST
38040: LIST
38041: PUSH
38042: EMPTY
38043: LIST
38044: LIST
38045: PPUSH
38046: CALL_OW 72
38050: ST_TO_ADDR
38051: GO 38054
38053: POP
// if i = 1 then
38054: LD_VAR 0 8
38058: PUSH
38059: LD_INT 1
38061: EQUAL
38062: IFFALSE 38173
// begin tmp := [ ] ;
38064: LD_ADDR_VAR 0 19
38068: PUSH
38069: EMPTY
38070: ST_TO_ADDR
// for j in f do
38071: LD_ADDR_VAR 0 9
38075: PUSH
38076: LD_VAR 0 12
38080: PUSH
38081: FOR_IN
38082: IFFALSE 38155
// if GetBType ( j ) = b_bunker then
38084: LD_VAR 0 9
38088: PPUSH
38089: CALL_OW 266
38093: PUSH
38094: LD_INT 32
38096: EQUAL
38097: IFFALSE 38124
// tmp := Insert ( tmp , 1 , j ) else
38099: LD_ADDR_VAR 0 19
38103: PUSH
38104: LD_VAR 0 19
38108: PPUSH
38109: LD_INT 1
38111: PPUSH
38112: LD_VAR 0 9
38116: PPUSH
38117: CALL_OW 2
38121: ST_TO_ADDR
38122: GO 38153
// tmp := Insert ( tmp , tmp + 1 , j ) ;
38124: LD_ADDR_VAR 0 19
38128: PUSH
38129: LD_VAR 0 19
38133: PPUSH
38134: LD_VAR 0 19
38138: PUSH
38139: LD_INT 1
38141: PLUS
38142: PPUSH
38143: LD_VAR 0 9
38147: PPUSH
38148: CALL_OW 2
38152: ST_TO_ADDR
38153: GO 38081
38155: POP
38156: POP
// if tmp then
38157: LD_VAR 0 19
38161: IFFALSE 38173
// f := tmp ;
38163: LD_ADDR_VAR 0 12
38167: PUSH
38168: LD_VAR 0 19
38172: ST_TO_ADDR
// end ; x := personel [ i ] ;
38173: LD_ADDR_VAR 0 13
38177: PUSH
38178: LD_VAR 0 6
38182: PUSH
38183: LD_VAR 0 8
38187: ARRAY
38188: ST_TO_ADDR
// if x = - 1 then
38189: LD_VAR 0 13
38193: PUSH
38194: LD_INT 1
38196: NEG
38197: EQUAL
38198: IFFALSE 38407
// begin for j in f do
38200: LD_ADDR_VAR 0 9
38204: PUSH
38205: LD_VAR 0 12
38209: PUSH
38210: FOR_IN
38211: IFFALSE 38403
// repeat InitHc ;
38213: CALL_OW 19
// if GetBType ( j ) = b_barracks then
38217: LD_VAR 0 9
38221: PPUSH
38222: CALL_OW 266
38226: PUSH
38227: LD_INT 5
38229: EQUAL
38230: IFFALSE 38300
// begin if UnitsInside ( j ) < 3 then
38232: LD_VAR 0 9
38236: PPUSH
38237: CALL_OW 313
38241: PUSH
38242: LD_INT 3
38244: LESS
38245: IFFALSE 38281
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
38247: LD_INT 0
38249: PPUSH
38250: LD_INT 5
38252: PUSH
38253: LD_INT 8
38255: PUSH
38256: LD_INT 9
38258: PUSH
38259: EMPTY
38260: LIST
38261: LIST
38262: LIST
38263: PUSH
38264: LD_VAR 0 17
38268: ARRAY
38269: PPUSH
38270: LD_VAR 0 4
38274: PPUSH
38275: CALL_OW 380
38279: GO 38298
// PrepareHuman ( false , i , skill ) ;
38281: LD_INT 0
38283: PPUSH
38284: LD_VAR 0 8
38288: PPUSH
38289: LD_VAR 0 4
38293: PPUSH
38294: CALL_OW 380
// end else
38298: GO 38317
// PrepareHuman ( false , i , skill ) ;
38300: LD_INT 0
38302: PPUSH
38303: LD_VAR 0 8
38307: PPUSH
38308: LD_VAR 0 4
38312: PPUSH
38313: CALL_OW 380
// un := CreateHuman ;
38317: LD_ADDR_VAR 0 14
38321: PUSH
38322: CALL_OW 44
38326: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
38327: LD_ADDR_VAR 0 7
38331: PUSH
38332: LD_VAR 0 7
38336: PPUSH
38337: LD_INT 1
38339: PPUSH
38340: LD_VAR 0 14
38344: PPUSH
38345: CALL_OW 2
38349: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
38350: LD_VAR 0 14
38354: PPUSH
38355: LD_VAR 0 9
38359: PPUSH
38360: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
38364: LD_VAR 0 9
38368: PPUSH
38369: CALL_OW 313
38373: PUSH
38374: LD_INT 6
38376: EQUAL
38377: PUSH
38378: LD_VAR 0 9
38382: PPUSH
38383: CALL_OW 266
38387: PUSH
38388: LD_INT 32
38390: PUSH
38391: LD_INT 31
38393: PUSH
38394: EMPTY
38395: LIST
38396: LIST
38397: IN
38398: OR
38399: IFFALSE 38213
38401: GO 38210
38403: POP
38404: POP
// end else
38405: GO 38787
// for j = 1 to x do
38407: LD_ADDR_VAR 0 9
38411: PUSH
38412: DOUBLE
38413: LD_INT 1
38415: DEC
38416: ST_TO_ADDR
38417: LD_VAR 0 13
38421: PUSH
38422: FOR_TO
38423: IFFALSE 38785
// begin InitHc ;
38425: CALL_OW 19
// if not f then
38429: LD_VAR 0 12
38433: NOT
38434: IFFALSE 38523
// begin PrepareHuman ( false , i , skill ) ;
38436: LD_INT 0
38438: PPUSH
38439: LD_VAR 0 8
38443: PPUSH
38444: LD_VAR 0 4
38448: PPUSH
38449: CALL_OW 380
// un := CreateHuman ;
38453: LD_ADDR_VAR 0 14
38457: PUSH
38458: CALL_OW 44
38462: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
38463: LD_ADDR_VAR 0 7
38467: PUSH
38468: LD_VAR 0 7
38472: PPUSH
38473: LD_INT 1
38475: PPUSH
38476: LD_VAR 0 14
38480: PPUSH
38481: CALL_OW 2
38485: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
38486: LD_VAR 0 14
38490: PPUSH
38491: LD_VAR 0 1
38495: PPUSH
38496: CALL_OW 250
38500: PPUSH
38501: LD_VAR 0 1
38505: PPUSH
38506: CALL_OW 251
38510: PPUSH
38511: LD_INT 10
38513: PPUSH
38514: LD_INT 0
38516: PPUSH
38517: CALL_OW 50
// continue ;
38521: GO 38422
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
38523: LD_VAR 0 12
38527: PUSH
38528: LD_INT 1
38530: ARRAY
38531: PPUSH
38532: CALL_OW 313
38536: PUSH
38537: LD_VAR 0 12
38541: PUSH
38542: LD_INT 1
38544: ARRAY
38545: PPUSH
38546: CALL_OW 266
38550: PUSH
38551: LD_INT 32
38553: PUSH
38554: LD_INT 31
38556: PUSH
38557: EMPTY
38558: LIST
38559: LIST
38560: IN
38561: AND
38562: PUSH
38563: LD_VAR 0 12
38567: PUSH
38568: LD_INT 1
38570: ARRAY
38571: PPUSH
38572: CALL_OW 313
38576: PUSH
38577: LD_INT 6
38579: EQUAL
38580: OR
38581: IFFALSE 38601
// f := Delete ( f , 1 ) ;
38583: LD_ADDR_VAR 0 12
38587: PUSH
38588: LD_VAR 0 12
38592: PPUSH
38593: LD_INT 1
38595: PPUSH
38596: CALL_OW 3
38600: ST_TO_ADDR
// if not f then
38601: LD_VAR 0 12
38605: NOT
38606: IFFALSE 38624
// begin x := x + 2 ;
38608: LD_ADDR_VAR 0 13
38612: PUSH
38613: LD_VAR 0 13
38617: PUSH
38618: LD_INT 2
38620: PLUS
38621: ST_TO_ADDR
// continue ;
38622: GO 38422
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
38624: LD_VAR 0 12
38628: PUSH
38629: LD_INT 1
38631: ARRAY
38632: PPUSH
38633: CALL_OW 266
38637: PUSH
38638: LD_INT 5
38640: EQUAL
38641: IFFALSE 38715
// begin if UnitsInside ( f [ 1 ] ) < 3 then
38643: LD_VAR 0 12
38647: PUSH
38648: LD_INT 1
38650: ARRAY
38651: PPUSH
38652: CALL_OW 313
38656: PUSH
38657: LD_INT 3
38659: LESS
38660: IFFALSE 38696
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
38662: LD_INT 0
38664: PPUSH
38665: LD_INT 5
38667: PUSH
38668: LD_INT 8
38670: PUSH
38671: LD_INT 9
38673: PUSH
38674: EMPTY
38675: LIST
38676: LIST
38677: LIST
38678: PUSH
38679: LD_VAR 0 17
38683: ARRAY
38684: PPUSH
38685: LD_VAR 0 4
38689: PPUSH
38690: CALL_OW 380
38694: GO 38713
// PrepareHuman ( false , i , skill ) ;
38696: LD_INT 0
38698: PPUSH
38699: LD_VAR 0 8
38703: PPUSH
38704: LD_VAR 0 4
38708: PPUSH
38709: CALL_OW 380
// end else
38713: GO 38732
// PrepareHuman ( false , i , skill ) ;
38715: LD_INT 0
38717: PPUSH
38718: LD_VAR 0 8
38722: PPUSH
38723: LD_VAR 0 4
38727: PPUSH
38728: CALL_OW 380
// un := CreateHuman ;
38732: LD_ADDR_VAR 0 14
38736: PUSH
38737: CALL_OW 44
38741: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
38742: LD_ADDR_VAR 0 7
38746: PUSH
38747: LD_VAR 0 7
38751: PPUSH
38752: LD_INT 1
38754: PPUSH
38755: LD_VAR 0 14
38759: PPUSH
38760: CALL_OW 2
38764: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
38765: LD_VAR 0 14
38769: PPUSH
38770: LD_VAR 0 12
38774: PUSH
38775: LD_INT 1
38777: ARRAY
38778: PPUSH
38779: CALL_OW 52
// end ;
38783: GO 38422
38785: POP
38786: POP
// end ;
38787: GO 37724
38789: POP
38790: POP
// result := result ^ buildings ;
38791: LD_ADDR_VAR 0 7
38795: PUSH
38796: LD_VAR 0 7
38800: PUSH
38801: LD_VAR 0 18
38805: ADD
38806: ST_TO_ADDR
// end else
38807: GO 38950
// begin for i = 1 to personel do
38809: LD_ADDR_VAR 0 8
38813: PUSH
38814: DOUBLE
38815: LD_INT 1
38817: DEC
38818: ST_TO_ADDR
38819: LD_VAR 0 6
38823: PUSH
38824: FOR_TO
38825: IFFALSE 38948
// begin if i > 4 then
38827: LD_VAR 0 8
38831: PUSH
38832: LD_INT 4
38834: GREATER
38835: IFFALSE 38839
// break ;
38837: GO 38948
// x := personel [ i ] ;
38839: LD_ADDR_VAR 0 13
38843: PUSH
38844: LD_VAR 0 6
38848: PUSH
38849: LD_VAR 0 8
38853: ARRAY
38854: ST_TO_ADDR
// if x = - 1 then
38855: LD_VAR 0 13
38859: PUSH
38860: LD_INT 1
38862: NEG
38863: EQUAL
38864: IFFALSE 38868
// continue ;
38866: GO 38824
// PrepareHuman ( false , i , skill ) ;
38868: LD_INT 0
38870: PPUSH
38871: LD_VAR 0 8
38875: PPUSH
38876: LD_VAR 0 4
38880: PPUSH
38881: CALL_OW 380
// un := CreateHuman ;
38885: LD_ADDR_VAR 0 14
38889: PUSH
38890: CALL_OW 44
38894: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
38895: LD_VAR 0 14
38899: PPUSH
38900: LD_VAR 0 1
38904: PPUSH
38905: CALL_OW 250
38909: PPUSH
38910: LD_VAR 0 1
38914: PPUSH
38915: CALL_OW 251
38919: PPUSH
38920: LD_INT 10
38922: PPUSH
38923: LD_INT 0
38925: PPUSH
38926: CALL_OW 50
// result := result ^ un ;
38930: LD_ADDR_VAR 0 7
38934: PUSH
38935: LD_VAR 0 7
38939: PUSH
38940: LD_VAR 0 14
38944: ADD
38945: ST_TO_ADDR
// end ;
38946: GO 38824
38948: POP
38949: POP
// end ; end ;
38950: LD_VAR 0 7
38954: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
38955: LD_INT 0
38957: PPUSH
38958: PPUSH
38959: PPUSH
38960: PPUSH
38961: PPUSH
38962: PPUSH
38963: PPUSH
38964: PPUSH
38965: PPUSH
38966: PPUSH
38967: PPUSH
38968: PPUSH
38969: PPUSH
38970: PPUSH
38971: PPUSH
38972: PPUSH
// result := false ;
38973: LD_ADDR_VAR 0 3
38977: PUSH
38978: LD_INT 0
38980: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
38981: LD_VAR 0 1
38985: NOT
38986: PUSH
38987: LD_VAR 0 1
38991: PPUSH
38992: CALL_OW 266
38996: PUSH
38997: LD_INT 32
38999: PUSH
39000: LD_INT 33
39002: PUSH
39003: EMPTY
39004: LIST
39005: LIST
39006: IN
39007: NOT
39008: OR
39009: IFFALSE 39013
// exit ;
39011: GO 40122
// nat := GetNation ( tower ) ;
39013: LD_ADDR_VAR 0 12
39017: PUSH
39018: LD_VAR 0 1
39022: PPUSH
39023: CALL_OW 248
39027: ST_TO_ADDR
// side := GetSide ( tower ) ;
39028: LD_ADDR_VAR 0 16
39032: PUSH
39033: LD_VAR 0 1
39037: PPUSH
39038: CALL_OW 255
39042: ST_TO_ADDR
// x := GetX ( tower ) ;
39043: LD_ADDR_VAR 0 10
39047: PUSH
39048: LD_VAR 0 1
39052: PPUSH
39053: CALL_OW 250
39057: ST_TO_ADDR
// y := GetY ( tower ) ;
39058: LD_ADDR_VAR 0 11
39062: PUSH
39063: LD_VAR 0 1
39067: PPUSH
39068: CALL_OW 251
39072: ST_TO_ADDR
// if not x or not y then
39073: LD_VAR 0 10
39077: NOT
39078: PUSH
39079: LD_VAR 0 11
39083: NOT
39084: OR
39085: IFFALSE 39089
// exit ;
39087: GO 40122
// weapon := 0 ;
39089: LD_ADDR_VAR 0 18
39093: PUSH
39094: LD_INT 0
39096: ST_TO_ADDR
// fac_list := [ ] ;
39097: LD_ADDR_VAR 0 17
39101: PUSH
39102: EMPTY
39103: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
39104: LD_ADDR_VAR 0 6
39108: PUSH
39109: LD_VAR 0 1
39113: PPUSH
39114: CALL_OW 274
39118: PPUSH
39119: LD_VAR 0 2
39123: PPUSH
39124: LD_INT 0
39126: PPUSH
39127: CALL 36693 0 3
39131: PPUSH
39132: LD_INT 30
39134: PUSH
39135: LD_INT 3
39137: PUSH
39138: EMPTY
39139: LIST
39140: LIST
39141: PPUSH
39142: CALL_OW 72
39146: ST_TO_ADDR
// if not factories then
39147: LD_VAR 0 6
39151: NOT
39152: IFFALSE 39156
// exit ;
39154: GO 40122
// for i in factories do
39156: LD_ADDR_VAR 0 8
39160: PUSH
39161: LD_VAR 0 6
39165: PUSH
39166: FOR_IN
39167: IFFALSE 39192
// fac_list := fac_list union AvailableWeaponList ( i ) ;
39169: LD_ADDR_VAR 0 17
39173: PUSH
39174: LD_VAR 0 17
39178: PUSH
39179: LD_VAR 0 8
39183: PPUSH
39184: CALL_OW 478
39188: UNION
39189: ST_TO_ADDR
39190: GO 39166
39192: POP
39193: POP
// if not fac_list then
39194: LD_VAR 0 17
39198: NOT
39199: IFFALSE 39203
// exit ;
39201: GO 40122
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
39203: LD_ADDR_VAR 0 5
39207: PUSH
39208: LD_INT 4
39210: PUSH
39211: LD_INT 5
39213: PUSH
39214: LD_INT 9
39216: PUSH
39217: LD_INT 10
39219: PUSH
39220: LD_INT 6
39222: PUSH
39223: LD_INT 7
39225: PUSH
39226: LD_INT 11
39228: PUSH
39229: EMPTY
39230: LIST
39231: LIST
39232: LIST
39233: LIST
39234: LIST
39235: LIST
39236: LIST
39237: PUSH
39238: LD_INT 27
39240: PUSH
39241: LD_INT 28
39243: PUSH
39244: LD_INT 26
39246: PUSH
39247: LD_INT 30
39249: PUSH
39250: EMPTY
39251: LIST
39252: LIST
39253: LIST
39254: LIST
39255: PUSH
39256: LD_INT 43
39258: PUSH
39259: LD_INT 44
39261: PUSH
39262: LD_INT 46
39264: PUSH
39265: LD_INT 45
39267: PUSH
39268: LD_INT 47
39270: PUSH
39271: LD_INT 49
39273: PUSH
39274: EMPTY
39275: LIST
39276: LIST
39277: LIST
39278: LIST
39279: LIST
39280: LIST
39281: PUSH
39282: EMPTY
39283: LIST
39284: LIST
39285: LIST
39286: PUSH
39287: LD_VAR 0 12
39291: ARRAY
39292: ST_TO_ADDR
// list := list isect fac_list ;
39293: LD_ADDR_VAR 0 5
39297: PUSH
39298: LD_VAR 0 5
39302: PUSH
39303: LD_VAR 0 17
39307: ISECT
39308: ST_TO_ADDR
// if not list then
39309: LD_VAR 0 5
39313: NOT
39314: IFFALSE 39318
// exit ;
39316: GO 40122
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
39318: LD_VAR 0 12
39322: PUSH
39323: LD_INT 3
39325: EQUAL
39326: PUSH
39327: LD_INT 49
39329: PUSH
39330: LD_VAR 0 5
39334: IN
39335: AND
39336: PUSH
39337: LD_INT 31
39339: PPUSH
39340: LD_VAR 0 16
39344: PPUSH
39345: CALL_OW 321
39349: PUSH
39350: LD_INT 2
39352: EQUAL
39353: AND
39354: IFFALSE 39414
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
39356: LD_INT 22
39358: PUSH
39359: LD_VAR 0 16
39363: PUSH
39364: EMPTY
39365: LIST
39366: LIST
39367: PUSH
39368: LD_INT 35
39370: PUSH
39371: LD_INT 49
39373: PUSH
39374: EMPTY
39375: LIST
39376: LIST
39377: PUSH
39378: LD_INT 91
39380: PUSH
39381: LD_VAR 0 1
39385: PUSH
39386: LD_INT 10
39388: PUSH
39389: EMPTY
39390: LIST
39391: LIST
39392: LIST
39393: PUSH
39394: EMPTY
39395: LIST
39396: LIST
39397: LIST
39398: PPUSH
39399: CALL_OW 69
39403: NOT
39404: IFFALSE 39414
// weapon := ru_time_lapser ;
39406: LD_ADDR_VAR 0 18
39410: PUSH
39411: LD_INT 49
39413: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
39414: LD_VAR 0 12
39418: PUSH
39419: LD_INT 1
39421: PUSH
39422: LD_INT 2
39424: PUSH
39425: EMPTY
39426: LIST
39427: LIST
39428: IN
39429: PUSH
39430: LD_INT 11
39432: PUSH
39433: LD_VAR 0 5
39437: IN
39438: PUSH
39439: LD_INT 30
39441: PUSH
39442: LD_VAR 0 5
39446: IN
39447: OR
39448: AND
39449: PUSH
39450: LD_INT 6
39452: PPUSH
39453: LD_VAR 0 16
39457: PPUSH
39458: CALL_OW 321
39462: PUSH
39463: LD_INT 2
39465: EQUAL
39466: AND
39467: IFFALSE 39632
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
39469: LD_INT 22
39471: PUSH
39472: LD_VAR 0 16
39476: PUSH
39477: EMPTY
39478: LIST
39479: LIST
39480: PUSH
39481: LD_INT 2
39483: PUSH
39484: LD_INT 35
39486: PUSH
39487: LD_INT 11
39489: PUSH
39490: EMPTY
39491: LIST
39492: LIST
39493: PUSH
39494: LD_INT 35
39496: PUSH
39497: LD_INT 30
39499: PUSH
39500: EMPTY
39501: LIST
39502: LIST
39503: PUSH
39504: EMPTY
39505: LIST
39506: LIST
39507: LIST
39508: PUSH
39509: LD_INT 91
39511: PUSH
39512: LD_VAR 0 1
39516: PUSH
39517: LD_INT 18
39519: PUSH
39520: EMPTY
39521: LIST
39522: LIST
39523: LIST
39524: PUSH
39525: EMPTY
39526: LIST
39527: LIST
39528: LIST
39529: PPUSH
39530: CALL_OW 69
39534: NOT
39535: PUSH
39536: LD_INT 22
39538: PUSH
39539: LD_VAR 0 16
39543: PUSH
39544: EMPTY
39545: LIST
39546: LIST
39547: PUSH
39548: LD_INT 2
39550: PUSH
39551: LD_INT 30
39553: PUSH
39554: LD_INT 32
39556: PUSH
39557: EMPTY
39558: LIST
39559: LIST
39560: PUSH
39561: LD_INT 30
39563: PUSH
39564: LD_INT 33
39566: PUSH
39567: EMPTY
39568: LIST
39569: LIST
39570: PUSH
39571: EMPTY
39572: LIST
39573: LIST
39574: LIST
39575: PUSH
39576: LD_INT 91
39578: PUSH
39579: LD_VAR 0 1
39583: PUSH
39584: LD_INT 12
39586: PUSH
39587: EMPTY
39588: LIST
39589: LIST
39590: LIST
39591: PUSH
39592: EMPTY
39593: LIST
39594: LIST
39595: LIST
39596: PUSH
39597: EMPTY
39598: LIST
39599: PPUSH
39600: CALL_OW 69
39604: PUSH
39605: LD_INT 2
39607: GREATER
39608: AND
39609: IFFALSE 39632
// weapon := [ us_radar , ar_radar ] [ nat ] ;
39611: LD_ADDR_VAR 0 18
39615: PUSH
39616: LD_INT 11
39618: PUSH
39619: LD_INT 30
39621: PUSH
39622: EMPTY
39623: LIST
39624: LIST
39625: PUSH
39626: LD_VAR 0 12
39630: ARRAY
39631: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
39632: LD_VAR 0 18
39636: NOT
39637: PUSH
39638: LD_INT 40
39640: PPUSH
39641: LD_VAR 0 16
39645: PPUSH
39646: CALL_OW 321
39650: PUSH
39651: LD_INT 2
39653: EQUAL
39654: AND
39655: PUSH
39656: LD_INT 7
39658: PUSH
39659: LD_VAR 0 5
39663: IN
39664: PUSH
39665: LD_INT 28
39667: PUSH
39668: LD_VAR 0 5
39672: IN
39673: OR
39674: PUSH
39675: LD_INT 45
39677: PUSH
39678: LD_VAR 0 5
39682: IN
39683: OR
39684: AND
39685: IFFALSE 39939
// begin hex := GetHexInfo ( x , y ) ;
39687: LD_ADDR_VAR 0 4
39691: PUSH
39692: LD_VAR 0 10
39696: PPUSH
39697: LD_VAR 0 11
39701: PPUSH
39702: CALL_OW 546
39706: ST_TO_ADDR
// if hex [ 1 ] then
39707: LD_VAR 0 4
39711: PUSH
39712: LD_INT 1
39714: ARRAY
39715: IFFALSE 39719
// exit ;
39717: GO 40122
// height := hex [ 2 ] ;
39719: LD_ADDR_VAR 0 15
39723: PUSH
39724: LD_VAR 0 4
39728: PUSH
39729: LD_INT 2
39731: ARRAY
39732: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
39733: LD_ADDR_VAR 0 14
39737: PUSH
39738: LD_INT 0
39740: PUSH
39741: LD_INT 2
39743: PUSH
39744: LD_INT 3
39746: PUSH
39747: LD_INT 5
39749: PUSH
39750: EMPTY
39751: LIST
39752: LIST
39753: LIST
39754: LIST
39755: ST_TO_ADDR
// for i in tmp do
39756: LD_ADDR_VAR 0 8
39760: PUSH
39761: LD_VAR 0 14
39765: PUSH
39766: FOR_IN
39767: IFFALSE 39937
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
39769: LD_ADDR_VAR 0 9
39773: PUSH
39774: LD_VAR 0 10
39778: PPUSH
39779: LD_VAR 0 8
39783: PPUSH
39784: LD_INT 5
39786: PPUSH
39787: CALL_OW 272
39791: PUSH
39792: LD_VAR 0 11
39796: PPUSH
39797: LD_VAR 0 8
39801: PPUSH
39802: LD_INT 5
39804: PPUSH
39805: CALL_OW 273
39809: PUSH
39810: EMPTY
39811: LIST
39812: LIST
39813: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
39814: LD_VAR 0 9
39818: PUSH
39819: LD_INT 1
39821: ARRAY
39822: PPUSH
39823: LD_VAR 0 9
39827: PUSH
39828: LD_INT 2
39830: ARRAY
39831: PPUSH
39832: CALL_OW 488
39836: IFFALSE 39935
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
39838: LD_ADDR_VAR 0 4
39842: PUSH
39843: LD_VAR 0 9
39847: PUSH
39848: LD_INT 1
39850: ARRAY
39851: PPUSH
39852: LD_VAR 0 9
39856: PUSH
39857: LD_INT 2
39859: ARRAY
39860: PPUSH
39861: CALL_OW 546
39865: ST_TO_ADDR
// if hex [ 1 ] then
39866: LD_VAR 0 4
39870: PUSH
39871: LD_INT 1
39873: ARRAY
39874: IFFALSE 39878
// continue ;
39876: GO 39766
// h := hex [ 2 ] ;
39878: LD_ADDR_VAR 0 13
39882: PUSH
39883: LD_VAR 0 4
39887: PUSH
39888: LD_INT 2
39890: ARRAY
39891: ST_TO_ADDR
// if h + 7 < height then
39892: LD_VAR 0 13
39896: PUSH
39897: LD_INT 7
39899: PLUS
39900: PUSH
39901: LD_VAR 0 15
39905: LESS
39906: IFFALSE 39935
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
39908: LD_ADDR_VAR 0 18
39912: PUSH
39913: LD_INT 7
39915: PUSH
39916: LD_INT 28
39918: PUSH
39919: LD_INT 45
39921: PUSH
39922: EMPTY
39923: LIST
39924: LIST
39925: LIST
39926: PUSH
39927: LD_VAR 0 12
39931: ARRAY
39932: ST_TO_ADDR
// break ;
39933: GO 39937
// end ; end ; end ;
39935: GO 39766
39937: POP
39938: POP
// end ; if not weapon then
39939: LD_VAR 0 18
39943: NOT
39944: IFFALSE 40004
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
39946: LD_ADDR_VAR 0 5
39950: PUSH
39951: LD_VAR 0 5
39955: PUSH
39956: LD_INT 11
39958: PUSH
39959: LD_INT 30
39961: PUSH
39962: LD_INT 49
39964: PUSH
39965: EMPTY
39966: LIST
39967: LIST
39968: LIST
39969: DIFF
39970: ST_TO_ADDR
// if not list then
39971: LD_VAR 0 5
39975: NOT
39976: IFFALSE 39980
// exit ;
39978: GO 40122
// weapon := list [ rand ( 1 , list ) ] ;
39980: LD_ADDR_VAR 0 18
39984: PUSH
39985: LD_VAR 0 5
39989: PUSH
39990: LD_INT 1
39992: PPUSH
39993: LD_VAR 0 5
39997: PPUSH
39998: CALL_OW 12
40002: ARRAY
40003: ST_TO_ADDR
// end ; if weapon then
40004: LD_VAR 0 18
40008: IFFALSE 40122
// begin tmp := CostOfWeapon ( weapon ) ;
40010: LD_ADDR_VAR 0 14
40014: PUSH
40015: LD_VAR 0 18
40019: PPUSH
40020: CALL_OW 451
40024: ST_TO_ADDR
// j := GetBase ( tower ) ;
40025: LD_ADDR_VAR 0 9
40029: PUSH
40030: LD_VAR 0 1
40034: PPUSH
40035: CALL_OW 274
40039: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
40040: LD_VAR 0 9
40044: PPUSH
40045: LD_INT 1
40047: PPUSH
40048: CALL_OW 275
40052: PUSH
40053: LD_VAR 0 14
40057: PUSH
40058: LD_INT 1
40060: ARRAY
40061: GREATEREQUAL
40062: PUSH
40063: LD_VAR 0 9
40067: PPUSH
40068: LD_INT 2
40070: PPUSH
40071: CALL_OW 275
40075: PUSH
40076: LD_VAR 0 14
40080: PUSH
40081: LD_INT 2
40083: ARRAY
40084: GREATEREQUAL
40085: AND
40086: PUSH
40087: LD_VAR 0 9
40091: PPUSH
40092: LD_INT 3
40094: PPUSH
40095: CALL_OW 275
40099: PUSH
40100: LD_VAR 0 14
40104: PUSH
40105: LD_INT 3
40107: ARRAY
40108: GREATEREQUAL
40109: AND
40110: IFFALSE 40122
// result := weapon ;
40112: LD_ADDR_VAR 0 3
40116: PUSH
40117: LD_VAR 0 18
40121: ST_TO_ADDR
// end ; end ;
40122: LD_VAR 0 3
40126: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
40127: LD_INT 0
40129: PPUSH
40130: PPUSH
// result := true ;
40131: LD_ADDR_VAR 0 3
40135: PUSH
40136: LD_INT 1
40138: ST_TO_ADDR
// if array1 = array2 then
40139: LD_VAR 0 1
40143: PUSH
40144: LD_VAR 0 2
40148: EQUAL
40149: IFFALSE 40209
// begin for i = 1 to array1 do
40151: LD_ADDR_VAR 0 4
40155: PUSH
40156: DOUBLE
40157: LD_INT 1
40159: DEC
40160: ST_TO_ADDR
40161: LD_VAR 0 1
40165: PUSH
40166: FOR_TO
40167: IFFALSE 40205
// if array1 [ i ] <> array2 [ i ] then
40169: LD_VAR 0 1
40173: PUSH
40174: LD_VAR 0 4
40178: ARRAY
40179: PUSH
40180: LD_VAR 0 2
40184: PUSH
40185: LD_VAR 0 4
40189: ARRAY
40190: NONEQUAL
40191: IFFALSE 40203
// begin result := false ;
40193: LD_ADDR_VAR 0 3
40197: PUSH
40198: LD_INT 0
40200: ST_TO_ADDR
// break ;
40201: GO 40205
// end ;
40203: GO 40166
40205: POP
40206: POP
// end else
40207: GO 40217
// result := false ;
40209: LD_ADDR_VAR 0 3
40213: PUSH
40214: LD_INT 0
40216: ST_TO_ADDR
// end ;
40217: LD_VAR 0 3
40221: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
40222: LD_INT 0
40224: PPUSH
40225: PPUSH
// if not array1 or not array2 then
40226: LD_VAR 0 1
40230: NOT
40231: PUSH
40232: LD_VAR 0 2
40236: NOT
40237: OR
40238: IFFALSE 40242
// exit ;
40240: GO 40306
// result := true ;
40242: LD_ADDR_VAR 0 3
40246: PUSH
40247: LD_INT 1
40249: ST_TO_ADDR
// for i = 1 to array1 do
40250: LD_ADDR_VAR 0 4
40254: PUSH
40255: DOUBLE
40256: LD_INT 1
40258: DEC
40259: ST_TO_ADDR
40260: LD_VAR 0 1
40264: PUSH
40265: FOR_TO
40266: IFFALSE 40304
// if array1 [ i ] <> array2 [ i ] then
40268: LD_VAR 0 1
40272: PUSH
40273: LD_VAR 0 4
40277: ARRAY
40278: PUSH
40279: LD_VAR 0 2
40283: PUSH
40284: LD_VAR 0 4
40288: ARRAY
40289: NONEQUAL
40290: IFFALSE 40302
// begin result := false ;
40292: LD_ADDR_VAR 0 3
40296: PUSH
40297: LD_INT 0
40299: ST_TO_ADDR
// break ;
40300: GO 40304
// end ;
40302: GO 40265
40304: POP
40305: POP
// end ;
40306: LD_VAR 0 3
40310: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
40311: LD_INT 0
40313: PPUSH
40314: PPUSH
40315: PPUSH
// pom := GetBase ( fac ) ;
40316: LD_ADDR_VAR 0 5
40320: PUSH
40321: LD_VAR 0 1
40325: PPUSH
40326: CALL_OW 274
40330: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
40331: LD_ADDR_VAR 0 4
40335: PUSH
40336: LD_VAR 0 2
40340: PUSH
40341: LD_INT 1
40343: ARRAY
40344: PPUSH
40345: LD_VAR 0 2
40349: PUSH
40350: LD_INT 2
40352: ARRAY
40353: PPUSH
40354: LD_VAR 0 2
40358: PUSH
40359: LD_INT 3
40361: ARRAY
40362: PPUSH
40363: LD_VAR 0 2
40367: PUSH
40368: LD_INT 4
40370: ARRAY
40371: PPUSH
40372: CALL_OW 449
40376: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
40377: LD_ADDR_VAR 0 3
40381: PUSH
40382: LD_VAR 0 5
40386: PPUSH
40387: LD_INT 1
40389: PPUSH
40390: CALL_OW 275
40394: PUSH
40395: LD_VAR 0 4
40399: PUSH
40400: LD_INT 1
40402: ARRAY
40403: GREATEREQUAL
40404: PUSH
40405: LD_VAR 0 5
40409: PPUSH
40410: LD_INT 2
40412: PPUSH
40413: CALL_OW 275
40417: PUSH
40418: LD_VAR 0 4
40422: PUSH
40423: LD_INT 2
40425: ARRAY
40426: GREATEREQUAL
40427: AND
40428: PUSH
40429: LD_VAR 0 5
40433: PPUSH
40434: LD_INT 3
40436: PPUSH
40437: CALL_OW 275
40441: PUSH
40442: LD_VAR 0 4
40446: PUSH
40447: LD_INT 3
40449: ARRAY
40450: GREATEREQUAL
40451: AND
40452: ST_TO_ADDR
// end ;
40453: LD_VAR 0 3
40457: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
40458: LD_INT 0
40460: PPUSH
40461: PPUSH
40462: PPUSH
40463: PPUSH
// pom := GetBase ( building ) ;
40464: LD_ADDR_VAR 0 3
40468: PUSH
40469: LD_VAR 0 1
40473: PPUSH
40474: CALL_OW 274
40478: ST_TO_ADDR
// if not pom then
40479: LD_VAR 0 3
40483: NOT
40484: IFFALSE 40488
// exit ;
40486: GO 40658
// btype := GetBType ( building ) ;
40488: LD_ADDR_VAR 0 5
40492: PUSH
40493: LD_VAR 0 1
40497: PPUSH
40498: CALL_OW 266
40502: ST_TO_ADDR
// if btype = b_armoury then
40503: LD_VAR 0 5
40507: PUSH
40508: LD_INT 4
40510: EQUAL
40511: IFFALSE 40521
// btype := b_barracks ;
40513: LD_ADDR_VAR 0 5
40517: PUSH
40518: LD_INT 5
40520: ST_TO_ADDR
// if btype = b_depot then
40521: LD_VAR 0 5
40525: PUSH
40526: LD_INT 0
40528: EQUAL
40529: IFFALSE 40539
// btype := b_warehouse ;
40531: LD_ADDR_VAR 0 5
40535: PUSH
40536: LD_INT 1
40538: ST_TO_ADDR
// if btype = b_workshop then
40539: LD_VAR 0 5
40543: PUSH
40544: LD_INT 2
40546: EQUAL
40547: IFFALSE 40557
// btype := b_factory ;
40549: LD_ADDR_VAR 0 5
40553: PUSH
40554: LD_INT 3
40556: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
40557: LD_ADDR_VAR 0 4
40561: PUSH
40562: LD_VAR 0 5
40566: PPUSH
40567: LD_VAR 0 1
40571: PPUSH
40572: CALL_OW 248
40576: PPUSH
40577: CALL_OW 450
40581: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
40582: LD_ADDR_VAR 0 2
40586: PUSH
40587: LD_VAR 0 3
40591: PPUSH
40592: LD_INT 1
40594: PPUSH
40595: CALL_OW 275
40599: PUSH
40600: LD_VAR 0 4
40604: PUSH
40605: LD_INT 1
40607: ARRAY
40608: GREATEREQUAL
40609: PUSH
40610: LD_VAR 0 3
40614: PPUSH
40615: LD_INT 2
40617: PPUSH
40618: CALL_OW 275
40622: PUSH
40623: LD_VAR 0 4
40627: PUSH
40628: LD_INT 2
40630: ARRAY
40631: GREATEREQUAL
40632: AND
40633: PUSH
40634: LD_VAR 0 3
40638: PPUSH
40639: LD_INT 3
40641: PPUSH
40642: CALL_OW 275
40646: PUSH
40647: LD_VAR 0 4
40651: PUSH
40652: LD_INT 3
40654: ARRAY
40655: GREATEREQUAL
40656: AND
40657: ST_TO_ADDR
// end ;
40658: LD_VAR 0 2
40662: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
40663: LD_INT 0
40665: PPUSH
40666: PPUSH
40667: PPUSH
// pom := GetBase ( building ) ;
40668: LD_ADDR_VAR 0 4
40672: PUSH
40673: LD_VAR 0 1
40677: PPUSH
40678: CALL_OW 274
40682: ST_TO_ADDR
// if not pom then
40683: LD_VAR 0 4
40687: NOT
40688: IFFALSE 40692
// exit ;
40690: GO 40793
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
40692: LD_ADDR_VAR 0 5
40696: PUSH
40697: LD_VAR 0 2
40701: PPUSH
40702: LD_VAR 0 1
40706: PPUSH
40707: CALL_OW 248
40711: PPUSH
40712: CALL_OW 450
40716: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
40717: LD_ADDR_VAR 0 3
40721: PUSH
40722: LD_VAR 0 4
40726: PPUSH
40727: LD_INT 1
40729: PPUSH
40730: CALL_OW 275
40734: PUSH
40735: LD_VAR 0 5
40739: PUSH
40740: LD_INT 1
40742: ARRAY
40743: GREATEREQUAL
40744: PUSH
40745: LD_VAR 0 4
40749: PPUSH
40750: LD_INT 2
40752: PPUSH
40753: CALL_OW 275
40757: PUSH
40758: LD_VAR 0 5
40762: PUSH
40763: LD_INT 2
40765: ARRAY
40766: GREATEREQUAL
40767: AND
40768: PUSH
40769: LD_VAR 0 4
40773: PPUSH
40774: LD_INT 3
40776: PPUSH
40777: CALL_OW 275
40781: PUSH
40782: LD_VAR 0 5
40786: PUSH
40787: LD_INT 3
40789: ARRAY
40790: GREATEREQUAL
40791: AND
40792: ST_TO_ADDR
// end ;
40793: LD_VAR 0 3
40797: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
40798: LD_INT 0
40800: PPUSH
40801: PPUSH
40802: PPUSH
40803: PPUSH
40804: PPUSH
40805: PPUSH
40806: PPUSH
40807: PPUSH
40808: PPUSH
40809: PPUSH
40810: PPUSH
// result := false ;
40811: LD_ADDR_VAR 0 8
40815: PUSH
40816: LD_INT 0
40818: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
40819: LD_VAR 0 5
40823: NOT
40824: PUSH
40825: LD_VAR 0 1
40829: NOT
40830: OR
40831: PUSH
40832: LD_VAR 0 2
40836: NOT
40837: OR
40838: PUSH
40839: LD_VAR 0 3
40843: NOT
40844: OR
40845: IFFALSE 40849
// exit ;
40847: GO 41663
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
40849: LD_ADDR_VAR 0 14
40853: PUSH
40854: LD_VAR 0 1
40858: PPUSH
40859: LD_VAR 0 2
40863: PPUSH
40864: LD_VAR 0 3
40868: PPUSH
40869: LD_VAR 0 4
40873: PPUSH
40874: LD_VAR 0 5
40878: PUSH
40879: LD_INT 1
40881: ARRAY
40882: PPUSH
40883: CALL_OW 248
40887: PPUSH
40888: LD_INT 0
40890: PPUSH
40891: CALL 42896 0 6
40895: ST_TO_ADDR
// if not hexes then
40896: LD_VAR 0 14
40900: NOT
40901: IFFALSE 40905
// exit ;
40903: GO 41663
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
40905: LD_ADDR_VAR 0 17
40909: PUSH
40910: LD_VAR 0 5
40914: PPUSH
40915: LD_INT 22
40917: PUSH
40918: LD_VAR 0 13
40922: PPUSH
40923: CALL_OW 255
40927: PUSH
40928: EMPTY
40929: LIST
40930: LIST
40931: PUSH
40932: LD_INT 2
40934: PUSH
40935: LD_INT 30
40937: PUSH
40938: LD_INT 0
40940: PUSH
40941: EMPTY
40942: LIST
40943: LIST
40944: PUSH
40945: LD_INT 30
40947: PUSH
40948: LD_INT 1
40950: PUSH
40951: EMPTY
40952: LIST
40953: LIST
40954: PUSH
40955: EMPTY
40956: LIST
40957: LIST
40958: LIST
40959: PUSH
40960: EMPTY
40961: LIST
40962: LIST
40963: PPUSH
40964: CALL_OW 72
40968: ST_TO_ADDR
// for i = 1 to hexes do
40969: LD_ADDR_VAR 0 9
40973: PUSH
40974: DOUBLE
40975: LD_INT 1
40977: DEC
40978: ST_TO_ADDR
40979: LD_VAR 0 14
40983: PUSH
40984: FOR_TO
40985: IFFALSE 41661
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
40987: LD_ADDR_VAR 0 13
40991: PUSH
40992: LD_VAR 0 14
40996: PUSH
40997: LD_VAR 0 9
41001: ARRAY
41002: PUSH
41003: LD_INT 1
41005: ARRAY
41006: PPUSH
41007: LD_VAR 0 14
41011: PUSH
41012: LD_VAR 0 9
41016: ARRAY
41017: PUSH
41018: LD_INT 2
41020: ARRAY
41021: PPUSH
41022: CALL_OW 428
41026: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
41027: LD_VAR 0 14
41031: PUSH
41032: LD_VAR 0 9
41036: ARRAY
41037: PUSH
41038: LD_INT 1
41040: ARRAY
41041: PPUSH
41042: LD_VAR 0 14
41046: PUSH
41047: LD_VAR 0 9
41051: ARRAY
41052: PUSH
41053: LD_INT 2
41055: ARRAY
41056: PPUSH
41057: CALL_OW 351
41061: PUSH
41062: LD_VAR 0 14
41066: PUSH
41067: LD_VAR 0 9
41071: ARRAY
41072: PUSH
41073: LD_INT 1
41075: ARRAY
41076: PPUSH
41077: LD_VAR 0 14
41081: PUSH
41082: LD_VAR 0 9
41086: ARRAY
41087: PUSH
41088: LD_INT 2
41090: ARRAY
41091: PPUSH
41092: CALL_OW 488
41096: NOT
41097: OR
41098: PUSH
41099: LD_VAR 0 13
41103: PPUSH
41104: CALL_OW 247
41108: PUSH
41109: LD_INT 3
41111: EQUAL
41112: OR
41113: IFFALSE 41119
// exit ;
41115: POP
41116: POP
41117: GO 41663
// if not tmp then
41119: LD_VAR 0 13
41123: NOT
41124: IFFALSE 41128
// continue ;
41126: GO 40984
// result := true ;
41128: LD_ADDR_VAR 0 8
41132: PUSH
41133: LD_INT 1
41135: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
41136: LD_VAR 0 6
41140: PUSH
41141: LD_VAR 0 13
41145: PPUSH
41146: CALL_OW 247
41150: PUSH
41151: LD_INT 2
41153: EQUAL
41154: AND
41155: PUSH
41156: LD_VAR 0 13
41160: PPUSH
41161: CALL_OW 263
41165: PUSH
41166: LD_INT 1
41168: EQUAL
41169: AND
41170: IFFALSE 41334
// begin if IsDrivenBy ( tmp ) then
41172: LD_VAR 0 13
41176: PPUSH
41177: CALL_OW 311
41181: IFFALSE 41185
// continue ;
41183: GO 40984
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
41185: LD_VAR 0 6
41189: PPUSH
41190: LD_INT 3
41192: PUSH
41193: LD_INT 60
41195: PUSH
41196: EMPTY
41197: LIST
41198: PUSH
41199: EMPTY
41200: LIST
41201: LIST
41202: PUSH
41203: LD_INT 3
41205: PUSH
41206: LD_INT 55
41208: PUSH
41209: EMPTY
41210: LIST
41211: PUSH
41212: EMPTY
41213: LIST
41214: LIST
41215: PUSH
41216: EMPTY
41217: LIST
41218: LIST
41219: PPUSH
41220: CALL_OW 72
41224: IFFALSE 41332
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
41226: LD_ADDR_VAR 0 18
41230: PUSH
41231: LD_VAR 0 6
41235: PPUSH
41236: LD_INT 3
41238: PUSH
41239: LD_INT 60
41241: PUSH
41242: EMPTY
41243: LIST
41244: PUSH
41245: EMPTY
41246: LIST
41247: LIST
41248: PUSH
41249: LD_INT 3
41251: PUSH
41252: LD_INT 55
41254: PUSH
41255: EMPTY
41256: LIST
41257: PUSH
41258: EMPTY
41259: LIST
41260: LIST
41261: PUSH
41262: EMPTY
41263: LIST
41264: LIST
41265: PPUSH
41266: CALL_OW 72
41270: PUSH
41271: LD_INT 1
41273: ARRAY
41274: ST_TO_ADDR
// if IsInUnit ( driver ) then
41275: LD_VAR 0 18
41279: PPUSH
41280: CALL_OW 310
41284: IFFALSE 41295
// ComExit ( driver ) ;
41286: LD_VAR 0 18
41290: PPUSH
41291: CALL 66676 0 1
// AddComEnterUnit ( driver , tmp ) ;
41295: LD_VAR 0 18
41299: PPUSH
41300: LD_VAR 0 13
41304: PPUSH
41305: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
41309: LD_VAR 0 18
41313: PPUSH
41314: LD_VAR 0 7
41318: PPUSH
41319: CALL_OW 173
// AddComExitVehicle ( driver ) ;
41323: LD_VAR 0 18
41327: PPUSH
41328: CALL_OW 181
// end ; continue ;
41332: GO 40984
// end ; if not cleaners or not tmp in cleaners then
41334: LD_VAR 0 6
41338: NOT
41339: PUSH
41340: LD_VAR 0 13
41344: PUSH
41345: LD_VAR 0 6
41349: IN
41350: NOT
41351: OR
41352: IFFALSE 41659
// begin if dep then
41354: LD_VAR 0 17
41358: IFFALSE 41494
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
41360: LD_ADDR_VAR 0 16
41364: PUSH
41365: LD_VAR 0 17
41369: PUSH
41370: LD_INT 1
41372: ARRAY
41373: PPUSH
41374: CALL_OW 250
41378: PPUSH
41379: LD_VAR 0 17
41383: PUSH
41384: LD_INT 1
41386: ARRAY
41387: PPUSH
41388: CALL_OW 254
41392: PPUSH
41393: LD_INT 5
41395: PPUSH
41396: CALL_OW 272
41400: PUSH
41401: LD_VAR 0 17
41405: PUSH
41406: LD_INT 1
41408: ARRAY
41409: PPUSH
41410: CALL_OW 251
41414: PPUSH
41415: LD_VAR 0 17
41419: PUSH
41420: LD_INT 1
41422: ARRAY
41423: PPUSH
41424: CALL_OW 254
41428: PPUSH
41429: LD_INT 5
41431: PPUSH
41432: CALL_OW 273
41436: PUSH
41437: EMPTY
41438: LIST
41439: LIST
41440: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
41441: LD_VAR 0 16
41445: PUSH
41446: LD_INT 1
41448: ARRAY
41449: PPUSH
41450: LD_VAR 0 16
41454: PUSH
41455: LD_INT 2
41457: ARRAY
41458: PPUSH
41459: CALL_OW 488
41463: IFFALSE 41494
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
41465: LD_VAR 0 13
41469: PPUSH
41470: LD_VAR 0 16
41474: PUSH
41475: LD_INT 1
41477: ARRAY
41478: PPUSH
41479: LD_VAR 0 16
41483: PUSH
41484: LD_INT 2
41486: ARRAY
41487: PPUSH
41488: CALL_OW 111
// continue ;
41492: GO 40984
// end ; end ; r := GetDir ( tmp ) ;
41494: LD_ADDR_VAR 0 15
41498: PUSH
41499: LD_VAR 0 13
41503: PPUSH
41504: CALL_OW 254
41508: ST_TO_ADDR
// if r = 5 then
41509: LD_VAR 0 15
41513: PUSH
41514: LD_INT 5
41516: EQUAL
41517: IFFALSE 41527
// r := 0 ;
41519: LD_ADDR_VAR 0 15
41523: PUSH
41524: LD_INT 0
41526: ST_TO_ADDR
// for j = r to 5 do
41527: LD_ADDR_VAR 0 10
41531: PUSH
41532: DOUBLE
41533: LD_VAR 0 15
41537: DEC
41538: ST_TO_ADDR
41539: LD_INT 5
41541: PUSH
41542: FOR_TO
41543: IFFALSE 41657
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
41545: LD_ADDR_VAR 0 11
41549: PUSH
41550: LD_VAR 0 13
41554: PPUSH
41555: CALL_OW 250
41559: PPUSH
41560: LD_VAR 0 10
41564: PPUSH
41565: LD_INT 2
41567: PPUSH
41568: CALL_OW 272
41572: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
41573: LD_ADDR_VAR 0 12
41577: PUSH
41578: LD_VAR 0 13
41582: PPUSH
41583: CALL_OW 251
41587: PPUSH
41588: LD_VAR 0 10
41592: PPUSH
41593: LD_INT 2
41595: PPUSH
41596: CALL_OW 273
41600: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
41601: LD_VAR 0 11
41605: PPUSH
41606: LD_VAR 0 12
41610: PPUSH
41611: CALL_OW 488
41615: PUSH
41616: LD_VAR 0 11
41620: PPUSH
41621: LD_VAR 0 12
41625: PPUSH
41626: CALL_OW 428
41630: NOT
41631: AND
41632: IFFALSE 41655
// begin ComMoveXY ( tmp , _x , _y ) ;
41634: LD_VAR 0 13
41638: PPUSH
41639: LD_VAR 0 11
41643: PPUSH
41644: LD_VAR 0 12
41648: PPUSH
41649: CALL_OW 111
// break ;
41653: GO 41657
// end ; end ;
41655: GO 41542
41657: POP
41658: POP
// end ; end ;
41659: GO 40984
41661: POP
41662: POP
// end ;
41663: LD_VAR 0 8
41667: RET
// export function BuildingTechInvented ( side , btype ) ; begin
41668: LD_INT 0
41670: PPUSH
// result := true ;
41671: LD_ADDR_VAR 0 3
41675: PUSH
41676: LD_INT 1
41678: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
41679: LD_VAR 0 2
41683: PUSH
41684: LD_INT 24
41686: DOUBLE
41687: EQUAL
41688: IFTRUE 41698
41690: LD_INT 33
41692: DOUBLE
41693: EQUAL
41694: IFTRUE 41698
41696: GO 41723
41698: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
41699: LD_ADDR_VAR 0 3
41703: PUSH
41704: LD_INT 32
41706: PPUSH
41707: LD_VAR 0 1
41711: PPUSH
41712: CALL_OW 321
41716: PUSH
41717: LD_INT 2
41719: EQUAL
41720: ST_TO_ADDR
41721: GO 42039
41723: LD_INT 20
41725: DOUBLE
41726: EQUAL
41727: IFTRUE 41731
41729: GO 41756
41731: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
41732: LD_ADDR_VAR 0 3
41736: PUSH
41737: LD_INT 6
41739: PPUSH
41740: LD_VAR 0 1
41744: PPUSH
41745: CALL_OW 321
41749: PUSH
41750: LD_INT 2
41752: EQUAL
41753: ST_TO_ADDR
41754: GO 42039
41756: LD_INT 22
41758: DOUBLE
41759: EQUAL
41760: IFTRUE 41770
41762: LD_INT 36
41764: DOUBLE
41765: EQUAL
41766: IFTRUE 41770
41768: GO 41795
41770: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
41771: LD_ADDR_VAR 0 3
41775: PUSH
41776: LD_INT 15
41778: PPUSH
41779: LD_VAR 0 1
41783: PPUSH
41784: CALL_OW 321
41788: PUSH
41789: LD_INT 2
41791: EQUAL
41792: ST_TO_ADDR
41793: GO 42039
41795: LD_INT 30
41797: DOUBLE
41798: EQUAL
41799: IFTRUE 41803
41801: GO 41828
41803: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
41804: LD_ADDR_VAR 0 3
41808: PUSH
41809: LD_INT 20
41811: PPUSH
41812: LD_VAR 0 1
41816: PPUSH
41817: CALL_OW 321
41821: PUSH
41822: LD_INT 2
41824: EQUAL
41825: ST_TO_ADDR
41826: GO 42039
41828: LD_INT 28
41830: DOUBLE
41831: EQUAL
41832: IFTRUE 41842
41834: LD_INT 21
41836: DOUBLE
41837: EQUAL
41838: IFTRUE 41842
41840: GO 41867
41842: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
41843: LD_ADDR_VAR 0 3
41847: PUSH
41848: LD_INT 21
41850: PPUSH
41851: LD_VAR 0 1
41855: PPUSH
41856: CALL_OW 321
41860: PUSH
41861: LD_INT 2
41863: EQUAL
41864: ST_TO_ADDR
41865: GO 42039
41867: LD_INT 16
41869: DOUBLE
41870: EQUAL
41871: IFTRUE 41875
41873: GO 41900
41875: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
41876: LD_ADDR_VAR 0 3
41880: PUSH
41881: LD_INT 84
41883: PPUSH
41884: LD_VAR 0 1
41888: PPUSH
41889: CALL_OW 321
41893: PUSH
41894: LD_INT 2
41896: EQUAL
41897: ST_TO_ADDR
41898: GO 42039
41900: LD_INT 19
41902: DOUBLE
41903: EQUAL
41904: IFTRUE 41914
41906: LD_INT 23
41908: DOUBLE
41909: EQUAL
41910: IFTRUE 41914
41912: GO 41939
41914: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
41915: LD_ADDR_VAR 0 3
41919: PUSH
41920: LD_INT 83
41922: PPUSH
41923: LD_VAR 0 1
41927: PPUSH
41928: CALL_OW 321
41932: PUSH
41933: LD_INT 2
41935: EQUAL
41936: ST_TO_ADDR
41937: GO 42039
41939: LD_INT 17
41941: DOUBLE
41942: EQUAL
41943: IFTRUE 41947
41945: GO 41972
41947: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
41948: LD_ADDR_VAR 0 3
41952: PUSH
41953: LD_INT 39
41955: PPUSH
41956: LD_VAR 0 1
41960: PPUSH
41961: CALL_OW 321
41965: PUSH
41966: LD_INT 2
41968: EQUAL
41969: ST_TO_ADDR
41970: GO 42039
41972: LD_INT 18
41974: DOUBLE
41975: EQUAL
41976: IFTRUE 41980
41978: GO 42005
41980: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
41981: LD_ADDR_VAR 0 3
41985: PUSH
41986: LD_INT 40
41988: PPUSH
41989: LD_VAR 0 1
41993: PPUSH
41994: CALL_OW 321
41998: PUSH
41999: LD_INT 2
42001: EQUAL
42002: ST_TO_ADDR
42003: GO 42039
42005: LD_INT 27
42007: DOUBLE
42008: EQUAL
42009: IFTRUE 42013
42011: GO 42038
42013: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
42014: LD_ADDR_VAR 0 3
42018: PUSH
42019: LD_INT 35
42021: PPUSH
42022: LD_VAR 0 1
42026: PPUSH
42027: CALL_OW 321
42031: PUSH
42032: LD_INT 2
42034: EQUAL
42035: ST_TO_ADDR
42036: GO 42039
42038: POP
// end ;
42039: LD_VAR 0 3
42043: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
42044: LD_INT 0
42046: PPUSH
42047: PPUSH
42048: PPUSH
42049: PPUSH
42050: PPUSH
42051: PPUSH
42052: PPUSH
42053: PPUSH
42054: PPUSH
42055: PPUSH
42056: PPUSH
// result := false ;
42057: LD_ADDR_VAR 0 6
42061: PUSH
42062: LD_INT 0
42064: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
42065: LD_VAR 0 1
42069: NOT
42070: PUSH
42071: LD_VAR 0 1
42075: PPUSH
42076: CALL_OW 266
42080: PUSH
42081: LD_INT 0
42083: PUSH
42084: LD_INT 1
42086: PUSH
42087: EMPTY
42088: LIST
42089: LIST
42090: IN
42091: NOT
42092: OR
42093: PUSH
42094: LD_VAR 0 2
42098: NOT
42099: OR
42100: PUSH
42101: LD_VAR 0 5
42105: PUSH
42106: LD_INT 0
42108: PUSH
42109: LD_INT 1
42111: PUSH
42112: LD_INT 2
42114: PUSH
42115: LD_INT 3
42117: PUSH
42118: LD_INT 4
42120: PUSH
42121: LD_INT 5
42123: PUSH
42124: EMPTY
42125: LIST
42126: LIST
42127: LIST
42128: LIST
42129: LIST
42130: LIST
42131: IN
42132: NOT
42133: OR
42134: PUSH
42135: LD_VAR 0 3
42139: PPUSH
42140: LD_VAR 0 4
42144: PPUSH
42145: CALL_OW 488
42149: NOT
42150: OR
42151: IFFALSE 42155
// exit ;
42153: GO 42891
// side := GetSide ( depot ) ;
42155: LD_ADDR_VAR 0 9
42159: PUSH
42160: LD_VAR 0 1
42164: PPUSH
42165: CALL_OW 255
42169: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
42170: LD_VAR 0 9
42174: PPUSH
42175: LD_VAR 0 2
42179: PPUSH
42180: CALL 41668 0 2
42184: NOT
42185: IFFALSE 42189
// exit ;
42187: GO 42891
// pom := GetBase ( depot ) ;
42189: LD_ADDR_VAR 0 10
42193: PUSH
42194: LD_VAR 0 1
42198: PPUSH
42199: CALL_OW 274
42203: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
42204: LD_ADDR_VAR 0 11
42208: PUSH
42209: LD_VAR 0 2
42213: PPUSH
42214: LD_VAR 0 1
42218: PPUSH
42219: CALL_OW 248
42223: PPUSH
42224: CALL_OW 450
42228: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
42229: LD_VAR 0 10
42233: PPUSH
42234: LD_INT 1
42236: PPUSH
42237: CALL_OW 275
42241: PUSH
42242: LD_VAR 0 11
42246: PUSH
42247: LD_INT 1
42249: ARRAY
42250: GREATEREQUAL
42251: PUSH
42252: LD_VAR 0 10
42256: PPUSH
42257: LD_INT 2
42259: PPUSH
42260: CALL_OW 275
42264: PUSH
42265: LD_VAR 0 11
42269: PUSH
42270: LD_INT 2
42272: ARRAY
42273: GREATEREQUAL
42274: AND
42275: PUSH
42276: LD_VAR 0 10
42280: PPUSH
42281: LD_INT 3
42283: PPUSH
42284: CALL_OW 275
42288: PUSH
42289: LD_VAR 0 11
42293: PUSH
42294: LD_INT 3
42296: ARRAY
42297: GREATEREQUAL
42298: AND
42299: NOT
42300: IFFALSE 42304
// exit ;
42302: GO 42891
// if GetBType ( depot ) = b_depot then
42304: LD_VAR 0 1
42308: PPUSH
42309: CALL_OW 266
42313: PUSH
42314: LD_INT 0
42316: EQUAL
42317: IFFALSE 42329
// dist := 28 else
42319: LD_ADDR_VAR 0 14
42323: PUSH
42324: LD_INT 28
42326: ST_TO_ADDR
42327: GO 42337
// dist := 36 ;
42329: LD_ADDR_VAR 0 14
42333: PUSH
42334: LD_INT 36
42336: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
42337: LD_VAR 0 1
42341: PPUSH
42342: LD_VAR 0 3
42346: PPUSH
42347: LD_VAR 0 4
42351: PPUSH
42352: CALL_OW 297
42356: PUSH
42357: LD_VAR 0 14
42361: GREATER
42362: IFFALSE 42366
// exit ;
42364: GO 42891
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
42366: LD_ADDR_VAR 0 12
42370: PUSH
42371: LD_VAR 0 2
42375: PPUSH
42376: LD_VAR 0 3
42380: PPUSH
42381: LD_VAR 0 4
42385: PPUSH
42386: LD_VAR 0 5
42390: PPUSH
42391: LD_VAR 0 1
42395: PPUSH
42396: CALL_OW 248
42400: PPUSH
42401: LD_INT 0
42403: PPUSH
42404: CALL 42896 0 6
42408: ST_TO_ADDR
// if not hexes then
42409: LD_VAR 0 12
42413: NOT
42414: IFFALSE 42418
// exit ;
42416: GO 42891
// hex := GetHexInfo ( x , y ) ;
42418: LD_ADDR_VAR 0 15
42422: PUSH
42423: LD_VAR 0 3
42427: PPUSH
42428: LD_VAR 0 4
42432: PPUSH
42433: CALL_OW 546
42437: ST_TO_ADDR
// if hex [ 1 ] then
42438: LD_VAR 0 15
42442: PUSH
42443: LD_INT 1
42445: ARRAY
42446: IFFALSE 42450
// exit ;
42448: GO 42891
// height := hex [ 2 ] ;
42450: LD_ADDR_VAR 0 13
42454: PUSH
42455: LD_VAR 0 15
42459: PUSH
42460: LD_INT 2
42462: ARRAY
42463: ST_TO_ADDR
// for i = 1 to hexes do
42464: LD_ADDR_VAR 0 7
42468: PUSH
42469: DOUBLE
42470: LD_INT 1
42472: DEC
42473: ST_TO_ADDR
42474: LD_VAR 0 12
42478: PUSH
42479: FOR_TO
42480: IFFALSE 42810
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
42482: LD_VAR 0 12
42486: PUSH
42487: LD_VAR 0 7
42491: ARRAY
42492: PUSH
42493: LD_INT 1
42495: ARRAY
42496: PPUSH
42497: LD_VAR 0 12
42501: PUSH
42502: LD_VAR 0 7
42506: ARRAY
42507: PUSH
42508: LD_INT 2
42510: ARRAY
42511: PPUSH
42512: CALL_OW 488
42516: NOT
42517: PUSH
42518: LD_VAR 0 12
42522: PUSH
42523: LD_VAR 0 7
42527: ARRAY
42528: PUSH
42529: LD_INT 1
42531: ARRAY
42532: PPUSH
42533: LD_VAR 0 12
42537: PUSH
42538: LD_VAR 0 7
42542: ARRAY
42543: PUSH
42544: LD_INT 2
42546: ARRAY
42547: PPUSH
42548: CALL_OW 428
42552: PUSH
42553: LD_INT 0
42555: GREATER
42556: OR
42557: PUSH
42558: LD_VAR 0 12
42562: PUSH
42563: LD_VAR 0 7
42567: ARRAY
42568: PUSH
42569: LD_INT 1
42571: ARRAY
42572: PPUSH
42573: LD_VAR 0 12
42577: PUSH
42578: LD_VAR 0 7
42582: ARRAY
42583: PUSH
42584: LD_INT 2
42586: ARRAY
42587: PPUSH
42588: CALL_OW 351
42592: OR
42593: IFFALSE 42599
// exit ;
42595: POP
42596: POP
42597: GO 42891
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
42599: LD_ADDR_VAR 0 8
42603: PUSH
42604: LD_VAR 0 12
42608: PUSH
42609: LD_VAR 0 7
42613: ARRAY
42614: PUSH
42615: LD_INT 1
42617: ARRAY
42618: PPUSH
42619: LD_VAR 0 12
42623: PUSH
42624: LD_VAR 0 7
42628: ARRAY
42629: PUSH
42630: LD_INT 2
42632: ARRAY
42633: PPUSH
42634: CALL_OW 546
42638: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
42639: LD_VAR 0 8
42643: PUSH
42644: LD_INT 1
42646: ARRAY
42647: PUSH
42648: LD_VAR 0 8
42652: PUSH
42653: LD_INT 2
42655: ARRAY
42656: PUSH
42657: LD_VAR 0 13
42661: PUSH
42662: LD_INT 2
42664: PLUS
42665: GREATER
42666: OR
42667: PUSH
42668: LD_VAR 0 8
42672: PUSH
42673: LD_INT 2
42675: ARRAY
42676: PUSH
42677: LD_VAR 0 13
42681: PUSH
42682: LD_INT 2
42684: MINUS
42685: LESS
42686: OR
42687: PUSH
42688: LD_VAR 0 8
42692: PUSH
42693: LD_INT 3
42695: ARRAY
42696: PUSH
42697: LD_INT 0
42699: PUSH
42700: LD_INT 8
42702: PUSH
42703: LD_INT 9
42705: PUSH
42706: LD_INT 10
42708: PUSH
42709: LD_INT 11
42711: PUSH
42712: LD_INT 12
42714: PUSH
42715: LD_INT 13
42717: PUSH
42718: LD_INT 16
42720: PUSH
42721: LD_INT 17
42723: PUSH
42724: LD_INT 18
42726: PUSH
42727: LD_INT 19
42729: PUSH
42730: LD_INT 20
42732: PUSH
42733: LD_INT 21
42735: PUSH
42736: EMPTY
42737: LIST
42738: LIST
42739: LIST
42740: LIST
42741: LIST
42742: LIST
42743: LIST
42744: LIST
42745: LIST
42746: LIST
42747: LIST
42748: LIST
42749: LIST
42750: IN
42751: NOT
42752: OR
42753: PUSH
42754: LD_VAR 0 8
42758: PUSH
42759: LD_INT 5
42761: ARRAY
42762: NOT
42763: OR
42764: PUSH
42765: LD_VAR 0 8
42769: PUSH
42770: LD_INT 6
42772: ARRAY
42773: PUSH
42774: LD_INT 1
42776: PUSH
42777: LD_INT 2
42779: PUSH
42780: LD_INT 7
42782: PUSH
42783: LD_INT 9
42785: PUSH
42786: LD_INT 10
42788: PUSH
42789: LD_INT 11
42791: PUSH
42792: EMPTY
42793: LIST
42794: LIST
42795: LIST
42796: LIST
42797: LIST
42798: LIST
42799: IN
42800: NOT
42801: OR
42802: IFFALSE 42808
// exit ;
42804: POP
42805: POP
42806: GO 42891
// end ;
42808: GO 42479
42810: POP
42811: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
42812: LD_VAR 0 9
42816: PPUSH
42817: LD_VAR 0 3
42821: PPUSH
42822: LD_VAR 0 4
42826: PPUSH
42827: LD_INT 20
42829: PPUSH
42830: CALL 34843 0 4
42834: PUSH
42835: LD_INT 4
42837: ARRAY
42838: IFFALSE 42842
// exit ;
42840: GO 42891
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
42842: LD_VAR 0 2
42846: PUSH
42847: LD_INT 29
42849: PUSH
42850: LD_INT 30
42852: PUSH
42853: EMPTY
42854: LIST
42855: LIST
42856: IN
42857: PUSH
42858: LD_VAR 0 3
42862: PPUSH
42863: LD_VAR 0 4
42867: PPUSH
42868: LD_VAR 0 9
42872: PPUSH
42873: CALL_OW 440
42877: NOT
42878: AND
42879: IFFALSE 42883
// exit ;
42881: GO 42891
// result := true ;
42883: LD_ADDR_VAR 0 6
42887: PUSH
42888: LD_INT 1
42890: ST_TO_ADDR
// end ;
42891: LD_VAR 0 6
42895: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
42896: LD_INT 0
42898: PPUSH
42899: PPUSH
42900: PPUSH
42901: PPUSH
42902: PPUSH
42903: PPUSH
42904: PPUSH
42905: PPUSH
42906: PPUSH
42907: PPUSH
42908: PPUSH
42909: PPUSH
42910: PPUSH
42911: PPUSH
42912: PPUSH
42913: PPUSH
42914: PPUSH
42915: PPUSH
42916: PPUSH
42917: PPUSH
42918: PPUSH
42919: PPUSH
42920: PPUSH
42921: PPUSH
42922: PPUSH
42923: PPUSH
42924: PPUSH
42925: PPUSH
42926: PPUSH
42927: PPUSH
42928: PPUSH
42929: PPUSH
42930: PPUSH
42931: PPUSH
42932: PPUSH
42933: PPUSH
42934: PPUSH
42935: PPUSH
42936: PPUSH
42937: PPUSH
42938: PPUSH
42939: PPUSH
42940: PPUSH
42941: PPUSH
42942: PPUSH
42943: PPUSH
42944: PPUSH
42945: PPUSH
42946: PPUSH
42947: PPUSH
42948: PPUSH
42949: PPUSH
42950: PPUSH
42951: PPUSH
42952: PPUSH
42953: PPUSH
42954: PPUSH
42955: PPUSH
// result = [ ] ;
42956: LD_ADDR_VAR 0 7
42960: PUSH
42961: EMPTY
42962: ST_TO_ADDR
// temp_list = [ ] ;
42963: LD_ADDR_VAR 0 9
42967: PUSH
42968: EMPTY
42969: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
42970: LD_VAR 0 4
42974: PUSH
42975: LD_INT 0
42977: PUSH
42978: LD_INT 1
42980: PUSH
42981: LD_INT 2
42983: PUSH
42984: LD_INT 3
42986: PUSH
42987: LD_INT 4
42989: PUSH
42990: LD_INT 5
42992: PUSH
42993: EMPTY
42994: LIST
42995: LIST
42996: LIST
42997: LIST
42998: LIST
42999: LIST
43000: IN
43001: NOT
43002: PUSH
43003: LD_VAR 0 1
43007: PUSH
43008: LD_INT 0
43010: PUSH
43011: LD_INT 1
43013: PUSH
43014: EMPTY
43015: LIST
43016: LIST
43017: IN
43018: PUSH
43019: LD_VAR 0 5
43023: PUSH
43024: LD_INT 1
43026: PUSH
43027: LD_INT 2
43029: PUSH
43030: LD_INT 3
43032: PUSH
43033: EMPTY
43034: LIST
43035: LIST
43036: LIST
43037: IN
43038: NOT
43039: AND
43040: OR
43041: IFFALSE 43045
// exit ;
43043: GO 61436
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
43045: LD_VAR 0 1
43049: PUSH
43050: LD_INT 6
43052: PUSH
43053: LD_INT 7
43055: PUSH
43056: LD_INT 8
43058: PUSH
43059: LD_INT 13
43061: PUSH
43062: LD_INT 12
43064: PUSH
43065: LD_INT 15
43067: PUSH
43068: LD_INT 11
43070: PUSH
43071: LD_INT 14
43073: PUSH
43074: LD_INT 10
43076: PUSH
43077: EMPTY
43078: LIST
43079: LIST
43080: LIST
43081: LIST
43082: LIST
43083: LIST
43084: LIST
43085: LIST
43086: LIST
43087: IN
43088: IFFALSE 43098
// btype = b_lab ;
43090: LD_ADDR_VAR 0 1
43094: PUSH
43095: LD_INT 6
43097: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
43098: LD_VAR 0 6
43102: PUSH
43103: LD_INT 0
43105: PUSH
43106: LD_INT 1
43108: PUSH
43109: LD_INT 2
43111: PUSH
43112: EMPTY
43113: LIST
43114: LIST
43115: LIST
43116: IN
43117: NOT
43118: PUSH
43119: LD_VAR 0 1
43123: PUSH
43124: LD_INT 0
43126: PUSH
43127: LD_INT 1
43129: PUSH
43130: LD_INT 2
43132: PUSH
43133: LD_INT 3
43135: PUSH
43136: LD_INT 6
43138: PUSH
43139: LD_INT 36
43141: PUSH
43142: LD_INT 4
43144: PUSH
43145: LD_INT 5
43147: PUSH
43148: LD_INT 31
43150: PUSH
43151: LD_INT 32
43153: PUSH
43154: LD_INT 33
43156: PUSH
43157: EMPTY
43158: LIST
43159: LIST
43160: LIST
43161: LIST
43162: LIST
43163: LIST
43164: LIST
43165: LIST
43166: LIST
43167: LIST
43168: LIST
43169: IN
43170: NOT
43171: PUSH
43172: LD_VAR 0 6
43176: PUSH
43177: LD_INT 1
43179: EQUAL
43180: AND
43181: OR
43182: PUSH
43183: LD_VAR 0 1
43187: PUSH
43188: LD_INT 2
43190: PUSH
43191: LD_INT 3
43193: PUSH
43194: EMPTY
43195: LIST
43196: LIST
43197: IN
43198: NOT
43199: PUSH
43200: LD_VAR 0 6
43204: PUSH
43205: LD_INT 2
43207: EQUAL
43208: AND
43209: OR
43210: IFFALSE 43220
// mode = 0 ;
43212: LD_ADDR_VAR 0 6
43216: PUSH
43217: LD_INT 0
43219: ST_TO_ADDR
// case mode of 0 :
43220: LD_VAR 0 6
43224: PUSH
43225: LD_INT 0
43227: DOUBLE
43228: EQUAL
43229: IFTRUE 43233
43231: GO 54686
43233: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
43234: LD_ADDR_VAR 0 11
43238: PUSH
43239: LD_INT 0
43241: PUSH
43242: LD_INT 0
43244: PUSH
43245: EMPTY
43246: LIST
43247: LIST
43248: PUSH
43249: LD_INT 0
43251: PUSH
43252: LD_INT 1
43254: NEG
43255: PUSH
43256: EMPTY
43257: LIST
43258: LIST
43259: PUSH
43260: LD_INT 1
43262: PUSH
43263: LD_INT 0
43265: PUSH
43266: EMPTY
43267: LIST
43268: LIST
43269: PUSH
43270: LD_INT 1
43272: PUSH
43273: LD_INT 1
43275: PUSH
43276: EMPTY
43277: LIST
43278: LIST
43279: PUSH
43280: LD_INT 0
43282: PUSH
43283: LD_INT 1
43285: PUSH
43286: EMPTY
43287: LIST
43288: LIST
43289: PUSH
43290: LD_INT 1
43292: NEG
43293: PUSH
43294: LD_INT 0
43296: PUSH
43297: EMPTY
43298: LIST
43299: LIST
43300: PUSH
43301: LD_INT 1
43303: NEG
43304: PUSH
43305: LD_INT 1
43307: NEG
43308: PUSH
43309: EMPTY
43310: LIST
43311: LIST
43312: PUSH
43313: LD_INT 1
43315: NEG
43316: PUSH
43317: LD_INT 2
43319: NEG
43320: PUSH
43321: EMPTY
43322: LIST
43323: LIST
43324: PUSH
43325: LD_INT 0
43327: PUSH
43328: LD_INT 2
43330: NEG
43331: PUSH
43332: EMPTY
43333: LIST
43334: LIST
43335: PUSH
43336: LD_INT 1
43338: PUSH
43339: LD_INT 1
43341: NEG
43342: PUSH
43343: EMPTY
43344: LIST
43345: LIST
43346: PUSH
43347: LD_INT 1
43349: PUSH
43350: LD_INT 2
43352: PUSH
43353: EMPTY
43354: LIST
43355: LIST
43356: PUSH
43357: LD_INT 0
43359: PUSH
43360: LD_INT 2
43362: PUSH
43363: EMPTY
43364: LIST
43365: LIST
43366: PUSH
43367: LD_INT 1
43369: NEG
43370: PUSH
43371: LD_INT 1
43373: PUSH
43374: EMPTY
43375: LIST
43376: LIST
43377: PUSH
43378: LD_INT 1
43380: PUSH
43381: LD_INT 3
43383: PUSH
43384: EMPTY
43385: LIST
43386: LIST
43387: PUSH
43388: LD_INT 0
43390: PUSH
43391: LD_INT 3
43393: PUSH
43394: EMPTY
43395: LIST
43396: LIST
43397: PUSH
43398: LD_INT 1
43400: NEG
43401: PUSH
43402: LD_INT 2
43404: PUSH
43405: EMPTY
43406: LIST
43407: LIST
43408: PUSH
43409: EMPTY
43410: LIST
43411: LIST
43412: LIST
43413: LIST
43414: LIST
43415: LIST
43416: LIST
43417: LIST
43418: LIST
43419: LIST
43420: LIST
43421: LIST
43422: LIST
43423: LIST
43424: LIST
43425: LIST
43426: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43427: LD_ADDR_VAR 0 12
43431: PUSH
43432: LD_INT 0
43434: PUSH
43435: LD_INT 0
43437: PUSH
43438: EMPTY
43439: LIST
43440: LIST
43441: PUSH
43442: LD_INT 0
43444: PUSH
43445: LD_INT 1
43447: NEG
43448: PUSH
43449: EMPTY
43450: LIST
43451: LIST
43452: PUSH
43453: LD_INT 1
43455: PUSH
43456: LD_INT 0
43458: PUSH
43459: EMPTY
43460: LIST
43461: LIST
43462: PUSH
43463: LD_INT 1
43465: PUSH
43466: LD_INT 1
43468: PUSH
43469: EMPTY
43470: LIST
43471: LIST
43472: PUSH
43473: LD_INT 0
43475: PUSH
43476: LD_INT 1
43478: PUSH
43479: EMPTY
43480: LIST
43481: LIST
43482: PUSH
43483: LD_INT 1
43485: NEG
43486: PUSH
43487: LD_INT 0
43489: PUSH
43490: EMPTY
43491: LIST
43492: LIST
43493: PUSH
43494: LD_INT 1
43496: NEG
43497: PUSH
43498: LD_INT 1
43500: NEG
43501: PUSH
43502: EMPTY
43503: LIST
43504: LIST
43505: PUSH
43506: LD_INT 1
43508: PUSH
43509: LD_INT 1
43511: NEG
43512: PUSH
43513: EMPTY
43514: LIST
43515: LIST
43516: PUSH
43517: LD_INT 2
43519: PUSH
43520: LD_INT 0
43522: PUSH
43523: EMPTY
43524: LIST
43525: LIST
43526: PUSH
43527: LD_INT 2
43529: PUSH
43530: LD_INT 1
43532: PUSH
43533: EMPTY
43534: LIST
43535: LIST
43536: PUSH
43537: LD_INT 1
43539: NEG
43540: PUSH
43541: LD_INT 1
43543: PUSH
43544: EMPTY
43545: LIST
43546: LIST
43547: PUSH
43548: LD_INT 2
43550: NEG
43551: PUSH
43552: LD_INT 0
43554: PUSH
43555: EMPTY
43556: LIST
43557: LIST
43558: PUSH
43559: LD_INT 2
43561: NEG
43562: PUSH
43563: LD_INT 1
43565: NEG
43566: PUSH
43567: EMPTY
43568: LIST
43569: LIST
43570: PUSH
43571: LD_INT 2
43573: NEG
43574: PUSH
43575: LD_INT 1
43577: PUSH
43578: EMPTY
43579: LIST
43580: LIST
43581: PUSH
43582: LD_INT 3
43584: NEG
43585: PUSH
43586: LD_INT 0
43588: PUSH
43589: EMPTY
43590: LIST
43591: LIST
43592: PUSH
43593: LD_INT 3
43595: NEG
43596: PUSH
43597: LD_INT 1
43599: NEG
43600: PUSH
43601: EMPTY
43602: LIST
43603: LIST
43604: PUSH
43605: EMPTY
43606: LIST
43607: LIST
43608: LIST
43609: LIST
43610: LIST
43611: LIST
43612: LIST
43613: LIST
43614: LIST
43615: LIST
43616: LIST
43617: LIST
43618: LIST
43619: LIST
43620: LIST
43621: LIST
43622: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43623: LD_ADDR_VAR 0 13
43627: PUSH
43628: LD_INT 0
43630: PUSH
43631: LD_INT 0
43633: PUSH
43634: EMPTY
43635: LIST
43636: LIST
43637: PUSH
43638: LD_INT 0
43640: PUSH
43641: LD_INT 1
43643: NEG
43644: PUSH
43645: EMPTY
43646: LIST
43647: LIST
43648: PUSH
43649: LD_INT 1
43651: PUSH
43652: LD_INT 0
43654: PUSH
43655: EMPTY
43656: LIST
43657: LIST
43658: PUSH
43659: LD_INT 1
43661: PUSH
43662: LD_INT 1
43664: PUSH
43665: EMPTY
43666: LIST
43667: LIST
43668: PUSH
43669: LD_INT 0
43671: PUSH
43672: LD_INT 1
43674: PUSH
43675: EMPTY
43676: LIST
43677: LIST
43678: PUSH
43679: LD_INT 1
43681: NEG
43682: PUSH
43683: LD_INT 0
43685: PUSH
43686: EMPTY
43687: LIST
43688: LIST
43689: PUSH
43690: LD_INT 1
43692: NEG
43693: PUSH
43694: LD_INT 1
43696: NEG
43697: PUSH
43698: EMPTY
43699: LIST
43700: LIST
43701: PUSH
43702: LD_INT 1
43704: NEG
43705: PUSH
43706: LD_INT 2
43708: NEG
43709: PUSH
43710: EMPTY
43711: LIST
43712: LIST
43713: PUSH
43714: LD_INT 2
43716: PUSH
43717: LD_INT 1
43719: PUSH
43720: EMPTY
43721: LIST
43722: LIST
43723: PUSH
43724: LD_INT 2
43726: PUSH
43727: LD_INT 2
43729: PUSH
43730: EMPTY
43731: LIST
43732: LIST
43733: PUSH
43734: LD_INT 1
43736: PUSH
43737: LD_INT 2
43739: PUSH
43740: EMPTY
43741: LIST
43742: LIST
43743: PUSH
43744: LD_INT 2
43746: NEG
43747: PUSH
43748: LD_INT 1
43750: NEG
43751: PUSH
43752: EMPTY
43753: LIST
43754: LIST
43755: PUSH
43756: LD_INT 2
43758: NEG
43759: PUSH
43760: LD_INT 2
43762: NEG
43763: PUSH
43764: EMPTY
43765: LIST
43766: LIST
43767: PUSH
43768: LD_INT 2
43770: NEG
43771: PUSH
43772: LD_INT 3
43774: NEG
43775: PUSH
43776: EMPTY
43777: LIST
43778: LIST
43779: PUSH
43780: LD_INT 3
43782: NEG
43783: PUSH
43784: LD_INT 2
43786: NEG
43787: PUSH
43788: EMPTY
43789: LIST
43790: LIST
43791: PUSH
43792: LD_INT 3
43794: NEG
43795: PUSH
43796: LD_INT 3
43798: NEG
43799: PUSH
43800: EMPTY
43801: LIST
43802: LIST
43803: PUSH
43804: EMPTY
43805: LIST
43806: LIST
43807: LIST
43808: LIST
43809: LIST
43810: LIST
43811: LIST
43812: LIST
43813: LIST
43814: LIST
43815: LIST
43816: LIST
43817: LIST
43818: LIST
43819: LIST
43820: LIST
43821: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
43822: LD_ADDR_VAR 0 14
43826: PUSH
43827: LD_INT 0
43829: PUSH
43830: LD_INT 0
43832: PUSH
43833: EMPTY
43834: LIST
43835: LIST
43836: PUSH
43837: LD_INT 0
43839: PUSH
43840: LD_INT 1
43842: NEG
43843: PUSH
43844: EMPTY
43845: LIST
43846: LIST
43847: PUSH
43848: LD_INT 1
43850: PUSH
43851: LD_INT 0
43853: PUSH
43854: EMPTY
43855: LIST
43856: LIST
43857: PUSH
43858: LD_INT 1
43860: PUSH
43861: LD_INT 1
43863: PUSH
43864: EMPTY
43865: LIST
43866: LIST
43867: PUSH
43868: LD_INT 0
43870: PUSH
43871: LD_INT 1
43873: PUSH
43874: EMPTY
43875: LIST
43876: LIST
43877: PUSH
43878: LD_INT 1
43880: NEG
43881: PUSH
43882: LD_INT 0
43884: PUSH
43885: EMPTY
43886: LIST
43887: LIST
43888: PUSH
43889: LD_INT 1
43891: NEG
43892: PUSH
43893: LD_INT 1
43895: NEG
43896: PUSH
43897: EMPTY
43898: LIST
43899: LIST
43900: PUSH
43901: LD_INT 1
43903: NEG
43904: PUSH
43905: LD_INT 2
43907: NEG
43908: PUSH
43909: EMPTY
43910: LIST
43911: LIST
43912: PUSH
43913: LD_INT 0
43915: PUSH
43916: LD_INT 2
43918: NEG
43919: PUSH
43920: EMPTY
43921: LIST
43922: LIST
43923: PUSH
43924: LD_INT 1
43926: PUSH
43927: LD_INT 1
43929: NEG
43930: PUSH
43931: EMPTY
43932: LIST
43933: LIST
43934: PUSH
43935: LD_INT 1
43937: PUSH
43938: LD_INT 2
43940: PUSH
43941: EMPTY
43942: LIST
43943: LIST
43944: PUSH
43945: LD_INT 0
43947: PUSH
43948: LD_INT 2
43950: PUSH
43951: EMPTY
43952: LIST
43953: LIST
43954: PUSH
43955: LD_INT 1
43957: NEG
43958: PUSH
43959: LD_INT 1
43961: PUSH
43962: EMPTY
43963: LIST
43964: LIST
43965: PUSH
43966: LD_INT 1
43968: NEG
43969: PUSH
43970: LD_INT 3
43972: NEG
43973: PUSH
43974: EMPTY
43975: LIST
43976: LIST
43977: PUSH
43978: LD_INT 0
43980: PUSH
43981: LD_INT 3
43983: NEG
43984: PUSH
43985: EMPTY
43986: LIST
43987: LIST
43988: PUSH
43989: LD_INT 1
43991: PUSH
43992: LD_INT 2
43994: NEG
43995: PUSH
43996: EMPTY
43997: LIST
43998: LIST
43999: PUSH
44000: EMPTY
44001: LIST
44002: LIST
44003: LIST
44004: LIST
44005: LIST
44006: LIST
44007: LIST
44008: LIST
44009: LIST
44010: LIST
44011: LIST
44012: LIST
44013: LIST
44014: LIST
44015: LIST
44016: LIST
44017: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
44018: LD_ADDR_VAR 0 15
44022: PUSH
44023: LD_INT 0
44025: PUSH
44026: LD_INT 0
44028: PUSH
44029: EMPTY
44030: LIST
44031: LIST
44032: PUSH
44033: LD_INT 0
44035: PUSH
44036: LD_INT 1
44038: NEG
44039: PUSH
44040: EMPTY
44041: LIST
44042: LIST
44043: PUSH
44044: LD_INT 1
44046: PUSH
44047: LD_INT 0
44049: PUSH
44050: EMPTY
44051: LIST
44052: LIST
44053: PUSH
44054: LD_INT 1
44056: PUSH
44057: LD_INT 1
44059: PUSH
44060: EMPTY
44061: LIST
44062: LIST
44063: PUSH
44064: LD_INT 0
44066: PUSH
44067: LD_INT 1
44069: PUSH
44070: EMPTY
44071: LIST
44072: LIST
44073: PUSH
44074: LD_INT 1
44076: NEG
44077: PUSH
44078: LD_INT 0
44080: PUSH
44081: EMPTY
44082: LIST
44083: LIST
44084: PUSH
44085: LD_INT 1
44087: NEG
44088: PUSH
44089: LD_INT 1
44091: NEG
44092: PUSH
44093: EMPTY
44094: LIST
44095: LIST
44096: PUSH
44097: LD_INT 1
44099: PUSH
44100: LD_INT 1
44102: NEG
44103: PUSH
44104: EMPTY
44105: LIST
44106: LIST
44107: PUSH
44108: LD_INT 2
44110: PUSH
44111: LD_INT 0
44113: PUSH
44114: EMPTY
44115: LIST
44116: LIST
44117: PUSH
44118: LD_INT 2
44120: PUSH
44121: LD_INT 1
44123: PUSH
44124: EMPTY
44125: LIST
44126: LIST
44127: PUSH
44128: LD_INT 1
44130: NEG
44131: PUSH
44132: LD_INT 1
44134: PUSH
44135: EMPTY
44136: LIST
44137: LIST
44138: PUSH
44139: LD_INT 2
44141: NEG
44142: PUSH
44143: LD_INT 0
44145: PUSH
44146: EMPTY
44147: LIST
44148: LIST
44149: PUSH
44150: LD_INT 2
44152: NEG
44153: PUSH
44154: LD_INT 1
44156: NEG
44157: PUSH
44158: EMPTY
44159: LIST
44160: LIST
44161: PUSH
44162: LD_INT 2
44164: PUSH
44165: LD_INT 1
44167: NEG
44168: PUSH
44169: EMPTY
44170: LIST
44171: LIST
44172: PUSH
44173: LD_INT 3
44175: PUSH
44176: LD_INT 0
44178: PUSH
44179: EMPTY
44180: LIST
44181: LIST
44182: PUSH
44183: LD_INT 3
44185: PUSH
44186: LD_INT 1
44188: PUSH
44189: EMPTY
44190: LIST
44191: LIST
44192: PUSH
44193: EMPTY
44194: LIST
44195: LIST
44196: LIST
44197: LIST
44198: LIST
44199: LIST
44200: LIST
44201: LIST
44202: LIST
44203: LIST
44204: LIST
44205: LIST
44206: LIST
44207: LIST
44208: LIST
44209: LIST
44210: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
44211: LD_ADDR_VAR 0 16
44215: PUSH
44216: LD_INT 0
44218: PUSH
44219: LD_INT 0
44221: PUSH
44222: EMPTY
44223: LIST
44224: LIST
44225: PUSH
44226: LD_INT 0
44228: PUSH
44229: LD_INT 1
44231: NEG
44232: PUSH
44233: EMPTY
44234: LIST
44235: LIST
44236: PUSH
44237: LD_INT 1
44239: PUSH
44240: LD_INT 0
44242: PUSH
44243: EMPTY
44244: LIST
44245: LIST
44246: PUSH
44247: LD_INT 1
44249: PUSH
44250: LD_INT 1
44252: PUSH
44253: EMPTY
44254: LIST
44255: LIST
44256: PUSH
44257: LD_INT 0
44259: PUSH
44260: LD_INT 1
44262: PUSH
44263: EMPTY
44264: LIST
44265: LIST
44266: PUSH
44267: LD_INT 1
44269: NEG
44270: PUSH
44271: LD_INT 0
44273: PUSH
44274: EMPTY
44275: LIST
44276: LIST
44277: PUSH
44278: LD_INT 1
44280: NEG
44281: PUSH
44282: LD_INT 1
44284: NEG
44285: PUSH
44286: EMPTY
44287: LIST
44288: LIST
44289: PUSH
44290: LD_INT 1
44292: NEG
44293: PUSH
44294: LD_INT 2
44296: NEG
44297: PUSH
44298: EMPTY
44299: LIST
44300: LIST
44301: PUSH
44302: LD_INT 2
44304: PUSH
44305: LD_INT 1
44307: PUSH
44308: EMPTY
44309: LIST
44310: LIST
44311: PUSH
44312: LD_INT 2
44314: PUSH
44315: LD_INT 2
44317: PUSH
44318: EMPTY
44319: LIST
44320: LIST
44321: PUSH
44322: LD_INT 1
44324: PUSH
44325: LD_INT 2
44327: PUSH
44328: EMPTY
44329: LIST
44330: LIST
44331: PUSH
44332: LD_INT 2
44334: NEG
44335: PUSH
44336: LD_INT 1
44338: NEG
44339: PUSH
44340: EMPTY
44341: LIST
44342: LIST
44343: PUSH
44344: LD_INT 2
44346: NEG
44347: PUSH
44348: LD_INT 2
44350: NEG
44351: PUSH
44352: EMPTY
44353: LIST
44354: LIST
44355: PUSH
44356: LD_INT 3
44358: PUSH
44359: LD_INT 2
44361: PUSH
44362: EMPTY
44363: LIST
44364: LIST
44365: PUSH
44366: LD_INT 3
44368: PUSH
44369: LD_INT 3
44371: PUSH
44372: EMPTY
44373: LIST
44374: LIST
44375: PUSH
44376: LD_INT 2
44378: PUSH
44379: LD_INT 3
44381: PUSH
44382: EMPTY
44383: LIST
44384: LIST
44385: PUSH
44386: EMPTY
44387: LIST
44388: LIST
44389: LIST
44390: LIST
44391: LIST
44392: LIST
44393: LIST
44394: LIST
44395: LIST
44396: LIST
44397: LIST
44398: LIST
44399: LIST
44400: LIST
44401: LIST
44402: LIST
44403: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44404: LD_ADDR_VAR 0 17
44408: PUSH
44409: LD_INT 0
44411: PUSH
44412: LD_INT 0
44414: PUSH
44415: EMPTY
44416: LIST
44417: LIST
44418: PUSH
44419: LD_INT 0
44421: PUSH
44422: LD_INT 1
44424: NEG
44425: PUSH
44426: EMPTY
44427: LIST
44428: LIST
44429: PUSH
44430: LD_INT 1
44432: PUSH
44433: LD_INT 0
44435: PUSH
44436: EMPTY
44437: LIST
44438: LIST
44439: PUSH
44440: LD_INT 1
44442: PUSH
44443: LD_INT 1
44445: PUSH
44446: EMPTY
44447: LIST
44448: LIST
44449: PUSH
44450: LD_INT 0
44452: PUSH
44453: LD_INT 1
44455: PUSH
44456: EMPTY
44457: LIST
44458: LIST
44459: PUSH
44460: LD_INT 1
44462: NEG
44463: PUSH
44464: LD_INT 0
44466: PUSH
44467: EMPTY
44468: LIST
44469: LIST
44470: PUSH
44471: LD_INT 1
44473: NEG
44474: PUSH
44475: LD_INT 1
44477: NEG
44478: PUSH
44479: EMPTY
44480: LIST
44481: LIST
44482: PUSH
44483: LD_INT 1
44485: NEG
44486: PUSH
44487: LD_INT 2
44489: NEG
44490: PUSH
44491: EMPTY
44492: LIST
44493: LIST
44494: PUSH
44495: LD_INT 0
44497: PUSH
44498: LD_INT 2
44500: NEG
44501: PUSH
44502: EMPTY
44503: LIST
44504: LIST
44505: PUSH
44506: LD_INT 1
44508: PUSH
44509: LD_INT 1
44511: NEG
44512: PUSH
44513: EMPTY
44514: LIST
44515: LIST
44516: PUSH
44517: LD_INT 2
44519: PUSH
44520: LD_INT 0
44522: PUSH
44523: EMPTY
44524: LIST
44525: LIST
44526: PUSH
44527: LD_INT 2
44529: PUSH
44530: LD_INT 1
44532: PUSH
44533: EMPTY
44534: LIST
44535: LIST
44536: PUSH
44537: LD_INT 2
44539: PUSH
44540: LD_INT 2
44542: PUSH
44543: EMPTY
44544: LIST
44545: LIST
44546: PUSH
44547: LD_INT 1
44549: PUSH
44550: LD_INT 2
44552: PUSH
44553: EMPTY
44554: LIST
44555: LIST
44556: PUSH
44557: LD_INT 0
44559: PUSH
44560: LD_INT 2
44562: PUSH
44563: EMPTY
44564: LIST
44565: LIST
44566: PUSH
44567: LD_INT 1
44569: NEG
44570: PUSH
44571: LD_INT 1
44573: PUSH
44574: EMPTY
44575: LIST
44576: LIST
44577: PUSH
44578: LD_INT 2
44580: NEG
44581: PUSH
44582: LD_INT 0
44584: PUSH
44585: EMPTY
44586: LIST
44587: LIST
44588: PUSH
44589: LD_INT 2
44591: NEG
44592: PUSH
44593: LD_INT 1
44595: NEG
44596: PUSH
44597: EMPTY
44598: LIST
44599: LIST
44600: PUSH
44601: LD_INT 2
44603: NEG
44604: PUSH
44605: LD_INT 2
44607: NEG
44608: PUSH
44609: EMPTY
44610: LIST
44611: LIST
44612: PUSH
44613: EMPTY
44614: LIST
44615: LIST
44616: LIST
44617: LIST
44618: LIST
44619: LIST
44620: LIST
44621: LIST
44622: LIST
44623: LIST
44624: LIST
44625: LIST
44626: LIST
44627: LIST
44628: LIST
44629: LIST
44630: LIST
44631: LIST
44632: LIST
44633: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44634: LD_ADDR_VAR 0 18
44638: PUSH
44639: LD_INT 0
44641: PUSH
44642: LD_INT 0
44644: PUSH
44645: EMPTY
44646: LIST
44647: LIST
44648: PUSH
44649: LD_INT 0
44651: PUSH
44652: LD_INT 1
44654: NEG
44655: PUSH
44656: EMPTY
44657: LIST
44658: LIST
44659: PUSH
44660: LD_INT 1
44662: PUSH
44663: LD_INT 0
44665: PUSH
44666: EMPTY
44667: LIST
44668: LIST
44669: PUSH
44670: LD_INT 1
44672: PUSH
44673: LD_INT 1
44675: PUSH
44676: EMPTY
44677: LIST
44678: LIST
44679: PUSH
44680: LD_INT 0
44682: PUSH
44683: LD_INT 1
44685: PUSH
44686: EMPTY
44687: LIST
44688: LIST
44689: PUSH
44690: LD_INT 1
44692: NEG
44693: PUSH
44694: LD_INT 0
44696: PUSH
44697: EMPTY
44698: LIST
44699: LIST
44700: PUSH
44701: LD_INT 1
44703: NEG
44704: PUSH
44705: LD_INT 1
44707: NEG
44708: PUSH
44709: EMPTY
44710: LIST
44711: LIST
44712: PUSH
44713: LD_INT 1
44715: NEG
44716: PUSH
44717: LD_INT 2
44719: NEG
44720: PUSH
44721: EMPTY
44722: LIST
44723: LIST
44724: PUSH
44725: LD_INT 0
44727: PUSH
44728: LD_INT 2
44730: NEG
44731: PUSH
44732: EMPTY
44733: LIST
44734: LIST
44735: PUSH
44736: LD_INT 1
44738: PUSH
44739: LD_INT 1
44741: NEG
44742: PUSH
44743: EMPTY
44744: LIST
44745: LIST
44746: PUSH
44747: LD_INT 2
44749: PUSH
44750: LD_INT 0
44752: PUSH
44753: EMPTY
44754: LIST
44755: LIST
44756: PUSH
44757: LD_INT 2
44759: PUSH
44760: LD_INT 1
44762: PUSH
44763: EMPTY
44764: LIST
44765: LIST
44766: PUSH
44767: LD_INT 2
44769: PUSH
44770: LD_INT 2
44772: PUSH
44773: EMPTY
44774: LIST
44775: LIST
44776: PUSH
44777: LD_INT 1
44779: PUSH
44780: LD_INT 2
44782: PUSH
44783: EMPTY
44784: LIST
44785: LIST
44786: PUSH
44787: LD_INT 0
44789: PUSH
44790: LD_INT 2
44792: PUSH
44793: EMPTY
44794: LIST
44795: LIST
44796: PUSH
44797: LD_INT 1
44799: NEG
44800: PUSH
44801: LD_INT 1
44803: PUSH
44804: EMPTY
44805: LIST
44806: LIST
44807: PUSH
44808: LD_INT 2
44810: NEG
44811: PUSH
44812: LD_INT 0
44814: PUSH
44815: EMPTY
44816: LIST
44817: LIST
44818: PUSH
44819: LD_INT 2
44821: NEG
44822: PUSH
44823: LD_INT 1
44825: NEG
44826: PUSH
44827: EMPTY
44828: LIST
44829: LIST
44830: PUSH
44831: LD_INT 2
44833: NEG
44834: PUSH
44835: LD_INT 2
44837: NEG
44838: PUSH
44839: EMPTY
44840: LIST
44841: LIST
44842: PUSH
44843: EMPTY
44844: LIST
44845: LIST
44846: LIST
44847: LIST
44848: LIST
44849: LIST
44850: LIST
44851: LIST
44852: LIST
44853: LIST
44854: LIST
44855: LIST
44856: LIST
44857: LIST
44858: LIST
44859: LIST
44860: LIST
44861: LIST
44862: LIST
44863: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44864: LD_ADDR_VAR 0 19
44868: PUSH
44869: LD_INT 0
44871: PUSH
44872: LD_INT 0
44874: PUSH
44875: EMPTY
44876: LIST
44877: LIST
44878: PUSH
44879: LD_INT 0
44881: PUSH
44882: LD_INT 1
44884: NEG
44885: PUSH
44886: EMPTY
44887: LIST
44888: LIST
44889: PUSH
44890: LD_INT 1
44892: PUSH
44893: LD_INT 0
44895: PUSH
44896: EMPTY
44897: LIST
44898: LIST
44899: PUSH
44900: LD_INT 1
44902: PUSH
44903: LD_INT 1
44905: PUSH
44906: EMPTY
44907: LIST
44908: LIST
44909: PUSH
44910: LD_INT 0
44912: PUSH
44913: LD_INT 1
44915: PUSH
44916: EMPTY
44917: LIST
44918: LIST
44919: PUSH
44920: LD_INT 1
44922: NEG
44923: PUSH
44924: LD_INT 0
44926: PUSH
44927: EMPTY
44928: LIST
44929: LIST
44930: PUSH
44931: LD_INT 1
44933: NEG
44934: PUSH
44935: LD_INT 1
44937: NEG
44938: PUSH
44939: EMPTY
44940: LIST
44941: LIST
44942: PUSH
44943: LD_INT 1
44945: NEG
44946: PUSH
44947: LD_INT 2
44949: NEG
44950: PUSH
44951: EMPTY
44952: LIST
44953: LIST
44954: PUSH
44955: LD_INT 0
44957: PUSH
44958: LD_INT 2
44960: NEG
44961: PUSH
44962: EMPTY
44963: LIST
44964: LIST
44965: PUSH
44966: LD_INT 1
44968: PUSH
44969: LD_INT 1
44971: NEG
44972: PUSH
44973: EMPTY
44974: LIST
44975: LIST
44976: PUSH
44977: LD_INT 2
44979: PUSH
44980: LD_INT 0
44982: PUSH
44983: EMPTY
44984: LIST
44985: LIST
44986: PUSH
44987: LD_INT 2
44989: PUSH
44990: LD_INT 1
44992: PUSH
44993: EMPTY
44994: LIST
44995: LIST
44996: PUSH
44997: LD_INT 2
44999: PUSH
45000: LD_INT 2
45002: PUSH
45003: EMPTY
45004: LIST
45005: LIST
45006: PUSH
45007: LD_INT 1
45009: PUSH
45010: LD_INT 2
45012: PUSH
45013: EMPTY
45014: LIST
45015: LIST
45016: PUSH
45017: LD_INT 0
45019: PUSH
45020: LD_INT 2
45022: PUSH
45023: EMPTY
45024: LIST
45025: LIST
45026: PUSH
45027: LD_INT 1
45029: NEG
45030: PUSH
45031: LD_INT 1
45033: PUSH
45034: EMPTY
45035: LIST
45036: LIST
45037: PUSH
45038: LD_INT 2
45040: NEG
45041: PUSH
45042: LD_INT 0
45044: PUSH
45045: EMPTY
45046: LIST
45047: LIST
45048: PUSH
45049: LD_INT 2
45051: NEG
45052: PUSH
45053: LD_INT 1
45055: NEG
45056: PUSH
45057: EMPTY
45058: LIST
45059: LIST
45060: PUSH
45061: LD_INT 2
45063: NEG
45064: PUSH
45065: LD_INT 2
45067: NEG
45068: PUSH
45069: EMPTY
45070: LIST
45071: LIST
45072: PUSH
45073: EMPTY
45074: LIST
45075: LIST
45076: LIST
45077: LIST
45078: LIST
45079: LIST
45080: LIST
45081: LIST
45082: LIST
45083: LIST
45084: LIST
45085: LIST
45086: LIST
45087: LIST
45088: LIST
45089: LIST
45090: LIST
45091: LIST
45092: LIST
45093: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45094: LD_ADDR_VAR 0 20
45098: PUSH
45099: LD_INT 0
45101: PUSH
45102: LD_INT 0
45104: PUSH
45105: EMPTY
45106: LIST
45107: LIST
45108: PUSH
45109: LD_INT 0
45111: PUSH
45112: LD_INT 1
45114: NEG
45115: PUSH
45116: EMPTY
45117: LIST
45118: LIST
45119: PUSH
45120: LD_INT 1
45122: PUSH
45123: LD_INT 0
45125: PUSH
45126: EMPTY
45127: LIST
45128: LIST
45129: PUSH
45130: LD_INT 1
45132: PUSH
45133: LD_INT 1
45135: PUSH
45136: EMPTY
45137: LIST
45138: LIST
45139: PUSH
45140: LD_INT 0
45142: PUSH
45143: LD_INT 1
45145: PUSH
45146: EMPTY
45147: LIST
45148: LIST
45149: PUSH
45150: LD_INT 1
45152: NEG
45153: PUSH
45154: LD_INT 0
45156: PUSH
45157: EMPTY
45158: LIST
45159: LIST
45160: PUSH
45161: LD_INT 1
45163: NEG
45164: PUSH
45165: LD_INT 1
45167: NEG
45168: PUSH
45169: EMPTY
45170: LIST
45171: LIST
45172: PUSH
45173: LD_INT 1
45175: NEG
45176: PUSH
45177: LD_INT 2
45179: NEG
45180: PUSH
45181: EMPTY
45182: LIST
45183: LIST
45184: PUSH
45185: LD_INT 0
45187: PUSH
45188: LD_INT 2
45190: NEG
45191: PUSH
45192: EMPTY
45193: LIST
45194: LIST
45195: PUSH
45196: LD_INT 1
45198: PUSH
45199: LD_INT 1
45201: NEG
45202: PUSH
45203: EMPTY
45204: LIST
45205: LIST
45206: PUSH
45207: LD_INT 2
45209: PUSH
45210: LD_INT 0
45212: PUSH
45213: EMPTY
45214: LIST
45215: LIST
45216: PUSH
45217: LD_INT 2
45219: PUSH
45220: LD_INT 1
45222: PUSH
45223: EMPTY
45224: LIST
45225: LIST
45226: PUSH
45227: LD_INT 2
45229: PUSH
45230: LD_INT 2
45232: PUSH
45233: EMPTY
45234: LIST
45235: LIST
45236: PUSH
45237: LD_INT 1
45239: PUSH
45240: LD_INT 2
45242: PUSH
45243: EMPTY
45244: LIST
45245: LIST
45246: PUSH
45247: LD_INT 0
45249: PUSH
45250: LD_INT 2
45252: PUSH
45253: EMPTY
45254: LIST
45255: LIST
45256: PUSH
45257: LD_INT 1
45259: NEG
45260: PUSH
45261: LD_INT 1
45263: PUSH
45264: EMPTY
45265: LIST
45266: LIST
45267: PUSH
45268: LD_INT 2
45270: NEG
45271: PUSH
45272: LD_INT 0
45274: PUSH
45275: EMPTY
45276: LIST
45277: LIST
45278: PUSH
45279: LD_INT 2
45281: NEG
45282: PUSH
45283: LD_INT 1
45285: NEG
45286: PUSH
45287: EMPTY
45288: LIST
45289: LIST
45290: PUSH
45291: LD_INT 2
45293: NEG
45294: PUSH
45295: LD_INT 2
45297: NEG
45298: PUSH
45299: EMPTY
45300: LIST
45301: LIST
45302: PUSH
45303: EMPTY
45304: LIST
45305: LIST
45306: LIST
45307: LIST
45308: LIST
45309: LIST
45310: LIST
45311: LIST
45312: LIST
45313: LIST
45314: LIST
45315: LIST
45316: LIST
45317: LIST
45318: LIST
45319: LIST
45320: LIST
45321: LIST
45322: LIST
45323: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45324: LD_ADDR_VAR 0 21
45328: PUSH
45329: LD_INT 0
45331: PUSH
45332: LD_INT 0
45334: PUSH
45335: EMPTY
45336: LIST
45337: LIST
45338: PUSH
45339: LD_INT 0
45341: PUSH
45342: LD_INT 1
45344: NEG
45345: PUSH
45346: EMPTY
45347: LIST
45348: LIST
45349: PUSH
45350: LD_INT 1
45352: PUSH
45353: LD_INT 0
45355: PUSH
45356: EMPTY
45357: LIST
45358: LIST
45359: PUSH
45360: LD_INT 1
45362: PUSH
45363: LD_INT 1
45365: PUSH
45366: EMPTY
45367: LIST
45368: LIST
45369: PUSH
45370: LD_INT 0
45372: PUSH
45373: LD_INT 1
45375: PUSH
45376: EMPTY
45377: LIST
45378: LIST
45379: PUSH
45380: LD_INT 1
45382: NEG
45383: PUSH
45384: LD_INT 0
45386: PUSH
45387: EMPTY
45388: LIST
45389: LIST
45390: PUSH
45391: LD_INT 1
45393: NEG
45394: PUSH
45395: LD_INT 1
45397: NEG
45398: PUSH
45399: EMPTY
45400: LIST
45401: LIST
45402: PUSH
45403: LD_INT 1
45405: NEG
45406: PUSH
45407: LD_INT 2
45409: NEG
45410: PUSH
45411: EMPTY
45412: LIST
45413: LIST
45414: PUSH
45415: LD_INT 0
45417: PUSH
45418: LD_INT 2
45420: NEG
45421: PUSH
45422: EMPTY
45423: LIST
45424: LIST
45425: PUSH
45426: LD_INT 1
45428: PUSH
45429: LD_INT 1
45431: NEG
45432: PUSH
45433: EMPTY
45434: LIST
45435: LIST
45436: PUSH
45437: LD_INT 2
45439: PUSH
45440: LD_INT 0
45442: PUSH
45443: EMPTY
45444: LIST
45445: LIST
45446: PUSH
45447: LD_INT 2
45449: PUSH
45450: LD_INT 1
45452: PUSH
45453: EMPTY
45454: LIST
45455: LIST
45456: PUSH
45457: LD_INT 2
45459: PUSH
45460: LD_INT 2
45462: PUSH
45463: EMPTY
45464: LIST
45465: LIST
45466: PUSH
45467: LD_INT 1
45469: PUSH
45470: LD_INT 2
45472: PUSH
45473: EMPTY
45474: LIST
45475: LIST
45476: PUSH
45477: LD_INT 0
45479: PUSH
45480: LD_INT 2
45482: PUSH
45483: EMPTY
45484: LIST
45485: LIST
45486: PUSH
45487: LD_INT 1
45489: NEG
45490: PUSH
45491: LD_INT 1
45493: PUSH
45494: EMPTY
45495: LIST
45496: LIST
45497: PUSH
45498: LD_INT 2
45500: NEG
45501: PUSH
45502: LD_INT 0
45504: PUSH
45505: EMPTY
45506: LIST
45507: LIST
45508: PUSH
45509: LD_INT 2
45511: NEG
45512: PUSH
45513: LD_INT 1
45515: NEG
45516: PUSH
45517: EMPTY
45518: LIST
45519: LIST
45520: PUSH
45521: LD_INT 2
45523: NEG
45524: PUSH
45525: LD_INT 2
45527: NEG
45528: PUSH
45529: EMPTY
45530: LIST
45531: LIST
45532: PUSH
45533: EMPTY
45534: LIST
45535: LIST
45536: LIST
45537: LIST
45538: LIST
45539: LIST
45540: LIST
45541: LIST
45542: LIST
45543: LIST
45544: LIST
45545: LIST
45546: LIST
45547: LIST
45548: LIST
45549: LIST
45550: LIST
45551: LIST
45552: LIST
45553: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45554: LD_ADDR_VAR 0 22
45558: PUSH
45559: LD_INT 0
45561: PUSH
45562: LD_INT 0
45564: PUSH
45565: EMPTY
45566: LIST
45567: LIST
45568: PUSH
45569: LD_INT 0
45571: PUSH
45572: LD_INT 1
45574: NEG
45575: PUSH
45576: EMPTY
45577: LIST
45578: LIST
45579: PUSH
45580: LD_INT 1
45582: PUSH
45583: LD_INT 0
45585: PUSH
45586: EMPTY
45587: LIST
45588: LIST
45589: PUSH
45590: LD_INT 1
45592: PUSH
45593: LD_INT 1
45595: PUSH
45596: EMPTY
45597: LIST
45598: LIST
45599: PUSH
45600: LD_INT 0
45602: PUSH
45603: LD_INT 1
45605: PUSH
45606: EMPTY
45607: LIST
45608: LIST
45609: PUSH
45610: LD_INT 1
45612: NEG
45613: PUSH
45614: LD_INT 0
45616: PUSH
45617: EMPTY
45618: LIST
45619: LIST
45620: PUSH
45621: LD_INT 1
45623: NEG
45624: PUSH
45625: LD_INT 1
45627: NEG
45628: PUSH
45629: EMPTY
45630: LIST
45631: LIST
45632: PUSH
45633: LD_INT 1
45635: NEG
45636: PUSH
45637: LD_INT 2
45639: NEG
45640: PUSH
45641: EMPTY
45642: LIST
45643: LIST
45644: PUSH
45645: LD_INT 0
45647: PUSH
45648: LD_INT 2
45650: NEG
45651: PUSH
45652: EMPTY
45653: LIST
45654: LIST
45655: PUSH
45656: LD_INT 1
45658: PUSH
45659: LD_INT 1
45661: NEG
45662: PUSH
45663: EMPTY
45664: LIST
45665: LIST
45666: PUSH
45667: LD_INT 2
45669: PUSH
45670: LD_INT 0
45672: PUSH
45673: EMPTY
45674: LIST
45675: LIST
45676: PUSH
45677: LD_INT 2
45679: PUSH
45680: LD_INT 1
45682: PUSH
45683: EMPTY
45684: LIST
45685: LIST
45686: PUSH
45687: LD_INT 2
45689: PUSH
45690: LD_INT 2
45692: PUSH
45693: EMPTY
45694: LIST
45695: LIST
45696: PUSH
45697: LD_INT 1
45699: PUSH
45700: LD_INT 2
45702: PUSH
45703: EMPTY
45704: LIST
45705: LIST
45706: PUSH
45707: LD_INT 0
45709: PUSH
45710: LD_INT 2
45712: PUSH
45713: EMPTY
45714: LIST
45715: LIST
45716: PUSH
45717: LD_INT 1
45719: NEG
45720: PUSH
45721: LD_INT 1
45723: PUSH
45724: EMPTY
45725: LIST
45726: LIST
45727: PUSH
45728: LD_INT 2
45730: NEG
45731: PUSH
45732: LD_INT 0
45734: PUSH
45735: EMPTY
45736: LIST
45737: LIST
45738: PUSH
45739: LD_INT 2
45741: NEG
45742: PUSH
45743: LD_INT 1
45745: NEG
45746: PUSH
45747: EMPTY
45748: LIST
45749: LIST
45750: PUSH
45751: LD_INT 2
45753: NEG
45754: PUSH
45755: LD_INT 2
45757: NEG
45758: PUSH
45759: EMPTY
45760: LIST
45761: LIST
45762: PUSH
45763: EMPTY
45764: LIST
45765: LIST
45766: LIST
45767: LIST
45768: LIST
45769: LIST
45770: LIST
45771: LIST
45772: LIST
45773: LIST
45774: LIST
45775: LIST
45776: LIST
45777: LIST
45778: LIST
45779: LIST
45780: LIST
45781: LIST
45782: LIST
45783: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
45784: LD_ADDR_VAR 0 23
45788: PUSH
45789: LD_INT 0
45791: PUSH
45792: LD_INT 0
45794: PUSH
45795: EMPTY
45796: LIST
45797: LIST
45798: PUSH
45799: LD_INT 0
45801: PUSH
45802: LD_INT 1
45804: NEG
45805: PUSH
45806: EMPTY
45807: LIST
45808: LIST
45809: PUSH
45810: LD_INT 1
45812: PUSH
45813: LD_INT 0
45815: PUSH
45816: EMPTY
45817: LIST
45818: LIST
45819: PUSH
45820: LD_INT 1
45822: PUSH
45823: LD_INT 1
45825: PUSH
45826: EMPTY
45827: LIST
45828: LIST
45829: PUSH
45830: LD_INT 0
45832: PUSH
45833: LD_INT 1
45835: PUSH
45836: EMPTY
45837: LIST
45838: LIST
45839: PUSH
45840: LD_INT 1
45842: NEG
45843: PUSH
45844: LD_INT 0
45846: PUSH
45847: EMPTY
45848: LIST
45849: LIST
45850: PUSH
45851: LD_INT 1
45853: NEG
45854: PUSH
45855: LD_INT 1
45857: NEG
45858: PUSH
45859: EMPTY
45860: LIST
45861: LIST
45862: PUSH
45863: LD_INT 1
45865: NEG
45866: PUSH
45867: LD_INT 2
45869: NEG
45870: PUSH
45871: EMPTY
45872: LIST
45873: LIST
45874: PUSH
45875: LD_INT 0
45877: PUSH
45878: LD_INT 2
45880: NEG
45881: PUSH
45882: EMPTY
45883: LIST
45884: LIST
45885: PUSH
45886: LD_INT 1
45888: PUSH
45889: LD_INT 1
45891: NEG
45892: PUSH
45893: EMPTY
45894: LIST
45895: LIST
45896: PUSH
45897: LD_INT 2
45899: PUSH
45900: LD_INT 0
45902: PUSH
45903: EMPTY
45904: LIST
45905: LIST
45906: PUSH
45907: LD_INT 2
45909: PUSH
45910: LD_INT 1
45912: PUSH
45913: EMPTY
45914: LIST
45915: LIST
45916: PUSH
45917: LD_INT 2
45919: PUSH
45920: LD_INT 2
45922: PUSH
45923: EMPTY
45924: LIST
45925: LIST
45926: PUSH
45927: LD_INT 1
45929: PUSH
45930: LD_INT 2
45932: PUSH
45933: EMPTY
45934: LIST
45935: LIST
45936: PUSH
45937: LD_INT 0
45939: PUSH
45940: LD_INT 2
45942: PUSH
45943: EMPTY
45944: LIST
45945: LIST
45946: PUSH
45947: LD_INT 1
45949: NEG
45950: PUSH
45951: LD_INT 1
45953: PUSH
45954: EMPTY
45955: LIST
45956: LIST
45957: PUSH
45958: LD_INT 2
45960: NEG
45961: PUSH
45962: LD_INT 0
45964: PUSH
45965: EMPTY
45966: LIST
45967: LIST
45968: PUSH
45969: LD_INT 2
45971: NEG
45972: PUSH
45973: LD_INT 1
45975: NEG
45976: PUSH
45977: EMPTY
45978: LIST
45979: LIST
45980: PUSH
45981: LD_INT 2
45983: NEG
45984: PUSH
45985: LD_INT 2
45987: NEG
45988: PUSH
45989: EMPTY
45990: LIST
45991: LIST
45992: PUSH
45993: LD_INT 2
45995: NEG
45996: PUSH
45997: LD_INT 3
45999: NEG
46000: PUSH
46001: EMPTY
46002: LIST
46003: LIST
46004: PUSH
46005: LD_INT 1
46007: NEG
46008: PUSH
46009: LD_INT 3
46011: NEG
46012: PUSH
46013: EMPTY
46014: LIST
46015: LIST
46016: PUSH
46017: LD_INT 1
46019: PUSH
46020: LD_INT 2
46022: NEG
46023: PUSH
46024: EMPTY
46025: LIST
46026: LIST
46027: PUSH
46028: LD_INT 2
46030: PUSH
46031: LD_INT 1
46033: NEG
46034: PUSH
46035: EMPTY
46036: LIST
46037: LIST
46038: PUSH
46039: EMPTY
46040: LIST
46041: LIST
46042: LIST
46043: LIST
46044: LIST
46045: LIST
46046: LIST
46047: LIST
46048: LIST
46049: LIST
46050: LIST
46051: LIST
46052: LIST
46053: LIST
46054: LIST
46055: LIST
46056: LIST
46057: LIST
46058: LIST
46059: LIST
46060: LIST
46061: LIST
46062: LIST
46063: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
46064: LD_ADDR_VAR 0 24
46068: PUSH
46069: LD_INT 0
46071: PUSH
46072: LD_INT 0
46074: PUSH
46075: EMPTY
46076: LIST
46077: LIST
46078: PUSH
46079: LD_INT 0
46081: PUSH
46082: LD_INT 1
46084: NEG
46085: PUSH
46086: EMPTY
46087: LIST
46088: LIST
46089: PUSH
46090: LD_INT 1
46092: PUSH
46093: LD_INT 0
46095: PUSH
46096: EMPTY
46097: LIST
46098: LIST
46099: PUSH
46100: LD_INT 1
46102: PUSH
46103: LD_INT 1
46105: PUSH
46106: EMPTY
46107: LIST
46108: LIST
46109: PUSH
46110: LD_INT 0
46112: PUSH
46113: LD_INT 1
46115: PUSH
46116: EMPTY
46117: LIST
46118: LIST
46119: PUSH
46120: LD_INT 1
46122: NEG
46123: PUSH
46124: LD_INT 0
46126: PUSH
46127: EMPTY
46128: LIST
46129: LIST
46130: PUSH
46131: LD_INT 1
46133: NEG
46134: PUSH
46135: LD_INT 1
46137: NEG
46138: PUSH
46139: EMPTY
46140: LIST
46141: LIST
46142: PUSH
46143: LD_INT 1
46145: NEG
46146: PUSH
46147: LD_INT 2
46149: NEG
46150: PUSH
46151: EMPTY
46152: LIST
46153: LIST
46154: PUSH
46155: LD_INT 0
46157: PUSH
46158: LD_INT 2
46160: NEG
46161: PUSH
46162: EMPTY
46163: LIST
46164: LIST
46165: PUSH
46166: LD_INT 1
46168: PUSH
46169: LD_INT 1
46171: NEG
46172: PUSH
46173: EMPTY
46174: LIST
46175: LIST
46176: PUSH
46177: LD_INT 2
46179: PUSH
46180: LD_INT 0
46182: PUSH
46183: EMPTY
46184: LIST
46185: LIST
46186: PUSH
46187: LD_INT 2
46189: PUSH
46190: LD_INT 1
46192: PUSH
46193: EMPTY
46194: LIST
46195: LIST
46196: PUSH
46197: LD_INT 2
46199: PUSH
46200: LD_INT 2
46202: PUSH
46203: EMPTY
46204: LIST
46205: LIST
46206: PUSH
46207: LD_INT 1
46209: PUSH
46210: LD_INT 2
46212: PUSH
46213: EMPTY
46214: LIST
46215: LIST
46216: PUSH
46217: LD_INT 0
46219: PUSH
46220: LD_INT 2
46222: PUSH
46223: EMPTY
46224: LIST
46225: LIST
46226: PUSH
46227: LD_INT 1
46229: NEG
46230: PUSH
46231: LD_INT 1
46233: PUSH
46234: EMPTY
46235: LIST
46236: LIST
46237: PUSH
46238: LD_INT 2
46240: NEG
46241: PUSH
46242: LD_INT 0
46244: PUSH
46245: EMPTY
46246: LIST
46247: LIST
46248: PUSH
46249: LD_INT 2
46251: NEG
46252: PUSH
46253: LD_INT 1
46255: NEG
46256: PUSH
46257: EMPTY
46258: LIST
46259: LIST
46260: PUSH
46261: LD_INT 2
46263: NEG
46264: PUSH
46265: LD_INT 2
46267: NEG
46268: PUSH
46269: EMPTY
46270: LIST
46271: LIST
46272: PUSH
46273: LD_INT 1
46275: PUSH
46276: LD_INT 2
46278: NEG
46279: PUSH
46280: EMPTY
46281: LIST
46282: LIST
46283: PUSH
46284: LD_INT 2
46286: PUSH
46287: LD_INT 1
46289: NEG
46290: PUSH
46291: EMPTY
46292: LIST
46293: LIST
46294: PUSH
46295: LD_INT 3
46297: PUSH
46298: LD_INT 1
46300: PUSH
46301: EMPTY
46302: LIST
46303: LIST
46304: PUSH
46305: LD_INT 3
46307: PUSH
46308: LD_INT 2
46310: PUSH
46311: EMPTY
46312: LIST
46313: LIST
46314: PUSH
46315: EMPTY
46316: LIST
46317: LIST
46318: LIST
46319: LIST
46320: LIST
46321: LIST
46322: LIST
46323: LIST
46324: LIST
46325: LIST
46326: LIST
46327: LIST
46328: LIST
46329: LIST
46330: LIST
46331: LIST
46332: LIST
46333: LIST
46334: LIST
46335: LIST
46336: LIST
46337: LIST
46338: LIST
46339: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
46340: LD_ADDR_VAR 0 25
46344: PUSH
46345: LD_INT 0
46347: PUSH
46348: LD_INT 0
46350: PUSH
46351: EMPTY
46352: LIST
46353: LIST
46354: PUSH
46355: LD_INT 0
46357: PUSH
46358: LD_INT 1
46360: NEG
46361: PUSH
46362: EMPTY
46363: LIST
46364: LIST
46365: PUSH
46366: LD_INT 1
46368: PUSH
46369: LD_INT 0
46371: PUSH
46372: EMPTY
46373: LIST
46374: LIST
46375: PUSH
46376: LD_INT 1
46378: PUSH
46379: LD_INT 1
46381: PUSH
46382: EMPTY
46383: LIST
46384: LIST
46385: PUSH
46386: LD_INT 0
46388: PUSH
46389: LD_INT 1
46391: PUSH
46392: EMPTY
46393: LIST
46394: LIST
46395: PUSH
46396: LD_INT 1
46398: NEG
46399: PUSH
46400: LD_INT 0
46402: PUSH
46403: EMPTY
46404: LIST
46405: LIST
46406: PUSH
46407: LD_INT 1
46409: NEG
46410: PUSH
46411: LD_INT 1
46413: NEG
46414: PUSH
46415: EMPTY
46416: LIST
46417: LIST
46418: PUSH
46419: LD_INT 1
46421: NEG
46422: PUSH
46423: LD_INT 2
46425: NEG
46426: PUSH
46427: EMPTY
46428: LIST
46429: LIST
46430: PUSH
46431: LD_INT 0
46433: PUSH
46434: LD_INT 2
46436: NEG
46437: PUSH
46438: EMPTY
46439: LIST
46440: LIST
46441: PUSH
46442: LD_INT 1
46444: PUSH
46445: LD_INT 1
46447: NEG
46448: PUSH
46449: EMPTY
46450: LIST
46451: LIST
46452: PUSH
46453: LD_INT 2
46455: PUSH
46456: LD_INT 0
46458: PUSH
46459: EMPTY
46460: LIST
46461: LIST
46462: PUSH
46463: LD_INT 2
46465: PUSH
46466: LD_INT 1
46468: PUSH
46469: EMPTY
46470: LIST
46471: LIST
46472: PUSH
46473: LD_INT 2
46475: PUSH
46476: LD_INT 2
46478: PUSH
46479: EMPTY
46480: LIST
46481: LIST
46482: PUSH
46483: LD_INT 1
46485: PUSH
46486: LD_INT 2
46488: PUSH
46489: EMPTY
46490: LIST
46491: LIST
46492: PUSH
46493: LD_INT 0
46495: PUSH
46496: LD_INT 2
46498: PUSH
46499: EMPTY
46500: LIST
46501: LIST
46502: PUSH
46503: LD_INT 1
46505: NEG
46506: PUSH
46507: LD_INT 1
46509: PUSH
46510: EMPTY
46511: LIST
46512: LIST
46513: PUSH
46514: LD_INT 2
46516: NEG
46517: PUSH
46518: LD_INT 0
46520: PUSH
46521: EMPTY
46522: LIST
46523: LIST
46524: PUSH
46525: LD_INT 2
46527: NEG
46528: PUSH
46529: LD_INT 1
46531: NEG
46532: PUSH
46533: EMPTY
46534: LIST
46535: LIST
46536: PUSH
46537: LD_INT 2
46539: NEG
46540: PUSH
46541: LD_INT 2
46543: NEG
46544: PUSH
46545: EMPTY
46546: LIST
46547: LIST
46548: PUSH
46549: LD_INT 3
46551: PUSH
46552: LD_INT 1
46554: PUSH
46555: EMPTY
46556: LIST
46557: LIST
46558: PUSH
46559: LD_INT 3
46561: PUSH
46562: LD_INT 2
46564: PUSH
46565: EMPTY
46566: LIST
46567: LIST
46568: PUSH
46569: LD_INT 2
46571: PUSH
46572: LD_INT 3
46574: PUSH
46575: EMPTY
46576: LIST
46577: LIST
46578: PUSH
46579: LD_INT 1
46581: PUSH
46582: LD_INT 3
46584: PUSH
46585: EMPTY
46586: LIST
46587: LIST
46588: PUSH
46589: EMPTY
46590: LIST
46591: LIST
46592: LIST
46593: LIST
46594: LIST
46595: LIST
46596: LIST
46597: LIST
46598: LIST
46599: LIST
46600: LIST
46601: LIST
46602: LIST
46603: LIST
46604: LIST
46605: LIST
46606: LIST
46607: LIST
46608: LIST
46609: LIST
46610: LIST
46611: LIST
46612: LIST
46613: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
46614: LD_ADDR_VAR 0 26
46618: PUSH
46619: LD_INT 0
46621: PUSH
46622: LD_INT 0
46624: PUSH
46625: EMPTY
46626: LIST
46627: LIST
46628: PUSH
46629: LD_INT 0
46631: PUSH
46632: LD_INT 1
46634: NEG
46635: PUSH
46636: EMPTY
46637: LIST
46638: LIST
46639: PUSH
46640: LD_INT 1
46642: PUSH
46643: LD_INT 0
46645: PUSH
46646: EMPTY
46647: LIST
46648: LIST
46649: PUSH
46650: LD_INT 1
46652: PUSH
46653: LD_INT 1
46655: PUSH
46656: EMPTY
46657: LIST
46658: LIST
46659: PUSH
46660: LD_INT 0
46662: PUSH
46663: LD_INT 1
46665: PUSH
46666: EMPTY
46667: LIST
46668: LIST
46669: PUSH
46670: LD_INT 1
46672: NEG
46673: PUSH
46674: LD_INT 0
46676: PUSH
46677: EMPTY
46678: LIST
46679: LIST
46680: PUSH
46681: LD_INT 1
46683: NEG
46684: PUSH
46685: LD_INT 1
46687: NEG
46688: PUSH
46689: EMPTY
46690: LIST
46691: LIST
46692: PUSH
46693: LD_INT 1
46695: NEG
46696: PUSH
46697: LD_INT 2
46699: NEG
46700: PUSH
46701: EMPTY
46702: LIST
46703: LIST
46704: PUSH
46705: LD_INT 0
46707: PUSH
46708: LD_INT 2
46710: NEG
46711: PUSH
46712: EMPTY
46713: LIST
46714: LIST
46715: PUSH
46716: LD_INT 1
46718: PUSH
46719: LD_INT 1
46721: NEG
46722: PUSH
46723: EMPTY
46724: LIST
46725: LIST
46726: PUSH
46727: LD_INT 2
46729: PUSH
46730: LD_INT 0
46732: PUSH
46733: EMPTY
46734: LIST
46735: LIST
46736: PUSH
46737: LD_INT 2
46739: PUSH
46740: LD_INT 1
46742: PUSH
46743: EMPTY
46744: LIST
46745: LIST
46746: PUSH
46747: LD_INT 2
46749: PUSH
46750: LD_INT 2
46752: PUSH
46753: EMPTY
46754: LIST
46755: LIST
46756: PUSH
46757: LD_INT 1
46759: PUSH
46760: LD_INT 2
46762: PUSH
46763: EMPTY
46764: LIST
46765: LIST
46766: PUSH
46767: LD_INT 0
46769: PUSH
46770: LD_INT 2
46772: PUSH
46773: EMPTY
46774: LIST
46775: LIST
46776: PUSH
46777: LD_INT 1
46779: NEG
46780: PUSH
46781: LD_INT 1
46783: PUSH
46784: EMPTY
46785: LIST
46786: LIST
46787: PUSH
46788: LD_INT 2
46790: NEG
46791: PUSH
46792: LD_INT 0
46794: PUSH
46795: EMPTY
46796: LIST
46797: LIST
46798: PUSH
46799: LD_INT 2
46801: NEG
46802: PUSH
46803: LD_INT 1
46805: NEG
46806: PUSH
46807: EMPTY
46808: LIST
46809: LIST
46810: PUSH
46811: LD_INT 2
46813: NEG
46814: PUSH
46815: LD_INT 2
46817: NEG
46818: PUSH
46819: EMPTY
46820: LIST
46821: LIST
46822: PUSH
46823: LD_INT 2
46825: PUSH
46826: LD_INT 3
46828: PUSH
46829: EMPTY
46830: LIST
46831: LIST
46832: PUSH
46833: LD_INT 1
46835: PUSH
46836: LD_INT 3
46838: PUSH
46839: EMPTY
46840: LIST
46841: LIST
46842: PUSH
46843: LD_INT 1
46845: NEG
46846: PUSH
46847: LD_INT 2
46849: PUSH
46850: EMPTY
46851: LIST
46852: LIST
46853: PUSH
46854: LD_INT 2
46856: NEG
46857: PUSH
46858: LD_INT 1
46860: PUSH
46861: EMPTY
46862: LIST
46863: LIST
46864: PUSH
46865: EMPTY
46866: LIST
46867: LIST
46868: LIST
46869: LIST
46870: LIST
46871: LIST
46872: LIST
46873: LIST
46874: LIST
46875: LIST
46876: LIST
46877: LIST
46878: LIST
46879: LIST
46880: LIST
46881: LIST
46882: LIST
46883: LIST
46884: LIST
46885: LIST
46886: LIST
46887: LIST
46888: LIST
46889: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
46890: LD_ADDR_VAR 0 27
46894: PUSH
46895: LD_INT 0
46897: PUSH
46898: LD_INT 0
46900: PUSH
46901: EMPTY
46902: LIST
46903: LIST
46904: PUSH
46905: LD_INT 0
46907: PUSH
46908: LD_INT 1
46910: NEG
46911: PUSH
46912: EMPTY
46913: LIST
46914: LIST
46915: PUSH
46916: LD_INT 1
46918: PUSH
46919: LD_INT 0
46921: PUSH
46922: EMPTY
46923: LIST
46924: LIST
46925: PUSH
46926: LD_INT 1
46928: PUSH
46929: LD_INT 1
46931: PUSH
46932: EMPTY
46933: LIST
46934: LIST
46935: PUSH
46936: LD_INT 0
46938: PUSH
46939: LD_INT 1
46941: PUSH
46942: EMPTY
46943: LIST
46944: LIST
46945: PUSH
46946: LD_INT 1
46948: NEG
46949: PUSH
46950: LD_INT 0
46952: PUSH
46953: EMPTY
46954: LIST
46955: LIST
46956: PUSH
46957: LD_INT 1
46959: NEG
46960: PUSH
46961: LD_INT 1
46963: NEG
46964: PUSH
46965: EMPTY
46966: LIST
46967: LIST
46968: PUSH
46969: LD_INT 1
46971: NEG
46972: PUSH
46973: LD_INT 2
46975: NEG
46976: PUSH
46977: EMPTY
46978: LIST
46979: LIST
46980: PUSH
46981: LD_INT 0
46983: PUSH
46984: LD_INT 2
46986: NEG
46987: PUSH
46988: EMPTY
46989: LIST
46990: LIST
46991: PUSH
46992: LD_INT 1
46994: PUSH
46995: LD_INT 1
46997: NEG
46998: PUSH
46999: EMPTY
47000: LIST
47001: LIST
47002: PUSH
47003: LD_INT 2
47005: PUSH
47006: LD_INT 0
47008: PUSH
47009: EMPTY
47010: LIST
47011: LIST
47012: PUSH
47013: LD_INT 2
47015: PUSH
47016: LD_INT 1
47018: PUSH
47019: EMPTY
47020: LIST
47021: LIST
47022: PUSH
47023: LD_INT 2
47025: PUSH
47026: LD_INT 2
47028: PUSH
47029: EMPTY
47030: LIST
47031: LIST
47032: PUSH
47033: LD_INT 1
47035: PUSH
47036: LD_INT 2
47038: PUSH
47039: EMPTY
47040: LIST
47041: LIST
47042: PUSH
47043: LD_INT 0
47045: PUSH
47046: LD_INT 2
47048: PUSH
47049: EMPTY
47050: LIST
47051: LIST
47052: PUSH
47053: LD_INT 1
47055: NEG
47056: PUSH
47057: LD_INT 1
47059: PUSH
47060: EMPTY
47061: LIST
47062: LIST
47063: PUSH
47064: LD_INT 2
47066: NEG
47067: PUSH
47068: LD_INT 0
47070: PUSH
47071: EMPTY
47072: LIST
47073: LIST
47074: PUSH
47075: LD_INT 2
47077: NEG
47078: PUSH
47079: LD_INT 1
47081: NEG
47082: PUSH
47083: EMPTY
47084: LIST
47085: LIST
47086: PUSH
47087: LD_INT 2
47089: NEG
47090: PUSH
47091: LD_INT 2
47093: NEG
47094: PUSH
47095: EMPTY
47096: LIST
47097: LIST
47098: PUSH
47099: LD_INT 1
47101: NEG
47102: PUSH
47103: LD_INT 2
47105: PUSH
47106: EMPTY
47107: LIST
47108: LIST
47109: PUSH
47110: LD_INT 2
47112: NEG
47113: PUSH
47114: LD_INT 1
47116: PUSH
47117: EMPTY
47118: LIST
47119: LIST
47120: PUSH
47121: LD_INT 3
47123: NEG
47124: PUSH
47125: LD_INT 1
47127: NEG
47128: PUSH
47129: EMPTY
47130: LIST
47131: LIST
47132: PUSH
47133: LD_INT 3
47135: NEG
47136: PUSH
47137: LD_INT 2
47139: NEG
47140: PUSH
47141: EMPTY
47142: LIST
47143: LIST
47144: PUSH
47145: EMPTY
47146: LIST
47147: LIST
47148: LIST
47149: LIST
47150: LIST
47151: LIST
47152: LIST
47153: LIST
47154: LIST
47155: LIST
47156: LIST
47157: LIST
47158: LIST
47159: LIST
47160: LIST
47161: LIST
47162: LIST
47163: LIST
47164: LIST
47165: LIST
47166: LIST
47167: LIST
47168: LIST
47169: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
47170: LD_ADDR_VAR 0 28
47174: PUSH
47175: LD_INT 0
47177: PUSH
47178: LD_INT 0
47180: PUSH
47181: EMPTY
47182: LIST
47183: LIST
47184: PUSH
47185: LD_INT 0
47187: PUSH
47188: LD_INT 1
47190: NEG
47191: PUSH
47192: EMPTY
47193: LIST
47194: LIST
47195: PUSH
47196: LD_INT 1
47198: PUSH
47199: LD_INT 0
47201: PUSH
47202: EMPTY
47203: LIST
47204: LIST
47205: PUSH
47206: LD_INT 1
47208: PUSH
47209: LD_INT 1
47211: PUSH
47212: EMPTY
47213: LIST
47214: LIST
47215: PUSH
47216: LD_INT 0
47218: PUSH
47219: LD_INT 1
47221: PUSH
47222: EMPTY
47223: LIST
47224: LIST
47225: PUSH
47226: LD_INT 1
47228: NEG
47229: PUSH
47230: LD_INT 0
47232: PUSH
47233: EMPTY
47234: LIST
47235: LIST
47236: PUSH
47237: LD_INT 1
47239: NEG
47240: PUSH
47241: LD_INT 1
47243: NEG
47244: PUSH
47245: EMPTY
47246: LIST
47247: LIST
47248: PUSH
47249: LD_INT 1
47251: NEG
47252: PUSH
47253: LD_INT 2
47255: NEG
47256: PUSH
47257: EMPTY
47258: LIST
47259: LIST
47260: PUSH
47261: LD_INT 0
47263: PUSH
47264: LD_INT 2
47266: NEG
47267: PUSH
47268: EMPTY
47269: LIST
47270: LIST
47271: PUSH
47272: LD_INT 1
47274: PUSH
47275: LD_INT 1
47277: NEG
47278: PUSH
47279: EMPTY
47280: LIST
47281: LIST
47282: PUSH
47283: LD_INT 2
47285: PUSH
47286: LD_INT 0
47288: PUSH
47289: EMPTY
47290: LIST
47291: LIST
47292: PUSH
47293: LD_INT 2
47295: PUSH
47296: LD_INT 1
47298: PUSH
47299: EMPTY
47300: LIST
47301: LIST
47302: PUSH
47303: LD_INT 2
47305: PUSH
47306: LD_INT 2
47308: PUSH
47309: EMPTY
47310: LIST
47311: LIST
47312: PUSH
47313: LD_INT 1
47315: PUSH
47316: LD_INT 2
47318: PUSH
47319: EMPTY
47320: LIST
47321: LIST
47322: PUSH
47323: LD_INT 0
47325: PUSH
47326: LD_INT 2
47328: PUSH
47329: EMPTY
47330: LIST
47331: LIST
47332: PUSH
47333: LD_INT 1
47335: NEG
47336: PUSH
47337: LD_INT 1
47339: PUSH
47340: EMPTY
47341: LIST
47342: LIST
47343: PUSH
47344: LD_INT 2
47346: NEG
47347: PUSH
47348: LD_INT 0
47350: PUSH
47351: EMPTY
47352: LIST
47353: LIST
47354: PUSH
47355: LD_INT 2
47357: NEG
47358: PUSH
47359: LD_INT 1
47361: NEG
47362: PUSH
47363: EMPTY
47364: LIST
47365: LIST
47366: PUSH
47367: LD_INT 2
47369: NEG
47370: PUSH
47371: LD_INT 2
47373: NEG
47374: PUSH
47375: EMPTY
47376: LIST
47377: LIST
47378: PUSH
47379: LD_INT 2
47381: NEG
47382: PUSH
47383: LD_INT 3
47385: NEG
47386: PUSH
47387: EMPTY
47388: LIST
47389: LIST
47390: PUSH
47391: LD_INT 1
47393: NEG
47394: PUSH
47395: LD_INT 3
47397: NEG
47398: PUSH
47399: EMPTY
47400: LIST
47401: LIST
47402: PUSH
47403: LD_INT 3
47405: NEG
47406: PUSH
47407: LD_INT 1
47409: NEG
47410: PUSH
47411: EMPTY
47412: LIST
47413: LIST
47414: PUSH
47415: LD_INT 3
47417: NEG
47418: PUSH
47419: LD_INT 2
47421: NEG
47422: PUSH
47423: EMPTY
47424: LIST
47425: LIST
47426: PUSH
47427: EMPTY
47428: LIST
47429: LIST
47430: LIST
47431: LIST
47432: LIST
47433: LIST
47434: LIST
47435: LIST
47436: LIST
47437: LIST
47438: LIST
47439: LIST
47440: LIST
47441: LIST
47442: LIST
47443: LIST
47444: LIST
47445: LIST
47446: LIST
47447: LIST
47448: LIST
47449: LIST
47450: LIST
47451: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
47452: LD_ADDR_VAR 0 29
47456: PUSH
47457: LD_INT 0
47459: PUSH
47460: LD_INT 0
47462: PUSH
47463: EMPTY
47464: LIST
47465: LIST
47466: PUSH
47467: LD_INT 0
47469: PUSH
47470: LD_INT 1
47472: NEG
47473: PUSH
47474: EMPTY
47475: LIST
47476: LIST
47477: PUSH
47478: LD_INT 1
47480: PUSH
47481: LD_INT 0
47483: PUSH
47484: EMPTY
47485: LIST
47486: LIST
47487: PUSH
47488: LD_INT 1
47490: PUSH
47491: LD_INT 1
47493: PUSH
47494: EMPTY
47495: LIST
47496: LIST
47497: PUSH
47498: LD_INT 0
47500: PUSH
47501: LD_INT 1
47503: PUSH
47504: EMPTY
47505: LIST
47506: LIST
47507: PUSH
47508: LD_INT 1
47510: NEG
47511: PUSH
47512: LD_INT 0
47514: PUSH
47515: EMPTY
47516: LIST
47517: LIST
47518: PUSH
47519: LD_INT 1
47521: NEG
47522: PUSH
47523: LD_INT 1
47525: NEG
47526: PUSH
47527: EMPTY
47528: LIST
47529: LIST
47530: PUSH
47531: LD_INT 1
47533: NEG
47534: PUSH
47535: LD_INT 2
47537: NEG
47538: PUSH
47539: EMPTY
47540: LIST
47541: LIST
47542: PUSH
47543: LD_INT 0
47545: PUSH
47546: LD_INT 2
47548: NEG
47549: PUSH
47550: EMPTY
47551: LIST
47552: LIST
47553: PUSH
47554: LD_INT 1
47556: PUSH
47557: LD_INT 1
47559: NEG
47560: PUSH
47561: EMPTY
47562: LIST
47563: LIST
47564: PUSH
47565: LD_INT 2
47567: PUSH
47568: LD_INT 0
47570: PUSH
47571: EMPTY
47572: LIST
47573: LIST
47574: PUSH
47575: LD_INT 2
47577: PUSH
47578: LD_INT 1
47580: PUSH
47581: EMPTY
47582: LIST
47583: LIST
47584: PUSH
47585: LD_INT 1
47587: PUSH
47588: LD_INT 2
47590: PUSH
47591: EMPTY
47592: LIST
47593: LIST
47594: PUSH
47595: LD_INT 0
47597: PUSH
47598: LD_INT 2
47600: PUSH
47601: EMPTY
47602: LIST
47603: LIST
47604: PUSH
47605: LD_INT 1
47607: NEG
47608: PUSH
47609: LD_INT 1
47611: PUSH
47612: EMPTY
47613: LIST
47614: LIST
47615: PUSH
47616: LD_INT 2
47618: NEG
47619: PUSH
47620: LD_INT 1
47622: NEG
47623: PUSH
47624: EMPTY
47625: LIST
47626: LIST
47627: PUSH
47628: LD_INT 2
47630: NEG
47631: PUSH
47632: LD_INT 2
47634: NEG
47635: PUSH
47636: EMPTY
47637: LIST
47638: LIST
47639: PUSH
47640: LD_INT 2
47642: NEG
47643: PUSH
47644: LD_INT 3
47646: NEG
47647: PUSH
47648: EMPTY
47649: LIST
47650: LIST
47651: PUSH
47652: LD_INT 2
47654: PUSH
47655: LD_INT 1
47657: NEG
47658: PUSH
47659: EMPTY
47660: LIST
47661: LIST
47662: PUSH
47663: LD_INT 3
47665: PUSH
47666: LD_INT 1
47668: PUSH
47669: EMPTY
47670: LIST
47671: LIST
47672: PUSH
47673: LD_INT 1
47675: PUSH
47676: LD_INT 3
47678: PUSH
47679: EMPTY
47680: LIST
47681: LIST
47682: PUSH
47683: LD_INT 1
47685: NEG
47686: PUSH
47687: LD_INT 2
47689: PUSH
47690: EMPTY
47691: LIST
47692: LIST
47693: PUSH
47694: LD_INT 3
47696: NEG
47697: PUSH
47698: LD_INT 2
47700: NEG
47701: PUSH
47702: EMPTY
47703: LIST
47704: LIST
47705: PUSH
47706: EMPTY
47707: LIST
47708: LIST
47709: LIST
47710: LIST
47711: LIST
47712: LIST
47713: LIST
47714: LIST
47715: LIST
47716: LIST
47717: LIST
47718: LIST
47719: LIST
47720: LIST
47721: LIST
47722: LIST
47723: LIST
47724: LIST
47725: LIST
47726: LIST
47727: LIST
47728: LIST
47729: LIST
47730: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
47731: LD_ADDR_VAR 0 30
47735: PUSH
47736: LD_INT 0
47738: PUSH
47739: LD_INT 0
47741: PUSH
47742: EMPTY
47743: LIST
47744: LIST
47745: PUSH
47746: LD_INT 0
47748: PUSH
47749: LD_INT 1
47751: NEG
47752: PUSH
47753: EMPTY
47754: LIST
47755: LIST
47756: PUSH
47757: LD_INT 1
47759: PUSH
47760: LD_INT 0
47762: PUSH
47763: EMPTY
47764: LIST
47765: LIST
47766: PUSH
47767: LD_INT 1
47769: PUSH
47770: LD_INT 1
47772: PUSH
47773: EMPTY
47774: LIST
47775: LIST
47776: PUSH
47777: LD_INT 0
47779: PUSH
47780: LD_INT 1
47782: PUSH
47783: EMPTY
47784: LIST
47785: LIST
47786: PUSH
47787: LD_INT 1
47789: NEG
47790: PUSH
47791: LD_INT 0
47793: PUSH
47794: EMPTY
47795: LIST
47796: LIST
47797: PUSH
47798: LD_INT 1
47800: NEG
47801: PUSH
47802: LD_INT 1
47804: NEG
47805: PUSH
47806: EMPTY
47807: LIST
47808: LIST
47809: PUSH
47810: LD_INT 1
47812: NEG
47813: PUSH
47814: LD_INT 2
47816: NEG
47817: PUSH
47818: EMPTY
47819: LIST
47820: LIST
47821: PUSH
47822: LD_INT 0
47824: PUSH
47825: LD_INT 2
47827: NEG
47828: PUSH
47829: EMPTY
47830: LIST
47831: LIST
47832: PUSH
47833: LD_INT 1
47835: PUSH
47836: LD_INT 1
47838: NEG
47839: PUSH
47840: EMPTY
47841: LIST
47842: LIST
47843: PUSH
47844: LD_INT 2
47846: PUSH
47847: LD_INT 0
47849: PUSH
47850: EMPTY
47851: LIST
47852: LIST
47853: PUSH
47854: LD_INT 2
47856: PUSH
47857: LD_INT 1
47859: PUSH
47860: EMPTY
47861: LIST
47862: LIST
47863: PUSH
47864: LD_INT 2
47866: PUSH
47867: LD_INT 2
47869: PUSH
47870: EMPTY
47871: LIST
47872: LIST
47873: PUSH
47874: LD_INT 1
47876: PUSH
47877: LD_INT 2
47879: PUSH
47880: EMPTY
47881: LIST
47882: LIST
47883: PUSH
47884: LD_INT 1
47886: NEG
47887: PUSH
47888: LD_INT 1
47890: PUSH
47891: EMPTY
47892: LIST
47893: LIST
47894: PUSH
47895: LD_INT 2
47897: NEG
47898: PUSH
47899: LD_INT 0
47901: PUSH
47902: EMPTY
47903: LIST
47904: LIST
47905: PUSH
47906: LD_INT 2
47908: NEG
47909: PUSH
47910: LD_INT 1
47912: NEG
47913: PUSH
47914: EMPTY
47915: LIST
47916: LIST
47917: PUSH
47918: LD_INT 1
47920: NEG
47921: PUSH
47922: LD_INT 3
47924: NEG
47925: PUSH
47926: EMPTY
47927: LIST
47928: LIST
47929: PUSH
47930: LD_INT 1
47932: PUSH
47933: LD_INT 2
47935: NEG
47936: PUSH
47937: EMPTY
47938: LIST
47939: LIST
47940: PUSH
47941: LD_INT 3
47943: PUSH
47944: LD_INT 2
47946: PUSH
47947: EMPTY
47948: LIST
47949: LIST
47950: PUSH
47951: LD_INT 2
47953: PUSH
47954: LD_INT 3
47956: PUSH
47957: EMPTY
47958: LIST
47959: LIST
47960: PUSH
47961: LD_INT 2
47963: NEG
47964: PUSH
47965: LD_INT 1
47967: PUSH
47968: EMPTY
47969: LIST
47970: LIST
47971: PUSH
47972: LD_INT 3
47974: NEG
47975: PUSH
47976: LD_INT 1
47978: NEG
47979: PUSH
47980: EMPTY
47981: LIST
47982: LIST
47983: PUSH
47984: EMPTY
47985: LIST
47986: LIST
47987: LIST
47988: LIST
47989: LIST
47990: LIST
47991: LIST
47992: LIST
47993: LIST
47994: LIST
47995: LIST
47996: LIST
47997: LIST
47998: LIST
47999: LIST
48000: LIST
48001: LIST
48002: LIST
48003: LIST
48004: LIST
48005: LIST
48006: LIST
48007: LIST
48008: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
48009: LD_ADDR_VAR 0 31
48013: PUSH
48014: LD_INT 0
48016: PUSH
48017: LD_INT 0
48019: PUSH
48020: EMPTY
48021: LIST
48022: LIST
48023: PUSH
48024: LD_INT 0
48026: PUSH
48027: LD_INT 1
48029: NEG
48030: PUSH
48031: EMPTY
48032: LIST
48033: LIST
48034: PUSH
48035: LD_INT 1
48037: PUSH
48038: LD_INT 0
48040: PUSH
48041: EMPTY
48042: LIST
48043: LIST
48044: PUSH
48045: LD_INT 1
48047: PUSH
48048: LD_INT 1
48050: PUSH
48051: EMPTY
48052: LIST
48053: LIST
48054: PUSH
48055: LD_INT 0
48057: PUSH
48058: LD_INT 1
48060: PUSH
48061: EMPTY
48062: LIST
48063: LIST
48064: PUSH
48065: LD_INT 1
48067: NEG
48068: PUSH
48069: LD_INT 0
48071: PUSH
48072: EMPTY
48073: LIST
48074: LIST
48075: PUSH
48076: LD_INT 1
48078: NEG
48079: PUSH
48080: LD_INT 1
48082: NEG
48083: PUSH
48084: EMPTY
48085: LIST
48086: LIST
48087: PUSH
48088: LD_INT 1
48090: NEG
48091: PUSH
48092: LD_INT 2
48094: NEG
48095: PUSH
48096: EMPTY
48097: LIST
48098: LIST
48099: PUSH
48100: LD_INT 1
48102: PUSH
48103: LD_INT 1
48105: NEG
48106: PUSH
48107: EMPTY
48108: LIST
48109: LIST
48110: PUSH
48111: LD_INT 2
48113: PUSH
48114: LD_INT 0
48116: PUSH
48117: EMPTY
48118: LIST
48119: LIST
48120: PUSH
48121: LD_INT 2
48123: PUSH
48124: LD_INT 1
48126: PUSH
48127: EMPTY
48128: LIST
48129: LIST
48130: PUSH
48131: LD_INT 2
48133: PUSH
48134: LD_INT 2
48136: PUSH
48137: EMPTY
48138: LIST
48139: LIST
48140: PUSH
48141: LD_INT 1
48143: PUSH
48144: LD_INT 2
48146: PUSH
48147: EMPTY
48148: LIST
48149: LIST
48150: PUSH
48151: LD_INT 0
48153: PUSH
48154: LD_INT 2
48156: PUSH
48157: EMPTY
48158: LIST
48159: LIST
48160: PUSH
48161: LD_INT 1
48163: NEG
48164: PUSH
48165: LD_INT 1
48167: PUSH
48168: EMPTY
48169: LIST
48170: LIST
48171: PUSH
48172: LD_INT 2
48174: NEG
48175: PUSH
48176: LD_INT 1
48178: NEG
48179: PUSH
48180: EMPTY
48181: LIST
48182: LIST
48183: PUSH
48184: LD_INT 2
48186: NEG
48187: PUSH
48188: LD_INT 2
48190: NEG
48191: PUSH
48192: EMPTY
48193: LIST
48194: LIST
48195: PUSH
48196: LD_INT 2
48198: NEG
48199: PUSH
48200: LD_INT 3
48202: NEG
48203: PUSH
48204: EMPTY
48205: LIST
48206: LIST
48207: PUSH
48208: LD_INT 2
48210: PUSH
48211: LD_INT 1
48213: NEG
48214: PUSH
48215: EMPTY
48216: LIST
48217: LIST
48218: PUSH
48219: LD_INT 3
48221: PUSH
48222: LD_INT 1
48224: PUSH
48225: EMPTY
48226: LIST
48227: LIST
48228: PUSH
48229: LD_INT 1
48231: PUSH
48232: LD_INT 3
48234: PUSH
48235: EMPTY
48236: LIST
48237: LIST
48238: PUSH
48239: LD_INT 1
48241: NEG
48242: PUSH
48243: LD_INT 2
48245: PUSH
48246: EMPTY
48247: LIST
48248: LIST
48249: PUSH
48250: LD_INT 3
48252: NEG
48253: PUSH
48254: LD_INT 2
48256: NEG
48257: PUSH
48258: EMPTY
48259: LIST
48260: LIST
48261: PUSH
48262: EMPTY
48263: LIST
48264: LIST
48265: LIST
48266: LIST
48267: LIST
48268: LIST
48269: LIST
48270: LIST
48271: LIST
48272: LIST
48273: LIST
48274: LIST
48275: LIST
48276: LIST
48277: LIST
48278: LIST
48279: LIST
48280: LIST
48281: LIST
48282: LIST
48283: LIST
48284: LIST
48285: LIST
48286: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48287: LD_ADDR_VAR 0 32
48291: PUSH
48292: LD_INT 0
48294: PUSH
48295: LD_INT 0
48297: PUSH
48298: EMPTY
48299: LIST
48300: LIST
48301: PUSH
48302: LD_INT 0
48304: PUSH
48305: LD_INT 1
48307: NEG
48308: PUSH
48309: EMPTY
48310: LIST
48311: LIST
48312: PUSH
48313: LD_INT 1
48315: PUSH
48316: LD_INT 0
48318: PUSH
48319: EMPTY
48320: LIST
48321: LIST
48322: PUSH
48323: LD_INT 1
48325: PUSH
48326: LD_INT 1
48328: PUSH
48329: EMPTY
48330: LIST
48331: LIST
48332: PUSH
48333: LD_INT 0
48335: PUSH
48336: LD_INT 1
48338: PUSH
48339: EMPTY
48340: LIST
48341: LIST
48342: PUSH
48343: LD_INT 1
48345: NEG
48346: PUSH
48347: LD_INT 0
48349: PUSH
48350: EMPTY
48351: LIST
48352: LIST
48353: PUSH
48354: LD_INT 1
48356: NEG
48357: PUSH
48358: LD_INT 1
48360: NEG
48361: PUSH
48362: EMPTY
48363: LIST
48364: LIST
48365: PUSH
48366: LD_INT 1
48368: NEG
48369: PUSH
48370: LD_INT 2
48372: NEG
48373: PUSH
48374: EMPTY
48375: LIST
48376: LIST
48377: PUSH
48378: LD_INT 0
48380: PUSH
48381: LD_INT 2
48383: NEG
48384: PUSH
48385: EMPTY
48386: LIST
48387: LIST
48388: PUSH
48389: LD_INT 1
48391: PUSH
48392: LD_INT 1
48394: NEG
48395: PUSH
48396: EMPTY
48397: LIST
48398: LIST
48399: PUSH
48400: LD_INT 2
48402: PUSH
48403: LD_INT 1
48405: PUSH
48406: EMPTY
48407: LIST
48408: LIST
48409: PUSH
48410: LD_INT 2
48412: PUSH
48413: LD_INT 2
48415: PUSH
48416: EMPTY
48417: LIST
48418: LIST
48419: PUSH
48420: LD_INT 1
48422: PUSH
48423: LD_INT 2
48425: PUSH
48426: EMPTY
48427: LIST
48428: LIST
48429: PUSH
48430: LD_INT 0
48432: PUSH
48433: LD_INT 2
48435: PUSH
48436: EMPTY
48437: LIST
48438: LIST
48439: PUSH
48440: LD_INT 1
48442: NEG
48443: PUSH
48444: LD_INT 1
48446: PUSH
48447: EMPTY
48448: LIST
48449: LIST
48450: PUSH
48451: LD_INT 2
48453: NEG
48454: PUSH
48455: LD_INT 0
48457: PUSH
48458: EMPTY
48459: LIST
48460: LIST
48461: PUSH
48462: LD_INT 2
48464: NEG
48465: PUSH
48466: LD_INT 1
48468: NEG
48469: PUSH
48470: EMPTY
48471: LIST
48472: LIST
48473: PUSH
48474: LD_INT 1
48476: NEG
48477: PUSH
48478: LD_INT 3
48480: NEG
48481: PUSH
48482: EMPTY
48483: LIST
48484: LIST
48485: PUSH
48486: LD_INT 1
48488: PUSH
48489: LD_INT 2
48491: NEG
48492: PUSH
48493: EMPTY
48494: LIST
48495: LIST
48496: PUSH
48497: LD_INT 3
48499: PUSH
48500: LD_INT 2
48502: PUSH
48503: EMPTY
48504: LIST
48505: LIST
48506: PUSH
48507: LD_INT 2
48509: PUSH
48510: LD_INT 3
48512: PUSH
48513: EMPTY
48514: LIST
48515: LIST
48516: PUSH
48517: LD_INT 2
48519: NEG
48520: PUSH
48521: LD_INT 1
48523: PUSH
48524: EMPTY
48525: LIST
48526: LIST
48527: PUSH
48528: LD_INT 3
48530: NEG
48531: PUSH
48532: LD_INT 1
48534: NEG
48535: PUSH
48536: EMPTY
48537: LIST
48538: LIST
48539: PUSH
48540: EMPTY
48541: LIST
48542: LIST
48543: LIST
48544: LIST
48545: LIST
48546: LIST
48547: LIST
48548: LIST
48549: LIST
48550: LIST
48551: LIST
48552: LIST
48553: LIST
48554: LIST
48555: LIST
48556: LIST
48557: LIST
48558: LIST
48559: LIST
48560: LIST
48561: LIST
48562: LIST
48563: LIST
48564: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
48565: LD_ADDR_VAR 0 33
48569: PUSH
48570: LD_INT 0
48572: PUSH
48573: LD_INT 0
48575: PUSH
48576: EMPTY
48577: LIST
48578: LIST
48579: PUSH
48580: LD_INT 0
48582: PUSH
48583: LD_INT 1
48585: NEG
48586: PUSH
48587: EMPTY
48588: LIST
48589: LIST
48590: PUSH
48591: LD_INT 1
48593: PUSH
48594: LD_INT 0
48596: PUSH
48597: EMPTY
48598: LIST
48599: LIST
48600: PUSH
48601: LD_INT 1
48603: PUSH
48604: LD_INT 1
48606: PUSH
48607: EMPTY
48608: LIST
48609: LIST
48610: PUSH
48611: LD_INT 0
48613: PUSH
48614: LD_INT 1
48616: PUSH
48617: EMPTY
48618: LIST
48619: LIST
48620: PUSH
48621: LD_INT 1
48623: NEG
48624: PUSH
48625: LD_INT 0
48627: PUSH
48628: EMPTY
48629: LIST
48630: LIST
48631: PUSH
48632: LD_INT 1
48634: NEG
48635: PUSH
48636: LD_INT 1
48638: NEG
48639: PUSH
48640: EMPTY
48641: LIST
48642: LIST
48643: PUSH
48644: LD_INT 1
48646: NEG
48647: PUSH
48648: LD_INT 2
48650: NEG
48651: PUSH
48652: EMPTY
48653: LIST
48654: LIST
48655: PUSH
48656: LD_INT 1
48658: PUSH
48659: LD_INT 1
48661: NEG
48662: PUSH
48663: EMPTY
48664: LIST
48665: LIST
48666: PUSH
48667: LD_INT 2
48669: PUSH
48670: LD_INT 0
48672: PUSH
48673: EMPTY
48674: LIST
48675: LIST
48676: PUSH
48677: LD_INT 2
48679: PUSH
48680: LD_INT 1
48682: PUSH
48683: EMPTY
48684: LIST
48685: LIST
48686: PUSH
48687: LD_INT 1
48689: PUSH
48690: LD_INT 2
48692: PUSH
48693: EMPTY
48694: LIST
48695: LIST
48696: PUSH
48697: LD_INT 0
48699: PUSH
48700: LD_INT 2
48702: PUSH
48703: EMPTY
48704: LIST
48705: LIST
48706: PUSH
48707: LD_INT 1
48709: NEG
48710: PUSH
48711: LD_INT 1
48713: PUSH
48714: EMPTY
48715: LIST
48716: LIST
48717: PUSH
48718: LD_INT 2
48720: NEG
48721: PUSH
48722: LD_INT 0
48724: PUSH
48725: EMPTY
48726: LIST
48727: LIST
48728: PUSH
48729: LD_INT 2
48731: NEG
48732: PUSH
48733: LD_INT 1
48735: NEG
48736: PUSH
48737: EMPTY
48738: LIST
48739: LIST
48740: PUSH
48741: LD_INT 2
48743: NEG
48744: PUSH
48745: LD_INT 2
48747: NEG
48748: PUSH
48749: EMPTY
48750: LIST
48751: LIST
48752: PUSH
48753: LD_INT 2
48755: NEG
48756: PUSH
48757: LD_INT 3
48759: NEG
48760: PUSH
48761: EMPTY
48762: LIST
48763: LIST
48764: PUSH
48765: LD_INT 2
48767: PUSH
48768: LD_INT 1
48770: NEG
48771: PUSH
48772: EMPTY
48773: LIST
48774: LIST
48775: PUSH
48776: LD_INT 3
48778: PUSH
48779: LD_INT 1
48781: PUSH
48782: EMPTY
48783: LIST
48784: LIST
48785: PUSH
48786: LD_INT 1
48788: PUSH
48789: LD_INT 3
48791: PUSH
48792: EMPTY
48793: LIST
48794: LIST
48795: PUSH
48796: LD_INT 1
48798: NEG
48799: PUSH
48800: LD_INT 2
48802: PUSH
48803: EMPTY
48804: LIST
48805: LIST
48806: PUSH
48807: LD_INT 3
48809: NEG
48810: PUSH
48811: LD_INT 2
48813: NEG
48814: PUSH
48815: EMPTY
48816: LIST
48817: LIST
48818: PUSH
48819: EMPTY
48820: LIST
48821: LIST
48822: LIST
48823: LIST
48824: LIST
48825: LIST
48826: LIST
48827: LIST
48828: LIST
48829: LIST
48830: LIST
48831: LIST
48832: LIST
48833: LIST
48834: LIST
48835: LIST
48836: LIST
48837: LIST
48838: LIST
48839: LIST
48840: LIST
48841: LIST
48842: LIST
48843: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48844: LD_ADDR_VAR 0 34
48848: PUSH
48849: LD_INT 0
48851: PUSH
48852: LD_INT 0
48854: PUSH
48855: EMPTY
48856: LIST
48857: LIST
48858: PUSH
48859: LD_INT 0
48861: PUSH
48862: LD_INT 1
48864: NEG
48865: PUSH
48866: EMPTY
48867: LIST
48868: LIST
48869: PUSH
48870: LD_INT 1
48872: PUSH
48873: LD_INT 0
48875: PUSH
48876: EMPTY
48877: LIST
48878: LIST
48879: PUSH
48880: LD_INT 1
48882: PUSH
48883: LD_INT 1
48885: PUSH
48886: EMPTY
48887: LIST
48888: LIST
48889: PUSH
48890: LD_INT 0
48892: PUSH
48893: LD_INT 1
48895: PUSH
48896: EMPTY
48897: LIST
48898: LIST
48899: PUSH
48900: LD_INT 1
48902: NEG
48903: PUSH
48904: LD_INT 0
48906: PUSH
48907: EMPTY
48908: LIST
48909: LIST
48910: PUSH
48911: LD_INT 1
48913: NEG
48914: PUSH
48915: LD_INT 1
48917: NEG
48918: PUSH
48919: EMPTY
48920: LIST
48921: LIST
48922: PUSH
48923: LD_INT 1
48925: NEG
48926: PUSH
48927: LD_INT 2
48929: NEG
48930: PUSH
48931: EMPTY
48932: LIST
48933: LIST
48934: PUSH
48935: LD_INT 0
48937: PUSH
48938: LD_INT 2
48940: NEG
48941: PUSH
48942: EMPTY
48943: LIST
48944: LIST
48945: PUSH
48946: LD_INT 1
48948: PUSH
48949: LD_INT 1
48951: NEG
48952: PUSH
48953: EMPTY
48954: LIST
48955: LIST
48956: PUSH
48957: LD_INT 2
48959: PUSH
48960: LD_INT 1
48962: PUSH
48963: EMPTY
48964: LIST
48965: LIST
48966: PUSH
48967: LD_INT 2
48969: PUSH
48970: LD_INT 2
48972: PUSH
48973: EMPTY
48974: LIST
48975: LIST
48976: PUSH
48977: LD_INT 1
48979: PUSH
48980: LD_INT 2
48982: PUSH
48983: EMPTY
48984: LIST
48985: LIST
48986: PUSH
48987: LD_INT 1
48989: NEG
48990: PUSH
48991: LD_INT 1
48993: PUSH
48994: EMPTY
48995: LIST
48996: LIST
48997: PUSH
48998: LD_INT 2
49000: NEG
49001: PUSH
49002: LD_INT 0
49004: PUSH
49005: EMPTY
49006: LIST
49007: LIST
49008: PUSH
49009: LD_INT 2
49011: NEG
49012: PUSH
49013: LD_INT 1
49015: NEG
49016: PUSH
49017: EMPTY
49018: LIST
49019: LIST
49020: PUSH
49021: LD_INT 2
49023: NEG
49024: PUSH
49025: LD_INT 2
49027: NEG
49028: PUSH
49029: EMPTY
49030: LIST
49031: LIST
49032: PUSH
49033: LD_INT 1
49035: NEG
49036: PUSH
49037: LD_INT 3
49039: NEG
49040: PUSH
49041: EMPTY
49042: LIST
49043: LIST
49044: PUSH
49045: LD_INT 1
49047: PUSH
49048: LD_INT 2
49050: NEG
49051: PUSH
49052: EMPTY
49053: LIST
49054: LIST
49055: PUSH
49056: LD_INT 3
49058: PUSH
49059: LD_INT 2
49061: PUSH
49062: EMPTY
49063: LIST
49064: LIST
49065: PUSH
49066: LD_INT 2
49068: PUSH
49069: LD_INT 3
49071: PUSH
49072: EMPTY
49073: LIST
49074: LIST
49075: PUSH
49076: LD_INT 2
49078: NEG
49079: PUSH
49080: LD_INT 1
49082: PUSH
49083: EMPTY
49084: LIST
49085: LIST
49086: PUSH
49087: LD_INT 3
49089: NEG
49090: PUSH
49091: LD_INT 1
49093: NEG
49094: PUSH
49095: EMPTY
49096: LIST
49097: LIST
49098: PUSH
49099: EMPTY
49100: LIST
49101: LIST
49102: LIST
49103: LIST
49104: LIST
49105: LIST
49106: LIST
49107: LIST
49108: LIST
49109: LIST
49110: LIST
49111: LIST
49112: LIST
49113: LIST
49114: LIST
49115: LIST
49116: LIST
49117: LIST
49118: LIST
49119: LIST
49120: LIST
49121: LIST
49122: LIST
49123: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
49124: LD_ADDR_VAR 0 35
49128: PUSH
49129: LD_INT 0
49131: PUSH
49132: LD_INT 0
49134: PUSH
49135: EMPTY
49136: LIST
49137: LIST
49138: PUSH
49139: LD_INT 0
49141: PUSH
49142: LD_INT 1
49144: NEG
49145: PUSH
49146: EMPTY
49147: LIST
49148: LIST
49149: PUSH
49150: LD_INT 1
49152: PUSH
49153: LD_INT 0
49155: PUSH
49156: EMPTY
49157: LIST
49158: LIST
49159: PUSH
49160: LD_INT 1
49162: PUSH
49163: LD_INT 1
49165: PUSH
49166: EMPTY
49167: LIST
49168: LIST
49169: PUSH
49170: LD_INT 0
49172: PUSH
49173: LD_INT 1
49175: PUSH
49176: EMPTY
49177: LIST
49178: LIST
49179: PUSH
49180: LD_INT 1
49182: NEG
49183: PUSH
49184: LD_INT 0
49186: PUSH
49187: EMPTY
49188: LIST
49189: LIST
49190: PUSH
49191: LD_INT 1
49193: NEG
49194: PUSH
49195: LD_INT 1
49197: NEG
49198: PUSH
49199: EMPTY
49200: LIST
49201: LIST
49202: PUSH
49203: LD_INT 2
49205: PUSH
49206: LD_INT 1
49208: PUSH
49209: EMPTY
49210: LIST
49211: LIST
49212: PUSH
49213: LD_INT 2
49215: NEG
49216: PUSH
49217: LD_INT 1
49219: NEG
49220: PUSH
49221: EMPTY
49222: LIST
49223: LIST
49224: PUSH
49225: EMPTY
49226: LIST
49227: LIST
49228: LIST
49229: LIST
49230: LIST
49231: LIST
49232: LIST
49233: LIST
49234: LIST
49235: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
49236: LD_ADDR_VAR 0 36
49240: PUSH
49241: LD_INT 0
49243: PUSH
49244: LD_INT 0
49246: PUSH
49247: EMPTY
49248: LIST
49249: LIST
49250: PUSH
49251: LD_INT 0
49253: PUSH
49254: LD_INT 1
49256: NEG
49257: PUSH
49258: EMPTY
49259: LIST
49260: LIST
49261: PUSH
49262: LD_INT 1
49264: PUSH
49265: LD_INT 0
49267: PUSH
49268: EMPTY
49269: LIST
49270: LIST
49271: PUSH
49272: LD_INT 1
49274: PUSH
49275: LD_INT 1
49277: PUSH
49278: EMPTY
49279: LIST
49280: LIST
49281: PUSH
49282: LD_INT 0
49284: PUSH
49285: LD_INT 1
49287: PUSH
49288: EMPTY
49289: LIST
49290: LIST
49291: PUSH
49292: LD_INT 1
49294: NEG
49295: PUSH
49296: LD_INT 0
49298: PUSH
49299: EMPTY
49300: LIST
49301: LIST
49302: PUSH
49303: LD_INT 1
49305: NEG
49306: PUSH
49307: LD_INT 1
49309: NEG
49310: PUSH
49311: EMPTY
49312: LIST
49313: LIST
49314: PUSH
49315: LD_INT 1
49317: NEG
49318: PUSH
49319: LD_INT 2
49321: NEG
49322: PUSH
49323: EMPTY
49324: LIST
49325: LIST
49326: PUSH
49327: LD_INT 1
49329: PUSH
49330: LD_INT 2
49332: PUSH
49333: EMPTY
49334: LIST
49335: LIST
49336: PUSH
49337: EMPTY
49338: LIST
49339: LIST
49340: LIST
49341: LIST
49342: LIST
49343: LIST
49344: LIST
49345: LIST
49346: LIST
49347: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
49348: LD_ADDR_VAR 0 37
49352: PUSH
49353: LD_INT 0
49355: PUSH
49356: LD_INT 0
49358: PUSH
49359: EMPTY
49360: LIST
49361: LIST
49362: PUSH
49363: LD_INT 0
49365: PUSH
49366: LD_INT 1
49368: NEG
49369: PUSH
49370: EMPTY
49371: LIST
49372: LIST
49373: PUSH
49374: LD_INT 1
49376: PUSH
49377: LD_INT 0
49379: PUSH
49380: EMPTY
49381: LIST
49382: LIST
49383: PUSH
49384: LD_INT 1
49386: PUSH
49387: LD_INT 1
49389: PUSH
49390: EMPTY
49391: LIST
49392: LIST
49393: PUSH
49394: LD_INT 0
49396: PUSH
49397: LD_INT 1
49399: PUSH
49400: EMPTY
49401: LIST
49402: LIST
49403: PUSH
49404: LD_INT 1
49406: NEG
49407: PUSH
49408: LD_INT 0
49410: PUSH
49411: EMPTY
49412: LIST
49413: LIST
49414: PUSH
49415: LD_INT 1
49417: NEG
49418: PUSH
49419: LD_INT 1
49421: NEG
49422: PUSH
49423: EMPTY
49424: LIST
49425: LIST
49426: PUSH
49427: LD_INT 1
49429: PUSH
49430: LD_INT 1
49432: NEG
49433: PUSH
49434: EMPTY
49435: LIST
49436: LIST
49437: PUSH
49438: LD_INT 1
49440: NEG
49441: PUSH
49442: LD_INT 1
49444: PUSH
49445: EMPTY
49446: LIST
49447: LIST
49448: PUSH
49449: EMPTY
49450: LIST
49451: LIST
49452: LIST
49453: LIST
49454: LIST
49455: LIST
49456: LIST
49457: LIST
49458: LIST
49459: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
49460: LD_ADDR_VAR 0 38
49464: PUSH
49465: LD_INT 0
49467: PUSH
49468: LD_INT 0
49470: PUSH
49471: EMPTY
49472: LIST
49473: LIST
49474: PUSH
49475: LD_INT 0
49477: PUSH
49478: LD_INT 1
49480: NEG
49481: PUSH
49482: EMPTY
49483: LIST
49484: LIST
49485: PUSH
49486: LD_INT 1
49488: PUSH
49489: LD_INT 0
49491: PUSH
49492: EMPTY
49493: LIST
49494: LIST
49495: PUSH
49496: LD_INT 1
49498: PUSH
49499: LD_INT 1
49501: PUSH
49502: EMPTY
49503: LIST
49504: LIST
49505: PUSH
49506: LD_INT 0
49508: PUSH
49509: LD_INT 1
49511: PUSH
49512: EMPTY
49513: LIST
49514: LIST
49515: PUSH
49516: LD_INT 1
49518: NEG
49519: PUSH
49520: LD_INT 0
49522: PUSH
49523: EMPTY
49524: LIST
49525: LIST
49526: PUSH
49527: LD_INT 1
49529: NEG
49530: PUSH
49531: LD_INT 1
49533: NEG
49534: PUSH
49535: EMPTY
49536: LIST
49537: LIST
49538: PUSH
49539: LD_INT 2
49541: PUSH
49542: LD_INT 1
49544: PUSH
49545: EMPTY
49546: LIST
49547: LIST
49548: PUSH
49549: LD_INT 2
49551: NEG
49552: PUSH
49553: LD_INT 1
49555: NEG
49556: PUSH
49557: EMPTY
49558: LIST
49559: LIST
49560: PUSH
49561: EMPTY
49562: LIST
49563: LIST
49564: LIST
49565: LIST
49566: LIST
49567: LIST
49568: LIST
49569: LIST
49570: LIST
49571: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
49572: LD_ADDR_VAR 0 39
49576: PUSH
49577: LD_INT 0
49579: PUSH
49580: LD_INT 0
49582: PUSH
49583: EMPTY
49584: LIST
49585: LIST
49586: PUSH
49587: LD_INT 0
49589: PUSH
49590: LD_INT 1
49592: NEG
49593: PUSH
49594: EMPTY
49595: LIST
49596: LIST
49597: PUSH
49598: LD_INT 1
49600: PUSH
49601: LD_INT 0
49603: PUSH
49604: EMPTY
49605: LIST
49606: LIST
49607: PUSH
49608: LD_INT 1
49610: PUSH
49611: LD_INT 1
49613: PUSH
49614: EMPTY
49615: LIST
49616: LIST
49617: PUSH
49618: LD_INT 0
49620: PUSH
49621: LD_INT 1
49623: PUSH
49624: EMPTY
49625: LIST
49626: LIST
49627: PUSH
49628: LD_INT 1
49630: NEG
49631: PUSH
49632: LD_INT 0
49634: PUSH
49635: EMPTY
49636: LIST
49637: LIST
49638: PUSH
49639: LD_INT 1
49641: NEG
49642: PUSH
49643: LD_INT 1
49645: NEG
49646: PUSH
49647: EMPTY
49648: LIST
49649: LIST
49650: PUSH
49651: LD_INT 1
49653: NEG
49654: PUSH
49655: LD_INT 2
49657: NEG
49658: PUSH
49659: EMPTY
49660: LIST
49661: LIST
49662: PUSH
49663: LD_INT 1
49665: PUSH
49666: LD_INT 2
49668: PUSH
49669: EMPTY
49670: LIST
49671: LIST
49672: PUSH
49673: EMPTY
49674: LIST
49675: LIST
49676: LIST
49677: LIST
49678: LIST
49679: LIST
49680: LIST
49681: LIST
49682: LIST
49683: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
49684: LD_ADDR_VAR 0 40
49688: PUSH
49689: LD_INT 0
49691: PUSH
49692: LD_INT 0
49694: PUSH
49695: EMPTY
49696: LIST
49697: LIST
49698: PUSH
49699: LD_INT 0
49701: PUSH
49702: LD_INT 1
49704: NEG
49705: PUSH
49706: EMPTY
49707: LIST
49708: LIST
49709: PUSH
49710: LD_INT 1
49712: PUSH
49713: LD_INT 0
49715: PUSH
49716: EMPTY
49717: LIST
49718: LIST
49719: PUSH
49720: LD_INT 1
49722: PUSH
49723: LD_INT 1
49725: PUSH
49726: EMPTY
49727: LIST
49728: LIST
49729: PUSH
49730: LD_INT 0
49732: PUSH
49733: LD_INT 1
49735: PUSH
49736: EMPTY
49737: LIST
49738: LIST
49739: PUSH
49740: LD_INT 1
49742: NEG
49743: PUSH
49744: LD_INT 0
49746: PUSH
49747: EMPTY
49748: LIST
49749: LIST
49750: PUSH
49751: LD_INT 1
49753: NEG
49754: PUSH
49755: LD_INT 1
49757: NEG
49758: PUSH
49759: EMPTY
49760: LIST
49761: LIST
49762: PUSH
49763: LD_INT 1
49765: PUSH
49766: LD_INT 1
49768: NEG
49769: PUSH
49770: EMPTY
49771: LIST
49772: LIST
49773: PUSH
49774: LD_INT 1
49776: NEG
49777: PUSH
49778: LD_INT 1
49780: PUSH
49781: EMPTY
49782: LIST
49783: LIST
49784: PUSH
49785: EMPTY
49786: LIST
49787: LIST
49788: LIST
49789: LIST
49790: LIST
49791: LIST
49792: LIST
49793: LIST
49794: LIST
49795: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49796: LD_ADDR_VAR 0 41
49800: PUSH
49801: LD_INT 0
49803: PUSH
49804: LD_INT 0
49806: PUSH
49807: EMPTY
49808: LIST
49809: LIST
49810: PUSH
49811: LD_INT 0
49813: PUSH
49814: LD_INT 1
49816: NEG
49817: PUSH
49818: EMPTY
49819: LIST
49820: LIST
49821: PUSH
49822: LD_INT 1
49824: PUSH
49825: LD_INT 0
49827: PUSH
49828: EMPTY
49829: LIST
49830: LIST
49831: PUSH
49832: LD_INT 1
49834: PUSH
49835: LD_INT 1
49837: PUSH
49838: EMPTY
49839: LIST
49840: LIST
49841: PUSH
49842: LD_INT 0
49844: PUSH
49845: LD_INT 1
49847: PUSH
49848: EMPTY
49849: LIST
49850: LIST
49851: PUSH
49852: LD_INT 1
49854: NEG
49855: PUSH
49856: LD_INT 0
49858: PUSH
49859: EMPTY
49860: LIST
49861: LIST
49862: PUSH
49863: LD_INT 1
49865: NEG
49866: PUSH
49867: LD_INT 1
49869: NEG
49870: PUSH
49871: EMPTY
49872: LIST
49873: LIST
49874: PUSH
49875: LD_INT 1
49877: NEG
49878: PUSH
49879: LD_INT 2
49881: NEG
49882: PUSH
49883: EMPTY
49884: LIST
49885: LIST
49886: PUSH
49887: LD_INT 1
49889: PUSH
49890: LD_INT 1
49892: NEG
49893: PUSH
49894: EMPTY
49895: LIST
49896: LIST
49897: PUSH
49898: LD_INT 2
49900: PUSH
49901: LD_INT 0
49903: PUSH
49904: EMPTY
49905: LIST
49906: LIST
49907: PUSH
49908: LD_INT 2
49910: PUSH
49911: LD_INT 1
49913: PUSH
49914: EMPTY
49915: LIST
49916: LIST
49917: PUSH
49918: LD_INT 2
49920: PUSH
49921: LD_INT 2
49923: PUSH
49924: EMPTY
49925: LIST
49926: LIST
49927: PUSH
49928: LD_INT 1
49930: PUSH
49931: LD_INT 2
49933: PUSH
49934: EMPTY
49935: LIST
49936: LIST
49937: PUSH
49938: LD_INT 1
49940: NEG
49941: PUSH
49942: LD_INT 1
49944: PUSH
49945: EMPTY
49946: LIST
49947: LIST
49948: PUSH
49949: LD_INT 2
49951: NEG
49952: PUSH
49953: LD_INT 0
49955: PUSH
49956: EMPTY
49957: LIST
49958: LIST
49959: PUSH
49960: LD_INT 2
49962: NEG
49963: PUSH
49964: LD_INT 1
49966: NEG
49967: PUSH
49968: EMPTY
49969: LIST
49970: LIST
49971: PUSH
49972: LD_INT 2
49974: NEG
49975: PUSH
49976: LD_INT 2
49978: NEG
49979: PUSH
49980: EMPTY
49981: LIST
49982: LIST
49983: PUSH
49984: LD_INT 2
49986: NEG
49987: PUSH
49988: LD_INT 3
49990: NEG
49991: PUSH
49992: EMPTY
49993: LIST
49994: LIST
49995: PUSH
49996: LD_INT 2
49998: PUSH
49999: LD_INT 1
50001: NEG
50002: PUSH
50003: EMPTY
50004: LIST
50005: LIST
50006: PUSH
50007: LD_INT 3
50009: PUSH
50010: LD_INT 0
50012: PUSH
50013: EMPTY
50014: LIST
50015: LIST
50016: PUSH
50017: LD_INT 3
50019: PUSH
50020: LD_INT 1
50022: PUSH
50023: EMPTY
50024: LIST
50025: LIST
50026: PUSH
50027: LD_INT 3
50029: PUSH
50030: LD_INT 2
50032: PUSH
50033: EMPTY
50034: LIST
50035: LIST
50036: PUSH
50037: LD_INT 3
50039: PUSH
50040: LD_INT 3
50042: PUSH
50043: EMPTY
50044: LIST
50045: LIST
50046: PUSH
50047: LD_INT 2
50049: PUSH
50050: LD_INT 3
50052: PUSH
50053: EMPTY
50054: LIST
50055: LIST
50056: PUSH
50057: LD_INT 2
50059: NEG
50060: PUSH
50061: LD_INT 1
50063: PUSH
50064: EMPTY
50065: LIST
50066: LIST
50067: PUSH
50068: LD_INT 3
50070: NEG
50071: PUSH
50072: LD_INT 0
50074: PUSH
50075: EMPTY
50076: LIST
50077: LIST
50078: PUSH
50079: LD_INT 3
50081: NEG
50082: PUSH
50083: LD_INT 1
50085: NEG
50086: PUSH
50087: EMPTY
50088: LIST
50089: LIST
50090: PUSH
50091: LD_INT 3
50093: NEG
50094: PUSH
50095: LD_INT 2
50097: NEG
50098: PUSH
50099: EMPTY
50100: LIST
50101: LIST
50102: PUSH
50103: LD_INT 3
50105: NEG
50106: PUSH
50107: LD_INT 3
50109: NEG
50110: PUSH
50111: EMPTY
50112: LIST
50113: LIST
50114: PUSH
50115: EMPTY
50116: LIST
50117: LIST
50118: LIST
50119: LIST
50120: LIST
50121: LIST
50122: LIST
50123: LIST
50124: LIST
50125: LIST
50126: LIST
50127: LIST
50128: LIST
50129: LIST
50130: LIST
50131: LIST
50132: LIST
50133: LIST
50134: LIST
50135: LIST
50136: LIST
50137: LIST
50138: LIST
50139: LIST
50140: LIST
50141: LIST
50142: LIST
50143: LIST
50144: LIST
50145: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50146: LD_ADDR_VAR 0 42
50150: PUSH
50151: LD_INT 0
50153: PUSH
50154: LD_INT 0
50156: PUSH
50157: EMPTY
50158: LIST
50159: LIST
50160: PUSH
50161: LD_INT 0
50163: PUSH
50164: LD_INT 1
50166: NEG
50167: PUSH
50168: EMPTY
50169: LIST
50170: LIST
50171: PUSH
50172: LD_INT 1
50174: PUSH
50175: LD_INT 0
50177: PUSH
50178: EMPTY
50179: LIST
50180: LIST
50181: PUSH
50182: LD_INT 1
50184: PUSH
50185: LD_INT 1
50187: PUSH
50188: EMPTY
50189: LIST
50190: LIST
50191: PUSH
50192: LD_INT 0
50194: PUSH
50195: LD_INT 1
50197: PUSH
50198: EMPTY
50199: LIST
50200: LIST
50201: PUSH
50202: LD_INT 1
50204: NEG
50205: PUSH
50206: LD_INT 0
50208: PUSH
50209: EMPTY
50210: LIST
50211: LIST
50212: PUSH
50213: LD_INT 1
50215: NEG
50216: PUSH
50217: LD_INT 1
50219: NEG
50220: PUSH
50221: EMPTY
50222: LIST
50223: LIST
50224: PUSH
50225: LD_INT 1
50227: NEG
50228: PUSH
50229: LD_INT 2
50231: NEG
50232: PUSH
50233: EMPTY
50234: LIST
50235: LIST
50236: PUSH
50237: LD_INT 0
50239: PUSH
50240: LD_INT 2
50242: NEG
50243: PUSH
50244: EMPTY
50245: LIST
50246: LIST
50247: PUSH
50248: LD_INT 1
50250: PUSH
50251: LD_INT 1
50253: NEG
50254: PUSH
50255: EMPTY
50256: LIST
50257: LIST
50258: PUSH
50259: LD_INT 2
50261: PUSH
50262: LD_INT 1
50264: PUSH
50265: EMPTY
50266: LIST
50267: LIST
50268: PUSH
50269: LD_INT 2
50271: PUSH
50272: LD_INT 2
50274: PUSH
50275: EMPTY
50276: LIST
50277: LIST
50278: PUSH
50279: LD_INT 1
50281: PUSH
50282: LD_INT 2
50284: PUSH
50285: EMPTY
50286: LIST
50287: LIST
50288: PUSH
50289: LD_INT 0
50291: PUSH
50292: LD_INT 2
50294: PUSH
50295: EMPTY
50296: LIST
50297: LIST
50298: PUSH
50299: LD_INT 1
50301: NEG
50302: PUSH
50303: LD_INT 1
50305: PUSH
50306: EMPTY
50307: LIST
50308: LIST
50309: PUSH
50310: LD_INT 2
50312: NEG
50313: PUSH
50314: LD_INT 1
50316: NEG
50317: PUSH
50318: EMPTY
50319: LIST
50320: LIST
50321: PUSH
50322: LD_INT 2
50324: NEG
50325: PUSH
50326: LD_INT 2
50328: NEG
50329: PUSH
50330: EMPTY
50331: LIST
50332: LIST
50333: PUSH
50334: LD_INT 2
50336: NEG
50337: PUSH
50338: LD_INT 3
50340: NEG
50341: PUSH
50342: EMPTY
50343: LIST
50344: LIST
50345: PUSH
50346: LD_INT 1
50348: NEG
50349: PUSH
50350: LD_INT 3
50352: NEG
50353: PUSH
50354: EMPTY
50355: LIST
50356: LIST
50357: PUSH
50358: LD_INT 0
50360: PUSH
50361: LD_INT 3
50363: NEG
50364: PUSH
50365: EMPTY
50366: LIST
50367: LIST
50368: PUSH
50369: LD_INT 1
50371: PUSH
50372: LD_INT 2
50374: NEG
50375: PUSH
50376: EMPTY
50377: LIST
50378: LIST
50379: PUSH
50380: LD_INT 3
50382: PUSH
50383: LD_INT 2
50385: PUSH
50386: EMPTY
50387: LIST
50388: LIST
50389: PUSH
50390: LD_INT 3
50392: PUSH
50393: LD_INT 3
50395: PUSH
50396: EMPTY
50397: LIST
50398: LIST
50399: PUSH
50400: LD_INT 2
50402: PUSH
50403: LD_INT 3
50405: PUSH
50406: EMPTY
50407: LIST
50408: LIST
50409: PUSH
50410: LD_INT 1
50412: PUSH
50413: LD_INT 3
50415: PUSH
50416: EMPTY
50417: LIST
50418: LIST
50419: PUSH
50420: LD_INT 0
50422: PUSH
50423: LD_INT 3
50425: PUSH
50426: EMPTY
50427: LIST
50428: LIST
50429: PUSH
50430: LD_INT 1
50432: NEG
50433: PUSH
50434: LD_INT 2
50436: PUSH
50437: EMPTY
50438: LIST
50439: LIST
50440: PUSH
50441: LD_INT 3
50443: NEG
50444: PUSH
50445: LD_INT 2
50447: NEG
50448: PUSH
50449: EMPTY
50450: LIST
50451: LIST
50452: PUSH
50453: LD_INT 3
50455: NEG
50456: PUSH
50457: LD_INT 3
50459: NEG
50460: PUSH
50461: EMPTY
50462: LIST
50463: LIST
50464: PUSH
50465: EMPTY
50466: LIST
50467: LIST
50468: LIST
50469: LIST
50470: LIST
50471: LIST
50472: LIST
50473: LIST
50474: LIST
50475: LIST
50476: LIST
50477: LIST
50478: LIST
50479: LIST
50480: LIST
50481: LIST
50482: LIST
50483: LIST
50484: LIST
50485: LIST
50486: LIST
50487: LIST
50488: LIST
50489: LIST
50490: LIST
50491: LIST
50492: LIST
50493: LIST
50494: LIST
50495: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50496: LD_ADDR_VAR 0 43
50500: PUSH
50501: LD_INT 0
50503: PUSH
50504: LD_INT 0
50506: PUSH
50507: EMPTY
50508: LIST
50509: LIST
50510: PUSH
50511: LD_INT 0
50513: PUSH
50514: LD_INT 1
50516: NEG
50517: PUSH
50518: EMPTY
50519: LIST
50520: LIST
50521: PUSH
50522: LD_INT 1
50524: PUSH
50525: LD_INT 0
50527: PUSH
50528: EMPTY
50529: LIST
50530: LIST
50531: PUSH
50532: LD_INT 1
50534: PUSH
50535: LD_INT 1
50537: PUSH
50538: EMPTY
50539: LIST
50540: LIST
50541: PUSH
50542: LD_INT 0
50544: PUSH
50545: LD_INT 1
50547: PUSH
50548: EMPTY
50549: LIST
50550: LIST
50551: PUSH
50552: LD_INT 1
50554: NEG
50555: PUSH
50556: LD_INT 0
50558: PUSH
50559: EMPTY
50560: LIST
50561: LIST
50562: PUSH
50563: LD_INT 1
50565: NEG
50566: PUSH
50567: LD_INT 1
50569: NEG
50570: PUSH
50571: EMPTY
50572: LIST
50573: LIST
50574: PUSH
50575: LD_INT 1
50577: NEG
50578: PUSH
50579: LD_INT 2
50581: NEG
50582: PUSH
50583: EMPTY
50584: LIST
50585: LIST
50586: PUSH
50587: LD_INT 0
50589: PUSH
50590: LD_INT 2
50592: NEG
50593: PUSH
50594: EMPTY
50595: LIST
50596: LIST
50597: PUSH
50598: LD_INT 1
50600: PUSH
50601: LD_INT 1
50603: NEG
50604: PUSH
50605: EMPTY
50606: LIST
50607: LIST
50608: PUSH
50609: LD_INT 2
50611: PUSH
50612: LD_INT 0
50614: PUSH
50615: EMPTY
50616: LIST
50617: LIST
50618: PUSH
50619: LD_INT 2
50621: PUSH
50622: LD_INT 1
50624: PUSH
50625: EMPTY
50626: LIST
50627: LIST
50628: PUSH
50629: LD_INT 1
50631: PUSH
50632: LD_INT 2
50634: PUSH
50635: EMPTY
50636: LIST
50637: LIST
50638: PUSH
50639: LD_INT 0
50641: PUSH
50642: LD_INT 2
50644: PUSH
50645: EMPTY
50646: LIST
50647: LIST
50648: PUSH
50649: LD_INT 1
50651: NEG
50652: PUSH
50653: LD_INT 1
50655: PUSH
50656: EMPTY
50657: LIST
50658: LIST
50659: PUSH
50660: LD_INT 2
50662: NEG
50663: PUSH
50664: LD_INT 0
50666: PUSH
50667: EMPTY
50668: LIST
50669: LIST
50670: PUSH
50671: LD_INT 2
50673: NEG
50674: PUSH
50675: LD_INT 1
50677: NEG
50678: PUSH
50679: EMPTY
50680: LIST
50681: LIST
50682: PUSH
50683: LD_INT 1
50685: NEG
50686: PUSH
50687: LD_INT 3
50689: NEG
50690: PUSH
50691: EMPTY
50692: LIST
50693: LIST
50694: PUSH
50695: LD_INT 0
50697: PUSH
50698: LD_INT 3
50700: NEG
50701: PUSH
50702: EMPTY
50703: LIST
50704: LIST
50705: PUSH
50706: LD_INT 1
50708: PUSH
50709: LD_INT 2
50711: NEG
50712: PUSH
50713: EMPTY
50714: LIST
50715: LIST
50716: PUSH
50717: LD_INT 2
50719: PUSH
50720: LD_INT 1
50722: NEG
50723: PUSH
50724: EMPTY
50725: LIST
50726: LIST
50727: PUSH
50728: LD_INT 3
50730: PUSH
50731: LD_INT 0
50733: PUSH
50734: EMPTY
50735: LIST
50736: LIST
50737: PUSH
50738: LD_INT 3
50740: PUSH
50741: LD_INT 1
50743: PUSH
50744: EMPTY
50745: LIST
50746: LIST
50747: PUSH
50748: LD_INT 1
50750: PUSH
50751: LD_INT 3
50753: PUSH
50754: EMPTY
50755: LIST
50756: LIST
50757: PUSH
50758: LD_INT 0
50760: PUSH
50761: LD_INT 3
50763: PUSH
50764: EMPTY
50765: LIST
50766: LIST
50767: PUSH
50768: LD_INT 1
50770: NEG
50771: PUSH
50772: LD_INT 2
50774: PUSH
50775: EMPTY
50776: LIST
50777: LIST
50778: PUSH
50779: LD_INT 2
50781: NEG
50782: PUSH
50783: LD_INT 1
50785: PUSH
50786: EMPTY
50787: LIST
50788: LIST
50789: PUSH
50790: LD_INT 3
50792: NEG
50793: PUSH
50794: LD_INT 0
50796: PUSH
50797: EMPTY
50798: LIST
50799: LIST
50800: PUSH
50801: LD_INT 3
50803: NEG
50804: PUSH
50805: LD_INT 1
50807: NEG
50808: PUSH
50809: EMPTY
50810: LIST
50811: LIST
50812: PUSH
50813: EMPTY
50814: LIST
50815: LIST
50816: LIST
50817: LIST
50818: LIST
50819: LIST
50820: LIST
50821: LIST
50822: LIST
50823: LIST
50824: LIST
50825: LIST
50826: LIST
50827: LIST
50828: LIST
50829: LIST
50830: LIST
50831: LIST
50832: LIST
50833: LIST
50834: LIST
50835: LIST
50836: LIST
50837: LIST
50838: LIST
50839: LIST
50840: LIST
50841: LIST
50842: LIST
50843: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50844: LD_ADDR_VAR 0 44
50848: PUSH
50849: LD_INT 0
50851: PUSH
50852: LD_INT 0
50854: PUSH
50855: EMPTY
50856: LIST
50857: LIST
50858: PUSH
50859: LD_INT 0
50861: PUSH
50862: LD_INT 1
50864: NEG
50865: PUSH
50866: EMPTY
50867: LIST
50868: LIST
50869: PUSH
50870: LD_INT 1
50872: PUSH
50873: LD_INT 0
50875: PUSH
50876: EMPTY
50877: LIST
50878: LIST
50879: PUSH
50880: LD_INT 1
50882: PUSH
50883: LD_INT 1
50885: PUSH
50886: EMPTY
50887: LIST
50888: LIST
50889: PUSH
50890: LD_INT 0
50892: PUSH
50893: LD_INT 1
50895: PUSH
50896: EMPTY
50897: LIST
50898: LIST
50899: PUSH
50900: LD_INT 1
50902: NEG
50903: PUSH
50904: LD_INT 0
50906: PUSH
50907: EMPTY
50908: LIST
50909: LIST
50910: PUSH
50911: LD_INT 1
50913: NEG
50914: PUSH
50915: LD_INT 1
50917: NEG
50918: PUSH
50919: EMPTY
50920: LIST
50921: LIST
50922: PUSH
50923: LD_INT 1
50925: NEG
50926: PUSH
50927: LD_INT 2
50929: NEG
50930: PUSH
50931: EMPTY
50932: LIST
50933: LIST
50934: PUSH
50935: LD_INT 1
50937: PUSH
50938: LD_INT 1
50940: NEG
50941: PUSH
50942: EMPTY
50943: LIST
50944: LIST
50945: PUSH
50946: LD_INT 2
50948: PUSH
50949: LD_INT 0
50951: PUSH
50952: EMPTY
50953: LIST
50954: LIST
50955: PUSH
50956: LD_INT 2
50958: PUSH
50959: LD_INT 1
50961: PUSH
50962: EMPTY
50963: LIST
50964: LIST
50965: PUSH
50966: LD_INT 2
50968: PUSH
50969: LD_INT 2
50971: PUSH
50972: EMPTY
50973: LIST
50974: LIST
50975: PUSH
50976: LD_INT 1
50978: PUSH
50979: LD_INT 2
50981: PUSH
50982: EMPTY
50983: LIST
50984: LIST
50985: PUSH
50986: LD_INT 1
50988: NEG
50989: PUSH
50990: LD_INT 1
50992: PUSH
50993: EMPTY
50994: LIST
50995: LIST
50996: PUSH
50997: LD_INT 2
50999: NEG
51000: PUSH
51001: LD_INT 0
51003: PUSH
51004: EMPTY
51005: LIST
51006: LIST
51007: PUSH
51008: LD_INT 2
51010: NEG
51011: PUSH
51012: LD_INT 1
51014: NEG
51015: PUSH
51016: EMPTY
51017: LIST
51018: LIST
51019: PUSH
51020: LD_INT 2
51022: NEG
51023: PUSH
51024: LD_INT 2
51026: NEG
51027: PUSH
51028: EMPTY
51029: LIST
51030: LIST
51031: PUSH
51032: LD_INT 2
51034: NEG
51035: PUSH
51036: LD_INT 3
51038: NEG
51039: PUSH
51040: EMPTY
51041: LIST
51042: LIST
51043: PUSH
51044: LD_INT 2
51046: PUSH
51047: LD_INT 1
51049: NEG
51050: PUSH
51051: EMPTY
51052: LIST
51053: LIST
51054: PUSH
51055: LD_INT 3
51057: PUSH
51058: LD_INT 0
51060: PUSH
51061: EMPTY
51062: LIST
51063: LIST
51064: PUSH
51065: LD_INT 3
51067: PUSH
51068: LD_INT 1
51070: PUSH
51071: EMPTY
51072: LIST
51073: LIST
51074: PUSH
51075: LD_INT 3
51077: PUSH
51078: LD_INT 2
51080: PUSH
51081: EMPTY
51082: LIST
51083: LIST
51084: PUSH
51085: LD_INT 3
51087: PUSH
51088: LD_INT 3
51090: PUSH
51091: EMPTY
51092: LIST
51093: LIST
51094: PUSH
51095: LD_INT 2
51097: PUSH
51098: LD_INT 3
51100: PUSH
51101: EMPTY
51102: LIST
51103: LIST
51104: PUSH
51105: LD_INT 2
51107: NEG
51108: PUSH
51109: LD_INT 1
51111: PUSH
51112: EMPTY
51113: LIST
51114: LIST
51115: PUSH
51116: LD_INT 3
51118: NEG
51119: PUSH
51120: LD_INT 0
51122: PUSH
51123: EMPTY
51124: LIST
51125: LIST
51126: PUSH
51127: LD_INT 3
51129: NEG
51130: PUSH
51131: LD_INT 1
51133: NEG
51134: PUSH
51135: EMPTY
51136: LIST
51137: LIST
51138: PUSH
51139: LD_INT 3
51141: NEG
51142: PUSH
51143: LD_INT 2
51145: NEG
51146: PUSH
51147: EMPTY
51148: LIST
51149: LIST
51150: PUSH
51151: LD_INT 3
51153: NEG
51154: PUSH
51155: LD_INT 3
51157: NEG
51158: PUSH
51159: EMPTY
51160: LIST
51161: LIST
51162: PUSH
51163: EMPTY
51164: LIST
51165: LIST
51166: LIST
51167: LIST
51168: LIST
51169: LIST
51170: LIST
51171: LIST
51172: LIST
51173: LIST
51174: LIST
51175: LIST
51176: LIST
51177: LIST
51178: LIST
51179: LIST
51180: LIST
51181: LIST
51182: LIST
51183: LIST
51184: LIST
51185: LIST
51186: LIST
51187: LIST
51188: LIST
51189: LIST
51190: LIST
51191: LIST
51192: LIST
51193: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51194: LD_ADDR_VAR 0 45
51198: PUSH
51199: LD_INT 0
51201: PUSH
51202: LD_INT 0
51204: PUSH
51205: EMPTY
51206: LIST
51207: LIST
51208: PUSH
51209: LD_INT 0
51211: PUSH
51212: LD_INT 1
51214: NEG
51215: PUSH
51216: EMPTY
51217: LIST
51218: LIST
51219: PUSH
51220: LD_INT 1
51222: PUSH
51223: LD_INT 0
51225: PUSH
51226: EMPTY
51227: LIST
51228: LIST
51229: PUSH
51230: LD_INT 1
51232: PUSH
51233: LD_INT 1
51235: PUSH
51236: EMPTY
51237: LIST
51238: LIST
51239: PUSH
51240: LD_INT 0
51242: PUSH
51243: LD_INT 1
51245: PUSH
51246: EMPTY
51247: LIST
51248: LIST
51249: PUSH
51250: LD_INT 1
51252: NEG
51253: PUSH
51254: LD_INT 0
51256: PUSH
51257: EMPTY
51258: LIST
51259: LIST
51260: PUSH
51261: LD_INT 1
51263: NEG
51264: PUSH
51265: LD_INT 1
51267: NEG
51268: PUSH
51269: EMPTY
51270: LIST
51271: LIST
51272: PUSH
51273: LD_INT 1
51275: NEG
51276: PUSH
51277: LD_INT 2
51279: NEG
51280: PUSH
51281: EMPTY
51282: LIST
51283: LIST
51284: PUSH
51285: LD_INT 0
51287: PUSH
51288: LD_INT 2
51290: NEG
51291: PUSH
51292: EMPTY
51293: LIST
51294: LIST
51295: PUSH
51296: LD_INT 1
51298: PUSH
51299: LD_INT 1
51301: NEG
51302: PUSH
51303: EMPTY
51304: LIST
51305: LIST
51306: PUSH
51307: LD_INT 2
51309: PUSH
51310: LD_INT 1
51312: PUSH
51313: EMPTY
51314: LIST
51315: LIST
51316: PUSH
51317: LD_INT 2
51319: PUSH
51320: LD_INT 2
51322: PUSH
51323: EMPTY
51324: LIST
51325: LIST
51326: PUSH
51327: LD_INT 1
51329: PUSH
51330: LD_INT 2
51332: PUSH
51333: EMPTY
51334: LIST
51335: LIST
51336: PUSH
51337: LD_INT 0
51339: PUSH
51340: LD_INT 2
51342: PUSH
51343: EMPTY
51344: LIST
51345: LIST
51346: PUSH
51347: LD_INT 1
51349: NEG
51350: PUSH
51351: LD_INT 1
51353: PUSH
51354: EMPTY
51355: LIST
51356: LIST
51357: PUSH
51358: LD_INT 2
51360: NEG
51361: PUSH
51362: LD_INT 1
51364: NEG
51365: PUSH
51366: EMPTY
51367: LIST
51368: LIST
51369: PUSH
51370: LD_INT 2
51372: NEG
51373: PUSH
51374: LD_INT 2
51376: NEG
51377: PUSH
51378: EMPTY
51379: LIST
51380: LIST
51381: PUSH
51382: LD_INT 2
51384: NEG
51385: PUSH
51386: LD_INT 3
51388: NEG
51389: PUSH
51390: EMPTY
51391: LIST
51392: LIST
51393: PUSH
51394: LD_INT 1
51396: NEG
51397: PUSH
51398: LD_INT 3
51400: NEG
51401: PUSH
51402: EMPTY
51403: LIST
51404: LIST
51405: PUSH
51406: LD_INT 0
51408: PUSH
51409: LD_INT 3
51411: NEG
51412: PUSH
51413: EMPTY
51414: LIST
51415: LIST
51416: PUSH
51417: LD_INT 1
51419: PUSH
51420: LD_INT 2
51422: NEG
51423: PUSH
51424: EMPTY
51425: LIST
51426: LIST
51427: PUSH
51428: LD_INT 3
51430: PUSH
51431: LD_INT 2
51433: PUSH
51434: EMPTY
51435: LIST
51436: LIST
51437: PUSH
51438: LD_INT 3
51440: PUSH
51441: LD_INT 3
51443: PUSH
51444: EMPTY
51445: LIST
51446: LIST
51447: PUSH
51448: LD_INT 2
51450: PUSH
51451: LD_INT 3
51453: PUSH
51454: EMPTY
51455: LIST
51456: LIST
51457: PUSH
51458: LD_INT 1
51460: PUSH
51461: LD_INT 3
51463: PUSH
51464: EMPTY
51465: LIST
51466: LIST
51467: PUSH
51468: LD_INT 0
51470: PUSH
51471: LD_INT 3
51473: PUSH
51474: EMPTY
51475: LIST
51476: LIST
51477: PUSH
51478: LD_INT 1
51480: NEG
51481: PUSH
51482: LD_INT 2
51484: PUSH
51485: EMPTY
51486: LIST
51487: LIST
51488: PUSH
51489: LD_INT 3
51491: NEG
51492: PUSH
51493: LD_INT 2
51495: NEG
51496: PUSH
51497: EMPTY
51498: LIST
51499: LIST
51500: PUSH
51501: LD_INT 3
51503: NEG
51504: PUSH
51505: LD_INT 3
51507: NEG
51508: PUSH
51509: EMPTY
51510: LIST
51511: LIST
51512: PUSH
51513: EMPTY
51514: LIST
51515: LIST
51516: LIST
51517: LIST
51518: LIST
51519: LIST
51520: LIST
51521: LIST
51522: LIST
51523: LIST
51524: LIST
51525: LIST
51526: LIST
51527: LIST
51528: LIST
51529: LIST
51530: LIST
51531: LIST
51532: LIST
51533: LIST
51534: LIST
51535: LIST
51536: LIST
51537: LIST
51538: LIST
51539: LIST
51540: LIST
51541: LIST
51542: LIST
51543: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51544: LD_ADDR_VAR 0 46
51548: PUSH
51549: LD_INT 0
51551: PUSH
51552: LD_INT 0
51554: PUSH
51555: EMPTY
51556: LIST
51557: LIST
51558: PUSH
51559: LD_INT 0
51561: PUSH
51562: LD_INT 1
51564: NEG
51565: PUSH
51566: EMPTY
51567: LIST
51568: LIST
51569: PUSH
51570: LD_INT 1
51572: PUSH
51573: LD_INT 0
51575: PUSH
51576: EMPTY
51577: LIST
51578: LIST
51579: PUSH
51580: LD_INT 1
51582: PUSH
51583: LD_INT 1
51585: PUSH
51586: EMPTY
51587: LIST
51588: LIST
51589: PUSH
51590: LD_INT 0
51592: PUSH
51593: LD_INT 1
51595: PUSH
51596: EMPTY
51597: LIST
51598: LIST
51599: PUSH
51600: LD_INT 1
51602: NEG
51603: PUSH
51604: LD_INT 0
51606: PUSH
51607: EMPTY
51608: LIST
51609: LIST
51610: PUSH
51611: LD_INT 1
51613: NEG
51614: PUSH
51615: LD_INT 1
51617: NEG
51618: PUSH
51619: EMPTY
51620: LIST
51621: LIST
51622: PUSH
51623: LD_INT 1
51625: NEG
51626: PUSH
51627: LD_INT 2
51629: NEG
51630: PUSH
51631: EMPTY
51632: LIST
51633: LIST
51634: PUSH
51635: LD_INT 0
51637: PUSH
51638: LD_INT 2
51640: NEG
51641: PUSH
51642: EMPTY
51643: LIST
51644: LIST
51645: PUSH
51646: LD_INT 1
51648: PUSH
51649: LD_INT 1
51651: NEG
51652: PUSH
51653: EMPTY
51654: LIST
51655: LIST
51656: PUSH
51657: LD_INT 2
51659: PUSH
51660: LD_INT 0
51662: PUSH
51663: EMPTY
51664: LIST
51665: LIST
51666: PUSH
51667: LD_INT 2
51669: PUSH
51670: LD_INT 1
51672: PUSH
51673: EMPTY
51674: LIST
51675: LIST
51676: PUSH
51677: LD_INT 1
51679: PUSH
51680: LD_INT 2
51682: PUSH
51683: EMPTY
51684: LIST
51685: LIST
51686: PUSH
51687: LD_INT 0
51689: PUSH
51690: LD_INT 2
51692: PUSH
51693: EMPTY
51694: LIST
51695: LIST
51696: PUSH
51697: LD_INT 1
51699: NEG
51700: PUSH
51701: LD_INT 1
51703: PUSH
51704: EMPTY
51705: LIST
51706: LIST
51707: PUSH
51708: LD_INT 2
51710: NEG
51711: PUSH
51712: LD_INT 0
51714: PUSH
51715: EMPTY
51716: LIST
51717: LIST
51718: PUSH
51719: LD_INT 2
51721: NEG
51722: PUSH
51723: LD_INT 1
51725: NEG
51726: PUSH
51727: EMPTY
51728: LIST
51729: LIST
51730: PUSH
51731: LD_INT 1
51733: NEG
51734: PUSH
51735: LD_INT 3
51737: NEG
51738: PUSH
51739: EMPTY
51740: LIST
51741: LIST
51742: PUSH
51743: LD_INT 0
51745: PUSH
51746: LD_INT 3
51748: NEG
51749: PUSH
51750: EMPTY
51751: LIST
51752: LIST
51753: PUSH
51754: LD_INT 1
51756: PUSH
51757: LD_INT 2
51759: NEG
51760: PUSH
51761: EMPTY
51762: LIST
51763: LIST
51764: PUSH
51765: LD_INT 2
51767: PUSH
51768: LD_INT 1
51770: NEG
51771: PUSH
51772: EMPTY
51773: LIST
51774: LIST
51775: PUSH
51776: LD_INT 3
51778: PUSH
51779: LD_INT 0
51781: PUSH
51782: EMPTY
51783: LIST
51784: LIST
51785: PUSH
51786: LD_INT 3
51788: PUSH
51789: LD_INT 1
51791: PUSH
51792: EMPTY
51793: LIST
51794: LIST
51795: PUSH
51796: LD_INT 1
51798: PUSH
51799: LD_INT 3
51801: PUSH
51802: EMPTY
51803: LIST
51804: LIST
51805: PUSH
51806: LD_INT 0
51808: PUSH
51809: LD_INT 3
51811: PUSH
51812: EMPTY
51813: LIST
51814: LIST
51815: PUSH
51816: LD_INT 1
51818: NEG
51819: PUSH
51820: LD_INT 2
51822: PUSH
51823: EMPTY
51824: LIST
51825: LIST
51826: PUSH
51827: LD_INT 2
51829: NEG
51830: PUSH
51831: LD_INT 1
51833: PUSH
51834: EMPTY
51835: LIST
51836: LIST
51837: PUSH
51838: LD_INT 3
51840: NEG
51841: PUSH
51842: LD_INT 0
51844: PUSH
51845: EMPTY
51846: LIST
51847: LIST
51848: PUSH
51849: LD_INT 3
51851: NEG
51852: PUSH
51853: LD_INT 1
51855: NEG
51856: PUSH
51857: EMPTY
51858: LIST
51859: LIST
51860: PUSH
51861: EMPTY
51862: LIST
51863: LIST
51864: LIST
51865: LIST
51866: LIST
51867: LIST
51868: LIST
51869: LIST
51870: LIST
51871: LIST
51872: LIST
51873: LIST
51874: LIST
51875: LIST
51876: LIST
51877: LIST
51878: LIST
51879: LIST
51880: LIST
51881: LIST
51882: LIST
51883: LIST
51884: LIST
51885: LIST
51886: LIST
51887: LIST
51888: LIST
51889: LIST
51890: LIST
51891: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51892: LD_ADDR_VAR 0 47
51896: PUSH
51897: LD_INT 0
51899: PUSH
51900: LD_INT 0
51902: PUSH
51903: EMPTY
51904: LIST
51905: LIST
51906: PUSH
51907: LD_INT 0
51909: PUSH
51910: LD_INT 1
51912: NEG
51913: PUSH
51914: EMPTY
51915: LIST
51916: LIST
51917: PUSH
51918: LD_INT 1
51920: PUSH
51921: LD_INT 0
51923: PUSH
51924: EMPTY
51925: LIST
51926: LIST
51927: PUSH
51928: LD_INT 1
51930: PUSH
51931: LD_INT 1
51933: PUSH
51934: EMPTY
51935: LIST
51936: LIST
51937: PUSH
51938: LD_INT 0
51940: PUSH
51941: LD_INT 1
51943: PUSH
51944: EMPTY
51945: LIST
51946: LIST
51947: PUSH
51948: LD_INT 1
51950: NEG
51951: PUSH
51952: LD_INT 0
51954: PUSH
51955: EMPTY
51956: LIST
51957: LIST
51958: PUSH
51959: LD_INT 1
51961: NEG
51962: PUSH
51963: LD_INT 1
51965: NEG
51966: PUSH
51967: EMPTY
51968: LIST
51969: LIST
51970: PUSH
51971: LD_INT 1
51973: NEG
51974: PUSH
51975: LD_INT 2
51977: NEG
51978: PUSH
51979: EMPTY
51980: LIST
51981: LIST
51982: PUSH
51983: LD_INT 0
51985: PUSH
51986: LD_INT 2
51988: NEG
51989: PUSH
51990: EMPTY
51991: LIST
51992: LIST
51993: PUSH
51994: LD_INT 1
51996: PUSH
51997: LD_INT 1
51999: NEG
52000: PUSH
52001: EMPTY
52002: LIST
52003: LIST
52004: PUSH
52005: LD_INT 2
52007: NEG
52008: PUSH
52009: LD_INT 1
52011: NEG
52012: PUSH
52013: EMPTY
52014: LIST
52015: LIST
52016: PUSH
52017: LD_INT 2
52019: NEG
52020: PUSH
52021: LD_INT 2
52023: NEG
52024: PUSH
52025: EMPTY
52026: LIST
52027: LIST
52028: PUSH
52029: EMPTY
52030: LIST
52031: LIST
52032: LIST
52033: LIST
52034: LIST
52035: LIST
52036: LIST
52037: LIST
52038: LIST
52039: LIST
52040: LIST
52041: LIST
52042: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
52043: LD_ADDR_VAR 0 48
52047: PUSH
52048: LD_INT 0
52050: PUSH
52051: LD_INT 0
52053: PUSH
52054: EMPTY
52055: LIST
52056: LIST
52057: PUSH
52058: LD_INT 0
52060: PUSH
52061: LD_INT 1
52063: NEG
52064: PUSH
52065: EMPTY
52066: LIST
52067: LIST
52068: PUSH
52069: LD_INT 1
52071: PUSH
52072: LD_INT 0
52074: PUSH
52075: EMPTY
52076: LIST
52077: LIST
52078: PUSH
52079: LD_INT 1
52081: PUSH
52082: LD_INT 1
52084: PUSH
52085: EMPTY
52086: LIST
52087: LIST
52088: PUSH
52089: LD_INT 0
52091: PUSH
52092: LD_INT 1
52094: PUSH
52095: EMPTY
52096: LIST
52097: LIST
52098: PUSH
52099: LD_INT 1
52101: NEG
52102: PUSH
52103: LD_INT 0
52105: PUSH
52106: EMPTY
52107: LIST
52108: LIST
52109: PUSH
52110: LD_INT 1
52112: NEG
52113: PUSH
52114: LD_INT 1
52116: NEG
52117: PUSH
52118: EMPTY
52119: LIST
52120: LIST
52121: PUSH
52122: LD_INT 1
52124: NEG
52125: PUSH
52126: LD_INT 2
52128: NEG
52129: PUSH
52130: EMPTY
52131: LIST
52132: LIST
52133: PUSH
52134: LD_INT 0
52136: PUSH
52137: LD_INT 2
52139: NEG
52140: PUSH
52141: EMPTY
52142: LIST
52143: LIST
52144: PUSH
52145: LD_INT 1
52147: PUSH
52148: LD_INT 1
52150: NEG
52151: PUSH
52152: EMPTY
52153: LIST
52154: LIST
52155: PUSH
52156: LD_INT 2
52158: PUSH
52159: LD_INT 0
52161: PUSH
52162: EMPTY
52163: LIST
52164: LIST
52165: PUSH
52166: LD_INT 2
52168: PUSH
52169: LD_INT 1
52171: PUSH
52172: EMPTY
52173: LIST
52174: LIST
52175: PUSH
52176: EMPTY
52177: LIST
52178: LIST
52179: LIST
52180: LIST
52181: LIST
52182: LIST
52183: LIST
52184: LIST
52185: LIST
52186: LIST
52187: LIST
52188: LIST
52189: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
52190: LD_ADDR_VAR 0 49
52194: PUSH
52195: LD_INT 0
52197: PUSH
52198: LD_INT 0
52200: PUSH
52201: EMPTY
52202: LIST
52203: LIST
52204: PUSH
52205: LD_INT 0
52207: PUSH
52208: LD_INT 1
52210: NEG
52211: PUSH
52212: EMPTY
52213: LIST
52214: LIST
52215: PUSH
52216: LD_INT 1
52218: PUSH
52219: LD_INT 0
52221: PUSH
52222: EMPTY
52223: LIST
52224: LIST
52225: PUSH
52226: LD_INT 1
52228: PUSH
52229: LD_INT 1
52231: PUSH
52232: EMPTY
52233: LIST
52234: LIST
52235: PUSH
52236: LD_INT 0
52238: PUSH
52239: LD_INT 1
52241: PUSH
52242: EMPTY
52243: LIST
52244: LIST
52245: PUSH
52246: LD_INT 1
52248: NEG
52249: PUSH
52250: LD_INT 0
52252: PUSH
52253: EMPTY
52254: LIST
52255: LIST
52256: PUSH
52257: LD_INT 1
52259: NEG
52260: PUSH
52261: LD_INT 1
52263: NEG
52264: PUSH
52265: EMPTY
52266: LIST
52267: LIST
52268: PUSH
52269: LD_INT 1
52271: PUSH
52272: LD_INT 1
52274: NEG
52275: PUSH
52276: EMPTY
52277: LIST
52278: LIST
52279: PUSH
52280: LD_INT 2
52282: PUSH
52283: LD_INT 0
52285: PUSH
52286: EMPTY
52287: LIST
52288: LIST
52289: PUSH
52290: LD_INT 2
52292: PUSH
52293: LD_INT 1
52295: PUSH
52296: EMPTY
52297: LIST
52298: LIST
52299: PUSH
52300: LD_INT 2
52302: PUSH
52303: LD_INT 2
52305: PUSH
52306: EMPTY
52307: LIST
52308: LIST
52309: PUSH
52310: LD_INT 1
52312: PUSH
52313: LD_INT 2
52315: PUSH
52316: EMPTY
52317: LIST
52318: LIST
52319: PUSH
52320: EMPTY
52321: LIST
52322: LIST
52323: LIST
52324: LIST
52325: LIST
52326: LIST
52327: LIST
52328: LIST
52329: LIST
52330: LIST
52331: LIST
52332: LIST
52333: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
52334: LD_ADDR_VAR 0 50
52338: PUSH
52339: LD_INT 0
52341: PUSH
52342: LD_INT 0
52344: PUSH
52345: EMPTY
52346: LIST
52347: LIST
52348: PUSH
52349: LD_INT 0
52351: PUSH
52352: LD_INT 1
52354: NEG
52355: PUSH
52356: EMPTY
52357: LIST
52358: LIST
52359: PUSH
52360: LD_INT 1
52362: PUSH
52363: LD_INT 0
52365: PUSH
52366: EMPTY
52367: LIST
52368: LIST
52369: PUSH
52370: LD_INT 1
52372: PUSH
52373: LD_INT 1
52375: PUSH
52376: EMPTY
52377: LIST
52378: LIST
52379: PUSH
52380: LD_INT 0
52382: PUSH
52383: LD_INT 1
52385: PUSH
52386: EMPTY
52387: LIST
52388: LIST
52389: PUSH
52390: LD_INT 1
52392: NEG
52393: PUSH
52394: LD_INT 0
52396: PUSH
52397: EMPTY
52398: LIST
52399: LIST
52400: PUSH
52401: LD_INT 1
52403: NEG
52404: PUSH
52405: LD_INT 1
52407: NEG
52408: PUSH
52409: EMPTY
52410: LIST
52411: LIST
52412: PUSH
52413: LD_INT 2
52415: PUSH
52416: LD_INT 1
52418: PUSH
52419: EMPTY
52420: LIST
52421: LIST
52422: PUSH
52423: LD_INT 2
52425: PUSH
52426: LD_INT 2
52428: PUSH
52429: EMPTY
52430: LIST
52431: LIST
52432: PUSH
52433: LD_INT 1
52435: PUSH
52436: LD_INT 2
52438: PUSH
52439: EMPTY
52440: LIST
52441: LIST
52442: PUSH
52443: LD_INT 0
52445: PUSH
52446: LD_INT 2
52448: PUSH
52449: EMPTY
52450: LIST
52451: LIST
52452: PUSH
52453: LD_INT 1
52455: NEG
52456: PUSH
52457: LD_INT 1
52459: PUSH
52460: EMPTY
52461: LIST
52462: LIST
52463: PUSH
52464: EMPTY
52465: LIST
52466: LIST
52467: LIST
52468: LIST
52469: LIST
52470: LIST
52471: LIST
52472: LIST
52473: LIST
52474: LIST
52475: LIST
52476: LIST
52477: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
52478: LD_ADDR_VAR 0 51
52482: PUSH
52483: LD_INT 0
52485: PUSH
52486: LD_INT 0
52488: PUSH
52489: EMPTY
52490: LIST
52491: LIST
52492: PUSH
52493: LD_INT 0
52495: PUSH
52496: LD_INT 1
52498: NEG
52499: PUSH
52500: EMPTY
52501: LIST
52502: LIST
52503: PUSH
52504: LD_INT 1
52506: PUSH
52507: LD_INT 0
52509: PUSH
52510: EMPTY
52511: LIST
52512: LIST
52513: PUSH
52514: LD_INT 1
52516: PUSH
52517: LD_INT 1
52519: PUSH
52520: EMPTY
52521: LIST
52522: LIST
52523: PUSH
52524: LD_INT 0
52526: PUSH
52527: LD_INT 1
52529: PUSH
52530: EMPTY
52531: LIST
52532: LIST
52533: PUSH
52534: LD_INT 1
52536: NEG
52537: PUSH
52538: LD_INT 0
52540: PUSH
52541: EMPTY
52542: LIST
52543: LIST
52544: PUSH
52545: LD_INT 1
52547: NEG
52548: PUSH
52549: LD_INT 1
52551: NEG
52552: PUSH
52553: EMPTY
52554: LIST
52555: LIST
52556: PUSH
52557: LD_INT 1
52559: PUSH
52560: LD_INT 2
52562: PUSH
52563: EMPTY
52564: LIST
52565: LIST
52566: PUSH
52567: LD_INT 0
52569: PUSH
52570: LD_INT 2
52572: PUSH
52573: EMPTY
52574: LIST
52575: LIST
52576: PUSH
52577: LD_INT 1
52579: NEG
52580: PUSH
52581: LD_INT 1
52583: PUSH
52584: EMPTY
52585: LIST
52586: LIST
52587: PUSH
52588: LD_INT 2
52590: NEG
52591: PUSH
52592: LD_INT 0
52594: PUSH
52595: EMPTY
52596: LIST
52597: LIST
52598: PUSH
52599: LD_INT 2
52601: NEG
52602: PUSH
52603: LD_INT 1
52605: NEG
52606: PUSH
52607: EMPTY
52608: LIST
52609: LIST
52610: PUSH
52611: EMPTY
52612: LIST
52613: LIST
52614: LIST
52615: LIST
52616: LIST
52617: LIST
52618: LIST
52619: LIST
52620: LIST
52621: LIST
52622: LIST
52623: LIST
52624: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52625: LD_ADDR_VAR 0 52
52629: PUSH
52630: LD_INT 0
52632: PUSH
52633: LD_INT 0
52635: PUSH
52636: EMPTY
52637: LIST
52638: LIST
52639: PUSH
52640: LD_INT 0
52642: PUSH
52643: LD_INT 1
52645: NEG
52646: PUSH
52647: EMPTY
52648: LIST
52649: LIST
52650: PUSH
52651: LD_INT 1
52653: PUSH
52654: LD_INT 0
52656: PUSH
52657: EMPTY
52658: LIST
52659: LIST
52660: PUSH
52661: LD_INT 1
52663: PUSH
52664: LD_INT 1
52666: PUSH
52667: EMPTY
52668: LIST
52669: LIST
52670: PUSH
52671: LD_INT 0
52673: PUSH
52674: LD_INT 1
52676: PUSH
52677: EMPTY
52678: LIST
52679: LIST
52680: PUSH
52681: LD_INT 1
52683: NEG
52684: PUSH
52685: LD_INT 0
52687: PUSH
52688: EMPTY
52689: LIST
52690: LIST
52691: PUSH
52692: LD_INT 1
52694: NEG
52695: PUSH
52696: LD_INT 1
52698: NEG
52699: PUSH
52700: EMPTY
52701: LIST
52702: LIST
52703: PUSH
52704: LD_INT 1
52706: NEG
52707: PUSH
52708: LD_INT 2
52710: NEG
52711: PUSH
52712: EMPTY
52713: LIST
52714: LIST
52715: PUSH
52716: LD_INT 1
52718: NEG
52719: PUSH
52720: LD_INT 1
52722: PUSH
52723: EMPTY
52724: LIST
52725: LIST
52726: PUSH
52727: LD_INT 2
52729: NEG
52730: PUSH
52731: LD_INT 0
52733: PUSH
52734: EMPTY
52735: LIST
52736: LIST
52737: PUSH
52738: LD_INT 2
52740: NEG
52741: PUSH
52742: LD_INT 1
52744: NEG
52745: PUSH
52746: EMPTY
52747: LIST
52748: LIST
52749: PUSH
52750: LD_INT 2
52752: NEG
52753: PUSH
52754: LD_INT 2
52756: NEG
52757: PUSH
52758: EMPTY
52759: LIST
52760: LIST
52761: PUSH
52762: EMPTY
52763: LIST
52764: LIST
52765: LIST
52766: LIST
52767: LIST
52768: LIST
52769: LIST
52770: LIST
52771: LIST
52772: LIST
52773: LIST
52774: LIST
52775: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52776: LD_ADDR_VAR 0 53
52780: PUSH
52781: LD_INT 0
52783: PUSH
52784: LD_INT 0
52786: PUSH
52787: EMPTY
52788: LIST
52789: LIST
52790: PUSH
52791: LD_INT 0
52793: PUSH
52794: LD_INT 1
52796: NEG
52797: PUSH
52798: EMPTY
52799: LIST
52800: LIST
52801: PUSH
52802: LD_INT 1
52804: PUSH
52805: LD_INT 0
52807: PUSH
52808: EMPTY
52809: LIST
52810: LIST
52811: PUSH
52812: LD_INT 1
52814: PUSH
52815: LD_INT 1
52817: PUSH
52818: EMPTY
52819: LIST
52820: LIST
52821: PUSH
52822: LD_INT 0
52824: PUSH
52825: LD_INT 1
52827: PUSH
52828: EMPTY
52829: LIST
52830: LIST
52831: PUSH
52832: LD_INT 1
52834: NEG
52835: PUSH
52836: LD_INT 0
52838: PUSH
52839: EMPTY
52840: LIST
52841: LIST
52842: PUSH
52843: LD_INT 1
52845: NEG
52846: PUSH
52847: LD_INT 1
52849: NEG
52850: PUSH
52851: EMPTY
52852: LIST
52853: LIST
52854: PUSH
52855: LD_INT 1
52857: NEG
52858: PUSH
52859: LD_INT 2
52861: NEG
52862: PUSH
52863: EMPTY
52864: LIST
52865: LIST
52866: PUSH
52867: LD_INT 0
52869: PUSH
52870: LD_INT 2
52872: NEG
52873: PUSH
52874: EMPTY
52875: LIST
52876: LIST
52877: PUSH
52878: LD_INT 1
52880: PUSH
52881: LD_INT 1
52883: NEG
52884: PUSH
52885: EMPTY
52886: LIST
52887: LIST
52888: PUSH
52889: LD_INT 2
52891: PUSH
52892: LD_INT 0
52894: PUSH
52895: EMPTY
52896: LIST
52897: LIST
52898: PUSH
52899: LD_INT 2
52901: PUSH
52902: LD_INT 1
52904: PUSH
52905: EMPTY
52906: LIST
52907: LIST
52908: PUSH
52909: LD_INT 2
52911: PUSH
52912: LD_INT 2
52914: PUSH
52915: EMPTY
52916: LIST
52917: LIST
52918: PUSH
52919: LD_INT 1
52921: PUSH
52922: LD_INT 2
52924: PUSH
52925: EMPTY
52926: LIST
52927: LIST
52928: PUSH
52929: LD_INT 0
52931: PUSH
52932: LD_INT 2
52934: PUSH
52935: EMPTY
52936: LIST
52937: LIST
52938: PUSH
52939: LD_INT 1
52941: NEG
52942: PUSH
52943: LD_INT 1
52945: PUSH
52946: EMPTY
52947: LIST
52948: LIST
52949: PUSH
52950: LD_INT 2
52952: NEG
52953: PUSH
52954: LD_INT 0
52956: PUSH
52957: EMPTY
52958: LIST
52959: LIST
52960: PUSH
52961: LD_INT 2
52963: NEG
52964: PUSH
52965: LD_INT 1
52967: NEG
52968: PUSH
52969: EMPTY
52970: LIST
52971: LIST
52972: PUSH
52973: LD_INT 2
52975: NEG
52976: PUSH
52977: LD_INT 2
52979: NEG
52980: PUSH
52981: EMPTY
52982: LIST
52983: LIST
52984: PUSH
52985: EMPTY
52986: LIST
52987: LIST
52988: LIST
52989: LIST
52990: LIST
52991: LIST
52992: LIST
52993: LIST
52994: LIST
52995: LIST
52996: LIST
52997: LIST
52998: LIST
52999: LIST
53000: LIST
53001: LIST
53002: LIST
53003: LIST
53004: LIST
53005: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53006: LD_ADDR_VAR 0 54
53010: PUSH
53011: LD_INT 0
53013: PUSH
53014: LD_INT 0
53016: PUSH
53017: EMPTY
53018: LIST
53019: LIST
53020: PUSH
53021: LD_INT 0
53023: PUSH
53024: LD_INT 1
53026: NEG
53027: PUSH
53028: EMPTY
53029: LIST
53030: LIST
53031: PUSH
53032: LD_INT 1
53034: PUSH
53035: LD_INT 0
53037: PUSH
53038: EMPTY
53039: LIST
53040: LIST
53041: PUSH
53042: LD_INT 1
53044: PUSH
53045: LD_INT 1
53047: PUSH
53048: EMPTY
53049: LIST
53050: LIST
53051: PUSH
53052: LD_INT 0
53054: PUSH
53055: LD_INT 1
53057: PUSH
53058: EMPTY
53059: LIST
53060: LIST
53061: PUSH
53062: LD_INT 1
53064: NEG
53065: PUSH
53066: LD_INT 0
53068: PUSH
53069: EMPTY
53070: LIST
53071: LIST
53072: PUSH
53073: LD_INT 1
53075: NEG
53076: PUSH
53077: LD_INT 1
53079: NEG
53080: PUSH
53081: EMPTY
53082: LIST
53083: LIST
53084: PUSH
53085: LD_INT 1
53087: NEG
53088: PUSH
53089: LD_INT 2
53091: NEG
53092: PUSH
53093: EMPTY
53094: LIST
53095: LIST
53096: PUSH
53097: LD_INT 0
53099: PUSH
53100: LD_INT 2
53102: NEG
53103: PUSH
53104: EMPTY
53105: LIST
53106: LIST
53107: PUSH
53108: LD_INT 1
53110: PUSH
53111: LD_INT 1
53113: NEG
53114: PUSH
53115: EMPTY
53116: LIST
53117: LIST
53118: PUSH
53119: LD_INT 2
53121: PUSH
53122: LD_INT 0
53124: PUSH
53125: EMPTY
53126: LIST
53127: LIST
53128: PUSH
53129: LD_INT 2
53131: PUSH
53132: LD_INT 1
53134: PUSH
53135: EMPTY
53136: LIST
53137: LIST
53138: PUSH
53139: LD_INT 2
53141: PUSH
53142: LD_INT 2
53144: PUSH
53145: EMPTY
53146: LIST
53147: LIST
53148: PUSH
53149: LD_INT 1
53151: PUSH
53152: LD_INT 2
53154: PUSH
53155: EMPTY
53156: LIST
53157: LIST
53158: PUSH
53159: LD_INT 0
53161: PUSH
53162: LD_INT 2
53164: PUSH
53165: EMPTY
53166: LIST
53167: LIST
53168: PUSH
53169: LD_INT 1
53171: NEG
53172: PUSH
53173: LD_INT 1
53175: PUSH
53176: EMPTY
53177: LIST
53178: LIST
53179: PUSH
53180: LD_INT 2
53182: NEG
53183: PUSH
53184: LD_INT 0
53186: PUSH
53187: EMPTY
53188: LIST
53189: LIST
53190: PUSH
53191: LD_INT 2
53193: NEG
53194: PUSH
53195: LD_INT 1
53197: NEG
53198: PUSH
53199: EMPTY
53200: LIST
53201: LIST
53202: PUSH
53203: LD_INT 2
53205: NEG
53206: PUSH
53207: LD_INT 2
53209: NEG
53210: PUSH
53211: EMPTY
53212: LIST
53213: LIST
53214: PUSH
53215: EMPTY
53216: LIST
53217: LIST
53218: LIST
53219: LIST
53220: LIST
53221: LIST
53222: LIST
53223: LIST
53224: LIST
53225: LIST
53226: LIST
53227: LIST
53228: LIST
53229: LIST
53230: LIST
53231: LIST
53232: LIST
53233: LIST
53234: LIST
53235: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53236: LD_ADDR_VAR 0 55
53240: PUSH
53241: LD_INT 0
53243: PUSH
53244: LD_INT 0
53246: PUSH
53247: EMPTY
53248: LIST
53249: LIST
53250: PUSH
53251: LD_INT 0
53253: PUSH
53254: LD_INT 1
53256: NEG
53257: PUSH
53258: EMPTY
53259: LIST
53260: LIST
53261: PUSH
53262: LD_INT 1
53264: PUSH
53265: LD_INT 0
53267: PUSH
53268: EMPTY
53269: LIST
53270: LIST
53271: PUSH
53272: LD_INT 1
53274: PUSH
53275: LD_INT 1
53277: PUSH
53278: EMPTY
53279: LIST
53280: LIST
53281: PUSH
53282: LD_INT 0
53284: PUSH
53285: LD_INT 1
53287: PUSH
53288: EMPTY
53289: LIST
53290: LIST
53291: PUSH
53292: LD_INT 1
53294: NEG
53295: PUSH
53296: LD_INT 0
53298: PUSH
53299: EMPTY
53300: LIST
53301: LIST
53302: PUSH
53303: LD_INT 1
53305: NEG
53306: PUSH
53307: LD_INT 1
53309: NEG
53310: PUSH
53311: EMPTY
53312: LIST
53313: LIST
53314: PUSH
53315: LD_INT 1
53317: NEG
53318: PUSH
53319: LD_INT 2
53321: NEG
53322: PUSH
53323: EMPTY
53324: LIST
53325: LIST
53326: PUSH
53327: LD_INT 0
53329: PUSH
53330: LD_INT 2
53332: NEG
53333: PUSH
53334: EMPTY
53335: LIST
53336: LIST
53337: PUSH
53338: LD_INT 1
53340: PUSH
53341: LD_INT 1
53343: NEG
53344: PUSH
53345: EMPTY
53346: LIST
53347: LIST
53348: PUSH
53349: LD_INT 2
53351: PUSH
53352: LD_INT 0
53354: PUSH
53355: EMPTY
53356: LIST
53357: LIST
53358: PUSH
53359: LD_INT 2
53361: PUSH
53362: LD_INT 1
53364: PUSH
53365: EMPTY
53366: LIST
53367: LIST
53368: PUSH
53369: LD_INT 2
53371: PUSH
53372: LD_INT 2
53374: PUSH
53375: EMPTY
53376: LIST
53377: LIST
53378: PUSH
53379: LD_INT 1
53381: PUSH
53382: LD_INT 2
53384: PUSH
53385: EMPTY
53386: LIST
53387: LIST
53388: PUSH
53389: LD_INT 0
53391: PUSH
53392: LD_INT 2
53394: PUSH
53395: EMPTY
53396: LIST
53397: LIST
53398: PUSH
53399: LD_INT 1
53401: NEG
53402: PUSH
53403: LD_INT 1
53405: PUSH
53406: EMPTY
53407: LIST
53408: LIST
53409: PUSH
53410: LD_INT 2
53412: NEG
53413: PUSH
53414: LD_INT 0
53416: PUSH
53417: EMPTY
53418: LIST
53419: LIST
53420: PUSH
53421: LD_INT 2
53423: NEG
53424: PUSH
53425: LD_INT 1
53427: NEG
53428: PUSH
53429: EMPTY
53430: LIST
53431: LIST
53432: PUSH
53433: LD_INT 2
53435: NEG
53436: PUSH
53437: LD_INT 2
53439: NEG
53440: PUSH
53441: EMPTY
53442: LIST
53443: LIST
53444: PUSH
53445: EMPTY
53446: LIST
53447: LIST
53448: LIST
53449: LIST
53450: LIST
53451: LIST
53452: LIST
53453: LIST
53454: LIST
53455: LIST
53456: LIST
53457: LIST
53458: LIST
53459: LIST
53460: LIST
53461: LIST
53462: LIST
53463: LIST
53464: LIST
53465: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53466: LD_ADDR_VAR 0 56
53470: PUSH
53471: LD_INT 0
53473: PUSH
53474: LD_INT 0
53476: PUSH
53477: EMPTY
53478: LIST
53479: LIST
53480: PUSH
53481: LD_INT 0
53483: PUSH
53484: LD_INT 1
53486: NEG
53487: PUSH
53488: EMPTY
53489: LIST
53490: LIST
53491: PUSH
53492: LD_INT 1
53494: PUSH
53495: LD_INT 0
53497: PUSH
53498: EMPTY
53499: LIST
53500: LIST
53501: PUSH
53502: LD_INT 1
53504: PUSH
53505: LD_INT 1
53507: PUSH
53508: EMPTY
53509: LIST
53510: LIST
53511: PUSH
53512: LD_INT 0
53514: PUSH
53515: LD_INT 1
53517: PUSH
53518: EMPTY
53519: LIST
53520: LIST
53521: PUSH
53522: LD_INT 1
53524: NEG
53525: PUSH
53526: LD_INT 0
53528: PUSH
53529: EMPTY
53530: LIST
53531: LIST
53532: PUSH
53533: LD_INT 1
53535: NEG
53536: PUSH
53537: LD_INT 1
53539: NEG
53540: PUSH
53541: EMPTY
53542: LIST
53543: LIST
53544: PUSH
53545: LD_INT 1
53547: NEG
53548: PUSH
53549: LD_INT 2
53551: NEG
53552: PUSH
53553: EMPTY
53554: LIST
53555: LIST
53556: PUSH
53557: LD_INT 0
53559: PUSH
53560: LD_INT 2
53562: NEG
53563: PUSH
53564: EMPTY
53565: LIST
53566: LIST
53567: PUSH
53568: LD_INT 1
53570: PUSH
53571: LD_INT 1
53573: NEG
53574: PUSH
53575: EMPTY
53576: LIST
53577: LIST
53578: PUSH
53579: LD_INT 2
53581: PUSH
53582: LD_INT 0
53584: PUSH
53585: EMPTY
53586: LIST
53587: LIST
53588: PUSH
53589: LD_INT 2
53591: PUSH
53592: LD_INT 1
53594: PUSH
53595: EMPTY
53596: LIST
53597: LIST
53598: PUSH
53599: LD_INT 2
53601: PUSH
53602: LD_INT 2
53604: PUSH
53605: EMPTY
53606: LIST
53607: LIST
53608: PUSH
53609: LD_INT 1
53611: PUSH
53612: LD_INT 2
53614: PUSH
53615: EMPTY
53616: LIST
53617: LIST
53618: PUSH
53619: LD_INT 0
53621: PUSH
53622: LD_INT 2
53624: PUSH
53625: EMPTY
53626: LIST
53627: LIST
53628: PUSH
53629: LD_INT 1
53631: NEG
53632: PUSH
53633: LD_INT 1
53635: PUSH
53636: EMPTY
53637: LIST
53638: LIST
53639: PUSH
53640: LD_INT 2
53642: NEG
53643: PUSH
53644: LD_INT 0
53646: PUSH
53647: EMPTY
53648: LIST
53649: LIST
53650: PUSH
53651: LD_INT 2
53653: NEG
53654: PUSH
53655: LD_INT 1
53657: NEG
53658: PUSH
53659: EMPTY
53660: LIST
53661: LIST
53662: PUSH
53663: LD_INT 2
53665: NEG
53666: PUSH
53667: LD_INT 2
53669: NEG
53670: PUSH
53671: EMPTY
53672: LIST
53673: LIST
53674: PUSH
53675: EMPTY
53676: LIST
53677: LIST
53678: LIST
53679: LIST
53680: LIST
53681: LIST
53682: LIST
53683: LIST
53684: LIST
53685: LIST
53686: LIST
53687: LIST
53688: LIST
53689: LIST
53690: LIST
53691: LIST
53692: LIST
53693: LIST
53694: LIST
53695: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53696: LD_ADDR_VAR 0 57
53700: PUSH
53701: LD_INT 0
53703: PUSH
53704: LD_INT 0
53706: PUSH
53707: EMPTY
53708: LIST
53709: LIST
53710: PUSH
53711: LD_INT 0
53713: PUSH
53714: LD_INT 1
53716: NEG
53717: PUSH
53718: EMPTY
53719: LIST
53720: LIST
53721: PUSH
53722: LD_INT 1
53724: PUSH
53725: LD_INT 0
53727: PUSH
53728: EMPTY
53729: LIST
53730: LIST
53731: PUSH
53732: LD_INT 1
53734: PUSH
53735: LD_INT 1
53737: PUSH
53738: EMPTY
53739: LIST
53740: LIST
53741: PUSH
53742: LD_INT 0
53744: PUSH
53745: LD_INT 1
53747: PUSH
53748: EMPTY
53749: LIST
53750: LIST
53751: PUSH
53752: LD_INT 1
53754: NEG
53755: PUSH
53756: LD_INT 0
53758: PUSH
53759: EMPTY
53760: LIST
53761: LIST
53762: PUSH
53763: LD_INT 1
53765: NEG
53766: PUSH
53767: LD_INT 1
53769: NEG
53770: PUSH
53771: EMPTY
53772: LIST
53773: LIST
53774: PUSH
53775: LD_INT 1
53777: NEG
53778: PUSH
53779: LD_INT 2
53781: NEG
53782: PUSH
53783: EMPTY
53784: LIST
53785: LIST
53786: PUSH
53787: LD_INT 0
53789: PUSH
53790: LD_INT 2
53792: NEG
53793: PUSH
53794: EMPTY
53795: LIST
53796: LIST
53797: PUSH
53798: LD_INT 1
53800: PUSH
53801: LD_INT 1
53803: NEG
53804: PUSH
53805: EMPTY
53806: LIST
53807: LIST
53808: PUSH
53809: LD_INT 2
53811: PUSH
53812: LD_INT 0
53814: PUSH
53815: EMPTY
53816: LIST
53817: LIST
53818: PUSH
53819: LD_INT 2
53821: PUSH
53822: LD_INT 1
53824: PUSH
53825: EMPTY
53826: LIST
53827: LIST
53828: PUSH
53829: LD_INT 2
53831: PUSH
53832: LD_INT 2
53834: PUSH
53835: EMPTY
53836: LIST
53837: LIST
53838: PUSH
53839: LD_INT 1
53841: PUSH
53842: LD_INT 2
53844: PUSH
53845: EMPTY
53846: LIST
53847: LIST
53848: PUSH
53849: LD_INT 0
53851: PUSH
53852: LD_INT 2
53854: PUSH
53855: EMPTY
53856: LIST
53857: LIST
53858: PUSH
53859: LD_INT 1
53861: NEG
53862: PUSH
53863: LD_INT 1
53865: PUSH
53866: EMPTY
53867: LIST
53868: LIST
53869: PUSH
53870: LD_INT 2
53872: NEG
53873: PUSH
53874: LD_INT 0
53876: PUSH
53877: EMPTY
53878: LIST
53879: LIST
53880: PUSH
53881: LD_INT 2
53883: NEG
53884: PUSH
53885: LD_INT 1
53887: NEG
53888: PUSH
53889: EMPTY
53890: LIST
53891: LIST
53892: PUSH
53893: LD_INT 2
53895: NEG
53896: PUSH
53897: LD_INT 2
53899: NEG
53900: PUSH
53901: EMPTY
53902: LIST
53903: LIST
53904: PUSH
53905: EMPTY
53906: LIST
53907: LIST
53908: LIST
53909: LIST
53910: LIST
53911: LIST
53912: LIST
53913: LIST
53914: LIST
53915: LIST
53916: LIST
53917: LIST
53918: LIST
53919: LIST
53920: LIST
53921: LIST
53922: LIST
53923: LIST
53924: LIST
53925: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53926: LD_ADDR_VAR 0 58
53930: PUSH
53931: LD_INT 0
53933: PUSH
53934: LD_INT 0
53936: PUSH
53937: EMPTY
53938: LIST
53939: LIST
53940: PUSH
53941: LD_INT 0
53943: PUSH
53944: LD_INT 1
53946: NEG
53947: PUSH
53948: EMPTY
53949: LIST
53950: LIST
53951: PUSH
53952: LD_INT 1
53954: PUSH
53955: LD_INT 0
53957: PUSH
53958: EMPTY
53959: LIST
53960: LIST
53961: PUSH
53962: LD_INT 1
53964: PUSH
53965: LD_INT 1
53967: PUSH
53968: EMPTY
53969: LIST
53970: LIST
53971: PUSH
53972: LD_INT 0
53974: PUSH
53975: LD_INT 1
53977: PUSH
53978: EMPTY
53979: LIST
53980: LIST
53981: PUSH
53982: LD_INT 1
53984: NEG
53985: PUSH
53986: LD_INT 0
53988: PUSH
53989: EMPTY
53990: LIST
53991: LIST
53992: PUSH
53993: LD_INT 1
53995: NEG
53996: PUSH
53997: LD_INT 1
53999: NEG
54000: PUSH
54001: EMPTY
54002: LIST
54003: LIST
54004: PUSH
54005: LD_INT 1
54007: NEG
54008: PUSH
54009: LD_INT 2
54011: NEG
54012: PUSH
54013: EMPTY
54014: LIST
54015: LIST
54016: PUSH
54017: LD_INT 0
54019: PUSH
54020: LD_INT 2
54022: NEG
54023: PUSH
54024: EMPTY
54025: LIST
54026: LIST
54027: PUSH
54028: LD_INT 1
54030: PUSH
54031: LD_INT 1
54033: NEG
54034: PUSH
54035: EMPTY
54036: LIST
54037: LIST
54038: PUSH
54039: LD_INT 2
54041: PUSH
54042: LD_INT 0
54044: PUSH
54045: EMPTY
54046: LIST
54047: LIST
54048: PUSH
54049: LD_INT 2
54051: PUSH
54052: LD_INT 1
54054: PUSH
54055: EMPTY
54056: LIST
54057: LIST
54058: PUSH
54059: LD_INT 2
54061: PUSH
54062: LD_INT 2
54064: PUSH
54065: EMPTY
54066: LIST
54067: LIST
54068: PUSH
54069: LD_INT 1
54071: PUSH
54072: LD_INT 2
54074: PUSH
54075: EMPTY
54076: LIST
54077: LIST
54078: PUSH
54079: LD_INT 0
54081: PUSH
54082: LD_INT 2
54084: PUSH
54085: EMPTY
54086: LIST
54087: LIST
54088: PUSH
54089: LD_INT 1
54091: NEG
54092: PUSH
54093: LD_INT 1
54095: PUSH
54096: EMPTY
54097: LIST
54098: LIST
54099: PUSH
54100: LD_INT 2
54102: NEG
54103: PUSH
54104: LD_INT 0
54106: PUSH
54107: EMPTY
54108: LIST
54109: LIST
54110: PUSH
54111: LD_INT 2
54113: NEG
54114: PUSH
54115: LD_INT 1
54117: NEG
54118: PUSH
54119: EMPTY
54120: LIST
54121: LIST
54122: PUSH
54123: LD_INT 2
54125: NEG
54126: PUSH
54127: LD_INT 2
54129: NEG
54130: PUSH
54131: EMPTY
54132: LIST
54133: LIST
54134: PUSH
54135: EMPTY
54136: LIST
54137: LIST
54138: LIST
54139: LIST
54140: LIST
54141: LIST
54142: LIST
54143: LIST
54144: LIST
54145: LIST
54146: LIST
54147: LIST
54148: LIST
54149: LIST
54150: LIST
54151: LIST
54152: LIST
54153: LIST
54154: LIST
54155: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54156: LD_ADDR_VAR 0 59
54160: PUSH
54161: LD_INT 0
54163: PUSH
54164: LD_INT 0
54166: PUSH
54167: EMPTY
54168: LIST
54169: LIST
54170: PUSH
54171: LD_INT 0
54173: PUSH
54174: LD_INT 1
54176: NEG
54177: PUSH
54178: EMPTY
54179: LIST
54180: LIST
54181: PUSH
54182: LD_INT 1
54184: PUSH
54185: LD_INT 0
54187: PUSH
54188: EMPTY
54189: LIST
54190: LIST
54191: PUSH
54192: LD_INT 1
54194: PUSH
54195: LD_INT 1
54197: PUSH
54198: EMPTY
54199: LIST
54200: LIST
54201: PUSH
54202: LD_INT 0
54204: PUSH
54205: LD_INT 1
54207: PUSH
54208: EMPTY
54209: LIST
54210: LIST
54211: PUSH
54212: LD_INT 1
54214: NEG
54215: PUSH
54216: LD_INT 0
54218: PUSH
54219: EMPTY
54220: LIST
54221: LIST
54222: PUSH
54223: LD_INT 1
54225: NEG
54226: PUSH
54227: LD_INT 1
54229: NEG
54230: PUSH
54231: EMPTY
54232: LIST
54233: LIST
54234: PUSH
54235: EMPTY
54236: LIST
54237: LIST
54238: LIST
54239: LIST
54240: LIST
54241: LIST
54242: LIST
54243: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54244: LD_ADDR_VAR 0 60
54248: PUSH
54249: LD_INT 0
54251: PUSH
54252: LD_INT 0
54254: PUSH
54255: EMPTY
54256: LIST
54257: LIST
54258: PUSH
54259: LD_INT 0
54261: PUSH
54262: LD_INT 1
54264: NEG
54265: PUSH
54266: EMPTY
54267: LIST
54268: LIST
54269: PUSH
54270: LD_INT 1
54272: PUSH
54273: LD_INT 0
54275: PUSH
54276: EMPTY
54277: LIST
54278: LIST
54279: PUSH
54280: LD_INT 1
54282: PUSH
54283: LD_INT 1
54285: PUSH
54286: EMPTY
54287: LIST
54288: LIST
54289: PUSH
54290: LD_INT 0
54292: PUSH
54293: LD_INT 1
54295: PUSH
54296: EMPTY
54297: LIST
54298: LIST
54299: PUSH
54300: LD_INT 1
54302: NEG
54303: PUSH
54304: LD_INT 0
54306: PUSH
54307: EMPTY
54308: LIST
54309: LIST
54310: PUSH
54311: LD_INT 1
54313: NEG
54314: PUSH
54315: LD_INT 1
54317: NEG
54318: PUSH
54319: EMPTY
54320: LIST
54321: LIST
54322: PUSH
54323: EMPTY
54324: LIST
54325: LIST
54326: LIST
54327: LIST
54328: LIST
54329: LIST
54330: LIST
54331: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54332: LD_ADDR_VAR 0 61
54336: PUSH
54337: LD_INT 0
54339: PUSH
54340: LD_INT 0
54342: PUSH
54343: EMPTY
54344: LIST
54345: LIST
54346: PUSH
54347: LD_INT 0
54349: PUSH
54350: LD_INT 1
54352: NEG
54353: PUSH
54354: EMPTY
54355: LIST
54356: LIST
54357: PUSH
54358: LD_INT 1
54360: PUSH
54361: LD_INT 0
54363: PUSH
54364: EMPTY
54365: LIST
54366: LIST
54367: PUSH
54368: LD_INT 1
54370: PUSH
54371: LD_INT 1
54373: PUSH
54374: EMPTY
54375: LIST
54376: LIST
54377: PUSH
54378: LD_INT 0
54380: PUSH
54381: LD_INT 1
54383: PUSH
54384: EMPTY
54385: LIST
54386: LIST
54387: PUSH
54388: LD_INT 1
54390: NEG
54391: PUSH
54392: LD_INT 0
54394: PUSH
54395: EMPTY
54396: LIST
54397: LIST
54398: PUSH
54399: LD_INT 1
54401: NEG
54402: PUSH
54403: LD_INT 1
54405: NEG
54406: PUSH
54407: EMPTY
54408: LIST
54409: LIST
54410: PUSH
54411: EMPTY
54412: LIST
54413: LIST
54414: LIST
54415: LIST
54416: LIST
54417: LIST
54418: LIST
54419: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54420: LD_ADDR_VAR 0 62
54424: PUSH
54425: LD_INT 0
54427: PUSH
54428: LD_INT 0
54430: PUSH
54431: EMPTY
54432: LIST
54433: LIST
54434: PUSH
54435: LD_INT 0
54437: PUSH
54438: LD_INT 1
54440: NEG
54441: PUSH
54442: EMPTY
54443: LIST
54444: LIST
54445: PUSH
54446: LD_INT 1
54448: PUSH
54449: LD_INT 0
54451: PUSH
54452: EMPTY
54453: LIST
54454: LIST
54455: PUSH
54456: LD_INT 1
54458: PUSH
54459: LD_INT 1
54461: PUSH
54462: EMPTY
54463: LIST
54464: LIST
54465: PUSH
54466: LD_INT 0
54468: PUSH
54469: LD_INT 1
54471: PUSH
54472: EMPTY
54473: LIST
54474: LIST
54475: PUSH
54476: LD_INT 1
54478: NEG
54479: PUSH
54480: LD_INT 0
54482: PUSH
54483: EMPTY
54484: LIST
54485: LIST
54486: PUSH
54487: LD_INT 1
54489: NEG
54490: PUSH
54491: LD_INT 1
54493: NEG
54494: PUSH
54495: EMPTY
54496: LIST
54497: LIST
54498: PUSH
54499: EMPTY
54500: LIST
54501: LIST
54502: LIST
54503: LIST
54504: LIST
54505: LIST
54506: LIST
54507: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54508: LD_ADDR_VAR 0 63
54512: PUSH
54513: LD_INT 0
54515: PUSH
54516: LD_INT 0
54518: PUSH
54519: EMPTY
54520: LIST
54521: LIST
54522: PUSH
54523: LD_INT 0
54525: PUSH
54526: LD_INT 1
54528: NEG
54529: PUSH
54530: EMPTY
54531: LIST
54532: LIST
54533: PUSH
54534: LD_INT 1
54536: PUSH
54537: LD_INT 0
54539: PUSH
54540: EMPTY
54541: LIST
54542: LIST
54543: PUSH
54544: LD_INT 1
54546: PUSH
54547: LD_INT 1
54549: PUSH
54550: EMPTY
54551: LIST
54552: LIST
54553: PUSH
54554: LD_INT 0
54556: PUSH
54557: LD_INT 1
54559: PUSH
54560: EMPTY
54561: LIST
54562: LIST
54563: PUSH
54564: LD_INT 1
54566: NEG
54567: PUSH
54568: LD_INT 0
54570: PUSH
54571: EMPTY
54572: LIST
54573: LIST
54574: PUSH
54575: LD_INT 1
54577: NEG
54578: PUSH
54579: LD_INT 1
54581: NEG
54582: PUSH
54583: EMPTY
54584: LIST
54585: LIST
54586: PUSH
54587: EMPTY
54588: LIST
54589: LIST
54590: LIST
54591: LIST
54592: LIST
54593: LIST
54594: LIST
54595: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54596: LD_ADDR_VAR 0 64
54600: PUSH
54601: LD_INT 0
54603: PUSH
54604: LD_INT 0
54606: PUSH
54607: EMPTY
54608: LIST
54609: LIST
54610: PUSH
54611: LD_INT 0
54613: PUSH
54614: LD_INT 1
54616: NEG
54617: PUSH
54618: EMPTY
54619: LIST
54620: LIST
54621: PUSH
54622: LD_INT 1
54624: PUSH
54625: LD_INT 0
54627: PUSH
54628: EMPTY
54629: LIST
54630: LIST
54631: PUSH
54632: LD_INT 1
54634: PUSH
54635: LD_INT 1
54637: PUSH
54638: EMPTY
54639: LIST
54640: LIST
54641: PUSH
54642: LD_INT 0
54644: PUSH
54645: LD_INT 1
54647: PUSH
54648: EMPTY
54649: LIST
54650: LIST
54651: PUSH
54652: LD_INT 1
54654: NEG
54655: PUSH
54656: LD_INT 0
54658: PUSH
54659: EMPTY
54660: LIST
54661: LIST
54662: PUSH
54663: LD_INT 1
54665: NEG
54666: PUSH
54667: LD_INT 1
54669: NEG
54670: PUSH
54671: EMPTY
54672: LIST
54673: LIST
54674: PUSH
54675: EMPTY
54676: LIST
54677: LIST
54678: LIST
54679: LIST
54680: LIST
54681: LIST
54682: LIST
54683: ST_TO_ADDR
// end ; 1 :
54684: GO 60581
54686: LD_INT 1
54688: DOUBLE
54689: EQUAL
54690: IFTRUE 54694
54692: GO 57317
54694: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54695: LD_ADDR_VAR 0 11
54699: PUSH
54700: LD_INT 1
54702: NEG
54703: PUSH
54704: LD_INT 3
54706: NEG
54707: PUSH
54708: EMPTY
54709: LIST
54710: LIST
54711: PUSH
54712: LD_INT 0
54714: PUSH
54715: LD_INT 3
54717: NEG
54718: PUSH
54719: EMPTY
54720: LIST
54721: LIST
54722: PUSH
54723: LD_INT 1
54725: PUSH
54726: LD_INT 2
54728: NEG
54729: PUSH
54730: EMPTY
54731: LIST
54732: LIST
54733: PUSH
54734: EMPTY
54735: LIST
54736: LIST
54737: LIST
54738: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54739: LD_ADDR_VAR 0 12
54743: PUSH
54744: LD_INT 2
54746: PUSH
54747: LD_INT 1
54749: NEG
54750: PUSH
54751: EMPTY
54752: LIST
54753: LIST
54754: PUSH
54755: LD_INT 3
54757: PUSH
54758: LD_INT 0
54760: PUSH
54761: EMPTY
54762: LIST
54763: LIST
54764: PUSH
54765: LD_INT 3
54767: PUSH
54768: LD_INT 1
54770: PUSH
54771: EMPTY
54772: LIST
54773: LIST
54774: PUSH
54775: EMPTY
54776: LIST
54777: LIST
54778: LIST
54779: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54780: LD_ADDR_VAR 0 13
54784: PUSH
54785: LD_INT 3
54787: PUSH
54788: LD_INT 2
54790: PUSH
54791: EMPTY
54792: LIST
54793: LIST
54794: PUSH
54795: LD_INT 3
54797: PUSH
54798: LD_INT 3
54800: PUSH
54801: EMPTY
54802: LIST
54803: LIST
54804: PUSH
54805: LD_INT 2
54807: PUSH
54808: LD_INT 3
54810: PUSH
54811: EMPTY
54812: LIST
54813: LIST
54814: PUSH
54815: EMPTY
54816: LIST
54817: LIST
54818: LIST
54819: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54820: LD_ADDR_VAR 0 14
54824: PUSH
54825: LD_INT 1
54827: PUSH
54828: LD_INT 3
54830: PUSH
54831: EMPTY
54832: LIST
54833: LIST
54834: PUSH
54835: LD_INT 0
54837: PUSH
54838: LD_INT 3
54840: PUSH
54841: EMPTY
54842: LIST
54843: LIST
54844: PUSH
54845: LD_INT 1
54847: NEG
54848: PUSH
54849: LD_INT 2
54851: PUSH
54852: EMPTY
54853: LIST
54854: LIST
54855: PUSH
54856: EMPTY
54857: LIST
54858: LIST
54859: LIST
54860: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54861: LD_ADDR_VAR 0 15
54865: PUSH
54866: LD_INT 2
54868: NEG
54869: PUSH
54870: LD_INT 1
54872: PUSH
54873: EMPTY
54874: LIST
54875: LIST
54876: PUSH
54877: LD_INT 3
54879: NEG
54880: PUSH
54881: LD_INT 0
54883: PUSH
54884: EMPTY
54885: LIST
54886: LIST
54887: PUSH
54888: LD_INT 3
54890: NEG
54891: PUSH
54892: LD_INT 1
54894: NEG
54895: PUSH
54896: EMPTY
54897: LIST
54898: LIST
54899: PUSH
54900: EMPTY
54901: LIST
54902: LIST
54903: LIST
54904: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54905: LD_ADDR_VAR 0 16
54909: PUSH
54910: LD_INT 2
54912: NEG
54913: PUSH
54914: LD_INT 3
54916: NEG
54917: PUSH
54918: EMPTY
54919: LIST
54920: LIST
54921: PUSH
54922: LD_INT 3
54924: NEG
54925: PUSH
54926: LD_INT 2
54928: NEG
54929: PUSH
54930: EMPTY
54931: LIST
54932: LIST
54933: PUSH
54934: LD_INT 3
54936: NEG
54937: PUSH
54938: LD_INT 3
54940: NEG
54941: PUSH
54942: EMPTY
54943: LIST
54944: LIST
54945: PUSH
54946: EMPTY
54947: LIST
54948: LIST
54949: LIST
54950: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54951: LD_ADDR_VAR 0 17
54955: PUSH
54956: LD_INT 1
54958: NEG
54959: PUSH
54960: LD_INT 3
54962: NEG
54963: PUSH
54964: EMPTY
54965: LIST
54966: LIST
54967: PUSH
54968: LD_INT 0
54970: PUSH
54971: LD_INT 3
54973: NEG
54974: PUSH
54975: EMPTY
54976: LIST
54977: LIST
54978: PUSH
54979: LD_INT 1
54981: PUSH
54982: LD_INT 2
54984: NEG
54985: PUSH
54986: EMPTY
54987: LIST
54988: LIST
54989: PUSH
54990: EMPTY
54991: LIST
54992: LIST
54993: LIST
54994: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54995: LD_ADDR_VAR 0 18
54999: PUSH
55000: LD_INT 2
55002: PUSH
55003: LD_INT 1
55005: NEG
55006: PUSH
55007: EMPTY
55008: LIST
55009: LIST
55010: PUSH
55011: LD_INT 3
55013: PUSH
55014: LD_INT 0
55016: PUSH
55017: EMPTY
55018: LIST
55019: LIST
55020: PUSH
55021: LD_INT 3
55023: PUSH
55024: LD_INT 1
55026: PUSH
55027: EMPTY
55028: LIST
55029: LIST
55030: PUSH
55031: EMPTY
55032: LIST
55033: LIST
55034: LIST
55035: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55036: LD_ADDR_VAR 0 19
55040: PUSH
55041: LD_INT 3
55043: PUSH
55044: LD_INT 2
55046: PUSH
55047: EMPTY
55048: LIST
55049: LIST
55050: PUSH
55051: LD_INT 3
55053: PUSH
55054: LD_INT 3
55056: PUSH
55057: EMPTY
55058: LIST
55059: LIST
55060: PUSH
55061: LD_INT 2
55063: PUSH
55064: LD_INT 3
55066: PUSH
55067: EMPTY
55068: LIST
55069: LIST
55070: PUSH
55071: EMPTY
55072: LIST
55073: LIST
55074: LIST
55075: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55076: LD_ADDR_VAR 0 20
55080: PUSH
55081: LD_INT 1
55083: PUSH
55084: LD_INT 3
55086: PUSH
55087: EMPTY
55088: LIST
55089: LIST
55090: PUSH
55091: LD_INT 0
55093: PUSH
55094: LD_INT 3
55096: PUSH
55097: EMPTY
55098: LIST
55099: LIST
55100: PUSH
55101: LD_INT 1
55103: NEG
55104: PUSH
55105: LD_INT 2
55107: PUSH
55108: EMPTY
55109: LIST
55110: LIST
55111: PUSH
55112: EMPTY
55113: LIST
55114: LIST
55115: LIST
55116: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55117: LD_ADDR_VAR 0 21
55121: PUSH
55122: LD_INT 2
55124: NEG
55125: PUSH
55126: LD_INT 1
55128: PUSH
55129: EMPTY
55130: LIST
55131: LIST
55132: PUSH
55133: LD_INT 3
55135: NEG
55136: PUSH
55137: LD_INT 0
55139: PUSH
55140: EMPTY
55141: LIST
55142: LIST
55143: PUSH
55144: LD_INT 3
55146: NEG
55147: PUSH
55148: LD_INT 1
55150: NEG
55151: PUSH
55152: EMPTY
55153: LIST
55154: LIST
55155: PUSH
55156: EMPTY
55157: LIST
55158: LIST
55159: LIST
55160: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55161: LD_ADDR_VAR 0 22
55165: PUSH
55166: LD_INT 2
55168: NEG
55169: PUSH
55170: LD_INT 3
55172: NEG
55173: PUSH
55174: EMPTY
55175: LIST
55176: LIST
55177: PUSH
55178: LD_INT 3
55180: NEG
55181: PUSH
55182: LD_INT 2
55184: NEG
55185: PUSH
55186: EMPTY
55187: LIST
55188: LIST
55189: PUSH
55190: LD_INT 3
55192: NEG
55193: PUSH
55194: LD_INT 3
55196: NEG
55197: PUSH
55198: EMPTY
55199: LIST
55200: LIST
55201: PUSH
55202: EMPTY
55203: LIST
55204: LIST
55205: LIST
55206: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
55207: LD_ADDR_VAR 0 23
55211: PUSH
55212: LD_INT 0
55214: PUSH
55215: LD_INT 3
55217: NEG
55218: PUSH
55219: EMPTY
55220: LIST
55221: LIST
55222: PUSH
55223: LD_INT 1
55225: NEG
55226: PUSH
55227: LD_INT 4
55229: NEG
55230: PUSH
55231: EMPTY
55232: LIST
55233: LIST
55234: PUSH
55235: LD_INT 1
55237: PUSH
55238: LD_INT 3
55240: NEG
55241: PUSH
55242: EMPTY
55243: LIST
55244: LIST
55245: PUSH
55246: EMPTY
55247: LIST
55248: LIST
55249: LIST
55250: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
55251: LD_ADDR_VAR 0 24
55255: PUSH
55256: LD_INT 3
55258: PUSH
55259: LD_INT 0
55261: PUSH
55262: EMPTY
55263: LIST
55264: LIST
55265: PUSH
55266: LD_INT 3
55268: PUSH
55269: LD_INT 1
55271: NEG
55272: PUSH
55273: EMPTY
55274: LIST
55275: LIST
55276: PUSH
55277: LD_INT 4
55279: PUSH
55280: LD_INT 1
55282: PUSH
55283: EMPTY
55284: LIST
55285: LIST
55286: PUSH
55287: EMPTY
55288: LIST
55289: LIST
55290: LIST
55291: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
55292: LD_ADDR_VAR 0 25
55296: PUSH
55297: LD_INT 3
55299: PUSH
55300: LD_INT 3
55302: PUSH
55303: EMPTY
55304: LIST
55305: LIST
55306: PUSH
55307: LD_INT 4
55309: PUSH
55310: LD_INT 3
55312: PUSH
55313: EMPTY
55314: LIST
55315: LIST
55316: PUSH
55317: LD_INT 3
55319: PUSH
55320: LD_INT 4
55322: PUSH
55323: EMPTY
55324: LIST
55325: LIST
55326: PUSH
55327: EMPTY
55328: LIST
55329: LIST
55330: LIST
55331: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
55332: LD_ADDR_VAR 0 26
55336: PUSH
55337: LD_INT 0
55339: PUSH
55340: LD_INT 3
55342: PUSH
55343: EMPTY
55344: LIST
55345: LIST
55346: PUSH
55347: LD_INT 1
55349: PUSH
55350: LD_INT 4
55352: PUSH
55353: EMPTY
55354: LIST
55355: LIST
55356: PUSH
55357: LD_INT 1
55359: NEG
55360: PUSH
55361: LD_INT 3
55363: PUSH
55364: EMPTY
55365: LIST
55366: LIST
55367: PUSH
55368: EMPTY
55369: LIST
55370: LIST
55371: LIST
55372: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
55373: LD_ADDR_VAR 0 27
55377: PUSH
55378: LD_INT 3
55380: NEG
55381: PUSH
55382: LD_INT 0
55384: PUSH
55385: EMPTY
55386: LIST
55387: LIST
55388: PUSH
55389: LD_INT 3
55391: NEG
55392: PUSH
55393: LD_INT 1
55395: PUSH
55396: EMPTY
55397: LIST
55398: LIST
55399: PUSH
55400: LD_INT 4
55402: NEG
55403: PUSH
55404: LD_INT 1
55406: NEG
55407: PUSH
55408: EMPTY
55409: LIST
55410: LIST
55411: PUSH
55412: EMPTY
55413: LIST
55414: LIST
55415: LIST
55416: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
55417: LD_ADDR_VAR 0 28
55421: PUSH
55422: LD_INT 3
55424: NEG
55425: PUSH
55426: LD_INT 3
55428: NEG
55429: PUSH
55430: EMPTY
55431: LIST
55432: LIST
55433: PUSH
55434: LD_INT 3
55436: NEG
55437: PUSH
55438: LD_INT 4
55440: NEG
55441: PUSH
55442: EMPTY
55443: LIST
55444: LIST
55445: PUSH
55446: LD_INT 4
55448: NEG
55449: PUSH
55450: LD_INT 3
55452: NEG
55453: PUSH
55454: EMPTY
55455: LIST
55456: LIST
55457: PUSH
55458: EMPTY
55459: LIST
55460: LIST
55461: LIST
55462: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
55463: LD_ADDR_VAR 0 29
55467: PUSH
55468: LD_INT 1
55470: NEG
55471: PUSH
55472: LD_INT 3
55474: NEG
55475: PUSH
55476: EMPTY
55477: LIST
55478: LIST
55479: PUSH
55480: LD_INT 0
55482: PUSH
55483: LD_INT 3
55485: NEG
55486: PUSH
55487: EMPTY
55488: LIST
55489: LIST
55490: PUSH
55491: LD_INT 1
55493: PUSH
55494: LD_INT 2
55496: NEG
55497: PUSH
55498: EMPTY
55499: LIST
55500: LIST
55501: PUSH
55502: LD_INT 1
55504: NEG
55505: PUSH
55506: LD_INT 4
55508: NEG
55509: PUSH
55510: EMPTY
55511: LIST
55512: LIST
55513: PUSH
55514: LD_INT 0
55516: PUSH
55517: LD_INT 4
55519: NEG
55520: PUSH
55521: EMPTY
55522: LIST
55523: LIST
55524: PUSH
55525: LD_INT 1
55527: PUSH
55528: LD_INT 3
55530: NEG
55531: PUSH
55532: EMPTY
55533: LIST
55534: LIST
55535: PUSH
55536: LD_INT 1
55538: NEG
55539: PUSH
55540: LD_INT 5
55542: NEG
55543: PUSH
55544: EMPTY
55545: LIST
55546: LIST
55547: PUSH
55548: LD_INT 0
55550: PUSH
55551: LD_INT 5
55553: NEG
55554: PUSH
55555: EMPTY
55556: LIST
55557: LIST
55558: PUSH
55559: LD_INT 1
55561: PUSH
55562: LD_INT 4
55564: NEG
55565: PUSH
55566: EMPTY
55567: LIST
55568: LIST
55569: PUSH
55570: LD_INT 1
55572: NEG
55573: PUSH
55574: LD_INT 6
55576: NEG
55577: PUSH
55578: EMPTY
55579: LIST
55580: LIST
55581: PUSH
55582: LD_INT 0
55584: PUSH
55585: LD_INT 6
55587: NEG
55588: PUSH
55589: EMPTY
55590: LIST
55591: LIST
55592: PUSH
55593: LD_INT 1
55595: PUSH
55596: LD_INT 5
55598: NEG
55599: PUSH
55600: EMPTY
55601: LIST
55602: LIST
55603: PUSH
55604: EMPTY
55605: LIST
55606: LIST
55607: LIST
55608: LIST
55609: LIST
55610: LIST
55611: LIST
55612: LIST
55613: LIST
55614: LIST
55615: LIST
55616: LIST
55617: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
55618: LD_ADDR_VAR 0 30
55622: PUSH
55623: LD_INT 2
55625: PUSH
55626: LD_INT 1
55628: NEG
55629: PUSH
55630: EMPTY
55631: LIST
55632: LIST
55633: PUSH
55634: LD_INT 3
55636: PUSH
55637: LD_INT 0
55639: PUSH
55640: EMPTY
55641: LIST
55642: LIST
55643: PUSH
55644: LD_INT 3
55646: PUSH
55647: LD_INT 1
55649: PUSH
55650: EMPTY
55651: LIST
55652: LIST
55653: PUSH
55654: LD_INT 3
55656: PUSH
55657: LD_INT 1
55659: NEG
55660: PUSH
55661: EMPTY
55662: LIST
55663: LIST
55664: PUSH
55665: LD_INT 4
55667: PUSH
55668: LD_INT 0
55670: PUSH
55671: EMPTY
55672: LIST
55673: LIST
55674: PUSH
55675: LD_INT 4
55677: PUSH
55678: LD_INT 1
55680: PUSH
55681: EMPTY
55682: LIST
55683: LIST
55684: PUSH
55685: LD_INT 4
55687: PUSH
55688: LD_INT 1
55690: NEG
55691: PUSH
55692: EMPTY
55693: LIST
55694: LIST
55695: PUSH
55696: LD_INT 5
55698: PUSH
55699: LD_INT 0
55701: PUSH
55702: EMPTY
55703: LIST
55704: LIST
55705: PUSH
55706: LD_INT 5
55708: PUSH
55709: LD_INT 1
55711: PUSH
55712: EMPTY
55713: LIST
55714: LIST
55715: PUSH
55716: LD_INT 5
55718: PUSH
55719: LD_INT 1
55721: NEG
55722: PUSH
55723: EMPTY
55724: LIST
55725: LIST
55726: PUSH
55727: LD_INT 6
55729: PUSH
55730: LD_INT 0
55732: PUSH
55733: EMPTY
55734: LIST
55735: LIST
55736: PUSH
55737: LD_INT 6
55739: PUSH
55740: LD_INT 1
55742: PUSH
55743: EMPTY
55744: LIST
55745: LIST
55746: PUSH
55747: EMPTY
55748: LIST
55749: LIST
55750: LIST
55751: LIST
55752: LIST
55753: LIST
55754: LIST
55755: LIST
55756: LIST
55757: LIST
55758: LIST
55759: LIST
55760: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
55761: LD_ADDR_VAR 0 31
55765: PUSH
55766: LD_INT 3
55768: PUSH
55769: LD_INT 2
55771: PUSH
55772: EMPTY
55773: LIST
55774: LIST
55775: PUSH
55776: LD_INT 3
55778: PUSH
55779: LD_INT 3
55781: PUSH
55782: EMPTY
55783: LIST
55784: LIST
55785: PUSH
55786: LD_INT 2
55788: PUSH
55789: LD_INT 3
55791: PUSH
55792: EMPTY
55793: LIST
55794: LIST
55795: PUSH
55796: LD_INT 4
55798: PUSH
55799: LD_INT 3
55801: PUSH
55802: EMPTY
55803: LIST
55804: LIST
55805: PUSH
55806: LD_INT 4
55808: PUSH
55809: LD_INT 4
55811: PUSH
55812: EMPTY
55813: LIST
55814: LIST
55815: PUSH
55816: LD_INT 3
55818: PUSH
55819: LD_INT 4
55821: PUSH
55822: EMPTY
55823: LIST
55824: LIST
55825: PUSH
55826: LD_INT 5
55828: PUSH
55829: LD_INT 4
55831: PUSH
55832: EMPTY
55833: LIST
55834: LIST
55835: PUSH
55836: LD_INT 5
55838: PUSH
55839: LD_INT 5
55841: PUSH
55842: EMPTY
55843: LIST
55844: LIST
55845: PUSH
55846: LD_INT 4
55848: PUSH
55849: LD_INT 5
55851: PUSH
55852: EMPTY
55853: LIST
55854: LIST
55855: PUSH
55856: LD_INT 6
55858: PUSH
55859: LD_INT 5
55861: PUSH
55862: EMPTY
55863: LIST
55864: LIST
55865: PUSH
55866: LD_INT 6
55868: PUSH
55869: LD_INT 6
55871: PUSH
55872: EMPTY
55873: LIST
55874: LIST
55875: PUSH
55876: LD_INT 5
55878: PUSH
55879: LD_INT 6
55881: PUSH
55882: EMPTY
55883: LIST
55884: LIST
55885: PUSH
55886: EMPTY
55887: LIST
55888: LIST
55889: LIST
55890: LIST
55891: LIST
55892: LIST
55893: LIST
55894: LIST
55895: LIST
55896: LIST
55897: LIST
55898: LIST
55899: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
55900: LD_ADDR_VAR 0 32
55904: PUSH
55905: LD_INT 1
55907: PUSH
55908: LD_INT 3
55910: PUSH
55911: EMPTY
55912: LIST
55913: LIST
55914: PUSH
55915: LD_INT 0
55917: PUSH
55918: LD_INT 3
55920: PUSH
55921: EMPTY
55922: LIST
55923: LIST
55924: PUSH
55925: LD_INT 1
55927: NEG
55928: PUSH
55929: LD_INT 2
55931: PUSH
55932: EMPTY
55933: LIST
55934: LIST
55935: PUSH
55936: LD_INT 1
55938: PUSH
55939: LD_INT 4
55941: PUSH
55942: EMPTY
55943: LIST
55944: LIST
55945: PUSH
55946: LD_INT 0
55948: PUSH
55949: LD_INT 4
55951: PUSH
55952: EMPTY
55953: LIST
55954: LIST
55955: PUSH
55956: LD_INT 1
55958: NEG
55959: PUSH
55960: LD_INT 3
55962: PUSH
55963: EMPTY
55964: LIST
55965: LIST
55966: PUSH
55967: LD_INT 1
55969: PUSH
55970: LD_INT 5
55972: PUSH
55973: EMPTY
55974: LIST
55975: LIST
55976: PUSH
55977: LD_INT 0
55979: PUSH
55980: LD_INT 5
55982: PUSH
55983: EMPTY
55984: LIST
55985: LIST
55986: PUSH
55987: LD_INT 1
55989: NEG
55990: PUSH
55991: LD_INT 4
55993: PUSH
55994: EMPTY
55995: LIST
55996: LIST
55997: PUSH
55998: LD_INT 1
56000: PUSH
56001: LD_INT 6
56003: PUSH
56004: EMPTY
56005: LIST
56006: LIST
56007: PUSH
56008: LD_INT 0
56010: PUSH
56011: LD_INT 6
56013: PUSH
56014: EMPTY
56015: LIST
56016: LIST
56017: PUSH
56018: LD_INT 1
56020: NEG
56021: PUSH
56022: LD_INT 5
56024: PUSH
56025: EMPTY
56026: LIST
56027: LIST
56028: PUSH
56029: EMPTY
56030: LIST
56031: LIST
56032: LIST
56033: LIST
56034: LIST
56035: LIST
56036: LIST
56037: LIST
56038: LIST
56039: LIST
56040: LIST
56041: LIST
56042: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
56043: LD_ADDR_VAR 0 33
56047: PUSH
56048: LD_INT 2
56050: NEG
56051: PUSH
56052: LD_INT 1
56054: PUSH
56055: EMPTY
56056: LIST
56057: LIST
56058: PUSH
56059: LD_INT 3
56061: NEG
56062: PUSH
56063: LD_INT 0
56065: PUSH
56066: EMPTY
56067: LIST
56068: LIST
56069: PUSH
56070: LD_INT 3
56072: NEG
56073: PUSH
56074: LD_INT 1
56076: NEG
56077: PUSH
56078: EMPTY
56079: LIST
56080: LIST
56081: PUSH
56082: LD_INT 3
56084: NEG
56085: PUSH
56086: LD_INT 1
56088: PUSH
56089: EMPTY
56090: LIST
56091: LIST
56092: PUSH
56093: LD_INT 4
56095: NEG
56096: PUSH
56097: LD_INT 0
56099: PUSH
56100: EMPTY
56101: LIST
56102: LIST
56103: PUSH
56104: LD_INT 4
56106: NEG
56107: PUSH
56108: LD_INT 1
56110: NEG
56111: PUSH
56112: EMPTY
56113: LIST
56114: LIST
56115: PUSH
56116: LD_INT 4
56118: NEG
56119: PUSH
56120: LD_INT 1
56122: PUSH
56123: EMPTY
56124: LIST
56125: LIST
56126: PUSH
56127: LD_INT 5
56129: NEG
56130: PUSH
56131: LD_INT 0
56133: PUSH
56134: EMPTY
56135: LIST
56136: LIST
56137: PUSH
56138: LD_INT 5
56140: NEG
56141: PUSH
56142: LD_INT 1
56144: NEG
56145: PUSH
56146: EMPTY
56147: LIST
56148: LIST
56149: PUSH
56150: LD_INT 5
56152: NEG
56153: PUSH
56154: LD_INT 1
56156: PUSH
56157: EMPTY
56158: LIST
56159: LIST
56160: PUSH
56161: LD_INT 6
56163: NEG
56164: PUSH
56165: LD_INT 0
56167: PUSH
56168: EMPTY
56169: LIST
56170: LIST
56171: PUSH
56172: LD_INT 6
56174: NEG
56175: PUSH
56176: LD_INT 1
56178: NEG
56179: PUSH
56180: EMPTY
56181: LIST
56182: LIST
56183: PUSH
56184: EMPTY
56185: LIST
56186: LIST
56187: LIST
56188: LIST
56189: LIST
56190: LIST
56191: LIST
56192: LIST
56193: LIST
56194: LIST
56195: LIST
56196: LIST
56197: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
56198: LD_ADDR_VAR 0 34
56202: PUSH
56203: LD_INT 2
56205: NEG
56206: PUSH
56207: LD_INT 3
56209: NEG
56210: PUSH
56211: EMPTY
56212: LIST
56213: LIST
56214: PUSH
56215: LD_INT 3
56217: NEG
56218: PUSH
56219: LD_INT 2
56221: NEG
56222: PUSH
56223: EMPTY
56224: LIST
56225: LIST
56226: PUSH
56227: LD_INT 3
56229: NEG
56230: PUSH
56231: LD_INT 3
56233: NEG
56234: PUSH
56235: EMPTY
56236: LIST
56237: LIST
56238: PUSH
56239: LD_INT 3
56241: NEG
56242: PUSH
56243: LD_INT 4
56245: NEG
56246: PUSH
56247: EMPTY
56248: LIST
56249: LIST
56250: PUSH
56251: LD_INT 4
56253: NEG
56254: PUSH
56255: LD_INT 3
56257: NEG
56258: PUSH
56259: EMPTY
56260: LIST
56261: LIST
56262: PUSH
56263: LD_INT 4
56265: NEG
56266: PUSH
56267: LD_INT 4
56269: NEG
56270: PUSH
56271: EMPTY
56272: LIST
56273: LIST
56274: PUSH
56275: LD_INT 4
56277: NEG
56278: PUSH
56279: LD_INT 5
56281: NEG
56282: PUSH
56283: EMPTY
56284: LIST
56285: LIST
56286: PUSH
56287: LD_INT 5
56289: NEG
56290: PUSH
56291: LD_INT 4
56293: NEG
56294: PUSH
56295: EMPTY
56296: LIST
56297: LIST
56298: PUSH
56299: LD_INT 5
56301: NEG
56302: PUSH
56303: LD_INT 5
56305: NEG
56306: PUSH
56307: EMPTY
56308: LIST
56309: LIST
56310: PUSH
56311: LD_INT 5
56313: NEG
56314: PUSH
56315: LD_INT 6
56317: NEG
56318: PUSH
56319: EMPTY
56320: LIST
56321: LIST
56322: PUSH
56323: LD_INT 6
56325: NEG
56326: PUSH
56327: LD_INT 5
56329: NEG
56330: PUSH
56331: EMPTY
56332: LIST
56333: LIST
56334: PUSH
56335: LD_INT 6
56337: NEG
56338: PUSH
56339: LD_INT 6
56341: NEG
56342: PUSH
56343: EMPTY
56344: LIST
56345: LIST
56346: PUSH
56347: EMPTY
56348: LIST
56349: LIST
56350: LIST
56351: LIST
56352: LIST
56353: LIST
56354: LIST
56355: LIST
56356: LIST
56357: LIST
56358: LIST
56359: LIST
56360: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
56361: LD_ADDR_VAR 0 41
56365: PUSH
56366: LD_INT 0
56368: PUSH
56369: LD_INT 2
56371: NEG
56372: PUSH
56373: EMPTY
56374: LIST
56375: LIST
56376: PUSH
56377: LD_INT 1
56379: NEG
56380: PUSH
56381: LD_INT 3
56383: NEG
56384: PUSH
56385: EMPTY
56386: LIST
56387: LIST
56388: PUSH
56389: LD_INT 1
56391: PUSH
56392: LD_INT 2
56394: NEG
56395: PUSH
56396: EMPTY
56397: LIST
56398: LIST
56399: PUSH
56400: EMPTY
56401: LIST
56402: LIST
56403: LIST
56404: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
56405: LD_ADDR_VAR 0 42
56409: PUSH
56410: LD_INT 2
56412: PUSH
56413: LD_INT 0
56415: PUSH
56416: EMPTY
56417: LIST
56418: LIST
56419: PUSH
56420: LD_INT 2
56422: PUSH
56423: LD_INT 1
56425: NEG
56426: PUSH
56427: EMPTY
56428: LIST
56429: LIST
56430: PUSH
56431: LD_INT 3
56433: PUSH
56434: LD_INT 1
56436: PUSH
56437: EMPTY
56438: LIST
56439: LIST
56440: PUSH
56441: EMPTY
56442: LIST
56443: LIST
56444: LIST
56445: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
56446: LD_ADDR_VAR 0 43
56450: PUSH
56451: LD_INT 2
56453: PUSH
56454: LD_INT 2
56456: PUSH
56457: EMPTY
56458: LIST
56459: LIST
56460: PUSH
56461: LD_INT 3
56463: PUSH
56464: LD_INT 2
56466: PUSH
56467: EMPTY
56468: LIST
56469: LIST
56470: PUSH
56471: LD_INT 2
56473: PUSH
56474: LD_INT 3
56476: PUSH
56477: EMPTY
56478: LIST
56479: LIST
56480: PUSH
56481: EMPTY
56482: LIST
56483: LIST
56484: LIST
56485: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
56486: LD_ADDR_VAR 0 44
56490: PUSH
56491: LD_INT 0
56493: PUSH
56494: LD_INT 2
56496: PUSH
56497: EMPTY
56498: LIST
56499: LIST
56500: PUSH
56501: LD_INT 1
56503: PUSH
56504: LD_INT 3
56506: PUSH
56507: EMPTY
56508: LIST
56509: LIST
56510: PUSH
56511: LD_INT 1
56513: NEG
56514: PUSH
56515: LD_INT 2
56517: PUSH
56518: EMPTY
56519: LIST
56520: LIST
56521: PUSH
56522: EMPTY
56523: LIST
56524: LIST
56525: LIST
56526: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
56527: LD_ADDR_VAR 0 45
56531: PUSH
56532: LD_INT 2
56534: NEG
56535: PUSH
56536: LD_INT 0
56538: PUSH
56539: EMPTY
56540: LIST
56541: LIST
56542: PUSH
56543: LD_INT 2
56545: NEG
56546: PUSH
56547: LD_INT 1
56549: PUSH
56550: EMPTY
56551: LIST
56552: LIST
56553: PUSH
56554: LD_INT 3
56556: NEG
56557: PUSH
56558: LD_INT 1
56560: NEG
56561: PUSH
56562: EMPTY
56563: LIST
56564: LIST
56565: PUSH
56566: EMPTY
56567: LIST
56568: LIST
56569: LIST
56570: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
56571: LD_ADDR_VAR 0 46
56575: PUSH
56576: LD_INT 2
56578: NEG
56579: PUSH
56580: LD_INT 2
56582: NEG
56583: PUSH
56584: EMPTY
56585: LIST
56586: LIST
56587: PUSH
56588: LD_INT 2
56590: NEG
56591: PUSH
56592: LD_INT 3
56594: NEG
56595: PUSH
56596: EMPTY
56597: LIST
56598: LIST
56599: PUSH
56600: LD_INT 3
56602: NEG
56603: PUSH
56604: LD_INT 2
56606: NEG
56607: PUSH
56608: EMPTY
56609: LIST
56610: LIST
56611: PUSH
56612: EMPTY
56613: LIST
56614: LIST
56615: LIST
56616: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
56617: LD_ADDR_VAR 0 47
56621: PUSH
56622: LD_INT 2
56624: NEG
56625: PUSH
56626: LD_INT 3
56628: NEG
56629: PUSH
56630: EMPTY
56631: LIST
56632: LIST
56633: PUSH
56634: LD_INT 1
56636: NEG
56637: PUSH
56638: LD_INT 3
56640: NEG
56641: PUSH
56642: EMPTY
56643: LIST
56644: LIST
56645: PUSH
56646: EMPTY
56647: LIST
56648: LIST
56649: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
56650: LD_ADDR_VAR 0 48
56654: PUSH
56655: LD_INT 1
56657: PUSH
56658: LD_INT 2
56660: NEG
56661: PUSH
56662: EMPTY
56663: LIST
56664: LIST
56665: PUSH
56666: LD_INT 2
56668: PUSH
56669: LD_INT 1
56671: NEG
56672: PUSH
56673: EMPTY
56674: LIST
56675: LIST
56676: PUSH
56677: EMPTY
56678: LIST
56679: LIST
56680: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
56681: LD_ADDR_VAR 0 49
56685: PUSH
56686: LD_INT 3
56688: PUSH
56689: LD_INT 1
56691: PUSH
56692: EMPTY
56693: LIST
56694: LIST
56695: PUSH
56696: LD_INT 3
56698: PUSH
56699: LD_INT 2
56701: PUSH
56702: EMPTY
56703: LIST
56704: LIST
56705: PUSH
56706: EMPTY
56707: LIST
56708: LIST
56709: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
56710: LD_ADDR_VAR 0 50
56714: PUSH
56715: LD_INT 2
56717: PUSH
56718: LD_INT 3
56720: PUSH
56721: EMPTY
56722: LIST
56723: LIST
56724: PUSH
56725: LD_INT 1
56727: PUSH
56728: LD_INT 3
56730: PUSH
56731: EMPTY
56732: LIST
56733: LIST
56734: PUSH
56735: EMPTY
56736: LIST
56737: LIST
56738: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
56739: LD_ADDR_VAR 0 51
56743: PUSH
56744: LD_INT 1
56746: NEG
56747: PUSH
56748: LD_INT 2
56750: PUSH
56751: EMPTY
56752: LIST
56753: LIST
56754: PUSH
56755: LD_INT 2
56757: NEG
56758: PUSH
56759: LD_INT 1
56761: PUSH
56762: EMPTY
56763: LIST
56764: LIST
56765: PUSH
56766: EMPTY
56767: LIST
56768: LIST
56769: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
56770: LD_ADDR_VAR 0 52
56774: PUSH
56775: LD_INT 3
56777: NEG
56778: PUSH
56779: LD_INT 1
56781: NEG
56782: PUSH
56783: EMPTY
56784: LIST
56785: LIST
56786: PUSH
56787: LD_INT 3
56789: NEG
56790: PUSH
56791: LD_INT 2
56793: NEG
56794: PUSH
56795: EMPTY
56796: LIST
56797: LIST
56798: PUSH
56799: EMPTY
56800: LIST
56801: LIST
56802: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56803: LD_ADDR_VAR 0 53
56807: PUSH
56808: LD_INT 1
56810: NEG
56811: PUSH
56812: LD_INT 3
56814: NEG
56815: PUSH
56816: EMPTY
56817: LIST
56818: LIST
56819: PUSH
56820: LD_INT 0
56822: PUSH
56823: LD_INT 3
56825: NEG
56826: PUSH
56827: EMPTY
56828: LIST
56829: LIST
56830: PUSH
56831: LD_INT 1
56833: PUSH
56834: LD_INT 2
56836: NEG
56837: PUSH
56838: EMPTY
56839: LIST
56840: LIST
56841: PUSH
56842: EMPTY
56843: LIST
56844: LIST
56845: LIST
56846: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56847: LD_ADDR_VAR 0 54
56851: PUSH
56852: LD_INT 2
56854: PUSH
56855: LD_INT 1
56857: NEG
56858: PUSH
56859: EMPTY
56860: LIST
56861: LIST
56862: PUSH
56863: LD_INT 3
56865: PUSH
56866: LD_INT 0
56868: PUSH
56869: EMPTY
56870: LIST
56871: LIST
56872: PUSH
56873: LD_INT 3
56875: PUSH
56876: LD_INT 1
56878: PUSH
56879: EMPTY
56880: LIST
56881: LIST
56882: PUSH
56883: EMPTY
56884: LIST
56885: LIST
56886: LIST
56887: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56888: LD_ADDR_VAR 0 55
56892: PUSH
56893: LD_INT 3
56895: PUSH
56896: LD_INT 2
56898: PUSH
56899: EMPTY
56900: LIST
56901: LIST
56902: PUSH
56903: LD_INT 3
56905: PUSH
56906: LD_INT 3
56908: PUSH
56909: EMPTY
56910: LIST
56911: LIST
56912: PUSH
56913: LD_INT 2
56915: PUSH
56916: LD_INT 3
56918: PUSH
56919: EMPTY
56920: LIST
56921: LIST
56922: PUSH
56923: EMPTY
56924: LIST
56925: LIST
56926: LIST
56927: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56928: LD_ADDR_VAR 0 56
56932: PUSH
56933: LD_INT 1
56935: PUSH
56936: LD_INT 3
56938: PUSH
56939: EMPTY
56940: LIST
56941: LIST
56942: PUSH
56943: LD_INT 0
56945: PUSH
56946: LD_INT 3
56948: PUSH
56949: EMPTY
56950: LIST
56951: LIST
56952: PUSH
56953: LD_INT 1
56955: NEG
56956: PUSH
56957: LD_INT 2
56959: PUSH
56960: EMPTY
56961: LIST
56962: LIST
56963: PUSH
56964: EMPTY
56965: LIST
56966: LIST
56967: LIST
56968: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56969: LD_ADDR_VAR 0 57
56973: PUSH
56974: LD_INT 2
56976: NEG
56977: PUSH
56978: LD_INT 1
56980: PUSH
56981: EMPTY
56982: LIST
56983: LIST
56984: PUSH
56985: LD_INT 3
56987: NEG
56988: PUSH
56989: LD_INT 0
56991: PUSH
56992: EMPTY
56993: LIST
56994: LIST
56995: PUSH
56996: LD_INT 3
56998: NEG
56999: PUSH
57000: LD_INT 1
57002: NEG
57003: PUSH
57004: EMPTY
57005: LIST
57006: LIST
57007: PUSH
57008: EMPTY
57009: LIST
57010: LIST
57011: LIST
57012: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57013: LD_ADDR_VAR 0 58
57017: PUSH
57018: LD_INT 2
57020: NEG
57021: PUSH
57022: LD_INT 3
57024: NEG
57025: PUSH
57026: EMPTY
57027: LIST
57028: LIST
57029: PUSH
57030: LD_INT 3
57032: NEG
57033: PUSH
57034: LD_INT 2
57036: NEG
57037: PUSH
57038: EMPTY
57039: LIST
57040: LIST
57041: PUSH
57042: LD_INT 3
57044: NEG
57045: PUSH
57046: LD_INT 3
57048: NEG
57049: PUSH
57050: EMPTY
57051: LIST
57052: LIST
57053: PUSH
57054: EMPTY
57055: LIST
57056: LIST
57057: LIST
57058: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
57059: LD_ADDR_VAR 0 59
57063: PUSH
57064: LD_INT 1
57066: NEG
57067: PUSH
57068: LD_INT 2
57070: NEG
57071: PUSH
57072: EMPTY
57073: LIST
57074: LIST
57075: PUSH
57076: LD_INT 0
57078: PUSH
57079: LD_INT 2
57081: NEG
57082: PUSH
57083: EMPTY
57084: LIST
57085: LIST
57086: PUSH
57087: LD_INT 1
57089: PUSH
57090: LD_INT 1
57092: NEG
57093: PUSH
57094: EMPTY
57095: LIST
57096: LIST
57097: PUSH
57098: EMPTY
57099: LIST
57100: LIST
57101: LIST
57102: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
57103: LD_ADDR_VAR 0 60
57107: PUSH
57108: LD_INT 1
57110: PUSH
57111: LD_INT 1
57113: NEG
57114: PUSH
57115: EMPTY
57116: LIST
57117: LIST
57118: PUSH
57119: LD_INT 2
57121: PUSH
57122: LD_INT 0
57124: PUSH
57125: EMPTY
57126: LIST
57127: LIST
57128: PUSH
57129: LD_INT 2
57131: PUSH
57132: LD_INT 1
57134: PUSH
57135: EMPTY
57136: LIST
57137: LIST
57138: PUSH
57139: EMPTY
57140: LIST
57141: LIST
57142: LIST
57143: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
57144: LD_ADDR_VAR 0 61
57148: PUSH
57149: LD_INT 2
57151: PUSH
57152: LD_INT 1
57154: PUSH
57155: EMPTY
57156: LIST
57157: LIST
57158: PUSH
57159: LD_INT 2
57161: PUSH
57162: LD_INT 2
57164: PUSH
57165: EMPTY
57166: LIST
57167: LIST
57168: PUSH
57169: LD_INT 1
57171: PUSH
57172: LD_INT 2
57174: PUSH
57175: EMPTY
57176: LIST
57177: LIST
57178: PUSH
57179: EMPTY
57180: LIST
57181: LIST
57182: LIST
57183: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
57184: LD_ADDR_VAR 0 62
57188: PUSH
57189: LD_INT 1
57191: PUSH
57192: LD_INT 2
57194: PUSH
57195: EMPTY
57196: LIST
57197: LIST
57198: PUSH
57199: LD_INT 0
57201: PUSH
57202: LD_INT 2
57204: PUSH
57205: EMPTY
57206: LIST
57207: LIST
57208: PUSH
57209: LD_INT 1
57211: NEG
57212: PUSH
57213: LD_INT 1
57215: PUSH
57216: EMPTY
57217: LIST
57218: LIST
57219: PUSH
57220: EMPTY
57221: LIST
57222: LIST
57223: LIST
57224: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
57225: LD_ADDR_VAR 0 63
57229: PUSH
57230: LD_INT 1
57232: NEG
57233: PUSH
57234: LD_INT 1
57236: PUSH
57237: EMPTY
57238: LIST
57239: LIST
57240: PUSH
57241: LD_INT 2
57243: NEG
57244: PUSH
57245: LD_INT 0
57247: PUSH
57248: EMPTY
57249: LIST
57250: LIST
57251: PUSH
57252: LD_INT 2
57254: NEG
57255: PUSH
57256: LD_INT 1
57258: NEG
57259: PUSH
57260: EMPTY
57261: LIST
57262: LIST
57263: PUSH
57264: EMPTY
57265: LIST
57266: LIST
57267: LIST
57268: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57269: LD_ADDR_VAR 0 64
57273: PUSH
57274: LD_INT 1
57276: NEG
57277: PUSH
57278: LD_INT 2
57280: NEG
57281: PUSH
57282: EMPTY
57283: LIST
57284: LIST
57285: PUSH
57286: LD_INT 2
57288: NEG
57289: PUSH
57290: LD_INT 1
57292: NEG
57293: PUSH
57294: EMPTY
57295: LIST
57296: LIST
57297: PUSH
57298: LD_INT 2
57300: NEG
57301: PUSH
57302: LD_INT 2
57304: NEG
57305: PUSH
57306: EMPTY
57307: LIST
57308: LIST
57309: PUSH
57310: EMPTY
57311: LIST
57312: LIST
57313: LIST
57314: ST_TO_ADDR
// end ; 2 :
57315: GO 60581
57317: LD_INT 2
57319: DOUBLE
57320: EQUAL
57321: IFTRUE 57325
57323: GO 60580
57325: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
57326: LD_ADDR_VAR 0 29
57330: PUSH
57331: LD_INT 4
57333: PUSH
57334: LD_INT 0
57336: PUSH
57337: EMPTY
57338: LIST
57339: LIST
57340: PUSH
57341: LD_INT 4
57343: PUSH
57344: LD_INT 1
57346: NEG
57347: PUSH
57348: EMPTY
57349: LIST
57350: LIST
57351: PUSH
57352: LD_INT 5
57354: PUSH
57355: LD_INT 0
57357: PUSH
57358: EMPTY
57359: LIST
57360: LIST
57361: PUSH
57362: LD_INT 5
57364: PUSH
57365: LD_INT 1
57367: PUSH
57368: EMPTY
57369: LIST
57370: LIST
57371: PUSH
57372: LD_INT 4
57374: PUSH
57375: LD_INT 1
57377: PUSH
57378: EMPTY
57379: LIST
57380: LIST
57381: PUSH
57382: LD_INT 3
57384: PUSH
57385: LD_INT 0
57387: PUSH
57388: EMPTY
57389: LIST
57390: LIST
57391: PUSH
57392: LD_INT 3
57394: PUSH
57395: LD_INT 1
57397: NEG
57398: PUSH
57399: EMPTY
57400: LIST
57401: LIST
57402: PUSH
57403: LD_INT 3
57405: PUSH
57406: LD_INT 2
57408: NEG
57409: PUSH
57410: EMPTY
57411: LIST
57412: LIST
57413: PUSH
57414: LD_INT 5
57416: PUSH
57417: LD_INT 2
57419: PUSH
57420: EMPTY
57421: LIST
57422: LIST
57423: PUSH
57424: LD_INT 3
57426: PUSH
57427: LD_INT 3
57429: PUSH
57430: EMPTY
57431: LIST
57432: LIST
57433: PUSH
57434: LD_INT 3
57436: PUSH
57437: LD_INT 2
57439: PUSH
57440: EMPTY
57441: LIST
57442: LIST
57443: PUSH
57444: LD_INT 4
57446: PUSH
57447: LD_INT 3
57449: PUSH
57450: EMPTY
57451: LIST
57452: LIST
57453: PUSH
57454: LD_INT 4
57456: PUSH
57457: LD_INT 4
57459: PUSH
57460: EMPTY
57461: LIST
57462: LIST
57463: PUSH
57464: LD_INT 3
57466: PUSH
57467: LD_INT 4
57469: PUSH
57470: EMPTY
57471: LIST
57472: LIST
57473: PUSH
57474: LD_INT 2
57476: PUSH
57477: LD_INT 3
57479: PUSH
57480: EMPTY
57481: LIST
57482: LIST
57483: PUSH
57484: LD_INT 2
57486: PUSH
57487: LD_INT 2
57489: PUSH
57490: EMPTY
57491: LIST
57492: LIST
57493: PUSH
57494: LD_INT 4
57496: PUSH
57497: LD_INT 2
57499: PUSH
57500: EMPTY
57501: LIST
57502: LIST
57503: PUSH
57504: LD_INT 2
57506: PUSH
57507: LD_INT 4
57509: PUSH
57510: EMPTY
57511: LIST
57512: LIST
57513: PUSH
57514: LD_INT 0
57516: PUSH
57517: LD_INT 4
57519: PUSH
57520: EMPTY
57521: LIST
57522: LIST
57523: PUSH
57524: LD_INT 0
57526: PUSH
57527: LD_INT 3
57529: PUSH
57530: EMPTY
57531: LIST
57532: LIST
57533: PUSH
57534: LD_INT 1
57536: PUSH
57537: LD_INT 4
57539: PUSH
57540: EMPTY
57541: LIST
57542: LIST
57543: PUSH
57544: LD_INT 1
57546: PUSH
57547: LD_INT 5
57549: PUSH
57550: EMPTY
57551: LIST
57552: LIST
57553: PUSH
57554: LD_INT 0
57556: PUSH
57557: LD_INT 5
57559: PUSH
57560: EMPTY
57561: LIST
57562: LIST
57563: PUSH
57564: LD_INT 1
57566: NEG
57567: PUSH
57568: LD_INT 4
57570: PUSH
57571: EMPTY
57572: LIST
57573: LIST
57574: PUSH
57575: LD_INT 1
57577: NEG
57578: PUSH
57579: LD_INT 3
57581: PUSH
57582: EMPTY
57583: LIST
57584: LIST
57585: PUSH
57586: LD_INT 2
57588: PUSH
57589: LD_INT 5
57591: PUSH
57592: EMPTY
57593: LIST
57594: LIST
57595: PUSH
57596: LD_INT 2
57598: NEG
57599: PUSH
57600: LD_INT 3
57602: PUSH
57603: EMPTY
57604: LIST
57605: LIST
57606: PUSH
57607: LD_INT 3
57609: NEG
57610: PUSH
57611: LD_INT 0
57613: PUSH
57614: EMPTY
57615: LIST
57616: LIST
57617: PUSH
57618: LD_INT 3
57620: NEG
57621: PUSH
57622: LD_INT 1
57624: NEG
57625: PUSH
57626: EMPTY
57627: LIST
57628: LIST
57629: PUSH
57630: LD_INT 2
57632: NEG
57633: PUSH
57634: LD_INT 0
57636: PUSH
57637: EMPTY
57638: LIST
57639: LIST
57640: PUSH
57641: LD_INT 2
57643: NEG
57644: PUSH
57645: LD_INT 1
57647: PUSH
57648: EMPTY
57649: LIST
57650: LIST
57651: PUSH
57652: LD_INT 3
57654: NEG
57655: PUSH
57656: LD_INT 1
57658: PUSH
57659: EMPTY
57660: LIST
57661: LIST
57662: PUSH
57663: LD_INT 4
57665: NEG
57666: PUSH
57667: LD_INT 0
57669: PUSH
57670: EMPTY
57671: LIST
57672: LIST
57673: PUSH
57674: LD_INT 4
57676: NEG
57677: PUSH
57678: LD_INT 1
57680: NEG
57681: PUSH
57682: EMPTY
57683: LIST
57684: LIST
57685: PUSH
57686: LD_INT 4
57688: NEG
57689: PUSH
57690: LD_INT 2
57692: NEG
57693: PUSH
57694: EMPTY
57695: LIST
57696: LIST
57697: PUSH
57698: LD_INT 2
57700: NEG
57701: PUSH
57702: LD_INT 2
57704: PUSH
57705: EMPTY
57706: LIST
57707: LIST
57708: PUSH
57709: LD_INT 4
57711: NEG
57712: PUSH
57713: LD_INT 4
57715: NEG
57716: PUSH
57717: EMPTY
57718: LIST
57719: LIST
57720: PUSH
57721: LD_INT 4
57723: NEG
57724: PUSH
57725: LD_INT 5
57727: NEG
57728: PUSH
57729: EMPTY
57730: LIST
57731: LIST
57732: PUSH
57733: LD_INT 3
57735: NEG
57736: PUSH
57737: LD_INT 4
57739: NEG
57740: PUSH
57741: EMPTY
57742: LIST
57743: LIST
57744: PUSH
57745: LD_INT 3
57747: NEG
57748: PUSH
57749: LD_INT 3
57751: NEG
57752: PUSH
57753: EMPTY
57754: LIST
57755: LIST
57756: PUSH
57757: LD_INT 4
57759: NEG
57760: PUSH
57761: LD_INT 3
57763: NEG
57764: PUSH
57765: EMPTY
57766: LIST
57767: LIST
57768: PUSH
57769: LD_INT 5
57771: NEG
57772: PUSH
57773: LD_INT 4
57775: NEG
57776: PUSH
57777: EMPTY
57778: LIST
57779: LIST
57780: PUSH
57781: LD_INT 5
57783: NEG
57784: PUSH
57785: LD_INT 5
57787: NEG
57788: PUSH
57789: EMPTY
57790: LIST
57791: LIST
57792: PUSH
57793: LD_INT 3
57795: NEG
57796: PUSH
57797: LD_INT 5
57799: NEG
57800: PUSH
57801: EMPTY
57802: LIST
57803: LIST
57804: PUSH
57805: LD_INT 5
57807: NEG
57808: PUSH
57809: LD_INT 3
57811: NEG
57812: PUSH
57813: EMPTY
57814: LIST
57815: LIST
57816: PUSH
57817: EMPTY
57818: LIST
57819: LIST
57820: LIST
57821: LIST
57822: LIST
57823: LIST
57824: LIST
57825: LIST
57826: LIST
57827: LIST
57828: LIST
57829: LIST
57830: LIST
57831: LIST
57832: LIST
57833: LIST
57834: LIST
57835: LIST
57836: LIST
57837: LIST
57838: LIST
57839: LIST
57840: LIST
57841: LIST
57842: LIST
57843: LIST
57844: LIST
57845: LIST
57846: LIST
57847: LIST
57848: LIST
57849: LIST
57850: LIST
57851: LIST
57852: LIST
57853: LIST
57854: LIST
57855: LIST
57856: LIST
57857: LIST
57858: LIST
57859: LIST
57860: LIST
57861: LIST
57862: LIST
57863: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
57864: LD_ADDR_VAR 0 30
57868: PUSH
57869: LD_INT 4
57871: PUSH
57872: LD_INT 4
57874: PUSH
57875: EMPTY
57876: LIST
57877: LIST
57878: PUSH
57879: LD_INT 4
57881: PUSH
57882: LD_INT 3
57884: PUSH
57885: EMPTY
57886: LIST
57887: LIST
57888: PUSH
57889: LD_INT 5
57891: PUSH
57892: LD_INT 4
57894: PUSH
57895: EMPTY
57896: LIST
57897: LIST
57898: PUSH
57899: LD_INT 5
57901: PUSH
57902: LD_INT 5
57904: PUSH
57905: EMPTY
57906: LIST
57907: LIST
57908: PUSH
57909: LD_INT 4
57911: PUSH
57912: LD_INT 5
57914: PUSH
57915: EMPTY
57916: LIST
57917: LIST
57918: PUSH
57919: LD_INT 3
57921: PUSH
57922: LD_INT 4
57924: PUSH
57925: EMPTY
57926: LIST
57927: LIST
57928: PUSH
57929: LD_INT 3
57931: PUSH
57932: LD_INT 3
57934: PUSH
57935: EMPTY
57936: LIST
57937: LIST
57938: PUSH
57939: LD_INT 5
57941: PUSH
57942: LD_INT 3
57944: PUSH
57945: EMPTY
57946: LIST
57947: LIST
57948: PUSH
57949: LD_INT 3
57951: PUSH
57952: LD_INT 5
57954: PUSH
57955: EMPTY
57956: LIST
57957: LIST
57958: PUSH
57959: LD_INT 0
57961: PUSH
57962: LD_INT 3
57964: PUSH
57965: EMPTY
57966: LIST
57967: LIST
57968: PUSH
57969: LD_INT 0
57971: PUSH
57972: LD_INT 2
57974: PUSH
57975: EMPTY
57976: LIST
57977: LIST
57978: PUSH
57979: LD_INT 1
57981: PUSH
57982: LD_INT 3
57984: PUSH
57985: EMPTY
57986: LIST
57987: LIST
57988: PUSH
57989: LD_INT 1
57991: PUSH
57992: LD_INT 4
57994: PUSH
57995: EMPTY
57996: LIST
57997: LIST
57998: PUSH
57999: LD_INT 0
58001: PUSH
58002: LD_INT 4
58004: PUSH
58005: EMPTY
58006: LIST
58007: LIST
58008: PUSH
58009: LD_INT 1
58011: NEG
58012: PUSH
58013: LD_INT 3
58015: PUSH
58016: EMPTY
58017: LIST
58018: LIST
58019: PUSH
58020: LD_INT 1
58022: NEG
58023: PUSH
58024: LD_INT 2
58026: PUSH
58027: EMPTY
58028: LIST
58029: LIST
58030: PUSH
58031: LD_INT 2
58033: PUSH
58034: LD_INT 4
58036: PUSH
58037: EMPTY
58038: LIST
58039: LIST
58040: PUSH
58041: LD_INT 2
58043: NEG
58044: PUSH
58045: LD_INT 2
58047: PUSH
58048: EMPTY
58049: LIST
58050: LIST
58051: PUSH
58052: LD_INT 4
58054: NEG
58055: PUSH
58056: LD_INT 0
58058: PUSH
58059: EMPTY
58060: LIST
58061: LIST
58062: PUSH
58063: LD_INT 4
58065: NEG
58066: PUSH
58067: LD_INT 1
58069: NEG
58070: PUSH
58071: EMPTY
58072: LIST
58073: LIST
58074: PUSH
58075: LD_INT 3
58077: NEG
58078: PUSH
58079: LD_INT 0
58081: PUSH
58082: EMPTY
58083: LIST
58084: LIST
58085: PUSH
58086: LD_INT 3
58088: NEG
58089: PUSH
58090: LD_INT 1
58092: PUSH
58093: EMPTY
58094: LIST
58095: LIST
58096: PUSH
58097: LD_INT 4
58099: NEG
58100: PUSH
58101: LD_INT 1
58103: PUSH
58104: EMPTY
58105: LIST
58106: LIST
58107: PUSH
58108: LD_INT 5
58110: NEG
58111: PUSH
58112: LD_INT 0
58114: PUSH
58115: EMPTY
58116: LIST
58117: LIST
58118: PUSH
58119: LD_INT 5
58121: NEG
58122: PUSH
58123: LD_INT 1
58125: NEG
58126: PUSH
58127: EMPTY
58128: LIST
58129: LIST
58130: PUSH
58131: LD_INT 5
58133: NEG
58134: PUSH
58135: LD_INT 2
58137: NEG
58138: PUSH
58139: EMPTY
58140: LIST
58141: LIST
58142: PUSH
58143: LD_INT 3
58145: NEG
58146: PUSH
58147: LD_INT 2
58149: PUSH
58150: EMPTY
58151: LIST
58152: LIST
58153: PUSH
58154: LD_INT 3
58156: NEG
58157: PUSH
58158: LD_INT 3
58160: NEG
58161: PUSH
58162: EMPTY
58163: LIST
58164: LIST
58165: PUSH
58166: LD_INT 3
58168: NEG
58169: PUSH
58170: LD_INT 4
58172: NEG
58173: PUSH
58174: EMPTY
58175: LIST
58176: LIST
58177: PUSH
58178: LD_INT 2
58180: NEG
58181: PUSH
58182: LD_INT 3
58184: NEG
58185: PUSH
58186: EMPTY
58187: LIST
58188: LIST
58189: PUSH
58190: LD_INT 2
58192: NEG
58193: PUSH
58194: LD_INT 2
58196: NEG
58197: PUSH
58198: EMPTY
58199: LIST
58200: LIST
58201: PUSH
58202: LD_INT 3
58204: NEG
58205: PUSH
58206: LD_INT 2
58208: NEG
58209: PUSH
58210: EMPTY
58211: LIST
58212: LIST
58213: PUSH
58214: LD_INT 4
58216: NEG
58217: PUSH
58218: LD_INT 3
58220: NEG
58221: PUSH
58222: EMPTY
58223: LIST
58224: LIST
58225: PUSH
58226: LD_INT 4
58228: NEG
58229: PUSH
58230: LD_INT 4
58232: NEG
58233: PUSH
58234: EMPTY
58235: LIST
58236: LIST
58237: PUSH
58238: LD_INT 2
58240: NEG
58241: PUSH
58242: LD_INT 4
58244: NEG
58245: PUSH
58246: EMPTY
58247: LIST
58248: LIST
58249: PUSH
58250: LD_INT 4
58252: NEG
58253: PUSH
58254: LD_INT 2
58256: NEG
58257: PUSH
58258: EMPTY
58259: LIST
58260: LIST
58261: PUSH
58262: LD_INT 0
58264: PUSH
58265: LD_INT 4
58267: NEG
58268: PUSH
58269: EMPTY
58270: LIST
58271: LIST
58272: PUSH
58273: LD_INT 0
58275: PUSH
58276: LD_INT 5
58278: NEG
58279: PUSH
58280: EMPTY
58281: LIST
58282: LIST
58283: PUSH
58284: LD_INT 1
58286: PUSH
58287: LD_INT 4
58289: NEG
58290: PUSH
58291: EMPTY
58292: LIST
58293: LIST
58294: PUSH
58295: LD_INT 1
58297: PUSH
58298: LD_INT 3
58300: NEG
58301: PUSH
58302: EMPTY
58303: LIST
58304: LIST
58305: PUSH
58306: LD_INT 0
58308: PUSH
58309: LD_INT 3
58311: NEG
58312: PUSH
58313: EMPTY
58314: LIST
58315: LIST
58316: PUSH
58317: LD_INT 1
58319: NEG
58320: PUSH
58321: LD_INT 4
58323: NEG
58324: PUSH
58325: EMPTY
58326: LIST
58327: LIST
58328: PUSH
58329: LD_INT 1
58331: NEG
58332: PUSH
58333: LD_INT 5
58335: NEG
58336: PUSH
58337: EMPTY
58338: LIST
58339: LIST
58340: PUSH
58341: LD_INT 2
58343: PUSH
58344: LD_INT 3
58346: NEG
58347: PUSH
58348: EMPTY
58349: LIST
58350: LIST
58351: PUSH
58352: LD_INT 2
58354: NEG
58355: PUSH
58356: LD_INT 5
58358: NEG
58359: PUSH
58360: EMPTY
58361: LIST
58362: LIST
58363: PUSH
58364: EMPTY
58365: LIST
58366: LIST
58367: LIST
58368: LIST
58369: LIST
58370: LIST
58371: LIST
58372: LIST
58373: LIST
58374: LIST
58375: LIST
58376: LIST
58377: LIST
58378: LIST
58379: LIST
58380: LIST
58381: LIST
58382: LIST
58383: LIST
58384: LIST
58385: LIST
58386: LIST
58387: LIST
58388: LIST
58389: LIST
58390: LIST
58391: LIST
58392: LIST
58393: LIST
58394: LIST
58395: LIST
58396: LIST
58397: LIST
58398: LIST
58399: LIST
58400: LIST
58401: LIST
58402: LIST
58403: LIST
58404: LIST
58405: LIST
58406: LIST
58407: LIST
58408: LIST
58409: LIST
58410: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
58411: LD_ADDR_VAR 0 31
58415: PUSH
58416: LD_INT 0
58418: PUSH
58419: LD_INT 4
58421: PUSH
58422: EMPTY
58423: LIST
58424: LIST
58425: PUSH
58426: LD_INT 0
58428: PUSH
58429: LD_INT 3
58431: PUSH
58432: EMPTY
58433: LIST
58434: LIST
58435: PUSH
58436: LD_INT 1
58438: PUSH
58439: LD_INT 4
58441: PUSH
58442: EMPTY
58443: LIST
58444: LIST
58445: PUSH
58446: LD_INT 1
58448: PUSH
58449: LD_INT 5
58451: PUSH
58452: EMPTY
58453: LIST
58454: LIST
58455: PUSH
58456: LD_INT 0
58458: PUSH
58459: LD_INT 5
58461: PUSH
58462: EMPTY
58463: LIST
58464: LIST
58465: PUSH
58466: LD_INT 1
58468: NEG
58469: PUSH
58470: LD_INT 4
58472: PUSH
58473: EMPTY
58474: LIST
58475: LIST
58476: PUSH
58477: LD_INT 1
58479: NEG
58480: PUSH
58481: LD_INT 3
58483: PUSH
58484: EMPTY
58485: LIST
58486: LIST
58487: PUSH
58488: LD_INT 2
58490: PUSH
58491: LD_INT 5
58493: PUSH
58494: EMPTY
58495: LIST
58496: LIST
58497: PUSH
58498: LD_INT 2
58500: NEG
58501: PUSH
58502: LD_INT 3
58504: PUSH
58505: EMPTY
58506: LIST
58507: LIST
58508: PUSH
58509: LD_INT 3
58511: NEG
58512: PUSH
58513: LD_INT 0
58515: PUSH
58516: EMPTY
58517: LIST
58518: LIST
58519: PUSH
58520: LD_INT 3
58522: NEG
58523: PUSH
58524: LD_INT 1
58526: NEG
58527: PUSH
58528: EMPTY
58529: LIST
58530: LIST
58531: PUSH
58532: LD_INT 2
58534: NEG
58535: PUSH
58536: LD_INT 0
58538: PUSH
58539: EMPTY
58540: LIST
58541: LIST
58542: PUSH
58543: LD_INT 2
58545: NEG
58546: PUSH
58547: LD_INT 1
58549: PUSH
58550: EMPTY
58551: LIST
58552: LIST
58553: PUSH
58554: LD_INT 3
58556: NEG
58557: PUSH
58558: LD_INT 1
58560: PUSH
58561: EMPTY
58562: LIST
58563: LIST
58564: PUSH
58565: LD_INT 4
58567: NEG
58568: PUSH
58569: LD_INT 0
58571: PUSH
58572: EMPTY
58573: LIST
58574: LIST
58575: PUSH
58576: LD_INT 4
58578: NEG
58579: PUSH
58580: LD_INT 1
58582: NEG
58583: PUSH
58584: EMPTY
58585: LIST
58586: LIST
58587: PUSH
58588: LD_INT 4
58590: NEG
58591: PUSH
58592: LD_INT 2
58594: NEG
58595: PUSH
58596: EMPTY
58597: LIST
58598: LIST
58599: PUSH
58600: LD_INT 2
58602: NEG
58603: PUSH
58604: LD_INT 2
58606: PUSH
58607: EMPTY
58608: LIST
58609: LIST
58610: PUSH
58611: LD_INT 4
58613: NEG
58614: PUSH
58615: LD_INT 4
58617: NEG
58618: PUSH
58619: EMPTY
58620: LIST
58621: LIST
58622: PUSH
58623: LD_INT 4
58625: NEG
58626: PUSH
58627: LD_INT 5
58629: NEG
58630: PUSH
58631: EMPTY
58632: LIST
58633: LIST
58634: PUSH
58635: LD_INT 3
58637: NEG
58638: PUSH
58639: LD_INT 4
58641: NEG
58642: PUSH
58643: EMPTY
58644: LIST
58645: LIST
58646: PUSH
58647: LD_INT 3
58649: NEG
58650: PUSH
58651: LD_INT 3
58653: NEG
58654: PUSH
58655: EMPTY
58656: LIST
58657: LIST
58658: PUSH
58659: LD_INT 4
58661: NEG
58662: PUSH
58663: LD_INT 3
58665: NEG
58666: PUSH
58667: EMPTY
58668: LIST
58669: LIST
58670: PUSH
58671: LD_INT 5
58673: NEG
58674: PUSH
58675: LD_INT 4
58677: NEG
58678: PUSH
58679: EMPTY
58680: LIST
58681: LIST
58682: PUSH
58683: LD_INT 5
58685: NEG
58686: PUSH
58687: LD_INT 5
58689: NEG
58690: PUSH
58691: EMPTY
58692: LIST
58693: LIST
58694: PUSH
58695: LD_INT 3
58697: NEG
58698: PUSH
58699: LD_INT 5
58701: NEG
58702: PUSH
58703: EMPTY
58704: LIST
58705: LIST
58706: PUSH
58707: LD_INT 5
58709: NEG
58710: PUSH
58711: LD_INT 3
58713: NEG
58714: PUSH
58715: EMPTY
58716: LIST
58717: LIST
58718: PUSH
58719: LD_INT 0
58721: PUSH
58722: LD_INT 3
58724: NEG
58725: PUSH
58726: EMPTY
58727: LIST
58728: LIST
58729: PUSH
58730: LD_INT 0
58732: PUSH
58733: LD_INT 4
58735: NEG
58736: PUSH
58737: EMPTY
58738: LIST
58739: LIST
58740: PUSH
58741: LD_INT 1
58743: PUSH
58744: LD_INT 3
58746: NEG
58747: PUSH
58748: EMPTY
58749: LIST
58750: LIST
58751: PUSH
58752: LD_INT 1
58754: PUSH
58755: LD_INT 2
58757: NEG
58758: PUSH
58759: EMPTY
58760: LIST
58761: LIST
58762: PUSH
58763: LD_INT 0
58765: PUSH
58766: LD_INT 2
58768: NEG
58769: PUSH
58770: EMPTY
58771: LIST
58772: LIST
58773: PUSH
58774: LD_INT 1
58776: NEG
58777: PUSH
58778: LD_INT 3
58780: NEG
58781: PUSH
58782: EMPTY
58783: LIST
58784: LIST
58785: PUSH
58786: LD_INT 1
58788: NEG
58789: PUSH
58790: LD_INT 4
58792: NEG
58793: PUSH
58794: EMPTY
58795: LIST
58796: LIST
58797: PUSH
58798: LD_INT 2
58800: PUSH
58801: LD_INT 2
58803: NEG
58804: PUSH
58805: EMPTY
58806: LIST
58807: LIST
58808: PUSH
58809: LD_INT 2
58811: NEG
58812: PUSH
58813: LD_INT 4
58815: NEG
58816: PUSH
58817: EMPTY
58818: LIST
58819: LIST
58820: PUSH
58821: LD_INT 4
58823: PUSH
58824: LD_INT 0
58826: PUSH
58827: EMPTY
58828: LIST
58829: LIST
58830: PUSH
58831: LD_INT 4
58833: PUSH
58834: LD_INT 1
58836: NEG
58837: PUSH
58838: EMPTY
58839: LIST
58840: LIST
58841: PUSH
58842: LD_INT 5
58844: PUSH
58845: LD_INT 0
58847: PUSH
58848: EMPTY
58849: LIST
58850: LIST
58851: PUSH
58852: LD_INT 5
58854: PUSH
58855: LD_INT 1
58857: PUSH
58858: EMPTY
58859: LIST
58860: LIST
58861: PUSH
58862: LD_INT 4
58864: PUSH
58865: LD_INT 1
58867: PUSH
58868: EMPTY
58869: LIST
58870: LIST
58871: PUSH
58872: LD_INT 3
58874: PUSH
58875: LD_INT 0
58877: PUSH
58878: EMPTY
58879: LIST
58880: LIST
58881: PUSH
58882: LD_INT 3
58884: PUSH
58885: LD_INT 1
58887: NEG
58888: PUSH
58889: EMPTY
58890: LIST
58891: LIST
58892: PUSH
58893: LD_INT 3
58895: PUSH
58896: LD_INT 2
58898: NEG
58899: PUSH
58900: EMPTY
58901: LIST
58902: LIST
58903: PUSH
58904: LD_INT 5
58906: PUSH
58907: LD_INT 2
58909: PUSH
58910: EMPTY
58911: LIST
58912: LIST
58913: PUSH
58914: EMPTY
58915: LIST
58916: LIST
58917: LIST
58918: LIST
58919: LIST
58920: LIST
58921: LIST
58922: LIST
58923: LIST
58924: LIST
58925: LIST
58926: LIST
58927: LIST
58928: LIST
58929: LIST
58930: LIST
58931: LIST
58932: LIST
58933: LIST
58934: LIST
58935: LIST
58936: LIST
58937: LIST
58938: LIST
58939: LIST
58940: LIST
58941: LIST
58942: LIST
58943: LIST
58944: LIST
58945: LIST
58946: LIST
58947: LIST
58948: LIST
58949: LIST
58950: LIST
58951: LIST
58952: LIST
58953: LIST
58954: LIST
58955: LIST
58956: LIST
58957: LIST
58958: LIST
58959: LIST
58960: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
58961: LD_ADDR_VAR 0 32
58965: PUSH
58966: LD_INT 4
58968: NEG
58969: PUSH
58970: LD_INT 0
58972: PUSH
58973: EMPTY
58974: LIST
58975: LIST
58976: PUSH
58977: LD_INT 4
58979: NEG
58980: PUSH
58981: LD_INT 1
58983: NEG
58984: PUSH
58985: EMPTY
58986: LIST
58987: LIST
58988: PUSH
58989: LD_INT 3
58991: NEG
58992: PUSH
58993: LD_INT 0
58995: PUSH
58996: EMPTY
58997: LIST
58998: LIST
58999: PUSH
59000: LD_INT 3
59002: NEG
59003: PUSH
59004: LD_INT 1
59006: PUSH
59007: EMPTY
59008: LIST
59009: LIST
59010: PUSH
59011: LD_INT 4
59013: NEG
59014: PUSH
59015: LD_INT 1
59017: PUSH
59018: EMPTY
59019: LIST
59020: LIST
59021: PUSH
59022: LD_INT 5
59024: NEG
59025: PUSH
59026: LD_INT 0
59028: PUSH
59029: EMPTY
59030: LIST
59031: LIST
59032: PUSH
59033: LD_INT 5
59035: NEG
59036: PUSH
59037: LD_INT 1
59039: NEG
59040: PUSH
59041: EMPTY
59042: LIST
59043: LIST
59044: PUSH
59045: LD_INT 5
59047: NEG
59048: PUSH
59049: LD_INT 2
59051: NEG
59052: PUSH
59053: EMPTY
59054: LIST
59055: LIST
59056: PUSH
59057: LD_INT 3
59059: NEG
59060: PUSH
59061: LD_INT 2
59063: PUSH
59064: EMPTY
59065: LIST
59066: LIST
59067: PUSH
59068: LD_INT 3
59070: NEG
59071: PUSH
59072: LD_INT 3
59074: NEG
59075: PUSH
59076: EMPTY
59077: LIST
59078: LIST
59079: PUSH
59080: LD_INT 3
59082: NEG
59083: PUSH
59084: LD_INT 4
59086: NEG
59087: PUSH
59088: EMPTY
59089: LIST
59090: LIST
59091: PUSH
59092: LD_INT 2
59094: NEG
59095: PUSH
59096: LD_INT 3
59098: NEG
59099: PUSH
59100: EMPTY
59101: LIST
59102: LIST
59103: PUSH
59104: LD_INT 2
59106: NEG
59107: PUSH
59108: LD_INT 2
59110: NEG
59111: PUSH
59112: EMPTY
59113: LIST
59114: LIST
59115: PUSH
59116: LD_INT 3
59118: NEG
59119: PUSH
59120: LD_INT 2
59122: NEG
59123: PUSH
59124: EMPTY
59125: LIST
59126: LIST
59127: PUSH
59128: LD_INT 4
59130: NEG
59131: PUSH
59132: LD_INT 3
59134: NEG
59135: PUSH
59136: EMPTY
59137: LIST
59138: LIST
59139: PUSH
59140: LD_INT 4
59142: NEG
59143: PUSH
59144: LD_INT 4
59146: NEG
59147: PUSH
59148: EMPTY
59149: LIST
59150: LIST
59151: PUSH
59152: LD_INT 2
59154: NEG
59155: PUSH
59156: LD_INT 4
59158: NEG
59159: PUSH
59160: EMPTY
59161: LIST
59162: LIST
59163: PUSH
59164: LD_INT 4
59166: NEG
59167: PUSH
59168: LD_INT 2
59170: NEG
59171: PUSH
59172: EMPTY
59173: LIST
59174: LIST
59175: PUSH
59176: LD_INT 0
59178: PUSH
59179: LD_INT 4
59181: NEG
59182: PUSH
59183: EMPTY
59184: LIST
59185: LIST
59186: PUSH
59187: LD_INT 0
59189: PUSH
59190: LD_INT 5
59192: NEG
59193: PUSH
59194: EMPTY
59195: LIST
59196: LIST
59197: PUSH
59198: LD_INT 1
59200: PUSH
59201: LD_INT 4
59203: NEG
59204: PUSH
59205: EMPTY
59206: LIST
59207: LIST
59208: PUSH
59209: LD_INT 1
59211: PUSH
59212: LD_INT 3
59214: NEG
59215: PUSH
59216: EMPTY
59217: LIST
59218: LIST
59219: PUSH
59220: LD_INT 0
59222: PUSH
59223: LD_INT 3
59225: NEG
59226: PUSH
59227: EMPTY
59228: LIST
59229: LIST
59230: PUSH
59231: LD_INT 1
59233: NEG
59234: PUSH
59235: LD_INT 4
59237: NEG
59238: PUSH
59239: EMPTY
59240: LIST
59241: LIST
59242: PUSH
59243: LD_INT 1
59245: NEG
59246: PUSH
59247: LD_INT 5
59249: NEG
59250: PUSH
59251: EMPTY
59252: LIST
59253: LIST
59254: PUSH
59255: LD_INT 2
59257: PUSH
59258: LD_INT 3
59260: NEG
59261: PUSH
59262: EMPTY
59263: LIST
59264: LIST
59265: PUSH
59266: LD_INT 2
59268: NEG
59269: PUSH
59270: LD_INT 5
59272: NEG
59273: PUSH
59274: EMPTY
59275: LIST
59276: LIST
59277: PUSH
59278: LD_INT 3
59280: PUSH
59281: LD_INT 0
59283: PUSH
59284: EMPTY
59285: LIST
59286: LIST
59287: PUSH
59288: LD_INT 3
59290: PUSH
59291: LD_INT 1
59293: NEG
59294: PUSH
59295: EMPTY
59296: LIST
59297: LIST
59298: PUSH
59299: LD_INT 4
59301: PUSH
59302: LD_INT 0
59304: PUSH
59305: EMPTY
59306: LIST
59307: LIST
59308: PUSH
59309: LD_INT 4
59311: PUSH
59312: LD_INT 1
59314: PUSH
59315: EMPTY
59316: LIST
59317: LIST
59318: PUSH
59319: LD_INT 3
59321: PUSH
59322: LD_INT 1
59324: PUSH
59325: EMPTY
59326: LIST
59327: LIST
59328: PUSH
59329: LD_INT 2
59331: PUSH
59332: LD_INT 0
59334: PUSH
59335: EMPTY
59336: LIST
59337: LIST
59338: PUSH
59339: LD_INT 2
59341: PUSH
59342: LD_INT 1
59344: NEG
59345: PUSH
59346: EMPTY
59347: LIST
59348: LIST
59349: PUSH
59350: LD_INT 2
59352: PUSH
59353: LD_INT 2
59355: NEG
59356: PUSH
59357: EMPTY
59358: LIST
59359: LIST
59360: PUSH
59361: LD_INT 4
59363: PUSH
59364: LD_INT 2
59366: PUSH
59367: EMPTY
59368: LIST
59369: LIST
59370: PUSH
59371: LD_INT 4
59373: PUSH
59374: LD_INT 4
59376: PUSH
59377: EMPTY
59378: LIST
59379: LIST
59380: PUSH
59381: LD_INT 4
59383: PUSH
59384: LD_INT 3
59386: PUSH
59387: EMPTY
59388: LIST
59389: LIST
59390: PUSH
59391: LD_INT 5
59393: PUSH
59394: LD_INT 4
59396: PUSH
59397: EMPTY
59398: LIST
59399: LIST
59400: PUSH
59401: LD_INT 5
59403: PUSH
59404: LD_INT 5
59406: PUSH
59407: EMPTY
59408: LIST
59409: LIST
59410: PUSH
59411: LD_INT 4
59413: PUSH
59414: LD_INT 5
59416: PUSH
59417: EMPTY
59418: LIST
59419: LIST
59420: PUSH
59421: LD_INT 3
59423: PUSH
59424: LD_INT 4
59426: PUSH
59427: EMPTY
59428: LIST
59429: LIST
59430: PUSH
59431: LD_INT 3
59433: PUSH
59434: LD_INT 3
59436: PUSH
59437: EMPTY
59438: LIST
59439: LIST
59440: PUSH
59441: LD_INT 5
59443: PUSH
59444: LD_INT 3
59446: PUSH
59447: EMPTY
59448: LIST
59449: LIST
59450: PUSH
59451: LD_INT 3
59453: PUSH
59454: LD_INT 5
59456: PUSH
59457: EMPTY
59458: LIST
59459: LIST
59460: PUSH
59461: EMPTY
59462: LIST
59463: LIST
59464: LIST
59465: LIST
59466: LIST
59467: LIST
59468: LIST
59469: LIST
59470: LIST
59471: LIST
59472: LIST
59473: LIST
59474: LIST
59475: LIST
59476: LIST
59477: LIST
59478: LIST
59479: LIST
59480: LIST
59481: LIST
59482: LIST
59483: LIST
59484: LIST
59485: LIST
59486: LIST
59487: LIST
59488: LIST
59489: LIST
59490: LIST
59491: LIST
59492: LIST
59493: LIST
59494: LIST
59495: LIST
59496: LIST
59497: LIST
59498: LIST
59499: LIST
59500: LIST
59501: LIST
59502: LIST
59503: LIST
59504: LIST
59505: LIST
59506: LIST
59507: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
59508: LD_ADDR_VAR 0 33
59512: PUSH
59513: LD_INT 4
59515: NEG
59516: PUSH
59517: LD_INT 4
59519: NEG
59520: PUSH
59521: EMPTY
59522: LIST
59523: LIST
59524: PUSH
59525: LD_INT 4
59527: NEG
59528: PUSH
59529: LD_INT 5
59531: NEG
59532: PUSH
59533: EMPTY
59534: LIST
59535: LIST
59536: PUSH
59537: LD_INT 3
59539: NEG
59540: PUSH
59541: LD_INT 4
59543: NEG
59544: PUSH
59545: EMPTY
59546: LIST
59547: LIST
59548: PUSH
59549: LD_INT 3
59551: NEG
59552: PUSH
59553: LD_INT 3
59555: NEG
59556: PUSH
59557: EMPTY
59558: LIST
59559: LIST
59560: PUSH
59561: LD_INT 4
59563: NEG
59564: PUSH
59565: LD_INT 3
59567: NEG
59568: PUSH
59569: EMPTY
59570: LIST
59571: LIST
59572: PUSH
59573: LD_INT 5
59575: NEG
59576: PUSH
59577: LD_INT 4
59579: NEG
59580: PUSH
59581: EMPTY
59582: LIST
59583: LIST
59584: PUSH
59585: LD_INT 5
59587: NEG
59588: PUSH
59589: LD_INT 5
59591: NEG
59592: PUSH
59593: EMPTY
59594: LIST
59595: LIST
59596: PUSH
59597: LD_INT 3
59599: NEG
59600: PUSH
59601: LD_INT 5
59603: NEG
59604: PUSH
59605: EMPTY
59606: LIST
59607: LIST
59608: PUSH
59609: LD_INT 5
59611: NEG
59612: PUSH
59613: LD_INT 3
59615: NEG
59616: PUSH
59617: EMPTY
59618: LIST
59619: LIST
59620: PUSH
59621: LD_INT 0
59623: PUSH
59624: LD_INT 3
59626: NEG
59627: PUSH
59628: EMPTY
59629: LIST
59630: LIST
59631: PUSH
59632: LD_INT 0
59634: PUSH
59635: LD_INT 4
59637: NEG
59638: PUSH
59639: EMPTY
59640: LIST
59641: LIST
59642: PUSH
59643: LD_INT 1
59645: PUSH
59646: LD_INT 3
59648: NEG
59649: PUSH
59650: EMPTY
59651: LIST
59652: LIST
59653: PUSH
59654: LD_INT 1
59656: PUSH
59657: LD_INT 2
59659: NEG
59660: PUSH
59661: EMPTY
59662: LIST
59663: LIST
59664: PUSH
59665: LD_INT 0
59667: PUSH
59668: LD_INT 2
59670: NEG
59671: PUSH
59672: EMPTY
59673: LIST
59674: LIST
59675: PUSH
59676: LD_INT 1
59678: NEG
59679: PUSH
59680: LD_INT 3
59682: NEG
59683: PUSH
59684: EMPTY
59685: LIST
59686: LIST
59687: PUSH
59688: LD_INT 1
59690: NEG
59691: PUSH
59692: LD_INT 4
59694: NEG
59695: PUSH
59696: EMPTY
59697: LIST
59698: LIST
59699: PUSH
59700: LD_INT 2
59702: PUSH
59703: LD_INT 2
59705: NEG
59706: PUSH
59707: EMPTY
59708: LIST
59709: LIST
59710: PUSH
59711: LD_INT 2
59713: NEG
59714: PUSH
59715: LD_INT 4
59717: NEG
59718: PUSH
59719: EMPTY
59720: LIST
59721: LIST
59722: PUSH
59723: LD_INT 4
59725: PUSH
59726: LD_INT 0
59728: PUSH
59729: EMPTY
59730: LIST
59731: LIST
59732: PUSH
59733: LD_INT 4
59735: PUSH
59736: LD_INT 1
59738: NEG
59739: PUSH
59740: EMPTY
59741: LIST
59742: LIST
59743: PUSH
59744: LD_INT 5
59746: PUSH
59747: LD_INT 0
59749: PUSH
59750: EMPTY
59751: LIST
59752: LIST
59753: PUSH
59754: LD_INT 5
59756: PUSH
59757: LD_INT 1
59759: PUSH
59760: EMPTY
59761: LIST
59762: LIST
59763: PUSH
59764: LD_INT 4
59766: PUSH
59767: LD_INT 1
59769: PUSH
59770: EMPTY
59771: LIST
59772: LIST
59773: PUSH
59774: LD_INT 3
59776: PUSH
59777: LD_INT 0
59779: PUSH
59780: EMPTY
59781: LIST
59782: LIST
59783: PUSH
59784: LD_INT 3
59786: PUSH
59787: LD_INT 1
59789: NEG
59790: PUSH
59791: EMPTY
59792: LIST
59793: LIST
59794: PUSH
59795: LD_INT 3
59797: PUSH
59798: LD_INT 2
59800: NEG
59801: PUSH
59802: EMPTY
59803: LIST
59804: LIST
59805: PUSH
59806: LD_INT 5
59808: PUSH
59809: LD_INT 2
59811: PUSH
59812: EMPTY
59813: LIST
59814: LIST
59815: PUSH
59816: LD_INT 3
59818: PUSH
59819: LD_INT 3
59821: PUSH
59822: EMPTY
59823: LIST
59824: LIST
59825: PUSH
59826: LD_INT 3
59828: PUSH
59829: LD_INT 2
59831: PUSH
59832: EMPTY
59833: LIST
59834: LIST
59835: PUSH
59836: LD_INT 4
59838: PUSH
59839: LD_INT 3
59841: PUSH
59842: EMPTY
59843: LIST
59844: LIST
59845: PUSH
59846: LD_INT 4
59848: PUSH
59849: LD_INT 4
59851: PUSH
59852: EMPTY
59853: LIST
59854: LIST
59855: PUSH
59856: LD_INT 3
59858: PUSH
59859: LD_INT 4
59861: PUSH
59862: EMPTY
59863: LIST
59864: LIST
59865: PUSH
59866: LD_INT 2
59868: PUSH
59869: LD_INT 3
59871: PUSH
59872: EMPTY
59873: LIST
59874: LIST
59875: PUSH
59876: LD_INT 2
59878: PUSH
59879: LD_INT 2
59881: PUSH
59882: EMPTY
59883: LIST
59884: LIST
59885: PUSH
59886: LD_INT 4
59888: PUSH
59889: LD_INT 2
59891: PUSH
59892: EMPTY
59893: LIST
59894: LIST
59895: PUSH
59896: LD_INT 2
59898: PUSH
59899: LD_INT 4
59901: PUSH
59902: EMPTY
59903: LIST
59904: LIST
59905: PUSH
59906: LD_INT 0
59908: PUSH
59909: LD_INT 4
59911: PUSH
59912: EMPTY
59913: LIST
59914: LIST
59915: PUSH
59916: LD_INT 0
59918: PUSH
59919: LD_INT 3
59921: PUSH
59922: EMPTY
59923: LIST
59924: LIST
59925: PUSH
59926: LD_INT 1
59928: PUSH
59929: LD_INT 4
59931: PUSH
59932: EMPTY
59933: LIST
59934: LIST
59935: PUSH
59936: LD_INT 1
59938: PUSH
59939: LD_INT 5
59941: PUSH
59942: EMPTY
59943: LIST
59944: LIST
59945: PUSH
59946: LD_INT 0
59948: PUSH
59949: LD_INT 5
59951: PUSH
59952: EMPTY
59953: LIST
59954: LIST
59955: PUSH
59956: LD_INT 1
59958: NEG
59959: PUSH
59960: LD_INT 4
59962: PUSH
59963: EMPTY
59964: LIST
59965: LIST
59966: PUSH
59967: LD_INT 1
59969: NEG
59970: PUSH
59971: LD_INT 3
59973: PUSH
59974: EMPTY
59975: LIST
59976: LIST
59977: PUSH
59978: LD_INT 2
59980: PUSH
59981: LD_INT 5
59983: PUSH
59984: EMPTY
59985: LIST
59986: LIST
59987: PUSH
59988: LD_INT 2
59990: NEG
59991: PUSH
59992: LD_INT 3
59994: PUSH
59995: EMPTY
59996: LIST
59997: LIST
59998: PUSH
59999: EMPTY
60000: LIST
60001: LIST
60002: LIST
60003: LIST
60004: LIST
60005: LIST
60006: LIST
60007: LIST
60008: LIST
60009: LIST
60010: LIST
60011: LIST
60012: LIST
60013: LIST
60014: LIST
60015: LIST
60016: LIST
60017: LIST
60018: LIST
60019: LIST
60020: LIST
60021: LIST
60022: LIST
60023: LIST
60024: LIST
60025: LIST
60026: LIST
60027: LIST
60028: LIST
60029: LIST
60030: LIST
60031: LIST
60032: LIST
60033: LIST
60034: LIST
60035: LIST
60036: LIST
60037: LIST
60038: LIST
60039: LIST
60040: LIST
60041: LIST
60042: LIST
60043: LIST
60044: LIST
60045: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
60046: LD_ADDR_VAR 0 34
60050: PUSH
60051: LD_INT 0
60053: PUSH
60054: LD_INT 4
60056: NEG
60057: PUSH
60058: EMPTY
60059: LIST
60060: LIST
60061: PUSH
60062: LD_INT 0
60064: PUSH
60065: LD_INT 5
60067: NEG
60068: PUSH
60069: EMPTY
60070: LIST
60071: LIST
60072: PUSH
60073: LD_INT 1
60075: PUSH
60076: LD_INT 4
60078: NEG
60079: PUSH
60080: EMPTY
60081: LIST
60082: LIST
60083: PUSH
60084: LD_INT 1
60086: PUSH
60087: LD_INT 3
60089: NEG
60090: PUSH
60091: EMPTY
60092: LIST
60093: LIST
60094: PUSH
60095: LD_INT 0
60097: PUSH
60098: LD_INT 3
60100: NEG
60101: PUSH
60102: EMPTY
60103: LIST
60104: LIST
60105: PUSH
60106: LD_INT 1
60108: NEG
60109: PUSH
60110: LD_INT 4
60112: NEG
60113: PUSH
60114: EMPTY
60115: LIST
60116: LIST
60117: PUSH
60118: LD_INT 1
60120: NEG
60121: PUSH
60122: LD_INT 5
60124: NEG
60125: PUSH
60126: EMPTY
60127: LIST
60128: LIST
60129: PUSH
60130: LD_INT 2
60132: PUSH
60133: LD_INT 3
60135: NEG
60136: PUSH
60137: EMPTY
60138: LIST
60139: LIST
60140: PUSH
60141: LD_INT 2
60143: NEG
60144: PUSH
60145: LD_INT 5
60147: NEG
60148: PUSH
60149: EMPTY
60150: LIST
60151: LIST
60152: PUSH
60153: LD_INT 3
60155: PUSH
60156: LD_INT 0
60158: PUSH
60159: EMPTY
60160: LIST
60161: LIST
60162: PUSH
60163: LD_INT 3
60165: PUSH
60166: LD_INT 1
60168: NEG
60169: PUSH
60170: EMPTY
60171: LIST
60172: LIST
60173: PUSH
60174: LD_INT 4
60176: PUSH
60177: LD_INT 0
60179: PUSH
60180: EMPTY
60181: LIST
60182: LIST
60183: PUSH
60184: LD_INT 4
60186: PUSH
60187: LD_INT 1
60189: PUSH
60190: EMPTY
60191: LIST
60192: LIST
60193: PUSH
60194: LD_INT 3
60196: PUSH
60197: LD_INT 1
60199: PUSH
60200: EMPTY
60201: LIST
60202: LIST
60203: PUSH
60204: LD_INT 2
60206: PUSH
60207: LD_INT 0
60209: PUSH
60210: EMPTY
60211: LIST
60212: LIST
60213: PUSH
60214: LD_INT 2
60216: PUSH
60217: LD_INT 1
60219: NEG
60220: PUSH
60221: EMPTY
60222: LIST
60223: LIST
60224: PUSH
60225: LD_INT 2
60227: PUSH
60228: LD_INT 2
60230: NEG
60231: PUSH
60232: EMPTY
60233: LIST
60234: LIST
60235: PUSH
60236: LD_INT 4
60238: PUSH
60239: LD_INT 2
60241: PUSH
60242: EMPTY
60243: LIST
60244: LIST
60245: PUSH
60246: LD_INT 4
60248: PUSH
60249: LD_INT 4
60251: PUSH
60252: EMPTY
60253: LIST
60254: LIST
60255: PUSH
60256: LD_INT 4
60258: PUSH
60259: LD_INT 3
60261: PUSH
60262: EMPTY
60263: LIST
60264: LIST
60265: PUSH
60266: LD_INT 5
60268: PUSH
60269: LD_INT 4
60271: PUSH
60272: EMPTY
60273: LIST
60274: LIST
60275: PUSH
60276: LD_INT 5
60278: PUSH
60279: LD_INT 5
60281: PUSH
60282: EMPTY
60283: LIST
60284: LIST
60285: PUSH
60286: LD_INT 4
60288: PUSH
60289: LD_INT 5
60291: PUSH
60292: EMPTY
60293: LIST
60294: LIST
60295: PUSH
60296: LD_INT 3
60298: PUSH
60299: LD_INT 4
60301: PUSH
60302: EMPTY
60303: LIST
60304: LIST
60305: PUSH
60306: LD_INT 3
60308: PUSH
60309: LD_INT 3
60311: PUSH
60312: EMPTY
60313: LIST
60314: LIST
60315: PUSH
60316: LD_INT 5
60318: PUSH
60319: LD_INT 3
60321: PUSH
60322: EMPTY
60323: LIST
60324: LIST
60325: PUSH
60326: LD_INT 3
60328: PUSH
60329: LD_INT 5
60331: PUSH
60332: EMPTY
60333: LIST
60334: LIST
60335: PUSH
60336: LD_INT 0
60338: PUSH
60339: LD_INT 3
60341: PUSH
60342: EMPTY
60343: LIST
60344: LIST
60345: PUSH
60346: LD_INT 0
60348: PUSH
60349: LD_INT 2
60351: PUSH
60352: EMPTY
60353: LIST
60354: LIST
60355: PUSH
60356: LD_INT 1
60358: PUSH
60359: LD_INT 3
60361: PUSH
60362: EMPTY
60363: LIST
60364: LIST
60365: PUSH
60366: LD_INT 1
60368: PUSH
60369: LD_INT 4
60371: PUSH
60372: EMPTY
60373: LIST
60374: LIST
60375: PUSH
60376: LD_INT 0
60378: PUSH
60379: LD_INT 4
60381: PUSH
60382: EMPTY
60383: LIST
60384: LIST
60385: PUSH
60386: LD_INT 1
60388: NEG
60389: PUSH
60390: LD_INT 3
60392: PUSH
60393: EMPTY
60394: LIST
60395: LIST
60396: PUSH
60397: LD_INT 1
60399: NEG
60400: PUSH
60401: LD_INT 2
60403: PUSH
60404: EMPTY
60405: LIST
60406: LIST
60407: PUSH
60408: LD_INT 2
60410: PUSH
60411: LD_INT 4
60413: PUSH
60414: EMPTY
60415: LIST
60416: LIST
60417: PUSH
60418: LD_INT 2
60420: NEG
60421: PUSH
60422: LD_INT 2
60424: PUSH
60425: EMPTY
60426: LIST
60427: LIST
60428: PUSH
60429: LD_INT 4
60431: NEG
60432: PUSH
60433: LD_INT 0
60435: PUSH
60436: EMPTY
60437: LIST
60438: LIST
60439: PUSH
60440: LD_INT 4
60442: NEG
60443: PUSH
60444: LD_INT 1
60446: NEG
60447: PUSH
60448: EMPTY
60449: LIST
60450: LIST
60451: PUSH
60452: LD_INT 3
60454: NEG
60455: PUSH
60456: LD_INT 0
60458: PUSH
60459: EMPTY
60460: LIST
60461: LIST
60462: PUSH
60463: LD_INT 3
60465: NEG
60466: PUSH
60467: LD_INT 1
60469: PUSH
60470: EMPTY
60471: LIST
60472: LIST
60473: PUSH
60474: LD_INT 4
60476: NEG
60477: PUSH
60478: LD_INT 1
60480: PUSH
60481: EMPTY
60482: LIST
60483: LIST
60484: PUSH
60485: LD_INT 5
60487: NEG
60488: PUSH
60489: LD_INT 0
60491: PUSH
60492: EMPTY
60493: LIST
60494: LIST
60495: PUSH
60496: LD_INT 5
60498: NEG
60499: PUSH
60500: LD_INT 1
60502: NEG
60503: PUSH
60504: EMPTY
60505: LIST
60506: LIST
60507: PUSH
60508: LD_INT 5
60510: NEG
60511: PUSH
60512: LD_INT 2
60514: NEG
60515: PUSH
60516: EMPTY
60517: LIST
60518: LIST
60519: PUSH
60520: LD_INT 3
60522: NEG
60523: PUSH
60524: LD_INT 2
60526: PUSH
60527: EMPTY
60528: LIST
60529: LIST
60530: PUSH
60531: EMPTY
60532: LIST
60533: LIST
60534: LIST
60535: LIST
60536: LIST
60537: LIST
60538: LIST
60539: LIST
60540: LIST
60541: LIST
60542: LIST
60543: LIST
60544: LIST
60545: LIST
60546: LIST
60547: LIST
60548: LIST
60549: LIST
60550: LIST
60551: LIST
60552: LIST
60553: LIST
60554: LIST
60555: LIST
60556: LIST
60557: LIST
60558: LIST
60559: LIST
60560: LIST
60561: LIST
60562: LIST
60563: LIST
60564: LIST
60565: LIST
60566: LIST
60567: LIST
60568: LIST
60569: LIST
60570: LIST
60571: LIST
60572: LIST
60573: LIST
60574: LIST
60575: LIST
60576: LIST
60577: ST_TO_ADDR
// end ; end ;
60578: GO 60581
60580: POP
// case btype of b_depot , b_warehouse :
60581: LD_VAR 0 1
60585: PUSH
60586: LD_INT 0
60588: DOUBLE
60589: EQUAL
60590: IFTRUE 60600
60592: LD_INT 1
60594: DOUBLE
60595: EQUAL
60596: IFTRUE 60600
60598: GO 60801
60600: POP
// case nation of nation_american :
60601: LD_VAR 0 5
60605: PUSH
60606: LD_INT 1
60608: DOUBLE
60609: EQUAL
60610: IFTRUE 60614
60612: GO 60670
60614: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
60615: LD_ADDR_VAR 0 9
60619: PUSH
60620: LD_VAR 0 11
60624: PUSH
60625: LD_VAR 0 12
60629: PUSH
60630: LD_VAR 0 13
60634: PUSH
60635: LD_VAR 0 14
60639: PUSH
60640: LD_VAR 0 15
60644: PUSH
60645: LD_VAR 0 16
60649: PUSH
60650: EMPTY
60651: LIST
60652: LIST
60653: LIST
60654: LIST
60655: LIST
60656: LIST
60657: PUSH
60658: LD_VAR 0 4
60662: PUSH
60663: LD_INT 1
60665: PLUS
60666: ARRAY
60667: ST_TO_ADDR
60668: GO 60799
60670: LD_INT 2
60672: DOUBLE
60673: EQUAL
60674: IFTRUE 60678
60676: GO 60734
60678: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
60679: LD_ADDR_VAR 0 9
60683: PUSH
60684: LD_VAR 0 17
60688: PUSH
60689: LD_VAR 0 18
60693: PUSH
60694: LD_VAR 0 19
60698: PUSH
60699: LD_VAR 0 20
60703: PUSH
60704: LD_VAR 0 21
60708: PUSH
60709: LD_VAR 0 22
60713: PUSH
60714: EMPTY
60715: LIST
60716: LIST
60717: LIST
60718: LIST
60719: LIST
60720: LIST
60721: PUSH
60722: LD_VAR 0 4
60726: PUSH
60727: LD_INT 1
60729: PLUS
60730: ARRAY
60731: ST_TO_ADDR
60732: GO 60799
60734: LD_INT 3
60736: DOUBLE
60737: EQUAL
60738: IFTRUE 60742
60740: GO 60798
60742: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
60743: LD_ADDR_VAR 0 9
60747: PUSH
60748: LD_VAR 0 23
60752: PUSH
60753: LD_VAR 0 24
60757: PUSH
60758: LD_VAR 0 25
60762: PUSH
60763: LD_VAR 0 26
60767: PUSH
60768: LD_VAR 0 27
60772: PUSH
60773: LD_VAR 0 28
60777: PUSH
60778: EMPTY
60779: LIST
60780: LIST
60781: LIST
60782: LIST
60783: LIST
60784: LIST
60785: PUSH
60786: LD_VAR 0 4
60790: PUSH
60791: LD_INT 1
60793: PLUS
60794: ARRAY
60795: ST_TO_ADDR
60796: GO 60799
60798: POP
60799: GO 61354
60801: LD_INT 2
60803: DOUBLE
60804: EQUAL
60805: IFTRUE 60815
60807: LD_INT 3
60809: DOUBLE
60810: EQUAL
60811: IFTRUE 60815
60813: GO 60871
60815: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
60816: LD_ADDR_VAR 0 9
60820: PUSH
60821: LD_VAR 0 29
60825: PUSH
60826: LD_VAR 0 30
60830: PUSH
60831: LD_VAR 0 31
60835: PUSH
60836: LD_VAR 0 32
60840: PUSH
60841: LD_VAR 0 33
60845: PUSH
60846: LD_VAR 0 34
60850: PUSH
60851: EMPTY
60852: LIST
60853: LIST
60854: LIST
60855: LIST
60856: LIST
60857: LIST
60858: PUSH
60859: LD_VAR 0 4
60863: PUSH
60864: LD_INT 1
60866: PLUS
60867: ARRAY
60868: ST_TO_ADDR
60869: GO 61354
60871: LD_INT 16
60873: DOUBLE
60874: EQUAL
60875: IFTRUE 60933
60877: LD_INT 17
60879: DOUBLE
60880: EQUAL
60881: IFTRUE 60933
60883: LD_INT 18
60885: DOUBLE
60886: EQUAL
60887: IFTRUE 60933
60889: LD_INT 19
60891: DOUBLE
60892: EQUAL
60893: IFTRUE 60933
60895: LD_INT 22
60897: DOUBLE
60898: EQUAL
60899: IFTRUE 60933
60901: LD_INT 20
60903: DOUBLE
60904: EQUAL
60905: IFTRUE 60933
60907: LD_INT 21
60909: DOUBLE
60910: EQUAL
60911: IFTRUE 60933
60913: LD_INT 23
60915: DOUBLE
60916: EQUAL
60917: IFTRUE 60933
60919: LD_INT 24
60921: DOUBLE
60922: EQUAL
60923: IFTRUE 60933
60925: LD_INT 25
60927: DOUBLE
60928: EQUAL
60929: IFTRUE 60933
60931: GO 60989
60933: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
60934: LD_ADDR_VAR 0 9
60938: PUSH
60939: LD_VAR 0 35
60943: PUSH
60944: LD_VAR 0 36
60948: PUSH
60949: LD_VAR 0 37
60953: PUSH
60954: LD_VAR 0 38
60958: PUSH
60959: LD_VAR 0 39
60963: PUSH
60964: LD_VAR 0 40
60968: PUSH
60969: EMPTY
60970: LIST
60971: LIST
60972: LIST
60973: LIST
60974: LIST
60975: LIST
60976: PUSH
60977: LD_VAR 0 4
60981: PUSH
60982: LD_INT 1
60984: PLUS
60985: ARRAY
60986: ST_TO_ADDR
60987: GO 61354
60989: LD_INT 6
60991: DOUBLE
60992: EQUAL
60993: IFTRUE 61045
60995: LD_INT 7
60997: DOUBLE
60998: EQUAL
60999: IFTRUE 61045
61001: LD_INT 8
61003: DOUBLE
61004: EQUAL
61005: IFTRUE 61045
61007: LD_INT 13
61009: DOUBLE
61010: EQUAL
61011: IFTRUE 61045
61013: LD_INT 12
61015: DOUBLE
61016: EQUAL
61017: IFTRUE 61045
61019: LD_INT 15
61021: DOUBLE
61022: EQUAL
61023: IFTRUE 61045
61025: LD_INT 11
61027: DOUBLE
61028: EQUAL
61029: IFTRUE 61045
61031: LD_INT 14
61033: DOUBLE
61034: EQUAL
61035: IFTRUE 61045
61037: LD_INT 10
61039: DOUBLE
61040: EQUAL
61041: IFTRUE 61045
61043: GO 61101
61045: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
61046: LD_ADDR_VAR 0 9
61050: PUSH
61051: LD_VAR 0 41
61055: PUSH
61056: LD_VAR 0 42
61060: PUSH
61061: LD_VAR 0 43
61065: PUSH
61066: LD_VAR 0 44
61070: PUSH
61071: LD_VAR 0 45
61075: PUSH
61076: LD_VAR 0 46
61080: PUSH
61081: EMPTY
61082: LIST
61083: LIST
61084: LIST
61085: LIST
61086: LIST
61087: LIST
61088: PUSH
61089: LD_VAR 0 4
61093: PUSH
61094: LD_INT 1
61096: PLUS
61097: ARRAY
61098: ST_TO_ADDR
61099: GO 61354
61101: LD_INT 36
61103: DOUBLE
61104: EQUAL
61105: IFTRUE 61109
61107: GO 61165
61109: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
61110: LD_ADDR_VAR 0 9
61114: PUSH
61115: LD_VAR 0 47
61119: PUSH
61120: LD_VAR 0 48
61124: PUSH
61125: LD_VAR 0 49
61129: PUSH
61130: LD_VAR 0 50
61134: PUSH
61135: LD_VAR 0 51
61139: PUSH
61140: LD_VAR 0 52
61144: PUSH
61145: EMPTY
61146: LIST
61147: LIST
61148: LIST
61149: LIST
61150: LIST
61151: LIST
61152: PUSH
61153: LD_VAR 0 4
61157: PUSH
61158: LD_INT 1
61160: PLUS
61161: ARRAY
61162: ST_TO_ADDR
61163: GO 61354
61165: LD_INT 4
61167: DOUBLE
61168: EQUAL
61169: IFTRUE 61191
61171: LD_INT 5
61173: DOUBLE
61174: EQUAL
61175: IFTRUE 61191
61177: LD_INT 34
61179: DOUBLE
61180: EQUAL
61181: IFTRUE 61191
61183: LD_INT 37
61185: DOUBLE
61186: EQUAL
61187: IFTRUE 61191
61189: GO 61247
61191: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
61192: LD_ADDR_VAR 0 9
61196: PUSH
61197: LD_VAR 0 53
61201: PUSH
61202: LD_VAR 0 54
61206: PUSH
61207: LD_VAR 0 55
61211: PUSH
61212: LD_VAR 0 56
61216: PUSH
61217: LD_VAR 0 57
61221: PUSH
61222: LD_VAR 0 58
61226: PUSH
61227: EMPTY
61228: LIST
61229: LIST
61230: LIST
61231: LIST
61232: LIST
61233: LIST
61234: PUSH
61235: LD_VAR 0 4
61239: PUSH
61240: LD_INT 1
61242: PLUS
61243: ARRAY
61244: ST_TO_ADDR
61245: GO 61354
61247: LD_INT 31
61249: DOUBLE
61250: EQUAL
61251: IFTRUE 61297
61253: LD_INT 32
61255: DOUBLE
61256: EQUAL
61257: IFTRUE 61297
61259: LD_INT 33
61261: DOUBLE
61262: EQUAL
61263: IFTRUE 61297
61265: LD_INT 27
61267: DOUBLE
61268: EQUAL
61269: IFTRUE 61297
61271: LD_INT 26
61273: DOUBLE
61274: EQUAL
61275: IFTRUE 61297
61277: LD_INT 28
61279: DOUBLE
61280: EQUAL
61281: IFTRUE 61297
61283: LD_INT 29
61285: DOUBLE
61286: EQUAL
61287: IFTRUE 61297
61289: LD_INT 30
61291: DOUBLE
61292: EQUAL
61293: IFTRUE 61297
61295: GO 61353
61297: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
61298: LD_ADDR_VAR 0 9
61302: PUSH
61303: LD_VAR 0 59
61307: PUSH
61308: LD_VAR 0 60
61312: PUSH
61313: LD_VAR 0 61
61317: PUSH
61318: LD_VAR 0 62
61322: PUSH
61323: LD_VAR 0 63
61327: PUSH
61328: LD_VAR 0 64
61332: PUSH
61333: EMPTY
61334: LIST
61335: LIST
61336: LIST
61337: LIST
61338: LIST
61339: LIST
61340: PUSH
61341: LD_VAR 0 4
61345: PUSH
61346: LD_INT 1
61348: PLUS
61349: ARRAY
61350: ST_TO_ADDR
61351: GO 61354
61353: POP
// temp_list2 = [ ] ;
61354: LD_ADDR_VAR 0 10
61358: PUSH
61359: EMPTY
61360: ST_TO_ADDR
// for i in temp_list do
61361: LD_ADDR_VAR 0 8
61365: PUSH
61366: LD_VAR 0 9
61370: PUSH
61371: FOR_IN
61372: IFFALSE 61424
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
61374: LD_ADDR_VAR 0 10
61378: PUSH
61379: LD_VAR 0 10
61383: PUSH
61384: LD_VAR 0 8
61388: PUSH
61389: LD_INT 1
61391: ARRAY
61392: PUSH
61393: LD_VAR 0 2
61397: PLUS
61398: PUSH
61399: LD_VAR 0 8
61403: PUSH
61404: LD_INT 2
61406: ARRAY
61407: PUSH
61408: LD_VAR 0 3
61412: PLUS
61413: PUSH
61414: EMPTY
61415: LIST
61416: LIST
61417: PUSH
61418: EMPTY
61419: LIST
61420: ADD
61421: ST_TO_ADDR
61422: GO 61371
61424: POP
61425: POP
// result = temp_list2 ;
61426: LD_ADDR_VAR 0 7
61430: PUSH
61431: LD_VAR 0 10
61435: ST_TO_ADDR
// end ;
61436: LD_VAR 0 7
61440: RET
// export function EnemyInRange ( unit , dist ) ; begin
61441: LD_INT 0
61443: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
61444: LD_ADDR_VAR 0 3
61448: PUSH
61449: LD_VAR 0 1
61453: PPUSH
61454: CALL_OW 255
61458: PPUSH
61459: LD_VAR 0 1
61463: PPUSH
61464: CALL_OW 250
61468: PPUSH
61469: LD_VAR 0 1
61473: PPUSH
61474: CALL_OW 251
61478: PPUSH
61479: LD_VAR 0 2
61483: PPUSH
61484: CALL 34843 0 4
61488: PUSH
61489: LD_INT 4
61491: ARRAY
61492: ST_TO_ADDR
// end ;
61493: LD_VAR 0 3
61497: RET
// export function PlayerSeeMe ( unit ) ; begin
61498: LD_INT 0
61500: PPUSH
// result := See ( your_side , unit ) ;
61501: LD_ADDR_VAR 0 2
61505: PUSH
61506: LD_OWVAR 2
61510: PPUSH
61511: LD_VAR 0 1
61515: PPUSH
61516: CALL_OW 292
61520: ST_TO_ADDR
// end ;
61521: LD_VAR 0 2
61525: RET
// export function ReverseDir ( unit ) ; begin
61526: LD_INT 0
61528: PPUSH
// if not unit then
61529: LD_VAR 0 1
61533: NOT
61534: IFFALSE 61538
// exit ;
61536: GO 61561
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
61538: LD_ADDR_VAR 0 2
61542: PUSH
61543: LD_VAR 0 1
61547: PPUSH
61548: CALL_OW 254
61552: PUSH
61553: LD_INT 3
61555: PLUS
61556: PUSH
61557: LD_INT 6
61559: MOD
61560: ST_TO_ADDR
// end ;
61561: LD_VAR 0 2
61565: RET
// export function ReverseArray ( array ) ; var i ; begin
61566: LD_INT 0
61568: PPUSH
61569: PPUSH
// if not array then
61570: LD_VAR 0 1
61574: NOT
61575: IFFALSE 61579
// exit ;
61577: GO 61634
// result := [ ] ;
61579: LD_ADDR_VAR 0 2
61583: PUSH
61584: EMPTY
61585: ST_TO_ADDR
// for i := array downto 1 do
61586: LD_ADDR_VAR 0 3
61590: PUSH
61591: DOUBLE
61592: LD_VAR 0 1
61596: INC
61597: ST_TO_ADDR
61598: LD_INT 1
61600: PUSH
61601: FOR_DOWNTO
61602: IFFALSE 61632
// result := Join ( result , array [ i ] ) ;
61604: LD_ADDR_VAR 0 2
61608: PUSH
61609: LD_VAR 0 2
61613: PPUSH
61614: LD_VAR 0 1
61618: PUSH
61619: LD_VAR 0 3
61623: ARRAY
61624: PPUSH
61625: CALL 66278 0 2
61629: ST_TO_ADDR
61630: GO 61601
61632: POP
61633: POP
// end ;
61634: LD_VAR 0 2
61638: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
61639: LD_INT 0
61641: PPUSH
61642: PPUSH
61643: PPUSH
61644: PPUSH
61645: PPUSH
61646: PPUSH
// if not unit or not hexes then
61647: LD_VAR 0 1
61651: NOT
61652: PUSH
61653: LD_VAR 0 2
61657: NOT
61658: OR
61659: IFFALSE 61663
// exit ;
61661: GO 61786
// dist := 9999 ;
61663: LD_ADDR_VAR 0 5
61667: PUSH
61668: LD_INT 9999
61670: ST_TO_ADDR
// for i = 1 to hexes do
61671: LD_ADDR_VAR 0 4
61675: PUSH
61676: DOUBLE
61677: LD_INT 1
61679: DEC
61680: ST_TO_ADDR
61681: LD_VAR 0 2
61685: PUSH
61686: FOR_TO
61687: IFFALSE 61774
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
61689: LD_ADDR_VAR 0 6
61693: PUSH
61694: LD_VAR 0 1
61698: PPUSH
61699: LD_VAR 0 2
61703: PUSH
61704: LD_VAR 0 4
61708: ARRAY
61709: PUSH
61710: LD_INT 1
61712: ARRAY
61713: PPUSH
61714: LD_VAR 0 2
61718: PUSH
61719: LD_VAR 0 4
61723: ARRAY
61724: PUSH
61725: LD_INT 2
61727: ARRAY
61728: PPUSH
61729: CALL_OW 297
61733: ST_TO_ADDR
// if tdist < dist then
61734: LD_VAR 0 6
61738: PUSH
61739: LD_VAR 0 5
61743: LESS
61744: IFFALSE 61772
// begin hex := hexes [ i ] ;
61746: LD_ADDR_VAR 0 8
61750: PUSH
61751: LD_VAR 0 2
61755: PUSH
61756: LD_VAR 0 4
61760: ARRAY
61761: ST_TO_ADDR
// dist := tdist ;
61762: LD_ADDR_VAR 0 5
61766: PUSH
61767: LD_VAR 0 6
61771: ST_TO_ADDR
// end ; end ;
61772: GO 61686
61774: POP
61775: POP
// result := hex ;
61776: LD_ADDR_VAR 0 3
61780: PUSH
61781: LD_VAR 0 8
61785: ST_TO_ADDR
// end ;
61786: LD_VAR 0 3
61790: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
61791: LD_INT 0
61793: PPUSH
61794: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
61795: LD_VAR 0 1
61799: NOT
61800: PUSH
61801: LD_VAR 0 1
61805: PUSH
61806: LD_INT 21
61808: PUSH
61809: LD_INT 2
61811: PUSH
61812: EMPTY
61813: LIST
61814: LIST
61815: PUSH
61816: LD_INT 23
61818: PUSH
61819: LD_INT 2
61821: PUSH
61822: EMPTY
61823: LIST
61824: LIST
61825: PUSH
61826: EMPTY
61827: LIST
61828: LIST
61829: PPUSH
61830: CALL_OW 69
61834: IN
61835: NOT
61836: OR
61837: IFFALSE 61841
// exit ;
61839: GO 61888
// for i = 1 to 3 do
61841: LD_ADDR_VAR 0 3
61845: PUSH
61846: DOUBLE
61847: LD_INT 1
61849: DEC
61850: ST_TO_ADDR
61851: LD_INT 3
61853: PUSH
61854: FOR_TO
61855: IFFALSE 61886
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
61857: LD_VAR 0 1
61861: PPUSH
61862: CALL_OW 250
61866: PPUSH
61867: LD_VAR 0 1
61871: PPUSH
61872: CALL_OW 251
61876: PPUSH
61877: LD_INT 1
61879: PPUSH
61880: CALL_OW 453
61884: GO 61854
61886: POP
61887: POP
// end ;
61888: LD_VAR 0 2
61892: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
61893: LD_INT 0
61895: PPUSH
61896: PPUSH
61897: PPUSH
61898: PPUSH
61899: PPUSH
61900: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
61901: LD_VAR 0 1
61905: NOT
61906: PUSH
61907: LD_VAR 0 2
61911: NOT
61912: OR
61913: PUSH
61914: LD_VAR 0 1
61918: PPUSH
61919: CALL_OW 314
61923: OR
61924: IFFALSE 61928
// exit ;
61926: GO 62395
// if GetLives ( i ) < 250 then
61928: LD_VAR 0 4
61932: PPUSH
61933: CALL_OW 256
61937: PUSH
61938: LD_INT 250
61940: LESS
61941: IFFALSE 61954
// begin ComAutodestruct ( i ) ;
61943: LD_VAR 0 4
61947: PPUSH
61948: CALL 61791 0 1
// exit ;
61952: GO 62395
// end ; x := GetX ( enemy_unit ) ;
61954: LD_ADDR_VAR 0 7
61958: PUSH
61959: LD_VAR 0 2
61963: PPUSH
61964: CALL_OW 250
61968: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
61969: LD_ADDR_VAR 0 8
61973: PUSH
61974: LD_VAR 0 2
61978: PPUSH
61979: CALL_OW 251
61983: ST_TO_ADDR
// if not x or not y then
61984: LD_VAR 0 7
61988: NOT
61989: PUSH
61990: LD_VAR 0 8
61994: NOT
61995: OR
61996: IFFALSE 62000
// exit ;
61998: GO 62395
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
62000: LD_ADDR_VAR 0 6
62004: PUSH
62005: LD_VAR 0 7
62009: PPUSH
62010: LD_INT 0
62012: PPUSH
62013: LD_INT 4
62015: PPUSH
62016: CALL_OW 272
62020: PUSH
62021: LD_VAR 0 8
62025: PPUSH
62026: LD_INT 0
62028: PPUSH
62029: LD_INT 4
62031: PPUSH
62032: CALL_OW 273
62036: PUSH
62037: EMPTY
62038: LIST
62039: LIST
62040: PUSH
62041: LD_VAR 0 7
62045: PPUSH
62046: LD_INT 1
62048: PPUSH
62049: LD_INT 4
62051: PPUSH
62052: CALL_OW 272
62056: PUSH
62057: LD_VAR 0 8
62061: PPUSH
62062: LD_INT 1
62064: PPUSH
62065: LD_INT 4
62067: PPUSH
62068: CALL_OW 273
62072: PUSH
62073: EMPTY
62074: LIST
62075: LIST
62076: PUSH
62077: LD_VAR 0 7
62081: PPUSH
62082: LD_INT 2
62084: PPUSH
62085: LD_INT 4
62087: PPUSH
62088: CALL_OW 272
62092: PUSH
62093: LD_VAR 0 8
62097: PPUSH
62098: LD_INT 2
62100: PPUSH
62101: LD_INT 4
62103: PPUSH
62104: CALL_OW 273
62108: PUSH
62109: EMPTY
62110: LIST
62111: LIST
62112: PUSH
62113: LD_VAR 0 7
62117: PPUSH
62118: LD_INT 3
62120: PPUSH
62121: LD_INT 4
62123: PPUSH
62124: CALL_OW 272
62128: PUSH
62129: LD_VAR 0 8
62133: PPUSH
62134: LD_INT 3
62136: PPUSH
62137: LD_INT 4
62139: PPUSH
62140: CALL_OW 273
62144: PUSH
62145: EMPTY
62146: LIST
62147: LIST
62148: PUSH
62149: LD_VAR 0 7
62153: PPUSH
62154: LD_INT 4
62156: PPUSH
62157: LD_INT 4
62159: PPUSH
62160: CALL_OW 272
62164: PUSH
62165: LD_VAR 0 8
62169: PPUSH
62170: LD_INT 4
62172: PPUSH
62173: LD_INT 4
62175: PPUSH
62176: CALL_OW 273
62180: PUSH
62181: EMPTY
62182: LIST
62183: LIST
62184: PUSH
62185: LD_VAR 0 7
62189: PPUSH
62190: LD_INT 5
62192: PPUSH
62193: LD_INT 4
62195: PPUSH
62196: CALL_OW 272
62200: PUSH
62201: LD_VAR 0 8
62205: PPUSH
62206: LD_INT 5
62208: PPUSH
62209: LD_INT 4
62211: PPUSH
62212: CALL_OW 273
62216: PUSH
62217: EMPTY
62218: LIST
62219: LIST
62220: PUSH
62221: EMPTY
62222: LIST
62223: LIST
62224: LIST
62225: LIST
62226: LIST
62227: LIST
62228: ST_TO_ADDR
// for i = tmp downto 1 do
62229: LD_ADDR_VAR 0 4
62233: PUSH
62234: DOUBLE
62235: LD_VAR 0 6
62239: INC
62240: ST_TO_ADDR
62241: LD_INT 1
62243: PUSH
62244: FOR_DOWNTO
62245: IFFALSE 62346
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
62247: LD_VAR 0 6
62251: PUSH
62252: LD_VAR 0 4
62256: ARRAY
62257: PUSH
62258: LD_INT 1
62260: ARRAY
62261: PPUSH
62262: LD_VAR 0 6
62266: PUSH
62267: LD_VAR 0 4
62271: ARRAY
62272: PUSH
62273: LD_INT 2
62275: ARRAY
62276: PPUSH
62277: CALL_OW 488
62281: NOT
62282: PUSH
62283: LD_VAR 0 6
62287: PUSH
62288: LD_VAR 0 4
62292: ARRAY
62293: PUSH
62294: LD_INT 1
62296: ARRAY
62297: PPUSH
62298: LD_VAR 0 6
62302: PUSH
62303: LD_VAR 0 4
62307: ARRAY
62308: PUSH
62309: LD_INT 2
62311: ARRAY
62312: PPUSH
62313: CALL_OW 428
62317: PUSH
62318: LD_INT 0
62320: NONEQUAL
62321: OR
62322: IFFALSE 62344
// tmp := Delete ( tmp , i ) ;
62324: LD_ADDR_VAR 0 6
62328: PUSH
62329: LD_VAR 0 6
62333: PPUSH
62334: LD_VAR 0 4
62338: PPUSH
62339: CALL_OW 3
62343: ST_TO_ADDR
62344: GO 62244
62346: POP
62347: POP
// j := GetClosestHex ( unit , tmp ) ;
62348: LD_ADDR_VAR 0 5
62352: PUSH
62353: LD_VAR 0 1
62357: PPUSH
62358: LD_VAR 0 6
62362: PPUSH
62363: CALL 61639 0 2
62367: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
62368: LD_VAR 0 1
62372: PPUSH
62373: LD_VAR 0 5
62377: PUSH
62378: LD_INT 1
62380: ARRAY
62381: PPUSH
62382: LD_VAR 0 5
62386: PUSH
62387: LD_INT 2
62389: ARRAY
62390: PPUSH
62391: CALL_OW 111
// end ;
62395: LD_VAR 0 3
62399: RET
// export function PrepareApemanSoldier ( ) ; begin
62400: LD_INT 0
62402: PPUSH
// uc_nation := 0 ;
62403: LD_ADDR_OWVAR 21
62407: PUSH
62408: LD_INT 0
62410: ST_TO_ADDR
// hc_sex := sex_male ;
62411: LD_ADDR_OWVAR 27
62415: PUSH
62416: LD_INT 1
62418: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
62419: LD_ADDR_OWVAR 28
62423: PUSH
62424: LD_INT 15
62426: ST_TO_ADDR
// hc_gallery :=  ;
62427: LD_ADDR_OWVAR 33
62431: PUSH
62432: LD_STRING 
62434: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
62435: LD_ADDR_OWVAR 31
62439: PUSH
62440: LD_INT 0
62442: PPUSH
62443: LD_INT 3
62445: PPUSH
62446: CALL_OW 12
62450: PUSH
62451: LD_INT 0
62453: PPUSH
62454: LD_INT 3
62456: PPUSH
62457: CALL_OW 12
62461: PUSH
62462: LD_INT 0
62464: PUSH
62465: LD_INT 0
62467: PUSH
62468: EMPTY
62469: LIST
62470: LIST
62471: LIST
62472: LIST
62473: ST_TO_ADDR
// end ;
62474: LD_VAR 0 1
62478: RET
// export function PrepareApemanEngineer ( ) ; begin
62479: LD_INT 0
62481: PPUSH
// uc_nation := 0 ;
62482: LD_ADDR_OWVAR 21
62486: PUSH
62487: LD_INT 0
62489: ST_TO_ADDR
// hc_sex := sex_male ;
62490: LD_ADDR_OWVAR 27
62494: PUSH
62495: LD_INT 1
62497: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
62498: LD_ADDR_OWVAR 28
62502: PUSH
62503: LD_INT 16
62505: ST_TO_ADDR
// hc_gallery :=  ;
62506: LD_ADDR_OWVAR 33
62510: PUSH
62511: LD_STRING 
62513: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
62514: LD_ADDR_OWVAR 31
62518: PUSH
62519: LD_INT 0
62521: PPUSH
62522: LD_INT 3
62524: PPUSH
62525: CALL_OW 12
62529: PUSH
62530: LD_INT 0
62532: PPUSH
62533: LD_INT 3
62535: PPUSH
62536: CALL_OW 12
62540: PUSH
62541: LD_INT 0
62543: PUSH
62544: LD_INT 0
62546: PUSH
62547: EMPTY
62548: LIST
62549: LIST
62550: LIST
62551: LIST
62552: ST_TO_ADDR
// end ;
62553: LD_VAR 0 1
62557: RET
// export function PrepareApeman ( agressivity ) ; begin
62558: LD_INT 0
62560: PPUSH
// uc_side := 0 ;
62561: LD_ADDR_OWVAR 20
62565: PUSH
62566: LD_INT 0
62568: ST_TO_ADDR
// uc_nation := 0 ;
62569: LD_ADDR_OWVAR 21
62573: PUSH
62574: LD_INT 0
62576: ST_TO_ADDR
// hc_sex := sex_male ;
62577: LD_ADDR_OWVAR 27
62581: PUSH
62582: LD_INT 1
62584: ST_TO_ADDR
// hc_class := class_apeman ;
62585: LD_ADDR_OWVAR 28
62589: PUSH
62590: LD_INT 12
62592: ST_TO_ADDR
// hc_gallery :=  ;
62593: LD_ADDR_OWVAR 33
62597: PUSH
62598: LD_STRING 
62600: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
62601: LD_ADDR_OWVAR 35
62605: PUSH
62606: LD_VAR 0 1
62610: NEG
62611: PPUSH
62612: LD_VAR 0 1
62616: PPUSH
62617: CALL_OW 12
62621: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
62622: LD_ADDR_OWVAR 31
62626: PUSH
62627: LD_INT 0
62629: PPUSH
62630: LD_INT 3
62632: PPUSH
62633: CALL_OW 12
62637: PUSH
62638: LD_INT 0
62640: PPUSH
62641: LD_INT 3
62643: PPUSH
62644: CALL_OW 12
62648: PUSH
62649: LD_INT 0
62651: PUSH
62652: LD_INT 0
62654: PUSH
62655: EMPTY
62656: LIST
62657: LIST
62658: LIST
62659: LIST
62660: ST_TO_ADDR
// end ;
62661: LD_VAR 0 2
62665: RET
// export function PrepareTiger ( agressivity ) ; begin
62666: LD_INT 0
62668: PPUSH
// uc_side := 0 ;
62669: LD_ADDR_OWVAR 20
62673: PUSH
62674: LD_INT 0
62676: ST_TO_ADDR
// uc_nation := 0 ;
62677: LD_ADDR_OWVAR 21
62681: PUSH
62682: LD_INT 0
62684: ST_TO_ADDR
// hc_class := class_tiger ;
62685: LD_ADDR_OWVAR 28
62689: PUSH
62690: LD_INT 14
62692: ST_TO_ADDR
// hc_gallery :=  ;
62693: LD_ADDR_OWVAR 33
62697: PUSH
62698: LD_STRING 
62700: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
62701: LD_ADDR_OWVAR 35
62705: PUSH
62706: LD_VAR 0 1
62710: NEG
62711: PPUSH
62712: LD_VAR 0 1
62716: PPUSH
62717: CALL_OW 12
62721: ST_TO_ADDR
// end ;
62722: LD_VAR 0 2
62726: RET
// export function PrepareEnchidna ( ) ; begin
62727: LD_INT 0
62729: PPUSH
// uc_side := 0 ;
62730: LD_ADDR_OWVAR 20
62734: PUSH
62735: LD_INT 0
62737: ST_TO_ADDR
// uc_nation := 0 ;
62738: LD_ADDR_OWVAR 21
62742: PUSH
62743: LD_INT 0
62745: ST_TO_ADDR
// hc_class := class_baggie ;
62746: LD_ADDR_OWVAR 28
62750: PUSH
62751: LD_INT 13
62753: ST_TO_ADDR
// hc_gallery :=  ;
62754: LD_ADDR_OWVAR 33
62758: PUSH
62759: LD_STRING 
62761: ST_TO_ADDR
// end ;
62762: LD_VAR 0 1
62766: RET
// export function PrepareFrog ( ) ; begin
62767: LD_INT 0
62769: PPUSH
// uc_side := 0 ;
62770: LD_ADDR_OWVAR 20
62774: PUSH
62775: LD_INT 0
62777: ST_TO_ADDR
// uc_nation := 0 ;
62778: LD_ADDR_OWVAR 21
62782: PUSH
62783: LD_INT 0
62785: ST_TO_ADDR
// hc_class := class_frog ;
62786: LD_ADDR_OWVAR 28
62790: PUSH
62791: LD_INT 19
62793: ST_TO_ADDR
// hc_gallery :=  ;
62794: LD_ADDR_OWVAR 33
62798: PUSH
62799: LD_STRING 
62801: ST_TO_ADDR
// end ;
62802: LD_VAR 0 1
62806: RET
// export function PrepareFish ( ) ; begin
62807: LD_INT 0
62809: PPUSH
// uc_side := 0 ;
62810: LD_ADDR_OWVAR 20
62814: PUSH
62815: LD_INT 0
62817: ST_TO_ADDR
// uc_nation := 0 ;
62818: LD_ADDR_OWVAR 21
62822: PUSH
62823: LD_INT 0
62825: ST_TO_ADDR
// hc_class := class_fish ;
62826: LD_ADDR_OWVAR 28
62830: PUSH
62831: LD_INT 20
62833: ST_TO_ADDR
// hc_gallery :=  ;
62834: LD_ADDR_OWVAR 33
62838: PUSH
62839: LD_STRING 
62841: ST_TO_ADDR
// end ;
62842: LD_VAR 0 1
62846: RET
// export function PrepareBird ( ) ; begin
62847: LD_INT 0
62849: PPUSH
// uc_side := 0 ;
62850: LD_ADDR_OWVAR 20
62854: PUSH
62855: LD_INT 0
62857: ST_TO_ADDR
// uc_nation := 0 ;
62858: LD_ADDR_OWVAR 21
62862: PUSH
62863: LD_INT 0
62865: ST_TO_ADDR
// hc_class := class_phororhacos ;
62866: LD_ADDR_OWVAR 28
62870: PUSH
62871: LD_INT 18
62873: ST_TO_ADDR
// hc_gallery :=  ;
62874: LD_ADDR_OWVAR 33
62878: PUSH
62879: LD_STRING 
62881: ST_TO_ADDR
// end ;
62882: LD_VAR 0 1
62886: RET
// export function PrepareHorse ( ) ; begin
62887: LD_INT 0
62889: PPUSH
// uc_side := 0 ;
62890: LD_ADDR_OWVAR 20
62894: PUSH
62895: LD_INT 0
62897: ST_TO_ADDR
// uc_nation := 0 ;
62898: LD_ADDR_OWVAR 21
62902: PUSH
62903: LD_INT 0
62905: ST_TO_ADDR
// hc_class := class_horse ;
62906: LD_ADDR_OWVAR 28
62910: PUSH
62911: LD_INT 21
62913: ST_TO_ADDR
// hc_gallery :=  ;
62914: LD_ADDR_OWVAR 33
62918: PUSH
62919: LD_STRING 
62921: ST_TO_ADDR
// end ;
62922: LD_VAR 0 1
62926: RET
// export function PrepareMastodont ( ) ; begin
62927: LD_INT 0
62929: PPUSH
// uc_side := 0 ;
62930: LD_ADDR_OWVAR 20
62934: PUSH
62935: LD_INT 0
62937: ST_TO_ADDR
// uc_nation := 0 ;
62938: LD_ADDR_OWVAR 21
62942: PUSH
62943: LD_INT 0
62945: ST_TO_ADDR
// vc_chassis := class_mastodont ;
62946: LD_ADDR_OWVAR 37
62950: PUSH
62951: LD_INT 31
62953: ST_TO_ADDR
// vc_control := control_rider ;
62954: LD_ADDR_OWVAR 38
62958: PUSH
62959: LD_INT 4
62961: ST_TO_ADDR
// end ;
62962: LD_VAR 0 1
62966: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
62967: LD_INT 0
62969: PPUSH
62970: PPUSH
62971: PPUSH
// uc_side = 0 ;
62972: LD_ADDR_OWVAR 20
62976: PUSH
62977: LD_INT 0
62979: ST_TO_ADDR
// uc_nation = 0 ;
62980: LD_ADDR_OWVAR 21
62984: PUSH
62985: LD_INT 0
62987: ST_TO_ADDR
// InitHc_All ( ) ;
62988: CALL_OW 584
// InitVc ;
62992: CALL_OW 20
// if mastodonts then
62996: LD_VAR 0 6
63000: IFFALSE 63067
// for i = 1 to mastodonts do
63002: LD_ADDR_VAR 0 11
63006: PUSH
63007: DOUBLE
63008: LD_INT 1
63010: DEC
63011: ST_TO_ADDR
63012: LD_VAR 0 6
63016: PUSH
63017: FOR_TO
63018: IFFALSE 63065
// begin vc_chassis := 31 ;
63020: LD_ADDR_OWVAR 37
63024: PUSH
63025: LD_INT 31
63027: ST_TO_ADDR
// vc_control := control_rider ;
63028: LD_ADDR_OWVAR 38
63032: PUSH
63033: LD_INT 4
63035: ST_TO_ADDR
// animal := CreateVehicle ;
63036: LD_ADDR_VAR 0 12
63040: PUSH
63041: CALL_OW 45
63045: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63046: LD_VAR 0 12
63050: PPUSH
63051: LD_VAR 0 8
63055: PPUSH
63056: LD_INT 0
63058: PPUSH
63059: CALL 65195 0 3
// end ;
63063: GO 63017
63065: POP
63066: POP
// if horses then
63067: LD_VAR 0 5
63071: IFFALSE 63138
// for i = 1 to horses do
63073: LD_ADDR_VAR 0 11
63077: PUSH
63078: DOUBLE
63079: LD_INT 1
63081: DEC
63082: ST_TO_ADDR
63083: LD_VAR 0 5
63087: PUSH
63088: FOR_TO
63089: IFFALSE 63136
// begin hc_class := 21 ;
63091: LD_ADDR_OWVAR 28
63095: PUSH
63096: LD_INT 21
63098: ST_TO_ADDR
// hc_gallery :=  ;
63099: LD_ADDR_OWVAR 33
63103: PUSH
63104: LD_STRING 
63106: ST_TO_ADDR
// animal := CreateHuman ;
63107: LD_ADDR_VAR 0 12
63111: PUSH
63112: CALL_OW 44
63116: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63117: LD_VAR 0 12
63121: PPUSH
63122: LD_VAR 0 8
63126: PPUSH
63127: LD_INT 0
63129: PPUSH
63130: CALL 65195 0 3
// end ;
63134: GO 63088
63136: POP
63137: POP
// if birds then
63138: LD_VAR 0 1
63142: IFFALSE 63209
// for i = 1 to birds do
63144: LD_ADDR_VAR 0 11
63148: PUSH
63149: DOUBLE
63150: LD_INT 1
63152: DEC
63153: ST_TO_ADDR
63154: LD_VAR 0 1
63158: PUSH
63159: FOR_TO
63160: IFFALSE 63207
// begin hc_class = 18 ;
63162: LD_ADDR_OWVAR 28
63166: PUSH
63167: LD_INT 18
63169: ST_TO_ADDR
// hc_gallery =  ;
63170: LD_ADDR_OWVAR 33
63174: PUSH
63175: LD_STRING 
63177: ST_TO_ADDR
// animal := CreateHuman ;
63178: LD_ADDR_VAR 0 12
63182: PUSH
63183: CALL_OW 44
63187: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63188: LD_VAR 0 12
63192: PPUSH
63193: LD_VAR 0 8
63197: PPUSH
63198: LD_INT 0
63200: PPUSH
63201: CALL 65195 0 3
// end ;
63205: GO 63159
63207: POP
63208: POP
// if tigers then
63209: LD_VAR 0 2
63213: IFFALSE 63297
// for i = 1 to tigers do
63215: LD_ADDR_VAR 0 11
63219: PUSH
63220: DOUBLE
63221: LD_INT 1
63223: DEC
63224: ST_TO_ADDR
63225: LD_VAR 0 2
63229: PUSH
63230: FOR_TO
63231: IFFALSE 63295
// begin hc_class = class_tiger ;
63233: LD_ADDR_OWVAR 28
63237: PUSH
63238: LD_INT 14
63240: ST_TO_ADDR
// hc_gallery =  ;
63241: LD_ADDR_OWVAR 33
63245: PUSH
63246: LD_STRING 
63248: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
63249: LD_ADDR_OWVAR 35
63253: PUSH
63254: LD_INT 7
63256: NEG
63257: PPUSH
63258: LD_INT 7
63260: PPUSH
63261: CALL_OW 12
63265: ST_TO_ADDR
// animal := CreateHuman ;
63266: LD_ADDR_VAR 0 12
63270: PUSH
63271: CALL_OW 44
63275: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63276: LD_VAR 0 12
63280: PPUSH
63281: LD_VAR 0 8
63285: PPUSH
63286: LD_INT 0
63288: PPUSH
63289: CALL 65195 0 3
// end ;
63293: GO 63230
63295: POP
63296: POP
// if apemans then
63297: LD_VAR 0 3
63301: IFFALSE 63424
// for i = 1 to apemans do
63303: LD_ADDR_VAR 0 11
63307: PUSH
63308: DOUBLE
63309: LD_INT 1
63311: DEC
63312: ST_TO_ADDR
63313: LD_VAR 0 3
63317: PUSH
63318: FOR_TO
63319: IFFALSE 63422
// begin hc_class = class_apeman ;
63321: LD_ADDR_OWVAR 28
63325: PUSH
63326: LD_INT 12
63328: ST_TO_ADDR
// hc_gallery =  ;
63329: LD_ADDR_OWVAR 33
63333: PUSH
63334: LD_STRING 
63336: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
63337: LD_ADDR_OWVAR 35
63341: PUSH
63342: LD_INT 2
63344: NEG
63345: PPUSH
63346: LD_INT 2
63348: PPUSH
63349: CALL_OW 12
63353: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
63354: LD_ADDR_OWVAR 31
63358: PUSH
63359: LD_INT 1
63361: PPUSH
63362: LD_INT 3
63364: PPUSH
63365: CALL_OW 12
63369: PUSH
63370: LD_INT 1
63372: PPUSH
63373: LD_INT 3
63375: PPUSH
63376: CALL_OW 12
63380: PUSH
63381: LD_INT 0
63383: PUSH
63384: LD_INT 0
63386: PUSH
63387: EMPTY
63388: LIST
63389: LIST
63390: LIST
63391: LIST
63392: ST_TO_ADDR
// animal := CreateHuman ;
63393: LD_ADDR_VAR 0 12
63397: PUSH
63398: CALL_OW 44
63402: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63403: LD_VAR 0 12
63407: PPUSH
63408: LD_VAR 0 8
63412: PPUSH
63413: LD_INT 0
63415: PPUSH
63416: CALL 65195 0 3
// end ;
63420: GO 63318
63422: POP
63423: POP
// if enchidnas then
63424: LD_VAR 0 4
63428: IFFALSE 63495
// for i = 1 to enchidnas do
63430: LD_ADDR_VAR 0 11
63434: PUSH
63435: DOUBLE
63436: LD_INT 1
63438: DEC
63439: ST_TO_ADDR
63440: LD_VAR 0 4
63444: PUSH
63445: FOR_TO
63446: IFFALSE 63493
// begin hc_class = 13 ;
63448: LD_ADDR_OWVAR 28
63452: PUSH
63453: LD_INT 13
63455: ST_TO_ADDR
// hc_gallery =  ;
63456: LD_ADDR_OWVAR 33
63460: PUSH
63461: LD_STRING 
63463: ST_TO_ADDR
// animal := CreateHuman ;
63464: LD_ADDR_VAR 0 12
63468: PUSH
63469: CALL_OW 44
63473: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63474: LD_VAR 0 12
63478: PPUSH
63479: LD_VAR 0 8
63483: PPUSH
63484: LD_INT 0
63486: PPUSH
63487: CALL 65195 0 3
// end ;
63491: GO 63445
63493: POP
63494: POP
// if fishes then
63495: LD_VAR 0 7
63499: IFFALSE 63566
// for i = 1 to fishes do
63501: LD_ADDR_VAR 0 11
63505: PUSH
63506: DOUBLE
63507: LD_INT 1
63509: DEC
63510: ST_TO_ADDR
63511: LD_VAR 0 7
63515: PUSH
63516: FOR_TO
63517: IFFALSE 63564
// begin hc_class = 20 ;
63519: LD_ADDR_OWVAR 28
63523: PUSH
63524: LD_INT 20
63526: ST_TO_ADDR
// hc_gallery =  ;
63527: LD_ADDR_OWVAR 33
63531: PUSH
63532: LD_STRING 
63534: ST_TO_ADDR
// animal := CreateHuman ;
63535: LD_ADDR_VAR 0 12
63539: PUSH
63540: CALL_OW 44
63544: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
63545: LD_VAR 0 12
63549: PPUSH
63550: LD_VAR 0 9
63554: PPUSH
63555: LD_INT 0
63557: PPUSH
63558: CALL 65195 0 3
// end ;
63562: GO 63516
63564: POP
63565: POP
// end ;
63566: LD_VAR 0 10
63570: RET
// export function WantHeal ( sci , unit ) ; begin
63571: LD_INT 0
63573: PPUSH
// if GetTaskList ( sci ) > 0 then
63574: LD_VAR 0 1
63578: PPUSH
63579: CALL_OW 437
63583: PUSH
63584: LD_INT 0
63586: GREATER
63587: IFFALSE 63657
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
63589: LD_VAR 0 1
63593: PPUSH
63594: CALL_OW 437
63598: PUSH
63599: LD_INT 1
63601: ARRAY
63602: PUSH
63603: LD_INT 1
63605: ARRAY
63606: PUSH
63607: LD_STRING l
63609: EQUAL
63610: PUSH
63611: LD_VAR 0 1
63615: PPUSH
63616: CALL_OW 437
63620: PUSH
63621: LD_INT 1
63623: ARRAY
63624: PUSH
63625: LD_INT 4
63627: ARRAY
63628: PUSH
63629: LD_VAR 0 2
63633: EQUAL
63634: AND
63635: IFFALSE 63647
// result := true else
63637: LD_ADDR_VAR 0 3
63641: PUSH
63642: LD_INT 1
63644: ST_TO_ADDR
63645: GO 63655
// result := false ;
63647: LD_ADDR_VAR 0 3
63651: PUSH
63652: LD_INT 0
63654: ST_TO_ADDR
// end else
63655: GO 63665
// result := false ;
63657: LD_ADDR_VAR 0 3
63661: PUSH
63662: LD_INT 0
63664: ST_TO_ADDR
// end ;
63665: LD_VAR 0 3
63669: RET
// export function HealTarget ( sci ) ; begin
63670: LD_INT 0
63672: PPUSH
// if not sci then
63673: LD_VAR 0 1
63677: NOT
63678: IFFALSE 63682
// exit ;
63680: GO 63747
// result := 0 ;
63682: LD_ADDR_VAR 0 2
63686: PUSH
63687: LD_INT 0
63689: ST_TO_ADDR
// if GetTaskList ( sci ) then
63690: LD_VAR 0 1
63694: PPUSH
63695: CALL_OW 437
63699: IFFALSE 63747
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
63701: LD_VAR 0 1
63705: PPUSH
63706: CALL_OW 437
63710: PUSH
63711: LD_INT 1
63713: ARRAY
63714: PUSH
63715: LD_INT 1
63717: ARRAY
63718: PUSH
63719: LD_STRING l
63721: EQUAL
63722: IFFALSE 63747
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
63724: LD_ADDR_VAR 0 2
63728: PUSH
63729: LD_VAR 0 1
63733: PPUSH
63734: CALL_OW 437
63738: PUSH
63739: LD_INT 1
63741: ARRAY
63742: PUSH
63743: LD_INT 4
63745: ARRAY
63746: ST_TO_ADDR
// end ;
63747: LD_VAR 0 2
63751: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
63752: LD_INT 0
63754: PPUSH
63755: PPUSH
63756: PPUSH
63757: PPUSH
// if not base_units then
63758: LD_VAR 0 1
63762: NOT
63763: IFFALSE 63767
// exit ;
63765: GO 63854
// result := false ;
63767: LD_ADDR_VAR 0 2
63771: PUSH
63772: LD_INT 0
63774: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
63775: LD_ADDR_VAR 0 5
63779: PUSH
63780: LD_VAR 0 1
63784: PPUSH
63785: LD_INT 21
63787: PUSH
63788: LD_INT 3
63790: PUSH
63791: EMPTY
63792: LIST
63793: LIST
63794: PPUSH
63795: CALL_OW 72
63799: ST_TO_ADDR
// if not tmp then
63800: LD_VAR 0 5
63804: NOT
63805: IFFALSE 63809
// exit ;
63807: GO 63854
// for i in tmp do
63809: LD_ADDR_VAR 0 3
63813: PUSH
63814: LD_VAR 0 5
63818: PUSH
63819: FOR_IN
63820: IFFALSE 63852
// begin result := EnemyInRange ( i , 22 ) ;
63822: LD_ADDR_VAR 0 2
63826: PUSH
63827: LD_VAR 0 3
63831: PPUSH
63832: LD_INT 22
63834: PPUSH
63835: CALL 61441 0 2
63839: ST_TO_ADDR
// if result then
63840: LD_VAR 0 2
63844: IFFALSE 63850
// exit ;
63846: POP
63847: POP
63848: GO 63854
// end ;
63850: GO 63819
63852: POP
63853: POP
// end ;
63854: LD_VAR 0 2
63858: RET
// export function FilterByTag ( units , tag ) ; begin
63859: LD_INT 0
63861: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
63862: LD_ADDR_VAR 0 3
63866: PUSH
63867: LD_VAR 0 1
63871: PPUSH
63872: LD_INT 120
63874: PUSH
63875: LD_VAR 0 2
63879: PUSH
63880: EMPTY
63881: LIST
63882: LIST
63883: PPUSH
63884: CALL_OW 72
63888: ST_TO_ADDR
// end ;
63889: LD_VAR 0 3
63893: RET
// export function IsDriver ( un ) ; begin
63894: LD_INT 0
63896: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
63897: LD_ADDR_VAR 0 2
63901: PUSH
63902: LD_VAR 0 1
63906: PUSH
63907: LD_INT 55
63909: PUSH
63910: EMPTY
63911: LIST
63912: PPUSH
63913: CALL_OW 69
63917: IN
63918: ST_TO_ADDR
// end ;
63919: LD_VAR 0 2
63923: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
63924: LD_INT 0
63926: PPUSH
63927: PPUSH
// list := [ ] ;
63928: LD_ADDR_VAR 0 5
63932: PUSH
63933: EMPTY
63934: ST_TO_ADDR
// case d of 0 :
63935: LD_VAR 0 3
63939: PUSH
63940: LD_INT 0
63942: DOUBLE
63943: EQUAL
63944: IFTRUE 63948
63946: GO 64081
63948: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
63949: LD_ADDR_VAR 0 5
63953: PUSH
63954: LD_VAR 0 1
63958: PUSH
63959: LD_INT 4
63961: MINUS
63962: PUSH
63963: LD_VAR 0 2
63967: PUSH
63968: LD_INT 4
63970: MINUS
63971: PUSH
63972: LD_INT 2
63974: PUSH
63975: EMPTY
63976: LIST
63977: LIST
63978: LIST
63979: PUSH
63980: LD_VAR 0 1
63984: PUSH
63985: LD_INT 3
63987: MINUS
63988: PUSH
63989: LD_VAR 0 2
63993: PUSH
63994: LD_INT 1
63996: PUSH
63997: EMPTY
63998: LIST
63999: LIST
64000: LIST
64001: PUSH
64002: LD_VAR 0 1
64006: PUSH
64007: LD_INT 4
64009: PLUS
64010: PUSH
64011: LD_VAR 0 2
64015: PUSH
64016: LD_INT 4
64018: PUSH
64019: EMPTY
64020: LIST
64021: LIST
64022: LIST
64023: PUSH
64024: LD_VAR 0 1
64028: PUSH
64029: LD_INT 3
64031: PLUS
64032: PUSH
64033: LD_VAR 0 2
64037: PUSH
64038: LD_INT 3
64040: PLUS
64041: PUSH
64042: LD_INT 5
64044: PUSH
64045: EMPTY
64046: LIST
64047: LIST
64048: LIST
64049: PUSH
64050: LD_VAR 0 1
64054: PUSH
64055: LD_VAR 0 2
64059: PUSH
64060: LD_INT 4
64062: PLUS
64063: PUSH
64064: LD_INT 0
64066: PUSH
64067: EMPTY
64068: LIST
64069: LIST
64070: LIST
64071: PUSH
64072: EMPTY
64073: LIST
64074: LIST
64075: LIST
64076: LIST
64077: LIST
64078: ST_TO_ADDR
// end ; 1 :
64079: GO 64779
64081: LD_INT 1
64083: DOUBLE
64084: EQUAL
64085: IFTRUE 64089
64087: GO 64222
64089: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
64090: LD_ADDR_VAR 0 5
64094: PUSH
64095: LD_VAR 0 1
64099: PUSH
64100: LD_VAR 0 2
64104: PUSH
64105: LD_INT 4
64107: MINUS
64108: PUSH
64109: LD_INT 3
64111: PUSH
64112: EMPTY
64113: LIST
64114: LIST
64115: LIST
64116: PUSH
64117: LD_VAR 0 1
64121: PUSH
64122: LD_INT 3
64124: MINUS
64125: PUSH
64126: LD_VAR 0 2
64130: PUSH
64131: LD_INT 3
64133: MINUS
64134: PUSH
64135: LD_INT 2
64137: PUSH
64138: EMPTY
64139: LIST
64140: LIST
64141: LIST
64142: PUSH
64143: LD_VAR 0 1
64147: PUSH
64148: LD_INT 4
64150: MINUS
64151: PUSH
64152: LD_VAR 0 2
64156: PUSH
64157: LD_INT 1
64159: PUSH
64160: EMPTY
64161: LIST
64162: LIST
64163: LIST
64164: PUSH
64165: LD_VAR 0 1
64169: PUSH
64170: LD_VAR 0 2
64174: PUSH
64175: LD_INT 3
64177: PLUS
64178: PUSH
64179: LD_INT 0
64181: PUSH
64182: EMPTY
64183: LIST
64184: LIST
64185: LIST
64186: PUSH
64187: LD_VAR 0 1
64191: PUSH
64192: LD_INT 4
64194: PLUS
64195: PUSH
64196: LD_VAR 0 2
64200: PUSH
64201: LD_INT 4
64203: PLUS
64204: PUSH
64205: LD_INT 5
64207: PUSH
64208: EMPTY
64209: LIST
64210: LIST
64211: LIST
64212: PUSH
64213: EMPTY
64214: LIST
64215: LIST
64216: LIST
64217: LIST
64218: LIST
64219: ST_TO_ADDR
// end ; 2 :
64220: GO 64779
64222: LD_INT 2
64224: DOUBLE
64225: EQUAL
64226: IFTRUE 64230
64228: GO 64359
64230: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
64231: LD_ADDR_VAR 0 5
64235: PUSH
64236: LD_VAR 0 1
64240: PUSH
64241: LD_VAR 0 2
64245: PUSH
64246: LD_INT 3
64248: MINUS
64249: PUSH
64250: LD_INT 3
64252: PUSH
64253: EMPTY
64254: LIST
64255: LIST
64256: LIST
64257: PUSH
64258: LD_VAR 0 1
64262: PUSH
64263: LD_INT 4
64265: PLUS
64266: PUSH
64267: LD_VAR 0 2
64271: PUSH
64272: LD_INT 4
64274: PUSH
64275: EMPTY
64276: LIST
64277: LIST
64278: LIST
64279: PUSH
64280: LD_VAR 0 1
64284: PUSH
64285: LD_VAR 0 2
64289: PUSH
64290: LD_INT 4
64292: PLUS
64293: PUSH
64294: LD_INT 0
64296: PUSH
64297: EMPTY
64298: LIST
64299: LIST
64300: LIST
64301: PUSH
64302: LD_VAR 0 1
64306: PUSH
64307: LD_INT 3
64309: MINUS
64310: PUSH
64311: LD_VAR 0 2
64315: PUSH
64316: LD_INT 1
64318: PUSH
64319: EMPTY
64320: LIST
64321: LIST
64322: LIST
64323: PUSH
64324: LD_VAR 0 1
64328: PUSH
64329: LD_INT 4
64331: MINUS
64332: PUSH
64333: LD_VAR 0 2
64337: PUSH
64338: LD_INT 4
64340: MINUS
64341: PUSH
64342: LD_INT 2
64344: PUSH
64345: EMPTY
64346: LIST
64347: LIST
64348: LIST
64349: PUSH
64350: EMPTY
64351: LIST
64352: LIST
64353: LIST
64354: LIST
64355: LIST
64356: ST_TO_ADDR
// end ; 3 :
64357: GO 64779
64359: LD_INT 3
64361: DOUBLE
64362: EQUAL
64363: IFTRUE 64367
64365: GO 64500
64367: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
64368: LD_ADDR_VAR 0 5
64372: PUSH
64373: LD_VAR 0 1
64377: PUSH
64378: LD_INT 3
64380: PLUS
64381: PUSH
64382: LD_VAR 0 2
64386: PUSH
64387: LD_INT 4
64389: PUSH
64390: EMPTY
64391: LIST
64392: LIST
64393: LIST
64394: PUSH
64395: LD_VAR 0 1
64399: PUSH
64400: LD_INT 4
64402: PLUS
64403: PUSH
64404: LD_VAR 0 2
64408: PUSH
64409: LD_INT 4
64411: PLUS
64412: PUSH
64413: LD_INT 5
64415: PUSH
64416: EMPTY
64417: LIST
64418: LIST
64419: LIST
64420: PUSH
64421: LD_VAR 0 1
64425: PUSH
64426: LD_INT 4
64428: MINUS
64429: PUSH
64430: LD_VAR 0 2
64434: PUSH
64435: LD_INT 1
64437: PUSH
64438: EMPTY
64439: LIST
64440: LIST
64441: LIST
64442: PUSH
64443: LD_VAR 0 1
64447: PUSH
64448: LD_VAR 0 2
64452: PUSH
64453: LD_INT 4
64455: MINUS
64456: PUSH
64457: LD_INT 3
64459: PUSH
64460: EMPTY
64461: LIST
64462: LIST
64463: LIST
64464: PUSH
64465: LD_VAR 0 1
64469: PUSH
64470: LD_INT 3
64472: MINUS
64473: PUSH
64474: LD_VAR 0 2
64478: PUSH
64479: LD_INT 3
64481: MINUS
64482: PUSH
64483: LD_INT 2
64485: PUSH
64486: EMPTY
64487: LIST
64488: LIST
64489: LIST
64490: PUSH
64491: EMPTY
64492: LIST
64493: LIST
64494: LIST
64495: LIST
64496: LIST
64497: ST_TO_ADDR
// end ; 4 :
64498: GO 64779
64500: LD_INT 4
64502: DOUBLE
64503: EQUAL
64504: IFTRUE 64508
64506: GO 64641
64508: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
64509: LD_ADDR_VAR 0 5
64513: PUSH
64514: LD_VAR 0 1
64518: PUSH
64519: LD_VAR 0 2
64523: PUSH
64524: LD_INT 4
64526: PLUS
64527: PUSH
64528: LD_INT 0
64530: PUSH
64531: EMPTY
64532: LIST
64533: LIST
64534: LIST
64535: PUSH
64536: LD_VAR 0 1
64540: PUSH
64541: LD_INT 3
64543: PLUS
64544: PUSH
64545: LD_VAR 0 2
64549: PUSH
64550: LD_INT 3
64552: PLUS
64553: PUSH
64554: LD_INT 5
64556: PUSH
64557: EMPTY
64558: LIST
64559: LIST
64560: LIST
64561: PUSH
64562: LD_VAR 0 1
64566: PUSH
64567: LD_INT 4
64569: PLUS
64570: PUSH
64571: LD_VAR 0 2
64575: PUSH
64576: LD_INT 4
64578: PUSH
64579: EMPTY
64580: LIST
64581: LIST
64582: LIST
64583: PUSH
64584: LD_VAR 0 1
64588: PUSH
64589: LD_VAR 0 2
64593: PUSH
64594: LD_INT 3
64596: MINUS
64597: PUSH
64598: LD_INT 3
64600: PUSH
64601: EMPTY
64602: LIST
64603: LIST
64604: LIST
64605: PUSH
64606: LD_VAR 0 1
64610: PUSH
64611: LD_INT 4
64613: MINUS
64614: PUSH
64615: LD_VAR 0 2
64619: PUSH
64620: LD_INT 4
64622: MINUS
64623: PUSH
64624: LD_INT 2
64626: PUSH
64627: EMPTY
64628: LIST
64629: LIST
64630: LIST
64631: PUSH
64632: EMPTY
64633: LIST
64634: LIST
64635: LIST
64636: LIST
64637: LIST
64638: ST_TO_ADDR
// end ; 5 :
64639: GO 64779
64641: LD_INT 5
64643: DOUBLE
64644: EQUAL
64645: IFTRUE 64649
64647: GO 64778
64649: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
64650: LD_ADDR_VAR 0 5
64654: PUSH
64655: LD_VAR 0 1
64659: PUSH
64660: LD_INT 4
64662: MINUS
64663: PUSH
64664: LD_VAR 0 2
64668: PUSH
64669: LD_INT 1
64671: PUSH
64672: EMPTY
64673: LIST
64674: LIST
64675: LIST
64676: PUSH
64677: LD_VAR 0 1
64681: PUSH
64682: LD_VAR 0 2
64686: PUSH
64687: LD_INT 4
64689: MINUS
64690: PUSH
64691: LD_INT 3
64693: PUSH
64694: EMPTY
64695: LIST
64696: LIST
64697: LIST
64698: PUSH
64699: LD_VAR 0 1
64703: PUSH
64704: LD_INT 4
64706: PLUS
64707: PUSH
64708: LD_VAR 0 2
64712: PUSH
64713: LD_INT 4
64715: PLUS
64716: PUSH
64717: LD_INT 5
64719: PUSH
64720: EMPTY
64721: LIST
64722: LIST
64723: LIST
64724: PUSH
64725: LD_VAR 0 1
64729: PUSH
64730: LD_INT 3
64732: PLUS
64733: PUSH
64734: LD_VAR 0 2
64738: PUSH
64739: LD_INT 4
64741: PUSH
64742: EMPTY
64743: LIST
64744: LIST
64745: LIST
64746: PUSH
64747: LD_VAR 0 1
64751: PUSH
64752: LD_VAR 0 2
64756: PUSH
64757: LD_INT 3
64759: PLUS
64760: PUSH
64761: LD_INT 0
64763: PUSH
64764: EMPTY
64765: LIST
64766: LIST
64767: LIST
64768: PUSH
64769: EMPTY
64770: LIST
64771: LIST
64772: LIST
64773: LIST
64774: LIST
64775: ST_TO_ADDR
// end ; end ;
64776: GO 64779
64778: POP
// result := list ;
64779: LD_ADDR_VAR 0 4
64783: PUSH
64784: LD_VAR 0 5
64788: ST_TO_ADDR
// end ;
64789: LD_VAR 0 4
64793: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
64794: LD_INT 0
64796: PPUSH
64797: PPUSH
64798: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
64799: LD_VAR 0 1
64803: NOT
64804: PUSH
64805: LD_VAR 0 2
64809: PUSH
64810: LD_INT 1
64812: PUSH
64813: LD_INT 2
64815: PUSH
64816: LD_INT 3
64818: PUSH
64819: LD_INT 4
64821: PUSH
64822: EMPTY
64823: LIST
64824: LIST
64825: LIST
64826: LIST
64827: IN
64828: NOT
64829: OR
64830: IFFALSE 64834
// exit ;
64832: GO 64917
// tmp := [ ] ;
64834: LD_ADDR_VAR 0 5
64838: PUSH
64839: EMPTY
64840: ST_TO_ADDR
// for i in units do
64841: LD_ADDR_VAR 0 4
64845: PUSH
64846: LD_VAR 0 1
64850: PUSH
64851: FOR_IN
64852: IFFALSE 64886
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
64854: LD_ADDR_VAR 0 5
64858: PUSH
64859: LD_VAR 0 5
64863: PPUSH
64864: LD_VAR 0 4
64868: PPUSH
64869: LD_VAR 0 2
64873: PPUSH
64874: CALL_OW 259
64878: PPUSH
64879: CALL 66278 0 2
64883: ST_TO_ADDR
64884: GO 64851
64886: POP
64887: POP
// if not tmp then
64888: LD_VAR 0 5
64892: NOT
64893: IFFALSE 64897
// exit ;
64895: GO 64917
// result := SortListByListDesc ( units , tmp ) ;
64897: LD_ADDR_VAR 0 3
64901: PUSH
64902: LD_VAR 0 1
64906: PPUSH
64907: LD_VAR 0 5
64911: PPUSH
64912: CALL_OW 77
64916: ST_TO_ADDR
// end ;
64917: LD_VAR 0 3
64921: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
64922: LD_INT 0
64924: PPUSH
64925: PPUSH
64926: PPUSH
// result := false ;
64927: LD_ADDR_VAR 0 3
64931: PUSH
64932: LD_INT 0
64934: ST_TO_ADDR
// if not building then
64935: LD_VAR 0 2
64939: NOT
64940: IFFALSE 64944
// exit ;
64942: GO 65082
// x := GetX ( building ) ;
64944: LD_ADDR_VAR 0 4
64948: PUSH
64949: LD_VAR 0 2
64953: PPUSH
64954: CALL_OW 250
64958: ST_TO_ADDR
// y := GetY ( building ) ;
64959: LD_ADDR_VAR 0 5
64963: PUSH
64964: LD_VAR 0 2
64968: PPUSH
64969: CALL_OW 251
64973: ST_TO_ADDR
// if not x or not y then
64974: LD_VAR 0 4
64978: NOT
64979: PUSH
64980: LD_VAR 0 5
64984: NOT
64985: OR
64986: IFFALSE 64990
// exit ;
64988: GO 65082
// if GetTaskList ( unit ) then
64990: LD_VAR 0 1
64994: PPUSH
64995: CALL_OW 437
64999: IFFALSE 65082
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
65001: LD_STRING e
65003: PUSH
65004: LD_VAR 0 1
65008: PPUSH
65009: CALL_OW 437
65013: PUSH
65014: LD_INT 1
65016: ARRAY
65017: PUSH
65018: LD_INT 1
65020: ARRAY
65021: EQUAL
65022: PUSH
65023: LD_VAR 0 4
65027: PUSH
65028: LD_VAR 0 1
65032: PPUSH
65033: CALL_OW 437
65037: PUSH
65038: LD_INT 1
65040: ARRAY
65041: PUSH
65042: LD_INT 2
65044: ARRAY
65045: EQUAL
65046: AND
65047: PUSH
65048: LD_VAR 0 5
65052: PUSH
65053: LD_VAR 0 1
65057: PPUSH
65058: CALL_OW 437
65062: PUSH
65063: LD_INT 1
65065: ARRAY
65066: PUSH
65067: LD_INT 3
65069: ARRAY
65070: EQUAL
65071: AND
65072: IFFALSE 65082
// result := true end ;
65074: LD_ADDR_VAR 0 3
65078: PUSH
65079: LD_INT 1
65081: ST_TO_ADDR
// end ;
65082: LD_VAR 0 3
65086: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
65087: LD_INT 0
65089: PPUSH
// result := false ;
65090: LD_ADDR_VAR 0 4
65094: PUSH
65095: LD_INT 0
65097: ST_TO_ADDR
// if GetTaskList ( unit ) then
65098: LD_VAR 0 1
65102: PPUSH
65103: CALL_OW 437
65107: IFFALSE 65190
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
65109: LD_STRING M
65111: PUSH
65112: LD_VAR 0 1
65116: PPUSH
65117: CALL_OW 437
65121: PUSH
65122: LD_INT 1
65124: ARRAY
65125: PUSH
65126: LD_INT 1
65128: ARRAY
65129: EQUAL
65130: PUSH
65131: LD_VAR 0 2
65135: PUSH
65136: LD_VAR 0 1
65140: PPUSH
65141: CALL_OW 437
65145: PUSH
65146: LD_INT 1
65148: ARRAY
65149: PUSH
65150: LD_INT 2
65152: ARRAY
65153: EQUAL
65154: AND
65155: PUSH
65156: LD_VAR 0 3
65160: PUSH
65161: LD_VAR 0 1
65165: PPUSH
65166: CALL_OW 437
65170: PUSH
65171: LD_INT 1
65173: ARRAY
65174: PUSH
65175: LD_INT 3
65177: ARRAY
65178: EQUAL
65179: AND
65180: IFFALSE 65190
// result := true ;
65182: LD_ADDR_VAR 0 4
65186: PUSH
65187: LD_INT 1
65189: ST_TO_ADDR
// end ; end ;
65190: LD_VAR 0 4
65194: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
65195: LD_INT 0
65197: PPUSH
65198: PPUSH
65199: PPUSH
65200: PPUSH
// if not unit or not area then
65201: LD_VAR 0 1
65205: NOT
65206: PUSH
65207: LD_VAR 0 2
65211: NOT
65212: OR
65213: IFFALSE 65217
// exit ;
65215: GO 65381
// tmp := AreaToList ( area , i ) ;
65217: LD_ADDR_VAR 0 6
65221: PUSH
65222: LD_VAR 0 2
65226: PPUSH
65227: LD_VAR 0 5
65231: PPUSH
65232: CALL_OW 517
65236: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
65237: LD_ADDR_VAR 0 5
65241: PUSH
65242: DOUBLE
65243: LD_INT 1
65245: DEC
65246: ST_TO_ADDR
65247: LD_VAR 0 6
65251: PUSH
65252: LD_INT 1
65254: ARRAY
65255: PUSH
65256: FOR_TO
65257: IFFALSE 65379
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
65259: LD_ADDR_VAR 0 7
65263: PUSH
65264: LD_VAR 0 6
65268: PUSH
65269: LD_INT 1
65271: ARRAY
65272: PUSH
65273: LD_VAR 0 5
65277: ARRAY
65278: PUSH
65279: LD_VAR 0 6
65283: PUSH
65284: LD_INT 2
65286: ARRAY
65287: PUSH
65288: LD_VAR 0 5
65292: ARRAY
65293: PUSH
65294: EMPTY
65295: LIST
65296: LIST
65297: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
65298: LD_VAR 0 7
65302: PUSH
65303: LD_INT 1
65305: ARRAY
65306: PPUSH
65307: LD_VAR 0 7
65311: PUSH
65312: LD_INT 2
65314: ARRAY
65315: PPUSH
65316: CALL_OW 428
65320: PUSH
65321: LD_INT 0
65323: EQUAL
65324: IFFALSE 65377
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
65326: LD_VAR 0 1
65330: PPUSH
65331: LD_VAR 0 7
65335: PUSH
65336: LD_INT 1
65338: ARRAY
65339: PPUSH
65340: LD_VAR 0 7
65344: PUSH
65345: LD_INT 2
65347: ARRAY
65348: PPUSH
65349: LD_VAR 0 3
65353: PPUSH
65354: CALL_OW 48
// result := IsPlaced ( unit ) ;
65358: LD_ADDR_VAR 0 4
65362: PUSH
65363: LD_VAR 0 1
65367: PPUSH
65368: CALL_OW 305
65372: ST_TO_ADDR
// exit ;
65373: POP
65374: POP
65375: GO 65381
// end ; end ;
65377: GO 65256
65379: POP
65380: POP
// end ;
65381: LD_VAR 0 4
65385: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
65386: LD_INT 0
65388: PPUSH
65389: PPUSH
65390: PPUSH
// if not side or side > 8 then
65391: LD_VAR 0 1
65395: NOT
65396: PUSH
65397: LD_VAR 0 1
65401: PUSH
65402: LD_INT 8
65404: GREATER
65405: OR
65406: IFFALSE 65410
// exit ;
65408: GO 65597
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
65410: LD_ADDR_VAR 0 4
65414: PUSH
65415: LD_INT 22
65417: PUSH
65418: LD_VAR 0 1
65422: PUSH
65423: EMPTY
65424: LIST
65425: LIST
65426: PUSH
65427: LD_INT 21
65429: PUSH
65430: LD_INT 3
65432: PUSH
65433: EMPTY
65434: LIST
65435: LIST
65436: PUSH
65437: EMPTY
65438: LIST
65439: LIST
65440: PPUSH
65441: CALL_OW 69
65445: ST_TO_ADDR
// if not tmp then
65446: LD_VAR 0 4
65450: NOT
65451: IFFALSE 65455
// exit ;
65453: GO 65597
// enable_addtolog := true ;
65455: LD_ADDR_OWVAR 81
65459: PUSH
65460: LD_INT 1
65462: ST_TO_ADDR
// AddToLog ( [ ) ;
65463: LD_STRING [
65465: PPUSH
65466: CALL_OW 561
// for i in tmp do
65470: LD_ADDR_VAR 0 3
65474: PUSH
65475: LD_VAR 0 4
65479: PUSH
65480: FOR_IN
65481: IFFALSE 65588
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
65483: LD_STRING [
65485: PUSH
65486: LD_VAR 0 3
65490: PPUSH
65491: CALL_OW 266
65495: STR
65496: PUSH
65497: LD_STRING , 
65499: STR
65500: PUSH
65501: LD_VAR 0 3
65505: PPUSH
65506: CALL_OW 250
65510: STR
65511: PUSH
65512: LD_STRING , 
65514: STR
65515: PUSH
65516: LD_VAR 0 3
65520: PPUSH
65521: CALL_OW 251
65525: STR
65526: PUSH
65527: LD_STRING , 
65529: STR
65530: PUSH
65531: LD_VAR 0 3
65535: PPUSH
65536: CALL_OW 254
65540: STR
65541: PUSH
65542: LD_STRING , 
65544: STR
65545: PUSH
65546: LD_VAR 0 3
65550: PPUSH
65551: LD_INT 1
65553: PPUSH
65554: CALL_OW 268
65558: STR
65559: PUSH
65560: LD_STRING , 
65562: STR
65563: PUSH
65564: LD_VAR 0 3
65568: PPUSH
65569: LD_INT 2
65571: PPUSH
65572: CALL_OW 268
65576: STR
65577: PUSH
65578: LD_STRING ],
65580: STR
65581: PPUSH
65582: CALL_OW 561
// end ;
65586: GO 65480
65588: POP
65589: POP
// AddToLog ( ]; ) ;
65590: LD_STRING ];
65592: PPUSH
65593: CALL_OW 561
// end ;
65597: LD_VAR 0 2
65601: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
65602: LD_INT 0
65604: PPUSH
65605: PPUSH
65606: PPUSH
65607: PPUSH
65608: PPUSH
// if not area or not rate or not max then
65609: LD_VAR 0 1
65613: NOT
65614: PUSH
65615: LD_VAR 0 2
65619: NOT
65620: OR
65621: PUSH
65622: LD_VAR 0 4
65626: NOT
65627: OR
65628: IFFALSE 65632
// exit ;
65630: GO 65821
// while 1 do
65632: LD_INT 1
65634: IFFALSE 65821
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
65636: LD_ADDR_VAR 0 9
65640: PUSH
65641: LD_VAR 0 1
65645: PPUSH
65646: LD_INT 1
65648: PPUSH
65649: CALL_OW 287
65653: PUSH
65654: LD_INT 10
65656: MUL
65657: ST_TO_ADDR
// r := rate / 10 ;
65658: LD_ADDR_VAR 0 7
65662: PUSH
65663: LD_VAR 0 2
65667: PUSH
65668: LD_INT 10
65670: DIVREAL
65671: ST_TO_ADDR
// time := 1 1$00 ;
65672: LD_ADDR_VAR 0 8
65676: PUSH
65677: LD_INT 2100
65679: ST_TO_ADDR
// if amount < min then
65680: LD_VAR 0 9
65684: PUSH
65685: LD_VAR 0 3
65689: LESS
65690: IFFALSE 65708
// r := r * 2 else
65692: LD_ADDR_VAR 0 7
65696: PUSH
65697: LD_VAR 0 7
65701: PUSH
65702: LD_INT 2
65704: MUL
65705: ST_TO_ADDR
65706: GO 65734
// if amount > max then
65708: LD_VAR 0 9
65712: PUSH
65713: LD_VAR 0 4
65717: GREATER
65718: IFFALSE 65734
// r := r / 2 ;
65720: LD_ADDR_VAR 0 7
65724: PUSH
65725: LD_VAR 0 7
65729: PUSH
65730: LD_INT 2
65732: DIVREAL
65733: ST_TO_ADDR
// time := time / r ;
65734: LD_ADDR_VAR 0 8
65738: PUSH
65739: LD_VAR 0 8
65743: PUSH
65744: LD_VAR 0 7
65748: DIVREAL
65749: ST_TO_ADDR
// if time < 0 then
65750: LD_VAR 0 8
65754: PUSH
65755: LD_INT 0
65757: LESS
65758: IFFALSE 65775
// time := time * - 1 ;
65760: LD_ADDR_VAR 0 8
65764: PUSH
65765: LD_VAR 0 8
65769: PUSH
65770: LD_INT 1
65772: NEG
65773: MUL
65774: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
65775: LD_VAR 0 8
65779: PUSH
65780: LD_INT 35
65782: PPUSH
65783: LD_INT 875
65785: PPUSH
65786: CALL_OW 12
65790: PLUS
65791: PPUSH
65792: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
65796: LD_INT 1
65798: PPUSH
65799: LD_INT 5
65801: PPUSH
65802: CALL_OW 12
65806: PPUSH
65807: LD_VAR 0 1
65811: PPUSH
65812: LD_INT 1
65814: PPUSH
65815: CALL_OW 55
// end ;
65819: GO 65632
// end ;
65821: LD_VAR 0 5
65825: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
65826: LD_INT 0
65828: PPUSH
65829: PPUSH
65830: PPUSH
65831: PPUSH
65832: PPUSH
65833: PPUSH
65834: PPUSH
65835: PPUSH
// if not turrets or not factories then
65836: LD_VAR 0 1
65840: NOT
65841: PUSH
65842: LD_VAR 0 2
65846: NOT
65847: OR
65848: IFFALSE 65852
// exit ;
65850: GO 66159
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
65852: LD_ADDR_VAR 0 10
65856: PUSH
65857: LD_INT 5
65859: PUSH
65860: LD_INT 6
65862: PUSH
65863: EMPTY
65864: LIST
65865: LIST
65866: PUSH
65867: LD_INT 2
65869: PUSH
65870: LD_INT 4
65872: PUSH
65873: EMPTY
65874: LIST
65875: LIST
65876: PUSH
65877: LD_INT 3
65879: PUSH
65880: LD_INT 5
65882: PUSH
65883: EMPTY
65884: LIST
65885: LIST
65886: PUSH
65887: EMPTY
65888: LIST
65889: LIST
65890: LIST
65891: PUSH
65892: LD_INT 24
65894: PUSH
65895: LD_INT 25
65897: PUSH
65898: EMPTY
65899: LIST
65900: LIST
65901: PUSH
65902: LD_INT 23
65904: PUSH
65905: LD_INT 27
65907: PUSH
65908: EMPTY
65909: LIST
65910: LIST
65911: PUSH
65912: EMPTY
65913: LIST
65914: LIST
65915: PUSH
65916: LD_INT 42
65918: PUSH
65919: LD_INT 43
65921: PUSH
65922: EMPTY
65923: LIST
65924: LIST
65925: PUSH
65926: LD_INT 44
65928: PUSH
65929: LD_INT 46
65931: PUSH
65932: EMPTY
65933: LIST
65934: LIST
65935: PUSH
65936: LD_INT 45
65938: PUSH
65939: LD_INT 47
65941: PUSH
65942: EMPTY
65943: LIST
65944: LIST
65945: PUSH
65946: EMPTY
65947: LIST
65948: LIST
65949: LIST
65950: PUSH
65951: EMPTY
65952: LIST
65953: LIST
65954: LIST
65955: ST_TO_ADDR
// result := [ ] ;
65956: LD_ADDR_VAR 0 3
65960: PUSH
65961: EMPTY
65962: ST_TO_ADDR
// for i in turrets do
65963: LD_ADDR_VAR 0 4
65967: PUSH
65968: LD_VAR 0 1
65972: PUSH
65973: FOR_IN
65974: IFFALSE 66157
// begin nat := GetNation ( i ) ;
65976: LD_ADDR_VAR 0 7
65980: PUSH
65981: LD_VAR 0 4
65985: PPUSH
65986: CALL_OW 248
65990: ST_TO_ADDR
// weapon := 0 ;
65991: LD_ADDR_VAR 0 8
65995: PUSH
65996: LD_INT 0
65998: ST_TO_ADDR
// if not nat then
65999: LD_VAR 0 7
66003: NOT
66004: IFFALSE 66008
// continue ;
66006: GO 65973
// for j in list [ nat ] do
66008: LD_ADDR_VAR 0 5
66012: PUSH
66013: LD_VAR 0 10
66017: PUSH
66018: LD_VAR 0 7
66022: ARRAY
66023: PUSH
66024: FOR_IN
66025: IFFALSE 66066
// if GetBWeapon ( i ) = j [ 1 ] then
66027: LD_VAR 0 4
66031: PPUSH
66032: CALL_OW 269
66036: PUSH
66037: LD_VAR 0 5
66041: PUSH
66042: LD_INT 1
66044: ARRAY
66045: EQUAL
66046: IFFALSE 66064
// begin weapon := j [ 2 ] ;
66048: LD_ADDR_VAR 0 8
66052: PUSH
66053: LD_VAR 0 5
66057: PUSH
66058: LD_INT 2
66060: ARRAY
66061: ST_TO_ADDR
// break ;
66062: GO 66066
// end ;
66064: GO 66024
66066: POP
66067: POP
// if not weapon then
66068: LD_VAR 0 8
66072: NOT
66073: IFFALSE 66077
// continue ;
66075: GO 65973
// for k in factories do
66077: LD_ADDR_VAR 0 6
66081: PUSH
66082: LD_VAR 0 2
66086: PUSH
66087: FOR_IN
66088: IFFALSE 66153
// begin weapons := AvailableWeaponList ( k ) ;
66090: LD_ADDR_VAR 0 9
66094: PUSH
66095: LD_VAR 0 6
66099: PPUSH
66100: CALL_OW 478
66104: ST_TO_ADDR
// if not weapons then
66105: LD_VAR 0 9
66109: NOT
66110: IFFALSE 66114
// continue ;
66112: GO 66087
// if weapon in weapons then
66114: LD_VAR 0 8
66118: PUSH
66119: LD_VAR 0 9
66123: IN
66124: IFFALSE 66151
// begin result := [ i , weapon ] ;
66126: LD_ADDR_VAR 0 3
66130: PUSH
66131: LD_VAR 0 4
66135: PUSH
66136: LD_VAR 0 8
66140: PUSH
66141: EMPTY
66142: LIST
66143: LIST
66144: ST_TO_ADDR
// exit ;
66145: POP
66146: POP
66147: POP
66148: POP
66149: GO 66159
// end ; end ;
66151: GO 66087
66153: POP
66154: POP
// end ;
66155: GO 65973
66157: POP
66158: POP
// end ;
66159: LD_VAR 0 3
66163: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
66164: LD_INT 0
66166: PPUSH
// if not side or side > 8 then
66167: LD_VAR 0 3
66171: NOT
66172: PUSH
66173: LD_VAR 0 3
66177: PUSH
66178: LD_INT 8
66180: GREATER
66181: OR
66182: IFFALSE 66186
// exit ;
66184: GO 66245
// if not range then
66186: LD_VAR 0 4
66190: NOT
66191: IFFALSE 66202
// range := - 12 ;
66193: LD_ADDR_VAR 0 4
66197: PUSH
66198: LD_INT 12
66200: NEG
66201: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
66202: LD_VAR 0 1
66206: PPUSH
66207: LD_VAR 0 2
66211: PPUSH
66212: LD_VAR 0 3
66216: PPUSH
66217: LD_VAR 0 4
66221: PPUSH
66222: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
66226: LD_VAR 0 1
66230: PPUSH
66231: LD_VAR 0 2
66235: PPUSH
66236: LD_VAR 0 3
66240: PPUSH
66241: CALL_OW 331
// end ;
66245: LD_VAR 0 5
66249: RET
// export function Video ( mode ) ; begin
66250: LD_INT 0
66252: PPUSH
// ingame_video = mode ;
66253: LD_ADDR_OWVAR 52
66257: PUSH
66258: LD_VAR 0 1
66262: ST_TO_ADDR
// interface_hidden = mode ;
66263: LD_ADDR_OWVAR 54
66267: PUSH
66268: LD_VAR 0 1
66272: ST_TO_ADDR
// end ;
66273: LD_VAR 0 2
66277: RET
// export function Join ( array , element ) ; begin
66278: LD_INT 0
66280: PPUSH
// result := Replace ( array , array + 1 , element ) ;
66281: LD_ADDR_VAR 0 3
66285: PUSH
66286: LD_VAR 0 1
66290: PPUSH
66291: LD_VAR 0 1
66295: PUSH
66296: LD_INT 1
66298: PLUS
66299: PPUSH
66300: LD_VAR 0 2
66304: PPUSH
66305: CALL_OW 1
66309: ST_TO_ADDR
// end ;
66310: LD_VAR 0 3
66314: RET
// export function JoinUnion ( array , element ) ; begin
66315: LD_INT 0
66317: PPUSH
// result := array union element ;
66318: LD_ADDR_VAR 0 3
66322: PUSH
66323: LD_VAR 0 1
66327: PUSH
66328: LD_VAR 0 2
66332: UNION
66333: ST_TO_ADDR
// end ;
66334: LD_VAR 0 3
66338: RET
// export function GetBehemoths ( side ) ; begin
66339: LD_INT 0
66341: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
66342: LD_ADDR_VAR 0 2
66346: PUSH
66347: LD_INT 22
66349: PUSH
66350: LD_VAR 0 1
66354: PUSH
66355: EMPTY
66356: LIST
66357: LIST
66358: PUSH
66359: LD_INT 31
66361: PUSH
66362: LD_INT 25
66364: PUSH
66365: EMPTY
66366: LIST
66367: LIST
66368: PUSH
66369: EMPTY
66370: LIST
66371: LIST
66372: PPUSH
66373: CALL_OW 69
66377: ST_TO_ADDR
// end ;
66378: LD_VAR 0 2
66382: RET
// export function Shuffle ( array ) ; var i , index ; begin
66383: LD_INT 0
66385: PPUSH
66386: PPUSH
66387: PPUSH
// result := [ ] ;
66388: LD_ADDR_VAR 0 2
66392: PUSH
66393: EMPTY
66394: ST_TO_ADDR
// if not array then
66395: LD_VAR 0 1
66399: NOT
66400: IFFALSE 66404
// exit ;
66402: GO 66503
// Randomize ;
66404: CALL_OW 10
// for i = array downto 1 do
66408: LD_ADDR_VAR 0 3
66412: PUSH
66413: DOUBLE
66414: LD_VAR 0 1
66418: INC
66419: ST_TO_ADDR
66420: LD_INT 1
66422: PUSH
66423: FOR_DOWNTO
66424: IFFALSE 66501
// begin index := rand ( 1 , array ) ;
66426: LD_ADDR_VAR 0 4
66430: PUSH
66431: LD_INT 1
66433: PPUSH
66434: LD_VAR 0 1
66438: PPUSH
66439: CALL_OW 12
66443: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
66444: LD_ADDR_VAR 0 2
66448: PUSH
66449: LD_VAR 0 2
66453: PPUSH
66454: LD_VAR 0 2
66458: PUSH
66459: LD_INT 1
66461: PLUS
66462: PPUSH
66463: LD_VAR 0 1
66467: PUSH
66468: LD_VAR 0 4
66472: ARRAY
66473: PPUSH
66474: CALL_OW 2
66478: ST_TO_ADDR
// array := Delete ( array , index ) ;
66479: LD_ADDR_VAR 0 1
66483: PUSH
66484: LD_VAR 0 1
66488: PPUSH
66489: LD_VAR 0 4
66493: PPUSH
66494: CALL_OW 3
66498: ST_TO_ADDR
// end ;
66499: GO 66423
66501: POP
66502: POP
// end ;
66503: LD_VAR 0 2
66507: RET
// export function GetBaseMaterials ( base ) ; begin
66508: LD_INT 0
66510: PPUSH
// result := [ 0 , 0 , 0 ] ;
66511: LD_ADDR_VAR 0 2
66515: PUSH
66516: LD_INT 0
66518: PUSH
66519: LD_INT 0
66521: PUSH
66522: LD_INT 0
66524: PUSH
66525: EMPTY
66526: LIST
66527: LIST
66528: LIST
66529: ST_TO_ADDR
// if not base then
66530: LD_VAR 0 1
66534: NOT
66535: IFFALSE 66539
// exit ;
66537: GO 66588
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
66539: LD_ADDR_VAR 0 2
66543: PUSH
66544: LD_VAR 0 1
66548: PPUSH
66549: LD_INT 1
66551: PPUSH
66552: CALL_OW 275
66556: PUSH
66557: LD_VAR 0 1
66561: PPUSH
66562: LD_INT 2
66564: PPUSH
66565: CALL_OW 275
66569: PUSH
66570: LD_VAR 0 1
66574: PPUSH
66575: LD_INT 3
66577: PPUSH
66578: CALL_OW 275
66582: PUSH
66583: EMPTY
66584: LIST
66585: LIST
66586: LIST
66587: ST_TO_ADDR
// end ;
66588: LD_VAR 0 2
66592: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
66593: LD_INT 0
66595: PPUSH
66596: PPUSH
// result := array ;
66597: LD_ADDR_VAR 0 3
66601: PUSH
66602: LD_VAR 0 1
66606: ST_TO_ADDR
// if size >= result then
66607: LD_VAR 0 2
66611: PUSH
66612: LD_VAR 0 3
66616: GREATEREQUAL
66617: IFFALSE 66621
// exit ;
66619: GO 66671
// if size then
66621: LD_VAR 0 2
66625: IFFALSE 66671
// for i := array downto size do
66627: LD_ADDR_VAR 0 4
66631: PUSH
66632: DOUBLE
66633: LD_VAR 0 1
66637: INC
66638: ST_TO_ADDR
66639: LD_VAR 0 2
66643: PUSH
66644: FOR_DOWNTO
66645: IFFALSE 66669
// result := Delete ( result , result ) ;
66647: LD_ADDR_VAR 0 3
66651: PUSH
66652: LD_VAR 0 3
66656: PPUSH
66657: LD_VAR 0 3
66661: PPUSH
66662: CALL_OW 3
66666: ST_TO_ADDR
66667: GO 66644
66669: POP
66670: POP
// end ;
66671: LD_VAR 0 3
66675: RET
// export function ComExit ( unit ) ; var tmp ; begin
66676: LD_INT 0
66678: PPUSH
66679: PPUSH
// if not IsInUnit ( unit ) then
66680: LD_VAR 0 1
66684: PPUSH
66685: CALL_OW 310
66689: NOT
66690: IFFALSE 66694
// exit ;
66692: GO 66754
// tmp := IsInUnit ( unit ) ;
66694: LD_ADDR_VAR 0 3
66698: PUSH
66699: LD_VAR 0 1
66703: PPUSH
66704: CALL_OW 310
66708: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
66709: LD_VAR 0 3
66713: PPUSH
66714: CALL_OW 247
66718: PUSH
66719: LD_INT 2
66721: EQUAL
66722: IFFALSE 66735
// ComExitVehicle ( unit ) else
66724: LD_VAR 0 1
66728: PPUSH
66729: CALL_OW 121
66733: GO 66744
// ComExitBuilding ( unit ) ;
66735: LD_VAR 0 1
66739: PPUSH
66740: CALL_OW 122
// result := tmp ;
66744: LD_ADDR_VAR 0 2
66748: PUSH
66749: LD_VAR 0 3
66753: ST_TO_ADDR
// end ;
66754: LD_VAR 0 2
66758: RET
// export function ComExitAll ( units ) ; var i ; begin
66759: LD_INT 0
66761: PPUSH
66762: PPUSH
// if not units then
66763: LD_VAR 0 1
66767: NOT
66768: IFFALSE 66772
// exit ;
66770: GO 66798
// for i in units do
66772: LD_ADDR_VAR 0 3
66776: PUSH
66777: LD_VAR 0 1
66781: PUSH
66782: FOR_IN
66783: IFFALSE 66796
// ComExit ( i ) ;
66785: LD_VAR 0 3
66789: PPUSH
66790: CALL 66676 0 1
66794: GO 66782
66796: POP
66797: POP
// end ;
66798: LD_VAR 0 2
66802: RET
// export function ResetHc ; begin
66803: LD_INT 0
66805: PPUSH
// InitHc ;
66806: CALL_OW 19
// hc_importance := 0 ;
66810: LD_ADDR_OWVAR 32
66814: PUSH
66815: LD_INT 0
66817: ST_TO_ADDR
// end ;
66818: LD_VAR 0 1
66822: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
66823: LD_INT 0
66825: PPUSH
66826: PPUSH
66827: PPUSH
// _x := ( x1 + x2 ) div 2 ;
66828: LD_ADDR_VAR 0 6
66832: PUSH
66833: LD_VAR 0 1
66837: PUSH
66838: LD_VAR 0 3
66842: PLUS
66843: PUSH
66844: LD_INT 2
66846: DIV
66847: ST_TO_ADDR
// if _x < 0 then
66848: LD_VAR 0 6
66852: PUSH
66853: LD_INT 0
66855: LESS
66856: IFFALSE 66873
// _x := _x * - 1 ;
66858: LD_ADDR_VAR 0 6
66862: PUSH
66863: LD_VAR 0 6
66867: PUSH
66868: LD_INT 1
66870: NEG
66871: MUL
66872: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
66873: LD_ADDR_VAR 0 7
66877: PUSH
66878: LD_VAR 0 2
66882: PUSH
66883: LD_VAR 0 4
66887: PLUS
66888: PUSH
66889: LD_INT 2
66891: DIV
66892: ST_TO_ADDR
// if _y < 0 then
66893: LD_VAR 0 7
66897: PUSH
66898: LD_INT 0
66900: LESS
66901: IFFALSE 66918
// _y := _y * - 1 ;
66903: LD_ADDR_VAR 0 7
66907: PUSH
66908: LD_VAR 0 7
66912: PUSH
66913: LD_INT 1
66915: NEG
66916: MUL
66917: ST_TO_ADDR
// result := [ _x , _y ] ;
66918: LD_ADDR_VAR 0 5
66922: PUSH
66923: LD_VAR 0 6
66927: PUSH
66928: LD_VAR 0 7
66932: PUSH
66933: EMPTY
66934: LIST
66935: LIST
66936: ST_TO_ADDR
// end ;
66937: LD_VAR 0 5
66941: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
66942: LD_INT 0
66944: PPUSH
66945: PPUSH
66946: PPUSH
66947: PPUSH
// task := GetTaskList ( unit ) ;
66948: LD_ADDR_VAR 0 7
66952: PUSH
66953: LD_VAR 0 1
66957: PPUSH
66958: CALL_OW 437
66962: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
66963: LD_VAR 0 7
66967: NOT
66968: PUSH
66969: LD_VAR 0 1
66973: PPUSH
66974: LD_VAR 0 2
66978: PPUSH
66979: CALL_OW 308
66983: NOT
66984: AND
66985: IFFALSE 66989
// exit ;
66987: GO 67107
// if IsInArea ( unit , area ) then
66989: LD_VAR 0 1
66993: PPUSH
66994: LD_VAR 0 2
66998: PPUSH
66999: CALL_OW 308
67003: IFFALSE 67021
// begin ComMoveToArea ( unit , goAway ) ;
67005: LD_VAR 0 1
67009: PPUSH
67010: LD_VAR 0 3
67014: PPUSH
67015: CALL_OW 113
// exit ;
67019: GO 67107
// end ; if task [ 1 ] [ 1 ] <> M then
67021: LD_VAR 0 7
67025: PUSH
67026: LD_INT 1
67028: ARRAY
67029: PUSH
67030: LD_INT 1
67032: ARRAY
67033: PUSH
67034: LD_STRING M
67036: NONEQUAL
67037: IFFALSE 67041
// exit ;
67039: GO 67107
// x := task [ 1 ] [ 2 ] ;
67041: LD_ADDR_VAR 0 5
67045: PUSH
67046: LD_VAR 0 7
67050: PUSH
67051: LD_INT 1
67053: ARRAY
67054: PUSH
67055: LD_INT 2
67057: ARRAY
67058: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
67059: LD_ADDR_VAR 0 6
67063: PUSH
67064: LD_VAR 0 7
67068: PUSH
67069: LD_INT 1
67071: ARRAY
67072: PUSH
67073: LD_INT 3
67075: ARRAY
67076: ST_TO_ADDR
// if InArea ( x , y , area ) then
67077: LD_VAR 0 5
67081: PPUSH
67082: LD_VAR 0 6
67086: PPUSH
67087: LD_VAR 0 2
67091: PPUSH
67092: CALL_OW 309
67096: IFFALSE 67107
// ComStop ( unit ) ;
67098: LD_VAR 0 1
67102: PPUSH
67103: CALL_OW 141
// end ;
67107: LD_VAR 0 4
67111: RET
// export function Abs ( value ) ; begin
67112: LD_INT 0
67114: PPUSH
// result := value ;
67115: LD_ADDR_VAR 0 2
67119: PUSH
67120: LD_VAR 0 1
67124: ST_TO_ADDR
// if value < 0 then
67125: LD_VAR 0 1
67129: PUSH
67130: LD_INT 0
67132: LESS
67133: IFFALSE 67150
// result := value * - 1 ;
67135: LD_ADDR_VAR 0 2
67139: PUSH
67140: LD_VAR 0 1
67144: PUSH
67145: LD_INT 1
67147: NEG
67148: MUL
67149: ST_TO_ADDR
// end ;
67150: LD_VAR 0 2
67154: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
67155: LD_INT 0
67157: PPUSH
67158: PPUSH
67159: PPUSH
67160: PPUSH
67161: PPUSH
67162: PPUSH
67163: PPUSH
67164: PPUSH
// if not unit or not building then
67165: LD_VAR 0 1
67169: NOT
67170: PUSH
67171: LD_VAR 0 2
67175: NOT
67176: OR
67177: IFFALSE 67181
// exit ;
67179: GO 67407
// x := GetX ( building ) ;
67181: LD_ADDR_VAR 0 4
67185: PUSH
67186: LD_VAR 0 2
67190: PPUSH
67191: CALL_OW 250
67195: ST_TO_ADDR
// y := GetY ( building ) ;
67196: LD_ADDR_VAR 0 6
67200: PUSH
67201: LD_VAR 0 2
67205: PPUSH
67206: CALL_OW 251
67210: ST_TO_ADDR
// d := GetDir ( building ) ;
67211: LD_ADDR_VAR 0 8
67215: PUSH
67216: LD_VAR 0 2
67220: PPUSH
67221: CALL_OW 254
67225: ST_TO_ADDR
// r := 4 ;
67226: LD_ADDR_VAR 0 9
67230: PUSH
67231: LD_INT 4
67233: ST_TO_ADDR
// for i := 1 to 5 do
67234: LD_ADDR_VAR 0 10
67238: PUSH
67239: DOUBLE
67240: LD_INT 1
67242: DEC
67243: ST_TO_ADDR
67244: LD_INT 5
67246: PUSH
67247: FOR_TO
67248: IFFALSE 67405
// begin _x := ShiftX ( x , d , r + i ) ;
67250: LD_ADDR_VAR 0 5
67254: PUSH
67255: LD_VAR 0 4
67259: PPUSH
67260: LD_VAR 0 8
67264: PPUSH
67265: LD_VAR 0 9
67269: PUSH
67270: LD_VAR 0 10
67274: PLUS
67275: PPUSH
67276: CALL_OW 272
67280: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
67281: LD_ADDR_VAR 0 7
67285: PUSH
67286: LD_VAR 0 6
67290: PPUSH
67291: LD_VAR 0 8
67295: PPUSH
67296: LD_VAR 0 9
67300: PUSH
67301: LD_VAR 0 10
67305: PLUS
67306: PPUSH
67307: CALL_OW 273
67311: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
67312: LD_VAR 0 5
67316: PPUSH
67317: LD_VAR 0 7
67321: PPUSH
67322: CALL_OW 488
67326: PUSH
67327: LD_VAR 0 5
67331: PPUSH
67332: LD_VAR 0 7
67336: PPUSH
67337: CALL_OW 428
67341: PPUSH
67342: CALL_OW 247
67346: PUSH
67347: LD_INT 3
67349: PUSH
67350: LD_INT 2
67352: PUSH
67353: EMPTY
67354: LIST
67355: LIST
67356: IN
67357: NOT
67358: AND
67359: IFFALSE 67403
// begin ComMoveXY ( unit , _x , _y ) ;
67361: LD_VAR 0 1
67365: PPUSH
67366: LD_VAR 0 5
67370: PPUSH
67371: LD_VAR 0 7
67375: PPUSH
67376: CALL_OW 111
// result := [ _x , _y ] ;
67380: LD_ADDR_VAR 0 3
67384: PUSH
67385: LD_VAR 0 5
67389: PUSH
67390: LD_VAR 0 7
67394: PUSH
67395: EMPTY
67396: LIST
67397: LIST
67398: ST_TO_ADDR
// exit ;
67399: POP
67400: POP
67401: GO 67407
// end ; end ;
67403: GO 67247
67405: POP
67406: POP
// end ;
67407: LD_VAR 0 3
67411: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
67412: LD_INT 0
67414: PPUSH
67415: PPUSH
67416: PPUSH
// result := 0 ;
67417: LD_ADDR_VAR 0 3
67421: PUSH
67422: LD_INT 0
67424: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
67425: LD_VAR 0 1
67429: PUSH
67430: LD_INT 0
67432: LESS
67433: PUSH
67434: LD_VAR 0 1
67438: PUSH
67439: LD_INT 8
67441: GREATER
67442: OR
67443: PUSH
67444: LD_VAR 0 2
67448: PUSH
67449: LD_INT 0
67451: LESS
67452: OR
67453: PUSH
67454: LD_VAR 0 2
67458: PUSH
67459: LD_INT 8
67461: GREATER
67462: OR
67463: IFFALSE 67467
// exit ;
67465: GO 67542
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
67467: LD_ADDR_VAR 0 4
67471: PUSH
67472: LD_INT 22
67474: PUSH
67475: LD_VAR 0 2
67479: PUSH
67480: EMPTY
67481: LIST
67482: LIST
67483: PPUSH
67484: CALL_OW 69
67488: PUSH
67489: FOR_IN
67490: IFFALSE 67540
// begin un := UnitShoot ( i ) ;
67492: LD_ADDR_VAR 0 5
67496: PUSH
67497: LD_VAR 0 4
67501: PPUSH
67502: CALL_OW 504
67506: ST_TO_ADDR
// if GetSide ( un ) = side1 then
67507: LD_VAR 0 5
67511: PPUSH
67512: CALL_OW 255
67516: PUSH
67517: LD_VAR 0 1
67521: EQUAL
67522: IFFALSE 67538
// begin result := un ;
67524: LD_ADDR_VAR 0 3
67528: PUSH
67529: LD_VAR 0 5
67533: ST_TO_ADDR
// exit ;
67534: POP
67535: POP
67536: GO 67542
// end ; end ;
67538: GO 67489
67540: POP
67541: POP
// end ;
67542: LD_VAR 0 3
67546: RET
// export function GetCargoBay ( units ) ; begin
67547: LD_INT 0
67549: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
67550: LD_ADDR_VAR 0 2
67554: PUSH
67555: LD_VAR 0 1
67559: PPUSH
67560: LD_INT 2
67562: PUSH
67563: LD_INT 34
67565: PUSH
67566: LD_INT 12
67568: PUSH
67569: EMPTY
67570: LIST
67571: LIST
67572: PUSH
67573: LD_INT 34
67575: PUSH
67576: LD_INT 51
67578: PUSH
67579: EMPTY
67580: LIST
67581: LIST
67582: PUSH
67583: LD_INT 34
67585: PUSH
67586: LD_INT 32
67588: PUSH
67589: EMPTY
67590: LIST
67591: LIST
67592: PUSH
67593: LD_INT 34
67595: PUSH
67596: LD_INT 89
67598: PUSH
67599: EMPTY
67600: LIST
67601: LIST
67602: PUSH
67603: EMPTY
67604: LIST
67605: LIST
67606: LIST
67607: LIST
67608: LIST
67609: PPUSH
67610: CALL_OW 72
67614: ST_TO_ADDR
// end ;
67615: LD_VAR 0 2
67619: RET
// export function Negate ( value ) ; begin
67620: LD_INT 0
67622: PPUSH
// result := not value ;
67623: LD_ADDR_VAR 0 2
67627: PUSH
67628: LD_VAR 0 1
67632: NOT
67633: ST_TO_ADDR
// end ;
67634: LD_VAR 0 2
67638: RET
// export function Inc ( value ) ; begin
67639: LD_INT 0
67641: PPUSH
// result := value + 1 ;
67642: LD_ADDR_VAR 0 2
67646: PUSH
67647: LD_VAR 0 1
67651: PUSH
67652: LD_INT 1
67654: PLUS
67655: ST_TO_ADDR
// end ;
67656: LD_VAR 0 2
67660: RET
// export function Dec ( value ) ; begin
67661: LD_INT 0
67663: PPUSH
// result := value - 1 ;
67664: LD_ADDR_VAR 0 2
67668: PUSH
67669: LD_VAR 0 1
67673: PUSH
67674: LD_INT 1
67676: MINUS
67677: ST_TO_ADDR
// end ;
67678: LD_VAR 0 2
67682: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
67683: LD_INT 0
67685: PPUSH
67686: PPUSH
67687: PPUSH
67688: PPUSH
67689: PPUSH
67690: PPUSH
67691: PPUSH
67692: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
67693: LD_VAR 0 1
67697: PPUSH
67698: LD_VAR 0 2
67702: PPUSH
67703: CALL_OW 488
67707: NOT
67708: PUSH
67709: LD_VAR 0 3
67713: PPUSH
67714: LD_VAR 0 4
67718: PPUSH
67719: CALL_OW 488
67723: NOT
67724: OR
67725: IFFALSE 67738
// begin result := - 1 ;
67727: LD_ADDR_VAR 0 5
67731: PUSH
67732: LD_INT 1
67734: NEG
67735: ST_TO_ADDR
// exit ;
67736: GO 67973
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
67738: LD_ADDR_VAR 0 12
67742: PUSH
67743: LD_VAR 0 1
67747: PPUSH
67748: LD_VAR 0 2
67752: PPUSH
67753: LD_VAR 0 3
67757: PPUSH
67758: LD_VAR 0 4
67762: PPUSH
67763: CALL 66823 0 4
67767: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
67768: LD_ADDR_VAR 0 11
67772: PUSH
67773: LD_VAR 0 1
67777: PPUSH
67778: LD_VAR 0 2
67782: PPUSH
67783: LD_VAR 0 12
67787: PUSH
67788: LD_INT 1
67790: ARRAY
67791: PPUSH
67792: LD_VAR 0 12
67796: PUSH
67797: LD_INT 2
67799: ARRAY
67800: PPUSH
67801: CALL_OW 298
67805: ST_TO_ADDR
// distance := 9999 ;
67806: LD_ADDR_VAR 0 10
67810: PUSH
67811: LD_INT 9999
67813: ST_TO_ADDR
// for i := 0 to 5 do
67814: LD_ADDR_VAR 0 6
67818: PUSH
67819: DOUBLE
67820: LD_INT 0
67822: DEC
67823: ST_TO_ADDR
67824: LD_INT 5
67826: PUSH
67827: FOR_TO
67828: IFFALSE 67971
// begin _x := ShiftX ( x1 , i , centerDist ) ;
67830: LD_ADDR_VAR 0 7
67834: PUSH
67835: LD_VAR 0 1
67839: PPUSH
67840: LD_VAR 0 6
67844: PPUSH
67845: LD_VAR 0 11
67849: PPUSH
67850: CALL_OW 272
67854: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
67855: LD_ADDR_VAR 0 8
67859: PUSH
67860: LD_VAR 0 2
67864: PPUSH
67865: LD_VAR 0 6
67869: PPUSH
67870: LD_VAR 0 11
67874: PPUSH
67875: CALL_OW 273
67879: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
67880: LD_VAR 0 7
67884: PPUSH
67885: LD_VAR 0 8
67889: PPUSH
67890: CALL_OW 488
67894: NOT
67895: IFFALSE 67899
// continue ;
67897: GO 67827
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
67899: LD_ADDR_VAR 0 9
67903: PUSH
67904: LD_VAR 0 12
67908: PUSH
67909: LD_INT 1
67911: ARRAY
67912: PPUSH
67913: LD_VAR 0 12
67917: PUSH
67918: LD_INT 2
67920: ARRAY
67921: PPUSH
67922: LD_VAR 0 7
67926: PPUSH
67927: LD_VAR 0 8
67931: PPUSH
67932: CALL_OW 298
67936: ST_TO_ADDR
// if tmp < distance then
67937: LD_VAR 0 9
67941: PUSH
67942: LD_VAR 0 10
67946: LESS
67947: IFFALSE 67969
// begin result := i ;
67949: LD_ADDR_VAR 0 5
67953: PUSH
67954: LD_VAR 0 6
67958: ST_TO_ADDR
// distance := tmp ;
67959: LD_ADDR_VAR 0 10
67963: PUSH
67964: LD_VAR 0 9
67968: ST_TO_ADDR
// end ; end ;
67969: GO 67827
67971: POP
67972: POP
// end ;
67973: LD_VAR 0 5
67977: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
67978: LD_INT 0
67980: PPUSH
67981: PPUSH
// if not driver or not IsInUnit ( driver ) then
67982: LD_VAR 0 1
67986: NOT
67987: PUSH
67988: LD_VAR 0 1
67992: PPUSH
67993: CALL_OW 310
67997: NOT
67998: OR
67999: IFFALSE 68003
// exit ;
68001: GO 68093
// vehicle := IsInUnit ( driver ) ;
68003: LD_ADDR_VAR 0 3
68007: PUSH
68008: LD_VAR 0 1
68012: PPUSH
68013: CALL_OW 310
68017: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
68018: LD_VAR 0 1
68022: PPUSH
68023: LD_STRING \
68025: PUSH
68026: LD_INT 0
68028: PUSH
68029: LD_INT 0
68031: PUSH
68032: LD_INT 0
68034: PUSH
68035: LD_INT 0
68037: PUSH
68038: LD_INT 0
68040: PUSH
68041: LD_INT 0
68043: PUSH
68044: EMPTY
68045: LIST
68046: LIST
68047: LIST
68048: LIST
68049: LIST
68050: LIST
68051: LIST
68052: PUSH
68053: LD_STRING E
68055: PUSH
68056: LD_INT 0
68058: PUSH
68059: LD_INT 0
68061: PUSH
68062: LD_VAR 0 3
68066: PUSH
68067: LD_INT 0
68069: PUSH
68070: LD_INT 0
68072: PUSH
68073: LD_INT 0
68075: PUSH
68076: EMPTY
68077: LIST
68078: LIST
68079: LIST
68080: LIST
68081: LIST
68082: LIST
68083: LIST
68084: PUSH
68085: EMPTY
68086: LIST
68087: LIST
68088: PPUSH
68089: CALL_OW 446
// end ;
68093: LD_VAR 0 2
68097: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
68098: LD_INT 0
68100: PPUSH
68101: PPUSH
// if not driver or not IsInUnit ( driver ) then
68102: LD_VAR 0 1
68106: NOT
68107: PUSH
68108: LD_VAR 0 1
68112: PPUSH
68113: CALL_OW 310
68117: NOT
68118: OR
68119: IFFALSE 68123
// exit ;
68121: GO 68213
// vehicle := IsInUnit ( driver ) ;
68123: LD_ADDR_VAR 0 3
68127: PUSH
68128: LD_VAR 0 1
68132: PPUSH
68133: CALL_OW 310
68137: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
68138: LD_VAR 0 1
68142: PPUSH
68143: LD_STRING \
68145: PUSH
68146: LD_INT 0
68148: PUSH
68149: LD_INT 0
68151: PUSH
68152: LD_INT 0
68154: PUSH
68155: LD_INT 0
68157: PUSH
68158: LD_INT 0
68160: PUSH
68161: LD_INT 0
68163: PUSH
68164: EMPTY
68165: LIST
68166: LIST
68167: LIST
68168: LIST
68169: LIST
68170: LIST
68171: LIST
68172: PUSH
68173: LD_STRING E
68175: PUSH
68176: LD_INT 0
68178: PUSH
68179: LD_INT 0
68181: PUSH
68182: LD_VAR 0 3
68186: PUSH
68187: LD_INT 0
68189: PUSH
68190: LD_INT 0
68192: PUSH
68193: LD_INT 0
68195: PUSH
68196: EMPTY
68197: LIST
68198: LIST
68199: LIST
68200: LIST
68201: LIST
68202: LIST
68203: LIST
68204: PUSH
68205: EMPTY
68206: LIST
68207: LIST
68208: PPUSH
68209: CALL_OW 447
// end ;
68213: LD_VAR 0 2
68217: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
68218: LD_INT 0
68220: PPUSH
68221: PPUSH
68222: PPUSH
// tmp := [ ] ;
68223: LD_ADDR_VAR 0 5
68227: PUSH
68228: EMPTY
68229: ST_TO_ADDR
// for i in units do
68230: LD_ADDR_VAR 0 4
68234: PUSH
68235: LD_VAR 0 1
68239: PUSH
68240: FOR_IN
68241: IFFALSE 68279
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
68243: LD_ADDR_VAR 0 5
68247: PUSH
68248: LD_VAR 0 5
68252: PPUSH
68253: LD_VAR 0 5
68257: PUSH
68258: LD_INT 1
68260: PLUS
68261: PPUSH
68262: LD_VAR 0 4
68266: PPUSH
68267: CALL_OW 256
68271: PPUSH
68272: CALL_OW 2
68276: ST_TO_ADDR
68277: GO 68240
68279: POP
68280: POP
// if not tmp then
68281: LD_VAR 0 5
68285: NOT
68286: IFFALSE 68290
// exit ;
68288: GO 68338
// if asc then
68290: LD_VAR 0 2
68294: IFFALSE 68318
// result := SortListByListAsc ( units , tmp ) else
68296: LD_ADDR_VAR 0 3
68300: PUSH
68301: LD_VAR 0 1
68305: PPUSH
68306: LD_VAR 0 5
68310: PPUSH
68311: CALL_OW 76
68315: ST_TO_ADDR
68316: GO 68338
// result := SortListByListDesc ( units , tmp ) ;
68318: LD_ADDR_VAR 0 3
68322: PUSH
68323: LD_VAR 0 1
68327: PPUSH
68328: LD_VAR 0 5
68332: PPUSH
68333: CALL_OW 77
68337: ST_TO_ADDR
// end ;
68338: LD_VAR 0 3
68342: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
68343: LD_INT 0
68345: PPUSH
68346: PPUSH
// task := GetTaskList ( mech ) ;
68347: LD_ADDR_VAR 0 4
68351: PUSH
68352: LD_VAR 0 1
68356: PPUSH
68357: CALL_OW 437
68361: ST_TO_ADDR
// if not task then
68362: LD_VAR 0 4
68366: NOT
68367: IFFALSE 68371
// exit ;
68369: GO 68413
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
68371: LD_ADDR_VAR 0 3
68375: PUSH
68376: LD_VAR 0 4
68380: PUSH
68381: LD_INT 1
68383: ARRAY
68384: PUSH
68385: LD_INT 1
68387: ARRAY
68388: PUSH
68389: LD_STRING r
68391: EQUAL
68392: PUSH
68393: LD_VAR 0 4
68397: PUSH
68398: LD_INT 1
68400: ARRAY
68401: PUSH
68402: LD_INT 4
68404: ARRAY
68405: PUSH
68406: LD_VAR 0 2
68410: EQUAL
68411: AND
68412: ST_TO_ADDR
// end ;
68413: LD_VAR 0 3
68417: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
68418: LD_INT 0
68420: PPUSH
// SetDir ( unit , d ) ;
68421: LD_VAR 0 1
68425: PPUSH
68426: LD_VAR 0 4
68430: PPUSH
68431: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
68435: LD_VAR 0 1
68439: PPUSH
68440: LD_VAR 0 2
68444: PPUSH
68445: LD_VAR 0 3
68449: PPUSH
68450: LD_VAR 0 5
68454: PPUSH
68455: CALL_OW 48
// end ;
68459: LD_VAR 0 6
68463: RET
// export function ToNaturalNumber ( number ) ; begin
68464: LD_INT 0
68466: PPUSH
// result := number div 1 ;
68467: LD_ADDR_VAR 0 2
68471: PUSH
68472: LD_VAR 0 1
68476: PUSH
68477: LD_INT 1
68479: DIV
68480: ST_TO_ADDR
// if number < 0 then
68481: LD_VAR 0 1
68485: PUSH
68486: LD_INT 0
68488: LESS
68489: IFFALSE 68499
// result := 0 ;
68491: LD_ADDR_VAR 0 2
68495: PUSH
68496: LD_INT 0
68498: ST_TO_ADDR
// end ;
68499: LD_VAR 0 2
68503: RET
// export function SortByClass ( units , class ) ; var un ; begin
68504: LD_INT 0
68506: PPUSH
68507: PPUSH
// if not units or not class then
68508: LD_VAR 0 1
68512: NOT
68513: PUSH
68514: LD_VAR 0 2
68518: NOT
68519: OR
68520: IFFALSE 68524
// exit ;
68522: GO 68619
// result := [ ] ;
68524: LD_ADDR_VAR 0 3
68528: PUSH
68529: EMPTY
68530: ST_TO_ADDR
// for un in units do
68531: LD_ADDR_VAR 0 4
68535: PUSH
68536: LD_VAR 0 1
68540: PUSH
68541: FOR_IN
68542: IFFALSE 68617
// if GetClass ( un ) = class then
68544: LD_VAR 0 4
68548: PPUSH
68549: CALL_OW 257
68553: PUSH
68554: LD_VAR 0 2
68558: EQUAL
68559: IFFALSE 68586
// result := Insert ( result , 1 , un ) else
68561: LD_ADDR_VAR 0 3
68565: PUSH
68566: LD_VAR 0 3
68570: PPUSH
68571: LD_INT 1
68573: PPUSH
68574: LD_VAR 0 4
68578: PPUSH
68579: CALL_OW 2
68583: ST_TO_ADDR
68584: GO 68615
// result := Replace ( result , result + 1 , un ) ;
68586: LD_ADDR_VAR 0 3
68590: PUSH
68591: LD_VAR 0 3
68595: PPUSH
68596: LD_VAR 0 3
68600: PUSH
68601: LD_INT 1
68603: PLUS
68604: PPUSH
68605: LD_VAR 0 4
68609: PPUSH
68610: CALL_OW 1
68614: ST_TO_ADDR
68615: GO 68541
68617: POP
68618: POP
// end ;
68619: LD_VAR 0 3
68623: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
68624: LD_INT 0
68626: PPUSH
68627: PPUSH
68628: PPUSH
68629: PPUSH
68630: PPUSH
68631: PPUSH
68632: PPUSH
// result := [ ] ;
68633: LD_ADDR_VAR 0 4
68637: PUSH
68638: EMPTY
68639: ST_TO_ADDR
// if x - r < 0 then
68640: LD_VAR 0 1
68644: PUSH
68645: LD_VAR 0 3
68649: MINUS
68650: PUSH
68651: LD_INT 0
68653: LESS
68654: IFFALSE 68666
// min_x := 0 else
68656: LD_ADDR_VAR 0 8
68660: PUSH
68661: LD_INT 0
68663: ST_TO_ADDR
68664: GO 68682
// min_x := x - r ;
68666: LD_ADDR_VAR 0 8
68670: PUSH
68671: LD_VAR 0 1
68675: PUSH
68676: LD_VAR 0 3
68680: MINUS
68681: ST_TO_ADDR
// if y - r < 0 then
68682: LD_VAR 0 2
68686: PUSH
68687: LD_VAR 0 3
68691: MINUS
68692: PUSH
68693: LD_INT 0
68695: LESS
68696: IFFALSE 68708
// min_y := 0 else
68698: LD_ADDR_VAR 0 7
68702: PUSH
68703: LD_INT 0
68705: ST_TO_ADDR
68706: GO 68724
// min_y := y - r ;
68708: LD_ADDR_VAR 0 7
68712: PUSH
68713: LD_VAR 0 2
68717: PUSH
68718: LD_VAR 0 3
68722: MINUS
68723: ST_TO_ADDR
// max_x := x + r ;
68724: LD_ADDR_VAR 0 9
68728: PUSH
68729: LD_VAR 0 1
68733: PUSH
68734: LD_VAR 0 3
68738: PLUS
68739: ST_TO_ADDR
// max_y := y + r ;
68740: LD_ADDR_VAR 0 10
68744: PUSH
68745: LD_VAR 0 2
68749: PUSH
68750: LD_VAR 0 3
68754: PLUS
68755: ST_TO_ADDR
// for _x = min_x to max_x do
68756: LD_ADDR_VAR 0 5
68760: PUSH
68761: DOUBLE
68762: LD_VAR 0 8
68766: DEC
68767: ST_TO_ADDR
68768: LD_VAR 0 9
68772: PUSH
68773: FOR_TO
68774: IFFALSE 68875
// for _y = min_y to max_y do
68776: LD_ADDR_VAR 0 6
68780: PUSH
68781: DOUBLE
68782: LD_VAR 0 7
68786: DEC
68787: ST_TO_ADDR
68788: LD_VAR 0 10
68792: PUSH
68793: FOR_TO
68794: IFFALSE 68871
// begin if not ValidHex ( _x , _y ) then
68796: LD_VAR 0 5
68800: PPUSH
68801: LD_VAR 0 6
68805: PPUSH
68806: CALL_OW 488
68810: NOT
68811: IFFALSE 68815
// continue ;
68813: GO 68793
// if GetResourceTypeXY ( _x , _y ) then
68815: LD_VAR 0 5
68819: PPUSH
68820: LD_VAR 0 6
68824: PPUSH
68825: CALL_OW 283
68829: IFFALSE 68869
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
68831: LD_ADDR_VAR 0 4
68835: PUSH
68836: LD_VAR 0 4
68840: PPUSH
68841: LD_VAR 0 4
68845: PUSH
68846: LD_INT 1
68848: PLUS
68849: PPUSH
68850: LD_VAR 0 5
68854: PUSH
68855: LD_VAR 0 6
68859: PUSH
68860: EMPTY
68861: LIST
68862: LIST
68863: PPUSH
68864: CALL_OW 1
68868: ST_TO_ADDR
// end ;
68869: GO 68793
68871: POP
68872: POP
68873: GO 68773
68875: POP
68876: POP
// end ;
68877: LD_VAR 0 4
68881: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
68882: LD_INT 0
68884: PPUSH
68885: PPUSH
68886: PPUSH
68887: PPUSH
68888: PPUSH
68889: PPUSH
68890: PPUSH
68891: PPUSH
// if not units then
68892: LD_VAR 0 1
68896: NOT
68897: IFFALSE 68901
// exit ;
68899: GO 69425
// result := UnitFilter ( units , [ f_ok ] ) ;
68901: LD_ADDR_VAR 0 3
68905: PUSH
68906: LD_VAR 0 1
68910: PPUSH
68911: LD_INT 50
68913: PUSH
68914: EMPTY
68915: LIST
68916: PPUSH
68917: CALL_OW 72
68921: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
68922: LD_ADDR_VAR 0 8
68926: PUSH
68927: LD_VAR 0 1
68931: PUSH
68932: LD_INT 1
68934: ARRAY
68935: PPUSH
68936: CALL_OW 255
68940: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
68941: LD_ADDR_VAR 0 10
68945: PUSH
68946: LD_INT 29
68948: PUSH
68949: LD_INT 91
68951: PUSH
68952: LD_INT 49
68954: PUSH
68955: EMPTY
68956: LIST
68957: LIST
68958: LIST
68959: ST_TO_ADDR
// if not result then
68960: LD_VAR 0 3
68964: NOT
68965: IFFALSE 68969
// exit ;
68967: GO 69425
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
68969: LD_ADDR_VAR 0 5
68973: PUSH
68974: LD_INT 81
68976: PUSH
68977: LD_VAR 0 8
68981: PUSH
68982: EMPTY
68983: LIST
68984: LIST
68985: PPUSH
68986: CALL_OW 69
68990: ST_TO_ADDR
// for i in result do
68991: LD_ADDR_VAR 0 4
68995: PUSH
68996: LD_VAR 0 3
69000: PUSH
69001: FOR_IN
69002: IFFALSE 69423
// begin tag := GetTag ( i ) + 1 ;
69004: LD_ADDR_VAR 0 9
69008: PUSH
69009: LD_VAR 0 4
69013: PPUSH
69014: CALL_OW 110
69018: PUSH
69019: LD_INT 1
69021: PLUS
69022: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
69023: LD_ADDR_VAR 0 7
69027: PUSH
69028: LD_VAR 0 4
69032: PPUSH
69033: CALL_OW 250
69037: PPUSH
69038: LD_VAR 0 4
69042: PPUSH
69043: CALL_OW 251
69047: PPUSH
69048: LD_INT 6
69050: PPUSH
69051: CALL 68624 0 3
69055: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
69056: LD_VAR 0 4
69060: PPUSH
69061: CALL_OW 247
69065: PUSH
69066: LD_INT 2
69068: EQUAL
69069: PUSH
69070: LD_VAR 0 7
69074: AND
69075: PUSH
69076: LD_VAR 0 4
69080: PPUSH
69081: CALL_OW 264
69085: PUSH
69086: LD_VAR 0 10
69090: IN
69091: NOT
69092: AND
69093: IFFALSE 69132
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
69095: LD_VAR 0 4
69099: PPUSH
69100: LD_VAR 0 7
69104: PUSH
69105: LD_INT 1
69107: ARRAY
69108: PUSH
69109: LD_INT 1
69111: ARRAY
69112: PPUSH
69113: LD_VAR 0 7
69117: PUSH
69118: LD_INT 1
69120: ARRAY
69121: PUSH
69122: LD_INT 2
69124: ARRAY
69125: PPUSH
69126: CALL_OW 116
69130: GO 69421
// if path > tag then
69132: LD_VAR 0 2
69136: PUSH
69137: LD_VAR 0 9
69141: GREATER
69142: IFFALSE 69350
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
69144: LD_ADDR_VAR 0 6
69148: PUSH
69149: LD_VAR 0 5
69153: PPUSH
69154: LD_INT 91
69156: PUSH
69157: LD_VAR 0 4
69161: PUSH
69162: LD_INT 8
69164: PUSH
69165: EMPTY
69166: LIST
69167: LIST
69168: LIST
69169: PPUSH
69170: CALL_OW 72
69174: ST_TO_ADDR
// if nearEnemy then
69175: LD_VAR 0 6
69179: IFFALSE 69248
// begin if GetWeapon ( i ) = ru_time_lapser then
69181: LD_VAR 0 4
69185: PPUSH
69186: CALL_OW 264
69190: PUSH
69191: LD_INT 49
69193: EQUAL
69194: IFFALSE 69222
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
69196: LD_VAR 0 4
69200: PPUSH
69201: LD_VAR 0 6
69205: PPUSH
69206: LD_VAR 0 4
69210: PPUSH
69211: CALL_OW 74
69215: PPUSH
69216: CALL_OW 112
69220: GO 69246
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
69222: LD_VAR 0 4
69226: PPUSH
69227: LD_VAR 0 6
69231: PPUSH
69232: LD_VAR 0 4
69236: PPUSH
69237: CALL_OW 74
69241: PPUSH
69242: CALL_OW 115
// end else
69246: GO 69348
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
69248: LD_VAR 0 4
69252: PPUSH
69253: LD_VAR 0 2
69257: PUSH
69258: LD_VAR 0 9
69262: ARRAY
69263: PUSH
69264: LD_INT 1
69266: ARRAY
69267: PPUSH
69268: LD_VAR 0 2
69272: PUSH
69273: LD_VAR 0 9
69277: ARRAY
69278: PUSH
69279: LD_INT 2
69281: ARRAY
69282: PPUSH
69283: CALL_OW 297
69287: PUSH
69288: LD_INT 6
69290: GREATER
69291: IFFALSE 69334
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
69293: LD_VAR 0 4
69297: PPUSH
69298: LD_VAR 0 2
69302: PUSH
69303: LD_VAR 0 9
69307: ARRAY
69308: PUSH
69309: LD_INT 1
69311: ARRAY
69312: PPUSH
69313: LD_VAR 0 2
69317: PUSH
69318: LD_VAR 0 9
69322: ARRAY
69323: PUSH
69324: LD_INT 2
69326: ARRAY
69327: PPUSH
69328: CALL_OW 114
69332: GO 69348
// SetTag ( i , tag ) ;
69334: LD_VAR 0 4
69338: PPUSH
69339: LD_VAR 0 9
69343: PPUSH
69344: CALL_OW 109
// end else
69348: GO 69421
// if enemy then
69350: LD_VAR 0 5
69354: IFFALSE 69421
// begin if GetWeapon ( i ) = ru_time_lapser then
69356: LD_VAR 0 4
69360: PPUSH
69361: CALL_OW 264
69365: PUSH
69366: LD_INT 49
69368: EQUAL
69369: IFFALSE 69397
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
69371: LD_VAR 0 4
69375: PPUSH
69376: LD_VAR 0 5
69380: PPUSH
69381: LD_VAR 0 4
69385: PPUSH
69386: CALL_OW 74
69390: PPUSH
69391: CALL_OW 112
69395: GO 69421
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
69397: LD_VAR 0 4
69401: PPUSH
69402: LD_VAR 0 5
69406: PPUSH
69407: LD_VAR 0 4
69411: PPUSH
69412: CALL_OW 74
69416: PPUSH
69417: CALL_OW 115
// end ; end ;
69421: GO 69001
69423: POP
69424: POP
// end ;
69425: LD_VAR 0 3
69429: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
69430: LD_INT 0
69432: PPUSH
69433: PPUSH
69434: PPUSH
// if not unit or IsInUnit ( unit ) then
69435: LD_VAR 0 1
69439: NOT
69440: PUSH
69441: LD_VAR 0 1
69445: PPUSH
69446: CALL_OW 310
69450: OR
69451: IFFALSE 69455
// exit ;
69453: GO 69546
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
69455: LD_ADDR_VAR 0 4
69459: PUSH
69460: LD_VAR 0 1
69464: PPUSH
69465: CALL_OW 250
69469: PPUSH
69470: LD_VAR 0 2
69474: PPUSH
69475: LD_INT 1
69477: PPUSH
69478: CALL_OW 272
69482: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
69483: LD_ADDR_VAR 0 5
69487: PUSH
69488: LD_VAR 0 1
69492: PPUSH
69493: CALL_OW 251
69497: PPUSH
69498: LD_VAR 0 2
69502: PPUSH
69503: LD_INT 1
69505: PPUSH
69506: CALL_OW 273
69510: ST_TO_ADDR
// if ValidHex ( x , y ) then
69511: LD_VAR 0 4
69515: PPUSH
69516: LD_VAR 0 5
69520: PPUSH
69521: CALL_OW 488
69525: IFFALSE 69546
// ComTurnXY ( unit , x , y ) ;
69527: LD_VAR 0 1
69531: PPUSH
69532: LD_VAR 0 4
69536: PPUSH
69537: LD_VAR 0 5
69541: PPUSH
69542: CALL_OW 118
// end ;
69546: LD_VAR 0 3
69550: RET
// export function SeeUnits ( side , units ) ; var i ; begin
69551: LD_INT 0
69553: PPUSH
69554: PPUSH
// result := false ;
69555: LD_ADDR_VAR 0 3
69559: PUSH
69560: LD_INT 0
69562: ST_TO_ADDR
// if not units then
69563: LD_VAR 0 2
69567: NOT
69568: IFFALSE 69572
// exit ;
69570: GO 69617
// for i in units do
69572: LD_ADDR_VAR 0 4
69576: PUSH
69577: LD_VAR 0 2
69581: PUSH
69582: FOR_IN
69583: IFFALSE 69615
// if See ( side , i ) then
69585: LD_VAR 0 1
69589: PPUSH
69590: LD_VAR 0 4
69594: PPUSH
69595: CALL_OW 292
69599: IFFALSE 69613
// begin result := true ;
69601: LD_ADDR_VAR 0 3
69605: PUSH
69606: LD_INT 1
69608: ST_TO_ADDR
// exit ;
69609: POP
69610: POP
69611: GO 69617
// end ;
69613: GO 69582
69615: POP
69616: POP
// end ;
69617: LD_VAR 0 3
69621: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
69622: LD_INT 0
69624: PPUSH
69625: PPUSH
69626: PPUSH
69627: PPUSH
// if not unit or not points then
69628: LD_VAR 0 1
69632: NOT
69633: PUSH
69634: LD_VAR 0 2
69638: NOT
69639: OR
69640: IFFALSE 69644
// exit ;
69642: GO 69734
// dist := 99999 ;
69644: LD_ADDR_VAR 0 5
69648: PUSH
69649: LD_INT 99999
69651: ST_TO_ADDR
// for i in points do
69652: LD_ADDR_VAR 0 4
69656: PUSH
69657: LD_VAR 0 2
69661: PUSH
69662: FOR_IN
69663: IFFALSE 69732
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
69665: LD_ADDR_VAR 0 6
69669: PUSH
69670: LD_VAR 0 1
69674: PPUSH
69675: LD_VAR 0 4
69679: PUSH
69680: LD_INT 1
69682: ARRAY
69683: PPUSH
69684: LD_VAR 0 4
69688: PUSH
69689: LD_INT 2
69691: ARRAY
69692: PPUSH
69693: CALL_OW 297
69697: ST_TO_ADDR
// if tmpDist < dist then
69698: LD_VAR 0 6
69702: PUSH
69703: LD_VAR 0 5
69707: LESS
69708: IFFALSE 69730
// begin result := i ;
69710: LD_ADDR_VAR 0 3
69714: PUSH
69715: LD_VAR 0 4
69719: ST_TO_ADDR
// dist := tmpDist ;
69720: LD_ADDR_VAR 0 5
69724: PUSH
69725: LD_VAR 0 6
69729: ST_TO_ADDR
// end ; end ;
69730: GO 69662
69732: POP
69733: POP
// end ;
69734: LD_VAR 0 3
69738: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
69739: LD_INT 0
69741: PPUSH
// uc_side := side ;
69742: LD_ADDR_OWVAR 20
69746: PUSH
69747: LD_VAR 0 1
69751: ST_TO_ADDR
// uc_nation := 3 ;
69752: LD_ADDR_OWVAR 21
69756: PUSH
69757: LD_INT 3
69759: ST_TO_ADDR
// vc_chassis := 25 ;
69760: LD_ADDR_OWVAR 37
69764: PUSH
69765: LD_INT 25
69767: ST_TO_ADDR
// vc_engine := engine_siberite ;
69768: LD_ADDR_OWVAR 39
69772: PUSH
69773: LD_INT 3
69775: ST_TO_ADDR
// vc_control := control_computer ;
69776: LD_ADDR_OWVAR 38
69780: PUSH
69781: LD_INT 3
69783: ST_TO_ADDR
// vc_weapon := 59 ;
69784: LD_ADDR_OWVAR 40
69788: PUSH
69789: LD_INT 59
69791: ST_TO_ADDR
// result := CreateVehicle ;
69792: LD_ADDR_VAR 0 5
69796: PUSH
69797: CALL_OW 45
69801: ST_TO_ADDR
// SetDir ( result , d ) ;
69802: LD_VAR 0 5
69806: PPUSH
69807: LD_VAR 0 4
69811: PPUSH
69812: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
69816: LD_VAR 0 5
69820: PPUSH
69821: LD_VAR 0 2
69825: PPUSH
69826: LD_VAR 0 3
69830: PPUSH
69831: LD_INT 0
69833: PPUSH
69834: CALL_OW 48
// end ;
69838: LD_VAR 0 5
69842: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
69843: LD_INT 0
69845: PPUSH
69846: PPUSH
69847: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
69848: LD_ADDR_VAR 0 2
69852: PUSH
69853: LD_INT 0
69855: PUSH
69856: LD_INT 0
69858: PUSH
69859: LD_INT 0
69861: PUSH
69862: LD_INT 0
69864: PUSH
69865: EMPTY
69866: LIST
69867: LIST
69868: LIST
69869: LIST
69870: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
69871: LD_VAR 0 1
69875: NOT
69876: PUSH
69877: LD_VAR 0 1
69881: PPUSH
69882: CALL_OW 264
69886: PUSH
69887: LD_INT 12
69889: PUSH
69890: LD_INT 51
69892: PUSH
69893: LD_INT 32
69895: PUSH
69896: LD_INT 89
69898: PUSH
69899: EMPTY
69900: LIST
69901: LIST
69902: LIST
69903: LIST
69904: IN
69905: NOT
69906: OR
69907: IFFALSE 69911
// exit ;
69909: GO 70009
// for i := 1 to 3 do
69911: LD_ADDR_VAR 0 3
69915: PUSH
69916: DOUBLE
69917: LD_INT 1
69919: DEC
69920: ST_TO_ADDR
69921: LD_INT 3
69923: PUSH
69924: FOR_TO
69925: IFFALSE 70007
// begin tmp := GetCargo ( cargo , i ) ;
69927: LD_ADDR_VAR 0 4
69931: PUSH
69932: LD_VAR 0 1
69936: PPUSH
69937: LD_VAR 0 3
69941: PPUSH
69942: CALL_OW 289
69946: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
69947: LD_ADDR_VAR 0 2
69951: PUSH
69952: LD_VAR 0 2
69956: PPUSH
69957: LD_VAR 0 3
69961: PPUSH
69962: LD_VAR 0 4
69966: PPUSH
69967: CALL_OW 1
69971: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
69972: LD_ADDR_VAR 0 2
69976: PUSH
69977: LD_VAR 0 2
69981: PPUSH
69982: LD_INT 4
69984: PPUSH
69985: LD_VAR 0 2
69989: PUSH
69990: LD_INT 4
69992: ARRAY
69993: PUSH
69994: LD_VAR 0 4
69998: PLUS
69999: PPUSH
70000: CALL_OW 1
70004: ST_TO_ADDR
// end ;
70005: GO 69924
70007: POP
70008: POP
// end ;
70009: LD_VAR 0 2
70013: RET
// export function Length ( array ) ; begin
70014: LD_INT 0
70016: PPUSH
// result := array + 0 ;
70017: LD_ADDR_VAR 0 2
70021: PUSH
70022: LD_VAR 0 1
70026: PUSH
70027: LD_INT 0
70029: PLUS
70030: ST_TO_ADDR
// end ;
70031: LD_VAR 0 2
70035: RET
// export function PrepareArray ( array ) ; begin
70036: LD_INT 0
70038: PPUSH
// result := array diff 0 ;
70039: LD_ADDR_VAR 0 2
70043: PUSH
70044: LD_VAR 0 1
70048: PUSH
70049: LD_INT 0
70051: DIFF
70052: ST_TO_ADDR
// if not result [ 1 ] then
70053: LD_VAR 0 2
70057: PUSH
70058: LD_INT 1
70060: ARRAY
70061: NOT
70062: IFFALSE 70082
// result := Delete ( result , 1 ) ;
70064: LD_ADDR_VAR 0 2
70068: PUSH
70069: LD_VAR 0 2
70073: PPUSH
70074: LD_INT 1
70076: PPUSH
70077: CALL_OW 3
70081: ST_TO_ADDR
// end ;
70082: LD_VAR 0 2
70086: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
70087: LD_INT 0
70089: PPUSH
70090: PPUSH
70091: PPUSH
70092: PPUSH
// sibRocketRange := 25 ;
70093: LD_ADDR_VAR 0 6
70097: PUSH
70098: LD_INT 25
70100: ST_TO_ADDR
// result := false ;
70101: LD_ADDR_VAR 0 4
70105: PUSH
70106: LD_INT 0
70108: ST_TO_ADDR
// for i := 0 to 5 do
70109: LD_ADDR_VAR 0 5
70113: PUSH
70114: DOUBLE
70115: LD_INT 0
70117: DEC
70118: ST_TO_ADDR
70119: LD_INT 5
70121: PUSH
70122: FOR_TO
70123: IFFALSE 70190
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
70125: LD_VAR 0 1
70129: PPUSH
70130: LD_VAR 0 5
70134: PPUSH
70135: LD_VAR 0 6
70139: PPUSH
70140: CALL_OW 272
70144: PPUSH
70145: LD_VAR 0 2
70149: PPUSH
70150: LD_VAR 0 5
70154: PPUSH
70155: LD_VAR 0 6
70159: PPUSH
70160: CALL_OW 273
70164: PPUSH
70165: LD_VAR 0 3
70169: PPUSH
70170: CALL_OW 309
70174: IFFALSE 70188
// begin result := true ;
70176: LD_ADDR_VAR 0 4
70180: PUSH
70181: LD_INT 1
70183: ST_TO_ADDR
// exit ;
70184: POP
70185: POP
70186: GO 70192
// end ;
70188: GO 70122
70190: POP
70191: POP
// end ;
70192: LD_VAR 0 4
70196: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
70197: LD_INT 0
70199: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
70200: LD_VAR 0 1
70204: PPUSH
70205: LD_VAR 0 2
70209: PPUSH
70210: LD_INT 0
70212: PPUSH
70213: LD_INT 0
70215: PPUSH
70216: LD_INT 1
70218: PPUSH
70219: LD_INT 0
70221: PPUSH
70222: CALL_OW 587
// end ; end_of_file
70226: LD_VAR 0 3
70230: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
70231: LD_VAR 0 1
70235: PUSH
70236: LD_INT 200
70238: DOUBLE
70239: GREATEREQUAL
70240: IFFALSE 70248
70242: LD_INT 299
70244: DOUBLE
70245: LESSEQUAL
70246: IFTRUE 70250
70248: GO 70282
70250: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
70251: LD_VAR 0 1
70255: PPUSH
70256: LD_VAR 0 2
70260: PPUSH
70261: LD_VAR 0 3
70265: PPUSH
70266: LD_VAR 0 4
70270: PPUSH
70271: LD_VAR 0 5
70275: PPUSH
70276: CALL 24897 0 5
70280: GO 70359
70282: LD_INT 300
70284: DOUBLE
70285: GREATEREQUAL
70286: IFFALSE 70294
70288: LD_INT 399
70290: DOUBLE
70291: LESSEQUAL
70292: IFTRUE 70296
70294: GO 70358
70296: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
70297: LD_VAR 0 1
70301: PPUSH
70302: LD_VAR 0 2
70306: PPUSH
70307: LD_VAR 0 3
70311: PPUSH
70312: LD_VAR 0 4
70316: PPUSH
70317: LD_VAR 0 5
70321: PPUSH
70322: LD_VAR 0 6
70326: PPUSH
70327: LD_VAR 0 7
70331: PPUSH
70332: LD_VAR 0 8
70336: PPUSH
70337: LD_VAR 0 9
70341: PPUSH
70342: LD_VAR 0 10
70346: PPUSH
70347: LD_VAR 0 11
70351: PPUSH
70352: CALL 21230 0 11
70356: GO 70359
70358: POP
// end ;
70359: PPOPN 11
70361: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
70362: LD_VAR 0 1
70366: PPUSH
70367: LD_VAR 0 2
70371: PPUSH
70372: LD_VAR 0 3
70376: PPUSH
70377: LD_VAR 0 4
70381: PPUSH
70382: LD_VAR 0 5
70386: PPUSH
70387: CALL 24633 0 5
// end ; end_of_file
70391: PPOPN 5
70393: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
70394: LD_VAR 0 1
70398: PPUSH
70399: LD_VAR 0 2
70403: PPUSH
70404: LD_VAR 0 3
70408: PPUSH
70409: LD_VAR 0 4
70413: PPUSH
70414: LD_VAR 0 5
70418: PPUSH
70419: LD_VAR 0 6
70423: PPUSH
70424: CALL 8882 0 6
// end ;
70428: PPOPN 6
70430: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
70431: LD_INT 0
70433: PPUSH
// begin if not units then
70434: LD_VAR 0 1
70438: NOT
70439: IFFALSE 70443
// exit ;
70441: GO 70443
// end ;
70443: PPOPN 7
70445: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
70446: CALL 8786 0 0
// end ;
70450: PPOPN 1
70452: END
